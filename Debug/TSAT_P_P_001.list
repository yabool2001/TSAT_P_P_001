
TSAT_P_P_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000132c8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f5c  08013388  08013388  00023388  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080152e4  080152e4  000306e0  2**0
                  CONTENTS
  4 .ARM          00000008  080152e4  080152e4  000252e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080152ec  080152ec  000306e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080152ec  080152ec  000252ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080152f4  080152f4  000252f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006e0  20000000  080152f8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007ec  200006e0  080159d8  000306e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ecc  080159d8  00030ecc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000306e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030708  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001de9a  00000000  00000000  0003074b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ed4  00000000  00000000  0004e5e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ae8  00000000  00000000  000524c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001506  00000000  00000000  00053fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e0eb  00000000  00000000  000554ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ee3c  00000000  00000000  00073599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b187e  00000000  00000000  000923d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007d4c  00000000  00000000  00143c54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0014b9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006e0 	.word	0x200006e0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0801336c 	.word	0x0801336c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006e4 	.word	0x200006e4
 8000100:	0801336c 	.word	0x0801336c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b3 	bl	80015a4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f803 	bl	8001454 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a5 	bl	80015a4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f89b 	bl	80015a4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f82b 	bl	80014d8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f821 	bl	80014d8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f8a4 	bl	8000620 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_d2uiz>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	2200      	movs	r2, #0
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__aeabi_d2uiz+0x38>)
 8000546:	0004      	movs	r4, r0
 8000548:	000d      	movs	r5, r1
 800054a:	f7ff ffa1 	bl	8000490 <__aeabi_dcmpge>
 800054e:	2800      	cmp	r0, #0
 8000550:	d104      	bne.n	800055c <__aeabi_d2uiz+0x1c>
 8000552:	0020      	movs	r0, r4
 8000554:	0029      	movs	r1, r5
 8000556:	f001 feeb 	bl	8002330 <__aeabi_d2iz>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__aeabi_d2uiz+0x38>)
 800055e:	2200      	movs	r2, #0
 8000560:	0020      	movs	r0, r4
 8000562:	0029      	movs	r1, r5
 8000564:	f001 fb44 	bl	8001bf0 <__aeabi_dsub>
 8000568:	f001 fee2 	bl	8002330 <__aeabi_d2iz>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	061b      	lsls	r3, r3, #24
 8000570:	469c      	mov	ip, r3
 8000572:	4460      	add	r0, ip
 8000574:	e7f1      	b.n	800055a <__aeabi_d2uiz+0x1a>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	41e00000 	.word	0x41e00000

0800057c <__aeabi_d2lz>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	0005      	movs	r5, r0
 8000580:	000c      	movs	r4, r1
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0028      	movs	r0, r5
 8000588:	0021      	movs	r1, r4
 800058a:	f7ff ff63 	bl	8000454 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x28>
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e1      	adds	r1, r4, r3
 80005aa:	0028      	movs	r0, r5
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x22>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 f853 	bl	800166c <__aeabi_dmul>
 80005c6:	f7ff ffbb 	bl	8000540 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f001 ff16 	bl	80023fc <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 f84a 	bl	800166c <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dsub>
 80005e4:	f7ff ffac 	bl	8000540 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f001 fecf 	bl	800239c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 f833 	bl	800166c <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f001 fef6 	bl	80023fc <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 f8d0 	bl	80007b8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f001 ffa6 	bl	8002590 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f001 ffa1 	bl	8002590 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_dadd>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0004      	movs	r4, r0
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	001f      	movs	r7, r3
 80007c6:	030b      	lsls	r3, r1, #12
 80007c8:	0010      	movs	r0, r2
 80007ca:	004e      	lsls	r6, r1, #1
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0fcd      	lsrs	r5, r1, #31
 80007d0:	0f61      	lsrs	r1, r4, #29
 80007d2:	007a      	lsls	r2, r7, #1
 80007d4:	4319      	orrs	r1, r3
 80007d6:	00e3      	lsls	r3, r4, #3
 80007d8:	033c      	lsls	r4, r7, #12
 80007da:	0fff      	lsrs	r7, r7, #31
 80007dc:	46bc      	mov	ip, r7
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0f47      	lsrs	r7, r0, #29
 80007e2:	4327      	orrs	r7, r4
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	0d52      	lsrs	r2, r2, #21
 80007e8:	00c0      	lsls	r0, r0, #3
 80007ea:	46b9      	mov	r9, r7
 80007ec:	4680      	mov	r8, r0
 80007ee:	1ab7      	subs	r7, r6, r2
 80007f0:	4565      	cmp	r5, ip
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x3e>
 80007f4:	e09b      	b.n	800092e <__aeabi_dadd+0x176>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x44>
 80007fa:	e084      	b.n	8000906 <__aeabi_dadd+0x14e>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x4a>
 8000800:	e0be      	b.n	8000980 <__aeabi_dadd+0x1c8>
 8000802:	4ac8      	ldr	r2, [pc, #800]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000804:	4296      	cmp	r6, r2
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x52>
 8000808:	e124      	b.n	8000a54 <__aeabi_dadd+0x29c>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	464c      	mov	r4, r9
 800080e:	0412      	lsls	r2, r2, #16
 8000810:	4314      	orrs	r4, r2
 8000812:	46a1      	mov	r9, r4
 8000814:	2f38      	cmp	r7, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x62>
 8000818:	e167      	b.n	8000aea <__aeabi_dadd+0x332>
 800081a:	2f1f      	cmp	r7, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x68>
 800081e:	e1d6      	b.n	8000bce <__aeabi_dadd+0x416>
 8000820:	2220      	movs	r2, #32
 8000822:	464c      	mov	r4, r9
 8000824:	1bd2      	subs	r2, r2, r7
 8000826:	4094      	lsls	r4, r2
 8000828:	46a2      	mov	sl, r4
 800082a:	4644      	mov	r4, r8
 800082c:	40fc      	lsrs	r4, r7
 800082e:	0020      	movs	r0, r4
 8000830:	4654      	mov	r4, sl
 8000832:	4304      	orrs	r4, r0
 8000834:	4640      	mov	r0, r8
 8000836:	4090      	lsls	r0, r2
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	464a      	mov	r2, r9
 800083e:	40fa      	lsrs	r2, r7
 8000840:	4304      	orrs	r4, r0
 8000842:	1a89      	subs	r1, r1, r2
 8000844:	1b1c      	subs	r4, r3, r4
 8000846:	42a3      	cmp	r3, r4
 8000848:	4192      	sbcs	r2, r2
 800084a:	4252      	negs	r2, r2
 800084c:	1a8b      	subs	r3, r1, r2
 800084e:	469a      	mov	sl, r3
 8000850:	4653      	mov	r3, sl
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dadd+0xa0>
 8000856:	e0d4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000858:	4653      	mov	r3, sl
 800085a:	025a      	lsls	r2, r3, #9
 800085c:	0a53      	lsrs	r3, r2, #9
 800085e:	469a      	mov	sl, r3
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0xb0>
 8000866:	e104      	b.n	8000a72 <__aeabi_dadd+0x2ba>
 8000868:	4650      	mov	r0, sl
 800086a:	f001 fe73 	bl	8002554 <__clzsi2>
 800086e:	0003      	movs	r3, r0
 8000870:	3b08      	subs	r3, #8
 8000872:	2220      	movs	r2, #32
 8000874:	0020      	movs	r0, r4
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	4651      	mov	r1, sl
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4099      	lsls	r1, r3
 800087e:	0002      	movs	r2, r0
 8000880:	409c      	lsls	r4, r3
 8000882:	430a      	orrs	r2, r1
 8000884:	42b3      	cmp	r3, r6
 8000886:	da00      	bge.n	800088a <__aeabi_dadd+0xd2>
 8000888:	e102      	b.n	8000a90 <__aeabi_dadd+0x2d8>
 800088a:	1b9b      	subs	r3, r3, r6
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	291f      	cmp	r1, #31
 8000890:	dd00      	ble.n	8000894 <__aeabi_dadd+0xdc>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_dadd+0x22c>
 8000894:	2320      	movs	r3, #32
 8000896:	0010      	movs	r0, r2
 8000898:	0026      	movs	r6, r4
 800089a:	1a5b      	subs	r3, r3, r1
 800089c:	409c      	lsls	r4, r3
 800089e:	4098      	lsls	r0, r3
 80008a0:	40ce      	lsrs	r6, r1
 80008a2:	40ca      	lsrs	r2, r1
 80008a4:	1e63      	subs	r3, r4, #1
 80008a6:	419c      	sbcs	r4, r3
 80008a8:	4330      	orrs	r0, r6
 80008aa:	4692      	mov	sl, r2
 80008ac:	2600      	movs	r6, #0
 80008ae:	4304      	orrs	r4, r0
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d009      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008bc:	1d23      	adds	r3, r4, #4
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41a4      	sbcs	r4, r4
 80008c2:	4264      	negs	r4, r4
 80008c4:	44a2      	add	sl, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	4653      	mov	r3, sl
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_dadd+0x118>
 80008ce:	e09b      	b.n	8000a08 <__aeabi_dadd+0x250>
 80008d0:	4b94      	ldr	r3, [pc, #592]	; (8000b24 <__aeabi_dadd+0x36c>)
 80008d2:	3601      	adds	r6, #1
 80008d4:	429e      	cmp	r6, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x122>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x294>
 80008da:	4653      	mov	r3, sl
 80008dc:	4992      	ldr	r1, [pc, #584]	; (8000b28 <__aeabi_dadd+0x370>)
 80008de:	08e4      	lsrs	r4, r4, #3
 80008e0:	400b      	ands	r3, r1
 80008e2:	0019      	movs	r1, r3
 80008e4:	075b      	lsls	r3, r3, #29
 80008e6:	4323      	orrs	r3, r4
 80008e8:	0572      	lsls	r2, r6, #21
 80008ea:	024c      	lsls	r4, r1, #9
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	0512      	lsls	r2, r2, #20
 80008f2:	07ed      	lsls	r5, r5, #31
 80008f4:	4322      	orrs	r2, r4
 80008f6:	432a      	orrs	r2, r5
 80008f8:	0018      	movs	r0, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	bce0      	pop	{r5, r6, r7}
 80008fe:	46ba      	mov	sl, r7
 8000900:	46b1      	mov	r9, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000906:	2f00      	cmp	r7, #0
 8000908:	d048      	beq.n	800099c <__aeabi_dadd+0x1e4>
 800090a:	1b97      	subs	r7, r2, r6
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x15a>
 8000910:	e10e      	b.n	8000b30 <__aeabi_dadd+0x378>
 8000912:	000c      	movs	r4, r1
 8000914:	431c      	orrs	r4, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x162>
 8000918:	e1b7      	b.n	8000c8a <__aeabi_dadd+0x4d2>
 800091a:	1e7c      	subs	r4, r7, #1
 800091c:	2f01      	cmp	r7, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x16a>
 8000920:	e226      	b.n	8000d70 <__aeabi_dadd+0x5b8>
 8000922:	4d80      	ldr	r5, [pc, #512]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000924:	42af      	cmp	r7, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x172>
 8000928:	e1d5      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 800092a:	0027      	movs	r7, r4
 800092c:	e107      	b.n	8000b3e <__aeabi_dadd+0x386>
 800092e:	2f00      	cmp	r7, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x17c>
 8000932:	e0b2      	b.n	8000a9a <__aeabi_dadd+0x2e2>
 8000934:	2a00      	cmp	r2, #0
 8000936:	d047      	beq.n	80009c8 <__aeabi_dadd+0x210>
 8000938:	4a7a      	ldr	r2, [pc, #488]	; (8000b24 <__aeabi_dadd+0x36c>)
 800093a:	4296      	cmp	r6, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x188>
 800093e:	e089      	b.n	8000a54 <__aeabi_dadd+0x29c>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	464c      	mov	r4, r9
 8000944:	0412      	lsls	r2, r2, #16
 8000946:	4314      	orrs	r4, r2
 8000948:	46a1      	mov	r9, r4
 800094a:	2f38      	cmp	r7, #56	; 0x38
 800094c:	dc6b      	bgt.n	8000a26 <__aeabi_dadd+0x26e>
 800094e:	2f1f      	cmp	r7, #31
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x19c>
 8000952:	e16e      	b.n	8000c32 <__aeabi_dadd+0x47a>
 8000954:	003a      	movs	r2, r7
 8000956:	4648      	mov	r0, r9
 8000958:	3a20      	subs	r2, #32
 800095a:	40d0      	lsrs	r0, r2
 800095c:	4684      	mov	ip, r0
 800095e:	2f20      	cmp	r7, #32
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x1ba>
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	4648      	mov	r0, r9
 8000966:	1bd2      	subs	r2, r2, r7
 8000968:	4090      	lsls	r0, r2
 800096a:	0002      	movs	r2, r0
 800096c:	4640      	mov	r0, r8
 800096e:	4310      	orrs	r0, r2
 8000970:	4680      	mov	r8, r0
 8000972:	4640      	mov	r0, r8
 8000974:	1e42      	subs	r2, r0, #1
 8000976:	4190      	sbcs	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	0004      	movs	r4, r0
 800097c:	4314      	orrs	r4, r2
 800097e:	e057      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000980:	464a      	mov	r2, r9
 8000982:	4302      	orrs	r2, r0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x1d0>
 8000986:	e103      	b.n	8000b90 <__aeabi_dadd+0x3d8>
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	2f01      	cmp	r7, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x1d8>
 800098e:	e193      	b.n	8000cb8 <__aeabi_dadd+0x500>
 8000990:	4c64      	ldr	r4, [pc, #400]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000992:	42a7      	cmp	r7, r4
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x1e0>
 8000996:	e18a      	b.n	8000cae <__aeabi_dadd+0x4f6>
 8000998:	0017      	movs	r7, r2
 800099a:	e73b      	b.n	8000814 <__aeabi_dadd+0x5c>
 800099c:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <__aeabi_dadd+0x374>)
 800099e:	1c72      	adds	r2, r6, #1
 80009a0:	4222      	tst	r2, r4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x1ee>
 80009a4:	e0e0      	b.n	8000b68 <__aeabi_dadd+0x3b0>
 80009a6:	000a      	movs	r2, r1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x1f8>
 80009ae:	e174      	b.n	8000c9a <__aeabi_dadd+0x4e2>
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x1fe>
 80009b4:	e1d0      	b.n	8000d58 <__aeabi_dadd+0x5a0>
 80009b6:	464a      	mov	r2, r9
 80009b8:	4302      	orrs	r2, r0
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x206>
 80009bc:	e1e3      	b.n	8000d86 <__aeabi_dadd+0x5ce>
 80009be:	074a      	lsls	r2, r1, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c9      	lsrs	r1, r1, #3
 80009c6:	e029      	b.n	8000a1c <__aeabi_dadd+0x264>
 80009c8:	464a      	mov	r2, r9
 80009ca:	4302      	orrs	r2, r0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x218>
 80009ce:	e17d      	b.n	8000ccc <__aeabi_dadd+0x514>
 80009d0:	1e7a      	subs	r2, r7, #1
 80009d2:	2f01      	cmp	r7, #1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x220>
 80009d6:	e0e0      	b.n	8000b9a <__aeabi_dadd+0x3e2>
 80009d8:	4c52      	ldr	r4, [pc, #328]	; (8000b24 <__aeabi_dadd+0x36c>)
 80009da:	42a7      	cmp	r7, r4
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x228>
 80009de:	e166      	b.n	8000cae <__aeabi_dadd+0x4f6>
 80009e0:	0017      	movs	r7, r2
 80009e2:	e7b2      	b.n	800094a <__aeabi_dadd+0x192>
 80009e4:	0010      	movs	r0, r2
 80009e6:	3b1f      	subs	r3, #31
 80009e8:	40d8      	lsrs	r0, r3
 80009ea:	2920      	cmp	r1, #32
 80009ec:	d003      	beq.n	80009f6 <__aeabi_dadd+0x23e>
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	409a      	lsls	r2, r3
 80009f4:	4314      	orrs	r4, r2
 80009f6:	1e63      	subs	r3, r4, #1
 80009f8:	419c      	sbcs	r4, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	2600      	movs	r6, #0
 80009fe:	469a      	mov	sl, r3
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0763      	lsls	r3, r4, #29
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x250>
 8000a06:	e755      	b.n	80008b4 <__aeabi_dadd+0xfc>
 8000a08:	4652      	mov	r2, sl
 8000a0a:	08e3      	lsrs	r3, r4, #3
 8000a0c:	0752      	lsls	r2, r2, #29
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4652      	mov	r2, sl
 8000a12:	0037      	movs	r7, r6
 8000a14:	08d1      	lsrs	r1, r2, #3
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a18:	4297      	cmp	r7, r2
 8000a1a:	d01f      	beq.n	8000a5c <__aeabi_dadd+0x2a4>
 8000a1c:	0309      	lsls	r1, r1, #12
 8000a1e:	057a      	lsls	r2, r7, #21
 8000a20:	0b0c      	lsrs	r4, r1, #12
 8000a22:	0d52      	lsrs	r2, r2, #21
 8000a24:	e764      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a26:	4642      	mov	r2, r8
 8000a28:	464c      	mov	r4, r9
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	18e4      	adds	r4, r4, r3
 8000a32:	429c      	cmp	r4, r3
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	448a      	add	sl, r1
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	d5df      	bpl.n	8000a02 <__aeabi_dadd+0x24a>
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a44:	3601      	adds	r6, #1
 8000a46:	429e      	cmp	r6, r3
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x294>
 8000a4a:	e0b3      	b.n	8000bb4 <__aeabi_dadd+0x3fc>
 8000a4c:	0032      	movs	r2, r6
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2300      	movs	r3, #0
 8000a52:	e74d      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x2ac>
 8000a62:	e200      	b.n	8000e66 <__aeabi_dadd+0x6ae>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	430c      	orrs	r4, r1
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a6e:	0b24      	lsrs	r4, r4, #12
 8000a70:	e73e      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a72:	0020      	movs	r0, r4
 8000a74:	f001 fd6e 	bl	8002554 <__clzsi2>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	dc00      	bgt.n	8000a82 <__aeabi_dadd+0x2ca>
 8000a80:	e6f7      	b.n	8000872 <__aeabi_dadd+0xba>
 8000a82:	0022      	movs	r2, r4
 8000a84:	3808      	subs	r0, #8
 8000a86:	4082      	lsls	r2, r0
 8000a88:	2400      	movs	r4, #0
 8000a8a:	42b3      	cmp	r3, r6
 8000a8c:	db00      	blt.n	8000a90 <__aeabi_dadd+0x2d8>
 8000a8e:	e6fc      	b.n	800088a <__aeabi_dadd+0xd2>
 8000a90:	1af6      	subs	r6, r6, r3
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <__aeabi_dadd+0x370>)
 8000a94:	401a      	ands	r2, r3
 8000a96:	4692      	mov	sl, r2
 8000a98:	e70a      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d02b      	beq.n	8000af6 <__aeabi_dadd+0x33e>
 8000a9e:	1b97      	subs	r7, r2, r6
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x2ee>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_dadd+0x460>
 8000aa6:	4c1f      	ldr	r4, [pc, #124]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x2f6>
 8000aac:	e11c      	b.n	8000ce8 <__aeabi_dadd+0x530>
 8000aae:	2480      	movs	r4, #128	; 0x80
 8000ab0:	0424      	lsls	r4, r4, #16
 8000ab2:	4321      	orrs	r1, r4
 8000ab4:	2f38      	cmp	r7, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x302>
 8000ab8:	e11e      	b.n	8000cf8 <__aeabi_dadd+0x540>
 8000aba:	2f1f      	cmp	r7, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x308>
 8000abe:	e19e      	b.n	8000dfe <__aeabi_dadd+0x646>
 8000ac0:	2620      	movs	r6, #32
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	1bf6      	subs	r6, r6, r7
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	40b3      	lsls	r3, r6
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	40f8      	lsrs	r0, r7
 8000ace:	1e5e      	subs	r6, r3, #1
 8000ad0:	41b3      	sbcs	r3, r6
 8000ad2:	40f9      	lsrs	r1, r7
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	4489      	add	r9, r1
 8000ada:	4444      	add	r4, r8
 8000adc:	4544      	cmp	r4, r8
 8000ade:	419b      	sbcs	r3, r3
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	444b      	add	r3, r9
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	0016      	movs	r6, r2
 8000ae8:	e7a8      	b.n	8000a3c <__aeabi_dadd+0x284>
 8000aea:	4642      	mov	r2, r8
 8000aec:	464c      	mov	r4, r9
 8000aee:	4314      	orrs	r4, r2
 8000af0:	1e62      	subs	r2, r4, #1
 8000af2:	4194      	sbcs	r4, r2
 8000af4:	e6a6      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__aeabi_dadd+0x374>)
 8000af8:	1c72      	adds	r2, r6, #1
 8000afa:	4222      	tst	r2, r4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dadd+0x348>
 8000afe:	e0a8      	b.n	8000c52 <__aeabi_dadd+0x49a>
 8000b00:	000a      	movs	r2, r1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x352>
 8000b08:	e10a      	b.n	8000d20 <__aeabi_dadd+0x568>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x358>
 8000b0e:	e15e      	b.n	8000dce <__aeabi_dadd+0x616>
 8000b10:	464a      	mov	r2, r9
 8000b12:	4302      	orrs	r2, r0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x360>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x624>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e77c      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	4ccf      	ldr	r4, [pc, #828]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x380>
 8000b36:	e0ce      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	0424      	lsls	r4, r4, #16
 8000b3c:	4321      	orrs	r1, r4
 8000b3e:	2f38      	cmp	r7, #56	; 0x38
 8000b40:	dc5b      	bgt.n	8000bfa <__aeabi_dadd+0x442>
 8000b42:	2f1f      	cmp	r7, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x390>
 8000b46:	e0dc      	b.n	8000d02 <__aeabi_dadd+0x54a>
 8000b48:	2520      	movs	r5, #32
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	1bed      	subs	r5, r5, r7
 8000b4e:	001e      	movs	r6, r3
 8000b50:	40ab      	lsls	r3, r5
 8000b52:	40ac      	lsls	r4, r5
 8000b54:	40fe      	lsrs	r6, r7
 8000b56:	1e5d      	subs	r5, r3, #1
 8000b58:	41ab      	sbcs	r3, r5
 8000b5a:	4334      	orrs	r4, r6
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	4699      	mov	r9, r3
 8000b66:	e04c      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1a1c      	subs	r4, r3, r0
 8000b6c:	1a88      	subs	r0, r1, r2
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	4252      	negs	r2, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	0002      	movs	r2, r0
 8000b78:	4650      	mov	r0, sl
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	d478      	bmi.n	8000c74 <__aeabi_dadd+0x4bc>
 8000b82:	4653      	mov	r3, sl
 8000b84:	4323      	orrs	r3, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x3d2>
 8000b88:	e66a      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	e745      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e73d      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000b9a:	181c      	adds	r4, r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	419b      	sbcs	r3, r3
 8000ba0:	4449      	add	r1, r9
 8000ba2:	468a      	mov	sl, r1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	449a      	add	sl, r3
 8000ba8:	4653      	mov	r3, sl
 8000baa:	2601      	movs	r6, #1
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_dadd+0x3fa>
 8000bb0:	e727      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000bb2:	2602      	movs	r6, #2
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	4baf      	ldr	r3, [pc, #700]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	4021      	ands	r1, r4
 8000bc0:	0862      	lsrs	r2, r4, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	07dc      	lsls	r4, r3, #31
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	469a      	mov	sl, r3
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	e670      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	464c      	mov	r4, r9
 8000bd2:	3a20      	subs	r2, #32
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	46a4      	mov	ip, r4
 8000bd8:	2f20      	cmp	r7, #32
 8000bda:	d007      	beq.n	8000bec <__aeabi_dadd+0x434>
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	4648      	mov	r0, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4090      	lsls	r0, r2
 8000be4:	0002      	movs	r2, r0
 8000be6:	4640      	mov	r0, r8
 8000be8:	4310      	orrs	r0, r2
 8000bea:	4680      	mov	r8, r0
 8000bec:	4640      	mov	r0, r8
 8000bee:	1e42      	subs	r2, r0, #1
 8000bf0:	4190      	sbcs	r0, r2
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	0004      	movs	r4, r0
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	e624      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000bfa:	4319      	orrs	r1, r3
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	4643      	mov	r3, r8
 8000c04:	1b1c      	subs	r4, r3, r4
 8000c06:	45a0      	cmp	r8, r4
 8000c08:	419b      	sbcs	r3, r3
 8000c0a:	4649      	mov	r1, r9
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	4665      	mov	r5, ip
 8000c14:	0016      	movs	r6, r2
 8000c16:	e61b      	b.n	8000850 <__aeabi_dadd+0x98>
 8000c18:	000c      	movs	r4, r1
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x468>
 8000c1e:	e0c7      	b.n	8000db0 <__aeabi_dadd+0x5f8>
 8000c20:	1e7c      	subs	r4, r7, #1
 8000c22:	2f01      	cmp	r7, #1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x470>
 8000c26:	e0f9      	b.n	8000e1c <__aeabi_dadd+0x664>
 8000c28:	4e91      	ldr	r6, [pc, #580]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c2a:	42b7      	cmp	r7, r6
 8000c2c:	d05c      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000c2e:	0027      	movs	r7, r4
 8000c30:	e740      	b.n	8000ab4 <__aeabi_dadd+0x2fc>
 8000c32:	2220      	movs	r2, #32
 8000c34:	464c      	mov	r4, r9
 8000c36:	4640      	mov	r0, r8
 8000c38:	1bd2      	subs	r2, r2, r7
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	40f8      	lsrs	r0, r7
 8000c3e:	4304      	orrs	r4, r0
 8000c40:	4640      	mov	r0, r8
 8000c42:	4090      	lsls	r0, r2
 8000c44:	1e42      	subs	r2, r0, #1
 8000c46:	4190      	sbcs	r0, r2
 8000c48:	464a      	mov	r2, r9
 8000c4a:	40fa      	lsrs	r2, r7
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	1889      	adds	r1, r1, r2
 8000c50:	e6ee      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000c52:	4c87      	ldr	r4, [pc, #540]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x4a2>
 8000c58:	e6f9      	b.n	8000a4e <__aeabi_dadd+0x296>
 8000c5a:	1818      	adds	r0, r3, r0
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	419b      	sbcs	r3, r3
 8000c60:	4449      	add	r1, r9
 8000c62:	425b      	negs	r3, r3
 8000c64:	18cb      	adds	r3, r1, r3
 8000c66:	07dc      	lsls	r4, r3, #31
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	0016      	movs	r6, r2
 8000c70:	4304      	orrs	r4, r0
 8000c72:	e6c6      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000c74:	4642      	mov	r2, r8
 8000c76:	1ad4      	subs	r4, r2, r3
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	4180      	sbcs	r0, r0
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4240      	negs	r0, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	1a0b      	subs	r3, r1, r0
 8000c84:	469a      	mov	sl, r3
 8000c86:	4665      	mov	r5, ip
 8000c88:	e5ea      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	075b      	lsls	r3, r3, #29
 8000c92:	4665      	mov	r5, ip
 8000c94:	4303      	orrs	r3, r0
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	e6bd      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x4e8>
 8000c9e:	e08e      	b.n	8000dbe <__aeabi_dadd+0x606>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	d117      	bne.n	8000cd6 <__aeabi_dadd+0x51e>
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	2500      	movs	r5, #0
 8000caa:	0309      	lsls	r1, r1, #12
 8000cac:	e6da      	b.n	8000a64 <__aeabi_dadd+0x2ac>
 8000cae:	074a      	lsls	r2, r1, #29
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	e6d1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	464a      	mov	r2, r9
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	1a89      	subs	r1, r1, r2
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	2601      	movs	r6, #1
 8000cca:	e5c1      	b.n	8000850 <__aeabi_dadd+0x98>
 8000ccc:	074a      	lsls	r2, r1, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	e69f      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	08d8      	lsrs	r0, r3, #3
 8000cda:	464b      	mov	r3, r9
 8000cdc:	464a      	mov	r2, r9
 8000cde:	075b      	lsls	r3, r3, #29
 8000ce0:	4665      	mov	r5, ip
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	08d1      	lsrs	r1, r2, #3
 8000ce6:	e6b9      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	08d8      	lsrs	r0, r3, #3
 8000cec:	464b      	mov	r3, r9
 8000cee:	464a      	mov	r2, r9
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	08d1      	lsrs	r1, r2, #3
 8000cf6:	e6b1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cf8:	4319      	orrs	r1, r3
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	e6eb      	b.n	8000ada <__aeabi_dadd+0x322>
 8000d02:	003c      	movs	r4, r7
 8000d04:	000d      	movs	r5, r1
 8000d06:	3c20      	subs	r4, #32
 8000d08:	40e5      	lsrs	r5, r4
 8000d0a:	2f20      	cmp	r7, #32
 8000d0c:	d003      	beq.n	8000d16 <__aeabi_dadd+0x55e>
 8000d0e:	2440      	movs	r4, #64	; 0x40
 8000d10:	1be4      	subs	r4, r4, r7
 8000d12:	40a1      	lsls	r1, r4
 8000d14:	430b      	orrs	r3, r1
 8000d16:	001c      	movs	r4, r3
 8000d18:	1e63      	subs	r3, r4, #1
 8000d1a:	419c      	sbcs	r4, r3
 8000d1c:	432c      	orrs	r4, r5
 8000d1e:	e770      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d0e1      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000d24:	464a      	mov	r2, r9
 8000d26:	4302      	orrs	r2, r0
 8000d28:	d0c1      	beq.n	8000cae <__aeabi_dadd+0x4f6>
 8000d2a:	074a      	lsls	r2, r1, #29
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	08c9      	lsrs	r1, r1, #3
 8000d34:	0312      	lsls	r2, r2, #12
 8000d36:	4211      	tst	r1, r2
 8000d38:	d008      	beq.n	8000d4c <__aeabi_dadd+0x594>
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	08c4      	lsrs	r4, r0, #3
 8000d3e:	4214      	tst	r4, r2
 8000d40:	d104      	bne.n	8000d4c <__aeabi_dadd+0x594>
 8000d42:	4643      	mov	r3, r8
 8000d44:	0021      	movs	r1, r4
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	0f5a      	lsrs	r2, r3, #29
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e681      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dadd+0x5a8>
 8000d5e:	e714      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000d60:	464b      	mov	r3, r9
 8000d62:	464a      	mov	r2, r9
 8000d64:	08c0      	lsrs	r0, r0, #3
 8000d66:	075b      	lsls	r3, r3, #29
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4303      	orrs	r3, r0
 8000d6c:	08d1      	lsrs	r1, r2, #3
 8000d6e:	e655      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000d70:	1ac4      	subs	r4, r0, r3
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	464b      	mov	r3, r9
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a59      	subs	r1, r3, r1
 8000d7c:	1a0b      	subs	r3, r1, r0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4665      	mov	r5, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	e564      	b.n	8000850 <__aeabi_dadd+0x98>
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	464a      	mov	r2, r9
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	1a8a      	subs	r2, r1, r2
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a12      	subs	r2, r2, r0
 8000d94:	4692      	mov	sl, r2
 8000d96:	0212      	lsls	r2, r2, #8
 8000d98:	d549      	bpl.n	8000e2e <__aeabi_dadd+0x676>
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	1ad4      	subs	r4, r2, r3
 8000d9e:	45a0      	cmp	r8, r4
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	464b      	mov	r3, r9
 8000da4:	4240      	negs	r0, r0
 8000da6:	1a59      	subs	r1, r3, r1
 8000da8:	1a0b      	subs	r3, r1, r0
 8000daa:	469a      	mov	sl, r3
 8000dac:	4665      	mov	r5, ip
 8000dae:	e57f      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000db0:	464b      	mov	r3, r9
 8000db2:	464a      	mov	r2, r9
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	4303      	orrs	r3, r0
 8000dba:	08d1      	lsrs	r1, r2, #3
 8000dbc:	e62b      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	d138      	bne.n	8000e38 <__aeabi_dadd+0x680>
 8000dc6:	074a      	lsls	r2, r1, #29
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	e646      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	08c0      	lsrs	r0, r0, #3
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	08d1      	lsrs	r1, r2, #3
 8000dda:	e61f      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000ddc:	181c      	adds	r4, r3, r0
 8000dde:	429c      	cmp	r4, r3
 8000de0:	419b      	sbcs	r3, r3
 8000de2:	4449      	add	r1, r9
 8000de4:	468a      	mov	sl, r1
 8000de6:	425b      	negs	r3, r3
 8000de8:	449a      	add	sl, r3
 8000dea:	4653      	mov	r3, sl
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	d400      	bmi.n	8000df2 <__aeabi_dadd+0x63a>
 8000df0:	e607      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000df2:	4652      	mov	r2, sl
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000df6:	2601      	movs	r6, #1
 8000df8:	401a      	ands	r2, r3
 8000dfa:	4692      	mov	sl, r2
 8000dfc:	e601      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000dfe:	003c      	movs	r4, r7
 8000e00:	000e      	movs	r6, r1
 8000e02:	3c20      	subs	r4, #32
 8000e04:	40e6      	lsrs	r6, r4
 8000e06:	2f20      	cmp	r7, #32
 8000e08:	d003      	beq.n	8000e12 <__aeabi_dadd+0x65a>
 8000e0a:	2440      	movs	r4, #64	; 0x40
 8000e0c:	1be4      	subs	r4, r4, r7
 8000e0e:	40a1      	lsls	r1, r4
 8000e10:	430b      	orrs	r3, r1
 8000e12:	001c      	movs	r4, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4334      	orrs	r4, r6
 8000e1a:	e65e      	b.n	8000ada <__aeabi_dadd+0x322>
 8000e1c:	4443      	add	r3, r8
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	4180      	sbcs	r0, r0
 8000e22:	4449      	add	r1, r9
 8000e24:	468a      	mov	sl, r1
 8000e26:	4240      	negs	r0, r0
 8000e28:	001c      	movs	r4, r3
 8000e2a:	4482      	add	sl, r0
 8000e2c:	e6bc      	b.n	8000ba8 <__aeabi_dadd+0x3f0>
 8000e2e:	4653      	mov	r3, sl
 8000e30:	4323      	orrs	r3, r4
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x67e>
 8000e34:	e6a9      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000e36:	e5e4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000e38:	074a      	lsls	r2, r1, #29
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	4211      	tst	r1, r2
 8000e44:	d009      	beq.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e46:	4648      	mov	r0, r9
 8000e48:	08c4      	lsrs	r4, r0, #3
 8000e4a:	4214      	tst	r4, r2
 8000e4c:	d105      	bne.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	4665      	mov	r5, ip
 8000e52:	0021      	movs	r1, r4
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	0f5a      	lsrs	r2, r3, #29
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	0752      	lsls	r2, r2, #29
 8000e62:	4313      	orrs	r3, r2
 8000e64:	e5fa      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4a01      	ldr	r2, [pc, #4]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	e540      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	ff7fffff 	.word	0xff7fffff

08000e78 <__aeabi_ddiv>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	4657      	mov	r7, sl
 8000e7c:	464e      	mov	r6, r9
 8000e7e:	4645      	mov	r5, r8
 8000e80:	46de      	mov	lr, fp
 8000e82:	b5e0      	push	{r5, r6, r7, lr}
 8000e84:	030c      	lsls	r4, r1, #12
 8000e86:	001f      	movs	r7, r3
 8000e88:	004b      	lsls	r3, r1, #1
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	0005      	movs	r5, r0
 8000e90:	b085      	sub	sp, #20
 8000e92:	0b24      	lsrs	r4, r4, #12
 8000e94:	0d5b      	lsrs	r3, r3, #21
 8000e96:	0fce      	lsrs	r6, r1, #31
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x26>
 8000e9c:	e152      	b.n	8001144 <__aeabi_ddiv+0x2cc>
 8000e9e:	4ad2      	ldr	r2, [pc, #840]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x2e>
 8000ea4:	e16e      	b.n	8001184 <__aeabi_ddiv+0x30c>
 8000ea6:	0f42      	lsrs	r2, r0, #29
 8000ea8:	00e4      	lsls	r4, r4, #3
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4acd      	ldr	r2, [pc, #820]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4693      	mov	fp, r2
 8000eba:	449b      	add	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	033c      	lsls	r4, r7, #12
 8000ec4:	007b      	lsls	r3, r7, #1
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	0d5b      	lsrs	r3, r3, #21
 8000ecc:	0fff      	lsrs	r7, r7, #31
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x5c>
 8000ed2:	e11a      	b.n	800110a <__aeabi_ddiv+0x292>
 8000ed4:	4ac4      	ldr	r2, [pc, #784]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x64>
 8000eda:	e15e      	b.n	800119a <__aeabi_ddiv+0x322>
 8000edc:	0f42      	lsrs	r2, r0, #29
 8000ede:	00e4      	lsls	r4, r4, #3
 8000ee0:	4322      	orrs	r2, r4
 8000ee2:	2480      	movs	r4, #128	; 0x80
 8000ee4:	0424      	lsls	r4, r4, #16
 8000ee6:	4314      	orrs	r4, r2
 8000ee8:	4ac0      	ldr	r2, [pc, #768]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eea:	00c1      	lsls	r1, r0, #3
 8000eec:	4694      	mov	ip, r2
 8000eee:	465a      	mov	r2, fp
 8000ef0:	4463      	add	r3, ip
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	0033      	movs	r3, r6
 8000efa:	407b      	eors	r3, r7
 8000efc:	469a      	mov	sl, r3
 8000efe:	464b      	mov	r3, r9
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d827      	bhi.n	8000f54 <__aeabi_ddiv+0xdc>
 8000f04:	4aba      	ldr	r2, [pc, #744]	; (80011f0 <__aeabi_ddiv+0x378>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	58d3      	ldr	r3, [r2, r3]
 8000f0a:	469f      	mov	pc, r3
 8000f0c:	46b2      	mov	sl, r6
 8000f0e:	9b00      	ldr	r3, [sp, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d016      	beq.n	8000f42 <__aeabi_ddiv+0xca>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xa2>
 8000f18:	e287      	b.n	800142a <__aeabi_ddiv+0x5b2>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_ddiv+0xa8>
 8000f1e:	e0d5      	b.n	80010cc <__aeabi_ddiv+0x254>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	2500      	movs	r5, #0
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	07d2      	lsls	r2, r2, #31
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	0028      	movs	r0, r5
 8000f32:	0019      	movs	r1, r3
 8000f34:	b005      	add	sp, #20
 8000f36:	bcf0      	pop	{r4, r5, r6, r7}
 8000f38:	46bb      	mov	fp, r7
 8000f3a:	46b2      	mov	sl, r6
 8000f3c:	46a9      	mov	r9, r5
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000f48:	e7ed      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8000f4a:	46ba      	mov	sl, r7
 8000f4c:	46a0      	mov	r8, r4
 8000f4e:	000d      	movs	r5, r1
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	e7dc      	b.n	8000f0e <__aeabi_ddiv+0x96>
 8000f54:	4544      	cmp	r4, r8
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0xe2>
 8000f58:	e1c4      	b.n	80012e4 <__aeabi_ddiv+0x46c>
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0xe6>
 8000f5c:	e1bf      	b.n	80012de <__aeabi_ddiv+0x466>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	469c      	mov	ip, r3
 8000f64:	002e      	movs	r6, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2500      	movs	r5, #0
 8000f6a:	44e3      	add	fp, ip
 8000f6c:	0223      	lsls	r3, r4, #8
 8000f6e:	0e0c      	lsrs	r4, r1, #24
 8000f70:	431c      	orrs	r4, r3
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	4699      	mov	r9, r3
 8000f76:	0423      	lsls	r3, r4, #16
 8000f78:	020a      	lsls	r2, r1, #8
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	9701      	str	r7, [sp, #4]
 8000f82:	f7ff f961 	bl	8000248 <__aeabi_uidivmod>
 8000f86:	0002      	movs	r2, r0
 8000f88:	437a      	muls	r2, r7
 8000f8a:	040b      	lsls	r3, r1, #16
 8000f8c:	0c31      	lsrs	r1, r6, #16
 8000f8e:	4680      	mov	r8, r0
 8000f90:	4319      	orrs	r1, r3
 8000f92:	428a      	cmp	r2, r1
 8000f94:	d907      	bls.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	1909      	adds	r1, r1, r4
 8000f9e:	44e0      	add	r8, ip
 8000fa0:	428c      	cmp	r4, r1
 8000fa2:	d800      	bhi.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000fa4:	e201      	b.n	80013aa <__aeabi_ddiv+0x532>
 8000fa6:	1a88      	subs	r0, r1, r2
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f7ff f94d 	bl	8000248 <__aeabi_uidivmod>
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0436      	lsls	r6, r6, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	0c36      	lsrs	r6, r6, #16
 8000fb8:	0003      	movs	r3, r0
 8000fba:	430e      	orrs	r6, r1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	d904      	bls.n	8000fca <__aeabi_ddiv+0x152>
 8000fc0:	1936      	adds	r6, r6, r4
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	42b4      	cmp	r4, r6
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x152>
 8000fc8:	e1e9      	b.n	800139e <__aeabi_ddiv+0x526>
 8000fca:	1ab0      	subs	r0, r6, r2
 8000fcc:	4642      	mov	r2, r8
 8000fce:	9e00      	ldr	r6, [sp, #0]
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	0c33      	lsrs	r3, r6, #16
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	4690      	mov	r8, r2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	0413      	lsls	r3, r2, #16
 8000fe0:	0432      	lsls	r2, r6, #16
 8000fe2:	0c16      	lsrs	r6, r2, #16
 8000fe4:	0032      	movs	r2, r6
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	9603      	str	r6, [sp, #12]
 8000fec:	437b      	muls	r3, r7
 8000fee:	434e      	muls	r6, r1
 8000ff0:	4379      	muls	r1, r7
 8000ff2:	0c17      	lsrs	r7, r2, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	199b      	adds	r3, r3, r6
 8000ff8:	4463      	add	r3, ip
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x18e>
 8000ffe:	2680      	movs	r6, #128	; 0x80
 8001000:	0276      	lsls	r6, r6, #9
 8001002:	46b4      	mov	ip, r6
 8001004:	4461      	add	r1, ip
 8001006:	0c1e      	lsrs	r6, r3, #16
 8001008:	1871      	adds	r1, r6, r1
 800100a:	0416      	lsls	r6, r2, #16
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	199e      	adds	r6, r3, r6
 8001012:	4288      	cmp	r0, r1
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1a4>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1c6>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1c6>
 800101c:	4643      	mov	r3, r8
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c0>
 8001036:	e19e      	b.n	8001376 <__aeabi_ddiv+0x4fe>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1c4>
 800103a:	e199      	b.n	8001370 <__aeabi_ddiv+0x4f8>
 800103c:	4690      	mov	r8, r2
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a40      	subs	r0, r0, r1
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1d8>
 800104e:	e1d2      	b.n	80013f6 <__aeabi_ddiv+0x57e>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8f9 	bl	8000248 <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f0>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4ca>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x20c>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4b4>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x23a>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	4286      	cmp	r6, r0
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x24c>
 80010c2:	e100      	b.n	80012c6 <__aeabi_ddiv+0x44e>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x250>
 80010c6:	e0fb      	b.n	80012c0 <__aeabi_ddiv+0x448>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x37c>)
 80010ce:	445b      	add	r3, fp
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x25e>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3b4>
 80010d6:	076a      	lsls	r2, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x264>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e0>
 80010dc:	08e9      	lsrs	r1, r5, #3
 80010de:	4642      	mov	r2, r8
 80010e0:	01d2      	lsls	r2, r2, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x27a>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x380>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4690      	mov	r8, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	445b      	add	r3, fp
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <__aeabi_ddiv+0x384>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x282>
 80010f8:	e723      	b.n	8000f42 <__aeabi_ddiv+0xca>
 80010fa:	4642      	mov	r2, r8
 80010fc:	055b      	lsls	r3, r3, #21
 80010fe:	0755      	lsls	r5, r2, #29
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	430d      	orrs	r5, r1
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	e70d      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800110a:	4651      	mov	r1, sl
 800110c:	4321      	orrs	r1, r4
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x29a>
 8001110:	e07c      	b.n	800120c <__aeabi_ddiv+0x394>
 8001112:	2c00      	cmp	r4, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x2a0>
 8001116:	e0fb      	b.n	8001310 <__aeabi_ddiv+0x498>
 8001118:	0020      	movs	r0, r4
 800111a:	f001 fa1b 	bl	8002554 <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	3a0b      	subs	r2, #11
 8001122:	231d      	movs	r3, #29
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	4652      	mov	r2, sl
 8001128:	0001      	movs	r1, r0
 800112a:	40da      	lsrs	r2, r3
 800112c:	4653      	mov	r3, sl
 800112e:	3908      	subs	r1, #8
 8001130:	408b      	lsls	r3, r1
 8001132:	408c      	lsls	r4, r1
 8001134:	0019      	movs	r1, r3
 8001136:	4314      	orrs	r4, r2
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x388>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 8001144:	0003      	movs	r3, r0
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x35e>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2da>
 8001150:	e0cf      	b.n	80012f2 <__aeabi_ddiv+0x47a>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 f9fe 	bl	8002554 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <__aeabi_ddiv+0x38c>)
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69e      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 8001184:	0002      	movs	r2, r0
 8001186:	4322      	orrs	r2, r4
 8001188:	4690      	mov	r8, r2
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x350>
 800118c:	2208      	movs	r2, #8
 800118e:	469b      	mov	fp, r3
 8001190:	2302      	movs	r3, #2
 8001192:	2500      	movs	r5, #0
 8001194:	4691      	mov	r9, r2
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e693      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 800119a:	4651      	mov	r1, sl
 800119c:	4321      	orrs	r1, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x33c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	464a      	mov	r2, r9
 80011a4:	431a      	orrs	r2, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x390>)
 80011a8:	4691      	mov	r9, r2
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e6a1      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x390>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4651      	mov	r1, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e697      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011c8:	220c      	movs	r2, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4691      	mov	r9, r2
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e675      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e66d      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	08014d80 	.word	0x08014d80
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	464a      	mov	r2, r9
 800120e:	2301      	movs	r3, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	4691      	mov	r9, r2
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66e      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001224:	0312      	lsls	r2, r2, #12
 8001226:	e67e      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2201      	movs	r2, #1
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	2a38      	cmp	r2, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3be>
 8001234:	e674      	b.n	8000f20 <__aeabi_ddiv+0xa8>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3c4>
 800123a:	e0bd      	b.n	80013b8 <__aeabi_ddiv+0x540>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	4641      	mov	r1, r8
 8001244:	40d9      	lsrs	r1, r3
 8001246:	000b      	movs	r3, r1
 8001248:	2a20      	cmp	r2, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3de>
 800124c:	4641      	mov	r1, r8
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <__aeabi_ddiv+0x5d0>)
 8001250:	445a      	add	r2, fp
 8001252:	4091      	lsls	r1, r2
 8001254:	430d      	orrs	r5, r1
 8001256:	0029      	movs	r1, r5
 8001258:	1e4a      	subs	r2, r1, #1
 800125a:	4191      	sbcs	r1, r2
 800125c:	4319      	orrs	r1, r3
 800125e:	2307      	movs	r3, #7
 8001260:	001d      	movs	r5, r3
 8001262:	2200      	movs	r2, #0
 8001264:	400d      	ands	r5, r1
 8001266:	420b      	tst	r3, r1
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x3f4>
 800126a:	e0d0      	b.n	800140e <__aeabi_ddiv+0x596>
 800126c:	220f      	movs	r2, #15
 800126e:	2300      	movs	r3, #0
 8001270:	400a      	ands	r2, r1
 8001272:	2a04      	cmp	r2, #4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x400>
 8001276:	e0c7      	b.n	8001408 <__aeabi_ddiv+0x590>
 8001278:	1d0a      	adds	r2, r1, #4
 800127a:	428a      	cmp	r2, r1
 800127c:	4189      	sbcs	r1, r1
 800127e:	4249      	negs	r1, r1
 8001280:	185b      	adds	r3, r3, r1
 8001282:	0011      	movs	r1, r2
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	d400      	bmi.n	800128a <__aeabi_ddiv+0x412>
 8001288:	e0be      	b.n	8001408 <__aeabi_ddiv+0x590>
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2500      	movs	r5, #0
 8001290:	e649      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4643      	mov	r3, r8
 8001296:	0312      	lsls	r2, r2, #12
 8001298:	4213      	tst	r3, r2
 800129a:	d008      	beq.n	80012ae <__aeabi_ddiv+0x436>
 800129c:	4214      	tst	r4, r2
 800129e:	d106      	bne.n	80012ae <__aeabi_ddiv+0x436>
 80012a0:	4322      	orrs	r2, r4
 80012a2:	0312      	lsls	r2, r2, #12
 80012a4:	46ba      	mov	sl, r7
 80012a6:	000d      	movs	r5, r1
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012aa:	0b12      	lsrs	r2, r2, #12
 80012ac:	e63b      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4643      	mov	r3, r8
 80012b2:	0312      	lsls	r2, r2, #12
 80012b4:	431a      	orrs	r2, r3
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	46b2      	mov	sl, r6
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	e632      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x44e>
 80012c4:	e702      	b.n	80010cc <__aeabi_ddiv+0x254>
 80012c6:	19a6      	adds	r6, r4, r6
 80012c8:	1e6a      	subs	r2, r5, #1
 80012ca:	42a6      	cmp	r6, r4
 80012cc:	d200      	bcs.n	80012d0 <__aeabi_ddiv+0x458>
 80012ce:	e089      	b.n	80013e4 <__aeabi_ddiv+0x56c>
 80012d0:	4286      	cmp	r6, r0
 80012d2:	d200      	bcs.n	80012d6 <__aeabi_ddiv+0x45e>
 80012d4:	e09f      	b.n	8001416 <__aeabi_ddiv+0x59e>
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x462>
 80012d8:	e0af      	b.n	800143a <__aeabi_ddiv+0x5c2>
 80012da:	0015      	movs	r5, r2
 80012dc:	e6f4      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d900      	bls.n	80012e4 <__aeabi_ddiv+0x46c>
 80012e2:	e63c      	b.n	8000f5e <__aeabi_ddiv+0xe6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	07de      	lsls	r6, r3, #31
 80012e8:	0858      	lsrs	r0, r3, #1
 80012ea:	086b      	lsrs	r3, r5, #1
 80012ec:	431e      	orrs	r6, r3
 80012ee:	07ed      	lsls	r5, r5, #31
 80012f0:	e63c      	b.n	8000f6c <__aeabi_ddiv+0xf4>
 80012f2:	f001 f92f 	bl	8002554 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x48c>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2e6>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x2fe>
 8001310:	f001 f920 	bl	8002554 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4aa>
 8001320:	e6ff      	b.n	8001122 <__aeabi_ddiv+0x2aa>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2100      	movs	r1, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c0>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4be>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4c4>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x20c>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4d4>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4da>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001358:	220f      	movs	r2, #15
 800135a:	402a      	ands	r2, r5
 800135c:	2a04      	cmp	r2, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4ea>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x264>
 8001362:	1d29      	adds	r1, r5, #4
 8001364:	42a9      	cmp	r1, r5
 8001366:	41ad      	sbcs	r5, r5
 8001368:	426d      	negs	r5, r5
 800136a:	08c9      	lsrs	r1, r1, #3
 800136c:	44a8      	add	r8, r5
 800136e:	e6b6      	b.n	80010de <__aeabi_ddiv+0x266>
 8001370:	42af      	cmp	r7, r5
 8001372:	d900      	bls.n	8001376 <__aeabi_ddiv+0x4fe>
 8001374:	e662      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001376:	4281      	cmp	r1, r0
 8001378:	d804      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x506>
 800137c:	e65e      	b.n	800103c <__aeabi_ddiv+0x1c4>
 800137e:	42ae      	cmp	r6, r5
 8001380:	d800      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 8001382:	e65b      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001384:	2302      	movs	r3, #2
 8001386:	425b      	negs	r3, r3
 8001388:	469c      	mov	ip, r3
 800138a:	9b00      	ldr	r3, [sp, #0]
 800138c:	44e0      	add	r8, ip
 800138e:	469c      	mov	ip, r3
 8001390:	4465      	add	r5, ip
 8001392:	429d      	cmp	r5, r3
 8001394:	419b      	sbcs	r3, r3
 8001396:	425b      	negs	r3, r3
 8001398:	191b      	adds	r3, r3, r4
 800139a:	18c0      	adds	r0, r0, r3
 800139c:	e64f      	b.n	800103e <__aeabi_ddiv+0x1c6>
 800139e:	42b2      	cmp	r2, r6
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x52c>
 80013a2:	e612      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013a4:	1e83      	subs	r3, r0, #2
 80013a6:	1936      	adds	r6, r6, r4
 80013a8:	e60f      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013aa:	428a      	cmp	r2, r1
 80013ac:	d800      	bhi.n	80013b0 <__aeabi_ddiv+0x538>
 80013ae:	e5fa      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	4698      	mov	r8, r3
 80013b4:	1909      	adds	r1, r1, r4
 80013b6:	e5f6      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <__aeabi_ddiv+0x5d4>)
 80013ba:	0028      	movs	r0, r5
 80013bc:	445b      	add	r3, fp
 80013be:	4641      	mov	r1, r8
 80013c0:	409d      	lsls	r5, r3
 80013c2:	4099      	lsls	r1, r3
 80013c4:	40d0      	lsrs	r0, r2
 80013c6:	1e6b      	subs	r3, r5, #1
 80013c8:	419d      	sbcs	r5, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	4301      	orrs	r1, r0
 80013ce:	4329      	orrs	r1, r5
 80013d0:	40d3      	lsrs	r3, r2
 80013d2:	074a      	lsls	r2, r1, #29
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x560>
 80013d6:	e755      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013d8:	220f      	movs	r2, #15
 80013da:	400a      	ands	r2, r1
 80013dc:	2a04      	cmp	r2, #4
 80013de:	d000      	beq.n	80013e2 <__aeabi_ddiv+0x56a>
 80013e0:	e74a      	b.n	8001278 <__aeabi_ddiv+0x400>
 80013e2:	e74f      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013e4:	0015      	movs	r5, r2
 80013e6:	4286      	cmp	r6, r0
 80013e8:	d000      	beq.n	80013ec <__aeabi_ddiv+0x574>
 80013ea:	e66d      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013ec:	9a00      	ldr	r2, [sp, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d000      	beq.n	80013f4 <__aeabi_ddiv+0x57c>
 80013f2:	e669      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013f4:	e66a      	b.n	80010cc <__aeabi_ddiv+0x254>
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <__aeabi_ddiv+0x5d8>)
 80013f8:	445b      	add	r3, fp
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc00      	bgt.n	8001400 <__aeabi_ddiv+0x588>
 80013fe:	e713      	b.n	8001228 <__aeabi_ddiv+0x3b0>
 8001400:	2501      	movs	r5, #1
 8001402:	2100      	movs	r1, #0
 8001404:	44a8      	add	r8, r5
 8001406:	e66a      	b.n	80010de <__aeabi_ddiv+0x266>
 8001408:	075d      	lsls	r5, r3, #29
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	0b1a      	lsrs	r2, r3, #12
 800140e:	08c9      	lsrs	r1, r1, #3
 8001410:	2300      	movs	r3, #0
 8001412:	430d      	orrs	r5, r1
 8001414:	e587      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	3d02      	subs	r5, #2
 800141a:	004a      	lsls	r2, r1, #1
 800141c:	428a      	cmp	r2, r1
 800141e:	41bf      	sbcs	r7, r7
 8001420:	427f      	negs	r7, r7
 8001422:	193f      	adds	r7, r7, r4
 8001424:	19f6      	adds	r6, r6, r7
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	e7dd      	b.n	80013e6 <__aeabi_ddiv+0x56e>
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4643      	mov	r3, r8
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	431a      	orrs	r2, r3
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001436:	0b12      	lsrs	r2, r2, #12
 8001438:	e575      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	4299      	cmp	r1, r3
 800143e:	d3ea      	bcc.n	8001416 <__aeabi_ddiv+0x59e>
 8001440:	0015      	movs	r5, r2
 8001442:	e7d3      	b.n	80013ec <__aeabi_ddiv+0x574>
 8001444:	000007ff 	.word	0x000007ff
 8001448:	0000043e 	.word	0x0000043e
 800144c:	0000041e 	.word	0x0000041e
 8001450:	000003ff 	.word	0x000003ff

08001454 <__eqdf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	46de      	mov	lr, fp
 800145c:	4657      	mov	r7, sl
 800145e:	4690      	mov	r8, r2
 8001460:	b5e0      	push	{r5, r6, r7, lr}
 8001462:	0017      	movs	r7, r2
 8001464:	031a      	lsls	r2, r3, #12
 8001466:	0b12      	lsrs	r2, r2, #12
 8001468:	0005      	movs	r5, r0
 800146a:	4684      	mov	ip, r0
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <__eqdf2+0x80>)
 800146e:	030e      	lsls	r6, r1, #12
 8001470:	004c      	lsls	r4, r1, #1
 8001472:	4691      	mov	r9, r2
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	0fdb      	lsrs	r3, r3, #31
 8001478:	469b      	mov	fp, r3
 800147a:	0b36      	lsrs	r6, r6, #12
 800147c:	0d64      	lsrs	r4, r4, #21
 800147e:	0fc9      	lsrs	r1, r1, #31
 8001480:	0d52      	lsrs	r2, r2, #21
 8001482:	4284      	cmp	r4, r0
 8001484:	d019      	beq.n	80014ba <__eqdf2+0x66>
 8001486:	4282      	cmp	r2, r0
 8001488:	d010      	beq.n	80014ac <__eqdf2+0x58>
 800148a:	2001      	movs	r0, #1
 800148c:	4294      	cmp	r4, r2
 800148e:	d10e      	bne.n	80014ae <__eqdf2+0x5a>
 8001490:	454e      	cmp	r6, r9
 8001492:	d10c      	bne.n	80014ae <__eqdf2+0x5a>
 8001494:	2001      	movs	r0, #1
 8001496:	45c4      	cmp	ip, r8
 8001498:	d109      	bne.n	80014ae <__eqdf2+0x5a>
 800149a:	4559      	cmp	r1, fp
 800149c:	d017      	beq.n	80014ce <__eqdf2+0x7a>
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d105      	bne.n	80014ae <__eqdf2+0x5a>
 80014a2:	0030      	movs	r0, r6
 80014a4:	4328      	orrs	r0, r5
 80014a6:	1e43      	subs	r3, r0, #1
 80014a8:	4198      	sbcs	r0, r3
 80014aa:	e000      	b.n	80014ae <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	bcf0      	pop	{r4, r5, r6, r7}
 80014b0:	46bb      	mov	fp, r7
 80014b2:	46b2      	mov	sl, r6
 80014b4:	46a9      	mov	r9, r5
 80014b6:	46a0      	mov	r8, r4
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	0033      	movs	r3, r6
 80014bc:	2001      	movs	r0, #1
 80014be:	432b      	orrs	r3, r5
 80014c0:	d1f5      	bne.n	80014ae <__eqdf2+0x5a>
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d1f3      	bne.n	80014ae <__eqdf2+0x5a>
 80014c6:	464b      	mov	r3, r9
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d1f0      	bne.n	80014ae <__eqdf2+0x5a>
 80014cc:	e7e2      	b.n	8001494 <__eqdf2+0x40>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7ed      	b.n	80014ae <__eqdf2+0x5a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	4647      	mov	r7, r8
 80014dc:	46ce      	mov	lr, r9
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	0016      	movs	r6, r2
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	0b1b      	lsrs	r3, r3, #12
 80014e8:	4d2d      	ldr	r5, [pc, #180]	; (80015a0 <__gedf2+0xc8>)
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	b580      	push	{r7, lr}
 80014f0:	0043      	lsls	r3, r0, #1
 80014f2:	030f      	lsls	r7, r1, #12
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d021      	beq.n	800154a <__gedf2+0x72>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d013      	beq.n	8001532 <__gedf2+0x5a>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d122      	bne.n	8001554 <__gedf2+0x7c>
 800150e:	433c      	orrs	r4, r7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <__gedf2+0x42>
 8001514:	464d      	mov	r5, r9
 8001516:	432e      	orrs	r6, r5
 8001518:	d022      	beq.n	8001560 <__gedf2+0x88>
 800151a:	2c00      	cmp	r4, #0
 800151c:	d010      	beq.n	8001540 <__gedf2+0x68>
 800151e:	4281      	cmp	r1, r0
 8001520:	d022      	beq.n	8001568 <__gedf2+0x90>
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bcc0      	pop	{r6, r7}
 800152c:	46b9      	mov	r9, r7
 800152e:	46b0      	mov	r8, r6
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	464d      	mov	r5, r9
 8001534:	432e      	orrs	r6, r5
 8001536:	d129      	bne.n	800158c <__gedf2+0xb4>
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f0      	bne.n	800151e <__gedf2+0x46>
 800153c:	433c      	orrs	r4, r7
 800153e:	d1ee      	bne.n	800151e <__gedf2+0x46>
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f2      	bne.n	800152a <__gedf2+0x52>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7ef      	b.n	800152a <__gedf2+0x52>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d11d      	bne.n	800158c <__gedf2+0xb4>
 8001550:	4293      	cmp	r3, r2
 8001552:	d0ee      	beq.n	8001532 <__gedf2+0x5a>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e2      	bne.n	800151e <__gedf2+0x46>
 8001558:	464c      	mov	r4, r9
 800155a:	4326      	orrs	r6, r4
 800155c:	d1df      	bne.n	800151e <__gedf2+0x46>
 800155e:	e7e0      	b.n	8001522 <__gedf2+0x4a>
 8001560:	2000      	movs	r0, #0
 8001562:	2c00      	cmp	r4, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7dc      	b.n	8001522 <__gedf2+0x4a>
 8001568:	429a      	cmp	r2, r3
 800156a:	dc0a      	bgt.n	8001582 <__gedf2+0xaa>
 800156c:	dbe8      	blt.n	8001540 <__gedf2+0x68>
 800156e:	454f      	cmp	r7, r9
 8001570:	d8d7      	bhi.n	8001522 <__gedf2+0x4a>
 8001572:	d00e      	beq.n	8001592 <__gedf2+0xba>
 8001574:	2000      	movs	r0, #0
 8001576:	454f      	cmp	r7, r9
 8001578:	d2d7      	bcs.n	800152a <__gedf2+0x52>
 800157a:	2900      	cmp	r1, #0
 800157c:	d0e2      	beq.n	8001544 <__gedf2+0x6c>
 800157e:	0008      	movs	r0, r1
 8001580:	e7d3      	b.n	800152a <__gedf2+0x52>
 8001582:	4243      	negs	r3, r0
 8001584:	4158      	adcs	r0, r3
 8001586:	0040      	lsls	r0, r0, #1
 8001588:	3801      	subs	r0, #1
 800158a:	e7ce      	b.n	800152a <__gedf2+0x52>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7cb      	b.n	800152a <__gedf2+0x52>
 8001592:	45c4      	cmp	ip, r8
 8001594:	d8c5      	bhi.n	8001522 <__gedf2+0x4a>
 8001596:	2000      	movs	r0, #0
 8001598:	45c4      	cmp	ip, r8
 800159a:	d2c6      	bcs.n	800152a <__gedf2+0x52>
 800159c:	e7ed      	b.n	800157a <__gedf2+0xa2>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4647      	mov	r7, r8
 80015a8:	46ce      	mov	lr, r9
 80015aa:	0004      	movs	r4, r0
 80015ac:	0018      	movs	r0, r3
 80015ae:	0016      	movs	r6, r2
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	0b1b      	lsrs	r3, r3, #12
 80015b4:	4d2c      	ldr	r5, [pc, #176]	; (8001668 <__ledf2+0xc4>)
 80015b6:	004a      	lsls	r2, r1, #1
 80015b8:	4699      	mov	r9, r3
 80015ba:	b580      	push	{r7, lr}
 80015bc:	0043      	lsls	r3, r0, #1
 80015be:	030f      	lsls	r7, r1, #12
 80015c0:	46a4      	mov	ip, r4
 80015c2:	46b0      	mov	r8, r6
 80015c4:	0b3f      	lsrs	r7, r7, #12
 80015c6:	0d52      	lsrs	r2, r2, #21
 80015c8:	0fc9      	lsrs	r1, r1, #31
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fc0      	lsrs	r0, r0, #31
 80015ce:	42aa      	cmp	r2, r5
 80015d0:	d00d      	beq.n	80015ee <__ledf2+0x4a>
 80015d2:	42ab      	cmp	r3, r5
 80015d4:	d010      	beq.n	80015f8 <__ledf2+0x54>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d127      	bne.n	800162a <__ledf2+0x86>
 80015da:	433c      	orrs	r4, r7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <__ledf2+0x60>
 80015e0:	464d      	mov	r5, r9
 80015e2:	432e      	orrs	r6, r5
 80015e4:	d10e      	bne.n	8001604 <__ledf2+0x60>
 80015e6:	2000      	movs	r0, #0
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d015      	beq.n	8001618 <__ledf2+0x74>
 80015ec:	e00e      	b.n	800160c <__ledf2+0x68>
 80015ee:	003d      	movs	r5, r7
 80015f0:	4325      	orrs	r5, r4
 80015f2:	d110      	bne.n	8001616 <__ledf2+0x72>
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d118      	bne.n	800162a <__ledf2+0x86>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10b      	bne.n	8001616 <__ledf2+0x72>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d102      	bne.n	8001608 <__ledf2+0x64>
 8001602:	433c      	orrs	r4, r7
 8001604:	2c00      	cmp	r4, #0
 8001606:	d00b      	beq.n	8001620 <__ledf2+0x7c>
 8001608:	4281      	cmp	r1, r0
 800160a:	d014      	beq.n	8001636 <__ledf2+0x92>
 800160c:	2002      	movs	r0, #2
 800160e:	3901      	subs	r1, #1
 8001610:	4008      	ands	r0, r1
 8001612:	3801      	subs	r0, #1
 8001614:	e000      	b.n	8001618 <__ledf2+0x74>
 8001616:	2002      	movs	r0, #2
 8001618:	bcc0      	pop	{r6, r7}
 800161a:	46b9      	mov	r9, r7
 800161c:	46b0      	mov	r8, r6
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001620:	2800      	cmp	r0, #0
 8001622:	d1f9      	bne.n	8001618 <__ledf2+0x74>
 8001624:	2001      	movs	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7f6      	b.n	8001618 <__ledf2+0x74>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ec      	bne.n	8001608 <__ledf2+0x64>
 800162e:	464c      	mov	r4, r9
 8001630:	4326      	orrs	r6, r4
 8001632:	d1e9      	bne.n	8001608 <__ledf2+0x64>
 8001634:	e7ea      	b.n	800160c <__ledf2+0x68>
 8001636:	429a      	cmp	r2, r3
 8001638:	dd04      	ble.n	8001644 <__ledf2+0xa0>
 800163a:	4243      	negs	r3, r0
 800163c:	4158      	adcs	r0, r3
 800163e:	0040      	lsls	r0, r0, #1
 8001640:	3801      	subs	r0, #1
 8001642:	e7e9      	b.n	8001618 <__ledf2+0x74>
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <__ledf2+0x7c>
 8001648:	454f      	cmp	r7, r9
 800164a:	d8df      	bhi.n	800160c <__ledf2+0x68>
 800164c:	d006      	beq.n	800165c <__ledf2+0xb8>
 800164e:	2000      	movs	r0, #0
 8001650:	454f      	cmp	r7, r9
 8001652:	d2e1      	bcs.n	8001618 <__ledf2+0x74>
 8001654:	2900      	cmp	r1, #0
 8001656:	d0e5      	beq.n	8001624 <__ledf2+0x80>
 8001658:	0008      	movs	r0, r1
 800165a:	e7dd      	b.n	8001618 <__ledf2+0x74>
 800165c:	45c4      	cmp	ip, r8
 800165e:	d8d5      	bhi.n	800160c <__ledf2+0x68>
 8001660:	2000      	movs	r0, #0
 8001662:	45c4      	cmp	ip, r8
 8001664:	d2d8      	bcs.n	8001618 <__ledf2+0x74>
 8001666:	e7f5      	b.n	8001654 <__ledf2+0xb0>
 8001668:	000007ff 	.word	0x000007ff

0800166c <__aeabi_dmul>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	4657      	mov	r7, sl
 8001674:	464e      	mov	r6, r9
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	001f      	movs	r7, r3
 800167a:	030b      	lsls	r3, r1, #12
 800167c:	0b1b      	lsrs	r3, r3, #12
 800167e:	469b      	mov	fp, r3
 8001680:	004d      	lsls	r5, r1, #1
 8001682:	0fcb      	lsrs	r3, r1, #31
 8001684:	0004      	movs	r4, r0
 8001686:	4691      	mov	r9, r2
 8001688:	4698      	mov	r8, r3
 800168a:	b087      	sub	sp, #28
 800168c:	0d6d      	lsrs	r5, r5, #21
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x26>
 8001690:	e1cd      	b.n	8001a2e <__aeabi_dmul+0x3c2>
 8001692:	4bce      	ldr	r3, [pc, #824]	; (80019cc <__aeabi_dmul+0x360>)
 8001694:	429d      	cmp	r5, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x2e>
 8001698:	e1e9      	b.n	8001a6e <__aeabi_dmul+0x402>
 800169a:	465a      	mov	r2, fp
 800169c:	0f43      	lsrs	r3, r0, #29
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	00c3      	lsls	r3, r0, #3
 80016aa:	469a      	mov	sl, r3
 80016ac:	4bc8      	ldr	r3, [pc, #800]	; (80019d0 <__aeabi_dmul+0x364>)
 80016ae:	4693      	mov	fp, r2
 80016b0:	469c      	mov	ip, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	2600      	movs	r6, #0
 80016b6:	4465      	add	r5, ip
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	033c      	lsls	r4, r7, #12
 80016bc:	007b      	lsls	r3, r7, #1
 80016be:	4648      	mov	r0, r9
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	0fff      	lsrs	r7, r7, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x60>
 80016ca:	e189      	b.n	80019e0 <__aeabi_dmul+0x374>
 80016cc:	4abf      	ldr	r2, [pc, #764]	; (80019cc <__aeabi_dmul+0x360>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <__aeabi_dmul+0x9a>
 80016d2:	0f42      	lsrs	r2, r0, #29
 80016d4:	00e4      	lsls	r4, r4, #3
 80016d6:	4322      	orrs	r2, r4
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0424      	lsls	r4, r4, #16
 80016dc:	4314      	orrs	r4, r2
 80016de:	4abc      	ldr	r2, [pc, #752]	; (80019d0 <__aeabi_dmul+0x364>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4694      	mov	ip, r2
 80016e4:	4642      	mov	r2, r8
 80016e6:	4463      	add	r3, ip
 80016e8:	195b      	adds	r3, r3, r5
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
 80016ee:	407a      	eors	r2, r7
 80016f0:	3301      	adds	r3, #1
 80016f2:	00c0      	lsls	r0, r0, #3
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2e0a      	cmp	r6, #10
 80016fa:	dd1c      	ble.n	8001736 <__aeabi_dmul+0xca>
 80016fc:	003a      	movs	r2, r7
 80016fe:	2e0b      	cmp	r6, #11
 8001700:	d05e      	beq.n	80017c0 <__aeabi_dmul+0x154>
 8001702:	4647      	mov	r7, r8
 8001704:	e056      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001706:	4649      	mov	r1, r9
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <__aeabi_dmul+0x360>)
 800170a:	4321      	orrs	r1, r4
 800170c:	18eb      	adds	r3, r5, r3
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2900      	cmp	r1, #0
 8001712:	d12a      	bne.n	800176a <__aeabi_dmul+0xfe>
 8001714:	2080      	movs	r0, #128	; 0x80
 8001716:	2202      	movs	r2, #2
 8001718:	0100      	lsls	r0, r0, #4
 800171a:	002b      	movs	r3, r5
 800171c:	4684      	mov	ip, r0
 800171e:	4316      	orrs	r6, r2
 8001720:	4642      	mov	r2, r8
 8001722:	4463      	add	r3, ip
 8001724:	407a      	eors	r2, r7
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2e0a      	cmp	r6, #10
 800172c:	dd00      	ble.n	8001730 <__aeabi_dmul+0xc4>
 800172e:	e231      	b.n	8001b94 <__aeabi_dmul+0x528>
 8001730:	2000      	movs	r0, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2e02      	cmp	r6, #2
 8001738:	dc26      	bgt.n	8001788 <__aeabi_dmul+0x11c>
 800173a:	3e01      	subs	r6, #1
 800173c:	2e01      	cmp	r6, #1
 800173e:	d852      	bhi.n	80017e6 <__aeabi_dmul+0x17a>
 8001740:	2902      	cmp	r1, #2
 8001742:	d04c      	beq.n	80017de <__aeabi_dmul+0x172>
 8001744:	2901      	cmp	r1, #1
 8001746:	d000      	beq.n	800174a <__aeabi_dmul+0xde>
 8001748:	e118      	b.n	800197c <__aeabi_dmul+0x310>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2500      	movs	r5, #0
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	4323      	orrs	r3, r4
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	4313      	orrs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	0019      	movs	r1, r3
 800175c:	b007      	add	sp, #28
 800175e:	bcf0      	pop	{r4, r5, r6, r7}
 8001760:	46bb      	mov	fp, r7
 8001762:	46b2      	mov	sl, r6
 8001764:	46a9      	mov	r9, r5
 8001766:	46a0      	mov	r8, r4
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	2203      	movs	r2, #3
 800176e:	0109      	lsls	r1, r1, #4
 8001770:	002b      	movs	r3, r5
 8001772:	468c      	mov	ip, r1
 8001774:	4316      	orrs	r6, r2
 8001776:	4642      	mov	r2, r8
 8001778:	4463      	add	r3, ip
 800177a:	407a      	eors	r2, r7
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2e0a      	cmp	r6, #10
 8001782:	dd00      	ble.n	8001786 <__aeabi_dmul+0x11a>
 8001784:	e228      	b.n	8001bd8 <__aeabi_dmul+0x56c>
 8001786:	2103      	movs	r1, #3
 8001788:	2501      	movs	r5, #1
 800178a:	40b5      	lsls	r5, r6
 800178c:	46ac      	mov	ip, r5
 800178e:	26a6      	movs	r6, #166	; 0xa6
 8001790:	4663      	mov	r3, ip
 8001792:	00f6      	lsls	r6, r6, #3
 8001794:	4035      	ands	r5, r6
 8001796:	4233      	tst	r3, r6
 8001798:	d10b      	bne.n	80017b2 <__aeabi_dmul+0x146>
 800179a:	2690      	movs	r6, #144	; 0x90
 800179c:	00b6      	lsls	r6, r6, #2
 800179e:	4233      	tst	r3, r6
 80017a0:	d118      	bne.n	80017d4 <__aeabi_dmul+0x168>
 80017a2:	3eb9      	subs	r6, #185	; 0xb9
 80017a4:	3eff      	subs	r6, #255	; 0xff
 80017a6:	421e      	tst	r6, r3
 80017a8:	d01d      	beq.n	80017e6 <__aeabi_dmul+0x17a>
 80017aa:	46a3      	mov	fp, r4
 80017ac:	4682      	mov	sl, r0
 80017ae:	9100      	str	r1, [sp, #0]
 80017b0:	e000      	b.n	80017b4 <__aeabi_dmul+0x148>
 80017b2:	0017      	movs	r7, r2
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	003a      	movs	r2, r7
 80017b8:	2902      	cmp	r1, #2
 80017ba:	d010      	beq.n	80017de <__aeabi_dmul+0x172>
 80017bc:	465c      	mov	r4, fp
 80017be:	4650      	mov	r0, sl
 80017c0:	2903      	cmp	r1, #3
 80017c2:	d1bf      	bne.n	8001744 <__aeabi_dmul+0xd8>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	431c      	orrs	r4, r3
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <__aeabi_dmul+0x360>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	e7bd      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017d4:	2480      	movs	r4, #128	; 0x80
 80017d6:	2200      	movs	r2, #0
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <__aeabi_dmul+0x360>)
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	e7b8      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017de:	2400      	movs	r4, #0
 80017e0:	2500      	movs	r5, #0
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <__aeabi_dmul+0x360>)
 80017e4:	e7b4      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017e6:	4653      	mov	r3, sl
 80017e8:	041e      	lsls	r6, r3, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	0c1f      	lsrs	r7, r3, #16
 80017ee:	0033      	movs	r3, r6
 80017f0:	0c01      	lsrs	r1, r0, #16
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c00      	lsrs	r0, r0, #16
 80017f6:	4343      	muls	r3, r0
 80017f8:	4698      	mov	r8, r3
 80017fa:	0003      	movs	r3, r0
 80017fc:	437b      	muls	r3, r7
 80017fe:	4699      	mov	r9, r3
 8001800:	0033      	movs	r3, r6
 8001802:	434b      	muls	r3, r1
 8001804:	469c      	mov	ip, r3
 8001806:	4643      	mov	r3, r8
 8001808:	000d      	movs	r5, r1
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	469a      	mov	sl, r3
 800180e:	437d      	muls	r5, r7
 8001810:	44cc      	add	ip, r9
 8001812:	44d4      	add	ip, sl
 8001814:	9500      	str	r5, [sp, #0]
 8001816:	45e1      	cmp	r9, ip
 8001818:	d904      	bls.n	8001824 <__aeabi_dmul+0x1b8>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4699      	mov	r9, r3
 8001820:	444d      	add	r5, r9
 8001822:	9500      	str	r5, [sp, #0]
 8001824:	4663      	mov	r3, ip
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	001d      	movs	r5, r3
 800182a:	4663      	mov	r3, ip
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	469c      	mov	ip, r3
 8001830:	4643      	mov	r3, r8
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	4663      	mov	r3, ip
 800183a:	4443      	add	r3, r8
 800183c:	9303      	str	r3, [sp, #12]
 800183e:	0c23      	lsrs	r3, r4, #16
 8001840:	4698      	mov	r8, r3
 8001842:	0033      	movs	r3, r6
 8001844:	0424      	lsls	r4, r4, #16
 8001846:	0c24      	lsrs	r4, r4, #16
 8001848:	4363      	muls	r3, r4
 800184a:	469c      	mov	ip, r3
 800184c:	0023      	movs	r3, r4
 800184e:	437b      	muls	r3, r7
 8001850:	4699      	mov	r9, r3
 8001852:	4643      	mov	r3, r8
 8001854:	435e      	muls	r6, r3
 8001856:	435f      	muls	r7, r3
 8001858:	444e      	add	r6, r9
 800185a:	4663      	mov	r3, ip
 800185c:	46b2      	mov	sl, r6
 800185e:	0c1e      	lsrs	r6, r3, #16
 8001860:	4456      	add	r6, sl
 8001862:	45b1      	cmp	r9, r6
 8001864:	d903      	bls.n	800186e <__aeabi_dmul+0x202>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4699      	mov	r9, r3
 800186c:	444f      	add	r7, r9
 800186e:	0c33      	lsrs	r3, r6, #16
 8001870:	4699      	mov	r9, r3
 8001872:	003b      	movs	r3, r7
 8001874:	444b      	add	r3, r9
 8001876:	9305      	str	r3, [sp, #20]
 8001878:	4663      	mov	r3, ip
 800187a:	46ac      	mov	ip, r5
 800187c:	041f      	lsls	r7, r3, #16
 800187e:	0c3f      	lsrs	r7, r7, #16
 8001880:	0436      	lsls	r6, r6, #16
 8001882:	19f6      	adds	r6, r6, r7
 8001884:	44b4      	add	ip, r6
 8001886:	4663      	mov	r3, ip
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	465b      	mov	r3, fp
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	469c      	mov	ip, r3
 8001890:	465b      	mov	r3, fp
 8001892:	041f      	lsls	r7, r3, #16
 8001894:	0c3f      	lsrs	r7, r7, #16
 8001896:	003b      	movs	r3, r7
 8001898:	4343      	muls	r3, r0
 800189a:	4699      	mov	r9, r3
 800189c:	4663      	mov	r3, ip
 800189e:	4343      	muls	r3, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	4660      	mov	r0, ip
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	469b      	mov	fp, r3
 80018aa:	4348      	muls	r0, r1
 80018ac:	4379      	muls	r1, r7
 80018ae:	4451      	add	r1, sl
 80018b0:	4459      	add	r1, fp
 80018b2:	458a      	cmp	sl, r1
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x252>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	469a      	mov	sl, r3
 80018bc:	4450      	add	r0, sl
 80018be:	0c0b      	lsrs	r3, r1, #16
 80018c0:	469a      	mov	sl, r3
 80018c2:	464b      	mov	r3, r9
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	4699      	mov	r9, r3
 80018ca:	003b      	movs	r3, r7
 80018cc:	4363      	muls	r3, r4
 80018ce:	0409      	lsls	r1, r1, #16
 80018d0:	4645      	mov	r5, r8
 80018d2:	4449      	add	r1, r9
 80018d4:	4699      	mov	r9, r3
 80018d6:	4663      	mov	r3, ip
 80018d8:	435c      	muls	r4, r3
 80018da:	436b      	muls	r3, r5
 80018dc:	469c      	mov	ip, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	4698      	mov	r8, r3
 80018e4:	436f      	muls	r7, r5
 80018e6:	193f      	adds	r7, r7, r4
 80018e8:	4447      	add	r7, r8
 80018ea:	4450      	add	r0, sl
 80018ec:	42bc      	cmp	r4, r7
 80018ee:	d903      	bls.n	80018f8 <__aeabi_dmul+0x28c>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	4698      	mov	r8, r3
 80018f6:	44c4      	add	ip, r8
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	9d00      	ldr	r5, [sp, #0]
 80018fc:	4698      	mov	r8, r3
 80018fe:	4445      	add	r5, r8
 8001900:	42b5      	cmp	r5, r6
 8001902:	41b6      	sbcs	r6, r6
 8001904:	4273      	negs	r3, r6
 8001906:	4698      	mov	r8, r3
 8001908:	464b      	mov	r3, r9
 800190a:	041e      	lsls	r6, r3, #16
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	043c      	lsls	r4, r7, #16
 8001910:	4699      	mov	r9, r3
 8001912:	0c36      	lsrs	r6, r6, #16
 8001914:	19a4      	adds	r4, r4, r6
 8001916:	444c      	add	r4, r9
 8001918:	46a1      	mov	r9, r4
 800191a:	4683      	mov	fp, r0
 800191c:	186e      	adds	r6, r5, r1
 800191e:	44c1      	add	r9, r8
 8001920:	428e      	cmp	r6, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	44cb      	add	fp, r9
 8001926:	465d      	mov	r5, fp
 8001928:	4249      	negs	r1, r1
 800192a:	186d      	adds	r5, r5, r1
 800192c:	429c      	cmp	r4, r3
 800192e:	41a4      	sbcs	r4, r4
 8001930:	45c1      	cmp	r9, r8
 8001932:	419b      	sbcs	r3, r3
 8001934:	4583      	cmp	fp, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	428d      	cmp	r5, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	425b      	negs	r3, r3
 800193e:	4264      	negs	r4, r4
 8001940:	431c      	orrs	r4, r3
 8001942:	4240      	negs	r0, r0
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	4249      	negs	r1, r1
 8001948:	4301      	orrs	r1, r0
 800194a:	0270      	lsls	r0, r6, #9
 800194c:	0c3f      	lsrs	r7, r7, #16
 800194e:	4318      	orrs	r0, r3
 8001950:	19e4      	adds	r4, r4, r7
 8001952:	1e47      	subs	r7, r0, #1
 8001954:	41b8      	sbcs	r0, r7
 8001956:	1864      	adds	r4, r4, r1
 8001958:	4464      	add	r4, ip
 800195a:	0df6      	lsrs	r6, r6, #23
 800195c:	0261      	lsls	r1, r4, #9
 800195e:	4330      	orrs	r0, r6
 8001960:	0dec      	lsrs	r4, r5, #23
 8001962:	026e      	lsls	r6, r5, #9
 8001964:	430c      	orrs	r4, r1
 8001966:	4330      	orrs	r0, r6
 8001968:	01c9      	lsls	r1, r1, #7
 800196a:	d400      	bmi.n	800196e <__aeabi_dmul+0x302>
 800196c:	e0f1      	b.n	8001b52 <__aeabi_dmul+0x4e6>
 800196e:	2101      	movs	r1, #1
 8001970:	0843      	lsrs	r3, r0, #1
 8001972:	4001      	ands	r1, r0
 8001974:	430b      	orrs	r3, r1
 8001976:	07e0      	lsls	r0, r4, #31
 8001978:	4318      	orrs	r0, r3
 800197a:	0864      	lsrs	r4, r4, #1
 800197c:	4915      	ldr	r1, [pc, #84]	; (80019d4 <__aeabi_dmul+0x368>)
 800197e:	9b02      	ldr	r3, [sp, #8]
 8001980:	468c      	mov	ip, r1
 8001982:	4463      	add	r3, ip
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_dmul+0x31e>
 8001988:	e097      	b.n	8001aba <__aeabi_dmul+0x44e>
 800198a:	0741      	lsls	r1, r0, #29
 800198c:	d009      	beq.n	80019a2 <__aeabi_dmul+0x336>
 800198e:	210f      	movs	r1, #15
 8001990:	4001      	ands	r1, r0
 8001992:	2904      	cmp	r1, #4
 8001994:	d005      	beq.n	80019a2 <__aeabi_dmul+0x336>
 8001996:	1d01      	adds	r1, r0, #4
 8001998:	4281      	cmp	r1, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	4240      	negs	r0, r0
 800199e:	1824      	adds	r4, r4, r0
 80019a0:	0008      	movs	r0, r1
 80019a2:	01e1      	lsls	r1, r4, #7
 80019a4:	d506      	bpl.n	80019b4 <__aeabi_dmul+0x348>
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	00c9      	lsls	r1, r1, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <__aeabi_dmul+0x36c>)
 80019ae:	401c      	ands	r4, r3
 80019b0:	9b02      	ldr	r3, [sp, #8]
 80019b2:	4463      	add	r3, ip
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <__aeabi_dmul+0x370>)
 80019b6:	428b      	cmp	r3, r1
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dmul+0x350>
 80019ba:	e710      	b.n	80017de <__aeabi_dmul+0x172>
 80019bc:	0761      	lsls	r1, r4, #29
 80019be:	08c5      	lsrs	r5, r0, #3
 80019c0:	0264      	lsls	r4, r4, #9
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	430d      	orrs	r5, r1
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	e6c1      	b.n	8001750 <__aeabi_dmul+0xe4>
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	fffffc01 	.word	0xfffffc01
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	464b      	mov	r3, r9
 80019e2:	4323      	orrs	r3, r4
 80019e4:	d059      	beq.n	8001a9a <__aeabi_dmul+0x42e>
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x380>
 80019ea:	e0a3      	b.n	8001b34 <__aeabi_dmul+0x4c8>
 80019ec:	0020      	movs	r0, r4
 80019ee:	f000 fdb1 	bl	8002554 <__clzsi2>
 80019f2:	0001      	movs	r1, r0
 80019f4:	0003      	movs	r3, r0
 80019f6:	390b      	subs	r1, #11
 80019f8:	221d      	movs	r2, #29
 80019fa:	1a52      	subs	r2, r2, r1
 80019fc:	4649      	mov	r1, r9
 80019fe:	0018      	movs	r0, r3
 8001a00:	40d1      	lsrs	r1, r2
 8001a02:	464a      	mov	r2, r9
 8001a04:	3808      	subs	r0, #8
 8001a06:	4082      	lsls	r2, r0
 8001a08:	4084      	lsls	r4, r0
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	430c      	orrs	r4, r1
 8001a0e:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a10:	1aeb      	subs	r3, r5, r3
 8001a12:	4694      	mov	ip, r2
 8001a14:	4642      	mov	r2, r8
 8001a16:	4463      	add	r3, ip
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	407a      	eors	r2, r7
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2e0a      	cmp	r6, #10
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dmul+0x3c0>
 8001a2a:	e667      	b.n	80016fc <__aeabi_dmul+0x90>
 8001a2c:	e683      	b.n	8001736 <__aeabi_dmul+0xca>
 8001a2e:	465b      	mov	r3, fp
 8001a30:	4303      	orrs	r3, r0
 8001a32:	469a      	mov	sl, r3
 8001a34:	d02a      	beq.n	8001a8c <__aeabi_dmul+0x420>
 8001a36:	465b      	mov	r3, fp
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06d      	beq.n	8001b18 <__aeabi_dmul+0x4ac>
 8001a3c:	4658      	mov	r0, fp
 8001a3e:	f000 fd89 	bl	8002554 <__clzsi2>
 8001a42:	0001      	movs	r1, r0
 8001a44:	0003      	movs	r3, r0
 8001a46:	390b      	subs	r1, #11
 8001a48:	221d      	movs	r2, #29
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	465d      	mov	r5, fp
 8001a52:	40d1      	lsrs	r1, r2
 8001a54:	3808      	subs	r0, #8
 8001a56:	4085      	lsls	r5, r0
 8001a58:	000a      	movs	r2, r1
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	432a      	orrs	r2, r5
 8001a5e:	4693      	mov	fp, r2
 8001a60:	46a2      	mov	sl, r4
 8001a62:	4d5f      	ldr	r5, [pc, #380]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a64:	2600      	movs	r6, #0
 8001a66:	1aed      	subs	r5, r5, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e625      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	4303      	orrs	r3, r0
 8001a72:	469a      	mov	sl, r3
 8001a74:	d105      	bne.n	8001a82 <__aeabi_dmul+0x416>
 8001a76:	2300      	movs	r3, #0
 8001a78:	469b      	mov	fp, r3
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	2608      	movs	r6, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	e61b      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a82:	2303      	movs	r3, #3
 8001a84:	4682      	mov	sl, r0
 8001a86:	260c      	movs	r6, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	e616      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	469b      	mov	fp, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	2604      	movs	r6, #4
 8001a94:	2500      	movs	r5, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e60f      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	9501      	str	r5, [sp, #4]
 8001aa0:	431e      	orrs	r6, r3
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	407a      	eors	r2, r7
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2e0a      	cmp	r6, #10
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dmul+0x44c>
 8001ab6:	e621      	b.n	80016fc <__aeabi_dmul+0x90>
 8001ab8:	e63d      	b.n	8001736 <__aeabi_dmul+0xca>
 8001aba:	2101      	movs	r1, #1
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	2938      	cmp	r1, #56	; 0x38
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dmul+0x458>
 8001ac2:	e642      	b.n	800174a <__aeabi_dmul+0xde>
 8001ac4:	291f      	cmp	r1, #31
 8001ac6:	dd47      	ble.n	8001b58 <__aeabi_dmul+0x4ec>
 8001ac8:	261f      	movs	r6, #31
 8001aca:	0025      	movs	r5, r4
 8001acc:	4276      	negs	r6, r6
 8001ace:	1af3      	subs	r3, r6, r3
 8001ad0:	40dd      	lsrs	r5, r3
 8001ad2:	002b      	movs	r3, r5
 8001ad4:	2920      	cmp	r1, #32
 8001ad6:	d005      	beq.n	8001ae4 <__aeabi_dmul+0x478>
 8001ad8:	4942      	ldr	r1, [pc, #264]	; (8001be4 <__aeabi_dmul+0x578>)
 8001ada:	9d02      	ldr	r5, [sp, #8]
 8001adc:	468c      	mov	ip, r1
 8001ade:	4465      	add	r5, ip
 8001ae0:	40ac      	lsls	r4, r5
 8001ae2:	4320      	orrs	r0, r4
 8001ae4:	1e41      	subs	r1, r0, #1
 8001ae6:	4188      	sbcs	r0, r1
 8001ae8:	4318      	orrs	r0, r3
 8001aea:	2307      	movs	r3, #7
 8001aec:	001d      	movs	r5, r3
 8001aee:	2400      	movs	r4, #0
 8001af0:	4005      	ands	r5, r0
 8001af2:	4203      	tst	r3, r0
 8001af4:	d04a      	beq.n	8001b8c <__aeabi_dmul+0x520>
 8001af6:	230f      	movs	r3, #15
 8001af8:	2400      	movs	r4, #0
 8001afa:	4003      	ands	r3, r0
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d042      	beq.n	8001b86 <__aeabi_dmul+0x51a>
 8001b00:	1d03      	adds	r3, r0, #4
 8001b02:	4283      	cmp	r3, r0
 8001b04:	4180      	sbcs	r0, r0
 8001b06:	4240      	negs	r0, r0
 8001b08:	1824      	adds	r4, r4, r0
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	0223      	lsls	r3, r4, #8
 8001b0e:	d53a      	bpl.n	8001b86 <__aeabi_dmul+0x51a>
 8001b10:	2301      	movs	r3, #1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e61b      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b18:	f000 fd1c 	bl	8002554 <__clzsi2>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	0003      	movs	r3, r0
 8001b20:	3115      	adds	r1, #21
 8001b22:	3320      	adds	r3, #32
 8001b24:	291c      	cmp	r1, #28
 8001b26:	dd8f      	ble.n	8001a48 <__aeabi_dmul+0x3dc>
 8001b28:	3808      	subs	r0, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4692      	mov	sl, r2
 8001b30:	46a3      	mov	fp, r4
 8001b32:	e796      	b.n	8001a62 <__aeabi_dmul+0x3f6>
 8001b34:	f000 fd0e 	bl	8002554 <__clzsi2>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	3115      	adds	r1, #21
 8001b3e:	3320      	adds	r3, #32
 8001b40:	291c      	cmp	r1, #28
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dmul+0x4da>
 8001b44:	e758      	b.n	80019f8 <__aeabi_dmul+0x38c>
 8001b46:	0002      	movs	r2, r0
 8001b48:	464c      	mov	r4, r9
 8001b4a:	3a08      	subs	r2, #8
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	4094      	lsls	r4, r2
 8001b50:	e75d      	b.n	8001a0e <__aeabi_dmul+0x3a2>
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	e711      	b.n	800197c <__aeabi_dmul+0x310>
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <__aeabi_dmul+0x57c>)
 8001b5a:	0026      	movs	r6, r4
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	0003      	movs	r3, r0
 8001b60:	9d02      	ldr	r5, [sp, #8]
 8001b62:	40cb      	lsrs	r3, r1
 8001b64:	4465      	add	r5, ip
 8001b66:	40ae      	lsls	r6, r5
 8001b68:	431e      	orrs	r6, r3
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	40ab      	lsls	r3, r5
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	4183      	sbcs	r3, r0
 8001b72:	0030      	movs	r0, r6
 8001b74:	4318      	orrs	r0, r3
 8001b76:	40cc      	lsrs	r4, r1
 8001b78:	0743      	lsls	r3, r0, #29
 8001b7a:	d0c7      	beq.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	4003      	ands	r3, r0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d1bd      	bne.n	8001b00 <__aeabi_dmul+0x494>
 8001b84:	e7c2      	b.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b86:	0765      	lsls	r5, r4, #29
 8001b88:	0264      	lsls	r4, r4, #9
 8001b8a:	0b24      	lsrs	r4, r4, #12
 8001b8c:	08c0      	lsrs	r0, r0, #3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4305      	orrs	r5, r0
 8001b92:	e5dd      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b94:	2500      	movs	r5, #0
 8001b96:	2302      	movs	r3, #2
 8001b98:	2e0f      	cmp	r6, #15
 8001b9a:	d10c      	bne.n	8001bb6 <__aeabi_dmul+0x54a>
 8001b9c:	2480      	movs	r4, #128	; 0x80
 8001b9e:	465b      	mov	r3, fp
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4223      	tst	r3, r4
 8001ba4:	d00e      	beq.n	8001bc4 <__aeabi_dmul+0x558>
 8001ba6:	4221      	tst	r1, r4
 8001ba8:	d10c      	bne.n	8001bc4 <__aeabi_dmul+0x558>
 8001baa:	430c      	orrs	r4, r1
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	003a      	movs	r2, r7
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <__aeabi_dmul+0x580>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e5cc      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bb6:	2e0b      	cmp	r6, #11
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dmul+0x550>
 8001bba:	e5a2      	b.n	8001702 <__aeabi_dmul+0x96>
 8001bbc:	468b      	mov	fp, r1
 8001bbe:	46aa      	mov	sl, r5
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	e5f7      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001bc4:	2480      	movs	r4, #128	; 0x80
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4655      	mov	r5, sl
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_dmul+0x580>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e5bb      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bd8:	464d      	mov	r5, r9
 8001bda:	0021      	movs	r1, r4
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e7db      	b.n	8001b98 <__aeabi_dmul+0x52c>
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	0000043e 	.word	0x0000043e
 8001be8:	0000041e 	.word	0x0000041e
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dsub>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	0004      	movs	r4, r0
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	032b      	lsls	r3, r5, #12
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	0f62      	lsrs	r2, r4, #29
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	00e3      	lsls	r3, r4, #3
 8001c0e:	030c      	lsls	r4, r1, #12
 8001c10:	0a64      	lsrs	r4, r4, #9
 8001c12:	0f47      	lsrs	r7, r0, #29
 8001c14:	4327      	orrs	r7, r4
 8001c16:	4cd0      	ldr	r4, [pc, #832]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c18:	006e      	lsls	r6, r5, #1
 8001c1a:	4691      	mov	r9, r2
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	004a      	lsls	r2, r1, #1
 8001c20:	00c0      	lsls	r0, r0, #3
 8001c22:	4698      	mov	r8, r3
 8001c24:	46a2      	mov	sl, r4
 8001c26:	0d76      	lsrs	r6, r6, #21
 8001c28:	0fed      	lsrs	r5, r5, #31
 8001c2a:	0d52      	lsrs	r2, r2, #21
 8001c2c:	0fc9      	lsrs	r1, r1, #31
 8001c2e:	9001      	str	r0, [sp, #4]
 8001c30:	42a2      	cmp	r2, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x46>
 8001c34:	e0b9      	b.n	8001daa <__aeabi_dsub+0x1ba>
 8001c36:	2401      	movs	r4, #1
 8001c38:	4061      	eors	r1, r4
 8001c3a:	468b      	mov	fp, r1
 8001c3c:	428d      	cmp	r5, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x52>
 8001c40:	e08d      	b.n	8001d5e <__aeabi_dsub+0x16e>
 8001c42:	1ab4      	subs	r4, r6, r2
 8001c44:	46a4      	mov	ip, r4
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x5c>
 8001c4a:	e0b7      	b.n	8001dbc <__aeabi_dsub+0x1cc>
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x62>
 8001c50:	e0cb      	b.n	8001dea <__aeabi_dsub+0x1fa>
 8001c52:	4ac1      	ldr	r2, [pc, #772]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c54:	4296      	cmp	r6, r2
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x6a>
 8001c58:	e186      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0412      	lsls	r2, r2, #16
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	2a38      	cmp	r2, #56	; 0x38
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0x78>
 8001c66:	e1a4      	b.n	8001fb2 <__aeabi_dsub+0x3c2>
 8001c68:	2a1f      	cmp	r2, #31
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x7e>
 8001c6c:	e21d      	b.n	80020aa <__aeabi_dsub+0x4ba>
 8001c6e:	4661      	mov	r1, ip
 8001c70:	2220      	movs	r2, #32
 8001c72:	003c      	movs	r4, r7
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	0001      	movs	r1, r0
 8001c78:	4090      	lsls	r0, r2
 8001c7a:	4094      	lsls	r4, r2
 8001c7c:	1e42      	subs	r2, r0, #1
 8001c7e:	4190      	sbcs	r0, r2
 8001c80:	4662      	mov	r2, ip
 8001c82:	46a0      	mov	r8, r4
 8001c84:	4664      	mov	r4, ip
 8001c86:	40d7      	lsrs	r7, r2
 8001c88:	464a      	mov	r2, r9
 8001c8a:	40e1      	lsrs	r1, r4
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	1bd2      	subs	r2, r2, r7
 8001c90:	4691      	mov	r9, r2
 8001c92:	430c      	orrs	r4, r1
 8001c94:	4304      	orrs	r4, r0
 8001c96:	1b1c      	subs	r4, r3, r4
 8001c98:	42a3      	cmp	r3, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0xbc>
 8001caa:	e12b      	b.n	8001f04 <__aeabi_dsub+0x314>
 8001cac:	4653      	mov	r3, sl
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	0a53      	lsrs	r3, r2, #9
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0xcc>
 8001cba:	e166      	b.n	8001f8a <__aeabi_dsub+0x39a>
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f000 fc49 	bl	8002554 <__clzsi2>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	3b08      	subs	r3, #8
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	0020      	movs	r0, r4
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	4651      	mov	r1, sl
 8001cce:	40d0      	lsrs	r0, r2
 8001cd0:	4099      	lsls	r1, r3
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	409c      	lsls	r4, r3
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	dd00      	ble.n	8001cde <__aeabi_dsub+0xee>
 8001cdc:	e164      	b.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001cde:	1b9b      	subs	r3, r3, r6
 8001ce0:	1c59      	adds	r1, r3, #1
 8001ce2:	291f      	cmp	r1, #31
 8001ce4:	dd00      	ble.n	8001ce8 <__aeabi_dsub+0xf8>
 8001ce6:	e0fe      	b.n	8001ee6 <__aeabi_dsub+0x2f6>
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0010      	movs	r0, r2
 8001cec:	0026      	movs	r6, r4
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	409c      	lsls	r4, r3
 8001cf2:	4098      	lsls	r0, r3
 8001cf4:	40ce      	lsrs	r6, r1
 8001cf6:	40ca      	lsrs	r2, r1
 8001cf8:	1e63      	subs	r3, r4, #1
 8001cfa:	419c      	sbcs	r4, r3
 8001cfc:	4330      	orrs	r0, r6
 8001cfe:	4692      	mov	sl, r2
 8001d00:	2600      	movs	r6, #0
 8001d02:	4304      	orrs	r4, r0
 8001d04:	0763      	lsls	r3, r4, #29
 8001d06:	d009      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d08:	230f      	movs	r3, #15
 8001d0a:	4023      	ands	r3, r4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d005      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d10:	1d23      	adds	r3, r4, #4
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	41a4      	sbcs	r4, r4
 8001d16:	4264      	negs	r4, r4
 8001d18:	44a2      	add	sl, r4
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	4653      	mov	r3, sl
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	d400      	bmi.n	8001d24 <__aeabi_dsub+0x134>
 8001d22:	e0f2      	b.n	8001f0a <__aeabi_dsub+0x31a>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <__aeabi_dsub+0x368>)
 8001d26:	3601      	adds	r6, #1
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x13e>
 8001d2c:	e10f      	b.n	8001f4e <__aeabi_dsub+0x35e>
 8001d2e:	4653      	mov	r3, sl
 8001d30:	498a      	ldr	r1, [pc, #552]	; (8001f5c <__aeabi_dsub+0x36c>)
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	400b      	ands	r3, r1
 8001d36:	0019      	movs	r1, r3
 8001d38:	075b      	lsls	r3, r3, #29
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	0572      	lsls	r2, r6, #21
 8001d3e:	024c      	lsls	r4, r1, #9
 8001d40:	0b24      	lsrs	r4, r4, #12
 8001d42:	0d52      	lsrs	r2, r2, #21
 8001d44:	0512      	lsls	r2, r2, #20
 8001d46:	4322      	orrs	r2, r4
 8001d48:	07ed      	lsls	r5, r5, #31
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	b003      	add	sp, #12
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	1ab4      	subs	r4, r6, r2
 8001d60:	46a4      	mov	ip, r4
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	dd59      	ble.n	8001e1a <__aeabi_dsub+0x22a>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x17c>
 8001d6a:	e0b0      	b.n	8001ece <__aeabi_dsub+0x2de>
 8001d6c:	4556      	cmp	r6, sl
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x182>
 8001d70:	e0fa      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	4317      	orrs	r7, r2
 8001d78:	4662      	mov	r2, ip
 8001d7a:	2a38      	cmp	r2, #56	; 0x38
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x190>
 8001d7e:	e0d4      	b.n	8001f2a <__aeabi_dsub+0x33a>
 8001d80:	2a1f      	cmp	r2, #31
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x196>
 8001d84:	e1c0      	b.n	8002108 <__aeabi_dsub+0x518>
 8001d86:	0039      	movs	r1, r7
 8001d88:	3a20      	subs	r2, #32
 8001d8a:	40d1      	lsrs	r1, r2
 8001d8c:	4662      	mov	r2, ip
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d006      	beq.n	8001da0 <__aeabi_dsub+0x1b0>
 8001d92:	4664      	mov	r4, ip
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	1b12      	subs	r2, r2, r4
 8001d98:	003c      	movs	r4, r7
 8001d9a:	4094      	lsls	r4, r2
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	9401      	str	r4, [sp, #4]
 8001da0:	9c01      	ldr	r4, [sp, #4]
 8001da2:	1e62      	subs	r2, r4, #1
 8001da4:	4194      	sbcs	r4, r2
 8001da6:	430c      	orrs	r4, r1
 8001da8:	e0c3      	b.n	8001f32 <__aeabi_dsub+0x342>
 8001daa:	003c      	movs	r4, r7
 8001dac:	4304      	orrs	r4, r0
 8001dae:	d02b      	beq.n	8001e08 <__aeabi_dsub+0x218>
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d02e      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001db6:	4c6a      	ldr	r4, [pc, #424]	; (8001f60 <__aeabi_dsub+0x370>)
 8001db8:	46a4      	mov	ip, r4
 8001dba:	44b4      	add	ip, r6
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d05f      	beq.n	8001e82 <__aeabi_dsub+0x292>
 8001dc2:	1b94      	subs	r4, r2, r6
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x1dc>
 8001dca:	e120      	b.n	800200e <__aeabi_dsub+0x41e>
 8001dcc:	464c      	mov	r4, r9
 8001dce:	431c      	orrs	r4, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1e4>
 8001dd2:	e1c7      	b.n	8002164 <__aeabi_dsub+0x574>
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	1e4c      	subs	r4, r1, #1
 8001dd8:	2901      	cmp	r1, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1ee>
 8001ddc:	e223      	b.n	8002226 <__aeabi_dsub+0x636>
 8001dde:	4d5e      	ldr	r5, [pc, #376]	; (8001f58 <__aeabi_dsub+0x368>)
 8001de0:	45ac      	cmp	ip, r5
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x1f6>
 8001de4:	e1d8      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8001de6:	46a4      	mov	ip, r4
 8001de8:	e11a      	b.n	8002020 <__aeabi_dsub+0x430>
 8001dea:	003a      	movs	r2, r7
 8001dec:	4302      	orrs	r2, r0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x202>
 8001df0:	e0e4      	b.n	8001fbc <__aeabi_dsub+0x3cc>
 8001df2:	0022      	movs	r2, r4
 8001df4:	3a01      	subs	r2, #1
 8001df6:	2c01      	cmp	r4, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x20c>
 8001dfa:	e1c3      	b.n	8002184 <__aeabi_dsub+0x594>
 8001dfc:	4956      	ldr	r1, [pc, #344]	; (8001f58 <__aeabi_dsub+0x368>)
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x214>
 8001e02:	e0b1      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001e04:	4694      	mov	ip, r2
 8001e06:	e72b      	b.n	8001c60 <__aeabi_dsub+0x70>
 8001e08:	2401      	movs	r4, #1
 8001e0a:	4061      	eors	r1, r4
 8001e0c:	468b      	mov	fp, r1
 8001e0e:	428d      	cmp	r5, r1
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001e12:	e716      	b.n	8001c42 <__aeabi_dsub+0x52>
 8001e14:	4952      	ldr	r1, [pc, #328]	; (8001f60 <__aeabi_dsub+0x370>)
 8001e16:	468c      	mov	ip, r1
 8001e18:	44b4      	add	ip, r6
 8001e1a:	4664      	mov	r4, ip
 8001e1c:	2c00      	cmp	r4, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x232>
 8001e20:	e0d3      	b.n	8001fca <__aeabi_dsub+0x3da>
 8001e22:	1b91      	subs	r1, r2, r6
 8001e24:	468c      	mov	ip, r1
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x23c>
 8001e2a:	e15e      	b.n	80020ea <__aeabi_dsub+0x4fa>
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <__aeabi_dsub+0x368>)
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x244>
 8001e32:	e1be      	b.n	80021b2 <__aeabi_dsub+0x5c2>
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	464c      	mov	r4, r9
 8001e38:	0409      	lsls	r1, r1, #16
 8001e3a:	430c      	orrs	r4, r1
 8001e3c:	46a1      	mov	r9, r4
 8001e3e:	4661      	mov	r1, ip
 8001e40:	2938      	cmp	r1, #56	; 0x38
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x256>
 8001e44:	e1ba      	b.n	80021bc <__aeabi_dsub+0x5cc>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x25c>
 8001e4a:	e227      	b.n	800229c <__aeabi_dsub+0x6ac>
 8001e4c:	2420      	movs	r4, #32
 8001e4e:	1a64      	subs	r4, r4, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	40a1      	lsls	r1, r4
 8001e54:	001e      	movs	r6, r3
 8001e56:	4688      	mov	r8, r1
 8001e58:	4661      	mov	r1, ip
 8001e5a:	40a3      	lsls	r3, r4
 8001e5c:	40ce      	lsrs	r6, r1
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1e5c      	subs	r4, r3, #1
 8001e62:	41a3      	sbcs	r3, r4
 8001e64:	4331      	orrs	r1, r6
 8001e66:	4319      	orrs	r1, r3
 8001e68:	000c      	movs	r4, r1
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	40d9      	lsrs	r1, r3
 8001e70:	187f      	adds	r7, r7, r1
 8001e72:	1824      	adds	r4, r4, r0
 8001e74:	4284      	cmp	r4, r0
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	425b      	negs	r3, r3
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	0016      	movs	r6, r2
 8001e7e:	44ba      	add	sl, r7
 8001e80:	e05d      	b.n	8001f3e <__aeabi_dsub+0x34e>
 8001e82:	4c38      	ldr	r4, [pc, #224]	; (8001f64 <__aeabi_dsub+0x374>)
 8001e84:	1c72      	adds	r2, r6, #1
 8001e86:	4222      	tst	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x29c>
 8001e8a:	e0df      	b.n	800204c <__aeabi_dsub+0x45c>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	d000      	beq.n	8001e96 <__aeabi_dsub+0x2a6>
 8001e94:	e15c      	b.n	8002150 <__aeabi_dsub+0x560>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x2ac>
 8001e9a:	e1cf      	b.n	800223c <__aeabi_dsub+0x64c>
 8001e9c:	003a      	movs	r2, r7
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x2b4>
 8001ea2:	e17f      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001ea4:	1a1c      	subs	r4, r3, r0
 8001ea6:	464a      	mov	r2, r9
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	4189      	sbcs	r1, r1
 8001eac:	1bd2      	subs	r2, r2, r7
 8001eae:	4249      	negs	r1, r1
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	4692      	mov	sl, r2
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x2ca>
 8001eb8:	e20a      	b.n	80022d0 <__aeabi_dsub+0x6e0>
 8001eba:	1ac4      	subs	r4, r0, r3
 8001ebc:	42a0      	cmp	r0, r4
 8001ebe:	4180      	sbcs	r0, r0
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1aff      	subs	r7, r7, r3
 8001ec6:	1a3b      	subs	r3, r7, r0
 8001ec8:	469a      	mov	sl, r3
 8001eca:	465d      	mov	r5, fp
 8001ecc:	e71a      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	d073      	beq.n	8001fbc <__aeabi_dsub+0x3cc>
 8001ed4:	0022      	movs	r2, r4
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	2c01      	cmp	r4, #1
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x2ee>
 8001edc:	e0cb      	b.n	8002076 <__aeabi_dsub+0x486>
 8001ede:	4554      	cmp	r4, sl
 8001ee0:	d042      	beq.n	8001f68 <__aeabi_dsub+0x378>
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	e748      	b.n	8001d78 <__aeabi_dsub+0x188>
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	3b1f      	subs	r3, #31
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	2920      	cmp	r1, #32
 8001eee:	d003      	beq.n	8001ef8 <__aeabi_dsub+0x308>
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4314      	orrs	r4, r2
 8001ef8:	1e63      	subs	r3, r4, #1
 8001efa:	419c      	sbcs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	2600      	movs	r6, #0
 8001f00:	469a      	mov	sl, r3
 8001f02:	4304      	orrs	r4, r0
 8001f04:	0763      	lsls	r3, r4, #29
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x31a>
 8001f08:	e6fe      	b.n	8001d08 <__aeabi_dsub+0x118>
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	08e3      	lsrs	r3, r4, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4652      	mov	r2, sl
 8001f14:	46b4      	mov	ip, r6
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f1a:	458c      	cmp	ip, r1
 8001f1c:	d02a      	beq.n	8001f74 <__aeabi_dsub+0x384>
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	0b14      	lsrs	r4, r2, #12
 8001f22:	4662      	mov	r2, ip
 8001f24:	0552      	lsls	r2, r2, #21
 8001f26:	0d52      	lsrs	r2, r2, #21
 8001f28:	e70c      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f2a:	003c      	movs	r4, r7
 8001f2c:	4304      	orrs	r4, r0
 8001f2e:	1e62      	subs	r2, r4, #1
 8001f30:	4194      	sbcs	r4, r2
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	429c      	cmp	r4, r3
 8001f36:	4192      	sbcs	r2, r2
 8001f38:	4252      	negs	r2, r2
 8001f3a:	444a      	add	r2, r9
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	4653      	mov	r3, sl
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	d5df      	bpl.n	8001f04 <__aeabi_dsub+0x314>
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f46:	3601      	adds	r6, #1
 8001f48:	429e      	cmp	r6, r3
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dsub+0x35e>
 8001f4c:	e0a0      	b.n	8002090 <__aeabi_dsub+0x4a0>
 8001f4e:	0032      	movs	r2, r6
 8001f50:	2400      	movs	r4, #0
 8001f52:	2300      	movs	r3, #0
 8001f54:	e6f6      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000007fe 	.word	0x000007fe
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	0752      	lsls	r2, r2, #29
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	464a      	mov	r2, r9
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	0019      	movs	r1, r3
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x38c>
 8001f7a:	e1b5      	b.n	80022e8 <__aeabi_dsub+0x6f8>
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	4314      	orrs	r4, r2
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4ad5      	ldr	r2, [pc, #852]	; (80022dc <__aeabi_dsub+0x6ec>)
 8001f86:	0b24      	lsrs	r4, r4, #12
 8001f88:	e6dc      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f000 fae2 	bl	8002554 <__clzsi2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	3318      	adds	r3, #24
 8001f94:	2b1f      	cmp	r3, #31
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_dsub+0x3aa>
 8001f98:	e695      	b.n	8001cc6 <__aeabi_dsub+0xd6>
 8001f9a:	0022      	movs	r2, r4
 8001f9c:	3808      	subs	r0, #8
 8001f9e:	4082      	lsls	r2, r0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	429e      	cmp	r6, r3
 8001fa4:	dc00      	bgt.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001fa6:	e69a      	b.n	8001cde <__aeabi_dsub+0xee>
 8001fa8:	1af6      	subs	r6, r6, r3
 8001faa:	4bcd      	ldr	r3, [pc, #820]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e6a8      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001fb2:	003c      	movs	r4, r7
 8001fb4:	4304      	orrs	r4, r0
 8001fb6:	1e62      	subs	r2, r4, #1
 8001fb8:	4194      	sbcs	r4, r2
 8001fba:	e66c      	b.n	8001c96 <__aeabi_dsub+0xa6>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	0752      	lsls	r2, r2, #29
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	e7a6      	b.n	8001f18 <__aeabi_dsub+0x328>
 8001fca:	4cc6      	ldr	r4, [pc, #792]	; (80022e4 <__aeabi_dsub+0x6f4>)
 8001fcc:	1c72      	adds	r2, r6, #1
 8001fce:	4222      	tst	r2, r4
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x3e4>
 8001fd2:	e0ac      	b.n	800212e <__aeabi_dsub+0x53e>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	2e00      	cmp	r6, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x3ee>
 8001fdc:	e105      	b.n	80021ea <__aeabi_dsub+0x5fa>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x3f4>
 8001fe2:	e156      	b.n	8002292 <__aeabi_dsub+0x6a2>
 8001fe4:	003a      	movs	r2, r7
 8001fe6:	4302      	orrs	r2, r0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x3fc>
 8001fea:	e0db      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001fec:	181c      	adds	r4, r3, r0
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	444f      	add	r7, r9
 8001ff4:	46ba      	mov	sl, r7
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	449a      	add	sl, r3
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	d400      	bmi.n	8002002 <__aeabi_dsub+0x412>
 8002000:	e780      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002002:	4652      	mov	r2, sl
 8002004:	4bb6      	ldr	r3, [pc, #728]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002006:	2601      	movs	r6, #1
 8002008:	401a      	ands	r2, r3
 800200a:	4692      	mov	sl, r2
 800200c:	e77a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800200e:	4cb3      	ldr	r4, [pc, #716]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002010:	42a2      	cmp	r2, r4
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x426>
 8002014:	e0c0      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8002016:	2480      	movs	r4, #128	; 0x80
 8002018:	464d      	mov	r5, r9
 800201a:	0424      	lsls	r4, r4, #16
 800201c:	4325      	orrs	r5, r4
 800201e:	46a9      	mov	r9, r5
 8002020:	4664      	mov	r4, ip
 8002022:	2c38      	cmp	r4, #56	; 0x38
 8002024:	dc53      	bgt.n	80020ce <__aeabi_dsub+0x4de>
 8002026:	4661      	mov	r1, ip
 8002028:	2c1f      	cmp	r4, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x43e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_dsub+0x5da>
 800202e:	2520      	movs	r5, #32
 8002030:	001e      	movs	r6, r3
 8002032:	1b2d      	subs	r5, r5, r4
 8002034:	464c      	mov	r4, r9
 8002036:	40ab      	lsls	r3, r5
 8002038:	40ac      	lsls	r4, r5
 800203a:	40ce      	lsrs	r6, r1
 800203c:	1e5d      	subs	r5, r3, #1
 800203e:	41ab      	sbcs	r3, r5
 8002040:	4334      	orrs	r4, r6
 8002042:	4323      	orrs	r3, r4
 8002044:	464c      	mov	r4, r9
 8002046:	40cc      	lsrs	r4, r1
 8002048:	1b3f      	subs	r7, r7, r4
 800204a:	e045      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 800204c:	464a      	mov	r2, r9
 800204e:	1a1c      	subs	r4, r3, r0
 8002050:	1bd1      	subs	r1, r2, r7
 8002052:	42a3      	cmp	r3, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	4252      	negs	r2, r2
 8002058:	4692      	mov	sl, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4651      	mov	r1, sl
 800205e:	1a52      	subs	r2, r2, r1
 8002060:	4692      	mov	sl, r2
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	d500      	bpl.n	8002068 <__aeabi_dsub+0x478>
 8002066:	e083      	b.n	8002170 <__aeabi_dsub+0x580>
 8002068:	4653      	mov	r3, sl
 800206a:	4323      	orrs	r3, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x480>
 800206e:	e621      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	e753      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002076:	181c      	adds	r4, r3, r0
 8002078:	429c      	cmp	r4, r3
 800207a:	419b      	sbcs	r3, r3
 800207c:	444f      	add	r7, r9
 800207e:	46ba      	mov	sl, r7
 8002080:	425b      	negs	r3, r3
 8002082:	449a      	add	sl, r3
 8002084:	4653      	mov	r3, sl
 8002086:	2601      	movs	r6, #1
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x49e>
 800208c:	e73a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800208e:	2602      	movs	r6, #2
 8002090:	4652      	mov	r2, sl
 8002092:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002094:	2101      	movs	r1, #1
 8002096:	401a      	ands	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	4021      	ands	r1, r4
 800209c:	0862      	lsrs	r2, r4, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	07dc      	lsls	r4, r3, #31
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	469a      	mov	sl, r3
 80020a6:	4314      	orrs	r4, r2
 80020a8:	e62c      	b.n	8001d04 <__aeabi_dsub+0x114>
 80020aa:	0039      	movs	r1, r7
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d1      	lsrs	r1, r2
 80020b0:	4662      	mov	r2, ip
 80020b2:	2a20      	cmp	r2, #32
 80020b4:	d006      	beq.n	80020c4 <__aeabi_dsub+0x4d4>
 80020b6:	4664      	mov	r4, ip
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	1b12      	subs	r2, r2, r4
 80020bc:	003c      	movs	r4, r7
 80020be:	4094      	lsls	r4, r2
 80020c0:	4304      	orrs	r4, r0
 80020c2:	9401      	str	r4, [sp, #4]
 80020c4:	9c01      	ldr	r4, [sp, #4]
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	e5e3      	b.n	8001c96 <__aeabi_dsub+0xa6>
 80020ce:	4649      	mov	r1, r9
 80020d0:	4319      	orrs	r1, r3
 80020d2:	000b      	movs	r3, r1
 80020d4:	1e5c      	subs	r4, r3, #1
 80020d6:	41a3      	sbcs	r3, r4
 80020d8:	1ac4      	subs	r4, r0, r3
 80020da:	42a0      	cmp	r0, r4
 80020dc:	419b      	sbcs	r3, r3
 80020de:	425b      	negs	r3, r3
 80020e0:	1afb      	subs	r3, r7, r3
 80020e2:	469a      	mov	sl, r3
 80020e4:	465d      	mov	r5, fp
 80020e6:	0016      	movs	r6, r2
 80020e8:	e5dc      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 80020ea:	4649      	mov	r1, r9
 80020ec:	4319      	orrs	r1, r3
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x502>
 80020f0:	e0ae      	b.n	8002250 <__aeabi_dsub+0x660>
 80020f2:	4661      	mov	r1, ip
 80020f4:	4664      	mov	r4, ip
 80020f6:	3901      	subs	r1, #1
 80020f8:	2c01      	cmp	r4, #1
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x50e>
 80020fc:	e0e0      	b.n	80022c0 <__aeabi_dsub+0x6d0>
 80020fe:	4c77      	ldr	r4, [pc, #476]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002100:	45a4      	cmp	ip, r4
 8002102:	d056      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 8002104:	468c      	mov	ip, r1
 8002106:	e69a      	b.n	8001e3e <__aeabi_dsub+0x24e>
 8002108:	4661      	mov	r1, ip
 800210a:	2220      	movs	r2, #32
 800210c:	003c      	movs	r4, r7
 800210e:	1a52      	subs	r2, r2, r1
 8002110:	4094      	lsls	r4, r2
 8002112:	0001      	movs	r1, r0
 8002114:	4090      	lsls	r0, r2
 8002116:	46a0      	mov	r8, r4
 8002118:	4664      	mov	r4, ip
 800211a:	1e42      	subs	r2, r0, #1
 800211c:	4190      	sbcs	r0, r2
 800211e:	4662      	mov	r2, ip
 8002120:	40e1      	lsrs	r1, r4
 8002122:	4644      	mov	r4, r8
 8002124:	40d7      	lsrs	r7, r2
 8002126:	430c      	orrs	r4, r1
 8002128:	4304      	orrs	r4, r0
 800212a:	44b9      	add	r9, r7
 800212c:	e701      	b.n	8001f32 <__aeabi_dsub+0x342>
 800212e:	496b      	ldr	r1, [pc, #428]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002130:	428a      	cmp	r2, r1
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x546>
 8002134:	e70c      	b.n	8001f50 <__aeabi_dsub+0x360>
 8002136:	1818      	adds	r0, r3, r0
 8002138:	4298      	cmp	r0, r3
 800213a:	419b      	sbcs	r3, r3
 800213c:	444f      	add	r7, r9
 800213e:	425b      	negs	r3, r3
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	07dc      	lsls	r4, r3, #31
 8002144:	0840      	lsrs	r0, r0, #1
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	469a      	mov	sl, r3
 800214a:	0016      	movs	r6, r2
 800214c:	4304      	orrs	r4, r0
 800214e:	e6d9      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d000      	beq.n	8002156 <__aeabi_dsub+0x566>
 8002154:	e081      	b.n	800225a <__aeabi_dsub+0x66a>
 8002156:	003b      	movs	r3, r7
 8002158:	4303      	orrs	r3, r0
 800215a:	d11d      	bne.n	8002198 <__aeabi_dsub+0x5a8>
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2500      	movs	r5, #0
 8002160:	0312      	lsls	r2, r2, #12
 8002162:	e70b      	b.n	8001f7c <__aeabi_dsub+0x38c>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	077b      	lsls	r3, r7, #29
 8002168:	465d      	mov	r5, fp
 800216a:	4303      	orrs	r3, r0
 800216c:	08fa      	lsrs	r2, r7, #3
 800216e:	e6d3      	b.n	8001f18 <__aeabi_dsub+0x328>
 8002170:	1ac4      	subs	r4, r0, r3
 8002172:	42a0      	cmp	r0, r4
 8002174:	4180      	sbcs	r0, r0
 8002176:	464b      	mov	r3, r9
 8002178:	4240      	negs	r0, r0
 800217a:	1aff      	subs	r7, r7, r3
 800217c:	1a3b      	subs	r3, r7, r0
 800217e:	469a      	mov	sl, r3
 8002180:	465d      	mov	r5, fp
 8002182:	e597      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002184:	1a1c      	subs	r4, r3, r0
 8002186:	464a      	mov	r2, r9
 8002188:	42a3      	cmp	r3, r4
 800218a:	419b      	sbcs	r3, r3
 800218c:	1bd7      	subs	r7, r2, r7
 800218e:	425b      	negs	r3, r3
 8002190:	1afb      	subs	r3, r7, r3
 8002192:	469a      	mov	sl, r3
 8002194:	2601      	movs	r6, #1
 8002196:	e585      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e6e7      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021a4:	464a      	mov	r2, r9
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	0752      	lsls	r2, r2, #29
 80021aa:	4313      	orrs	r3, r2
 80021ac:	464a      	mov	r2, r9
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	e6b5      	b.n	8001f1e <__aeabi_dsub+0x32e>
 80021b2:	08c0      	lsrs	r0, r0, #3
 80021b4:	077b      	lsls	r3, r7, #29
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6db      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021bc:	4649      	mov	r1, r9
 80021be:	4319      	orrs	r1, r3
 80021c0:	000b      	movs	r3, r1
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	418b      	sbcs	r3, r1
 80021c6:	001c      	movs	r4, r3
 80021c8:	e653      	b.n	8001e72 <__aeabi_dsub+0x282>
 80021ca:	464d      	mov	r5, r9
 80021cc:	3c20      	subs	r4, #32
 80021ce:	40e5      	lsrs	r5, r4
 80021d0:	2920      	cmp	r1, #32
 80021d2:	d005      	beq.n	80021e0 <__aeabi_dsub+0x5f0>
 80021d4:	2440      	movs	r4, #64	; 0x40
 80021d6:	1a64      	subs	r4, r4, r1
 80021d8:	4649      	mov	r1, r9
 80021da:	40a1      	lsls	r1, r4
 80021dc:	430b      	orrs	r3, r1
 80021de:	4698      	mov	r8, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	1e5c      	subs	r4, r3, #1
 80021e4:	41a3      	sbcs	r3, r4
 80021e6:	432b      	orrs	r3, r5
 80021e8:	e776      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d0e1      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 80021ee:	003a      	movs	r2, r7
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x608>
 80021f6:	e6b8      	b.n	8001f6a <__aeabi_dsub+0x37a>
 80021f8:	464a      	mov	r2, r9
 80021fa:	0752      	lsls	r2, r2, #29
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	4313      	orrs	r3, r2
 8002200:	464a      	mov	r2, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	08d2      	lsrs	r2, r2, #3
 8002206:	4222      	tst	r2, r4
 8002208:	d007      	beq.n	800221a <__aeabi_dsub+0x62a>
 800220a:	08fe      	lsrs	r6, r7, #3
 800220c:	4226      	tst	r6, r4
 800220e:	d104      	bne.n	800221a <__aeabi_dsub+0x62a>
 8002210:	465d      	mov	r5, fp
 8002212:	0032      	movs	r2, r6
 8002214:	08c3      	lsrs	r3, r0, #3
 8002216:	077f      	lsls	r7, r7, #29
 8002218:	433b      	orrs	r3, r7
 800221a:	0f59      	lsrs	r1, r3, #29
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	0749      	lsls	r1, r1, #29
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	430b      	orrs	r3, r1
 8002224:	e6a6      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002226:	1ac4      	subs	r4, r0, r3
 8002228:	42a0      	cmp	r0, r4
 800222a:	4180      	sbcs	r0, r0
 800222c:	464b      	mov	r3, r9
 800222e:	4240      	negs	r0, r0
 8002230:	1aff      	subs	r7, r7, r3
 8002232:	1a3b      	subs	r3, r7, r0
 8002234:	469a      	mov	sl, r3
 8002236:	465d      	mov	r5, fp
 8002238:	2601      	movs	r6, #1
 800223a:	e533      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 800223c:	003b      	movs	r3, r7
 800223e:	4303      	orrs	r3, r0
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x654>
 8002242:	e715      	b.n	8002070 <__aeabi_dsub+0x480>
 8002244:	08c0      	lsrs	r0, r0, #3
 8002246:	077b      	lsls	r3, r7, #29
 8002248:	465d      	mov	r5, fp
 800224a:	4303      	orrs	r3, r0
 800224c:	08fa      	lsrs	r2, r7, #3
 800224e:	e666      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	077b      	lsls	r3, r7, #29
 8002254:	4303      	orrs	r3, r0
 8002256:	08fa      	lsrs	r2, r7, #3
 8002258:	e65e      	b.n	8001f18 <__aeabi_dsub+0x328>
 800225a:	003a      	movs	r2, r7
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4302      	orrs	r2, r0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x674>
 8002262:	e682      	b.n	8001f6a <__aeabi_dsub+0x37a>
 8002264:	464a      	mov	r2, r9
 8002266:	0752      	lsls	r2, r2, #29
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	4313      	orrs	r3, r2
 800226c:	464a      	mov	r2, r9
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	4222      	tst	r2, r4
 8002274:	d007      	beq.n	8002286 <__aeabi_dsub+0x696>
 8002276:	08fe      	lsrs	r6, r7, #3
 8002278:	4226      	tst	r6, r4
 800227a:	d104      	bne.n	8002286 <__aeabi_dsub+0x696>
 800227c:	465d      	mov	r5, fp
 800227e:	0032      	movs	r2, r6
 8002280:	08c3      	lsrs	r3, r0, #3
 8002282:	077f      	lsls	r7, r7, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	0f59      	lsrs	r1, r3, #29
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	e670      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002292:	08c0      	lsrs	r0, r0, #3
 8002294:	077b      	lsls	r3, r7, #29
 8002296:	4303      	orrs	r3, r0
 8002298:	08fa      	lsrs	r2, r7, #3
 800229a:	e640      	b.n	8001f1e <__aeabi_dsub+0x32e>
 800229c:	464c      	mov	r4, r9
 800229e:	3920      	subs	r1, #32
 80022a0:	40cc      	lsrs	r4, r1
 80022a2:	4661      	mov	r1, ip
 80022a4:	2920      	cmp	r1, #32
 80022a6:	d006      	beq.n	80022b6 <__aeabi_dsub+0x6c6>
 80022a8:	4666      	mov	r6, ip
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	1b89      	subs	r1, r1, r6
 80022ae:	464e      	mov	r6, r9
 80022b0:	408e      	lsls	r6, r1
 80022b2:	4333      	orrs	r3, r6
 80022b4:	4698      	mov	r8, r3
 80022b6:	4643      	mov	r3, r8
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	418b      	sbcs	r3, r1
 80022bc:	431c      	orrs	r4, r3
 80022be:	e5d8      	b.n	8001e72 <__aeabi_dsub+0x282>
 80022c0:	181c      	adds	r4, r3, r0
 80022c2:	4284      	cmp	r4, r0
 80022c4:	4180      	sbcs	r0, r0
 80022c6:	444f      	add	r7, r9
 80022c8:	46ba      	mov	sl, r7
 80022ca:	4240      	negs	r0, r0
 80022cc:	4482      	add	sl, r0
 80022ce:	e6d9      	b.n	8002084 <__aeabi_dsub+0x494>
 80022d0:	4653      	mov	r3, sl
 80022d2:	4323      	orrs	r3, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x6e8>
 80022d6:	e6cb      	b.n	8002070 <__aeabi_dsub+0x480>
 80022d8:	e614      	b.n	8001f04 <__aeabi_dsub+0x314>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000007ff 	.word	0x000007ff
 80022e0:	ff7fffff 	.word	0xff7fffff
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	2300      	movs	r3, #0
 80022ea:	4a01      	ldr	r2, [pc, #4]	; (80022f0 <__aeabi_dsub+0x700>)
 80022ec:	001c      	movs	r4, r3
 80022ee:	e529      	b.n	8001d44 <__aeabi_dsub+0x154>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dcmpun>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0005      	movs	r5, r0
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <__aeabi_dcmpun+0x38>)
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	0016      	movs	r6, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	0d49      	lsrs	r1, r1, #21
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d5b      	lsrs	r3, r3, #21
 800230c:	4281      	cmp	r1, r0
 800230e:	d008      	beq.n	8002322 <__aeabi_dcmpun+0x2e>
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <__aeabi_dcmpun+0x38>)
 8002312:	2000      	movs	r0, #0
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002318:	0020      	movs	r0, r4
 800231a:	4330      	orrs	r0, r6
 800231c:	1e43      	subs	r3, r0, #1
 800231e:	4198      	sbcs	r0, r3
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	2001      	movs	r0, #1
 8002324:	432a      	orrs	r2, r5
 8002326:	d1fb      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002328:	e7f2      	b.n	8002310 <__aeabi_dcmpun+0x1c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff

08002330 <__aeabi_d2iz>:
 8002330:	000a      	movs	r2, r1
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	4c13      	ldr	r4, [pc, #76]	; (8002384 <__aeabi_d2iz+0x54>)
 8002336:	0053      	lsls	r3, r2, #1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	0005      	movs	r5, r0
 800233c:	0b09      	lsrs	r1, r1, #12
 800233e:	2000      	movs	r0, #0
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	0fd2      	lsrs	r2, r2, #31
 8002344:	42a3      	cmp	r3, r4
 8002346:	dd04      	ble.n	8002352 <__aeabi_d2iz+0x22>
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <__aeabi_d2iz+0x58>)
 800234a:	4283      	cmp	r3, r0
 800234c:	dd02      	ble.n	8002354 <__aeabi_d2iz+0x24>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_d2iz+0x5c>)
 8002350:	18d0      	adds	r0, r2, r3
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	0340      	lsls	r0, r0, #13
 8002358:	4301      	orrs	r1, r0
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <__aeabi_d2iz+0x60>)
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	281f      	cmp	r0, #31
 8002360:	dd08      	ble.n	8002374 <__aeabi_d2iz+0x44>
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <__aeabi_d2iz+0x64>)
 8002364:	1ac3      	subs	r3, r0, r3
 8002366:	40d9      	lsrs	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	4258      	negs	r0, r3
 800236c:	2a00      	cmp	r2, #0
 800236e:	d1f0      	bne.n	8002352 <__aeabi_d2iz+0x22>
 8002370:	0018      	movs	r0, r3
 8002372:	e7ee      	b.n	8002352 <__aeabi_d2iz+0x22>
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <__aeabi_d2iz+0x68>)
 8002376:	40c5      	lsrs	r5, r0
 8002378:	46a4      	mov	ip, r4
 800237a:	4463      	add	r3, ip
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	432b      	orrs	r3, r5
 8002382:	e7f2      	b.n	800236a <__aeabi_d2iz+0x3a>
 8002384:	000003fe 	.word	0x000003fe
 8002388:	0000041d 	.word	0x0000041d
 800238c:	7fffffff 	.word	0x7fffffff
 8002390:	00000433 	.word	0x00000433
 8002394:	00000413 	.word	0x00000413
 8002398:	fffffbed 	.word	0xfffffbed

0800239c <__aeabi_i2d>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2800      	cmp	r0, #0
 80023a0:	d016      	beq.n	80023d0 <__aeabi_i2d+0x34>
 80023a2:	17c3      	asrs	r3, r0, #31
 80023a4:	18c5      	adds	r5, r0, r3
 80023a6:	405d      	eors	r5, r3
 80023a8:	0fc4      	lsrs	r4, r0, #31
 80023aa:	0028      	movs	r0, r5
 80023ac:	f000 f8d2 	bl	8002554 <__clzsi2>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <__aeabi_i2d+0x5c>)
 80023b2:	1a1b      	subs	r3, r3, r0
 80023b4:	280a      	cmp	r0, #10
 80023b6:	dc16      	bgt.n	80023e6 <__aeabi_i2d+0x4a>
 80023b8:	0002      	movs	r2, r0
 80023ba:	002e      	movs	r6, r5
 80023bc:	3215      	adds	r2, #21
 80023be:	4096      	lsls	r6, r2
 80023c0:	220b      	movs	r2, #11
 80023c2:	1a12      	subs	r2, r2, r0
 80023c4:	40d5      	lsrs	r5, r2
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	e003      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023d0:	2400      	movs	r4, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	2500      	movs	r5, #0
 80023d6:	2600      	movs	r6, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	432b      	orrs	r3, r5
 80023dc:	07e4      	lsls	r4, r4, #31
 80023de:	4323      	orrs	r3, r4
 80023e0:	0030      	movs	r0, r6
 80023e2:	0019      	movs	r1, r3
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	380b      	subs	r0, #11
 80023e8:	4085      	lsls	r5, r0
 80023ea:	055b      	lsls	r3, r3, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	2600      	movs	r6, #0
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	e7f0      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0000041e 	.word	0x0000041e

080023fc <__aeabi_ui2d>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e04      	subs	r4, r0, #0
 8002400:	d010      	beq.n	8002424 <__aeabi_ui2d+0x28>
 8002402:	f000 f8a7 	bl	8002554 <__clzsi2>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <__aeabi_ui2d+0x48>)
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	280a      	cmp	r0, #10
 800240c:	dc11      	bgt.n	8002432 <__aeabi_ui2d+0x36>
 800240e:	220b      	movs	r2, #11
 8002410:	0021      	movs	r1, r4
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d1      	lsrs	r1, r2
 8002416:	3015      	adds	r0, #21
 8002418:	030a      	lsls	r2, r1, #12
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4084      	lsls	r4, r0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e001      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	4313      	orrs	r3, r2
 800242c:	0020      	movs	r0, r4
 800242e:	0019      	movs	r1, r3
 8002430:	bd10      	pop	{r4, pc}
 8002432:	0022      	movs	r2, r4
 8002434:	380b      	subs	r0, #11
 8002436:	4082      	lsls	r2, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	2400      	movs	r4, #0
 800243e:	0b12      	lsrs	r2, r2, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	e7f1      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_d2f>:
 8002448:	0002      	movs	r2, r0
 800244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244c:	004b      	lsls	r3, r1, #1
 800244e:	030d      	lsls	r5, r1, #12
 8002450:	0f40      	lsrs	r0, r0, #29
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	0fcc      	lsrs	r4, r1, #31
 8002456:	0a6d      	lsrs	r5, r5, #9
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <__aeabi_d2f+0xfc>)
 800245a:	4305      	orrs	r5, r0
 800245c:	1c58      	adds	r0, r3, #1
 800245e:	00d7      	lsls	r7, r2, #3
 8002460:	4208      	tst	r0, r1
 8002462:	d00a      	beq.n	800247a <__aeabi_d2f+0x32>
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <__aeabi_d2f+0x100>)
 8002466:	1859      	adds	r1, r3, r1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	dd16      	ble.n	800249a <__aeabi_d2f+0x52>
 800246c:	20ff      	movs	r0, #255	; 0xff
 800246e:	2200      	movs	r2, #0
 8002470:	05c0      	lsls	r0, r0, #23
 8002472:	4310      	orrs	r0, r2
 8002474:	07e4      	lsls	r4, r4, #31
 8002476:	4320      	orrs	r0, r4
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <__aeabi_d2f+0x44>
 800247e:	433d      	orrs	r5, r7
 8002480:	d026      	beq.n	80024d0 <__aeabi_d2f+0x88>
 8002482:	2205      	movs	r2, #5
 8002484:	0192      	lsls	r2, r2, #6
 8002486:	0a52      	lsrs	r2, r2, #9
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	e7f1      	b.n	8002470 <__aeabi_d2f+0x28>
 800248c:	432f      	orrs	r7, r5
 800248e:	d0ed      	beq.n	800246c <__aeabi_d2f+0x24>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	03d2      	lsls	r2, r2, #15
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	432a      	orrs	r2, r5
 8002498:	e7ea      	b.n	8002470 <__aeabi_d2f+0x28>
 800249a:	2900      	cmp	r1, #0
 800249c:	dd1b      	ble.n	80024d6 <__aeabi_d2f+0x8e>
 800249e:	0192      	lsls	r2, r2, #6
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	4182      	sbcs	r2, r0
 80024a4:	00ed      	lsls	r5, r5, #3
 80024a6:	0f7f      	lsrs	r7, r7, #29
 80024a8:	432a      	orrs	r2, r5
 80024aa:	433a      	orrs	r2, r7
 80024ac:	0753      	lsls	r3, r2, #29
 80024ae:	d047      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024b0:	230f      	movs	r3, #15
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d000      	beq.n	80024ba <__aeabi_d2f+0x72>
 80024b8:	3204      	adds	r2, #4
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	04db      	lsls	r3, r3, #19
 80024be:	4013      	ands	r3, r2
 80024c0:	d03e      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024c2:	1c48      	adds	r0, r1, #1
 80024c4:	29fe      	cmp	r1, #254	; 0xfe
 80024c6:	d0d1      	beq.n	800246c <__aeabi_d2f+0x24>
 80024c8:	0192      	lsls	r2, r2, #6
 80024ca:	0a52      	lsrs	r2, r2, #9
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	e7cf      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d0:	2000      	movs	r0, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	e7cc      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d6:	000a      	movs	r2, r1
 80024d8:	3217      	adds	r2, #23
 80024da:	db2f      	blt.n	800253c <__aeabi_d2f+0xf4>
 80024dc:	2680      	movs	r6, #128	; 0x80
 80024de:	0436      	lsls	r6, r6, #16
 80024e0:	432e      	orrs	r6, r5
 80024e2:	251e      	movs	r5, #30
 80024e4:	1a6d      	subs	r5, r5, r1
 80024e6:	2d1f      	cmp	r5, #31
 80024e8:	dd11      	ble.n	800250e <__aeabi_d2f+0xc6>
 80024ea:	2202      	movs	r2, #2
 80024ec:	4252      	negs	r2, r2
 80024ee:	1a52      	subs	r2, r2, r1
 80024f0:	0031      	movs	r1, r6
 80024f2:	40d1      	lsrs	r1, r2
 80024f4:	2d20      	cmp	r5, #32
 80024f6:	d004      	beq.n	8002502 <__aeabi_d2f+0xba>
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <__aeabi_d2f+0x104>)
 80024fa:	4694      	mov	ip, r2
 80024fc:	4463      	add	r3, ip
 80024fe:	409e      	lsls	r6, r3
 8002500:	4337      	orrs	r7, r6
 8002502:	003a      	movs	r2, r7
 8002504:	1e53      	subs	r3, r2, #1
 8002506:	419a      	sbcs	r2, r3
 8002508:	430a      	orrs	r2, r1
 800250a:	2100      	movs	r1, #0
 800250c:	e7ce      	b.n	80024ac <__aeabi_d2f+0x64>
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <__aeabi_d2f+0x108>)
 8002510:	0038      	movs	r0, r7
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	4098      	lsls	r0, r3
 8002518:	003a      	movs	r2, r7
 800251a:	1e41      	subs	r1, r0, #1
 800251c:	4188      	sbcs	r0, r1
 800251e:	409e      	lsls	r6, r3
 8002520:	40ea      	lsrs	r2, r5
 8002522:	4330      	orrs	r0, r6
 8002524:	4302      	orrs	r2, r0
 8002526:	2100      	movs	r1, #0
 8002528:	0753      	lsls	r3, r2, #29
 800252a:	d1c1      	bne.n	80024b0 <__aeabi_d2f+0x68>
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0013      	movs	r3, r2
 8002530:	04c9      	lsls	r1, r1, #19
 8002532:	2001      	movs	r0, #1
 8002534:	400b      	ands	r3, r1
 8002536:	420a      	tst	r2, r1
 8002538:	d1c6      	bne.n	80024c8 <__aeabi_d2f+0x80>
 800253a:	e7a3      	b.n	8002484 <__aeabi_d2f+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	e7a0      	b.n	8002482 <__aeabi_d2f+0x3a>
 8002540:	000b      	movs	r3, r1
 8002542:	e79f      	b.n	8002484 <__aeabi_d2f+0x3c>
 8002544:	000007fe 	.word	0x000007fe
 8002548:	fffffc80 	.word	0xfffffc80
 800254c:	fffffca2 	.word	0xfffffca2
 8002550:	fffffc82 	.word	0xfffffc82

08002554 <__clzsi2>:
 8002554:	211c      	movs	r1, #28
 8002556:	2301      	movs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	4298      	cmp	r0, r3
 800255c:	d301      	bcc.n	8002562 <__clzsi2+0xe>
 800255e:	0c00      	lsrs	r0, r0, #16
 8002560:	3910      	subs	r1, #16
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	4298      	cmp	r0, r3
 8002566:	d301      	bcc.n	800256c <__clzsi2+0x18>
 8002568:	0a00      	lsrs	r0, r0, #8
 800256a:	3908      	subs	r1, #8
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	4298      	cmp	r0, r3
 8002570:	d301      	bcc.n	8002576 <__clzsi2+0x22>
 8002572:	0900      	lsrs	r0, r0, #4
 8002574:	3904      	subs	r1, #4
 8002576:	a202      	add	r2, pc, #8	; (adr r2, 8002580 <__clzsi2+0x2c>)
 8002578:	5c10      	ldrb	r0, [r2, r0]
 800257a:	1840      	adds	r0, r0, r1
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	02020304 	.word	0x02020304
 8002584:	01010101 	.word	0x01010101
	...

08002590 <__clzdi2>:
 8002590:	b510      	push	{r4, lr}
 8002592:	2900      	cmp	r1, #0
 8002594:	d103      	bne.n	800259e <__clzdi2+0xe>
 8002596:	f7ff ffdd 	bl	8002554 <__clzsi2>
 800259a:	3020      	adds	r0, #32
 800259c:	e002      	b.n	80025a4 <__clzdi2+0x14>
 800259e:	0008      	movs	r0, r1
 80025a0:	f7ff ffd8 	bl	8002554 <__clzsi2>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b5b0      	push	{r4, r5, r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025ac:	f001 fa7e 	bl	8003aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b0:	f000 f924 	bl	80027fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025b4:	f000 fb5e 	bl	8002c74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80025b8:	f000 fada 	bl	8002b70 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80025bc:	f000 fa8a 	bl	8002ad4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80025c0:	f000 fb24 	bl	8002c0c <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80025c4:	f000 fa48 	bl	8002a58 <MX_TIM6_Init>
  MX_RTC_Init();
 80025c8:	f000 f964 	bl	8002894 <MX_RTC_Init>
  MX_SPI1_Init();
 80025cc:	f000 fa06 	bl	80029dc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // System hello
  HAL_UART_Transmit ( &huart2 , (uint8_t*) hello , strlen (hello) , UART_TIMEOUT ) ;
 80025d0:	4b74      	ldr	r3, [pc, #464]	; (80027a4 <main+0x1fc>)
 80025d2:	681c      	ldr	r4, [r3, #0]
 80025d4:	4b73      	ldr	r3, [pc, #460]	; (80027a4 <main+0x1fc>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	0018      	movs	r0, r3
 80025da:	f7fd fd93 	bl	8000104 <strlen>
 80025de:	0003      	movs	r3, r0
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	23fa      	movs	r3, #250	; 0xfa
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4870      	ldr	r0, [pc, #448]	; (80027a8 <main+0x200>)
 80025e8:	0021      	movs	r1, r4
 80025ea:	f004 fd95 	bl	8007118 <HAL_UART_Transmit>

  // Is system initialized?
  send_debug_logs ( "Start initialization process" ) ;
 80025ee:	4b6f      	ldr	r3, [pc, #444]	; (80027ac <main+0x204>)
 80025f0:	0018      	movs	r0, r3
 80025f2:	f000 fd67 	bl	80030c4 <send_debug_logs>
  if ( ! is_system_initialized () )
 80025f6:	f000 febf 	bl	8003378 <is_system_initialized>
 80025fa:	0003      	movs	r3, r0
 80025fc:	001a      	movs	r2, r3
 80025fe:	2301      	movs	r3, #1
 8002600:	4053      	eors	r3, r2
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	d017      	beq.n	8002638 <main+0x90>
  {
	  // ASTRO INIT
	  if ( !my_astro_init () )
 8002608:	f007 fc60 	bl	8009ecc <my_astro_init>
 800260c:	0003      	movs	r3, r0
 800260e:	001a      	movs	r2, r3
 8002610:	2301      	movs	r3, #1
 8002612:	4053      	eors	r3, r2
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <main+0x76>
	  {
		  HAL_NVIC_SystemReset () ;
 800261a:	f001 fbf0 	bl	8003dfe <HAL_NVIC_SystemReset>
	  }

	  // ACC INIT
	  my_lis2dw12_ctx.write_reg = my_lis2dw12_platform_write ;
 800261e:	4b64      	ldr	r3, [pc, #400]	; (80027b0 <main+0x208>)
 8002620:	4a64      	ldr	r2, [pc, #400]	; (80027b4 <main+0x20c>)
 8002622:	601a      	str	r2, [r3, #0]
	  my_lis2dw12_ctx.read_reg = my_lis2dw12_platform_read ;
 8002624:	4b62      	ldr	r3, [pc, #392]	; (80027b0 <main+0x208>)
 8002626:	4a64      	ldr	r2, [pc, #400]	; (80027b8 <main+0x210>)
 8002628:	605a      	str	r2, [r3, #4]
	  my_lis2dw12_ctx.handle = HSPI1 ;
 800262a:	4b61      	ldr	r3, [pc, #388]	; (80027b0 <main+0x208>)
 800262c:	4a63      	ldr	r2, [pc, #396]	; (80027bc <main+0x214>)
 800262e:	60da      	str	r2, [r3, #12]
	  my_lis2dw12_init ( &my_lis2dw12_ctx ) ;
 8002630:	4b5f      	ldr	r3, [pc, #380]	; (80027b0 <main+0x208>)
 8002632:	0018      	movs	r0, r3
 8002634:	f007 fd0f 	bl	800a056 <my_lis2dw12_init>

	  // RTC INIT
  }

  // Preparation process
  send_debug_logs ( "Start preparation process" ) ;
 8002638:	4b61      	ldr	r3, [pc, #388]	; (80027c0 <main+0x218>)
 800263a:	0018      	movs	r0, r3
 800263c:	f000 fd42 	bl	80030c4 <send_debug_logs>
  while ( !enqueue_hello_payload () )
 8002640:	e025      	b.n	800268e <main+0xe6>
  {
	  my_lis2dw12_int1_wu_enable ( &my_lis2dw12_ctx ) ;
 8002642:	4b5b      	ldr	r3, [pc, #364]	; (80027b0 <main+0x208>)
 8002644:	0018      	movs	r0, r3
 8002646:	f007 fd5f 	bl	800a108 <my_lis2dw12_int1_wu_enable>
	  send_debug_logs ( "Enter STOPMode during preparation process" ) ;
 800264a:	4b5e      	ldr	r3, [pc, #376]	; (80027c4 <main+0x21c>)
 800264c:	0018      	movs	r0, r3
 800264e:	f000 fd39 	bl	80030c4 <send_debug_logs>
	  HAL_SuspendTick () ; // Jak nie wyłączę to mnie przerwanie SysTick od razu wybudzi!!!
 8002652:	f001 fad5 	bl	8003c00 <HAL_SuspendTick>
	  HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFI ) ;
 8002656:	2380      	movs	r3, #128	; 0x80
 8002658:	01db      	lsls	r3, r3, #7
 800265a:	2101      	movs	r1, #1
 800265c:	0018      	movs	r0, r3
 800265e:	f001 fe81 	bl	8004364 <HAL_PWR_EnterSTOPMode>
	  HAL_ResumeTick () ;
 8002662:	f001 fadb 	bl	8003c1c <HAL_ResumeTick>
	  if ( is_acc_int1_wkup_flag )
 8002666:	4b58      	ldr	r3, [pc, #352]	; (80027c8 <main+0x220>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00f      	beq.n	800268e <main+0xe6>
	  {
		  send_debug_logs ( "lis2dw12_int1 wake up after STOPMode" ) ;
 800266e:	4b57      	ldr	r3, [pc, #348]	; (80027cc <main+0x224>)
 8002670:	0018      	movs	r0, r3
 8002672:	f000 fd27 	bl	80030c4 <send_debug_logs>
		  // Turn off next int1_wkups for the end of procedure
		  my_lis2dw12_int1_wu_disable ( &my_lis2dw12_ctx ) ;
 8002676:	4b4e      	ldr	r3, [pc, #312]	; (80027b0 <main+0x208>)
 8002678:	0018      	movs	r0, r3
 800267a:	f007 fd60 	bl	800a13e <my_lis2dw12_int1_wu_disable>
		  is_acc_int1_wkup_flag = false ;
 800267e:	4b52      	ldr	r3, [pc, #328]	; (80027c8 <main+0x220>)
 8002680:	2200      	movs	r2, #0
 8002682:	701a      	strb	r2, [r3, #0]
		  HAL_Delay ( 500 ) ; // docelowo 2000
 8002684:	23fa      	movs	r3, #250	; 0xfa
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	0018      	movs	r0, r3
 800268a:	f001 fa95 	bl	8003bb8 <HAL_Delay>
  while ( !enqueue_hello_payload () )
 800268e:	f000 fc73 	bl	8002f78 <enqueue_hello_payload>
 8002692:	0003      	movs	r3, r0
 8002694:	001a      	movs	r2, r3
 8002696:	2301      	movs	r3, #1
 8002698:	4053      	eors	r3, r2
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1d0      	bne.n	8002642 <main+0x9a>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  astro_log_loop_timer = get_systick () ;
 80026a0:	f000 fda0 	bl	80031e4 <get_systick>
 80026a4:	0002      	movs	r2, r0
 80026a6:	4b4a      	ldr	r3, [pc, #296]	; (80027d0 <main+0x228>)
 80026a8:	601a      	str	r2, [r3, #0]
  // MAIN STATE MACHINE
  while (1)
  {
	  if ( is_evt_pin_high() )
 80026aa:	f000 fd89 	bl	80031c0 <is_evt_pin_high>
 80026ae:	1e03      	subs	r3, r0, #0
 80026b0:	d002      	beq.n	80026b8 <main+0x110>
	  {
		  my_astro_read_evt_reg () ;
 80026b2:	f007 fc81 	bl	8009fb8 <my_astro_read_evt_reg>
 80026b6:	e00d      	b.n	80026d4 <main+0x12c>
	  }
	  else
	  {
		  send_debug_logs ( "Enter STOPMode when no EVT during running process" ) ;
 80026b8:	4b46      	ldr	r3, [pc, #280]	; (80027d4 <main+0x22c>)
 80026ba:	0018      	movs	r0, r3
 80026bc:	f000 fd02 	bl	80030c4 <send_debug_logs>
		  HAL_SuspendTick () ; // Jak nie wyłączę to mnie przerwanie SysTick od razu wybudzi!!!
 80026c0:	f001 fa9e 	bl	8003c00 <HAL_SuspendTick>
		  HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFI ) ;
 80026c4:	2380      	movs	r3, #128	; 0x80
 80026c6:	01db      	lsls	r3, r3, #7
 80026c8:	2101      	movs	r1, #1
 80026ca:	0018      	movs	r0, r3
 80026cc:	f001 fe4a 	bl	8004364 <HAL_PWR_EnterSTOPMode>
		  HAL_ResumeTick () ;
 80026d0:	f001 faa4 	bl	8003c1c <HAL_ResumeTick>
	  }
	  if ( is_astro_evt_flag )
 80026d4:	4b40      	ldr	r3, [pc, #256]	; (80027d8 <main+0x230>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d004      	beq.n	80026e6 <main+0x13e>
	  {
		  my_astro_read_evt_reg () ;
 80026dc:	f007 fc6c 	bl	8009fb8 <my_astro_read_evt_reg>
		  is_astro_evt_flag = false ;
 80026e0:	4b3d      	ldr	r3, [pc, #244]	; (80027d8 <main+0x230>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	701a      	strb	r2, [r3, #0]
	  }

	  if ( get_systick () - astro_log_loop_timer >  ASTRO_LOG_TIMER )
 80026e6:	f000 fd7d 	bl	80031e4 <get_systick>
 80026ea:	0002      	movs	r2, r0
 80026ec:	4b38      	ldr	r3, [pc, #224]	; (80027d0 <main+0x228>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	4a3a      	ldr	r2, [pc, #232]	; (80027dc <main+0x234>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d911      	bls.n	800271c <main+0x174>
	  {
		  my_astro_log ();
 80026f8:	f007 fc94 	bl	800a024 <my_astro_log>
		  astro_log_loop_timer = get_systick () ;
 80026fc:	f000 fd72 	bl	80031e4 <get_systick>
 8002700:	0002      	movs	r2, r0
 8002702:	4b33      	ldr	r3, [pc, #204]	; (80027d0 <main+0x228>)
 8002704:	601a      	str	r2, [r3, #0]
		  astronode_send_pld_er ( 0 , payload , strlen ( payload ) ) ;
 8002706:	4b36      	ldr	r3, [pc, #216]	; (80027e0 <main+0x238>)
 8002708:	0018      	movs	r0, r3
 800270a:	f7fd fcfb 	bl	8000104 <strlen>
 800270e:	0003      	movs	r3, r0
 8002710:	b29a      	uxth	r2, r3
 8002712:	4b33      	ldr	r3, [pc, #204]	; (80027e0 <main+0x238>)
 8002714:	0019      	movs	r1, r3
 8002716:	2000      	movs	r0, #0
 8002718:	f005 fffa 	bl	8008710 <astronode_send_pld_er>
	  }
	  if ( is_acc_int1_wkup_flag )
 800271c:	4b2a      	ldr	r3, [pc, #168]	; (80027c8 <main+0x220>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d02c      	beq.n	800277e <main+0x1d6>
	  {
		  // Turn off next int1_wkups for the end of procedure
		  my_lis2dw12_int1_wu_disable ( &my_lis2dw12_ctx ) ;
 8002724:	4b22      	ldr	r3, [pc, #136]	; (80027b0 <main+0x208>)
 8002726:	0018      	movs	r0, r3
 8002728:	f007 fd09 	bl	800a13e <my_lis2dw12_int1_wu_disable>
		  is_acc_int1_wkup_flag = false ;
 800272c:	4b26      	ldr	r3, [pc, #152]	; (80027c8 <main+0x220>)
 800272e:	2200      	movs	r2, #0
 8002730:	701a      	strb	r2, [r3, #0]

		  my_rtc_get_dt ( &rtc_d , &rtc_t ) ;
 8002732:	4a2c      	ldr	r2, [pc, #176]	; (80027e4 <main+0x23c>)
 8002734:	4b2c      	ldr	r3, [pc, #176]	; (80027e8 <main+0x240>)
 8002736:	0011      	movs	r1, r2
 8002738:	0018      	movs	r0, r3
 800273a:	f007 ff5b 	bl	800a5f4 <my_rtc_get_dt>
		  current_ts = my_conv_rtc2timestamp ( &rtc_d , &rtc_t ) ;
 800273e:	4a29      	ldr	r2, [pc, #164]	; (80027e4 <main+0x23c>)
 8002740:	4b29      	ldr	r3, [pc, #164]	; (80027e8 <main+0x240>)
 8002742:	0011      	movs	r1, r2
 8002744:	0018      	movs	r0, r3
 8002746:	f008 f87f 	bl	800a848 <my_conv_rtc2timestamp>
 800274a:	0002      	movs	r2, r0
 800274c:	4b27      	ldr	r3, [pc, #156]	; (80027ec <main+0x244>)
 800274e:	601a      	str	r2, [r3, #0]
		  /*
		  dbg_buff[0] = 0 ;
		  sprintf ( dbg_buff , "Seconds elapsed from last fix: %lu" , current_ts - last_fix_ts ) ;
		  send_debug_logs ( dbg_buff ) ;
		  */
		  if ( ( current_ts - last_fix_ts ) > SECONDS_IN_1_HOUR ) // If more than 1 hour has elapsed from last fix.
 8002750:	4b26      	ldr	r3, [pc, #152]	; (80027ec <main+0x244>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4b26      	ldr	r3, [pc, #152]	; (80027f0 <main+0x248>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	1ad2      	subs	r2, r2, r3
 800275a:	23e1      	movs	r3, #225	; 0xe1
 800275c:	011b      	lsls	r3, r3, #4
 800275e:	429a      	cmp	r2, r3
 8002760:	d909      	bls.n	8002776 <main+0x1ce>
		  {
			  if ( astronode_send_rtc_rr () && !astronode_send_nco_rr () ) // If Astro's RC know time and has opportunity to contact SV
 8002762:	f006 f8f5 	bl	8008950 <astronode_send_rtc_rr>
 8002766:	1e03      	subs	r3, r0, #0
 8002768:	d005      	beq.n	8002776 <main+0x1ce>
 800276a:	f005 fe2d 	bl	80083c8 <astronode_send_nco_rr>
 800276e:	1e03      	subs	r3, r0, #0
 8002770:	d101      	bne.n	8002776 <main+0x1ce>
			  {
				  enqueue_payload () ;
 8002772:	f000 fb43 	bl	8002dfc <enqueue_payload>
			  }
		  }
		  // Turn on int1_wkup
		  my_lis2dw12_int1_wu_enable ( &my_lis2dw12_ctx ) ;
 8002776:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <main+0x208>)
 8002778:	0018      	movs	r0, r3
 800277a:	f007 fcc5 	bl	800a108 <my_lis2dw12_int1_wu_enable>
	  }
	  if ( is_rtc_alarm_a_flag )
 800277e:	4b1d      	ldr	r3, [pc, #116]	; (80027f4 <main+0x24c>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d091      	beq.n	80026aa <main+0x102>
	  {
		  send_debug_logs ( "RTC alarm A event" ) ;
 8002786:	4b1c      	ldr	r3, [pc, #112]	; (80027f8 <main+0x250>)
 8002788:	0018      	movs	r0, r3
 800278a:	f000 fc9b 	bl	80030c4 <send_debug_logs>
		  enqueue_payload () ;
 800278e:	f000 fb35 	bl	8002dfc <enqueue_payload>
		  my_rtc_set_alarm ( SECONDS_IN_1_HOUR ) ;
 8002792:	23e1      	movs	r3, #225	; 0xe1
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	0018      	movs	r0, r3
 8002798:	f007 ff86 	bl	800a6a8 <my_rtc_set_alarm>
		  is_rtc_alarm_a_flag = false ;
 800279c:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <main+0x24c>)
 800279e:	2200      	movs	r2, #0
 80027a0:	701a      	strb	r2, [r3, #0]
	  if ( is_evt_pin_high() )
 80027a2:	e782      	b.n	80026aa <main+0x102>
 80027a4:	20000000 	.word	0x20000000
 80027a8:	2000086c 	.word	0x2000086c
 80027ac:	080133a0 	.word	0x080133a0
 80027b0:	20000b88 	.word	0x20000b88
 80027b4:	08003289 	.word	0x08003289
 80027b8:	080032f9 	.word	0x080032f9
 80027bc:	20000728 	.word	0x20000728
 80027c0:	080133c0 	.word	0x080133c0
 80027c4:	080133dc 	.word	0x080133dc
 80027c8:	20000bb0 	.word	0x20000bb0
 80027cc:	08013408 	.word	0x08013408
 80027d0:	20000a2c 	.word	0x20000a2c
 80027d4:	08013430 	.word	0x08013430
 80027d8:	20000bb1 	.word	0x20000bb1
 80027dc:	0000ea60 	.word	0x0000ea60
 80027e0:	20000a30 	.word	0x20000a30
 80027e4:	20000b98 	.word	0x20000b98
 80027e8:	20000bac 	.word	0x20000bac
 80027ec:	20000a0c 	.word	0x20000a0c
 80027f0:	20000a20 	.word	0x20000a20
 80027f4:	20000bb2 	.word	0x20000bb2
 80027f8:	08013464 	.word	0x08013464

080027fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027fc:	b590      	push	{r4, r7, lr}
 80027fe:	b093      	sub	sp, #76	; 0x4c
 8002800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002802:	2410      	movs	r4, #16
 8002804:	193b      	adds	r3, r7, r4
 8002806:	0018      	movs	r0, r3
 8002808:	2338      	movs	r3, #56	; 0x38
 800280a:	001a      	movs	r2, r3
 800280c:	2100      	movs	r1, #0
 800280e:	f00a f82b 	bl	800c868 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002812:	003b      	movs	r3, r7
 8002814:	0018      	movs	r0, r3
 8002816:	2310      	movs	r3, #16
 8002818:	001a      	movs	r2, r3
 800281a:	2100      	movs	r1, #0
 800281c:	f00a f824 	bl	800c868 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002820:	2380      	movs	r3, #128	; 0x80
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	0018      	movs	r0, r3
 8002826:	f001 fdd5 	bl	80043d4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800282a:	193b      	adds	r3, r7, r4
 800282c:	220a      	movs	r2, #10
 800282e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002830:	193b      	adds	r3, r7, r4
 8002832:	2280      	movs	r2, #128	; 0x80
 8002834:	0052      	lsls	r2, r2, #1
 8002836:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002838:	0021      	movs	r1, r4
 800283a:	187b      	adds	r3, r7, r1
 800283c:	2200      	movs	r2, #0
 800283e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002840:	187b      	adds	r3, r7, r1
 8002842:	2240      	movs	r2, #64	; 0x40
 8002844:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002846:	187b      	adds	r3, r7, r1
 8002848:	2201      	movs	r2, #1
 800284a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800284c:	187b      	adds	r3, r7, r1
 800284e:	2200      	movs	r2, #0
 8002850:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002852:	187b      	adds	r3, r7, r1
 8002854:	0018      	movs	r0, r3
 8002856:	f001 fe09 	bl	800446c <HAL_RCC_OscConfig>
 800285a:	1e03      	subs	r3, r0, #0
 800285c:	d001      	beq.n	8002862 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800285e:	f000 fdf1 	bl	8003444 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002862:	003b      	movs	r3, r7
 8002864:	2207      	movs	r2, #7
 8002866:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002868:	003b      	movs	r3, r7
 800286a:	2200      	movs	r2, #0
 800286c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800286e:	003b      	movs	r3, r7
 8002870:	2200      	movs	r2, #0
 8002872:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002874:	003b      	movs	r3, r7
 8002876:	2200      	movs	r2, #0
 8002878:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800287a:	003b      	movs	r3, r7
 800287c:	2100      	movs	r1, #0
 800287e:	0018      	movs	r0, r3
 8002880:	f002 f90e 	bl	8004aa0 <HAL_RCC_ClockConfig>
 8002884:	1e03      	subs	r3, r0, #0
 8002886:	d001      	beq.n	800288c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002888:	f000 fddc 	bl	8003444 <Error_Handler>
  }
}
 800288c:	46c0      	nop			; (mov r8, r8)
 800288e:	46bd      	mov	sp, r7
 8002890:	b013      	add	sp, #76	; 0x4c
 8002892:	bd90      	pop	{r4, r7, pc}

08002894 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b090      	sub	sp, #64	; 0x40
 8002898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800289a:	232c      	movs	r3, #44	; 0x2c
 800289c:	18fb      	adds	r3, r7, r3
 800289e:	0018      	movs	r0, r3
 80028a0:	2314      	movs	r3, #20
 80028a2:	001a      	movs	r2, r3
 80028a4:	2100      	movs	r1, #0
 80028a6:	f009 ffdf 	bl	800c868 <memset>
  RTC_DateTypeDef sDate = {0};
 80028aa:	2328      	movs	r3, #40	; 0x28
 80028ac:	18fb      	adds	r3, r7, r3
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80028b2:	003b      	movs	r3, r7
 80028b4:	0018      	movs	r0, r3
 80028b6:	2328      	movs	r3, #40	; 0x28
 80028b8:	001a      	movs	r2, r3
 80028ba:	2100      	movs	r1, #0
 80028bc:	f009 ffd4 	bl	800c868 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80028c0:	4b44      	ldr	r3, [pc, #272]	; (80029d4 <MX_RTC_Init+0x140>)
 80028c2:	4a45      	ldr	r2, [pc, #276]	; (80029d8 <MX_RTC_Init+0x144>)
 80028c4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80028c6:	4b43      	ldr	r3, [pc, #268]	; (80029d4 <MX_RTC_Init+0x140>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80028cc:	4b41      	ldr	r3, [pc, #260]	; (80029d4 <MX_RTC_Init+0x140>)
 80028ce:	227f      	movs	r2, #127	; 0x7f
 80028d0:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80028d2:	4b40      	ldr	r3, [pc, #256]	; (80029d4 <MX_RTC_Init+0x140>)
 80028d4:	22ff      	movs	r2, #255	; 0xff
 80028d6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80028d8:	4b3e      	ldr	r3, [pc, #248]	; (80029d4 <MX_RTC_Init+0x140>)
 80028da:	2200      	movs	r2, #0
 80028dc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80028de:	4b3d      	ldr	r3, [pc, #244]	; (80029d4 <MX_RTC_Init+0x140>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80028e4:	4b3b      	ldr	r3, [pc, #236]	; (80029d4 <MX_RTC_Init+0x140>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80028ea:	4b3a      	ldr	r3, [pc, #232]	; (80029d4 <MX_RTC_Init+0x140>)
 80028ec:	2280      	movs	r2, #128	; 0x80
 80028ee:	05d2      	lsls	r2, r2, #23
 80028f0:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80028f2:	4b38      	ldr	r3, [pc, #224]	; (80029d4 <MX_RTC_Init+0x140>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80028f8:	4b36      	ldr	r3, [pc, #216]	; (80029d4 <MX_RTC_Init+0x140>)
 80028fa:	0018      	movs	r0, r3
 80028fc:	f002 fc32 	bl	8005164 <HAL_RTC_Init>
 8002900:	1e03      	subs	r3, r0, #0
 8002902:	d001      	beq.n	8002908 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8002904:	f000 fd9e 	bl	8003444 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8002908:	212c      	movs	r1, #44	; 0x2c
 800290a:	187b      	adds	r3, r7, r1
 800290c:	2200      	movs	r2, #0
 800290e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8002910:	187b      	adds	r3, r7, r1
 8002912:	2200      	movs	r2, #0
 8002914:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8002916:	187b      	adds	r3, r7, r1
 8002918:	2200      	movs	r2, #0
 800291a:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0;
 800291c:	187b      	adds	r3, r7, r1
 800291e:	2200      	movs	r2, #0
 8002920:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002922:	187b      	adds	r3, r7, r1
 8002924:	2200      	movs	r2, #0
 8002926:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002928:	187b      	adds	r3, r7, r1
 800292a:	2200      	movs	r2, #0
 800292c:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800292e:	1879      	adds	r1, r7, r1
 8002930:	4b28      	ldr	r3, [pc, #160]	; (80029d4 <MX_RTC_Init+0x140>)
 8002932:	2200      	movs	r2, #0
 8002934:	0018      	movs	r0, r3
 8002936:	f002 fcb7 	bl	80052a8 <HAL_RTC_SetTime>
 800293a:	1e03      	subs	r3, r0, #0
 800293c:	d001      	beq.n	8002942 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 800293e:	f000 fd81 	bl	8003444 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8002942:	2128      	movs	r1, #40	; 0x28
 8002944:	187b      	adds	r3, r7, r1
 8002946:	2206      	movs	r2, #6
 8002948:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800294a:	187b      	adds	r3, r7, r1
 800294c:	2201      	movs	r2, #1
 800294e:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8002950:	187b      	adds	r3, r7, r1
 8002952:	2201      	movs	r2, #1
 8002954:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8002956:	187b      	adds	r3, r7, r1
 8002958:	2200      	movs	r2, #0
 800295a:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800295c:	1879      	adds	r1, r7, r1
 800295e:	4b1d      	ldr	r3, [pc, #116]	; (80029d4 <MX_RTC_Init+0x140>)
 8002960:	2200      	movs	r2, #0
 8002962:	0018      	movs	r0, r3
 8002964:	f002 fda4 	bl	80054b0 <HAL_RTC_SetDate>
 8002968:	1e03      	subs	r3, r0, #0
 800296a:	d001      	beq.n	8002970 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 800296c:	f000 fd6a 	bl	8003444 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8002970:	003b      	movs	r3, r7
 8002972:	2200      	movs	r2, #0
 8002974:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8002976:	003b      	movs	r3, r7
 8002978:	2200      	movs	r2, #0
 800297a:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 800297c:	003b      	movs	r3, r7
 800297e:	2200      	movs	r2, #0
 8002980:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8002982:	003b      	movs	r3, r7
 8002984:	2200      	movs	r2, #0
 8002986:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002988:	003b      	movs	r3, r7
 800298a:	2200      	movs	r2, #0
 800298c:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800298e:	003b      	movs	r3, r7
 8002990:	2200      	movs	r2, #0
 8002992:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002994:	003b      	movs	r3, r7
 8002996:	2200      	movs	r2, #0
 8002998:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800299a:	003b      	movs	r3, r7
 800299c:	2200      	movs	r2, #0
 800299e:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80029a0:	003b      	movs	r3, r7
 80029a2:	2200      	movs	r2, #0
 80029a4:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80029a6:	003b      	movs	r3, r7
 80029a8:	2220      	movs	r2, #32
 80029aa:	2101      	movs	r1, #1
 80029ac:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80029ae:	003b      	movs	r3, r7
 80029b0:	2280      	movs	r2, #128	; 0x80
 80029b2:	0052      	lsls	r2, r2, #1
 80029b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80029b6:	0039      	movs	r1, r7
 80029b8:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <MX_RTC_Init+0x140>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	0018      	movs	r0, r3
 80029be:	f002 fe57 	bl	8005670 <HAL_RTC_SetAlarm>
 80029c2:	1e03      	subs	r3, r0, #0
 80029c4:	d001      	beq.n	80029ca <MX_RTC_Init+0x136>
  {
    Error_Handler();
 80029c6:	f000 fd3d 	bl	8003444 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	46bd      	mov	sp, r7
 80029ce:	b010      	add	sp, #64	; 0x40
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	46c0      	nop			; (mov r8, r8)
 80029d4:	200006fc 	.word	0x200006fc
 80029d8:	40002800 	.word	0x40002800

080029dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80029e0:	4b1b      	ldr	r3, [pc, #108]	; (8002a50 <MX_SPI1_Init+0x74>)
 80029e2:	4a1c      	ldr	r2, [pc, #112]	; (8002a54 <MX_SPI1_Init+0x78>)
 80029e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029e6:	4b1a      	ldr	r3, [pc, #104]	; (8002a50 <MX_SPI1_Init+0x74>)
 80029e8:	2282      	movs	r2, #130	; 0x82
 80029ea:	0052      	lsls	r2, r2, #1
 80029ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80029ee:	4b18      	ldr	r3, [pc, #96]	; (8002a50 <MX_SPI1_Init+0x74>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80029f4:	4b16      	ldr	r3, [pc, #88]	; (8002a50 <MX_SPI1_Init+0x74>)
 80029f6:	22e0      	movs	r2, #224	; 0xe0
 80029f8:	00d2      	lsls	r2, r2, #3
 80029fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029fc:	4b14      	ldr	r3, [pc, #80]	; (8002a50 <MX_SPI1_Init+0x74>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a02:	4b13      	ldr	r3, [pc, #76]	; (8002a50 <MX_SPI1_Init+0x74>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a08:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <MX_SPI1_Init+0x74>)
 8002a0a:	2280      	movs	r2, #128	; 0x80
 8002a0c:	0092      	lsls	r2, r2, #2
 8002a0e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a10:	4b0f      	ldr	r3, [pc, #60]	; (8002a50 <MX_SPI1_Init+0x74>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a16:	4b0e      	ldr	r3, [pc, #56]	; (8002a50 <MX_SPI1_Init+0x74>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a1c:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <MX_SPI1_Init+0x74>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a22:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <MX_SPI1_Init+0x74>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002a28:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <MX_SPI1_Init+0x74>)
 8002a2a:	2207      	movs	r2, #7
 8002a2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a2e:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <MX_SPI1_Init+0x74>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a34:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <MX_SPI1_Init+0x74>)
 8002a36:	2208      	movs	r2, #8
 8002a38:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a3a:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <MX_SPI1_Init+0x74>)
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	f003 f899 	bl	8005b74 <HAL_SPI_Init>
 8002a42:	1e03      	subs	r3, r0, #0
 8002a44:	d001      	beq.n	8002a4a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002a46:	f000 fcfd 	bl	8003444 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	20000728 	.word	0x20000728
 8002a54:	40013000 	.word	0x40013000

08002a58 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a5e:	1d3b      	adds	r3, r7, #4
 8002a60:	0018      	movs	r0, r3
 8002a62:	230c      	movs	r3, #12
 8002a64:	001a      	movs	r2, r3
 8002a66:	2100      	movs	r1, #0
 8002a68:	f009 fefe 	bl	800c868 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002a6c:	4b15      	ldr	r3, [pc, #84]	; (8002ac4 <MX_TIM6_Init+0x6c>)
 8002a6e:	4a16      	ldr	r2, [pc, #88]	; (8002ac8 <MX_TIM6_Init+0x70>)
 8002a70:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8002a72:	4b14      	ldr	r3, [pc, #80]	; (8002ac4 <MX_TIM6_Init+0x6c>)
 8002a74:	4a15      	ldr	r2, [pc, #84]	; (8002acc <MX_TIM6_Init+0x74>)
 8002a76:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a78:	4b12      	ldr	r3, [pc, #72]	; (8002ac4 <MX_TIM6_Init+0x6c>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002a7e:	4b11      	ldr	r3, [pc, #68]	; (8002ac4 <MX_TIM6_Init+0x6c>)
 8002a80:	4a13      	ldr	r2, [pc, #76]	; (8002ad0 <MX_TIM6_Init+0x78>)
 8002a82:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a84:	4b0f      	ldr	r3, [pc, #60]	; (8002ac4 <MX_TIM6_Init+0x6c>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002a8a:	4b0e      	ldr	r3, [pc, #56]	; (8002ac4 <MX_TIM6_Init+0x6c>)
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f003 ff73 	bl	8006978 <HAL_TIM_Base_Init>
 8002a92:	1e03      	subs	r3, r0, #0
 8002a94:	d001      	beq.n	8002a9a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002a96:	f000 fcd5 	bl	8003444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a9a:	1d3b      	adds	r3, r7, #4
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aa0:	1d3b      	adds	r3, r7, #4
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002aa6:	1d3a      	adds	r2, r7, #4
 8002aa8:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <MX_TIM6_Init+0x6c>)
 8002aaa:	0011      	movs	r1, r2
 8002aac:	0018      	movs	r0, r3
 8002aae:	f004 fa17 	bl	8006ee0 <HAL_TIMEx_MasterConfigSynchronization>
 8002ab2:	1e03      	subs	r3, r0, #0
 8002ab4:	d001      	beq.n	8002aba <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002ab6:	f000 fcc5 	bl	8003444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002aba:	46c0      	nop			; (mov r8, r8)
 8002abc:	46bd      	mov	sp, r7
 8002abe:	b004      	add	sp, #16
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	46c0      	nop			; (mov r8, r8)
 8002ac4:	2000078c 	.word	0x2000078c
 8002ac8:	40001000 	.word	0x40001000
 8002acc:	00003e7f 	.word	0x00003e7f
 8002ad0:	000003e7 	.word	0x000003e7

08002ad4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ad8:	4b23      	ldr	r3, [pc, #140]	; (8002b68 <MX_USART1_UART_Init+0x94>)
 8002ada:	4a24      	ldr	r2, [pc, #144]	; (8002b6c <MX_USART1_UART_Init+0x98>)
 8002adc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002ade:	4b22      	ldr	r3, [pc, #136]	; (8002b68 <MX_USART1_UART_Init+0x94>)
 8002ae0:	2296      	movs	r2, #150	; 0x96
 8002ae2:	0192      	lsls	r2, r2, #6
 8002ae4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ae6:	4b20      	ldr	r3, [pc, #128]	; (8002b68 <MX_USART1_UART_Init+0x94>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002aec:	4b1e      	ldr	r3, [pc, #120]	; (8002b68 <MX_USART1_UART_Init+0x94>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002af2:	4b1d      	ldr	r3, [pc, #116]	; (8002b68 <MX_USART1_UART_Init+0x94>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002af8:	4b1b      	ldr	r3, [pc, #108]	; (8002b68 <MX_USART1_UART_Init+0x94>)
 8002afa:	220c      	movs	r2, #12
 8002afc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002afe:	4b1a      	ldr	r3, [pc, #104]	; (8002b68 <MX_USART1_UART_Init+0x94>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b04:	4b18      	ldr	r3, [pc, #96]	; (8002b68 <MX_USART1_UART_Init+0x94>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b0a:	4b17      	ldr	r3, [pc, #92]	; (8002b68 <MX_USART1_UART_Init+0x94>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b10:	4b15      	ldr	r3, [pc, #84]	; (8002b68 <MX_USART1_UART_Init+0x94>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b16:	4b14      	ldr	r3, [pc, #80]	; (8002b68 <MX_USART1_UART_Init+0x94>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b1c:	4b12      	ldr	r3, [pc, #72]	; (8002b68 <MX_USART1_UART_Init+0x94>)
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f004 fa64 	bl	8006fec <HAL_UART_Init>
 8002b24:	1e03      	subs	r3, r0, #0
 8002b26:	d001      	beq.n	8002b2c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002b28:	f000 fc8c 	bl	8003444 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b2c:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <MX_USART1_UART_Init+0x94>)
 8002b2e:	2100      	movs	r1, #0
 8002b30:	0018      	movs	r0, r3
 8002b32:	f005 f931 	bl	8007d98 <HAL_UARTEx_SetTxFifoThreshold>
 8002b36:	1e03      	subs	r3, r0, #0
 8002b38:	d001      	beq.n	8002b3e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002b3a:	f000 fc83 	bl	8003444 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b3e:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <MX_USART1_UART_Init+0x94>)
 8002b40:	2100      	movs	r1, #0
 8002b42:	0018      	movs	r0, r3
 8002b44:	f005 f968 	bl	8007e18 <HAL_UARTEx_SetRxFifoThreshold>
 8002b48:	1e03      	subs	r3, r0, #0
 8002b4a:	d001      	beq.n	8002b50 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002b4c:	f000 fc7a 	bl	8003444 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002b50:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <MX_USART1_UART_Init+0x94>)
 8002b52:	0018      	movs	r0, r3
 8002b54:	f005 f8e6 	bl	8007d24 <HAL_UARTEx_DisableFifoMode>
 8002b58:	1e03      	subs	r3, r0, #0
 8002b5a:	d001      	beq.n	8002b60 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002b5c:	f000 fc72 	bl	8003444 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b60:	46c0      	nop			; (mov r8, r8)
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	46c0      	nop			; (mov r8, r8)
 8002b68:	200007d8 	.word	0x200007d8
 8002b6c:	40013800 	.word	0x40013800

08002b70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b74:	4b23      	ldr	r3, [pc, #140]	; (8002c04 <MX_USART2_UART_Init+0x94>)
 8002b76:	4a24      	ldr	r2, [pc, #144]	; (8002c08 <MX_USART2_UART_Init+0x98>)
 8002b78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b7a:	4b22      	ldr	r3, [pc, #136]	; (8002c04 <MX_USART2_UART_Init+0x94>)
 8002b7c:	22e1      	movs	r2, #225	; 0xe1
 8002b7e:	0252      	lsls	r2, r2, #9
 8002b80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b82:	4b20      	ldr	r3, [pc, #128]	; (8002c04 <MX_USART2_UART_Init+0x94>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b88:	4b1e      	ldr	r3, [pc, #120]	; (8002c04 <MX_USART2_UART_Init+0x94>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b8e:	4b1d      	ldr	r3, [pc, #116]	; (8002c04 <MX_USART2_UART_Init+0x94>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b94:	4b1b      	ldr	r3, [pc, #108]	; (8002c04 <MX_USART2_UART_Init+0x94>)
 8002b96:	220c      	movs	r2, #12
 8002b98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b9a:	4b1a      	ldr	r3, [pc, #104]	; (8002c04 <MX_USART2_UART_Init+0x94>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ba0:	4b18      	ldr	r3, [pc, #96]	; (8002c04 <MX_USART2_UART_Init+0x94>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ba6:	4b17      	ldr	r3, [pc, #92]	; (8002c04 <MX_USART2_UART_Init+0x94>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002bac:	4b15      	ldr	r3, [pc, #84]	; (8002c04 <MX_USART2_UART_Init+0x94>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bb2:	4b14      	ldr	r3, [pc, #80]	; (8002c04 <MX_USART2_UART_Init+0x94>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002bb8:	4b12      	ldr	r3, [pc, #72]	; (8002c04 <MX_USART2_UART_Init+0x94>)
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f004 fa16 	bl	8006fec <HAL_UART_Init>
 8002bc0:	1e03      	subs	r3, r0, #0
 8002bc2:	d001      	beq.n	8002bc8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002bc4:	f000 fc3e 	bl	8003444 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bc8:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <MX_USART2_UART_Init+0x94>)
 8002bca:	2100      	movs	r1, #0
 8002bcc:	0018      	movs	r0, r3
 8002bce:	f005 f8e3 	bl	8007d98 <HAL_UARTEx_SetTxFifoThreshold>
 8002bd2:	1e03      	subs	r3, r0, #0
 8002bd4:	d001      	beq.n	8002bda <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002bd6:	f000 fc35 	bl	8003444 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bda:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <MX_USART2_UART_Init+0x94>)
 8002bdc:	2100      	movs	r1, #0
 8002bde:	0018      	movs	r0, r3
 8002be0:	f005 f91a 	bl	8007e18 <HAL_UARTEx_SetRxFifoThreshold>
 8002be4:	1e03      	subs	r3, r0, #0
 8002be6:	d001      	beq.n	8002bec <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002be8:	f000 fc2c 	bl	8003444 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002bec:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <MX_USART2_UART_Init+0x94>)
 8002bee:	0018      	movs	r0, r3
 8002bf0:	f005 f898 	bl	8007d24 <HAL_UARTEx_DisableFifoMode>
 8002bf4:	1e03      	subs	r3, r0, #0
 8002bf6:	d001      	beq.n	8002bfc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002bf8:	f000 fc24 	bl	8003444 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002bfc:	46c0      	nop			; (mov r8, r8)
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	2000086c 	.word	0x2000086c
 8002c08:	40004400 	.word	0x40004400

08002c0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002c10:	4b16      	ldr	r3, [pc, #88]	; (8002c6c <MX_USART3_UART_Init+0x60>)
 8002c12:	4a17      	ldr	r2, [pc, #92]	; (8002c70 <MX_USART3_UART_Init+0x64>)
 8002c14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002c16:	4b15      	ldr	r3, [pc, #84]	; (8002c6c <MX_USART3_UART_Init+0x60>)
 8002c18:	2296      	movs	r2, #150	; 0x96
 8002c1a:	0192      	lsls	r2, r2, #6
 8002c1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c1e:	4b13      	ldr	r3, [pc, #76]	; (8002c6c <MX_USART3_UART_Init+0x60>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002c24:	4b11      	ldr	r3, [pc, #68]	; (8002c6c <MX_USART3_UART_Init+0x60>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c2a:	4b10      	ldr	r3, [pc, #64]	; (8002c6c <MX_USART3_UART_Init+0x60>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c30:	4b0e      	ldr	r3, [pc, #56]	; (8002c6c <MX_USART3_UART_Init+0x60>)
 8002c32:	220c      	movs	r2, #12
 8002c34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c36:	4b0d      	ldr	r3, [pc, #52]	; (8002c6c <MX_USART3_UART_Init+0x60>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c3c:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <MX_USART3_UART_Init+0x60>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c42:	4b0a      	ldr	r3, [pc, #40]	; (8002c6c <MX_USART3_UART_Init+0x60>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c48:	4b08      	ldr	r3, [pc, #32]	; (8002c6c <MX_USART3_UART_Init+0x60>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c4e:	4b07      	ldr	r3, [pc, #28]	; (8002c6c <MX_USART3_UART_Init+0x60>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c54:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <MX_USART3_UART_Init+0x60>)
 8002c56:	0018      	movs	r0, r3
 8002c58:	f004 f9c8 	bl	8006fec <HAL_UART_Init>
 8002c5c:	1e03      	subs	r3, r0, #0
 8002c5e:	d001      	beq.n	8002c64 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002c60:	f000 fbf0 	bl	8003444 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c64:	46c0      	nop			; (mov r8, r8)
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	46c0      	nop			; (mov r8, r8)
 8002c6c:	20000900 	.word	0x20000900
 8002c70:	40004800 	.word	0x40004800

08002c74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c74:	b590      	push	{r4, r7, lr}
 8002c76:	b08b      	sub	sp, #44	; 0x2c
 8002c78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c7a:	2414      	movs	r4, #20
 8002c7c:	193b      	adds	r3, r7, r4
 8002c7e:	0018      	movs	r0, r3
 8002c80:	2314      	movs	r3, #20
 8002c82:	001a      	movs	r2, r3
 8002c84:	2100      	movs	r1, #0
 8002c86:	f009 fdef 	bl	800c868 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c8a:	4b58      	ldr	r3, [pc, #352]	; (8002dec <MX_GPIO_Init+0x178>)
 8002c8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c8e:	4b57      	ldr	r3, [pc, #348]	; (8002dec <MX_GPIO_Init+0x178>)
 8002c90:	2104      	movs	r1, #4
 8002c92:	430a      	orrs	r2, r1
 8002c94:	635a      	str	r2, [r3, #52]	; 0x34
 8002c96:	4b55      	ldr	r3, [pc, #340]	; (8002dec <MX_GPIO_Init+0x178>)
 8002c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c9a:	2204      	movs	r2, #4
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]
 8002ca0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ca2:	4b52      	ldr	r3, [pc, #328]	; (8002dec <MX_GPIO_Init+0x178>)
 8002ca4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ca6:	4b51      	ldr	r3, [pc, #324]	; (8002dec <MX_GPIO_Init+0x178>)
 8002ca8:	2120      	movs	r1, #32
 8002caa:	430a      	orrs	r2, r1
 8002cac:	635a      	str	r2, [r3, #52]	; 0x34
 8002cae:	4b4f      	ldr	r3, [pc, #316]	; (8002dec <MX_GPIO_Init+0x178>)
 8002cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cba:	4b4c      	ldr	r3, [pc, #304]	; (8002dec <MX_GPIO_Init+0x178>)
 8002cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cbe:	4b4b      	ldr	r3, [pc, #300]	; (8002dec <MX_GPIO_Init+0x178>)
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	635a      	str	r2, [r3, #52]	; 0x34
 8002cc6:	4b49      	ldr	r3, [pc, #292]	; (8002dec <MX_GPIO_Init+0x178>)
 8002cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cca:	2201      	movs	r2, #1
 8002ccc:	4013      	ands	r3, r2
 8002cce:	60bb      	str	r3, [r7, #8]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cd2:	4b46      	ldr	r3, [pc, #280]	; (8002dec <MX_GPIO_Init+0x178>)
 8002cd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cd6:	4b45      	ldr	r3, [pc, #276]	; (8002dec <MX_GPIO_Init+0x178>)
 8002cd8:	2102      	movs	r1, #2
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	635a      	str	r2, [r3, #52]	; 0x34
 8002cde:	4b43      	ldr	r3, [pc, #268]	; (8002dec <MX_GPIO_Init+0x178>)
 8002ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	607b      	str	r3, [r7, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L86_RST_Pin|L86_PWR_SW_Pin, GPIO_PIN_RESET);
 8002cea:	2388      	movs	r3, #136	; 0x88
 8002cec:	015b      	lsls	r3, r3, #5
 8002cee:	4840      	ldr	r0, [pc, #256]	; (8002df0 <MX_GPIO_Init+0x17c>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	0019      	movs	r1, r3
 8002cf4:	f001 fae5 	bl	80042c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RST_Pin|ASTRO_WAKEUP_Pin, GPIO_PIN_RESET);
 8002cf8:	493e      	ldr	r1, [pc, #248]	; (8002df4 <MX_GPIO_Init+0x180>)
 8002cfa:	23a0      	movs	r3, #160	; 0xa0
 8002cfc:	05db      	lsls	r3, r3, #23
 8002cfe:	2200      	movs	r2, #0
 8002d00:	0018      	movs	r0, r3
 8002d02:	f001 fade 	bl	80042c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIS_SPI1_CS_GPIO_Port, LIS_SPI1_CS_Pin, GPIO_PIN_RESET);
 8002d06:	2380      	movs	r3, #128	; 0x80
 8002d08:	01db      	lsls	r3, r3, #7
 8002d0a:	483b      	ldr	r0, [pc, #236]	; (8002df8 <MX_GPIO_Init+0x184>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	0019      	movs	r1, r3
 8002d10:	f001 fad7 	bl	80042c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : L86_RST_Pin L86_PWR_SW_Pin */
  GPIO_InitStruct.Pin = L86_RST_Pin|L86_PWR_SW_Pin;
 8002d14:	193b      	adds	r3, r7, r4
 8002d16:	2288      	movs	r2, #136	; 0x88
 8002d18:	0152      	lsls	r2, r2, #5
 8002d1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d1c:	193b      	adds	r3, r7, r4
 8002d1e:	2201      	movs	r2, #1
 8002d20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d22:	193b      	adds	r3, r7, r4
 8002d24:	2200      	movs	r2, #0
 8002d26:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d28:	193b      	adds	r3, r7, r4
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d2e:	193b      	adds	r3, r7, r4
 8002d30:	4a2f      	ldr	r2, [pc, #188]	; (8002df0 <MX_GPIO_Init+0x17c>)
 8002d32:	0019      	movs	r1, r3
 8002d34:	0010      	movs	r0, r2
 8002d36:	f001 f873 	bl	8003e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin ASTRO_PWR_SW_Pin ASTRO_RST_Pin ASTRO_WAKEUP_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RST_Pin|ASTRO_WAKEUP_Pin;
 8002d3a:	193b      	adds	r3, r7, r4
 8002d3c:	4a2d      	ldr	r2, [pc, #180]	; (8002df4 <MX_GPIO_Init+0x180>)
 8002d3e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d40:	193b      	adds	r3, r7, r4
 8002d42:	2201      	movs	r2, #1
 8002d44:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d46:	193b      	adds	r3, r7, r4
 8002d48:	2200      	movs	r2, #0
 8002d4a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4c:	193b      	adds	r3, r7, r4
 8002d4e:	2200      	movs	r2, #0
 8002d50:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d52:	193a      	adds	r2, r7, r4
 8002d54:	23a0      	movs	r3, #160	; 0xa0
 8002d56:	05db      	lsls	r3, r3, #23
 8002d58:	0011      	movs	r1, r2
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f001 f860 	bl	8003e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIS_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = LIS_SPI1_CS_Pin;
 8002d60:	0021      	movs	r1, r4
 8002d62:	187b      	adds	r3, r7, r1
 8002d64:	2280      	movs	r2, #128	; 0x80
 8002d66:	01d2      	lsls	r2, r2, #7
 8002d68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d6a:	000c      	movs	r4, r1
 8002d6c:	193b      	adds	r3, r7, r4
 8002d6e:	2201      	movs	r2, #1
 8002d70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d72:	193b      	adds	r3, r7, r4
 8002d74:	2200      	movs	r2, #0
 8002d76:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d78:	193b      	adds	r3, r7, r4
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LIS_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002d7e:	193b      	adds	r3, r7, r4
 8002d80:	4a1d      	ldr	r2, [pc, #116]	; (8002df8 <MX_GPIO_Init+0x184>)
 8002d82:	0019      	movs	r1, r3
 8002d84:	0010      	movs	r0, r2
 8002d86:	f001 f84b 	bl	8003e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : ASTRO_EVT_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin;
 8002d8a:	193b      	adds	r3, r7, r4
 8002d8c:	2280      	movs	r2, #128	; 0x80
 8002d8e:	0152      	lsls	r2, r2, #5
 8002d90:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d92:	193b      	adds	r3, r7, r4
 8002d94:	2288      	movs	r2, #136	; 0x88
 8002d96:	0352      	lsls	r2, r2, #13
 8002d98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9a:	193b      	adds	r3, r7, r4
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ASTRO_EVT_GPIO_Port, &GPIO_InitStruct);
 8002da0:	193a      	adds	r2, r7, r4
 8002da2:	23a0      	movs	r3, #160	; 0xa0
 8002da4:	05db      	lsls	r3, r3, #23
 8002da6:	0011      	movs	r1, r2
 8002da8:	0018      	movs	r0, r3
 8002daa:	f001 f839 	bl	8003e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIS_INT1_EXTI8_Pin LIS_INT2_EXTI9_Pin */
  GPIO_InitStruct.Pin = LIS_INT1_EXTI8_Pin|LIS_INT2_EXTI9_Pin;
 8002dae:	0021      	movs	r1, r4
 8002db0:	187b      	adds	r3, r7, r1
 8002db2:	22c0      	movs	r2, #192	; 0xc0
 8002db4:	0092      	lsls	r2, r2, #2
 8002db6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002db8:	187b      	adds	r3, r7, r1
 8002dba:	2288      	movs	r2, #136	; 0x88
 8002dbc:	0352      	lsls	r2, r2, #13
 8002dbe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc0:	187b      	adds	r3, r7, r1
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dc6:	187b      	adds	r3, r7, r1
 8002dc8:	4a0b      	ldr	r2, [pc, #44]	; (8002df8 <MX_GPIO_Init+0x184>)
 8002dca:	0019      	movs	r1, r3
 8002dcc:	0010      	movs	r0, r2
 8002dce:	f001 f827 	bl	8003e20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	2007      	movs	r0, #7
 8002dd8:	f000 ffec 	bl	8003db4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002ddc:	2007      	movs	r0, #7
 8002dde:	f000 fffe 	bl	8003dde <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	46bd      	mov	sp, r7
 8002de6:	b00b      	add	sp, #44	; 0x2c
 8002de8:	bd90      	pop	{r4, r7, pc}
 8002dea:	46c0      	nop			; (mov r8, r8)
 8002dec:	40021000 	.word	0x40021000
 8002df0:	50000800 	.word	0x50000800
 8002df4:	00008860 	.word	0x00008860
 8002df8:	50000400 	.word	0x50000400

08002dfc <enqueue_payload>:

/* USER CODE BEGIN 4 */
bool enqueue_payload ( void )
{
 8002dfc:	b590      	push	{r4, r7, lr}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af04      	add	r7, sp, #16
	astro_geo_wr_latitude = 0 ;
 8002e02:	4b48      	ldr	r3, [pc, #288]	; (8002f24 <enqueue_payload+0x128>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
	astro_geo_wr_longitude = 0 ;
 8002e08:	4b47      	ldr	r3, [pc, #284]	; (8002f28 <enqueue_payload+0x12c>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]
	if ( my_lx6_get_coordinates ( my_lx6_gnss_active_time_ths , nmea_pdop_ths , &nmea_fixed_pdop_d , &astro_geo_wr_latitude , &astro_geo_wr_longitude ) )
 8002e0e:	4b47      	ldr	r3, [pc, #284]	; (8002f2c <enqueue_payload+0x130>)
 8002e10:	8818      	ldrh	r0, [r3, #0]
 8002e12:	4b47      	ldr	r3, [pc, #284]	; (8002f30 <enqueue_payload+0x134>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	4943      	ldr	r1, [pc, #268]	; (8002f28 <enqueue_payload+0x12c>)
 8002e1a:	9102      	str	r1, [sp, #8]
 8002e1c:	4941      	ldr	r1, [pc, #260]	; (8002f24 <enqueue_payload+0x128>)
 8002e1e:	9101      	str	r1, [sp, #4]
 8002e20:	4944      	ldr	r1, [pc, #272]	; (8002f34 <enqueue_payload+0x138>)
 8002e22:	9100      	str	r1, [sp, #0]
 8002e24:	f007 f9a6 	bl	800a174 <my_lx6_get_coordinates>
 8002e28:	1e03      	subs	r3, r0, #0
 8002e2a:	d100      	bne.n	8002e2e <enqueue_payload+0x32>
 8002e2c:	e075      	b.n	8002f1a <enqueue_payload+0x11e>
	{
		my_astro_write_coordinates ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 8002e2e:	4b3d      	ldr	r3, [pc, #244]	; (8002f24 <enqueue_payload+0x128>)
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	4b3d      	ldr	r3, [pc, #244]	; (8002f28 <enqueue_payload+0x12c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	0019      	movs	r1, r3
 8002e38:	0010      	movs	r0, r2
 8002e3a:	f007 f8fd 	bl	800a038 <my_astro_write_coordinates>

		// Update ts of last fix
		my_rtc_get_dt ( &rtc_d , &rtc_t ) ;
 8002e3e:	4a3e      	ldr	r2, [pc, #248]	; (8002f38 <enqueue_payload+0x13c>)
 8002e40:	4b3e      	ldr	r3, [pc, #248]	; (8002f3c <enqueue_payload+0x140>)
 8002e42:	0011      	movs	r1, r2
 8002e44:	0018      	movs	r0, r3
 8002e46:	f007 fbd5 	bl	800a5f4 <my_rtc_get_dt>
		last_fix_ts = my_conv_rtc2timestamp ( &rtc_d , &rtc_t ) ;
 8002e4a:	4a3b      	ldr	r2, [pc, #236]	; (8002f38 <enqueue_payload+0x13c>)
 8002e4c:	4b3b      	ldr	r3, [pc, #236]	; (8002f3c <enqueue_payload+0x140>)
 8002e4e:	0011      	movs	r1, r2
 8002e50:	0018      	movs	r0, r3
 8002e52:	f007 fcf9 	bl	800a848 <my_conv_rtc2timestamp>
 8002e56:	0002      	movs	r2, r0
 8002e58:	4b39      	ldr	r3, [pc, #228]	; (8002f40 <enqueue_payload+0x144>)
 8002e5a:	601a      	str	r2, [r3, #0]

		dbg_buff[0] = 0 ;
 8002e5c:	4b39      	ldr	r3, [pc, #228]	; (8002f44 <enqueue_payload+0x148>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	701a      	strb	r2, [r3, #0]
		sprintf ( dbg_buff , "Last fix timestap: %lu" , last_fix_ts ) ;
 8002e62:	4b37      	ldr	r3, [pc, #220]	; (8002f40 <enqueue_payload+0x144>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	4938      	ldr	r1, [pc, #224]	; (8002f48 <enqueue_payload+0x14c>)
 8002e68:	4b36      	ldr	r3, [pc, #216]	; (8002f44 <enqueue_payload+0x148>)
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f009 fc66 	bl	800c73c <sprintf>
		send_debug_logs ( dbg_buff ) ;
 8002e70:	4b34      	ldr	r3, [pc, #208]	; (8002f44 <enqueue_payload+0x148>)
 8002e72:	0018      	movs	r0, r3
 8002e74:	f000 f926 	bl	80030c4 <send_debug_logs>

		my_rtc_get_time_s ( rtc_dt_s ) ;
 8002e78:	4b34      	ldr	r3, [pc, #208]	; (8002f4c <enqueue_payload+0x150>)
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f007 fbd2 	bl	800a624 <my_rtc_get_time_s>
		send_debug_logs ( rtc_dt_s ) ;
 8002e80:	4b32      	ldr	r3, [pc, #200]	; (8002f4c <enqueue_payload+0x150>)
 8002e82:	0018      	movs	r0, r3
 8002e84:	f000 f91e 	bl	80030c4 <send_debug_logs>

		if ( nmea_fixed_pdop_d < 100.0 )
 8002e88:	4b2a      	ldr	r3, [pc, #168]	; (8002f34 <enqueue_payload+0x138>)
 8002e8a:	6818      	ldr	r0, [r3, #0]
 8002e8c:	6859      	ldr	r1, [r3, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	4b2f      	ldr	r3, [pc, #188]	; (8002f50 <enqueue_payload+0x154>)
 8002e92:	f7fd fadf 	bl	8000454 <__aeabi_dcmplt>
 8002e96:	1e03      	subs	r3, r0, #0
 8002e98:	d00a      	beq.n	8002eb0 <enqueue_payload+0xb4>
		{
			snprintf ( nmea_fixed_pdop_s , NMEA_FIX_PDOP_STRING_BUFF_SIZE , "%.1f", nmea_fixed_pdop_d );
 8002e9a:	4b26      	ldr	r3, [pc, #152]	; (8002f34 <enqueue_payload+0x138>)
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	492c      	ldr	r1, [pc, #176]	; (8002f54 <enqueue_payload+0x158>)
 8002ea2:	482d      	ldr	r0, [pc, #180]	; (8002f58 <enqueue_payload+0x15c>)
 8002ea4:	9200      	str	r2, [sp, #0]
 8002ea6:	9301      	str	r3, [sp, #4]
 8002ea8:	000a      	movs	r2, r1
 8002eaa:	2105      	movs	r1, #5
 8002eac:	f009 fc12 	bl	800c6d4 <snprintf>
		}

		agg_tim_gnss_seconds = agg_tim_gnss_seconds + tim_seconds  ;
 8002eb0:	4b2a      	ldr	r3, [pc, #168]	; (8002f5c <enqueue_payload+0x160>)
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	001a      	movs	r2, r3
 8002eb6:	4b2a      	ldr	r3, [pc, #168]	; (8002f60 <enqueue_payload+0x164>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	18d2      	adds	r2, r2, r3
 8002ebc:	4b28      	ldr	r3, [pc, #160]	; (8002f60 <enqueue_payload+0x164>)
 8002ebe:	601a      	str	r2, [r3, #0]

		sprintf ( payload , "%s,%d,%lu" , nmea_fixed_pdop_s , tim_seconds , agg_tim_gnss_seconds ) ;
 8002ec0:	4b26      	ldr	r3, [pc, #152]	; (8002f5c <enqueue_payload+0x160>)
 8002ec2:	881b      	ldrh	r3, [r3, #0]
 8002ec4:	001c      	movs	r4, r3
 8002ec6:	4b26      	ldr	r3, [pc, #152]	; (8002f60 <enqueue_payload+0x164>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a23      	ldr	r2, [pc, #140]	; (8002f58 <enqueue_payload+0x15c>)
 8002ecc:	4925      	ldr	r1, [pc, #148]	; (8002f64 <enqueue_payload+0x168>)
 8002ece:	4826      	ldr	r0, [pc, #152]	; (8002f68 <enqueue_payload+0x16c>)
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	0023      	movs	r3, r4
 8002ed4:	f009 fc32 	bl	800c73c <sprintf>
		sprintf ( astro_payload_log , "Astronode payload: %s" , payload ) ;
 8002ed8:	4a23      	ldr	r2, [pc, #140]	; (8002f68 <enqueue_payload+0x16c>)
 8002eda:	4924      	ldr	r1, [pc, #144]	; (8002f6c <enqueue_payload+0x170>)
 8002edc:	4b24      	ldr	r3, [pc, #144]	; (8002f70 <enqueue_payload+0x174>)
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f009 fc2c 	bl	800c73c <sprintf>
		send_debug_logs ( astro_payload_log ) ;
 8002ee4:	4b22      	ldr	r3, [pc, #136]	; (8002f70 <enqueue_payload+0x174>)
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	f000 f8ec 	bl	80030c4 <send_debug_logs>
		// astronode_send_pld_fr () ; // Don't clear entire payload queue because it's worth having a travel history, even if sent with delay.
		my_astro_add_payload_2_queue ( astro_payload_id_counter++ , payload ) ;
 8002eec:	4b21      	ldr	r3, [pc, #132]	; (8002f74 <enqueue_payload+0x178>)
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	1c5a      	adds	r2, r3, #1
 8002ef2:	b291      	uxth	r1, r2
 8002ef4:	4a1f      	ldr	r2, [pc, #124]	; (8002f74 <enqueue_payload+0x178>)
 8002ef6:	8011      	strh	r1, [r2, #0]
 8002ef8:	4a1b      	ldr	r2, [pc, #108]	; (8002f68 <enqueue_payload+0x16c>)
 8002efa:	0011      	movs	r1, r2
 8002efc:	0018      	movs	r0, r3
 8002efe:	f007 f833 	bl	8009f68 <my_astro_add_payload_2_queue>
		if ( astro_payload_id_counter == 0 ) // Avoid id = 0 to avoid collision with control test payload that is always 0
 8002f02:	4b1c      	ldr	r3, [pc, #112]	; (8002f74 <enqueue_payload+0x178>)
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d105      	bne.n	8002f16 <enqueue_payload+0x11a>
		{
			astro_payload_id_counter++ ;
 8002f0a:	4b1a      	ldr	r3, [pc, #104]	; (8002f74 <enqueue_payload+0x178>)
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	4b18      	ldr	r3, [pc, #96]	; (8002f74 <enqueue_payload+0x178>)
 8002f14:	801a      	strh	r2, [r3, #0]
		}
		return true ;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <enqueue_payload+0x120>
	}

	return false ;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b001      	add	sp, #4
 8002f22:	bd90      	pop	{r4, r7, pc}
 8002f24:	20000a10 	.word	0x20000a10
 8002f28:	20000a14 	.word	0x20000a14
 8002f2c:	20000010 	.word	0x20000010
 8002f30:	20000008 	.word	0x20000008
 8002f34:	20000018 	.word	0x20000018
 8002f38:	20000b98 	.word	0x20000b98
 8002f3c:	20000bac 	.word	0x20000bac
 8002f40:	20000a20 	.word	0x20000a20
 8002f44:	20000994 	.word	0x20000994
 8002f48:	08013478 	.word	0x08013478
 8002f4c:	200009f8 	.word	0x200009f8
 8002f50:	40590000 	.word	0x40590000
 8002f54:	08013490 	.word	0x08013490
 8002f58:	20000a18 	.word	0x20000a18
 8002f5c:	20000a24 	.word	0x20000a24
 8002f60:	20000a28 	.word	0x20000a28
 8002f64:	08013498 	.word	0x08013498
 8002f68:	20000a30 	.word	0x20000a30
 8002f6c:	080134a4 	.word	0x080134a4
 8002f70:	20000ad0 	.word	0x20000ad0
 8002f74:	20000020 	.word	0x20000020

08002f78 <enqueue_hello_payload>:

bool enqueue_hello_payload ( void )
{
 8002f78:	b5b0      	push	{r4, r5, r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af04      	add	r7, sp, #16
	bool r = false ;
 8002f7e:	230f      	movs	r3, #15
 8002f80:	18fb      	adds	r3, r7, r3
 8002f82:	2200      	movs	r2, #0
 8002f84:	701a      	strb	r2, [r3, #0]
	char* fv = "FIRMWARE_RELEASE_YEAR" ;
 8002f86:	4b3d      	ldr	r3, [pc, #244]	; (800307c <enqueue_hello_payload+0x104>)
 8002f88:	60bb      	str	r3, [r7, #8]

	int32_t astro_geo_wr_latitude = 0 , astro_geo_wr_longitude = 0 ;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	607b      	str	r3, [r7, #4]
 8002f8e:	2300      	movs	r3, #0
 8002f90:	603b      	str	r3, [r7, #0]

	if ( my_lx6_get_coordinates ( my_lx6_gnss_active_time_ths , nmea_pdop_ths , &nmea_fixed_pdop_d , &astro_geo_wr_latitude , &astro_geo_wr_longitude ) )
 8002f92:	4b3b      	ldr	r3, [pc, #236]	; (8003080 <enqueue_hello_payload+0x108>)
 8002f94:	8818      	ldrh	r0, [r3, #0]
 8002f96:	4b3b      	ldr	r3, [pc, #236]	; (8003084 <enqueue_hello_payload+0x10c>)
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	0039      	movs	r1, r7
 8002f9e:	9102      	str	r1, [sp, #8]
 8002fa0:	1d39      	adds	r1, r7, #4
 8002fa2:	9101      	str	r1, [sp, #4]
 8002fa4:	4938      	ldr	r1, [pc, #224]	; (8003088 <enqueue_hello_payload+0x110>)
 8002fa6:	9100      	str	r1, [sp, #0]
 8002fa8:	f007 f8e4 	bl	800a174 <my_lx6_get_coordinates>
 8002fac:	1e03      	subs	r3, r0, #0
 8002fae:	d05d      	beq.n	800306c <enqueue_hello_payload+0xf4>
	{
		my_astro_write_coordinates ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	0011      	movs	r1, r2
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f007 f83e 	bl	800a038 <my_astro_write_coordinates>

		// Update ts of last fix
		my_rtc_get_dt ( &rtc_d , &rtc_t ) ;
 8002fbc:	4a33      	ldr	r2, [pc, #204]	; (800308c <enqueue_hello_payload+0x114>)
 8002fbe:	4b34      	ldr	r3, [pc, #208]	; (8003090 <enqueue_hello_payload+0x118>)
 8002fc0:	0011      	movs	r1, r2
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f007 fb16 	bl	800a5f4 <my_rtc_get_dt>
		last_fix_ts = my_conv_rtc2timestamp ( &rtc_d , &rtc_t ) ;
 8002fc8:	4a30      	ldr	r2, [pc, #192]	; (800308c <enqueue_hello_payload+0x114>)
 8002fca:	4b31      	ldr	r3, [pc, #196]	; (8003090 <enqueue_hello_payload+0x118>)
 8002fcc:	0011      	movs	r1, r2
 8002fce:	0018      	movs	r0, r3
 8002fd0:	f007 fc3a 	bl	800a848 <my_conv_rtc2timestamp>
 8002fd4:	0002      	movs	r2, r0
 8002fd6:	4b2f      	ldr	r3, [pc, #188]	; (8003094 <enqueue_hello_payload+0x11c>)
 8002fd8:	601a      	str	r2, [r3, #0]

		dbg_buff[0] = 0 ;
 8002fda:	4b2f      	ldr	r3, [pc, #188]	; (8003098 <enqueue_hello_payload+0x120>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	701a      	strb	r2, [r3, #0]
		sprintf ( dbg_buff , "Hello payload and first fix timestap: %lu" , last_fix_ts ) ;
 8002fe0:	4b2c      	ldr	r3, [pc, #176]	; (8003094 <enqueue_hello_payload+0x11c>)
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	492d      	ldr	r1, [pc, #180]	; (800309c <enqueue_hello_payload+0x124>)
 8002fe6:	4b2c      	ldr	r3, [pc, #176]	; (8003098 <enqueue_hello_payload+0x120>)
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f009 fba7 	bl	800c73c <sprintf>
		send_debug_logs ( dbg_buff ) ;
 8002fee:	4b2a      	ldr	r3, [pc, #168]	; (8003098 <enqueue_hello_payload+0x120>)
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f000 f867 	bl	80030c4 <send_debug_logs>

		my_rtc_get_time_s ( rtc_dt_s ) ;
 8002ff6:	4b2a      	ldr	r3, [pc, #168]	; (80030a0 <enqueue_hello_payload+0x128>)
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f007 fb13 	bl	800a624 <my_rtc_get_time_s>
		send_debug_logs ( rtc_dt_s ) ;
 8002ffe:	4b28      	ldr	r3, [pc, #160]	; (80030a0 <enqueue_hello_payload+0x128>)
 8003000:	0018      	movs	r0, r3
 8003002:	f000 f85f 	bl	80030c4 <send_debug_logs>

		snprintf ( nmea_fixed_pdop_s , NMEA_FIX_PDOP_STRING_BUFF_SIZE , "%.1f", nmea_fixed_pdop_d );
 8003006:	4b20      	ldr	r3, [pc, #128]	; (8003088 <enqueue_hello_payload+0x110>)
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	4925      	ldr	r1, [pc, #148]	; (80030a4 <enqueue_hello_payload+0x12c>)
 800300e:	4826      	ldr	r0, [pc, #152]	; (80030a8 <enqueue_hello_payload+0x130>)
 8003010:	9200      	str	r2, [sp, #0]
 8003012:	9301      	str	r3, [sp, #4]
 8003014:	000a      	movs	r2, r1
 8003016:	2105      	movs	r1, #5
 8003018:	f009 fb5c 	bl	800c6d4 <snprintf>

		agg_tim_gnss_seconds = agg_tim_gnss_seconds + tim_seconds  ;
 800301c:	4b23      	ldr	r3, [pc, #140]	; (80030ac <enqueue_hello_payload+0x134>)
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	001a      	movs	r2, r3
 8003022:	4b23      	ldr	r3, [pc, #140]	; (80030b0 <enqueue_hello_payload+0x138>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	18d2      	adds	r2, r2, r3
 8003028:	4b21      	ldr	r3, [pc, #132]	; (80030b0 <enqueue_hello_payload+0x138>)
 800302a:	601a      	str	r2, [r3, #0]

		sprintf ( payload , "%s,%d,%lu;%s" , nmea_fixed_pdop_s , tim_seconds , agg_tim_gnss_seconds , fv ) ;
 800302c:	4b1f      	ldr	r3, [pc, #124]	; (80030ac <enqueue_hello_payload+0x134>)
 800302e:	881b      	ldrh	r3, [r3, #0]
 8003030:	001d      	movs	r5, r3
 8003032:	4b1f      	ldr	r3, [pc, #124]	; (80030b0 <enqueue_hello_payload+0x138>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4c1c      	ldr	r4, [pc, #112]	; (80030a8 <enqueue_hello_payload+0x130>)
 8003038:	491e      	ldr	r1, [pc, #120]	; (80030b4 <enqueue_hello_payload+0x13c>)
 800303a:	481f      	ldr	r0, [pc, #124]	; (80030b8 <enqueue_hello_payload+0x140>)
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	9201      	str	r2, [sp, #4]
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	002b      	movs	r3, r5
 8003044:	0022      	movs	r2, r4
 8003046:	f009 fb79 	bl	800c73c <sprintf>
		sprintf ( astro_payload_log , "Astronode payload: %s" , payload ) ;
 800304a:	4a1b      	ldr	r2, [pc, #108]	; (80030b8 <enqueue_hello_payload+0x140>)
 800304c:	491b      	ldr	r1, [pc, #108]	; (80030bc <enqueue_hello_payload+0x144>)
 800304e:	4b1c      	ldr	r3, [pc, #112]	; (80030c0 <enqueue_hello_payload+0x148>)
 8003050:	0018      	movs	r0, r3
 8003052:	f009 fb73 	bl	800c73c <sprintf>
		send_debug_logs ( astro_payload_log ) ;
 8003056:	4b1a      	ldr	r3, [pc, #104]	; (80030c0 <enqueue_hello_payload+0x148>)
 8003058:	0018      	movs	r0, r3
 800305a:	f000 f833 	bl	80030c4 <send_debug_logs>
		// astronode_send_pld_fr () ; // Don't clear entire payload queue because it's worth having a travel history, even if sent with delay.
		my_astro_add_payload_2_queue ( 0 , payload ) ;
 800305e:	4b16      	ldr	r3, [pc, #88]	; (80030b8 <enqueue_hello_payload+0x140>)
 8003060:	0019      	movs	r1, r3
 8003062:	2000      	movs	r0, #0
 8003064:	f006 ff80 	bl	8009f68 <my_astro_add_payload_2_queue>

		return true ;
 8003068:	2301      	movs	r3, #1
 800306a:	e002      	b.n	8003072 <enqueue_hello_payload+0xfa>
	}

	return r ;
 800306c:	230f      	movs	r3, #15
 800306e:	18fb      	adds	r3, r7, r3
 8003070:	781b      	ldrb	r3, [r3, #0]
}
 8003072:	0018      	movs	r0, r3
 8003074:	46bd      	mov	sp, r7
 8003076:	b004      	add	sp, #16
 8003078:	bdb0      	pop	{r4, r5, r7, pc}
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	080134bc 	.word	0x080134bc
 8003080:	20000010 	.word	0x20000010
 8003084:	20000008 	.word	0x20000008
 8003088:	20000018 	.word	0x20000018
 800308c:	20000b98 	.word	0x20000b98
 8003090:	20000bac 	.word	0x20000bac
 8003094:	20000a20 	.word	0x20000a20
 8003098:	20000994 	.word	0x20000994
 800309c:	080134d4 	.word	0x080134d4
 80030a0:	200009f8 	.word	0x200009f8
 80030a4:	08013490 	.word	0x08013490
 80030a8:	20000a18 	.word	0x20000a18
 80030ac:	20000a24 	.word	0x20000a24
 80030b0:	20000a28 	.word	0x20000a28
 80030b4:	08013500 	.word	0x08013500
 80030b8:	20000a30 	.word	0x20000a30
 80030bc:	080134a4 	.word	0x080134a4
 80030c0:	20000ad0 	.word	0x20000ad0

080030c4 <send_debug_logs>:

void send_debug_logs ( char* p_tx_buffer )
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	0018      	movs	r0, r3
 80030d0:	f7fd f818 	bl	8000104 <strlen>
 80030d4:	0003      	movs	r3, r0
 80030d6:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2bfa      	cmp	r3, #250	; 0xfa
 80030dc:	d908      	bls.n	80030f0 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 80030de:	23fa      	movs	r3, #250	; 0xfa
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	490d      	ldr	r1, [pc, #52]	; (8003118 <send_debug_logs+0x54>)
 80030e4:	480d      	ldr	r0, [pc, #52]	; (800311c <send_debug_logs+0x58>)
 80030e6:	222a      	movs	r2, #42	; 0x2a
 80030e8:	f004 f816 	bl	8007118 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 80030ec:	23fa      	movs	r3, #250	; 0xfa
 80030ee:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	23fa      	movs	r3, #250	; 0xfa
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	4808      	ldr	r0, [pc, #32]	; (800311c <send_debug_logs+0x58>)
 80030fc:	f004 f80c 	bl	8007118 <HAL_UART_Transmit>
    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8003100:	23fa      	movs	r3, #250	; 0xfa
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4906      	ldr	r1, [pc, #24]	; (8003120 <send_debug_logs+0x5c>)
 8003106:	4805      	ldr	r0, [pc, #20]	; (800311c <send_debug_logs+0x58>)
 8003108:	2201      	movs	r2, #1
 800310a:	f004 f805 	bl	8007118 <HAL_UART_Transmit>
}
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	46bd      	mov	sp, r7
 8003112:	b004      	add	sp, #16
 8003114:	bd80      	pop	{r7, pc}
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	08013510 	.word	0x08013510
 800311c:	2000086c 	.word	0x2000086c
 8003120:	0801353c 	.word	0x0801353c

08003124 <reset_astronode>:
void reset_astronode ( void )
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 8003128:	2380      	movs	r3, #128	; 0x80
 800312a:	0119      	lsls	r1, r3, #4
 800312c:	23a0      	movs	r3, #160	; 0xa0
 800312e:	05db      	lsls	r3, r3, #23
 8003130:	2201      	movs	r2, #1
 8003132:	0018      	movs	r0, r3
 8003134:	f001 f8c5 	bl	80042c2 <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 8003138:	2001      	movs	r0, #1
 800313a:	f000 fd3d 	bl	8003bb8 <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 800313e:	2380      	movs	r3, #128	; 0x80
 8003140:	0119      	lsls	r1, r3, #4
 8003142:	23a0      	movs	r3, #160	; 0xa0
 8003144:	05db      	lsls	r3, r3, #23
 8003146:	2200      	movs	r2, #0
 8003148:	0018      	movs	r0, r3
 800314a:	f001 f8ba 	bl	80042c2 <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 800314e:	20fa      	movs	r0, #250	; 0xfa
 8003150:	f000 fd32 	bl	8003bb8 <HAL_Delay>
}
 8003154:	46c0      	nop			; (mov r8, r8)
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
	...

0800315c <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 8003166:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <send_astronode_request+0x34>)
 8003168:	0018      	movs	r0, r3
 800316a:	f7ff ffab 	bl	80030c4 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	0018      	movs	r0, r3
 8003172:	f7ff ffa7 	bl	80030c4 <send_debug_logs>

    HAL_UART_Transmit ( HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	b29a      	uxth	r2, r3
 800317a:	23fa      	movs	r3, #250	; 0xfa
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	4804      	ldr	r0, [pc, #16]	; (8003194 <send_astronode_request+0x38>)
 8003182:	f003 ffc9 	bl	8007118 <HAL_UART_Transmit>
}
 8003186:	46c0      	nop			; (mov r8, r8)
 8003188:	46bd      	mov	sp, r7
 800318a:	b002      	add	sp, #8
 800318c:	bd80      	pop	{r7, pc}
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	08013540 	.word	0x08013540
 8003194:	200007d8 	.word	0x200007d8

08003198 <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	4806      	ldr	r0, [pc, #24]	; (80031bc <is_astronode_character_received+0x24>)
 80031a4:	2364      	movs	r3, #100	; 0x64
 80031a6:	2201      	movs	r2, #1
 80031a8:	f004 f852 	bl	8007250 <HAL_UART_Receive>
 80031ac:	0003      	movs	r3, r0
 80031ae:	425a      	negs	r2, r3
 80031b0:	4153      	adcs	r3, r2
 80031b2:	b2db      	uxtb	r3, r3
}
 80031b4:	0018      	movs	r0, r3
 80031b6:	46bd      	mov	sp, r7
 80031b8:	b002      	add	sp, #8
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	200007d8 	.word	0x200007d8

080031c0 <is_evt_pin_high>:
bool is_evt_pin_high ( void )
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
	return ( HAL_GPIO_ReadPin ( GPIOA , ASTRO_EVT_Pin ) == GPIO_PIN_SET ? true : false);
 80031c4:	2380      	movs	r3, #128	; 0x80
 80031c6:	015a      	lsls	r2, r3, #5
 80031c8:	23a0      	movs	r3, #160	; 0xa0
 80031ca:	05db      	lsls	r3, r3, #23
 80031cc:	0011      	movs	r1, r2
 80031ce:	0018      	movs	r0, r3
 80031d0:	f001 f85a 	bl	8004288 <HAL_GPIO_ReadPin>
 80031d4:	0003      	movs	r3, r0
 80031d6:	3b01      	subs	r3, #1
 80031d8:	425a      	negs	r2, r3
 80031da:	4153      	adcs	r3, r2
 80031dc:	b2db      	uxtb	r3, r3
}
 80031de:	0018      	movs	r0, r3
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <get_systick>:

uint32_t get_systick ( void )
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 80031e8:	f000 fcdc 	bl	8003ba4 <HAL_GetTick>
 80031ec:	0003      	movs	r3, r0
}
 80031ee:	0018      	movs	r0, r3
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	000a      	movs	r2, r1
 80031fe:	1cbb      	adds	r3, r7, #2
 8003200:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 8003202:	f7ff ffef 	bl	80031e4 <get_systick>
 8003206:	0002      	movs	r2, r0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	1cba      	adds	r2, r7, #2
 800320e:	8812      	ldrh	r2, [r2, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	419b      	sbcs	r3, r3
 8003214:	425b      	negs	r3, r3
 8003216:	b2db      	uxtb	r3, r3
}
 8003218:	0018      	movs	r0, r3
 800321a:	46bd      	mov	sp, r7
 800321c:	b002      	add	sp, #8
 800321e:	bd80      	pop	{r7, pc}

08003220 <my_lx6_on>:
void my_ldg_off ( void )
{
	HAL_GPIO_WritePin ( GPIOA , LDG_Pin , GPIO_PIN_RESET ) ;
}
void my_lx6_on ( void )
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOC , L86_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8003224:	2380      	movs	r3, #128	; 0x80
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	4808      	ldr	r0, [pc, #32]	; (800324c <my_lx6_on+0x2c>)
 800322a:	2201      	movs	r2, #1
 800322c:	0019      	movs	r1, r3
 800322e:	f001 f848 	bl	80042c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_SET ) ;
 8003232:	2380      	movs	r3, #128	; 0x80
 8003234:	015b      	lsls	r3, r3, #5
 8003236:	4805      	ldr	r0, [pc, #20]	; (800324c <my_lx6_on+0x2c>)
 8003238:	2201      	movs	r2, #1
 800323a:	0019      	movs	r1, r3
 800323c:	f001 f841 	bl	80042c2 <HAL_GPIO_WritePin>
	MX_USART3_UART_Init () ;
 8003240:	f7ff fce4 	bl	8002c0c <MX_USART3_UART_Init>
}
 8003244:	46c0      	nop			; (mov r8, r8)
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	50000800 	.word	0x50000800

08003250 <my_lx6_off>:
void my_lx6_off ( void )
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOC , L86_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 8003254:	2380      	movs	r3, #128	; 0x80
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	4809      	ldr	r0, [pc, #36]	; (8003280 <my_lx6_off+0x30>)
 800325a:	2200      	movs	r2, #0
 800325c:	0019      	movs	r1, r3
 800325e:	f001 f830 	bl	80042c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_RESET ) ;
 8003262:	2380      	movs	r3, #128	; 0x80
 8003264:	015b      	lsls	r3, r3, #5
 8003266:	4806      	ldr	r0, [pc, #24]	; (8003280 <my_lx6_off+0x30>)
 8003268:	2200      	movs	r2, #0
 800326a:	0019      	movs	r1, r3
 800326c:	f001 f829 	bl	80042c2 <HAL_GPIO_WritePin>
	HAL_UART_DeInit ( HUART_Lx6 ) ;
 8003270:	4b04      	ldr	r3, [pc, #16]	; (8003284 <my_lx6_off+0x34>)
 8003272:	0018      	movs	r0, r3
 8003274:	f003 ff10 	bl	8007098 <HAL_UART_DeInit>
}
 8003278:	46c0      	nop			; (mov r8, r8)
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	50000800 	.word	0x50000800
 8003284:	20000900 	.word	0x20000900

08003288 <my_lis2dw12_platform_write>:
int32_t my_lis2dw12_platform_write ( void *handle , uint8_t reg , const uint8_t *bufp , uint16_t len )
{
 8003288:	b5b0      	push	{r4, r5, r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	0008      	movs	r0, r1
 8003292:	607a      	str	r2, [r7, #4]
 8003294:	0019      	movs	r1, r3
 8003296:	240b      	movs	r4, #11
 8003298:	193b      	adds	r3, r7, r4
 800329a:	1c02      	adds	r2, r0, #0
 800329c:	701a      	strb	r2, [r3, #0]
 800329e:	2508      	movs	r5, #8
 80032a0:	197b      	adds	r3, r7, r5
 80032a2:	1c0a      	adds	r2, r1, #0
 80032a4:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin	( LIS_SPI1_CS_GPIO_Port , LIS_SPI1_CS_Pin , GPIO_PIN_RESET ) ;
 80032a6:	2380      	movs	r3, #128	; 0x80
 80032a8:	01db      	lsls	r3, r3, #7
 80032aa:	4812      	ldr	r0, [pc, #72]	; (80032f4 <my_lis2dw12_platform_write+0x6c>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	0019      	movs	r1, r3
 80032b0:	f001 f807 	bl	80042c2 <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 80032b4:	2014      	movs	r0, #20
 80032b6:	f000 fc7f 	bl	8003bb8 <HAL_Delay>
	HAL_SPI_Transmit	( handle , &reg , 1 , 1000 ) ;
 80032ba:	23fa      	movs	r3, #250	; 0xfa
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	1939      	adds	r1, r7, r4
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f002 fd0e 	bl	8005ce4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit	( handle , (uint8_t*) bufp , len , 1000 ) ;
 80032c8:	23fa      	movs	r3, #250	; 0xfa
 80032ca:	009c      	lsls	r4, r3, #2
 80032cc:	197b      	adds	r3, r7, r5
 80032ce:	881a      	ldrh	r2, [r3, #0]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	0023      	movs	r3, r4
 80032d6:	f002 fd05 	bl	8005ce4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin	( LIS_SPI1_CS_GPIO_Port , LIS_SPI1_CS_Pin , GPIO_PIN_SET) ;
 80032da:	2380      	movs	r3, #128	; 0x80
 80032dc:	01db      	lsls	r3, r3, #7
 80032de:	4805      	ldr	r0, [pc, #20]	; (80032f4 <my_lis2dw12_platform_write+0x6c>)
 80032e0:	2201      	movs	r2, #1
 80032e2:	0019      	movs	r1, r3
 80032e4:	f000 ffed 	bl	80042c2 <HAL_GPIO_WritePin>

	return 0;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	0018      	movs	r0, r3
 80032ec:	46bd      	mov	sp, r7
 80032ee:	b004      	add	sp, #16
 80032f0:	bdb0      	pop	{r4, r5, r7, pc}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	50000400 	.word	0x50000400

080032f8 <my_lis2dw12_platform_read>:
int32_t my_lis2dw12_platform_read ( void *handle , uint8_t reg , uint8_t *bufp , uint16_t len )
{
 80032f8:	b5b0      	push	{r4, r5, r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	0008      	movs	r0, r1
 8003302:	607a      	str	r2, [r7, #4]
 8003304:	0019      	movs	r1, r3
 8003306:	240b      	movs	r4, #11
 8003308:	193b      	adds	r3, r7, r4
 800330a:	1c02      	adds	r2, r0, #0
 800330c:	701a      	strb	r2, [r3, #0]
 800330e:	2508      	movs	r5, #8
 8003310:	197b      	adds	r3, r7, r5
 8003312:	1c0a      	adds	r2, r1, #0
 8003314:	801a      	strh	r2, [r3, #0]
	reg |= 0x80;
 8003316:	193b      	adds	r3, r7, r4
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	2280      	movs	r2, #128	; 0x80
 800331c:	4252      	negs	r2, r2
 800331e:	4313      	orrs	r3, r2
 8003320:	b2da      	uxtb	r2, r3
 8003322:	193b      	adds	r3, r7, r4
 8003324:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin ( LIS_SPI1_CS_GPIO_Port , LIS_SPI1_CS_Pin , GPIO_PIN_RESET) ;
 8003326:	2380      	movs	r3, #128	; 0x80
 8003328:	01db      	lsls	r3, r3, #7
 800332a:	4812      	ldr	r0, [pc, #72]	; (8003374 <my_lis2dw12_platform_read+0x7c>)
 800332c:	2200      	movs	r2, #0
 800332e:	0019      	movs	r1, r3
 8003330:	f000 ffc7 	bl	80042c2 <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 8003334:	2014      	movs	r0, #20
 8003336:	f000 fc3f 	bl	8003bb8 <HAL_Delay>
	HAL_SPI_Transmit ( handle , &reg , 1 , 1000 ) ;
 800333a:	23fa      	movs	r3, #250	; 0xfa
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	1939      	adds	r1, r7, r4
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	2201      	movs	r2, #1
 8003344:	f002 fcce 	bl	8005ce4 <HAL_SPI_Transmit>
	HAL_SPI_Receive ( handle , bufp , len , 1000 ) ;
 8003348:	23fa      	movs	r3, #250	; 0xfa
 800334a:	009c      	lsls	r4, r3, #2
 800334c:	197b      	adds	r3, r7, r5
 800334e:	881a      	ldrh	r2, [r3, #0]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	0023      	movs	r3, r4
 8003356:	f002 fe1d 	bl	8005f94 <HAL_SPI_Receive>
	HAL_GPIO_WritePin ( LIS_SPI1_CS_GPIO_Port , LIS_SPI1_CS_Pin , GPIO_PIN_SET) ;
 800335a:	2380      	movs	r3, #128	; 0x80
 800335c:	01db      	lsls	r3, r3, #7
 800335e:	4805      	ldr	r0, [pc, #20]	; (8003374 <my_lis2dw12_platform_read+0x7c>)
 8003360:	2201      	movs	r2, #1
 8003362:	0019      	movs	r1, r3
 8003364:	f000 ffad 	bl	80042c2 <HAL_GPIO_WritePin>

	return 0;
 8003368:	2300      	movs	r3, #0
}
 800336a:	0018      	movs	r0, r3
 800336c:	46bd      	mov	sp, r7
 800336e:	b004      	add	sp, #16
 8003370:	bdb0      	pop	{r4, r5, r7, pc}
 8003372:	46c0      	nop			; (mov r8, r8)
 8003374:	50000400 	.word	0x50000400

08003378 <is_system_initialized>:
bool is_system_initialized ( void )
{
 8003378:	b590      	push	{r4, r7, lr}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
	uint16_t yyyy ;

	uint32_t commn_ts = astronode_send_rtc_rr () ;
 800337e:	f005 fae7 	bl	8008950 <astronode_send_rtc_rr>
 8003382:	0003      	movs	r3, r0
 8003384:	607b      	str	r3, [r7, #4]

	yyyy = my_rtc_get_time_s ( rtc_dt_s ) ;
 8003386:	1cbc      	adds	r4, r7, #2
 8003388:	4b0c      	ldr	r3, [pc, #48]	; (80033bc <is_system_initialized+0x44>)
 800338a:	0018      	movs	r0, r3
 800338c:	f007 f94a 	bl	800a624 <my_rtc_get_time_s>
 8003390:	0003      	movs	r3, r0
 8003392:	8023      	strh	r3, [r4, #0]
	send_debug_logs ( rtc_dt_s ) ;
 8003394:	4b09      	ldr	r3, [pc, #36]	; (80033bc <is_system_initialized+0x44>)
 8003396:	0018      	movs	r0, r3
 8003398:	f7ff fe94 	bl	80030c4 <send_debug_logs>
	if ( yyyy >= FIRMWARE_RELEASE_YEAR || commn_ts != 0 )
 800339c:	1cbb      	adds	r3, r7, #2
 800339e:	881b      	ldrh	r3, [r3, #0]
 80033a0:	4a07      	ldr	r2, [pc, #28]	; (80033c0 <is_system_initialized+0x48>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d802      	bhi.n	80033ac <is_system_initialized+0x34>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <is_system_initialized+0x38>
	{
		return true ;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e000      	b.n	80033b2 <is_system_initialized+0x3a>
	}
	return false ;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	0018      	movs	r0, r3
 80033b4:	46bd      	mov	sp, r7
 80033b6:	b003      	add	sp, #12
 80033b8:	bd90      	pop	{r4, r7, pc}
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	200009f8 	.word	0x200009f8
 80033c0:	000007e6 	.word	0x000007e6

080033c4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a0a      	ldr	r2, [pc, #40]	; (80033fc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d10d      	bne.n	80033f2 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		tim_seconds++ ;
 80033d6:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	3301      	adds	r3, #1
 80033dc:	b29a      	uxth	r2, r3
 80033de:	4b08      	ldr	r3, [pc, #32]	; (8003400 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80033e0:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > TIM_SECONDS_THS_SYSTEM_RESET )
 80033e2:	4b07      	ldr	r3, [pc, #28]	; (8003400 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80033e4:	881a      	ldrh	r2, [r3, #0]
 80033e6:	23e1      	movs	r3, #225	; 0xe1
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d901      	bls.n	80033f2 <HAL_TIM_PeriodElapsedCallback+0x2e>
		  {
			  HAL_NVIC_SystemReset () ;
 80033ee:	f000 fd06 	bl	8003dfe <HAL_NVIC_SystemReset>
		  }
	}
}
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	46bd      	mov	sp, r7
 80033f6:	b002      	add	sp, #8
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	46c0      	nop			; (mov r8, r8)
 80033fc:	40001000 	.word	0x40001000
 8003400:	20000a24 	.word	0x20000a24

08003404 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback ( uint16_t GPIO_Pin )
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	0002      	movs	r2, r0
 800340c:	1dbb      	adds	r3, r7, #6
 800340e:	801a      	strh	r2, [r3, #0]
	if ( GPIO_Pin == 0x100 ) // LIS_INT1_EXTI8_Pin = 0x100
 8003410:	1dbb      	adds	r3, r7, #6
 8003412:	881a      	ldrh	r2, [r3, #0]
 8003414:	2380      	movs	r3, #128	; 0x80
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	429a      	cmp	r2, r3
 800341a:	d102      	bne.n	8003422 <HAL_GPIO_EXTI_Rising_Callback+0x1e>
	{
		is_acc_int1_wkup_flag = true ;
 800341c:	4b07      	ldr	r3, [pc, #28]	; (800343c <HAL_GPIO_EXTI_Rising_Callback+0x38>)
 800341e:	2201      	movs	r2, #1
 8003420:	701a      	strb	r2, [r3, #0]
		sprintf ( dbg_buff , "INT on GPIO_Pin %04x detected!\n" , GPIO_Pin ) ;
		send_debug_logs ( dbg_buff ) ;
		*/
	}
	//zamiast poniższego może lepiej wrócić do pierwotnego przeglądania GPIO w trybie input bez przerwania
	if ( GPIO_Pin == 0x1000 ) // ASTRO_EVT_Pin = 0x1000
 8003422:	1dbb      	adds	r3, r7, #6
 8003424:	881a      	ldrh	r2, [r3, #0]
 8003426:	2380      	movs	r3, #128	; 0x80
 8003428:	015b      	lsls	r3, r3, #5
 800342a:	429a      	cmp	r2, r3
 800342c:	d102      	bne.n	8003434 <HAL_GPIO_EXTI_Rising_Callback+0x30>
	{
		is_astro_evt_flag = true ;
 800342e:	4b04      	ldr	r3, [pc, #16]	; (8003440 <HAL_GPIO_EXTI_Rising_Callback+0x3c>)
 8003430:	2201      	movs	r2, #1
 8003432:	701a      	strb	r2, [r3, #0]
	}
}
 8003434:	46c0      	nop			; (mov r8, r8)
 8003436:	46bd      	mov	sp, r7
 8003438:	b002      	add	sp, #8
 800343a:	bd80      	pop	{r7, pc}
 800343c:	20000bb0 	.word	0x20000bb0
 8003440:	20000bb1 	.word	0x20000bb1

08003444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003448:	b672      	cpsid	i
}
 800344a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800344c:	e7fe      	b.n	800344c <Error_Handler+0x8>
	...

08003450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003456:	4b0f      	ldr	r3, [pc, #60]	; (8003494 <HAL_MspInit+0x44>)
 8003458:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800345a:	4b0e      	ldr	r3, [pc, #56]	; (8003494 <HAL_MspInit+0x44>)
 800345c:	2101      	movs	r1, #1
 800345e:	430a      	orrs	r2, r1
 8003460:	641a      	str	r2, [r3, #64]	; 0x40
 8003462:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <HAL_MspInit+0x44>)
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	2201      	movs	r2, #1
 8003468:	4013      	ands	r3, r2
 800346a:	607b      	str	r3, [r7, #4]
 800346c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800346e:	4b09      	ldr	r3, [pc, #36]	; (8003494 <HAL_MspInit+0x44>)
 8003470:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003472:	4b08      	ldr	r3, [pc, #32]	; (8003494 <HAL_MspInit+0x44>)
 8003474:	2180      	movs	r1, #128	; 0x80
 8003476:	0549      	lsls	r1, r1, #21
 8003478:	430a      	orrs	r2, r1
 800347a:	63da      	str	r2, [r3, #60]	; 0x3c
 800347c:	4b05      	ldr	r3, [pc, #20]	; (8003494 <HAL_MspInit+0x44>)
 800347e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003480:	2380      	movs	r3, #128	; 0x80
 8003482:	055b      	lsls	r3, r3, #21
 8003484:	4013      	ands	r3, r2
 8003486:	603b      	str	r3, [r7, #0]
 8003488:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800348a:	46c0      	nop			; (mov r8, r8)
 800348c:	46bd      	mov	sp, r7
 800348e:	b002      	add	sp, #8
 8003490:	bd80      	pop	{r7, pc}
 8003492:	46c0      	nop			; (mov r8, r8)
 8003494:	40021000 	.word	0x40021000

08003498 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003498:	b590      	push	{r4, r7, lr}
 800349a:	b091      	sub	sp, #68	; 0x44
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034a0:	240c      	movs	r4, #12
 80034a2:	193b      	adds	r3, r7, r4
 80034a4:	0018      	movs	r0, r3
 80034a6:	2334      	movs	r3, #52	; 0x34
 80034a8:	001a      	movs	r2, r3
 80034aa:	2100      	movs	r1, #0
 80034ac:	f009 f9dc 	bl	800c868 <memset>
  if(hrtc->Instance==RTC)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a15      	ldr	r2, [pc, #84]	; (800350c <HAL_RTC_MspInit+0x74>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d124      	bne.n	8003504 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80034ba:	193b      	adds	r3, r7, r4
 80034bc:	2280      	movs	r2, #128	; 0x80
 80034be:	0292      	lsls	r2, r2, #10
 80034c0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80034c2:	193b      	adds	r3, r7, r4
 80034c4:	2280      	movs	r2, #128	; 0x80
 80034c6:	0092      	lsls	r2, r2, #2
 80034c8:	631a      	str	r2, [r3, #48]	; 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034ca:	193b      	adds	r3, r7, r4
 80034cc:	0018      	movs	r0, r3
 80034ce:	f001 fc91 	bl	8004df4 <HAL_RCCEx_PeriphCLKConfig>
 80034d2:	1e03      	subs	r3, r0, #0
 80034d4:	d001      	beq.n	80034da <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80034d6:	f7ff ffb5 	bl	8003444 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80034da:	4b0d      	ldr	r3, [pc, #52]	; (8003510 <HAL_RTC_MspInit+0x78>)
 80034dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034de:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <HAL_RTC_MspInit+0x78>)
 80034e0:	2180      	movs	r1, #128	; 0x80
 80034e2:	0209      	lsls	r1, r1, #8
 80034e4:	430a      	orrs	r2, r1
 80034e6:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80034e8:	4b09      	ldr	r3, [pc, #36]	; (8003510 <HAL_RTC_MspInit+0x78>)
 80034ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034ec:	4b08      	ldr	r3, [pc, #32]	; (8003510 <HAL_RTC_MspInit+0x78>)
 80034ee:	2180      	movs	r1, #128	; 0x80
 80034f0:	00c9      	lsls	r1, r1, #3
 80034f2:	430a      	orrs	r2, r1
 80034f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80034f6:	4b06      	ldr	r3, [pc, #24]	; (8003510 <HAL_RTC_MspInit+0x78>)
 80034f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034fa:	2380      	movs	r3, #128	; 0x80
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	4013      	ands	r3, r2
 8003500:	60bb      	str	r3, [r7, #8]
 8003502:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003504:	46c0      	nop			; (mov r8, r8)
 8003506:	46bd      	mov	sp, r7
 8003508:	b011      	add	sp, #68	; 0x44
 800350a:	bd90      	pop	{r4, r7, pc}
 800350c:	40002800 	.word	0x40002800
 8003510:	40021000 	.word	0x40021000

08003514 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003514:	b590      	push	{r4, r7, lr}
 8003516:	b08b      	sub	sp, #44	; 0x2c
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800351c:	2414      	movs	r4, #20
 800351e:	193b      	adds	r3, r7, r4
 8003520:	0018      	movs	r0, r3
 8003522:	2314      	movs	r3, #20
 8003524:	001a      	movs	r2, r3
 8003526:	2100      	movs	r1, #0
 8003528:	f009 f99e 	bl	800c868 <memset>
  if(hspi->Instance==SPI1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a1b      	ldr	r2, [pc, #108]	; (80035a0 <HAL_SPI_MspInit+0x8c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d12f      	bne.n	8003596 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003536:	4b1b      	ldr	r3, [pc, #108]	; (80035a4 <HAL_SPI_MspInit+0x90>)
 8003538:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800353a:	4b1a      	ldr	r3, [pc, #104]	; (80035a4 <HAL_SPI_MspInit+0x90>)
 800353c:	2180      	movs	r1, #128	; 0x80
 800353e:	0149      	lsls	r1, r1, #5
 8003540:	430a      	orrs	r2, r1
 8003542:	641a      	str	r2, [r3, #64]	; 0x40
 8003544:	4b17      	ldr	r3, [pc, #92]	; (80035a4 <HAL_SPI_MspInit+0x90>)
 8003546:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003548:	2380      	movs	r3, #128	; 0x80
 800354a:	015b      	lsls	r3, r3, #5
 800354c:	4013      	ands	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
 8003550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003552:	4b14      	ldr	r3, [pc, #80]	; (80035a4 <HAL_SPI_MspInit+0x90>)
 8003554:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003556:	4b13      	ldr	r3, [pc, #76]	; (80035a4 <HAL_SPI_MspInit+0x90>)
 8003558:	2102      	movs	r1, #2
 800355a:	430a      	orrs	r2, r1
 800355c:	635a      	str	r2, [r3, #52]	; 0x34
 800355e:	4b11      	ldr	r3, [pc, #68]	; (80035a4 <HAL_SPI_MspInit+0x90>)
 8003560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003562:	2202      	movs	r2, #2
 8003564:	4013      	ands	r3, r2
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LIS_SPI1_SCK_Pin|LIS_SPI1_MISO_Pin|LIS_SPI1_MOSI_Pin;
 800356a:	0021      	movs	r1, r4
 800356c:	187b      	adds	r3, r7, r1
 800356e:	2238      	movs	r2, #56	; 0x38
 8003570:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003572:	187b      	adds	r3, r7, r1
 8003574:	2202      	movs	r2, #2
 8003576:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003578:	187b      	adds	r3, r7, r1
 800357a:	2200      	movs	r2, #0
 800357c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800357e:	187b      	adds	r3, r7, r1
 8003580:	2200      	movs	r2, #0
 8003582:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003584:	187b      	adds	r3, r7, r1
 8003586:	2200      	movs	r2, #0
 8003588:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800358a:	187b      	adds	r3, r7, r1
 800358c:	4a06      	ldr	r2, [pc, #24]	; (80035a8 <HAL_SPI_MspInit+0x94>)
 800358e:	0019      	movs	r1, r3
 8003590:	0010      	movs	r0, r2
 8003592:	f000 fc45 	bl	8003e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003596:	46c0      	nop			; (mov r8, r8)
 8003598:	46bd      	mov	sp, r7
 800359a:	b00b      	add	sp, #44	; 0x2c
 800359c:	bd90      	pop	{r4, r7, pc}
 800359e:	46c0      	nop			; (mov r8, r8)
 80035a0:	40013000 	.word	0x40013000
 80035a4:	40021000 	.word	0x40021000
 80035a8:	50000400 	.word	0x50000400

080035ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a0d      	ldr	r2, [pc, #52]	; (80035f0 <HAL_TIM_Base_MspInit+0x44>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d113      	bne.n	80035e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80035be:	4b0d      	ldr	r3, [pc, #52]	; (80035f4 <HAL_TIM_Base_MspInit+0x48>)
 80035c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035c2:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <HAL_TIM_Base_MspInit+0x48>)
 80035c4:	2110      	movs	r1, #16
 80035c6:	430a      	orrs	r2, r1
 80035c8:	63da      	str	r2, [r3, #60]	; 0x3c
 80035ca:	4b0a      	ldr	r3, [pc, #40]	; (80035f4 <HAL_TIM_Base_MspInit+0x48>)
 80035cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ce:	2210      	movs	r2, #16
 80035d0:	4013      	ands	r3, r2
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 80035d6:	2200      	movs	r2, #0
 80035d8:	2100      	movs	r1, #0
 80035da:	2011      	movs	r0, #17
 80035dc:	f000 fbea 	bl	8003db4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 80035e0:	2011      	movs	r0, #17
 80035e2:	f000 fbfc 	bl	8003dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	46bd      	mov	sp, r7
 80035ea:	b004      	add	sp, #16
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	40001000 	.word	0x40001000
 80035f4:	40021000 	.word	0x40021000

080035f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035f8:	b590      	push	{r4, r7, lr}
 80035fa:	b09b      	sub	sp, #108	; 0x6c
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003600:	2354      	movs	r3, #84	; 0x54
 8003602:	18fb      	adds	r3, r7, r3
 8003604:	0018      	movs	r0, r3
 8003606:	2314      	movs	r3, #20
 8003608:	001a      	movs	r2, r3
 800360a:	2100      	movs	r1, #0
 800360c:	f009 f92c 	bl	800c868 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003610:	2420      	movs	r4, #32
 8003612:	193b      	adds	r3, r7, r4
 8003614:	0018      	movs	r0, r3
 8003616:	2334      	movs	r3, #52	; 0x34
 8003618:	001a      	movs	r2, r3
 800361a:	2100      	movs	r1, #0
 800361c:	f009 f924 	bl	800c868 <memset>
  if(huart->Instance==USART1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a61      	ldr	r2, [pc, #388]	; (80037ac <HAL_UART_MspInit+0x1b4>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d140      	bne.n	80036ac <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800362a:	193b      	adds	r3, r7, r4
 800362c:	2201      	movs	r2, #1
 800362e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003630:	193b      	adds	r3, r7, r4
 8003632:	2200      	movs	r2, #0
 8003634:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003636:	193b      	adds	r3, r7, r4
 8003638:	0018      	movs	r0, r3
 800363a:	f001 fbdb 	bl	8004df4 <HAL_RCCEx_PeriphCLKConfig>
 800363e:	1e03      	subs	r3, r0, #0
 8003640:	d001      	beq.n	8003646 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003642:	f7ff feff 	bl	8003444 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003646:	4b5a      	ldr	r3, [pc, #360]	; (80037b0 <HAL_UART_MspInit+0x1b8>)
 8003648:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800364a:	4b59      	ldr	r3, [pc, #356]	; (80037b0 <HAL_UART_MspInit+0x1b8>)
 800364c:	2180      	movs	r1, #128	; 0x80
 800364e:	01c9      	lsls	r1, r1, #7
 8003650:	430a      	orrs	r2, r1
 8003652:	641a      	str	r2, [r3, #64]	; 0x40
 8003654:	4b56      	ldr	r3, [pc, #344]	; (80037b0 <HAL_UART_MspInit+0x1b8>)
 8003656:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003658:	2380      	movs	r3, #128	; 0x80
 800365a:	01db      	lsls	r3, r3, #7
 800365c:	4013      	ands	r3, r2
 800365e:	61fb      	str	r3, [r7, #28]
 8003660:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003662:	4b53      	ldr	r3, [pc, #332]	; (80037b0 <HAL_UART_MspInit+0x1b8>)
 8003664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003666:	4b52      	ldr	r3, [pc, #328]	; (80037b0 <HAL_UART_MspInit+0x1b8>)
 8003668:	2101      	movs	r1, #1
 800366a:	430a      	orrs	r2, r1
 800366c:	635a      	str	r2, [r3, #52]	; 0x34
 800366e:	4b50      	ldr	r3, [pc, #320]	; (80037b0 <HAL_UART_MspInit+0x1b8>)
 8003670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003672:	2201      	movs	r2, #1
 8003674:	4013      	ands	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
 8003678:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ASTRO_TXD_Pin|ASTRO_RXD_Pin;
 800367a:	2154      	movs	r1, #84	; 0x54
 800367c:	187b      	adds	r3, r7, r1
 800367e:	22c0      	movs	r2, #192	; 0xc0
 8003680:	00d2      	lsls	r2, r2, #3
 8003682:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003684:	187b      	adds	r3, r7, r1
 8003686:	2202      	movs	r2, #2
 8003688:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368a:	187b      	adds	r3, r7, r1
 800368c:	2200      	movs	r2, #0
 800368e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003690:	187b      	adds	r3, r7, r1
 8003692:	2200      	movs	r2, #0
 8003694:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003696:	187b      	adds	r3, r7, r1
 8003698:	2201      	movs	r2, #1
 800369a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800369c:	187a      	adds	r2, r7, r1
 800369e:	23a0      	movs	r3, #160	; 0xa0
 80036a0:	05db      	lsls	r3, r3, #23
 80036a2:	0011      	movs	r1, r2
 80036a4:	0018      	movs	r0, r3
 80036a6:	f000 fbbb 	bl	8003e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80036aa:	e07b      	b.n	80037a4 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART2)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a40      	ldr	r2, [pc, #256]	; (80037b4 <HAL_UART_MspInit+0x1bc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d140      	bne.n	8003738 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80036b6:	2120      	movs	r1, #32
 80036b8:	187b      	adds	r3, r7, r1
 80036ba:	2202      	movs	r2, #2
 80036bc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80036be:	187b      	adds	r3, r7, r1
 80036c0:	2200      	movs	r2, #0
 80036c2:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036c4:	187b      	adds	r3, r7, r1
 80036c6:	0018      	movs	r0, r3
 80036c8:	f001 fb94 	bl	8004df4 <HAL_RCCEx_PeriphCLKConfig>
 80036cc:	1e03      	subs	r3, r0, #0
 80036ce:	d001      	beq.n	80036d4 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 80036d0:	f7ff feb8 	bl	8003444 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80036d4:	4b36      	ldr	r3, [pc, #216]	; (80037b0 <HAL_UART_MspInit+0x1b8>)
 80036d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036d8:	4b35      	ldr	r3, [pc, #212]	; (80037b0 <HAL_UART_MspInit+0x1b8>)
 80036da:	2180      	movs	r1, #128	; 0x80
 80036dc:	0289      	lsls	r1, r1, #10
 80036de:	430a      	orrs	r2, r1
 80036e0:	63da      	str	r2, [r3, #60]	; 0x3c
 80036e2:	4b33      	ldr	r3, [pc, #204]	; (80037b0 <HAL_UART_MspInit+0x1b8>)
 80036e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036e6:	2380      	movs	r3, #128	; 0x80
 80036e8:	029b      	lsls	r3, r3, #10
 80036ea:	4013      	ands	r3, r2
 80036ec:	617b      	str	r3, [r7, #20]
 80036ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036f0:	4b2f      	ldr	r3, [pc, #188]	; (80037b0 <HAL_UART_MspInit+0x1b8>)
 80036f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036f4:	4b2e      	ldr	r3, [pc, #184]	; (80037b0 <HAL_UART_MspInit+0x1b8>)
 80036f6:	2101      	movs	r1, #1
 80036f8:	430a      	orrs	r2, r1
 80036fa:	635a      	str	r2, [r3, #52]	; 0x34
 80036fc:	4b2c      	ldr	r3, [pc, #176]	; (80037b0 <HAL_UART_MspInit+0x1b8>)
 80036fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003700:	2201      	movs	r2, #1
 8003702:	4013      	ands	r3, r2
 8003704:	613b      	str	r3, [r7, #16]
 8003706:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DBG_TXD_Pin|DBG_RXD_Pin;
 8003708:	2154      	movs	r1, #84	; 0x54
 800370a:	187b      	adds	r3, r7, r1
 800370c:	220c      	movs	r2, #12
 800370e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003710:	187b      	adds	r3, r7, r1
 8003712:	2202      	movs	r2, #2
 8003714:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003716:	187b      	adds	r3, r7, r1
 8003718:	2201      	movs	r2, #1
 800371a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800371c:	187b      	adds	r3, r7, r1
 800371e:	2200      	movs	r2, #0
 8003720:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003722:	187b      	adds	r3, r7, r1
 8003724:	2201      	movs	r2, #1
 8003726:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003728:	187a      	adds	r2, r7, r1
 800372a:	23a0      	movs	r3, #160	; 0xa0
 800372c:	05db      	lsls	r3, r3, #23
 800372e:	0011      	movs	r1, r2
 8003730:	0018      	movs	r0, r3
 8003732:	f000 fb75 	bl	8003e20 <HAL_GPIO_Init>
}
 8003736:	e035      	b.n	80037a4 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART3)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a1e      	ldr	r2, [pc, #120]	; (80037b8 <HAL_UART_MspInit+0x1c0>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d130      	bne.n	80037a4 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003742:	4b1b      	ldr	r3, [pc, #108]	; (80037b0 <HAL_UART_MspInit+0x1b8>)
 8003744:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003746:	4b1a      	ldr	r3, [pc, #104]	; (80037b0 <HAL_UART_MspInit+0x1b8>)
 8003748:	2180      	movs	r1, #128	; 0x80
 800374a:	02c9      	lsls	r1, r1, #11
 800374c:	430a      	orrs	r2, r1
 800374e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003750:	4b17      	ldr	r3, [pc, #92]	; (80037b0 <HAL_UART_MspInit+0x1b8>)
 8003752:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003754:	2380      	movs	r3, #128	; 0x80
 8003756:	02db      	lsls	r3, r3, #11
 8003758:	4013      	ands	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800375e:	4b14      	ldr	r3, [pc, #80]	; (80037b0 <HAL_UART_MspInit+0x1b8>)
 8003760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003762:	4b13      	ldr	r3, [pc, #76]	; (80037b0 <HAL_UART_MspInit+0x1b8>)
 8003764:	2104      	movs	r1, #4
 8003766:	430a      	orrs	r2, r1
 8003768:	635a      	str	r2, [r3, #52]	; 0x34
 800376a:	4b11      	ldr	r3, [pc, #68]	; (80037b0 <HAL_UART_MspInit+0x1b8>)
 800376c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800376e:	2204      	movs	r2, #4
 8003770:	4013      	ands	r3, r2
 8003772:	60bb      	str	r3, [r7, #8]
 8003774:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = L86_RXD_Pin|L86_TXD_Pin;
 8003776:	2154      	movs	r1, #84	; 0x54
 8003778:	187b      	adds	r3, r7, r1
 800377a:	22c0      	movs	r2, #192	; 0xc0
 800377c:	0112      	lsls	r2, r2, #4
 800377e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003780:	187b      	adds	r3, r7, r1
 8003782:	2202      	movs	r2, #2
 8003784:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003786:	187b      	adds	r3, r7, r1
 8003788:	2200      	movs	r2, #0
 800378a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800378c:	187b      	adds	r3, r7, r1
 800378e:	2200      	movs	r2, #0
 8003790:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 8003792:	187b      	adds	r3, r7, r1
 8003794:	2200      	movs	r2, #0
 8003796:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003798:	187b      	adds	r3, r7, r1
 800379a:	4a08      	ldr	r2, [pc, #32]	; (80037bc <HAL_UART_MspInit+0x1c4>)
 800379c:	0019      	movs	r1, r3
 800379e:	0010      	movs	r0, r2
 80037a0:	f000 fb3e 	bl	8003e20 <HAL_GPIO_Init>
}
 80037a4:	46c0      	nop			; (mov r8, r8)
 80037a6:	46bd      	mov	sp, r7
 80037a8:	b01b      	add	sp, #108	; 0x6c
 80037aa:	bd90      	pop	{r4, r7, pc}
 80037ac:	40013800 	.word	0x40013800
 80037b0:	40021000 	.word	0x40021000
 80037b4:	40004400 	.word	0x40004400
 80037b8:	40004800 	.word	0x40004800
 80037bc:	50000800 	.word	0x50000800

080037c0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a1c      	ldr	r2, [pc, #112]	; (8003840 <HAL_UART_MspDeInit+0x80>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d10e      	bne.n	80037f0 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80037d2:	4b1c      	ldr	r3, [pc, #112]	; (8003844 <HAL_UART_MspDeInit+0x84>)
 80037d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037d6:	4b1b      	ldr	r3, [pc, #108]	; (8003844 <HAL_UART_MspDeInit+0x84>)
 80037d8:	491b      	ldr	r1, [pc, #108]	; (8003848 <HAL_UART_MspDeInit+0x88>)
 80037da:	400a      	ands	r2, r1
 80037dc:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, ASTRO_TXD_Pin|ASTRO_RXD_Pin);
 80037de:	23c0      	movs	r3, #192	; 0xc0
 80037e0:	00da      	lsls	r2, r3, #3
 80037e2:	23a0      	movs	r3, #160	; 0xa0
 80037e4:	05db      	lsls	r3, r3, #23
 80037e6:	0011      	movs	r1, r2
 80037e8:	0018      	movs	r0, r3
 80037ea:	f000 fc7d 	bl	80040e8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 80037ee:	e023      	b.n	8003838 <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART2)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a15      	ldr	r2, [pc, #84]	; (800384c <HAL_UART_MspDeInit+0x8c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d10c      	bne.n	8003814 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 80037fa:	4b12      	ldr	r3, [pc, #72]	; (8003844 <HAL_UART_MspDeInit+0x84>)
 80037fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037fe:	4b11      	ldr	r3, [pc, #68]	; (8003844 <HAL_UART_MspDeInit+0x84>)
 8003800:	4913      	ldr	r1, [pc, #76]	; (8003850 <HAL_UART_MspDeInit+0x90>)
 8003802:	400a      	ands	r2, r1
 8003804:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TXD_Pin|DBG_RXD_Pin);
 8003806:	23a0      	movs	r3, #160	; 0xa0
 8003808:	05db      	lsls	r3, r3, #23
 800380a:	210c      	movs	r1, #12
 800380c:	0018      	movs	r0, r3
 800380e:	f000 fc6b 	bl	80040e8 <HAL_GPIO_DeInit>
}
 8003812:	e011      	b.n	8003838 <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART3)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a0e      	ldr	r2, [pc, #56]	; (8003854 <HAL_UART_MspDeInit+0x94>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d10c      	bne.n	8003838 <HAL_UART_MspDeInit+0x78>
    __HAL_RCC_USART3_CLK_DISABLE();
 800381e:	4b09      	ldr	r3, [pc, #36]	; (8003844 <HAL_UART_MspDeInit+0x84>)
 8003820:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003822:	4b08      	ldr	r3, [pc, #32]	; (8003844 <HAL_UART_MspDeInit+0x84>)
 8003824:	490c      	ldr	r1, [pc, #48]	; (8003858 <HAL_UART_MspDeInit+0x98>)
 8003826:	400a      	ands	r2, r1
 8003828:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOC, L86_RXD_Pin|L86_TXD_Pin);
 800382a:	23c0      	movs	r3, #192	; 0xc0
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	4a0b      	ldr	r2, [pc, #44]	; (800385c <HAL_UART_MspDeInit+0x9c>)
 8003830:	0019      	movs	r1, r3
 8003832:	0010      	movs	r0, r2
 8003834:	f000 fc58 	bl	80040e8 <HAL_GPIO_DeInit>
}
 8003838:	46c0      	nop			; (mov r8, r8)
 800383a:	46bd      	mov	sp, r7
 800383c:	b002      	add	sp, #8
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40013800 	.word	0x40013800
 8003844:	40021000 	.word	0x40021000
 8003848:	ffffbfff 	.word	0xffffbfff
 800384c:	40004400 	.word	0x40004400
 8003850:	fffdffff 	.word	0xfffdffff
 8003854:	40004800 	.word	0x40004800
 8003858:	fffbffff 	.word	0xfffbffff
 800385c:	50000800 	.word	0x50000800

08003860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003864:	e7fe      	b.n	8003864 <NMI_Handler+0x4>

08003866 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800386a:	e7fe      	b.n	800386a <HardFault_Handler+0x4>

0800386c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003870:	46c0      	nop			; (mov r8, r8)
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800387a:	46c0      	nop			; (mov r8, r8)
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003884:	f000 f97c 	bl	8003b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003888:	46c0      	nop			; (mov r8, r8)
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIS_INT1_EXTI8_Pin);
 8003892:	2380      	movs	r3, #128	; 0x80
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	0018      	movs	r0, r3
 8003898:	f000 fd30 	bl	80042fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LIS_INT2_EXTI9_Pin);
 800389c:	2380      	movs	r3, #128	; 0x80
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	0018      	movs	r0, r3
 80038a2:	f000 fd2b 	bl	80042fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ASTRO_EVT_Pin);
 80038a6:	2380      	movs	r3, #128	; 0x80
 80038a8:	015b      	lsls	r3, r3, #5
 80038aa:	0018      	movs	r0, r3
 80038ac:	f000 fd26 	bl	80042fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80038b0:	46c0      	nop			; (mov r8, r8)
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
	...

080038b8 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80038bc:	4b03      	ldr	r3, [pc, #12]	; (80038cc <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 80038be:	0018      	movs	r0, r3
 80038c0:	f003 f93c 	bl	8006b3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 80038c4:	46c0      	nop			; (mov r8, r8)
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	2000078c 	.word	0x2000078c

080038d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  return 1;
 80038d4:	2301      	movs	r3, #1
}
 80038d6:	0018      	movs	r0, r3
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <_kill>:

int _kill(int pid, int sig)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80038e6:	f009 f86b 	bl	800c9c0 <__errno>
 80038ea:	0003      	movs	r3, r0
 80038ec:	2216      	movs	r2, #22
 80038ee:	601a      	str	r2, [r3, #0]
  return -1;
 80038f0:	2301      	movs	r3, #1
 80038f2:	425b      	negs	r3, r3
}
 80038f4:	0018      	movs	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	b002      	add	sp, #8
 80038fa:	bd80      	pop	{r7, pc}

080038fc <_exit>:

void _exit (int status)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003904:	2301      	movs	r3, #1
 8003906:	425a      	negs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	0011      	movs	r1, r2
 800390c:	0018      	movs	r0, r3
 800390e:	f7ff ffe5 	bl	80038dc <_kill>
  while (1) {}    /* Make sure we hang here */
 8003912:	e7fe      	b.n	8003912 <_exit+0x16>

08003914 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003920:	2300      	movs	r3, #0
 8003922:	617b      	str	r3, [r7, #20]
 8003924:	e00a      	b.n	800393c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003926:	e000      	b.n	800392a <_read+0x16>
 8003928:	bf00      	nop
 800392a:	0001      	movs	r1, r0
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	1c5a      	adds	r2, r3, #1
 8003930:	60ba      	str	r2, [r7, #8]
 8003932:	b2ca      	uxtb	r2, r1
 8003934:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	3301      	adds	r3, #1
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	429a      	cmp	r2, r3
 8003942:	dbf0      	blt.n	8003926 <_read+0x12>
  }

  return len;
 8003944:	687b      	ldr	r3, [r7, #4]
}
 8003946:	0018      	movs	r0, r3
 8003948:	46bd      	mov	sp, r7
 800394a:	b006      	add	sp, #24
 800394c:	bd80      	pop	{r7, pc}

0800394e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b086      	sub	sp, #24
 8003952:	af00      	add	r7, sp, #0
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800395a:	2300      	movs	r3, #0
 800395c:	617b      	str	r3, [r7, #20]
 800395e:	e009      	b.n	8003974 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	60ba      	str	r2, [r7, #8]
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	0018      	movs	r0, r3
 800396a:	e000      	b.n	800396e <_write+0x20>
 800396c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	3301      	adds	r3, #1
 8003972:	617b      	str	r3, [r7, #20]
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	429a      	cmp	r2, r3
 800397a:	dbf1      	blt.n	8003960 <_write+0x12>
  }
  return len;
 800397c:	687b      	ldr	r3, [r7, #4]
}
 800397e:	0018      	movs	r0, r3
 8003980:	46bd      	mov	sp, r7
 8003982:	b006      	add	sp, #24
 8003984:	bd80      	pop	{r7, pc}

08003986 <_close>:

int _close(int file)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b082      	sub	sp, #8
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800398e:	2301      	movs	r3, #1
 8003990:	425b      	negs	r3, r3
}
 8003992:	0018      	movs	r0, r3
 8003994:	46bd      	mov	sp, r7
 8003996:	b002      	add	sp, #8
 8003998:	bd80      	pop	{r7, pc}

0800399a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b082      	sub	sp, #8
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	2280      	movs	r2, #128	; 0x80
 80039a8:	0192      	lsls	r2, r2, #6
 80039aa:	605a      	str	r2, [r3, #4]
  return 0;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	0018      	movs	r0, r3
 80039b0:	46bd      	mov	sp, r7
 80039b2:	b002      	add	sp, #8
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <_isatty>:

int _isatty(int file)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b082      	sub	sp, #8
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80039be:	2301      	movs	r3, #1
}
 80039c0:	0018      	movs	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b002      	add	sp, #8
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	0018      	movs	r0, r3
 80039d8:	46bd      	mov	sp, r7
 80039da:	b004      	add	sp, #16
 80039dc:	bd80      	pop	{r7, pc}
	...

080039e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039e8:	4a14      	ldr	r2, [pc, #80]	; (8003a3c <_sbrk+0x5c>)
 80039ea:	4b15      	ldr	r3, [pc, #84]	; (8003a40 <_sbrk+0x60>)
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039f4:	4b13      	ldr	r3, [pc, #76]	; (8003a44 <_sbrk+0x64>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d102      	bne.n	8003a02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039fc:	4b11      	ldr	r3, [pc, #68]	; (8003a44 <_sbrk+0x64>)
 80039fe:	4a12      	ldr	r2, [pc, #72]	; (8003a48 <_sbrk+0x68>)
 8003a00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a02:	4b10      	ldr	r3, [pc, #64]	; (8003a44 <_sbrk+0x64>)
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	18d3      	adds	r3, r2, r3
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d207      	bcs.n	8003a20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a10:	f008 ffd6 	bl	800c9c0 <__errno>
 8003a14:	0003      	movs	r3, r0
 8003a16:	220c      	movs	r2, #12
 8003a18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	425b      	negs	r3, r3
 8003a1e:	e009      	b.n	8003a34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a20:	4b08      	ldr	r3, [pc, #32]	; (8003a44 <_sbrk+0x64>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a26:	4b07      	ldr	r3, [pc, #28]	; (8003a44 <_sbrk+0x64>)
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	18d2      	adds	r2, r2, r3
 8003a2e:	4b05      	ldr	r3, [pc, #20]	; (8003a44 <_sbrk+0x64>)
 8003a30:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003a32:	68fb      	ldr	r3, [r7, #12]
}
 8003a34:	0018      	movs	r0, r3
 8003a36:	46bd      	mov	sp, r7
 8003a38:	b006      	add	sp, #24
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	20009000 	.word	0x20009000
 8003a40:	00000400 	.word	0x00000400
 8003a44:	20000bb4 	.word	0x20000bb4
 8003a48:	20000ed0 	.word	0x20000ed0

08003a4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a50:	46c0      	nop			; (mov r8, r8)
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
	...

08003a58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003a58:	480d      	ldr	r0, [pc, #52]	; (8003a90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003a5a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003a5c:	f7ff fff6 	bl	8003a4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a60:	480c      	ldr	r0, [pc, #48]	; (8003a94 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a62:	490d      	ldr	r1, [pc, #52]	; (8003a98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a64:	4a0d      	ldr	r2, [pc, #52]	; (8003a9c <LoopForever+0xe>)
  movs r3, #0
 8003a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a68:	e002      	b.n	8003a70 <LoopCopyDataInit>

08003a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a6e:	3304      	adds	r3, #4

08003a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a74:	d3f9      	bcc.n	8003a6a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a76:	4a0a      	ldr	r2, [pc, #40]	; (8003aa0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a78:	4c0a      	ldr	r4, [pc, #40]	; (8003aa4 <LoopForever+0x16>)
  movs r3, #0
 8003a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a7c:	e001      	b.n	8003a82 <LoopFillZerobss>

08003a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a80:	3204      	adds	r2, #4

08003a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a84:	d3fb      	bcc.n	8003a7e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003a86:	f008 ffa1 	bl	800c9cc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003a8a:	f7fe fd8d 	bl	80025a8 <main>

08003a8e <LoopForever>:

LoopForever:
  b LoopForever
 8003a8e:	e7fe      	b.n	8003a8e <LoopForever>
  ldr   r0, =_estack
 8003a90:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8003a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a98:	200006e0 	.word	0x200006e0
  ldr r2, =_sidata
 8003a9c:	080152f8 	.word	0x080152f8
  ldr r2, =_sbss
 8003aa0:	200006e0 	.word	0x200006e0
  ldr r4, =_ebss
 8003aa4:	20000ecc 	.word	0x20000ecc

08003aa8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003aa8:	e7fe      	b.n	8003aa8 <ADC1_COMP_IRQHandler>
	...

08003aac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003ab2:	1dfb      	adds	r3, r7, #7
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ab8:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <HAL_Init+0x3c>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	4b0a      	ldr	r3, [pc, #40]	; (8003ae8 <HAL_Init+0x3c>)
 8003abe:	2180      	movs	r1, #128	; 0x80
 8003ac0:	0049      	lsls	r1, r1, #1
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ac6:	2000      	movs	r0, #0
 8003ac8:	f000 f810 	bl	8003aec <HAL_InitTick>
 8003acc:	1e03      	subs	r3, r0, #0
 8003ace:	d003      	beq.n	8003ad8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003ad0:	1dfb      	adds	r3, r7, #7
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	701a      	strb	r2, [r3, #0]
 8003ad6:	e001      	b.n	8003adc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003ad8:	f7ff fcba 	bl	8003450 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003adc:	1dfb      	adds	r3, r7, #7
 8003ade:	781b      	ldrb	r3, [r3, #0]
}
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	b002      	add	sp, #8
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40022000 	.word	0x40022000

08003aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003aec:	b590      	push	{r4, r7, lr}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003af4:	230f      	movs	r3, #15
 8003af6:	18fb      	adds	r3, r7, r3
 8003af8:	2200      	movs	r2, #0
 8003afa:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003afc:	4b1d      	ldr	r3, [pc, #116]	; (8003b74 <HAL_InitTick+0x88>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d02b      	beq.n	8003b5c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003b04:	4b1c      	ldr	r3, [pc, #112]	; (8003b78 <HAL_InitTick+0x8c>)
 8003b06:	681c      	ldr	r4, [r3, #0]
 8003b08:	4b1a      	ldr	r3, [pc, #104]	; (8003b74 <HAL_InitTick+0x88>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	0019      	movs	r1, r3
 8003b0e:	23fa      	movs	r3, #250	; 0xfa
 8003b10:	0098      	lsls	r0, r3, #2
 8003b12:	f7fc fb13 	bl	800013c <__udivsi3>
 8003b16:	0003      	movs	r3, r0
 8003b18:	0019      	movs	r1, r3
 8003b1a:	0020      	movs	r0, r4
 8003b1c:	f7fc fb0e 	bl	800013c <__udivsi3>
 8003b20:	0003      	movs	r3, r0
 8003b22:	0018      	movs	r0, r3
 8003b24:	f000 f96f 	bl	8003e06 <HAL_SYSTICK_Config>
 8003b28:	1e03      	subs	r3, r0, #0
 8003b2a:	d112      	bne.n	8003b52 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b03      	cmp	r3, #3
 8003b30:	d80a      	bhi.n	8003b48 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	2301      	movs	r3, #1
 8003b36:	425b      	negs	r3, r3
 8003b38:	2200      	movs	r2, #0
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f000 f93a 	bl	8003db4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b40:	4b0e      	ldr	r3, [pc, #56]	; (8003b7c <HAL_InitTick+0x90>)
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	e00d      	b.n	8003b64 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003b48:	230f      	movs	r3, #15
 8003b4a:	18fb      	adds	r3, r7, r3
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	701a      	strb	r2, [r3, #0]
 8003b50:	e008      	b.n	8003b64 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003b52:	230f      	movs	r3, #15
 8003b54:	18fb      	adds	r3, r7, r3
 8003b56:	2201      	movs	r2, #1
 8003b58:	701a      	strb	r2, [r3, #0]
 8003b5a:	e003      	b.n	8003b64 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003b5c:	230f      	movs	r3, #15
 8003b5e:	18fb      	adds	r3, r7, r3
 8003b60:	2201      	movs	r2, #1
 8003b62:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003b64:	230f      	movs	r3, #15
 8003b66:	18fb      	adds	r3, r7, r3
 8003b68:	781b      	ldrb	r3, [r3, #0]
}
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	b005      	add	sp, #20
 8003b70:	bd90      	pop	{r4, r7, pc}
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	2000002c 	.word	0x2000002c
 8003b78:	20000024 	.word	0x20000024
 8003b7c:	20000028 	.word	0x20000028

08003b80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b84:	4b05      	ldr	r3, [pc, #20]	; (8003b9c <HAL_IncTick+0x1c>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	001a      	movs	r2, r3
 8003b8a:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <HAL_IncTick+0x20>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	18d2      	adds	r2, r2, r3
 8003b90:	4b03      	ldr	r3, [pc, #12]	; (8003ba0 <HAL_IncTick+0x20>)
 8003b92:	601a      	str	r2, [r3, #0]
}
 8003b94:	46c0      	nop			; (mov r8, r8)
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	2000002c 	.word	0x2000002c
 8003ba0:	20000bb8 	.word	0x20000bb8

08003ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8003ba8:	4b02      	ldr	r3, [pc, #8]	; (8003bb4 <HAL_GetTick+0x10>)
 8003baa:	681b      	ldr	r3, [r3, #0]
}
 8003bac:	0018      	movs	r0, r3
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	20000bb8 	.word	0x20000bb8

08003bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bc0:	f7ff fff0 	bl	8003ba4 <HAL_GetTick>
 8003bc4:	0003      	movs	r3, r0
 8003bc6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	d005      	beq.n	8003bde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bd2:	4b0a      	ldr	r3, [pc, #40]	; (8003bfc <HAL_Delay+0x44>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	001a      	movs	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	189b      	adds	r3, r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003bde:	46c0      	nop			; (mov r8, r8)
 8003be0:	f7ff ffe0 	bl	8003ba4 <HAL_GetTick>
 8003be4:	0002      	movs	r2, r0
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d8f7      	bhi.n	8003be0 <HAL_Delay+0x28>
  {
  }
}
 8003bf0:	46c0      	nop			; (mov r8, r8)
 8003bf2:	46c0      	nop			; (mov r8, r8)
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	b004      	add	sp, #16
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	2000002c 	.word	0x2000002c

08003c00 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8003c04:	4b04      	ldr	r3, [pc, #16]	; (8003c18 <HAL_SuspendTick+0x18>)
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	4b03      	ldr	r3, [pc, #12]	; (8003c18 <HAL_SuspendTick+0x18>)
 8003c0a:	2102      	movs	r1, #2
 8003c0c:	438a      	bics	r2, r1
 8003c0e:	601a      	str	r2, [r3, #0]
}
 8003c10:	46c0      	nop			; (mov r8, r8)
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	46c0      	nop			; (mov r8, r8)
 8003c18:	e000e010 	.word	0xe000e010

08003c1c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003c20:	4b04      	ldr	r3, [pc, #16]	; (8003c34 <HAL_ResumeTick+0x18>)
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	4b03      	ldr	r3, [pc, #12]	; (8003c34 <HAL_ResumeTick+0x18>)
 8003c26:	2102      	movs	r1, #2
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	601a      	str	r2, [r3, #0]
}
 8003c2c:	46c0      	nop			; (mov r8, r8)
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	46c0      	nop			; (mov r8, r8)
 8003c34:	e000e010 	.word	0xe000e010

08003c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	0002      	movs	r2, r0
 8003c40:	1dfb      	adds	r3, r7, #7
 8003c42:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003c44:	1dfb      	adds	r3, r7, #7
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	2b7f      	cmp	r3, #127	; 0x7f
 8003c4a:	d809      	bhi.n	8003c60 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c4c:	1dfb      	adds	r3, r7, #7
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	001a      	movs	r2, r3
 8003c52:	231f      	movs	r3, #31
 8003c54:	401a      	ands	r2, r3
 8003c56:	4b04      	ldr	r3, [pc, #16]	; (8003c68 <__NVIC_EnableIRQ+0x30>)
 8003c58:	2101      	movs	r1, #1
 8003c5a:	4091      	lsls	r1, r2
 8003c5c:	000a      	movs	r2, r1
 8003c5e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003c60:	46c0      	nop			; (mov r8, r8)
 8003c62:	46bd      	mov	sp, r7
 8003c64:	b002      	add	sp, #8
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	e000e100 	.word	0xe000e100

08003c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c6c:	b590      	push	{r4, r7, lr}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	0002      	movs	r2, r0
 8003c74:	6039      	str	r1, [r7, #0]
 8003c76:	1dfb      	adds	r3, r7, #7
 8003c78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003c7a:	1dfb      	adds	r3, r7, #7
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	2b7f      	cmp	r3, #127	; 0x7f
 8003c80:	d828      	bhi.n	8003cd4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c82:	4a2f      	ldr	r2, [pc, #188]	; (8003d40 <__NVIC_SetPriority+0xd4>)
 8003c84:	1dfb      	adds	r3, r7, #7
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	b25b      	sxtb	r3, r3
 8003c8a:	089b      	lsrs	r3, r3, #2
 8003c8c:	33c0      	adds	r3, #192	; 0xc0
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	589b      	ldr	r3, [r3, r2]
 8003c92:	1dfa      	adds	r2, r7, #7
 8003c94:	7812      	ldrb	r2, [r2, #0]
 8003c96:	0011      	movs	r1, r2
 8003c98:	2203      	movs	r2, #3
 8003c9a:	400a      	ands	r2, r1
 8003c9c:	00d2      	lsls	r2, r2, #3
 8003c9e:	21ff      	movs	r1, #255	; 0xff
 8003ca0:	4091      	lsls	r1, r2
 8003ca2:	000a      	movs	r2, r1
 8003ca4:	43d2      	mvns	r2, r2
 8003ca6:	401a      	ands	r2, r3
 8003ca8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	019b      	lsls	r3, r3, #6
 8003cae:	22ff      	movs	r2, #255	; 0xff
 8003cb0:	401a      	ands	r2, r3
 8003cb2:	1dfb      	adds	r3, r7, #7
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	2303      	movs	r3, #3
 8003cba:	4003      	ands	r3, r0
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003cc0:	481f      	ldr	r0, [pc, #124]	; (8003d40 <__NVIC_SetPriority+0xd4>)
 8003cc2:	1dfb      	adds	r3, r7, #7
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	b25b      	sxtb	r3, r3
 8003cc8:	089b      	lsrs	r3, r3, #2
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	33c0      	adds	r3, #192	; 0xc0
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003cd2:	e031      	b.n	8003d38 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003cd4:	4a1b      	ldr	r2, [pc, #108]	; (8003d44 <__NVIC_SetPriority+0xd8>)
 8003cd6:	1dfb      	adds	r3, r7, #7
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	0019      	movs	r1, r3
 8003cdc:	230f      	movs	r3, #15
 8003cde:	400b      	ands	r3, r1
 8003ce0:	3b08      	subs	r3, #8
 8003ce2:	089b      	lsrs	r3, r3, #2
 8003ce4:	3306      	adds	r3, #6
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	18d3      	adds	r3, r2, r3
 8003cea:	3304      	adds	r3, #4
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	1dfa      	adds	r2, r7, #7
 8003cf0:	7812      	ldrb	r2, [r2, #0]
 8003cf2:	0011      	movs	r1, r2
 8003cf4:	2203      	movs	r2, #3
 8003cf6:	400a      	ands	r2, r1
 8003cf8:	00d2      	lsls	r2, r2, #3
 8003cfa:	21ff      	movs	r1, #255	; 0xff
 8003cfc:	4091      	lsls	r1, r2
 8003cfe:	000a      	movs	r2, r1
 8003d00:	43d2      	mvns	r2, r2
 8003d02:	401a      	ands	r2, r3
 8003d04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	019b      	lsls	r3, r3, #6
 8003d0a:	22ff      	movs	r2, #255	; 0xff
 8003d0c:	401a      	ands	r2, r3
 8003d0e:	1dfb      	adds	r3, r7, #7
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	0018      	movs	r0, r3
 8003d14:	2303      	movs	r3, #3
 8003d16:	4003      	ands	r3, r0
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d1c:	4809      	ldr	r0, [pc, #36]	; (8003d44 <__NVIC_SetPriority+0xd8>)
 8003d1e:	1dfb      	adds	r3, r7, #7
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	001c      	movs	r4, r3
 8003d24:	230f      	movs	r3, #15
 8003d26:	4023      	ands	r3, r4
 8003d28:	3b08      	subs	r3, #8
 8003d2a:	089b      	lsrs	r3, r3, #2
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	3306      	adds	r3, #6
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	18c3      	adds	r3, r0, r3
 8003d34:	3304      	adds	r3, #4
 8003d36:	601a      	str	r2, [r3, #0]
}
 8003d38:	46c0      	nop			; (mov r8, r8)
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	b003      	add	sp, #12
 8003d3e:	bd90      	pop	{r4, r7, pc}
 8003d40:	e000e100 	.word	0xe000e100
 8003d44:	e000ed00 	.word	0xe000ed00

08003d48 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003d4c:	f3bf 8f4f 	dsb	sy
}
 8003d50:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d52:	4b04      	ldr	r3, [pc, #16]	; (8003d64 <__NVIC_SystemReset+0x1c>)
 8003d54:	4a04      	ldr	r2, [pc, #16]	; (8003d68 <__NVIC_SystemReset+0x20>)
 8003d56:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003d58:	f3bf 8f4f 	dsb	sy
}
 8003d5c:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003d5e:	46c0      	nop			; (mov r8, r8)
 8003d60:	e7fd      	b.n	8003d5e <__NVIC_SystemReset+0x16>
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	e000ed00 	.word	0xe000ed00
 8003d68:	05fa0004 	.word	0x05fa0004

08003d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	1e5a      	subs	r2, r3, #1
 8003d78:	2380      	movs	r3, #128	; 0x80
 8003d7a:	045b      	lsls	r3, r3, #17
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d301      	bcc.n	8003d84 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d80:	2301      	movs	r3, #1
 8003d82:	e010      	b.n	8003da6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d84:	4b0a      	ldr	r3, [pc, #40]	; (8003db0 <SysTick_Config+0x44>)
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	3a01      	subs	r2, #1
 8003d8a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	425b      	negs	r3, r3
 8003d90:	2103      	movs	r1, #3
 8003d92:	0018      	movs	r0, r3
 8003d94:	f7ff ff6a 	bl	8003c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d98:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <SysTick_Config+0x44>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d9e:	4b04      	ldr	r3, [pc, #16]	; (8003db0 <SysTick_Config+0x44>)
 8003da0:	2207      	movs	r2, #7
 8003da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	0018      	movs	r0, r3
 8003da8:	46bd      	mov	sp, r7
 8003daa:	b002      	add	sp, #8
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	46c0      	nop			; (mov r8, r8)
 8003db0:	e000e010 	.word	0xe000e010

08003db4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	607a      	str	r2, [r7, #4]
 8003dbe:	210f      	movs	r1, #15
 8003dc0:	187b      	adds	r3, r7, r1
 8003dc2:	1c02      	adds	r2, r0, #0
 8003dc4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	187b      	adds	r3, r7, r1
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	b25b      	sxtb	r3, r3
 8003dce:	0011      	movs	r1, r2
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	f7ff ff4b 	bl	8003c6c <__NVIC_SetPriority>
}
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	b004      	add	sp, #16
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b082      	sub	sp, #8
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	0002      	movs	r2, r0
 8003de6:	1dfb      	adds	r3, r7, #7
 8003de8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dea:	1dfb      	adds	r3, r7, #7
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	b25b      	sxtb	r3, r3
 8003df0:	0018      	movs	r0, r3
 8003df2:	f7ff ff21 	bl	8003c38 <__NVIC_EnableIRQ>
}
 8003df6:	46c0      	nop			; (mov r8, r8)
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	b002      	add	sp, #8
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003e02:	f7ff ffa1 	bl	8003d48 <__NVIC_SystemReset>

08003e06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b082      	sub	sp, #8
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	0018      	movs	r0, r3
 8003e12:	f7ff ffab 	bl	8003d6c <SysTick_Config>
 8003e16:	0003      	movs	r3, r0
}
 8003e18:	0018      	movs	r0, r3
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	b002      	add	sp, #8
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e2e:	e147      	b.n	80040c0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2101      	movs	r1, #1
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	4091      	lsls	r1, r2
 8003e3a:	000a      	movs	r2, r1
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d100      	bne.n	8003e48 <HAL_GPIO_Init+0x28>
 8003e46:	e138      	b.n	80040ba <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	2203      	movs	r2, #3
 8003e4e:	4013      	ands	r3, r2
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d005      	beq.n	8003e60 <HAL_GPIO_Init+0x40>
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	2203      	movs	r2, #3
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d130      	bne.n	8003ec2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	2203      	movs	r2, #3
 8003e6c:	409a      	lsls	r2, r3
 8003e6e:	0013      	movs	r3, r2
 8003e70:	43da      	mvns	r2, r3
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	4013      	ands	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	409a      	lsls	r2, r3
 8003e82:	0013      	movs	r3, r2
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e96:	2201      	movs	r2, #1
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	409a      	lsls	r2, r3
 8003e9c:	0013      	movs	r3, r2
 8003e9e:	43da      	mvns	r2, r3
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	091b      	lsrs	r3, r3, #4
 8003eac:	2201      	movs	r2, #1
 8003eae:	401a      	ands	r2, r3
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	409a      	lsls	r2, r3
 8003eb4:	0013      	movs	r3, r2
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	2203      	movs	r2, #3
 8003ec8:	4013      	ands	r3, r2
 8003eca:	2b03      	cmp	r3, #3
 8003ecc:	d017      	beq.n	8003efe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	2203      	movs	r2, #3
 8003eda:	409a      	lsls	r2, r3
 8003edc:	0013      	movs	r3, r2
 8003ede:	43da      	mvns	r2, r3
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	689a      	ldr	r2, [r3, #8]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	409a      	lsls	r2, r3
 8003ef0:	0013      	movs	r3, r2
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2203      	movs	r2, #3
 8003f04:	4013      	ands	r3, r2
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d123      	bne.n	8003f52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	08da      	lsrs	r2, r3, #3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	3208      	adds	r2, #8
 8003f12:	0092      	lsls	r2, r2, #2
 8003f14:	58d3      	ldr	r3, [r2, r3]
 8003f16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	2207      	movs	r2, #7
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	220f      	movs	r2, #15
 8003f22:	409a      	lsls	r2, r3
 8003f24:	0013      	movs	r3, r2
 8003f26:	43da      	mvns	r2, r3
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	691a      	ldr	r2, [r3, #16]
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	2107      	movs	r1, #7
 8003f36:	400b      	ands	r3, r1
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	409a      	lsls	r2, r3
 8003f3c:	0013      	movs	r3, r2
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	08da      	lsrs	r2, r3, #3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3208      	adds	r2, #8
 8003f4c:	0092      	lsls	r2, r2, #2
 8003f4e:	6939      	ldr	r1, [r7, #16]
 8003f50:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	2203      	movs	r2, #3
 8003f5e:	409a      	lsls	r2, r3
 8003f60:	0013      	movs	r3, r2
 8003f62:	43da      	mvns	r2, r3
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	4013      	ands	r3, r2
 8003f68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2203      	movs	r2, #3
 8003f70:	401a      	ands	r2, r3
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	409a      	lsls	r2, r3
 8003f78:	0013      	movs	r3, r2
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	23c0      	movs	r3, #192	; 0xc0
 8003f8c:	029b      	lsls	r3, r3, #10
 8003f8e:	4013      	ands	r3, r2
 8003f90:	d100      	bne.n	8003f94 <HAL_GPIO_Init+0x174>
 8003f92:	e092      	b.n	80040ba <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003f94:	4a50      	ldr	r2, [pc, #320]	; (80040d8 <HAL_GPIO_Init+0x2b8>)
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	089b      	lsrs	r3, r3, #2
 8003f9a:	3318      	adds	r3, #24
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	589b      	ldr	r3, [r3, r2]
 8003fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2203      	movs	r2, #3
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	220f      	movs	r2, #15
 8003fac:	409a      	lsls	r2, r3
 8003fae:	0013      	movs	r3, r2
 8003fb0:	43da      	mvns	r2, r3
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	23a0      	movs	r3, #160	; 0xa0
 8003fbc:	05db      	lsls	r3, r3, #23
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d013      	beq.n	8003fea <HAL_GPIO_Init+0x1ca>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a45      	ldr	r2, [pc, #276]	; (80040dc <HAL_GPIO_Init+0x2bc>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d00d      	beq.n	8003fe6 <HAL_GPIO_Init+0x1c6>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a44      	ldr	r2, [pc, #272]	; (80040e0 <HAL_GPIO_Init+0x2c0>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d007      	beq.n	8003fe2 <HAL_GPIO_Init+0x1c2>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a43      	ldr	r2, [pc, #268]	; (80040e4 <HAL_GPIO_Init+0x2c4>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d101      	bne.n	8003fde <HAL_GPIO_Init+0x1be>
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e006      	b.n	8003fec <HAL_GPIO_Init+0x1cc>
 8003fde:	2305      	movs	r3, #5
 8003fe0:	e004      	b.n	8003fec <HAL_GPIO_Init+0x1cc>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e002      	b.n	8003fec <HAL_GPIO_Init+0x1cc>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e000      	b.n	8003fec <HAL_GPIO_Init+0x1cc>
 8003fea:	2300      	movs	r3, #0
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	2103      	movs	r1, #3
 8003ff0:	400a      	ands	r2, r1
 8003ff2:	00d2      	lsls	r2, r2, #3
 8003ff4:	4093      	lsls	r3, r2
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003ffc:	4936      	ldr	r1, [pc, #216]	; (80040d8 <HAL_GPIO_Init+0x2b8>)
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	089b      	lsrs	r3, r3, #2
 8004002:	3318      	adds	r3, #24
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800400a:	4b33      	ldr	r3, [pc, #204]	; (80040d8 <HAL_GPIO_Init+0x2b8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	43da      	mvns	r2, r3
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	4013      	ands	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	2380      	movs	r3, #128	; 0x80
 8004020:	035b      	lsls	r3, r3, #13
 8004022:	4013      	ands	r3, r2
 8004024:	d003      	beq.n	800402e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4313      	orrs	r3, r2
 800402c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800402e:	4b2a      	ldr	r3, [pc, #168]	; (80040d8 <HAL_GPIO_Init+0x2b8>)
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004034:	4b28      	ldr	r3, [pc, #160]	; (80040d8 <HAL_GPIO_Init+0x2b8>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	43da      	mvns	r2, r3
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	4013      	ands	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	2380      	movs	r3, #128	; 0x80
 800404a:	039b      	lsls	r3, r3, #14
 800404c:	4013      	ands	r3, r2
 800404e:	d003      	beq.n	8004058 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	4313      	orrs	r3, r2
 8004056:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004058:	4b1f      	ldr	r3, [pc, #124]	; (80040d8 <HAL_GPIO_Init+0x2b8>)
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800405e:	4a1e      	ldr	r2, [pc, #120]	; (80040d8 <HAL_GPIO_Init+0x2b8>)
 8004060:	2384      	movs	r3, #132	; 0x84
 8004062:	58d3      	ldr	r3, [r2, r3]
 8004064:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	43da      	mvns	r2, r3
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	4013      	ands	r3, r2
 800406e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	2380      	movs	r3, #128	; 0x80
 8004076:	029b      	lsls	r3, r3, #10
 8004078:	4013      	ands	r3, r2
 800407a:	d003      	beq.n	8004084 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4313      	orrs	r3, r2
 8004082:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004084:	4914      	ldr	r1, [pc, #80]	; (80040d8 <HAL_GPIO_Init+0x2b8>)
 8004086:	2284      	movs	r2, #132	; 0x84
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800408c:	4a12      	ldr	r2, [pc, #72]	; (80040d8 <HAL_GPIO_Init+0x2b8>)
 800408e:	2380      	movs	r3, #128	; 0x80
 8004090:	58d3      	ldr	r3, [r2, r3]
 8004092:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	43da      	mvns	r2, r3
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	4013      	ands	r3, r2
 800409c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	2380      	movs	r3, #128	; 0x80
 80040a4:	025b      	lsls	r3, r3, #9
 80040a6:	4013      	ands	r3, r2
 80040a8:	d003      	beq.n	80040b2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80040b2:	4909      	ldr	r1, [pc, #36]	; (80040d8 <HAL_GPIO_Init+0x2b8>)
 80040b4:	2280      	movs	r2, #128	; 0x80
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	3301      	adds	r3, #1
 80040be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	40da      	lsrs	r2, r3
 80040c8:	1e13      	subs	r3, r2, #0
 80040ca:	d000      	beq.n	80040ce <HAL_GPIO_Init+0x2ae>
 80040cc:	e6b0      	b.n	8003e30 <HAL_GPIO_Init+0x10>
  }
}
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	46c0      	nop			; (mov r8, r8)
 80040d2:	46bd      	mov	sp, r7
 80040d4:	b006      	add	sp, #24
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	40021800 	.word	0x40021800
 80040dc:	50000400 	.word	0x50000400
 80040e0:	50000800 	.word	0x50000800
 80040e4:	50000c00 	.word	0x50000c00

080040e8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040f2:	2300      	movs	r3, #0
 80040f4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80040f6:	e0b4      	b.n	8004262 <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80040f8:	2201      	movs	r2, #1
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	409a      	lsls	r2, r3
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	4013      	ands	r3, r2
 8004102:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d100      	bne.n	800410c <HAL_GPIO_DeInit+0x24>
 800410a:	e0a7      	b.n	800425c <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 800410c:	4a5a      	ldr	r2, [pc, #360]	; (8004278 <HAL_GPIO_DeInit+0x190>)
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	089b      	lsrs	r3, r3, #2
 8004112:	3318      	adds	r3, #24
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	589b      	ldr	r3, [r3, r2]
 8004118:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2203      	movs	r2, #3
 800411e:	4013      	ands	r3, r2
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	220f      	movs	r2, #15
 8004124:	409a      	lsls	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	4013      	ands	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	23a0      	movs	r3, #160	; 0xa0
 8004130:	05db      	lsls	r3, r3, #23
 8004132:	429a      	cmp	r2, r3
 8004134:	d013      	beq.n	800415e <HAL_GPIO_DeInit+0x76>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a50      	ldr	r2, [pc, #320]	; (800427c <HAL_GPIO_DeInit+0x194>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d00d      	beq.n	800415a <HAL_GPIO_DeInit+0x72>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a4f      	ldr	r2, [pc, #316]	; (8004280 <HAL_GPIO_DeInit+0x198>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d007      	beq.n	8004156 <HAL_GPIO_DeInit+0x6e>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a4e      	ldr	r2, [pc, #312]	; (8004284 <HAL_GPIO_DeInit+0x19c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d101      	bne.n	8004152 <HAL_GPIO_DeInit+0x6a>
 800414e:	2303      	movs	r3, #3
 8004150:	e006      	b.n	8004160 <HAL_GPIO_DeInit+0x78>
 8004152:	2305      	movs	r3, #5
 8004154:	e004      	b.n	8004160 <HAL_GPIO_DeInit+0x78>
 8004156:	2302      	movs	r3, #2
 8004158:	e002      	b.n	8004160 <HAL_GPIO_DeInit+0x78>
 800415a:	2301      	movs	r3, #1
 800415c:	e000      	b.n	8004160 <HAL_GPIO_DeInit+0x78>
 800415e:	2300      	movs	r3, #0
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	2103      	movs	r1, #3
 8004164:	400a      	ands	r2, r1
 8004166:	00d2      	lsls	r2, r2, #3
 8004168:	4093      	lsls	r3, r2
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	429a      	cmp	r2, r3
 800416e:	d136      	bne.n	80041de <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004170:	4a41      	ldr	r2, [pc, #260]	; (8004278 <HAL_GPIO_DeInit+0x190>)
 8004172:	2380      	movs	r3, #128	; 0x80
 8004174:	58d3      	ldr	r3, [r2, r3]
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	43d2      	mvns	r2, r2
 800417a:	493f      	ldr	r1, [pc, #252]	; (8004278 <HAL_GPIO_DeInit+0x190>)
 800417c:	4013      	ands	r3, r2
 800417e:	2280      	movs	r2, #128	; 0x80
 8004180:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8004182:	4a3d      	ldr	r2, [pc, #244]	; (8004278 <HAL_GPIO_DeInit+0x190>)
 8004184:	2384      	movs	r3, #132	; 0x84
 8004186:	58d3      	ldr	r3, [r2, r3]
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	43d2      	mvns	r2, r2
 800418c:	493a      	ldr	r1, [pc, #232]	; (8004278 <HAL_GPIO_DeInit+0x190>)
 800418e:	4013      	ands	r3, r2
 8004190:	2284      	movs	r2, #132	; 0x84
 8004192:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004194:	4b38      	ldr	r3, [pc, #224]	; (8004278 <HAL_GPIO_DeInit+0x190>)
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	43d9      	mvns	r1, r3
 800419c:	4b36      	ldr	r3, [pc, #216]	; (8004278 <HAL_GPIO_DeInit+0x190>)
 800419e:	400a      	ands	r2, r1
 80041a0:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80041a2:	4b35      	ldr	r3, [pc, #212]	; (8004278 <HAL_GPIO_DeInit+0x190>)
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	43d9      	mvns	r1, r3
 80041aa:	4b33      	ldr	r3, [pc, #204]	; (8004278 <HAL_GPIO_DeInit+0x190>)
 80041ac:	400a      	ands	r2, r1
 80041ae:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	2203      	movs	r2, #3
 80041b4:	4013      	ands	r3, r2
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	220f      	movs	r2, #15
 80041ba:	409a      	lsls	r2, r3
 80041bc:	0013      	movs	r3, r2
 80041be:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 80041c0:	4a2d      	ldr	r2, [pc, #180]	; (8004278 <HAL_GPIO_DeInit+0x190>)
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	089b      	lsrs	r3, r3, #2
 80041c6:	3318      	adds	r3, #24
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	589a      	ldr	r2, [r3, r2]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	43d9      	mvns	r1, r3
 80041d0:	4829      	ldr	r0, [pc, #164]	; (8004278 <HAL_GPIO_DeInit+0x190>)
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	089b      	lsrs	r3, r3, #2
 80041d6:	400a      	ands	r2, r1
 80041d8:	3318      	adds	r3, #24
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	2103      	movs	r1, #3
 80041e8:	4099      	lsls	r1, r3
 80041ea:	000b      	movs	r3, r1
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	08da      	lsrs	r2, r3, #3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	3208      	adds	r2, #8
 80041fa:	0092      	lsls	r2, r2, #2
 80041fc:	58d3      	ldr	r3, [r2, r3]
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	2107      	movs	r1, #7
 8004202:	400a      	ands	r2, r1
 8004204:	0092      	lsls	r2, r2, #2
 8004206:	210f      	movs	r1, #15
 8004208:	4091      	lsls	r1, r2
 800420a:	000a      	movs	r2, r1
 800420c:	43d1      	mvns	r1, r2
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	08d2      	lsrs	r2, r2, #3
 8004212:	4019      	ands	r1, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3208      	adds	r2, #8
 8004218:	0092      	lsls	r2, r2, #2
 800421a:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	0052      	lsls	r2, r2, #1
 8004224:	2103      	movs	r1, #3
 8004226:	4091      	lsls	r1, r2
 8004228:	000a      	movs	r2, r1
 800422a:	43d2      	mvns	r2, r2
 800422c:	401a      	ands	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	2101      	movs	r1, #1
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	4091      	lsls	r1, r2
 800423c:	000a      	movs	r2, r1
 800423e:	43d2      	mvns	r2, r2
 8004240:	401a      	ands	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	0052      	lsls	r2, r2, #1
 800424e:	2103      	movs	r1, #3
 8004250:	4091      	lsls	r1, r2
 8004252:	000a      	movs	r2, r1
 8004254:	43d2      	mvns	r2, r2
 8004256:	401a      	ands	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	3301      	adds	r3, #1
 8004260:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	40da      	lsrs	r2, r3
 8004268:	1e13      	subs	r3, r2, #0
 800426a:	d000      	beq.n	800426e <HAL_GPIO_DeInit+0x186>
 800426c:	e744      	b.n	80040f8 <HAL_GPIO_DeInit+0x10>
  }
}
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	46c0      	nop			; (mov r8, r8)
 8004272:	46bd      	mov	sp, r7
 8004274:	b006      	add	sp, #24
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40021800 	.word	0x40021800
 800427c:	50000400 	.word	0x50000400
 8004280:	50000800 	.word	0x50000800
 8004284:	50000c00 	.word	0x50000c00

08004288 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	000a      	movs	r2, r1
 8004292:	1cbb      	adds	r3, r7, #2
 8004294:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	1cba      	adds	r2, r7, #2
 800429c:	8812      	ldrh	r2, [r2, #0]
 800429e:	4013      	ands	r3, r2
 80042a0:	d004      	beq.n	80042ac <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80042a2:	230f      	movs	r3, #15
 80042a4:	18fb      	adds	r3, r7, r3
 80042a6:	2201      	movs	r2, #1
 80042a8:	701a      	strb	r2, [r3, #0]
 80042aa:	e003      	b.n	80042b4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042ac:	230f      	movs	r3, #15
 80042ae:	18fb      	adds	r3, r7, r3
 80042b0:	2200      	movs	r2, #0
 80042b2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80042b4:	230f      	movs	r3, #15
 80042b6:	18fb      	adds	r3, r7, r3
 80042b8:	781b      	ldrb	r3, [r3, #0]
}
 80042ba:	0018      	movs	r0, r3
 80042bc:	46bd      	mov	sp, r7
 80042be:	b004      	add	sp, #16
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b082      	sub	sp, #8
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
 80042ca:	0008      	movs	r0, r1
 80042cc:	0011      	movs	r1, r2
 80042ce:	1cbb      	adds	r3, r7, #2
 80042d0:	1c02      	adds	r2, r0, #0
 80042d2:	801a      	strh	r2, [r3, #0]
 80042d4:	1c7b      	adds	r3, r7, #1
 80042d6:	1c0a      	adds	r2, r1, #0
 80042d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042da:	1c7b      	adds	r3, r7, #1
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d004      	beq.n	80042ec <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042e2:	1cbb      	adds	r3, r7, #2
 80042e4:	881a      	ldrh	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042ea:	e003      	b.n	80042f4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042ec:	1cbb      	adds	r3, r7, #2
 80042ee:	881a      	ldrh	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80042f4:	46c0      	nop			; (mov r8, r8)
 80042f6:	46bd      	mov	sp, r7
 80042f8:	b002      	add	sp, #8
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	0002      	movs	r2, r0
 8004304:	1dbb      	adds	r3, r7, #6
 8004306:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004308:	4b10      	ldr	r3, [pc, #64]	; (800434c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	1dba      	adds	r2, r7, #6
 800430e:	8812      	ldrh	r2, [r2, #0]
 8004310:	4013      	ands	r3, r2
 8004312:	d008      	beq.n	8004326 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004314:	4b0d      	ldr	r3, [pc, #52]	; (800434c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004316:	1dba      	adds	r2, r7, #6
 8004318:	8812      	ldrh	r2, [r2, #0]
 800431a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800431c:	1dbb      	adds	r3, r7, #6
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	0018      	movs	r0, r3
 8004322:	f7ff f86f 	bl	8003404 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004326:	4b09      	ldr	r3, [pc, #36]	; (800434c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	1dba      	adds	r2, r7, #6
 800432c:	8812      	ldrh	r2, [r2, #0]
 800432e:	4013      	ands	r3, r2
 8004330:	d008      	beq.n	8004344 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004332:	4b06      	ldr	r3, [pc, #24]	; (800434c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004334:	1dba      	adds	r2, r7, #6
 8004336:	8812      	ldrh	r2, [r2, #0]
 8004338:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800433a:	1dbb      	adds	r3, r7, #6
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	0018      	movs	r0, r3
 8004340:	f000 f806 	bl	8004350 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004344:	46c0      	nop			; (mov r8, r8)
 8004346:	46bd      	mov	sp, r7
 8004348:	b002      	add	sp, #8
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40021800 	.word	0x40021800

08004350 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	0002      	movs	r2, r0
 8004358:	1dbb      	adds	r3, r7, #6
 800435a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800435c:	46c0      	nop			; (mov r8, r8)
 800435e:	46bd      	mov	sp, r7
 8004360:	b002      	add	sp, #8
 8004362:	bd80      	pop	{r7, pc}

08004364 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	000a      	movs	r2, r1
 800436e:	1cfb      	adds	r3, r7, #3
 8004370:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d009      	beq.n	800438c <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8004378:	4b14      	ldr	r3, [pc, #80]	; (80043cc <HAL_PWR_EnterSTOPMode+0x68>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2207      	movs	r2, #7
 800437e:	4393      	bics	r3, r2
 8004380:	001a      	movs	r2, r3
 8004382:	4b12      	ldr	r3, [pc, #72]	; (80043cc <HAL_PWR_EnterSTOPMode+0x68>)
 8004384:	2101      	movs	r1, #1
 8004386:	430a      	orrs	r2, r1
 8004388:	601a      	str	r2, [r3, #0]
 800438a:	e005      	b.n	8004398 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 800438c:	4b0f      	ldr	r3, [pc, #60]	; (80043cc <HAL_PWR_EnterSTOPMode+0x68>)
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	4b0e      	ldr	r3, [pc, #56]	; (80043cc <HAL_PWR_EnterSTOPMode+0x68>)
 8004392:	2107      	movs	r1, #7
 8004394:	438a      	bics	r2, r1
 8004396:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004398:	4b0d      	ldr	r3, [pc, #52]	; (80043d0 <HAL_PWR_EnterSTOPMode+0x6c>)
 800439a:	691a      	ldr	r2, [r3, #16]
 800439c:	4b0c      	ldr	r3, [pc, #48]	; (80043d0 <HAL_PWR_EnterSTOPMode+0x6c>)
 800439e:	2104      	movs	r1, #4
 80043a0:	430a      	orrs	r2, r1
 80043a2:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80043a4:	1cfb      	adds	r3, r7, #3
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d101      	bne.n	80043b0 <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80043ac:	bf30      	wfi
 80043ae:	e002      	b.n	80043b6 <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80043b0:	bf40      	sev
    __WFE();
 80043b2:	bf20      	wfe
    __WFE();
 80043b4:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80043b6:	4b06      	ldr	r3, [pc, #24]	; (80043d0 <HAL_PWR_EnterSTOPMode+0x6c>)
 80043b8:	691a      	ldr	r2, [r3, #16]
 80043ba:	4b05      	ldr	r3, [pc, #20]	; (80043d0 <HAL_PWR_EnterSTOPMode+0x6c>)
 80043bc:	2104      	movs	r1, #4
 80043be:	438a      	bics	r2, r1
 80043c0:	611a      	str	r2, [r3, #16]
}
 80043c2:	46c0      	nop			; (mov r8, r8)
 80043c4:	46bd      	mov	sp, r7
 80043c6:	b002      	add	sp, #8
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	40007000 	.word	0x40007000
 80043d0:	e000ed00 	.word	0xe000ed00

080043d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80043dc:	4b19      	ldr	r3, [pc, #100]	; (8004444 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a19      	ldr	r2, [pc, #100]	; (8004448 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80043e2:	4013      	ands	r3, r2
 80043e4:	0019      	movs	r1, r3
 80043e6:	4b17      	ldr	r3, [pc, #92]	; (8004444 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	2380      	movs	r3, #128	; 0x80
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d11f      	bne.n	8004438 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80043f8:	4b14      	ldr	r3, [pc, #80]	; (800444c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	0013      	movs	r3, r2
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	189b      	adds	r3, r3, r2
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	4912      	ldr	r1, [pc, #72]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004406:	0018      	movs	r0, r3
 8004408:	f7fb fe98 	bl	800013c <__udivsi3>
 800440c:	0003      	movs	r3, r0
 800440e:	3301      	adds	r3, #1
 8004410:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004412:	e008      	b.n	8004426 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	3b01      	subs	r3, #1
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	e001      	b.n	8004426 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e009      	b.n	800443a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004426:	4b07      	ldr	r3, [pc, #28]	; (8004444 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004428:	695a      	ldr	r2, [r3, #20]
 800442a:	2380      	movs	r3, #128	; 0x80
 800442c:	00db      	lsls	r3, r3, #3
 800442e:	401a      	ands	r2, r3
 8004430:	2380      	movs	r3, #128	; 0x80
 8004432:	00db      	lsls	r3, r3, #3
 8004434:	429a      	cmp	r2, r3
 8004436:	d0ed      	beq.n	8004414 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	0018      	movs	r0, r3
 800443c:	46bd      	mov	sp, r7
 800443e:	b004      	add	sp, #16
 8004440:	bd80      	pop	{r7, pc}
 8004442:	46c0      	nop			; (mov r8, r8)
 8004444:	40007000 	.word	0x40007000
 8004448:	fffff9ff 	.word	0xfffff9ff
 800444c:	20000024 	.word	0x20000024
 8004450:	000f4240 	.word	0x000f4240

08004454 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004458:	4b03      	ldr	r3, [pc, #12]	; (8004468 <LL_RCC_GetAPB1Prescaler+0x14>)
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	23e0      	movs	r3, #224	; 0xe0
 800445e:	01db      	lsls	r3, r3, #7
 8004460:	4013      	ands	r3, r2
}
 8004462:	0018      	movs	r0, r3
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40021000 	.word	0x40021000

0800446c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b088      	sub	sp, #32
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e2fe      	b.n	8004a7c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2201      	movs	r2, #1
 8004484:	4013      	ands	r3, r2
 8004486:	d100      	bne.n	800448a <HAL_RCC_OscConfig+0x1e>
 8004488:	e07c      	b.n	8004584 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800448a:	4bc3      	ldr	r3, [pc, #780]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	2238      	movs	r2, #56	; 0x38
 8004490:	4013      	ands	r3, r2
 8004492:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004494:	4bc0      	ldr	r3, [pc, #768]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	2203      	movs	r2, #3
 800449a:	4013      	ands	r3, r2
 800449c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	2b10      	cmp	r3, #16
 80044a2:	d102      	bne.n	80044aa <HAL_RCC_OscConfig+0x3e>
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	d002      	beq.n	80044b0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	2b08      	cmp	r3, #8
 80044ae:	d10b      	bne.n	80044c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b0:	4bb9      	ldr	r3, [pc, #740]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	2380      	movs	r3, #128	; 0x80
 80044b6:	029b      	lsls	r3, r3, #10
 80044b8:	4013      	ands	r3, r2
 80044ba:	d062      	beq.n	8004582 <HAL_RCC_OscConfig+0x116>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d15e      	bne.n	8004582 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e2d9      	b.n	8004a7c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	2380      	movs	r3, #128	; 0x80
 80044ce:	025b      	lsls	r3, r3, #9
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d107      	bne.n	80044e4 <HAL_RCC_OscConfig+0x78>
 80044d4:	4bb0      	ldr	r3, [pc, #704]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	4baf      	ldr	r3, [pc, #700]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 80044da:	2180      	movs	r1, #128	; 0x80
 80044dc:	0249      	lsls	r1, r1, #9
 80044de:	430a      	orrs	r2, r1
 80044e0:	601a      	str	r2, [r3, #0]
 80044e2:	e020      	b.n	8004526 <HAL_RCC_OscConfig+0xba>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	23a0      	movs	r3, #160	; 0xa0
 80044ea:	02db      	lsls	r3, r3, #11
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d10e      	bne.n	800450e <HAL_RCC_OscConfig+0xa2>
 80044f0:	4ba9      	ldr	r3, [pc, #676]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	4ba8      	ldr	r3, [pc, #672]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 80044f6:	2180      	movs	r1, #128	; 0x80
 80044f8:	02c9      	lsls	r1, r1, #11
 80044fa:	430a      	orrs	r2, r1
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	4ba6      	ldr	r3, [pc, #664]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	4ba5      	ldr	r3, [pc, #660]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 8004504:	2180      	movs	r1, #128	; 0x80
 8004506:	0249      	lsls	r1, r1, #9
 8004508:	430a      	orrs	r2, r1
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	e00b      	b.n	8004526 <HAL_RCC_OscConfig+0xba>
 800450e:	4ba2      	ldr	r3, [pc, #648]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	4ba1      	ldr	r3, [pc, #644]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 8004514:	49a1      	ldr	r1, [pc, #644]	; (800479c <HAL_RCC_OscConfig+0x330>)
 8004516:	400a      	ands	r2, r1
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	4b9f      	ldr	r3, [pc, #636]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	4b9e      	ldr	r3, [pc, #632]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 8004520:	499f      	ldr	r1, [pc, #636]	; (80047a0 <HAL_RCC_OscConfig+0x334>)
 8004522:	400a      	ands	r2, r1
 8004524:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d014      	beq.n	8004558 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452e:	f7ff fb39 	bl	8003ba4 <HAL_GetTick>
 8004532:	0003      	movs	r3, r0
 8004534:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004538:	f7ff fb34 	bl	8003ba4 <HAL_GetTick>
 800453c:	0002      	movs	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b64      	cmp	r3, #100	; 0x64
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e298      	b.n	8004a7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800454a:	4b93      	ldr	r3, [pc, #588]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	2380      	movs	r3, #128	; 0x80
 8004550:	029b      	lsls	r3, r3, #10
 8004552:	4013      	ands	r3, r2
 8004554:	d0f0      	beq.n	8004538 <HAL_RCC_OscConfig+0xcc>
 8004556:	e015      	b.n	8004584 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004558:	f7ff fb24 	bl	8003ba4 <HAL_GetTick>
 800455c:	0003      	movs	r3, r0
 800455e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004560:	e008      	b.n	8004574 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004562:	f7ff fb1f 	bl	8003ba4 <HAL_GetTick>
 8004566:	0002      	movs	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b64      	cmp	r3, #100	; 0x64
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e283      	b.n	8004a7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004574:	4b88      	ldr	r3, [pc, #544]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	2380      	movs	r3, #128	; 0x80
 800457a:	029b      	lsls	r3, r3, #10
 800457c:	4013      	ands	r3, r2
 800457e:	d1f0      	bne.n	8004562 <HAL_RCC_OscConfig+0xf6>
 8004580:	e000      	b.n	8004584 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004582:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2202      	movs	r2, #2
 800458a:	4013      	ands	r3, r2
 800458c:	d100      	bne.n	8004590 <HAL_RCC_OscConfig+0x124>
 800458e:	e099      	b.n	80046c4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004590:	4b81      	ldr	r3, [pc, #516]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	2238      	movs	r2, #56	; 0x38
 8004596:	4013      	ands	r3, r2
 8004598:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800459a:	4b7f      	ldr	r3, [pc, #508]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	2203      	movs	r2, #3
 80045a0:	4013      	ands	r3, r2
 80045a2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	2b10      	cmp	r3, #16
 80045a8:	d102      	bne.n	80045b0 <HAL_RCC_OscConfig+0x144>
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d002      	beq.n	80045b6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d135      	bne.n	8004622 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045b6:	4b78      	ldr	r3, [pc, #480]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	2380      	movs	r3, #128	; 0x80
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	4013      	ands	r3, r2
 80045c0:	d005      	beq.n	80045ce <HAL_RCC_OscConfig+0x162>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e256      	b.n	8004a7c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ce:	4b72      	ldr	r3, [pc, #456]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	4a74      	ldr	r2, [pc, #464]	; (80047a4 <HAL_RCC_OscConfig+0x338>)
 80045d4:	4013      	ands	r3, r2
 80045d6:	0019      	movs	r1, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	021a      	lsls	r2, r3, #8
 80045de:	4b6e      	ldr	r3, [pc, #440]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 80045e0:	430a      	orrs	r2, r1
 80045e2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d112      	bne.n	8004610 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80045ea:	4b6b      	ldr	r3, [pc, #428]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a6e      	ldr	r2, [pc, #440]	; (80047a8 <HAL_RCC_OscConfig+0x33c>)
 80045f0:	4013      	ands	r3, r2
 80045f2:	0019      	movs	r1, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691a      	ldr	r2, [r3, #16]
 80045f8:	4b67      	ldr	r3, [pc, #412]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 80045fa:	430a      	orrs	r2, r1
 80045fc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80045fe:	4b66      	ldr	r3, [pc, #408]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	0adb      	lsrs	r3, r3, #11
 8004604:	2207      	movs	r2, #7
 8004606:	4013      	ands	r3, r2
 8004608:	4a68      	ldr	r2, [pc, #416]	; (80047ac <HAL_RCC_OscConfig+0x340>)
 800460a:	40da      	lsrs	r2, r3
 800460c:	4b68      	ldr	r3, [pc, #416]	; (80047b0 <HAL_RCC_OscConfig+0x344>)
 800460e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004610:	4b68      	ldr	r3, [pc, #416]	; (80047b4 <HAL_RCC_OscConfig+0x348>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	0018      	movs	r0, r3
 8004616:	f7ff fa69 	bl	8003aec <HAL_InitTick>
 800461a:	1e03      	subs	r3, r0, #0
 800461c:	d051      	beq.n	80046c2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e22c      	b.n	8004a7c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d030      	beq.n	800468c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800462a:	4b5b      	ldr	r3, [pc, #364]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a5e      	ldr	r2, [pc, #376]	; (80047a8 <HAL_RCC_OscConfig+0x33c>)
 8004630:	4013      	ands	r3, r2
 8004632:	0019      	movs	r1, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691a      	ldr	r2, [r3, #16]
 8004638:	4b57      	ldr	r3, [pc, #348]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 800463a:	430a      	orrs	r2, r1
 800463c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800463e:	4b56      	ldr	r3, [pc, #344]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	4b55      	ldr	r3, [pc, #340]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 8004644:	2180      	movs	r1, #128	; 0x80
 8004646:	0049      	lsls	r1, r1, #1
 8004648:	430a      	orrs	r2, r1
 800464a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464c:	f7ff faaa 	bl	8003ba4 <HAL_GetTick>
 8004650:	0003      	movs	r3, r0
 8004652:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004654:	e008      	b.n	8004668 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004656:	f7ff faa5 	bl	8003ba4 <HAL_GetTick>
 800465a:	0002      	movs	r2, r0
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d901      	bls.n	8004668 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e209      	b.n	8004a7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004668:	4b4b      	ldr	r3, [pc, #300]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	2380      	movs	r3, #128	; 0x80
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	4013      	ands	r3, r2
 8004672:	d0f0      	beq.n	8004656 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004674:	4b48      	ldr	r3, [pc, #288]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	4a4a      	ldr	r2, [pc, #296]	; (80047a4 <HAL_RCC_OscConfig+0x338>)
 800467a:	4013      	ands	r3, r2
 800467c:	0019      	movs	r1, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	021a      	lsls	r2, r3, #8
 8004684:	4b44      	ldr	r3, [pc, #272]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 8004686:	430a      	orrs	r2, r1
 8004688:	605a      	str	r2, [r3, #4]
 800468a:	e01b      	b.n	80046c4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800468c:	4b42      	ldr	r3, [pc, #264]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	4b41      	ldr	r3, [pc, #260]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 8004692:	4949      	ldr	r1, [pc, #292]	; (80047b8 <HAL_RCC_OscConfig+0x34c>)
 8004694:	400a      	ands	r2, r1
 8004696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004698:	f7ff fa84 	bl	8003ba4 <HAL_GetTick>
 800469c:	0003      	movs	r3, r0
 800469e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046a0:	e008      	b.n	80046b4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046a2:	f7ff fa7f 	bl	8003ba4 <HAL_GetTick>
 80046a6:	0002      	movs	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e1e3      	b.n	8004a7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046b4:	4b38      	ldr	r3, [pc, #224]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	2380      	movs	r3, #128	; 0x80
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	4013      	ands	r3, r2
 80046be:	d1f0      	bne.n	80046a2 <HAL_RCC_OscConfig+0x236>
 80046c0:	e000      	b.n	80046c4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046c2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2208      	movs	r2, #8
 80046ca:	4013      	ands	r3, r2
 80046cc:	d047      	beq.n	800475e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80046ce:	4b32      	ldr	r3, [pc, #200]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	2238      	movs	r2, #56	; 0x38
 80046d4:	4013      	ands	r3, r2
 80046d6:	2b18      	cmp	r3, #24
 80046d8:	d10a      	bne.n	80046f0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80046da:	4b2f      	ldr	r3, [pc, #188]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 80046dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046de:	2202      	movs	r2, #2
 80046e0:	4013      	ands	r3, r2
 80046e2:	d03c      	beq.n	800475e <HAL_RCC_OscConfig+0x2f2>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d138      	bne.n	800475e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e1c5      	b.n	8004a7c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d019      	beq.n	800472c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80046f8:	4b27      	ldr	r3, [pc, #156]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 80046fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80046fc:	4b26      	ldr	r3, [pc, #152]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 80046fe:	2101      	movs	r1, #1
 8004700:	430a      	orrs	r2, r1
 8004702:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004704:	f7ff fa4e 	bl	8003ba4 <HAL_GetTick>
 8004708:	0003      	movs	r3, r0
 800470a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800470c:	e008      	b.n	8004720 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800470e:	f7ff fa49 	bl	8003ba4 <HAL_GetTick>
 8004712:	0002      	movs	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e1ad      	b.n	8004a7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004720:	4b1d      	ldr	r3, [pc, #116]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 8004722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004724:	2202      	movs	r2, #2
 8004726:	4013      	ands	r3, r2
 8004728:	d0f1      	beq.n	800470e <HAL_RCC_OscConfig+0x2a2>
 800472a:	e018      	b.n	800475e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800472c:	4b1a      	ldr	r3, [pc, #104]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 800472e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004730:	4b19      	ldr	r3, [pc, #100]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 8004732:	2101      	movs	r1, #1
 8004734:	438a      	bics	r2, r1
 8004736:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004738:	f7ff fa34 	bl	8003ba4 <HAL_GetTick>
 800473c:	0003      	movs	r3, r0
 800473e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004740:	e008      	b.n	8004754 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004742:	f7ff fa2f 	bl	8003ba4 <HAL_GetTick>
 8004746:	0002      	movs	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e193      	b.n	8004a7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004754:	4b10      	ldr	r3, [pc, #64]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 8004756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004758:	2202      	movs	r2, #2
 800475a:	4013      	ands	r3, r2
 800475c:	d1f1      	bne.n	8004742 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2204      	movs	r2, #4
 8004764:	4013      	ands	r3, r2
 8004766:	d100      	bne.n	800476a <HAL_RCC_OscConfig+0x2fe>
 8004768:	e0c6      	b.n	80048f8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800476a:	231f      	movs	r3, #31
 800476c:	18fb      	adds	r3, r7, r3
 800476e:	2200      	movs	r2, #0
 8004770:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004772:	4b09      	ldr	r3, [pc, #36]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	2238      	movs	r2, #56	; 0x38
 8004778:	4013      	ands	r3, r2
 800477a:	2b20      	cmp	r3, #32
 800477c:	d11e      	bne.n	80047bc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800477e:	4b06      	ldr	r3, [pc, #24]	; (8004798 <HAL_RCC_OscConfig+0x32c>)
 8004780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004782:	2202      	movs	r2, #2
 8004784:	4013      	ands	r3, r2
 8004786:	d100      	bne.n	800478a <HAL_RCC_OscConfig+0x31e>
 8004788:	e0b6      	b.n	80048f8 <HAL_RCC_OscConfig+0x48c>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d000      	beq.n	8004794 <HAL_RCC_OscConfig+0x328>
 8004792:	e0b1      	b.n	80048f8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e171      	b.n	8004a7c <HAL_RCC_OscConfig+0x610>
 8004798:	40021000 	.word	0x40021000
 800479c:	fffeffff 	.word	0xfffeffff
 80047a0:	fffbffff 	.word	0xfffbffff
 80047a4:	ffff80ff 	.word	0xffff80ff
 80047a8:	ffffc7ff 	.word	0xffffc7ff
 80047ac:	00f42400 	.word	0x00f42400
 80047b0:	20000024 	.word	0x20000024
 80047b4:	20000028 	.word	0x20000028
 80047b8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047bc:	4bb1      	ldr	r3, [pc, #708]	; (8004a84 <HAL_RCC_OscConfig+0x618>)
 80047be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047c0:	2380      	movs	r3, #128	; 0x80
 80047c2:	055b      	lsls	r3, r3, #21
 80047c4:	4013      	ands	r3, r2
 80047c6:	d101      	bne.n	80047cc <HAL_RCC_OscConfig+0x360>
 80047c8:	2301      	movs	r3, #1
 80047ca:	e000      	b.n	80047ce <HAL_RCC_OscConfig+0x362>
 80047cc:	2300      	movs	r3, #0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d011      	beq.n	80047f6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80047d2:	4bac      	ldr	r3, [pc, #688]	; (8004a84 <HAL_RCC_OscConfig+0x618>)
 80047d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047d6:	4bab      	ldr	r3, [pc, #684]	; (8004a84 <HAL_RCC_OscConfig+0x618>)
 80047d8:	2180      	movs	r1, #128	; 0x80
 80047da:	0549      	lsls	r1, r1, #21
 80047dc:	430a      	orrs	r2, r1
 80047de:	63da      	str	r2, [r3, #60]	; 0x3c
 80047e0:	4ba8      	ldr	r3, [pc, #672]	; (8004a84 <HAL_RCC_OscConfig+0x618>)
 80047e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047e4:	2380      	movs	r3, #128	; 0x80
 80047e6:	055b      	lsls	r3, r3, #21
 80047e8:	4013      	ands	r3, r2
 80047ea:	60fb      	str	r3, [r7, #12]
 80047ec:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80047ee:	231f      	movs	r3, #31
 80047f0:	18fb      	adds	r3, r7, r3
 80047f2:	2201      	movs	r2, #1
 80047f4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047f6:	4ba4      	ldr	r3, [pc, #656]	; (8004a88 <HAL_RCC_OscConfig+0x61c>)
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	2380      	movs	r3, #128	; 0x80
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	4013      	ands	r3, r2
 8004800:	d11a      	bne.n	8004838 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004802:	4ba1      	ldr	r3, [pc, #644]	; (8004a88 <HAL_RCC_OscConfig+0x61c>)
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	4ba0      	ldr	r3, [pc, #640]	; (8004a88 <HAL_RCC_OscConfig+0x61c>)
 8004808:	2180      	movs	r1, #128	; 0x80
 800480a:	0049      	lsls	r1, r1, #1
 800480c:	430a      	orrs	r2, r1
 800480e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004810:	f7ff f9c8 	bl	8003ba4 <HAL_GetTick>
 8004814:	0003      	movs	r3, r0
 8004816:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004818:	e008      	b.n	800482c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800481a:	f7ff f9c3 	bl	8003ba4 <HAL_GetTick>
 800481e:	0002      	movs	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e127      	b.n	8004a7c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800482c:	4b96      	ldr	r3, [pc, #600]	; (8004a88 <HAL_RCC_OscConfig+0x61c>)
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	2380      	movs	r3, #128	; 0x80
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	4013      	ands	r3, r2
 8004836:	d0f0      	beq.n	800481a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d106      	bne.n	800484e <HAL_RCC_OscConfig+0x3e2>
 8004840:	4b90      	ldr	r3, [pc, #576]	; (8004a84 <HAL_RCC_OscConfig+0x618>)
 8004842:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004844:	4b8f      	ldr	r3, [pc, #572]	; (8004a84 <HAL_RCC_OscConfig+0x618>)
 8004846:	2101      	movs	r1, #1
 8004848:	430a      	orrs	r2, r1
 800484a:	65da      	str	r2, [r3, #92]	; 0x5c
 800484c:	e01c      	b.n	8004888 <HAL_RCC_OscConfig+0x41c>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	2b05      	cmp	r3, #5
 8004854:	d10c      	bne.n	8004870 <HAL_RCC_OscConfig+0x404>
 8004856:	4b8b      	ldr	r3, [pc, #556]	; (8004a84 <HAL_RCC_OscConfig+0x618>)
 8004858:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800485a:	4b8a      	ldr	r3, [pc, #552]	; (8004a84 <HAL_RCC_OscConfig+0x618>)
 800485c:	2104      	movs	r1, #4
 800485e:	430a      	orrs	r2, r1
 8004860:	65da      	str	r2, [r3, #92]	; 0x5c
 8004862:	4b88      	ldr	r3, [pc, #544]	; (8004a84 <HAL_RCC_OscConfig+0x618>)
 8004864:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004866:	4b87      	ldr	r3, [pc, #540]	; (8004a84 <HAL_RCC_OscConfig+0x618>)
 8004868:	2101      	movs	r1, #1
 800486a:	430a      	orrs	r2, r1
 800486c:	65da      	str	r2, [r3, #92]	; 0x5c
 800486e:	e00b      	b.n	8004888 <HAL_RCC_OscConfig+0x41c>
 8004870:	4b84      	ldr	r3, [pc, #528]	; (8004a84 <HAL_RCC_OscConfig+0x618>)
 8004872:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004874:	4b83      	ldr	r3, [pc, #524]	; (8004a84 <HAL_RCC_OscConfig+0x618>)
 8004876:	2101      	movs	r1, #1
 8004878:	438a      	bics	r2, r1
 800487a:	65da      	str	r2, [r3, #92]	; 0x5c
 800487c:	4b81      	ldr	r3, [pc, #516]	; (8004a84 <HAL_RCC_OscConfig+0x618>)
 800487e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004880:	4b80      	ldr	r3, [pc, #512]	; (8004a84 <HAL_RCC_OscConfig+0x618>)
 8004882:	2104      	movs	r1, #4
 8004884:	438a      	bics	r2, r1
 8004886:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d014      	beq.n	80048ba <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004890:	f7ff f988 	bl	8003ba4 <HAL_GetTick>
 8004894:	0003      	movs	r3, r0
 8004896:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004898:	e009      	b.n	80048ae <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800489a:	f7ff f983 	bl	8003ba4 <HAL_GetTick>
 800489e:	0002      	movs	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	4a79      	ldr	r2, [pc, #484]	; (8004a8c <HAL_RCC_OscConfig+0x620>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e0e6      	b.n	8004a7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048ae:	4b75      	ldr	r3, [pc, #468]	; (8004a84 <HAL_RCC_OscConfig+0x618>)
 80048b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b2:	2202      	movs	r2, #2
 80048b4:	4013      	ands	r3, r2
 80048b6:	d0f0      	beq.n	800489a <HAL_RCC_OscConfig+0x42e>
 80048b8:	e013      	b.n	80048e2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ba:	f7ff f973 	bl	8003ba4 <HAL_GetTick>
 80048be:	0003      	movs	r3, r0
 80048c0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048c2:	e009      	b.n	80048d8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048c4:	f7ff f96e 	bl	8003ba4 <HAL_GetTick>
 80048c8:	0002      	movs	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	4a6f      	ldr	r2, [pc, #444]	; (8004a8c <HAL_RCC_OscConfig+0x620>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d901      	bls.n	80048d8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e0d1      	b.n	8004a7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048d8:	4b6a      	ldr	r3, [pc, #424]	; (8004a84 <HAL_RCC_OscConfig+0x618>)
 80048da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048dc:	2202      	movs	r2, #2
 80048de:	4013      	ands	r3, r2
 80048e0:	d1f0      	bne.n	80048c4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80048e2:	231f      	movs	r3, #31
 80048e4:	18fb      	adds	r3, r7, r3
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d105      	bne.n	80048f8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80048ec:	4b65      	ldr	r3, [pc, #404]	; (8004a84 <HAL_RCC_OscConfig+0x618>)
 80048ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048f0:	4b64      	ldr	r3, [pc, #400]	; (8004a84 <HAL_RCC_OscConfig+0x618>)
 80048f2:	4967      	ldr	r1, [pc, #412]	; (8004a90 <HAL_RCC_OscConfig+0x624>)
 80048f4:	400a      	ands	r2, r1
 80048f6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	69db      	ldr	r3, [r3, #28]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d100      	bne.n	8004902 <HAL_RCC_OscConfig+0x496>
 8004900:	e0bb      	b.n	8004a7a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004902:	4b60      	ldr	r3, [pc, #384]	; (8004a84 <HAL_RCC_OscConfig+0x618>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	2238      	movs	r2, #56	; 0x38
 8004908:	4013      	ands	r3, r2
 800490a:	2b10      	cmp	r3, #16
 800490c:	d100      	bne.n	8004910 <HAL_RCC_OscConfig+0x4a4>
 800490e:	e07b      	b.n	8004a08 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	69db      	ldr	r3, [r3, #28]
 8004914:	2b02      	cmp	r3, #2
 8004916:	d156      	bne.n	80049c6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004918:	4b5a      	ldr	r3, [pc, #360]	; (8004a84 <HAL_RCC_OscConfig+0x618>)
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	4b59      	ldr	r3, [pc, #356]	; (8004a84 <HAL_RCC_OscConfig+0x618>)
 800491e:	495d      	ldr	r1, [pc, #372]	; (8004a94 <HAL_RCC_OscConfig+0x628>)
 8004920:	400a      	ands	r2, r1
 8004922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004924:	f7ff f93e 	bl	8003ba4 <HAL_GetTick>
 8004928:	0003      	movs	r3, r0
 800492a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800492c:	e008      	b.n	8004940 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800492e:	f7ff f939 	bl	8003ba4 <HAL_GetTick>
 8004932:	0002      	movs	r2, r0
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e09d      	b.n	8004a7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004940:	4b50      	ldr	r3, [pc, #320]	; (8004a84 <HAL_RCC_OscConfig+0x618>)
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	2380      	movs	r3, #128	; 0x80
 8004946:	049b      	lsls	r3, r3, #18
 8004948:	4013      	ands	r3, r2
 800494a:	d1f0      	bne.n	800492e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800494c:	4b4d      	ldr	r3, [pc, #308]	; (8004a84 <HAL_RCC_OscConfig+0x618>)
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	4a51      	ldr	r2, [pc, #324]	; (8004a98 <HAL_RCC_OscConfig+0x62c>)
 8004952:	4013      	ands	r3, r2
 8004954:	0019      	movs	r1, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1a      	ldr	r2, [r3, #32]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004964:	021b      	lsls	r3, r3, #8
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496c:	431a      	orrs	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004972:	431a      	orrs	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004978:	431a      	orrs	r2, r3
 800497a:	4b42      	ldr	r3, [pc, #264]	; (8004a84 <HAL_RCC_OscConfig+0x618>)
 800497c:	430a      	orrs	r2, r1
 800497e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004980:	4b40      	ldr	r3, [pc, #256]	; (8004a84 <HAL_RCC_OscConfig+0x618>)
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	4b3f      	ldr	r3, [pc, #252]	; (8004a84 <HAL_RCC_OscConfig+0x618>)
 8004986:	2180      	movs	r1, #128	; 0x80
 8004988:	0449      	lsls	r1, r1, #17
 800498a:	430a      	orrs	r2, r1
 800498c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800498e:	4b3d      	ldr	r3, [pc, #244]	; (8004a84 <HAL_RCC_OscConfig+0x618>)
 8004990:	68da      	ldr	r2, [r3, #12]
 8004992:	4b3c      	ldr	r3, [pc, #240]	; (8004a84 <HAL_RCC_OscConfig+0x618>)
 8004994:	2180      	movs	r1, #128	; 0x80
 8004996:	0549      	lsls	r1, r1, #21
 8004998:	430a      	orrs	r2, r1
 800499a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499c:	f7ff f902 	bl	8003ba4 <HAL_GetTick>
 80049a0:	0003      	movs	r3, r0
 80049a2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049a4:	e008      	b.n	80049b8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049a6:	f7ff f8fd 	bl	8003ba4 <HAL_GetTick>
 80049aa:	0002      	movs	r2, r0
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d901      	bls.n	80049b8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e061      	b.n	8004a7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049b8:	4b32      	ldr	r3, [pc, #200]	; (8004a84 <HAL_RCC_OscConfig+0x618>)
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	2380      	movs	r3, #128	; 0x80
 80049be:	049b      	lsls	r3, r3, #18
 80049c0:	4013      	ands	r3, r2
 80049c2:	d0f0      	beq.n	80049a6 <HAL_RCC_OscConfig+0x53a>
 80049c4:	e059      	b.n	8004a7a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049c6:	4b2f      	ldr	r3, [pc, #188]	; (8004a84 <HAL_RCC_OscConfig+0x618>)
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	4b2e      	ldr	r3, [pc, #184]	; (8004a84 <HAL_RCC_OscConfig+0x618>)
 80049cc:	4931      	ldr	r1, [pc, #196]	; (8004a94 <HAL_RCC_OscConfig+0x628>)
 80049ce:	400a      	ands	r2, r1
 80049d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d2:	f7ff f8e7 	bl	8003ba4 <HAL_GetTick>
 80049d6:	0003      	movs	r3, r0
 80049d8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049dc:	f7ff f8e2 	bl	8003ba4 <HAL_GetTick>
 80049e0:	0002      	movs	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e046      	b.n	8004a7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049ee:	4b25      	ldr	r3, [pc, #148]	; (8004a84 <HAL_RCC_OscConfig+0x618>)
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	2380      	movs	r3, #128	; 0x80
 80049f4:	049b      	lsls	r3, r3, #18
 80049f6:	4013      	ands	r3, r2
 80049f8:	d1f0      	bne.n	80049dc <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80049fa:	4b22      	ldr	r3, [pc, #136]	; (8004a84 <HAL_RCC_OscConfig+0x618>)
 80049fc:	68da      	ldr	r2, [r3, #12]
 80049fe:	4b21      	ldr	r3, [pc, #132]	; (8004a84 <HAL_RCC_OscConfig+0x618>)
 8004a00:	4926      	ldr	r1, [pc, #152]	; (8004a9c <HAL_RCC_OscConfig+0x630>)
 8004a02:	400a      	ands	r2, r1
 8004a04:	60da      	str	r2, [r3, #12]
 8004a06:	e038      	b.n	8004a7a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	69db      	ldr	r3, [r3, #28]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d101      	bne.n	8004a14 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e033      	b.n	8004a7c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004a14:	4b1b      	ldr	r3, [pc, #108]	; (8004a84 <HAL_RCC_OscConfig+0x618>)
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2203      	movs	r2, #3
 8004a1e:	401a      	ands	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a1b      	ldr	r3, [r3, #32]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d126      	bne.n	8004a76 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	2270      	movs	r2, #112	; 0x70
 8004a2c:	401a      	ands	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d11f      	bne.n	8004a76 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	23fe      	movs	r3, #254	; 0xfe
 8004a3a:	01db      	lsls	r3, r3, #7
 8004a3c:	401a      	ands	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a42:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d116      	bne.n	8004a76 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	23f8      	movs	r3, #248	; 0xf8
 8004a4c:	039b      	lsls	r3, r3, #14
 8004a4e:	401a      	ands	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d10e      	bne.n	8004a76 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	23e0      	movs	r3, #224	; 0xe0
 8004a5c:	051b      	lsls	r3, r3, #20
 8004a5e:	401a      	ands	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d106      	bne.n	8004a76 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	0f5b      	lsrs	r3, r3, #29
 8004a6c:	075a      	lsls	r2, r3, #29
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d001      	beq.n	8004a7a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e000      	b.n	8004a7c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	b008      	add	sp, #32
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	40021000 	.word	0x40021000
 8004a88:	40007000 	.word	0x40007000
 8004a8c:	00001388 	.word	0x00001388
 8004a90:	efffffff 	.word	0xefffffff
 8004a94:	feffffff 	.word	0xfeffffff
 8004a98:	11c1808c 	.word	0x11c1808c
 8004a9c:	eefefffc 	.word	0xeefefffc

08004aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e0e9      	b.n	8004c88 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ab4:	4b76      	ldr	r3, [pc, #472]	; (8004c90 <HAL_RCC_ClockConfig+0x1f0>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2207      	movs	r2, #7
 8004aba:	4013      	ands	r3, r2
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d91e      	bls.n	8004b00 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac2:	4b73      	ldr	r3, [pc, #460]	; (8004c90 <HAL_RCC_ClockConfig+0x1f0>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2207      	movs	r2, #7
 8004ac8:	4393      	bics	r3, r2
 8004aca:	0019      	movs	r1, r3
 8004acc:	4b70      	ldr	r3, [pc, #448]	; (8004c90 <HAL_RCC_ClockConfig+0x1f0>)
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004ad4:	f7ff f866 	bl	8003ba4 <HAL_GetTick>
 8004ad8:	0003      	movs	r3, r0
 8004ada:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004adc:	e009      	b.n	8004af2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ade:	f7ff f861 	bl	8003ba4 <HAL_GetTick>
 8004ae2:	0002      	movs	r2, r0
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	4a6a      	ldr	r2, [pc, #424]	; (8004c94 <HAL_RCC_ClockConfig+0x1f4>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e0ca      	b.n	8004c88 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004af2:	4b67      	ldr	r3, [pc, #412]	; (8004c90 <HAL_RCC_ClockConfig+0x1f0>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2207      	movs	r2, #7
 8004af8:	4013      	ands	r3, r2
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d1ee      	bne.n	8004ade <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2202      	movs	r2, #2
 8004b06:	4013      	ands	r3, r2
 8004b08:	d015      	beq.n	8004b36 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2204      	movs	r2, #4
 8004b10:	4013      	ands	r3, r2
 8004b12:	d006      	beq.n	8004b22 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004b14:	4b60      	ldr	r3, [pc, #384]	; (8004c98 <HAL_RCC_ClockConfig+0x1f8>)
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	4b5f      	ldr	r3, [pc, #380]	; (8004c98 <HAL_RCC_ClockConfig+0x1f8>)
 8004b1a:	21e0      	movs	r1, #224	; 0xe0
 8004b1c:	01c9      	lsls	r1, r1, #7
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b22:	4b5d      	ldr	r3, [pc, #372]	; (8004c98 <HAL_RCC_ClockConfig+0x1f8>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	4a5d      	ldr	r2, [pc, #372]	; (8004c9c <HAL_RCC_ClockConfig+0x1fc>)
 8004b28:	4013      	ands	r3, r2
 8004b2a:	0019      	movs	r1, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	4b59      	ldr	r3, [pc, #356]	; (8004c98 <HAL_RCC_ClockConfig+0x1f8>)
 8004b32:	430a      	orrs	r2, r1
 8004b34:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	d057      	beq.n	8004bf0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d107      	bne.n	8004b58 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b48:	4b53      	ldr	r3, [pc, #332]	; (8004c98 <HAL_RCC_ClockConfig+0x1f8>)
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	2380      	movs	r3, #128	; 0x80
 8004b4e:	029b      	lsls	r3, r3, #10
 8004b50:	4013      	ands	r3, r2
 8004b52:	d12b      	bne.n	8004bac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e097      	b.n	8004c88 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d107      	bne.n	8004b70 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b60:	4b4d      	ldr	r3, [pc, #308]	; (8004c98 <HAL_RCC_ClockConfig+0x1f8>)
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	2380      	movs	r3, #128	; 0x80
 8004b66:	049b      	lsls	r3, r3, #18
 8004b68:	4013      	ands	r3, r2
 8004b6a:	d11f      	bne.n	8004bac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e08b      	b.n	8004c88 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d107      	bne.n	8004b88 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b78:	4b47      	ldr	r3, [pc, #284]	; (8004c98 <HAL_RCC_ClockConfig+0x1f8>)
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	2380      	movs	r3, #128	; 0x80
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	4013      	ands	r3, r2
 8004b82:	d113      	bne.n	8004bac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e07f      	b.n	8004c88 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	2b03      	cmp	r3, #3
 8004b8e:	d106      	bne.n	8004b9e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b90:	4b41      	ldr	r3, [pc, #260]	; (8004c98 <HAL_RCC_ClockConfig+0x1f8>)
 8004b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b94:	2202      	movs	r2, #2
 8004b96:	4013      	ands	r3, r2
 8004b98:	d108      	bne.n	8004bac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e074      	b.n	8004c88 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b9e:	4b3e      	ldr	r3, [pc, #248]	; (8004c98 <HAL_RCC_ClockConfig+0x1f8>)
 8004ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	d101      	bne.n	8004bac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e06d      	b.n	8004c88 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bac:	4b3a      	ldr	r3, [pc, #232]	; (8004c98 <HAL_RCC_ClockConfig+0x1f8>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	2207      	movs	r2, #7
 8004bb2:	4393      	bics	r3, r2
 8004bb4:	0019      	movs	r1, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	4b37      	ldr	r3, [pc, #220]	; (8004c98 <HAL_RCC_ClockConfig+0x1f8>)
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bc0:	f7fe fff0 	bl	8003ba4 <HAL_GetTick>
 8004bc4:	0003      	movs	r3, r0
 8004bc6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bc8:	e009      	b.n	8004bde <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bca:	f7fe ffeb 	bl	8003ba4 <HAL_GetTick>
 8004bce:	0002      	movs	r2, r0
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	4a2f      	ldr	r2, [pc, #188]	; (8004c94 <HAL_RCC_ClockConfig+0x1f4>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e054      	b.n	8004c88 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bde:	4b2e      	ldr	r3, [pc, #184]	; (8004c98 <HAL_RCC_ClockConfig+0x1f8>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	2238      	movs	r2, #56	; 0x38
 8004be4:	401a      	ands	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d1ec      	bne.n	8004bca <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bf0:	4b27      	ldr	r3, [pc, #156]	; (8004c90 <HAL_RCC_ClockConfig+0x1f0>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2207      	movs	r2, #7
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d21e      	bcs.n	8004c3c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bfe:	4b24      	ldr	r3, [pc, #144]	; (8004c90 <HAL_RCC_ClockConfig+0x1f0>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2207      	movs	r2, #7
 8004c04:	4393      	bics	r3, r2
 8004c06:	0019      	movs	r1, r3
 8004c08:	4b21      	ldr	r3, [pc, #132]	; (8004c90 <HAL_RCC_ClockConfig+0x1f0>)
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c10:	f7fe ffc8 	bl	8003ba4 <HAL_GetTick>
 8004c14:	0003      	movs	r3, r0
 8004c16:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c18:	e009      	b.n	8004c2e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c1a:	f7fe ffc3 	bl	8003ba4 <HAL_GetTick>
 8004c1e:	0002      	movs	r2, r0
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	4a1b      	ldr	r2, [pc, #108]	; (8004c94 <HAL_RCC_ClockConfig+0x1f4>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e02c      	b.n	8004c88 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c2e:	4b18      	ldr	r3, [pc, #96]	; (8004c90 <HAL_RCC_ClockConfig+0x1f0>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2207      	movs	r2, #7
 8004c34:	4013      	ands	r3, r2
 8004c36:	683a      	ldr	r2, [r7, #0]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d1ee      	bne.n	8004c1a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2204      	movs	r2, #4
 8004c42:	4013      	ands	r3, r2
 8004c44:	d009      	beq.n	8004c5a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004c46:	4b14      	ldr	r3, [pc, #80]	; (8004c98 <HAL_RCC_ClockConfig+0x1f8>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	4a15      	ldr	r2, [pc, #84]	; (8004ca0 <HAL_RCC_ClockConfig+0x200>)
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	0019      	movs	r1, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68da      	ldr	r2, [r3, #12]
 8004c54:	4b10      	ldr	r3, [pc, #64]	; (8004c98 <HAL_RCC_ClockConfig+0x1f8>)
 8004c56:	430a      	orrs	r2, r1
 8004c58:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004c5a:	f000 f829 	bl	8004cb0 <HAL_RCC_GetSysClockFreq>
 8004c5e:	0001      	movs	r1, r0
 8004c60:	4b0d      	ldr	r3, [pc, #52]	; (8004c98 <HAL_RCC_ClockConfig+0x1f8>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	0a1b      	lsrs	r3, r3, #8
 8004c66:	220f      	movs	r2, #15
 8004c68:	401a      	ands	r2, r3
 8004c6a:	4b0e      	ldr	r3, [pc, #56]	; (8004ca4 <HAL_RCC_ClockConfig+0x204>)
 8004c6c:	0092      	lsls	r2, r2, #2
 8004c6e:	58d3      	ldr	r3, [r2, r3]
 8004c70:	221f      	movs	r2, #31
 8004c72:	4013      	ands	r3, r2
 8004c74:	000a      	movs	r2, r1
 8004c76:	40da      	lsrs	r2, r3
 8004c78:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <HAL_RCC_ClockConfig+0x208>)
 8004c7a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004c7c:	4b0b      	ldr	r3, [pc, #44]	; (8004cac <HAL_RCC_ClockConfig+0x20c>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	0018      	movs	r0, r3
 8004c82:	f7fe ff33 	bl	8003aec <HAL_InitTick>
 8004c86:	0003      	movs	r3, r0
}
 8004c88:	0018      	movs	r0, r3
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	b004      	add	sp, #16
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	40022000 	.word	0x40022000
 8004c94:	00001388 	.word	0x00001388
 8004c98:	40021000 	.word	0x40021000
 8004c9c:	fffff0ff 	.word	0xfffff0ff
 8004ca0:	ffff8fff 	.word	0xffff8fff
 8004ca4:	08014dc0 	.word	0x08014dc0
 8004ca8:	20000024 	.word	0x20000024
 8004cac:	20000028 	.word	0x20000028

08004cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cb6:	4b3c      	ldr	r3, [pc, #240]	; (8004da8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	2238      	movs	r2, #56	; 0x38
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	d10f      	bne.n	8004ce0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004cc0:	4b39      	ldr	r3, [pc, #228]	; (8004da8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	0adb      	lsrs	r3, r3, #11
 8004cc6:	2207      	movs	r2, #7
 8004cc8:	4013      	ands	r3, r2
 8004cca:	2201      	movs	r2, #1
 8004ccc:	409a      	lsls	r2, r3
 8004cce:	0013      	movs	r3, r2
 8004cd0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004cd2:	6839      	ldr	r1, [r7, #0]
 8004cd4:	4835      	ldr	r0, [pc, #212]	; (8004dac <HAL_RCC_GetSysClockFreq+0xfc>)
 8004cd6:	f7fb fa31 	bl	800013c <__udivsi3>
 8004cda:	0003      	movs	r3, r0
 8004cdc:	613b      	str	r3, [r7, #16]
 8004cde:	e05d      	b.n	8004d9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ce0:	4b31      	ldr	r3, [pc, #196]	; (8004da8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	2238      	movs	r2, #56	; 0x38
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d102      	bne.n	8004cf2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004cec:	4b30      	ldr	r3, [pc, #192]	; (8004db0 <HAL_RCC_GetSysClockFreq+0x100>)
 8004cee:	613b      	str	r3, [r7, #16]
 8004cf0:	e054      	b.n	8004d9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cf2:	4b2d      	ldr	r3, [pc, #180]	; (8004da8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	2238      	movs	r2, #56	; 0x38
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	2b10      	cmp	r3, #16
 8004cfc:	d138      	bne.n	8004d70 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004cfe:	4b2a      	ldr	r3, [pc, #168]	; (8004da8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	2203      	movs	r2, #3
 8004d04:	4013      	ands	r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d08:	4b27      	ldr	r3, [pc, #156]	; (8004da8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	091b      	lsrs	r3, r3, #4
 8004d0e:	2207      	movs	r2, #7
 8004d10:	4013      	ands	r3, r2
 8004d12:	3301      	adds	r3, #1
 8004d14:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2b03      	cmp	r3, #3
 8004d1a:	d10d      	bne.n	8004d38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d1c:	68b9      	ldr	r1, [r7, #8]
 8004d1e:	4824      	ldr	r0, [pc, #144]	; (8004db0 <HAL_RCC_GetSysClockFreq+0x100>)
 8004d20:	f7fb fa0c 	bl	800013c <__udivsi3>
 8004d24:	0003      	movs	r3, r0
 8004d26:	0019      	movs	r1, r3
 8004d28:	4b1f      	ldr	r3, [pc, #124]	; (8004da8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	0a1b      	lsrs	r3, r3, #8
 8004d2e:	227f      	movs	r2, #127	; 0x7f
 8004d30:	4013      	ands	r3, r2
 8004d32:	434b      	muls	r3, r1
 8004d34:	617b      	str	r3, [r7, #20]
        break;
 8004d36:	e00d      	b.n	8004d54 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004d38:	68b9      	ldr	r1, [r7, #8]
 8004d3a:	481c      	ldr	r0, [pc, #112]	; (8004dac <HAL_RCC_GetSysClockFreq+0xfc>)
 8004d3c:	f7fb f9fe 	bl	800013c <__udivsi3>
 8004d40:	0003      	movs	r3, r0
 8004d42:	0019      	movs	r1, r3
 8004d44:	4b18      	ldr	r3, [pc, #96]	; (8004da8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	0a1b      	lsrs	r3, r3, #8
 8004d4a:	227f      	movs	r2, #127	; 0x7f
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	434b      	muls	r3, r1
 8004d50:	617b      	str	r3, [r7, #20]
        break;
 8004d52:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004d54:	4b14      	ldr	r3, [pc, #80]	; (8004da8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	0f5b      	lsrs	r3, r3, #29
 8004d5a:	2207      	movs	r2, #7
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	3301      	adds	r3, #1
 8004d60:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004d62:	6879      	ldr	r1, [r7, #4]
 8004d64:	6978      	ldr	r0, [r7, #20]
 8004d66:	f7fb f9e9 	bl	800013c <__udivsi3>
 8004d6a:	0003      	movs	r3, r0
 8004d6c:	613b      	str	r3, [r7, #16]
 8004d6e:	e015      	b.n	8004d9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004d70:	4b0d      	ldr	r3, [pc, #52]	; (8004da8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	2238      	movs	r2, #56	; 0x38
 8004d76:	4013      	ands	r3, r2
 8004d78:	2b20      	cmp	r3, #32
 8004d7a:	d103      	bne.n	8004d84 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004d7c:	2380      	movs	r3, #128	; 0x80
 8004d7e:	021b      	lsls	r3, r3, #8
 8004d80:	613b      	str	r3, [r7, #16]
 8004d82:	e00b      	b.n	8004d9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004d84:	4b08      	ldr	r3, [pc, #32]	; (8004da8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	2238      	movs	r2, #56	; 0x38
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	2b18      	cmp	r3, #24
 8004d8e:	d103      	bne.n	8004d98 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004d90:	23fa      	movs	r3, #250	; 0xfa
 8004d92:	01db      	lsls	r3, r3, #7
 8004d94:	613b      	str	r3, [r7, #16]
 8004d96:	e001      	b.n	8004d9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004d9c:	693b      	ldr	r3, [r7, #16]
}
 8004d9e:	0018      	movs	r0, r3
 8004da0:	46bd      	mov	sp, r7
 8004da2:	b006      	add	sp, #24
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	46c0      	nop			; (mov r8, r8)
 8004da8:	40021000 	.word	0x40021000
 8004dac:	00f42400 	.word	0x00f42400
 8004db0:	007a1200 	.word	0x007a1200

08004db4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004db8:	4b02      	ldr	r3, [pc, #8]	; (8004dc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004dba:	681b      	ldr	r3, [r3, #0]
}
 8004dbc:	0018      	movs	r0, r3
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	46c0      	nop			; (mov r8, r8)
 8004dc4:	20000024 	.word	0x20000024

08004dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dc8:	b5b0      	push	{r4, r5, r7, lr}
 8004dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004dcc:	f7ff fff2 	bl	8004db4 <HAL_RCC_GetHCLKFreq>
 8004dd0:	0004      	movs	r4, r0
 8004dd2:	f7ff fb3f 	bl	8004454 <LL_RCC_GetAPB1Prescaler>
 8004dd6:	0003      	movs	r3, r0
 8004dd8:	0b1a      	lsrs	r2, r3, #12
 8004dda:	4b05      	ldr	r3, [pc, #20]	; (8004df0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ddc:	0092      	lsls	r2, r2, #2
 8004dde:	58d3      	ldr	r3, [r2, r3]
 8004de0:	221f      	movs	r2, #31
 8004de2:	4013      	ands	r3, r2
 8004de4:	40dc      	lsrs	r4, r3
 8004de6:	0023      	movs	r3, r4
}
 8004de8:	0018      	movs	r0, r3
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bdb0      	pop	{r4, r5, r7, pc}
 8004dee:	46c0      	nop			; (mov r8, r8)
 8004df0:	08014e00 	.word	0x08014e00

08004df4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004dfc:	2313      	movs	r3, #19
 8004dfe:	18fb      	adds	r3, r7, r3
 8004e00:	2200      	movs	r2, #0
 8004e02:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e04:	2312      	movs	r3, #18
 8004e06:	18fb      	adds	r3, r7, r3
 8004e08:	2200      	movs	r2, #0
 8004e0a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	2380      	movs	r3, #128	; 0x80
 8004e12:	029b      	lsls	r3, r3, #10
 8004e14:	4013      	ands	r3, r2
 8004e16:	d100      	bne.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004e18:	e0a3      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e1a:	2011      	movs	r0, #17
 8004e1c:	183b      	adds	r3, r7, r0
 8004e1e:	2200      	movs	r2, #0
 8004e20:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e22:	4bc3      	ldr	r3, [pc, #780]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e26:	2380      	movs	r3, #128	; 0x80
 8004e28:	055b      	lsls	r3, r3, #21
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	d110      	bne.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e2e:	4bc0      	ldr	r3, [pc, #768]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e32:	4bbf      	ldr	r3, [pc, #764]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e34:	2180      	movs	r1, #128	; 0x80
 8004e36:	0549      	lsls	r1, r1, #21
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004e3c:	4bbc      	ldr	r3, [pc, #752]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e40:	2380      	movs	r3, #128	; 0x80
 8004e42:	055b      	lsls	r3, r3, #21
 8004e44:	4013      	ands	r3, r2
 8004e46:	60bb      	str	r3, [r7, #8]
 8004e48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e4a:	183b      	adds	r3, r7, r0
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e50:	4bb8      	ldr	r3, [pc, #736]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	4bb7      	ldr	r3, [pc, #732]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004e56:	2180      	movs	r1, #128	; 0x80
 8004e58:	0049      	lsls	r1, r1, #1
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e5e:	f7fe fea1 	bl	8003ba4 <HAL_GetTick>
 8004e62:	0003      	movs	r3, r0
 8004e64:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e66:	e00b      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e68:	f7fe fe9c 	bl	8003ba4 <HAL_GetTick>
 8004e6c:	0002      	movs	r2, r0
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d904      	bls.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004e76:	2313      	movs	r3, #19
 8004e78:	18fb      	adds	r3, r7, r3
 8004e7a:	2203      	movs	r2, #3
 8004e7c:	701a      	strb	r2, [r3, #0]
        break;
 8004e7e:	e005      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e80:	4bac      	ldr	r3, [pc, #688]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	2380      	movs	r3, #128	; 0x80
 8004e86:	005b      	lsls	r3, r3, #1
 8004e88:	4013      	ands	r3, r2
 8004e8a:	d0ed      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004e8c:	2313      	movs	r3, #19
 8004e8e:	18fb      	adds	r3, r7, r3
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d154      	bne.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e96:	4ba6      	ldr	r3, [pc, #664]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e9a:	23c0      	movs	r3, #192	; 0xc0
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d019      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d014      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004eb2:	4b9f      	ldr	r3, [pc, #636]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb6:	4aa0      	ldr	r2, [pc, #640]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004eb8:	4013      	ands	r3, r2
 8004eba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ebc:	4b9c      	ldr	r3, [pc, #624]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ebe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ec0:	4b9b      	ldr	r3, [pc, #620]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ec2:	2180      	movs	r1, #128	; 0x80
 8004ec4:	0249      	lsls	r1, r1, #9
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004eca:	4b99      	ldr	r3, [pc, #612]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ecc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ece:	4b98      	ldr	r3, [pc, #608]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ed0:	499a      	ldr	r1, [pc, #616]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004ed2:	400a      	ands	r2, r1
 8004ed4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ed6:	4b96      	ldr	r3, [pc, #600]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	d016      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee4:	f7fe fe5e 	bl	8003ba4 <HAL_GetTick>
 8004ee8:	0003      	movs	r3, r0
 8004eea:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eec:	e00c      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eee:	f7fe fe59 	bl	8003ba4 <HAL_GetTick>
 8004ef2:	0002      	movs	r2, r0
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	4a91      	ldr	r2, [pc, #580]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d904      	bls.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004efe:	2313      	movs	r3, #19
 8004f00:	18fb      	adds	r3, r7, r3
 8004f02:	2203      	movs	r2, #3
 8004f04:	701a      	strb	r2, [r3, #0]
            break;
 8004f06:	e004      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f08:	4b89      	ldr	r3, [pc, #548]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f0c:	2202      	movs	r2, #2
 8004f0e:	4013      	ands	r3, r2
 8004f10:	d0ed      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004f12:	2313      	movs	r3, #19
 8004f14:	18fb      	adds	r3, r7, r3
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10a      	bne.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f1c:	4b84      	ldr	r3, [pc, #528]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f20:	4a85      	ldr	r2, [pc, #532]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004f22:	4013      	ands	r3, r2
 8004f24:	0019      	movs	r1, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f2a:	4b81      	ldr	r3, [pc, #516]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f30:	e00c      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f32:	2312      	movs	r3, #18
 8004f34:	18fb      	adds	r3, r7, r3
 8004f36:	2213      	movs	r2, #19
 8004f38:	18ba      	adds	r2, r7, r2
 8004f3a:	7812      	ldrb	r2, [r2, #0]
 8004f3c:	701a      	strb	r2, [r3, #0]
 8004f3e:	e005      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f40:	2312      	movs	r3, #18
 8004f42:	18fb      	adds	r3, r7, r3
 8004f44:	2213      	movs	r2, #19
 8004f46:	18ba      	adds	r2, r7, r2
 8004f48:	7812      	ldrb	r2, [r2, #0]
 8004f4a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f4c:	2311      	movs	r3, #17
 8004f4e:	18fb      	adds	r3, r7, r3
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d105      	bne.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f56:	4b76      	ldr	r3, [pc, #472]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f5a:	4b75      	ldr	r3, [pc, #468]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f5c:	4979      	ldr	r1, [pc, #484]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004f5e:	400a      	ands	r2, r1
 8004f60:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2201      	movs	r2, #1
 8004f68:	4013      	ands	r3, r2
 8004f6a:	d009      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f6c:	4b70      	ldr	r3, [pc, #448]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f70:	2203      	movs	r2, #3
 8004f72:	4393      	bics	r3, r2
 8004f74:	0019      	movs	r1, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685a      	ldr	r2, [r3, #4]
 8004f7a:	4b6d      	ldr	r3, [pc, #436]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2202      	movs	r2, #2
 8004f86:	4013      	ands	r3, r2
 8004f88:	d009      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f8a:	4b69      	ldr	r3, [pc, #420]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8e:	220c      	movs	r2, #12
 8004f90:	4393      	bics	r3, r2
 8004f92:	0019      	movs	r1, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	4b65      	ldr	r3, [pc, #404]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2210      	movs	r2, #16
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	d009      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fa8:	4b61      	ldr	r3, [pc, #388]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fac:	4a66      	ldr	r2, [pc, #408]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004fae:	4013      	ands	r3, r2
 8004fb0:	0019      	movs	r1, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68da      	ldr	r2, [r3, #12]
 8004fb6:	4b5e      	ldr	r3, [pc, #376]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	2380      	movs	r3, #128	; 0x80
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	d009      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fc8:	4b59      	ldr	r3, [pc, #356]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fcc:	4a5f      	ldr	r2, [pc, #380]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004fce:	4013      	ands	r3, r2
 8004fd0:	0019      	movs	r1, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	699a      	ldr	r2, [r3, #24]
 8004fd6:	4b56      	ldr	r3, [pc, #344]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	2380      	movs	r3, #128	; 0x80
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	d009      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004fe8:	4b51      	ldr	r3, [pc, #324]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fec:	4a58      	ldr	r2, [pc, #352]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fee:	4013      	ands	r3, r2
 8004ff0:	0019      	movs	r1, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	69da      	ldr	r2, [r3, #28]
 8004ff6:	4b4e      	ldr	r3, [pc, #312]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2220      	movs	r2, #32
 8005002:	4013      	ands	r3, r2
 8005004:	d009      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005006:	4b4a      	ldr	r3, [pc, #296]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500a:	4a52      	ldr	r2, [pc, #328]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800500c:	4013      	ands	r3, r2
 800500e:	0019      	movs	r1, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	691a      	ldr	r2, [r3, #16]
 8005014:	4b46      	ldr	r3, [pc, #280]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005016:	430a      	orrs	r2, r1
 8005018:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	2380      	movs	r3, #128	; 0x80
 8005020:	01db      	lsls	r3, r3, #7
 8005022:	4013      	ands	r3, r2
 8005024:	d015      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005026:	4b42      	ldr	r3, [pc, #264]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	0899      	lsrs	r1, r3, #2
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1a      	ldr	r2, [r3, #32]
 8005032:	4b3f      	ldr	r3, [pc, #252]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005034:	430a      	orrs	r2, r1
 8005036:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a1a      	ldr	r2, [r3, #32]
 800503c:	2380      	movs	r3, #128	; 0x80
 800503e:	05db      	lsls	r3, r3, #23
 8005040:	429a      	cmp	r2, r3
 8005042:	d106      	bne.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005044:	4b3a      	ldr	r3, [pc, #232]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005046:	68da      	ldr	r2, [r3, #12]
 8005048:	4b39      	ldr	r3, [pc, #228]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800504a:	2180      	movs	r1, #128	; 0x80
 800504c:	0249      	lsls	r1, r1, #9
 800504e:	430a      	orrs	r2, r1
 8005050:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	2380      	movs	r3, #128	; 0x80
 8005058:	031b      	lsls	r3, r3, #12
 800505a:	4013      	ands	r3, r2
 800505c:	d009      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800505e:	4b34      	ldr	r3, [pc, #208]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005062:	2240      	movs	r2, #64	; 0x40
 8005064:	4393      	bics	r3, r2
 8005066:	0019      	movs	r1, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800506c:	4b30      	ldr	r3, [pc, #192]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800506e:	430a      	orrs	r2, r1
 8005070:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	2380      	movs	r3, #128	; 0x80
 8005078:	039b      	lsls	r3, r3, #14
 800507a:	4013      	ands	r3, r2
 800507c:	d016      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800507e:	4b2c      	ldr	r3, [pc, #176]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005082:	4a35      	ldr	r2, [pc, #212]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005084:	4013      	ands	r3, r2
 8005086:	0019      	movs	r1, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800508c:	4b28      	ldr	r3, [pc, #160]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800508e:	430a      	orrs	r2, r1
 8005090:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005096:	2380      	movs	r3, #128	; 0x80
 8005098:	03db      	lsls	r3, r3, #15
 800509a:	429a      	cmp	r2, r3
 800509c:	d106      	bne.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800509e:	4b24      	ldr	r3, [pc, #144]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	4b23      	ldr	r3, [pc, #140]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050a4:	2180      	movs	r1, #128	; 0x80
 80050a6:	0449      	lsls	r1, r1, #17
 80050a8:	430a      	orrs	r2, r1
 80050aa:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	2380      	movs	r3, #128	; 0x80
 80050b2:	03db      	lsls	r3, r3, #15
 80050b4:	4013      	ands	r3, r2
 80050b6:	d016      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80050b8:	4b1d      	ldr	r3, [pc, #116]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050bc:	4a27      	ldr	r2, [pc, #156]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80050be:	4013      	ands	r3, r2
 80050c0:	0019      	movs	r1, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c6:	4b1a      	ldr	r3, [pc, #104]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050c8:	430a      	orrs	r2, r1
 80050ca:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d0:	2380      	movs	r3, #128	; 0x80
 80050d2:	045b      	lsls	r3, r3, #17
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d106      	bne.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80050d8:	4b15      	ldr	r3, [pc, #84]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050da:	68da      	ldr	r2, [r3, #12]
 80050dc:	4b14      	ldr	r3, [pc, #80]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050de:	2180      	movs	r1, #128	; 0x80
 80050e0:	0449      	lsls	r1, r1, #17
 80050e2:	430a      	orrs	r2, r1
 80050e4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	2380      	movs	r3, #128	; 0x80
 80050ec:	011b      	lsls	r3, r3, #4
 80050ee:	4013      	ands	r3, r2
 80050f0:	d016      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80050f2:	4b0f      	ldr	r3, [pc, #60]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f6:	4a1a      	ldr	r2, [pc, #104]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80050f8:	4013      	ands	r3, r2
 80050fa:	0019      	movs	r1, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	695a      	ldr	r2, [r3, #20]
 8005100:	4b0b      	ldr	r3, [pc, #44]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005102:	430a      	orrs	r2, r1
 8005104:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	695a      	ldr	r2, [r3, #20]
 800510a:	2380      	movs	r3, #128	; 0x80
 800510c:	01db      	lsls	r3, r3, #7
 800510e:	429a      	cmp	r2, r3
 8005110:	d106      	bne.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005112:	4b07      	ldr	r3, [pc, #28]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005114:	68da      	ldr	r2, [r3, #12]
 8005116:	4b06      	ldr	r3, [pc, #24]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005118:	2180      	movs	r1, #128	; 0x80
 800511a:	0249      	lsls	r1, r1, #9
 800511c:	430a      	orrs	r2, r1
 800511e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005120:	2312      	movs	r3, #18
 8005122:	18fb      	adds	r3, r7, r3
 8005124:	781b      	ldrb	r3, [r3, #0]
}
 8005126:	0018      	movs	r0, r3
 8005128:	46bd      	mov	sp, r7
 800512a:	b006      	add	sp, #24
 800512c:	bd80      	pop	{r7, pc}
 800512e:	46c0      	nop			; (mov r8, r8)
 8005130:	40021000 	.word	0x40021000
 8005134:	40007000 	.word	0x40007000
 8005138:	fffffcff 	.word	0xfffffcff
 800513c:	fffeffff 	.word	0xfffeffff
 8005140:	00001388 	.word	0x00001388
 8005144:	efffffff 	.word	0xefffffff
 8005148:	fffff3ff 	.word	0xfffff3ff
 800514c:	fff3ffff 	.word	0xfff3ffff
 8005150:	ffcfffff 	.word	0xffcfffff
 8005154:	ffffcfff 	.word	0xffffcfff
 8005158:	ffbfffff 	.word	0xffbfffff
 800515c:	feffffff 	.word	0xfeffffff
 8005160:	ffff3fff 	.word	0xffff3fff

08005164 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005164:	b5b0      	push	{r4, r5, r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800516c:	230f      	movs	r3, #15
 800516e:	18fb      	adds	r3, r7, r3
 8005170:	2201      	movs	r2, #1
 8005172:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d100      	bne.n	800517c <HAL_RTC_Init+0x18>
 800517a:	e08c      	b.n	8005296 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2229      	movs	r2, #41	; 0x29
 8005180:	5c9b      	ldrb	r3, [r3, r2]
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10b      	bne.n	80051a0 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2228      	movs	r2, #40	; 0x28
 800518c:	2100      	movs	r1, #0
 800518e:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2288      	movs	r2, #136	; 0x88
 8005194:	0212      	lsls	r2, r2, #8
 8005196:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	0018      	movs	r0, r3
 800519c:	f7fe f97c 	bl	8003498 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2229      	movs	r2, #41	; 0x29
 80051a4:	2102      	movs	r1, #2
 80051a6:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	2210      	movs	r2, #16
 80051b0:	4013      	ands	r3, r2
 80051b2:	2b10      	cmp	r3, #16
 80051b4:	d062      	beq.n	800527c <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	22ca      	movs	r2, #202	; 0xca
 80051bc:	625a      	str	r2, [r3, #36]	; 0x24
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2253      	movs	r2, #83	; 0x53
 80051c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80051c6:	250f      	movs	r5, #15
 80051c8:	197c      	adds	r4, r7, r5
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	0018      	movs	r0, r3
 80051ce:	f000 fb9c 	bl	800590a <RTC_EnterInitMode>
 80051d2:	0003      	movs	r3, r0
 80051d4:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80051d6:	0028      	movs	r0, r5
 80051d8:	183b      	adds	r3, r7, r0
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d12c      	bne.n	800523a <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	699a      	ldr	r2, [r3, #24]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	492e      	ldr	r1, [pc, #184]	; (80052a4 <HAL_RTC_Init+0x140>)
 80051ec:	400a      	ands	r2, r1
 80051ee:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6999      	ldr	r1, [r3, #24]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689a      	ldr	r2, [r3, #8]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	431a      	orrs	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	431a      	orrs	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	6912      	ldr	r2, [r2, #16]
 8005216:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6919      	ldr	r1, [r3, #16]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	041a      	lsls	r2, r3, #16
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	430a      	orrs	r2, r1
 800522a:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800522c:	183c      	adds	r4, r7, r0
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	0018      	movs	r0, r3
 8005232:	f000 fbad 	bl	8005990 <RTC_ExitInitMode>
 8005236:	0003      	movs	r3, r0
 8005238:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800523a:	230f      	movs	r3, #15
 800523c:	18fb      	adds	r3, r7, r3
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d116      	bne.n	8005272 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	699a      	ldr	r2, [r3, #24]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	00d2      	lsls	r2, r2, #3
 8005250:	08d2      	lsrs	r2, r2, #3
 8005252:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6999      	ldr	r1, [r3, #24]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	431a      	orrs	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	431a      	orrs	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	22ff      	movs	r2, #255	; 0xff
 8005278:	625a      	str	r2, [r3, #36]	; 0x24
 800527a:	e003      	b.n	8005284 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800527c:	230f      	movs	r3, #15
 800527e:	18fb      	adds	r3, r7, r3
 8005280:	2200      	movs	r2, #0
 8005282:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8005284:	230f      	movs	r3, #15
 8005286:	18fb      	adds	r3, r7, r3
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d103      	bne.n	8005296 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2229      	movs	r2, #41	; 0x29
 8005292:	2101      	movs	r1, #1
 8005294:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8005296:	230f      	movs	r3, #15
 8005298:	18fb      	adds	r3, r7, r3
 800529a:	781b      	ldrb	r3, [r3, #0]
}
 800529c:	0018      	movs	r0, r3
 800529e:	46bd      	mov	sp, r7
 80052a0:	b004      	add	sp, #16
 80052a2:	bdb0      	pop	{r4, r5, r7, pc}
 80052a4:	fb8fffbf 	.word	0xfb8fffbf

080052a8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80052a8:	b5b0      	push	{r4, r5, r7, lr}
 80052aa:	b086      	sub	sp, #24
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2228      	movs	r2, #40	; 0x28
 80052b8:	5c9b      	ldrb	r3, [r3, r2]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d101      	bne.n	80052c2 <HAL_RTC_SetTime+0x1a>
 80052be:	2302      	movs	r3, #2
 80052c0:	e092      	b.n	80053e8 <HAL_RTC_SetTime+0x140>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2228      	movs	r2, #40	; 0x28
 80052c6:	2101      	movs	r1, #1
 80052c8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2229      	movs	r2, #41	; 0x29
 80052ce:	2102      	movs	r1, #2
 80052d0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	22ca      	movs	r2, #202	; 0xca
 80052d8:	625a      	str	r2, [r3, #36]	; 0x24
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2253      	movs	r2, #83	; 0x53
 80052e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80052e2:	2513      	movs	r5, #19
 80052e4:	197c      	adds	r4, r7, r5
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	0018      	movs	r0, r3
 80052ea:	f000 fb0e 	bl	800590a <RTC_EnterInitMode>
 80052ee:	0003      	movs	r3, r0
 80052f0:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80052f2:	197b      	adds	r3, r7, r5
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d162      	bne.n	80053c0 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d125      	bne.n	800534c <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	2240      	movs	r2, #64	; 0x40
 8005308:	4013      	ands	r3, r2
 800530a:	d102      	bne.n	8005312 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	2200      	movs	r2, #0
 8005310:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	0018      	movs	r0, r3
 8005318:	f000 fb7e 	bl	8005a18 <RTC_ByteToBcd2>
 800531c:	0003      	movs	r3, r0
 800531e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	785b      	ldrb	r3, [r3, #1]
 8005324:	0018      	movs	r0, r3
 8005326:	f000 fb77 	bl	8005a18 <RTC_ByteToBcd2>
 800532a:	0003      	movs	r3, r0
 800532c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800532e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	789b      	ldrb	r3, [r3, #2]
 8005334:	0018      	movs	r0, r3
 8005336:	f000 fb6f 	bl	8005a18 <RTC_ByteToBcd2>
 800533a:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800533c:	0022      	movs	r2, r4
 800533e:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	78db      	ldrb	r3, [r3, #3]
 8005344:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005346:	4313      	orrs	r3, r2
 8005348:	617b      	str	r3, [r7, #20]
 800534a:	e017      	b.n	800537c <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	2240      	movs	r2, #64	; 0x40
 8005354:	4013      	ands	r3, r2
 8005356:	d102      	bne.n	800535e <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	2200      	movs	r2, #0
 800535c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	785b      	ldrb	r3, [r3, #1]
 8005368:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800536a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005370:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	78db      	ldrb	r3, [r3, #3]
 8005376:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005378:	4313      	orrs	r3, r2
 800537a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	491b      	ldr	r1, [pc, #108]	; (80053f0 <HAL_RTC_SetTime+0x148>)
 8005384:	400a      	ands	r2, r1
 8005386:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	699a      	ldr	r2, [r3, #24]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4918      	ldr	r1, [pc, #96]	; (80053f4 <HAL_RTC_SetTime+0x14c>)
 8005394:	400a      	ands	r2, r1
 8005396:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6999      	ldr	r1, [r3, #24]
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	68da      	ldr	r2, [r3, #12]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	431a      	orrs	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80053b0:	2313      	movs	r3, #19
 80053b2:	18fc      	adds	r4, r7, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	0018      	movs	r0, r3
 80053b8:	f000 faea 	bl	8005990 <RTC_ExitInitMode>
 80053bc:	0003      	movs	r3, r0
 80053be:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	22ff      	movs	r2, #255	; 0xff
 80053c6:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 80053c8:	2313      	movs	r3, #19
 80053ca:	18fb      	adds	r3, r7, r3
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d103      	bne.n	80053da <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2229      	movs	r2, #41	; 0x29
 80053d6:	2101      	movs	r1, #1
 80053d8:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2228      	movs	r2, #40	; 0x28
 80053de:	2100      	movs	r1, #0
 80053e0:	5499      	strb	r1, [r3, r2]

  return status;
 80053e2:	2313      	movs	r3, #19
 80053e4:	18fb      	adds	r3, r7, r3
 80053e6:	781b      	ldrb	r3, [r3, #0]
}
 80053e8:	0018      	movs	r0, r3
 80053ea:	46bd      	mov	sp, r7
 80053ec:	b006      	add	sp, #24
 80053ee:	bdb0      	pop	{r4, r5, r7, pc}
 80053f0:	007f7f7f 	.word	0x007f7f7f
 80053f4:	fffbffff 	.word	0xfffbffff

080053f8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689a      	ldr	r2, [r3, #8]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	045b      	lsls	r3, r3, #17
 8005416:	0c5a      	lsrs	r2, r3, #17
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a22      	ldr	r2, [pc, #136]	; (80054ac <HAL_RTC_GetTime+0xb4>)
 8005424:	4013      	ands	r3, r2
 8005426:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	0c1b      	lsrs	r3, r3, #16
 800542c:	b2db      	uxtb	r3, r3
 800542e:	223f      	movs	r2, #63	; 0x3f
 8005430:	4013      	ands	r3, r2
 8005432:	b2da      	uxtb	r2, r3
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	0a1b      	lsrs	r3, r3, #8
 800543c:	b2db      	uxtb	r3, r3
 800543e:	227f      	movs	r2, #127	; 0x7f
 8005440:	4013      	ands	r3, r2
 8005442:	b2da      	uxtb	r2, r3
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	b2db      	uxtb	r3, r3
 800544c:	227f      	movs	r2, #127	; 0x7f
 800544e:	4013      	ands	r3, r2
 8005450:	b2da      	uxtb	r2, r3
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	0d9b      	lsrs	r3, r3, #22
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2201      	movs	r2, #1
 800545e:	4013      	ands	r3, r2
 8005460:	b2da      	uxtb	r2, r3
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d11a      	bne.n	80054a2 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	0018      	movs	r0, r3
 8005472:	f000 faf9 	bl	8005a68 <RTC_Bcd2ToByte>
 8005476:	0003      	movs	r3, r0
 8005478:	001a      	movs	r2, r3
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	785b      	ldrb	r3, [r3, #1]
 8005482:	0018      	movs	r0, r3
 8005484:	f000 faf0 	bl	8005a68 <RTC_Bcd2ToByte>
 8005488:	0003      	movs	r3, r0
 800548a:	001a      	movs	r2, r3
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	789b      	ldrb	r3, [r3, #2]
 8005494:	0018      	movs	r0, r3
 8005496:	f000 fae7 	bl	8005a68 <RTC_Bcd2ToByte>
 800549a:	0003      	movs	r3, r0
 800549c:	001a      	movs	r2, r3
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	0018      	movs	r0, r3
 80054a6:	46bd      	mov	sp, r7
 80054a8:	b006      	add	sp, #24
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	007f7f7f 	.word	0x007f7f7f

080054b0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80054b0:	b5b0      	push	{r4, r5, r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2228      	movs	r2, #40	; 0x28
 80054c0:	5c9b      	ldrb	r3, [r3, r2]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d101      	bne.n	80054ca <HAL_RTC_SetDate+0x1a>
 80054c6:	2302      	movs	r3, #2
 80054c8:	e07e      	b.n	80055c8 <HAL_RTC_SetDate+0x118>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2228      	movs	r2, #40	; 0x28
 80054ce:	2101      	movs	r1, #1
 80054d0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2229      	movs	r2, #41	; 0x29
 80054d6:	2102      	movs	r1, #2
 80054d8:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10e      	bne.n	80054fe <HAL_RTC_SetDate+0x4e>
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	785b      	ldrb	r3, [r3, #1]
 80054e4:	001a      	movs	r2, r3
 80054e6:	2310      	movs	r3, #16
 80054e8:	4013      	ands	r3, r2
 80054ea:	d008      	beq.n	80054fe <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	785b      	ldrb	r3, [r3, #1]
 80054f0:	2210      	movs	r2, #16
 80054f2:	4393      	bics	r3, r2
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	330a      	adds	r3, #10
 80054f8:	b2da      	uxtb	r2, r3
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d11c      	bne.n	800553e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	78db      	ldrb	r3, [r3, #3]
 8005508:	0018      	movs	r0, r3
 800550a:	f000 fa85 	bl	8005a18 <RTC_ByteToBcd2>
 800550e:	0003      	movs	r3, r0
 8005510:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	785b      	ldrb	r3, [r3, #1]
 8005516:	0018      	movs	r0, r3
 8005518:	f000 fa7e 	bl	8005a18 <RTC_ByteToBcd2>
 800551c:	0003      	movs	r3, r0
 800551e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005520:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	789b      	ldrb	r3, [r3, #2]
 8005526:	0018      	movs	r0, r3
 8005528:	f000 fa76 	bl	8005a18 <RTC_ByteToBcd2>
 800552c:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800552e:	0022      	movs	r2, r4
 8005530:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005538:	4313      	orrs	r3, r2
 800553a:	617b      	str	r3, [r7, #20]
 800553c:	e00e      	b.n	800555c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	78db      	ldrb	r3, [r3, #3]
 8005542:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	785b      	ldrb	r3, [r3, #1]
 8005548:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800554a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005550:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005558:	4313      	orrs	r3, r2
 800555a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	22ca      	movs	r2, #202	; 0xca
 8005562:	625a      	str	r2, [r3, #36]	; 0x24
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2253      	movs	r2, #83	; 0x53
 800556a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800556c:	2513      	movs	r5, #19
 800556e:	197c      	adds	r4, r7, r5
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	0018      	movs	r0, r3
 8005574:	f000 f9c9 	bl	800590a <RTC_EnterInitMode>
 8005578:	0003      	movs	r3, r0
 800557a:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800557c:	0028      	movs	r0, r5
 800557e:	183b      	adds	r3, r7, r0
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10c      	bne.n	80055a0 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	4910      	ldr	r1, [pc, #64]	; (80055d0 <HAL_RTC_SetDate+0x120>)
 800558e:	400a      	ands	r2, r1
 8005590:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005592:	183c      	adds	r4, r7, r0
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	0018      	movs	r0, r3
 8005598:	f000 f9fa 	bl	8005990 <RTC_ExitInitMode>
 800559c:	0003      	movs	r3, r0
 800559e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	22ff      	movs	r2, #255	; 0xff
 80055a6:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80055a8:	2313      	movs	r3, #19
 80055aa:	18fb      	adds	r3, r7, r3
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d103      	bne.n	80055ba <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2229      	movs	r2, #41	; 0x29
 80055b6:	2101      	movs	r1, #1
 80055b8:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2228      	movs	r2, #40	; 0x28
 80055be:	2100      	movs	r1, #0
 80055c0:	5499      	strb	r1, [r3, r2]

  return status;
 80055c2:	2313      	movs	r3, #19
 80055c4:	18fb      	adds	r3, r7, r3
 80055c6:	781b      	ldrb	r3, [r3, #0]
}
 80055c8:	0018      	movs	r0, r3
 80055ca:	46bd      	mov	sp, r7
 80055cc:	b006      	add	sp, #24
 80055ce:	bdb0      	pop	{r4, r5, r7, pc}
 80055d0:	00ffff3f 	.word	0x00ffff3f

080055d4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	4a21      	ldr	r2, [pc, #132]	; (800566c <HAL_RTC_GetDate+0x98>)
 80055e8:	4013      	ands	r3, r2
 80055ea:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	0c1b      	lsrs	r3, r3, #16
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	0a1b      	lsrs	r3, r3, #8
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	221f      	movs	r2, #31
 80055fe:	4013      	ands	r3, r2
 8005600:	b2da      	uxtb	r2, r3
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	b2db      	uxtb	r3, r3
 800560a:	223f      	movs	r2, #63	; 0x3f
 800560c:	4013      	ands	r3, r2
 800560e:	b2da      	uxtb	r2, r3
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	0b5b      	lsrs	r3, r3, #13
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2207      	movs	r2, #7
 800561c:	4013      	ands	r3, r2
 800561e:	b2da      	uxtb	r2, r3
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d11a      	bne.n	8005660 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	78db      	ldrb	r3, [r3, #3]
 800562e:	0018      	movs	r0, r3
 8005630:	f000 fa1a 	bl	8005a68 <RTC_Bcd2ToByte>
 8005634:	0003      	movs	r3, r0
 8005636:	001a      	movs	r2, r3
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	785b      	ldrb	r3, [r3, #1]
 8005640:	0018      	movs	r0, r3
 8005642:	f000 fa11 	bl	8005a68 <RTC_Bcd2ToByte>
 8005646:	0003      	movs	r3, r0
 8005648:	001a      	movs	r2, r3
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	789b      	ldrb	r3, [r3, #2]
 8005652:	0018      	movs	r0, r3
 8005654:	f000 fa08 	bl	8005a68 <RTC_Bcd2ToByte>
 8005658:	0003      	movs	r3, r0
 800565a:	001a      	movs	r2, r3
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	0018      	movs	r0, r3
 8005664:	46bd      	mov	sp, r7
 8005666:	b006      	add	sp, #24
 8005668:	bd80      	pop	{r7, pc}
 800566a:	46c0      	nop			; (mov r8, r8)
 800566c:	00ffff3f 	.word	0x00ffff3f

08005670 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005670:	b590      	push	{r4, r7, lr}
 8005672:	b089      	sub	sp, #36	; 0x24
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2228      	movs	r2, #40	; 0x28
 8005680:	5c9b      	ldrb	r3, [r3, r2]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d101      	bne.n	800568a <HAL_RTC_SetAlarm+0x1a>
 8005686:	2302      	movs	r3, #2
 8005688:	e10c      	b.n	80058a4 <HAL_RTC_SetAlarm+0x234>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2228      	movs	r2, #40	; 0x28
 800568e:	2101      	movs	r1, #1
 8005690:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2229      	movs	r2, #41	; 0x29
 8005696:	2102      	movs	r1, #2
 8005698:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d136      	bne.n	800570e <HAL_RTC_SetAlarm+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	2240      	movs	r2, #64	; 0x40
 80056a8:	4013      	ands	r3, r2
 80056aa:	d102      	bne.n	80056b2 <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2200      	movs	r2, #0
 80056b0:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	0018      	movs	r0, r3
 80056b8:	f000 f9ae 	bl	8005a18 <RTC_ByteToBcd2>
 80056bc:	0003      	movs	r3, r0
 80056be:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	785b      	ldrb	r3, [r3, #1]
 80056c4:	0018      	movs	r0, r3
 80056c6:	f000 f9a7 	bl	8005a18 <RTC_ByteToBcd2>
 80056ca:	0003      	movs	r3, r0
 80056cc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80056ce:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	789b      	ldrb	r3, [r3, #2]
 80056d4:	0018      	movs	r0, r3
 80056d6:	f000 f99f 	bl	8005a18 <RTC_ByteToBcd2>
 80056da:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80056dc:	0022      	movs	r2, r4
 80056de:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	78db      	ldrb	r3, [r3, #3]
 80056e4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80056e6:	431a      	orrs	r2, r3
 80056e8:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	2220      	movs	r2, #32
 80056ee:	5c9b      	ldrb	r3, [r3, r2]
 80056f0:	0018      	movs	r0, r3
 80056f2:	f000 f991 	bl	8005a18 <RTC_ByteToBcd2>
 80056f6:	0003      	movs	r3, r0
 80056f8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80056fa:	0022      	movs	r2, r4
 80056fc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005702:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005708:	4313      	orrs	r3, r2
 800570a:	61fb      	str	r3, [r7, #28]
 800570c:	e022      	b.n	8005754 <HAL_RTC_SetAlarm+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	2240      	movs	r2, #64	; 0x40
 8005716:	4013      	ands	r3, r2
 8005718:	d102      	bne.n	8005720 <HAL_RTC_SetAlarm+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	2200      	movs	r2, #0
 800571e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	785b      	ldrb	r3, [r3, #1]
 800572a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800572c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005732:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	78db      	ldrb	r3, [r3, #3]
 8005738:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800573a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	2120      	movs	r1, #32
 8005740:	5c5b      	ldrb	r3, [r3, r1]
 8005742:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005744:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800574a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005750:	4313      	orrs	r3, r2
 8005752:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	4313      	orrs	r3, r2
 800575e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	22ca      	movs	r2, #202	; 0xca
 8005766:	625a      	str	r2, [r3, #36]	; 0x24
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2253      	movs	r2, #83	; 0x53
 800576e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005774:	2380      	movs	r3, #128	; 0x80
 8005776:	005b      	lsls	r3, r3, #1
 8005778:	429a      	cmp	r2, r3
 800577a:	d143      	bne.n	8005804 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	699a      	ldr	r2, [r3, #24]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4949      	ldr	r1, [pc, #292]	; (80058ac <HAL_RTC_SetAlarm+0x23c>)
 8005788:	400a      	ands	r2, r1
 800578a:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	699a      	ldr	r2, [r3, #24]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4946      	ldr	r1, [pc, #280]	; (80058b0 <HAL_RTC_SetAlarm+0x240>)
 8005798:	400a      	ands	r2, r1
 800579a:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 800579c:	f7fe fa02 	bl	8003ba4 <HAL_GetTick>
 80057a0:	0003      	movs	r3, r0
 80057a2:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80057a4:	e016      	b.n	80057d4 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80057a6:	f7fe f9fd 	bl	8003ba4 <HAL_GetTick>
 80057aa:	0002      	movs	r2, r0
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	1ad2      	subs	r2, r2, r3
 80057b0:	23fa      	movs	r3, #250	; 0xfa
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d90d      	bls.n	80057d4 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	22ff      	movs	r2, #255	; 0xff
 80057be:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2229      	movs	r2, #41	; 0x29
 80057c4:	2103      	movs	r1, #3
 80057c6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2228      	movs	r2, #40	; 0x28
 80057cc:	2100      	movs	r1, #0
 80057ce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e067      	b.n	80058a4 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	2201      	movs	r2, #1
 80057dc:	4013      	ands	r3, r2
 80057de:	d0e2      	beq.n	80057a6 <HAL_RTC_SetAlarm+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	69fa      	ldr	r2, [r7, #28]
 80057e6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	699a      	ldr	r2, [r3, #24]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2180      	movs	r1, #128	; 0x80
 80057fc:	0049      	lsls	r1, r1, #1
 80057fe:	430a      	orrs	r2, r1
 8005800:	619a      	str	r2, [r3, #24]
 8005802:	e042      	b.n	800588a <HAL_RTC_SetAlarm+0x21a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	699a      	ldr	r2, [r3, #24]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4929      	ldr	r1, [pc, #164]	; (80058b4 <HAL_RTC_SetAlarm+0x244>)
 8005810:	400a      	ands	r2, r1
 8005812:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	699a      	ldr	r2, [r3, #24]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4926      	ldr	r1, [pc, #152]	; (80058b8 <HAL_RTC_SetAlarm+0x248>)
 8005820:	400a      	ands	r2, r1
 8005822:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8005824:	f7fe f9be 	bl	8003ba4 <HAL_GetTick>
 8005828:	0003      	movs	r3, r0
 800582a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800582c:	e016      	b.n	800585c <HAL_RTC_SetAlarm+0x1ec>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800582e:	f7fe f9b9 	bl	8003ba4 <HAL_GetTick>
 8005832:	0002      	movs	r2, r0
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	1ad2      	subs	r2, r2, r3
 8005838:	23fa      	movs	r3, #250	; 0xfa
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	429a      	cmp	r2, r3
 800583e:	d90d      	bls.n	800585c <HAL_RTC_SetAlarm+0x1ec>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	22ff      	movs	r2, #255	; 0xff
 8005846:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2229      	movs	r2, #41	; 0x29
 800584c:	2103      	movs	r1, #3
 800584e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2228      	movs	r2, #40	; 0x28
 8005854:	2100      	movs	r1, #0
 8005856:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e023      	b.n	80058a4 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	2202      	movs	r2, #2
 8005864:	4013      	ands	r3, r2
 8005866:	d0e2      	beq.n	800582e <HAL_RTC_SetAlarm+0x1be>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	69fa      	ldr	r2, [r7, #28]
 800586e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	699a      	ldr	r2, [r3, #24]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2180      	movs	r1, #128	; 0x80
 8005884:	0089      	lsls	r1, r1, #2
 8005886:	430a      	orrs	r2, r1
 8005888:	619a      	str	r2, [r3, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	22ff      	movs	r2, #255	; 0xff
 8005890:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2229      	movs	r2, #41	; 0x29
 8005896:	2101      	movs	r1, #1
 8005898:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2228      	movs	r2, #40	; 0x28
 800589e:	2100      	movs	r1, #0
 80058a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	0018      	movs	r0, r3
 80058a6:	46bd      	mov	sp, r7
 80058a8:	b009      	add	sp, #36	; 0x24
 80058aa:	bd90      	pop	{r4, r7, pc}
 80058ac:	fffffeff 	.word	0xfffffeff
 80058b0:	ffffefff 	.word	0xffffefff
 80058b4:	fffffdff 	.word	0xfffffdff
 80058b8:	ffffdfff 	.word	0xffffdfff

080058bc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68da      	ldr	r2, [r3, #12]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	21a0      	movs	r1, #160	; 0xa0
 80058d0:	438a      	bics	r2, r1
 80058d2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80058d4:	f7fe f966 	bl	8003ba4 <HAL_GetTick>
 80058d8:	0003      	movs	r3, r0
 80058da:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80058dc:	e00a      	b.n	80058f4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80058de:	f7fe f961 	bl	8003ba4 <HAL_GetTick>
 80058e2:	0002      	movs	r2, r0
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	1ad2      	subs	r2, r2, r3
 80058e8:	23fa      	movs	r3, #250	; 0xfa
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d901      	bls.n	80058f4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e006      	b.n	8005902 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	2220      	movs	r2, #32
 80058fc:	4013      	ands	r3, r2
 80058fe:	d0ee      	beq.n	80058de <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	0018      	movs	r0, r3
 8005904:	46bd      	mov	sp, r7
 8005906:	b004      	add	sp, #16
 8005908:	bd80      	pop	{r7, pc}

0800590a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b084      	sub	sp, #16
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8005912:	230f      	movs	r3, #15
 8005914:	18fb      	adds	r3, r7, r3
 8005916:	2200      	movs	r2, #0
 8005918:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	2240      	movs	r2, #64	; 0x40
 8005922:	4013      	ands	r3, r2
 8005924:	d12c      	bne.n	8005980 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68da      	ldr	r2, [r3, #12]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2180      	movs	r1, #128	; 0x80
 8005932:	430a      	orrs	r2, r1
 8005934:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005936:	f7fe f935 	bl	8003ba4 <HAL_GetTick>
 800593a:	0003      	movs	r3, r0
 800593c:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800593e:	e014      	b.n	800596a <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005940:	f7fe f930 	bl	8003ba4 <HAL_GetTick>
 8005944:	0002      	movs	r2, r0
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	1ad2      	subs	r2, r2, r3
 800594a:	200f      	movs	r0, #15
 800594c:	183b      	adds	r3, r7, r0
 800594e:	1839      	adds	r1, r7, r0
 8005950:	7809      	ldrb	r1, [r1, #0]
 8005952:	7019      	strb	r1, [r3, #0]
 8005954:	23fa      	movs	r3, #250	; 0xfa
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	429a      	cmp	r2, r3
 800595a:	d906      	bls.n	800596a <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800595c:	183b      	adds	r3, r7, r0
 800595e:	2203      	movs	r2, #3
 8005960:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2229      	movs	r2, #41	; 0x29
 8005966:	2103      	movs	r1, #3
 8005968:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	2240      	movs	r2, #64	; 0x40
 8005972:	4013      	ands	r3, r2
 8005974:	d104      	bne.n	8005980 <RTC_EnterInitMode+0x76>
 8005976:	230f      	movs	r3, #15
 8005978:	18fb      	adds	r3, r7, r3
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	2b03      	cmp	r3, #3
 800597e:	d1df      	bne.n	8005940 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005980:	230f      	movs	r3, #15
 8005982:	18fb      	adds	r3, r7, r3
 8005984:	781b      	ldrb	r3, [r3, #0]
}
 8005986:	0018      	movs	r0, r3
 8005988:	46bd      	mov	sp, r7
 800598a:	b004      	add	sp, #16
 800598c:	bd80      	pop	{r7, pc}
	...

08005990 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005990:	b590      	push	{r4, r7, lr}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005998:	240f      	movs	r4, #15
 800599a:	193b      	adds	r3, r7, r4
 800599c:	2200      	movs	r2, #0
 800599e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80059a0:	4b1c      	ldr	r3, [pc, #112]	; (8005a14 <RTC_ExitInitMode+0x84>)
 80059a2:	68da      	ldr	r2, [r3, #12]
 80059a4:	4b1b      	ldr	r3, [pc, #108]	; (8005a14 <RTC_ExitInitMode+0x84>)
 80059a6:	2180      	movs	r1, #128	; 0x80
 80059a8:	438a      	bics	r2, r1
 80059aa:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80059ac:	4b19      	ldr	r3, [pc, #100]	; (8005a14 <RTC_ExitInitMode+0x84>)
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	2220      	movs	r2, #32
 80059b2:	4013      	ands	r3, r2
 80059b4:	d10d      	bne.n	80059d2 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	0018      	movs	r0, r3
 80059ba:	f7ff ff7f 	bl	80058bc <HAL_RTC_WaitForSynchro>
 80059be:	1e03      	subs	r3, r0, #0
 80059c0:	d021      	beq.n	8005a06 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2229      	movs	r2, #41	; 0x29
 80059c6:	2103      	movs	r1, #3
 80059c8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80059ca:	193b      	adds	r3, r7, r4
 80059cc:	2203      	movs	r2, #3
 80059ce:	701a      	strb	r2, [r3, #0]
 80059d0:	e019      	b.n	8005a06 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80059d2:	4b10      	ldr	r3, [pc, #64]	; (8005a14 <RTC_ExitInitMode+0x84>)
 80059d4:	699a      	ldr	r2, [r3, #24]
 80059d6:	4b0f      	ldr	r3, [pc, #60]	; (8005a14 <RTC_ExitInitMode+0x84>)
 80059d8:	2120      	movs	r1, #32
 80059da:	438a      	bics	r2, r1
 80059dc:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	0018      	movs	r0, r3
 80059e2:	f7ff ff6b 	bl	80058bc <HAL_RTC_WaitForSynchro>
 80059e6:	1e03      	subs	r3, r0, #0
 80059e8:	d007      	beq.n	80059fa <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2229      	movs	r2, #41	; 0x29
 80059ee:	2103      	movs	r1, #3
 80059f0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80059f2:	230f      	movs	r3, #15
 80059f4:	18fb      	adds	r3, r7, r3
 80059f6:	2203      	movs	r2, #3
 80059f8:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80059fa:	4b06      	ldr	r3, [pc, #24]	; (8005a14 <RTC_ExitInitMode+0x84>)
 80059fc:	699a      	ldr	r2, [r3, #24]
 80059fe:	4b05      	ldr	r3, [pc, #20]	; (8005a14 <RTC_ExitInitMode+0x84>)
 8005a00:	2120      	movs	r1, #32
 8005a02:	430a      	orrs	r2, r1
 8005a04:	619a      	str	r2, [r3, #24]
  }

  return status;
 8005a06:	230f      	movs	r3, #15
 8005a08:	18fb      	adds	r3, r7, r3
 8005a0a:	781b      	ldrb	r3, [r3, #0]
}
 8005a0c:	0018      	movs	r0, r3
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	b005      	add	sp, #20
 8005a12:	bd90      	pop	{r4, r7, pc}
 8005a14:	40002800 	.word	0x40002800

08005a18 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	0002      	movs	r2, r0
 8005a20:	1dfb      	adds	r3, r7, #7
 8005a22:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005a24:	2300      	movs	r3, #0
 8005a26:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005a28:	230b      	movs	r3, #11
 8005a2a:	18fb      	adds	r3, r7, r3
 8005a2c:	1dfa      	adds	r2, r7, #7
 8005a2e:	7812      	ldrb	r2, [r2, #0]
 8005a30:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8005a32:	e008      	b.n	8005a46 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	3301      	adds	r3, #1
 8005a38:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005a3a:	220b      	movs	r2, #11
 8005a3c:	18bb      	adds	r3, r7, r2
 8005a3e:	18ba      	adds	r2, r7, r2
 8005a40:	7812      	ldrb	r2, [r2, #0]
 8005a42:	3a0a      	subs	r2, #10
 8005a44:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8005a46:	210b      	movs	r1, #11
 8005a48:	187b      	adds	r3, r7, r1
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	2b09      	cmp	r3, #9
 8005a4e:	d8f1      	bhi.n	8005a34 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	011b      	lsls	r3, r3, #4
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	187b      	adds	r3, r7, r1
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	b2db      	uxtb	r3, r3
}
 8005a60:	0018      	movs	r0, r3
 8005a62:	46bd      	mov	sp, r7
 8005a64:	b004      	add	sp, #16
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	0002      	movs	r2, r0
 8005a70:	1dfb      	adds	r3, r7, #7
 8005a72:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005a74:	1dfb      	adds	r3, r7, #7
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	091b      	lsrs	r3, r3, #4
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	001a      	movs	r2, r3
 8005a7e:	0013      	movs	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	189b      	adds	r3, r3, r2
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	b2da      	uxtb	r2, r3
 8005a8c:	1dfb      	adds	r3, r7, #7
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	210f      	movs	r1, #15
 8005a92:	400b      	ands	r3, r1
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	18d3      	adds	r3, r2, r3
 8005a98:	b2db      	uxtb	r3, r3
}
 8005a9a:	0018      	movs	r0, r3
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	b004      	add	sp, #16
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b082      	sub	sp, #8
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2228      	movs	r2, #40	; 0x28
 8005aae:	5c9b      	ldrb	r3, [r3, r2]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d101      	bne.n	8005ab8 <HAL_RTCEx_EnableBypassShadow+0x16>
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	e024      	b.n	8005b02 <HAL_RTCEx_EnableBypassShadow+0x60>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2228      	movs	r2, #40	; 0x28
 8005abc:	2101      	movs	r1, #1
 8005abe:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2229      	movs	r2, #41	; 0x29
 8005ac4:	2102      	movs	r1, #2
 8005ac6:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	22ca      	movs	r2, #202	; 0xca
 8005ace:	625a      	str	r2, [r3, #36]	; 0x24
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2253      	movs	r2, #83	; 0x53
 8005ad6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	699a      	ldr	r2, [r3, #24]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2120      	movs	r1, #32
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	22ff      	movs	r2, #255	; 0xff
 8005aee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2229      	movs	r2, #41	; 0x29
 8005af4:	2101      	movs	r1, #1
 8005af6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2228      	movs	r2, #40	; 0x28
 8005afc:	2100      	movs	r1, #0
 8005afe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	0018      	movs	r0, r3
 8005b04:	46bd      	mov	sp, r7
 8005b06:	b002      	add	sp, #8
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <HAL_RTCEx_DisableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b082      	sub	sp, #8
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2228      	movs	r2, #40	; 0x28
 8005b16:	5c9b      	ldrb	r3, [r3, r2]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d101      	bne.n	8005b20 <HAL_RTCEx_DisableBypassShadow+0x16>
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	e024      	b.n	8005b6a <HAL_RTCEx_DisableBypassShadow+0x60>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2228      	movs	r2, #40	; 0x28
 8005b24:	2101      	movs	r1, #1
 8005b26:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2229      	movs	r2, #41	; 0x29
 8005b2c:	2102      	movs	r1, #2
 8005b2e:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	22ca      	movs	r2, #202	; 0xca
 8005b36:	625a      	str	r2, [r3, #36]	; 0x24
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2253      	movs	r2, #83	; 0x53
 8005b3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset the BYPSHAD bit */
  hrtc->Instance->CR &= ((uint8_t)~RTC_CR_BYPSHAD);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	699a      	ldr	r2, [r3, #24]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	21df      	movs	r1, #223	; 0xdf
 8005b4c:	400a      	ands	r2, r1
 8005b4e:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	22ff      	movs	r2, #255	; 0xff
 8005b56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2229      	movs	r2, #41	; 0x29
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2228      	movs	r2, #40	; 0x28
 8005b64:	2100      	movs	r1, #0
 8005b66:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	0018      	movs	r0, r3
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	b002      	add	sp, #8
 8005b70:	bd80      	pop	{r7, pc}
	...

08005b74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e0a8      	b.n	8005cd8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d109      	bne.n	8005ba2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	2382      	movs	r3, #130	; 0x82
 8005b94:	005b      	lsls	r3, r3, #1
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d009      	beq.n	8005bae <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	61da      	str	r2, [r3, #28]
 8005ba0:	e005      	b.n	8005bae <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	225d      	movs	r2, #93	; 0x5d
 8005bb8:	5c9b      	ldrb	r3, [r3, r2]
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d107      	bne.n	8005bd0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	225c      	movs	r2, #92	; 0x5c
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	0018      	movs	r0, r3
 8005bcc:	f7fd fca2 	bl	8003514 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	225d      	movs	r2, #93	; 0x5d
 8005bd4:	2102      	movs	r1, #2
 8005bd6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2140      	movs	r1, #64	; 0x40
 8005be4:	438a      	bics	r2, r1
 8005be6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68da      	ldr	r2, [r3, #12]
 8005bec:	23e0      	movs	r3, #224	; 0xe0
 8005bee:	00db      	lsls	r3, r3, #3
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d902      	bls.n	8005bfa <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	60fb      	str	r3, [r7, #12]
 8005bf8:	e002      	b.n	8005c00 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005bfa:	2380      	movs	r3, #128	; 0x80
 8005bfc:	015b      	lsls	r3, r3, #5
 8005bfe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68da      	ldr	r2, [r3, #12]
 8005c04:	23f0      	movs	r3, #240	; 0xf0
 8005c06:	011b      	lsls	r3, r3, #4
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d008      	beq.n	8005c1e <HAL_SPI_Init+0xaa>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68da      	ldr	r2, [r3, #12]
 8005c10:	23e0      	movs	r3, #224	; 0xe0
 8005c12:	00db      	lsls	r3, r3, #3
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d002      	beq.n	8005c1e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685a      	ldr	r2, [r3, #4]
 8005c22:	2382      	movs	r3, #130	; 0x82
 8005c24:	005b      	lsls	r3, r3, #1
 8005c26:	401a      	ands	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6899      	ldr	r1, [r3, #8]
 8005c2c:	2384      	movs	r3, #132	; 0x84
 8005c2e:	021b      	lsls	r3, r3, #8
 8005c30:	400b      	ands	r3, r1
 8005c32:	431a      	orrs	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	2102      	movs	r1, #2
 8005c3a:	400b      	ands	r3, r1
 8005c3c:	431a      	orrs	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	2101      	movs	r1, #1
 8005c44:	400b      	ands	r3, r1
 8005c46:	431a      	orrs	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6999      	ldr	r1, [r3, #24]
 8005c4c:	2380      	movs	r3, #128	; 0x80
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	400b      	ands	r3, r1
 8005c52:	431a      	orrs	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	69db      	ldr	r3, [r3, #28]
 8005c58:	2138      	movs	r1, #56	; 0x38
 8005c5a:	400b      	ands	r3, r1
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	2180      	movs	r1, #128	; 0x80
 8005c64:	400b      	ands	r3, r1
 8005c66:	431a      	orrs	r2, r3
 8005c68:	0011      	movs	r1, r2
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c6e:	2380      	movs	r3, #128	; 0x80
 8005c70:	019b      	lsls	r3, r3, #6
 8005c72:	401a      	ands	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	0c1b      	lsrs	r3, r3, #16
 8005c82:	2204      	movs	r2, #4
 8005c84:	401a      	ands	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8a:	2110      	movs	r1, #16
 8005c8c:	400b      	ands	r3, r1
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c94:	2108      	movs	r1, #8
 8005c96:	400b      	ands	r3, r1
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68d9      	ldr	r1, [r3, #12]
 8005c9e:	23f0      	movs	r3, #240	; 0xf0
 8005ca0:	011b      	lsls	r3, r3, #4
 8005ca2:	400b      	ands	r3, r1
 8005ca4:	431a      	orrs	r2, r3
 8005ca6:	0011      	movs	r1, r2
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	2380      	movs	r3, #128	; 0x80
 8005cac:	015b      	lsls	r3, r3, #5
 8005cae:	401a      	ands	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	69da      	ldr	r2, [r3, #28]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4907      	ldr	r1, [pc, #28]	; (8005ce0 <HAL_SPI_Init+0x16c>)
 8005cc4:	400a      	ands	r2, r1
 8005cc6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	225d      	movs	r2, #93	; 0x5d
 8005cd2:	2101      	movs	r1, #1
 8005cd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	0018      	movs	r0, r3
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	b004      	add	sp, #16
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	fffff7ff 	.word	0xfffff7ff

08005ce4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b088      	sub	sp, #32
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	603b      	str	r3, [r7, #0]
 8005cf0:	1dbb      	adds	r3, r7, #6
 8005cf2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005cf4:	231f      	movs	r3, #31
 8005cf6:	18fb      	adds	r3, r7, r3
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	225c      	movs	r2, #92	; 0x5c
 8005d00:	5c9b      	ldrb	r3, [r3, r2]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d101      	bne.n	8005d0a <HAL_SPI_Transmit+0x26>
 8005d06:	2302      	movs	r3, #2
 8005d08:	e140      	b.n	8005f8c <HAL_SPI_Transmit+0x2a8>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	225c      	movs	r2, #92	; 0x5c
 8005d0e:	2101      	movs	r1, #1
 8005d10:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d12:	f7fd ff47 	bl	8003ba4 <HAL_GetTick>
 8005d16:	0003      	movs	r3, r0
 8005d18:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005d1a:	2316      	movs	r3, #22
 8005d1c:	18fb      	adds	r3, r7, r3
 8005d1e:	1dba      	adds	r2, r7, #6
 8005d20:	8812      	ldrh	r2, [r2, #0]
 8005d22:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	225d      	movs	r2, #93	; 0x5d
 8005d28:	5c9b      	ldrb	r3, [r3, r2]
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d004      	beq.n	8005d3a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005d30:	231f      	movs	r3, #31
 8005d32:	18fb      	adds	r3, r7, r3
 8005d34:	2202      	movs	r2, #2
 8005d36:	701a      	strb	r2, [r3, #0]
    goto error;
 8005d38:	e11d      	b.n	8005f76 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <HAL_SPI_Transmit+0x64>
 8005d40:	1dbb      	adds	r3, r7, #6
 8005d42:	881b      	ldrh	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d104      	bne.n	8005d52 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005d48:	231f      	movs	r3, #31
 8005d4a:	18fb      	adds	r3, r7, r3
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005d50:	e111      	b.n	8005f76 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	225d      	movs	r2, #93	; 0x5d
 8005d56:	2103      	movs	r1, #3
 8005d58:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	1dba      	adds	r2, r7, #6
 8005d6a:	8812      	ldrh	r2, [r2, #0]
 8005d6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	1dba      	adds	r2, r7, #6
 8005d72:	8812      	ldrh	r2, [r2, #0]
 8005d74:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2244      	movs	r2, #68	; 0x44
 8005d80:	2100      	movs	r1, #0
 8005d82:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2246      	movs	r2, #70	; 0x46
 8005d88:	2100      	movs	r1, #0
 8005d8a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	2380      	movs	r3, #128	; 0x80
 8005d9e:	021b      	lsls	r3, r3, #8
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d110      	bne.n	8005dc6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2140      	movs	r1, #64	; 0x40
 8005db0:	438a      	bics	r2, r1
 8005db2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2180      	movs	r1, #128	; 0x80
 8005dc0:	01c9      	lsls	r1, r1, #7
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2240      	movs	r2, #64	; 0x40
 8005dce:	4013      	ands	r3, r2
 8005dd0:	2b40      	cmp	r3, #64	; 0x40
 8005dd2:	d007      	beq.n	8005de4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2140      	movs	r1, #64	; 0x40
 8005de0:	430a      	orrs	r2, r1
 8005de2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	68da      	ldr	r2, [r3, #12]
 8005de8:	23e0      	movs	r3, #224	; 0xe0
 8005dea:	00db      	lsls	r3, r3, #3
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d94e      	bls.n	8005e8e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d004      	beq.n	8005e02 <HAL_SPI_Transmit+0x11e>
 8005df8:	2316      	movs	r3, #22
 8005dfa:	18fb      	adds	r3, r7, r3
 8005dfc:	881b      	ldrh	r3, [r3, #0]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d13f      	bne.n	8005e82 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e06:	881a      	ldrh	r2, [r3, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e12:	1c9a      	adds	r2, r3, #2
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e26:	e02c      	b.n	8005e82 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	4013      	ands	r3, r2
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d112      	bne.n	8005e5c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3a:	881a      	ldrh	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e46:	1c9a      	adds	r2, r3, #2
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	3b01      	subs	r3, #1
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e5a:	e012      	b.n	8005e82 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e5c:	f7fd fea2 	bl	8003ba4 <HAL_GetTick>
 8005e60:	0002      	movs	r2, r0
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d802      	bhi.n	8005e72 <HAL_SPI_Transmit+0x18e>
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	d102      	bne.n	8005e78 <HAL_SPI_Transmit+0x194>
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d104      	bne.n	8005e82 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8005e78:	231f      	movs	r3, #31
 8005e7a:	18fb      	adds	r3, r7, r3
 8005e7c:	2203      	movs	r2, #3
 8005e7e:	701a      	strb	r2, [r3, #0]
          goto error;
 8005e80:	e079      	b.n	8005f76 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d1cd      	bne.n	8005e28 <HAL_SPI_Transmit+0x144>
 8005e8c:	e04f      	b.n	8005f2e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d004      	beq.n	8005ea0 <HAL_SPI_Transmit+0x1bc>
 8005e96:	2316      	movs	r3, #22
 8005e98:	18fb      	adds	r3, r7, r3
 8005e9a:	881b      	ldrh	r3, [r3, #0]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d141      	bne.n	8005f24 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	330c      	adds	r3, #12
 8005eaa:	7812      	ldrb	r2, [r2, #0]
 8005eac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb2:	1c5a      	adds	r2, r3, #1
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8005ec6:	e02d      	b.n	8005f24 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	2202      	movs	r2, #2
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d113      	bne.n	8005efe <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	330c      	adds	r3, #12
 8005ee0:	7812      	ldrb	r2, [r2, #0]
 8005ee2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee8:	1c5a      	adds	r2, r3, #1
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005efc:	e012      	b.n	8005f24 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005efe:	f7fd fe51 	bl	8003ba4 <HAL_GetTick>
 8005f02:	0002      	movs	r2, r0
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	683a      	ldr	r2, [r7, #0]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d802      	bhi.n	8005f14 <HAL_SPI_Transmit+0x230>
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	3301      	adds	r3, #1
 8005f12:	d102      	bne.n	8005f1a <HAL_SPI_Transmit+0x236>
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d104      	bne.n	8005f24 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8005f1a:	231f      	movs	r3, #31
 8005f1c:	18fb      	adds	r3, r7, r3
 8005f1e:	2203      	movs	r2, #3
 8005f20:	701a      	strb	r2, [r3, #0]
          goto error;
 8005f22:	e028      	b.n	8005f76 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1cc      	bne.n	8005ec8 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	6839      	ldr	r1, [r7, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	0018      	movs	r0, r3
 8005f36:	f000 fcd9 	bl	80068ec <SPI_EndRxTxTransaction>
 8005f3a:	1e03      	subs	r3, r0, #0
 8005f3c:	d002      	beq.n	8005f44 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2220      	movs	r2, #32
 8005f42:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10a      	bne.n	8005f62 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	613b      	str	r3, [r7, #16]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	613b      	str	r3, [r7, #16]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	613b      	str	r3, [r7, #16]
 8005f60:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d004      	beq.n	8005f74 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8005f6a:	231f      	movs	r3, #31
 8005f6c:	18fb      	adds	r3, r7, r3
 8005f6e:	2201      	movs	r2, #1
 8005f70:	701a      	strb	r2, [r3, #0]
 8005f72:	e000      	b.n	8005f76 <HAL_SPI_Transmit+0x292>
  }

error:
 8005f74:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	225d      	movs	r2, #93	; 0x5d
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	225c      	movs	r2, #92	; 0x5c
 8005f82:	2100      	movs	r1, #0
 8005f84:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005f86:	231f      	movs	r3, #31
 8005f88:	18fb      	adds	r3, r7, r3
 8005f8a:	781b      	ldrb	r3, [r3, #0]
}
 8005f8c:	0018      	movs	r0, r3
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	b008      	add	sp, #32
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f94:	b590      	push	{r4, r7, lr}
 8005f96:	b089      	sub	sp, #36	; 0x24
 8005f98:	af02      	add	r7, sp, #8
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	603b      	str	r3, [r7, #0]
 8005fa0:	1dbb      	adds	r3, r7, #6
 8005fa2:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005fa4:	2317      	movs	r3, #23
 8005fa6:	18fb      	adds	r3, r7, r3
 8005fa8:	2200      	movs	r2, #0
 8005faa:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	2382      	movs	r3, #130	; 0x82
 8005fb2:	005b      	lsls	r3, r3, #1
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d113      	bne.n	8005fe0 <HAL_SPI_Receive+0x4c>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10f      	bne.n	8005fe0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	225d      	movs	r2, #93	; 0x5d
 8005fc4:	2104      	movs	r1, #4
 8005fc6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005fc8:	1dbb      	adds	r3, r7, #6
 8005fca:	881c      	ldrh	r4, [r3, #0]
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	68b9      	ldr	r1, [r7, #8]
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	0023      	movs	r3, r4
 8005fd8:	f000 f928 	bl	800622c <HAL_SPI_TransmitReceive>
 8005fdc:	0003      	movs	r3, r0
 8005fde:	e11c      	b.n	800621a <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	225c      	movs	r2, #92	; 0x5c
 8005fe4:	5c9b      	ldrb	r3, [r3, r2]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d101      	bne.n	8005fee <HAL_SPI_Receive+0x5a>
 8005fea:	2302      	movs	r3, #2
 8005fec:	e115      	b.n	800621a <HAL_SPI_Receive+0x286>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	225c      	movs	r2, #92	; 0x5c
 8005ff2:	2101      	movs	r1, #1
 8005ff4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ff6:	f7fd fdd5 	bl	8003ba4 <HAL_GetTick>
 8005ffa:	0003      	movs	r3, r0
 8005ffc:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	225d      	movs	r2, #93	; 0x5d
 8006002:	5c9b      	ldrb	r3, [r3, r2]
 8006004:	b2db      	uxtb	r3, r3
 8006006:	2b01      	cmp	r3, #1
 8006008:	d004      	beq.n	8006014 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800600a:	2317      	movs	r3, #23
 800600c:	18fb      	adds	r3, r7, r3
 800600e:	2202      	movs	r2, #2
 8006010:	701a      	strb	r2, [r3, #0]
    goto error;
 8006012:	e0f7      	b.n	8006204 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d003      	beq.n	8006022 <HAL_SPI_Receive+0x8e>
 800601a:	1dbb      	adds	r3, r7, #6
 800601c:	881b      	ldrh	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d104      	bne.n	800602c <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8006022:	2317      	movs	r3, #23
 8006024:	18fb      	adds	r3, r7, r3
 8006026:	2201      	movs	r2, #1
 8006028:	701a      	strb	r2, [r3, #0]
    goto error;
 800602a:	e0eb      	b.n	8006204 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	225d      	movs	r2, #93	; 0x5d
 8006030:	2104      	movs	r1, #4
 8006032:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	1dba      	adds	r2, r7, #6
 8006044:	2144      	movs	r1, #68	; 0x44
 8006046:	8812      	ldrh	r2, [r2, #0]
 8006048:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	1dba      	adds	r2, r7, #6
 800604e:	2146      	movs	r1, #70	; 0x46
 8006050:	8812      	ldrh	r2, [r2, #0]
 8006052:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	68da      	ldr	r2, [r3, #12]
 8006076:	23e0      	movs	r3, #224	; 0xe0
 8006078:	00db      	lsls	r3, r3, #3
 800607a:	429a      	cmp	r2, r3
 800607c:	d908      	bls.n	8006090 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4966      	ldr	r1, [pc, #408]	; (8006224 <HAL_SPI_Receive+0x290>)
 800608a:	400a      	ands	r2, r1
 800608c:	605a      	str	r2, [r3, #4]
 800608e:	e008      	b.n	80060a2 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	685a      	ldr	r2, [r3, #4]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2180      	movs	r1, #128	; 0x80
 800609c:	0149      	lsls	r1, r1, #5
 800609e:	430a      	orrs	r2, r1
 80060a0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	689a      	ldr	r2, [r3, #8]
 80060a6:	2380      	movs	r3, #128	; 0x80
 80060a8:	021b      	lsls	r3, r3, #8
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d10f      	bne.n	80060ce <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2140      	movs	r1, #64	; 0x40
 80060ba:	438a      	bics	r2, r1
 80060bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4957      	ldr	r1, [pc, #348]	; (8006228 <HAL_SPI_Receive+0x294>)
 80060ca:	400a      	ands	r2, r1
 80060cc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2240      	movs	r2, #64	; 0x40
 80060d6:	4013      	ands	r3, r2
 80060d8:	2b40      	cmp	r3, #64	; 0x40
 80060da:	d007      	beq.n	80060ec <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2140      	movs	r1, #64	; 0x40
 80060e8:	430a      	orrs	r2, r1
 80060ea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	68da      	ldr	r2, [r3, #12]
 80060f0:	23e0      	movs	r3, #224	; 0xe0
 80060f2:	00db      	lsls	r3, r3, #3
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d900      	bls.n	80060fa <HAL_SPI_Receive+0x166>
 80060f8:	e069      	b.n	80061ce <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80060fa:	e031      	b.n	8006160 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	2201      	movs	r2, #1
 8006104:	4013      	ands	r3, r2
 8006106:	2b01      	cmp	r3, #1
 8006108:	d117      	bne.n	800613a <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	330c      	adds	r3, #12
 8006110:	001a      	movs	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006116:	7812      	ldrb	r2, [r2, #0]
 8006118:	b2d2      	uxtb	r2, r2
 800611a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006120:	1c5a      	adds	r2, r3, #1
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2246      	movs	r2, #70	; 0x46
 800612a:	5a9b      	ldrh	r3, [r3, r2]
 800612c:	b29b      	uxth	r3, r3
 800612e:	3b01      	subs	r3, #1
 8006130:	b299      	uxth	r1, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2246      	movs	r2, #70	; 0x46
 8006136:	5299      	strh	r1, [r3, r2]
 8006138:	e012      	b.n	8006160 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800613a:	f7fd fd33 	bl	8003ba4 <HAL_GetTick>
 800613e:	0002      	movs	r2, r0
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	683a      	ldr	r2, [r7, #0]
 8006146:	429a      	cmp	r2, r3
 8006148:	d802      	bhi.n	8006150 <HAL_SPI_Receive+0x1bc>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	3301      	adds	r3, #1
 800614e:	d102      	bne.n	8006156 <HAL_SPI_Receive+0x1c2>
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d104      	bne.n	8006160 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8006156:	2317      	movs	r3, #23
 8006158:	18fb      	adds	r3, r7, r3
 800615a:	2203      	movs	r2, #3
 800615c:	701a      	strb	r2, [r3, #0]
          goto error;
 800615e:	e051      	b.n	8006204 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2246      	movs	r2, #70	; 0x46
 8006164:	5a9b      	ldrh	r3, [r3, r2]
 8006166:	b29b      	uxth	r3, r3
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1c7      	bne.n	80060fc <HAL_SPI_Receive+0x168>
 800616c:	e035      	b.n	80061da <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	2201      	movs	r2, #1
 8006176:	4013      	ands	r3, r2
 8006178:	2b01      	cmp	r3, #1
 800617a:	d115      	bne.n	80061a8 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68da      	ldr	r2, [r3, #12]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006186:	b292      	uxth	r2, r2
 8006188:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618e:	1c9a      	adds	r2, r3, #2
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2246      	movs	r2, #70	; 0x46
 8006198:	5a9b      	ldrh	r3, [r3, r2]
 800619a:	b29b      	uxth	r3, r3
 800619c:	3b01      	subs	r3, #1
 800619e:	b299      	uxth	r1, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2246      	movs	r2, #70	; 0x46
 80061a4:	5299      	strh	r1, [r3, r2]
 80061a6:	e012      	b.n	80061ce <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061a8:	f7fd fcfc 	bl	8003ba4 <HAL_GetTick>
 80061ac:	0002      	movs	r2, r0
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d802      	bhi.n	80061be <HAL_SPI_Receive+0x22a>
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	3301      	adds	r3, #1
 80061bc:	d102      	bne.n	80061c4 <HAL_SPI_Receive+0x230>
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d104      	bne.n	80061ce <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80061c4:	2317      	movs	r3, #23
 80061c6:	18fb      	adds	r3, r7, r3
 80061c8:	2203      	movs	r2, #3
 80061ca:	701a      	strb	r2, [r3, #0]
          goto error;
 80061cc:	e01a      	b.n	8006204 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2246      	movs	r2, #70	; 0x46
 80061d2:	5a9b      	ldrh	r3, [r3, r2]
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1c9      	bne.n	800616e <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	6839      	ldr	r1, [r7, #0]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	0018      	movs	r0, r3
 80061e2:	f000 fb25 	bl	8006830 <SPI_EndRxTransaction>
 80061e6:	1e03      	subs	r3, r0, #0
 80061e8:	d002      	beq.n	80061f0 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2220      	movs	r2, #32
 80061ee:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d004      	beq.n	8006202 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 80061f8:	2317      	movs	r3, #23
 80061fa:	18fb      	adds	r3, r7, r3
 80061fc:	2201      	movs	r2, #1
 80061fe:	701a      	strb	r2, [r3, #0]
 8006200:	e000      	b.n	8006204 <HAL_SPI_Receive+0x270>
  }

error :
 8006202:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	225d      	movs	r2, #93	; 0x5d
 8006208:	2101      	movs	r1, #1
 800620a:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	225c      	movs	r2, #92	; 0x5c
 8006210:	2100      	movs	r1, #0
 8006212:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006214:	2317      	movs	r3, #23
 8006216:	18fb      	adds	r3, r7, r3
 8006218:	781b      	ldrb	r3, [r3, #0]
}
 800621a:	0018      	movs	r0, r3
 800621c:	46bd      	mov	sp, r7
 800621e:	b007      	add	sp, #28
 8006220:	bd90      	pop	{r4, r7, pc}
 8006222:	46c0      	nop			; (mov r8, r8)
 8006224:	ffffefff 	.word	0xffffefff
 8006228:	ffffbfff 	.word	0xffffbfff

0800622c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b08a      	sub	sp, #40	; 0x28
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
 8006238:	001a      	movs	r2, r3
 800623a:	1cbb      	adds	r3, r7, #2
 800623c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800623e:	2301      	movs	r3, #1
 8006240:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006242:	2323      	movs	r3, #35	; 0x23
 8006244:	18fb      	adds	r3, r7, r3
 8006246:	2200      	movs	r2, #0
 8006248:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	225c      	movs	r2, #92	; 0x5c
 800624e:	5c9b      	ldrb	r3, [r3, r2]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d101      	bne.n	8006258 <HAL_SPI_TransmitReceive+0x2c>
 8006254:	2302      	movs	r3, #2
 8006256:	e1b5      	b.n	80065c4 <HAL_SPI_TransmitReceive+0x398>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	225c      	movs	r2, #92	; 0x5c
 800625c:	2101      	movs	r1, #1
 800625e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006260:	f7fd fca0 	bl	8003ba4 <HAL_GetTick>
 8006264:	0003      	movs	r3, r0
 8006266:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006268:	201b      	movs	r0, #27
 800626a:	183b      	adds	r3, r7, r0
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	215d      	movs	r1, #93	; 0x5d
 8006270:	5c52      	ldrb	r2, [r2, r1]
 8006272:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800627a:	2312      	movs	r3, #18
 800627c:	18fb      	adds	r3, r7, r3
 800627e:	1cba      	adds	r2, r7, #2
 8006280:	8812      	ldrh	r2, [r2, #0]
 8006282:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006284:	183b      	adds	r3, r7, r0
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d011      	beq.n	80062b0 <HAL_SPI_TransmitReceive+0x84>
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	2382      	movs	r3, #130	; 0x82
 8006290:	005b      	lsls	r3, r3, #1
 8006292:	429a      	cmp	r2, r3
 8006294:	d107      	bne.n	80062a6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d103      	bne.n	80062a6 <HAL_SPI_TransmitReceive+0x7a>
 800629e:	183b      	adds	r3, r7, r0
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	2b04      	cmp	r3, #4
 80062a4:	d004      	beq.n	80062b0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80062a6:	2323      	movs	r3, #35	; 0x23
 80062a8:	18fb      	adds	r3, r7, r3
 80062aa:	2202      	movs	r2, #2
 80062ac:	701a      	strb	r2, [r3, #0]
    goto error;
 80062ae:	e17e      	b.n	80065ae <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d006      	beq.n	80062c4 <HAL_SPI_TransmitReceive+0x98>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d003      	beq.n	80062c4 <HAL_SPI_TransmitReceive+0x98>
 80062bc:	1cbb      	adds	r3, r7, #2
 80062be:	881b      	ldrh	r3, [r3, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d104      	bne.n	80062ce <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80062c4:	2323      	movs	r3, #35	; 0x23
 80062c6:	18fb      	adds	r3, r7, r3
 80062c8:	2201      	movs	r2, #1
 80062ca:	701a      	strb	r2, [r3, #0]
    goto error;
 80062cc:	e16f      	b.n	80065ae <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	225d      	movs	r2, #93	; 0x5d
 80062d2:	5c9b      	ldrb	r3, [r3, r2]
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b04      	cmp	r3, #4
 80062d8:	d003      	beq.n	80062e2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	225d      	movs	r2, #93	; 0x5d
 80062de:	2105      	movs	r1, #5
 80062e0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	1cba      	adds	r2, r7, #2
 80062f2:	2146      	movs	r1, #70	; 0x46
 80062f4:	8812      	ldrh	r2, [r2, #0]
 80062f6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	1cba      	adds	r2, r7, #2
 80062fc:	2144      	movs	r1, #68	; 0x44
 80062fe:	8812      	ldrh	r2, [r2, #0]
 8006300:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	1cba      	adds	r2, r7, #2
 800630c:	8812      	ldrh	r2, [r2, #0]
 800630e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	1cba      	adds	r2, r7, #2
 8006314:	8812      	ldrh	r2, [r2, #0]
 8006316:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	68da      	ldr	r2, [r3, #12]
 8006328:	23e0      	movs	r3, #224	; 0xe0
 800632a:	00db      	lsls	r3, r3, #3
 800632c:	429a      	cmp	r2, r3
 800632e:	d908      	bls.n	8006342 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	685a      	ldr	r2, [r3, #4]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	49a4      	ldr	r1, [pc, #656]	; (80065cc <HAL_SPI_TransmitReceive+0x3a0>)
 800633c:	400a      	ands	r2, r1
 800633e:	605a      	str	r2, [r3, #4]
 8006340:	e008      	b.n	8006354 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	685a      	ldr	r2, [r3, #4]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2180      	movs	r1, #128	; 0x80
 800634e:	0149      	lsls	r1, r1, #5
 8006350:	430a      	orrs	r2, r1
 8006352:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2240      	movs	r2, #64	; 0x40
 800635c:	4013      	ands	r3, r2
 800635e:	2b40      	cmp	r3, #64	; 0x40
 8006360:	d007      	beq.n	8006372 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2140      	movs	r1, #64	; 0x40
 800636e:	430a      	orrs	r2, r1
 8006370:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	68da      	ldr	r2, [r3, #12]
 8006376:	23e0      	movs	r3, #224	; 0xe0
 8006378:	00db      	lsls	r3, r3, #3
 800637a:	429a      	cmp	r2, r3
 800637c:	d800      	bhi.n	8006380 <HAL_SPI_TransmitReceive+0x154>
 800637e:	e07f      	b.n	8006480 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d005      	beq.n	8006394 <HAL_SPI_TransmitReceive+0x168>
 8006388:	2312      	movs	r3, #18
 800638a:	18fb      	adds	r3, r7, r3
 800638c:	881b      	ldrh	r3, [r3, #0]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d000      	beq.n	8006394 <HAL_SPI_TransmitReceive+0x168>
 8006392:	e069      	b.n	8006468 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006398:	881a      	ldrh	r2, [r3, #0]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a4:	1c9a      	adds	r2, r3, #2
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	3b01      	subs	r3, #1
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063b8:	e056      	b.n	8006468 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	2202      	movs	r2, #2
 80063c2:	4013      	ands	r3, r2
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d11b      	bne.n	8006400 <HAL_SPI_TransmitReceive+0x1d4>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d016      	beq.n	8006400 <HAL_SPI_TransmitReceive+0x1d4>
 80063d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d113      	bne.n	8006400 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063dc:	881a      	ldrh	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e8:	1c9a      	adds	r2, r3, #2
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	3b01      	subs	r3, #1
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063fc:	2300      	movs	r3, #0
 80063fe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	2201      	movs	r2, #1
 8006408:	4013      	ands	r3, r2
 800640a:	2b01      	cmp	r3, #1
 800640c:	d11c      	bne.n	8006448 <HAL_SPI_TransmitReceive+0x21c>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2246      	movs	r2, #70	; 0x46
 8006412:	5a9b      	ldrh	r3, [r3, r2]
 8006414:	b29b      	uxth	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d016      	beq.n	8006448 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68da      	ldr	r2, [r3, #12]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006424:	b292      	uxth	r2, r2
 8006426:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642c:	1c9a      	adds	r2, r3, #2
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2246      	movs	r2, #70	; 0x46
 8006436:	5a9b      	ldrh	r3, [r3, r2]
 8006438:	b29b      	uxth	r3, r3
 800643a:	3b01      	subs	r3, #1
 800643c:	b299      	uxth	r1, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2246      	movs	r2, #70	; 0x46
 8006442:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006444:	2301      	movs	r3, #1
 8006446:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006448:	f7fd fbac 	bl	8003ba4 <HAL_GetTick>
 800644c:	0002      	movs	r2, r0
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006454:	429a      	cmp	r2, r3
 8006456:	d807      	bhi.n	8006468 <HAL_SPI_TransmitReceive+0x23c>
 8006458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645a:	3301      	adds	r3, #1
 800645c:	d004      	beq.n	8006468 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800645e:	2323      	movs	r3, #35	; 0x23
 8006460:	18fb      	adds	r3, r7, r3
 8006462:	2203      	movs	r2, #3
 8006464:	701a      	strb	r2, [r3, #0]
        goto error;
 8006466:	e0a2      	b.n	80065ae <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800646c:	b29b      	uxth	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1a3      	bne.n	80063ba <HAL_SPI_TransmitReceive+0x18e>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2246      	movs	r2, #70	; 0x46
 8006476:	5a9b      	ldrh	r3, [r3, r2]
 8006478:	b29b      	uxth	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	d19d      	bne.n	80063ba <HAL_SPI_TransmitReceive+0x18e>
 800647e:	e085      	b.n	800658c <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d005      	beq.n	8006494 <HAL_SPI_TransmitReceive+0x268>
 8006488:	2312      	movs	r3, #18
 800648a:	18fb      	adds	r3, r7, r3
 800648c:	881b      	ldrh	r3, [r3, #0]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d000      	beq.n	8006494 <HAL_SPI_TransmitReceive+0x268>
 8006492:	e070      	b.n	8006576 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	330c      	adds	r3, #12
 800649e:	7812      	ldrb	r2, [r2, #0]
 80064a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a6:	1c5a      	adds	r2, r3, #1
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	3b01      	subs	r3, #1
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064ba:	e05c      	b.n	8006576 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	2202      	movs	r2, #2
 80064c4:	4013      	ands	r3, r2
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d11c      	bne.n	8006504 <HAL_SPI_TransmitReceive+0x2d8>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d017      	beq.n	8006504 <HAL_SPI_TransmitReceive+0x2d8>
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d114      	bne.n	8006504 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	330c      	adds	r3, #12
 80064e4:	7812      	ldrb	r2, [r2, #0]
 80064e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ec:	1c5a      	adds	r2, r3, #1
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	3b01      	subs	r3, #1
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006500:	2300      	movs	r3, #0
 8006502:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	2201      	movs	r2, #1
 800650c:	4013      	ands	r3, r2
 800650e:	2b01      	cmp	r3, #1
 8006510:	d11e      	bne.n	8006550 <HAL_SPI_TransmitReceive+0x324>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2246      	movs	r2, #70	; 0x46
 8006516:	5a9b      	ldrh	r3, [r3, r2]
 8006518:	b29b      	uxth	r3, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d018      	beq.n	8006550 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	330c      	adds	r3, #12
 8006524:	001a      	movs	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652a:	7812      	ldrb	r2, [r2, #0]
 800652c:	b2d2      	uxtb	r2, r2
 800652e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006534:	1c5a      	adds	r2, r3, #1
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2246      	movs	r2, #70	; 0x46
 800653e:	5a9b      	ldrh	r3, [r3, r2]
 8006540:	b29b      	uxth	r3, r3
 8006542:	3b01      	subs	r3, #1
 8006544:	b299      	uxth	r1, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2246      	movs	r2, #70	; 0x46
 800654a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800654c:	2301      	movs	r3, #1
 800654e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006550:	f7fd fb28 	bl	8003ba4 <HAL_GetTick>
 8006554:	0002      	movs	r2, r0
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800655c:	429a      	cmp	r2, r3
 800655e:	d802      	bhi.n	8006566 <HAL_SPI_TransmitReceive+0x33a>
 8006560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006562:	3301      	adds	r3, #1
 8006564:	d102      	bne.n	800656c <HAL_SPI_TransmitReceive+0x340>
 8006566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006568:	2b00      	cmp	r3, #0
 800656a:	d104      	bne.n	8006576 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800656c:	2323      	movs	r3, #35	; 0x23
 800656e:	18fb      	adds	r3, r7, r3
 8006570:	2203      	movs	r2, #3
 8006572:	701a      	strb	r2, [r3, #0]
        goto error;
 8006574:	e01b      	b.n	80065ae <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800657a:	b29b      	uxth	r3, r3
 800657c:	2b00      	cmp	r3, #0
 800657e:	d19d      	bne.n	80064bc <HAL_SPI_TransmitReceive+0x290>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2246      	movs	r2, #70	; 0x46
 8006584:	5a9b      	ldrh	r3, [r3, r2]
 8006586:	b29b      	uxth	r3, r3
 8006588:	2b00      	cmp	r3, #0
 800658a:	d197      	bne.n	80064bc <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800658c:	69fa      	ldr	r2, [r7, #28]
 800658e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	0018      	movs	r0, r3
 8006594:	f000 f9aa 	bl	80068ec <SPI_EndRxTxTransaction>
 8006598:	1e03      	subs	r3, r0, #0
 800659a:	d007      	beq.n	80065ac <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800659c:	2323      	movs	r3, #35	; 0x23
 800659e:	18fb      	adds	r3, r7, r3
 80065a0:	2201      	movs	r2, #1
 80065a2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2220      	movs	r2, #32
 80065a8:	661a      	str	r2, [r3, #96]	; 0x60
 80065aa:	e000      	b.n	80065ae <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80065ac:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	225d      	movs	r2, #93	; 0x5d
 80065b2:	2101      	movs	r1, #1
 80065b4:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	225c      	movs	r2, #92	; 0x5c
 80065ba:	2100      	movs	r1, #0
 80065bc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80065be:	2323      	movs	r3, #35	; 0x23
 80065c0:	18fb      	adds	r3, r7, r3
 80065c2:	781b      	ldrb	r3, [r3, #0]
}
 80065c4:	0018      	movs	r0, r3
 80065c6:	46bd      	mov	sp, r7
 80065c8:	b00a      	add	sp, #40	; 0x28
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	ffffefff 	.word	0xffffefff

080065d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b088      	sub	sp, #32
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	603b      	str	r3, [r7, #0]
 80065dc:	1dfb      	adds	r3, r7, #7
 80065de:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80065e0:	f7fd fae0 	bl	8003ba4 <HAL_GetTick>
 80065e4:	0002      	movs	r2, r0
 80065e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e8:	1a9b      	subs	r3, r3, r2
 80065ea:	683a      	ldr	r2, [r7, #0]
 80065ec:	18d3      	adds	r3, r2, r3
 80065ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80065f0:	f7fd fad8 	bl	8003ba4 <HAL_GetTick>
 80065f4:	0003      	movs	r3, r0
 80065f6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80065f8:	4b3a      	ldr	r3, [pc, #232]	; (80066e4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	015b      	lsls	r3, r3, #5
 80065fe:	0d1b      	lsrs	r3, r3, #20
 8006600:	69fa      	ldr	r2, [r7, #28]
 8006602:	4353      	muls	r3, r2
 8006604:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006606:	e058      	b.n	80066ba <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	3301      	adds	r3, #1
 800660c:	d055      	beq.n	80066ba <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800660e:	f7fd fac9 	bl	8003ba4 <HAL_GetTick>
 8006612:	0002      	movs	r2, r0
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	69fa      	ldr	r2, [r7, #28]
 800661a:	429a      	cmp	r2, r3
 800661c:	d902      	bls.n	8006624 <SPI_WaitFlagStateUntilTimeout+0x54>
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d142      	bne.n	80066aa <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	685a      	ldr	r2, [r3, #4]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	21e0      	movs	r1, #224	; 0xe0
 8006630:	438a      	bics	r2, r1
 8006632:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	685a      	ldr	r2, [r3, #4]
 8006638:	2382      	movs	r3, #130	; 0x82
 800663a:	005b      	lsls	r3, r3, #1
 800663c:	429a      	cmp	r2, r3
 800663e:	d113      	bne.n	8006668 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	689a      	ldr	r2, [r3, #8]
 8006644:	2380      	movs	r3, #128	; 0x80
 8006646:	021b      	lsls	r3, r3, #8
 8006648:	429a      	cmp	r2, r3
 800664a:	d005      	beq.n	8006658 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	689a      	ldr	r2, [r3, #8]
 8006650:	2380      	movs	r3, #128	; 0x80
 8006652:	00db      	lsls	r3, r3, #3
 8006654:	429a      	cmp	r2, r3
 8006656:	d107      	bne.n	8006668 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2140      	movs	r1, #64	; 0x40
 8006664:	438a      	bics	r2, r1
 8006666:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800666c:	2380      	movs	r3, #128	; 0x80
 800666e:	019b      	lsls	r3, r3, #6
 8006670:	429a      	cmp	r2, r3
 8006672:	d110      	bne.n	8006696 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	491a      	ldr	r1, [pc, #104]	; (80066e8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006680:	400a      	ands	r2, r1
 8006682:	601a      	str	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2180      	movs	r1, #128	; 0x80
 8006690:	0189      	lsls	r1, r1, #6
 8006692:	430a      	orrs	r2, r1
 8006694:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	225d      	movs	r2, #93	; 0x5d
 800669a:	2101      	movs	r1, #1
 800669c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	225c      	movs	r2, #92	; 0x5c
 80066a2:	2100      	movs	r1, #0
 80066a4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e017      	b.n	80066da <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d101      	bne.n	80066b4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80066b0:	2300      	movs	r3, #0
 80066b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	3b01      	subs	r3, #1
 80066b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	4013      	ands	r3, r2
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	425a      	negs	r2, r3
 80066ca:	4153      	adcs	r3, r2
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	001a      	movs	r2, r3
 80066d0:	1dfb      	adds	r3, r7, #7
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d197      	bne.n	8006608 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	0018      	movs	r0, r3
 80066dc:	46bd      	mov	sp, r7
 80066de:	b008      	add	sp, #32
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	46c0      	nop			; (mov r8, r8)
 80066e4:	20000024 	.word	0x20000024
 80066e8:	ffffdfff 	.word	0xffffdfff

080066ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b08a      	sub	sp, #40	; 0x28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]
 80066f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80066fa:	2317      	movs	r3, #23
 80066fc:	18fb      	adds	r3, r7, r3
 80066fe:	2200      	movs	r2, #0
 8006700:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006702:	f7fd fa4f 	bl	8003ba4 <HAL_GetTick>
 8006706:	0002      	movs	r2, r0
 8006708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670a:	1a9b      	subs	r3, r3, r2
 800670c:	683a      	ldr	r2, [r7, #0]
 800670e:	18d3      	adds	r3, r2, r3
 8006710:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006712:	f7fd fa47 	bl	8003ba4 <HAL_GetTick>
 8006716:	0003      	movs	r3, r0
 8006718:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	330c      	adds	r3, #12
 8006720:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006722:	4b41      	ldr	r3, [pc, #260]	; (8006828 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	0013      	movs	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	189b      	adds	r3, r3, r2
 800672c:	00da      	lsls	r2, r3, #3
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	0d1b      	lsrs	r3, r3, #20
 8006732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006734:	4353      	muls	r3, r2
 8006736:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006738:	e068      	b.n	800680c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	23c0      	movs	r3, #192	; 0xc0
 800673e:	00db      	lsls	r3, r3, #3
 8006740:	429a      	cmp	r2, r3
 8006742:	d10a      	bne.n	800675a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d107      	bne.n	800675a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	b2da      	uxtb	r2, r3
 8006750:	2117      	movs	r1, #23
 8006752:	187b      	adds	r3, r7, r1
 8006754:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006756:	187b      	adds	r3, r7, r1
 8006758:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	3301      	adds	r3, #1
 800675e:	d055      	beq.n	800680c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006760:	f7fd fa20 	bl	8003ba4 <HAL_GetTick>
 8006764:	0002      	movs	r2, r0
 8006766:	6a3b      	ldr	r3, [r7, #32]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800676c:	429a      	cmp	r2, r3
 800676e:	d902      	bls.n	8006776 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006772:	2b00      	cmp	r3, #0
 8006774:	d142      	bne.n	80067fc <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	685a      	ldr	r2, [r3, #4]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	21e0      	movs	r1, #224	; 0xe0
 8006782:	438a      	bics	r2, r1
 8006784:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	685a      	ldr	r2, [r3, #4]
 800678a:	2382      	movs	r3, #130	; 0x82
 800678c:	005b      	lsls	r3, r3, #1
 800678e:	429a      	cmp	r2, r3
 8006790:	d113      	bne.n	80067ba <SPI_WaitFifoStateUntilTimeout+0xce>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	689a      	ldr	r2, [r3, #8]
 8006796:	2380      	movs	r3, #128	; 0x80
 8006798:	021b      	lsls	r3, r3, #8
 800679a:	429a      	cmp	r2, r3
 800679c:	d005      	beq.n	80067aa <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	689a      	ldr	r2, [r3, #8]
 80067a2:	2380      	movs	r3, #128	; 0x80
 80067a4:	00db      	lsls	r3, r3, #3
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d107      	bne.n	80067ba <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2140      	movs	r1, #64	; 0x40
 80067b6:	438a      	bics	r2, r1
 80067b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067be:	2380      	movs	r3, #128	; 0x80
 80067c0:	019b      	lsls	r3, r3, #6
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d110      	bne.n	80067e8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4916      	ldr	r1, [pc, #88]	; (800682c <SPI_WaitFifoStateUntilTimeout+0x140>)
 80067d2:	400a      	ands	r2, r1
 80067d4:	601a      	str	r2, [r3, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2180      	movs	r1, #128	; 0x80
 80067e2:	0189      	lsls	r1, r1, #6
 80067e4:	430a      	orrs	r2, r1
 80067e6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	225d      	movs	r2, #93	; 0x5d
 80067ec:	2101      	movs	r1, #1
 80067ee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	225c      	movs	r2, #92	; 0x5c
 80067f4:	2100      	movs	r1, #0
 80067f6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e010      	b.n	800681e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d101      	bne.n	8006806 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8006802:	2300      	movs	r3, #0
 8006804:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	3b01      	subs	r3, #1
 800680a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	68ba      	ldr	r2, [r7, #8]
 8006814:	4013      	ands	r3, r2
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	429a      	cmp	r2, r3
 800681a:	d18e      	bne.n	800673a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	0018      	movs	r0, r3
 8006820:	46bd      	mov	sp, r7
 8006822:	b00a      	add	sp, #40	; 0x28
 8006824:	bd80      	pop	{r7, pc}
 8006826:	46c0      	nop			; (mov r8, r8)
 8006828:	20000024 	.word	0x20000024
 800682c:	ffffdfff 	.word	0xffffdfff

08006830 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af02      	add	r7, sp, #8
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	685a      	ldr	r2, [r3, #4]
 8006840:	2382      	movs	r3, #130	; 0x82
 8006842:	005b      	lsls	r3, r3, #1
 8006844:	429a      	cmp	r2, r3
 8006846:	d113      	bne.n	8006870 <SPI_EndRxTransaction+0x40>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	689a      	ldr	r2, [r3, #8]
 800684c:	2380      	movs	r3, #128	; 0x80
 800684e:	021b      	lsls	r3, r3, #8
 8006850:	429a      	cmp	r2, r3
 8006852:	d005      	beq.n	8006860 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	689a      	ldr	r2, [r3, #8]
 8006858:	2380      	movs	r3, #128	; 0x80
 800685a:	00db      	lsls	r3, r3, #3
 800685c:	429a      	cmp	r2, r3
 800685e:	d107      	bne.n	8006870 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2140      	movs	r1, #64	; 0x40
 800686c:	438a      	bics	r2, r1
 800686e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	9300      	str	r3, [sp, #0]
 8006878:	0013      	movs	r3, r2
 800687a:	2200      	movs	r2, #0
 800687c:	2180      	movs	r1, #128	; 0x80
 800687e:	f7ff fea7 	bl	80065d0 <SPI_WaitFlagStateUntilTimeout>
 8006882:	1e03      	subs	r3, r0, #0
 8006884:	d007      	beq.n	8006896 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800688a:	2220      	movs	r2, #32
 800688c:	431a      	orrs	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e026      	b.n	80068e4 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	685a      	ldr	r2, [r3, #4]
 800689a:	2382      	movs	r3, #130	; 0x82
 800689c:	005b      	lsls	r3, r3, #1
 800689e:	429a      	cmp	r2, r3
 80068a0:	d11f      	bne.n	80068e2 <SPI_EndRxTransaction+0xb2>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	689a      	ldr	r2, [r3, #8]
 80068a6:	2380      	movs	r3, #128	; 0x80
 80068a8:	021b      	lsls	r3, r3, #8
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d005      	beq.n	80068ba <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	689a      	ldr	r2, [r3, #8]
 80068b2:	2380      	movs	r3, #128	; 0x80
 80068b4:	00db      	lsls	r3, r3, #3
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d113      	bne.n	80068e2 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80068ba:	68ba      	ldr	r2, [r7, #8]
 80068bc:	23c0      	movs	r3, #192	; 0xc0
 80068be:	00d9      	lsls	r1, r3, #3
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	0013      	movs	r3, r2
 80068c8:	2200      	movs	r2, #0
 80068ca:	f7ff ff0f 	bl	80066ec <SPI_WaitFifoStateUntilTimeout>
 80068ce:	1e03      	subs	r3, r0, #0
 80068d0:	d007      	beq.n	80068e2 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068d6:	2220      	movs	r2, #32
 80068d8:	431a      	orrs	r2, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e000      	b.n	80068e4 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	0018      	movs	r0, r3
 80068e6:	46bd      	mov	sp, r7
 80068e8:	b004      	add	sp, #16
 80068ea:	bd80      	pop	{r7, pc}

080068ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b086      	sub	sp, #24
 80068f0:	af02      	add	r7, sp, #8
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	23c0      	movs	r3, #192	; 0xc0
 80068fc:	0159      	lsls	r1, r3, #5
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	9300      	str	r3, [sp, #0]
 8006904:	0013      	movs	r3, r2
 8006906:	2200      	movs	r2, #0
 8006908:	f7ff fef0 	bl	80066ec <SPI_WaitFifoStateUntilTimeout>
 800690c:	1e03      	subs	r3, r0, #0
 800690e:	d007      	beq.n	8006920 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006914:	2220      	movs	r2, #32
 8006916:	431a      	orrs	r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	e027      	b.n	8006970 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	9300      	str	r3, [sp, #0]
 8006928:	0013      	movs	r3, r2
 800692a:	2200      	movs	r2, #0
 800692c:	2180      	movs	r1, #128	; 0x80
 800692e:	f7ff fe4f 	bl	80065d0 <SPI_WaitFlagStateUntilTimeout>
 8006932:	1e03      	subs	r3, r0, #0
 8006934:	d007      	beq.n	8006946 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800693a:	2220      	movs	r2, #32
 800693c:	431a      	orrs	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e014      	b.n	8006970 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006946:	68ba      	ldr	r2, [r7, #8]
 8006948:	23c0      	movs	r3, #192	; 0xc0
 800694a:	00d9      	lsls	r1, r3, #3
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	0013      	movs	r3, r2
 8006954:	2200      	movs	r2, #0
 8006956:	f7ff fec9 	bl	80066ec <SPI_WaitFifoStateUntilTimeout>
 800695a:	1e03      	subs	r3, r0, #0
 800695c:	d007      	beq.n	800696e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006962:	2220      	movs	r2, #32
 8006964:	431a      	orrs	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e000      	b.n	8006970 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	0018      	movs	r0, r3
 8006972:	46bd      	mov	sp, r7
 8006974:	b004      	add	sp, #16
 8006976:	bd80      	pop	{r7, pc}

08006978 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d101      	bne.n	800698a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e04a      	b.n	8006a20 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	223d      	movs	r2, #61	; 0x3d
 800698e:	5c9b      	ldrb	r3, [r3, r2]
 8006990:	b2db      	uxtb	r3, r3
 8006992:	2b00      	cmp	r3, #0
 8006994:	d107      	bne.n	80069a6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	223c      	movs	r2, #60	; 0x3c
 800699a:	2100      	movs	r1, #0
 800699c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	0018      	movs	r0, r3
 80069a2:	f7fc fe03 	bl	80035ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	223d      	movs	r2, #61	; 0x3d
 80069aa:	2102      	movs	r1, #2
 80069ac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	3304      	adds	r3, #4
 80069b6:	0019      	movs	r1, r3
 80069b8:	0010      	movs	r0, r2
 80069ba:	f000 fa11 	bl	8006de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2248      	movs	r2, #72	; 0x48
 80069c2:	2101      	movs	r1, #1
 80069c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	223e      	movs	r2, #62	; 0x3e
 80069ca:	2101      	movs	r1, #1
 80069cc:	5499      	strb	r1, [r3, r2]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	223f      	movs	r2, #63	; 0x3f
 80069d2:	2101      	movs	r1, #1
 80069d4:	5499      	strb	r1, [r3, r2]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2240      	movs	r2, #64	; 0x40
 80069da:	2101      	movs	r1, #1
 80069dc:	5499      	strb	r1, [r3, r2]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2241      	movs	r2, #65	; 0x41
 80069e2:	2101      	movs	r1, #1
 80069e4:	5499      	strb	r1, [r3, r2]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2242      	movs	r2, #66	; 0x42
 80069ea:	2101      	movs	r1, #1
 80069ec:	5499      	strb	r1, [r3, r2]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2243      	movs	r2, #67	; 0x43
 80069f2:	2101      	movs	r1, #1
 80069f4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2244      	movs	r2, #68	; 0x44
 80069fa:	2101      	movs	r1, #1
 80069fc:	5499      	strb	r1, [r3, r2]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2245      	movs	r2, #69	; 0x45
 8006a02:	2101      	movs	r1, #1
 8006a04:	5499      	strb	r1, [r3, r2]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2246      	movs	r2, #70	; 0x46
 8006a0a:	2101      	movs	r1, #1
 8006a0c:	5499      	strb	r1, [r3, r2]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2247      	movs	r2, #71	; 0x47
 8006a12:	2101      	movs	r1, #1
 8006a14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	223d      	movs	r2, #61	; 0x3d
 8006a1a:	2101      	movs	r1, #1
 8006a1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	0018      	movs	r0, r3
 8006a22:	46bd      	mov	sp, r7
 8006a24:	b002      	add	sp, #8
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	223d      	movs	r2, #61	; 0x3d
 8006a34:	5c9b      	ldrb	r3, [r3, r2]
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d001      	beq.n	8006a40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e042      	b.n	8006ac6 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	223d      	movs	r2, #61	; 0x3d
 8006a44:	2102      	movs	r1, #2
 8006a46:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68da      	ldr	r2, [r3, #12]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2101      	movs	r1, #1
 8006a54:	430a      	orrs	r2, r1
 8006a56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a1c      	ldr	r2, [pc, #112]	; (8006ad0 <HAL_TIM_Base_Start_IT+0xa8>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d00f      	beq.n	8006a82 <HAL_TIM_Base_Start_IT+0x5a>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	2380      	movs	r3, #128	; 0x80
 8006a68:	05db      	lsls	r3, r3, #23
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d009      	beq.n	8006a82 <HAL_TIM_Base_Start_IT+0x5a>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a18      	ldr	r2, [pc, #96]	; (8006ad4 <HAL_TIM_Base_Start_IT+0xac>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d004      	beq.n	8006a82 <HAL_TIM_Base_Start_IT+0x5a>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a16      	ldr	r2, [pc, #88]	; (8006ad8 <HAL_TIM_Base_Start_IT+0xb0>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d116      	bne.n	8006ab0 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	4a14      	ldr	r2, [pc, #80]	; (8006adc <HAL_TIM_Base_Start_IT+0xb4>)
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2b06      	cmp	r3, #6
 8006a92:	d016      	beq.n	8006ac2 <HAL_TIM_Base_Start_IT+0x9a>
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	2380      	movs	r3, #128	; 0x80
 8006a98:	025b      	lsls	r3, r3, #9
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d011      	beq.n	8006ac2 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2101      	movs	r1, #1
 8006aaa:	430a      	orrs	r2, r1
 8006aac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aae:	e008      	b.n	8006ac2 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2101      	movs	r1, #1
 8006abc:	430a      	orrs	r2, r1
 8006abe:	601a      	str	r2, [r3, #0]
 8006ac0:	e000      	b.n	8006ac4 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ac2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	0018      	movs	r0, r3
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	b004      	add	sp, #16
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	46c0      	nop			; (mov r8, r8)
 8006ad0:	40012c00 	.word	0x40012c00
 8006ad4:	40000400 	.word	0x40000400
 8006ad8:	40014000 	.word	0x40014000
 8006adc:	00010007 	.word	0x00010007

08006ae0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68da      	ldr	r2, [r3, #12]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2101      	movs	r1, #1
 8006af4:	438a      	bics	r2, r1
 8006af6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	4a0d      	ldr	r2, [pc, #52]	; (8006b34 <HAL_TIM_Base_Stop_IT+0x54>)
 8006b00:	4013      	ands	r3, r2
 8006b02:	d10d      	bne.n	8006b20 <HAL_TIM_Base_Stop_IT+0x40>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	4a0b      	ldr	r2, [pc, #44]	; (8006b38 <HAL_TIM_Base_Stop_IT+0x58>)
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	d107      	bne.n	8006b20 <HAL_TIM_Base_Stop_IT+0x40>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2101      	movs	r1, #1
 8006b1c:	438a      	bics	r2, r1
 8006b1e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	223d      	movs	r2, #61	; 0x3d
 8006b24:	2101      	movs	r1, #1
 8006b26:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	0018      	movs	r0, r3
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	b002      	add	sp, #8
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	46c0      	nop			; (mov r8, r8)
 8006b34:	00001111 	.word	0x00001111
 8006b38:	00000444 	.word	0x00000444

08006b3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d124      	bne.n	8006b9c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	2202      	movs	r2, #2
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d11d      	bne.n	8006b9c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2203      	movs	r2, #3
 8006b66:	4252      	negs	r2, r2
 8006b68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	2203      	movs	r2, #3
 8006b78:	4013      	ands	r3, r2
 8006b7a:	d004      	beq.n	8006b86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	0018      	movs	r0, r3
 8006b80:	f000 f916 	bl	8006db0 <HAL_TIM_IC_CaptureCallback>
 8006b84:	e007      	b.n	8006b96 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	0018      	movs	r0, r3
 8006b8a:	f000 f909 	bl	8006da0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	0018      	movs	r0, r3
 8006b92:	f000 f915 	bl	8006dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	2204      	movs	r2, #4
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	2b04      	cmp	r3, #4
 8006ba8:	d125      	bne.n	8006bf6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	2204      	movs	r2, #4
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	2b04      	cmp	r3, #4
 8006bb6:	d11e      	bne.n	8006bf6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2205      	movs	r2, #5
 8006bbe:	4252      	negs	r2, r2
 8006bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2202      	movs	r2, #2
 8006bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	699a      	ldr	r2, [r3, #24]
 8006bce:	23c0      	movs	r3, #192	; 0xc0
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	d004      	beq.n	8006be0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	0018      	movs	r0, r3
 8006bda:	f000 f8e9 	bl	8006db0 <HAL_TIM_IC_CaptureCallback>
 8006bde:	e007      	b.n	8006bf0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	0018      	movs	r0, r3
 8006be4:	f000 f8dc 	bl	8006da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	0018      	movs	r0, r3
 8006bec:	f000 f8e8 	bl	8006dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	2208      	movs	r2, #8
 8006bfe:	4013      	ands	r3, r2
 8006c00:	2b08      	cmp	r3, #8
 8006c02:	d124      	bne.n	8006c4e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	2208      	movs	r2, #8
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	2b08      	cmp	r3, #8
 8006c10:	d11d      	bne.n	8006c4e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2209      	movs	r2, #9
 8006c18:	4252      	negs	r2, r2
 8006c1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2204      	movs	r2, #4
 8006c20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	69db      	ldr	r3, [r3, #28]
 8006c28:	2203      	movs	r2, #3
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	d004      	beq.n	8006c38 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	0018      	movs	r0, r3
 8006c32:	f000 f8bd 	bl	8006db0 <HAL_TIM_IC_CaptureCallback>
 8006c36:	e007      	b.n	8006c48 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	0018      	movs	r0, r3
 8006c3c:	f000 f8b0 	bl	8006da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	0018      	movs	r0, r3
 8006c44:	f000 f8bc 	bl	8006dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	2210      	movs	r2, #16
 8006c56:	4013      	ands	r3, r2
 8006c58:	2b10      	cmp	r3, #16
 8006c5a:	d125      	bne.n	8006ca8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	2210      	movs	r2, #16
 8006c64:	4013      	ands	r3, r2
 8006c66:	2b10      	cmp	r3, #16
 8006c68:	d11e      	bne.n	8006ca8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2211      	movs	r2, #17
 8006c70:	4252      	negs	r2, r2
 8006c72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2208      	movs	r2, #8
 8006c78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	69da      	ldr	r2, [r3, #28]
 8006c80:	23c0      	movs	r3, #192	; 0xc0
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	4013      	ands	r3, r2
 8006c86:	d004      	beq.n	8006c92 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	0018      	movs	r0, r3
 8006c8c:	f000 f890 	bl	8006db0 <HAL_TIM_IC_CaptureCallback>
 8006c90:	e007      	b.n	8006ca2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	0018      	movs	r0, r3
 8006c96:	f000 f883 	bl	8006da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	0018      	movs	r0, r3
 8006c9e:	f000 f88f 	bl	8006dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d10f      	bne.n	8006cd6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d108      	bne.n	8006cd6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2202      	movs	r2, #2
 8006cca:	4252      	negs	r2, r2
 8006ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	0018      	movs	r0, r3
 8006cd2:	f7fc fb77 	bl	80033c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	691b      	ldr	r3, [r3, #16]
 8006cdc:	2280      	movs	r2, #128	; 0x80
 8006cde:	4013      	ands	r3, r2
 8006ce0:	2b80      	cmp	r3, #128	; 0x80
 8006ce2:	d10f      	bne.n	8006d04 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	2280      	movs	r2, #128	; 0x80
 8006cec:	4013      	ands	r3, r2
 8006cee:	2b80      	cmp	r3, #128	; 0x80
 8006cf0:	d108      	bne.n	8006d04 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2281      	movs	r2, #129	; 0x81
 8006cf8:	4252      	negs	r2, r2
 8006cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	0018      	movs	r0, r3
 8006d00:	f000 f964 	bl	8006fcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	691a      	ldr	r2, [r3, #16]
 8006d0a:	2380      	movs	r3, #128	; 0x80
 8006d0c:	005b      	lsls	r3, r3, #1
 8006d0e:	401a      	ands	r2, r3
 8006d10:	2380      	movs	r3, #128	; 0x80
 8006d12:	005b      	lsls	r3, r3, #1
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d10e      	bne.n	8006d36 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	2280      	movs	r2, #128	; 0x80
 8006d20:	4013      	ands	r3, r2
 8006d22:	2b80      	cmp	r3, #128	; 0x80
 8006d24:	d107      	bne.n	8006d36 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a1c      	ldr	r2, [pc, #112]	; (8006d9c <HAL_TIM_IRQHandler+0x260>)
 8006d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	0018      	movs	r0, r3
 8006d32:	f000 f953 	bl	8006fdc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	2240      	movs	r2, #64	; 0x40
 8006d3e:	4013      	ands	r3, r2
 8006d40:	2b40      	cmp	r3, #64	; 0x40
 8006d42:	d10f      	bne.n	8006d64 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	2240      	movs	r2, #64	; 0x40
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	2b40      	cmp	r3, #64	; 0x40
 8006d50:	d108      	bne.n	8006d64 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2241      	movs	r2, #65	; 0x41
 8006d58:	4252      	negs	r2, r2
 8006d5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	0018      	movs	r0, r3
 8006d60:	f000 f836 	bl	8006dd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	2220      	movs	r2, #32
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	2b20      	cmp	r3, #32
 8006d70:	d10f      	bne.n	8006d92 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	2220      	movs	r2, #32
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	2b20      	cmp	r3, #32
 8006d7e:	d108      	bne.n	8006d92 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2221      	movs	r2, #33	; 0x21
 8006d86:	4252      	negs	r2, r2
 8006d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	0018      	movs	r0, r3
 8006d8e:	f000 f915 	bl	8006fbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d92:	46c0      	nop			; (mov r8, r8)
 8006d94:	46bd      	mov	sp, r7
 8006d96:	b002      	add	sp, #8
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	46c0      	nop			; (mov r8, r8)
 8006d9c:	fffffeff 	.word	0xfffffeff

08006da0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006da8:	46c0      	nop			; (mov r8, r8)
 8006daa:	46bd      	mov	sp, r7
 8006dac:	b002      	add	sp, #8
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006db8:	46c0      	nop			; (mov r8, r8)
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	b002      	add	sp, #8
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006dc8:	46c0      	nop			; (mov r8, r8)
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	b002      	add	sp, #8
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006dd8:	46c0      	nop			; (mov r8, r8)
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	b002      	add	sp, #8
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a34      	ldr	r2, [pc, #208]	; (8006ec4 <TIM_Base_SetConfig+0xe4>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d008      	beq.n	8006e0a <TIM_Base_SetConfig+0x2a>
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	2380      	movs	r3, #128	; 0x80
 8006dfc:	05db      	lsls	r3, r3, #23
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d003      	beq.n	8006e0a <TIM_Base_SetConfig+0x2a>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a30      	ldr	r2, [pc, #192]	; (8006ec8 <TIM_Base_SetConfig+0xe8>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d108      	bne.n	8006e1c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2270      	movs	r2, #112	; 0x70
 8006e0e:	4393      	bics	r3, r2
 8006e10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a29      	ldr	r2, [pc, #164]	; (8006ec4 <TIM_Base_SetConfig+0xe4>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d018      	beq.n	8006e56 <TIM_Base_SetConfig+0x76>
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	2380      	movs	r3, #128	; 0x80
 8006e28:	05db      	lsls	r3, r3, #23
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d013      	beq.n	8006e56 <TIM_Base_SetConfig+0x76>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a25      	ldr	r2, [pc, #148]	; (8006ec8 <TIM_Base_SetConfig+0xe8>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d00f      	beq.n	8006e56 <TIM_Base_SetConfig+0x76>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a24      	ldr	r2, [pc, #144]	; (8006ecc <TIM_Base_SetConfig+0xec>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d00b      	beq.n	8006e56 <TIM_Base_SetConfig+0x76>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a23      	ldr	r2, [pc, #140]	; (8006ed0 <TIM_Base_SetConfig+0xf0>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d007      	beq.n	8006e56 <TIM_Base_SetConfig+0x76>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a22      	ldr	r2, [pc, #136]	; (8006ed4 <TIM_Base_SetConfig+0xf4>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d003      	beq.n	8006e56 <TIM_Base_SetConfig+0x76>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a21      	ldr	r2, [pc, #132]	; (8006ed8 <TIM_Base_SetConfig+0xf8>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d108      	bne.n	8006e68 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	4a20      	ldr	r2, [pc, #128]	; (8006edc <TIM_Base_SetConfig+0xfc>)
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2280      	movs	r2, #128	; 0x80
 8006e6c:	4393      	bics	r3, r2
 8006e6e:	001a      	movs	r2, r3
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	695b      	ldr	r3, [r3, #20]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	689a      	ldr	r2, [r3, #8]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a0c      	ldr	r2, [pc, #48]	; (8006ec4 <TIM_Base_SetConfig+0xe4>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d00b      	beq.n	8006eae <TIM_Base_SetConfig+0xce>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a0d      	ldr	r2, [pc, #52]	; (8006ed0 <TIM_Base_SetConfig+0xf0>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d007      	beq.n	8006eae <TIM_Base_SetConfig+0xce>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a0c      	ldr	r2, [pc, #48]	; (8006ed4 <TIM_Base_SetConfig+0xf4>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d003      	beq.n	8006eae <TIM_Base_SetConfig+0xce>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a0b      	ldr	r2, [pc, #44]	; (8006ed8 <TIM_Base_SetConfig+0xf8>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d103      	bne.n	8006eb6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	691a      	ldr	r2, [r3, #16]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	615a      	str	r2, [r3, #20]
}
 8006ebc:	46c0      	nop			; (mov r8, r8)
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	b004      	add	sp, #16
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	40012c00 	.word	0x40012c00
 8006ec8:	40000400 	.word	0x40000400
 8006ecc:	40002000 	.word	0x40002000
 8006ed0:	40014000 	.word	0x40014000
 8006ed4:	40014400 	.word	0x40014400
 8006ed8:	40014800 	.word	0x40014800
 8006edc:	fffffcff 	.word	0xfffffcff

08006ee0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	223c      	movs	r2, #60	; 0x3c
 8006eee:	5c9b      	ldrb	r3, [r3, r2]
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d101      	bne.n	8006ef8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ef4:	2302      	movs	r3, #2
 8006ef6:	e055      	b.n	8006fa4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	223c      	movs	r2, #60	; 0x3c
 8006efc:	2101      	movs	r1, #1
 8006efe:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	223d      	movs	r2, #61	; 0x3d
 8006f04:	2102      	movs	r1, #2
 8006f06:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a23      	ldr	r2, [pc, #140]	; (8006fac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d108      	bne.n	8006f34 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	4a22      	ldr	r2, [pc, #136]	; (8006fb0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006f26:	4013      	ands	r3, r2
 8006f28:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2270      	movs	r2, #112	; 0x70
 8006f38:	4393      	bics	r3, r2
 8006f3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a16      	ldr	r2, [pc, #88]	; (8006fac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d00f      	beq.n	8006f78 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	2380      	movs	r3, #128	; 0x80
 8006f5e:	05db      	lsls	r3, r3, #23
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d009      	beq.n	8006f78 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a12      	ldr	r2, [pc, #72]	; (8006fb4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d004      	beq.n	8006f78 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a11      	ldr	r2, [pc, #68]	; (8006fb8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d10c      	bne.n	8006f92 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	2280      	movs	r2, #128	; 0x80
 8006f7c:	4393      	bics	r3, r2
 8006f7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	68ba      	ldr	r2, [r7, #8]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	223d      	movs	r2, #61	; 0x3d
 8006f96:	2101      	movs	r1, #1
 8006f98:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	223c      	movs	r2, #60	; 0x3c
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	0018      	movs	r0, r3
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	b004      	add	sp, #16
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	40012c00 	.word	0x40012c00
 8006fb0:	ff0fffff 	.word	0xff0fffff
 8006fb4:	40000400 	.word	0x40000400
 8006fb8:	40014000 	.word	0x40014000

08006fbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fc4:	46c0      	nop			; (mov r8, r8)
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	b002      	add	sp, #8
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fd4:	46c0      	nop			; (mov r8, r8)
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	b002      	add	sp, #8
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006fe4:	46c0      	nop			; (mov r8, r8)
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	b002      	add	sp, #8
 8006fea:	bd80      	pop	{r7, pc}

08006fec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d101      	bne.n	8006ffe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e046      	b.n	800708c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2288      	movs	r2, #136	; 0x88
 8007002:	589b      	ldr	r3, [r3, r2]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d107      	bne.n	8007018 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2284      	movs	r2, #132	; 0x84
 800700c:	2100      	movs	r1, #0
 800700e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	0018      	movs	r0, r3
 8007014:	f7fc faf0 	bl	80035f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2288      	movs	r2, #136	; 0x88
 800701c:	2124      	movs	r1, #36	; 0x24
 800701e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2101      	movs	r1, #1
 800702c:	438a      	bics	r2, r1
 800702e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	0018      	movs	r0, r3
 8007034:	f000 f9ee 	bl	8007414 <UART_SetConfig>
 8007038:	0003      	movs	r3, r0
 800703a:	2b01      	cmp	r3, #1
 800703c:	d101      	bne.n	8007042 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e024      	b.n	800708c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007046:	2b00      	cmp	r3, #0
 8007048:	d003      	beq.n	8007052 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	0018      	movs	r0, r3
 800704e:	f000 fc9f 	bl	8007990 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	490d      	ldr	r1, [pc, #52]	; (8007094 <HAL_UART_Init+0xa8>)
 800705e:	400a      	ands	r2, r1
 8007060:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	689a      	ldr	r2, [r3, #8]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	212a      	movs	r1, #42	; 0x2a
 800706e:	438a      	bics	r2, r1
 8007070:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2101      	movs	r1, #1
 800707e:	430a      	orrs	r2, r1
 8007080:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	0018      	movs	r0, r3
 8007086:	f000 fd37 	bl	8007af8 <UART_CheckIdleState>
 800708a:	0003      	movs	r3, r0
}
 800708c:	0018      	movs	r0, r3
 800708e:	46bd      	mov	sp, r7
 8007090:	b002      	add	sp, #8
 8007092:	bd80      	pop	{r7, pc}
 8007094:	ffffb7ff 	.word	0xffffb7ff

08007098 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d101      	bne.n	80070aa <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e032      	b.n	8007110 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2288      	movs	r2, #136	; 0x88
 80070ae:	2124      	movs	r1, #36	; 0x24
 80070b0:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2101      	movs	r1, #1
 80070be:	438a      	bics	r2, r1
 80070c0:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2200      	movs	r2, #0
 80070c8:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2200      	movs	r2, #0
 80070d0:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2200      	movs	r2, #0
 80070d8:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	0018      	movs	r0, r3
 80070de:	f7fc fb6f 	bl	80037c0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2290      	movs	r2, #144	; 0x90
 80070e6:	2100      	movs	r1, #0
 80070e8:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2288      	movs	r2, #136	; 0x88
 80070ee:	2100      	movs	r1, #0
 80070f0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	228c      	movs	r2, #140	; 0x8c
 80070f6:	2100      	movs	r1, #0
 80070f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2284      	movs	r2, #132	; 0x84
 800710a:	2100      	movs	r1, #0
 800710c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	0018      	movs	r0, r3
 8007112:	46bd      	mov	sp, r7
 8007114:	b002      	add	sp, #8
 8007116:	bd80      	pop	{r7, pc}

08007118 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b08a      	sub	sp, #40	; 0x28
 800711c:	af02      	add	r7, sp, #8
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	603b      	str	r3, [r7, #0]
 8007124:	1dbb      	adds	r3, r7, #6
 8007126:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2288      	movs	r2, #136	; 0x88
 800712c:	589b      	ldr	r3, [r3, r2]
 800712e:	2b20      	cmp	r3, #32
 8007130:	d000      	beq.n	8007134 <HAL_UART_Transmit+0x1c>
 8007132:	e088      	b.n	8007246 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d003      	beq.n	8007142 <HAL_UART_Transmit+0x2a>
 800713a:	1dbb      	adds	r3, r7, #6
 800713c:	881b      	ldrh	r3, [r3, #0]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d101      	bne.n	8007146 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e080      	b.n	8007248 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	689a      	ldr	r2, [r3, #8]
 800714a:	2380      	movs	r3, #128	; 0x80
 800714c:	015b      	lsls	r3, r3, #5
 800714e:	429a      	cmp	r2, r3
 8007150:	d109      	bne.n	8007166 <HAL_UART_Transmit+0x4e>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d105      	bne.n	8007166 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	2201      	movs	r2, #1
 800715e:	4013      	ands	r3, r2
 8007160:	d001      	beq.n	8007166 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e070      	b.n	8007248 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2290      	movs	r2, #144	; 0x90
 800716a:	2100      	movs	r1, #0
 800716c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2288      	movs	r2, #136	; 0x88
 8007172:	2121      	movs	r1, #33	; 0x21
 8007174:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007176:	f7fc fd15 	bl	8003ba4 <HAL_GetTick>
 800717a:	0003      	movs	r3, r0
 800717c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	1dba      	adds	r2, r7, #6
 8007182:	2154      	movs	r1, #84	; 0x54
 8007184:	8812      	ldrh	r2, [r2, #0]
 8007186:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	1dba      	adds	r2, r7, #6
 800718c:	2156      	movs	r1, #86	; 0x56
 800718e:	8812      	ldrh	r2, [r2, #0]
 8007190:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	689a      	ldr	r2, [r3, #8]
 8007196:	2380      	movs	r3, #128	; 0x80
 8007198:	015b      	lsls	r3, r3, #5
 800719a:	429a      	cmp	r2, r3
 800719c:	d108      	bne.n	80071b0 <HAL_UART_Transmit+0x98>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d104      	bne.n	80071b0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80071a6:	2300      	movs	r3, #0
 80071a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	61bb      	str	r3, [r7, #24]
 80071ae:	e003      	b.n	80071b8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071b4:	2300      	movs	r3, #0
 80071b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80071b8:	e02c      	b.n	8007214 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	9300      	str	r3, [sp, #0]
 80071c2:	0013      	movs	r3, r2
 80071c4:	2200      	movs	r2, #0
 80071c6:	2180      	movs	r1, #128	; 0x80
 80071c8:	f000 fce4 	bl	8007b94 <UART_WaitOnFlagUntilTimeout>
 80071cc:	1e03      	subs	r3, r0, #0
 80071ce:	d001      	beq.n	80071d4 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80071d0:	2303      	movs	r3, #3
 80071d2:	e039      	b.n	8007248 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10b      	bne.n	80071f2 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	881b      	ldrh	r3, [r3, #0]
 80071de:	001a      	movs	r2, r3
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	05d2      	lsls	r2, r2, #23
 80071e6:	0dd2      	lsrs	r2, r2, #23
 80071e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	3302      	adds	r3, #2
 80071ee:	61bb      	str	r3, [r7, #24]
 80071f0:	e007      	b.n	8007202 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	781a      	ldrb	r2, [r3, #0]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	3301      	adds	r3, #1
 8007200:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2256      	movs	r2, #86	; 0x56
 8007206:	5a9b      	ldrh	r3, [r3, r2]
 8007208:	b29b      	uxth	r3, r3
 800720a:	3b01      	subs	r3, #1
 800720c:	b299      	uxth	r1, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2256      	movs	r2, #86	; 0x56
 8007212:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2256      	movs	r2, #86	; 0x56
 8007218:	5a9b      	ldrh	r3, [r3, r2]
 800721a:	b29b      	uxth	r3, r3
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1cc      	bne.n	80071ba <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007220:	697a      	ldr	r2, [r7, #20]
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	0013      	movs	r3, r2
 800722a:	2200      	movs	r2, #0
 800722c:	2140      	movs	r1, #64	; 0x40
 800722e:	f000 fcb1 	bl	8007b94 <UART_WaitOnFlagUntilTimeout>
 8007232:	1e03      	subs	r3, r0, #0
 8007234:	d001      	beq.n	800723a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e006      	b.n	8007248 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2288      	movs	r2, #136	; 0x88
 800723e:	2120      	movs	r1, #32
 8007240:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007242:	2300      	movs	r3, #0
 8007244:	e000      	b.n	8007248 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8007246:	2302      	movs	r3, #2
  }
}
 8007248:	0018      	movs	r0, r3
 800724a:	46bd      	mov	sp, r7
 800724c:	b008      	add	sp, #32
 800724e:	bd80      	pop	{r7, pc}

08007250 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b08a      	sub	sp, #40	; 0x28
 8007254:	af02      	add	r7, sp, #8
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	603b      	str	r3, [r7, #0]
 800725c:	1dbb      	adds	r3, r7, #6
 800725e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	228c      	movs	r2, #140	; 0x8c
 8007264:	589b      	ldr	r3, [r3, r2]
 8007266:	2b20      	cmp	r3, #32
 8007268:	d000      	beq.n	800726c <HAL_UART_Receive+0x1c>
 800726a:	e0cc      	b.n	8007406 <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d003      	beq.n	800727a <HAL_UART_Receive+0x2a>
 8007272:	1dbb      	adds	r3, r7, #6
 8007274:	881b      	ldrh	r3, [r3, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d101      	bne.n	800727e <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e0c4      	b.n	8007408 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	689a      	ldr	r2, [r3, #8]
 8007282:	2380      	movs	r3, #128	; 0x80
 8007284:	015b      	lsls	r3, r3, #5
 8007286:	429a      	cmp	r2, r3
 8007288:	d109      	bne.n	800729e <HAL_UART_Receive+0x4e>
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d105      	bne.n	800729e <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	2201      	movs	r2, #1
 8007296:	4013      	ands	r3, r2
 8007298:	d001      	beq.n	800729e <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e0b4      	b.n	8007408 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2290      	movs	r2, #144	; 0x90
 80072a2:	2100      	movs	r1, #0
 80072a4:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	228c      	movs	r2, #140	; 0x8c
 80072aa:	2122      	movs	r1, #34	; 0x22
 80072ac:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072b4:	f7fc fc76 	bl	8003ba4 <HAL_GetTick>
 80072b8:	0003      	movs	r3, r0
 80072ba:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	1dba      	adds	r2, r7, #6
 80072c0:	215c      	movs	r1, #92	; 0x5c
 80072c2:	8812      	ldrh	r2, [r2, #0]
 80072c4:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	1dba      	adds	r2, r7, #6
 80072ca:	215e      	movs	r1, #94	; 0x5e
 80072cc:	8812      	ldrh	r2, [r2, #0]
 80072ce:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	689a      	ldr	r2, [r3, #8]
 80072d4:	2380      	movs	r3, #128	; 0x80
 80072d6:	015b      	lsls	r3, r3, #5
 80072d8:	429a      	cmp	r2, r3
 80072da:	d10d      	bne.n	80072f8 <HAL_UART_Receive+0xa8>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d104      	bne.n	80072ee <HAL_UART_Receive+0x9e>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2260      	movs	r2, #96	; 0x60
 80072e8:	4949      	ldr	r1, [pc, #292]	; (8007410 <HAL_UART_Receive+0x1c0>)
 80072ea:	5299      	strh	r1, [r3, r2]
 80072ec:	e02e      	b.n	800734c <HAL_UART_Receive+0xfc>
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2260      	movs	r2, #96	; 0x60
 80072f2:	21ff      	movs	r1, #255	; 0xff
 80072f4:	5299      	strh	r1, [r3, r2]
 80072f6:	e029      	b.n	800734c <HAL_UART_Receive+0xfc>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10d      	bne.n	800731c <HAL_UART_Receive+0xcc>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d104      	bne.n	8007312 <HAL_UART_Receive+0xc2>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2260      	movs	r2, #96	; 0x60
 800730c:	21ff      	movs	r1, #255	; 0xff
 800730e:	5299      	strh	r1, [r3, r2]
 8007310:	e01c      	b.n	800734c <HAL_UART_Receive+0xfc>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2260      	movs	r2, #96	; 0x60
 8007316:	217f      	movs	r1, #127	; 0x7f
 8007318:	5299      	strh	r1, [r3, r2]
 800731a:	e017      	b.n	800734c <HAL_UART_Receive+0xfc>
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	689a      	ldr	r2, [r3, #8]
 8007320:	2380      	movs	r3, #128	; 0x80
 8007322:	055b      	lsls	r3, r3, #21
 8007324:	429a      	cmp	r2, r3
 8007326:	d10d      	bne.n	8007344 <HAL_UART_Receive+0xf4>
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	691b      	ldr	r3, [r3, #16]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d104      	bne.n	800733a <HAL_UART_Receive+0xea>
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2260      	movs	r2, #96	; 0x60
 8007334:	217f      	movs	r1, #127	; 0x7f
 8007336:	5299      	strh	r1, [r3, r2]
 8007338:	e008      	b.n	800734c <HAL_UART_Receive+0xfc>
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2260      	movs	r2, #96	; 0x60
 800733e:	213f      	movs	r1, #63	; 0x3f
 8007340:	5299      	strh	r1, [r3, r2]
 8007342:	e003      	b.n	800734c <HAL_UART_Receive+0xfc>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2260      	movs	r2, #96	; 0x60
 8007348:	2100      	movs	r1, #0
 800734a:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800734c:	2312      	movs	r3, #18
 800734e:	18fb      	adds	r3, r7, r3
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	2160      	movs	r1, #96	; 0x60
 8007354:	5a52      	ldrh	r2, [r2, r1]
 8007356:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	689a      	ldr	r2, [r3, #8]
 800735c:	2380      	movs	r3, #128	; 0x80
 800735e:	015b      	lsls	r3, r3, #5
 8007360:	429a      	cmp	r2, r3
 8007362:	d108      	bne.n	8007376 <HAL_UART_Receive+0x126>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d104      	bne.n	8007376 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800736c:	2300      	movs	r3, #0
 800736e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	61bb      	str	r3, [r7, #24]
 8007374:	e003      	b.n	800737e <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800737a:	2300      	movs	r3, #0
 800737c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800737e:	e036      	b.n	80073ee <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	9300      	str	r3, [sp, #0]
 8007388:	0013      	movs	r3, r2
 800738a:	2200      	movs	r2, #0
 800738c:	2120      	movs	r1, #32
 800738e:	f000 fc01 	bl	8007b94 <UART_WaitOnFlagUntilTimeout>
 8007392:	1e03      	subs	r3, r0, #0
 8007394:	d001      	beq.n	800739a <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	e036      	b.n	8007408 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10e      	bne.n	80073be <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	2212      	movs	r2, #18
 80073aa:	18ba      	adds	r2, r7, r2
 80073ac:	8812      	ldrh	r2, [r2, #0]
 80073ae:	4013      	ands	r3, r2
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	3302      	adds	r3, #2
 80073ba:	61bb      	str	r3, [r7, #24]
 80073bc:	e00e      	b.n	80073dc <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2212      	movs	r2, #18
 80073c8:	18ba      	adds	r2, r7, r2
 80073ca:	8812      	ldrh	r2, [r2, #0]
 80073cc:	b2d2      	uxtb	r2, r2
 80073ce:	4013      	ands	r3, r2
 80073d0:	b2da      	uxtb	r2, r3
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	3301      	adds	r3, #1
 80073da:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	225e      	movs	r2, #94	; 0x5e
 80073e0:	5a9b      	ldrh	r3, [r3, r2]
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	3b01      	subs	r3, #1
 80073e6:	b299      	uxth	r1, r3
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	225e      	movs	r2, #94	; 0x5e
 80073ec:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	225e      	movs	r2, #94	; 0x5e
 80073f2:	5a9b      	ldrh	r3, [r3, r2]
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1c2      	bne.n	8007380 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	228c      	movs	r2, #140	; 0x8c
 80073fe:	2120      	movs	r1, #32
 8007400:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007402:	2300      	movs	r3, #0
 8007404:	e000      	b.n	8007408 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 8007406:	2302      	movs	r3, #2
  }
}
 8007408:	0018      	movs	r0, r3
 800740a:	46bd      	mov	sp, r7
 800740c:	b008      	add	sp, #32
 800740e:	bd80      	pop	{r7, pc}
 8007410:	000001ff 	.word	0x000001ff

08007414 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007414:	b5b0      	push	{r4, r5, r7, lr}
 8007416:	b090      	sub	sp, #64	; 0x40
 8007418:	af00      	add	r7, sp, #0
 800741a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800741c:	231a      	movs	r3, #26
 800741e:	2220      	movs	r2, #32
 8007420:	189b      	adds	r3, r3, r2
 8007422:	19db      	adds	r3, r3, r7
 8007424:	2200      	movs	r2, #0
 8007426:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742a:	689a      	ldr	r2, [r3, #8]
 800742c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	431a      	orrs	r2, r3
 8007432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	431a      	orrs	r2, r3
 8007438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743a:	69db      	ldr	r3, [r3, #28]
 800743c:	4313      	orrs	r3, r2
 800743e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4aaf      	ldr	r2, [pc, #700]	; (8007704 <UART_SetConfig+0x2f0>)
 8007448:	4013      	ands	r3, r2
 800744a:	0019      	movs	r1, r3
 800744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007452:	430b      	orrs	r3, r1
 8007454:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	4aaa      	ldr	r2, [pc, #680]	; (8007708 <UART_SetConfig+0x2f4>)
 800745e:	4013      	ands	r3, r2
 8007460:	0018      	movs	r0, r3
 8007462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007464:	68d9      	ldr	r1, [r3, #12]
 8007466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	0003      	movs	r3, r0
 800746c:	430b      	orrs	r3, r1
 800746e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007472:	699b      	ldr	r3, [r3, #24]
 8007474:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4aa4      	ldr	r2, [pc, #656]	; (800770c <UART_SetConfig+0x2f8>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d004      	beq.n	800748a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007482:	6a1b      	ldr	r3, [r3, #32]
 8007484:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007486:	4313      	orrs	r3, r2
 8007488:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800748a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	4a9f      	ldr	r2, [pc, #636]	; (8007710 <UART_SetConfig+0x2fc>)
 8007492:	4013      	ands	r3, r2
 8007494:	0019      	movs	r1, r3
 8007496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800749c:	430b      	orrs	r3, r1
 800749e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80074a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a6:	220f      	movs	r2, #15
 80074a8:	4393      	bics	r3, r2
 80074aa:	0018      	movs	r0, r3
 80074ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ae:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80074b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	0003      	movs	r3, r0
 80074b6:	430b      	orrs	r3, r1
 80074b8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a95      	ldr	r2, [pc, #596]	; (8007714 <UART_SetConfig+0x300>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d131      	bne.n	8007528 <UART_SetConfig+0x114>
 80074c4:	4b94      	ldr	r3, [pc, #592]	; (8007718 <UART_SetConfig+0x304>)
 80074c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c8:	2203      	movs	r2, #3
 80074ca:	4013      	ands	r3, r2
 80074cc:	2b03      	cmp	r3, #3
 80074ce:	d01d      	beq.n	800750c <UART_SetConfig+0xf8>
 80074d0:	d823      	bhi.n	800751a <UART_SetConfig+0x106>
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d00c      	beq.n	80074f0 <UART_SetConfig+0xdc>
 80074d6:	d820      	bhi.n	800751a <UART_SetConfig+0x106>
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d002      	beq.n	80074e2 <UART_SetConfig+0xce>
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d00e      	beq.n	80074fe <UART_SetConfig+0xea>
 80074e0:	e01b      	b.n	800751a <UART_SetConfig+0x106>
 80074e2:	231b      	movs	r3, #27
 80074e4:	2220      	movs	r2, #32
 80074e6:	189b      	adds	r3, r3, r2
 80074e8:	19db      	adds	r3, r3, r7
 80074ea:	2200      	movs	r2, #0
 80074ec:	701a      	strb	r2, [r3, #0]
 80074ee:	e0b4      	b.n	800765a <UART_SetConfig+0x246>
 80074f0:	231b      	movs	r3, #27
 80074f2:	2220      	movs	r2, #32
 80074f4:	189b      	adds	r3, r3, r2
 80074f6:	19db      	adds	r3, r3, r7
 80074f8:	2202      	movs	r2, #2
 80074fa:	701a      	strb	r2, [r3, #0]
 80074fc:	e0ad      	b.n	800765a <UART_SetConfig+0x246>
 80074fe:	231b      	movs	r3, #27
 8007500:	2220      	movs	r2, #32
 8007502:	189b      	adds	r3, r3, r2
 8007504:	19db      	adds	r3, r3, r7
 8007506:	2204      	movs	r2, #4
 8007508:	701a      	strb	r2, [r3, #0]
 800750a:	e0a6      	b.n	800765a <UART_SetConfig+0x246>
 800750c:	231b      	movs	r3, #27
 800750e:	2220      	movs	r2, #32
 8007510:	189b      	adds	r3, r3, r2
 8007512:	19db      	adds	r3, r3, r7
 8007514:	2208      	movs	r2, #8
 8007516:	701a      	strb	r2, [r3, #0]
 8007518:	e09f      	b.n	800765a <UART_SetConfig+0x246>
 800751a:	231b      	movs	r3, #27
 800751c:	2220      	movs	r2, #32
 800751e:	189b      	adds	r3, r3, r2
 8007520:	19db      	adds	r3, r3, r7
 8007522:	2210      	movs	r2, #16
 8007524:	701a      	strb	r2, [r3, #0]
 8007526:	e098      	b.n	800765a <UART_SetConfig+0x246>
 8007528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a7b      	ldr	r2, [pc, #492]	; (800771c <UART_SetConfig+0x308>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d131      	bne.n	8007596 <UART_SetConfig+0x182>
 8007532:	4b79      	ldr	r3, [pc, #484]	; (8007718 <UART_SetConfig+0x304>)
 8007534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007536:	220c      	movs	r2, #12
 8007538:	4013      	ands	r3, r2
 800753a:	2b0c      	cmp	r3, #12
 800753c:	d01d      	beq.n	800757a <UART_SetConfig+0x166>
 800753e:	d823      	bhi.n	8007588 <UART_SetConfig+0x174>
 8007540:	2b08      	cmp	r3, #8
 8007542:	d00c      	beq.n	800755e <UART_SetConfig+0x14a>
 8007544:	d820      	bhi.n	8007588 <UART_SetConfig+0x174>
 8007546:	2b00      	cmp	r3, #0
 8007548:	d002      	beq.n	8007550 <UART_SetConfig+0x13c>
 800754a:	2b04      	cmp	r3, #4
 800754c:	d00e      	beq.n	800756c <UART_SetConfig+0x158>
 800754e:	e01b      	b.n	8007588 <UART_SetConfig+0x174>
 8007550:	231b      	movs	r3, #27
 8007552:	2220      	movs	r2, #32
 8007554:	189b      	adds	r3, r3, r2
 8007556:	19db      	adds	r3, r3, r7
 8007558:	2200      	movs	r2, #0
 800755a:	701a      	strb	r2, [r3, #0]
 800755c:	e07d      	b.n	800765a <UART_SetConfig+0x246>
 800755e:	231b      	movs	r3, #27
 8007560:	2220      	movs	r2, #32
 8007562:	189b      	adds	r3, r3, r2
 8007564:	19db      	adds	r3, r3, r7
 8007566:	2202      	movs	r2, #2
 8007568:	701a      	strb	r2, [r3, #0]
 800756a:	e076      	b.n	800765a <UART_SetConfig+0x246>
 800756c:	231b      	movs	r3, #27
 800756e:	2220      	movs	r2, #32
 8007570:	189b      	adds	r3, r3, r2
 8007572:	19db      	adds	r3, r3, r7
 8007574:	2204      	movs	r2, #4
 8007576:	701a      	strb	r2, [r3, #0]
 8007578:	e06f      	b.n	800765a <UART_SetConfig+0x246>
 800757a:	231b      	movs	r3, #27
 800757c:	2220      	movs	r2, #32
 800757e:	189b      	adds	r3, r3, r2
 8007580:	19db      	adds	r3, r3, r7
 8007582:	2208      	movs	r2, #8
 8007584:	701a      	strb	r2, [r3, #0]
 8007586:	e068      	b.n	800765a <UART_SetConfig+0x246>
 8007588:	231b      	movs	r3, #27
 800758a:	2220      	movs	r2, #32
 800758c:	189b      	adds	r3, r3, r2
 800758e:	19db      	adds	r3, r3, r7
 8007590:	2210      	movs	r2, #16
 8007592:	701a      	strb	r2, [r3, #0]
 8007594:	e061      	b.n	800765a <UART_SetConfig+0x246>
 8007596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a61      	ldr	r2, [pc, #388]	; (8007720 <UART_SetConfig+0x30c>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d106      	bne.n	80075ae <UART_SetConfig+0x19a>
 80075a0:	231b      	movs	r3, #27
 80075a2:	2220      	movs	r2, #32
 80075a4:	189b      	adds	r3, r3, r2
 80075a6:	19db      	adds	r3, r3, r7
 80075a8:	2200      	movs	r2, #0
 80075aa:	701a      	strb	r2, [r3, #0]
 80075ac:	e055      	b.n	800765a <UART_SetConfig+0x246>
 80075ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a5c      	ldr	r2, [pc, #368]	; (8007724 <UART_SetConfig+0x310>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d106      	bne.n	80075c6 <UART_SetConfig+0x1b2>
 80075b8:	231b      	movs	r3, #27
 80075ba:	2220      	movs	r2, #32
 80075bc:	189b      	adds	r3, r3, r2
 80075be:	19db      	adds	r3, r3, r7
 80075c0:	2200      	movs	r2, #0
 80075c2:	701a      	strb	r2, [r3, #0]
 80075c4:	e049      	b.n	800765a <UART_SetConfig+0x246>
 80075c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a50      	ldr	r2, [pc, #320]	; (800770c <UART_SetConfig+0x2f8>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d13e      	bne.n	800764e <UART_SetConfig+0x23a>
 80075d0:	4b51      	ldr	r3, [pc, #324]	; (8007718 <UART_SetConfig+0x304>)
 80075d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075d4:	23c0      	movs	r3, #192	; 0xc0
 80075d6:	011b      	lsls	r3, r3, #4
 80075d8:	4013      	ands	r3, r2
 80075da:	22c0      	movs	r2, #192	; 0xc0
 80075dc:	0112      	lsls	r2, r2, #4
 80075de:	4293      	cmp	r3, r2
 80075e0:	d027      	beq.n	8007632 <UART_SetConfig+0x21e>
 80075e2:	22c0      	movs	r2, #192	; 0xc0
 80075e4:	0112      	lsls	r2, r2, #4
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d82a      	bhi.n	8007640 <UART_SetConfig+0x22c>
 80075ea:	2280      	movs	r2, #128	; 0x80
 80075ec:	0112      	lsls	r2, r2, #4
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d011      	beq.n	8007616 <UART_SetConfig+0x202>
 80075f2:	2280      	movs	r2, #128	; 0x80
 80075f4:	0112      	lsls	r2, r2, #4
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d822      	bhi.n	8007640 <UART_SetConfig+0x22c>
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d004      	beq.n	8007608 <UART_SetConfig+0x1f4>
 80075fe:	2280      	movs	r2, #128	; 0x80
 8007600:	00d2      	lsls	r2, r2, #3
 8007602:	4293      	cmp	r3, r2
 8007604:	d00e      	beq.n	8007624 <UART_SetConfig+0x210>
 8007606:	e01b      	b.n	8007640 <UART_SetConfig+0x22c>
 8007608:	231b      	movs	r3, #27
 800760a:	2220      	movs	r2, #32
 800760c:	189b      	adds	r3, r3, r2
 800760e:	19db      	adds	r3, r3, r7
 8007610:	2200      	movs	r2, #0
 8007612:	701a      	strb	r2, [r3, #0]
 8007614:	e021      	b.n	800765a <UART_SetConfig+0x246>
 8007616:	231b      	movs	r3, #27
 8007618:	2220      	movs	r2, #32
 800761a:	189b      	adds	r3, r3, r2
 800761c:	19db      	adds	r3, r3, r7
 800761e:	2202      	movs	r2, #2
 8007620:	701a      	strb	r2, [r3, #0]
 8007622:	e01a      	b.n	800765a <UART_SetConfig+0x246>
 8007624:	231b      	movs	r3, #27
 8007626:	2220      	movs	r2, #32
 8007628:	189b      	adds	r3, r3, r2
 800762a:	19db      	adds	r3, r3, r7
 800762c:	2204      	movs	r2, #4
 800762e:	701a      	strb	r2, [r3, #0]
 8007630:	e013      	b.n	800765a <UART_SetConfig+0x246>
 8007632:	231b      	movs	r3, #27
 8007634:	2220      	movs	r2, #32
 8007636:	189b      	adds	r3, r3, r2
 8007638:	19db      	adds	r3, r3, r7
 800763a:	2208      	movs	r2, #8
 800763c:	701a      	strb	r2, [r3, #0]
 800763e:	e00c      	b.n	800765a <UART_SetConfig+0x246>
 8007640:	231b      	movs	r3, #27
 8007642:	2220      	movs	r2, #32
 8007644:	189b      	adds	r3, r3, r2
 8007646:	19db      	adds	r3, r3, r7
 8007648:	2210      	movs	r2, #16
 800764a:	701a      	strb	r2, [r3, #0]
 800764c:	e005      	b.n	800765a <UART_SetConfig+0x246>
 800764e:	231b      	movs	r3, #27
 8007650:	2220      	movs	r2, #32
 8007652:	189b      	adds	r3, r3, r2
 8007654:	19db      	adds	r3, r3, r7
 8007656:	2210      	movs	r2, #16
 8007658:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800765a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a2b      	ldr	r2, [pc, #172]	; (800770c <UART_SetConfig+0x2f8>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d000      	beq.n	8007666 <UART_SetConfig+0x252>
 8007664:	e0a9      	b.n	80077ba <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007666:	231b      	movs	r3, #27
 8007668:	2220      	movs	r2, #32
 800766a:	189b      	adds	r3, r3, r2
 800766c:	19db      	adds	r3, r3, r7
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	2b08      	cmp	r3, #8
 8007672:	d015      	beq.n	80076a0 <UART_SetConfig+0x28c>
 8007674:	dc18      	bgt.n	80076a8 <UART_SetConfig+0x294>
 8007676:	2b04      	cmp	r3, #4
 8007678:	d00d      	beq.n	8007696 <UART_SetConfig+0x282>
 800767a:	dc15      	bgt.n	80076a8 <UART_SetConfig+0x294>
 800767c:	2b00      	cmp	r3, #0
 800767e:	d002      	beq.n	8007686 <UART_SetConfig+0x272>
 8007680:	2b02      	cmp	r3, #2
 8007682:	d005      	beq.n	8007690 <UART_SetConfig+0x27c>
 8007684:	e010      	b.n	80076a8 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007686:	f7fd fb9f 	bl	8004dc8 <HAL_RCC_GetPCLK1Freq>
 800768a:	0003      	movs	r3, r0
 800768c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800768e:	e014      	b.n	80076ba <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007690:	4b25      	ldr	r3, [pc, #148]	; (8007728 <UART_SetConfig+0x314>)
 8007692:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007694:	e011      	b.n	80076ba <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007696:	f7fd fb0b 	bl	8004cb0 <HAL_RCC_GetSysClockFreq>
 800769a:	0003      	movs	r3, r0
 800769c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800769e:	e00c      	b.n	80076ba <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076a0:	2380      	movs	r3, #128	; 0x80
 80076a2:	021b      	lsls	r3, r3, #8
 80076a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076a6:	e008      	b.n	80076ba <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80076a8:	2300      	movs	r3, #0
 80076aa:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80076ac:	231a      	movs	r3, #26
 80076ae:	2220      	movs	r2, #32
 80076b0:	189b      	adds	r3, r3, r2
 80076b2:	19db      	adds	r3, r3, r7
 80076b4:	2201      	movs	r2, #1
 80076b6:	701a      	strb	r2, [r3, #0]
        break;
 80076b8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80076ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d100      	bne.n	80076c2 <UART_SetConfig+0x2ae>
 80076c0:	e14b      	b.n	800795a <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80076c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076c6:	4b19      	ldr	r3, [pc, #100]	; (800772c <UART_SetConfig+0x318>)
 80076c8:	0052      	lsls	r2, r2, #1
 80076ca:	5ad3      	ldrh	r3, [r2, r3]
 80076cc:	0019      	movs	r1, r3
 80076ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80076d0:	f7f8 fd34 	bl	800013c <__udivsi3>
 80076d4:	0003      	movs	r3, r0
 80076d6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	0013      	movs	r3, r2
 80076de:	005b      	lsls	r3, r3, #1
 80076e0:	189b      	adds	r3, r3, r2
 80076e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d305      	bcc.n	80076f4 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80076e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d91d      	bls.n	8007730 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80076f4:	231a      	movs	r3, #26
 80076f6:	2220      	movs	r2, #32
 80076f8:	189b      	adds	r3, r3, r2
 80076fa:	19db      	adds	r3, r3, r7
 80076fc:	2201      	movs	r2, #1
 80076fe:	701a      	strb	r2, [r3, #0]
 8007700:	e12b      	b.n	800795a <UART_SetConfig+0x546>
 8007702:	46c0      	nop			; (mov r8, r8)
 8007704:	cfff69f3 	.word	0xcfff69f3
 8007708:	ffffcfff 	.word	0xffffcfff
 800770c:	40008000 	.word	0x40008000
 8007710:	11fff4ff 	.word	0x11fff4ff
 8007714:	40013800 	.word	0x40013800
 8007718:	40021000 	.word	0x40021000
 800771c:	40004400 	.word	0x40004400
 8007720:	40004800 	.word	0x40004800
 8007724:	40004c00 	.word	0x40004c00
 8007728:	00f42400 	.word	0x00f42400
 800772c:	08014e20 	.word	0x08014e20
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007732:	61bb      	str	r3, [r7, #24]
 8007734:	2300      	movs	r3, #0
 8007736:	61fb      	str	r3, [r7, #28]
 8007738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800773c:	4b92      	ldr	r3, [pc, #584]	; (8007988 <UART_SetConfig+0x574>)
 800773e:	0052      	lsls	r2, r2, #1
 8007740:	5ad3      	ldrh	r3, [r2, r3]
 8007742:	613b      	str	r3, [r7, #16]
 8007744:	2300      	movs	r3, #0
 8007746:	617b      	str	r3, [r7, #20]
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	69b8      	ldr	r0, [r7, #24]
 800774e:	69f9      	ldr	r1, [r7, #28]
 8007750:	f7f8 fea8 	bl	80004a4 <__aeabi_uldivmod>
 8007754:	0002      	movs	r2, r0
 8007756:	000b      	movs	r3, r1
 8007758:	0e11      	lsrs	r1, r2, #24
 800775a:	021d      	lsls	r5, r3, #8
 800775c:	430d      	orrs	r5, r1
 800775e:	0214      	lsls	r4, r2, #8
 8007760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	085b      	lsrs	r3, r3, #1
 8007766:	60bb      	str	r3, [r7, #8]
 8007768:	2300      	movs	r3, #0
 800776a:	60fb      	str	r3, [r7, #12]
 800776c:	68b8      	ldr	r0, [r7, #8]
 800776e:	68f9      	ldr	r1, [r7, #12]
 8007770:	1900      	adds	r0, r0, r4
 8007772:	4169      	adcs	r1, r5
 8007774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	603b      	str	r3, [r7, #0]
 800777a:	2300      	movs	r3, #0
 800777c:	607b      	str	r3, [r7, #4]
 800777e:	683a      	ldr	r2, [r7, #0]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f7f8 fe8f 	bl	80004a4 <__aeabi_uldivmod>
 8007786:	0002      	movs	r2, r0
 8007788:	000b      	movs	r3, r1
 800778a:	0013      	movs	r3, r2
 800778c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800778e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007790:	23c0      	movs	r3, #192	; 0xc0
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	429a      	cmp	r2, r3
 8007796:	d309      	bcc.n	80077ac <UART_SetConfig+0x398>
 8007798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800779a:	2380      	movs	r3, #128	; 0x80
 800779c:	035b      	lsls	r3, r3, #13
 800779e:	429a      	cmp	r2, r3
 80077a0:	d204      	bcs.n	80077ac <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80077a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077a8:	60da      	str	r2, [r3, #12]
 80077aa:	e0d6      	b.n	800795a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80077ac:	231a      	movs	r3, #26
 80077ae:	2220      	movs	r2, #32
 80077b0:	189b      	adds	r3, r3, r2
 80077b2:	19db      	adds	r3, r3, r7
 80077b4:	2201      	movs	r2, #1
 80077b6:	701a      	strb	r2, [r3, #0]
 80077b8:	e0cf      	b.n	800795a <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077bc:	69da      	ldr	r2, [r3, #28]
 80077be:	2380      	movs	r3, #128	; 0x80
 80077c0:	021b      	lsls	r3, r3, #8
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d000      	beq.n	80077c8 <UART_SetConfig+0x3b4>
 80077c6:	e070      	b.n	80078aa <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80077c8:	231b      	movs	r3, #27
 80077ca:	2220      	movs	r2, #32
 80077cc:	189b      	adds	r3, r3, r2
 80077ce:	19db      	adds	r3, r3, r7
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	2b08      	cmp	r3, #8
 80077d4:	d015      	beq.n	8007802 <UART_SetConfig+0x3ee>
 80077d6:	dc18      	bgt.n	800780a <UART_SetConfig+0x3f6>
 80077d8:	2b04      	cmp	r3, #4
 80077da:	d00d      	beq.n	80077f8 <UART_SetConfig+0x3e4>
 80077dc:	dc15      	bgt.n	800780a <UART_SetConfig+0x3f6>
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d002      	beq.n	80077e8 <UART_SetConfig+0x3d4>
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d005      	beq.n	80077f2 <UART_SetConfig+0x3de>
 80077e6:	e010      	b.n	800780a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077e8:	f7fd faee 	bl	8004dc8 <HAL_RCC_GetPCLK1Freq>
 80077ec:	0003      	movs	r3, r0
 80077ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077f0:	e014      	b.n	800781c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077f2:	4b66      	ldr	r3, [pc, #408]	; (800798c <UART_SetConfig+0x578>)
 80077f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077f6:	e011      	b.n	800781c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077f8:	f7fd fa5a 	bl	8004cb0 <HAL_RCC_GetSysClockFreq>
 80077fc:	0003      	movs	r3, r0
 80077fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007800:	e00c      	b.n	800781c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007802:	2380      	movs	r3, #128	; 0x80
 8007804:	021b      	lsls	r3, r3, #8
 8007806:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007808:	e008      	b.n	800781c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800780a:	2300      	movs	r3, #0
 800780c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800780e:	231a      	movs	r3, #26
 8007810:	2220      	movs	r2, #32
 8007812:	189b      	adds	r3, r3, r2
 8007814:	19db      	adds	r3, r3, r7
 8007816:	2201      	movs	r2, #1
 8007818:	701a      	strb	r2, [r3, #0]
        break;
 800781a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800781c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800781e:	2b00      	cmp	r3, #0
 8007820:	d100      	bne.n	8007824 <UART_SetConfig+0x410>
 8007822:	e09a      	b.n	800795a <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007826:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007828:	4b57      	ldr	r3, [pc, #348]	; (8007988 <UART_SetConfig+0x574>)
 800782a:	0052      	lsls	r2, r2, #1
 800782c:	5ad3      	ldrh	r3, [r2, r3]
 800782e:	0019      	movs	r1, r3
 8007830:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007832:	f7f8 fc83 	bl	800013c <__udivsi3>
 8007836:	0003      	movs	r3, r0
 8007838:	005a      	lsls	r2, r3, #1
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	085b      	lsrs	r3, r3, #1
 8007840:	18d2      	adds	r2, r2, r3
 8007842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	0019      	movs	r1, r3
 8007848:	0010      	movs	r0, r2
 800784a:	f7f8 fc77 	bl	800013c <__udivsi3>
 800784e:	0003      	movs	r3, r0
 8007850:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007854:	2b0f      	cmp	r3, #15
 8007856:	d921      	bls.n	800789c <UART_SetConfig+0x488>
 8007858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800785a:	2380      	movs	r3, #128	; 0x80
 800785c:	025b      	lsls	r3, r3, #9
 800785e:	429a      	cmp	r2, r3
 8007860:	d21c      	bcs.n	800789c <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007864:	b29a      	uxth	r2, r3
 8007866:	200e      	movs	r0, #14
 8007868:	2420      	movs	r4, #32
 800786a:	1903      	adds	r3, r0, r4
 800786c:	19db      	adds	r3, r3, r7
 800786e:	210f      	movs	r1, #15
 8007870:	438a      	bics	r2, r1
 8007872:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007876:	085b      	lsrs	r3, r3, #1
 8007878:	b29b      	uxth	r3, r3
 800787a:	2207      	movs	r2, #7
 800787c:	4013      	ands	r3, r2
 800787e:	b299      	uxth	r1, r3
 8007880:	1903      	adds	r3, r0, r4
 8007882:	19db      	adds	r3, r3, r7
 8007884:	1902      	adds	r2, r0, r4
 8007886:	19d2      	adds	r2, r2, r7
 8007888:	8812      	ldrh	r2, [r2, #0]
 800788a:	430a      	orrs	r2, r1
 800788c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800788e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	1902      	adds	r2, r0, r4
 8007894:	19d2      	adds	r2, r2, r7
 8007896:	8812      	ldrh	r2, [r2, #0]
 8007898:	60da      	str	r2, [r3, #12]
 800789a:	e05e      	b.n	800795a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800789c:	231a      	movs	r3, #26
 800789e:	2220      	movs	r2, #32
 80078a0:	189b      	adds	r3, r3, r2
 80078a2:	19db      	adds	r3, r3, r7
 80078a4:	2201      	movs	r2, #1
 80078a6:	701a      	strb	r2, [r3, #0]
 80078a8:	e057      	b.n	800795a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80078aa:	231b      	movs	r3, #27
 80078ac:	2220      	movs	r2, #32
 80078ae:	189b      	adds	r3, r3, r2
 80078b0:	19db      	adds	r3, r3, r7
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	2b08      	cmp	r3, #8
 80078b6:	d015      	beq.n	80078e4 <UART_SetConfig+0x4d0>
 80078b8:	dc18      	bgt.n	80078ec <UART_SetConfig+0x4d8>
 80078ba:	2b04      	cmp	r3, #4
 80078bc:	d00d      	beq.n	80078da <UART_SetConfig+0x4c6>
 80078be:	dc15      	bgt.n	80078ec <UART_SetConfig+0x4d8>
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d002      	beq.n	80078ca <UART_SetConfig+0x4b6>
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d005      	beq.n	80078d4 <UART_SetConfig+0x4c0>
 80078c8:	e010      	b.n	80078ec <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078ca:	f7fd fa7d 	bl	8004dc8 <HAL_RCC_GetPCLK1Freq>
 80078ce:	0003      	movs	r3, r0
 80078d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078d2:	e014      	b.n	80078fe <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078d4:	4b2d      	ldr	r3, [pc, #180]	; (800798c <UART_SetConfig+0x578>)
 80078d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078d8:	e011      	b.n	80078fe <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078da:	f7fd f9e9 	bl	8004cb0 <HAL_RCC_GetSysClockFreq>
 80078de:	0003      	movs	r3, r0
 80078e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078e2:	e00c      	b.n	80078fe <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078e4:	2380      	movs	r3, #128	; 0x80
 80078e6:	021b      	lsls	r3, r3, #8
 80078e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078ea:	e008      	b.n	80078fe <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80078ec:	2300      	movs	r3, #0
 80078ee:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80078f0:	231a      	movs	r3, #26
 80078f2:	2220      	movs	r2, #32
 80078f4:	189b      	adds	r3, r3, r2
 80078f6:	19db      	adds	r3, r3, r7
 80078f8:	2201      	movs	r2, #1
 80078fa:	701a      	strb	r2, [r3, #0]
        break;
 80078fc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80078fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007900:	2b00      	cmp	r3, #0
 8007902:	d02a      	beq.n	800795a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007906:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007908:	4b1f      	ldr	r3, [pc, #124]	; (8007988 <UART_SetConfig+0x574>)
 800790a:	0052      	lsls	r2, r2, #1
 800790c:	5ad3      	ldrh	r3, [r2, r3]
 800790e:	0019      	movs	r1, r3
 8007910:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007912:	f7f8 fc13 	bl	800013c <__udivsi3>
 8007916:	0003      	movs	r3, r0
 8007918:	001a      	movs	r2, r3
 800791a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	085b      	lsrs	r3, r3, #1
 8007920:	18d2      	adds	r2, r2, r3
 8007922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	0019      	movs	r1, r3
 8007928:	0010      	movs	r0, r2
 800792a:	f7f8 fc07 	bl	800013c <__udivsi3>
 800792e:	0003      	movs	r3, r0
 8007930:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007934:	2b0f      	cmp	r3, #15
 8007936:	d90a      	bls.n	800794e <UART_SetConfig+0x53a>
 8007938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800793a:	2380      	movs	r3, #128	; 0x80
 800793c:	025b      	lsls	r3, r3, #9
 800793e:	429a      	cmp	r2, r3
 8007940:	d205      	bcs.n	800794e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007944:	b29a      	uxth	r2, r3
 8007946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	60da      	str	r2, [r3, #12]
 800794c:	e005      	b.n	800795a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800794e:	231a      	movs	r3, #26
 8007950:	2220      	movs	r2, #32
 8007952:	189b      	adds	r3, r3, r2
 8007954:	19db      	adds	r3, r3, r7
 8007956:	2201      	movs	r2, #1
 8007958:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800795a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795c:	226a      	movs	r2, #106	; 0x6a
 800795e:	2101      	movs	r1, #1
 8007960:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007964:	2268      	movs	r2, #104	; 0x68
 8007966:	2101      	movs	r1, #1
 8007968:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800796a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796c:	2200      	movs	r2, #0
 800796e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007972:	2200      	movs	r2, #0
 8007974:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007976:	231a      	movs	r3, #26
 8007978:	2220      	movs	r2, #32
 800797a:	189b      	adds	r3, r3, r2
 800797c:	19db      	adds	r3, r3, r7
 800797e:	781b      	ldrb	r3, [r3, #0]
}
 8007980:	0018      	movs	r0, r3
 8007982:	46bd      	mov	sp, r7
 8007984:	b010      	add	sp, #64	; 0x40
 8007986:	bdb0      	pop	{r4, r5, r7, pc}
 8007988:	08014e20 	.word	0x08014e20
 800798c:	00f42400 	.word	0x00f42400

08007990 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800799c:	2201      	movs	r2, #1
 800799e:	4013      	ands	r3, r2
 80079a0:	d00b      	beq.n	80079ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	4a4a      	ldr	r2, [pc, #296]	; (8007ad4 <UART_AdvFeatureConfig+0x144>)
 80079aa:	4013      	ands	r3, r2
 80079ac:	0019      	movs	r1, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	430a      	orrs	r2, r1
 80079b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079be:	2202      	movs	r2, #2
 80079c0:	4013      	ands	r3, r2
 80079c2:	d00b      	beq.n	80079dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	4a43      	ldr	r2, [pc, #268]	; (8007ad8 <UART_AdvFeatureConfig+0x148>)
 80079cc:	4013      	ands	r3, r2
 80079ce:	0019      	movs	r1, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	430a      	orrs	r2, r1
 80079da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e0:	2204      	movs	r2, #4
 80079e2:	4013      	ands	r3, r2
 80079e4:	d00b      	beq.n	80079fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	4a3b      	ldr	r2, [pc, #236]	; (8007adc <UART_AdvFeatureConfig+0x14c>)
 80079ee:	4013      	ands	r3, r2
 80079f0:	0019      	movs	r1, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	430a      	orrs	r2, r1
 80079fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a02:	2208      	movs	r2, #8
 8007a04:	4013      	ands	r3, r2
 8007a06:	d00b      	beq.n	8007a20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	4a34      	ldr	r2, [pc, #208]	; (8007ae0 <UART_AdvFeatureConfig+0x150>)
 8007a10:	4013      	ands	r3, r2
 8007a12:	0019      	movs	r1, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	430a      	orrs	r2, r1
 8007a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a24:	2210      	movs	r2, #16
 8007a26:	4013      	ands	r3, r2
 8007a28:	d00b      	beq.n	8007a42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	4a2c      	ldr	r2, [pc, #176]	; (8007ae4 <UART_AdvFeatureConfig+0x154>)
 8007a32:	4013      	ands	r3, r2
 8007a34:	0019      	movs	r1, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	430a      	orrs	r2, r1
 8007a40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a46:	2220      	movs	r2, #32
 8007a48:	4013      	ands	r3, r2
 8007a4a:	d00b      	beq.n	8007a64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	4a25      	ldr	r2, [pc, #148]	; (8007ae8 <UART_AdvFeatureConfig+0x158>)
 8007a54:	4013      	ands	r3, r2
 8007a56:	0019      	movs	r1, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	430a      	orrs	r2, r1
 8007a62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a68:	2240      	movs	r2, #64	; 0x40
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	d01d      	beq.n	8007aaa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	4a1d      	ldr	r2, [pc, #116]	; (8007aec <UART_AdvFeatureConfig+0x15c>)
 8007a76:	4013      	ands	r3, r2
 8007a78:	0019      	movs	r1, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	430a      	orrs	r2, r1
 8007a84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a8a:	2380      	movs	r3, #128	; 0x80
 8007a8c:	035b      	lsls	r3, r3, #13
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d10b      	bne.n	8007aaa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	4a15      	ldr	r2, [pc, #84]	; (8007af0 <UART_AdvFeatureConfig+0x160>)
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	0019      	movs	r1, r3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	430a      	orrs	r2, r1
 8007aa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aae:	2280      	movs	r2, #128	; 0x80
 8007ab0:	4013      	ands	r3, r2
 8007ab2:	d00b      	beq.n	8007acc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	4a0e      	ldr	r2, [pc, #56]	; (8007af4 <UART_AdvFeatureConfig+0x164>)
 8007abc:	4013      	ands	r3, r2
 8007abe:	0019      	movs	r1, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	430a      	orrs	r2, r1
 8007aca:	605a      	str	r2, [r3, #4]
  }
}
 8007acc:	46c0      	nop			; (mov r8, r8)
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	b002      	add	sp, #8
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	fffdffff 	.word	0xfffdffff
 8007ad8:	fffeffff 	.word	0xfffeffff
 8007adc:	fffbffff 	.word	0xfffbffff
 8007ae0:	ffff7fff 	.word	0xffff7fff
 8007ae4:	ffffefff 	.word	0xffffefff
 8007ae8:	ffffdfff 	.word	0xffffdfff
 8007aec:	ffefffff 	.word	0xffefffff
 8007af0:	ff9fffff 	.word	0xff9fffff
 8007af4:	fff7ffff 	.word	0xfff7ffff

08007af8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b086      	sub	sp, #24
 8007afc:	af02      	add	r7, sp, #8
 8007afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2290      	movs	r2, #144	; 0x90
 8007b04:	2100      	movs	r1, #0
 8007b06:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b08:	f7fc f84c 	bl	8003ba4 <HAL_GetTick>
 8007b0c:	0003      	movs	r3, r0
 8007b0e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2208      	movs	r2, #8
 8007b18:	4013      	ands	r3, r2
 8007b1a:	2b08      	cmp	r3, #8
 8007b1c:	d10c      	bne.n	8007b38 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2280      	movs	r2, #128	; 0x80
 8007b22:	0391      	lsls	r1, r2, #14
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	4a1a      	ldr	r2, [pc, #104]	; (8007b90 <UART_CheckIdleState+0x98>)
 8007b28:	9200      	str	r2, [sp, #0]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f000 f832 	bl	8007b94 <UART_WaitOnFlagUntilTimeout>
 8007b30:	1e03      	subs	r3, r0, #0
 8007b32:	d001      	beq.n	8007b38 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b34:	2303      	movs	r3, #3
 8007b36:	e026      	b.n	8007b86 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2204      	movs	r2, #4
 8007b40:	4013      	ands	r3, r2
 8007b42:	2b04      	cmp	r3, #4
 8007b44:	d10c      	bne.n	8007b60 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2280      	movs	r2, #128	; 0x80
 8007b4a:	03d1      	lsls	r1, r2, #15
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	4a10      	ldr	r2, [pc, #64]	; (8007b90 <UART_CheckIdleState+0x98>)
 8007b50:	9200      	str	r2, [sp, #0]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f000 f81e 	bl	8007b94 <UART_WaitOnFlagUntilTimeout>
 8007b58:	1e03      	subs	r3, r0, #0
 8007b5a:	d001      	beq.n	8007b60 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	e012      	b.n	8007b86 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2288      	movs	r2, #136	; 0x88
 8007b64:	2120      	movs	r1, #32
 8007b66:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	228c      	movs	r2, #140	; 0x8c
 8007b6c:	2120      	movs	r1, #32
 8007b6e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2284      	movs	r2, #132	; 0x84
 8007b80:	2100      	movs	r1, #0
 8007b82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	0018      	movs	r0, r3
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	b004      	add	sp, #16
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	46c0      	nop			; (mov r8, r8)
 8007b90:	01ffffff 	.word	0x01ffffff

08007b94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b094      	sub	sp, #80	; 0x50
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	603b      	str	r3, [r7, #0]
 8007ba0:	1dfb      	adds	r3, r7, #7
 8007ba2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ba4:	e0a7      	b.n	8007cf6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ba6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ba8:	3301      	adds	r3, #1
 8007baa:	d100      	bne.n	8007bae <UART_WaitOnFlagUntilTimeout+0x1a>
 8007bac:	e0a3      	b.n	8007cf6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bae:	f7fb fff9 	bl	8003ba4 <HAL_GetTick>
 8007bb2:	0002      	movs	r2, r0
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	1ad3      	subs	r3, r2, r3
 8007bb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d302      	bcc.n	8007bc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007bbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d13f      	bne.n	8007c44 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bc4:	f3ef 8310 	mrs	r3, PRIMASK
 8007bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007bcc:	647b      	str	r3, [r7, #68]	; 0x44
 8007bce:	2301      	movs	r3, #1
 8007bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd4:	f383 8810 	msr	PRIMASK, r3
}
 8007bd8:	46c0      	nop			; (mov r8, r8)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	494e      	ldr	r1, [pc, #312]	; (8007d20 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007be6:	400a      	ands	r2, r1
 8007be8:	601a      	str	r2, [r3, #0]
 8007bea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bec:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf0:	f383 8810 	msr	PRIMASK, r3
}
 8007bf4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bf6:	f3ef 8310 	mrs	r3, PRIMASK
 8007bfa:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bfe:	643b      	str	r3, [r7, #64]	; 0x40
 8007c00:	2301      	movs	r3, #1
 8007c02:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c06:	f383 8810 	msr	PRIMASK, r3
}
 8007c0a:	46c0      	nop			; (mov r8, r8)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	689a      	ldr	r2, [r3, #8]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2101      	movs	r1, #1
 8007c18:	438a      	bics	r2, r1
 8007c1a:	609a      	str	r2, [r3, #8]
 8007c1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c22:	f383 8810 	msr	PRIMASK, r3
}
 8007c26:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2288      	movs	r2, #136	; 0x88
 8007c2c:	2120      	movs	r1, #32
 8007c2e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	228c      	movs	r2, #140	; 0x8c
 8007c34:	2120      	movs	r1, #32
 8007c36:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2284      	movs	r2, #132	; 0x84
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007c40:	2303      	movs	r3, #3
 8007c42:	e069      	b.n	8007d18 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2204      	movs	r2, #4
 8007c4c:	4013      	ands	r3, r2
 8007c4e:	d052      	beq.n	8007cf6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	69da      	ldr	r2, [r3, #28]
 8007c56:	2380      	movs	r3, #128	; 0x80
 8007c58:	011b      	lsls	r3, r3, #4
 8007c5a:	401a      	ands	r2, r3
 8007c5c:	2380      	movs	r3, #128	; 0x80
 8007c5e:	011b      	lsls	r3, r3, #4
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d148      	bne.n	8007cf6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2280      	movs	r2, #128	; 0x80
 8007c6a:	0112      	lsls	r2, r2, #4
 8007c6c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c6e:	f3ef 8310 	mrs	r3, PRIMASK
 8007c72:	613b      	str	r3, [r7, #16]
  return(result);
 8007c74:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c78:	2301      	movs	r3, #1
 8007c7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	f383 8810 	msr	PRIMASK, r3
}
 8007c82:	46c0      	nop			; (mov r8, r8)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4924      	ldr	r1, [pc, #144]	; (8007d20 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007c90:	400a      	ands	r2, r1
 8007c92:	601a      	str	r2, [r3, #0]
 8007c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c96:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	f383 8810 	msr	PRIMASK, r3
}
 8007c9e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ca0:	f3ef 8310 	mrs	r3, PRIMASK
 8007ca4:	61fb      	str	r3, [r7, #28]
  return(result);
 8007ca6:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ca8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007caa:	2301      	movs	r3, #1
 8007cac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cae:	6a3b      	ldr	r3, [r7, #32]
 8007cb0:	f383 8810 	msr	PRIMASK, r3
}
 8007cb4:	46c0      	nop			; (mov r8, r8)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	689a      	ldr	r2, [r3, #8]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2101      	movs	r1, #1
 8007cc2:	438a      	bics	r2, r1
 8007cc4:	609a      	str	r2, [r3, #8]
 8007cc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cc8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ccc:	f383 8810 	msr	PRIMASK, r3
}
 8007cd0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2288      	movs	r2, #136	; 0x88
 8007cd6:	2120      	movs	r1, #32
 8007cd8:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	228c      	movs	r2, #140	; 0x8c
 8007cde:	2120      	movs	r1, #32
 8007ce0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2290      	movs	r2, #144	; 0x90
 8007ce6:	2120      	movs	r1, #32
 8007ce8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2284      	movs	r2, #132	; 0x84
 8007cee:	2100      	movs	r1, #0
 8007cf0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	e010      	b.n	8007d18 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	69db      	ldr	r3, [r3, #28]
 8007cfc:	68ba      	ldr	r2, [r7, #8]
 8007cfe:	4013      	ands	r3, r2
 8007d00:	68ba      	ldr	r2, [r7, #8]
 8007d02:	1ad3      	subs	r3, r2, r3
 8007d04:	425a      	negs	r2, r3
 8007d06:	4153      	adcs	r3, r2
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	001a      	movs	r2, r3
 8007d0c:	1dfb      	adds	r3, r7, #7
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d100      	bne.n	8007d16 <UART_WaitOnFlagUntilTimeout+0x182>
 8007d14:	e747      	b.n	8007ba6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d16:	2300      	movs	r3, #0
}
 8007d18:	0018      	movs	r0, r3
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	b014      	add	sp, #80	; 0x50
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	fffffe5f 	.word	0xfffffe5f

08007d24 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2284      	movs	r2, #132	; 0x84
 8007d30:	5c9b      	ldrb	r3, [r3, r2]
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d101      	bne.n	8007d3a <HAL_UARTEx_DisableFifoMode+0x16>
 8007d36:	2302      	movs	r3, #2
 8007d38:	e027      	b.n	8007d8a <HAL_UARTEx_DisableFifoMode+0x66>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2284      	movs	r2, #132	; 0x84
 8007d3e:	2101      	movs	r1, #1
 8007d40:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2288      	movs	r2, #136	; 0x88
 8007d46:	2124      	movs	r1, #36	; 0x24
 8007d48:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2101      	movs	r1, #1
 8007d5e:	438a      	bics	r2, r1
 8007d60:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	4a0b      	ldr	r2, [pc, #44]	; (8007d94 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007d66:	4013      	ands	r3, r2
 8007d68:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2288      	movs	r2, #136	; 0x88
 8007d7c:	2120      	movs	r1, #32
 8007d7e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2284      	movs	r2, #132	; 0x84
 8007d84:	2100      	movs	r1, #0
 8007d86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	0018      	movs	r0, r3
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	b004      	add	sp, #16
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	46c0      	nop			; (mov r8, r8)
 8007d94:	dfffffff 	.word	0xdfffffff

08007d98 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2284      	movs	r2, #132	; 0x84
 8007da6:	5c9b      	ldrb	r3, [r3, r2]
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d101      	bne.n	8007db0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007dac:	2302      	movs	r3, #2
 8007dae:	e02e      	b.n	8007e0e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2284      	movs	r2, #132	; 0x84
 8007db4:	2101      	movs	r1, #1
 8007db6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2288      	movs	r2, #136	; 0x88
 8007dbc:	2124      	movs	r1, #36	; 0x24
 8007dbe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2101      	movs	r1, #1
 8007dd4:	438a      	bics	r2, r1
 8007dd6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	00db      	lsls	r3, r3, #3
 8007de0:	08d9      	lsrs	r1, r3, #3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	683a      	ldr	r2, [r7, #0]
 8007de8:	430a      	orrs	r2, r1
 8007dea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	0018      	movs	r0, r3
 8007df0:	f000 f854 	bl	8007e9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2288      	movs	r2, #136	; 0x88
 8007e00:	2120      	movs	r1, #32
 8007e02:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2284      	movs	r2, #132	; 0x84
 8007e08:	2100      	movs	r1, #0
 8007e0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	0018      	movs	r0, r3
 8007e10:	46bd      	mov	sp, r7
 8007e12:	b004      	add	sp, #16
 8007e14:	bd80      	pop	{r7, pc}
	...

08007e18 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2284      	movs	r2, #132	; 0x84
 8007e26:	5c9b      	ldrb	r3, [r3, r2]
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d101      	bne.n	8007e30 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007e2c:	2302      	movs	r3, #2
 8007e2e:	e02f      	b.n	8007e90 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2284      	movs	r2, #132	; 0x84
 8007e34:	2101      	movs	r1, #1
 8007e36:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2288      	movs	r2, #136	; 0x88
 8007e3c:	2124      	movs	r1, #36	; 0x24
 8007e3e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2101      	movs	r1, #1
 8007e54:	438a      	bics	r2, r1
 8007e56:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	4a0e      	ldr	r2, [pc, #56]	; (8007e98 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007e60:	4013      	ands	r3, r2
 8007e62:	0019      	movs	r1, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	683a      	ldr	r2, [r7, #0]
 8007e6a:	430a      	orrs	r2, r1
 8007e6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	0018      	movs	r0, r3
 8007e72:	f000 f813 	bl	8007e9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2288      	movs	r2, #136	; 0x88
 8007e82:	2120      	movs	r1, #32
 8007e84:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2284      	movs	r2, #132	; 0x84
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e8e:	2300      	movs	r3, #0
}
 8007e90:	0018      	movs	r0, r3
 8007e92:	46bd      	mov	sp, r7
 8007e94:	b004      	add	sp, #16
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	f1ffffff 	.word	0xf1ffffff

08007e9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d108      	bne.n	8007ebe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	226a      	movs	r2, #106	; 0x6a
 8007eb0:	2101      	movs	r1, #1
 8007eb2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2268      	movs	r2, #104	; 0x68
 8007eb8:	2101      	movs	r1, #1
 8007eba:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ebc:	e043      	b.n	8007f46 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007ebe:	260f      	movs	r6, #15
 8007ec0:	19bb      	adds	r3, r7, r6
 8007ec2:	2208      	movs	r2, #8
 8007ec4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007ec6:	200e      	movs	r0, #14
 8007ec8:	183b      	adds	r3, r7, r0
 8007eca:	2208      	movs	r2, #8
 8007ecc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	0e5b      	lsrs	r3, r3, #25
 8007ed6:	b2da      	uxtb	r2, r3
 8007ed8:	240d      	movs	r4, #13
 8007eda:	193b      	adds	r3, r7, r4
 8007edc:	2107      	movs	r1, #7
 8007ede:	400a      	ands	r2, r1
 8007ee0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	0f5b      	lsrs	r3, r3, #29
 8007eea:	b2da      	uxtb	r2, r3
 8007eec:	250c      	movs	r5, #12
 8007eee:	197b      	adds	r3, r7, r5
 8007ef0:	2107      	movs	r1, #7
 8007ef2:	400a      	ands	r2, r1
 8007ef4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ef6:	183b      	adds	r3, r7, r0
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	197a      	adds	r2, r7, r5
 8007efc:	7812      	ldrb	r2, [r2, #0]
 8007efe:	4914      	ldr	r1, [pc, #80]	; (8007f50 <UARTEx_SetNbDataToProcess+0xb4>)
 8007f00:	5c8a      	ldrb	r2, [r1, r2]
 8007f02:	435a      	muls	r2, r3
 8007f04:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007f06:	197b      	adds	r3, r7, r5
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	4a12      	ldr	r2, [pc, #72]	; (8007f54 <UARTEx_SetNbDataToProcess+0xb8>)
 8007f0c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f0e:	0019      	movs	r1, r3
 8007f10:	f7f8 f99e 	bl	8000250 <__divsi3>
 8007f14:	0003      	movs	r3, r0
 8007f16:	b299      	uxth	r1, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	226a      	movs	r2, #106	; 0x6a
 8007f1c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f1e:	19bb      	adds	r3, r7, r6
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	193a      	adds	r2, r7, r4
 8007f24:	7812      	ldrb	r2, [r2, #0]
 8007f26:	490a      	ldr	r1, [pc, #40]	; (8007f50 <UARTEx_SetNbDataToProcess+0xb4>)
 8007f28:	5c8a      	ldrb	r2, [r1, r2]
 8007f2a:	435a      	muls	r2, r3
 8007f2c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007f2e:	193b      	adds	r3, r7, r4
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	4a08      	ldr	r2, [pc, #32]	; (8007f54 <UARTEx_SetNbDataToProcess+0xb8>)
 8007f34:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f36:	0019      	movs	r1, r3
 8007f38:	f7f8 f98a 	bl	8000250 <__divsi3>
 8007f3c:	0003      	movs	r3, r0
 8007f3e:	b299      	uxth	r1, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2268      	movs	r2, #104	; 0x68
 8007f44:	5299      	strh	r1, [r3, r2]
}
 8007f46:	46c0      	nop			; (mov r8, r8)
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	b005      	add	sp, #20
 8007f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f4e:	46c0      	nop			; (mov r8, r8)
 8007f50:	08014e38 	.word	0x08014e38
 8007f54:	08014e40 	.word	0x08014e40

08007f58 <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8007f58:	b5b0      	push	{r4, r5, r7, lr}
 8007f5a:	b0e4      	sub	sp, #400	; 0x190
 8007f5c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007f5e:	24c8      	movs	r4, #200	; 0xc8
 8007f60:	193b      	adds	r3, r7, r4
 8007f62:	0018      	movs	r0, r3
 8007f64:	23c6      	movs	r3, #198	; 0xc6
 8007f66:	001a      	movs	r2, r3
 8007f68:	2100      	movs	r1, #0
 8007f6a:	f004 fc7d 	bl	800c868 <memset>
    astronode_app_msg_t answer = {0};
 8007f6e:	4b13      	ldr	r3, [pc, #76]	; (8007fbc <astronode_send_cfg_sr+0x64>)
 8007f70:	25c8      	movs	r5, #200	; 0xc8
 8007f72:	006d      	lsls	r5, r5, #1
 8007f74:	195b      	adds	r3, r3, r5
 8007f76:	19db      	adds	r3, r3, r7
 8007f78:	0018      	movs	r0, r3
 8007f7a:	23c6      	movs	r3, #198	; 0xc6
 8007f7c:	001a      	movs	r2, r3
 8007f7e:	2100      	movs	r1, #0
 8007f80:	f004 fc72 	bl	800c868 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 8007f84:	193b      	adds	r3, r7, r4
 8007f86:	2210      	movs	r2, #16
 8007f88:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 8007f8a:	003a      	movs	r2, r7
 8007f8c:	193b      	adds	r3, r7, r4
 8007f8e:	0011      	movs	r1, r2
 8007f90:	0018      	movs	r0, r3
 8007f92:	f001 fab1 	bl	80094f8 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 8007f96:	4b09      	ldr	r3, [pc, #36]	; (8007fbc <astronode_send_cfg_sr+0x64>)
 8007f98:	195b      	adds	r3, r3, r5
 8007f9a:	19db      	adds	r3, r3, r7
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	2b90      	cmp	r3, #144	; 0x90
 8007fa0:	d104      	bne.n	8007fac <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 8007fa2:	4b07      	ldr	r3, [pc, #28]	; (8007fc0 <astronode_send_cfg_sr+0x68>)
 8007fa4:	0018      	movs	r0, r3
 8007fa6:	f7fb f88d 	bl	80030c4 <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8007faa:	e003      	b.n	8007fb4 <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8007fac:	4b05      	ldr	r3, [pc, #20]	; (8007fc4 <astronode_send_cfg_sr+0x6c>)
 8007fae:	0018      	movs	r0, r3
 8007fb0:	f7fb f888 	bl	80030c4 <send_debug_logs>
}
 8007fb4:	46c0      	nop			; (mov r8, r8)
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	b064      	add	sp, #400	; 0x190
 8007fba:	bdb0      	pop	{r4, r5, r7, pc}
 8007fbc:	fffffe70 	.word	0xfffffe70
 8007fc0:	08013974 	.word	0x08013974
 8007fc4:	080139a8 	.word	0x080139a8

08007fc8 <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 8007fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fca:	b0e7      	sub	sp, #412	; 0x19c
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	0005      	movs	r5, r0
 8007fd0:	000c      	movs	r4, r1
 8007fd2:	0010      	movs	r0, r2
 8007fd4:	0019      	movs	r1, r3
 8007fd6:	4b4b      	ldr	r3, [pc, #300]	; (8008104 <astronode_send_cfg_wr+0x13c>)
 8007fd8:	26cc      	movs	r6, #204	; 0xcc
 8007fda:	0076      	lsls	r6, r6, #1
 8007fdc:	199b      	adds	r3, r3, r6
 8007fde:	19db      	adds	r3, r3, r7
 8007fe0:	1c2a      	adds	r2, r5, #0
 8007fe2:	701a      	strb	r2, [r3, #0]
 8007fe4:	4b48      	ldr	r3, [pc, #288]	; (8008108 <astronode_send_cfg_wr+0x140>)
 8007fe6:	0035      	movs	r5, r6
 8007fe8:	195b      	adds	r3, r3, r5
 8007fea:	19db      	adds	r3, r3, r7
 8007fec:	1c22      	adds	r2, r4, #0
 8007fee:	701a      	strb	r2, [r3, #0]
 8007ff0:	4b46      	ldr	r3, [pc, #280]	; (800810c <astronode_send_cfg_wr+0x144>)
 8007ff2:	002c      	movs	r4, r5
 8007ff4:	191b      	adds	r3, r3, r4
 8007ff6:	19db      	adds	r3, r3, r7
 8007ff8:	1c02      	adds	r2, r0, #0
 8007ffa:	701a      	strb	r2, [r3, #0]
 8007ffc:	4b44      	ldr	r3, [pc, #272]	; (8008110 <astronode_send_cfg_wr+0x148>)
 8007ffe:	191b      	adds	r3, r3, r4
 8008000:	19db      	adds	r3, r3, r7
 8008002:	1c0a      	adds	r2, r1, #0
 8008004:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8008006:	25d0      	movs	r5, #208	; 0xd0
 8008008:	197b      	adds	r3, r7, r5
 800800a:	0018      	movs	r0, r3
 800800c:	23c6      	movs	r3, #198	; 0xc6
 800800e:	001a      	movs	r2, r3
 8008010:	2100      	movs	r1, #0
 8008012:	f004 fc29 	bl	800c868 <memset>
    astronode_app_msg_t answer = {0};
 8008016:	4b3f      	ldr	r3, [pc, #252]	; (8008114 <astronode_send_cfg_wr+0x14c>)
 8008018:	191b      	adds	r3, r3, r4
 800801a:	19db      	adds	r3, r3, r7
 800801c:	0018      	movs	r0, r3
 800801e:	23c6      	movs	r3, #198	; 0xc6
 8008020:	001a      	movs	r2, r3
 8008022:	2100      	movs	r1, #0
 8008024:	f004 fc20 	bl	800c868 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8008028:	0029      	movs	r1, r5
 800802a:	187b      	adds	r3, r7, r1
 800802c:	2205      	movs	r2, #5
 800802e:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8008030:	4b34      	ldr	r3, [pc, #208]	; (8008104 <astronode_send_cfg_wr+0x13c>)
 8008032:	191b      	adds	r3, r3, r4
 8008034:	19db      	adds	r3, r3, r7
 8008036:	2200      	movs	r2, #0
 8008038:	569a      	ldrsb	r2, [r3, r2]
 800803a:	4b33      	ldr	r3, [pc, #204]	; (8008108 <astronode_send_cfg_wr+0x140>)
 800803c:	191b      	adds	r3, r3, r4
 800803e:	19db      	adds	r3, r3, r7
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	005b      	lsls	r3, r3, #1
 8008044:	b25b      	sxtb	r3, r3
 8008046:	4313      	orrs	r3, r2
 8008048:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 800804a:	4b30      	ldr	r3, [pc, #192]	; (800810c <astronode_send_cfg_wr+0x144>)
 800804c:	191b      	adds	r3, r3, r4
 800804e:	19db      	adds	r3, r3, r7
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	b25b      	sxtb	r3, r3
 8008056:	4313      	orrs	r3, r2
 8008058:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 800805a:	4b2d      	ldr	r3, [pc, #180]	; (8008110 <astronode_send_cfg_wr+0x148>)
 800805c:	191b      	adds	r3, r3, r4
 800805e:	19db      	adds	r3, r3, r7
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	00db      	lsls	r3, r3, #3
 8008064:	b25b      	sxtb	r3, r3
 8008066:	4313      	orrs	r3, r2
 8008068:	b25b      	sxtb	r3, r3
 800806a:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 800806c:	187b      	adds	r3, r7, r1
 800806e:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8008070:	23d4      	movs	r3, #212	; 0xd4
 8008072:	005b      	lsls	r3, r3, #1
 8008074:	2508      	movs	r5, #8
 8008076:	195b      	adds	r3, r3, r5
 8008078:	19db      	adds	r3, r3, r7
 800807a:	2200      	movs	r2, #0
 800807c:	569a      	ldrsb	r2, [r3, r2]
 800807e:	23d6      	movs	r3, #214	; 0xd6
 8008080:	005b      	lsls	r3, r3, #1
 8008082:	195b      	adds	r3, r3, r5
 8008084:	19db      	adds	r3, r3, r7
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	005b      	lsls	r3, r3, #1
 800808a:	b25b      	sxtb	r3, r3
 800808c:	4313      	orrs	r3, r2
 800808e:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 8008090:	23d8      	movs	r3, #216	; 0xd8
 8008092:	005b      	lsls	r3, r3, #1
 8008094:	195b      	adds	r3, r3, r5
 8008096:	19db      	adds	r3, r3, r7
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	b25b      	sxtb	r3, r3
 800809e:	4313      	orrs	r3, r2
 80080a0:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 80080a2:	23da      	movs	r3, #218	; 0xda
 80080a4:	005b      	lsls	r3, r3, #1
 80080a6:	195b      	adds	r3, r3, r5
 80080a8:	19db      	adds	r3, r3, r7
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	00db      	lsls	r3, r3, #3
 80080ae:	b25b      	sxtb	r3, r3
 80080b0:	4313      	orrs	r3, r2
 80080b2:	b25b      	sxtb	r3, r3
 80080b4:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 80080b6:	187b      	adds	r3, r7, r1
 80080b8:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 80080ba:	0008      	movs	r0, r1
 80080bc:	187b      	adds	r3, r7, r1
 80080be:	22c4      	movs	r2, #196	; 0xc4
 80080c0:	2103      	movs	r1, #3
 80080c2:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80080c4:	002b      	movs	r3, r5
 80080c6:	18fa      	adds	r2, r7, r3
 80080c8:	183b      	adds	r3, r7, r0
 80080ca:	0011      	movs	r1, r2
 80080cc:	0018      	movs	r0, r3
 80080ce:	f001 fa13 	bl	80094f8 <astronode_transport_send_receive>
 80080d2:	0003      	movs	r3, r0
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d10f      	bne.n	80080f8 <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 80080d8:	4b0e      	ldr	r3, [pc, #56]	; (8008114 <astronode_send_cfg_wr+0x14c>)
 80080da:	191b      	adds	r3, r3, r4
 80080dc:	19db      	adds	r3, r3, r7
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	2b85      	cmp	r3, #133	; 0x85
 80080e2:	d105      	bne.n	80080f0 <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 80080e4:	4b0c      	ldr	r3, [pc, #48]	; (8008118 <astronode_send_cfg_wr+0x150>)
 80080e6:	0018      	movs	r0, r3
 80080e8:	f7fa ffec 	bl	80030c4 <send_debug_logs>
            return true ;
 80080ec:	2301      	movs	r3, #1
 80080ee:	e004      	b.n	80080fa <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 80080f0:	4b0a      	ldr	r3, [pc, #40]	; (800811c <astronode_send_cfg_wr+0x154>)
 80080f2:	0018      	movs	r0, r3
 80080f4:	f7fa ffe6 	bl	80030c4 <send_debug_logs>
        }
    }
    return false ;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	0018      	movs	r0, r3
 80080fc:	46bd      	mov	sp, r7
 80080fe:	b067      	add	sp, #412	; 0x19c
 8008100:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008102:	46c0      	nop			; (mov r8, r8)
 8008104:	fffffe6f 	.word	0xfffffe6f
 8008108:	fffffe6e 	.word	0xfffffe6e
 800810c:	fffffe6d 	.word	0xfffffe6d
 8008110:	fffffe6c 	.word	0xfffffe6c
 8008114:	fffffe70 	.word	0xfffffe70
 8008118:	080139dc 	.word	0x080139dc
 800811c:	08013a08 	.word	0x08013a08

08008120 <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 8008120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008122:	b0ed      	sub	sp, #436	; 0x1b4
 8008124:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008126:	21c8      	movs	r1, #200	; 0xc8
 8008128:	2318      	movs	r3, #24
 800812a:	18cb      	adds	r3, r1, r3
 800812c:	19db      	adds	r3, r3, r7
 800812e:	0018      	movs	r0, r3
 8008130:	23c6      	movs	r3, #198	; 0xc6
 8008132:	001a      	movs	r2, r3
 8008134:	2100      	movs	r1, #0
 8008136:	f004 fb97 	bl	800c868 <memset>
    astronode_app_msg_t answer = {0};
 800813a:	4b4a      	ldr	r3, [pc, #296]	; (8008264 <astronode_send_mgi_rr+0x144>)
 800813c:	26cc      	movs	r6, #204	; 0xcc
 800813e:	0076      	lsls	r6, r6, #1
 8008140:	199b      	adds	r3, r3, r6
 8008142:	2218      	movs	r2, #24
 8008144:	4694      	mov	ip, r2
 8008146:	44bc      	add	ip, r7
 8008148:	4463      	add	r3, ip
 800814a:	0018      	movs	r0, r3
 800814c:	23c6      	movs	r3, #198	; 0xc6
 800814e:	001a      	movs	r2, r3
 8008150:	2100      	movs	r1, #0
 8008152:	f004 fb89 	bl	800c868 <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 8008156:	21c8      	movs	r1, #200	; 0xc8
 8008158:	2318      	movs	r3, #24
 800815a:	18cb      	adds	r3, r1, r3
 800815c:	19db      	adds	r3, r3, r7
 800815e:	2219      	movs	r2, #25
 8008160:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008162:	2318      	movs	r3, #24
 8008164:	18fa      	adds	r2, r7, r3
 8008166:	2318      	movs	r3, #24
 8008168:	18cb      	adds	r3, r1, r3
 800816a:	19db      	adds	r3, r3, r7
 800816c:	0011      	movs	r1, r2
 800816e:	0018      	movs	r0, r3
 8008170:	f001 f9c2 	bl	80094f8 <astronode_transport_send_receive>
 8008174:	0003      	movs	r3, r0
 8008176:	2b01      	cmp	r3, #1
 8008178:	d16f      	bne.n	800825a <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 800817a:	4b3a      	ldr	r3, [pc, #232]	; (8008264 <astronode_send_mgi_rr+0x144>)
 800817c:	0032      	movs	r2, r6
 800817e:	189b      	adds	r3, r3, r2
 8008180:	2118      	movs	r1, #24
 8008182:	468c      	mov	ip, r1
 8008184:	44bc      	add	ip, r7
 8008186:	4463      	add	r3, ip
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	2b99      	cmp	r3, #153	; 0x99
 800818c:	d161      	bne.n	8008252 <astronode_send_mgi_rr+0x132>
        {
 800818e:	466b      	mov	r3, sp
 8008190:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 8008192:	4b34      	ldr	r3, [pc, #208]	; (8008264 <astronode_send_mgi_rr+0x144>)
 8008194:	189b      	adds	r3, r3, r2
 8008196:	2218      	movs	r2, #24
 8008198:	4694      	mov	ip, r2
 800819a:	44bc      	add	ip, r7
 800819c:	4463      	add	r3, ip
 800819e:	22c4      	movs	r2, #196	; 0xc4
 80081a0:	5a9b      	ldrh	r3, [r3, r2]
 80081a2:	001a      	movs	r2, r3
 80081a4:	3a01      	subs	r2, #1
 80081a6:	21ca      	movs	r1, #202	; 0xca
 80081a8:	0049      	lsls	r1, r1, #1
 80081aa:	2018      	movs	r0, #24
 80081ac:	1809      	adds	r1, r1, r0
 80081ae:	19c9      	adds	r1, r1, r7
 80081b0:	600a      	str	r2, [r1, #0]
 80081b2:	001c      	movs	r4, r3
 80081b4:	2200      	movs	r2, #0
 80081b6:	0015      	movs	r5, r2
 80081b8:	0020      	movs	r0, r4
 80081ba:	0029      	movs	r1, r5
 80081bc:	0004      	movs	r4, r0
 80081be:	0f62      	lsrs	r2, r4, #29
 80081c0:	000c      	movs	r4, r1
 80081c2:	00e4      	lsls	r4, r4, #3
 80081c4:	617c      	str	r4, [r7, #20]
 80081c6:	697c      	ldr	r4, [r7, #20]
 80081c8:	4314      	orrs	r4, r2
 80081ca:	617c      	str	r4, [r7, #20]
 80081cc:	0001      	movs	r1, r0
 80081ce:	00c9      	lsls	r1, r1, #3
 80081d0:	6139      	str	r1, [r7, #16]
 80081d2:	603b      	str	r3, [r7, #0]
 80081d4:	2200      	movs	r2, #0
 80081d6:	607a      	str	r2, [r7, #4]
 80081d8:	6838      	ldr	r0, [r7, #0]
 80081da:	6879      	ldr	r1, [r7, #4]
 80081dc:	0004      	movs	r4, r0
 80081de:	0f62      	lsrs	r2, r4, #29
 80081e0:	000c      	movs	r4, r1
 80081e2:	00e4      	lsls	r4, r4, #3
 80081e4:	60fc      	str	r4, [r7, #12]
 80081e6:	68fc      	ldr	r4, [r7, #12]
 80081e8:	4314      	orrs	r4, r2
 80081ea:	60fc      	str	r4, [r7, #12]
 80081ec:	0001      	movs	r1, r0
 80081ee:	00ca      	lsls	r2, r1, #3
 80081f0:	60ba      	str	r2, [r7, #8]
 80081f2:	3307      	adds	r3, #7
 80081f4:	08db      	lsrs	r3, r3, #3
 80081f6:	00db      	lsls	r3, r3, #3
 80081f8:	4669      	mov	r1, sp
 80081fa:	1acb      	subs	r3, r1, r3
 80081fc:	469d      	mov	sp, r3
 80081fe:	466b      	mov	r3, sp
 8008200:	3300      	adds	r3, #0
 8008202:	24c8      	movs	r4, #200	; 0xc8
 8008204:	0064      	lsls	r4, r4, #1
 8008206:	2218      	movs	r2, #24
 8008208:	18a2      	adds	r2, r4, r2
 800820a:	19d1      	adds	r1, r2, r7
 800820c:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 800820e:	4b16      	ldr	r3, [pc, #88]	; (8008268 <astronode_send_mgi_rr+0x148>)
 8008210:	0018      	movs	r0, r3
 8008212:	f7fa ff57 	bl	80030c4 <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 8008216:	4b13      	ldr	r3, [pc, #76]	; (8008264 <astronode_send_mgi_rr+0x144>)
 8008218:	22cc      	movs	r2, #204	; 0xcc
 800821a:	0052      	lsls	r2, r2, #1
 800821c:	189b      	adds	r3, r3, r2
 800821e:	2218      	movs	r2, #24
 8008220:	4694      	mov	ip, r2
 8008222:	44bc      	add	ip, r7
 8008224:	4463      	add	r3, ip
 8008226:	22c4      	movs	r2, #196	; 0xc4
 8008228:	5a9b      	ldrh	r3, [r3, r2]
 800822a:	0019      	movs	r1, r3
 800822c:	2318      	movs	r3, #24
 800822e:	18fb      	adds	r3, r7, r3
 8008230:	3301      	adds	r3, #1
 8008232:	4a0e      	ldr	r2, [pc, #56]	; (800826c <astronode_send_mgi_rr+0x14c>)
 8008234:	2018      	movs	r0, #24
 8008236:	1820      	adds	r0, r4, r0
 8008238:	19c0      	adds	r0, r0, r7
 800823a:	6800      	ldr	r0, [r0, #0]
 800823c:	f004 fa4a 	bl	800c6d4 <snprintf>
            send_debug_logs(guid);
 8008240:	2318      	movs	r3, #24
 8008242:	18e3      	adds	r3, r4, r3
 8008244:	19db      	adds	r3, r3, r7
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	0018      	movs	r0, r3
 800824a:	f7fa ff3b 	bl	80030c4 <send_debug_logs>
 800824e:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 8008250:	e003      	b.n	800825a <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 8008252:	4b07      	ldr	r3, [pc, #28]	; (8008270 <astronode_send_mgi_rr+0x150>)
 8008254:	0018      	movs	r0, r3
 8008256:	f7fa ff35 	bl	80030c4 <send_debug_logs>
}
 800825a:	46c0      	nop			; (mov r8, r8)
 800825c:	46bd      	mov	sp, r7
 800825e:	b06d      	add	sp, #436	; 0x1b4
 8008260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008262:	46c0      	nop			; (mov r8, r8)
 8008264:	fffffe68 	.word	0xfffffe68
 8008268:	08013a94 	.word	0x08013a94
 800826c:	08013aa4 	.word	0x08013aa4
 8008270:	08013aa8 	.word	0x08013aa8

08008274 <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 8008274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008276:	b0ed      	sub	sp, #436	; 0x1b4
 8008278:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800827a:	21c8      	movs	r1, #200	; 0xc8
 800827c:	2318      	movs	r3, #24
 800827e:	18cb      	adds	r3, r1, r3
 8008280:	19db      	adds	r3, r3, r7
 8008282:	0018      	movs	r0, r3
 8008284:	23c6      	movs	r3, #198	; 0xc6
 8008286:	001a      	movs	r2, r3
 8008288:	2100      	movs	r1, #0
 800828a:	f004 faed 	bl	800c868 <memset>
    astronode_app_msg_t answer = {0};
 800828e:	4b4a      	ldr	r3, [pc, #296]	; (80083b8 <astronode_send_msn_rr+0x144>)
 8008290:	26cc      	movs	r6, #204	; 0xcc
 8008292:	0076      	lsls	r6, r6, #1
 8008294:	199b      	adds	r3, r3, r6
 8008296:	2218      	movs	r2, #24
 8008298:	4694      	mov	ip, r2
 800829a:	44bc      	add	ip, r7
 800829c:	4463      	add	r3, ip
 800829e:	0018      	movs	r0, r3
 80082a0:	23c6      	movs	r3, #198	; 0xc6
 80082a2:	001a      	movs	r2, r3
 80082a4:	2100      	movs	r1, #0
 80082a6:	f004 fadf 	bl	800c868 <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 80082aa:	21c8      	movs	r1, #200	; 0xc8
 80082ac:	2318      	movs	r3, #24
 80082ae:	18cb      	adds	r3, r1, r3
 80082b0:	19db      	adds	r3, r3, r7
 80082b2:	221a      	movs	r2, #26
 80082b4:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80082b6:	2318      	movs	r3, #24
 80082b8:	18fa      	adds	r2, r7, r3
 80082ba:	2318      	movs	r3, #24
 80082bc:	18cb      	adds	r3, r1, r3
 80082be:	19db      	adds	r3, r3, r7
 80082c0:	0011      	movs	r1, r2
 80082c2:	0018      	movs	r0, r3
 80082c4:	f001 f918 	bl	80094f8 <astronode_transport_send_receive>
 80082c8:	0003      	movs	r3, r0
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d16f      	bne.n	80083ae <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 80082ce:	4b3a      	ldr	r3, [pc, #232]	; (80083b8 <astronode_send_msn_rr+0x144>)
 80082d0:	0032      	movs	r2, r6
 80082d2:	189b      	adds	r3, r3, r2
 80082d4:	2118      	movs	r1, #24
 80082d6:	468c      	mov	ip, r1
 80082d8:	44bc      	add	ip, r7
 80082da:	4463      	add	r3, ip
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	2b9a      	cmp	r3, #154	; 0x9a
 80082e0:	d161      	bne.n	80083a6 <astronode_send_msn_rr+0x132>
        {
 80082e2:	466b      	mov	r3, sp
 80082e4:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 80082e6:	4b34      	ldr	r3, [pc, #208]	; (80083b8 <astronode_send_msn_rr+0x144>)
 80082e8:	189b      	adds	r3, r3, r2
 80082ea:	2218      	movs	r2, #24
 80082ec:	4694      	mov	ip, r2
 80082ee:	44bc      	add	ip, r7
 80082f0:	4463      	add	r3, ip
 80082f2:	22c4      	movs	r2, #196	; 0xc4
 80082f4:	5a9b      	ldrh	r3, [r3, r2]
 80082f6:	001a      	movs	r2, r3
 80082f8:	3a01      	subs	r2, #1
 80082fa:	21ca      	movs	r1, #202	; 0xca
 80082fc:	0049      	lsls	r1, r1, #1
 80082fe:	2018      	movs	r0, #24
 8008300:	1809      	adds	r1, r1, r0
 8008302:	19c9      	adds	r1, r1, r7
 8008304:	600a      	str	r2, [r1, #0]
 8008306:	001c      	movs	r4, r3
 8008308:	2200      	movs	r2, #0
 800830a:	0015      	movs	r5, r2
 800830c:	0020      	movs	r0, r4
 800830e:	0029      	movs	r1, r5
 8008310:	0004      	movs	r4, r0
 8008312:	0f62      	lsrs	r2, r4, #29
 8008314:	000c      	movs	r4, r1
 8008316:	00e4      	lsls	r4, r4, #3
 8008318:	617c      	str	r4, [r7, #20]
 800831a:	697c      	ldr	r4, [r7, #20]
 800831c:	4314      	orrs	r4, r2
 800831e:	617c      	str	r4, [r7, #20]
 8008320:	0001      	movs	r1, r0
 8008322:	00c9      	lsls	r1, r1, #3
 8008324:	6139      	str	r1, [r7, #16]
 8008326:	603b      	str	r3, [r7, #0]
 8008328:	2200      	movs	r2, #0
 800832a:	607a      	str	r2, [r7, #4]
 800832c:	6838      	ldr	r0, [r7, #0]
 800832e:	6879      	ldr	r1, [r7, #4]
 8008330:	0004      	movs	r4, r0
 8008332:	0f62      	lsrs	r2, r4, #29
 8008334:	000c      	movs	r4, r1
 8008336:	00e4      	lsls	r4, r4, #3
 8008338:	60fc      	str	r4, [r7, #12]
 800833a:	68fc      	ldr	r4, [r7, #12]
 800833c:	4314      	orrs	r4, r2
 800833e:	60fc      	str	r4, [r7, #12]
 8008340:	0001      	movs	r1, r0
 8008342:	00ca      	lsls	r2, r1, #3
 8008344:	60ba      	str	r2, [r7, #8]
 8008346:	3307      	adds	r3, #7
 8008348:	08db      	lsrs	r3, r3, #3
 800834a:	00db      	lsls	r3, r3, #3
 800834c:	4669      	mov	r1, sp
 800834e:	1acb      	subs	r3, r1, r3
 8008350:	469d      	mov	sp, r3
 8008352:	466b      	mov	r3, sp
 8008354:	3300      	adds	r3, #0
 8008356:	24c8      	movs	r4, #200	; 0xc8
 8008358:	0064      	lsls	r4, r4, #1
 800835a:	2218      	movs	r2, #24
 800835c:	18a2      	adds	r2, r4, r2
 800835e:	19d1      	adds	r1, r2, r7
 8008360:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 8008362:	4b16      	ldr	r3, [pc, #88]	; (80083bc <astronode_send_msn_rr+0x148>)
 8008364:	0018      	movs	r0, r3
 8008366:	f7fa fead 	bl	80030c4 <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 800836a:	4b13      	ldr	r3, [pc, #76]	; (80083b8 <astronode_send_msn_rr+0x144>)
 800836c:	22cc      	movs	r2, #204	; 0xcc
 800836e:	0052      	lsls	r2, r2, #1
 8008370:	189b      	adds	r3, r3, r2
 8008372:	2218      	movs	r2, #24
 8008374:	4694      	mov	ip, r2
 8008376:	44bc      	add	ip, r7
 8008378:	4463      	add	r3, ip
 800837a:	22c4      	movs	r2, #196	; 0xc4
 800837c:	5a9b      	ldrh	r3, [r3, r2]
 800837e:	0019      	movs	r1, r3
 8008380:	2318      	movs	r3, #24
 8008382:	18fb      	adds	r3, r7, r3
 8008384:	3301      	adds	r3, #1
 8008386:	4a0e      	ldr	r2, [pc, #56]	; (80083c0 <astronode_send_msn_rr+0x14c>)
 8008388:	2018      	movs	r0, #24
 800838a:	1820      	adds	r0, r4, r0
 800838c:	19c0      	adds	r0, r0, r7
 800838e:	6800      	ldr	r0, [r0, #0]
 8008390:	f004 f9a0 	bl	800c6d4 <snprintf>
            send_debug_logs(serial_number);
 8008394:	2318      	movs	r3, #24
 8008396:	18e3      	adds	r3, r4, r3
 8008398:	19db      	adds	r3, r3, r7
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	0018      	movs	r0, r3
 800839e:	f7fa fe91 	bl	80030c4 <send_debug_logs>
 80083a2:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 80083a4:	e003      	b.n	80083ae <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 80083a6:	4b07      	ldr	r3, [pc, #28]	; (80083c4 <astronode_send_msn_rr+0x150>)
 80083a8:	0018      	movs	r0, r3
 80083aa:	f7fa fe8b 	bl	80030c4 <send_debug_logs>
}
 80083ae:	46c0      	nop			; (mov r8, r8)
 80083b0:	46bd      	mov	sp, r7
 80083b2:	b06d      	add	sp, #436	; 0x1b4
 80083b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083b6:	46c0      	nop			; (mov r8, r8)
 80083b8:	fffffe68 	.word	0xfffffe68
 80083bc:	08013ac4 	.word	0x08013ac4
 80083c0:	08013aa4 	.word	0x08013aa4
 80083c4:	08013ae0 	.word	0x08013ae0

080083c8 <astronode_send_nco_rr>:

uint32_t astronode_send_nco_rr ( void )
{
 80083c8:	b5b0      	push	{r4, r5, r7, lr}
 80083ca:	b0fa      	sub	sp, #488	; 0x1e8
 80083cc:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0} ;
 80083ce:	258e      	movs	r5, #142	; 0x8e
 80083d0:	006d      	lsls	r5, r5, #1
 80083d2:	197b      	adds	r3, r7, r5
 80083d4:	0018      	movs	r0, r3
 80083d6:	23c6      	movs	r3, #198	; 0xc6
 80083d8:	001a      	movs	r2, r3
 80083da:	2100      	movs	r1, #0
 80083dc:	f004 fa44 	bl	800c868 <memset>
    astronode_app_msg_t answer = {0} ;
 80083e0:	4b28      	ldr	r3, [pc, #160]	; (8008484 <astronode_send_nco_rr+0xbc>)
 80083e2:	24f4      	movs	r4, #244	; 0xf4
 80083e4:	0064      	lsls	r4, r4, #1
 80083e6:	191b      	adds	r3, r3, r4
 80083e8:	19db      	adds	r3, r3, r7
 80083ea:	0018      	movs	r0, r3
 80083ec:	23c6      	movs	r3, #198	; 0xc6
 80083ee:	001a      	movs	r2, r3
 80083f0:	2100      	movs	r1, #0
 80083f2:	f004 fa39 	bl	800c868 <memset>

    request.op_code = ASTRONODE_OP_CODE_NCO_RR ;
 80083f6:	197b      	adds	r3, r7, r5
 80083f8:	2218      	movs	r2, #24
 80083fa:	701a      	strb	r2, [r3, #0]

    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 80083fc:	2354      	movs	r3, #84	; 0x54
 80083fe:	18fa      	adds	r2, r7, r3
 8008400:	197b      	adds	r3, r7, r5
 8008402:	0011      	movs	r1, r2
 8008404:	0018      	movs	r0, r3
 8008406:	f001 f877 	bl	80094f8 <astronode_transport_send_receive>
 800840a:	0003      	movs	r3, r0
 800840c:	2b01      	cmp	r3, #1
 800840e:	d133      	bne.n	8008478 <astronode_send_nco_rr+0xb0>
    {
        if ( answer.op_code == ASTRONODE_OP_CODE_NCO_RA )
 8008410:	4b1c      	ldr	r3, [pc, #112]	; (8008484 <astronode_send_nco_rr+0xbc>)
 8008412:	0021      	movs	r1, r4
 8008414:	185b      	adds	r3, r3, r1
 8008416:	19db      	adds	r3, r3, r7
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	2b98      	cmp	r3, #152	; 0x98
 800841c:	d128      	bne.n	8008470 <astronode_send_nco_rr+0xa8>
        {
            uint32_t time_to_next_pass = answer.p_payload[0]
 800841e:	4b19      	ldr	r3, [pc, #100]	; (8008484 <astronode_send_nco_rr+0xbc>)
 8008420:	185b      	adds	r3, r3, r1
 8008422:	19db      	adds	r3, r3, r7
 8008424:	785b      	ldrb	r3, [r3, #1]
 8008426:	001a      	movs	r2, r3
                                        + ( answer.p_payload[1] << 8 )
 8008428:	4b16      	ldr	r3, [pc, #88]	; (8008484 <astronode_send_nco_rr+0xbc>)
 800842a:	185b      	adds	r3, r3, r1
 800842c:	19db      	adds	r3, r3, r7
 800842e:	789b      	ldrb	r3, [r3, #2]
 8008430:	021b      	lsls	r3, r3, #8
 8008432:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[2] << 16 )
 8008434:	4b13      	ldr	r3, [pc, #76]	; (8008484 <astronode_send_nco_rr+0xbc>)
 8008436:	185b      	adds	r3, r3, r1
 8008438:	19db      	adds	r3, r3, r7
 800843a:	78db      	ldrb	r3, [r3, #3]
 800843c:	041b      	lsls	r3, r3, #16
 800843e:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[3] << 24 ) ;
 8008440:	4b10      	ldr	r3, [pc, #64]	; (8008484 <astronode_send_nco_rr+0xbc>)
 8008442:	185b      	adds	r3, r3, r1
 8008444:	19db      	adds	r3, r3, r7
 8008446:	791b      	ldrb	r3, [r3, #4]
 8008448:	061b      	lsls	r3, r3, #24
 800844a:	18d3      	adds	r3, r2, r3
            uint32_t time_to_next_pass = answer.p_payload[0]
 800844c:	24f2      	movs	r4, #242	; 0xf2
 800844e:	0064      	lsls	r4, r4, #1
 8008450:	193a      	adds	r2, r7, r4
 8008452:	6013      	str	r3, [r2, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf (str , "Next opportunity for communication with the Astrocast Network: %lds." , time_to_next_pass ) ;
 8008454:	193b      	adds	r3, r7, r4
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	490b      	ldr	r1, [pc, #44]	; (8008488 <astronode_send_nco_rr+0xc0>)
 800845a:	1d3b      	adds	r3, r7, #4
 800845c:	0018      	movs	r0, r3
 800845e:	f004 f96d 	bl	800c73c <sprintf>
            send_debug_logs ( str ) ;
 8008462:	1d3b      	adds	r3, r7, #4
 8008464:	0018      	movs	r0, r3
 8008466:	f7fa fe2d 	bl	80030c4 <send_debug_logs>
            return time_to_next_pass ;
 800846a:	193b      	adds	r3, r7, r4
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	e005      	b.n	800847c <astronode_send_nco_rr+0xb4>
        }
        else
        {
            send_debug_logs ( "Failed to read satellite constellation ephemeris data." ) ;
 8008470:	4b06      	ldr	r3, [pc, #24]	; (800848c <astronode_send_nco_rr+0xc4>)
 8008472:	0018      	movs	r0, r3
 8008474:	f7fa fe26 	bl	80030c4 <send_debug_logs>
        }
    }
    return 0xFFFFFFFF ; // Longest possible time
 8008478:	2301      	movs	r3, #1
 800847a:	425b      	negs	r3, r3
}
 800847c:	0018      	movs	r0, r3
 800847e:	46bd      	mov	sp, r7
 8008480:	b07a      	add	sp, #488	; 0x1e8
 8008482:	bdb0      	pop	{r4, r5, r7, pc}
 8008484:	fffffe6c 	.word	0xfffffe6c
 8008488:	08013b08 	.word	0x08013b08
 800848c:	08013b50 	.word	0x08013b50

08008490 <astronode_send_evt_rr>:

void astronode_send_evt_rr(void)
{
 8008490:	b5b0      	push	{r4, r5, r7, lr}
 8008492:	b0e4      	sub	sp, #400	; 0x190
 8008494:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008496:	24c8      	movs	r4, #200	; 0xc8
 8008498:	193b      	adds	r3, r7, r4
 800849a:	0018      	movs	r0, r3
 800849c:	23c6      	movs	r3, #198	; 0xc6
 800849e:	001a      	movs	r2, r3
 80084a0:	2100      	movs	r1, #0
 80084a2:	f004 f9e1 	bl	800c868 <memset>
    astronode_app_msg_t answer = {0};
 80084a6:	4b31      	ldr	r3, [pc, #196]	; (800856c <astronode_send_evt_rr+0xdc>)
 80084a8:	25c8      	movs	r5, #200	; 0xc8
 80084aa:	006d      	lsls	r5, r5, #1
 80084ac:	195b      	adds	r3, r3, r5
 80084ae:	19db      	adds	r3, r3, r7
 80084b0:	0018      	movs	r0, r3
 80084b2:	23c6      	movs	r3, #198	; 0xc6
 80084b4:	001a      	movs	r2, r3
 80084b6:	2100      	movs	r1, #0
 80084b8:	f004 f9d6 	bl	800c868 <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 80084bc:	193b      	adds	r3, r7, r4
 80084be:	2265      	movs	r2, #101	; 0x65
 80084c0:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80084c2:	003a      	movs	r2, r7
 80084c4:	193b      	adds	r3, r7, r4
 80084c6:	0011      	movs	r1, r2
 80084c8:	0018      	movs	r0, r3
 80084ca:	f001 f815 	bl	80094f8 <astronode_transport_send_receive>
 80084ce:	0003      	movs	r3, r0
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d147      	bne.n	8008564 <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 80084d4:	4b25      	ldr	r3, [pc, #148]	; (800856c <astronode_send_evt_rr+0xdc>)
 80084d6:	195b      	adds	r3, r3, r5
 80084d8:	19db      	adds	r3, r3, r7
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	2be5      	cmp	r3, #229	; 0xe5
 80084de:	d141      	bne.n	8008564 <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 80084e0:	4b22      	ldr	r3, [pc, #136]	; (800856c <astronode_send_evt_rr+0xdc>)
 80084e2:	195b      	adds	r3, r3, r5
 80084e4:	19db      	adds	r3, r3, r7
 80084e6:	785b      	ldrb	r3, [r3, #1]
 80084e8:	001a      	movs	r2, r3
 80084ea:	2301      	movs	r3, #1
 80084ec:	4013      	ands	r3, r2
 80084ee:	d006      	beq.n	80084fe <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 80084f0:	4b1f      	ldr	r3, [pc, #124]	; (8008570 <astronode_send_evt_rr+0xe0>)
 80084f2:	2201      	movs	r2, #1
 80084f4:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 80084f6:	4b1f      	ldr	r3, [pc, #124]	; (8008574 <astronode_send_evt_rr+0xe4>)
 80084f8:	0018      	movs	r0, r3
 80084fa:	f7fa fde3 	bl	80030c4 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 80084fe:	4b1b      	ldr	r3, [pc, #108]	; (800856c <astronode_send_evt_rr+0xdc>)
 8008500:	22c8      	movs	r2, #200	; 0xc8
 8008502:	0052      	lsls	r2, r2, #1
 8008504:	189b      	adds	r3, r3, r2
 8008506:	19db      	adds	r3, r3, r7
 8008508:	785b      	ldrb	r3, [r3, #1]
 800850a:	001a      	movs	r2, r3
 800850c:	2302      	movs	r3, #2
 800850e:	4013      	ands	r3, r2
 8008510:	d006      	beq.n	8008520 <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 8008512:	4b19      	ldr	r3, [pc, #100]	; (8008578 <astronode_send_evt_rr+0xe8>)
 8008514:	2201      	movs	r2, #1
 8008516:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 8008518:	4b18      	ldr	r3, [pc, #96]	; (800857c <astronode_send_evt_rr+0xec>)
 800851a:	0018      	movs	r0, r3
 800851c:	f7fa fdd2 	bl	80030c4 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 8008520:	4b12      	ldr	r3, [pc, #72]	; (800856c <astronode_send_evt_rr+0xdc>)
 8008522:	22c8      	movs	r2, #200	; 0xc8
 8008524:	0052      	lsls	r2, r2, #1
 8008526:	189b      	adds	r3, r3, r2
 8008528:	19db      	adds	r3, r3, r7
 800852a:	785b      	ldrb	r3, [r3, #1]
 800852c:	001a      	movs	r2, r3
 800852e:	2304      	movs	r3, #4
 8008530:	4013      	ands	r3, r2
 8008532:	d006      	beq.n	8008542 <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 8008534:	4b12      	ldr	r3, [pc, #72]	; (8008580 <astronode_send_evt_rr+0xf0>)
 8008536:	2201      	movs	r2, #1
 8008538:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 800853a:	4b12      	ldr	r3, [pc, #72]	; (8008584 <astronode_send_evt_rr+0xf4>)
 800853c:	0018      	movs	r0, r3
 800853e:	f7fa fdc1 	bl	80030c4 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 8008542:	4b0a      	ldr	r3, [pc, #40]	; (800856c <astronode_send_evt_rr+0xdc>)
 8008544:	22c8      	movs	r2, #200	; 0xc8
 8008546:	0052      	lsls	r2, r2, #1
 8008548:	189b      	adds	r3, r3, r2
 800854a:	19db      	adds	r3, r3, r7
 800854c:	785b      	ldrb	r3, [r3, #1]
 800854e:	001a      	movs	r2, r3
 8008550:	2308      	movs	r3, #8
 8008552:	4013      	ands	r3, r2
 8008554:	d006      	beq.n	8008564 <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 8008556:	4b0c      	ldr	r3, [pc, #48]	; (8008588 <astronode_send_evt_rr+0xf8>)
 8008558:	2201      	movs	r2, #1
 800855a:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 800855c:	4b0b      	ldr	r3, [pc, #44]	; (800858c <astronode_send_evt_rr+0xfc>)
 800855e:	0018      	movs	r0, r3
 8008560:	f7fa fdb0 	bl	80030c4 <send_debug_logs>
            }

        }
    }
}
 8008564:	46c0      	nop			; (mov r8, r8)
 8008566:	46bd      	mov	sp, r7
 8008568:	b064      	add	sp, #400	; 0x190
 800856a:	bdb0      	pop	{r4, r5, r7, pc}
 800856c:	fffffe70 	.word	0xfffffe70
 8008570:	20000bbc 	.word	0x20000bbc
 8008574:	08013b88 	.word	0x08013b88
 8008578:	20000bbd 	.word	0x20000bbd
 800857c:	08013bac 	.word	0x08013bac
 8008580:	20000bbe 	.word	0x20000bbe
 8008584:	08013bc4 	.word	0x08013bc4
 8008588:	20000bbf 	.word	0x20000bbf
 800858c:	08013bd8 	.word	0x08013bd8

08008590 <astronode_send_geo_wr>:

void astronode_send_geo_wr(int32_t latitude, int32_t longitude)
{
 8008590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008592:	b0e7      	sub	sp, #412	; 0x19c
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
    astronode_app_msg_t request = {0};
 800859a:	24d0      	movs	r4, #208	; 0xd0
 800859c:	193b      	adds	r3, r7, r4
 800859e:	0018      	movs	r0, r3
 80085a0:	23c6      	movs	r3, #198	; 0xc6
 80085a2:	001a      	movs	r2, r3
 80085a4:	2100      	movs	r1, #0
 80085a6:	f004 f95f 	bl	800c868 <memset>
    astronode_app_msg_t answer = {0};
 80085aa:	4b56      	ldr	r3, [pc, #344]	; (8008704 <astronode_send_geo_wr+0x174>)
 80085ac:	26cc      	movs	r6, #204	; 0xcc
 80085ae:	0076      	lsls	r6, r6, #1
 80085b0:	199b      	adds	r3, r3, r6
 80085b2:	19db      	adds	r3, r3, r7
 80085b4:	0018      	movs	r0, r3
 80085b6:	23c6      	movs	r3, #198	; 0xc6
 80085b8:	001a      	movs	r2, r3
 80085ba:	2100      	movs	r1, #0
 80085bc:	f004 f954 	bl	800c868 <memset>

    request.op_code = ASTRONODE_OP_CODE_GEO_WR;
 80085c0:	193b      	adds	r3, r7, r4
 80085c2:	2235      	movs	r2, #53	; 0x35
 80085c4:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) latitude;
 80085c6:	193b      	adds	r3, r7, r4
 80085c8:	22c4      	movs	r2, #196	; 0xc4
 80085ca:	5a9b      	ldrh	r3, [r3, r2]
 80085cc:	1c5a      	adds	r2, r3, #1
 80085ce:	b290      	uxth	r0, r2
 80085d0:	193a      	adds	r2, r7, r4
 80085d2:	21c4      	movs	r1, #196	; 0xc4
 80085d4:	5250      	strh	r0, [r2, r1]
 80085d6:	0019      	movs	r1, r3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	b2da      	uxtb	r2, r3
 80085dc:	193b      	adds	r3, r7, r4
 80085de:	185b      	adds	r3, r3, r1
 80085e0:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 8);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	1218      	asrs	r0, r3, #8
 80085e6:	0025      	movs	r5, r4
 80085e8:	197b      	adds	r3, r7, r5
 80085ea:	22c4      	movs	r2, #196	; 0xc4
 80085ec:	5a9b      	ldrh	r3, [r3, r2]
 80085ee:	1c5a      	adds	r2, r3, #1
 80085f0:	b294      	uxth	r4, r2
 80085f2:	197a      	adds	r2, r7, r5
 80085f4:	21c4      	movs	r1, #196	; 0xc4
 80085f6:	5254      	strh	r4, [r2, r1]
 80085f8:	0019      	movs	r1, r3
 80085fa:	b2c2      	uxtb	r2, r0
 80085fc:	002c      	movs	r4, r5
 80085fe:	193b      	adds	r3, r7, r4
 8008600:	185b      	adds	r3, r3, r1
 8008602:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 16);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	1418      	asrs	r0, r3, #16
 8008608:	0025      	movs	r5, r4
 800860a:	197b      	adds	r3, r7, r5
 800860c:	22c4      	movs	r2, #196	; 0xc4
 800860e:	5a9b      	ldrh	r3, [r3, r2]
 8008610:	1c5a      	adds	r2, r3, #1
 8008612:	b294      	uxth	r4, r2
 8008614:	197a      	adds	r2, r7, r5
 8008616:	21c4      	movs	r1, #196	; 0xc4
 8008618:	5254      	strh	r4, [r2, r1]
 800861a:	0019      	movs	r1, r3
 800861c:	b2c2      	uxtb	r2, r0
 800861e:	002c      	movs	r4, r5
 8008620:	193b      	adds	r3, r7, r4
 8008622:	185b      	adds	r3, r3, r1
 8008624:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 24);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	1618      	asrs	r0, r3, #24
 800862a:	0025      	movs	r5, r4
 800862c:	197b      	adds	r3, r7, r5
 800862e:	22c4      	movs	r2, #196	; 0xc4
 8008630:	5a9b      	ldrh	r3, [r3, r2]
 8008632:	1c5a      	adds	r2, r3, #1
 8008634:	b294      	uxth	r4, r2
 8008636:	197a      	adds	r2, r7, r5
 8008638:	21c4      	movs	r1, #196	; 0xc4
 800863a:	5254      	strh	r4, [r2, r1]
 800863c:	0019      	movs	r1, r3
 800863e:	b2c2      	uxtb	r2, r0
 8008640:	002c      	movs	r4, r5
 8008642:	193b      	adds	r3, r7, r4
 8008644:	185b      	adds	r3, r3, r1
 8008646:	705a      	strb	r2, [r3, #1]

    request.p_payload[request.payload_len++] = (uint8_t) longitude;
 8008648:	193b      	adds	r3, r7, r4
 800864a:	22c4      	movs	r2, #196	; 0xc4
 800864c:	5a9b      	ldrh	r3, [r3, r2]
 800864e:	1c5a      	adds	r2, r3, #1
 8008650:	b290      	uxth	r0, r2
 8008652:	193a      	adds	r2, r7, r4
 8008654:	21c4      	movs	r1, #196	; 0xc4
 8008656:	5250      	strh	r0, [r2, r1]
 8008658:	0019      	movs	r1, r3
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	b2da      	uxtb	r2, r3
 800865e:	193b      	adds	r3, r7, r4
 8008660:	185b      	adds	r3, r3, r1
 8008662:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 8);
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	1218      	asrs	r0, r3, #8
 8008668:	0025      	movs	r5, r4
 800866a:	197b      	adds	r3, r7, r5
 800866c:	22c4      	movs	r2, #196	; 0xc4
 800866e:	5a9b      	ldrh	r3, [r3, r2]
 8008670:	1c5a      	adds	r2, r3, #1
 8008672:	b294      	uxth	r4, r2
 8008674:	197a      	adds	r2, r7, r5
 8008676:	21c4      	movs	r1, #196	; 0xc4
 8008678:	5254      	strh	r4, [r2, r1]
 800867a:	0019      	movs	r1, r3
 800867c:	b2c2      	uxtb	r2, r0
 800867e:	002c      	movs	r4, r5
 8008680:	193b      	adds	r3, r7, r4
 8008682:	185b      	adds	r3, r3, r1
 8008684:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 16);
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	1418      	asrs	r0, r3, #16
 800868a:	0025      	movs	r5, r4
 800868c:	197b      	adds	r3, r7, r5
 800868e:	22c4      	movs	r2, #196	; 0xc4
 8008690:	5a9b      	ldrh	r3, [r3, r2]
 8008692:	1c5a      	adds	r2, r3, #1
 8008694:	b294      	uxth	r4, r2
 8008696:	197a      	adds	r2, r7, r5
 8008698:	21c4      	movs	r1, #196	; 0xc4
 800869a:	5254      	strh	r4, [r2, r1]
 800869c:	0019      	movs	r1, r3
 800869e:	b2c2      	uxtb	r2, r0
 80086a0:	002c      	movs	r4, r5
 80086a2:	193b      	adds	r3, r7, r4
 80086a4:	185b      	adds	r3, r3, r1
 80086a6:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 24);
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	1618      	asrs	r0, r3, #24
 80086ac:	0025      	movs	r5, r4
 80086ae:	197b      	adds	r3, r7, r5
 80086b0:	22c4      	movs	r2, #196	; 0xc4
 80086b2:	5a9b      	ldrh	r3, [r3, r2]
 80086b4:	1c5a      	adds	r2, r3, #1
 80086b6:	b294      	uxth	r4, r2
 80086b8:	197a      	adds	r2, r7, r5
 80086ba:	21c4      	movs	r1, #196	; 0xc4
 80086bc:	5254      	strh	r4, [r2, r1]
 80086be:	0019      	movs	r1, r3
 80086c0:	b2c2      	uxtb	r2, r0
 80086c2:	0028      	movs	r0, r5
 80086c4:	183b      	adds	r3, r7, r0
 80086c6:	185b      	adds	r3, r3, r1
 80086c8:	705a      	strb	r2, [r3, #1]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80086ca:	2308      	movs	r3, #8
 80086cc:	18fa      	adds	r2, r7, r3
 80086ce:	183b      	adds	r3, r7, r0
 80086d0:	0011      	movs	r1, r2
 80086d2:	0018      	movs	r0, r3
 80086d4:	f000 ff10 	bl	80094f8 <astronode_transport_send_receive>
 80086d8:	0003      	movs	r3, r0
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d10e      	bne.n	80086fc <astronode_send_geo_wr+0x16c>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_GEO_WA)
 80086de:	4b09      	ldr	r3, [pc, #36]	; (8008704 <astronode_send_geo_wr+0x174>)
 80086e0:	199b      	adds	r3, r3, r6
 80086e2:	19db      	adds	r3, r3, r7
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	2bb5      	cmp	r3, #181	; 0xb5
 80086e8:	d104      	bne.n	80086f4 <astronode_send_geo_wr+0x164>
        {
            send_debug_logs("Geolocation values were set successfully.");
 80086ea:	4b07      	ldr	r3, [pc, #28]	; (8008708 <astronode_send_geo_wr+0x178>)
 80086ec:	0018      	movs	r0, r3
 80086ee:	f7fa fce9 	bl	80030c4 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the geolocation information.");
        }
    }
}
 80086f2:	e003      	b.n	80086fc <astronode_send_geo_wr+0x16c>
            send_debug_logs("Failed to set the geolocation information.");
 80086f4:	4b05      	ldr	r3, [pc, #20]	; (800870c <astronode_send_geo_wr+0x17c>)
 80086f6:	0018      	movs	r0, r3
 80086f8:	f7fa fce4 	bl	80030c4 <send_debug_logs>
}
 80086fc:	46c0      	nop			; (mov r8, r8)
 80086fe:	46bd      	mov	sp, r7
 8008700:	b067      	add	sp, #412	; 0x19c
 8008702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008704:	fffffe70 	.word	0xfffffe70
 8008708:	08013bec 	.word	0x08013bec
 800870c:	08013c18 	.word	0x08013c18

08008710 <astronode_send_pld_er>:
        }
    }
}

bool astronode_send_pld_er ( uint16_t payload_id , char *p_payload , uint16_t payload_length )
{
 8008710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008712:	b0fb      	sub	sp, #492	; 0x1ec
 8008714:	af00      	add	r7, sp, #0
 8008716:	6039      	str	r1, [r7, #0]
 8008718:	0011      	movs	r1, r2
 800871a:	4b4a      	ldr	r3, [pc, #296]	; (8008844 <astronode_send_pld_er+0x134>)
 800871c:	26f4      	movs	r6, #244	; 0xf4
 800871e:	0076      	lsls	r6, r6, #1
 8008720:	199b      	adds	r3, r3, r6
 8008722:	19db      	adds	r3, r3, r7
 8008724:	1c02      	adds	r2, r0, #0
 8008726:	801a      	strh	r2, [r3, #0]
 8008728:	4b47      	ldr	r3, [pc, #284]	; (8008848 <astronode_send_pld_er+0x138>)
 800872a:	199b      	adds	r3, r3, r6
 800872c:	19db      	adds	r3, r3, r7
 800872e:	1c0a      	adds	r2, r1, #0
 8008730:	801a      	strh	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8008732:	2490      	movs	r4, #144	; 0x90
 8008734:	0064      	lsls	r4, r4, #1
 8008736:	193b      	adds	r3, r7, r4
 8008738:	0018      	movs	r0, r3
 800873a:	23c6      	movs	r3, #198	; 0xc6
 800873c:	001a      	movs	r2, r3
 800873e:	2100      	movs	r1, #0
 8008740:	f004 f892 	bl	800c868 <memset>
    astronode_app_msg_t answer = {0};
 8008744:	4b41      	ldr	r3, [pc, #260]	; (800884c <astronode_send_pld_er+0x13c>)
 8008746:	199b      	adds	r3, r3, r6
 8008748:	19db      	adds	r3, r3, r7
 800874a:	0018      	movs	r0, r3
 800874c:	23c6      	movs	r3, #198	; 0xc6
 800874e:	001a      	movs	r2, r3
 8008750:	2100      	movs	r1, #0
 8008752:	f004 f889 	bl	800c868 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_ER;
 8008756:	193b      	adds	r3, r7, r4
 8008758:	2225      	movs	r2, #37	; 0x25
 800875a:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) payload_id;
 800875c:	193b      	adds	r3, r7, r4
 800875e:	22c4      	movs	r2, #196	; 0xc4
 8008760:	5a9b      	ldrh	r3, [r3, r2]
 8008762:	1c5a      	adds	r2, r3, #1
 8008764:	b290      	uxth	r0, r2
 8008766:	193a      	adds	r2, r7, r4
 8008768:	21c4      	movs	r1, #196	; 0xc4
 800876a:	5250      	strh	r0, [r2, r1]
 800876c:	0019      	movs	r1, r3
 800876e:	4b35      	ldr	r3, [pc, #212]	; (8008844 <astronode_send_pld_er+0x134>)
 8008770:	199b      	adds	r3, r3, r6
 8008772:	19db      	adds	r3, r3, r7
 8008774:	881b      	ldrh	r3, [r3, #0]
 8008776:	b2da      	uxtb	r2, r3
 8008778:	193b      	adds	r3, r7, r4
 800877a:	185b      	adds	r3, r3, r1
 800877c:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (payload_id >> 8);
 800877e:	4b31      	ldr	r3, [pc, #196]	; (8008844 <astronode_send_pld_er+0x134>)
 8008780:	199b      	adds	r3, r3, r6
 8008782:	19db      	adds	r3, r3, r7
 8008784:	881b      	ldrh	r3, [r3, #0]
 8008786:	0a1b      	lsrs	r3, r3, #8
 8008788:	b298      	uxth	r0, r3
 800878a:	0025      	movs	r5, r4
 800878c:	197b      	adds	r3, r7, r5
 800878e:	22c4      	movs	r2, #196	; 0xc4
 8008790:	5a9b      	ldrh	r3, [r3, r2]
 8008792:	1c5a      	adds	r2, r3, #1
 8008794:	b294      	uxth	r4, r2
 8008796:	197a      	adds	r2, r7, r5
 8008798:	21c4      	movs	r1, #196	; 0xc4
 800879a:	5254      	strh	r4, [r2, r1]
 800879c:	0019      	movs	r1, r3
 800879e:	b2c2      	uxtb	r2, r0
 80087a0:	002c      	movs	r4, r5
 80087a2:	193b      	adds	r3, r7, r4
 80087a4:	185b      	adds	r3, r3, r1
 80087a6:	705a      	strb	r2, [r3, #1]

    memcpy(&request.p_payload[request.payload_len], p_payload, payload_length);
 80087a8:	193b      	adds	r3, r7, r4
 80087aa:	22c4      	movs	r2, #196	; 0xc4
 80087ac:	5a9b      	ldrh	r3, [r3, r2]
 80087ae:	001a      	movs	r2, r3
 80087b0:	193b      	adds	r3, r7, r4
 80087b2:	189b      	adds	r3, r3, r2
 80087b4:	1c58      	adds	r0, r3, #1
 80087b6:	4b24      	ldr	r3, [pc, #144]	; (8008848 <astronode_send_pld_er+0x138>)
 80087b8:	199b      	adds	r3, r3, r6
 80087ba:	19db      	adds	r3, r3, r7
 80087bc:	881a      	ldrh	r2, [r3, #0]
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	0019      	movs	r1, r3
 80087c2:	f004 f936 	bl	800ca32 <memcpy>
    request.payload_len = 2 + payload_length;
 80087c6:	4b20      	ldr	r3, [pc, #128]	; (8008848 <astronode_send_pld_er+0x138>)
 80087c8:	199b      	adds	r3, r3, r6
 80087ca:	19db      	adds	r3, r3, r7
 80087cc:	881b      	ldrh	r3, [r3, #0]
 80087ce:	3302      	adds	r3, #2
 80087d0:	b299      	uxth	r1, r3
 80087d2:	193b      	adds	r3, r7, r4
 80087d4:	22c4      	movs	r2, #196	; 0xc4
 80087d6:	5299      	strh	r1, [r3, r2]
    char s[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 80087d8:	2358      	movs	r3, #88	; 0x58
 80087da:	18fa      	adds	r2, r7, r3
 80087dc:	193b      	adds	r3, r7, r4
 80087de:	0011      	movs	r1, r2
 80087e0:	0018      	movs	r0, r3
 80087e2:	f000 fe89 	bl	80094f8 <astronode_transport_send_receive>
 80087e6:	0003      	movs	r3, r0
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d125      	bne.n	8008838 <astronode_send_pld_er+0x128>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_EA)
 80087ec:	4b17      	ldr	r3, [pc, #92]	; (800884c <astronode_send_pld_er+0x13c>)
 80087ee:	199b      	adds	r3, r3, r6
 80087f0:	19db      	adds	r3, r3, r7
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	2ba5      	cmp	r3, #165	; 0xa5
 80087f6:	d10f      	bne.n	8008818 <astronode_send_pld_er+0x108>
        {
        	sprintf ( s , "astronode_application: payload %d queued." , payload_id ) ;
 80087f8:	4b12      	ldr	r3, [pc, #72]	; (8008844 <astronode_send_pld_er+0x134>)
 80087fa:	199b      	adds	r3, r3, r6
 80087fc:	19db      	adds	r3, r3, r7
 80087fe:	881a      	ldrh	r2, [r3, #0]
 8008800:	4913      	ldr	r1, [pc, #76]	; (8008850 <astronode_send_pld_er+0x140>)
 8008802:	2408      	movs	r4, #8
 8008804:	193b      	adds	r3, r7, r4
 8008806:	0018      	movs	r0, r3
 8008808:	f003 ff98 	bl	800c73c <sprintf>
            send_debug_logs ( s ) ;
 800880c:	193b      	adds	r3, r7, r4
 800880e:	0018      	movs	r0, r3
 8008810:	f7fa fc58 	bl	80030c4 <send_debug_logs>
            return true ;
 8008814:	2301      	movs	r3, #1
 8008816:	e010      	b.n	800883a <astronode_send_pld_er+0x12a>
        }
        else
        {
            sprintf ( s , "astronode_application: payload %d not queued." , payload_id ) ;
 8008818:	4b0a      	ldr	r3, [pc, #40]	; (8008844 <astronode_send_pld_er+0x134>)
 800881a:	22f4      	movs	r2, #244	; 0xf4
 800881c:	0052      	lsls	r2, r2, #1
 800881e:	189b      	adds	r3, r3, r2
 8008820:	19db      	adds	r3, r3, r7
 8008822:	881a      	ldrh	r2, [r3, #0]
 8008824:	490b      	ldr	r1, [pc, #44]	; (8008854 <astronode_send_pld_er+0x144>)
 8008826:	2408      	movs	r4, #8
 8008828:	193b      	adds	r3, r7, r4
 800882a:	0018      	movs	r0, r3
 800882c:	f003 ff86 	bl	800c73c <sprintf>
            send_debug_logs ( s ) ;
 8008830:	193b      	adds	r3, r7, r4
 8008832:	0018      	movs	r0, r3
 8008834:	f7fa fc46 	bl	80030c4 <send_debug_logs>
        }
    }
    return false ;
 8008838:	2300      	movs	r3, #0
}
 800883a:	0018      	movs	r0, r3
 800883c:	46bd      	mov	sp, r7
 800883e:	b07b      	add	sp, #492	; 0x1ec
 8008840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008842:	46c0      	nop			; (mov r8, r8)
 8008844:	fffffe1e 	.word	0xfffffe1e
 8008848:	fffffe1c 	.word	0xfffffe1c
 800884c:	fffffe70 	.word	0xfffffe70
 8008850:	08013c90 	.word	0x08013c90
 8008854:	08013cbc 	.word	0x08013cbc

08008858 <astronode_send_pld_fr>:

void astronode_send_pld_fr(void)
{
 8008858:	b5b0      	push	{r4, r5, r7, lr}
 800885a:	b0e4      	sub	sp, #400	; 0x190
 800885c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800885e:	24c8      	movs	r4, #200	; 0xc8
 8008860:	193b      	adds	r3, r7, r4
 8008862:	0018      	movs	r0, r3
 8008864:	23c6      	movs	r3, #198	; 0xc6
 8008866:	001a      	movs	r2, r3
 8008868:	2100      	movs	r1, #0
 800886a:	f003 fffd 	bl	800c868 <memset>
    astronode_app_msg_t answer = {0};
 800886e:	4b15      	ldr	r3, [pc, #84]	; (80088c4 <astronode_send_pld_fr+0x6c>)
 8008870:	25c8      	movs	r5, #200	; 0xc8
 8008872:	006d      	lsls	r5, r5, #1
 8008874:	195b      	adds	r3, r3, r5
 8008876:	19db      	adds	r3, r3, r7
 8008878:	0018      	movs	r0, r3
 800887a:	23c6      	movs	r3, #198	; 0xc6
 800887c:	001a      	movs	r2, r3
 800887e:	2100      	movs	r1, #0
 8008880:	f003 fff2 	bl	800c868 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_FR;
 8008884:	193b      	adds	r3, r7, r4
 8008886:	2227      	movs	r2, #39	; 0x27
 8008888:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800888a:	003a      	movs	r2, r7
 800888c:	193b      	adds	r3, r7, r4
 800888e:	0011      	movs	r1, r2
 8008890:	0018      	movs	r0, r3
 8008892:	f000 fe31 	bl	80094f8 <astronode_transport_send_receive>
 8008896:	0003      	movs	r3, r0
 8008898:	2b01      	cmp	r3, #1
 800889a:	d10e      	bne.n	80088ba <astronode_send_pld_fr+0x62>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_FA)
 800889c:	4b09      	ldr	r3, [pc, #36]	; (80088c4 <astronode_send_pld_fr+0x6c>)
 800889e:	195b      	adds	r3, r3, r5
 80088a0:	19db      	adds	r3, r3, r7
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	2ba7      	cmp	r3, #167	; 0xa7
 80088a6:	d104      	bne.n	80088b2 <astronode_send_pld_fr+0x5a>
        {
            send_debug_logs("astronode_application: payload queue has been cleared.");
 80088a8:	4b07      	ldr	r3, [pc, #28]	; (80088c8 <astronode_send_pld_fr+0x70>)
 80088aa:	0018      	movs	r0, r3
 80088ac:	f7fa fc0a 	bl	80030c4 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
        }
    }
}
 80088b0:	e003      	b.n	80088ba <astronode_send_pld_fr+0x62>
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
 80088b2:	4b06      	ldr	r3, [pc, #24]	; (80088cc <astronode_send_pld_fr+0x74>)
 80088b4:	0018      	movs	r0, r3
 80088b6:	f7fa fc05 	bl	80030c4 <send_debug_logs>
}
 80088ba:	46c0      	nop			; (mov r8, r8)
 80088bc:	46bd      	mov	sp, r7
 80088be:	b064      	add	sp, #400	; 0x190
 80088c0:	bdb0      	pop	{r4, r5, r7, pc}
 80088c2:	46c0      	nop			; (mov r8, r8)
 80088c4:	fffffe70 	.word	0xfffffe70
 80088c8:	08013cec 	.word	0x08013cec
 80088cc:	08013d24 	.word	0x08013d24

080088d0 <astronode_send_res_cr>:

void astronode_send_res_cr(void)
{
 80088d0:	b5b0      	push	{r4, r5, r7, lr}
 80088d2:	b0e4      	sub	sp, #400	; 0x190
 80088d4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80088d6:	24c8      	movs	r4, #200	; 0xc8
 80088d8:	193b      	adds	r3, r7, r4
 80088da:	0018      	movs	r0, r3
 80088dc:	23c6      	movs	r3, #198	; 0xc6
 80088de:	001a      	movs	r2, r3
 80088e0:	2100      	movs	r1, #0
 80088e2:	f003 ffc1 	bl	800c868 <memset>
    astronode_app_msg_t answer = {0};
 80088e6:	4b16      	ldr	r3, [pc, #88]	; (8008940 <astronode_send_res_cr+0x70>)
 80088e8:	25c8      	movs	r5, #200	; 0xc8
 80088ea:	006d      	lsls	r5, r5, #1
 80088ec:	195b      	adds	r3, r3, r5
 80088ee:	19db      	adds	r3, r3, r7
 80088f0:	0018      	movs	r0, r3
 80088f2:	23c6      	movs	r3, #198	; 0xc6
 80088f4:	001a      	movs	r2, r3
 80088f6:	2100      	movs	r1, #0
 80088f8:	f003 ffb6 	bl	800c868 <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 80088fc:	193b      	adds	r3, r7, r4
 80088fe:	2255      	movs	r2, #85	; 0x55
 8008900:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008902:	003a      	movs	r2, r7
 8008904:	193b      	adds	r3, r7, r4
 8008906:	0011      	movs	r1, r2
 8008908:	0018      	movs	r0, r3
 800890a:	f000 fdf5 	bl	80094f8 <astronode_transport_send_receive>
 800890e:	0003      	movs	r3, r0
 8008910:	2b01      	cmp	r3, #1
 8008912:	d111      	bne.n	8008938 <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 8008914:	4b0a      	ldr	r3, [pc, #40]	; (8008940 <astronode_send_res_cr+0x70>)
 8008916:	195b      	adds	r3, r3, r5
 8008918:	19db      	adds	r3, r3, r7
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	2bd5      	cmp	r3, #213	; 0xd5
 800891e:	d107      	bne.n	8008930 <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 8008920:	4b08      	ldr	r3, [pc, #32]	; (8008944 <astronode_send_res_cr+0x74>)
 8008922:	2200      	movs	r2, #0
 8008924:	701a      	strb	r2, [r3, #0]
            send_debug_logs("astronode_application: The reset has been cleared.");
 8008926:	4b08      	ldr	r3, [pc, #32]	; (8008948 <astronode_send_res_cr+0x78>)
 8008928:	0018      	movs	r0, r3
 800892a:	f7fa fbcb 	bl	80030c4 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No reset to clear.");
        }
    }
}
 800892e:	e003      	b.n	8008938 <astronode_send_res_cr+0x68>
            send_debug_logs("astronode_application: No reset to clear.");
 8008930:	4b06      	ldr	r3, [pc, #24]	; (800894c <astronode_send_res_cr+0x7c>)
 8008932:	0018      	movs	r0, r3
 8008934:	f7fa fbc6 	bl	80030c4 <send_debug_logs>
}
 8008938:	46c0      	nop			; (mov r8, r8)
 800893a:	46bd      	mov	sp, r7
 800893c:	b064      	add	sp, #400	; 0x190
 800893e:	bdb0      	pop	{r4, r5, r7, pc}
 8008940:	fffffe70 	.word	0xfffffe70
 8008944:	20000bbd 	.word	0x20000bbd
 8008948:	08013d60 	.word	0x08013d60
 800894c:	08013d94 	.word	0x08013d94

08008950 <astronode_send_rtc_rr>:

uint32_t astronode_send_rtc_rr ( void )
{
 8008950:	b5b0      	push	{r4, r5, r7, lr}
 8008952:	b0fa      	sub	sp, #488	; 0x1e8
 8008954:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0} ;
 8008956:	258e      	movs	r5, #142	; 0x8e
 8008958:	006d      	lsls	r5, r5, #1
 800895a:	197b      	adds	r3, r7, r5
 800895c:	0018      	movs	r0, r3
 800895e:	23c6      	movs	r3, #198	; 0xc6
 8008960:	001a      	movs	r2, r3
 8008962:	2100      	movs	r1, #0
 8008964:	f003 ff80 	bl	800c868 <memset>
    astronode_app_msg_t answer = {0} ;
 8008968:	4b28      	ldr	r3, [pc, #160]	; (8008a0c <astronode_send_rtc_rr+0xbc>)
 800896a:	24f4      	movs	r4, #244	; 0xf4
 800896c:	0064      	lsls	r4, r4, #1
 800896e:	191b      	adds	r3, r3, r4
 8008970:	19db      	adds	r3, r3, r7
 8008972:	0018      	movs	r0, r3
 8008974:	23c6      	movs	r3, #198	; 0xc6
 8008976:	001a      	movs	r2, r3
 8008978:	2100      	movs	r1, #0
 800897a:	f003 ff75 	bl	800c868 <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR ;
 800897e:	197b      	adds	r3, r7, r5
 8008980:	2217      	movs	r2, #23
 8008982:	701a      	strb	r2, [r3, #0]

    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 8008984:	2354      	movs	r3, #84	; 0x54
 8008986:	18fa      	adds	r2, r7, r3
 8008988:	197b      	adds	r3, r7, r5
 800898a:	0011      	movs	r1, r2
 800898c:	0018      	movs	r0, r3
 800898e:	f000 fdb3 	bl	80094f8 <astronode_transport_send_receive>
 8008992:	0003      	movs	r3, r0
 8008994:	2b01      	cmp	r3, #1
 8008996:	d133      	bne.n	8008a00 <astronode_send_rtc_rr+0xb0>
    {
        if ( answer.op_code == ASTRONODE_OP_CODE_RTC_RA )
 8008998:	4b1c      	ldr	r3, [pc, #112]	; (8008a0c <astronode_send_rtc_rr+0xbc>)
 800899a:	0021      	movs	r1, r4
 800899c:	185b      	adds	r3, r3, r1
 800899e:	19db      	adds	r3, r3, r7
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	2b97      	cmp	r3, #151	; 0x97
 80089a4:	d128      	bne.n	80089f8 <astronode_send_rtc_rr+0xa8>
        {
            uint32_t rtc_time = answer.p_payload[0]
 80089a6:	4b19      	ldr	r3, [pc, #100]	; (8008a0c <astronode_send_rtc_rr+0xbc>)
 80089a8:	185b      	adds	r3, r3, r1
 80089aa:	19db      	adds	r3, r3, r7
 80089ac:	785b      	ldrb	r3, [r3, #1]
 80089ae:	001a      	movs	r2, r3
                                        + ( answer.p_payload[1] << 8 )
 80089b0:	4b16      	ldr	r3, [pc, #88]	; (8008a0c <astronode_send_rtc_rr+0xbc>)
 80089b2:	185b      	adds	r3, r3, r1
 80089b4:	19db      	adds	r3, r3, r7
 80089b6:	789b      	ldrb	r3, [r3, #2]
 80089b8:	021b      	lsls	r3, r3, #8
 80089ba:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[2] << 16 )
 80089bc:	4b13      	ldr	r3, [pc, #76]	; (8008a0c <astronode_send_rtc_rr+0xbc>)
 80089be:	185b      	adds	r3, r3, r1
 80089c0:	19db      	adds	r3, r3, r7
 80089c2:	78db      	ldrb	r3, [r3, #3]
 80089c4:	041b      	lsls	r3, r3, #16
 80089c6:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[3] << 24 ) ;
 80089c8:	4b10      	ldr	r3, [pc, #64]	; (8008a0c <astronode_send_rtc_rr+0xbc>)
 80089ca:	185b      	adds	r3, r3, r1
 80089cc:	19db      	adds	r3, r3, r7
 80089ce:	791b      	ldrb	r3, [r3, #4]
 80089d0:	061b      	lsls	r3, r3, #24
 80089d2:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 80089d4:	24f2      	movs	r4, #242	; 0xf2
 80089d6:	0064      	lsls	r4, r4, #1
 80089d8:	193a      	adds	r2, r7, r4
 80089da:	6013      	str	r3, [r2, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
            sprintf ( str , "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds." , rtc_time ) ;
 80089dc:	193b      	adds	r3, r7, r4
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	490b      	ldr	r1, [pc, #44]	; (8008a10 <astronode_send_rtc_rr+0xc0>)
 80089e2:	1d3b      	adds	r3, r7, #4
 80089e4:	0018      	movs	r0, r3
 80089e6:	f003 fea9 	bl	800c73c <sprintf>
            send_debug_logs ( str ) ;
 80089ea:	1d3b      	adds	r3, r7, #4
 80089ec:	0018      	movs	r0, r3
 80089ee:	f7fa fb69 	bl	80030c4 <send_debug_logs>
            return rtc_time ;
 80089f2:	193b      	adds	r3, r7, r4
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	e004      	b.n	8008a02 <astronode_send_rtc_rr+0xb2>
        }
        else
        {
            send_debug_logs ( "Failed to read rtc time." ) ;
 80089f8:	4b06      	ldr	r3, [pc, #24]	; (8008a14 <astronode_send_rtc_rr+0xc4>)
 80089fa:	0018      	movs	r0, r3
 80089fc:	f7fa fb62 	bl	80030c4 <send_debug_logs>
        }
    }
    return 0 ;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	0018      	movs	r0, r3
 8008a04:	46bd      	mov	sp, r7
 8008a06:	b07a      	add	sp, #488	; 0x1e8
 8008a08:	bdb0      	pop	{r4, r5, r7, pc}
 8008a0a:	46c0      	nop			; (mov r8, r8)
 8008a0c:	fffffe6c 	.word	0xfffffe6c
 8008a10:	08013dc0 	.word	0x08013dc0
 8008a14:	08013e00 	.word	0x08013e00

08008a18 <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 8008a18:	b5b0      	push	{r4, r5, r7, lr}
 8008a1a:	b0f8      	sub	sp, #480	; 0x1e0
 8008a1c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008a1e:	258c      	movs	r5, #140	; 0x8c
 8008a20:	006d      	lsls	r5, r5, #1
 8008a22:	197b      	adds	r3, r7, r5
 8008a24:	0018      	movs	r0, r3
 8008a26:	23c6      	movs	r3, #198	; 0xc6
 8008a28:	001a      	movs	r2, r3
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	f003 ff1c 	bl	800c868 <memset>
    astronode_app_msg_t answer = {0};
 8008a30:	4b21      	ldr	r3, [pc, #132]	; (8008ab8 <astronode_send_sak_rr+0xa0>)
 8008a32:	24f0      	movs	r4, #240	; 0xf0
 8008a34:	0064      	lsls	r4, r4, #1
 8008a36:	191b      	adds	r3, r3, r4
 8008a38:	19db      	adds	r3, r3, r7
 8008a3a:	0018      	movs	r0, r3
 8008a3c:	23c6      	movs	r3, #198	; 0xc6
 8008a3e:	001a      	movs	r2, r3
 8008a40:	2100      	movs	r1, #0
 8008a42:	f003 ff11 	bl	800c868 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 8008a46:	197b      	adds	r3, r7, r5
 8008a48:	2245      	movs	r2, #69	; 0x45
 8008a4a:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008a4c:	2350      	movs	r3, #80	; 0x50
 8008a4e:	18fa      	adds	r2, r7, r3
 8008a50:	197b      	adds	r3, r7, r5
 8008a52:	0011      	movs	r1, r2
 8008a54:	0018      	movs	r0, r3
 8008a56:	f000 fd4f 	bl	80094f8 <astronode_transport_send_receive>
 8008a5a:	0003      	movs	r3, r0
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d126      	bne.n	8008aae <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 8008a60:	4b15      	ldr	r3, [pc, #84]	; (8008ab8 <astronode_send_sak_rr+0xa0>)
 8008a62:	191b      	adds	r3, r3, r4
 8008a64:	19db      	adds	r3, r3, r7
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	2bc5      	cmp	r3, #197	; 0xc5
 8008a6a:	d11c      	bne.n	8008aa6 <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 8008a6c:	4b12      	ldr	r3, [pc, #72]	; (8008ab8 <astronode_send_sak_rr+0xa0>)
 8008a6e:	191b      	adds	r3, r3, r4
 8008a70:	19db      	adds	r3, r3, r7
 8008a72:	785b      	ldrb	r3, [r3, #1]
 8008a74:	b299      	uxth	r1, r3
 8008a76:	4b10      	ldr	r3, [pc, #64]	; (8008ab8 <astronode_send_sak_rr+0xa0>)
 8008a78:	191b      	adds	r3, r3, r4
 8008a7a:	19db      	adds	r3, r3, r7
 8008a7c:	789b      	ldrb	r3, [r3, #2]
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	021b      	lsls	r3, r3, #8
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	20ef      	movs	r0, #239	; 0xef
 8008a86:	0040      	lsls	r0, r0, #1
 8008a88:	183b      	adds	r3, r7, r0
 8008a8a:	188a      	adds	r2, r1, r2
 8008a8c:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 8008a8e:	183b      	adds	r3, r7, r0
 8008a90:	881a      	ldrh	r2, [r3, #0]
 8008a92:	490a      	ldr	r1, [pc, #40]	; (8008abc <astronode_send_sak_rr+0xa4>)
 8008a94:	003b      	movs	r3, r7
 8008a96:	0018      	movs	r0, r3
 8008a98:	f003 fe50 	bl	800c73c <sprintf>
            send_debug_logs(str);
 8008a9c:	003b      	movs	r3, r7
 8008a9e:	0018      	movs	r0, r3
 8008aa0:	f7fa fb10 	bl	80030c4 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No acknowledgment available.");
        }
    }
}
 8008aa4:	e003      	b.n	8008aae <astronode_send_sak_rr+0x96>
            send_debug_logs("astronode_application: No acknowledgment available.");
 8008aa6:	4b06      	ldr	r3, [pc, #24]	; (8008ac0 <astronode_send_sak_rr+0xa8>)
 8008aa8:	0018      	movs	r0, r3
 8008aaa:	f7fa fb0b 	bl	80030c4 <send_debug_logs>
}
 8008aae:	46c0      	nop			; (mov r8, r8)
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	b078      	add	sp, #480	; 0x1e0
 8008ab4:	bdb0      	pop	{r4, r5, r7, pc}
 8008ab6:	46c0      	nop			; (mov r8, r8)
 8008ab8:	fffffe70 	.word	0xfffffe70
 8008abc:	08013e1c 	.word	0x08013e1c
 8008ac0:	08013e48 	.word	0x08013e48

08008ac4 <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 8008ac4:	b5b0      	push	{r4, r5, r7, lr}
 8008ac6:	b0e4      	sub	sp, #400	; 0x190
 8008ac8:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008aca:	24c8      	movs	r4, #200	; 0xc8
 8008acc:	193b      	adds	r3, r7, r4
 8008ace:	0018      	movs	r0, r3
 8008ad0:	23c6      	movs	r3, #198	; 0xc6
 8008ad2:	001a      	movs	r2, r3
 8008ad4:	2100      	movs	r1, #0
 8008ad6:	f003 fec7 	bl	800c868 <memset>
    astronode_app_msg_t answer = {0};
 8008ada:	4b16      	ldr	r3, [pc, #88]	; (8008b34 <astronode_send_sak_cr+0x70>)
 8008adc:	25c8      	movs	r5, #200	; 0xc8
 8008ade:	006d      	lsls	r5, r5, #1
 8008ae0:	195b      	adds	r3, r3, r5
 8008ae2:	19db      	adds	r3, r3, r7
 8008ae4:	0018      	movs	r0, r3
 8008ae6:	23c6      	movs	r3, #198	; 0xc6
 8008ae8:	001a      	movs	r2, r3
 8008aea:	2100      	movs	r1, #0
 8008aec:	f003 febc 	bl	800c868 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 8008af0:	193b      	adds	r3, r7, r4
 8008af2:	2246      	movs	r2, #70	; 0x46
 8008af4:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008af6:	003a      	movs	r2, r7
 8008af8:	193b      	adds	r3, r7, r4
 8008afa:	0011      	movs	r1, r2
 8008afc:	0018      	movs	r0, r3
 8008afe:	f000 fcfb 	bl	80094f8 <astronode_transport_send_receive>
 8008b02:	0003      	movs	r3, r0
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d111      	bne.n	8008b2c <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 8008b08:	4b0a      	ldr	r3, [pc, #40]	; (8008b34 <astronode_send_sak_cr+0x70>)
 8008b0a:	195b      	adds	r3, r3, r5
 8008b0c:	19db      	adds	r3, r3, r7
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	2bc6      	cmp	r3, #198	; 0xc6
 8008b12:	d107      	bne.n	8008b24 <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 8008b14:	4b08      	ldr	r3, [pc, #32]	; (8008b38 <astronode_send_sak_cr+0x74>)
 8008b16:	2200      	movs	r2, #0
 8008b18:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 8008b1a:	4b08      	ldr	r3, [pc, #32]	; (8008b3c <astronode_send_sak_cr+0x78>)
 8008b1c:	0018      	movs	r0, r3
 8008b1e:	f7fa fad1 	bl	80030c4 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 8008b22:	e003      	b.n	8008b2c <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 8008b24:	4b06      	ldr	r3, [pc, #24]	; (8008b40 <astronode_send_sak_cr+0x7c>)
 8008b26:	0018      	movs	r0, r3
 8008b28:	f7fa facc 	bl	80030c4 <send_debug_logs>
}
 8008b2c:	46c0      	nop			; (mov r8, r8)
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	b064      	add	sp, #400	; 0x190
 8008b32:	bdb0      	pop	{r4, r5, r7, pc}
 8008b34:	fffffe70 	.word	0xfffffe70
 8008b38:	20000bbc 	.word	0x20000bbc
 8008b3c:	08013e7c 	.word	0x08013e7c
 8008b40:	08013ea4 	.word	0x08013ea4

08008b44 <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 8008b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b46:	b0ed      	sub	sp, #436	; 0x1b4
 8008b48:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008b4a:	21c8      	movs	r1, #200	; 0xc8
 8008b4c:	2318      	movs	r3, #24
 8008b4e:	18cb      	adds	r3, r1, r3
 8008b50:	19db      	adds	r3, r3, r7
 8008b52:	0018      	movs	r0, r3
 8008b54:	23c6      	movs	r3, #198	; 0xc6
 8008b56:	001a      	movs	r2, r3
 8008b58:	2100      	movs	r1, #0
 8008b5a:	f003 fe85 	bl	800c868 <memset>
    astronode_app_msg_t answer = {0};
 8008b5e:	4b4a      	ldr	r3, [pc, #296]	; (8008c88 <astronode_send_mpn_rr+0x144>)
 8008b60:	26cc      	movs	r6, #204	; 0xcc
 8008b62:	0076      	lsls	r6, r6, #1
 8008b64:	199b      	adds	r3, r3, r6
 8008b66:	2218      	movs	r2, #24
 8008b68:	4694      	mov	ip, r2
 8008b6a:	44bc      	add	ip, r7
 8008b6c:	4463      	add	r3, ip
 8008b6e:	0018      	movs	r0, r3
 8008b70:	23c6      	movs	r3, #198	; 0xc6
 8008b72:	001a      	movs	r2, r3
 8008b74:	2100      	movs	r1, #0
 8008b76:	f003 fe77 	bl	800c868 <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 8008b7a:	21c8      	movs	r1, #200	; 0xc8
 8008b7c:	2318      	movs	r3, #24
 8008b7e:	18cb      	adds	r3, r1, r3
 8008b80:	19db      	adds	r3, r3, r7
 8008b82:	221b      	movs	r2, #27
 8008b84:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008b86:	2318      	movs	r3, #24
 8008b88:	18fa      	adds	r2, r7, r3
 8008b8a:	2318      	movs	r3, #24
 8008b8c:	18cb      	adds	r3, r1, r3
 8008b8e:	19db      	adds	r3, r3, r7
 8008b90:	0011      	movs	r1, r2
 8008b92:	0018      	movs	r0, r3
 8008b94:	f000 fcb0 	bl	80094f8 <astronode_transport_send_receive>
 8008b98:	0003      	movs	r3, r0
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d16f      	bne.n	8008c7e <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 8008b9e:	4b3a      	ldr	r3, [pc, #232]	; (8008c88 <astronode_send_mpn_rr+0x144>)
 8008ba0:	0032      	movs	r2, r6
 8008ba2:	189b      	adds	r3, r3, r2
 8008ba4:	2118      	movs	r1, #24
 8008ba6:	468c      	mov	ip, r1
 8008ba8:	44bc      	add	ip, r7
 8008baa:	4463      	add	r3, ip
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	2b9b      	cmp	r3, #155	; 0x9b
 8008bb0:	d161      	bne.n	8008c76 <astronode_send_mpn_rr+0x132>
        {
 8008bb2:	466b      	mov	r3, sp
 8008bb4:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 8008bb6:	4b34      	ldr	r3, [pc, #208]	; (8008c88 <astronode_send_mpn_rr+0x144>)
 8008bb8:	189b      	adds	r3, r3, r2
 8008bba:	2218      	movs	r2, #24
 8008bbc:	4694      	mov	ip, r2
 8008bbe:	44bc      	add	ip, r7
 8008bc0:	4463      	add	r3, ip
 8008bc2:	22c4      	movs	r2, #196	; 0xc4
 8008bc4:	5a9b      	ldrh	r3, [r3, r2]
 8008bc6:	001a      	movs	r2, r3
 8008bc8:	3a01      	subs	r2, #1
 8008bca:	21ca      	movs	r1, #202	; 0xca
 8008bcc:	0049      	lsls	r1, r1, #1
 8008bce:	2018      	movs	r0, #24
 8008bd0:	1809      	adds	r1, r1, r0
 8008bd2:	19c9      	adds	r1, r1, r7
 8008bd4:	600a      	str	r2, [r1, #0]
 8008bd6:	001c      	movs	r4, r3
 8008bd8:	2200      	movs	r2, #0
 8008bda:	0015      	movs	r5, r2
 8008bdc:	0020      	movs	r0, r4
 8008bde:	0029      	movs	r1, r5
 8008be0:	0004      	movs	r4, r0
 8008be2:	0f62      	lsrs	r2, r4, #29
 8008be4:	000c      	movs	r4, r1
 8008be6:	00e4      	lsls	r4, r4, #3
 8008be8:	617c      	str	r4, [r7, #20]
 8008bea:	697c      	ldr	r4, [r7, #20]
 8008bec:	4314      	orrs	r4, r2
 8008bee:	617c      	str	r4, [r7, #20]
 8008bf0:	0001      	movs	r1, r0
 8008bf2:	00c9      	lsls	r1, r1, #3
 8008bf4:	6139      	str	r1, [r7, #16]
 8008bf6:	603b      	str	r3, [r7, #0]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	607a      	str	r2, [r7, #4]
 8008bfc:	6838      	ldr	r0, [r7, #0]
 8008bfe:	6879      	ldr	r1, [r7, #4]
 8008c00:	0004      	movs	r4, r0
 8008c02:	0f62      	lsrs	r2, r4, #29
 8008c04:	000c      	movs	r4, r1
 8008c06:	00e4      	lsls	r4, r4, #3
 8008c08:	60fc      	str	r4, [r7, #12]
 8008c0a:	68fc      	ldr	r4, [r7, #12]
 8008c0c:	4314      	orrs	r4, r2
 8008c0e:	60fc      	str	r4, [r7, #12]
 8008c10:	0001      	movs	r1, r0
 8008c12:	00ca      	lsls	r2, r1, #3
 8008c14:	60ba      	str	r2, [r7, #8]
 8008c16:	3307      	adds	r3, #7
 8008c18:	08db      	lsrs	r3, r3, #3
 8008c1a:	00db      	lsls	r3, r3, #3
 8008c1c:	4669      	mov	r1, sp
 8008c1e:	1acb      	subs	r3, r1, r3
 8008c20:	469d      	mov	sp, r3
 8008c22:	466b      	mov	r3, sp
 8008c24:	3300      	adds	r3, #0
 8008c26:	24c8      	movs	r4, #200	; 0xc8
 8008c28:	0064      	lsls	r4, r4, #1
 8008c2a:	2218      	movs	r2, #24
 8008c2c:	18a2      	adds	r2, r4, r2
 8008c2e:	19d1      	adds	r1, r2, r7
 8008c30:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 8008c32:	4b16      	ldr	r3, [pc, #88]	; (8008c8c <astronode_send_mpn_rr+0x148>)
 8008c34:	0018      	movs	r0, r3
 8008c36:	f7fa fa45 	bl	80030c4 <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 8008c3a:	4b13      	ldr	r3, [pc, #76]	; (8008c88 <astronode_send_mpn_rr+0x144>)
 8008c3c:	22cc      	movs	r2, #204	; 0xcc
 8008c3e:	0052      	lsls	r2, r2, #1
 8008c40:	189b      	adds	r3, r3, r2
 8008c42:	2218      	movs	r2, #24
 8008c44:	4694      	mov	ip, r2
 8008c46:	44bc      	add	ip, r7
 8008c48:	4463      	add	r3, ip
 8008c4a:	22c4      	movs	r2, #196	; 0xc4
 8008c4c:	5a9b      	ldrh	r3, [r3, r2]
 8008c4e:	0019      	movs	r1, r3
 8008c50:	2318      	movs	r3, #24
 8008c52:	18fb      	adds	r3, r7, r3
 8008c54:	3301      	adds	r3, #1
 8008c56:	4a0e      	ldr	r2, [pc, #56]	; (8008c90 <astronode_send_mpn_rr+0x14c>)
 8008c58:	2018      	movs	r0, #24
 8008c5a:	1820      	adds	r0, r4, r0
 8008c5c:	19c0      	adds	r0, r0, r7
 8008c5e:	6800      	ldr	r0, [r0, #0]
 8008c60:	f003 fd38 	bl	800c6d4 <snprintf>
            send_debug_logs(product_number);
 8008c64:	2318      	movs	r3, #24
 8008c66:	18e3      	adds	r3, r4, r3
 8008c68:	19db      	adds	r3, r3, r7
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	0018      	movs	r0, r3
 8008c6e:	f7fa fa29 	bl	80030c4 <send_debug_logs>
 8008c72:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8008c74:	e003      	b.n	8008c7e <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8008c76:	4b07      	ldr	r3, [pc, #28]	; (8008c94 <astronode_send_mpn_rr+0x150>)
 8008c78:	0018      	movs	r0, r3
 8008c7a:	f7fa fa23 	bl	80030c4 <send_debug_logs>
}
 8008c7e:	46c0      	nop			; (mov r8, r8)
 8008c80:	46bd      	mov	sp, r7
 8008c82:	b06d      	add	sp, #436	; 0x1b4
 8008c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c86:	46c0      	nop			; (mov r8, r8)
 8008c88:	fffffe68 	.word	0xfffffe68
 8008c8c:	08013f6c 	.word	0x08013f6c
 8008c90:	08013aa4 	.word	0x08013aa4
 8008c94:	08013ae0 	.word	0x08013ae0

08008c98 <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 8008c98:	b5b0      	push	{r4, r5, r7, lr}
 8008c9a:	b0e4      	sub	sp, #400	; 0x190
 8008c9c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008c9e:	24c8      	movs	r4, #200	; 0xc8
 8008ca0:	193b      	adds	r3, r7, r4
 8008ca2:	0018      	movs	r0, r3
 8008ca4:	23c6      	movs	r3, #198	; 0xc6
 8008ca6:	001a      	movs	r2, r3
 8008ca8:	2100      	movs	r1, #0
 8008caa:	f003 fddd 	bl	800c868 <memset>
    astronode_app_msg_t answer = {0};
 8008cae:	4b16      	ldr	r3, [pc, #88]	; (8008d08 <astronode_send_cmd_cr+0x70>)
 8008cb0:	25c8      	movs	r5, #200	; 0xc8
 8008cb2:	006d      	lsls	r5, r5, #1
 8008cb4:	195b      	adds	r3, r3, r5
 8008cb6:	19db      	adds	r3, r3, r7
 8008cb8:	0018      	movs	r0, r3
 8008cba:	23c6      	movs	r3, #198	; 0xc6
 8008cbc:	001a      	movs	r2, r3
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	f003 fdd2 	bl	800c868 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 8008cc4:	193b      	adds	r3, r7, r4
 8008cc6:	2248      	movs	r2, #72	; 0x48
 8008cc8:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008cca:	003a      	movs	r2, r7
 8008ccc:	193b      	adds	r3, r7, r4
 8008cce:	0011      	movs	r1, r2
 8008cd0:	0018      	movs	r0, r3
 8008cd2:	f000 fc11 	bl	80094f8 <astronode_transport_send_receive>
 8008cd6:	0003      	movs	r3, r0
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d111      	bne.n	8008d00 <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 8008cdc:	4b0a      	ldr	r3, [pc, #40]	; (8008d08 <astronode_send_cmd_cr+0x70>)
 8008cde:	195b      	adds	r3, r3, r5
 8008ce0:	19db      	adds	r3, r3, r7
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	2bc8      	cmp	r3, #200	; 0xc8
 8008ce6:	d107      	bne.n	8008cf8 <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 8008ce8:	4b08      	ldr	r3, [pc, #32]	; (8008d0c <astronode_send_cmd_cr+0x74>)
 8008cea:	2200      	movs	r2, #0
 8008cec:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 8008cee:	4b08      	ldr	r3, [pc, #32]	; (8008d10 <astronode_send_cmd_cr+0x78>)
 8008cf0:	0018      	movs	r0, r3
 8008cf2:	f7fa f9e7 	bl	80030c4 <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 8008cf6:	e003      	b.n	8008d00 <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 8008cf8:	4b06      	ldr	r3, [pc, #24]	; (8008d14 <astronode_send_cmd_cr+0x7c>)
 8008cfa:	0018      	movs	r0, r3
 8008cfc:	f7fa f9e2 	bl	80030c4 <send_debug_logs>
}
 8008d00:	46c0      	nop			; (mov r8, r8)
 8008d02:	46bd      	mov	sp, r7
 8008d04:	b064      	add	sp, #400	; 0x190
 8008d06:	bdb0      	pop	{r4, r5, r7, pc}
 8008d08:	fffffe70 	.word	0xfffffe70
 8008d0c:	20000bbe 	.word	0x20000bbe
 8008d10:	080143bc 	.word	0x080143bc
 8008d14:	080143e0 	.word	0x080143e0

08008d18 <astronode_send_cmd_rr>:

void astronode_send_cmd_rr(void)
{
 8008d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d1a:	4cac      	ldr	r4, [pc, #688]	; (8008fcc <astronode_send_cmd_rr+0x2b4>)
 8008d1c:	44a5      	add	sp, r4
 8008d1e:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008d20:	218c      	movs	r1, #140	; 0x8c
 8008d22:	0049      	lsls	r1, r1, #1
 8008d24:	2318      	movs	r3, #24
 8008d26:	18cb      	adds	r3, r1, r3
 8008d28:	19db      	adds	r3, r3, r7
 8008d2a:	0018      	movs	r0, r3
 8008d2c:	23c6      	movs	r3, #198	; 0xc6
 8008d2e:	001a      	movs	r2, r3
 8008d30:	2100      	movs	r1, #0
 8008d32:	f003 fd99 	bl	800c868 <memset>
    astronode_app_msg_t answer = {0};
 8008d36:	4ba6      	ldr	r3, [pc, #664]	; (8008fd0 <astronode_send_cmd_rr+0x2b8>)
 8008d38:	26f8      	movs	r6, #248	; 0xf8
 8008d3a:	0076      	lsls	r6, r6, #1
 8008d3c:	199b      	adds	r3, r3, r6
 8008d3e:	2218      	movs	r2, #24
 8008d40:	4694      	mov	ip, r2
 8008d42:	44bc      	add	ip, r7
 8008d44:	4463      	add	r3, ip
 8008d46:	0018      	movs	r0, r3
 8008d48:	23c6      	movs	r3, #198	; 0xc6
 8008d4a:	001a      	movs	r2, r3
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	f003 fd8b 	bl	800c868 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 8008d52:	218c      	movs	r1, #140	; 0x8c
 8008d54:	0049      	lsls	r1, r1, #1
 8008d56:	2318      	movs	r3, #24
 8008d58:	18cb      	adds	r3, r1, r3
 8008d5a:	19db      	adds	r3, r3, r7
 8008d5c:	2247      	movs	r2, #71	; 0x47
 8008d5e:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008d60:	2350      	movs	r3, #80	; 0x50
 8008d62:	2218      	movs	r2, #24
 8008d64:	189b      	adds	r3, r3, r2
 8008d66:	19da      	adds	r2, r3, r7
 8008d68:	2318      	movs	r3, #24
 8008d6a:	18cb      	adds	r3, r1, r3
 8008d6c:	19db      	adds	r3, r3, r7
 8008d6e:	0011      	movs	r1, r2
 8008d70:	0018      	movs	r0, r3
 8008d72:	f000 fbc1 	bl	80094f8 <astronode_transport_send_receive>
 8008d76:	0003      	movs	r3, r0
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d000      	beq.n	8008d7e <astronode_send_cmd_rr+0x66>
 8008d7c:	e121      	b.n	8008fc2 <astronode_send_cmd_rr+0x2aa>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 8008d7e:	4b94      	ldr	r3, [pc, #592]	; (8008fd0 <astronode_send_cmd_rr+0x2b8>)
 8008d80:	199b      	adds	r3, r3, r6
 8008d82:	2218      	movs	r2, #24
 8008d84:	4694      	mov	ip, r2
 8008d86:	44bc      	add	ip, r7
 8008d88:	4463      	add	r3, ip
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	2bc7      	cmp	r3, #199	; 0xc7
 8008d8e:	d000      	beq.n	8008d92 <astronode_send_cmd_rr+0x7a>
 8008d90:	e113      	b.n	8008fba <astronode_send_cmd_rr+0x2a2>
        {
 8008d92:	466b      	mov	r3, sp
 8008d94:	001e      	movs	r6, r3
            send_debug_logs("Received downlink command");
 8008d96:	4b8f      	ldr	r3, [pc, #572]	; (8008fd4 <astronode_send_cmd_rr+0x2bc>)
 8008d98:	0018      	movs	r0, r3
 8008d9a:	f7fa f993 	bl	80030c4 <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 8008d9e:	4b8c      	ldr	r3, [pc, #560]	; (8008fd0 <astronode_send_cmd_rr+0x2b8>)
 8008da0:	21f8      	movs	r1, #248	; 0xf8
 8008da2:	0049      	lsls	r1, r1, #1
 8008da4:	185b      	adds	r3, r3, r1
 8008da6:	2218      	movs	r2, #24
 8008da8:	4694      	mov	ip, r2
 8008daa:	44bc      	add	ip, r7
 8008dac:	4463      	add	r3, ip
 8008dae:	785b      	ldrb	r3, [r3, #1]
 8008db0:	001a      	movs	r2, r3
                                + (answer.p_payload[1] << 8)
 8008db2:	4b87      	ldr	r3, [pc, #540]	; (8008fd0 <astronode_send_cmd_rr+0x2b8>)
 8008db4:	185b      	adds	r3, r3, r1
 8008db6:	2018      	movs	r0, #24
 8008db8:	4684      	mov	ip, r0
 8008dba:	44bc      	add	ip, r7
 8008dbc:	4463      	add	r3, ip
 8008dbe:	789b      	ldrb	r3, [r3, #2]
 8008dc0:	021b      	lsls	r3, r3, #8
 8008dc2:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[2] << 16)
 8008dc4:	4b82      	ldr	r3, [pc, #520]	; (8008fd0 <astronode_send_cmd_rr+0x2b8>)
 8008dc6:	185b      	adds	r3, r3, r1
 8008dc8:	2018      	movs	r0, #24
 8008dca:	4684      	mov	ip, r0
 8008dcc:	44bc      	add	ip, r7
 8008dce:	4463      	add	r3, ip
 8008dd0:	78db      	ldrb	r3, [r3, #3]
 8008dd2:	041b      	lsls	r3, r3, #16
 8008dd4:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[3] << 24);
 8008dd6:	4b7e      	ldr	r3, [pc, #504]	; (8008fd0 <astronode_send_cmd_rr+0x2b8>)
 8008dd8:	185b      	adds	r3, r3, r1
 8008dda:	2118      	movs	r1, #24
 8008ddc:	468c      	mov	ip, r1
 8008dde:	44bc      	add	ip, r7
 8008de0:	4463      	add	r3, ip
 8008de2:	791b      	ldrb	r3, [r3, #4]
 8008de4:	061b      	lsls	r3, r3, #24
 8008de6:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8008de8:	22f4      	movs	r2, #244	; 0xf4
 8008dea:	0052      	lsls	r2, r2, #1
 8008dec:	2118      	movs	r1, #24
 8008dee:	1851      	adds	r1, r2, r1
 8008df0:	19c8      	adds	r0, r1, r7
 8008df2:	6003      	str	r3, [r0, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 8008df4:	2318      	movs	r3, #24
 8008df6:	18d3      	adds	r3, r2, r3
 8008df8:	19db      	adds	r3, r3, r7
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	4976      	ldr	r1, [pc, #472]	; (8008fd8 <astronode_send_cmd_rr+0x2c0>)
 8008dfe:	2318      	movs	r3, #24
 8008e00:	18fb      	adds	r3, r7, r3
 8008e02:	0018      	movs	r0, r3
 8008e04:	f003 fc9a 	bl	800c73c <sprintf>
            send_debug_logs(str);
 8008e08:	2318      	movs	r3, #24
 8008e0a:	18fb      	adds	r3, r7, r3
 8008e0c:	0018      	movs	r0, r3
 8008e0e:	f7fa f959 	bl	80030c4 <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 8008e12:	4b6f      	ldr	r3, [pc, #444]	; (8008fd0 <astronode_send_cmd_rr+0x2b8>)
 8008e14:	21f8      	movs	r1, #248	; 0xf8
 8008e16:	0049      	lsls	r1, r1, #1
 8008e18:	185b      	adds	r3, r3, r1
 8008e1a:	2218      	movs	r2, #24
 8008e1c:	4694      	mov	ip, r2
 8008e1e:	44bc      	add	ip, r7
 8008e20:	4463      	add	r3, ip
 8008e22:	22c4      	movs	r2, #196	; 0xc4
 8008e24:	5a9b      	ldrh	r3, [r3, r2]
 8008e26:	2b2c      	cmp	r3, #44	; 0x2c
 8008e28:	d00e      	beq.n	8008e48 <astronode_send_cmd_rr+0x130>
 8008e2a:	4b69      	ldr	r3, [pc, #420]	; (8008fd0 <astronode_send_cmd_rr+0x2b8>)
 8008e2c:	185b      	adds	r3, r3, r1
 8008e2e:	2218      	movs	r2, #24
 8008e30:	4694      	mov	ip, r2
 8008e32:	44bc      	add	ip, r7
 8008e34:	4463      	add	r3, ip
 8008e36:	22c4      	movs	r2, #196	; 0xc4
 8008e38:	5a9b      	ldrh	r3, [r3, r2]
 8008e3a:	2b0c      	cmp	r3, #12
 8008e3c:	d004      	beq.n	8008e48 <astronode_send_cmd_rr+0x130>
            {
                send_debug_logs("Command size error");
 8008e3e:	4b67      	ldr	r3, [pc, #412]	; (8008fdc <astronode_send_cmd_rr+0x2c4>)
 8008e40:	0018      	movs	r0, r3
 8008e42:	f7fa f93f 	bl	80030c4 <send_debug_logs>
                return;
 8008e46:	e0b6      	b.n	8008fb6 <astronode_send_cmd_rr+0x29e>
            }

            char command_content[answer.payload_len];
 8008e48:	4b61      	ldr	r3, [pc, #388]	; (8008fd0 <astronode_send_cmd_rr+0x2b8>)
 8008e4a:	22f8      	movs	r2, #248	; 0xf8
 8008e4c:	0052      	lsls	r2, r2, #1
 8008e4e:	189b      	adds	r3, r3, r2
 8008e50:	2218      	movs	r2, #24
 8008e52:	4694      	mov	ip, r2
 8008e54:	44bc      	add	ip, r7
 8008e56:	4463      	add	r3, ip
 8008e58:	22c4      	movs	r2, #196	; 0xc4
 8008e5a:	5a9b      	ldrh	r3, [r3, r2]
 8008e5c:	001a      	movs	r2, r3
 8008e5e:	3a01      	subs	r2, #1
 8008e60:	21f2      	movs	r1, #242	; 0xf2
 8008e62:	0049      	lsls	r1, r1, #1
 8008e64:	2018      	movs	r0, #24
 8008e66:	1809      	adds	r1, r1, r0
 8008e68:	19c9      	adds	r1, r1, r7
 8008e6a:	600a      	str	r2, [r1, #0]
 8008e6c:	001c      	movs	r4, r3
 8008e6e:	2200      	movs	r2, #0
 8008e70:	0015      	movs	r5, r2
 8008e72:	0020      	movs	r0, r4
 8008e74:	0029      	movs	r1, r5
 8008e76:	0004      	movs	r4, r0
 8008e78:	0f62      	lsrs	r2, r4, #29
 8008e7a:	000c      	movs	r4, r1
 8008e7c:	00e4      	lsls	r4, r4, #3
 8008e7e:	617c      	str	r4, [r7, #20]
 8008e80:	697c      	ldr	r4, [r7, #20]
 8008e82:	4314      	orrs	r4, r2
 8008e84:	617c      	str	r4, [r7, #20]
 8008e86:	0001      	movs	r1, r0
 8008e88:	00c9      	lsls	r1, r1, #3
 8008e8a:	6139      	str	r1, [r7, #16]
 8008e8c:	603b      	str	r3, [r7, #0]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	607a      	str	r2, [r7, #4]
 8008e92:	6838      	ldr	r0, [r7, #0]
 8008e94:	6879      	ldr	r1, [r7, #4]
 8008e96:	0004      	movs	r4, r0
 8008e98:	0f62      	lsrs	r2, r4, #29
 8008e9a:	000c      	movs	r4, r1
 8008e9c:	00e4      	lsls	r4, r4, #3
 8008e9e:	60fc      	str	r4, [r7, #12]
 8008ea0:	68fc      	ldr	r4, [r7, #12]
 8008ea2:	4314      	orrs	r4, r2
 8008ea4:	60fc      	str	r4, [r7, #12]
 8008ea6:	0001      	movs	r1, r0
 8008ea8:	00ca      	lsls	r2, r1, #3
 8008eaa:	60ba      	str	r2, [r7, #8]
 8008eac:	3307      	adds	r3, #7
 8008eae:	08db      	lsrs	r3, r3, #3
 8008eb0:	00db      	lsls	r3, r3, #3
 8008eb2:	4669      	mov	r1, sp
 8008eb4:	1acb      	subs	r3, r1, r3
 8008eb6:	469d      	mov	sp, r3
 8008eb8:	466b      	mov	r3, sp
 8008eba:	3300      	adds	r3, #0
 8008ebc:	20f0      	movs	r0, #240	; 0xf0
 8008ebe:	0040      	lsls	r0, r0, #1
 8008ec0:	2218      	movs	r2, #24
 8008ec2:	1882      	adds	r2, r0, r2
 8008ec4:	19d1      	adds	r1, r2, r7
 8008ec6:	600b      	str	r3, [r1, #0]
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 8008ec8:	4b41      	ldr	r3, [pc, #260]	; (8008fd0 <astronode_send_cmd_rr+0x2b8>)
 8008eca:	22f8      	movs	r2, #248	; 0xf8
 8008ecc:	0052      	lsls	r2, r2, #1
 8008ece:	189b      	adds	r3, r3, r2
 8008ed0:	2218      	movs	r2, #24
 8008ed2:	4694      	mov	ip, r2
 8008ed4:	44bc      	add	ip, r7
 8008ed6:	4463      	add	r3, ip
 8008ed8:	22c4      	movs	r2, #196	; 0xc4
 8008eda:	5a9b      	ldrh	r3, [r3, r2]
 8008edc:	3b03      	subs	r3, #3
 8008ede:	0019      	movs	r1, r3
 8008ee0:	2350      	movs	r3, #80	; 0x50
 8008ee2:	2218      	movs	r2, #24
 8008ee4:	189b      	adds	r3, r3, r2
 8008ee6:	19db      	adds	r3, r3, r7
 8008ee8:	3305      	adds	r3, #5
 8008eea:	4a3d      	ldr	r2, [pc, #244]	; (8008fe0 <astronode_send_cmd_rr+0x2c8>)
 8008eec:	2418      	movs	r4, #24
 8008eee:	1900      	adds	r0, r0, r4
 8008ef0:	19c0      	adds	r0, r0, r7
 8008ef2:	6800      	ldr	r0, [r0, #0]
 8008ef4:	f003 fbee 	bl	800c6d4 <snprintf>
 8008ef8:	0002      	movs	r2, r0
 8008efa:	23ef      	movs	r3, #239	; 0xef
 8008efc:	005b      	lsls	r3, r3, #1
 8008efe:	2118      	movs	r1, #24
 8008f00:	185b      	adds	r3, r3, r1
 8008f02:	19db      	adds	r3, r3, r7
 8008f04:	801a      	strh	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8008f06:	23f0      	movs	r3, #240	; 0xf0
 8008f08:	33ff      	adds	r3, #255	; 0xff
 8008f0a:	2218      	movs	r2, #24
 8008f0c:	189b      	adds	r3, r3, r2
 8008f0e:	19db      	adds	r3, r3, r7
 8008f10:	2200      	movs	r2, #0
 8008f12:	701a      	strb	r2, [r3, #0]
 8008f14:	e024      	b.n	8008f60 <astronode_send_cmd_rr+0x248>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 8008f16:	23f0      	movs	r3, #240	; 0xf0
 8008f18:	33ff      	adds	r3, #255	; 0xff
 8008f1a:	2218      	movs	r2, #24
 8008f1c:	189b      	adds	r3, r3, r2
 8008f1e:	19db      	adds	r3, r3, r7
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	22f0      	movs	r2, #240	; 0xf0
 8008f24:	0052      	lsls	r2, r2, #1
 8008f26:	2118      	movs	r1, #24
 8008f28:	1852      	adds	r2, r2, r1
 8008f2a:	19d2      	adds	r2, r2, r7
 8008f2c:	6812      	ldr	r2, [r2, #0]
 8008f2e:	5cd3      	ldrb	r3, [r2, r3]
 8008f30:	1c5a      	adds	r2, r3, #1
 8008f32:	4b2c      	ldr	r3, [pc, #176]	; (8008fe4 <astronode_send_cmd_rr+0x2cc>)
 8008f34:	18d3      	adds	r3, r2, r3
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	001a      	movs	r2, r3
 8008f3a:	2397      	movs	r3, #151	; 0x97
 8008f3c:	4013      	ands	r3, r2
 8008f3e:	d104      	bne.n	8008f4a <astronode_send_cmd_rr+0x232>
                {
                    send_debug_logs("Command contains non printable characters");
 8008f40:	4b29      	ldr	r3, [pc, #164]	; (8008fe8 <astronode_send_cmd_rr+0x2d0>)
 8008f42:	0018      	movs	r0, r3
 8008f44:	f7fa f8be 	bl	80030c4 <send_debug_logs>
                    return;
 8008f48:	e035      	b.n	8008fb6 <astronode_send_cmd_rr+0x29e>
            for (uint8_t index = 0; index < command_content_size; index++)
 8008f4a:	21f0      	movs	r1, #240	; 0xf0
 8008f4c:	31ff      	adds	r1, #255	; 0xff
 8008f4e:	2318      	movs	r3, #24
 8008f50:	18cb      	adds	r3, r1, r3
 8008f52:	19db      	adds	r3, r3, r7
 8008f54:	781a      	ldrb	r2, [r3, #0]
 8008f56:	2318      	movs	r3, #24
 8008f58:	18cb      	adds	r3, r1, r3
 8008f5a:	19db      	adds	r3, r3, r7
 8008f5c:	3201      	adds	r2, #1
 8008f5e:	701a      	strb	r2, [r3, #0]
 8008f60:	23f0      	movs	r3, #240	; 0xf0
 8008f62:	33ff      	adds	r3, #255	; 0xff
 8008f64:	2218      	movs	r2, #24
 8008f66:	189b      	adds	r3, r3, r2
 8008f68:	19db      	adds	r3, r3, r7
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	22ef      	movs	r2, #239	; 0xef
 8008f70:	0052      	lsls	r2, r2, #1
 8008f72:	2118      	movs	r1, #24
 8008f74:	1852      	adds	r2, r2, r1
 8008f76:	19d2      	adds	r2, r2, r7
 8008f78:	8812      	ldrh	r2, [r2, #0]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d8cb      	bhi.n	8008f16 <astronode_send_cmd_rr+0x1fe>
                }
            }
            send_debug_logs("Command content is: ");
 8008f7e:	4b1b      	ldr	r3, [pc, #108]	; (8008fec <astronode_send_cmd_rr+0x2d4>)
 8008f80:	0018      	movs	r0, r3
 8008f82:	f7fa f89f 	bl	80030c4 <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 8008f86:	2350      	movs	r3, #80	; 0x50
 8008f88:	2218      	movs	r2, #24
 8008f8a:	189b      	adds	r3, r3, r2
 8008f8c:	19db      	adds	r3, r3, r7
 8008f8e:	1d5a      	adds	r2, r3, #5
 8008f90:	4917      	ldr	r1, [pc, #92]	; (8008ff0 <astronode_send_cmd_rr+0x2d8>)
 8008f92:	24f0      	movs	r4, #240	; 0xf0
 8008f94:	0064      	lsls	r4, r4, #1
 8008f96:	2318      	movs	r3, #24
 8008f98:	18e3      	adds	r3, r4, r3
 8008f9a:	19db      	adds	r3, r3, r7
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	0018      	movs	r0, r3
 8008fa0:	f003 fbcc 	bl	800c73c <sprintf>
            send_debug_logs(command_content);
 8008fa4:	2318      	movs	r3, #24
 8008fa6:	18e3      	adds	r3, r4, r3
 8008fa8:	19db      	adds	r3, r3, r7
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	0018      	movs	r0, r3
 8008fae:	f7fa f889 	bl	80030c4 <send_debug_logs>
 8008fb2:	46b5      	mov	sp, r6
 8008fb4:	e005      	b.n	8008fc2 <astronode_send_cmd_rr+0x2aa>
                return;
 8008fb6:	46b5      	mov	sp, r6
 8008fb8:	e003      	b.n	8008fc2 <astronode_send_cmd_rr+0x2aa>
        }
        else
        {
            send_debug_logs("No command available.");
 8008fba:	4b0e      	ldr	r3, [pc, #56]	; (8008ff4 <astronode_send_cmd_rr+0x2dc>)
 8008fbc:	0018      	movs	r0, r3
 8008fbe:	f7fa f881 	bl	80030c4 <send_debug_logs>
        }
    }
}
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	2383      	movs	r3, #131	; 0x83
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	449d      	add	sp, r3
 8008fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fcc:	fffffdf4 	.word	0xfffffdf4
 8008fd0:	fffffe60 	.word	0xfffffe60
 8008fd4:	080143f8 	.word	0x080143f8
 8008fd8:	08014414 	.word	0x08014414
 8008fdc:	08014464 	.word	0x08014464
 8008fe0:	08013aa4 	.word	0x08013aa4
 8008fe4:	08014ed0 	.word	0x08014ed0
 8008fe8:	08014478 	.word	0x08014478
 8008fec:	080144a4 	.word	0x080144a4
 8008ff0:	080144bc 	.word	0x080144bc
 8008ff4:	080144c0 	.word	0x080144c0

08008ff8 <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 8008ffc:	4b02      	ldr	r3, [pc, #8]	; (8009008 <is_sak_available+0x10>)
 8008ffe:	781b      	ldrb	r3, [r3, #0]
}
 8009000:	0018      	movs	r0, r3
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	46c0      	nop			; (mov r8, r8)
 8009008:	20000bbc 	.word	0x20000bbc

0800900c <is_astronode_reset>:

bool is_astronode_reset()
{
 800900c:	b580      	push	{r7, lr}
 800900e:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8009010:	4b02      	ldr	r3, [pc, #8]	; (800901c <is_astronode_reset+0x10>)
 8009012:	781b      	ldrb	r3, [r3, #0]
}
 8009014:	0018      	movs	r0, r3
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	46c0      	nop			; (mov r8, r8)
 800901c:	20000bbd 	.word	0x20000bbd

08009020 <is_command_available>:

bool is_command_available()
{
 8009020:	b580      	push	{r7, lr}
 8009022:	af00      	add	r7, sp, #0
    return g_is_command_available;
 8009024:	4b02      	ldr	r3, [pc, #8]	; (8009030 <is_command_available+0x10>)
 8009026:	781b      	ldrb	r3, [r3, #0]
}
 8009028:	0018      	movs	r0, r3
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	46c0      	nop			; (mov r8, r8)
 8009030:	20000bbe 	.word	0x20000bbe

08009034 <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	0002      	movs	r2, r0
 800903c:	6039      	str	r1, [r7, #0]
 800903e:	1dfb      	adds	r3, r7, #7
 8009040:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 8009042:	1dfb      	adds	r3, r7, #7
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	2b2f      	cmp	r3, #47	; 0x2f
 8009048:	d90b      	bls.n	8009062 <ascii_to_value+0x2e>
 800904a:	1dfb      	adds	r3, r7, #7
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	2b39      	cmp	r3, #57	; 0x39
 8009050:	d807      	bhi.n	8009062 <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 8009052:	1dfb      	adds	r3, r7, #7
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	3b30      	subs	r3, #48	; 0x30
 8009058:	b2da      	uxtb	r2, r3
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	701a      	strb	r2, [r3, #0]
        return true;
 800905e:	2301      	movs	r3, #1
 8009060:	e010      	b.n	8009084 <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 8009062:	1dfb      	adds	r3, r7, #7
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	2b40      	cmp	r3, #64	; 0x40
 8009068:	d90b      	bls.n	8009082 <ascii_to_value+0x4e>
 800906a:	1dfb      	adds	r3, r7, #7
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	2b46      	cmp	r3, #70	; 0x46
 8009070:	d807      	bhi.n	8009082 <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 8009072:	1dfb      	adds	r3, r7, #7
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	3b37      	subs	r3, #55	; 0x37
 8009078:	b2da      	uxtb	r2, r3
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	701a      	strb	r2, [r3, #0]
        return true;
 800907e:	2301      	movs	r3, #1
 8009080:	e000      	b.n	8009084 <ascii_to_value+0x50>
    }
    else
    {
        return false;
 8009082:	2300      	movs	r3, #0
    }
}
 8009084:	0018      	movs	r0, r3
 8009086:	46bd      	mov	sp, r7
 8009088:	b002      	add	sp, #8
 800908a:	bd80      	pop	{r7, pc}

0800908c <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 800908c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800908e:	b085      	sub	sp, #20
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 8009096:	250e      	movs	r5, #14
 8009098:	197b      	adds	r3, r7, r5
 800909a:	2200      	movs	r2, #0
 800909c:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 800909e:	197b      	adds	r3, r7, r5
 80090a0:	881b      	ldrh	r3, [r3, #0]
 80090a2:	197a      	adds	r2, r7, r5
 80090a4:	1c59      	adds	r1, r3, #1
 80090a6:	8011      	strh	r1, [r2, #0]
 80090a8:	001a      	movs	r2, r3
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	189b      	adds	r3, r3, r2
 80090ae:	2202      	movs	r2, #2
 80090b0:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	260a      	movs	r6, #10
 80090b6:	19bc      	adds	r4, r7, r6
 80090b8:	4a44      	ldr	r2, [pc, #272]	; (80091cc <astronode_create_request_transport+0x140>)
 80090ba:	2101      	movs	r1, #1
 80090bc:	0018      	movs	r0, r3
 80090be:	f000 fa7d 	bl	80095bc <calculate_crc>
 80090c2:	0003      	movs	r3, r0
 80090c4:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	1c58      	adds	r0, r3, #1
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	22c4      	movs	r2, #196	; 0xc4
 80090ce:	5a99      	ldrh	r1, [r3, r2]
 80090d0:	19bc      	adds	r4, r7, r6
 80090d2:	19bb      	adds	r3, r7, r6
 80090d4:	881b      	ldrh	r3, [r3, #0]
 80090d6:	001a      	movs	r2, r3
 80090d8:	f000 fa70 	bl	80095bc <calculate_crc>
 80090dc:	0003      	movs	r3, r0
 80090de:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 80090e0:	19bb      	adds	r3, r7, r6
 80090e2:	881b      	ldrh	r3, [r3, #0]
 80090e4:	021b      	lsls	r3, r3, #8
 80090e6:	b21a      	sxth	r2, r3
 80090e8:	0031      	movs	r1, r6
 80090ea:	19bb      	adds	r3, r7, r6
 80090ec:	881b      	ldrh	r3, [r3, #0]
 80090ee:	0a1b      	lsrs	r3, r3, #8
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	b21b      	sxth	r3, r3
 80090f4:	4313      	orrs	r3, r2
 80090f6:	b21a      	sxth	r2, r3
 80090f8:	187b      	adds	r3, r7, r1
 80090fa:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	7818      	ldrb	r0, [r3, #0]
 8009100:	197b      	adds	r3, r7, r5
 8009102:	881b      	ldrh	r3, [r3, #0]
 8009104:	683a      	ldr	r2, [r7, #0]
 8009106:	18d3      	adds	r3, r2, r3
 8009108:	0019      	movs	r1, r3
 800910a:	f000 fbeb 	bl	80098e4 <uint8_to_ascii_buffer>
    index += 2;
 800910e:	197b      	adds	r3, r7, r5
 8009110:	197a      	adds	r2, r7, r5
 8009112:	8812      	ldrh	r2, [r2, #0]
 8009114:	3202      	adds	r2, #2
 8009116:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8009118:	230c      	movs	r3, #12
 800911a:	18fb      	adds	r3, r7, r3
 800911c:	2200      	movs	r2, #0
 800911e:	801a      	strh	r2, [r3, #0]
 8009120:	e017      	b.n	8009152 <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 8009122:	240c      	movs	r4, #12
 8009124:	193b      	adds	r3, r7, r4
 8009126:	881b      	ldrh	r3, [r3, #0]
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	18d3      	adds	r3, r2, r3
 800912c:	7858      	ldrb	r0, [r3, #1]
 800912e:	250e      	movs	r5, #14
 8009130:	197b      	adds	r3, r7, r5
 8009132:	881b      	ldrh	r3, [r3, #0]
 8009134:	683a      	ldr	r2, [r7, #0]
 8009136:	18d3      	adds	r3, r2, r3
 8009138:	0019      	movs	r1, r3
 800913a:	f000 fbd3 	bl	80098e4 <uint8_to_ascii_buffer>
        index += 2;
 800913e:	197b      	adds	r3, r7, r5
 8009140:	197a      	adds	r2, r7, r5
 8009142:	8812      	ldrh	r2, [r2, #0]
 8009144:	3202      	adds	r2, #2
 8009146:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8009148:	193b      	adds	r3, r7, r4
 800914a:	881a      	ldrh	r2, [r3, #0]
 800914c:	193b      	adds	r3, r7, r4
 800914e:	3201      	adds	r2, #1
 8009150:	801a      	strh	r2, [r3, #0]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	22c4      	movs	r2, #196	; 0xc4
 8009156:	5a9b      	ldrh	r3, [r3, r2]
 8009158:	220c      	movs	r2, #12
 800915a:	18ba      	adds	r2, r7, r2
 800915c:	8812      	ldrh	r2, [r2, #0]
 800915e:	429a      	cmp	r2, r3
 8009160:	d3df      	bcc.n	8009122 <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 8009162:	250a      	movs	r5, #10
 8009164:	197b      	adds	r3, r7, r5
 8009166:	881b      	ldrh	r3, [r3, #0]
 8009168:	0a1b      	lsrs	r3, r3, #8
 800916a:	b29b      	uxth	r3, r3
 800916c:	b2d8      	uxtb	r0, r3
 800916e:	240e      	movs	r4, #14
 8009170:	193b      	adds	r3, r7, r4
 8009172:	881b      	ldrh	r3, [r3, #0]
 8009174:	683a      	ldr	r2, [r7, #0]
 8009176:	18d3      	adds	r3, r2, r3
 8009178:	0019      	movs	r1, r3
 800917a:	f000 fbb3 	bl	80098e4 <uint8_to_ascii_buffer>
    index += 2;
 800917e:	0021      	movs	r1, r4
 8009180:	187b      	adds	r3, r7, r1
 8009182:	187a      	adds	r2, r7, r1
 8009184:	8812      	ldrh	r2, [r2, #0]
 8009186:	3202      	adds	r2, #2
 8009188:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 800918a:	197b      	adds	r3, r7, r5
 800918c:	881b      	ldrh	r3, [r3, #0]
 800918e:	b2d8      	uxtb	r0, r3
 8009190:	000c      	movs	r4, r1
 8009192:	187b      	adds	r3, r7, r1
 8009194:	881b      	ldrh	r3, [r3, #0]
 8009196:	683a      	ldr	r2, [r7, #0]
 8009198:	18d3      	adds	r3, r2, r3
 800919a:	0019      	movs	r1, r3
 800919c:	f000 fba2 	bl	80098e4 <uint8_to_ascii_buffer>
    index += 2;
 80091a0:	0020      	movs	r0, r4
 80091a2:	183b      	adds	r3, r7, r0
 80091a4:	183a      	adds	r2, r7, r0
 80091a6:	8812      	ldrh	r2, [r2, #0]
 80091a8:	3202      	adds	r2, #2
 80091aa:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 80091ac:	183b      	adds	r3, r7, r0
 80091ae:	881b      	ldrh	r3, [r3, #0]
 80091b0:	183a      	adds	r2, r7, r0
 80091b2:	1c59      	adds	r1, r3, #1
 80091b4:	8011      	strh	r1, [r2, #0]
 80091b6:	001a      	movs	r2, r3
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	189b      	adds	r3, r3, r2
 80091bc:	2203      	movs	r2, #3
 80091be:	701a      	strb	r2, [r3, #0]

    return index;
 80091c0:	183b      	adds	r3, r7, r0
 80091c2:	881b      	ldrh	r3, [r3, #0]
}
 80091c4:	0018      	movs	r0, r3
 80091c6:	46bd      	mov	sp, r7
 80091c8:	b005      	add	sp, #20
 80091ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091cc:	0000ffff 	.word	0x0000ffff

080091d0 <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 80091d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091d2:	b089      	sub	sp, #36	; 0x24
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	607a      	str	r2, [r7, #4]
 80091da:	230a      	movs	r3, #10
 80091dc:	18fb      	adds	r3, r7, r3
 80091de:	1c0a      	adds	r2, r1, #0
 80091e0:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	d005      	beq.n	80091f6 <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 80091ea:	4bbd      	ldr	r3, [pc, #756]	; (80094e0 <astronode_decode_answer_transport+0x310>)
 80091ec:	0018      	movs	r0, r3
 80091ee:	f7f9 ff69 	bl	80030c4 <send_debug_logs>
        return RS_FAILURE;
 80091f2:	2300      	movs	r3, #0
 80091f4:	e170      	b.n	80094d8 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 80091f6:	210a      	movs	r1, #10
 80091f8:	187b      	adds	r3, r7, r1
 80091fa:	881b      	ldrh	r3, [r3, #0]
 80091fc:	2201      	movs	r2, #1
 80091fe:	4013      	ands	r3, r2
 8009200:	b29b      	uxth	r3, r3
 8009202:	2b00      	cmp	r3, #0
 8009204:	d103      	bne.n	800920e <astronode_decode_answer_transport+0x3e>
 8009206:	187b      	adds	r3, r7, r1
 8009208:	881b      	ldrh	r3, [r3, #0]
 800920a:	2b07      	cmp	r3, #7
 800920c:	d805      	bhi.n	800921a <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 800920e:	4bb5      	ldr	r3, [pc, #724]	; (80094e4 <astronode_decode_answer_transport+0x314>)
 8009210:	0018      	movs	r0, r3
 8009212:	f7f9 ff57 	bl	80030c4 <send_debug_logs>
        return RS_FAILURE;
 8009216:	2300      	movs	r3, #0
 8009218:	e15e      	b.n	80094d8 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 800921a:	230a      	movs	r3, #10
 800921c:	18fb      	adds	r3, r7, r3
 800921e:	881b      	ldrh	r3, [r3, #0]
 8009220:	3b08      	subs	r3, #8
 8009222:	2b00      	cmp	r3, #0
 8009224:	da00      	bge.n	8009228 <astronode_decode_answer_transport+0x58>
 8009226:	3301      	adds	r3, #1
 8009228:	105b      	asrs	r3, r3, #1
 800922a:	b299      	uxth	r1, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	22c4      	movs	r2, #196	; 0xc4
 8009230:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 8009232:	230a      	movs	r3, #10
 8009234:	18fb      	adds	r3, r7, r3
 8009236:	881b      	ldrh	r3, [r3, #0]
 8009238:	3b01      	subs	r3, #1
 800923a:	68fa      	ldr	r2, [r7, #12]
 800923c:	18d3      	adds	r3, r2, r3
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	2b03      	cmp	r3, #3
 8009242:	d005      	beq.n	8009250 <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 8009244:	4ba8      	ldr	r3, [pc, #672]	; (80094e8 <astronode_decode_answer_transport+0x318>)
 8009246:	0018      	movs	r0, r3
 8009248:	f7f9 ff3c 	bl	80030c4 <send_debug_logs>
        return RS_FAILURE;
 800924c:	2300      	movs	r3, #0
 800924e:	e143      	b.n	80094d8 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 8009250:	2117      	movs	r1, #23
 8009252:	187b      	adds	r3, r7, r1
 8009254:	2200      	movs	r2, #0
 8009256:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 8009258:	2416      	movs	r4, #22
 800925a:	193b      	adds	r3, r7, r4
 800925c:	2200      	movs	r2, #0
 800925e:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	3301      	adds	r3, #1
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	187a      	adds	r2, r7, r1
 8009268:	0011      	movs	r1, r2
 800926a:	0018      	movs	r0, r3
 800926c:	f7ff fee2 	bl	8009034 <ascii_to_value>
 8009270:	0003      	movs	r3, r0
 8009272:	001a      	movs	r2, r3
 8009274:	2301      	movs	r3, #1
 8009276:	4053      	eors	r3, r2
 8009278:	b2db      	uxtb	r3, r3
 800927a:	2b00      	cmp	r3, #0
 800927c:	d10e      	bne.n	800929c <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	3302      	adds	r3, #2
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	193a      	adds	r2, r7, r4
 8009286:	0011      	movs	r1, r2
 8009288:	0018      	movs	r0, r3
 800928a:	f7ff fed3 	bl	8009034 <ascii_to_value>
 800928e:	0003      	movs	r3, r0
 8009290:	001a      	movs	r2, r3
 8009292:	2301      	movs	r3, #1
 8009294:	4053      	eors	r3, r2
 8009296:	b2db      	uxtb	r3, r3
 8009298:	2b00      	cmp	r3, #0
 800929a:	d005      	beq.n	80092a8 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800929c:	4b93      	ldr	r3, [pc, #588]	; (80094ec <astronode_decode_answer_transport+0x31c>)
 800929e:	0018      	movs	r0, r3
 80092a0:	f7f9 ff10 	bl	80030c4 <send_debug_logs>
        return RS_FAILURE;
 80092a4:	2300      	movs	r3, #0
 80092a6:	e117      	b.n	80094d8 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 80092a8:	2317      	movs	r3, #23
 80092aa:	18fb      	adds	r3, r7, r3
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	011b      	lsls	r3, r3, #4
 80092b0:	b2da      	uxtb	r2, r3
 80092b2:	2316      	movs	r3, #22
 80092b4:	18fb      	adds	r3, r7, r3
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	18d3      	adds	r3, r2, r3
 80092ba:	b2da      	uxtb	r2, r3
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 80092c0:	231e      	movs	r3, #30
 80092c2:	18fb      	adds	r3, r7, r3
 80092c4:	2203      	movs	r2, #3
 80092c6:	801a      	strh	r2, [r3, #0]
 80092c8:	231c      	movs	r3, #28
 80092ca:	18fb      	adds	r3, r7, r3
 80092cc:	2200      	movs	r2, #0
 80092ce:	801a      	strh	r2, [r3, #0]
 80092d0:	e045      	b.n	800935e <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 80092d2:	241e      	movs	r4, #30
 80092d4:	193b      	adds	r3, r7, r4
 80092d6:	881b      	ldrh	r3, [r3, #0]
 80092d8:	68fa      	ldr	r2, [r7, #12]
 80092da:	18d3      	adds	r3, r2, r3
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	2217      	movs	r2, #23
 80092e0:	18ba      	adds	r2, r7, r2
 80092e2:	0011      	movs	r1, r2
 80092e4:	0018      	movs	r0, r3
 80092e6:	f7ff fea5 	bl	8009034 <ascii_to_value>
 80092ea:	0003      	movs	r3, r0
 80092ec:	001a      	movs	r2, r3
 80092ee:	2301      	movs	r3, #1
 80092f0:	4053      	eors	r3, r2
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d112      	bne.n	800931e <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 80092f8:	193b      	adds	r3, r7, r4
 80092fa:	881b      	ldrh	r3, [r3, #0]
 80092fc:	3301      	adds	r3, #1
 80092fe:	68fa      	ldr	r2, [r7, #12]
 8009300:	18d3      	adds	r3, r2, r3
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	2216      	movs	r2, #22
 8009306:	18ba      	adds	r2, r7, r2
 8009308:	0011      	movs	r1, r2
 800930a:	0018      	movs	r0, r3
 800930c:	f7ff fe92 	bl	8009034 <ascii_to_value>
 8009310:	0003      	movs	r3, r0
 8009312:	001a      	movs	r2, r3
 8009314:	2301      	movs	r3, #1
 8009316:	4053      	eors	r3, r2
 8009318:	b2db      	uxtb	r3, r3
 800931a:	2b00      	cmp	r3, #0
 800931c:	d005      	beq.n	800932a <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800931e:	4b73      	ldr	r3, [pc, #460]	; (80094ec <astronode_decode_answer_transport+0x31c>)
 8009320:	0018      	movs	r0, r3
 8009322:	f7f9 fecf 	bl	80030c4 <send_debug_logs>
            return RS_FAILURE;
 8009326:	2300      	movs	r3, #0
 8009328:	e0d6      	b.n	80094d8 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 800932a:	2317      	movs	r3, #23
 800932c:	18fb      	adds	r3, r7, r3
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	011b      	lsls	r3, r3, #4
 8009332:	b2d9      	uxtb	r1, r3
 8009334:	2316      	movs	r3, #22
 8009336:	18fb      	adds	r3, r7, r3
 8009338:	781a      	ldrb	r2, [r3, #0]
 800933a:	201c      	movs	r0, #28
 800933c:	183b      	adds	r3, r7, r0
 800933e:	881b      	ldrh	r3, [r3, #0]
 8009340:	1838      	adds	r0, r7, r0
 8009342:	1c5c      	adds	r4, r3, #1
 8009344:	8004      	strh	r4, [r0, #0]
 8009346:	0018      	movs	r0, r3
 8009348:	188b      	adds	r3, r1, r2
 800934a:	b2da      	uxtb	r2, r3
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	181b      	adds	r3, r3, r0
 8009350:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8009352:	221e      	movs	r2, #30
 8009354:	18bb      	adds	r3, r7, r2
 8009356:	18ba      	adds	r2, r7, r2
 8009358:	8812      	ldrh	r2, [r2, #0]
 800935a:	3202      	adds	r2, #2
 800935c:	801a      	strh	r2, [r3, #0]
 800935e:	231e      	movs	r3, #30
 8009360:	18fb      	adds	r3, r7, r3
 8009362:	881a      	ldrh	r2, [r3, #0]
 8009364:	260a      	movs	r6, #10
 8009366:	19bb      	adds	r3, r7, r6
 8009368:	881b      	ldrh	r3, [r3, #0]
 800936a:	3b05      	subs	r3, #5
 800936c:	429a      	cmp	r2, r3
 800936e:	dbb0      	blt.n	80092d2 <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	251a      	movs	r5, #26
 8009374:	197c      	adds	r4, r7, r5
 8009376:	4a5e      	ldr	r2, [pc, #376]	; (80094f0 <astronode_decode_answer_transport+0x320>)
 8009378:	2101      	movs	r1, #1
 800937a:	0018      	movs	r0, r3
 800937c:	f000 f91e 	bl	80095bc <calculate_crc>
 8009380:	0003      	movs	r3, r0
 8009382:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	1c58      	adds	r0, r3, #1
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	22c4      	movs	r2, #196	; 0xc4
 800938c:	5a99      	ldrh	r1, [r3, r2]
 800938e:	197c      	adds	r4, r7, r5
 8009390:	197b      	adds	r3, r7, r5
 8009392:	881b      	ldrh	r3, [r3, #0]
 8009394:	001a      	movs	r2, r3
 8009396:	f000 f911 	bl	80095bc <calculate_crc>
 800939a:	0003      	movs	r3, r0
 800939c:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 800939e:	197b      	adds	r3, r7, r5
 80093a0:	881b      	ldrh	r3, [r3, #0]
 80093a2:	021b      	lsls	r3, r3, #8
 80093a4:	b21a      	sxth	r2, r3
 80093a6:	0029      	movs	r1, r5
 80093a8:	197b      	adds	r3, r7, r5
 80093aa:	881b      	ldrh	r3, [r3, #0]
 80093ac:	0a1b      	lsrs	r3, r3, #8
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	b21b      	sxth	r3, r3
 80093b2:	4313      	orrs	r3, r2
 80093b4:	b21a      	sxth	r2, r3
 80093b6:	187b      	adds	r3, r7, r1
 80093b8:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 80093ba:	19bb      	adds	r3, r7, r6
 80093bc:	881b      	ldrh	r3, [r3, #0]
 80093be:	3b05      	subs	r3, #5
 80093c0:	68fa      	ldr	r2, [r7, #12]
 80093c2:	18d3      	adds	r3, r2, r3
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	2217      	movs	r2, #23
 80093c8:	18ba      	adds	r2, r7, r2
 80093ca:	0011      	movs	r1, r2
 80093cc:	0018      	movs	r0, r3
 80093ce:	f7ff fe31 	bl	8009034 <ascii_to_value>
 80093d2:	0003      	movs	r3, r0
 80093d4:	001a      	movs	r2, r3
 80093d6:	2301      	movs	r3, #1
 80093d8:	4053      	eors	r3, r2
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d112      	bne.n	8009406 <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 80093e0:	19bb      	adds	r3, r7, r6
 80093e2:	881b      	ldrh	r3, [r3, #0]
 80093e4:	3b04      	subs	r3, #4
 80093e6:	68fa      	ldr	r2, [r7, #12]
 80093e8:	18d3      	adds	r3, r2, r3
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	2216      	movs	r2, #22
 80093ee:	18ba      	adds	r2, r7, r2
 80093f0:	0011      	movs	r1, r2
 80093f2:	0018      	movs	r0, r3
 80093f4:	f7ff fe1e 	bl	8009034 <ascii_to_value>
 80093f8:	0003      	movs	r3, r0
 80093fa:	001a      	movs	r2, r3
 80093fc:	2301      	movs	r3, #1
 80093fe:	4053      	eors	r3, r2
 8009400:	b2db      	uxtb	r3, r3
 8009402:	2b00      	cmp	r3, #0
 8009404:	d005      	beq.n	8009412 <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8009406:	4b39      	ldr	r3, [pc, #228]	; (80094ec <astronode_decode_answer_transport+0x31c>)
 8009408:	0018      	movs	r0, r3
 800940a:	f7f9 fe5b 	bl	80030c4 <send_debug_logs>
        return RS_FAILURE;
 800940e:	2300      	movs	r3, #0
 8009410:	e062      	b.n	80094d8 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 8009412:	2017      	movs	r0, #23
 8009414:	183b      	adds	r3, r7, r0
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	b29b      	uxth	r3, r3
 800941a:	031b      	lsls	r3, r3, #12
 800941c:	b299      	uxth	r1, r3
 800941e:	2416      	movs	r4, #22
 8009420:	193b      	adds	r3, r7, r4
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	b29b      	uxth	r3, r3
 8009426:	021b      	lsls	r3, r3, #8
 8009428:	b29a      	uxth	r2, r3
 800942a:	2318      	movs	r3, #24
 800942c:	18fb      	adds	r3, r7, r3
 800942e:	188a      	adds	r2, r1, r2
 8009430:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 8009432:	250a      	movs	r5, #10
 8009434:	197b      	adds	r3, r7, r5
 8009436:	881b      	ldrh	r3, [r3, #0]
 8009438:	3b03      	subs	r3, #3
 800943a:	68fa      	ldr	r2, [r7, #12]
 800943c:	18d3      	adds	r3, r2, r3
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	183a      	adds	r2, r7, r0
 8009442:	0011      	movs	r1, r2
 8009444:	0018      	movs	r0, r3
 8009446:	f7ff fdf5 	bl	8009034 <ascii_to_value>
 800944a:	0003      	movs	r3, r0
 800944c:	001a      	movs	r2, r3
 800944e:	2301      	movs	r3, #1
 8009450:	4053      	eors	r3, r2
 8009452:	b2db      	uxtb	r3, r3
 8009454:	2b00      	cmp	r3, #0
 8009456:	d111      	bne.n	800947c <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 8009458:	197b      	adds	r3, r7, r5
 800945a:	881b      	ldrh	r3, [r3, #0]
 800945c:	3b02      	subs	r3, #2
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	18d3      	adds	r3, r2, r3
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	193a      	adds	r2, r7, r4
 8009466:	0011      	movs	r1, r2
 8009468:	0018      	movs	r0, r3
 800946a:	f7ff fde3 	bl	8009034 <ascii_to_value>
 800946e:	0003      	movs	r3, r0
 8009470:	001a      	movs	r2, r3
 8009472:	2301      	movs	r3, #1
 8009474:	4053      	eors	r3, r2
 8009476:	b2db      	uxtb	r3, r3
 8009478:	2b00      	cmp	r3, #0
 800947a:	d005      	beq.n	8009488 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800947c:	4b1b      	ldr	r3, [pc, #108]	; (80094ec <astronode_decode_answer_transport+0x31c>)
 800947e:	0018      	movs	r0, r3
 8009480:	f7f9 fe20 	bl	80030c4 <send_debug_logs>
        return RS_FAILURE;
 8009484:	2300      	movs	r3, #0
 8009486:	e027      	b.n	80094d8 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 8009488:	2317      	movs	r3, #23
 800948a:	18fb      	adds	r3, r7, r3
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	b29b      	uxth	r3, r3
 8009490:	011b      	lsls	r3, r3, #4
 8009492:	b29a      	uxth	r2, r3
 8009494:	2316      	movs	r3, #22
 8009496:	18fb      	adds	r3, r7, r3
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	b29b      	uxth	r3, r3
 800949c:	18d3      	adds	r3, r2, r3
 800949e:	b299      	uxth	r1, r3
 80094a0:	2018      	movs	r0, #24
 80094a2:	183b      	adds	r3, r7, r0
 80094a4:	183a      	adds	r2, r7, r0
 80094a6:	8812      	ldrh	r2, [r2, #0]
 80094a8:	188a      	adds	r2, r1, r2
 80094aa:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 80094ac:	183a      	adds	r2, r7, r0
 80094ae:	231a      	movs	r3, #26
 80094b0:	18fb      	adds	r3, r7, r3
 80094b2:	8812      	ldrh	r2, [r2, #0]
 80094b4:	881b      	ldrh	r3, [r3, #0]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d005      	beq.n	80094c6 <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 80094ba:	4b0e      	ldr	r3, [pc, #56]	; (80094f4 <astronode_decode_answer_transport+0x324>)
 80094bc:	0018      	movs	r0, r3
 80094be:	f7f9 fe01 	bl	80030c4 <send_debug_logs>
        return RS_FAILURE;
 80094c2:	2300      	movs	r3, #0
 80094c4:	e008      	b.n	80094d8 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	2bff      	cmp	r3, #255	; 0xff
 80094cc:	d103      	bne.n	80094d6 <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	0018      	movs	r0, r3
 80094d2:	f000 f8c3 	bl	800965c <check_for_error>
    }

    return RS_SUCCESS;
 80094d6:	2301      	movs	r3, #1
}
 80094d8:	0018      	movs	r0, r3
 80094da:	46bd      	mov	sp, r7
 80094dc:	b009      	add	sp, #36	; 0x24
 80094de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094e0:	08014550 	.word	0x08014550
 80094e4:	080145a0 	.word	0x080145a0
 80094e8:	080145f0 	.word	0x080145f0
 80094ec:	08014640 	.word	0x08014640
 80094f0:	0000ffff 	.word	0x0000ffff
 80094f4:	0801468c 	.word	0x0801468c

080094f8 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 80094f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094fa:	4c2b      	ldr	r4, [pc, #172]	; (80095a8 <astronode_transport_send_receive+0xb0>)
 80094fc:	44a5      	add	sp, r4
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
 8009502:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8009504:	4b29      	ldr	r3, [pc, #164]	; (80095ac <astronode_transport_send_receive+0xb4>)
 8009506:	25ca      	movs	r5, #202	; 0xca
 8009508:	00ad      	lsls	r5, r5, #2
 800950a:	195b      	adds	r3, r3, r5
 800950c:	19db      	adds	r3, r3, r7
 800950e:	2200      	movs	r2, #0
 8009510:	601a      	str	r2, [r3, #0]
 8009512:	3304      	adds	r3, #4
 8009514:	22c4      	movs	r2, #196	; 0xc4
 8009516:	0052      	lsls	r2, r2, #1
 8009518:	2100      	movs	r1, #0
 800951a:	0018      	movs	r0, r3
 800951c:	f003 f9a4 	bl	800c868 <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8009520:	4b23      	ldr	r3, [pc, #140]	; (80095b0 <astronode_transport_send_receive+0xb8>)
 8009522:	195b      	adds	r3, r3, r5
 8009524:	19db      	adds	r3, r3, r7
 8009526:	2200      	movs	r2, #0
 8009528:	601a      	str	r2, [r3, #0]
 800952a:	3304      	adds	r3, #4
 800952c:	22c4      	movs	r2, #196	; 0xc4
 800952e:	0052      	lsls	r2, r2, #1
 8009530:	2100      	movs	r1, #0
 8009532:	0018      	movs	r0, r3
 8009534:	f003 f998 	bl	800c868 <memset>
    uint16_t answer_length =  0;
 8009538:	4b1e      	ldr	r3, [pc, #120]	; (80095b4 <astronode_transport_send_receive+0xbc>)
 800953a:	195b      	adds	r3, r3, r5
 800953c:	19db      	adds	r3, r3, r7
 800953e:	2200      	movs	r2, #0
 8009540:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 8009542:	4e1d      	ldr	r6, [pc, #116]	; (80095b8 <astronode_transport_send_receive+0xc0>)
 8009544:	19bc      	adds	r4, r7, r6
 8009546:	23cc      	movs	r3, #204	; 0xcc
 8009548:	005b      	lsls	r3, r3, #1
 800954a:	18fa      	adds	r2, r7, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	0011      	movs	r1, r2
 8009550:	0018      	movs	r0, r3
 8009552:	f7ff fd9b 	bl	800908c <astronode_create_request_transport>
 8009556:	0003      	movs	r3, r0
 8009558:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 800955a:	19bb      	adds	r3, r7, r6
 800955c:	881a      	ldrh	r2, [r3, #0]
 800955e:	23cc      	movs	r3, #204	; 0xcc
 8009560:	005b      	lsls	r3, r3, #1
 8009562:	18fb      	adds	r3, r7, r3
 8009564:	0011      	movs	r1, r2
 8009566:	0018      	movs	r0, r3
 8009568:	f7f9 fdf8 	bl	800315c <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 800956c:	230a      	movs	r3, #10
 800956e:	18fa      	adds	r2, r7, r3
 8009570:	240c      	movs	r4, #12
 8009572:	193b      	adds	r3, r7, r4
 8009574:	0011      	movs	r1, r2
 8009576:	0018      	movs	r0, r3
 8009578:	f000 f92c 	bl	80097d4 <receive_astronode_answer>
 800957c:	0003      	movs	r3, r0
 800957e:	2b01      	cmp	r3, #1
 8009580:	d10a      	bne.n	8009598 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 8009582:	4b0c      	ldr	r3, [pc, #48]	; (80095b4 <astronode_transport_send_receive+0xbc>)
 8009584:	195b      	adds	r3, r3, r5
 8009586:	19db      	adds	r3, r3, r7
 8009588:	8819      	ldrh	r1, [r3, #0]
 800958a:	683a      	ldr	r2, [r7, #0]
 800958c:	193b      	adds	r3, r7, r4
 800958e:	0018      	movs	r0, r3
 8009590:	f7ff fe1e 	bl	80091d0 <astronode_decode_answer_transport>
 8009594:	0003      	movs	r3, r0
 8009596:	e000      	b.n	800959a <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 8009598:	2300      	movs	r3, #0
    }
}
 800959a:	0018      	movs	r0, r3
 800959c:	46bd      	mov	sp, r7
 800959e:	23cb      	movs	r3, #203	; 0xcb
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	449d      	add	sp, r3
 80095a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095a6:	46c0      	nop			; (mov r8, r8)
 80095a8:	fffffcd4 	.word	0xfffffcd4
 80095ac:	fffffe70 	.word	0xfffffe70
 80095b0:	fffffce4 	.word	0xfffffce4
 80095b4:	fffffce2 	.word	0xfffffce2
 80095b8:	00000326 	.word	0x00000326

080095bc <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 80095bc:	b590      	push	{r4, r7, lr}
 80095be:	b085      	sub	sp, #20
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	0008      	movs	r0, r1
 80095c6:	0011      	movs	r1, r2
 80095c8:	1cbb      	adds	r3, r7, #2
 80095ca:	1c02      	adds	r2, r0, #0
 80095cc:	801a      	strh	r2, [r3, #0]
 80095ce:	003b      	movs	r3, r7
 80095d0:	1c0a      	adds	r2, r1, #0
 80095d2:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 80095d4:	230e      	movs	r3, #14
 80095d6:	18fb      	adds	r3, r7, r3
 80095d8:	003a      	movs	r2, r7
 80095da:	8812      	ldrh	r2, [r2, #0]
 80095dc:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 80095de:	e02e      	b.n	800963e <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 80095e0:	240e      	movs	r4, #14
 80095e2:	193b      	adds	r3, r7, r4
 80095e4:	881b      	ldrh	r3, [r3, #0]
 80095e6:	0a1b      	lsrs	r3, r3, #8
 80095e8:	b299      	uxth	r1, r3
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	1c5a      	adds	r2, r3, #1
 80095ee:	607a      	str	r2, [r7, #4]
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	b29a      	uxth	r2, r3
 80095f4:	200c      	movs	r0, #12
 80095f6:	183b      	adds	r3, r7, r0
 80095f8:	404a      	eors	r2, r1
 80095fa:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 80095fc:	183b      	adds	r3, r7, r0
 80095fe:	881b      	ldrh	r3, [r3, #0]
 8009600:	091b      	lsrs	r3, r3, #4
 8009602:	b299      	uxth	r1, r3
 8009604:	183b      	adds	r3, r7, r0
 8009606:	183a      	adds	r2, r7, r0
 8009608:	8812      	ldrh	r2, [r2, #0]
 800960a:	404a      	eors	r2, r1
 800960c:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 800960e:	0021      	movs	r1, r4
 8009610:	187b      	adds	r3, r7, r1
 8009612:	881b      	ldrh	r3, [r3, #0]
 8009614:	021b      	lsls	r3, r3, #8
 8009616:	b21a      	sxth	r2, r3
 8009618:	183b      	adds	r3, r7, r0
 800961a:	881b      	ldrh	r3, [r3, #0]
 800961c:	031b      	lsls	r3, r3, #12
 800961e:	b21b      	sxth	r3, r3
 8009620:	4053      	eors	r3, r2
 8009622:	b21a      	sxth	r2, r3
 8009624:	183b      	adds	r3, r7, r0
 8009626:	881b      	ldrh	r3, [r3, #0]
 8009628:	015b      	lsls	r3, r3, #5
 800962a:	b21b      	sxth	r3, r3
 800962c:	4053      	eors	r3, r2
 800962e:	b21a      	sxth	r2, r3
 8009630:	183b      	adds	r3, r7, r0
 8009632:	2000      	movs	r0, #0
 8009634:	5e1b      	ldrsh	r3, [r3, r0]
 8009636:	4053      	eors	r3, r2
 8009638:	b21a      	sxth	r2, r3
 800963a:	187b      	adds	r3, r7, r1
 800963c:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 800963e:	1cbb      	adds	r3, r7, #2
 8009640:	881b      	ldrh	r3, [r3, #0]
 8009642:	1cba      	adds	r2, r7, #2
 8009644:	1e59      	subs	r1, r3, #1
 8009646:	8011      	strh	r1, [r2, #0]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d1c9      	bne.n	80095e0 <calculate_crc+0x24>
    }
    return crc;
 800964c:	230e      	movs	r3, #14
 800964e:	18fb      	adds	r3, r7, r3
 8009650:	881b      	ldrh	r3, [r3, #0]
}
 8009652:	0018      	movs	r0, r3
 8009654:	46bd      	mov	sp, r7
 8009656:	b005      	add	sp, #20
 8009658:	bd90      	pop	{r4, r7, pc}
	...

0800965c <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	785b      	ldrb	r3, [r3, #1]
 8009668:	b299      	uxth	r1, r3
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	789b      	ldrb	r3, [r3, #2]
 800966e:	b29b      	uxth	r3, r3
 8009670:	021b      	lsls	r3, r3, #8
 8009672:	b29a      	uxth	r2, r3
 8009674:	200e      	movs	r0, #14
 8009676:	183b      	adds	r3, r7, r0
 8009678:	188a      	adds	r2, r1, r2
 800967a:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 800967c:	183b      	adds	r3, r7, r0
 800967e:	881b      	ldrh	r3, [r3, #0]
 8009680:	4a40      	ldr	r2, [pc, #256]	; (8009784 <check_for_error+0x128>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d100      	bne.n	8009688 <check_for_error+0x2c>
 8009686:	e06f      	b.n	8009768 <check_for_error+0x10c>
 8009688:	4a3e      	ldr	r2, [pc, #248]	; (8009784 <check_for_error+0x128>)
 800968a:	4293      	cmp	r3, r2
 800968c:	dd00      	ble.n	8009690 <check_for_error+0x34>
 800968e:	e070      	b.n	8009772 <check_for_error+0x116>
 8009690:	4a3d      	ldr	r2, [pc, #244]	; (8009788 <check_for_error+0x12c>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d100      	bne.n	8009698 <check_for_error+0x3c>
 8009696:	e062      	b.n	800975e <check_for_error+0x102>
 8009698:	4a3b      	ldr	r2, [pc, #236]	; (8009788 <check_for_error+0x12c>)
 800969a:	4293      	cmp	r3, r2
 800969c:	dd00      	ble.n	80096a0 <check_for_error+0x44>
 800969e:	e068      	b.n	8009772 <check_for_error+0x116>
 80096a0:	4a3a      	ldr	r2, [pc, #232]	; (800978c <check_for_error+0x130>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d056      	beq.n	8009754 <check_for_error+0xf8>
 80096a6:	4a39      	ldr	r2, [pc, #228]	; (800978c <check_for_error+0x130>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	dd00      	ble.n	80096ae <check_for_error+0x52>
 80096ac:	e061      	b.n	8009772 <check_for_error+0x116>
 80096ae:	4a38      	ldr	r2, [pc, #224]	; (8009790 <check_for_error+0x134>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d04a      	beq.n	800974a <check_for_error+0xee>
 80096b4:	4a36      	ldr	r2, [pc, #216]	; (8009790 <check_for_error+0x134>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	dc5b      	bgt.n	8009772 <check_for_error+0x116>
 80096ba:	4a36      	ldr	r2, [pc, #216]	; (8009794 <check_for_error+0x138>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d03f      	beq.n	8009740 <check_for_error+0xe4>
 80096c0:	4a34      	ldr	r2, [pc, #208]	; (8009794 <check_for_error+0x138>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	dc55      	bgt.n	8009772 <check_for_error+0x116>
 80096c6:	4a34      	ldr	r2, [pc, #208]	; (8009798 <check_for_error+0x13c>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d034      	beq.n	8009736 <check_for_error+0xda>
 80096cc:	4a32      	ldr	r2, [pc, #200]	; (8009798 <check_for_error+0x13c>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	dc4f      	bgt.n	8009772 <check_for_error+0x116>
 80096d2:	4a32      	ldr	r2, [pc, #200]	; (800979c <check_for_error+0x140>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d029      	beq.n	800972c <check_for_error+0xd0>
 80096d8:	4a30      	ldr	r2, [pc, #192]	; (800979c <check_for_error+0x140>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	dc49      	bgt.n	8009772 <check_for_error+0x116>
 80096de:	4a30      	ldr	r2, [pc, #192]	; (80097a0 <check_for_error+0x144>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d01e      	beq.n	8009722 <check_for_error+0xc6>
 80096e4:	4a2e      	ldr	r2, [pc, #184]	; (80097a0 <check_for_error+0x144>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	dc43      	bgt.n	8009772 <check_for_error+0x116>
 80096ea:	2222      	movs	r2, #34	; 0x22
 80096ec:	32ff      	adds	r2, #255	; 0xff
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d012      	beq.n	8009718 <check_for_error+0xbc>
 80096f2:	2291      	movs	r2, #145	; 0x91
 80096f4:	0052      	lsls	r2, r2, #1
 80096f6:	4293      	cmp	r3, r2
 80096f8:	da3b      	bge.n	8009772 <check_for_error+0x116>
 80096fa:	2b01      	cmp	r3, #1
 80096fc:	d002      	beq.n	8009704 <check_for_error+0xa8>
 80096fe:	2b11      	cmp	r3, #17
 8009700:	d005      	beq.n	800970e <check_for_error+0xb2>
 8009702:	e036      	b.n	8009772 <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 8009704:	4b27      	ldr	r3, [pc, #156]	; (80097a4 <check_for_error+0x148>)
 8009706:	0018      	movs	r0, r3
 8009708:	f7f9 fcdc 	bl	80030c4 <send_debug_logs>
            break;
 800970c:	e036      	b.n	800977c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 800970e:	4b26      	ldr	r3, [pc, #152]	; (80097a8 <check_for_error+0x14c>)
 8009710:	0018      	movs	r0, r3
 8009712:	f7f9 fcd7 	bl	80030c4 <send_debug_logs>
            break;
 8009716:	e031      	b.n	800977c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 8009718:	4b24      	ldr	r3, [pc, #144]	; (80097ac <check_for_error+0x150>)
 800971a:	0018      	movs	r0, r3
 800971c:	f7f9 fcd2 	bl	80030c4 <send_debug_logs>
            break;
 8009720:	e02c      	b.n	800977c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 8009722:	4b23      	ldr	r3, [pc, #140]	; (80097b0 <check_for_error+0x154>)
 8009724:	0018      	movs	r0, r3
 8009726:	f7f9 fccd 	bl	80030c4 <send_debug_logs>
            break;
 800972a:	e027      	b.n	800977c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 800972c:	4b21      	ldr	r3, [pc, #132]	; (80097b4 <check_for_error+0x158>)
 800972e:	0018      	movs	r0, r3
 8009730:	f7f9 fcc8 	bl	80030c4 <send_debug_logs>
            break;
 8009734:	e022      	b.n	800977c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 8009736:	4b20      	ldr	r3, [pc, #128]	; (80097b8 <check_for_error+0x15c>)
 8009738:	0018      	movs	r0, r3
 800973a:	f7f9 fcc3 	bl	80030c4 <send_debug_logs>
            break;
 800973e:	e01d      	b.n	800977c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 8009740:	4b1e      	ldr	r3, [pc, #120]	; (80097bc <check_for_error+0x160>)
 8009742:	0018      	movs	r0, r3
 8009744:	f7f9 fcbe 	bl	80030c4 <send_debug_logs>
            break;
 8009748:	e018      	b.n	800977c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 800974a:	4b1d      	ldr	r3, [pc, #116]	; (80097c0 <check_for_error+0x164>)
 800974c:	0018      	movs	r0, r3
 800974e:	f7f9 fcb9 	bl	80030c4 <send_debug_logs>
            break;
 8009752:	e013      	b.n	800977c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 8009754:	4b1b      	ldr	r3, [pc, #108]	; (80097c4 <check_for_error+0x168>)
 8009756:	0018      	movs	r0, r3
 8009758:	f7f9 fcb4 	bl	80030c4 <send_debug_logs>
            break;
 800975c:	e00e      	b.n	800977c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 800975e:	4b1a      	ldr	r3, [pc, #104]	; (80097c8 <check_for_error+0x16c>)
 8009760:	0018      	movs	r0, r3
 8009762:	f7f9 fcaf 	bl	80030c4 <send_debug_logs>
            break;
 8009766:	e009      	b.n	800977c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 8009768:	4b18      	ldr	r3, [pc, #96]	; (80097cc <check_for_error+0x170>)
 800976a:	0018      	movs	r0, r3
 800976c:	f7f9 fcaa 	bl	80030c4 <send_debug_logs>
            break;
 8009770:	e004      	b.n	800977c <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 8009772:	4b17      	ldr	r3, [pc, #92]	; (80097d0 <check_for_error+0x174>)
 8009774:	0018      	movs	r0, r3
 8009776:	f7f9 fca5 	bl	80030c4 <send_debug_logs>
            break;
 800977a:	46c0      	nop			; (mov r8, r8)
    }
}
 800977c:	46c0      	nop			; (mov r8, r8)
 800977e:	46bd      	mov	sp, r7
 8009780:	b004      	add	sp, #16
 8009782:	bd80      	pop	{r7, pc}
 8009784:	00004601 	.word	0x00004601
 8009788:	00004501 	.word	0x00004501
 800978c:	00003501 	.word	0x00003501
 8009790:	00002601 	.word	0x00002601
 8009794:	00002511 	.word	0x00002511
 8009798:	00002501 	.word	0x00002501
 800979c:	00000611 	.word	0x00000611
 80097a0:	00000601 	.word	0x00000601
 80097a4:	080146d0 	.word	0x080146d0
 80097a8:	0801471c 	.word	0x0801471c
 80097ac:	08014780 	.word	0x08014780
 80097b0:	080147b8 	.word	0x080147b8
 80097b4:	0801485c 	.word	0x0801485c
 80097b8:	080148c4 	.word	0x080148c4
 80097bc:	08014924 	.word	0x08014924
 80097c0:	080149b0 	.word	0x080149b0
 80097c4:	08014a10 	.word	0x08014a10
 80097c8:	08014abc 	.word	0x08014abc
 80097cc:	08014b08 	.word	0x08014b08
 80097d0:	08014b50 	.word	0x08014b50

080097d4 <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 80097d4:	b5b0      	push	{r4, r5, r7, lr}
 80097d6:	b086      	sub	sp, #24
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 80097de:	230f      	movs	r3, #15
 80097e0:	18fb      	adds	r3, r7, r3
 80097e2:	2200      	movs	r2, #0
 80097e4:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 80097e6:	2316      	movs	r3, #22
 80097e8:	18fb      	adds	r3, r7, r3
 80097ea:	2200      	movs	r2, #0
 80097ec:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 80097ee:	f7f9 fcf9 	bl	80031e4 <get_systick>
 80097f2:	0003      	movs	r3, r0
 80097f4:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 80097f6:	2315      	movs	r3, #21
 80097f8:	18fb      	adds	r3, r7, r3
 80097fa:	2200      	movs	r2, #0
 80097fc:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 80097fe:	e054      	b.n	80098aa <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 8009800:	4a34      	ldr	r2, [pc, #208]	; (80098d4 <receive_astronode_answer+0x100>)
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	0011      	movs	r1, r2
 8009806:	0018      	movs	r0, r3
 8009808:	f7f9 fcf4 	bl	80031f4 <is_systick_timeout_over>
 800980c:	1e03      	subs	r3, r0, #0
 800980e:	d005      	beq.n	800981c <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 8009810:	4b31      	ldr	r3, [pc, #196]	; (80098d8 <receive_astronode_answer+0x104>)
 8009812:	0018      	movs	r0, r3
 8009814:	f7f9 fc56 	bl	80030c4 <send_debug_logs>
            return RS_FAILURE;
 8009818:	2300      	movs	r3, #0
 800981a:	e057      	b.n	80098cc <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 800981c:	250f      	movs	r5, #15
 800981e:	197b      	adds	r3, r7, r5
 8009820:	0018      	movs	r0, r3
 8009822:	f7f9 fcb9 	bl	8003198 <is_astronode_character_received>
 8009826:	0003      	movs	r3, r0
 8009828:	0019      	movs	r1, r3
 800982a:	2016      	movs	r0, #22
 800982c:	183b      	adds	r3, r7, r0
 800982e:	183a      	adds	r2, r7, r0
 8009830:	8812      	ldrh	r2, [r2, #0]
 8009832:	801a      	strh	r2, [r3, #0]
 8009834:	2415      	movs	r4, #21
 8009836:	193b      	adds	r3, r7, r4
 8009838:	193a      	adds	r2, r7, r4
 800983a:	7812      	ldrb	r2, [r2, #0]
 800983c:	701a      	strb	r2, [r3, #0]
 800983e:	2900      	cmp	r1, #0
 8009840:	d033      	beq.n	80098aa <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 8009842:	197b      	adds	r3, r7, r5
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	2b02      	cmp	r3, #2
 8009848:	d105      	bne.n	8009856 <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 800984a:	193b      	adds	r3, r7, r4
 800984c:	2200      	movs	r2, #0
 800984e:	701a      	strb	r2, [r3, #0]
                length = 0;
 8009850:	183b      	adds	r3, r7, r0
 8009852:	2200      	movs	r2, #0
 8009854:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 8009856:	2116      	movs	r1, #22
 8009858:	187b      	adds	r3, r7, r1
 800985a:	881b      	ldrh	r3, [r3, #0]
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	18d3      	adds	r3, r2, r3
 8009860:	220f      	movs	r2, #15
 8009862:	18ba      	adds	r2, r7, r2
 8009864:	7812      	ldrb	r2, [r2, #0]
 8009866:	701a      	strb	r2, [r3, #0]
            length++;
 8009868:	187b      	adds	r3, r7, r1
 800986a:	881a      	ldrh	r2, [r3, #0]
 800986c:	187b      	adds	r3, r7, r1
 800986e:	3201      	adds	r2, #1
 8009870:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 8009872:	187b      	adds	r3, r7, r1
 8009874:	881b      	ldrh	r3, [r3, #0]
 8009876:	2bb2      	cmp	r3, #178	; 0xb2
 8009878:	d905      	bls.n	8009886 <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 800987a:	4b18      	ldr	r3, [pc, #96]	; (80098dc <receive_astronode_answer+0x108>)
 800987c:	0018      	movs	r0, r3
 800987e:	f7f9 fc21 	bl	80030c4 <send_debug_logs>
                return RS_FAILURE;
 8009882:	2300      	movs	r3, #0
 8009884:	e022      	b.n	80098cc <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 8009886:	230f      	movs	r3, #15
 8009888:	18fb      	adds	r3, r7, r3
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	2b03      	cmp	r3, #3
 800988e:	d10c      	bne.n	80098aa <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 8009890:	2216      	movs	r2, #22
 8009892:	18bb      	adds	r3, r7, r2
 8009894:	881b      	ldrh	r3, [r3, #0]
 8009896:	2b01      	cmp	r3, #1
 8009898:	d907      	bls.n	80098aa <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	18ba      	adds	r2, r7, r2
 800989e:	8812      	ldrh	r2, [r2, #0]
 80098a0:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 80098a2:	2315      	movs	r3, #21
 80098a4:	18fb      	adds	r3, r7, r3
 80098a6:	2201      	movs	r2, #1
 80098a8:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 80098aa:	2315      	movs	r3, #21
 80098ac:	18fb      	adds	r3, r7, r3
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	2201      	movs	r2, #1
 80098b2:	4053      	eors	r3, r2
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1a2      	bne.n	8009800 <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 80098ba:	4b09      	ldr	r3, [pc, #36]	; (80098e0 <receive_astronode_answer+0x10c>)
 80098bc:	0018      	movs	r0, r3
 80098be:	f7f9 fc01 	bl	80030c4 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	0018      	movs	r0, r3
 80098c6:	f7f9 fbfd 	bl	80030c4 <send_debug_logs>

    return RS_SUCCESS;
 80098ca:	2301      	movs	r3, #1
}
 80098cc:	0018      	movs	r0, r3
 80098ce:	46bd      	mov	sp, r7
 80098d0:	b006      	add	sp, #24
 80098d2:	bdb0      	pop	{r4, r5, r7, pc}
 80098d4:	000005dc 	.word	0x000005dc
 80098d8:	08014b74 	.word	0x08014b74
 80098dc:	08014b98 	.word	0x08014b98
 80098e0:	08014be4 	.word	0x08014be4

080098e4 <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	0002      	movs	r2, r0
 80098ec:	6039      	str	r1, [r7, #0]
 80098ee:	1dfb      	adds	r3, r7, #7
 80098f0:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 80098f2:	1dfb      	adds	r3, r7, #7
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	091b      	lsrs	r3, r3, #4
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	001a      	movs	r2, r3
 80098fc:	4b08      	ldr	r3, [pc, #32]	; (8009920 <uint8_to_ascii_buffer+0x3c>)
 80098fe:	5c9a      	ldrb	r2, [r3, r2]
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 8009904:	1dfb      	adds	r3, r7, #7
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	220f      	movs	r2, #15
 800990a:	401a      	ands	r2, r3
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	3301      	adds	r3, #1
 8009910:	4903      	ldr	r1, [pc, #12]	; (8009920 <uint8_to_ascii_buffer+0x3c>)
 8009912:	5c8a      	ldrb	r2, [r1, r2]
 8009914:	701a      	strb	r2, [r3, #0]
}
 8009916:	46c0      	nop			; (mov r8, r8)
 8009918:	46bd      	mov	sp, r7
 800991a:	b002      	add	sp, #8
 800991c:	bd80      	pop	{r7, pc}
 800991e:	46c0      	nop			; (mov r8, r8)
 8009920:	08014e48 	.word	0x08014e48

08009924 <lis2dw12_read_reg>:
  *
  */
int32_t __weak lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8009924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009926:	b087      	sub	sp, #28
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	0008      	movs	r0, r1
 800992e:	607a      	str	r2, [r7, #4]
 8009930:	0019      	movs	r1, r3
 8009932:	260b      	movs	r6, #11
 8009934:	19bb      	adds	r3, r7, r6
 8009936:	1c02      	adds	r2, r0, #0
 8009938:	701a      	strb	r2, [r3, #0]
 800993a:	2508      	movs	r5, #8
 800993c:	197b      	adds	r3, r7, r5
 800993e:	1c0a      	adds	r2, r1, #0
 8009940:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	685c      	ldr	r4, [r3, #4]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	68d8      	ldr	r0, [r3, #12]
 800994a:	197b      	adds	r3, r7, r5
 800994c:	881d      	ldrh	r5, [r3, #0]
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	19bb      	adds	r3, r7, r6
 8009952:	7819      	ldrb	r1, [r3, #0]
 8009954:	002b      	movs	r3, r5
 8009956:	47a0      	blx	r4
 8009958:	0003      	movs	r3, r0
 800995a:	617b      	str	r3, [r7, #20]

  return ret;
 800995c:	697b      	ldr	r3, [r7, #20]
}
 800995e:	0018      	movs	r0, r3
 8009960:	46bd      	mov	sp, r7
 8009962:	b007      	add	sp, #28
 8009964:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009966 <lis2dw12_write_reg>:
  *
  */
int32_t __weak lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 8009966:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009968:	b087      	sub	sp, #28
 800996a:	af00      	add	r7, sp, #0
 800996c:	60f8      	str	r0, [r7, #12]
 800996e:	0008      	movs	r0, r1
 8009970:	607a      	str	r2, [r7, #4]
 8009972:	0019      	movs	r1, r3
 8009974:	260b      	movs	r6, #11
 8009976:	19bb      	adds	r3, r7, r6
 8009978:	1c02      	adds	r2, r0, #0
 800997a:	701a      	strb	r2, [r3, #0]
 800997c:	2508      	movs	r5, #8
 800997e:	197b      	adds	r3, r7, r5
 8009980:	1c0a      	adds	r2, r1, #0
 8009982:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681c      	ldr	r4, [r3, #0]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	68d8      	ldr	r0, [r3, #12]
 800998c:	197b      	adds	r3, r7, r5
 800998e:	881d      	ldrh	r5, [r3, #0]
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	19bb      	adds	r3, r7, r6
 8009994:	7819      	ldrb	r1, [r3, #0]
 8009996:	002b      	movs	r3, r5
 8009998:	47a0      	blx	r4
 800999a:	0003      	movs	r3, r0
 800999c:	617b      	str	r3, [r7, #20]

  return ret;
 800999e:	697b      	ldr	r3, [r7, #20]
}
 80099a0:	0018      	movs	r0, r3
 80099a2:	46bd      	mov	sp, r7
 80099a4:	b007      	add	sp, #28
 80099a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080099a8 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 80099a8:	b590      	push	{r4, r7, lr}
 80099aa:	b087      	sub	sp, #28
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	000a      	movs	r2, r1
 80099b2:	1cfb      	adds	r3, r7, #3
 80099b4:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80099b6:	2410      	movs	r4, #16
 80099b8:	193a      	adds	r2, r7, r4
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	2301      	movs	r3, #1
 80099be:	2120      	movs	r1, #32
 80099c0:	f7ff ffb0 	bl	8009924 <lis2dw12_read_reg>
 80099c4:	0003      	movs	r3, r0
 80099c6:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d129      	bne.n	8009a22 <lis2dw12_power_mode_set+0x7a>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 80099ce:	1cfb      	adds	r3, r7, #3
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	089b      	lsrs	r3, r3, #2
 80099d4:	1c1a      	adds	r2, r3, #0
 80099d6:	2303      	movs	r3, #3
 80099d8:	4013      	ands	r3, r2
 80099da:	b2da      	uxtb	r2, r3
 80099dc:	193b      	adds	r3, r7, r4
 80099de:	2103      	movs	r1, #3
 80099e0:	400a      	ands	r2, r1
 80099e2:	0090      	lsls	r0, r2, #2
 80099e4:	781a      	ldrb	r2, [r3, #0]
 80099e6:	210c      	movs	r1, #12
 80099e8:	438a      	bics	r2, r1
 80099ea:	1c11      	adds	r1, r2, #0
 80099ec:	1c02      	adds	r2, r0, #0
 80099ee:	430a      	orrs	r2, r1
 80099f0:	701a      	strb	r2, [r3, #0]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 80099f2:	1cfb      	adds	r3, r7, #3
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	2203      	movs	r2, #3
 80099f8:	4013      	ands	r3, r2
 80099fa:	b2da      	uxtb	r2, r3
 80099fc:	193b      	adds	r3, r7, r4
 80099fe:	2103      	movs	r1, #3
 8009a00:	400a      	ands	r2, r1
 8009a02:	0010      	movs	r0, r2
 8009a04:	781a      	ldrb	r2, [r3, #0]
 8009a06:	2103      	movs	r1, #3
 8009a08:	438a      	bics	r2, r1
 8009a0a:	1c11      	adds	r1, r2, #0
 8009a0c:	1c02      	adds	r2, r0, #0
 8009a0e:	430a      	orrs	r2, r1
 8009a10:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8009a12:	193a      	adds	r2, r7, r4
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	2301      	movs	r3, #1
 8009a18:	2120      	movs	r1, #32
 8009a1a:	f7ff ffa4 	bl	8009966 <lis2dw12_write_reg>
 8009a1e:	0003      	movs	r3, r0
 8009a20:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d108      	bne.n	8009a3a <lis2dw12_power_mode_set+0x92>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8009a28:	230c      	movs	r3, #12
 8009a2a:	18fa      	adds	r2, r7, r3
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	2301      	movs	r3, #1
 8009a30:	2125      	movs	r1, #37	; 0x25
 8009a32:	f7ff ff77 	bl	8009924 <lis2dw12_read_reg>
 8009a36:	0003      	movs	r3, r0
 8009a38:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d11a      	bne.n	8009a76 <lis2dw12_power_mode_set+0xce>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8009a40:	1cfb      	adds	r3, r7, #3
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	091b      	lsrs	r3, r3, #4
 8009a46:	1c1a      	adds	r2, r3, #0
 8009a48:	2301      	movs	r3, #1
 8009a4a:	4013      	ands	r3, r2
 8009a4c:	b2da      	uxtb	r2, r3
 8009a4e:	240c      	movs	r4, #12
 8009a50:	193b      	adds	r3, r7, r4
 8009a52:	2101      	movs	r1, #1
 8009a54:	400a      	ands	r2, r1
 8009a56:	0090      	lsls	r0, r2, #2
 8009a58:	781a      	ldrb	r2, [r3, #0]
 8009a5a:	2104      	movs	r1, #4
 8009a5c:	438a      	bics	r2, r1
 8009a5e:	1c11      	adds	r1, r2, #0
 8009a60:	1c02      	adds	r2, r0, #0
 8009a62:	430a      	orrs	r2, r1
 8009a64:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8009a66:	193a      	adds	r2, r7, r4
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	2125      	movs	r1, #37	; 0x25
 8009a6e:	f7ff ff7a 	bl	8009966 <lis2dw12_write_reg>
 8009a72:	0003      	movs	r3, r0
 8009a74:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8009a76:	697b      	ldr	r3, [r7, #20]
}
 8009a78:	0018      	movs	r0, r3
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	b007      	add	sp, #28
 8009a7e:	bd90      	pop	{r4, r7, pc}

08009a80 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8009a80:	b590      	push	{r4, r7, lr}
 8009a82:	b087      	sub	sp, #28
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	000a      	movs	r2, r1
 8009a8a:	1cfb      	adds	r3, r7, #3
 8009a8c:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8009a8e:	2410      	movs	r4, #16
 8009a90:	193a      	adds	r2, r7, r4
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	2301      	movs	r3, #1
 8009a96:	2120      	movs	r1, #32
 8009a98:	f7ff ff44 	bl	8009924 <lis2dw12_read_reg>
 8009a9c:	0003      	movs	r3, r0
 8009a9e:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d115      	bne.n	8009ad2 <lis2dw12_data_rate_set+0x52>
  {
    ctrl1.odr = (uint8_t) val;
 8009aa6:	1cfb      	adds	r3, r7, #3
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	220f      	movs	r2, #15
 8009aac:	4013      	ands	r3, r2
 8009aae:	b2da      	uxtb	r2, r3
 8009ab0:	193b      	adds	r3, r7, r4
 8009ab2:	0110      	lsls	r0, r2, #4
 8009ab4:	781a      	ldrb	r2, [r3, #0]
 8009ab6:	210f      	movs	r1, #15
 8009ab8:	400a      	ands	r2, r1
 8009aba:	1c11      	adds	r1, r2, #0
 8009abc:	1c02      	adds	r2, r0, #0
 8009abe:	430a      	orrs	r2, r1
 8009ac0:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8009ac2:	193a      	adds	r2, r7, r4
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	2120      	movs	r1, #32
 8009aca:	f7ff ff4c 	bl	8009966 <lis2dw12_write_reg>
 8009ace:	0003      	movs	r3, r0
 8009ad0:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d108      	bne.n	8009aea <lis2dw12_data_rate_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8009ad8:	230c      	movs	r3, #12
 8009ada:	18fa      	adds	r2, r7, r3
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	2301      	movs	r3, #1
 8009ae0:	2122      	movs	r1, #34	; 0x22
 8009ae2:	f7ff ff1f 	bl	8009924 <lis2dw12_read_reg>
 8009ae6:	0003      	movs	r3, r0
 8009ae8:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d11a      	bne.n	8009b26 <lis2dw12_data_rate_set+0xa6>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8009af0:	1cfb      	adds	r3, r7, #3
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	091b      	lsrs	r3, r3, #4
 8009af6:	1c1a      	adds	r2, r3, #0
 8009af8:	2303      	movs	r3, #3
 8009afa:	4013      	ands	r3, r2
 8009afc:	b2da      	uxtb	r2, r3
 8009afe:	240c      	movs	r4, #12
 8009b00:	193b      	adds	r3, r7, r4
 8009b02:	2103      	movs	r1, #3
 8009b04:	400a      	ands	r2, r1
 8009b06:	0010      	movs	r0, r2
 8009b08:	781a      	ldrb	r2, [r3, #0]
 8009b0a:	2103      	movs	r1, #3
 8009b0c:	438a      	bics	r2, r1
 8009b0e:	1c11      	adds	r1, r2, #0
 8009b10:	1c02      	adds	r2, r0, #0
 8009b12:	430a      	orrs	r2, r1
 8009b14:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8009b16:	193a      	adds	r2, r7, r4
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	2122      	movs	r1, #34	; 0x22
 8009b1e:	f7ff ff22 	bl	8009966 <lis2dw12_write_reg>
 8009b22:	0003      	movs	r3, r0
 8009b24:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8009b26:	697b      	ldr	r3, [r7, #20]
}
 8009b28:	0018      	movs	r0, r3
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	b007      	add	sp, #28
 8009b2e:	bd90      	pop	{r4, r7, pc}

08009b30 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8009b30:	b590      	push	{r4, r7, lr}
 8009b32:	b085      	sub	sp, #20
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	000a      	movs	r2, r1
 8009b3a:	1cfb      	adds	r3, r7, #3
 8009b3c:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8009b3e:	2408      	movs	r4, #8
 8009b40:	193a      	adds	r2, r7, r4
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	2301      	movs	r3, #1
 8009b46:	2125      	movs	r1, #37	; 0x25
 8009b48:	f7ff feec 	bl	8009924 <lis2dw12_read_reg>
 8009b4c:	0003      	movs	r3, r0
 8009b4e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d117      	bne.n	8009b86 <lis2dw12_full_scale_set+0x56>
  {
    reg.fs = (uint8_t) val;
 8009b56:	1cfb      	adds	r3, r7, #3
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	2203      	movs	r2, #3
 8009b5c:	4013      	ands	r3, r2
 8009b5e:	b2da      	uxtb	r2, r3
 8009b60:	193b      	adds	r3, r7, r4
 8009b62:	2103      	movs	r1, #3
 8009b64:	400a      	ands	r2, r1
 8009b66:	0110      	lsls	r0, r2, #4
 8009b68:	781a      	ldrb	r2, [r3, #0]
 8009b6a:	2130      	movs	r1, #48	; 0x30
 8009b6c:	438a      	bics	r2, r1
 8009b6e:	1c11      	adds	r1, r2, #0
 8009b70:	1c02      	adds	r2, r0, #0
 8009b72:	430a      	orrs	r2, r1
 8009b74:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8009b76:	193a      	adds	r2, r7, r4
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	2125      	movs	r1, #37	; 0x25
 8009b7e:	f7ff fef2 	bl	8009966 <lis2dw12_write_reg>
 8009b82:	0003      	movs	r3, r0
 8009b84:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009b86:	68fb      	ldr	r3, [r7, #12]
}
 8009b88:	0018      	movs	r0, r3
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	b005      	add	sp, #20
 8009b8e:	bd90      	pop	{r4, r7, pc}

08009b90 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8009b9a:	683a      	ldr	r2, [r7, #0]
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	210f      	movs	r1, #15
 8009ba2:	f7ff febf 	bl	8009924 <lis2dw12_read_reg>
 8009ba6:	0003      	movs	r3, r0
 8009ba8:	60fb      	str	r3, [r7, #12]

  return ret;
 8009baa:	68fb      	ldr	r3, [r7, #12]
}
 8009bac:	0018      	movs	r0, r3
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	b004      	add	sp, #16
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <lis2dw12_reset_set>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8009bb4:	b590      	push	{r4, r7, lr}
 8009bb6:	b085      	sub	sp, #20
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	000a      	movs	r2, r1
 8009bbe:	1cfb      	adds	r3, r7, #3
 8009bc0:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8009bc2:	2408      	movs	r4, #8
 8009bc4:	193a      	adds	r2, r7, r4
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	2301      	movs	r3, #1
 8009bca:	2121      	movs	r1, #33	; 0x21
 8009bcc:	f7ff feaa 	bl	8009924 <lis2dw12_read_reg>
 8009bd0:	0003      	movs	r3, r0
 8009bd2:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d117      	bne.n	8009c0a <lis2dw12_reset_set+0x56>
  {
    reg.soft_reset = val;
 8009bda:	1cfb      	adds	r3, r7, #3
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	2201      	movs	r2, #1
 8009be0:	4013      	ands	r3, r2
 8009be2:	b2da      	uxtb	r2, r3
 8009be4:	193b      	adds	r3, r7, r4
 8009be6:	2101      	movs	r1, #1
 8009be8:	400a      	ands	r2, r1
 8009bea:	0190      	lsls	r0, r2, #6
 8009bec:	781a      	ldrb	r2, [r3, #0]
 8009bee:	2140      	movs	r1, #64	; 0x40
 8009bf0:	438a      	bics	r2, r1
 8009bf2:	1c11      	adds	r1, r2, #0
 8009bf4:	1c02      	adds	r2, r0, #0
 8009bf6:	430a      	orrs	r2, r1
 8009bf8:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8009bfa:	193a      	adds	r2, r7, r4
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	2301      	movs	r3, #1
 8009c00:	2121      	movs	r1, #33	; 0x21
 8009c02:	f7ff feb0 	bl	8009966 <lis2dw12_write_reg>
 8009c06:	0003      	movs	r3, r0
 8009c08:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
}
 8009c0c:	0018      	movs	r0, r3
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	b005      	add	sp, #20
 8009c12:	bd90      	pop	{r4, r7, pc}

08009c14 <lis2dw12_reset_get>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8009c14:	b590      	push	{r4, r7, lr}
 8009c16:	b085      	sub	sp, #20
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8009c1e:	2408      	movs	r4, #8
 8009c20:	193a      	adds	r2, r7, r4
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	2301      	movs	r3, #1
 8009c26:	2121      	movs	r1, #33	; 0x21
 8009c28:	f7ff fe7c 	bl	8009924 <lis2dw12_read_reg>
 8009c2c:	0003      	movs	r3, r0
 8009c2e:	60fb      	str	r3, [r7, #12]
  *val = reg.soft_reset;
 8009c30:	193b      	adds	r3, r7, r4
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	065b      	lsls	r3, r3, #25
 8009c36:	0fdb      	lsrs	r3, r3, #31
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	001a      	movs	r2, r3
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	701a      	strb	r2, [r3, #0]

  return ret;
 8009c40:	68fb      	ldr	r3, [r7, #12]
}
 8009c42:	0018      	movs	r0, r3
 8009c44:	46bd      	mov	sp, r7
 8009c46:	b005      	add	sp, #20
 8009c48:	bd90      	pop	{r4, r7, pc}

08009c4a <lis2dw12_filter_path_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_filter_path_set(stmdev_ctx_t *ctx,
                                 lis2dw12_fds_t val)
{
 8009c4a:	b590      	push	{r4, r7, lr}
 8009c4c:	b087      	sub	sp, #28
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
 8009c52:	000a      	movs	r2, r1
 8009c54:	1cfb      	adds	r3, r7, #3
 8009c56:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t ctrl6;
  lis2dw12_ctrl_reg7_t ctrl_reg7;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8009c58:	2410      	movs	r4, #16
 8009c5a:	193a      	adds	r2, r7, r4
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	2301      	movs	r3, #1
 8009c60:	2125      	movs	r1, #37	; 0x25
 8009c62:	f7ff fe5f 	bl	8009924 <lis2dw12_read_reg>
 8009c66:	0003      	movs	r3, r0
 8009c68:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d119      	bne.n	8009ca4 <lis2dw12_filter_path_set+0x5a>
  {
    ctrl6.fds = ((uint8_t) val & 0x10U) >> 4;
 8009c70:	1cfb      	adds	r3, r7, #3
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	091b      	lsrs	r3, r3, #4
 8009c76:	1c1a      	adds	r2, r3, #0
 8009c78:	2301      	movs	r3, #1
 8009c7a:	4013      	ands	r3, r2
 8009c7c:	b2da      	uxtb	r2, r3
 8009c7e:	193b      	adds	r3, r7, r4
 8009c80:	2101      	movs	r1, #1
 8009c82:	400a      	ands	r2, r1
 8009c84:	00d0      	lsls	r0, r2, #3
 8009c86:	781a      	ldrb	r2, [r3, #0]
 8009c88:	2108      	movs	r1, #8
 8009c8a:	438a      	bics	r2, r1
 8009c8c:	1c11      	adds	r1, r2, #0
 8009c8e:	1c02      	adds	r2, r0, #0
 8009c90:	430a      	orrs	r2, r1
 8009c92:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8009c94:	193a      	adds	r2, r7, r4
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	2301      	movs	r3, #1
 8009c9a:	2125      	movs	r1, #37	; 0x25
 8009c9c:	f7ff fe63 	bl	8009966 <lis2dw12_write_reg>
 8009ca0:	0003      	movs	r3, r0
 8009ca2:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d108      	bne.n	8009cbc <lis2dw12_filter_path_set+0x72>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL_REG7,
 8009caa:	230c      	movs	r3, #12
 8009cac:	18fa      	adds	r2, r7, r3
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	213f      	movs	r1, #63	; 0x3f
 8009cb4:	f7ff fe36 	bl	8009924 <lis2dw12_read_reg>
 8009cb8:	0003      	movs	r3, r0
 8009cba:	617b      	str	r3, [r7, #20]
                            (uint8_t *) &ctrl_reg7, 1);
  }

  if (ret == 0)
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d118      	bne.n	8009cf4 <lis2dw12_filter_path_set+0xaa>
  {
    ctrl_reg7.usr_off_on_out = (uint8_t) val & 0x01U;
 8009cc2:	1cfb      	adds	r3, r7, #3
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	4013      	ands	r3, r2
 8009cca:	b2da      	uxtb	r2, r3
 8009ccc:	240c      	movs	r4, #12
 8009cce:	193b      	adds	r3, r7, r4
 8009cd0:	2101      	movs	r1, #1
 8009cd2:	400a      	ands	r2, r1
 8009cd4:	0110      	lsls	r0, r2, #4
 8009cd6:	781a      	ldrb	r2, [r3, #0]
 8009cd8:	2110      	movs	r1, #16
 8009cda:	438a      	bics	r2, r1
 8009cdc:	1c11      	adds	r1, r2, #0
 8009cde:	1c02      	adds	r2, r0, #0
 8009ce0:	430a      	orrs	r2, r1
 8009ce2:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL_REG7,
 8009ce4:	193a      	adds	r2, r7, r4
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	2301      	movs	r3, #1
 8009cea:	213f      	movs	r1, #63	; 0x3f
 8009cec:	f7ff fe3b 	bl	8009966 <lis2dw12_write_reg>
 8009cf0:	0003      	movs	r3, r0
 8009cf2:	617b      	str	r3, [r7, #20]
                             (uint8_t *) &ctrl_reg7, 1);
  }

  return ret;
 8009cf4:	697b      	ldr	r3, [r7, #20]
}
 8009cf6:	0018      	movs	r0, r3
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	b007      	add	sp, #28
 8009cfc:	bd90      	pop	{r4, r7, pc}

08009cfe <lis2dw12_pin_int1_route_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_pin_int1_route_set(stmdev_ctx_t *ctx,
                                    lis2dw12_ctrl4_int1_pad_ctrl_t *val)
{
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b086      	sub	sp, #24
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
 8009d06:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl5_int2_pad_ctrl_t ctrl5_int2_pad_ctrl;
  lis2dw12_ctrl_reg7_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL5_INT2_PAD_CTRL,
 8009d08:	2310      	movs	r3, #16
 8009d0a:	18fa      	adds	r2, r7, r3
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	2301      	movs	r3, #1
 8009d10:	2124      	movs	r1, #36	; 0x24
 8009d12:	f7ff fe07 	bl	8009924 <lis2dw12_read_reg>
 8009d16:	0003      	movs	r3, r0
 8009d18:	617b      	str	r3, [r7, #20]
                          (uint8_t *)&ctrl5_int2_pad_ctrl, 1);

  if (ret == 0)
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d108      	bne.n	8009d32 <lis2dw12_pin_int1_route_set+0x34>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg, 1);
 8009d20:	230c      	movs	r3, #12
 8009d22:	18fa      	adds	r2, r7, r3
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	2301      	movs	r3, #1
 8009d28:	213f      	movs	r1, #63	; 0x3f
 8009d2a:	f7ff fdfb 	bl	8009924 <lis2dw12_read_reg>
 8009d2e:	0003      	movs	r3, r0
 8009d30:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d146      	bne.n	8009dc6 <lis2dw12_pin_int1_route_set+0xc8>
  {
    if ((val->int1_tap |
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	071b      	lsls	r3, r3, #28
 8009d3e:	0fdb      	lsrs	r3, r3, #31
 8009d40:	b2da      	uxtb	r2, r3
         val->int1_ff |
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	06db      	lsls	r3, r3, #27
 8009d48:	0fdb      	lsrs	r3, r3, #31
 8009d4a:	b2db      	uxtb	r3, r3
    if ((val->int1_tap |
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	b2da      	uxtb	r2, r3
         val->int1_wu |
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	069b      	lsls	r3, r3, #26
 8009d56:	0fdb      	lsrs	r3, r3, #31
 8009d58:	b2db      	uxtb	r3, r3
         val->int1_ff |
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	b2da      	uxtb	r2, r3
         val->int1_single_tap |
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	065b      	lsls	r3, r3, #25
 8009d64:	0fdb      	lsrs	r3, r3, #31
 8009d66:	b2db      	uxtb	r3, r3
         val->int1_wu |
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	b2da      	uxtb	r2, r3
         val->int1_6d |
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	781b      	ldrb	r3, [r3, #0]
 8009d70:	061b      	lsls	r3, r3, #24
 8009d72:	0fdb      	lsrs	r3, r3, #31
 8009d74:	b2db      	uxtb	r3, r3
         val->int1_single_tap |
 8009d76:	4313      	orrs	r3, r2
 8009d78:	b2da      	uxtb	r2, r3
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 8009d7a:	2110      	movs	r1, #16
 8009d7c:	187b      	adds	r3, r7, r1
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	061b      	lsls	r3, r3, #24
 8009d82:	0fdb      	lsrs	r3, r3, #31
 8009d84:	b2db      	uxtb	r3, r3
         val->int1_6d |
 8009d86:	4313      	orrs	r3, r2
 8009d88:	b2da      	uxtb	r2, r3
         ctrl5_int2_pad_ctrl.int2_sleep_chg) != PROPERTY_DISABLE)
 8009d8a:	187b      	adds	r3, r7, r1
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	065b      	lsls	r3, r3, #25
 8009d90:	0fdb      	lsrs	r3, r3, #31
 8009d92:	b2db      	uxtb	r3, r3
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 8009d94:	4313      	orrs	r3, r2
 8009d96:	b2db      	uxtb	r3, r3
    if ((val->int1_tap |
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d006      	beq.n	8009daa <lis2dw12_pin_int1_route_set+0xac>
    {
      reg.interrupts_enable = PROPERTY_ENABLE;
 8009d9c:	230c      	movs	r3, #12
 8009d9e:	18fb      	adds	r3, r7, r3
 8009da0:	781a      	ldrb	r2, [r3, #0]
 8009da2:	2120      	movs	r1, #32
 8009da4:	430a      	orrs	r2, r1
 8009da6:	701a      	strb	r2, [r3, #0]
 8009da8:	e005      	b.n	8009db6 <lis2dw12_pin_int1_route_set+0xb8>
    }

    else
    {
      reg.interrupts_enable = PROPERTY_DISABLE;
 8009daa:	230c      	movs	r3, #12
 8009dac:	18fb      	adds	r3, r7, r3
 8009dae:	781a      	ldrb	r2, [r3, #0]
 8009db0:	2120      	movs	r1, #32
 8009db2:	438a      	bics	r2, r1
 8009db4:	701a      	strb	r2, [r3, #0]
    }

    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL4_INT1_PAD_CTRL,
 8009db6:	683a      	ldr	r2, [r7, #0]
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	2301      	movs	r3, #1
 8009dbc:	2123      	movs	r1, #35	; 0x23
 8009dbe:	f7ff fdd2 	bl	8009966 <lis2dw12_write_reg>
 8009dc2:	0003      	movs	r3, r0
 8009dc4:	617b      	str	r3, [r7, #20]
                             (uint8_t *) val, 1);
  }

  if (ret == 0)
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d108      	bne.n	8009dde <lis2dw12_pin_int1_route_set+0xe0>
  {
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg, 1);
 8009dcc:	230c      	movs	r3, #12
 8009dce:	18fa      	adds	r2, r7, r3
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	213f      	movs	r1, #63	; 0x3f
 8009dd6:	f7ff fdc6 	bl	8009966 <lis2dw12_write_reg>
 8009dda:	0003      	movs	r3, r0
 8009ddc:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8009dde:	697b      	ldr	r3, [r7, #20]
}
 8009de0:	0018      	movs	r0, r3
 8009de2:	46bd      	mov	sp, r7
 8009de4:	b006      	add	sp, #24
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <lis2dw12_pin_int1_route_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_pin_int1_route_get(stmdev_ctx_t *ctx,
                                    lis2dw12_ctrl4_int1_pad_ctrl_t *val)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b084      	sub	sp, #16
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL4_INT1_PAD_CTRL,
 8009df2:	683a      	ldr	r2, [r7, #0]
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	2301      	movs	r3, #1
 8009df8:	2123      	movs	r1, #35	; 0x23
 8009dfa:	f7ff fd93 	bl	8009924 <lis2dw12_read_reg>
 8009dfe:	0003      	movs	r3, r0
 8009e00:	60fb      	str	r3, [r7, #12]
                          (uint8_t *) val, 1);

  return ret;
 8009e02:	68fb      	ldr	r3, [r7, #12]
}
 8009e04:	0018      	movs	r0, r3
 8009e06:	46bd      	mov	sp, r7
 8009e08:	b004      	add	sp, #16
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <lis2dw12_wkup_threshold_set>:
  * @param  val      change the values of wk_ths in reg WAKE_UP_THS
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_wkup_threshold_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8009e0c:	b590      	push	{r4, r7, lr}
 8009e0e:	b085      	sub	sp, #20
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	000a      	movs	r2, r1
 8009e16:	1cfb      	adds	r3, r7, #3
 8009e18:	701a      	strb	r2, [r3, #0]
  lis2dw12_wake_up_ths_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WAKE_UP_THS, (uint8_t *) &reg, 1);
 8009e1a:	2408      	movs	r4, #8
 8009e1c:	193a      	adds	r2, r7, r4
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	2301      	movs	r3, #1
 8009e22:	2134      	movs	r1, #52	; 0x34
 8009e24:	f7ff fd7e 	bl	8009924 <lis2dw12_read_reg>
 8009e28:	0003      	movs	r3, r0
 8009e2a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d117      	bne.n	8009e62 <lis2dw12_wkup_threshold_set+0x56>
  {
    reg.wk_ths = val;
 8009e32:	1cfb      	adds	r3, r7, #3
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	223f      	movs	r2, #63	; 0x3f
 8009e38:	4013      	ands	r3, r2
 8009e3a:	b2da      	uxtb	r2, r3
 8009e3c:	193b      	adds	r3, r7, r4
 8009e3e:	213f      	movs	r1, #63	; 0x3f
 8009e40:	400a      	ands	r2, r1
 8009e42:	0010      	movs	r0, r2
 8009e44:	781a      	ldrb	r2, [r3, #0]
 8009e46:	213f      	movs	r1, #63	; 0x3f
 8009e48:	438a      	bics	r2, r1
 8009e4a:	1c11      	adds	r1, r2, #0
 8009e4c:	1c02      	adds	r2, r0, #0
 8009e4e:	430a      	orrs	r2, r1
 8009e50:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_WAKE_UP_THS, (uint8_t *) &reg, 1);
 8009e52:	193a      	adds	r2, r7, r4
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	2301      	movs	r3, #1
 8009e58:	2134      	movs	r1, #52	; 0x34
 8009e5a:	f7ff fd84 	bl	8009966 <lis2dw12_write_reg>
 8009e5e:	0003      	movs	r3, r0
 8009e60:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009e62:	68fb      	ldr	r3, [r7, #12]
}
 8009e64:	0018      	movs	r0, r3
 8009e66:	46bd      	mov	sp, r7
 8009e68:	b005      	add	sp, #20
 8009e6a:	bd90      	pop	{r4, r7, pc}

08009e6c <lis2dw12_wkup_dur_set>:
  * @param  val      change the values of wake_dur in reg WAKE_UP_DUR
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_wkup_dur_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8009e6c:	b590      	push	{r4, r7, lr}
 8009e6e:	b085      	sub	sp, #20
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	000a      	movs	r2, r1
 8009e76:	1cfb      	adds	r3, r7, #3
 8009e78:	701a      	strb	r2, [r3, #0]
  lis2dw12_wake_up_dur_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WAKE_UP_DUR, (uint8_t *) &reg, 1);
 8009e7a:	2408      	movs	r4, #8
 8009e7c:	193a      	adds	r2, r7, r4
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	2301      	movs	r3, #1
 8009e82:	2135      	movs	r1, #53	; 0x35
 8009e84:	f7ff fd4e 	bl	8009924 <lis2dw12_read_reg>
 8009e88:	0003      	movs	r3, r0
 8009e8a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d117      	bne.n	8009ec2 <lis2dw12_wkup_dur_set+0x56>
  {
    reg.wake_dur = val;
 8009e92:	1cfb      	adds	r3, r7, #3
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	2203      	movs	r2, #3
 8009e98:	4013      	ands	r3, r2
 8009e9a:	b2da      	uxtb	r2, r3
 8009e9c:	193b      	adds	r3, r7, r4
 8009e9e:	2103      	movs	r1, #3
 8009ea0:	400a      	ands	r2, r1
 8009ea2:	0150      	lsls	r0, r2, #5
 8009ea4:	781a      	ldrb	r2, [r3, #0]
 8009ea6:	2160      	movs	r1, #96	; 0x60
 8009ea8:	438a      	bics	r2, r1
 8009eaa:	1c11      	adds	r1, r2, #0
 8009eac:	1c02      	adds	r2, r0, #0
 8009eae:	430a      	orrs	r2, r1
 8009eb0:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_WAKE_UP_DUR, (uint8_t *) &reg, 1);
 8009eb2:	193a      	adds	r2, r7, r4
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	2135      	movs	r1, #53	; 0x35
 8009eba:	f7ff fd54 	bl	8009966 <lis2dw12_write_reg>
 8009ebe:	0003      	movs	r3, r0
 8009ec0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
}
 8009ec4:	0018      	movs	r0, r3
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	b005      	add	sp, #20
 8009eca:	bd90      	pop	{r4, r7, pc}

08009ecc <my_astro_init>:
 */
#include "my_astronode.h"


bool my_astro_init ( void )
{
 8009ecc:	b590      	push	{r4, r7, lr}
 8009ece:	b087      	sub	sp, #28
 8009ed0:	af04      	add	r7, sp, #16
	bool cfg_wr = false ;
 8009ed2:	1dfb      	adds	r3, r7, #7
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	701a      	strb	r2, [r3, #0]
	tim_seconds = 0 ;
 8009ed8:	4b21      	ldr	r3, [pc, #132]	; (8009f60 <my_astro_init+0x94>)
 8009eda:	2200      	movs	r2, #0
 8009edc:	801a      	strh	r2, [r3, #0]

	HAL_TIM_Base_Start_IT ( MY_TIMER ) ;
 8009ede:	4b21      	ldr	r3, [pc, #132]	; (8009f64 <my_astro_init+0x98>)
 8009ee0:	0018      	movs	r0, r3
 8009ee2:	f7fc fda1 	bl	8006a28 <HAL_TIM_Base_Start_IT>
	while ( tim_seconds < MY_ASTRO_INIT_TIME && !cfg_wr )
 8009ee6:	e015      	b.n	8009f14 <my_astro_init+0x48>
	{
		reset_astronode () ;
 8009ee8:	f7f9 f91c 	bl	8003124 <reset_astronode>
		HAL_Delay ( 100 ) ;
 8009eec:	2064      	movs	r0, #100	; 0x64
 8009eee:	f7f9 fe63 	bl	8003bb8 <HAL_Delay>
		// Deep Sleep Mode (false) NOT used
		// Satellite Ack Event Pin Mask (true): EVT pin shows EVT register Payload Ack bit state
		// Reset Notification Event Pin Mask (true):  EVT pin shows EVT register Reset Event Notification bit state
		// Command Available Event Pin Mask (true): EVT pin shows EVT register Command Available bit state
		// Message Transmission (Tx) Pending Event Pin Mask (false):  EVT pin does not show EVT register Msg Tx Pending bit state
		cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false  ) ;
 8009ef2:	1dfc      	adds	r4, r7, #7
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	9303      	str	r3, [sp, #12]
 8009ef8:	2301      	movs	r3, #1
 8009efa:	9302      	str	r3, [sp, #8]
 8009efc:	2301      	movs	r3, #1
 8009efe:	9301      	str	r3, [sp, #4]
 8009f00:	2301      	movs	r3, #1
 8009f02:	9300      	str	r3, [sp, #0]
 8009f04:	2300      	movs	r3, #0
 8009f06:	2201      	movs	r2, #1
 8009f08:	2101      	movs	r1, #1
 8009f0a:	2001      	movs	r0, #1
 8009f0c:	f7fe f85c 	bl	8007fc8 <astronode_send_cfg_wr>
 8009f10:	0003      	movs	r3, r0
 8009f12:	7023      	strb	r3, [r4, #0]
	while ( tim_seconds < MY_ASTRO_INIT_TIME && !cfg_wr )
 8009f14:	4b12      	ldr	r3, [pc, #72]	; (8009f60 <my_astro_init+0x94>)
 8009f16:	881b      	ldrh	r3, [r3, #0]
 8009f18:	2b3b      	cmp	r3, #59	; 0x3b
 8009f1a:	d806      	bhi.n	8009f2a <my_astro_init+0x5e>
 8009f1c:	1dfb      	adds	r3, r7, #7
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	2201      	movs	r2, #1
 8009f22:	4053      	eors	r3, r2
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d1de      	bne.n	8009ee8 <my_astro_init+0x1c>
	}
	//tim_seconds = 0 ;
	HAL_TIM_Base_Stop_IT ( MY_TIMER ) ;
 8009f2a:	4b0e      	ldr	r3, [pc, #56]	; (8009f64 <my_astro_init+0x98>)
 8009f2c:	0018      	movs	r0, r3
 8009f2e:	f7fc fdd7 	bl	8006ae0 <HAL_TIM_Base_Stop_IT>
	if ( cfg_wr )
 8009f32:	1dfb      	adds	r3, r7, #7
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d00d      	beq.n	8009f56 <my_astro_init+0x8a>
	{
		astronode_send_rtc_rr () ;
 8009f3a:	f7fe fd09 	bl	8008950 <astronode_send_rtc_rr>
		astronode_send_cfg_sr () ;
 8009f3e:	f7fe f80b 	bl	8007f58 <astronode_send_cfg_sr>
		astronode_send_mpn_rr () ;
 8009f42:	f7fe fdff 	bl	8008b44 <astronode_send_mpn_rr>
		astronode_send_msn_rr () ;
 8009f46:	f7fe f995 	bl	8008274 <astronode_send_msn_rr>
		astronode_send_mgi_rr () ;
 8009f4a:	f7fe f8e9 	bl	8008120 <astronode_send_mgi_rr>
		astronode_send_pld_fr () ;
 8009f4e:	f7fe fc83 	bl	8008858 <astronode_send_pld_fr>
		return true ;
 8009f52:	2301      	movs	r3, #1
 8009f54:	e000      	b.n	8009f58 <my_astro_init+0x8c>
	}
	else
	{
		return false ;
 8009f56:	2300      	movs	r3, #0
	}
}
 8009f58:	0018      	movs	r0, r3
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	b003      	add	sp, #12
 8009f5e:	bd90      	pop	{r4, r7, pc}
 8009f60:	20000a24 	.word	0x20000a24
 8009f64:	2000078c 	.word	0x2000078c

08009f68 <my_astro_add_payload_2_queue>:
bool my_astro_add_payload_2_queue ( uint16_t id , char* payload )
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	0002      	movs	r2, r0
 8009f70:	6039      	str	r1, [r7, #0]
 8009f72:	1dbb      	adds	r3, r7, #6
 8009f74:	801a      	strh	r2, [r3, #0]
	size_t l = strlen ( payload ) ;
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	0018      	movs	r0, r3
 8009f7a:	f7f6 f8c3 	bl	8000104 <strlen>
 8009f7e:	0003      	movs	r3, r0
 8009f80:	60fb      	str	r3, [r7, #12]
	if ( l <= ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES )
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2ba0      	cmp	r3, #160	; 0xa0
 8009f86:	d80b      	bhi.n	8009fa0 <my_astro_add_payload_2_queue+0x38>
	{
		if ( astronode_send_pld_er ( id , payload , l ) )
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	b29a      	uxth	r2, r3
 8009f8c:	6839      	ldr	r1, [r7, #0]
 8009f8e:	1dbb      	adds	r3, r7, #6
 8009f90:	881b      	ldrh	r3, [r3, #0]
 8009f92:	0018      	movs	r0, r3
 8009f94:	f7fe fbbc 	bl	8008710 <astronode_send_pld_er>
 8009f98:	1e03      	subs	r3, r0, #0
 8009f9a:	d005      	beq.n	8009fa8 <my_astro_add_payload_2_queue+0x40>
		{
			return true ;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	e004      	b.n	8009faa <my_astro_add_payload_2_queue+0x42>
		}
	}
	else
	{
		send_debug_logs ( "ERROR: Payload exceeded ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES value." ) ;
 8009fa0:	4b04      	ldr	r3, [pc, #16]	; (8009fb4 <my_astro_add_payload_2_queue+0x4c>)
 8009fa2:	0018      	movs	r0, r3
 8009fa4:	f7f9 f88e 	bl	80030c4 <send_debug_logs>
	}
	return false ;
 8009fa8:	2300      	movs	r3, #0
}
 8009faa:	0018      	movs	r0, r3
 8009fac:	46bd      	mov	sp, r7
 8009fae:	b004      	add	sp, #16
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	46c0      	nop			; (mov r8, r8)
 8009fb4:	08014c10 	.word	0x08014c10

08009fb8 <my_astro_read_evt_reg>:
bool my_astro_read_evt_reg ( void )
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	af00      	add	r7, sp, #0
	send_debug_logs ( "my_astro: evt pin is high." ) ;
 8009fbc:	4b15      	ldr	r3, [pc, #84]	; (800a014 <my_astro_read_evt_reg+0x5c>)
 8009fbe:	0018      	movs	r0, r3
 8009fc0:	f7f9 f880 	bl	80030c4 <send_debug_logs>
	astronode_send_evt_rr () ;
 8009fc4:	f7fe fa64 	bl	8008490 <astronode_send_evt_rr>
	if (is_sak_available () )
 8009fc8:	f7ff f816 	bl	8008ff8 <is_sak_available>
 8009fcc:	1e03      	subs	r3, r0, #0
 8009fce:	d007      	beq.n	8009fe0 <my_astro_read_evt_reg+0x28>
	{
	  astronode_send_sak_rr () ;
 8009fd0:	f7fe fd22 	bl	8008a18 <astronode_send_sak_rr>
	  astronode_send_sak_cr () ;
 8009fd4:	f7fe fd76 	bl	8008ac4 <astronode_send_sak_cr>
	  send_debug_logs ( "my_astro: message has been acknowledged." ) ;
 8009fd8:	4b0f      	ldr	r3, [pc, #60]	; (800a018 <my_astro_read_evt_reg+0x60>)
 8009fda:	0018      	movs	r0, r3
 8009fdc:	f7f9 f872 	bl	80030c4 <send_debug_logs>
	  //astronode_send_per_rr () ;
	}
	if ( is_astronode_reset () )
 8009fe0:	f7ff f814 	bl	800900c <is_astronode_reset>
 8009fe4:	1e03      	subs	r3, r0, #0
 8009fe6:	d005      	beq.n	8009ff4 <my_astro_read_evt_reg+0x3c>
	{
	  send_debug_logs ( "my_astro: terminal has been reset." ) ;
 8009fe8:	4b0c      	ldr	r3, [pc, #48]	; (800a01c <my_astro_read_evt_reg+0x64>)
 8009fea:	0018      	movs	r0, r3
 8009fec:	f7f9 f86a 	bl	80030c4 <send_debug_logs>
	  astronode_send_res_cr () ;
 8009ff0:	f7fe fc6e 	bl	80088d0 <astronode_send_res_cr>
	}
	if ( is_command_available () )
 8009ff4:	f7ff f814 	bl	8009020 <is_command_available>
 8009ff8:	1e03      	subs	r3, r0, #0
 8009ffa:	d007      	beq.n	800a00c <my_astro_read_evt_reg+0x54>
	{
	  send_debug_logs ( "my_astro: unicast command is available" ) ;
 8009ffc:	4b08      	ldr	r3, [pc, #32]	; (800a020 <my_astro_read_evt_reg+0x68>)
 8009ffe:	0018      	movs	r0, r3
 800a000:	f7f9 f860 	bl	80030c4 <send_debug_logs>
	  astronode_send_cmd_rr () ;
 800a004:	f7fe fe88 	bl	8008d18 <astronode_send_cmd_rr>
	  astronode_send_cmd_cr () ;
 800a008:	f7fe fe46 	bl	8008c98 <astronode_send_cmd_cr>
	}
	return true ;
 800a00c:	2301      	movs	r3, #1
}
 800a00e:	0018      	movs	r0, r3
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}
 800a014:	08014c54 	.word	0x08014c54
 800a018:	08014c70 	.word	0x08014c70
 800a01c:	08014c9c 	.word	0x08014c9c
 800a020:	08014cc0 	.word	0x08014cc0

0800a024 <my_astro_log>:
bool my_astro_log ( void )
{
 800a024:	b580      	push	{r7, lr}
 800a026:	af00      	add	r7, sp, #0
	astronode_send_rtc_rr ();
 800a028:	f7fe fc92 	bl	8008950 <astronode_send_rtc_rr>
	astronode_send_nco_rr () ;
 800a02c:	f7fe f9cc 	bl	80083c8 <astronode_send_nco_rr>
	//astronode_send_lcd_rr () ;
	//astronode_send_end_rr () ;
	//astronode_send_per_rr () ;
	return true ;
 800a030:	2301      	movs	r3, #1
}
 800a032:	0018      	movs	r0, r3
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <my_astro_write_coordinates>:

void my_astro_write_coordinates ( int32_t astro_geo_wr_latitude , int32_t astro_geo_wr_longitude )
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
	astronode_send_geo_wr ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 800a042:	683a      	ldr	r2, [r7, #0]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	0011      	movs	r1, r2
 800a048:	0018      	movs	r0, r3
 800a04a:	f7fe faa1 	bl	8008590 <astronode_send_geo_wr>
}
 800a04e:	46c0      	nop			; (mov r8, r8)
 800a050:	46bd      	mov	sp, r7
 800a052:	b002      	add	sp, #8
 800a054:	bd80      	pop	{r7, pc}

0800a056 <my_lis2dw12_init>:
 */

#include "my_lis2dw12.h"

bool my_lis2dw12_init ( stmdev_ctx_t* ctx )
{
 800a056:	b590      	push	{r4, r7, lr}
 800a058:	b085      	sub	sp, #20
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
	uint8_t rst = 1 ;
 800a05e:	230f      	movs	r3, #15
 800a060:	18fb      	adds	r3, r7, r3
 800a062:	2201      	movs	r2, #1
 800a064:	701a      	strb	r2, [r3, #0]

	/*Restore default configuration */
	lis2dw12_reset_set ( ctx , PROPERTY_ENABLE ) ;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2101      	movs	r1, #1
 800a06a:	0018      	movs	r0, r3
 800a06c:	f7ff fda2 	bl	8009bb4 <lis2dw12_reset_set>
	do {
		lis2dw12_reset_get ( ctx, &rst ) ;
 800a070:	240f      	movs	r4, #15
 800a072:	193a      	adds	r2, r7, r4
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	0011      	movs	r1, r2
 800a078:	0018      	movs	r0, r3
 800a07a:	f7ff fdcb 	bl	8009c14 <lis2dw12_reset_get>
	} while ( rst ) ;
 800a07e:	193b      	adds	r3, r7, r4
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d1f4      	bne.n	800a070 <my_lis2dw12_init+0x1a>

	if ( my_lis2dw12_get_id ( ctx ) == LIS2DW12_ID )
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	0018      	movs	r0, r3
 800a08a:	f000 f828 	bl	800a0de <my_lis2dw12_get_id>
 800a08e:	0003      	movs	r3, r0
 800a090:	2b44      	cmp	r3, #68	; 0x44
 800a092:	d11f      	bne.n	800a0d4 <my_lis2dw12_init+0x7e>
	{
		lis2dw12_full_scale_set 	( ctx , LIS2DW12_2g ) ;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2100      	movs	r1, #0
 800a098:	0018      	movs	r0, r3
 800a09a:	f7ff fd49 	bl	8009b30 <lis2dw12_full_scale_set>
		lis2dw12_power_mode_set 	( ctx , LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit ) ;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2110      	movs	r1, #16
 800a0a2:	0018      	movs	r0, r3
 800a0a4:	f7ff fc80 	bl	80099a8 <lis2dw12_power_mode_set>
		lis2dw12_data_rate_set 		( ctx , LIS2DW12_XL_ODR_200Hz ) ;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2106      	movs	r1, #6
 800a0ac:	0018      	movs	r0, r3
 800a0ae:	f7ff fce7 	bl	8009a80 <lis2dw12_data_rate_set>
		lis2dw12_filter_path_set 	( ctx , LIS2DW12_HIGH_PASS_ON_OUT ) ;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2110      	movs	r1, #16
 800a0b6:	0018      	movs	r0, r3
 800a0b8:	f7ff fdc7 	bl	8009c4a <lis2dw12_filter_path_set>
		lis2dw12_wkup_dur_set		( ctx , 0 ) ;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2100      	movs	r1, #0
 800a0c0:	0018      	movs	r0, r3
 800a0c2:	f7ff fed3 	bl	8009e6c <lis2dw12_wkup_dur_set>
		lis2dw12_wkup_threshold_set	( ctx, 2 ) ;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2102      	movs	r1, #2
 800a0ca:	0018      	movs	r0, r3
 800a0cc:	f7ff fe9e 	bl	8009e0c <lis2dw12_wkup_threshold_set>
		return true ;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	e000      	b.n	800a0d6 <my_lis2dw12_init+0x80>
	}

	return false ;
 800a0d4:	2300      	movs	r3, #0

}
 800a0d6:	0018      	movs	r0, r3
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	b005      	add	sp, #20
 800a0dc:	bd90      	pop	{r4, r7, pc}

0800a0de <my_lis2dw12_get_id>:

uint8_t my_lis2dw12_get_id ( stmdev_ctx_t* ctx )
{
 800a0de:	b590      	push	{r4, r7, lr}
 800a0e0:	b085      	sub	sp, #20
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
	uint8_t id = 0 ;
 800a0e6:	210f      	movs	r1, #15
 800a0e8:	187b      	adds	r3, r7, r1
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	701a      	strb	r2, [r3, #0]
	lis2dw12_device_id_get ( ctx , &id ) ;
 800a0ee:	000c      	movs	r4, r1
 800a0f0:	187a      	adds	r2, r7, r1
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	0011      	movs	r1, r2
 800a0f6:	0018      	movs	r0, r3
 800a0f8:	f7ff fd4a 	bl	8009b90 <lis2dw12_device_id_get>
	return id ;
 800a0fc:	193b      	adds	r3, r7, r4
 800a0fe:	781b      	ldrb	r3, [r3, #0]
}
 800a100:	0018      	movs	r0, r3
 800a102:	46bd      	mov	sp, r7
 800a104:	b005      	add	sp, #20
 800a106:	bd90      	pop	{r4, r7, pc}

0800a108 <my_lis2dw12_int1_wu_enable>:

void my_lis2dw12_int1_wu_enable ( stmdev_ctx_t* ctx )
{
 800a108:	b590      	push	{r4, r7, lr}
 800a10a:	b085      	sub	sp, #20
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
	lis2dw12_reg_t int_route ;
	lis2dw12_pin_int1_route_get	( ctx, &int_route.ctrl4_int1_pad_ctrl ) ;
 800a110:	240c      	movs	r4, #12
 800a112:	193a      	adds	r2, r7, r4
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	0011      	movs	r1, r2
 800a118:	0018      	movs	r0, r3
 800a11a:	f7ff fe65 	bl	8009de8 <lis2dw12_pin_int1_route_get>
	int_route.ctrl4_int1_pad_ctrl.int1_wu = PROPERTY_ENABLE ;
 800a11e:	0020      	movs	r0, r4
 800a120:	183b      	adds	r3, r7, r0
 800a122:	781a      	ldrb	r2, [r3, #0]
 800a124:	2120      	movs	r1, #32
 800a126:	430a      	orrs	r2, r1
 800a128:	701a      	strb	r2, [r3, #0]
	lis2dw12_pin_int1_route_set	( ctx , &int_route.ctrl4_int1_pad_ctrl ) ;
 800a12a:	183a      	adds	r2, r7, r0
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	0011      	movs	r1, r2
 800a130:	0018      	movs	r0, r3
 800a132:	f7ff fde4 	bl	8009cfe <lis2dw12_pin_int1_route_set>
}
 800a136:	46c0      	nop			; (mov r8, r8)
 800a138:	46bd      	mov	sp, r7
 800a13a:	b005      	add	sp, #20
 800a13c:	bd90      	pop	{r4, r7, pc}

0800a13e <my_lis2dw12_int1_wu_disable>:
void my_lis2dw12_int1_wu_disable ( stmdev_ctx_t* ctx )
{
 800a13e:	b590      	push	{r4, r7, lr}
 800a140:	b085      	sub	sp, #20
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
	lis2dw12_reg_t int_route ;
	lis2dw12_pin_int1_route_get	( ctx, &int_route.ctrl4_int1_pad_ctrl ) ;
 800a146:	240c      	movs	r4, #12
 800a148:	193a      	adds	r2, r7, r4
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	0011      	movs	r1, r2
 800a14e:	0018      	movs	r0, r3
 800a150:	f7ff fe4a 	bl	8009de8 <lis2dw12_pin_int1_route_get>
	int_route.ctrl4_int1_pad_ctrl.int1_wu = PROPERTY_DISABLE ;
 800a154:	0020      	movs	r0, r4
 800a156:	183b      	adds	r3, r7, r0
 800a158:	781a      	ldrb	r2, [r3, #0]
 800a15a:	2120      	movs	r1, #32
 800a15c:	438a      	bics	r2, r1
 800a15e:	701a      	strb	r2, [r3, #0]
	lis2dw12_pin_int1_route_set	( ctx , &int_route.ctrl4_int1_pad_ctrl ) ;
 800a160:	183a      	adds	r2, r7, r0
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	0011      	movs	r1, r2
 800a166:	0018      	movs	r0, r3
 800a168:	f7ff fdc9 	bl	8009cfe <lis2dw12_pin_int1_route_set>
}
 800a16c:	46c0      	nop			; (mov r8, r8)
 800a16e:	46bd      	mov	sp, r7
 800a170:	b005      	add	sp, #20
 800a172:	bd90      	pop	{r4, r7, pc}

0800a174 <my_lx6_get_coordinates>:

#include "my_lx6_gnss.h"


bool my_lx6_get_coordinates ( uint16_t active_time_ths , double nmea_pdop_ths , double* nmea_fixed_pdop_d , int32_t* astro_geo_wr_latitude , int32_t* astro_geo_wr_longitude )
{
 800a174:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a176:	4cde      	ldr	r4, [pc, #888]	; (800a4f0 <my_lx6_get_coordinates+0x37c>)
 800a178:	44a5      	add	sp, r4
 800a17a:	af02      	add	r7, sp, #8
 800a17c:	0001      	movs	r1, r0
 800a17e:	603a      	str	r2, [r7, #0]
 800a180:	607b      	str	r3, [r7, #4]
 800a182:	4bdc      	ldr	r3, [pc, #880]	; (800a4f4 <my_lx6_get_coordinates+0x380>)
 800a184:	20ce      	movs	r0, #206	; 0xce
 800a186:	0080      	lsls	r0, r0, #2
 800a188:	181b      	adds	r3, r3, r0
 800a18a:	19db      	adds	r3, r3, r7
 800a18c:	1c0a      	adds	r2, r1, #0
 800a18e:	801a      	strh	r2, [r3, #0]
	bool		r = false ;
 800a190:	4bd9      	ldr	r3, [pc, #868]	; (800a4f8 <my_lx6_get_coordinates+0x384>)
 800a192:	18fb      	adds	r3, r7, r3
 800a194:	2200      	movs	r2, #0
 800a196:	701a      	strb	r2, [r3, #0]
	uint8_t		rxd_byte = 0 ;
 800a198:	4bd8      	ldr	r3, [pc, #864]	; (800a4fc <my_lx6_get_coordinates+0x388>)
 800a19a:	18fb      	adds	r3, r7, r3
 800a19c:	2200      	movs	r2, #0
 800a19e:	701a      	strb	r2, [r3, #0]
	uint8_t		nmea_message[NMEA_MESSAGE_SIZE] = {0} ;
 800a1a0:	4bd7      	ldr	r3, [pc, #860]	; (800a500 <my_lx6_get_coordinates+0x38c>)
 800a1a2:	0004      	movs	r4, r0
 800a1a4:	191b      	adds	r3, r3, r4
 800a1a6:	19db      	adds	r3, r3, r7
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	601a      	str	r2, [r3, #0]
 800a1ac:	3304      	adds	r3, #4
 800a1ae:	22f6      	movs	r2, #246	; 0xf6
 800a1b0:	2100      	movs	r1, #0
 800a1b2:	0018      	movs	r0, r3
 800a1b4:	f002 fb58 	bl	800c868 <memset>
	uint8_t		gngll_message[NMEA_MESSAGE_SIZE] = {0} ;
 800a1b8:	4bd2      	ldr	r3, [pc, #840]	; (800a504 <my_lx6_get_coordinates+0x390>)
 800a1ba:	191b      	adds	r3, r3, r4
 800a1bc:	19db      	adds	r3, r3, r7
 800a1be:	2200      	movs	r2, #0
 800a1c0:	601a      	str	r2, [r3, #0]
 800a1c2:	3304      	adds	r3, #4
 800a1c4:	22f6      	movs	r2, #246	; 0xf6
 800a1c6:	2100      	movs	r1, #0
 800a1c8:	0018      	movs	r0, r3
 800a1ca:	f002 fb4d 	bl	800c868 <memset>
	uint8_t		rmc_message[NMEA_MESSAGE_SIZE] = {0} ;
 800a1ce:	4bce      	ldr	r3, [pc, #824]	; (800a508 <my_lx6_get_coordinates+0x394>)
 800a1d0:	191b      	adds	r3, r3, r4
 800a1d2:	19db      	adds	r3, r3, r7
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	601a      	str	r2, [r3, #0]
 800a1d8:	3304      	adds	r3, #4
 800a1da:	22f6      	movs	r2, #246	; 0xf6
 800a1dc:	2100      	movs	r1, #0
 800a1de:	0018      	movs	r0, r3
 800a1e0:	f002 fb42 	bl	800c868 <memset>
	uint8_t		i_nmea = 0 ;
 800a1e4:	4bc9      	ldr	r3, [pc, #804]	; (800a50c <my_lx6_get_coordinates+0x398>)
 800a1e6:	0021      	movs	r1, r4
 800a1e8:	185b      	adds	r3, r3, r1
 800a1ea:	19db      	adds	r3, r3, r7
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	701a      	strb	r2, [r3, #0]
	uint8_t		gsv_tns = 0 ;
 800a1f0:	4bc7      	ldr	r3, [pc, #796]	; (800a510 <my_lx6_get_coordinates+0x39c>)
 800a1f2:	18fb      	adds	r3, r7, r3
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	701a      	strb	r2, [r3, #0]
	char 		nmea_latitude_s[MY_GNSS_NMEA_MAX_SIZE] = {0} ; // 10 + ew. znak minus + '\0'
 800a1f8:	4bc6      	ldr	r3, [pc, #792]	; (800a514 <my_lx6_get_coordinates+0x3a0>)
 800a1fa:	000c      	movs	r4, r1
 800a1fc:	185b      	adds	r3, r3, r1
 800a1fe:	19db      	adds	r3, r3, r7
 800a200:	2200      	movs	r2, #0
 800a202:	601a      	str	r2, [r3, #0]
 800a204:	3304      	adds	r3, #4
 800a206:	2208      	movs	r2, #8
 800a208:	2100      	movs	r1, #0
 800a20a:	0018      	movs	r0, r3
 800a20c:	f002 fb2c 	bl	800c868 <memset>
	char 		nmea_longitude_s[MY_GNSS_NMEA_MAX_SIZE] = {0} ; // 10 + ew. znak minus + '\0'
 800a210:	4bc1      	ldr	r3, [pc, #772]	; (800a518 <my_lx6_get_coordinates+0x3a4>)
 800a212:	191b      	adds	r3, r3, r4
 800a214:	19db      	adds	r3, r3, r7
 800a216:	2200      	movs	r2, #0
 800a218:	601a      	str	r2, [r3, #0]
 800a21a:	3304      	adds	r3, #4
 800a21c:	2208      	movs	r2, #8
 800a21e:	2100      	movs	r1, #0
 800a220:	0018      	movs	r0, r3
 800a222:	f002 fb21 	bl	800c868 <memset>
	char* 		nmea_gngsa_label = "GNGSA" ;
 800a226:	4bbd      	ldr	r3, [pc, #756]	; (800a51c <my_lx6_get_coordinates+0x3a8>)
 800a228:	22cc      	movs	r2, #204	; 0xcc
 800a22a:	0092      	lsls	r2, r2, #2
 800a22c:	18ba      	adds	r2, r7, r2
 800a22e:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngll_label = "GNGLL" ;
 800a230:	4bbb      	ldr	r3, [pc, #748]	; (800a520 <my_lx6_get_coordinates+0x3ac>)
 800a232:	22cb      	movs	r2, #203	; 0xcb
 800a234:	0092      	lsls	r2, r2, #2
 800a236:	18ba      	adds	r2, r7, r2
 800a238:	6013      	str	r3, [r2, #0]
	char* 		nmea_rmc_label = "RMC" ;
 800a23a:	4bba      	ldr	r3, [pc, #744]	; (800a524 <my_lx6_get_coordinates+0x3b0>)
 800a23c:	22ca      	movs	r2, #202	; 0xca
 800a23e:	0092      	lsls	r2, r2, #2
 800a240:	18ba      	adds	r2, r7, r2
 800a242:	6013      	str	r3, [r2, #0]
	char* 		nmea_gsv_label = "GSV" ;
 800a244:	4bb8      	ldr	r3, [pc, #736]	; (800a528 <my_lx6_get_coordinates+0x3b4>)
 800a246:	22c9      	movs	r2, #201	; 0xc9
 800a248:	0092      	lsls	r2, r2, #2
 800a24a:	18ba      	adds	r2, r7, r2
 800a24c:	6013      	str	r3, [r2, #0]
	char		nmea_fixed_mode_s = '\0' ;
 800a24e:	4bb7      	ldr	r3, [pc, #732]	; (800a52c <my_lx6_get_coordinates+0x3b8>)
 800a250:	18fb      	adds	r3, r7, r3
 800a252:	2200      	movs	r2, #0
 800a254:	701a      	strb	r2, [r3, #0]

	tim_seconds = 0 ;
 800a256:	4bb6      	ldr	r3, [pc, #728]	; (800a530 <my_lx6_get_coordinates+0x3bc>)
 800a258:	2200      	movs	r2, #0
 800a25a:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &htim6 ) ;
 800a25c:	4bb5      	ldr	r3, [pc, #724]	; (800a534 <my_lx6_get_coordinates+0x3c0>)
 800a25e:	0018      	movs	r0, r3
 800a260:	f7fc fbe2 	bl	8006a28 <HAL_TIM_Base_Start_IT>
	my_lx6_on () ;
 800a264:	f7f8 ffdc 	bl	8003220 <my_lx6_on>
	while ( tim_seconds < active_time_ths  ) // 1200 = 10 min.
 800a268:	e0ea      	b.n	800a440 <my_lx6_get_coordinates+0x2cc>
	{
		HAL_UART_Receive ( HUART_Lx6 , &rxd_byte , 1 , UART_TIMEOUT ) ;
 800a26a:	23fa      	movs	r3, #250	; 0xfa
 800a26c:	009b      	lsls	r3, r3, #2
 800a26e:	4ca3      	ldr	r4, [pc, #652]	; (800a4fc <my_lx6_get_coordinates+0x388>)
 800a270:	1939      	adds	r1, r7, r4
 800a272:	48b1      	ldr	r0, [pc, #708]	; (800a538 <my_lx6_get_coordinates+0x3c4>)
 800a274:	2201      	movs	r2, #1
 800a276:	f7fc ffeb 	bl	8007250 <HAL_UART_Receive>
		HAL_UART_Transmit ( HUART_DBG , &rxd_byte , 1 , UART_TIMEOUT ) ; // Transmit all nmea to DBG
 800a27a:	23fa      	movs	r3, #250	; 0xfa
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	1939      	adds	r1, r7, r4
 800a280:	48ae      	ldr	r0, [pc, #696]	; (800a53c <my_lx6_get_coordinates+0x3c8>)
 800a282:	2201      	movs	r2, #1
 800a284:	f7fc ff48 	bl	8007118 <HAL_UART_Transmit>
		if ( rxd_byte )
 800a288:	0020      	movs	r0, r4
 800a28a:	193b      	adds	r3, r7, r4
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	4ca0      	ldr	r4, [pc, #640]	; (800a510 <my_lx6_get_coordinates+0x39c>)
 800a290:	193a      	adds	r2, r7, r4
 800a292:	1939      	adds	r1, r7, r4
 800a294:	7809      	ldrb	r1, [r1, #0]
 800a296:	7011      	strb	r1, [r2, #0]
 800a298:	4da4      	ldr	r5, [pc, #656]	; (800a52c <my_lx6_get_coordinates+0x3b8>)
 800a29a:	197a      	adds	r2, r7, r5
 800a29c:	1979      	adds	r1, r7, r5
 800a29e:	7809      	ldrb	r1, [r1, #0]
 800a2a0:	7011      	strb	r1, [r2, #0]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d100      	bne.n	800a2a8 <my_lx6_get_coordinates+0x134>
 800a2a6:	e0cb      	b.n	800a440 <my_lx6_get_coordinates+0x2cc>
		{
			if ( my_nmea_message ( &rxd_byte , nmea_message , &i_nmea ) == 2 )
 800a2a8:	232f      	movs	r3, #47	; 0x2f
 800a2aa:	18fa      	adds	r2, r7, r3
 800a2ac:	268a      	movs	r6, #138	; 0x8a
 800a2ae:	00b6      	lsls	r6, r6, #2
 800a2b0:	19b9      	adds	r1, r7, r6
 800a2b2:	183b      	adds	r3, r7, r0
 800a2b4:	0018      	movs	r0, r3
 800a2b6:	f000 fbfd 	bl	800aab4 <my_nmea_message>
 800a2ba:	0001      	movs	r1, r0
 800a2bc:	193b      	adds	r3, r7, r4
 800a2be:	193a      	adds	r2, r7, r4
 800a2c0:	7812      	ldrb	r2, [r2, #0]
 800a2c2:	701a      	strb	r2, [r3, #0]
 800a2c4:	197b      	adds	r3, r7, r5
 800a2c6:	197a      	adds	r2, r7, r5
 800a2c8:	7812      	ldrb	r2, [r2, #0]
 800a2ca:	701a      	strb	r2, [r3, #0]
 800a2cc:	2902      	cmp	r1, #2
 800a2ce:	d000      	beq.n	800a2d2 <my_lx6_get_coordinates+0x15e>
 800a2d0:	e0b6      	b.n	800a440 <my_lx6_get_coordinates+0x2cc>
			{
				if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 800a2d2:	19bb      	adds	r3, r7, r6
 800a2d4:	0018      	movs	r0, r3
 800a2d6:	f000 fcad 	bl	800ac34 <is_my_nmea_checksum_ok>
 800a2da:	0003      	movs	r3, r0
 800a2dc:	0019      	movs	r1, r3
 800a2de:	193b      	adds	r3, r7, r4
 800a2e0:	193a      	adds	r2, r7, r4
 800a2e2:	7812      	ldrb	r2, [r2, #0]
 800a2e4:	701a      	strb	r2, [r3, #0]
 800a2e6:	197b      	adds	r3, r7, r5
 800a2e8:	197a      	adds	r2, r7, r5
 800a2ea:	7812      	ldrb	r2, [r2, #0]
 800a2ec:	701a      	strb	r2, [r3, #0]
 800a2ee:	2900      	cmp	r1, #0
 800a2f0:	d100      	bne.n	800a2f4 <my_lx6_get_coordinates+0x180>
 800a2f2:	e0a5      	b.n	800a440 <my_lx6_get_coordinates+0x2cc>
				{
					if ( strstr ( (char*) nmea_message , nmea_rmc_label ) )
 800a2f4:	23ca      	movs	r3, #202	; 0xca
 800a2f6:	009b      	lsls	r3, r3, #2
 800a2f8:	18fb      	adds	r3, r7, r3
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	19bb      	adds	r3, r7, r6
 800a2fe:	0011      	movs	r1, r2
 800a300:	0018      	movs	r0, r3
 800a302:	f002 fade 	bl	800c8c2 <strstr>
 800a306:	1e03      	subs	r3, r0, #0
 800a308:	d00d      	beq.n	800a326 <my_lx6_get_coordinates+0x1b2>
					{
						memcpy ( rmc_message , nmea_message , NMEA_MESSAGE_SIZE ) ; // Zapisuję, żeby skorzystać z czasu jak najdokładniejszego, bo przed fix ten czas jest fake.
 800a30a:	4b7f      	ldr	r3, [pc, #508]	; (800a508 <my_lx6_get_coordinates+0x394>)
 800a30c:	21ce      	movs	r1, #206	; 0xce
 800a30e:	0089      	lsls	r1, r1, #2
 800a310:	185b      	adds	r3, r3, r1
 800a312:	19da      	adds	r2, r3, r7
 800a314:	4b7a      	ldr	r3, [pc, #488]	; (800a500 <my_lx6_get_coordinates+0x38c>)
 800a316:	185b      	adds	r3, r3, r1
 800a318:	19db      	adds	r3, r3, r7
 800a31a:	0010      	movs	r0, r2
 800a31c:	0019      	movs	r1, r3
 800a31e:	23fa      	movs	r3, #250	; 0xfa
 800a320:	001a      	movs	r2, r3
 800a322:	f002 fb86 	bl	800ca32 <memcpy>
					}
					if ( strstr ( (char*) nmea_message , nmea_gsv_label ) && gsv_tns < MY_GNSS_MIN_TNS )
 800a326:	23c9      	movs	r3, #201	; 0xc9
 800a328:	009b      	lsls	r3, r3, #2
 800a32a:	18fb      	adds	r3, r7, r3
 800a32c:	681a      	ldr	r2, [r3, #0]
 800a32e:	248a      	movs	r4, #138	; 0x8a
 800a330:	00a4      	lsls	r4, r4, #2
 800a332:	193b      	adds	r3, r7, r4
 800a334:	0011      	movs	r1, r2
 800a336:	0018      	movs	r0, r3
 800a338:	f002 fac3 	bl	800c8c2 <strstr>
 800a33c:	1e03      	subs	r3, r0, #0
 800a33e:	d011      	beq.n	800a364 <my_lx6_get_coordinates+0x1f0>
 800a340:	4d73      	ldr	r5, [pc, #460]	; (800a510 <my_lx6_get_coordinates+0x39c>)
 800a342:	197b      	adds	r3, r7, r5
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	2b02      	cmp	r3, #2
 800a348:	d80c      	bhi.n	800a364 <my_lx6_get_coordinates+0x1f0>
					{
						if ( tim_seconds > MY_GNSS_MIN_TNS_TIME_THS )
 800a34a:	4b79      	ldr	r3, [pc, #484]	; (800a530 <my_lx6_get_coordinates+0x3bc>)
 800a34c:	881b      	ldrh	r3, [r3, #0]
 800a34e:	2b0a      	cmp	r3, #10
 800a350:	d900      	bls.n	800a354 <my_lx6_get_coordinates+0x1e0>
 800a352:	e081      	b.n	800a458 <my_lx6_get_coordinates+0x2e4>
						{
							break ;
						}
						gsv_tns = my_nmea_get_gsv_tns ( (char*) nmea_message ) ;
 800a354:	193b      	adds	r3, r7, r4
 800a356:	0018      	movs	r0, r3
 800a358:	f000 fe2a 	bl	800afb0 <my_nmea_get_gsv_tns>
 800a35c:	0003      	movs	r3, r0
 800a35e:	001a      	movs	r2, r3
 800a360:	197b      	adds	r3, r7, r5
 800a362:	701a      	strb	r2, [r3, #0]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngsa_label ) )
 800a364:	23cc      	movs	r3, #204	; 0xcc
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	18fb      	adds	r3, r7, r3
 800a36a:	681a      	ldr	r2, [r3, #0]
 800a36c:	258a      	movs	r5, #138	; 0x8a
 800a36e:	00ad      	lsls	r5, r5, #2
 800a370:	197b      	adds	r3, r7, r5
 800a372:	0011      	movs	r1, r2
 800a374:	0018      	movs	r0, r3
 800a376:	f002 faa4 	bl	800c8c2 <strstr>
 800a37a:	1e03      	subs	r3, r0, #0
 800a37c:	d015      	beq.n	800a3aa <my_lx6_get_coordinates+0x236>
					{
						nmea_fixed_mode_s = get_my_nmea_gngsa_fixed_mode_s ( (char*) nmea_message ) ;
 800a37e:	4b6b      	ldr	r3, [pc, #428]	; (800a52c <my_lx6_get_coordinates+0x3b8>)
 800a380:	18fc      	adds	r4, r7, r3
 800a382:	197b      	adds	r3, r7, r5
 800a384:	0018      	movs	r0, r3
 800a386:	f000 fc01 	bl	800ab8c <get_my_nmea_gngsa_fixed_mode_s>
 800a38a:	0003      	movs	r3, r0
 800a38c:	7023      	strb	r3, [r4, #0]
						*nmea_fixed_pdop_d = get_my_nmea_gngsa_pdop_d ( (char*) nmea_message ) ;
 800a38e:	197b      	adds	r3, r7, r5
 800a390:	0018      	movs	r0, r3
 800a392:	f000 fc06 	bl	800aba2 <get_my_nmea_gngsa_pdop_d>
 800a396:	0002      	movs	r2, r0
 800a398:	000b      	movs	r3, r1
 800a39a:	21d2      	movs	r1, #210	; 0xd2
 800a39c:	0089      	lsls	r1, r1, #2
 800a39e:	2008      	movs	r0, #8
 800a3a0:	1809      	adds	r1, r1, r0
 800a3a2:	19c9      	adds	r1, r1, r7
 800a3a4:	6809      	ldr	r1, [r1, #0]
 800a3a6:	600a      	str	r2, [r1, #0]
 800a3a8:	604b      	str	r3, [r1, #4]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngll_label ) /*&& nmea_fixed_pdop_d <= nmea_pdop_ths */)
 800a3aa:	23cb      	movs	r3, #203	; 0xcb
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	18fb      	adds	r3, r7, r3
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	258a      	movs	r5, #138	; 0x8a
 800a3b4:	00ad      	lsls	r5, r5, #2
 800a3b6:	197b      	adds	r3, r7, r5
 800a3b8:	0011      	movs	r1, r2
 800a3ba:	0018      	movs	r0, r3
 800a3bc:	f002 fa81 	bl	800c8c2 <strstr>
 800a3c0:	1e03      	subs	r3, r0, #0
 800a3c2:	d03d      	beq.n	800a440 <my_lx6_get_coordinates+0x2cc>
					{
						if ( *nmea_fixed_pdop_d <= nmea_pdop_ths && nmea_fixed_mode_s == NMEA_3D_FIX )
 800a3c4:	23d2      	movs	r3, #210	; 0xd2
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	2408      	movs	r4, #8
 800a3ca:	191b      	adds	r3, r3, r4
 800a3cc:	19db      	adds	r3, r3, r7
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	6838      	ldr	r0, [r7, #0]
 800a3d6:	6879      	ldr	r1, [r7, #4]
 800a3d8:	f7f6 f85a 	bl	8000490 <__aeabi_dcmpge>
 800a3dc:	1e03      	subs	r3, r0, #0
 800a3de:	d021      	beq.n	800a424 <my_lx6_get_coordinates+0x2b0>
 800a3e0:	4b52      	ldr	r3, [pc, #328]	; (800a52c <my_lx6_get_coordinates+0x3b8>)
 800a3e2:	18fb      	adds	r3, r7, r3
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	2b33      	cmp	r3, #51	; 0x33
 800a3e8:	d11c      	bne.n	800a424 <my_lx6_get_coordinates+0x2b0>
						{
							get_my_nmea_gngll_coordinates ( (char*) nmea_message , nmea_latitude_s , nmea_longitude_s , astro_geo_wr_latitude , astro_geo_wr_longitude ) ; // Nie musze nic kombinować z przenoszeniem tej operacji, bo po niej nie będzie już dalej odbierania wiadomości tylko wyjście
 800a3ea:	23d3      	movs	r3, #211	; 0xd3
 800a3ec:	009b      	lsls	r3, r3, #2
 800a3ee:	0026      	movs	r6, r4
 800a3f0:	191b      	adds	r3, r3, r4
 800a3f2:	19db      	adds	r3, r3, r7
 800a3f4:	681c      	ldr	r4, [r3, #0]
 800a3f6:	2314      	movs	r3, #20
 800a3f8:	18fa      	adds	r2, r7, r3
 800a3fa:	2320      	movs	r3, #32
 800a3fc:	18f9      	adds	r1, r7, r3
 800a3fe:	1978      	adds	r0, r7, r5
 800a400:	23d4      	movs	r3, #212	; 0xd4
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	199b      	adds	r3, r3, r6
 800a406:	19db      	adds	r3, r3, r7
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	9300      	str	r3, [sp, #0]
 800a40c:	0023      	movs	r3, r4
 800a40e:	f000 fccd 	bl	800adac <get_my_nmea_gngll_coordinates>
							my_rtc_set_dt_from_nmea_rmc ( (char*) nmea_message ) ; // Jeśli masz fix to na pewno czas jest dobry
 800a412:	197b      	adds	r3, r7, r5
 800a414:	0018      	movs	r0, r3
 800a416:	f000 f897 	bl	800a548 <my_rtc_set_dt_from_nmea_rmc>
							r = true ;
 800a41a:	4b37      	ldr	r3, [pc, #220]	; (800a4f8 <my_lx6_get_coordinates+0x384>)
 800a41c:	18fb      	adds	r3, r7, r3
 800a41e:	2201      	movs	r2, #1
 800a420:	701a      	strb	r2, [r3, #0]
							break ;
 800a422:	e01a      	b.n	800a45a <my_lx6_get_coordinates+0x2e6>
						}
						else
						{
							memcpy ( gngll_message , nmea_message , NMEA_MESSAGE_SIZE ) ; // Zapisuję, żeby potem, jak nie osiągnę jakości nmea_pdop_ths to wykorzystać coordinates do payload
 800a424:	4b37      	ldr	r3, [pc, #220]	; (800a504 <my_lx6_get_coordinates+0x390>)
 800a426:	21ce      	movs	r1, #206	; 0xce
 800a428:	0089      	lsls	r1, r1, #2
 800a42a:	185b      	adds	r3, r3, r1
 800a42c:	19da      	adds	r2, r3, r7
 800a42e:	4b34      	ldr	r3, [pc, #208]	; (800a500 <my_lx6_get_coordinates+0x38c>)
 800a430:	185b      	adds	r3, r3, r1
 800a432:	19db      	adds	r3, r3, r7
 800a434:	0010      	movs	r0, r2
 800a436:	0019      	movs	r1, r3
 800a438:	23fa      	movs	r3, #250	; 0xfa
 800a43a:	001a      	movs	r2, r3
 800a43c:	f002 faf9 	bl	800ca32 <memcpy>
	while ( tim_seconds < active_time_ths  ) // 1200 = 10 min.
 800a440:	4b3b      	ldr	r3, [pc, #236]	; (800a530 <my_lx6_get_coordinates+0x3bc>)
 800a442:	881b      	ldrh	r3, [r3, #0]
 800a444:	4a2b      	ldr	r2, [pc, #172]	; (800a4f4 <my_lx6_get_coordinates+0x380>)
 800a446:	21ce      	movs	r1, #206	; 0xce
 800a448:	0089      	lsls	r1, r1, #2
 800a44a:	1852      	adds	r2, r2, r1
 800a44c:	19d2      	adds	r2, r2, r7
 800a44e:	8812      	ldrh	r2, [r2, #0]
 800a450:	429a      	cmp	r2, r3
 800a452:	d900      	bls.n	800a456 <my_lx6_get_coordinates+0x2e2>
 800a454:	e709      	b.n	800a26a <my_lx6_get_coordinates+0xf6>
 800a456:	e000      	b.n	800a45a <my_lx6_get_coordinates+0x2e6>
							break ;
 800a458:	46c0      	nop			; (mov r8, r8)
					}
				}
			}
		}
	}
	HAL_TIM_Base_Stop_IT ( &htim6 ) ;
 800a45a:	4b36      	ldr	r3, [pc, #216]	; (800a534 <my_lx6_get_coordinates+0x3c0>)
 800a45c:	0018      	movs	r0, r3
 800a45e:	f7fc fb3f 	bl	8006ae0 <HAL_TIM_Base_Stop_IT>
	my_lx6_off () ;
 800a462:	f7f8 fef5 	bl	8003250 <my_lx6_off>
	if ( nmea_latitude_s[0] == 0 && gngll_message[0] != 0 ) // Jeśli nie masz współrzędnych pdop to wykorzystaja gorsze i zrób ich backup
 800a466:	4b2b      	ldr	r3, [pc, #172]	; (800a514 <my_lx6_get_coordinates+0x3a0>)
 800a468:	22ce      	movs	r2, #206	; 0xce
 800a46a:	0092      	lsls	r2, r2, #2
 800a46c:	189b      	adds	r3, r3, r2
 800a46e:	19db      	adds	r3, r3, r7
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d125      	bne.n	800a4c2 <my_lx6_get_coordinates+0x34e>
 800a476:	4b23      	ldr	r3, [pc, #140]	; (800a504 <my_lx6_get_coordinates+0x390>)
 800a478:	189b      	adds	r3, r3, r2
 800a47a:	19db      	adds	r3, r3, r7
 800a47c:	781b      	ldrb	r3, [r3, #0]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d01f      	beq.n	800a4c2 <my_lx6_get_coordinates+0x34e>
	{
		get_my_nmea_gngll_coordinates ( (char*) gngll_message , nmea_latitude_s , nmea_longitude_s , astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 800a482:	23d3      	movs	r3, #211	; 0xd3
 800a484:	009b      	lsls	r3, r3, #2
 800a486:	2508      	movs	r5, #8
 800a488:	195b      	adds	r3, r3, r5
 800a48a:	19db      	adds	r3, r3, r7
 800a48c:	681c      	ldr	r4, [r3, #0]
 800a48e:	2314      	movs	r3, #20
 800a490:	18fa      	adds	r2, r7, r3
 800a492:	2320      	movs	r3, #32
 800a494:	18f9      	adds	r1, r7, r3
 800a496:	2396      	movs	r3, #150	; 0x96
 800a498:	005b      	lsls	r3, r3, #1
 800a49a:	18f8      	adds	r0, r7, r3
 800a49c:	23d4      	movs	r3, #212	; 0xd4
 800a49e:	009b      	lsls	r3, r3, #2
 800a4a0:	195b      	adds	r3, r3, r5
 800a4a2:	19db      	adds	r3, r3, r7
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	9300      	str	r3, [sp, #0]
 800a4a8:	0023      	movs	r3, r4
 800a4aa:	f000 fc7f 	bl	800adac <get_my_nmea_gngll_coordinates>
		my_rtc_set_dt_from_nmea_rmc ( (char*) nmea_message ) ; // Jeśli masz fix to na pewno czas jest dobry
 800a4ae:	238a      	movs	r3, #138	; 0x8a
 800a4b0:	009b      	lsls	r3, r3, #2
 800a4b2:	18fb      	adds	r3, r7, r3
 800a4b4:	0018      	movs	r0, r3
 800a4b6:	f000 f847 	bl	800a548 <my_rtc_set_dt_from_nmea_rmc>
		r = true ;
 800a4ba:	4b0f      	ldr	r3, [pc, #60]	; (800a4f8 <my_lx6_get_coordinates+0x384>)
 800a4bc:	18fb      	adds	r3, r7, r3
 800a4be:	2201      	movs	r2, #1
 800a4c0:	701a      	strb	r2, [r3, #0]
	}
	if ( r )
 800a4c2:	4b0d      	ldr	r3, [pc, #52]	; (800a4f8 <my_lx6_get_coordinates+0x384>)
 800a4c4:	18fb      	adds	r3, r7, r3
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d004      	beq.n	800a4d6 <my_lx6_get_coordinates+0x362>
		send_debug_logs ( "my_lx6_gnss.c: Successful fix." ) ;
 800a4cc:	4b1c      	ldr	r3, [pc, #112]	; (800a540 <my_lx6_get_coordinates+0x3cc>)
 800a4ce:	0018      	movs	r0, r3
 800a4d0:	f7f8 fdf8 	bl	80030c4 <send_debug_logs>
 800a4d4:	e003      	b.n	800a4de <my_lx6_get_coordinates+0x36a>
	else
		send_debug_logs ( "my_lx6_gnss.c: No fix." ) ;
 800a4d6:	4b1b      	ldr	r3, [pc, #108]	; (800a544 <my_lx6_get_coordinates+0x3d0>)
 800a4d8:	0018      	movs	r0, r3
 800a4da:	f7f8 fdf3 	bl	80030c4 <send_debug_logs>
	return r ;
 800a4de:	4b06      	ldr	r3, [pc, #24]	; (800a4f8 <my_lx6_get_coordinates+0x384>)
 800a4e0:	18fb      	adds	r3, r7, r3
 800a4e2:	781b      	ldrb	r3, [r3, #0]
}
 800a4e4:	0018      	movs	r0, r3
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	23cf      	movs	r3, #207	; 0xcf
 800a4ea:	009b      	lsls	r3, r3, #2
 800a4ec:	449d      	add	sp, r3
 800a4ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4f0:	fffffcbc 	.word	0xfffffcbc
 800a4f4:	fffffcd6 	.word	0xfffffcd6
 800a4f8:	00000337 	.word	0x00000337
 800a4fc:	00000323 	.word	0x00000323
 800a500:	fffffef0 	.word	0xfffffef0
 800a504:	fffffdf4 	.word	0xfffffdf4
 800a508:	fffffcf8 	.word	0xfffffcf8
 800a50c:	fffffcf7 	.word	0xfffffcf7
 800a510:	00000336 	.word	0x00000336
 800a514:	fffffce8 	.word	0xfffffce8
 800a518:	fffffcdc 	.word	0xfffffcdc
 800a51c:	08014ce8 	.word	0x08014ce8
 800a520:	08014cf0 	.word	0x08014cf0
 800a524:	08014cf8 	.word	0x08014cf8
 800a528:	08014cfc 	.word	0x08014cfc
 800a52c:	00000335 	.word	0x00000335
 800a530:	20000a24 	.word	0x20000a24
 800a534:	2000078c 	.word	0x2000078c
 800a538:	20000900 	.word	0x20000900
 800a53c:	2000086c 	.word	0x2000086c
 800a540:	08014d00 	.word	0x08014d00
 800a544:	08014d20 	.word	0x08014d20

0800a548 <my_rtc_set_dt_from_nmea_rmc>:
*/

extern RTC_HandleTypeDef hrtc ;

void my_rtc_set_dt_from_nmea_rmc ( const char* m )
{
 800a548:	b5b0      	push	{r4, r5, r7, lr}
 800a54a:	b088      	sub	sp, #32
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
	  RTC_TimeTypeDef sTime;
	  RTC_DateTypeDef sDate;

	  my_nmea_get_rmc_date_yy ( m , &sDate.Year ) ;
 800a550:	2508      	movs	r5, #8
 800a552:	197b      	adds	r3, r7, r5
 800a554:	1cda      	adds	r2, r3, #3
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	0011      	movs	r1, r2
 800a55a:	0018      	movs	r0, r3
 800a55c:	f000 fd60 	bl	800b020 <my_nmea_get_rmc_date_yy>
	  my_nmea_get_rmc_date_mm ( m , &sDate.Month ) ;
 800a560:	197b      	adds	r3, r7, r5
 800a562:	1c5a      	adds	r2, r3, #1
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	0011      	movs	r1, r2
 800a568:	0018      	movs	r0, r3
 800a56a:	f000 fd93 	bl	800b094 <my_nmea_get_rmc_date_mm>
	  my_nmea_get_rmc_date_dd ( m , &sDate.Date ) ;
 800a56e:	197b      	adds	r3, r7, r5
 800a570:	1c9a      	adds	r2, r3, #2
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	0011      	movs	r1, r2
 800a576:	0018      	movs	r0, r3
 800a578:	f000 fdc6 	bl	800b108 <my_nmea_get_rmc_date_dd>
	  my_nmea_get_rmc_utc_hh ( m , &sTime.Hours ) ;
 800a57c:	240c      	movs	r4, #12
 800a57e:	193a      	adds	r2, r7, r4
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	0011      	movs	r1, r2
 800a584:	0018      	movs	r0, r3
 800a586:	f000 fdf9 	bl	800b17c <my_nmea_get_rmc_utc_hh>
	  my_nmea_get_rmc_utc_mm ( m , &sTime.Minutes ) ;
 800a58a:	193b      	adds	r3, r7, r4
 800a58c:	1c5a      	adds	r2, r3, #1
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	0011      	movs	r1, r2
 800a592:	0018      	movs	r0, r3
 800a594:	f000 fe2c 	bl	800b1f0 <my_nmea_get_rmc_utc_mm>
	  my_nmea_get_rmc_utc_ss ( m , &sTime.Seconds ) ;
 800a598:	193b      	adds	r3, r7, r4
 800a59a:	1c9a      	adds	r2, r3, #2
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	0011      	movs	r1, r2
 800a5a0:	0018      	movs	r0, r3
 800a5a2:	f000 fe5f 	bl	800b264 <my_nmea_get_rmc_utc_ss>
	  my_nmea_get_rmc_utc_sss ( m , &sTime.SubSeconds ) ;
 800a5a6:	193b      	adds	r3, r7, r4
 800a5a8:	1d1a      	adds	r2, r3, #4
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	0011      	movs	r1, r2
 800a5ae:	0018      	movs	r0, r3
 800a5b0:	f000 fe92 	bl	800b2d8 <my_nmea_get_rmc_utc_sss>
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a5b4:	193b      	adds	r3, r7, r4
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a5ba:	193b      	adds	r3, r7, r4
 800a5bc:	2200      	movs	r2, #0
 800a5be:	611a      	str	r2, [r3, #16]

	  HAL_RTCEx_EnableBypassShadow ( &hrtc ) ;
 800a5c0:	4b0b      	ldr	r3, [pc, #44]	; (800a5f0 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800a5c2:	0018      	movs	r0, r3
 800a5c4:	f7fb fa6d 	bl	8005aa2 <HAL_RTCEx_EnableBypassShadow>
	  HAL_RTC_SetTime ( &hrtc , &sTime , RTC_FORMAT_BIN ) ;
 800a5c8:	1939      	adds	r1, r7, r4
 800a5ca:	4b09      	ldr	r3, [pc, #36]	; (800a5f0 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	0018      	movs	r0, r3
 800a5d0:	f7fa fe6a 	bl	80052a8 <HAL_RTC_SetTime>
	  HAL_RTC_SetDate ( &hrtc , &sDate , RTC_FORMAT_BIN ) ;
 800a5d4:	1979      	adds	r1, r7, r5
 800a5d6:	4b06      	ldr	r3, [pc, #24]	; (800a5f0 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800a5d8:	2200      	movs	r2, #0
 800a5da:	0018      	movs	r0, r3
 800a5dc:	f7fa ff68 	bl	80054b0 <HAL_RTC_SetDate>
	  HAL_RTCEx_DisableBypassShadow ( &hrtc ) ;
 800a5e0:	4b03      	ldr	r3, [pc, #12]	; (800a5f0 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800a5e2:	0018      	movs	r0, r3
 800a5e4:	f7fb fa91 	bl	8005b0a <HAL_RTCEx_DisableBypassShadow>
}
 800a5e8:	46c0      	nop			; (mov r8, r8)
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	b008      	add	sp, #32
 800a5ee:	bdb0      	pop	{r4, r5, r7, pc}
 800a5f0:	200006fc 	.word	0x200006fc

0800a5f4 <my_rtc_get_dt>:
void my_rtc_get_dt ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b082      	sub	sp, #8
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	6039      	str	r1, [r7, #0]
	HAL_RTC_GetDate ( &hrtc , d , RTC_FORMAT_BIN ) ;
 800a5fe:	6879      	ldr	r1, [r7, #4]
 800a600:	4b07      	ldr	r3, [pc, #28]	; (800a620 <my_rtc_get_dt+0x2c>)
 800a602:	2200      	movs	r2, #0
 800a604:	0018      	movs	r0, r3
 800a606:	f7fa ffe5 	bl	80055d4 <HAL_RTC_GetDate>
	HAL_RTC_GetTime ( &hrtc , t , RTC_FORMAT_BIN ) ;
 800a60a:	6839      	ldr	r1, [r7, #0]
 800a60c:	4b04      	ldr	r3, [pc, #16]	; (800a620 <my_rtc_get_dt+0x2c>)
 800a60e:	2200      	movs	r2, #0
 800a610:	0018      	movs	r0, r3
 800a612:	f7fa fef1 	bl	80053f8 <HAL_RTC_GetTime>
}
 800a616:	46c0      	nop			; (mov r8, r8)
 800a618:	46bd      	mov	sp, r7
 800a61a:	b002      	add	sp, #8
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	46c0      	nop			; (mov r8, r8)
 800a620:	200006fc 	.word	0x200006fc

0800a624 <my_rtc_get_time_s>:
uint16_t my_rtc_get_time_s ( char* dt_s )
{
 800a624:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a626:	b08d      	sub	sp, #52	; 0x34
 800a628:	af04      	add	r7, sp, #16
 800a62a:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 800a62c:	2508      	movs	r5, #8
 800a62e:	1979      	adds	r1, r7, r5
 800a630:	4b1b      	ldr	r3, [pc, #108]	; (800a6a0 <my_rtc_get_time_s+0x7c>)
 800a632:	2200      	movs	r2, #0
 800a634:	0018      	movs	r0, r3
 800a636:	f7fa fedf 	bl	80053f8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 800a63a:	241c      	movs	r4, #28
 800a63c:	1939      	adds	r1, r7, r4
 800a63e:	4b18      	ldr	r3, [pc, #96]	; (800a6a0 <my_rtc_get_time_s+0x7c>)
 800a640:	2200      	movs	r2, #0
 800a642:	0018      	movs	r0, r3
 800a644:	f7fa ffc6 	bl	80055d4 <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds) ;
 800a648:	0021      	movs	r1, r4
 800a64a:	187b      	adds	r3, r7, r1
 800a64c:	78db      	ldrb	r3, [r3, #3]
 800a64e:	22fa      	movs	r2, #250	; 0xfa
 800a650:	00d2      	lsls	r2, r2, #3
 800a652:	189a      	adds	r2, r3, r2
 800a654:	187b      	adds	r3, r7, r1
 800a656:	785b      	ldrb	r3, [r3, #1]
 800a658:	469c      	mov	ip, r3
 800a65a:	187b      	adds	r3, r7, r1
 800a65c:	789b      	ldrb	r3, [r3, #2]
 800a65e:	001c      	movs	r4, r3
 800a660:	0028      	movs	r0, r5
 800a662:	183b      	adds	r3, r7, r0
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	001d      	movs	r5, r3
 800a668:	183b      	adds	r3, r7, r0
 800a66a:	785b      	ldrb	r3, [r3, #1]
 800a66c:	001e      	movs	r6, r3
 800a66e:	183b      	adds	r3, r7, r0
 800a670:	789b      	ldrb	r3, [r3, #2]
 800a672:	490c      	ldr	r1, [pc, #48]	; (800a6a4 <my_rtc_get_time_s+0x80>)
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	9303      	str	r3, [sp, #12]
 800a678:	9602      	str	r6, [sp, #8]
 800a67a:	9501      	str	r5, [sp, #4]
 800a67c:	9400      	str	r4, [sp, #0]
 800a67e:	4663      	mov	r3, ip
 800a680:	f002 f85c 	bl	800c73c <sprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 800a684:	211c      	movs	r1, #28
 800a686:	187b      	adds	r3, r7, r1
 800a688:	78db      	ldrb	r3, [r3, #3]
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	22fa      	movs	r2, #250	; 0xfa
 800a68e:	00d2      	lsls	r2, r2, #3
 800a690:	4694      	mov	ip, r2
 800a692:	4463      	add	r3, ip
 800a694:	b29b      	uxth	r3, r3
}
 800a696:	0018      	movs	r0, r3
 800a698:	46bd      	mov	sp, r7
 800a69a:	b009      	add	sp, #36	; 0x24
 800a69c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a69e:	46c0      	nop			; (mov r8, r8)
 800a6a0:	200006fc 	.word	0x200006fc
 800a6a4:	08014d38 	.word	0x08014d38

0800a6a8 <my_rtc_set_alarm>:
bool my_rtc_set_alarm ( uint32_t s )
{
 800a6a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6aa:	b0a5      	sub	sp, #148	; 0x94
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
	tim_seconds = 0 ;
 800a6b0:	4b36      	ldr	r3, [pc, #216]	; (800a78c <my_rtc_set_alarm+0xe4>)
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	801a      	strh	r2, [r3, #0]

	RTC_DateTypeDef 	d ;
	RTC_TimeTypeDef 	t ;
	RTC_AlarmTypeDef	a ;

	bool r = false ;
 800a6b6:	268f      	movs	r6, #143	; 0x8f
 800a6b8:	19bb      	adds	r3, r7, r6
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	701a      	strb	r2, [r3, #0]

	my_rtc_get_dt ( &d , &t ) ;
 800a6be:	2470      	movs	r4, #112	; 0x70
 800a6c0:	193a      	adds	r2, r7, r4
 800a6c2:	2584      	movs	r5, #132	; 0x84
 800a6c4:	197b      	adds	r3, r7, r5
 800a6c6:	0011      	movs	r1, r2
 800a6c8:	0018      	movs	r0, r3
 800a6ca:	f7ff ff93 	bl	800a5f4 <my_rtc_get_dt>
	uint32_t alarm_ts = my_conv_rtc2timestamp ( &d , &t ) + s ;
 800a6ce:	193a      	adds	r2, r7, r4
 800a6d0:	197b      	adds	r3, r7, r5
 800a6d2:	0011      	movs	r1, r2
 800a6d4:	0018      	movs	r0, r3
 800a6d6:	f000 f8b7 	bl	800a848 <my_conv_rtc2timestamp>
 800a6da:	0002      	movs	r2, r0
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	189b      	adds	r3, r3, r2
 800a6e0:	2088      	movs	r0, #136	; 0x88
 800a6e2:	183a      	adds	r2, r7, r0
 800a6e4:	6013      	str	r3, [r2, #0]
	my_conv_timestamp2rtc ( alarm_ts , &d , &t ) ;
 800a6e6:	193a      	adds	r2, r7, r4
 800a6e8:	1979      	adds	r1, r7, r5
 800a6ea:	0005      	movs	r5, r0
 800a6ec:	183b      	adds	r3, r7, r0
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	0018      	movs	r0, r3
 800a6f2:	f000 f91d 	bl	800a930 <my_conv_timestamp2rtc>
	a.AlarmTime.Hours = t.Hours ;
 800a6f6:	193b      	adds	r3, r7, r4
 800a6f8:	781a      	ldrb	r2, [r3, #0]
 800a6fa:	2148      	movs	r1, #72	; 0x48
 800a6fc:	187b      	adds	r3, r7, r1
 800a6fe:	701a      	strb	r2, [r3, #0]
	a.AlarmTime.Minutes = t.Minutes ;
 800a700:	193b      	adds	r3, r7, r4
 800a702:	785a      	ldrb	r2, [r3, #1]
 800a704:	187b      	adds	r3, r7, r1
 800a706:	705a      	strb	r2, [r3, #1]
	a.AlarmTime.Seconds = t.Seconds ;
 800a708:	193b      	adds	r3, r7, r4
 800a70a:	789a      	ldrb	r2, [r3, #2]
 800a70c:	187b      	adds	r3, r7, r1
 800a70e:	709a      	strb	r2, [r3, #2]
	a.AlarmTime.SubSeconds = 0 ;
 800a710:	187b      	adds	r3, r7, r1
 800a712:	2200      	movs	r2, #0
 800a714:	605a      	str	r2, [r3, #4]
	a.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 800a716:	187b      	adds	r3, r7, r1
 800a718:	2200      	movs	r2, #0
 800a71a:	60da      	str	r2, [r3, #12]
	a.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET ;
 800a71c:	187b      	adds	r3, r7, r1
 800a71e:	2200      	movs	r2, #0
 800a720:	611a      	str	r2, [r3, #16]
	a.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY ;
 800a722:	187b      	adds	r3, r7, r1
 800a724:	2280      	movs	r2, #128	; 0x80
 800a726:	0612      	lsls	r2, r2, #24
 800a728:	615a      	str	r2, [r3, #20]
	a.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL ;
 800a72a:	187b      	adds	r3, r7, r1
 800a72c:	2200      	movs	r2, #0
 800a72e:	619a      	str	r2, [r3, #24]
	a.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE ;
 800a730:	187b      	adds	r3, r7, r1
 800a732:	2200      	movs	r2, #0
 800a734:	61da      	str	r2, [r3, #28]
	a.Alarm = RTC_ALARM_A ;
 800a736:	187b      	adds	r3, r7, r1
 800a738:	2280      	movs	r2, #128	; 0x80
 800a73a:	0052      	lsls	r2, r2, #1
 800a73c:	625a      	str	r2, [r3, #36]	; 0x24

	if ( HAL_RTC_SetAlarm ( &hrtc , &a , RTC_FORMAT_BIN ) == HAL_OK )
 800a73e:	1879      	adds	r1, r7, r1
 800a740:	4b13      	ldr	r3, [pc, #76]	; (800a790 <my_rtc_set_alarm+0xe8>)
 800a742:	2200      	movs	r2, #0
 800a744:	0018      	movs	r0, r3
 800a746:	f7fa ff93 	bl	8005670 <HAL_RTC_SetAlarm>
 800a74a:	1e03      	subs	r3, r0, #0
 800a74c:	d117      	bne.n	800a77e <my_rtc_set_alarm+0xd6>
	{
		char s[60] = {0} ;
 800a74e:	240c      	movs	r4, #12
 800a750:	193b      	adds	r3, r7, r4
 800a752:	2200      	movs	r2, #0
 800a754:	601a      	str	r2, [r3, #0]
 800a756:	3304      	adds	r3, #4
 800a758:	2238      	movs	r2, #56	; 0x38
 800a75a:	2100      	movs	r1, #0
 800a75c:	0018      	movs	r0, r3
 800a75e:	f002 f883 	bl	800c868 <memset>
		sprintf ( s , "Alarm set to %lu" , alarm_ts ) ;
 800a762:	197b      	adds	r3, r7, r5
 800a764:	681a      	ldr	r2, [r3, #0]
 800a766:	490b      	ldr	r1, [pc, #44]	; (800a794 <my_rtc_set_alarm+0xec>)
 800a768:	193b      	adds	r3, r7, r4
 800a76a:	0018      	movs	r0, r3
 800a76c:	f001 ffe6 	bl	800c73c <sprintf>
		send_debug_logs ( s ) ;
 800a770:	193b      	adds	r3, r7, r4
 800a772:	0018      	movs	r0, r3
 800a774:	f7f8 fca6 	bl	80030c4 <send_debug_logs>
		r = true ;
 800a778:	19bb      	adds	r3, r7, r6
 800a77a:	2201      	movs	r2, #1
 800a77c:	701a      	strb	r2, [r3, #0]
			break ;
		}
	}
	HAL_TIM_Base_Stop_IT ( MY_TIMER ) ;
	*/
	return r ;
 800a77e:	238f      	movs	r3, #143	; 0x8f
 800a780:	18fb      	adds	r3, r7, r3
 800a782:	781b      	ldrb	r3, [r3, #0]
}
 800a784:	0018      	movs	r0, r3
 800a786:	46bd      	mov	sp, r7
 800a788:	b025      	add	sp, #148	; 0x94
 800a78a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a78c:	20000a24 	.word	0x20000a24
 800a790:	200006fc 	.word	0x200006fc
 800a794:	08014d58 	.word	0x08014d58

0800a798 <my_string2double_conv>:
 */

#include "my_conversions.h"

double my_string2double_conv ( const char* s )
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
    double d = strtod ( s , NULL ) ;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2100      	movs	r1, #0
 800a7a4:	0018      	movs	r0, r3
 800a7a6:	f001 fe2d 	bl	800c404 <strtod>
 800a7aa:	0002      	movs	r2, r0
 800a7ac:	000b      	movs	r3, r1
 800a7ae:	60ba      	str	r2, [r7, #8]
 800a7b0:	60fb      	str	r3, [r7, #12]
    return d ;
 800a7b2:	68ba      	ldr	r2, [r7, #8]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
}
 800a7b6:	0010      	movs	r0, r2
 800a7b8:	0019      	movs	r1, r3
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	b004      	add	sp, #16
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	0008      	movs	r0, r1
 800a7ca:	0011      	movs	r1, r2
 800a7cc:	1cfb      	adds	r3, r7, #3
 800a7ce:	1c02      	adds	r2, r0, #0
 800a7d0:	701a      	strb	r2, [r3, #0]
 800a7d2:	1cbb      	adds	r3, r7, #2
 800a7d4:	1c0a      	adds	r2, r1, #0
 800a7d6:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 800a7d8:	230f      	movs	r3, #15
 800a7da:	18fb      	adds	r3, r7, r3
 800a7dc:	2200      	movs	r2, #0
 800a7de:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 800a7e0:	230e      	movs	r3, #14
 800a7e2:	18fb      	adds	r3, r7, r3
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 800a7e8:	e01c      	b.n	800a824 <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 800a7ea:	230f      	movs	r3, #15
 800a7ec:	18fb      	adds	r3, r7, r3
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	18d3      	adds	r3, r2, r3
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	1cfa      	adds	r2, r7, #3
 800a7f8:	7812      	ldrb	r2, [r2, #0]
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d105      	bne.n	800a80a <my_find_char_position+0x4a>
			p++ ;
 800a7fe:	210e      	movs	r1, #14
 800a800:	187b      	adds	r3, r7, r1
 800a802:	781a      	ldrb	r2, [r3, #0]
 800a804:	187b      	adds	r3, r7, r1
 800a806:	3201      	adds	r2, #1
 800a808:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 800a80a:	230e      	movs	r3, #14
 800a80c:	18fa      	adds	r2, r7, r3
 800a80e:	1cbb      	adds	r3, r7, #2
 800a810:	7812      	ldrb	r2, [r2, #0]
 800a812:	781b      	ldrb	r3, [r3, #0]
 800a814:	429a      	cmp	r2, r3
 800a816:	d00e      	beq.n	800a836 <my_find_char_position+0x76>
			break ;
		i++ ;
 800a818:	210f      	movs	r1, #15
 800a81a:	187b      	adds	r3, r7, r1
 800a81c:	781a      	ldrb	r2, [r3, #0]
 800a81e:	187b      	adds	r3, r7, r1
 800a820:	3201      	adds	r2, #1
 800a822:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 800a824:	230f      	movs	r3, #15
 800a826:	18fb      	adds	r3, r7, r3
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	687a      	ldr	r2, [r7, #4]
 800a82c:	18d3      	adds	r3, r2, r3
 800a82e:	781b      	ldrb	r3, [r3, #0]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d1da      	bne.n	800a7ea <my_find_char_position+0x2a>
 800a834:	e000      	b.n	800a838 <my_find_char_position+0x78>
			break ;
 800a836:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 800a838:	230f      	movs	r3, #15
 800a83a:	18fb      	adds	r3, r7, r3
 800a83c:	781b      	ldrb	r3, [r3, #0]
}
 800a83e:	0018      	movs	r0, r3
 800a840:	46bd      	mov	sp, r7
 800a842:	b004      	add	sp, #16
 800a844:	bd80      	pop	{r7, pc}
	...

0800a848 <my_conv_rtc2timestamp>:

// Function converting RTC date and time to Unix timestamp (ts): number of seconds after the Epoch (1970.01.01).
uint32_t my_conv_rtc2timestamp ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b086      	sub	sp, #24
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	6039      	str	r1, [r7, #0]
    // Number of days in months (considering leap years).
    static const uint8_t monthDays[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;

    // Conversion of years into days.
    uint32_t years = d->Year + 2000;  // RTC starts from 20
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	78db      	ldrb	r3, [r3, #3]
 800a856:	22fa      	movs	r2, #250	; 0xfa
 800a858:	00d2      	lsls	r2, r2, #3
 800a85a:	4694      	mov	ip, r2
 800a85c:	4463      	add	r3, ip
 800a85e:	60fb      	str	r3, [r7, #12]
    uint32_t days = ( years - 1970 ) * 365 + ( ( years - 1969 ) / 4 ) ;  // Days for years and leap years.
 800a860:	68fa      	ldr	r2, [r7, #12]
 800a862:	0013      	movs	r3, r2
 800a864:	00db      	lsls	r3, r3, #3
 800a866:	189b      	adds	r3, r3, r2
 800a868:	00db      	lsls	r3, r3, #3
 800a86a:	189b      	adds	r3, r3, r2
 800a86c:	009a      	lsls	r2, r3, #2
 800a86e:	189a      	adds	r2, r3, r2
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	492c      	ldr	r1, [pc, #176]	; (800a924 <my_conv_rtc2timestamp+0xdc>)
 800a874:	468c      	mov	ip, r1
 800a876:	4463      	add	r3, ip
 800a878:	089b      	lsrs	r3, r3, #2
 800a87a:	18d3      	adds	r3, r2, r3
 800a87c:	4a2a      	ldr	r2, [pc, #168]	; (800a928 <my_conv_rtc2timestamp+0xe0>)
 800a87e:	4694      	mov	ip, r2
 800a880:	4463      	add	r3, ip
 800a882:	617b      	str	r3, [r7, #20]
    // Conversion of months into days.
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 800a884:	2300      	movs	r3, #0
 800a886:	613b      	str	r3, [r7, #16]
 800a888:	e00a      	b.n	800a8a0 <my_conv_rtc2timestamp+0x58>
    {
        days += monthDays[i] ;
 800a88a:	4a28      	ldr	r2, [pc, #160]	; (800a92c <my_conv_rtc2timestamp+0xe4>)
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	18d3      	adds	r3, r2, r3
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	001a      	movs	r2, r3
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	189b      	adds	r3, r3, r2
 800a898:	617b      	str	r3, [r7, #20]
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	3301      	adds	r3, #1
 800a89e:	613b      	str	r3, [r7, #16]
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	785b      	ldrb	r3, [r3, #1]
 800a8a4:	3b01      	subs	r3, #1
 800a8a6:	693a      	ldr	r2, [r7, #16]
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	dbee      	blt.n	800a88a <my_conv_rtc2timestamp+0x42>
    }
    if ( d->Month > 2 && my_conv_is_leap_year ( years ) )
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	785b      	ldrb	r3, [r3, #1]
 800a8b0:	2b02      	cmp	r3, #2
 800a8b2:	d908      	bls.n	800a8c6 <my_conv_rtc2timestamp+0x7e>
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	0018      	movs	r0, r3
 800a8b8:	f000 f8de 	bl	800aa78 <my_conv_is_leap_year>
 800a8bc:	1e03      	subs	r3, r0, #0
 800a8be:	d002      	beq.n	800a8c6 <my_conv_rtc2timestamp+0x7e>
    {
        days++ ;  // Add one day in a leap year.
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	617b      	str	r3, [r7, #20]
    }
    // add the days of the month
    days += d->Date - 1 ;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	789b      	ldrb	r3, [r3, #2]
 800a8ca:	001a      	movs	r2, r3
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	18d3      	adds	r3, r2, r3
 800a8d0:	3b01      	subs	r3, #1
 800a8d2:	617b      	str	r3, [r7, #20]
    // Convert days into seconds and add hours, minutes, seconds.
    uint32_t ts = days * 86400 + t->Hours * 3600 + t->Minutes * 60 + t->Seconds ;
 800a8d4:	697a      	ldr	r2, [r7, #20]
 800a8d6:	0013      	movs	r3, r2
 800a8d8:	005b      	lsls	r3, r3, #1
 800a8da:	189b      	adds	r3, r3, r2
 800a8dc:	011a      	lsls	r2, r3, #4
 800a8de:	1ad2      	subs	r2, r2, r3
 800a8e0:	0113      	lsls	r3, r2, #4
 800a8e2:	1a9b      	subs	r3, r3, r2
 800a8e4:	01db      	lsls	r3, r3, #7
 800a8e6:	0019      	movs	r1, r3
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	781b      	ldrb	r3, [r3, #0]
 800a8ec:	001a      	movs	r2, r3
 800a8ee:	0013      	movs	r3, r2
 800a8f0:	011b      	lsls	r3, r3, #4
 800a8f2:	1a9b      	subs	r3, r3, r2
 800a8f4:	011a      	lsls	r2, r3, #4
 800a8f6:	1ad2      	subs	r2, r2, r3
 800a8f8:	0113      	lsls	r3, r2, #4
 800a8fa:	001a      	movs	r2, r3
 800a8fc:	0013      	movs	r3, r2
 800a8fe:	18ca      	adds	r2, r1, r3
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	785b      	ldrb	r3, [r3, #1]
 800a904:	0019      	movs	r1, r3
 800a906:	000b      	movs	r3, r1
 800a908:	011b      	lsls	r3, r3, #4
 800a90a:	1a5b      	subs	r3, r3, r1
 800a90c:	009b      	lsls	r3, r3, #2
 800a90e:	18d3      	adds	r3, r2, r3
 800a910:	683a      	ldr	r2, [r7, #0]
 800a912:	7892      	ldrb	r2, [r2, #2]
 800a914:	189b      	adds	r3, r3, r2
 800a916:	60bb      	str	r3, [r7, #8]

    return ts ;
 800a918:	68bb      	ldr	r3, [r7, #8]
}
 800a91a:	0018      	movs	r0, r3
 800a91c:	46bd      	mov	sp, r7
 800a91e:	b006      	add	sp, #24
 800a920:	bd80      	pop	{r7, pc}
 800a922:	46c0      	nop			; (mov r8, r8)
 800a924:	fffff84f 	.word	0xfffff84f
 800a928:	fff50736 	.word	0xfff50736
 800a92c:	08014e58 	.word	0x08014e58

0800a930 <my_conv_timestamp2rtc>:

// Function converting Unix timestamp (ts) to RTC date and time
void my_conv_timestamp2rtc ( uint32_t ts , RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 800a930:	b590      	push	{r4, r7, lr}
 800a932:	b08b      	sub	sp, #44	; 0x2c
 800a934:	af00      	add	r7, sp, #0
 800a936:	60f8      	str	r0, [r7, #12]
 800a938:	60b9      	str	r1, [r7, #8]
 800a93a:	607a      	str	r2, [r7, #4]
	static const uint16_t daysInMonth[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;
	uint32_t seconds = ts % 60 ;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	213c      	movs	r1, #60	; 0x3c
 800a940:	0018      	movs	r0, r3
 800a942:	f7f5 fc81 	bl	8000248 <__aeabi_uidivmod>
 800a946:	000b      	movs	r3, r1
 800a948:	61bb      	str	r3, [r7, #24]
	uint32_t minutes = ( ts / 60 ) % 60 ;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	213c      	movs	r1, #60	; 0x3c
 800a94e:	0018      	movs	r0, r3
 800a950:	f7f5 fbf4 	bl	800013c <__udivsi3>
 800a954:	0003      	movs	r3, r0
 800a956:	213c      	movs	r1, #60	; 0x3c
 800a958:	0018      	movs	r0, r3
 800a95a:	f7f5 fc75 	bl	8000248 <__aeabi_uidivmod>
 800a95e:	000b      	movs	r3, r1
 800a960:	617b      	str	r3, [r7, #20]
	uint32_t hours = ( ts / 3600 ) % 24 ;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	22e1      	movs	r2, #225	; 0xe1
 800a966:	0111      	lsls	r1, r2, #4
 800a968:	0018      	movs	r0, r3
 800a96a:	f7f5 fbe7 	bl	800013c <__udivsi3>
 800a96e:	0003      	movs	r3, r0
 800a970:	2118      	movs	r1, #24
 800a972:	0018      	movs	r0, r3
 800a974:	f7f5 fc68 	bl	8000248 <__aeabi_uidivmod>
 800a978:	000b      	movs	r3, r1
 800a97a:	613b      	str	r3, [r7, #16]

	// Counting days since Epoch
	uint32_t days = ts / 86400 ;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	493b      	ldr	r1, [pc, #236]	; (800aa6c <my_conv_timestamp2rtc+0x13c>)
 800a980:	0018      	movs	r0, r3
 800a982:	f7f5 fbdb 	bl	800013c <__udivsi3>
 800a986:	0003      	movs	r3, r0
 800a988:	627b      	str	r3, [r7, #36]	; 0x24

	// Calculating the year
	uint32_t year = 1970 ;
 800a98a:	4b39      	ldr	r3, [pc, #228]	; (800aa70 <my_conv_timestamp2rtc+0x140>)
 800a98c:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 800a98e:	e00d      	b.n	800a9ac <my_conv_timestamp2rtc+0x7c>
	{
		days -= 365 + my_conv_is_leap_year ( year ) ;
 800a990:	6a3b      	ldr	r3, [r7, #32]
 800a992:	0018      	movs	r0, r3
 800a994:	f000 f870 	bl	800aa78 <my_conv_is_leap_year>
 800a998:	0003      	movs	r3, r0
 800a99a:	336e      	adds	r3, #110	; 0x6e
 800a99c:	33ff      	adds	r3, #255	; 0xff
 800a99e:	001a      	movs	r2, r3
 800a9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a2:	1a9b      	subs	r3, r3, r2
 800a9a4:	627b      	str	r3, [r7, #36]	; 0x24
		year++ ;
 800a9a6:	6a3b      	ldr	r3, [r7, #32]
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 800a9ac:	6a3b      	ldr	r3, [r7, #32]
 800a9ae:	0018      	movs	r0, r3
 800a9b0:	f000 f862 	bl	800aa78 <my_conv_is_leap_year>
 800a9b4:	0003      	movs	r3, r0
 800a9b6:	336e      	adds	r3, #110	; 0x6e
 800a9b8:	33ff      	adds	r3, #255	; 0xff
 800a9ba:	001a      	movs	r2, r3
 800a9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d2e6      	bcs.n	800a990 <my_conv_timestamp2rtc+0x60>
	}

	// Calculating the month
	uint32_t month = 0 ;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 800a9c6:	e018      	b.n	800a9fa <my_conv_timestamp2rtc+0xca>
		days -= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ;
 800a9c8:	4b2a      	ldr	r3, [pc, #168]	; (800aa74 <my_conv_timestamp2rtc+0x144>)
 800a9ca:	69fa      	ldr	r2, [r7, #28]
 800a9cc:	0052      	lsls	r2, r2, #1
 800a9ce:	5ad3      	ldrh	r3, [r2, r3]
 800a9d0:	001c      	movs	r4, r3
 800a9d2:	69fb      	ldr	r3, [r7, #28]
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d107      	bne.n	800a9e8 <my_conv_timestamp2rtc+0xb8>
 800a9d8:	6a3b      	ldr	r3, [r7, #32]
 800a9da:	0018      	movs	r0, r3
 800a9dc:	f000 f84c 	bl	800aa78 <my_conv_is_leap_year>
 800a9e0:	1e03      	subs	r3, r0, #0
 800a9e2:	d001      	beq.n	800a9e8 <my_conv_timestamp2rtc+0xb8>
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	e000      	b.n	800a9ea <my_conv_timestamp2rtc+0xba>
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	191b      	adds	r3, r3, r4
 800a9ec:	001a      	movs	r2, r3
 800a9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f0:	1a9b      	subs	r3, r3, r2
 800a9f2:	627b      	str	r3, [r7, #36]	; 0x24
		month++ ;
 800a9f4:	69fb      	ldr	r3, [r7, #28]
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 800a9fa:	4b1e      	ldr	r3, [pc, #120]	; (800aa74 <my_conv_timestamp2rtc+0x144>)
 800a9fc:	69fa      	ldr	r2, [r7, #28]
 800a9fe:	0052      	lsls	r2, r2, #1
 800aa00:	5ad3      	ldrh	r3, [r2, r3]
 800aa02:	001c      	movs	r4, r3
 800aa04:	69fb      	ldr	r3, [r7, #28]
 800aa06:	2b01      	cmp	r3, #1
 800aa08:	d107      	bne.n	800aa1a <my_conv_timestamp2rtc+0xea>
 800aa0a:	6a3b      	ldr	r3, [r7, #32]
 800aa0c:	0018      	movs	r0, r3
 800aa0e:	f000 f833 	bl	800aa78 <my_conv_is_leap_year>
 800aa12:	1e03      	subs	r3, r0, #0
 800aa14:	d001      	beq.n	800aa1a <my_conv_timestamp2rtc+0xea>
 800aa16:	2301      	movs	r3, #1
 800aa18:	e000      	b.n	800aa1c <my_conv_timestamp2rtc+0xec>
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	191b      	adds	r3, r3, r4
 800aa1e:	001a      	movs	r2, r3
 800aa20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d2d0      	bcs.n	800a9c8 <my_conv_timestamp2rtc+0x98>
	}

	// Setting date and time in RTC structures
	d->Year = year - 2000 ; // RTC_DateTypeDef.Year expects years since 2000
 800aa26:	6a3b      	ldr	r3, [r7, #32]
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	3330      	adds	r3, #48	; 0x30
 800aa2c:	b2da      	uxtb	r2, r3
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	70da      	strb	r2, [r3, #3]
	d->Month = month + 1 ;  // +1 because month is counted from 0
 800aa32:	69fb      	ldr	r3, [r7, #28]
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	3301      	adds	r3, #1
 800aa38:	b2da      	uxtb	r2, r3
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	705a      	strb	r2, [r3, #1]
	d->Date = days + 1 ;    // +1 because days are counted from 0
 800aa3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	3301      	adds	r3, #1
 800aa44:	b2da      	uxtb	r2, r3
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	709a      	strb	r2, [r3, #2]
	t->Hours = hours ;
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	b2da      	uxtb	r2, r3
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	701a      	strb	r2, [r3, #0]
	t->Minutes = minutes ;
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	b2da      	uxtb	r2, r3
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	705a      	strb	r2, [r3, #1]
	t->Seconds = seconds ;
 800aa5a:	69bb      	ldr	r3, [r7, #24]
 800aa5c:	b2da      	uxtb	r2, r3
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	709a      	strb	r2, [r3, #2]
}
 800aa62:	46c0      	nop			; (mov r8, r8)
 800aa64:	46bd      	mov	sp, r7
 800aa66:	b00b      	add	sp, #44	; 0x2c
 800aa68:	bd90      	pop	{r4, r7, pc}
 800aa6a:	46c0      	nop			; (mov r8, r8)
 800aa6c:	00015180 	.word	0x00015180
 800aa70:	000007b2 	.word	0x000007b2
 800aa74:	08014e64 	.word	0x08014e64

0800aa78 <my_conv_is_leap_year>:

// Function checking for leap years
int my_conv_is_leap_year ( int yyyy )
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
    return ( ( yyyy % 4 == 0 ) && ( yyyy % 100 != 0 ) ) || ( yyyy % 400 == 0 ) ;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2203      	movs	r2, #3
 800aa84:	4013      	ands	r3, r2
 800aa86:	d106      	bne.n	800aa96 <my_conv_is_leap_year+0x1e>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2164      	movs	r1, #100	; 0x64
 800aa8c:	0018      	movs	r0, r3
 800aa8e:	f7f5 fcc5 	bl	800041c <__aeabi_idivmod>
 800aa92:	1e0b      	subs	r3, r1, #0
 800aa94:	d107      	bne.n	800aaa6 <my_conv_is_leap_year+0x2e>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	22c8      	movs	r2, #200	; 0xc8
 800aa9a:	0051      	lsls	r1, r2, #1
 800aa9c:	0018      	movs	r0, r3
 800aa9e:	f7f5 fcbd 	bl	800041c <__aeabi_idivmod>
 800aaa2:	1e0b      	subs	r3, r1, #0
 800aaa4:	d101      	bne.n	800aaaa <my_conv_is_leap_year+0x32>
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	e000      	b.n	800aaac <my_conv_is_leap_year+0x34>
 800aaaa:	2300      	movs	r3, #0
}
 800aaac:	0018      	movs	r0, r3
 800aaae:	46bd      	mov	sp, r7
 800aab0:	b002      	add	sp, #8
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <my_nmea_message>:
#include <inttypes.h>
#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b084      	sub	sp, #16
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	60f8      	str	r0, [r7, #12]
 800aabc:	60b9      	str	r1, [r7, #8]
 800aabe:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	2b24      	cmp	r3, #36	; 0x24
 800aac6:	d117      	bne.n	800aaf8 <my_nmea_message+0x44>
    {
        *i = 0 ;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	781b      	ldrb	r3, [r3, #0]
 800aad2:	1c5a      	adds	r2, r3, #1
 800aad4:	b2d1      	uxtb	r1, r2
 800aad6:	687a      	ldr	r2, [r7, #4]
 800aad8:	7011      	strb	r1, [r2, #0]
 800aada:	001a      	movs	r2, r3
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	189b      	adds	r3, r3, r2
 800aae0:	68fa      	ldr	r2, [r7, #12]
 800aae2:	7812      	ldrb	r2, [r2, #0]
 800aae4:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	781b      	ldrb	r3, [r3, #0]
 800aaea:	001a      	movs	r2, r3
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	189b      	adds	r3, r3, r2
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	701a      	strb	r2, [r3, #0]
        return 0 ;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	e045      	b.n	800ab84 <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	2b1f      	cmp	r3, #31
 800aafe:	d907      	bls.n	800ab10 <my_nmea_message+0x5c>
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	781b      	ldrb	r3, [r3, #0]
 800ab04:	2b7e      	cmp	r3, #126	; 0x7e
 800ab06:	d803      	bhi.n	800ab10 <my_nmea_message+0x5c>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d103      	bne.n	800ab18 <my_nmea_message+0x64>
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	781b      	ldrb	r3, [r3, #0]
 800ab14:	2b0d      	cmp	r3, #13
 800ab16:	d114      	bne.n	800ab42 <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	1c5a      	adds	r2, r3, #1
 800ab1e:	b2d1      	uxtb	r1, r2
 800ab20:	687a      	ldr	r2, [r7, #4]
 800ab22:	7011      	strb	r1, [r2, #0]
 800ab24:	001a      	movs	r2, r3
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	189b      	adds	r3, r3, r2
 800ab2a:	68fa      	ldr	r2, [r7, #12]
 800ab2c:	7812      	ldrb	r2, [r2, #0]
 800ab2e:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	001a      	movs	r2, r3
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	189b      	adds	r3, r3, r2
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	701a      	strb	r2, [r3, #0]
        return 1 ;
 800ab3e:	2301      	movs	r3, #1
 800ab40:	e020      	b.n	800ab84 <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	2b0a      	cmp	r3, #10
 800ab48:	d11a      	bne.n	800ab80 <my_nmea_message+0xcc>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	781b      	ldrb	r3, [r3, #0]
 800ab4e:	2b01      	cmp	r3, #1
 800ab50:	d916      	bls.n	800ab80 <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	3b01      	subs	r3, #1
 800ab58:	b2da      	uxtb	r2, r3
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	701a      	strb	r2, [r3, #0]
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	781b      	ldrb	r3, [r3, #0]
 800ab62:	001a      	movs	r2, r3
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	189b      	adds	r3, r3, r2
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	2b0d      	cmp	r3, #13
 800ab6c:	d108      	bne.n	800ab80 <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	001a      	movs	r2, r3
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	189b      	adds	r3, r3, r2
 800ab78:	2200      	movs	r2, #0
 800ab7a:	701a      	strb	r2, [r3, #0]
            return 2 ;
 800ab7c:	2302      	movs	r3, #2
 800ab7e:	e001      	b.n	800ab84 <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 800ab80:	2301      	movs	r3, #1
 800ab82:	425b      	negs	r3, r3
}
 800ab84:	0018      	movs	r0, r3
 800ab86:	46bd      	mov	sp, r7
 800ab88:	b004      	add	sp, #16
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <get_my_nmea_gngsa_fixed_mode_s>:

const char get_my_nmea_gngsa_fixed_mode_s ( const char* m )
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
	return m[9] ;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	3309      	adds	r3, #9
 800ab98:	781b      	ldrb	r3, [r3, #0]
}
 800ab9a:	0018      	movs	r0, r3
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	b002      	add	sp, #8
 800aba0:	bd80      	pop	{r7, pc}

0800aba2 <get_my_nmea_gngsa_pdop_d>:

double get_my_nmea_gngsa_pdop_d ( const char* m )
{
 800aba2:	b5b0      	push	{r4, r5, r7, lr}
 800aba4:	b086      	sub	sp, #24
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
	uint8_t pdop_position = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION ) + 1 ;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	220f      	movs	r2, #15
 800abae:	212c      	movs	r1, #44	; 0x2c
 800abb0:	0018      	movs	r0, r3
 800abb2:	f7ff fe05 	bl	800a7c0 <my_find_char_position>
 800abb6:	0003      	movs	r3, r0
 800abb8:	001a      	movs	r2, r3
 800abba:	2517      	movs	r5, #23
 800abbc:	197b      	adds	r3, r7, r5
 800abbe:	3201      	adds	r2, #1
 800abc0:	701a      	strb	r2, [r3, #0]
	uint8_t pdop_length = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION + 1 ) - pdop_position ;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2210      	movs	r2, #16
 800abc6:	212c      	movs	r1, #44	; 0x2c
 800abc8:	0018      	movs	r0, r3
 800abca:	f7ff fdf9 	bl	800a7c0 <my_find_char_position>
 800abce:	0003      	movs	r3, r0
 800abd0:	0019      	movs	r1, r3
 800abd2:	2416      	movs	r4, #22
 800abd4:	193b      	adds	r3, r7, r4
 800abd6:	197a      	adds	r2, r7, r5
 800abd8:	7812      	ldrb	r2, [r2, #0]
 800abda:	1a8a      	subs	r2, r1, r2
 800abdc:	701a      	strb	r2, [r3, #0]

	char* pdop_s = (char*) malloc ( ( pdop_length +1 ) * sizeof ( char ) ) ;
 800abde:	193b      	adds	r3, r7, r4
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	3301      	adds	r3, #1
 800abe4:	0018      	movs	r0, r3
 800abe6:	f000 fbab 	bl	800b340 <malloc>
 800abea:	0003      	movs	r3, r0
 800abec:	613b      	str	r3, [r7, #16]
	strncpy ( pdop_s , m + pdop_position , pdop_length ) ; // Kopiowanie fragmentu łańcucha
 800abee:	197b      	adds	r3, r7, r5
 800abf0:	781b      	ldrb	r3, [r3, #0]
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	18d1      	adds	r1, r2, r3
 800abf6:	193b      	adds	r3, r7, r4
 800abf8:	781a      	ldrb	r2, [r3, #0]
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	0018      	movs	r0, r3
 800abfe:	f001 fe4c 	bl	800c89a <strncpy>
	pdop_s[pdop_length] = '\0';
 800ac02:	193b      	adds	r3, r7, r4
 800ac04:	781b      	ldrb	r3, [r3, #0]
 800ac06:	693a      	ldr	r2, [r7, #16]
 800ac08:	18d3      	adds	r3, r2, r3
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	701a      	strb	r2, [r3, #0]
	double pdop = my_string2double_conv ( pdop_s ) ;
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	0018      	movs	r0, r3
 800ac12:	f7ff fdc1 	bl	800a798 <my_string2double_conv>
 800ac16:	0002      	movs	r2, r0
 800ac18:	000b      	movs	r3, r1
 800ac1a:	60ba      	str	r2, [r7, #8]
 800ac1c:	60fb      	str	r3, [r7, #12]
	free ( pdop_s ) ;
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	0018      	movs	r0, r3
 800ac22:	f000 fb97 	bl	800b354 <free>
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
 800ac26:	68ba      	ldr	r2, [r7, #8]
 800ac28:	68fb      	ldr	r3, [r7, #12]
}
 800ac2a:	0010      	movs	r0, r2
 800ac2c:	0019      	movs	r1, r3
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	b006      	add	sp, #24
 800ac32:	bdb0      	pop	{r4, r5, r7, pc}

0800ac34 <is_my_nmea_checksum_ok>:


bool is_my_nmea_checksum_ok ( const char* s )
{
 800ac34:	b590      	push	{r4, r7, lr}
 800ac36:	b085      	sub	sp, #20
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 800ac3c:	230f      	movs	r3, #15
 800ac3e:	18fb      	adds	r3, r7, r3
 800ac40:	2200      	movs	r2, #0
 800ac42:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 800ac44:	230e      	movs	r3, #14
 800ac46:	18fb      	adds	r3, r7, r3
 800ac48:	2201      	movs	r2, #1
 800ac4a:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 800ac4c:	e00f      	b.n	800ac6e <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 800ac4e:	220e      	movs	r2, #14
 800ac50:	18bb      	adds	r3, r7, r2
 800ac52:	781b      	ldrb	r3, [r3, #0]
 800ac54:	18ba      	adds	r2, r7, r2
 800ac56:	1c59      	adds	r1, r3, #1
 800ac58:	7011      	strb	r1, [r2, #0]
 800ac5a:	001a      	movs	r2, r3
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	189b      	adds	r3, r3, r2
 800ac60:	7819      	ldrb	r1, [r3, #0]
 800ac62:	220f      	movs	r2, #15
 800ac64:	18bb      	adds	r3, r7, r2
 800ac66:	18ba      	adds	r2, r7, r2
 800ac68:	7812      	ldrb	r2, [r2, #0]
 800ac6a:	404a      	eors	r2, r1
 800ac6c:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 800ac6e:	210e      	movs	r1, #14
 800ac70:	187b      	adds	r3, r7, r1
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	18d3      	adds	r3, r2, r3
 800ac78:	781b      	ldrb	r3, [r3, #0]
 800ac7a:	2b2a      	cmp	r3, #42	; 0x2a
 800ac7c:	d00a      	beq.n	800ac94 <is_my_nmea_checksum_ok+0x60>
 800ac7e:	187b      	adds	r3, r7, r1
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	18d3      	adds	r3, r2, r3
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d003      	beq.n	800ac94 <is_my_nmea_checksum_ok+0x60>
 800ac8c:	187b      	adds	r3, r7, r1
 800ac8e:	781b      	ldrb	r3, [r3, #0]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d1dc      	bne.n	800ac4e <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 800ac94:	230f      	movs	r3, #15
 800ac96:	18fb      	adds	r3, r7, r3
 800ac98:	781c      	ldrb	r4, [r3, #0]
 800ac9a:	210e      	movs	r1, #14
 800ac9c:	187b      	adds	r3, r7, r1
 800ac9e:	187a      	adds	r2, r7, r1
 800aca0:	7812      	ldrb	r2, [r2, #0]
 800aca2:	3201      	adds	r2, #1
 800aca4:	701a      	strb	r2, [r3, #0]
 800aca6:	187b      	adds	r3, r7, r1
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	687a      	ldr	r2, [r7, #4]
 800acac:	18d3      	adds	r3, r2, r3
 800acae:	2210      	movs	r2, #16
 800acb0:	2100      	movs	r1, #0
 800acb2:	0018      	movs	r0, r3
 800acb4:	f001 fc3e 	bl	800c534 <strtol>
 800acb8:	0003      	movs	r3, r0
 800acba:	1ae3      	subs	r3, r4, r3
 800acbc:	425a      	negs	r2, r3
 800acbe:	4153      	adcs	r3, r2
 800acc0:	b2db      	uxtb	r3, r3
}
 800acc2:	0018      	movs	r0, r3
 800acc4:	46bd      	mov	sp, r7
 800acc6:	b005      	add	sp, #20
 800acc8:	bd90      	pop	{r4, r7, pc}
	...

0800accc <nmea2decimal>:
double nmea2decimal ( const char *coord , char dir )
{
 800accc:	b5b0      	push	{r4, r5, r7, lr}
 800acce:	b086      	sub	sp, #24
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	000a      	movs	r2, r1
 800acd6:	1cfb      	adds	r3, r7, #3
 800acd8:	701a      	strb	r2, [r3, #0]
    double deg , min ;
    sscanf ( coord , "%lf" , &deg ) ;
 800acda:	2308      	movs	r3, #8
 800acdc:	18fa      	adds	r2, r7, r3
 800acde:	492f      	ldr	r1, [pc, #188]	; (800ad9c <nmea2decimal+0xd0>)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	0018      	movs	r0, r3
 800ace4:	f001 fd4a 	bl	800c77c <sscanf>
    min = deg / 100 ;
 800ace8:	68b8      	ldr	r0, [r7, #8]
 800acea:	68f9      	ldr	r1, [r7, #12]
 800acec:	2200      	movs	r2, #0
 800acee:	4b2c      	ldr	r3, [pc, #176]	; (800ada0 <nmea2decimal+0xd4>)
 800acf0:	f7f6 f8c2 	bl	8000e78 <__aeabi_ddiv>
 800acf4:	0002      	movs	r2, r0
 800acf6:	000b      	movs	r3, r1
 800acf8:	613a      	str	r2, [r7, #16]
 800acfa:	617b      	str	r3, [r7, #20]
    deg = (int) min ;
 800acfc:	6938      	ldr	r0, [r7, #16]
 800acfe:	6979      	ldr	r1, [r7, #20]
 800ad00:	f7f7 fb16 	bl	8002330 <__aeabi_d2iz>
 800ad04:	0003      	movs	r3, r0
 800ad06:	0018      	movs	r0, r3
 800ad08:	f7f7 fb48 	bl	800239c <__aeabi_i2d>
 800ad0c:	0002      	movs	r2, r0
 800ad0e:	000b      	movs	r3, r1
 800ad10:	60ba      	str	r2, [r7, #8]
 800ad12:	60fb      	str	r3, [r7, #12]
    min = ( min - deg ) * 10 ;
 800ad14:	68ba      	ldr	r2, [r7, #8]
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	6938      	ldr	r0, [r7, #16]
 800ad1a:	6979      	ldr	r1, [r7, #20]
 800ad1c:	f7f6 ff68 	bl	8001bf0 <__aeabi_dsub>
 800ad20:	0002      	movs	r2, r0
 800ad22:	000b      	movs	r3, r1
 800ad24:	0010      	movs	r0, r2
 800ad26:	0019      	movs	r1, r3
 800ad28:	2200      	movs	r2, #0
 800ad2a:	4b1e      	ldr	r3, [pc, #120]	; (800ada4 <nmea2decimal+0xd8>)
 800ad2c:	f7f6 fc9e 	bl	800166c <__aeabi_dmul>
 800ad30:	0002      	movs	r2, r0
 800ad32:	000b      	movs	r3, r1
 800ad34:	613a      	str	r2, [r7, #16]
 800ad36:	617b      	str	r3, [r7, #20]
    min = min / 6 ;
 800ad38:	2200      	movs	r2, #0
 800ad3a:	4b1b      	ldr	r3, [pc, #108]	; (800ada8 <nmea2decimal+0xdc>)
 800ad3c:	6938      	ldr	r0, [r7, #16]
 800ad3e:	6979      	ldr	r1, [r7, #20]
 800ad40:	f7f6 f89a 	bl	8000e78 <__aeabi_ddiv>
 800ad44:	0002      	movs	r2, r0
 800ad46:	000b      	movs	r3, r1
 800ad48:	613a      	str	r2, [r7, #16]
 800ad4a:	617b      	str	r3, [r7, #20]
    //double c = deg + min ;
    if ( dir == 'S' || dir == 'W' )
 800ad4c:	1cfb      	adds	r3, r7, #3
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	2b53      	cmp	r3, #83	; 0x53
 800ad52:	d003      	beq.n	800ad5c <nmea2decimal+0x90>
 800ad54:	1cfb      	adds	r3, r7, #3
 800ad56:	781b      	ldrb	r3, [r3, #0]
 800ad58:	2b57      	cmp	r3, #87	; 0x57
 800ad5a:	d10e      	bne.n	800ad7a <nmea2decimal+0xae>
    	return ( deg + min ) * -1 ;
 800ad5c:	68b8      	ldr	r0, [r7, #8]
 800ad5e:	68f9      	ldr	r1, [r7, #12]
 800ad60:	693a      	ldr	r2, [r7, #16]
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	f7f5 fd28 	bl	80007b8 <__aeabi_dadd>
 800ad68:	0002      	movs	r2, r0
 800ad6a:	000b      	movs	r3, r1
 800ad6c:	0011      	movs	r1, r2
 800ad6e:	000c      	movs	r4, r1
 800ad70:	2180      	movs	r1, #128	; 0x80
 800ad72:	0609      	lsls	r1, r1, #24
 800ad74:	4059      	eors	r1, r3
 800ad76:	000d      	movs	r5, r1
 800ad78:	e009      	b.n	800ad8e <nmea2decimal+0xc2>
    else
    	return deg + min ;
 800ad7a:	68b8      	ldr	r0, [r7, #8]
 800ad7c:	68f9      	ldr	r1, [r7, #12]
 800ad7e:	693a      	ldr	r2, [r7, #16]
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	f7f5 fd19 	bl	80007b8 <__aeabi_dadd>
 800ad86:	0002      	movs	r2, r0
 800ad88:	000b      	movs	r3, r1
 800ad8a:	0014      	movs	r4, r2
 800ad8c:	001d      	movs	r5, r3
}
 800ad8e:	0022      	movs	r2, r4
 800ad90:	002b      	movs	r3, r5
 800ad92:	0010      	movs	r0, r2
 800ad94:	0019      	movs	r1, r3
 800ad96:	46bd      	mov	sp, r7
 800ad98:	b006      	add	sp, #24
 800ad9a:	bdb0      	pop	{r4, r5, r7, pc}
 800ad9c:	08014d6c 	.word	0x08014d6c
 800ada0:	40590000 	.word	0x40590000
 800ada4:	40240000 	.word	0x40240000
 800ada8:	40180000 	.word	0x40180000

0800adac <get_my_nmea_gngll_coordinates>:

void get_my_nmea_gngll_coordinates ( const char* m , char* latitude_s , char* longitude_s , int32_t* latitude_astro_geo_wr , int32_t* longitude_astro_geo_wr )
{
 800adac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adae:	b091      	sub	sp, #68	; 0x44
 800adb0:	af02      	add	r7, sp, #8
 800adb2:	60f8      	str	r0, [r7, #12]
 800adb4:	60b9      	str	r1, [r7, #8]
 800adb6:	607a      	str	r2, [r7, #4]
 800adb8:	603b      	str	r3, [r7, #0]
	char direction ;

	//Latitude part
	uint8_t coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION ) + 1 ;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2201      	movs	r2, #1
 800adbe:	212c      	movs	r1, #44	; 0x2c
 800adc0:	0018      	movs	r0, r3
 800adc2:	f7ff fcfd 	bl	800a7c0 <my_find_char_position>
 800adc6:	0003      	movs	r3, r0
 800adc8:	001a      	movs	r2, r3
 800adca:	2537      	movs	r5, #55	; 0x37
 800adcc:	197b      	adds	r3, r7, r5
 800adce:	3201      	adds	r2, #1
 800add0:	701a      	strb	r2, [r3, #0]
	uint8_t coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2202      	movs	r2, #2
 800add6:	212c      	movs	r1, #44	; 0x2c
 800add8:	0018      	movs	r0, r3
 800adda:	f7ff fcf1 	bl	800a7c0 <my_find_char_position>
 800adde:	0003      	movs	r3, r0
 800ade0:	0019      	movs	r1, r3
 800ade2:	2436      	movs	r4, #54	; 0x36
 800ade4:	193b      	adds	r3, r7, r4
 800ade6:	197a      	adds	r2, r7, r5
 800ade8:	7812      	ldrb	r2, [r2, #0]
 800adea:	1a8a      	subs	r2, r1, r2
 800adec:	701a      	strb	r2, [r3, #0]

	char* latitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800adee:	193b      	adds	r3, r7, r4
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	3301      	adds	r3, #1
 800adf4:	0018      	movs	r0, r3
 800adf6:	f000 faa3 	bl	800b340 <malloc>
 800adfa:	0003      	movs	r3, r0
 800adfc:	633b      	str	r3, [r7, #48]	; 0x30
	strncpy ( latitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800adfe:	197b      	adds	r3, r7, r5
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	68fa      	ldr	r2, [r7, #12]
 800ae04:	18d1      	adds	r1, r2, r3
 800ae06:	193b      	adds	r3, r7, r4
 800ae08:	781a      	ldrb	r2, [r3, #0]
 800ae0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae0c:	0018      	movs	r0, r3
 800ae0e:	f001 fd44 	bl	800c89a <strncpy>
	latitude_s_temp[coordinate_length] = '\0';
 800ae12:	193b      	adds	r3, r7, r4
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae18:	18d3      	adds	r3, r2, r3
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800ae1e:	197b      	adds	r3, r7, r5
 800ae20:	781a      	ldrb	r2, [r3, #0]
 800ae22:	193b      	adds	r3, r7, r4
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	18d3      	adds	r3, r2, r3
 800ae28:	3301      	adds	r3, #1
 800ae2a:	68fa      	ldr	r2, [r7, #12]
 800ae2c:	18d2      	adds	r2, r2, r3
 800ae2e:	262f      	movs	r6, #47	; 0x2f
 800ae30:	19bb      	adds	r3, r7, r6
 800ae32:	7812      	ldrb	r2, [r2, #0]
 800ae34:	701a      	strb	r2, [r3, #0]
	double latitude_d = nmea2decimal ( latitude_s_temp , direction ) ;
 800ae36:	19bb      	adds	r3, r7, r6
 800ae38:	781a      	ldrb	r2, [r3, #0]
 800ae3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3c:	0011      	movs	r1, r2
 800ae3e:	0018      	movs	r0, r3
 800ae40:	f7ff ff44 	bl	800accc <nmea2decimal>
 800ae44:	0002      	movs	r2, r0
 800ae46:	000b      	movs	r3, r1
 800ae48:	623a      	str	r2, [r7, #32]
 800ae4a:	627b      	str	r3, [r7, #36]	; 0x24
	free ( latitude_s_temp ) ;
 800ae4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4e:	0018      	movs	r0, r3
 800ae50:	f000 fa80 	bl	800b354 <free>
	latitude_d = round ( latitude_d * 1e6 ) / 1e6 ;
 800ae54:	2200      	movs	r2, #0
 800ae56:	4b53      	ldr	r3, [pc, #332]	; (800afa4 <get_my_nmea_gngll_coordinates+0x1f8>)
 800ae58:	6a38      	ldr	r0, [r7, #32]
 800ae5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae5c:	f7f6 fc06 	bl	800166c <__aeabi_dmul>
 800ae60:	0002      	movs	r2, r0
 800ae62:	000b      	movs	r3, r1
 800ae64:	0010      	movs	r0, r2
 800ae66:	0019      	movs	r1, r3
 800ae68:	f008 fa34 	bl	80132d4 <round>
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	4b4d      	ldr	r3, [pc, #308]	; (800afa4 <get_my_nmea_gngll_coordinates+0x1f8>)
 800ae70:	f7f6 f802 	bl	8000e78 <__aeabi_ddiv>
 800ae74:	0002      	movs	r2, r0
 800ae76:	000b      	movs	r3, r1
 800ae78:	623a      	str	r2, [r7, #32]
 800ae7a:	627b      	str	r3, [r7, #36]	; 0x24
	snprintf ( latitude_s , 12 , "%.6lf" , latitude_d ) ;
 800ae7c:	494a      	ldr	r1, [pc, #296]	; (800afa8 <get_my_nmea_gngll_coordinates+0x1fc>)
 800ae7e:	68b8      	ldr	r0, [r7, #8]
 800ae80:	6a3a      	ldr	r2, [r7, #32]
 800ae82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae84:	9200      	str	r2, [sp, #0]
 800ae86:	9301      	str	r3, [sp, #4]
 800ae88:	000a      	movs	r2, r1
 800ae8a:	210c      	movs	r1, #12
 800ae8c:	f001 fc22 	bl	800c6d4 <snprintf>
	*latitude_astro_geo_wr = (int32_t) ( latitude_d * 10000000 ) ;
 800ae90:	2200      	movs	r2, #0
 800ae92:	4b46      	ldr	r3, [pc, #280]	; (800afac <get_my_nmea_gngll_coordinates+0x200>)
 800ae94:	6a38      	ldr	r0, [r7, #32]
 800ae96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae98:	f7f6 fbe8 	bl	800166c <__aeabi_dmul>
 800ae9c:	0002      	movs	r2, r0
 800ae9e:	000b      	movs	r3, r1
 800aea0:	0010      	movs	r0, r2
 800aea2:	0019      	movs	r1, r3
 800aea4:	f7f7 fa44 	bl	8002330 <__aeabi_d2iz>
 800aea8:	0002      	movs	r2, r0
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	601a      	str	r2, [r3, #0]

	//Longitude part
	coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2) + 1 ;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2203      	movs	r2, #3
 800aeb2:	212c      	movs	r1, #44	; 0x2c
 800aeb4:	0018      	movs	r0, r3
 800aeb6:	f7ff fc83 	bl	800a7c0 <my_find_char_position>
 800aeba:	0003      	movs	r3, r0
 800aebc:	001a      	movs	r2, r3
 800aebe:	197b      	adds	r3, r7, r5
 800aec0:	3201      	adds	r2, #1
 800aec2:	701a      	strb	r2, [r3, #0]
	coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2 + 1 ) - coordinate_position ;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2204      	movs	r2, #4
 800aec8:	212c      	movs	r1, #44	; 0x2c
 800aeca:	0018      	movs	r0, r3
 800aecc:	f7ff fc78 	bl	800a7c0 <my_find_char_position>
 800aed0:	0003      	movs	r3, r0
 800aed2:	0019      	movs	r1, r3
 800aed4:	193b      	adds	r3, r7, r4
 800aed6:	197a      	adds	r2, r7, r5
 800aed8:	7812      	ldrb	r2, [r2, #0]
 800aeda:	1a8a      	subs	r2, r1, r2
 800aedc:	701a      	strb	r2, [r3, #0]

	char* longitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800aede:	193b      	adds	r3, r7, r4
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	3301      	adds	r3, #1
 800aee4:	0018      	movs	r0, r3
 800aee6:	f000 fa2b 	bl	800b340 <malloc>
 800aeea:	0003      	movs	r3, r0
 800aeec:	61fb      	str	r3, [r7, #28]
	strncpy ( longitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800aeee:	197b      	adds	r3, r7, r5
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	68fa      	ldr	r2, [r7, #12]
 800aef4:	18d1      	adds	r1, r2, r3
 800aef6:	193b      	adds	r3, r7, r4
 800aef8:	781a      	ldrb	r2, [r3, #0]
 800aefa:	69fb      	ldr	r3, [r7, #28]
 800aefc:	0018      	movs	r0, r3
 800aefe:	f001 fccc 	bl	800c89a <strncpy>
	longitude_s_temp[coordinate_length] = '\0';
 800af02:	193b      	adds	r3, r7, r4
 800af04:	781b      	ldrb	r3, [r3, #0]
 800af06:	69fa      	ldr	r2, [r7, #28]
 800af08:	18d3      	adds	r3, r2, r3
 800af0a:	2200      	movs	r2, #0
 800af0c:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800af0e:	197b      	adds	r3, r7, r5
 800af10:	781a      	ldrb	r2, [r3, #0]
 800af12:	193b      	adds	r3, r7, r4
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	18d3      	adds	r3, r2, r3
 800af18:	3301      	adds	r3, #1
 800af1a:	68fa      	ldr	r2, [r7, #12]
 800af1c:	18d2      	adds	r2, r2, r3
 800af1e:	19bb      	adds	r3, r7, r6
 800af20:	7812      	ldrb	r2, [r2, #0]
 800af22:	701a      	strb	r2, [r3, #0]
	double longitude_d = nmea2decimal ( longitude_s_temp , direction ) ;
 800af24:	19bb      	adds	r3, r7, r6
 800af26:	781a      	ldrb	r2, [r3, #0]
 800af28:	69fb      	ldr	r3, [r7, #28]
 800af2a:	0011      	movs	r1, r2
 800af2c:	0018      	movs	r0, r3
 800af2e:	f7ff fecd 	bl	800accc <nmea2decimal>
 800af32:	0002      	movs	r2, r0
 800af34:	000b      	movs	r3, r1
 800af36:	613a      	str	r2, [r7, #16]
 800af38:	617b      	str	r3, [r7, #20]
	free ( longitude_s_temp ) ;
 800af3a:	69fb      	ldr	r3, [r7, #28]
 800af3c:	0018      	movs	r0, r3
 800af3e:	f000 fa09 	bl	800b354 <free>
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
 800af42:	2200      	movs	r2, #0
 800af44:	4b17      	ldr	r3, [pc, #92]	; (800afa4 <get_my_nmea_gngll_coordinates+0x1f8>)
 800af46:	6938      	ldr	r0, [r7, #16]
 800af48:	6979      	ldr	r1, [r7, #20]
 800af4a:	f7f6 fb8f 	bl	800166c <__aeabi_dmul>
 800af4e:	0002      	movs	r2, r0
 800af50:	000b      	movs	r3, r1
 800af52:	0010      	movs	r0, r2
 800af54:	0019      	movs	r1, r3
 800af56:	f008 f9bd 	bl	80132d4 <round>
 800af5a:	2200      	movs	r2, #0
 800af5c:	4b11      	ldr	r3, [pc, #68]	; (800afa4 <get_my_nmea_gngll_coordinates+0x1f8>)
 800af5e:	f7f5 ff8b 	bl	8000e78 <__aeabi_ddiv>
 800af62:	0002      	movs	r2, r0
 800af64:	000b      	movs	r3, r1
 800af66:	613a      	str	r2, [r7, #16]
 800af68:	617b      	str	r3, [r7, #20]
	snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
 800af6a:	490f      	ldr	r1, [pc, #60]	; (800afa8 <get_my_nmea_gngll_coordinates+0x1fc>)
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	693a      	ldr	r2, [r7, #16]
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	9200      	str	r2, [sp, #0]
 800af74:	9301      	str	r3, [sp, #4]
 800af76:	000a      	movs	r2, r1
 800af78:	210c      	movs	r1, #12
 800af7a:	f001 fbab 	bl	800c6d4 <snprintf>
	*longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
 800af7e:	2200      	movs	r2, #0
 800af80:	4b0a      	ldr	r3, [pc, #40]	; (800afac <get_my_nmea_gngll_coordinates+0x200>)
 800af82:	6938      	ldr	r0, [r7, #16]
 800af84:	6979      	ldr	r1, [r7, #20]
 800af86:	f7f6 fb71 	bl	800166c <__aeabi_dmul>
 800af8a:	0002      	movs	r2, r0
 800af8c:	000b      	movs	r3, r1
 800af8e:	0010      	movs	r0, r2
 800af90:	0019      	movs	r1, r3
 800af92:	f7f7 f9cd 	bl	8002330 <__aeabi_d2iz>
 800af96:	0002      	movs	r2, r0
 800af98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af9a:	601a      	str	r2, [r3, #0]
}
 800af9c:	46c0      	nop			; (mov r8, r8)
 800af9e:	46bd      	mov	sp, r7
 800afa0:	b00f      	add	sp, #60	; 0x3c
 800afa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afa4:	412e8480 	.word	0x412e8480
 800afa8:	08014d70 	.word	0x08014d70
 800afac:	416312d0 	.word	0x416312d0

0800afb0 <my_nmea_get_gsv_tns>:
uint16_t my_nmea_get_gsv_tns ( const char* m ) //tns = Total Number Satelites
{
 800afb0:	b5b0      	push	{r4, r5, r7, lr}
 800afb2:	b086      	sub	sp, #24
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
	uint16_t tns = 0 ;
 800afb8:	240e      	movs	r4, #14
 800afba:	193b      	adds	r3, r7, r4
 800afbc:	2200      	movs	r2, #0
 800afbe:	801a      	strh	r2, [r3, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , GSV_TNS_POSITION ) + 1 ;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2203      	movs	r2, #3
 800afc4:	212c      	movs	r1, #44	; 0x2c
 800afc6:	0018      	movs	r0, r3
 800afc8:	f7ff fbfa 	bl	800a7c0 <my_find_char_position>
 800afcc:	0003      	movs	r3, r0
 800afce:	001a      	movs	r2, r3
 800afd0:	2517      	movs	r5, #23
 800afd2:	197b      	adds	r3, r7, r5
 800afd4:	3201      	adds	r2, #1
 800afd6:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( GSV_TNS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800afd8:	2003      	movs	r0, #3
 800afda:	f000 f9b1 	bl	800b340 <malloc>
 800afde:	0003      	movs	r3, r0
 800afe0:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , GSV_TNS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800afe2:	197b      	adds	r3, r7, r5
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	18d1      	adds	r1, r2, r3
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	2202      	movs	r2, #2
 800afee:	0018      	movs	r0, r3
 800aff0:	f001 fc53 	bl	800c89a <strncpy>
	s[GSV_TNS_LENGTH] = '\0';
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	3302      	adds	r3, #2
 800aff8:	2200      	movs	r2, #0
 800affa:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%hu" , &tns ) ;
 800affc:	193a      	adds	r2, r7, r4
 800affe:	4907      	ldr	r1, [pc, #28]	; (800b01c <my_nmea_get_gsv_tns+0x6c>)
 800b000:	693b      	ldr	r3, [r7, #16]
 800b002:	0018      	movs	r0, r3
 800b004:	f001 fbba 	bl	800c77c <sscanf>
	free ( s ) ;
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	0018      	movs	r0, r3
 800b00c:	f000 f9a2 	bl	800b354 <free>
	return tns ;
 800b010:	193b      	adds	r3, r7, r4
 800b012:	881b      	ldrh	r3, [r3, #0]
}
 800b014:	0018      	movs	r0, r3
 800b016:	46bd      	mov	sp, r7
 800b018:	b006      	add	sp, #24
 800b01a:	bdb0      	pop	{r4, r5, r7, pc}
 800b01c:	08014d78 	.word	0x08014d78

0800b020 <my_nmea_get_rmc_date_yy>:

void my_nmea_get_rmc_date_yy ( const char* m , uint8_t* yy )
{
 800b020:	b590      	push	{r4, r7, lr}
 800b022:	b087      	sub	sp, #28
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_YY_OFFSET ;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2209      	movs	r2, #9
 800b02e:	212c      	movs	r1, #44	; 0x2c
 800b030:	0018      	movs	r0, r3
 800b032:	f7ff fbc5 	bl	800a7c0 <my_find_char_position>
 800b036:	0003      	movs	r3, r0
 800b038:	001a      	movs	r2, r3
 800b03a:	2417      	movs	r4, #23
 800b03c:	193b      	adds	r3, r7, r4
 800b03e:	3205      	adds	r2, #5
 800b040:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800b042:	2003      	movs	r0, #3
 800b044:	f000 f97c 	bl	800b340 <malloc>
 800b048:	0003      	movs	r3, r0
 800b04a:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800b04c:	193b      	adds	r3, r7, r4
 800b04e:	781b      	ldrb	r3, [r3, #0]
 800b050:	687a      	ldr	r2, [r7, #4]
 800b052:	18d1      	adds	r1, r2, r3
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	2202      	movs	r2, #2
 800b058:	0018      	movs	r0, r3
 800b05a:	f001 fc1e 	bl	800c89a <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	3302      	adds	r3, #2
 800b062:	2200      	movs	r2, #0
 800b064:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , yy ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800b066:	240e      	movs	r4, #14
 800b068:	193a      	adds	r2, r7, r4
 800b06a:	4909      	ldr	r1, [pc, #36]	; (800b090 <my_nmea_get_rmc_date_yy+0x70>)
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	0018      	movs	r0, r3
 800b070:	f001 fb84 	bl	800c77c <sscanf>
	free ( s ) ;
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	0018      	movs	r0, r3
 800b078:	f000 f96c 	bl	800b354 <free>
	*yy = (uint8_t) temp ;
 800b07c:	193b      	adds	r3, r7, r4
 800b07e:	881b      	ldrh	r3, [r3, #0]
 800b080:	b2da      	uxtb	r2, r3
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	701a      	strb	r2, [r3, #0]

}
 800b086:	46c0      	nop			; (mov r8, r8)
 800b088:	46bd      	mov	sp, r7
 800b08a:	b007      	add	sp, #28
 800b08c:	bd90      	pop	{r4, r7, pc}
 800b08e:	46c0      	nop			; (mov r8, r8)
 800b090:	08014d78 	.word	0x08014d78

0800b094 <my_nmea_get_rmc_date_mm>:
void my_nmea_get_rmc_date_mm ( const char* m , uint8_t* mm )
{
 800b094:	b590      	push	{r4, r7, lr}
 800b096:	b087      	sub	sp, #28
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
 800b09c:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_MM_OFFSET ;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2209      	movs	r2, #9
 800b0a2:	212c      	movs	r1, #44	; 0x2c
 800b0a4:	0018      	movs	r0, r3
 800b0a6:	f7ff fb8b 	bl	800a7c0 <my_find_char_position>
 800b0aa:	0003      	movs	r3, r0
 800b0ac:	001a      	movs	r2, r3
 800b0ae:	2417      	movs	r4, #23
 800b0b0:	193b      	adds	r3, r7, r4
 800b0b2:	3203      	adds	r2, #3
 800b0b4:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800b0b6:	2003      	movs	r0, #3
 800b0b8:	f000 f942 	bl	800b340 <malloc>
 800b0bc:	0003      	movs	r3, r0
 800b0be:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800b0c0:	193b      	adds	r3, r7, r4
 800b0c2:	781b      	ldrb	r3, [r3, #0]
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	18d1      	adds	r1, r2, r3
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	2202      	movs	r2, #2
 800b0cc:	0018      	movs	r0, r3
 800b0ce:	f001 fbe4 	bl	800c89a <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	3302      	adds	r3, #2
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800b0da:	240e      	movs	r4, #14
 800b0dc:	193a      	adds	r2, r7, r4
 800b0de:	4909      	ldr	r1, [pc, #36]	; (800b104 <my_nmea_get_rmc_date_mm+0x70>)
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	0018      	movs	r0, r3
 800b0e4:	f001 fb4a 	bl	800c77c <sscanf>
	free ( s ) ;
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	0018      	movs	r0, r3
 800b0ec:	f000 f932 	bl	800b354 <free>
	*mm = (uint8_t) temp ;
 800b0f0:	193b      	adds	r3, r7, r4
 800b0f2:	881b      	ldrh	r3, [r3, #0]
 800b0f4:	b2da      	uxtb	r2, r3
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	701a      	strb	r2, [r3, #0]

}
 800b0fa:	46c0      	nop			; (mov r8, r8)
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	b007      	add	sp, #28
 800b100:	bd90      	pop	{r4, r7, pc}
 800b102:	46c0      	nop			; (mov r8, r8)
 800b104:	08014d78 	.word	0x08014d78

0800b108 <my_nmea_get_rmc_date_dd>:
void my_nmea_get_rmc_date_dd ( const char* m , uint8_t* dd )
{
 800b108:	b590      	push	{r4, r7, lr}
 800b10a:	b087      	sub	sp, #28
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_DD_OFFSET ;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2209      	movs	r2, #9
 800b116:	212c      	movs	r1, #44	; 0x2c
 800b118:	0018      	movs	r0, r3
 800b11a:	f7ff fb51 	bl	800a7c0 <my_find_char_position>
 800b11e:	0003      	movs	r3, r0
 800b120:	001a      	movs	r2, r3
 800b122:	2417      	movs	r4, #23
 800b124:	193b      	adds	r3, r7, r4
 800b126:	3201      	adds	r2, #1
 800b128:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800b12a:	2003      	movs	r0, #3
 800b12c:	f000 f908 	bl	800b340 <malloc>
 800b130:	0003      	movs	r3, r0
 800b132:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800b134:	193b      	adds	r3, r7, r4
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	687a      	ldr	r2, [r7, #4]
 800b13a:	18d1      	adds	r1, r2, r3
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	2202      	movs	r2, #2
 800b140:	0018      	movs	r0, r3
 800b142:	f001 fbaa 	bl	800c89a <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	3302      	adds	r3, #2
 800b14a:	2200      	movs	r2, #0
 800b14c:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , dd ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800b14e:	240e      	movs	r4, #14
 800b150:	193a      	adds	r2, r7, r4
 800b152:	4909      	ldr	r1, [pc, #36]	; (800b178 <my_nmea_get_rmc_date_dd+0x70>)
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	0018      	movs	r0, r3
 800b158:	f001 fb10 	bl	800c77c <sscanf>
	free ( s ) ;
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	0018      	movs	r0, r3
 800b160:	f000 f8f8 	bl	800b354 <free>
	*dd = (uint8_t) temp ;
 800b164:	193b      	adds	r3, r7, r4
 800b166:	881b      	ldrh	r3, [r3, #0]
 800b168:	b2da      	uxtb	r2, r3
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	701a      	strb	r2, [r3, #0]

}
 800b16e:	46c0      	nop			; (mov r8, r8)
 800b170:	46bd      	mov	sp, r7
 800b172:	b007      	add	sp, #28
 800b174:	bd90      	pop	{r4, r7, pc}
 800b176:	46c0      	nop			; (mov r8, r8)
 800b178:	08014d78 	.word	0x08014d78

0800b17c <my_nmea_get_rmc_utc_hh>:
void my_nmea_get_rmc_utc_hh ( const char* m , uint8_t* hh )
{
 800b17c:	b590      	push	{r4, r7, lr}
 800b17e:	b087      	sub	sp, #28
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_HH_OFFSET ;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2201      	movs	r2, #1
 800b18a:	212c      	movs	r1, #44	; 0x2c
 800b18c:	0018      	movs	r0, r3
 800b18e:	f7ff fb17 	bl	800a7c0 <my_find_char_position>
 800b192:	0003      	movs	r3, r0
 800b194:	001a      	movs	r2, r3
 800b196:	2417      	movs	r4, #23
 800b198:	193b      	adds	r3, r7, r4
 800b19a:	3201      	adds	r2, #1
 800b19c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800b19e:	2003      	movs	r0, #3
 800b1a0:	f000 f8ce 	bl	800b340 <malloc>
 800b1a4:	0003      	movs	r3, r0
 800b1a6:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800b1a8:	193b      	adds	r3, r7, r4
 800b1aa:	781b      	ldrb	r3, [r3, #0]
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	18d1      	adds	r1, r2, r3
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	2202      	movs	r2, #2
 800b1b4:	0018      	movs	r0, r3
 800b1b6:	f001 fb70 	bl	800c89a <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	3302      	adds	r3, #2
 800b1be:	2200      	movs	r2, #0
 800b1c0:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , hh ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800b1c2:	240e      	movs	r4, #14
 800b1c4:	193a      	adds	r2, r7, r4
 800b1c6:	4909      	ldr	r1, [pc, #36]	; (800b1ec <my_nmea_get_rmc_utc_hh+0x70>)
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	0018      	movs	r0, r3
 800b1cc:	f001 fad6 	bl	800c77c <sscanf>
	free ( s ) ;
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	0018      	movs	r0, r3
 800b1d4:	f000 f8be 	bl	800b354 <free>
	*hh = (uint8_t) temp ;
 800b1d8:	193b      	adds	r3, r7, r4
 800b1da:	881b      	ldrh	r3, [r3, #0]
 800b1dc:	b2da      	uxtb	r2, r3
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	701a      	strb	r2, [r3, #0]

}
 800b1e2:	46c0      	nop			; (mov r8, r8)
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	b007      	add	sp, #28
 800b1e8:	bd90      	pop	{r4, r7, pc}
 800b1ea:	46c0      	nop			; (mov r8, r8)
 800b1ec:	08014d78 	.word	0x08014d78

0800b1f0 <my_nmea_get_rmc_utc_mm>:
void my_nmea_get_rmc_utc_mm ( const char* m , uint8_t* mm )
{
 800b1f0:	b590      	push	{r4, r7, lr}
 800b1f2:	b087      	sub	sp, #28
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_MM_OFFSET ;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2201      	movs	r2, #1
 800b1fe:	212c      	movs	r1, #44	; 0x2c
 800b200:	0018      	movs	r0, r3
 800b202:	f7ff fadd 	bl	800a7c0 <my_find_char_position>
 800b206:	0003      	movs	r3, r0
 800b208:	001a      	movs	r2, r3
 800b20a:	2417      	movs	r4, #23
 800b20c:	193b      	adds	r3, r7, r4
 800b20e:	3203      	adds	r2, #3
 800b210:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800b212:	2003      	movs	r0, #3
 800b214:	f000 f894 	bl	800b340 <malloc>
 800b218:	0003      	movs	r3, r0
 800b21a:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800b21c:	193b      	adds	r3, r7, r4
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	18d1      	adds	r1, r2, r3
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	2202      	movs	r2, #2
 800b228:	0018      	movs	r0, r3
 800b22a:	f001 fb36 	bl	800c89a <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	3302      	adds	r3, #2
 800b232:	2200      	movs	r2, #0
 800b234:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800b236:	240e      	movs	r4, #14
 800b238:	193a      	adds	r2, r7, r4
 800b23a:	4909      	ldr	r1, [pc, #36]	; (800b260 <my_nmea_get_rmc_utc_mm+0x70>)
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	0018      	movs	r0, r3
 800b240:	f001 fa9c 	bl	800c77c <sscanf>
	free ( s ) ;
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	0018      	movs	r0, r3
 800b248:	f000 f884 	bl	800b354 <free>
	*mm = (uint8_t) temp ;
 800b24c:	193b      	adds	r3, r7, r4
 800b24e:	881b      	ldrh	r3, [r3, #0]
 800b250:	b2da      	uxtb	r2, r3
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	701a      	strb	r2, [r3, #0]

}
 800b256:	46c0      	nop			; (mov r8, r8)
 800b258:	46bd      	mov	sp, r7
 800b25a:	b007      	add	sp, #28
 800b25c:	bd90      	pop	{r4, r7, pc}
 800b25e:	46c0      	nop			; (mov r8, r8)
 800b260:	08014d78 	.word	0x08014d78

0800b264 <my_nmea_get_rmc_utc_ss>:
void my_nmea_get_rmc_utc_ss ( const char* m , uint8_t* ss )
{
 800b264:	b590      	push	{r4, r7, lr}
 800b266:	b087      	sub	sp, #28
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SS_OFFSET ;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2201      	movs	r2, #1
 800b272:	212c      	movs	r1, #44	; 0x2c
 800b274:	0018      	movs	r0, r3
 800b276:	f7ff faa3 	bl	800a7c0 <my_find_char_position>
 800b27a:	0003      	movs	r3, r0
 800b27c:	001a      	movs	r2, r3
 800b27e:	2417      	movs	r4, #23
 800b280:	193b      	adds	r3, r7, r4
 800b282:	3205      	adds	r2, #5
 800b284:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800b286:	2003      	movs	r0, #3
 800b288:	f000 f85a 	bl	800b340 <malloc>
 800b28c:	0003      	movs	r3, r0
 800b28e:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800b290:	193b      	adds	r3, r7, r4
 800b292:	781b      	ldrb	r3, [r3, #0]
 800b294:	687a      	ldr	r2, [r7, #4]
 800b296:	18d1      	adds	r1, r2, r3
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	2202      	movs	r2, #2
 800b29c:	0018      	movs	r0, r3
 800b29e:	f001 fafc 	bl	800c89a <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	3302      	adds	r3, #2
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , ss ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800b2aa:	240e      	movs	r4, #14
 800b2ac:	193a      	adds	r2, r7, r4
 800b2ae:	4909      	ldr	r1, [pc, #36]	; (800b2d4 <my_nmea_get_rmc_utc_ss+0x70>)
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	0018      	movs	r0, r3
 800b2b4:	f001 fa62 	bl	800c77c <sscanf>
	free ( s ) ;
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	0018      	movs	r0, r3
 800b2bc:	f000 f84a 	bl	800b354 <free>
	*ss = (uint8_t) temp ;
 800b2c0:	193b      	adds	r3, r7, r4
 800b2c2:	881b      	ldrh	r3, [r3, #0]
 800b2c4:	b2da      	uxtb	r2, r3
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	701a      	strb	r2, [r3, #0]

}
 800b2ca:	46c0      	nop			; (mov r8, r8)
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	b007      	add	sp, #28
 800b2d0:	bd90      	pop	{r4, r7, pc}
 800b2d2:	46c0      	nop			; (mov r8, r8)
 800b2d4:	08014d78 	.word	0x08014d78

0800b2d8 <my_nmea_get_rmc_utc_sss>:
void my_nmea_get_rmc_utc_sss ( const char* m , uint32_t* sss )
{
 800b2d8:	b590      	push	{r4, r7, lr}
 800b2da:	b085      	sub	sp, #20
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	6039      	str	r1, [r7, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SSS_OFFSET ;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	212c      	movs	r1, #44	; 0x2c
 800b2e8:	0018      	movs	r0, r3
 800b2ea:	f7ff fa69 	bl	800a7c0 <my_find_char_position>
 800b2ee:	0003      	movs	r3, r0
 800b2f0:	001a      	movs	r2, r3
 800b2f2:	240f      	movs	r4, #15
 800b2f4:	193b      	adds	r3, r7, r4
 800b2f6:	3208      	adds	r2, #8
 800b2f8:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_SSS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800b2fa:	2004      	movs	r0, #4
 800b2fc:	f000 f820 	bl	800b340 <malloc>
 800b300:	0003      	movs	r3, r0
 800b302:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_UTC_SSS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800b304:	193b      	adds	r3, r7, r4
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	18d1      	adds	r1, r2, r3
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	2203      	movs	r2, #3
 800b310:	0018      	movs	r0, r3
 800b312:	f001 fac2 	bl	800c89a <strncpy>
	s[RMC_UTC_SSS_LENGTH] = '\0';
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	3303      	adds	r3, #3
 800b31a:	2200      	movs	r2, #0
 800b31c:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%lu" , sss ) ;
 800b31e:	683a      	ldr	r2, [r7, #0]
 800b320:	4906      	ldr	r1, [pc, #24]	; (800b33c <my_nmea_get_rmc_utc_sss+0x64>)
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	0018      	movs	r0, r3
 800b326:	f001 fa29 	bl	800c77c <sscanf>
	free ( s ) ;
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	0018      	movs	r0, r3
 800b32e:	f000 f811 	bl	800b354 <free>
}
 800b332:	46c0      	nop			; (mov r8, r8)
 800b334:	46bd      	mov	sp, r7
 800b336:	b005      	add	sp, #20
 800b338:	bd90      	pop	{r4, r7, pc}
 800b33a:	46c0      	nop			; (mov r8, r8)
 800b33c:	08014d7c 	.word	0x08014d7c

0800b340 <malloc>:
 800b340:	b510      	push	{r4, lr}
 800b342:	4b03      	ldr	r3, [pc, #12]	; (800b350 <malloc+0x10>)
 800b344:	0001      	movs	r1, r0
 800b346:	6818      	ldr	r0, [r3, #0]
 800b348:	f000 f80e 	bl	800b368 <_malloc_r>
 800b34c:	bd10      	pop	{r4, pc}
 800b34e:	46c0      	nop			; (mov r8, r8)
 800b350:	200006d8 	.word	0x200006d8

0800b354 <free>:
 800b354:	b510      	push	{r4, lr}
 800b356:	4b03      	ldr	r3, [pc, #12]	; (800b364 <free+0x10>)
 800b358:	0001      	movs	r1, r0
 800b35a:	6818      	ldr	r0, [r3, #0]
 800b35c:	f001 fbe4 	bl	800cb28 <_free_r>
 800b360:	bd10      	pop	{r4, pc}
 800b362:	46c0      	nop			; (mov r8, r8)
 800b364:	200006d8 	.word	0x200006d8

0800b368 <_malloc_r>:
 800b368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b36a:	000d      	movs	r5, r1
 800b36c:	b087      	sub	sp, #28
 800b36e:	350b      	adds	r5, #11
 800b370:	9001      	str	r0, [sp, #4]
 800b372:	2d16      	cmp	r5, #22
 800b374:	d908      	bls.n	800b388 <_malloc_r+0x20>
 800b376:	2207      	movs	r2, #7
 800b378:	4395      	bics	r5, r2
 800b37a:	d506      	bpl.n	800b38a <_malloc_r+0x22>
 800b37c:	230c      	movs	r3, #12
 800b37e:	9a01      	ldr	r2, [sp, #4]
 800b380:	6013      	str	r3, [r2, #0]
 800b382:	2000      	movs	r0, #0
 800b384:	b007      	add	sp, #28
 800b386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b388:	2510      	movs	r5, #16
 800b38a:	42a9      	cmp	r1, r5
 800b38c:	d8f6      	bhi.n	800b37c <_malloc_r+0x14>
 800b38e:	9801      	ldr	r0, [sp, #4]
 800b390:	f000 f9fe 	bl	800b790 <__malloc_lock>
 800b394:	23fc      	movs	r3, #252	; 0xfc
 800b396:	4ebe      	ldr	r6, [pc, #760]	; (800b690 <_malloc_r+0x328>)
 800b398:	005b      	lsls	r3, r3, #1
 800b39a:	429d      	cmp	r5, r3
 800b39c:	d219      	bcs.n	800b3d2 <_malloc_r+0x6a>
 800b39e:	002a      	movs	r2, r5
 800b3a0:	3208      	adds	r2, #8
 800b3a2:	18b2      	adds	r2, r6, r2
 800b3a4:	0011      	movs	r1, r2
 800b3a6:	6854      	ldr	r4, [r2, #4]
 800b3a8:	3908      	subs	r1, #8
 800b3aa:	08eb      	lsrs	r3, r5, #3
 800b3ac:	428c      	cmp	r4, r1
 800b3ae:	d103      	bne.n	800b3b8 <_malloc_r+0x50>
 800b3b0:	68d4      	ldr	r4, [r2, #12]
 800b3b2:	3302      	adds	r3, #2
 800b3b4:	42a2      	cmp	r2, r4
 800b3b6:	d022      	beq.n	800b3fe <_malloc_r+0x96>
 800b3b8:	2203      	movs	r2, #3
 800b3ba:	6863      	ldr	r3, [r4, #4]
 800b3bc:	68a1      	ldr	r1, [r4, #8]
 800b3be:	4393      	bics	r3, r2
 800b3c0:	68e2      	ldr	r2, [r4, #12]
 800b3c2:	18e3      	adds	r3, r4, r3
 800b3c4:	60ca      	str	r2, [r1, #12]
 800b3c6:	6091      	str	r1, [r2, #8]
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	6859      	ldr	r1, [r3, #4]
 800b3cc:	430a      	orrs	r2, r1
 800b3ce:	605a      	str	r2, [r3, #4]
 800b3d0:	e02a      	b.n	800b428 <_malloc_r+0xc0>
 800b3d2:	233f      	movs	r3, #63	; 0x3f
 800b3d4:	0a6a      	lsrs	r2, r5, #9
 800b3d6:	d003      	beq.n	800b3e0 <_malloc_r+0x78>
 800b3d8:	2a04      	cmp	r2, #4
 800b3da:	d82b      	bhi.n	800b434 <_malloc_r+0xcc>
 800b3dc:	09ab      	lsrs	r3, r5, #6
 800b3de:	3338      	adds	r3, #56	; 0x38
 800b3e0:	2203      	movs	r2, #3
 800b3e2:	4694      	mov	ip, r2
 800b3e4:	00d9      	lsls	r1, r3, #3
 800b3e6:	1989      	adds	r1, r1, r6
 800b3e8:	68cc      	ldr	r4, [r1, #12]
 800b3ea:	428c      	cmp	r4, r1
 800b3ec:	d006      	beq.n	800b3fc <_malloc_r+0x94>
 800b3ee:	4660      	mov	r0, ip
 800b3f0:	6862      	ldr	r2, [r4, #4]
 800b3f2:	4382      	bics	r2, r0
 800b3f4:	1b57      	subs	r7, r2, r5
 800b3f6:	2f0f      	cmp	r7, #15
 800b3f8:	dd34      	ble.n	800b464 <_malloc_r+0xfc>
 800b3fa:	3b01      	subs	r3, #1
 800b3fc:	3301      	adds	r3, #1
 800b3fe:	6934      	ldr	r4, [r6, #16]
 800b400:	49a4      	ldr	r1, [pc, #656]	; (800b694 <_malloc_r+0x32c>)
 800b402:	428c      	cmp	r4, r1
 800b404:	d055      	beq.n	800b4b2 <_malloc_r+0x14a>
 800b406:	2003      	movs	r0, #3
 800b408:	6862      	ldr	r2, [r4, #4]
 800b40a:	4382      	bics	r2, r0
 800b40c:	1b50      	subs	r0, r2, r5
 800b40e:	280f      	cmp	r0, #15
 800b410:	dd36      	ble.n	800b480 <_malloc_r+0x118>
 800b412:	2301      	movs	r3, #1
 800b414:	1967      	adds	r7, r4, r5
 800b416:	431d      	orrs	r5, r3
 800b418:	4303      	orrs	r3, r0
 800b41a:	6065      	str	r5, [r4, #4]
 800b41c:	6177      	str	r7, [r6, #20]
 800b41e:	6137      	str	r7, [r6, #16]
 800b420:	60f9      	str	r1, [r7, #12]
 800b422:	60b9      	str	r1, [r7, #8]
 800b424:	607b      	str	r3, [r7, #4]
 800b426:	50a0      	str	r0, [r4, r2]
 800b428:	9801      	ldr	r0, [sp, #4]
 800b42a:	f000 f9b9 	bl	800b7a0 <__malloc_unlock>
 800b42e:	0020      	movs	r0, r4
 800b430:	3008      	adds	r0, #8
 800b432:	e7a7      	b.n	800b384 <_malloc_r+0x1c>
 800b434:	2a14      	cmp	r2, #20
 800b436:	d802      	bhi.n	800b43e <_malloc_r+0xd6>
 800b438:	0013      	movs	r3, r2
 800b43a:	335b      	adds	r3, #91	; 0x5b
 800b43c:	e7d0      	b.n	800b3e0 <_malloc_r+0x78>
 800b43e:	2a54      	cmp	r2, #84	; 0x54
 800b440:	d802      	bhi.n	800b448 <_malloc_r+0xe0>
 800b442:	0b2b      	lsrs	r3, r5, #12
 800b444:	336e      	adds	r3, #110	; 0x6e
 800b446:	e7cb      	b.n	800b3e0 <_malloc_r+0x78>
 800b448:	23aa      	movs	r3, #170	; 0xaa
 800b44a:	005b      	lsls	r3, r3, #1
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d802      	bhi.n	800b456 <_malloc_r+0xee>
 800b450:	0beb      	lsrs	r3, r5, #15
 800b452:	3377      	adds	r3, #119	; 0x77
 800b454:	e7c4      	b.n	800b3e0 <_malloc_r+0x78>
 800b456:	4990      	ldr	r1, [pc, #576]	; (800b698 <_malloc_r+0x330>)
 800b458:	237e      	movs	r3, #126	; 0x7e
 800b45a:	428a      	cmp	r2, r1
 800b45c:	d8c0      	bhi.n	800b3e0 <_malloc_r+0x78>
 800b45e:	0cab      	lsrs	r3, r5, #18
 800b460:	337c      	adds	r3, #124	; 0x7c
 800b462:	e7bd      	b.n	800b3e0 <_malloc_r+0x78>
 800b464:	68e0      	ldr	r0, [r4, #12]
 800b466:	2f00      	cmp	r7, #0
 800b468:	db08      	blt.n	800b47c <_malloc_r+0x114>
 800b46a:	68a3      	ldr	r3, [r4, #8]
 800b46c:	60d8      	str	r0, [r3, #12]
 800b46e:	6083      	str	r3, [r0, #8]
 800b470:	2301      	movs	r3, #1
 800b472:	18a2      	adds	r2, r4, r2
 800b474:	6851      	ldr	r1, [r2, #4]
 800b476:	430b      	orrs	r3, r1
 800b478:	6053      	str	r3, [r2, #4]
 800b47a:	e7d5      	b.n	800b428 <_malloc_r+0xc0>
 800b47c:	0004      	movs	r4, r0
 800b47e:	e7b4      	b.n	800b3ea <_malloc_r+0x82>
 800b480:	6171      	str	r1, [r6, #20]
 800b482:	6131      	str	r1, [r6, #16]
 800b484:	2800      	cmp	r0, #0
 800b486:	daf3      	bge.n	800b470 <_malloc_r+0x108>
 800b488:	6871      	ldr	r1, [r6, #4]
 800b48a:	468c      	mov	ip, r1
 800b48c:	2180      	movs	r1, #128	; 0x80
 800b48e:	0089      	lsls	r1, r1, #2
 800b490:	428a      	cmp	r2, r1
 800b492:	d300      	bcc.n	800b496 <_malloc_r+0x12e>
 800b494:	e08c      	b.n	800b5b0 <_malloc_r+0x248>
 800b496:	08d1      	lsrs	r1, r2, #3
 800b498:	0950      	lsrs	r0, r2, #5
 800b49a:	2201      	movs	r2, #1
 800b49c:	4082      	lsls	r2, r0
 800b49e:	4660      	mov	r0, ip
 800b4a0:	4302      	orrs	r2, r0
 800b4a2:	6072      	str	r2, [r6, #4]
 800b4a4:	00ca      	lsls	r2, r1, #3
 800b4a6:	1992      	adds	r2, r2, r6
 800b4a8:	6891      	ldr	r1, [r2, #8]
 800b4aa:	60e2      	str	r2, [r4, #12]
 800b4ac:	60a1      	str	r1, [r4, #8]
 800b4ae:	6094      	str	r4, [r2, #8]
 800b4b0:	60cc      	str	r4, [r1, #12]
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	4876      	ldr	r0, [pc, #472]	; (800b690 <_malloc_r+0x328>)
 800b4b6:	1099      	asrs	r1, r3, #2
 800b4b8:	408a      	lsls	r2, r1
 800b4ba:	6841      	ldr	r1, [r0, #4]
 800b4bc:	4291      	cmp	r1, r2
 800b4be:	d328      	bcc.n	800b512 <_malloc_r+0x1aa>
 800b4c0:	420a      	tst	r2, r1
 800b4c2:	d105      	bne.n	800b4d0 <_malloc_r+0x168>
 800b4c4:	2403      	movs	r4, #3
 800b4c6:	43a3      	bics	r3, r4
 800b4c8:	0052      	lsls	r2, r2, #1
 800b4ca:	3304      	adds	r3, #4
 800b4cc:	420a      	tst	r2, r1
 800b4ce:	d0fb      	beq.n	800b4c8 <_malloc_r+0x160>
 800b4d0:	496f      	ldr	r1, [pc, #444]	; (800b690 <_malloc_r+0x328>)
 800b4d2:	9104      	str	r1, [sp, #16]
 800b4d4:	00d9      	lsls	r1, r3, #3
 800b4d6:	1841      	adds	r1, r0, r1
 800b4d8:	468c      	mov	ip, r1
 800b4da:	000f      	movs	r7, r1
 800b4dc:	9302      	str	r3, [sp, #8]
 800b4de:	68fc      	ldr	r4, [r7, #12]
 800b4e0:	42bc      	cmp	r4, r7
 800b4e2:	d000      	beq.n	800b4e6 <_malloc_r+0x17e>
 800b4e4:	e09b      	b.n	800b61e <_malloc_r+0x2b6>
 800b4e6:	2403      	movs	r4, #3
 800b4e8:	9902      	ldr	r1, [sp, #8]
 800b4ea:	3708      	adds	r7, #8
 800b4ec:	3101      	adds	r1, #1
 800b4ee:	9102      	str	r1, [sp, #8]
 800b4f0:	4221      	tst	r1, r4
 800b4f2:	d1f4      	bne.n	800b4de <_malloc_r+0x176>
 800b4f4:	2103      	movs	r1, #3
 800b4f6:	420b      	tst	r3, r1
 800b4f8:	d000      	beq.n	800b4fc <_malloc_r+0x194>
 800b4fa:	e0b7      	b.n	800b66c <_malloc_r+0x304>
 800b4fc:	6843      	ldr	r3, [r0, #4]
 800b4fe:	4393      	bics	r3, r2
 800b500:	6043      	str	r3, [r0, #4]
 800b502:	9b04      	ldr	r3, [sp, #16]
 800b504:	0052      	lsls	r2, r2, #1
 800b506:	6859      	ldr	r1, [r3, #4]
 800b508:	4291      	cmp	r1, r2
 800b50a:	d302      	bcc.n	800b512 <_malloc_r+0x1aa>
 800b50c:	2a00      	cmp	r2, #0
 800b50e:	d000      	beq.n	800b512 <_malloc_r+0x1aa>
 800b510:	e0bb      	b.n	800b68a <_malloc_r+0x322>
 800b512:	2203      	movs	r2, #3
 800b514:	6883      	ldr	r3, [r0, #8]
 800b516:	9302      	str	r3, [sp, #8]
 800b518:	685b      	ldr	r3, [r3, #4]
 800b51a:	4393      	bics	r3, r2
 800b51c:	9303      	str	r3, [sp, #12]
 800b51e:	42ab      	cmp	r3, r5
 800b520:	d303      	bcc.n	800b52a <_malloc_r+0x1c2>
 800b522:	1b59      	subs	r1, r3, r5
 800b524:	290f      	cmp	r1, #15
 800b526:	dd00      	ble.n	800b52a <_malloc_r+0x1c2>
 800b528:	e123      	b.n	800b772 <_malloc_r+0x40a>
 800b52a:	9b02      	ldr	r3, [sp, #8]
 800b52c:	9a03      	ldr	r2, [sp, #12]
 800b52e:	2008      	movs	r0, #8
 800b530:	189e      	adds	r6, r3, r2
 800b532:	4b5a      	ldr	r3, [pc, #360]	; (800b69c <_malloc_r+0x334>)
 800b534:	681f      	ldr	r7, [r3, #0]
 800b536:	f001 fa71 	bl	800ca1c <sysconf>
 800b53a:	4b59      	ldr	r3, [pc, #356]	; (800b6a0 <_malloc_r+0x338>)
 800b53c:	3710      	adds	r7, #16
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	197f      	adds	r7, r7, r5
 800b542:	9004      	str	r0, [sp, #16]
 800b544:	3301      	adds	r3, #1
 800b546:	d003      	beq.n	800b550 <_malloc_r+0x1e8>
 800b548:	1e7b      	subs	r3, r7, #1
 800b54a:	181b      	adds	r3, r3, r0
 800b54c:	4247      	negs	r7, r0
 800b54e:	401f      	ands	r7, r3
 800b550:	0039      	movs	r1, r7
 800b552:	9801      	ldr	r0, [sp, #4]
 800b554:	f001 fa0e 	bl	800c974 <_sbrk_r>
 800b558:	0004      	movs	r4, r0
 800b55a:	1c43      	adds	r3, r0, #1
 800b55c:	d100      	bne.n	800b560 <_malloc_r+0x1f8>
 800b55e:	e0de      	b.n	800b71e <_malloc_r+0x3b6>
 800b560:	4286      	cmp	r6, r0
 800b562:	d904      	bls.n	800b56e <_malloc_r+0x206>
 800b564:	4b4a      	ldr	r3, [pc, #296]	; (800b690 <_malloc_r+0x328>)
 800b566:	9a02      	ldr	r2, [sp, #8]
 800b568:	429a      	cmp	r2, r3
 800b56a:	d000      	beq.n	800b56e <_malloc_r+0x206>
 800b56c:	e0d7      	b.n	800b71e <_malloc_r+0x3b6>
 800b56e:	4a4d      	ldr	r2, [pc, #308]	; (800b6a4 <_malloc_r+0x33c>)
 800b570:	6813      	ldr	r3, [r2, #0]
 800b572:	18fb      	adds	r3, r7, r3
 800b574:	6013      	str	r3, [r2, #0]
 800b576:	9a04      	ldr	r2, [sp, #16]
 800b578:	3a01      	subs	r2, #1
 800b57a:	42a6      	cmp	r6, r4
 800b57c:	d000      	beq.n	800b580 <_malloc_r+0x218>
 800b57e:	e097      	b.n	800b6b0 <_malloc_r+0x348>
 800b580:	4216      	tst	r6, r2
 800b582:	d000      	beq.n	800b586 <_malloc_r+0x21e>
 800b584:	e094      	b.n	800b6b0 <_malloc_r+0x348>
 800b586:	4b42      	ldr	r3, [pc, #264]	; (800b690 <_malloc_r+0x328>)
 800b588:	689a      	ldr	r2, [r3, #8]
 800b58a:	9b03      	ldr	r3, [sp, #12]
 800b58c:	19df      	adds	r7, r3, r7
 800b58e:	2301      	movs	r3, #1
 800b590:	433b      	orrs	r3, r7
 800b592:	6053      	str	r3, [r2, #4]
 800b594:	4b43      	ldr	r3, [pc, #268]	; (800b6a4 <_malloc_r+0x33c>)
 800b596:	4a44      	ldr	r2, [pc, #272]	; (800b6a8 <_malloc_r+0x340>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	6811      	ldr	r1, [r2, #0]
 800b59c:	428b      	cmp	r3, r1
 800b59e:	d900      	bls.n	800b5a2 <_malloc_r+0x23a>
 800b5a0:	6013      	str	r3, [r2, #0]
 800b5a2:	4a42      	ldr	r2, [pc, #264]	; (800b6ac <_malloc_r+0x344>)
 800b5a4:	6811      	ldr	r1, [r2, #0]
 800b5a6:	428b      	cmp	r3, r1
 800b5a8:	d800      	bhi.n	800b5ac <_malloc_r+0x244>
 800b5aa:	e0b8      	b.n	800b71e <_malloc_r+0x3b6>
 800b5ac:	6013      	str	r3, [r2, #0]
 800b5ae:	e0b6      	b.n	800b71e <_malloc_r+0x3b6>
 800b5b0:	0a50      	lsrs	r0, r2, #9
 800b5b2:	2804      	cmp	r0, #4
 800b5b4:	d811      	bhi.n	800b5da <_malloc_r+0x272>
 800b5b6:	0991      	lsrs	r1, r2, #6
 800b5b8:	3138      	adds	r1, #56	; 0x38
 800b5ba:	00cf      	lsls	r7, r1, #3
 800b5bc:	19bf      	adds	r7, r7, r6
 800b5be:	68b8      	ldr	r0, [r7, #8]
 800b5c0:	4287      	cmp	r7, r0
 800b5c2:	d125      	bne.n	800b610 <_malloc_r+0x2a8>
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	1089      	asrs	r1, r1, #2
 800b5c8:	408a      	lsls	r2, r1
 800b5ca:	4661      	mov	r1, ip
 800b5cc:	430a      	orrs	r2, r1
 800b5ce:	6072      	str	r2, [r6, #4]
 800b5d0:	60e7      	str	r7, [r4, #12]
 800b5d2:	60a0      	str	r0, [r4, #8]
 800b5d4:	60bc      	str	r4, [r7, #8]
 800b5d6:	60c4      	str	r4, [r0, #12]
 800b5d8:	e76b      	b.n	800b4b2 <_malloc_r+0x14a>
 800b5da:	2814      	cmp	r0, #20
 800b5dc:	d802      	bhi.n	800b5e4 <_malloc_r+0x27c>
 800b5de:	0001      	movs	r1, r0
 800b5e0:	315b      	adds	r1, #91	; 0x5b
 800b5e2:	e7ea      	b.n	800b5ba <_malloc_r+0x252>
 800b5e4:	2854      	cmp	r0, #84	; 0x54
 800b5e6:	d802      	bhi.n	800b5ee <_malloc_r+0x286>
 800b5e8:	0b11      	lsrs	r1, r2, #12
 800b5ea:	316e      	adds	r1, #110	; 0x6e
 800b5ec:	e7e5      	b.n	800b5ba <_malloc_r+0x252>
 800b5ee:	21aa      	movs	r1, #170	; 0xaa
 800b5f0:	0049      	lsls	r1, r1, #1
 800b5f2:	4288      	cmp	r0, r1
 800b5f4:	d802      	bhi.n	800b5fc <_malloc_r+0x294>
 800b5f6:	0bd1      	lsrs	r1, r2, #15
 800b5f8:	3177      	adds	r1, #119	; 0x77
 800b5fa:	e7de      	b.n	800b5ba <_malloc_r+0x252>
 800b5fc:	4f26      	ldr	r7, [pc, #152]	; (800b698 <_malloc_r+0x330>)
 800b5fe:	217e      	movs	r1, #126	; 0x7e
 800b600:	42b8      	cmp	r0, r7
 800b602:	d8da      	bhi.n	800b5ba <_malloc_r+0x252>
 800b604:	0c91      	lsrs	r1, r2, #18
 800b606:	317c      	adds	r1, #124	; 0x7c
 800b608:	e7d7      	b.n	800b5ba <_malloc_r+0x252>
 800b60a:	6880      	ldr	r0, [r0, #8]
 800b60c:	4287      	cmp	r7, r0
 800b60e:	d004      	beq.n	800b61a <_malloc_r+0x2b2>
 800b610:	2603      	movs	r6, #3
 800b612:	6841      	ldr	r1, [r0, #4]
 800b614:	43b1      	bics	r1, r6
 800b616:	4291      	cmp	r1, r2
 800b618:	d8f7      	bhi.n	800b60a <_malloc_r+0x2a2>
 800b61a:	68c7      	ldr	r7, [r0, #12]
 800b61c:	e7d8      	b.n	800b5d0 <_malloc_r+0x268>
 800b61e:	2603      	movs	r6, #3
 800b620:	6861      	ldr	r1, [r4, #4]
 800b622:	43b1      	bics	r1, r6
 800b624:	9103      	str	r1, [sp, #12]
 800b626:	68e6      	ldr	r6, [r4, #12]
 800b628:	1b49      	subs	r1, r1, r5
 800b62a:	290f      	cmp	r1, #15
 800b62c:	dd10      	ble.n	800b650 <_malloc_r+0x2e8>
 800b62e:	2201      	movs	r2, #1
 800b630:	1963      	adds	r3, r4, r5
 800b632:	4315      	orrs	r5, r2
 800b634:	6065      	str	r5, [r4, #4]
 800b636:	68a5      	ldr	r5, [r4, #8]
 800b638:	430a      	orrs	r2, r1
 800b63a:	60ee      	str	r6, [r5, #12]
 800b63c:	60b5      	str	r5, [r6, #8]
 800b63e:	6143      	str	r3, [r0, #20]
 800b640:	6103      	str	r3, [r0, #16]
 800b642:	4814      	ldr	r0, [pc, #80]	; (800b694 <_malloc_r+0x32c>)
 800b644:	605a      	str	r2, [r3, #4]
 800b646:	60d8      	str	r0, [r3, #12]
 800b648:	6098      	str	r0, [r3, #8]
 800b64a:	9b03      	ldr	r3, [sp, #12]
 800b64c:	50e1      	str	r1, [r4, r3]
 800b64e:	e6eb      	b.n	800b428 <_malloc_r+0xc0>
 800b650:	2900      	cmp	r1, #0
 800b652:	db09      	blt.n	800b668 <_malloc_r+0x300>
 800b654:	9b03      	ldr	r3, [sp, #12]
 800b656:	18e1      	adds	r1, r4, r3
 800b658:	2301      	movs	r3, #1
 800b65a:	684a      	ldr	r2, [r1, #4]
 800b65c:	4313      	orrs	r3, r2
 800b65e:	604b      	str	r3, [r1, #4]
 800b660:	68a3      	ldr	r3, [r4, #8]
 800b662:	60de      	str	r6, [r3, #12]
 800b664:	60b3      	str	r3, [r6, #8]
 800b666:	e6df      	b.n	800b428 <_malloc_r+0xc0>
 800b668:	0034      	movs	r4, r6
 800b66a:	e739      	b.n	800b4e0 <_malloc_r+0x178>
 800b66c:	2108      	movs	r1, #8
 800b66e:	4249      	negs	r1, r1
 800b670:	448c      	add	ip, r1
 800b672:	4661      	mov	r1, ip
 800b674:	6889      	ldr	r1, [r1, #8]
 800b676:	3b01      	subs	r3, #1
 800b678:	4561      	cmp	r1, ip
 800b67a:	d100      	bne.n	800b67e <_malloc_r+0x316>
 800b67c:	e73a      	b.n	800b4f4 <_malloc_r+0x18c>
 800b67e:	e740      	b.n	800b502 <_malloc_r+0x19a>
 800b680:	3304      	adds	r3, #4
 800b682:	0052      	lsls	r2, r2, #1
 800b684:	420a      	tst	r2, r1
 800b686:	d0fb      	beq.n	800b680 <_malloc_r+0x318>
 800b688:	e724      	b.n	800b4d4 <_malloc_r+0x16c>
 800b68a:	9b02      	ldr	r3, [sp, #8]
 800b68c:	e7fa      	b.n	800b684 <_malloc_r+0x31c>
 800b68e:	46c0      	nop			; (mov r8, r8)
 800b690:	20000030 	.word	0x20000030
 800b694:	20000038 	.word	0x20000038
 800b698:	00000554 	.word	0x00000554
 800b69c:	20000bf0 	.word	0x20000bf0
 800b6a0:	20000438 	.word	0x20000438
 800b6a4:	20000bc0 	.word	0x20000bc0
 800b6a8:	20000be8 	.word	0x20000be8
 800b6ac:	20000bec 	.word	0x20000bec
 800b6b0:	4934      	ldr	r1, [pc, #208]	; (800b784 <_malloc_r+0x41c>)
 800b6b2:	6808      	ldr	r0, [r1, #0]
 800b6b4:	3001      	adds	r0, #1
 800b6b6:	d140      	bne.n	800b73a <_malloc_r+0x3d2>
 800b6b8:	600c      	str	r4, [r1, #0]
 800b6ba:	2107      	movs	r1, #7
 800b6bc:	0026      	movs	r6, r4
 800b6be:	2300      	movs	r3, #0
 800b6c0:	400e      	ands	r6, r1
 800b6c2:	420c      	tst	r4, r1
 800b6c4:	d002      	beq.n	800b6cc <_malloc_r+0x364>
 800b6c6:	3308      	adds	r3, #8
 800b6c8:	1b9b      	subs	r3, r3, r6
 800b6ca:	18e4      	adds	r4, r4, r3
 800b6cc:	19e1      	adds	r1, r4, r7
 800b6ce:	9105      	str	r1, [sp, #20]
 800b6d0:	9f05      	ldr	r7, [sp, #20]
 800b6d2:	9904      	ldr	r1, [sp, #16]
 800b6d4:	4017      	ands	r7, r2
 800b6d6:	18cb      	adds	r3, r1, r3
 800b6d8:	1bdf      	subs	r7, r3, r7
 800b6da:	4017      	ands	r7, r2
 800b6dc:	0039      	movs	r1, r7
 800b6de:	9801      	ldr	r0, [sp, #4]
 800b6e0:	f001 f948 	bl	800c974 <_sbrk_r>
 800b6e4:	1c43      	adds	r3, r0, #1
 800b6e6:	d107      	bne.n	800b6f8 <_malloc_r+0x390>
 800b6e8:	1e37      	subs	r7, r6, #0
 800b6ea:	9805      	ldr	r0, [sp, #20]
 800b6ec:	d004      	beq.n	800b6f8 <_malloc_r+0x390>
 800b6ee:	0030      	movs	r0, r6
 800b6f0:	2700      	movs	r7, #0
 800b6f2:	9b05      	ldr	r3, [sp, #20]
 800b6f4:	3808      	subs	r0, #8
 800b6f6:	1818      	adds	r0, r3, r0
 800b6f8:	4a23      	ldr	r2, [pc, #140]	; (800b788 <_malloc_r+0x420>)
 800b6fa:	1b00      	subs	r0, r0, r4
 800b6fc:	6813      	ldr	r3, [r2, #0]
 800b6fe:	19c0      	adds	r0, r0, r7
 800b700:	19db      	adds	r3, r3, r7
 800b702:	6013      	str	r3, [r2, #0]
 800b704:	2201      	movs	r2, #1
 800b706:	4b21      	ldr	r3, [pc, #132]	; (800b78c <_malloc_r+0x424>)
 800b708:	9902      	ldr	r1, [sp, #8]
 800b70a:	4310      	orrs	r0, r2
 800b70c:	609c      	str	r4, [r3, #8]
 800b70e:	6060      	str	r0, [r4, #4]
 800b710:	4299      	cmp	r1, r3
 800b712:	d100      	bne.n	800b716 <_malloc_r+0x3ae>
 800b714:	e73e      	b.n	800b594 <_malloc_r+0x22c>
 800b716:	9b03      	ldr	r3, [sp, #12]
 800b718:	2b0f      	cmp	r3, #15
 800b71a:	d813      	bhi.n	800b744 <_malloc_r+0x3dc>
 800b71c:	6062      	str	r2, [r4, #4]
 800b71e:	2203      	movs	r2, #3
 800b720:	4b1a      	ldr	r3, [pc, #104]	; (800b78c <_malloc_r+0x424>)
 800b722:	689b      	ldr	r3, [r3, #8]
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	4393      	bics	r3, r2
 800b728:	1b59      	subs	r1, r3, r5
 800b72a:	42ab      	cmp	r3, r5
 800b72c:	d301      	bcc.n	800b732 <_malloc_r+0x3ca>
 800b72e:	290f      	cmp	r1, #15
 800b730:	dc1f      	bgt.n	800b772 <_malloc_r+0x40a>
 800b732:	9801      	ldr	r0, [sp, #4]
 800b734:	f000 f834 	bl	800b7a0 <__malloc_unlock>
 800b738:	e623      	b.n	800b382 <_malloc_r+0x1a>
 800b73a:	4913      	ldr	r1, [pc, #76]	; (800b788 <_malloc_r+0x420>)
 800b73c:	1ba6      	subs	r6, r4, r6
 800b73e:	18f6      	adds	r6, r6, r3
 800b740:	600e      	str	r6, [r1, #0]
 800b742:	e7ba      	b.n	800b6ba <_malloc_r+0x352>
 800b744:	2107      	movs	r1, #7
 800b746:	9b03      	ldr	r3, [sp, #12]
 800b748:	3b0c      	subs	r3, #12
 800b74a:	438b      	bics	r3, r1
 800b74c:	9902      	ldr	r1, [sp, #8]
 800b74e:	6849      	ldr	r1, [r1, #4]
 800b750:	400a      	ands	r2, r1
 800b752:	9902      	ldr	r1, [sp, #8]
 800b754:	431a      	orrs	r2, r3
 800b756:	604a      	str	r2, [r1, #4]
 800b758:	18ca      	adds	r2, r1, r3
 800b75a:	2105      	movs	r1, #5
 800b75c:	6051      	str	r1, [r2, #4]
 800b75e:	6091      	str	r1, [r2, #8]
 800b760:	2b0f      	cmp	r3, #15
 800b762:	d800      	bhi.n	800b766 <_malloc_r+0x3fe>
 800b764:	e716      	b.n	800b594 <_malloc_r+0x22c>
 800b766:	9902      	ldr	r1, [sp, #8]
 800b768:	9801      	ldr	r0, [sp, #4]
 800b76a:	3108      	adds	r1, #8
 800b76c:	f001 f9dc 	bl	800cb28 <_free_r>
 800b770:	e710      	b.n	800b594 <_malloc_r+0x22c>
 800b772:	2201      	movs	r2, #1
 800b774:	0013      	movs	r3, r2
 800b776:	4805      	ldr	r0, [pc, #20]	; (800b78c <_malloc_r+0x424>)
 800b778:	432b      	orrs	r3, r5
 800b77a:	6884      	ldr	r4, [r0, #8]
 800b77c:	6063      	str	r3, [r4, #4]
 800b77e:	1963      	adds	r3, r4, r5
 800b780:	6083      	str	r3, [r0, #8]
 800b782:	e623      	b.n	800b3cc <_malloc_r+0x64>
 800b784:	20000438 	.word	0x20000438
 800b788:	20000bc0 	.word	0x20000bc0
 800b78c:	20000030 	.word	0x20000030

0800b790 <__malloc_lock>:
 800b790:	b510      	push	{r4, lr}
 800b792:	4802      	ldr	r0, [pc, #8]	; (800b79c <__malloc_lock+0xc>)
 800b794:	f001 f940 	bl	800ca18 <__retarget_lock_acquire_recursive>
 800b798:	bd10      	pop	{r4, pc}
 800b79a:	46c0      	nop			; (mov r8, r8)
 800b79c:	20000d35 	.word	0x20000d35

0800b7a0 <__malloc_unlock>:
 800b7a0:	b510      	push	{r4, lr}
 800b7a2:	4802      	ldr	r0, [pc, #8]	; (800b7ac <__malloc_unlock+0xc>)
 800b7a4:	f001 f939 	bl	800ca1a <__retarget_lock_release_recursive>
 800b7a8:	bd10      	pop	{r4, pc}
 800b7aa:	46c0      	nop			; (mov r8, r8)
 800b7ac:	20000d35 	.word	0x20000d35

0800b7b0 <sulp>:
 800b7b0:	b570      	push	{r4, r5, r6, lr}
 800b7b2:	0016      	movs	r6, r2
 800b7b4:	000d      	movs	r5, r1
 800b7b6:	f002 f90d 	bl	800d9d4 <__ulp>
 800b7ba:	2e00      	cmp	r6, #0
 800b7bc:	d00d      	beq.n	800b7da <sulp+0x2a>
 800b7be:	236b      	movs	r3, #107	; 0x6b
 800b7c0:	006a      	lsls	r2, r5, #1
 800b7c2:	0d52      	lsrs	r2, r2, #21
 800b7c4:	1a9b      	subs	r3, r3, r2
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	dd07      	ble.n	800b7da <sulp+0x2a>
 800b7ca:	2400      	movs	r4, #0
 800b7cc:	4a03      	ldr	r2, [pc, #12]	; (800b7dc <sulp+0x2c>)
 800b7ce:	051b      	lsls	r3, r3, #20
 800b7d0:	189d      	adds	r5, r3, r2
 800b7d2:	002b      	movs	r3, r5
 800b7d4:	0022      	movs	r2, r4
 800b7d6:	f7f5 ff49 	bl	800166c <__aeabi_dmul>
 800b7da:	bd70      	pop	{r4, r5, r6, pc}
 800b7dc:	3ff00000 	.word	0x3ff00000

0800b7e0 <_strtod_l>:
 800b7e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7e2:	b0a1      	sub	sp, #132	; 0x84
 800b7e4:	9219      	str	r2, [sp, #100]	; 0x64
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	2600      	movs	r6, #0
 800b7ea:	2700      	movs	r7, #0
 800b7ec:	9004      	str	r0, [sp, #16]
 800b7ee:	9107      	str	r1, [sp, #28]
 800b7f0:	921c      	str	r2, [sp, #112]	; 0x70
 800b7f2:	911b      	str	r1, [sp, #108]	; 0x6c
 800b7f4:	780a      	ldrb	r2, [r1, #0]
 800b7f6:	2a2b      	cmp	r2, #43	; 0x2b
 800b7f8:	d055      	beq.n	800b8a6 <_strtod_l+0xc6>
 800b7fa:	d841      	bhi.n	800b880 <_strtod_l+0xa0>
 800b7fc:	2a0d      	cmp	r2, #13
 800b7fe:	d83b      	bhi.n	800b878 <_strtod_l+0x98>
 800b800:	2a08      	cmp	r2, #8
 800b802:	d83b      	bhi.n	800b87c <_strtod_l+0x9c>
 800b804:	2a00      	cmp	r2, #0
 800b806:	d044      	beq.n	800b892 <_strtod_l+0xb2>
 800b808:	2200      	movs	r2, #0
 800b80a:	920f      	str	r2, [sp, #60]	; 0x3c
 800b80c:	2100      	movs	r1, #0
 800b80e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b810:	9109      	str	r1, [sp, #36]	; 0x24
 800b812:	782a      	ldrb	r2, [r5, #0]
 800b814:	2a30      	cmp	r2, #48	; 0x30
 800b816:	d000      	beq.n	800b81a <_strtod_l+0x3a>
 800b818:	e085      	b.n	800b926 <_strtod_l+0x146>
 800b81a:	786a      	ldrb	r2, [r5, #1]
 800b81c:	3120      	adds	r1, #32
 800b81e:	438a      	bics	r2, r1
 800b820:	2a58      	cmp	r2, #88	; 0x58
 800b822:	d000      	beq.n	800b826 <_strtod_l+0x46>
 800b824:	e075      	b.n	800b912 <_strtod_l+0x132>
 800b826:	9302      	str	r3, [sp, #8]
 800b828:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b82a:	4a97      	ldr	r2, [pc, #604]	; (800ba88 <_strtod_l+0x2a8>)
 800b82c:	9301      	str	r3, [sp, #4]
 800b82e:	ab1c      	add	r3, sp, #112	; 0x70
 800b830:	9300      	str	r3, [sp, #0]
 800b832:	9804      	ldr	r0, [sp, #16]
 800b834:	ab1d      	add	r3, sp, #116	; 0x74
 800b836:	a91b      	add	r1, sp, #108	; 0x6c
 800b838:	f001 fa92 	bl	800cd60 <__gethex>
 800b83c:	230f      	movs	r3, #15
 800b83e:	0002      	movs	r2, r0
 800b840:	401a      	ands	r2, r3
 800b842:	0004      	movs	r4, r0
 800b844:	9205      	str	r2, [sp, #20]
 800b846:	4218      	tst	r0, r3
 800b848:	d005      	beq.n	800b856 <_strtod_l+0x76>
 800b84a:	2a06      	cmp	r2, #6
 800b84c:	d12d      	bne.n	800b8aa <_strtod_l+0xca>
 800b84e:	1c6b      	adds	r3, r5, #1
 800b850:	931b      	str	r3, [sp, #108]	; 0x6c
 800b852:	2300      	movs	r3, #0
 800b854:	930f      	str	r3, [sp, #60]	; 0x3c
 800b856:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d002      	beq.n	800b862 <_strtod_l+0x82>
 800b85c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b85e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b860:	6013      	str	r3, [r2, #0]
 800b862:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b864:	2b00      	cmp	r3, #0
 800b866:	d01b      	beq.n	800b8a0 <_strtod_l+0xc0>
 800b868:	2380      	movs	r3, #128	; 0x80
 800b86a:	0032      	movs	r2, r6
 800b86c:	061b      	lsls	r3, r3, #24
 800b86e:	18fb      	adds	r3, r7, r3
 800b870:	0010      	movs	r0, r2
 800b872:	0019      	movs	r1, r3
 800b874:	b021      	add	sp, #132	; 0x84
 800b876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b878:	2a20      	cmp	r2, #32
 800b87a:	d1c5      	bne.n	800b808 <_strtod_l+0x28>
 800b87c:	3101      	adds	r1, #1
 800b87e:	e7b8      	b.n	800b7f2 <_strtod_l+0x12>
 800b880:	2a2d      	cmp	r2, #45	; 0x2d
 800b882:	d1c1      	bne.n	800b808 <_strtod_l+0x28>
 800b884:	3a2c      	subs	r2, #44	; 0x2c
 800b886:	920f      	str	r2, [sp, #60]	; 0x3c
 800b888:	1c4a      	adds	r2, r1, #1
 800b88a:	921b      	str	r2, [sp, #108]	; 0x6c
 800b88c:	784a      	ldrb	r2, [r1, #1]
 800b88e:	2a00      	cmp	r2, #0
 800b890:	d1bc      	bne.n	800b80c <_strtod_l+0x2c>
 800b892:	9b07      	ldr	r3, [sp, #28]
 800b894:	931b      	str	r3, [sp, #108]	; 0x6c
 800b896:	2300      	movs	r3, #0
 800b898:	930f      	str	r3, [sp, #60]	; 0x3c
 800b89a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d1dd      	bne.n	800b85c <_strtod_l+0x7c>
 800b8a0:	0032      	movs	r2, r6
 800b8a2:	003b      	movs	r3, r7
 800b8a4:	e7e4      	b.n	800b870 <_strtod_l+0x90>
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	e7ed      	b.n	800b886 <_strtod_l+0xa6>
 800b8aa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b8ac:	2a00      	cmp	r2, #0
 800b8ae:	d007      	beq.n	800b8c0 <_strtod_l+0xe0>
 800b8b0:	2135      	movs	r1, #53	; 0x35
 800b8b2:	a81e      	add	r0, sp, #120	; 0x78
 800b8b4:	f002 f97f 	bl	800dbb6 <__copybits>
 800b8b8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b8ba:	9804      	ldr	r0, [sp, #16]
 800b8bc:	f001 fd7c 	bl	800d3b8 <_Bfree>
 800b8c0:	9805      	ldr	r0, [sp, #20]
 800b8c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b8c4:	3801      	subs	r0, #1
 800b8c6:	2804      	cmp	r0, #4
 800b8c8:	d806      	bhi.n	800b8d8 <_strtod_l+0xf8>
 800b8ca:	f7f4 fc23 	bl	8000114 <__gnu_thumb1_case_uqi>
 800b8ce:	0312      	.short	0x0312
 800b8d0:	1e1c      	.short	0x1e1c
 800b8d2:	12          	.byte	0x12
 800b8d3:	00          	.byte	0x00
 800b8d4:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b8d6:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800b8d8:	05e4      	lsls	r4, r4, #23
 800b8da:	d502      	bpl.n	800b8e2 <_strtod_l+0x102>
 800b8dc:	2380      	movs	r3, #128	; 0x80
 800b8de:	061b      	lsls	r3, r3, #24
 800b8e0:	431f      	orrs	r7, r3
 800b8e2:	4b6a      	ldr	r3, [pc, #424]	; (800ba8c <_strtod_l+0x2ac>)
 800b8e4:	423b      	tst	r3, r7
 800b8e6:	d1b6      	bne.n	800b856 <_strtod_l+0x76>
 800b8e8:	f001 f86a 	bl	800c9c0 <__errno>
 800b8ec:	2322      	movs	r3, #34	; 0x22
 800b8ee:	6003      	str	r3, [r0, #0]
 800b8f0:	e7b1      	b.n	800b856 <_strtod_l+0x76>
 800b8f2:	4967      	ldr	r1, [pc, #412]	; (800ba90 <_strtod_l+0x2b0>)
 800b8f4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b8f6:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b8f8:	400a      	ands	r2, r1
 800b8fa:	4966      	ldr	r1, [pc, #408]	; (800ba94 <_strtod_l+0x2b4>)
 800b8fc:	185b      	adds	r3, r3, r1
 800b8fe:	051b      	lsls	r3, r3, #20
 800b900:	431a      	orrs	r2, r3
 800b902:	0017      	movs	r7, r2
 800b904:	e7e8      	b.n	800b8d8 <_strtod_l+0xf8>
 800b906:	4f61      	ldr	r7, [pc, #388]	; (800ba8c <_strtod_l+0x2ac>)
 800b908:	e7e6      	b.n	800b8d8 <_strtod_l+0xf8>
 800b90a:	2601      	movs	r6, #1
 800b90c:	4f62      	ldr	r7, [pc, #392]	; (800ba98 <_strtod_l+0x2b8>)
 800b90e:	4276      	negs	r6, r6
 800b910:	e7e2      	b.n	800b8d8 <_strtod_l+0xf8>
 800b912:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b914:	1c5a      	adds	r2, r3, #1
 800b916:	921b      	str	r2, [sp, #108]	; 0x6c
 800b918:	785b      	ldrb	r3, [r3, #1]
 800b91a:	2b30      	cmp	r3, #48	; 0x30
 800b91c:	d0f9      	beq.n	800b912 <_strtod_l+0x132>
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d099      	beq.n	800b856 <_strtod_l+0x76>
 800b922:	2301      	movs	r3, #1
 800b924:	9309      	str	r3, [sp, #36]	; 0x24
 800b926:	2500      	movs	r5, #0
 800b928:	220a      	movs	r2, #10
 800b92a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b92c:	950d      	str	r5, [sp, #52]	; 0x34
 800b92e:	9310      	str	r3, [sp, #64]	; 0x40
 800b930:	9508      	str	r5, [sp, #32]
 800b932:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b934:	7804      	ldrb	r4, [r0, #0]
 800b936:	0023      	movs	r3, r4
 800b938:	3b30      	subs	r3, #48	; 0x30
 800b93a:	b2d9      	uxtb	r1, r3
 800b93c:	2909      	cmp	r1, #9
 800b93e:	d927      	bls.n	800b990 <_strtod_l+0x1b0>
 800b940:	2201      	movs	r2, #1
 800b942:	4956      	ldr	r1, [pc, #344]	; (800ba9c <_strtod_l+0x2bc>)
 800b944:	f000 ff98 	bl	800c878 <strncmp>
 800b948:	2800      	cmp	r0, #0
 800b94a:	d031      	beq.n	800b9b0 <_strtod_l+0x1d0>
 800b94c:	2000      	movs	r0, #0
 800b94e:	0023      	movs	r3, r4
 800b950:	4684      	mov	ip, r0
 800b952:	9a08      	ldr	r2, [sp, #32]
 800b954:	900c      	str	r0, [sp, #48]	; 0x30
 800b956:	9205      	str	r2, [sp, #20]
 800b958:	2220      	movs	r2, #32
 800b95a:	0019      	movs	r1, r3
 800b95c:	4391      	bics	r1, r2
 800b95e:	000a      	movs	r2, r1
 800b960:	2100      	movs	r1, #0
 800b962:	9106      	str	r1, [sp, #24]
 800b964:	2a45      	cmp	r2, #69	; 0x45
 800b966:	d000      	beq.n	800b96a <_strtod_l+0x18a>
 800b968:	e0c2      	b.n	800baf0 <_strtod_l+0x310>
 800b96a:	9b05      	ldr	r3, [sp, #20]
 800b96c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b96e:	4303      	orrs	r3, r0
 800b970:	4313      	orrs	r3, r2
 800b972:	428b      	cmp	r3, r1
 800b974:	d08d      	beq.n	800b892 <_strtod_l+0xb2>
 800b976:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b978:	9307      	str	r3, [sp, #28]
 800b97a:	3301      	adds	r3, #1
 800b97c:	931b      	str	r3, [sp, #108]	; 0x6c
 800b97e:	9b07      	ldr	r3, [sp, #28]
 800b980:	785b      	ldrb	r3, [r3, #1]
 800b982:	2b2b      	cmp	r3, #43	; 0x2b
 800b984:	d071      	beq.n	800ba6a <_strtod_l+0x28a>
 800b986:	000c      	movs	r4, r1
 800b988:	2b2d      	cmp	r3, #45	; 0x2d
 800b98a:	d174      	bne.n	800ba76 <_strtod_l+0x296>
 800b98c:	2401      	movs	r4, #1
 800b98e:	e06d      	b.n	800ba6c <_strtod_l+0x28c>
 800b990:	9908      	ldr	r1, [sp, #32]
 800b992:	2908      	cmp	r1, #8
 800b994:	dc09      	bgt.n	800b9aa <_strtod_l+0x1ca>
 800b996:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b998:	4351      	muls	r1, r2
 800b99a:	185b      	adds	r3, r3, r1
 800b99c:	930d      	str	r3, [sp, #52]	; 0x34
 800b99e:	9b08      	ldr	r3, [sp, #32]
 800b9a0:	3001      	adds	r0, #1
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	9308      	str	r3, [sp, #32]
 800b9a6:	901b      	str	r0, [sp, #108]	; 0x6c
 800b9a8:	e7c3      	b.n	800b932 <_strtod_l+0x152>
 800b9aa:	4355      	muls	r5, r2
 800b9ac:	195d      	adds	r5, r3, r5
 800b9ae:	e7f6      	b.n	800b99e <_strtod_l+0x1be>
 800b9b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b9b2:	1c5a      	adds	r2, r3, #1
 800b9b4:	921b      	str	r2, [sp, #108]	; 0x6c
 800b9b6:	9a08      	ldr	r2, [sp, #32]
 800b9b8:	785b      	ldrb	r3, [r3, #1]
 800b9ba:	2a00      	cmp	r2, #0
 800b9bc:	d03a      	beq.n	800ba34 <_strtod_l+0x254>
 800b9be:	900c      	str	r0, [sp, #48]	; 0x30
 800b9c0:	9205      	str	r2, [sp, #20]
 800b9c2:	001a      	movs	r2, r3
 800b9c4:	3a30      	subs	r2, #48	; 0x30
 800b9c6:	2a09      	cmp	r2, #9
 800b9c8:	d912      	bls.n	800b9f0 <_strtod_l+0x210>
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	4694      	mov	ip, r2
 800b9ce:	e7c3      	b.n	800b958 <_strtod_l+0x178>
 800b9d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b9d2:	3001      	adds	r0, #1
 800b9d4:	1c5a      	adds	r2, r3, #1
 800b9d6:	921b      	str	r2, [sp, #108]	; 0x6c
 800b9d8:	785b      	ldrb	r3, [r3, #1]
 800b9da:	2b30      	cmp	r3, #48	; 0x30
 800b9dc:	d0f8      	beq.n	800b9d0 <_strtod_l+0x1f0>
 800b9de:	001a      	movs	r2, r3
 800b9e0:	3a31      	subs	r2, #49	; 0x31
 800b9e2:	2a08      	cmp	r2, #8
 800b9e4:	d83c      	bhi.n	800ba60 <_strtod_l+0x280>
 800b9e6:	900c      	str	r0, [sp, #48]	; 0x30
 800b9e8:	2000      	movs	r0, #0
 800b9ea:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b9ec:	9005      	str	r0, [sp, #20]
 800b9ee:	9210      	str	r2, [sp, #64]	; 0x40
 800b9f0:	001a      	movs	r2, r3
 800b9f2:	1c41      	adds	r1, r0, #1
 800b9f4:	3a30      	subs	r2, #48	; 0x30
 800b9f6:	2b30      	cmp	r3, #48	; 0x30
 800b9f8:	d016      	beq.n	800ba28 <_strtod_l+0x248>
 800b9fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b9fc:	185b      	adds	r3, r3, r1
 800b9fe:	930c      	str	r3, [sp, #48]	; 0x30
 800ba00:	9b05      	ldr	r3, [sp, #20]
 800ba02:	210a      	movs	r1, #10
 800ba04:	469c      	mov	ip, r3
 800ba06:	4484      	add	ip, r0
 800ba08:	4563      	cmp	r3, ip
 800ba0a:	d115      	bne.n	800ba38 <_strtod_l+0x258>
 800ba0c:	9905      	ldr	r1, [sp, #20]
 800ba0e:	9b05      	ldr	r3, [sp, #20]
 800ba10:	3101      	adds	r1, #1
 800ba12:	1809      	adds	r1, r1, r0
 800ba14:	181b      	adds	r3, r3, r0
 800ba16:	9105      	str	r1, [sp, #20]
 800ba18:	2b08      	cmp	r3, #8
 800ba1a:	dc19      	bgt.n	800ba50 <_strtod_l+0x270>
 800ba1c:	230a      	movs	r3, #10
 800ba1e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ba20:	434b      	muls	r3, r1
 800ba22:	2100      	movs	r1, #0
 800ba24:	18d3      	adds	r3, r2, r3
 800ba26:	930d      	str	r3, [sp, #52]	; 0x34
 800ba28:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba2a:	0008      	movs	r0, r1
 800ba2c:	1c5a      	adds	r2, r3, #1
 800ba2e:	921b      	str	r2, [sp, #108]	; 0x6c
 800ba30:	785b      	ldrb	r3, [r3, #1]
 800ba32:	e7c6      	b.n	800b9c2 <_strtod_l+0x1e2>
 800ba34:	9808      	ldr	r0, [sp, #32]
 800ba36:	e7d0      	b.n	800b9da <_strtod_l+0x1fa>
 800ba38:	1c5c      	adds	r4, r3, #1
 800ba3a:	2b08      	cmp	r3, #8
 800ba3c:	dc04      	bgt.n	800ba48 <_strtod_l+0x268>
 800ba3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba40:	434b      	muls	r3, r1
 800ba42:	930d      	str	r3, [sp, #52]	; 0x34
 800ba44:	0023      	movs	r3, r4
 800ba46:	e7df      	b.n	800ba08 <_strtod_l+0x228>
 800ba48:	2c10      	cmp	r4, #16
 800ba4a:	dcfb      	bgt.n	800ba44 <_strtod_l+0x264>
 800ba4c:	434d      	muls	r5, r1
 800ba4e:	e7f9      	b.n	800ba44 <_strtod_l+0x264>
 800ba50:	9b05      	ldr	r3, [sp, #20]
 800ba52:	2100      	movs	r1, #0
 800ba54:	2b10      	cmp	r3, #16
 800ba56:	dce7      	bgt.n	800ba28 <_strtod_l+0x248>
 800ba58:	230a      	movs	r3, #10
 800ba5a:	435d      	muls	r5, r3
 800ba5c:	1955      	adds	r5, r2, r5
 800ba5e:	e7e3      	b.n	800ba28 <_strtod_l+0x248>
 800ba60:	2200      	movs	r2, #0
 800ba62:	920c      	str	r2, [sp, #48]	; 0x30
 800ba64:	9205      	str	r2, [sp, #20]
 800ba66:	3201      	adds	r2, #1
 800ba68:	e7b0      	b.n	800b9cc <_strtod_l+0x1ec>
 800ba6a:	2400      	movs	r4, #0
 800ba6c:	9b07      	ldr	r3, [sp, #28]
 800ba6e:	3302      	adds	r3, #2
 800ba70:	931b      	str	r3, [sp, #108]	; 0x6c
 800ba72:	9b07      	ldr	r3, [sp, #28]
 800ba74:	789b      	ldrb	r3, [r3, #2]
 800ba76:	001a      	movs	r2, r3
 800ba78:	3a30      	subs	r2, #48	; 0x30
 800ba7a:	2a09      	cmp	r2, #9
 800ba7c:	d914      	bls.n	800baa8 <_strtod_l+0x2c8>
 800ba7e:	9a07      	ldr	r2, [sp, #28]
 800ba80:	921b      	str	r2, [sp, #108]	; 0x6c
 800ba82:	2200      	movs	r2, #0
 800ba84:	e033      	b.n	800baee <_strtod_l+0x30e>
 800ba86:	46c0      	nop			; (mov r8, r8)
 800ba88:	08014e80 	.word	0x08014e80
 800ba8c:	7ff00000 	.word	0x7ff00000
 800ba90:	ffefffff 	.word	0xffefffff
 800ba94:	00000433 	.word	0x00000433
 800ba98:	7fffffff 	.word	0x7fffffff
 800ba9c:	08014e7c 	.word	0x08014e7c
 800baa0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800baa2:	1c5a      	adds	r2, r3, #1
 800baa4:	921b      	str	r2, [sp, #108]	; 0x6c
 800baa6:	785b      	ldrb	r3, [r3, #1]
 800baa8:	2b30      	cmp	r3, #48	; 0x30
 800baaa:	d0f9      	beq.n	800baa0 <_strtod_l+0x2c0>
 800baac:	2200      	movs	r2, #0
 800baae:	9206      	str	r2, [sp, #24]
 800bab0:	001a      	movs	r2, r3
 800bab2:	3a31      	subs	r2, #49	; 0x31
 800bab4:	2a08      	cmp	r2, #8
 800bab6:	d81b      	bhi.n	800baf0 <_strtod_l+0x310>
 800bab8:	3b30      	subs	r3, #48	; 0x30
 800baba:	930e      	str	r3, [sp, #56]	; 0x38
 800babc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800babe:	9306      	str	r3, [sp, #24]
 800bac0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bac2:	1c59      	adds	r1, r3, #1
 800bac4:	911b      	str	r1, [sp, #108]	; 0x6c
 800bac6:	785b      	ldrb	r3, [r3, #1]
 800bac8:	001a      	movs	r2, r3
 800baca:	3a30      	subs	r2, #48	; 0x30
 800bacc:	2a09      	cmp	r2, #9
 800bace:	d93a      	bls.n	800bb46 <_strtod_l+0x366>
 800bad0:	9a06      	ldr	r2, [sp, #24]
 800bad2:	1a8a      	subs	r2, r1, r2
 800bad4:	49b2      	ldr	r1, [pc, #712]	; (800bda0 <_strtod_l+0x5c0>)
 800bad6:	9106      	str	r1, [sp, #24]
 800bad8:	2a08      	cmp	r2, #8
 800bada:	dc04      	bgt.n	800bae6 <_strtod_l+0x306>
 800badc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bade:	9206      	str	r2, [sp, #24]
 800bae0:	428a      	cmp	r2, r1
 800bae2:	dd00      	ble.n	800bae6 <_strtod_l+0x306>
 800bae4:	9106      	str	r1, [sp, #24]
 800bae6:	2c00      	cmp	r4, #0
 800bae8:	d002      	beq.n	800baf0 <_strtod_l+0x310>
 800baea:	9a06      	ldr	r2, [sp, #24]
 800baec:	4252      	negs	r2, r2
 800baee:	9206      	str	r2, [sp, #24]
 800baf0:	9a05      	ldr	r2, [sp, #20]
 800baf2:	2a00      	cmp	r2, #0
 800baf4:	d14d      	bne.n	800bb92 <_strtod_l+0x3b2>
 800baf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800baf8:	4310      	orrs	r0, r2
 800bafa:	d000      	beq.n	800bafe <_strtod_l+0x31e>
 800bafc:	e6ab      	b.n	800b856 <_strtod_l+0x76>
 800bafe:	4662      	mov	r2, ip
 800bb00:	2a00      	cmp	r2, #0
 800bb02:	d000      	beq.n	800bb06 <_strtod_l+0x326>
 800bb04:	e6c5      	b.n	800b892 <_strtod_l+0xb2>
 800bb06:	2b69      	cmp	r3, #105	; 0x69
 800bb08:	d027      	beq.n	800bb5a <_strtod_l+0x37a>
 800bb0a:	dc23      	bgt.n	800bb54 <_strtod_l+0x374>
 800bb0c:	2b49      	cmp	r3, #73	; 0x49
 800bb0e:	d024      	beq.n	800bb5a <_strtod_l+0x37a>
 800bb10:	2b4e      	cmp	r3, #78	; 0x4e
 800bb12:	d000      	beq.n	800bb16 <_strtod_l+0x336>
 800bb14:	e6bd      	b.n	800b892 <_strtod_l+0xb2>
 800bb16:	49a3      	ldr	r1, [pc, #652]	; (800bda4 <_strtod_l+0x5c4>)
 800bb18:	a81b      	add	r0, sp, #108	; 0x6c
 800bb1a:	f001 fb57 	bl	800d1cc <__match>
 800bb1e:	2800      	cmp	r0, #0
 800bb20:	d100      	bne.n	800bb24 <_strtod_l+0x344>
 800bb22:	e6b6      	b.n	800b892 <_strtod_l+0xb2>
 800bb24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	2b28      	cmp	r3, #40	; 0x28
 800bb2a:	d12c      	bne.n	800bb86 <_strtod_l+0x3a6>
 800bb2c:	499e      	ldr	r1, [pc, #632]	; (800bda8 <_strtod_l+0x5c8>)
 800bb2e:	aa1e      	add	r2, sp, #120	; 0x78
 800bb30:	a81b      	add	r0, sp, #108	; 0x6c
 800bb32:	f001 fb5f 	bl	800d1f4 <__hexnan>
 800bb36:	2805      	cmp	r0, #5
 800bb38:	d125      	bne.n	800bb86 <_strtod_l+0x3a6>
 800bb3a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bb3c:	4a9b      	ldr	r2, [pc, #620]	; (800bdac <_strtod_l+0x5cc>)
 800bb3e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800bb40:	431a      	orrs	r2, r3
 800bb42:	0017      	movs	r7, r2
 800bb44:	e687      	b.n	800b856 <_strtod_l+0x76>
 800bb46:	220a      	movs	r2, #10
 800bb48:	990e      	ldr	r1, [sp, #56]	; 0x38
 800bb4a:	434a      	muls	r2, r1
 800bb4c:	18d2      	adds	r2, r2, r3
 800bb4e:	3a30      	subs	r2, #48	; 0x30
 800bb50:	920e      	str	r2, [sp, #56]	; 0x38
 800bb52:	e7b5      	b.n	800bac0 <_strtod_l+0x2e0>
 800bb54:	2b6e      	cmp	r3, #110	; 0x6e
 800bb56:	d0de      	beq.n	800bb16 <_strtod_l+0x336>
 800bb58:	e69b      	b.n	800b892 <_strtod_l+0xb2>
 800bb5a:	4995      	ldr	r1, [pc, #596]	; (800bdb0 <_strtod_l+0x5d0>)
 800bb5c:	a81b      	add	r0, sp, #108	; 0x6c
 800bb5e:	f001 fb35 	bl	800d1cc <__match>
 800bb62:	2800      	cmp	r0, #0
 800bb64:	d100      	bne.n	800bb68 <_strtod_l+0x388>
 800bb66:	e694      	b.n	800b892 <_strtod_l+0xb2>
 800bb68:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bb6a:	4992      	ldr	r1, [pc, #584]	; (800bdb4 <_strtod_l+0x5d4>)
 800bb6c:	3b01      	subs	r3, #1
 800bb6e:	a81b      	add	r0, sp, #108	; 0x6c
 800bb70:	931b      	str	r3, [sp, #108]	; 0x6c
 800bb72:	f001 fb2b 	bl	800d1cc <__match>
 800bb76:	2800      	cmp	r0, #0
 800bb78:	d102      	bne.n	800bb80 <_strtod_l+0x3a0>
 800bb7a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bb7c:	3301      	adds	r3, #1
 800bb7e:	931b      	str	r3, [sp, #108]	; 0x6c
 800bb80:	2600      	movs	r6, #0
 800bb82:	4f8a      	ldr	r7, [pc, #552]	; (800bdac <_strtod_l+0x5cc>)
 800bb84:	e667      	b.n	800b856 <_strtod_l+0x76>
 800bb86:	488c      	ldr	r0, [pc, #560]	; (800bdb8 <_strtod_l+0x5d8>)
 800bb88:	f000 ff5c 	bl	800ca44 <nan>
 800bb8c:	0006      	movs	r6, r0
 800bb8e:	000f      	movs	r7, r1
 800bb90:	e661      	b.n	800b856 <_strtod_l+0x76>
 800bb92:	9b06      	ldr	r3, [sp, #24]
 800bb94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb96:	1a9b      	subs	r3, r3, r2
 800bb98:	9309      	str	r3, [sp, #36]	; 0x24
 800bb9a:	9b08      	ldr	r3, [sp, #32]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d101      	bne.n	800bba4 <_strtod_l+0x3c4>
 800bba0:	9b05      	ldr	r3, [sp, #20]
 800bba2:	9308      	str	r3, [sp, #32]
 800bba4:	9c05      	ldr	r4, [sp, #20]
 800bba6:	2c10      	cmp	r4, #16
 800bba8:	dd00      	ble.n	800bbac <_strtod_l+0x3cc>
 800bbaa:	2410      	movs	r4, #16
 800bbac:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bbae:	f7f6 fc25 	bl	80023fc <__aeabi_ui2d>
 800bbb2:	9b05      	ldr	r3, [sp, #20]
 800bbb4:	0006      	movs	r6, r0
 800bbb6:	000f      	movs	r7, r1
 800bbb8:	2b09      	cmp	r3, #9
 800bbba:	dd15      	ble.n	800bbe8 <_strtod_l+0x408>
 800bbbc:	0022      	movs	r2, r4
 800bbbe:	4b7f      	ldr	r3, [pc, #508]	; (800bdbc <_strtod_l+0x5dc>)
 800bbc0:	3a09      	subs	r2, #9
 800bbc2:	00d2      	lsls	r2, r2, #3
 800bbc4:	189b      	adds	r3, r3, r2
 800bbc6:	681a      	ldr	r2, [r3, #0]
 800bbc8:	685b      	ldr	r3, [r3, #4]
 800bbca:	f7f5 fd4f 	bl	800166c <__aeabi_dmul>
 800bbce:	0006      	movs	r6, r0
 800bbd0:	0028      	movs	r0, r5
 800bbd2:	000f      	movs	r7, r1
 800bbd4:	f7f6 fc12 	bl	80023fc <__aeabi_ui2d>
 800bbd8:	0002      	movs	r2, r0
 800bbda:	000b      	movs	r3, r1
 800bbdc:	0030      	movs	r0, r6
 800bbde:	0039      	movs	r1, r7
 800bbe0:	f7f4 fdea 	bl	80007b8 <__aeabi_dadd>
 800bbe4:	0006      	movs	r6, r0
 800bbe6:	000f      	movs	r7, r1
 800bbe8:	9b05      	ldr	r3, [sp, #20]
 800bbea:	2b0f      	cmp	r3, #15
 800bbec:	dc39      	bgt.n	800bc62 <_strtod_l+0x482>
 800bbee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d100      	bne.n	800bbf6 <_strtod_l+0x416>
 800bbf4:	e62f      	b.n	800b856 <_strtod_l+0x76>
 800bbf6:	dd24      	ble.n	800bc42 <_strtod_l+0x462>
 800bbf8:	2b16      	cmp	r3, #22
 800bbfa:	dc09      	bgt.n	800bc10 <_strtod_l+0x430>
 800bbfc:	496f      	ldr	r1, [pc, #444]	; (800bdbc <_strtod_l+0x5dc>)
 800bbfe:	00db      	lsls	r3, r3, #3
 800bc00:	18c9      	adds	r1, r1, r3
 800bc02:	0032      	movs	r2, r6
 800bc04:	6808      	ldr	r0, [r1, #0]
 800bc06:	6849      	ldr	r1, [r1, #4]
 800bc08:	003b      	movs	r3, r7
 800bc0a:	f7f5 fd2f 	bl	800166c <__aeabi_dmul>
 800bc0e:	e7bd      	b.n	800bb8c <_strtod_l+0x3ac>
 800bc10:	2325      	movs	r3, #37	; 0x25
 800bc12:	9a05      	ldr	r2, [sp, #20]
 800bc14:	1a9b      	subs	r3, r3, r2
 800bc16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	db22      	blt.n	800bc62 <_strtod_l+0x482>
 800bc1c:	240f      	movs	r4, #15
 800bc1e:	9b05      	ldr	r3, [sp, #20]
 800bc20:	4d66      	ldr	r5, [pc, #408]	; (800bdbc <_strtod_l+0x5dc>)
 800bc22:	1ae4      	subs	r4, r4, r3
 800bc24:	00e1      	lsls	r1, r4, #3
 800bc26:	1869      	adds	r1, r5, r1
 800bc28:	0032      	movs	r2, r6
 800bc2a:	6808      	ldr	r0, [r1, #0]
 800bc2c:	6849      	ldr	r1, [r1, #4]
 800bc2e:	003b      	movs	r3, r7
 800bc30:	f7f5 fd1c 	bl	800166c <__aeabi_dmul>
 800bc34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc36:	1b1c      	subs	r4, r3, r4
 800bc38:	00e4      	lsls	r4, r4, #3
 800bc3a:	192d      	adds	r5, r5, r4
 800bc3c:	682a      	ldr	r2, [r5, #0]
 800bc3e:	686b      	ldr	r3, [r5, #4]
 800bc40:	e7e3      	b.n	800bc0a <_strtod_l+0x42a>
 800bc42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc44:	3316      	adds	r3, #22
 800bc46:	db0c      	blt.n	800bc62 <_strtod_l+0x482>
 800bc48:	9906      	ldr	r1, [sp, #24]
 800bc4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc4c:	4b5b      	ldr	r3, [pc, #364]	; (800bdbc <_strtod_l+0x5dc>)
 800bc4e:	1a52      	subs	r2, r2, r1
 800bc50:	00d2      	lsls	r2, r2, #3
 800bc52:	189b      	adds	r3, r3, r2
 800bc54:	0030      	movs	r0, r6
 800bc56:	681a      	ldr	r2, [r3, #0]
 800bc58:	685b      	ldr	r3, [r3, #4]
 800bc5a:	0039      	movs	r1, r7
 800bc5c:	f7f5 f90c 	bl	8000e78 <__aeabi_ddiv>
 800bc60:	e794      	b.n	800bb8c <_strtod_l+0x3ac>
 800bc62:	9b05      	ldr	r3, [sp, #20]
 800bc64:	1b1c      	subs	r4, r3, r4
 800bc66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc68:	18e4      	adds	r4, r4, r3
 800bc6a:	2c00      	cmp	r4, #0
 800bc6c:	dd72      	ble.n	800bd54 <_strtod_l+0x574>
 800bc6e:	220f      	movs	r2, #15
 800bc70:	0023      	movs	r3, r4
 800bc72:	4013      	ands	r3, r2
 800bc74:	4214      	tst	r4, r2
 800bc76:	d00a      	beq.n	800bc8e <_strtod_l+0x4ae>
 800bc78:	4950      	ldr	r1, [pc, #320]	; (800bdbc <_strtod_l+0x5dc>)
 800bc7a:	00db      	lsls	r3, r3, #3
 800bc7c:	18c9      	adds	r1, r1, r3
 800bc7e:	0032      	movs	r2, r6
 800bc80:	6808      	ldr	r0, [r1, #0]
 800bc82:	6849      	ldr	r1, [r1, #4]
 800bc84:	003b      	movs	r3, r7
 800bc86:	f7f5 fcf1 	bl	800166c <__aeabi_dmul>
 800bc8a:	0006      	movs	r6, r0
 800bc8c:	000f      	movs	r7, r1
 800bc8e:	230f      	movs	r3, #15
 800bc90:	439c      	bics	r4, r3
 800bc92:	d04a      	beq.n	800bd2a <_strtod_l+0x54a>
 800bc94:	3326      	adds	r3, #38	; 0x26
 800bc96:	33ff      	adds	r3, #255	; 0xff
 800bc98:	429c      	cmp	r4, r3
 800bc9a:	dd22      	ble.n	800bce2 <_strtod_l+0x502>
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	9305      	str	r3, [sp, #20]
 800bca0:	9306      	str	r3, [sp, #24]
 800bca2:	930d      	str	r3, [sp, #52]	; 0x34
 800bca4:	9308      	str	r3, [sp, #32]
 800bca6:	2322      	movs	r3, #34	; 0x22
 800bca8:	2600      	movs	r6, #0
 800bcaa:	9a04      	ldr	r2, [sp, #16]
 800bcac:	4f3f      	ldr	r7, [pc, #252]	; (800bdac <_strtod_l+0x5cc>)
 800bcae:	6013      	str	r3, [r2, #0]
 800bcb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcb2:	42b3      	cmp	r3, r6
 800bcb4:	d100      	bne.n	800bcb8 <_strtod_l+0x4d8>
 800bcb6:	e5ce      	b.n	800b856 <_strtod_l+0x76>
 800bcb8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bcba:	9804      	ldr	r0, [sp, #16]
 800bcbc:	f001 fb7c 	bl	800d3b8 <_Bfree>
 800bcc0:	9908      	ldr	r1, [sp, #32]
 800bcc2:	9804      	ldr	r0, [sp, #16]
 800bcc4:	f001 fb78 	bl	800d3b8 <_Bfree>
 800bcc8:	9906      	ldr	r1, [sp, #24]
 800bcca:	9804      	ldr	r0, [sp, #16]
 800bccc:	f001 fb74 	bl	800d3b8 <_Bfree>
 800bcd0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bcd2:	9804      	ldr	r0, [sp, #16]
 800bcd4:	f001 fb70 	bl	800d3b8 <_Bfree>
 800bcd8:	9905      	ldr	r1, [sp, #20]
 800bcda:	9804      	ldr	r0, [sp, #16]
 800bcdc:	f001 fb6c 	bl	800d3b8 <_Bfree>
 800bce0:	e5b9      	b.n	800b856 <_strtod_l+0x76>
 800bce2:	2300      	movs	r3, #0
 800bce4:	0030      	movs	r0, r6
 800bce6:	0039      	movs	r1, r7
 800bce8:	4d35      	ldr	r5, [pc, #212]	; (800bdc0 <_strtod_l+0x5e0>)
 800bcea:	1124      	asrs	r4, r4, #4
 800bcec:	9307      	str	r3, [sp, #28]
 800bcee:	2c01      	cmp	r4, #1
 800bcf0:	dc1e      	bgt.n	800bd30 <_strtod_l+0x550>
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d001      	beq.n	800bcfa <_strtod_l+0x51a>
 800bcf6:	0006      	movs	r6, r0
 800bcf8:	000f      	movs	r7, r1
 800bcfa:	4b32      	ldr	r3, [pc, #200]	; (800bdc4 <_strtod_l+0x5e4>)
 800bcfc:	9a07      	ldr	r2, [sp, #28]
 800bcfe:	18ff      	adds	r7, r7, r3
 800bd00:	4b2f      	ldr	r3, [pc, #188]	; (800bdc0 <_strtod_l+0x5e0>)
 800bd02:	00d2      	lsls	r2, r2, #3
 800bd04:	189d      	adds	r5, r3, r2
 800bd06:	6828      	ldr	r0, [r5, #0]
 800bd08:	6869      	ldr	r1, [r5, #4]
 800bd0a:	0032      	movs	r2, r6
 800bd0c:	003b      	movs	r3, r7
 800bd0e:	f7f5 fcad 	bl	800166c <__aeabi_dmul>
 800bd12:	4b26      	ldr	r3, [pc, #152]	; (800bdac <_strtod_l+0x5cc>)
 800bd14:	4a2c      	ldr	r2, [pc, #176]	; (800bdc8 <_strtod_l+0x5e8>)
 800bd16:	0006      	movs	r6, r0
 800bd18:	400b      	ands	r3, r1
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d8be      	bhi.n	800bc9c <_strtod_l+0x4bc>
 800bd1e:	4a2b      	ldr	r2, [pc, #172]	; (800bdcc <_strtod_l+0x5ec>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d913      	bls.n	800bd4c <_strtod_l+0x56c>
 800bd24:	2601      	movs	r6, #1
 800bd26:	4f2a      	ldr	r7, [pc, #168]	; (800bdd0 <_strtod_l+0x5f0>)
 800bd28:	4276      	negs	r6, r6
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	9307      	str	r3, [sp, #28]
 800bd2e:	e088      	b.n	800be42 <_strtod_l+0x662>
 800bd30:	2201      	movs	r2, #1
 800bd32:	4214      	tst	r4, r2
 800bd34:	d004      	beq.n	800bd40 <_strtod_l+0x560>
 800bd36:	682a      	ldr	r2, [r5, #0]
 800bd38:	686b      	ldr	r3, [r5, #4]
 800bd3a:	f7f5 fc97 	bl	800166c <__aeabi_dmul>
 800bd3e:	2301      	movs	r3, #1
 800bd40:	9a07      	ldr	r2, [sp, #28]
 800bd42:	1064      	asrs	r4, r4, #1
 800bd44:	3201      	adds	r2, #1
 800bd46:	9207      	str	r2, [sp, #28]
 800bd48:	3508      	adds	r5, #8
 800bd4a:	e7d0      	b.n	800bcee <_strtod_l+0x50e>
 800bd4c:	23d4      	movs	r3, #212	; 0xd4
 800bd4e:	049b      	lsls	r3, r3, #18
 800bd50:	18cf      	adds	r7, r1, r3
 800bd52:	e7ea      	b.n	800bd2a <_strtod_l+0x54a>
 800bd54:	2c00      	cmp	r4, #0
 800bd56:	d0e8      	beq.n	800bd2a <_strtod_l+0x54a>
 800bd58:	4264      	negs	r4, r4
 800bd5a:	230f      	movs	r3, #15
 800bd5c:	0022      	movs	r2, r4
 800bd5e:	401a      	ands	r2, r3
 800bd60:	421c      	tst	r4, r3
 800bd62:	d00a      	beq.n	800bd7a <_strtod_l+0x59a>
 800bd64:	4b15      	ldr	r3, [pc, #84]	; (800bdbc <_strtod_l+0x5dc>)
 800bd66:	00d2      	lsls	r2, r2, #3
 800bd68:	189b      	adds	r3, r3, r2
 800bd6a:	0030      	movs	r0, r6
 800bd6c:	681a      	ldr	r2, [r3, #0]
 800bd6e:	685b      	ldr	r3, [r3, #4]
 800bd70:	0039      	movs	r1, r7
 800bd72:	f7f5 f881 	bl	8000e78 <__aeabi_ddiv>
 800bd76:	0006      	movs	r6, r0
 800bd78:	000f      	movs	r7, r1
 800bd7a:	1124      	asrs	r4, r4, #4
 800bd7c:	d0d5      	beq.n	800bd2a <_strtod_l+0x54a>
 800bd7e:	2c1f      	cmp	r4, #31
 800bd80:	dd28      	ble.n	800bdd4 <_strtod_l+0x5f4>
 800bd82:	2300      	movs	r3, #0
 800bd84:	9305      	str	r3, [sp, #20]
 800bd86:	9306      	str	r3, [sp, #24]
 800bd88:	930d      	str	r3, [sp, #52]	; 0x34
 800bd8a:	9308      	str	r3, [sp, #32]
 800bd8c:	2322      	movs	r3, #34	; 0x22
 800bd8e:	9a04      	ldr	r2, [sp, #16]
 800bd90:	2600      	movs	r6, #0
 800bd92:	6013      	str	r3, [r2, #0]
 800bd94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd96:	2700      	movs	r7, #0
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d18d      	bne.n	800bcb8 <_strtod_l+0x4d8>
 800bd9c:	e55b      	b.n	800b856 <_strtod_l+0x76>
 800bd9e:	46c0      	nop			; (mov r8, r8)
 800bda0:	00004e1f 	.word	0x00004e1f
 800bda4:	080151b1 	.word	0x080151b1
 800bda8:	08014e94 	.word	0x08014e94
 800bdac:	7ff00000 	.word	0x7ff00000
 800bdb0:	080151a9 	.word	0x080151a9
 800bdb4:	0801525f 	.word	0x0801525f
 800bdb8:	0801525b 	.word	0x0801525b
 800bdbc:	080150d0 	.word	0x080150d0
 800bdc0:	080150a8 	.word	0x080150a8
 800bdc4:	fcb00000 	.word	0xfcb00000
 800bdc8:	7ca00000 	.word	0x7ca00000
 800bdcc:	7c900000 	.word	0x7c900000
 800bdd0:	7fefffff 	.word	0x7fefffff
 800bdd4:	2310      	movs	r3, #16
 800bdd6:	0022      	movs	r2, r4
 800bdd8:	401a      	ands	r2, r3
 800bdda:	9207      	str	r2, [sp, #28]
 800bddc:	421c      	tst	r4, r3
 800bdde:	d001      	beq.n	800bde4 <_strtod_l+0x604>
 800bde0:	335a      	adds	r3, #90	; 0x5a
 800bde2:	9307      	str	r3, [sp, #28]
 800bde4:	0030      	movs	r0, r6
 800bde6:	0039      	movs	r1, r7
 800bde8:	2300      	movs	r3, #0
 800bdea:	4dc4      	ldr	r5, [pc, #784]	; (800c0fc <_strtod_l+0x91c>)
 800bdec:	2201      	movs	r2, #1
 800bdee:	4214      	tst	r4, r2
 800bdf0:	d004      	beq.n	800bdfc <_strtod_l+0x61c>
 800bdf2:	682a      	ldr	r2, [r5, #0]
 800bdf4:	686b      	ldr	r3, [r5, #4]
 800bdf6:	f7f5 fc39 	bl	800166c <__aeabi_dmul>
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	1064      	asrs	r4, r4, #1
 800bdfe:	3508      	adds	r5, #8
 800be00:	2c00      	cmp	r4, #0
 800be02:	d1f3      	bne.n	800bdec <_strtod_l+0x60c>
 800be04:	2b00      	cmp	r3, #0
 800be06:	d001      	beq.n	800be0c <_strtod_l+0x62c>
 800be08:	0006      	movs	r6, r0
 800be0a:	000f      	movs	r7, r1
 800be0c:	9b07      	ldr	r3, [sp, #28]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d00f      	beq.n	800be32 <_strtod_l+0x652>
 800be12:	236b      	movs	r3, #107	; 0x6b
 800be14:	007a      	lsls	r2, r7, #1
 800be16:	0d52      	lsrs	r2, r2, #21
 800be18:	0039      	movs	r1, r7
 800be1a:	1a9b      	subs	r3, r3, r2
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	dd08      	ble.n	800be32 <_strtod_l+0x652>
 800be20:	2b1f      	cmp	r3, #31
 800be22:	dc00      	bgt.n	800be26 <_strtod_l+0x646>
 800be24:	e121      	b.n	800c06a <_strtod_l+0x88a>
 800be26:	2600      	movs	r6, #0
 800be28:	2b34      	cmp	r3, #52	; 0x34
 800be2a:	dc00      	bgt.n	800be2e <_strtod_l+0x64e>
 800be2c:	e116      	b.n	800c05c <_strtod_l+0x87c>
 800be2e:	27dc      	movs	r7, #220	; 0xdc
 800be30:	04bf      	lsls	r7, r7, #18
 800be32:	2200      	movs	r2, #0
 800be34:	2300      	movs	r3, #0
 800be36:	0030      	movs	r0, r6
 800be38:	0039      	movs	r1, r7
 800be3a:	f7f4 fb05 	bl	8000448 <__aeabi_dcmpeq>
 800be3e:	2800      	cmp	r0, #0
 800be40:	d19f      	bne.n	800bd82 <_strtod_l+0x5a2>
 800be42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be44:	9a08      	ldr	r2, [sp, #32]
 800be46:	9300      	str	r3, [sp, #0]
 800be48:	9910      	ldr	r1, [sp, #64]	; 0x40
 800be4a:	9b05      	ldr	r3, [sp, #20]
 800be4c:	9804      	ldr	r0, [sp, #16]
 800be4e:	f001 fb01 	bl	800d454 <__s2b>
 800be52:	900d      	str	r0, [sp, #52]	; 0x34
 800be54:	2800      	cmp	r0, #0
 800be56:	d100      	bne.n	800be5a <_strtod_l+0x67a>
 800be58:	e720      	b.n	800bc9c <_strtod_l+0x4bc>
 800be5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be5c:	9906      	ldr	r1, [sp, #24]
 800be5e:	17da      	asrs	r2, r3, #31
 800be60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be62:	1a5b      	subs	r3, r3, r1
 800be64:	401a      	ands	r2, r3
 800be66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be68:	9215      	str	r2, [sp, #84]	; 0x54
 800be6a:	43db      	mvns	r3, r3
 800be6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be6e:	17db      	asrs	r3, r3, #31
 800be70:	401a      	ands	r2, r3
 800be72:	2300      	movs	r3, #0
 800be74:	9218      	str	r2, [sp, #96]	; 0x60
 800be76:	9305      	str	r3, [sp, #20]
 800be78:	9306      	str	r3, [sp, #24]
 800be7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be7c:	9804      	ldr	r0, [sp, #16]
 800be7e:	6859      	ldr	r1, [r3, #4]
 800be80:	f001 fa72 	bl	800d368 <_Balloc>
 800be84:	9008      	str	r0, [sp, #32]
 800be86:	2800      	cmp	r0, #0
 800be88:	d100      	bne.n	800be8c <_strtod_l+0x6ac>
 800be8a:	e70c      	b.n	800bca6 <_strtod_l+0x4c6>
 800be8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be8e:	300c      	adds	r0, #12
 800be90:	0019      	movs	r1, r3
 800be92:	691a      	ldr	r2, [r3, #16]
 800be94:	310c      	adds	r1, #12
 800be96:	3202      	adds	r2, #2
 800be98:	0092      	lsls	r2, r2, #2
 800be9a:	f000 fdca 	bl	800ca32 <memcpy>
 800be9e:	ab1e      	add	r3, sp, #120	; 0x78
 800bea0:	9301      	str	r3, [sp, #4]
 800bea2:	ab1d      	add	r3, sp, #116	; 0x74
 800bea4:	9300      	str	r3, [sp, #0]
 800bea6:	0032      	movs	r2, r6
 800bea8:	003b      	movs	r3, r7
 800beaa:	9804      	ldr	r0, [sp, #16]
 800beac:	9610      	str	r6, [sp, #64]	; 0x40
 800beae:	9711      	str	r7, [sp, #68]	; 0x44
 800beb0:	f001 fdf8 	bl	800daa4 <__d2b>
 800beb4:	901c      	str	r0, [sp, #112]	; 0x70
 800beb6:	2800      	cmp	r0, #0
 800beb8:	d100      	bne.n	800bebc <_strtod_l+0x6dc>
 800beba:	e6f4      	b.n	800bca6 <_strtod_l+0x4c6>
 800bebc:	2101      	movs	r1, #1
 800bebe:	9804      	ldr	r0, [sp, #16]
 800bec0:	f001 fb5c 	bl	800d57c <__i2b>
 800bec4:	9006      	str	r0, [sp, #24]
 800bec6:	2800      	cmp	r0, #0
 800bec8:	d100      	bne.n	800becc <_strtod_l+0x6ec>
 800beca:	e6ec      	b.n	800bca6 <_strtod_l+0x4c6>
 800becc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bece:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bed0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800bed2:	1ad4      	subs	r4, r2, r3
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	db01      	blt.n	800bedc <_strtod_l+0x6fc>
 800bed8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800beda:	195d      	adds	r5, r3, r5
 800bedc:	9907      	ldr	r1, [sp, #28]
 800bede:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800bee0:	1a5b      	subs	r3, r3, r1
 800bee2:	2136      	movs	r1, #54	; 0x36
 800bee4:	189b      	adds	r3, r3, r2
 800bee6:	1a8a      	subs	r2, r1, r2
 800bee8:	4985      	ldr	r1, [pc, #532]	; (800c100 <_strtod_l+0x920>)
 800beea:	2001      	movs	r0, #1
 800beec:	468c      	mov	ip, r1
 800beee:	2100      	movs	r1, #0
 800bef0:	3b01      	subs	r3, #1
 800bef2:	9114      	str	r1, [sp, #80]	; 0x50
 800bef4:	9012      	str	r0, [sp, #72]	; 0x48
 800bef6:	4563      	cmp	r3, ip
 800bef8:	da07      	bge.n	800bf0a <_strtod_l+0x72a>
 800befa:	4661      	mov	r1, ip
 800befc:	1ac9      	subs	r1, r1, r3
 800befe:	1a52      	subs	r2, r2, r1
 800bf00:	291f      	cmp	r1, #31
 800bf02:	dd00      	ble.n	800bf06 <_strtod_l+0x726>
 800bf04:	e0b6      	b.n	800c074 <_strtod_l+0x894>
 800bf06:	4088      	lsls	r0, r1
 800bf08:	9012      	str	r0, [sp, #72]	; 0x48
 800bf0a:	18ab      	adds	r3, r5, r2
 800bf0c:	930c      	str	r3, [sp, #48]	; 0x30
 800bf0e:	18a4      	adds	r4, r4, r2
 800bf10:	9b07      	ldr	r3, [sp, #28]
 800bf12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf14:	191c      	adds	r4, r3, r4
 800bf16:	002b      	movs	r3, r5
 800bf18:	4295      	cmp	r5, r2
 800bf1a:	dd00      	ble.n	800bf1e <_strtod_l+0x73e>
 800bf1c:	0013      	movs	r3, r2
 800bf1e:	42a3      	cmp	r3, r4
 800bf20:	dd00      	ble.n	800bf24 <_strtod_l+0x744>
 800bf22:	0023      	movs	r3, r4
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	dd04      	ble.n	800bf32 <_strtod_l+0x752>
 800bf28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf2a:	1ae4      	subs	r4, r4, r3
 800bf2c:	1ad2      	subs	r2, r2, r3
 800bf2e:	920c      	str	r2, [sp, #48]	; 0x30
 800bf30:	1aed      	subs	r5, r5, r3
 800bf32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	dd17      	ble.n	800bf68 <_strtod_l+0x788>
 800bf38:	001a      	movs	r2, r3
 800bf3a:	9906      	ldr	r1, [sp, #24]
 800bf3c:	9804      	ldr	r0, [sp, #16]
 800bf3e:	f001 fbe5 	bl	800d70c <__pow5mult>
 800bf42:	9006      	str	r0, [sp, #24]
 800bf44:	2800      	cmp	r0, #0
 800bf46:	d100      	bne.n	800bf4a <_strtod_l+0x76a>
 800bf48:	e6ad      	b.n	800bca6 <_strtod_l+0x4c6>
 800bf4a:	0001      	movs	r1, r0
 800bf4c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bf4e:	9804      	ldr	r0, [sp, #16]
 800bf50:	f001 fb2c 	bl	800d5ac <__multiply>
 800bf54:	900e      	str	r0, [sp, #56]	; 0x38
 800bf56:	2800      	cmp	r0, #0
 800bf58:	d100      	bne.n	800bf5c <_strtod_l+0x77c>
 800bf5a:	e6a4      	b.n	800bca6 <_strtod_l+0x4c6>
 800bf5c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bf5e:	9804      	ldr	r0, [sp, #16]
 800bf60:	f001 fa2a 	bl	800d3b8 <_Bfree>
 800bf64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf66:	931c      	str	r3, [sp, #112]	; 0x70
 800bf68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	dd00      	ble.n	800bf70 <_strtod_l+0x790>
 800bf6e:	e087      	b.n	800c080 <_strtod_l+0x8a0>
 800bf70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	dd08      	ble.n	800bf88 <_strtod_l+0x7a8>
 800bf76:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bf78:	9908      	ldr	r1, [sp, #32]
 800bf7a:	9804      	ldr	r0, [sp, #16]
 800bf7c:	f001 fbc6 	bl	800d70c <__pow5mult>
 800bf80:	9008      	str	r0, [sp, #32]
 800bf82:	2800      	cmp	r0, #0
 800bf84:	d100      	bne.n	800bf88 <_strtod_l+0x7a8>
 800bf86:	e68e      	b.n	800bca6 <_strtod_l+0x4c6>
 800bf88:	2c00      	cmp	r4, #0
 800bf8a:	dd08      	ble.n	800bf9e <_strtod_l+0x7be>
 800bf8c:	0022      	movs	r2, r4
 800bf8e:	9908      	ldr	r1, [sp, #32]
 800bf90:	9804      	ldr	r0, [sp, #16]
 800bf92:	f001 fbfd 	bl	800d790 <__lshift>
 800bf96:	9008      	str	r0, [sp, #32]
 800bf98:	2800      	cmp	r0, #0
 800bf9a:	d100      	bne.n	800bf9e <_strtod_l+0x7be>
 800bf9c:	e683      	b.n	800bca6 <_strtod_l+0x4c6>
 800bf9e:	2d00      	cmp	r5, #0
 800bfa0:	dd08      	ble.n	800bfb4 <_strtod_l+0x7d4>
 800bfa2:	002a      	movs	r2, r5
 800bfa4:	9906      	ldr	r1, [sp, #24]
 800bfa6:	9804      	ldr	r0, [sp, #16]
 800bfa8:	f001 fbf2 	bl	800d790 <__lshift>
 800bfac:	9006      	str	r0, [sp, #24]
 800bfae:	2800      	cmp	r0, #0
 800bfb0:	d100      	bne.n	800bfb4 <_strtod_l+0x7d4>
 800bfb2:	e678      	b.n	800bca6 <_strtod_l+0x4c6>
 800bfb4:	9a08      	ldr	r2, [sp, #32]
 800bfb6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bfb8:	9804      	ldr	r0, [sp, #16]
 800bfba:	f001 fc73 	bl	800d8a4 <__mdiff>
 800bfbe:	9005      	str	r0, [sp, #20]
 800bfc0:	2800      	cmp	r0, #0
 800bfc2:	d100      	bne.n	800bfc6 <_strtod_l+0x7e6>
 800bfc4:	e66f      	b.n	800bca6 <_strtod_l+0x4c6>
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	68c3      	ldr	r3, [r0, #12]
 800bfca:	9906      	ldr	r1, [sp, #24]
 800bfcc:	60c2      	str	r2, [r0, #12]
 800bfce:	930c      	str	r3, [sp, #48]	; 0x30
 800bfd0:	f001 fc4c 	bl	800d86c <__mcmp>
 800bfd4:	2800      	cmp	r0, #0
 800bfd6:	da5d      	bge.n	800c094 <_strtod_l+0x8b4>
 800bfd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bfda:	4333      	orrs	r3, r6
 800bfdc:	d000      	beq.n	800bfe0 <_strtod_l+0x800>
 800bfde:	e088      	b.n	800c0f2 <_strtod_l+0x912>
 800bfe0:	033b      	lsls	r3, r7, #12
 800bfe2:	d000      	beq.n	800bfe6 <_strtod_l+0x806>
 800bfe4:	e085      	b.n	800c0f2 <_strtod_l+0x912>
 800bfe6:	22d6      	movs	r2, #214	; 0xd6
 800bfe8:	4b46      	ldr	r3, [pc, #280]	; (800c104 <_strtod_l+0x924>)
 800bfea:	04d2      	lsls	r2, r2, #19
 800bfec:	403b      	ands	r3, r7
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d97f      	bls.n	800c0f2 <_strtod_l+0x912>
 800bff2:	9b05      	ldr	r3, [sp, #20]
 800bff4:	695b      	ldr	r3, [r3, #20]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d103      	bne.n	800c002 <_strtod_l+0x822>
 800bffa:	9b05      	ldr	r3, [sp, #20]
 800bffc:	691b      	ldr	r3, [r3, #16]
 800bffe:	2b01      	cmp	r3, #1
 800c000:	dd77      	ble.n	800c0f2 <_strtod_l+0x912>
 800c002:	9905      	ldr	r1, [sp, #20]
 800c004:	2201      	movs	r2, #1
 800c006:	9804      	ldr	r0, [sp, #16]
 800c008:	f001 fbc2 	bl	800d790 <__lshift>
 800c00c:	9906      	ldr	r1, [sp, #24]
 800c00e:	9005      	str	r0, [sp, #20]
 800c010:	f001 fc2c 	bl	800d86c <__mcmp>
 800c014:	2800      	cmp	r0, #0
 800c016:	dd6c      	ble.n	800c0f2 <_strtod_l+0x912>
 800c018:	9907      	ldr	r1, [sp, #28]
 800c01a:	003b      	movs	r3, r7
 800c01c:	4a39      	ldr	r2, [pc, #228]	; (800c104 <_strtod_l+0x924>)
 800c01e:	2900      	cmp	r1, #0
 800c020:	d100      	bne.n	800c024 <_strtod_l+0x844>
 800c022:	e094      	b.n	800c14e <_strtod_l+0x96e>
 800c024:	0011      	movs	r1, r2
 800c026:	20d6      	movs	r0, #214	; 0xd6
 800c028:	4039      	ands	r1, r7
 800c02a:	04c0      	lsls	r0, r0, #19
 800c02c:	4281      	cmp	r1, r0
 800c02e:	dd00      	ble.n	800c032 <_strtod_l+0x852>
 800c030:	e08d      	b.n	800c14e <_strtod_l+0x96e>
 800c032:	23dc      	movs	r3, #220	; 0xdc
 800c034:	049b      	lsls	r3, r3, #18
 800c036:	4299      	cmp	r1, r3
 800c038:	dc00      	bgt.n	800c03c <_strtod_l+0x85c>
 800c03a:	e6a7      	b.n	800bd8c <_strtod_l+0x5ac>
 800c03c:	0030      	movs	r0, r6
 800c03e:	0039      	movs	r1, r7
 800c040:	4b31      	ldr	r3, [pc, #196]	; (800c108 <_strtod_l+0x928>)
 800c042:	2200      	movs	r2, #0
 800c044:	f7f5 fb12 	bl	800166c <__aeabi_dmul>
 800c048:	4b2e      	ldr	r3, [pc, #184]	; (800c104 <_strtod_l+0x924>)
 800c04a:	0006      	movs	r6, r0
 800c04c:	000f      	movs	r7, r1
 800c04e:	420b      	tst	r3, r1
 800c050:	d000      	beq.n	800c054 <_strtod_l+0x874>
 800c052:	e631      	b.n	800bcb8 <_strtod_l+0x4d8>
 800c054:	2322      	movs	r3, #34	; 0x22
 800c056:	9a04      	ldr	r2, [sp, #16]
 800c058:	6013      	str	r3, [r2, #0]
 800c05a:	e62d      	b.n	800bcb8 <_strtod_l+0x4d8>
 800c05c:	234b      	movs	r3, #75	; 0x4b
 800c05e:	1a9a      	subs	r2, r3, r2
 800c060:	3b4c      	subs	r3, #76	; 0x4c
 800c062:	4093      	lsls	r3, r2
 800c064:	4019      	ands	r1, r3
 800c066:	000f      	movs	r7, r1
 800c068:	e6e3      	b.n	800be32 <_strtod_l+0x652>
 800c06a:	2201      	movs	r2, #1
 800c06c:	4252      	negs	r2, r2
 800c06e:	409a      	lsls	r2, r3
 800c070:	4016      	ands	r6, r2
 800c072:	e6de      	b.n	800be32 <_strtod_l+0x652>
 800c074:	4925      	ldr	r1, [pc, #148]	; (800c10c <_strtod_l+0x92c>)
 800c076:	1acb      	subs	r3, r1, r3
 800c078:	0001      	movs	r1, r0
 800c07a:	4099      	lsls	r1, r3
 800c07c:	9114      	str	r1, [sp, #80]	; 0x50
 800c07e:	e743      	b.n	800bf08 <_strtod_l+0x728>
 800c080:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c082:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c084:	9804      	ldr	r0, [sp, #16]
 800c086:	f001 fb83 	bl	800d790 <__lshift>
 800c08a:	901c      	str	r0, [sp, #112]	; 0x70
 800c08c:	2800      	cmp	r0, #0
 800c08e:	d000      	beq.n	800c092 <_strtod_l+0x8b2>
 800c090:	e76e      	b.n	800bf70 <_strtod_l+0x790>
 800c092:	e608      	b.n	800bca6 <_strtod_l+0x4c6>
 800c094:	970e      	str	r7, [sp, #56]	; 0x38
 800c096:	2800      	cmp	r0, #0
 800c098:	d177      	bne.n	800c18a <_strtod_l+0x9aa>
 800c09a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c09c:	033b      	lsls	r3, r7, #12
 800c09e:	0b1b      	lsrs	r3, r3, #12
 800c0a0:	2a00      	cmp	r2, #0
 800c0a2:	d039      	beq.n	800c118 <_strtod_l+0x938>
 800c0a4:	4a1a      	ldr	r2, [pc, #104]	; (800c110 <_strtod_l+0x930>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d139      	bne.n	800c11e <_strtod_l+0x93e>
 800c0aa:	2101      	movs	r1, #1
 800c0ac:	9b07      	ldr	r3, [sp, #28]
 800c0ae:	4249      	negs	r1, r1
 800c0b0:	0032      	movs	r2, r6
 800c0b2:	0008      	movs	r0, r1
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d00b      	beq.n	800c0d0 <_strtod_l+0x8f0>
 800c0b8:	24d4      	movs	r4, #212	; 0xd4
 800c0ba:	4b12      	ldr	r3, [pc, #72]	; (800c104 <_strtod_l+0x924>)
 800c0bc:	0008      	movs	r0, r1
 800c0be:	403b      	ands	r3, r7
 800c0c0:	04e4      	lsls	r4, r4, #19
 800c0c2:	42a3      	cmp	r3, r4
 800c0c4:	d804      	bhi.n	800c0d0 <_strtod_l+0x8f0>
 800c0c6:	306c      	adds	r0, #108	; 0x6c
 800c0c8:	0d1b      	lsrs	r3, r3, #20
 800c0ca:	1ac3      	subs	r3, r0, r3
 800c0cc:	4099      	lsls	r1, r3
 800c0ce:	0008      	movs	r0, r1
 800c0d0:	4282      	cmp	r2, r0
 800c0d2:	d124      	bne.n	800c11e <_strtod_l+0x93e>
 800c0d4:	4b0f      	ldr	r3, [pc, #60]	; (800c114 <_strtod_l+0x934>)
 800c0d6:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c0d8:	4299      	cmp	r1, r3
 800c0da:	d102      	bne.n	800c0e2 <_strtod_l+0x902>
 800c0dc:	3201      	adds	r2, #1
 800c0de:	d100      	bne.n	800c0e2 <_strtod_l+0x902>
 800c0e0:	e5e1      	b.n	800bca6 <_strtod_l+0x4c6>
 800c0e2:	4b08      	ldr	r3, [pc, #32]	; (800c104 <_strtod_l+0x924>)
 800c0e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c0e6:	2600      	movs	r6, #0
 800c0e8:	401a      	ands	r2, r3
 800c0ea:	0013      	movs	r3, r2
 800c0ec:	2280      	movs	r2, #128	; 0x80
 800c0ee:	0352      	lsls	r2, r2, #13
 800c0f0:	189f      	adds	r7, r3, r2
 800c0f2:	9b07      	ldr	r3, [sp, #28]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d1a1      	bne.n	800c03c <_strtod_l+0x85c>
 800c0f8:	e5de      	b.n	800bcb8 <_strtod_l+0x4d8>
 800c0fa:	46c0      	nop			; (mov r8, r8)
 800c0fc:	08014ea8 	.word	0x08014ea8
 800c100:	fffffc02 	.word	0xfffffc02
 800c104:	7ff00000 	.word	0x7ff00000
 800c108:	39500000 	.word	0x39500000
 800c10c:	fffffbe2 	.word	0xfffffbe2
 800c110:	000fffff 	.word	0x000fffff
 800c114:	7fefffff 	.word	0x7fefffff
 800c118:	4333      	orrs	r3, r6
 800c11a:	d100      	bne.n	800c11e <_strtod_l+0x93e>
 800c11c:	e77c      	b.n	800c018 <_strtod_l+0x838>
 800c11e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c120:	2b00      	cmp	r3, #0
 800c122:	d01d      	beq.n	800c160 <_strtod_l+0x980>
 800c124:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c126:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c128:	4213      	tst	r3, r2
 800c12a:	d0e2      	beq.n	800c0f2 <_strtod_l+0x912>
 800c12c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c12e:	0030      	movs	r0, r6
 800c130:	0039      	movs	r1, r7
 800c132:	9a07      	ldr	r2, [sp, #28]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d017      	beq.n	800c168 <_strtod_l+0x988>
 800c138:	f7ff fb3a 	bl	800b7b0 <sulp>
 800c13c:	0002      	movs	r2, r0
 800c13e:	000b      	movs	r3, r1
 800c140:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c142:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c144:	f7f4 fb38 	bl	80007b8 <__aeabi_dadd>
 800c148:	0006      	movs	r6, r0
 800c14a:	000f      	movs	r7, r1
 800c14c:	e7d1      	b.n	800c0f2 <_strtod_l+0x912>
 800c14e:	2601      	movs	r6, #1
 800c150:	4013      	ands	r3, r2
 800c152:	4a98      	ldr	r2, [pc, #608]	; (800c3b4 <_strtod_l+0xbd4>)
 800c154:	4276      	negs	r6, r6
 800c156:	189b      	adds	r3, r3, r2
 800c158:	4a97      	ldr	r2, [pc, #604]	; (800c3b8 <_strtod_l+0xbd8>)
 800c15a:	431a      	orrs	r2, r3
 800c15c:	0017      	movs	r7, r2
 800c15e:	e7c8      	b.n	800c0f2 <_strtod_l+0x912>
 800c160:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c162:	4233      	tst	r3, r6
 800c164:	d0c5      	beq.n	800c0f2 <_strtod_l+0x912>
 800c166:	e7e1      	b.n	800c12c <_strtod_l+0x94c>
 800c168:	f7ff fb22 	bl	800b7b0 <sulp>
 800c16c:	0002      	movs	r2, r0
 800c16e:	000b      	movs	r3, r1
 800c170:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c172:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c174:	f7f5 fd3c 	bl	8001bf0 <__aeabi_dsub>
 800c178:	2200      	movs	r2, #0
 800c17a:	2300      	movs	r3, #0
 800c17c:	0006      	movs	r6, r0
 800c17e:	000f      	movs	r7, r1
 800c180:	f7f4 f962 	bl	8000448 <__aeabi_dcmpeq>
 800c184:	2800      	cmp	r0, #0
 800c186:	d0b4      	beq.n	800c0f2 <_strtod_l+0x912>
 800c188:	e600      	b.n	800bd8c <_strtod_l+0x5ac>
 800c18a:	9906      	ldr	r1, [sp, #24]
 800c18c:	9805      	ldr	r0, [sp, #20]
 800c18e:	f001 fce9 	bl	800db64 <__ratio>
 800c192:	2380      	movs	r3, #128	; 0x80
 800c194:	2200      	movs	r2, #0
 800c196:	05db      	lsls	r3, r3, #23
 800c198:	0004      	movs	r4, r0
 800c19a:	000d      	movs	r5, r1
 800c19c:	f7f4 f964 	bl	8000468 <__aeabi_dcmple>
 800c1a0:	2800      	cmp	r0, #0
 800c1a2:	d06d      	beq.n	800c280 <_strtod_l+0xaa0>
 800c1a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d000      	beq.n	800c1ac <_strtod_l+0x9cc>
 800c1aa:	e07e      	b.n	800c2aa <_strtod_l+0xaca>
 800c1ac:	2e00      	cmp	r6, #0
 800c1ae:	d158      	bne.n	800c262 <_strtod_l+0xa82>
 800c1b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1b2:	031b      	lsls	r3, r3, #12
 800c1b4:	d000      	beq.n	800c1b8 <_strtod_l+0x9d8>
 800c1b6:	e07f      	b.n	800c2b8 <_strtod_l+0xad8>
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	0020      	movs	r0, r4
 800c1bc:	0029      	movs	r1, r5
 800c1be:	4b7f      	ldr	r3, [pc, #508]	; (800c3bc <_strtod_l+0xbdc>)
 800c1c0:	f7f4 f948 	bl	8000454 <__aeabi_dcmplt>
 800c1c4:	2800      	cmp	r0, #0
 800c1c6:	d158      	bne.n	800c27a <_strtod_l+0xa9a>
 800c1c8:	0020      	movs	r0, r4
 800c1ca:	0029      	movs	r1, r5
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	4b7c      	ldr	r3, [pc, #496]	; (800c3c0 <_strtod_l+0xbe0>)
 800c1d0:	f7f5 fa4c 	bl	800166c <__aeabi_dmul>
 800c1d4:	0004      	movs	r4, r0
 800c1d6:	000d      	movs	r5, r1
 800c1d8:	2380      	movs	r3, #128	; 0x80
 800c1da:	061b      	lsls	r3, r3, #24
 800c1dc:	940a      	str	r4, [sp, #40]	; 0x28
 800c1de:	18eb      	adds	r3, r5, r3
 800c1e0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c1e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1e6:	9212      	str	r2, [sp, #72]	; 0x48
 800c1e8:	9313      	str	r3, [sp, #76]	; 0x4c
 800c1ea:	4a76      	ldr	r2, [pc, #472]	; (800c3c4 <_strtod_l+0xbe4>)
 800c1ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1ee:	4013      	ands	r3, r2
 800c1f0:	9314      	str	r3, [sp, #80]	; 0x50
 800c1f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c1f4:	4b74      	ldr	r3, [pc, #464]	; (800c3c8 <_strtod_l+0xbe8>)
 800c1f6:	429a      	cmp	r2, r3
 800c1f8:	d000      	beq.n	800c1fc <_strtod_l+0xa1c>
 800c1fa:	e091      	b.n	800c320 <_strtod_l+0xb40>
 800c1fc:	4a73      	ldr	r2, [pc, #460]	; (800c3cc <_strtod_l+0xbec>)
 800c1fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c200:	4694      	mov	ip, r2
 800c202:	4463      	add	r3, ip
 800c204:	001f      	movs	r7, r3
 800c206:	0030      	movs	r0, r6
 800c208:	0019      	movs	r1, r3
 800c20a:	f001 fbe3 	bl	800d9d4 <__ulp>
 800c20e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c212:	f7f5 fa2b 	bl	800166c <__aeabi_dmul>
 800c216:	0032      	movs	r2, r6
 800c218:	003b      	movs	r3, r7
 800c21a:	f7f4 facd 	bl	80007b8 <__aeabi_dadd>
 800c21e:	4a69      	ldr	r2, [pc, #420]	; (800c3c4 <_strtod_l+0xbe4>)
 800c220:	4b6b      	ldr	r3, [pc, #428]	; (800c3d0 <_strtod_l+0xbf0>)
 800c222:	0006      	movs	r6, r0
 800c224:	400a      	ands	r2, r1
 800c226:	429a      	cmp	r2, r3
 800c228:	d949      	bls.n	800c2be <_strtod_l+0xade>
 800c22a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c22c:	4b69      	ldr	r3, [pc, #420]	; (800c3d4 <_strtod_l+0xbf4>)
 800c22e:	429a      	cmp	r2, r3
 800c230:	d103      	bne.n	800c23a <_strtod_l+0xa5a>
 800c232:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c234:	3301      	adds	r3, #1
 800c236:	d100      	bne.n	800c23a <_strtod_l+0xa5a>
 800c238:	e535      	b.n	800bca6 <_strtod_l+0x4c6>
 800c23a:	2601      	movs	r6, #1
 800c23c:	4f65      	ldr	r7, [pc, #404]	; (800c3d4 <_strtod_l+0xbf4>)
 800c23e:	4276      	negs	r6, r6
 800c240:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c242:	9804      	ldr	r0, [sp, #16]
 800c244:	f001 f8b8 	bl	800d3b8 <_Bfree>
 800c248:	9908      	ldr	r1, [sp, #32]
 800c24a:	9804      	ldr	r0, [sp, #16]
 800c24c:	f001 f8b4 	bl	800d3b8 <_Bfree>
 800c250:	9906      	ldr	r1, [sp, #24]
 800c252:	9804      	ldr	r0, [sp, #16]
 800c254:	f001 f8b0 	bl	800d3b8 <_Bfree>
 800c258:	9905      	ldr	r1, [sp, #20]
 800c25a:	9804      	ldr	r0, [sp, #16]
 800c25c:	f001 f8ac 	bl	800d3b8 <_Bfree>
 800c260:	e60b      	b.n	800be7a <_strtod_l+0x69a>
 800c262:	2e01      	cmp	r6, #1
 800c264:	d103      	bne.n	800c26e <_strtod_l+0xa8e>
 800c266:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d100      	bne.n	800c26e <_strtod_l+0xa8e>
 800c26c:	e58e      	b.n	800bd8c <_strtod_l+0x5ac>
 800c26e:	2300      	movs	r3, #0
 800c270:	4c59      	ldr	r4, [pc, #356]	; (800c3d8 <_strtod_l+0xbf8>)
 800c272:	930a      	str	r3, [sp, #40]	; 0x28
 800c274:	940b      	str	r4, [sp, #44]	; 0x2c
 800c276:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800c278:	e01c      	b.n	800c2b4 <_strtod_l+0xad4>
 800c27a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800c27c:	4d50      	ldr	r5, [pc, #320]	; (800c3c0 <_strtod_l+0xbe0>)
 800c27e:	e7ab      	b.n	800c1d8 <_strtod_l+0x9f8>
 800c280:	2200      	movs	r2, #0
 800c282:	0020      	movs	r0, r4
 800c284:	0029      	movs	r1, r5
 800c286:	4b4e      	ldr	r3, [pc, #312]	; (800c3c0 <_strtod_l+0xbe0>)
 800c288:	f7f5 f9f0 	bl	800166c <__aeabi_dmul>
 800c28c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c28e:	0004      	movs	r4, r0
 800c290:	000b      	movs	r3, r1
 800c292:	000d      	movs	r5, r1
 800c294:	2a00      	cmp	r2, #0
 800c296:	d104      	bne.n	800c2a2 <_strtod_l+0xac2>
 800c298:	2280      	movs	r2, #128	; 0x80
 800c29a:	0612      	lsls	r2, r2, #24
 800c29c:	900a      	str	r0, [sp, #40]	; 0x28
 800c29e:	188b      	adds	r3, r1, r2
 800c2a0:	e79e      	b.n	800c1e0 <_strtod_l+0xa00>
 800c2a2:	0002      	movs	r2, r0
 800c2a4:	920a      	str	r2, [sp, #40]	; 0x28
 800c2a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c2a8:	e79b      	b.n	800c1e2 <_strtod_l+0xa02>
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	4c43      	ldr	r4, [pc, #268]	; (800c3bc <_strtod_l+0xbdc>)
 800c2ae:	930a      	str	r3, [sp, #40]	; 0x28
 800c2b0:	940b      	str	r4, [sp, #44]	; 0x2c
 800c2b2:	2400      	movs	r4, #0
 800c2b4:	4d41      	ldr	r5, [pc, #260]	; (800c3bc <_strtod_l+0xbdc>)
 800c2b6:	e794      	b.n	800c1e2 <_strtod_l+0xa02>
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	4c47      	ldr	r4, [pc, #284]	; (800c3d8 <_strtod_l+0xbf8>)
 800c2bc:	e7f7      	b.n	800c2ae <_strtod_l+0xace>
 800c2be:	23d4      	movs	r3, #212	; 0xd4
 800c2c0:	049b      	lsls	r3, r3, #18
 800c2c2:	18cf      	adds	r7, r1, r3
 800c2c4:	9b07      	ldr	r3, [sp, #28]
 800c2c6:	970e      	str	r7, [sp, #56]	; 0x38
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d1b9      	bne.n	800c240 <_strtod_l+0xa60>
 800c2cc:	4b3d      	ldr	r3, [pc, #244]	; (800c3c4 <_strtod_l+0xbe4>)
 800c2ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c2d0:	403b      	ands	r3, r7
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d1b4      	bne.n	800c240 <_strtod_l+0xa60>
 800c2d6:	0020      	movs	r0, r4
 800c2d8:	0029      	movs	r1, r5
 800c2da:	f7f4 f94f 	bl	800057c <__aeabi_d2lz>
 800c2de:	f7f4 f989 	bl	80005f4 <__aeabi_l2d>
 800c2e2:	0002      	movs	r2, r0
 800c2e4:	000b      	movs	r3, r1
 800c2e6:	0020      	movs	r0, r4
 800c2e8:	0029      	movs	r1, r5
 800c2ea:	f7f5 fc81 	bl	8001bf0 <__aeabi_dsub>
 800c2ee:	033b      	lsls	r3, r7, #12
 800c2f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c2f2:	0b1b      	lsrs	r3, r3, #12
 800c2f4:	4333      	orrs	r3, r6
 800c2f6:	4313      	orrs	r3, r2
 800c2f8:	0004      	movs	r4, r0
 800c2fa:	000d      	movs	r5, r1
 800c2fc:	4a37      	ldr	r2, [pc, #220]	; (800c3dc <_strtod_l+0xbfc>)
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d054      	beq.n	800c3ac <_strtod_l+0xbcc>
 800c302:	4b37      	ldr	r3, [pc, #220]	; (800c3e0 <_strtod_l+0xc00>)
 800c304:	f7f4 f8a6 	bl	8000454 <__aeabi_dcmplt>
 800c308:	2800      	cmp	r0, #0
 800c30a:	d000      	beq.n	800c30e <_strtod_l+0xb2e>
 800c30c:	e4d4      	b.n	800bcb8 <_strtod_l+0x4d8>
 800c30e:	0020      	movs	r0, r4
 800c310:	0029      	movs	r1, r5
 800c312:	4a34      	ldr	r2, [pc, #208]	; (800c3e4 <_strtod_l+0xc04>)
 800c314:	4b2a      	ldr	r3, [pc, #168]	; (800c3c0 <_strtod_l+0xbe0>)
 800c316:	f7f4 f8b1 	bl	800047c <__aeabi_dcmpgt>
 800c31a:	2800      	cmp	r0, #0
 800c31c:	d090      	beq.n	800c240 <_strtod_l+0xa60>
 800c31e:	e4cb      	b.n	800bcb8 <_strtod_l+0x4d8>
 800c320:	9b07      	ldr	r3, [sp, #28]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d02b      	beq.n	800c37e <_strtod_l+0xb9e>
 800c326:	23d4      	movs	r3, #212	; 0xd4
 800c328:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c32a:	04db      	lsls	r3, r3, #19
 800c32c:	429a      	cmp	r2, r3
 800c32e:	d826      	bhi.n	800c37e <_strtod_l+0xb9e>
 800c330:	0020      	movs	r0, r4
 800c332:	0029      	movs	r1, r5
 800c334:	4a2c      	ldr	r2, [pc, #176]	; (800c3e8 <_strtod_l+0xc08>)
 800c336:	4b2d      	ldr	r3, [pc, #180]	; (800c3ec <_strtod_l+0xc0c>)
 800c338:	f7f4 f896 	bl	8000468 <__aeabi_dcmple>
 800c33c:	2800      	cmp	r0, #0
 800c33e:	d017      	beq.n	800c370 <_strtod_l+0xb90>
 800c340:	0020      	movs	r0, r4
 800c342:	0029      	movs	r1, r5
 800c344:	f7f4 f8fc 	bl	8000540 <__aeabi_d2uiz>
 800c348:	2800      	cmp	r0, #0
 800c34a:	d100      	bne.n	800c34e <_strtod_l+0xb6e>
 800c34c:	3001      	adds	r0, #1
 800c34e:	f7f6 f855 	bl	80023fc <__aeabi_ui2d>
 800c352:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c354:	0004      	movs	r4, r0
 800c356:	000b      	movs	r3, r1
 800c358:	000d      	movs	r5, r1
 800c35a:	2a00      	cmp	r2, #0
 800c35c:	d122      	bne.n	800c3a4 <_strtod_l+0xbc4>
 800c35e:	2280      	movs	r2, #128	; 0x80
 800c360:	0612      	lsls	r2, r2, #24
 800c362:	188b      	adds	r3, r1, r2
 800c364:	9016      	str	r0, [sp, #88]	; 0x58
 800c366:	9317      	str	r3, [sp, #92]	; 0x5c
 800c368:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c36a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c36c:	9212      	str	r2, [sp, #72]	; 0x48
 800c36e:	9313      	str	r3, [sp, #76]	; 0x4c
 800c370:	22d6      	movs	r2, #214	; 0xd6
 800c372:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c374:	04d2      	lsls	r2, r2, #19
 800c376:	189b      	adds	r3, r3, r2
 800c378:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c37a:	1a9b      	subs	r3, r3, r2
 800c37c:	9313      	str	r3, [sp, #76]	; 0x4c
 800c37e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c380:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c382:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800c384:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800c386:	f001 fb25 	bl	800d9d4 <__ulp>
 800c38a:	0002      	movs	r2, r0
 800c38c:	000b      	movs	r3, r1
 800c38e:	0030      	movs	r0, r6
 800c390:	0039      	movs	r1, r7
 800c392:	f7f5 f96b 	bl	800166c <__aeabi_dmul>
 800c396:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c398:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c39a:	f7f4 fa0d 	bl	80007b8 <__aeabi_dadd>
 800c39e:	0006      	movs	r6, r0
 800c3a0:	000f      	movs	r7, r1
 800c3a2:	e78f      	b.n	800c2c4 <_strtod_l+0xae4>
 800c3a4:	0002      	movs	r2, r0
 800c3a6:	9216      	str	r2, [sp, #88]	; 0x58
 800c3a8:	9317      	str	r3, [sp, #92]	; 0x5c
 800c3aa:	e7dd      	b.n	800c368 <_strtod_l+0xb88>
 800c3ac:	4b10      	ldr	r3, [pc, #64]	; (800c3f0 <_strtod_l+0xc10>)
 800c3ae:	f7f4 f851 	bl	8000454 <__aeabi_dcmplt>
 800c3b2:	e7b2      	b.n	800c31a <_strtod_l+0xb3a>
 800c3b4:	fff00000 	.word	0xfff00000
 800c3b8:	000fffff 	.word	0x000fffff
 800c3bc:	3ff00000 	.word	0x3ff00000
 800c3c0:	3fe00000 	.word	0x3fe00000
 800c3c4:	7ff00000 	.word	0x7ff00000
 800c3c8:	7fe00000 	.word	0x7fe00000
 800c3cc:	fcb00000 	.word	0xfcb00000
 800c3d0:	7c9fffff 	.word	0x7c9fffff
 800c3d4:	7fefffff 	.word	0x7fefffff
 800c3d8:	bff00000 	.word	0xbff00000
 800c3dc:	94a03595 	.word	0x94a03595
 800c3e0:	3fdfffff 	.word	0x3fdfffff
 800c3e4:	35afe535 	.word	0x35afe535
 800c3e8:	ffc00000 	.word	0xffc00000
 800c3ec:	41dfffff 	.word	0x41dfffff
 800c3f0:	3fcfffff 	.word	0x3fcfffff

0800c3f4 <_strtod_r>:
 800c3f4:	b510      	push	{r4, lr}
 800c3f6:	4b02      	ldr	r3, [pc, #8]	; (800c400 <_strtod_r+0xc>)
 800c3f8:	f7ff f9f2 	bl	800b7e0 <_strtod_l>
 800c3fc:	bd10      	pop	{r4, pc}
 800c3fe:	46c0      	nop			; (mov r8, r8)
 800c400:	2000044c 	.word	0x2000044c

0800c404 <strtod>:
 800c404:	b510      	push	{r4, lr}
 800c406:	4c04      	ldr	r4, [pc, #16]	; (800c418 <strtod+0x14>)
 800c408:	000a      	movs	r2, r1
 800c40a:	0001      	movs	r1, r0
 800c40c:	4b03      	ldr	r3, [pc, #12]	; (800c41c <strtod+0x18>)
 800c40e:	6820      	ldr	r0, [r4, #0]
 800c410:	f7ff f9e6 	bl	800b7e0 <_strtod_l>
 800c414:	bd10      	pop	{r4, pc}
 800c416:	46c0      	nop			; (mov r8, r8)
 800c418:	200006d8 	.word	0x200006d8
 800c41c:	2000044c 	.word	0x2000044c

0800c420 <_strtol_l.constprop.0>:
 800c420:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c422:	b087      	sub	sp, #28
 800c424:	001e      	movs	r6, r3
 800c426:	9005      	str	r0, [sp, #20]
 800c428:	9101      	str	r1, [sp, #4]
 800c42a:	9202      	str	r2, [sp, #8]
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	d048      	beq.n	800c4c2 <_strtol_l.constprop.0+0xa2>
 800c430:	000b      	movs	r3, r1
 800c432:	2e24      	cmp	r6, #36	; 0x24
 800c434:	d845      	bhi.n	800c4c2 <_strtol_l.constprop.0+0xa2>
 800c436:	4a3b      	ldr	r2, [pc, #236]	; (800c524 <_strtol_l.constprop.0+0x104>)
 800c438:	2108      	movs	r1, #8
 800c43a:	4694      	mov	ip, r2
 800c43c:	001a      	movs	r2, r3
 800c43e:	4660      	mov	r0, ip
 800c440:	7814      	ldrb	r4, [r2, #0]
 800c442:	3301      	adds	r3, #1
 800c444:	5d00      	ldrb	r0, [r0, r4]
 800c446:	001d      	movs	r5, r3
 800c448:	0007      	movs	r7, r0
 800c44a:	400f      	ands	r7, r1
 800c44c:	4208      	tst	r0, r1
 800c44e:	d1f5      	bne.n	800c43c <_strtol_l.constprop.0+0x1c>
 800c450:	2c2d      	cmp	r4, #45	; 0x2d
 800c452:	d13d      	bne.n	800c4d0 <_strtol_l.constprop.0+0xb0>
 800c454:	2701      	movs	r7, #1
 800c456:	781c      	ldrb	r4, [r3, #0]
 800c458:	1c95      	adds	r5, r2, #2
 800c45a:	2e00      	cmp	r6, #0
 800c45c:	d05e      	beq.n	800c51c <_strtol_l.constprop.0+0xfc>
 800c45e:	2e10      	cmp	r6, #16
 800c460:	d109      	bne.n	800c476 <_strtol_l.constprop.0+0x56>
 800c462:	2c30      	cmp	r4, #48	; 0x30
 800c464:	d107      	bne.n	800c476 <_strtol_l.constprop.0+0x56>
 800c466:	2220      	movs	r2, #32
 800c468:	782b      	ldrb	r3, [r5, #0]
 800c46a:	4393      	bics	r3, r2
 800c46c:	2b58      	cmp	r3, #88	; 0x58
 800c46e:	d150      	bne.n	800c512 <_strtol_l.constprop.0+0xf2>
 800c470:	2610      	movs	r6, #16
 800c472:	786c      	ldrb	r4, [r5, #1]
 800c474:	3502      	adds	r5, #2
 800c476:	4b2c      	ldr	r3, [pc, #176]	; (800c528 <_strtol_l.constprop.0+0x108>)
 800c478:	0031      	movs	r1, r6
 800c47a:	18fb      	adds	r3, r7, r3
 800c47c:	0018      	movs	r0, r3
 800c47e:	9303      	str	r3, [sp, #12]
 800c480:	f7f3 fee2 	bl	8000248 <__aeabi_uidivmod>
 800c484:	2200      	movs	r2, #0
 800c486:	9104      	str	r1, [sp, #16]
 800c488:	2101      	movs	r1, #1
 800c48a:	4684      	mov	ip, r0
 800c48c:	0010      	movs	r0, r2
 800c48e:	4249      	negs	r1, r1
 800c490:	0023      	movs	r3, r4
 800c492:	3b30      	subs	r3, #48	; 0x30
 800c494:	2b09      	cmp	r3, #9
 800c496:	d903      	bls.n	800c4a0 <_strtol_l.constprop.0+0x80>
 800c498:	3b11      	subs	r3, #17
 800c49a:	2b19      	cmp	r3, #25
 800c49c:	d81d      	bhi.n	800c4da <_strtol_l.constprop.0+0xba>
 800c49e:	330a      	adds	r3, #10
 800c4a0:	429e      	cmp	r6, r3
 800c4a2:	dd1e      	ble.n	800c4e2 <_strtol_l.constprop.0+0xc2>
 800c4a4:	1c54      	adds	r4, r2, #1
 800c4a6:	d009      	beq.n	800c4bc <_strtol_l.constprop.0+0x9c>
 800c4a8:	000a      	movs	r2, r1
 800c4aa:	4584      	cmp	ip, r0
 800c4ac:	d306      	bcc.n	800c4bc <_strtol_l.constprop.0+0x9c>
 800c4ae:	d102      	bne.n	800c4b6 <_strtol_l.constprop.0+0x96>
 800c4b0:	9c04      	ldr	r4, [sp, #16]
 800c4b2:	429c      	cmp	r4, r3
 800c4b4:	db02      	blt.n	800c4bc <_strtol_l.constprop.0+0x9c>
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	4370      	muls	r0, r6
 800c4ba:	1818      	adds	r0, r3, r0
 800c4bc:	782c      	ldrb	r4, [r5, #0]
 800c4be:	3501      	adds	r5, #1
 800c4c0:	e7e6      	b.n	800c490 <_strtol_l.constprop.0+0x70>
 800c4c2:	f000 fa7d 	bl	800c9c0 <__errno>
 800c4c6:	2316      	movs	r3, #22
 800c4c8:	6003      	str	r3, [r0, #0]
 800c4ca:	2000      	movs	r0, #0
 800c4cc:	b007      	add	sp, #28
 800c4ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4d0:	2c2b      	cmp	r4, #43	; 0x2b
 800c4d2:	d1c2      	bne.n	800c45a <_strtol_l.constprop.0+0x3a>
 800c4d4:	781c      	ldrb	r4, [r3, #0]
 800c4d6:	1c95      	adds	r5, r2, #2
 800c4d8:	e7bf      	b.n	800c45a <_strtol_l.constprop.0+0x3a>
 800c4da:	0023      	movs	r3, r4
 800c4dc:	3b61      	subs	r3, #97	; 0x61
 800c4de:	2b19      	cmp	r3, #25
 800c4e0:	d9dd      	bls.n	800c49e <_strtol_l.constprop.0+0x7e>
 800c4e2:	1c53      	adds	r3, r2, #1
 800c4e4:	d109      	bne.n	800c4fa <_strtol_l.constprop.0+0xda>
 800c4e6:	2322      	movs	r3, #34	; 0x22
 800c4e8:	9a05      	ldr	r2, [sp, #20]
 800c4ea:	9803      	ldr	r0, [sp, #12]
 800c4ec:	6013      	str	r3, [r2, #0]
 800c4ee:	9b02      	ldr	r3, [sp, #8]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d0eb      	beq.n	800c4cc <_strtol_l.constprop.0+0xac>
 800c4f4:	1e6b      	subs	r3, r5, #1
 800c4f6:	9301      	str	r3, [sp, #4]
 800c4f8:	e007      	b.n	800c50a <_strtol_l.constprop.0+0xea>
 800c4fa:	2f00      	cmp	r7, #0
 800c4fc:	d000      	beq.n	800c500 <_strtol_l.constprop.0+0xe0>
 800c4fe:	4240      	negs	r0, r0
 800c500:	9b02      	ldr	r3, [sp, #8]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d0e2      	beq.n	800c4cc <_strtol_l.constprop.0+0xac>
 800c506:	2a00      	cmp	r2, #0
 800c508:	d1f4      	bne.n	800c4f4 <_strtol_l.constprop.0+0xd4>
 800c50a:	9b02      	ldr	r3, [sp, #8]
 800c50c:	9a01      	ldr	r2, [sp, #4]
 800c50e:	601a      	str	r2, [r3, #0]
 800c510:	e7dc      	b.n	800c4cc <_strtol_l.constprop.0+0xac>
 800c512:	2430      	movs	r4, #48	; 0x30
 800c514:	2e00      	cmp	r6, #0
 800c516:	d1ae      	bne.n	800c476 <_strtol_l.constprop.0+0x56>
 800c518:	3608      	adds	r6, #8
 800c51a:	e7ac      	b.n	800c476 <_strtol_l.constprop.0+0x56>
 800c51c:	2c30      	cmp	r4, #48	; 0x30
 800c51e:	d0a2      	beq.n	800c466 <_strtol_l.constprop.0+0x46>
 800c520:	260a      	movs	r6, #10
 800c522:	e7a8      	b.n	800c476 <_strtol_l.constprop.0+0x56>
 800c524:	08014ed1 	.word	0x08014ed1
 800c528:	7fffffff 	.word	0x7fffffff

0800c52c <_strtol_r>:
 800c52c:	b510      	push	{r4, lr}
 800c52e:	f7ff ff77 	bl	800c420 <_strtol_l.constprop.0>
 800c532:	bd10      	pop	{r4, pc}

0800c534 <strtol>:
 800c534:	b510      	push	{r4, lr}
 800c536:	4c04      	ldr	r4, [pc, #16]	; (800c548 <strtol+0x14>)
 800c538:	0013      	movs	r3, r2
 800c53a:	000a      	movs	r2, r1
 800c53c:	0001      	movs	r1, r0
 800c53e:	6820      	ldr	r0, [r4, #0]
 800c540:	f7ff ff6e 	bl	800c420 <_strtol_l.constprop.0>
 800c544:	bd10      	pop	{r4, pc}
 800c546:	46c0      	nop			; (mov r8, r8)
 800c548:	200006d8 	.word	0x200006d8

0800c54c <std>:
 800c54c:	2300      	movs	r3, #0
 800c54e:	b510      	push	{r4, lr}
 800c550:	0004      	movs	r4, r0
 800c552:	6003      	str	r3, [r0, #0]
 800c554:	6043      	str	r3, [r0, #4]
 800c556:	6083      	str	r3, [r0, #8]
 800c558:	8181      	strh	r1, [r0, #12]
 800c55a:	6643      	str	r3, [r0, #100]	; 0x64
 800c55c:	81c2      	strh	r2, [r0, #14]
 800c55e:	6103      	str	r3, [r0, #16]
 800c560:	6143      	str	r3, [r0, #20]
 800c562:	6183      	str	r3, [r0, #24]
 800c564:	0019      	movs	r1, r3
 800c566:	2208      	movs	r2, #8
 800c568:	305c      	adds	r0, #92	; 0x5c
 800c56a:	f000 f97d 	bl	800c868 <memset>
 800c56e:	4b0b      	ldr	r3, [pc, #44]	; (800c59c <std+0x50>)
 800c570:	61e4      	str	r4, [r4, #28]
 800c572:	6223      	str	r3, [r4, #32]
 800c574:	4b0a      	ldr	r3, [pc, #40]	; (800c5a0 <std+0x54>)
 800c576:	6263      	str	r3, [r4, #36]	; 0x24
 800c578:	4b0a      	ldr	r3, [pc, #40]	; (800c5a4 <std+0x58>)
 800c57a:	62a3      	str	r3, [r4, #40]	; 0x28
 800c57c:	4b0a      	ldr	r3, [pc, #40]	; (800c5a8 <std+0x5c>)
 800c57e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c580:	4b0a      	ldr	r3, [pc, #40]	; (800c5ac <std+0x60>)
 800c582:	429c      	cmp	r4, r3
 800c584:	d005      	beq.n	800c592 <std+0x46>
 800c586:	4b0a      	ldr	r3, [pc, #40]	; (800c5b0 <std+0x64>)
 800c588:	429c      	cmp	r4, r3
 800c58a:	d002      	beq.n	800c592 <std+0x46>
 800c58c:	4b09      	ldr	r3, [pc, #36]	; (800c5b4 <std+0x68>)
 800c58e:	429c      	cmp	r4, r3
 800c590:	d103      	bne.n	800c59a <std+0x4e>
 800c592:	0020      	movs	r0, r4
 800c594:	3058      	adds	r0, #88	; 0x58
 800c596:	f000 fa3d 	bl	800ca14 <__retarget_lock_init_recursive>
 800c59a:	bd10      	pop	{r4, pc}
 800c59c:	0800c7cd 	.word	0x0800c7cd
 800c5a0:	0800c7f9 	.word	0x0800c7f9
 800c5a4:	0800c831 	.word	0x0800c831
 800c5a8:	0800c85d 	.word	0x0800c85d
 800c5ac:	20000bf4 	.word	0x20000bf4
 800c5b0:	20000c5c 	.word	0x20000c5c
 800c5b4:	20000cc4 	.word	0x20000cc4

0800c5b8 <stdio_exit_handler>:
 800c5b8:	b510      	push	{r4, lr}
 800c5ba:	4a03      	ldr	r2, [pc, #12]	; (800c5c8 <stdio_exit_handler+0x10>)
 800c5bc:	4903      	ldr	r1, [pc, #12]	; (800c5cc <stdio_exit_handler+0x14>)
 800c5be:	4804      	ldr	r0, [pc, #16]	; (800c5d0 <stdio_exit_handler+0x18>)
 800c5c0:	f000 f86c 	bl	800c69c <_fwalk_sglue>
 800c5c4:	bd10      	pop	{r4, pc}
 800c5c6:	46c0      	nop			; (mov r8, r8)
 800c5c8:	20000440 	.word	0x20000440
 800c5cc:	08010515 	.word	0x08010515
 800c5d0:	200005b8 	.word	0x200005b8

0800c5d4 <cleanup_stdio>:
 800c5d4:	6841      	ldr	r1, [r0, #4]
 800c5d6:	4b0b      	ldr	r3, [pc, #44]	; (800c604 <cleanup_stdio+0x30>)
 800c5d8:	b510      	push	{r4, lr}
 800c5da:	0004      	movs	r4, r0
 800c5dc:	4299      	cmp	r1, r3
 800c5de:	d001      	beq.n	800c5e4 <cleanup_stdio+0x10>
 800c5e0:	f003 ff98 	bl	8010514 <_fclose_r>
 800c5e4:	68a1      	ldr	r1, [r4, #8]
 800c5e6:	4b08      	ldr	r3, [pc, #32]	; (800c608 <cleanup_stdio+0x34>)
 800c5e8:	4299      	cmp	r1, r3
 800c5ea:	d002      	beq.n	800c5f2 <cleanup_stdio+0x1e>
 800c5ec:	0020      	movs	r0, r4
 800c5ee:	f003 ff91 	bl	8010514 <_fclose_r>
 800c5f2:	68e1      	ldr	r1, [r4, #12]
 800c5f4:	4b05      	ldr	r3, [pc, #20]	; (800c60c <cleanup_stdio+0x38>)
 800c5f6:	4299      	cmp	r1, r3
 800c5f8:	d002      	beq.n	800c600 <cleanup_stdio+0x2c>
 800c5fa:	0020      	movs	r0, r4
 800c5fc:	f003 ff8a 	bl	8010514 <_fclose_r>
 800c600:	bd10      	pop	{r4, pc}
 800c602:	46c0      	nop			; (mov r8, r8)
 800c604:	20000bf4 	.word	0x20000bf4
 800c608:	20000c5c 	.word	0x20000c5c
 800c60c:	20000cc4 	.word	0x20000cc4

0800c610 <global_stdio_init.part.0>:
 800c610:	b510      	push	{r4, lr}
 800c612:	4b09      	ldr	r3, [pc, #36]	; (800c638 <global_stdio_init.part.0+0x28>)
 800c614:	4a09      	ldr	r2, [pc, #36]	; (800c63c <global_stdio_init.part.0+0x2c>)
 800c616:	2104      	movs	r1, #4
 800c618:	601a      	str	r2, [r3, #0]
 800c61a:	4809      	ldr	r0, [pc, #36]	; (800c640 <global_stdio_init.part.0+0x30>)
 800c61c:	2200      	movs	r2, #0
 800c61e:	f7ff ff95 	bl	800c54c <std>
 800c622:	2201      	movs	r2, #1
 800c624:	2109      	movs	r1, #9
 800c626:	4807      	ldr	r0, [pc, #28]	; (800c644 <global_stdio_init.part.0+0x34>)
 800c628:	f7ff ff90 	bl	800c54c <std>
 800c62c:	2202      	movs	r2, #2
 800c62e:	2112      	movs	r1, #18
 800c630:	4805      	ldr	r0, [pc, #20]	; (800c648 <global_stdio_init.part.0+0x38>)
 800c632:	f7ff ff8b 	bl	800c54c <std>
 800c636:	bd10      	pop	{r4, pc}
 800c638:	20000d2c 	.word	0x20000d2c
 800c63c:	0800c5b9 	.word	0x0800c5b9
 800c640:	20000bf4 	.word	0x20000bf4
 800c644:	20000c5c 	.word	0x20000c5c
 800c648:	20000cc4 	.word	0x20000cc4

0800c64c <__sfp_lock_acquire>:
 800c64c:	b510      	push	{r4, lr}
 800c64e:	4802      	ldr	r0, [pc, #8]	; (800c658 <__sfp_lock_acquire+0xc>)
 800c650:	f000 f9e2 	bl	800ca18 <__retarget_lock_acquire_recursive>
 800c654:	bd10      	pop	{r4, pc}
 800c656:	46c0      	nop			; (mov r8, r8)
 800c658:	20000d36 	.word	0x20000d36

0800c65c <__sfp_lock_release>:
 800c65c:	b510      	push	{r4, lr}
 800c65e:	4802      	ldr	r0, [pc, #8]	; (800c668 <__sfp_lock_release+0xc>)
 800c660:	f000 f9db 	bl	800ca1a <__retarget_lock_release_recursive>
 800c664:	bd10      	pop	{r4, pc}
 800c666:	46c0      	nop			; (mov r8, r8)
 800c668:	20000d36 	.word	0x20000d36

0800c66c <__sinit>:
 800c66c:	b510      	push	{r4, lr}
 800c66e:	0004      	movs	r4, r0
 800c670:	f7ff ffec 	bl	800c64c <__sfp_lock_acquire>
 800c674:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c676:	2b00      	cmp	r3, #0
 800c678:	d002      	beq.n	800c680 <__sinit+0x14>
 800c67a:	f7ff ffef 	bl	800c65c <__sfp_lock_release>
 800c67e:	bd10      	pop	{r4, pc}
 800c680:	4b04      	ldr	r3, [pc, #16]	; (800c694 <__sinit+0x28>)
 800c682:	6363      	str	r3, [r4, #52]	; 0x34
 800c684:	4b04      	ldr	r3, [pc, #16]	; (800c698 <__sinit+0x2c>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d1f6      	bne.n	800c67a <__sinit+0xe>
 800c68c:	f7ff ffc0 	bl	800c610 <global_stdio_init.part.0>
 800c690:	e7f3      	b.n	800c67a <__sinit+0xe>
 800c692:	46c0      	nop			; (mov r8, r8)
 800c694:	0800c5d5 	.word	0x0800c5d5
 800c698:	20000d2c 	.word	0x20000d2c

0800c69c <_fwalk_sglue>:
 800c69c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c69e:	0014      	movs	r4, r2
 800c6a0:	2600      	movs	r6, #0
 800c6a2:	9000      	str	r0, [sp, #0]
 800c6a4:	9101      	str	r1, [sp, #4]
 800c6a6:	68a5      	ldr	r5, [r4, #8]
 800c6a8:	6867      	ldr	r7, [r4, #4]
 800c6aa:	3f01      	subs	r7, #1
 800c6ac:	d504      	bpl.n	800c6b8 <_fwalk_sglue+0x1c>
 800c6ae:	6824      	ldr	r4, [r4, #0]
 800c6b0:	2c00      	cmp	r4, #0
 800c6b2:	d1f8      	bne.n	800c6a6 <_fwalk_sglue+0xa>
 800c6b4:	0030      	movs	r0, r6
 800c6b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c6b8:	89ab      	ldrh	r3, [r5, #12]
 800c6ba:	2b01      	cmp	r3, #1
 800c6bc:	d908      	bls.n	800c6d0 <_fwalk_sglue+0x34>
 800c6be:	220e      	movs	r2, #14
 800c6c0:	5eab      	ldrsh	r3, [r5, r2]
 800c6c2:	3301      	adds	r3, #1
 800c6c4:	d004      	beq.n	800c6d0 <_fwalk_sglue+0x34>
 800c6c6:	0029      	movs	r1, r5
 800c6c8:	9800      	ldr	r0, [sp, #0]
 800c6ca:	9b01      	ldr	r3, [sp, #4]
 800c6cc:	4798      	blx	r3
 800c6ce:	4306      	orrs	r6, r0
 800c6d0:	3568      	adds	r5, #104	; 0x68
 800c6d2:	e7ea      	b.n	800c6aa <_fwalk_sglue+0xe>

0800c6d4 <snprintf>:
 800c6d4:	b40c      	push	{r2, r3}
 800c6d6:	b530      	push	{r4, r5, lr}
 800c6d8:	4b17      	ldr	r3, [pc, #92]	; (800c738 <snprintf+0x64>)
 800c6da:	000c      	movs	r4, r1
 800c6dc:	681d      	ldr	r5, [r3, #0]
 800c6de:	b09d      	sub	sp, #116	; 0x74
 800c6e0:	2900      	cmp	r1, #0
 800c6e2:	da08      	bge.n	800c6f6 <snprintf+0x22>
 800c6e4:	238b      	movs	r3, #139	; 0x8b
 800c6e6:	2001      	movs	r0, #1
 800c6e8:	602b      	str	r3, [r5, #0]
 800c6ea:	4240      	negs	r0, r0
 800c6ec:	b01d      	add	sp, #116	; 0x74
 800c6ee:	bc30      	pop	{r4, r5}
 800c6f0:	bc08      	pop	{r3}
 800c6f2:	b002      	add	sp, #8
 800c6f4:	4718      	bx	r3
 800c6f6:	2382      	movs	r3, #130	; 0x82
 800c6f8:	466a      	mov	r2, sp
 800c6fa:	009b      	lsls	r3, r3, #2
 800c6fc:	8293      	strh	r3, [r2, #20]
 800c6fe:	2300      	movs	r3, #0
 800c700:	9002      	str	r0, [sp, #8]
 800c702:	9006      	str	r0, [sp, #24]
 800c704:	4299      	cmp	r1, r3
 800c706:	d000      	beq.n	800c70a <snprintf+0x36>
 800c708:	1e4b      	subs	r3, r1, #1
 800c70a:	9304      	str	r3, [sp, #16]
 800c70c:	9307      	str	r3, [sp, #28]
 800c70e:	2301      	movs	r3, #1
 800c710:	466a      	mov	r2, sp
 800c712:	425b      	negs	r3, r3
 800c714:	82d3      	strh	r3, [r2, #22]
 800c716:	0028      	movs	r0, r5
 800c718:	ab21      	add	r3, sp, #132	; 0x84
 800c71a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c71c:	a902      	add	r1, sp, #8
 800c71e:	9301      	str	r3, [sp, #4]
 800c720:	f001 fa9a 	bl	800dc58 <_svfprintf_r>
 800c724:	1c43      	adds	r3, r0, #1
 800c726:	da01      	bge.n	800c72c <snprintf+0x58>
 800c728:	238b      	movs	r3, #139	; 0x8b
 800c72a:	602b      	str	r3, [r5, #0]
 800c72c:	2c00      	cmp	r4, #0
 800c72e:	d0dd      	beq.n	800c6ec <snprintf+0x18>
 800c730:	2200      	movs	r2, #0
 800c732:	9b02      	ldr	r3, [sp, #8]
 800c734:	701a      	strb	r2, [r3, #0]
 800c736:	e7d9      	b.n	800c6ec <snprintf+0x18>
 800c738:	200006d8 	.word	0x200006d8

0800c73c <sprintf>:
 800c73c:	b40e      	push	{r1, r2, r3}
 800c73e:	b500      	push	{lr}
 800c740:	490b      	ldr	r1, [pc, #44]	; (800c770 <sprintf+0x34>)
 800c742:	b09c      	sub	sp, #112	; 0x70
 800c744:	ab1d      	add	r3, sp, #116	; 0x74
 800c746:	9002      	str	r0, [sp, #8]
 800c748:	9006      	str	r0, [sp, #24]
 800c74a:	9107      	str	r1, [sp, #28]
 800c74c:	9104      	str	r1, [sp, #16]
 800c74e:	4809      	ldr	r0, [pc, #36]	; (800c774 <sprintf+0x38>)
 800c750:	4909      	ldr	r1, [pc, #36]	; (800c778 <sprintf+0x3c>)
 800c752:	cb04      	ldmia	r3!, {r2}
 800c754:	9105      	str	r1, [sp, #20]
 800c756:	6800      	ldr	r0, [r0, #0]
 800c758:	a902      	add	r1, sp, #8
 800c75a:	9301      	str	r3, [sp, #4]
 800c75c:	f001 fa7c 	bl	800dc58 <_svfprintf_r>
 800c760:	2200      	movs	r2, #0
 800c762:	9b02      	ldr	r3, [sp, #8]
 800c764:	701a      	strb	r2, [r3, #0]
 800c766:	b01c      	add	sp, #112	; 0x70
 800c768:	bc08      	pop	{r3}
 800c76a:	b003      	add	sp, #12
 800c76c:	4718      	bx	r3
 800c76e:	46c0      	nop			; (mov r8, r8)
 800c770:	7fffffff 	.word	0x7fffffff
 800c774:	200006d8 	.word	0x200006d8
 800c778:	ffff0208 	.word	0xffff0208

0800c77c <sscanf>:
 800c77c:	b40e      	push	{r1, r2, r3}
 800c77e:	b530      	push	{r4, r5, lr}
 800c780:	2381      	movs	r3, #129	; 0x81
 800c782:	b09c      	sub	sp, #112	; 0x70
 800c784:	466a      	mov	r2, sp
 800c786:	ac1f      	add	r4, sp, #124	; 0x7c
 800c788:	009b      	lsls	r3, r3, #2
 800c78a:	cc20      	ldmia	r4!, {r5}
 800c78c:	8293      	strh	r3, [r2, #20]
 800c78e:	9002      	str	r0, [sp, #8]
 800c790:	9006      	str	r0, [sp, #24]
 800c792:	f7f3 fcb7 	bl	8000104 <strlen>
 800c796:	4b0b      	ldr	r3, [pc, #44]	; (800c7c4 <sscanf+0x48>)
 800c798:	466a      	mov	r2, sp
 800c79a:	930a      	str	r3, [sp, #40]	; 0x28
 800c79c:	2300      	movs	r3, #0
 800c79e:	9003      	str	r0, [sp, #12]
 800c7a0:	9007      	str	r0, [sp, #28]
 800c7a2:	4809      	ldr	r0, [pc, #36]	; (800c7c8 <sscanf+0x4c>)
 800c7a4:	930e      	str	r3, [sp, #56]	; 0x38
 800c7a6:	9313      	str	r3, [sp, #76]	; 0x4c
 800c7a8:	3b01      	subs	r3, #1
 800c7aa:	82d3      	strh	r3, [r2, #22]
 800c7ac:	a902      	add	r1, sp, #8
 800c7ae:	0023      	movs	r3, r4
 800c7b0:	002a      	movs	r2, r5
 800c7b2:	6800      	ldr	r0, [r0, #0]
 800c7b4:	9401      	str	r4, [sp, #4]
 800c7b6:	f002 fc91 	bl	800f0dc <__ssvfscanf_r>
 800c7ba:	b01c      	add	sp, #112	; 0x70
 800c7bc:	bc30      	pop	{r4, r5}
 800c7be:	bc08      	pop	{r3}
 800c7c0:	b003      	add	sp, #12
 800c7c2:	4718      	bx	r3
 800c7c4:	0800c7f5 	.word	0x0800c7f5
 800c7c8:	200006d8 	.word	0x200006d8

0800c7cc <__sread>:
 800c7cc:	b570      	push	{r4, r5, r6, lr}
 800c7ce:	000c      	movs	r4, r1
 800c7d0:	250e      	movs	r5, #14
 800c7d2:	5f49      	ldrsh	r1, [r1, r5]
 800c7d4:	f000 f8ba 	bl	800c94c <_read_r>
 800c7d8:	2800      	cmp	r0, #0
 800c7da:	db03      	blt.n	800c7e4 <__sread+0x18>
 800c7dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c7de:	181b      	adds	r3, r3, r0
 800c7e0:	6523      	str	r3, [r4, #80]	; 0x50
 800c7e2:	bd70      	pop	{r4, r5, r6, pc}
 800c7e4:	89a3      	ldrh	r3, [r4, #12]
 800c7e6:	4a02      	ldr	r2, [pc, #8]	; (800c7f0 <__sread+0x24>)
 800c7e8:	4013      	ands	r3, r2
 800c7ea:	81a3      	strh	r3, [r4, #12]
 800c7ec:	e7f9      	b.n	800c7e2 <__sread+0x16>
 800c7ee:	46c0      	nop			; (mov r8, r8)
 800c7f0:	ffffefff 	.word	0xffffefff

0800c7f4 <__seofread>:
 800c7f4:	2000      	movs	r0, #0
 800c7f6:	4770      	bx	lr

0800c7f8 <__swrite>:
 800c7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7fa:	001f      	movs	r7, r3
 800c7fc:	898b      	ldrh	r3, [r1, #12]
 800c7fe:	0005      	movs	r5, r0
 800c800:	000c      	movs	r4, r1
 800c802:	0016      	movs	r6, r2
 800c804:	05db      	lsls	r3, r3, #23
 800c806:	d505      	bpl.n	800c814 <__swrite+0x1c>
 800c808:	230e      	movs	r3, #14
 800c80a:	5ec9      	ldrsh	r1, [r1, r3]
 800c80c:	2200      	movs	r2, #0
 800c80e:	2302      	movs	r3, #2
 800c810:	f000 f888 	bl	800c924 <_lseek_r>
 800c814:	89a3      	ldrh	r3, [r4, #12]
 800c816:	4a05      	ldr	r2, [pc, #20]	; (800c82c <__swrite+0x34>)
 800c818:	0028      	movs	r0, r5
 800c81a:	4013      	ands	r3, r2
 800c81c:	81a3      	strh	r3, [r4, #12]
 800c81e:	0032      	movs	r2, r6
 800c820:	230e      	movs	r3, #14
 800c822:	5ee1      	ldrsh	r1, [r4, r3]
 800c824:	003b      	movs	r3, r7
 800c826:	f000 f8b7 	bl	800c998 <_write_r>
 800c82a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c82c:	ffffefff 	.word	0xffffefff

0800c830 <__sseek>:
 800c830:	b570      	push	{r4, r5, r6, lr}
 800c832:	000c      	movs	r4, r1
 800c834:	250e      	movs	r5, #14
 800c836:	5f49      	ldrsh	r1, [r1, r5]
 800c838:	f000 f874 	bl	800c924 <_lseek_r>
 800c83c:	89a3      	ldrh	r3, [r4, #12]
 800c83e:	1c42      	adds	r2, r0, #1
 800c840:	d103      	bne.n	800c84a <__sseek+0x1a>
 800c842:	4a05      	ldr	r2, [pc, #20]	; (800c858 <__sseek+0x28>)
 800c844:	4013      	ands	r3, r2
 800c846:	81a3      	strh	r3, [r4, #12]
 800c848:	bd70      	pop	{r4, r5, r6, pc}
 800c84a:	2280      	movs	r2, #128	; 0x80
 800c84c:	0152      	lsls	r2, r2, #5
 800c84e:	4313      	orrs	r3, r2
 800c850:	81a3      	strh	r3, [r4, #12]
 800c852:	6520      	str	r0, [r4, #80]	; 0x50
 800c854:	e7f8      	b.n	800c848 <__sseek+0x18>
 800c856:	46c0      	nop			; (mov r8, r8)
 800c858:	ffffefff 	.word	0xffffefff

0800c85c <__sclose>:
 800c85c:	b510      	push	{r4, lr}
 800c85e:	230e      	movs	r3, #14
 800c860:	5ec9      	ldrsh	r1, [r1, r3]
 800c862:	f000 f84d 	bl	800c900 <_close_r>
 800c866:	bd10      	pop	{r4, pc}

0800c868 <memset>:
 800c868:	0003      	movs	r3, r0
 800c86a:	1882      	adds	r2, r0, r2
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d100      	bne.n	800c872 <memset+0xa>
 800c870:	4770      	bx	lr
 800c872:	7019      	strb	r1, [r3, #0]
 800c874:	3301      	adds	r3, #1
 800c876:	e7f9      	b.n	800c86c <memset+0x4>

0800c878 <strncmp>:
 800c878:	b530      	push	{r4, r5, lr}
 800c87a:	0005      	movs	r5, r0
 800c87c:	1e10      	subs	r0, r2, #0
 800c87e:	d00b      	beq.n	800c898 <strncmp+0x20>
 800c880:	2400      	movs	r4, #0
 800c882:	3a01      	subs	r2, #1
 800c884:	5d2b      	ldrb	r3, [r5, r4]
 800c886:	5d08      	ldrb	r0, [r1, r4]
 800c888:	4283      	cmp	r3, r0
 800c88a:	d104      	bne.n	800c896 <strncmp+0x1e>
 800c88c:	42a2      	cmp	r2, r4
 800c88e:	d002      	beq.n	800c896 <strncmp+0x1e>
 800c890:	3401      	adds	r4, #1
 800c892:	2b00      	cmp	r3, #0
 800c894:	d1f6      	bne.n	800c884 <strncmp+0xc>
 800c896:	1a18      	subs	r0, r3, r0
 800c898:	bd30      	pop	{r4, r5, pc}

0800c89a <strncpy>:
 800c89a:	0003      	movs	r3, r0
 800c89c:	b530      	push	{r4, r5, lr}
 800c89e:	001d      	movs	r5, r3
 800c8a0:	2a00      	cmp	r2, #0
 800c8a2:	d006      	beq.n	800c8b2 <strncpy+0x18>
 800c8a4:	780c      	ldrb	r4, [r1, #0]
 800c8a6:	3a01      	subs	r2, #1
 800c8a8:	3301      	adds	r3, #1
 800c8aa:	702c      	strb	r4, [r5, #0]
 800c8ac:	3101      	adds	r1, #1
 800c8ae:	2c00      	cmp	r4, #0
 800c8b0:	d1f5      	bne.n	800c89e <strncpy+0x4>
 800c8b2:	2100      	movs	r1, #0
 800c8b4:	189a      	adds	r2, r3, r2
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	d100      	bne.n	800c8bc <strncpy+0x22>
 800c8ba:	bd30      	pop	{r4, r5, pc}
 800c8bc:	7019      	strb	r1, [r3, #0]
 800c8be:	3301      	adds	r3, #1
 800c8c0:	e7f9      	b.n	800c8b6 <strncpy+0x1c>

0800c8c2 <strstr>:
 800c8c2:	780a      	ldrb	r2, [r1, #0]
 800c8c4:	b530      	push	{r4, r5, lr}
 800c8c6:	2a00      	cmp	r2, #0
 800c8c8:	d10c      	bne.n	800c8e4 <strstr+0x22>
 800c8ca:	bd30      	pop	{r4, r5, pc}
 800c8cc:	429a      	cmp	r2, r3
 800c8ce:	d108      	bne.n	800c8e2 <strstr+0x20>
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	5ccc      	ldrb	r4, [r1, r3]
 800c8d4:	2c00      	cmp	r4, #0
 800c8d6:	d0f8      	beq.n	800c8ca <strstr+0x8>
 800c8d8:	5cc5      	ldrb	r5, [r0, r3]
 800c8da:	42a5      	cmp	r5, r4
 800c8dc:	d101      	bne.n	800c8e2 <strstr+0x20>
 800c8de:	3301      	adds	r3, #1
 800c8e0:	e7f7      	b.n	800c8d2 <strstr+0x10>
 800c8e2:	3001      	adds	r0, #1
 800c8e4:	7803      	ldrb	r3, [r0, #0]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d1f0      	bne.n	800c8cc <strstr+0xa>
 800c8ea:	0018      	movs	r0, r3
 800c8ec:	e7ed      	b.n	800c8ca <strstr+0x8>
	...

0800c8f0 <__locale_mb_cur_max>:
 800c8f0:	2294      	movs	r2, #148	; 0x94
 800c8f2:	4b02      	ldr	r3, [pc, #8]	; (800c8fc <__locale_mb_cur_max+0xc>)
 800c8f4:	0052      	lsls	r2, r2, #1
 800c8f6:	5c98      	ldrb	r0, [r3, r2]
 800c8f8:	4770      	bx	lr
 800c8fa:	46c0      	nop			; (mov r8, r8)
 800c8fc:	2000044c 	.word	0x2000044c

0800c900 <_close_r>:
 800c900:	2300      	movs	r3, #0
 800c902:	b570      	push	{r4, r5, r6, lr}
 800c904:	4d06      	ldr	r5, [pc, #24]	; (800c920 <_close_r+0x20>)
 800c906:	0004      	movs	r4, r0
 800c908:	0008      	movs	r0, r1
 800c90a:	602b      	str	r3, [r5, #0]
 800c90c:	f7f7 f83b 	bl	8003986 <_close>
 800c910:	1c43      	adds	r3, r0, #1
 800c912:	d103      	bne.n	800c91c <_close_r+0x1c>
 800c914:	682b      	ldr	r3, [r5, #0]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d000      	beq.n	800c91c <_close_r+0x1c>
 800c91a:	6023      	str	r3, [r4, #0]
 800c91c:	bd70      	pop	{r4, r5, r6, pc}
 800c91e:	46c0      	nop			; (mov r8, r8)
 800c920:	20000d30 	.word	0x20000d30

0800c924 <_lseek_r>:
 800c924:	b570      	push	{r4, r5, r6, lr}
 800c926:	0004      	movs	r4, r0
 800c928:	0008      	movs	r0, r1
 800c92a:	0011      	movs	r1, r2
 800c92c:	001a      	movs	r2, r3
 800c92e:	2300      	movs	r3, #0
 800c930:	4d05      	ldr	r5, [pc, #20]	; (800c948 <_lseek_r+0x24>)
 800c932:	602b      	str	r3, [r5, #0]
 800c934:	f7f7 f848 	bl	80039c8 <_lseek>
 800c938:	1c43      	adds	r3, r0, #1
 800c93a:	d103      	bne.n	800c944 <_lseek_r+0x20>
 800c93c:	682b      	ldr	r3, [r5, #0]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d000      	beq.n	800c944 <_lseek_r+0x20>
 800c942:	6023      	str	r3, [r4, #0]
 800c944:	bd70      	pop	{r4, r5, r6, pc}
 800c946:	46c0      	nop			; (mov r8, r8)
 800c948:	20000d30 	.word	0x20000d30

0800c94c <_read_r>:
 800c94c:	b570      	push	{r4, r5, r6, lr}
 800c94e:	0004      	movs	r4, r0
 800c950:	0008      	movs	r0, r1
 800c952:	0011      	movs	r1, r2
 800c954:	001a      	movs	r2, r3
 800c956:	2300      	movs	r3, #0
 800c958:	4d05      	ldr	r5, [pc, #20]	; (800c970 <_read_r+0x24>)
 800c95a:	602b      	str	r3, [r5, #0]
 800c95c:	f7f6 ffda 	bl	8003914 <_read>
 800c960:	1c43      	adds	r3, r0, #1
 800c962:	d103      	bne.n	800c96c <_read_r+0x20>
 800c964:	682b      	ldr	r3, [r5, #0]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d000      	beq.n	800c96c <_read_r+0x20>
 800c96a:	6023      	str	r3, [r4, #0]
 800c96c:	bd70      	pop	{r4, r5, r6, pc}
 800c96e:	46c0      	nop			; (mov r8, r8)
 800c970:	20000d30 	.word	0x20000d30

0800c974 <_sbrk_r>:
 800c974:	2300      	movs	r3, #0
 800c976:	b570      	push	{r4, r5, r6, lr}
 800c978:	4d06      	ldr	r5, [pc, #24]	; (800c994 <_sbrk_r+0x20>)
 800c97a:	0004      	movs	r4, r0
 800c97c:	0008      	movs	r0, r1
 800c97e:	602b      	str	r3, [r5, #0]
 800c980:	f7f7 f82e 	bl	80039e0 <_sbrk>
 800c984:	1c43      	adds	r3, r0, #1
 800c986:	d103      	bne.n	800c990 <_sbrk_r+0x1c>
 800c988:	682b      	ldr	r3, [r5, #0]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d000      	beq.n	800c990 <_sbrk_r+0x1c>
 800c98e:	6023      	str	r3, [r4, #0]
 800c990:	bd70      	pop	{r4, r5, r6, pc}
 800c992:	46c0      	nop			; (mov r8, r8)
 800c994:	20000d30 	.word	0x20000d30

0800c998 <_write_r>:
 800c998:	b570      	push	{r4, r5, r6, lr}
 800c99a:	0004      	movs	r4, r0
 800c99c:	0008      	movs	r0, r1
 800c99e:	0011      	movs	r1, r2
 800c9a0:	001a      	movs	r2, r3
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	4d05      	ldr	r5, [pc, #20]	; (800c9bc <_write_r+0x24>)
 800c9a6:	602b      	str	r3, [r5, #0]
 800c9a8:	f7f6 ffd1 	bl	800394e <_write>
 800c9ac:	1c43      	adds	r3, r0, #1
 800c9ae:	d103      	bne.n	800c9b8 <_write_r+0x20>
 800c9b0:	682b      	ldr	r3, [r5, #0]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d000      	beq.n	800c9b8 <_write_r+0x20>
 800c9b6:	6023      	str	r3, [r4, #0]
 800c9b8:	bd70      	pop	{r4, r5, r6, pc}
 800c9ba:	46c0      	nop			; (mov r8, r8)
 800c9bc:	20000d30 	.word	0x20000d30

0800c9c0 <__errno>:
 800c9c0:	4b01      	ldr	r3, [pc, #4]	; (800c9c8 <__errno+0x8>)
 800c9c2:	6818      	ldr	r0, [r3, #0]
 800c9c4:	4770      	bx	lr
 800c9c6:	46c0      	nop			; (mov r8, r8)
 800c9c8:	200006d8 	.word	0x200006d8

0800c9cc <__libc_init_array>:
 800c9cc:	b570      	push	{r4, r5, r6, lr}
 800c9ce:	2600      	movs	r6, #0
 800c9d0:	4c0c      	ldr	r4, [pc, #48]	; (800ca04 <__libc_init_array+0x38>)
 800c9d2:	4d0d      	ldr	r5, [pc, #52]	; (800ca08 <__libc_init_array+0x3c>)
 800c9d4:	1b64      	subs	r4, r4, r5
 800c9d6:	10a4      	asrs	r4, r4, #2
 800c9d8:	42a6      	cmp	r6, r4
 800c9da:	d109      	bne.n	800c9f0 <__libc_init_array+0x24>
 800c9dc:	2600      	movs	r6, #0
 800c9de:	f006 fcc5 	bl	801336c <_init>
 800c9e2:	4c0a      	ldr	r4, [pc, #40]	; (800ca0c <__libc_init_array+0x40>)
 800c9e4:	4d0a      	ldr	r5, [pc, #40]	; (800ca10 <__libc_init_array+0x44>)
 800c9e6:	1b64      	subs	r4, r4, r5
 800c9e8:	10a4      	asrs	r4, r4, #2
 800c9ea:	42a6      	cmp	r6, r4
 800c9ec:	d105      	bne.n	800c9fa <__libc_init_array+0x2e>
 800c9ee:	bd70      	pop	{r4, r5, r6, pc}
 800c9f0:	00b3      	lsls	r3, r6, #2
 800c9f2:	58eb      	ldr	r3, [r5, r3]
 800c9f4:	4798      	blx	r3
 800c9f6:	3601      	adds	r6, #1
 800c9f8:	e7ee      	b.n	800c9d8 <__libc_init_array+0xc>
 800c9fa:	00b3      	lsls	r3, r6, #2
 800c9fc:	58eb      	ldr	r3, [r5, r3]
 800c9fe:	4798      	blx	r3
 800ca00:	3601      	adds	r6, #1
 800ca02:	e7f2      	b.n	800c9ea <__libc_init_array+0x1e>
 800ca04:	080152ec 	.word	0x080152ec
 800ca08:	080152ec 	.word	0x080152ec
 800ca0c:	080152f4 	.word	0x080152f4
 800ca10:	080152ec 	.word	0x080152ec

0800ca14 <__retarget_lock_init_recursive>:
 800ca14:	4770      	bx	lr

0800ca16 <__retarget_lock_close_recursive>:
 800ca16:	4770      	bx	lr

0800ca18 <__retarget_lock_acquire_recursive>:
 800ca18:	4770      	bx	lr

0800ca1a <__retarget_lock_release_recursive>:
 800ca1a:	4770      	bx	lr

0800ca1c <sysconf>:
 800ca1c:	2380      	movs	r3, #128	; 0x80
 800ca1e:	b510      	push	{r4, lr}
 800ca20:	2808      	cmp	r0, #8
 800ca22:	d004      	beq.n	800ca2e <sysconf+0x12>
 800ca24:	f7ff ffcc 	bl	800c9c0 <__errno>
 800ca28:	2316      	movs	r3, #22
 800ca2a:	6003      	str	r3, [r0, #0]
 800ca2c:	3b17      	subs	r3, #23
 800ca2e:	0018      	movs	r0, r3
 800ca30:	bd10      	pop	{r4, pc}

0800ca32 <memcpy>:
 800ca32:	2300      	movs	r3, #0
 800ca34:	b510      	push	{r4, lr}
 800ca36:	429a      	cmp	r2, r3
 800ca38:	d100      	bne.n	800ca3c <memcpy+0xa>
 800ca3a:	bd10      	pop	{r4, pc}
 800ca3c:	5ccc      	ldrb	r4, [r1, r3]
 800ca3e:	54c4      	strb	r4, [r0, r3]
 800ca40:	3301      	adds	r3, #1
 800ca42:	e7f8      	b.n	800ca36 <memcpy+0x4>

0800ca44 <nan>:
 800ca44:	2000      	movs	r0, #0
 800ca46:	4901      	ldr	r1, [pc, #4]	; (800ca4c <nan+0x8>)
 800ca48:	4770      	bx	lr
 800ca4a:	46c0      	nop			; (mov r8, r8)
 800ca4c:	7ff80000 	.word	0x7ff80000

0800ca50 <nanf>:
 800ca50:	4800      	ldr	r0, [pc, #0]	; (800ca54 <nanf+0x4>)
 800ca52:	4770      	bx	lr
 800ca54:	7fc00000 	.word	0x7fc00000

0800ca58 <register_fini>:
 800ca58:	4b03      	ldr	r3, [pc, #12]	; (800ca68 <register_fini+0x10>)
 800ca5a:	b510      	push	{r4, lr}
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d002      	beq.n	800ca66 <register_fini+0xe>
 800ca60:	4802      	ldr	r0, [pc, #8]	; (800ca6c <register_fini+0x14>)
 800ca62:	f000 f805 	bl	800ca70 <atexit>
 800ca66:	bd10      	pop	{r4, pc}
 800ca68:	00000000 	.word	0x00000000
 800ca6c:	080107cd 	.word	0x080107cd

0800ca70 <atexit>:
 800ca70:	2300      	movs	r3, #0
 800ca72:	b510      	push	{r4, lr}
 800ca74:	0001      	movs	r1, r0
 800ca76:	001a      	movs	r2, r3
 800ca78:	0018      	movs	r0, r3
 800ca7a:	f003 fef9 	bl	8010870 <__register_exitproc>
 800ca7e:	bd10      	pop	{r4, pc}

0800ca80 <_malloc_trim_r>:
 800ca80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca82:	0004      	movs	r4, r0
 800ca84:	2008      	movs	r0, #8
 800ca86:	000d      	movs	r5, r1
 800ca88:	f7ff ffc8 	bl	800ca1c <sysconf>
 800ca8c:	0006      	movs	r6, r0
 800ca8e:	0020      	movs	r0, r4
 800ca90:	f7fe fe7e 	bl	800b790 <__malloc_lock>
 800ca94:	2203      	movs	r2, #3
 800ca96:	4f21      	ldr	r7, [pc, #132]	; (800cb1c <_malloc_trim_r+0x9c>)
 800ca98:	0031      	movs	r1, r6
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	685b      	ldr	r3, [r3, #4]
 800ca9e:	4393      	bics	r3, r2
 800caa0:	1b58      	subs	r0, r3, r5
 800caa2:	3811      	subs	r0, #17
 800caa4:	1980      	adds	r0, r0, r6
 800caa6:	9301      	str	r3, [sp, #4]
 800caa8:	f7f3 fb48 	bl	800013c <__udivsi3>
 800caac:	1e45      	subs	r5, r0, #1
 800caae:	4375      	muls	r5, r6
 800cab0:	42ae      	cmp	r6, r5
 800cab2:	dd04      	ble.n	800cabe <_malloc_trim_r+0x3e>
 800cab4:	0020      	movs	r0, r4
 800cab6:	f7fe fe73 	bl	800b7a0 <__malloc_unlock>
 800caba:	2000      	movs	r0, #0
 800cabc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cabe:	2100      	movs	r1, #0
 800cac0:	0020      	movs	r0, r4
 800cac2:	f7ff ff57 	bl	800c974 <_sbrk_r>
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	9a01      	ldr	r2, [sp, #4]
 800caca:	189b      	adds	r3, r3, r2
 800cacc:	4298      	cmp	r0, r3
 800cace:	d1f1      	bne.n	800cab4 <_malloc_trim_r+0x34>
 800cad0:	0020      	movs	r0, r4
 800cad2:	4269      	negs	r1, r5
 800cad4:	f7ff ff4e 	bl	800c974 <_sbrk_r>
 800cad8:	3001      	adds	r0, #1
 800cada:	d110      	bne.n	800cafe <_malloc_trim_r+0x7e>
 800cadc:	2100      	movs	r1, #0
 800cade:	0020      	movs	r0, r4
 800cae0:	f7ff ff48 	bl	800c974 <_sbrk_r>
 800cae4:	68ba      	ldr	r2, [r7, #8]
 800cae6:	1a81      	subs	r1, r0, r2
 800cae8:	290f      	cmp	r1, #15
 800caea:	dde3      	ble.n	800cab4 <_malloc_trim_r+0x34>
 800caec:	4d0c      	ldr	r5, [pc, #48]	; (800cb20 <_malloc_trim_r+0xa0>)
 800caee:	4b0d      	ldr	r3, [pc, #52]	; (800cb24 <_malloc_trim_r+0xa4>)
 800caf0:	682d      	ldr	r5, [r5, #0]
 800caf2:	1b40      	subs	r0, r0, r5
 800caf4:	6018      	str	r0, [r3, #0]
 800caf6:	2301      	movs	r3, #1
 800caf8:	430b      	orrs	r3, r1
 800cafa:	6053      	str	r3, [r2, #4]
 800cafc:	e7da      	b.n	800cab4 <_malloc_trim_r+0x34>
 800cafe:	2601      	movs	r6, #1
 800cb00:	9b01      	ldr	r3, [sp, #4]
 800cb02:	68ba      	ldr	r2, [r7, #8]
 800cb04:	1b5b      	subs	r3, r3, r5
 800cb06:	4333      	orrs	r3, r6
 800cb08:	6053      	str	r3, [r2, #4]
 800cb0a:	4a06      	ldr	r2, [pc, #24]	; (800cb24 <_malloc_trim_r+0xa4>)
 800cb0c:	0020      	movs	r0, r4
 800cb0e:	6813      	ldr	r3, [r2, #0]
 800cb10:	1b5b      	subs	r3, r3, r5
 800cb12:	6013      	str	r3, [r2, #0]
 800cb14:	f7fe fe44 	bl	800b7a0 <__malloc_unlock>
 800cb18:	0030      	movs	r0, r6
 800cb1a:	e7cf      	b.n	800cabc <_malloc_trim_r+0x3c>
 800cb1c:	20000030 	.word	0x20000030
 800cb20:	20000438 	.word	0x20000438
 800cb24:	20000bc0 	.word	0x20000bc0

0800cb28 <_free_r>:
 800cb28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb2a:	1e0d      	subs	r5, r1, #0
 800cb2c:	9001      	str	r0, [sp, #4]
 800cb2e:	d02d      	beq.n	800cb8c <_free_r+0x64>
 800cb30:	f7fe fe2e 	bl	800b790 <__malloc_lock>
 800cb34:	2301      	movs	r3, #1
 800cb36:	0029      	movs	r1, r5
 800cb38:	469c      	mov	ip, r3
 800cb3a:	3908      	subs	r1, #8
 800cb3c:	684f      	ldr	r7, [r1, #4]
 800cb3e:	4662      	mov	r2, ip
 800cb40:	003b      	movs	r3, r7
 800cb42:	4664      	mov	r4, ip
 800cb44:	4393      	bics	r3, r2
 800cb46:	18c8      	adds	r0, r1, r3
 800cb48:	6845      	ldr	r5, [r0, #4]
 800cb4a:	3202      	adds	r2, #2
 800cb4c:	4395      	bics	r5, r2
 800cb4e:	4a4a      	ldr	r2, [pc, #296]	; (800cc78 <_free_r+0x150>)
 800cb50:	4027      	ands	r7, r4
 800cb52:	6896      	ldr	r6, [r2, #8]
 800cb54:	4286      	cmp	r6, r0
 800cb56:	d11a      	bne.n	800cb8e <_free_r+0x66>
 800cb58:	195b      	adds	r3, r3, r5
 800cb5a:	2f00      	cmp	r7, #0
 800cb5c:	d106      	bne.n	800cb6c <_free_r+0x44>
 800cb5e:	6808      	ldr	r0, [r1, #0]
 800cb60:	1a09      	subs	r1, r1, r0
 800cb62:	688d      	ldr	r5, [r1, #8]
 800cb64:	181b      	adds	r3, r3, r0
 800cb66:	68c8      	ldr	r0, [r1, #12]
 800cb68:	60e8      	str	r0, [r5, #12]
 800cb6a:	6085      	str	r5, [r0, #8]
 800cb6c:	2001      	movs	r0, #1
 800cb6e:	4318      	orrs	r0, r3
 800cb70:	6048      	str	r0, [r1, #4]
 800cb72:	6091      	str	r1, [r2, #8]
 800cb74:	4a41      	ldr	r2, [pc, #260]	; (800cc7c <_free_r+0x154>)
 800cb76:	6812      	ldr	r2, [r2, #0]
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d804      	bhi.n	800cb86 <_free_r+0x5e>
 800cb7c:	4b40      	ldr	r3, [pc, #256]	; (800cc80 <_free_r+0x158>)
 800cb7e:	9801      	ldr	r0, [sp, #4]
 800cb80:	6819      	ldr	r1, [r3, #0]
 800cb82:	f7ff ff7d 	bl	800ca80 <_malloc_trim_r>
 800cb86:	9801      	ldr	r0, [sp, #4]
 800cb88:	f7fe fe0a 	bl	800b7a0 <__malloc_unlock>
 800cb8c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800cb8e:	2600      	movs	r6, #0
 800cb90:	6045      	str	r5, [r0, #4]
 800cb92:	42b7      	cmp	r7, r6
 800cb94:	d109      	bne.n	800cbaa <_free_r+0x82>
 800cb96:	680f      	ldr	r7, [r1, #0]
 800cb98:	4c3a      	ldr	r4, [pc, #232]	; (800cc84 <_free_r+0x15c>)
 800cb9a:	1bc9      	subs	r1, r1, r7
 800cb9c:	19db      	adds	r3, r3, r7
 800cb9e:	688f      	ldr	r7, [r1, #8]
 800cba0:	42a7      	cmp	r7, r4
 800cba2:	d02c      	beq.n	800cbfe <_free_r+0xd6>
 800cba4:	68cc      	ldr	r4, [r1, #12]
 800cba6:	60fc      	str	r4, [r7, #12]
 800cba8:	60a7      	str	r7, [r4, #8]
 800cbaa:	1947      	adds	r7, r0, r5
 800cbac:	687c      	ldr	r4, [r7, #4]
 800cbae:	2701      	movs	r7, #1
 800cbb0:	423c      	tst	r4, r7
 800cbb2:	d10b      	bne.n	800cbcc <_free_r+0xa4>
 800cbb4:	195b      	adds	r3, r3, r5
 800cbb6:	6885      	ldr	r5, [r0, #8]
 800cbb8:	2e00      	cmp	r6, #0
 800cbba:	d122      	bne.n	800cc02 <_free_r+0xda>
 800cbbc:	4c31      	ldr	r4, [pc, #196]	; (800cc84 <_free_r+0x15c>)
 800cbbe:	42a5      	cmp	r5, r4
 800cbc0:	d11f      	bne.n	800cc02 <_free_r+0xda>
 800cbc2:	003e      	movs	r6, r7
 800cbc4:	6151      	str	r1, [r2, #20]
 800cbc6:	6111      	str	r1, [r2, #16]
 800cbc8:	60cd      	str	r5, [r1, #12]
 800cbca:	608d      	str	r5, [r1, #8]
 800cbcc:	2501      	movs	r5, #1
 800cbce:	0028      	movs	r0, r5
 800cbd0:	4318      	orrs	r0, r3
 800cbd2:	6048      	str	r0, [r1, #4]
 800cbd4:	50cb      	str	r3, [r1, r3]
 800cbd6:	2e00      	cmp	r6, #0
 800cbd8:	d1d5      	bne.n	800cb86 <_free_r+0x5e>
 800cbda:	2080      	movs	r0, #128	; 0x80
 800cbdc:	0080      	lsls	r0, r0, #2
 800cbde:	4283      	cmp	r3, r0
 800cbe0:	d213      	bcs.n	800cc0a <_free_r+0xe2>
 800cbe2:	08d8      	lsrs	r0, r3, #3
 800cbe4:	095b      	lsrs	r3, r3, #5
 800cbe6:	409d      	lsls	r5, r3
 800cbe8:	6853      	ldr	r3, [r2, #4]
 800cbea:	431d      	orrs	r5, r3
 800cbec:	00c3      	lsls	r3, r0, #3
 800cbee:	189b      	adds	r3, r3, r2
 800cbf0:	6055      	str	r5, [r2, #4]
 800cbf2:	689a      	ldr	r2, [r3, #8]
 800cbf4:	60cb      	str	r3, [r1, #12]
 800cbf6:	608a      	str	r2, [r1, #8]
 800cbf8:	6099      	str	r1, [r3, #8]
 800cbfa:	60d1      	str	r1, [r2, #12]
 800cbfc:	e7c3      	b.n	800cb86 <_free_r+0x5e>
 800cbfe:	4666      	mov	r6, ip
 800cc00:	e7d3      	b.n	800cbaa <_free_r+0x82>
 800cc02:	68c0      	ldr	r0, [r0, #12]
 800cc04:	60e8      	str	r0, [r5, #12]
 800cc06:	6085      	str	r5, [r0, #8]
 800cc08:	e7e0      	b.n	800cbcc <_free_r+0xa4>
 800cc0a:	0a5d      	lsrs	r5, r3, #9
 800cc0c:	2d04      	cmp	r5, #4
 800cc0e:	d812      	bhi.n	800cc36 <_free_r+0x10e>
 800cc10:	0998      	lsrs	r0, r3, #6
 800cc12:	3038      	adds	r0, #56	; 0x38
 800cc14:	00c6      	lsls	r6, r0, #3
 800cc16:	18b6      	adds	r6, r6, r2
 800cc18:	68b5      	ldr	r5, [r6, #8]
 800cc1a:	2703      	movs	r7, #3
 800cc1c:	42ae      	cmp	r6, r5
 800cc1e:	d125      	bne.n	800cc6c <_free_r+0x144>
 800cc20:	2301      	movs	r3, #1
 800cc22:	1080      	asrs	r0, r0, #2
 800cc24:	4083      	lsls	r3, r0
 800cc26:	6850      	ldr	r0, [r2, #4]
 800cc28:	4303      	orrs	r3, r0
 800cc2a:	6053      	str	r3, [r2, #4]
 800cc2c:	60ce      	str	r6, [r1, #12]
 800cc2e:	608d      	str	r5, [r1, #8]
 800cc30:	60b1      	str	r1, [r6, #8]
 800cc32:	60e9      	str	r1, [r5, #12]
 800cc34:	e7a7      	b.n	800cb86 <_free_r+0x5e>
 800cc36:	2d14      	cmp	r5, #20
 800cc38:	d802      	bhi.n	800cc40 <_free_r+0x118>
 800cc3a:	0028      	movs	r0, r5
 800cc3c:	305b      	adds	r0, #91	; 0x5b
 800cc3e:	e7e9      	b.n	800cc14 <_free_r+0xec>
 800cc40:	2d54      	cmp	r5, #84	; 0x54
 800cc42:	d802      	bhi.n	800cc4a <_free_r+0x122>
 800cc44:	0b18      	lsrs	r0, r3, #12
 800cc46:	306e      	adds	r0, #110	; 0x6e
 800cc48:	e7e4      	b.n	800cc14 <_free_r+0xec>
 800cc4a:	20aa      	movs	r0, #170	; 0xaa
 800cc4c:	0040      	lsls	r0, r0, #1
 800cc4e:	4285      	cmp	r5, r0
 800cc50:	d802      	bhi.n	800cc58 <_free_r+0x130>
 800cc52:	0bd8      	lsrs	r0, r3, #15
 800cc54:	3077      	adds	r0, #119	; 0x77
 800cc56:	e7dd      	b.n	800cc14 <_free_r+0xec>
 800cc58:	4e0b      	ldr	r6, [pc, #44]	; (800cc88 <_free_r+0x160>)
 800cc5a:	207e      	movs	r0, #126	; 0x7e
 800cc5c:	42b5      	cmp	r5, r6
 800cc5e:	d8d9      	bhi.n	800cc14 <_free_r+0xec>
 800cc60:	0c98      	lsrs	r0, r3, #18
 800cc62:	307c      	adds	r0, #124	; 0x7c
 800cc64:	e7d6      	b.n	800cc14 <_free_r+0xec>
 800cc66:	68ad      	ldr	r5, [r5, #8]
 800cc68:	42ae      	cmp	r6, r5
 800cc6a:	d003      	beq.n	800cc74 <_free_r+0x14c>
 800cc6c:	686a      	ldr	r2, [r5, #4]
 800cc6e:	43ba      	bics	r2, r7
 800cc70:	429a      	cmp	r2, r3
 800cc72:	d8f8      	bhi.n	800cc66 <_free_r+0x13e>
 800cc74:	68ee      	ldr	r6, [r5, #12]
 800cc76:	e7d9      	b.n	800cc2c <_free_r+0x104>
 800cc78:	20000030 	.word	0x20000030
 800cc7c:	2000043c 	.word	0x2000043c
 800cc80:	20000bf0 	.word	0x20000bf0
 800cc84:	20000038 	.word	0x20000038
 800cc88:	00000554 	.word	0x00000554

0800cc8c <rshift>:
 800cc8c:	0002      	movs	r2, r0
 800cc8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc90:	6904      	ldr	r4, [r0, #16]
 800cc92:	114b      	asrs	r3, r1, #5
 800cc94:	b085      	sub	sp, #20
 800cc96:	3214      	adds	r2, #20
 800cc98:	9302      	str	r3, [sp, #8]
 800cc9a:	114d      	asrs	r5, r1, #5
 800cc9c:	0013      	movs	r3, r2
 800cc9e:	42ac      	cmp	r4, r5
 800cca0:	dd32      	ble.n	800cd08 <rshift+0x7c>
 800cca2:	261f      	movs	r6, #31
 800cca4:	000f      	movs	r7, r1
 800cca6:	114b      	asrs	r3, r1, #5
 800cca8:	009b      	lsls	r3, r3, #2
 800ccaa:	00a5      	lsls	r5, r4, #2
 800ccac:	18d3      	adds	r3, r2, r3
 800ccae:	4037      	ands	r7, r6
 800ccb0:	1955      	adds	r5, r2, r5
 800ccb2:	9300      	str	r3, [sp, #0]
 800ccb4:	9701      	str	r7, [sp, #4]
 800ccb6:	4231      	tst	r1, r6
 800ccb8:	d10d      	bne.n	800ccd6 <rshift+0x4a>
 800ccba:	0016      	movs	r6, r2
 800ccbc:	0019      	movs	r1, r3
 800ccbe:	428d      	cmp	r5, r1
 800ccc0:	d836      	bhi.n	800cd30 <rshift+0xa4>
 800ccc2:	9900      	ldr	r1, [sp, #0]
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	3903      	subs	r1, #3
 800ccc8:	428d      	cmp	r5, r1
 800ccca:	d302      	bcc.n	800ccd2 <rshift+0x46>
 800cccc:	9b02      	ldr	r3, [sp, #8]
 800ccce:	1ae4      	subs	r4, r4, r3
 800ccd0:	00a3      	lsls	r3, r4, #2
 800ccd2:	18d3      	adds	r3, r2, r3
 800ccd4:	e018      	b.n	800cd08 <rshift+0x7c>
 800ccd6:	2120      	movs	r1, #32
 800ccd8:	9e01      	ldr	r6, [sp, #4]
 800ccda:	9f01      	ldr	r7, [sp, #4]
 800ccdc:	1b89      	subs	r1, r1, r6
 800ccde:	9e00      	ldr	r6, [sp, #0]
 800cce0:	9103      	str	r1, [sp, #12]
 800cce2:	ce02      	ldmia	r6!, {r1}
 800cce4:	4694      	mov	ip, r2
 800cce6:	40f9      	lsrs	r1, r7
 800cce8:	42b5      	cmp	r5, r6
 800ccea:	d816      	bhi.n	800cd1a <rshift+0x8e>
 800ccec:	9e00      	ldr	r6, [sp, #0]
 800ccee:	2300      	movs	r3, #0
 800ccf0:	3601      	adds	r6, #1
 800ccf2:	42b5      	cmp	r5, r6
 800ccf4:	d303      	bcc.n	800ccfe <rshift+0x72>
 800ccf6:	9b02      	ldr	r3, [sp, #8]
 800ccf8:	1ae3      	subs	r3, r4, r3
 800ccfa:	009b      	lsls	r3, r3, #2
 800ccfc:	3b04      	subs	r3, #4
 800ccfe:	18d3      	adds	r3, r2, r3
 800cd00:	6019      	str	r1, [r3, #0]
 800cd02:	2900      	cmp	r1, #0
 800cd04:	d000      	beq.n	800cd08 <rshift+0x7c>
 800cd06:	3304      	adds	r3, #4
 800cd08:	1a99      	subs	r1, r3, r2
 800cd0a:	1089      	asrs	r1, r1, #2
 800cd0c:	6101      	str	r1, [r0, #16]
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d101      	bne.n	800cd16 <rshift+0x8a>
 800cd12:	2300      	movs	r3, #0
 800cd14:	6143      	str	r3, [r0, #20]
 800cd16:	b005      	add	sp, #20
 800cd18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd1a:	6837      	ldr	r7, [r6, #0]
 800cd1c:	9b03      	ldr	r3, [sp, #12]
 800cd1e:	409f      	lsls	r7, r3
 800cd20:	430f      	orrs	r7, r1
 800cd22:	4661      	mov	r1, ip
 800cd24:	c180      	stmia	r1!, {r7}
 800cd26:	468c      	mov	ip, r1
 800cd28:	9b01      	ldr	r3, [sp, #4]
 800cd2a:	ce02      	ldmia	r6!, {r1}
 800cd2c:	40d9      	lsrs	r1, r3
 800cd2e:	e7db      	b.n	800cce8 <rshift+0x5c>
 800cd30:	c980      	ldmia	r1!, {r7}
 800cd32:	c680      	stmia	r6!, {r7}
 800cd34:	e7c3      	b.n	800ccbe <rshift+0x32>

0800cd36 <__hexdig_fun>:
 800cd36:	0002      	movs	r2, r0
 800cd38:	3a30      	subs	r2, #48	; 0x30
 800cd3a:	0003      	movs	r3, r0
 800cd3c:	2a09      	cmp	r2, #9
 800cd3e:	d802      	bhi.n	800cd46 <__hexdig_fun+0x10>
 800cd40:	3b20      	subs	r3, #32
 800cd42:	b2d8      	uxtb	r0, r3
 800cd44:	4770      	bx	lr
 800cd46:	0002      	movs	r2, r0
 800cd48:	3a61      	subs	r2, #97	; 0x61
 800cd4a:	2a05      	cmp	r2, #5
 800cd4c:	d801      	bhi.n	800cd52 <__hexdig_fun+0x1c>
 800cd4e:	3b47      	subs	r3, #71	; 0x47
 800cd50:	e7f7      	b.n	800cd42 <__hexdig_fun+0xc>
 800cd52:	001a      	movs	r2, r3
 800cd54:	3a41      	subs	r2, #65	; 0x41
 800cd56:	2000      	movs	r0, #0
 800cd58:	2a05      	cmp	r2, #5
 800cd5a:	d8f3      	bhi.n	800cd44 <__hexdig_fun+0xe>
 800cd5c:	3b27      	subs	r3, #39	; 0x27
 800cd5e:	e7f0      	b.n	800cd42 <__hexdig_fun+0xc>

0800cd60 <__gethex>:
 800cd60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd62:	b089      	sub	sp, #36	; 0x24
 800cd64:	9307      	str	r3, [sp, #28]
 800cd66:	2302      	movs	r3, #2
 800cd68:	9201      	str	r2, [sp, #4]
 800cd6a:	680a      	ldr	r2, [r1, #0]
 800cd6c:	425b      	negs	r3, r3
 800cd6e:	9003      	str	r0, [sp, #12]
 800cd70:	9106      	str	r1, [sp, #24]
 800cd72:	1c96      	adds	r6, r2, #2
 800cd74:	1a9b      	subs	r3, r3, r2
 800cd76:	199a      	adds	r2, r3, r6
 800cd78:	9600      	str	r6, [sp, #0]
 800cd7a:	9205      	str	r2, [sp, #20]
 800cd7c:	9a00      	ldr	r2, [sp, #0]
 800cd7e:	3601      	adds	r6, #1
 800cd80:	7810      	ldrb	r0, [r2, #0]
 800cd82:	2830      	cmp	r0, #48	; 0x30
 800cd84:	d0f7      	beq.n	800cd76 <__gethex+0x16>
 800cd86:	f7ff ffd6 	bl	800cd36 <__hexdig_fun>
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	001d      	movs	r5, r3
 800cd8e:	9302      	str	r3, [sp, #8]
 800cd90:	4298      	cmp	r0, r3
 800cd92:	d11d      	bne.n	800cdd0 <__gethex+0x70>
 800cd94:	2201      	movs	r2, #1
 800cd96:	49a6      	ldr	r1, [pc, #664]	; (800d030 <__gethex+0x2d0>)
 800cd98:	9800      	ldr	r0, [sp, #0]
 800cd9a:	f7ff fd6d 	bl	800c878 <strncmp>
 800cd9e:	0007      	movs	r7, r0
 800cda0:	42a8      	cmp	r0, r5
 800cda2:	d169      	bne.n	800ce78 <__gethex+0x118>
 800cda4:	9b00      	ldr	r3, [sp, #0]
 800cda6:	0034      	movs	r4, r6
 800cda8:	7858      	ldrb	r0, [r3, #1]
 800cdaa:	f7ff ffc4 	bl	800cd36 <__hexdig_fun>
 800cdae:	2301      	movs	r3, #1
 800cdb0:	9302      	str	r3, [sp, #8]
 800cdb2:	42a8      	cmp	r0, r5
 800cdb4:	d02f      	beq.n	800ce16 <__gethex+0xb6>
 800cdb6:	9600      	str	r6, [sp, #0]
 800cdb8:	9b00      	ldr	r3, [sp, #0]
 800cdba:	7818      	ldrb	r0, [r3, #0]
 800cdbc:	2830      	cmp	r0, #48	; 0x30
 800cdbe:	d009      	beq.n	800cdd4 <__gethex+0x74>
 800cdc0:	f7ff ffb9 	bl	800cd36 <__hexdig_fun>
 800cdc4:	4242      	negs	r2, r0
 800cdc6:	4142      	adcs	r2, r0
 800cdc8:	2301      	movs	r3, #1
 800cdca:	0035      	movs	r5, r6
 800cdcc:	9202      	str	r2, [sp, #8]
 800cdce:	9305      	str	r3, [sp, #20]
 800cdd0:	9c00      	ldr	r4, [sp, #0]
 800cdd2:	e004      	b.n	800cdde <__gethex+0x7e>
 800cdd4:	9b00      	ldr	r3, [sp, #0]
 800cdd6:	3301      	adds	r3, #1
 800cdd8:	9300      	str	r3, [sp, #0]
 800cdda:	e7ed      	b.n	800cdb8 <__gethex+0x58>
 800cddc:	3401      	adds	r4, #1
 800cdde:	7820      	ldrb	r0, [r4, #0]
 800cde0:	f7ff ffa9 	bl	800cd36 <__hexdig_fun>
 800cde4:	1e07      	subs	r7, r0, #0
 800cde6:	d1f9      	bne.n	800cddc <__gethex+0x7c>
 800cde8:	2201      	movs	r2, #1
 800cdea:	0020      	movs	r0, r4
 800cdec:	4990      	ldr	r1, [pc, #576]	; (800d030 <__gethex+0x2d0>)
 800cdee:	f7ff fd43 	bl	800c878 <strncmp>
 800cdf2:	2800      	cmp	r0, #0
 800cdf4:	d10d      	bne.n	800ce12 <__gethex+0xb2>
 800cdf6:	2d00      	cmp	r5, #0
 800cdf8:	d106      	bne.n	800ce08 <__gethex+0xa8>
 800cdfa:	3401      	adds	r4, #1
 800cdfc:	0025      	movs	r5, r4
 800cdfe:	7820      	ldrb	r0, [r4, #0]
 800ce00:	f7ff ff99 	bl	800cd36 <__hexdig_fun>
 800ce04:	2800      	cmp	r0, #0
 800ce06:	d102      	bne.n	800ce0e <__gethex+0xae>
 800ce08:	1b2d      	subs	r5, r5, r4
 800ce0a:	00af      	lsls	r7, r5, #2
 800ce0c:	e003      	b.n	800ce16 <__gethex+0xb6>
 800ce0e:	3401      	adds	r4, #1
 800ce10:	e7f5      	b.n	800cdfe <__gethex+0x9e>
 800ce12:	2d00      	cmp	r5, #0
 800ce14:	d1f8      	bne.n	800ce08 <__gethex+0xa8>
 800ce16:	2220      	movs	r2, #32
 800ce18:	7823      	ldrb	r3, [r4, #0]
 800ce1a:	0026      	movs	r6, r4
 800ce1c:	4393      	bics	r3, r2
 800ce1e:	2b50      	cmp	r3, #80	; 0x50
 800ce20:	d11d      	bne.n	800ce5e <__gethex+0xfe>
 800ce22:	7863      	ldrb	r3, [r4, #1]
 800ce24:	2b2b      	cmp	r3, #43	; 0x2b
 800ce26:	d02c      	beq.n	800ce82 <__gethex+0x122>
 800ce28:	2b2d      	cmp	r3, #45	; 0x2d
 800ce2a:	d02e      	beq.n	800ce8a <__gethex+0x12a>
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	1c66      	adds	r6, r4, #1
 800ce30:	9304      	str	r3, [sp, #16]
 800ce32:	7830      	ldrb	r0, [r6, #0]
 800ce34:	f7ff ff7f 	bl	800cd36 <__hexdig_fun>
 800ce38:	1e43      	subs	r3, r0, #1
 800ce3a:	b2db      	uxtb	r3, r3
 800ce3c:	2b18      	cmp	r3, #24
 800ce3e:	d82b      	bhi.n	800ce98 <__gethex+0x138>
 800ce40:	3810      	subs	r0, #16
 800ce42:	0005      	movs	r5, r0
 800ce44:	7870      	ldrb	r0, [r6, #1]
 800ce46:	f7ff ff76 	bl	800cd36 <__hexdig_fun>
 800ce4a:	1e43      	subs	r3, r0, #1
 800ce4c:	b2db      	uxtb	r3, r3
 800ce4e:	3601      	adds	r6, #1
 800ce50:	2b18      	cmp	r3, #24
 800ce52:	d91c      	bls.n	800ce8e <__gethex+0x12e>
 800ce54:	9b04      	ldr	r3, [sp, #16]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d000      	beq.n	800ce5c <__gethex+0xfc>
 800ce5a:	426d      	negs	r5, r5
 800ce5c:	197f      	adds	r7, r7, r5
 800ce5e:	9b06      	ldr	r3, [sp, #24]
 800ce60:	601e      	str	r6, [r3, #0]
 800ce62:	9b02      	ldr	r3, [sp, #8]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d019      	beq.n	800ce9c <__gethex+0x13c>
 800ce68:	2600      	movs	r6, #0
 800ce6a:	9b05      	ldr	r3, [sp, #20]
 800ce6c:	42b3      	cmp	r3, r6
 800ce6e:	d100      	bne.n	800ce72 <__gethex+0x112>
 800ce70:	3606      	adds	r6, #6
 800ce72:	0030      	movs	r0, r6
 800ce74:	b009      	add	sp, #36	; 0x24
 800ce76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce78:	2301      	movs	r3, #1
 800ce7a:	2700      	movs	r7, #0
 800ce7c:	9c00      	ldr	r4, [sp, #0]
 800ce7e:	9302      	str	r3, [sp, #8]
 800ce80:	e7c9      	b.n	800ce16 <__gethex+0xb6>
 800ce82:	2300      	movs	r3, #0
 800ce84:	9304      	str	r3, [sp, #16]
 800ce86:	1ca6      	adds	r6, r4, #2
 800ce88:	e7d3      	b.n	800ce32 <__gethex+0xd2>
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	e7fa      	b.n	800ce84 <__gethex+0x124>
 800ce8e:	230a      	movs	r3, #10
 800ce90:	435d      	muls	r5, r3
 800ce92:	182d      	adds	r5, r5, r0
 800ce94:	3d10      	subs	r5, #16
 800ce96:	e7d5      	b.n	800ce44 <__gethex+0xe4>
 800ce98:	0026      	movs	r6, r4
 800ce9a:	e7e0      	b.n	800ce5e <__gethex+0xfe>
 800ce9c:	9b00      	ldr	r3, [sp, #0]
 800ce9e:	9902      	ldr	r1, [sp, #8]
 800cea0:	1ae3      	subs	r3, r4, r3
 800cea2:	3b01      	subs	r3, #1
 800cea4:	2b07      	cmp	r3, #7
 800cea6:	dc0a      	bgt.n	800cebe <__gethex+0x15e>
 800cea8:	9803      	ldr	r0, [sp, #12]
 800ceaa:	f000 fa5d 	bl	800d368 <_Balloc>
 800ceae:	1e05      	subs	r5, r0, #0
 800ceb0:	d108      	bne.n	800cec4 <__gethex+0x164>
 800ceb2:	002a      	movs	r2, r5
 800ceb4:	21e4      	movs	r1, #228	; 0xe4
 800ceb6:	4b5f      	ldr	r3, [pc, #380]	; (800d034 <__gethex+0x2d4>)
 800ceb8:	485f      	ldr	r0, [pc, #380]	; (800d038 <__gethex+0x2d8>)
 800ceba:	f003 fd19 	bl	80108f0 <__assert_func>
 800cebe:	3101      	adds	r1, #1
 800cec0:	105b      	asrs	r3, r3, #1
 800cec2:	e7ef      	b.n	800cea4 <__gethex+0x144>
 800cec4:	0003      	movs	r3, r0
 800cec6:	3314      	adds	r3, #20
 800cec8:	9302      	str	r3, [sp, #8]
 800ceca:	9305      	str	r3, [sp, #20]
 800cecc:	2300      	movs	r3, #0
 800cece:	001e      	movs	r6, r3
 800ced0:	9304      	str	r3, [sp, #16]
 800ced2:	9b00      	ldr	r3, [sp, #0]
 800ced4:	42a3      	cmp	r3, r4
 800ced6:	d33f      	bcc.n	800cf58 <__gethex+0x1f8>
 800ced8:	9c05      	ldr	r4, [sp, #20]
 800ceda:	9b02      	ldr	r3, [sp, #8]
 800cedc:	c440      	stmia	r4!, {r6}
 800cede:	1ae4      	subs	r4, r4, r3
 800cee0:	10a4      	asrs	r4, r4, #2
 800cee2:	0030      	movs	r0, r6
 800cee4:	612c      	str	r4, [r5, #16]
 800cee6:	f000 fb01 	bl	800d4ec <__hi0bits>
 800ceea:	9b01      	ldr	r3, [sp, #4]
 800ceec:	0164      	lsls	r4, r4, #5
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	1a26      	subs	r6, r4, r0
 800cef2:	9300      	str	r3, [sp, #0]
 800cef4:	429e      	cmp	r6, r3
 800cef6:	dd51      	ble.n	800cf9c <__gethex+0x23c>
 800cef8:	1af6      	subs	r6, r6, r3
 800cefa:	0031      	movs	r1, r6
 800cefc:	0028      	movs	r0, r5
 800cefe:	f000 fe7b 	bl	800dbf8 <__any_on>
 800cf02:	1e04      	subs	r4, r0, #0
 800cf04:	d016      	beq.n	800cf34 <__gethex+0x1d4>
 800cf06:	2401      	movs	r4, #1
 800cf08:	231f      	movs	r3, #31
 800cf0a:	0020      	movs	r0, r4
 800cf0c:	1e72      	subs	r2, r6, #1
 800cf0e:	4013      	ands	r3, r2
 800cf10:	4098      	lsls	r0, r3
 800cf12:	0003      	movs	r3, r0
 800cf14:	1151      	asrs	r1, r2, #5
 800cf16:	9802      	ldr	r0, [sp, #8]
 800cf18:	0089      	lsls	r1, r1, #2
 800cf1a:	5809      	ldr	r1, [r1, r0]
 800cf1c:	4219      	tst	r1, r3
 800cf1e:	d009      	beq.n	800cf34 <__gethex+0x1d4>
 800cf20:	42a2      	cmp	r2, r4
 800cf22:	dd06      	ble.n	800cf32 <__gethex+0x1d2>
 800cf24:	0028      	movs	r0, r5
 800cf26:	1eb1      	subs	r1, r6, #2
 800cf28:	f000 fe66 	bl	800dbf8 <__any_on>
 800cf2c:	3402      	adds	r4, #2
 800cf2e:	2800      	cmp	r0, #0
 800cf30:	d100      	bne.n	800cf34 <__gethex+0x1d4>
 800cf32:	2402      	movs	r4, #2
 800cf34:	0031      	movs	r1, r6
 800cf36:	0028      	movs	r0, r5
 800cf38:	f7ff fea8 	bl	800cc8c <rshift>
 800cf3c:	19bf      	adds	r7, r7, r6
 800cf3e:	9b01      	ldr	r3, [sp, #4]
 800cf40:	689b      	ldr	r3, [r3, #8]
 800cf42:	42bb      	cmp	r3, r7
 800cf44:	da3a      	bge.n	800cfbc <__gethex+0x25c>
 800cf46:	0029      	movs	r1, r5
 800cf48:	9803      	ldr	r0, [sp, #12]
 800cf4a:	f000 fa35 	bl	800d3b8 <_Bfree>
 800cf4e:	2300      	movs	r3, #0
 800cf50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cf52:	26a3      	movs	r6, #163	; 0xa3
 800cf54:	6013      	str	r3, [r2, #0]
 800cf56:	e78c      	b.n	800ce72 <__gethex+0x112>
 800cf58:	3c01      	subs	r4, #1
 800cf5a:	7823      	ldrb	r3, [r4, #0]
 800cf5c:	2b2e      	cmp	r3, #46	; 0x2e
 800cf5e:	d012      	beq.n	800cf86 <__gethex+0x226>
 800cf60:	9b04      	ldr	r3, [sp, #16]
 800cf62:	2b20      	cmp	r3, #32
 800cf64:	d104      	bne.n	800cf70 <__gethex+0x210>
 800cf66:	9b05      	ldr	r3, [sp, #20]
 800cf68:	c340      	stmia	r3!, {r6}
 800cf6a:	2600      	movs	r6, #0
 800cf6c:	9305      	str	r3, [sp, #20]
 800cf6e:	9604      	str	r6, [sp, #16]
 800cf70:	7820      	ldrb	r0, [r4, #0]
 800cf72:	f7ff fee0 	bl	800cd36 <__hexdig_fun>
 800cf76:	230f      	movs	r3, #15
 800cf78:	4018      	ands	r0, r3
 800cf7a:	9b04      	ldr	r3, [sp, #16]
 800cf7c:	4098      	lsls	r0, r3
 800cf7e:	3304      	adds	r3, #4
 800cf80:	4306      	orrs	r6, r0
 800cf82:	9304      	str	r3, [sp, #16]
 800cf84:	e7a5      	b.n	800ced2 <__gethex+0x172>
 800cf86:	9b00      	ldr	r3, [sp, #0]
 800cf88:	42a3      	cmp	r3, r4
 800cf8a:	d8e9      	bhi.n	800cf60 <__gethex+0x200>
 800cf8c:	2201      	movs	r2, #1
 800cf8e:	0020      	movs	r0, r4
 800cf90:	4927      	ldr	r1, [pc, #156]	; (800d030 <__gethex+0x2d0>)
 800cf92:	f7ff fc71 	bl	800c878 <strncmp>
 800cf96:	2800      	cmp	r0, #0
 800cf98:	d1e2      	bne.n	800cf60 <__gethex+0x200>
 800cf9a:	e79a      	b.n	800ced2 <__gethex+0x172>
 800cf9c:	9b00      	ldr	r3, [sp, #0]
 800cf9e:	2400      	movs	r4, #0
 800cfa0:	429e      	cmp	r6, r3
 800cfa2:	dacc      	bge.n	800cf3e <__gethex+0x1de>
 800cfa4:	1b9e      	subs	r6, r3, r6
 800cfa6:	0029      	movs	r1, r5
 800cfa8:	0032      	movs	r2, r6
 800cfaa:	9803      	ldr	r0, [sp, #12]
 800cfac:	f000 fbf0 	bl	800d790 <__lshift>
 800cfb0:	0003      	movs	r3, r0
 800cfb2:	3314      	adds	r3, #20
 800cfb4:	0005      	movs	r5, r0
 800cfb6:	1bbf      	subs	r7, r7, r6
 800cfb8:	9302      	str	r3, [sp, #8]
 800cfba:	e7c0      	b.n	800cf3e <__gethex+0x1de>
 800cfbc:	9b01      	ldr	r3, [sp, #4]
 800cfbe:	685e      	ldr	r6, [r3, #4]
 800cfc0:	42be      	cmp	r6, r7
 800cfc2:	dd70      	ble.n	800d0a6 <__gethex+0x346>
 800cfc4:	9b00      	ldr	r3, [sp, #0]
 800cfc6:	1bf6      	subs	r6, r6, r7
 800cfc8:	42b3      	cmp	r3, r6
 800cfca:	dc37      	bgt.n	800d03c <__gethex+0x2dc>
 800cfcc:	9b01      	ldr	r3, [sp, #4]
 800cfce:	68db      	ldr	r3, [r3, #12]
 800cfd0:	2b02      	cmp	r3, #2
 800cfd2:	d024      	beq.n	800d01e <__gethex+0x2be>
 800cfd4:	2b03      	cmp	r3, #3
 800cfd6:	d026      	beq.n	800d026 <__gethex+0x2c6>
 800cfd8:	2b01      	cmp	r3, #1
 800cfda:	d117      	bne.n	800d00c <__gethex+0x2ac>
 800cfdc:	9b00      	ldr	r3, [sp, #0]
 800cfde:	42b3      	cmp	r3, r6
 800cfe0:	d114      	bne.n	800d00c <__gethex+0x2ac>
 800cfe2:	2b01      	cmp	r3, #1
 800cfe4:	d10b      	bne.n	800cffe <__gethex+0x29e>
 800cfe6:	9b01      	ldr	r3, [sp, #4]
 800cfe8:	9a07      	ldr	r2, [sp, #28]
 800cfea:	685b      	ldr	r3, [r3, #4]
 800cfec:	2662      	movs	r6, #98	; 0x62
 800cfee:	6013      	str	r3, [r2, #0]
 800cff0:	2301      	movs	r3, #1
 800cff2:	9a02      	ldr	r2, [sp, #8]
 800cff4:	612b      	str	r3, [r5, #16]
 800cff6:	6013      	str	r3, [r2, #0]
 800cff8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cffa:	601d      	str	r5, [r3, #0]
 800cffc:	e739      	b.n	800ce72 <__gethex+0x112>
 800cffe:	9900      	ldr	r1, [sp, #0]
 800d000:	0028      	movs	r0, r5
 800d002:	3901      	subs	r1, #1
 800d004:	f000 fdf8 	bl	800dbf8 <__any_on>
 800d008:	2800      	cmp	r0, #0
 800d00a:	d1ec      	bne.n	800cfe6 <__gethex+0x286>
 800d00c:	0029      	movs	r1, r5
 800d00e:	9803      	ldr	r0, [sp, #12]
 800d010:	f000 f9d2 	bl	800d3b8 <_Bfree>
 800d014:	2300      	movs	r3, #0
 800d016:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d018:	2650      	movs	r6, #80	; 0x50
 800d01a:	6013      	str	r3, [r2, #0]
 800d01c:	e729      	b.n	800ce72 <__gethex+0x112>
 800d01e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d020:	2b00      	cmp	r3, #0
 800d022:	d1f3      	bne.n	800d00c <__gethex+0x2ac>
 800d024:	e7df      	b.n	800cfe6 <__gethex+0x286>
 800d026:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d1dc      	bne.n	800cfe6 <__gethex+0x286>
 800d02c:	e7ee      	b.n	800d00c <__gethex+0x2ac>
 800d02e:	46c0      	nop			; (mov r8, r8)
 800d030:	08014e7c 	.word	0x08014e7c
 800d034:	08014fd9 	.word	0x08014fd9
 800d038:	08014fea 	.word	0x08014fea
 800d03c:	1e77      	subs	r7, r6, #1
 800d03e:	2c00      	cmp	r4, #0
 800d040:	d12f      	bne.n	800d0a2 <__gethex+0x342>
 800d042:	2f00      	cmp	r7, #0
 800d044:	d004      	beq.n	800d050 <__gethex+0x2f0>
 800d046:	0039      	movs	r1, r7
 800d048:	0028      	movs	r0, r5
 800d04a:	f000 fdd5 	bl	800dbf8 <__any_on>
 800d04e:	0004      	movs	r4, r0
 800d050:	231f      	movs	r3, #31
 800d052:	117a      	asrs	r2, r7, #5
 800d054:	401f      	ands	r7, r3
 800d056:	3b1e      	subs	r3, #30
 800d058:	40bb      	lsls	r3, r7
 800d05a:	9902      	ldr	r1, [sp, #8]
 800d05c:	0092      	lsls	r2, r2, #2
 800d05e:	5852      	ldr	r2, [r2, r1]
 800d060:	421a      	tst	r2, r3
 800d062:	d001      	beq.n	800d068 <__gethex+0x308>
 800d064:	2302      	movs	r3, #2
 800d066:	431c      	orrs	r4, r3
 800d068:	9b00      	ldr	r3, [sp, #0]
 800d06a:	0031      	movs	r1, r6
 800d06c:	1b9b      	subs	r3, r3, r6
 800d06e:	2602      	movs	r6, #2
 800d070:	0028      	movs	r0, r5
 800d072:	9300      	str	r3, [sp, #0]
 800d074:	f7ff fe0a 	bl	800cc8c <rshift>
 800d078:	9b01      	ldr	r3, [sp, #4]
 800d07a:	685f      	ldr	r7, [r3, #4]
 800d07c:	2c00      	cmp	r4, #0
 800d07e:	d041      	beq.n	800d104 <__gethex+0x3a4>
 800d080:	9b01      	ldr	r3, [sp, #4]
 800d082:	68db      	ldr	r3, [r3, #12]
 800d084:	2b02      	cmp	r3, #2
 800d086:	d010      	beq.n	800d0aa <__gethex+0x34a>
 800d088:	2b03      	cmp	r3, #3
 800d08a:	d012      	beq.n	800d0b2 <__gethex+0x352>
 800d08c:	2b01      	cmp	r3, #1
 800d08e:	d106      	bne.n	800d09e <__gethex+0x33e>
 800d090:	07a2      	lsls	r2, r4, #30
 800d092:	d504      	bpl.n	800d09e <__gethex+0x33e>
 800d094:	9a02      	ldr	r2, [sp, #8]
 800d096:	6812      	ldr	r2, [r2, #0]
 800d098:	4314      	orrs	r4, r2
 800d09a:	421c      	tst	r4, r3
 800d09c:	d10c      	bne.n	800d0b8 <__gethex+0x358>
 800d09e:	2310      	movs	r3, #16
 800d0a0:	e02f      	b.n	800d102 <__gethex+0x3a2>
 800d0a2:	2401      	movs	r4, #1
 800d0a4:	e7d4      	b.n	800d050 <__gethex+0x2f0>
 800d0a6:	2601      	movs	r6, #1
 800d0a8:	e7e8      	b.n	800d07c <__gethex+0x31c>
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d0ae:	1a9b      	subs	r3, r3, r2
 800d0b0:	930f      	str	r3, [sp, #60]	; 0x3c
 800d0b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d0f2      	beq.n	800d09e <__gethex+0x33e>
 800d0b8:	692b      	ldr	r3, [r5, #16]
 800d0ba:	2000      	movs	r0, #0
 800d0bc:	9302      	str	r3, [sp, #8]
 800d0be:	009b      	lsls	r3, r3, #2
 800d0c0:	9304      	str	r3, [sp, #16]
 800d0c2:	002b      	movs	r3, r5
 800d0c4:	9a04      	ldr	r2, [sp, #16]
 800d0c6:	3314      	adds	r3, #20
 800d0c8:	1899      	adds	r1, r3, r2
 800d0ca:	681a      	ldr	r2, [r3, #0]
 800d0cc:	1c54      	adds	r4, r2, #1
 800d0ce:	d01e      	beq.n	800d10e <__gethex+0x3ae>
 800d0d0:	3201      	adds	r2, #1
 800d0d2:	601a      	str	r2, [r3, #0]
 800d0d4:	002b      	movs	r3, r5
 800d0d6:	3314      	adds	r3, #20
 800d0d8:	2e02      	cmp	r6, #2
 800d0da:	d141      	bne.n	800d160 <__gethex+0x400>
 800d0dc:	9a01      	ldr	r2, [sp, #4]
 800d0de:	9900      	ldr	r1, [sp, #0]
 800d0e0:	6812      	ldr	r2, [r2, #0]
 800d0e2:	3a01      	subs	r2, #1
 800d0e4:	428a      	cmp	r2, r1
 800d0e6:	d10b      	bne.n	800d100 <__gethex+0x3a0>
 800d0e8:	221f      	movs	r2, #31
 800d0ea:	9800      	ldr	r0, [sp, #0]
 800d0ec:	1149      	asrs	r1, r1, #5
 800d0ee:	4002      	ands	r2, r0
 800d0f0:	2001      	movs	r0, #1
 800d0f2:	0004      	movs	r4, r0
 800d0f4:	4094      	lsls	r4, r2
 800d0f6:	0089      	lsls	r1, r1, #2
 800d0f8:	58cb      	ldr	r3, [r1, r3]
 800d0fa:	4223      	tst	r3, r4
 800d0fc:	d000      	beq.n	800d100 <__gethex+0x3a0>
 800d0fe:	2601      	movs	r6, #1
 800d100:	2320      	movs	r3, #32
 800d102:	431e      	orrs	r6, r3
 800d104:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d106:	601d      	str	r5, [r3, #0]
 800d108:	9b07      	ldr	r3, [sp, #28]
 800d10a:	601f      	str	r7, [r3, #0]
 800d10c:	e6b1      	b.n	800ce72 <__gethex+0x112>
 800d10e:	c301      	stmia	r3!, {r0}
 800d110:	4299      	cmp	r1, r3
 800d112:	d8da      	bhi.n	800d0ca <__gethex+0x36a>
 800d114:	68ab      	ldr	r3, [r5, #8]
 800d116:	9a02      	ldr	r2, [sp, #8]
 800d118:	429a      	cmp	r2, r3
 800d11a:	db18      	blt.n	800d14e <__gethex+0x3ee>
 800d11c:	6869      	ldr	r1, [r5, #4]
 800d11e:	9803      	ldr	r0, [sp, #12]
 800d120:	3101      	adds	r1, #1
 800d122:	f000 f921 	bl	800d368 <_Balloc>
 800d126:	1e04      	subs	r4, r0, #0
 800d128:	d104      	bne.n	800d134 <__gethex+0x3d4>
 800d12a:	0022      	movs	r2, r4
 800d12c:	2184      	movs	r1, #132	; 0x84
 800d12e:	4b1c      	ldr	r3, [pc, #112]	; (800d1a0 <__gethex+0x440>)
 800d130:	481c      	ldr	r0, [pc, #112]	; (800d1a4 <__gethex+0x444>)
 800d132:	e6c2      	b.n	800ceba <__gethex+0x15a>
 800d134:	0029      	movs	r1, r5
 800d136:	692a      	ldr	r2, [r5, #16]
 800d138:	310c      	adds	r1, #12
 800d13a:	3202      	adds	r2, #2
 800d13c:	0092      	lsls	r2, r2, #2
 800d13e:	300c      	adds	r0, #12
 800d140:	f7ff fc77 	bl	800ca32 <memcpy>
 800d144:	0029      	movs	r1, r5
 800d146:	9803      	ldr	r0, [sp, #12]
 800d148:	f000 f936 	bl	800d3b8 <_Bfree>
 800d14c:	0025      	movs	r5, r4
 800d14e:	692b      	ldr	r3, [r5, #16]
 800d150:	1c5a      	adds	r2, r3, #1
 800d152:	612a      	str	r2, [r5, #16]
 800d154:	2201      	movs	r2, #1
 800d156:	3304      	adds	r3, #4
 800d158:	009b      	lsls	r3, r3, #2
 800d15a:	18eb      	adds	r3, r5, r3
 800d15c:	605a      	str	r2, [r3, #4]
 800d15e:	e7b9      	b.n	800d0d4 <__gethex+0x374>
 800d160:	692a      	ldr	r2, [r5, #16]
 800d162:	9902      	ldr	r1, [sp, #8]
 800d164:	428a      	cmp	r2, r1
 800d166:	dd09      	ble.n	800d17c <__gethex+0x41c>
 800d168:	2101      	movs	r1, #1
 800d16a:	0028      	movs	r0, r5
 800d16c:	f7ff fd8e 	bl	800cc8c <rshift>
 800d170:	9b01      	ldr	r3, [sp, #4]
 800d172:	3701      	adds	r7, #1
 800d174:	689b      	ldr	r3, [r3, #8]
 800d176:	42bb      	cmp	r3, r7
 800d178:	dac1      	bge.n	800d0fe <__gethex+0x39e>
 800d17a:	e6e4      	b.n	800cf46 <__gethex+0x1e6>
 800d17c:	221f      	movs	r2, #31
 800d17e:	9c00      	ldr	r4, [sp, #0]
 800d180:	9900      	ldr	r1, [sp, #0]
 800d182:	2601      	movs	r6, #1
 800d184:	4014      	ands	r4, r2
 800d186:	4211      	tst	r1, r2
 800d188:	d0ba      	beq.n	800d100 <__gethex+0x3a0>
 800d18a:	9a04      	ldr	r2, [sp, #16]
 800d18c:	189b      	adds	r3, r3, r2
 800d18e:	3b04      	subs	r3, #4
 800d190:	6818      	ldr	r0, [r3, #0]
 800d192:	f000 f9ab 	bl	800d4ec <__hi0bits>
 800d196:	2320      	movs	r3, #32
 800d198:	1b1b      	subs	r3, r3, r4
 800d19a:	4298      	cmp	r0, r3
 800d19c:	dbe4      	blt.n	800d168 <__gethex+0x408>
 800d19e:	e7af      	b.n	800d100 <__gethex+0x3a0>
 800d1a0:	08014fd9 	.word	0x08014fd9
 800d1a4:	08014fea 	.word	0x08014fea

0800d1a8 <L_shift>:
 800d1a8:	2308      	movs	r3, #8
 800d1aa:	b570      	push	{r4, r5, r6, lr}
 800d1ac:	2520      	movs	r5, #32
 800d1ae:	1a9a      	subs	r2, r3, r2
 800d1b0:	0092      	lsls	r2, r2, #2
 800d1b2:	1aad      	subs	r5, r5, r2
 800d1b4:	6843      	ldr	r3, [r0, #4]
 800d1b6:	6804      	ldr	r4, [r0, #0]
 800d1b8:	001e      	movs	r6, r3
 800d1ba:	40ae      	lsls	r6, r5
 800d1bc:	40d3      	lsrs	r3, r2
 800d1be:	4334      	orrs	r4, r6
 800d1c0:	6004      	str	r4, [r0, #0]
 800d1c2:	6043      	str	r3, [r0, #4]
 800d1c4:	3004      	adds	r0, #4
 800d1c6:	4288      	cmp	r0, r1
 800d1c8:	d3f4      	bcc.n	800d1b4 <L_shift+0xc>
 800d1ca:	bd70      	pop	{r4, r5, r6, pc}

0800d1cc <__match>:
 800d1cc:	b530      	push	{r4, r5, lr}
 800d1ce:	6803      	ldr	r3, [r0, #0]
 800d1d0:	780c      	ldrb	r4, [r1, #0]
 800d1d2:	3301      	adds	r3, #1
 800d1d4:	2c00      	cmp	r4, #0
 800d1d6:	d102      	bne.n	800d1de <__match+0x12>
 800d1d8:	6003      	str	r3, [r0, #0]
 800d1da:	2001      	movs	r0, #1
 800d1dc:	bd30      	pop	{r4, r5, pc}
 800d1de:	781a      	ldrb	r2, [r3, #0]
 800d1e0:	0015      	movs	r5, r2
 800d1e2:	3d41      	subs	r5, #65	; 0x41
 800d1e4:	2d19      	cmp	r5, #25
 800d1e6:	d800      	bhi.n	800d1ea <__match+0x1e>
 800d1e8:	3220      	adds	r2, #32
 800d1ea:	3101      	adds	r1, #1
 800d1ec:	42a2      	cmp	r2, r4
 800d1ee:	d0ef      	beq.n	800d1d0 <__match+0x4>
 800d1f0:	2000      	movs	r0, #0
 800d1f2:	e7f3      	b.n	800d1dc <__match+0x10>

0800d1f4 <__hexnan>:
 800d1f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1f6:	680b      	ldr	r3, [r1, #0]
 800d1f8:	b08b      	sub	sp, #44	; 0x2c
 800d1fa:	9201      	str	r2, [sp, #4]
 800d1fc:	9901      	ldr	r1, [sp, #4]
 800d1fe:	115a      	asrs	r2, r3, #5
 800d200:	0092      	lsls	r2, r2, #2
 800d202:	188a      	adds	r2, r1, r2
 800d204:	9202      	str	r2, [sp, #8]
 800d206:	0019      	movs	r1, r3
 800d208:	221f      	movs	r2, #31
 800d20a:	4011      	ands	r1, r2
 800d20c:	9008      	str	r0, [sp, #32]
 800d20e:	9106      	str	r1, [sp, #24]
 800d210:	4213      	tst	r3, r2
 800d212:	d002      	beq.n	800d21a <__hexnan+0x26>
 800d214:	9b02      	ldr	r3, [sp, #8]
 800d216:	3304      	adds	r3, #4
 800d218:	9302      	str	r3, [sp, #8]
 800d21a:	9b02      	ldr	r3, [sp, #8]
 800d21c:	2500      	movs	r5, #0
 800d21e:	1f1f      	subs	r7, r3, #4
 800d220:	003e      	movs	r6, r7
 800d222:	003c      	movs	r4, r7
 800d224:	9b08      	ldr	r3, [sp, #32]
 800d226:	603d      	str	r5, [r7, #0]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	9507      	str	r5, [sp, #28]
 800d22c:	9305      	str	r3, [sp, #20]
 800d22e:	9503      	str	r5, [sp, #12]
 800d230:	9b05      	ldr	r3, [sp, #20]
 800d232:	3301      	adds	r3, #1
 800d234:	9309      	str	r3, [sp, #36]	; 0x24
 800d236:	9b05      	ldr	r3, [sp, #20]
 800d238:	785b      	ldrb	r3, [r3, #1]
 800d23a:	9304      	str	r3, [sp, #16]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d028      	beq.n	800d292 <__hexnan+0x9e>
 800d240:	9804      	ldr	r0, [sp, #16]
 800d242:	f7ff fd78 	bl	800cd36 <__hexdig_fun>
 800d246:	2800      	cmp	r0, #0
 800d248:	d154      	bne.n	800d2f4 <__hexnan+0x100>
 800d24a:	9b04      	ldr	r3, [sp, #16]
 800d24c:	2b20      	cmp	r3, #32
 800d24e:	d819      	bhi.n	800d284 <__hexnan+0x90>
 800d250:	9b03      	ldr	r3, [sp, #12]
 800d252:	9a07      	ldr	r2, [sp, #28]
 800d254:	4293      	cmp	r3, r2
 800d256:	dd12      	ble.n	800d27e <__hexnan+0x8a>
 800d258:	42b4      	cmp	r4, r6
 800d25a:	d206      	bcs.n	800d26a <__hexnan+0x76>
 800d25c:	2d07      	cmp	r5, #7
 800d25e:	dc04      	bgt.n	800d26a <__hexnan+0x76>
 800d260:	002a      	movs	r2, r5
 800d262:	0031      	movs	r1, r6
 800d264:	0020      	movs	r0, r4
 800d266:	f7ff ff9f 	bl	800d1a8 <L_shift>
 800d26a:	9b01      	ldr	r3, [sp, #4]
 800d26c:	2508      	movs	r5, #8
 800d26e:	429c      	cmp	r4, r3
 800d270:	d905      	bls.n	800d27e <__hexnan+0x8a>
 800d272:	1f26      	subs	r6, r4, #4
 800d274:	2500      	movs	r5, #0
 800d276:	0034      	movs	r4, r6
 800d278:	9b03      	ldr	r3, [sp, #12]
 800d27a:	6035      	str	r5, [r6, #0]
 800d27c:	9307      	str	r3, [sp, #28]
 800d27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d280:	9305      	str	r3, [sp, #20]
 800d282:	e7d5      	b.n	800d230 <__hexnan+0x3c>
 800d284:	9b04      	ldr	r3, [sp, #16]
 800d286:	2b29      	cmp	r3, #41	; 0x29
 800d288:	d159      	bne.n	800d33e <__hexnan+0x14a>
 800d28a:	9b05      	ldr	r3, [sp, #20]
 800d28c:	9a08      	ldr	r2, [sp, #32]
 800d28e:	3302      	adds	r3, #2
 800d290:	6013      	str	r3, [r2, #0]
 800d292:	9b03      	ldr	r3, [sp, #12]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d052      	beq.n	800d33e <__hexnan+0x14a>
 800d298:	42b4      	cmp	r4, r6
 800d29a:	d206      	bcs.n	800d2aa <__hexnan+0xb6>
 800d29c:	2d07      	cmp	r5, #7
 800d29e:	dc04      	bgt.n	800d2aa <__hexnan+0xb6>
 800d2a0:	002a      	movs	r2, r5
 800d2a2:	0031      	movs	r1, r6
 800d2a4:	0020      	movs	r0, r4
 800d2a6:	f7ff ff7f 	bl	800d1a8 <L_shift>
 800d2aa:	9b01      	ldr	r3, [sp, #4]
 800d2ac:	429c      	cmp	r4, r3
 800d2ae:	d935      	bls.n	800d31c <__hexnan+0x128>
 800d2b0:	001a      	movs	r2, r3
 800d2b2:	0023      	movs	r3, r4
 800d2b4:	cb02      	ldmia	r3!, {r1}
 800d2b6:	c202      	stmia	r2!, {r1}
 800d2b8:	429f      	cmp	r7, r3
 800d2ba:	d2fb      	bcs.n	800d2b4 <__hexnan+0xc0>
 800d2bc:	9b02      	ldr	r3, [sp, #8]
 800d2be:	1c62      	adds	r2, r4, #1
 800d2c0:	1ed9      	subs	r1, r3, #3
 800d2c2:	2304      	movs	r3, #4
 800d2c4:	4291      	cmp	r1, r2
 800d2c6:	d305      	bcc.n	800d2d4 <__hexnan+0xe0>
 800d2c8:	9b02      	ldr	r3, [sp, #8]
 800d2ca:	3b04      	subs	r3, #4
 800d2cc:	1b1b      	subs	r3, r3, r4
 800d2ce:	089b      	lsrs	r3, r3, #2
 800d2d0:	3301      	adds	r3, #1
 800d2d2:	009b      	lsls	r3, r3, #2
 800d2d4:	9a01      	ldr	r2, [sp, #4]
 800d2d6:	18d3      	adds	r3, r2, r3
 800d2d8:	2200      	movs	r2, #0
 800d2da:	c304      	stmia	r3!, {r2}
 800d2dc:	429f      	cmp	r7, r3
 800d2de:	d2fc      	bcs.n	800d2da <__hexnan+0xe6>
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d104      	bne.n	800d2f0 <__hexnan+0xfc>
 800d2e6:	9b01      	ldr	r3, [sp, #4]
 800d2e8:	429f      	cmp	r7, r3
 800d2ea:	d126      	bne.n	800d33a <__hexnan+0x146>
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	603b      	str	r3, [r7, #0]
 800d2f0:	2005      	movs	r0, #5
 800d2f2:	e025      	b.n	800d340 <__hexnan+0x14c>
 800d2f4:	9b03      	ldr	r3, [sp, #12]
 800d2f6:	3501      	adds	r5, #1
 800d2f8:	3301      	adds	r3, #1
 800d2fa:	9303      	str	r3, [sp, #12]
 800d2fc:	2d08      	cmp	r5, #8
 800d2fe:	dd06      	ble.n	800d30e <__hexnan+0x11a>
 800d300:	9b01      	ldr	r3, [sp, #4]
 800d302:	429c      	cmp	r4, r3
 800d304:	d9bb      	bls.n	800d27e <__hexnan+0x8a>
 800d306:	2300      	movs	r3, #0
 800d308:	2501      	movs	r5, #1
 800d30a:	3c04      	subs	r4, #4
 800d30c:	6023      	str	r3, [r4, #0]
 800d30e:	220f      	movs	r2, #15
 800d310:	6823      	ldr	r3, [r4, #0]
 800d312:	4010      	ands	r0, r2
 800d314:	011b      	lsls	r3, r3, #4
 800d316:	4303      	orrs	r3, r0
 800d318:	6023      	str	r3, [r4, #0]
 800d31a:	e7b0      	b.n	800d27e <__hexnan+0x8a>
 800d31c:	9b06      	ldr	r3, [sp, #24]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d0de      	beq.n	800d2e0 <__hexnan+0xec>
 800d322:	2320      	movs	r3, #32
 800d324:	9a06      	ldr	r2, [sp, #24]
 800d326:	9902      	ldr	r1, [sp, #8]
 800d328:	1a9b      	subs	r3, r3, r2
 800d32a:	2201      	movs	r2, #1
 800d32c:	4252      	negs	r2, r2
 800d32e:	40da      	lsrs	r2, r3
 800d330:	3904      	subs	r1, #4
 800d332:	680b      	ldr	r3, [r1, #0]
 800d334:	4013      	ands	r3, r2
 800d336:	600b      	str	r3, [r1, #0]
 800d338:	e7d2      	b.n	800d2e0 <__hexnan+0xec>
 800d33a:	3f04      	subs	r7, #4
 800d33c:	e7d0      	b.n	800d2e0 <__hexnan+0xec>
 800d33e:	2004      	movs	r0, #4
 800d340:	b00b      	add	sp, #44	; 0x2c
 800d342:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d344 <__ascii_mbtowc>:
 800d344:	b082      	sub	sp, #8
 800d346:	2900      	cmp	r1, #0
 800d348:	d100      	bne.n	800d34c <__ascii_mbtowc+0x8>
 800d34a:	a901      	add	r1, sp, #4
 800d34c:	1e10      	subs	r0, r2, #0
 800d34e:	d006      	beq.n	800d35e <__ascii_mbtowc+0x1a>
 800d350:	2b00      	cmp	r3, #0
 800d352:	d006      	beq.n	800d362 <__ascii_mbtowc+0x1e>
 800d354:	7813      	ldrb	r3, [r2, #0]
 800d356:	600b      	str	r3, [r1, #0]
 800d358:	7810      	ldrb	r0, [r2, #0]
 800d35a:	1e43      	subs	r3, r0, #1
 800d35c:	4198      	sbcs	r0, r3
 800d35e:	b002      	add	sp, #8
 800d360:	4770      	bx	lr
 800d362:	2002      	movs	r0, #2
 800d364:	4240      	negs	r0, r0
 800d366:	e7fa      	b.n	800d35e <__ascii_mbtowc+0x1a>

0800d368 <_Balloc>:
 800d368:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800d36a:	b570      	push	{r4, r5, r6, lr}
 800d36c:	0006      	movs	r6, r0
 800d36e:	000c      	movs	r4, r1
 800d370:	2b00      	cmp	r3, #0
 800d372:	d012      	beq.n	800d39a <_Balloc+0x32>
 800d374:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800d376:	00a2      	lsls	r2, r4, #2
 800d378:	189b      	adds	r3, r3, r2
 800d37a:	6818      	ldr	r0, [r3, #0]
 800d37c:	2800      	cmp	r0, #0
 800d37e:	d115      	bne.n	800d3ac <_Balloc+0x44>
 800d380:	2101      	movs	r1, #1
 800d382:	000d      	movs	r5, r1
 800d384:	40a5      	lsls	r5, r4
 800d386:	1d6a      	adds	r2, r5, #5
 800d388:	0030      	movs	r0, r6
 800d38a:	0092      	lsls	r2, r2, #2
 800d38c:	f003 face 	bl	801092c <_calloc_r>
 800d390:	2800      	cmp	r0, #0
 800d392:	d009      	beq.n	800d3a8 <_Balloc+0x40>
 800d394:	6044      	str	r4, [r0, #4]
 800d396:	6085      	str	r5, [r0, #8]
 800d398:	e00a      	b.n	800d3b0 <_Balloc+0x48>
 800d39a:	2221      	movs	r2, #33	; 0x21
 800d39c:	2104      	movs	r1, #4
 800d39e:	f003 fac5 	bl	801092c <_calloc_r>
 800d3a2:	6470      	str	r0, [r6, #68]	; 0x44
 800d3a4:	2800      	cmp	r0, #0
 800d3a6:	d1e5      	bne.n	800d374 <_Balloc+0xc>
 800d3a8:	2000      	movs	r0, #0
 800d3aa:	bd70      	pop	{r4, r5, r6, pc}
 800d3ac:	6802      	ldr	r2, [r0, #0]
 800d3ae:	601a      	str	r2, [r3, #0]
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	6103      	str	r3, [r0, #16]
 800d3b4:	60c3      	str	r3, [r0, #12]
 800d3b6:	e7f8      	b.n	800d3aa <_Balloc+0x42>

0800d3b8 <_Bfree>:
 800d3b8:	2900      	cmp	r1, #0
 800d3ba:	d006      	beq.n	800d3ca <_Bfree+0x12>
 800d3bc:	684a      	ldr	r2, [r1, #4]
 800d3be:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800d3c0:	0092      	lsls	r2, r2, #2
 800d3c2:	189b      	adds	r3, r3, r2
 800d3c4:	681a      	ldr	r2, [r3, #0]
 800d3c6:	600a      	str	r2, [r1, #0]
 800d3c8:	6019      	str	r1, [r3, #0]
 800d3ca:	4770      	bx	lr

0800d3cc <__multadd>:
 800d3cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3ce:	000e      	movs	r6, r1
 800d3d0:	9001      	str	r0, [sp, #4]
 800d3d2:	000c      	movs	r4, r1
 800d3d4:	001d      	movs	r5, r3
 800d3d6:	2000      	movs	r0, #0
 800d3d8:	690f      	ldr	r7, [r1, #16]
 800d3da:	3614      	adds	r6, #20
 800d3dc:	6833      	ldr	r3, [r6, #0]
 800d3de:	3001      	adds	r0, #1
 800d3e0:	b299      	uxth	r1, r3
 800d3e2:	4351      	muls	r1, r2
 800d3e4:	0c1b      	lsrs	r3, r3, #16
 800d3e6:	4353      	muls	r3, r2
 800d3e8:	1949      	adds	r1, r1, r5
 800d3ea:	0c0d      	lsrs	r5, r1, #16
 800d3ec:	195b      	adds	r3, r3, r5
 800d3ee:	0c1d      	lsrs	r5, r3, #16
 800d3f0:	b289      	uxth	r1, r1
 800d3f2:	041b      	lsls	r3, r3, #16
 800d3f4:	185b      	adds	r3, r3, r1
 800d3f6:	c608      	stmia	r6!, {r3}
 800d3f8:	4287      	cmp	r7, r0
 800d3fa:	dcef      	bgt.n	800d3dc <__multadd+0x10>
 800d3fc:	2d00      	cmp	r5, #0
 800d3fe:	d022      	beq.n	800d446 <__multadd+0x7a>
 800d400:	68a3      	ldr	r3, [r4, #8]
 800d402:	42bb      	cmp	r3, r7
 800d404:	dc19      	bgt.n	800d43a <__multadd+0x6e>
 800d406:	6861      	ldr	r1, [r4, #4]
 800d408:	9801      	ldr	r0, [sp, #4]
 800d40a:	3101      	adds	r1, #1
 800d40c:	f7ff ffac 	bl	800d368 <_Balloc>
 800d410:	1e06      	subs	r6, r0, #0
 800d412:	d105      	bne.n	800d420 <__multadd+0x54>
 800d414:	0032      	movs	r2, r6
 800d416:	21ba      	movs	r1, #186	; 0xba
 800d418:	4b0c      	ldr	r3, [pc, #48]	; (800d44c <__multadd+0x80>)
 800d41a:	480d      	ldr	r0, [pc, #52]	; (800d450 <__multadd+0x84>)
 800d41c:	f003 fa68 	bl	80108f0 <__assert_func>
 800d420:	0021      	movs	r1, r4
 800d422:	6922      	ldr	r2, [r4, #16]
 800d424:	310c      	adds	r1, #12
 800d426:	3202      	adds	r2, #2
 800d428:	0092      	lsls	r2, r2, #2
 800d42a:	300c      	adds	r0, #12
 800d42c:	f7ff fb01 	bl	800ca32 <memcpy>
 800d430:	0021      	movs	r1, r4
 800d432:	9801      	ldr	r0, [sp, #4]
 800d434:	f7ff ffc0 	bl	800d3b8 <_Bfree>
 800d438:	0034      	movs	r4, r6
 800d43a:	1d3b      	adds	r3, r7, #4
 800d43c:	009b      	lsls	r3, r3, #2
 800d43e:	18e3      	adds	r3, r4, r3
 800d440:	605d      	str	r5, [r3, #4]
 800d442:	1c7b      	adds	r3, r7, #1
 800d444:	6123      	str	r3, [r4, #16]
 800d446:	0020      	movs	r0, r4
 800d448:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d44a:	46c0      	nop			; (mov r8, r8)
 800d44c:	08014fd9 	.word	0x08014fd9
 800d450:	0801504a 	.word	0x0801504a

0800d454 <__s2b>:
 800d454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d456:	0006      	movs	r6, r0
 800d458:	0018      	movs	r0, r3
 800d45a:	000c      	movs	r4, r1
 800d45c:	3008      	adds	r0, #8
 800d45e:	2109      	movs	r1, #9
 800d460:	9301      	str	r3, [sp, #4]
 800d462:	0015      	movs	r5, r2
 800d464:	f7f2 fef4 	bl	8000250 <__divsi3>
 800d468:	2301      	movs	r3, #1
 800d46a:	2100      	movs	r1, #0
 800d46c:	4283      	cmp	r3, r0
 800d46e:	db0a      	blt.n	800d486 <__s2b+0x32>
 800d470:	0030      	movs	r0, r6
 800d472:	f7ff ff79 	bl	800d368 <_Balloc>
 800d476:	1e01      	subs	r1, r0, #0
 800d478:	d108      	bne.n	800d48c <__s2b+0x38>
 800d47a:	000a      	movs	r2, r1
 800d47c:	4b19      	ldr	r3, [pc, #100]	; (800d4e4 <__s2b+0x90>)
 800d47e:	481a      	ldr	r0, [pc, #104]	; (800d4e8 <__s2b+0x94>)
 800d480:	31d3      	adds	r1, #211	; 0xd3
 800d482:	f003 fa35 	bl	80108f0 <__assert_func>
 800d486:	005b      	lsls	r3, r3, #1
 800d488:	3101      	adds	r1, #1
 800d48a:	e7ef      	b.n	800d46c <__s2b+0x18>
 800d48c:	9b08      	ldr	r3, [sp, #32]
 800d48e:	6143      	str	r3, [r0, #20]
 800d490:	2301      	movs	r3, #1
 800d492:	6103      	str	r3, [r0, #16]
 800d494:	2d09      	cmp	r5, #9
 800d496:	dd18      	ble.n	800d4ca <__s2b+0x76>
 800d498:	0023      	movs	r3, r4
 800d49a:	3309      	adds	r3, #9
 800d49c:	001f      	movs	r7, r3
 800d49e:	9300      	str	r3, [sp, #0]
 800d4a0:	1964      	adds	r4, r4, r5
 800d4a2:	783b      	ldrb	r3, [r7, #0]
 800d4a4:	220a      	movs	r2, #10
 800d4a6:	0030      	movs	r0, r6
 800d4a8:	3b30      	subs	r3, #48	; 0x30
 800d4aa:	f7ff ff8f 	bl	800d3cc <__multadd>
 800d4ae:	3701      	adds	r7, #1
 800d4b0:	0001      	movs	r1, r0
 800d4b2:	42a7      	cmp	r7, r4
 800d4b4:	d1f5      	bne.n	800d4a2 <__s2b+0x4e>
 800d4b6:	002c      	movs	r4, r5
 800d4b8:	9b00      	ldr	r3, [sp, #0]
 800d4ba:	3c08      	subs	r4, #8
 800d4bc:	191c      	adds	r4, r3, r4
 800d4be:	002f      	movs	r7, r5
 800d4c0:	9b01      	ldr	r3, [sp, #4]
 800d4c2:	429f      	cmp	r7, r3
 800d4c4:	db04      	blt.n	800d4d0 <__s2b+0x7c>
 800d4c6:	0008      	movs	r0, r1
 800d4c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d4ca:	2509      	movs	r5, #9
 800d4cc:	340a      	adds	r4, #10
 800d4ce:	e7f6      	b.n	800d4be <__s2b+0x6a>
 800d4d0:	1b63      	subs	r3, r4, r5
 800d4d2:	5ddb      	ldrb	r3, [r3, r7]
 800d4d4:	220a      	movs	r2, #10
 800d4d6:	0030      	movs	r0, r6
 800d4d8:	3b30      	subs	r3, #48	; 0x30
 800d4da:	f7ff ff77 	bl	800d3cc <__multadd>
 800d4de:	3701      	adds	r7, #1
 800d4e0:	0001      	movs	r1, r0
 800d4e2:	e7ed      	b.n	800d4c0 <__s2b+0x6c>
 800d4e4:	08014fd9 	.word	0x08014fd9
 800d4e8:	0801504a 	.word	0x0801504a

0800d4ec <__hi0bits>:
 800d4ec:	0003      	movs	r3, r0
 800d4ee:	0c02      	lsrs	r2, r0, #16
 800d4f0:	2000      	movs	r0, #0
 800d4f2:	4282      	cmp	r2, r0
 800d4f4:	d101      	bne.n	800d4fa <__hi0bits+0xe>
 800d4f6:	041b      	lsls	r3, r3, #16
 800d4f8:	3010      	adds	r0, #16
 800d4fa:	0e1a      	lsrs	r2, r3, #24
 800d4fc:	d101      	bne.n	800d502 <__hi0bits+0x16>
 800d4fe:	3008      	adds	r0, #8
 800d500:	021b      	lsls	r3, r3, #8
 800d502:	0f1a      	lsrs	r2, r3, #28
 800d504:	d101      	bne.n	800d50a <__hi0bits+0x1e>
 800d506:	3004      	adds	r0, #4
 800d508:	011b      	lsls	r3, r3, #4
 800d50a:	0f9a      	lsrs	r2, r3, #30
 800d50c:	d101      	bne.n	800d512 <__hi0bits+0x26>
 800d50e:	3002      	adds	r0, #2
 800d510:	009b      	lsls	r3, r3, #2
 800d512:	2b00      	cmp	r3, #0
 800d514:	db03      	blt.n	800d51e <__hi0bits+0x32>
 800d516:	3001      	adds	r0, #1
 800d518:	005b      	lsls	r3, r3, #1
 800d51a:	d400      	bmi.n	800d51e <__hi0bits+0x32>
 800d51c:	2020      	movs	r0, #32
 800d51e:	4770      	bx	lr

0800d520 <__lo0bits>:
 800d520:	6803      	ldr	r3, [r0, #0]
 800d522:	0001      	movs	r1, r0
 800d524:	2207      	movs	r2, #7
 800d526:	0018      	movs	r0, r3
 800d528:	4010      	ands	r0, r2
 800d52a:	4213      	tst	r3, r2
 800d52c:	d00d      	beq.n	800d54a <__lo0bits+0x2a>
 800d52e:	3a06      	subs	r2, #6
 800d530:	2000      	movs	r0, #0
 800d532:	4213      	tst	r3, r2
 800d534:	d105      	bne.n	800d542 <__lo0bits+0x22>
 800d536:	3002      	adds	r0, #2
 800d538:	4203      	tst	r3, r0
 800d53a:	d003      	beq.n	800d544 <__lo0bits+0x24>
 800d53c:	40d3      	lsrs	r3, r2
 800d53e:	0010      	movs	r0, r2
 800d540:	600b      	str	r3, [r1, #0]
 800d542:	4770      	bx	lr
 800d544:	089b      	lsrs	r3, r3, #2
 800d546:	600b      	str	r3, [r1, #0]
 800d548:	e7fb      	b.n	800d542 <__lo0bits+0x22>
 800d54a:	b29a      	uxth	r2, r3
 800d54c:	2a00      	cmp	r2, #0
 800d54e:	d101      	bne.n	800d554 <__lo0bits+0x34>
 800d550:	2010      	movs	r0, #16
 800d552:	0c1b      	lsrs	r3, r3, #16
 800d554:	b2da      	uxtb	r2, r3
 800d556:	2a00      	cmp	r2, #0
 800d558:	d101      	bne.n	800d55e <__lo0bits+0x3e>
 800d55a:	3008      	adds	r0, #8
 800d55c:	0a1b      	lsrs	r3, r3, #8
 800d55e:	071a      	lsls	r2, r3, #28
 800d560:	d101      	bne.n	800d566 <__lo0bits+0x46>
 800d562:	3004      	adds	r0, #4
 800d564:	091b      	lsrs	r3, r3, #4
 800d566:	079a      	lsls	r2, r3, #30
 800d568:	d101      	bne.n	800d56e <__lo0bits+0x4e>
 800d56a:	3002      	adds	r0, #2
 800d56c:	089b      	lsrs	r3, r3, #2
 800d56e:	07da      	lsls	r2, r3, #31
 800d570:	d4e9      	bmi.n	800d546 <__lo0bits+0x26>
 800d572:	3001      	adds	r0, #1
 800d574:	085b      	lsrs	r3, r3, #1
 800d576:	d1e6      	bne.n	800d546 <__lo0bits+0x26>
 800d578:	2020      	movs	r0, #32
 800d57a:	e7e2      	b.n	800d542 <__lo0bits+0x22>

0800d57c <__i2b>:
 800d57c:	b510      	push	{r4, lr}
 800d57e:	000c      	movs	r4, r1
 800d580:	2101      	movs	r1, #1
 800d582:	f7ff fef1 	bl	800d368 <_Balloc>
 800d586:	2800      	cmp	r0, #0
 800d588:	d107      	bne.n	800d59a <__i2b+0x1e>
 800d58a:	2146      	movs	r1, #70	; 0x46
 800d58c:	4c05      	ldr	r4, [pc, #20]	; (800d5a4 <__i2b+0x28>)
 800d58e:	0002      	movs	r2, r0
 800d590:	4b05      	ldr	r3, [pc, #20]	; (800d5a8 <__i2b+0x2c>)
 800d592:	0020      	movs	r0, r4
 800d594:	31ff      	adds	r1, #255	; 0xff
 800d596:	f003 f9ab 	bl	80108f0 <__assert_func>
 800d59a:	2301      	movs	r3, #1
 800d59c:	6144      	str	r4, [r0, #20]
 800d59e:	6103      	str	r3, [r0, #16]
 800d5a0:	bd10      	pop	{r4, pc}
 800d5a2:	46c0      	nop			; (mov r8, r8)
 800d5a4:	0801504a 	.word	0x0801504a
 800d5a8:	08014fd9 	.word	0x08014fd9

0800d5ac <__multiply>:
 800d5ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5ae:	0015      	movs	r5, r2
 800d5b0:	690a      	ldr	r2, [r1, #16]
 800d5b2:	692b      	ldr	r3, [r5, #16]
 800d5b4:	000c      	movs	r4, r1
 800d5b6:	b08b      	sub	sp, #44	; 0x2c
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	da01      	bge.n	800d5c0 <__multiply+0x14>
 800d5bc:	002c      	movs	r4, r5
 800d5be:	000d      	movs	r5, r1
 800d5c0:	6927      	ldr	r7, [r4, #16]
 800d5c2:	692e      	ldr	r6, [r5, #16]
 800d5c4:	6861      	ldr	r1, [r4, #4]
 800d5c6:	19bb      	adds	r3, r7, r6
 800d5c8:	9303      	str	r3, [sp, #12]
 800d5ca:	68a3      	ldr	r3, [r4, #8]
 800d5cc:	19ba      	adds	r2, r7, r6
 800d5ce:	4293      	cmp	r3, r2
 800d5d0:	da00      	bge.n	800d5d4 <__multiply+0x28>
 800d5d2:	3101      	adds	r1, #1
 800d5d4:	f7ff fec8 	bl	800d368 <_Balloc>
 800d5d8:	9002      	str	r0, [sp, #8]
 800d5da:	2800      	cmp	r0, #0
 800d5dc:	d106      	bne.n	800d5ec <__multiply+0x40>
 800d5de:	21b1      	movs	r1, #177	; 0xb1
 800d5e0:	4b48      	ldr	r3, [pc, #288]	; (800d704 <__multiply+0x158>)
 800d5e2:	4849      	ldr	r0, [pc, #292]	; (800d708 <__multiply+0x15c>)
 800d5e4:	9a02      	ldr	r2, [sp, #8]
 800d5e6:	0049      	lsls	r1, r1, #1
 800d5e8:	f003 f982 	bl	80108f0 <__assert_func>
 800d5ec:	9b02      	ldr	r3, [sp, #8]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	3314      	adds	r3, #20
 800d5f2:	469c      	mov	ip, r3
 800d5f4:	19bb      	adds	r3, r7, r6
 800d5f6:	009b      	lsls	r3, r3, #2
 800d5f8:	4463      	add	r3, ip
 800d5fa:	9304      	str	r3, [sp, #16]
 800d5fc:	4663      	mov	r3, ip
 800d5fe:	9904      	ldr	r1, [sp, #16]
 800d600:	428b      	cmp	r3, r1
 800d602:	d32a      	bcc.n	800d65a <__multiply+0xae>
 800d604:	0023      	movs	r3, r4
 800d606:	00bf      	lsls	r7, r7, #2
 800d608:	3314      	adds	r3, #20
 800d60a:	3514      	adds	r5, #20
 800d60c:	9308      	str	r3, [sp, #32]
 800d60e:	00b6      	lsls	r6, r6, #2
 800d610:	19db      	adds	r3, r3, r7
 800d612:	9305      	str	r3, [sp, #20]
 800d614:	19ab      	adds	r3, r5, r6
 800d616:	9309      	str	r3, [sp, #36]	; 0x24
 800d618:	2304      	movs	r3, #4
 800d61a:	9306      	str	r3, [sp, #24]
 800d61c:	0023      	movs	r3, r4
 800d61e:	9a05      	ldr	r2, [sp, #20]
 800d620:	3315      	adds	r3, #21
 800d622:	9501      	str	r5, [sp, #4]
 800d624:	429a      	cmp	r2, r3
 800d626:	d305      	bcc.n	800d634 <__multiply+0x88>
 800d628:	1b13      	subs	r3, r2, r4
 800d62a:	3b15      	subs	r3, #21
 800d62c:	089b      	lsrs	r3, r3, #2
 800d62e:	3301      	adds	r3, #1
 800d630:	009b      	lsls	r3, r3, #2
 800d632:	9306      	str	r3, [sp, #24]
 800d634:	9b01      	ldr	r3, [sp, #4]
 800d636:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d638:	4293      	cmp	r3, r2
 800d63a:	d310      	bcc.n	800d65e <__multiply+0xb2>
 800d63c:	9b03      	ldr	r3, [sp, #12]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	dd05      	ble.n	800d64e <__multiply+0xa2>
 800d642:	9b04      	ldr	r3, [sp, #16]
 800d644:	3b04      	subs	r3, #4
 800d646:	9304      	str	r3, [sp, #16]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d056      	beq.n	800d6fc <__multiply+0x150>
 800d64e:	9b02      	ldr	r3, [sp, #8]
 800d650:	9a03      	ldr	r2, [sp, #12]
 800d652:	0018      	movs	r0, r3
 800d654:	611a      	str	r2, [r3, #16]
 800d656:	b00b      	add	sp, #44	; 0x2c
 800d658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d65a:	c304      	stmia	r3!, {r2}
 800d65c:	e7cf      	b.n	800d5fe <__multiply+0x52>
 800d65e:	9b01      	ldr	r3, [sp, #4]
 800d660:	6818      	ldr	r0, [r3, #0]
 800d662:	b280      	uxth	r0, r0
 800d664:	2800      	cmp	r0, #0
 800d666:	d01e      	beq.n	800d6a6 <__multiply+0xfa>
 800d668:	4667      	mov	r7, ip
 800d66a:	2500      	movs	r5, #0
 800d66c:	9e08      	ldr	r6, [sp, #32]
 800d66e:	ce02      	ldmia	r6!, {r1}
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	9307      	str	r3, [sp, #28]
 800d674:	b28b      	uxth	r3, r1
 800d676:	4343      	muls	r3, r0
 800d678:	001a      	movs	r2, r3
 800d67a:	466b      	mov	r3, sp
 800d67c:	8b9b      	ldrh	r3, [r3, #28]
 800d67e:	18d3      	adds	r3, r2, r3
 800d680:	195b      	adds	r3, r3, r5
 800d682:	0c0d      	lsrs	r5, r1, #16
 800d684:	4345      	muls	r5, r0
 800d686:	9a07      	ldr	r2, [sp, #28]
 800d688:	0c11      	lsrs	r1, r2, #16
 800d68a:	1869      	adds	r1, r5, r1
 800d68c:	0c1a      	lsrs	r2, r3, #16
 800d68e:	188a      	adds	r2, r1, r2
 800d690:	b29b      	uxth	r3, r3
 800d692:	0c15      	lsrs	r5, r2, #16
 800d694:	0412      	lsls	r2, r2, #16
 800d696:	431a      	orrs	r2, r3
 800d698:	9b05      	ldr	r3, [sp, #20]
 800d69a:	c704      	stmia	r7!, {r2}
 800d69c:	42b3      	cmp	r3, r6
 800d69e:	d8e6      	bhi.n	800d66e <__multiply+0xc2>
 800d6a0:	4663      	mov	r3, ip
 800d6a2:	9a06      	ldr	r2, [sp, #24]
 800d6a4:	509d      	str	r5, [r3, r2]
 800d6a6:	9b01      	ldr	r3, [sp, #4]
 800d6a8:	6818      	ldr	r0, [r3, #0]
 800d6aa:	0c00      	lsrs	r0, r0, #16
 800d6ac:	d020      	beq.n	800d6f0 <__multiply+0x144>
 800d6ae:	4663      	mov	r3, ip
 800d6b0:	0025      	movs	r5, r4
 800d6b2:	4661      	mov	r1, ip
 800d6b4:	2700      	movs	r7, #0
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	3514      	adds	r5, #20
 800d6ba:	682a      	ldr	r2, [r5, #0]
 800d6bc:	680e      	ldr	r6, [r1, #0]
 800d6be:	b292      	uxth	r2, r2
 800d6c0:	4342      	muls	r2, r0
 800d6c2:	0c36      	lsrs	r6, r6, #16
 800d6c4:	1992      	adds	r2, r2, r6
 800d6c6:	19d2      	adds	r2, r2, r7
 800d6c8:	0416      	lsls	r6, r2, #16
 800d6ca:	b29b      	uxth	r3, r3
 800d6cc:	431e      	orrs	r6, r3
 800d6ce:	600e      	str	r6, [r1, #0]
 800d6d0:	cd40      	ldmia	r5!, {r6}
 800d6d2:	684b      	ldr	r3, [r1, #4]
 800d6d4:	0c36      	lsrs	r6, r6, #16
 800d6d6:	4346      	muls	r6, r0
 800d6d8:	b29b      	uxth	r3, r3
 800d6da:	0c12      	lsrs	r2, r2, #16
 800d6dc:	18f3      	adds	r3, r6, r3
 800d6de:	189b      	adds	r3, r3, r2
 800d6e0:	9a05      	ldr	r2, [sp, #20]
 800d6e2:	0c1f      	lsrs	r7, r3, #16
 800d6e4:	3104      	adds	r1, #4
 800d6e6:	42aa      	cmp	r2, r5
 800d6e8:	d8e7      	bhi.n	800d6ba <__multiply+0x10e>
 800d6ea:	4662      	mov	r2, ip
 800d6ec:	9906      	ldr	r1, [sp, #24]
 800d6ee:	5053      	str	r3, [r2, r1]
 800d6f0:	9b01      	ldr	r3, [sp, #4]
 800d6f2:	3304      	adds	r3, #4
 800d6f4:	9301      	str	r3, [sp, #4]
 800d6f6:	2304      	movs	r3, #4
 800d6f8:	449c      	add	ip, r3
 800d6fa:	e79b      	b.n	800d634 <__multiply+0x88>
 800d6fc:	9b03      	ldr	r3, [sp, #12]
 800d6fe:	3b01      	subs	r3, #1
 800d700:	9303      	str	r3, [sp, #12]
 800d702:	e79b      	b.n	800d63c <__multiply+0x90>
 800d704:	08014fd9 	.word	0x08014fd9
 800d708:	0801504a 	.word	0x0801504a

0800d70c <__pow5mult>:
 800d70c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d70e:	2303      	movs	r3, #3
 800d710:	0015      	movs	r5, r2
 800d712:	0007      	movs	r7, r0
 800d714:	000e      	movs	r6, r1
 800d716:	401a      	ands	r2, r3
 800d718:	421d      	tst	r5, r3
 800d71a:	d008      	beq.n	800d72e <__pow5mult+0x22>
 800d71c:	491a      	ldr	r1, [pc, #104]	; (800d788 <__pow5mult+0x7c>)
 800d71e:	3a01      	subs	r2, #1
 800d720:	0092      	lsls	r2, r2, #2
 800d722:	5852      	ldr	r2, [r2, r1]
 800d724:	2300      	movs	r3, #0
 800d726:	0031      	movs	r1, r6
 800d728:	f7ff fe50 	bl	800d3cc <__multadd>
 800d72c:	0006      	movs	r6, r0
 800d72e:	10ad      	asrs	r5, r5, #2
 800d730:	d027      	beq.n	800d782 <__pow5mult+0x76>
 800d732:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800d734:	2c00      	cmp	r4, #0
 800d736:	d107      	bne.n	800d748 <__pow5mult+0x3c>
 800d738:	0038      	movs	r0, r7
 800d73a:	4914      	ldr	r1, [pc, #80]	; (800d78c <__pow5mult+0x80>)
 800d73c:	f7ff ff1e 	bl	800d57c <__i2b>
 800d740:	2300      	movs	r3, #0
 800d742:	0004      	movs	r4, r0
 800d744:	6438      	str	r0, [r7, #64]	; 0x40
 800d746:	6003      	str	r3, [r0, #0]
 800d748:	2301      	movs	r3, #1
 800d74a:	421d      	tst	r5, r3
 800d74c:	d00a      	beq.n	800d764 <__pow5mult+0x58>
 800d74e:	0031      	movs	r1, r6
 800d750:	0022      	movs	r2, r4
 800d752:	0038      	movs	r0, r7
 800d754:	f7ff ff2a 	bl	800d5ac <__multiply>
 800d758:	0031      	movs	r1, r6
 800d75a:	9001      	str	r0, [sp, #4]
 800d75c:	0038      	movs	r0, r7
 800d75e:	f7ff fe2b 	bl	800d3b8 <_Bfree>
 800d762:	9e01      	ldr	r6, [sp, #4]
 800d764:	106d      	asrs	r5, r5, #1
 800d766:	d00c      	beq.n	800d782 <__pow5mult+0x76>
 800d768:	6820      	ldr	r0, [r4, #0]
 800d76a:	2800      	cmp	r0, #0
 800d76c:	d107      	bne.n	800d77e <__pow5mult+0x72>
 800d76e:	0022      	movs	r2, r4
 800d770:	0021      	movs	r1, r4
 800d772:	0038      	movs	r0, r7
 800d774:	f7ff ff1a 	bl	800d5ac <__multiply>
 800d778:	2300      	movs	r3, #0
 800d77a:	6020      	str	r0, [r4, #0]
 800d77c:	6003      	str	r3, [r0, #0]
 800d77e:	0004      	movs	r4, r0
 800d780:	e7e2      	b.n	800d748 <__pow5mult+0x3c>
 800d782:	0030      	movs	r0, r6
 800d784:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d786:	46c0      	nop			; (mov r8, r8)
 800d788:	08015198 	.word	0x08015198
 800d78c:	00000271 	.word	0x00000271

0800d790 <__lshift>:
 800d790:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d792:	000c      	movs	r4, r1
 800d794:	0017      	movs	r7, r2
 800d796:	6923      	ldr	r3, [r4, #16]
 800d798:	1155      	asrs	r5, r2, #5
 800d79a:	b087      	sub	sp, #28
 800d79c:	18eb      	adds	r3, r5, r3
 800d79e:	9302      	str	r3, [sp, #8]
 800d7a0:	3301      	adds	r3, #1
 800d7a2:	9301      	str	r3, [sp, #4]
 800d7a4:	6849      	ldr	r1, [r1, #4]
 800d7a6:	68a3      	ldr	r3, [r4, #8]
 800d7a8:	9004      	str	r0, [sp, #16]
 800d7aa:	9a01      	ldr	r2, [sp, #4]
 800d7ac:	4293      	cmp	r3, r2
 800d7ae:	db10      	blt.n	800d7d2 <__lshift+0x42>
 800d7b0:	9804      	ldr	r0, [sp, #16]
 800d7b2:	f7ff fdd9 	bl	800d368 <_Balloc>
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	0002      	movs	r2, r0
 800d7ba:	0006      	movs	r6, r0
 800d7bc:	0019      	movs	r1, r3
 800d7be:	3214      	adds	r2, #20
 800d7c0:	4298      	cmp	r0, r3
 800d7c2:	d10c      	bne.n	800d7de <__lshift+0x4e>
 800d7c4:	31df      	adds	r1, #223	; 0xdf
 800d7c6:	0032      	movs	r2, r6
 800d7c8:	4b26      	ldr	r3, [pc, #152]	; (800d864 <__lshift+0xd4>)
 800d7ca:	4827      	ldr	r0, [pc, #156]	; (800d868 <__lshift+0xd8>)
 800d7cc:	31ff      	adds	r1, #255	; 0xff
 800d7ce:	f003 f88f 	bl	80108f0 <__assert_func>
 800d7d2:	3101      	adds	r1, #1
 800d7d4:	005b      	lsls	r3, r3, #1
 800d7d6:	e7e8      	b.n	800d7aa <__lshift+0x1a>
 800d7d8:	0098      	lsls	r0, r3, #2
 800d7da:	5011      	str	r1, [r2, r0]
 800d7dc:	3301      	adds	r3, #1
 800d7de:	42ab      	cmp	r3, r5
 800d7e0:	dbfa      	blt.n	800d7d8 <__lshift+0x48>
 800d7e2:	43eb      	mvns	r3, r5
 800d7e4:	17db      	asrs	r3, r3, #31
 800d7e6:	401d      	ands	r5, r3
 800d7e8:	211f      	movs	r1, #31
 800d7ea:	0023      	movs	r3, r4
 800d7ec:	0038      	movs	r0, r7
 800d7ee:	00ad      	lsls	r5, r5, #2
 800d7f0:	1955      	adds	r5, r2, r5
 800d7f2:	6922      	ldr	r2, [r4, #16]
 800d7f4:	3314      	adds	r3, #20
 800d7f6:	0092      	lsls	r2, r2, #2
 800d7f8:	4008      	ands	r0, r1
 800d7fa:	4684      	mov	ip, r0
 800d7fc:	189a      	adds	r2, r3, r2
 800d7fe:	420f      	tst	r7, r1
 800d800:	d02a      	beq.n	800d858 <__lshift+0xc8>
 800d802:	3101      	adds	r1, #1
 800d804:	1a09      	subs	r1, r1, r0
 800d806:	9105      	str	r1, [sp, #20]
 800d808:	2100      	movs	r1, #0
 800d80a:	9503      	str	r5, [sp, #12]
 800d80c:	4667      	mov	r7, ip
 800d80e:	6818      	ldr	r0, [r3, #0]
 800d810:	40b8      	lsls	r0, r7
 800d812:	4308      	orrs	r0, r1
 800d814:	9903      	ldr	r1, [sp, #12]
 800d816:	c101      	stmia	r1!, {r0}
 800d818:	9103      	str	r1, [sp, #12]
 800d81a:	9805      	ldr	r0, [sp, #20]
 800d81c:	cb02      	ldmia	r3!, {r1}
 800d81e:	40c1      	lsrs	r1, r0
 800d820:	429a      	cmp	r2, r3
 800d822:	d8f3      	bhi.n	800d80c <__lshift+0x7c>
 800d824:	0020      	movs	r0, r4
 800d826:	3015      	adds	r0, #21
 800d828:	2304      	movs	r3, #4
 800d82a:	4282      	cmp	r2, r0
 800d82c:	d304      	bcc.n	800d838 <__lshift+0xa8>
 800d82e:	1b13      	subs	r3, r2, r4
 800d830:	3b15      	subs	r3, #21
 800d832:	089b      	lsrs	r3, r3, #2
 800d834:	3301      	adds	r3, #1
 800d836:	009b      	lsls	r3, r3, #2
 800d838:	50e9      	str	r1, [r5, r3]
 800d83a:	2900      	cmp	r1, #0
 800d83c:	d002      	beq.n	800d844 <__lshift+0xb4>
 800d83e:	9b02      	ldr	r3, [sp, #8]
 800d840:	3302      	adds	r3, #2
 800d842:	9301      	str	r3, [sp, #4]
 800d844:	9b01      	ldr	r3, [sp, #4]
 800d846:	9804      	ldr	r0, [sp, #16]
 800d848:	3b01      	subs	r3, #1
 800d84a:	0021      	movs	r1, r4
 800d84c:	6133      	str	r3, [r6, #16]
 800d84e:	f7ff fdb3 	bl	800d3b8 <_Bfree>
 800d852:	0030      	movs	r0, r6
 800d854:	b007      	add	sp, #28
 800d856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d858:	cb02      	ldmia	r3!, {r1}
 800d85a:	c502      	stmia	r5!, {r1}
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d8fb      	bhi.n	800d858 <__lshift+0xc8>
 800d860:	e7f0      	b.n	800d844 <__lshift+0xb4>
 800d862:	46c0      	nop			; (mov r8, r8)
 800d864:	08014fd9 	.word	0x08014fd9
 800d868:	0801504a 	.word	0x0801504a

0800d86c <__mcmp>:
 800d86c:	b530      	push	{r4, r5, lr}
 800d86e:	690b      	ldr	r3, [r1, #16]
 800d870:	6904      	ldr	r4, [r0, #16]
 800d872:	0002      	movs	r2, r0
 800d874:	1ae0      	subs	r0, r4, r3
 800d876:	429c      	cmp	r4, r3
 800d878:	d10e      	bne.n	800d898 <__mcmp+0x2c>
 800d87a:	3214      	adds	r2, #20
 800d87c:	009b      	lsls	r3, r3, #2
 800d87e:	3114      	adds	r1, #20
 800d880:	0014      	movs	r4, r2
 800d882:	18c9      	adds	r1, r1, r3
 800d884:	18d2      	adds	r2, r2, r3
 800d886:	3a04      	subs	r2, #4
 800d888:	3904      	subs	r1, #4
 800d88a:	6815      	ldr	r5, [r2, #0]
 800d88c:	680b      	ldr	r3, [r1, #0]
 800d88e:	429d      	cmp	r5, r3
 800d890:	d003      	beq.n	800d89a <__mcmp+0x2e>
 800d892:	2001      	movs	r0, #1
 800d894:	429d      	cmp	r5, r3
 800d896:	d303      	bcc.n	800d8a0 <__mcmp+0x34>
 800d898:	bd30      	pop	{r4, r5, pc}
 800d89a:	4294      	cmp	r4, r2
 800d89c:	d3f3      	bcc.n	800d886 <__mcmp+0x1a>
 800d89e:	e7fb      	b.n	800d898 <__mcmp+0x2c>
 800d8a0:	4240      	negs	r0, r0
 800d8a2:	e7f9      	b.n	800d898 <__mcmp+0x2c>

0800d8a4 <__mdiff>:
 800d8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8a6:	000e      	movs	r6, r1
 800d8a8:	0007      	movs	r7, r0
 800d8aa:	0011      	movs	r1, r2
 800d8ac:	0030      	movs	r0, r6
 800d8ae:	b087      	sub	sp, #28
 800d8b0:	0014      	movs	r4, r2
 800d8b2:	f7ff ffdb 	bl	800d86c <__mcmp>
 800d8b6:	1e05      	subs	r5, r0, #0
 800d8b8:	d110      	bne.n	800d8dc <__mdiff+0x38>
 800d8ba:	0001      	movs	r1, r0
 800d8bc:	0038      	movs	r0, r7
 800d8be:	f7ff fd53 	bl	800d368 <_Balloc>
 800d8c2:	1e02      	subs	r2, r0, #0
 800d8c4:	d104      	bne.n	800d8d0 <__mdiff+0x2c>
 800d8c6:	4b3f      	ldr	r3, [pc, #252]	; (800d9c4 <__mdiff+0x120>)
 800d8c8:	483f      	ldr	r0, [pc, #252]	; (800d9c8 <__mdiff+0x124>)
 800d8ca:	4940      	ldr	r1, [pc, #256]	; (800d9cc <__mdiff+0x128>)
 800d8cc:	f003 f810 	bl	80108f0 <__assert_func>
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	6145      	str	r5, [r0, #20]
 800d8d4:	6103      	str	r3, [r0, #16]
 800d8d6:	0010      	movs	r0, r2
 800d8d8:	b007      	add	sp, #28
 800d8da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8dc:	2301      	movs	r3, #1
 800d8de:	9301      	str	r3, [sp, #4]
 800d8e0:	2800      	cmp	r0, #0
 800d8e2:	db04      	blt.n	800d8ee <__mdiff+0x4a>
 800d8e4:	0023      	movs	r3, r4
 800d8e6:	0034      	movs	r4, r6
 800d8e8:	001e      	movs	r6, r3
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	9301      	str	r3, [sp, #4]
 800d8ee:	0038      	movs	r0, r7
 800d8f0:	6861      	ldr	r1, [r4, #4]
 800d8f2:	f7ff fd39 	bl	800d368 <_Balloc>
 800d8f6:	1e02      	subs	r2, r0, #0
 800d8f8:	d103      	bne.n	800d902 <__mdiff+0x5e>
 800d8fa:	4b32      	ldr	r3, [pc, #200]	; (800d9c4 <__mdiff+0x120>)
 800d8fc:	4832      	ldr	r0, [pc, #200]	; (800d9c8 <__mdiff+0x124>)
 800d8fe:	4934      	ldr	r1, [pc, #208]	; (800d9d0 <__mdiff+0x12c>)
 800d900:	e7e4      	b.n	800d8cc <__mdiff+0x28>
 800d902:	9b01      	ldr	r3, [sp, #4]
 800d904:	2700      	movs	r7, #0
 800d906:	60c3      	str	r3, [r0, #12]
 800d908:	6920      	ldr	r0, [r4, #16]
 800d90a:	3414      	adds	r4, #20
 800d90c:	0083      	lsls	r3, r0, #2
 800d90e:	18e3      	adds	r3, r4, r3
 800d910:	0021      	movs	r1, r4
 800d912:	9401      	str	r4, [sp, #4]
 800d914:	0034      	movs	r4, r6
 800d916:	9302      	str	r3, [sp, #8]
 800d918:	6933      	ldr	r3, [r6, #16]
 800d91a:	3414      	adds	r4, #20
 800d91c:	009b      	lsls	r3, r3, #2
 800d91e:	18e3      	adds	r3, r4, r3
 800d920:	9303      	str	r3, [sp, #12]
 800d922:	0013      	movs	r3, r2
 800d924:	3314      	adds	r3, #20
 800d926:	469c      	mov	ip, r3
 800d928:	9305      	str	r3, [sp, #20]
 800d92a:	9104      	str	r1, [sp, #16]
 800d92c:	9b04      	ldr	r3, [sp, #16]
 800d92e:	cc02      	ldmia	r4!, {r1}
 800d930:	cb20      	ldmia	r3!, {r5}
 800d932:	9304      	str	r3, [sp, #16]
 800d934:	b2ab      	uxth	r3, r5
 800d936:	19df      	adds	r7, r3, r7
 800d938:	b28b      	uxth	r3, r1
 800d93a:	1afb      	subs	r3, r7, r3
 800d93c:	0c09      	lsrs	r1, r1, #16
 800d93e:	0c2d      	lsrs	r5, r5, #16
 800d940:	1a6d      	subs	r5, r5, r1
 800d942:	1419      	asrs	r1, r3, #16
 800d944:	1869      	adds	r1, r5, r1
 800d946:	b29b      	uxth	r3, r3
 800d948:	140f      	asrs	r7, r1, #16
 800d94a:	0409      	lsls	r1, r1, #16
 800d94c:	4319      	orrs	r1, r3
 800d94e:	4663      	mov	r3, ip
 800d950:	c302      	stmia	r3!, {r1}
 800d952:	469c      	mov	ip, r3
 800d954:	9b03      	ldr	r3, [sp, #12]
 800d956:	42a3      	cmp	r3, r4
 800d958:	d8e8      	bhi.n	800d92c <__mdiff+0x88>
 800d95a:	0031      	movs	r1, r6
 800d95c:	9c03      	ldr	r4, [sp, #12]
 800d95e:	3115      	adds	r1, #21
 800d960:	2304      	movs	r3, #4
 800d962:	428c      	cmp	r4, r1
 800d964:	d304      	bcc.n	800d970 <__mdiff+0xcc>
 800d966:	1ba3      	subs	r3, r4, r6
 800d968:	3b15      	subs	r3, #21
 800d96a:	089b      	lsrs	r3, r3, #2
 800d96c:	3301      	adds	r3, #1
 800d96e:	009b      	lsls	r3, r3, #2
 800d970:	9901      	ldr	r1, [sp, #4]
 800d972:	18cd      	adds	r5, r1, r3
 800d974:	9905      	ldr	r1, [sp, #20]
 800d976:	002e      	movs	r6, r5
 800d978:	18cb      	adds	r3, r1, r3
 800d97a:	469c      	mov	ip, r3
 800d97c:	9902      	ldr	r1, [sp, #8]
 800d97e:	428e      	cmp	r6, r1
 800d980:	d310      	bcc.n	800d9a4 <__mdiff+0x100>
 800d982:	9e02      	ldr	r6, [sp, #8]
 800d984:	1ee9      	subs	r1, r5, #3
 800d986:	2400      	movs	r4, #0
 800d988:	428e      	cmp	r6, r1
 800d98a:	d304      	bcc.n	800d996 <__mdiff+0xf2>
 800d98c:	0031      	movs	r1, r6
 800d98e:	3103      	adds	r1, #3
 800d990:	1b49      	subs	r1, r1, r5
 800d992:	0889      	lsrs	r1, r1, #2
 800d994:	008c      	lsls	r4, r1, #2
 800d996:	191b      	adds	r3, r3, r4
 800d998:	3b04      	subs	r3, #4
 800d99a:	6819      	ldr	r1, [r3, #0]
 800d99c:	2900      	cmp	r1, #0
 800d99e:	d00f      	beq.n	800d9c0 <__mdiff+0x11c>
 800d9a0:	6110      	str	r0, [r2, #16]
 800d9a2:	e798      	b.n	800d8d6 <__mdiff+0x32>
 800d9a4:	ce02      	ldmia	r6!, {r1}
 800d9a6:	b28c      	uxth	r4, r1
 800d9a8:	19e4      	adds	r4, r4, r7
 800d9aa:	0c0f      	lsrs	r7, r1, #16
 800d9ac:	1421      	asrs	r1, r4, #16
 800d9ae:	1879      	adds	r1, r7, r1
 800d9b0:	b2a4      	uxth	r4, r4
 800d9b2:	140f      	asrs	r7, r1, #16
 800d9b4:	0409      	lsls	r1, r1, #16
 800d9b6:	4321      	orrs	r1, r4
 800d9b8:	4664      	mov	r4, ip
 800d9ba:	c402      	stmia	r4!, {r1}
 800d9bc:	46a4      	mov	ip, r4
 800d9be:	e7dd      	b.n	800d97c <__mdiff+0xd8>
 800d9c0:	3801      	subs	r0, #1
 800d9c2:	e7e9      	b.n	800d998 <__mdiff+0xf4>
 800d9c4:	08014fd9 	.word	0x08014fd9
 800d9c8:	0801504a 	.word	0x0801504a
 800d9cc:	00000237 	.word	0x00000237
 800d9d0:	00000245 	.word	0x00000245

0800d9d4 <__ulp>:
 800d9d4:	2000      	movs	r0, #0
 800d9d6:	4b0b      	ldr	r3, [pc, #44]	; (800da04 <__ulp+0x30>)
 800d9d8:	4019      	ands	r1, r3
 800d9da:	4b0b      	ldr	r3, [pc, #44]	; (800da08 <__ulp+0x34>)
 800d9dc:	18c9      	adds	r1, r1, r3
 800d9de:	4281      	cmp	r1, r0
 800d9e0:	dc06      	bgt.n	800d9f0 <__ulp+0x1c>
 800d9e2:	4249      	negs	r1, r1
 800d9e4:	150b      	asrs	r3, r1, #20
 800d9e6:	2b13      	cmp	r3, #19
 800d9e8:	dc03      	bgt.n	800d9f2 <__ulp+0x1e>
 800d9ea:	2180      	movs	r1, #128	; 0x80
 800d9ec:	0309      	lsls	r1, r1, #12
 800d9ee:	4119      	asrs	r1, r3
 800d9f0:	4770      	bx	lr
 800d9f2:	3b14      	subs	r3, #20
 800d9f4:	2001      	movs	r0, #1
 800d9f6:	2b1e      	cmp	r3, #30
 800d9f8:	dc02      	bgt.n	800da00 <__ulp+0x2c>
 800d9fa:	2080      	movs	r0, #128	; 0x80
 800d9fc:	0600      	lsls	r0, r0, #24
 800d9fe:	40d8      	lsrs	r0, r3
 800da00:	2100      	movs	r1, #0
 800da02:	e7f5      	b.n	800d9f0 <__ulp+0x1c>
 800da04:	7ff00000 	.word	0x7ff00000
 800da08:	fcc00000 	.word	0xfcc00000

0800da0c <__b2d>:
 800da0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da0e:	0006      	movs	r6, r0
 800da10:	6903      	ldr	r3, [r0, #16]
 800da12:	3614      	adds	r6, #20
 800da14:	009b      	lsls	r3, r3, #2
 800da16:	18f3      	adds	r3, r6, r3
 800da18:	1f1d      	subs	r5, r3, #4
 800da1a:	682c      	ldr	r4, [r5, #0]
 800da1c:	000f      	movs	r7, r1
 800da1e:	0020      	movs	r0, r4
 800da20:	9301      	str	r3, [sp, #4]
 800da22:	f7ff fd63 	bl	800d4ec <__hi0bits>
 800da26:	2220      	movs	r2, #32
 800da28:	1a12      	subs	r2, r2, r0
 800da2a:	603a      	str	r2, [r7, #0]
 800da2c:	0003      	movs	r3, r0
 800da2e:	4a1c      	ldr	r2, [pc, #112]	; (800daa0 <__b2d+0x94>)
 800da30:	280a      	cmp	r0, #10
 800da32:	dc15      	bgt.n	800da60 <__b2d+0x54>
 800da34:	210b      	movs	r1, #11
 800da36:	0027      	movs	r7, r4
 800da38:	1a09      	subs	r1, r1, r0
 800da3a:	40cf      	lsrs	r7, r1
 800da3c:	433a      	orrs	r2, r7
 800da3e:	468c      	mov	ip, r1
 800da40:	0011      	movs	r1, r2
 800da42:	2200      	movs	r2, #0
 800da44:	42ae      	cmp	r6, r5
 800da46:	d202      	bcs.n	800da4e <__b2d+0x42>
 800da48:	9a01      	ldr	r2, [sp, #4]
 800da4a:	3a08      	subs	r2, #8
 800da4c:	6812      	ldr	r2, [r2, #0]
 800da4e:	3315      	adds	r3, #21
 800da50:	409c      	lsls	r4, r3
 800da52:	4663      	mov	r3, ip
 800da54:	0027      	movs	r7, r4
 800da56:	40da      	lsrs	r2, r3
 800da58:	4317      	orrs	r7, r2
 800da5a:	0038      	movs	r0, r7
 800da5c:	b003      	add	sp, #12
 800da5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da60:	2700      	movs	r7, #0
 800da62:	42ae      	cmp	r6, r5
 800da64:	d202      	bcs.n	800da6c <__b2d+0x60>
 800da66:	9d01      	ldr	r5, [sp, #4]
 800da68:	3d08      	subs	r5, #8
 800da6a:	682f      	ldr	r7, [r5, #0]
 800da6c:	210b      	movs	r1, #11
 800da6e:	4249      	negs	r1, r1
 800da70:	468c      	mov	ip, r1
 800da72:	449c      	add	ip, r3
 800da74:	2b0b      	cmp	r3, #11
 800da76:	d010      	beq.n	800da9a <__b2d+0x8e>
 800da78:	4661      	mov	r1, ip
 800da7a:	2320      	movs	r3, #32
 800da7c:	408c      	lsls	r4, r1
 800da7e:	1a5b      	subs	r3, r3, r1
 800da80:	0039      	movs	r1, r7
 800da82:	40d9      	lsrs	r1, r3
 800da84:	430c      	orrs	r4, r1
 800da86:	4322      	orrs	r2, r4
 800da88:	0011      	movs	r1, r2
 800da8a:	2200      	movs	r2, #0
 800da8c:	42b5      	cmp	r5, r6
 800da8e:	d901      	bls.n	800da94 <__b2d+0x88>
 800da90:	3d04      	subs	r5, #4
 800da92:	682a      	ldr	r2, [r5, #0]
 800da94:	4664      	mov	r4, ip
 800da96:	40a7      	lsls	r7, r4
 800da98:	e7dd      	b.n	800da56 <__b2d+0x4a>
 800da9a:	4322      	orrs	r2, r4
 800da9c:	0011      	movs	r1, r2
 800da9e:	e7dc      	b.n	800da5a <__b2d+0x4e>
 800daa0:	3ff00000 	.word	0x3ff00000

0800daa4 <__d2b>:
 800daa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800daa6:	2101      	movs	r1, #1
 800daa8:	0014      	movs	r4, r2
 800daaa:	001d      	movs	r5, r3
 800daac:	9f08      	ldr	r7, [sp, #32]
 800daae:	f7ff fc5b 	bl	800d368 <_Balloc>
 800dab2:	1e06      	subs	r6, r0, #0
 800dab4:	d105      	bne.n	800dac2 <__d2b+0x1e>
 800dab6:	0032      	movs	r2, r6
 800dab8:	4b24      	ldr	r3, [pc, #144]	; (800db4c <__d2b+0xa8>)
 800daba:	4825      	ldr	r0, [pc, #148]	; (800db50 <__d2b+0xac>)
 800dabc:	4925      	ldr	r1, [pc, #148]	; (800db54 <__d2b+0xb0>)
 800dabe:	f002 ff17 	bl	80108f0 <__assert_func>
 800dac2:	032b      	lsls	r3, r5, #12
 800dac4:	006d      	lsls	r5, r5, #1
 800dac6:	0b1b      	lsrs	r3, r3, #12
 800dac8:	0d6d      	lsrs	r5, r5, #21
 800daca:	d125      	bne.n	800db18 <__d2b+0x74>
 800dacc:	9301      	str	r3, [sp, #4]
 800dace:	2c00      	cmp	r4, #0
 800dad0:	d028      	beq.n	800db24 <__d2b+0x80>
 800dad2:	4668      	mov	r0, sp
 800dad4:	9400      	str	r4, [sp, #0]
 800dad6:	f7ff fd23 	bl	800d520 <__lo0bits>
 800dada:	9b01      	ldr	r3, [sp, #4]
 800dadc:	9900      	ldr	r1, [sp, #0]
 800dade:	2800      	cmp	r0, #0
 800dae0:	d01e      	beq.n	800db20 <__d2b+0x7c>
 800dae2:	2220      	movs	r2, #32
 800dae4:	001c      	movs	r4, r3
 800dae6:	1a12      	subs	r2, r2, r0
 800dae8:	4094      	lsls	r4, r2
 800daea:	0022      	movs	r2, r4
 800daec:	40c3      	lsrs	r3, r0
 800daee:	430a      	orrs	r2, r1
 800daf0:	6172      	str	r2, [r6, #20]
 800daf2:	9301      	str	r3, [sp, #4]
 800daf4:	9c01      	ldr	r4, [sp, #4]
 800daf6:	61b4      	str	r4, [r6, #24]
 800daf8:	1e63      	subs	r3, r4, #1
 800dafa:	419c      	sbcs	r4, r3
 800dafc:	3401      	adds	r4, #1
 800dafe:	6134      	str	r4, [r6, #16]
 800db00:	2d00      	cmp	r5, #0
 800db02:	d017      	beq.n	800db34 <__d2b+0x90>
 800db04:	2435      	movs	r4, #53	; 0x35
 800db06:	4b14      	ldr	r3, [pc, #80]	; (800db58 <__d2b+0xb4>)
 800db08:	18ed      	adds	r5, r5, r3
 800db0a:	182d      	adds	r5, r5, r0
 800db0c:	603d      	str	r5, [r7, #0]
 800db0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db10:	1a24      	subs	r4, r4, r0
 800db12:	601c      	str	r4, [r3, #0]
 800db14:	0030      	movs	r0, r6
 800db16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800db18:	2280      	movs	r2, #128	; 0x80
 800db1a:	0352      	lsls	r2, r2, #13
 800db1c:	4313      	orrs	r3, r2
 800db1e:	e7d5      	b.n	800dacc <__d2b+0x28>
 800db20:	6171      	str	r1, [r6, #20]
 800db22:	e7e7      	b.n	800daf4 <__d2b+0x50>
 800db24:	a801      	add	r0, sp, #4
 800db26:	f7ff fcfb 	bl	800d520 <__lo0bits>
 800db2a:	9b01      	ldr	r3, [sp, #4]
 800db2c:	2401      	movs	r4, #1
 800db2e:	6173      	str	r3, [r6, #20]
 800db30:	3020      	adds	r0, #32
 800db32:	e7e4      	b.n	800dafe <__d2b+0x5a>
 800db34:	4b09      	ldr	r3, [pc, #36]	; (800db5c <__d2b+0xb8>)
 800db36:	18c0      	adds	r0, r0, r3
 800db38:	4b09      	ldr	r3, [pc, #36]	; (800db60 <__d2b+0xbc>)
 800db3a:	6038      	str	r0, [r7, #0]
 800db3c:	18e3      	adds	r3, r4, r3
 800db3e:	009b      	lsls	r3, r3, #2
 800db40:	18f3      	adds	r3, r6, r3
 800db42:	6958      	ldr	r0, [r3, #20]
 800db44:	f7ff fcd2 	bl	800d4ec <__hi0bits>
 800db48:	0164      	lsls	r4, r4, #5
 800db4a:	e7e0      	b.n	800db0e <__d2b+0x6a>
 800db4c:	08014fd9 	.word	0x08014fd9
 800db50:	0801504a 	.word	0x0801504a
 800db54:	0000030f 	.word	0x0000030f
 800db58:	fffffbcd 	.word	0xfffffbcd
 800db5c:	fffffbce 	.word	0xfffffbce
 800db60:	3fffffff 	.word	0x3fffffff

0800db64 <__ratio>:
 800db64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db66:	b087      	sub	sp, #28
 800db68:	000f      	movs	r7, r1
 800db6a:	a904      	add	r1, sp, #16
 800db6c:	0006      	movs	r6, r0
 800db6e:	f7ff ff4d 	bl	800da0c <__b2d>
 800db72:	9000      	str	r0, [sp, #0]
 800db74:	9101      	str	r1, [sp, #4]
 800db76:	9c00      	ldr	r4, [sp, #0]
 800db78:	9d01      	ldr	r5, [sp, #4]
 800db7a:	0038      	movs	r0, r7
 800db7c:	a905      	add	r1, sp, #20
 800db7e:	f7ff ff45 	bl	800da0c <__b2d>
 800db82:	9002      	str	r0, [sp, #8]
 800db84:	9103      	str	r1, [sp, #12]
 800db86:	9a02      	ldr	r2, [sp, #8]
 800db88:	9b03      	ldr	r3, [sp, #12]
 800db8a:	6930      	ldr	r0, [r6, #16]
 800db8c:	6939      	ldr	r1, [r7, #16]
 800db8e:	9e04      	ldr	r6, [sp, #16]
 800db90:	1a40      	subs	r0, r0, r1
 800db92:	9905      	ldr	r1, [sp, #20]
 800db94:	0140      	lsls	r0, r0, #5
 800db96:	1a71      	subs	r1, r6, r1
 800db98:	1841      	adds	r1, r0, r1
 800db9a:	0508      	lsls	r0, r1, #20
 800db9c:	2900      	cmp	r1, #0
 800db9e:	dd07      	ble.n	800dbb0 <__ratio+0x4c>
 800dba0:	9901      	ldr	r1, [sp, #4]
 800dba2:	1845      	adds	r5, r0, r1
 800dba4:	0020      	movs	r0, r4
 800dba6:	0029      	movs	r1, r5
 800dba8:	f7f3 f966 	bl	8000e78 <__aeabi_ddiv>
 800dbac:	b007      	add	sp, #28
 800dbae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbb0:	9903      	ldr	r1, [sp, #12]
 800dbb2:	1a0b      	subs	r3, r1, r0
 800dbb4:	e7f6      	b.n	800dba4 <__ratio+0x40>

0800dbb6 <__copybits>:
 800dbb6:	b570      	push	{r4, r5, r6, lr}
 800dbb8:	0014      	movs	r4, r2
 800dbba:	0005      	movs	r5, r0
 800dbbc:	3901      	subs	r1, #1
 800dbbe:	6913      	ldr	r3, [r2, #16]
 800dbc0:	1149      	asrs	r1, r1, #5
 800dbc2:	3101      	adds	r1, #1
 800dbc4:	0089      	lsls	r1, r1, #2
 800dbc6:	3414      	adds	r4, #20
 800dbc8:	009b      	lsls	r3, r3, #2
 800dbca:	1841      	adds	r1, r0, r1
 800dbcc:	18e3      	adds	r3, r4, r3
 800dbce:	42a3      	cmp	r3, r4
 800dbd0:	d80d      	bhi.n	800dbee <__copybits+0x38>
 800dbd2:	0014      	movs	r4, r2
 800dbd4:	3411      	adds	r4, #17
 800dbd6:	2500      	movs	r5, #0
 800dbd8:	429c      	cmp	r4, r3
 800dbda:	d803      	bhi.n	800dbe4 <__copybits+0x2e>
 800dbdc:	1a9b      	subs	r3, r3, r2
 800dbde:	3b11      	subs	r3, #17
 800dbe0:	089b      	lsrs	r3, r3, #2
 800dbe2:	009d      	lsls	r5, r3, #2
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	1940      	adds	r0, r0, r5
 800dbe8:	4281      	cmp	r1, r0
 800dbea:	d803      	bhi.n	800dbf4 <__copybits+0x3e>
 800dbec:	bd70      	pop	{r4, r5, r6, pc}
 800dbee:	cc40      	ldmia	r4!, {r6}
 800dbf0:	c540      	stmia	r5!, {r6}
 800dbf2:	e7ec      	b.n	800dbce <__copybits+0x18>
 800dbf4:	c008      	stmia	r0!, {r3}
 800dbf6:	e7f7      	b.n	800dbe8 <__copybits+0x32>

0800dbf8 <__any_on>:
 800dbf8:	0002      	movs	r2, r0
 800dbfa:	6900      	ldr	r0, [r0, #16]
 800dbfc:	b510      	push	{r4, lr}
 800dbfe:	3214      	adds	r2, #20
 800dc00:	114b      	asrs	r3, r1, #5
 800dc02:	4298      	cmp	r0, r3
 800dc04:	db13      	blt.n	800dc2e <__any_on+0x36>
 800dc06:	dd0c      	ble.n	800dc22 <__any_on+0x2a>
 800dc08:	241f      	movs	r4, #31
 800dc0a:	0008      	movs	r0, r1
 800dc0c:	4020      	ands	r0, r4
 800dc0e:	4221      	tst	r1, r4
 800dc10:	d007      	beq.n	800dc22 <__any_on+0x2a>
 800dc12:	0099      	lsls	r1, r3, #2
 800dc14:	588c      	ldr	r4, [r1, r2]
 800dc16:	0021      	movs	r1, r4
 800dc18:	40c1      	lsrs	r1, r0
 800dc1a:	4081      	lsls	r1, r0
 800dc1c:	2001      	movs	r0, #1
 800dc1e:	428c      	cmp	r4, r1
 800dc20:	d104      	bne.n	800dc2c <__any_on+0x34>
 800dc22:	009b      	lsls	r3, r3, #2
 800dc24:	18d3      	adds	r3, r2, r3
 800dc26:	4293      	cmp	r3, r2
 800dc28:	d803      	bhi.n	800dc32 <__any_on+0x3a>
 800dc2a:	2000      	movs	r0, #0
 800dc2c:	bd10      	pop	{r4, pc}
 800dc2e:	0003      	movs	r3, r0
 800dc30:	e7f7      	b.n	800dc22 <__any_on+0x2a>
 800dc32:	3b04      	subs	r3, #4
 800dc34:	6819      	ldr	r1, [r3, #0]
 800dc36:	2900      	cmp	r1, #0
 800dc38:	d0f5      	beq.n	800dc26 <__any_on+0x2e>
 800dc3a:	2001      	movs	r0, #1
 800dc3c:	e7f6      	b.n	800dc2c <__any_on+0x34>

0800dc3e <__ascii_wctomb>:
 800dc3e:	0003      	movs	r3, r0
 800dc40:	1e08      	subs	r0, r1, #0
 800dc42:	d005      	beq.n	800dc50 <__ascii_wctomb+0x12>
 800dc44:	2aff      	cmp	r2, #255	; 0xff
 800dc46:	d904      	bls.n	800dc52 <__ascii_wctomb+0x14>
 800dc48:	228a      	movs	r2, #138	; 0x8a
 800dc4a:	2001      	movs	r0, #1
 800dc4c:	601a      	str	r2, [r3, #0]
 800dc4e:	4240      	negs	r0, r0
 800dc50:	4770      	bx	lr
 800dc52:	2001      	movs	r0, #1
 800dc54:	700a      	strb	r2, [r1, #0]
 800dc56:	e7fb      	b.n	800dc50 <__ascii_wctomb+0x12>

0800dc58 <_svfprintf_r>:
 800dc58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc5a:	b0d9      	sub	sp, #356	; 0x164
 800dc5c:	001c      	movs	r4, r3
 800dc5e:	910b      	str	r1, [sp, #44]	; 0x2c
 800dc60:	9208      	str	r2, [sp, #32]
 800dc62:	900a      	str	r0, [sp, #40]	; 0x28
 800dc64:	f002 fdae 	bl	80107c4 <_localeconv_r>
 800dc68:	6803      	ldr	r3, [r0, #0]
 800dc6a:	0018      	movs	r0, r3
 800dc6c:	931c      	str	r3, [sp, #112]	; 0x70
 800dc6e:	f7f2 fa49 	bl	8000104 <strlen>
 800dc72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc74:	9016      	str	r0, [sp, #88]	; 0x58
 800dc76:	899b      	ldrh	r3, [r3, #12]
 800dc78:	061b      	lsls	r3, r3, #24
 800dc7a:	d517      	bpl.n	800dcac <_svfprintf_r+0x54>
 800dc7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc7e:	691b      	ldr	r3, [r3, #16]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d113      	bne.n	800dcac <_svfprintf_r+0x54>
 800dc84:	2140      	movs	r1, #64	; 0x40
 800dc86:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dc88:	f7fd fb6e 	bl	800b368 <_malloc_r>
 800dc8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc8e:	6018      	str	r0, [r3, #0]
 800dc90:	6118      	str	r0, [r3, #16]
 800dc92:	2800      	cmp	r0, #0
 800dc94:	d107      	bne.n	800dca6 <_svfprintf_r+0x4e>
 800dc96:	230c      	movs	r3, #12
 800dc98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc9a:	6013      	str	r3, [r2, #0]
 800dc9c:	3b0d      	subs	r3, #13
 800dc9e:	9317      	str	r3, [sp, #92]	; 0x5c
 800dca0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800dca2:	b059      	add	sp, #356	; 0x164
 800dca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dca6:	2340      	movs	r3, #64	; 0x40
 800dca8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dcaa:	6153      	str	r3, [r2, #20]
 800dcac:	2300      	movs	r3, #0
 800dcae:	2200      	movs	r2, #0
 800dcb0:	932e      	str	r3, [sp, #184]	; 0xb8
 800dcb2:	932d      	str	r3, [sp, #180]	; 0xb4
 800dcb4:	930e      	str	r3, [sp, #56]	; 0x38
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	9214      	str	r2, [sp, #80]	; 0x50
 800dcba:	9315      	str	r3, [sp, #84]	; 0x54
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	af2f      	add	r7, sp, #188	; 0xbc
 800dcc0:	972c      	str	r7, [sp, #176]	; 0xb0
 800dcc2:	931f      	str	r3, [sp, #124]	; 0x7c
 800dcc4:	931e      	str	r3, [sp, #120]	; 0x78
 800dcc6:	9312      	str	r3, [sp, #72]	; 0x48
 800dcc8:	931b      	str	r3, [sp, #108]	; 0x6c
 800dcca:	931d      	str	r3, [sp, #116]	; 0x74
 800dccc:	9317      	str	r3, [sp, #92]	; 0x5c
 800dcce:	9d08      	ldr	r5, [sp, #32]
 800dcd0:	782b      	ldrb	r3, [r5, #0]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d002      	beq.n	800dcdc <_svfprintf_r+0x84>
 800dcd6:	2b25      	cmp	r3, #37	; 0x25
 800dcd8:	d000      	beq.n	800dcdc <_svfprintf_r+0x84>
 800dcda:	e091      	b.n	800de00 <_svfprintf_r+0x1a8>
 800dcdc:	9b08      	ldr	r3, [sp, #32]
 800dcde:	1aee      	subs	r6, r5, r3
 800dce0:	429d      	cmp	r5, r3
 800dce2:	d016      	beq.n	800dd12 <_svfprintf_r+0xba>
 800dce4:	603b      	str	r3, [r7, #0]
 800dce6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dce8:	607e      	str	r6, [r7, #4]
 800dcea:	199b      	adds	r3, r3, r6
 800dcec:	932e      	str	r3, [sp, #184]	; 0xb8
 800dcee:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dcf0:	3708      	adds	r7, #8
 800dcf2:	3301      	adds	r3, #1
 800dcf4:	932d      	str	r3, [sp, #180]	; 0xb4
 800dcf6:	2b07      	cmp	r3, #7
 800dcf8:	dd08      	ble.n	800dd0c <_svfprintf_r+0xb4>
 800dcfa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dcfc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dcfe:	aa2c      	add	r2, sp, #176	; 0xb0
 800dd00:	f004 f8c0 	bl	8011e84 <__ssprint_r>
 800dd04:	2800      	cmp	r0, #0
 800dd06:	d000      	beq.n	800dd0a <_svfprintf_r+0xb2>
 800dd08:	e1cf      	b.n	800e0aa <_svfprintf_r+0x452>
 800dd0a:	af2f      	add	r7, sp, #188	; 0xbc
 800dd0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dd0e:	199b      	adds	r3, r3, r6
 800dd10:	9317      	str	r3, [sp, #92]	; 0x5c
 800dd12:	782b      	ldrb	r3, [r5, #0]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d101      	bne.n	800dd1c <_svfprintf_r+0xc4>
 800dd18:	f001 f99e 	bl	800f058 <_svfprintf_r+0x1400>
 800dd1c:	221b      	movs	r2, #27
 800dd1e:	2300      	movs	r3, #0
 800dd20:	a91e      	add	r1, sp, #120	; 0x78
 800dd22:	1852      	adds	r2, r2, r1
 800dd24:	7013      	strb	r3, [r2, #0]
 800dd26:	2201      	movs	r2, #1
 800dd28:	001e      	movs	r6, r3
 800dd2a:	4252      	negs	r2, r2
 800dd2c:	3501      	adds	r5, #1
 800dd2e:	9209      	str	r2, [sp, #36]	; 0x24
 800dd30:	9318      	str	r3, [sp, #96]	; 0x60
 800dd32:	1c6b      	adds	r3, r5, #1
 800dd34:	9313      	str	r3, [sp, #76]	; 0x4c
 800dd36:	782b      	ldrb	r3, [r5, #0]
 800dd38:	930f      	str	r3, [sp, #60]	; 0x3c
 800dd3a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800dd3c:	3820      	subs	r0, #32
 800dd3e:	285a      	cmp	r0, #90	; 0x5a
 800dd40:	d901      	bls.n	800dd46 <_svfprintf_r+0xee>
 800dd42:	f000 fe20 	bl	800e986 <_svfprintf_r+0xd2e>
 800dd46:	f7f2 f9ef 	bl	8000128 <__gnu_thumb1_case_uhi>
 800dd4a:	0078      	.short	0x0078
 800dd4c:	061e061e 	.word	0x061e061e
 800dd50:	061e0082 	.word	0x061e0082
 800dd54:	061e061e 	.word	0x061e061e
 800dd58:	061e005d 	.word	0x061e005d
 800dd5c:	0084061e 	.word	0x0084061e
 800dd60:	061e008c 	.word	0x061e008c
 800dd64:	0091008a 	.word	0x0091008a
 800dd68:	00b2061e 	.word	0x00b2061e
 800dd6c:	00b400b4 	.word	0x00b400b4
 800dd70:	00b400b4 	.word	0x00b400b4
 800dd74:	00b400b4 	.word	0x00b400b4
 800dd78:	00b400b4 	.word	0x00b400b4
 800dd7c:	061e00b4 	.word	0x061e00b4
 800dd80:	061e061e 	.word	0x061e061e
 800dd84:	061e061e 	.word	0x061e061e
 800dd88:	061e061e 	.word	0x061e061e
 800dd8c:	061e013b 	.word	0x061e013b
 800dd90:	00f400e0 	.word	0x00f400e0
 800dd94:	013b013b 	.word	0x013b013b
 800dd98:	061e013b 	.word	0x061e013b
 800dd9c:	061e061e 	.word	0x061e061e
 800dda0:	00c7061e 	.word	0x00c7061e
 800dda4:	061e061e 	.word	0x061e061e
 800dda8:	061e04c7 	.word	0x061e04c7
 800ddac:	061e061e 	.word	0x061e061e
 800ddb0:	061e050a 	.word	0x061e050a
 800ddb4:	061e052a 	.word	0x061e052a
 800ddb8:	055c061e 	.word	0x055c061e
 800ddbc:	061e061e 	.word	0x061e061e
 800ddc0:	061e061e 	.word	0x061e061e
 800ddc4:	061e061e 	.word	0x061e061e
 800ddc8:	061e061e 	.word	0x061e061e
 800ddcc:	061e013b 	.word	0x061e013b
 800ddd0:	00f600e0 	.word	0x00f600e0
 800ddd4:	013b013b 	.word	0x013b013b
 800ddd8:	00c9013b 	.word	0x00c9013b
 800dddc:	00dc00f6 	.word	0x00dc00f6
 800dde0:	00d5061e 	.word	0x00d5061e
 800dde4:	04a7061e 	.word	0x04a7061e
 800dde8:	04fa04c9 	.word	0x04fa04c9
 800ddec:	061e00dc 	.word	0x061e00dc
 800ddf0:	0080050a 	.word	0x0080050a
 800ddf4:	061e052c 	.word	0x061e052c
 800ddf8:	057c061e 	.word	0x057c061e
 800ddfc:	0080061e 	.word	0x0080061e
 800de00:	3501      	adds	r5, #1
 800de02:	e765      	b.n	800dcd0 <_svfprintf_r+0x78>
 800de04:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de06:	f002 fcdd 	bl	80107c4 <_localeconv_r>
 800de0a:	6843      	ldr	r3, [r0, #4]
 800de0c:	0018      	movs	r0, r3
 800de0e:	931d      	str	r3, [sp, #116]	; 0x74
 800de10:	f7f2 f978 	bl	8000104 <strlen>
 800de14:	901b      	str	r0, [sp, #108]	; 0x6c
 800de16:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de18:	f002 fcd4 	bl	80107c4 <_localeconv_r>
 800de1c:	6883      	ldr	r3, [r0, #8]
 800de1e:	9312      	str	r3, [sp, #72]	; 0x48
 800de20:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800de22:	2b00      	cmp	r3, #0
 800de24:	d011      	beq.n	800de4a <_svfprintf_r+0x1f2>
 800de26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d00e      	beq.n	800de4a <_svfprintf_r+0x1f2>
 800de2c:	781b      	ldrb	r3, [r3, #0]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d00b      	beq.n	800de4a <_svfprintf_r+0x1f2>
 800de32:	2380      	movs	r3, #128	; 0x80
 800de34:	00db      	lsls	r3, r3, #3
 800de36:	431e      	orrs	r6, r3
 800de38:	e007      	b.n	800de4a <_svfprintf_r+0x1f2>
 800de3a:	231b      	movs	r3, #27
 800de3c:	aa1e      	add	r2, sp, #120	; 0x78
 800de3e:	189b      	adds	r3, r3, r2
 800de40:	781a      	ldrb	r2, [r3, #0]
 800de42:	2a00      	cmp	r2, #0
 800de44:	d101      	bne.n	800de4a <_svfprintf_r+0x1f2>
 800de46:	3220      	adds	r2, #32
 800de48:	701a      	strb	r2, [r3, #0]
 800de4a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800de4c:	e771      	b.n	800dd32 <_svfprintf_r+0xda>
 800de4e:	2301      	movs	r3, #1
 800de50:	e7f1      	b.n	800de36 <_svfprintf_r+0x1de>
 800de52:	cc08      	ldmia	r4!, {r3}
 800de54:	9318      	str	r3, [sp, #96]	; 0x60
 800de56:	2b00      	cmp	r3, #0
 800de58:	daf7      	bge.n	800de4a <_svfprintf_r+0x1f2>
 800de5a:	425b      	negs	r3, r3
 800de5c:	9318      	str	r3, [sp, #96]	; 0x60
 800de5e:	2304      	movs	r3, #4
 800de60:	e7e9      	b.n	800de36 <_svfprintf_r+0x1de>
 800de62:	231b      	movs	r3, #27
 800de64:	aa1e      	add	r2, sp, #120	; 0x78
 800de66:	189b      	adds	r3, r3, r2
 800de68:	222b      	movs	r2, #43	; 0x2b
 800de6a:	e7ed      	b.n	800de48 <_svfprintf_r+0x1f0>
 800de6c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800de6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800de70:	7812      	ldrb	r2, [r2, #0]
 800de72:	3301      	adds	r3, #1
 800de74:	920f      	str	r2, [sp, #60]	; 0x3c
 800de76:	2a2a      	cmp	r2, #42	; 0x2a
 800de78:	d010      	beq.n	800de9c <_svfprintf_r+0x244>
 800de7a:	2200      	movs	r2, #0
 800de7c:	9209      	str	r2, [sp, #36]	; 0x24
 800de7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800de80:	9313      	str	r3, [sp, #76]	; 0x4c
 800de82:	3a30      	subs	r2, #48	; 0x30
 800de84:	2a09      	cmp	r2, #9
 800de86:	d900      	bls.n	800de8a <_svfprintf_r+0x232>
 800de88:	e757      	b.n	800dd3a <_svfprintf_r+0xe2>
 800de8a:	200a      	movs	r0, #10
 800de8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800de8e:	4341      	muls	r1, r0
 800de90:	188a      	adds	r2, r1, r2
 800de92:	9209      	str	r2, [sp, #36]	; 0x24
 800de94:	781a      	ldrb	r2, [r3, #0]
 800de96:	3301      	adds	r3, #1
 800de98:	920f      	str	r2, [sp, #60]	; 0x3c
 800de9a:	e7f0      	b.n	800de7e <_svfprintf_r+0x226>
 800de9c:	cc04      	ldmia	r4!, {r2}
 800de9e:	9209      	str	r2, [sp, #36]	; 0x24
 800dea0:	2a00      	cmp	r2, #0
 800dea2:	da02      	bge.n	800deaa <_svfprintf_r+0x252>
 800dea4:	2201      	movs	r2, #1
 800dea6:	4252      	negs	r2, r2
 800dea8:	9209      	str	r2, [sp, #36]	; 0x24
 800deaa:	9313      	str	r3, [sp, #76]	; 0x4c
 800deac:	e7cd      	b.n	800de4a <_svfprintf_r+0x1f2>
 800deae:	2380      	movs	r3, #128	; 0x80
 800deb0:	e7c1      	b.n	800de36 <_svfprintf_r+0x1de>
 800deb2:	2200      	movs	r2, #0
 800deb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800deb6:	9218      	str	r2, [sp, #96]	; 0x60
 800deb8:	210a      	movs	r1, #10
 800deba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800debc:	434a      	muls	r2, r1
 800debe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dec0:	3930      	subs	r1, #48	; 0x30
 800dec2:	188a      	adds	r2, r1, r2
 800dec4:	9218      	str	r2, [sp, #96]	; 0x60
 800dec6:	001a      	movs	r2, r3
 800dec8:	7812      	ldrb	r2, [r2, #0]
 800deca:	3301      	adds	r3, #1
 800decc:	920f      	str	r2, [sp, #60]	; 0x3c
 800dece:	3a30      	subs	r2, #48	; 0x30
 800ded0:	9313      	str	r3, [sp, #76]	; 0x4c
 800ded2:	2a09      	cmp	r2, #9
 800ded4:	d9f0      	bls.n	800deb8 <_svfprintf_r+0x260>
 800ded6:	e730      	b.n	800dd3a <_svfprintf_r+0xe2>
 800ded8:	2308      	movs	r3, #8
 800deda:	e7ac      	b.n	800de36 <_svfprintf_r+0x1de>
 800dedc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dede:	781b      	ldrb	r3, [r3, #0]
 800dee0:	2b68      	cmp	r3, #104	; 0x68
 800dee2:	d105      	bne.n	800def0 <_svfprintf_r+0x298>
 800dee4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dee6:	3301      	adds	r3, #1
 800dee8:	9313      	str	r3, [sp, #76]	; 0x4c
 800deea:	2380      	movs	r3, #128	; 0x80
 800deec:	009b      	lsls	r3, r3, #2
 800deee:	e7a2      	b.n	800de36 <_svfprintf_r+0x1de>
 800def0:	2340      	movs	r3, #64	; 0x40
 800def2:	e7a0      	b.n	800de36 <_svfprintf_r+0x1de>
 800def4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800def6:	781b      	ldrb	r3, [r3, #0]
 800def8:	2b6c      	cmp	r3, #108	; 0x6c
 800defa:	d104      	bne.n	800df06 <_svfprintf_r+0x2ae>
 800defc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800defe:	3301      	adds	r3, #1
 800df00:	9313      	str	r3, [sp, #76]	; 0x4c
 800df02:	2320      	movs	r3, #32
 800df04:	e797      	b.n	800de36 <_svfprintf_r+0x1de>
 800df06:	2310      	movs	r3, #16
 800df08:	e795      	b.n	800de36 <_svfprintf_r+0x1de>
 800df0a:	0021      	movs	r1, r4
 800df0c:	c904      	ldmia	r1!, {r2}
 800df0e:	ab3f      	add	r3, sp, #252	; 0xfc
 800df10:	910d      	str	r1, [sp, #52]	; 0x34
 800df12:	211b      	movs	r1, #27
 800df14:	701a      	strb	r2, [r3, #0]
 800df16:	2200      	movs	r2, #0
 800df18:	a81e      	add	r0, sp, #120	; 0x78
 800df1a:	1809      	adds	r1, r1, r0
 800df1c:	700a      	strb	r2, [r1, #0]
 800df1e:	920c      	str	r2, [sp, #48]	; 0x30
 800df20:	3201      	adds	r2, #1
 800df22:	9209      	str	r2, [sp, #36]	; 0x24
 800df24:	2200      	movs	r2, #0
 800df26:	9308      	str	r3, [sp, #32]
 800df28:	0015      	movs	r5, r2
 800df2a:	9219      	str	r2, [sp, #100]	; 0x64
 800df2c:	9210      	str	r2, [sp, #64]	; 0x40
 800df2e:	9211      	str	r2, [sp, #68]	; 0x44
 800df30:	e1f1      	b.n	800e316 <_svfprintf_r+0x6be>
 800df32:	2310      	movs	r3, #16
 800df34:	431e      	orrs	r6, r3
 800df36:	06b3      	lsls	r3, r6, #26
 800df38:	d531      	bpl.n	800df9e <_svfprintf_r+0x346>
 800df3a:	2307      	movs	r3, #7
 800df3c:	3407      	adds	r4, #7
 800df3e:	439c      	bics	r4, r3
 800df40:	0022      	movs	r2, r4
 800df42:	ca18      	ldmia	r2!, {r3, r4}
 800df44:	9306      	str	r3, [sp, #24]
 800df46:	9407      	str	r4, [sp, #28]
 800df48:	920d      	str	r2, [sp, #52]	; 0x34
 800df4a:	9a07      	ldr	r2, [sp, #28]
 800df4c:	2301      	movs	r3, #1
 800df4e:	2a00      	cmp	r2, #0
 800df50:	da0b      	bge.n	800df6a <_svfprintf_r+0x312>
 800df52:	9c06      	ldr	r4, [sp, #24]
 800df54:	9d07      	ldr	r5, [sp, #28]
 800df56:	2200      	movs	r2, #0
 800df58:	4261      	negs	r1, r4
 800df5a:	41aa      	sbcs	r2, r5
 800df5c:	9106      	str	r1, [sp, #24]
 800df5e:	9207      	str	r2, [sp, #28]
 800df60:	221b      	movs	r2, #27
 800df62:	a91e      	add	r1, sp, #120	; 0x78
 800df64:	1852      	adds	r2, r2, r1
 800df66:	212d      	movs	r1, #45	; 0x2d
 800df68:	7011      	strb	r1, [r2, #0]
 800df6a:	9907      	ldr	r1, [sp, #28]
 800df6c:	9a06      	ldr	r2, [sp, #24]
 800df6e:	430a      	orrs	r2, r1
 800df70:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df72:	3101      	adds	r1, #1
 800df74:	d101      	bne.n	800df7a <_svfprintf_r+0x322>
 800df76:	f001 f87b 	bl	800f070 <_svfprintf_r+0x1418>
 800df7a:	2180      	movs	r1, #128	; 0x80
 800df7c:	0034      	movs	r4, r6
 800df7e:	438c      	bics	r4, r1
 800df80:	2a00      	cmp	r2, #0
 800df82:	d001      	beq.n	800df88 <_svfprintf_r+0x330>
 800df84:	f001 f879 	bl	800f07a <_svfprintf_r+0x1422>
 800df88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df8a:	2a00      	cmp	r2, #0
 800df8c:	d101      	bne.n	800df92 <_svfprintf_r+0x33a>
 800df8e:	f000 fcef 	bl	800e970 <_svfprintf_r+0xd18>
 800df92:	2b01      	cmp	r3, #1
 800df94:	d001      	beq.n	800df9a <_svfprintf_r+0x342>
 800df96:	f001 f874 	bl	800f082 <_svfprintf_r+0x142a>
 800df9a:	f000 fc79 	bl	800e890 <_svfprintf_r+0xc38>
 800df9e:	0022      	movs	r2, r4
 800dfa0:	ca08      	ldmia	r2!, {r3}
 800dfa2:	920d      	str	r2, [sp, #52]	; 0x34
 800dfa4:	06f2      	lsls	r2, r6, #27
 800dfa6:	d503      	bpl.n	800dfb0 <_svfprintf_r+0x358>
 800dfa8:	9306      	str	r3, [sp, #24]
 800dfaa:	17db      	asrs	r3, r3, #31
 800dfac:	9307      	str	r3, [sp, #28]
 800dfae:	e7cc      	b.n	800df4a <_svfprintf_r+0x2f2>
 800dfb0:	0672      	lsls	r2, r6, #25
 800dfb2:	d501      	bpl.n	800dfb8 <_svfprintf_r+0x360>
 800dfb4:	b21b      	sxth	r3, r3
 800dfb6:	e7f7      	b.n	800dfa8 <_svfprintf_r+0x350>
 800dfb8:	05b2      	lsls	r2, r6, #22
 800dfba:	d5f5      	bpl.n	800dfa8 <_svfprintf_r+0x350>
 800dfbc:	b25b      	sxtb	r3, r3
 800dfbe:	e7f3      	b.n	800dfa8 <_svfprintf_r+0x350>
 800dfc0:	2307      	movs	r3, #7
 800dfc2:	3407      	adds	r4, #7
 800dfc4:	439c      	bics	r4, r3
 800dfc6:	0022      	movs	r2, r4
 800dfc8:	ca18      	ldmia	r2!, {r3, r4}
 800dfca:	920d      	str	r2, [sp, #52]	; 0x34
 800dfcc:	2201      	movs	r2, #1
 800dfce:	9314      	str	r3, [sp, #80]	; 0x50
 800dfd0:	9415      	str	r4, [sp, #84]	; 0x54
 800dfd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dfd4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800dfd6:	005c      	lsls	r4, r3, #1
 800dfd8:	0864      	lsrs	r4, r4, #1
 800dfda:	0028      	movs	r0, r5
 800dfdc:	0021      	movs	r1, r4
 800dfde:	4b3e      	ldr	r3, [pc, #248]	; (800e0d8 <_svfprintf_r+0x480>)
 800dfe0:	4252      	negs	r2, r2
 800dfe2:	f7f4 f987 	bl	80022f4 <__aeabi_dcmpun>
 800dfe6:	2800      	cmp	r0, #0
 800dfe8:	d126      	bne.n	800e038 <_svfprintf_r+0x3e0>
 800dfea:	2201      	movs	r2, #1
 800dfec:	0028      	movs	r0, r5
 800dfee:	0021      	movs	r1, r4
 800dff0:	4b39      	ldr	r3, [pc, #228]	; (800e0d8 <_svfprintf_r+0x480>)
 800dff2:	4252      	negs	r2, r2
 800dff4:	f7f2 fa38 	bl	8000468 <__aeabi_dcmple>
 800dff8:	2800      	cmp	r0, #0
 800dffa:	d11d      	bne.n	800e038 <_svfprintf_r+0x3e0>
 800dffc:	9814      	ldr	r0, [sp, #80]	; 0x50
 800dffe:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e000:	2200      	movs	r2, #0
 800e002:	2300      	movs	r3, #0
 800e004:	f7f2 fa26 	bl	8000454 <__aeabi_dcmplt>
 800e008:	2800      	cmp	r0, #0
 800e00a:	d004      	beq.n	800e016 <_svfprintf_r+0x3be>
 800e00c:	231b      	movs	r3, #27
 800e00e:	aa1e      	add	r2, sp, #120	; 0x78
 800e010:	189b      	adds	r3, r3, r2
 800e012:	222d      	movs	r2, #45	; 0x2d
 800e014:	701a      	strb	r2, [r3, #0]
 800e016:	4b31      	ldr	r3, [pc, #196]	; (800e0dc <_svfprintf_r+0x484>)
 800e018:	9308      	str	r3, [sp, #32]
 800e01a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e01c:	2b47      	cmp	r3, #71	; 0x47
 800e01e:	dd01      	ble.n	800e024 <_svfprintf_r+0x3cc>
 800e020:	4b2f      	ldr	r3, [pc, #188]	; (800e0e0 <_svfprintf_r+0x488>)
 800e022:	9308      	str	r3, [sp, #32]
 800e024:	2380      	movs	r3, #128	; 0x80
 800e026:	439e      	bics	r6, r3
 800e028:	2300      	movs	r3, #0
 800e02a:	930c      	str	r3, [sp, #48]	; 0x30
 800e02c:	3303      	adds	r3, #3
 800e02e:	9309      	str	r3, [sp, #36]	; 0x24
 800e030:	2300      	movs	r3, #0
 800e032:	9319      	str	r3, [sp, #100]	; 0x64
 800e034:	f000 fc78 	bl	800e928 <_svfprintf_r+0xcd0>
 800e038:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e03a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e03c:	0010      	movs	r0, r2
 800e03e:	0019      	movs	r1, r3
 800e040:	f7f4 f958 	bl	80022f4 <__aeabi_dcmpun>
 800e044:	2800      	cmp	r0, #0
 800e046:	d00e      	beq.n	800e066 <_svfprintf_r+0x40e>
 800e048:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	da04      	bge.n	800e058 <_svfprintf_r+0x400>
 800e04e:	231b      	movs	r3, #27
 800e050:	aa1e      	add	r2, sp, #120	; 0x78
 800e052:	189b      	adds	r3, r3, r2
 800e054:	222d      	movs	r2, #45	; 0x2d
 800e056:	701a      	strb	r2, [r3, #0]
 800e058:	4b22      	ldr	r3, [pc, #136]	; (800e0e4 <_svfprintf_r+0x48c>)
 800e05a:	9308      	str	r3, [sp, #32]
 800e05c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e05e:	2b47      	cmp	r3, #71	; 0x47
 800e060:	dde0      	ble.n	800e024 <_svfprintf_r+0x3cc>
 800e062:	4b21      	ldr	r3, [pc, #132]	; (800e0e8 <_svfprintf_r+0x490>)
 800e064:	e7dd      	b.n	800e022 <_svfprintf_r+0x3ca>
 800e066:	2320      	movs	r3, #32
 800e068:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e06a:	439a      	bics	r2, r3
 800e06c:	9210      	str	r2, [sp, #64]	; 0x40
 800e06e:	2a41      	cmp	r2, #65	; 0x41
 800e070:	d123      	bne.n	800e0ba <_svfprintf_r+0x462>
 800e072:	2230      	movs	r2, #48	; 0x30
 800e074:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e076:	ab25      	add	r3, sp, #148	; 0x94
 800e078:	701a      	strb	r2, [r3, #0]
 800e07a:	3248      	adds	r2, #72	; 0x48
 800e07c:	2961      	cmp	r1, #97	; 0x61
 800e07e:	d000      	beq.n	800e082 <_svfprintf_r+0x42a>
 800e080:	3a20      	subs	r2, #32
 800e082:	705a      	strb	r2, [r3, #1]
 800e084:	2302      	movs	r3, #2
 800e086:	431e      	orrs	r6, r3
 800e088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e08a:	2b63      	cmp	r3, #99	; 0x63
 800e08c:	dd2e      	ble.n	800e0ec <_svfprintf_r+0x494>
 800e08e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e090:	1c59      	adds	r1, r3, #1
 800e092:	f7fd f969 	bl	800b368 <_malloc_r>
 800e096:	9008      	str	r0, [sp, #32]
 800e098:	2800      	cmp	r0, #0
 800e09a:	d000      	beq.n	800e09e <_svfprintf_r+0x446>
 800e09c:	e216      	b.n	800e4cc <_svfprintf_r+0x874>
 800e09e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0a0:	899a      	ldrh	r2, [r3, #12]
 800e0a2:	2340      	movs	r3, #64	; 0x40
 800e0a4:	4313      	orrs	r3, r2
 800e0a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e0a8:	8193      	strh	r3, [r2, #12]
 800e0aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0ac:	899b      	ldrh	r3, [r3, #12]
 800e0ae:	065b      	lsls	r3, r3, #25
 800e0b0:	d400      	bmi.n	800e0b4 <_svfprintf_r+0x45c>
 800e0b2:	e5f5      	b.n	800dca0 <_svfprintf_r+0x48>
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	425b      	negs	r3, r3
 800e0b8:	e5f1      	b.n	800dc9e <_svfprintf_r+0x46>
 800e0ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0bc:	900c      	str	r0, [sp, #48]	; 0x30
 800e0be:	3301      	adds	r3, #1
 800e0c0:	d100      	bne.n	800e0c4 <_svfprintf_r+0x46c>
 800e0c2:	e206      	b.n	800e4d2 <_svfprintf_r+0x87a>
 800e0c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e0c6:	2b47      	cmp	r3, #71	; 0x47
 800e0c8:	d114      	bne.n	800e0f4 <_svfprintf_r+0x49c>
 800e0ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d111      	bne.n	800e0f4 <_svfprintf_r+0x49c>
 800e0d0:	3301      	adds	r3, #1
 800e0d2:	9309      	str	r3, [sp, #36]	; 0x24
 800e0d4:	e00e      	b.n	800e0f4 <_svfprintf_r+0x49c>
 800e0d6:	46c0      	nop			; (mov r8, r8)
 800e0d8:	7fefffff 	.word	0x7fefffff
 800e0dc:	080151a4 	.word	0x080151a4
 800e0e0:	080151a8 	.word	0x080151a8
 800e0e4:	080151ac 	.word	0x080151ac
 800e0e8:	080151b0 	.word	0x080151b0
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	930c      	str	r3, [sp, #48]	; 0x30
 800e0f0:	ab3f      	add	r3, sp, #252	; 0xfc
 800e0f2:	9308      	str	r3, [sp, #32]
 800e0f4:	2380      	movs	r3, #128	; 0x80
 800e0f6:	005b      	lsls	r3, r3, #1
 800e0f8:	4333      	orrs	r3, r6
 800e0fa:	931a      	str	r3, [sp, #104]	; 0x68
 800e0fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e0fe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800e100:	2b00      	cmp	r3, #0
 800e102:	db00      	blt.n	800e106 <_svfprintf_r+0x4ae>
 800e104:	e1e7      	b.n	800e4d6 <_svfprintf_r+0x87e>
 800e106:	2280      	movs	r2, #128	; 0x80
 800e108:	0612      	lsls	r2, r2, #24
 800e10a:	4694      	mov	ip, r2
 800e10c:	4463      	add	r3, ip
 800e10e:	930e      	str	r3, [sp, #56]	; 0x38
 800e110:	232d      	movs	r3, #45	; 0x2d
 800e112:	9322      	str	r3, [sp, #136]	; 0x88
 800e114:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e116:	2b41      	cmp	r3, #65	; 0x41
 800e118:	d000      	beq.n	800e11c <_svfprintf_r+0x4c4>
 800e11a:	e1f5      	b.n	800e508 <_svfprintf_r+0x8b0>
 800e11c:	0028      	movs	r0, r5
 800e11e:	aa26      	add	r2, sp, #152	; 0x98
 800e120:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e122:	f002 fb73 	bl	801080c <frexp>
 800e126:	23ff      	movs	r3, #255	; 0xff
 800e128:	2200      	movs	r2, #0
 800e12a:	059b      	lsls	r3, r3, #22
 800e12c:	f7f3 fa9e 	bl	800166c <__aeabi_dmul>
 800e130:	2200      	movs	r2, #0
 800e132:	2300      	movs	r3, #0
 800e134:	0004      	movs	r4, r0
 800e136:	000d      	movs	r5, r1
 800e138:	f7f2 f986 	bl	8000448 <__aeabi_dcmpeq>
 800e13c:	2800      	cmp	r0, #0
 800e13e:	d001      	beq.n	800e144 <_svfprintf_r+0x4ec>
 800e140:	2301      	movs	r3, #1
 800e142:	9326      	str	r3, [sp, #152]	; 0x98
 800e144:	4bda      	ldr	r3, [pc, #872]	; (800e4b0 <_svfprintf_r+0x858>)
 800e146:	9319      	str	r3, [sp, #100]	; 0x64
 800e148:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e14a:	2b61      	cmp	r3, #97	; 0x61
 800e14c:	d001      	beq.n	800e152 <_svfprintf_r+0x4fa>
 800e14e:	4bd9      	ldr	r3, [pc, #868]	; (800e4b4 <_svfprintf_r+0x85c>)
 800e150:	9319      	str	r3, [sp, #100]	; 0x64
 800e152:	9b08      	ldr	r3, [sp, #32]
 800e154:	930e      	str	r3, [sp, #56]	; 0x38
 800e156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e158:	3b01      	subs	r3, #1
 800e15a:	9311      	str	r3, [sp, #68]	; 0x44
 800e15c:	2200      	movs	r2, #0
 800e15e:	4bd6      	ldr	r3, [pc, #856]	; (800e4b8 <_svfprintf_r+0x860>)
 800e160:	0020      	movs	r0, r4
 800e162:	0029      	movs	r1, r5
 800e164:	f7f3 fa82 	bl	800166c <__aeabi_dmul>
 800e168:	000d      	movs	r5, r1
 800e16a:	0004      	movs	r4, r0
 800e16c:	f7f4 f8e0 	bl	8002330 <__aeabi_d2iz>
 800e170:	9021      	str	r0, [sp, #132]	; 0x84
 800e172:	f7f4 f913 	bl	800239c <__aeabi_i2d>
 800e176:	0002      	movs	r2, r0
 800e178:	000b      	movs	r3, r1
 800e17a:	0020      	movs	r0, r4
 800e17c:	0029      	movs	r1, r5
 800e17e:	f7f3 fd37 	bl	8001bf0 <__aeabi_dsub>
 800e182:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e184:	000d      	movs	r5, r1
 800e186:	001a      	movs	r2, r3
 800e188:	3201      	adds	r2, #1
 800e18a:	9921      	ldr	r1, [sp, #132]	; 0x84
 800e18c:	920e      	str	r2, [sp, #56]	; 0x38
 800e18e:	9223      	str	r2, [sp, #140]	; 0x8c
 800e190:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e192:	0004      	movs	r4, r0
 800e194:	5c52      	ldrb	r2, [r2, r1]
 800e196:	701a      	strb	r2, [r3, #0]
 800e198:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e19a:	9320      	str	r3, [sp, #128]	; 0x80
 800e19c:	3301      	adds	r3, #1
 800e19e:	d00a      	beq.n	800e1b6 <_svfprintf_r+0x55e>
 800e1a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	3b01      	subs	r3, #1
 800e1a6:	9311      	str	r3, [sp, #68]	; 0x44
 800e1a8:	0020      	movs	r0, r4
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	0029      	movs	r1, r5
 800e1ae:	f7f2 f94b 	bl	8000448 <__aeabi_dcmpeq>
 800e1b2:	2800      	cmp	r0, #0
 800e1b4:	d0d2      	beq.n	800e15c <_svfprintf_r+0x504>
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	0020      	movs	r0, r4
 800e1ba:	0029      	movs	r1, r5
 800e1bc:	4bbf      	ldr	r3, [pc, #764]	; (800e4bc <_svfprintf_r+0x864>)
 800e1be:	f7f2 f95d 	bl	800047c <__aeabi_dcmpgt>
 800e1c2:	2800      	cmp	r0, #0
 800e1c4:	d10c      	bne.n	800e1e0 <_svfprintf_r+0x588>
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	0020      	movs	r0, r4
 800e1ca:	0029      	movs	r1, r5
 800e1cc:	4bbb      	ldr	r3, [pc, #748]	; (800e4bc <_svfprintf_r+0x864>)
 800e1ce:	f7f2 f93b 	bl	8000448 <__aeabi_dcmpeq>
 800e1d2:	2800      	cmp	r0, #0
 800e1d4:	d100      	bne.n	800e1d8 <_svfprintf_r+0x580>
 800e1d6:	e191      	b.n	800e4fc <_svfprintf_r+0x8a4>
 800e1d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e1da:	07db      	lsls	r3, r3, #31
 800e1dc:	d400      	bmi.n	800e1e0 <_svfprintf_r+0x588>
 800e1de:	e18d      	b.n	800e4fc <_svfprintf_r+0x8a4>
 800e1e0:	2030      	movs	r0, #48	; 0x30
 800e1e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e1e4:	932a      	str	r3, [sp, #168]	; 0xa8
 800e1e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e1e8:	7bdb      	ldrb	r3, [r3, #15]
 800e1ea:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800e1ec:	3a01      	subs	r2, #1
 800e1ee:	922a      	str	r2, [sp, #168]	; 0xa8
 800e1f0:	7811      	ldrb	r1, [r2, #0]
 800e1f2:	4299      	cmp	r1, r3
 800e1f4:	d100      	bne.n	800e1f8 <_svfprintf_r+0x5a0>
 800e1f6:	e171      	b.n	800e4dc <_svfprintf_r+0x884>
 800e1f8:	1c4b      	adds	r3, r1, #1
 800e1fa:	b2db      	uxtb	r3, r3
 800e1fc:	2939      	cmp	r1, #57	; 0x39
 800e1fe:	d101      	bne.n	800e204 <_svfprintf_r+0x5ac>
 800e200:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e202:	7a9b      	ldrb	r3, [r3, #10]
 800e204:	7013      	strb	r3, [r2, #0]
 800e206:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e208:	9a08      	ldr	r2, [sp, #32]
 800e20a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800e20c:	1a9b      	subs	r3, r3, r2
 800e20e:	930e      	str	r3, [sp, #56]	; 0x38
 800e210:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e212:	2b47      	cmp	r3, #71	; 0x47
 800e214:	d000      	beq.n	800e218 <_svfprintf_r+0x5c0>
 800e216:	e1c4      	b.n	800e5a2 <_svfprintf_r+0x94a>
 800e218:	1ceb      	adds	r3, r5, #3
 800e21a:	db03      	blt.n	800e224 <_svfprintf_r+0x5cc>
 800e21c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e21e:	42ab      	cmp	r3, r5
 800e220:	db00      	blt.n	800e224 <_svfprintf_r+0x5cc>
 800e222:	e1e6      	b.n	800e5f2 <_svfprintf_r+0x99a>
 800e224:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e226:	3b02      	subs	r3, #2
 800e228:	930f      	str	r3, [sp, #60]	; 0x3c
 800e22a:	223c      	movs	r2, #60	; 0x3c
 800e22c:	466b      	mov	r3, sp
 800e22e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e230:	189b      	adds	r3, r3, r2
 800e232:	1e6c      	subs	r4, r5, #1
 800e234:	3a1c      	subs	r2, #28
 800e236:	2000      	movs	r0, #0
 800e238:	781b      	ldrb	r3, [r3, #0]
 800e23a:	9426      	str	r4, [sp, #152]	; 0x98
 800e23c:	4391      	bics	r1, r2
 800e23e:	2941      	cmp	r1, #65	; 0x41
 800e240:	d102      	bne.n	800e248 <_svfprintf_r+0x5f0>
 800e242:	330f      	adds	r3, #15
 800e244:	b2db      	uxtb	r3, r3
 800e246:	3001      	adds	r0, #1
 800e248:	a928      	add	r1, sp, #160	; 0xa0
 800e24a:	700b      	strb	r3, [r1, #0]
 800e24c:	232b      	movs	r3, #43	; 0x2b
 800e24e:	2c00      	cmp	r4, #0
 800e250:	da02      	bge.n	800e258 <_svfprintf_r+0x600>
 800e252:	2401      	movs	r4, #1
 800e254:	3302      	adds	r3, #2
 800e256:	1b64      	subs	r4, r4, r5
 800e258:	704b      	strb	r3, [r1, #1]
 800e25a:	2c09      	cmp	r4, #9
 800e25c:	dc00      	bgt.n	800e260 <_svfprintf_r+0x608>
 800e25e:	e1ba      	b.n	800e5d6 <_svfprintf_r+0x97e>
 800e260:	2337      	movs	r3, #55	; 0x37
 800e262:	250a      	movs	r5, #10
 800e264:	aa1e      	add	r2, sp, #120	; 0x78
 800e266:	189b      	adds	r3, r3, r2
 800e268:	9310      	str	r3, [sp, #64]	; 0x40
 800e26a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e26c:	0020      	movs	r0, r4
 800e26e:	9309      	str	r3, [sp, #36]	; 0x24
 800e270:	0029      	movs	r1, r5
 800e272:	3b01      	subs	r3, #1
 800e274:	9310      	str	r3, [sp, #64]	; 0x40
 800e276:	f7f2 f8d1 	bl	800041c <__aeabi_idivmod>
 800e27a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e27c:	3130      	adds	r1, #48	; 0x30
 800e27e:	7019      	strb	r1, [r3, #0]
 800e280:	0020      	movs	r0, r4
 800e282:	0029      	movs	r1, r5
 800e284:	9411      	str	r4, [sp, #68]	; 0x44
 800e286:	f7f1 ffe3 	bl	8000250 <__divsi3>
 800e28a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e28c:	0004      	movs	r4, r0
 800e28e:	2b63      	cmp	r3, #99	; 0x63
 800e290:	dceb      	bgt.n	800e26a <_svfprintf_r+0x612>
 800e292:	222a      	movs	r2, #42	; 0x2a
 800e294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e296:	a81e      	add	r0, sp, #120	; 0x78
 800e298:	1e99      	subs	r1, r3, #2
 800e29a:	1812      	adds	r2, r2, r0
 800e29c:	2037      	movs	r0, #55	; 0x37
 800e29e:	000b      	movs	r3, r1
 800e2a0:	3430      	adds	r4, #48	; 0x30
 800e2a2:	700c      	strb	r4, [r1, #0]
 800e2a4:	ac1e      	add	r4, sp, #120	; 0x78
 800e2a6:	1900      	adds	r0, r0, r4
 800e2a8:	4283      	cmp	r3, r0
 800e2aa:	d200      	bcs.n	800e2ae <_svfprintf_r+0x656>
 800e2ac:	e18e      	b.n	800e5cc <_svfprintf_r+0x974>
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	4281      	cmp	r1, r0
 800e2b2:	d804      	bhi.n	800e2be <_svfprintf_r+0x666>
 800e2b4:	aa1e      	add	r2, sp, #120	; 0x78
 800e2b6:	3339      	adds	r3, #57	; 0x39
 800e2b8:	189b      	adds	r3, r3, r2
 800e2ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2bc:	1a9b      	subs	r3, r3, r2
 800e2be:	222a      	movs	r2, #42	; 0x2a
 800e2c0:	a91e      	add	r1, sp, #120	; 0x78
 800e2c2:	1852      	adds	r2, r2, r1
 800e2c4:	18d3      	adds	r3, r2, r3
 800e2c6:	aa28      	add	r2, sp, #160	; 0xa0
 800e2c8:	1a9b      	subs	r3, r3, r2
 800e2ca:	931e      	str	r3, [sp, #120]	; 0x78
 800e2cc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e2ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e2d0:	4694      	mov	ip, r2
 800e2d2:	4463      	add	r3, ip
 800e2d4:	9309      	str	r3, [sp, #36]	; 0x24
 800e2d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e2d8:	2b01      	cmp	r3, #1
 800e2da:	dc01      	bgt.n	800e2e0 <_svfprintf_r+0x688>
 800e2dc:	07f3      	lsls	r3, r6, #31
 800e2de:	d504      	bpl.n	800e2ea <_svfprintf_r+0x692>
 800e2e0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e2e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2e4:	4694      	mov	ip, r2
 800e2e6:	4463      	add	r3, ip
 800e2e8:	9309      	str	r3, [sp, #36]	; 0x24
 800e2ea:	2280      	movs	r2, #128	; 0x80
 800e2ec:	4b74      	ldr	r3, [pc, #464]	; (800e4c0 <_svfprintf_r+0x868>)
 800e2ee:	0052      	lsls	r2, r2, #1
 800e2f0:	4033      	ands	r3, r6
 800e2f2:	431a      	orrs	r2, r3
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	001d      	movs	r5, r3
 800e2f8:	921a      	str	r2, [sp, #104]	; 0x68
 800e2fa:	9310      	str	r3, [sp, #64]	; 0x40
 800e2fc:	9311      	str	r3, [sp, #68]	; 0x44
 800e2fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e300:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800e302:	9319      	str	r3, [sp, #100]	; 0x64
 800e304:	2b00      	cmp	r3, #0
 800e306:	d006      	beq.n	800e316 <_svfprintf_r+0x6be>
 800e308:	231b      	movs	r3, #27
 800e30a:	aa1e      	add	r2, sp, #120	; 0x78
 800e30c:	189b      	adds	r3, r3, r2
 800e30e:	222d      	movs	r2, #45	; 0x2d
 800e310:	701a      	strb	r2, [r3, #0]
 800e312:	2300      	movs	r3, #0
 800e314:	9319      	str	r3, [sp, #100]	; 0x64
 800e316:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e318:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e31a:	931a      	str	r3, [sp, #104]	; 0x68
 800e31c:	4293      	cmp	r3, r2
 800e31e:	da00      	bge.n	800e322 <_svfprintf_r+0x6ca>
 800e320:	921a      	str	r2, [sp, #104]	; 0x68
 800e322:	231b      	movs	r3, #27
 800e324:	aa1e      	add	r2, sp, #120	; 0x78
 800e326:	189b      	adds	r3, r3, r2
 800e328:	781b      	ldrb	r3, [r3, #0]
 800e32a:	1e5a      	subs	r2, r3, #1
 800e32c:	4193      	sbcs	r3, r2
 800e32e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e330:	18d3      	adds	r3, r2, r3
 800e332:	931a      	str	r3, [sp, #104]	; 0x68
 800e334:	0032      	movs	r2, r6
 800e336:	2302      	movs	r3, #2
 800e338:	401a      	ands	r2, r3
 800e33a:	9220      	str	r2, [sp, #128]	; 0x80
 800e33c:	421e      	tst	r6, r3
 800e33e:	d002      	beq.n	800e346 <_svfprintf_r+0x6ee>
 800e340:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e342:	3302      	adds	r3, #2
 800e344:	931a      	str	r3, [sp, #104]	; 0x68
 800e346:	2384      	movs	r3, #132	; 0x84
 800e348:	0032      	movs	r2, r6
 800e34a:	401a      	ands	r2, r3
 800e34c:	9221      	str	r2, [sp, #132]	; 0x84
 800e34e:	421e      	tst	r6, r3
 800e350:	d11f      	bne.n	800e392 <_svfprintf_r+0x73a>
 800e352:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e354:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e356:	1a9c      	subs	r4, r3, r2
 800e358:	2c00      	cmp	r4, #0
 800e35a:	dd1a      	ble.n	800e392 <_svfprintf_r+0x73a>
 800e35c:	0039      	movs	r1, r7
 800e35e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e360:	4858      	ldr	r0, [pc, #352]	; (800e4c4 <_svfprintf_r+0x86c>)
 800e362:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e364:	3301      	adds	r3, #1
 800e366:	3108      	adds	r1, #8
 800e368:	6038      	str	r0, [r7, #0]
 800e36a:	2c10      	cmp	r4, #16
 800e36c:	dd00      	ble.n	800e370 <_svfprintf_r+0x718>
 800e36e:	e31c      	b.n	800e9aa <_svfprintf_r+0xd52>
 800e370:	607c      	str	r4, [r7, #4]
 800e372:	18a4      	adds	r4, r4, r2
 800e374:	000f      	movs	r7, r1
 800e376:	942e      	str	r4, [sp, #184]	; 0xb8
 800e378:	932d      	str	r3, [sp, #180]	; 0xb4
 800e37a:	2b07      	cmp	r3, #7
 800e37c:	dd09      	ble.n	800e392 <_svfprintf_r+0x73a>
 800e37e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e380:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e382:	aa2c      	add	r2, sp, #176	; 0xb0
 800e384:	f003 fd7e 	bl	8011e84 <__ssprint_r>
 800e388:	2800      	cmp	r0, #0
 800e38a:	d001      	beq.n	800e390 <_svfprintf_r+0x738>
 800e38c:	f000 fe43 	bl	800f016 <_svfprintf_r+0x13be>
 800e390:	af2f      	add	r7, sp, #188	; 0xbc
 800e392:	221b      	movs	r2, #27
 800e394:	a91e      	add	r1, sp, #120	; 0x78
 800e396:	1852      	adds	r2, r2, r1
 800e398:	7811      	ldrb	r1, [r2, #0]
 800e39a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e39c:	2900      	cmp	r1, #0
 800e39e:	d014      	beq.n	800e3ca <_svfprintf_r+0x772>
 800e3a0:	603a      	str	r2, [r7, #0]
 800e3a2:	2201      	movs	r2, #1
 800e3a4:	189b      	adds	r3, r3, r2
 800e3a6:	932e      	str	r3, [sp, #184]	; 0xb8
 800e3a8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e3aa:	607a      	str	r2, [r7, #4]
 800e3ac:	189b      	adds	r3, r3, r2
 800e3ae:	932d      	str	r3, [sp, #180]	; 0xb4
 800e3b0:	3708      	adds	r7, #8
 800e3b2:	2b07      	cmp	r3, #7
 800e3b4:	dd09      	ble.n	800e3ca <_svfprintf_r+0x772>
 800e3b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e3b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e3ba:	aa2c      	add	r2, sp, #176	; 0xb0
 800e3bc:	f003 fd62 	bl	8011e84 <__ssprint_r>
 800e3c0:	2800      	cmp	r0, #0
 800e3c2:	d001      	beq.n	800e3c8 <_svfprintf_r+0x770>
 800e3c4:	f000 fe27 	bl	800f016 <_svfprintf_r+0x13be>
 800e3c8:	af2f      	add	r7, sp, #188	; 0xbc
 800e3ca:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e3cc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e3ce:	2a00      	cmp	r2, #0
 800e3d0:	d015      	beq.n	800e3fe <_svfprintf_r+0x7a6>
 800e3d2:	aa25      	add	r2, sp, #148	; 0x94
 800e3d4:	603a      	str	r2, [r7, #0]
 800e3d6:	2202      	movs	r2, #2
 800e3d8:	189b      	adds	r3, r3, r2
 800e3da:	932e      	str	r3, [sp, #184]	; 0xb8
 800e3dc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e3de:	607a      	str	r2, [r7, #4]
 800e3e0:	3301      	adds	r3, #1
 800e3e2:	932d      	str	r3, [sp, #180]	; 0xb4
 800e3e4:	3708      	adds	r7, #8
 800e3e6:	2b07      	cmp	r3, #7
 800e3e8:	dd09      	ble.n	800e3fe <_svfprintf_r+0x7a6>
 800e3ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e3ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e3ee:	aa2c      	add	r2, sp, #176	; 0xb0
 800e3f0:	f003 fd48 	bl	8011e84 <__ssprint_r>
 800e3f4:	2800      	cmp	r0, #0
 800e3f6:	d001      	beq.n	800e3fc <_svfprintf_r+0x7a4>
 800e3f8:	f000 fe0d 	bl	800f016 <_svfprintf_r+0x13be>
 800e3fc:	af2f      	add	r7, sp, #188	; 0xbc
 800e3fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e400:	2b80      	cmp	r3, #128	; 0x80
 800e402:	d11f      	bne.n	800e444 <_svfprintf_r+0x7ec>
 800e404:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e406:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e408:	1a9c      	subs	r4, r3, r2
 800e40a:	2c00      	cmp	r4, #0
 800e40c:	dd1a      	ble.n	800e444 <_svfprintf_r+0x7ec>
 800e40e:	0039      	movs	r1, r7
 800e410:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e412:	482d      	ldr	r0, [pc, #180]	; (800e4c8 <_svfprintf_r+0x870>)
 800e414:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e416:	3301      	adds	r3, #1
 800e418:	3108      	adds	r1, #8
 800e41a:	6038      	str	r0, [r7, #0]
 800e41c:	2c10      	cmp	r4, #16
 800e41e:	dd00      	ble.n	800e422 <_svfprintf_r+0x7ca>
 800e420:	e2d6      	b.n	800e9d0 <_svfprintf_r+0xd78>
 800e422:	607c      	str	r4, [r7, #4]
 800e424:	18a4      	adds	r4, r4, r2
 800e426:	000f      	movs	r7, r1
 800e428:	942e      	str	r4, [sp, #184]	; 0xb8
 800e42a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e42c:	2b07      	cmp	r3, #7
 800e42e:	dd09      	ble.n	800e444 <_svfprintf_r+0x7ec>
 800e430:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e432:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e434:	aa2c      	add	r2, sp, #176	; 0xb0
 800e436:	f003 fd25 	bl	8011e84 <__ssprint_r>
 800e43a:	2800      	cmp	r0, #0
 800e43c:	d001      	beq.n	800e442 <_svfprintf_r+0x7ea>
 800e43e:	f000 fdea 	bl	800f016 <_svfprintf_r+0x13be>
 800e442:	af2f      	add	r7, sp, #188	; 0xbc
 800e444:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e446:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e448:	1a9c      	subs	r4, r3, r2
 800e44a:	2c00      	cmp	r4, #0
 800e44c:	dd1a      	ble.n	800e484 <_svfprintf_r+0x82c>
 800e44e:	0039      	movs	r1, r7
 800e450:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e452:	481d      	ldr	r0, [pc, #116]	; (800e4c8 <_svfprintf_r+0x870>)
 800e454:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e456:	3301      	adds	r3, #1
 800e458:	3108      	adds	r1, #8
 800e45a:	6038      	str	r0, [r7, #0]
 800e45c:	2c10      	cmp	r4, #16
 800e45e:	dd00      	ble.n	800e462 <_svfprintf_r+0x80a>
 800e460:	e2c9      	b.n	800e9f6 <_svfprintf_r+0xd9e>
 800e462:	18a2      	adds	r2, r4, r2
 800e464:	607c      	str	r4, [r7, #4]
 800e466:	922e      	str	r2, [sp, #184]	; 0xb8
 800e468:	000f      	movs	r7, r1
 800e46a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e46c:	2b07      	cmp	r3, #7
 800e46e:	dd09      	ble.n	800e484 <_svfprintf_r+0x82c>
 800e470:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e472:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e474:	aa2c      	add	r2, sp, #176	; 0xb0
 800e476:	f003 fd05 	bl	8011e84 <__ssprint_r>
 800e47a:	2800      	cmp	r0, #0
 800e47c:	d001      	beq.n	800e482 <_svfprintf_r+0x82a>
 800e47e:	f000 fdca 	bl	800f016 <_svfprintf_r+0x13be>
 800e482:	af2f      	add	r7, sp, #188	; 0xbc
 800e484:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e486:	9319      	str	r3, [sp, #100]	; 0x64
 800e488:	05f3      	lsls	r3, r6, #23
 800e48a:	d500      	bpl.n	800e48e <_svfprintf_r+0x836>
 800e48c:	e2ce      	b.n	800ea2c <_svfprintf_r+0xdd4>
 800e48e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e490:	9b08      	ldr	r3, [sp, #32]
 800e492:	4694      	mov	ip, r2
 800e494:	603b      	str	r3, [r7, #0]
 800e496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e498:	607b      	str	r3, [r7, #4]
 800e49a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e49c:	4463      	add	r3, ip
 800e49e:	932e      	str	r3, [sp, #184]	; 0xb8
 800e4a0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e4a2:	3301      	adds	r3, #1
 800e4a4:	932d      	str	r3, [sp, #180]	; 0xb4
 800e4a6:	2b07      	cmp	r3, #7
 800e4a8:	dd00      	ble.n	800e4ac <_svfprintf_r+0x854>
 800e4aa:	e3a3      	b.n	800ebf4 <_svfprintf_r+0xf9c>
 800e4ac:	3708      	adds	r7, #8
 800e4ae:	e301      	b.n	800eab4 <_svfprintf_r+0xe5c>
 800e4b0:	080151b4 	.word	0x080151b4
 800e4b4:	080151c5 	.word	0x080151c5
 800e4b8:	40300000 	.word	0x40300000
 800e4bc:	3fe00000 	.word	0x3fe00000
 800e4c0:	fffffbff 	.word	0xfffffbff
 800e4c4:	080151d8 	.word	0x080151d8
 800e4c8:	080151e8 	.word	0x080151e8
 800e4cc:	9b08      	ldr	r3, [sp, #32]
 800e4ce:	930c      	str	r3, [sp, #48]	; 0x30
 800e4d0:	e610      	b.n	800e0f4 <_svfprintf_r+0x49c>
 800e4d2:	2306      	movs	r3, #6
 800e4d4:	e5fd      	b.n	800e0d2 <_svfprintf_r+0x47a>
 800e4d6:	930e      	str	r3, [sp, #56]	; 0x38
 800e4d8:	2300      	movs	r3, #0
 800e4da:	e61a      	b.n	800e112 <_svfprintf_r+0x4ba>
 800e4dc:	7010      	strb	r0, [r2, #0]
 800e4de:	e684      	b.n	800e1ea <_svfprintf_r+0x592>
 800e4e0:	7018      	strb	r0, [r3, #0]
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	1aca      	subs	r2, r1, r3
 800e4e6:	d5fb      	bpl.n	800e4e0 <_svfprintf_r+0x888>
 800e4e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	3201      	adds	r2, #1
 800e4ee:	db01      	blt.n	800e4f4 <_svfprintf_r+0x89c>
 800e4f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e4f6:	18d3      	adds	r3, r2, r3
 800e4f8:	9323      	str	r3, [sp, #140]	; 0x8c
 800e4fa:	e684      	b.n	800e206 <_svfprintf_r+0x5ae>
 800e4fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e4fe:	9920      	ldr	r1, [sp, #128]	; 0x80
 800e500:	2030      	movs	r0, #48	; 0x30
 800e502:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e504:	1851      	adds	r1, r2, r1
 800e506:	e7ed      	b.n	800e4e4 <_svfprintf_r+0x88c>
 800e508:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e50a:	2303      	movs	r3, #3
 800e50c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800e50e:	2a46      	cmp	r2, #70	; 0x46
 800e510:	d006      	beq.n	800e520 <_svfprintf_r+0x8c8>
 800e512:	0014      	movs	r4, r2
 800e514:	3c45      	subs	r4, #69	; 0x45
 800e516:	4262      	negs	r2, r4
 800e518:	4154      	adcs	r4, r2
 800e51a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e51c:	3b01      	subs	r3, #1
 800e51e:	1914      	adds	r4, r2, r4
 800e520:	aa2a      	add	r2, sp, #168	; 0xa8
 800e522:	9204      	str	r2, [sp, #16]
 800e524:	aa27      	add	r2, sp, #156	; 0x9c
 800e526:	9203      	str	r2, [sp, #12]
 800e528:	aa26      	add	r2, sp, #152	; 0x98
 800e52a:	9202      	str	r2, [sp, #8]
 800e52c:	9300      	str	r3, [sp, #0]
 800e52e:	002a      	movs	r2, r5
 800e530:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e532:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e534:	9401      	str	r4, [sp, #4]
 800e536:	f002 fad7 	bl	8010ae8 <_dtoa_r>
 800e53a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e53c:	9008      	str	r0, [sp, #32]
 800e53e:	2b47      	cmp	r3, #71	; 0x47
 800e540:	d103      	bne.n	800e54a <_svfprintf_r+0x8f2>
 800e542:	07f3      	lsls	r3, r6, #31
 800e544:	d401      	bmi.n	800e54a <_svfprintf_r+0x8f2>
 800e546:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800e548:	e65e      	b.n	800e208 <_svfprintf_r+0x5b0>
 800e54a:	9b08      	ldr	r3, [sp, #32]
 800e54c:	191b      	adds	r3, r3, r4
 800e54e:	9311      	str	r3, [sp, #68]	; 0x44
 800e550:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e552:	2b46      	cmp	r3, #70	; 0x46
 800e554:	d112      	bne.n	800e57c <_svfprintf_r+0x924>
 800e556:	9b08      	ldr	r3, [sp, #32]
 800e558:	781b      	ldrb	r3, [r3, #0]
 800e55a:	2b30      	cmp	r3, #48	; 0x30
 800e55c:	d10a      	bne.n	800e574 <_svfprintf_r+0x91c>
 800e55e:	2200      	movs	r2, #0
 800e560:	2300      	movs	r3, #0
 800e562:	0028      	movs	r0, r5
 800e564:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e566:	f7f1 ff6f 	bl	8000448 <__aeabi_dcmpeq>
 800e56a:	2800      	cmp	r0, #0
 800e56c:	d102      	bne.n	800e574 <_svfprintf_r+0x91c>
 800e56e:	2301      	movs	r3, #1
 800e570:	1b1b      	subs	r3, r3, r4
 800e572:	9326      	str	r3, [sp, #152]	; 0x98
 800e574:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e576:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e578:	18d3      	adds	r3, r2, r3
 800e57a:	9311      	str	r3, [sp, #68]	; 0x44
 800e57c:	2200      	movs	r2, #0
 800e57e:	2300      	movs	r3, #0
 800e580:	0028      	movs	r0, r5
 800e582:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e584:	f7f1 ff60 	bl	8000448 <__aeabi_dcmpeq>
 800e588:	2800      	cmp	r0, #0
 800e58a:	d001      	beq.n	800e590 <_svfprintf_r+0x938>
 800e58c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e58e:	932a      	str	r3, [sp, #168]	; 0xa8
 800e590:	2230      	movs	r2, #48	; 0x30
 800e592:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800e594:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e596:	4299      	cmp	r1, r3
 800e598:	d9d5      	bls.n	800e546 <_svfprintf_r+0x8ee>
 800e59a:	1c59      	adds	r1, r3, #1
 800e59c:	912a      	str	r1, [sp, #168]	; 0xa8
 800e59e:	701a      	strb	r2, [r3, #0]
 800e5a0:	e7f7      	b.n	800e592 <_svfprintf_r+0x93a>
 800e5a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e5a4:	2b46      	cmp	r3, #70	; 0x46
 800e5a6:	d000      	beq.n	800e5aa <_svfprintf_r+0x952>
 800e5a8:	e63f      	b.n	800e22a <_svfprintf_r+0x5d2>
 800e5aa:	2201      	movs	r2, #1
 800e5ac:	0033      	movs	r3, r6
 800e5ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e5b0:	4013      	ands	r3, r2
 800e5b2:	430b      	orrs	r3, r1
 800e5b4:	2d00      	cmp	r5, #0
 800e5b6:	dd2c      	ble.n	800e612 <_svfprintf_r+0x9ba>
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d046      	beq.n	800e64a <_svfprintf_r+0x9f2>
 800e5bc:	000a      	movs	r2, r1
 800e5be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e5c0:	18eb      	adds	r3, r5, r3
 800e5c2:	18d3      	adds	r3, r2, r3
 800e5c4:	9309      	str	r3, [sp, #36]	; 0x24
 800e5c6:	2366      	movs	r3, #102	; 0x66
 800e5c8:	930f      	str	r3, [sp, #60]	; 0x3c
 800e5ca:	e030      	b.n	800e62e <_svfprintf_r+0x9d6>
 800e5cc:	781c      	ldrb	r4, [r3, #0]
 800e5ce:	3301      	adds	r3, #1
 800e5d0:	7014      	strb	r4, [r2, #0]
 800e5d2:	3201      	adds	r2, #1
 800e5d4:	e668      	b.n	800e2a8 <_svfprintf_r+0x650>
 800e5d6:	222a      	movs	r2, #42	; 0x2a
 800e5d8:	ab1e      	add	r3, sp, #120	; 0x78
 800e5da:	18d2      	adds	r2, r2, r3
 800e5dc:	2800      	cmp	r0, #0
 800e5de:	d104      	bne.n	800e5ea <_svfprintf_r+0x992>
 800e5e0:	2330      	movs	r3, #48	; 0x30
 800e5e2:	222b      	movs	r2, #43	; 0x2b
 800e5e4:	708b      	strb	r3, [r1, #2]
 800e5e6:	ab1e      	add	r3, sp, #120	; 0x78
 800e5e8:	18d2      	adds	r2, r2, r3
 800e5ea:	3430      	adds	r4, #48	; 0x30
 800e5ec:	1c53      	adds	r3, r2, #1
 800e5ee:	7014      	strb	r4, [r2, #0]
 800e5f0:	e669      	b.n	800e2c6 <_svfprintf_r+0x66e>
 800e5f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e5f4:	42ab      	cmp	r3, r5
 800e5f6:	dd12      	ble.n	800e61e <_svfprintf_r+0x9c6>
 800e5f8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e5fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e5fc:	4694      	mov	ip, r2
 800e5fe:	4463      	add	r3, ip
 800e600:	9309      	str	r3, [sp, #36]	; 0x24
 800e602:	2367      	movs	r3, #103	; 0x67
 800e604:	930f      	str	r3, [sp, #60]	; 0x3c
 800e606:	2d00      	cmp	r5, #0
 800e608:	dc11      	bgt.n	800e62e <_svfprintf_r+0x9d6>
 800e60a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e60c:	1b5b      	subs	r3, r3, r5
 800e60e:	3301      	adds	r3, #1
 800e610:	e00c      	b.n	800e62c <_svfprintf_r+0x9d4>
 800e612:	2b00      	cmp	r3, #0
 800e614:	d01b      	beq.n	800e64e <_svfprintf_r+0x9f6>
 800e616:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e618:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e61a:	3301      	adds	r3, #1
 800e61c:	e7d1      	b.n	800e5c2 <_svfprintf_r+0x96a>
 800e61e:	2367      	movs	r3, #103	; 0x67
 800e620:	9509      	str	r5, [sp, #36]	; 0x24
 800e622:	930f      	str	r3, [sp, #60]	; 0x3c
 800e624:	07f3      	lsls	r3, r6, #31
 800e626:	d502      	bpl.n	800e62e <_svfprintf_r+0x9d6>
 800e628:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e62a:	18eb      	adds	r3, r5, r3
 800e62c:	9309      	str	r3, [sp, #36]	; 0x24
 800e62e:	2380      	movs	r3, #128	; 0x80
 800e630:	0032      	movs	r2, r6
 800e632:	00db      	lsls	r3, r3, #3
 800e634:	401a      	ands	r2, r3
 800e636:	9211      	str	r2, [sp, #68]	; 0x44
 800e638:	2200      	movs	r2, #0
 800e63a:	9210      	str	r2, [sp, #64]	; 0x40
 800e63c:	421e      	tst	r6, r3
 800e63e:	d100      	bne.n	800e642 <_svfprintf_r+0x9ea>
 800e640:	e65d      	b.n	800e2fe <_svfprintf_r+0x6a6>
 800e642:	4295      	cmp	r5, r2
 800e644:	dc25      	bgt.n	800e692 <_svfprintf_r+0xa3a>
 800e646:	9211      	str	r2, [sp, #68]	; 0x44
 800e648:	e659      	b.n	800e2fe <_svfprintf_r+0x6a6>
 800e64a:	9509      	str	r5, [sp, #36]	; 0x24
 800e64c:	e7bb      	b.n	800e5c6 <_svfprintf_r+0x96e>
 800e64e:	2366      	movs	r3, #102	; 0x66
 800e650:	9209      	str	r2, [sp, #36]	; 0x24
 800e652:	930f      	str	r3, [sp, #60]	; 0x3c
 800e654:	e7eb      	b.n	800e62e <_svfprintf_r+0x9d6>
 800e656:	42ab      	cmp	r3, r5
 800e658:	da0e      	bge.n	800e678 <_svfprintf_r+0xa20>
 800e65a:	1aed      	subs	r5, r5, r3
 800e65c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e65e:	785b      	ldrb	r3, [r3, #1]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d012      	beq.n	800e68a <_svfprintf_r+0xa32>
 800e664:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e666:	3301      	adds	r3, #1
 800e668:	9311      	str	r3, [sp, #68]	; 0x44
 800e66a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e66c:	3301      	adds	r3, #1
 800e66e:	9312      	str	r3, [sp, #72]	; 0x48
 800e670:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e672:	781b      	ldrb	r3, [r3, #0]
 800e674:	2bff      	cmp	r3, #255	; 0xff
 800e676:	d1ee      	bne.n	800e656 <_svfprintf_r+0x9fe>
 800e678:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e67a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e67c:	189b      	adds	r3, r3, r2
 800e67e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e680:	4353      	muls	r3, r2
 800e682:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e684:	189b      	adds	r3, r3, r2
 800e686:	9309      	str	r3, [sp, #36]	; 0x24
 800e688:	e639      	b.n	800e2fe <_svfprintf_r+0x6a6>
 800e68a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e68c:	3301      	adds	r3, #1
 800e68e:	9310      	str	r3, [sp, #64]	; 0x40
 800e690:	e7ee      	b.n	800e670 <_svfprintf_r+0xa18>
 800e692:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e694:	9311      	str	r3, [sp, #68]	; 0x44
 800e696:	e7eb      	b.n	800e670 <_svfprintf_r+0xa18>
 800e698:	1d23      	adds	r3, r4, #4
 800e69a:	930d      	str	r3, [sp, #52]	; 0x34
 800e69c:	06b3      	lsls	r3, r6, #26
 800e69e:	d509      	bpl.n	800e6b4 <_svfprintf_r+0xa5c>
 800e6a0:	6823      	ldr	r3, [r4, #0]
 800e6a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e6a4:	601a      	str	r2, [r3, #0]
 800e6a6:	17d2      	asrs	r2, r2, #31
 800e6a8:	605a      	str	r2, [r3, #4]
 800e6aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e6ac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800e6ae:	9308      	str	r3, [sp, #32]
 800e6b0:	f7ff fb0d 	bl	800dcce <_svfprintf_r+0x76>
 800e6b4:	06f3      	lsls	r3, r6, #27
 800e6b6:	d503      	bpl.n	800e6c0 <_svfprintf_r+0xa68>
 800e6b8:	6823      	ldr	r3, [r4, #0]
 800e6ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e6bc:	601a      	str	r2, [r3, #0]
 800e6be:	e7f4      	b.n	800e6aa <_svfprintf_r+0xa52>
 800e6c0:	0673      	lsls	r3, r6, #25
 800e6c2:	d503      	bpl.n	800e6cc <_svfprintf_r+0xa74>
 800e6c4:	6823      	ldr	r3, [r4, #0]
 800e6c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e6c8:	801a      	strh	r2, [r3, #0]
 800e6ca:	e7ee      	b.n	800e6aa <_svfprintf_r+0xa52>
 800e6cc:	05b6      	lsls	r6, r6, #22
 800e6ce:	d5f3      	bpl.n	800e6b8 <_svfprintf_r+0xa60>
 800e6d0:	6823      	ldr	r3, [r4, #0]
 800e6d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e6d4:	701a      	strb	r2, [r3, #0]
 800e6d6:	e7e8      	b.n	800e6aa <_svfprintf_r+0xa52>
 800e6d8:	2310      	movs	r3, #16
 800e6da:	431e      	orrs	r6, r3
 800e6dc:	2320      	movs	r3, #32
 800e6de:	0030      	movs	r0, r6
 800e6e0:	4018      	ands	r0, r3
 800e6e2:	421e      	tst	r6, r3
 800e6e4:	d00f      	beq.n	800e706 <_svfprintf_r+0xaae>
 800e6e6:	3b19      	subs	r3, #25
 800e6e8:	3407      	adds	r4, #7
 800e6ea:	439c      	bics	r4, r3
 800e6ec:	0022      	movs	r2, r4
 800e6ee:	ca18      	ldmia	r2!, {r3, r4}
 800e6f0:	9306      	str	r3, [sp, #24]
 800e6f2:	9407      	str	r4, [sp, #28]
 800e6f4:	920d      	str	r2, [sp, #52]	; 0x34
 800e6f6:	4bc9      	ldr	r3, [pc, #804]	; (800ea1c <_svfprintf_r+0xdc4>)
 800e6f8:	401e      	ands	r6, r3
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	221b      	movs	r2, #27
 800e6fe:	a91e      	add	r1, sp, #120	; 0x78
 800e700:	1852      	adds	r2, r2, r1
 800e702:	2100      	movs	r1, #0
 800e704:	e430      	b.n	800df68 <_svfprintf_r+0x310>
 800e706:	0022      	movs	r2, r4
 800e708:	ca08      	ldmia	r2!, {r3}
 800e70a:	0031      	movs	r1, r6
 800e70c:	920d      	str	r2, [sp, #52]	; 0x34
 800e70e:	2210      	movs	r2, #16
 800e710:	4011      	ands	r1, r2
 800e712:	4216      	tst	r6, r2
 800e714:	d002      	beq.n	800e71c <_svfprintf_r+0xac4>
 800e716:	9306      	str	r3, [sp, #24]
 800e718:	9007      	str	r0, [sp, #28]
 800e71a:	e7ec      	b.n	800e6f6 <_svfprintf_r+0xa9e>
 800e71c:	2240      	movs	r2, #64	; 0x40
 800e71e:	0030      	movs	r0, r6
 800e720:	4010      	ands	r0, r2
 800e722:	4216      	tst	r6, r2
 800e724:	d003      	beq.n	800e72e <_svfprintf_r+0xad6>
 800e726:	b29b      	uxth	r3, r3
 800e728:	9306      	str	r3, [sp, #24]
 800e72a:	9107      	str	r1, [sp, #28]
 800e72c:	e7e3      	b.n	800e6f6 <_svfprintf_r+0xa9e>
 800e72e:	2280      	movs	r2, #128	; 0x80
 800e730:	0031      	movs	r1, r6
 800e732:	0092      	lsls	r2, r2, #2
 800e734:	4011      	ands	r1, r2
 800e736:	4216      	tst	r6, r2
 800e738:	d0f6      	beq.n	800e728 <_svfprintf_r+0xad0>
 800e73a:	b2db      	uxtb	r3, r3
 800e73c:	e7eb      	b.n	800e716 <_svfprintf_r+0xabe>
 800e73e:	0023      	movs	r3, r4
 800e740:	cb04      	ldmia	r3!, {r2}
 800e742:	49b7      	ldr	r1, [pc, #732]	; (800ea20 <_svfprintf_r+0xdc8>)
 800e744:	9206      	str	r2, [sp, #24]
 800e746:	aa25      	add	r2, sp, #148	; 0x94
 800e748:	8011      	strh	r1, [r2, #0]
 800e74a:	4ab6      	ldr	r2, [pc, #728]	; (800ea24 <_svfprintf_r+0xdcc>)
 800e74c:	930d      	str	r3, [sp, #52]	; 0x34
 800e74e:	2300      	movs	r3, #0
 800e750:	921f      	str	r2, [sp, #124]	; 0x7c
 800e752:	2278      	movs	r2, #120	; 0x78
 800e754:	9307      	str	r3, [sp, #28]
 800e756:	3302      	adds	r3, #2
 800e758:	431e      	orrs	r6, r3
 800e75a:	920f      	str	r2, [sp, #60]	; 0x3c
 800e75c:	e7ce      	b.n	800e6fc <_svfprintf_r+0xaa4>
 800e75e:	0023      	movs	r3, r4
 800e760:	cb04      	ldmia	r3!, {r2}
 800e762:	2400      	movs	r4, #0
 800e764:	930d      	str	r3, [sp, #52]	; 0x34
 800e766:	231b      	movs	r3, #27
 800e768:	9208      	str	r2, [sp, #32]
 800e76a:	aa1e      	add	r2, sp, #120	; 0x78
 800e76c:	189b      	adds	r3, r3, r2
 800e76e:	701c      	strb	r4, [r3, #0]
 800e770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e772:	3301      	adds	r3, #1
 800e774:	d00e      	beq.n	800e794 <_svfprintf_r+0xb3c>
 800e776:	0021      	movs	r1, r4
 800e778:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e77a:	9808      	ldr	r0, [sp, #32]
 800e77c:	f002 f83a 	bl	80107f4 <memchr>
 800e780:	900c      	str	r0, [sp, #48]	; 0x30
 800e782:	42a0      	cmp	r0, r4
 800e784:	d100      	bne.n	800e788 <_svfprintf_r+0xb30>
 800e786:	e10d      	b.n	800e9a4 <_svfprintf_r+0xd4c>
 800e788:	9a08      	ldr	r2, [sp, #32]
 800e78a:	1a83      	subs	r3, r0, r2
 800e78c:	9309      	str	r3, [sp, #36]	; 0x24
 800e78e:	0023      	movs	r3, r4
 800e790:	940c      	str	r4, [sp, #48]	; 0x30
 800e792:	e44e      	b.n	800e032 <_svfprintf_r+0x3da>
 800e794:	9808      	ldr	r0, [sp, #32]
 800e796:	f7f1 fcb5 	bl	8000104 <strlen>
 800e79a:	9009      	str	r0, [sp, #36]	; 0x24
 800e79c:	e7f7      	b.n	800e78e <_svfprintf_r+0xb36>
 800e79e:	2310      	movs	r3, #16
 800e7a0:	431e      	orrs	r6, r3
 800e7a2:	2320      	movs	r3, #32
 800e7a4:	0030      	movs	r0, r6
 800e7a6:	4018      	ands	r0, r3
 800e7a8:	421e      	tst	r6, r3
 800e7aa:	d009      	beq.n	800e7c0 <_svfprintf_r+0xb68>
 800e7ac:	3b19      	subs	r3, #25
 800e7ae:	3407      	adds	r4, #7
 800e7b0:	439c      	bics	r4, r3
 800e7b2:	0022      	movs	r2, r4
 800e7b4:	ca18      	ldmia	r2!, {r3, r4}
 800e7b6:	9306      	str	r3, [sp, #24]
 800e7b8:	9407      	str	r4, [sp, #28]
 800e7ba:	920d      	str	r2, [sp, #52]	; 0x34
 800e7bc:	2301      	movs	r3, #1
 800e7be:	e79d      	b.n	800e6fc <_svfprintf_r+0xaa4>
 800e7c0:	0023      	movs	r3, r4
 800e7c2:	cb04      	ldmia	r3!, {r2}
 800e7c4:	0031      	movs	r1, r6
 800e7c6:	930d      	str	r3, [sp, #52]	; 0x34
 800e7c8:	2310      	movs	r3, #16
 800e7ca:	4019      	ands	r1, r3
 800e7cc:	421e      	tst	r6, r3
 800e7ce:	d003      	beq.n	800e7d8 <_svfprintf_r+0xb80>
 800e7d0:	9206      	str	r2, [sp, #24]
 800e7d2:	9007      	str	r0, [sp, #28]
 800e7d4:	3b0f      	subs	r3, #15
 800e7d6:	e791      	b.n	800e6fc <_svfprintf_r+0xaa4>
 800e7d8:	2340      	movs	r3, #64	; 0x40
 800e7da:	0030      	movs	r0, r6
 800e7dc:	4018      	ands	r0, r3
 800e7de:	421e      	tst	r6, r3
 800e7e0:	d003      	beq.n	800e7ea <_svfprintf_r+0xb92>
 800e7e2:	b293      	uxth	r3, r2
 800e7e4:	9306      	str	r3, [sp, #24]
 800e7e6:	9107      	str	r1, [sp, #28]
 800e7e8:	e7e8      	b.n	800e7bc <_svfprintf_r+0xb64>
 800e7ea:	2380      	movs	r3, #128	; 0x80
 800e7ec:	0031      	movs	r1, r6
 800e7ee:	009b      	lsls	r3, r3, #2
 800e7f0:	4019      	ands	r1, r3
 800e7f2:	421e      	tst	r6, r3
 800e7f4:	d003      	beq.n	800e7fe <_svfprintf_r+0xba6>
 800e7f6:	b2d3      	uxtb	r3, r2
 800e7f8:	9306      	str	r3, [sp, #24]
 800e7fa:	9007      	str	r0, [sp, #28]
 800e7fc:	e7de      	b.n	800e7bc <_svfprintf_r+0xb64>
 800e7fe:	9206      	str	r2, [sp, #24]
 800e800:	e7f1      	b.n	800e7e6 <_svfprintf_r+0xb8e>
 800e802:	4b89      	ldr	r3, [pc, #548]	; (800ea28 <_svfprintf_r+0xdd0>)
 800e804:	0030      	movs	r0, r6
 800e806:	931f      	str	r3, [sp, #124]	; 0x7c
 800e808:	2320      	movs	r3, #32
 800e80a:	4018      	ands	r0, r3
 800e80c:	421e      	tst	r6, r3
 800e80e:	d01a      	beq.n	800e846 <_svfprintf_r+0xbee>
 800e810:	3b19      	subs	r3, #25
 800e812:	3407      	adds	r4, #7
 800e814:	439c      	bics	r4, r3
 800e816:	0022      	movs	r2, r4
 800e818:	ca18      	ldmia	r2!, {r3, r4}
 800e81a:	9306      	str	r3, [sp, #24]
 800e81c:	9407      	str	r4, [sp, #28]
 800e81e:	920d      	str	r2, [sp, #52]	; 0x34
 800e820:	07f3      	lsls	r3, r6, #31
 800e822:	d50a      	bpl.n	800e83a <_svfprintf_r+0xbe2>
 800e824:	9b06      	ldr	r3, [sp, #24]
 800e826:	9a07      	ldr	r2, [sp, #28]
 800e828:	4313      	orrs	r3, r2
 800e82a:	d006      	beq.n	800e83a <_svfprintf_r+0xbe2>
 800e82c:	2230      	movs	r2, #48	; 0x30
 800e82e:	ab25      	add	r3, sp, #148	; 0x94
 800e830:	701a      	strb	r2, [r3, #0]
 800e832:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e834:	705a      	strb	r2, [r3, #1]
 800e836:	2302      	movs	r3, #2
 800e838:	431e      	orrs	r6, r3
 800e83a:	4b78      	ldr	r3, [pc, #480]	; (800ea1c <_svfprintf_r+0xdc4>)
 800e83c:	401e      	ands	r6, r3
 800e83e:	2302      	movs	r3, #2
 800e840:	e75c      	b.n	800e6fc <_svfprintf_r+0xaa4>
 800e842:	4b78      	ldr	r3, [pc, #480]	; (800ea24 <_svfprintf_r+0xdcc>)
 800e844:	e7de      	b.n	800e804 <_svfprintf_r+0xbac>
 800e846:	0023      	movs	r3, r4
 800e848:	cb04      	ldmia	r3!, {r2}
 800e84a:	0031      	movs	r1, r6
 800e84c:	930d      	str	r3, [sp, #52]	; 0x34
 800e84e:	2310      	movs	r3, #16
 800e850:	4019      	ands	r1, r3
 800e852:	421e      	tst	r6, r3
 800e854:	d002      	beq.n	800e85c <_svfprintf_r+0xc04>
 800e856:	9206      	str	r2, [sp, #24]
 800e858:	9007      	str	r0, [sp, #28]
 800e85a:	e7e1      	b.n	800e820 <_svfprintf_r+0xbc8>
 800e85c:	2340      	movs	r3, #64	; 0x40
 800e85e:	0030      	movs	r0, r6
 800e860:	4018      	ands	r0, r3
 800e862:	421e      	tst	r6, r3
 800e864:	d003      	beq.n	800e86e <_svfprintf_r+0xc16>
 800e866:	b293      	uxth	r3, r2
 800e868:	9306      	str	r3, [sp, #24]
 800e86a:	9107      	str	r1, [sp, #28]
 800e86c:	e7d8      	b.n	800e820 <_svfprintf_r+0xbc8>
 800e86e:	2380      	movs	r3, #128	; 0x80
 800e870:	0031      	movs	r1, r6
 800e872:	009b      	lsls	r3, r3, #2
 800e874:	4019      	ands	r1, r3
 800e876:	421e      	tst	r6, r3
 800e878:	d002      	beq.n	800e880 <_svfprintf_r+0xc28>
 800e87a:	b2d3      	uxtb	r3, r2
 800e87c:	9306      	str	r3, [sp, #24]
 800e87e:	e7eb      	b.n	800e858 <_svfprintf_r+0xc00>
 800e880:	9206      	str	r2, [sp, #24]
 800e882:	e7f2      	b.n	800e86a <_svfprintf_r+0xc12>
 800e884:	9b07      	ldr	r3, [sp, #28]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d10a      	bne.n	800e8a0 <_svfprintf_r+0xc48>
 800e88a:	9b06      	ldr	r3, [sp, #24]
 800e88c:	2b09      	cmp	r3, #9
 800e88e:	d807      	bhi.n	800e8a0 <_svfprintf_r+0xc48>
 800e890:	23e7      	movs	r3, #231	; 0xe7
 800e892:	aa1e      	add	r2, sp, #120	; 0x78
 800e894:	189b      	adds	r3, r3, r2
 800e896:	9a06      	ldr	r2, [sp, #24]
 800e898:	3230      	adds	r2, #48	; 0x30
 800e89a:	701a      	strb	r2, [r3, #0]
 800e89c:	f000 fc18 	bl	800f0d0 <_svfprintf_r+0x1478>
 800e8a0:	2680      	movs	r6, #128	; 0x80
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	00f6      	lsls	r6, r6, #3
 800e8a6:	930e      	str	r3, [sp, #56]	; 0x38
 800e8a8:	ad58      	add	r5, sp, #352	; 0x160
 800e8aa:	4026      	ands	r6, r4
 800e8ac:	220a      	movs	r2, #10
 800e8ae:	9806      	ldr	r0, [sp, #24]
 800e8b0:	9907      	ldr	r1, [sp, #28]
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	f7f1 fdf6 	bl	80004a4 <__aeabi_uldivmod>
 800e8b8:	1e6b      	subs	r3, r5, #1
 800e8ba:	3230      	adds	r2, #48	; 0x30
 800e8bc:	9308      	str	r3, [sp, #32]
 800e8be:	701a      	strb	r2, [r3, #0]
 800e8c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e8c2:	900c      	str	r0, [sp, #48]	; 0x30
 800e8c4:	3301      	adds	r3, #1
 800e8c6:	9110      	str	r1, [sp, #64]	; 0x40
 800e8c8:	930e      	str	r3, [sp, #56]	; 0x38
 800e8ca:	2e00      	cmp	r6, #0
 800e8cc:	d01d      	beq.n	800e90a <_svfprintf_r+0xcb2>
 800e8ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e8d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e8d2:	781b      	ldrb	r3, [r3, #0]
 800e8d4:	429a      	cmp	r2, r3
 800e8d6:	d118      	bne.n	800e90a <_svfprintf_r+0xcb2>
 800e8d8:	2aff      	cmp	r2, #255	; 0xff
 800e8da:	d016      	beq.n	800e90a <_svfprintf_r+0xcb2>
 800e8dc:	9b07      	ldr	r3, [sp, #28]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d102      	bne.n	800e8e8 <_svfprintf_r+0xc90>
 800e8e2:	9b06      	ldr	r3, [sp, #24]
 800e8e4:	2b09      	cmp	r3, #9
 800e8e6:	d910      	bls.n	800e90a <_svfprintf_r+0xcb2>
 800e8e8:	9b08      	ldr	r3, [sp, #32]
 800e8ea:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e8ec:	991d      	ldr	r1, [sp, #116]	; 0x74
 800e8ee:	1a9b      	subs	r3, r3, r2
 800e8f0:	0018      	movs	r0, r3
 800e8f2:	9308      	str	r3, [sp, #32]
 800e8f4:	f7fd ffd1 	bl	800c89a <strncpy>
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e8fc:	920e      	str	r2, [sp, #56]	; 0x38
 800e8fe:	785b      	ldrb	r3, [r3, #1]
 800e900:	1e5a      	subs	r2, r3, #1
 800e902:	4193      	sbcs	r3, r2
 800e904:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e906:	18d3      	adds	r3, r2, r3
 800e908:	9312      	str	r3, [sp, #72]	; 0x48
 800e90a:	9b07      	ldr	r3, [sp, #28]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d10f      	bne.n	800e930 <_svfprintf_r+0xcd8>
 800e910:	9b06      	ldr	r3, [sp, #24]
 800e912:	2b09      	cmp	r3, #9
 800e914:	d80c      	bhi.n	800e930 <_svfprintf_r+0xcd8>
 800e916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e918:	9a08      	ldr	r2, [sp, #32]
 800e91a:	9319      	str	r3, [sp, #100]	; 0x64
 800e91c:	ab58      	add	r3, sp, #352	; 0x160
 800e91e:	1a9b      	subs	r3, r3, r2
 800e920:	9309      	str	r3, [sp, #36]	; 0x24
 800e922:	2300      	movs	r3, #0
 800e924:	0026      	movs	r6, r4
 800e926:	930c      	str	r3, [sp, #48]	; 0x30
 800e928:	001d      	movs	r5, r3
 800e92a:	9310      	str	r3, [sp, #64]	; 0x40
 800e92c:	9311      	str	r3, [sp, #68]	; 0x44
 800e92e:	e4f2      	b.n	800e316 <_svfprintf_r+0x6be>
 800e930:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e932:	9d08      	ldr	r5, [sp, #32]
 800e934:	9306      	str	r3, [sp, #24]
 800e936:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e938:	9307      	str	r3, [sp, #28]
 800e93a:	e7b7      	b.n	800e8ac <_svfprintf_r+0xc54>
 800e93c:	200f      	movs	r0, #15
 800e93e:	ab58      	add	r3, sp, #352	; 0x160
 800e940:	9308      	str	r3, [sp, #32]
 800e942:	9b08      	ldr	r3, [sp, #32]
 800e944:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e946:	3b01      	subs	r3, #1
 800e948:	9308      	str	r3, [sp, #32]
 800e94a:	9b06      	ldr	r3, [sp, #24]
 800e94c:	4003      	ands	r3, r0
 800e94e:	5cd3      	ldrb	r3, [r2, r3]
 800e950:	9a08      	ldr	r2, [sp, #32]
 800e952:	7013      	strb	r3, [r2, #0]
 800e954:	9b07      	ldr	r3, [sp, #28]
 800e956:	0719      	lsls	r1, r3, #28
 800e958:	9b06      	ldr	r3, [sp, #24]
 800e95a:	091a      	lsrs	r2, r3, #4
 800e95c:	9b07      	ldr	r3, [sp, #28]
 800e95e:	4311      	orrs	r1, r2
 800e960:	091b      	lsrs	r3, r3, #4
 800e962:	9307      	str	r3, [sp, #28]
 800e964:	000b      	movs	r3, r1
 800e966:	9a07      	ldr	r2, [sp, #28]
 800e968:	9106      	str	r1, [sp, #24]
 800e96a:	4313      	orrs	r3, r2
 800e96c:	d1e9      	bne.n	800e942 <_svfprintf_r+0xcea>
 800e96e:	e7d2      	b.n	800e916 <_svfprintf_r+0xcbe>
 800e970:	aa58      	add	r2, sp, #352	; 0x160
 800e972:	9208      	str	r2, [sp, #32]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d1ce      	bne.n	800e916 <_svfprintf_r+0xcbe>
 800e978:	07f6      	lsls	r6, r6, #31
 800e97a:	d5cc      	bpl.n	800e916 <_svfprintf_r+0xcbe>
 800e97c:	aa1e      	add	r2, sp, #120	; 0x78
 800e97e:	33e7      	adds	r3, #231	; 0xe7
 800e980:	189b      	adds	r3, r3, r2
 800e982:	2230      	movs	r2, #48	; 0x30
 800e984:	e789      	b.n	800e89a <_svfprintf_r+0xc42>
 800e986:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d100      	bne.n	800e98e <_svfprintf_r+0xd36>
 800e98c:	e364      	b.n	800f058 <_svfprintf_r+0x1400>
 800e98e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e990:	211b      	movs	r1, #27
 800e992:	ab3f      	add	r3, sp, #252	; 0xfc
 800e994:	701a      	strb	r2, [r3, #0]
 800e996:	2200      	movs	r2, #0
 800e998:	a81e      	add	r0, sp, #120	; 0x78
 800e99a:	1809      	adds	r1, r1, r0
 800e99c:	700a      	strb	r2, [r1, #0]
 800e99e:	940d      	str	r4, [sp, #52]	; 0x34
 800e9a0:	f7ff fabd 	bl	800df1e <_svfprintf_r+0x2c6>
 800e9a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e9a6:	f7ff fb44 	bl	800e032 <_svfprintf_r+0x3da>
 800e9aa:	2010      	movs	r0, #16
 800e9ac:	1812      	adds	r2, r2, r0
 800e9ae:	6078      	str	r0, [r7, #4]
 800e9b0:	922e      	str	r2, [sp, #184]	; 0xb8
 800e9b2:	932d      	str	r3, [sp, #180]	; 0xb4
 800e9b4:	2b07      	cmp	r3, #7
 800e9b6:	dd08      	ble.n	800e9ca <_svfprintf_r+0xd72>
 800e9b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e9ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e9bc:	aa2c      	add	r2, sp, #176	; 0xb0
 800e9be:	f003 fa61 	bl	8011e84 <__ssprint_r>
 800e9c2:	2800      	cmp	r0, #0
 800e9c4:	d000      	beq.n	800e9c8 <_svfprintf_r+0xd70>
 800e9c6:	e326      	b.n	800f016 <_svfprintf_r+0x13be>
 800e9c8:	a92f      	add	r1, sp, #188	; 0xbc
 800e9ca:	000f      	movs	r7, r1
 800e9cc:	3c10      	subs	r4, #16
 800e9ce:	e4c5      	b.n	800e35c <_svfprintf_r+0x704>
 800e9d0:	2010      	movs	r0, #16
 800e9d2:	1812      	adds	r2, r2, r0
 800e9d4:	6078      	str	r0, [r7, #4]
 800e9d6:	922e      	str	r2, [sp, #184]	; 0xb8
 800e9d8:	932d      	str	r3, [sp, #180]	; 0xb4
 800e9da:	2b07      	cmp	r3, #7
 800e9dc:	dd08      	ble.n	800e9f0 <_svfprintf_r+0xd98>
 800e9de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e9e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e9e2:	aa2c      	add	r2, sp, #176	; 0xb0
 800e9e4:	f003 fa4e 	bl	8011e84 <__ssprint_r>
 800e9e8:	2800      	cmp	r0, #0
 800e9ea:	d000      	beq.n	800e9ee <_svfprintf_r+0xd96>
 800e9ec:	e313      	b.n	800f016 <_svfprintf_r+0x13be>
 800e9ee:	a92f      	add	r1, sp, #188	; 0xbc
 800e9f0:	000f      	movs	r7, r1
 800e9f2:	3c10      	subs	r4, #16
 800e9f4:	e50b      	b.n	800e40e <_svfprintf_r+0x7b6>
 800e9f6:	2010      	movs	r0, #16
 800e9f8:	1812      	adds	r2, r2, r0
 800e9fa:	6078      	str	r0, [r7, #4]
 800e9fc:	922e      	str	r2, [sp, #184]	; 0xb8
 800e9fe:	932d      	str	r3, [sp, #180]	; 0xb4
 800ea00:	2b07      	cmp	r3, #7
 800ea02:	dd08      	ble.n	800ea16 <_svfprintf_r+0xdbe>
 800ea04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea06:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ea08:	aa2c      	add	r2, sp, #176	; 0xb0
 800ea0a:	f003 fa3b 	bl	8011e84 <__ssprint_r>
 800ea0e:	2800      	cmp	r0, #0
 800ea10:	d000      	beq.n	800ea14 <_svfprintf_r+0xdbc>
 800ea12:	e300      	b.n	800f016 <_svfprintf_r+0x13be>
 800ea14:	a92f      	add	r1, sp, #188	; 0xbc
 800ea16:	000f      	movs	r7, r1
 800ea18:	3c10      	subs	r4, #16
 800ea1a:	e518      	b.n	800e44e <_svfprintf_r+0x7f6>
 800ea1c:	fffffbff 	.word	0xfffffbff
 800ea20:	00007830 	.word	0x00007830
 800ea24:	080151b4 	.word	0x080151b4
 800ea28:	080151c5 	.word	0x080151c5
 800ea2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea2e:	2b65      	cmp	r3, #101	; 0x65
 800ea30:	dc00      	bgt.n	800ea34 <_svfprintf_r+0xddc>
 800ea32:	e241      	b.n	800eeb8 <_svfprintf_r+0x1260>
 800ea34:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ea36:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ea38:	2200      	movs	r2, #0
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	f7f1 fd04 	bl	8000448 <__aeabi_dcmpeq>
 800ea40:	2800      	cmp	r0, #0
 800ea42:	d077      	beq.n	800eb34 <_svfprintf_r+0xedc>
 800ea44:	4bca      	ldr	r3, [pc, #808]	; (800ed70 <_svfprintf_r+0x1118>)
 800ea46:	603b      	str	r3, [r7, #0]
 800ea48:	2301      	movs	r3, #1
 800ea4a:	607b      	str	r3, [r7, #4]
 800ea4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ea4e:	3708      	adds	r7, #8
 800ea50:	3301      	adds	r3, #1
 800ea52:	932e      	str	r3, [sp, #184]	; 0xb8
 800ea54:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ea56:	3301      	adds	r3, #1
 800ea58:	932d      	str	r3, [sp, #180]	; 0xb4
 800ea5a:	2b07      	cmp	r3, #7
 800ea5c:	dd08      	ble.n	800ea70 <_svfprintf_r+0xe18>
 800ea5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea60:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ea62:	aa2c      	add	r2, sp, #176	; 0xb0
 800ea64:	f003 fa0e 	bl	8011e84 <__ssprint_r>
 800ea68:	2800      	cmp	r0, #0
 800ea6a:	d000      	beq.n	800ea6e <_svfprintf_r+0xe16>
 800ea6c:	e2d3      	b.n	800f016 <_svfprintf_r+0x13be>
 800ea6e:	af2f      	add	r7, sp, #188	; 0xbc
 800ea70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ea72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ea74:	4293      	cmp	r3, r2
 800ea76:	db01      	blt.n	800ea7c <_svfprintf_r+0xe24>
 800ea78:	07f3      	lsls	r3, r6, #31
 800ea7a:	d51b      	bpl.n	800eab4 <_svfprintf_r+0xe5c>
 800ea7c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ea7e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ea80:	603b      	str	r3, [r7, #0]
 800ea82:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ea84:	607b      	str	r3, [r7, #4]
 800ea86:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ea88:	3708      	adds	r7, #8
 800ea8a:	189b      	adds	r3, r3, r2
 800ea8c:	932e      	str	r3, [sp, #184]	; 0xb8
 800ea8e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ea90:	3301      	adds	r3, #1
 800ea92:	932d      	str	r3, [sp, #180]	; 0xb4
 800ea94:	2b07      	cmp	r3, #7
 800ea96:	dd08      	ble.n	800eaaa <_svfprintf_r+0xe52>
 800ea98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea9a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ea9c:	aa2c      	add	r2, sp, #176	; 0xb0
 800ea9e:	f003 f9f1 	bl	8011e84 <__ssprint_r>
 800eaa2:	2800      	cmp	r0, #0
 800eaa4:	d000      	beq.n	800eaa8 <_svfprintf_r+0xe50>
 800eaa6:	e2b6      	b.n	800f016 <_svfprintf_r+0x13be>
 800eaa8:	af2f      	add	r7, sp, #188	; 0xbc
 800eaaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eaac:	2510      	movs	r5, #16
 800eaae:	1e5c      	subs	r4, r3, #1
 800eab0:	2c00      	cmp	r4, #0
 800eab2:	dc2e      	bgt.n	800eb12 <_svfprintf_r+0xeba>
 800eab4:	0776      	lsls	r6, r6, #29
 800eab6:	d500      	bpl.n	800eaba <_svfprintf_r+0xe62>
 800eab8:	e290      	b.n	800efdc <_svfprintf_r+0x1384>
 800eaba:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800eabc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800eabe:	4293      	cmp	r3, r2
 800eac0:	da00      	bge.n	800eac4 <_svfprintf_r+0xe6c>
 800eac2:	0013      	movs	r3, r2
 800eac4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800eac6:	18d3      	adds	r3, r2, r3
 800eac8:	9317      	str	r3, [sp, #92]	; 0x5c
 800eaca:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d007      	beq.n	800eae0 <_svfprintf_r+0xe88>
 800ead0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ead2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ead4:	aa2c      	add	r2, sp, #176	; 0xb0
 800ead6:	f003 f9d5 	bl	8011e84 <__ssprint_r>
 800eada:	2800      	cmp	r0, #0
 800eadc:	d000      	beq.n	800eae0 <_svfprintf_r+0xe88>
 800eade:	e29a      	b.n	800f016 <_svfprintf_r+0x13be>
 800eae0:	2300      	movs	r3, #0
 800eae2:	932d      	str	r3, [sp, #180]	; 0xb4
 800eae4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d000      	beq.n	800eaec <_svfprintf_r+0xe94>
 800eaea:	e2b0      	b.n	800f04e <_svfprintf_r+0x13f6>
 800eaec:	af2f      	add	r7, sp, #188	; 0xbc
 800eaee:	e5dc      	b.n	800e6aa <_svfprintf_r+0xa52>
 800eaf0:	3210      	adds	r2, #16
 800eaf2:	607d      	str	r5, [r7, #4]
 800eaf4:	922e      	str	r2, [sp, #184]	; 0xb8
 800eaf6:	932d      	str	r3, [sp, #180]	; 0xb4
 800eaf8:	2b07      	cmp	r3, #7
 800eafa:	dd08      	ble.n	800eb0e <_svfprintf_r+0xeb6>
 800eafc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eafe:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eb00:	aa2c      	add	r2, sp, #176	; 0xb0
 800eb02:	f003 f9bf 	bl	8011e84 <__ssprint_r>
 800eb06:	2800      	cmp	r0, #0
 800eb08:	d000      	beq.n	800eb0c <_svfprintf_r+0xeb4>
 800eb0a:	e284      	b.n	800f016 <_svfprintf_r+0x13be>
 800eb0c:	a92f      	add	r1, sp, #188	; 0xbc
 800eb0e:	000f      	movs	r7, r1
 800eb10:	3c10      	subs	r4, #16
 800eb12:	0039      	movs	r1, r7
 800eb14:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800eb16:	4897      	ldr	r0, [pc, #604]	; (800ed74 <_svfprintf_r+0x111c>)
 800eb18:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800eb1a:	3301      	adds	r3, #1
 800eb1c:	3108      	adds	r1, #8
 800eb1e:	6038      	str	r0, [r7, #0]
 800eb20:	2c10      	cmp	r4, #16
 800eb22:	dce5      	bgt.n	800eaf0 <_svfprintf_r+0xe98>
 800eb24:	607c      	str	r4, [r7, #4]
 800eb26:	18a4      	adds	r4, r4, r2
 800eb28:	942e      	str	r4, [sp, #184]	; 0xb8
 800eb2a:	000f      	movs	r7, r1
 800eb2c:	932d      	str	r3, [sp, #180]	; 0xb4
 800eb2e:	2b07      	cmp	r3, #7
 800eb30:	ddc0      	ble.n	800eab4 <_svfprintf_r+0xe5c>
 800eb32:	e05f      	b.n	800ebf4 <_svfprintf_r+0xf9c>
 800eb34:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	dc78      	bgt.n	800ec2c <_svfprintf_r+0xfd4>
 800eb3a:	4b8d      	ldr	r3, [pc, #564]	; (800ed70 <_svfprintf_r+0x1118>)
 800eb3c:	603b      	str	r3, [r7, #0]
 800eb3e:	2301      	movs	r3, #1
 800eb40:	607b      	str	r3, [r7, #4]
 800eb42:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800eb44:	3708      	adds	r7, #8
 800eb46:	3301      	adds	r3, #1
 800eb48:	932e      	str	r3, [sp, #184]	; 0xb8
 800eb4a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800eb4c:	3301      	adds	r3, #1
 800eb4e:	932d      	str	r3, [sp, #180]	; 0xb4
 800eb50:	2b07      	cmp	r3, #7
 800eb52:	dd08      	ble.n	800eb66 <_svfprintf_r+0xf0e>
 800eb54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eb56:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eb58:	aa2c      	add	r2, sp, #176	; 0xb0
 800eb5a:	f003 f993 	bl	8011e84 <__ssprint_r>
 800eb5e:	2800      	cmp	r0, #0
 800eb60:	d000      	beq.n	800eb64 <_svfprintf_r+0xf0c>
 800eb62:	e258      	b.n	800f016 <_svfprintf_r+0x13be>
 800eb64:	af2f      	add	r7, sp, #188	; 0xbc
 800eb66:	990e      	ldr	r1, [sp, #56]	; 0x38
 800eb68:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800eb6a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800eb6c:	430b      	orrs	r3, r1
 800eb6e:	2101      	movs	r1, #1
 800eb70:	4031      	ands	r1, r6
 800eb72:	430b      	orrs	r3, r1
 800eb74:	d09e      	beq.n	800eab4 <_svfprintf_r+0xe5c>
 800eb76:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800eb78:	603b      	str	r3, [r7, #0]
 800eb7a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800eb7c:	607b      	str	r3, [r7, #4]
 800eb7e:	189a      	adds	r2, r3, r2
 800eb80:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800eb82:	922e      	str	r2, [sp, #184]	; 0xb8
 800eb84:	3301      	adds	r3, #1
 800eb86:	932d      	str	r3, [sp, #180]	; 0xb4
 800eb88:	3708      	adds	r7, #8
 800eb8a:	2b07      	cmp	r3, #7
 800eb8c:	dd08      	ble.n	800eba0 <_svfprintf_r+0xf48>
 800eb8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eb90:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eb92:	aa2c      	add	r2, sp, #176	; 0xb0
 800eb94:	f003 f976 	bl	8011e84 <__ssprint_r>
 800eb98:	2800      	cmp	r0, #0
 800eb9a:	d000      	beq.n	800eb9e <_svfprintf_r+0xf46>
 800eb9c:	e23b      	b.n	800f016 <_svfprintf_r+0x13be>
 800eb9e:	af2f      	add	r7, sp, #188	; 0xbc
 800eba0:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800eba2:	2c00      	cmp	r4, #0
 800eba4:	da19      	bge.n	800ebda <_svfprintf_r+0xf82>
 800eba6:	0038      	movs	r0, r7
 800eba8:	2510      	movs	r5, #16
 800ebaa:	4264      	negs	r4, r4
 800ebac:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800ebae:	4a71      	ldr	r2, [pc, #452]	; (800ed74 <_svfprintf_r+0x111c>)
 800ebb0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ebb2:	3101      	adds	r1, #1
 800ebb4:	3708      	adds	r7, #8
 800ebb6:	6002      	str	r2, [r0, #0]
 800ebb8:	2c10      	cmp	r4, #16
 800ebba:	dc25      	bgt.n	800ec08 <_svfprintf_r+0xfb0>
 800ebbc:	6044      	str	r4, [r0, #4]
 800ebbe:	18e4      	adds	r4, r4, r3
 800ebc0:	942e      	str	r4, [sp, #184]	; 0xb8
 800ebc2:	912d      	str	r1, [sp, #180]	; 0xb4
 800ebc4:	2907      	cmp	r1, #7
 800ebc6:	dd08      	ble.n	800ebda <_svfprintf_r+0xf82>
 800ebc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ebca:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ebcc:	aa2c      	add	r2, sp, #176	; 0xb0
 800ebce:	f003 f959 	bl	8011e84 <__ssprint_r>
 800ebd2:	2800      	cmp	r0, #0
 800ebd4:	d000      	beq.n	800ebd8 <_svfprintf_r+0xf80>
 800ebd6:	e21e      	b.n	800f016 <_svfprintf_r+0x13be>
 800ebd8:	af2f      	add	r7, sp, #188	; 0xbc
 800ebda:	9b08      	ldr	r3, [sp, #32]
 800ebdc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ebde:	603b      	str	r3, [r7, #0]
 800ebe0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ebe2:	18d2      	adds	r2, r2, r3
 800ebe4:	922e      	str	r2, [sp, #184]	; 0xb8
 800ebe6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800ebe8:	607b      	str	r3, [r7, #4]
 800ebea:	3201      	adds	r2, #1
 800ebec:	922d      	str	r2, [sp, #180]	; 0xb4
 800ebee:	2a07      	cmp	r2, #7
 800ebf0:	dc00      	bgt.n	800ebf4 <_svfprintf_r+0xf9c>
 800ebf2:	e45b      	b.n	800e4ac <_svfprintf_r+0x854>
 800ebf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ebf6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ebf8:	aa2c      	add	r2, sp, #176	; 0xb0
 800ebfa:	f003 f943 	bl	8011e84 <__ssprint_r>
 800ebfe:	2800      	cmp	r0, #0
 800ec00:	d000      	beq.n	800ec04 <_svfprintf_r+0xfac>
 800ec02:	e208      	b.n	800f016 <_svfprintf_r+0x13be>
 800ec04:	af2f      	add	r7, sp, #188	; 0xbc
 800ec06:	e755      	b.n	800eab4 <_svfprintf_r+0xe5c>
 800ec08:	3310      	adds	r3, #16
 800ec0a:	6045      	str	r5, [r0, #4]
 800ec0c:	932e      	str	r3, [sp, #184]	; 0xb8
 800ec0e:	912d      	str	r1, [sp, #180]	; 0xb4
 800ec10:	2907      	cmp	r1, #7
 800ec12:	dd08      	ble.n	800ec26 <_svfprintf_r+0xfce>
 800ec14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ec16:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ec18:	aa2c      	add	r2, sp, #176	; 0xb0
 800ec1a:	f003 f933 	bl	8011e84 <__ssprint_r>
 800ec1e:	2800      	cmp	r0, #0
 800ec20:	d000      	beq.n	800ec24 <_svfprintf_r+0xfcc>
 800ec22:	e1f8      	b.n	800f016 <_svfprintf_r+0x13be>
 800ec24:	af2f      	add	r7, sp, #188	; 0xbc
 800ec26:	0038      	movs	r0, r7
 800ec28:	3c10      	subs	r4, #16
 800ec2a:	e7bf      	b.n	800ebac <_svfprintf_r+0xf54>
 800ec2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ec2e:	002c      	movs	r4, r5
 800ec30:	429d      	cmp	r5, r3
 800ec32:	dd00      	ble.n	800ec36 <_svfprintf_r+0xfde>
 800ec34:	001c      	movs	r4, r3
 800ec36:	2c00      	cmp	r4, #0
 800ec38:	dd14      	ble.n	800ec64 <_svfprintf_r+0x100c>
 800ec3a:	9b08      	ldr	r3, [sp, #32]
 800ec3c:	607c      	str	r4, [r7, #4]
 800ec3e:	603b      	str	r3, [r7, #0]
 800ec40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ec42:	3708      	adds	r7, #8
 800ec44:	18e3      	adds	r3, r4, r3
 800ec46:	932e      	str	r3, [sp, #184]	; 0xb8
 800ec48:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ec4a:	3301      	adds	r3, #1
 800ec4c:	932d      	str	r3, [sp, #180]	; 0xb4
 800ec4e:	2b07      	cmp	r3, #7
 800ec50:	dd08      	ble.n	800ec64 <_svfprintf_r+0x100c>
 800ec52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ec54:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ec56:	aa2c      	add	r2, sp, #176	; 0xb0
 800ec58:	f003 f914 	bl	8011e84 <__ssprint_r>
 800ec5c:	2800      	cmp	r0, #0
 800ec5e:	d000      	beq.n	800ec62 <_svfprintf_r+0x100a>
 800ec60:	e1d9      	b.n	800f016 <_svfprintf_r+0x13be>
 800ec62:	af2f      	add	r7, sp, #188	; 0xbc
 800ec64:	43e3      	mvns	r3, r4
 800ec66:	17db      	asrs	r3, r3, #31
 800ec68:	401c      	ands	r4, r3
 800ec6a:	1b2c      	subs	r4, r5, r4
 800ec6c:	2c00      	cmp	r4, #0
 800ec6e:	dd18      	ble.n	800eca2 <_svfprintf_r+0x104a>
 800ec70:	0039      	movs	r1, r7
 800ec72:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ec74:	483f      	ldr	r0, [pc, #252]	; (800ed74 <_svfprintf_r+0x111c>)
 800ec76:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ec78:	3301      	adds	r3, #1
 800ec7a:	3108      	adds	r1, #8
 800ec7c:	6038      	str	r0, [r7, #0]
 800ec7e:	2c10      	cmp	r4, #16
 800ec80:	dc7a      	bgt.n	800ed78 <_svfprintf_r+0x1120>
 800ec82:	607c      	str	r4, [r7, #4]
 800ec84:	18a4      	adds	r4, r4, r2
 800ec86:	000f      	movs	r7, r1
 800ec88:	942e      	str	r4, [sp, #184]	; 0xb8
 800ec8a:	932d      	str	r3, [sp, #180]	; 0xb4
 800ec8c:	2b07      	cmp	r3, #7
 800ec8e:	dd08      	ble.n	800eca2 <_svfprintf_r+0x104a>
 800ec90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ec92:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ec94:	aa2c      	add	r2, sp, #176	; 0xb0
 800ec96:	f003 f8f5 	bl	8011e84 <__ssprint_r>
 800ec9a:	2800      	cmp	r0, #0
 800ec9c:	d000      	beq.n	800eca0 <_svfprintf_r+0x1048>
 800ec9e:	e1ba      	b.n	800f016 <_svfprintf_r+0x13be>
 800eca0:	af2f      	add	r7, sp, #188	; 0xbc
 800eca2:	9b08      	ldr	r3, [sp, #32]
 800eca4:	195d      	adds	r5, r3, r5
 800eca6:	0573      	lsls	r3, r6, #21
 800eca8:	d50b      	bpl.n	800ecc2 <_svfprintf_r+0x106a>
 800ecaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d176      	bne.n	800ed9e <_svfprintf_r+0x1146>
 800ecb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d176      	bne.n	800eda4 <_svfprintf_r+0x114c>
 800ecb6:	9b08      	ldr	r3, [sp, #32]
 800ecb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ecba:	189b      	adds	r3, r3, r2
 800ecbc:	429d      	cmp	r5, r3
 800ecbe:	d900      	bls.n	800ecc2 <_svfprintf_r+0x106a>
 800ecc0:	001d      	movs	r5, r3
 800ecc2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ecc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ecc6:	4293      	cmp	r3, r2
 800ecc8:	db01      	blt.n	800ecce <_svfprintf_r+0x1076>
 800ecca:	07f3      	lsls	r3, r6, #31
 800eccc:	d516      	bpl.n	800ecfc <_svfprintf_r+0x10a4>
 800ecce:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ecd0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ecd2:	603b      	str	r3, [r7, #0]
 800ecd4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ecd6:	607b      	str	r3, [r7, #4]
 800ecd8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ecda:	3708      	adds	r7, #8
 800ecdc:	189b      	adds	r3, r3, r2
 800ecde:	932e      	str	r3, [sp, #184]	; 0xb8
 800ece0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ece2:	3301      	adds	r3, #1
 800ece4:	932d      	str	r3, [sp, #180]	; 0xb4
 800ece6:	2b07      	cmp	r3, #7
 800ece8:	dd08      	ble.n	800ecfc <_svfprintf_r+0x10a4>
 800ecea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ecec:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ecee:	aa2c      	add	r2, sp, #176	; 0xb0
 800ecf0:	f003 f8c8 	bl	8011e84 <__ssprint_r>
 800ecf4:	2800      	cmp	r0, #0
 800ecf6:	d000      	beq.n	800ecfa <_svfprintf_r+0x10a2>
 800ecf8:	e18d      	b.n	800f016 <_svfprintf_r+0x13be>
 800ecfa:	af2f      	add	r7, sp, #188	; 0xbc
 800ecfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ecfe:	9b08      	ldr	r3, [sp, #32]
 800ed00:	4694      	mov	ip, r2
 800ed02:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800ed04:	4463      	add	r3, ip
 800ed06:	1b5b      	subs	r3, r3, r5
 800ed08:	1b14      	subs	r4, r2, r4
 800ed0a:	429c      	cmp	r4, r3
 800ed0c:	dd00      	ble.n	800ed10 <_svfprintf_r+0x10b8>
 800ed0e:	001c      	movs	r4, r3
 800ed10:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ed12:	2c00      	cmp	r4, #0
 800ed14:	dd12      	ble.n	800ed3c <_svfprintf_r+0x10e4>
 800ed16:	18e3      	adds	r3, r4, r3
 800ed18:	932e      	str	r3, [sp, #184]	; 0xb8
 800ed1a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ed1c:	603d      	str	r5, [r7, #0]
 800ed1e:	3301      	adds	r3, #1
 800ed20:	607c      	str	r4, [r7, #4]
 800ed22:	932d      	str	r3, [sp, #180]	; 0xb4
 800ed24:	3708      	adds	r7, #8
 800ed26:	2b07      	cmp	r3, #7
 800ed28:	dd08      	ble.n	800ed3c <_svfprintf_r+0x10e4>
 800ed2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ed2c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ed2e:	aa2c      	add	r2, sp, #176	; 0xb0
 800ed30:	f003 f8a8 	bl	8011e84 <__ssprint_r>
 800ed34:	2800      	cmp	r0, #0
 800ed36:	d000      	beq.n	800ed3a <_svfprintf_r+0x10e2>
 800ed38:	e16d      	b.n	800f016 <_svfprintf_r+0x13be>
 800ed3a:	af2f      	add	r7, sp, #188	; 0xbc
 800ed3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ed3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ed40:	2510      	movs	r5, #16
 800ed42:	1ad3      	subs	r3, r2, r3
 800ed44:	43e2      	mvns	r2, r4
 800ed46:	17d2      	asrs	r2, r2, #31
 800ed48:	4014      	ands	r4, r2
 800ed4a:	1b1c      	subs	r4, r3, r4
 800ed4c:	2c00      	cmp	r4, #0
 800ed4e:	dc00      	bgt.n	800ed52 <_svfprintf_r+0x10fa>
 800ed50:	e6b0      	b.n	800eab4 <_svfprintf_r+0xe5c>
 800ed52:	0039      	movs	r1, r7
 800ed54:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ed56:	4807      	ldr	r0, [pc, #28]	; (800ed74 <_svfprintf_r+0x111c>)
 800ed58:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ed5a:	3301      	adds	r3, #1
 800ed5c:	3108      	adds	r1, #8
 800ed5e:	6038      	str	r0, [r7, #0]
 800ed60:	2c10      	cmp	r4, #16
 800ed62:	dd00      	ble.n	800ed66 <_svfprintf_r+0x110e>
 800ed64:	e096      	b.n	800ee94 <_svfprintf_r+0x123c>
 800ed66:	1912      	adds	r2, r2, r4
 800ed68:	607c      	str	r4, [r7, #4]
 800ed6a:	922e      	str	r2, [sp, #184]	; 0xb8
 800ed6c:	e6dd      	b.n	800eb2a <_svfprintf_r+0xed2>
 800ed6e:	46c0      	nop			; (mov r8, r8)
 800ed70:	080151d6 	.word	0x080151d6
 800ed74:	080151e8 	.word	0x080151e8
 800ed78:	2010      	movs	r0, #16
 800ed7a:	1812      	adds	r2, r2, r0
 800ed7c:	6078      	str	r0, [r7, #4]
 800ed7e:	922e      	str	r2, [sp, #184]	; 0xb8
 800ed80:	932d      	str	r3, [sp, #180]	; 0xb4
 800ed82:	2b07      	cmp	r3, #7
 800ed84:	dd08      	ble.n	800ed98 <_svfprintf_r+0x1140>
 800ed86:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ed88:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ed8a:	aa2c      	add	r2, sp, #176	; 0xb0
 800ed8c:	f003 f87a 	bl	8011e84 <__ssprint_r>
 800ed90:	2800      	cmp	r0, #0
 800ed92:	d000      	beq.n	800ed96 <_svfprintf_r+0x113e>
 800ed94:	e13f      	b.n	800f016 <_svfprintf_r+0x13be>
 800ed96:	a92f      	add	r1, sp, #188	; 0xbc
 800ed98:	000f      	movs	r7, r1
 800ed9a:	3c10      	subs	r4, #16
 800ed9c:	e768      	b.n	800ec70 <_svfprintf_r+0x1018>
 800ed9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d05d      	beq.n	800ee60 <_svfprintf_r+0x1208>
 800eda4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eda6:	3b01      	subs	r3, #1
 800eda8:	9310      	str	r3, [sp, #64]	; 0x40
 800edaa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800edac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800edae:	603b      	str	r3, [r7, #0]
 800edb0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800edb2:	607b      	str	r3, [r7, #4]
 800edb4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800edb6:	3708      	adds	r7, #8
 800edb8:	189b      	adds	r3, r3, r2
 800edba:	932e      	str	r3, [sp, #184]	; 0xb8
 800edbc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800edbe:	3301      	adds	r3, #1
 800edc0:	932d      	str	r3, [sp, #180]	; 0xb4
 800edc2:	2b07      	cmp	r3, #7
 800edc4:	dd08      	ble.n	800edd8 <_svfprintf_r+0x1180>
 800edc6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800edc8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800edca:	aa2c      	add	r2, sp, #176	; 0xb0
 800edcc:	f003 f85a 	bl	8011e84 <__ssprint_r>
 800edd0:	2800      	cmp	r0, #0
 800edd2:	d000      	beq.n	800edd6 <_svfprintf_r+0x117e>
 800edd4:	e11f      	b.n	800f016 <_svfprintf_r+0x13be>
 800edd6:	af2f      	add	r7, sp, #188	; 0xbc
 800edd8:	9b08      	ldr	r3, [sp, #32]
 800edda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eddc:	189c      	adds	r4, r3, r2
 800edde:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ede0:	1b64      	subs	r4, r4, r5
 800ede2:	781b      	ldrb	r3, [r3, #0]
 800ede4:	429c      	cmp	r4, r3
 800ede6:	dd00      	ble.n	800edea <_svfprintf_r+0x1192>
 800ede8:	001c      	movs	r4, r3
 800edea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800edec:	2c00      	cmp	r4, #0
 800edee:	dd12      	ble.n	800ee16 <_svfprintf_r+0x11be>
 800edf0:	18e3      	adds	r3, r4, r3
 800edf2:	932e      	str	r3, [sp, #184]	; 0xb8
 800edf4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800edf6:	603d      	str	r5, [r7, #0]
 800edf8:	3301      	adds	r3, #1
 800edfa:	607c      	str	r4, [r7, #4]
 800edfc:	932d      	str	r3, [sp, #180]	; 0xb4
 800edfe:	3708      	adds	r7, #8
 800ee00:	2b07      	cmp	r3, #7
 800ee02:	dd08      	ble.n	800ee16 <_svfprintf_r+0x11be>
 800ee04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ee06:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ee08:	aa2c      	add	r2, sp, #176	; 0xb0
 800ee0a:	f003 f83b 	bl	8011e84 <__ssprint_r>
 800ee0e:	2800      	cmp	r0, #0
 800ee10:	d000      	beq.n	800ee14 <_svfprintf_r+0x11bc>
 800ee12:	e100      	b.n	800f016 <_svfprintf_r+0x13be>
 800ee14:	af2f      	add	r7, sp, #188	; 0xbc
 800ee16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ee18:	781a      	ldrb	r2, [r3, #0]
 800ee1a:	43e3      	mvns	r3, r4
 800ee1c:	17db      	asrs	r3, r3, #31
 800ee1e:	401c      	ands	r4, r3
 800ee20:	1b14      	subs	r4, r2, r4
 800ee22:	2c00      	cmp	r4, #0
 800ee24:	dd18      	ble.n	800ee58 <_svfprintf_r+0x1200>
 800ee26:	0039      	movs	r1, r7
 800ee28:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ee2a:	48aa      	ldr	r0, [pc, #680]	; (800f0d4 <_svfprintf_r+0x147c>)
 800ee2c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ee2e:	3301      	adds	r3, #1
 800ee30:	3108      	adds	r1, #8
 800ee32:	6038      	str	r0, [r7, #0]
 800ee34:	2c10      	cmp	r4, #16
 800ee36:	dc1a      	bgt.n	800ee6e <_svfprintf_r+0x1216>
 800ee38:	1912      	adds	r2, r2, r4
 800ee3a:	607c      	str	r4, [r7, #4]
 800ee3c:	922e      	str	r2, [sp, #184]	; 0xb8
 800ee3e:	000f      	movs	r7, r1
 800ee40:	932d      	str	r3, [sp, #180]	; 0xb4
 800ee42:	2b07      	cmp	r3, #7
 800ee44:	dd08      	ble.n	800ee58 <_svfprintf_r+0x1200>
 800ee46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ee48:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ee4a:	aa2c      	add	r2, sp, #176	; 0xb0
 800ee4c:	f003 f81a 	bl	8011e84 <__ssprint_r>
 800ee50:	2800      	cmp	r0, #0
 800ee52:	d000      	beq.n	800ee56 <_svfprintf_r+0x11fe>
 800ee54:	e0df      	b.n	800f016 <_svfprintf_r+0x13be>
 800ee56:	af2f      	add	r7, sp, #188	; 0xbc
 800ee58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ee5a:	781b      	ldrb	r3, [r3, #0]
 800ee5c:	18ed      	adds	r5, r5, r3
 800ee5e:	e724      	b.n	800ecaa <_svfprintf_r+0x1052>
 800ee60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ee62:	3b01      	subs	r3, #1
 800ee64:	9312      	str	r3, [sp, #72]	; 0x48
 800ee66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ee68:	3b01      	subs	r3, #1
 800ee6a:	9311      	str	r3, [sp, #68]	; 0x44
 800ee6c:	e79d      	b.n	800edaa <_svfprintf_r+0x1152>
 800ee6e:	2010      	movs	r0, #16
 800ee70:	1812      	adds	r2, r2, r0
 800ee72:	6078      	str	r0, [r7, #4]
 800ee74:	922e      	str	r2, [sp, #184]	; 0xb8
 800ee76:	932d      	str	r3, [sp, #180]	; 0xb4
 800ee78:	2b07      	cmp	r3, #7
 800ee7a:	dd08      	ble.n	800ee8e <_svfprintf_r+0x1236>
 800ee7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ee7e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ee80:	aa2c      	add	r2, sp, #176	; 0xb0
 800ee82:	f002 ffff 	bl	8011e84 <__ssprint_r>
 800ee86:	2800      	cmp	r0, #0
 800ee88:	d000      	beq.n	800ee8c <_svfprintf_r+0x1234>
 800ee8a:	e0c4      	b.n	800f016 <_svfprintf_r+0x13be>
 800ee8c:	a92f      	add	r1, sp, #188	; 0xbc
 800ee8e:	000f      	movs	r7, r1
 800ee90:	3c10      	subs	r4, #16
 800ee92:	e7c8      	b.n	800ee26 <_svfprintf_r+0x11ce>
 800ee94:	3210      	adds	r2, #16
 800ee96:	607d      	str	r5, [r7, #4]
 800ee98:	922e      	str	r2, [sp, #184]	; 0xb8
 800ee9a:	932d      	str	r3, [sp, #180]	; 0xb4
 800ee9c:	2b07      	cmp	r3, #7
 800ee9e:	dd08      	ble.n	800eeb2 <_svfprintf_r+0x125a>
 800eea0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eea2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eea4:	aa2c      	add	r2, sp, #176	; 0xb0
 800eea6:	f002 ffed 	bl	8011e84 <__ssprint_r>
 800eeaa:	2800      	cmp	r0, #0
 800eeac:	d000      	beq.n	800eeb0 <_svfprintf_r+0x1258>
 800eeae:	e0b2      	b.n	800f016 <_svfprintf_r+0x13be>
 800eeb0:	a92f      	add	r1, sp, #188	; 0xbc
 800eeb2:	000f      	movs	r7, r1
 800eeb4:	3c10      	subs	r4, #16
 800eeb6:	e74c      	b.n	800ed52 <_svfprintf_r+0x10fa>
 800eeb8:	003c      	movs	r4, r7
 800eeba:	9919      	ldr	r1, [sp, #100]	; 0x64
 800eebc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800eebe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eec0:	3101      	adds	r1, #1
 800eec2:	3301      	adds	r3, #1
 800eec4:	3408      	adds	r4, #8
 800eec6:	2a01      	cmp	r2, #1
 800eec8:	dc03      	bgt.n	800eed2 <_svfprintf_r+0x127a>
 800eeca:	2201      	movs	r2, #1
 800eecc:	4216      	tst	r6, r2
 800eece:	d100      	bne.n	800eed2 <_svfprintf_r+0x127a>
 800eed0:	e07f      	b.n	800efd2 <_svfprintf_r+0x137a>
 800eed2:	9a08      	ldr	r2, [sp, #32]
 800eed4:	912e      	str	r1, [sp, #184]	; 0xb8
 800eed6:	603a      	str	r2, [r7, #0]
 800eed8:	2201      	movs	r2, #1
 800eeda:	932d      	str	r3, [sp, #180]	; 0xb4
 800eedc:	607a      	str	r2, [r7, #4]
 800eede:	2b07      	cmp	r3, #7
 800eee0:	dd08      	ble.n	800eef4 <_svfprintf_r+0x129c>
 800eee2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eee4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eee6:	aa2c      	add	r2, sp, #176	; 0xb0
 800eee8:	f002 ffcc 	bl	8011e84 <__ssprint_r>
 800eeec:	2800      	cmp	r0, #0
 800eeee:	d000      	beq.n	800eef2 <_svfprintf_r+0x129a>
 800eef0:	e091      	b.n	800f016 <_svfprintf_r+0x13be>
 800eef2:	ac2f      	add	r4, sp, #188	; 0xbc
 800eef4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800eef6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800eef8:	6023      	str	r3, [r4, #0]
 800eefa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800eefc:	6063      	str	r3, [r4, #4]
 800eefe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ef00:	3408      	adds	r4, #8
 800ef02:	189b      	adds	r3, r3, r2
 800ef04:	932e      	str	r3, [sp, #184]	; 0xb8
 800ef06:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ef08:	3301      	adds	r3, #1
 800ef0a:	932d      	str	r3, [sp, #180]	; 0xb4
 800ef0c:	2b07      	cmp	r3, #7
 800ef0e:	dd07      	ble.n	800ef20 <_svfprintf_r+0x12c8>
 800ef10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ef12:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ef14:	aa2c      	add	r2, sp, #176	; 0xb0
 800ef16:	f002 ffb5 	bl	8011e84 <__ssprint_r>
 800ef1a:	2800      	cmp	r0, #0
 800ef1c:	d17b      	bne.n	800f016 <_svfprintf_r+0x13be>
 800ef1e:	ac2f      	add	r4, sp, #188	; 0xbc
 800ef20:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ef22:	2200      	movs	r2, #0
 800ef24:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ef26:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ef28:	9309      	str	r3, [sp, #36]	; 0x24
 800ef2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef2c:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800ef2e:	1e5d      	subs	r5, r3, #1
 800ef30:	2300      	movs	r3, #0
 800ef32:	f7f1 fa89 	bl	8000448 <__aeabi_dcmpeq>
 800ef36:	2800      	cmp	r0, #0
 800ef38:	d126      	bne.n	800ef88 <_svfprintf_r+0x1330>
 800ef3a:	9b08      	ldr	r3, [sp, #32]
 800ef3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef3e:	3301      	adds	r3, #1
 800ef40:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ef42:	6023      	str	r3, [r4, #0]
 800ef44:	1e7b      	subs	r3, r7, #1
 800ef46:	3201      	adds	r2, #1
 800ef48:	185b      	adds	r3, r3, r1
 800ef4a:	6065      	str	r5, [r4, #4]
 800ef4c:	932e      	str	r3, [sp, #184]	; 0xb8
 800ef4e:	922d      	str	r2, [sp, #180]	; 0xb4
 800ef50:	3408      	adds	r4, #8
 800ef52:	2a07      	cmp	r2, #7
 800ef54:	dd07      	ble.n	800ef66 <_svfprintf_r+0x130e>
 800ef56:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ef58:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ef5a:	aa2c      	add	r2, sp, #176	; 0xb0
 800ef5c:	f002 ff92 	bl	8011e84 <__ssprint_r>
 800ef60:	2800      	cmp	r0, #0
 800ef62:	d158      	bne.n	800f016 <_svfprintf_r+0x13be>
 800ef64:	ac2f      	add	r4, sp, #188	; 0xbc
 800ef66:	ab28      	add	r3, sp, #160	; 0xa0
 800ef68:	6023      	str	r3, [r4, #0]
 800ef6a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ef6c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ef6e:	6063      	str	r3, [r4, #4]
 800ef70:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ef72:	189b      	adds	r3, r3, r2
 800ef74:	932e      	str	r3, [sp, #184]	; 0xb8
 800ef76:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ef78:	3301      	adds	r3, #1
 800ef7a:	932d      	str	r3, [sp, #180]	; 0xb4
 800ef7c:	2b07      	cmp	r3, #7
 800ef7e:	dd00      	ble.n	800ef82 <_svfprintf_r+0x132a>
 800ef80:	e638      	b.n	800ebf4 <_svfprintf_r+0xf9c>
 800ef82:	3408      	adds	r4, #8
 800ef84:	0027      	movs	r7, r4
 800ef86:	e595      	b.n	800eab4 <_svfprintf_r+0xe5c>
 800ef88:	2710      	movs	r7, #16
 800ef8a:	2d00      	cmp	r5, #0
 800ef8c:	ddeb      	ble.n	800ef66 <_svfprintf_r+0x130e>
 800ef8e:	0021      	movs	r1, r4
 800ef90:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ef92:	4850      	ldr	r0, [pc, #320]	; (800f0d4 <_svfprintf_r+0x147c>)
 800ef94:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ef96:	3301      	adds	r3, #1
 800ef98:	3108      	adds	r1, #8
 800ef9a:	6020      	str	r0, [r4, #0]
 800ef9c:	2d10      	cmp	r5, #16
 800ef9e:	dc07      	bgt.n	800efb0 <_svfprintf_r+0x1358>
 800efa0:	6065      	str	r5, [r4, #4]
 800efa2:	000c      	movs	r4, r1
 800efa4:	18ad      	adds	r5, r5, r2
 800efa6:	952e      	str	r5, [sp, #184]	; 0xb8
 800efa8:	932d      	str	r3, [sp, #180]	; 0xb4
 800efaa:	2b07      	cmp	r3, #7
 800efac:	dddb      	ble.n	800ef66 <_svfprintf_r+0x130e>
 800efae:	e7d2      	b.n	800ef56 <_svfprintf_r+0x12fe>
 800efb0:	3210      	adds	r2, #16
 800efb2:	6067      	str	r7, [r4, #4]
 800efb4:	922e      	str	r2, [sp, #184]	; 0xb8
 800efb6:	932d      	str	r3, [sp, #180]	; 0xb4
 800efb8:	2b07      	cmp	r3, #7
 800efba:	dd07      	ble.n	800efcc <_svfprintf_r+0x1374>
 800efbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800efbe:	980a      	ldr	r0, [sp, #40]	; 0x28
 800efc0:	aa2c      	add	r2, sp, #176	; 0xb0
 800efc2:	f002 ff5f 	bl	8011e84 <__ssprint_r>
 800efc6:	2800      	cmp	r0, #0
 800efc8:	d125      	bne.n	800f016 <_svfprintf_r+0x13be>
 800efca:	a92f      	add	r1, sp, #188	; 0xbc
 800efcc:	000c      	movs	r4, r1
 800efce:	3d10      	subs	r5, #16
 800efd0:	e7dd      	b.n	800ef8e <_svfprintf_r+0x1336>
 800efd2:	9808      	ldr	r0, [sp, #32]
 800efd4:	912e      	str	r1, [sp, #184]	; 0xb8
 800efd6:	c705      	stmia	r7!, {r0, r2}
 800efd8:	932d      	str	r3, [sp, #180]	; 0xb4
 800efda:	e7e6      	b.n	800efaa <_svfprintf_r+0x1352>
 800efdc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800efde:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800efe0:	2510      	movs	r5, #16
 800efe2:	1a9c      	subs	r4, r3, r2
 800efe4:	2c00      	cmp	r4, #0
 800efe6:	dc00      	bgt.n	800efea <_svfprintf_r+0x1392>
 800efe8:	e567      	b.n	800eaba <_svfprintf_r+0xe62>
 800efea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800efec:	493a      	ldr	r1, [pc, #232]	; (800f0d8 <_svfprintf_r+0x1480>)
 800efee:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800eff0:	3301      	adds	r3, #1
 800eff2:	6039      	str	r1, [r7, #0]
 800eff4:	2c10      	cmp	r4, #16
 800eff6:	dc19      	bgt.n	800f02c <_svfprintf_r+0x13d4>
 800eff8:	607c      	str	r4, [r7, #4]
 800effa:	18a4      	adds	r4, r4, r2
 800effc:	942e      	str	r4, [sp, #184]	; 0xb8
 800effe:	932d      	str	r3, [sp, #180]	; 0xb4
 800f000:	2b07      	cmp	r3, #7
 800f002:	dc00      	bgt.n	800f006 <_svfprintf_r+0x13ae>
 800f004:	e559      	b.n	800eaba <_svfprintf_r+0xe62>
 800f006:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f008:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f00a:	aa2c      	add	r2, sp, #176	; 0xb0
 800f00c:	f002 ff3a 	bl	8011e84 <__ssprint_r>
 800f010:	2800      	cmp	r0, #0
 800f012:	d100      	bne.n	800f016 <_svfprintf_r+0x13be>
 800f014:	e551      	b.n	800eaba <_svfprintf_r+0xe62>
 800f016:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d101      	bne.n	800f020 <_svfprintf_r+0x13c8>
 800f01c:	f7ff f845 	bl	800e0aa <_svfprintf_r+0x452>
 800f020:	0019      	movs	r1, r3
 800f022:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f024:	f7fd fd80 	bl	800cb28 <_free_r>
 800f028:	f7ff f83f 	bl	800e0aa <_svfprintf_r+0x452>
 800f02c:	3210      	adds	r2, #16
 800f02e:	607d      	str	r5, [r7, #4]
 800f030:	922e      	str	r2, [sp, #184]	; 0xb8
 800f032:	932d      	str	r3, [sp, #180]	; 0xb4
 800f034:	3708      	adds	r7, #8
 800f036:	2b07      	cmp	r3, #7
 800f038:	dd07      	ble.n	800f04a <_svfprintf_r+0x13f2>
 800f03a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f03c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f03e:	aa2c      	add	r2, sp, #176	; 0xb0
 800f040:	f002 ff20 	bl	8011e84 <__ssprint_r>
 800f044:	2800      	cmp	r0, #0
 800f046:	d1e6      	bne.n	800f016 <_svfprintf_r+0x13be>
 800f048:	af2f      	add	r7, sp, #188	; 0xbc
 800f04a:	3c10      	subs	r4, #16
 800f04c:	e7cd      	b.n	800efea <_svfprintf_r+0x1392>
 800f04e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f050:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f052:	f7fd fd69 	bl	800cb28 <_free_r>
 800f056:	e549      	b.n	800eaec <_svfprintf_r+0xe94>
 800f058:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d101      	bne.n	800f062 <_svfprintf_r+0x140a>
 800f05e:	f7ff f824 	bl	800e0aa <_svfprintf_r+0x452>
 800f062:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f064:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f066:	aa2c      	add	r2, sp, #176	; 0xb0
 800f068:	f002 ff0c 	bl	8011e84 <__ssprint_r>
 800f06c:	f7ff f81d 	bl	800e0aa <_svfprintf_r+0x452>
 800f070:	0034      	movs	r4, r6
 800f072:	2a00      	cmp	r2, #0
 800f074:	d101      	bne.n	800f07a <_svfprintf_r+0x1422>
 800f076:	f7fe ff8c 	bl	800df92 <_svfprintf_r+0x33a>
 800f07a:	2b01      	cmp	r3, #1
 800f07c:	d101      	bne.n	800f082 <_svfprintf_r+0x142a>
 800f07e:	f7ff fc01 	bl	800e884 <_svfprintf_r+0xc2c>
 800f082:	2b02      	cmp	r3, #2
 800f084:	d100      	bne.n	800f088 <_svfprintf_r+0x1430>
 800f086:	e459      	b.n	800e93c <_svfprintf_r+0xce4>
 800f088:	2507      	movs	r5, #7
 800f08a:	ab58      	add	r3, sp, #352	; 0x160
 800f08c:	9308      	str	r3, [sp, #32]
 800f08e:	9a08      	ldr	r2, [sp, #32]
 800f090:	0013      	movs	r3, r2
 800f092:	3b01      	subs	r3, #1
 800f094:	9308      	str	r3, [sp, #32]
 800f096:	9b06      	ldr	r3, [sp, #24]
 800f098:	9908      	ldr	r1, [sp, #32]
 800f09a:	402b      	ands	r3, r5
 800f09c:	3330      	adds	r3, #48	; 0x30
 800f09e:	700b      	strb	r3, [r1, #0]
 800f0a0:	9907      	ldr	r1, [sp, #28]
 800f0a2:	074e      	lsls	r6, r1, #29
 800f0a4:	9906      	ldr	r1, [sp, #24]
 800f0a6:	08c8      	lsrs	r0, r1, #3
 800f0a8:	9907      	ldr	r1, [sp, #28]
 800f0aa:	4306      	orrs	r6, r0
 800f0ac:	08c9      	lsrs	r1, r1, #3
 800f0ae:	9107      	str	r1, [sp, #28]
 800f0b0:	0031      	movs	r1, r6
 800f0b2:	9807      	ldr	r0, [sp, #28]
 800f0b4:	9606      	str	r6, [sp, #24]
 800f0b6:	4301      	orrs	r1, r0
 800f0b8:	d1e9      	bne.n	800f08e <_svfprintf_r+0x1436>
 800f0ba:	07e1      	lsls	r1, r4, #31
 800f0bc:	d400      	bmi.n	800f0c0 <_svfprintf_r+0x1468>
 800f0be:	e42a      	b.n	800e916 <_svfprintf_r+0xcbe>
 800f0c0:	2b30      	cmp	r3, #48	; 0x30
 800f0c2:	d100      	bne.n	800f0c6 <_svfprintf_r+0x146e>
 800f0c4:	e427      	b.n	800e916 <_svfprintf_r+0xcbe>
 800f0c6:	2130      	movs	r1, #48	; 0x30
 800f0c8:	9b08      	ldr	r3, [sp, #32]
 800f0ca:	3b01      	subs	r3, #1
 800f0cc:	7019      	strb	r1, [r3, #0]
 800f0ce:	1e93      	subs	r3, r2, #2
 800f0d0:	9308      	str	r3, [sp, #32]
 800f0d2:	e420      	b.n	800e916 <_svfprintf_r+0xcbe>
 800f0d4:	080151e8 	.word	0x080151e8
 800f0d8:	080151d8 	.word	0x080151d8

0800f0dc <__ssvfscanf_r>:
 800f0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0de:	4ca7      	ldr	r4, [pc, #668]	; (800f37c <__ssvfscanf_r+0x2a0>)
 800f0e0:	44a5      	add	sp, r4
 800f0e2:	af02      	add	r7, sp, #8
 800f0e4:	633b      	str	r3, [r7, #48]	; 0x30
 800f0e6:	000b      	movs	r3, r1
 800f0e8:	6378      	str	r0, [r7, #52]	; 0x34
 800f0ea:	6479      	str	r1, [r7, #68]	; 0x44
 800f0ec:	61ba      	str	r2, [r7, #24]
 800f0ee:	220c      	movs	r2, #12
 800f0f0:	5e9a      	ldrsh	r2, [r3, r2]
 800f0f2:	2380      	movs	r3, #128	; 0x80
 800f0f4:	019b      	lsls	r3, r3, #6
 800f0f6:	421a      	tst	r2, r3
 800f0f8:	d105      	bne.n	800f106 <__ssvfscanf_r+0x2a>
 800f0fa:	4313      	orrs	r3, r2
 800f0fc:	818b      	strh	r3, [r1, #12]
 800f0fe:	4aa0      	ldr	r2, [pc, #640]	; (800f380 <__ssvfscanf_r+0x2a4>)
 800f100:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800f102:	4013      	ands	r3, r2
 800f104:	664b      	str	r3, [r1, #100]	; 0x64
 800f106:	2300      	movs	r3, #0
 800f108:	617b      	str	r3, [r7, #20]
 800f10a:	643b      	str	r3, [r7, #64]	; 0x40
 800f10c:	62bb      	str	r3, [r7, #40]	; 0x28
 800f10e:	627b      	str	r3, [r7, #36]	; 0x24
 800f110:	63bb      	str	r3, [r7, #56]	; 0x38
 800f112:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f114:	69bb      	ldr	r3, [r7, #24]
 800f116:	69ba      	ldr	r2, [r7, #24]
 800f118:	781b      	ldrb	r3, [r3, #0]
 800f11a:	3201      	adds	r2, #1
 800f11c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f11e:	61ba      	str	r2, [r7, #24]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d100      	bne.n	800f126 <__ssvfscanf_r+0x4a>
 800f124:	e0d7      	b.n	800f2d6 <__ssvfscanf_r+0x1fa>
 800f126:	2608      	movs	r6, #8
 800f128:	2108      	movs	r1, #8
 800f12a:	4a96      	ldr	r2, [pc, #600]	; (800f384 <__ssvfscanf_r+0x2a8>)
 800f12c:	5cd2      	ldrb	r2, [r2, r3]
 800f12e:	4016      	ands	r6, r2
 800f130:	420a      	tst	r2, r1
 800f132:	d01d      	beq.n	800f170 <__ssvfscanf_r+0x94>
 800f134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f136:	685b      	ldr	r3, [r3, #4]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	dd12      	ble.n	800f162 <__ssvfscanf_r+0x86>
 800f13c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f13e:	4991      	ldr	r1, [pc, #580]	; (800f384 <__ssvfscanf_r+0x2a8>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	781a      	ldrb	r2, [r3, #0]
 800f144:	5c8a      	ldrb	r2, [r1, r2]
 800f146:	2108      	movs	r1, #8
 800f148:	420a      	tst	r2, r1
 800f14a:	d0e3      	beq.n	800f114 <__ssvfscanf_r+0x38>
 800f14c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f14e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f150:	3201      	adds	r2, #1
 800f152:	63ba      	str	r2, [r7, #56]	; 0x38
 800f154:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f156:	3301      	adds	r3, #1
 800f158:	6852      	ldr	r2, [r2, #4]
 800f15a:	600b      	str	r3, [r1, #0]
 800f15c:	3a01      	subs	r2, #1
 800f15e:	604a      	str	r2, [r1, #4]
 800f160:	e7e8      	b.n	800f134 <__ssvfscanf_r+0x58>
 800f162:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f164:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f166:	f002 ff4d 	bl	8012004 <__ssrefill_r>
 800f16a:	2800      	cmp	r0, #0
 800f16c:	d0e6      	beq.n	800f13c <__ssvfscanf_r+0x60>
 800f16e:	e7d1      	b.n	800f114 <__ssvfscanf_r+0x38>
 800f170:	2b25      	cmp	r3, #37	; 0x25
 800f172:	d165      	bne.n	800f240 <__ssvfscanf_r+0x164>
 800f174:	250a      	movs	r5, #10
 800f176:	2480      	movs	r4, #128	; 0x80
 800f178:	69ba      	ldr	r2, [r7, #24]
 800f17a:	63fe      	str	r6, [r7, #60]	; 0x3c
 800f17c:	3b16      	subs	r3, #22
 800f17e:	69b9      	ldr	r1, [r7, #24]
 800f180:	3101      	adds	r1, #1
 800f182:	61b9      	str	r1, [r7, #24]
 800f184:	7811      	ldrb	r1, [r2, #0]
 800f186:	0008      	movs	r0, r1
 800f188:	3825      	subs	r0, #37	; 0x25
 800f18a:	2855      	cmp	r0, #85	; 0x55
 800f18c:	d900      	bls.n	800f190 <__ssvfscanf_r+0xb4>
 800f18e:	e170      	b.n	800f472 <__ssvfscanf_r+0x396>
 800f190:	f7f0 ffca 	bl	8000128 <__gnu_thumb1_case_uhi>
 800f194:	016f0056 	.word	0x016f0056
 800f198:	016f016f 	.word	0x016f016f
 800f19c:	0081016f 	.word	0x0081016f
 800f1a0:	016f016f 	.word	0x016f016f
 800f1a4:	016f016f 	.word	0x016f016f
 800f1a8:	00b8016f 	.word	0x00b8016f
 800f1ac:	00b800b8 	.word	0x00b800b8
 800f1b0:	00b800b8 	.word	0x00b800b8
 800f1b4:	00b800b8 	.word	0x00b800b8
 800f1b8:	00b800b8 	.word	0x00b800b8
 800f1bc:	016f00b8 	.word	0x016f00b8
 800f1c0:	016f016f 	.word	0x016f016f
 800f1c4:	016f016f 	.word	0x016f016f
 800f1c8:	016f016f 	.word	0x016f016f
 800f1cc:	016f00d8 	.word	0x016f00d8
 800f1d0:	00c1010a 	.word	0x00c1010a
 800f1d4:	00d800d8 	.word	0x00d800d8
 800f1d8:	016f00d8 	.word	0x016f00d8
 800f1dc:	016f016f 	.word	0x016f016f
 800f1e0:	009f016f 	.word	0x009f016f
 800f1e4:	016f016f 	.word	0x016f016f
 800f1e8:	016f00c9 	.word	0x016f00c9
 800f1ec:	016f016f 	.word	0x016f016f
 800f1f0:	016f00f0 	.word	0x016f00f0
 800f1f4:	016f016f 	.word	0x016f016f
 800f1f8:	00d1016f 	.word	0x00d1016f
 800f1fc:	016f016f 	.word	0x016f016f
 800f200:	016f00fe 	.word	0x016f00fe
 800f204:	016f016f 	.word	0x016f016f
 800f208:	016f016f 	.word	0x016f016f
 800f20c:	016f00d8 	.word	0x016f00d8
 800f210:	00c3010c 	.word	0x00c3010c
 800f214:	00d800d8 	.word	0x00d800d8
 800f218:	009400d8 	.word	0x009400d8
 800f21c:	009f012f 	.word	0x009f012f
 800f220:	0088016f 	.word	0x0088016f
 800f224:	011200a9 	.word	0x011200a9
 800f228:	011000cb 	.word	0x011000cb
 800f22c:	016f016f 	.word	0x016f016f
 800f230:	00a600f2 	.word	0x00a600f2
 800f234:	016f00cf 	.word	0x016f00cf
 800f238:	00d1016f 	.word	0x00d1016f
 800f23c:	00a6016f 	.word	0x00a6016f
 800f240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f242:	685b      	ldr	r3, [r3, #4]
 800f244:	2b00      	cmp	r3, #0
 800f246:	dd12      	ble.n	800f26e <__ssvfscanf_r+0x192>
 800f248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f24a:	69ba      	ldr	r2, [r7, #24]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	3a01      	subs	r2, #1
 800f250:	7819      	ldrb	r1, [r3, #0]
 800f252:	7812      	ldrb	r2, [r2, #0]
 800f254:	4291      	cmp	r1, r2
 800f256:	d13e      	bne.n	800f2d6 <__ssvfscanf_r+0x1fa>
 800f258:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f25a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f25c:	6852      	ldr	r2, [r2, #4]
 800f25e:	3301      	adds	r3, #1
 800f260:	600b      	str	r3, [r1, #0]
 800f262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f264:	3a01      	subs	r2, #1
 800f266:	604a      	str	r2, [r1, #4]
 800f268:	3301      	adds	r3, #1
 800f26a:	63bb      	str	r3, [r7, #56]	; 0x38
 800f26c:	e752      	b.n	800f114 <__ssvfscanf_r+0x38>
 800f26e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f270:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f272:	f002 fec7 	bl	8012004 <__ssrefill_r>
 800f276:	2800      	cmp	r0, #0
 800f278:	d0e6      	beq.n	800f248 <__ssvfscanf_r+0x16c>
 800f27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d003      	beq.n	800f288 <__ssvfscanf_r+0x1ac>
 800f280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f282:	899b      	ldrh	r3, [r3, #12]
 800f284:	065b      	lsls	r3, r3, #25
 800f286:	d526      	bpl.n	800f2d6 <__ssvfscanf_r+0x1fa>
 800f288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d000      	beq.n	800f290 <__ssvfscanf_r+0x1b4>
 800f28e:	e0f6      	b.n	800f47e <__ssvfscanf_r+0x3a2>
 800f290:	3b01      	subs	r3, #1
 800f292:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f294:	e104      	b.n	800f4a0 <__ssvfscanf_r+0x3c4>
 800f296:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f298:	4332      	orrs	r2, r6
 800f29a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f29c:	d11b      	bne.n	800f2d6 <__ssvfscanf_r+0x1fa>
 800f29e:	2610      	movs	r6, #16
 800f2a0:	69ba      	ldr	r2, [r7, #24]
 800f2a2:	e76c      	b.n	800f17e <__ssvfscanf_r+0xa2>
 800f2a4:	421e      	tst	r6, r3
 800f2a6:	d116      	bne.n	800f2d6 <__ssvfscanf_r+0x1fa>
 800f2a8:	7851      	ldrb	r1, [r2, #1]
 800f2aa:	296c      	cmp	r1, #108	; 0x6c
 800f2ac:	d103      	bne.n	800f2b6 <__ssvfscanf_r+0x1da>
 800f2ae:	3202      	adds	r2, #2
 800f2b0:	61ba      	str	r2, [r7, #24]
 800f2b2:	2202      	movs	r2, #2
 800f2b4:	e000      	b.n	800f2b8 <__ssvfscanf_r+0x1dc>
 800f2b6:	2201      	movs	r2, #1
 800f2b8:	4316      	orrs	r6, r2
 800f2ba:	e7f1      	b.n	800f2a0 <__ssvfscanf_r+0x1c4>
 800f2bc:	421e      	tst	r6, r3
 800f2be:	d10a      	bne.n	800f2d6 <__ssvfscanf_r+0x1fa>
 800f2c0:	7851      	ldrb	r1, [r2, #1]
 800f2c2:	2968      	cmp	r1, #104	; 0x68
 800f2c4:	d103      	bne.n	800f2ce <__ssvfscanf_r+0x1f2>
 800f2c6:	3202      	adds	r2, #2
 800f2c8:	61ba      	str	r2, [r7, #24]
 800f2ca:	2208      	movs	r2, #8
 800f2cc:	e7f4      	b.n	800f2b8 <__ssvfscanf_r+0x1dc>
 800f2ce:	2204      	movs	r2, #4
 800f2d0:	e7f2      	b.n	800f2b8 <__ssvfscanf_r+0x1dc>
 800f2d2:	421e      	tst	r6, r3
 800f2d4:	d0ed      	beq.n	800f2b2 <__ssvfscanf_r+0x1d6>
 800f2d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d000      	beq.n	800f2de <__ssvfscanf_r+0x202>
 800f2dc:	e0da      	b.n	800f494 <__ssvfscanf_r+0x3b8>
 800f2de:	e0df      	b.n	800f4a0 <__ssvfscanf_r+0x3c4>
 800f2e0:	421e      	tst	r6, r3
 800f2e2:	d0dd      	beq.n	800f2a0 <__ssvfscanf_r+0x1c4>
 800f2e4:	e7f7      	b.n	800f2d6 <__ssvfscanf_r+0x1fa>
 800f2e6:	228f      	movs	r2, #143	; 0x8f
 800f2e8:	218f      	movs	r1, #143	; 0x8f
 800f2ea:	4032      	ands	r2, r6
 800f2ec:	420e      	tst	r6, r1
 800f2ee:	d1f2      	bne.n	800f2d6 <__ssvfscanf_r+0x1fa>
 800f2f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f2f2:	2900      	cmp	r1, #0
 800f2f4:	d104      	bne.n	800f300 <__ssvfscanf_r+0x224>
 800f2f6:	b082      	sub	sp, #8
 800f2f8:	a902      	add	r1, sp, #8
 800f2fa:	6439      	str	r1, [r7, #64]	; 0x40
 800f2fc:	600a      	str	r2, [r1, #0]
 800f2fe:	604a      	str	r2, [r1, #4]
 800f300:	4326      	orrs	r6, r4
 800f302:	e7cd      	b.n	800f2a0 <__ssvfscanf_r+0x1c4>
 800f304:	228f      	movs	r2, #143	; 0x8f
 800f306:	4216      	tst	r6, r2
 800f308:	d1e5      	bne.n	800f2d6 <__ssvfscanf_r+0x1fa>
 800f30a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f30c:	436a      	muls	r2, r5
 800f30e:	3a30      	subs	r2, #48	; 0x30
 800f310:	188a      	adds	r2, r1, r2
 800f312:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f314:	e7c4      	b.n	800f2a0 <__ssvfscanf_r+0x1c4>
 800f316:	2301      	movs	r3, #1
 800f318:	431e      	orrs	r6, r3
 800f31a:	4b1b      	ldr	r3, [pc, #108]	; (800f388 <__ssvfscanf_r+0x2ac>)
 800f31c:	617b      	str	r3, [r7, #20]
 800f31e:	230a      	movs	r3, #10
 800f320:	2403      	movs	r4, #3
 800f322:	627b      	str	r3, [r7, #36]	; 0x24
 800f324:	e00f      	b.n	800f346 <__ssvfscanf_r+0x26a>
 800f326:	2301      	movs	r3, #1
 800f328:	431e      	orrs	r6, r3
 800f32a:	4b18      	ldr	r3, [pc, #96]	; (800f38c <__ssvfscanf_r+0x2b0>)
 800f32c:	617b      	str	r3, [r7, #20]
 800f32e:	2308      	movs	r3, #8
 800f330:	e7f6      	b.n	800f320 <__ssvfscanf_r+0x244>
 800f332:	4b16      	ldr	r3, [pc, #88]	; (800f38c <__ssvfscanf_r+0x2b0>)
 800f334:	e7f2      	b.n	800f31c <__ssvfscanf_r+0x240>
 800f336:	2380      	movs	r3, #128	; 0x80
 800f338:	009b      	lsls	r3, r3, #2
 800f33a:	431e      	orrs	r6, r3
 800f33c:	4b13      	ldr	r3, [pc, #76]	; (800f38c <__ssvfscanf_r+0x2b0>)
 800f33e:	617b      	str	r3, [r7, #20]
 800f340:	2310      	movs	r3, #16
 800f342:	e7ed      	b.n	800f320 <__ssvfscanf_r+0x244>
 800f344:	2404      	movs	r4, #4
 800f346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f348:	685b      	ldr	r3, [r3, #4]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	dd55      	ble.n	800f3fa <__ssvfscanf_r+0x31e>
 800f34e:	0673      	lsls	r3, r6, #25
 800f350:	d407      	bmi.n	800f362 <__ssvfscanf_r+0x286>
 800f352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f354:	490b      	ldr	r1, [pc, #44]	; (800f384 <__ssvfscanf_r+0x2a8>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	781a      	ldrb	r2, [r3, #0]
 800f35a:	5c8a      	ldrb	r2, [r1, r2]
 800f35c:	2108      	movs	r1, #8
 800f35e:	420a      	tst	r2, r1
 800f360:	d152      	bne.n	800f408 <__ssvfscanf_r+0x32c>
 800f362:	1e60      	subs	r0, r4, #1
 800f364:	2803      	cmp	r0, #3
 800f366:	d863      	bhi.n	800f430 <__ssvfscanf_r+0x354>
 800f368:	f7f0 fede 	bl	8000128 <__gnu_thumb1_case_uhi>
 800f36c:	03bd01da 	.word	0x03bd01da
 800f370:	068a0579 	.word	0x068a0579
 800f374:	2301      	movs	r3, #1
 800f376:	431e      	orrs	r6, r3
 800f378:	2402      	movs	r4, #2
 800f37a:	e7e4      	b.n	800f346 <__ssvfscanf_r+0x26a>
 800f37c:	fffffd34 	.word	0xfffffd34
 800f380:	ffffdfff 	.word	0xffffdfff
 800f384:	08014ed1 	.word	0x08014ed1
 800f388:	0800c52d 	.word	0x0800c52d
 800f38c:	08011b35 	.word	0x08011b35
 800f390:	2248      	movs	r2, #72	; 0x48
 800f392:	2318      	movs	r3, #24
 800f394:	189b      	adds	r3, r3, r2
 800f396:	19d8      	adds	r0, r3, r7
 800f398:	69b9      	ldr	r1, [r7, #24]
 800f39a:	f001 f9d7 	bl	801074c <__sccl>
 800f39e:	2340      	movs	r3, #64	; 0x40
 800f3a0:	2401      	movs	r4, #1
 800f3a2:	61b8      	str	r0, [r7, #24]
 800f3a4:	431e      	orrs	r6, r3
 800f3a6:	e7ce      	b.n	800f346 <__ssvfscanf_r+0x26a>
 800f3a8:	2301      	movs	r3, #1
 800f3aa:	431e      	orrs	r6, r3
 800f3ac:	2340      	movs	r3, #64	; 0x40
 800f3ae:	2400      	movs	r4, #0
 800f3b0:	431e      	orrs	r6, r3
 800f3b2:	e7c8      	b.n	800f346 <__ssvfscanf_r+0x26a>
 800f3b4:	2388      	movs	r3, #136	; 0x88
 800f3b6:	e7bf      	b.n	800f338 <__ssvfscanf_r+0x25c>
 800f3b8:	06f3      	lsls	r3, r6, #27
 800f3ba:	d500      	bpl.n	800f3be <__ssvfscanf_r+0x2e2>
 800f3bc:	e6aa      	b.n	800f114 <__ssvfscanf_r+0x38>
 800f3be:	2108      	movs	r1, #8
 800f3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3c2:	cb04      	ldmia	r3!, {r2}
 800f3c4:	420e      	tst	r6, r1
 800f3c6:	d003      	beq.n	800f3d0 <__ssvfscanf_r+0x2f4>
 800f3c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f3ca:	7011      	strb	r1, [r2, #0]
 800f3cc:	633b      	str	r3, [r7, #48]	; 0x30
 800f3ce:	e6a1      	b.n	800f114 <__ssvfscanf_r+0x38>
 800f3d0:	0771      	lsls	r1, r6, #29
 800f3d2:	d502      	bpl.n	800f3da <__ssvfscanf_r+0x2fe>
 800f3d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f3d6:	8011      	strh	r1, [r2, #0]
 800f3d8:	e7f8      	b.n	800f3cc <__ssvfscanf_r+0x2f0>
 800f3da:	07f1      	lsls	r1, r6, #31
 800f3dc:	d502      	bpl.n	800f3e4 <__ssvfscanf_r+0x308>
 800f3de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f3e0:	6011      	str	r1, [r2, #0]
 800f3e2:	e7f3      	b.n	800f3cc <__ssvfscanf_r+0x2f0>
 800f3e4:	07b6      	lsls	r6, r6, #30
 800f3e6:	d5fa      	bpl.n	800f3de <__ssvfscanf_r+0x302>
 800f3e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f3ea:	6011      	str	r1, [r2, #0]
 800f3ec:	17c9      	asrs	r1, r1, #31
 800f3ee:	6051      	str	r1, [r2, #4]
 800f3f0:	e7ec      	b.n	800f3cc <__ssvfscanf_r+0x2f0>
 800f3f2:	4ba2      	ldr	r3, [pc, #648]	; (800f67c <__ssvfscanf_r+0x5a0>)
 800f3f4:	617b      	str	r3, [r7, #20]
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	e792      	b.n	800f320 <__ssvfscanf_r+0x244>
 800f3fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f3fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f3fe:	f002 fe01 	bl	8012004 <__ssrefill_r>
 800f402:	2800      	cmp	r0, #0
 800f404:	d0a3      	beq.n	800f34e <__ssvfscanf_r+0x272>
 800f406:	e738      	b.n	800f27a <__ssvfscanf_r+0x19e>
 800f408:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f40a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f40c:	3201      	adds	r2, #1
 800f40e:	63ba      	str	r2, [r7, #56]	; 0x38
 800f410:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f412:	6852      	ldr	r2, [r2, #4]
 800f414:	3a01      	subs	r2, #1
 800f416:	604a      	str	r2, [r1, #4]
 800f418:	2a00      	cmp	r2, #0
 800f41a:	dd02      	ble.n	800f422 <__ssvfscanf_r+0x346>
 800f41c:	3301      	adds	r3, #1
 800f41e:	600b      	str	r3, [r1, #0]
 800f420:	e797      	b.n	800f352 <__ssvfscanf_r+0x276>
 800f422:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f424:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f426:	f002 fded 	bl	8012004 <__ssrefill_r>
 800f42a:	2800      	cmp	r0, #0
 800f42c:	d091      	beq.n	800f352 <__ssvfscanf_r+0x276>
 800f42e:	e724      	b.n	800f27a <__ssvfscanf_r+0x19e>
 800f430:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f432:	2301      	movs	r3, #1
 800f434:	2a00      	cmp	r2, #0
 800f436:	d100      	bne.n	800f43a <__ssvfscanf_r+0x35e>
 800f438:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f43a:	2210      	movs	r2, #16
 800f43c:	0034      	movs	r4, r6
 800f43e:	4032      	ands	r2, r6
 800f440:	623a      	str	r2, [r7, #32]
 800f442:	401c      	ands	r4, r3
 800f444:	421e      	tst	r6, r3
 800f446:	d100      	bne.n	800f44a <__ssvfscanf_r+0x36e>
 800f448:	e0f3      	b.n	800f632 <__ssvfscanf_r+0x556>
 800f44a:	2a00      	cmp	r2, #0
 800f44c:	d000      	beq.n	800f450 <__ssvfscanf_r+0x374>
 800f44e:	e0b6      	b.n	800f5be <__ssvfscanf_r+0x4e2>
 800f450:	2080      	movs	r0, #128	; 0x80
 800f452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f454:	cb10      	ldmia	r3!, {r4}
 800f456:	613b      	str	r3, [r7, #16]
 800f458:	4206      	tst	r6, r0
 800f45a:	d100      	bne.n	800f45e <__ssvfscanf_r+0x382>
 800f45c:	e0b7      	b.n	800f5ce <__ssvfscanf_r+0x4f2>
 800f45e:	2c00      	cmp	r4, #0
 800f460:	d007      	beq.n	800f472 <__ssvfscanf_r+0x396>
 800f462:	f7fb ff6d 	bl	800b340 <malloc>
 800f466:	6338      	str	r0, [r7, #48]	; 0x30
 800f468:	2800      	cmp	r0, #0
 800f46a:	d11f      	bne.n	800f4ac <__ssvfscanf_r+0x3d0>
 800f46c:	2301      	movs	r3, #1
 800f46e:	425b      	negs	r3, r3
 800f470:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f474:	2b00      	cmp	r3, #0
 800f476:	d013      	beq.n	800f4a0 <__ssvfscanf_r+0x3c4>
 800f478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f47a:	3301      	adds	r3, #1
 800f47c:	d10a      	bne.n	800f494 <__ssvfscanf_r+0x3b8>
 800f47e:	2400      	movs	r4, #0
 800f480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f482:	681d      	ldr	r5, [r3, #0]
 800f484:	88db      	ldrh	r3, [r3, #6]
 800f486:	42a3      	cmp	r3, r4
 800f488:	dd01      	ble.n	800f48e <__ssvfscanf_r+0x3b2>
 800f48a:	f001 f82a 	bl	80104e2 <__ssvfscanf_r+0x1406>
 800f48e:	2301      	movs	r3, #1
 800f490:	425b      	negs	r3, r3
 800f492:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f496:	6818      	ldr	r0, [r3, #0]
 800f498:	2800      	cmp	r0, #0
 800f49a:	d001      	beq.n	800f4a0 <__ssvfscanf_r+0x3c4>
 800f49c:	f7fb ff5a 	bl	800b354 <free>
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f4a4:	23b1      	movs	r3, #177	; 0xb1
 800f4a6:	009b      	lsls	r3, r3, #2
 800f4a8:	449d      	add	sp, r3
 800f4aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ae:	6023      	str	r3, [r4, #0]
 800f4b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4b2:	88de      	ldrh	r6, [r3, #6]
 800f4b4:	889d      	ldrh	r5, [r3, #4]
 800f4b6:	42ae      	cmp	r6, r5
 800f4b8:	d30e      	bcc.n	800f4d8 <__ssvfscanf_r+0x3fc>
 800f4ba:	4b71      	ldr	r3, [pc, #452]	; (800f680 <__ssvfscanf_r+0x5a4>)
 800f4bc:	429d      	cmp	r5, r3
 800f4be:	d8d5      	bhi.n	800f46c <__ssvfscanf_r+0x390>
 800f4c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4c2:	3508      	adds	r5, #8
 800f4c4:	b2ad      	uxth	r5, r5
 800f4c6:	6818      	ldr	r0, [r3, #0]
 800f4c8:	00a9      	lsls	r1, r5, #2
 800f4ca:	f002 f901 	bl	80116d0 <realloc>
 800f4ce:	2800      	cmp	r0, #0
 800f4d0:	d0cc      	beq.n	800f46c <__ssvfscanf_r+0x390>
 800f4d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4d4:	6018      	str	r0, [r3, #0]
 800f4d6:	809d      	strh	r5, [r3, #4]
 800f4d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4da:	1c72      	adds	r2, r6, #1
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	00b6      	lsls	r6, r6, #2
 800f4e0:	50f4      	str	r4, [r6, r3]
 800f4e2:	2320      	movs	r3, #32
 800f4e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f4e6:	0026      	movs	r6, r4
 800f4e8:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f4ea:	80ca      	strh	r2, [r1, #6]
 800f4ec:	61fb      	str	r3, [r7, #28]
 800f4ee:	2500      	movs	r5, #0
 800f4f0:	f7fd f9fe 	bl	800c8f0 <__locale_mb_cur_max>
 800f4f4:	42a8      	cmp	r0, r5
 800f4f6:	d100      	bne.n	800f4fa <__ssvfscanf_r+0x41e>
 800f4f8:	e6bf      	b.n	800f27a <__ssvfscanf_r+0x19e>
 800f4fa:	1c6a      	adds	r2, r5, #1
 800f4fc:	60fa      	str	r2, [r7, #12]
 800f4fe:	228c      	movs	r2, #140	; 0x8c
 800f500:	2048      	movs	r0, #72	; 0x48
 800f502:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f504:	0052      	lsls	r2, r2, #1
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	1812      	adds	r2, r2, r0
 800f50a:	7819      	ldrb	r1, [r3, #0]
 800f50c:	19d2      	adds	r2, r2, r7
 800f50e:	5551      	strb	r1, [r2, r5]
 800f510:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f512:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f514:	6852      	ldr	r2, [r2, #4]
 800f516:	3301      	adds	r3, #1
 800f518:	600b      	str	r3, [r1, #0]
 800f51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f51c:	3a01      	subs	r2, #1
 800f51e:	604a      	str	r2, [r1, #4]
 800f520:	2b03      	cmp	r3, #3
 800f522:	d102      	bne.n	800f52a <__ssvfscanf_r+0x44e>
 800f524:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f526:	2b04      	cmp	r3, #4
 800f528:	d007      	beq.n	800f53a <__ssvfscanf_r+0x45e>
 800f52a:	2048      	movs	r0, #72	; 0x48
 800f52c:	2310      	movs	r3, #16
 800f52e:	181b      	adds	r3, r3, r0
 800f530:	2208      	movs	r2, #8
 800f532:	2100      	movs	r1, #0
 800f534:	19d8      	adds	r0, r3, r7
 800f536:	f7fd f997 	bl	800c868 <memset>
 800f53a:	2148      	movs	r1, #72	; 0x48
 800f53c:	2310      	movs	r3, #16
 800f53e:	228c      	movs	r2, #140	; 0x8c
 800f540:	185b      	adds	r3, r3, r1
 800f542:	0052      	lsls	r2, r2, #1
 800f544:	19db      	adds	r3, r3, r7
 800f546:	1852      	adds	r2, r2, r1
 800f548:	9300      	str	r3, [sp, #0]
 800f54a:	0021      	movs	r1, r4
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f550:	19d2      	adds	r2, r2, r7
 800f552:	f002 fc57 	bl	8011e04 <_mbrtowc_r>
 800f556:	0003      	movs	r3, r0
 800f558:	62b8      	str	r0, [r7, #40]	; 0x28
 800f55a:	3301      	adds	r3, #1
 800f55c:	d100      	bne.n	800f560 <__ssvfscanf_r+0x484>
 800f55e:	e68c      	b.n	800f27a <__ssvfscanf_r+0x19e>
 800f560:	2800      	cmp	r0, #0
 800f562:	d139      	bne.n	800f5d8 <__ssvfscanf_r+0x4fc>
 800f564:	6a3b      	ldr	r3, [r7, #32]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d100      	bne.n	800f56c <__ssvfscanf_r+0x490>
 800f56a:	6023      	str	r3, [r4, #0]
 800f56c:	68fa      	ldr	r2, [r7, #12]
 800f56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f570:	4694      	mov	ip, r2
 800f572:	4463      	add	r3, ip
 800f574:	63bb      	str	r3, [r7, #56]	; 0x38
 800f576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f578:	2b03      	cmp	r3, #3
 800f57a:	d102      	bne.n	800f582 <__ssvfscanf_r+0x4a6>
 800f57c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f57e:	2b04      	cmp	r3, #4
 800f580:	d002      	beq.n	800f588 <__ssvfscanf_r+0x4ac>
 800f582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f584:	3b01      	subs	r3, #1
 800f586:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f588:	6a3b      	ldr	r3, [r7, #32]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d115      	bne.n	800f5ba <__ssvfscanf_r+0x4de>
 800f58e:	2e00      	cmp	r6, #0
 800f590:	d012      	beq.n	800f5b8 <__ssvfscanf_r+0x4dc>
 800f592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f594:	69fa      	ldr	r2, [r7, #28]
 800f596:	1ae5      	subs	r5, r4, r3
 800f598:	10ab      	asrs	r3, r5, #2
 800f59a:	4293      	cmp	r3, r2
 800f59c:	d30c      	bcc.n	800f5b8 <__ssvfscanf_r+0x4dc>
 800f59e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f5a0:	00d1      	lsls	r1, r2, #3
 800f5a2:	f002 f895 	bl	80116d0 <realloc>
 800f5a6:	6338      	str	r0, [r7, #48]	; 0x30
 800f5a8:	2800      	cmp	r0, #0
 800f5aa:	d100      	bne.n	800f5ae <__ssvfscanf_r+0x4d2>
 800f5ac:	e75e      	b.n	800f46c <__ssvfscanf_r+0x390>
 800f5ae:	69fb      	ldr	r3, [r7, #28]
 800f5b0:	1944      	adds	r4, r0, r5
 800f5b2:	005b      	lsls	r3, r3, #1
 800f5b4:	6030      	str	r0, [r6, #0]
 800f5b6:	61fb      	str	r3, [r7, #28]
 800f5b8:	3404      	adds	r4, #4
 800f5ba:	2500      	movs	r5, #0
 800f5bc:	e010      	b.n	800f5e0 <__ssvfscanf_r+0x504>
 800f5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5c0:	613b      	str	r3, [r7, #16]
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	001e      	movs	r6, r3
 800f5c6:	001c      	movs	r4, r3
 800f5c8:	61fb      	str	r3, [r7, #28]
 800f5ca:	633b      	str	r3, [r7, #48]	; 0x30
 800f5cc:	e78f      	b.n	800f4ee <__ssvfscanf_r+0x412>
 800f5ce:	6a3b      	ldr	r3, [r7, #32]
 800f5d0:	001e      	movs	r6, r3
 800f5d2:	61fb      	str	r3, [r7, #28]
 800f5d4:	633b      	str	r3, [r7, #48]	; 0x30
 800f5d6:	e78a      	b.n	800f4ee <__ssvfscanf_r+0x412>
 800f5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5da:	68fd      	ldr	r5, [r7, #12]
 800f5dc:	3302      	adds	r3, #2
 800f5de:	d1c5      	bne.n	800f56c <__ssvfscanf_r+0x490>
 800f5e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5e2:	685b      	ldr	r3, [r3, #4]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	dc12      	bgt.n	800f60e <__ssvfscanf_r+0x532>
 800f5e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f5ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f5ec:	f002 fd0a 	bl	8012004 <__ssrefill_r>
 800f5f0:	2800      	cmp	r0, #0
 800f5f2:	d00c      	beq.n	800f60e <__ssvfscanf_r+0x532>
 800f5f4:	2d00      	cmp	r5, #0
 800f5f6:	d000      	beq.n	800f5fa <__ssvfscanf_r+0x51e>
 800f5f8:	e63f      	b.n	800f27a <__ssvfscanf_r+0x19e>
 800f5fa:	2e00      	cmp	r6, #0
 800f5fc:	d10c      	bne.n	800f618 <__ssvfscanf_r+0x53c>
 800f5fe:	6a3b      	ldr	r3, [r7, #32]
 800f600:	425a      	negs	r2, r3
 800f602:	4153      	adcs	r3, r2
 800f604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f606:	18d3      	adds	r3, r2, r3
 800f608:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f60a:	693b      	ldr	r3, [r7, #16]
 800f60c:	e6de      	b.n	800f3cc <__ssvfscanf_r+0x2f0>
 800f60e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f610:	2b00      	cmp	r3, #0
 800f612:	d000      	beq.n	800f616 <__ssvfscanf_r+0x53a>
 800f614:	e76c      	b.n	800f4f0 <__ssvfscanf_r+0x414>
 800f616:	e7f0      	b.n	800f5fa <__ssvfscanf_r+0x51e>
 800f618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f61a:	69fa      	ldr	r2, [r7, #28]
 800f61c:	1ae1      	subs	r1, r4, r3
 800f61e:	108b      	asrs	r3, r1, #2
 800f620:	429a      	cmp	r2, r3
 800f622:	d9ec      	bls.n	800f5fe <__ssvfscanf_r+0x522>
 800f624:	6830      	ldr	r0, [r6, #0]
 800f626:	f002 f853 	bl	80116d0 <realloc>
 800f62a:	2800      	cmp	r0, #0
 800f62c:	d0e7      	beq.n	800f5fe <__ssvfscanf_r+0x522>
 800f62e:	6030      	str	r0, [r6, #0]
 800f630:	e7e5      	b.n	800f5fe <__ssvfscanf_r+0x522>
 800f632:	6a3b      	ldr	r3, [r7, #32]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d025      	beq.n	800f684 <__ssvfscanf_r+0x5a8>
 800f638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f63a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f63c:	685b      	ldr	r3, [r3, #4]
 800f63e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f640:	6812      	ldr	r2, [r2, #0]
 800f642:	4299      	cmp	r1, r3
 800f644:	dd11      	ble.n	800f66a <__ssvfscanf_r+0x58e>
 800f646:	1ac9      	subs	r1, r1, r3
 800f648:	18d2      	adds	r2, r2, r3
 800f64a:	18e4      	adds	r4, r4, r3
 800f64c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f64e:	63f9      	str	r1, [r7, #60]	; 0x3c
 800f650:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f652:	0019      	movs	r1, r3
 800f654:	601a      	str	r2, [r3, #0]
 800f656:	f002 fcd5 	bl	8012004 <__ssrefill_r>
 800f65a:	2800      	cmp	r0, #0
 800f65c:	d0ec      	beq.n	800f638 <__ssvfscanf_r+0x55c>
 800f65e:	2c00      	cmp	r4, #0
 800f660:	d100      	bne.n	800f664 <__ssvfscanf_r+0x588>
 800f662:	e60a      	b.n	800f27a <__ssvfscanf_r+0x19e>
 800f664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f666:	191b      	adds	r3, r3, r4
 800f668:	e5ff      	b.n	800f26a <__ssvfscanf_r+0x18e>
 800f66a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f66c:	1a5b      	subs	r3, r3, r1
 800f66e:	1864      	adds	r4, r4, r1
 800f670:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f672:	604b      	str	r3, [r1, #4]
 800f674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f676:	18d2      	adds	r2, r2, r3
 800f678:	600a      	str	r2, [r1, #0]
 800f67a:	e7f3      	b.n	800f664 <__ssvfscanf_r+0x588>
 800f67c:	0800c52d 	.word	0x0800c52d
 800f680:	0000fff6 	.word	0x0000fff6
 800f684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f686:	0034      	movs	r4, r6
 800f688:	cb20      	ldmia	r3!, {r5}
 800f68a:	633b      	str	r3, [r7, #48]	; 0x30
 800f68c:	2380      	movs	r3, #128	; 0x80
 800f68e:	401c      	ands	r4, r3
 800f690:	421e      	tst	r6, r3
 800f692:	d028      	beq.n	800f6e6 <__ssvfscanf_r+0x60a>
 800f694:	2d00      	cmp	r5, #0
 800f696:	d100      	bne.n	800f69a <__ssvfscanf_r+0x5be>
 800f698:	e61d      	b.n	800f2d6 <__ssvfscanf_r+0x1fa>
 800f69a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f69c:	f7fb fe50 	bl	800b340 <malloc>
 800f6a0:	6238      	str	r0, [r7, #32]
 800f6a2:	2800      	cmp	r0, #0
 800f6a4:	d100      	bne.n	800f6a8 <__ssvfscanf_r+0x5cc>
 800f6a6:	e5ef      	b.n	800f288 <__ssvfscanf_r+0x1ac>
 800f6a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6aa:	6028      	str	r0, [r5, #0]
 800f6ac:	88de      	ldrh	r6, [r3, #6]
 800f6ae:	889c      	ldrh	r4, [r3, #4]
 800f6b0:	6818      	ldr	r0, [r3, #0]
 800f6b2:	42a6      	cmp	r6, r4
 800f6b4:	d30e      	bcc.n	800f6d4 <__ssvfscanf_r+0x5f8>
 800f6b6:	4bbf      	ldr	r3, [pc, #764]	; (800f9b4 <__ssvfscanf_r+0x8d8>)
 800f6b8:	429c      	cmp	r4, r3
 800f6ba:	d900      	bls.n	800f6be <__ssvfscanf_r+0x5e2>
 800f6bc:	e6df      	b.n	800f47e <__ssvfscanf_r+0x3a2>
 800f6be:	3408      	adds	r4, #8
 800f6c0:	b2a4      	uxth	r4, r4
 800f6c2:	00a1      	lsls	r1, r4, #2
 800f6c4:	f002 f804 	bl	80116d0 <realloc>
 800f6c8:	2800      	cmp	r0, #0
 800f6ca:	d100      	bne.n	800f6ce <__ssvfscanf_r+0x5f2>
 800f6cc:	e6d7      	b.n	800f47e <__ssvfscanf_r+0x3a2>
 800f6ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6d0:	6018      	str	r0, [r3, #0]
 800f6d2:	809c      	strh	r4, [r3, #4]
 800f6d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6d6:	1c72      	adds	r2, r6, #1
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f6dc:	00b6      	lsls	r6, r6, #2
 800f6de:	002c      	movs	r4, r5
 800f6e0:	50f5      	str	r5, [r6, r3]
 800f6e2:	6a3d      	ldr	r5, [r7, #32]
 800f6e4:	80ca      	strh	r2, [r1, #6]
 800f6e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6e8:	0029      	movs	r1, r5
 800f6ea:	9300      	str	r3, [sp, #0]
 800f6ec:	2201      	movs	r2, #1
 800f6ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f6f2:	f002 fca6 	bl	8012042 <_sfread_r>
 800f6f6:	1e05      	subs	r5, r0, #0
 800f6f8:	d100      	bne.n	800f6fc <__ssvfscanf_r+0x620>
 800f6fa:	e5be      	b.n	800f27a <__ssvfscanf_r+0x19e>
 800f6fc:	2c00      	cmp	r4, #0
 800f6fe:	d009      	beq.n	800f714 <__ssvfscanf_r+0x638>
 800f700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f702:	4283      	cmp	r3, r0
 800f704:	d906      	bls.n	800f714 <__ssvfscanf_r+0x638>
 800f706:	0001      	movs	r1, r0
 800f708:	6820      	ldr	r0, [r4, #0]
 800f70a:	f001 ffe1 	bl	80116d0 <realloc>
 800f70e:	2800      	cmp	r0, #0
 800f710:	d000      	beq.n	800f714 <__ssvfscanf_r+0x638>
 800f712:	6020      	str	r0, [r4, #0]
 800f714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f716:	195b      	adds	r3, r3, r5
 800f718:	63bb      	str	r3, [r7, #56]	; 0x38
 800f71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f71c:	3301      	adds	r3, #1
 800f71e:	e4f8      	b.n	800f112 <__ssvfscanf_r+0x36>
 800f720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f722:	2b00      	cmp	r3, #0
 800f724:	d101      	bne.n	800f72a <__ssvfscanf_r+0x64e>
 800f726:	3b01      	subs	r3, #1
 800f728:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f72a:	2210      	movs	r2, #16
 800f72c:	2301      	movs	r3, #1
 800f72e:	0034      	movs	r4, r6
 800f730:	4032      	ands	r2, r6
 800f732:	401c      	ands	r4, r3
 800f734:	623a      	str	r2, [r7, #32]
 800f736:	421e      	tst	r6, r3
 800f738:	d100      	bne.n	800f73c <__ssvfscanf_r+0x660>
 800f73a:	e116      	b.n	800f96a <__ssvfscanf_r+0x88e>
 800f73c:	2a00      	cmp	r2, #0
 800f73e:	d000      	beq.n	800f742 <__ssvfscanf_r+0x666>
 800f740:	e0b0      	b.n	800f8a4 <__ssvfscanf_r+0x7c8>
 800f742:	2080      	movs	r0, #128	; 0x80
 800f744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f746:	cb10      	ldmia	r3!, {r4}
 800f748:	60fb      	str	r3, [r7, #12]
 800f74a:	4206      	tst	r6, r0
 800f74c:	d100      	bne.n	800f750 <__ssvfscanf_r+0x674>
 800f74e:	e0b2      	b.n	800f8b6 <__ssvfscanf_r+0x7da>
 800f750:	2c00      	cmp	r4, #0
 800f752:	d100      	bne.n	800f756 <__ssvfscanf_r+0x67a>
 800f754:	e68d      	b.n	800f472 <__ssvfscanf_r+0x396>
 800f756:	f7fb fdf3 	bl	800b340 <malloc>
 800f75a:	6338      	str	r0, [r7, #48]	; 0x30
 800f75c:	2800      	cmp	r0, #0
 800f75e:	d100      	bne.n	800f762 <__ssvfscanf_r+0x686>
 800f760:	e684      	b.n	800f46c <__ssvfscanf_r+0x390>
 800f762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f764:	6023      	str	r3, [r4, #0]
 800f766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f768:	88de      	ldrh	r6, [r3, #6]
 800f76a:	889d      	ldrh	r5, [r3, #4]
 800f76c:	42ae      	cmp	r6, r5
 800f76e:	d310      	bcc.n	800f792 <__ssvfscanf_r+0x6b6>
 800f770:	4b90      	ldr	r3, [pc, #576]	; (800f9b4 <__ssvfscanf_r+0x8d8>)
 800f772:	429d      	cmp	r5, r3
 800f774:	d900      	bls.n	800f778 <__ssvfscanf_r+0x69c>
 800f776:	e679      	b.n	800f46c <__ssvfscanf_r+0x390>
 800f778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f77a:	3508      	adds	r5, #8
 800f77c:	b2ad      	uxth	r5, r5
 800f77e:	6818      	ldr	r0, [r3, #0]
 800f780:	00a9      	lsls	r1, r5, #2
 800f782:	f001 ffa5 	bl	80116d0 <realloc>
 800f786:	2800      	cmp	r0, #0
 800f788:	d100      	bne.n	800f78c <__ssvfscanf_r+0x6b0>
 800f78a:	e66f      	b.n	800f46c <__ssvfscanf_r+0x390>
 800f78c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f78e:	6018      	str	r0, [r3, #0]
 800f790:	809d      	strh	r5, [r3, #4]
 800f792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f794:	1c72      	adds	r2, r6, #1
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	00b6      	lsls	r6, r6, #2
 800f79a:	50f4      	str	r4, [r6, r3]
 800f79c:	2320      	movs	r3, #32
 800f79e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f7a0:	0026      	movs	r6, r4
 800f7a2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f7a4:	80ca      	strh	r2, [r1, #6]
 800f7a6:	613b      	str	r3, [r7, #16]
 800f7a8:	2500      	movs	r5, #0
 800f7aa:	f7fd f8a1 	bl	800c8f0 <__locale_mb_cur_max>
 800f7ae:	42a8      	cmp	r0, r5
 800f7b0:	d100      	bne.n	800f7b4 <__ssvfscanf_r+0x6d8>
 800f7b2:	e562      	b.n	800f27a <__ssvfscanf_r+0x19e>
 800f7b4:	1c6a      	adds	r2, r5, #1
 800f7b6:	61fa      	str	r2, [r7, #28]
 800f7b8:	228c      	movs	r2, #140	; 0x8c
 800f7ba:	2048      	movs	r0, #72	; 0x48
 800f7bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f7be:	0052      	lsls	r2, r2, #1
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	1812      	adds	r2, r2, r0
 800f7c4:	7819      	ldrb	r1, [r3, #0]
 800f7c6:	19d2      	adds	r2, r2, r7
 800f7c8:	5551      	strb	r1, [r2, r5]
 800f7ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f7cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f7ce:	6852      	ldr	r2, [r2, #4]
 800f7d0:	3301      	adds	r3, #1
 800f7d2:	600b      	str	r3, [r1, #0]
 800f7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7d6:	3a01      	subs	r2, #1
 800f7d8:	604a      	str	r2, [r1, #4]
 800f7da:	2b03      	cmp	r3, #3
 800f7dc:	d102      	bne.n	800f7e4 <__ssvfscanf_r+0x708>
 800f7de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7e0:	2b04      	cmp	r3, #4
 800f7e2:	d006      	beq.n	800f7f2 <__ssvfscanf_r+0x716>
 800f7e4:	2048      	movs	r0, #72	; 0x48
 800f7e6:	2208      	movs	r2, #8
 800f7e8:	1813      	adds	r3, r2, r0
 800f7ea:	2100      	movs	r1, #0
 800f7ec:	19d8      	adds	r0, r3, r7
 800f7ee:	f7fd f83b 	bl	800c868 <memset>
 800f7f2:	2148      	movs	r1, #72	; 0x48
 800f7f4:	2308      	movs	r3, #8
 800f7f6:	228c      	movs	r2, #140	; 0x8c
 800f7f8:	185b      	adds	r3, r3, r1
 800f7fa:	0052      	lsls	r2, r2, #1
 800f7fc:	19db      	adds	r3, r3, r7
 800f7fe:	1852      	adds	r2, r2, r1
 800f800:	9300      	str	r3, [sp, #0]
 800f802:	0021      	movs	r1, r4
 800f804:	69fb      	ldr	r3, [r7, #28]
 800f806:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f808:	19d2      	adds	r2, r2, r7
 800f80a:	f002 fafb 	bl	8011e04 <_mbrtowc_r>
 800f80e:	0003      	movs	r3, r0
 800f810:	62b8      	str	r0, [r7, #40]	; 0x28
 800f812:	3301      	adds	r3, #1
 800f814:	d100      	bne.n	800f818 <__ssvfscanf_r+0x73c>
 800f816:	e530      	b.n	800f27a <__ssvfscanf_r+0x19e>
 800f818:	2800      	cmp	r0, #0
 800f81a:	d151      	bne.n	800f8c0 <__ssvfscanf_r+0x7e4>
 800f81c:	6020      	str	r0, [r4, #0]
 800f81e:	2301      	movs	r3, #1
 800f820:	6825      	ldr	r5, [r4, #0]
 800f822:	425b      	negs	r3, r3
 800f824:	1c6a      	adds	r2, r5, #1
 800f826:	d01a      	beq.n	800f85e <__ssvfscanf_r+0x782>
 800f828:	2048      	movs	r0, #72	; 0x48
 800f82a:	3311      	adds	r3, #17
 800f82c:	181b      	adds	r3, r3, r0
 800f82e:	2208      	movs	r2, #8
 800f830:	2100      	movs	r1, #0
 800f832:	19d8      	adds	r0, r3, r7
 800f834:	f7fd f818 	bl	800c868 <memset>
 800f838:	4b5f      	ldr	r3, [pc, #380]	; (800f9b8 <__ssvfscanf_r+0x8dc>)
 800f83a:	2148      	movs	r1, #72	; 0x48
 800f83c:	33e0      	adds	r3, #224	; 0xe0
 800f83e:	681a      	ldr	r2, [r3, #0]
 800f840:	2310      	movs	r3, #16
 800f842:	4694      	mov	ip, r2
 800f844:	185b      	adds	r3, r3, r1
 800f846:	002a      	movs	r2, r5
 800f848:	19db      	adds	r3, r3, r7
 800f84a:	4665      	mov	r5, ip
 800f84c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f84e:	1879      	adds	r1, r7, r1
 800f850:	47a8      	blx	r5
 800f852:	2300      	movs	r3, #0
 800f854:	2801      	cmp	r0, #1
 800f856:	d102      	bne.n	800f85e <__ssvfscanf_r+0x782>
 800f858:	3348      	adds	r3, #72	; 0x48
 800f85a:	18fb      	adds	r3, r7, r3
 800f85c:	781b      	ldrb	r3, [r3, #0]
 800f85e:	2218      	movs	r2, #24
 800f860:	2148      	movs	r1, #72	; 0x48
 800f862:	1852      	adds	r2, r2, r1
 800f864:	19d2      	adds	r2, r2, r7
 800f866:	5cd3      	ldrb	r3, [r2, r3]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d149      	bne.n	800f900 <__ssvfscanf_r+0x824>
 800f86c:	69fb      	ldr	r3, [r7, #28]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d137      	bne.n	800f8e2 <__ssvfscanf_r+0x806>
 800f872:	6a3b      	ldr	r3, [r7, #32]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d113      	bne.n	800f8a0 <__ssvfscanf_r+0x7c4>
 800f878:	6023      	str	r3, [r4, #0]
 800f87a:	2e00      	cmp	r6, #0
 800f87c:	d00d      	beq.n	800f89a <__ssvfscanf_r+0x7be>
 800f87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f880:	693a      	ldr	r2, [r7, #16]
 800f882:	1ae4      	subs	r4, r4, r3
 800f884:	10a3      	asrs	r3, r4, #2
 800f886:	3301      	adds	r3, #1
 800f888:	429a      	cmp	r2, r3
 800f88a:	d906      	bls.n	800f89a <__ssvfscanf_r+0x7be>
 800f88c:	6830      	ldr	r0, [r6, #0]
 800f88e:	1d21      	adds	r1, r4, #4
 800f890:	f001 ff1e 	bl	80116d0 <realloc>
 800f894:	2800      	cmp	r0, #0
 800f896:	d000      	beq.n	800f89a <__ssvfscanf_r+0x7be>
 800f898:	6030      	str	r0, [r6, #0]
 800f89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f89c:	3301      	adds	r3, #1
 800f89e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	e593      	b.n	800f3cc <__ssvfscanf_r+0x2f0>
 800f8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8a6:	60fb      	str	r3, [r7, #12]
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	001e      	movs	r6, r3
 800f8ac:	613b      	str	r3, [r7, #16]
 800f8ae:	633b      	str	r3, [r7, #48]	; 0x30
 800f8b0:	334c      	adds	r3, #76	; 0x4c
 800f8b2:	18fc      	adds	r4, r7, r3
 800f8b4:	e778      	b.n	800f7a8 <__ssvfscanf_r+0x6cc>
 800f8b6:	6a3b      	ldr	r3, [r7, #32]
 800f8b8:	001e      	movs	r6, r3
 800f8ba:	613b      	str	r3, [r7, #16]
 800f8bc:	633b      	str	r3, [r7, #48]	; 0x30
 800f8be:	e773      	b.n	800f7a8 <__ssvfscanf_r+0x6cc>
 800f8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8c2:	69fd      	ldr	r5, [r7, #28]
 800f8c4:	3302      	adds	r3, #2
 800f8c6:	d1aa      	bne.n	800f81e <__ssvfscanf_r+0x742>
 800f8c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8ca:	685b      	ldr	r3, [r3, #4]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	dc47      	bgt.n	800f960 <__ssvfscanf_r+0x884>
 800f8d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f8d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f8d4:	f002 fb96 	bl	8012004 <__ssrefill_r>
 800f8d8:	2800      	cmp	r0, #0
 800f8da:	d041      	beq.n	800f960 <__ssvfscanf_r+0x884>
 800f8dc:	2d00      	cmp	r5, #0
 800f8de:	d0c8      	beq.n	800f872 <__ssvfscanf_r+0x796>
 800f8e0:	e4cb      	b.n	800f27a <__ssvfscanf_r+0x19e>
 800f8e2:	69fb      	ldr	r3, [r7, #28]
 800f8e4:	2248      	movs	r2, #72	; 0x48
 800f8e6:	3b01      	subs	r3, #1
 800f8e8:	61fb      	str	r3, [r7, #28]
 800f8ea:	238c      	movs	r3, #140	; 0x8c
 800f8ec:	005b      	lsls	r3, r3, #1
 800f8ee:	189b      	adds	r3, r3, r2
 800f8f0:	69fa      	ldr	r2, [r7, #28]
 800f8f2:	19db      	adds	r3, r3, r7
 800f8f4:	5cd1      	ldrb	r1, [r2, r3]
 800f8f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f8f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f8fa:	f002 fb47 	bl	8011f8c <_sungetc_r>
 800f8fe:	e7b5      	b.n	800f86c <__ssvfscanf_r+0x790>
 800f900:	69fa      	ldr	r2, [r7, #28]
 800f902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f904:	4694      	mov	ip, r2
 800f906:	4463      	add	r3, ip
 800f908:	63bb      	str	r3, [r7, #56]	; 0x38
 800f90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f90c:	2b03      	cmp	r3, #3
 800f90e:	d102      	bne.n	800f916 <__ssvfscanf_r+0x83a>
 800f910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f912:	2b04      	cmp	r3, #4
 800f914:	d002      	beq.n	800f91c <__ssvfscanf_r+0x840>
 800f916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f918:	3b01      	subs	r3, #1
 800f91a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f91c:	6a3b      	ldr	r3, [r7, #32]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d11a      	bne.n	800f958 <__ssvfscanf_r+0x87c>
 800f922:	3404      	adds	r4, #4
 800f924:	2e00      	cmp	r6, #0
 800f926:	d019      	beq.n	800f95c <__ssvfscanf_r+0x880>
 800f928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f92a:	693a      	ldr	r2, [r7, #16]
 800f92c:	1ae3      	subs	r3, r4, r3
 800f92e:	61fb      	str	r3, [r7, #28]
 800f930:	6a3d      	ldr	r5, [r7, #32]
 800f932:	109b      	asrs	r3, r3, #2
 800f934:	4293      	cmp	r3, r2
 800f936:	d3c7      	bcc.n	800f8c8 <__ssvfscanf_r+0x7ec>
 800f938:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f93a:	00d1      	lsls	r1, r2, #3
 800f93c:	f001 fec8 	bl	80116d0 <realloc>
 800f940:	6338      	str	r0, [r7, #48]	; 0x30
 800f942:	2800      	cmp	r0, #0
 800f944:	d100      	bne.n	800f948 <__ssvfscanf_r+0x86c>
 800f946:	e591      	b.n	800f46c <__ssvfscanf_r+0x390>
 800f948:	4684      	mov	ip, r0
 800f94a:	693b      	ldr	r3, [r7, #16]
 800f94c:	69fc      	ldr	r4, [r7, #28]
 800f94e:	005b      	lsls	r3, r3, #1
 800f950:	4464      	add	r4, ip
 800f952:	6030      	str	r0, [r6, #0]
 800f954:	613b      	str	r3, [r7, #16]
 800f956:	e7b7      	b.n	800f8c8 <__ssvfscanf_r+0x7ec>
 800f958:	2500      	movs	r5, #0
 800f95a:	e7b5      	b.n	800f8c8 <__ssvfscanf_r+0x7ec>
 800f95c:	0035      	movs	r5, r6
 800f95e:	e7b3      	b.n	800f8c8 <__ssvfscanf_r+0x7ec>
 800f960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f962:	2b00      	cmp	r3, #0
 800f964:	d000      	beq.n	800f968 <__ssvfscanf_r+0x88c>
 800f966:	e720      	b.n	800f7aa <__ssvfscanf_r+0x6ce>
 800f968:	e783      	b.n	800f872 <__ssvfscanf_r+0x796>
 800f96a:	6a3b      	ldr	r3, [r7, #32]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d025      	beq.n	800f9bc <__ssvfscanf_r+0x8e0>
 800f970:	2118      	movs	r1, #24
 800f972:	2048      	movs	r0, #72	; 0x48
 800f974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f976:	1809      	adds	r1, r1, r0
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	19c9      	adds	r1, r1, r7
 800f97c:	781a      	ldrb	r2, [r3, #0]
 800f97e:	5c8a      	ldrb	r2, [r1, r2]
 800f980:	2a00      	cmp	r2, #0
 800f982:	d103      	bne.n	800f98c <__ssvfscanf_r+0x8b0>
 800f984:	2c00      	cmp	r4, #0
 800f986:	d000      	beq.n	800f98a <__ssvfscanf_r+0x8ae>
 800f988:	e66c      	b.n	800f664 <__ssvfscanf_r+0x588>
 800f98a:	e4a4      	b.n	800f2d6 <__ssvfscanf_r+0x1fa>
 800f98c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f98e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f990:	6852      	ldr	r2, [r2, #4]
 800f992:	3301      	adds	r3, #1
 800f994:	600b      	str	r3, [r1, #0]
 800f996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f998:	3a01      	subs	r2, #1
 800f99a:	3401      	adds	r4, #1
 800f99c:	604a      	str	r2, [r1, #4]
 800f99e:	429c      	cmp	r4, r3
 800f9a0:	d100      	bne.n	800f9a4 <__ssvfscanf_r+0x8c8>
 800f9a2:	e65f      	b.n	800f664 <__ssvfscanf_r+0x588>
 800f9a4:	2a00      	cmp	r2, #0
 800f9a6:	dce3      	bgt.n	800f970 <__ssvfscanf_r+0x894>
 800f9a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f9aa:	f002 fb2b 	bl	8012004 <__ssrefill_r>
 800f9ae:	2800      	cmp	r0, #0
 800f9b0:	d0de      	beq.n	800f970 <__ssvfscanf_r+0x894>
 800f9b2:	e657      	b.n	800f664 <__ssvfscanf_r+0x588>
 800f9b4:	0000fff6 	.word	0x0000fff6
 800f9b8:	2000044c 	.word	0x2000044c
 800f9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9be:	0032      	movs	r2, r6
 800f9c0:	cb20      	ldmia	r3!, {r5}
 800f9c2:	61fb      	str	r3, [r7, #28]
 800f9c4:	2380      	movs	r3, #128	; 0x80
 800f9c6:	401a      	ands	r2, r3
 800f9c8:	421e      	tst	r6, r3
 800f9ca:	d100      	bne.n	800f9ce <__ssvfscanf_r+0x8f2>
 800f9cc:	e086      	b.n	800fadc <__ssvfscanf_r+0xa00>
 800f9ce:	2d00      	cmp	r5, #0
 800f9d0:	d100      	bne.n	800f9d4 <__ssvfscanf_r+0x8f8>
 800f9d2:	e480      	b.n	800f2d6 <__ssvfscanf_r+0x1fa>
 800f9d4:	2020      	movs	r0, #32
 800f9d6:	f7fb fcb3 	bl	800b340 <malloc>
 800f9da:	6338      	str	r0, [r7, #48]	; 0x30
 800f9dc:	2800      	cmp	r0, #0
 800f9de:	d100      	bne.n	800f9e2 <__ssvfscanf_r+0x906>
 800f9e0:	e452      	b.n	800f288 <__ssvfscanf_r+0x1ac>
 800f9e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9e4:	6028      	str	r0, [r5, #0]
 800f9e6:	88de      	ldrh	r6, [r3, #6]
 800f9e8:	889c      	ldrh	r4, [r3, #4]
 800f9ea:	6818      	ldr	r0, [r3, #0]
 800f9ec:	42a6      	cmp	r6, r4
 800f9ee:	d30e      	bcc.n	800fa0e <__ssvfscanf_r+0x932>
 800f9f0:	4bc3      	ldr	r3, [pc, #780]	; (800fd00 <__ssvfscanf_r+0xc24>)
 800f9f2:	429c      	cmp	r4, r3
 800f9f4:	d900      	bls.n	800f9f8 <__ssvfscanf_r+0x91c>
 800f9f6:	e542      	b.n	800f47e <__ssvfscanf_r+0x3a2>
 800f9f8:	3408      	adds	r4, #8
 800f9fa:	b2a4      	uxth	r4, r4
 800f9fc:	00a1      	lsls	r1, r4, #2
 800f9fe:	f001 fe67 	bl	80116d0 <realloc>
 800fa02:	2800      	cmp	r0, #0
 800fa04:	d100      	bne.n	800fa08 <__ssvfscanf_r+0x92c>
 800fa06:	e53a      	b.n	800f47e <__ssvfscanf_r+0x3a2>
 800fa08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa0a:	6018      	str	r0, [r3, #0]
 800fa0c:	809c      	strh	r4, [r3, #4]
 800fa0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa10:	1c72      	adds	r2, r6, #1
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	00b6      	lsls	r6, r6, #2
 800fa16:	50f5      	str	r5, [r6, r3]
 800fa18:	2320      	movs	r3, #32
 800fa1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fa1c:	002e      	movs	r6, r5
 800fa1e:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800fa20:	80ca      	strh	r2, [r1, #6]
 800fa22:	623b      	str	r3, [r7, #32]
 800fa24:	002c      	movs	r4, r5
 800fa26:	2118      	movs	r1, #24
 800fa28:	2048      	movs	r0, #72	; 0x48
 800fa2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa2c:	1809      	adds	r1, r1, r0
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	19c9      	adds	r1, r1, r7
 800fa32:	781a      	ldrb	r2, [r3, #0]
 800fa34:	5c8a      	ldrb	r2, [r1, r2]
 800fa36:	2a00      	cmp	r2, #0
 800fa38:	d101      	bne.n	800fa3e <__ssvfscanf_r+0x962>
 800fa3a:	633d      	str	r5, [r7, #48]	; 0x30
 800fa3c:	e031      	b.n	800faa2 <__ssvfscanf_r+0x9c6>
 800fa3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fa40:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fa42:	6852      	ldr	r2, [r2, #4]
 800fa44:	3a01      	subs	r2, #1
 800fa46:	604a      	str	r2, [r1, #4]
 800fa48:	1c5a      	adds	r2, r3, #1
 800fa4a:	600a      	str	r2, [r1, #0]
 800fa4c:	781b      	ldrb	r3, [r3, #0]
 800fa4e:	1c6a      	adds	r2, r5, #1
 800fa50:	633a      	str	r2, [r7, #48]	; 0x30
 800fa52:	702b      	strb	r3, [r5, #0]
 800fa54:	2e00      	cmp	r6, #0
 800fa56:	d010      	beq.n	800fa7a <__ssvfscanf_r+0x99e>
 800fa58:	6a3b      	ldr	r3, [r7, #32]
 800fa5a:	1b15      	subs	r5, r2, r4
 800fa5c:	429d      	cmp	r5, r3
 800fa5e:	d30c      	bcc.n	800fa7a <__ssvfscanf_r+0x99e>
 800fa60:	005b      	lsls	r3, r3, #1
 800fa62:	0020      	movs	r0, r4
 800fa64:	0019      	movs	r1, r3
 800fa66:	623b      	str	r3, [r7, #32]
 800fa68:	f001 fe32 	bl	80116d0 <realloc>
 800fa6c:	1e04      	subs	r4, r0, #0
 800fa6e:	d101      	bne.n	800fa74 <__ssvfscanf_r+0x998>
 800fa70:	f7ff fc0a 	bl	800f288 <__ssvfscanf_r+0x1ac>
 800fa74:	1943      	adds	r3, r0, r5
 800fa76:	633b      	str	r3, [r7, #48]	; 0x30
 800fa78:	6030      	str	r0, [r6, #0]
 800fa7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa7c:	3b01      	subs	r3, #1
 800fa7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d00e      	beq.n	800faa2 <__ssvfscanf_r+0x9c6>
 800fa84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa86:	685b      	ldr	r3, [r3, #4]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	dc2a      	bgt.n	800fae2 <__ssvfscanf_r+0xa06>
 800fa8c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fa8e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fa90:	f002 fab8 	bl	8012004 <__ssrefill_r>
 800fa94:	2800      	cmp	r0, #0
 800fa96:	d024      	beq.n	800fae2 <__ssvfscanf_r+0xa06>
 800fa98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa9a:	42a3      	cmp	r3, r4
 800fa9c:	d101      	bne.n	800faa2 <__ssvfscanf_r+0x9c6>
 800fa9e:	f7ff fbec 	bl	800f27a <__ssvfscanf_r+0x19e>
 800faa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faa4:	1b1d      	subs	r5, r3, r4
 800faa6:	42a3      	cmp	r3, r4
 800faa8:	d101      	bne.n	800faae <__ssvfscanf_r+0x9d2>
 800faaa:	f7ff fc14 	bl	800f2d6 <__ssvfscanf_r+0x1fa>
 800faae:	2300      	movs	r3, #0
 800fab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fab2:	7013      	strb	r3, [r2, #0]
 800fab4:	429e      	cmp	r6, r3
 800fab6:	d009      	beq.n	800facc <__ssvfscanf_r+0x9f0>
 800fab8:	6a3b      	ldr	r3, [r7, #32]
 800faba:	1c69      	adds	r1, r5, #1
 800fabc:	428b      	cmp	r3, r1
 800fabe:	d905      	bls.n	800facc <__ssvfscanf_r+0x9f0>
 800fac0:	6830      	ldr	r0, [r6, #0]
 800fac2:	f001 fe05 	bl	80116d0 <realloc>
 800fac6:	2800      	cmp	r0, #0
 800fac8:	d000      	beq.n	800facc <__ssvfscanf_r+0x9f0>
 800faca:	6030      	str	r0, [r6, #0]
 800facc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800face:	3301      	adds	r3, #1
 800fad0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fad4:	195b      	adds	r3, r3, r5
 800fad6:	63bb      	str	r3, [r7, #56]	; 0x38
 800fad8:	69fb      	ldr	r3, [r7, #28]
 800fada:	e477      	b.n	800f3cc <__ssvfscanf_r+0x2f0>
 800fadc:	0016      	movs	r6, r2
 800fade:	623a      	str	r2, [r7, #32]
 800fae0:	e7a0      	b.n	800fa24 <__ssvfscanf_r+0x948>
 800fae2:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800fae4:	e79f      	b.n	800fa26 <__ssvfscanf_r+0x94a>
 800fae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d101      	bne.n	800faf0 <__ssvfscanf_r+0xa14>
 800faec:	3b01      	subs	r3, #1
 800faee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800faf0:	2210      	movs	r2, #16
 800faf2:	2301      	movs	r3, #1
 800faf4:	0034      	movs	r4, r6
 800faf6:	4032      	ands	r2, r6
 800faf8:	401c      	ands	r4, r3
 800fafa:	61fa      	str	r2, [r7, #28]
 800fafc:	421e      	tst	r6, r3
 800fafe:	d100      	bne.n	800fb02 <__ssvfscanf_r+0xa26>
 800fb00:	e102      	b.n	800fd08 <__ssvfscanf_r+0xc2c>
 800fb02:	2a00      	cmp	r2, #0
 800fb04:	d000      	beq.n	800fb08 <__ssvfscanf_r+0xa2c>
 800fb06:	e09f      	b.n	800fc48 <__ssvfscanf_r+0xb6c>
 800fb08:	2080      	movs	r0, #128	; 0x80
 800fb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb0c:	cb10      	ldmia	r3!, {r4}
 800fb0e:	60fb      	str	r3, [r7, #12]
 800fb10:	4206      	tst	r6, r0
 800fb12:	d100      	bne.n	800fb16 <__ssvfscanf_r+0xa3a>
 800fb14:	e0a1      	b.n	800fc5a <__ssvfscanf_r+0xb7e>
 800fb16:	2c00      	cmp	r4, #0
 800fb18:	d100      	bne.n	800fb1c <__ssvfscanf_r+0xa40>
 800fb1a:	e4aa      	b.n	800f472 <__ssvfscanf_r+0x396>
 800fb1c:	f7fb fc10 	bl	800b340 <malloc>
 800fb20:	6338      	str	r0, [r7, #48]	; 0x30
 800fb22:	2800      	cmp	r0, #0
 800fb24:	d100      	bne.n	800fb28 <__ssvfscanf_r+0xa4c>
 800fb26:	e4a1      	b.n	800f46c <__ssvfscanf_r+0x390>
 800fb28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb2a:	6023      	str	r3, [r4, #0]
 800fb2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb2e:	88de      	ldrh	r6, [r3, #6]
 800fb30:	889d      	ldrh	r5, [r3, #4]
 800fb32:	42ae      	cmp	r6, r5
 800fb34:	d310      	bcc.n	800fb58 <__ssvfscanf_r+0xa7c>
 800fb36:	4b72      	ldr	r3, [pc, #456]	; (800fd00 <__ssvfscanf_r+0xc24>)
 800fb38:	429d      	cmp	r5, r3
 800fb3a:	d900      	bls.n	800fb3e <__ssvfscanf_r+0xa62>
 800fb3c:	e496      	b.n	800f46c <__ssvfscanf_r+0x390>
 800fb3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb40:	3508      	adds	r5, #8
 800fb42:	b2ad      	uxth	r5, r5
 800fb44:	6818      	ldr	r0, [r3, #0]
 800fb46:	00a9      	lsls	r1, r5, #2
 800fb48:	f001 fdc2 	bl	80116d0 <realloc>
 800fb4c:	2800      	cmp	r0, #0
 800fb4e:	d100      	bne.n	800fb52 <__ssvfscanf_r+0xa76>
 800fb50:	e48c      	b.n	800f46c <__ssvfscanf_r+0x390>
 800fb52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb54:	6018      	str	r0, [r3, #0]
 800fb56:	809d      	strh	r5, [r3, #4]
 800fb58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb5a:	1c72      	adds	r2, r6, #1
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	00b6      	lsls	r6, r6, #2
 800fb60:	50f4      	str	r4, [r6, r3]
 800fb62:	2320      	movs	r3, #32
 800fb64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fb66:	0025      	movs	r5, r4
 800fb68:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800fb6a:	80ca      	strh	r2, [r1, #6]
 800fb6c:	613b      	str	r3, [r7, #16]
 800fb6e:	2300      	movs	r3, #0
 800fb70:	623b      	str	r3, [r7, #32]
 800fb72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb74:	4a63      	ldr	r2, [pc, #396]	; (800fd04 <__ssvfscanf_r+0xc28>)
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	781b      	ldrb	r3, [r3, #0]
 800fb7a:	5cd3      	ldrb	r3, [r2, r3]
 800fb7c:	2208      	movs	r2, #8
 800fb7e:	4213      	tst	r3, r2
 800fb80:	d149      	bne.n	800fc16 <__ssvfscanf_r+0xb3a>
 800fb82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d046      	beq.n	800fc16 <__ssvfscanf_r+0xb3a>
 800fb88:	f7fc feb2 	bl	800c8f0 <__locale_mb_cur_max>
 800fb8c:	6a3b      	ldr	r3, [r7, #32]
 800fb8e:	4298      	cmp	r0, r3
 800fb90:	d101      	bne.n	800fb96 <__ssvfscanf_r+0xaba>
 800fb92:	f7ff fb72 	bl	800f27a <__ssvfscanf_r+0x19e>
 800fb96:	6a3a      	ldr	r2, [r7, #32]
 800fb98:	2048      	movs	r0, #72	; 0x48
 800fb9a:	1c56      	adds	r6, r2, #1
 800fb9c:	228c      	movs	r2, #140	; 0x8c
 800fb9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fba0:	0052      	lsls	r2, r2, #1
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	1812      	adds	r2, r2, r0
 800fba6:	7819      	ldrb	r1, [r3, #0]
 800fba8:	6a38      	ldr	r0, [r7, #32]
 800fbaa:	19d2      	adds	r2, r2, r7
 800fbac:	5411      	strb	r1, [r2, r0]
 800fbae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fbb0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fbb2:	6852      	ldr	r2, [r2, #4]
 800fbb4:	3301      	adds	r3, #1
 800fbb6:	600b      	str	r3, [r1, #0]
 800fbb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbba:	3a01      	subs	r2, #1
 800fbbc:	604a      	str	r2, [r1, #4]
 800fbbe:	2b03      	cmp	r3, #3
 800fbc0:	d102      	bne.n	800fbc8 <__ssvfscanf_r+0xaec>
 800fbc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fbc4:	2b04      	cmp	r3, #4
 800fbc6:	d007      	beq.n	800fbd8 <__ssvfscanf_r+0xafc>
 800fbc8:	2048      	movs	r0, #72	; 0x48
 800fbca:	2310      	movs	r3, #16
 800fbcc:	181b      	adds	r3, r3, r0
 800fbce:	2208      	movs	r2, #8
 800fbd0:	2100      	movs	r1, #0
 800fbd2:	19d8      	adds	r0, r3, r7
 800fbd4:	f7fc fe48 	bl	800c868 <memset>
 800fbd8:	2148      	movs	r1, #72	; 0x48
 800fbda:	2310      	movs	r3, #16
 800fbdc:	228c      	movs	r2, #140	; 0x8c
 800fbde:	185b      	adds	r3, r3, r1
 800fbe0:	0052      	lsls	r2, r2, #1
 800fbe2:	19db      	adds	r3, r3, r7
 800fbe4:	1852      	adds	r2, r2, r1
 800fbe6:	9300      	str	r3, [sp, #0]
 800fbe8:	0021      	movs	r1, r4
 800fbea:	0033      	movs	r3, r6
 800fbec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fbee:	19d2      	adds	r2, r2, r7
 800fbf0:	f002 f908 	bl	8011e04 <_mbrtowc_r>
 800fbf4:	0003      	movs	r3, r0
 800fbf6:	62b8      	str	r0, [r7, #40]	; 0x28
 800fbf8:	3301      	adds	r3, #1
 800fbfa:	d101      	bne.n	800fc00 <__ssvfscanf_r+0xb24>
 800fbfc:	f7ff fb3d 	bl	800f27a <__ssvfscanf_r+0x19e>
 800fc00:	2800      	cmp	r0, #0
 800fc02:	d12f      	bne.n	800fc64 <__ssvfscanf_r+0xb88>
 800fc04:	6020      	str	r0, [r4, #0]
 800fc06:	6820      	ldr	r0, [r4, #0]
 800fc08:	f002 f91a 	bl	8011e40 <iswspace>
 800fc0c:	6238      	str	r0, [r7, #32]
 800fc0e:	2800      	cmp	r0, #0
 800fc10:	d04a      	beq.n	800fca8 <__ssvfscanf_r+0xbcc>
 800fc12:	2e00      	cmp	r6, #0
 800fc14:	d13c      	bne.n	800fc90 <__ssvfscanf_r+0xbb4>
 800fc16:	69fb      	ldr	r3, [r7, #28]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d000      	beq.n	800fc1e <__ssvfscanf_r+0xb42>
 800fc1c:	e640      	b.n	800f8a0 <__ssvfscanf_r+0x7c4>
 800fc1e:	6023      	str	r3, [r4, #0]
 800fc20:	2d00      	cmp	r5, #0
 800fc22:	d100      	bne.n	800fc26 <__ssvfscanf_r+0xb4a>
 800fc24:	e639      	b.n	800f89a <__ssvfscanf_r+0x7be>
 800fc26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc28:	693a      	ldr	r2, [r7, #16]
 800fc2a:	1ae4      	subs	r4, r4, r3
 800fc2c:	10a3      	asrs	r3, r4, #2
 800fc2e:	3301      	adds	r3, #1
 800fc30:	429a      	cmp	r2, r3
 800fc32:	d800      	bhi.n	800fc36 <__ssvfscanf_r+0xb5a>
 800fc34:	e631      	b.n	800f89a <__ssvfscanf_r+0x7be>
 800fc36:	6828      	ldr	r0, [r5, #0]
 800fc38:	1d21      	adds	r1, r4, #4
 800fc3a:	f001 fd49 	bl	80116d0 <realloc>
 800fc3e:	2800      	cmp	r0, #0
 800fc40:	d100      	bne.n	800fc44 <__ssvfscanf_r+0xb68>
 800fc42:	e62a      	b.n	800f89a <__ssvfscanf_r+0x7be>
 800fc44:	6028      	str	r0, [r5, #0]
 800fc46:	e628      	b.n	800f89a <__ssvfscanf_r+0x7be>
 800fc48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc4a:	60fb      	str	r3, [r7, #12]
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	001d      	movs	r5, r3
 800fc50:	613b      	str	r3, [r7, #16]
 800fc52:	633b      	str	r3, [r7, #48]	; 0x30
 800fc54:	334c      	adds	r3, #76	; 0x4c
 800fc56:	18fc      	adds	r4, r7, r3
 800fc58:	e789      	b.n	800fb6e <__ssvfscanf_r+0xa92>
 800fc5a:	69fb      	ldr	r3, [r7, #28]
 800fc5c:	001d      	movs	r5, r3
 800fc5e:	613b      	str	r3, [r7, #16]
 800fc60:	633b      	str	r3, [r7, #48]	; 0x30
 800fc62:	e784      	b.n	800fb6e <__ssvfscanf_r+0xa92>
 800fc64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc66:	623e      	str	r6, [r7, #32]
 800fc68:	3302      	adds	r3, #2
 800fc6a:	d1cc      	bne.n	800fc06 <__ssvfscanf_r+0xb2a>
 800fc6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc6e:	685b      	ldr	r3, [r3, #4]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	dd00      	ble.n	800fc76 <__ssvfscanf_r+0xb9a>
 800fc74:	e77d      	b.n	800fb72 <__ssvfscanf_r+0xa96>
 800fc76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fc78:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fc7a:	f002 f9c3 	bl	8012004 <__ssrefill_r>
 800fc7e:	2800      	cmp	r0, #0
 800fc80:	d100      	bne.n	800fc84 <__ssvfscanf_r+0xba8>
 800fc82:	e776      	b.n	800fb72 <__ssvfscanf_r+0xa96>
 800fc84:	6a3b      	ldr	r3, [r7, #32]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d001      	beq.n	800fc8e <__ssvfscanf_r+0xbb2>
 800fc8a:	f7ff faf6 	bl	800f27a <__ssvfscanf_r+0x19e>
 800fc8e:	e7c2      	b.n	800fc16 <__ssvfscanf_r+0xb3a>
 800fc90:	238c      	movs	r3, #140	; 0x8c
 800fc92:	2248      	movs	r2, #72	; 0x48
 800fc94:	005b      	lsls	r3, r3, #1
 800fc96:	189b      	adds	r3, r3, r2
 800fc98:	3e01      	subs	r6, #1
 800fc9a:	19db      	adds	r3, r3, r7
 800fc9c:	5cf1      	ldrb	r1, [r6, r3]
 800fc9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fca0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fca2:	f002 f973 	bl	8011f8c <_sungetc_r>
 800fca6:	e7b4      	b.n	800fc12 <__ssvfscanf_r+0xb36>
 800fca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcaa:	199b      	adds	r3, r3, r6
 800fcac:	63bb      	str	r3, [r7, #56]	; 0x38
 800fcae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcb0:	2b03      	cmp	r3, #3
 800fcb2:	d102      	bne.n	800fcba <__ssvfscanf_r+0xbde>
 800fcb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fcb6:	2b04      	cmp	r3, #4
 800fcb8:	d002      	beq.n	800fcc0 <__ssvfscanf_r+0xbe4>
 800fcba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcbc:	3b01      	subs	r3, #1
 800fcbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fcc0:	69fb      	ldr	r3, [r7, #28]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d1d2      	bne.n	800fc6c <__ssvfscanf_r+0xb90>
 800fcc6:	3404      	adds	r4, #4
 800fcc8:	2d00      	cmp	r5, #0
 800fcca:	d016      	beq.n	800fcfa <__ssvfscanf_r+0xc1e>
 800fccc:	69fa      	ldr	r2, [r7, #28]
 800fcce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcd0:	623a      	str	r2, [r7, #32]
 800fcd2:	693a      	ldr	r2, [r7, #16]
 800fcd4:	1ae6      	subs	r6, r4, r3
 800fcd6:	10b3      	asrs	r3, r6, #2
 800fcd8:	4293      	cmp	r3, r2
 800fcda:	d3c7      	bcc.n	800fc6c <__ssvfscanf_r+0xb90>
 800fcdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fcde:	00d1      	lsls	r1, r2, #3
 800fce0:	f001 fcf6 	bl	80116d0 <realloc>
 800fce4:	6338      	str	r0, [r7, #48]	; 0x30
 800fce6:	2800      	cmp	r0, #0
 800fce8:	d101      	bne.n	800fcee <__ssvfscanf_r+0xc12>
 800fcea:	f7ff fbbf 	bl	800f46c <__ssvfscanf_r+0x390>
 800fcee:	693b      	ldr	r3, [r7, #16]
 800fcf0:	1984      	adds	r4, r0, r6
 800fcf2:	005b      	lsls	r3, r3, #1
 800fcf4:	6028      	str	r0, [r5, #0]
 800fcf6:	613b      	str	r3, [r7, #16]
 800fcf8:	e7b8      	b.n	800fc6c <__ssvfscanf_r+0xb90>
 800fcfa:	623d      	str	r5, [r7, #32]
 800fcfc:	e7b6      	b.n	800fc6c <__ssvfscanf_r+0xb90>
 800fcfe:	46c0      	nop			; (mov r8, r8)
 800fd00:	0000fff6 	.word	0x0000fff6
 800fd04:	08014ed1 	.word	0x08014ed1
 800fd08:	69fb      	ldr	r3, [r7, #28]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d01c      	beq.n	800fd48 <__ssvfscanf_r+0xc6c>
 800fd0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd10:	49bf      	ldr	r1, [pc, #764]	; (8010010 <__ssvfscanf_r+0xf34>)
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	781a      	ldrb	r2, [r3, #0]
 800fd16:	5c8a      	ldrb	r2, [r1, r2]
 800fd18:	2108      	movs	r1, #8
 800fd1a:	420a      	tst	r2, r1
 800fd1c:	d000      	beq.n	800fd20 <__ssvfscanf_r+0xc44>
 800fd1e:	e4a1      	b.n	800f664 <__ssvfscanf_r+0x588>
 800fd20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fd22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fd24:	6852      	ldr	r2, [r2, #4]
 800fd26:	3301      	adds	r3, #1
 800fd28:	600b      	str	r3, [r1, #0]
 800fd2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd2c:	3a01      	subs	r2, #1
 800fd2e:	3401      	adds	r4, #1
 800fd30:	604a      	str	r2, [r1, #4]
 800fd32:	429c      	cmp	r4, r3
 800fd34:	d100      	bne.n	800fd38 <__ssvfscanf_r+0xc5c>
 800fd36:	e495      	b.n	800f664 <__ssvfscanf_r+0x588>
 800fd38:	2a00      	cmp	r2, #0
 800fd3a:	dce8      	bgt.n	800fd0e <__ssvfscanf_r+0xc32>
 800fd3c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fd3e:	f002 f961 	bl	8012004 <__ssrefill_r>
 800fd42:	2800      	cmp	r0, #0
 800fd44:	d0e3      	beq.n	800fd0e <__ssvfscanf_r+0xc32>
 800fd46:	e48d      	b.n	800f664 <__ssvfscanf_r+0x588>
 800fd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd4a:	0032      	movs	r2, r6
 800fd4c:	cb10      	ldmia	r3!, {r4}
 800fd4e:	61fb      	str	r3, [r7, #28]
 800fd50:	2380      	movs	r3, #128	; 0x80
 800fd52:	401a      	ands	r2, r3
 800fd54:	421e      	tst	r6, r3
 800fd56:	d039      	beq.n	800fdcc <__ssvfscanf_r+0xcf0>
 800fd58:	2c00      	cmp	r4, #0
 800fd5a:	d101      	bne.n	800fd60 <__ssvfscanf_r+0xc84>
 800fd5c:	f7ff fabb 	bl	800f2d6 <__ssvfscanf_r+0x1fa>
 800fd60:	2020      	movs	r0, #32
 800fd62:	f7fb faed 	bl	800b340 <malloc>
 800fd66:	6338      	str	r0, [r7, #48]	; 0x30
 800fd68:	2800      	cmp	r0, #0
 800fd6a:	d101      	bne.n	800fd70 <__ssvfscanf_r+0xc94>
 800fd6c:	f7ff fa8c 	bl	800f288 <__ssvfscanf_r+0x1ac>
 800fd70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd72:	6020      	str	r0, [r4, #0]
 800fd74:	88de      	ldrh	r6, [r3, #6]
 800fd76:	889d      	ldrh	r5, [r3, #4]
 800fd78:	6818      	ldr	r0, [r3, #0]
 800fd7a:	42ae      	cmp	r6, r5
 800fd7c:	d310      	bcc.n	800fda0 <__ssvfscanf_r+0xcc4>
 800fd7e:	4ba5      	ldr	r3, [pc, #660]	; (8010014 <__ssvfscanf_r+0xf38>)
 800fd80:	429d      	cmp	r5, r3
 800fd82:	d901      	bls.n	800fd88 <__ssvfscanf_r+0xcac>
 800fd84:	f7ff fb7b 	bl	800f47e <__ssvfscanf_r+0x3a2>
 800fd88:	3508      	adds	r5, #8
 800fd8a:	b2ad      	uxth	r5, r5
 800fd8c:	00a9      	lsls	r1, r5, #2
 800fd8e:	f001 fc9f 	bl	80116d0 <realloc>
 800fd92:	2800      	cmp	r0, #0
 800fd94:	d101      	bne.n	800fd9a <__ssvfscanf_r+0xcbe>
 800fd96:	f7ff fb72 	bl	800f47e <__ssvfscanf_r+0x3a2>
 800fd9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd9c:	6018      	str	r0, [r3, #0]
 800fd9e:	809d      	strh	r5, [r3, #4]
 800fda0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fda2:	1c72      	adds	r2, r6, #1
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	00b6      	lsls	r6, r6, #2
 800fda8:	50f4      	str	r4, [r6, r3]
 800fdaa:	2320      	movs	r3, #32
 800fdac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fdae:	0026      	movs	r6, r4
 800fdb0:	80ca      	strh	r2, [r1, #6]
 800fdb2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800fdb4:	633b      	str	r3, [r7, #48]	; 0x30
 800fdb6:	0025      	movs	r5, r4
 800fdb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fdba:	4995      	ldr	r1, [pc, #596]	; (8010010 <__ssvfscanf_r+0xf34>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	781a      	ldrb	r2, [r3, #0]
 800fdc0:	5c8a      	ldrb	r2, [r1, r2]
 800fdc2:	2108      	movs	r1, #8
 800fdc4:	420a      	tst	r2, r1
 800fdc6:	d004      	beq.n	800fdd2 <__ssvfscanf_r+0xcf6>
 800fdc8:	623c      	str	r4, [r7, #32]
 800fdca:	e031      	b.n	800fe30 <__ssvfscanf_r+0xd54>
 800fdcc:	0016      	movs	r6, r2
 800fdce:	633a      	str	r2, [r7, #48]	; 0x30
 800fdd0:	e7f1      	b.n	800fdb6 <__ssvfscanf_r+0xcda>
 800fdd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fdd4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fdd6:	6852      	ldr	r2, [r2, #4]
 800fdd8:	3a01      	subs	r2, #1
 800fdda:	604a      	str	r2, [r1, #4]
 800fddc:	1c5a      	adds	r2, r3, #1
 800fdde:	600a      	str	r2, [r1, #0]
 800fde0:	781b      	ldrb	r3, [r3, #0]
 800fde2:	1c62      	adds	r2, r4, #1
 800fde4:	623a      	str	r2, [r7, #32]
 800fde6:	7023      	strb	r3, [r4, #0]
 800fde8:	2e00      	cmp	r6, #0
 800fdea:	d010      	beq.n	800fe0e <__ssvfscanf_r+0xd32>
 800fdec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdee:	1b54      	subs	r4, r2, r5
 800fdf0:	429c      	cmp	r4, r3
 800fdf2:	d30c      	bcc.n	800fe0e <__ssvfscanf_r+0xd32>
 800fdf4:	005b      	lsls	r3, r3, #1
 800fdf6:	0028      	movs	r0, r5
 800fdf8:	0019      	movs	r1, r3
 800fdfa:	633b      	str	r3, [r7, #48]	; 0x30
 800fdfc:	f001 fc68 	bl	80116d0 <realloc>
 800fe00:	1e05      	subs	r5, r0, #0
 800fe02:	d101      	bne.n	800fe08 <__ssvfscanf_r+0xd2c>
 800fe04:	f7ff fa40 	bl	800f288 <__ssvfscanf_r+0x1ac>
 800fe08:	1903      	adds	r3, r0, r4
 800fe0a:	623b      	str	r3, [r7, #32]
 800fe0c:	6030      	str	r0, [r6, #0]
 800fe0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe10:	3b01      	subs	r3, #1
 800fe12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d00b      	beq.n	800fe30 <__ssvfscanf_r+0xd54>
 800fe18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe1a:	685b      	ldr	r3, [r3, #4]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	dd01      	ble.n	800fe24 <__ssvfscanf_r+0xd48>
 800fe20:	6a3c      	ldr	r4, [r7, #32]
 800fe22:	e7c9      	b.n	800fdb8 <__ssvfscanf_r+0xcdc>
 800fe24:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fe26:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fe28:	f002 f8ec 	bl	8012004 <__ssrefill_r>
 800fe2c:	2800      	cmp	r0, #0
 800fe2e:	d0f7      	beq.n	800fe20 <__ssvfscanf_r+0xd44>
 800fe30:	2300      	movs	r3, #0
 800fe32:	6a3a      	ldr	r2, [r7, #32]
 800fe34:	7013      	strb	r3, [r2, #0]
 800fe36:	1b55      	subs	r5, r2, r5
 800fe38:	2e00      	cmp	r6, #0
 800fe3a:	d009      	beq.n	800fe50 <__ssvfscanf_r+0xd74>
 800fe3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe3e:	1c69      	adds	r1, r5, #1
 800fe40:	428b      	cmp	r3, r1
 800fe42:	d905      	bls.n	800fe50 <__ssvfscanf_r+0xd74>
 800fe44:	6830      	ldr	r0, [r6, #0]
 800fe46:	f001 fc43 	bl	80116d0 <realloc>
 800fe4a:	2800      	cmp	r0, #0
 800fe4c:	d000      	beq.n	800fe50 <__ssvfscanf_r+0xd74>
 800fe4e:	6030      	str	r0, [r6, #0]
 800fe50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe52:	195b      	adds	r3, r3, r5
 800fe54:	63bb      	str	r3, [r7, #56]	; 0x38
 800fe56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe58:	3301      	adds	r3, #1
 800fe5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe5c:	e63c      	b.n	800fad8 <__ssvfscanf_r+0x9fc>
 800fe5e:	22ae      	movs	r2, #174	; 0xae
 800fe60:	2100      	movs	r1, #0
 800fe62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe64:	0052      	lsls	r2, r2, #1
 800fe66:	3b01      	subs	r3, #1
 800fe68:	6239      	str	r1, [r7, #32]
 800fe6a:	4293      	cmp	r3, r2
 800fe6c:	d906      	bls.n	800fe7c <__ssvfscanf_r+0xda0>
 800fe6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe70:	3b5e      	subs	r3, #94	; 0x5e
 800fe72:	3bff      	subs	r3, #255	; 0xff
 800fe74:	623b      	str	r3, [r7, #32]
 800fe76:	235e      	movs	r3, #94	; 0x5e
 800fe78:	33ff      	adds	r3, #255	; 0xff
 800fe7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe7c:	24d8      	movs	r4, #216	; 0xd8
 800fe7e:	2300      	movs	r3, #0
 800fe80:	2248      	movs	r2, #72	; 0x48
 800fe82:	0124      	lsls	r4, r4, #4
 800fe84:	4334      	orrs	r4, r6
 800fe86:	2680      	movs	r6, #128	; 0x80
 800fe88:	61fb      	str	r3, [r7, #28]
 800fe8a:	3319      	adds	r3, #25
 800fe8c:	33ff      	adds	r3, #255	; 0xff
 800fe8e:	189b      	adds	r3, r3, r2
 800fe90:	19dd      	adds	r5, r3, r7
 800fe92:	00b6      	lsls	r6, r6, #2
 800fe94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe96:	681a      	ldr	r2, [r3, #0]
 800fe98:	7813      	ldrb	r3, [r2, #0]
 800fe9a:	2b39      	cmp	r3, #57	; 0x39
 800fe9c:	d80f      	bhi.n	800febe <__ssvfscanf_r+0xde2>
 800fe9e:	2b2a      	cmp	r3, #42	; 0x2a
 800fea0:	d91b      	bls.n	800feda <__ssvfscanf_r+0xdfe>
 800fea2:	0018      	movs	r0, r3
 800fea4:	382b      	subs	r0, #43	; 0x2b
 800fea6:	280e      	cmp	r0, #14
 800fea8:	d817      	bhi.n	800feda <__ssvfscanf_r+0xdfe>
 800feaa:	f7f0 f933 	bl	8000114 <__gnu_thumb1_case_uqi>
 800feae:	168f      	.short	0x168f
 800feb0:	5416168f 	.word	0x5416168f
 800feb4:	80808080 	.word	0x80808080
 800feb8:	87808080 	.word	0x87808080
 800febc:	87          	.byte	0x87
 800febd:	00          	.byte	0x00
 800febe:	2b66      	cmp	r3, #102	; 0x66
 800fec0:	d83a      	bhi.n	800ff38 <__ssvfscanf_r+0xe5c>
 800fec2:	2b60      	cmp	r3, #96	; 0x60
 800fec4:	d803      	bhi.n	800fece <__ssvfscanf_r+0xdf2>
 800fec6:	2b46      	cmp	r3, #70	; 0x46
 800fec8:	d805      	bhi.n	800fed6 <__ssvfscanf_r+0xdfa>
 800feca:	2b40      	cmp	r3, #64	; 0x40
 800fecc:	d905      	bls.n	800feda <__ssvfscanf_r+0xdfe>
 800fece:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fed0:	290a      	cmp	r1, #10
 800fed2:	dc71      	bgt.n	800ffb8 <__ssvfscanf_r+0xedc>
 800fed4:	e001      	b.n	800feda <__ssvfscanf_r+0xdfe>
 800fed6:	2b58      	cmp	r3, #88	; 0x58
 800fed8:	d030      	beq.n	800ff3c <__ssvfscanf_r+0xe60>
 800feda:	05e3      	lsls	r3, r4, #23
 800fedc:	d515      	bpl.n	800ff0a <__ssvfscanf_r+0xe2e>
 800fede:	238c      	movs	r3, #140	; 0x8c
 800fee0:	2248      	movs	r2, #72	; 0x48
 800fee2:	005b      	lsls	r3, r3, #1
 800fee4:	189b      	adds	r3, r3, r2
 800fee6:	19db      	adds	r3, r3, r7
 800fee8:	429d      	cmp	r5, r3
 800feea:	d905      	bls.n	800fef8 <__ssvfscanf_r+0xe1c>
 800feec:	3d01      	subs	r5, #1
 800feee:	7829      	ldrb	r1, [r5, #0]
 800fef0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fef2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fef4:	f002 f84a 	bl	8011f8c <_sungetc_r>
 800fef8:	238c      	movs	r3, #140	; 0x8c
 800fefa:	2248      	movs	r2, #72	; 0x48
 800fefc:	005b      	lsls	r3, r3, #1
 800fefe:	189b      	adds	r3, r3, r2
 800ff00:	19db      	adds	r3, r3, r7
 800ff02:	429d      	cmp	r5, r3
 800ff04:	d101      	bne.n	800ff0a <__ssvfscanf_r+0xe2e>
 800ff06:	f7ff f9e6 	bl	800f2d6 <__ssvfscanf_r+0x1fa>
 800ff0a:	2310      	movs	r3, #16
 800ff0c:	0022      	movs	r2, r4
 800ff0e:	401a      	ands	r2, r3
 800ff10:	421c      	tst	r4, r3
 800ff12:	d171      	bne.n	800fff8 <__ssvfscanf_r+0xf1c>
 800ff14:	218c      	movs	r1, #140	; 0x8c
 800ff16:	2048      	movs	r0, #72	; 0x48
 800ff18:	0049      	lsls	r1, r1, #1
 800ff1a:	1809      	adds	r1, r1, r0
 800ff1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff1e:	697e      	ldr	r6, [r7, #20]
 800ff20:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ff22:	19c9      	adds	r1, r1, r7
 800ff24:	702a      	strb	r2, [r5, #0]
 800ff26:	47b0      	blx	r6
 800ff28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff2a:	1d1e      	adds	r6, r3, #4
 800ff2c:	06a3      	lsls	r3, r4, #26
 800ff2e:	d559      	bpl.n	800ffe4 <__ssvfscanf_r+0xf08>
 800ff30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	6018      	str	r0, [r3, #0]
 800ff36:	e05b      	b.n	800fff0 <__ssvfscanf_r+0xf14>
 800ff38:	2b78      	cmp	r3, #120	; 0x78
 800ff3a:	d1ce      	bne.n	800feda <__ssvfscanf_r+0xdfe>
 800ff3c:	21c0      	movs	r1, #192	; 0xc0
 800ff3e:	00c9      	lsls	r1, r1, #3
 800ff40:	4021      	ands	r1, r4
 800ff42:	42b1      	cmp	r1, r6
 800ff44:	d1c9      	bne.n	800feda <__ssvfscanf_r+0xdfe>
 800ff46:	4934      	ldr	r1, [pc, #208]	; (8010018 <__ssvfscanf_r+0xf3c>)
 800ff48:	4021      	ands	r1, r4
 800ff4a:	24a0      	movs	r4, #160	; 0xa0
 800ff4c:	00e4      	lsls	r4, r4, #3
 800ff4e:	430c      	orrs	r4, r1
 800ff50:	2110      	movs	r1, #16
 800ff52:	6279      	str	r1, [r7, #36]	; 0x24
 800ff54:	e00b      	b.n	800ff6e <__ssvfscanf_r+0xe92>
 800ff56:	0521      	lsls	r1, r4, #20
 800ff58:	d509      	bpl.n	800ff6e <__ssvfscanf_r+0xe92>
 800ff5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ff5c:	2900      	cmp	r1, #0
 800ff5e:	d102      	bne.n	800ff66 <__ssvfscanf_r+0xe8a>
 800ff60:	3108      	adds	r1, #8
 800ff62:	4334      	orrs	r4, r6
 800ff64:	6279      	str	r1, [r7, #36]	; 0x24
 800ff66:	0561      	lsls	r1, r4, #21
 800ff68:	d504      	bpl.n	800ff74 <__ssvfscanf_r+0xe98>
 800ff6a:	492c      	ldr	r1, [pc, #176]	; (801001c <__ssvfscanf_r+0xf40>)
 800ff6c:	400c      	ands	r4, r1
 800ff6e:	702b      	strb	r3, [r5, #0]
 800ff70:	3501      	adds	r5, #1
 800ff72:	e00c      	b.n	800ff8e <__ssvfscanf_r+0xeb2>
 800ff74:	4b2a      	ldr	r3, [pc, #168]	; (8010020 <__ssvfscanf_r+0xf44>)
 800ff76:	401c      	ands	r4, r3
 800ff78:	6a3b      	ldr	r3, [r7, #32]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d004      	beq.n	800ff88 <__ssvfscanf_r+0xeac>
 800ff7e:	3b01      	subs	r3, #1
 800ff80:	623b      	str	r3, [r7, #32]
 800ff82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff84:	3301      	adds	r3, #1
 800ff86:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ff88:	69fb      	ldr	r3, [r7, #28]
 800ff8a:	3301      	adds	r3, #1
 800ff8c:	61fb      	str	r3, [r7, #28]
 800ff8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff90:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ff92:	685b      	ldr	r3, [r3, #4]
 800ff94:	3b01      	subs	r3, #1
 800ff96:	604b      	str	r3, [r1, #4]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	dd1c      	ble.n	800ffd6 <__ssvfscanf_r+0xefa>
 800ff9c:	3201      	adds	r2, #1
 800ff9e:	600a      	str	r2, [r1, #0]
 800ffa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffa2:	3b01      	subs	r3, #1
 800ffa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d000      	beq.n	800ffac <__ssvfscanf_r+0xed0>
 800ffaa:	e773      	b.n	800fe94 <__ssvfscanf_r+0xdb8>
 800ffac:	e795      	b.n	800feda <__ssvfscanf_r+0xdfe>
 800ffae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ffb0:	491c      	ldr	r1, [pc, #112]	; (8010024 <__ssvfscanf_r+0xf48>)
 800ffb2:	0040      	lsls	r0, r0, #1
 800ffb4:	5e41      	ldrsh	r1, [r0, r1]
 800ffb6:	6279      	str	r1, [r7, #36]	; 0x24
 800ffb8:	491b      	ldr	r1, [pc, #108]	; (8010028 <__ssvfscanf_r+0xf4c>)
 800ffba:	e7d7      	b.n	800ff6c <__ssvfscanf_r+0xe90>
 800ffbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ffbe:	4919      	ldr	r1, [pc, #100]	; (8010024 <__ssvfscanf_r+0xf48>)
 800ffc0:	0040      	lsls	r0, r0, #1
 800ffc2:	5e41      	ldrsh	r1, [r0, r1]
 800ffc4:	6279      	str	r1, [r7, #36]	; 0x24
 800ffc6:	2908      	cmp	r1, #8
 800ffc8:	dcf6      	bgt.n	800ffb8 <__ssvfscanf_r+0xedc>
 800ffca:	e786      	b.n	800feda <__ssvfscanf_r+0xdfe>
 800ffcc:	2180      	movs	r1, #128	; 0x80
 800ffce:	420c      	tst	r4, r1
 800ffd0:	d083      	beq.n	800feda <__ssvfscanf_r+0xdfe>
 800ffd2:	438c      	bics	r4, r1
 800ffd4:	e7cb      	b.n	800ff6e <__ssvfscanf_r+0xe92>
 800ffd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ffd8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ffda:	f002 f813 	bl	8012004 <__ssrefill_r>
 800ffde:	2800      	cmp	r0, #0
 800ffe0:	d0de      	beq.n	800ffa0 <__ssvfscanf_r+0xec4>
 800ffe2:	e77a      	b.n	800feda <__ssvfscanf_r+0xdfe>
 800ffe4:	2308      	movs	r3, #8
 800ffe6:	421c      	tst	r4, r3
 800ffe8:	d020      	beq.n	801002c <__ssvfscanf_r+0xf50>
 800ffea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	7018      	strb	r0, [r3, #0]
 800fff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fff2:	633e      	str	r6, [r7, #48]	; 0x30
 800fff4:	3301      	adds	r3, #1
 800fff6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fff8:	238c      	movs	r3, #140	; 0x8c
 800fffa:	2248      	movs	r2, #72	; 0x48
 800fffc:	005b      	lsls	r3, r3, #1
 800fffe:	189b      	adds	r3, r3, r2
 8010000:	19db      	adds	r3, r3, r7
 8010002:	1aed      	subs	r5, r5, r3
 8010004:	69fb      	ldr	r3, [r7, #28]
 8010006:	18ed      	adds	r5, r5, r3
 8010008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801000a:	195b      	adds	r3, r3, r5
 801000c:	f7ff f92d 	bl	800f26a <__ssvfscanf_r+0x18e>
 8010010:	08014ed1 	.word	0x08014ed1
 8010014:	0000fff6 	.word	0x0000fff6
 8010018:	fffffdff 	.word	0xfffffdff
 801001c:	fffffa7f 	.word	0xfffffa7f
 8010020:	fffffc7f 	.word	0xfffffc7f
 8010024:	080151fe 	.word	0x080151fe
 8010028:	fffff47f 	.word	0xfffff47f
 801002c:	0763      	lsls	r3, r4, #29
 801002e:	d503      	bpl.n	8010038 <__ssvfscanf_r+0xf5c>
 8010030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	8018      	strh	r0, [r3, #0]
 8010036:	e7db      	b.n	800fff0 <__ssvfscanf_r+0xf14>
 8010038:	2301      	movs	r3, #1
 801003a:	0022      	movs	r2, r4
 801003c:	401a      	ands	r2, r3
 801003e:	421c      	tst	r4, r3
 8010040:	d000      	beq.n	8010044 <__ssvfscanf_r+0xf68>
 8010042:	e775      	b.n	800ff30 <__ssvfscanf_r+0xe54>
 8010044:	07a4      	lsls	r4, r4, #30
 8010046:	d400      	bmi.n	801004a <__ssvfscanf_r+0xf6e>
 8010048:	e772      	b.n	800ff30 <__ssvfscanf_r+0xe54>
 801004a:	4ba8      	ldr	r3, [pc, #672]	; (80102ec <__ssvfscanf_r+0x1210>)
 801004c:	6979      	ldr	r1, [r7, #20]
 801004e:	4299      	cmp	r1, r3
 8010050:	d10c      	bne.n	801006c <__ssvfscanf_r+0xf90>
 8010052:	218c      	movs	r1, #140	; 0x8c
 8010054:	2048      	movs	r0, #72	; 0x48
 8010056:	0049      	lsls	r1, r1, #1
 8010058:	1809      	adds	r1, r1, r0
 801005a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801005c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801005e:	19c9      	adds	r1, r1, r7
 8010060:	f001 fecc 	bl	8011dfc <_strtoull_r>
 8010064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	c303      	stmia	r3!, {r0, r1}
 801006a:	e7c1      	b.n	800fff0 <__ssvfscanf_r+0xf14>
 801006c:	218c      	movs	r1, #140	; 0x8c
 801006e:	2048      	movs	r0, #72	; 0x48
 8010070:	0049      	lsls	r1, r1, #1
 8010072:	1809      	adds	r1, r1, r0
 8010074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010076:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010078:	19c9      	adds	r1, r1, r7
 801007a:	f001 fe0d 	bl	8011c98 <_strtoll_r>
 801007e:	e7f1      	b.n	8010064 <__ssvfscanf_r+0xf88>
 8010080:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010082:	f000 fb9f 	bl	80107c4 <_localeconv_r>
 8010086:	22ae      	movs	r2, #174	; 0xae
 8010088:	2100      	movs	r1, #0
 801008a:	6803      	ldr	r3, [r0, #0]
 801008c:	0052      	lsls	r2, r2, #1
 801008e:	603b      	str	r3, [r7, #0]
 8010090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010092:	60f9      	str	r1, [r7, #12]
 8010094:	3b01      	subs	r3, #1
 8010096:	4293      	cmp	r3, r2
 8010098:	d906      	bls.n	80100a8 <__ssvfscanf_r+0xfcc>
 801009a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801009c:	3b5e      	subs	r3, #94	; 0x5e
 801009e:	3bff      	subs	r3, #255	; 0xff
 80100a0:	60fb      	str	r3, [r7, #12]
 80100a2:	235e      	movs	r3, #94	; 0x5e
 80100a4:	33ff      	adds	r3, #255	; 0xff
 80100a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80100a8:	23f0      	movs	r3, #240	; 0xf0
 80100aa:	00db      	lsls	r3, r3, #3
 80100ac:	431e      	orrs	r6, r3
 80100ae:	238c      	movs	r3, #140	; 0x8c
 80100b0:	2248      	movs	r2, #72	; 0x48
 80100b2:	2400      	movs	r4, #0
 80100b4:	005b      	lsls	r3, r3, #1
 80100b6:	189b      	adds	r3, r3, r2
 80100b8:	623c      	str	r4, [r7, #32]
 80100ba:	607c      	str	r4, [r7, #4]
 80100bc:	60bc      	str	r4, [r7, #8]
 80100be:	61fc      	str	r4, [r7, #28]
 80100c0:	613c      	str	r4, [r7, #16]
 80100c2:	19dd      	adds	r5, r3, r7
 80100c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	781a      	ldrb	r2, [r3, #0]
 80100ca:	0010      	movs	r0, r2
 80100cc:	382b      	subs	r0, #43	; 0x2b
 80100ce:	284e      	cmp	r0, #78	; 0x4e
 80100d0:	d900      	bls.n	80100d4 <__ssvfscanf_r+0xff8>
 80100d2:	e133      	b.n	801033c <__ssvfscanf_r+0x1260>
 80100d4:	f7f0 f828 	bl	8000128 <__gnu_thumb1_case_uhi>
 80100d8:	0132009b 	.word	0x0132009b
 80100dc:	0132009b 	.word	0x0132009b
 80100e0:	004f0132 	.word	0x004f0132
 80100e4:	00720072 	.word	0x00720072
 80100e8:	00720072 	.word	0x00720072
 80100ec:	00720072 	.word	0x00720072
 80100f0:	00720072 	.word	0x00720072
 80100f4:	01320072 	.word	0x01320072
 80100f8:	01320132 	.word	0x01320132
 80100fc:	01320132 	.word	0x01320132
 8010100:	01320132 	.word	0x01320132
 8010104:	007b00bc 	.word	0x007b00bc
 8010108:	007b007b 	.word	0x007b007b
 801010c:	00f7012f 	.word	0x00f7012f
 8010110:	01320132 	.word	0x01320132
 8010114:	013200e3 	.word	0x013200e3
 8010118:	01320132 	.word	0x01320132
 801011c:	00a00132 	.word	0x00a00132
 8010120:	01120132 	.word	0x01120132
 8010124:	01320132 	.word	0x01320132
 8010128:	01010132 	.word	0x01010132
 801012c:	01320132 	.word	0x01320132
 8010130:	00820132 	.word	0x00820132
 8010134:	01320105 	.word	0x01320105
 8010138:	01320132 	.word	0x01320132
 801013c:	01320132 	.word	0x01320132
 8010140:	01320132 	.word	0x01320132
 8010144:	007b00bc 	.word	0x007b00bc
 8010148:	007b007b 	.word	0x007b007b
 801014c:	00f7012f 	.word	0x00f7012f
 8010150:	01320132 	.word	0x01320132
 8010154:	013200e3 	.word	0x013200e3
 8010158:	01320132 	.word	0x01320132
 801015c:	00a00132 	.word	0x00a00132
 8010160:	01120132 	.word	0x01120132
 8010164:	01320132 	.word	0x01320132
 8010168:	01010132 	.word	0x01010132
 801016c:	01320132 	.word	0x01320132
 8010170:	00820132 	.word	0x00820132
 8010174:	0105      	.short	0x0105
 8010176:	05f1      	lsls	r1, r6, #23
 8010178:	d520      	bpl.n	80101bc <__ssvfscanf_r+0x10e0>
 801017a:	2280      	movs	r2, #128	; 0x80
 801017c:	4396      	bics	r6, r2
 801017e:	69fa      	ldr	r2, [r7, #28]
 8010180:	3201      	adds	r2, #1
 8010182:	61fa      	str	r2, [r7, #28]
 8010184:	68fa      	ldr	r2, [r7, #12]
 8010186:	2a00      	cmp	r2, #0
 8010188:	d004      	beq.n	8010194 <__ssvfscanf_r+0x10b8>
 801018a:	3a01      	subs	r2, #1
 801018c:	60fa      	str	r2, [r7, #12]
 801018e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010190:	3201      	adds	r2, #1
 8010192:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010194:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010196:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010198:	3a01      	subs	r2, #1
 801019a:	63fa      	str	r2, [r7, #60]	; 0x3c
 801019c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801019e:	3201      	adds	r2, #1
 80101a0:	63ba      	str	r2, [r7, #56]	; 0x38
 80101a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80101a4:	6852      	ldr	r2, [r2, #4]
 80101a6:	3a01      	subs	r2, #1
 80101a8:	604a      	str	r2, [r1, #4]
 80101aa:	2a00      	cmp	r2, #0
 80101ac:	dc00      	bgt.n	80101b0 <__ssvfscanf_r+0x10d4>
 80101ae:	e0d6      	b.n	801035e <__ssvfscanf_r+0x1282>
 80101b0:	3301      	adds	r3, #1
 80101b2:	600b      	str	r3, [r1, #0]
 80101b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d184      	bne.n	80100c4 <__ssvfscanf_r+0xfe8>
 80101ba:	e057      	b.n	801026c <__ssvfscanf_r+0x1190>
 80101bc:	6a39      	ldr	r1, [r7, #32]
 80101be:	1909      	adds	r1, r1, r4
 80101c0:	2900      	cmp	r1, #0
 80101c2:	d153      	bne.n	801026c <__ssvfscanf_r+0x1190>
 80101c4:	494a      	ldr	r1, [pc, #296]	; (80102f0 <__ssvfscanf_r+0x1214>)
 80101c6:	400e      	ands	r6, r1
 80101c8:	702a      	strb	r2, [r5, #0]
 80101ca:	3501      	adds	r5, #1
 80101cc:	e7e2      	b.n	8010194 <__ssvfscanf_r+0x10b8>
 80101ce:	0531      	lsls	r1, r6, #20
 80101d0:	d54c      	bpl.n	801026c <__ssvfscanf_r+0x1190>
 80101d2:	6a39      	ldr	r1, [r7, #32]
 80101d4:	1909      	adds	r1, r1, r4
 80101d6:	2900      	cmp	r1, #0
 80101d8:	d040      	beq.n	801025c <__ssvfscanf_r+0x1180>
 80101da:	e047      	b.n	801026c <__ssvfscanf_r+0x1190>
 80101dc:	2198      	movs	r1, #152	; 0x98
 80101de:	2080      	movs	r0, #128	; 0x80
 80101e0:	0109      	lsls	r1, r1, #4
 80101e2:	4031      	ands	r1, r6
 80101e4:	0040      	lsls	r0, r0, #1
 80101e6:	4281      	cmp	r1, r0
 80101e8:	d140      	bne.n	801026c <__ssvfscanf_r+0x1190>
 80101ea:	69f9      	ldr	r1, [r7, #28]
 80101ec:	2901      	cmp	r1, #1
 80101ee:	d13d      	bne.n	801026c <__ssvfscanf_r+0x1190>
 80101f0:	2080      	movs	r0, #128	; 0x80
 80101f2:	4940      	ldr	r1, [pc, #256]	; (80102f4 <__ssvfscanf_r+0x1218>)
 80101f4:	0100      	lsls	r0, r0, #4
 80101f6:	400e      	ands	r6, r1
 80101f8:	3132      	adds	r1, #50	; 0x32
 80101fa:	31ff      	adds	r1, #255	; 0xff
 80101fc:	7029      	strb	r1, [r5, #0]
 80101fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010200:	4306      	orrs	r6, r0
 8010202:	3901      	subs	r1, #1
 8010204:	63f9      	str	r1, [r7, #60]	; 0x3c
 8010206:	3501      	adds	r5, #1
 8010208:	2100      	movs	r1, #0
 801020a:	61f9      	str	r1, [r7, #28]
 801020c:	e7dc      	b.n	80101c8 <__ssvfscanf_r+0x10ec>
 801020e:	2180      	movs	r1, #128	; 0x80
 8010210:	420e      	tst	r6, r1
 8010212:	d02b      	beq.n	801026c <__ssvfscanf_r+0x1190>
 8010214:	438e      	bics	r6, r1
 8010216:	e7d7      	b.n	80101c8 <__ssvfscanf_r+0x10ec>
 8010218:	6a39      	ldr	r1, [r7, #32]
 801021a:	2900      	cmp	r1, #0
 801021c:	d10d      	bne.n	801023a <__ssvfscanf_r+0x115e>
 801021e:	69f9      	ldr	r1, [r7, #28]
 8010220:	2900      	cmp	r1, #0
 8010222:	d10e      	bne.n	8010242 <__ssvfscanf_r+0x1166>
 8010224:	21e0      	movs	r1, #224	; 0xe0
 8010226:	0030      	movs	r0, r6
 8010228:	00c9      	lsls	r1, r1, #3
 801022a:	4008      	ands	r0, r1
 801022c:	4288      	cmp	r0, r1
 801022e:	d108      	bne.n	8010242 <__ssvfscanf_r+0x1166>
 8010230:	4931      	ldr	r1, [pc, #196]	; (80102f8 <__ssvfscanf_r+0x121c>)
 8010232:	400e      	ands	r6, r1
 8010234:	2101      	movs	r1, #1
 8010236:	6239      	str	r1, [r7, #32]
 8010238:	e7c6      	b.n	80101c8 <__ssvfscanf_r+0x10ec>
 801023a:	6a39      	ldr	r1, [r7, #32]
 801023c:	2902      	cmp	r1, #2
 801023e:	d100      	bne.n	8010242 <__ssvfscanf_r+0x1166>
 8010240:	e089      	b.n	8010356 <__ssvfscanf_r+0x127a>
 8010242:	2c01      	cmp	r4, #1
 8010244:	d001      	beq.n	801024a <__ssvfscanf_r+0x116e>
 8010246:	2c04      	cmp	r4, #4
 8010248:	d110      	bne.n	801026c <__ssvfscanf_r+0x1190>
 801024a:	3401      	adds	r4, #1
 801024c:	b2e4      	uxtb	r4, r4
 801024e:	e7bb      	b.n	80101c8 <__ssvfscanf_r+0x10ec>
 8010250:	0531      	lsls	r1, r6, #20
 8010252:	d508      	bpl.n	8010266 <__ssvfscanf_r+0x118a>
 8010254:	6a39      	ldr	r1, [r7, #32]
 8010256:	1909      	adds	r1, r1, r4
 8010258:	2900      	cmp	r1, #0
 801025a:	d104      	bne.n	8010266 <__ssvfscanf_r+0x118a>
 801025c:	4824      	ldr	r0, [pc, #144]	; (80102f0 <__ssvfscanf_r+0x1214>)
 801025e:	000c      	movs	r4, r1
 8010260:	4006      	ands	r6, r0
 8010262:	6239      	str	r1, [r7, #32]
 8010264:	e7b0      	b.n	80101c8 <__ssvfscanf_r+0x10ec>
 8010266:	6a39      	ldr	r1, [r7, #32]
 8010268:	2901      	cmp	r1, #1
 801026a:	d076      	beq.n	801035a <__ssvfscanf_r+0x127e>
 801026c:	69fb      	ldr	r3, [r7, #28]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d001      	beq.n	8010276 <__ssvfscanf_r+0x119a>
 8010272:	4b20      	ldr	r3, [pc, #128]	; (80102f4 <__ssvfscanf_r+0x1218>)
 8010274:	401e      	ands	r6, r3
 8010276:	6a3b      	ldr	r3, [r7, #32]
 8010278:	3b01      	subs	r3, #1
 801027a:	2b01      	cmp	r3, #1
 801027c:	d877      	bhi.n	801036e <__ssvfscanf_r+0x1292>
 801027e:	238c      	movs	r3, #140	; 0x8c
 8010280:	2248      	movs	r2, #72	; 0x48
 8010282:	005b      	lsls	r3, r3, #1
 8010284:	189b      	adds	r3, r3, r2
 8010286:	19db      	adds	r3, r3, r7
 8010288:	429d      	cmp	r5, r3
 801028a:	d801      	bhi.n	8010290 <__ssvfscanf_r+0x11b4>
 801028c:	f7ff f823 	bl	800f2d6 <__ssvfscanf_r+0x1fa>
 8010290:	3d01      	subs	r5, #1
 8010292:	7829      	ldrb	r1, [r5, #0]
 8010294:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010296:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010298:	f001 fe78 	bl	8011f8c <_sungetc_r>
 801029c:	e7ef      	b.n	801027e <__ssvfscanf_r+0x11a2>
 801029e:	2c00      	cmp	r4, #0
 80102a0:	d10c      	bne.n	80102bc <__ssvfscanf_r+0x11e0>
 80102a2:	69f9      	ldr	r1, [r7, #28]
 80102a4:	2900      	cmp	r1, #0
 80102a6:	d1e4      	bne.n	8010272 <__ssvfscanf_r+0x1196>
 80102a8:	21e0      	movs	r1, #224	; 0xe0
 80102aa:	0030      	movs	r0, r6
 80102ac:	00c9      	lsls	r1, r1, #3
 80102ae:	4008      	ands	r0, r1
 80102b0:	4288      	cmp	r0, r1
 80102b2:	d1e0      	bne.n	8010276 <__ssvfscanf_r+0x119a>
 80102b4:	4910      	ldr	r1, [pc, #64]	; (80102f8 <__ssvfscanf_r+0x121c>)
 80102b6:	3401      	adds	r4, #1
 80102b8:	400e      	ands	r6, r1
 80102ba:	e785      	b.n	80101c8 <__ssvfscanf_r+0x10ec>
 80102bc:	20fd      	movs	r0, #253	; 0xfd
 80102be:	1ee1      	subs	r1, r4, #3
 80102c0:	4201      	tst	r1, r0
 80102c2:	d1d3      	bne.n	801026c <__ssvfscanf_r+0x1190>
 80102c4:	e7c1      	b.n	801024a <__ssvfscanf_r+0x116e>
 80102c6:	0531      	lsls	r1, r6, #20
 80102c8:	d503      	bpl.n	80102d2 <__ssvfscanf_r+0x11f6>
 80102ca:	6a39      	ldr	r1, [r7, #32]
 80102cc:	1909      	adds	r1, r1, r4
 80102ce:	2900      	cmp	r1, #0
 80102d0:	d0c4      	beq.n	801025c <__ssvfscanf_r+0x1180>
 80102d2:	2c02      	cmp	r4, #2
 80102d4:	d1ca      	bne.n	801026c <__ssvfscanf_r+0x1190>
 80102d6:	2403      	movs	r4, #3
 80102d8:	e776      	b.n	80101c8 <__ssvfscanf_r+0x10ec>
 80102da:	2c06      	cmp	r4, #6
 80102dc:	d1c6      	bne.n	801026c <__ssvfscanf_r+0x1190>
 80102de:	2407      	movs	r4, #7
 80102e0:	e772      	b.n	80101c8 <__ssvfscanf_r+0x10ec>
 80102e2:	2c07      	cmp	r4, #7
 80102e4:	d1c2      	bne.n	801026c <__ssvfscanf_r+0x1190>
 80102e6:	2408      	movs	r4, #8
 80102e8:	e76e      	b.n	80101c8 <__ssvfscanf_r+0x10ec>
 80102ea:	46c0      	nop			; (mov r8, r8)
 80102ec:	08011b35 	.word	0x08011b35
 80102f0:	fffffe7f 	.word	0xfffffe7f
 80102f4:	fffffeff 	.word	0xfffffeff
 80102f8:	fffff87f 	.word	0xfffff87f
 80102fc:	0531      	lsls	r1, r6, #20
 80102fe:	d5b5      	bpl.n	801026c <__ssvfscanf_r+0x1190>
 8010300:	21a0      	movs	r1, #160	; 0xa0
 8010302:	2080      	movs	r0, #128	; 0x80
 8010304:	00c9      	lsls	r1, r1, #3
 8010306:	00c0      	lsls	r0, r0, #3
 8010308:	4031      	ands	r1, r6
 801030a:	4281      	cmp	r1, r0
 801030c:	d004      	beq.n	8010318 <__ssvfscanf_r+0x123c>
 801030e:	4206      	tst	r6, r0
 8010310:	d0ac      	beq.n	801026c <__ssvfscanf_r+0x1190>
 8010312:	69f9      	ldr	r1, [r7, #28]
 8010314:	2900      	cmp	r1, #0
 8010316:	d0ae      	beq.n	8010276 <__ssvfscanf_r+0x119a>
 8010318:	2180      	movs	r1, #128	; 0x80
 801031a:	0089      	lsls	r1, r1, #2
 801031c:	420e      	tst	r6, r1
 801031e:	d104      	bne.n	801032a <__ssvfscanf_r+0x124e>
 8010320:	69f9      	ldr	r1, [r7, #28]
 8010322:	6938      	ldr	r0, [r7, #16]
 8010324:	607d      	str	r5, [r7, #4]
 8010326:	1a09      	subs	r1, r1, r0
 8010328:	60b9      	str	r1, [r7, #8]
 801032a:	20c0      	movs	r0, #192	; 0xc0
 801032c:	4973      	ldr	r1, [pc, #460]	; (80104fc <__ssvfscanf_r+0x1420>)
 801032e:	0040      	lsls	r0, r0, #1
 8010330:	400e      	ands	r6, r1
 8010332:	4306      	orrs	r6, r0
 8010334:	e768      	b.n	8010208 <__ssvfscanf_r+0x112c>
 8010336:	0531      	lsls	r1, r6, #20
 8010338:	d5e2      	bpl.n	8010300 <__ssvfscanf_r+0x1224>
 801033a:	e74a      	b.n	80101d2 <__ssvfscanf_r+0x10f6>
 801033c:	6839      	ldr	r1, [r7, #0]
 801033e:	7809      	ldrb	r1, [r1, #0]
 8010340:	4291      	cmp	r1, r2
 8010342:	d193      	bne.n	801026c <__ssvfscanf_r+0x1190>
 8010344:	2180      	movs	r1, #128	; 0x80
 8010346:	0089      	lsls	r1, r1, #2
 8010348:	420e      	tst	r6, r1
 801034a:	d08f      	beq.n	801026c <__ssvfscanf_r+0x1190>
 801034c:	496c      	ldr	r1, [pc, #432]	; (8010500 <__ssvfscanf_r+0x1424>)
 801034e:	400e      	ands	r6, r1
 8010350:	69f9      	ldr	r1, [r7, #28]
 8010352:	6139      	str	r1, [r7, #16]
 8010354:	e738      	b.n	80101c8 <__ssvfscanf_r+0x10ec>
 8010356:	2103      	movs	r1, #3
 8010358:	e76d      	b.n	8010236 <__ssvfscanf_r+0x115a>
 801035a:	2102      	movs	r1, #2
 801035c:	e76b      	b.n	8010236 <__ssvfscanf_r+0x115a>
 801035e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010360:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010362:	f001 fe4f 	bl	8012004 <__ssrefill_r>
 8010366:	2800      	cmp	r0, #0
 8010368:	d100      	bne.n	801036c <__ssvfscanf_r+0x1290>
 801036a:	e723      	b.n	80101b4 <__ssvfscanf_r+0x10d8>
 801036c:	e77e      	b.n	801026c <__ssvfscanf_r+0x1190>
 801036e:	1e63      	subs	r3, r4, #1
 8010370:	2b06      	cmp	r3, #6
 8010372:	d825      	bhi.n	80103c0 <__ssvfscanf_r+0x12e4>
 8010374:	2c02      	cmp	r4, #2
 8010376:	d837      	bhi.n	80103e8 <__ssvfscanf_r+0x130c>
 8010378:	238c      	movs	r3, #140	; 0x8c
 801037a:	2248      	movs	r2, #72	; 0x48
 801037c:	005b      	lsls	r3, r3, #1
 801037e:	189b      	adds	r3, r3, r2
 8010380:	19db      	adds	r3, r3, r7
 8010382:	429d      	cmp	r5, r3
 8010384:	d801      	bhi.n	801038a <__ssvfscanf_r+0x12ae>
 8010386:	f7fe ffa6 	bl	800f2d6 <__ssvfscanf_r+0x1fa>
 801038a:	3d01      	subs	r5, #1
 801038c:	7829      	ldrb	r1, [r5, #0]
 801038e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010390:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010392:	f001 fdfb 	bl	8011f8c <_sungetc_r>
 8010396:	e7ef      	b.n	8010378 <__ssvfscanf_r+0x129c>
 8010398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801039a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801039c:	3b01      	subs	r3, #1
 801039e:	7819      	ldrb	r1, [r3, #0]
 80103a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80103a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80103a4:	f001 fdf2 	bl	8011f8c <_sungetc_r>
 80103a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103aa:	6a3a      	ldr	r2, [r7, #32]
 80103ac:	189b      	adds	r3, r3, r2
 80103ae:	b2db      	uxtb	r3, r3
 80103b0:	2b03      	cmp	r3, #3
 80103b2:	d8f1      	bhi.n	8010398 <__ssvfscanf_r+0x12bc>
 80103b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103b6:	3c03      	subs	r4, #3
 80103b8:	b2e4      	uxtb	r4, r4
 80103ba:	1b1b      	subs	r3, r3, r4
 80103bc:	1b2d      	subs	r5, r5, r4
 80103be:	63bb      	str	r3, [r7, #56]	; 0x38
 80103c0:	05f3      	lsls	r3, r6, #23
 80103c2:	d52f      	bpl.n	8010424 <__ssvfscanf_r+0x1348>
 80103c4:	0573      	lsls	r3, r6, #21
 80103c6:	d514      	bpl.n	80103f2 <__ssvfscanf_r+0x1316>
 80103c8:	238c      	movs	r3, #140	; 0x8c
 80103ca:	2248      	movs	r2, #72	; 0x48
 80103cc:	005b      	lsls	r3, r3, #1
 80103ce:	189b      	adds	r3, r3, r2
 80103d0:	19db      	adds	r3, r3, r7
 80103d2:	429d      	cmp	r5, r3
 80103d4:	d801      	bhi.n	80103da <__ssvfscanf_r+0x12fe>
 80103d6:	f7fe ff7e 	bl	800f2d6 <__ssvfscanf_r+0x1fa>
 80103da:	3d01      	subs	r5, #1
 80103dc:	7829      	ldrb	r1, [r5, #0]
 80103de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80103e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80103e2:	f001 fdd3 	bl	8011f8c <_sungetc_r>
 80103e6:	e7ef      	b.n	80103c8 <__ssvfscanf_r+0x12ec>
 80103e8:	1b63      	subs	r3, r4, r5
 80103ea:	b2db      	uxtb	r3, r3
 80103ec:	63fd      	str	r5, [r7, #60]	; 0x3c
 80103ee:	623b      	str	r3, [r7, #32]
 80103f0:	e7da      	b.n	80103a8 <__ssvfscanf_r+0x12cc>
 80103f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103f4:	1e6c      	subs	r4, r5, #1
 80103f6:	7821      	ldrb	r1, [r4, #0]
 80103f8:	3b01      	subs	r3, #1
 80103fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80103fc:	2965      	cmp	r1, #101	; 0x65
 80103fe:	d00a      	beq.n	8010416 <__ssvfscanf_r+0x133a>
 8010400:	2945      	cmp	r1, #69	; 0x45
 8010402:	d008      	beq.n	8010416 <__ssvfscanf_r+0x133a>
 8010404:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010406:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010408:	f001 fdc0 	bl	8011f8c <_sungetc_r>
 801040c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801040e:	1eac      	subs	r4, r5, #2
 8010410:	3b02      	subs	r3, #2
 8010412:	7821      	ldrb	r1, [r4, #0]
 8010414:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010416:	0025      	movs	r5, r4
 8010418:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801041a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801041c:	f001 fdb6 	bl	8011f8c <_sungetc_r>
 8010420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010422:	63bb      	str	r3, [r7, #56]	; 0x38
 8010424:	2310      	movs	r3, #16
 8010426:	0032      	movs	r2, r6
 8010428:	401a      	ands	r2, r3
 801042a:	421e      	tst	r6, r3
 801042c:	d001      	beq.n	8010432 <__ssvfscanf_r+0x1356>
 801042e:	f7fe fe71 	bl	800f114 <__ssvfscanf_r+0x38>
 8010432:	23c0      	movs	r3, #192	; 0xc0
 8010434:	2180      	movs	r1, #128	; 0x80
 8010436:	00db      	lsls	r3, r3, #3
 8010438:	702a      	strb	r2, [r5, #0]
 801043a:	4033      	ands	r3, r6
 801043c:	00c9      	lsls	r1, r1, #3
 801043e:	428b      	cmp	r3, r1
 8010440:	d11f      	bne.n	8010482 <__ssvfscanf_r+0x13a6>
 8010442:	693b      	ldr	r3, [r7, #16]
 8010444:	69fa      	ldr	r2, [r7, #28]
 8010446:	69f9      	ldr	r1, [r7, #28]
 8010448:	1a9a      	subs	r2, r3, r2
 801044a:	428b      	cmp	r3, r1
 801044c:	d125      	bne.n	801049a <__ssvfscanf_r+0x13be>
 801044e:	238c      	movs	r3, #140	; 0x8c
 8010450:	2148      	movs	r1, #72	; 0x48
 8010452:	005b      	lsls	r3, r3, #1
 8010454:	185b      	adds	r3, r3, r1
 8010456:	19d9      	adds	r1, r3, r7
 8010458:	2200      	movs	r2, #0
 801045a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801045c:	f7fb ffca 	bl	800c3f4 <_strtod_r>
 8010460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010462:	0004      	movs	r4, r0
 8010464:	3304      	adds	r3, #4
 8010466:	000d      	movs	r5, r1
 8010468:	623b      	str	r3, [r7, #32]
 801046a:	07f3      	lsls	r3, r6, #31
 801046c:	d523      	bpl.n	80104b6 <__ssvfscanf_r+0x13da>
 801046e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	601c      	str	r4, [r3, #0]
 8010474:	605d      	str	r5, [r3, #4]
 8010476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010478:	3301      	adds	r3, #1
 801047a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801047c:	6a3b      	ldr	r3, [r7, #32]
 801047e:	f7fe ffa5 	bl	800f3cc <__ssvfscanf_r+0x2f0>
 8010482:	68bb      	ldr	r3, [r7, #8]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d0e2      	beq.n	801044e <__ssvfscanf_r+0x1372>
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801048c:	1c59      	adds	r1, r3, #1
 801048e:	230a      	movs	r3, #10
 8010490:	f7fc f84c 	bl	800c52c <_strtol_r>
 8010494:	68bb      	ldr	r3, [r7, #8]
 8010496:	687d      	ldr	r5, [r7, #4]
 8010498:	1ac2      	subs	r2, r0, r3
 801049a:	2148      	movs	r1, #72	; 0x48
 801049c:	4b19      	ldr	r3, [pc, #100]	; (8010504 <__ssvfscanf_r+0x1428>)
 801049e:	185b      	adds	r3, r3, r1
 80104a0:	19db      	adds	r3, r3, r7
 80104a2:	429d      	cmp	r5, r3
 80104a4:	d302      	bcc.n	80104ac <__ssvfscanf_r+0x13d0>
 80104a6:	4b18      	ldr	r3, [pc, #96]	; (8010508 <__ssvfscanf_r+0x142c>)
 80104a8:	185b      	adds	r3, r3, r1
 80104aa:	19dd      	adds	r5, r3, r7
 80104ac:	0028      	movs	r0, r5
 80104ae:	4917      	ldr	r1, [pc, #92]	; (801050c <__ssvfscanf_r+0x1430>)
 80104b0:	f7fc f944 	bl	800c73c <sprintf>
 80104b4:	e7cb      	b.n	801044e <__ssvfscanf_r+0x1372>
 80104b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80104bc:	07b6      	lsls	r6, r6, #30
 80104be:	d4d8      	bmi.n	8010472 <__ssvfscanf_r+0x1396>
 80104c0:	0002      	movs	r2, r0
 80104c2:	000b      	movs	r3, r1
 80104c4:	f7f1 ff16 	bl	80022f4 <__aeabi_dcmpun>
 80104c8:	2800      	cmp	r0, #0
 80104ca:	d005      	beq.n	80104d8 <__ssvfscanf_r+0x13fc>
 80104cc:	4810      	ldr	r0, [pc, #64]	; (8010510 <__ssvfscanf_r+0x1434>)
 80104ce:	f7fc fabf 	bl	800ca50 <nanf>
 80104d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104d4:	6018      	str	r0, [r3, #0]
 80104d6:	e7ce      	b.n	8010476 <__ssvfscanf_r+0x139a>
 80104d8:	0020      	movs	r0, r4
 80104da:	0029      	movs	r1, r5
 80104dc:	f7f1 ffb4 	bl	8002448 <__aeabi_d2f>
 80104e0:	e7f7      	b.n	80104d2 <__ssvfscanf_r+0x13f6>
 80104e2:	00a3      	lsls	r3, r4, #2
 80104e4:	18ed      	adds	r5, r5, r3
 80104e6:	682b      	ldr	r3, [r5, #0]
 80104e8:	3401      	adds	r4, #1
 80104ea:	6818      	ldr	r0, [r3, #0]
 80104ec:	f7fa ff32 	bl	800b354 <free>
 80104f0:	2200      	movs	r2, #0
 80104f2:	682b      	ldr	r3, [r5, #0]
 80104f4:	601a      	str	r2, [r3, #0]
 80104f6:	f7fe ffc3 	bl	800f480 <__ssvfscanf_r+0x3a4>
 80104fa:	46c0      	nop			; (mov r8, r8)
 80104fc:	fffff07f 	.word	0xfffff07f
 8010500:	fffffd7f 	.word	0xfffffd7f
 8010504:	0000026b 	.word	0x0000026b
 8010508:	0000026a 	.word	0x0000026a
 801050c:	080151f8 	.word	0x080151f8
 8010510:	0801525b 	.word	0x0801525b

08010514 <_fclose_r>:
 8010514:	b570      	push	{r4, r5, r6, lr}
 8010516:	0005      	movs	r5, r0
 8010518:	1e0c      	subs	r4, r1, #0
 801051a:	d102      	bne.n	8010522 <_fclose_r+0xe>
 801051c:	2600      	movs	r6, #0
 801051e:	0030      	movs	r0, r6
 8010520:	bd70      	pop	{r4, r5, r6, pc}
 8010522:	2800      	cmp	r0, #0
 8010524:	d004      	beq.n	8010530 <_fclose_r+0x1c>
 8010526:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010528:	2b00      	cmp	r3, #0
 801052a:	d101      	bne.n	8010530 <_fclose_r+0x1c>
 801052c:	f7fc f89e 	bl	800c66c <__sinit>
 8010530:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010532:	07db      	lsls	r3, r3, #31
 8010534:	d405      	bmi.n	8010542 <_fclose_r+0x2e>
 8010536:	89a3      	ldrh	r3, [r4, #12]
 8010538:	059b      	lsls	r3, r3, #22
 801053a:	d402      	bmi.n	8010542 <_fclose_r+0x2e>
 801053c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801053e:	f7fc fa6b 	bl	800ca18 <__retarget_lock_acquire_recursive>
 8010542:	220c      	movs	r2, #12
 8010544:	5ea3      	ldrsh	r3, [r4, r2]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d109      	bne.n	801055e <_fclose_r+0x4a>
 801054a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801054c:	3301      	adds	r3, #1
 801054e:	0016      	movs	r6, r2
 8010550:	401e      	ands	r6, r3
 8010552:	421a      	tst	r2, r3
 8010554:	d1e2      	bne.n	801051c <_fclose_r+0x8>
 8010556:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010558:	f7fc fa5f 	bl	800ca1a <__retarget_lock_release_recursive>
 801055c:	e7df      	b.n	801051e <_fclose_r+0xa>
 801055e:	0021      	movs	r1, r4
 8010560:	0028      	movs	r0, r5
 8010562:	f000 f837 	bl	80105d4 <__sflush_r>
 8010566:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010568:	0006      	movs	r6, r0
 801056a:	2b00      	cmp	r3, #0
 801056c:	d006      	beq.n	801057c <_fclose_r+0x68>
 801056e:	0028      	movs	r0, r5
 8010570:	69e1      	ldr	r1, [r4, #28]
 8010572:	4798      	blx	r3
 8010574:	2800      	cmp	r0, #0
 8010576:	da01      	bge.n	801057c <_fclose_r+0x68>
 8010578:	2601      	movs	r6, #1
 801057a:	4276      	negs	r6, r6
 801057c:	89a3      	ldrh	r3, [r4, #12]
 801057e:	061b      	lsls	r3, r3, #24
 8010580:	d503      	bpl.n	801058a <_fclose_r+0x76>
 8010582:	0028      	movs	r0, r5
 8010584:	6921      	ldr	r1, [r4, #16]
 8010586:	f7fc facf 	bl	800cb28 <_free_r>
 801058a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801058c:	2900      	cmp	r1, #0
 801058e:	d008      	beq.n	80105a2 <_fclose_r+0x8e>
 8010590:	0023      	movs	r3, r4
 8010592:	3340      	adds	r3, #64	; 0x40
 8010594:	4299      	cmp	r1, r3
 8010596:	d002      	beq.n	801059e <_fclose_r+0x8a>
 8010598:	0028      	movs	r0, r5
 801059a:	f7fc fac5 	bl	800cb28 <_free_r>
 801059e:	2300      	movs	r3, #0
 80105a0:	6323      	str	r3, [r4, #48]	; 0x30
 80105a2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80105a4:	2900      	cmp	r1, #0
 80105a6:	d004      	beq.n	80105b2 <_fclose_r+0x9e>
 80105a8:	0028      	movs	r0, r5
 80105aa:	f7fc fabd 	bl	800cb28 <_free_r>
 80105ae:	2300      	movs	r3, #0
 80105b0:	6463      	str	r3, [r4, #68]	; 0x44
 80105b2:	f7fc f84b 	bl	800c64c <__sfp_lock_acquire>
 80105b6:	2300      	movs	r3, #0
 80105b8:	81a3      	strh	r3, [r4, #12]
 80105ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80105bc:	07db      	lsls	r3, r3, #31
 80105be:	d402      	bmi.n	80105c6 <_fclose_r+0xb2>
 80105c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105c2:	f7fc fa2a 	bl	800ca1a <__retarget_lock_release_recursive>
 80105c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105c8:	f7fc fa25 	bl	800ca16 <__retarget_lock_close_recursive>
 80105cc:	f7fc f846 	bl	800c65c <__sfp_lock_release>
 80105d0:	e7a5      	b.n	801051e <_fclose_r+0xa>
	...

080105d4 <__sflush_r>:
 80105d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80105d6:	230c      	movs	r3, #12
 80105d8:	5eca      	ldrsh	r2, [r1, r3]
 80105da:	000c      	movs	r4, r1
 80105dc:	0005      	movs	r5, r0
 80105de:	b291      	uxth	r1, r2
 80105e0:	0713      	lsls	r3, r2, #28
 80105e2:	d464      	bmi.n	80106ae <__sflush_r+0xda>
 80105e4:	2380      	movs	r3, #128	; 0x80
 80105e6:	011b      	lsls	r3, r3, #4
 80105e8:	4313      	orrs	r3, r2
 80105ea:	6862      	ldr	r2, [r4, #4]
 80105ec:	81a3      	strh	r3, [r4, #12]
 80105ee:	2a00      	cmp	r2, #0
 80105f0:	dc04      	bgt.n	80105fc <__sflush_r+0x28>
 80105f2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80105f4:	2a00      	cmp	r2, #0
 80105f6:	dc01      	bgt.n	80105fc <__sflush_r+0x28>
 80105f8:	2000      	movs	r0, #0
 80105fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80105fc:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80105fe:	2f00      	cmp	r7, #0
 8010600:	d0fa      	beq.n	80105f8 <__sflush_r+0x24>
 8010602:	2200      	movs	r2, #0
 8010604:	2080      	movs	r0, #128	; 0x80
 8010606:	682e      	ldr	r6, [r5, #0]
 8010608:	602a      	str	r2, [r5, #0]
 801060a:	001a      	movs	r2, r3
 801060c:	0140      	lsls	r0, r0, #5
 801060e:	69e1      	ldr	r1, [r4, #28]
 8010610:	4002      	ands	r2, r0
 8010612:	4203      	tst	r3, r0
 8010614:	d038      	beq.n	8010688 <__sflush_r+0xb4>
 8010616:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8010618:	89a3      	ldrh	r3, [r4, #12]
 801061a:	075b      	lsls	r3, r3, #29
 801061c:	d506      	bpl.n	801062c <__sflush_r+0x58>
 801061e:	6863      	ldr	r3, [r4, #4]
 8010620:	1ac0      	subs	r0, r0, r3
 8010622:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010624:	2b00      	cmp	r3, #0
 8010626:	d001      	beq.n	801062c <__sflush_r+0x58>
 8010628:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801062a:	1ac0      	subs	r0, r0, r3
 801062c:	0002      	movs	r2, r0
 801062e:	2300      	movs	r3, #0
 8010630:	0028      	movs	r0, r5
 8010632:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8010634:	69e1      	ldr	r1, [r4, #28]
 8010636:	47b8      	blx	r7
 8010638:	89a2      	ldrh	r2, [r4, #12]
 801063a:	1c43      	adds	r3, r0, #1
 801063c:	d106      	bne.n	801064c <__sflush_r+0x78>
 801063e:	6829      	ldr	r1, [r5, #0]
 8010640:	291d      	cmp	r1, #29
 8010642:	d830      	bhi.n	80106a6 <__sflush_r+0xd2>
 8010644:	4b2c      	ldr	r3, [pc, #176]	; (80106f8 <__sflush_r+0x124>)
 8010646:	410b      	asrs	r3, r1
 8010648:	07db      	lsls	r3, r3, #31
 801064a:	d42c      	bmi.n	80106a6 <__sflush_r+0xd2>
 801064c:	4b2b      	ldr	r3, [pc, #172]	; (80106fc <__sflush_r+0x128>)
 801064e:	4013      	ands	r3, r2
 8010650:	2200      	movs	r2, #0
 8010652:	6062      	str	r2, [r4, #4]
 8010654:	6922      	ldr	r2, [r4, #16]
 8010656:	b21b      	sxth	r3, r3
 8010658:	81a3      	strh	r3, [r4, #12]
 801065a:	6022      	str	r2, [r4, #0]
 801065c:	04db      	lsls	r3, r3, #19
 801065e:	d505      	bpl.n	801066c <__sflush_r+0x98>
 8010660:	1c43      	adds	r3, r0, #1
 8010662:	d102      	bne.n	801066a <__sflush_r+0x96>
 8010664:	682b      	ldr	r3, [r5, #0]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d100      	bne.n	801066c <__sflush_r+0x98>
 801066a:	6520      	str	r0, [r4, #80]	; 0x50
 801066c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801066e:	602e      	str	r6, [r5, #0]
 8010670:	2900      	cmp	r1, #0
 8010672:	d0c1      	beq.n	80105f8 <__sflush_r+0x24>
 8010674:	0023      	movs	r3, r4
 8010676:	3340      	adds	r3, #64	; 0x40
 8010678:	4299      	cmp	r1, r3
 801067a:	d002      	beq.n	8010682 <__sflush_r+0xae>
 801067c:	0028      	movs	r0, r5
 801067e:	f7fc fa53 	bl	800cb28 <_free_r>
 8010682:	2000      	movs	r0, #0
 8010684:	6320      	str	r0, [r4, #48]	; 0x30
 8010686:	e7b8      	b.n	80105fa <__sflush_r+0x26>
 8010688:	2301      	movs	r3, #1
 801068a:	0028      	movs	r0, r5
 801068c:	47b8      	blx	r7
 801068e:	1c43      	adds	r3, r0, #1
 8010690:	d1c2      	bne.n	8010618 <__sflush_r+0x44>
 8010692:	682b      	ldr	r3, [r5, #0]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d0bf      	beq.n	8010618 <__sflush_r+0x44>
 8010698:	2b1d      	cmp	r3, #29
 801069a:	d001      	beq.n	80106a0 <__sflush_r+0xcc>
 801069c:	2b16      	cmp	r3, #22
 801069e:	d101      	bne.n	80106a4 <__sflush_r+0xd0>
 80106a0:	602e      	str	r6, [r5, #0]
 80106a2:	e7a9      	b.n	80105f8 <__sflush_r+0x24>
 80106a4:	89a2      	ldrh	r2, [r4, #12]
 80106a6:	2340      	movs	r3, #64	; 0x40
 80106a8:	4313      	orrs	r3, r2
 80106aa:	81a3      	strh	r3, [r4, #12]
 80106ac:	e7a5      	b.n	80105fa <__sflush_r+0x26>
 80106ae:	6926      	ldr	r6, [r4, #16]
 80106b0:	2e00      	cmp	r6, #0
 80106b2:	d0a1      	beq.n	80105f8 <__sflush_r+0x24>
 80106b4:	6827      	ldr	r7, [r4, #0]
 80106b6:	6026      	str	r6, [r4, #0]
 80106b8:	1bbb      	subs	r3, r7, r6
 80106ba:	9301      	str	r3, [sp, #4]
 80106bc:	2300      	movs	r3, #0
 80106be:	0789      	lsls	r1, r1, #30
 80106c0:	d100      	bne.n	80106c4 <__sflush_r+0xf0>
 80106c2:	6963      	ldr	r3, [r4, #20]
 80106c4:	60a3      	str	r3, [r4, #8]
 80106c6:	9b01      	ldr	r3, [sp, #4]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	dc00      	bgt.n	80106ce <__sflush_r+0xfa>
 80106cc:	e794      	b.n	80105f8 <__sflush_r+0x24>
 80106ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80106d0:	0032      	movs	r2, r6
 80106d2:	001f      	movs	r7, r3
 80106d4:	0028      	movs	r0, r5
 80106d6:	9b01      	ldr	r3, [sp, #4]
 80106d8:	69e1      	ldr	r1, [r4, #28]
 80106da:	47b8      	blx	r7
 80106dc:	2800      	cmp	r0, #0
 80106de:	dc06      	bgt.n	80106ee <__sflush_r+0x11a>
 80106e0:	2340      	movs	r3, #64	; 0x40
 80106e2:	2001      	movs	r0, #1
 80106e4:	89a2      	ldrh	r2, [r4, #12]
 80106e6:	4240      	negs	r0, r0
 80106e8:	4313      	orrs	r3, r2
 80106ea:	81a3      	strh	r3, [r4, #12]
 80106ec:	e785      	b.n	80105fa <__sflush_r+0x26>
 80106ee:	9b01      	ldr	r3, [sp, #4]
 80106f0:	1836      	adds	r6, r6, r0
 80106f2:	1a1b      	subs	r3, r3, r0
 80106f4:	9301      	str	r3, [sp, #4]
 80106f6:	e7e6      	b.n	80106c6 <__sflush_r+0xf2>
 80106f8:	dfbffffe 	.word	0xdfbffffe
 80106fc:	fffff7ff 	.word	0xfffff7ff

08010700 <_fflush_r>:
 8010700:	b570      	push	{r4, r5, r6, lr}
 8010702:	0005      	movs	r5, r0
 8010704:	000c      	movs	r4, r1
 8010706:	2800      	cmp	r0, #0
 8010708:	d004      	beq.n	8010714 <_fflush_r+0x14>
 801070a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801070c:	2b00      	cmp	r3, #0
 801070e:	d101      	bne.n	8010714 <_fflush_r+0x14>
 8010710:	f7fb ffac 	bl	800c66c <__sinit>
 8010714:	220c      	movs	r2, #12
 8010716:	5ea3      	ldrsh	r3, [r4, r2]
 8010718:	1e1e      	subs	r6, r3, #0
 801071a:	d015      	beq.n	8010748 <_fflush_r+0x48>
 801071c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801071e:	07d2      	lsls	r2, r2, #31
 8010720:	d404      	bmi.n	801072c <_fflush_r+0x2c>
 8010722:	059b      	lsls	r3, r3, #22
 8010724:	d402      	bmi.n	801072c <_fflush_r+0x2c>
 8010726:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010728:	f7fc f976 	bl	800ca18 <__retarget_lock_acquire_recursive>
 801072c:	0021      	movs	r1, r4
 801072e:	0028      	movs	r0, r5
 8010730:	f7ff ff50 	bl	80105d4 <__sflush_r>
 8010734:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010736:	0006      	movs	r6, r0
 8010738:	07db      	lsls	r3, r3, #31
 801073a:	d405      	bmi.n	8010748 <_fflush_r+0x48>
 801073c:	89a3      	ldrh	r3, [r4, #12]
 801073e:	059b      	lsls	r3, r3, #22
 8010740:	d402      	bmi.n	8010748 <_fflush_r+0x48>
 8010742:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010744:	f7fc f969 	bl	800ca1a <__retarget_lock_release_recursive>
 8010748:	0030      	movs	r0, r6
 801074a:	bd70      	pop	{r4, r5, r6, pc}

0801074c <__sccl>:
 801074c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801074e:	780b      	ldrb	r3, [r1, #0]
 8010750:	0004      	movs	r4, r0
 8010752:	2b5e      	cmp	r3, #94	; 0x5e
 8010754:	d019      	beq.n	801078a <__sccl+0x3e>
 8010756:	2200      	movs	r2, #0
 8010758:	1c4d      	adds	r5, r1, #1
 801075a:	0021      	movs	r1, r4
 801075c:	1c60      	adds	r0, r4, #1
 801075e:	30ff      	adds	r0, #255	; 0xff
 8010760:	700a      	strb	r2, [r1, #0]
 8010762:	3101      	adds	r1, #1
 8010764:	4281      	cmp	r1, r0
 8010766:	d1fb      	bne.n	8010760 <__sccl+0x14>
 8010768:	1e68      	subs	r0, r5, #1
 801076a:	2b00      	cmp	r3, #0
 801076c:	d00c      	beq.n	8010788 <__sccl+0x3c>
 801076e:	2101      	movs	r1, #1
 8010770:	262d      	movs	r6, #45	; 0x2d
 8010772:	404a      	eors	r2, r1
 8010774:	0028      	movs	r0, r5
 8010776:	54e2      	strb	r2, [r4, r3]
 8010778:	7801      	ldrb	r1, [r0, #0]
 801077a:	1c45      	adds	r5, r0, #1
 801077c:	292d      	cmp	r1, #45	; 0x2d
 801077e:	d00c      	beq.n	801079a <__sccl+0x4e>
 8010780:	295d      	cmp	r1, #93	; 0x5d
 8010782:	d01d      	beq.n	80107c0 <__sccl+0x74>
 8010784:	2900      	cmp	r1, #0
 8010786:	d104      	bne.n	8010792 <__sccl+0x46>
 8010788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801078a:	2201      	movs	r2, #1
 801078c:	784b      	ldrb	r3, [r1, #1]
 801078e:	1c8d      	adds	r5, r1, #2
 8010790:	e7e3      	b.n	801075a <__sccl+0xe>
 8010792:	000b      	movs	r3, r1
 8010794:	e7ee      	b.n	8010774 <__sccl+0x28>
 8010796:	0033      	movs	r3, r6
 8010798:	e7ec      	b.n	8010774 <__sccl+0x28>
 801079a:	7841      	ldrb	r1, [r0, #1]
 801079c:	295d      	cmp	r1, #93	; 0x5d
 801079e:	d0fa      	beq.n	8010796 <__sccl+0x4a>
 80107a0:	428b      	cmp	r3, r1
 80107a2:	dcf8      	bgt.n	8010796 <__sccl+0x4a>
 80107a4:	001d      	movs	r5, r3
 80107a6:	3002      	adds	r0, #2
 80107a8:	3501      	adds	r5, #1
 80107aa:	5562      	strb	r2, [r4, r5]
 80107ac:	42a9      	cmp	r1, r5
 80107ae:	dcfb      	bgt.n	80107a8 <__sccl+0x5c>
 80107b0:	2500      	movs	r5, #0
 80107b2:	1c5f      	adds	r7, r3, #1
 80107b4:	428b      	cmp	r3, r1
 80107b6:	da01      	bge.n	80107bc <__sccl+0x70>
 80107b8:	1acd      	subs	r5, r1, r3
 80107ba:	3d01      	subs	r5, #1
 80107bc:	197b      	adds	r3, r7, r5
 80107be:	e7db      	b.n	8010778 <__sccl+0x2c>
 80107c0:	0028      	movs	r0, r5
 80107c2:	e7e1      	b.n	8010788 <__sccl+0x3c>

080107c4 <_localeconv_r>:
 80107c4:	4800      	ldr	r0, [pc, #0]	; (80107c8 <_localeconv_r+0x4>)
 80107c6:	4770      	bx	lr
 80107c8:	2000053c 	.word	0x2000053c

080107cc <__libc_fini_array>:
 80107cc:	b570      	push	{r4, r5, r6, lr}
 80107ce:	4c07      	ldr	r4, [pc, #28]	; (80107ec <__libc_fini_array+0x20>)
 80107d0:	4d07      	ldr	r5, [pc, #28]	; (80107f0 <__libc_fini_array+0x24>)
 80107d2:	1b64      	subs	r4, r4, r5
 80107d4:	10a4      	asrs	r4, r4, #2
 80107d6:	2c00      	cmp	r4, #0
 80107d8:	d102      	bne.n	80107e0 <__libc_fini_array+0x14>
 80107da:	f002 fdcd 	bl	8013378 <_fini>
 80107de:	bd70      	pop	{r4, r5, r6, pc}
 80107e0:	3c01      	subs	r4, #1
 80107e2:	00a3      	lsls	r3, r4, #2
 80107e4:	58eb      	ldr	r3, [r5, r3]
 80107e6:	4798      	blx	r3
 80107e8:	e7f5      	b.n	80107d6 <__libc_fini_array+0xa>
 80107ea:	46c0      	nop			; (mov r8, r8)
 80107ec:	080152f8 	.word	0x080152f8
 80107f0:	080152f4 	.word	0x080152f4

080107f4 <memchr>:
 80107f4:	b2c9      	uxtb	r1, r1
 80107f6:	1882      	adds	r2, r0, r2
 80107f8:	4290      	cmp	r0, r2
 80107fa:	d101      	bne.n	8010800 <memchr+0xc>
 80107fc:	2000      	movs	r0, #0
 80107fe:	4770      	bx	lr
 8010800:	7803      	ldrb	r3, [r0, #0]
 8010802:	428b      	cmp	r3, r1
 8010804:	d0fb      	beq.n	80107fe <memchr+0xa>
 8010806:	3001      	adds	r0, #1
 8010808:	e7f6      	b.n	80107f8 <memchr+0x4>
	...

0801080c <frexp>:
 801080c:	b570      	push	{r4, r5, r6, lr}
 801080e:	0014      	movs	r4, r2
 8010810:	2500      	movs	r5, #0
 8010812:	6025      	str	r5, [r4, #0]
 8010814:	4d10      	ldr	r5, [pc, #64]	; (8010858 <frexp+0x4c>)
 8010816:	004b      	lsls	r3, r1, #1
 8010818:	000a      	movs	r2, r1
 801081a:	085b      	lsrs	r3, r3, #1
 801081c:	42ab      	cmp	r3, r5
 801081e:	dc1a      	bgt.n	8010856 <frexp+0x4a>
 8010820:	001d      	movs	r5, r3
 8010822:	4305      	orrs	r5, r0
 8010824:	d017      	beq.n	8010856 <frexp+0x4a>
 8010826:	4d0d      	ldr	r5, [pc, #52]	; (801085c <frexp+0x50>)
 8010828:	4229      	tst	r1, r5
 801082a:	d109      	bne.n	8010840 <frexp+0x34>
 801082c:	2200      	movs	r2, #0
 801082e:	4b0c      	ldr	r3, [pc, #48]	; (8010860 <frexp+0x54>)
 8010830:	f7f0 ff1c 	bl	800166c <__aeabi_dmul>
 8010834:	2536      	movs	r5, #54	; 0x36
 8010836:	000a      	movs	r2, r1
 8010838:	004b      	lsls	r3, r1, #1
 801083a:	426d      	negs	r5, r5
 801083c:	085b      	lsrs	r3, r3, #1
 801083e:	6025      	str	r5, [r4, #0]
 8010840:	4d08      	ldr	r5, [pc, #32]	; (8010864 <frexp+0x58>)
 8010842:	151b      	asrs	r3, r3, #20
 8010844:	195b      	adds	r3, r3, r5
 8010846:	6825      	ldr	r5, [r4, #0]
 8010848:	18eb      	adds	r3, r5, r3
 801084a:	6023      	str	r3, [r4, #0]
 801084c:	4b06      	ldr	r3, [pc, #24]	; (8010868 <frexp+0x5c>)
 801084e:	401a      	ands	r2, r3
 8010850:	4b06      	ldr	r3, [pc, #24]	; (801086c <frexp+0x60>)
 8010852:	4313      	orrs	r3, r2
 8010854:	0019      	movs	r1, r3
 8010856:	bd70      	pop	{r4, r5, r6, pc}
 8010858:	7fefffff 	.word	0x7fefffff
 801085c:	7ff00000 	.word	0x7ff00000
 8010860:	43500000 	.word	0x43500000
 8010864:	fffffc02 	.word	0xfffffc02
 8010868:	800fffff 	.word	0x800fffff
 801086c:	3fe00000 	.word	0x3fe00000

08010870 <__register_exitproc>:
 8010870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010872:	4f1c      	ldr	r7, [pc, #112]	; (80108e4 <__register_exitproc+0x74>)
 8010874:	0004      	movs	r4, r0
 8010876:	6838      	ldr	r0, [r7, #0]
 8010878:	0016      	movs	r6, r2
 801087a:	9301      	str	r3, [sp, #4]
 801087c:	9100      	str	r1, [sp, #0]
 801087e:	f7fc f8cb 	bl	800ca18 <__retarget_lock_acquire_recursive>
 8010882:	4a19      	ldr	r2, [pc, #100]	; (80108e8 <__register_exitproc+0x78>)
 8010884:	6813      	ldr	r3, [r2, #0]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d101      	bne.n	801088e <__register_exitproc+0x1e>
 801088a:	4b18      	ldr	r3, [pc, #96]	; (80108ec <__register_exitproc+0x7c>)
 801088c:	6013      	str	r3, [r2, #0]
 801088e:	685a      	ldr	r2, [r3, #4]
 8010890:	6838      	ldr	r0, [r7, #0]
 8010892:	2a1f      	cmp	r2, #31
 8010894:	dd04      	ble.n	80108a0 <__register_exitproc+0x30>
 8010896:	f7fc f8c0 	bl	800ca1a <__retarget_lock_release_recursive>
 801089a:	2001      	movs	r0, #1
 801089c:	4240      	negs	r0, r0
 801089e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80108a0:	2c00      	cmp	r4, #0
 80108a2:	d014      	beq.n	80108ce <__register_exitproc+0x5e>
 80108a4:	0091      	lsls	r1, r2, #2
 80108a6:	1859      	adds	r1, r3, r1
 80108a8:	000f      	movs	r7, r1
 80108aa:	3788      	adds	r7, #136	; 0x88
 80108ac:	603e      	str	r6, [r7, #0]
 80108ae:	2701      	movs	r7, #1
 80108b0:	001e      	movs	r6, r3
 80108b2:	4097      	lsls	r7, r2
 80108b4:	3685      	adds	r6, #133	; 0x85
 80108b6:	36ff      	adds	r6, #255	; 0xff
 80108b8:	6875      	ldr	r5, [r6, #4]
 80108ba:	31fc      	adds	r1, #252	; 0xfc
 80108bc:	433d      	orrs	r5, r7
 80108be:	6075      	str	r5, [r6, #4]
 80108c0:	9d01      	ldr	r5, [sp, #4]
 80108c2:	60cd      	str	r5, [r1, #12]
 80108c4:	2c02      	cmp	r4, #2
 80108c6:	d102      	bne.n	80108ce <__register_exitproc+0x5e>
 80108c8:	68b1      	ldr	r1, [r6, #8]
 80108ca:	4339      	orrs	r1, r7
 80108cc:	60b1      	str	r1, [r6, #8]
 80108ce:	1c51      	adds	r1, r2, #1
 80108d0:	6059      	str	r1, [r3, #4]
 80108d2:	3202      	adds	r2, #2
 80108d4:	9900      	ldr	r1, [sp, #0]
 80108d6:	0092      	lsls	r2, r2, #2
 80108d8:	50d1      	str	r1, [r2, r3]
 80108da:	f7fc f89e 	bl	800ca1a <__retarget_lock_release_recursive>
 80108de:	2000      	movs	r0, #0
 80108e0:	e7dd      	b.n	801089e <__register_exitproc+0x2e>
 80108e2:	46c0      	nop			; (mov r8, r8)
 80108e4:	200006dc 	.word	0x200006dc
 80108e8:	20000d38 	.word	0x20000d38
 80108ec:	20000d3c 	.word	0x20000d3c

080108f0 <__assert_func>:
 80108f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80108f2:	0014      	movs	r4, r2
 80108f4:	001a      	movs	r2, r3
 80108f6:	4b09      	ldr	r3, [pc, #36]	; (801091c <__assert_func+0x2c>)
 80108f8:	0005      	movs	r5, r0
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	000e      	movs	r6, r1
 80108fe:	68d8      	ldr	r0, [r3, #12]
 8010900:	4b07      	ldr	r3, [pc, #28]	; (8010920 <__assert_func+0x30>)
 8010902:	2c00      	cmp	r4, #0
 8010904:	d101      	bne.n	801090a <__assert_func+0x1a>
 8010906:	4b07      	ldr	r3, [pc, #28]	; (8010924 <__assert_func+0x34>)
 8010908:	001c      	movs	r4, r3
 801090a:	4907      	ldr	r1, [pc, #28]	; (8010928 <__assert_func+0x38>)
 801090c:	9301      	str	r3, [sp, #4]
 801090e:	9402      	str	r4, [sp, #8]
 8010910:	002b      	movs	r3, r5
 8010912:	9600      	str	r6, [sp, #0]
 8010914:	f001 faa6 	bl	8011e64 <fiprintf>
 8010918:	f002 fb8e 	bl	8013038 <abort>
 801091c:	200006d8 	.word	0x200006d8
 8010920:	08015220 	.word	0x08015220
 8010924:	0801525b 	.word	0x0801525b
 8010928:	0801522d 	.word	0x0801522d

0801092c <_calloc_r>:
 801092c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801092e:	2400      	movs	r4, #0
 8010930:	0c0b      	lsrs	r3, r1, #16
 8010932:	0c16      	lsrs	r6, r2, #16
 8010934:	42a3      	cmp	r3, r4
 8010936:	d133      	bne.n	80109a0 <_calloc_r+0x74>
 8010938:	42a6      	cmp	r6, r4
 801093a:	d121      	bne.n	8010980 <_calloc_r+0x54>
 801093c:	b28b      	uxth	r3, r1
 801093e:	b291      	uxth	r1, r2
 8010940:	4359      	muls	r1, r3
 8010942:	f7fa fd11 	bl	800b368 <_malloc_r>
 8010946:	1e05      	subs	r5, r0, #0
 8010948:	d033      	beq.n	80109b2 <_calloc_r+0x86>
 801094a:	0003      	movs	r3, r0
 801094c:	3b08      	subs	r3, #8
 801094e:	685a      	ldr	r2, [r3, #4]
 8010950:	2303      	movs	r3, #3
 8010952:	439a      	bics	r2, r3
 8010954:	3a04      	subs	r2, #4
 8010956:	2a24      	cmp	r2, #36	; 0x24
 8010958:	d832      	bhi.n	80109c0 <_calloc_r+0x94>
 801095a:	0003      	movs	r3, r0
 801095c:	2a13      	cmp	r2, #19
 801095e:	d90a      	bls.n	8010976 <_calloc_r+0x4a>
 8010960:	6004      	str	r4, [r0, #0]
 8010962:	6044      	str	r4, [r0, #4]
 8010964:	3308      	adds	r3, #8
 8010966:	2a1b      	cmp	r2, #27
 8010968:	d905      	bls.n	8010976 <_calloc_r+0x4a>
 801096a:	6084      	str	r4, [r0, #8]
 801096c:	60c4      	str	r4, [r0, #12]
 801096e:	2a24      	cmp	r2, #36	; 0x24
 8010970:	d021      	beq.n	80109b6 <_calloc_r+0x8a>
 8010972:	0003      	movs	r3, r0
 8010974:	3310      	adds	r3, #16
 8010976:	2200      	movs	r2, #0
 8010978:	601a      	str	r2, [r3, #0]
 801097a:	605a      	str	r2, [r3, #4]
 801097c:	609a      	str	r2, [r3, #8]
 801097e:	e018      	b.n	80109b2 <_calloc_r+0x86>
 8010980:	1c33      	adds	r3, r6, #0
 8010982:	1c0d      	adds	r5, r1, #0
 8010984:	b289      	uxth	r1, r1
 8010986:	b292      	uxth	r2, r2
 8010988:	434a      	muls	r2, r1
 801098a:	b2ad      	uxth	r5, r5
 801098c:	b299      	uxth	r1, r3
 801098e:	4369      	muls	r1, r5
 8010990:	0c13      	lsrs	r3, r2, #16
 8010992:	18c9      	adds	r1, r1, r3
 8010994:	0c0b      	lsrs	r3, r1, #16
 8010996:	d107      	bne.n	80109a8 <_calloc_r+0x7c>
 8010998:	0409      	lsls	r1, r1, #16
 801099a:	b292      	uxth	r2, r2
 801099c:	4311      	orrs	r1, r2
 801099e:	e7d0      	b.n	8010942 <_calloc_r+0x16>
 80109a0:	2e00      	cmp	r6, #0
 80109a2:	d101      	bne.n	80109a8 <_calloc_r+0x7c>
 80109a4:	1c15      	adds	r5, r2, #0
 80109a6:	e7ed      	b.n	8010984 <_calloc_r+0x58>
 80109a8:	f7fc f80a 	bl	800c9c0 <__errno>
 80109ac:	230c      	movs	r3, #12
 80109ae:	2500      	movs	r5, #0
 80109b0:	6003      	str	r3, [r0, #0]
 80109b2:	0028      	movs	r0, r5
 80109b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109b6:	0003      	movs	r3, r0
 80109b8:	6104      	str	r4, [r0, #16]
 80109ba:	3318      	adds	r3, #24
 80109bc:	6144      	str	r4, [r0, #20]
 80109be:	e7da      	b.n	8010976 <_calloc_r+0x4a>
 80109c0:	2100      	movs	r1, #0
 80109c2:	f7fb ff51 	bl	800c868 <memset>
 80109c6:	e7f4      	b.n	80109b2 <_calloc_r+0x86>

080109c8 <quorem>:
 80109c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109ca:	6902      	ldr	r2, [r0, #16]
 80109cc:	690b      	ldr	r3, [r1, #16]
 80109ce:	b089      	sub	sp, #36	; 0x24
 80109d0:	0007      	movs	r7, r0
 80109d2:	9104      	str	r1, [sp, #16]
 80109d4:	2000      	movs	r0, #0
 80109d6:	429a      	cmp	r2, r3
 80109d8:	db69      	blt.n	8010aae <quorem+0xe6>
 80109da:	3b01      	subs	r3, #1
 80109dc:	009c      	lsls	r4, r3, #2
 80109de:	9301      	str	r3, [sp, #4]
 80109e0:	000b      	movs	r3, r1
 80109e2:	3314      	adds	r3, #20
 80109e4:	9306      	str	r3, [sp, #24]
 80109e6:	191b      	adds	r3, r3, r4
 80109e8:	9305      	str	r3, [sp, #20]
 80109ea:	003b      	movs	r3, r7
 80109ec:	3314      	adds	r3, #20
 80109ee:	9303      	str	r3, [sp, #12]
 80109f0:	191c      	adds	r4, r3, r4
 80109f2:	9b05      	ldr	r3, [sp, #20]
 80109f4:	6826      	ldr	r6, [r4, #0]
 80109f6:	681d      	ldr	r5, [r3, #0]
 80109f8:	0030      	movs	r0, r6
 80109fa:	3501      	adds	r5, #1
 80109fc:	0029      	movs	r1, r5
 80109fe:	f7ef fb9d 	bl	800013c <__udivsi3>
 8010a02:	9002      	str	r0, [sp, #8]
 8010a04:	42ae      	cmp	r6, r5
 8010a06:	d329      	bcc.n	8010a5c <quorem+0x94>
 8010a08:	9b06      	ldr	r3, [sp, #24]
 8010a0a:	2600      	movs	r6, #0
 8010a0c:	469c      	mov	ip, r3
 8010a0e:	9d03      	ldr	r5, [sp, #12]
 8010a10:	9606      	str	r6, [sp, #24]
 8010a12:	4662      	mov	r2, ip
 8010a14:	ca08      	ldmia	r2!, {r3}
 8010a16:	6828      	ldr	r0, [r5, #0]
 8010a18:	4694      	mov	ip, r2
 8010a1a:	9a02      	ldr	r2, [sp, #8]
 8010a1c:	b299      	uxth	r1, r3
 8010a1e:	4351      	muls	r1, r2
 8010a20:	0c1b      	lsrs	r3, r3, #16
 8010a22:	4353      	muls	r3, r2
 8010a24:	1989      	adds	r1, r1, r6
 8010a26:	0c0a      	lsrs	r2, r1, #16
 8010a28:	189b      	adds	r3, r3, r2
 8010a2a:	9307      	str	r3, [sp, #28]
 8010a2c:	0c1e      	lsrs	r6, r3, #16
 8010a2e:	9b06      	ldr	r3, [sp, #24]
 8010a30:	b282      	uxth	r2, r0
 8010a32:	18d2      	adds	r2, r2, r3
 8010a34:	466b      	mov	r3, sp
 8010a36:	b289      	uxth	r1, r1
 8010a38:	8b9b      	ldrh	r3, [r3, #28]
 8010a3a:	1a52      	subs	r2, r2, r1
 8010a3c:	0c01      	lsrs	r1, r0, #16
 8010a3e:	1ac9      	subs	r1, r1, r3
 8010a40:	1413      	asrs	r3, r2, #16
 8010a42:	18cb      	adds	r3, r1, r3
 8010a44:	1419      	asrs	r1, r3, #16
 8010a46:	b292      	uxth	r2, r2
 8010a48:	041b      	lsls	r3, r3, #16
 8010a4a:	4313      	orrs	r3, r2
 8010a4c:	c508      	stmia	r5!, {r3}
 8010a4e:	9b05      	ldr	r3, [sp, #20]
 8010a50:	9106      	str	r1, [sp, #24]
 8010a52:	4563      	cmp	r3, ip
 8010a54:	d2dd      	bcs.n	8010a12 <quorem+0x4a>
 8010a56:	6823      	ldr	r3, [r4, #0]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d030      	beq.n	8010abe <quorem+0xf6>
 8010a5c:	0038      	movs	r0, r7
 8010a5e:	9904      	ldr	r1, [sp, #16]
 8010a60:	f7fc ff04 	bl	800d86c <__mcmp>
 8010a64:	2800      	cmp	r0, #0
 8010a66:	db21      	blt.n	8010aac <quorem+0xe4>
 8010a68:	0038      	movs	r0, r7
 8010a6a:	2600      	movs	r6, #0
 8010a6c:	9b02      	ldr	r3, [sp, #8]
 8010a6e:	9c04      	ldr	r4, [sp, #16]
 8010a70:	3301      	adds	r3, #1
 8010a72:	9302      	str	r3, [sp, #8]
 8010a74:	3014      	adds	r0, #20
 8010a76:	3414      	adds	r4, #20
 8010a78:	6803      	ldr	r3, [r0, #0]
 8010a7a:	cc02      	ldmia	r4!, {r1}
 8010a7c:	b29d      	uxth	r5, r3
 8010a7e:	19ad      	adds	r5, r5, r6
 8010a80:	b28a      	uxth	r2, r1
 8010a82:	1aaa      	subs	r2, r5, r2
 8010a84:	0c09      	lsrs	r1, r1, #16
 8010a86:	0c1b      	lsrs	r3, r3, #16
 8010a88:	1a5b      	subs	r3, r3, r1
 8010a8a:	1411      	asrs	r1, r2, #16
 8010a8c:	185b      	adds	r3, r3, r1
 8010a8e:	141e      	asrs	r6, r3, #16
 8010a90:	b292      	uxth	r2, r2
 8010a92:	041b      	lsls	r3, r3, #16
 8010a94:	4313      	orrs	r3, r2
 8010a96:	c008      	stmia	r0!, {r3}
 8010a98:	9b05      	ldr	r3, [sp, #20]
 8010a9a:	42a3      	cmp	r3, r4
 8010a9c:	d2ec      	bcs.n	8010a78 <quorem+0xb0>
 8010a9e:	9b01      	ldr	r3, [sp, #4]
 8010aa0:	9a03      	ldr	r2, [sp, #12]
 8010aa2:	009b      	lsls	r3, r3, #2
 8010aa4:	18d3      	adds	r3, r2, r3
 8010aa6:	681a      	ldr	r2, [r3, #0]
 8010aa8:	2a00      	cmp	r2, #0
 8010aaa:	d015      	beq.n	8010ad8 <quorem+0x110>
 8010aac:	9802      	ldr	r0, [sp, #8]
 8010aae:	b009      	add	sp, #36	; 0x24
 8010ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ab2:	6823      	ldr	r3, [r4, #0]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d106      	bne.n	8010ac6 <quorem+0xfe>
 8010ab8:	9b01      	ldr	r3, [sp, #4]
 8010aba:	3b01      	subs	r3, #1
 8010abc:	9301      	str	r3, [sp, #4]
 8010abe:	9b03      	ldr	r3, [sp, #12]
 8010ac0:	3c04      	subs	r4, #4
 8010ac2:	42a3      	cmp	r3, r4
 8010ac4:	d3f5      	bcc.n	8010ab2 <quorem+0xea>
 8010ac6:	9b01      	ldr	r3, [sp, #4]
 8010ac8:	613b      	str	r3, [r7, #16]
 8010aca:	e7c7      	b.n	8010a5c <quorem+0x94>
 8010acc:	681a      	ldr	r2, [r3, #0]
 8010ace:	2a00      	cmp	r2, #0
 8010ad0:	d106      	bne.n	8010ae0 <quorem+0x118>
 8010ad2:	9a01      	ldr	r2, [sp, #4]
 8010ad4:	3a01      	subs	r2, #1
 8010ad6:	9201      	str	r2, [sp, #4]
 8010ad8:	9a03      	ldr	r2, [sp, #12]
 8010ada:	3b04      	subs	r3, #4
 8010adc:	429a      	cmp	r2, r3
 8010ade:	d3f5      	bcc.n	8010acc <quorem+0x104>
 8010ae0:	9b01      	ldr	r3, [sp, #4]
 8010ae2:	613b      	str	r3, [r7, #16]
 8010ae4:	e7e2      	b.n	8010aac <quorem+0xe4>
	...

08010ae8 <_dtoa_r>:
 8010ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010aea:	0014      	movs	r4, r2
 8010aec:	001d      	movs	r5, r3
 8010aee:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8010af0:	b09d      	sub	sp, #116	; 0x74
 8010af2:	9408      	str	r4, [sp, #32]
 8010af4:	9509      	str	r5, [sp, #36]	; 0x24
 8010af6:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8010af8:	9004      	str	r0, [sp, #16]
 8010afa:	2900      	cmp	r1, #0
 8010afc:	d009      	beq.n	8010b12 <_dtoa_r+0x2a>
 8010afe:	2301      	movs	r3, #1
 8010b00:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010b02:	4093      	lsls	r3, r2
 8010b04:	604a      	str	r2, [r1, #4]
 8010b06:	608b      	str	r3, [r1, #8]
 8010b08:	f7fc fc56 	bl	800d3b8 <_Bfree>
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	9a04      	ldr	r2, [sp, #16]
 8010b10:	6393      	str	r3, [r2, #56]	; 0x38
 8010b12:	2d00      	cmp	r5, #0
 8010b14:	da1e      	bge.n	8010b54 <_dtoa_r+0x6c>
 8010b16:	2301      	movs	r3, #1
 8010b18:	6033      	str	r3, [r6, #0]
 8010b1a:	006b      	lsls	r3, r5, #1
 8010b1c:	085b      	lsrs	r3, r3, #1
 8010b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8010b20:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010b22:	4bb5      	ldr	r3, [pc, #724]	; (8010df8 <_dtoa_r+0x310>)
 8010b24:	4ab4      	ldr	r2, [pc, #720]	; (8010df8 <_dtoa_r+0x310>)
 8010b26:	403b      	ands	r3, r7
 8010b28:	4293      	cmp	r3, r2
 8010b2a:	d116      	bne.n	8010b5a <_dtoa_r+0x72>
 8010b2c:	4bb3      	ldr	r3, [pc, #716]	; (8010dfc <_dtoa_r+0x314>)
 8010b2e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010b30:	6013      	str	r3, [r2, #0]
 8010b32:	033b      	lsls	r3, r7, #12
 8010b34:	0b1b      	lsrs	r3, r3, #12
 8010b36:	4323      	orrs	r3, r4
 8010b38:	d101      	bne.n	8010b3e <_dtoa_r+0x56>
 8010b3a:	f000 fdb2 	bl	80116a2 <_dtoa_r+0xbba>
 8010b3e:	4bb0      	ldr	r3, [pc, #704]	; (8010e00 <_dtoa_r+0x318>)
 8010b40:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010b42:	9306      	str	r3, [sp, #24]
 8010b44:	2a00      	cmp	r2, #0
 8010b46:	d002      	beq.n	8010b4e <_dtoa_r+0x66>
 8010b48:	4bae      	ldr	r3, [pc, #696]	; (8010e04 <_dtoa_r+0x31c>)
 8010b4a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010b4c:	6013      	str	r3, [r2, #0]
 8010b4e:	9806      	ldr	r0, [sp, #24]
 8010b50:	b01d      	add	sp, #116	; 0x74
 8010b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b54:	2300      	movs	r3, #0
 8010b56:	6033      	str	r3, [r6, #0]
 8010b58:	e7e2      	b.n	8010b20 <_dtoa_r+0x38>
 8010b5a:	9a08      	ldr	r2, [sp, #32]
 8010b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b5e:	9210      	str	r2, [sp, #64]	; 0x40
 8010b60:	9311      	str	r3, [sp, #68]	; 0x44
 8010b62:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010b64:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010b66:	2200      	movs	r2, #0
 8010b68:	2300      	movs	r3, #0
 8010b6a:	f7ef fc6d 	bl	8000448 <__aeabi_dcmpeq>
 8010b6e:	1e06      	subs	r6, r0, #0
 8010b70:	d009      	beq.n	8010b86 <_dtoa_r+0x9e>
 8010b72:	2301      	movs	r3, #1
 8010b74:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010b76:	6013      	str	r3, [r2, #0]
 8010b78:	4ba3      	ldr	r3, [pc, #652]	; (8010e08 <_dtoa_r+0x320>)
 8010b7a:	9306      	str	r3, [sp, #24]
 8010b7c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d0e5      	beq.n	8010b4e <_dtoa_r+0x66>
 8010b82:	4ba2      	ldr	r3, [pc, #648]	; (8010e0c <_dtoa_r+0x324>)
 8010b84:	e7e1      	b.n	8010b4a <_dtoa_r+0x62>
 8010b86:	ab1a      	add	r3, sp, #104	; 0x68
 8010b88:	9301      	str	r3, [sp, #4]
 8010b8a:	ab1b      	add	r3, sp, #108	; 0x6c
 8010b8c:	9300      	str	r3, [sp, #0]
 8010b8e:	9804      	ldr	r0, [sp, #16]
 8010b90:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010b92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010b94:	f7fc ff86 	bl	800daa4 <__d2b>
 8010b98:	007a      	lsls	r2, r7, #1
 8010b9a:	9005      	str	r0, [sp, #20]
 8010b9c:	0d52      	lsrs	r2, r2, #21
 8010b9e:	d100      	bne.n	8010ba2 <_dtoa_r+0xba>
 8010ba0:	e07b      	b.n	8010c9a <_dtoa_r+0x1b2>
 8010ba2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010ba4:	9617      	str	r6, [sp, #92]	; 0x5c
 8010ba6:	0319      	lsls	r1, r3, #12
 8010ba8:	4b99      	ldr	r3, [pc, #612]	; (8010e10 <_dtoa_r+0x328>)
 8010baa:	0b09      	lsrs	r1, r1, #12
 8010bac:	430b      	orrs	r3, r1
 8010bae:	4999      	ldr	r1, [pc, #612]	; (8010e14 <_dtoa_r+0x32c>)
 8010bb0:	1857      	adds	r7, r2, r1
 8010bb2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010bb4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010bb6:	0019      	movs	r1, r3
 8010bb8:	2200      	movs	r2, #0
 8010bba:	4b97      	ldr	r3, [pc, #604]	; (8010e18 <_dtoa_r+0x330>)
 8010bbc:	f7f1 f818 	bl	8001bf0 <__aeabi_dsub>
 8010bc0:	4a96      	ldr	r2, [pc, #600]	; (8010e1c <_dtoa_r+0x334>)
 8010bc2:	4b97      	ldr	r3, [pc, #604]	; (8010e20 <_dtoa_r+0x338>)
 8010bc4:	f7f0 fd52 	bl	800166c <__aeabi_dmul>
 8010bc8:	4a96      	ldr	r2, [pc, #600]	; (8010e24 <_dtoa_r+0x33c>)
 8010bca:	4b97      	ldr	r3, [pc, #604]	; (8010e28 <_dtoa_r+0x340>)
 8010bcc:	f7ef fdf4 	bl	80007b8 <__aeabi_dadd>
 8010bd0:	0004      	movs	r4, r0
 8010bd2:	0038      	movs	r0, r7
 8010bd4:	000d      	movs	r5, r1
 8010bd6:	f7f1 fbe1 	bl	800239c <__aeabi_i2d>
 8010bda:	4a94      	ldr	r2, [pc, #592]	; (8010e2c <_dtoa_r+0x344>)
 8010bdc:	4b94      	ldr	r3, [pc, #592]	; (8010e30 <_dtoa_r+0x348>)
 8010bde:	f7f0 fd45 	bl	800166c <__aeabi_dmul>
 8010be2:	0002      	movs	r2, r0
 8010be4:	000b      	movs	r3, r1
 8010be6:	0020      	movs	r0, r4
 8010be8:	0029      	movs	r1, r5
 8010bea:	f7ef fde5 	bl	80007b8 <__aeabi_dadd>
 8010bee:	0004      	movs	r4, r0
 8010bf0:	000d      	movs	r5, r1
 8010bf2:	f7f1 fb9d 	bl	8002330 <__aeabi_d2iz>
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	9003      	str	r0, [sp, #12]
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	0020      	movs	r0, r4
 8010bfe:	0029      	movs	r1, r5
 8010c00:	f7ef fc28 	bl	8000454 <__aeabi_dcmplt>
 8010c04:	2800      	cmp	r0, #0
 8010c06:	d00b      	beq.n	8010c20 <_dtoa_r+0x138>
 8010c08:	9803      	ldr	r0, [sp, #12]
 8010c0a:	f7f1 fbc7 	bl	800239c <__aeabi_i2d>
 8010c0e:	002b      	movs	r3, r5
 8010c10:	0022      	movs	r2, r4
 8010c12:	f7ef fc19 	bl	8000448 <__aeabi_dcmpeq>
 8010c16:	4243      	negs	r3, r0
 8010c18:	4158      	adcs	r0, r3
 8010c1a:	9b03      	ldr	r3, [sp, #12]
 8010c1c:	1a1b      	subs	r3, r3, r0
 8010c1e:	9303      	str	r3, [sp, #12]
 8010c20:	2301      	movs	r3, #1
 8010c22:	9316      	str	r3, [sp, #88]	; 0x58
 8010c24:	9b03      	ldr	r3, [sp, #12]
 8010c26:	2b16      	cmp	r3, #22
 8010c28:	d810      	bhi.n	8010c4c <_dtoa_r+0x164>
 8010c2a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010c2c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010c2e:	9a03      	ldr	r2, [sp, #12]
 8010c30:	4b80      	ldr	r3, [pc, #512]	; (8010e34 <_dtoa_r+0x34c>)
 8010c32:	00d2      	lsls	r2, r2, #3
 8010c34:	189b      	adds	r3, r3, r2
 8010c36:	681a      	ldr	r2, [r3, #0]
 8010c38:	685b      	ldr	r3, [r3, #4]
 8010c3a:	f7ef fc0b 	bl	8000454 <__aeabi_dcmplt>
 8010c3e:	2800      	cmp	r0, #0
 8010c40:	d047      	beq.n	8010cd2 <_dtoa_r+0x1ea>
 8010c42:	9b03      	ldr	r3, [sp, #12]
 8010c44:	3b01      	subs	r3, #1
 8010c46:	9303      	str	r3, [sp, #12]
 8010c48:	2300      	movs	r3, #0
 8010c4a:	9316      	str	r3, [sp, #88]	; 0x58
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010c50:	920a      	str	r2, [sp, #40]	; 0x28
 8010c52:	1bdb      	subs	r3, r3, r7
 8010c54:	1e5a      	subs	r2, r3, #1
 8010c56:	d53e      	bpl.n	8010cd6 <_dtoa_r+0x1ee>
 8010c58:	2201      	movs	r2, #1
 8010c5a:	1ad3      	subs	r3, r2, r3
 8010c5c:	930a      	str	r3, [sp, #40]	; 0x28
 8010c5e:	2300      	movs	r3, #0
 8010c60:	930c      	str	r3, [sp, #48]	; 0x30
 8010c62:	9b03      	ldr	r3, [sp, #12]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	db38      	blt.n	8010cda <_dtoa_r+0x1f2>
 8010c68:	9a03      	ldr	r2, [sp, #12]
 8010c6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c6c:	4694      	mov	ip, r2
 8010c6e:	4463      	add	r3, ip
 8010c70:	930c      	str	r3, [sp, #48]	; 0x30
 8010c72:	2300      	movs	r3, #0
 8010c74:	9213      	str	r2, [sp, #76]	; 0x4c
 8010c76:	930d      	str	r3, [sp, #52]	; 0x34
 8010c78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010c7a:	2401      	movs	r4, #1
 8010c7c:	2b09      	cmp	r3, #9
 8010c7e:	d867      	bhi.n	8010d50 <_dtoa_r+0x268>
 8010c80:	2b05      	cmp	r3, #5
 8010c82:	dd02      	ble.n	8010c8a <_dtoa_r+0x1a2>
 8010c84:	2400      	movs	r4, #0
 8010c86:	3b04      	subs	r3, #4
 8010c88:	9322      	str	r3, [sp, #136]	; 0x88
 8010c8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010c8c:	1e98      	subs	r0, r3, #2
 8010c8e:	2803      	cmp	r0, #3
 8010c90:	d867      	bhi.n	8010d62 <_dtoa_r+0x27a>
 8010c92:	f7ef fa3f 	bl	8000114 <__gnu_thumb1_case_uqi>
 8010c96:	3a2b      	.short	0x3a2b
 8010c98:	5b38      	.short	0x5b38
 8010c9a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010c9c:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8010c9e:	18f6      	adds	r6, r6, r3
 8010ca0:	4b65      	ldr	r3, [pc, #404]	; (8010e38 <_dtoa_r+0x350>)
 8010ca2:	18f2      	adds	r2, r6, r3
 8010ca4:	2a20      	cmp	r2, #32
 8010ca6:	dd0f      	ble.n	8010cc8 <_dtoa_r+0x1e0>
 8010ca8:	2340      	movs	r3, #64	; 0x40
 8010caa:	1a9b      	subs	r3, r3, r2
 8010cac:	409f      	lsls	r7, r3
 8010cae:	4b63      	ldr	r3, [pc, #396]	; (8010e3c <_dtoa_r+0x354>)
 8010cb0:	0038      	movs	r0, r7
 8010cb2:	18f3      	adds	r3, r6, r3
 8010cb4:	40dc      	lsrs	r4, r3
 8010cb6:	4320      	orrs	r0, r4
 8010cb8:	f7f1 fba0 	bl	80023fc <__aeabi_ui2d>
 8010cbc:	2201      	movs	r2, #1
 8010cbe:	4b60      	ldr	r3, [pc, #384]	; (8010e40 <_dtoa_r+0x358>)
 8010cc0:	1e77      	subs	r7, r6, #1
 8010cc2:	18cb      	adds	r3, r1, r3
 8010cc4:	9217      	str	r2, [sp, #92]	; 0x5c
 8010cc6:	e776      	b.n	8010bb6 <_dtoa_r+0xce>
 8010cc8:	2320      	movs	r3, #32
 8010cca:	0020      	movs	r0, r4
 8010ccc:	1a9b      	subs	r3, r3, r2
 8010cce:	4098      	lsls	r0, r3
 8010cd0:	e7f2      	b.n	8010cb8 <_dtoa_r+0x1d0>
 8010cd2:	9016      	str	r0, [sp, #88]	; 0x58
 8010cd4:	e7ba      	b.n	8010c4c <_dtoa_r+0x164>
 8010cd6:	920c      	str	r2, [sp, #48]	; 0x30
 8010cd8:	e7c3      	b.n	8010c62 <_dtoa_r+0x17a>
 8010cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010cdc:	9a03      	ldr	r2, [sp, #12]
 8010cde:	1a9b      	subs	r3, r3, r2
 8010ce0:	930a      	str	r3, [sp, #40]	; 0x28
 8010ce2:	4253      	negs	r3, r2
 8010ce4:	930d      	str	r3, [sp, #52]	; 0x34
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	9313      	str	r3, [sp, #76]	; 0x4c
 8010cea:	e7c5      	b.n	8010c78 <_dtoa_r+0x190>
 8010cec:	2300      	movs	r3, #0
 8010cee:	930f      	str	r3, [sp, #60]	; 0x3c
 8010cf0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010cf2:	930b      	str	r3, [sp, #44]	; 0x2c
 8010cf4:	9307      	str	r3, [sp, #28]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	dc13      	bgt.n	8010d22 <_dtoa_r+0x23a>
 8010cfa:	2301      	movs	r3, #1
 8010cfc:	001a      	movs	r2, r3
 8010cfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8010d00:	9307      	str	r3, [sp, #28]
 8010d02:	9223      	str	r2, [sp, #140]	; 0x8c
 8010d04:	e00d      	b.n	8010d22 <_dtoa_r+0x23a>
 8010d06:	2301      	movs	r3, #1
 8010d08:	e7f1      	b.n	8010cee <_dtoa_r+0x206>
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8010d0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010d10:	4694      	mov	ip, r2
 8010d12:	9b03      	ldr	r3, [sp, #12]
 8010d14:	4463      	add	r3, ip
 8010d16:	930b      	str	r3, [sp, #44]	; 0x2c
 8010d18:	3301      	adds	r3, #1
 8010d1a:	9307      	str	r3, [sp, #28]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	dc00      	bgt.n	8010d22 <_dtoa_r+0x23a>
 8010d20:	2301      	movs	r3, #1
 8010d22:	2100      	movs	r1, #0
 8010d24:	2204      	movs	r2, #4
 8010d26:	0010      	movs	r0, r2
 8010d28:	3014      	adds	r0, #20
 8010d2a:	4298      	cmp	r0, r3
 8010d2c:	d91d      	bls.n	8010d6a <_dtoa_r+0x282>
 8010d2e:	9b04      	ldr	r3, [sp, #16]
 8010d30:	0018      	movs	r0, r3
 8010d32:	63d9      	str	r1, [r3, #60]	; 0x3c
 8010d34:	f7fc fb18 	bl	800d368 <_Balloc>
 8010d38:	9006      	str	r0, [sp, #24]
 8010d3a:	2800      	cmp	r0, #0
 8010d3c:	d118      	bne.n	8010d70 <_dtoa_r+0x288>
 8010d3e:	21b0      	movs	r1, #176	; 0xb0
 8010d40:	4b40      	ldr	r3, [pc, #256]	; (8010e44 <_dtoa_r+0x35c>)
 8010d42:	4841      	ldr	r0, [pc, #260]	; (8010e48 <_dtoa_r+0x360>)
 8010d44:	9a06      	ldr	r2, [sp, #24]
 8010d46:	31ff      	adds	r1, #255	; 0xff
 8010d48:	f7ff fdd2 	bl	80108f0 <__assert_func>
 8010d4c:	2301      	movs	r3, #1
 8010d4e:	e7dd      	b.n	8010d0c <_dtoa_r+0x224>
 8010d50:	2300      	movs	r3, #0
 8010d52:	940f      	str	r4, [sp, #60]	; 0x3c
 8010d54:	9322      	str	r3, [sp, #136]	; 0x88
 8010d56:	3b01      	subs	r3, #1
 8010d58:	930b      	str	r3, [sp, #44]	; 0x2c
 8010d5a:	9307      	str	r3, [sp, #28]
 8010d5c:	2200      	movs	r2, #0
 8010d5e:	3313      	adds	r3, #19
 8010d60:	e7cf      	b.n	8010d02 <_dtoa_r+0x21a>
 8010d62:	2301      	movs	r3, #1
 8010d64:	930f      	str	r3, [sp, #60]	; 0x3c
 8010d66:	3b02      	subs	r3, #2
 8010d68:	e7f6      	b.n	8010d58 <_dtoa_r+0x270>
 8010d6a:	3101      	adds	r1, #1
 8010d6c:	0052      	lsls	r2, r2, #1
 8010d6e:	e7da      	b.n	8010d26 <_dtoa_r+0x23e>
 8010d70:	9b04      	ldr	r3, [sp, #16]
 8010d72:	9a06      	ldr	r2, [sp, #24]
 8010d74:	639a      	str	r2, [r3, #56]	; 0x38
 8010d76:	9b07      	ldr	r3, [sp, #28]
 8010d78:	2b0e      	cmp	r3, #14
 8010d7a:	d900      	bls.n	8010d7e <_dtoa_r+0x296>
 8010d7c:	e0e3      	b.n	8010f46 <_dtoa_r+0x45e>
 8010d7e:	2c00      	cmp	r4, #0
 8010d80:	d100      	bne.n	8010d84 <_dtoa_r+0x29c>
 8010d82:	e0e0      	b.n	8010f46 <_dtoa_r+0x45e>
 8010d84:	9b03      	ldr	r3, [sp, #12]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	dd62      	ble.n	8010e50 <_dtoa_r+0x368>
 8010d8a:	210f      	movs	r1, #15
 8010d8c:	9a03      	ldr	r2, [sp, #12]
 8010d8e:	4b29      	ldr	r3, [pc, #164]	; (8010e34 <_dtoa_r+0x34c>)
 8010d90:	400a      	ands	r2, r1
 8010d92:	00d2      	lsls	r2, r2, #3
 8010d94:	189b      	adds	r3, r3, r2
 8010d96:	681e      	ldr	r6, [r3, #0]
 8010d98:	685f      	ldr	r7, [r3, #4]
 8010d9a:	9b03      	ldr	r3, [sp, #12]
 8010d9c:	2402      	movs	r4, #2
 8010d9e:	111d      	asrs	r5, r3, #4
 8010da0:	05db      	lsls	r3, r3, #23
 8010da2:	d50a      	bpl.n	8010dba <_dtoa_r+0x2d2>
 8010da4:	4b29      	ldr	r3, [pc, #164]	; (8010e4c <_dtoa_r+0x364>)
 8010da6:	400d      	ands	r5, r1
 8010da8:	6a1a      	ldr	r2, [r3, #32]
 8010daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dac:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010dae:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010db0:	f7f0 f862 	bl	8000e78 <__aeabi_ddiv>
 8010db4:	9008      	str	r0, [sp, #32]
 8010db6:	9109      	str	r1, [sp, #36]	; 0x24
 8010db8:	3401      	adds	r4, #1
 8010dba:	4b24      	ldr	r3, [pc, #144]	; (8010e4c <_dtoa_r+0x364>)
 8010dbc:	930e      	str	r3, [sp, #56]	; 0x38
 8010dbe:	2d00      	cmp	r5, #0
 8010dc0:	d108      	bne.n	8010dd4 <_dtoa_r+0x2ec>
 8010dc2:	9808      	ldr	r0, [sp, #32]
 8010dc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010dc6:	0032      	movs	r2, r6
 8010dc8:	003b      	movs	r3, r7
 8010dca:	f7f0 f855 	bl	8000e78 <__aeabi_ddiv>
 8010dce:	9008      	str	r0, [sp, #32]
 8010dd0:	9109      	str	r1, [sp, #36]	; 0x24
 8010dd2:	e058      	b.n	8010e86 <_dtoa_r+0x39e>
 8010dd4:	2301      	movs	r3, #1
 8010dd6:	421d      	tst	r5, r3
 8010dd8:	d009      	beq.n	8010dee <_dtoa_r+0x306>
 8010dda:	18e4      	adds	r4, r4, r3
 8010ddc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010dde:	0030      	movs	r0, r6
 8010de0:	681a      	ldr	r2, [r3, #0]
 8010de2:	685b      	ldr	r3, [r3, #4]
 8010de4:	0039      	movs	r1, r7
 8010de6:	f7f0 fc41 	bl	800166c <__aeabi_dmul>
 8010dea:	0006      	movs	r6, r0
 8010dec:	000f      	movs	r7, r1
 8010dee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010df0:	106d      	asrs	r5, r5, #1
 8010df2:	3308      	adds	r3, #8
 8010df4:	e7e2      	b.n	8010dbc <_dtoa_r+0x2d4>
 8010df6:	46c0      	nop			; (mov r8, r8)
 8010df8:	7ff00000 	.word	0x7ff00000
 8010dfc:	0000270f 	.word	0x0000270f
 8010e00:	08015265 	.word	0x08015265
 8010e04:	08015268 	.word	0x08015268
 8010e08:	080151d6 	.word	0x080151d6
 8010e0c:	080151d7 	.word	0x080151d7
 8010e10:	3ff00000 	.word	0x3ff00000
 8010e14:	fffffc01 	.word	0xfffffc01
 8010e18:	3ff80000 	.word	0x3ff80000
 8010e1c:	636f4361 	.word	0x636f4361
 8010e20:	3fd287a7 	.word	0x3fd287a7
 8010e24:	8b60c8b3 	.word	0x8b60c8b3
 8010e28:	3fc68a28 	.word	0x3fc68a28
 8010e2c:	509f79fb 	.word	0x509f79fb
 8010e30:	3fd34413 	.word	0x3fd34413
 8010e34:	080150d0 	.word	0x080150d0
 8010e38:	00000432 	.word	0x00000432
 8010e3c:	00000412 	.word	0x00000412
 8010e40:	fe100000 	.word	0xfe100000
 8010e44:	08014fd9 	.word	0x08014fd9
 8010e48:	08015269 	.word	0x08015269
 8010e4c:	080150a8 	.word	0x080150a8
 8010e50:	9b03      	ldr	r3, [sp, #12]
 8010e52:	2402      	movs	r4, #2
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d016      	beq.n	8010e86 <_dtoa_r+0x39e>
 8010e58:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010e5a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010e5c:	220f      	movs	r2, #15
 8010e5e:	425d      	negs	r5, r3
 8010e60:	402a      	ands	r2, r5
 8010e62:	4bdd      	ldr	r3, [pc, #884]	; (80111d8 <_dtoa_r+0x6f0>)
 8010e64:	00d2      	lsls	r2, r2, #3
 8010e66:	189b      	adds	r3, r3, r2
 8010e68:	681a      	ldr	r2, [r3, #0]
 8010e6a:	685b      	ldr	r3, [r3, #4]
 8010e6c:	f7f0 fbfe 	bl	800166c <__aeabi_dmul>
 8010e70:	2701      	movs	r7, #1
 8010e72:	2300      	movs	r3, #0
 8010e74:	9008      	str	r0, [sp, #32]
 8010e76:	9109      	str	r1, [sp, #36]	; 0x24
 8010e78:	4ed8      	ldr	r6, [pc, #864]	; (80111dc <_dtoa_r+0x6f4>)
 8010e7a:	112d      	asrs	r5, r5, #4
 8010e7c:	2d00      	cmp	r5, #0
 8010e7e:	d000      	beq.n	8010e82 <_dtoa_r+0x39a>
 8010e80:	e091      	b.n	8010fa6 <_dtoa_r+0x4be>
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d1a3      	bne.n	8010dce <_dtoa_r+0x2e6>
 8010e86:	9e08      	ldr	r6, [sp, #32]
 8010e88:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010e8a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d100      	bne.n	8010e92 <_dtoa_r+0x3aa>
 8010e90:	e094      	b.n	8010fbc <_dtoa_r+0x4d4>
 8010e92:	2200      	movs	r2, #0
 8010e94:	0030      	movs	r0, r6
 8010e96:	0039      	movs	r1, r7
 8010e98:	4bd1      	ldr	r3, [pc, #836]	; (80111e0 <_dtoa_r+0x6f8>)
 8010e9a:	f7ef fadb 	bl	8000454 <__aeabi_dcmplt>
 8010e9e:	2800      	cmp	r0, #0
 8010ea0:	d100      	bne.n	8010ea4 <_dtoa_r+0x3bc>
 8010ea2:	e08b      	b.n	8010fbc <_dtoa_r+0x4d4>
 8010ea4:	9b07      	ldr	r3, [sp, #28]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d100      	bne.n	8010eac <_dtoa_r+0x3c4>
 8010eaa:	e087      	b.n	8010fbc <_dtoa_r+0x4d4>
 8010eac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	dd45      	ble.n	8010f3e <_dtoa_r+0x456>
 8010eb2:	9b03      	ldr	r3, [sp, #12]
 8010eb4:	2200      	movs	r2, #0
 8010eb6:	3b01      	subs	r3, #1
 8010eb8:	930e      	str	r3, [sp, #56]	; 0x38
 8010eba:	0030      	movs	r0, r6
 8010ebc:	4bc9      	ldr	r3, [pc, #804]	; (80111e4 <_dtoa_r+0x6fc>)
 8010ebe:	0039      	movs	r1, r7
 8010ec0:	f7f0 fbd4 	bl	800166c <__aeabi_dmul>
 8010ec4:	9008      	str	r0, [sp, #32]
 8010ec6:	9109      	str	r1, [sp, #36]	; 0x24
 8010ec8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010eca:	3401      	adds	r4, #1
 8010ecc:	0020      	movs	r0, r4
 8010ece:	9e08      	ldr	r6, [sp, #32]
 8010ed0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010ed2:	9312      	str	r3, [sp, #72]	; 0x48
 8010ed4:	f7f1 fa62 	bl	800239c <__aeabi_i2d>
 8010ed8:	0032      	movs	r2, r6
 8010eda:	003b      	movs	r3, r7
 8010edc:	f7f0 fbc6 	bl	800166c <__aeabi_dmul>
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	4bc1      	ldr	r3, [pc, #772]	; (80111e8 <_dtoa_r+0x700>)
 8010ee4:	f7ef fc68 	bl	80007b8 <__aeabi_dadd>
 8010ee8:	4ac0      	ldr	r2, [pc, #768]	; (80111ec <_dtoa_r+0x704>)
 8010eea:	9014      	str	r0, [sp, #80]	; 0x50
 8010eec:	9115      	str	r1, [sp, #84]	; 0x54
 8010eee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010ef0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8010ef2:	4694      	mov	ip, r2
 8010ef4:	9308      	str	r3, [sp, #32]
 8010ef6:	9409      	str	r4, [sp, #36]	; 0x24
 8010ef8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010efa:	4463      	add	r3, ip
 8010efc:	9318      	str	r3, [sp, #96]	; 0x60
 8010efe:	9309      	str	r3, [sp, #36]	; 0x24
 8010f00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d15e      	bne.n	8010fc4 <_dtoa_r+0x4dc>
 8010f06:	2200      	movs	r2, #0
 8010f08:	4bb9      	ldr	r3, [pc, #740]	; (80111f0 <_dtoa_r+0x708>)
 8010f0a:	0030      	movs	r0, r6
 8010f0c:	0039      	movs	r1, r7
 8010f0e:	f7f0 fe6f 	bl	8001bf0 <__aeabi_dsub>
 8010f12:	9a08      	ldr	r2, [sp, #32]
 8010f14:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010f16:	0004      	movs	r4, r0
 8010f18:	000d      	movs	r5, r1
 8010f1a:	f7ef faaf 	bl	800047c <__aeabi_dcmpgt>
 8010f1e:	2800      	cmp	r0, #0
 8010f20:	d000      	beq.n	8010f24 <_dtoa_r+0x43c>
 8010f22:	e2b3      	b.n	801148c <_dtoa_r+0x9a4>
 8010f24:	48b3      	ldr	r0, [pc, #716]	; (80111f4 <_dtoa_r+0x70c>)
 8010f26:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010f28:	4684      	mov	ip, r0
 8010f2a:	4461      	add	r1, ip
 8010f2c:	000b      	movs	r3, r1
 8010f2e:	0020      	movs	r0, r4
 8010f30:	0029      	movs	r1, r5
 8010f32:	9a08      	ldr	r2, [sp, #32]
 8010f34:	f7ef fa8e 	bl	8000454 <__aeabi_dcmplt>
 8010f38:	2800      	cmp	r0, #0
 8010f3a:	d000      	beq.n	8010f3e <_dtoa_r+0x456>
 8010f3c:	e2a3      	b.n	8011486 <_dtoa_r+0x99e>
 8010f3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010f40:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8010f42:	9308      	str	r3, [sp, #32]
 8010f44:	9409      	str	r4, [sp, #36]	; 0x24
 8010f46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	da00      	bge.n	8010f4e <_dtoa_r+0x466>
 8010f4c:	e179      	b.n	8011242 <_dtoa_r+0x75a>
 8010f4e:	9a03      	ldr	r2, [sp, #12]
 8010f50:	2a0e      	cmp	r2, #14
 8010f52:	dd00      	ble.n	8010f56 <_dtoa_r+0x46e>
 8010f54:	e175      	b.n	8011242 <_dtoa_r+0x75a>
 8010f56:	4ba0      	ldr	r3, [pc, #640]	; (80111d8 <_dtoa_r+0x6f0>)
 8010f58:	00d2      	lsls	r2, r2, #3
 8010f5a:	189b      	adds	r3, r3, r2
 8010f5c:	681e      	ldr	r6, [r3, #0]
 8010f5e:	685f      	ldr	r7, [r3, #4]
 8010f60:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	db00      	blt.n	8010f68 <_dtoa_r+0x480>
 8010f66:	e0e5      	b.n	8011134 <_dtoa_r+0x64c>
 8010f68:	9b07      	ldr	r3, [sp, #28]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	dd00      	ble.n	8010f70 <_dtoa_r+0x488>
 8010f6e:	e0e1      	b.n	8011134 <_dtoa_r+0x64c>
 8010f70:	d000      	beq.n	8010f74 <_dtoa_r+0x48c>
 8010f72:	e288      	b.n	8011486 <_dtoa_r+0x99e>
 8010f74:	2200      	movs	r2, #0
 8010f76:	0030      	movs	r0, r6
 8010f78:	0039      	movs	r1, r7
 8010f7a:	4b9d      	ldr	r3, [pc, #628]	; (80111f0 <_dtoa_r+0x708>)
 8010f7c:	f7f0 fb76 	bl	800166c <__aeabi_dmul>
 8010f80:	9a08      	ldr	r2, [sp, #32]
 8010f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f84:	f7ef fa84 	bl	8000490 <__aeabi_dcmpge>
 8010f88:	9e07      	ldr	r6, [sp, #28]
 8010f8a:	0037      	movs	r7, r6
 8010f8c:	2800      	cmp	r0, #0
 8010f8e:	d000      	beq.n	8010f92 <_dtoa_r+0x4aa>
 8010f90:	e25f      	b.n	8011452 <_dtoa_r+0x96a>
 8010f92:	9b06      	ldr	r3, [sp, #24]
 8010f94:	9a06      	ldr	r2, [sp, #24]
 8010f96:	3301      	adds	r3, #1
 8010f98:	9308      	str	r3, [sp, #32]
 8010f9a:	2331      	movs	r3, #49	; 0x31
 8010f9c:	7013      	strb	r3, [r2, #0]
 8010f9e:	9b03      	ldr	r3, [sp, #12]
 8010fa0:	3301      	adds	r3, #1
 8010fa2:	9303      	str	r3, [sp, #12]
 8010fa4:	e25a      	b.n	801145c <_dtoa_r+0x974>
 8010fa6:	423d      	tst	r5, r7
 8010fa8:	d005      	beq.n	8010fb6 <_dtoa_r+0x4ce>
 8010faa:	6832      	ldr	r2, [r6, #0]
 8010fac:	6873      	ldr	r3, [r6, #4]
 8010fae:	f7f0 fb5d 	bl	800166c <__aeabi_dmul>
 8010fb2:	003b      	movs	r3, r7
 8010fb4:	3401      	adds	r4, #1
 8010fb6:	106d      	asrs	r5, r5, #1
 8010fb8:	3608      	adds	r6, #8
 8010fba:	e75f      	b.n	8010e7c <_dtoa_r+0x394>
 8010fbc:	9b03      	ldr	r3, [sp, #12]
 8010fbe:	930e      	str	r3, [sp, #56]	; 0x38
 8010fc0:	9b07      	ldr	r3, [sp, #28]
 8010fc2:	e783      	b.n	8010ecc <_dtoa_r+0x3e4>
 8010fc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010fc6:	4b84      	ldr	r3, [pc, #528]	; (80111d8 <_dtoa_r+0x6f0>)
 8010fc8:	3a01      	subs	r2, #1
 8010fca:	00d2      	lsls	r2, r2, #3
 8010fcc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010fce:	189b      	adds	r3, r3, r2
 8010fd0:	9c08      	ldr	r4, [sp, #32]
 8010fd2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010fd4:	681a      	ldr	r2, [r3, #0]
 8010fd6:	685b      	ldr	r3, [r3, #4]
 8010fd8:	2900      	cmp	r1, #0
 8010fda:	d051      	beq.n	8011080 <_dtoa_r+0x598>
 8010fdc:	2000      	movs	r0, #0
 8010fde:	4986      	ldr	r1, [pc, #536]	; (80111f8 <_dtoa_r+0x710>)
 8010fe0:	f7ef ff4a 	bl	8000e78 <__aeabi_ddiv>
 8010fe4:	0022      	movs	r2, r4
 8010fe6:	002b      	movs	r3, r5
 8010fe8:	f7f0 fe02 	bl	8001bf0 <__aeabi_dsub>
 8010fec:	9a06      	ldr	r2, [sp, #24]
 8010fee:	0004      	movs	r4, r0
 8010ff0:	4694      	mov	ip, r2
 8010ff2:	000d      	movs	r5, r1
 8010ff4:	9b06      	ldr	r3, [sp, #24]
 8010ff6:	9314      	str	r3, [sp, #80]	; 0x50
 8010ff8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010ffa:	4463      	add	r3, ip
 8010ffc:	9318      	str	r3, [sp, #96]	; 0x60
 8010ffe:	0039      	movs	r1, r7
 8011000:	0030      	movs	r0, r6
 8011002:	f7f1 f995 	bl	8002330 <__aeabi_d2iz>
 8011006:	9012      	str	r0, [sp, #72]	; 0x48
 8011008:	f7f1 f9c8 	bl	800239c <__aeabi_i2d>
 801100c:	0002      	movs	r2, r0
 801100e:	000b      	movs	r3, r1
 8011010:	0030      	movs	r0, r6
 8011012:	0039      	movs	r1, r7
 8011014:	f7f0 fdec 	bl	8001bf0 <__aeabi_dsub>
 8011018:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801101a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801101c:	3301      	adds	r3, #1
 801101e:	9308      	str	r3, [sp, #32]
 8011020:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011022:	0006      	movs	r6, r0
 8011024:	3330      	adds	r3, #48	; 0x30
 8011026:	7013      	strb	r3, [r2, #0]
 8011028:	0022      	movs	r2, r4
 801102a:	002b      	movs	r3, r5
 801102c:	000f      	movs	r7, r1
 801102e:	f7ef fa11 	bl	8000454 <__aeabi_dcmplt>
 8011032:	2800      	cmp	r0, #0
 8011034:	d174      	bne.n	8011120 <_dtoa_r+0x638>
 8011036:	0032      	movs	r2, r6
 8011038:	003b      	movs	r3, r7
 801103a:	2000      	movs	r0, #0
 801103c:	4968      	ldr	r1, [pc, #416]	; (80111e0 <_dtoa_r+0x6f8>)
 801103e:	f7f0 fdd7 	bl	8001bf0 <__aeabi_dsub>
 8011042:	0022      	movs	r2, r4
 8011044:	002b      	movs	r3, r5
 8011046:	f7ef fa05 	bl	8000454 <__aeabi_dcmplt>
 801104a:	2800      	cmp	r0, #0
 801104c:	d000      	beq.n	8011050 <_dtoa_r+0x568>
 801104e:	e0d7      	b.n	8011200 <_dtoa_r+0x718>
 8011050:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011052:	9a08      	ldr	r2, [sp, #32]
 8011054:	4293      	cmp	r3, r2
 8011056:	d100      	bne.n	801105a <_dtoa_r+0x572>
 8011058:	e771      	b.n	8010f3e <_dtoa_r+0x456>
 801105a:	2200      	movs	r2, #0
 801105c:	0020      	movs	r0, r4
 801105e:	0029      	movs	r1, r5
 8011060:	4b60      	ldr	r3, [pc, #384]	; (80111e4 <_dtoa_r+0x6fc>)
 8011062:	f7f0 fb03 	bl	800166c <__aeabi_dmul>
 8011066:	4b5f      	ldr	r3, [pc, #380]	; (80111e4 <_dtoa_r+0x6fc>)
 8011068:	0004      	movs	r4, r0
 801106a:	000d      	movs	r5, r1
 801106c:	0030      	movs	r0, r6
 801106e:	0039      	movs	r1, r7
 8011070:	2200      	movs	r2, #0
 8011072:	f7f0 fafb 	bl	800166c <__aeabi_dmul>
 8011076:	9b08      	ldr	r3, [sp, #32]
 8011078:	0006      	movs	r6, r0
 801107a:	000f      	movs	r7, r1
 801107c:	9314      	str	r3, [sp, #80]	; 0x50
 801107e:	e7be      	b.n	8010ffe <_dtoa_r+0x516>
 8011080:	0020      	movs	r0, r4
 8011082:	0029      	movs	r1, r5
 8011084:	f7f0 faf2 	bl	800166c <__aeabi_dmul>
 8011088:	9a06      	ldr	r2, [sp, #24]
 801108a:	9b06      	ldr	r3, [sp, #24]
 801108c:	4694      	mov	ip, r2
 801108e:	9308      	str	r3, [sp, #32]
 8011090:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011092:	9014      	str	r0, [sp, #80]	; 0x50
 8011094:	9115      	str	r1, [sp, #84]	; 0x54
 8011096:	4463      	add	r3, ip
 8011098:	9319      	str	r3, [sp, #100]	; 0x64
 801109a:	0030      	movs	r0, r6
 801109c:	0039      	movs	r1, r7
 801109e:	f7f1 f947 	bl	8002330 <__aeabi_d2iz>
 80110a2:	9018      	str	r0, [sp, #96]	; 0x60
 80110a4:	f7f1 f97a 	bl	800239c <__aeabi_i2d>
 80110a8:	0002      	movs	r2, r0
 80110aa:	000b      	movs	r3, r1
 80110ac:	0030      	movs	r0, r6
 80110ae:	0039      	movs	r1, r7
 80110b0:	f7f0 fd9e 	bl	8001bf0 <__aeabi_dsub>
 80110b4:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80110b6:	9b08      	ldr	r3, [sp, #32]
 80110b8:	3630      	adds	r6, #48	; 0x30
 80110ba:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80110bc:	701e      	strb	r6, [r3, #0]
 80110be:	3301      	adds	r3, #1
 80110c0:	0004      	movs	r4, r0
 80110c2:	000d      	movs	r5, r1
 80110c4:	9308      	str	r3, [sp, #32]
 80110c6:	4293      	cmp	r3, r2
 80110c8:	d12d      	bne.n	8011126 <_dtoa_r+0x63e>
 80110ca:	9814      	ldr	r0, [sp, #80]	; 0x50
 80110cc:	9915      	ldr	r1, [sp, #84]	; 0x54
 80110ce:	9a06      	ldr	r2, [sp, #24]
 80110d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80110d2:	4694      	mov	ip, r2
 80110d4:	4463      	add	r3, ip
 80110d6:	2200      	movs	r2, #0
 80110d8:	9308      	str	r3, [sp, #32]
 80110da:	4b47      	ldr	r3, [pc, #284]	; (80111f8 <_dtoa_r+0x710>)
 80110dc:	f7ef fb6c 	bl	80007b8 <__aeabi_dadd>
 80110e0:	0002      	movs	r2, r0
 80110e2:	000b      	movs	r3, r1
 80110e4:	0020      	movs	r0, r4
 80110e6:	0029      	movs	r1, r5
 80110e8:	f7ef f9c8 	bl	800047c <__aeabi_dcmpgt>
 80110ec:	2800      	cmp	r0, #0
 80110ee:	d000      	beq.n	80110f2 <_dtoa_r+0x60a>
 80110f0:	e086      	b.n	8011200 <_dtoa_r+0x718>
 80110f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80110f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80110f6:	2000      	movs	r0, #0
 80110f8:	493f      	ldr	r1, [pc, #252]	; (80111f8 <_dtoa_r+0x710>)
 80110fa:	f7f0 fd79 	bl	8001bf0 <__aeabi_dsub>
 80110fe:	0002      	movs	r2, r0
 8011100:	000b      	movs	r3, r1
 8011102:	0020      	movs	r0, r4
 8011104:	0029      	movs	r1, r5
 8011106:	f7ef f9a5 	bl	8000454 <__aeabi_dcmplt>
 801110a:	2800      	cmp	r0, #0
 801110c:	d100      	bne.n	8011110 <_dtoa_r+0x628>
 801110e:	e716      	b.n	8010f3e <_dtoa_r+0x456>
 8011110:	9b08      	ldr	r3, [sp, #32]
 8011112:	001a      	movs	r2, r3
 8011114:	3a01      	subs	r2, #1
 8011116:	9208      	str	r2, [sp, #32]
 8011118:	7812      	ldrb	r2, [r2, #0]
 801111a:	2a30      	cmp	r2, #48	; 0x30
 801111c:	d0f8      	beq.n	8011110 <_dtoa_r+0x628>
 801111e:	9308      	str	r3, [sp, #32]
 8011120:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011122:	9303      	str	r3, [sp, #12]
 8011124:	e046      	b.n	80111b4 <_dtoa_r+0x6cc>
 8011126:	2200      	movs	r2, #0
 8011128:	4b2e      	ldr	r3, [pc, #184]	; (80111e4 <_dtoa_r+0x6fc>)
 801112a:	f7f0 fa9f 	bl	800166c <__aeabi_dmul>
 801112e:	0006      	movs	r6, r0
 8011130:	000f      	movs	r7, r1
 8011132:	e7b2      	b.n	801109a <_dtoa_r+0x5b2>
 8011134:	9b06      	ldr	r3, [sp, #24]
 8011136:	9a06      	ldr	r2, [sp, #24]
 8011138:	930a      	str	r3, [sp, #40]	; 0x28
 801113a:	9b07      	ldr	r3, [sp, #28]
 801113c:	9c08      	ldr	r4, [sp, #32]
 801113e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011140:	3b01      	subs	r3, #1
 8011142:	189b      	adds	r3, r3, r2
 8011144:	930b      	str	r3, [sp, #44]	; 0x2c
 8011146:	0032      	movs	r2, r6
 8011148:	003b      	movs	r3, r7
 801114a:	0020      	movs	r0, r4
 801114c:	0029      	movs	r1, r5
 801114e:	f7ef fe93 	bl	8000e78 <__aeabi_ddiv>
 8011152:	f7f1 f8ed 	bl	8002330 <__aeabi_d2iz>
 8011156:	9007      	str	r0, [sp, #28]
 8011158:	f7f1 f920 	bl	800239c <__aeabi_i2d>
 801115c:	0032      	movs	r2, r6
 801115e:	003b      	movs	r3, r7
 8011160:	f7f0 fa84 	bl	800166c <__aeabi_dmul>
 8011164:	0002      	movs	r2, r0
 8011166:	000b      	movs	r3, r1
 8011168:	0020      	movs	r0, r4
 801116a:	0029      	movs	r1, r5
 801116c:	f7f0 fd40 	bl	8001bf0 <__aeabi_dsub>
 8011170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011172:	001a      	movs	r2, r3
 8011174:	3201      	adds	r2, #1
 8011176:	920a      	str	r2, [sp, #40]	; 0x28
 8011178:	9208      	str	r2, [sp, #32]
 801117a:	9a07      	ldr	r2, [sp, #28]
 801117c:	3230      	adds	r2, #48	; 0x30
 801117e:	701a      	strb	r2, [r3, #0]
 8011180:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011182:	429a      	cmp	r2, r3
 8011184:	d14f      	bne.n	8011226 <_dtoa_r+0x73e>
 8011186:	0002      	movs	r2, r0
 8011188:	000b      	movs	r3, r1
 801118a:	f7ef fb15 	bl	80007b8 <__aeabi_dadd>
 801118e:	0032      	movs	r2, r6
 8011190:	003b      	movs	r3, r7
 8011192:	0004      	movs	r4, r0
 8011194:	000d      	movs	r5, r1
 8011196:	f7ef f971 	bl	800047c <__aeabi_dcmpgt>
 801119a:	2800      	cmp	r0, #0
 801119c:	d12e      	bne.n	80111fc <_dtoa_r+0x714>
 801119e:	0032      	movs	r2, r6
 80111a0:	003b      	movs	r3, r7
 80111a2:	0020      	movs	r0, r4
 80111a4:	0029      	movs	r1, r5
 80111a6:	f7ef f94f 	bl	8000448 <__aeabi_dcmpeq>
 80111aa:	2800      	cmp	r0, #0
 80111ac:	d002      	beq.n	80111b4 <_dtoa_r+0x6cc>
 80111ae:	9b07      	ldr	r3, [sp, #28]
 80111b0:	07de      	lsls	r6, r3, #31
 80111b2:	d423      	bmi.n	80111fc <_dtoa_r+0x714>
 80111b4:	9905      	ldr	r1, [sp, #20]
 80111b6:	9804      	ldr	r0, [sp, #16]
 80111b8:	f7fc f8fe 	bl	800d3b8 <_Bfree>
 80111bc:	2300      	movs	r3, #0
 80111be:	9a08      	ldr	r2, [sp, #32]
 80111c0:	7013      	strb	r3, [r2, #0]
 80111c2:	9b03      	ldr	r3, [sp, #12]
 80111c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80111c6:	3301      	adds	r3, #1
 80111c8:	6013      	str	r3, [r2, #0]
 80111ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d100      	bne.n	80111d2 <_dtoa_r+0x6ea>
 80111d0:	e4bd      	b.n	8010b4e <_dtoa_r+0x66>
 80111d2:	9a08      	ldr	r2, [sp, #32]
 80111d4:	601a      	str	r2, [r3, #0]
 80111d6:	e4ba      	b.n	8010b4e <_dtoa_r+0x66>
 80111d8:	080150d0 	.word	0x080150d0
 80111dc:	080150a8 	.word	0x080150a8
 80111e0:	3ff00000 	.word	0x3ff00000
 80111e4:	40240000 	.word	0x40240000
 80111e8:	401c0000 	.word	0x401c0000
 80111ec:	fcc00000 	.word	0xfcc00000
 80111f0:	40140000 	.word	0x40140000
 80111f4:	7cc00000 	.word	0x7cc00000
 80111f8:	3fe00000 	.word	0x3fe00000
 80111fc:	9b03      	ldr	r3, [sp, #12]
 80111fe:	930e      	str	r3, [sp, #56]	; 0x38
 8011200:	9b08      	ldr	r3, [sp, #32]
 8011202:	9308      	str	r3, [sp, #32]
 8011204:	3b01      	subs	r3, #1
 8011206:	781a      	ldrb	r2, [r3, #0]
 8011208:	2a39      	cmp	r2, #57	; 0x39
 801120a:	d108      	bne.n	801121e <_dtoa_r+0x736>
 801120c:	9a06      	ldr	r2, [sp, #24]
 801120e:	429a      	cmp	r2, r3
 8011210:	d1f7      	bne.n	8011202 <_dtoa_r+0x71a>
 8011212:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011214:	9906      	ldr	r1, [sp, #24]
 8011216:	3201      	adds	r2, #1
 8011218:	920e      	str	r2, [sp, #56]	; 0x38
 801121a:	2230      	movs	r2, #48	; 0x30
 801121c:	700a      	strb	r2, [r1, #0]
 801121e:	781a      	ldrb	r2, [r3, #0]
 8011220:	3201      	adds	r2, #1
 8011222:	701a      	strb	r2, [r3, #0]
 8011224:	e77c      	b.n	8011120 <_dtoa_r+0x638>
 8011226:	2200      	movs	r2, #0
 8011228:	4ba9      	ldr	r3, [pc, #676]	; (80114d0 <_dtoa_r+0x9e8>)
 801122a:	f7f0 fa1f 	bl	800166c <__aeabi_dmul>
 801122e:	2200      	movs	r2, #0
 8011230:	2300      	movs	r3, #0
 8011232:	0004      	movs	r4, r0
 8011234:	000d      	movs	r5, r1
 8011236:	f7ef f907 	bl	8000448 <__aeabi_dcmpeq>
 801123a:	2800      	cmp	r0, #0
 801123c:	d100      	bne.n	8011240 <_dtoa_r+0x758>
 801123e:	e782      	b.n	8011146 <_dtoa_r+0x65e>
 8011240:	e7b8      	b.n	80111b4 <_dtoa_r+0x6cc>
 8011242:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8011244:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8011246:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011248:	2f00      	cmp	r7, #0
 801124a:	d012      	beq.n	8011272 <_dtoa_r+0x78a>
 801124c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801124e:	2a01      	cmp	r2, #1
 8011250:	dc6e      	bgt.n	8011330 <_dtoa_r+0x848>
 8011252:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011254:	2a00      	cmp	r2, #0
 8011256:	d065      	beq.n	8011324 <_dtoa_r+0x83c>
 8011258:	4a9e      	ldr	r2, [pc, #632]	; (80114d4 <_dtoa_r+0x9ec>)
 801125a:	189b      	adds	r3, r3, r2
 801125c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801125e:	2101      	movs	r1, #1
 8011260:	18d2      	adds	r2, r2, r3
 8011262:	920a      	str	r2, [sp, #40]	; 0x28
 8011264:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011266:	9804      	ldr	r0, [sp, #16]
 8011268:	18d3      	adds	r3, r2, r3
 801126a:	930c      	str	r3, [sp, #48]	; 0x30
 801126c:	f7fc f986 	bl	800d57c <__i2b>
 8011270:	0007      	movs	r7, r0
 8011272:	2c00      	cmp	r4, #0
 8011274:	d00e      	beq.n	8011294 <_dtoa_r+0x7ac>
 8011276:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011278:	2b00      	cmp	r3, #0
 801127a:	dd0b      	ble.n	8011294 <_dtoa_r+0x7ac>
 801127c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801127e:	0023      	movs	r3, r4
 8011280:	4294      	cmp	r4, r2
 8011282:	dd00      	ble.n	8011286 <_dtoa_r+0x79e>
 8011284:	0013      	movs	r3, r2
 8011286:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011288:	1ae4      	subs	r4, r4, r3
 801128a:	1ad2      	subs	r2, r2, r3
 801128c:	920a      	str	r2, [sp, #40]	; 0x28
 801128e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011290:	1ad3      	subs	r3, r2, r3
 8011292:	930c      	str	r3, [sp, #48]	; 0x30
 8011294:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011296:	2b00      	cmp	r3, #0
 8011298:	d01e      	beq.n	80112d8 <_dtoa_r+0x7f0>
 801129a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801129c:	2b00      	cmp	r3, #0
 801129e:	d05c      	beq.n	801135a <_dtoa_r+0x872>
 80112a0:	2d00      	cmp	r5, #0
 80112a2:	dd10      	ble.n	80112c6 <_dtoa_r+0x7de>
 80112a4:	0039      	movs	r1, r7
 80112a6:	002a      	movs	r2, r5
 80112a8:	9804      	ldr	r0, [sp, #16]
 80112aa:	f7fc fa2f 	bl	800d70c <__pow5mult>
 80112ae:	9a05      	ldr	r2, [sp, #20]
 80112b0:	0001      	movs	r1, r0
 80112b2:	0007      	movs	r7, r0
 80112b4:	9804      	ldr	r0, [sp, #16]
 80112b6:	f7fc f979 	bl	800d5ac <__multiply>
 80112ba:	0006      	movs	r6, r0
 80112bc:	9905      	ldr	r1, [sp, #20]
 80112be:	9804      	ldr	r0, [sp, #16]
 80112c0:	f7fc f87a 	bl	800d3b8 <_Bfree>
 80112c4:	9605      	str	r6, [sp, #20]
 80112c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80112c8:	1b5a      	subs	r2, r3, r5
 80112ca:	42ab      	cmp	r3, r5
 80112cc:	d004      	beq.n	80112d8 <_dtoa_r+0x7f0>
 80112ce:	9905      	ldr	r1, [sp, #20]
 80112d0:	9804      	ldr	r0, [sp, #16]
 80112d2:	f7fc fa1b 	bl	800d70c <__pow5mult>
 80112d6:	9005      	str	r0, [sp, #20]
 80112d8:	2101      	movs	r1, #1
 80112da:	9804      	ldr	r0, [sp, #16]
 80112dc:	f7fc f94e 	bl	800d57c <__i2b>
 80112e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80112e2:	0006      	movs	r6, r0
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	dd3a      	ble.n	801135e <_dtoa_r+0x876>
 80112e8:	001a      	movs	r2, r3
 80112ea:	0001      	movs	r1, r0
 80112ec:	9804      	ldr	r0, [sp, #16]
 80112ee:	f7fc fa0d 	bl	800d70c <__pow5mult>
 80112f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80112f4:	0006      	movs	r6, r0
 80112f6:	2500      	movs	r5, #0
 80112f8:	2b01      	cmp	r3, #1
 80112fa:	dc38      	bgt.n	801136e <_dtoa_r+0x886>
 80112fc:	2500      	movs	r5, #0
 80112fe:	9b08      	ldr	r3, [sp, #32]
 8011300:	42ab      	cmp	r3, r5
 8011302:	d130      	bne.n	8011366 <_dtoa_r+0x87e>
 8011304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011306:	031b      	lsls	r3, r3, #12
 8011308:	42ab      	cmp	r3, r5
 801130a:	d12c      	bne.n	8011366 <_dtoa_r+0x87e>
 801130c:	4b72      	ldr	r3, [pc, #456]	; (80114d8 <_dtoa_r+0x9f0>)
 801130e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011310:	4213      	tst	r3, r2
 8011312:	d028      	beq.n	8011366 <_dtoa_r+0x87e>
 8011314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011316:	3501      	adds	r5, #1
 8011318:	3301      	adds	r3, #1
 801131a:	930a      	str	r3, [sp, #40]	; 0x28
 801131c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801131e:	3301      	adds	r3, #1
 8011320:	930c      	str	r3, [sp, #48]	; 0x30
 8011322:	e020      	b.n	8011366 <_dtoa_r+0x87e>
 8011324:	2336      	movs	r3, #54	; 0x36
 8011326:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011328:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801132a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801132c:	1a9b      	subs	r3, r3, r2
 801132e:	e795      	b.n	801125c <_dtoa_r+0x774>
 8011330:	9b07      	ldr	r3, [sp, #28]
 8011332:	1e5d      	subs	r5, r3, #1
 8011334:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011336:	42ab      	cmp	r3, r5
 8011338:	db07      	blt.n	801134a <_dtoa_r+0x862>
 801133a:	1b5d      	subs	r5, r3, r5
 801133c:	9b07      	ldr	r3, [sp, #28]
 801133e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011340:	2b00      	cmp	r3, #0
 8011342:	da8b      	bge.n	801125c <_dtoa_r+0x774>
 8011344:	1ae4      	subs	r4, r4, r3
 8011346:	2300      	movs	r3, #0
 8011348:	e788      	b.n	801125c <_dtoa_r+0x774>
 801134a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801134c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801134e:	1aeb      	subs	r3, r5, r3
 8011350:	18d3      	adds	r3, r2, r3
 8011352:	950d      	str	r5, [sp, #52]	; 0x34
 8011354:	9313      	str	r3, [sp, #76]	; 0x4c
 8011356:	2500      	movs	r5, #0
 8011358:	e7f0      	b.n	801133c <_dtoa_r+0x854>
 801135a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801135c:	e7b7      	b.n	80112ce <_dtoa_r+0x7e6>
 801135e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011360:	2500      	movs	r5, #0
 8011362:	2b01      	cmp	r3, #1
 8011364:	ddca      	ble.n	80112fc <_dtoa_r+0x814>
 8011366:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011368:	2001      	movs	r0, #1
 801136a:	2b00      	cmp	r3, #0
 801136c:	d008      	beq.n	8011380 <_dtoa_r+0x898>
 801136e:	6933      	ldr	r3, [r6, #16]
 8011370:	3303      	adds	r3, #3
 8011372:	009b      	lsls	r3, r3, #2
 8011374:	18f3      	adds	r3, r6, r3
 8011376:	6858      	ldr	r0, [r3, #4]
 8011378:	f7fc f8b8 	bl	800d4ec <__hi0bits>
 801137c:	2320      	movs	r3, #32
 801137e:	1a18      	subs	r0, r3, r0
 8011380:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011382:	1818      	adds	r0, r3, r0
 8011384:	0002      	movs	r2, r0
 8011386:	231f      	movs	r3, #31
 8011388:	401a      	ands	r2, r3
 801138a:	4218      	tst	r0, r3
 801138c:	d047      	beq.n	801141e <_dtoa_r+0x936>
 801138e:	3301      	adds	r3, #1
 8011390:	1a9b      	subs	r3, r3, r2
 8011392:	2b04      	cmp	r3, #4
 8011394:	dd3f      	ble.n	8011416 <_dtoa_r+0x92e>
 8011396:	231c      	movs	r3, #28
 8011398:	1a9b      	subs	r3, r3, r2
 801139a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801139c:	18e4      	adds	r4, r4, r3
 801139e:	18d2      	adds	r2, r2, r3
 80113a0:	920a      	str	r2, [sp, #40]	; 0x28
 80113a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80113a4:	18d3      	adds	r3, r2, r3
 80113a6:	930c      	str	r3, [sp, #48]	; 0x30
 80113a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	dd05      	ble.n	80113ba <_dtoa_r+0x8d2>
 80113ae:	001a      	movs	r2, r3
 80113b0:	9905      	ldr	r1, [sp, #20]
 80113b2:	9804      	ldr	r0, [sp, #16]
 80113b4:	f7fc f9ec 	bl	800d790 <__lshift>
 80113b8:	9005      	str	r0, [sp, #20]
 80113ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80113bc:	2b00      	cmp	r3, #0
 80113be:	dd05      	ble.n	80113cc <_dtoa_r+0x8e4>
 80113c0:	0031      	movs	r1, r6
 80113c2:	001a      	movs	r2, r3
 80113c4:	9804      	ldr	r0, [sp, #16]
 80113c6:	f7fc f9e3 	bl	800d790 <__lshift>
 80113ca:	0006      	movs	r6, r0
 80113cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d027      	beq.n	8011422 <_dtoa_r+0x93a>
 80113d2:	0031      	movs	r1, r6
 80113d4:	9805      	ldr	r0, [sp, #20]
 80113d6:	f7fc fa49 	bl	800d86c <__mcmp>
 80113da:	2800      	cmp	r0, #0
 80113dc:	da21      	bge.n	8011422 <_dtoa_r+0x93a>
 80113de:	9b03      	ldr	r3, [sp, #12]
 80113e0:	220a      	movs	r2, #10
 80113e2:	3b01      	subs	r3, #1
 80113e4:	9303      	str	r3, [sp, #12]
 80113e6:	9905      	ldr	r1, [sp, #20]
 80113e8:	2300      	movs	r3, #0
 80113ea:	9804      	ldr	r0, [sp, #16]
 80113ec:	f7fb ffee 	bl	800d3cc <__multadd>
 80113f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80113f2:	9005      	str	r0, [sp, #20]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d100      	bne.n	80113fa <_dtoa_r+0x912>
 80113f8:	e15d      	b.n	80116b6 <_dtoa_r+0xbce>
 80113fa:	2300      	movs	r3, #0
 80113fc:	0039      	movs	r1, r7
 80113fe:	220a      	movs	r2, #10
 8011400:	9804      	ldr	r0, [sp, #16]
 8011402:	f7fb ffe3 	bl	800d3cc <__multadd>
 8011406:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011408:	0007      	movs	r7, r0
 801140a:	2b00      	cmp	r3, #0
 801140c:	dc49      	bgt.n	80114a2 <_dtoa_r+0x9ba>
 801140e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011410:	2b02      	cmp	r3, #2
 8011412:	dc0e      	bgt.n	8011432 <_dtoa_r+0x94a>
 8011414:	e045      	b.n	80114a2 <_dtoa_r+0x9ba>
 8011416:	2b04      	cmp	r3, #4
 8011418:	d0c6      	beq.n	80113a8 <_dtoa_r+0x8c0>
 801141a:	331c      	adds	r3, #28
 801141c:	e7bd      	b.n	801139a <_dtoa_r+0x8b2>
 801141e:	0013      	movs	r3, r2
 8011420:	e7fb      	b.n	801141a <_dtoa_r+0x932>
 8011422:	9b07      	ldr	r3, [sp, #28]
 8011424:	2b00      	cmp	r3, #0
 8011426:	dc36      	bgt.n	8011496 <_dtoa_r+0x9ae>
 8011428:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801142a:	2b02      	cmp	r3, #2
 801142c:	dd33      	ble.n	8011496 <_dtoa_r+0x9ae>
 801142e:	9b07      	ldr	r3, [sp, #28]
 8011430:	930b      	str	r3, [sp, #44]	; 0x2c
 8011432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011434:	2b00      	cmp	r3, #0
 8011436:	d10c      	bne.n	8011452 <_dtoa_r+0x96a>
 8011438:	0031      	movs	r1, r6
 801143a:	2205      	movs	r2, #5
 801143c:	9804      	ldr	r0, [sp, #16]
 801143e:	f7fb ffc5 	bl	800d3cc <__multadd>
 8011442:	0006      	movs	r6, r0
 8011444:	0001      	movs	r1, r0
 8011446:	9805      	ldr	r0, [sp, #20]
 8011448:	f7fc fa10 	bl	800d86c <__mcmp>
 801144c:	2800      	cmp	r0, #0
 801144e:	dd00      	ble.n	8011452 <_dtoa_r+0x96a>
 8011450:	e59f      	b.n	8010f92 <_dtoa_r+0x4aa>
 8011452:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011454:	43db      	mvns	r3, r3
 8011456:	9303      	str	r3, [sp, #12]
 8011458:	9b06      	ldr	r3, [sp, #24]
 801145a:	9308      	str	r3, [sp, #32]
 801145c:	2500      	movs	r5, #0
 801145e:	0031      	movs	r1, r6
 8011460:	9804      	ldr	r0, [sp, #16]
 8011462:	f7fb ffa9 	bl	800d3b8 <_Bfree>
 8011466:	2f00      	cmp	r7, #0
 8011468:	d100      	bne.n	801146c <_dtoa_r+0x984>
 801146a:	e6a3      	b.n	80111b4 <_dtoa_r+0x6cc>
 801146c:	2d00      	cmp	r5, #0
 801146e:	d005      	beq.n	801147c <_dtoa_r+0x994>
 8011470:	42bd      	cmp	r5, r7
 8011472:	d003      	beq.n	801147c <_dtoa_r+0x994>
 8011474:	0029      	movs	r1, r5
 8011476:	9804      	ldr	r0, [sp, #16]
 8011478:	f7fb ff9e 	bl	800d3b8 <_Bfree>
 801147c:	0039      	movs	r1, r7
 801147e:	9804      	ldr	r0, [sp, #16]
 8011480:	f7fb ff9a 	bl	800d3b8 <_Bfree>
 8011484:	e696      	b.n	80111b4 <_dtoa_r+0x6cc>
 8011486:	2600      	movs	r6, #0
 8011488:	0037      	movs	r7, r6
 801148a:	e7e2      	b.n	8011452 <_dtoa_r+0x96a>
 801148c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801148e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8011490:	9303      	str	r3, [sp, #12]
 8011492:	0037      	movs	r7, r6
 8011494:	e57d      	b.n	8010f92 <_dtoa_r+0x4aa>
 8011496:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011498:	2b00      	cmp	r3, #0
 801149a:	d100      	bne.n	801149e <_dtoa_r+0x9b6>
 801149c:	e0c3      	b.n	8011626 <_dtoa_r+0xb3e>
 801149e:	9b07      	ldr	r3, [sp, #28]
 80114a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80114a2:	2c00      	cmp	r4, #0
 80114a4:	dd05      	ble.n	80114b2 <_dtoa_r+0x9ca>
 80114a6:	0039      	movs	r1, r7
 80114a8:	0022      	movs	r2, r4
 80114aa:	9804      	ldr	r0, [sp, #16]
 80114ac:	f7fc f970 	bl	800d790 <__lshift>
 80114b0:	0007      	movs	r7, r0
 80114b2:	0038      	movs	r0, r7
 80114b4:	2d00      	cmp	r5, #0
 80114b6:	d024      	beq.n	8011502 <_dtoa_r+0xa1a>
 80114b8:	6879      	ldr	r1, [r7, #4]
 80114ba:	9804      	ldr	r0, [sp, #16]
 80114bc:	f7fb ff54 	bl	800d368 <_Balloc>
 80114c0:	1e04      	subs	r4, r0, #0
 80114c2:	d111      	bne.n	80114e8 <_dtoa_r+0xa00>
 80114c4:	0022      	movs	r2, r4
 80114c6:	4b05      	ldr	r3, [pc, #20]	; (80114dc <_dtoa_r+0x9f4>)
 80114c8:	4805      	ldr	r0, [pc, #20]	; (80114e0 <_dtoa_r+0x9f8>)
 80114ca:	4906      	ldr	r1, [pc, #24]	; (80114e4 <_dtoa_r+0x9fc>)
 80114cc:	e43c      	b.n	8010d48 <_dtoa_r+0x260>
 80114ce:	46c0      	nop			; (mov r8, r8)
 80114d0:	40240000 	.word	0x40240000
 80114d4:	00000433 	.word	0x00000433
 80114d8:	7ff00000 	.word	0x7ff00000
 80114dc:	08014fd9 	.word	0x08014fd9
 80114e0:	08015269 	.word	0x08015269
 80114e4:	000002ef 	.word	0x000002ef
 80114e8:	0039      	movs	r1, r7
 80114ea:	693a      	ldr	r2, [r7, #16]
 80114ec:	310c      	adds	r1, #12
 80114ee:	3202      	adds	r2, #2
 80114f0:	0092      	lsls	r2, r2, #2
 80114f2:	300c      	adds	r0, #12
 80114f4:	f7fb fa9d 	bl	800ca32 <memcpy>
 80114f8:	2201      	movs	r2, #1
 80114fa:	0021      	movs	r1, r4
 80114fc:	9804      	ldr	r0, [sp, #16]
 80114fe:	f7fc f947 	bl	800d790 <__lshift>
 8011502:	9b06      	ldr	r3, [sp, #24]
 8011504:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011506:	9307      	str	r3, [sp, #28]
 8011508:	3b01      	subs	r3, #1
 801150a:	189b      	adds	r3, r3, r2
 801150c:	2201      	movs	r2, #1
 801150e:	003d      	movs	r5, r7
 8011510:	0007      	movs	r7, r0
 8011512:	930e      	str	r3, [sp, #56]	; 0x38
 8011514:	9b08      	ldr	r3, [sp, #32]
 8011516:	4013      	ands	r3, r2
 8011518:	930d      	str	r3, [sp, #52]	; 0x34
 801151a:	0031      	movs	r1, r6
 801151c:	9805      	ldr	r0, [sp, #20]
 801151e:	f7ff fa53 	bl	80109c8 <quorem>
 8011522:	0029      	movs	r1, r5
 8011524:	0004      	movs	r4, r0
 8011526:	900b      	str	r0, [sp, #44]	; 0x2c
 8011528:	9805      	ldr	r0, [sp, #20]
 801152a:	f7fc f99f 	bl	800d86c <__mcmp>
 801152e:	003a      	movs	r2, r7
 8011530:	900c      	str	r0, [sp, #48]	; 0x30
 8011532:	0031      	movs	r1, r6
 8011534:	9804      	ldr	r0, [sp, #16]
 8011536:	f7fc f9b5 	bl	800d8a4 <__mdiff>
 801153a:	2201      	movs	r2, #1
 801153c:	68c3      	ldr	r3, [r0, #12]
 801153e:	3430      	adds	r4, #48	; 0x30
 8011540:	9008      	str	r0, [sp, #32]
 8011542:	920a      	str	r2, [sp, #40]	; 0x28
 8011544:	2b00      	cmp	r3, #0
 8011546:	d104      	bne.n	8011552 <_dtoa_r+0xa6a>
 8011548:	0001      	movs	r1, r0
 801154a:	9805      	ldr	r0, [sp, #20]
 801154c:	f7fc f98e 	bl	800d86c <__mcmp>
 8011550:	900a      	str	r0, [sp, #40]	; 0x28
 8011552:	9908      	ldr	r1, [sp, #32]
 8011554:	9804      	ldr	r0, [sp, #16]
 8011556:	f7fb ff2f 	bl	800d3b8 <_Bfree>
 801155a:	9b07      	ldr	r3, [sp, #28]
 801155c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801155e:	3301      	adds	r3, #1
 8011560:	9308      	str	r3, [sp, #32]
 8011562:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011564:	4313      	orrs	r3, r2
 8011566:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011568:	4313      	orrs	r3, r2
 801156a:	d109      	bne.n	8011580 <_dtoa_r+0xa98>
 801156c:	2c39      	cmp	r4, #57	; 0x39
 801156e:	d022      	beq.n	80115b6 <_dtoa_r+0xace>
 8011570:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011572:	2b00      	cmp	r3, #0
 8011574:	dd01      	ble.n	801157a <_dtoa_r+0xa92>
 8011576:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8011578:	3431      	adds	r4, #49	; 0x31
 801157a:	9b07      	ldr	r3, [sp, #28]
 801157c:	701c      	strb	r4, [r3, #0]
 801157e:	e76e      	b.n	801145e <_dtoa_r+0x976>
 8011580:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011582:	2b00      	cmp	r3, #0
 8011584:	db04      	blt.n	8011590 <_dtoa_r+0xaa8>
 8011586:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8011588:	4313      	orrs	r3, r2
 801158a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801158c:	4313      	orrs	r3, r2
 801158e:	d11e      	bne.n	80115ce <_dtoa_r+0xae6>
 8011590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011592:	2b00      	cmp	r3, #0
 8011594:	ddf1      	ble.n	801157a <_dtoa_r+0xa92>
 8011596:	9905      	ldr	r1, [sp, #20]
 8011598:	2201      	movs	r2, #1
 801159a:	9804      	ldr	r0, [sp, #16]
 801159c:	f7fc f8f8 	bl	800d790 <__lshift>
 80115a0:	0031      	movs	r1, r6
 80115a2:	9005      	str	r0, [sp, #20]
 80115a4:	f7fc f962 	bl	800d86c <__mcmp>
 80115a8:	2800      	cmp	r0, #0
 80115aa:	dc02      	bgt.n	80115b2 <_dtoa_r+0xaca>
 80115ac:	d1e5      	bne.n	801157a <_dtoa_r+0xa92>
 80115ae:	07e3      	lsls	r3, r4, #31
 80115b0:	d5e3      	bpl.n	801157a <_dtoa_r+0xa92>
 80115b2:	2c39      	cmp	r4, #57	; 0x39
 80115b4:	d1df      	bne.n	8011576 <_dtoa_r+0xa8e>
 80115b6:	2339      	movs	r3, #57	; 0x39
 80115b8:	9a07      	ldr	r2, [sp, #28]
 80115ba:	7013      	strb	r3, [r2, #0]
 80115bc:	9b08      	ldr	r3, [sp, #32]
 80115be:	9308      	str	r3, [sp, #32]
 80115c0:	3b01      	subs	r3, #1
 80115c2:	781a      	ldrb	r2, [r3, #0]
 80115c4:	2a39      	cmp	r2, #57	; 0x39
 80115c6:	d063      	beq.n	8011690 <_dtoa_r+0xba8>
 80115c8:	3201      	adds	r2, #1
 80115ca:	701a      	strb	r2, [r3, #0]
 80115cc:	e747      	b.n	801145e <_dtoa_r+0x976>
 80115ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	dd03      	ble.n	80115dc <_dtoa_r+0xaf4>
 80115d4:	2c39      	cmp	r4, #57	; 0x39
 80115d6:	d0ee      	beq.n	80115b6 <_dtoa_r+0xace>
 80115d8:	3401      	adds	r4, #1
 80115da:	e7ce      	b.n	801157a <_dtoa_r+0xa92>
 80115dc:	9b07      	ldr	r3, [sp, #28]
 80115de:	9a07      	ldr	r2, [sp, #28]
 80115e0:	701c      	strb	r4, [r3, #0]
 80115e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80115e4:	4293      	cmp	r3, r2
 80115e6:	d03e      	beq.n	8011666 <_dtoa_r+0xb7e>
 80115e8:	2300      	movs	r3, #0
 80115ea:	220a      	movs	r2, #10
 80115ec:	9905      	ldr	r1, [sp, #20]
 80115ee:	9804      	ldr	r0, [sp, #16]
 80115f0:	f7fb feec 	bl	800d3cc <__multadd>
 80115f4:	2300      	movs	r3, #0
 80115f6:	9005      	str	r0, [sp, #20]
 80115f8:	220a      	movs	r2, #10
 80115fa:	0029      	movs	r1, r5
 80115fc:	9804      	ldr	r0, [sp, #16]
 80115fe:	42bd      	cmp	r5, r7
 8011600:	d106      	bne.n	8011610 <_dtoa_r+0xb28>
 8011602:	f7fb fee3 	bl	800d3cc <__multadd>
 8011606:	0005      	movs	r5, r0
 8011608:	0007      	movs	r7, r0
 801160a:	9b08      	ldr	r3, [sp, #32]
 801160c:	9307      	str	r3, [sp, #28]
 801160e:	e784      	b.n	801151a <_dtoa_r+0xa32>
 8011610:	f7fb fedc 	bl	800d3cc <__multadd>
 8011614:	0039      	movs	r1, r7
 8011616:	0005      	movs	r5, r0
 8011618:	2300      	movs	r3, #0
 801161a:	220a      	movs	r2, #10
 801161c:	9804      	ldr	r0, [sp, #16]
 801161e:	f7fb fed5 	bl	800d3cc <__multadd>
 8011622:	0007      	movs	r7, r0
 8011624:	e7f1      	b.n	801160a <_dtoa_r+0xb22>
 8011626:	9b07      	ldr	r3, [sp, #28]
 8011628:	930b      	str	r3, [sp, #44]	; 0x2c
 801162a:	2500      	movs	r5, #0
 801162c:	0031      	movs	r1, r6
 801162e:	9805      	ldr	r0, [sp, #20]
 8011630:	f7ff f9ca 	bl	80109c8 <quorem>
 8011634:	9b06      	ldr	r3, [sp, #24]
 8011636:	3030      	adds	r0, #48	; 0x30
 8011638:	5558      	strb	r0, [r3, r5]
 801163a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801163c:	3501      	adds	r5, #1
 801163e:	0004      	movs	r4, r0
 8011640:	42ab      	cmp	r3, r5
 8011642:	dd07      	ble.n	8011654 <_dtoa_r+0xb6c>
 8011644:	2300      	movs	r3, #0
 8011646:	220a      	movs	r2, #10
 8011648:	9905      	ldr	r1, [sp, #20]
 801164a:	9804      	ldr	r0, [sp, #16]
 801164c:	f7fb febe 	bl	800d3cc <__multadd>
 8011650:	9005      	str	r0, [sp, #20]
 8011652:	e7eb      	b.n	801162c <_dtoa_r+0xb44>
 8011654:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011656:	2301      	movs	r3, #1
 8011658:	2a00      	cmp	r2, #0
 801165a:	dd00      	ble.n	801165e <_dtoa_r+0xb76>
 801165c:	0013      	movs	r3, r2
 801165e:	2500      	movs	r5, #0
 8011660:	9a06      	ldr	r2, [sp, #24]
 8011662:	18d3      	adds	r3, r2, r3
 8011664:	9308      	str	r3, [sp, #32]
 8011666:	9905      	ldr	r1, [sp, #20]
 8011668:	2201      	movs	r2, #1
 801166a:	9804      	ldr	r0, [sp, #16]
 801166c:	f7fc f890 	bl	800d790 <__lshift>
 8011670:	0031      	movs	r1, r6
 8011672:	9005      	str	r0, [sp, #20]
 8011674:	f7fc f8fa 	bl	800d86c <__mcmp>
 8011678:	2800      	cmp	r0, #0
 801167a:	dc9f      	bgt.n	80115bc <_dtoa_r+0xad4>
 801167c:	d101      	bne.n	8011682 <_dtoa_r+0xb9a>
 801167e:	07e4      	lsls	r4, r4, #31
 8011680:	d49c      	bmi.n	80115bc <_dtoa_r+0xad4>
 8011682:	9b08      	ldr	r3, [sp, #32]
 8011684:	9308      	str	r3, [sp, #32]
 8011686:	3b01      	subs	r3, #1
 8011688:	781a      	ldrb	r2, [r3, #0]
 801168a:	2a30      	cmp	r2, #48	; 0x30
 801168c:	d0fa      	beq.n	8011684 <_dtoa_r+0xb9c>
 801168e:	e6e6      	b.n	801145e <_dtoa_r+0x976>
 8011690:	9a06      	ldr	r2, [sp, #24]
 8011692:	429a      	cmp	r2, r3
 8011694:	d193      	bne.n	80115be <_dtoa_r+0xad6>
 8011696:	9b03      	ldr	r3, [sp, #12]
 8011698:	3301      	adds	r3, #1
 801169a:	9303      	str	r3, [sp, #12]
 801169c:	2331      	movs	r3, #49	; 0x31
 801169e:	7013      	strb	r3, [r2, #0]
 80116a0:	e6dd      	b.n	801145e <_dtoa_r+0x976>
 80116a2:	4b09      	ldr	r3, [pc, #36]	; (80116c8 <_dtoa_r+0xbe0>)
 80116a4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80116a6:	9306      	str	r3, [sp, #24]
 80116a8:	4b08      	ldr	r3, [pc, #32]	; (80116cc <_dtoa_r+0xbe4>)
 80116aa:	2a00      	cmp	r2, #0
 80116ac:	d001      	beq.n	80116b2 <_dtoa_r+0xbca>
 80116ae:	f7ff fa4c 	bl	8010b4a <_dtoa_r+0x62>
 80116b2:	f7ff fa4c 	bl	8010b4e <_dtoa_r+0x66>
 80116b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	dcb6      	bgt.n	801162a <_dtoa_r+0xb42>
 80116bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80116be:	2b02      	cmp	r3, #2
 80116c0:	dd00      	ble.n	80116c4 <_dtoa_r+0xbdc>
 80116c2:	e6b6      	b.n	8011432 <_dtoa_r+0x94a>
 80116c4:	e7b1      	b.n	801162a <_dtoa_r+0xb42>
 80116c6:	46c0      	nop			; (mov r8, r8)
 80116c8:	0801525c 	.word	0x0801525c
 80116cc:	08015264 	.word	0x08015264

080116d0 <realloc>:
 80116d0:	b510      	push	{r4, lr}
 80116d2:	4b03      	ldr	r3, [pc, #12]	; (80116e0 <realloc+0x10>)
 80116d4:	000a      	movs	r2, r1
 80116d6:	0001      	movs	r1, r0
 80116d8:	6818      	ldr	r0, [r3, #0]
 80116da:	f000 f803 	bl	80116e4 <_realloc_r>
 80116de:	bd10      	pop	{r4, pc}
 80116e0:	200006d8 	.word	0x200006d8

080116e4 <_realloc_r>:
 80116e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116e6:	b087      	sub	sp, #28
 80116e8:	1e0c      	subs	r4, r1, #0
 80116ea:	9001      	str	r0, [sp, #4]
 80116ec:	9205      	str	r2, [sp, #20]
 80116ee:	d106      	bne.n	80116fe <_realloc_r+0x1a>
 80116f0:	0011      	movs	r1, r2
 80116f2:	f7f9 fe39 	bl	800b368 <_malloc_r>
 80116f6:	0007      	movs	r7, r0
 80116f8:	0038      	movs	r0, r7
 80116fa:	b007      	add	sp, #28
 80116fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116fe:	9801      	ldr	r0, [sp, #4]
 8011700:	f7fa f846 	bl	800b790 <__malloc_lock>
 8011704:	0023      	movs	r3, r4
 8011706:	3b08      	subs	r3, #8
 8011708:	685f      	ldr	r7, [r3, #4]
 801170a:	9304      	str	r3, [sp, #16]
 801170c:	9b05      	ldr	r3, [sp, #20]
 801170e:	330b      	adds	r3, #11
 8011710:	2b16      	cmp	r3, #22
 8011712:	d908      	bls.n	8011726 <_realloc_r+0x42>
 8011714:	2207      	movs	r2, #7
 8011716:	4393      	bics	r3, r2
 8011718:	9300      	str	r3, [sp, #0]
 801171a:	d506      	bpl.n	801172a <_realloc_r+0x46>
 801171c:	230c      	movs	r3, #12
 801171e:	9a01      	ldr	r2, [sp, #4]
 8011720:	2700      	movs	r7, #0
 8011722:	6013      	str	r3, [r2, #0]
 8011724:	e7e8      	b.n	80116f8 <_realloc_r+0x14>
 8011726:	2310      	movs	r3, #16
 8011728:	9300      	str	r3, [sp, #0]
 801172a:	9b00      	ldr	r3, [sp, #0]
 801172c:	9a05      	ldr	r2, [sp, #20]
 801172e:	4293      	cmp	r3, r2
 8011730:	d3f4      	bcc.n	801171c <_realloc_r+0x38>
 8011732:	9b04      	ldr	r3, [sp, #16]
 8011734:	003a      	movs	r2, r7
 8011736:	9302      	str	r3, [sp, #8]
 8011738:	2303      	movs	r3, #3
 801173a:	439a      	bics	r2, r3
 801173c:	9b00      	ldr	r3, [sp, #0]
 801173e:	9203      	str	r2, [sp, #12]
 8011740:	4293      	cmp	r3, r2
 8011742:	dc00      	bgt.n	8011746 <_realloc_r+0x62>
 8011744:	e169      	b.n	8011a1a <_realloc_r+0x336>
 8011746:	9b04      	ldr	r3, [sp, #16]
 8011748:	48b8      	ldr	r0, [pc, #736]	; (8011a2c <_realloc_r+0x348>)
 801174a:	189b      	adds	r3, r3, r2
 801174c:	6882      	ldr	r2, [r0, #8]
 801174e:	4694      	mov	ip, r2
 8011750:	685a      	ldr	r2, [r3, #4]
 8011752:	459c      	cmp	ip, r3
 8011754:	d006      	beq.n	8011764 <_realloc_r+0x80>
 8011756:	2501      	movs	r5, #1
 8011758:	0011      	movs	r1, r2
 801175a:	43a9      	bics	r1, r5
 801175c:	1859      	adds	r1, r3, r1
 801175e:	6849      	ldr	r1, [r1, #4]
 8011760:	4229      	tst	r1, r5
 8011762:	d144      	bne.n	80117ee <_realloc_r+0x10a>
 8011764:	2103      	movs	r1, #3
 8011766:	438a      	bics	r2, r1
 8011768:	9903      	ldr	r1, [sp, #12]
 801176a:	188e      	adds	r6, r1, r2
 801176c:	9900      	ldr	r1, [sp, #0]
 801176e:	459c      	cmp	ip, r3
 8011770:	d117      	bne.n	80117a2 <_realloc_r+0xbe>
 8011772:	3110      	adds	r1, #16
 8011774:	42b1      	cmp	r1, r6
 8011776:	dc3c      	bgt.n	80117f2 <_realloc_r+0x10e>
 8011778:	9a00      	ldr	r2, [sp, #0]
 801177a:	2101      	movs	r1, #1
 801177c:	4694      	mov	ip, r2
 801177e:	1ab6      	subs	r6, r6, r2
 8011780:	0022      	movs	r2, r4
 8011782:	9b04      	ldr	r3, [sp, #16]
 8011784:	430e      	orrs	r6, r1
 8011786:	4463      	add	r3, ip
 8011788:	6083      	str	r3, [r0, #8]
 801178a:	3a08      	subs	r2, #8
 801178c:	605e      	str	r6, [r3, #4]
 801178e:	6853      	ldr	r3, [r2, #4]
 8011790:	9801      	ldr	r0, [sp, #4]
 8011792:	400b      	ands	r3, r1
 8011794:	4661      	mov	r1, ip
 8011796:	430b      	orrs	r3, r1
 8011798:	6053      	str	r3, [r2, #4]
 801179a:	f7fa f801 	bl	800b7a0 <__malloc_unlock>
 801179e:	0027      	movs	r7, r4
 80117a0:	e7aa      	b.n	80116f8 <_realloc_r+0x14>
 80117a2:	42b1      	cmp	r1, r6
 80117a4:	dc25      	bgt.n	80117f2 <_realloc_r+0x10e>
 80117a6:	68da      	ldr	r2, [r3, #12]
 80117a8:	689b      	ldr	r3, [r3, #8]
 80117aa:	60da      	str	r2, [r3, #12]
 80117ac:	6093      	str	r3, [r2, #8]
 80117ae:	9b00      	ldr	r3, [sp, #0]
 80117b0:	9a02      	ldr	r2, [sp, #8]
 80117b2:	1af4      	subs	r4, r6, r3
 80117b4:	9b02      	ldr	r3, [sp, #8]
 80117b6:	1992      	adds	r2, r2, r6
 80117b8:	6858      	ldr	r0, [r3, #4]
 80117ba:	2301      	movs	r3, #1
 80117bc:	4018      	ands	r0, r3
 80117be:	2c0f      	cmp	r4, #15
 80117c0:	d800      	bhi.n	80117c4 <_realloc_r+0xe0>
 80117c2:	e12c      	b.n	8011a1e <_realloc_r+0x33a>
 80117c4:	9d00      	ldr	r5, [sp, #0]
 80117c6:	9902      	ldr	r1, [sp, #8]
 80117c8:	4328      	orrs	r0, r5
 80117ca:	1949      	adds	r1, r1, r5
 80117cc:	9d02      	ldr	r5, [sp, #8]
 80117ce:	431c      	orrs	r4, r3
 80117d0:	6068      	str	r0, [r5, #4]
 80117d2:	604c      	str	r4, [r1, #4]
 80117d4:	6850      	ldr	r0, [r2, #4]
 80117d6:	3108      	adds	r1, #8
 80117d8:	4303      	orrs	r3, r0
 80117da:	6053      	str	r3, [r2, #4]
 80117dc:	9801      	ldr	r0, [sp, #4]
 80117de:	f7fb f9a3 	bl	800cb28 <_free_r>
 80117e2:	9801      	ldr	r0, [sp, #4]
 80117e4:	f7f9 ffdc 	bl	800b7a0 <__malloc_unlock>
 80117e8:	9f02      	ldr	r7, [sp, #8]
 80117ea:	3708      	adds	r7, #8
 80117ec:	e784      	b.n	80116f8 <_realloc_r+0x14>
 80117ee:	2200      	movs	r2, #0
 80117f0:	0013      	movs	r3, r2
 80117f2:	07ff      	lsls	r7, r7, #31
 80117f4:	d500      	bpl.n	80117f8 <_realloc_r+0x114>
 80117f6:	e0c6      	b.n	8011986 <_realloc_r+0x2a2>
 80117f8:	0021      	movs	r1, r4
 80117fa:	2003      	movs	r0, #3
 80117fc:	3908      	subs	r1, #8
 80117fe:	680d      	ldr	r5, [r1, #0]
 8011800:	9904      	ldr	r1, [sp, #16]
 8011802:	1b4d      	subs	r5, r1, r5
 8011804:	6869      	ldr	r1, [r5, #4]
 8011806:	4381      	bics	r1, r0
 8011808:	9803      	ldr	r0, [sp, #12]
 801180a:	180f      	adds	r7, r1, r0
 801180c:	2b00      	cmp	r3, #0
 801180e:	d100      	bne.n	8011812 <_realloc_r+0x12e>
 8011810:	e084      	b.n	801191c <_realloc_r+0x238>
 8011812:	19d6      	adds	r6, r2, r7
 8011814:	459c      	cmp	ip, r3
 8011816:	d148      	bne.n	80118aa <_realloc_r+0x1c6>
 8011818:	9b00      	ldr	r3, [sp, #0]
 801181a:	3310      	adds	r3, #16
 801181c:	42b3      	cmp	r3, r6
 801181e:	dc7d      	bgt.n	801191c <_realloc_r+0x238>
 8011820:	68aa      	ldr	r2, [r5, #8]
 8011822:	68eb      	ldr	r3, [r5, #12]
 8011824:	002f      	movs	r7, r5
 8011826:	60d3      	str	r3, [r2, #12]
 8011828:	609a      	str	r2, [r3, #8]
 801182a:	0002      	movs	r2, r0
 801182c:	3a04      	subs	r2, #4
 801182e:	3708      	adds	r7, #8
 8011830:	2a24      	cmp	r2, #36	; 0x24
 8011832:	d835      	bhi.n	80118a0 <_realloc_r+0x1bc>
 8011834:	003b      	movs	r3, r7
 8011836:	2a13      	cmp	r2, #19
 8011838:	d908      	bls.n	801184c <_realloc_r+0x168>
 801183a:	6823      	ldr	r3, [r4, #0]
 801183c:	60ab      	str	r3, [r5, #8]
 801183e:	6863      	ldr	r3, [r4, #4]
 8011840:	60eb      	str	r3, [r5, #12]
 8011842:	2a1b      	cmp	r2, #27
 8011844:	d81a      	bhi.n	801187c <_realloc_r+0x198>
 8011846:	002b      	movs	r3, r5
 8011848:	3408      	adds	r4, #8
 801184a:	3310      	adds	r3, #16
 801184c:	6822      	ldr	r2, [r4, #0]
 801184e:	601a      	str	r2, [r3, #0]
 8011850:	6862      	ldr	r2, [r4, #4]
 8011852:	605a      	str	r2, [r3, #4]
 8011854:	68a2      	ldr	r2, [r4, #8]
 8011856:	609a      	str	r2, [r3, #8]
 8011858:	9b00      	ldr	r3, [sp, #0]
 801185a:	4a74      	ldr	r2, [pc, #464]	; (8011a2c <_realloc_r+0x348>)
 801185c:	18eb      	adds	r3, r5, r3
 801185e:	6093      	str	r3, [r2, #8]
 8011860:	9a00      	ldr	r2, [sp, #0]
 8011862:	1ab6      	subs	r6, r6, r2
 8011864:	2201      	movs	r2, #1
 8011866:	4316      	orrs	r6, r2
 8011868:	605e      	str	r6, [r3, #4]
 801186a:	686b      	ldr	r3, [r5, #4]
 801186c:	4013      	ands	r3, r2
 801186e:	9a00      	ldr	r2, [sp, #0]
 8011870:	4313      	orrs	r3, r2
 8011872:	606b      	str	r3, [r5, #4]
 8011874:	9801      	ldr	r0, [sp, #4]
 8011876:	f7f9 ff93 	bl	800b7a0 <__malloc_unlock>
 801187a:	e73d      	b.n	80116f8 <_realloc_r+0x14>
 801187c:	68a3      	ldr	r3, [r4, #8]
 801187e:	612b      	str	r3, [r5, #16]
 8011880:	68e3      	ldr	r3, [r4, #12]
 8011882:	616b      	str	r3, [r5, #20]
 8011884:	2a24      	cmp	r2, #36	; 0x24
 8011886:	d003      	beq.n	8011890 <_realloc_r+0x1ac>
 8011888:	002b      	movs	r3, r5
 801188a:	3410      	adds	r4, #16
 801188c:	3318      	adds	r3, #24
 801188e:	e7dd      	b.n	801184c <_realloc_r+0x168>
 8011890:	6923      	ldr	r3, [r4, #16]
 8011892:	61ab      	str	r3, [r5, #24]
 8011894:	002b      	movs	r3, r5
 8011896:	6962      	ldr	r2, [r4, #20]
 8011898:	3320      	adds	r3, #32
 801189a:	61ea      	str	r2, [r5, #28]
 801189c:	3418      	adds	r4, #24
 801189e:	e7d5      	b.n	801184c <_realloc_r+0x168>
 80118a0:	0021      	movs	r1, r4
 80118a2:	0038      	movs	r0, r7
 80118a4:	f001 fbb5 	bl	8013012 <memmove>
 80118a8:	e7d6      	b.n	8011858 <_realloc_r+0x174>
 80118aa:	9a00      	ldr	r2, [sp, #0]
 80118ac:	42b2      	cmp	r2, r6
 80118ae:	dc35      	bgt.n	801191c <_realloc_r+0x238>
 80118b0:	0028      	movs	r0, r5
 80118b2:	68da      	ldr	r2, [r3, #12]
 80118b4:	689b      	ldr	r3, [r3, #8]
 80118b6:	3008      	adds	r0, #8
 80118b8:	60da      	str	r2, [r3, #12]
 80118ba:	6093      	str	r3, [r2, #8]
 80118bc:	68aa      	ldr	r2, [r5, #8]
 80118be:	68eb      	ldr	r3, [r5, #12]
 80118c0:	60d3      	str	r3, [r2, #12]
 80118c2:	609a      	str	r2, [r3, #8]
 80118c4:	9a03      	ldr	r2, [sp, #12]
 80118c6:	3a04      	subs	r2, #4
 80118c8:	2a24      	cmp	r2, #36	; 0x24
 80118ca:	d823      	bhi.n	8011914 <_realloc_r+0x230>
 80118cc:	2a13      	cmp	r2, #19
 80118ce:	d907      	bls.n	80118e0 <_realloc_r+0x1fc>
 80118d0:	6823      	ldr	r3, [r4, #0]
 80118d2:	60ab      	str	r3, [r5, #8]
 80118d4:	6863      	ldr	r3, [r4, #4]
 80118d6:	60eb      	str	r3, [r5, #12]
 80118d8:	2a1b      	cmp	r2, #27
 80118da:	d809      	bhi.n	80118f0 <_realloc_r+0x20c>
 80118dc:	3408      	adds	r4, #8
 80118de:	3008      	adds	r0, #8
 80118e0:	6823      	ldr	r3, [r4, #0]
 80118e2:	6003      	str	r3, [r0, #0]
 80118e4:	6863      	ldr	r3, [r4, #4]
 80118e6:	6043      	str	r3, [r0, #4]
 80118e8:	68a3      	ldr	r3, [r4, #8]
 80118ea:	6083      	str	r3, [r0, #8]
 80118ec:	9502      	str	r5, [sp, #8]
 80118ee:	e75e      	b.n	80117ae <_realloc_r+0xca>
 80118f0:	68a3      	ldr	r3, [r4, #8]
 80118f2:	612b      	str	r3, [r5, #16]
 80118f4:	68e3      	ldr	r3, [r4, #12]
 80118f6:	616b      	str	r3, [r5, #20]
 80118f8:	2a24      	cmp	r2, #36	; 0x24
 80118fa:	d003      	beq.n	8011904 <_realloc_r+0x220>
 80118fc:	0028      	movs	r0, r5
 80118fe:	3410      	adds	r4, #16
 8011900:	3018      	adds	r0, #24
 8011902:	e7ed      	b.n	80118e0 <_realloc_r+0x1fc>
 8011904:	0028      	movs	r0, r5
 8011906:	6923      	ldr	r3, [r4, #16]
 8011908:	3020      	adds	r0, #32
 801190a:	61ab      	str	r3, [r5, #24]
 801190c:	6963      	ldr	r3, [r4, #20]
 801190e:	3418      	adds	r4, #24
 8011910:	61eb      	str	r3, [r5, #28]
 8011912:	e7e5      	b.n	80118e0 <_realloc_r+0x1fc>
 8011914:	0021      	movs	r1, r4
 8011916:	f001 fb7c 	bl	8013012 <memmove>
 801191a:	e7e7      	b.n	80118ec <_realloc_r+0x208>
 801191c:	9b00      	ldr	r3, [sp, #0]
 801191e:	42bb      	cmp	r3, r7
 8011920:	dc31      	bgt.n	8011986 <_realloc_r+0x2a2>
 8011922:	0028      	movs	r0, r5
 8011924:	68aa      	ldr	r2, [r5, #8]
 8011926:	68eb      	ldr	r3, [r5, #12]
 8011928:	3008      	adds	r0, #8
 801192a:	60d3      	str	r3, [r2, #12]
 801192c:	609a      	str	r2, [r3, #8]
 801192e:	9a03      	ldr	r2, [sp, #12]
 8011930:	3a04      	subs	r2, #4
 8011932:	2a24      	cmp	r2, #36	; 0x24
 8011934:	d823      	bhi.n	801197e <_realloc_r+0x29a>
 8011936:	2a13      	cmp	r2, #19
 8011938:	d907      	bls.n	801194a <_realloc_r+0x266>
 801193a:	6823      	ldr	r3, [r4, #0]
 801193c:	60ab      	str	r3, [r5, #8]
 801193e:	6863      	ldr	r3, [r4, #4]
 8011940:	60eb      	str	r3, [r5, #12]
 8011942:	2a1b      	cmp	r2, #27
 8011944:	d809      	bhi.n	801195a <_realloc_r+0x276>
 8011946:	3408      	adds	r4, #8
 8011948:	3008      	adds	r0, #8
 801194a:	6823      	ldr	r3, [r4, #0]
 801194c:	6003      	str	r3, [r0, #0]
 801194e:	6863      	ldr	r3, [r4, #4]
 8011950:	6043      	str	r3, [r0, #4]
 8011952:	68a3      	ldr	r3, [r4, #8]
 8011954:	6083      	str	r3, [r0, #8]
 8011956:	003e      	movs	r6, r7
 8011958:	e7c8      	b.n	80118ec <_realloc_r+0x208>
 801195a:	68a3      	ldr	r3, [r4, #8]
 801195c:	612b      	str	r3, [r5, #16]
 801195e:	68e3      	ldr	r3, [r4, #12]
 8011960:	616b      	str	r3, [r5, #20]
 8011962:	2a24      	cmp	r2, #36	; 0x24
 8011964:	d003      	beq.n	801196e <_realloc_r+0x28a>
 8011966:	0028      	movs	r0, r5
 8011968:	3410      	adds	r4, #16
 801196a:	3018      	adds	r0, #24
 801196c:	e7ed      	b.n	801194a <_realloc_r+0x266>
 801196e:	0028      	movs	r0, r5
 8011970:	6923      	ldr	r3, [r4, #16]
 8011972:	3020      	adds	r0, #32
 8011974:	61ab      	str	r3, [r5, #24]
 8011976:	6963      	ldr	r3, [r4, #20]
 8011978:	3418      	adds	r4, #24
 801197a:	61eb      	str	r3, [r5, #28]
 801197c:	e7e5      	b.n	801194a <_realloc_r+0x266>
 801197e:	0021      	movs	r1, r4
 8011980:	f001 fb47 	bl	8013012 <memmove>
 8011984:	e7e7      	b.n	8011956 <_realloc_r+0x272>
 8011986:	9905      	ldr	r1, [sp, #20]
 8011988:	9801      	ldr	r0, [sp, #4]
 801198a:	f7f9 fced 	bl	800b368 <_malloc_r>
 801198e:	1e07      	subs	r7, r0, #0
 8011990:	d100      	bne.n	8011994 <_realloc_r+0x2b0>
 8011992:	e76f      	b.n	8011874 <_realloc_r+0x190>
 8011994:	0023      	movs	r3, r4
 8011996:	2201      	movs	r2, #1
 8011998:	3b08      	subs	r3, #8
 801199a:	685b      	ldr	r3, [r3, #4]
 801199c:	4393      	bics	r3, r2
 801199e:	9a04      	ldr	r2, [sp, #16]
 80119a0:	18d3      	adds	r3, r2, r3
 80119a2:	0002      	movs	r2, r0
 80119a4:	3a08      	subs	r2, #8
 80119a6:	4293      	cmp	r3, r2
 80119a8:	d105      	bne.n	80119b6 <_realloc_r+0x2d2>
 80119aa:	685e      	ldr	r6, [r3, #4]
 80119ac:	2303      	movs	r3, #3
 80119ae:	439e      	bics	r6, r3
 80119b0:	9b03      	ldr	r3, [sp, #12]
 80119b2:	18f6      	adds	r6, r6, r3
 80119b4:	e6fb      	b.n	80117ae <_realloc_r+0xca>
 80119b6:	9a03      	ldr	r2, [sp, #12]
 80119b8:	3a04      	subs	r2, #4
 80119ba:	2a24      	cmp	r2, #36	; 0x24
 80119bc:	d829      	bhi.n	8011a12 <_realloc_r+0x32e>
 80119be:	0003      	movs	r3, r0
 80119c0:	0021      	movs	r1, r4
 80119c2:	2a13      	cmp	r2, #19
 80119c4:	d908      	bls.n	80119d8 <_realloc_r+0x2f4>
 80119c6:	6823      	ldr	r3, [r4, #0]
 80119c8:	6003      	str	r3, [r0, #0]
 80119ca:	6863      	ldr	r3, [r4, #4]
 80119cc:	6043      	str	r3, [r0, #4]
 80119ce:	2a1b      	cmp	r2, #27
 80119d0:	d80d      	bhi.n	80119ee <_realloc_r+0x30a>
 80119d2:	0003      	movs	r3, r0
 80119d4:	3108      	adds	r1, #8
 80119d6:	3308      	adds	r3, #8
 80119d8:	680a      	ldr	r2, [r1, #0]
 80119da:	601a      	str	r2, [r3, #0]
 80119dc:	684a      	ldr	r2, [r1, #4]
 80119de:	605a      	str	r2, [r3, #4]
 80119e0:	688a      	ldr	r2, [r1, #8]
 80119e2:	609a      	str	r2, [r3, #8]
 80119e4:	0021      	movs	r1, r4
 80119e6:	9801      	ldr	r0, [sp, #4]
 80119e8:	f7fb f89e 	bl	800cb28 <_free_r>
 80119ec:	e742      	b.n	8011874 <_realloc_r+0x190>
 80119ee:	68a3      	ldr	r3, [r4, #8]
 80119f0:	6083      	str	r3, [r0, #8]
 80119f2:	68e3      	ldr	r3, [r4, #12]
 80119f4:	60c3      	str	r3, [r0, #12]
 80119f6:	2a24      	cmp	r2, #36	; 0x24
 80119f8:	d003      	beq.n	8011a02 <_realloc_r+0x31e>
 80119fa:	0003      	movs	r3, r0
 80119fc:	3110      	adds	r1, #16
 80119fe:	3310      	adds	r3, #16
 8011a00:	e7ea      	b.n	80119d8 <_realloc_r+0x2f4>
 8011a02:	6923      	ldr	r3, [r4, #16]
 8011a04:	3118      	adds	r1, #24
 8011a06:	6103      	str	r3, [r0, #16]
 8011a08:	0003      	movs	r3, r0
 8011a0a:	6962      	ldr	r2, [r4, #20]
 8011a0c:	3318      	adds	r3, #24
 8011a0e:	6142      	str	r2, [r0, #20]
 8011a10:	e7e2      	b.n	80119d8 <_realloc_r+0x2f4>
 8011a12:	0021      	movs	r1, r4
 8011a14:	f001 fafd 	bl	8013012 <memmove>
 8011a18:	e7e4      	b.n	80119e4 <_realloc_r+0x300>
 8011a1a:	9e03      	ldr	r6, [sp, #12]
 8011a1c:	e6c7      	b.n	80117ae <_realloc_r+0xca>
 8011a1e:	9902      	ldr	r1, [sp, #8]
 8011a20:	4306      	orrs	r6, r0
 8011a22:	604e      	str	r6, [r1, #4]
 8011a24:	6851      	ldr	r1, [r2, #4]
 8011a26:	430b      	orrs	r3, r1
 8011a28:	6053      	str	r3, [r2, #4]
 8011a2a:	e6da      	b.n	80117e2 <_realloc_r+0xfe>
 8011a2c:	20000030 	.word	0x20000030

08011a30 <_strtoul_l.constprop.0>:
 8011a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a32:	b087      	sub	sp, #28
 8011a34:	9202      	str	r2, [sp, #8]
 8011a36:	4a3e      	ldr	r2, [pc, #248]	; (8011b30 <_strtoul_l.constprop.0+0x100>)
 8011a38:	001e      	movs	r6, r3
 8011a3a:	9101      	str	r1, [sp, #4]
 8011a3c:	000b      	movs	r3, r1
 8011a3e:	4694      	mov	ip, r2
 8011a40:	2108      	movs	r1, #8
 8011a42:	9005      	str	r0, [sp, #20]
 8011a44:	001a      	movs	r2, r3
 8011a46:	4660      	mov	r0, ip
 8011a48:	7814      	ldrb	r4, [r2, #0]
 8011a4a:	3301      	adds	r3, #1
 8011a4c:	5d00      	ldrb	r0, [r0, r4]
 8011a4e:	001d      	movs	r5, r3
 8011a50:	0007      	movs	r7, r0
 8011a52:	400f      	ands	r7, r1
 8011a54:	4208      	tst	r0, r1
 8011a56:	d1f5      	bne.n	8011a44 <_strtoul_l.constprop.0+0x14>
 8011a58:	2c2d      	cmp	r4, #45	; 0x2d
 8011a5a:	d13d      	bne.n	8011ad8 <_strtoul_l.constprop.0+0xa8>
 8011a5c:	2701      	movs	r7, #1
 8011a5e:	781c      	ldrb	r4, [r3, #0]
 8011a60:	1c95      	adds	r5, r2, #2
 8011a62:	2e00      	cmp	r6, #0
 8011a64:	d05f      	beq.n	8011b26 <_strtoul_l.constprop.0+0xf6>
 8011a66:	2e10      	cmp	r6, #16
 8011a68:	d109      	bne.n	8011a7e <_strtoul_l.constprop.0+0x4e>
 8011a6a:	2c30      	cmp	r4, #48	; 0x30
 8011a6c:	d107      	bne.n	8011a7e <_strtoul_l.constprop.0+0x4e>
 8011a6e:	2220      	movs	r2, #32
 8011a70:	782b      	ldrb	r3, [r5, #0]
 8011a72:	4393      	bics	r3, r2
 8011a74:	2b58      	cmp	r3, #88	; 0x58
 8011a76:	d151      	bne.n	8011b1c <_strtoul_l.constprop.0+0xec>
 8011a78:	2610      	movs	r6, #16
 8011a7a:	786c      	ldrb	r4, [r5, #1]
 8011a7c:	3502      	adds	r5, #2
 8011a7e:	2001      	movs	r0, #1
 8011a80:	0031      	movs	r1, r6
 8011a82:	4240      	negs	r0, r0
 8011a84:	f7ee fb5a 	bl	800013c <__udivsi3>
 8011a88:	9003      	str	r0, [sp, #12]
 8011a8a:	2001      	movs	r0, #1
 8011a8c:	0031      	movs	r1, r6
 8011a8e:	4240      	negs	r0, r0
 8011a90:	f7ee fbda 	bl	8000248 <__aeabi_uidivmod>
 8011a94:	2300      	movs	r3, #0
 8011a96:	2201      	movs	r2, #1
 8011a98:	9104      	str	r1, [sp, #16]
 8011a9a:	2101      	movs	r1, #1
 8011a9c:	0018      	movs	r0, r3
 8011a9e:	4694      	mov	ip, r2
 8011aa0:	4249      	negs	r1, r1
 8011aa2:	0022      	movs	r2, r4
 8011aa4:	3a30      	subs	r2, #48	; 0x30
 8011aa6:	2a09      	cmp	r2, #9
 8011aa8:	d903      	bls.n	8011ab2 <_strtoul_l.constprop.0+0x82>
 8011aaa:	3a11      	subs	r2, #17
 8011aac:	2a19      	cmp	r2, #25
 8011aae:	d818      	bhi.n	8011ae2 <_strtoul_l.constprop.0+0xb2>
 8011ab0:	320a      	adds	r2, #10
 8011ab2:	4296      	cmp	r6, r2
 8011ab4:	dd19      	ble.n	8011aea <_strtoul_l.constprop.0+0xba>
 8011ab6:	1c5c      	adds	r4, r3, #1
 8011ab8:	d00b      	beq.n	8011ad2 <_strtoul_l.constprop.0+0xa2>
 8011aba:	9c03      	ldr	r4, [sp, #12]
 8011abc:	000b      	movs	r3, r1
 8011abe:	4284      	cmp	r4, r0
 8011ac0:	d307      	bcc.n	8011ad2 <_strtoul_l.constprop.0+0xa2>
 8011ac2:	d103      	bne.n	8011acc <_strtoul_l.constprop.0+0x9c>
 8011ac4:	9c04      	ldr	r4, [sp, #16]
 8011ac6:	000b      	movs	r3, r1
 8011ac8:	4294      	cmp	r4, r2
 8011aca:	db02      	blt.n	8011ad2 <_strtoul_l.constprop.0+0xa2>
 8011acc:	4663      	mov	r3, ip
 8011ace:	4370      	muls	r0, r6
 8011ad0:	1810      	adds	r0, r2, r0
 8011ad2:	782c      	ldrb	r4, [r5, #0]
 8011ad4:	3501      	adds	r5, #1
 8011ad6:	e7e4      	b.n	8011aa2 <_strtoul_l.constprop.0+0x72>
 8011ad8:	2c2b      	cmp	r4, #43	; 0x2b
 8011ada:	d1c2      	bne.n	8011a62 <_strtoul_l.constprop.0+0x32>
 8011adc:	781c      	ldrb	r4, [r3, #0]
 8011ade:	1c95      	adds	r5, r2, #2
 8011ae0:	e7bf      	b.n	8011a62 <_strtoul_l.constprop.0+0x32>
 8011ae2:	0022      	movs	r2, r4
 8011ae4:	3a61      	subs	r2, #97	; 0x61
 8011ae6:	2a19      	cmp	r2, #25
 8011ae8:	d9e2      	bls.n	8011ab0 <_strtoul_l.constprop.0+0x80>
 8011aea:	1c5a      	adds	r2, r3, #1
 8011aec:	d108      	bne.n	8011b00 <_strtoul_l.constprop.0+0xd0>
 8011aee:	2222      	movs	r2, #34	; 0x22
 8011af0:	9905      	ldr	r1, [sp, #20]
 8011af2:	0018      	movs	r0, r3
 8011af4:	600a      	str	r2, [r1, #0]
 8011af6:	9a02      	ldr	r2, [sp, #8]
 8011af8:	2a00      	cmp	r2, #0
 8011afa:	d109      	bne.n	8011b10 <_strtoul_l.constprop.0+0xe0>
 8011afc:	b007      	add	sp, #28
 8011afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b00:	2f00      	cmp	r7, #0
 8011b02:	d000      	beq.n	8011b06 <_strtoul_l.constprop.0+0xd6>
 8011b04:	4240      	negs	r0, r0
 8011b06:	9a02      	ldr	r2, [sp, #8]
 8011b08:	2a00      	cmp	r2, #0
 8011b0a:	d0f7      	beq.n	8011afc <_strtoul_l.constprop.0+0xcc>
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d001      	beq.n	8011b14 <_strtoul_l.constprop.0+0xe4>
 8011b10:	1e6b      	subs	r3, r5, #1
 8011b12:	9301      	str	r3, [sp, #4]
 8011b14:	9b02      	ldr	r3, [sp, #8]
 8011b16:	9a01      	ldr	r2, [sp, #4]
 8011b18:	601a      	str	r2, [r3, #0]
 8011b1a:	e7ef      	b.n	8011afc <_strtoul_l.constprop.0+0xcc>
 8011b1c:	2430      	movs	r4, #48	; 0x30
 8011b1e:	2e00      	cmp	r6, #0
 8011b20:	d1ad      	bne.n	8011a7e <_strtoul_l.constprop.0+0x4e>
 8011b22:	3608      	adds	r6, #8
 8011b24:	e7ab      	b.n	8011a7e <_strtoul_l.constprop.0+0x4e>
 8011b26:	2c30      	cmp	r4, #48	; 0x30
 8011b28:	d0a1      	beq.n	8011a6e <_strtoul_l.constprop.0+0x3e>
 8011b2a:	260a      	movs	r6, #10
 8011b2c:	e7a7      	b.n	8011a7e <_strtoul_l.constprop.0+0x4e>
 8011b2e:	46c0      	nop			; (mov r8, r8)
 8011b30:	08014ed1 	.word	0x08014ed1

08011b34 <_strtoul_r>:
 8011b34:	b510      	push	{r4, lr}
 8011b36:	f7ff ff7b 	bl	8011a30 <_strtoul_l.constprop.0>
 8011b3a:	bd10      	pop	{r4, pc}

08011b3c <_strtoll_l.constprop.0>:
 8011b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b3e:	b08d      	sub	sp, #52	; 0x34
 8011b40:	9203      	str	r2, [sp, #12]
 8011b42:	4a53      	ldr	r2, [pc, #332]	; (8011c90 <_strtoll_l.constprop.0+0x154>)
 8011b44:	001e      	movs	r6, r3
 8011b46:	9102      	str	r1, [sp, #8]
 8011b48:	000b      	movs	r3, r1
 8011b4a:	4694      	mov	ip, r2
 8011b4c:	2108      	movs	r1, #8
 8011b4e:	900a      	str	r0, [sp, #40]	; 0x28
 8011b50:	001a      	movs	r2, r3
 8011b52:	4660      	mov	r0, ip
 8011b54:	7814      	ldrb	r4, [r2, #0]
 8011b56:	3301      	adds	r3, #1
 8011b58:	5d00      	ldrb	r0, [r0, r4]
 8011b5a:	001d      	movs	r5, r3
 8011b5c:	0007      	movs	r7, r0
 8011b5e:	400f      	ands	r7, r1
 8011b60:	4208      	tst	r0, r1
 8011b62:	d1f5      	bne.n	8011b50 <_strtoll_l.constprop.0+0x14>
 8011b64:	2c2d      	cmp	r4, #45	; 0x2d
 8011b66:	d153      	bne.n	8011c10 <_strtoll_l.constprop.0+0xd4>
 8011b68:	781c      	ldrb	r4, [r3, #0]
 8011b6a:	2301      	movs	r3, #1
 8011b6c:	1c95      	adds	r5, r2, #2
 8011b6e:	9301      	str	r3, [sp, #4]
 8011b70:	2e00      	cmp	r6, #0
 8011b72:	d100      	bne.n	8011b76 <_strtoll_l.constprop.0+0x3a>
 8011b74:	e086      	b.n	8011c84 <_strtoll_l.constprop.0+0x148>
 8011b76:	2e10      	cmp	r6, #16
 8011b78:	d10a      	bne.n	8011b90 <_strtoll_l.constprop.0+0x54>
 8011b7a:	2c30      	cmp	r4, #48	; 0x30
 8011b7c:	d108      	bne.n	8011b90 <_strtoll_l.constprop.0+0x54>
 8011b7e:	2220      	movs	r2, #32
 8011b80:	782b      	ldrb	r3, [r5, #0]
 8011b82:	4393      	bics	r3, r2
 8011b84:	2b58      	cmp	r3, #88	; 0x58
 8011b86:	d000      	beq.n	8011b8a <_strtoll_l.constprop.0+0x4e>
 8011b88:	e076      	b.n	8011c78 <_strtoll_l.constprop.0+0x13c>
 8011b8a:	2610      	movs	r6, #16
 8011b8c:	786c      	ldrb	r4, [r5, #1]
 8011b8e:	3502      	adds	r5, #2
 8011b90:	2001      	movs	r0, #1
 8011b92:	2300      	movs	r3, #0
 8011b94:	493f      	ldr	r1, [pc, #252]	; (8011c94 <_strtoll_l.constprop.0+0x158>)
 8011b96:	9a01      	ldr	r2, [sp, #4]
 8011b98:	4240      	negs	r0, r0
 8011b9a:	1812      	adds	r2, r2, r0
 8011b9c:	414b      	adcs	r3, r1
 8011b9e:	9204      	str	r2, [sp, #16]
 8011ba0:	9305      	str	r3, [sp, #20]
 8011ba2:	9804      	ldr	r0, [sp, #16]
 8011ba4:	9905      	ldr	r1, [sp, #20]
 8011ba6:	17f3      	asrs	r3, r6, #31
 8011ba8:	0032      	movs	r2, r6
 8011baa:	930b      	str	r3, [sp, #44]	; 0x2c
 8011bac:	f7ee fc7a 	bl	80004a4 <__aeabi_uldivmod>
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	000f      	movs	r7, r1
 8011bb4:	9008      	str	r0, [sp, #32]
 8011bb6:	2100      	movs	r1, #0
 8011bb8:	2000      	movs	r0, #0
 8011bba:	9209      	str	r2, [sp, #36]	; 0x24
 8011bbc:	0022      	movs	r2, r4
 8011bbe:	3a30      	subs	r2, #48	; 0x30
 8011bc0:	2a09      	cmp	r2, #9
 8011bc2:	d82b      	bhi.n	8011c1c <_strtoll_l.constprop.0+0xe0>
 8011bc4:	0014      	movs	r4, r2
 8011bc6:	42a6      	cmp	r6, r4
 8011bc8:	dd37      	ble.n	8011c3a <_strtoll_l.constprop.0+0xfe>
 8011bca:	1c5a      	adds	r2, r3, #1
 8011bcc:	d01d      	beq.n	8011c0a <_strtoll_l.constprop.0+0xce>
 8011bce:	42b9      	cmp	r1, r7
 8011bd0:	d830      	bhi.n	8011c34 <_strtoll_l.constprop.0+0xf8>
 8011bd2:	d102      	bne.n	8011bda <_strtoll_l.constprop.0+0x9e>
 8011bd4:	9b08      	ldr	r3, [sp, #32]
 8011bd6:	4298      	cmp	r0, r3
 8011bd8:	d82c      	bhi.n	8011c34 <_strtoll_l.constprop.0+0xf8>
 8011bda:	9b08      	ldr	r3, [sp, #32]
 8011bdc:	4283      	cmp	r3, r0
 8011bde:	d106      	bne.n	8011bee <_strtoll_l.constprop.0+0xb2>
 8011be0:	428f      	cmp	r7, r1
 8011be2:	d104      	bne.n	8011bee <_strtoll_l.constprop.0+0xb2>
 8011be4:	2301      	movs	r3, #1
 8011be6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011be8:	425b      	negs	r3, r3
 8011bea:	42a2      	cmp	r2, r4
 8011bec:	db0d      	blt.n	8011c0a <_strtoll_l.constprop.0+0xce>
 8011bee:	000b      	movs	r3, r1
 8011bf0:	0002      	movs	r2, r0
 8011bf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011bf4:	0030      	movs	r0, r6
 8011bf6:	f7ee fc75 	bl	80004e4 <__aeabi_lmul>
 8011bfa:	17e3      	asrs	r3, r4, #31
 8011bfc:	9406      	str	r4, [sp, #24]
 8011bfe:	9307      	str	r3, [sp, #28]
 8011c00:	9b06      	ldr	r3, [sp, #24]
 8011c02:	9c07      	ldr	r4, [sp, #28]
 8011c04:	18c0      	adds	r0, r0, r3
 8011c06:	4161      	adcs	r1, r4
 8011c08:	2301      	movs	r3, #1
 8011c0a:	782c      	ldrb	r4, [r5, #0]
 8011c0c:	3501      	adds	r5, #1
 8011c0e:	e7d5      	b.n	8011bbc <_strtoll_l.constprop.0+0x80>
 8011c10:	9701      	str	r7, [sp, #4]
 8011c12:	2c2b      	cmp	r4, #43	; 0x2b
 8011c14:	d1ac      	bne.n	8011b70 <_strtoll_l.constprop.0+0x34>
 8011c16:	781c      	ldrb	r4, [r3, #0]
 8011c18:	1c95      	adds	r5, r2, #2
 8011c1a:	e7a9      	b.n	8011b70 <_strtoll_l.constprop.0+0x34>
 8011c1c:	0022      	movs	r2, r4
 8011c1e:	3a41      	subs	r2, #65	; 0x41
 8011c20:	2a19      	cmp	r2, #25
 8011c22:	d801      	bhi.n	8011c28 <_strtoll_l.constprop.0+0xec>
 8011c24:	3c37      	subs	r4, #55	; 0x37
 8011c26:	e7ce      	b.n	8011bc6 <_strtoll_l.constprop.0+0x8a>
 8011c28:	0022      	movs	r2, r4
 8011c2a:	3a61      	subs	r2, #97	; 0x61
 8011c2c:	2a19      	cmp	r2, #25
 8011c2e:	d804      	bhi.n	8011c3a <_strtoll_l.constprop.0+0xfe>
 8011c30:	3c57      	subs	r4, #87	; 0x57
 8011c32:	e7c8      	b.n	8011bc6 <_strtoll_l.constprop.0+0x8a>
 8011c34:	2301      	movs	r3, #1
 8011c36:	425b      	negs	r3, r3
 8011c38:	e7e7      	b.n	8011c0a <_strtoll_l.constprop.0+0xce>
 8011c3a:	1c5a      	adds	r2, r3, #1
 8011c3c:	d109      	bne.n	8011c52 <_strtoll_l.constprop.0+0x116>
 8011c3e:	9804      	ldr	r0, [sp, #16]
 8011c40:	9905      	ldr	r1, [sp, #20]
 8011c42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011c44:	3323      	adds	r3, #35	; 0x23
 8011c46:	6013      	str	r3, [r2, #0]
 8011c48:	9b03      	ldr	r3, [sp, #12]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d10e      	bne.n	8011c6c <_strtoll_l.constprop.0+0x130>
 8011c4e:	b00d      	add	sp, #52	; 0x34
 8011c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c52:	9a01      	ldr	r2, [sp, #4]
 8011c54:	2a00      	cmp	r2, #0
 8011c56:	d004      	beq.n	8011c62 <_strtoll_l.constprop.0+0x126>
 8011c58:	0006      	movs	r6, r0
 8011c5a:	000f      	movs	r7, r1
 8011c5c:	2100      	movs	r1, #0
 8011c5e:	4270      	negs	r0, r6
 8011c60:	41b9      	sbcs	r1, r7
 8011c62:	9a03      	ldr	r2, [sp, #12]
 8011c64:	2a00      	cmp	r2, #0
 8011c66:	d0f2      	beq.n	8011c4e <_strtoll_l.constprop.0+0x112>
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d001      	beq.n	8011c70 <_strtoll_l.constprop.0+0x134>
 8011c6c:	1e6b      	subs	r3, r5, #1
 8011c6e:	9302      	str	r3, [sp, #8]
 8011c70:	9b03      	ldr	r3, [sp, #12]
 8011c72:	9a02      	ldr	r2, [sp, #8]
 8011c74:	601a      	str	r2, [r3, #0]
 8011c76:	e7ea      	b.n	8011c4e <_strtoll_l.constprop.0+0x112>
 8011c78:	2430      	movs	r4, #48	; 0x30
 8011c7a:	2e00      	cmp	r6, #0
 8011c7c:	d000      	beq.n	8011c80 <_strtoll_l.constprop.0+0x144>
 8011c7e:	e787      	b.n	8011b90 <_strtoll_l.constprop.0+0x54>
 8011c80:	3608      	adds	r6, #8
 8011c82:	e785      	b.n	8011b90 <_strtoll_l.constprop.0+0x54>
 8011c84:	2c30      	cmp	r4, #48	; 0x30
 8011c86:	d100      	bne.n	8011c8a <_strtoll_l.constprop.0+0x14e>
 8011c88:	e779      	b.n	8011b7e <_strtoll_l.constprop.0+0x42>
 8011c8a:	260a      	movs	r6, #10
 8011c8c:	e780      	b.n	8011b90 <_strtoll_l.constprop.0+0x54>
 8011c8e:	46c0      	nop			; (mov r8, r8)
 8011c90:	08014ed1 	.word	0x08014ed1
 8011c94:	7fffffff 	.word	0x7fffffff

08011c98 <_strtoll_r>:
 8011c98:	b510      	push	{r4, lr}
 8011c9a:	f7ff ff4f 	bl	8011b3c <_strtoll_l.constprop.0>
 8011c9e:	bd10      	pop	{r4, pc}

08011ca0 <_strtoull_l.constprop.0>:
 8011ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ca2:	b08b      	sub	sp, #44	; 0x2c
 8011ca4:	9202      	str	r2, [sp, #8]
 8011ca6:	4a54      	ldr	r2, [pc, #336]	; (8011df8 <_strtoull_l.constprop.0+0x158>)
 8011ca8:	001e      	movs	r6, r3
 8011caa:	9101      	str	r1, [sp, #4]
 8011cac:	000b      	movs	r3, r1
 8011cae:	4694      	mov	ip, r2
 8011cb0:	2108      	movs	r1, #8
 8011cb2:	9009      	str	r0, [sp, #36]	; 0x24
 8011cb4:	001a      	movs	r2, r3
 8011cb6:	4660      	mov	r0, ip
 8011cb8:	7814      	ldrb	r4, [r2, #0]
 8011cba:	3301      	adds	r3, #1
 8011cbc:	5d00      	ldrb	r0, [r0, r4]
 8011cbe:	001d      	movs	r5, r3
 8011cc0:	0007      	movs	r7, r0
 8011cc2:	400f      	ands	r7, r1
 8011cc4:	4208      	tst	r0, r1
 8011cc6:	d1f5      	bne.n	8011cb4 <_strtoull_l.constprop.0+0x14>
 8011cc8:	2c2d      	cmp	r4, #45	; 0x2d
 8011cca:	d154      	bne.n	8011d76 <_strtoull_l.constprop.0+0xd6>
 8011ccc:	781c      	ldrb	r4, [r3, #0]
 8011cce:	2301      	movs	r3, #1
 8011cd0:	1c95      	adds	r5, r2, #2
 8011cd2:	9306      	str	r3, [sp, #24]
 8011cd4:	2e00      	cmp	r6, #0
 8011cd6:	d100      	bne.n	8011cda <_strtoull_l.constprop.0+0x3a>
 8011cd8:	e088      	b.n	8011dec <_strtoull_l.constprop.0+0x14c>
 8011cda:	2e10      	cmp	r6, #16
 8011cdc:	d10a      	bne.n	8011cf4 <_strtoull_l.constprop.0+0x54>
 8011cde:	2c30      	cmp	r4, #48	; 0x30
 8011ce0:	d108      	bne.n	8011cf4 <_strtoull_l.constprop.0+0x54>
 8011ce2:	2220      	movs	r2, #32
 8011ce4:	782b      	ldrb	r3, [r5, #0]
 8011ce6:	4393      	bics	r3, r2
 8011ce8:	2b58      	cmp	r3, #88	; 0x58
 8011cea:	d000      	beq.n	8011cee <_strtoull_l.constprop.0+0x4e>
 8011cec:	e078      	b.n	8011de0 <_strtoull_l.constprop.0+0x140>
 8011cee:	2610      	movs	r6, #16
 8011cf0:	786c      	ldrb	r4, [r5, #1]
 8011cf2:	3502      	adds	r5, #2
 8011cf4:	17f7      	asrs	r7, r6, #31
 8011cf6:	0032      	movs	r2, r6
 8011cf8:	003b      	movs	r3, r7
 8011cfa:	2001      	movs	r0, #1
 8011cfc:	4240      	negs	r0, r0
 8011cfe:	17c1      	asrs	r1, r0, #31
 8011d00:	f7ee fbd0 	bl	80004a4 <__aeabi_uldivmod>
 8011d04:	0032      	movs	r2, r6
 8011d06:	9007      	str	r0, [sp, #28]
 8011d08:	9103      	str	r1, [sp, #12]
 8011d0a:	003b      	movs	r3, r7
 8011d0c:	2001      	movs	r0, #1
 8011d0e:	4240      	negs	r0, r0
 8011d10:	17c1      	asrs	r1, r0, #31
 8011d12:	f7ee fbc7 	bl	80004a4 <__aeabi_uldivmod>
 8011d16:	2300      	movs	r3, #0
 8011d18:	2000      	movs	r0, #0
 8011d1a:	2100      	movs	r1, #0
 8011d1c:	9208      	str	r2, [sp, #32]
 8011d1e:	0022      	movs	r2, r4
 8011d20:	3a30      	subs	r2, #48	; 0x30
 8011d22:	2a09      	cmp	r2, #9
 8011d24:	d82d      	bhi.n	8011d82 <_strtoull_l.constprop.0+0xe2>
 8011d26:	0014      	movs	r4, r2
 8011d28:	42a6      	cmp	r6, r4
 8011d2a:	dd39      	ble.n	8011da0 <_strtoull_l.constprop.0+0x100>
 8011d2c:	1c5a      	adds	r2, r3, #1
 8011d2e:	d01f      	beq.n	8011d70 <_strtoull_l.constprop.0+0xd0>
 8011d30:	9b03      	ldr	r3, [sp, #12]
 8011d32:	4299      	cmp	r1, r3
 8011d34:	d831      	bhi.n	8011d9a <_strtoull_l.constprop.0+0xfa>
 8011d36:	d102      	bne.n	8011d3e <_strtoull_l.constprop.0+0x9e>
 8011d38:	9b07      	ldr	r3, [sp, #28]
 8011d3a:	4298      	cmp	r0, r3
 8011d3c:	d82d      	bhi.n	8011d9a <_strtoull_l.constprop.0+0xfa>
 8011d3e:	9b07      	ldr	r3, [sp, #28]
 8011d40:	4283      	cmp	r3, r0
 8011d42:	d107      	bne.n	8011d54 <_strtoull_l.constprop.0+0xb4>
 8011d44:	9b03      	ldr	r3, [sp, #12]
 8011d46:	428b      	cmp	r3, r1
 8011d48:	d104      	bne.n	8011d54 <_strtoull_l.constprop.0+0xb4>
 8011d4a:	2301      	movs	r3, #1
 8011d4c:	9a08      	ldr	r2, [sp, #32]
 8011d4e:	425b      	negs	r3, r3
 8011d50:	42a2      	cmp	r2, r4
 8011d52:	db0d      	blt.n	8011d70 <_strtoull_l.constprop.0+0xd0>
 8011d54:	000b      	movs	r3, r1
 8011d56:	0002      	movs	r2, r0
 8011d58:	0039      	movs	r1, r7
 8011d5a:	0030      	movs	r0, r6
 8011d5c:	f7ee fbc2 	bl	80004e4 <__aeabi_lmul>
 8011d60:	17e3      	asrs	r3, r4, #31
 8011d62:	9404      	str	r4, [sp, #16]
 8011d64:	9305      	str	r3, [sp, #20]
 8011d66:	9b04      	ldr	r3, [sp, #16]
 8011d68:	9c05      	ldr	r4, [sp, #20]
 8011d6a:	18c0      	adds	r0, r0, r3
 8011d6c:	4161      	adcs	r1, r4
 8011d6e:	2301      	movs	r3, #1
 8011d70:	782c      	ldrb	r4, [r5, #0]
 8011d72:	3501      	adds	r5, #1
 8011d74:	e7d3      	b.n	8011d1e <_strtoull_l.constprop.0+0x7e>
 8011d76:	9706      	str	r7, [sp, #24]
 8011d78:	2c2b      	cmp	r4, #43	; 0x2b
 8011d7a:	d1ab      	bne.n	8011cd4 <_strtoull_l.constprop.0+0x34>
 8011d7c:	781c      	ldrb	r4, [r3, #0]
 8011d7e:	1c95      	adds	r5, r2, #2
 8011d80:	e7a8      	b.n	8011cd4 <_strtoull_l.constprop.0+0x34>
 8011d82:	0022      	movs	r2, r4
 8011d84:	3a41      	subs	r2, #65	; 0x41
 8011d86:	2a19      	cmp	r2, #25
 8011d88:	d801      	bhi.n	8011d8e <_strtoull_l.constprop.0+0xee>
 8011d8a:	3c37      	subs	r4, #55	; 0x37
 8011d8c:	e7cc      	b.n	8011d28 <_strtoull_l.constprop.0+0x88>
 8011d8e:	0022      	movs	r2, r4
 8011d90:	3a61      	subs	r2, #97	; 0x61
 8011d92:	2a19      	cmp	r2, #25
 8011d94:	d804      	bhi.n	8011da0 <_strtoull_l.constprop.0+0x100>
 8011d96:	3c57      	subs	r4, #87	; 0x57
 8011d98:	e7c6      	b.n	8011d28 <_strtoull_l.constprop.0+0x88>
 8011d9a:	2301      	movs	r3, #1
 8011d9c:	425b      	negs	r3, r3
 8011d9e:	e7e7      	b.n	8011d70 <_strtoull_l.constprop.0+0xd0>
 8011da0:	1c5a      	adds	r2, r3, #1
 8011da2:	d10a      	bne.n	8011dba <_strtoull_l.constprop.0+0x11a>
 8011da4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011da6:	3323      	adds	r3, #35	; 0x23
 8011da8:	6013      	str	r3, [r2, #0]
 8011daa:	9b02      	ldr	r3, [sp, #8]
 8011dac:	2001      	movs	r0, #1
 8011dae:	4240      	negs	r0, r0
 8011db0:	17c1      	asrs	r1, r0, #31
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d10e      	bne.n	8011dd4 <_strtoull_l.constprop.0+0x134>
 8011db6:	b00b      	add	sp, #44	; 0x2c
 8011db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011dba:	9a06      	ldr	r2, [sp, #24]
 8011dbc:	2a00      	cmp	r2, #0
 8011dbe:	d004      	beq.n	8011dca <_strtoull_l.constprop.0+0x12a>
 8011dc0:	0006      	movs	r6, r0
 8011dc2:	000f      	movs	r7, r1
 8011dc4:	2100      	movs	r1, #0
 8011dc6:	4270      	negs	r0, r6
 8011dc8:	41b9      	sbcs	r1, r7
 8011dca:	9a02      	ldr	r2, [sp, #8]
 8011dcc:	2a00      	cmp	r2, #0
 8011dce:	d0f2      	beq.n	8011db6 <_strtoull_l.constprop.0+0x116>
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d001      	beq.n	8011dd8 <_strtoull_l.constprop.0+0x138>
 8011dd4:	1e6b      	subs	r3, r5, #1
 8011dd6:	9301      	str	r3, [sp, #4]
 8011dd8:	9b02      	ldr	r3, [sp, #8]
 8011dda:	9a01      	ldr	r2, [sp, #4]
 8011ddc:	601a      	str	r2, [r3, #0]
 8011dde:	e7ea      	b.n	8011db6 <_strtoull_l.constprop.0+0x116>
 8011de0:	2430      	movs	r4, #48	; 0x30
 8011de2:	2e00      	cmp	r6, #0
 8011de4:	d000      	beq.n	8011de8 <_strtoull_l.constprop.0+0x148>
 8011de6:	e785      	b.n	8011cf4 <_strtoull_l.constprop.0+0x54>
 8011de8:	3608      	adds	r6, #8
 8011dea:	e783      	b.n	8011cf4 <_strtoull_l.constprop.0+0x54>
 8011dec:	2c30      	cmp	r4, #48	; 0x30
 8011dee:	d100      	bne.n	8011df2 <_strtoull_l.constprop.0+0x152>
 8011df0:	e777      	b.n	8011ce2 <_strtoull_l.constprop.0+0x42>
 8011df2:	260a      	movs	r6, #10
 8011df4:	e77e      	b.n	8011cf4 <_strtoull_l.constprop.0+0x54>
 8011df6:	46c0      	nop			; (mov r8, r8)
 8011df8:	08014ed1 	.word	0x08014ed1

08011dfc <_strtoull_r>:
 8011dfc:	b510      	push	{r4, lr}
 8011dfe:	f7ff ff4f 	bl	8011ca0 <_strtoull_l.constprop.0>
 8011e02:	bd10      	pop	{r4, pc}

08011e04 <_mbrtowc_r>:
 8011e04:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011e06:	0004      	movs	r4, r0
 8011e08:	0010      	movs	r0, r2
 8011e0a:	4a0b      	ldr	r2, [pc, #44]	; (8011e38 <_mbrtowc_r+0x34>)
 8011e0c:	9d06      	ldr	r5, [sp, #24]
 8011e0e:	32e4      	adds	r2, #228	; 0xe4
 8011e10:	6816      	ldr	r6, [r2, #0]
 8011e12:	2800      	cmp	r0, #0
 8011e14:	d10c      	bne.n	8011e30 <_mbrtowc_r+0x2c>
 8011e16:	2301      	movs	r3, #1
 8011e18:	0001      	movs	r1, r0
 8011e1a:	4a08      	ldr	r2, [pc, #32]	; (8011e3c <_mbrtowc_r+0x38>)
 8011e1c:	9500      	str	r5, [sp, #0]
 8011e1e:	0020      	movs	r0, r4
 8011e20:	47b0      	blx	r6
 8011e22:	1c43      	adds	r3, r0, #1
 8011e24:	d103      	bne.n	8011e2e <_mbrtowc_r+0x2a>
 8011e26:	2300      	movs	r3, #0
 8011e28:	602b      	str	r3, [r5, #0]
 8011e2a:	338a      	adds	r3, #138	; 0x8a
 8011e2c:	6023      	str	r3, [r4, #0]
 8011e2e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8011e30:	0002      	movs	r2, r0
 8011e32:	9500      	str	r5, [sp, #0]
 8011e34:	e7f3      	b.n	8011e1e <_mbrtowc_r+0x1a>
 8011e36:	46c0      	nop			; (mov r8, r8)
 8011e38:	2000044c 	.word	0x2000044c
 8011e3c:	0801525b 	.word	0x0801525b

08011e40 <iswspace>:
 8011e40:	b510      	push	{r4, lr}
 8011e42:	2100      	movs	r1, #0
 8011e44:	f000 f802 	bl	8011e4c <iswspace_l>
 8011e48:	bd10      	pop	{r4, pc}
	...

08011e4c <iswspace_l>:
 8011e4c:	0003      	movs	r3, r0
 8011e4e:	2000      	movs	r0, #0
 8011e50:	2bff      	cmp	r3, #255	; 0xff
 8011e52:	d803      	bhi.n	8011e5c <iswspace_l+0x10>
 8011e54:	4a02      	ldr	r2, [pc, #8]	; (8011e60 <iswspace_l+0x14>)
 8011e56:	5cd0      	ldrb	r0, [r2, r3]
 8011e58:	2308      	movs	r3, #8
 8011e5a:	4018      	ands	r0, r3
 8011e5c:	4770      	bx	lr
 8011e5e:	46c0      	nop			; (mov r8, r8)
 8011e60:	08014ed1 	.word	0x08014ed1

08011e64 <fiprintf>:
 8011e64:	b40e      	push	{r1, r2, r3}
 8011e66:	b517      	push	{r0, r1, r2, r4, lr}
 8011e68:	4c05      	ldr	r4, [pc, #20]	; (8011e80 <fiprintf+0x1c>)
 8011e6a:	ab05      	add	r3, sp, #20
 8011e6c:	cb04      	ldmia	r3!, {r2}
 8011e6e:	0001      	movs	r1, r0
 8011e70:	6820      	ldr	r0, [r4, #0]
 8011e72:	9301      	str	r3, [sp, #4]
 8011e74:	f000 f954 	bl	8012120 <_vfiprintf_r>
 8011e78:	bc1e      	pop	{r1, r2, r3, r4}
 8011e7a:	bc08      	pop	{r3}
 8011e7c:	b003      	add	sp, #12
 8011e7e:	4718      	bx	r3
 8011e80:	200006d8 	.word	0x200006d8

08011e84 <__ssprint_r>:
 8011e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e86:	6813      	ldr	r3, [r2, #0]
 8011e88:	b087      	sub	sp, #28
 8011e8a:	0017      	movs	r7, r2
 8011e8c:	9303      	str	r3, [sp, #12]
 8011e8e:	6893      	ldr	r3, [r2, #8]
 8011e90:	2200      	movs	r2, #0
 8011e92:	000c      	movs	r4, r1
 8011e94:	9005      	str	r0, [sp, #20]
 8011e96:	9202      	str	r2, [sp, #8]
 8011e98:	9201      	str	r2, [sp, #4]
 8011e9a:	4293      	cmp	r3, r2
 8011e9c:	d10d      	bne.n	8011eba <__ssprint_r+0x36>
 8011e9e:	2000      	movs	r0, #0
 8011ea0:	2300      	movs	r3, #0
 8011ea2:	607b      	str	r3, [r7, #4]
 8011ea4:	b007      	add	sp, #28
 8011ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ea8:	9b03      	ldr	r3, [sp, #12]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	9302      	str	r3, [sp, #8]
 8011eae:	9b03      	ldr	r3, [sp, #12]
 8011eb0:	685b      	ldr	r3, [r3, #4]
 8011eb2:	9301      	str	r3, [sp, #4]
 8011eb4:	9b03      	ldr	r3, [sp, #12]
 8011eb6:	3308      	adds	r3, #8
 8011eb8:	9303      	str	r3, [sp, #12]
 8011eba:	9a01      	ldr	r2, [sp, #4]
 8011ebc:	68a6      	ldr	r6, [r4, #8]
 8011ebe:	6823      	ldr	r3, [r4, #0]
 8011ec0:	2a00      	cmp	r2, #0
 8011ec2:	d0f1      	beq.n	8011ea8 <__ssprint_r+0x24>
 8011ec4:	42b2      	cmp	r2, r6
 8011ec6:	d32e      	bcc.n	8011f26 <__ssprint_r+0xa2>
 8011ec8:	2190      	movs	r1, #144	; 0x90
 8011eca:	89a2      	ldrh	r2, [r4, #12]
 8011ecc:	00c9      	lsls	r1, r1, #3
 8011ece:	420a      	tst	r2, r1
 8011ed0:	d029      	beq.n	8011f26 <__ssprint_r+0xa2>
 8011ed2:	2003      	movs	r0, #3
 8011ed4:	6921      	ldr	r1, [r4, #16]
 8011ed6:	1a5b      	subs	r3, r3, r1
 8011ed8:	9304      	str	r3, [sp, #16]
 8011eda:	6963      	ldr	r3, [r4, #20]
 8011edc:	4343      	muls	r3, r0
 8011ede:	0fdd      	lsrs	r5, r3, #31
 8011ee0:	18ed      	adds	r5, r5, r3
 8011ee2:	9b04      	ldr	r3, [sp, #16]
 8011ee4:	9801      	ldr	r0, [sp, #4]
 8011ee6:	3301      	adds	r3, #1
 8011ee8:	181b      	adds	r3, r3, r0
 8011eea:	106d      	asrs	r5, r5, #1
 8011eec:	42ab      	cmp	r3, r5
 8011eee:	d900      	bls.n	8011ef2 <__ssprint_r+0x6e>
 8011ef0:	001d      	movs	r5, r3
 8011ef2:	0552      	lsls	r2, r2, #21
 8011ef4:	d532      	bpl.n	8011f5c <__ssprint_r+0xd8>
 8011ef6:	0029      	movs	r1, r5
 8011ef8:	9805      	ldr	r0, [sp, #20]
 8011efa:	f7f9 fa35 	bl	800b368 <_malloc_r>
 8011efe:	1e06      	subs	r6, r0, #0
 8011f00:	d036      	beq.n	8011f70 <__ssprint_r+0xec>
 8011f02:	9a04      	ldr	r2, [sp, #16]
 8011f04:	6921      	ldr	r1, [r4, #16]
 8011f06:	f7fa fd94 	bl	800ca32 <memcpy>
 8011f0a:	89a2      	ldrh	r2, [r4, #12]
 8011f0c:	4b1e      	ldr	r3, [pc, #120]	; (8011f88 <__ssprint_r+0x104>)
 8011f0e:	401a      	ands	r2, r3
 8011f10:	2380      	movs	r3, #128	; 0x80
 8011f12:	4313      	orrs	r3, r2
 8011f14:	81a3      	strh	r3, [r4, #12]
 8011f16:	9b04      	ldr	r3, [sp, #16]
 8011f18:	6126      	str	r6, [r4, #16]
 8011f1a:	18f6      	adds	r6, r6, r3
 8011f1c:	6026      	str	r6, [r4, #0]
 8011f1e:	6165      	str	r5, [r4, #20]
 8011f20:	9e01      	ldr	r6, [sp, #4]
 8011f22:	1aed      	subs	r5, r5, r3
 8011f24:	60a5      	str	r5, [r4, #8]
 8011f26:	9b01      	ldr	r3, [sp, #4]
 8011f28:	429e      	cmp	r6, r3
 8011f2a:	d900      	bls.n	8011f2e <__ssprint_r+0xaa>
 8011f2c:	001e      	movs	r6, r3
 8011f2e:	0032      	movs	r2, r6
 8011f30:	9902      	ldr	r1, [sp, #8]
 8011f32:	6820      	ldr	r0, [r4, #0]
 8011f34:	f001 f86d 	bl	8013012 <memmove>
 8011f38:	9a01      	ldr	r2, [sp, #4]
 8011f3a:	68a3      	ldr	r3, [r4, #8]
 8011f3c:	4694      	mov	ip, r2
 8011f3e:	1b9b      	subs	r3, r3, r6
 8011f40:	60a3      	str	r3, [r4, #8]
 8011f42:	6823      	ldr	r3, [r4, #0]
 8011f44:	199b      	adds	r3, r3, r6
 8011f46:	6023      	str	r3, [r4, #0]
 8011f48:	9b02      	ldr	r3, [sp, #8]
 8011f4a:	4463      	add	r3, ip
 8011f4c:	9302      	str	r3, [sp, #8]
 8011f4e:	68bb      	ldr	r3, [r7, #8]
 8011f50:	1a9b      	subs	r3, r3, r2
 8011f52:	60bb      	str	r3, [r7, #8]
 8011f54:	d0a3      	beq.n	8011e9e <__ssprint_r+0x1a>
 8011f56:	2300      	movs	r3, #0
 8011f58:	9301      	str	r3, [sp, #4]
 8011f5a:	e7ae      	b.n	8011eba <__ssprint_r+0x36>
 8011f5c:	002a      	movs	r2, r5
 8011f5e:	9805      	ldr	r0, [sp, #20]
 8011f60:	f7ff fbc0 	bl	80116e4 <_realloc_r>
 8011f64:	1e06      	subs	r6, r0, #0
 8011f66:	d1d6      	bne.n	8011f16 <__ssprint_r+0x92>
 8011f68:	6921      	ldr	r1, [r4, #16]
 8011f6a:	9805      	ldr	r0, [sp, #20]
 8011f6c:	f7fa fddc 	bl	800cb28 <_free_r>
 8011f70:	230c      	movs	r3, #12
 8011f72:	9a05      	ldr	r2, [sp, #20]
 8011f74:	2001      	movs	r0, #1
 8011f76:	6013      	str	r3, [r2, #0]
 8011f78:	89a2      	ldrh	r2, [r4, #12]
 8011f7a:	3334      	adds	r3, #52	; 0x34
 8011f7c:	4313      	orrs	r3, r2
 8011f7e:	81a3      	strh	r3, [r4, #12]
 8011f80:	2300      	movs	r3, #0
 8011f82:	4240      	negs	r0, r0
 8011f84:	60bb      	str	r3, [r7, #8]
 8011f86:	e78b      	b.n	8011ea0 <__ssprint_r+0x1c>
 8011f88:	fffffb7f 	.word	0xfffffb7f

08011f8c <_sungetc_r>:
 8011f8c:	b570      	push	{r4, r5, r6, lr}
 8011f8e:	0014      	movs	r4, r2
 8011f90:	1c4b      	adds	r3, r1, #1
 8011f92:	d103      	bne.n	8011f9c <_sungetc_r+0x10>
 8011f94:	2501      	movs	r5, #1
 8011f96:	426d      	negs	r5, r5
 8011f98:	0028      	movs	r0, r5
 8011f9a:	bd70      	pop	{r4, r5, r6, pc}
 8011f9c:	8993      	ldrh	r3, [r2, #12]
 8011f9e:	2220      	movs	r2, #32
 8011fa0:	4393      	bics	r3, r2
 8011fa2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011fa4:	81a3      	strh	r3, [r4, #12]
 8011fa6:	b2ce      	uxtb	r6, r1
 8011fa8:	6863      	ldr	r3, [r4, #4]
 8011faa:	b2cd      	uxtb	r5, r1
 8011fac:	2a00      	cmp	r2, #0
 8011fae:	d010      	beq.n	8011fd2 <_sungetc_r+0x46>
 8011fb0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8011fb2:	429a      	cmp	r2, r3
 8011fb4:	dd07      	ble.n	8011fc6 <_sungetc_r+0x3a>
 8011fb6:	6823      	ldr	r3, [r4, #0]
 8011fb8:	3b01      	subs	r3, #1
 8011fba:	6023      	str	r3, [r4, #0]
 8011fbc:	701e      	strb	r6, [r3, #0]
 8011fbe:	6863      	ldr	r3, [r4, #4]
 8011fc0:	3301      	adds	r3, #1
 8011fc2:	6063      	str	r3, [r4, #4]
 8011fc4:	e7e8      	b.n	8011f98 <_sungetc_r+0xc>
 8011fc6:	0021      	movs	r1, r4
 8011fc8:	f000 ff1a 	bl	8012e00 <__submore>
 8011fcc:	2800      	cmp	r0, #0
 8011fce:	d0f2      	beq.n	8011fb6 <_sungetc_r+0x2a>
 8011fd0:	e7e0      	b.n	8011f94 <_sungetc_r+0x8>
 8011fd2:	6921      	ldr	r1, [r4, #16]
 8011fd4:	6822      	ldr	r2, [r4, #0]
 8011fd6:	2900      	cmp	r1, #0
 8011fd8:	d007      	beq.n	8011fea <_sungetc_r+0x5e>
 8011fda:	4291      	cmp	r1, r2
 8011fdc:	d205      	bcs.n	8011fea <_sungetc_r+0x5e>
 8011fde:	1e51      	subs	r1, r2, #1
 8011fe0:	7808      	ldrb	r0, [r1, #0]
 8011fe2:	42a8      	cmp	r0, r5
 8011fe4:	d101      	bne.n	8011fea <_sungetc_r+0x5e>
 8011fe6:	6021      	str	r1, [r4, #0]
 8011fe8:	e7ea      	b.n	8011fc0 <_sungetc_r+0x34>
 8011fea:	63e3      	str	r3, [r4, #60]	; 0x3c
 8011fec:	0023      	movs	r3, r4
 8011fee:	3340      	adds	r3, #64	; 0x40
 8011ff0:	6323      	str	r3, [r4, #48]	; 0x30
 8011ff2:	2303      	movs	r3, #3
 8011ff4:	6363      	str	r3, [r4, #52]	; 0x34
 8011ff6:	0023      	movs	r3, r4
 8011ff8:	3342      	adds	r3, #66	; 0x42
 8011ffa:	63a2      	str	r2, [r4, #56]	; 0x38
 8011ffc:	701e      	strb	r6, [r3, #0]
 8011ffe:	6023      	str	r3, [r4, #0]
 8012000:	2301      	movs	r3, #1
 8012002:	e7de      	b.n	8011fc2 <_sungetc_r+0x36>

08012004 <__ssrefill_r>:
 8012004:	b510      	push	{r4, lr}
 8012006:	000c      	movs	r4, r1
 8012008:	6b09      	ldr	r1, [r1, #48]	; 0x30
 801200a:	2900      	cmp	r1, #0
 801200c:	d00e      	beq.n	801202c <__ssrefill_r+0x28>
 801200e:	0023      	movs	r3, r4
 8012010:	3340      	adds	r3, #64	; 0x40
 8012012:	4299      	cmp	r1, r3
 8012014:	d001      	beq.n	801201a <__ssrefill_r+0x16>
 8012016:	f7fa fd87 	bl	800cb28 <_free_r>
 801201a:	2000      	movs	r0, #0
 801201c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801201e:	6320      	str	r0, [r4, #48]	; 0x30
 8012020:	6063      	str	r3, [r4, #4]
 8012022:	4283      	cmp	r3, r0
 8012024:	d002      	beq.n	801202c <__ssrefill_r+0x28>
 8012026:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012028:	6023      	str	r3, [r4, #0]
 801202a:	bd10      	pop	{r4, pc}
 801202c:	6923      	ldr	r3, [r4, #16]
 801202e:	2001      	movs	r0, #1
 8012030:	6023      	str	r3, [r4, #0]
 8012032:	2300      	movs	r3, #0
 8012034:	89a2      	ldrh	r2, [r4, #12]
 8012036:	6063      	str	r3, [r4, #4]
 8012038:	3320      	adds	r3, #32
 801203a:	4313      	orrs	r3, r2
 801203c:	81a3      	strh	r3, [r4, #12]
 801203e:	4240      	negs	r0, r0
 8012040:	e7f3      	b.n	801202a <__ssrefill_r+0x26>

08012042 <_sfread_r>:
 8012042:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012044:	0014      	movs	r4, r2
 8012046:	435c      	muls	r4, r3
 8012048:	b087      	sub	sp, #28
 801204a:	1e26      	subs	r6, r4, #0
 801204c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801204e:	9005      	str	r0, [sp, #20]
 8012050:	9101      	str	r1, [sp, #4]
 8012052:	9202      	str	r2, [sp, #8]
 8012054:	9303      	str	r3, [sp, #12]
 8012056:	d11e      	bne.n	8012096 <_sfread_r+0x54>
 8012058:	0020      	movs	r0, r4
 801205a:	b007      	add	sp, #28
 801205c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801205e:	003a      	movs	r2, r7
 8012060:	9801      	ldr	r0, [sp, #4]
 8012062:	f7fa fce6 	bl	800ca32 <memcpy>
 8012066:	682b      	ldr	r3, [r5, #0]
 8012068:	0029      	movs	r1, r5
 801206a:	19db      	adds	r3, r3, r7
 801206c:	602b      	str	r3, [r5, #0]
 801206e:	2300      	movs	r3, #0
 8012070:	606b      	str	r3, [r5, #4]
 8012072:	9b01      	ldr	r3, [sp, #4]
 8012074:	9805      	ldr	r0, [sp, #20]
 8012076:	19db      	adds	r3, r3, r7
 8012078:	9301      	str	r3, [sp, #4]
 801207a:	1bf3      	subs	r3, r6, r7
 801207c:	9304      	str	r3, [sp, #16]
 801207e:	f7ff ffc1 	bl	8012004 <__ssrefill_r>
 8012082:	2800      	cmp	r0, #0
 8012084:	d006      	beq.n	8012094 <_sfread_r+0x52>
 8012086:	193c      	adds	r4, r7, r4
 8012088:	1ba0      	subs	r0, r4, r6
 801208a:	9902      	ldr	r1, [sp, #8]
 801208c:	f7ee f856 	bl	800013c <__udivsi3>
 8012090:	0004      	movs	r4, r0
 8012092:	e7e1      	b.n	8012058 <_sfread_r+0x16>
 8012094:	9e04      	ldr	r6, [sp, #16]
 8012096:	686f      	ldr	r7, [r5, #4]
 8012098:	6829      	ldr	r1, [r5, #0]
 801209a:	42b7      	cmp	r7, r6
 801209c:	d3df      	bcc.n	801205e <_sfread_r+0x1c>
 801209e:	0032      	movs	r2, r6
 80120a0:	9801      	ldr	r0, [sp, #4]
 80120a2:	f7fa fcc6 	bl	800ca32 <memcpy>
 80120a6:	686b      	ldr	r3, [r5, #4]
 80120a8:	9c03      	ldr	r4, [sp, #12]
 80120aa:	1b9b      	subs	r3, r3, r6
 80120ac:	606b      	str	r3, [r5, #4]
 80120ae:	682b      	ldr	r3, [r5, #0]
 80120b0:	199b      	adds	r3, r3, r6
 80120b2:	602b      	str	r3, [r5, #0]
 80120b4:	e7d0      	b.n	8012058 <_sfread_r+0x16>

080120b6 <__sprint_r>:
 80120b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120b8:	6893      	ldr	r3, [r2, #8]
 80120ba:	b085      	sub	sp, #20
 80120bc:	9001      	str	r0, [sp, #4]
 80120be:	000d      	movs	r5, r1
 80120c0:	0014      	movs	r4, r2
 80120c2:	1e18      	subs	r0, r3, #0
 80120c4:	d018      	beq.n	80120f8 <__sprint_r+0x42>
 80120c6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80120c8:	049b      	lsls	r3, r3, #18
 80120ca:	d524      	bpl.n	8012116 <__sprint_r+0x60>
 80120cc:	6817      	ldr	r7, [r2, #0]
 80120ce:	2600      	movs	r6, #0
 80120d0:	683b      	ldr	r3, [r7, #0]
 80120d2:	9302      	str	r3, [sp, #8]
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	9300      	str	r3, [sp, #0]
 80120d8:	089b      	lsrs	r3, r3, #2
 80120da:	9303      	str	r3, [sp, #12]
 80120dc:	9b03      	ldr	r3, [sp, #12]
 80120de:	42b3      	cmp	r3, r6
 80120e0:	dc0e      	bgt.n	8012100 <__sprint_r+0x4a>
 80120e2:	2203      	movs	r2, #3
 80120e4:	9b00      	ldr	r3, [sp, #0]
 80120e6:	68a0      	ldr	r0, [r4, #8]
 80120e8:	4393      	bics	r3, r2
 80120ea:	1ac0      	subs	r0, r0, r3
 80120ec:	60a0      	str	r0, [r4, #8]
 80120ee:	3708      	adds	r7, #8
 80120f0:	2800      	cmp	r0, #0
 80120f2:	d1ec      	bne.n	80120ce <__sprint_r+0x18>
 80120f4:	2300      	movs	r3, #0
 80120f6:	60a3      	str	r3, [r4, #8]
 80120f8:	2300      	movs	r3, #0
 80120fa:	6063      	str	r3, [r4, #4]
 80120fc:	b005      	add	sp, #20
 80120fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012100:	9902      	ldr	r1, [sp, #8]
 8012102:	00b3      	lsls	r3, r6, #2
 8012104:	58c9      	ldr	r1, [r1, r3]
 8012106:	002a      	movs	r2, r5
 8012108:	9801      	ldr	r0, [sp, #4]
 801210a:	f000 ff59 	bl	8012fc0 <_fputwc_r>
 801210e:	1c43      	adds	r3, r0, #1
 8012110:	d0f0      	beq.n	80120f4 <__sprint_r+0x3e>
 8012112:	3601      	adds	r6, #1
 8012114:	e7e2      	b.n	80120dc <__sprint_r+0x26>
 8012116:	9801      	ldr	r0, [sp, #4]
 8012118:	f000 fd14 	bl	8012b44 <__sfvwrite_r>
 801211c:	e7ea      	b.n	80120f4 <__sprint_r+0x3e>
	...

08012120 <_vfiprintf_r>:
 8012120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012122:	b0c1      	sub	sp, #260	; 0x104
 8012124:	001c      	movs	r4, r3
 8012126:	001f      	movs	r7, r3
 8012128:	9006      	str	r0, [sp, #24]
 801212a:	9103      	str	r1, [sp, #12]
 801212c:	9207      	str	r2, [sp, #28]
 801212e:	2800      	cmp	r0, #0
 8012130:	d004      	beq.n	801213c <_vfiprintf_r+0x1c>
 8012132:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012134:	2b00      	cmp	r3, #0
 8012136:	d101      	bne.n	801213c <_vfiprintf_r+0x1c>
 8012138:	f7fa fa98 	bl	800c66c <__sinit>
 801213c:	9b03      	ldr	r3, [sp, #12]
 801213e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012140:	07db      	lsls	r3, r3, #31
 8012142:	d407      	bmi.n	8012154 <_vfiprintf_r+0x34>
 8012144:	9b03      	ldr	r3, [sp, #12]
 8012146:	899b      	ldrh	r3, [r3, #12]
 8012148:	059b      	lsls	r3, r3, #22
 801214a:	d403      	bmi.n	8012154 <_vfiprintf_r+0x34>
 801214c:	9b03      	ldr	r3, [sp, #12]
 801214e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8012150:	f7fa fc62 	bl	800ca18 <__retarget_lock_acquire_recursive>
 8012154:	9b03      	ldr	r3, [sp, #12]
 8012156:	220c      	movs	r2, #12
 8012158:	5e9a      	ldrsh	r2, [r3, r2]
 801215a:	2380      	movs	r3, #128	; 0x80
 801215c:	019b      	lsls	r3, r3, #6
 801215e:	421a      	tst	r2, r3
 8012160:	d107      	bne.n	8012172 <_vfiprintf_r+0x52>
 8012162:	4313      	orrs	r3, r2
 8012164:	9a03      	ldr	r2, [sp, #12]
 8012166:	8193      	strh	r3, [r2, #12]
 8012168:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801216a:	4aa3      	ldr	r2, [pc, #652]	; (80123f8 <_vfiprintf_r+0x2d8>)
 801216c:	4013      	ands	r3, r2
 801216e:	9a03      	ldr	r2, [sp, #12]
 8012170:	6653      	str	r3, [r2, #100]	; 0x64
 8012172:	9b03      	ldr	r3, [sp, #12]
 8012174:	899b      	ldrh	r3, [r3, #12]
 8012176:	071b      	lsls	r3, r3, #28
 8012178:	d503      	bpl.n	8012182 <_vfiprintf_r+0x62>
 801217a:	9b03      	ldr	r3, [sp, #12]
 801217c:	691b      	ldr	r3, [r3, #16]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d118      	bne.n	80121b4 <_vfiprintf_r+0x94>
 8012182:	9903      	ldr	r1, [sp, #12]
 8012184:	9806      	ldr	r0, [sp, #24]
 8012186:	f000 fe79 	bl	8012e7c <__swsetup_r>
 801218a:	2800      	cmp	r0, #0
 801218c:	d012      	beq.n	80121b4 <_vfiprintf_r+0x94>
 801218e:	9b03      	ldr	r3, [sp, #12]
 8012190:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012192:	07db      	lsls	r3, r3, #31
 8012194:	d505      	bpl.n	80121a2 <_vfiprintf_r+0x82>
 8012196:	2301      	movs	r3, #1
 8012198:	425b      	negs	r3, r3
 801219a:	9308      	str	r3, [sp, #32]
 801219c:	9808      	ldr	r0, [sp, #32]
 801219e:	b041      	add	sp, #260	; 0x104
 80121a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121a2:	9b03      	ldr	r3, [sp, #12]
 80121a4:	899b      	ldrh	r3, [r3, #12]
 80121a6:	059b      	lsls	r3, r3, #22
 80121a8:	d4f5      	bmi.n	8012196 <_vfiprintf_r+0x76>
 80121aa:	9b03      	ldr	r3, [sp, #12]
 80121ac:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80121ae:	f7fa fc34 	bl	800ca1a <__retarget_lock_release_recursive>
 80121b2:	e7f0      	b.n	8012196 <_vfiprintf_r+0x76>
 80121b4:	221a      	movs	r2, #26
 80121b6:	9b03      	ldr	r3, [sp, #12]
 80121b8:	899b      	ldrh	r3, [r3, #12]
 80121ba:	401a      	ands	r2, r3
 80121bc:	2a0a      	cmp	r2, #10
 80121be:	d116      	bne.n	80121ee <_vfiprintf_r+0xce>
 80121c0:	9a03      	ldr	r2, [sp, #12]
 80121c2:	210e      	movs	r1, #14
 80121c4:	5e52      	ldrsh	r2, [r2, r1]
 80121c6:	2a00      	cmp	r2, #0
 80121c8:	db11      	blt.n	80121ee <_vfiprintf_r+0xce>
 80121ca:	9a03      	ldr	r2, [sp, #12]
 80121cc:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80121ce:	07d2      	lsls	r2, r2, #31
 80121d0:	d405      	bmi.n	80121de <_vfiprintf_r+0xbe>
 80121d2:	059b      	lsls	r3, r3, #22
 80121d4:	d403      	bmi.n	80121de <_vfiprintf_r+0xbe>
 80121d6:	9b03      	ldr	r3, [sp, #12]
 80121d8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80121da:	f7fa fc1e 	bl	800ca1a <__retarget_lock_release_recursive>
 80121de:	0023      	movs	r3, r4
 80121e0:	9a07      	ldr	r2, [sp, #28]
 80121e2:	9903      	ldr	r1, [sp, #12]
 80121e4:	9806      	ldr	r0, [sp, #24]
 80121e6:	f000 fc69 	bl	8012abc <__sbprintf>
 80121ea:	9008      	str	r0, [sp, #32]
 80121ec:	e7d6      	b.n	801219c <_vfiprintf_r+0x7c>
 80121ee:	2300      	movs	r3, #0
 80121f0:	ad17      	add	r5, sp, #92	; 0x5c
 80121f2:	9514      	str	r5, [sp, #80]	; 0x50
 80121f4:	9316      	str	r3, [sp, #88]	; 0x58
 80121f6:	9315      	str	r3, [sp, #84]	; 0x54
 80121f8:	930c      	str	r3, [sp, #48]	; 0x30
 80121fa:	930d      	str	r3, [sp, #52]	; 0x34
 80121fc:	930e      	str	r3, [sp, #56]	; 0x38
 80121fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8012200:	9308      	str	r3, [sp, #32]
 8012202:	9c07      	ldr	r4, [sp, #28]
 8012204:	7823      	ldrb	r3, [r4, #0]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d002      	beq.n	8012210 <_vfiprintf_r+0xf0>
 801220a:	2b25      	cmp	r3, #37	; 0x25
 801220c:	d000      	beq.n	8012210 <_vfiprintf_r+0xf0>
 801220e:	e08d      	b.n	801232c <_vfiprintf_r+0x20c>
 8012210:	9b07      	ldr	r3, [sp, #28]
 8012212:	1ae6      	subs	r6, r4, r3
 8012214:	429c      	cmp	r4, r3
 8012216:	d016      	beq.n	8012246 <_vfiprintf_r+0x126>
 8012218:	602b      	str	r3, [r5, #0]
 801221a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801221c:	606e      	str	r6, [r5, #4]
 801221e:	199b      	adds	r3, r3, r6
 8012220:	9316      	str	r3, [sp, #88]	; 0x58
 8012222:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012224:	3508      	adds	r5, #8
 8012226:	3301      	adds	r3, #1
 8012228:	9315      	str	r3, [sp, #84]	; 0x54
 801222a:	2b07      	cmp	r3, #7
 801222c:	dd08      	ble.n	8012240 <_vfiprintf_r+0x120>
 801222e:	9903      	ldr	r1, [sp, #12]
 8012230:	9806      	ldr	r0, [sp, #24]
 8012232:	aa14      	add	r2, sp, #80	; 0x50
 8012234:	f7ff ff3f 	bl	80120b6 <__sprint_r>
 8012238:	2800      	cmp	r0, #0
 801223a:	d000      	beq.n	801223e <_vfiprintf_r+0x11e>
 801223c:	e3d9      	b.n	80129f2 <_vfiprintf_r+0x8d2>
 801223e:	ad17      	add	r5, sp, #92	; 0x5c
 8012240:	9b08      	ldr	r3, [sp, #32]
 8012242:	199b      	adds	r3, r3, r6
 8012244:	9308      	str	r3, [sp, #32]
 8012246:	7823      	ldrb	r3, [r4, #0]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d101      	bne.n	8012250 <_vfiprintf_r+0x130>
 801224c:	f000 fbf6 	bl	8012a3c <_vfiprintf_r+0x91c>
 8012250:	2200      	movs	r2, #0
 8012252:	a912      	add	r1, sp, #72	; 0x48
 8012254:	70ca      	strb	r2, [r1, #3]
 8012256:	2101      	movs	r1, #1
 8012258:	1c63      	adds	r3, r4, #1
 801225a:	0014      	movs	r4, r2
 801225c:	4249      	negs	r1, r1
 801225e:	9105      	str	r1, [sp, #20]
 8012260:	9209      	str	r2, [sp, #36]	; 0x24
 8012262:	1c5a      	adds	r2, r3, #1
 8012264:	781b      	ldrb	r3, [r3, #0]
 8012266:	9207      	str	r2, [sp, #28]
 8012268:	0018      	movs	r0, r3
 801226a:	3820      	subs	r0, #32
 801226c:	285a      	cmp	r0, #90	; 0x5a
 801226e:	d900      	bls.n	8012272 <_vfiprintf_r+0x152>
 8012270:	e362      	b.n	8012938 <_vfiprintf_r+0x818>
 8012272:	f7ed ff59 	bl	8000128 <__gnu_thumb1_case_uhi>
 8012276:	0078      	.short	0x0078
 8012278:	03610361 	.word	0x03610361
 801227c:	03610081 	.word	0x03610081
 8012280:	03610361 	.word	0x03610361
 8012284:	0361005d 	.word	0x0361005d
 8012288:	00830361 	.word	0x00830361
 801228c:	0361008b 	.word	0x0361008b
 8012290:	008f0089 	.word	0x008f0089
 8012294:	00ad0361 	.word	0x00ad0361
 8012298:	00af00af 	.word	0x00af00af
 801229c:	00af00af 	.word	0x00af00af
 80122a0:	00af00af 	.word	0x00af00af
 80122a4:	00af00af 	.word	0x00af00af
 80122a8:	036100af 	.word	0x036100af
 80122ac:	03610361 	.word	0x03610361
 80122b0:	03610361 	.word	0x03610361
 80122b4:	03610361 	.word	0x03610361
 80122b8:	03610361 	.word	0x03610361
 80122bc:	00e600da 	.word	0x00e600da
 80122c0:	03610361 	.word	0x03610361
 80122c4:	03610361 	.word	0x03610361
 80122c8:	03610361 	.word	0x03610361
 80122cc:	03610361 	.word	0x03610361
 80122d0:	03610361 	.word	0x03610361
 80122d4:	03610143 	.word	0x03610143
 80122d8:	03610361 	.word	0x03610361
 80122dc:	03610182 	.word	0x03610182
 80122e0:	0361027c 	.word	0x0361027c
 80122e4:	02ae0361 	.word	0x02ae0361
 80122e8:	03610361 	.word	0x03610361
 80122ec:	03610361 	.word	0x03610361
 80122f0:	03610361 	.word	0x03610361
 80122f4:	03610361 	.word	0x03610361
 80122f8:	03610361 	.word	0x03610361
 80122fc:	00e800da 	.word	0x00e800da
 8012300:	03610361 	.word	0x03610361
 8012304:	00c30361 	.word	0x00c30361
 8012308:	00d600e8 	.word	0x00d600e8
 801230c:	00cf0361 	.word	0x00cf0361
 8012310:	01260361 	.word	0x01260361
 8012314:	01740145 	.word	0x01740145
 8012318:	036100d6 	.word	0x036100d6
 801231c:	007f0182 	.word	0x007f0182
 8012320:	0361027e 	.word	0x0361027e
 8012324:	02cd0361 	.word	0x02cd0361
 8012328:	007f0361 	.word	0x007f0361
 801232c:	3401      	adds	r4, #1
 801232e:	e769      	b.n	8012204 <_vfiprintf_r+0xe4>
 8012330:	9806      	ldr	r0, [sp, #24]
 8012332:	f7fe fa47 	bl	80107c4 <_localeconv_r>
 8012336:	6843      	ldr	r3, [r0, #4]
 8012338:	0018      	movs	r0, r3
 801233a:	930f      	str	r3, [sp, #60]	; 0x3c
 801233c:	f7ed fee2 	bl	8000104 <strlen>
 8012340:	900e      	str	r0, [sp, #56]	; 0x38
 8012342:	9806      	ldr	r0, [sp, #24]
 8012344:	f7fe fa3e 	bl	80107c4 <_localeconv_r>
 8012348:	6883      	ldr	r3, [r0, #8]
 801234a:	930d      	str	r3, [sp, #52]	; 0x34
 801234c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801234e:	2b00      	cmp	r3, #0
 8012350:	d010      	beq.n	8012374 <_vfiprintf_r+0x254>
 8012352:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012354:	2b00      	cmp	r3, #0
 8012356:	d00d      	beq.n	8012374 <_vfiprintf_r+0x254>
 8012358:	781b      	ldrb	r3, [r3, #0]
 801235a:	2b00      	cmp	r3, #0
 801235c:	d00a      	beq.n	8012374 <_vfiprintf_r+0x254>
 801235e:	2380      	movs	r3, #128	; 0x80
 8012360:	00db      	lsls	r3, r3, #3
 8012362:	431c      	orrs	r4, r3
 8012364:	e006      	b.n	8012374 <_vfiprintf_r+0x254>
 8012366:	ab12      	add	r3, sp, #72	; 0x48
 8012368:	78da      	ldrb	r2, [r3, #3]
 801236a:	3303      	adds	r3, #3
 801236c:	2a00      	cmp	r2, #0
 801236e:	d101      	bne.n	8012374 <_vfiprintf_r+0x254>
 8012370:	3220      	adds	r2, #32
 8012372:	701a      	strb	r2, [r3, #0]
 8012374:	9b07      	ldr	r3, [sp, #28]
 8012376:	e774      	b.n	8012262 <_vfiprintf_r+0x142>
 8012378:	2301      	movs	r3, #1
 801237a:	e7f2      	b.n	8012362 <_vfiprintf_r+0x242>
 801237c:	cf08      	ldmia	r7!, {r3}
 801237e:	9309      	str	r3, [sp, #36]	; 0x24
 8012380:	2b00      	cmp	r3, #0
 8012382:	daf7      	bge.n	8012374 <_vfiprintf_r+0x254>
 8012384:	425b      	negs	r3, r3
 8012386:	9309      	str	r3, [sp, #36]	; 0x24
 8012388:	2304      	movs	r3, #4
 801238a:	e7ea      	b.n	8012362 <_vfiprintf_r+0x242>
 801238c:	222b      	movs	r2, #43	; 0x2b
 801238e:	ab12      	add	r3, sp, #72	; 0x48
 8012390:	70da      	strb	r2, [r3, #3]
 8012392:	e7ef      	b.n	8012374 <_vfiprintf_r+0x254>
 8012394:	9b07      	ldr	r3, [sp, #28]
 8012396:	1c5a      	adds	r2, r3, #1
 8012398:	781b      	ldrb	r3, [r3, #0]
 801239a:	2b2a      	cmp	r3, #42	; 0x2a
 801239c:	d00f      	beq.n	80123be <_vfiprintf_r+0x29e>
 801239e:	2100      	movs	r1, #0
 80123a0:	9105      	str	r1, [sp, #20]
 80123a2:	0019      	movs	r1, r3
 80123a4:	3930      	subs	r1, #48	; 0x30
 80123a6:	9207      	str	r2, [sp, #28]
 80123a8:	2909      	cmp	r1, #9
 80123aa:	d900      	bls.n	80123ae <_vfiprintf_r+0x28e>
 80123ac:	e75c      	b.n	8012268 <_vfiprintf_r+0x148>
 80123ae:	200a      	movs	r0, #10
 80123b0:	9b05      	ldr	r3, [sp, #20]
 80123b2:	4343      	muls	r3, r0
 80123b4:	185b      	adds	r3, r3, r1
 80123b6:	9305      	str	r3, [sp, #20]
 80123b8:	7813      	ldrb	r3, [r2, #0]
 80123ba:	3201      	adds	r2, #1
 80123bc:	e7f1      	b.n	80123a2 <_vfiprintf_r+0x282>
 80123be:	cf08      	ldmia	r7!, {r3}
 80123c0:	9305      	str	r3, [sp, #20]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	da02      	bge.n	80123cc <_vfiprintf_r+0x2ac>
 80123c6:	2301      	movs	r3, #1
 80123c8:	425b      	negs	r3, r3
 80123ca:	9305      	str	r3, [sp, #20]
 80123cc:	9207      	str	r2, [sp, #28]
 80123ce:	e7d1      	b.n	8012374 <_vfiprintf_r+0x254>
 80123d0:	2380      	movs	r3, #128	; 0x80
 80123d2:	e7c6      	b.n	8012362 <_vfiprintf_r+0x242>
 80123d4:	2100      	movs	r1, #0
 80123d6:	9a07      	ldr	r2, [sp, #28]
 80123d8:	9109      	str	r1, [sp, #36]	; 0x24
 80123da:	200a      	movs	r0, #10
 80123dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80123de:	3b30      	subs	r3, #48	; 0x30
 80123e0:	4341      	muls	r1, r0
 80123e2:	185b      	adds	r3, r3, r1
 80123e4:	9309      	str	r3, [sp, #36]	; 0x24
 80123e6:	0013      	movs	r3, r2
 80123e8:	781b      	ldrb	r3, [r3, #0]
 80123ea:	3201      	adds	r2, #1
 80123ec:	0019      	movs	r1, r3
 80123ee:	3930      	subs	r1, #48	; 0x30
 80123f0:	9207      	str	r2, [sp, #28]
 80123f2:	2909      	cmp	r1, #9
 80123f4:	d9f1      	bls.n	80123da <_vfiprintf_r+0x2ba>
 80123f6:	e737      	b.n	8012268 <_vfiprintf_r+0x148>
 80123f8:	ffffdfff 	.word	0xffffdfff
 80123fc:	9b07      	ldr	r3, [sp, #28]
 80123fe:	781b      	ldrb	r3, [r3, #0]
 8012400:	2b68      	cmp	r3, #104	; 0x68
 8012402:	d105      	bne.n	8012410 <_vfiprintf_r+0x2f0>
 8012404:	9b07      	ldr	r3, [sp, #28]
 8012406:	3301      	adds	r3, #1
 8012408:	9307      	str	r3, [sp, #28]
 801240a:	2380      	movs	r3, #128	; 0x80
 801240c:	009b      	lsls	r3, r3, #2
 801240e:	e7a8      	b.n	8012362 <_vfiprintf_r+0x242>
 8012410:	2340      	movs	r3, #64	; 0x40
 8012412:	e7a6      	b.n	8012362 <_vfiprintf_r+0x242>
 8012414:	9b07      	ldr	r3, [sp, #28]
 8012416:	781b      	ldrb	r3, [r3, #0]
 8012418:	2b6c      	cmp	r3, #108	; 0x6c
 801241a:	d104      	bne.n	8012426 <_vfiprintf_r+0x306>
 801241c:	9b07      	ldr	r3, [sp, #28]
 801241e:	3301      	adds	r3, #1
 8012420:	9307      	str	r3, [sp, #28]
 8012422:	2320      	movs	r3, #32
 8012424:	e79d      	b.n	8012362 <_vfiprintf_r+0x242>
 8012426:	2310      	movs	r3, #16
 8012428:	e79b      	b.n	8012362 <_vfiprintf_r+0x242>
 801242a:	003a      	movs	r2, r7
 801242c:	ca08      	ldmia	r2!, {r3}
 801242e:	ae27      	add	r6, sp, #156	; 0x9c
 8012430:	7033      	strb	r3, [r6, #0]
 8012432:	2300      	movs	r3, #0
 8012434:	9204      	str	r2, [sp, #16]
 8012436:	aa12      	add	r2, sp, #72	; 0x48
 8012438:	70d3      	strb	r3, [r2, #3]
 801243a:	2201      	movs	r2, #1
 801243c:	930b      	str	r3, [sp, #44]	; 0x2c
 801243e:	9205      	str	r2, [sp, #20]
 8012440:	e0b0      	b.n	80125a4 <_vfiprintf_r+0x484>
 8012442:	2310      	movs	r3, #16
 8012444:	431c      	orrs	r4, r3
 8012446:	06a3      	lsls	r3, r4, #26
 8012448:	d52a      	bpl.n	80124a0 <_vfiprintf_r+0x380>
 801244a:	2307      	movs	r3, #7
 801244c:	3707      	adds	r7, #7
 801244e:	439f      	bics	r7, r3
 8012450:	0039      	movs	r1, r7
 8012452:	c90c      	ldmia	r1!, {r2, r3}
 8012454:	9200      	str	r2, [sp, #0]
 8012456:	9301      	str	r3, [sp, #4]
 8012458:	9104      	str	r1, [sp, #16]
 801245a:	9a01      	ldr	r2, [sp, #4]
 801245c:	2301      	movs	r3, #1
 801245e:	2a00      	cmp	r2, #0
 8012460:	da09      	bge.n	8012476 <_vfiprintf_r+0x356>
 8012462:	9e00      	ldr	r6, [sp, #0]
 8012464:	9f01      	ldr	r7, [sp, #4]
 8012466:	2200      	movs	r2, #0
 8012468:	4271      	negs	r1, r6
 801246a:	41ba      	sbcs	r2, r7
 801246c:	9100      	str	r1, [sp, #0]
 801246e:	9201      	str	r2, [sp, #4]
 8012470:	212d      	movs	r1, #45	; 0x2d
 8012472:	aa12      	add	r2, sp, #72	; 0x48
 8012474:	70d1      	strb	r1, [r2, #3]
 8012476:	9901      	ldr	r1, [sp, #4]
 8012478:	9a00      	ldr	r2, [sp, #0]
 801247a:	430a      	orrs	r2, r1
 801247c:	9905      	ldr	r1, [sp, #20]
 801247e:	3101      	adds	r1, #1
 8012480:	d100      	bne.n	8012484 <_vfiprintf_r+0x364>
 8012482:	e2e9      	b.n	8012a58 <_vfiprintf_r+0x938>
 8012484:	2180      	movs	r1, #128	; 0x80
 8012486:	0027      	movs	r7, r4
 8012488:	438f      	bics	r7, r1
 801248a:	2a00      	cmp	r2, #0
 801248c:	d000      	beq.n	8012490 <_vfiprintf_r+0x370>
 801248e:	e2e7      	b.n	8012a60 <_vfiprintf_r+0x940>
 8012490:	9a05      	ldr	r2, [sp, #20]
 8012492:	2a00      	cmp	r2, #0
 8012494:	d100      	bne.n	8012498 <_vfiprintf_r+0x378>
 8012496:	e243      	b.n	8012920 <_vfiprintf_r+0x800>
 8012498:	2b01      	cmp	r3, #1
 801249a:	d000      	beq.n	801249e <_vfiprintf_r+0x37e>
 801249c:	e2e3      	b.n	8012a66 <_vfiprintf_r+0x946>
 801249e:	e1e7      	b.n	8012870 <_vfiprintf_r+0x750>
 80124a0:	003a      	movs	r2, r7
 80124a2:	ca08      	ldmia	r2!, {r3}
 80124a4:	9204      	str	r2, [sp, #16]
 80124a6:	06e2      	lsls	r2, r4, #27
 80124a8:	d503      	bpl.n	80124b2 <_vfiprintf_r+0x392>
 80124aa:	9300      	str	r3, [sp, #0]
 80124ac:	17db      	asrs	r3, r3, #31
 80124ae:	9301      	str	r3, [sp, #4]
 80124b0:	e7d3      	b.n	801245a <_vfiprintf_r+0x33a>
 80124b2:	0662      	lsls	r2, r4, #25
 80124b4:	d501      	bpl.n	80124ba <_vfiprintf_r+0x39a>
 80124b6:	b21b      	sxth	r3, r3
 80124b8:	e7f7      	b.n	80124aa <_vfiprintf_r+0x38a>
 80124ba:	05a2      	lsls	r2, r4, #22
 80124bc:	d5f5      	bpl.n	80124aa <_vfiprintf_r+0x38a>
 80124be:	b25b      	sxtb	r3, r3
 80124c0:	e7f3      	b.n	80124aa <_vfiprintf_r+0x38a>
 80124c2:	1d3b      	adds	r3, r7, #4
 80124c4:	9304      	str	r3, [sp, #16]
 80124c6:	06a3      	lsls	r3, r4, #26
 80124c8:	d506      	bpl.n	80124d8 <_vfiprintf_r+0x3b8>
 80124ca:	683b      	ldr	r3, [r7, #0]
 80124cc:	9a08      	ldr	r2, [sp, #32]
 80124ce:	601a      	str	r2, [r3, #0]
 80124d0:	17d2      	asrs	r2, r2, #31
 80124d2:	605a      	str	r2, [r3, #4]
 80124d4:	9f04      	ldr	r7, [sp, #16]
 80124d6:	e694      	b.n	8012202 <_vfiprintf_r+0xe2>
 80124d8:	06e3      	lsls	r3, r4, #27
 80124da:	d503      	bpl.n	80124e4 <_vfiprintf_r+0x3c4>
 80124dc:	683b      	ldr	r3, [r7, #0]
 80124de:	9a08      	ldr	r2, [sp, #32]
 80124e0:	601a      	str	r2, [r3, #0]
 80124e2:	e7f7      	b.n	80124d4 <_vfiprintf_r+0x3b4>
 80124e4:	0663      	lsls	r3, r4, #25
 80124e6:	d503      	bpl.n	80124f0 <_vfiprintf_r+0x3d0>
 80124e8:	683b      	ldr	r3, [r7, #0]
 80124ea:	9a08      	ldr	r2, [sp, #32]
 80124ec:	801a      	strh	r2, [r3, #0]
 80124ee:	e7f1      	b.n	80124d4 <_vfiprintf_r+0x3b4>
 80124f0:	05a4      	lsls	r4, r4, #22
 80124f2:	d5f3      	bpl.n	80124dc <_vfiprintf_r+0x3bc>
 80124f4:	683b      	ldr	r3, [r7, #0]
 80124f6:	9a08      	ldr	r2, [sp, #32]
 80124f8:	701a      	strb	r2, [r3, #0]
 80124fa:	e7eb      	b.n	80124d4 <_vfiprintf_r+0x3b4>
 80124fc:	2310      	movs	r3, #16
 80124fe:	431c      	orrs	r4, r3
 8012500:	2320      	movs	r3, #32
 8012502:	0020      	movs	r0, r4
 8012504:	4018      	ands	r0, r3
 8012506:	421c      	tst	r4, r3
 8012508:	d00d      	beq.n	8012526 <_vfiprintf_r+0x406>
 801250a:	3b19      	subs	r3, #25
 801250c:	3707      	adds	r7, #7
 801250e:	439f      	bics	r7, r3
 8012510:	0039      	movs	r1, r7
 8012512:	c90c      	ldmia	r1!, {r2, r3}
 8012514:	9200      	str	r2, [sp, #0]
 8012516:	9301      	str	r3, [sp, #4]
 8012518:	9104      	str	r1, [sp, #16]
 801251a:	4bcc      	ldr	r3, [pc, #816]	; (801284c <_vfiprintf_r+0x72c>)
 801251c:	401c      	ands	r4, r3
 801251e:	2300      	movs	r3, #0
 8012520:	2100      	movs	r1, #0
 8012522:	aa12      	add	r2, sp, #72	; 0x48
 8012524:	e7a6      	b.n	8012474 <_vfiprintf_r+0x354>
 8012526:	003a      	movs	r2, r7
 8012528:	ca08      	ldmia	r2!, {r3}
 801252a:	0021      	movs	r1, r4
 801252c:	9204      	str	r2, [sp, #16]
 801252e:	2210      	movs	r2, #16
 8012530:	4011      	ands	r1, r2
 8012532:	4214      	tst	r4, r2
 8012534:	d002      	beq.n	801253c <_vfiprintf_r+0x41c>
 8012536:	9300      	str	r3, [sp, #0]
 8012538:	9001      	str	r0, [sp, #4]
 801253a:	e7ee      	b.n	801251a <_vfiprintf_r+0x3fa>
 801253c:	2240      	movs	r2, #64	; 0x40
 801253e:	0020      	movs	r0, r4
 8012540:	4010      	ands	r0, r2
 8012542:	4214      	tst	r4, r2
 8012544:	d003      	beq.n	801254e <_vfiprintf_r+0x42e>
 8012546:	b29b      	uxth	r3, r3
 8012548:	9300      	str	r3, [sp, #0]
 801254a:	9101      	str	r1, [sp, #4]
 801254c:	e7e5      	b.n	801251a <_vfiprintf_r+0x3fa>
 801254e:	2280      	movs	r2, #128	; 0x80
 8012550:	0021      	movs	r1, r4
 8012552:	0092      	lsls	r2, r2, #2
 8012554:	4011      	ands	r1, r2
 8012556:	4214      	tst	r4, r2
 8012558:	d0f6      	beq.n	8012548 <_vfiprintf_r+0x428>
 801255a:	b2db      	uxtb	r3, r3
 801255c:	e7eb      	b.n	8012536 <_vfiprintf_r+0x416>
 801255e:	003b      	movs	r3, r7
 8012560:	cb04      	ldmia	r3!, {r2}
 8012562:	49bb      	ldr	r1, [pc, #748]	; (8012850 <_vfiprintf_r+0x730>)
 8012564:	9304      	str	r3, [sp, #16]
 8012566:	2300      	movs	r3, #0
 8012568:	9200      	str	r2, [sp, #0]
 801256a:	aa13      	add	r2, sp, #76	; 0x4c
 801256c:	8011      	strh	r1, [r2, #0]
 801256e:	4ab9      	ldr	r2, [pc, #740]	; (8012854 <_vfiprintf_r+0x734>)
 8012570:	9301      	str	r3, [sp, #4]
 8012572:	3302      	adds	r3, #2
 8012574:	431c      	orrs	r4, r3
 8012576:	920c      	str	r2, [sp, #48]	; 0x30
 8012578:	e7d2      	b.n	8012520 <_vfiprintf_r+0x400>
 801257a:	003b      	movs	r3, r7
 801257c:	2700      	movs	r7, #0
 801257e:	cb40      	ldmia	r3!, {r6}
 8012580:	9304      	str	r3, [sp, #16]
 8012582:	ab12      	add	r3, sp, #72	; 0x48
 8012584:	70df      	strb	r7, [r3, #3]
 8012586:	9b05      	ldr	r3, [sp, #20]
 8012588:	3301      	adds	r3, #1
 801258a:	d100      	bne.n	801258e <_vfiprintf_r+0x46e>
 801258c:	e0ea      	b.n	8012764 <_vfiprintf_r+0x644>
 801258e:	0039      	movs	r1, r7
 8012590:	0030      	movs	r0, r6
 8012592:	9a05      	ldr	r2, [sp, #20]
 8012594:	f7fe f92e 	bl	80107f4 <memchr>
 8012598:	900b      	str	r0, [sp, #44]	; 0x2c
 801259a:	42b8      	cmp	r0, r7
 801259c:	d002      	beq.n	80125a4 <_vfiprintf_r+0x484>
 801259e:	1b83      	subs	r3, r0, r6
 80125a0:	9305      	str	r3, [sp, #20]
 80125a2:	970b      	str	r7, [sp, #44]	; 0x2c
 80125a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80125a6:	9a05      	ldr	r2, [sp, #20]
 80125a8:	930a      	str	r3, [sp, #40]	; 0x28
 80125aa:	4293      	cmp	r3, r2
 80125ac:	da00      	bge.n	80125b0 <_vfiprintf_r+0x490>
 80125ae:	920a      	str	r2, [sp, #40]	; 0x28
 80125b0:	ab12      	add	r3, sp, #72	; 0x48
 80125b2:	3303      	adds	r3, #3
 80125b4:	781b      	ldrb	r3, [r3, #0]
 80125b6:	1e5a      	subs	r2, r3, #1
 80125b8:	4193      	sbcs	r3, r2
 80125ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80125bc:	18d3      	adds	r3, r2, r3
 80125be:	930a      	str	r3, [sp, #40]	; 0x28
 80125c0:	0022      	movs	r2, r4
 80125c2:	2302      	movs	r3, #2
 80125c4:	401a      	ands	r2, r3
 80125c6:	9210      	str	r2, [sp, #64]	; 0x40
 80125c8:	421c      	tst	r4, r3
 80125ca:	d002      	beq.n	80125d2 <_vfiprintf_r+0x4b2>
 80125cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125ce:	3302      	adds	r3, #2
 80125d0:	930a      	str	r3, [sp, #40]	; 0x28
 80125d2:	2384      	movs	r3, #132	; 0x84
 80125d4:	0022      	movs	r2, r4
 80125d6:	401a      	ands	r2, r3
 80125d8:	9211      	str	r2, [sp, #68]	; 0x44
 80125da:	421c      	tst	r4, r3
 80125dc:	d11e      	bne.n	801261c <_vfiprintf_r+0x4fc>
 80125de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80125e2:	1a9f      	subs	r7, r3, r2
 80125e4:	2f00      	cmp	r7, #0
 80125e6:	dd19      	ble.n	801261c <_vfiprintf_r+0x4fc>
 80125e8:	0029      	movs	r1, r5
 80125ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80125ec:	489a      	ldr	r0, [pc, #616]	; (8012858 <_vfiprintf_r+0x738>)
 80125ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80125f0:	3301      	adds	r3, #1
 80125f2:	3108      	adds	r1, #8
 80125f4:	6028      	str	r0, [r5, #0]
 80125f6:	2f10      	cmp	r7, #16
 80125f8:	dd00      	ble.n	80125fc <_vfiprintf_r+0x4dc>
 80125fa:	e1a7      	b.n	801294c <_vfiprintf_r+0x82c>
 80125fc:	606f      	str	r7, [r5, #4]
 80125fe:	18bf      	adds	r7, r7, r2
 8012600:	000d      	movs	r5, r1
 8012602:	9716      	str	r7, [sp, #88]	; 0x58
 8012604:	9315      	str	r3, [sp, #84]	; 0x54
 8012606:	2b07      	cmp	r3, #7
 8012608:	dd08      	ble.n	801261c <_vfiprintf_r+0x4fc>
 801260a:	9903      	ldr	r1, [sp, #12]
 801260c:	9806      	ldr	r0, [sp, #24]
 801260e:	aa14      	add	r2, sp, #80	; 0x50
 8012610:	f7ff fd51 	bl	80120b6 <__sprint_r>
 8012614:	2800      	cmp	r0, #0
 8012616:	d000      	beq.n	801261a <_vfiprintf_r+0x4fa>
 8012618:	e1eb      	b.n	80129f2 <_vfiprintf_r+0x8d2>
 801261a:	ad17      	add	r5, sp, #92	; 0x5c
 801261c:	a912      	add	r1, sp, #72	; 0x48
 801261e:	78c8      	ldrb	r0, [r1, #3]
 8012620:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012622:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012624:	3103      	adds	r1, #3
 8012626:	2800      	cmp	r0, #0
 8012628:	d012      	beq.n	8012650 <_vfiprintf_r+0x530>
 801262a:	6029      	str	r1, [r5, #0]
 801262c:	2101      	movs	r1, #1
 801262e:	3301      	adds	r3, #1
 8012630:	1852      	adds	r2, r2, r1
 8012632:	6069      	str	r1, [r5, #4]
 8012634:	9216      	str	r2, [sp, #88]	; 0x58
 8012636:	9315      	str	r3, [sp, #84]	; 0x54
 8012638:	3508      	adds	r5, #8
 801263a:	2b07      	cmp	r3, #7
 801263c:	dd08      	ble.n	8012650 <_vfiprintf_r+0x530>
 801263e:	9903      	ldr	r1, [sp, #12]
 8012640:	9806      	ldr	r0, [sp, #24]
 8012642:	aa14      	add	r2, sp, #80	; 0x50
 8012644:	f7ff fd37 	bl	80120b6 <__sprint_r>
 8012648:	2800      	cmp	r0, #0
 801264a:	d000      	beq.n	801264e <_vfiprintf_r+0x52e>
 801264c:	e1d1      	b.n	80129f2 <_vfiprintf_r+0x8d2>
 801264e:	ad17      	add	r5, sp, #92	; 0x5c
 8012650:	9910      	ldr	r1, [sp, #64]	; 0x40
 8012652:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012654:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012656:	2900      	cmp	r1, #0
 8012658:	d013      	beq.n	8012682 <_vfiprintf_r+0x562>
 801265a:	a913      	add	r1, sp, #76	; 0x4c
 801265c:	6029      	str	r1, [r5, #0]
 801265e:	2102      	movs	r1, #2
 8012660:	3301      	adds	r3, #1
 8012662:	1852      	adds	r2, r2, r1
 8012664:	6069      	str	r1, [r5, #4]
 8012666:	9216      	str	r2, [sp, #88]	; 0x58
 8012668:	9315      	str	r3, [sp, #84]	; 0x54
 801266a:	3508      	adds	r5, #8
 801266c:	2b07      	cmp	r3, #7
 801266e:	dd08      	ble.n	8012682 <_vfiprintf_r+0x562>
 8012670:	9903      	ldr	r1, [sp, #12]
 8012672:	9806      	ldr	r0, [sp, #24]
 8012674:	aa14      	add	r2, sp, #80	; 0x50
 8012676:	f7ff fd1e 	bl	80120b6 <__sprint_r>
 801267a:	2800      	cmp	r0, #0
 801267c:	d000      	beq.n	8012680 <_vfiprintf_r+0x560>
 801267e:	e1b8      	b.n	80129f2 <_vfiprintf_r+0x8d2>
 8012680:	ad17      	add	r5, sp, #92	; 0x5c
 8012682:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012684:	2b80      	cmp	r3, #128	; 0x80
 8012686:	d11e      	bne.n	80126c6 <_vfiprintf_r+0x5a6>
 8012688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801268a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801268c:	1a9f      	subs	r7, r3, r2
 801268e:	2f00      	cmp	r7, #0
 8012690:	dd19      	ble.n	80126c6 <_vfiprintf_r+0x5a6>
 8012692:	0029      	movs	r1, r5
 8012694:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012696:	4871      	ldr	r0, [pc, #452]	; (801285c <_vfiprintf_r+0x73c>)
 8012698:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801269a:	3301      	adds	r3, #1
 801269c:	3108      	adds	r1, #8
 801269e:	6028      	str	r0, [r5, #0]
 80126a0:	2f10      	cmp	r7, #16
 80126a2:	dd00      	ble.n	80126a6 <_vfiprintf_r+0x586>
 80126a4:	e164      	b.n	8012970 <_vfiprintf_r+0x850>
 80126a6:	606f      	str	r7, [r5, #4]
 80126a8:	18bf      	adds	r7, r7, r2
 80126aa:	000d      	movs	r5, r1
 80126ac:	9716      	str	r7, [sp, #88]	; 0x58
 80126ae:	9315      	str	r3, [sp, #84]	; 0x54
 80126b0:	2b07      	cmp	r3, #7
 80126b2:	dd08      	ble.n	80126c6 <_vfiprintf_r+0x5a6>
 80126b4:	9903      	ldr	r1, [sp, #12]
 80126b6:	9806      	ldr	r0, [sp, #24]
 80126b8:	aa14      	add	r2, sp, #80	; 0x50
 80126ba:	f7ff fcfc 	bl	80120b6 <__sprint_r>
 80126be:	2800      	cmp	r0, #0
 80126c0:	d000      	beq.n	80126c4 <_vfiprintf_r+0x5a4>
 80126c2:	e196      	b.n	80129f2 <_vfiprintf_r+0x8d2>
 80126c4:	ad17      	add	r5, sp, #92	; 0x5c
 80126c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80126c8:	9a05      	ldr	r2, [sp, #20]
 80126ca:	1a9f      	subs	r7, r3, r2
 80126cc:	2f00      	cmp	r7, #0
 80126ce:	dd19      	ble.n	8012704 <_vfiprintf_r+0x5e4>
 80126d0:	0029      	movs	r1, r5
 80126d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80126d4:	4861      	ldr	r0, [pc, #388]	; (801285c <_vfiprintf_r+0x73c>)
 80126d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80126d8:	3301      	adds	r3, #1
 80126da:	3108      	adds	r1, #8
 80126dc:	6028      	str	r0, [r5, #0]
 80126de:	2f10      	cmp	r7, #16
 80126e0:	dd00      	ble.n	80126e4 <_vfiprintf_r+0x5c4>
 80126e2:	e157      	b.n	8012994 <_vfiprintf_r+0x874>
 80126e4:	606f      	str	r7, [r5, #4]
 80126e6:	18bf      	adds	r7, r7, r2
 80126e8:	000d      	movs	r5, r1
 80126ea:	9716      	str	r7, [sp, #88]	; 0x58
 80126ec:	9315      	str	r3, [sp, #84]	; 0x54
 80126ee:	2b07      	cmp	r3, #7
 80126f0:	dd08      	ble.n	8012704 <_vfiprintf_r+0x5e4>
 80126f2:	9903      	ldr	r1, [sp, #12]
 80126f4:	9806      	ldr	r0, [sp, #24]
 80126f6:	aa14      	add	r2, sp, #80	; 0x50
 80126f8:	f7ff fcdd 	bl	80120b6 <__sprint_r>
 80126fc:	2800      	cmp	r0, #0
 80126fe:	d000      	beq.n	8012702 <_vfiprintf_r+0x5e2>
 8012700:	e177      	b.n	80129f2 <_vfiprintf_r+0x8d2>
 8012702:	ad17      	add	r5, sp, #92	; 0x5c
 8012704:	9b05      	ldr	r3, [sp, #20]
 8012706:	9a05      	ldr	r2, [sp, #20]
 8012708:	606b      	str	r3, [r5, #4]
 801270a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801270c:	602e      	str	r6, [r5, #0]
 801270e:	189b      	adds	r3, r3, r2
 8012710:	9316      	str	r3, [sp, #88]	; 0x58
 8012712:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012714:	3508      	adds	r5, #8
 8012716:	3301      	adds	r3, #1
 8012718:	9315      	str	r3, [sp, #84]	; 0x54
 801271a:	2b07      	cmp	r3, #7
 801271c:	dd08      	ble.n	8012730 <_vfiprintf_r+0x610>
 801271e:	9903      	ldr	r1, [sp, #12]
 8012720:	9806      	ldr	r0, [sp, #24]
 8012722:	aa14      	add	r2, sp, #80	; 0x50
 8012724:	f7ff fcc7 	bl	80120b6 <__sprint_r>
 8012728:	2800      	cmp	r0, #0
 801272a:	d000      	beq.n	801272e <_vfiprintf_r+0x60e>
 801272c:	e161      	b.n	80129f2 <_vfiprintf_r+0x8d2>
 801272e:	ad17      	add	r5, sp, #92	; 0x5c
 8012730:	0764      	lsls	r4, r4, #29
 8012732:	d500      	bpl.n	8012736 <_vfiprintf_r+0x616>
 8012734:	e140      	b.n	80129b8 <_vfiprintf_r+0x898>
 8012736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012738:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801273a:	4293      	cmp	r3, r2
 801273c:	da00      	bge.n	8012740 <_vfiprintf_r+0x620>
 801273e:	0013      	movs	r3, r2
 8012740:	9a08      	ldr	r2, [sp, #32]
 8012742:	18d3      	adds	r3, r2, r3
 8012744:	9308      	str	r3, [sp, #32]
 8012746:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012748:	2b00      	cmp	r3, #0
 801274a:	d007      	beq.n	801275c <_vfiprintf_r+0x63c>
 801274c:	9903      	ldr	r1, [sp, #12]
 801274e:	9806      	ldr	r0, [sp, #24]
 8012750:	aa14      	add	r2, sp, #80	; 0x50
 8012752:	f7ff fcb0 	bl	80120b6 <__sprint_r>
 8012756:	2800      	cmp	r0, #0
 8012758:	d000      	beq.n	801275c <_vfiprintf_r+0x63c>
 801275a:	e14a      	b.n	80129f2 <_vfiprintf_r+0x8d2>
 801275c:	2300      	movs	r3, #0
 801275e:	ad17      	add	r5, sp, #92	; 0x5c
 8012760:	9315      	str	r3, [sp, #84]	; 0x54
 8012762:	e6b7      	b.n	80124d4 <_vfiprintf_r+0x3b4>
 8012764:	0030      	movs	r0, r6
 8012766:	f7ed fccd 	bl	8000104 <strlen>
 801276a:	9005      	str	r0, [sp, #20]
 801276c:	e719      	b.n	80125a2 <_vfiprintf_r+0x482>
 801276e:	2310      	movs	r3, #16
 8012770:	431c      	orrs	r4, r3
 8012772:	2320      	movs	r3, #32
 8012774:	0020      	movs	r0, r4
 8012776:	4018      	ands	r0, r3
 8012778:	421c      	tst	r4, r3
 801277a:	d009      	beq.n	8012790 <_vfiprintf_r+0x670>
 801277c:	3b19      	subs	r3, #25
 801277e:	3707      	adds	r7, #7
 8012780:	439f      	bics	r7, r3
 8012782:	0039      	movs	r1, r7
 8012784:	c90c      	ldmia	r1!, {r2, r3}
 8012786:	9200      	str	r2, [sp, #0]
 8012788:	9301      	str	r3, [sp, #4]
 801278a:	9104      	str	r1, [sp, #16]
 801278c:	2301      	movs	r3, #1
 801278e:	e6c7      	b.n	8012520 <_vfiprintf_r+0x400>
 8012790:	003b      	movs	r3, r7
 8012792:	cb04      	ldmia	r3!, {r2}
 8012794:	0021      	movs	r1, r4
 8012796:	9304      	str	r3, [sp, #16]
 8012798:	2310      	movs	r3, #16
 801279a:	4019      	ands	r1, r3
 801279c:	421c      	tst	r4, r3
 801279e:	d003      	beq.n	80127a8 <_vfiprintf_r+0x688>
 80127a0:	9200      	str	r2, [sp, #0]
 80127a2:	9001      	str	r0, [sp, #4]
 80127a4:	3b0f      	subs	r3, #15
 80127a6:	e6bb      	b.n	8012520 <_vfiprintf_r+0x400>
 80127a8:	2340      	movs	r3, #64	; 0x40
 80127aa:	0020      	movs	r0, r4
 80127ac:	4018      	ands	r0, r3
 80127ae:	421c      	tst	r4, r3
 80127b0:	d003      	beq.n	80127ba <_vfiprintf_r+0x69a>
 80127b2:	b293      	uxth	r3, r2
 80127b4:	9300      	str	r3, [sp, #0]
 80127b6:	9101      	str	r1, [sp, #4]
 80127b8:	e7e8      	b.n	801278c <_vfiprintf_r+0x66c>
 80127ba:	2380      	movs	r3, #128	; 0x80
 80127bc:	0021      	movs	r1, r4
 80127be:	009b      	lsls	r3, r3, #2
 80127c0:	4019      	ands	r1, r3
 80127c2:	421c      	tst	r4, r3
 80127c4:	d003      	beq.n	80127ce <_vfiprintf_r+0x6ae>
 80127c6:	b2d3      	uxtb	r3, r2
 80127c8:	9300      	str	r3, [sp, #0]
 80127ca:	9001      	str	r0, [sp, #4]
 80127cc:	e7de      	b.n	801278c <_vfiprintf_r+0x66c>
 80127ce:	9200      	str	r2, [sp, #0]
 80127d0:	e7f1      	b.n	80127b6 <_vfiprintf_r+0x696>
 80127d2:	4a23      	ldr	r2, [pc, #140]	; (8012860 <_vfiprintf_r+0x740>)
 80127d4:	0020      	movs	r0, r4
 80127d6:	920c      	str	r2, [sp, #48]	; 0x30
 80127d8:	2220      	movs	r2, #32
 80127da:	4010      	ands	r0, r2
 80127dc:	4214      	tst	r4, r2
 80127de:	d019      	beq.n	8012814 <_vfiprintf_r+0x6f4>
 80127e0:	3a19      	subs	r2, #25
 80127e2:	3707      	adds	r7, #7
 80127e4:	4397      	bics	r7, r2
 80127e6:	0038      	movs	r0, r7
 80127e8:	c806      	ldmia	r0!, {r1, r2}
 80127ea:	9100      	str	r1, [sp, #0]
 80127ec:	9201      	str	r2, [sp, #4]
 80127ee:	9004      	str	r0, [sp, #16]
 80127f0:	07e2      	lsls	r2, r4, #31
 80127f2:	d509      	bpl.n	8012808 <_vfiprintf_r+0x6e8>
 80127f4:	9a00      	ldr	r2, [sp, #0]
 80127f6:	9901      	ldr	r1, [sp, #4]
 80127f8:	430a      	orrs	r2, r1
 80127fa:	d005      	beq.n	8012808 <_vfiprintf_r+0x6e8>
 80127fc:	aa13      	add	r2, sp, #76	; 0x4c
 80127fe:	2130      	movs	r1, #48	; 0x30
 8012800:	7053      	strb	r3, [r2, #1]
 8012802:	2302      	movs	r3, #2
 8012804:	7011      	strb	r1, [r2, #0]
 8012806:	431c      	orrs	r4, r3
 8012808:	4b10      	ldr	r3, [pc, #64]	; (801284c <_vfiprintf_r+0x72c>)
 801280a:	401c      	ands	r4, r3
 801280c:	2302      	movs	r3, #2
 801280e:	e687      	b.n	8012520 <_vfiprintf_r+0x400>
 8012810:	4a10      	ldr	r2, [pc, #64]	; (8012854 <_vfiprintf_r+0x734>)
 8012812:	e7df      	b.n	80127d4 <_vfiprintf_r+0x6b4>
 8012814:	0039      	movs	r1, r7
 8012816:	c904      	ldmia	r1!, {r2}
 8012818:	0026      	movs	r6, r4
 801281a:	9104      	str	r1, [sp, #16]
 801281c:	2110      	movs	r1, #16
 801281e:	400e      	ands	r6, r1
 8012820:	420c      	tst	r4, r1
 8012822:	d002      	beq.n	801282a <_vfiprintf_r+0x70a>
 8012824:	9200      	str	r2, [sp, #0]
 8012826:	9001      	str	r0, [sp, #4]
 8012828:	e7e2      	b.n	80127f0 <_vfiprintf_r+0x6d0>
 801282a:	2140      	movs	r1, #64	; 0x40
 801282c:	0020      	movs	r0, r4
 801282e:	4008      	ands	r0, r1
 8012830:	420c      	tst	r4, r1
 8012832:	d003      	beq.n	801283c <_vfiprintf_r+0x71c>
 8012834:	b292      	uxth	r2, r2
 8012836:	9200      	str	r2, [sp, #0]
 8012838:	9601      	str	r6, [sp, #4]
 801283a:	e7d9      	b.n	80127f0 <_vfiprintf_r+0x6d0>
 801283c:	2180      	movs	r1, #128	; 0x80
 801283e:	0026      	movs	r6, r4
 8012840:	0089      	lsls	r1, r1, #2
 8012842:	400e      	ands	r6, r1
 8012844:	420c      	tst	r4, r1
 8012846:	d0f6      	beq.n	8012836 <_vfiprintf_r+0x716>
 8012848:	b2d2      	uxtb	r2, r2
 801284a:	e7eb      	b.n	8012824 <_vfiprintf_r+0x704>
 801284c:	fffffbff 	.word	0xfffffbff
 8012850:	00007830 	.word	0x00007830
 8012854:	080151b4 	.word	0x080151b4
 8012858:	080152c1 	.word	0x080152c1
 801285c:	080152d1 	.word	0x080152d1
 8012860:	080151c5 	.word	0x080151c5
 8012864:	9b01      	ldr	r3, [sp, #4]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d109      	bne.n	801287e <_vfiprintf_r+0x75e>
 801286a:	9b00      	ldr	r3, [sp, #0]
 801286c:	2b09      	cmp	r3, #9
 801286e:	d806      	bhi.n	801287e <_vfiprintf_r+0x75e>
 8012870:	26b7      	movs	r6, #183	; 0xb7
 8012872:	ab12      	add	r3, sp, #72	; 0x48
 8012874:	18f6      	adds	r6, r6, r3
 8012876:	9b00      	ldr	r3, [sp, #0]
 8012878:	3330      	adds	r3, #48	; 0x30
 801287a:	7033      	strb	r3, [r6, #0]
 801287c:	e115      	b.n	8012aaa <_vfiprintf_r+0x98a>
 801287e:	2380      	movs	r3, #128	; 0x80
 8012880:	2400      	movs	r4, #0
 8012882:	00db      	lsls	r3, r3, #3
 8012884:	403b      	ands	r3, r7
 8012886:	ae40      	add	r6, sp, #256	; 0x100
 8012888:	930a      	str	r3, [sp, #40]	; 0x28
 801288a:	220a      	movs	r2, #10
 801288c:	9800      	ldr	r0, [sp, #0]
 801288e:	9901      	ldr	r1, [sp, #4]
 8012890:	2300      	movs	r3, #0
 8012892:	f7ed fe07 	bl	80004a4 <__aeabi_uldivmod>
 8012896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012898:	3e01      	subs	r6, #1
 801289a:	3230      	adds	r2, #48	; 0x30
 801289c:	900b      	str	r0, [sp, #44]	; 0x2c
 801289e:	9110      	str	r1, [sp, #64]	; 0x40
 80128a0:	7032      	strb	r2, [r6, #0]
 80128a2:	3401      	adds	r4, #1
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d01a      	beq.n	80128de <_vfiprintf_r+0x7be>
 80128a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80128aa:	781b      	ldrb	r3, [r3, #0]
 80128ac:	42a3      	cmp	r3, r4
 80128ae:	d116      	bne.n	80128de <_vfiprintf_r+0x7be>
 80128b0:	2cff      	cmp	r4, #255	; 0xff
 80128b2:	d014      	beq.n	80128de <_vfiprintf_r+0x7be>
 80128b4:	9b01      	ldr	r3, [sp, #4]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d102      	bne.n	80128c0 <_vfiprintf_r+0x7a0>
 80128ba:	9b00      	ldr	r3, [sp, #0]
 80128bc:	2b09      	cmp	r3, #9
 80128be:	d90e      	bls.n	80128de <_vfiprintf_r+0x7be>
 80128c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80128c2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80128c4:	1af6      	subs	r6, r6, r3
 80128c6:	001a      	movs	r2, r3
 80128c8:	0030      	movs	r0, r6
 80128ca:	f7f9 ffe6 	bl	800c89a <strncpy>
 80128ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80128d0:	2400      	movs	r4, #0
 80128d2:	785b      	ldrb	r3, [r3, #1]
 80128d4:	1e5a      	subs	r2, r3, #1
 80128d6:	4193      	sbcs	r3, r2
 80128d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80128da:	18d3      	adds	r3, r2, r3
 80128dc:	930d      	str	r3, [sp, #52]	; 0x34
 80128de:	9b01      	ldr	r3, [sp, #4]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d103      	bne.n	80128ec <_vfiprintf_r+0x7cc>
 80128e4:	9b00      	ldr	r3, [sp, #0]
 80128e6:	2b09      	cmp	r3, #9
 80128e8:	d800      	bhi.n	80128ec <_vfiprintf_r+0x7cc>
 80128ea:	e0de      	b.n	8012aaa <_vfiprintf_r+0x98a>
 80128ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80128ee:	9300      	str	r3, [sp, #0]
 80128f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80128f2:	9301      	str	r3, [sp, #4]
 80128f4:	e7c9      	b.n	801288a <_vfiprintf_r+0x76a>
 80128f6:	200f      	movs	r0, #15
 80128f8:	9b00      	ldr	r3, [sp, #0]
 80128fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80128fc:	4003      	ands	r3, r0
 80128fe:	5cd3      	ldrb	r3, [r2, r3]
 8012900:	3e01      	subs	r6, #1
 8012902:	7033      	strb	r3, [r6, #0]
 8012904:	9b01      	ldr	r3, [sp, #4]
 8012906:	0719      	lsls	r1, r3, #28
 8012908:	9b00      	ldr	r3, [sp, #0]
 801290a:	091a      	lsrs	r2, r3, #4
 801290c:	9b01      	ldr	r3, [sp, #4]
 801290e:	4311      	orrs	r1, r2
 8012910:	091b      	lsrs	r3, r3, #4
 8012912:	9301      	str	r3, [sp, #4]
 8012914:	000b      	movs	r3, r1
 8012916:	9a01      	ldr	r2, [sp, #4]
 8012918:	9100      	str	r1, [sp, #0]
 801291a:	4313      	orrs	r3, r2
 801291c:	d1ec      	bne.n	80128f8 <_vfiprintf_r+0x7d8>
 801291e:	e0c4      	b.n	8012aaa <_vfiprintf_r+0x98a>
 8012920:	ae40      	add	r6, sp, #256	; 0x100
 8012922:	2b00      	cmp	r3, #0
 8012924:	d000      	beq.n	8012928 <_vfiprintf_r+0x808>
 8012926:	e0c0      	b.n	8012aaa <_vfiprintf_r+0x98a>
 8012928:	07e4      	lsls	r4, r4, #31
 801292a:	d400      	bmi.n	801292e <_vfiprintf_r+0x80e>
 801292c:	e0bd      	b.n	8012aaa <_vfiprintf_r+0x98a>
 801292e:	26b7      	movs	r6, #183	; 0xb7
 8012930:	ab12      	add	r3, sp, #72	; 0x48
 8012932:	18f6      	adds	r6, r6, r3
 8012934:	2330      	movs	r3, #48	; 0x30
 8012936:	e7a0      	b.n	801287a <_vfiprintf_r+0x75a>
 8012938:	2b00      	cmp	r3, #0
 801293a:	d100      	bne.n	801293e <_vfiprintf_r+0x81e>
 801293c:	e07e      	b.n	8012a3c <_vfiprintf_r+0x91c>
 801293e:	ae27      	add	r6, sp, #156	; 0x9c
 8012940:	7033      	strb	r3, [r6, #0]
 8012942:	2300      	movs	r3, #0
 8012944:	aa12      	add	r2, sp, #72	; 0x48
 8012946:	70d3      	strb	r3, [r2, #3]
 8012948:	9704      	str	r7, [sp, #16]
 801294a:	e576      	b.n	801243a <_vfiprintf_r+0x31a>
 801294c:	2010      	movs	r0, #16
 801294e:	1812      	adds	r2, r2, r0
 8012950:	6068      	str	r0, [r5, #4]
 8012952:	9216      	str	r2, [sp, #88]	; 0x58
 8012954:	9315      	str	r3, [sp, #84]	; 0x54
 8012956:	2b07      	cmp	r3, #7
 8012958:	dd07      	ble.n	801296a <_vfiprintf_r+0x84a>
 801295a:	9903      	ldr	r1, [sp, #12]
 801295c:	9806      	ldr	r0, [sp, #24]
 801295e:	aa14      	add	r2, sp, #80	; 0x50
 8012960:	f7ff fba9 	bl	80120b6 <__sprint_r>
 8012964:	2800      	cmp	r0, #0
 8012966:	d144      	bne.n	80129f2 <_vfiprintf_r+0x8d2>
 8012968:	a917      	add	r1, sp, #92	; 0x5c
 801296a:	000d      	movs	r5, r1
 801296c:	3f10      	subs	r7, #16
 801296e:	e63b      	b.n	80125e8 <_vfiprintf_r+0x4c8>
 8012970:	2010      	movs	r0, #16
 8012972:	1812      	adds	r2, r2, r0
 8012974:	6068      	str	r0, [r5, #4]
 8012976:	9216      	str	r2, [sp, #88]	; 0x58
 8012978:	9315      	str	r3, [sp, #84]	; 0x54
 801297a:	2b07      	cmp	r3, #7
 801297c:	dd07      	ble.n	801298e <_vfiprintf_r+0x86e>
 801297e:	9903      	ldr	r1, [sp, #12]
 8012980:	9806      	ldr	r0, [sp, #24]
 8012982:	aa14      	add	r2, sp, #80	; 0x50
 8012984:	f7ff fb97 	bl	80120b6 <__sprint_r>
 8012988:	2800      	cmp	r0, #0
 801298a:	d132      	bne.n	80129f2 <_vfiprintf_r+0x8d2>
 801298c:	a917      	add	r1, sp, #92	; 0x5c
 801298e:	000d      	movs	r5, r1
 8012990:	3f10      	subs	r7, #16
 8012992:	e67e      	b.n	8012692 <_vfiprintf_r+0x572>
 8012994:	2010      	movs	r0, #16
 8012996:	1812      	adds	r2, r2, r0
 8012998:	6068      	str	r0, [r5, #4]
 801299a:	9216      	str	r2, [sp, #88]	; 0x58
 801299c:	9315      	str	r3, [sp, #84]	; 0x54
 801299e:	2b07      	cmp	r3, #7
 80129a0:	dd07      	ble.n	80129b2 <_vfiprintf_r+0x892>
 80129a2:	9903      	ldr	r1, [sp, #12]
 80129a4:	9806      	ldr	r0, [sp, #24]
 80129a6:	aa14      	add	r2, sp, #80	; 0x50
 80129a8:	f7ff fb85 	bl	80120b6 <__sprint_r>
 80129ac:	2800      	cmp	r0, #0
 80129ae:	d120      	bne.n	80129f2 <_vfiprintf_r+0x8d2>
 80129b0:	a917      	add	r1, sp, #92	; 0x5c
 80129b2:	000d      	movs	r5, r1
 80129b4:	3f10      	subs	r7, #16
 80129b6:	e68b      	b.n	80126d0 <_vfiprintf_r+0x5b0>
 80129b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80129bc:	2610      	movs	r6, #16
 80129be:	1a9c      	subs	r4, r3, r2
 80129c0:	2c00      	cmp	r4, #0
 80129c2:	dc00      	bgt.n	80129c6 <_vfiprintf_r+0x8a6>
 80129c4:	e6b7      	b.n	8012736 <_vfiprintf_r+0x616>
 80129c6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80129c8:	4a3b      	ldr	r2, [pc, #236]	; (8012ab8 <_vfiprintf_r+0x998>)
 80129ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80129cc:	3101      	adds	r1, #1
 80129ce:	602a      	str	r2, [r5, #0]
 80129d0:	2c10      	cmp	r4, #16
 80129d2:	dc22      	bgt.n	8012a1a <_vfiprintf_r+0x8fa>
 80129d4:	606c      	str	r4, [r5, #4]
 80129d6:	18e4      	adds	r4, r4, r3
 80129d8:	9416      	str	r4, [sp, #88]	; 0x58
 80129da:	9115      	str	r1, [sp, #84]	; 0x54
 80129dc:	2907      	cmp	r1, #7
 80129de:	dc00      	bgt.n	80129e2 <_vfiprintf_r+0x8c2>
 80129e0:	e6a9      	b.n	8012736 <_vfiprintf_r+0x616>
 80129e2:	9903      	ldr	r1, [sp, #12]
 80129e4:	9806      	ldr	r0, [sp, #24]
 80129e6:	aa14      	add	r2, sp, #80	; 0x50
 80129e8:	f7ff fb65 	bl	80120b6 <__sprint_r>
 80129ec:	2800      	cmp	r0, #0
 80129ee:	d100      	bne.n	80129f2 <_vfiprintf_r+0x8d2>
 80129f0:	e6a1      	b.n	8012736 <_vfiprintf_r+0x616>
 80129f2:	9b03      	ldr	r3, [sp, #12]
 80129f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80129f6:	07db      	lsls	r3, r3, #31
 80129f8:	d407      	bmi.n	8012a0a <_vfiprintf_r+0x8ea>
 80129fa:	9b03      	ldr	r3, [sp, #12]
 80129fc:	899b      	ldrh	r3, [r3, #12]
 80129fe:	059b      	lsls	r3, r3, #22
 8012a00:	d403      	bmi.n	8012a0a <_vfiprintf_r+0x8ea>
 8012a02:	9b03      	ldr	r3, [sp, #12]
 8012a04:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8012a06:	f7fa f808 	bl	800ca1a <__retarget_lock_release_recursive>
 8012a0a:	9b03      	ldr	r3, [sp, #12]
 8012a0c:	899b      	ldrh	r3, [r3, #12]
 8012a0e:	065b      	lsls	r3, r3, #25
 8012a10:	d401      	bmi.n	8012a16 <_vfiprintf_r+0x8f6>
 8012a12:	f7ff fbc3 	bl	801219c <_vfiprintf_r+0x7c>
 8012a16:	f7ff fbbe 	bl	8012196 <_vfiprintf_r+0x76>
 8012a1a:	3310      	adds	r3, #16
 8012a1c:	606e      	str	r6, [r5, #4]
 8012a1e:	9316      	str	r3, [sp, #88]	; 0x58
 8012a20:	9115      	str	r1, [sp, #84]	; 0x54
 8012a22:	3508      	adds	r5, #8
 8012a24:	2907      	cmp	r1, #7
 8012a26:	dd07      	ble.n	8012a38 <_vfiprintf_r+0x918>
 8012a28:	9903      	ldr	r1, [sp, #12]
 8012a2a:	9806      	ldr	r0, [sp, #24]
 8012a2c:	aa14      	add	r2, sp, #80	; 0x50
 8012a2e:	f7ff fb42 	bl	80120b6 <__sprint_r>
 8012a32:	2800      	cmp	r0, #0
 8012a34:	d1dd      	bne.n	80129f2 <_vfiprintf_r+0x8d2>
 8012a36:	ad17      	add	r5, sp, #92	; 0x5c
 8012a38:	3c10      	subs	r4, #16
 8012a3a:	e7c4      	b.n	80129c6 <_vfiprintf_r+0x8a6>
 8012a3c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d102      	bne.n	8012a48 <_vfiprintf_r+0x928>
 8012a42:	2300      	movs	r3, #0
 8012a44:	9315      	str	r3, [sp, #84]	; 0x54
 8012a46:	e7d4      	b.n	80129f2 <_vfiprintf_r+0x8d2>
 8012a48:	9903      	ldr	r1, [sp, #12]
 8012a4a:	9806      	ldr	r0, [sp, #24]
 8012a4c:	aa14      	add	r2, sp, #80	; 0x50
 8012a4e:	f7ff fb32 	bl	80120b6 <__sprint_r>
 8012a52:	2800      	cmp	r0, #0
 8012a54:	d0f5      	beq.n	8012a42 <_vfiprintf_r+0x922>
 8012a56:	e7cc      	b.n	80129f2 <_vfiprintf_r+0x8d2>
 8012a58:	0027      	movs	r7, r4
 8012a5a:	2a00      	cmp	r2, #0
 8012a5c:	d100      	bne.n	8012a60 <_vfiprintf_r+0x940>
 8012a5e:	e51b      	b.n	8012498 <_vfiprintf_r+0x378>
 8012a60:	2b01      	cmp	r3, #1
 8012a62:	d100      	bne.n	8012a66 <_vfiprintf_r+0x946>
 8012a64:	e6fe      	b.n	8012864 <_vfiprintf_r+0x744>
 8012a66:	ae40      	add	r6, sp, #256	; 0x100
 8012a68:	2b02      	cmp	r3, #2
 8012a6a:	d100      	bne.n	8012a6e <_vfiprintf_r+0x94e>
 8012a6c:	e743      	b.n	80128f6 <_vfiprintf_r+0x7d6>
 8012a6e:	2307      	movs	r3, #7
 8012a70:	469c      	mov	ip, r3
 8012a72:	4663      	mov	r3, ip
 8012a74:	9900      	ldr	r1, [sp, #0]
 8012a76:	0032      	movs	r2, r6
 8012a78:	400b      	ands	r3, r1
 8012a7a:	9901      	ldr	r1, [sp, #4]
 8012a7c:	3e01      	subs	r6, #1
 8012a7e:	074c      	lsls	r4, r1, #29
 8012a80:	9900      	ldr	r1, [sp, #0]
 8012a82:	3330      	adds	r3, #48	; 0x30
 8012a84:	08c8      	lsrs	r0, r1, #3
 8012a86:	9901      	ldr	r1, [sp, #4]
 8012a88:	4304      	orrs	r4, r0
 8012a8a:	08c9      	lsrs	r1, r1, #3
 8012a8c:	9101      	str	r1, [sp, #4]
 8012a8e:	0021      	movs	r1, r4
 8012a90:	9801      	ldr	r0, [sp, #4]
 8012a92:	7033      	strb	r3, [r6, #0]
 8012a94:	9400      	str	r4, [sp, #0]
 8012a96:	4301      	orrs	r1, r0
 8012a98:	d1eb      	bne.n	8012a72 <_vfiprintf_r+0x952>
 8012a9a:	07f9      	lsls	r1, r7, #31
 8012a9c:	d505      	bpl.n	8012aaa <_vfiprintf_r+0x98a>
 8012a9e:	2b30      	cmp	r3, #48	; 0x30
 8012aa0:	d003      	beq.n	8012aaa <_vfiprintf_r+0x98a>
 8012aa2:	2330      	movs	r3, #48	; 0x30
 8012aa4:	3e01      	subs	r6, #1
 8012aa6:	7033      	strb	r3, [r6, #0]
 8012aa8:	1e96      	subs	r6, r2, #2
 8012aaa:	9b05      	ldr	r3, [sp, #20]
 8012aac:	003c      	movs	r4, r7
 8012aae:	930b      	str	r3, [sp, #44]	; 0x2c
 8012ab0:	ab40      	add	r3, sp, #256	; 0x100
 8012ab2:	1b9b      	subs	r3, r3, r6
 8012ab4:	9305      	str	r3, [sp, #20]
 8012ab6:	e575      	b.n	80125a4 <_vfiprintf_r+0x484>
 8012ab8:	080152c1 	.word	0x080152c1

08012abc <__sbprintf>:
 8012abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012abe:	0015      	movs	r5, r2
 8012ac0:	2202      	movs	r2, #2
 8012ac2:	4c1e      	ldr	r4, [pc, #120]	; (8012b3c <__sbprintf+0x80>)
 8012ac4:	001f      	movs	r7, r3
 8012ac6:	898b      	ldrh	r3, [r1, #12]
 8012ac8:	44a5      	add	sp, r4
 8012aca:	4393      	bics	r3, r2
 8012acc:	466a      	mov	r2, sp
 8012ace:	8193      	strh	r3, [r2, #12]
 8012ad0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8012ad2:	0006      	movs	r6, r0
 8012ad4:	9319      	str	r3, [sp, #100]	; 0x64
 8012ad6:	89cb      	ldrh	r3, [r1, #14]
 8012ad8:	a816      	add	r0, sp, #88	; 0x58
 8012ada:	81d3      	strh	r3, [r2, #14]
 8012adc:	69cb      	ldr	r3, [r1, #28]
 8012ade:	000c      	movs	r4, r1
 8012ae0:	9307      	str	r3, [sp, #28]
 8012ae2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8012ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8012ae6:	ab1a      	add	r3, sp, #104	; 0x68
 8012ae8:	9300      	str	r3, [sp, #0]
 8012aea:	9304      	str	r3, [sp, #16]
 8012aec:	2380      	movs	r3, #128	; 0x80
 8012aee:	00db      	lsls	r3, r3, #3
 8012af0:	9302      	str	r3, [sp, #8]
 8012af2:	9305      	str	r3, [sp, #20]
 8012af4:	2300      	movs	r3, #0
 8012af6:	9306      	str	r3, [sp, #24]
 8012af8:	f7f9 ff8c 	bl	800ca14 <__retarget_lock_init_recursive>
 8012afc:	002a      	movs	r2, r5
 8012afe:	003b      	movs	r3, r7
 8012b00:	4669      	mov	r1, sp
 8012b02:	0030      	movs	r0, r6
 8012b04:	f7ff fb0c 	bl	8012120 <_vfiprintf_r>
 8012b08:	1e05      	subs	r5, r0, #0
 8012b0a:	db07      	blt.n	8012b1c <__sbprintf+0x60>
 8012b0c:	4669      	mov	r1, sp
 8012b0e:	0030      	movs	r0, r6
 8012b10:	f7fd fdf6 	bl	8010700 <_fflush_r>
 8012b14:	2800      	cmp	r0, #0
 8012b16:	d001      	beq.n	8012b1c <__sbprintf+0x60>
 8012b18:	2501      	movs	r5, #1
 8012b1a:	426d      	negs	r5, r5
 8012b1c:	466b      	mov	r3, sp
 8012b1e:	899a      	ldrh	r2, [r3, #12]
 8012b20:	2340      	movs	r3, #64	; 0x40
 8012b22:	421a      	tst	r2, r3
 8012b24:	d002      	beq.n	8012b2c <__sbprintf+0x70>
 8012b26:	89a2      	ldrh	r2, [r4, #12]
 8012b28:	4313      	orrs	r3, r2
 8012b2a:	81a3      	strh	r3, [r4, #12]
 8012b2c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8012b2e:	f7f9 ff72 	bl	800ca16 <__retarget_lock_close_recursive>
 8012b32:	0028      	movs	r0, r5
 8012b34:	4b02      	ldr	r3, [pc, #8]	; (8012b40 <__sbprintf+0x84>)
 8012b36:	449d      	add	sp, r3
 8012b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b3a:	46c0      	nop			; (mov r8, r8)
 8012b3c:	fffffb94 	.word	0xfffffb94
 8012b40:	0000046c 	.word	0x0000046c

08012b44 <__sfvwrite_r>:
 8012b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b46:	6893      	ldr	r3, [r2, #8]
 8012b48:	b087      	sub	sp, #28
 8012b4a:	000c      	movs	r4, r1
 8012b4c:	9002      	str	r0, [sp, #8]
 8012b4e:	9204      	str	r2, [sp, #16]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d102      	bne.n	8012b5a <__sfvwrite_r+0x16>
 8012b54:	2000      	movs	r0, #0
 8012b56:	b007      	add	sp, #28
 8012b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b5a:	898b      	ldrh	r3, [r1, #12]
 8012b5c:	071b      	lsls	r3, r3, #28
 8012b5e:	d557      	bpl.n	8012c10 <__sfvwrite_r+0xcc>
 8012b60:	690b      	ldr	r3, [r1, #16]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d054      	beq.n	8012c10 <__sfvwrite_r+0xcc>
 8012b66:	9b04      	ldr	r3, [sp, #16]
 8012b68:	2202      	movs	r2, #2
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	9301      	str	r3, [sp, #4]
 8012b6e:	89a3      	ldrh	r3, [r4, #12]
 8012b70:	001f      	movs	r7, r3
 8012b72:	4017      	ands	r7, r2
 8012b74:	4213      	tst	r3, r2
 8012b76:	d171      	bne.n	8012c5c <__sfvwrite_r+0x118>
 8012b78:	2201      	movs	r2, #1
 8012b7a:	2101      	movs	r1, #1
 8012b7c:	401a      	ands	r2, r3
 8012b7e:	420b      	tst	r3, r1
 8012b80:	d100      	bne.n	8012b84 <__sfvwrite_r+0x40>
 8012b82:	e0a5      	b.n	8012cd0 <__sfvwrite_r+0x18c>
 8012b84:	0038      	movs	r0, r7
 8012b86:	003e      	movs	r6, r7
 8012b88:	9703      	str	r7, [sp, #12]
 8012b8a:	9b03      	ldr	r3, [sp, #12]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d100      	bne.n	8012b92 <__sfvwrite_r+0x4e>
 8012b90:	e10b      	b.n	8012daa <__sfvwrite_r+0x266>
 8012b92:	2800      	cmp	r0, #0
 8012b94:	d10a      	bne.n	8012bac <__sfvwrite_r+0x68>
 8012b96:	001a      	movs	r2, r3
 8012b98:	210a      	movs	r1, #10
 8012b9a:	0030      	movs	r0, r6
 8012b9c:	f7fd fe2a 	bl	80107f4 <memchr>
 8012ba0:	9b03      	ldr	r3, [sp, #12]
 8012ba2:	1c5f      	adds	r7, r3, #1
 8012ba4:	2800      	cmp	r0, #0
 8012ba6:	d001      	beq.n	8012bac <__sfvwrite_r+0x68>
 8012ba8:	3001      	adds	r0, #1
 8012baa:	1b87      	subs	r7, r0, r6
 8012bac:	9b03      	ldr	r3, [sp, #12]
 8012bae:	9705      	str	r7, [sp, #20]
 8012bb0:	429f      	cmp	r7, r3
 8012bb2:	d900      	bls.n	8012bb6 <__sfvwrite_r+0x72>
 8012bb4:	9305      	str	r3, [sp, #20]
 8012bb6:	6820      	ldr	r0, [r4, #0]
 8012bb8:	6922      	ldr	r2, [r4, #16]
 8012bba:	68a5      	ldr	r5, [r4, #8]
 8012bbc:	6963      	ldr	r3, [r4, #20]
 8012bbe:	4290      	cmp	r0, r2
 8012bc0:	d800      	bhi.n	8012bc4 <__sfvwrite_r+0x80>
 8012bc2:	e0fb      	b.n	8012dbc <__sfvwrite_r+0x278>
 8012bc4:	9a05      	ldr	r2, [sp, #20]
 8012bc6:	18ed      	adds	r5, r5, r3
 8012bc8:	42aa      	cmp	r2, r5
 8012bca:	dc00      	bgt.n	8012bce <__sfvwrite_r+0x8a>
 8012bcc:	e0f6      	b.n	8012dbc <__sfvwrite_r+0x278>
 8012bce:	0031      	movs	r1, r6
 8012bd0:	002a      	movs	r2, r5
 8012bd2:	f000 fa1e 	bl	8013012 <memmove>
 8012bd6:	6823      	ldr	r3, [r4, #0]
 8012bd8:	0021      	movs	r1, r4
 8012bda:	195b      	adds	r3, r3, r5
 8012bdc:	9802      	ldr	r0, [sp, #8]
 8012bde:	6023      	str	r3, [r4, #0]
 8012be0:	f7fd fd8e 	bl	8010700 <_fflush_r>
 8012be4:	2800      	cmp	r0, #0
 8012be6:	d16e      	bne.n	8012cc6 <__sfvwrite_r+0x182>
 8012be8:	2001      	movs	r0, #1
 8012bea:	1b7f      	subs	r7, r7, r5
 8012bec:	d105      	bne.n	8012bfa <__sfvwrite_r+0xb6>
 8012bee:	0021      	movs	r1, r4
 8012bf0:	9802      	ldr	r0, [sp, #8]
 8012bf2:	f7fd fd85 	bl	8010700 <_fflush_r>
 8012bf6:	2800      	cmp	r0, #0
 8012bf8:	d165      	bne.n	8012cc6 <__sfvwrite_r+0x182>
 8012bfa:	9b03      	ldr	r3, [sp, #12]
 8012bfc:	9a04      	ldr	r2, [sp, #16]
 8012bfe:	1b5b      	subs	r3, r3, r5
 8012c00:	9303      	str	r3, [sp, #12]
 8012c02:	9b04      	ldr	r3, [sp, #16]
 8012c04:	1976      	adds	r6, r6, r5
 8012c06:	689b      	ldr	r3, [r3, #8]
 8012c08:	1b5b      	subs	r3, r3, r5
 8012c0a:	6093      	str	r3, [r2, #8]
 8012c0c:	d1bd      	bne.n	8012b8a <__sfvwrite_r+0x46>
 8012c0e:	e7a1      	b.n	8012b54 <__sfvwrite_r+0x10>
 8012c10:	0021      	movs	r1, r4
 8012c12:	9802      	ldr	r0, [sp, #8]
 8012c14:	f000 f932 	bl	8012e7c <__swsetup_r>
 8012c18:	2800      	cmp	r0, #0
 8012c1a:	d0a4      	beq.n	8012b66 <__sfvwrite_r+0x22>
 8012c1c:	2001      	movs	r0, #1
 8012c1e:	4240      	negs	r0, r0
 8012c20:	e799      	b.n	8012b56 <__sfvwrite_r+0x12>
 8012c22:	9b01      	ldr	r3, [sp, #4]
 8012c24:	681e      	ldr	r6, [r3, #0]
 8012c26:	685d      	ldr	r5, [r3, #4]
 8012c28:	3308      	adds	r3, #8
 8012c2a:	9301      	str	r3, [sp, #4]
 8012c2c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8012c2e:	69e1      	ldr	r1, [r4, #28]
 8012c30:	2d00      	cmp	r5, #0
 8012c32:	d0f6      	beq.n	8012c22 <__sfvwrite_r+0xde>
 8012c34:	4a6e      	ldr	r2, [pc, #440]	; (8012df0 <__sfvwrite_r+0x2ac>)
 8012c36:	002b      	movs	r3, r5
 8012c38:	4295      	cmp	r5, r2
 8012c3a:	d900      	bls.n	8012c3e <__sfvwrite_r+0xfa>
 8012c3c:	0013      	movs	r3, r2
 8012c3e:	0032      	movs	r2, r6
 8012c40:	9802      	ldr	r0, [sp, #8]
 8012c42:	47b8      	blx	r7
 8012c44:	2800      	cmp	r0, #0
 8012c46:	dd3e      	ble.n	8012cc6 <__sfvwrite_r+0x182>
 8012c48:	9b04      	ldr	r3, [sp, #16]
 8012c4a:	9a04      	ldr	r2, [sp, #16]
 8012c4c:	689b      	ldr	r3, [r3, #8]
 8012c4e:	1836      	adds	r6, r6, r0
 8012c50:	1a1b      	subs	r3, r3, r0
 8012c52:	1a2d      	subs	r5, r5, r0
 8012c54:	6093      	str	r3, [r2, #8]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d1e8      	bne.n	8012c2c <__sfvwrite_r+0xe8>
 8012c5a:	e77b      	b.n	8012b54 <__sfvwrite_r+0x10>
 8012c5c:	2600      	movs	r6, #0
 8012c5e:	0035      	movs	r5, r6
 8012c60:	e7e4      	b.n	8012c2c <__sfvwrite_r+0xe8>
 8012c62:	9b01      	ldr	r3, [sp, #4]
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	9303      	str	r3, [sp, #12]
 8012c68:	9b01      	ldr	r3, [sp, #4]
 8012c6a:	685d      	ldr	r5, [r3, #4]
 8012c6c:	3308      	adds	r3, #8
 8012c6e:	9301      	str	r3, [sp, #4]
 8012c70:	220c      	movs	r2, #12
 8012c72:	5ea3      	ldrsh	r3, [r4, r2]
 8012c74:	6820      	ldr	r0, [r4, #0]
 8012c76:	68a6      	ldr	r6, [r4, #8]
 8012c78:	2d00      	cmp	r5, #0
 8012c7a:	d0f2      	beq.n	8012c62 <__sfvwrite_r+0x11e>
 8012c7c:	2180      	movs	r1, #128	; 0x80
 8012c7e:	0089      	lsls	r1, r1, #2
 8012c80:	b29a      	uxth	r2, r3
 8012c82:	420b      	tst	r3, r1
 8012c84:	d062      	beq.n	8012d4c <__sfvwrite_r+0x208>
 8012c86:	42ae      	cmp	r6, r5
 8012c88:	d837      	bhi.n	8012cfa <__sfvwrite_r+0x1b6>
 8012c8a:	2390      	movs	r3, #144	; 0x90
 8012c8c:	00db      	lsls	r3, r3, #3
 8012c8e:	421a      	tst	r2, r3
 8012c90:	d033      	beq.n	8012cfa <__sfvwrite_r+0x1b6>
 8012c92:	6921      	ldr	r1, [r4, #16]
 8012c94:	1a43      	subs	r3, r0, r1
 8012c96:	2003      	movs	r0, #3
 8012c98:	9305      	str	r3, [sp, #20]
 8012c9a:	6963      	ldr	r3, [r4, #20]
 8012c9c:	4343      	muls	r3, r0
 8012c9e:	0fdf      	lsrs	r7, r3, #31
 8012ca0:	18ff      	adds	r7, r7, r3
 8012ca2:	9b05      	ldr	r3, [sp, #20]
 8012ca4:	107f      	asrs	r7, r7, #1
 8012ca6:	3301      	adds	r3, #1
 8012ca8:	195b      	adds	r3, r3, r5
 8012caa:	42bb      	cmp	r3, r7
 8012cac:	d900      	bls.n	8012cb0 <__sfvwrite_r+0x16c>
 8012cae:	001f      	movs	r7, r3
 8012cb0:	0552      	lsls	r2, r2, #21
 8012cb2:	d53c      	bpl.n	8012d2e <__sfvwrite_r+0x1ea>
 8012cb4:	0039      	movs	r1, r7
 8012cb6:	9802      	ldr	r0, [sp, #8]
 8012cb8:	f7f8 fb56 	bl	800b368 <_malloc_r>
 8012cbc:	1e06      	subs	r6, r0, #0
 8012cbe:	d10a      	bne.n	8012cd6 <__sfvwrite_r+0x192>
 8012cc0:	230c      	movs	r3, #12
 8012cc2:	9a02      	ldr	r2, [sp, #8]
 8012cc4:	6013      	str	r3, [r2, #0]
 8012cc6:	2340      	movs	r3, #64	; 0x40
 8012cc8:	89a2      	ldrh	r2, [r4, #12]
 8012cca:	4313      	orrs	r3, r2
 8012ccc:	81a3      	strh	r3, [r4, #12]
 8012cce:	e7a5      	b.n	8012c1c <__sfvwrite_r+0xd8>
 8012cd0:	0015      	movs	r5, r2
 8012cd2:	9203      	str	r2, [sp, #12]
 8012cd4:	e7cc      	b.n	8012c70 <__sfvwrite_r+0x12c>
 8012cd6:	9a05      	ldr	r2, [sp, #20]
 8012cd8:	6921      	ldr	r1, [r4, #16]
 8012cda:	f7f9 feaa 	bl	800ca32 <memcpy>
 8012cde:	89a2      	ldrh	r2, [r4, #12]
 8012ce0:	4b44      	ldr	r3, [pc, #272]	; (8012df4 <__sfvwrite_r+0x2b0>)
 8012ce2:	401a      	ands	r2, r3
 8012ce4:	2380      	movs	r3, #128	; 0x80
 8012ce6:	4313      	orrs	r3, r2
 8012ce8:	81a3      	strh	r3, [r4, #12]
 8012cea:	9b05      	ldr	r3, [sp, #20]
 8012cec:	6126      	str	r6, [r4, #16]
 8012cee:	18f6      	adds	r6, r6, r3
 8012cf0:	6026      	str	r6, [r4, #0]
 8012cf2:	002e      	movs	r6, r5
 8012cf4:	6167      	str	r7, [r4, #20]
 8012cf6:	1aff      	subs	r7, r7, r3
 8012cf8:	60a7      	str	r7, [r4, #8]
 8012cfa:	002f      	movs	r7, r5
 8012cfc:	42ae      	cmp	r6, r5
 8012cfe:	d900      	bls.n	8012d02 <__sfvwrite_r+0x1be>
 8012d00:	002e      	movs	r6, r5
 8012d02:	0032      	movs	r2, r6
 8012d04:	9903      	ldr	r1, [sp, #12]
 8012d06:	6820      	ldr	r0, [r4, #0]
 8012d08:	f000 f983 	bl	8013012 <memmove>
 8012d0c:	68a3      	ldr	r3, [r4, #8]
 8012d0e:	1b9b      	subs	r3, r3, r6
 8012d10:	60a3      	str	r3, [r4, #8]
 8012d12:	6823      	ldr	r3, [r4, #0]
 8012d14:	199b      	adds	r3, r3, r6
 8012d16:	6023      	str	r3, [r4, #0]
 8012d18:	9b03      	ldr	r3, [sp, #12]
 8012d1a:	9a04      	ldr	r2, [sp, #16]
 8012d1c:	19db      	adds	r3, r3, r7
 8012d1e:	9303      	str	r3, [sp, #12]
 8012d20:	9b04      	ldr	r3, [sp, #16]
 8012d22:	1bed      	subs	r5, r5, r7
 8012d24:	689b      	ldr	r3, [r3, #8]
 8012d26:	1bdb      	subs	r3, r3, r7
 8012d28:	6093      	str	r3, [r2, #8]
 8012d2a:	d1a1      	bne.n	8012c70 <__sfvwrite_r+0x12c>
 8012d2c:	e712      	b.n	8012b54 <__sfvwrite_r+0x10>
 8012d2e:	003a      	movs	r2, r7
 8012d30:	9802      	ldr	r0, [sp, #8]
 8012d32:	f7fe fcd7 	bl	80116e4 <_realloc_r>
 8012d36:	1e06      	subs	r6, r0, #0
 8012d38:	d1d7      	bne.n	8012cea <__sfvwrite_r+0x1a6>
 8012d3a:	6921      	ldr	r1, [r4, #16]
 8012d3c:	9802      	ldr	r0, [sp, #8]
 8012d3e:	f7f9 fef3 	bl	800cb28 <_free_r>
 8012d42:	2280      	movs	r2, #128	; 0x80
 8012d44:	89a3      	ldrh	r3, [r4, #12]
 8012d46:	4393      	bics	r3, r2
 8012d48:	81a3      	strh	r3, [r4, #12]
 8012d4a:	e7b9      	b.n	8012cc0 <__sfvwrite_r+0x17c>
 8012d4c:	6923      	ldr	r3, [r4, #16]
 8012d4e:	4283      	cmp	r3, r0
 8012d50:	d302      	bcc.n	8012d58 <__sfvwrite_r+0x214>
 8012d52:	6967      	ldr	r7, [r4, #20]
 8012d54:	42af      	cmp	r7, r5
 8012d56:	d916      	bls.n	8012d86 <__sfvwrite_r+0x242>
 8012d58:	42ae      	cmp	r6, r5
 8012d5a:	d900      	bls.n	8012d5e <__sfvwrite_r+0x21a>
 8012d5c:	002e      	movs	r6, r5
 8012d5e:	0032      	movs	r2, r6
 8012d60:	9903      	ldr	r1, [sp, #12]
 8012d62:	f000 f956 	bl	8013012 <memmove>
 8012d66:	68a3      	ldr	r3, [r4, #8]
 8012d68:	6822      	ldr	r2, [r4, #0]
 8012d6a:	1b9b      	subs	r3, r3, r6
 8012d6c:	1992      	adds	r2, r2, r6
 8012d6e:	0037      	movs	r7, r6
 8012d70:	60a3      	str	r3, [r4, #8]
 8012d72:	6022      	str	r2, [r4, #0]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d1cf      	bne.n	8012d18 <__sfvwrite_r+0x1d4>
 8012d78:	0021      	movs	r1, r4
 8012d7a:	9802      	ldr	r0, [sp, #8]
 8012d7c:	f7fd fcc0 	bl	8010700 <_fflush_r>
 8012d80:	2800      	cmp	r0, #0
 8012d82:	d0c9      	beq.n	8012d18 <__sfvwrite_r+0x1d4>
 8012d84:	e79f      	b.n	8012cc6 <__sfvwrite_r+0x182>
 8012d86:	4b1c      	ldr	r3, [pc, #112]	; (8012df8 <__sfvwrite_r+0x2b4>)
 8012d88:	0028      	movs	r0, r5
 8012d8a:	429d      	cmp	r5, r3
 8012d8c:	d900      	bls.n	8012d90 <__sfvwrite_r+0x24c>
 8012d8e:	481b      	ldr	r0, [pc, #108]	; (8012dfc <__sfvwrite_r+0x2b8>)
 8012d90:	0039      	movs	r1, r7
 8012d92:	f7ed fa5d 	bl	8000250 <__divsi3>
 8012d96:	003b      	movs	r3, r7
 8012d98:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012d9a:	4343      	muls	r3, r0
 8012d9c:	9a03      	ldr	r2, [sp, #12]
 8012d9e:	69e1      	ldr	r1, [r4, #28]
 8012da0:	9802      	ldr	r0, [sp, #8]
 8012da2:	47b0      	blx	r6
 8012da4:	1e07      	subs	r7, r0, #0
 8012da6:	dcb7      	bgt.n	8012d18 <__sfvwrite_r+0x1d4>
 8012da8:	e78d      	b.n	8012cc6 <__sfvwrite_r+0x182>
 8012daa:	9b01      	ldr	r3, [sp, #4]
 8012dac:	2000      	movs	r0, #0
 8012dae:	681e      	ldr	r6, [r3, #0]
 8012db0:	685b      	ldr	r3, [r3, #4]
 8012db2:	9303      	str	r3, [sp, #12]
 8012db4:	9b01      	ldr	r3, [sp, #4]
 8012db6:	3308      	adds	r3, #8
 8012db8:	9301      	str	r3, [sp, #4]
 8012dba:	e6e6      	b.n	8012b8a <__sfvwrite_r+0x46>
 8012dbc:	9a05      	ldr	r2, [sp, #20]
 8012dbe:	4293      	cmp	r3, r2
 8012dc0:	dc08      	bgt.n	8012dd4 <__sfvwrite_r+0x290>
 8012dc2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8012dc4:	0032      	movs	r2, r6
 8012dc6:	69e1      	ldr	r1, [r4, #28]
 8012dc8:	9802      	ldr	r0, [sp, #8]
 8012dca:	47a8      	blx	r5
 8012dcc:	1e05      	subs	r5, r0, #0
 8012dce:	dd00      	ble.n	8012dd2 <__sfvwrite_r+0x28e>
 8012dd0:	e70a      	b.n	8012be8 <__sfvwrite_r+0xa4>
 8012dd2:	e778      	b.n	8012cc6 <__sfvwrite_r+0x182>
 8012dd4:	9a05      	ldr	r2, [sp, #20]
 8012dd6:	0031      	movs	r1, r6
 8012dd8:	f000 f91b 	bl	8013012 <memmove>
 8012ddc:	9a05      	ldr	r2, [sp, #20]
 8012dde:	68a3      	ldr	r3, [r4, #8]
 8012de0:	0015      	movs	r5, r2
 8012de2:	1a9b      	subs	r3, r3, r2
 8012de4:	60a3      	str	r3, [r4, #8]
 8012de6:	6823      	ldr	r3, [r4, #0]
 8012de8:	189b      	adds	r3, r3, r2
 8012dea:	6023      	str	r3, [r4, #0]
 8012dec:	e6fc      	b.n	8012be8 <__sfvwrite_r+0xa4>
 8012dee:	46c0      	nop			; (mov r8, r8)
 8012df0:	7ffffc00 	.word	0x7ffffc00
 8012df4:	fffffb7f 	.word	0xfffffb7f
 8012df8:	7ffffffe 	.word	0x7ffffffe
 8012dfc:	7fffffff 	.word	0x7fffffff

08012e00 <__submore>:
 8012e00:	000b      	movs	r3, r1
 8012e02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012e04:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8012e06:	3340      	adds	r3, #64	; 0x40
 8012e08:	000c      	movs	r4, r1
 8012e0a:	429d      	cmp	r5, r3
 8012e0c:	d11c      	bne.n	8012e48 <__submore+0x48>
 8012e0e:	2680      	movs	r6, #128	; 0x80
 8012e10:	00f6      	lsls	r6, r6, #3
 8012e12:	0031      	movs	r1, r6
 8012e14:	f7f8 faa8 	bl	800b368 <_malloc_r>
 8012e18:	2800      	cmp	r0, #0
 8012e1a:	d102      	bne.n	8012e22 <__submore+0x22>
 8012e1c:	2001      	movs	r0, #1
 8012e1e:	4240      	negs	r0, r0
 8012e20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012e22:	0023      	movs	r3, r4
 8012e24:	6320      	str	r0, [r4, #48]	; 0x30
 8012e26:	6366      	str	r6, [r4, #52]	; 0x34
 8012e28:	3342      	adds	r3, #66	; 0x42
 8012e2a:	781a      	ldrb	r2, [r3, #0]
 8012e2c:	4b10      	ldr	r3, [pc, #64]	; (8012e70 <__submore+0x70>)
 8012e2e:	54c2      	strb	r2, [r0, r3]
 8012e30:	0023      	movs	r3, r4
 8012e32:	3341      	adds	r3, #65	; 0x41
 8012e34:	781a      	ldrb	r2, [r3, #0]
 8012e36:	4b0f      	ldr	r3, [pc, #60]	; (8012e74 <__submore+0x74>)
 8012e38:	54c2      	strb	r2, [r0, r3]
 8012e3a:	782a      	ldrb	r2, [r5, #0]
 8012e3c:	4b0e      	ldr	r3, [pc, #56]	; (8012e78 <__submore+0x78>)
 8012e3e:	54c2      	strb	r2, [r0, r3]
 8012e40:	18c0      	adds	r0, r0, r3
 8012e42:	6020      	str	r0, [r4, #0]
 8012e44:	2000      	movs	r0, #0
 8012e46:	e7eb      	b.n	8012e20 <__submore+0x20>
 8012e48:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8012e4a:	0029      	movs	r1, r5
 8012e4c:	0073      	lsls	r3, r6, #1
 8012e4e:	001a      	movs	r2, r3
 8012e50:	9301      	str	r3, [sp, #4]
 8012e52:	f7fe fc47 	bl	80116e4 <_realloc_r>
 8012e56:	1e05      	subs	r5, r0, #0
 8012e58:	d0e0      	beq.n	8012e1c <__submore+0x1c>
 8012e5a:	1987      	adds	r7, r0, r6
 8012e5c:	0001      	movs	r1, r0
 8012e5e:	0032      	movs	r2, r6
 8012e60:	0038      	movs	r0, r7
 8012e62:	f7f9 fde6 	bl	800ca32 <memcpy>
 8012e66:	9b01      	ldr	r3, [sp, #4]
 8012e68:	6027      	str	r7, [r4, #0]
 8012e6a:	6325      	str	r5, [r4, #48]	; 0x30
 8012e6c:	6363      	str	r3, [r4, #52]	; 0x34
 8012e6e:	e7e9      	b.n	8012e44 <__submore+0x44>
 8012e70:	000003ff 	.word	0x000003ff
 8012e74:	000003fe 	.word	0x000003fe
 8012e78:	000003fd 	.word	0x000003fd

08012e7c <__swsetup_r>:
 8012e7c:	4b30      	ldr	r3, [pc, #192]	; (8012f40 <__swsetup_r+0xc4>)
 8012e7e:	b570      	push	{r4, r5, r6, lr}
 8012e80:	0005      	movs	r5, r0
 8012e82:	6818      	ldr	r0, [r3, #0]
 8012e84:	000c      	movs	r4, r1
 8012e86:	2800      	cmp	r0, #0
 8012e88:	d004      	beq.n	8012e94 <__swsetup_r+0x18>
 8012e8a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d101      	bne.n	8012e94 <__swsetup_r+0x18>
 8012e90:	f7f9 fbec 	bl	800c66c <__sinit>
 8012e94:	230c      	movs	r3, #12
 8012e96:	5ee2      	ldrsh	r2, [r4, r3]
 8012e98:	b293      	uxth	r3, r2
 8012e9a:	0711      	lsls	r1, r2, #28
 8012e9c:	d423      	bmi.n	8012ee6 <__swsetup_r+0x6a>
 8012e9e:	06d9      	lsls	r1, r3, #27
 8012ea0:	d407      	bmi.n	8012eb2 <__swsetup_r+0x36>
 8012ea2:	2309      	movs	r3, #9
 8012ea4:	2001      	movs	r0, #1
 8012ea6:	602b      	str	r3, [r5, #0]
 8012ea8:	3337      	adds	r3, #55	; 0x37
 8012eaa:	4313      	orrs	r3, r2
 8012eac:	81a3      	strh	r3, [r4, #12]
 8012eae:	4240      	negs	r0, r0
 8012eb0:	bd70      	pop	{r4, r5, r6, pc}
 8012eb2:	075b      	lsls	r3, r3, #29
 8012eb4:	d513      	bpl.n	8012ede <__swsetup_r+0x62>
 8012eb6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012eb8:	2900      	cmp	r1, #0
 8012eba:	d008      	beq.n	8012ece <__swsetup_r+0x52>
 8012ebc:	0023      	movs	r3, r4
 8012ebe:	3340      	adds	r3, #64	; 0x40
 8012ec0:	4299      	cmp	r1, r3
 8012ec2:	d002      	beq.n	8012eca <__swsetup_r+0x4e>
 8012ec4:	0028      	movs	r0, r5
 8012ec6:	f7f9 fe2f 	bl	800cb28 <_free_r>
 8012eca:	2300      	movs	r3, #0
 8012ecc:	6323      	str	r3, [r4, #48]	; 0x30
 8012ece:	2224      	movs	r2, #36	; 0x24
 8012ed0:	89a3      	ldrh	r3, [r4, #12]
 8012ed2:	4393      	bics	r3, r2
 8012ed4:	81a3      	strh	r3, [r4, #12]
 8012ed6:	2300      	movs	r3, #0
 8012ed8:	6063      	str	r3, [r4, #4]
 8012eda:	6923      	ldr	r3, [r4, #16]
 8012edc:	6023      	str	r3, [r4, #0]
 8012ede:	2308      	movs	r3, #8
 8012ee0:	89a2      	ldrh	r2, [r4, #12]
 8012ee2:	4313      	orrs	r3, r2
 8012ee4:	81a3      	strh	r3, [r4, #12]
 8012ee6:	6923      	ldr	r3, [r4, #16]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d10b      	bne.n	8012f04 <__swsetup_r+0x88>
 8012eec:	21a0      	movs	r1, #160	; 0xa0
 8012eee:	2280      	movs	r2, #128	; 0x80
 8012ef0:	89a3      	ldrh	r3, [r4, #12]
 8012ef2:	0089      	lsls	r1, r1, #2
 8012ef4:	0092      	lsls	r2, r2, #2
 8012ef6:	400b      	ands	r3, r1
 8012ef8:	4293      	cmp	r3, r2
 8012efa:	d003      	beq.n	8012f04 <__swsetup_r+0x88>
 8012efc:	0021      	movs	r1, r4
 8012efe:	0028      	movs	r0, r5
 8012f00:	f000 f8e8 	bl	80130d4 <__smakebuf_r>
 8012f04:	220c      	movs	r2, #12
 8012f06:	5ea3      	ldrsh	r3, [r4, r2]
 8012f08:	2001      	movs	r0, #1
 8012f0a:	001a      	movs	r2, r3
 8012f0c:	b299      	uxth	r1, r3
 8012f0e:	4002      	ands	r2, r0
 8012f10:	4203      	tst	r3, r0
 8012f12:	d00f      	beq.n	8012f34 <__swsetup_r+0xb8>
 8012f14:	2200      	movs	r2, #0
 8012f16:	60a2      	str	r2, [r4, #8]
 8012f18:	6962      	ldr	r2, [r4, #20]
 8012f1a:	4252      	negs	r2, r2
 8012f1c:	61a2      	str	r2, [r4, #24]
 8012f1e:	2000      	movs	r0, #0
 8012f20:	6922      	ldr	r2, [r4, #16]
 8012f22:	4282      	cmp	r2, r0
 8012f24:	d1c4      	bne.n	8012eb0 <__swsetup_r+0x34>
 8012f26:	0609      	lsls	r1, r1, #24
 8012f28:	d5c2      	bpl.n	8012eb0 <__swsetup_r+0x34>
 8012f2a:	2240      	movs	r2, #64	; 0x40
 8012f2c:	4313      	orrs	r3, r2
 8012f2e:	81a3      	strh	r3, [r4, #12]
 8012f30:	3801      	subs	r0, #1
 8012f32:	e7bd      	b.n	8012eb0 <__swsetup_r+0x34>
 8012f34:	0788      	lsls	r0, r1, #30
 8012f36:	d400      	bmi.n	8012f3a <__swsetup_r+0xbe>
 8012f38:	6962      	ldr	r2, [r4, #20]
 8012f3a:	60a2      	str	r2, [r4, #8]
 8012f3c:	e7ef      	b.n	8012f1e <__swsetup_r+0xa2>
 8012f3e:	46c0      	nop			; (mov r8, r8)
 8012f40:	200006d8 	.word	0x200006d8

08012f44 <__fputwc>:
 8012f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f46:	b085      	sub	sp, #20
 8012f48:	000e      	movs	r6, r1
 8012f4a:	0015      	movs	r5, r2
 8012f4c:	9001      	str	r0, [sp, #4]
 8012f4e:	f7f9 fccf 	bl	800c8f0 <__locale_mb_cur_max>
 8012f52:	0004      	movs	r4, r0
 8012f54:	2801      	cmp	r0, #1
 8012f56:	d119      	bne.n	8012f8c <__fputwc+0x48>
 8012f58:	1e73      	subs	r3, r6, #1
 8012f5a:	2bfe      	cmp	r3, #254	; 0xfe
 8012f5c:	d816      	bhi.n	8012f8c <__fputwc+0x48>
 8012f5e:	ab02      	add	r3, sp, #8
 8012f60:	711e      	strb	r6, [r3, #4]
 8012f62:	2700      	movs	r7, #0
 8012f64:	42a7      	cmp	r7, r4
 8012f66:	d020      	beq.n	8012faa <__fputwc+0x66>
 8012f68:	ab03      	add	r3, sp, #12
 8012f6a:	5dd9      	ldrb	r1, [r3, r7]
 8012f6c:	68ab      	ldr	r3, [r5, #8]
 8012f6e:	3b01      	subs	r3, #1
 8012f70:	60ab      	str	r3, [r5, #8]
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	da04      	bge.n	8012f80 <__fputwc+0x3c>
 8012f76:	69aa      	ldr	r2, [r5, #24]
 8012f78:	4293      	cmp	r3, r2
 8012f7a:	db19      	blt.n	8012fb0 <__fputwc+0x6c>
 8012f7c:	290a      	cmp	r1, #10
 8012f7e:	d017      	beq.n	8012fb0 <__fputwc+0x6c>
 8012f80:	682b      	ldr	r3, [r5, #0]
 8012f82:	1c5a      	adds	r2, r3, #1
 8012f84:	602a      	str	r2, [r5, #0]
 8012f86:	7019      	strb	r1, [r3, #0]
 8012f88:	3701      	adds	r7, #1
 8012f8a:	e7eb      	b.n	8012f64 <__fputwc+0x20>
 8012f8c:	002b      	movs	r3, r5
 8012f8e:	0032      	movs	r2, r6
 8012f90:	9801      	ldr	r0, [sp, #4]
 8012f92:	335c      	adds	r3, #92	; 0x5c
 8012f94:	a903      	add	r1, sp, #12
 8012f96:	f000 f857 	bl	8013048 <_wcrtomb_r>
 8012f9a:	0004      	movs	r4, r0
 8012f9c:	1c43      	adds	r3, r0, #1
 8012f9e:	d1e0      	bne.n	8012f62 <__fputwc+0x1e>
 8012fa0:	2340      	movs	r3, #64	; 0x40
 8012fa2:	0006      	movs	r6, r0
 8012fa4:	89aa      	ldrh	r2, [r5, #12]
 8012fa6:	4313      	orrs	r3, r2
 8012fa8:	81ab      	strh	r3, [r5, #12]
 8012faa:	0030      	movs	r0, r6
 8012fac:	b005      	add	sp, #20
 8012fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012fb0:	002a      	movs	r2, r5
 8012fb2:	9801      	ldr	r0, [sp, #4]
 8012fb4:	f000 f8cc 	bl	8013150 <__swbuf_r>
 8012fb8:	1c43      	adds	r3, r0, #1
 8012fba:	d1e5      	bne.n	8012f88 <__fputwc+0x44>
 8012fbc:	0006      	movs	r6, r0
 8012fbe:	e7f4      	b.n	8012faa <__fputwc+0x66>

08012fc0 <_fputwc_r>:
 8012fc0:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8012fc2:	b570      	push	{r4, r5, r6, lr}
 8012fc4:	0005      	movs	r5, r0
 8012fc6:	000e      	movs	r6, r1
 8012fc8:	0014      	movs	r4, r2
 8012fca:	07db      	lsls	r3, r3, #31
 8012fcc:	d405      	bmi.n	8012fda <_fputwc_r+0x1a>
 8012fce:	8993      	ldrh	r3, [r2, #12]
 8012fd0:	059b      	lsls	r3, r3, #22
 8012fd2:	d402      	bmi.n	8012fda <_fputwc_r+0x1a>
 8012fd4:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8012fd6:	f7f9 fd1f 	bl	800ca18 <__retarget_lock_acquire_recursive>
 8012fda:	230c      	movs	r3, #12
 8012fdc:	5ee2      	ldrsh	r2, [r4, r3]
 8012fde:	2380      	movs	r3, #128	; 0x80
 8012fe0:	019b      	lsls	r3, r3, #6
 8012fe2:	421a      	tst	r2, r3
 8012fe4:	d104      	bne.n	8012ff0 <_fputwc_r+0x30>
 8012fe6:	431a      	orrs	r2, r3
 8012fe8:	81a2      	strh	r2, [r4, #12]
 8012fea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012fec:	4313      	orrs	r3, r2
 8012fee:	6663      	str	r3, [r4, #100]	; 0x64
 8012ff0:	0028      	movs	r0, r5
 8012ff2:	0022      	movs	r2, r4
 8012ff4:	0031      	movs	r1, r6
 8012ff6:	f7ff ffa5 	bl	8012f44 <__fputwc>
 8012ffa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012ffc:	0005      	movs	r5, r0
 8012ffe:	07db      	lsls	r3, r3, #31
 8013000:	d405      	bmi.n	801300e <_fputwc_r+0x4e>
 8013002:	89a3      	ldrh	r3, [r4, #12]
 8013004:	059b      	lsls	r3, r3, #22
 8013006:	d402      	bmi.n	801300e <_fputwc_r+0x4e>
 8013008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801300a:	f7f9 fd06 	bl	800ca1a <__retarget_lock_release_recursive>
 801300e:	0028      	movs	r0, r5
 8013010:	bd70      	pop	{r4, r5, r6, pc}

08013012 <memmove>:
 8013012:	b510      	push	{r4, lr}
 8013014:	4288      	cmp	r0, r1
 8013016:	d902      	bls.n	801301e <memmove+0xc>
 8013018:	188b      	adds	r3, r1, r2
 801301a:	4298      	cmp	r0, r3
 801301c:	d303      	bcc.n	8013026 <memmove+0x14>
 801301e:	2300      	movs	r3, #0
 8013020:	e007      	b.n	8013032 <memmove+0x20>
 8013022:	5c8b      	ldrb	r3, [r1, r2]
 8013024:	5483      	strb	r3, [r0, r2]
 8013026:	3a01      	subs	r2, #1
 8013028:	d2fb      	bcs.n	8013022 <memmove+0x10>
 801302a:	bd10      	pop	{r4, pc}
 801302c:	5ccc      	ldrb	r4, [r1, r3]
 801302e:	54c4      	strb	r4, [r0, r3]
 8013030:	3301      	adds	r3, #1
 8013032:	429a      	cmp	r2, r3
 8013034:	d1fa      	bne.n	801302c <memmove+0x1a>
 8013036:	e7f8      	b.n	801302a <memmove+0x18>

08013038 <abort>:
 8013038:	2006      	movs	r0, #6
 801303a:	b510      	push	{r4, lr}
 801303c:	f000 f906 	bl	801324c <raise>
 8013040:	2001      	movs	r0, #1
 8013042:	f7f0 fc5b 	bl	80038fc <_exit>
	...

08013048 <_wcrtomb_r>:
 8013048:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801304a:	001d      	movs	r5, r3
 801304c:	4b09      	ldr	r3, [pc, #36]	; (8013074 <_wcrtomb_r+0x2c>)
 801304e:	0004      	movs	r4, r0
 8013050:	33e0      	adds	r3, #224	; 0xe0
 8013052:	681e      	ldr	r6, [r3, #0]
 8013054:	002b      	movs	r3, r5
 8013056:	2900      	cmp	r1, #0
 8013058:	d101      	bne.n	801305e <_wcrtomb_r+0x16>
 801305a:	000a      	movs	r2, r1
 801305c:	a901      	add	r1, sp, #4
 801305e:	0020      	movs	r0, r4
 8013060:	47b0      	blx	r6
 8013062:	1c43      	adds	r3, r0, #1
 8013064:	d103      	bne.n	801306e <_wcrtomb_r+0x26>
 8013066:	2300      	movs	r3, #0
 8013068:	602b      	str	r3, [r5, #0]
 801306a:	338a      	adds	r3, #138	; 0x8a
 801306c:	6023      	str	r3, [r4, #0]
 801306e:	b004      	add	sp, #16
 8013070:	bd70      	pop	{r4, r5, r6, pc}
 8013072:	46c0      	nop			; (mov r8, r8)
 8013074:	2000044c 	.word	0x2000044c

08013078 <__swhatbuf_r>:
 8013078:	b570      	push	{r4, r5, r6, lr}
 801307a:	000e      	movs	r6, r1
 801307c:	001d      	movs	r5, r3
 801307e:	230e      	movs	r3, #14
 8013080:	5ec9      	ldrsh	r1, [r1, r3]
 8013082:	0014      	movs	r4, r2
 8013084:	b096      	sub	sp, #88	; 0x58
 8013086:	2900      	cmp	r1, #0
 8013088:	da09      	bge.n	801309e <__swhatbuf_r+0x26>
 801308a:	89b2      	ldrh	r2, [r6, #12]
 801308c:	2380      	movs	r3, #128	; 0x80
 801308e:	0011      	movs	r1, r2
 8013090:	4019      	ands	r1, r3
 8013092:	421a      	tst	r2, r3
 8013094:	d018      	beq.n	80130c8 <__swhatbuf_r+0x50>
 8013096:	2100      	movs	r1, #0
 8013098:	3b40      	subs	r3, #64	; 0x40
 801309a:	0008      	movs	r0, r1
 801309c:	e010      	b.n	80130c0 <__swhatbuf_r+0x48>
 801309e:	466a      	mov	r2, sp
 80130a0:	f000 f8de 	bl	8013260 <_fstat_r>
 80130a4:	2800      	cmp	r0, #0
 80130a6:	dbf0      	blt.n	801308a <__swhatbuf_r+0x12>
 80130a8:	23f0      	movs	r3, #240	; 0xf0
 80130aa:	9901      	ldr	r1, [sp, #4]
 80130ac:	021b      	lsls	r3, r3, #8
 80130ae:	4019      	ands	r1, r3
 80130b0:	4b07      	ldr	r3, [pc, #28]	; (80130d0 <__swhatbuf_r+0x58>)
 80130b2:	2080      	movs	r0, #128	; 0x80
 80130b4:	18c9      	adds	r1, r1, r3
 80130b6:	424b      	negs	r3, r1
 80130b8:	4159      	adcs	r1, r3
 80130ba:	2380      	movs	r3, #128	; 0x80
 80130bc:	0100      	lsls	r0, r0, #4
 80130be:	00db      	lsls	r3, r3, #3
 80130c0:	6029      	str	r1, [r5, #0]
 80130c2:	6023      	str	r3, [r4, #0]
 80130c4:	b016      	add	sp, #88	; 0x58
 80130c6:	bd70      	pop	{r4, r5, r6, pc}
 80130c8:	2380      	movs	r3, #128	; 0x80
 80130ca:	00db      	lsls	r3, r3, #3
 80130cc:	e7e5      	b.n	801309a <__swhatbuf_r+0x22>
 80130ce:	46c0      	nop			; (mov r8, r8)
 80130d0:	ffffe000 	.word	0xffffe000

080130d4 <__smakebuf_r>:
 80130d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80130d6:	2602      	movs	r6, #2
 80130d8:	898b      	ldrh	r3, [r1, #12]
 80130da:	0005      	movs	r5, r0
 80130dc:	000c      	movs	r4, r1
 80130de:	4233      	tst	r3, r6
 80130e0:	d006      	beq.n	80130f0 <__smakebuf_r+0x1c>
 80130e2:	0023      	movs	r3, r4
 80130e4:	3343      	adds	r3, #67	; 0x43
 80130e6:	6023      	str	r3, [r4, #0]
 80130e8:	6123      	str	r3, [r4, #16]
 80130ea:	2301      	movs	r3, #1
 80130ec:	6163      	str	r3, [r4, #20]
 80130ee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80130f0:	466a      	mov	r2, sp
 80130f2:	ab01      	add	r3, sp, #4
 80130f4:	f7ff ffc0 	bl	8013078 <__swhatbuf_r>
 80130f8:	9900      	ldr	r1, [sp, #0]
 80130fa:	0007      	movs	r7, r0
 80130fc:	0028      	movs	r0, r5
 80130fe:	f7f8 f933 	bl	800b368 <_malloc_r>
 8013102:	2800      	cmp	r0, #0
 8013104:	d108      	bne.n	8013118 <__smakebuf_r+0x44>
 8013106:	220c      	movs	r2, #12
 8013108:	5ea3      	ldrsh	r3, [r4, r2]
 801310a:	059a      	lsls	r2, r3, #22
 801310c:	d4ef      	bmi.n	80130ee <__smakebuf_r+0x1a>
 801310e:	2203      	movs	r2, #3
 8013110:	4393      	bics	r3, r2
 8013112:	431e      	orrs	r6, r3
 8013114:	81a6      	strh	r6, [r4, #12]
 8013116:	e7e4      	b.n	80130e2 <__smakebuf_r+0xe>
 8013118:	2380      	movs	r3, #128	; 0x80
 801311a:	89a2      	ldrh	r2, [r4, #12]
 801311c:	6020      	str	r0, [r4, #0]
 801311e:	4313      	orrs	r3, r2
 8013120:	81a3      	strh	r3, [r4, #12]
 8013122:	9b00      	ldr	r3, [sp, #0]
 8013124:	6120      	str	r0, [r4, #16]
 8013126:	6163      	str	r3, [r4, #20]
 8013128:	9b01      	ldr	r3, [sp, #4]
 801312a:	2b00      	cmp	r3, #0
 801312c:	d00c      	beq.n	8013148 <__smakebuf_r+0x74>
 801312e:	0028      	movs	r0, r5
 8013130:	230e      	movs	r3, #14
 8013132:	5ee1      	ldrsh	r1, [r4, r3]
 8013134:	f000 f8a6 	bl	8013284 <_isatty_r>
 8013138:	2800      	cmp	r0, #0
 801313a:	d005      	beq.n	8013148 <__smakebuf_r+0x74>
 801313c:	2303      	movs	r3, #3
 801313e:	89a2      	ldrh	r2, [r4, #12]
 8013140:	439a      	bics	r2, r3
 8013142:	3b02      	subs	r3, #2
 8013144:	4313      	orrs	r3, r2
 8013146:	81a3      	strh	r3, [r4, #12]
 8013148:	89a3      	ldrh	r3, [r4, #12]
 801314a:	433b      	orrs	r3, r7
 801314c:	81a3      	strh	r3, [r4, #12]
 801314e:	e7ce      	b.n	80130ee <__smakebuf_r+0x1a>

08013150 <__swbuf_r>:
 8013150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013152:	0006      	movs	r6, r0
 8013154:	000d      	movs	r5, r1
 8013156:	0014      	movs	r4, r2
 8013158:	2800      	cmp	r0, #0
 801315a:	d004      	beq.n	8013166 <__swbuf_r+0x16>
 801315c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801315e:	2b00      	cmp	r3, #0
 8013160:	d101      	bne.n	8013166 <__swbuf_r+0x16>
 8013162:	f7f9 fa83 	bl	800c66c <__sinit>
 8013166:	69a3      	ldr	r3, [r4, #24]
 8013168:	60a3      	str	r3, [r4, #8]
 801316a:	89a3      	ldrh	r3, [r4, #12]
 801316c:	071b      	lsls	r3, r3, #28
 801316e:	d52e      	bpl.n	80131ce <__swbuf_r+0x7e>
 8013170:	6923      	ldr	r3, [r4, #16]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d02b      	beq.n	80131ce <__swbuf_r+0x7e>
 8013176:	230c      	movs	r3, #12
 8013178:	5ee2      	ldrsh	r2, [r4, r3]
 801317a:	2380      	movs	r3, #128	; 0x80
 801317c:	019b      	lsls	r3, r3, #6
 801317e:	b2ef      	uxtb	r7, r5
 8013180:	b2ed      	uxtb	r5, r5
 8013182:	421a      	tst	r2, r3
 8013184:	d02c      	beq.n	80131e0 <__swbuf_r+0x90>
 8013186:	6923      	ldr	r3, [r4, #16]
 8013188:	6820      	ldr	r0, [r4, #0]
 801318a:	1ac0      	subs	r0, r0, r3
 801318c:	6963      	ldr	r3, [r4, #20]
 801318e:	4283      	cmp	r3, r0
 8013190:	dc05      	bgt.n	801319e <__swbuf_r+0x4e>
 8013192:	0021      	movs	r1, r4
 8013194:	0030      	movs	r0, r6
 8013196:	f7fd fab3 	bl	8010700 <_fflush_r>
 801319a:	2800      	cmp	r0, #0
 801319c:	d11d      	bne.n	80131da <__swbuf_r+0x8a>
 801319e:	68a3      	ldr	r3, [r4, #8]
 80131a0:	3001      	adds	r0, #1
 80131a2:	3b01      	subs	r3, #1
 80131a4:	60a3      	str	r3, [r4, #8]
 80131a6:	6823      	ldr	r3, [r4, #0]
 80131a8:	1c5a      	adds	r2, r3, #1
 80131aa:	6022      	str	r2, [r4, #0]
 80131ac:	701f      	strb	r7, [r3, #0]
 80131ae:	6963      	ldr	r3, [r4, #20]
 80131b0:	4283      	cmp	r3, r0
 80131b2:	d004      	beq.n	80131be <__swbuf_r+0x6e>
 80131b4:	89a3      	ldrh	r3, [r4, #12]
 80131b6:	07db      	lsls	r3, r3, #31
 80131b8:	d507      	bpl.n	80131ca <__swbuf_r+0x7a>
 80131ba:	2d0a      	cmp	r5, #10
 80131bc:	d105      	bne.n	80131ca <__swbuf_r+0x7a>
 80131be:	0021      	movs	r1, r4
 80131c0:	0030      	movs	r0, r6
 80131c2:	f7fd fa9d 	bl	8010700 <_fflush_r>
 80131c6:	2800      	cmp	r0, #0
 80131c8:	d107      	bne.n	80131da <__swbuf_r+0x8a>
 80131ca:	0028      	movs	r0, r5
 80131cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131ce:	0021      	movs	r1, r4
 80131d0:	0030      	movs	r0, r6
 80131d2:	f7ff fe53 	bl	8012e7c <__swsetup_r>
 80131d6:	2800      	cmp	r0, #0
 80131d8:	d0cd      	beq.n	8013176 <__swbuf_r+0x26>
 80131da:	2501      	movs	r5, #1
 80131dc:	426d      	negs	r5, r5
 80131de:	e7f4      	b.n	80131ca <__swbuf_r+0x7a>
 80131e0:	4313      	orrs	r3, r2
 80131e2:	81a3      	strh	r3, [r4, #12]
 80131e4:	4a02      	ldr	r2, [pc, #8]	; (80131f0 <__swbuf_r+0xa0>)
 80131e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80131e8:	4013      	ands	r3, r2
 80131ea:	6663      	str	r3, [r4, #100]	; 0x64
 80131ec:	e7cb      	b.n	8013186 <__swbuf_r+0x36>
 80131ee:	46c0      	nop			; (mov r8, r8)
 80131f0:	ffffdfff 	.word	0xffffdfff

080131f4 <_raise_r>:
 80131f4:	b570      	push	{r4, r5, r6, lr}
 80131f6:	0004      	movs	r4, r0
 80131f8:	000d      	movs	r5, r1
 80131fa:	291f      	cmp	r1, #31
 80131fc:	d904      	bls.n	8013208 <_raise_r+0x14>
 80131fe:	2316      	movs	r3, #22
 8013200:	6003      	str	r3, [r0, #0]
 8013202:	2001      	movs	r0, #1
 8013204:	4240      	negs	r0, r0
 8013206:	bd70      	pop	{r4, r5, r6, pc}
 8013208:	0003      	movs	r3, r0
 801320a:	33fc      	adds	r3, #252	; 0xfc
 801320c:	69db      	ldr	r3, [r3, #28]
 801320e:	2b00      	cmp	r3, #0
 8013210:	d004      	beq.n	801321c <_raise_r+0x28>
 8013212:	008a      	lsls	r2, r1, #2
 8013214:	189b      	adds	r3, r3, r2
 8013216:	681a      	ldr	r2, [r3, #0]
 8013218:	2a00      	cmp	r2, #0
 801321a:	d108      	bne.n	801322e <_raise_r+0x3a>
 801321c:	0020      	movs	r0, r4
 801321e:	f000 f855 	bl	80132cc <_getpid_r>
 8013222:	002a      	movs	r2, r5
 8013224:	0001      	movs	r1, r0
 8013226:	0020      	movs	r0, r4
 8013228:	f000 f83e 	bl	80132a8 <_kill_r>
 801322c:	e7eb      	b.n	8013206 <_raise_r+0x12>
 801322e:	2000      	movs	r0, #0
 8013230:	2a01      	cmp	r2, #1
 8013232:	d0e8      	beq.n	8013206 <_raise_r+0x12>
 8013234:	1c51      	adds	r1, r2, #1
 8013236:	d103      	bne.n	8013240 <_raise_r+0x4c>
 8013238:	2316      	movs	r3, #22
 801323a:	3001      	adds	r0, #1
 801323c:	6023      	str	r3, [r4, #0]
 801323e:	e7e2      	b.n	8013206 <_raise_r+0x12>
 8013240:	2400      	movs	r4, #0
 8013242:	0028      	movs	r0, r5
 8013244:	601c      	str	r4, [r3, #0]
 8013246:	4790      	blx	r2
 8013248:	0020      	movs	r0, r4
 801324a:	e7dc      	b.n	8013206 <_raise_r+0x12>

0801324c <raise>:
 801324c:	b510      	push	{r4, lr}
 801324e:	4b03      	ldr	r3, [pc, #12]	; (801325c <raise+0x10>)
 8013250:	0001      	movs	r1, r0
 8013252:	6818      	ldr	r0, [r3, #0]
 8013254:	f7ff ffce 	bl	80131f4 <_raise_r>
 8013258:	bd10      	pop	{r4, pc}
 801325a:	46c0      	nop			; (mov r8, r8)
 801325c:	200006d8 	.word	0x200006d8

08013260 <_fstat_r>:
 8013260:	2300      	movs	r3, #0
 8013262:	b570      	push	{r4, r5, r6, lr}
 8013264:	4d06      	ldr	r5, [pc, #24]	; (8013280 <_fstat_r+0x20>)
 8013266:	0004      	movs	r4, r0
 8013268:	0008      	movs	r0, r1
 801326a:	0011      	movs	r1, r2
 801326c:	602b      	str	r3, [r5, #0]
 801326e:	f7f0 fb94 	bl	800399a <_fstat>
 8013272:	1c43      	adds	r3, r0, #1
 8013274:	d103      	bne.n	801327e <_fstat_r+0x1e>
 8013276:	682b      	ldr	r3, [r5, #0]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d000      	beq.n	801327e <_fstat_r+0x1e>
 801327c:	6023      	str	r3, [r4, #0]
 801327e:	bd70      	pop	{r4, r5, r6, pc}
 8013280:	20000d30 	.word	0x20000d30

08013284 <_isatty_r>:
 8013284:	2300      	movs	r3, #0
 8013286:	b570      	push	{r4, r5, r6, lr}
 8013288:	4d06      	ldr	r5, [pc, #24]	; (80132a4 <_isatty_r+0x20>)
 801328a:	0004      	movs	r4, r0
 801328c:	0008      	movs	r0, r1
 801328e:	602b      	str	r3, [r5, #0]
 8013290:	f7f0 fb91 	bl	80039b6 <_isatty>
 8013294:	1c43      	adds	r3, r0, #1
 8013296:	d103      	bne.n	80132a0 <_isatty_r+0x1c>
 8013298:	682b      	ldr	r3, [r5, #0]
 801329a:	2b00      	cmp	r3, #0
 801329c:	d000      	beq.n	80132a0 <_isatty_r+0x1c>
 801329e:	6023      	str	r3, [r4, #0]
 80132a0:	bd70      	pop	{r4, r5, r6, pc}
 80132a2:	46c0      	nop			; (mov r8, r8)
 80132a4:	20000d30 	.word	0x20000d30

080132a8 <_kill_r>:
 80132a8:	2300      	movs	r3, #0
 80132aa:	b570      	push	{r4, r5, r6, lr}
 80132ac:	4d06      	ldr	r5, [pc, #24]	; (80132c8 <_kill_r+0x20>)
 80132ae:	0004      	movs	r4, r0
 80132b0:	0008      	movs	r0, r1
 80132b2:	0011      	movs	r1, r2
 80132b4:	602b      	str	r3, [r5, #0]
 80132b6:	f7f0 fb11 	bl	80038dc <_kill>
 80132ba:	1c43      	adds	r3, r0, #1
 80132bc:	d103      	bne.n	80132c6 <_kill_r+0x1e>
 80132be:	682b      	ldr	r3, [r5, #0]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d000      	beq.n	80132c6 <_kill_r+0x1e>
 80132c4:	6023      	str	r3, [r4, #0]
 80132c6:	bd70      	pop	{r4, r5, r6, pc}
 80132c8:	20000d30 	.word	0x20000d30

080132cc <_getpid_r>:
 80132cc:	b510      	push	{r4, lr}
 80132ce:	f7f0 faff 	bl	80038d0 <_getpid>
 80132d2:	bd10      	pop	{r4, pc}

080132d4 <round>:
 80132d4:	b570      	push	{r4, r5, r6, lr}
 80132d6:	004a      	lsls	r2, r1, #1
 80132d8:	000d      	movs	r5, r1
 80132da:	4920      	ldr	r1, [pc, #128]	; (801335c <round+0x88>)
 80132dc:	0d52      	lsrs	r2, r2, #21
 80132de:	1851      	adds	r1, r2, r1
 80132e0:	0006      	movs	r6, r0
 80132e2:	2913      	cmp	r1, #19
 80132e4:	dc18      	bgt.n	8013318 <round+0x44>
 80132e6:	2900      	cmp	r1, #0
 80132e8:	da09      	bge.n	80132fe <round+0x2a>
 80132ea:	0feb      	lsrs	r3, r5, #31
 80132ec:	2200      	movs	r2, #0
 80132ee:	07db      	lsls	r3, r3, #31
 80132f0:	3101      	adds	r1, #1
 80132f2:	d101      	bne.n	80132f8 <round+0x24>
 80132f4:	491a      	ldr	r1, [pc, #104]	; (8013360 <round+0x8c>)
 80132f6:	430b      	orrs	r3, r1
 80132f8:	0019      	movs	r1, r3
 80132fa:	0010      	movs	r0, r2
 80132fc:	e017      	b.n	801332e <round+0x5a>
 80132fe:	4c19      	ldr	r4, [pc, #100]	; (8013364 <round+0x90>)
 8013300:	410c      	asrs	r4, r1
 8013302:	0022      	movs	r2, r4
 8013304:	402a      	ands	r2, r5
 8013306:	4302      	orrs	r2, r0
 8013308:	d013      	beq.n	8013332 <round+0x5e>
 801330a:	2280      	movs	r2, #128	; 0x80
 801330c:	0312      	lsls	r2, r2, #12
 801330e:	410a      	asrs	r2, r1
 8013310:	1953      	adds	r3, r2, r5
 8013312:	43a3      	bics	r3, r4
 8013314:	2200      	movs	r2, #0
 8013316:	e7ef      	b.n	80132f8 <round+0x24>
 8013318:	2933      	cmp	r1, #51	; 0x33
 801331a:	dd0d      	ble.n	8013338 <round+0x64>
 801331c:	2380      	movs	r3, #128	; 0x80
 801331e:	00db      	lsls	r3, r3, #3
 8013320:	4299      	cmp	r1, r3
 8013322:	d106      	bne.n	8013332 <round+0x5e>
 8013324:	0002      	movs	r2, r0
 8013326:	002b      	movs	r3, r5
 8013328:	0029      	movs	r1, r5
 801332a:	f7ed fa45 	bl	80007b8 <__aeabi_dadd>
 801332e:	0006      	movs	r6, r0
 8013330:	000d      	movs	r5, r1
 8013332:	0030      	movs	r0, r6
 8013334:	0029      	movs	r1, r5
 8013336:	bd70      	pop	{r4, r5, r6, pc}
 8013338:	4c0b      	ldr	r4, [pc, #44]	; (8013368 <round+0x94>)
 801333a:	1912      	adds	r2, r2, r4
 801333c:	2401      	movs	r4, #1
 801333e:	4264      	negs	r4, r4
 8013340:	40d4      	lsrs	r4, r2
 8013342:	4220      	tst	r0, r4
 8013344:	d0f5      	beq.n	8013332 <round+0x5e>
 8013346:	2233      	movs	r2, #51	; 0x33
 8013348:	1a51      	subs	r1, r2, r1
 801334a:	3a32      	subs	r2, #50	; 0x32
 801334c:	408a      	lsls	r2, r1
 801334e:	1812      	adds	r2, r2, r0
 8013350:	4282      	cmp	r2, r0
 8013352:	4180      	sbcs	r0, r0
 8013354:	4240      	negs	r0, r0
 8013356:	182b      	adds	r3, r5, r0
 8013358:	43a2      	bics	r2, r4
 801335a:	e7cd      	b.n	80132f8 <round+0x24>
 801335c:	fffffc01 	.word	0xfffffc01
 8013360:	3ff00000 	.word	0x3ff00000
 8013364:	000fffff 	.word	0x000fffff
 8013368:	fffffbed 	.word	0xfffffbed

0801336c <_init>:
 801336c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801336e:	46c0      	nop			; (mov r8, r8)
 8013370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013372:	bc08      	pop	{r3}
 8013374:	469e      	mov	lr, r3
 8013376:	4770      	bx	lr

08013378 <_fini>:
 8013378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801337a:	46c0      	nop			; (mov r8, r8)
 801337c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801337e:	bc08      	pop	{r3}
 8013380:	469e      	mov	lr, r3
 8013382:	4770      	bx	lr
