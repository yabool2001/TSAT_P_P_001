
TSAT_P_P_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011610  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e2c  080116d0  080116d0  000216d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080134fc  080134fc  000306e0  2**0
                  CONTENTS
  4 .ARM          00000008  080134fc  080134fc  000234fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013504  08013504  000306e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08013504  08013504  00023504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801350c  0801350c  0002350c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006e0  20000000  08013510  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000744  200006e0  08013bf0  000306e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e24  08013bf0  00030e24  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000306e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030708  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a214  00000000  00000000  0003074b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a8f  00000000  00000000  0004a95f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001738  00000000  00000000  0004e3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001253  00000000  00000000  0004fb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d886  00000000  00000000  00050d7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dd81  00000000  00000000  0006e601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b0029  00000000  00000000  0008c382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006f44  00000000  00000000  0013c3ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001432f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006e0 	.word	0x200006e0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080116b4 	.word	0x080116b4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006e4 	.word	0x200006e4
 8000100:	080116b4 	.word	0x080116b4

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b3 	bl	80015a4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f803 	bl	8001454 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a5 	bl	80015a4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f89b 	bl	80015a4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f82b 	bl	80014d8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f821 	bl	80014d8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f8a4 	bl	8000620 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_d2uiz>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	2200      	movs	r2, #0
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__aeabi_d2uiz+0x38>)
 8000546:	0004      	movs	r4, r0
 8000548:	000d      	movs	r5, r1
 800054a:	f7ff ffa1 	bl	8000490 <__aeabi_dcmpge>
 800054e:	2800      	cmp	r0, #0
 8000550:	d104      	bne.n	800055c <__aeabi_d2uiz+0x1c>
 8000552:	0020      	movs	r0, r4
 8000554:	0029      	movs	r1, r5
 8000556:	f001 feeb 	bl	8002330 <__aeabi_d2iz>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__aeabi_d2uiz+0x38>)
 800055e:	2200      	movs	r2, #0
 8000560:	0020      	movs	r0, r4
 8000562:	0029      	movs	r1, r5
 8000564:	f001 fb44 	bl	8001bf0 <__aeabi_dsub>
 8000568:	f001 fee2 	bl	8002330 <__aeabi_d2iz>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	061b      	lsls	r3, r3, #24
 8000570:	469c      	mov	ip, r3
 8000572:	4460      	add	r0, ip
 8000574:	e7f1      	b.n	800055a <__aeabi_d2uiz+0x1a>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	41e00000 	.word	0x41e00000

0800057c <__aeabi_d2lz>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	0005      	movs	r5, r0
 8000580:	000c      	movs	r4, r1
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0028      	movs	r0, r5
 8000588:	0021      	movs	r1, r4
 800058a:	f7ff ff63 	bl	8000454 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x28>
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e1      	adds	r1, r4, r3
 80005aa:	0028      	movs	r0, r5
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x22>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 f853 	bl	800166c <__aeabi_dmul>
 80005c6:	f7ff ffbb 	bl	8000540 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f001 ff16 	bl	80023fc <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 f84a 	bl	800166c <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dsub>
 80005e4:	f7ff ffac 	bl	8000540 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f001 fecf 	bl	800239c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 f833 	bl	800166c <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f001 fef6 	bl	80023fc <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 f8d0 	bl	80007b8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f001 ffa6 	bl	8002590 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f001 ffa1 	bl	8002590 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_dadd>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0004      	movs	r4, r0
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	001f      	movs	r7, r3
 80007c6:	030b      	lsls	r3, r1, #12
 80007c8:	0010      	movs	r0, r2
 80007ca:	004e      	lsls	r6, r1, #1
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0fcd      	lsrs	r5, r1, #31
 80007d0:	0f61      	lsrs	r1, r4, #29
 80007d2:	007a      	lsls	r2, r7, #1
 80007d4:	4319      	orrs	r1, r3
 80007d6:	00e3      	lsls	r3, r4, #3
 80007d8:	033c      	lsls	r4, r7, #12
 80007da:	0fff      	lsrs	r7, r7, #31
 80007dc:	46bc      	mov	ip, r7
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0f47      	lsrs	r7, r0, #29
 80007e2:	4327      	orrs	r7, r4
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	0d52      	lsrs	r2, r2, #21
 80007e8:	00c0      	lsls	r0, r0, #3
 80007ea:	46b9      	mov	r9, r7
 80007ec:	4680      	mov	r8, r0
 80007ee:	1ab7      	subs	r7, r6, r2
 80007f0:	4565      	cmp	r5, ip
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x3e>
 80007f4:	e09b      	b.n	800092e <__aeabi_dadd+0x176>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x44>
 80007fa:	e084      	b.n	8000906 <__aeabi_dadd+0x14e>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x4a>
 8000800:	e0be      	b.n	8000980 <__aeabi_dadd+0x1c8>
 8000802:	4ac8      	ldr	r2, [pc, #800]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000804:	4296      	cmp	r6, r2
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x52>
 8000808:	e124      	b.n	8000a54 <__aeabi_dadd+0x29c>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	464c      	mov	r4, r9
 800080e:	0412      	lsls	r2, r2, #16
 8000810:	4314      	orrs	r4, r2
 8000812:	46a1      	mov	r9, r4
 8000814:	2f38      	cmp	r7, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x62>
 8000818:	e167      	b.n	8000aea <__aeabi_dadd+0x332>
 800081a:	2f1f      	cmp	r7, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x68>
 800081e:	e1d6      	b.n	8000bce <__aeabi_dadd+0x416>
 8000820:	2220      	movs	r2, #32
 8000822:	464c      	mov	r4, r9
 8000824:	1bd2      	subs	r2, r2, r7
 8000826:	4094      	lsls	r4, r2
 8000828:	46a2      	mov	sl, r4
 800082a:	4644      	mov	r4, r8
 800082c:	40fc      	lsrs	r4, r7
 800082e:	0020      	movs	r0, r4
 8000830:	4654      	mov	r4, sl
 8000832:	4304      	orrs	r4, r0
 8000834:	4640      	mov	r0, r8
 8000836:	4090      	lsls	r0, r2
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	464a      	mov	r2, r9
 800083e:	40fa      	lsrs	r2, r7
 8000840:	4304      	orrs	r4, r0
 8000842:	1a89      	subs	r1, r1, r2
 8000844:	1b1c      	subs	r4, r3, r4
 8000846:	42a3      	cmp	r3, r4
 8000848:	4192      	sbcs	r2, r2
 800084a:	4252      	negs	r2, r2
 800084c:	1a8b      	subs	r3, r1, r2
 800084e:	469a      	mov	sl, r3
 8000850:	4653      	mov	r3, sl
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dadd+0xa0>
 8000856:	e0d4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000858:	4653      	mov	r3, sl
 800085a:	025a      	lsls	r2, r3, #9
 800085c:	0a53      	lsrs	r3, r2, #9
 800085e:	469a      	mov	sl, r3
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0xb0>
 8000866:	e104      	b.n	8000a72 <__aeabi_dadd+0x2ba>
 8000868:	4650      	mov	r0, sl
 800086a:	f001 fe73 	bl	8002554 <__clzsi2>
 800086e:	0003      	movs	r3, r0
 8000870:	3b08      	subs	r3, #8
 8000872:	2220      	movs	r2, #32
 8000874:	0020      	movs	r0, r4
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	4651      	mov	r1, sl
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4099      	lsls	r1, r3
 800087e:	0002      	movs	r2, r0
 8000880:	409c      	lsls	r4, r3
 8000882:	430a      	orrs	r2, r1
 8000884:	42b3      	cmp	r3, r6
 8000886:	da00      	bge.n	800088a <__aeabi_dadd+0xd2>
 8000888:	e102      	b.n	8000a90 <__aeabi_dadd+0x2d8>
 800088a:	1b9b      	subs	r3, r3, r6
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	291f      	cmp	r1, #31
 8000890:	dd00      	ble.n	8000894 <__aeabi_dadd+0xdc>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_dadd+0x22c>
 8000894:	2320      	movs	r3, #32
 8000896:	0010      	movs	r0, r2
 8000898:	0026      	movs	r6, r4
 800089a:	1a5b      	subs	r3, r3, r1
 800089c:	409c      	lsls	r4, r3
 800089e:	4098      	lsls	r0, r3
 80008a0:	40ce      	lsrs	r6, r1
 80008a2:	40ca      	lsrs	r2, r1
 80008a4:	1e63      	subs	r3, r4, #1
 80008a6:	419c      	sbcs	r4, r3
 80008a8:	4330      	orrs	r0, r6
 80008aa:	4692      	mov	sl, r2
 80008ac:	2600      	movs	r6, #0
 80008ae:	4304      	orrs	r4, r0
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d009      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008bc:	1d23      	adds	r3, r4, #4
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41a4      	sbcs	r4, r4
 80008c2:	4264      	negs	r4, r4
 80008c4:	44a2      	add	sl, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	4653      	mov	r3, sl
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_dadd+0x118>
 80008ce:	e09b      	b.n	8000a08 <__aeabi_dadd+0x250>
 80008d0:	4b94      	ldr	r3, [pc, #592]	; (8000b24 <__aeabi_dadd+0x36c>)
 80008d2:	3601      	adds	r6, #1
 80008d4:	429e      	cmp	r6, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x122>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x294>
 80008da:	4653      	mov	r3, sl
 80008dc:	4992      	ldr	r1, [pc, #584]	; (8000b28 <__aeabi_dadd+0x370>)
 80008de:	08e4      	lsrs	r4, r4, #3
 80008e0:	400b      	ands	r3, r1
 80008e2:	0019      	movs	r1, r3
 80008e4:	075b      	lsls	r3, r3, #29
 80008e6:	4323      	orrs	r3, r4
 80008e8:	0572      	lsls	r2, r6, #21
 80008ea:	024c      	lsls	r4, r1, #9
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	0512      	lsls	r2, r2, #20
 80008f2:	07ed      	lsls	r5, r5, #31
 80008f4:	4322      	orrs	r2, r4
 80008f6:	432a      	orrs	r2, r5
 80008f8:	0018      	movs	r0, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	bce0      	pop	{r5, r6, r7}
 80008fe:	46ba      	mov	sl, r7
 8000900:	46b1      	mov	r9, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000906:	2f00      	cmp	r7, #0
 8000908:	d048      	beq.n	800099c <__aeabi_dadd+0x1e4>
 800090a:	1b97      	subs	r7, r2, r6
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x15a>
 8000910:	e10e      	b.n	8000b30 <__aeabi_dadd+0x378>
 8000912:	000c      	movs	r4, r1
 8000914:	431c      	orrs	r4, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x162>
 8000918:	e1b7      	b.n	8000c8a <__aeabi_dadd+0x4d2>
 800091a:	1e7c      	subs	r4, r7, #1
 800091c:	2f01      	cmp	r7, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x16a>
 8000920:	e226      	b.n	8000d70 <__aeabi_dadd+0x5b8>
 8000922:	4d80      	ldr	r5, [pc, #512]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000924:	42af      	cmp	r7, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x172>
 8000928:	e1d5      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 800092a:	0027      	movs	r7, r4
 800092c:	e107      	b.n	8000b3e <__aeabi_dadd+0x386>
 800092e:	2f00      	cmp	r7, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x17c>
 8000932:	e0b2      	b.n	8000a9a <__aeabi_dadd+0x2e2>
 8000934:	2a00      	cmp	r2, #0
 8000936:	d047      	beq.n	80009c8 <__aeabi_dadd+0x210>
 8000938:	4a7a      	ldr	r2, [pc, #488]	; (8000b24 <__aeabi_dadd+0x36c>)
 800093a:	4296      	cmp	r6, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x188>
 800093e:	e089      	b.n	8000a54 <__aeabi_dadd+0x29c>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	464c      	mov	r4, r9
 8000944:	0412      	lsls	r2, r2, #16
 8000946:	4314      	orrs	r4, r2
 8000948:	46a1      	mov	r9, r4
 800094a:	2f38      	cmp	r7, #56	; 0x38
 800094c:	dc6b      	bgt.n	8000a26 <__aeabi_dadd+0x26e>
 800094e:	2f1f      	cmp	r7, #31
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x19c>
 8000952:	e16e      	b.n	8000c32 <__aeabi_dadd+0x47a>
 8000954:	003a      	movs	r2, r7
 8000956:	4648      	mov	r0, r9
 8000958:	3a20      	subs	r2, #32
 800095a:	40d0      	lsrs	r0, r2
 800095c:	4684      	mov	ip, r0
 800095e:	2f20      	cmp	r7, #32
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x1ba>
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	4648      	mov	r0, r9
 8000966:	1bd2      	subs	r2, r2, r7
 8000968:	4090      	lsls	r0, r2
 800096a:	0002      	movs	r2, r0
 800096c:	4640      	mov	r0, r8
 800096e:	4310      	orrs	r0, r2
 8000970:	4680      	mov	r8, r0
 8000972:	4640      	mov	r0, r8
 8000974:	1e42      	subs	r2, r0, #1
 8000976:	4190      	sbcs	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	0004      	movs	r4, r0
 800097c:	4314      	orrs	r4, r2
 800097e:	e057      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000980:	464a      	mov	r2, r9
 8000982:	4302      	orrs	r2, r0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x1d0>
 8000986:	e103      	b.n	8000b90 <__aeabi_dadd+0x3d8>
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	2f01      	cmp	r7, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x1d8>
 800098e:	e193      	b.n	8000cb8 <__aeabi_dadd+0x500>
 8000990:	4c64      	ldr	r4, [pc, #400]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000992:	42a7      	cmp	r7, r4
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x1e0>
 8000996:	e18a      	b.n	8000cae <__aeabi_dadd+0x4f6>
 8000998:	0017      	movs	r7, r2
 800099a:	e73b      	b.n	8000814 <__aeabi_dadd+0x5c>
 800099c:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <__aeabi_dadd+0x374>)
 800099e:	1c72      	adds	r2, r6, #1
 80009a0:	4222      	tst	r2, r4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x1ee>
 80009a4:	e0e0      	b.n	8000b68 <__aeabi_dadd+0x3b0>
 80009a6:	000a      	movs	r2, r1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x1f8>
 80009ae:	e174      	b.n	8000c9a <__aeabi_dadd+0x4e2>
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x1fe>
 80009b4:	e1d0      	b.n	8000d58 <__aeabi_dadd+0x5a0>
 80009b6:	464a      	mov	r2, r9
 80009b8:	4302      	orrs	r2, r0
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x206>
 80009bc:	e1e3      	b.n	8000d86 <__aeabi_dadd+0x5ce>
 80009be:	074a      	lsls	r2, r1, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c9      	lsrs	r1, r1, #3
 80009c6:	e029      	b.n	8000a1c <__aeabi_dadd+0x264>
 80009c8:	464a      	mov	r2, r9
 80009ca:	4302      	orrs	r2, r0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x218>
 80009ce:	e17d      	b.n	8000ccc <__aeabi_dadd+0x514>
 80009d0:	1e7a      	subs	r2, r7, #1
 80009d2:	2f01      	cmp	r7, #1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x220>
 80009d6:	e0e0      	b.n	8000b9a <__aeabi_dadd+0x3e2>
 80009d8:	4c52      	ldr	r4, [pc, #328]	; (8000b24 <__aeabi_dadd+0x36c>)
 80009da:	42a7      	cmp	r7, r4
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x228>
 80009de:	e166      	b.n	8000cae <__aeabi_dadd+0x4f6>
 80009e0:	0017      	movs	r7, r2
 80009e2:	e7b2      	b.n	800094a <__aeabi_dadd+0x192>
 80009e4:	0010      	movs	r0, r2
 80009e6:	3b1f      	subs	r3, #31
 80009e8:	40d8      	lsrs	r0, r3
 80009ea:	2920      	cmp	r1, #32
 80009ec:	d003      	beq.n	80009f6 <__aeabi_dadd+0x23e>
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	409a      	lsls	r2, r3
 80009f4:	4314      	orrs	r4, r2
 80009f6:	1e63      	subs	r3, r4, #1
 80009f8:	419c      	sbcs	r4, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	2600      	movs	r6, #0
 80009fe:	469a      	mov	sl, r3
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0763      	lsls	r3, r4, #29
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x250>
 8000a06:	e755      	b.n	80008b4 <__aeabi_dadd+0xfc>
 8000a08:	4652      	mov	r2, sl
 8000a0a:	08e3      	lsrs	r3, r4, #3
 8000a0c:	0752      	lsls	r2, r2, #29
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4652      	mov	r2, sl
 8000a12:	0037      	movs	r7, r6
 8000a14:	08d1      	lsrs	r1, r2, #3
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a18:	4297      	cmp	r7, r2
 8000a1a:	d01f      	beq.n	8000a5c <__aeabi_dadd+0x2a4>
 8000a1c:	0309      	lsls	r1, r1, #12
 8000a1e:	057a      	lsls	r2, r7, #21
 8000a20:	0b0c      	lsrs	r4, r1, #12
 8000a22:	0d52      	lsrs	r2, r2, #21
 8000a24:	e764      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a26:	4642      	mov	r2, r8
 8000a28:	464c      	mov	r4, r9
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	18e4      	adds	r4, r4, r3
 8000a32:	429c      	cmp	r4, r3
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	448a      	add	sl, r1
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	d5df      	bpl.n	8000a02 <__aeabi_dadd+0x24a>
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a44:	3601      	adds	r6, #1
 8000a46:	429e      	cmp	r6, r3
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x294>
 8000a4a:	e0b3      	b.n	8000bb4 <__aeabi_dadd+0x3fc>
 8000a4c:	0032      	movs	r2, r6
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2300      	movs	r3, #0
 8000a52:	e74d      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x2ac>
 8000a62:	e200      	b.n	8000e66 <__aeabi_dadd+0x6ae>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	430c      	orrs	r4, r1
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a6e:	0b24      	lsrs	r4, r4, #12
 8000a70:	e73e      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a72:	0020      	movs	r0, r4
 8000a74:	f001 fd6e 	bl	8002554 <__clzsi2>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	dc00      	bgt.n	8000a82 <__aeabi_dadd+0x2ca>
 8000a80:	e6f7      	b.n	8000872 <__aeabi_dadd+0xba>
 8000a82:	0022      	movs	r2, r4
 8000a84:	3808      	subs	r0, #8
 8000a86:	4082      	lsls	r2, r0
 8000a88:	2400      	movs	r4, #0
 8000a8a:	42b3      	cmp	r3, r6
 8000a8c:	db00      	blt.n	8000a90 <__aeabi_dadd+0x2d8>
 8000a8e:	e6fc      	b.n	800088a <__aeabi_dadd+0xd2>
 8000a90:	1af6      	subs	r6, r6, r3
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <__aeabi_dadd+0x370>)
 8000a94:	401a      	ands	r2, r3
 8000a96:	4692      	mov	sl, r2
 8000a98:	e70a      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d02b      	beq.n	8000af6 <__aeabi_dadd+0x33e>
 8000a9e:	1b97      	subs	r7, r2, r6
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x2ee>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_dadd+0x460>
 8000aa6:	4c1f      	ldr	r4, [pc, #124]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x2f6>
 8000aac:	e11c      	b.n	8000ce8 <__aeabi_dadd+0x530>
 8000aae:	2480      	movs	r4, #128	; 0x80
 8000ab0:	0424      	lsls	r4, r4, #16
 8000ab2:	4321      	orrs	r1, r4
 8000ab4:	2f38      	cmp	r7, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x302>
 8000ab8:	e11e      	b.n	8000cf8 <__aeabi_dadd+0x540>
 8000aba:	2f1f      	cmp	r7, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x308>
 8000abe:	e19e      	b.n	8000dfe <__aeabi_dadd+0x646>
 8000ac0:	2620      	movs	r6, #32
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	1bf6      	subs	r6, r6, r7
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	40b3      	lsls	r3, r6
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	40f8      	lsrs	r0, r7
 8000ace:	1e5e      	subs	r6, r3, #1
 8000ad0:	41b3      	sbcs	r3, r6
 8000ad2:	40f9      	lsrs	r1, r7
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	4489      	add	r9, r1
 8000ada:	4444      	add	r4, r8
 8000adc:	4544      	cmp	r4, r8
 8000ade:	419b      	sbcs	r3, r3
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	444b      	add	r3, r9
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	0016      	movs	r6, r2
 8000ae8:	e7a8      	b.n	8000a3c <__aeabi_dadd+0x284>
 8000aea:	4642      	mov	r2, r8
 8000aec:	464c      	mov	r4, r9
 8000aee:	4314      	orrs	r4, r2
 8000af0:	1e62      	subs	r2, r4, #1
 8000af2:	4194      	sbcs	r4, r2
 8000af4:	e6a6      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__aeabi_dadd+0x374>)
 8000af8:	1c72      	adds	r2, r6, #1
 8000afa:	4222      	tst	r2, r4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dadd+0x348>
 8000afe:	e0a8      	b.n	8000c52 <__aeabi_dadd+0x49a>
 8000b00:	000a      	movs	r2, r1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x352>
 8000b08:	e10a      	b.n	8000d20 <__aeabi_dadd+0x568>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x358>
 8000b0e:	e15e      	b.n	8000dce <__aeabi_dadd+0x616>
 8000b10:	464a      	mov	r2, r9
 8000b12:	4302      	orrs	r2, r0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x360>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x624>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e77c      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	4ccf      	ldr	r4, [pc, #828]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x380>
 8000b36:	e0ce      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	0424      	lsls	r4, r4, #16
 8000b3c:	4321      	orrs	r1, r4
 8000b3e:	2f38      	cmp	r7, #56	; 0x38
 8000b40:	dc5b      	bgt.n	8000bfa <__aeabi_dadd+0x442>
 8000b42:	2f1f      	cmp	r7, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x390>
 8000b46:	e0dc      	b.n	8000d02 <__aeabi_dadd+0x54a>
 8000b48:	2520      	movs	r5, #32
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	1bed      	subs	r5, r5, r7
 8000b4e:	001e      	movs	r6, r3
 8000b50:	40ab      	lsls	r3, r5
 8000b52:	40ac      	lsls	r4, r5
 8000b54:	40fe      	lsrs	r6, r7
 8000b56:	1e5d      	subs	r5, r3, #1
 8000b58:	41ab      	sbcs	r3, r5
 8000b5a:	4334      	orrs	r4, r6
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	4699      	mov	r9, r3
 8000b66:	e04c      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1a1c      	subs	r4, r3, r0
 8000b6c:	1a88      	subs	r0, r1, r2
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	4252      	negs	r2, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	0002      	movs	r2, r0
 8000b78:	4650      	mov	r0, sl
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	d478      	bmi.n	8000c74 <__aeabi_dadd+0x4bc>
 8000b82:	4653      	mov	r3, sl
 8000b84:	4323      	orrs	r3, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x3d2>
 8000b88:	e66a      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	e745      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e73d      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000b9a:	181c      	adds	r4, r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	419b      	sbcs	r3, r3
 8000ba0:	4449      	add	r1, r9
 8000ba2:	468a      	mov	sl, r1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	449a      	add	sl, r3
 8000ba8:	4653      	mov	r3, sl
 8000baa:	2601      	movs	r6, #1
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_dadd+0x3fa>
 8000bb0:	e727      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000bb2:	2602      	movs	r6, #2
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	4baf      	ldr	r3, [pc, #700]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	4021      	ands	r1, r4
 8000bc0:	0862      	lsrs	r2, r4, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	07dc      	lsls	r4, r3, #31
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	469a      	mov	sl, r3
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	e670      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	464c      	mov	r4, r9
 8000bd2:	3a20      	subs	r2, #32
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	46a4      	mov	ip, r4
 8000bd8:	2f20      	cmp	r7, #32
 8000bda:	d007      	beq.n	8000bec <__aeabi_dadd+0x434>
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	4648      	mov	r0, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4090      	lsls	r0, r2
 8000be4:	0002      	movs	r2, r0
 8000be6:	4640      	mov	r0, r8
 8000be8:	4310      	orrs	r0, r2
 8000bea:	4680      	mov	r8, r0
 8000bec:	4640      	mov	r0, r8
 8000bee:	1e42      	subs	r2, r0, #1
 8000bf0:	4190      	sbcs	r0, r2
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	0004      	movs	r4, r0
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	e624      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000bfa:	4319      	orrs	r1, r3
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	4643      	mov	r3, r8
 8000c04:	1b1c      	subs	r4, r3, r4
 8000c06:	45a0      	cmp	r8, r4
 8000c08:	419b      	sbcs	r3, r3
 8000c0a:	4649      	mov	r1, r9
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	4665      	mov	r5, ip
 8000c14:	0016      	movs	r6, r2
 8000c16:	e61b      	b.n	8000850 <__aeabi_dadd+0x98>
 8000c18:	000c      	movs	r4, r1
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x468>
 8000c1e:	e0c7      	b.n	8000db0 <__aeabi_dadd+0x5f8>
 8000c20:	1e7c      	subs	r4, r7, #1
 8000c22:	2f01      	cmp	r7, #1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x470>
 8000c26:	e0f9      	b.n	8000e1c <__aeabi_dadd+0x664>
 8000c28:	4e91      	ldr	r6, [pc, #580]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c2a:	42b7      	cmp	r7, r6
 8000c2c:	d05c      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000c2e:	0027      	movs	r7, r4
 8000c30:	e740      	b.n	8000ab4 <__aeabi_dadd+0x2fc>
 8000c32:	2220      	movs	r2, #32
 8000c34:	464c      	mov	r4, r9
 8000c36:	4640      	mov	r0, r8
 8000c38:	1bd2      	subs	r2, r2, r7
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	40f8      	lsrs	r0, r7
 8000c3e:	4304      	orrs	r4, r0
 8000c40:	4640      	mov	r0, r8
 8000c42:	4090      	lsls	r0, r2
 8000c44:	1e42      	subs	r2, r0, #1
 8000c46:	4190      	sbcs	r0, r2
 8000c48:	464a      	mov	r2, r9
 8000c4a:	40fa      	lsrs	r2, r7
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	1889      	adds	r1, r1, r2
 8000c50:	e6ee      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000c52:	4c87      	ldr	r4, [pc, #540]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x4a2>
 8000c58:	e6f9      	b.n	8000a4e <__aeabi_dadd+0x296>
 8000c5a:	1818      	adds	r0, r3, r0
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	419b      	sbcs	r3, r3
 8000c60:	4449      	add	r1, r9
 8000c62:	425b      	negs	r3, r3
 8000c64:	18cb      	adds	r3, r1, r3
 8000c66:	07dc      	lsls	r4, r3, #31
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	0016      	movs	r6, r2
 8000c70:	4304      	orrs	r4, r0
 8000c72:	e6c6      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000c74:	4642      	mov	r2, r8
 8000c76:	1ad4      	subs	r4, r2, r3
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	4180      	sbcs	r0, r0
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4240      	negs	r0, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	1a0b      	subs	r3, r1, r0
 8000c84:	469a      	mov	sl, r3
 8000c86:	4665      	mov	r5, ip
 8000c88:	e5ea      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	075b      	lsls	r3, r3, #29
 8000c92:	4665      	mov	r5, ip
 8000c94:	4303      	orrs	r3, r0
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	e6bd      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x4e8>
 8000c9e:	e08e      	b.n	8000dbe <__aeabi_dadd+0x606>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	d117      	bne.n	8000cd6 <__aeabi_dadd+0x51e>
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	2500      	movs	r5, #0
 8000caa:	0309      	lsls	r1, r1, #12
 8000cac:	e6da      	b.n	8000a64 <__aeabi_dadd+0x2ac>
 8000cae:	074a      	lsls	r2, r1, #29
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	e6d1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	464a      	mov	r2, r9
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	1a89      	subs	r1, r1, r2
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	2601      	movs	r6, #1
 8000cca:	e5c1      	b.n	8000850 <__aeabi_dadd+0x98>
 8000ccc:	074a      	lsls	r2, r1, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	e69f      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	08d8      	lsrs	r0, r3, #3
 8000cda:	464b      	mov	r3, r9
 8000cdc:	464a      	mov	r2, r9
 8000cde:	075b      	lsls	r3, r3, #29
 8000ce0:	4665      	mov	r5, ip
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	08d1      	lsrs	r1, r2, #3
 8000ce6:	e6b9      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	08d8      	lsrs	r0, r3, #3
 8000cec:	464b      	mov	r3, r9
 8000cee:	464a      	mov	r2, r9
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	08d1      	lsrs	r1, r2, #3
 8000cf6:	e6b1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cf8:	4319      	orrs	r1, r3
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	e6eb      	b.n	8000ada <__aeabi_dadd+0x322>
 8000d02:	003c      	movs	r4, r7
 8000d04:	000d      	movs	r5, r1
 8000d06:	3c20      	subs	r4, #32
 8000d08:	40e5      	lsrs	r5, r4
 8000d0a:	2f20      	cmp	r7, #32
 8000d0c:	d003      	beq.n	8000d16 <__aeabi_dadd+0x55e>
 8000d0e:	2440      	movs	r4, #64	; 0x40
 8000d10:	1be4      	subs	r4, r4, r7
 8000d12:	40a1      	lsls	r1, r4
 8000d14:	430b      	orrs	r3, r1
 8000d16:	001c      	movs	r4, r3
 8000d18:	1e63      	subs	r3, r4, #1
 8000d1a:	419c      	sbcs	r4, r3
 8000d1c:	432c      	orrs	r4, r5
 8000d1e:	e770      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d0e1      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000d24:	464a      	mov	r2, r9
 8000d26:	4302      	orrs	r2, r0
 8000d28:	d0c1      	beq.n	8000cae <__aeabi_dadd+0x4f6>
 8000d2a:	074a      	lsls	r2, r1, #29
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	08c9      	lsrs	r1, r1, #3
 8000d34:	0312      	lsls	r2, r2, #12
 8000d36:	4211      	tst	r1, r2
 8000d38:	d008      	beq.n	8000d4c <__aeabi_dadd+0x594>
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	08c4      	lsrs	r4, r0, #3
 8000d3e:	4214      	tst	r4, r2
 8000d40:	d104      	bne.n	8000d4c <__aeabi_dadd+0x594>
 8000d42:	4643      	mov	r3, r8
 8000d44:	0021      	movs	r1, r4
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	0f5a      	lsrs	r2, r3, #29
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e681      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dadd+0x5a8>
 8000d5e:	e714      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000d60:	464b      	mov	r3, r9
 8000d62:	464a      	mov	r2, r9
 8000d64:	08c0      	lsrs	r0, r0, #3
 8000d66:	075b      	lsls	r3, r3, #29
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4303      	orrs	r3, r0
 8000d6c:	08d1      	lsrs	r1, r2, #3
 8000d6e:	e655      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000d70:	1ac4      	subs	r4, r0, r3
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	464b      	mov	r3, r9
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a59      	subs	r1, r3, r1
 8000d7c:	1a0b      	subs	r3, r1, r0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4665      	mov	r5, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	e564      	b.n	8000850 <__aeabi_dadd+0x98>
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	464a      	mov	r2, r9
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	1a8a      	subs	r2, r1, r2
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a12      	subs	r2, r2, r0
 8000d94:	4692      	mov	sl, r2
 8000d96:	0212      	lsls	r2, r2, #8
 8000d98:	d549      	bpl.n	8000e2e <__aeabi_dadd+0x676>
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	1ad4      	subs	r4, r2, r3
 8000d9e:	45a0      	cmp	r8, r4
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	464b      	mov	r3, r9
 8000da4:	4240      	negs	r0, r0
 8000da6:	1a59      	subs	r1, r3, r1
 8000da8:	1a0b      	subs	r3, r1, r0
 8000daa:	469a      	mov	sl, r3
 8000dac:	4665      	mov	r5, ip
 8000dae:	e57f      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000db0:	464b      	mov	r3, r9
 8000db2:	464a      	mov	r2, r9
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	4303      	orrs	r3, r0
 8000dba:	08d1      	lsrs	r1, r2, #3
 8000dbc:	e62b      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	d138      	bne.n	8000e38 <__aeabi_dadd+0x680>
 8000dc6:	074a      	lsls	r2, r1, #29
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	e646      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	08c0      	lsrs	r0, r0, #3
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	08d1      	lsrs	r1, r2, #3
 8000dda:	e61f      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000ddc:	181c      	adds	r4, r3, r0
 8000dde:	429c      	cmp	r4, r3
 8000de0:	419b      	sbcs	r3, r3
 8000de2:	4449      	add	r1, r9
 8000de4:	468a      	mov	sl, r1
 8000de6:	425b      	negs	r3, r3
 8000de8:	449a      	add	sl, r3
 8000dea:	4653      	mov	r3, sl
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	d400      	bmi.n	8000df2 <__aeabi_dadd+0x63a>
 8000df0:	e607      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000df2:	4652      	mov	r2, sl
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000df6:	2601      	movs	r6, #1
 8000df8:	401a      	ands	r2, r3
 8000dfa:	4692      	mov	sl, r2
 8000dfc:	e601      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000dfe:	003c      	movs	r4, r7
 8000e00:	000e      	movs	r6, r1
 8000e02:	3c20      	subs	r4, #32
 8000e04:	40e6      	lsrs	r6, r4
 8000e06:	2f20      	cmp	r7, #32
 8000e08:	d003      	beq.n	8000e12 <__aeabi_dadd+0x65a>
 8000e0a:	2440      	movs	r4, #64	; 0x40
 8000e0c:	1be4      	subs	r4, r4, r7
 8000e0e:	40a1      	lsls	r1, r4
 8000e10:	430b      	orrs	r3, r1
 8000e12:	001c      	movs	r4, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4334      	orrs	r4, r6
 8000e1a:	e65e      	b.n	8000ada <__aeabi_dadd+0x322>
 8000e1c:	4443      	add	r3, r8
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	4180      	sbcs	r0, r0
 8000e22:	4449      	add	r1, r9
 8000e24:	468a      	mov	sl, r1
 8000e26:	4240      	negs	r0, r0
 8000e28:	001c      	movs	r4, r3
 8000e2a:	4482      	add	sl, r0
 8000e2c:	e6bc      	b.n	8000ba8 <__aeabi_dadd+0x3f0>
 8000e2e:	4653      	mov	r3, sl
 8000e30:	4323      	orrs	r3, r4
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x67e>
 8000e34:	e6a9      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000e36:	e5e4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000e38:	074a      	lsls	r2, r1, #29
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	4211      	tst	r1, r2
 8000e44:	d009      	beq.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e46:	4648      	mov	r0, r9
 8000e48:	08c4      	lsrs	r4, r0, #3
 8000e4a:	4214      	tst	r4, r2
 8000e4c:	d105      	bne.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	4665      	mov	r5, ip
 8000e52:	0021      	movs	r1, r4
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	0f5a      	lsrs	r2, r3, #29
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	0752      	lsls	r2, r2, #29
 8000e62:	4313      	orrs	r3, r2
 8000e64:	e5fa      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4a01      	ldr	r2, [pc, #4]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	e540      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	ff7fffff 	.word	0xff7fffff

08000e78 <__aeabi_ddiv>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	4657      	mov	r7, sl
 8000e7c:	464e      	mov	r6, r9
 8000e7e:	4645      	mov	r5, r8
 8000e80:	46de      	mov	lr, fp
 8000e82:	b5e0      	push	{r5, r6, r7, lr}
 8000e84:	030c      	lsls	r4, r1, #12
 8000e86:	001f      	movs	r7, r3
 8000e88:	004b      	lsls	r3, r1, #1
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	0005      	movs	r5, r0
 8000e90:	b085      	sub	sp, #20
 8000e92:	0b24      	lsrs	r4, r4, #12
 8000e94:	0d5b      	lsrs	r3, r3, #21
 8000e96:	0fce      	lsrs	r6, r1, #31
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x26>
 8000e9c:	e152      	b.n	8001144 <__aeabi_ddiv+0x2cc>
 8000e9e:	4ad2      	ldr	r2, [pc, #840]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x2e>
 8000ea4:	e16e      	b.n	8001184 <__aeabi_ddiv+0x30c>
 8000ea6:	0f42      	lsrs	r2, r0, #29
 8000ea8:	00e4      	lsls	r4, r4, #3
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4acd      	ldr	r2, [pc, #820]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4693      	mov	fp, r2
 8000eba:	449b      	add	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	033c      	lsls	r4, r7, #12
 8000ec4:	007b      	lsls	r3, r7, #1
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	0d5b      	lsrs	r3, r3, #21
 8000ecc:	0fff      	lsrs	r7, r7, #31
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x5c>
 8000ed2:	e11a      	b.n	800110a <__aeabi_ddiv+0x292>
 8000ed4:	4ac4      	ldr	r2, [pc, #784]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x64>
 8000eda:	e15e      	b.n	800119a <__aeabi_ddiv+0x322>
 8000edc:	0f42      	lsrs	r2, r0, #29
 8000ede:	00e4      	lsls	r4, r4, #3
 8000ee0:	4322      	orrs	r2, r4
 8000ee2:	2480      	movs	r4, #128	; 0x80
 8000ee4:	0424      	lsls	r4, r4, #16
 8000ee6:	4314      	orrs	r4, r2
 8000ee8:	4ac0      	ldr	r2, [pc, #768]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eea:	00c1      	lsls	r1, r0, #3
 8000eec:	4694      	mov	ip, r2
 8000eee:	465a      	mov	r2, fp
 8000ef0:	4463      	add	r3, ip
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	0033      	movs	r3, r6
 8000efa:	407b      	eors	r3, r7
 8000efc:	469a      	mov	sl, r3
 8000efe:	464b      	mov	r3, r9
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d827      	bhi.n	8000f54 <__aeabi_ddiv+0xdc>
 8000f04:	4aba      	ldr	r2, [pc, #744]	; (80011f0 <__aeabi_ddiv+0x378>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	58d3      	ldr	r3, [r2, r3]
 8000f0a:	469f      	mov	pc, r3
 8000f0c:	46b2      	mov	sl, r6
 8000f0e:	9b00      	ldr	r3, [sp, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d016      	beq.n	8000f42 <__aeabi_ddiv+0xca>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xa2>
 8000f18:	e287      	b.n	800142a <__aeabi_ddiv+0x5b2>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_ddiv+0xa8>
 8000f1e:	e0d5      	b.n	80010cc <__aeabi_ddiv+0x254>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	2500      	movs	r5, #0
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	07d2      	lsls	r2, r2, #31
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	0028      	movs	r0, r5
 8000f32:	0019      	movs	r1, r3
 8000f34:	b005      	add	sp, #20
 8000f36:	bcf0      	pop	{r4, r5, r6, r7}
 8000f38:	46bb      	mov	fp, r7
 8000f3a:	46b2      	mov	sl, r6
 8000f3c:	46a9      	mov	r9, r5
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000f48:	e7ed      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8000f4a:	46ba      	mov	sl, r7
 8000f4c:	46a0      	mov	r8, r4
 8000f4e:	000d      	movs	r5, r1
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	e7dc      	b.n	8000f0e <__aeabi_ddiv+0x96>
 8000f54:	4544      	cmp	r4, r8
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0xe2>
 8000f58:	e1c4      	b.n	80012e4 <__aeabi_ddiv+0x46c>
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0xe6>
 8000f5c:	e1bf      	b.n	80012de <__aeabi_ddiv+0x466>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	469c      	mov	ip, r3
 8000f64:	002e      	movs	r6, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2500      	movs	r5, #0
 8000f6a:	44e3      	add	fp, ip
 8000f6c:	0223      	lsls	r3, r4, #8
 8000f6e:	0e0c      	lsrs	r4, r1, #24
 8000f70:	431c      	orrs	r4, r3
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	4699      	mov	r9, r3
 8000f76:	0423      	lsls	r3, r4, #16
 8000f78:	020a      	lsls	r2, r1, #8
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	9701      	str	r7, [sp, #4]
 8000f82:	f7ff f961 	bl	8000248 <__aeabi_uidivmod>
 8000f86:	0002      	movs	r2, r0
 8000f88:	437a      	muls	r2, r7
 8000f8a:	040b      	lsls	r3, r1, #16
 8000f8c:	0c31      	lsrs	r1, r6, #16
 8000f8e:	4680      	mov	r8, r0
 8000f90:	4319      	orrs	r1, r3
 8000f92:	428a      	cmp	r2, r1
 8000f94:	d907      	bls.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	1909      	adds	r1, r1, r4
 8000f9e:	44e0      	add	r8, ip
 8000fa0:	428c      	cmp	r4, r1
 8000fa2:	d800      	bhi.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000fa4:	e201      	b.n	80013aa <__aeabi_ddiv+0x532>
 8000fa6:	1a88      	subs	r0, r1, r2
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f7ff f94d 	bl	8000248 <__aeabi_uidivmod>
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0436      	lsls	r6, r6, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	0c36      	lsrs	r6, r6, #16
 8000fb8:	0003      	movs	r3, r0
 8000fba:	430e      	orrs	r6, r1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	d904      	bls.n	8000fca <__aeabi_ddiv+0x152>
 8000fc0:	1936      	adds	r6, r6, r4
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	42b4      	cmp	r4, r6
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x152>
 8000fc8:	e1e9      	b.n	800139e <__aeabi_ddiv+0x526>
 8000fca:	1ab0      	subs	r0, r6, r2
 8000fcc:	4642      	mov	r2, r8
 8000fce:	9e00      	ldr	r6, [sp, #0]
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	0c33      	lsrs	r3, r6, #16
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	4690      	mov	r8, r2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	0413      	lsls	r3, r2, #16
 8000fe0:	0432      	lsls	r2, r6, #16
 8000fe2:	0c16      	lsrs	r6, r2, #16
 8000fe4:	0032      	movs	r2, r6
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	9603      	str	r6, [sp, #12]
 8000fec:	437b      	muls	r3, r7
 8000fee:	434e      	muls	r6, r1
 8000ff0:	4379      	muls	r1, r7
 8000ff2:	0c17      	lsrs	r7, r2, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	199b      	adds	r3, r3, r6
 8000ff8:	4463      	add	r3, ip
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x18e>
 8000ffe:	2680      	movs	r6, #128	; 0x80
 8001000:	0276      	lsls	r6, r6, #9
 8001002:	46b4      	mov	ip, r6
 8001004:	4461      	add	r1, ip
 8001006:	0c1e      	lsrs	r6, r3, #16
 8001008:	1871      	adds	r1, r6, r1
 800100a:	0416      	lsls	r6, r2, #16
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	199e      	adds	r6, r3, r6
 8001012:	4288      	cmp	r0, r1
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1a4>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1c6>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1c6>
 800101c:	4643      	mov	r3, r8
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c0>
 8001036:	e19e      	b.n	8001376 <__aeabi_ddiv+0x4fe>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1c4>
 800103a:	e199      	b.n	8001370 <__aeabi_ddiv+0x4f8>
 800103c:	4690      	mov	r8, r2
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a40      	subs	r0, r0, r1
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1d8>
 800104e:	e1d2      	b.n	80013f6 <__aeabi_ddiv+0x57e>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8f9 	bl	8000248 <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f0>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4ca>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x20c>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4b4>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x23a>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	4286      	cmp	r6, r0
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x24c>
 80010c2:	e100      	b.n	80012c6 <__aeabi_ddiv+0x44e>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x250>
 80010c6:	e0fb      	b.n	80012c0 <__aeabi_ddiv+0x448>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x37c>)
 80010ce:	445b      	add	r3, fp
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x25e>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3b4>
 80010d6:	076a      	lsls	r2, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x264>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e0>
 80010dc:	08e9      	lsrs	r1, r5, #3
 80010de:	4642      	mov	r2, r8
 80010e0:	01d2      	lsls	r2, r2, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x27a>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x380>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4690      	mov	r8, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	445b      	add	r3, fp
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <__aeabi_ddiv+0x384>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x282>
 80010f8:	e723      	b.n	8000f42 <__aeabi_ddiv+0xca>
 80010fa:	4642      	mov	r2, r8
 80010fc:	055b      	lsls	r3, r3, #21
 80010fe:	0755      	lsls	r5, r2, #29
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	430d      	orrs	r5, r1
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	e70d      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800110a:	4651      	mov	r1, sl
 800110c:	4321      	orrs	r1, r4
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x29a>
 8001110:	e07c      	b.n	800120c <__aeabi_ddiv+0x394>
 8001112:	2c00      	cmp	r4, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x2a0>
 8001116:	e0fb      	b.n	8001310 <__aeabi_ddiv+0x498>
 8001118:	0020      	movs	r0, r4
 800111a:	f001 fa1b 	bl	8002554 <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	3a0b      	subs	r2, #11
 8001122:	231d      	movs	r3, #29
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	4652      	mov	r2, sl
 8001128:	0001      	movs	r1, r0
 800112a:	40da      	lsrs	r2, r3
 800112c:	4653      	mov	r3, sl
 800112e:	3908      	subs	r1, #8
 8001130:	408b      	lsls	r3, r1
 8001132:	408c      	lsls	r4, r1
 8001134:	0019      	movs	r1, r3
 8001136:	4314      	orrs	r4, r2
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x388>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 8001144:	0003      	movs	r3, r0
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x35e>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2da>
 8001150:	e0cf      	b.n	80012f2 <__aeabi_ddiv+0x47a>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 f9fe 	bl	8002554 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <__aeabi_ddiv+0x38c>)
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69e      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 8001184:	0002      	movs	r2, r0
 8001186:	4322      	orrs	r2, r4
 8001188:	4690      	mov	r8, r2
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x350>
 800118c:	2208      	movs	r2, #8
 800118e:	469b      	mov	fp, r3
 8001190:	2302      	movs	r3, #2
 8001192:	2500      	movs	r5, #0
 8001194:	4691      	mov	r9, r2
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e693      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 800119a:	4651      	mov	r1, sl
 800119c:	4321      	orrs	r1, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x33c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	464a      	mov	r2, r9
 80011a4:	431a      	orrs	r2, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x390>)
 80011a8:	4691      	mov	r9, r2
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e6a1      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x390>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4651      	mov	r1, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e697      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011c8:	220c      	movs	r2, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4691      	mov	r9, r2
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e675      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e66d      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	08012fbc 	.word	0x08012fbc
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	464a      	mov	r2, r9
 800120e:	2301      	movs	r3, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	4691      	mov	r9, r2
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66e      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001224:	0312      	lsls	r2, r2, #12
 8001226:	e67e      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2201      	movs	r2, #1
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	2a38      	cmp	r2, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3be>
 8001234:	e674      	b.n	8000f20 <__aeabi_ddiv+0xa8>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3c4>
 800123a:	e0bd      	b.n	80013b8 <__aeabi_ddiv+0x540>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	4641      	mov	r1, r8
 8001244:	40d9      	lsrs	r1, r3
 8001246:	000b      	movs	r3, r1
 8001248:	2a20      	cmp	r2, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3de>
 800124c:	4641      	mov	r1, r8
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <__aeabi_ddiv+0x5d0>)
 8001250:	445a      	add	r2, fp
 8001252:	4091      	lsls	r1, r2
 8001254:	430d      	orrs	r5, r1
 8001256:	0029      	movs	r1, r5
 8001258:	1e4a      	subs	r2, r1, #1
 800125a:	4191      	sbcs	r1, r2
 800125c:	4319      	orrs	r1, r3
 800125e:	2307      	movs	r3, #7
 8001260:	001d      	movs	r5, r3
 8001262:	2200      	movs	r2, #0
 8001264:	400d      	ands	r5, r1
 8001266:	420b      	tst	r3, r1
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x3f4>
 800126a:	e0d0      	b.n	800140e <__aeabi_ddiv+0x596>
 800126c:	220f      	movs	r2, #15
 800126e:	2300      	movs	r3, #0
 8001270:	400a      	ands	r2, r1
 8001272:	2a04      	cmp	r2, #4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x400>
 8001276:	e0c7      	b.n	8001408 <__aeabi_ddiv+0x590>
 8001278:	1d0a      	adds	r2, r1, #4
 800127a:	428a      	cmp	r2, r1
 800127c:	4189      	sbcs	r1, r1
 800127e:	4249      	negs	r1, r1
 8001280:	185b      	adds	r3, r3, r1
 8001282:	0011      	movs	r1, r2
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	d400      	bmi.n	800128a <__aeabi_ddiv+0x412>
 8001288:	e0be      	b.n	8001408 <__aeabi_ddiv+0x590>
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2500      	movs	r5, #0
 8001290:	e649      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4643      	mov	r3, r8
 8001296:	0312      	lsls	r2, r2, #12
 8001298:	4213      	tst	r3, r2
 800129a:	d008      	beq.n	80012ae <__aeabi_ddiv+0x436>
 800129c:	4214      	tst	r4, r2
 800129e:	d106      	bne.n	80012ae <__aeabi_ddiv+0x436>
 80012a0:	4322      	orrs	r2, r4
 80012a2:	0312      	lsls	r2, r2, #12
 80012a4:	46ba      	mov	sl, r7
 80012a6:	000d      	movs	r5, r1
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012aa:	0b12      	lsrs	r2, r2, #12
 80012ac:	e63b      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4643      	mov	r3, r8
 80012b2:	0312      	lsls	r2, r2, #12
 80012b4:	431a      	orrs	r2, r3
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	46b2      	mov	sl, r6
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	e632      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x44e>
 80012c4:	e702      	b.n	80010cc <__aeabi_ddiv+0x254>
 80012c6:	19a6      	adds	r6, r4, r6
 80012c8:	1e6a      	subs	r2, r5, #1
 80012ca:	42a6      	cmp	r6, r4
 80012cc:	d200      	bcs.n	80012d0 <__aeabi_ddiv+0x458>
 80012ce:	e089      	b.n	80013e4 <__aeabi_ddiv+0x56c>
 80012d0:	4286      	cmp	r6, r0
 80012d2:	d200      	bcs.n	80012d6 <__aeabi_ddiv+0x45e>
 80012d4:	e09f      	b.n	8001416 <__aeabi_ddiv+0x59e>
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x462>
 80012d8:	e0af      	b.n	800143a <__aeabi_ddiv+0x5c2>
 80012da:	0015      	movs	r5, r2
 80012dc:	e6f4      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d900      	bls.n	80012e4 <__aeabi_ddiv+0x46c>
 80012e2:	e63c      	b.n	8000f5e <__aeabi_ddiv+0xe6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	07de      	lsls	r6, r3, #31
 80012e8:	0858      	lsrs	r0, r3, #1
 80012ea:	086b      	lsrs	r3, r5, #1
 80012ec:	431e      	orrs	r6, r3
 80012ee:	07ed      	lsls	r5, r5, #31
 80012f0:	e63c      	b.n	8000f6c <__aeabi_ddiv+0xf4>
 80012f2:	f001 f92f 	bl	8002554 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x48c>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2e6>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x2fe>
 8001310:	f001 f920 	bl	8002554 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4aa>
 8001320:	e6ff      	b.n	8001122 <__aeabi_ddiv+0x2aa>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2100      	movs	r1, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c0>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4be>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4c4>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x20c>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4d4>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4da>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001358:	220f      	movs	r2, #15
 800135a:	402a      	ands	r2, r5
 800135c:	2a04      	cmp	r2, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4ea>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x264>
 8001362:	1d29      	adds	r1, r5, #4
 8001364:	42a9      	cmp	r1, r5
 8001366:	41ad      	sbcs	r5, r5
 8001368:	426d      	negs	r5, r5
 800136a:	08c9      	lsrs	r1, r1, #3
 800136c:	44a8      	add	r8, r5
 800136e:	e6b6      	b.n	80010de <__aeabi_ddiv+0x266>
 8001370:	42af      	cmp	r7, r5
 8001372:	d900      	bls.n	8001376 <__aeabi_ddiv+0x4fe>
 8001374:	e662      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001376:	4281      	cmp	r1, r0
 8001378:	d804      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x506>
 800137c:	e65e      	b.n	800103c <__aeabi_ddiv+0x1c4>
 800137e:	42ae      	cmp	r6, r5
 8001380:	d800      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 8001382:	e65b      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001384:	2302      	movs	r3, #2
 8001386:	425b      	negs	r3, r3
 8001388:	469c      	mov	ip, r3
 800138a:	9b00      	ldr	r3, [sp, #0]
 800138c:	44e0      	add	r8, ip
 800138e:	469c      	mov	ip, r3
 8001390:	4465      	add	r5, ip
 8001392:	429d      	cmp	r5, r3
 8001394:	419b      	sbcs	r3, r3
 8001396:	425b      	negs	r3, r3
 8001398:	191b      	adds	r3, r3, r4
 800139a:	18c0      	adds	r0, r0, r3
 800139c:	e64f      	b.n	800103e <__aeabi_ddiv+0x1c6>
 800139e:	42b2      	cmp	r2, r6
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x52c>
 80013a2:	e612      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013a4:	1e83      	subs	r3, r0, #2
 80013a6:	1936      	adds	r6, r6, r4
 80013a8:	e60f      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013aa:	428a      	cmp	r2, r1
 80013ac:	d800      	bhi.n	80013b0 <__aeabi_ddiv+0x538>
 80013ae:	e5fa      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	4698      	mov	r8, r3
 80013b4:	1909      	adds	r1, r1, r4
 80013b6:	e5f6      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <__aeabi_ddiv+0x5d4>)
 80013ba:	0028      	movs	r0, r5
 80013bc:	445b      	add	r3, fp
 80013be:	4641      	mov	r1, r8
 80013c0:	409d      	lsls	r5, r3
 80013c2:	4099      	lsls	r1, r3
 80013c4:	40d0      	lsrs	r0, r2
 80013c6:	1e6b      	subs	r3, r5, #1
 80013c8:	419d      	sbcs	r5, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	4301      	orrs	r1, r0
 80013ce:	4329      	orrs	r1, r5
 80013d0:	40d3      	lsrs	r3, r2
 80013d2:	074a      	lsls	r2, r1, #29
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x560>
 80013d6:	e755      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013d8:	220f      	movs	r2, #15
 80013da:	400a      	ands	r2, r1
 80013dc:	2a04      	cmp	r2, #4
 80013de:	d000      	beq.n	80013e2 <__aeabi_ddiv+0x56a>
 80013e0:	e74a      	b.n	8001278 <__aeabi_ddiv+0x400>
 80013e2:	e74f      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013e4:	0015      	movs	r5, r2
 80013e6:	4286      	cmp	r6, r0
 80013e8:	d000      	beq.n	80013ec <__aeabi_ddiv+0x574>
 80013ea:	e66d      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013ec:	9a00      	ldr	r2, [sp, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d000      	beq.n	80013f4 <__aeabi_ddiv+0x57c>
 80013f2:	e669      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013f4:	e66a      	b.n	80010cc <__aeabi_ddiv+0x254>
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <__aeabi_ddiv+0x5d8>)
 80013f8:	445b      	add	r3, fp
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc00      	bgt.n	8001400 <__aeabi_ddiv+0x588>
 80013fe:	e713      	b.n	8001228 <__aeabi_ddiv+0x3b0>
 8001400:	2501      	movs	r5, #1
 8001402:	2100      	movs	r1, #0
 8001404:	44a8      	add	r8, r5
 8001406:	e66a      	b.n	80010de <__aeabi_ddiv+0x266>
 8001408:	075d      	lsls	r5, r3, #29
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	0b1a      	lsrs	r2, r3, #12
 800140e:	08c9      	lsrs	r1, r1, #3
 8001410:	2300      	movs	r3, #0
 8001412:	430d      	orrs	r5, r1
 8001414:	e587      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	3d02      	subs	r5, #2
 800141a:	004a      	lsls	r2, r1, #1
 800141c:	428a      	cmp	r2, r1
 800141e:	41bf      	sbcs	r7, r7
 8001420:	427f      	negs	r7, r7
 8001422:	193f      	adds	r7, r7, r4
 8001424:	19f6      	adds	r6, r6, r7
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	e7dd      	b.n	80013e6 <__aeabi_ddiv+0x56e>
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4643      	mov	r3, r8
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	431a      	orrs	r2, r3
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001436:	0b12      	lsrs	r2, r2, #12
 8001438:	e575      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	4299      	cmp	r1, r3
 800143e:	d3ea      	bcc.n	8001416 <__aeabi_ddiv+0x59e>
 8001440:	0015      	movs	r5, r2
 8001442:	e7d3      	b.n	80013ec <__aeabi_ddiv+0x574>
 8001444:	000007ff 	.word	0x000007ff
 8001448:	0000043e 	.word	0x0000043e
 800144c:	0000041e 	.word	0x0000041e
 8001450:	000003ff 	.word	0x000003ff

08001454 <__eqdf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	46de      	mov	lr, fp
 800145c:	4657      	mov	r7, sl
 800145e:	4690      	mov	r8, r2
 8001460:	b5e0      	push	{r5, r6, r7, lr}
 8001462:	0017      	movs	r7, r2
 8001464:	031a      	lsls	r2, r3, #12
 8001466:	0b12      	lsrs	r2, r2, #12
 8001468:	0005      	movs	r5, r0
 800146a:	4684      	mov	ip, r0
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <__eqdf2+0x80>)
 800146e:	030e      	lsls	r6, r1, #12
 8001470:	004c      	lsls	r4, r1, #1
 8001472:	4691      	mov	r9, r2
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	0fdb      	lsrs	r3, r3, #31
 8001478:	469b      	mov	fp, r3
 800147a:	0b36      	lsrs	r6, r6, #12
 800147c:	0d64      	lsrs	r4, r4, #21
 800147e:	0fc9      	lsrs	r1, r1, #31
 8001480:	0d52      	lsrs	r2, r2, #21
 8001482:	4284      	cmp	r4, r0
 8001484:	d019      	beq.n	80014ba <__eqdf2+0x66>
 8001486:	4282      	cmp	r2, r0
 8001488:	d010      	beq.n	80014ac <__eqdf2+0x58>
 800148a:	2001      	movs	r0, #1
 800148c:	4294      	cmp	r4, r2
 800148e:	d10e      	bne.n	80014ae <__eqdf2+0x5a>
 8001490:	454e      	cmp	r6, r9
 8001492:	d10c      	bne.n	80014ae <__eqdf2+0x5a>
 8001494:	2001      	movs	r0, #1
 8001496:	45c4      	cmp	ip, r8
 8001498:	d109      	bne.n	80014ae <__eqdf2+0x5a>
 800149a:	4559      	cmp	r1, fp
 800149c:	d017      	beq.n	80014ce <__eqdf2+0x7a>
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d105      	bne.n	80014ae <__eqdf2+0x5a>
 80014a2:	0030      	movs	r0, r6
 80014a4:	4328      	orrs	r0, r5
 80014a6:	1e43      	subs	r3, r0, #1
 80014a8:	4198      	sbcs	r0, r3
 80014aa:	e000      	b.n	80014ae <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	bcf0      	pop	{r4, r5, r6, r7}
 80014b0:	46bb      	mov	fp, r7
 80014b2:	46b2      	mov	sl, r6
 80014b4:	46a9      	mov	r9, r5
 80014b6:	46a0      	mov	r8, r4
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	0033      	movs	r3, r6
 80014bc:	2001      	movs	r0, #1
 80014be:	432b      	orrs	r3, r5
 80014c0:	d1f5      	bne.n	80014ae <__eqdf2+0x5a>
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d1f3      	bne.n	80014ae <__eqdf2+0x5a>
 80014c6:	464b      	mov	r3, r9
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d1f0      	bne.n	80014ae <__eqdf2+0x5a>
 80014cc:	e7e2      	b.n	8001494 <__eqdf2+0x40>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7ed      	b.n	80014ae <__eqdf2+0x5a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	4647      	mov	r7, r8
 80014dc:	46ce      	mov	lr, r9
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	0016      	movs	r6, r2
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	0b1b      	lsrs	r3, r3, #12
 80014e8:	4d2d      	ldr	r5, [pc, #180]	; (80015a0 <__gedf2+0xc8>)
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	b580      	push	{r7, lr}
 80014f0:	0043      	lsls	r3, r0, #1
 80014f2:	030f      	lsls	r7, r1, #12
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d021      	beq.n	800154a <__gedf2+0x72>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d013      	beq.n	8001532 <__gedf2+0x5a>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d122      	bne.n	8001554 <__gedf2+0x7c>
 800150e:	433c      	orrs	r4, r7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <__gedf2+0x42>
 8001514:	464d      	mov	r5, r9
 8001516:	432e      	orrs	r6, r5
 8001518:	d022      	beq.n	8001560 <__gedf2+0x88>
 800151a:	2c00      	cmp	r4, #0
 800151c:	d010      	beq.n	8001540 <__gedf2+0x68>
 800151e:	4281      	cmp	r1, r0
 8001520:	d022      	beq.n	8001568 <__gedf2+0x90>
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bcc0      	pop	{r6, r7}
 800152c:	46b9      	mov	r9, r7
 800152e:	46b0      	mov	r8, r6
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	464d      	mov	r5, r9
 8001534:	432e      	orrs	r6, r5
 8001536:	d129      	bne.n	800158c <__gedf2+0xb4>
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f0      	bne.n	800151e <__gedf2+0x46>
 800153c:	433c      	orrs	r4, r7
 800153e:	d1ee      	bne.n	800151e <__gedf2+0x46>
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f2      	bne.n	800152a <__gedf2+0x52>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7ef      	b.n	800152a <__gedf2+0x52>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d11d      	bne.n	800158c <__gedf2+0xb4>
 8001550:	4293      	cmp	r3, r2
 8001552:	d0ee      	beq.n	8001532 <__gedf2+0x5a>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e2      	bne.n	800151e <__gedf2+0x46>
 8001558:	464c      	mov	r4, r9
 800155a:	4326      	orrs	r6, r4
 800155c:	d1df      	bne.n	800151e <__gedf2+0x46>
 800155e:	e7e0      	b.n	8001522 <__gedf2+0x4a>
 8001560:	2000      	movs	r0, #0
 8001562:	2c00      	cmp	r4, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7dc      	b.n	8001522 <__gedf2+0x4a>
 8001568:	429a      	cmp	r2, r3
 800156a:	dc0a      	bgt.n	8001582 <__gedf2+0xaa>
 800156c:	dbe8      	blt.n	8001540 <__gedf2+0x68>
 800156e:	454f      	cmp	r7, r9
 8001570:	d8d7      	bhi.n	8001522 <__gedf2+0x4a>
 8001572:	d00e      	beq.n	8001592 <__gedf2+0xba>
 8001574:	2000      	movs	r0, #0
 8001576:	454f      	cmp	r7, r9
 8001578:	d2d7      	bcs.n	800152a <__gedf2+0x52>
 800157a:	2900      	cmp	r1, #0
 800157c:	d0e2      	beq.n	8001544 <__gedf2+0x6c>
 800157e:	0008      	movs	r0, r1
 8001580:	e7d3      	b.n	800152a <__gedf2+0x52>
 8001582:	4243      	negs	r3, r0
 8001584:	4158      	adcs	r0, r3
 8001586:	0040      	lsls	r0, r0, #1
 8001588:	3801      	subs	r0, #1
 800158a:	e7ce      	b.n	800152a <__gedf2+0x52>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7cb      	b.n	800152a <__gedf2+0x52>
 8001592:	45c4      	cmp	ip, r8
 8001594:	d8c5      	bhi.n	8001522 <__gedf2+0x4a>
 8001596:	2000      	movs	r0, #0
 8001598:	45c4      	cmp	ip, r8
 800159a:	d2c6      	bcs.n	800152a <__gedf2+0x52>
 800159c:	e7ed      	b.n	800157a <__gedf2+0xa2>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4647      	mov	r7, r8
 80015a8:	46ce      	mov	lr, r9
 80015aa:	0004      	movs	r4, r0
 80015ac:	0018      	movs	r0, r3
 80015ae:	0016      	movs	r6, r2
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	0b1b      	lsrs	r3, r3, #12
 80015b4:	4d2c      	ldr	r5, [pc, #176]	; (8001668 <__ledf2+0xc4>)
 80015b6:	004a      	lsls	r2, r1, #1
 80015b8:	4699      	mov	r9, r3
 80015ba:	b580      	push	{r7, lr}
 80015bc:	0043      	lsls	r3, r0, #1
 80015be:	030f      	lsls	r7, r1, #12
 80015c0:	46a4      	mov	ip, r4
 80015c2:	46b0      	mov	r8, r6
 80015c4:	0b3f      	lsrs	r7, r7, #12
 80015c6:	0d52      	lsrs	r2, r2, #21
 80015c8:	0fc9      	lsrs	r1, r1, #31
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fc0      	lsrs	r0, r0, #31
 80015ce:	42aa      	cmp	r2, r5
 80015d0:	d00d      	beq.n	80015ee <__ledf2+0x4a>
 80015d2:	42ab      	cmp	r3, r5
 80015d4:	d010      	beq.n	80015f8 <__ledf2+0x54>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d127      	bne.n	800162a <__ledf2+0x86>
 80015da:	433c      	orrs	r4, r7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <__ledf2+0x60>
 80015e0:	464d      	mov	r5, r9
 80015e2:	432e      	orrs	r6, r5
 80015e4:	d10e      	bne.n	8001604 <__ledf2+0x60>
 80015e6:	2000      	movs	r0, #0
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d015      	beq.n	8001618 <__ledf2+0x74>
 80015ec:	e00e      	b.n	800160c <__ledf2+0x68>
 80015ee:	003d      	movs	r5, r7
 80015f0:	4325      	orrs	r5, r4
 80015f2:	d110      	bne.n	8001616 <__ledf2+0x72>
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d118      	bne.n	800162a <__ledf2+0x86>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10b      	bne.n	8001616 <__ledf2+0x72>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d102      	bne.n	8001608 <__ledf2+0x64>
 8001602:	433c      	orrs	r4, r7
 8001604:	2c00      	cmp	r4, #0
 8001606:	d00b      	beq.n	8001620 <__ledf2+0x7c>
 8001608:	4281      	cmp	r1, r0
 800160a:	d014      	beq.n	8001636 <__ledf2+0x92>
 800160c:	2002      	movs	r0, #2
 800160e:	3901      	subs	r1, #1
 8001610:	4008      	ands	r0, r1
 8001612:	3801      	subs	r0, #1
 8001614:	e000      	b.n	8001618 <__ledf2+0x74>
 8001616:	2002      	movs	r0, #2
 8001618:	bcc0      	pop	{r6, r7}
 800161a:	46b9      	mov	r9, r7
 800161c:	46b0      	mov	r8, r6
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001620:	2800      	cmp	r0, #0
 8001622:	d1f9      	bne.n	8001618 <__ledf2+0x74>
 8001624:	2001      	movs	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7f6      	b.n	8001618 <__ledf2+0x74>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ec      	bne.n	8001608 <__ledf2+0x64>
 800162e:	464c      	mov	r4, r9
 8001630:	4326      	orrs	r6, r4
 8001632:	d1e9      	bne.n	8001608 <__ledf2+0x64>
 8001634:	e7ea      	b.n	800160c <__ledf2+0x68>
 8001636:	429a      	cmp	r2, r3
 8001638:	dd04      	ble.n	8001644 <__ledf2+0xa0>
 800163a:	4243      	negs	r3, r0
 800163c:	4158      	adcs	r0, r3
 800163e:	0040      	lsls	r0, r0, #1
 8001640:	3801      	subs	r0, #1
 8001642:	e7e9      	b.n	8001618 <__ledf2+0x74>
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <__ledf2+0x7c>
 8001648:	454f      	cmp	r7, r9
 800164a:	d8df      	bhi.n	800160c <__ledf2+0x68>
 800164c:	d006      	beq.n	800165c <__ledf2+0xb8>
 800164e:	2000      	movs	r0, #0
 8001650:	454f      	cmp	r7, r9
 8001652:	d2e1      	bcs.n	8001618 <__ledf2+0x74>
 8001654:	2900      	cmp	r1, #0
 8001656:	d0e5      	beq.n	8001624 <__ledf2+0x80>
 8001658:	0008      	movs	r0, r1
 800165a:	e7dd      	b.n	8001618 <__ledf2+0x74>
 800165c:	45c4      	cmp	ip, r8
 800165e:	d8d5      	bhi.n	800160c <__ledf2+0x68>
 8001660:	2000      	movs	r0, #0
 8001662:	45c4      	cmp	ip, r8
 8001664:	d2d8      	bcs.n	8001618 <__ledf2+0x74>
 8001666:	e7f5      	b.n	8001654 <__ledf2+0xb0>
 8001668:	000007ff 	.word	0x000007ff

0800166c <__aeabi_dmul>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	4657      	mov	r7, sl
 8001674:	464e      	mov	r6, r9
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	001f      	movs	r7, r3
 800167a:	030b      	lsls	r3, r1, #12
 800167c:	0b1b      	lsrs	r3, r3, #12
 800167e:	469b      	mov	fp, r3
 8001680:	004d      	lsls	r5, r1, #1
 8001682:	0fcb      	lsrs	r3, r1, #31
 8001684:	0004      	movs	r4, r0
 8001686:	4691      	mov	r9, r2
 8001688:	4698      	mov	r8, r3
 800168a:	b087      	sub	sp, #28
 800168c:	0d6d      	lsrs	r5, r5, #21
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x26>
 8001690:	e1cd      	b.n	8001a2e <__aeabi_dmul+0x3c2>
 8001692:	4bce      	ldr	r3, [pc, #824]	; (80019cc <__aeabi_dmul+0x360>)
 8001694:	429d      	cmp	r5, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x2e>
 8001698:	e1e9      	b.n	8001a6e <__aeabi_dmul+0x402>
 800169a:	465a      	mov	r2, fp
 800169c:	0f43      	lsrs	r3, r0, #29
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	00c3      	lsls	r3, r0, #3
 80016aa:	469a      	mov	sl, r3
 80016ac:	4bc8      	ldr	r3, [pc, #800]	; (80019d0 <__aeabi_dmul+0x364>)
 80016ae:	4693      	mov	fp, r2
 80016b0:	469c      	mov	ip, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	2600      	movs	r6, #0
 80016b6:	4465      	add	r5, ip
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	033c      	lsls	r4, r7, #12
 80016bc:	007b      	lsls	r3, r7, #1
 80016be:	4648      	mov	r0, r9
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	0fff      	lsrs	r7, r7, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x60>
 80016ca:	e189      	b.n	80019e0 <__aeabi_dmul+0x374>
 80016cc:	4abf      	ldr	r2, [pc, #764]	; (80019cc <__aeabi_dmul+0x360>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <__aeabi_dmul+0x9a>
 80016d2:	0f42      	lsrs	r2, r0, #29
 80016d4:	00e4      	lsls	r4, r4, #3
 80016d6:	4322      	orrs	r2, r4
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0424      	lsls	r4, r4, #16
 80016dc:	4314      	orrs	r4, r2
 80016de:	4abc      	ldr	r2, [pc, #752]	; (80019d0 <__aeabi_dmul+0x364>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4694      	mov	ip, r2
 80016e4:	4642      	mov	r2, r8
 80016e6:	4463      	add	r3, ip
 80016e8:	195b      	adds	r3, r3, r5
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
 80016ee:	407a      	eors	r2, r7
 80016f0:	3301      	adds	r3, #1
 80016f2:	00c0      	lsls	r0, r0, #3
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2e0a      	cmp	r6, #10
 80016fa:	dd1c      	ble.n	8001736 <__aeabi_dmul+0xca>
 80016fc:	003a      	movs	r2, r7
 80016fe:	2e0b      	cmp	r6, #11
 8001700:	d05e      	beq.n	80017c0 <__aeabi_dmul+0x154>
 8001702:	4647      	mov	r7, r8
 8001704:	e056      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001706:	4649      	mov	r1, r9
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <__aeabi_dmul+0x360>)
 800170a:	4321      	orrs	r1, r4
 800170c:	18eb      	adds	r3, r5, r3
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2900      	cmp	r1, #0
 8001712:	d12a      	bne.n	800176a <__aeabi_dmul+0xfe>
 8001714:	2080      	movs	r0, #128	; 0x80
 8001716:	2202      	movs	r2, #2
 8001718:	0100      	lsls	r0, r0, #4
 800171a:	002b      	movs	r3, r5
 800171c:	4684      	mov	ip, r0
 800171e:	4316      	orrs	r6, r2
 8001720:	4642      	mov	r2, r8
 8001722:	4463      	add	r3, ip
 8001724:	407a      	eors	r2, r7
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2e0a      	cmp	r6, #10
 800172c:	dd00      	ble.n	8001730 <__aeabi_dmul+0xc4>
 800172e:	e231      	b.n	8001b94 <__aeabi_dmul+0x528>
 8001730:	2000      	movs	r0, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2e02      	cmp	r6, #2
 8001738:	dc26      	bgt.n	8001788 <__aeabi_dmul+0x11c>
 800173a:	3e01      	subs	r6, #1
 800173c:	2e01      	cmp	r6, #1
 800173e:	d852      	bhi.n	80017e6 <__aeabi_dmul+0x17a>
 8001740:	2902      	cmp	r1, #2
 8001742:	d04c      	beq.n	80017de <__aeabi_dmul+0x172>
 8001744:	2901      	cmp	r1, #1
 8001746:	d000      	beq.n	800174a <__aeabi_dmul+0xde>
 8001748:	e118      	b.n	800197c <__aeabi_dmul+0x310>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2500      	movs	r5, #0
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	4323      	orrs	r3, r4
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	4313      	orrs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	0019      	movs	r1, r3
 800175c:	b007      	add	sp, #28
 800175e:	bcf0      	pop	{r4, r5, r6, r7}
 8001760:	46bb      	mov	fp, r7
 8001762:	46b2      	mov	sl, r6
 8001764:	46a9      	mov	r9, r5
 8001766:	46a0      	mov	r8, r4
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	2203      	movs	r2, #3
 800176e:	0109      	lsls	r1, r1, #4
 8001770:	002b      	movs	r3, r5
 8001772:	468c      	mov	ip, r1
 8001774:	4316      	orrs	r6, r2
 8001776:	4642      	mov	r2, r8
 8001778:	4463      	add	r3, ip
 800177a:	407a      	eors	r2, r7
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2e0a      	cmp	r6, #10
 8001782:	dd00      	ble.n	8001786 <__aeabi_dmul+0x11a>
 8001784:	e228      	b.n	8001bd8 <__aeabi_dmul+0x56c>
 8001786:	2103      	movs	r1, #3
 8001788:	2501      	movs	r5, #1
 800178a:	40b5      	lsls	r5, r6
 800178c:	46ac      	mov	ip, r5
 800178e:	26a6      	movs	r6, #166	; 0xa6
 8001790:	4663      	mov	r3, ip
 8001792:	00f6      	lsls	r6, r6, #3
 8001794:	4035      	ands	r5, r6
 8001796:	4233      	tst	r3, r6
 8001798:	d10b      	bne.n	80017b2 <__aeabi_dmul+0x146>
 800179a:	2690      	movs	r6, #144	; 0x90
 800179c:	00b6      	lsls	r6, r6, #2
 800179e:	4233      	tst	r3, r6
 80017a0:	d118      	bne.n	80017d4 <__aeabi_dmul+0x168>
 80017a2:	3eb9      	subs	r6, #185	; 0xb9
 80017a4:	3eff      	subs	r6, #255	; 0xff
 80017a6:	421e      	tst	r6, r3
 80017a8:	d01d      	beq.n	80017e6 <__aeabi_dmul+0x17a>
 80017aa:	46a3      	mov	fp, r4
 80017ac:	4682      	mov	sl, r0
 80017ae:	9100      	str	r1, [sp, #0]
 80017b0:	e000      	b.n	80017b4 <__aeabi_dmul+0x148>
 80017b2:	0017      	movs	r7, r2
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	003a      	movs	r2, r7
 80017b8:	2902      	cmp	r1, #2
 80017ba:	d010      	beq.n	80017de <__aeabi_dmul+0x172>
 80017bc:	465c      	mov	r4, fp
 80017be:	4650      	mov	r0, sl
 80017c0:	2903      	cmp	r1, #3
 80017c2:	d1bf      	bne.n	8001744 <__aeabi_dmul+0xd8>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	431c      	orrs	r4, r3
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <__aeabi_dmul+0x360>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	e7bd      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017d4:	2480      	movs	r4, #128	; 0x80
 80017d6:	2200      	movs	r2, #0
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <__aeabi_dmul+0x360>)
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	e7b8      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017de:	2400      	movs	r4, #0
 80017e0:	2500      	movs	r5, #0
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <__aeabi_dmul+0x360>)
 80017e4:	e7b4      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017e6:	4653      	mov	r3, sl
 80017e8:	041e      	lsls	r6, r3, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	0c1f      	lsrs	r7, r3, #16
 80017ee:	0033      	movs	r3, r6
 80017f0:	0c01      	lsrs	r1, r0, #16
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c00      	lsrs	r0, r0, #16
 80017f6:	4343      	muls	r3, r0
 80017f8:	4698      	mov	r8, r3
 80017fa:	0003      	movs	r3, r0
 80017fc:	437b      	muls	r3, r7
 80017fe:	4699      	mov	r9, r3
 8001800:	0033      	movs	r3, r6
 8001802:	434b      	muls	r3, r1
 8001804:	469c      	mov	ip, r3
 8001806:	4643      	mov	r3, r8
 8001808:	000d      	movs	r5, r1
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	469a      	mov	sl, r3
 800180e:	437d      	muls	r5, r7
 8001810:	44cc      	add	ip, r9
 8001812:	44d4      	add	ip, sl
 8001814:	9500      	str	r5, [sp, #0]
 8001816:	45e1      	cmp	r9, ip
 8001818:	d904      	bls.n	8001824 <__aeabi_dmul+0x1b8>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4699      	mov	r9, r3
 8001820:	444d      	add	r5, r9
 8001822:	9500      	str	r5, [sp, #0]
 8001824:	4663      	mov	r3, ip
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	001d      	movs	r5, r3
 800182a:	4663      	mov	r3, ip
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	469c      	mov	ip, r3
 8001830:	4643      	mov	r3, r8
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	4663      	mov	r3, ip
 800183a:	4443      	add	r3, r8
 800183c:	9303      	str	r3, [sp, #12]
 800183e:	0c23      	lsrs	r3, r4, #16
 8001840:	4698      	mov	r8, r3
 8001842:	0033      	movs	r3, r6
 8001844:	0424      	lsls	r4, r4, #16
 8001846:	0c24      	lsrs	r4, r4, #16
 8001848:	4363      	muls	r3, r4
 800184a:	469c      	mov	ip, r3
 800184c:	0023      	movs	r3, r4
 800184e:	437b      	muls	r3, r7
 8001850:	4699      	mov	r9, r3
 8001852:	4643      	mov	r3, r8
 8001854:	435e      	muls	r6, r3
 8001856:	435f      	muls	r7, r3
 8001858:	444e      	add	r6, r9
 800185a:	4663      	mov	r3, ip
 800185c:	46b2      	mov	sl, r6
 800185e:	0c1e      	lsrs	r6, r3, #16
 8001860:	4456      	add	r6, sl
 8001862:	45b1      	cmp	r9, r6
 8001864:	d903      	bls.n	800186e <__aeabi_dmul+0x202>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4699      	mov	r9, r3
 800186c:	444f      	add	r7, r9
 800186e:	0c33      	lsrs	r3, r6, #16
 8001870:	4699      	mov	r9, r3
 8001872:	003b      	movs	r3, r7
 8001874:	444b      	add	r3, r9
 8001876:	9305      	str	r3, [sp, #20]
 8001878:	4663      	mov	r3, ip
 800187a:	46ac      	mov	ip, r5
 800187c:	041f      	lsls	r7, r3, #16
 800187e:	0c3f      	lsrs	r7, r7, #16
 8001880:	0436      	lsls	r6, r6, #16
 8001882:	19f6      	adds	r6, r6, r7
 8001884:	44b4      	add	ip, r6
 8001886:	4663      	mov	r3, ip
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	465b      	mov	r3, fp
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	469c      	mov	ip, r3
 8001890:	465b      	mov	r3, fp
 8001892:	041f      	lsls	r7, r3, #16
 8001894:	0c3f      	lsrs	r7, r7, #16
 8001896:	003b      	movs	r3, r7
 8001898:	4343      	muls	r3, r0
 800189a:	4699      	mov	r9, r3
 800189c:	4663      	mov	r3, ip
 800189e:	4343      	muls	r3, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	4660      	mov	r0, ip
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	469b      	mov	fp, r3
 80018aa:	4348      	muls	r0, r1
 80018ac:	4379      	muls	r1, r7
 80018ae:	4451      	add	r1, sl
 80018b0:	4459      	add	r1, fp
 80018b2:	458a      	cmp	sl, r1
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x252>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	469a      	mov	sl, r3
 80018bc:	4450      	add	r0, sl
 80018be:	0c0b      	lsrs	r3, r1, #16
 80018c0:	469a      	mov	sl, r3
 80018c2:	464b      	mov	r3, r9
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	4699      	mov	r9, r3
 80018ca:	003b      	movs	r3, r7
 80018cc:	4363      	muls	r3, r4
 80018ce:	0409      	lsls	r1, r1, #16
 80018d0:	4645      	mov	r5, r8
 80018d2:	4449      	add	r1, r9
 80018d4:	4699      	mov	r9, r3
 80018d6:	4663      	mov	r3, ip
 80018d8:	435c      	muls	r4, r3
 80018da:	436b      	muls	r3, r5
 80018dc:	469c      	mov	ip, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	4698      	mov	r8, r3
 80018e4:	436f      	muls	r7, r5
 80018e6:	193f      	adds	r7, r7, r4
 80018e8:	4447      	add	r7, r8
 80018ea:	4450      	add	r0, sl
 80018ec:	42bc      	cmp	r4, r7
 80018ee:	d903      	bls.n	80018f8 <__aeabi_dmul+0x28c>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	4698      	mov	r8, r3
 80018f6:	44c4      	add	ip, r8
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	9d00      	ldr	r5, [sp, #0]
 80018fc:	4698      	mov	r8, r3
 80018fe:	4445      	add	r5, r8
 8001900:	42b5      	cmp	r5, r6
 8001902:	41b6      	sbcs	r6, r6
 8001904:	4273      	negs	r3, r6
 8001906:	4698      	mov	r8, r3
 8001908:	464b      	mov	r3, r9
 800190a:	041e      	lsls	r6, r3, #16
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	043c      	lsls	r4, r7, #16
 8001910:	4699      	mov	r9, r3
 8001912:	0c36      	lsrs	r6, r6, #16
 8001914:	19a4      	adds	r4, r4, r6
 8001916:	444c      	add	r4, r9
 8001918:	46a1      	mov	r9, r4
 800191a:	4683      	mov	fp, r0
 800191c:	186e      	adds	r6, r5, r1
 800191e:	44c1      	add	r9, r8
 8001920:	428e      	cmp	r6, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	44cb      	add	fp, r9
 8001926:	465d      	mov	r5, fp
 8001928:	4249      	negs	r1, r1
 800192a:	186d      	adds	r5, r5, r1
 800192c:	429c      	cmp	r4, r3
 800192e:	41a4      	sbcs	r4, r4
 8001930:	45c1      	cmp	r9, r8
 8001932:	419b      	sbcs	r3, r3
 8001934:	4583      	cmp	fp, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	428d      	cmp	r5, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	425b      	negs	r3, r3
 800193e:	4264      	negs	r4, r4
 8001940:	431c      	orrs	r4, r3
 8001942:	4240      	negs	r0, r0
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	4249      	negs	r1, r1
 8001948:	4301      	orrs	r1, r0
 800194a:	0270      	lsls	r0, r6, #9
 800194c:	0c3f      	lsrs	r7, r7, #16
 800194e:	4318      	orrs	r0, r3
 8001950:	19e4      	adds	r4, r4, r7
 8001952:	1e47      	subs	r7, r0, #1
 8001954:	41b8      	sbcs	r0, r7
 8001956:	1864      	adds	r4, r4, r1
 8001958:	4464      	add	r4, ip
 800195a:	0df6      	lsrs	r6, r6, #23
 800195c:	0261      	lsls	r1, r4, #9
 800195e:	4330      	orrs	r0, r6
 8001960:	0dec      	lsrs	r4, r5, #23
 8001962:	026e      	lsls	r6, r5, #9
 8001964:	430c      	orrs	r4, r1
 8001966:	4330      	orrs	r0, r6
 8001968:	01c9      	lsls	r1, r1, #7
 800196a:	d400      	bmi.n	800196e <__aeabi_dmul+0x302>
 800196c:	e0f1      	b.n	8001b52 <__aeabi_dmul+0x4e6>
 800196e:	2101      	movs	r1, #1
 8001970:	0843      	lsrs	r3, r0, #1
 8001972:	4001      	ands	r1, r0
 8001974:	430b      	orrs	r3, r1
 8001976:	07e0      	lsls	r0, r4, #31
 8001978:	4318      	orrs	r0, r3
 800197a:	0864      	lsrs	r4, r4, #1
 800197c:	4915      	ldr	r1, [pc, #84]	; (80019d4 <__aeabi_dmul+0x368>)
 800197e:	9b02      	ldr	r3, [sp, #8]
 8001980:	468c      	mov	ip, r1
 8001982:	4463      	add	r3, ip
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_dmul+0x31e>
 8001988:	e097      	b.n	8001aba <__aeabi_dmul+0x44e>
 800198a:	0741      	lsls	r1, r0, #29
 800198c:	d009      	beq.n	80019a2 <__aeabi_dmul+0x336>
 800198e:	210f      	movs	r1, #15
 8001990:	4001      	ands	r1, r0
 8001992:	2904      	cmp	r1, #4
 8001994:	d005      	beq.n	80019a2 <__aeabi_dmul+0x336>
 8001996:	1d01      	adds	r1, r0, #4
 8001998:	4281      	cmp	r1, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	4240      	negs	r0, r0
 800199e:	1824      	adds	r4, r4, r0
 80019a0:	0008      	movs	r0, r1
 80019a2:	01e1      	lsls	r1, r4, #7
 80019a4:	d506      	bpl.n	80019b4 <__aeabi_dmul+0x348>
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	00c9      	lsls	r1, r1, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <__aeabi_dmul+0x36c>)
 80019ae:	401c      	ands	r4, r3
 80019b0:	9b02      	ldr	r3, [sp, #8]
 80019b2:	4463      	add	r3, ip
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <__aeabi_dmul+0x370>)
 80019b6:	428b      	cmp	r3, r1
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dmul+0x350>
 80019ba:	e710      	b.n	80017de <__aeabi_dmul+0x172>
 80019bc:	0761      	lsls	r1, r4, #29
 80019be:	08c5      	lsrs	r5, r0, #3
 80019c0:	0264      	lsls	r4, r4, #9
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	430d      	orrs	r5, r1
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	e6c1      	b.n	8001750 <__aeabi_dmul+0xe4>
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	fffffc01 	.word	0xfffffc01
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	464b      	mov	r3, r9
 80019e2:	4323      	orrs	r3, r4
 80019e4:	d059      	beq.n	8001a9a <__aeabi_dmul+0x42e>
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x380>
 80019ea:	e0a3      	b.n	8001b34 <__aeabi_dmul+0x4c8>
 80019ec:	0020      	movs	r0, r4
 80019ee:	f000 fdb1 	bl	8002554 <__clzsi2>
 80019f2:	0001      	movs	r1, r0
 80019f4:	0003      	movs	r3, r0
 80019f6:	390b      	subs	r1, #11
 80019f8:	221d      	movs	r2, #29
 80019fa:	1a52      	subs	r2, r2, r1
 80019fc:	4649      	mov	r1, r9
 80019fe:	0018      	movs	r0, r3
 8001a00:	40d1      	lsrs	r1, r2
 8001a02:	464a      	mov	r2, r9
 8001a04:	3808      	subs	r0, #8
 8001a06:	4082      	lsls	r2, r0
 8001a08:	4084      	lsls	r4, r0
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	430c      	orrs	r4, r1
 8001a0e:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a10:	1aeb      	subs	r3, r5, r3
 8001a12:	4694      	mov	ip, r2
 8001a14:	4642      	mov	r2, r8
 8001a16:	4463      	add	r3, ip
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	407a      	eors	r2, r7
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2e0a      	cmp	r6, #10
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dmul+0x3c0>
 8001a2a:	e667      	b.n	80016fc <__aeabi_dmul+0x90>
 8001a2c:	e683      	b.n	8001736 <__aeabi_dmul+0xca>
 8001a2e:	465b      	mov	r3, fp
 8001a30:	4303      	orrs	r3, r0
 8001a32:	469a      	mov	sl, r3
 8001a34:	d02a      	beq.n	8001a8c <__aeabi_dmul+0x420>
 8001a36:	465b      	mov	r3, fp
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06d      	beq.n	8001b18 <__aeabi_dmul+0x4ac>
 8001a3c:	4658      	mov	r0, fp
 8001a3e:	f000 fd89 	bl	8002554 <__clzsi2>
 8001a42:	0001      	movs	r1, r0
 8001a44:	0003      	movs	r3, r0
 8001a46:	390b      	subs	r1, #11
 8001a48:	221d      	movs	r2, #29
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	465d      	mov	r5, fp
 8001a52:	40d1      	lsrs	r1, r2
 8001a54:	3808      	subs	r0, #8
 8001a56:	4085      	lsls	r5, r0
 8001a58:	000a      	movs	r2, r1
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	432a      	orrs	r2, r5
 8001a5e:	4693      	mov	fp, r2
 8001a60:	46a2      	mov	sl, r4
 8001a62:	4d5f      	ldr	r5, [pc, #380]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a64:	2600      	movs	r6, #0
 8001a66:	1aed      	subs	r5, r5, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e625      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	4303      	orrs	r3, r0
 8001a72:	469a      	mov	sl, r3
 8001a74:	d105      	bne.n	8001a82 <__aeabi_dmul+0x416>
 8001a76:	2300      	movs	r3, #0
 8001a78:	469b      	mov	fp, r3
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	2608      	movs	r6, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	e61b      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a82:	2303      	movs	r3, #3
 8001a84:	4682      	mov	sl, r0
 8001a86:	260c      	movs	r6, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	e616      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	469b      	mov	fp, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	2604      	movs	r6, #4
 8001a94:	2500      	movs	r5, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e60f      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	9501      	str	r5, [sp, #4]
 8001aa0:	431e      	orrs	r6, r3
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	407a      	eors	r2, r7
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2e0a      	cmp	r6, #10
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dmul+0x44c>
 8001ab6:	e621      	b.n	80016fc <__aeabi_dmul+0x90>
 8001ab8:	e63d      	b.n	8001736 <__aeabi_dmul+0xca>
 8001aba:	2101      	movs	r1, #1
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	2938      	cmp	r1, #56	; 0x38
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dmul+0x458>
 8001ac2:	e642      	b.n	800174a <__aeabi_dmul+0xde>
 8001ac4:	291f      	cmp	r1, #31
 8001ac6:	dd47      	ble.n	8001b58 <__aeabi_dmul+0x4ec>
 8001ac8:	261f      	movs	r6, #31
 8001aca:	0025      	movs	r5, r4
 8001acc:	4276      	negs	r6, r6
 8001ace:	1af3      	subs	r3, r6, r3
 8001ad0:	40dd      	lsrs	r5, r3
 8001ad2:	002b      	movs	r3, r5
 8001ad4:	2920      	cmp	r1, #32
 8001ad6:	d005      	beq.n	8001ae4 <__aeabi_dmul+0x478>
 8001ad8:	4942      	ldr	r1, [pc, #264]	; (8001be4 <__aeabi_dmul+0x578>)
 8001ada:	9d02      	ldr	r5, [sp, #8]
 8001adc:	468c      	mov	ip, r1
 8001ade:	4465      	add	r5, ip
 8001ae0:	40ac      	lsls	r4, r5
 8001ae2:	4320      	orrs	r0, r4
 8001ae4:	1e41      	subs	r1, r0, #1
 8001ae6:	4188      	sbcs	r0, r1
 8001ae8:	4318      	orrs	r0, r3
 8001aea:	2307      	movs	r3, #7
 8001aec:	001d      	movs	r5, r3
 8001aee:	2400      	movs	r4, #0
 8001af0:	4005      	ands	r5, r0
 8001af2:	4203      	tst	r3, r0
 8001af4:	d04a      	beq.n	8001b8c <__aeabi_dmul+0x520>
 8001af6:	230f      	movs	r3, #15
 8001af8:	2400      	movs	r4, #0
 8001afa:	4003      	ands	r3, r0
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d042      	beq.n	8001b86 <__aeabi_dmul+0x51a>
 8001b00:	1d03      	adds	r3, r0, #4
 8001b02:	4283      	cmp	r3, r0
 8001b04:	4180      	sbcs	r0, r0
 8001b06:	4240      	negs	r0, r0
 8001b08:	1824      	adds	r4, r4, r0
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	0223      	lsls	r3, r4, #8
 8001b0e:	d53a      	bpl.n	8001b86 <__aeabi_dmul+0x51a>
 8001b10:	2301      	movs	r3, #1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e61b      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b18:	f000 fd1c 	bl	8002554 <__clzsi2>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	0003      	movs	r3, r0
 8001b20:	3115      	adds	r1, #21
 8001b22:	3320      	adds	r3, #32
 8001b24:	291c      	cmp	r1, #28
 8001b26:	dd8f      	ble.n	8001a48 <__aeabi_dmul+0x3dc>
 8001b28:	3808      	subs	r0, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4692      	mov	sl, r2
 8001b30:	46a3      	mov	fp, r4
 8001b32:	e796      	b.n	8001a62 <__aeabi_dmul+0x3f6>
 8001b34:	f000 fd0e 	bl	8002554 <__clzsi2>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	3115      	adds	r1, #21
 8001b3e:	3320      	adds	r3, #32
 8001b40:	291c      	cmp	r1, #28
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dmul+0x4da>
 8001b44:	e758      	b.n	80019f8 <__aeabi_dmul+0x38c>
 8001b46:	0002      	movs	r2, r0
 8001b48:	464c      	mov	r4, r9
 8001b4a:	3a08      	subs	r2, #8
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	4094      	lsls	r4, r2
 8001b50:	e75d      	b.n	8001a0e <__aeabi_dmul+0x3a2>
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	e711      	b.n	800197c <__aeabi_dmul+0x310>
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <__aeabi_dmul+0x57c>)
 8001b5a:	0026      	movs	r6, r4
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	0003      	movs	r3, r0
 8001b60:	9d02      	ldr	r5, [sp, #8]
 8001b62:	40cb      	lsrs	r3, r1
 8001b64:	4465      	add	r5, ip
 8001b66:	40ae      	lsls	r6, r5
 8001b68:	431e      	orrs	r6, r3
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	40ab      	lsls	r3, r5
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	4183      	sbcs	r3, r0
 8001b72:	0030      	movs	r0, r6
 8001b74:	4318      	orrs	r0, r3
 8001b76:	40cc      	lsrs	r4, r1
 8001b78:	0743      	lsls	r3, r0, #29
 8001b7a:	d0c7      	beq.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	4003      	ands	r3, r0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d1bd      	bne.n	8001b00 <__aeabi_dmul+0x494>
 8001b84:	e7c2      	b.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b86:	0765      	lsls	r5, r4, #29
 8001b88:	0264      	lsls	r4, r4, #9
 8001b8a:	0b24      	lsrs	r4, r4, #12
 8001b8c:	08c0      	lsrs	r0, r0, #3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4305      	orrs	r5, r0
 8001b92:	e5dd      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b94:	2500      	movs	r5, #0
 8001b96:	2302      	movs	r3, #2
 8001b98:	2e0f      	cmp	r6, #15
 8001b9a:	d10c      	bne.n	8001bb6 <__aeabi_dmul+0x54a>
 8001b9c:	2480      	movs	r4, #128	; 0x80
 8001b9e:	465b      	mov	r3, fp
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4223      	tst	r3, r4
 8001ba4:	d00e      	beq.n	8001bc4 <__aeabi_dmul+0x558>
 8001ba6:	4221      	tst	r1, r4
 8001ba8:	d10c      	bne.n	8001bc4 <__aeabi_dmul+0x558>
 8001baa:	430c      	orrs	r4, r1
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	003a      	movs	r2, r7
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <__aeabi_dmul+0x580>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e5cc      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bb6:	2e0b      	cmp	r6, #11
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dmul+0x550>
 8001bba:	e5a2      	b.n	8001702 <__aeabi_dmul+0x96>
 8001bbc:	468b      	mov	fp, r1
 8001bbe:	46aa      	mov	sl, r5
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	e5f7      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001bc4:	2480      	movs	r4, #128	; 0x80
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4655      	mov	r5, sl
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_dmul+0x580>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e5bb      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bd8:	464d      	mov	r5, r9
 8001bda:	0021      	movs	r1, r4
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e7db      	b.n	8001b98 <__aeabi_dmul+0x52c>
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	0000043e 	.word	0x0000043e
 8001be8:	0000041e 	.word	0x0000041e
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dsub>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	0004      	movs	r4, r0
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	032b      	lsls	r3, r5, #12
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	0f62      	lsrs	r2, r4, #29
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	00e3      	lsls	r3, r4, #3
 8001c0e:	030c      	lsls	r4, r1, #12
 8001c10:	0a64      	lsrs	r4, r4, #9
 8001c12:	0f47      	lsrs	r7, r0, #29
 8001c14:	4327      	orrs	r7, r4
 8001c16:	4cd0      	ldr	r4, [pc, #832]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c18:	006e      	lsls	r6, r5, #1
 8001c1a:	4691      	mov	r9, r2
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	004a      	lsls	r2, r1, #1
 8001c20:	00c0      	lsls	r0, r0, #3
 8001c22:	4698      	mov	r8, r3
 8001c24:	46a2      	mov	sl, r4
 8001c26:	0d76      	lsrs	r6, r6, #21
 8001c28:	0fed      	lsrs	r5, r5, #31
 8001c2a:	0d52      	lsrs	r2, r2, #21
 8001c2c:	0fc9      	lsrs	r1, r1, #31
 8001c2e:	9001      	str	r0, [sp, #4]
 8001c30:	42a2      	cmp	r2, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x46>
 8001c34:	e0b9      	b.n	8001daa <__aeabi_dsub+0x1ba>
 8001c36:	2401      	movs	r4, #1
 8001c38:	4061      	eors	r1, r4
 8001c3a:	468b      	mov	fp, r1
 8001c3c:	428d      	cmp	r5, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x52>
 8001c40:	e08d      	b.n	8001d5e <__aeabi_dsub+0x16e>
 8001c42:	1ab4      	subs	r4, r6, r2
 8001c44:	46a4      	mov	ip, r4
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x5c>
 8001c4a:	e0b7      	b.n	8001dbc <__aeabi_dsub+0x1cc>
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x62>
 8001c50:	e0cb      	b.n	8001dea <__aeabi_dsub+0x1fa>
 8001c52:	4ac1      	ldr	r2, [pc, #772]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c54:	4296      	cmp	r6, r2
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x6a>
 8001c58:	e186      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0412      	lsls	r2, r2, #16
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	2a38      	cmp	r2, #56	; 0x38
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0x78>
 8001c66:	e1a4      	b.n	8001fb2 <__aeabi_dsub+0x3c2>
 8001c68:	2a1f      	cmp	r2, #31
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x7e>
 8001c6c:	e21d      	b.n	80020aa <__aeabi_dsub+0x4ba>
 8001c6e:	4661      	mov	r1, ip
 8001c70:	2220      	movs	r2, #32
 8001c72:	003c      	movs	r4, r7
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	0001      	movs	r1, r0
 8001c78:	4090      	lsls	r0, r2
 8001c7a:	4094      	lsls	r4, r2
 8001c7c:	1e42      	subs	r2, r0, #1
 8001c7e:	4190      	sbcs	r0, r2
 8001c80:	4662      	mov	r2, ip
 8001c82:	46a0      	mov	r8, r4
 8001c84:	4664      	mov	r4, ip
 8001c86:	40d7      	lsrs	r7, r2
 8001c88:	464a      	mov	r2, r9
 8001c8a:	40e1      	lsrs	r1, r4
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	1bd2      	subs	r2, r2, r7
 8001c90:	4691      	mov	r9, r2
 8001c92:	430c      	orrs	r4, r1
 8001c94:	4304      	orrs	r4, r0
 8001c96:	1b1c      	subs	r4, r3, r4
 8001c98:	42a3      	cmp	r3, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0xbc>
 8001caa:	e12b      	b.n	8001f04 <__aeabi_dsub+0x314>
 8001cac:	4653      	mov	r3, sl
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	0a53      	lsrs	r3, r2, #9
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0xcc>
 8001cba:	e166      	b.n	8001f8a <__aeabi_dsub+0x39a>
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f000 fc49 	bl	8002554 <__clzsi2>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	3b08      	subs	r3, #8
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	0020      	movs	r0, r4
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	4651      	mov	r1, sl
 8001cce:	40d0      	lsrs	r0, r2
 8001cd0:	4099      	lsls	r1, r3
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	409c      	lsls	r4, r3
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	dd00      	ble.n	8001cde <__aeabi_dsub+0xee>
 8001cdc:	e164      	b.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001cde:	1b9b      	subs	r3, r3, r6
 8001ce0:	1c59      	adds	r1, r3, #1
 8001ce2:	291f      	cmp	r1, #31
 8001ce4:	dd00      	ble.n	8001ce8 <__aeabi_dsub+0xf8>
 8001ce6:	e0fe      	b.n	8001ee6 <__aeabi_dsub+0x2f6>
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0010      	movs	r0, r2
 8001cec:	0026      	movs	r6, r4
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	409c      	lsls	r4, r3
 8001cf2:	4098      	lsls	r0, r3
 8001cf4:	40ce      	lsrs	r6, r1
 8001cf6:	40ca      	lsrs	r2, r1
 8001cf8:	1e63      	subs	r3, r4, #1
 8001cfa:	419c      	sbcs	r4, r3
 8001cfc:	4330      	orrs	r0, r6
 8001cfe:	4692      	mov	sl, r2
 8001d00:	2600      	movs	r6, #0
 8001d02:	4304      	orrs	r4, r0
 8001d04:	0763      	lsls	r3, r4, #29
 8001d06:	d009      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d08:	230f      	movs	r3, #15
 8001d0a:	4023      	ands	r3, r4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d005      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d10:	1d23      	adds	r3, r4, #4
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	41a4      	sbcs	r4, r4
 8001d16:	4264      	negs	r4, r4
 8001d18:	44a2      	add	sl, r4
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	4653      	mov	r3, sl
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	d400      	bmi.n	8001d24 <__aeabi_dsub+0x134>
 8001d22:	e0f2      	b.n	8001f0a <__aeabi_dsub+0x31a>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <__aeabi_dsub+0x368>)
 8001d26:	3601      	adds	r6, #1
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x13e>
 8001d2c:	e10f      	b.n	8001f4e <__aeabi_dsub+0x35e>
 8001d2e:	4653      	mov	r3, sl
 8001d30:	498a      	ldr	r1, [pc, #552]	; (8001f5c <__aeabi_dsub+0x36c>)
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	400b      	ands	r3, r1
 8001d36:	0019      	movs	r1, r3
 8001d38:	075b      	lsls	r3, r3, #29
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	0572      	lsls	r2, r6, #21
 8001d3e:	024c      	lsls	r4, r1, #9
 8001d40:	0b24      	lsrs	r4, r4, #12
 8001d42:	0d52      	lsrs	r2, r2, #21
 8001d44:	0512      	lsls	r2, r2, #20
 8001d46:	4322      	orrs	r2, r4
 8001d48:	07ed      	lsls	r5, r5, #31
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	b003      	add	sp, #12
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	1ab4      	subs	r4, r6, r2
 8001d60:	46a4      	mov	ip, r4
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	dd59      	ble.n	8001e1a <__aeabi_dsub+0x22a>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x17c>
 8001d6a:	e0b0      	b.n	8001ece <__aeabi_dsub+0x2de>
 8001d6c:	4556      	cmp	r6, sl
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x182>
 8001d70:	e0fa      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	4317      	orrs	r7, r2
 8001d78:	4662      	mov	r2, ip
 8001d7a:	2a38      	cmp	r2, #56	; 0x38
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x190>
 8001d7e:	e0d4      	b.n	8001f2a <__aeabi_dsub+0x33a>
 8001d80:	2a1f      	cmp	r2, #31
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x196>
 8001d84:	e1c0      	b.n	8002108 <__aeabi_dsub+0x518>
 8001d86:	0039      	movs	r1, r7
 8001d88:	3a20      	subs	r2, #32
 8001d8a:	40d1      	lsrs	r1, r2
 8001d8c:	4662      	mov	r2, ip
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d006      	beq.n	8001da0 <__aeabi_dsub+0x1b0>
 8001d92:	4664      	mov	r4, ip
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	1b12      	subs	r2, r2, r4
 8001d98:	003c      	movs	r4, r7
 8001d9a:	4094      	lsls	r4, r2
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	9401      	str	r4, [sp, #4]
 8001da0:	9c01      	ldr	r4, [sp, #4]
 8001da2:	1e62      	subs	r2, r4, #1
 8001da4:	4194      	sbcs	r4, r2
 8001da6:	430c      	orrs	r4, r1
 8001da8:	e0c3      	b.n	8001f32 <__aeabi_dsub+0x342>
 8001daa:	003c      	movs	r4, r7
 8001dac:	4304      	orrs	r4, r0
 8001dae:	d02b      	beq.n	8001e08 <__aeabi_dsub+0x218>
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d02e      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001db6:	4c6a      	ldr	r4, [pc, #424]	; (8001f60 <__aeabi_dsub+0x370>)
 8001db8:	46a4      	mov	ip, r4
 8001dba:	44b4      	add	ip, r6
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d05f      	beq.n	8001e82 <__aeabi_dsub+0x292>
 8001dc2:	1b94      	subs	r4, r2, r6
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x1dc>
 8001dca:	e120      	b.n	800200e <__aeabi_dsub+0x41e>
 8001dcc:	464c      	mov	r4, r9
 8001dce:	431c      	orrs	r4, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1e4>
 8001dd2:	e1c7      	b.n	8002164 <__aeabi_dsub+0x574>
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	1e4c      	subs	r4, r1, #1
 8001dd8:	2901      	cmp	r1, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1ee>
 8001ddc:	e223      	b.n	8002226 <__aeabi_dsub+0x636>
 8001dde:	4d5e      	ldr	r5, [pc, #376]	; (8001f58 <__aeabi_dsub+0x368>)
 8001de0:	45ac      	cmp	ip, r5
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x1f6>
 8001de4:	e1d8      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8001de6:	46a4      	mov	ip, r4
 8001de8:	e11a      	b.n	8002020 <__aeabi_dsub+0x430>
 8001dea:	003a      	movs	r2, r7
 8001dec:	4302      	orrs	r2, r0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x202>
 8001df0:	e0e4      	b.n	8001fbc <__aeabi_dsub+0x3cc>
 8001df2:	0022      	movs	r2, r4
 8001df4:	3a01      	subs	r2, #1
 8001df6:	2c01      	cmp	r4, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x20c>
 8001dfa:	e1c3      	b.n	8002184 <__aeabi_dsub+0x594>
 8001dfc:	4956      	ldr	r1, [pc, #344]	; (8001f58 <__aeabi_dsub+0x368>)
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x214>
 8001e02:	e0b1      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001e04:	4694      	mov	ip, r2
 8001e06:	e72b      	b.n	8001c60 <__aeabi_dsub+0x70>
 8001e08:	2401      	movs	r4, #1
 8001e0a:	4061      	eors	r1, r4
 8001e0c:	468b      	mov	fp, r1
 8001e0e:	428d      	cmp	r5, r1
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001e12:	e716      	b.n	8001c42 <__aeabi_dsub+0x52>
 8001e14:	4952      	ldr	r1, [pc, #328]	; (8001f60 <__aeabi_dsub+0x370>)
 8001e16:	468c      	mov	ip, r1
 8001e18:	44b4      	add	ip, r6
 8001e1a:	4664      	mov	r4, ip
 8001e1c:	2c00      	cmp	r4, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x232>
 8001e20:	e0d3      	b.n	8001fca <__aeabi_dsub+0x3da>
 8001e22:	1b91      	subs	r1, r2, r6
 8001e24:	468c      	mov	ip, r1
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x23c>
 8001e2a:	e15e      	b.n	80020ea <__aeabi_dsub+0x4fa>
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <__aeabi_dsub+0x368>)
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x244>
 8001e32:	e1be      	b.n	80021b2 <__aeabi_dsub+0x5c2>
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	464c      	mov	r4, r9
 8001e38:	0409      	lsls	r1, r1, #16
 8001e3a:	430c      	orrs	r4, r1
 8001e3c:	46a1      	mov	r9, r4
 8001e3e:	4661      	mov	r1, ip
 8001e40:	2938      	cmp	r1, #56	; 0x38
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x256>
 8001e44:	e1ba      	b.n	80021bc <__aeabi_dsub+0x5cc>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x25c>
 8001e4a:	e227      	b.n	800229c <__aeabi_dsub+0x6ac>
 8001e4c:	2420      	movs	r4, #32
 8001e4e:	1a64      	subs	r4, r4, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	40a1      	lsls	r1, r4
 8001e54:	001e      	movs	r6, r3
 8001e56:	4688      	mov	r8, r1
 8001e58:	4661      	mov	r1, ip
 8001e5a:	40a3      	lsls	r3, r4
 8001e5c:	40ce      	lsrs	r6, r1
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1e5c      	subs	r4, r3, #1
 8001e62:	41a3      	sbcs	r3, r4
 8001e64:	4331      	orrs	r1, r6
 8001e66:	4319      	orrs	r1, r3
 8001e68:	000c      	movs	r4, r1
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	40d9      	lsrs	r1, r3
 8001e70:	187f      	adds	r7, r7, r1
 8001e72:	1824      	adds	r4, r4, r0
 8001e74:	4284      	cmp	r4, r0
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	425b      	negs	r3, r3
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	0016      	movs	r6, r2
 8001e7e:	44ba      	add	sl, r7
 8001e80:	e05d      	b.n	8001f3e <__aeabi_dsub+0x34e>
 8001e82:	4c38      	ldr	r4, [pc, #224]	; (8001f64 <__aeabi_dsub+0x374>)
 8001e84:	1c72      	adds	r2, r6, #1
 8001e86:	4222      	tst	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x29c>
 8001e8a:	e0df      	b.n	800204c <__aeabi_dsub+0x45c>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	d000      	beq.n	8001e96 <__aeabi_dsub+0x2a6>
 8001e94:	e15c      	b.n	8002150 <__aeabi_dsub+0x560>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x2ac>
 8001e9a:	e1cf      	b.n	800223c <__aeabi_dsub+0x64c>
 8001e9c:	003a      	movs	r2, r7
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x2b4>
 8001ea2:	e17f      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001ea4:	1a1c      	subs	r4, r3, r0
 8001ea6:	464a      	mov	r2, r9
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	4189      	sbcs	r1, r1
 8001eac:	1bd2      	subs	r2, r2, r7
 8001eae:	4249      	negs	r1, r1
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	4692      	mov	sl, r2
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x2ca>
 8001eb8:	e20a      	b.n	80022d0 <__aeabi_dsub+0x6e0>
 8001eba:	1ac4      	subs	r4, r0, r3
 8001ebc:	42a0      	cmp	r0, r4
 8001ebe:	4180      	sbcs	r0, r0
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1aff      	subs	r7, r7, r3
 8001ec6:	1a3b      	subs	r3, r7, r0
 8001ec8:	469a      	mov	sl, r3
 8001eca:	465d      	mov	r5, fp
 8001ecc:	e71a      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	d073      	beq.n	8001fbc <__aeabi_dsub+0x3cc>
 8001ed4:	0022      	movs	r2, r4
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	2c01      	cmp	r4, #1
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x2ee>
 8001edc:	e0cb      	b.n	8002076 <__aeabi_dsub+0x486>
 8001ede:	4554      	cmp	r4, sl
 8001ee0:	d042      	beq.n	8001f68 <__aeabi_dsub+0x378>
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	e748      	b.n	8001d78 <__aeabi_dsub+0x188>
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	3b1f      	subs	r3, #31
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	2920      	cmp	r1, #32
 8001eee:	d003      	beq.n	8001ef8 <__aeabi_dsub+0x308>
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4314      	orrs	r4, r2
 8001ef8:	1e63      	subs	r3, r4, #1
 8001efa:	419c      	sbcs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	2600      	movs	r6, #0
 8001f00:	469a      	mov	sl, r3
 8001f02:	4304      	orrs	r4, r0
 8001f04:	0763      	lsls	r3, r4, #29
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x31a>
 8001f08:	e6fe      	b.n	8001d08 <__aeabi_dsub+0x118>
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	08e3      	lsrs	r3, r4, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4652      	mov	r2, sl
 8001f14:	46b4      	mov	ip, r6
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f1a:	458c      	cmp	ip, r1
 8001f1c:	d02a      	beq.n	8001f74 <__aeabi_dsub+0x384>
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	0b14      	lsrs	r4, r2, #12
 8001f22:	4662      	mov	r2, ip
 8001f24:	0552      	lsls	r2, r2, #21
 8001f26:	0d52      	lsrs	r2, r2, #21
 8001f28:	e70c      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f2a:	003c      	movs	r4, r7
 8001f2c:	4304      	orrs	r4, r0
 8001f2e:	1e62      	subs	r2, r4, #1
 8001f30:	4194      	sbcs	r4, r2
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	429c      	cmp	r4, r3
 8001f36:	4192      	sbcs	r2, r2
 8001f38:	4252      	negs	r2, r2
 8001f3a:	444a      	add	r2, r9
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	4653      	mov	r3, sl
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	d5df      	bpl.n	8001f04 <__aeabi_dsub+0x314>
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f46:	3601      	adds	r6, #1
 8001f48:	429e      	cmp	r6, r3
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dsub+0x35e>
 8001f4c:	e0a0      	b.n	8002090 <__aeabi_dsub+0x4a0>
 8001f4e:	0032      	movs	r2, r6
 8001f50:	2400      	movs	r4, #0
 8001f52:	2300      	movs	r3, #0
 8001f54:	e6f6      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000007fe 	.word	0x000007fe
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	0752      	lsls	r2, r2, #29
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	464a      	mov	r2, r9
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	0019      	movs	r1, r3
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x38c>
 8001f7a:	e1b5      	b.n	80022e8 <__aeabi_dsub+0x6f8>
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	4314      	orrs	r4, r2
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4ad5      	ldr	r2, [pc, #852]	; (80022dc <__aeabi_dsub+0x6ec>)
 8001f86:	0b24      	lsrs	r4, r4, #12
 8001f88:	e6dc      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f000 fae2 	bl	8002554 <__clzsi2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	3318      	adds	r3, #24
 8001f94:	2b1f      	cmp	r3, #31
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_dsub+0x3aa>
 8001f98:	e695      	b.n	8001cc6 <__aeabi_dsub+0xd6>
 8001f9a:	0022      	movs	r2, r4
 8001f9c:	3808      	subs	r0, #8
 8001f9e:	4082      	lsls	r2, r0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	429e      	cmp	r6, r3
 8001fa4:	dc00      	bgt.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001fa6:	e69a      	b.n	8001cde <__aeabi_dsub+0xee>
 8001fa8:	1af6      	subs	r6, r6, r3
 8001faa:	4bcd      	ldr	r3, [pc, #820]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e6a8      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001fb2:	003c      	movs	r4, r7
 8001fb4:	4304      	orrs	r4, r0
 8001fb6:	1e62      	subs	r2, r4, #1
 8001fb8:	4194      	sbcs	r4, r2
 8001fba:	e66c      	b.n	8001c96 <__aeabi_dsub+0xa6>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	0752      	lsls	r2, r2, #29
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	e7a6      	b.n	8001f18 <__aeabi_dsub+0x328>
 8001fca:	4cc6      	ldr	r4, [pc, #792]	; (80022e4 <__aeabi_dsub+0x6f4>)
 8001fcc:	1c72      	adds	r2, r6, #1
 8001fce:	4222      	tst	r2, r4
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x3e4>
 8001fd2:	e0ac      	b.n	800212e <__aeabi_dsub+0x53e>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	2e00      	cmp	r6, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x3ee>
 8001fdc:	e105      	b.n	80021ea <__aeabi_dsub+0x5fa>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x3f4>
 8001fe2:	e156      	b.n	8002292 <__aeabi_dsub+0x6a2>
 8001fe4:	003a      	movs	r2, r7
 8001fe6:	4302      	orrs	r2, r0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x3fc>
 8001fea:	e0db      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001fec:	181c      	adds	r4, r3, r0
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	444f      	add	r7, r9
 8001ff4:	46ba      	mov	sl, r7
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	449a      	add	sl, r3
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	d400      	bmi.n	8002002 <__aeabi_dsub+0x412>
 8002000:	e780      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002002:	4652      	mov	r2, sl
 8002004:	4bb6      	ldr	r3, [pc, #728]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002006:	2601      	movs	r6, #1
 8002008:	401a      	ands	r2, r3
 800200a:	4692      	mov	sl, r2
 800200c:	e77a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800200e:	4cb3      	ldr	r4, [pc, #716]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002010:	42a2      	cmp	r2, r4
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x426>
 8002014:	e0c0      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8002016:	2480      	movs	r4, #128	; 0x80
 8002018:	464d      	mov	r5, r9
 800201a:	0424      	lsls	r4, r4, #16
 800201c:	4325      	orrs	r5, r4
 800201e:	46a9      	mov	r9, r5
 8002020:	4664      	mov	r4, ip
 8002022:	2c38      	cmp	r4, #56	; 0x38
 8002024:	dc53      	bgt.n	80020ce <__aeabi_dsub+0x4de>
 8002026:	4661      	mov	r1, ip
 8002028:	2c1f      	cmp	r4, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x43e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_dsub+0x5da>
 800202e:	2520      	movs	r5, #32
 8002030:	001e      	movs	r6, r3
 8002032:	1b2d      	subs	r5, r5, r4
 8002034:	464c      	mov	r4, r9
 8002036:	40ab      	lsls	r3, r5
 8002038:	40ac      	lsls	r4, r5
 800203a:	40ce      	lsrs	r6, r1
 800203c:	1e5d      	subs	r5, r3, #1
 800203e:	41ab      	sbcs	r3, r5
 8002040:	4334      	orrs	r4, r6
 8002042:	4323      	orrs	r3, r4
 8002044:	464c      	mov	r4, r9
 8002046:	40cc      	lsrs	r4, r1
 8002048:	1b3f      	subs	r7, r7, r4
 800204a:	e045      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 800204c:	464a      	mov	r2, r9
 800204e:	1a1c      	subs	r4, r3, r0
 8002050:	1bd1      	subs	r1, r2, r7
 8002052:	42a3      	cmp	r3, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	4252      	negs	r2, r2
 8002058:	4692      	mov	sl, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4651      	mov	r1, sl
 800205e:	1a52      	subs	r2, r2, r1
 8002060:	4692      	mov	sl, r2
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	d500      	bpl.n	8002068 <__aeabi_dsub+0x478>
 8002066:	e083      	b.n	8002170 <__aeabi_dsub+0x580>
 8002068:	4653      	mov	r3, sl
 800206a:	4323      	orrs	r3, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x480>
 800206e:	e621      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	e753      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002076:	181c      	adds	r4, r3, r0
 8002078:	429c      	cmp	r4, r3
 800207a:	419b      	sbcs	r3, r3
 800207c:	444f      	add	r7, r9
 800207e:	46ba      	mov	sl, r7
 8002080:	425b      	negs	r3, r3
 8002082:	449a      	add	sl, r3
 8002084:	4653      	mov	r3, sl
 8002086:	2601      	movs	r6, #1
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x49e>
 800208c:	e73a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800208e:	2602      	movs	r6, #2
 8002090:	4652      	mov	r2, sl
 8002092:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002094:	2101      	movs	r1, #1
 8002096:	401a      	ands	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	4021      	ands	r1, r4
 800209c:	0862      	lsrs	r2, r4, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	07dc      	lsls	r4, r3, #31
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	469a      	mov	sl, r3
 80020a6:	4314      	orrs	r4, r2
 80020a8:	e62c      	b.n	8001d04 <__aeabi_dsub+0x114>
 80020aa:	0039      	movs	r1, r7
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d1      	lsrs	r1, r2
 80020b0:	4662      	mov	r2, ip
 80020b2:	2a20      	cmp	r2, #32
 80020b4:	d006      	beq.n	80020c4 <__aeabi_dsub+0x4d4>
 80020b6:	4664      	mov	r4, ip
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	1b12      	subs	r2, r2, r4
 80020bc:	003c      	movs	r4, r7
 80020be:	4094      	lsls	r4, r2
 80020c0:	4304      	orrs	r4, r0
 80020c2:	9401      	str	r4, [sp, #4]
 80020c4:	9c01      	ldr	r4, [sp, #4]
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	e5e3      	b.n	8001c96 <__aeabi_dsub+0xa6>
 80020ce:	4649      	mov	r1, r9
 80020d0:	4319      	orrs	r1, r3
 80020d2:	000b      	movs	r3, r1
 80020d4:	1e5c      	subs	r4, r3, #1
 80020d6:	41a3      	sbcs	r3, r4
 80020d8:	1ac4      	subs	r4, r0, r3
 80020da:	42a0      	cmp	r0, r4
 80020dc:	419b      	sbcs	r3, r3
 80020de:	425b      	negs	r3, r3
 80020e0:	1afb      	subs	r3, r7, r3
 80020e2:	469a      	mov	sl, r3
 80020e4:	465d      	mov	r5, fp
 80020e6:	0016      	movs	r6, r2
 80020e8:	e5dc      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 80020ea:	4649      	mov	r1, r9
 80020ec:	4319      	orrs	r1, r3
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x502>
 80020f0:	e0ae      	b.n	8002250 <__aeabi_dsub+0x660>
 80020f2:	4661      	mov	r1, ip
 80020f4:	4664      	mov	r4, ip
 80020f6:	3901      	subs	r1, #1
 80020f8:	2c01      	cmp	r4, #1
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x50e>
 80020fc:	e0e0      	b.n	80022c0 <__aeabi_dsub+0x6d0>
 80020fe:	4c77      	ldr	r4, [pc, #476]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002100:	45a4      	cmp	ip, r4
 8002102:	d056      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 8002104:	468c      	mov	ip, r1
 8002106:	e69a      	b.n	8001e3e <__aeabi_dsub+0x24e>
 8002108:	4661      	mov	r1, ip
 800210a:	2220      	movs	r2, #32
 800210c:	003c      	movs	r4, r7
 800210e:	1a52      	subs	r2, r2, r1
 8002110:	4094      	lsls	r4, r2
 8002112:	0001      	movs	r1, r0
 8002114:	4090      	lsls	r0, r2
 8002116:	46a0      	mov	r8, r4
 8002118:	4664      	mov	r4, ip
 800211a:	1e42      	subs	r2, r0, #1
 800211c:	4190      	sbcs	r0, r2
 800211e:	4662      	mov	r2, ip
 8002120:	40e1      	lsrs	r1, r4
 8002122:	4644      	mov	r4, r8
 8002124:	40d7      	lsrs	r7, r2
 8002126:	430c      	orrs	r4, r1
 8002128:	4304      	orrs	r4, r0
 800212a:	44b9      	add	r9, r7
 800212c:	e701      	b.n	8001f32 <__aeabi_dsub+0x342>
 800212e:	496b      	ldr	r1, [pc, #428]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002130:	428a      	cmp	r2, r1
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x546>
 8002134:	e70c      	b.n	8001f50 <__aeabi_dsub+0x360>
 8002136:	1818      	adds	r0, r3, r0
 8002138:	4298      	cmp	r0, r3
 800213a:	419b      	sbcs	r3, r3
 800213c:	444f      	add	r7, r9
 800213e:	425b      	negs	r3, r3
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	07dc      	lsls	r4, r3, #31
 8002144:	0840      	lsrs	r0, r0, #1
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	469a      	mov	sl, r3
 800214a:	0016      	movs	r6, r2
 800214c:	4304      	orrs	r4, r0
 800214e:	e6d9      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d000      	beq.n	8002156 <__aeabi_dsub+0x566>
 8002154:	e081      	b.n	800225a <__aeabi_dsub+0x66a>
 8002156:	003b      	movs	r3, r7
 8002158:	4303      	orrs	r3, r0
 800215a:	d11d      	bne.n	8002198 <__aeabi_dsub+0x5a8>
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2500      	movs	r5, #0
 8002160:	0312      	lsls	r2, r2, #12
 8002162:	e70b      	b.n	8001f7c <__aeabi_dsub+0x38c>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	077b      	lsls	r3, r7, #29
 8002168:	465d      	mov	r5, fp
 800216a:	4303      	orrs	r3, r0
 800216c:	08fa      	lsrs	r2, r7, #3
 800216e:	e6d3      	b.n	8001f18 <__aeabi_dsub+0x328>
 8002170:	1ac4      	subs	r4, r0, r3
 8002172:	42a0      	cmp	r0, r4
 8002174:	4180      	sbcs	r0, r0
 8002176:	464b      	mov	r3, r9
 8002178:	4240      	negs	r0, r0
 800217a:	1aff      	subs	r7, r7, r3
 800217c:	1a3b      	subs	r3, r7, r0
 800217e:	469a      	mov	sl, r3
 8002180:	465d      	mov	r5, fp
 8002182:	e597      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002184:	1a1c      	subs	r4, r3, r0
 8002186:	464a      	mov	r2, r9
 8002188:	42a3      	cmp	r3, r4
 800218a:	419b      	sbcs	r3, r3
 800218c:	1bd7      	subs	r7, r2, r7
 800218e:	425b      	negs	r3, r3
 8002190:	1afb      	subs	r3, r7, r3
 8002192:	469a      	mov	sl, r3
 8002194:	2601      	movs	r6, #1
 8002196:	e585      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e6e7      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021a4:	464a      	mov	r2, r9
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	0752      	lsls	r2, r2, #29
 80021aa:	4313      	orrs	r3, r2
 80021ac:	464a      	mov	r2, r9
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	e6b5      	b.n	8001f1e <__aeabi_dsub+0x32e>
 80021b2:	08c0      	lsrs	r0, r0, #3
 80021b4:	077b      	lsls	r3, r7, #29
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6db      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021bc:	4649      	mov	r1, r9
 80021be:	4319      	orrs	r1, r3
 80021c0:	000b      	movs	r3, r1
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	418b      	sbcs	r3, r1
 80021c6:	001c      	movs	r4, r3
 80021c8:	e653      	b.n	8001e72 <__aeabi_dsub+0x282>
 80021ca:	464d      	mov	r5, r9
 80021cc:	3c20      	subs	r4, #32
 80021ce:	40e5      	lsrs	r5, r4
 80021d0:	2920      	cmp	r1, #32
 80021d2:	d005      	beq.n	80021e0 <__aeabi_dsub+0x5f0>
 80021d4:	2440      	movs	r4, #64	; 0x40
 80021d6:	1a64      	subs	r4, r4, r1
 80021d8:	4649      	mov	r1, r9
 80021da:	40a1      	lsls	r1, r4
 80021dc:	430b      	orrs	r3, r1
 80021de:	4698      	mov	r8, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	1e5c      	subs	r4, r3, #1
 80021e4:	41a3      	sbcs	r3, r4
 80021e6:	432b      	orrs	r3, r5
 80021e8:	e776      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d0e1      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 80021ee:	003a      	movs	r2, r7
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x608>
 80021f6:	e6b8      	b.n	8001f6a <__aeabi_dsub+0x37a>
 80021f8:	464a      	mov	r2, r9
 80021fa:	0752      	lsls	r2, r2, #29
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	4313      	orrs	r3, r2
 8002200:	464a      	mov	r2, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	08d2      	lsrs	r2, r2, #3
 8002206:	4222      	tst	r2, r4
 8002208:	d007      	beq.n	800221a <__aeabi_dsub+0x62a>
 800220a:	08fe      	lsrs	r6, r7, #3
 800220c:	4226      	tst	r6, r4
 800220e:	d104      	bne.n	800221a <__aeabi_dsub+0x62a>
 8002210:	465d      	mov	r5, fp
 8002212:	0032      	movs	r2, r6
 8002214:	08c3      	lsrs	r3, r0, #3
 8002216:	077f      	lsls	r7, r7, #29
 8002218:	433b      	orrs	r3, r7
 800221a:	0f59      	lsrs	r1, r3, #29
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	0749      	lsls	r1, r1, #29
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	430b      	orrs	r3, r1
 8002224:	e6a6      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002226:	1ac4      	subs	r4, r0, r3
 8002228:	42a0      	cmp	r0, r4
 800222a:	4180      	sbcs	r0, r0
 800222c:	464b      	mov	r3, r9
 800222e:	4240      	negs	r0, r0
 8002230:	1aff      	subs	r7, r7, r3
 8002232:	1a3b      	subs	r3, r7, r0
 8002234:	469a      	mov	sl, r3
 8002236:	465d      	mov	r5, fp
 8002238:	2601      	movs	r6, #1
 800223a:	e533      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 800223c:	003b      	movs	r3, r7
 800223e:	4303      	orrs	r3, r0
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x654>
 8002242:	e715      	b.n	8002070 <__aeabi_dsub+0x480>
 8002244:	08c0      	lsrs	r0, r0, #3
 8002246:	077b      	lsls	r3, r7, #29
 8002248:	465d      	mov	r5, fp
 800224a:	4303      	orrs	r3, r0
 800224c:	08fa      	lsrs	r2, r7, #3
 800224e:	e666      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	077b      	lsls	r3, r7, #29
 8002254:	4303      	orrs	r3, r0
 8002256:	08fa      	lsrs	r2, r7, #3
 8002258:	e65e      	b.n	8001f18 <__aeabi_dsub+0x328>
 800225a:	003a      	movs	r2, r7
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4302      	orrs	r2, r0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x674>
 8002262:	e682      	b.n	8001f6a <__aeabi_dsub+0x37a>
 8002264:	464a      	mov	r2, r9
 8002266:	0752      	lsls	r2, r2, #29
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	4313      	orrs	r3, r2
 800226c:	464a      	mov	r2, r9
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	4222      	tst	r2, r4
 8002274:	d007      	beq.n	8002286 <__aeabi_dsub+0x696>
 8002276:	08fe      	lsrs	r6, r7, #3
 8002278:	4226      	tst	r6, r4
 800227a:	d104      	bne.n	8002286 <__aeabi_dsub+0x696>
 800227c:	465d      	mov	r5, fp
 800227e:	0032      	movs	r2, r6
 8002280:	08c3      	lsrs	r3, r0, #3
 8002282:	077f      	lsls	r7, r7, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	0f59      	lsrs	r1, r3, #29
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	e670      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002292:	08c0      	lsrs	r0, r0, #3
 8002294:	077b      	lsls	r3, r7, #29
 8002296:	4303      	orrs	r3, r0
 8002298:	08fa      	lsrs	r2, r7, #3
 800229a:	e640      	b.n	8001f1e <__aeabi_dsub+0x32e>
 800229c:	464c      	mov	r4, r9
 800229e:	3920      	subs	r1, #32
 80022a0:	40cc      	lsrs	r4, r1
 80022a2:	4661      	mov	r1, ip
 80022a4:	2920      	cmp	r1, #32
 80022a6:	d006      	beq.n	80022b6 <__aeabi_dsub+0x6c6>
 80022a8:	4666      	mov	r6, ip
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	1b89      	subs	r1, r1, r6
 80022ae:	464e      	mov	r6, r9
 80022b0:	408e      	lsls	r6, r1
 80022b2:	4333      	orrs	r3, r6
 80022b4:	4698      	mov	r8, r3
 80022b6:	4643      	mov	r3, r8
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	418b      	sbcs	r3, r1
 80022bc:	431c      	orrs	r4, r3
 80022be:	e5d8      	b.n	8001e72 <__aeabi_dsub+0x282>
 80022c0:	181c      	adds	r4, r3, r0
 80022c2:	4284      	cmp	r4, r0
 80022c4:	4180      	sbcs	r0, r0
 80022c6:	444f      	add	r7, r9
 80022c8:	46ba      	mov	sl, r7
 80022ca:	4240      	negs	r0, r0
 80022cc:	4482      	add	sl, r0
 80022ce:	e6d9      	b.n	8002084 <__aeabi_dsub+0x494>
 80022d0:	4653      	mov	r3, sl
 80022d2:	4323      	orrs	r3, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x6e8>
 80022d6:	e6cb      	b.n	8002070 <__aeabi_dsub+0x480>
 80022d8:	e614      	b.n	8001f04 <__aeabi_dsub+0x314>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000007ff 	.word	0x000007ff
 80022e0:	ff7fffff 	.word	0xff7fffff
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	2300      	movs	r3, #0
 80022ea:	4a01      	ldr	r2, [pc, #4]	; (80022f0 <__aeabi_dsub+0x700>)
 80022ec:	001c      	movs	r4, r3
 80022ee:	e529      	b.n	8001d44 <__aeabi_dsub+0x154>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dcmpun>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0005      	movs	r5, r0
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <__aeabi_dcmpun+0x38>)
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	0016      	movs	r6, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	0d49      	lsrs	r1, r1, #21
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d5b      	lsrs	r3, r3, #21
 800230c:	4281      	cmp	r1, r0
 800230e:	d008      	beq.n	8002322 <__aeabi_dcmpun+0x2e>
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <__aeabi_dcmpun+0x38>)
 8002312:	2000      	movs	r0, #0
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002318:	0020      	movs	r0, r4
 800231a:	4330      	orrs	r0, r6
 800231c:	1e43      	subs	r3, r0, #1
 800231e:	4198      	sbcs	r0, r3
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	2001      	movs	r0, #1
 8002324:	432a      	orrs	r2, r5
 8002326:	d1fb      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002328:	e7f2      	b.n	8002310 <__aeabi_dcmpun+0x1c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff

08002330 <__aeabi_d2iz>:
 8002330:	000a      	movs	r2, r1
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	4c13      	ldr	r4, [pc, #76]	; (8002384 <__aeabi_d2iz+0x54>)
 8002336:	0053      	lsls	r3, r2, #1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	0005      	movs	r5, r0
 800233c:	0b09      	lsrs	r1, r1, #12
 800233e:	2000      	movs	r0, #0
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	0fd2      	lsrs	r2, r2, #31
 8002344:	42a3      	cmp	r3, r4
 8002346:	dd04      	ble.n	8002352 <__aeabi_d2iz+0x22>
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <__aeabi_d2iz+0x58>)
 800234a:	4283      	cmp	r3, r0
 800234c:	dd02      	ble.n	8002354 <__aeabi_d2iz+0x24>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_d2iz+0x5c>)
 8002350:	18d0      	adds	r0, r2, r3
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	0340      	lsls	r0, r0, #13
 8002358:	4301      	orrs	r1, r0
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <__aeabi_d2iz+0x60>)
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	281f      	cmp	r0, #31
 8002360:	dd08      	ble.n	8002374 <__aeabi_d2iz+0x44>
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <__aeabi_d2iz+0x64>)
 8002364:	1ac3      	subs	r3, r0, r3
 8002366:	40d9      	lsrs	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	4258      	negs	r0, r3
 800236c:	2a00      	cmp	r2, #0
 800236e:	d1f0      	bne.n	8002352 <__aeabi_d2iz+0x22>
 8002370:	0018      	movs	r0, r3
 8002372:	e7ee      	b.n	8002352 <__aeabi_d2iz+0x22>
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <__aeabi_d2iz+0x68>)
 8002376:	40c5      	lsrs	r5, r0
 8002378:	46a4      	mov	ip, r4
 800237a:	4463      	add	r3, ip
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	432b      	orrs	r3, r5
 8002382:	e7f2      	b.n	800236a <__aeabi_d2iz+0x3a>
 8002384:	000003fe 	.word	0x000003fe
 8002388:	0000041d 	.word	0x0000041d
 800238c:	7fffffff 	.word	0x7fffffff
 8002390:	00000433 	.word	0x00000433
 8002394:	00000413 	.word	0x00000413
 8002398:	fffffbed 	.word	0xfffffbed

0800239c <__aeabi_i2d>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2800      	cmp	r0, #0
 80023a0:	d016      	beq.n	80023d0 <__aeabi_i2d+0x34>
 80023a2:	17c3      	asrs	r3, r0, #31
 80023a4:	18c5      	adds	r5, r0, r3
 80023a6:	405d      	eors	r5, r3
 80023a8:	0fc4      	lsrs	r4, r0, #31
 80023aa:	0028      	movs	r0, r5
 80023ac:	f000 f8d2 	bl	8002554 <__clzsi2>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <__aeabi_i2d+0x5c>)
 80023b2:	1a1b      	subs	r3, r3, r0
 80023b4:	280a      	cmp	r0, #10
 80023b6:	dc16      	bgt.n	80023e6 <__aeabi_i2d+0x4a>
 80023b8:	0002      	movs	r2, r0
 80023ba:	002e      	movs	r6, r5
 80023bc:	3215      	adds	r2, #21
 80023be:	4096      	lsls	r6, r2
 80023c0:	220b      	movs	r2, #11
 80023c2:	1a12      	subs	r2, r2, r0
 80023c4:	40d5      	lsrs	r5, r2
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	e003      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023d0:	2400      	movs	r4, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	2500      	movs	r5, #0
 80023d6:	2600      	movs	r6, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	432b      	orrs	r3, r5
 80023dc:	07e4      	lsls	r4, r4, #31
 80023de:	4323      	orrs	r3, r4
 80023e0:	0030      	movs	r0, r6
 80023e2:	0019      	movs	r1, r3
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	380b      	subs	r0, #11
 80023e8:	4085      	lsls	r5, r0
 80023ea:	055b      	lsls	r3, r3, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	2600      	movs	r6, #0
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	e7f0      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0000041e 	.word	0x0000041e

080023fc <__aeabi_ui2d>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e04      	subs	r4, r0, #0
 8002400:	d010      	beq.n	8002424 <__aeabi_ui2d+0x28>
 8002402:	f000 f8a7 	bl	8002554 <__clzsi2>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <__aeabi_ui2d+0x48>)
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	280a      	cmp	r0, #10
 800240c:	dc11      	bgt.n	8002432 <__aeabi_ui2d+0x36>
 800240e:	220b      	movs	r2, #11
 8002410:	0021      	movs	r1, r4
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d1      	lsrs	r1, r2
 8002416:	3015      	adds	r0, #21
 8002418:	030a      	lsls	r2, r1, #12
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4084      	lsls	r4, r0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e001      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	4313      	orrs	r3, r2
 800242c:	0020      	movs	r0, r4
 800242e:	0019      	movs	r1, r3
 8002430:	bd10      	pop	{r4, pc}
 8002432:	0022      	movs	r2, r4
 8002434:	380b      	subs	r0, #11
 8002436:	4082      	lsls	r2, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	2400      	movs	r4, #0
 800243e:	0b12      	lsrs	r2, r2, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	e7f1      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_d2f>:
 8002448:	0002      	movs	r2, r0
 800244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244c:	004b      	lsls	r3, r1, #1
 800244e:	030d      	lsls	r5, r1, #12
 8002450:	0f40      	lsrs	r0, r0, #29
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	0fcc      	lsrs	r4, r1, #31
 8002456:	0a6d      	lsrs	r5, r5, #9
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <__aeabi_d2f+0xfc>)
 800245a:	4305      	orrs	r5, r0
 800245c:	1c58      	adds	r0, r3, #1
 800245e:	00d7      	lsls	r7, r2, #3
 8002460:	4208      	tst	r0, r1
 8002462:	d00a      	beq.n	800247a <__aeabi_d2f+0x32>
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <__aeabi_d2f+0x100>)
 8002466:	1859      	adds	r1, r3, r1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	dd16      	ble.n	800249a <__aeabi_d2f+0x52>
 800246c:	20ff      	movs	r0, #255	; 0xff
 800246e:	2200      	movs	r2, #0
 8002470:	05c0      	lsls	r0, r0, #23
 8002472:	4310      	orrs	r0, r2
 8002474:	07e4      	lsls	r4, r4, #31
 8002476:	4320      	orrs	r0, r4
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <__aeabi_d2f+0x44>
 800247e:	433d      	orrs	r5, r7
 8002480:	d026      	beq.n	80024d0 <__aeabi_d2f+0x88>
 8002482:	2205      	movs	r2, #5
 8002484:	0192      	lsls	r2, r2, #6
 8002486:	0a52      	lsrs	r2, r2, #9
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	e7f1      	b.n	8002470 <__aeabi_d2f+0x28>
 800248c:	432f      	orrs	r7, r5
 800248e:	d0ed      	beq.n	800246c <__aeabi_d2f+0x24>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	03d2      	lsls	r2, r2, #15
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	432a      	orrs	r2, r5
 8002498:	e7ea      	b.n	8002470 <__aeabi_d2f+0x28>
 800249a:	2900      	cmp	r1, #0
 800249c:	dd1b      	ble.n	80024d6 <__aeabi_d2f+0x8e>
 800249e:	0192      	lsls	r2, r2, #6
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	4182      	sbcs	r2, r0
 80024a4:	00ed      	lsls	r5, r5, #3
 80024a6:	0f7f      	lsrs	r7, r7, #29
 80024a8:	432a      	orrs	r2, r5
 80024aa:	433a      	orrs	r2, r7
 80024ac:	0753      	lsls	r3, r2, #29
 80024ae:	d047      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024b0:	230f      	movs	r3, #15
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d000      	beq.n	80024ba <__aeabi_d2f+0x72>
 80024b8:	3204      	adds	r2, #4
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	04db      	lsls	r3, r3, #19
 80024be:	4013      	ands	r3, r2
 80024c0:	d03e      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024c2:	1c48      	adds	r0, r1, #1
 80024c4:	29fe      	cmp	r1, #254	; 0xfe
 80024c6:	d0d1      	beq.n	800246c <__aeabi_d2f+0x24>
 80024c8:	0192      	lsls	r2, r2, #6
 80024ca:	0a52      	lsrs	r2, r2, #9
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	e7cf      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d0:	2000      	movs	r0, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	e7cc      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d6:	000a      	movs	r2, r1
 80024d8:	3217      	adds	r2, #23
 80024da:	db2f      	blt.n	800253c <__aeabi_d2f+0xf4>
 80024dc:	2680      	movs	r6, #128	; 0x80
 80024de:	0436      	lsls	r6, r6, #16
 80024e0:	432e      	orrs	r6, r5
 80024e2:	251e      	movs	r5, #30
 80024e4:	1a6d      	subs	r5, r5, r1
 80024e6:	2d1f      	cmp	r5, #31
 80024e8:	dd11      	ble.n	800250e <__aeabi_d2f+0xc6>
 80024ea:	2202      	movs	r2, #2
 80024ec:	4252      	negs	r2, r2
 80024ee:	1a52      	subs	r2, r2, r1
 80024f0:	0031      	movs	r1, r6
 80024f2:	40d1      	lsrs	r1, r2
 80024f4:	2d20      	cmp	r5, #32
 80024f6:	d004      	beq.n	8002502 <__aeabi_d2f+0xba>
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <__aeabi_d2f+0x104>)
 80024fa:	4694      	mov	ip, r2
 80024fc:	4463      	add	r3, ip
 80024fe:	409e      	lsls	r6, r3
 8002500:	4337      	orrs	r7, r6
 8002502:	003a      	movs	r2, r7
 8002504:	1e53      	subs	r3, r2, #1
 8002506:	419a      	sbcs	r2, r3
 8002508:	430a      	orrs	r2, r1
 800250a:	2100      	movs	r1, #0
 800250c:	e7ce      	b.n	80024ac <__aeabi_d2f+0x64>
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <__aeabi_d2f+0x108>)
 8002510:	0038      	movs	r0, r7
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	4098      	lsls	r0, r3
 8002518:	003a      	movs	r2, r7
 800251a:	1e41      	subs	r1, r0, #1
 800251c:	4188      	sbcs	r0, r1
 800251e:	409e      	lsls	r6, r3
 8002520:	40ea      	lsrs	r2, r5
 8002522:	4330      	orrs	r0, r6
 8002524:	4302      	orrs	r2, r0
 8002526:	2100      	movs	r1, #0
 8002528:	0753      	lsls	r3, r2, #29
 800252a:	d1c1      	bne.n	80024b0 <__aeabi_d2f+0x68>
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0013      	movs	r3, r2
 8002530:	04c9      	lsls	r1, r1, #19
 8002532:	2001      	movs	r0, #1
 8002534:	400b      	ands	r3, r1
 8002536:	420a      	tst	r2, r1
 8002538:	d1c6      	bne.n	80024c8 <__aeabi_d2f+0x80>
 800253a:	e7a3      	b.n	8002484 <__aeabi_d2f+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	e7a0      	b.n	8002482 <__aeabi_d2f+0x3a>
 8002540:	000b      	movs	r3, r1
 8002542:	e79f      	b.n	8002484 <__aeabi_d2f+0x3c>
 8002544:	000007fe 	.word	0x000007fe
 8002548:	fffffc80 	.word	0xfffffc80
 800254c:	fffffca2 	.word	0xfffffca2
 8002550:	fffffc82 	.word	0xfffffc82

08002554 <__clzsi2>:
 8002554:	211c      	movs	r1, #28
 8002556:	2301      	movs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	4298      	cmp	r0, r3
 800255c:	d301      	bcc.n	8002562 <__clzsi2+0xe>
 800255e:	0c00      	lsrs	r0, r0, #16
 8002560:	3910      	subs	r1, #16
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	4298      	cmp	r0, r3
 8002566:	d301      	bcc.n	800256c <__clzsi2+0x18>
 8002568:	0a00      	lsrs	r0, r0, #8
 800256a:	3908      	subs	r1, #8
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	4298      	cmp	r0, r3
 8002570:	d301      	bcc.n	8002576 <__clzsi2+0x22>
 8002572:	0900      	lsrs	r0, r0, #4
 8002574:	3904      	subs	r1, #4
 8002576:	a202      	add	r2, pc, #8	; (adr r2, 8002580 <__clzsi2+0x2c>)
 8002578:	5c10      	ldrb	r0, [r2, r0]
 800257a:	1840      	adds	r0, r0, r1
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	02020304 	.word	0x02020304
 8002584:	01010101 	.word	0x01010101
	...

08002590 <__clzdi2>:
 8002590:	b510      	push	{r4, lr}
 8002592:	2900      	cmp	r1, #0
 8002594:	d103      	bne.n	800259e <__clzdi2+0xe>
 8002596:	f7ff ffdd 	bl	8002554 <__clzsi2>
 800259a:	3020      	adds	r0, #32
 800259c:	e002      	b.n	80025a4 <__clzdi2+0x14>
 800259e:	0008      	movs	r0, r1
 80025a0:	f7ff ffd8 	bl	8002554 <__clzsi2>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025ae:	f001 f81f 	bl	80035f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b2:	f000 f8dd 	bl	8002770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025b6:	f000 fb19 	bl	8002bec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80025ba:	f000 fa95 	bl	8002ae8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80025be:	f000 fa45 	bl	8002a4c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80025c2:	f000 fadf 	bl	8002b84 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80025c6:	f000 f91f 	bl	8002808 <MX_I2C1_Init>
  MX_TIM6_Init();
 80025ca:	f000 fa01 	bl	80029d0 <MX_TIM6_Init>
  MX_RTC_Init();
 80025ce:	f000 f95b 	bl	8002888 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit ( &huart2 , (uint8_t*) hello , strlen (hello) , UART_TIMEOUT ) ;
 80025d2:	4b52      	ldr	r3, [pc, #328]	; (800271c <main+0x174>)
 80025d4:	681c      	ldr	r4, [r3, #0]
 80025d6:	4b51      	ldr	r3, [pc, #324]	; (800271c <main+0x174>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	0018      	movs	r0, r3
 80025dc:	f7fd fd92 	bl	8000104 <strlen>
 80025e0:	0003      	movs	r3, r0
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	23fa      	movs	r3, #250	; 0xfa
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	484d      	ldr	r0, [pc, #308]	; (8002720 <main+0x178>)
 80025ea:	0021      	movs	r1, r4
 80025ec:	f003 fcda 	bl	8005fa4 <HAL_UART_Transmit>

  is_system_already_initialized = is_system_initialized () ;
 80025f0:	f000 fc8a 	bl	8002f08 <is_system_initialized>
 80025f4:	0003      	movs	r3, r0
 80025f6:	001a      	movs	r2, r3
 80025f8:	4b4a      	ldr	r3, [pc, #296]	; (8002724 <main+0x17c>)
 80025fa:	701a      	strb	r2, [r3, #0]
  if ( !my_astro_init () )
 80025fc:	f006 f8d0 	bl	80087a0 <my_astro_init>
 8002600:	0003      	movs	r3, r0
 8002602:	001a      	movs	r2, r3
 8002604:	2301      	movs	r3, #1
 8002606:	4053      	eors	r3, r2
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <main+0x6a>
  {
	  HAL_NVIC_SystemReset () ;
 800260e:	f001 f97c 	bl	800390a <HAL_NVIC_SystemReset>
  }

  astro_geo_wr_latitude = 0 ;
 8002612:	4b45      	ldr	r3, [pc, #276]	; (8002728 <main+0x180>)
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
  astro_geo_wr_longitude = 0 ;
 8002618:	4b44      	ldr	r3, [pc, #272]	; (800272c <main+0x184>)
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
  if ( my_lx6_get_coordinates ( my_lx6_gnss_max_active_time , nmea_pdop_ths , &nmea_fixed_pdop_d , &astro_geo_wr_latitude , &astro_geo_wr_longitude ) )
 800261e:	4b44      	ldr	r3, [pc, #272]	; (8002730 <main+0x188>)
 8002620:	8818      	ldrh	r0, [r3, #0]
 8002622:	4b44      	ldr	r3, [pc, #272]	; (8002734 <main+0x18c>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	4940      	ldr	r1, [pc, #256]	; (800272c <main+0x184>)
 800262a:	9102      	str	r1, [sp, #8]
 800262c:	493e      	ldr	r1, [pc, #248]	; (8002728 <main+0x180>)
 800262e:	9101      	str	r1, [sp, #4]
 8002630:	4941      	ldr	r1, [pc, #260]	; (8002738 <main+0x190>)
 8002632:	9100      	str	r1, [sp, #0]
 8002634:	f006 f982 	bl	800893c <my_lx6_get_coordinates>
 8002638:	1e03      	subs	r3, r0, #0
 800263a:	d023      	beq.n	8002684 <main+0xdc>
  {
	  my_astro_write_coordinates ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 800263c:	4b3a      	ldr	r3, [pc, #232]	; (8002728 <main+0x180>)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	4b3a      	ldr	r3, [pc, #232]	; (800272c <main+0x184>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	0019      	movs	r1, r3
 8002646:	0010      	movs	r0, r2
 8002648:	f006 f968 	bl	800891c <my_astro_write_coordinates>
	  get_my_rtc_time ( rtc_dt ) ;
 800264c:	4b3b      	ldr	r3, [pc, #236]	; (800273c <main+0x194>)
 800264e:	0018      	movs	r0, r3
 8002650:	f006 fb74 	bl	8008d3c <get_my_rtc_time>
	  send_debug_logs ( rtc_dt ) ;
 8002654:	4b39      	ldr	r3, [pc, #228]	; (800273c <main+0x194>)
 8002656:	0018      	movs	r0, r3
 8002658:	f000 fb56 	bl	8002d08 <send_debug_logs>
	  if ( nmea_fixed_pdop_d < 100.0 )
 800265c:	4b36      	ldr	r3, [pc, #216]	; (8002738 <main+0x190>)
 800265e:	6818      	ldr	r0, [r3, #0]
 8002660:	6859      	ldr	r1, [r3, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	4b36      	ldr	r3, [pc, #216]	; (8002740 <main+0x198>)
 8002666:	f7fd fef5 	bl	8000454 <__aeabi_dcmplt>
 800266a:	1e03      	subs	r3, r0, #0
 800266c:	d00a      	beq.n	8002684 <main+0xdc>
	  {
		  snprintf ( nmea_fixed_pdop_s , NMEA_FIX_PDOP_STRING_BUFF_SIZE , "%.1f", nmea_fixed_pdop_d );
 800266e:	4b32      	ldr	r3, [pc, #200]	; (8002738 <main+0x190>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	4933      	ldr	r1, [pc, #204]	; (8002744 <main+0x19c>)
 8002676:	4834      	ldr	r0, [pc, #208]	; (8002748 <main+0x1a0>)
 8002678:	9200      	str	r2, [sp, #0]
 800267a:	9301      	str	r3, [sp, #4]
 800267c:	000a      	movs	r2, r1
 800267e:	2105      	movs	r1, #5
 8002680:	f008 f9cc 	bl	800aa1c <snprintf>
	  }
  }
  agg_tim_seconds = agg_tim_seconds + tim_seconds  ;
 8002684:	4b31      	ldr	r3, [pc, #196]	; (800274c <main+0x1a4>)
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	001a      	movs	r2, r3
 800268a:	4b31      	ldr	r3, [pc, #196]	; (8002750 <main+0x1a8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	18d2      	adds	r2, r2, r3
 8002690:	4b2f      	ldr	r3, [pc, #188]	; (8002750 <main+0x1a8>)
 8002692:	601a      	str	r2, [r3, #0]
  sprintf ( payload , "%s,%d,%lu" , nmea_fixed_pdop_s , tim_seconds , agg_tim_seconds ) ;
 8002694:	4b2d      	ldr	r3, [pc, #180]	; (800274c <main+0x1a4>)
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	001c      	movs	r4, r3
 800269a:	4b2d      	ldr	r3, [pc, #180]	; (8002750 <main+0x1a8>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a2a      	ldr	r2, [pc, #168]	; (8002748 <main+0x1a0>)
 80026a0:	492c      	ldr	r1, [pc, #176]	; (8002754 <main+0x1ac>)
 80026a2:	482d      	ldr	r0, [pc, #180]	; (8002758 <main+0x1b0>)
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	0023      	movs	r3, r4
 80026a8:	f008 f9ec 	bl	800aa84 <sprintf>
  sprintf ( astro_payload_log , "Astronode payload: %s" , payload ) ;
 80026ac:	4a2a      	ldr	r2, [pc, #168]	; (8002758 <main+0x1b0>)
 80026ae:	492b      	ldr	r1, [pc, #172]	; (800275c <main+0x1b4>)
 80026b0:	4b2b      	ldr	r3, [pc, #172]	; (8002760 <main+0x1b8>)
 80026b2:	0018      	movs	r0, r3
 80026b4:	f008 f9e6 	bl	800aa84 <sprintf>
  send_debug_logs ( astro_payload_log ) ;
 80026b8:	4b29      	ldr	r3, [pc, #164]	; (8002760 <main+0x1b8>)
 80026ba:	0018      	movs	r0, r3
 80026bc:	f000 fb24 	bl	8002d08 <send_debug_logs>
  my_astro_add_payload_2_queue ( payload ) ;
 80026c0:	4b25      	ldr	r3, [pc, #148]	; (8002758 <main+0x1b0>)
 80026c2:	0018      	movs	r0, r3
 80026c4:	f006 f8c2 	bl	800884c <my_astro_add_payload_2_queue>
  //HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  astro_log_loop_timer = get_systick () ;
 80026c8:	f000 fbac 	bl	8002e24 <get_systick>
 80026cc:	0002      	movs	r2, r0
 80026ce:	4b25      	ldr	r3, [pc, #148]	; (8002764 <main+0x1bc>)
 80026d0:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  if ( is_evt_pin_high() )
 80026d2:	f000 fb95 	bl	8002e00 <is_evt_pin_high>
 80026d6:	1e03      	subs	r3, r0, #0
 80026d8:	d001      	beq.n	80026de <main+0x136>
	  {
		  my_astro_read_evt_reg () ;
 80026da:	f006 f8df 	bl	800889c <my_astro_read_evt_reg>
	  }
	  if ( get_systick () - astro_log_loop_timer >  ASTRO_LOG_TIMER )
 80026de:	f000 fba1 	bl	8002e24 <get_systick>
 80026e2:	0002      	movs	r2, r0
 80026e4:	4b1f      	ldr	r3, [pc, #124]	; (8002764 <main+0x1bc>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	4a1f      	ldr	r2, [pc, #124]	; (8002768 <main+0x1c0>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d9f0      	bls.n	80026d2 <main+0x12a>
	  {
		  my_astro_log ();
 80026f0:	f006 f90a 	bl	8008908 <my_astro_log>
		  astro_log_loop_timer = get_systick () ;
 80026f4:	f000 fb96 	bl	8002e24 <get_systick>
 80026f8:	0002      	movs	r2, r0
 80026fa:	4b1a      	ldr	r3, [pc, #104]	; (8002764 <main+0x1bc>)
 80026fc:	601a      	str	r2, [r3, #0]
		  astronode_send_pld_er ( g_payload_id_counter , payload , strlen ( payload ) ) ;
 80026fe:	4b1b      	ldr	r3, [pc, #108]	; (800276c <main+0x1c4>)
 8002700:	881c      	ldrh	r4, [r3, #0]
 8002702:	4b15      	ldr	r3, [pc, #84]	; (8002758 <main+0x1b0>)
 8002704:	0018      	movs	r0, r3
 8002706:	f7fd fcfd 	bl	8000104 <strlen>
 800270a:	0003      	movs	r3, r0
 800270c:	b29a      	uxth	r2, r3
 800270e:	4b12      	ldr	r3, [pc, #72]	; (8002758 <main+0x1b0>)
 8002710:	0019      	movs	r1, r3
 8002712:	0020      	movs	r0, r4
 8002714:	f004 ff3e 	bl	8007594 <astronode_send_pld_er>
	  if ( is_evt_pin_high() )
 8002718:	e7db      	b.n	80026d2 <main+0x12a>
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	20000000 	.word	0x20000000
 8002720:	2000085c 	.word	0x2000085c
 8002724:	20000b09 	.word	0x20000b09
 8002728:	20000998 	.word	0x20000998
 800272c:	2000099c 	.word	0x2000099c
 8002730:	20000010 	.word	0x20000010
 8002734:	20000008 	.word	0x20000008
 8002738:	20000018 	.word	0x20000018
 800273c:	20000984 	.word	0x20000984
 8002740:	40590000 	.word	0x40590000
 8002744:	080116e8 	.word	0x080116e8
 8002748:	200009a0 	.word	0x200009a0
 800274c:	200009a6 	.word	0x200009a6
 8002750:	200009a8 	.word	0x200009a8
 8002754:	080116f0 	.word	0x080116f0
 8002758:	200009b4 	.word	0x200009b4
 800275c:	080116fc 	.word	0x080116fc
 8002760:	20000a54 	.word	0x20000a54
 8002764:	200009ac 	.word	0x200009ac
 8002768:	0000ea60 	.word	0x0000ea60
 800276c:	200009b0 	.word	0x200009b0

08002770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002770:	b590      	push	{r4, r7, lr}
 8002772:	b093      	sub	sp, #76	; 0x4c
 8002774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002776:	2410      	movs	r4, #16
 8002778:	193b      	adds	r3, r7, r4
 800277a:	0018      	movs	r0, r3
 800277c:	2338      	movs	r3, #56	; 0x38
 800277e:	001a      	movs	r2, r3
 8002780:	2100      	movs	r1, #0
 8002782:	f008 fa15 	bl	800abb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002786:	003b      	movs	r3, r7
 8002788:	0018      	movs	r0, r3
 800278a:	2310      	movs	r3, #16
 800278c:	001a      	movs	r2, r3
 800278e:	2100      	movs	r1, #0
 8002790:	f008 fa0e 	bl	800abb0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002794:	2380      	movs	r3, #128	; 0x80
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	0018      	movs	r0, r3
 800279a:	f001 fc63 	bl	8004064 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800279e:	193b      	adds	r3, r7, r4
 80027a0:	220a      	movs	r2, #10
 80027a2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027a4:	193b      	adds	r3, r7, r4
 80027a6:	2280      	movs	r2, #128	; 0x80
 80027a8:	0052      	lsls	r2, r2, #1
 80027aa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80027ac:	0021      	movs	r1, r4
 80027ae:	187b      	adds	r3, r7, r1
 80027b0:	2200      	movs	r2, #0
 80027b2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027b4:	187b      	adds	r3, r7, r1
 80027b6:	2240      	movs	r2, #64	; 0x40
 80027b8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80027ba:	187b      	adds	r3, r7, r1
 80027bc:	2201      	movs	r2, #1
 80027be:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80027c0:	187b      	adds	r3, r7, r1
 80027c2:	2200      	movs	r2, #0
 80027c4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027c6:	187b      	adds	r3, r7, r1
 80027c8:	0018      	movs	r0, r3
 80027ca:	f001 fc97 	bl	80040fc <HAL_RCC_OscConfig>
 80027ce:	1e03      	subs	r3, r0, #0
 80027d0:	d001      	beq.n	80027d6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80027d2:	f000 fbd7 	bl	8002f84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027d6:	003b      	movs	r3, r7
 80027d8:	2207      	movs	r2, #7
 80027da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80027dc:	003b      	movs	r3, r7
 80027de:	2200      	movs	r2, #0
 80027e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027e2:	003b      	movs	r3, r7
 80027e4:	2200      	movs	r2, #0
 80027e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027e8:	003b      	movs	r3, r7
 80027ea:	2200      	movs	r2, #0
 80027ec:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80027ee:	003b      	movs	r3, r7
 80027f0:	2100      	movs	r1, #0
 80027f2:	0018      	movs	r0, r3
 80027f4:	f001 ff9c 	bl	8004730 <HAL_RCC_ClockConfig>
 80027f8:	1e03      	subs	r3, r0, #0
 80027fa:	d001      	beq.n	8002800 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80027fc:	f000 fbc2 	bl	8002f84 <Error_Handler>
  }
}
 8002800:	46c0      	nop			; (mov r8, r8)
 8002802:	46bd      	mov	sp, r7
 8002804:	b013      	add	sp, #76	; 0x4c
 8002806:	bd90      	pop	{r4, r7, pc}

08002808 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800280c:	4b1b      	ldr	r3, [pc, #108]	; (800287c <MX_I2C1_Init+0x74>)
 800280e:	4a1c      	ldr	r2, [pc, #112]	; (8002880 <MX_I2C1_Init+0x78>)
 8002810:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8002812:	4b1a      	ldr	r3, [pc, #104]	; (800287c <MX_I2C1_Init+0x74>)
 8002814:	4a1b      	ldr	r2, [pc, #108]	; (8002884 <MX_I2C1_Init+0x7c>)
 8002816:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002818:	4b18      	ldr	r3, [pc, #96]	; (800287c <MX_I2C1_Init+0x74>)
 800281a:	2200      	movs	r2, #0
 800281c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800281e:	4b17      	ldr	r3, [pc, #92]	; (800287c <MX_I2C1_Init+0x74>)
 8002820:	2201      	movs	r2, #1
 8002822:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002824:	4b15      	ldr	r3, [pc, #84]	; (800287c <MX_I2C1_Init+0x74>)
 8002826:	2200      	movs	r2, #0
 8002828:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800282a:	4b14      	ldr	r3, [pc, #80]	; (800287c <MX_I2C1_Init+0x74>)
 800282c:	2200      	movs	r2, #0
 800282e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002830:	4b12      	ldr	r3, [pc, #72]	; (800287c <MX_I2C1_Init+0x74>)
 8002832:	2200      	movs	r2, #0
 8002834:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002836:	4b11      	ldr	r3, [pc, #68]	; (800287c <MX_I2C1_Init+0x74>)
 8002838:	2200      	movs	r2, #0
 800283a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800283c:	4b0f      	ldr	r3, [pc, #60]	; (800287c <MX_I2C1_Init+0x74>)
 800283e:	2200      	movs	r2, #0
 8002840:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002842:	4b0e      	ldr	r3, [pc, #56]	; (800287c <MX_I2C1_Init+0x74>)
 8002844:	0018      	movs	r0, r3
 8002846:	f001 fadf 	bl	8003e08 <HAL_I2C_Init>
 800284a:	1e03      	subs	r3, r0, #0
 800284c:	d001      	beq.n	8002852 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800284e:	f000 fb99 	bl	8002f84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002852:	4b0a      	ldr	r3, [pc, #40]	; (800287c <MX_I2C1_Init+0x74>)
 8002854:	2100      	movs	r1, #0
 8002856:	0018      	movs	r0, r3
 8002858:	f001 fb6c 	bl	8003f34 <HAL_I2CEx_ConfigAnalogFilter>
 800285c:	1e03      	subs	r3, r0, #0
 800285e:	d001      	beq.n	8002864 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002860:	f000 fb90 	bl	8002f84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002864:	4b05      	ldr	r3, [pc, #20]	; (800287c <MX_I2C1_Init+0x74>)
 8002866:	2100      	movs	r1, #0
 8002868:	0018      	movs	r0, r3
 800286a:	f001 fbaf 	bl	8003fcc <HAL_I2CEx_ConfigDigitalFilter>
 800286e:	1e03      	subs	r3, r0, #0
 8002870:	d001      	beq.n	8002876 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002872:	f000 fb87 	bl	8002f84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	200006fc 	.word	0x200006fc
 8002880:	40005400 	.word	0x40005400
 8002884:	00303d5b 	.word	0x00303d5b

08002888 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b090      	sub	sp, #64	; 0x40
 800288c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800288e:	232c      	movs	r3, #44	; 0x2c
 8002890:	18fb      	adds	r3, r7, r3
 8002892:	0018      	movs	r0, r3
 8002894:	2314      	movs	r3, #20
 8002896:	001a      	movs	r2, r3
 8002898:	2100      	movs	r1, #0
 800289a:	f008 f989 	bl	800abb0 <memset>
  RTC_DateTypeDef sDate = {0};
 800289e:	2328      	movs	r3, #40	; 0x28
 80028a0:	18fb      	adds	r3, r7, r3
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80028a6:	003b      	movs	r3, r7
 80028a8:	0018      	movs	r0, r3
 80028aa:	2328      	movs	r3, #40	; 0x28
 80028ac:	001a      	movs	r2, r3
 80028ae:	2100      	movs	r1, #0
 80028b0:	f008 f97e 	bl	800abb0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80028b4:	4b44      	ldr	r3, [pc, #272]	; (80029c8 <MX_RTC_Init+0x140>)
 80028b6:	4a45      	ldr	r2, [pc, #276]	; (80029cc <MX_RTC_Init+0x144>)
 80028b8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80028ba:	4b43      	ldr	r3, [pc, #268]	; (80029c8 <MX_RTC_Init+0x140>)
 80028bc:	2200      	movs	r2, #0
 80028be:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80028c0:	4b41      	ldr	r3, [pc, #260]	; (80029c8 <MX_RTC_Init+0x140>)
 80028c2:	227f      	movs	r2, #127	; 0x7f
 80028c4:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80028c6:	4b40      	ldr	r3, [pc, #256]	; (80029c8 <MX_RTC_Init+0x140>)
 80028c8:	22ff      	movs	r2, #255	; 0xff
 80028ca:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80028cc:	4b3e      	ldr	r3, [pc, #248]	; (80029c8 <MX_RTC_Init+0x140>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80028d2:	4b3d      	ldr	r3, [pc, #244]	; (80029c8 <MX_RTC_Init+0x140>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80028d8:	4b3b      	ldr	r3, [pc, #236]	; (80029c8 <MX_RTC_Init+0x140>)
 80028da:	2200      	movs	r2, #0
 80028dc:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80028de:	4b3a      	ldr	r3, [pc, #232]	; (80029c8 <MX_RTC_Init+0x140>)
 80028e0:	2280      	movs	r2, #128	; 0x80
 80028e2:	05d2      	lsls	r2, r2, #23
 80028e4:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80028e6:	4b38      	ldr	r3, [pc, #224]	; (80029c8 <MX_RTC_Init+0x140>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80028ec:	4b36      	ldr	r3, [pc, #216]	; (80029c8 <MX_RTC_Init+0x140>)
 80028ee:	0018      	movs	r0, r3
 80028f0:	f002 fa80 	bl	8004df4 <HAL_RTC_Init>
 80028f4:	1e03      	subs	r3, r0, #0
 80028f6:	d001      	beq.n	80028fc <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80028f8:	f000 fb44 	bl	8002f84 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80028fc:	212c      	movs	r1, #44	; 0x2c
 80028fe:	187b      	adds	r3, r7, r1
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002904:	187b      	adds	r3, r7, r1
 8002906:	2200      	movs	r2, #0
 8002908:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800290a:	187b      	adds	r3, r7, r1
 800290c:	2200      	movs	r2, #0
 800290e:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8002910:	187b      	adds	r3, r7, r1
 8002912:	2200      	movs	r2, #0
 8002914:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002916:	187b      	adds	r3, r7, r1
 8002918:	2200      	movs	r2, #0
 800291a:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800291c:	187b      	adds	r3, r7, r1
 800291e:	2200      	movs	r2, #0
 8002920:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002922:	1879      	adds	r1, r7, r1
 8002924:	4b28      	ldr	r3, [pc, #160]	; (80029c8 <MX_RTC_Init+0x140>)
 8002926:	2201      	movs	r2, #1
 8002928:	0018      	movs	r0, r3
 800292a:	f002 fb05 	bl	8004f38 <HAL_RTC_SetTime>
 800292e:	1e03      	subs	r3, r0, #0
 8002930:	d001      	beq.n	8002936 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8002932:	f000 fb27 	bl	8002f84 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8002936:	2128      	movs	r1, #40	; 0x28
 8002938:	187b      	adds	r3, r7, r1
 800293a:	2206      	movs	r2, #6
 800293c:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800293e:	187b      	adds	r3, r7, r1
 8002940:	2201      	movs	r2, #1
 8002942:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002944:	187b      	adds	r3, r7, r1
 8002946:	2201      	movs	r2, #1
 8002948:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x20;
 800294a:	187b      	adds	r3, r7, r1
 800294c:	2220      	movs	r2, #32
 800294e:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002950:	1879      	adds	r1, r7, r1
 8002952:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <MX_RTC_Init+0x140>)
 8002954:	2201      	movs	r2, #1
 8002956:	0018      	movs	r0, r3
 8002958:	f002 fbf2 	bl	8005140 <HAL_RTC_SetDate>
 800295c:	1e03      	subs	r3, r0, #0
 800295e:	d001      	beq.n	8002964 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8002960:	f000 fb10 	bl	8002f84 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002964:	003b      	movs	r3, r7
 8002966:	2200      	movs	r2, #0
 8002968:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800296a:	003b      	movs	r3, r7
 800296c:	2200      	movs	r2, #0
 800296e:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002970:	003b      	movs	r3, r7
 8002972:	2200      	movs	r2, #0
 8002974:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002976:	003b      	movs	r3, r7
 8002978:	2200      	movs	r2, #0
 800297a:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800297c:	003b      	movs	r3, r7
 800297e:	2200      	movs	r2, #0
 8002980:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002982:	003b      	movs	r3, r7
 8002984:	2200      	movs	r2, #0
 8002986:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002988:	003b      	movs	r3, r7
 800298a:	2200      	movs	r2, #0
 800298c:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800298e:	003b      	movs	r3, r7
 8002990:	2200      	movs	r2, #0
 8002992:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002994:	003b      	movs	r3, r7
 8002996:	2200      	movs	r2, #0
 8002998:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800299a:	003b      	movs	r3, r7
 800299c:	2220      	movs	r2, #32
 800299e:	2101      	movs	r1, #1
 80029a0:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80029a2:	003b      	movs	r3, r7
 80029a4:	2280      	movs	r2, #128	; 0x80
 80029a6:	0052      	lsls	r2, r2, #1
 80029a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80029aa:	0039      	movs	r1, r7
 80029ac:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <MX_RTC_Init+0x140>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	0018      	movs	r0, r3
 80029b2:	f002 fca5 	bl	8005300 <HAL_RTC_SetAlarm>
 80029b6:	1e03      	subs	r3, r0, #0
 80029b8:	d001      	beq.n	80029be <MX_RTC_Init+0x136>
  {
    Error_Handler();
 80029ba:	f000 fae3 	bl	8002f84 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b010      	add	sp, #64	; 0x40
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	20000750 	.word	0x20000750
 80029cc:	40002800 	.word	0x40002800

080029d0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029d6:	1d3b      	adds	r3, r7, #4
 80029d8:	0018      	movs	r0, r3
 80029da:	230c      	movs	r3, #12
 80029dc:	001a      	movs	r2, r3
 80029de:	2100      	movs	r1, #0
 80029e0:	f008 f8e6 	bl	800abb0 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80029e4:	4b15      	ldr	r3, [pc, #84]	; (8002a3c <MX_TIM6_Init+0x6c>)
 80029e6:	4a16      	ldr	r2, [pc, #88]	; (8002a40 <MX_TIM6_Init+0x70>)
 80029e8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 80029ea:	4b14      	ldr	r3, [pc, #80]	; (8002a3c <MX_TIM6_Init+0x6c>)
 80029ec:	4a15      	ldr	r2, [pc, #84]	; (8002a44 <MX_TIM6_Init+0x74>)
 80029ee:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029f0:	4b12      	ldr	r3, [pc, #72]	; (8002a3c <MX_TIM6_Init+0x6c>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80029f6:	4b11      	ldr	r3, [pc, #68]	; (8002a3c <MX_TIM6_Init+0x6c>)
 80029f8:	4a13      	ldr	r2, [pc, #76]	; (8002a48 <MX_TIM6_Init+0x78>)
 80029fa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029fc:	4b0f      	ldr	r3, [pc, #60]	; (8002a3c <MX_TIM6_Init+0x6c>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002a02:	4b0e      	ldr	r3, [pc, #56]	; (8002a3c <MX_TIM6_Init+0x6c>)
 8002a04:	0018      	movs	r0, r3
 8002a06:	f002 fefc 	bl	8005802 <HAL_TIM_Base_Init>
 8002a0a:	1e03      	subs	r3, r0, #0
 8002a0c:	d001      	beq.n	8002a12 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002a0e:	f000 fab9 	bl	8002f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a12:	1d3b      	adds	r3, r7, #4
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a18:	1d3b      	adds	r3, r7, #4
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002a1e:	1d3a      	adds	r2, r7, #4
 8002a20:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <MX_TIM6_Init+0x6c>)
 8002a22:	0011      	movs	r1, r2
 8002a24:	0018      	movs	r0, r3
 8002a26:	f003 f9a1 	bl	8005d6c <HAL_TIMEx_MasterConfigSynchronization>
 8002a2a:	1e03      	subs	r3, r0, #0
 8002a2c:	d001      	beq.n	8002a32 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002a2e:	f000 faa9 	bl	8002f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	46bd      	mov	sp, r7
 8002a36:	b004      	add	sp, #16
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	2000077c 	.word	0x2000077c
 8002a40:	40001000 	.word	0x40001000
 8002a44:	00003e7f 	.word	0x00003e7f
 8002a48:	000003e7 	.word	0x000003e7

08002a4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a50:	4b23      	ldr	r3, [pc, #140]	; (8002ae0 <MX_USART1_UART_Init+0x94>)
 8002a52:	4a24      	ldr	r2, [pc, #144]	; (8002ae4 <MX_USART1_UART_Init+0x98>)
 8002a54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002a56:	4b22      	ldr	r3, [pc, #136]	; (8002ae0 <MX_USART1_UART_Init+0x94>)
 8002a58:	2296      	movs	r2, #150	; 0x96
 8002a5a:	0192      	lsls	r2, r2, #6
 8002a5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a5e:	4b20      	ldr	r3, [pc, #128]	; (8002ae0 <MX_USART1_UART_Init+0x94>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a64:	4b1e      	ldr	r3, [pc, #120]	; (8002ae0 <MX_USART1_UART_Init+0x94>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ae0 <MX_USART1_UART_Init+0x94>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a70:	4b1b      	ldr	r3, [pc, #108]	; (8002ae0 <MX_USART1_UART_Init+0x94>)
 8002a72:	220c      	movs	r2, #12
 8002a74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a76:	4b1a      	ldr	r3, [pc, #104]	; (8002ae0 <MX_USART1_UART_Init+0x94>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a7c:	4b18      	ldr	r3, [pc, #96]	; (8002ae0 <MX_USART1_UART_Init+0x94>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a82:	4b17      	ldr	r3, [pc, #92]	; (8002ae0 <MX_USART1_UART_Init+0x94>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a88:	4b15      	ldr	r3, [pc, #84]	; (8002ae0 <MX_USART1_UART_Init+0x94>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a8e:	4b14      	ldr	r3, [pc, #80]	; (8002ae0 <MX_USART1_UART_Init+0x94>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a94:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <MX_USART1_UART_Init+0x94>)
 8002a96:	0018      	movs	r0, r3
 8002a98:	f003 f9ee 	bl	8005e78 <HAL_UART_Init>
 8002a9c:	1e03      	subs	r3, r0, #0
 8002a9e:	d001      	beq.n	8002aa4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002aa0:	f000 fa70 	bl	8002f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002aa4:	4b0e      	ldr	r3, [pc, #56]	; (8002ae0 <MX_USART1_UART_Init+0x94>)
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f004 f8bb 	bl	8006c24 <HAL_UARTEx_SetTxFifoThreshold>
 8002aae:	1e03      	subs	r3, r0, #0
 8002ab0:	d001      	beq.n	8002ab6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002ab2:	f000 fa67 	bl	8002f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ab6:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <MX_USART1_UART_Init+0x94>)
 8002ab8:	2100      	movs	r1, #0
 8002aba:	0018      	movs	r0, r3
 8002abc:	f004 f8f2 	bl	8006ca4 <HAL_UARTEx_SetRxFifoThreshold>
 8002ac0:	1e03      	subs	r3, r0, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002ac4:	f000 fa5e 	bl	8002f84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002ac8:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <MX_USART1_UART_Init+0x94>)
 8002aca:	0018      	movs	r0, r3
 8002acc:	f004 f870 	bl	8006bb0 <HAL_UARTEx_DisableFifoMode>
 8002ad0:	1e03      	subs	r3, r0, #0
 8002ad2:	d001      	beq.n	8002ad8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002ad4:	f000 fa56 	bl	8002f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ad8:	46c0      	nop			; (mov r8, r8)
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	200007c8 	.word	0x200007c8
 8002ae4:	40013800 	.word	0x40013800

08002ae8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002aec:	4b23      	ldr	r3, [pc, #140]	; (8002b7c <MX_USART2_UART_Init+0x94>)
 8002aee:	4a24      	ldr	r2, [pc, #144]	; (8002b80 <MX_USART2_UART_Init+0x98>)
 8002af0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002af2:	4b22      	ldr	r3, [pc, #136]	; (8002b7c <MX_USART2_UART_Init+0x94>)
 8002af4:	22e1      	movs	r2, #225	; 0xe1
 8002af6:	0252      	lsls	r2, r2, #9
 8002af8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002afa:	4b20      	ldr	r3, [pc, #128]	; (8002b7c <MX_USART2_UART_Init+0x94>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b00:	4b1e      	ldr	r3, [pc, #120]	; (8002b7c <MX_USART2_UART_Init+0x94>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b06:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <MX_USART2_UART_Init+0x94>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b0c:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <MX_USART2_UART_Init+0x94>)
 8002b0e:	220c      	movs	r2, #12
 8002b10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b12:	4b1a      	ldr	r3, [pc, #104]	; (8002b7c <MX_USART2_UART_Init+0x94>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b18:	4b18      	ldr	r3, [pc, #96]	; (8002b7c <MX_USART2_UART_Init+0x94>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b1e:	4b17      	ldr	r3, [pc, #92]	; (8002b7c <MX_USART2_UART_Init+0x94>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b24:	4b15      	ldr	r3, [pc, #84]	; (8002b7c <MX_USART2_UART_Init+0x94>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b2a:	4b14      	ldr	r3, [pc, #80]	; (8002b7c <MX_USART2_UART_Init+0x94>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b30:	4b12      	ldr	r3, [pc, #72]	; (8002b7c <MX_USART2_UART_Init+0x94>)
 8002b32:	0018      	movs	r0, r3
 8002b34:	f003 f9a0 	bl	8005e78 <HAL_UART_Init>
 8002b38:	1e03      	subs	r3, r0, #0
 8002b3a:	d001      	beq.n	8002b40 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002b3c:	f000 fa22 	bl	8002f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b40:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <MX_USART2_UART_Init+0x94>)
 8002b42:	2100      	movs	r1, #0
 8002b44:	0018      	movs	r0, r3
 8002b46:	f004 f86d 	bl	8006c24 <HAL_UARTEx_SetTxFifoThreshold>
 8002b4a:	1e03      	subs	r3, r0, #0
 8002b4c:	d001      	beq.n	8002b52 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002b4e:	f000 fa19 	bl	8002f84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b52:	4b0a      	ldr	r3, [pc, #40]	; (8002b7c <MX_USART2_UART_Init+0x94>)
 8002b54:	2100      	movs	r1, #0
 8002b56:	0018      	movs	r0, r3
 8002b58:	f004 f8a4 	bl	8006ca4 <HAL_UARTEx_SetRxFifoThreshold>
 8002b5c:	1e03      	subs	r3, r0, #0
 8002b5e:	d001      	beq.n	8002b64 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002b60:	f000 fa10 	bl	8002f84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002b64:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <MX_USART2_UART_Init+0x94>)
 8002b66:	0018      	movs	r0, r3
 8002b68:	f004 f822 	bl	8006bb0 <HAL_UARTEx_DisableFifoMode>
 8002b6c:	1e03      	subs	r3, r0, #0
 8002b6e:	d001      	beq.n	8002b74 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002b70:	f000 fa08 	bl	8002f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b74:	46c0      	nop			; (mov r8, r8)
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	46c0      	nop			; (mov r8, r8)
 8002b7c:	2000085c 	.word	0x2000085c
 8002b80:	40004400 	.word	0x40004400

08002b84 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b88:	4b16      	ldr	r3, [pc, #88]	; (8002be4 <MX_USART3_UART_Init+0x60>)
 8002b8a:	4a17      	ldr	r2, [pc, #92]	; (8002be8 <MX_USART3_UART_Init+0x64>)
 8002b8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002b8e:	4b15      	ldr	r3, [pc, #84]	; (8002be4 <MX_USART3_UART_Init+0x60>)
 8002b90:	2296      	movs	r2, #150	; 0x96
 8002b92:	0192      	lsls	r2, r2, #6
 8002b94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b96:	4b13      	ldr	r3, [pc, #76]	; (8002be4 <MX_USART3_UART_Init+0x60>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b9c:	4b11      	ldr	r3, [pc, #68]	; (8002be4 <MX_USART3_UART_Init+0x60>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002ba2:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <MX_USART3_UART_Init+0x60>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ba8:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <MX_USART3_UART_Init+0x60>)
 8002baa:	220c      	movs	r2, #12
 8002bac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bae:	4b0d      	ldr	r3, [pc, #52]	; (8002be4 <MX_USART3_UART_Init+0x60>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <MX_USART3_UART_Init+0x60>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bba:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <MX_USART3_UART_Init+0x60>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002bc0:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <MX_USART3_UART_Init+0x60>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bc6:	4b07      	ldr	r3, [pc, #28]	; (8002be4 <MX_USART3_UART_Init+0x60>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002bcc:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <MX_USART3_UART_Init+0x60>)
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f003 f952 	bl	8005e78 <HAL_UART_Init>
 8002bd4:	1e03      	subs	r3, r0, #0
 8002bd6:	d001      	beq.n	8002bdc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002bd8:	f000 f9d4 	bl	8002f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002bdc:	46c0      	nop			; (mov r8, r8)
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	200008f0 	.word	0x200008f0
 8002be8:	40004800 	.word	0x40004800

08002bec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bec:	b590      	push	{r4, r7, lr}
 8002bee:	b08b      	sub	sp, #44	; 0x2c
 8002bf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf2:	2414      	movs	r4, #20
 8002bf4:	193b      	adds	r3, r7, r4
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	2314      	movs	r3, #20
 8002bfa:	001a      	movs	r2, r3
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	f007 ffd7 	bl	800abb0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c02:	4b3d      	ldr	r3, [pc, #244]	; (8002cf8 <MX_GPIO_Init+0x10c>)
 8002c04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c06:	4b3c      	ldr	r3, [pc, #240]	; (8002cf8 <MX_GPIO_Init+0x10c>)
 8002c08:	2104      	movs	r1, #4
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	635a      	str	r2, [r3, #52]	; 0x34
 8002c0e:	4b3a      	ldr	r3, [pc, #232]	; (8002cf8 <MX_GPIO_Init+0x10c>)
 8002c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c12:	2204      	movs	r2, #4
 8002c14:	4013      	ands	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
 8002c18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c1a:	4b37      	ldr	r3, [pc, #220]	; (8002cf8 <MX_GPIO_Init+0x10c>)
 8002c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c1e:	4b36      	ldr	r3, [pc, #216]	; (8002cf8 <MX_GPIO_Init+0x10c>)
 8002c20:	2120      	movs	r1, #32
 8002c22:	430a      	orrs	r2, r1
 8002c24:	635a      	str	r2, [r3, #52]	; 0x34
 8002c26:	4b34      	ldr	r3, [pc, #208]	; (8002cf8 <MX_GPIO_Init+0x10c>)
 8002c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c32:	4b31      	ldr	r3, [pc, #196]	; (8002cf8 <MX_GPIO_Init+0x10c>)
 8002c34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c36:	4b30      	ldr	r3, [pc, #192]	; (8002cf8 <MX_GPIO_Init+0x10c>)
 8002c38:	2101      	movs	r1, #1
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	635a      	str	r2, [r3, #52]	; 0x34
 8002c3e:	4b2e      	ldr	r3, [pc, #184]	; (8002cf8 <MX_GPIO_Init+0x10c>)
 8002c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c42:	2201      	movs	r2, #1
 8002c44:	4013      	ands	r3, r2
 8002c46:	60bb      	str	r3, [r7, #8]
 8002c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c4a:	4b2b      	ldr	r3, [pc, #172]	; (8002cf8 <MX_GPIO_Init+0x10c>)
 8002c4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c4e:	4b2a      	ldr	r3, [pc, #168]	; (8002cf8 <MX_GPIO_Init+0x10c>)
 8002c50:	2102      	movs	r1, #2
 8002c52:	430a      	orrs	r2, r1
 8002c54:	635a      	str	r2, [r3, #52]	; 0x34
 8002c56:	4b28      	ldr	r3, [pc, #160]	; (8002cf8 <MX_GPIO_Init+0x10c>)
 8002c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	607b      	str	r3, [r7, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L86_RST_Pin|ASTRO_RST_Pin|L86_PWR_SW_Pin, GPIO_PIN_RESET);
 8002c62:	238c      	movs	r3, #140	; 0x8c
 8002c64:	015b      	lsls	r3, r3, #5
 8002c66:	4825      	ldr	r0, [pc, #148]	; (8002cfc <MX_GPIO_Init+0x110>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	0019      	movs	r1, r3
 8002c6c:	f001 f8af 	bl	8003dce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RSTA11_Pin|ASTRO_EVENT_Pin
 8002c70:	4923      	ldr	r1, [pc, #140]	; (8002d00 <MX_GPIO_Init+0x114>)
 8002c72:	23a0      	movs	r3, #160	; 0xa0
 8002c74:	05db      	lsls	r3, r3, #23
 8002c76:	2200      	movs	r2, #0
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f001 f8a8 	bl	8003dce <HAL_GPIO_WritePin>
                          |ASTRO_WAKEUP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : L86_RST_Pin ASTRO_RST_Pin L86_PWR_SW_Pin */
  GPIO_InitStruct.Pin = L86_RST_Pin|ASTRO_RST_Pin|L86_PWR_SW_Pin;
 8002c7e:	193b      	adds	r3, r7, r4
 8002c80:	228c      	movs	r2, #140	; 0x8c
 8002c82:	0152      	lsls	r2, r2, #5
 8002c84:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c86:	193b      	adds	r3, r7, r4
 8002c88:	2201      	movs	r2, #1
 8002c8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8c:	193b      	adds	r3, r7, r4
 8002c8e:	2200      	movs	r2, #0
 8002c90:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c92:	193b      	adds	r3, r7, r4
 8002c94:	2200      	movs	r2, #0
 8002c96:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c98:	193b      	adds	r3, r7, r4
 8002c9a:	4a18      	ldr	r2, [pc, #96]	; (8002cfc <MX_GPIO_Init+0x110>)
 8002c9c:	0019      	movs	r1, r3
 8002c9e:	0010      	movs	r0, r2
 8002ca0:	f000 fe44 	bl	800392c <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin ASTRO_PWR_SW_Pin ASTRO_RSTA11_Pin ASTRO_EVENT_Pin
                           ASTRO_WAKEUP_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RSTA11_Pin|ASTRO_EVENT_Pin
 8002ca4:	193b      	adds	r3, r7, r4
 8002ca6:	4a16      	ldr	r2, [pc, #88]	; (8002d00 <MX_GPIO_Init+0x114>)
 8002ca8:	601a      	str	r2, [r3, #0]
                          |ASTRO_WAKEUP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002caa:	193b      	adds	r3, r7, r4
 8002cac:	2201      	movs	r2, #1
 8002cae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb0:	193b      	adds	r3, r7, r4
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb6:	193b      	adds	r3, r7, r4
 8002cb8:	2200      	movs	r2, #0
 8002cba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cbc:	193a      	adds	r2, r7, r4
 8002cbe:	23a0      	movs	r3, #160	; 0xa0
 8002cc0:	05db      	lsls	r3, r3, #23
 8002cc2:	0011      	movs	r1, r2
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f000 fe31 	bl	800392c <HAL_GPIO_Init>

  /*Configure GPIO pins : LIS_INT1_EXTI8_Pin LIS_INT2_EXTI9_Pin */
  GPIO_InitStruct.Pin = LIS_INT1_EXTI8_Pin|LIS_INT2_EXTI9_Pin;
 8002cca:	0021      	movs	r1, r4
 8002ccc:	187b      	adds	r3, r7, r1
 8002cce:	22c0      	movs	r2, #192	; 0xc0
 8002cd0:	0092      	lsls	r2, r2, #2
 8002cd2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cd4:	187b      	adds	r3, r7, r1
 8002cd6:	2288      	movs	r2, #136	; 0x88
 8002cd8:	0352      	lsls	r2, r2, #13
 8002cda:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cdc:	187b      	adds	r3, r7, r1
 8002cde:	2200      	movs	r2, #0
 8002ce0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce2:	187b      	adds	r3, r7, r1
 8002ce4:	4a07      	ldr	r2, [pc, #28]	; (8002d04 <MX_GPIO_Init+0x118>)
 8002ce6:	0019      	movs	r1, r3
 8002ce8:	0010      	movs	r0, r2
 8002cea:	f000 fe1f 	bl	800392c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	b00b      	add	sp, #44	; 0x2c
 8002cf4:	bd90      	pop	{r4, r7, pc}
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	50000800 	.word	0x50000800
 8002d00:	00009860 	.word	0x00009860
 8002d04:	50000400 	.word	0x50000400

08002d08 <send_debug_logs>:

/* USER CODE BEGIN 4 */
void send_debug_logs ( char* p_tx_buffer )
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	0018      	movs	r0, r3
 8002d14:	f7fd f9f6 	bl	8000104 <strlen>
 8002d18:	0003      	movs	r3, r0
 8002d1a:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2bfa      	cmp	r3, #250	; 0xfa
 8002d20:	d908      	bls.n	8002d34 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 8002d22:	23fa      	movs	r3, #250	; 0xfa
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	490d      	ldr	r1, [pc, #52]	; (8002d5c <send_debug_logs+0x54>)
 8002d28:	480d      	ldr	r0, [pc, #52]	; (8002d60 <send_debug_logs+0x58>)
 8002d2a:	222a      	movs	r2, #42	; 0x2a
 8002d2c:	f003 f93a 	bl	8005fa4 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 8002d30:	23fa      	movs	r3, #250	; 0xfa
 8002d32:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	23fa      	movs	r3, #250	; 0xfa
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	4808      	ldr	r0, [pc, #32]	; (8002d60 <send_debug_logs+0x58>)
 8002d40:	f003 f930 	bl	8005fa4 <HAL_UART_Transmit>
    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8002d44:	23fa      	movs	r3, #250	; 0xfa
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4906      	ldr	r1, [pc, #24]	; (8002d64 <send_debug_logs+0x5c>)
 8002d4a:	4805      	ldr	r0, [pc, #20]	; (8002d60 <send_debug_logs+0x58>)
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f003 f929 	bl	8005fa4 <HAL_UART_Transmit>
}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	46bd      	mov	sp, r7
 8002d56:	b004      	add	sp, #16
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	46c0      	nop			; (mov r8, r8)
 8002d5c:	08011714 	.word	0x08011714
 8002d60:	2000085c 	.word	0x2000085c
 8002d64:	08011740 	.word	0x08011740

08002d68 <reset_astronode>:
void reset_astronode ( void )
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 8002d6c:	4b0a      	ldr	r3, [pc, #40]	; (8002d98 <reset_astronode+0x30>)
 8002d6e:	2201      	movs	r2, #1
 8002d70:	2180      	movs	r1, #128	; 0x80
 8002d72:	0018      	movs	r0, r3
 8002d74:	f001 f82b 	bl	8003dce <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 8002d78:	2001      	movs	r0, #1
 8002d7a:	f000 fcbf 	bl	80036fc <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 8002d7e:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <reset_astronode+0x30>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	2180      	movs	r1, #128	; 0x80
 8002d84:	0018      	movs	r0, r3
 8002d86:	f001 f822 	bl	8003dce <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 8002d8a:	20fa      	movs	r0, #250	; 0xfa
 8002d8c:	f000 fcb6 	bl	80036fc <HAL_Delay>
}
 8002d90:	46c0      	nop			; (mov r8, r8)
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	46c0      	nop			; (mov r8, r8)
 8002d98:	50000800 	.word	0x50000800

08002d9c <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 8002da6:	4b0a      	ldr	r3, [pc, #40]	; (8002dd0 <send_astronode_request+0x34>)
 8002da8:	0018      	movs	r0, r3
 8002daa:	f7ff ffad 	bl	8002d08 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	0018      	movs	r0, r3
 8002db2:	f7ff ffa9 	bl	8002d08 <send_debug_logs>

    HAL_UART_Transmit ( HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	23fa      	movs	r3, #250	; 0xfa
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	4804      	ldr	r0, [pc, #16]	; (8002dd4 <send_astronode_request+0x38>)
 8002dc2:	f003 f8ef 	bl	8005fa4 <HAL_UART_Transmit>
}
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	b002      	add	sp, #8
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	46c0      	nop			; (mov r8, r8)
 8002dd0:	08011744 	.word	0x08011744
 8002dd4:	200007c8 	.word	0x200007c8

08002dd8 <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	4806      	ldr	r0, [pc, #24]	; (8002dfc <is_astronode_character_received+0x24>)
 8002de4:	2364      	movs	r3, #100	; 0x64
 8002de6:	2201      	movs	r2, #1
 8002de8:	f003 f978 	bl	80060dc <HAL_UART_Receive>
 8002dec:	0003      	movs	r3, r0
 8002dee:	425a      	negs	r2, r3
 8002df0:	4153      	adcs	r3, r2
 8002df2:	b2db      	uxtb	r3, r3
}
 8002df4:	0018      	movs	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	b002      	add	sp, #8
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	200007c8 	.word	0x200007c8

08002e00 <is_evt_pin_high>:
bool is_evt_pin_high ( void )
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
	return ( HAL_GPIO_ReadPin ( GPIOA , ASTRO_EVENT_Pin ) == GPIO_PIN_SET ? true : false);
 8002e04:	2380      	movs	r3, #128	; 0x80
 8002e06:	015a      	lsls	r2, r3, #5
 8002e08:	23a0      	movs	r3, #160	; 0xa0
 8002e0a:	05db      	lsls	r3, r3, #23
 8002e0c:	0011      	movs	r1, r2
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f000 ffc0 	bl	8003d94 <HAL_GPIO_ReadPin>
 8002e14:	0003      	movs	r3, r0
 8002e16:	3b01      	subs	r3, #1
 8002e18:	425a      	negs	r2, r3
 8002e1a:	4153      	adcs	r3, r2
 8002e1c:	b2db      	uxtb	r3, r3
}
 8002e1e:	0018      	movs	r0, r3
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <get_systick>:
		astronode_send_cmd_rr () ;
		astronode_send_cmd_cr () ;
	}
}
uint32_t get_systick ( void )
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 8002e28:	f000 fc5e 	bl	80036e8 <HAL_GetTick>
 8002e2c:	0003      	movs	r3, r0
}
 8002e2e:	0018      	movs	r0, r3
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	000a      	movs	r2, r1
 8002e3e:	1cbb      	adds	r3, r7, #2
 8002e40:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 8002e42:	f7ff ffef 	bl	8002e24 <get_systick>
 8002e46:	0002      	movs	r2, r0
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	1cba      	adds	r2, r7, #2
 8002e4e:	8812      	ldrh	r2, [r2, #0]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	419b      	sbcs	r3, r3
 8002e54:	425b      	negs	r3, r3
 8002e56:	b2db      	uxtb	r3, r3
}
 8002e58:	0018      	movs	r0, r3
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	b002      	add	sp, #8
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <my_astro_on>:
void my_ldg_off ( void )
{
	HAL_GPIO_WritePin ( GPIOA , LDG_Pin , GPIO_PIN_RESET ) ;
}
void my_astro_on ( void )
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOA , ASTRO_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8002e64:	23a0      	movs	r3, #160	; 0xa0
 8002e66:	05db      	lsls	r3, r3, #23
 8002e68:	2201      	movs	r2, #1
 8002e6a:	2140      	movs	r1, #64	; 0x40
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f000 ffae 	bl	8003dce <HAL_GPIO_WritePin>
	MX_USART1_UART_Init () ;
 8002e72:	f7ff fdeb 	bl	8002a4c <MX_USART1_UART_Init>
}
 8002e76:	46c0      	nop			; (mov r8, r8)
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <my_astro_off>:
void my_astro_off ( void )
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOA , ASTRO_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 8002e80:	23a0      	movs	r3, #160	; 0xa0
 8002e82:	05db      	lsls	r3, r3, #23
 8002e84:	2200      	movs	r2, #0
 8002e86:	2140      	movs	r1, #64	; 0x40
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f000 ffa0 	bl	8003dce <HAL_GPIO_WritePin>
	HAL_UART_DeInit ( HUART_ASTRO ) ;
 8002e8e:	4b03      	ldr	r3, [pc, #12]	; (8002e9c <my_astro_off+0x20>)
 8002e90:	0018      	movs	r0, r3
 8002e92:	f003 f847 	bl	8005f24 <HAL_UART_DeInit>
}
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	200007c8 	.word	0x200007c8

08002ea0 <my_lx6_on>:
void my_lx6_on ( void )
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOC , L86_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8002ea4:	2380      	movs	r3, #128	; 0x80
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	4808      	ldr	r0, [pc, #32]	; (8002ecc <my_lx6_on+0x2c>)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	0019      	movs	r1, r3
 8002eae:	f000 ff8e 	bl	8003dce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_SET ) ;
 8002eb2:	2380      	movs	r3, #128	; 0x80
 8002eb4:	015b      	lsls	r3, r3, #5
 8002eb6:	4805      	ldr	r0, [pc, #20]	; (8002ecc <my_lx6_on+0x2c>)
 8002eb8:	2201      	movs	r2, #1
 8002eba:	0019      	movs	r1, r3
 8002ebc:	f000 ff87 	bl	8003dce <HAL_GPIO_WritePin>
	MX_USART3_UART_Init () ;
 8002ec0:	f7ff fe60 	bl	8002b84 <MX_USART3_UART_Init>
}
 8002ec4:	46c0      	nop			; (mov r8, r8)
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	50000800 	.word	0x50000800

08002ed0 <my_lx6_off>:
void my_lx6_off ( void )
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOC , L86_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 8002ed4:	2380      	movs	r3, #128	; 0x80
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	4809      	ldr	r0, [pc, #36]	; (8002f00 <my_lx6_off+0x30>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	0019      	movs	r1, r3
 8002ede:	f000 ff76 	bl	8003dce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_RESET ) ;
 8002ee2:	2380      	movs	r3, #128	; 0x80
 8002ee4:	015b      	lsls	r3, r3, #5
 8002ee6:	4806      	ldr	r0, [pc, #24]	; (8002f00 <my_lx6_off+0x30>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	0019      	movs	r1, r3
 8002eec:	f000 ff6f 	bl	8003dce <HAL_GPIO_WritePin>
	HAL_UART_DeInit ( HUART_Lx6 ) ;
 8002ef0:	4b04      	ldr	r3, [pc, #16]	; (8002f04 <my_lx6_off+0x34>)
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	f003 f816 	bl	8005f24 <HAL_UART_DeInit>
}
 8002ef8:	46c0      	nop			; (mov r8, r8)
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	50000800 	.word	0x50000800
 8002f04:	200008f0 	.word	0x200008f0

08002f08 <is_system_initialized>:

bool is_system_initialized ( void )
{
 8002f08:	b590      	push	{r4, r7, lr}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
	uint16_t yyyy ;

	yyyy = get_my_rtc_time ( rtc_dt ) ;
 8002f0e:	1dbc      	adds	r4, r7, #6
 8002f10:	4b0a      	ldr	r3, [pc, #40]	; (8002f3c <is_system_initialized+0x34>)
 8002f12:	0018      	movs	r0, r3
 8002f14:	f005 ff12 	bl	8008d3c <get_my_rtc_time>
 8002f18:	0003      	movs	r3, r0
 8002f1a:	8023      	strh	r3, [r4, #0]
	send_debug_logs ( rtc_dt ) ;
 8002f1c:	4b07      	ldr	r3, [pc, #28]	; (8002f3c <is_system_initialized+0x34>)
 8002f1e:	0018      	movs	r0, r3
 8002f20:	f7ff fef2 	bl	8002d08 <send_debug_logs>
	if ( yyyy >= FIRMWARE_RELEASE_YEAR )
 8002f24:	1dbb      	adds	r3, r7, #6
 8002f26:	881b      	ldrh	r3, [r3, #0]
 8002f28:	4a05      	ldr	r2, [pc, #20]	; (8002f40 <is_system_initialized+0x38>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d901      	bls.n	8002f32 <is_system_initialized+0x2a>
	{
		return true ;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <is_system_initialized+0x2c>
	}
	return false ;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	0018      	movs	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	b003      	add	sp, #12
 8002f3a:	bd90      	pop	{r4, r7, pc}
 8002f3c:	20000984 	.word	0x20000984
 8002f40:	000007e6 	.word	0x000007e6

08002f44 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a0a      	ldr	r2, [pc, #40]	; (8002f7c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d10d      	bne.n	8002f72 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		tim_seconds++ ;
 8002f56:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	4b08      	ldr	r3, [pc, #32]	; (8002f80 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002f60:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > TIM_SECONDS_THS_SYSTEM_RESET )
 8002f62:	4b07      	ldr	r3, [pc, #28]	; (8002f80 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002f64:	881a      	ldrh	r2, [r3, #0]
 8002f66:	23e1      	movs	r3, #225	; 0xe1
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d901      	bls.n	8002f72 <HAL_TIM_PeriodElapsedCallback+0x2e>
		  {
			  HAL_NVIC_SystemReset () ;
 8002f6e:	f000 fccc 	bl	800390a <HAL_NVIC_SystemReset>
		  }
	}
}
 8002f72:	46c0      	nop			; (mov r8, r8)
 8002f74:	46bd      	mov	sp, r7
 8002f76:	b002      	add	sp, #8
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	40001000 	.word	0x40001000
 8002f80:	200009a6 	.word	0x200009a6

08002f84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f88:	b672      	cpsid	i
}
 8002f8a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f8c:	e7fe      	b.n	8002f8c <Error_Handler+0x8>
	...

08002f90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f96:	4b0f      	ldr	r3, [pc, #60]	; (8002fd4 <HAL_MspInit+0x44>)
 8002f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f9a:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <HAL_MspInit+0x44>)
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	641a      	str	r2, [r3, #64]	; 0x40
 8002fa2:	4b0c      	ldr	r3, [pc, #48]	; (8002fd4 <HAL_MspInit+0x44>)
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	4013      	ands	r3, r2
 8002faa:	607b      	str	r3, [r7, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fae:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <HAL_MspInit+0x44>)
 8002fb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fb2:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <HAL_MspInit+0x44>)
 8002fb4:	2180      	movs	r1, #128	; 0x80
 8002fb6:	0549      	lsls	r1, r1, #21
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	63da      	str	r2, [r3, #60]	; 0x3c
 8002fbc:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <HAL_MspInit+0x44>)
 8002fbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fc0:	2380      	movs	r3, #128	; 0x80
 8002fc2:	055b      	lsls	r3, r3, #21
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	603b      	str	r3, [r7, #0]
 8002fc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fca:	46c0      	nop			; (mov r8, r8)
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	b002      	add	sp, #8
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	40021000 	.word	0x40021000

08002fd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fd8:	b590      	push	{r4, r7, lr}
 8002fda:	b097      	sub	sp, #92	; 0x5c
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe0:	2344      	movs	r3, #68	; 0x44
 8002fe2:	18fb      	adds	r3, r7, r3
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	2314      	movs	r3, #20
 8002fe8:	001a      	movs	r2, r3
 8002fea:	2100      	movs	r1, #0
 8002fec:	f007 fde0 	bl	800abb0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ff0:	2410      	movs	r4, #16
 8002ff2:	193b      	adds	r3, r7, r4
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	2334      	movs	r3, #52	; 0x34
 8002ff8:	001a      	movs	r2, r3
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	f007 fdd8 	bl	800abb0 <memset>
  if(hi2c->Instance==I2C1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a22      	ldr	r2, [pc, #136]	; (8003090 <HAL_I2C_MspInit+0xb8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d13d      	bne.n	8003086 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800300a:	193b      	adds	r3, r7, r4
 800300c:	2220      	movs	r2, #32
 800300e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003010:	193b      	adds	r3, r7, r4
 8003012:	2200      	movs	r2, #0
 8003014:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003016:	193b      	adds	r3, r7, r4
 8003018:	0018      	movs	r0, r3
 800301a:	f001 fd33 	bl	8004a84 <HAL_RCCEx_PeriphCLKConfig>
 800301e:	1e03      	subs	r3, r0, #0
 8003020:	d001      	beq.n	8003026 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003022:	f7ff ffaf 	bl	8002f84 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003026:	4b1b      	ldr	r3, [pc, #108]	; (8003094 <HAL_I2C_MspInit+0xbc>)
 8003028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800302a:	4b1a      	ldr	r3, [pc, #104]	; (8003094 <HAL_I2C_MspInit+0xbc>)
 800302c:	2102      	movs	r1, #2
 800302e:	430a      	orrs	r2, r1
 8003030:	635a      	str	r2, [r3, #52]	; 0x34
 8003032:	4b18      	ldr	r3, [pc, #96]	; (8003094 <HAL_I2C_MspInit+0xbc>)
 8003034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003036:	2202      	movs	r2, #2
 8003038:	4013      	ands	r3, r2
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LIS_SCL_Pin|LIS_SDA_Pin;
 800303e:	2144      	movs	r1, #68	; 0x44
 8003040:	187b      	adds	r3, r7, r1
 8003042:	22c0      	movs	r2, #192	; 0xc0
 8003044:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003046:	187b      	adds	r3, r7, r1
 8003048:	2212      	movs	r2, #18
 800304a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304c:	187b      	adds	r3, r7, r1
 800304e:	2200      	movs	r2, #0
 8003050:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003052:	187b      	adds	r3, r7, r1
 8003054:	2200      	movs	r2, #0
 8003056:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003058:	187b      	adds	r3, r7, r1
 800305a:	2206      	movs	r2, #6
 800305c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800305e:	187b      	adds	r3, r7, r1
 8003060:	4a0d      	ldr	r2, [pc, #52]	; (8003098 <HAL_I2C_MspInit+0xc0>)
 8003062:	0019      	movs	r1, r3
 8003064:	0010      	movs	r0, r2
 8003066:	f000 fc61 	bl	800392c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800306a:	4b0a      	ldr	r3, [pc, #40]	; (8003094 <HAL_I2C_MspInit+0xbc>)
 800306c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800306e:	4b09      	ldr	r3, [pc, #36]	; (8003094 <HAL_I2C_MspInit+0xbc>)
 8003070:	2180      	movs	r1, #128	; 0x80
 8003072:	0389      	lsls	r1, r1, #14
 8003074:	430a      	orrs	r2, r1
 8003076:	63da      	str	r2, [r3, #60]	; 0x3c
 8003078:	4b06      	ldr	r3, [pc, #24]	; (8003094 <HAL_I2C_MspInit+0xbc>)
 800307a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800307c:	2380      	movs	r3, #128	; 0x80
 800307e:	039b      	lsls	r3, r3, #14
 8003080:	4013      	ands	r3, r2
 8003082:	60bb      	str	r3, [r7, #8]
 8003084:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003086:	46c0      	nop			; (mov r8, r8)
 8003088:	46bd      	mov	sp, r7
 800308a:	b017      	add	sp, #92	; 0x5c
 800308c:	bd90      	pop	{r4, r7, pc}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	40005400 	.word	0x40005400
 8003094:	40021000 	.word	0x40021000
 8003098:	50000400 	.word	0x50000400

0800309c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800309c:	b590      	push	{r4, r7, lr}
 800309e:	b091      	sub	sp, #68	; 0x44
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030a4:	240c      	movs	r4, #12
 80030a6:	193b      	adds	r3, r7, r4
 80030a8:	0018      	movs	r0, r3
 80030aa:	2334      	movs	r3, #52	; 0x34
 80030ac:	001a      	movs	r2, r3
 80030ae:	2100      	movs	r1, #0
 80030b0:	f007 fd7e 	bl	800abb0 <memset>
  if(hrtc->Instance==RTC)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a15      	ldr	r2, [pc, #84]	; (8003110 <HAL_RTC_MspInit+0x74>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d124      	bne.n	8003108 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80030be:	193b      	adds	r3, r7, r4
 80030c0:	2280      	movs	r2, #128	; 0x80
 80030c2:	0292      	lsls	r2, r2, #10
 80030c4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80030c6:	193b      	adds	r3, r7, r4
 80030c8:	2280      	movs	r2, #128	; 0x80
 80030ca:	0092      	lsls	r2, r2, #2
 80030cc:	631a      	str	r2, [r3, #48]	; 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030ce:	193b      	adds	r3, r7, r4
 80030d0:	0018      	movs	r0, r3
 80030d2:	f001 fcd7 	bl	8004a84 <HAL_RCCEx_PeriphCLKConfig>
 80030d6:	1e03      	subs	r3, r0, #0
 80030d8:	d001      	beq.n	80030de <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80030da:	f7ff ff53 	bl	8002f84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80030de:	4b0d      	ldr	r3, [pc, #52]	; (8003114 <HAL_RTC_MspInit+0x78>)
 80030e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80030e2:	4b0c      	ldr	r3, [pc, #48]	; (8003114 <HAL_RTC_MspInit+0x78>)
 80030e4:	2180      	movs	r1, #128	; 0x80
 80030e6:	0209      	lsls	r1, r1, #8
 80030e8:	430a      	orrs	r2, r1
 80030ea:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80030ec:	4b09      	ldr	r3, [pc, #36]	; (8003114 <HAL_RTC_MspInit+0x78>)
 80030ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030f0:	4b08      	ldr	r3, [pc, #32]	; (8003114 <HAL_RTC_MspInit+0x78>)
 80030f2:	2180      	movs	r1, #128	; 0x80
 80030f4:	00c9      	lsls	r1, r1, #3
 80030f6:	430a      	orrs	r2, r1
 80030f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80030fa:	4b06      	ldr	r3, [pc, #24]	; (8003114 <HAL_RTC_MspInit+0x78>)
 80030fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030fe:	2380      	movs	r3, #128	; 0x80
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	4013      	ands	r3, r2
 8003104:	60bb      	str	r3, [r7, #8]
 8003106:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003108:	46c0      	nop			; (mov r8, r8)
 800310a:	46bd      	mov	sp, r7
 800310c:	b011      	add	sp, #68	; 0x44
 800310e:	bd90      	pop	{r4, r7, pc}
 8003110:	40002800 	.word	0x40002800
 8003114:	40021000 	.word	0x40021000

08003118 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a0d      	ldr	r2, [pc, #52]	; (800315c <HAL_TIM_Base_MspInit+0x44>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d113      	bne.n	8003152 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800312a:	4b0d      	ldr	r3, [pc, #52]	; (8003160 <HAL_TIM_Base_MspInit+0x48>)
 800312c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800312e:	4b0c      	ldr	r3, [pc, #48]	; (8003160 <HAL_TIM_Base_MspInit+0x48>)
 8003130:	2110      	movs	r1, #16
 8003132:	430a      	orrs	r2, r1
 8003134:	63da      	str	r2, [r3, #60]	; 0x3c
 8003136:	4b0a      	ldr	r3, [pc, #40]	; (8003160 <HAL_TIM_Base_MspInit+0x48>)
 8003138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313a:	2210      	movs	r2, #16
 800313c:	4013      	ands	r3, r2
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 8003142:	2200      	movs	r2, #0
 8003144:	2100      	movs	r1, #0
 8003146:	2011      	movs	r0, #17
 8003148:	f000 fbba 	bl	80038c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 800314c:	2011      	movs	r0, #17
 800314e:	f000 fbcc 	bl	80038ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	46bd      	mov	sp, r7
 8003156:	b004      	add	sp, #16
 8003158:	bd80      	pop	{r7, pc}
 800315a:	46c0      	nop			; (mov r8, r8)
 800315c:	40001000 	.word	0x40001000
 8003160:	40021000 	.word	0x40021000

08003164 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003164:	b590      	push	{r4, r7, lr}
 8003166:	b09b      	sub	sp, #108	; 0x6c
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800316c:	2354      	movs	r3, #84	; 0x54
 800316e:	18fb      	adds	r3, r7, r3
 8003170:	0018      	movs	r0, r3
 8003172:	2314      	movs	r3, #20
 8003174:	001a      	movs	r2, r3
 8003176:	2100      	movs	r1, #0
 8003178:	f007 fd1a 	bl	800abb0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800317c:	2420      	movs	r4, #32
 800317e:	193b      	adds	r3, r7, r4
 8003180:	0018      	movs	r0, r3
 8003182:	2334      	movs	r3, #52	; 0x34
 8003184:	001a      	movs	r2, r3
 8003186:	2100      	movs	r1, #0
 8003188:	f007 fd12 	bl	800abb0 <memset>
  if(huart->Instance==USART1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a61      	ldr	r2, [pc, #388]	; (8003318 <HAL_UART_MspInit+0x1b4>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d140      	bne.n	8003218 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003196:	193b      	adds	r3, r7, r4
 8003198:	2201      	movs	r2, #1
 800319a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800319c:	193b      	adds	r3, r7, r4
 800319e:	2200      	movs	r2, #0
 80031a0:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031a2:	193b      	adds	r3, r7, r4
 80031a4:	0018      	movs	r0, r3
 80031a6:	f001 fc6d 	bl	8004a84 <HAL_RCCEx_PeriphCLKConfig>
 80031aa:	1e03      	subs	r3, r0, #0
 80031ac:	d001      	beq.n	80031b2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80031ae:	f7ff fee9 	bl	8002f84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80031b2:	4b5a      	ldr	r3, [pc, #360]	; (800331c <HAL_UART_MspInit+0x1b8>)
 80031b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031b6:	4b59      	ldr	r3, [pc, #356]	; (800331c <HAL_UART_MspInit+0x1b8>)
 80031b8:	2180      	movs	r1, #128	; 0x80
 80031ba:	01c9      	lsls	r1, r1, #7
 80031bc:	430a      	orrs	r2, r1
 80031be:	641a      	str	r2, [r3, #64]	; 0x40
 80031c0:	4b56      	ldr	r3, [pc, #344]	; (800331c <HAL_UART_MspInit+0x1b8>)
 80031c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031c4:	2380      	movs	r3, #128	; 0x80
 80031c6:	01db      	lsls	r3, r3, #7
 80031c8:	4013      	ands	r3, r2
 80031ca:	61fb      	str	r3, [r7, #28]
 80031cc:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ce:	4b53      	ldr	r3, [pc, #332]	; (800331c <HAL_UART_MspInit+0x1b8>)
 80031d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031d2:	4b52      	ldr	r3, [pc, #328]	; (800331c <HAL_UART_MspInit+0x1b8>)
 80031d4:	2101      	movs	r1, #1
 80031d6:	430a      	orrs	r2, r1
 80031d8:	635a      	str	r2, [r3, #52]	; 0x34
 80031da:	4b50      	ldr	r3, [pc, #320]	; (800331c <HAL_UART_MspInit+0x1b8>)
 80031dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031de:	2201      	movs	r2, #1
 80031e0:	4013      	ands	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
 80031e4:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ASTRO_TXD_Pin|ASTRO_RXD_Pin;
 80031e6:	2154      	movs	r1, #84	; 0x54
 80031e8:	187b      	adds	r3, r7, r1
 80031ea:	22c0      	movs	r2, #192	; 0xc0
 80031ec:	00d2      	lsls	r2, r2, #3
 80031ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f0:	187b      	adds	r3, r7, r1
 80031f2:	2202      	movs	r2, #2
 80031f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f6:	187b      	adds	r3, r7, r1
 80031f8:	2200      	movs	r2, #0
 80031fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031fc:	187b      	adds	r3, r7, r1
 80031fe:	2200      	movs	r2, #0
 8003200:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003202:	187b      	adds	r3, r7, r1
 8003204:	2201      	movs	r2, #1
 8003206:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003208:	187a      	adds	r2, r7, r1
 800320a:	23a0      	movs	r3, #160	; 0xa0
 800320c:	05db      	lsls	r3, r3, #23
 800320e:	0011      	movs	r1, r2
 8003210:	0018      	movs	r0, r3
 8003212:	f000 fb8b 	bl	800392c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003216:	e07b      	b.n	8003310 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART2)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a40      	ldr	r2, [pc, #256]	; (8003320 <HAL_UART_MspInit+0x1bc>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d140      	bne.n	80032a4 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003222:	2120      	movs	r1, #32
 8003224:	187b      	adds	r3, r7, r1
 8003226:	2202      	movs	r2, #2
 8003228:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800322a:	187b      	adds	r3, r7, r1
 800322c:	2200      	movs	r2, #0
 800322e:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003230:	187b      	adds	r3, r7, r1
 8003232:	0018      	movs	r0, r3
 8003234:	f001 fc26 	bl	8004a84 <HAL_RCCEx_PeriphCLKConfig>
 8003238:	1e03      	subs	r3, r0, #0
 800323a:	d001      	beq.n	8003240 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 800323c:	f7ff fea2 	bl	8002f84 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003240:	4b36      	ldr	r3, [pc, #216]	; (800331c <HAL_UART_MspInit+0x1b8>)
 8003242:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003244:	4b35      	ldr	r3, [pc, #212]	; (800331c <HAL_UART_MspInit+0x1b8>)
 8003246:	2180      	movs	r1, #128	; 0x80
 8003248:	0289      	lsls	r1, r1, #10
 800324a:	430a      	orrs	r2, r1
 800324c:	63da      	str	r2, [r3, #60]	; 0x3c
 800324e:	4b33      	ldr	r3, [pc, #204]	; (800331c <HAL_UART_MspInit+0x1b8>)
 8003250:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003252:	2380      	movs	r3, #128	; 0x80
 8003254:	029b      	lsls	r3, r3, #10
 8003256:	4013      	ands	r3, r2
 8003258:	617b      	str	r3, [r7, #20]
 800325a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800325c:	4b2f      	ldr	r3, [pc, #188]	; (800331c <HAL_UART_MspInit+0x1b8>)
 800325e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003260:	4b2e      	ldr	r3, [pc, #184]	; (800331c <HAL_UART_MspInit+0x1b8>)
 8003262:	2101      	movs	r1, #1
 8003264:	430a      	orrs	r2, r1
 8003266:	635a      	str	r2, [r3, #52]	; 0x34
 8003268:	4b2c      	ldr	r3, [pc, #176]	; (800331c <HAL_UART_MspInit+0x1b8>)
 800326a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800326c:	2201      	movs	r2, #1
 800326e:	4013      	ands	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DBG_TXD_Pin|DBG_RXD_Pin;
 8003274:	2154      	movs	r1, #84	; 0x54
 8003276:	187b      	adds	r3, r7, r1
 8003278:	220c      	movs	r2, #12
 800327a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327c:	187b      	adds	r3, r7, r1
 800327e:	2202      	movs	r2, #2
 8003280:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003282:	187b      	adds	r3, r7, r1
 8003284:	2201      	movs	r2, #1
 8003286:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003288:	187b      	adds	r3, r7, r1
 800328a:	2200      	movs	r2, #0
 800328c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800328e:	187b      	adds	r3, r7, r1
 8003290:	2201      	movs	r2, #1
 8003292:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003294:	187a      	adds	r2, r7, r1
 8003296:	23a0      	movs	r3, #160	; 0xa0
 8003298:	05db      	lsls	r3, r3, #23
 800329a:	0011      	movs	r1, r2
 800329c:	0018      	movs	r0, r3
 800329e:	f000 fb45 	bl	800392c <HAL_GPIO_Init>
}
 80032a2:	e035      	b.n	8003310 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART3)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a1e      	ldr	r2, [pc, #120]	; (8003324 <HAL_UART_MspInit+0x1c0>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d130      	bne.n	8003310 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART3_CLK_ENABLE();
 80032ae:	4b1b      	ldr	r3, [pc, #108]	; (800331c <HAL_UART_MspInit+0x1b8>)
 80032b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032b2:	4b1a      	ldr	r3, [pc, #104]	; (800331c <HAL_UART_MspInit+0x1b8>)
 80032b4:	2180      	movs	r1, #128	; 0x80
 80032b6:	02c9      	lsls	r1, r1, #11
 80032b8:	430a      	orrs	r2, r1
 80032ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80032bc:	4b17      	ldr	r3, [pc, #92]	; (800331c <HAL_UART_MspInit+0x1b8>)
 80032be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032c0:	2380      	movs	r3, #128	; 0x80
 80032c2:	02db      	lsls	r3, r3, #11
 80032c4:	4013      	ands	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032ca:	4b14      	ldr	r3, [pc, #80]	; (800331c <HAL_UART_MspInit+0x1b8>)
 80032cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ce:	4b13      	ldr	r3, [pc, #76]	; (800331c <HAL_UART_MspInit+0x1b8>)
 80032d0:	2104      	movs	r1, #4
 80032d2:	430a      	orrs	r2, r1
 80032d4:	635a      	str	r2, [r3, #52]	; 0x34
 80032d6:	4b11      	ldr	r3, [pc, #68]	; (800331c <HAL_UART_MspInit+0x1b8>)
 80032d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032da:	2204      	movs	r2, #4
 80032dc:	4013      	ands	r3, r2
 80032de:	60bb      	str	r3, [r7, #8]
 80032e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = L86_RXD_Pin|L86_TXD_Pin;
 80032e2:	2154      	movs	r1, #84	; 0x54
 80032e4:	187b      	adds	r3, r7, r1
 80032e6:	22c0      	movs	r2, #192	; 0xc0
 80032e8:	0112      	lsls	r2, r2, #4
 80032ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ec:	187b      	adds	r3, r7, r1
 80032ee:	2202      	movs	r2, #2
 80032f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f2:	187b      	adds	r3, r7, r1
 80032f4:	2200      	movs	r2, #0
 80032f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f8:	187b      	adds	r3, r7, r1
 80032fa:	2200      	movs	r2, #0
 80032fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 80032fe:	187b      	adds	r3, r7, r1
 8003300:	2200      	movs	r2, #0
 8003302:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003304:	187b      	adds	r3, r7, r1
 8003306:	4a08      	ldr	r2, [pc, #32]	; (8003328 <HAL_UART_MspInit+0x1c4>)
 8003308:	0019      	movs	r1, r3
 800330a:	0010      	movs	r0, r2
 800330c:	f000 fb0e 	bl	800392c <HAL_GPIO_Init>
}
 8003310:	46c0      	nop			; (mov r8, r8)
 8003312:	46bd      	mov	sp, r7
 8003314:	b01b      	add	sp, #108	; 0x6c
 8003316:	bd90      	pop	{r4, r7, pc}
 8003318:	40013800 	.word	0x40013800
 800331c:	40021000 	.word	0x40021000
 8003320:	40004400 	.word	0x40004400
 8003324:	40004800 	.word	0x40004800
 8003328:	50000800 	.word	0x50000800

0800332c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a1c      	ldr	r2, [pc, #112]	; (80033ac <HAL_UART_MspDeInit+0x80>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d10e      	bne.n	800335c <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800333e:	4b1c      	ldr	r3, [pc, #112]	; (80033b0 <HAL_UART_MspDeInit+0x84>)
 8003340:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003342:	4b1b      	ldr	r3, [pc, #108]	; (80033b0 <HAL_UART_MspDeInit+0x84>)
 8003344:	491b      	ldr	r1, [pc, #108]	; (80033b4 <HAL_UART_MspDeInit+0x88>)
 8003346:	400a      	ands	r2, r1
 8003348:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, ASTRO_TXD_Pin|ASTRO_RXD_Pin);
 800334a:	23c0      	movs	r3, #192	; 0xc0
 800334c:	00da      	lsls	r2, r3, #3
 800334e:	23a0      	movs	r3, #160	; 0xa0
 8003350:	05db      	lsls	r3, r3, #23
 8003352:	0011      	movs	r1, r2
 8003354:	0018      	movs	r0, r3
 8003356:	f000 fc4d 	bl	8003bf4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 800335a:	e023      	b.n	80033a4 <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART2)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a15      	ldr	r2, [pc, #84]	; (80033b8 <HAL_UART_MspDeInit+0x8c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d10c      	bne.n	8003380 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003366:	4b12      	ldr	r3, [pc, #72]	; (80033b0 <HAL_UART_MspDeInit+0x84>)
 8003368:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800336a:	4b11      	ldr	r3, [pc, #68]	; (80033b0 <HAL_UART_MspDeInit+0x84>)
 800336c:	4913      	ldr	r1, [pc, #76]	; (80033bc <HAL_UART_MspDeInit+0x90>)
 800336e:	400a      	ands	r2, r1
 8003370:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TXD_Pin|DBG_RXD_Pin);
 8003372:	23a0      	movs	r3, #160	; 0xa0
 8003374:	05db      	lsls	r3, r3, #23
 8003376:	210c      	movs	r1, #12
 8003378:	0018      	movs	r0, r3
 800337a:	f000 fc3b 	bl	8003bf4 <HAL_GPIO_DeInit>
}
 800337e:	e011      	b.n	80033a4 <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART3)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a0e      	ldr	r2, [pc, #56]	; (80033c0 <HAL_UART_MspDeInit+0x94>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d10c      	bne.n	80033a4 <HAL_UART_MspDeInit+0x78>
    __HAL_RCC_USART3_CLK_DISABLE();
 800338a:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <HAL_UART_MspDeInit+0x84>)
 800338c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800338e:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <HAL_UART_MspDeInit+0x84>)
 8003390:	490c      	ldr	r1, [pc, #48]	; (80033c4 <HAL_UART_MspDeInit+0x98>)
 8003392:	400a      	ands	r2, r1
 8003394:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOC, L86_RXD_Pin|L86_TXD_Pin);
 8003396:	23c0      	movs	r3, #192	; 0xc0
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	4a0b      	ldr	r2, [pc, #44]	; (80033c8 <HAL_UART_MspDeInit+0x9c>)
 800339c:	0019      	movs	r1, r3
 800339e:	0010      	movs	r0, r2
 80033a0:	f000 fc28 	bl	8003bf4 <HAL_GPIO_DeInit>
}
 80033a4:	46c0      	nop			; (mov r8, r8)
 80033a6:	46bd      	mov	sp, r7
 80033a8:	b002      	add	sp, #8
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40013800 	.word	0x40013800
 80033b0:	40021000 	.word	0x40021000
 80033b4:	ffffbfff 	.word	0xffffbfff
 80033b8:	40004400 	.word	0x40004400
 80033bc:	fffdffff 	.word	0xfffdffff
 80033c0:	40004800 	.word	0x40004800
 80033c4:	fffbffff 	.word	0xfffbffff
 80033c8:	50000800 	.word	0x50000800

080033cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033d0:	e7fe      	b.n	80033d0 <NMI_Handler+0x4>

080033d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033d6:	e7fe      	b.n	80033d6 <HardFault_Handler+0x4>

080033d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80033dc:	46c0      	nop			; (mov r8, r8)
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033f0:	f000 f968 	bl	80036c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033f4:	46c0      	nop			; (mov r8, r8)
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003400:	4b03      	ldr	r3, [pc, #12]	; (8003410 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8003402:	0018      	movs	r0, r3
 8003404:	f002 fae0 	bl	80059c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8003408:	46c0      	nop			; (mov r8, r8)
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	2000077c 	.word	0x2000077c

08003414 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  return 1;
 8003418:	2301      	movs	r3, #1
}
 800341a:	0018      	movs	r0, r3
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <_kill>:

int _kill(int pid, int sig)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800342a:	f007 fc6d 	bl	800ad08 <__errno>
 800342e:	0003      	movs	r3, r0
 8003430:	2216      	movs	r2, #22
 8003432:	601a      	str	r2, [r3, #0]
  return -1;
 8003434:	2301      	movs	r3, #1
 8003436:	425b      	negs	r3, r3
}
 8003438:	0018      	movs	r0, r3
 800343a:	46bd      	mov	sp, r7
 800343c:	b002      	add	sp, #8
 800343e:	bd80      	pop	{r7, pc}

08003440 <_exit>:

void _exit (int status)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003448:	2301      	movs	r3, #1
 800344a:	425a      	negs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	0011      	movs	r1, r2
 8003450:	0018      	movs	r0, r3
 8003452:	f7ff ffe5 	bl	8003420 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003456:	e7fe      	b.n	8003456 <_exit+0x16>

08003458 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	e00a      	b.n	8003480 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800346a:	e000      	b.n	800346e <_read+0x16>
 800346c:	bf00      	nop
 800346e:	0001      	movs	r1, r0
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	1c5a      	adds	r2, r3, #1
 8003474:	60ba      	str	r2, [r7, #8]
 8003476:	b2ca      	uxtb	r2, r1
 8003478:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	3301      	adds	r3, #1
 800347e:	617b      	str	r3, [r7, #20]
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	429a      	cmp	r2, r3
 8003486:	dbf0      	blt.n	800346a <_read+0x12>
  }

  return len;
 8003488:	687b      	ldr	r3, [r7, #4]
}
 800348a:	0018      	movs	r0, r3
 800348c:	46bd      	mov	sp, r7
 800348e:	b006      	add	sp, #24
 8003490:	bd80      	pop	{r7, pc}

08003492 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b086      	sub	sp, #24
 8003496:	af00      	add	r7, sp, #0
 8003498:	60f8      	str	r0, [r7, #12]
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800349e:	2300      	movs	r3, #0
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	e009      	b.n	80034b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	1c5a      	adds	r2, r3, #1
 80034a8:	60ba      	str	r2, [r7, #8]
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	0018      	movs	r0, r3
 80034ae:	e000      	b.n	80034b2 <_write+0x20>
 80034b0:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	3301      	adds	r3, #1
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	429a      	cmp	r2, r3
 80034be:	dbf1      	blt.n	80034a4 <_write+0x12>
  }
  return len;
 80034c0:	687b      	ldr	r3, [r7, #4]
}
 80034c2:	0018      	movs	r0, r3
 80034c4:	46bd      	mov	sp, r7
 80034c6:	b006      	add	sp, #24
 80034c8:	bd80      	pop	{r7, pc}

080034ca <_close>:

int _close(int file)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b082      	sub	sp, #8
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80034d2:	2301      	movs	r3, #1
 80034d4:	425b      	negs	r3, r3
}
 80034d6:	0018      	movs	r0, r3
 80034d8:	46bd      	mov	sp, r7
 80034da:	b002      	add	sp, #8
 80034dc:	bd80      	pop	{r7, pc}

080034de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b082      	sub	sp, #8
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
 80034e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	2280      	movs	r2, #128	; 0x80
 80034ec:	0192      	lsls	r2, r2, #6
 80034ee:	605a      	str	r2, [r3, #4]
  return 0;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	0018      	movs	r0, r3
 80034f4:	46bd      	mov	sp, r7
 80034f6:	b002      	add	sp, #8
 80034f8:	bd80      	pop	{r7, pc}

080034fa <_isatty>:

int _isatty(int file)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b082      	sub	sp, #8
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003502:	2301      	movs	r3, #1
}
 8003504:	0018      	movs	r0, r3
 8003506:	46bd      	mov	sp, r7
 8003508:	b002      	add	sp, #8
 800350a:	bd80      	pop	{r7, pc}

0800350c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003518:	2300      	movs	r3, #0
}
 800351a:	0018      	movs	r0, r3
 800351c:	46bd      	mov	sp, r7
 800351e:	b004      	add	sp, #16
 8003520:	bd80      	pop	{r7, pc}
	...

08003524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800352c:	4a14      	ldr	r2, [pc, #80]	; (8003580 <_sbrk+0x5c>)
 800352e:	4b15      	ldr	r3, [pc, #84]	; (8003584 <_sbrk+0x60>)
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003538:	4b13      	ldr	r3, [pc, #76]	; (8003588 <_sbrk+0x64>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d102      	bne.n	8003546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003540:	4b11      	ldr	r3, [pc, #68]	; (8003588 <_sbrk+0x64>)
 8003542:	4a12      	ldr	r2, [pc, #72]	; (800358c <_sbrk+0x68>)
 8003544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003546:	4b10      	ldr	r3, [pc, #64]	; (8003588 <_sbrk+0x64>)
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	18d3      	adds	r3, r2, r3
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	429a      	cmp	r2, r3
 8003552:	d207      	bcs.n	8003564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003554:	f007 fbd8 	bl	800ad08 <__errno>
 8003558:	0003      	movs	r3, r0
 800355a:	220c      	movs	r2, #12
 800355c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800355e:	2301      	movs	r3, #1
 8003560:	425b      	negs	r3, r3
 8003562:	e009      	b.n	8003578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003564:	4b08      	ldr	r3, [pc, #32]	; (8003588 <_sbrk+0x64>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800356a:	4b07      	ldr	r3, [pc, #28]	; (8003588 <_sbrk+0x64>)
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	18d2      	adds	r2, r2, r3
 8003572:	4b05      	ldr	r3, [pc, #20]	; (8003588 <_sbrk+0x64>)
 8003574:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003576:	68fb      	ldr	r3, [r7, #12]
}
 8003578:	0018      	movs	r0, r3
 800357a:	46bd      	mov	sp, r7
 800357c:	b006      	add	sp, #24
 800357e:	bd80      	pop	{r7, pc}
 8003580:	20009000 	.word	0x20009000
 8003584:	00000400 	.word	0x00000400
 8003588:	20000b0c 	.word	0x20000b0c
 800358c:	20000e28 	.word	0x20000e28

08003590 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003594:	46c0      	nop			; (mov r8, r8)
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800359c:	480d      	ldr	r0, [pc, #52]	; (80035d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800359e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80035a0:	f7ff fff6 	bl	8003590 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035a4:	480c      	ldr	r0, [pc, #48]	; (80035d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80035a6:	490d      	ldr	r1, [pc, #52]	; (80035dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80035a8:	4a0d      	ldr	r2, [pc, #52]	; (80035e0 <LoopForever+0xe>)
  movs r3, #0
 80035aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035ac:	e002      	b.n	80035b4 <LoopCopyDataInit>

080035ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035b2:	3304      	adds	r3, #4

080035b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035b8:	d3f9      	bcc.n	80035ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035ba:	4a0a      	ldr	r2, [pc, #40]	; (80035e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80035bc:	4c0a      	ldr	r4, [pc, #40]	; (80035e8 <LoopForever+0x16>)
  movs r3, #0
 80035be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035c0:	e001      	b.n	80035c6 <LoopFillZerobss>

080035c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035c4:	3204      	adds	r2, #4

080035c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035c8:	d3fb      	bcc.n	80035c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80035ca:	f007 fba3 	bl	800ad14 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80035ce:	f7fe ffeb 	bl	80025a8 <main>

080035d2 <LoopForever>:

LoopForever:
  b LoopForever
 80035d2:	e7fe      	b.n	80035d2 <LoopForever>
  ldr   r0, =_estack
 80035d4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80035d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035dc:	200006e0 	.word	0x200006e0
  ldr r2, =_sidata
 80035e0:	08013510 	.word	0x08013510
  ldr r2, =_sbss
 80035e4:	200006e0 	.word	0x200006e0
  ldr r4, =_ebss
 80035e8:	20000e24 	.word	0x20000e24

080035ec <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80035ec:	e7fe      	b.n	80035ec <ADC1_COMP_IRQHandler>
	...

080035f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80035f6:	1dfb      	adds	r3, r7, #7
 80035f8:	2200      	movs	r2, #0
 80035fa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035fc:	4b0b      	ldr	r3, [pc, #44]	; (800362c <HAL_Init+0x3c>)
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	4b0a      	ldr	r3, [pc, #40]	; (800362c <HAL_Init+0x3c>)
 8003602:	2180      	movs	r1, #128	; 0x80
 8003604:	0049      	lsls	r1, r1, #1
 8003606:	430a      	orrs	r2, r1
 8003608:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800360a:	2000      	movs	r0, #0
 800360c:	f000 f810 	bl	8003630 <HAL_InitTick>
 8003610:	1e03      	subs	r3, r0, #0
 8003612:	d003      	beq.n	800361c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003614:	1dfb      	adds	r3, r7, #7
 8003616:	2201      	movs	r2, #1
 8003618:	701a      	strb	r2, [r3, #0]
 800361a:	e001      	b.n	8003620 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800361c:	f7ff fcb8 	bl	8002f90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003620:	1dfb      	adds	r3, r7, #7
 8003622:	781b      	ldrb	r3, [r3, #0]
}
 8003624:	0018      	movs	r0, r3
 8003626:	46bd      	mov	sp, r7
 8003628:	b002      	add	sp, #8
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40022000 	.word	0x40022000

08003630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003630:	b590      	push	{r4, r7, lr}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003638:	230f      	movs	r3, #15
 800363a:	18fb      	adds	r3, r7, r3
 800363c:	2200      	movs	r2, #0
 800363e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003640:	4b1d      	ldr	r3, [pc, #116]	; (80036b8 <HAL_InitTick+0x88>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d02b      	beq.n	80036a0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003648:	4b1c      	ldr	r3, [pc, #112]	; (80036bc <HAL_InitTick+0x8c>)
 800364a:	681c      	ldr	r4, [r3, #0]
 800364c:	4b1a      	ldr	r3, [pc, #104]	; (80036b8 <HAL_InitTick+0x88>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	0019      	movs	r1, r3
 8003652:	23fa      	movs	r3, #250	; 0xfa
 8003654:	0098      	lsls	r0, r3, #2
 8003656:	f7fc fd71 	bl	800013c <__udivsi3>
 800365a:	0003      	movs	r3, r0
 800365c:	0019      	movs	r1, r3
 800365e:	0020      	movs	r0, r4
 8003660:	f7fc fd6c 	bl	800013c <__udivsi3>
 8003664:	0003      	movs	r3, r0
 8003666:	0018      	movs	r0, r3
 8003668:	f000 f953 	bl	8003912 <HAL_SYSTICK_Config>
 800366c:	1e03      	subs	r3, r0, #0
 800366e:	d112      	bne.n	8003696 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b03      	cmp	r3, #3
 8003674:	d80a      	bhi.n	800368c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	2301      	movs	r3, #1
 800367a:	425b      	negs	r3, r3
 800367c:	2200      	movs	r2, #0
 800367e:	0018      	movs	r0, r3
 8003680:	f000 f91e 	bl	80038c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003684:	4b0e      	ldr	r3, [pc, #56]	; (80036c0 <HAL_InitTick+0x90>)
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	e00d      	b.n	80036a8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800368c:	230f      	movs	r3, #15
 800368e:	18fb      	adds	r3, r7, r3
 8003690:	2201      	movs	r2, #1
 8003692:	701a      	strb	r2, [r3, #0]
 8003694:	e008      	b.n	80036a8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003696:	230f      	movs	r3, #15
 8003698:	18fb      	adds	r3, r7, r3
 800369a:	2201      	movs	r2, #1
 800369c:	701a      	strb	r2, [r3, #0]
 800369e:	e003      	b.n	80036a8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80036a0:	230f      	movs	r3, #15
 80036a2:	18fb      	adds	r3, r7, r3
 80036a4:	2201      	movs	r2, #1
 80036a6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80036a8:	230f      	movs	r3, #15
 80036aa:	18fb      	adds	r3, r7, r3
 80036ac:	781b      	ldrb	r3, [r3, #0]
}
 80036ae:	0018      	movs	r0, r3
 80036b0:	46bd      	mov	sp, r7
 80036b2:	b005      	add	sp, #20
 80036b4:	bd90      	pop	{r4, r7, pc}
 80036b6:	46c0      	nop			; (mov r8, r8)
 80036b8:	20000028 	.word	0x20000028
 80036bc:	20000020 	.word	0x20000020
 80036c0:	20000024 	.word	0x20000024

080036c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036c8:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <HAL_IncTick+0x1c>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	001a      	movs	r2, r3
 80036ce:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <HAL_IncTick+0x20>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	18d2      	adds	r2, r2, r3
 80036d4:	4b03      	ldr	r3, [pc, #12]	; (80036e4 <HAL_IncTick+0x20>)
 80036d6:	601a      	str	r2, [r3, #0]
}
 80036d8:	46c0      	nop			; (mov r8, r8)
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	20000028 	.word	0x20000028
 80036e4:	20000b10 	.word	0x20000b10

080036e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  return uwTick;
 80036ec:	4b02      	ldr	r3, [pc, #8]	; (80036f8 <HAL_GetTick+0x10>)
 80036ee:	681b      	ldr	r3, [r3, #0]
}
 80036f0:	0018      	movs	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	46c0      	nop			; (mov r8, r8)
 80036f8:	20000b10 	.word	0x20000b10

080036fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003704:	f7ff fff0 	bl	80036e8 <HAL_GetTick>
 8003708:	0003      	movs	r3, r0
 800370a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	3301      	adds	r3, #1
 8003714:	d005      	beq.n	8003722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003716:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <HAL_Delay+0x44>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	001a      	movs	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	189b      	adds	r3, r3, r2
 8003720:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	f7ff ffe0 	bl	80036e8 <HAL_GetTick>
 8003728:	0002      	movs	r2, r0
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	429a      	cmp	r2, r3
 8003732:	d8f7      	bhi.n	8003724 <HAL_Delay+0x28>
  {
  }
}
 8003734:	46c0      	nop			; (mov r8, r8)
 8003736:	46c0      	nop			; (mov r8, r8)
 8003738:	46bd      	mov	sp, r7
 800373a:	b004      	add	sp, #16
 800373c:	bd80      	pop	{r7, pc}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	20000028 	.word	0x20000028

08003744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	0002      	movs	r2, r0
 800374c:	1dfb      	adds	r3, r7, #7
 800374e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003750:	1dfb      	adds	r3, r7, #7
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	2b7f      	cmp	r3, #127	; 0x7f
 8003756:	d809      	bhi.n	800376c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003758:	1dfb      	adds	r3, r7, #7
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	001a      	movs	r2, r3
 800375e:	231f      	movs	r3, #31
 8003760:	401a      	ands	r2, r3
 8003762:	4b04      	ldr	r3, [pc, #16]	; (8003774 <__NVIC_EnableIRQ+0x30>)
 8003764:	2101      	movs	r1, #1
 8003766:	4091      	lsls	r1, r2
 8003768:	000a      	movs	r2, r1
 800376a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800376c:	46c0      	nop			; (mov r8, r8)
 800376e:	46bd      	mov	sp, r7
 8003770:	b002      	add	sp, #8
 8003772:	bd80      	pop	{r7, pc}
 8003774:	e000e100 	.word	0xe000e100

08003778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003778:	b590      	push	{r4, r7, lr}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	0002      	movs	r2, r0
 8003780:	6039      	str	r1, [r7, #0]
 8003782:	1dfb      	adds	r3, r7, #7
 8003784:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003786:	1dfb      	adds	r3, r7, #7
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	2b7f      	cmp	r3, #127	; 0x7f
 800378c:	d828      	bhi.n	80037e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800378e:	4a2f      	ldr	r2, [pc, #188]	; (800384c <__NVIC_SetPriority+0xd4>)
 8003790:	1dfb      	adds	r3, r7, #7
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	b25b      	sxtb	r3, r3
 8003796:	089b      	lsrs	r3, r3, #2
 8003798:	33c0      	adds	r3, #192	; 0xc0
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	589b      	ldr	r3, [r3, r2]
 800379e:	1dfa      	adds	r2, r7, #7
 80037a0:	7812      	ldrb	r2, [r2, #0]
 80037a2:	0011      	movs	r1, r2
 80037a4:	2203      	movs	r2, #3
 80037a6:	400a      	ands	r2, r1
 80037a8:	00d2      	lsls	r2, r2, #3
 80037aa:	21ff      	movs	r1, #255	; 0xff
 80037ac:	4091      	lsls	r1, r2
 80037ae:	000a      	movs	r2, r1
 80037b0:	43d2      	mvns	r2, r2
 80037b2:	401a      	ands	r2, r3
 80037b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	019b      	lsls	r3, r3, #6
 80037ba:	22ff      	movs	r2, #255	; 0xff
 80037bc:	401a      	ands	r2, r3
 80037be:	1dfb      	adds	r3, r7, #7
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	0018      	movs	r0, r3
 80037c4:	2303      	movs	r3, #3
 80037c6:	4003      	ands	r3, r0
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037cc:	481f      	ldr	r0, [pc, #124]	; (800384c <__NVIC_SetPriority+0xd4>)
 80037ce:	1dfb      	adds	r3, r7, #7
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	b25b      	sxtb	r3, r3
 80037d4:	089b      	lsrs	r3, r3, #2
 80037d6:	430a      	orrs	r2, r1
 80037d8:	33c0      	adds	r3, #192	; 0xc0
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80037de:	e031      	b.n	8003844 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037e0:	4a1b      	ldr	r2, [pc, #108]	; (8003850 <__NVIC_SetPriority+0xd8>)
 80037e2:	1dfb      	adds	r3, r7, #7
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	0019      	movs	r1, r3
 80037e8:	230f      	movs	r3, #15
 80037ea:	400b      	ands	r3, r1
 80037ec:	3b08      	subs	r3, #8
 80037ee:	089b      	lsrs	r3, r3, #2
 80037f0:	3306      	adds	r3, #6
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	18d3      	adds	r3, r2, r3
 80037f6:	3304      	adds	r3, #4
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	1dfa      	adds	r2, r7, #7
 80037fc:	7812      	ldrb	r2, [r2, #0]
 80037fe:	0011      	movs	r1, r2
 8003800:	2203      	movs	r2, #3
 8003802:	400a      	ands	r2, r1
 8003804:	00d2      	lsls	r2, r2, #3
 8003806:	21ff      	movs	r1, #255	; 0xff
 8003808:	4091      	lsls	r1, r2
 800380a:	000a      	movs	r2, r1
 800380c:	43d2      	mvns	r2, r2
 800380e:	401a      	ands	r2, r3
 8003810:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	019b      	lsls	r3, r3, #6
 8003816:	22ff      	movs	r2, #255	; 0xff
 8003818:	401a      	ands	r2, r3
 800381a:	1dfb      	adds	r3, r7, #7
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	0018      	movs	r0, r3
 8003820:	2303      	movs	r3, #3
 8003822:	4003      	ands	r3, r0
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003828:	4809      	ldr	r0, [pc, #36]	; (8003850 <__NVIC_SetPriority+0xd8>)
 800382a:	1dfb      	adds	r3, r7, #7
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	001c      	movs	r4, r3
 8003830:	230f      	movs	r3, #15
 8003832:	4023      	ands	r3, r4
 8003834:	3b08      	subs	r3, #8
 8003836:	089b      	lsrs	r3, r3, #2
 8003838:	430a      	orrs	r2, r1
 800383a:	3306      	adds	r3, #6
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	18c3      	adds	r3, r0, r3
 8003840:	3304      	adds	r3, #4
 8003842:	601a      	str	r2, [r3, #0]
}
 8003844:	46c0      	nop			; (mov r8, r8)
 8003846:	46bd      	mov	sp, r7
 8003848:	b003      	add	sp, #12
 800384a:	bd90      	pop	{r4, r7, pc}
 800384c:	e000e100 	.word	0xe000e100
 8003850:	e000ed00 	.word	0xe000ed00

08003854 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003858:	f3bf 8f4f 	dsb	sy
}
 800385c:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800385e:	4b04      	ldr	r3, [pc, #16]	; (8003870 <__NVIC_SystemReset+0x1c>)
 8003860:	4a04      	ldr	r2, [pc, #16]	; (8003874 <__NVIC_SystemReset+0x20>)
 8003862:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003864:	f3bf 8f4f 	dsb	sy
}
 8003868:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	e7fd      	b.n	800386a <__NVIC_SystemReset+0x16>
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	e000ed00 	.word	0xe000ed00
 8003874:	05fa0004 	.word	0x05fa0004

08003878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	1e5a      	subs	r2, r3, #1
 8003884:	2380      	movs	r3, #128	; 0x80
 8003886:	045b      	lsls	r3, r3, #17
 8003888:	429a      	cmp	r2, r3
 800388a:	d301      	bcc.n	8003890 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800388c:	2301      	movs	r3, #1
 800388e:	e010      	b.n	80038b2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003890:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <SysTick_Config+0x44>)
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	3a01      	subs	r2, #1
 8003896:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003898:	2301      	movs	r3, #1
 800389a:	425b      	negs	r3, r3
 800389c:	2103      	movs	r1, #3
 800389e:	0018      	movs	r0, r3
 80038a0:	f7ff ff6a 	bl	8003778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038a4:	4b05      	ldr	r3, [pc, #20]	; (80038bc <SysTick_Config+0x44>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038aa:	4b04      	ldr	r3, [pc, #16]	; (80038bc <SysTick_Config+0x44>)
 80038ac:	2207      	movs	r2, #7
 80038ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	0018      	movs	r0, r3
 80038b4:	46bd      	mov	sp, r7
 80038b6:	b002      	add	sp, #8
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	46c0      	nop			; (mov r8, r8)
 80038bc:	e000e010 	.word	0xe000e010

080038c0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60b9      	str	r1, [r7, #8]
 80038c8:	607a      	str	r2, [r7, #4]
 80038ca:	210f      	movs	r1, #15
 80038cc:	187b      	adds	r3, r7, r1
 80038ce:	1c02      	adds	r2, r0, #0
 80038d0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	187b      	adds	r3, r7, r1
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	b25b      	sxtb	r3, r3
 80038da:	0011      	movs	r1, r2
 80038dc:	0018      	movs	r0, r3
 80038de:	f7ff ff4b 	bl	8003778 <__NVIC_SetPriority>
}
 80038e2:	46c0      	nop			; (mov r8, r8)
 80038e4:	46bd      	mov	sp, r7
 80038e6:	b004      	add	sp, #16
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b082      	sub	sp, #8
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	0002      	movs	r2, r0
 80038f2:	1dfb      	adds	r3, r7, #7
 80038f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038f6:	1dfb      	adds	r3, r7, #7
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	b25b      	sxtb	r3, r3
 80038fc:	0018      	movs	r0, r3
 80038fe:	f7ff ff21 	bl	8003744 <__NVIC_EnableIRQ>
}
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	46bd      	mov	sp, r7
 8003906:	b002      	add	sp, #8
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800390e:	f7ff ffa1 	bl	8003854 <__NVIC_SystemReset>

08003912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	0018      	movs	r0, r3
 800391e:	f7ff ffab 	bl	8003878 <SysTick_Config>
 8003922:	0003      	movs	r3, r0
}
 8003924:	0018      	movs	r0, r3
 8003926:	46bd      	mov	sp, r7
 8003928:	b002      	add	sp, #8
 800392a:	bd80      	pop	{r7, pc}

0800392c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003936:	2300      	movs	r3, #0
 8003938:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800393a:	e147      	b.n	8003bcc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2101      	movs	r1, #1
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	4091      	lsls	r1, r2
 8003946:	000a      	movs	r2, r1
 8003948:	4013      	ands	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d100      	bne.n	8003954 <HAL_GPIO_Init+0x28>
 8003952:	e138      	b.n	8003bc6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	2203      	movs	r2, #3
 800395a:	4013      	ands	r3, r2
 800395c:	2b01      	cmp	r3, #1
 800395e:	d005      	beq.n	800396c <HAL_GPIO_Init+0x40>
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2203      	movs	r2, #3
 8003966:	4013      	ands	r3, r2
 8003968:	2b02      	cmp	r3, #2
 800396a:	d130      	bne.n	80039ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	2203      	movs	r2, #3
 8003978:	409a      	lsls	r2, r3
 800397a:	0013      	movs	r3, r2
 800397c:	43da      	mvns	r2, r3
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	4013      	ands	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	409a      	lsls	r2, r3
 800398e:	0013      	movs	r3, r2
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	4313      	orrs	r3, r2
 8003994:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039a2:	2201      	movs	r2, #1
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	409a      	lsls	r2, r3
 80039a8:	0013      	movs	r3, r2
 80039aa:	43da      	mvns	r2, r3
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	4013      	ands	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	091b      	lsrs	r3, r3, #4
 80039b8:	2201      	movs	r2, #1
 80039ba:	401a      	ands	r2, r3
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	409a      	lsls	r2, r3
 80039c0:	0013      	movs	r3, r2
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2203      	movs	r2, #3
 80039d4:	4013      	ands	r3, r2
 80039d6:	2b03      	cmp	r3, #3
 80039d8:	d017      	beq.n	8003a0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	2203      	movs	r2, #3
 80039e6:	409a      	lsls	r2, r3
 80039e8:	0013      	movs	r3, r2
 80039ea:	43da      	mvns	r2, r3
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	4013      	ands	r3, r2
 80039f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	689a      	ldr	r2, [r3, #8]
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	409a      	lsls	r2, r3
 80039fc:	0013      	movs	r3, r2
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2203      	movs	r2, #3
 8003a10:	4013      	ands	r3, r2
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d123      	bne.n	8003a5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	08da      	lsrs	r2, r3, #3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	3208      	adds	r2, #8
 8003a1e:	0092      	lsls	r2, r2, #2
 8003a20:	58d3      	ldr	r3, [r2, r3]
 8003a22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	2207      	movs	r2, #7
 8003a28:	4013      	ands	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	220f      	movs	r2, #15
 8003a2e:	409a      	lsls	r2, r3
 8003a30:	0013      	movs	r3, r2
 8003a32:	43da      	mvns	r2, r3
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	4013      	ands	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	691a      	ldr	r2, [r3, #16]
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2107      	movs	r1, #7
 8003a42:	400b      	ands	r3, r1
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	409a      	lsls	r2, r3
 8003a48:	0013      	movs	r3, r2
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	08da      	lsrs	r2, r3, #3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3208      	adds	r2, #8
 8003a58:	0092      	lsls	r2, r2, #2
 8003a5a:	6939      	ldr	r1, [r7, #16]
 8003a5c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	2203      	movs	r2, #3
 8003a6a:	409a      	lsls	r2, r3
 8003a6c:	0013      	movs	r3, r2
 8003a6e:	43da      	mvns	r2, r3
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	4013      	ands	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2203      	movs	r2, #3
 8003a7c:	401a      	ands	r2, r3
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	409a      	lsls	r2, r3
 8003a84:	0013      	movs	r3, r2
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	23c0      	movs	r3, #192	; 0xc0
 8003a98:	029b      	lsls	r3, r3, #10
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	d100      	bne.n	8003aa0 <HAL_GPIO_Init+0x174>
 8003a9e:	e092      	b.n	8003bc6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003aa0:	4a50      	ldr	r2, [pc, #320]	; (8003be4 <HAL_GPIO_Init+0x2b8>)
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	089b      	lsrs	r3, r3, #2
 8003aa6:	3318      	adds	r3, #24
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	589b      	ldr	r3, [r3, r2]
 8003aac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2203      	movs	r2, #3
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	220f      	movs	r2, #15
 8003ab8:	409a      	lsls	r2, r3
 8003aba:	0013      	movs	r3, r2
 8003abc:	43da      	mvns	r2, r3
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	23a0      	movs	r3, #160	; 0xa0
 8003ac8:	05db      	lsls	r3, r3, #23
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d013      	beq.n	8003af6 <HAL_GPIO_Init+0x1ca>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a45      	ldr	r2, [pc, #276]	; (8003be8 <HAL_GPIO_Init+0x2bc>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d00d      	beq.n	8003af2 <HAL_GPIO_Init+0x1c6>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a44      	ldr	r2, [pc, #272]	; (8003bec <HAL_GPIO_Init+0x2c0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d007      	beq.n	8003aee <HAL_GPIO_Init+0x1c2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a43      	ldr	r2, [pc, #268]	; (8003bf0 <HAL_GPIO_Init+0x2c4>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d101      	bne.n	8003aea <HAL_GPIO_Init+0x1be>
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e006      	b.n	8003af8 <HAL_GPIO_Init+0x1cc>
 8003aea:	2305      	movs	r3, #5
 8003aec:	e004      	b.n	8003af8 <HAL_GPIO_Init+0x1cc>
 8003aee:	2302      	movs	r3, #2
 8003af0:	e002      	b.n	8003af8 <HAL_GPIO_Init+0x1cc>
 8003af2:	2301      	movs	r3, #1
 8003af4:	e000      	b.n	8003af8 <HAL_GPIO_Init+0x1cc>
 8003af6:	2300      	movs	r3, #0
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	2103      	movs	r1, #3
 8003afc:	400a      	ands	r2, r1
 8003afe:	00d2      	lsls	r2, r2, #3
 8003b00:	4093      	lsls	r3, r2
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003b08:	4936      	ldr	r1, [pc, #216]	; (8003be4 <HAL_GPIO_Init+0x2b8>)
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	089b      	lsrs	r3, r3, #2
 8003b0e:	3318      	adds	r3, #24
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b16:	4b33      	ldr	r3, [pc, #204]	; (8003be4 <HAL_GPIO_Init+0x2b8>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	43da      	mvns	r2, r3
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	4013      	ands	r3, r2
 8003b24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	2380      	movs	r3, #128	; 0x80
 8003b2c:	035b      	lsls	r3, r3, #13
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d003      	beq.n	8003b3a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b3a:	4b2a      	ldr	r3, [pc, #168]	; (8003be4 <HAL_GPIO_Init+0x2b8>)
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003b40:	4b28      	ldr	r3, [pc, #160]	; (8003be4 <HAL_GPIO_Init+0x2b8>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	43da      	mvns	r2, r3
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	2380      	movs	r3, #128	; 0x80
 8003b56:	039b      	lsls	r3, r3, #14
 8003b58:	4013      	ands	r3, r2
 8003b5a:	d003      	beq.n	8003b64 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b64:	4b1f      	ldr	r3, [pc, #124]	; (8003be4 <HAL_GPIO_Init+0x2b8>)
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b6a:	4a1e      	ldr	r2, [pc, #120]	; (8003be4 <HAL_GPIO_Init+0x2b8>)
 8003b6c:	2384      	movs	r3, #132	; 0x84
 8003b6e:	58d3      	ldr	r3, [r2, r3]
 8003b70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	43da      	mvns	r2, r3
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	2380      	movs	r3, #128	; 0x80
 8003b82:	029b      	lsls	r3, r3, #10
 8003b84:	4013      	ands	r3, r2
 8003b86:	d003      	beq.n	8003b90 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b90:	4914      	ldr	r1, [pc, #80]	; (8003be4 <HAL_GPIO_Init+0x2b8>)
 8003b92:	2284      	movs	r2, #132	; 0x84
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003b98:	4a12      	ldr	r2, [pc, #72]	; (8003be4 <HAL_GPIO_Init+0x2b8>)
 8003b9a:	2380      	movs	r3, #128	; 0x80
 8003b9c:	58d3      	ldr	r3, [r2, r3]
 8003b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	43da      	mvns	r2, r3
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	2380      	movs	r3, #128	; 0x80
 8003bb0:	025b      	lsls	r3, r3, #9
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	d003      	beq.n	8003bbe <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003bbe:	4909      	ldr	r1, [pc, #36]	; (8003be4 <HAL_GPIO_Init+0x2b8>)
 8003bc0:	2280      	movs	r2, #128	; 0x80
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	40da      	lsrs	r2, r3
 8003bd4:	1e13      	subs	r3, r2, #0
 8003bd6:	d000      	beq.n	8003bda <HAL_GPIO_Init+0x2ae>
 8003bd8:	e6b0      	b.n	800393c <HAL_GPIO_Init+0x10>
  }
}
 8003bda:	46c0      	nop			; (mov r8, r8)
 8003bdc:	46c0      	nop			; (mov r8, r8)
 8003bde:	46bd      	mov	sp, r7
 8003be0:	b006      	add	sp, #24
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40021800 	.word	0x40021800
 8003be8:	50000400 	.word	0x50000400
 8003bec:	50000800 	.word	0x50000800
 8003bf0:	50000c00 	.word	0x50000c00

08003bf4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003c02:	e0b4      	b.n	8003d6e <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003c04:	2201      	movs	r2, #1
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	409a      	lsls	r2, r3
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d100      	bne.n	8003c18 <HAL_GPIO_DeInit+0x24>
 8003c16:	e0a7      	b.n	8003d68 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8003c18:	4a5a      	ldr	r2, [pc, #360]	; (8003d84 <HAL_GPIO_DeInit+0x190>)
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	089b      	lsrs	r3, r3, #2
 8003c1e:	3318      	adds	r3, #24
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	589b      	ldr	r3, [r3, r2]
 8003c24:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2203      	movs	r2, #3
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	220f      	movs	r2, #15
 8003c30:	409a      	lsls	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4013      	ands	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	23a0      	movs	r3, #160	; 0xa0
 8003c3c:	05db      	lsls	r3, r3, #23
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d013      	beq.n	8003c6a <HAL_GPIO_DeInit+0x76>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a50      	ldr	r2, [pc, #320]	; (8003d88 <HAL_GPIO_DeInit+0x194>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d00d      	beq.n	8003c66 <HAL_GPIO_DeInit+0x72>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a4f      	ldr	r2, [pc, #316]	; (8003d8c <HAL_GPIO_DeInit+0x198>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d007      	beq.n	8003c62 <HAL_GPIO_DeInit+0x6e>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a4e      	ldr	r2, [pc, #312]	; (8003d90 <HAL_GPIO_DeInit+0x19c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d101      	bne.n	8003c5e <HAL_GPIO_DeInit+0x6a>
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e006      	b.n	8003c6c <HAL_GPIO_DeInit+0x78>
 8003c5e:	2305      	movs	r3, #5
 8003c60:	e004      	b.n	8003c6c <HAL_GPIO_DeInit+0x78>
 8003c62:	2302      	movs	r3, #2
 8003c64:	e002      	b.n	8003c6c <HAL_GPIO_DeInit+0x78>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <HAL_GPIO_DeInit+0x78>
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	2103      	movs	r1, #3
 8003c70:	400a      	ands	r2, r1
 8003c72:	00d2      	lsls	r2, r2, #3
 8003c74:	4093      	lsls	r3, r2
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d136      	bne.n	8003cea <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003c7c:	4a41      	ldr	r2, [pc, #260]	; (8003d84 <HAL_GPIO_DeInit+0x190>)
 8003c7e:	2380      	movs	r3, #128	; 0x80
 8003c80:	58d3      	ldr	r3, [r2, r3]
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	43d2      	mvns	r2, r2
 8003c86:	493f      	ldr	r1, [pc, #252]	; (8003d84 <HAL_GPIO_DeInit+0x190>)
 8003c88:	4013      	ands	r3, r2
 8003c8a:	2280      	movs	r2, #128	; 0x80
 8003c8c:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8003c8e:	4a3d      	ldr	r2, [pc, #244]	; (8003d84 <HAL_GPIO_DeInit+0x190>)
 8003c90:	2384      	movs	r3, #132	; 0x84
 8003c92:	58d3      	ldr	r3, [r2, r3]
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	43d2      	mvns	r2, r2
 8003c98:	493a      	ldr	r1, [pc, #232]	; (8003d84 <HAL_GPIO_DeInit+0x190>)
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	2284      	movs	r2, #132	; 0x84
 8003c9e:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003ca0:	4b38      	ldr	r3, [pc, #224]	; (8003d84 <HAL_GPIO_DeInit+0x190>)
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	43d9      	mvns	r1, r3
 8003ca8:	4b36      	ldr	r3, [pc, #216]	; (8003d84 <HAL_GPIO_DeInit+0x190>)
 8003caa:	400a      	ands	r2, r1
 8003cac:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003cae:	4b35      	ldr	r3, [pc, #212]	; (8003d84 <HAL_GPIO_DeInit+0x190>)
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	43d9      	mvns	r1, r3
 8003cb6:	4b33      	ldr	r3, [pc, #204]	; (8003d84 <HAL_GPIO_DeInit+0x190>)
 8003cb8:	400a      	ands	r2, r1
 8003cba:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	2203      	movs	r2, #3
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	220f      	movs	r2, #15
 8003cc6:	409a      	lsls	r2, r3
 8003cc8:	0013      	movs	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8003ccc:	4a2d      	ldr	r2, [pc, #180]	; (8003d84 <HAL_GPIO_DeInit+0x190>)
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	089b      	lsrs	r3, r3, #2
 8003cd2:	3318      	adds	r3, #24
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	589a      	ldr	r2, [r3, r2]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	43d9      	mvns	r1, r3
 8003cdc:	4829      	ldr	r0, [pc, #164]	; (8003d84 <HAL_GPIO_DeInit+0x190>)
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	089b      	lsrs	r3, r3, #2
 8003ce2:	400a      	ands	r2, r1
 8003ce4:	3318      	adds	r3, #24
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	2103      	movs	r1, #3
 8003cf4:	4099      	lsls	r1, r3
 8003cf6:	000b      	movs	r3, r1
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	08da      	lsrs	r2, r3, #3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	3208      	adds	r2, #8
 8003d06:	0092      	lsls	r2, r2, #2
 8003d08:	58d3      	ldr	r3, [r2, r3]
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	2107      	movs	r1, #7
 8003d0e:	400a      	ands	r2, r1
 8003d10:	0092      	lsls	r2, r2, #2
 8003d12:	210f      	movs	r1, #15
 8003d14:	4091      	lsls	r1, r2
 8003d16:	000a      	movs	r2, r1
 8003d18:	43d1      	mvns	r1, r2
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	08d2      	lsrs	r2, r2, #3
 8003d1e:	4019      	ands	r1, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3208      	adds	r2, #8
 8003d24:	0092      	lsls	r2, r2, #2
 8003d26:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	0052      	lsls	r2, r2, #1
 8003d30:	2103      	movs	r1, #3
 8003d32:	4091      	lsls	r1, r2
 8003d34:	000a      	movs	r2, r1
 8003d36:	43d2      	mvns	r2, r2
 8003d38:	401a      	ands	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2101      	movs	r1, #1
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	4091      	lsls	r1, r2
 8003d48:	000a      	movs	r2, r1
 8003d4a:	43d2      	mvns	r2, r2
 8003d4c:	401a      	ands	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	0052      	lsls	r2, r2, #1
 8003d5a:	2103      	movs	r1, #3
 8003d5c:	4091      	lsls	r1, r2
 8003d5e:	000a      	movs	r2, r1
 8003d60:	43d2      	mvns	r2, r2
 8003d62:	401a      	ands	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	40da      	lsrs	r2, r3
 8003d74:	1e13      	subs	r3, r2, #0
 8003d76:	d000      	beq.n	8003d7a <HAL_GPIO_DeInit+0x186>
 8003d78:	e744      	b.n	8003c04 <HAL_GPIO_DeInit+0x10>
  }
}
 8003d7a:	46c0      	nop			; (mov r8, r8)
 8003d7c:	46c0      	nop			; (mov r8, r8)
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	b006      	add	sp, #24
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40021800 	.word	0x40021800
 8003d88:	50000400 	.word	0x50000400
 8003d8c:	50000800 	.word	0x50000800
 8003d90:	50000c00 	.word	0x50000c00

08003d94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	000a      	movs	r2, r1
 8003d9e:	1cbb      	adds	r3, r7, #2
 8003da0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	1cba      	adds	r2, r7, #2
 8003da8:	8812      	ldrh	r2, [r2, #0]
 8003daa:	4013      	ands	r3, r2
 8003dac:	d004      	beq.n	8003db8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003dae:	230f      	movs	r3, #15
 8003db0:	18fb      	adds	r3, r7, r3
 8003db2:	2201      	movs	r2, #1
 8003db4:	701a      	strb	r2, [r3, #0]
 8003db6:	e003      	b.n	8003dc0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003db8:	230f      	movs	r3, #15
 8003dba:	18fb      	adds	r3, r7, r3
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003dc0:	230f      	movs	r3, #15
 8003dc2:	18fb      	adds	r3, r7, r3
 8003dc4:	781b      	ldrb	r3, [r3, #0]
}
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	b004      	add	sp, #16
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b082      	sub	sp, #8
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
 8003dd6:	0008      	movs	r0, r1
 8003dd8:	0011      	movs	r1, r2
 8003dda:	1cbb      	adds	r3, r7, #2
 8003ddc:	1c02      	adds	r2, r0, #0
 8003dde:	801a      	strh	r2, [r3, #0]
 8003de0:	1c7b      	adds	r3, r7, #1
 8003de2:	1c0a      	adds	r2, r1, #0
 8003de4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003de6:	1c7b      	adds	r3, r7, #1
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d004      	beq.n	8003df8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003dee:	1cbb      	adds	r3, r7, #2
 8003df0:	881a      	ldrh	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003df6:	e003      	b.n	8003e00 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003df8:	1cbb      	adds	r3, r7, #2
 8003dfa:	881a      	ldrh	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e00:	46c0      	nop			; (mov r8, r8)
 8003e02:	46bd      	mov	sp, r7
 8003e04:	b002      	add	sp, #8
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e082      	b.n	8003f20 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2241      	movs	r2, #65	; 0x41
 8003e1e:	5c9b      	ldrb	r3, [r3, r2]
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d107      	bne.n	8003e36 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2240      	movs	r2, #64	; 0x40
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	0018      	movs	r0, r3
 8003e32:	f7ff f8d1 	bl	8002fd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2241      	movs	r2, #65	; 0x41
 8003e3a:	2124      	movs	r1, #36	; 0x24
 8003e3c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2101      	movs	r1, #1
 8003e4a:	438a      	bics	r2, r1
 8003e4c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4934      	ldr	r1, [pc, #208]	; (8003f28 <HAL_I2C_Init+0x120>)
 8003e58:	400a      	ands	r2, r1
 8003e5a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4931      	ldr	r1, [pc, #196]	; (8003f2c <HAL_I2C_Init+0x124>)
 8003e68:	400a      	ands	r2, r1
 8003e6a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d108      	bne.n	8003e86 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2180      	movs	r1, #128	; 0x80
 8003e7e:	0209      	lsls	r1, r1, #8
 8003e80:	430a      	orrs	r2, r1
 8003e82:	609a      	str	r2, [r3, #8]
 8003e84:	e007      	b.n	8003e96 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689a      	ldr	r2, [r3, #8]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2184      	movs	r1, #132	; 0x84
 8003e90:	0209      	lsls	r1, r1, #8
 8003e92:	430a      	orrs	r2, r1
 8003e94:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d104      	bne.n	8003ea8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2280      	movs	r2, #128	; 0x80
 8003ea4:	0112      	lsls	r2, r2, #4
 8003ea6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	491f      	ldr	r1, [pc, #124]	; (8003f30 <HAL_I2C_Init+0x128>)
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68da      	ldr	r2, [r3, #12]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	491a      	ldr	r1, [pc, #104]	; (8003f2c <HAL_I2C_Init+0x124>)
 8003ec4:	400a      	ands	r2, r1
 8003ec6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691a      	ldr	r2, [r3, #16]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	69d9      	ldr	r1, [r3, #28]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1a      	ldr	r2, [r3, #32]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2101      	movs	r1, #1
 8003efe:	430a      	orrs	r2, r1
 8003f00:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2241      	movs	r2, #65	; 0x41
 8003f0c:	2120      	movs	r1, #32
 8003f0e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2242      	movs	r2, #66	; 0x42
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	0018      	movs	r0, r3
 8003f22:	46bd      	mov	sp, r7
 8003f24:	b002      	add	sp, #8
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	f0ffffff 	.word	0xf0ffffff
 8003f2c:	ffff7fff 	.word	0xffff7fff
 8003f30:	02008000 	.word	0x02008000

08003f34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2241      	movs	r2, #65	; 0x41
 8003f42:	5c9b      	ldrb	r3, [r3, r2]
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b20      	cmp	r3, #32
 8003f48:	d138      	bne.n	8003fbc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2240      	movs	r2, #64	; 0x40
 8003f4e:	5c9b      	ldrb	r3, [r3, r2]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d101      	bne.n	8003f58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f54:	2302      	movs	r3, #2
 8003f56:	e032      	b.n	8003fbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2240      	movs	r2, #64	; 0x40
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2241      	movs	r2, #65	; 0x41
 8003f64:	2124      	movs	r1, #36	; 0x24
 8003f66:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2101      	movs	r1, #1
 8003f74:	438a      	bics	r2, r1
 8003f76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4911      	ldr	r1, [pc, #68]	; (8003fc8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003f84:	400a      	ands	r2, r1
 8003f86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6819      	ldr	r1, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	430a      	orrs	r2, r1
 8003f96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2241      	movs	r2, #65	; 0x41
 8003fac:	2120      	movs	r1, #32
 8003fae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2240      	movs	r2, #64	; 0x40
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	e000      	b.n	8003fbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003fbc:	2302      	movs	r3, #2
  }
}
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	b002      	add	sp, #8
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	ffffefff 	.word	0xffffefff

08003fcc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2241      	movs	r2, #65	; 0x41
 8003fda:	5c9b      	ldrb	r3, [r3, r2]
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b20      	cmp	r3, #32
 8003fe0:	d139      	bne.n	8004056 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2240      	movs	r2, #64	; 0x40
 8003fe6:	5c9b      	ldrb	r3, [r3, r2]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d101      	bne.n	8003ff0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003fec:	2302      	movs	r3, #2
 8003fee:	e033      	b.n	8004058 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2240      	movs	r2, #64	; 0x40
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2241      	movs	r2, #65	; 0x41
 8003ffc:	2124      	movs	r1, #36	; 0x24
 8003ffe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2101      	movs	r1, #1
 800400c:	438a      	bics	r2, r1
 800400e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4a11      	ldr	r2, [pc, #68]	; (8004060 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800401c:	4013      	ands	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	021b      	lsls	r3, r3, #8
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	4313      	orrs	r3, r2
 8004028:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2101      	movs	r1, #1
 800403e:	430a      	orrs	r2, r1
 8004040:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2241      	movs	r2, #65	; 0x41
 8004046:	2120      	movs	r1, #32
 8004048:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2240      	movs	r2, #64	; 0x40
 800404e:	2100      	movs	r1, #0
 8004050:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	e000      	b.n	8004058 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004056:	2302      	movs	r3, #2
  }
}
 8004058:	0018      	movs	r0, r3
 800405a:	46bd      	mov	sp, r7
 800405c:	b004      	add	sp, #16
 800405e:	bd80      	pop	{r7, pc}
 8004060:	fffff0ff 	.word	0xfffff0ff

08004064 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800406c:	4b19      	ldr	r3, [pc, #100]	; (80040d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a19      	ldr	r2, [pc, #100]	; (80040d8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004072:	4013      	ands	r3, r2
 8004074:	0019      	movs	r1, r3
 8004076:	4b17      	ldr	r3, [pc, #92]	; (80040d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	430a      	orrs	r2, r1
 800407c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	2380      	movs	r3, #128	; 0x80
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	429a      	cmp	r2, r3
 8004086:	d11f      	bne.n	80040c8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004088:	4b14      	ldr	r3, [pc, #80]	; (80040dc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	0013      	movs	r3, r2
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	189b      	adds	r3, r3, r2
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	4912      	ldr	r1, [pc, #72]	; (80040e0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004096:	0018      	movs	r0, r3
 8004098:	f7fc f850 	bl	800013c <__udivsi3>
 800409c:	0003      	movs	r3, r0
 800409e:	3301      	adds	r3, #1
 80040a0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040a2:	e008      	b.n	80040b6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	3b01      	subs	r3, #1
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	e001      	b.n	80040b6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e009      	b.n	80040ca <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040b6:	4b07      	ldr	r3, [pc, #28]	; (80040d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80040b8:	695a      	ldr	r2, [r3, #20]
 80040ba:	2380      	movs	r3, #128	; 0x80
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	401a      	ands	r2, r3
 80040c0:	2380      	movs	r3, #128	; 0x80
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d0ed      	beq.n	80040a4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	0018      	movs	r0, r3
 80040cc:	46bd      	mov	sp, r7
 80040ce:	b004      	add	sp, #16
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	40007000 	.word	0x40007000
 80040d8:	fffff9ff 	.word	0xfffff9ff
 80040dc:	20000020 	.word	0x20000020
 80040e0:	000f4240 	.word	0x000f4240

080040e4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80040e8:	4b03      	ldr	r3, [pc, #12]	; (80040f8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	23e0      	movs	r3, #224	; 0xe0
 80040ee:	01db      	lsls	r3, r3, #7
 80040f0:	4013      	ands	r3, r2
}
 80040f2:	0018      	movs	r0, r3
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40021000 	.word	0x40021000

080040fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b088      	sub	sp, #32
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e2fe      	b.n	800470c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2201      	movs	r2, #1
 8004114:	4013      	ands	r3, r2
 8004116:	d100      	bne.n	800411a <HAL_RCC_OscConfig+0x1e>
 8004118:	e07c      	b.n	8004214 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800411a:	4bc3      	ldr	r3, [pc, #780]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	2238      	movs	r2, #56	; 0x38
 8004120:	4013      	ands	r3, r2
 8004122:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004124:	4bc0      	ldr	r3, [pc, #768]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	2203      	movs	r2, #3
 800412a:	4013      	ands	r3, r2
 800412c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	2b10      	cmp	r3, #16
 8004132:	d102      	bne.n	800413a <HAL_RCC_OscConfig+0x3e>
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	2b03      	cmp	r3, #3
 8004138:	d002      	beq.n	8004140 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	2b08      	cmp	r3, #8
 800413e:	d10b      	bne.n	8004158 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004140:	4bb9      	ldr	r3, [pc, #740]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	2380      	movs	r3, #128	; 0x80
 8004146:	029b      	lsls	r3, r3, #10
 8004148:	4013      	ands	r3, r2
 800414a:	d062      	beq.n	8004212 <HAL_RCC_OscConfig+0x116>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d15e      	bne.n	8004212 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e2d9      	b.n	800470c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	2380      	movs	r3, #128	; 0x80
 800415e:	025b      	lsls	r3, r3, #9
 8004160:	429a      	cmp	r2, r3
 8004162:	d107      	bne.n	8004174 <HAL_RCC_OscConfig+0x78>
 8004164:	4bb0      	ldr	r3, [pc, #704]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	4baf      	ldr	r3, [pc, #700]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 800416a:	2180      	movs	r1, #128	; 0x80
 800416c:	0249      	lsls	r1, r1, #9
 800416e:	430a      	orrs	r2, r1
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	e020      	b.n	80041b6 <HAL_RCC_OscConfig+0xba>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	23a0      	movs	r3, #160	; 0xa0
 800417a:	02db      	lsls	r3, r3, #11
 800417c:	429a      	cmp	r2, r3
 800417e:	d10e      	bne.n	800419e <HAL_RCC_OscConfig+0xa2>
 8004180:	4ba9      	ldr	r3, [pc, #676]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	4ba8      	ldr	r3, [pc, #672]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 8004186:	2180      	movs	r1, #128	; 0x80
 8004188:	02c9      	lsls	r1, r1, #11
 800418a:	430a      	orrs	r2, r1
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	4ba6      	ldr	r3, [pc, #664]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	4ba5      	ldr	r3, [pc, #660]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 8004194:	2180      	movs	r1, #128	; 0x80
 8004196:	0249      	lsls	r1, r1, #9
 8004198:	430a      	orrs	r2, r1
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	e00b      	b.n	80041b6 <HAL_RCC_OscConfig+0xba>
 800419e:	4ba2      	ldr	r3, [pc, #648]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	4ba1      	ldr	r3, [pc, #644]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 80041a4:	49a1      	ldr	r1, [pc, #644]	; (800442c <HAL_RCC_OscConfig+0x330>)
 80041a6:	400a      	ands	r2, r1
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	4b9f      	ldr	r3, [pc, #636]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	4b9e      	ldr	r3, [pc, #632]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 80041b0:	499f      	ldr	r1, [pc, #636]	; (8004430 <HAL_RCC_OscConfig+0x334>)
 80041b2:	400a      	ands	r2, r1
 80041b4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d014      	beq.n	80041e8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041be:	f7ff fa93 	bl	80036e8 <HAL_GetTick>
 80041c2:	0003      	movs	r3, r0
 80041c4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041c8:	f7ff fa8e 	bl	80036e8 <HAL_GetTick>
 80041cc:	0002      	movs	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b64      	cmp	r3, #100	; 0x64
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e298      	b.n	800470c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041da:	4b93      	ldr	r3, [pc, #588]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	2380      	movs	r3, #128	; 0x80
 80041e0:	029b      	lsls	r3, r3, #10
 80041e2:	4013      	ands	r3, r2
 80041e4:	d0f0      	beq.n	80041c8 <HAL_RCC_OscConfig+0xcc>
 80041e6:	e015      	b.n	8004214 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e8:	f7ff fa7e 	bl	80036e8 <HAL_GetTick>
 80041ec:	0003      	movs	r3, r0
 80041ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041f0:	e008      	b.n	8004204 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041f2:	f7ff fa79 	bl	80036e8 <HAL_GetTick>
 80041f6:	0002      	movs	r2, r0
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b64      	cmp	r3, #100	; 0x64
 80041fe:	d901      	bls.n	8004204 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e283      	b.n	800470c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004204:	4b88      	ldr	r3, [pc, #544]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	2380      	movs	r3, #128	; 0x80
 800420a:	029b      	lsls	r3, r3, #10
 800420c:	4013      	ands	r3, r2
 800420e:	d1f0      	bne.n	80041f2 <HAL_RCC_OscConfig+0xf6>
 8004210:	e000      	b.n	8004214 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004212:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2202      	movs	r2, #2
 800421a:	4013      	ands	r3, r2
 800421c:	d100      	bne.n	8004220 <HAL_RCC_OscConfig+0x124>
 800421e:	e099      	b.n	8004354 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004220:	4b81      	ldr	r3, [pc, #516]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	2238      	movs	r2, #56	; 0x38
 8004226:	4013      	ands	r3, r2
 8004228:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800422a:	4b7f      	ldr	r3, [pc, #508]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	2203      	movs	r2, #3
 8004230:	4013      	ands	r3, r2
 8004232:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	2b10      	cmp	r3, #16
 8004238:	d102      	bne.n	8004240 <HAL_RCC_OscConfig+0x144>
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	2b02      	cmp	r3, #2
 800423e:	d002      	beq.n	8004246 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d135      	bne.n	80042b2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004246:	4b78      	ldr	r3, [pc, #480]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	2380      	movs	r3, #128	; 0x80
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	4013      	ands	r3, r2
 8004250:	d005      	beq.n	800425e <HAL_RCC_OscConfig+0x162>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e256      	b.n	800470c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800425e:	4b72      	ldr	r3, [pc, #456]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	4a74      	ldr	r2, [pc, #464]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 8004264:	4013      	ands	r3, r2
 8004266:	0019      	movs	r1, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	021a      	lsls	r2, r3, #8
 800426e:	4b6e      	ldr	r3, [pc, #440]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 8004270:	430a      	orrs	r2, r1
 8004272:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d112      	bne.n	80042a0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800427a:	4b6b      	ldr	r3, [pc, #428]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a6e      	ldr	r2, [pc, #440]	; (8004438 <HAL_RCC_OscConfig+0x33c>)
 8004280:	4013      	ands	r3, r2
 8004282:	0019      	movs	r1, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	691a      	ldr	r2, [r3, #16]
 8004288:	4b67      	ldr	r3, [pc, #412]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 800428a:	430a      	orrs	r2, r1
 800428c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800428e:	4b66      	ldr	r3, [pc, #408]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	0adb      	lsrs	r3, r3, #11
 8004294:	2207      	movs	r2, #7
 8004296:	4013      	ands	r3, r2
 8004298:	4a68      	ldr	r2, [pc, #416]	; (800443c <HAL_RCC_OscConfig+0x340>)
 800429a:	40da      	lsrs	r2, r3
 800429c:	4b68      	ldr	r3, [pc, #416]	; (8004440 <HAL_RCC_OscConfig+0x344>)
 800429e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80042a0:	4b68      	ldr	r3, [pc, #416]	; (8004444 <HAL_RCC_OscConfig+0x348>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	0018      	movs	r0, r3
 80042a6:	f7ff f9c3 	bl	8003630 <HAL_InitTick>
 80042aa:	1e03      	subs	r3, r0, #0
 80042ac:	d051      	beq.n	8004352 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e22c      	b.n	800470c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d030      	beq.n	800431c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80042ba:	4b5b      	ldr	r3, [pc, #364]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a5e      	ldr	r2, [pc, #376]	; (8004438 <HAL_RCC_OscConfig+0x33c>)
 80042c0:	4013      	ands	r3, r2
 80042c2:	0019      	movs	r1, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	691a      	ldr	r2, [r3, #16]
 80042c8:	4b57      	ldr	r3, [pc, #348]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 80042ca:	430a      	orrs	r2, r1
 80042cc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80042ce:	4b56      	ldr	r3, [pc, #344]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	4b55      	ldr	r3, [pc, #340]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 80042d4:	2180      	movs	r1, #128	; 0x80
 80042d6:	0049      	lsls	r1, r1, #1
 80042d8:	430a      	orrs	r2, r1
 80042da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042dc:	f7ff fa04 	bl	80036e8 <HAL_GetTick>
 80042e0:	0003      	movs	r3, r0
 80042e2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042e4:	e008      	b.n	80042f8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042e6:	f7ff f9ff 	bl	80036e8 <HAL_GetTick>
 80042ea:	0002      	movs	r2, r0
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e209      	b.n	800470c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042f8:	4b4b      	ldr	r3, [pc, #300]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	2380      	movs	r3, #128	; 0x80
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	4013      	ands	r3, r2
 8004302:	d0f0      	beq.n	80042e6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004304:	4b48      	ldr	r3, [pc, #288]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	4a4a      	ldr	r2, [pc, #296]	; (8004434 <HAL_RCC_OscConfig+0x338>)
 800430a:	4013      	ands	r3, r2
 800430c:	0019      	movs	r1, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	021a      	lsls	r2, r3, #8
 8004314:	4b44      	ldr	r3, [pc, #272]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 8004316:	430a      	orrs	r2, r1
 8004318:	605a      	str	r2, [r3, #4]
 800431a:	e01b      	b.n	8004354 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800431c:	4b42      	ldr	r3, [pc, #264]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	4b41      	ldr	r3, [pc, #260]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 8004322:	4949      	ldr	r1, [pc, #292]	; (8004448 <HAL_RCC_OscConfig+0x34c>)
 8004324:	400a      	ands	r2, r1
 8004326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004328:	f7ff f9de 	bl	80036e8 <HAL_GetTick>
 800432c:	0003      	movs	r3, r0
 800432e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004330:	e008      	b.n	8004344 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004332:	f7ff f9d9 	bl	80036e8 <HAL_GetTick>
 8004336:	0002      	movs	r2, r0
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e1e3      	b.n	800470c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004344:	4b38      	ldr	r3, [pc, #224]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	2380      	movs	r3, #128	; 0x80
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	4013      	ands	r3, r2
 800434e:	d1f0      	bne.n	8004332 <HAL_RCC_OscConfig+0x236>
 8004350:	e000      	b.n	8004354 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004352:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2208      	movs	r2, #8
 800435a:	4013      	ands	r3, r2
 800435c:	d047      	beq.n	80043ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800435e:	4b32      	ldr	r3, [pc, #200]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	2238      	movs	r2, #56	; 0x38
 8004364:	4013      	ands	r3, r2
 8004366:	2b18      	cmp	r3, #24
 8004368:	d10a      	bne.n	8004380 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800436a:	4b2f      	ldr	r3, [pc, #188]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 800436c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800436e:	2202      	movs	r2, #2
 8004370:	4013      	ands	r3, r2
 8004372:	d03c      	beq.n	80043ee <HAL_RCC_OscConfig+0x2f2>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d138      	bne.n	80043ee <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e1c5      	b.n	800470c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d019      	beq.n	80043bc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004388:	4b27      	ldr	r3, [pc, #156]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 800438a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800438c:	4b26      	ldr	r3, [pc, #152]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 800438e:	2101      	movs	r1, #1
 8004390:	430a      	orrs	r2, r1
 8004392:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004394:	f7ff f9a8 	bl	80036e8 <HAL_GetTick>
 8004398:	0003      	movs	r3, r0
 800439a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800439c:	e008      	b.n	80043b0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800439e:	f7ff f9a3 	bl	80036e8 <HAL_GetTick>
 80043a2:	0002      	movs	r2, r0
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e1ad      	b.n	800470c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043b0:	4b1d      	ldr	r3, [pc, #116]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 80043b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b4:	2202      	movs	r2, #2
 80043b6:	4013      	ands	r3, r2
 80043b8:	d0f1      	beq.n	800439e <HAL_RCC_OscConfig+0x2a2>
 80043ba:	e018      	b.n	80043ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80043bc:	4b1a      	ldr	r3, [pc, #104]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 80043be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80043c0:	4b19      	ldr	r3, [pc, #100]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 80043c2:	2101      	movs	r1, #1
 80043c4:	438a      	bics	r2, r1
 80043c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c8:	f7ff f98e 	bl	80036e8 <HAL_GetTick>
 80043cc:	0003      	movs	r3, r0
 80043ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043d0:	e008      	b.n	80043e4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043d2:	f7ff f989 	bl	80036e8 <HAL_GetTick>
 80043d6:	0002      	movs	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e193      	b.n	800470c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043e4:	4b10      	ldr	r3, [pc, #64]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 80043e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043e8:	2202      	movs	r2, #2
 80043ea:	4013      	ands	r3, r2
 80043ec:	d1f1      	bne.n	80043d2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2204      	movs	r2, #4
 80043f4:	4013      	ands	r3, r2
 80043f6:	d100      	bne.n	80043fa <HAL_RCC_OscConfig+0x2fe>
 80043f8:	e0c6      	b.n	8004588 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043fa:	231f      	movs	r3, #31
 80043fc:	18fb      	adds	r3, r7, r3
 80043fe:	2200      	movs	r2, #0
 8004400:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004402:	4b09      	ldr	r3, [pc, #36]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	2238      	movs	r2, #56	; 0x38
 8004408:	4013      	ands	r3, r2
 800440a:	2b20      	cmp	r3, #32
 800440c:	d11e      	bne.n	800444c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800440e:	4b06      	ldr	r3, [pc, #24]	; (8004428 <HAL_RCC_OscConfig+0x32c>)
 8004410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004412:	2202      	movs	r2, #2
 8004414:	4013      	ands	r3, r2
 8004416:	d100      	bne.n	800441a <HAL_RCC_OscConfig+0x31e>
 8004418:	e0b6      	b.n	8004588 <HAL_RCC_OscConfig+0x48c>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d000      	beq.n	8004424 <HAL_RCC_OscConfig+0x328>
 8004422:	e0b1      	b.n	8004588 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e171      	b.n	800470c <HAL_RCC_OscConfig+0x610>
 8004428:	40021000 	.word	0x40021000
 800442c:	fffeffff 	.word	0xfffeffff
 8004430:	fffbffff 	.word	0xfffbffff
 8004434:	ffff80ff 	.word	0xffff80ff
 8004438:	ffffc7ff 	.word	0xffffc7ff
 800443c:	00f42400 	.word	0x00f42400
 8004440:	20000020 	.word	0x20000020
 8004444:	20000024 	.word	0x20000024
 8004448:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800444c:	4bb1      	ldr	r3, [pc, #708]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 800444e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004450:	2380      	movs	r3, #128	; 0x80
 8004452:	055b      	lsls	r3, r3, #21
 8004454:	4013      	ands	r3, r2
 8004456:	d101      	bne.n	800445c <HAL_RCC_OscConfig+0x360>
 8004458:	2301      	movs	r3, #1
 800445a:	e000      	b.n	800445e <HAL_RCC_OscConfig+0x362>
 800445c:	2300      	movs	r3, #0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d011      	beq.n	8004486 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004462:	4bac      	ldr	r3, [pc, #688]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 8004464:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004466:	4bab      	ldr	r3, [pc, #684]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 8004468:	2180      	movs	r1, #128	; 0x80
 800446a:	0549      	lsls	r1, r1, #21
 800446c:	430a      	orrs	r2, r1
 800446e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004470:	4ba8      	ldr	r3, [pc, #672]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 8004472:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004474:	2380      	movs	r3, #128	; 0x80
 8004476:	055b      	lsls	r3, r3, #21
 8004478:	4013      	ands	r3, r2
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800447e:	231f      	movs	r3, #31
 8004480:	18fb      	adds	r3, r7, r3
 8004482:	2201      	movs	r2, #1
 8004484:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004486:	4ba4      	ldr	r3, [pc, #656]	; (8004718 <HAL_RCC_OscConfig+0x61c>)
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	2380      	movs	r3, #128	; 0x80
 800448c:	005b      	lsls	r3, r3, #1
 800448e:	4013      	ands	r3, r2
 8004490:	d11a      	bne.n	80044c8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004492:	4ba1      	ldr	r3, [pc, #644]	; (8004718 <HAL_RCC_OscConfig+0x61c>)
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	4ba0      	ldr	r3, [pc, #640]	; (8004718 <HAL_RCC_OscConfig+0x61c>)
 8004498:	2180      	movs	r1, #128	; 0x80
 800449a:	0049      	lsls	r1, r1, #1
 800449c:	430a      	orrs	r2, r1
 800449e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80044a0:	f7ff f922 	bl	80036e8 <HAL_GetTick>
 80044a4:	0003      	movs	r3, r0
 80044a6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044a8:	e008      	b.n	80044bc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044aa:	f7ff f91d 	bl	80036e8 <HAL_GetTick>
 80044ae:	0002      	movs	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e127      	b.n	800470c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044bc:	4b96      	ldr	r3, [pc, #600]	; (8004718 <HAL_RCC_OscConfig+0x61c>)
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	2380      	movs	r3, #128	; 0x80
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	4013      	ands	r3, r2
 80044c6:	d0f0      	beq.n	80044aa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d106      	bne.n	80044de <HAL_RCC_OscConfig+0x3e2>
 80044d0:	4b90      	ldr	r3, [pc, #576]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 80044d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80044d4:	4b8f      	ldr	r3, [pc, #572]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 80044d6:	2101      	movs	r1, #1
 80044d8:	430a      	orrs	r2, r1
 80044da:	65da      	str	r2, [r3, #92]	; 0x5c
 80044dc:	e01c      	b.n	8004518 <HAL_RCC_OscConfig+0x41c>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	2b05      	cmp	r3, #5
 80044e4:	d10c      	bne.n	8004500 <HAL_RCC_OscConfig+0x404>
 80044e6:	4b8b      	ldr	r3, [pc, #556]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 80044e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80044ea:	4b8a      	ldr	r3, [pc, #552]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 80044ec:	2104      	movs	r1, #4
 80044ee:	430a      	orrs	r2, r1
 80044f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80044f2:	4b88      	ldr	r3, [pc, #544]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 80044f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80044f6:	4b87      	ldr	r3, [pc, #540]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 80044f8:	2101      	movs	r1, #1
 80044fa:	430a      	orrs	r2, r1
 80044fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80044fe:	e00b      	b.n	8004518 <HAL_RCC_OscConfig+0x41c>
 8004500:	4b84      	ldr	r3, [pc, #528]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 8004502:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004504:	4b83      	ldr	r3, [pc, #524]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 8004506:	2101      	movs	r1, #1
 8004508:	438a      	bics	r2, r1
 800450a:	65da      	str	r2, [r3, #92]	; 0x5c
 800450c:	4b81      	ldr	r3, [pc, #516]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 800450e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004510:	4b80      	ldr	r3, [pc, #512]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 8004512:	2104      	movs	r1, #4
 8004514:	438a      	bics	r2, r1
 8004516:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d014      	beq.n	800454a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004520:	f7ff f8e2 	bl	80036e8 <HAL_GetTick>
 8004524:	0003      	movs	r3, r0
 8004526:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004528:	e009      	b.n	800453e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800452a:	f7ff f8dd 	bl	80036e8 <HAL_GetTick>
 800452e:	0002      	movs	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	4a79      	ldr	r2, [pc, #484]	; (800471c <HAL_RCC_OscConfig+0x620>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e0e6      	b.n	800470c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800453e:	4b75      	ldr	r3, [pc, #468]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 8004540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004542:	2202      	movs	r2, #2
 8004544:	4013      	ands	r3, r2
 8004546:	d0f0      	beq.n	800452a <HAL_RCC_OscConfig+0x42e>
 8004548:	e013      	b.n	8004572 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454a:	f7ff f8cd 	bl	80036e8 <HAL_GetTick>
 800454e:	0003      	movs	r3, r0
 8004550:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004552:	e009      	b.n	8004568 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004554:	f7ff f8c8 	bl	80036e8 <HAL_GetTick>
 8004558:	0002      	movs	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	4a6f      	ldr	r2, [pc, #444]	; (800471c <HAL_RCC_OscConfig+0x620>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d901      	bls.n	8004568 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e0d1      	b.n	800470c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004568:	4b6a      	ldr	r3, [pc, #424]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 800456a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800456c:	2202      	movs	r2, #2
 800456e:	4013      	ands	r3, r2
 8004570:	d1f0      	bne.n	8004554 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004572:	231f      	movs	r3, #31
 8004574:	18fb      	adds	r3, r7, r3
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d105      	bne.n	8004588 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800457c:	4b65      	ldr	r3, [pc, #404]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 800457e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004580:	4b64      	ldr	r3, [pc, #400]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 8004582:	4967      	ldr	r1, [pc, #412]	; (8004720 <HAL_RCC_OscConfig+0x624>)
 8004584:	400a      	ands	r2, r1
 8004586:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	69db      	ldr	r3, [r3, #28]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d100      	bne.n	8004592 <HAL_RCC_OscConfig+0x496>
 8004590:	e0bb      	b.n	800470a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004592:	4b60      	ldr	r3, [pc, #384]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	2238      	movs	r2, #56	; 0x38
 8004598:	4013      	ands	r3, r2
 800459a:	2b10      	cmp	r3, #16
 800459c:	d100      	bne.n	80045a0 <HAL_RCC_OscConfig+0x4a4>
 800459e:	e07b      	b.n	8004698 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d156      	bne.n	8004656 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045a8:	4b5a      	ldr	r3, [pc, #360]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	4b59      	ldr	r3, [pc, #356]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 80045ae:	495d      	ldr	r1, [pc, #372]	; (8004724 <HAL_RCC_OscConfig+0x628>)
 80045b0:	400a      	ands	r2, r1
 80045b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b4:	f7ff f898 	bl	80036e8 <HAL_GetTick>
 80045b8:	0003      	movs	r3, r0
 80045ba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045bc:	e008      	b.n	80045d0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045be:	f7ff f893 	bl	80036e8 <HAL_GetTick>
 80045c2:	0002      	movs	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e09d      	b.n	800470c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045d0:	4b50      	ldr	r3, [pc, #320]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	2380      	movs	r3, #128	; 0x80
 80045d6:	049b      	lsls	r3, r3, #18
 80045d8:	4013      	ands	r3, r2
 80045da:	d1f0      	bne.n	80045be <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045dc:	4b4d      	ldr	r3, [pc, #308]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	4a51      	ldr	r2, [pc, #324]	; (8004728 <HAL_RCC_OscConfig+0x62c>)
 80045e2:	4013      	ands	r3, r2
 80045e4:	0019      	movs	r1, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1a      	ldr	r2, [r3, #32]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f4:	021b      	lsls	r3, r3, #8
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	431a      	orrs	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004608:	431a      	orrs	r2, r3
 800460a:	4b42      	ldr	r3, [pc, #264]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 800460c:	430a      	orrs	r2, r1
 800460e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004610:	4b40      	ldr	r3, [pc, #256]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	4b3f      	ldr	r3, [pc, #252]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 8004616:	2180      	movs	r1, #128	; 0x80
 8004618:	0449      	lsls	r1, r1, #17
 800461a:	430a      	orrs	r2, r1
 800461c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800461e:	4b3d      	ldr	r3, [pc, #244]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	4b3c      	ldr	r3, [pc, #240]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 8004624:	2180      	movs	r1, #128	; 0x80
 8004626:	0549      	lsls	r1, r1, #21
 8004628:	430a      	orrs	r2, r1
 800462a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462c:	f7ff f85c 	bl	80036e8 <HAL_GetTick>
 8004630:	0003      	movs	r3, r0
 8004632:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004634:	e008      	b.n	8004648 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004636:	f7ff f857 	bl	80036e8 <HAL_GetTick>
 800463a:	0002      	movs	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e061      	b.n	800470c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004648:	4b32      	ldr	r3, [pc, #200]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	2380      	movs	r3, #128	; 0x80
 800464e:	049b      	lsls	r3, r3, #18
 8004650:	4013      	ands	r3, r2
 8004652:	d0f0      	beq.n	8004636 <HAL_RCC_OscConfig+0x53a>
 8004654:	e059      	b.n	800470a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004656:	4b2f      	ldr	r3, [pc, #188]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	4b2e      	ldr	r3, [pc, #184]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 800465c:	4931      	ldr	r1, [pc, #196]	; (8004724 <HAL_RCC_OscConfig+0x628>)
 800465e:	400a      	ands	r2, r1
 8004660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004662:	f7ff f841 	bl	80036e8 <HAL_GetTick>
 8004666:	0003      	movs	r3, r0
 8004668:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800466c:	f7ff f83c 	bl	80036e8 <HAL_GetTick>
 8004670:	0002      	movs	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e046      	b.n	800470c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800467e:	4b25      	ldr	r3, [pc, #148]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	2380      	movs	r3, #128	; 0x80
 8004684:	049b      	lsls	r3, r3, #18
 8004686:	4013      	ands	r3, r2
 8004688:	d1f0      	bne.n	800466c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800468a:	4b22      	ldr	r3, [pc, #136]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 800468c:	68da      	ldr	r2, [r3, #12]
 800468e:	4b21      	ldr	r3, [pc, #132]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 8004690:	4926      	ldr	r1, [pc, #152]	; (800472c <HAL_RCC_OscConfig+0x630>)
 8004692:	400a      	ands	r2, r1
 8004694:	60da      	str	r2, [r3, #12]
 8004696:	e038      	b.n	800470a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e033      	b.n	800470c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80046a4:	4b1b      	ldr	r3, [pc, #108]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	2203      	movs	r2, #3
 80046ae:	401a      	ands	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d126      	bne.n	8004706 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	2270      	movs	r2, #112	; 0x70
 80046bc:	401a      	ands	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d11f      	bne.n	8004706 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	23fe      	movs	r3, #254	; 0xfe
 80046ca:	01db      	lsls	r3, r3, #7
 80046cc:	401a      	ands	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d116      	bne.n	8004706 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	23f8      	movs	r3, #248	; 0xf8
 80046dc:	039b      	lsls	r3, r3, #14
 80046de:	401a      	ands	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d10e      	bne.n	8004706 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	23e0      	movs	r3, #224	; 0xe0
 80046ec:	051b      	lsls	r3, r3, #20
 80046ee:	401a      	ands	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d106      	bne.n	8004706 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	0f5b      	lsrs	r3, r3, #29
 80046fc:	075a      	lsls	r2, r3, #29
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004702:	429a      	cmp	r2, r3
 8004704:	d001      	beq.n	800470a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e000      	b.n	800470c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	0018      	movs	r0, r3
 800470e:	46bd      	mov	sp, r7
 8004710:	b008      	add	sp, #32
 8004712:	bd80      	pop	{r7, pc}
 8004714:	40021000 	.word	0x40021000
 8004718:	40007000 	.word	0x40007000
 800471c:	00001388 	.word	0x00001388
 8004720:	efffffff 	.word	0xefffffff
 8004724:	feffffff 	.word	0xfeffffff
 8004728:	11c1808c 	.word	0x11c1808c
 800472c:	eefefffc 	.word	0xeefefffc

08004730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e0e9      	b.n	8004918 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004744:	4b76      	ldr	r3, [pc, #472]	; (8004920 <HAL_RCC_ClockConfig+0x1f0>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2207      	movs	r2, #7
 800474a:	4013      	ands	r3, r2
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	d91e      	bls.n	8004790 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004752:	4b73      	ldr	r3, [pc, #460]	; (8004920 <HAL_RCC_ClockConfig+0x1f0>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2207      	movs	r2, #7
 8004758:	4393      	bics	r3, r2
 800475a:	0019      	movs	r1, r3
 800475c:	4b70      	ldr	r3, [pc, #448]	; (8004920 <HAL_RCC_ClockConfig+0x1f0>)
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004764:	f7fe ffc0 	bl	80036e8 <HAL_GetTick>
 8004768:	0003      	movs	r3, r0
 800476a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800476c:	e009      	b.n	8004782 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800476e:	f7fe ffbb 	bl	80036e8 <HAL_GetTick>
 8004772:	0002      	movs	r2, r0
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	4a6a      	ldr	r2, [pc, #424]	; (8004924 <HAL_RCC_ClockConfig+0x1f4>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e0ca      	b.n	8004918 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004782:	4b67      	ldr	r3, [pc, #412]	; (8004920 <HAL_RCC_ClockConfig+0x1f0>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2207      	movs	r2, #7
 8004788:	4013      	ands	r3, r2
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	429a      	cmp	r2, r3
 800478e:	d1ee      	bne.n	800476e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2202      	movs	r2, #2
 8004796:	4013      	ands	r3, r2
 8004798:	d015      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2204      	movs	r2, #4
 80047a0:	4013      	ands	r3, r2
 80047a2:	d006      	beq.n	80047b2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80047a4:	4b60      	ldr	r3, [pc, #384]	; (8004928 <HAL_RCC_ClockConfig+0x1f8>)
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	4b5f      	ldr	r3, [pc, #380]	; (8004928 <HAL_RCC_ClockConfig+0x1f8>)
 80047aa:	21e0      	movs	r1, #224	; 0xe0
 80047ac:	01c9      	lsls	r1, r1, #7
 80047ae:	430a      	orrs	r2, r1
 80047b0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047b2:	4b5d      	ldr	r3, [pc, #372]	; (8004928 <HAL_RCC_ClockConfig+0x1f8>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	4a5d      	ldr	r2, [pc, #372]	; (800492c <HAL_RCC_ClockConfig+0x1fc>)
 80047b8:	4013      	ands	r3, r2
 80047ba:	0019      	movs	r1, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	4b59      	ldr	r3, [pc, #356]	; (8004928 <HAL_RCC_ClockConfig+0x1f8>)
 80047c2:	430a      	orrs	r2, r1
 80047c4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2201      	movs	r2, #1
 80047cc:	4013      	ands	r3, r2
 80047ce:	d057      	beq.n	8004880 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d107      	bne.n	80047e8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047d8:	4b53      	ldr	r3, [pc, #332]	; (8004928 <HAL_RCC_ClockConfig+0x1f8>)
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	2380      	movs	r3, #128	; 0x80
 80047de:	029b      	lsls	r3, r3, #10
 80047e0:	4013      	ands	r3, r2
 80047e2:	d12b      	bne.n	800483c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e097      	b.n	8004918 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d107      	bne.n	8004800 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047f0:	4b4d      	ldr	r3, [pc, #308]	; (8004928 <HAL_RCC_ClockConfig+0x1f8>)
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	2380      	movs	r3, #128	; 0x80
 80047f6:	049b      	lsls	r3, r3, #18
 80047f8:	4013      	ands	r3, r2
 80047fa:	d11f      	bne.n	800483c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e08b      	b.n	8004918 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d107      	bne.n	8004818 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004808:	4b47      	ldr	r3, [pc, #284]	; (8004928 <HAL_RCC_ClockConfig+0x1f8>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	2380      	movs	r3, #128	; 0x80
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	4013      	ands	r3, r2
 8004812:	d113      	bne.n	800483c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e07f      	b.n	8004918 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	2b03      	cmp	r3, #3
 800481e:	d106      	bne.n	800482e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004820:	4b41      	ldr	r3, [pc, #260]	; (8004928 <HAL_RCC_ClockConfig+0x1f8>)
 8004822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004824:	2202      	movs	r2, #2
 8004826:	4013      	ands	r3, r2
 8004828:	d108      	bne.n	800483c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e074      	b.n	8004918 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800482e:	4b3e      	ldr	r3, [pc, #248]	; (8004928 <HAL_RCC_ClockConfig+0x1f8>)
 8004830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004832:	2202      	movs	r2, #2
 8004834:	4013      	ands	r3, r2
 8004836:	d101      	bne.n	800483c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e06d      	b.n	8004918 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800483c:	4b3a      	ldr	r3, [pc, #232]	; (8004928 <HAL_RCC_ClockConfig+0x1f8>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	2207      	movs	r2, #7
 8004842:	4393      	bics	r3, r2
 8004844:	0019      	movs	r1, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	4b37      	ldr	r3, [pc, #220]	; (8004928 <HAL_RCC_ClockConfig+0x1f8>)
 800484c:	430a      	orrs	r2, r1
 800484e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004850:	f7fe ff4a 	bl	80036e8 <HAL_GetTick>
 8004854:	0003      	movs	r3, r0
 8004856:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004858:	e009      	b.n	800486e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800485a:	f7fe ff45 	bl	80036e8 <HAL_GetTick>
 800485e:	0002      	movs	r2, r0
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	4a2f      	ldr	r2, [pc, #188]	; (8004924 <HAL_RCC_ClockConfig+0x1f4>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d901      	bls.n	800486e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e054      	b.n	8004918 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800486e:	4b2e      	ldr	r3, [pc, #184]	; (8004928 <HAL_RCC_ClockConfig+0x1f8>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	2238      	movs	r2, #56	; 0x38
 8004874:	401a      	ands	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	429a      	cmp	r2, r3
 800487e:	d1ec      	bne.n	800485a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004880:	4b27      	ldr	r3, [pc, #156]	; (8004920 <HAL_RCC_ClockConfig+0x1f0>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2207      	movs	r2, #7
 8004886:	4013      	ands	r3, r2
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	429a      	cmp	r2, r3
 800488c:	d21e      	bcs.n	80048cc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800488e:	4b24      	ldr	r3, [pc, #144]	; (8004920 <HAL_RCC_ClockConfig+0x1f0>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2207      	movs	r2, #7
 8004894:	4393      	bics	r3, r2
 8004896:	0019      	movs	r1, r3
 8004898:	4b21      	ldr	r3, [pc, #132]	; (8004920 <HAL_RCC_ClockConfig+0x1f0>)
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80048a0:	f7fe ff22 	bl	80036e8 <HAL_GetTick>
 80048a4:	0003      	movs	r3, r0
 80048a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80048a8:	e009      	b.n	80048be <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048aa:	f7fe ff1d 	bl	80036e8 <HAL_GetTick>
 80048ae:	0002      	movs	r2, r0
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	4a1b      	ldr	r2, [pc, #108]	; (8004924 <HAL_RCC_ClockConfig+0x1f4>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e02c      	b.n	8004918 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80048be:	4b18      	ldr	r3, [pc, #96]	; (8004920 <HAL_RCC_ClockConfig+0x1f0>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2207      	movs	r2, #7
 80048c4:	4013      	ands	r3, r2
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d1ee      	bne.n	80048aa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2204      	movs	r2, #4
 80048d2:	4013      	ands	r3, r2
 80048d4:	d009      	beq.n	80048ea <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80048d6:	4b14      	ldr	r3, [pc, #80]	; (8004928 <HAL_RCC_ClockConfig+0x1f8>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	4a15      	ldr	r2, [pc, #84]	; (8004930 <HAL_RCC_ClockConfig+0x200>)
 80048dc:	4013      	ands	r3, r2
 80048de:	0019      	movs	r1, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68da      	ldr	r2, [r3, #12]
 80048e4:	4b10      	ldr	r3, [pc, #64]	; (8004928 <HAL_RCC_ClockConfig+0x1f8>)
 80048e6:	430a      	orrs	r2, r1
 80048e8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80048ea:	f000 f829 	bl	8004940 <HAL_RCC_GetSysClockFreq>
 80048ee:	0001      	movs	r1, r0
 80048f0:	4b0d      	ldr	r3, [pc, #52]	; (8004928 <HAL_RCC_ClockConfig+0x1f8>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	0a1b      	lsrs	r3, r3, #8
 80048f6:	220f      	movs	r2, #15
 80048f8:	401a      	ands	r2, r3
 80048fa:	4b0e      	ldr	r3, [pc, #56]	; (8004934 <HAL_RCC_ClockConfig+0x204>)
 80048fc:	0092      	lsls	r2, r2, #2
 80048fe:	58d3      	ldr	r3, [r2, r3]
 8004900:	221f      	movs	r2, #31
 8004902:	4013      	ands	r3, r2
 8004904:	000a      	movs	r2, r1
 8004906:	40da      	lsrs	r2, r3
 8004908:	4b0b      	ldr	r3, [pc, #44]	; (8004938 <HAL_RCC_ClockConfig+0x208>)
 800490a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800490c:	4b0b      	ldr	r3, [pc, #44]	; (800493c <HAL_RCC_ClockConfig+0x20c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	0018      	movs	r0, r3
 8004912:	f7fe fe8d 	bl	8003630 <HAL_InitTick>
 8004916:	0003      	movs	r3, r0
}
 8004918:	0018      	movs	r0, r3
 800491a:	46bd      	mov	sp, r7
 800491c:	b004      	add	sp, #16
 800491e:	bd80      	pop	{r7, pc}
 8004920:	40022000 	.word	0x40022000
 8004924:	00001388 	.word	0x00001388
 8004928:	40021000 	.word	0x40021000
 800492c:	fffff0ff 	.word	0xfffff0ff
 8004930:	ffff8fff 	.word	0xffff8fff
 8004934:	08012ffc 	.word	0x08012ffc
 8004938:	20000020 	.word	0x20000020
 800493c:	20000024 	.word	0x20000024

08004940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004946:	4b3c      	ldr	r3, [pc, #240]	; (8004a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	2238      	movs	r2, #56	; 0x38
 800494c:	4013      	ands	r3, r2
 800494e:	d10f      	bne.n	8004970 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004950:	4b39      	ldr	r3, [pc, #228]	; (8004a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	0adb      	lsrs	r3, r3, #11
 8004956:	2207      	movs	r2, #7
 8004958:	4013      	ands	r3, r2
 800495a:	2201      	movs	r2, #1
 800495c:	409a      	lsls	r2, r3
 800495e:	0013      	movs	r3, r2
 8004960:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004962:	6839      	ldr	r1, [r7, #0]
 8004964:	4835      	ldr	r0, [pc, #212]	; (8004a3c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004966:	f7fb fbe9 	bl	800013c <__udivsi3>
 800496a:	0003      	movs	r3, r0
 800496c:	613b      	str	r3, [r7, #16]
 800496e:	e05d      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004970:	4b31      	ldr	r3, [pc, #196]	; (8004a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	2238      	movs	r2, #56	; 0x38
 8004976:	4013      	ands	r3, r2
 8004978:	2b08      	cmp	r3, #8
 800497a:	d102      	bne.n	8004982 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800497c:	4b30      	ldr	r3, [pc, #192]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x100>)
 800497e:	613b      	str	r3, [r7, #16]
 8004980:	e054      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004982:	4b2d      	ldr	r3, [pc, #180]	; (8004a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	2238      	movs	r2, #56	; 0x38
 8004988:	4013      	ands	r3, r2
 800498a:	2b10      	cmp	r3, #16
 800498c:	d138      	bne.n	8004a00 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800498e:	4b2a      	ldr	r3, [pc, #168]	; (8004a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	2203      	movs	r2, #3
 8004994:	4013      	ands	r3, r2
 8004996:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004998:	4b27      	ldr	r3, [pc, #156]	; (8004a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	091b      	lsrs	r3, r3, #4
 800499e:	2207      	movs	r2, #7
 80049a0:	4013      	ands	r3, r2
 80049a2:	3301      	adds	r3, #1
 80049a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2b03      	cmp	r3, #3
 80049aa:	d10d      	bne.n	80049c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049ac:	68b9      	ldr	r1, [r7, #8]
 80049ae:	4824      	ldr	r0, [pc, #144]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x100>)
 80049b0:	f7fb fbc4 	bl	800013c <__udivsi3>
 80049b4:	0003      	movs	r3, r0
 80049b6:	0019      	movs	r1, r3
 80049b8:	4b1f      	ldr	r3, [pc, #124]	; (8004a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	0a1b      	lsrs	r3, r3, #8
 80049be:	227f      	movs	r2, #127	; 0x7f
 80049c0:	4013      	ands	r3, r2
 80049c2:	434b      	muls	r3, r1
 80049c4:	617b      	str	r3, [r7, #20]
        break;
 80049c6:	e00d      	b.n	80049e4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80049c8:	68b9      	ldr	r1, [r7, #8]
 80049ca:	481c      	ldr	r0, [pc, #112]	; (8004a3c <HAL_RCC_GetSysClockFreq+0xfc>)
 80049cc:	f7fb fbb6 	bl	800013c <__udivsi3>
 80049d0:	0003      	movs	r3, r0
 80049d2:	0019      	movs	r1, r3
 80049d4:	4b18      	ldr	r3, [pc, #96]	; (8004a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	0a1b      	lsrs	r3, r3, #8
 80049da:	227f      	movs	r2, #127	; 0x7f
 80049dc:	4013      	ands	r3, r2
 80049de:	434b      	muls	r3, r1
 80049e0:	617b      	str	r3, [r7, #20]
        break;
 80049e2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80049e4:	4b14      	ldr	r3, [pc, #80]	; (8004a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	0f5b      	lsrs	r3, r3, #29
 80049ea:	2207      	movs	r2, #7
 80049ec:	4013      	ands	r3, r2
 80049ee:	3301      	adds	r3, #1
 80049f0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80049f2:	6879      	ldr	r1, [r7, #4]
 80049f4:	6978      	ldr	r0, [r7, #20]
 80049f6:	f7fb fba1 	bl	800013c <__udivsi3>
 80049fa:	0003      	movs	r3, r0
 80049fc:	613b      	str	r3, [r7, #16]
 80049fe:	e015      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004a00:	4b0d      	ldr	r3, [pc, #52]	; (8004a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	2238      	movs	r2, #56	; 0x38
 8004a06:	4013      	ands	r3, r2
 8004a08:	2b20      	cmp	r3, #32
 8004a0a:	d103      	bne.n	8004a14 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004a0c:	2380      	movs	r3, #128	; 0x80
 8004a0e:	021b      	lsls	r3, r3, #8
 8004a10:	613b      	str	r3, [r7, #16]
 8004a12:	e00b      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004a14:	4b08      	ldr	r3, [pc, #32]	; (8004a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	2238      	movs	r2, #56	; 0x38
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	2b18      	cmp	r3, #24
 8004a1e:	d103      	bne.n	8004a28 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004a20:	23fa      	movs	r3, #250	; 0xfa
 8004a22:	01db      	lsls	r3, r3, #7
 8004a24:	613b      	str	r3, [r7, #16]
 8004a26:	e001      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004a2c:	693b      	ldr	r3, [r7, #16]
}
 8004a2e:	0018      	movs	r0, r3
 8004a30:	46bd      	mov	sp, r7
 8004a32:	b006      	add	sp, #24
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	46c0      	nop			; (mov r8, r8)
 8004a38:	40021000 	.word	0x40021000
 8004a3c:	00f42400 	.word	0x00f42400
 8004a40:	007a1200 	.word	0x007a1200

08004a44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a48:	4b02      	ldr	r3, [pc, #8]	; (8004a54 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
}
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	46c0      	nop			; (mov r8, r8)
 8004a54:	20000020 	.word	0x20000020

08004a58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a58:	b5b0      	push	{r4, r5, r7, lr}
 8004a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004a5c:	f7ff fff2 	bl	8004a44 <HAL_RCC_GetHCLKFreq>
 8004a60:	0004      	movs	r4, r0
 8004a62:	f7ff fb3f 	bl	80040e4 <LL_RCC_GetAPB1Prescaler>
 8004a66:	0003      	movs	r3, r0
 8004a68:	0b1a      	lsrs	r2, r3, #12
 8004a6a:	4b05      	ldr	r3, [pc, #20]	; (8004a80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a6c:	0092      	lsls	r2, r2, #2
 8004a6e:	58d3      	ldr	r3, [r2, r3]
 8004a70:	221f      	movs	r2, #31
 8004a72:	4013      	ands	r3, r2
 8004a74:	40dc      	lsrs	r4, r3
 8004a76:	0023      	movs	r3, r4
}
 8004a78:	0018      	movs	r0, r3
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bdb0      	pop	{r4, r5, r7, pc}
 8004a7e:	46c0      	nop			; (mov r8, r8)
 8004a80:	0801303c 	.word	0x0801303c

08004a84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004a8c:	2313      	movs	r3, #19
 8004a8e:	18fb      	adds	r3, r7, r3
 8004a90:	2200      	movs	r2, #0
 8004a92:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a94:	2312      	movs	r3, #18
 8004a96:	18fb      	adds	r3, r7, r3
 8004a98:	2200      	movs	r2, #0
 8004a9a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	2380      	movs	r3, #128	; 0x80
 8004aa2:	029b      	lsls	r3, r3, #10
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	d100      	bne.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004aa8:	e0a3      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aaa:	2011      	movs	r0, #17
 8004aac:	183b      	adds	r3, r7, r0
 8004aae:	2200      	movs	r2, #0
 8004ab0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ab2:	4bc3      	ldr	r3, [pc, #780]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ab4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ab6:	2380      	movs	r3, #128	; 0x80
 8004ab8:	055b      	lsls	r3, r3, #21
 8004aba:	4013      	ands	r3, r2
 8004abc:	d110      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004abe:	4bc0      	ldr	r3, [pc, #768]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ac0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ac2:	4bbf      	ldr	r3, [pc, #764]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ac4:	2180      	movs	r1, #128	; 0x80
 8004ac6:	0549      	lsls	r1, r1, #21
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	63da      	str	r2, [r3, #60]	; 0x3c
 8004acc:	4bbc      	ldr	r3, [pc, #752]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ace:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ad0:	2380      	movs	r3, #128	; 0x80
 8004ad2:	055b      	lsls	r3, r3, #21
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	60bb      	str	r3, [r7, #8]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ada:	183b      	adds	r3, r7, r0
 8004adc:	2201      	movs	r2, #1
 8004ade:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ae0:	4bb8      	ldr	r3, [pc, #736]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	4bb7      	ldr	r3, [pc, #732]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004ae6:	2180      	movs	r1, #128	; 0x80
 8004ae8:	0049      	lsls	r1, r1, #1
 8004aea:	430a      	orrs	r2, r1
 8004aec:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004aee:	f7fe fdfb 	bl	80036e8 <HAL_GetTick>
 8004af2:	0003      	movs	r3, r0
 8004af4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004af6:	e00b      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004af8:	f7fe fdf6 	bl	80036e8 <HAL_GetTick>
 8004afc:	0002      	movs	r2, r0
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d904      	bls.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004b06:	2313      	movs	r3, #19
 8004b08:	18fb      	adds	r3, r7, r3
 8004b0a:	2203      	movs	r2, #3
 8004b0c:	701a      	strb	r2, [r3, #0]
        break;
 8004b0e:	e005      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b10:	4bac      	ldr	r3, [pc, #688]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	2380      	movs	r3, #128	; 0x80
 8004b16:	005b      	lsls	r3, r3, #1
 8004b18:	4013      	ands	r3, r2
 8004b1a:	d0ed      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004b1c:	2313      	movs	r3, #19
 8004b1e:	18fb      	adds	r3, r7, r3
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d154      	bne.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b26:	4ba6      	ldr	r3, [pc, #664]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b2a:	23c0      	movs	r3, #192	; 0xc0
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4013      	ands	r3, r2
 8004b30:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d019      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d014      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b42:	4b9f      	ldr	r3, [pc, #636]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b46:	4aa0      	ldr	r2, [pc, #640]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004b48:	4013      	ands	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b4c:	4b9c      	ldr	r3, [pc, #624]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b50:	4b9b      	ldr	r3, [pc, #620]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b52:	2180      	movs	r1, #128	; 0x80
 8004b54:	0249      	lsls	r1, r1, #9
 8004b56:	430a      	orrs	r2, r1
 8004b58:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b5a:	4b99      	ldr	r3, [pc, #612]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b5e:	4b98      	ldr	r3, [pc, #608]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b60:	499a      	ldr	r1, [pc, #616]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004b62:	400a      	ands	r2, r1
 8004b64:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b66:	4b96      	ldr	r3, [pc, #600]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	4013      	ands	r3, r2
 8004b72:	d016      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b74:	f7fe fdb8 	bl	80036e8 <HAL_GetTick>
 8004b78:	0003      	movs	r3, r0
 8004b7a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b7c:	e00c      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b7e:	f7fe fdb3 	bl	80036e8 <HAL_GetTick>
 8004b82:	0002      	movs	r2, r0
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	4a91      	ldr	r2, [pc, #580]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d904      	bls.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004b8e:	2313      	movs	r3, #19
 8004b90:	18fb      	adds	r3, r7, r3
 8004b92:	2203      	movs	r2, #3
 8004b94:	701a      	strb	r2, [r3, #0]
            break;
 8004b96:	e004      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b98:	4b89      	ldr	r3, [pc, #548]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	d0ed      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004ba2:	2313      	movs	r3, #19
 8004ba4:	18fb      	adds	r3, r7, r3
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10a      	bne.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bac:	4b84      	ldr	r3, [pc, #528]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bb0:	4a85      	ldr	r2, [pc, #532]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	0019      	movs	r1, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bba:	4b81      	ldr	r3, [pc, #516]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	65da      	str	r2, [r3, #92]	; 0x5c
 8004bc0:	e00c      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bc2:	2312      	movs	r3, #18
 8004bc4:	18fb      	adds	r3, r7, r3
 8004bc6:	2213      	movs	r2, #19
 8004bc8:	18ba      	adds	r2, r7, r2
 8004bca:	7812      	ldrb	r2, [r2, #0]
 8004bcc:	701a      	strb	r2, [r3, #0]
 8004bce:	e005      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bd0:	2312      	movs	r3, #18
 8004bd2:	18fb      	adds	r3, r7, r3
 8004bd4:	2213      	movs	r2, #19
 8004bd6:	18ba      	adds	r2, r7, r2
 8004bd8:	7812      	ldrb	r2, [r2, #0]
 8004bda:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004bdc:	2311      	movs	r3, #17
 8004bde:	18fb      	adds	r3, r7, r3
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d105      	bne.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004be6:	4b76      	ldr	r3, [pc, #472]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004be8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bea:	4b75      	ldr	r3, [pc, #468]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bec:	4979      	ldr	r1, [pc, #484]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004bee:	400a      	ands	r2, r1
 8004bf0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	d009      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bfc:	4b70      	ldr	r3, [pc, #448]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c00:	2203      	movs	r2, #3
 8004c02:	4393      	bics	r3, r2
 8004c04:	0019      	movs	r1, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	4b6d      	ldr	r3, [pc, #436]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2202      	movs	r2, #2
 8004c16:	4013      	ands	r3, r2
 8004c18:	d009      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c1a:	4b69      	ldr	r3, [pc, #420]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c1e:	220c      	movs	r2, #12
 8004c20:	4393      	bics	r3, r2
 8004c22:	0019      	movs	r1, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689a      	ldr	r2, [r3, #8]
 8004c28:	4b65      	ldr	r3, [pc, #404]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2210      	movs	r2, #16
 8004c34:	4013      	ands	r3, r2
 8004c36:	d009      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c38:	4b61      	ldr	r3, [pc, #388]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c3c:	4a66      	ldr	r2, [pc, #408]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004c3e:	4013      	ands	r3, r2
 8004c40:	0019      	movs	r1, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	4b5e      	ldr	r3, [pc, #376]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	2380      	movs	r3, #128	; 0x80
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4013      	ands	r3, r2
 8004c56:	d009      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c58:	4b59      	ldr	r3, [pc, #356]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5c:	4a5f      	ldr	r2, [pc, #380]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c5e:	4013      	ands	r3, r2
 8004c60:	0019      	movs	r1, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699a      	ldr	r2, [r3, #24]
 8004c66:	4b56      	ldr	r3, [pc, #344]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	2380      	movs	r3, #128	; 0x80
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	4013      	ands	r3, r2
 8004c76:	d009      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c78:	4b51      	ldr	r3, [pc, #324]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c7c:	4a58      	ldr	r2, [pc, #352]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c7e:	4013      	ands	r3, r2
 8004c80:	0019      	movs	r1, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	69da      	ldr	r2, [r3, #28]
 8004c86:	4b4e      	ldr	r3, [pc, #312]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2220      	movs	r2, #32
 8004c92:	4013      	ands	r3, r2
 8004c94:	d009      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c96:	4b4a      	ldr	r3, [pc, #296]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c9a:	4a52      	ldr	r2, [pc, #328]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	0019      	movs	r1, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	691a      	ldr	r2, [r3, #16]
 8004ca4:	4b46      	ldr	r3, [pc, #280]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	2380      	movs	r3, #128	; 0x80
 8004cb0:	01db      	lsls	r3, r3, #7
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	d015      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cb6:	4b42      	ldr	r3, [pc, #264]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	0899      	lsrs	r1, r3, #2
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1a      	ldr	r2, [r3, #32]
 8004cc2:	4b3f      	ldr	r3, [pc, #252]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a1a      	ldr	r2, [r3, #32]
 8004ccc:	2380      	movs	r3, #128	; 0x80
 8004cce:	05db      	lsls	r3, r3, #23
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d106      	bne.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004cd4:	4b3a      	ldr	r3, [pc, #232]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cd6:	68da      	ldr	r2, [r3, #12]
 8004cd8:	4b39      	ldr	r3, [pc, #228]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cda:	2180      	movs	r1, #128	; 0x80
 8004cdc:	0249      	lsls	r1, r1, #9
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	2380      	movs	r3, #128	; 0x80
 8004ce8:	031b      	lsls	r3, r3, #12
 8004cea:	4013      	ands	r3, r2
 8004cec:	d009      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004cee:	4b34      	ldr	r3, [pc, #208]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf2:	2240      	movs	r2, #64	; 0x40
 8004cf4:	4393      	bics	r3, r2
 8004cf6:	0019      	movs	r1, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cfc:	4b30      	ldr	r3, [pc, #192]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	2380      	movs	r3, #128	; 0x80
 8004d08:	039b      	lsls	r3, r3, #14
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	d016      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004d0e:	4b2c      	ldr	r3, [pc, #176]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d12:	4a35      	ldr	r2, [pc, #212]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004d14:	4013      	ands	r3, r2
 8004d16:	0019      	movs	r1, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d1c:	4b28      	ldr	r3, [pc, #160]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d26:	2380      	movs	r3, #128	; 0x80
 8004d28:	03db      	lsls	r3, r3, #15
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d106      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004d2e:	4b24      	ldr	r3, [pc, #144]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d30:	68da      	ldr	r2, [r3, #12]
 8004d32:	4b23      	ldr	r3, [pc, #140]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d34:	2180      	movs	r1, #128	; 0x80
 8004d36:	0449      	lsls	r1, r1, #17
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	2380      	movs	r3, #128	; 0x80
 8004d42:	03db      	lsls	r3, r3, #15
 8004d44:	4013      	ands	r3, r2
 8004d46:	d016      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004d48:	4b1d      	ldr	r3, [pc, #116]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4c:	4a27      	ldr	r2, [pc, #156]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004d4e:	4013      	ands	r3, r2
 8004d50:	0019      	movs	r1, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d56:	4b1a      	ldr	r3, [pc, #104]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d60:	2380      	movs	r3, #128	; 0x80
 8004d62:	045b      	lsls	r3, r3, #17
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d106      	bne.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004d68:	4b15      	ldr	r3, [pc, #84]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d6a:	68da      	ldr	r2, [r3, #12]
 8004d6c:	4b14      	ldr	r3, [pc, #80]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d6e:	2180      	movs	r1, #128	; 0x80
 8004d70:	0449      	lsls	r1, r1, #17
 8004d72:	430a      	orrs	r2, r1
 8004d74:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	2380      	movs	r3, #128	; 0x80
 8004d7c:	011b      	lsls	r3, r3, #4
 8004d7e:	4013      	ands	r3, r2
 8004d80:	d016      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004d82:	4b0f      	ldr	r3, [pc, #60]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d86:	4a1a      	ldr	r2, [pc, #104]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004d88:	4013      	ands	r3, r2
 8004d8a:	0019      	movs	r1, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	695a      	ldr	r2, [r3, #20]
 8004d90:	4b0b      	ldr	r3, [pc, #44]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d92:	430a      	orrs	r2, r1
 8004d94:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	695a      	ldr	r2, [r3, #20]
 8004d9a:	2380      	movs	r3, #128	; 0x80
 8004d9c:	01db      	lsls	r3, r3, #7
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d106      	bne.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004da2:	4b07      	ldr	r3, [pc, #28]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004da4:	68da      	ldr	r2, [r3, #12]
 8004da6:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004da8:	2180      	movs	r1, #128	; 0x80
 8004daa:	0249      	lsls	r1, r1, #9
 8004dac:	430a      	orrs	r2, r1
 8004dae:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004db0:	2312      	movs	r3, #18
 8004db2:	18fb      	adds	r3, r7, r3
 8004db4:	781b      	ldrb	r3, [r3, #0]
}
 8004db6:	0018      	movs	r0, r3
 8004db8:	46bd      	mov	sp, r7
 8004dba:	b006      	add	sp, #24
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	46c0      	nop			; (mov r8, r8)
 8004dc0:	40021000 	.word	0x40021000
 8004dc4:	40007000 	.word	0x40007000
 8004dc8:	fffffcff 	.word	0xfffffcff
 8004dcc:	fffeffff 	.word	0xfffeffff
 8004dd0:	00001388 	.word	0x00001388
 8004dd4:	efffffff 	.word	0xefffffff
 8004dd8:	fffff3ff 	.word	0xfffff3ff
 8004ddc:	fff3ffff 	.word	0xfff3ffff
 8004de0:	ffcfffff 	.word	0xffcfffff
 8004de4:	ffffcfff 	.word	0xffffcfff
 8004de8:	ffbfffff 	.word	0xffbfffff
 8004dec:	feffffff 	.word	0xfeffffff
 8004df0:	ffff3fff 	.word	0xffff3fff

08004df4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004df4:	b5b0      	push	{r4, r5, r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004dfc:	230f      	movs	r3, #15
 8004dfe:	18fb      	adds	r3, r7, r3
 8004e00:	2201      	movs	r2, #1
 8004e02:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d100      	bne.n	8004e0c <HAL_RTC_Init+0x18>
 8004e0a:	e08c      	b.n	8004f26 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2229      	movs	r2, #41	; 0x29
 8004e10:	5c9b      	ldrb	r3, [r3, r2]
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10b      	bne.n	8004e30 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2228      	movs	r2, #40	; 0x28
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2288      	movs	r2, #136	; 0x88
 8004e24:	0212      	lsls	r2, r2, #8
 8004e26:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	0018      	movs	r0, r3
 8004e2c:	f7fe f936 	bl	800309c <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2229      	movs	r2, #41	; 0x29
 8004e34:	2102      	movs	r1, #2
 8004e36:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	2210      	movs	r2, #16
 8004e40:	4013      	ands	r3, r2
 8004e42:	2b10      	cmp	r3, #16
 8004e44:	d062      	beq.n	8004f0c <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	22ca      	movs	r2, #202	; 0xca
 8004e4c:	625a      	str	r2, [r3, #36]	; 0x24
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2253      	movs	r2, #83	; 0x53
 8004e54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004e56:	250f      	movs	r5, #15
 8004e58:	197c      	adds	r4, r7, r5
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	f000 fb9c 	bl	800559a <RTC_EnterInitMode>
 8004e62:	0003      	movs	r3, r0
 8004e64:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8004e66:	0028      	movs	r0, r5
 8004e68:	183b      	adds	r3, r7, r0
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d12c      	bne.n	8004eca <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	699a      	ldr	r2, [r3, #24]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	492e      	ldr	r1, [pc, #184]	; (8004f34 <HAL_RTC_Init+0x140>)
 8004e7c:	400a      	ands	r2, r1
 8004e7e:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6999      	ldr	r1, [r3, #24]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689a      	ldr	r2, [r3, #8]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	69db      	ldr	r3, [r3, #28]
 8004e94:	431a      	orrs	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	6912      	ldr	r2, [r2, #16]
 8004ea6:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6919      	ldr	r1, [r3, #16]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	041a      	lsls	r2, r3, #16
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004ebc:	183c      	adds	r4, r7, r0
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	0018      	movs	r0, r3
 8004ec2:	f000 fbad 	bl	8005620 <RTC_ExitInitMode>
 8004ec6:	0003      	movs	r3, r0
 8004ec8:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8004eca:	230f      	movs	r3, #15
 8004ecc:	18fb      	adds	r3, r7, r3
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d116      	bne.n	8004f02 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	699a      	ldr	r2, [r3, #24]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	00d2      	lsls	r2, r2, #3
 8004ee0:	08d2      	lsrs	r2, r2, #3
 8004ee2:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6999      	ldr	r1, [r3, #24]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	22ff      	movs	r2, #255	; 0xff
 8004f08:	625a      	str	r2, [r3, #36]	; 0x24
 8004f0a:	e003      	b.n	8004f14 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004f0c:	230f      	movs	r3, #15
 8004f0e:	18fb      	adds	r3, r7, r3
 8004f10:	2200      	movs	r2, #0
 8004f12:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8004f14:	230f      	movs	r3, #15
 8004f16:	18fb      	adds	r3, r7, r3
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d103      	bne.n	8004f26 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2229      	movs	r2, #41	; 0x29
 8004f22:	2101      	movs	r1, #1
 8004f24:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8004f26:	230f      	movs	r3, #15
 8004f28:	18fb      	adds	r3, r7, r3
 8004f2a:	781b      	ldrb	r3, [r3, #0]
}
 8004f2c:	0018      	movs	r0, r3
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	b004      	add	sp, #16
 8004f32:	bdb0      	pop	{r4, r5, r7, pc}
 8004f34:	fb8fffbf 	.word	0xfb8fffbf

08004f38 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004f38:	b5b0      	push	{r4, r5, r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2228      	movs	r2, #40	; 0x28
 8004f48:	5c9b      	ldrb	r3, [r3, r2]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d101      	bne.n	8004f52 <HAL_RTC_SetTime+0x1a>
 8004f4e:	2302      	movs	r3, #2
 8004f50:	e092      	b.n	8005078 <HAL_RTC_SetTime+0x140>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2228      	movs	r2, #40	; 0x28
 8004f56:	2101      	movs	r1, #1
 8004f58:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2229      	movs	r2, #41	; 0x29
 8004f5e:	2102      	movs	r1, #2
 8004f60:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	22ca      	movs	r2, #202	; 0xca
 8004f68:	625a      	str	r2, [r3, #36]	; 0x24
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2253      	movs	r2, #83	; 0x53
 8004f70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004f72:	2513      	movs	r5, #19
 8004f74:	197c      	adds	r4, r7, r5
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	0018      	movs	r0, r3
 8004f7a:	f000 fb0e 	bl	800559a <RTC_EnterInitMode>
 8004f7e:	0003      	movs	r3, r0
 8004f80:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004f82:	197b      	adds	r3, r7, r5
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d162      	bne.n	8005050 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d125      	bne.n	8004fdc <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	2240      	movs	r2, #64	; 0x40
 8004f98:	4013      	ands	r3, r2
 8004f9a:	d102      	bne.n	8004fa2 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	f000 fb7e 	bl	80056a8 <RTC_ByteToBcd2>
 8004fac:	0003      	movs	r3, r0
 8004fae:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	785b      	ldrb	r3, [r3, #1]
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	f000 fb77 	bl	80056a8 <RTC_ByteToBcd2>
 8004fba:	0003      	movs	r3, r0
 8004fbc:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004fbe:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	789b      	ldrb	r3, [r3, #2]
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	f000 fb6f 	bl	80056a8 <RTC_ByteToBcd2>
 8004fca:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004fcc:	0022      	movs	r2, r4
 8004fce:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	78db      	ldrb	r3, [r3, #3]
 8004fd4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	617b      	str	r3, [r7, #20]
 8004fda:	e017      	b.n	800500c <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	2240      	movs	r2, #64	; 0x40
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	d102      	bne.n	8004fee <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	2200      	movs	r2, #0
 8004fec:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	785b      	ldrb	r3, [r3, #1]
 8004ff8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004ffa:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005000:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	78db      	ldrb	r3, [r3, #3]
 8005006:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005008:	4313      	orrs	r3, r2
 800500a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	491b      	ldr	r1, [pc, #108]	; (8005080 <HAL_RTC_SetTime+0x148>)
 8005014:	400a      	ands	r2, r1
 8005016:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	699a      	ldr	r2, [r3, #24]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4918      	ldr	r1, [pc, #96]	; (8005084 <HAL_RTC_SetTime+0x14c>)
 8005024:	400a      	ands	r2, r1
 8005026:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6999      	ldr	r1, [r3, #24]
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	68da      	ldr	r2, [r3, #12]
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	431a      	orrs	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	430a      	orrs	r2, r1
 800503e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005040:	2313      	movs	r3, #19
 8005042:	18fc      	adds	r4, r7, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	0018      	movs	r0, r3
 8005048:	f000 faea 	bl	8005620 <RTC_ExitInitMode>
 800504c:	0003      	movs	r3, r0
 800504e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	22ff      	movs	r2, #255	; 0xff
 8005056:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8005058:	2313      	movs	r3, #19
 800505a:	18fb      	adds	r3, r7, r3
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d103      	bne.n	800506a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2229      	movs	r2, #41	; 0x29
 8005066:	2101      	movs	r1, #1
 8005068:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2228      	movs	r2, #40	; 0x28
 800506e:	2100      	movs	r1, #0
 8005070:	5499      	strb	r1, [r3, r2]

  return status;
 8005072:	2313      	movs	r3, #19
 8005074:	18fb      	adds	r3, r7, r3
 8005076:	781b      	ldrb	r3, [r3, #0]
}
 8005078:	0018      	movs	r0, r3
 800507a:	46bd      	mov	sp, r7
 800507c:	b006      	add	sp, #24
 800507e:	bdb0      	pop	{r4, r5, r7, pc}
 8005080:	007f7f7f 	.word	0x007f7f7f
 8005084:	fffbffff 	.word	0xfffbffff

08005088 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689a      	ldr	r2, [r3, #8]
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	045b      	lsls	r3, r3, #17
 80050a6:	0c5a      	lsrs	r2, r3, #17
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a22      	ldr	r2, [pc, #136]	; (800513c <HAL_RTC_GetTime+0xb4>)
 80050b4:	4013      	ands	r3, r2
 80050b6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	0c1b      	lsrs	r3, r3, #16
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	223f      	movs	r2, #63	; 0x3f
 80050c0:	4013      	ands	r3, r2
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	0a1b      	lsrs	r3, r3, #8
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	227f      	movs	r2, #127	; 0x7f
 80050d0:	4013      	ands	r3, r2
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	227f      	movs	r2, #127	; 0x7f
 80050de:	4013      	ands	r3, r2
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	0d9b      	lsrs	r3, r3, #22
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2201      	movs	r2, #1
 80050ee:	4013      	ands	r3, r2
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d11a      	bne.n	8005132 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	0018      	movs	r0, r3
 8005102:	f000 faf9 	bl	80056f8 <RTC_Bcd2ToByte>
 8005106:	0003      	movs	r3, r0
 8005108:	001a      	movs	r2, r3
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	785b      	ldrb	r3, [r3, #1]
 8005112:	0018      	movs	r0, r3
 8005114:	f000 faf0 	bl	80056f8 <RTC_Bcd2ToByte>
 8005118:	0003      	movs	r3, r0
 800511a:	001a      	movs	r2, r3
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	789b      	ldrb	r3, [r3, #2]
 8005124:	0018      	movs	r0, r3
 8005126:	f000 fae7 	bl	80056f8 <RTC_Bcd2ToByte>
 800512a:	0003      	movs	r3, r0
 800512c:	001a      	movs	r2, r3
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	0018      	movs	r0, r3
 8005136:	46bd      	mov	sp, r7
 8005138:	b006      	add	sp, #24
 800513a:	bd80      	pop	{r7, pc}
 800513c:	007f7f7f 	.word	0x007f7f7f

08005140 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005140:	b5b0      	push	{r4, r5, r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2228      	movs	r2, #40	; 0x28
 8005150:	5c9b      	ldrb	r3, [r3, r2]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d101      	bne.n	800515a <HAL_RTC_SetDate+0x1a>
 8005156:	2302      	movs	r3, #2
 8005158:	e07e      	b.n	8005258 <HAL_RTC_SetDate+0x118>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2228      	movs	r2, #40	; 0x28
 800515e:	2101      	movs	r1, #1
 8005160:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2229      	movs	r2, #41	; 0x29
 8005166:	2102      	movs	r1, #2
 8005168:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10e      	bne.n	800518e <HAL_RTC_SetDate+0x4e>
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	785b      	ldrb	r3, [r3, #1]
 8005174:	001a      	movs	r2, r3
 8005176:	2310      	movs	r3, #16
 8005178:	4013      	ands	r3, r2
 800517a:	d008      	beq.n	800518e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	785b      	ldrb	r3, [r3, #1]
 8005180:	2210      	movs	r2, #16
 8005182:	4393      	bics	r3, r2
 8005184:	b2db      	uxtb	r3, r3
 8005186:	330a      	adds	r3, #10
 8005188:	b2da      	uxtb	r2, r3
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d11c      	bne.n	80051ce <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	78db      	ldrb	r3, [r3, #3]
 8005198:	0018      	movs	r0, r3
 800519a:	f000 fa85 	bl	80056a8 <RTC_ByteToBcd2>
 800519e:	0003      	movs	r3, r0
 80051a0:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	785b      	ldrb	r3, [r3, #1]
 80051a6:	0018      	movs	r0, r3
 80051a8:	f000 fa7e 	bl	80056a8 <RTC_ByteToBcd2>
 80051ac:	0003      	movs	r3, r0
 80051ae:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80051b0:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	789b      	ldrb	r3, [r3, #2]
 80051b6:	0018      	movs	r0, r3
 80051b8:	f000 fa76 	bl	80056a8 <RTC_ByteToBcd2>
 80051bc:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80051be:	0022      	movs	r2, r4
 80051c0:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80051c8:	4313      	orrs	r3, r2
 80051ca:	617b      	str	r3, [r7, #20]
 80051cc:	e00e      	b.n	80051ec <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	78db      	ldrb	r3, [r3, #3]
 80051d2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	785b      	ldrb	r3, [r3, #1]
 80051d8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80051da:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80051e0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80051e8:	4313      	orrs	r3, r2
 80051ea:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	22ca      	movs	r2, #202	; 0xca
 80051f2:	625a      	str	r2, [r3, #36]	; 0x24
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2253      	movs	r2, #83	; 0x53
 80051fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80051fc:	2513      	movs	r5, #19
 80051fe:	197c      	adds	r4, r7, r5
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	0018      	movs	r0, r3
 8005204:	f000 f9c9 	bl	800559a <RTC_EnterInitMode>
 8005208:	0003      	movs	r3, r0
 800520a:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800520c:	0028      	movs	r0, r5
 800520e:	183b      	adds	r3, r7, r0
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10c      	bne.n	8005230 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	4910      	ldr	r1, [pc, #64]	; (8005260 <HAL_RTC_SetDate+0x120>)
 800521e:	400a      	ands	r2, r1
 8005220:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005222:	183c      	adds	r4, r7, r0
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	0018      	movs	r0, r3
 8005228:	f000 f9fa 	bl	8005620 <RTC_ExitInitMode>
 800522c:	0003      	movs	r3, r0
 800522e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	22ff      	movs	r2, #255	; 0xff
 8005236:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005238:	2313      	movs	r3, #19
 800523a:	18fb      	adds	r3, r7, r3
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d103      	bne.n	800524a <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2229      	movs	r2, #41	; 0x29
 8005246:	2101      	movs	r1, #1
 8005248:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2228      	movs	r2, #40	; 0x28
 800524e:	2100      	movs	r1, #0
 8005250:	5499      	strb	r1, [r3, r2]

  return status;
 8005252:	2313      	movs	r3, #19
 8005254:	18fb      	adds	r3, r7, r3
 8005256:	781b      	ldrb	r3, [r3, #0]
}
 8005258:	0018      	movs	r0, r3
 800525a:	46bd      	mov	sp, r7
 800525c:	b006      	add	sp, #24
 800525e:	bdb0      	pop	{r4, r5, r7, pc}
 8005260:	00ffff3f 	.word	0x00ffff3f

08005264 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	4a21      	ldr	r2, [pc, #132]	; (80052fc <HAL_RTC_GetDate+0x98>)
 8005278:	4013      	ands	r3, r2
 800527a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	0c1b      	lsrs	r3, r3, #16
 8005280:	b2da      	uxtb	r2, r3
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	0a1b      	lsrs	r3, r3, #8
 800528a:	b2db      	uxtb	r3, r3
 800528c:	221f      	movs	r2, #31
 800528e:	4013      	ands	r3, r2
 8005290:	b2da      	uxtb	r2, r3
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	b2db      	uxtb	r3, r3
 800529a:	223f      	movs	r2, #63	; 0x3f
 800529c:	4013      	ands	r3, r2
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	0b5b      	lsrs	r3, r3, #13
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2207      	movs	r2, #7
 80052ac:	4013      	ands	r3, r2
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d11a      	bne.n	80052f0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	78db      	ldrb	r3, [r3, #3]
 80052be:	0018      	movs	r0, r3
 80052c0:	f000 fa1a 	bl	80056f8 <RTC_Bcd2ToByte>
 80052c4:	0003      	movs	r3, r0
 80052c6:	001a      	movs	r2, r3
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	785b      	ldrb	r3, [r3, #1]
 80052d0:	0018      	movs	r0, r3
 80052d2:	f000 fa11 	bl	80056f8 <RTC_Bcd2ToByte>
 80052d6:	0003      	movs	r3, r0
 80052d8:	001a      	movs	r2, r3
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	789b      	ldrb	r3, [r3, #2]
 80052e2:	0018      	movs	r0, r3
 80052e4:	f000 fa08 	bl	80056f8 <RTC_Bcd2ToByte>
 80052e8:	0003      	movs	r3, r0
 80052ea:	001a      	movs	r2, r3
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	0018      	movs	r0, r3
 80052f4:	46bd      	mov	sp, r7
 80052f6:	b006      	add	sp, #24
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	46c0      	nop			; (mov r8, r8)
 80052fc:	00ffff3f 	.word	0x00ffff3f

08005300 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005300:	b590      	push	{r4, r7, lr}
 8005302:	b089      	sub	sp, #36	; 0x24
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2228      	movs	r2, #40	; 0x28
 8005310:	5c9b      	ldrb	r3, [r3, r2]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d101      	bne.n	800531a <HAL_RTC_SetAlarm+0x1a>
 8005316:	2302      	movs	r3, #2
 8005318:	e10c      	b.n	8005534 <HAL_RTC_SetAlarm+0x234>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2228      	movs	r2, #40	; 0x28
 800531e:	2101      	movs	r1, #1
 8005320:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2229      	movs	r2, #41	; 0x29
 8005326:	2102      	movs	r1, #2
 8005328:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d136      	bne.n	800539e <HAL_RTC_SetAlarm+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	2240      	movs	r2, #64	; 0x40
 8005338:	4013      	ands	r3, r2
 800533a:	d102      	bne.n	8005342 <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	2200      	movs	r2, #0
 8005340:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	0018      	movs	r0, r3
 8005348:	f000 f9ae 	bl	80056a8 <RTC_ByteToBcd2>
 800534c:	0003      	movs	r3, r0
 800534e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	785b      	ldrb	r3, [r3, #1]
 8005354:	0018      	movs	r0, r3
 8005356:	f000 f9a7 	bl	80056a8 <RTC_ByteToBcd2>
 800535a:	0003      	movs	r3, r0
 800535c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800535e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	789b      	ldrb	r3, [r3, #2]
 8005364:	0018      	movs	r0, r3
 8005366:	f000 f99f 	bl	80056a8 <RTC_ByteToBcd2>
 800536a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800536c:	0022      	movs	r2, r4
 800536e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	78db      	ldrb	r3, [r3, #3]
 8005374:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005376:	431a      	orrs	r2, r3
 8005378:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	2220      	movs	r2, #32
 800537e:	5c9b      	ldrb	r3, [r3, r2]
 8005380:	0018      	movs	r0, r3
 8005382:	f000 f991 	bl	80056a8 <RTC_ByteToBcd2>
 8005386:	0003      	movs	r3, r0
 8005388:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800538a:	0022      	movs	r2, r4
 800538c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005392:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005398:	4313      	orrs	r3, r2
 800539a:	61fb      	str	r3, [r7, #28]
 800539c:	e022      	b.n	80053e4 <HAL_RTC_SetAlarm+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	2240      	movs	r2, #64	; 0x40
 80053a6:	4013      	ands	r3, r2
 80053a8:	d102      	bne.n	80053b0 <HAL_RTC_SetAlarm+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	2200      	movs	r2, #0
 80053ae:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	785b      	ldrb	r3, [r3, #1]
 80053ba:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80053bc:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80053c2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	78db      	ldrb	r3, [r3, #3]
 80053c8:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80053ca:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	2120      	movs	r1, #32
 80053d0:	5c5b      	ldrb	r3, [r3, r1]
 80053d2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80053d4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80053da:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80053e0:	4313      	orrs	r3, r2
 80053e2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	685a      	ldr	r2, [r3, #4]
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	22ca      	movs	r2, #202	; 0xca
 80053f6:	625a      	str	r2, [r3, #36]	; 0x24
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2253      	movs	r2, #83	; 0x53
 80053fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005404:	2380      	movs	r3, #128	; 0x80
 8005406:	005b      	lsls	r3, r3, #1
 8005408:	429a      	cmp	r2, r3
 800540a:	d143      	bne.n	8005494 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	699a      	ldr	r2, [r3, #24]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4949      	ldr	r1, [pc, #292]	; (800553c <HAL_RTC_SetAlarm+0x23c>)
 8005418:	400a      	ands	r2, r1
 800541a:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	699a      	ldr	r2, [r3, #24]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4946      	ldr	r1, [pc, #280]	; (8005540 <HAL_RTC_SetAlarm+0x240>)
 8005428:	400a      	ands	r2, r1
 800542a:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 800542c:	f7fe f95c 	bl	80036e8 <HAL_GetTick>
 8005430:	0003      	movs	r3, r0
 8005432:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005434:	e016      	b.n	8005464 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005436:	f7fe f957 	bl	80036e8 <HAL_GetTick>
 800543a:	0002      	movs	r2, r0
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	1ad2      	subs	r2, r2, r3
 8005440:	23fa      	movs	r3, #250	; 0xfa
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	429a      	cmp	r2, r3
 8005446:	d90d      	bls.n	8005464 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	22ff      	movs	r2, #255	; 0xff
 800544e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2229      	movs	r2, #41	; 0x29
 8005454:	2103      	movs	r1, #3
 8005456:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2228      	movs	r2, #40	; 0x28
 800545c:	2100      	movs	r1, #0
 800545e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e067      	b.n	8005534 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	2201      	movs	r2, #1
 800546c:	4013      	ands	r3, r2
 800546e:	d0e2      	beq.n	8005436 <HAL_RTC_SetAlarm+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	69fa      	ldr	r2, [r7, #28]
 8005476:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	699a      	ldr	r2, [r3, #24]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2180      	movs	r1, #128	; 0x80
 800548c:	0049      	lsls	r1, r1, #1
 800548e:	430a      	orrs	r2, r1
 8005490:	619a      	str	r2, [r3, #24]
 8005492:	e042      	b.n	800551a <HAL_RTC_SetAlarm+0x21a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	699a      	ldr	r2, [r3, #24]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4929      	ldr	r1, [pc, #164]	; (8005544 <HAL_RTC_SetAlarm+0x244>)
 80054a0:	400a      	ands	r2, r1
 80054a2:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	699a      	ldr	r2, [r3, #24]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4926      	ldr	r1, [pc, #152]	; (8005548 <HAL_RTC_SetAlarm+0x248>)
 80054b0:	400a      	ands	r2, r1
 80054b2:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 80054b4:	f7fe f918 	bl	80036e8 <HAL_GetTick>
 80054b8:	0003      	movs	r3, r0
 80054ba:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80054bc:	e016      	b.n	80054ec <HAL_RTC_SetAlarm+0x1ec>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80054be:	f7fe f913 	bl	80036e8 <HAL_GetTick>
 80054c2:	0002      	movs	r2, r0
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	1ad2      	subs	r2, r2, r3
 80054c8:	23fa      	movs	r3, #250	; 0xfa
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d90d      	bls.n	80054ec <HAL_RTC_SetAlarm+0x1ec>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	22ff      	movs	r2, #255	; 0xff
 80054d6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2229      	movs	r2, #41	; 0x29
 80054dc:	2103      	movs	r1, #3
 80054de:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2228      	movs	r2, #40	; 0x28
 80054e4:	2100      	movs	r1, #0
 80054e6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e023      	b.n	8005534 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	2202      	movs	r2, #2
 80054f4:	4013      	ands	r3, r2
 80054f6:	d0e2      	beq.n	80054be <HAL_RTC_SetAlarm+0x1be>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	69fa      	ldr	r2, [r7, #28]
 80054fe:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	69ba      	ldr	r2, [r7, #24]
 8005506:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	699a      	ldr	r2, [r3, #24]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2180      	movs	r1, #128	; 0x80
 8005514:	0089      	lsls	r1, r1, #2
 8005516:	430a      	orrs	r2, r1
 8005518:	619a      	str	r2, [r3, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	22ff      	movs	r2, #255	; 0xff
 8005520:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2229      	movs	r2, #41	; 0x29
 8005526:	2101      	movs	r1, #1
 8005528:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2228      	movs	r2, #40	; 0x28
 800552e:	2100      	movs	r1, #0
 8005530:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	0018      	movs	r0, r3
 8005536:	46bd      	mov	sp, r7
 8005538:	b009      	add	sp, #36	; 0x24
 800553a:	bd90      	pop	{r4, r7, pc}
 800553c:	fffffeff 	.word	0xfffffeff
 8005540:	ffffefff 	.word	0xffffefff
 8005544:	fffffdff 	.word	0xfffffdff
 8005548:	ffffdfff 	.word	0xffffdfff

0800554c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68da      	ldr	r2, [r3, #12]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	21a0      	movs	r1, #160	; 0xa0
 8005560:	438a      	bics	r2, r1
 8005562:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005564:	f7fe f8c0 	bl	80036e8 <HAL_GetTick>
 8005568:	0003      	movs	r3, r0
 800556a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800556c:	e00a      	b.n	8005584 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800556e:	f7fe f8bb 	bl	80036e8 <HAL_GetTick>
 8005572:	0002      	movs	r2, r0
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	1ad2      	subs	r2, r2, r3
 8005578:	23fa      	movs	r3, #250	; 0xfa
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	429a      	cmp	r2, r3
 800557e:	d901      	bls.n	8005584 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e006      	b.n	8005592 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	2220      	movs	r2, #32
 800558c:	4013      	ands	r3, r2
 800558e:	d0ee      	beq.n	800556e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	0018      	movs	r0, r3
 8005594:	46bd      	mov	sp, r7
 8005596:	b004      	add	sp, #16
 8005598:	bd80      	pop	{r7, pc}

0800559a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b084      	sub	sp, #16
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80055a2:	230f      	movs	r3, #15
 80055a4:	18fb      	adds	r3, r7, r3
 80055a6:	2200      	movs	r2, #0
 80055a8:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	2240      	movs	r2, #64	; 0x40
 80055b2:	4013      	ands	r3, r2
 80055b4:	d12c      	bne.n	8005610 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68da      	ldr	r2, [r3, #12]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2180      	movs	r1, #128	; 0x80
 80055c2:	430a      	orrs	r2, r1
 80055c4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80055c6:	f7fe f88f 	bl	80036e8 <HAL_GetTick>
 80055ca:	0003      	movs	r3, r0
 80055cc:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80055ce:	e014      	b.n	80055fa <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80055d0:	f7fe f88a 	bl	80036e8 <HAL_GetTick>
 80055d4:	0002      	movs	r2, r0
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	1ad2      	subs	r2, r2, r3
 80055da:	200f      	movs	r0, #15
 80055dc:	183b      	adds	r3, r7, r0
 80055de:	1839      	adds	r1, r7, r0
 80055e0:	7809      	ldrb	r1, [r1, #0]
 80055e2:	7019      	strb	r1, [r3, #0]
 80055e4:	23fa      	movs	r3, #250	; 0xfa
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d906      	bls.n	80055fa <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80055ec:	183b      	adds	r3, r7, r0
 80055ee:	2203      	movs	r2, #3
 80055f0:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2229      	movs	r2, #41	; 0x29
 80055f6:	2103      	movs	r1, #3
 80055f8:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	2240      	movs	r2, #64	; 0x40
 8005602:	4013      	ands	r3, r2
 8005604:	d104      	bne.n	8005610 <RTC_EnterInitMode+0x76>
 8005606:	230f      	movs	r3, #15
 8005608:	18fb      	adds	r3, r7, r3
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	2b03      	cmp	r3, #3
 800560e:	d1df      	bne.n	80055d0 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005610:	230f      	movs	r3, #15
 8005612:	18fb      	adds	r3, r7, r3
 8005614:	781b      	ldrb	r3, [r3, #0]
}
 8005616:	0018      	movs	r0, r3
 8005618:	46bd      	mov	sp, r7
 800561a:	b004      	add	sp, #16
 800561c:	bd80      	pop	{r7, pc}
	...

08005620 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005620:	b590      	push	{r4, r7, lr}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005628:	240f      	movs	r4, #15
 800562a:	193b      	adds	r3, r7, r4
 800562c:	2200      	movs	r2, #0
 800562e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005630:	4b1c      	ldr	r3, [pc, #112]	; (80056a4 <RTC_ExitInitMode+0x84>)
 8005632:	68da      	ldr	r2, [r3, #12]
 8005634:	4b1b      	ldr	r3, [pc, #108]	; (80056a4 <RTC_ExitInitMode+0x84>)
 8005636:	2180      	movs	r1, #128	; 0x80
 8005638:	438a      	bics	r2, r1
 800563a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800563c:	4b19      	ldr	r3, [pc, #100]	; (80056a4 <RTC_ExitInitMode+0x84>)
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	2220      	movs	r2, #32
 8005642:	4013      	ands	r3, r2
 8005644:	d10d      	bne.n	8005662 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	0018      	movs	r0, r3
 800564a:	f7ff ff7f 	bl	800554c <HAL_RTC_WaitForSynchro>
 800564e:	1e03      	subs	r3, r0, #0
 8005650:	d021      	beq.n	8005696 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2229      	movs	r2, #41	; 0x29
 8005656:	2103      	movs	r1, #3
 8005658:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800565a:	193b      	adds	r3, r7, r4
 800565c:	2203      	movs	r2, #3
 800565e:	701a      	strb	r2, [r3, #0]
 8005660:	e019      	b.n	8005696 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005662:	4b10      	ldr	r3, [pc, #64]	; (80056a4 <RTC_ExitInitMode+0x84>)
 8005664:	699a      	ldr	r2, [r3, #24]
 8005666:	4b0f      	ldr	r3, [pc, #60]	; (80056a4 <RTC_ExitInitMode+0x84>)
 8005668:	2120      	movs	r1, #32
 800566a:	438a      	bics	r2, r1
 800566c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	0018      	movs	r0, r3
 8005672:	f7ff ff6b 	bl	800554c <HAL_RTC_WaitForSynchro>
 8005676:	1e03      	subs	r3, r0, #0
 8005678:	d007      	beq.n	800568a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2229      	movs	r2, #41	; 0x29
 800567e:	2103      	movs	r1, #3
 8005680:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005682:	230f      	movs	r3, #15
 8005684:	18fb      	adds	r3, r7, r3
 8005686:	2203      	movs	r2, #3
 8005688:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800568a:	4b06      	ldr	r3, [pc, #24]	; (80056a4 <RTC_ExitInitMode+0x84>)
 800568c:	699a      	ldr	r2, [r3, #24]
 800568e:	4b05      	ldr	r3, [pc, #20]	; (80056a4 <RTC_ExitInitMode+0x84>)
 8005690:	2120      	movs	r1, #32
 8005692:	430a      	orrs	r2, r1
 8005694:	619a      	str	r2, [r3, #24]
  }

  return status;
 8005696:	230f      	movs	r3, #15
 8005698:	18fb      	adds	r3, r7, r3
 800569a:	781b      	ldrb	r3, [r3, #0]
}
 800569c:	0018      	movs	r0, r3
 800569e:	46bd      	mov	sp, r7
 80056a0:	b005      	add	sp, #20
 80056a2:	bd90      	pop	{r4, r7, pc}
 80056a4:	40002800 	.word	0x40002800

080056a8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	0002      	movs	r2, r0
 80056b0:	1dfb      	adds	r3, r7, #7
 80056b2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80056b4:	2300      	movs	r3, #0
 80056b6:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80056b8:	230b      	movs	r3, #11
 80056ba:	18fb      	adds	r3, r7, r3
 80056bc:	1dfa      	adds	r2, r7, #7
 80056be:	7812      	ldrb	r2, [r2, #0]
 80056c0:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80056c2:	e008      	b.n	80056d6 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	3301      	adds	r3, #1
 80056c8:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80056ca:	220b      	movs	r2, #11
 80056cc:	18bb      	adds	r3, r7, r2
 80056ce:	18ba      	adds	r2, r7, r2
 80056d0:	7812      	ldrb	r2, [r2, #0]
 80056d2:	3a0a      	subs	r2, #10
 80056d4:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80056d6:	210b      	movs	r1, #11
 80056d8:	187b      	adds	r3, r7, r1
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	2b09      	cmp	r3, #9
 80056de:	d8f1      	bhi.n	80056c4 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	011b      	lsls	r3, r3, #4
 80056e6:	b2da      	uxtb	r2, r3
 80056e8:	187b      	adds	r3, r7, r1
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	b2db      	uxtb	r3, r3
}
 80056f0:	0018      	movs	r0, r3
 80056f2:	46bd      	mov	sp, r7
 80056f4:	b004      	add	sp, #16
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	0002      	movs	r2, r0
 8005700:	1dfb      	adds	r3, r7, #7
 8005702:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005704:	1dfb      	adds	r3, r7, #7
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	091b      	lsrs	r3, r3, #4
 800570a:	b2db      	uxtb	r3, r3
 800570c:	001a      	movs	r2, r3
 800570e:	0013      	movs	r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	189b      	adds	r3, r3, r2
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	b2da      	uxtb	r2, r3
 800571c:	1dfb      	adds	r3, r7, #7
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	210f      	movs	r1, #15
 8005722:	400b      	ands	r3, r1
 8005724:	b2db      	uxtb	r3, r3
 8005726:	18d3      	adds	r3, r2, r3
 8005728:	b2db      	uxtb	r3, r3
}
 800572a:	0018      	movs	r0, r3
 800572c:	46bd      	mov	sp, r7
 800572e:	b004      	add	sp, #16
 8005730:	bd80      	pop	{r7, pc}

08005732 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b082      	sub	sp, #8
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2228      	movs	r2, #40	; 0x28
 800573e:	5c9b      	ldrb	r3, [r3, r2]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d101      	bne.n	8005748 <HAL_RTCEx_EnableBypassShadow+0x16>
 8005744:	2302      	movs	r3, #2
 8005746:	e024      	b.n	8005792 <HAL_RTCEx_EnableBypassShadow+0x60>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2228      	movs	r2, #40	; 0x28
 800574c:	2101      	movs	r1, #1
 800574e:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2229      	movs	r2, #41	; 0x29
 8005754:	2102      	movs	r1, #2
 8005756:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	22ca      	movs	r2, #202	; 0xca
 800575e:	625a      	str	r2, [r3, #36]	; 0x24
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2253      	movs	r2, #83	; 0x53
 8005766:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	699a      	ldr	r2, [r3, #24]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2120      	movs	r1, #32
 8005774:	430a      	orrs	r2, r1
 8005776:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	22ff      	movs	r2, #255	; 0xff
 800577e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2229      	movs	r2, #41	; 0x29
 8005784:	2101      	movs	r1, #1
 8005786:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2228      	movs	r2, #40	; 0x28
 800578c:	2100      	movs	r1, #0
 800578e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	0018      	movs	r0, r3
 8005794:	46bd      	mov	sp, r7
 8005796:	b002      	add	sp, #8
 8005798:	bd80      	pop	{r7, pc}

0800579a <HAL_RTCEx_DisableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b082      	sub	sp, #8
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2228      	movs	r2, #40	; 0x28
 80057a6:	5c9b      	ldrb	r3, [r3, r2]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d101      	bne.n	80057b0 <HAL_RTCEx_DisableBypassShadow+0x16>
 80057ac:	2302      	movs	r3, #2
 80057ae:	e024      	b.n	80057fa <HAL_RTCEx_DisableBypassShadow+0x60>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2228      	movs	r2, #40	; 0x28
 80057b4:	2101      	movs	r1, #1
 80057b6:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2229      	movs	r2, #41	; 0x29
 80057bc:	2102      	movs	r1, #2
 80057be:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	22ca      	movs	r2, #202	; 0xca
 80057c6:	625a      	str	r2, [r3, #36]	; 0x24
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2253      	movs	r2, #83	; 0x53
 80057ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset the BYPSHAD bit */
  hrtc->Instance->CR &= ((uint8_t)~RTC_CR_BYPSHAD);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	699a      	ldr	r2, [r3, #24]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	21df      	movs	r1, #223	; 0xdf
 80057dc:	400a      	ands	r2, r1
 80057de:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	22ff      	movs	r2, #255	; 0xff
 80057e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2229      	movs	r2, #41	; 0x29
 80057ec:	2101      	movs	r1, #1
 80057ee:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2228      	movs	r2, #40	; 0x28
 80057f4:	2100      	movs	r1, #0
 80057f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	0018      	movs	r0, r3
 80057fc:	46bd      	mov	sp, r7
 80057fe:	b002      	add	sp, #8
 8005800:	bd80      	pop	{r7, pc}

08005802 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b082      	sub	sp, #8
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e04a      	b.n	80058aa <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	223d      	movs	r2, #61	; 0x3d
 8005818:	5c9b      	ldrb	r3, [r3, r2]
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b00      	cmp	r3, #0
 800581e:	d107      	bne.n	8005830 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	223c      	movs	r2, #60	; 0x3c
 8005824:	2100      	movs	r1, #0
 8005826:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	0018      	movs	r0, r3
 800582c:	f7fd fc74 	bl	8003118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	223d      	movs	r2, #61	; 0x3d
 8005834:	2102      	movs	r1, #2
 8005836:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	3304      	adds	r3, #4
 8005840:	0019      	movs	r1, r3
 8005842:	0010      	movs	r0, r2
 8005844:	f000 fa12 	bl	8005c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2248      	movs	r2, #72	; 0x48
 800584c:	2101      	movs	r1, #1
 800584e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	223e      	movs	r2, #62	; 0x3e
 8005854:	2101      	movs	r1, #1
 8005856:	5499      	strb	r1, [r3, r2]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	223f      	movs	r2, #63	; 0x3f
 800585c:	2101      	movs	r1, #1
 800585e:	5499      	strb	r1, [r3, r2]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2240      	movs	r2, #64	; 0x40
 8005864:	2101      	movs	r1, #1
 8005866:	5499      	strb	r1, [r3, r2]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2241      	movs	r2, #65	; 0x41
 800586c:	2101      	movs	r1, #1
 800586e:	5499      	strb	r1, [r3, r2]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2242      	movs	r2, #66	; 0x42
 8005874:	2101      	movs	r1, #1
 8005876:	5499      	strb	r1, [r3, r2]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2243      	movs	r2, #67	; 0x43
 800587c:	2101      	movs	r1, #1
 800587e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2244      	movs	r2, #68	; 0x44
 8005884:	2101      	movs	r1, #1
 8005886:	5499      	strb	r1, [r3, r2]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2245      	movs	r2, #69	; 0x45
 800588c:	2101      	movs	r1, #1
 800588e:	5499      	strb	r1, [r3, r2]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2246      	movs	r2, #70	; 0x46
 8005894:	2101      	movs	r1, #1
 8005896:	5499      	strb	r1, [r3, r2]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2247      	movs	r2, #71	; 0x47
 800589c:	2101      	movs	r1, #1
 800589e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	223d      	movs	r2, #61	; 0x3d
 80058a4:	2101      	movs	r1, #1
 80058a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	0018      	movs	r0, r3
 80058ac:	46bd      	mov	sp, r7
 80058ae:	b002      	add	sp, #8
 80058b0:	bd80      	pop	{r7, pc}
	...

080058b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	223d      	movs	r2, #61	; 0x3d
 80058c0:	5c9b      	ldrb	r3, [r3, r2]
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d001      	beq.n	80058cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e042      	b.n	8005952 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	223d      	movs	r2, #61	; 0x3d
 80058d0:	2102      	movs	r1, #2
 80058d2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68da      	ldr	r2, [r3, #12]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2101      	movs	r1, #1
 80058e0:	430a      	orrs	r2, r1
 80058e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a1c      	ldr	r2, [pc, #112]	; (800595c <HAL_TIM_Base_Start_IT+0xa8>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d00f      	beq.n	800590e <HAL_TIM_Base_Start_IT+0x5a>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	2380      	movs	r3, #128	; 0x80
 80058f4:	05db      	lsls	r3, r3, #23
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d009      	beq.n	800590e <HAL_TIM_Base_Start_IT+0x5a>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a18      	ldr	r2, [pc, #96]	; (8005960 <HAL_TIM_Base_Start_IT+0xac>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d004      	beq.n	800590e <HAL_TIM_Base_Start_IT+0x5a>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a16      	ldr	r2, [pc, #88]	; (8005964 <HAL_TIM_Base_Start_IT+0xb0>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d116      	bne.n	800593c <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	4a14      	ldr	r2, [pc, #80]	; (8005968 <HAL_TIM_Base_Start_IT+0xb4>)
 8005916:	4013      	ands	r3, r2
 8005918:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2b06      	cmp	r3, #6
 800591e:	d016      	beq.n	800594e <HAL_TIM_Base_Start_IT+0x9a>
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	2380      	movs	r3, #128	; 0x80
 8005924:	025b      	lsls	r3, r3, #9
 8005926:	429a      	cmp	r2, r3
 8005928:	d011      	beq.n	800594e <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2101      	movs	r1, #1
 8005936:	430a      	orrs	r2, r1
 8005938:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800593a:	e008      	b.n	800594e <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2101      	movs	r1, #1
 8005948:	430a      	orrs	r2, r1
 800594a:	601a      	str	r2, [r3, #0]
 800594c:	e000      	b.n	8005950 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800594e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	0018      	movs	r0, r3
 8005954:	46bd      	mov	sp, r7
 8005956:	b004      	add	sp, #16
 8005958:	bd80      	pop	{r7, pc}
 800595a:	46c0      	nop			; (mov r8, r8)
 800595c:	40012c00 	.word	0x40012c00
 8005960:	40000400 	.word	0x40000400
 8005964:	40014000 	.word	0x40014000
 8005968:	00010007 	.word	0x00010007

0800596c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68da      	ldr	r2, [r3, #12]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2101      	movs	r1, #1
 8005980:	438a      	bics	r2, r1
 8005982:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	4a0d      	ldr	r2, [pc, #52]	; (80059c0 <HAL_TIM_Base_Stop_IT+0x54>)
 800598c:	4013      	ands	r3, r2
 800598e:	d10d      	bne.n	80059ac <HAL_TIM_Base_Stop_IT+0x40>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	4a0b      	ldr	r2, [pc, #44]	; (80059c4 <HAL_TIM_Base_Stop_IT+0x58>)
 8005998:	4013      	ands	r3, r2
 800599a:	d107      	bne.n	80059ac <HAL_TIM_Base_Stop_IT+0x40>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2101      	movs	r1, #1
 80059a8:	438a      	bics	r2, r1
 80059aa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	223d      	movs	r2, #61	; 0x3d
 80059b0:	2101      	movs	r1, #1
 80059b2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	0018      	movs	r0, r3
 80059b8:	46bd      	mov	sp, r7
 80059ba:	b002      	add	sp, #8
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	46c0      	nop			; (mov r8, r8)
 80059c0:	00001111 	.word	0x00001111
 80059c4:	00000444 	.word	0x00000444

080059c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	2202      	movs	r2, #2
 80059d8:	4013      	ands	r3, r2
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d124      	bne.n	8005a28 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	2202      	movs	r2, #2
 80059e6:	4013      	ands	r3, r2
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d11d      	bne.n	8005a28 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2203      	movs	r2, #3
 80059f2:	4252      	negs	r2, r2
 80059f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	2203      	movs	r2, #3
 8005a04:	4013      	ands	r3, r2
 8005a06:	d004      	beq.n	8005a12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	0018      	movs	r0, r3
 8005a0c:	f000 f916 	bl	8005c3c <HAL_TIM_IC_CaptureCallback>
 8005a10:	e007      	b.n	8005a22 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	0018      	movs	r0, r3
 8005a16:	f000 f909 	bl	8005c2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	0018      	movs	r0, r3
 8005a1e:	f000 f915 	bl	8005c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	2204      	movs	r2, #4
 8005a30:	4013      	ands	r3, r2
 8005a32:	2b04      	cmp	r3, #4
 8005a34:	d125      	bne.n	8005a82 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	2204      	movs	r2, #4
 8005a3e:	4013      	ands	r3, r2
 8005a40:	2b04      	cmp	r3, #4
 8005a42:	d11e      	bne.n	8005a82 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2205      	movs	r2, #5
 8005a4a:	4252      	negs	r2, r2
 8005a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2202      	movs	r2, #2
 8005a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	699a      	ldr	r2, [r3, #24]
 8005a5a:	23c0      	movs	r3, #192	; 0xc0
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4013      	ands	r3, r2
 8005a60:	d004      	beq.n	8005a6c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	0018      	movs	r0, r3
 8005a66:	f000 f8e9 	bl	8005c3c <HAL_TIM_IC_CaptureCallback>
 8005a6a:	e007      	b.n	8005a7c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	0018      	movs	r0, r3
 8005a70:	f000 f8dc 	bl	8005c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	0018      	movs	r0, r3
 8005a78:	f000 f8e8 	bl	8005c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	2208      	movs	r2, #8
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	2b08      	cmp	r3, #8
 8005a8e:	d124      	bne.n	8005ada <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	2208      	movs	r2, #8
 8005a98:	4013      	ands	r3, r2
 8005a9a:	2b08      	cmp	r3, #8
 8005a9c:	d11d      	bne.n	8005ada <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2209      	movs	r2, #9
 8005aa4:	4252      	negs	r2, r2
 8005aa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2204      	movs	r2, #4
 8005aac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	69db      	ldr	r3, [r3, #28]
 8005ab4:	2203      	movs	r2, #3
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	d004      	beq.n	8005ac4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	0018      	movs	r0, r3
 8005abe:	f000 f8bd 	bl	8005c3c <HAL_TIM_IC_CaptureCallback>
 8005ac2:	e007      	b.n	8005ad4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	0018      	movs	r0, r3
 8005ac8:	f000 f8b0 	bl	8005c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	0018      	movs	r0, r3
 8005ad0:	f000 f8bc 	bl	8005c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	2210      	movs	r2, #16
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	2b10      	cmp	r3, #16
 8005ae6:	d125      	bne.n	8005b34 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	2210      	movs	r2, #16
 8005af0:	4013      	ands	r3, r2
 8005af2:	2b10      	cmp	r3, #16
 8005af4:	d11e      	bne.n	8005b34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2211      	movs	r2, #17
 8005afc:	4252      	negs	r2, r2
 8005afe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2208      	movs	r2, #8
 8005b04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	69da      	ldr	r2, [r3, #28]
 8005b0c:	23c0      	movs	r3, #192	; 0xc0
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4013      	ands	r3, r2
 8005b12:	d004      	beq.n	8005b1e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	0018      	movs	r0, r3
 8005b18:	f000 f890 	bl	8005c3c <HAL_TIM_IC_CaptureCallback>
 8005b1c:	e007      	b.n	8005b2e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	0018      	movs	r0, r3
 8005b22:	f000 f883 	bl	8005c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	0018      	movs	r0, r3
 8005b2a:	f000 f88f 	bl	8005c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d10f      	bne.n	8005b62 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d108      	bne.n	8005b62 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2202      	movs	r2, #2
 8005b56:	4252      	negs	r2, r2
 8005b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	0018      	movs	r0, r3
 8005b5e:	f7fd f9f1 	bl	8002f44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	2280      	movs	r2, #128	; 0x80
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	2b80      	cmp	r3, #128	; 0x80
 8005b6e:	d10f      	bne.n	8005b90 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	2280      	movs	r2, #128	; 0x80
 8005b78:	4013      	ands	r3, r2
 8005b7a:	2b80      	cmp	r3, #128	; 0x80
 8005b7c:	d108      	bne.n	8005b90 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2281      	movs	r2, #129	; 0x81
 8005b84:	4252      	negs	r2, r2
 8005b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	0018      	movs	r0, r3
 8005b8c:	f000 f964 	bl	8005e58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	691a      	ldr	r2, [r3, #16]
 8005b96:	2380      	movs	r3, #128	; 0x80
 8005b98:	005b      	lsls	r3, r3, #1
 8005b9a:	401a      	ands	r2, r3
 8005b9c:	2380      	movs	r3, #128	; 0x80
 8005b9e:	005b      	lsls	r3, r3, #1
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d10e      	bne.n	8005bc2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	2280      	movs	r2, #128	; 0x80
 8005bac:	4013      	ands	r3, r2
 8005bae:	2b80      	cmp	r3, #128	; 0x80
 8005bb0:	d107      	bne.n	8005bc2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a1c      	ldr	r2, [pc, #112]	; (8005c28 <HAL_TIM_IRQHandler+0x260>)
 8005bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	0018      	movs	r0, r3
 8005bbe:	f000 f953 	bl	8005e68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	2240      	movs	r2, #64	; 0x40
 8005bca:	4013      	ands	r3, r2
 8005bcc:	2b40      	cmp	r3, #64	; 0x40
 8005bce:	d10f      	bne.n	8005bf0 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	2240      	movs	r2, #64	; 0x40
 8005bd8:	4013      	ands	r3, r2
 8005bda:	2b40      	cmp	r3, #64	; 0x40
 8005bdc:	d108      	bne.n	8005bf0 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2241      	movs	r2, #65	; 0x41
 8005be4:	4252      	negs	r2, r2
 8005be6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	0018      	movs	r0, r3
 8005bec:	f000 f836 	bl	8005c5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	2b20      	cmp	r3, #32
 8005bfc:	d10f      	bne.n	8005c1e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	2220      	movs	r2, #32
 8005c06:	4013      	ands	r3, r2
 8005c08:	2b20      	cmp	r3, #32
 8005c0a:	d108      	bne.n	8005c1e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2221      	movs	r2, #33	; 0x21
 8005c12:	4252      	negs	r2, r2
 8005c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	0018      	movs	r0, r3
 8005c1a:	f000 f915 	bl	8005e48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c1e:	46c0      	nop			; (mov r8, r8)
 8005c20:	46bd      	mov	sp, r7
 8005c22:	b002      	add	sp, #8
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	46c0      	nop			; (mov r8, r8)
 8005c28:	fffffeff 	.word	0xfffffeff

08005c2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c34:	46c0      	nop			; (mov r8, r8)
 8005c36:	46bd      	mov	sp, r7
 8005c38:	b002      	add	sp, #8
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c44:	46c0      	nop			; (mov r8, r8)
 8005c46:	46bd      	mov	sp, r7
 8005c48:	b002      	add	sp, #8
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c54:	46c0      	nop			; (mov r8, r8)
 8005c56:	46bd      	mov	sp, r7
 8005c58:	b002      	add	sp, #8
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c64:	46c0      	nop			; (mov r8, r8)
 8005c66:	46bd      	mov	sp, r7
 8005c68:	b002      	add	sp, #8
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a34      	ldr	r2, [pc, #208]	; (8005d50 <TIM_Base_SetConfig+0xe4>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d008      	beq.n	8005c96 <TIM_Base_SetConfig+0x2a>
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	2380      	movs	r3, #128	; 0x80
 8005c88:	05db      	lsls	r3, r3, #23
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d003      	beq.n	8005c96 <TIM_Base_SetConfig+0x2a>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a30      	ldr	r2, [pc, #192]	; (8005d54 <TIM_Base_SetConfig+0xe8>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d108      	bne.n	8005ca8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2270      	movs	r2, #112	; 0x70
 8005c9a:	4393      	bics	r3, r2
 8005c9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a29      	ldr	r2, [pc, #164]	; (8005d50 <TIM_Base_SetConfig+0xe4>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d018      	beq.n	8005ce2 <TIM_Base_SetConfig+0x76>
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	2380      	movs	r3, #128	; 0x80
 8005cb4:	05db      	lsls	r3, r3, #23
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d013      	beq.n	8005ce2 <TIM_Base_SetConfig+0x76>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a25      	ldr	r2, [pc, #148]	; (8005d54 <TIM_Base_SetConfig+0xe8>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d00f      	beq.n	8005ce2 <TIM_Base_SetConfig+0x76>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a24      	ldr	r2, [pc, #144]	; (8005d58 <TIM_Base_SetConfig+0xec>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d00b      	beq.n	8005ce2 <TIM_Base_SetConfig+0x76>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a23      	ldr	r2, [pc, #140]	; (8005d5c <TIM_Base_SetConfig+0xf0>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d007      	beq.n	8005ce2 <TIM_Base_SetConfig+0x76>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a22      	ldr	r2, [pc, #136]	; (8005d60 <TIM_Base_SetConfig+0xf4>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d003      	beq.n	8005ce2 <TIM_Base_SetConfig+0x76>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a21      	ldr	r2, [pc, #132]	; (8005d64 <TIM_Base_SetConfig+0xf8>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d108      	bne.n	8005cf4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	4a20      	ldr	r2, [pc, #128]	; (8005d68 <TIM_Base_SetConfig+0xfc>)
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2280      	movs	r2, #128	; 0x80
 8005cf8:	4393      	bics	r3, r2
 8005cfa:	001a      	movs	r2, r3
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	689a      	ldr	r2, [r3, #8]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a0c      	ldr	r2, [pc, #48]	; (8005d50 <TIM_Base_SetConfig+0xe4>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d00b      	beq.n	8005d3a <TIM_Base_SetConfig+0xce>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a0d      	ldr	r2, [pc, #52]	; (8005d5c <TIM_Base_SetConfig+0xf0>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d007      	beq.n	8005d3a <TIM_Base_SetConfig+0xce>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a0c      	ldr	r2, [pc, #48]	; (8005d60 <TIM_Base_SetConfig+0xf4>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d003      	beq.n	8005d3a <TIM_Base_SetConfig+0xce>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a0b      	ldr	r2, [pc, #44]	; (8005d64 <TIM_Base_SetConfig+0xf8>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d103      	bne.n	8005d42 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	691a      	ldr	r2, [r3, #16]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	615a      	str	r2, [r3, #20]
}
 8005d48:	46c0      	nop			; (mov r8, r8)
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	b004      	add	sp, #16
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	40012c00 	.word	0x40012c00
 8005d54:	40000400 	.word	0x40000400
 8005d58:	40002000 	.word	0x40002000
 8005d5c:	40014000 	.word	0x40014000
 8005d60:	40014400 	.word	0x40014400
 8005d64:	40014800 	.word	0x40014800
 8005d68:	fffffcff 	.word	0xfffffcff

08005d6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	223c      	movs	r2, #60	; 0x3c
 8005d7a:	5c9b      	ldrb	r3, [r3, r2]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d101      	bne.n	8005d84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d80:	2302      	movs	r3, #2
 8005d82:	e055      	b.n	8005e30 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	223c      	movs	r2, #60	; 0x3c
 8005d88:	2101      	movs	r1, #1
 8005d8a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	223d      	movs	r2, #61	; 0x3d
 8005d90:	2102      	movs	r1, #2
 8005d92:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a23      	ldr	r2, [pc, #140]	; (8005e38 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d108      	bne.n	8005dc0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	4a22      	ldr	r2, [pc, #136]	; (8005e3c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005db2:	4013      	ands	r3, r2
 8005db4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2270      	movs	r2, #112	; 0x70
 8005dc4:	4393      	bics	r3, r2
 8005dc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a16      	ldr	r2, [pc, #88]	; (8005e38 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d00f      	beq.n	8005e04 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	2380      	movs	r3, #128	; 0x80
 8005dea:	05db      	lsls	r3, r3, #23
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d009      	beq.n	8005e04 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a12      	ldr	r2, [pc, #72]	; (8005e40 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d004      	beq.n	8005e04 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a11      	ldr	r2, [pc, #68]	; (8005e44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d10c      	bne.n	8005e1e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	2280      	movs	r2, #128	; 0x80
 8005e08:	4393      	bics	r3, r2
 8005e0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	223d      	movs	r2, #61	; 0x3d
 8005e22:	2101      	movs	r1, #1
 8005e24:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	223c      	movs	r2, #60	; 0x3c
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	0018      	movs	r0, r3
 8005e32:	46bd      	mov	sp, r7
 8005e34:	b004      	add	sp, #16
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	40012c00 	.word	0x40012c00
 8005e3c:	ff0fffff 	.word	0xff0fffff
 8005e40:	40000400 	.word	0x40000400
 8005e44:	40014000 	.word	0x40014000

08005e48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e50:	46c0      	nop			; (mov r8, r8)
 8005e52:	46bd      	mov	sp, r7
 8005e54:	b002      	add	sp, #8
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e60:	46c0      	nop			; (mov r8, r8)
 8005e62:	46bd      	mov	sp, r7
 8005e64:	b002      	add	sp, #8
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e70:	46c0      	nop			; (mov r8, r8)
 8005e72:	46bd      	mov	sp, r7
 8005e74:	b002      	add	sp, #8
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e046      	b.n	8005f18 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2288      	movs	r2, #136	; 0x88
 8005e8e:	589b      	ldr	r3, [r3, r2]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d107      	bne.n	8005ea4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2284      	movs	r2, #132	; 0x84
 8005e98:	2100      	movs	r1, #0
 8005e9a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	0018      	movs	r0, r3
 8005ea0:	f7fd f960 	bl	8003164 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2288      	movs	r2, #136	; 0x88
 8005ea8:	2124      	movs	r1, #36	; 0x24
 8005eaa:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2101      	movs	r1, #1
 8005eb8:	438a      	bics	r2, r1
 8005eba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	0018      	movs	r0, r3
 8005ec0:	f000 f9ee 	bl	80062a0 <UART_SetConfig>
 8005ec4:	0003      	movs	r3, r0
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d101      	bne.n	8005ece <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e024      	b.n	8005f18 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	0018      	movs	r0, r3
 8005eda:	f000 fc9f 	bl	800681c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	490d      	ldr	r1, [pc, #52]	; (8005f20 <HAL_UART_Init+0xa8>)
 8005eea:	400a      	ands	r2, r1
 8005eec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689a      	ldr	r2, [r3, #8]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	212a      	movs	r1, #42	; 0x2a
 8005efa:	438a      	bics	r2, r1
 8005efc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2101      	movs	r1, #1
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	0018      	movs	r0, r3
 8005f12:	f000 fd37 	bl	8006984 <UART_CheckIdleState>
 8005f16:	0003      	movs	r3, r0
}
 8005f18:	0018      	movs	r0, r3
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	b002      	add	sp, #8
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	ffffb7ff 	.word	0xffffb7ff

08005f24 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e032      	b.n	8005f9c <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2288      	movs	r2, #136	; 0x88
 8005f3a:	2124      	movs	r1, #36	; 0x24
 8005f3c:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2101      	movs	r1, #1
 8005f4a:	438a      	bics	r2, r1
 8005f4c:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2200      	movs	r2, #0
 8005f54:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2200      	movs	r2, #0
 8005f64:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	0018      	movs	r0, r3
 8005f6a:	f7fd f9df 	bl	800332c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2290      	movs	r2, #144	; 0x90
 8005f72:	2100      	movs	r1, #0
 8005f74:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2288      	movs	r2, #136	; 0x88
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	228c      	movs	r2, #140	; 0x8c
 8005f82:	2100      	movs	r1, #0
 8005f84:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2284      	movs	r2, #132	; 0x84
 8005f96:	2100      	movs	r1, #0
 8005f98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	0018      	movs	r0, r3
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	b002      	add	sp, #8
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b08a      	sub	sp, #40	; 0x28
 8005fa8:	af02      	add	r7, sp, #8
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	603b      	str	r3, [r7, #0]
 8005fb0:	1dbb      	adds	r3, r7, #6
 8005fb2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2288      	movs	r2, #136	; 0x88
 8005fb8:	589b      	ldr	r3, [r3, r2]
 8005fba:	2b20      	cmp	r3, #32
 8005fbc:	d000      	beq.n	8005fc0 <HAL_UART_Transmit+0x1c>
 8005fbe:	e088      	b.n	80060d2 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <HAL_UART_Transmit+0x2a>
 8005fc6:	1dbb      	adds	r3, r7, #6
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d101      	bne.n	8005fd2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e080      	b.n	80060d4 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	689a      	ldr	r2, [r3, #8]
 8005fd6:	2380      	movs	r3, #128	; 0x80
 8005fd8:	015b      	lsls	r3, r3, #5
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d109      	bne.n	8005ff2 <HAL_UART_Transmit+0x4e>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d105      	bne.n	8005ff2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	4013      	ands	r3, r2
 8005fec:	d001      	beq.n	8005ff2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e070      	b.n	80060d4 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2290      	movs	r2, #144	; 0x90
 8005ff6:	2100      	movs	r1, #0
 8005ff8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2288      	movs	r2, #136	; 0x88
 8005ffe:	2121      	movs	r1, #33	; 0x21
 8006000:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006002:	f7fd fb71 	bl	80036e8 <HAL_GetTick>
 8006006:	0003      	movs	r3, r0
 8006008:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	1dba      	adds	r2, r7, #6
 800600e:	2154      	movs	r1, #84	; 0x54
 8006010:	8812      	ldrh	r2, [r2, #0]
 8006012:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	1dba      	adds	r2, r7, #6
 8006018:	2156      	movs	r1, #86	; 0x56
 800601a:	8812      	ldrh	r2, [r2, #0]
 800601c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	689a      	ldr	r2, [r3, #8]
 8006022:	2380      	movs	r3, #128	; 0x80
 8006024:	015b      	lsls	r3, r3, #5
 8006026:	429a      	cmp	r2, r3
 8006028:	d108      	bne.n	800603c <HAL_UART_Transmit+0x98>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d104      	bne.n	800603c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006032:	2300      	movs	r3, #0
 8006034:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	61bb      	str	r3, [r7, #24]
 800603a:	e003      	b.n	8006044 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006040:	2300      	movs	r3, #0
 8006042:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006044:	e02c      	b.n	80060a0 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	9300      	str	r3, [sp, #0]
 800604e:	0013      	movs	r3, r2
 8006050:	2200      	movs	r2, #0
 8006052:	2180      	movs	r1, #128	; 0x80
 8006054:	f000 fce4 	bl	8006a20 <UART_WaitOnFlagUntilTimeout>
 8006058:	1e03      	subs	r3, r0, #0
 800605a:	d001      	beq.n	8006060 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e039      	b.n	80060d4 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10b      	bne.n	800607e <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	001a      	movs	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	05d2      	lsls	r2, r2, #23
 8006072:	0dd2      	lsrs	r2, r2, #23
 8006074:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	3302      	adds	r3, #2
 800607a:	61bb      	str	r3, [r7, #24]
 800607c:	e007      	b.n	800608e <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	781a      	ldrb	r2, [r3, #0]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	3301      	adds	r3, #1
 800608c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2256      	movs	r2, #86	; 0x56
 8006092:	5a9b      	ldrh	r3, [r3, r2]
 8006094:	b29b      	uxth	r3, r3
 8006096:	3b01      	subs	r3, #1
 8006098:	b299      	uxth	r1, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2256      	movs	r2, #86	; 0x56
 800609e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2256      	movs	r2, #86	; 0x56
 80060a4:	5a9b      	ldrh	r3, [r3, r2]
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1cc      	bne.n	8006046 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	0013      	movs	r3, r2
 80060b6:	2200      	movs	r2, #0
 80060b8:	2140      	movs	r1, #64	; 0x40
 80060ba:	f000 fcb1 	bl	8006a20 <UART_WaitOnFlagUntilTimeout>
 80060be:	1e03      	subs	r3, r0, #0
 80060c0:	d001      	beq.n	80060c6 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e006      	b.n	80060d4 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2288      	movs	r2, #136	; 0x88
 80060ca:	2120      	movs	r1, #32
 80060cc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80060ce:	2300      	movs	r3, #0
 80060d0:	e000      	b.n	80060d4 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80060d2:	2302      	movs	r3, #2
  }
}
 80060d4:	0018      	movs	r0, r3
 80060d6:	46bd      	mov	sp, r7
 80060d8:	b008      	add	sp, #32
 80060da:	bd80      	pop	{r7, pc}

080060dc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b08a      	sub	sp, #40	; 0x28
 80060e0:	af02      	add	r7, sp, #8
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	603b      	str	r3, [r7, #0]
 80060e8:	1dbb      	adds	r3, r7, #6
 80060ea:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	228c      	movs	r2, #140	; 0x8c
 80060f0:	589b      	ldr	r3, [r3, r2]
 80060f2:	2b20      	cmp	r3, #32
 80060f4:	d000      	beq.n	80060f8 <HAL_UART_Receive+0x1c>
 80060f6:	e0cc      	b.n	8006292 <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d003      	beq.n	8006106 <HAL_UART_Receive+0x2a>
 80060fe:	1dbb      	adds	r3, r7, #6
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e0c4      	b.n	8006294 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	689a      	ldr	r2, [r3, #8]
 800610e:	2380      	movs	r3, #128	; 0x80
 8006110:	015b      	lsls	r3, r3, #5
 8006112:	429a      	cmp	r2, r3
 8006114:	d109      	bne.n	800612a <HAL_UART_Receive+0x4e>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d105      	bne.n	800612a <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	2201      	movs	r2, #1
 8006122:	4013      	ands	r3, r2
 8006124:	d001      	beq.n	800612a <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e0b4      	b.n	8006294 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2290      	movs	r2, #144	; 0x90
 800612e:	2100      	movs	r1, #0
 8006130:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	228c      	movs	r2, #140	; 0x8c
 8006136:	2122      	movs	r1, #34	; 0x22
 8006138:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006140:	f7fd fad2 	bl	80036e8 <HAL_GetTick>
 8006144:	0003      	movs	r3, r0
 8006146:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	1dba      	adds	r2, r7, #6
 800614c:	215c      	movs	r1, #92	; 0x5c
 800614e:	8812      	ldrh	r2, [r2, #0]
 8006150:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	1dba      	adds	r2, r7, #6
 8006156:	215e      	movs	r1, #94	; 0x5e
 8006158:	8812      	ldrh	r2, [r2, #0]
 800615a:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	689a      	ldr	r2, [r3, #8]
 8006160:	2380      	movs	r3, #128	; 0x80
 8006162:	015b      	lsls	r3, r3, #5
 8006164:	429a      	cmp	r2, r3
 8006166:	d10d      	bne.n	8006184 <HAL_UART_Receive+0xa8>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d104      	bne.n	800617a <HAL_UART_Receive+0x9e>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2260      	movs	r2, #96	; 0x60
 8006174:	4949      	ldr	r1, [pc, #292]	; (800629c <HAL_UART_Receive+0x1c0>)
 8006176:	5299      	strh	r1, [r3, r2]
 8006178:	e02e      	b.n	80061d8 <HAL_UART_Receive+0xfc>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2260      	movs	r2, #96	; 0x60
 800617e:	21ff      	movs	r1, #255	; 0xff
 8006180:	5299      	strh	r1, [r3, r2]
 8006182:	e029      	b.n	80061d8 <HAL_UART_Receive+0xfc>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d10d      	bne.n	80061a8 <HAL_UART_Receive+0xcc>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d104      	bne.n	800619e <HAL_UART_Receive+0xc2>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2260      	movs	r2, #96	; 0x60
 8006198:	21ff      	movs	r1, #255	; 0xff
 800619a:	5299      	strh	r1, [r3, r2]
 800619c:	e01c      	b.n	80061d8 <HAL_UART_Receive+0xfc>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2260      	movs	r2, #96	; 0x60
 80061a2:	217f      	movs	r1, #127	; 0x7f
 80061a4:	5299      	strh	r1, [r3, r2]
 80061a6:	e017      	b.n	80061d8 <HAL_UART_Receive+0xfc>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	689a      	ldr	r2, [r3, #8]
 80061ac:	2380      	movs	r3, #128	; 0x80
 80061ae:	055b      	lsls	r3, r3, #21
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d10d      	bne.n	80061d0 <HAL_UART_Receive+0xf4>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d104      	bne.n	80061c6 <HAL_UART_Receive+0xea>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2260      	movs	r2, #96	; 0x60
 80061c0:	217f      	movs	r1, #127	; 0x7f
 80061c2:	5299      	strh	r1, [r3, r2]
 80061c4:	e008      	b.n	80061d8 <HAL_UART_Receive+0xfc>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2260      	movs	r2, #96	; 0x60
 80061ca:	213f      	movs	r1, #63	; 0x3f
 80061cc:	5299      	strh	r1, [r3, r2]
 80061ce:	e003      	b.n	80061d8 <HAL_UART_Receive+0xfc>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2260      	movs	r2, #96	; 0x60
 80061d4:	2100      	movs	r1, #0
 80061d6:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80061d8:	2312      	movs	r3, #18
 80061da:	18fb      	adds	r3, r7, r3
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	2160      	movs	r1, #96	; 0x60
 80061e0:	5a52      	ldrh	r2, [r2, r1]
 80061e2:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	689a      	ldr	r2, [r3, #8]
 80061e8:	2380      	movs	r3, #128	; 0x80
 80061ea:	015b      	lsls	r3, r3, #5
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d108      	bne.n	8006202 <HAL_UART_Receive+0x126>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d104      	bne.n	8006202 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80061f8:	2300      	movs	r3, #0
 80061fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	61bb      	str	r3, [r7, #24]
 8006200:	e003      	b.n	800620a <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006206:	2300      	movs	r3, #0
 8006208:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800620a:	e036      	b.n	800627a <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	0013      	movs	r3, r2
 8006216:	2200      	movs	r2, #0
 8006218:	2120      	movs	r1, #32
 800621a:	f000 fc01 	bl	8006a20 <UART_WaitOnFlagUntilTimeout>
 800621e:	1e03      	subs	r3, r0, #0
 8006220:	d001      	beq.n	8006226 <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 8006222:	2303      	movs	r3, #3
 8006224:	e036      	b.n	8006294 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10e      	bne.n	800624a <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	b29b      	uxth	r3, r3
 8006234:	2212      	movs	r2, #18
 8006236:	18ba      	adds	r2, r7, r2
 8006238:	8812      	ldrh	r2, [r2, #0]
 800623a:	4013      	ands	r3, r2
 800623c:	b29a      	uxth	r2, r3
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	3302      	adds	r3, #2
 8006246:	61bb      	str	r3, [r7, #24]
 8006248:	e00e      	b.n	8006268 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2212      	movs	r2, #18
 8006254:	18ba      	adds	r2, r7, r2
 8006256:	8812      	ldrh	r2, [r2, #0]
 8006258:	b2d2      	uxtb	r2, r2
 800625a:	4013      	ands	r3, r2
 800625c:	b2da      	uxtb	r2, r3
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	3301      	adds	r3, #1
 8006266:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	225e      	movs	r2, #94	; 0x5e
 800626c:	5a9b      	ldrh	r3, [r3, r2]
 800626e:	b29b      	uxth	r3, r3
 8006270:	3b01      	subs	r3, #1
 8006272:	b299      	uxth	r1, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	225e      	movs	r2, #94	; 0x5e
 8006278:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	225e      	movs	r2, #94	; 0x5e
 800627e:	5a9b      	ldrh	r3, [r3, r2]
 8006280:	b29b      	uxth	r3, r3
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1c2      	bne.n	800620c <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	228c      	movs	r2, #140	; 0x8c
 800628a:	2120      	movs	r1, #32
 800628c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800628e:	2300      	movs	r3, #0
 8006290:	e000      	b.n	8006294 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 8006292:	2302      	movs	r3, #2
  }
}
 8006294:	0018      	movs	r0, r3
 8006296:	46bd      	mov	sp, r7
 8006298:	b008      	add	sp, #32
 800629a:	bd80      	pop	{r7, pc}
 800629c:	000001ff 	.word	0x000001ff

080062a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062a0:	b5b0      	push	{r4, r5, r7, lr}
 80062a2:	b090      	sub	sp, #64	; 0x40
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062a8:	231a      	movs	r3, #26
 80062aa:	2220      	movs	r2, #32
 80062ac:	189b      	adds	r3, r3, r2
 80062ae:	19db      	adds	r3, r3, r7
 80062b0:	2200      	movs	r2, #0
 80062b2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	689a      	ldr	r2, [r3, #8]
 80062b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	431a      	orrs	r2, r3
 80062be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	431a      	orrs	r2, r3
 80062c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4aaf      	ldr	r2, [pc, #700]	; (8006590 <UART_SetConfig+0x2f0>)
 80062d4:	4013      	ands	r3, r2
 80062d6:	0019      	movs	r1, r3
 80062d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062de:	430b      	orrs	r3, r1
 80062e0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	4aaa      	ldr	r2, [pc, #680]	; (8006594 <UART_SetConfig+0x2f4>)
 80062ea:	4013      	ands	r3, r2
 80062ec:	0018      	movs	r0, r3
 80062ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f0:	68d9      	ldr	r1, [r3, #12]
 80062f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	0003      	movs	r3, r0
 80062f8:	430b      	orrs	r3, r1
 80062fa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4aa4      	ldr	r2, [pc, #656]	; (8006598 <UART_SetConfig+0x2f8>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d004      	beq.n	8006316 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006312:	4313      	orrs	r3, r2
 8006314:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	4a9f      	ldr	r2, [pc, #636]	; (800659c <UART_SetConfig+0x2fc>)
 800631e:	4013      	ands	r3, r2
 8006320:	0019      	movs	r1, r3
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006328:	430b      	orrs	r3, r1
 800632a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800632c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006332:	220f      	movs	r2, #15
 8006334:	4393      	bics	r3, r2
 8006336:	0018      	movs	r0, r3
 8006338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800633c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	0003      	movs	r3, r0
 8006342:	430b      	orrs	r3, r1
 8006344:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a95      	ldr	r2, [pc, #596]	; (80065a0 <UART_SetConfig+0x300>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d131      	bne.n	80063b4 <UART_SetConfig+0x114>
 8006350:	4b94      	ldr	r3, [pc, #592]	; (80065a4 <UART_SetConfig+0x304>)
 8006352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006354:	2203      	movs	r2, #3
 8006356:	4013      	ands	r3, r2
 8006358:	2b03      	cmp	r3, #3
 800635a:	d01d      	beq.n	8006398 <UART_SetConfig+0xf8>
 800635c:	d823      	bhi.n	80063a6 <UART_SetConfig+0x106>
 800635e:	2b02      	cmp	r3, #2
 8006360:	d00c      	beq.n	800637c <UART_SetConfig+0xdc>
 8006362:	d820      	bhi.n	80063a6 <UART_SetConfig+0x106>
 8006364:	2b00      	cmp	r3, #0
 8006366:	d002      	beq.n	800636e <UART_SetConfig+0xce>
 8006368:	2b01      	cmp	r3, #1
 800636a:	d00e      	beq.n	800638a <UART_SetConfig+0xea>
 800636c:	e01b      	b.n	80063a6 <UART_SetConfig+0x106>
 800636e:	231b      	movs	r3, #27
 8006370:	2220      	movs	r2, #32
 8006372:	189b      	adds	r3, r3, r2
 8006374:	19db      	adds	r3, r3, r7
 8006376:	2200      	movs	r2, #0
 8006378:	701a      	strb	r2, [r3, #0]
 800637a:	e0b4      	b.n	80064e6 <UART_SetConfig+0x246>
 800637c:	231b      	movs	r3, #27
 800637e:	2220      	movs	r2, #32
 8006380:	189b      	adds	r3, r3, r2
 8006382:	19db      	adds	r3, r3, r7
 8006384:	2202      	movs	r2, #2
 8006386:	701a      	strb	r2, [r3, #0]
 8006388:	e0ad      	b.n	80064e6 <UART_SetConfig+0x246>
 800638a:	231b      	movs	r3, #27
 800638c:	2220      	movs	r2, #32
 800638e:	189b      	adds	r3, r3, r2
 8006390:	19db      	adds	r3, r3, r7
 8006392:	2204      	movs	r2, #4
 8006394:	701a      	strb	r2, [r3, #0]
 8006396:	e0a6      	b.n	80064e6 <UART_SetConfig+0x246>
 8006398:	231b      	movs	r3, #27
 800639a:	2220      	movs	r2, #32
 800639c:	189b      	adds	r3, r3, r2
 800639e:	19db      	adds	r3, r3, r7
 80063a0:	2208      	movs	r2, #8
 80063a2:	701a      	strb	r2, [r3, #0]
 80063a4:	e09f      	b.n	80064e6 <UART_SetConfig+0x246>
 80063a6:	231b      	movs	r3, #27
 80063a8:	2220      	movs	r2, #32
 80063aa:	189b      	adds	r3, r3, r2
 80063ac:	19db      	adds	r3, r3, r7
 80063ae:	2210      	movs	r2, #16
 80063b0:	701a      	strb	r2, [r3, #0]
 80063b2:	e098      	b.n	80064e6 <UART_SetConfig+0x246>
 80063b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a7b      	ldr	r2, [pc, #492]	; (80065a8 <UART_SetConfig+0x308>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d131      	bne.n	8006422 <UART_SetConfig+0x182>
 80063be:	4b79      	ldr	r3, [pc, #484]	; (80065a4 <UART_SetConfig+0x304>)
 80063c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063c2:	220c      	movs	r2, #12
 80063c4:	4013      	ands	r3, r2
 80063c6:	2b0c      	cmp	r3, #12
 80063c8:	d01d      	beq.n	8006406 <UART_SetConfig+0x166>
 80063ca:	d823      	bhi.n	8006414 <UART_SetConfig+0x174>
 80063cc:	2b08      	cmp	r3, #8
 80063ce:	d00c      	beq.n	80063ea <UART_SetConfig+0x14a>
 80063d0:	d820      	bhi.n	8006414 <UART_SetConfig+0x174>
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d002      	beq.n	80063dc <UART_SetConfig+0x13c>
 80063d6:	2b04      	cmp	r3, #4
 80063d8:	d00e      	beq.n	80063f8 <UART_SetConfig+0x158>
 80063da:	e01b      	b.n	8006414 <UART_SetConfig+0x174>
 80063dc:	231b      	movs	r3, #27
 80063de:	2220      	movs	r2, #32
 80063e0:	189b      	adds	r3, r3, r2
 80063e2:	19db      	adds	r3, r3, r7
 80063e4:	2200      	movs	r2, #0
 80063e6:	701a      	strb	r2, [r3, #0]
 80063e8:	e07d      	b.n	80064e6 <UART_SetConfig+0x246>
 80063ea:	231b      	movs	r3, #27
 80063ec:	2220      	movs	r2, #32
 80063ee:	189b      	adds	r3, r3, r2
 80063f0:	19db      	adds	r3, r3, r7
 80063f2:	2202      	movs	r2, #2
 80063f4:	701a      	strb	r2, [r3, #0]
 80063f6:	e076      	b.n	80064e6 <UART_SetConfig+0x246>
 80063f8:	231b      	movs	r3, #27
 80063fa:	2220      	movs	r2, #32
 80063fc:	189b      	adds	r3, r3, r2
 80063fe:	19db      	adds	r3, r3, r7
 8006400:	2204      	movs	r2, #4
 8006402:	701a      	strb	r2, [r3, #0]
 8006404:	e06f      	b.n	80064e6 <UART_SetConfig+0x246>
 8006406:	231b      	movs	r3, #27
 8006408:	2220      	movs	r2, #32
 800640a:	189b      	adds	r3, r3, r2
 800640c:	19db      	adds	r3, r3, r7
 800640e:	2208      	movs	r2, #8
 8006410:	701a      	strb	r2, [r3, #0]
 8006412:	e068      	b.n	80064e6 <UART_SetConfig+0x246>
 8006414:	231b      	movs	r3, #27
 8006416:	2220      	movs	r2, #32
 8006418:	189b      	adds	r3, r3, r2
 800641a:	19db      	adds	r3, r3, r7
 800641c:	2210      	movs	r2, #16
 800641e:	701a      	strb	r2, [r3, #0]
 8006420:	e061      	b.n	80064e6 <UART_SetConfig+0x246>
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a61      	ldr	r2, [pc, #388]	; (80065ac <UART_SetConfig+0x30c>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d106      	bne.n	800643a <UART_SetConfig+0x19a>
 800642c:	231b      	movs	r3, #27
 800642e:	2220      	movs	r2, #32
 8006430:	189b      	adds	r3, r3, r2
 8006432:	19db      	adds	r3, r3, r7
 8006434:	2200      	movs	r2, #0
 8006436:	701a      	strb	r2, [r3, #0]
 8006438:	e055      	b.n	80064e6 <UART_SetConfig+0x246>
 800643a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a5c      	ldr	r2, [pc, #368]	; (80065b0 <UART_SetConfig+0x310>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d106      	bne.n	8006452 <UART_SetConfig+0x1b2>
 8006444:	231b      	movs	r3, #27
 8006446:	2220      	movs	r2, #32
 8006448:	189b      	adds	r3, r3, r2
 800644a:	19db      	adds	r3, r3, r7
 800644c:	2200      	movs	r2, #0
 800644e:	701a      	strb	r2, [r3, #0]
 8006450:	e049      	b.n	80064e6 <UART_SetConfig+0x246>
 8006452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a50      	ldr	r2, [pc, #320]	; (8006598 <UART_SetConfig+0x2f8>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d13e      	bne.n	80064da <UART_SetConfig+0x23a>
 800645c:	4b51      	ldr	r3, [pc, #324]	; (80065a4 <UART_SetConfig+0x304>)
 800645e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006460:	23c0      	movs	r3, #192	; 0xc0
 8006462:	011b      	lsls	r3, r3, #4
 8006464:	4013      	ands	r3, r2
 8006466:	22c0      	movs	r2, #192	; 0xc0
 8006468:	0112      	lsls	r2, r2, #4
 800646a:	4293      	cmp	r3, r2
 800646c:	d027      	beq.n	80064be <UART_SetConfig+0x21e>
 800646e:	22c0      	movs	r2, #192	; 0xc0
 8006470:	0112      	lsls	r2, r2, #4
 8006472:	4293      	cmp	r3, r2
 8006474:	d82a      	bhi.n	80064cc <UART_SetConfig+0x22c>
 8006476:	2280      	movs	r2, #128	; 0x80
 8006478:	0112      	lsls	r2, r2, #4
 800647a:	4293      	cmp	r3, r2
 800647c:	d011      	beq.n	80064a2 <UART_SetConfig+0x202>
 800647e:	2280      	movs	r2, #128	; 0x80
 8006480:	0112      	lsls	r2, r2, #4
 8006482:	4293      	cmp	r3, r2
 8006484:	d822      	bhi.n	80064cc <UART_SetConfig+0x22c>
 8006486:	2b00      	cmp	r3, #0
 8006488:	d004      	beq.n	8006494 <UART_SetConfig+0x1f4>
 800648a:	2280      	movs	r2, #128	; 0x80
 800648c:	00d2      	lsls	r2, r2, #3
 800648e:	4293      	cmp	r3, r2
 8006490:	d00e      	beq.n	80064b0 <UART_SetConfig+0x210>
 8006492:	e01b      	b.n	80064cc <UART_SetConfig+0x22c>
 8006494:	231b      	movs	r3, #27
 8006496:	2220      	movs	r2, #32
 8006498:	189b      	adds	r3, r3, r2
 800649a:	19db      	adds	r3, r3, r7
 800649c:	2200      	movs	r2, #0
 800649e:	701a      	strb	r2, [r3, #0]
 80064a0:	e021      	b.n	80064e6 <UART_SetConfig+0x246>
 80064a2:	231b      	movs	r3, #27
 80064a4:	2220      	movs	r2, #32
 80064a6:	189b      	adds	r3, r3, r2
 80064a8:	19db      	adds	r3, r3, r7
 80064aa:	2202      	movs	r2, #2
 80064ac:	701a      	strb	r2, [r3, #0]
 80064ae:	e01a      	b.n	80064e6 <UART_SetConfig+0x246>
 80064b0:	231b      	movs	r3, #27
 80064b2:	2220      	movs	r2, #32
 80064b4:	189b      	adds	r3, r3, r2
 80064b6:	19db      	adds	r3, r3, r7
 80064b8:	2204      	movs	r2, #4
 80064ba:	701a      	strb	r2, [r3, #0]
 80064bc:	e013      	b.n	80064e6 <UART_SetConfig+0x246>
 80064be:	231b      	movs	r3, #27
 80064c0:	2220      	movs	r2, #32
 80064c2:	189b      	adds	r3, r3, r2
 80064c4:	19db      	adds	r3, r3, r7
 80064c6:	2208      	movs	r2, #8
 80064c8:	701a      	strb	r2, [r3, #0]
 80064ca:	e00c      	b.n	80064e6 <UART_SetConfig+0x246>
 80064cc:	231b      	movs	r3, #27
 80064ce:	2220      	movs	r2, #32
 80064d0:	189b      	adds	r3, r3, r2
 80064d2:	19db      	adds	r3, r3, r7
 80064d4:	2210      	movs	r2, #16
 80064d6:	701a      	strb	r2, [r3, #0]
 80064d8:	e005      	b.n	80064e6 <UART_SetConfig+0x246>
 80064da:	231b      	movs	r3, #27
 80064dc:	2220      	movs	r2, #32
 80064de:	189b      	adds	r3, r3, r2
 80064e0:	19db      	adds	r3, r3, r7
 80064e2:	2210      	movs	r2, #16
 80064e4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80064e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a2b      	ldr	r2, [pc, #172]	; (8006598 <UART_SetConfig+0x2f8>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d000      	beq.n	80064f2 <UART_SetConfig+0x252>
 80064f0:	e0a9      	b.n	8006646 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80064f2:	231b      	movs	r3, #27
 80064f4:	2220      	movs	r2, #32
 80064f6:	189b      	adds	r3, r3, r2
 80064f8:	19db      	adds	r3, r3, r7
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	2b08      	cmp	r3, #8
 80064fe:	d015      	beq.n	800652c <UART_SetConfig+0x28c>
 8006500:	dc18      	bgt.n	8006534 <UART_SetConfig+0x294>
 8006502:	2b04      	cmp	r3, #4
 8006504:	d00d      	beq.n	8006522 <UART_SetConfig+0x282>
 8006506:	dc15      	bgt.n	8006534 <UART_SetConfig+0x294>
 8006508:	2b00      	cmp	r3, #0
 800650a:	d002      	beq.n	8006512 <UART_SetConfig+0x272>
 800650c:	2b02      	cmp	r3, #2
 800650e:	d005      	beq.n	800651c <UART_SetConfig+0x27c>
 8006510:	e010      	b.n	8006534 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006512:	f7fe faa1 	bl	8004a58 <HAL_RCC_GetPCLK1Freq>
 8006516:	0003      	movs	r3, r0
 8006518:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800651a:	e014      	b.n	8006546 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800651c:	4b25      	ldr	r3, [pc, #148]	; (80065b4 <UART_SetConfig+0x314>)
 800651e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006520:	e011      	b.n	8006546 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006522:	f7fe fa0d 	bl	8004940 <HAL_RCC_GetSysClockFreq>
 8006526:	0003      	movs	r3, r0
 8006528:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800652a:	e00c      	b.n	8006546 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800652c:	2380      	movs	r3, #128	; 0x80
 800652e:	021b      	lsls	r3, r3, #8
 8006530:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006532:	e008      	b.n	8006546 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8006534:	2300      	movs	r3, #0
 8006536:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006538:	231a      	movs	r3, #26
 800653a:	2220      	movs	r2, #32
 800653c:	189b      	adds	r3, r3, r2
 800653e:	19db      	adds	r3, r3, r7
 8006540:	2201      	movs	r2, #1
 8006542:	701a      	strb	r2, [r3, #0]
        break;
 8006544:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006548:	2b00      	cmp	r3, #0
 800654a:	d100      	bne.n	800654e <UART_SetConfig+0x2ae>
 800654c:	e14b      	b.n	80067e6 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006552:	4b19      	ldr	r3, [pc, #100]	; (80065b8 <UART_SetConfig+0x318>)
 8006554:	0052      	lsls	r2, r2, #1
 8006556:	5ad3      	ldrh	r3, [r2, r3]
 8006558:	0019      	movs	r1, r3
 800655a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800655c:	f7f9 fdee 	bl	800013c <__udivsi3>
 8006560:	0003      	movs	r3, r0
 8006562:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	0013      	movs	r3, r2
 800656a:	005b      	lsls	r3, r3, #1
 800656c:	189b      	adds	r3, r3, r2
 800656e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006570:	429a      	cmp	r2, r3
 8006572:	d305      	bcc.n	8006580 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800657a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800657c:	429a      	cmp	r2, r3
 800657e:	d91d      	bls.n	80065bc <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8006580:	231a      	movs	r3, #26
 8006582:	2220      	movs	r2, #32
 8006584:	189b      	adds	r3, r3, r2
 8006586:	19db      	adds	r3, r3, r7
 8006588:	2201      	movs	r2, #1
 800658a:	701a      	strb	r2, [r3, #0]
 800658c:	e12b      	b.n	80067e6 <UART_SetConfig+0x546>
 800658e:	46c0      	nop			; (mov r8, r8)
 8006590:	cfff69f3 	.word	0xcfff69f3
 8006594:	ffffcfff 	.word	0xffffcfff
 8006598:	40008000 	.word	0x40008000
 800659c:	11fff4ff 	.word	0x11fff4ff
 80065a0:	40013800 	.word	0x40013800
 80065a4:	40021000 	.word	0x40021000
 80065a8:	40004400 	.word	0x40004400
 80065ac:	40004800 	.word	0x40004800
 80065b0:	40004c00 	.word	0x40004c00
 80065b4:	00f42400 	.word	0x00f42400
 80065b8:	0801305c 	.word	0x0801305c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065be:	61bb      	str	r3, [r7, #24]
 80065c0:	2300      	movs	r3, #0
 80065c2:	61fb      	str	r3, [r7, #28]
 80065c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065c8:	4b92      	ldr	r3, [pc, #584]	; (8006814 <UART_SetConfig+0x574>)
 80065ca:	0052      	lsls	r2, r2, #1
 80065cc:	5ad3      	ldrh	r3, [r2, r3]
 80065ce:	613b      	str	r3, [r7, #16]
 80065d0:	2300      	movs	r3, #0
 80065d2:	617b      	str	r3, [r7, #20]
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	69b8      	ldr	r0, [r7, #24]
 80065da:	69f9      	ldr	r1, [r7, #28]
 80065dc:	f7f9 ff62 	bl	80004a4 <__aeabi_uldivmod>
 80065e0:	0002      	movs	r2, r0
 80065e2:	000b      	movs	r3, r1
 80065e4:	0e11      	lsrs	r1, r2, #24
 80065e6:	021d      	lsls	r5, r3, #8
 80065e8:	430d      	orrs	r5, r1
 80065ea:	0214      	lsls	r4, r2, #8
 80065ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	085b      	lsrs	r3, r3, #1
 80065f2:	60bb      	str	r3, [r7, #8]
 80065f4:	2300      	movs	r3, #0
 80065f6:	60fb      	str	r3, [r7, #12]
 80065f8:	68b8      	ldr	r0, [r7, #8]
 80065fa:	68f9      	ldr	r1, [r7, #12]
 80065fc:	1900      	adds	r0, r0, r4
 80065fe:	4169      	adcs	r1, r5
 8006600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	603b      	str	r3, [r7, #0]
 8006606:	2300      	movs	r3, #0
 8006608:	607b      	str	r3, [r7, #4]
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f7f9 ff49 	bl	80004a4 <__aeabi_uldivmod>
 8006612:	0002      	movs	r2, r0
 8006614:	000b      	movs	r3, r1
 8006616:	0013      	movs	r3, r2
 8006618:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800661a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800661c:	23c0      	movs	r3, #192	; 0xc0
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	429a      	cmp	r2, r3
 8006622:	d309      	bcc.n	8006638 <UART_SetConfig+0x398>
 8006624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006626:	2380      	movs	r3, #128	; 0x80
 8006628:	035b      	lsls	r3, r3, #13
 800662a:	429a      	cmp	r2, r3
 800662c:	d204      	bcs.n	8006638 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006634:	60da      	str	r2, [r3, #12]
 8006636:	e0d6      	b.n	80067e6 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8006638:	231a      	movs	r3, #26
 800663a:	2220      	movs	r2, #32
 800663c:	189b      	adds	r3, r3, r2
 800663e:	19db      	adds	r3, r3, r7
 8006640:	2201      	movs	r2, #1
 8006642:	701a      	strb	r2, [r3, #0]
 8006644:	e0cf      	b.n	80067e6 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006648:	69da      	ldr	r2, [r3, #28]
 800664a:	2380      	movs	r3, #128	; 0x80
 800664c:	021b      	lsls	r3, r3, #8
 800664e:	429a      	cmp	r2, r3
 8006650:	d000      	beq.n	8006654 <UART_SetConfig+0x3b4>
 8006652:	e070      	b.n	8006736 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8006654:	231b      	movs	r3, #27
 8006656:	2220      	movs	r2, #32
 8006658:	189b      	adds	r3, r3, r2
 800665a:	19db      	adds	r3, r3, r7
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	2b08      	cmp	r3, #8
 8006660:	d015      	beq.n	800668e <UART_SetConfig+0x3ee>
 8006662:	dc18      	bgt.n	8006696 <UART_SetConfig+0x3f6>
 8006664:	2b04      	cmp	r3, #4
 8006666:	d00d      	beq.n	8006684 <UART_SetConfig+0x3e4>
 8006668:	dc15      	bgt.n	8006696 <UART_SetConfig+0x3f6>
 800666a:	2b00      	cmp	r3, #0
 800666c:	d002      	beq.n	8006674 <UART_SetConfig+0x3d4>
 800666e:	2b02      	cmp	r3, #2
 8006670:	d005      	beq.n	800667e <UART_SetConfig+0x3de>
 8006672:	e010      	b.n	8006696 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006674:	f7fe f9f0 	bl	8004a58 <HAL_RCC_GetPCLK1Freq>
 8006678:	0003      	movs	r3, r0
 800667a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800667c:	e014      	b.n	80066a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800667e:	4b66      	ldr	r3, [pc, #408]	; (8006818 <UART_SetConfig+0x578>)
 8006680:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006682:	e011      	b.n	80066a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006684:	f7fe f95c 	bl	8004940 <HAL_RCC_GetSysClockFreq>
 8006688:	0003      	movs	r3, r0
 800668a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800668c:	e00c      	b.n	80066a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800668e:	2380      	movs	r3, #128	; 0x80
 8006690:	021b      	lsls	r3, r3, #8
 8006692:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006694:	e008      	b.n	80066a8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006696:	2300      	movs	r3, #0
 8006698:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800669a:	231a      	movs	r3, #26
 800669c:	2220      	movs	r2, #32
 800669e:	189b      	adds	r3, r3, r2
 80066a0:	19db      	adds	r3, r3, r7
 80066a2:	2201      	movs	r2, #1
 80066a4:	701a      	strb	r2, [r3, #0]
        break;
 80066a6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d100      	bne.n	80066b0 <UART_SetConfig+0x410>
 80066ae:	e09a      	b.n	80067e6 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066b4:	4b57      	ldr	r3, [pc, #348]	; (8006814 <UART_SetConfig+0x574>)
 80066b6:	0052      	lsls	r2, r2, #1
 80066b8:	5ad3      	ldrh	r3, [r2, r3]
 80066ba:	0019      	movs	r1, r3
 80066bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80066be:	f7f9 fd3d 	bl	800013c <__udivsi3>
 80066c2:	0003      	movs	r3, r0
 80066c4:	005a      	lsls	r2, r3, #1
 80066c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	085b      	lsrs	r3, r3, #1
 80066cc:	18d2      	adds	r2, r2, r3
 80066ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	0019      	movs	r1, r3
 80066d4:	0010      	movs	r0, r2
 80066d6:	f7f9 fd31 	bl	800013c <__udivsi3>
 80066da:	0003      	movs	r3, r0
 80066dc:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e0:	2b0f      	cmp	r3, #15
 80066e2:	d921      	bls.n	8006728 <UART_SetConfig+0x488>
 80066e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066e6:	2380      	movs	r3, #128	; 0x80
 80066e8:	025b      	lsls	r3, r3, #9
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d21c      	bcs.n	8006728 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	200e      	movs	r0, #14
 80066f4:	2420      	movs	r4, #32
 80066f6:	1903      	adds	r3, r0, r4
 80066f8:	19db      	adds	r3, r3, r7
 80066fa:	210f      	movs	r1, #15
 80066fc:	438a      	bics	r2, r1
 80066fe:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006702:	085b      	lsrs	r3, r3, #1
 8006704:	b29b      	uxth	r3, r3
 8006706:	2207      	movs	r2, #7
 8006708:	4013      	ands	r3, r2
 800670a:	b299      	uxth	r1, r3
 800670c:	1903      	adds	r3, r0, r4
 800670e:	19db      	adds	r3, r3, r7
 8006710:	1902      	adds	r2, r0, r4
 8006712:	19d2      	adds	r2, r2, r7
 8006714:	8812      	ldrh	r2, [r2, #0]
 8006716:	430a      	orrs	r2, r1
 8006718:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800671a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	1902      	adds	r2, r0, r4
 8006720:	19d2      	adds	r2, r2, r7
 8006722:	8812      	ldrh	r2, [r2, #0]
 8006724:	60da      	str	r2, [r3, #12]
 8006726:	e05e      	b.n	80067e6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8006728:	231a      	movs	r3, #26
 800672a:	2220      	movs	r2, #32
 800672c:	189b      	adds	r3, r3, r2
 800672e:	19db      	adds	r3, r3, r7
 8006730:	2201      	movs	r2, #1
 8006732:	701a      	strb	r2, [r3, #0]
 8006734:	e057      	b.n	80067e6 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006736:	231b      	movs	r3, #27
 8006738:	2220      	movs	r2, #32
 800673a:	189b      	adds	r3, r3, r2
 800673c:	19db      	adds	r3, r3, r7
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	2b08      	cmp	r3, #8
 8006742:	d015      	beq.n	8006770 <UART_SetConfig+0x4d0>
 8006744:	dc18      	bgt.n	8006778 <UART_SetConfig+0x4d8>
 8006746:	2b04      	cmp	r3, #4
 8006748:	d00d      	beq.n	8006766 <UART_SetConfig+0x4c6>
 800674a:	dc15      	bgt.n	8006778 <UART_SetConfig+0x4d8>
 800674c:	2b00      	cmp	r3, #0
 800674e:	d002      	beq.n	8006756 <UART_SetConfig+0x4b6>
 8006750:	2b02      	cmp	r3, #2
 8006752:	d005      	beq.n	8006760 <UART_SetConfig+0x4c0>
 8006754:	e010      	b.n	8006778 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006756:	f7fe f97f 	bl	8004a58 <HAL_RCC_GetPCLK1Freq>
 800675a:	0003      	movs	r3, r0
 800675c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800675e:	e014      	b.n	800678a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006760:	4b2d      	ldr	r3, [pc, #180]	; (8006818 <UART_SetConfig+0x578>)
 8006762:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006764:	e011      	b.n	800678a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006766:	f7fe f8eb 	bl	8004940 <HAL_RCC_GetSysClockFreq>
 800676a:	0003      	movs	r3, r0
 800676c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800676e:	e00c      	b.n	800678a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006770:	2380      	movs	r3, #128	; 0x80
 8006772:	021b      	lsls	r3, r3, #8
 8006774:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006776:	e008      	b.n	800678a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8006778:	2300      	movs	r3, #0
 800677a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800677c:	231a      	movs	r3, #26
 800677e:	2220      	movs	r2, #32
 8006780:	189b      	adds	r3, r3, r2
 8006782:	19db      	adds	r3, r3, r7
 8006784:	2201      	movs	r2, #1
 8006786:	701a      	strb	r2, [r3, #0]
        break;
 8006788:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800678a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800678c:	2b00      	cmp	r3, #0
 800678e:	d02a      	beq.n	80067e6 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006794:	4b1f      	ldr	r3, [pc, #124]	; (8006814 <UART_SetConfig+0x574>)
 8006796:	0052      	lsls	r2, r2, #1
 8006798:	5ad3      	ldrh	r3, [r2, r3]
 800679a:	0019      	movs	r1, r3
 800679c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800679e:	f7f9 fccd 	bl	800013c <__udivsi3>
 80067a2:	0003      	movs	r3, r0
 80067a4:	001a      	movs	r2, r3
 80067a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	085b      	lsrs	r3, r3, #1
 80067ac:	18d2      	adds	r2, r2, r3
 80067ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	0019      	movs	r1, r3
 80067b4:	0010      	movs	r0, r2
 80067b6:	f7f9 fcc1 	bl	800013c <__udivsi3>
 80067ba:	0003      	movs	r3, r0
 80067bc:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c0:	2b0f      	cmp	r3, #15
 80067c2:	d90a      	bls.n	80067da <UART_SetConfig+0x53a>
 80067c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067c6:	2380      	movs	r3, #128	; 0x80
 80067c8:	025b      	lsls	r3, r3, #9
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d205      	bcs.n	80067da <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	60da      	str	r2, [r3, #12]
 80067d8:	e005      	b.n	80067e6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80067da:	231a      	movs	r3, #26
 80067dc:	2220      	movs	r2, #32
 80067de:	189b      	adds	r3, r3, r2
 80067e0:	19db      	adds	r3, r3, r7
 80067e2:	2201      	movs	r2, #1
 80067e4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80067e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e8:	226a      	movs	r2, #106	; 0x6a
 80067ea:	2101      	movs	r1, #1
 80067ec:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f0:	2268      	movs	r2, #104	; 0x68
 80067f2:	2101      	movs	r1, #1
 80067f4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f8:	2200      	movs	r2, #0
 80067fa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fe:	2200      	movs	r2, #0
 8006800:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006802:	231a      	movs	r3, #26
 8006804:	2220      	movs	r2, #32
 8006806:	189b      	adds	r3, r3, r2
 8006808:	19db      	adds	r3, r3, r7
 800680a:	781b      	ldrb	r3, [r3, #0]
}
 800680c:	0018      	movs	r0, r3
 800680e:	46bd      	mov	sp, r7
 8006810:	b010      	add	sp, #64	; 0x40
 8006812:	bdb0      	pop	{r4, r5, r7, pc}
 8006814:	0801305c 	.word	0x0801305c
 8006818:	00f42400 	.word	0x00f42400

0800681c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006828:	2201      	movs	r2, #1
 800682a:	4013      	ands	r3, r2
 800682c:	d00b      	beq.n	8006846 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	4a4a      	ldr	r2, [pc, #296]	; (8006960 <UART_AdvFeatureConfig+0x144>)
 8006836:	4013      	ands	r3, r2
 8006838:	0019      	movs	r1, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800684a:	2202      	movs	r2, #2
 800684c:	4013      	ands	r3, r2
 800684e:	d00b      	beq.n	8006868 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	4a43      	ldr	r2, [pc, #268]	; (8006964 <UART_AdvFeatureConfig+0x148>)
 8006858:	4013      	ands	r3, r2
 800685a:	0019      	movs	r1, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	430a      	orrs	r2, r1
 8006866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686c:	2204      	movs	r2, #4
 800686e:	4013      	ands	r3, r2
 8006870:	d00b      	beq.n	800688a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	4a3b      	ldr	r2, [pc, #236]	; (8006968 <UART_AdvFeatureConfig+0x14c>)
 800687a:	4013      	ands	r3, r2
 800687c:	0019      	movs	r1, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	430a      	orrs	r2, r1
 8006888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688e:	2208      	movs	r2, #8
 8006890:	4013      	ands	r3, r2
 8006892:	d00b      	beq.n	80068ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	4a34      	ldr	r2, [pc, #208]	; (800696c <UART_AdvFeatureConfig+0x150>)
 800689c:	4013      	ands	r3, r2
 800689e:	0019      	movs	r1, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	430a      	orrs	r2, r1
 80068aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b0:	2210      	movs	r2, #16
 80068b2:	4013      	ands	r3, r2
 80068b4:	d00b      	beq.n	80068ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	4a2c      	ldr	r2, [pc, #176]	; (8006970 <UART_AdvFeatureConfig+0x154>)
 80068be:	4013      	ands	r3, r2
 80068c0:	0019      	movs	r1, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d2:	2220      	movs	r2, #32
 80068d4:	4013      	ands	r3, r2
 80068d6:	d00b      	beq.n	80068f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	4a25      	ldr	r2, [pc, #148]	; (8006974 <UART_AdvFeatureConfig+0x158>)
 80068e0:	4013      	ands	r3, r2
 80068e2:	0019      	movs	r1, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	430a      	orrs	r2, r1
 80068ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f4:	2240      	movs	r2, #64	; 0x40
 80068f6:	4013      	ands	r3, r2
 80068f8:	d01d      	beq.n	8006936 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	4a1d      	ldr	r2, [pc, #116]	; (8006978 <UART_AdvFeatureConfig+0x15c>)
 8006902:	4013      	ands	r3, r2
 8006904:	0019      	movs	r1, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	430a      	orrs	r2, r1
 8006910:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006916:	2380      	movs	r3, #128	; 0x80
 8006918:	035b      	lsls	r3, r3, #13
 800691a:	429a      	cmp	r2, r3
 800691c:	d10b      	bne.n	8006936 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	4a15      	ldr	r2, [pc, #84]	; (800697c <UART_AdvFeatureConfig+0x160>)
 8006926:	4013      	ands	r3, r2
 8006928:	0019      	movs	r1, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693a:	2280      	movs	r2, #128	; 0x80
 800693c:	4013      	ands	r3, r2
 800693e:	d00b      	beq.n	8006958 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	4a0e      	ldr	r2, [pc, #56]	; (8006980 <UART_AdvFeatureConfig+0x164>)
 8006948:	4013      	ands	r3, r2
 800694a:	0019      	movs	r1, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	430a      	orrs	r2, r1
 8006956:	605a      	str	r2, [r3, #4]
  }
}
 8006958:	46c0      	nop			; (mov r8, r8)
 800695a:	46bd      	mov	sp, r7
 800695c:	b002      	add	sp, #8
 800695e:	bd80      	pop	{r7, pc}
 8006960:	fffdffff 	.word	0xfffdffff
 8006964:	fffeffff 	.word	0xfffeffff
 8006968:	fffbffff 	.word	0xfffbffff
 800696c:	ffff7fff 	.word	0xffff7fff
 8006970:	ffffefff 	.word	0xffffefff
 8006974:	ffffdfff 	.word	0xffffdfff
 8006978:	ffefffff 	.word	0xffefffff
 800697c:	ff9fffff 	.word	0xff9fffff
 8006980:	fff7ffff 	.word	0xfff7ffff

08006984 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af02      	add	r7, sp, #8
 800698a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2290      	movs	r2, #144	; 0x90
 8006990:	2100      	movs	r1, #0
 8006992:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006994:	f7fc fea8 	bl	80036e8 <HAL_GetTick>
 8006998:	0003      	movs	r3, r0
 800699a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2208      	movs	r2, #8
 80069a4:	4013      	ands	r3, r2
 80069a6:	2b08      	cmp	r3, #8
 80069a8:	d10c      	bne.n	80069c4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2280      	movs	r2, #128	; 0x80
 80069ae:	0391      	lsls	r1, r2, #14
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	4a1a      	ldr	r2, [pc, #104]	; (8006a1c <UART_CheckIdleState+0x98>)
 80069b4:	9200      	str	r2, [sp, #0]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f000 f832 	bl	8006a20 <UART_WaitOnFlagUntilTimeout>
 80069bc:	1e03      	subs	r3, r0, #0
 80069be:	d001      	beq.n	80069c4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e026      	b.n	8006a12 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2204      	movs	r2, #4
 80069cc:	4013      	ands	r3, r2
 80069ce:	2b04      	cmp	r3, #4
 80069d0:	d10c      	bne.n	80069ec <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2280      	movs	r2, #128	; 0x80
 80069d6:	03d1      	lsls	r1, r2, #15
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	4a10      	ldr	r2, [pc, #64]	; (8006a1c <UART_CheckIdleState+0x98>)
 80069dc:	9200      	str	r2, [sp, #0]
 80069de:	2200      	movs	r2, #0
 80069e0:	f000 f81e 	bl	8006a20 <UART_WaitOnFlagUntilTimeout>
 80069e4:	1e03      	subs	r3, r0, #0
 80069e6:	d001      	beq.n	80069ec <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e012      	b.n	8006a12 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2288      	movs	r2, #136	; 0x88
 80069f0:	2120      	movs	r1, #32
 80069f2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	228c      	movs	r2, #140	; 0x8c
 80069f8:	2120      	movs	r1, #32
 80069fa:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2284      	movs	r2, #132	; 0x84
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	0018      	movs	r0, r3
 8006a14:	46bd      	mov	sp, r7
 8006a16:	b004      	add	sp, #16
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	46c0      	nop			; (mov r8, r8)
 8006a1c:	01ffffff 	.word	0x01ffffff

08006a20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b094      	sub	sp, #80	; 0x50
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	603b      	str	r3, [r7, #0]
 8006a2c:	1dfb      	adds	r3, r7, #7
 8006a2e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a30:	e0a7      	b.n	8006b82 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a34:	3301      	adds	r3, #1
 8006a36:	d100      	bne.n	8006a3a <UART_WaitOnFlagUntilTimeout+0x1a>
 8006a38:	e0a3      	b.n	8006b82 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a3a:	f7fc fe55 	bl	80036e8 <HAL_GetTick>
 8006a3e:	0002      	movs	r2, r0
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d302      	bcc.n	8006a50 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d13f      	bne.n	8006ad0 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a50:	f3ef 8310 	mrs	r3, PRIMASK
 8006a54:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006a58:	647b      	str	r3, [r7, #68]	; 0x44
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a60:	f383 8810 	msr	PRIMASK, r3
}
 8006a64:	46c0      	nop			; (mov r8, r8)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	494e      	ldr	r1, [pc, #312]	; (8006bac <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006a72:	400a      	ands	r2, r1
 8006a74:	601a      	str	r2, [r3, #0]
 8006a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a78:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7c:	f383 8810 	msr	PRIMASK, r3
}
 8006a80:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a82:	f3ef 8310 	mrs	r3, PRIMASK
 8006a86:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a8a:	643b      	str	r3, [r7, #64]	; 0x40
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a92:	f383 8810 	msr	PRIMASK, r3
}
 8006a96:	46c0      	nop			; (mov r8, r8)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	689a      	ldr	r2, [r3, #8]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2101      	movs	r1, #1
 8006aa4:	438a      	bics	r2, r1
 8006aa6:	609a      	str	r2, [r3, #8]
 8006aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aae:	f383 8810 	msr	PRIMASK, r3
}
 8006ab2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2288      	movs	r2, #136	; 0x88
 8006ab8:	2120      	movs	r1, #32
 8006aba:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	228c      	movs	r2, #140	; 0x8c
 8006ac0:	2120      	movs	r1, #32
 8006ac2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2284      	movs	r2, #132	; 0x84
 8006ac8:	2100      	movs	r1, #0
 8006aca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e069      	b.n	8006ba4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2204      	movs	r2, #4
 8006ad8:	4013      	ands	r3, r2
 8006ada:	d052      	beq.n	8006b82 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	69da      	ldr	r2, [r3, #28]
 8006ae2:	2380      	movs	r3, #128	; 0x80
 8006ae4:	011b      	lsls	r3, r3, #4
 8006ae6:	401a      	ands	r2, r3
 8006ae8:	2380      	movs	r3, #128	; 0x80
 8006aea:	011b      	lsls	r3, r3, #4
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d148      	bne.n	8006b82 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2280      	movs	r2, #128	; 0x80
 8006af6:	0112      	lsls	r2, r2, #4
 8006af8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006afa:	f3ef 8310 	mrs	r3, PRIMASK
 8006afe:	613b      	str	r3, [r7, #16]
  return(result);
 8006b00:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b04:	2301      	movs	r3, #1
 8006b06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f383 8810 	msr	PRIMASK, r3
}
 8006b0e:	46c0      	nop			; (mov r8, r8)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4924      	ldr	r1, [pc, #144]	; (8006bac <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006b1c:	400a      	ands	r2, r1
 8006b1e:	601a      	str	r2, [r3, #0]
 8006b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b22:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	f383 8810 	msr	PRIMASK, r3
}
 8006b2a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b2c:	f3ef 8310 	mrs	r3, PRIMASK
 8006b30:	61fb      	str	r3, [r7, #28]
  return(result);
 8006b32:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b34:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b36:	2301      	movs	r3, #1
 8006b38:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b3a:	6a3b      	ldr	r3, [r7, #32]
 8006b3c:	f383 8810 	msr	PRIMASK, r3
}
 8006b40:	46c0      	nop			; (mov r8, r8)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	689a      	ldr	r2, [r3, #8]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2101      	movs	r1, #1
 8006b4e:	438a      	bics	r2, r1
 8006b50:	609a      	str	r2, [r3, #8]
 8006b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b54:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b58:	f383 8810 	msr	PRIMASK, r3
}
 8006b5c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2288      	movs	r2, #136	; 0x88
 8006b62:	2120      	movs	r1, #32
 8006b64:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	228c      	movs	r2, #140	; 0x8c
 8006b6a:	2120      	movs	r1, #32
 8006b6c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2290      	movs	r2, #144	; 0x90
 8006b72:	2120      	movs	r1, #32
 8006b74:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2284      	movs	r2, #132	; 0x84
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e010      	b.n	8006ba4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	69db      	ldr	r3, [r3, #28]
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	425a      	negs	r2, r3
 8006b92:	4153      	adcs	r3, r2
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	001a      	movs	r2, r3
 8006b98:	1dfb      	adds	r3, r7, #7
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d100      	bne.n	8006ba2 <UART_WaitOnFlagUntilTimeout+0x182>
 8006ba0:	e747      	b.n	8006a32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	0018      	movs	r0, r3
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	b014      	add	sp, #80	; 0x50
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	fffffe5f 	.word	0xfffffe5f

08006bb0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2284      	movs	r2, #132	; 0x84
 8006bbc:	5c9b      	ldrb	r3, [r3, r2]
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d101      	bne.n	8006bc6 <HAL_UARTEx_DisableFifoMode+0x16>
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	e027      	b.n	8006c16 <HAL_UARTEx_DisableFifoMode+0x66>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2284      	movs	r2, #132	; 0x84
 8006bca:	2101      	movs	r1, #1
 8006bcc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2288      	movs	r2, #136	; 0x88
 8006bd2:	2124      	movs	r1, #36	; 0x24
 8006bd4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2101      	movs	r1, #1
 8006bea:	438a      	bics	r2, r1
 8006bec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	4a0b      	ldr	r2, [pc, #44]	; (8006c20 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2288      	movs	r2, #136	; 0x88
 8006c08:	2120      	movs	r1, #32
 8006c0a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2284      	movs	r2, #132	; 0x84
 8006c10:	2100      	movs	r1, #0
 8006c12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	0018      	movs	r0, r3
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	b004      	add	sp, #16
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	46c0      	nop			; (mov r8, r8)
 8006c20:	dfffffff 	.word	0xdfffffff

08006c24 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2284      	movs	r2, #132	; 0x84
 8006c32:	5c9b      	ldrb	r3, [r3, r2]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d101      	bne.n	8006c3c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c38:	2302      	movs	r3, #2
 8006c3a:	e02e      	b.n	8006c9a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2284      	movs	r2, #132	; 0x84
 8006c40:	2101      	movs	r1, #1
 8006c42:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2288      	movs	r2, #136	; 0x88
 8006c48:	2124      	movs	r1, #36	; 0x24
 8006c4a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2101      	movs	r1, #1
 8006c60:	438a      	bics	r2, r1
 8006c62:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	00db      	lsls	r3, r3, #3
 8006c6c:	08d9      	lsrs	r1, r3, #3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	683a      	ldr	r2, [r7, #0]
 8006c74:	430a      	orrs	r2, r1
 8006c76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	0018      	movs	r0, r3
 8006c7c:	f000 f854 	bl	8006d28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2288      	movs	r2, #136	; 0x88
 8006c8c:	2120      	movs	r1, #32
 8006c8e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2284      	movs	r2, #132	; 0x84
 8006c94:	2100      	movs	r1, #0
 8006c96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	0018      	movs	r0, r3
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	b004      	add	sp, #16
 8006ca0:	bd80      	pop	{r7, pc}
	...

08006ca4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2284      	movs	r2, #132	; 0x84
 8006cb2:	5c9b      	ldrb	r3, [r3, r2]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d101      	bne.n	8006cbc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006cb8:	2302      	movs	r3, #2
 8006cba:	e02f      	b.n	8006d1c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2284      	movs	r2, #132	; 0x84
 8006cc0:	2101      	movs	r1, #1
 8006cc2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2288      	movs	r2, #136	; 0x88
 8006cc8:	2124      	movs	r1, #36	; 0x24
 8006cca:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2101      	movs	r1, #1
 8006ce0:	438a      	bics	r2, r1
 8006ce2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	4a0e      	ldr	r2, [pc, #56]	; (8006d24 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006cec:	4013      	ands	r3, r2
 8006cee:	0019      	movs	r1, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	683a      	ldr	r2, [r7, #0]
 8006cf6:	430a      	orrs	r2, r1
 8006cf8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	0018      	movs	r0, r3
 8006cfe:	f000 f813 	bl	8006d28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2288      	movs	r2, #136	; 0x88
 8006d0e:	2120      	movs	r1, #32
 8006d10:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2284      	movs	r2, #132	; 0x84
 8006d16:	2100      	movs	r1, #0
 8006d18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	0018      	movs	r0, r3
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	b004      	add	sp, #16
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	f1ffffff 	.word	0xf1ffffff

08006d28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d108      	bne.n	8006d4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	226a      	movs	r2, #106	; 0x6a
 8006d3c:	2101      	movs	r1, #1
 8006d3e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2268      	movs	r2, #104	; 0x68
 8006d44:	2101      	movs	r1, #1
 8006d46:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d48:	e043      	b.n	8006dd2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d4a:	260f      	movs	r6, #15
 8006d4c:	19bb      	adds	r3, r7, r6
 8006d4e:	2208      	movs	r2, #8
 8006d50:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d52:	200e      	movs	r0, #14
 8006d54:	183b      	adds	r3, r7, r0
 8006d56:	2208      	movs	r2, #8
 8006d58:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	0e5b      	lsrs	r3, r3, #25
 8006d62:	b2da      	uxtb	r2, r3
 8006d64:	240d      	movs	r4, #13
 8006d66:	193b      	adds	r3, r7, r4
 8006d68:	2107      	movs	r1, #7
 8006d6a:	400a      	ands	r2, r1
 8006d6c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	0f5b      	lsrs	r3, r3, #29
 8006d76:	b2da      	uxtb	r2, r3
 8006d78:	250c      	movs	r5, #12
 8006d7a:	197b      	adds	r3, r7, r5
 8006d7c:	2107      	movs	r1, #7
 8006d7e:	400a      	ands	r2, r1
 8006d80:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d82:	183b      	adds	r3, r7, r0
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	197a      	adds	r2, r7, r5
 8006d88:	7812      	ldrb	r2, [r2, #0]
 8006d8a:	4914      	ldr	r1, [pc, #80]	; (8006ddc <UARTEx_SetNbDataToProcess+0xb4>)
 8006d8c:	5c8a      	ldrb	r2, [r1, r2]
 8006d8e:	435a      	muls	r2, r3
 8006d90:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d92:	197b      	adds	r3, r7, r5
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	4a12      	ldr	r2, [pc, #72]	; (8006de0 <UARTEx_SetNbDataToProcess+0xb8>)
 8006d98:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d9a:	0019      	movs	r1, r3
 8006d9c:	f7f9 fa58 	bl	8000250 <__divsi3>
 8006da0:	0003      	movs	r3, r0
 8006da2:	b299      	uxth	r1, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	226a      	movs	r2, #106	; 0x6a
 8006da8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006daa:	19bb      	adds	r3, r7, r6
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	193a      	adds	r2, r7, r4
 8006db0:	7812      	ldrb	r2, [r2, #0]
 8006db2:	490a      	ldr	r1, [pc, #40]	; (8006ddc <UARTEx_SetNbDataToProcess+0xb4>)
 8006db4:	5c8a      	ldrb	r2, [r1, r2]
 8006db6:	435a      	muls	r2, r3
 8006db8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006dba:	193b      	adds	r3, r7, r4
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	4a08      	ldr	r2, [pc, #32]	; (8006de0 <UARTEx_SetNbDataToProcess+0xb8>)
 8006dc0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006dc2:	0019      	movs	r1, r3
 8006dc4:	f7f9 fa44 	bl	8000250 <__divsi3>
 8006dc8:	0003      	movs	r3, r0
 8006dca:	b299      	uxth	r1, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2268      	movs	r2, #104	; 0x68
 8006dd0:	5299      	strh	r1, [r3, r2]
}
 8006dd2:	46c0      	nop			; (mov r8, r8)
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	b005      	add	sp, #20
 8006dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dda:	46c0      	nop			; (mov r8, r8)
 8006ddc:	08013074 	.word	0x08013074
 8006de0:	0801307c 	.word	0x0801307c

08006de4 <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8006de4:	b5b0      	push	{r4, r5, r7, lr}
 8006de6:	b0e4      	sub	sp, #400	; 0x190
 8006de8:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8006dea:	24c8      	movs	r4, #200	; 0xc8
 8006dec:	193b      	adds	r3, r7, r4
 8006dee:	0018      	movs	r0, r3
 8006df0:	23c6      	movs	r3, #198	; 0xc6
 8006df2:	001a      	movs	r2, r3
 8006df4:	2100      	movs	r1, #0
 8006df6:	f003 fedb 	bl	800abb0 <memset>
    astronode_app_msg_t answer = {0};
 8006dfa:	4b13      	ldr	r3, [pc, #76]	; (8006e48 <astronode_send_cfg_sr+0x64>)
 8006dfc:	25c8      	movs	r5, #200	; 0xc8
 8006dfe:	006d      	lsls	r5, r5, #1
 8006e00:	195b      	adds	r3, r3, r5
 8006e02:	19db      	adds	r3, r3, r7
 8006e04:	0018      	movs	r0, r3
 8006e06:	23c6      	movs	r3, #198	; 0xc6
 8006e08:	001a      	movs	r2, r3
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	f003 fed0 	bl	800abb0 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 8006e10:	193b      	adds	r3, r7, r4
 8006e12:	2210      	movs	r2, #16
 8006e14:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 8006e16:	003a      	movs	r2, r7
 8006e18:	193b      	adds	r3, r7, r4
 8006e1a:	0011      	movs	r1, r2
 8006e1c:	0018      	movs	r0, r3
 8006e1e:	f001 faa9 	bl	8008374 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 8006e22:	4b09      	ldr	r3, [pc, #36]	; (8006e48 <astronode_send_cfg_sr+0x64>)
 8006e24:	195b      	adds	r3, r3, r5
 8006e26:	19db      	adds	r3, r3, r7
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	2b90      	cmp	r3, #144	; 0x90
 8006e2c:	d104      	bne.n	8006e38 <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 8006e2e:	4b07      	ldr	r3, [pc, #28]	; (8006e4c <astronode_send_cfg_sr+0x68>)
 8006e30:	0018      	movs	r0, r3
 8006e32:	f7fb ff69 	bl	8002d08 <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8006e36:	e003      	b.n	8006e40 <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8006e38:	4b05      	ldr	r3, [pc, #20]	; (8006e50 <astronode_send_cfg_sr+0x6c>)
 8006e3a:	0018      	movs	r0, r3
 8006e3c:	f7fb ff64 	bl	8002d08 <send_debug_logs>
}
 8006e40:	46c0      	nop			; (mov r8, r8)
 8006e42:	46bd      	mov	sp, r7
 8006e44:	b064      	add	sp, #400	; 0x190
 8006e46:	bdb0      	pop	{r4, r5, r7, pc}
 8006e48:	fffffe70 	.word	0xfffffe70
 8006e4c:	08011be8 	.word	0x08011be8
 8006e50:	08011c1c 	.word	0x08011c1c

08006e54 <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 8006e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e56:	b0e7      	sub	sp, #412	; 0x19c
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	0005      	movs	r5, r0
 8006e5c:	000c      	movs	r4, r1
 8006e5e:	0010      	movs	r0, r2
 8006e60:	0019      	movs	r1, r3
 8006e62:	4b4b      	ldr	r3, [pc, #300]	; (8006f90 <astronode_send_cfg_wr+0x13c>)
 8006e64:	26cc      	movs	r6, #204	; 0xcc
 8006e66:	0076      	lsls	r6, r6, #1
 8006e68:	199b      	adds	r3, r3, r6
 8006e6a:	19db      	adds	r3, r3, r7
 8006e6c:	1c2a      	adds	r2, r5, #0
 8006e6e:	701a      	strb	r2, [r3, #0]
 8006e70:	4b48      	ldr	r3, [pc, #288]	; (8006f94 <astronode_send_cfg_wr+0x140>)
 8006e72:	0035      	movs	r5, r6
 8006e74:	195b      	adds	r3, r3, r5
 8006e76:	19db      	adds	r3, r3, r7
 8006e78:	1c22      	adds	r2, r4, #0
 8006e7a:	701a      	strb	r2, [r3, #0]
 8006e7c:	4b46      	ldr	r3, [pc, #280]	; (8006f98 <astronode_send_cfg_wr+0x144>)
 8006e7e:	002c      	movs	r4, r5
 8006e80:	191b      	adds	r3, r3, r4
 8006e82:	19db      	adds	r3, r3, r7
 8006e84:	1c02      	adds	r2, r0, #0
 8006e86:	701a      	strb	r2, [r3, #0]
 8006e88:	4b44      	ldr	r3, [pc, #272]	; (8006f9c <astronode_send_cfg_wr+0x148>)
 8006e8a:	191b      	adds	r3, r3, r4
 8006e8c:	19db      	adds	r3, r3, r7
 8006e8e:	1c0a      	adds	r2, r1, #0
 8006e90:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8006e92:	25d0      	movs	r5, #208	; 0xd0
 8006e94:	197b      	adds	r3, r7, r5
 8006e96:	0018      	movs	r0, r3
 8006e98:	23c6      	movs	r3, #198	; 0xc6
 8006e9a:	001a      	movs	r2, r3
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	f003 fe87 	bl	800abb0 <memset>
    astronode_app_msg_t answer = {0};
 8006ea2:	4b3f      	ldr	r3, [pc, #252]	; (8006fa0 <astronode_send_cfg_wr+0x14c>)
 8006ea4:	191b      	adds	r3, r3, r4
 8006ea6:	19db      	adds	r3, r3, r7
 8006ea8:	0018      	movs	r0, r3
 8006eaa:	23c6      	movs	r3, #198	; 0xc6
 8006eac:	001a      	movs	r2, r3
 8006eae:	2100      	movs	r1, #0
 8006eb0:	f003 fe7e 	bl	800abb0 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8006eb4:	0029      	movs	r1, r5
 8006eb6:	187b      	adds	r3, r7, r1
 8006eb8:	2205      	movs	r2, #5
 8006eba:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8006ebc:	4b34      	ldr	r3, [pc, #208]	; (8006f90 <astronode_send_cfg_wr+0x13c>)
 8006ebe:	191b      	adds	r3, r3, r4
 8006ec0:	19db      	adds	r3, r3, r7
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	569a      	ldrsb	r2, [r3, r2]
 8006ec6:	4b33      	ldr	r3, [pc, #204]	; (8006f94 <astronode_send_cfg_wr+0x140>)
 8006ec8:	191b      	adds	r3, r3, r4
 8006eca:	19db      	adds	r3, r3, r7
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	005b      	lsls	r3, r3, #1
 8006ed0:	b25b      	sxtb	r3, r3
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 8006ed6:	4b30      	ldr	r3, [pc, #192]	; (8006f98 <astronode_send_cfg_wr+0x144>)
 8006ed8:	191b      	adds	r3, r3, r4
 8006eda:	19db      	adds	r3, r3, r7
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	b25b      	sxtb	r3, r3
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 8006ee6:	4b2d      	ldr	r3, [pc, #180]	; (8006f9c <astronode_send_cfg_wr+0x148>)
 8006ee8:	191b      	adds	r3, r3, r4
 8006eea:	19db      	adds	r3, r3, r7
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	b25b      	sxtb	r3, r3
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	b25b      	sxtb	r3, r3
 8006ef6:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8006ef8:	187b      	adds	r3, r7, r1
 8006efa:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8006efc:	23d4      	movs	r3, #212	; 0xd4
 8006efe:	005b      	lsls	r3, r3, #1
 8006f00:	2508      	movs	r5, #8
 8006f02:	195b      	adds	r3, r3, r5
 8006f04:	19db      	adds	r3, r3, r7
 8006f06:	2200      	movs	r2, #0
 8006f08:	569a      	ldrsb	r2, [r3, r2]
 8006f0a:	23d6      	movs	r3, #214	; 0xd6
 8006f0c:	005b      	lsls	r3, r3, #1
 8006f0e:	195b      	adds	r3, r3, r5
 8006f10:	19db      	adds	r3, r3, r7
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	005b      	lsls	r3, r3, #1
 8006f16:	b25b      	sxtb	r3, r3
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 8006f1c:	23d8      	movs	r3, #216	; 0xd8
 8006f1e:	005b      	lsls	r3, r3, #1
 8006f20:	195b      	adds	r3, r3, r5
 8006f22:	19db      	adds	r3, r3, r7
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	b25b      	sxtb	r3, r3
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 8006f2e:	23da      	movs	r3, #218	; 0xda
 8006f30:	005b      	lsls	r3, r3, #1
 8006f32:	195b      	adds	r3, r3, r5
 8006f34:	19db      	adds	r3, r3, r7
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	00db      	lsls	r3, r3, #3
 8006f3a:	b25b      	sxtb	r3, r3
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	b25b      	sxtb	r3, r3
 8006f40:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 8006f42:	187b      	adds	r3, r7, r1
 8006f44:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 8006f46:	0008      	movs	r0, r1
 8006f48:	187b      	adds	r3, r7, r1
 8006f4a:	22c4      	movs	r2, #196	; 0xc4
 8006f4c:	2103      	movs	r1, #3
 8006f4e:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8006f50:	002b      	movs	r3, r5
 8006f52:	18fa      	adds	r2, r7, r3
 8006f54:	183b      	adds	r3, r7, r0
 8006f56:	0011      	movs	r1, r2
 8006f58:	0018      	movs	r0, r3
 8006f5a:	f001 fa0b 	bl	8008374 <astronode_transport_send_receive>
 8006f5e:	0003      	movs	r3, r0
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d10f      	bne.n	8006f84 <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 8006f64:	4b0e      	ldr	r3, [pc, #56]	; (8006fa0 <astronode_send_cfg_wr+0x14c>)
 8006f66:	191b      	adds	r3, r3, r4
 8006f68:	19db      	adds	r3, r3, r7
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	2b85      	cmp	r3, #133	; 0x85
 8006f6e:	d105      	bne.n	8006f7c <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 8006f70:	4b0c      	ldr	r3, [pc, #48]	; (8006fa4 <astronode_send_cfg_wr+0x150>)
 8006f72:	0018      	movs	r0, r3
 8006f74:	f7fb fec8 	bl	8002d08 <send_debug_logs>
            return true ;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e004      	b.n	8006f86 <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 8006f7c:	4b0a      	ldr	r3, [pc, #40]	; (8006fa8 <astronode_send_cfg_wr+0x154>)
 8006f7e:	0018      	movs	r0, r3
 8006f80:	f7fb fec2 	bl	8002d08 <send_debug_logs>
        }
    }
    return false ;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	0018      	movs	r0, r3
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	b067      	add	sp, #412	; 0x19c
 8006f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f8e:	46c0      	nop			; (mov r8, r8)
 8006f90:	fffffe6f 	.word	0xfffffe6f
 8006f94:	fffffe6e 	.word	0xfffffe6e
 8006f98:	fffffe6d 	.word	0xfffffe6d
 8006f9c:	fffffe6c 	.word	0xfffffe6c
 8006fa0:	fffffe70 	.word	0xfffffe70
 8006fa4:	08011c50 	.word	0x08011c50
 8006fa8:	08011c7c 	.word	0x08011c7c

08006fac <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 8006fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fae:	b0ed      	sub	sp, #436	; 0x1b4
 8006fb0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8006fb2:	21c8      	movs	r1, #200	; 0xc8
 8006fb4:	2318      	movs	r3, #24
 8006fb6:	18cb      	adds	r3, r1, r3
 8006fb8:	19db      	adds	r3, r3, r7
 8006fba:	0018      	movs	r0, r3
 8006fbc:	23c6      	movs	r3, #198	; 0xc6
 8006fbe:	001a      	movs	r2, r3
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	f003 fdf5 	bl	800abb0 <memset>
    astronode_app_msg_t answer = {0};
 8006fc6:	4b4a      	ldr	r3, [pc, #296]	; (80070f0 <astronode_send_mgi_rr+0x144>)
 8006fc8:	26cc      	movs	r6, #204	; 0xcc
 8006fca:	0076      	lsls	r6, r6, #1
 8006fcc:	199b      	adds	r3, r3, r6
 8006fce:	2218      	movs	r2, #24
 8006fd0:	4694      	mov	ip, r2
 8006fd2:	44bc      	add	ip, r7
 8006fd4:	4463      	add	r3, ip
 8006fd6:	0018      	movs	r0, r3
 8006fd8:	23c6      	movs	r3, #198	; 0xc6
 8006fda:	001a      	movs	r2, r3
 8006fdc:	2100      	movs	r1, #0
 8006fde:	f003 fde7 	bl	800abb0 <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 8006fe2:	21c8      	movs	r1, #200	; 0xc8
 8006fe4:	2318      	movs	r3, #24
 8006fe6:	18cb      	adds	r3, r1, r3
 8006fe8:	19db      	adds	r3, r3, r7
 8006fea:	2219      	movs	r2, #25
 8006fec:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8006fee:	2318      	movs	r3, #24
 8006ff0:	18fa      	adds	r2, r7, r3
 8006ff2:	2318      	movs	r3, #24
 8006ff4:	18cb      	adds	r3, r1, r3
 8006ff6:	19db      	adds	r3, r3, r7
 8006ff8:	0011      	movs	r1, r2
 8006ffa:	0018      	movs	r0, r3
 8006ffc:	f001 f9ba 	bl	8008374 <astronode_transport_send_receive>
 8007000:	0003      	movs	r3, r0
 8007002:	2b01      	cmp	r3, #1
 8007004:	d16f      	bne.n	80070e6 <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 8007006:	4b3a      	ldr	r3, [pc, #232]	; (80070f0 <astronode_send_mgi_rr+0x144>)
 8007008:	0032      	movs	r2, r6
 800700a:	189b      	adds	r3, r3, r2
 800700c:	2118      	movs	r1, #24
 800700e:	468c      	mov	ip, r1
 8007010:	44bc      	add	ip, r7
 8007012:	4463      	add	r3, ip
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	2b99      	cmp	r3, #153	; 0x99
 8007018:	d161      	bne.n	80070de <astronode_send_mgi_rr+0x132>
        {
 800701a:	466b      	mov	r3, sp
 800701c:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 800701e:	4b34      	ldr	r3, [pc, #208]	; (80070f0 <astronode_send_mgi_rr+0x144>)
 8007020:	189b      	adds	r3, r3, r2
 8007022:	2218      	movs	r2, #24
 8007024:	4694      	mov	ip, r2
 8007026:	44bc      	add	ip, r7
 8007028:	4463      	add	r3, ip
 800702a:	22c4      	movs	r2, #196	; 0xc4
 800702c:	5a9b      	ldrh	r3, [r3, r2]
 800702e:	001a      	movs	r2, r3
 8007030:	3a01      	subs	r2, #1
 8007032:	21ca      	movs	r1, #202	; 0xca
 8007034:	0049      	lsls	r1, r1, #1
 8007036:	2018      	movs	r0, #24
 8007038:	1809      	adds	r1, r1, r0
 800703a:	19c9      	adds	r1, r1, r7
 800703c:	600a      	str	r2, [r1, #0]
 800703e:	001c      	movs	r4, r3
 8007040:	2200      	movs	r2, #0
 8007042:	0015      	movs	r5, r2
 8007044:	0020      	movs	r0, r4
 8007046:	0029      	movs	r1, r5
 8007048:	0004      	movs	r4, r0
 800704a:	0f62      	lsrs	r2, r4, #29
 800704c:	000c      	movs	r4, r1
 800704e:	00e4      	lsls	r4, r4, #3
 8007050:	617c      	str	r4, [r7, #20]
 8007052:	697c      	ldr	r4, [r7, #20]
 8007054:	4314      	orrs	r4, r2
 8007056:	617c      	str	r4, [r7, #20]
 8007058:	0001      	movs	r1, r0
 800705a:	00c9      	lsls	r1, r1, #3
 800705c:	6139      	str	r1, [r7, #16]
 800705e:	603b      	str	r3, [r7, #0]
 8007060:	2200      	movs	r2, #0
 8007062:	607a      	str	r2, [r7, #4]
 8007064:	6838      	ldr	r0, [r7, #0]
 8007066:	6879      	ldr	r1, [r7, #4]
 8007068:	0004      	movs	r4, r0
 800706a:	0f62      	lsrs	r2, r4, #29
 800706c:	000c      	movs	r4, r1
 800706e:	00e4      	lsls	r4, r4, #3
 8007070:	60fc      	str	r4, [r7, #12]
 8007072:	68fc      	ldr	r4, [r7, #12]
 8007074:	4314      	orrs	r4, r2
 8007076:	60fc      	str	r4, [r7, #12]
 8007078:	0001      	movs	r1, r0
 800707a:	00ca      	lsls	r2, r1, #3
 800707c:	60ba      	str	r2, [r7, #8]
 800707e:	3307      	adds	r3, #7
 8007080:	08db      	lsrs	r3, r3, #3
 8007082:	00db      	lsls	r3, r3, #3
 8007084:	4669      	mov	r1, sp
 8007086:	1acb      	subs	r3, r1, r3
 8007088:	469d      	mov	sp, r3
 800708a:	466b      	mov	r3, sp
 800708c:	3300      	adds	r3, #0
 800708e:	24c8      	movs	r4, #200	; 0xc8
 8007090:	0064      	lsls	r4, r4, #1
 8007092:	2218      	movs	r2, #24
 8007094:	18a2      	adds	r2, r4, r2
 8007096:	19d1      	adds	r1, r2, r7
 8007098:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 800709a:	4b16      	ldr	r3, [pc, #88]	; (80070f4 <astronode_send_mgi_rr+0x148>)
 800709c:	0018      	movs	r0, r3
 800709e:	f7fb fe33 	bl	8002d08 <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 80070a2:	4b13      	ldr	r3, [pc, #76]	; (80070f0 <astronode_send_mgi_rr+0x144>)
 80070a4:	22cc      	movs	r2, #204	; 0xcc
 80070a6:	0052      	lsls	r2, r2, #1
 80070a8:	189b      	adds	r3, r3, r2
 80070aa:	2218      	movs	r2, #24
 80070ac:	4694      	mov	ip, r2
 80070ae:	44bc      	add	ip, r7
 80070b0:	4463      	add	r3, ip
 80070b2:	22c4      	movs	r2, #196	; 0xc4
 80070b4:	5a9b      	ldrh	r3, [r3, r2]
 80070b6:	0019      	movs	r1, r3
 80070b8:	2318      	movs	r3, #24
 80070ba:	18fb      	adds	r3, r7, r3
 80070bc:	3301      	adds	r3, #1
 80070be:	4a0e      	ldr	r2, [pc, #56]	; (80070f8 <astronode_send_mgi_rr+0x14c>)
 80070c0:	2018      	movs	r0, #24
 80070c2:	1820      	adds	r0, r4, r0
 80070c4:	19c0      	adds	r0, r0, r7
 80070c6:	6800      	ldr	r0, [r0, #0]
 80070c8:	f003 fca8 	bl	800aa1c <snprintf>
            send_debug_logs(guid);
 80070cc:	2318      	movs	r3, #24
 80070ce:	18e3      	adds	r3, r4, r3
 80070d0:	19db      	adds	r3, r3, r7
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	0018      	movs	r0, r3
 80070d6:	f7fb fe17 	bl	8002d08 <send_debug_logs>
 80070da:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 80070dc:	e003      	b.n	80070e6 <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 80070de:	4b07      	ldr	r3, [pc, #28]	; (80070fc <astronode_send_mgi_rr+0x150>)
 80070e0:	0018      	movs	r0, r3
 80070e2:	f7fb fe11 	bl	8002d08 <send_debug_logs>
}
 80070e6:	46c0      	nop			; (mov r8, r8)
 80070e8:	46bd      	mov	sp, r7
 80070ea:	b06d      	add	sp, #436	; 0x1b4
 80070ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070ee:	46c0      	nop			; (mov r8, r8)
 80070f0:	fffffe68 	.word	0xfffffe68
 80070f4:	08011d08 	.word	0x08011d08
 80070f8:	08011d18 	.word	0x08011d18
 80070fc:	08011d1c 	.word	0x08011d1c

08007100 <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 8007100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007102:	b0ed      	sub	sp, #436	; 0x1b4
 8007104:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007106:	21c8      	movs	r1, #200	; 0xc8
 8007108:	2318      	movs	r3, #24
 800710a:	18cb      	adds	r3, r1, r3
 800710c:	19db      	adds	r3, r3, r7
 800710e:	0018      	movs	r0, r3
 8007110:	23c6      	movs	r3, #198	; 0xc6
 8007112:	001a      	movs	r2, r3
 8007114:	2100      	movs	r1, #0
 8007116:	f003 fd4b 	bl	800abb0 <memset>
    astronode_app_msg_t answer = {0};
 800711a:	4b4a      	ldr	r3, [pc, #296]	; (8007244 <astronode_send_msn_rr+0x144>)
 800711c:	26cc      	movs	r6, #204	; 0xcc
 800711e:	0076      	lsls	r6, r6, #1
 8007120:	199b      	adds	r3, r3, r6
 8007122:	2218      	movs	r2, #24
 8007124:	4694      	mov	ip, r2
 8007126:	44bc      	add	ip, r7
 8007128:	4463      	add	r3, ip
 800712a:	0018      	movs	r0, r3
 800712c:	23c6      	movs	r3, #198	; 0xc6
 800712e:	001a      	movs	r2, r3
 8007130:	2100      	movs	r1, #0
 8007132:	f003 fd3d 	bl	800abb0 <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 8007136:	21c8      	movs	r1, #200	; 0xc8
 8007138:	2318      	movs	r3, #24
 800713a:	18cb      	adds	r3, r1, r3
 800713c:	19db      	adds	r3, r3, r7
 800713e:	221a      	movs	r2, #26
 8007140:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007142:	2318      	movs	r3, #24
 8007144:	18fa      	adds	r2, r7, r3
 8007146:	2318      	movs	r3, #24
 8007148:	18cb      	adds	r3, r1, r3
 800714a:	19db      	adds	r3, r3, r7
 800714c:	0011      	movs	r1, r2
 800714e:	0018      	movs	r0, r3
 8007150:	f001 f910 	bl	8008374 <astronode_transport_send_receive>
 8007154:	0003      	movs	r3, r0
 8007156:	2b01      	cmp	r3, #1
 8007158:	d16f      	bne.n	800723a <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 800715a:	4b3a      	ldr	r3, [pc, #232]	; (8007244 <astronode_send_msn_rr+0x144>)
 800715c:	0032      	movs	r2, r6
 800715e:	189b      	adds	r3, r3, r2
 8007160:	2118      	movs	r1, #24
 8007162:	468c      	mov	ip, r1
 8007164:	44bc      	add	ip, r7
 8007166:	4463      	add	r3, ip
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	2b9a      	cmp	r3, #154	; 0x9a
 800716c:	d161      	bne.n	8007232 <astronode_send_msn_rr+0x132>
        {
 800716e:	466b      	mov	r3, sp
 8007170:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 8007172:	4b34      	ldr	r3, [pc, #208]	; (8007244 <astronode_send_msn_rr+0x144>)
 8007174:	189b      	adds	r3, r3, r2
 8007176:	2218      	movs	r2, #24
 8007178:	4694      	mov	ip, r2
 800717a:	44bc      	add	ip, r7
 800717c:	4463      	add	r3, ip
 800717e:	22c4      	movs	r2, #196	; 0xc4
 8007180:	5a9b      	ldrh	r3, [r3, r2]
 8007182:	001a      	movs	r2, r3
 8007184:	3a01      	subs	r2, #1
 8007186:	21ca      	movs	r1, #202	; 0xca
 8007188:	0049      	lsls	r1, r1, #1
 800718a:	2018      	movs	r0, #24
 800718c:	1809      	adds	r1, r1, r0
 800718e:	19c9      	adds	r1, r1, r7
 8007190:	600a      	str	r2, [r1, #0]
 8007192:	001c      	movs	r4, r3
 8007194:	2200      	movs	r2, #0
 8007196:	0015      	movs	r5, r2
 8007198:	0020      	movs	r0, r4
 800719a:	0029      	movs	r1, r5
 800719c:	0004      	movs	r4, r0
 800719e:	0f62      	lsrs	r2, r4, #29
 80071a0:	000c      	movs	r4, r1
 80071a2:	00e4      	lsls	r4, r4, #3
 80071a4:	617c      	str	r4, [r7, #20]
 80071a6:	697c      	ldr	r4, [r7, #20]
 80071a8:	4314      	orrs	r4, r2
 80071aa:	617c      	str	r4, [r7, #20]
 80071ac:	0001      	movs	r1, r0
 80071ae:	00c9      	lsls	r1, r1, #3
 80071b0:	6139      	str	r1, [r7, #16]
 80071b2:	603b      	str	r3, [r7, #0]
 80071b4:	2200      	movs	r2, #0
 80071b6:	607a      	str	r2, [r7, #4]
 80071b8:	6838      	ldr	r0, [r7, #0]
 80071ba:	6879      	ldr	r1, [r7, #4]
 80071bc:	0004      	movs	r4, r0
 80071be:	0f62      	lsrs	r2, r4, #29
 80071c0:	000c      	movs	r4, r1
 80071c2:	00e4      	lsls	r4, r4, #3
 80071c4:	60fc      	str	r4, [r7, #12]
 80071c6:	68fc      	ldr	r4, [r7, #12]
 80071c8:	4314      	orrs	r4, r2
 80071ca:	60fc      	str	r4, [r7, #12]
 80071cc:	0001      	movs	r1, r0
 80071ce:	00ca      	lsls	r2, r1, #3
 80071d0:	60ba      	str	r2, [r7, #8]
 80071d2:	3307      	adds	r3, #7
 80071d4:	08db      	lsrs	r3, r3, #3
 80071d6:	00db      	lsls	r3, r3, #3
 80071d8:	4669      	mov	r1, sp
 80071da:	1acb      	subs	r3, r1, r3
 80071dc:	469d      	mov	sp, r3
 80071de:	466b      	mov	r3, sp
 80071e0:	3300      	adds	r3, #0
 80071e2:	24c8      	movs	r4, #200	; 0xc8
 80071e4:	0064      	lsls	r4, r4, #1
 80071e6:	2218      	movs	r2, #24
 80071e8:	18a2      	adds	r2, r4, r2
 80071ea:	19d1      	adds	r1, r2, r7
 80071ec:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 80071ee:	4b16      	ldr	r3, [pc, #88]	; (8007248 <astronode_send_msn_rr+0x148>)
 80071f0:	0018      	movs	r0, r3
 80071f2:	f7fb fd89 	bl	8002d08 <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 80071f6:	4b13      	ldr	r3, [pc, #76]	; (8007244 <astronode_send_msn_rr+0x144>)
 80071f8:	22cc      	movs	r2, #204	; 0xcc
 80071fa:	0052      	lsls	r2, r2, #1
 80071fc:	189b      	adds	r3, r3, r2
 80071fe:	2218      	movs	r2, #24
 8007200:	4694      	mov	ip, r2
 8007202:	44bc      	add	ip, r7
 8007204:	4463      	add	r3, ip
 8007206:	22c4      	movs	r2, #196	; 0xc4
 8007208:	5a9b      	ldrh	r3, [r3, r2]
 800720a:	0019      	movs	r1, r3
 800720c:	2318      	movs	r3, #24
 800720e:	18fb      	adds	r3, r7, r3
 8007210:	3301      	adds	r3, #1
 8007212:	4a0e      	ldr	r2, [pc, #56]	; (800724c <astronode_send_msn_rr+0x14c>)
 8007214:	2018      	movs	r0, #24
 8007216:	1820      	adds	r0, r4, r0
 8007218:	19c0      	adds	r0, r0, r7
 800721a:	6800      	ldr	r0, [r0, #0]
 800721c:	f003 fbfe 	bl	800aa1c <snprintf>
            send_debug_logs(serial_number);
 8007220:	2318      	movs	r3, #24
 8007222:	18e3      	adds	r3, r4, r3
 8007224:	19db      	adds	r3, r3, r7
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	0018      	movs	r0, r3
 800722a:	f7fb fd6d 	bl	8002d08 <send_debug_logs>
 800722e:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8007230:	e003      	b.n	800723a <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8007232:	4b07      	ldr	r3, [pc, #28]	; (8007250 <astronode_send_msn_rr+0x150>)
 8007234:	0018      	movs	r0, r3
 8007236:	f7fb fd67 	bl	8002d08 <send_debug_logs>
}
 800723a:	46c0      	nop			; (mov r8, r8)
 800723c:	46bd      	mov	sp, r7
 800723e:	b06d      	add	sp, #436	; 0x1b4
 8007240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007242:	46c0      	nop			; (mov r8, r8)
 8007244:	fffffe68 	.word	0xfffffe68
 8007248:	08011d38 	.word	0x08011d38
 800724c:	08011d18 	.word	0x08011d18
 8007250:	08011d54 	.word	0x08011d54

08007254 <astronode_send_nco_rr>:

void astronode_send_nco_rr(void)
{
 8007254:	b5b0      	push	{r4, r5, r7, lr}
 8007256:	b0fa      	sub	sp, #488	; 0x1e8
 8007258:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800725a:	258e      	movs	r5, #142	; 0x8e
 800725c:	006d      	lsls	r5, r5, #1
 800725e:	197b      	adds	r3, r7, r5
 8007260:	0018      	movs	r0, r3
 8007262:	23c6      	movs	r3, #198	; 0xc6
 8007264:	001a      	movs	r2, r3
 8007266:	2100      	movs	r1, #0
 8007268:	f003 fca2 	bl	800abb0 <memset>
    astronode_app_msg_t answer = {0};
 800726c:	4b26      	ldr	r3, [pc, #152]	; (8007308 <astronode_send_nco_rr+0xb4>)
 800726e:	24f4      	movs	r4, #244	; 0xf4
 8007270:	0064      	lsls	r4, r4, #1
 8007272:	191b      	adds	r3, r3, r4
 8007274:	19db      	adds	r3, r3, r7
 8007276:	0018      	movs	r0, r3
 8007278:	23c6      	movs	r3, #198	; 0xc6
 800727a:	001a      	movs	r2, r3
 800727c:	2100      	movs	r1, #0
 800727e:	f003 fc97 	bl	800abb0 <memset>

    request.op_code = ASTRONODE_OP_CODE_NCO_RR;
 8007282:	197b      	adds	r3, r7, r5
 8007284:	2218      	movs	r2, #24
 8007286:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007288:	2354      	movs	r3, #84	; 0x54
 800728a:	18fa      	adds	r2, r7, r3
 800728c:	197b      	adds	r3, r7, r5
 800728e:	0011      	movs	r1, r2
 8007290:	0018      	movs	r0, r3
 8007292:	f001 f86f 	bl	8008374 <astronode_transport_send_receive>
 8007296:	0003      	movs	r3, r0
 8007298:	2b01      	cmp	r3, #1
 800729a:	d131      	bne.n	8007300 <astronode_send_nco_rr+0xac>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_NCO_RA)
 800729c:	4b1a      	ldr	r3, [pc, #104]	; (8007308 <astronode_send_nco_rr+0xb4>)
 800729e:	0021      	movs	r1, r4
 80072a0:	185b      	adds	r3, r3, r1
 80072a2:	19db      	adds	r3, r3, r7
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	2b98      	cmp	r3, #152	; 0x98
 80072a8:	d126      	bne.n	80072f8 <astronode_send_nco_rr+0xa4>
        {
            uint32_t time_to_next_pass = answer.p_payload[0]
 80072aa:	4b17      	ldr	r3, [pc, #92]	; (8007308 <astronode_send_nco_rr+0xb4>)
 80072ac:	185b      	adds	r3, r3, r1
 80072ae:	19db      	adds	r3, r3, r7
 80072b0:	785b      	ldrb	r3, [r3, #1]
 80072b2:	001a      	movs	r2, r3
                                        + (answer.p_payload[1] << 8)
 80072b4:	4b14      	ldr	r3, [pc, #80]	; (8007308 <astronode_send_nco_rr+0xb4>)
 80072b6:	185b      	adds	r3, r3, r1
 80072b8:	19db      	adds	r3, r3, r7
 80072ba:	789b      	ldrb	r3, [r3, #2]
 80072bc:	021b      	lsls	r3, r3, #8
 80072be:	18d2      	adds	r2, r2, r3
                                        + (answer.p_payload[2] << 16)
 80072c0:	4b11      	ldr	r3, [pc, #68]	; (8007308 <astronode_send_nco_rr+0xb4>)
 80072c2:	185b      	adds	r3, r3, r1
 80072c4:	19db      	adds	r3, r3, r7
 80072c6:	78db      	ldrb	r3, [r3, #3]
 80072c8:	041b      	lsls	r3, r3, #16
 80072ca:	18d2      	adds	r2, r2, r3
                                        + (answer.p_payload[3] << 24);
 80072cc:	4b0e      	ldr	r3, [pc, #56]	; (8007308 <astronode_send_nco_rr+0xb4>)
 80072ce:	185b      	adds	r3, r3, r1
 80072d0:	19db      	adds	r3, r3, r7
 80072d2:	791b      	ldrb	r3, [r3, #4]
 80072d4:	061b      	lsls	r3, r3, #24
 80072d6:	18d3      	adds	r3, r2, r3
            uint32_t time_to_next_pass = answer.p_payload[0]
 80072d8:	22f2      	movs	r2, #242	; 0xf2
 80072da:	0052      	lsls	r2, r2, #1
 80072dc:	18b9      	adds	r1, r7, r2
 80072de:	600b      	str	r3, [r1, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Next opportunity for communication with the Astrocast Network: %lds.", time_to_next_pass);
 80072e0:	18bb      	adds	r3, r7, r2
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	4909      	ldr	r1, [pc, #36]	; (800730c <astronode_send_nco_rr+0xb8>)
 80072e6:	1d3b      	adds	r3, r7, #4
 80072e8:	0018      	movs	r0, r3
 80072ea:	f003 fbcb 	bl	800aa84 <sprintf>
            send_debug_logs(str);
 80072ee:	1d3b      	adds	r3, r7, #4
 80072f0:	0018      	movs	r0, r3
 80072f2:	f7fb fd09 	bl	8002d08 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to read satellite constellation ephemeris data.");
        }
    }
}
 80072f6:	e003      	b.n	8007300 <astronode_send_nco_rr+0xac>
            send_debug_logs("Failed to read satellite constellation ephemeris data.");
 80072f8:	4b05      	ldr	r3, [pc, #20]	; (8007310 <astronode_send_nco_rr+0xbc>)
 80072fa:	0018      	movs	r0, r3
 80072fc:	f7fb fd04 	bl	8002d08 <send_debug_logs>
}
 8007300:	46c0      	nop			; (mov r8, r8)
 8007302:	46bd      	mov	sp, r7
 8007304:	b07a      	add	sp, #488	; 0x1e8
 8007306:	bdb0      	pop	{r4, r5, r7, pc}
 8007308:	fffffe6c 	.word	0xfffffe6c
 800730c:	08011d7c 	.word	0x08011d7c
 8007310:	08011dc4 	.word	0x08011dc4

08007314 <astronode_send_evt_rr>:

void astronode_send_evt_rr(void)
{
 8007314:	b5b0      	push	{r4, r5, r7, lr}
 8007316:	b0e4      	sub	sp, #400	; 0x190
 8007318:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800731a:	24c8      	movs	r4, #200	; 0xc8
 800731c:	193b      	adds	r3, r7, r4
 800731e:	0018      	movs	r0, r3
 8007320:	23c6      	movs	r3, #198	; 0xc6
 8007322:	001a      	movs	r2, r3
 8007324:	2100      	movs	r1, #0
 8007326:	f003 fc43 	bl	800abb0 <memset>
    astronode_app_msg_t answer = {0};
 800732a:	4b31      	ldr	r3, [pc, #196]	; (80073f0 <astronode_send_evt_rr+0xdc>)
 800732c:	25c8      	movs	r5, #200	; 0xc8
 800732e:	006d      	lsls	r5, r5, #1
 8007330:	195b      	adds	r3, r3, r5
 8007332:	19db      	adds	r3, r3, r7
 8007334:	0018      	movs	r0, r3
 8007336:	23c6      	movs	r3, #198	; 0xc6
 8007338:	001a      	movs	r2, r3
 800733a:	2100      	movs	r1, #0
 800733c:	f003 fc38 	bl	800abb0 <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 8007340:	193b      	adds	r3, r7, r4
 8007342:	2265      	movs	r2, #101	; 0x65
 8007344:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007346:	003a      	movs	r2, r7
 8007348:	193b      	adds	r3, r7, r4
 800734a:	0011      	movs	r1, r2
 800734c:	0018      	movs	r0, r3
 800734e:	f001 f811 	bl	8008374 <astronode_transport_send_receive>
 8007352:	0003      	movs	r3, r0
 8007354:	2b01      	cmp	r3, #1
 8007356:	d147      	bne.n	80073e8 <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 8007358:	4b25      	ldr	r3, [pc, #148]	; (80073f0 <astronode_send_evt_rr+0xdc>)
 800735a:	195b      	adds	r3, r3, r5
 800735c:	19db      	adds	r3, r3, r7
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	2be5      	cmp	r3, #229	; 0xe5
 8007362:	d141      	bne.n	80073e8 <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 8007364:	4b22      	ldr	r3, [pc, #136]	; (80073f0 <astronode_send_evt_rr+0xdc>)
 8007366:	195b      	adds	r3, r3, r5
 8007368:	19db      	adds	r3, r3, r7
 800736a:	785b      	ldrb	r3, [r3, #1]
 800736c:	001a      	movs	r2, r3
 800736e:	2301      	movs	r3, #1
 8007370:	4013      	ands	r3, r2
 8007372:	d006      	beq.n	8007382 <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 8007374:	4b1f      	ldr	r3, [pc, #124]	; (80073f4 <astronode_send_evt_rr+0xe0>)
 8007376:	2201      	movs	r2, #1
 8007378:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 800737a:	4b1f      	ldr	r3, [pc, #124]	; (80073f8 <astronode_send_evt_rr+0xe4>)
 800737c:	0018      	movs	r0, r3
 800737e:	f7fb fcc3 	bl	8002d08 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 8007382:	4b1b      	ldr	r3, [pc, #108]	; (80073f0 <astronode_send_evt_rr+0xdc>)
 8007384:	22c8      	movs	r2, #200	; 0xc8
 8007386:	0052      	lsls	r2, r2, #1
 8007388:	189b      	adds	r3, r3, r2
 800738a:	19db      	adds	r3, r3, r7
 800738c:	785b      	ldrb	r3, [r3, #1]
 800738e:	001a      	movs	r2, r3
 8007390:	2302      	movs	r3, #2
 8007392:	4013      	ands	r3, r2
 8007394:	d006      	beq.n	80073a4 <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 8007396:	4b19      	ldr	r3, [pc, #100]	; (80073fc <astronode_send_evt_rr+0xe8>)
 8007398:	2201      	movs	r2, #1
 800739a:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 800739c:	4b18      	ldr	r3, [pc, #96]	; (8007400 <astronode_send_evt_rr+0xec>)
 800739e:	0018      	movs	r0, r3
 80073a0:	f7fb fcb2 	bl	8002d08 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 80073a4:	4b12      	ldr	r3, [pc, #72]	; (80073f0 <astronode_send_evt_rr+0xdc>)
 80073a6:	22c8      	movs	r2, #200	; 0xc8
 80073a8:	0052      	lsls	r2, r2, #1
 80073aa:	189b      	adds	r3, r3, r2
 80073ac:	19db      	adds	r3, r3, r7
 80073ae:	785b      	ldrb	r3, [r3, #1]
 80073b0:	001a      	movs	r2, r3
 80073b2:	2304      	movs	r3, #4
 80073b4:	4013      	ands	r3, r2
 80073b6:	d006      	beq.n	80073c6 <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 80073b8:	4b12      	ldr	r3, [pc, #72]	; (8007404 <astronode_send_evt_rr+0xf0>)
 80073ba:	2201      	movs	r2, #1
 80073bc:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 80073be:	4b12      	ldr	r3, [pc, #72]	; (8007408 <astronode_send_evt_rr+0xf4>)
 80073c0:	0018      	movs	r0, r3
 80073c2:	f7fb fca1 	bl	8002d08 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 80073c6:	4b0a      	ldr	r3, [pc, #40]	; (80073f0 <astronode_send_evt_rr+0xdc>)
 80073c8:	22c8      	movs	r2, #200	; 0xc8
 80073ca:	0052      	lsls	r2, r2, #1
 80073cc:	189b      	adds	r3, r3, r2
 80073ce:	19db      	adds	r3, r3, r7
 80073d0:	785b      	ldrb	r3, [r3, #1]
 80073d2:	001a      	movs	r2, r3
 80073d4:	2308      	movs	r3, #8
 80073d6:	4013      	ands	r3, r2
 80073d8:	d006      	beq.n	80073e8 <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 80073da:	4b0c      	ldr	r3, [pc, #48]	; (800740c <astronode_send_evt_rr+0xf8>)
 80073dc:	2201      	movs	r2, #1
 80073de:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 80073e0:	4b0b      	ldr	r3, [pc, #44]	; (8007410 <astronode_send_evt_rr+0xfc>)
 80073e2:	0018      	movs	r0, r3
 80073e4:	f7fb fc90 	bl	8002d08 <send_debug_logs>
            }

        }
    }
}
 80073e8:	46c0      	nop			; (mov r8, r8)
 80073ea:	46bd      	mov	sp, r7
 80073ec:	b064      	add	sp, #400	; 0x190
 80073ee:	bdb0      	pop	{r4, r5, r7, pc}
 80073f0:	fffffe70 	.word	0xfffffe70
 80073f4:	20000b14 	.word	0x20000b14
 80073f8:	08011dfc 	.word	0x08011dfc
 80073fc:	20000b15 	.word	0x20000b15
 8007400:	08011e20 	.word	0x08011e20
 8007404:	20000b16 	.word	0x20000b16
 8007408:	08011e38 	.word	0x08011e38
 800740c:	20000b17 	.word	0x20000b17
 8007410:	08011e4c 	.word	0x08011e4c

08007414 <astronode_send_geo_wr>:

void astronode_send_geo_wr(int32_t latitude, int32_t longitude)
{
 8007414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007416:	b0e7      	sub	sp, #412	; 0x19c
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
    astronode_app_msg_t request = {0};
 800741e:	24d0      	movs	r4, #208	; 0xd0
 8007420:	193b      	adds	r3, r7, r4
 8007422:	0018      	movs	r0, r3
 8007424:	23c6      	movs	r3, #198	; 0xc6
 8007426:	001a      	movs	r2, r3
 8007428:	2100      	movs	r1, #0
 800742a:	f003 fbc1 	bl	800abb0 <memset>
    astronode_app_msg_t answer = {0};
 800742e:	4b56      	ldr	r3, [pc, #344]	; (8007588 <astronode_send_geo_wr+0x174>)
 8007430:	26cc      	movs	r6, #204	; 0xcc
 8007432:	0076      	lsls	r6, r6, #1
 8007434:	199b      	adds	r3, r3, r6
 8007436:	19db      	adds	r3, r3, r7
 8007438:	0018      	movs	r0, r3
 800743a:	23c6      	movs	r3, #198	; 0xc6
 800743c:	001a      	movs	r2, r3
 800743e:	2100      	movs	r1, #0
 8007440:	f003 fbb6 	bl	800abb0 <memset>

    request.op_code = ASTRONODE_OP_CODE_GEO_WR;
 8007444:	193b      	adds	r3, r7, r4
 8007446:	2235      	movs	r2, #53	; 0x35
 8007448:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) latitude;
 800744a:	193b      	adds	r3, r7, r4
 800744c:	22c4      	movs	r2, #196	; 0xc4
 800744e:	5a9b      	ldrh	r3, [r3, r2]
 8007450:	1c5a      	adds	r2, r3, #1
 8007452:	b290      	uxth	r0, r2
 8007454:	193a      	adds	r2, r7, r4
 8007456:	21c4      	movs	r1, #196	; 0xc4
 8007458:	5250      	strh	r0, [r2, r1]
 800745a:	0019      	movs	r1, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	b2da      	uxtb	r2, r3
 8007460:	193b      	adds	r3, r7, r4
 8007462:	185b      	adds	r3, r3, r1
 8007464:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 8);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	1218      	asrs	r0, r3, #8
 800746a:	0025      	movs	r5, r4
 800746c:	197b      	adds	r3, r7, r5
 800746e:	22c4      	movs	r2, #196	; 0xc4
 8007470:	5a9b      	ldrh	r3, [r3, r2]
 8007472:	1c5a      	adds	r2, r3, #1
 8007474:	b294      	uxth	r4, r2
 8007476:	197a      	adds	r2, r7, r5
 8007478:	21c4      	movs	r1, #196	; 0xc4
 800747a:	5254      	strh	r4, [r2, r1]
 800747c:	0019      	movs	r1, r3
 800747e:	b2c2      	uxtb	r2, r0
 8007480:	002c      	movs	r4, r5
 8007482:	193b      	adds	r3, r7, r4
 8007484:	185b      	adds	r3, r3, r1
 8007486:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 16);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	1418      	asrs	r0, r3, #16
 800748c:	0025      	movs	r5, r4
 800748e:	197b      	adds	r3, r7, r5
 8007490:	22c4      	movs	r2, #196	; 0xc4
 8007492:	5a9b      	ldrh	r3, [r3, r2]
 8007494:	1c5a      	adds	r2, r3, #1
 8007496:	b294      	uxth	r4, r2
 8007498:	197a      	adds	r2, r7, r5
 800749a:	21c4      	movs	r1, #196	; 0xc4
 800749c:	5254      	strh	r4, [r2, r1]
 800749e:	0019      	movs	r1, r3
 80074a0:	b2c2      	uxtb	r2, r0
 80074a2:	002c      	movs	r4, r5
 80074a4:	193b      	adds	r3, r7, r4
 80074a6:	185b      	adds	r3, r3, r1
 80074a8:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 24);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	1618      	asrs	r0, r3, #24
 80074ae:	0025      	movs	r5, r4
 80074b0:	197b      	adds	r3, r7, r5
 80074b2:	22c4      	movs	r2, #196	; 0xc4
 80074b4:	5a9b      	ldrh	r3, [r3, r2]
 80074b6:	1c5a      	adds	r2, r3, #1
 80074b8:	b294      	uxth	r4, r2
 80074ba:	197a      	adds	r2, r7, r5
 80074bc:	21c4      	movs	r1, #196	; 0xc4
 80074be:	5254      	strh	r4, [r2, r1]
 80074c0:	0019      	movs	r1, r3
 80074c2:	b2c2      	uxtb	r2, r0
 80074c4:	002c      	movs	r4, r5
 80074c6:	193b      	adds	r3, r7, r4
 80074c8:	185b      	adds	r3, r3, r1
 80074ca:	705a      	strb	r2, [r3, #1]

    request.p_payload[request.payload_len++] = (uint8_t) longitude;
 80074cc:	193b      	adds	r3, r7, r4
 80074ce:	22c4      	movs	r2, #196	; 0xc4
 80074d0:	5a9b      	ldrh	r3, [r3, r2]
 80074d2:	1c5a      	adds	r2, r3, #1
 80074d4:	b290      	uxth	r0, r2
 80074d6:	193a      	adds	r2, r7, r4
 80074d8:	21c4      	movs	r1, #196	; 0xc4
 80074da:	5250      	strh	r0, [r2, r1]
 80074dc:	0019      	movs	r1, r3
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	b2da      	uxtb	r2, r3
 80074e2:	193b      	adds	r3, r7, r4
 80074e4:	185b      	adds	r3, r3, r1
 80074e6:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 8);
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	1218      	asrs	r0, r3, #8
 80074ec:	0025      	movs	r5, r4
 80074ee:	197b      	adds	r3, r7, r5
 80074f0:	22c4      	movs	r2, #196	; 0xc4
 80074f2:	5a9b      	ldrh	r3, [r3, r2]
 80074f4:	1c5a      	adds	r2, r3, #1
 80074f6:	b294      	uxth	r4, r2
 80074f8:	197a      	adds	r2, r7, r5
 80074fa:	21c4      	movs	r1, #196	; 0xc4
 80074fc:	5254      	strh	r4, [r2, r1]
 80074fe:	0019      	movs	r1, r3
 8007500:	b2c2      	uxtb	r2, r0
 8007502:	002c      	movs	r4, r5
 8007504:	193b      	adds	r3, r7, r4
 8007506:	185b      	adds	r3, r3, r1
 8007508:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 16);
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	1418      	asrs	r0, r3, #16
 800750e:	0025      	movs	r5, r4
 8007510:	197b      	adds	r3, r7, r5
 8007512:	22c4      	movs	r2, #196	; 0xc4
 8007514:	5a9b      	ldrh	r3, [r3, r2]
 8007516:	1c5a      	adds	r2, r3, #1
 8007518:	b294      	uxth	r4, r2
 800751a:	197a      	adds	r2, r7, r5
 800751c:	21c4      	movs	r1, #196	; 0xc4
 800751e:	5254      	strh	r4, [r2, r1]
 8007520:	0019      	movs	r1, r3
 8007522:	b2c2      	uxtb	r2, r0
 8007524:	002c      	movs	r4, r5
 8007526:	193b      	adds	r3, r7, r4
 8007528:	185b      	adds	r3, r3, r1
 800752a:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 24);
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	1618      	asrs	r0, r3, #24
 8007530:	0025      	movs	r5, r4
 8007532:	197b      	adds	r3, r7, r5
 8007534:	22c4      	movs	r2, #196	; 0xc4
 8007536:	5a9b      	ldrh	r3, [r3, r2]
 8007538:	1c5a      	adds	r2, r3, #1
 800753a:	b294      	uxth	r4, r2
 800753c:	197a      	adds	r2, r7, r5
 800753e:	21c4      	movs	r1, #196	; 0xc4
 8007540:	5254      	strh	r4, [r2, r1]
 8007542:	0019      	movs	r1, r3
 8007544:	b2c2      	uxtb	r2, r0
 8007546:	0028      	movs	r0, r5
 8007548:	183b      	adds	r3, r7, r0
 800754a:	185b      	adds	r3, r3, r1
 800754c:	705a      	strb	r2, [r3, #1]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800754e:	2308      	movs	r3, #8
 8007550:	18fa      	adds	r2, r7, r3
 8007552:	183b      	adds	r3, r7, r0
 8007554:	0011      	movs	r1, r2
 8007556:	0018      	movs	r0, r3
 8007558:	f000 ff0c 	bl	8008374 <astronode_transport_send_receive>
 800755c:	0003      	movs	r3, r0
 800755e:	2b01      	cmp	r3, #1
 8007560:	d10e      	bne.n	8007580 <astronode_send_geo_wr+0x16c>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_GEO_WA)
 8007562:	4b09      	ldr	r3, [pc, #36]	; (8007588 <astronode_send_geo_wr+0x174>)
 8007564:	199b      	adds	r3, r3, r6
 8007566:	19db      	adds	r3, r3, r7
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	2bb5      	cmp	r3, #181	; 0xb5
 800756c:	d104      	bne.n	8007578 <astronode_send_geo_wr+0x164>
        {
            send_debug_logs("Geolocation values were set successfully.");
 800756e:	4b07      	ldr	r3, [pc, #28]	; (800758c <astronode_send_geo_wr+0x178>)
 8007570:	0018      	movs	r0, r3
 8007572:	f7fb fbc9 	bl	8002d08 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the geolocation information.");
        }
    }
}
 8007576:	e003      	b.n	8007580 <astronode_send_geo_wr+0x16c>
            send_debug_logs("Failed to set the geolocation information.");
 8007578:	4b05      	ldr	r3, [pc, #20]	; (8007590 <astronode_send_geo_wr+0x17c>)
 800757a:	0018      	movs	r0, r3
 800757c:	f7fb fbc4 	bl	8002d08 <send_debug_logs>
}
 8007580:	46c0      	nop			; (mov r8, r8)
 8007582:	46bd      	mov	sp, r7
 8007584:	b067      	add	sp, #412	; 0x19c
 8007586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007588:	fffffe70 	.word	0xfffffe70
 800758c:	08011e60 	.word	0x08011e60
 8007590:	08011e8c 	.word	0x08011e8c

08007594 <astronode_send_pld_er>:
        }
    }
}

bool astronode_send_pld_er ( uint16_t payload_id , char *p_payload , uint16_t payload_length )
{
 8007594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007596:	b0fb      	sub	sp, #492	; 0x1ec
 8007598:	af00      	add	r7, sp, #0
 800759a:	6039      	str	r1, [r7, #0]
 800759c:	0011      	movs	r1, r2
 800759e:	4b4a      	ldr	r3, [pc, #296]	; (80076c8 <astronode_send_pld_er+0x134>)
 80075a0:	26f4      	movs	r6, #244	; 0xf4
 80075a2:	0076      	lsls	r6, r6, #1
 80075a4:	199b      	adds	r3, r3, r6
 80075a6:	19db      	adds	r3, r3, r7
 80075a8:	1c02      	adds	r2, r0, #0
 80075aa:	801a      	strh	r2, [r3, #0]
 80075ac:	4b47      	ldr	r3, [pc, #284]	; (80076cc <astronode_send_pld_er+0x138>)
 80075ae:	199b      	adds	r3, r3, r6
 80075b0:	19db      	adds	r3, r3, r7
 80075b2:	1c0a      	adds	r2, r1, #0
 80075b4:	801a      	strh	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 80075b6:	2490      	movs	r4, #144	; 0x90
 80075b8:	0064      	lsls	r4, r4, #1
 80075ba:	193b      	adds	r3, r7, r4
 80075bc:	0018      	movs	r0, r3
 80075be:	23c6      	movs	r3, #198	; 0xc6
 80075c0:	001a      	movs	r2, r3
 80075c2:	2100      	movs	r1, #0
 80075c4:	f003 faf4 	bl	800abb0 <memset>
    astronode_app_msg_t answer = {0};
 80075c8:	4b41      	ldr	r3, [pc, #260]	; (80076d0 <astronode_send_pld_er+0x13c>)
 80075ca:	199b      	adds	r3, r3, r6
 80075cc:	19db      	adds	r3, r3, r7
 80075ce:	0018      	movs	r0, r3
 80075d0:	23c6      	movs	r3, #198	; 0xc6
 80075d2:	001a      	movs	r2, r3
 80075d4:	2100      	movs	r1, #0
 80075d6:	f003 faeb 	bl	800abb0 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_ER;
 80075da:	193b      	adds	r3, r7, r4
 80075dc:	2225      	movs	r2, #37	; 0x25
 80075de:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) payload_id;
 80075e0:	193b      	adds	r3, r7, r4
 80075e2:	22c4      	movs	r2, #196	; 0xc4
 80075e4:	5a9b      	ldrh	r3, [r3, r2]
 80075e6:	1c5a      	adds	r2, r3, #1
 80075e8:	b290      	uxth	r0, r2
 80075ea:	193a      	adds	r2, r7, r4
 80075ec:	21c4      	movs	r1, #196	; 0xc4
 80075ee:	5250      	strh	r0, [r2, r1]
 80075f0:	0019      	movs	r1, r3
 80075f2:	4b35      	ldr	r3, [pc, #212]	; (80076c8 <astronode_send_pld_er+0x134>)
 80075f4:	199b      	adds	r3, r3, r6
 80075f6:	19db      	adds	r3, r3, r7
 80075f8:	881b      	ldrh	r3, [r3, #0]
 80075fa:	b2da      	uxtb	r2, r3
 80075fc:	193b      	adds	r3, r7, r4
 80075fe:	185b      	adds	r3, r3, r1
 8007600:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (payload_id >> 8);
 8007602:	4b31      	ldr	r3, [pc, #196]	; (80076c8 <astronode_send_pld_er+0x134>)
 8007604:	199b      	adds	r3, r3, r6
 8007606:	19db      	adds	r3, r3, r7
 8007608:	881b      	ldrh	r3, [r3, #0]
 800760a:	0a1b      	lsrs	r3, r3, #8
 800760c:	b298      	uxth	r0, r3
 800760e:	0025      	movs	r5, r4
 8007610:	197b      	adds	r3, r7, r5
 8007612:	22c4      	movs	r2, #196	; 0xc4
 8007614:	5a9b      	ldrh	r3, [r3, r2]
 8007616:	1c5a      	adds	r2, r3, #1
 8007618:	b294      	uxth	r4, r2
 800761a:	197a      	adds	r2, r7, r5
 800761c:	21c4      	movs	r1, #196	; 0xc4
 800761e:	5254      	strh	r4, [r2, r1]
 8007620:	0019      	movs	r1, r3
 8007622:	b2c2      	uxtb	r2, r0
 8007624:	002c      	movs	r4, r5
 8007626:	193b      	adds	r3, r7, r4
 8007628:	185b      	adds	r3, r3, r1
 800762a:	705a      	strb	r2, [r3, #1]

    memcpy(&request.p_payload[request.payload_len], p_payload, payload_length);
 800762c:	193b      	adds	r3, r7, r4
 800762e:	22c4      	movs	r2, #196	; 0xc4
 8007630:	5a9b      	ldrh	r3, [r3, r2]
 8007632:	001a      	movs	r2, r3
 8007634:	193b      	adds	r3, r7, r4
 8007636:	189b      	adds	r3, r3, r2
 8007638:	1c58      	adds	r0, r3, #1
 800763a:	4b24      	ldr	r3, [pc, #144]	; (80076cc <astronode_send_pld_er+0x138>)
 800763c:	199b      	adds	r3, r3, r6
 800763e:	19db      	adds	r3, r3, r7
 8007640:	881a      	ldrh	r2, [r3, #0]
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	0019      	movs	r1, r3
 8007646:	f003 fb98 	bl	800ad7a <memcpy>
    request.payload_len = 2 + payload_length;
 800764a:	4b20      	ldr	r3, [pc, #128]	; (80076cc <astronode_send_pld_er+0x138>)
 800764c:	199b      	adds	r3, r3, r6
 800764e:	19db      	adds	r3, r3, r7
 8007650:	881b      	ldrh	r3, [r3, #0]
 8007652:	3302      	adds	r3, #2
 8007654:	b299      	uxth	r1, r3
 8007656:	193b      	adds	r3, r7, r4
 8007658:	22c4      	movs	r2, #196	; 0xc4
 800765a:	5299      	strh	r1, [r3, r2]
    char s[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 800765c:	2358      	movs	r3, #88	; 0x58
 800765e:	18fa      	adds	r2, r7, r3
 8007660:	193b      	adds	r3, r7, r4
 8007662:	0011      	movs	r1, r2
 8007664:	0018      	movs	r0, r3
 8007666:	f000 fe85 	bl	8008374 <astronode_transport_send_receive>
 800766a:	0003      	movs	r3, r0
 800766c:	2b01      	cmp	r3, #1
 800766e:	d125      	bne.n	80076bc <astronode_send_pld_er+0x128>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_EA)
 8007670:	4b17      	ldr	r3, [pc, #92]	; (80076d0 <astronode_send_pld_er+0x13c>)
 8007672:	199b      	adds	r3, r3, r6
 8007674:	19db      	adds	r3, r3, r7
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	2ba5      	cmp	r3, #165	; 0xa5
 800767a:	d10f      	bne.n	800769c <astronode_send_pld_er+0x108>
        {
        	sprintf ( s , "astronode_application: payload %d queued." , payload_id ) ;
 800767c:	4b12      	ldr	r3, [pc, #72]	; (80076c8 <astronode_send_pld_er+0x134>)
 800767e:	199b      	adds	r3, r3, r6
 8007680:	19db      	adds	r3, r3, r7
 8007682:	881a      	ldrh	r2, [r3, #0]
 8007684:	4913      	ldr	r1, [pc, #76]	; (80076d4 <astronode_send_pld_er+0x140>)
 8007686:	2408      	movs	r4, #8
 8007688:	193b      	adds	r3, r7, r4
 800768a:	0018      	movs	r0, r3
 800768c:	f003 f9fa 	bl	800aa84 <sprintf>
            send_debug_logs ( s ) ;
 8007690:	193b      	adds	r3, r7, r4
 8007692:	0018      	movs	r0, r3
 8007694:	f7fb fb38 	bl	8002d08 <send_debug_logs>
            return true ;
 8007698:	2301      	movs	r3, #1
 800769a:	e010      	b.n	80076be <astronode_send_pld_er+0x12a>
        }
        else
        {
            sprintf ( s , "astronode_application: payload %d not queued." , payload_id ) ;
 800769c:	4b0a      	ldr	r3, [pc, #40]	; (80076c8 <astronode_send_pld_er+0x134>)
 800769e:	22f4      	movs	r2, #244	; 0xf4
 80076a0:	0052      	lsls	r2, r2, #1
 80076a2:	189b      	adds	r3, r3, r2
 80076a4:	19db      	adds	r3, r3, r7
 80076a6:	881a      	ldrh	r2, [r3, #0]
 80076a8:	490b      	ldr	r1, [pc, #44]	; (80076d8 <astronode_send_pld_er+0x144>)
 80076aa:	2408      	movs	r4, #8
 80076ac:	193b      	adds	r3, r7, r4
 80076ae:	0018      	movs	r0, r3
 80076b0:	f003 f9e8 	bl	800aa84 <sprintf>
            send_debug_logs ( s ) ;
 80076b4:	193b      	adds	r3, r7, r4
 80076b6:	0018      	movs	r0, r3
 80076b8:	f7fb fb26 	bl	8002d08 <send_debug_logs>
        }
    }
    return false ;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	0018      	movs	r0, r3
 80076c0:	46bd      	mov	sp, r7
 80076c2:	b07b      	add	sp, #492	; 0x1ec
 80076c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076c6:	46c0      	nop			; (mov r8, r8)
 80076c8:	fffffe1e 	.word	0xfffffe1e
 80076cc:	fffffe1c 	.word	0xfffffe1c
 80076d0:	fffffe70 	.word	0xfffffe70
 80076d4:	08011f04 	.word	0x08011f04
 80076d8:	08011f30 	.word	0x08011f30

080076dc <astronode_send_pld_fr>:

void astronode_send_pld_fr(void)
{
 80076dc:	b5b0      	push	{r4, r5, r7, lr}
 80076de:	b0e4      	sub	sp, #400	; 0x190
 80076e0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80076e2:	24c8      	movs	r4, #200	; 0xc8
 80076e4:	193b      	adds	r3, r7, r4
 80076e6:	0018      	movs	r0, r3
 80076e8:	23c6      	movs	r3, #198	; 0xc6
 80076ea:	001a      	movs	r2, r3
 80076ec:	2100      	movs	r1, #0
 80076ee:	f003 fa5f 	bl	800abb0 <memset>
    astronode_app_msg_t answer = {0};
 80076f2:	4b15      	ldr	r3, [pc, #84]	; (8007748 <astronode_send_pld_fr+0x6c>)
 80076f4:	25c8      	movs	r5, #200	; 0xc8
 80076f6:	006d      	lsls	r5, r5, #1
 80076f8:	195b      	adds	r3, r3, r5
 80076fa:	19db      	adds	r3, r3, r7
 80076fc:	0018      	movs	r0, r3
 80076fe:	23c6      	movs	r3, #198	; 0xc6
 8007700:	001a      	movs	r2, r3
 8007702:	2100      	movs	r1, #0
 8007704:	f003 fa54 	bl	800abb0 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_FR;
 8007708:	193b      	adds	r3, r7, r4
 800770a:	2227      	movs	r2, #39	; 0x27
 800770c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800770e:	003a      	movs	r2, r7
 8007710:	193b      	adds	r3, r7, r4
 8007712:	0011      	movs	r1, r2
 8007714:	0018      	movs	r0, r3
 8007716:	f000 fe2d 	bl	8008374 <astronode_transport_send_receive>
 800771a:	0003      	movs	r3, r0
 800771c:	2b01      	cmp	r3, #1
 800771e:	d10e      	bne.n	800773e <astronode_send_pld_fr+0x62>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_FA)
 8007720:	4b09      	ldr	r3, [pc, #36]	; (8007748 <astronode_send_pld_fr+0x6c>)
 8007722:	195b      	adds	r3, r3, r5
 8007724:	19db      	adds	r3, r3, r7
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	2ba7      	cmp	r3, #167	; 0xa7
 800772a:	d104      	bne.n	8007736 <astronode_send_pld_fr+0x5a>
        {
            send_debug_logs("astronode_application: payload queue has been cleared.");
 800772c:	4b07      	ldr	r3, [pc, #28]	; (800774c <astronode_send_pld_fr+0x70>)
 800772e:	0018      	movs	r0, r3
 8007730:	f7fb faea 	bl	8002d08 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
        }
    }
}
 8007734:	e003      	b.n	800773e <astronode_send_pld_fr+0x62>
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
 8007736:	4b06      	ldr	r3, [pc, #24]	; (8007750 <astronode_send_pld_fr+0x74>)
 8007738:	0018      	movs	r0, r3
 800773a:	f7fb fae5 	bl	8002d08 <send_debug_logs>
}
 800773e:	46c0      	nop			; (mov r8, r8)
 8007740:	46bd      	mov	sp, r7
 8007742:	b064      	add	sp, #400	; 0x190
 8007744:	bdb0      	pop	{r4, r5, r7, pc}
 8007746:	46c0      	nop			; (mov r8, r8)
 8007748:	fffffe70 	.word	0xfffffe70
 800774c:	08011f60 	.word	0x08011f60
 8007750:	08011f98 	.word	0x08011f98

08007754 <astronode_send_res_cr>:

void astronode_send_res_cr(void)
{
 8007754:	b5b0      	push	{r4, r5, r7, lr}
 8007756:	b0e4      	sub	sp, #400	; 0x190
 8007758:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800775a:	24c8      	movs	r4, #200	; 0xc8
 800775c:	193b      	adds	r3, r7, r4
 800775e:	0018      	movs	r0, r3
 8007760:	23c6      	movs	r3, #198	; 0xc6
 8007762:	001a      	movs	r2, r3
 8007764:	2100      	movs	r1, #0
 8007766:	f003 fa23 	bl	800abb0 <memset>
    astronode_app_msg_t answer = {0};
 800776a:	4b16      	ldr	r3, [pc, #88]	; (80077c4 <astronode_send_res_cr+0x70>)
 800776c:	25c8      	movs	r5, #200	; 0xc8
 800776e:	006d      	lsls	r5, r5, #1
 8007770:	195b      	adds	r3, r3, r5
 8007772:	19db      	adds	r3, r3, r7
 8007774:	0018      	movs	r0, r3
 8007776:	23c6      	movs	r3, #198	; 0xc6
 8007778:	001a      	movs	r2, r3
 800777a:	2100      	movs	r1, #0
 800777c:	f003 fa18 	bl	800abb0 <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 8007780:	193b      	adds	r3, r7, r4
 8007782:	2255      	movs	r2, #85	; 0x55
 8007784:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007786:	003a      	movs	r2, r7
 8007788:	193b      	adds	r3, r7, r4
 800778a:	0011      	movs	r1, r2
 800778c:	0018      	movs	r0, r3
 800778e:	f000 fdf1 	bl	8008374 <astronode_transport_send_receive>
 8007792:	0003      	movs	r3, r0
 8007794:	2b01      	cmp	r3, #1
 8007796:	d111      	bne.n	80077bc <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 8007798:	4b0a      	ldr	r3, [pc, #40]	; (80077c4 <astronode_send_res_cr+0x70>)
 800779a:	195b      	adds	r3, r3, r5
 800779c:	19db      	adds	r3, r3, r7
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	2bd5      	cmp	r3, #213	; 0xd5
 80077a2:	d107      	bne.n	80077b4 <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 80077a4:	4b08      	ldr	r3, [pc, #32]	; (80077c8 <astronode_send_res_cr+0x74>)
 80077a6:	2200      	movs	r2, #0
 80077a8:	701a      	strb	r2, [r3, #0]
            send_debug_logs("astronode_application: The reset has been cleared.");
 80077aa:	4b08      	ldr	r3, [pc, #32]	; (80077cc <astronode_send_res_cr+0x78>)
 80077ac:	0018      	movs	r0, r3
 80077ae:	f7fb faab 	bl	8002d08 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No reset to clear.");
        }
    }
}
 80077b2:	e003      	b.n	80077bc <astronode_send_res_cr+0x68>
            send_debug_logs("astronode_application: No reset to clear.");
 80077b4:	4b06      	ldr	r3, [pc, #24]	; (80077d0 <astronode_send_res_cr+0x7c>)
 80077b6:	0018      	movs	r0, r3
 80077b8:	f7fb faa6 	bl	8002d08 <send_debug_logs>
}
 80077bc:	46c0      	nop			; (mov r8, r8)
 80077be:	46bd      	mov	sp, r7
 80077c0:	b064      	add	sp, #400	; 0x190
 80077c2:	bdb0      	pop	{r4, r5, r7, pc}
 80077c4:	fffffe70 	.word	0xfffffe70
 80077c8:	20000b15 	.word	0x20000b15
 80077cc:	08011fd4 	.word	0x08011fd4
 80077d0:	08012008 	.word	0x08012008

080077d4 <astronode_send_rtc_rr>:

void astronode_send_rtc_rr(void)
{
 80077d4:	b5b0      	push	{r4, r5, r7, lr}
 80077d6:	b0fa      	sub	sp, #488	; 0x1e8
 80077d8:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80077da:	258e      	movs	r5, #142	; 0x8e
 80077dc:	006d      	lsls	r5, r5, #1
 80077de:	197b      	adds	r3, r7, r5
 80077e0:	0018      	movs	r0, r3
 80077e2:	23c6      	movs	r3, #198	; 0xc6
 80077e4:	001a      	movs	r2, r3
 80077e6:	2100      	movs	r1, #0
 80077e8:	f003 f9e2 	bl	800abb0 <memset>
    astronode_app_msg_t answer = {0};
 80077ec:	4b26      	ldr	r3, [pc, #152]	; (8007888 <astronode_send_rtc_rr+0xb4>)
 80077ee:	24f4      	movs	r4, #244	; 0xf4
 80077f0:	0064      	lsls	r4, r4, #1
 80077f2:	191b      	adds	r3, r3, r4
 80077f4:	19db      	adds	r3, r3, r7
 80077f6:	0018      	movs	r0, r3
 80077f8:	23c6      	movs	r3, #198	; 0xc6
 80077fa:	001a      	movs	r2, r3
 80077fc:	2100      	movs	r1, #0
 80077fe:	f003 f9d7 	bl	800abb0 <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR;
 8007802:	197b      	adds	r3, r7, r5
 8007804:	2217      	movs	r2, #23
 8007806:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007808:	2354      	movs	r3, #84	; 0x54
 800780a:	18fa      	adds	r2, r7, r3
 800780c:	197b      	adds	r3, r7, r5
 800780e:	0011      	movs	r1, r2
 8007810:	0018      	movs	r0, r3
 8007812:	f000 fdaf 	bl	8008374 <astronode_transport_send_receive>
 8007816:	0003      	movs	r3, r0
 8007818:	2b01      	cmp	r3, #1
 800781a:	d131      	bne.n	8007880 <astronode_send_rtc_rr+0xac>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RTC_RA)
 800781c:	4b1a      	ldr	r3, [pc, #104]	; (8007888 <astronode_send_rtc_rr+0xb4>)
 800781e:	0021      	movs	r1, r4
 8007820:	185b      	adds	r3, r3, r1
 8007822:	19db      	adds	r3, r3, r7
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	2b97      	cmp	r3, #151	; 0x97
 8007828:	d126      	bne.n	8007878 <astronode_send_rtc_rr+0xa4>
        {
            uint32_t rtc_time = answer.p_payload[0]
 800782a:	4b17      	ldr	r3, [pc, #92]	; (8007888 <astronode_send_rtc_rr+0xb4>)
 800782c:	185b      	adds	r3, r3, r1
 800782e:	19db      	adds	r3, r3, r7
 8007830:	785b      	ldrb	r3, [r3, #1]
 8007832:	001a      	movs	r2, r3
                                        + (answer.p_payload[1] << 8)
 8007834:	4b14      	ldr	r3, [pc, #80]	; (8007888 <astronode_send_rtc_rr+0xb4>)
 8007836:	185b      	adds	r3, r3, r1
 8007838:	19db      	adds	r3, r3, r7
 800783a:	789b      	ldrb	r3, [r3, #2]
 800783c:	021b      	lsls	r3, r3, #8
 800783e:	18d2      	adds	r2, r2, r3
                                        + (answer.p_payload[2] << 16)
 8007840:	4b11      	ldr	r3, [pc, #68]	; (8007888 <astronode_send_rtc_rr+0xb4>)
 8007842:	185b      	adds	r3, r3, r1
 8007844:	19db      	adds	r3, r3, r7
 8007846:	78db      	ldrb	r3, [r3, #3]
 8007848:	041b      	lsls	r3, r3, #16
 800784a:	18d2      	adds	r2, r2, r3
                                        + (answer.p_payload[3] << 24);
 800784c:	4b0e      	ldr	r3, [pc, #56]	; (8007888 <astronode_send_rtc_rr+0xb4>)
 800784e:	185b      	adds	r3, r3, r1
 8007850:	19db      	adds	r3, r3, r7
 8007852:	791b      	ldrb	r3, [r3, #4]
 8007854:	061b      	lsls	r3, r3, #24
 8007856:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8007858:	22f2      	movs	r2, #242	; 0xf2
 800785a:	0052      	lsls	r2, r2, #1
 800785c:	18b9      	adds	r1, r7, r2
 800785e:	600b      	str	r3, [r1, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 8007860:	18bb      	adds	r3, r7, r2
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	4909      	ldr	r1, [pc, #36]	; (800788c <astronode_send_rtc_rr+0xb8>)
 8007866:	1d3b      	adds	r3, r7, #4
 8007868:	0018      	movs	r0, r3
 800786a:	f003 f90b 	bl	800aa84 <sprintf>
            send_debug_logs(str);
 800786e:	1d3b      	adds	r3, r7, #4
 8007870:	0018      	movs	r0, r3
 8007872:	f7fb fa49 	bl	8002d08 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to read rtc time.");
        }
    }
}
 8007876:	e003      	b.n	8007880 <astronode_send_rtc_rr+0xac>
            send_debug_logs("Failed to read rtc time.");
 8007878:	4b05      	ldr	r3, [pc, #20]	; (8007890 <astronode_send_rtc_rr+0xbc>)
 800787a:	0018      	movs	r0, r3
 800787c:	f7fb fa44 	bl	8002d08 <send_debug_logs>
}
 8007880:	46c0      	nop			; (mov r8, r8)
 8007882:	46bd      	mov	sp, r7
 8007884:	b07a      	add	sp, #488	; 0x1e8
 8007886:	bdb0      	pop	{r4, r5, r7, pc}
 8007888:	fffffe6c 	.word	0xfffffe6c
 800788c:	08012034 	.word	0x08012034
 8007890:	08012074 	.word	0x08012074

08007894 <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 8007894:	b5b0      	push	{r4, r5, r7, lr}
 8007896:	b0f8      	sub	sp, #480	; 0x1e0
 8007898:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800789a:	258c      	movs	r5, #140	; 0x8c
 800789c:	006d      	lsls	r5, r5, #1
 800789e:	197b      	adds	r3, r7, r5
 80078a0:	0018      	movs	r0, r3
 80078a2:	23c6      	movs	r3, #198	; 0xc6
 80078a4:	001a      	movs	r2, r3
 80078a6:	2100      	movs	r1, #0
 80078a8:	f003 f982 	bl	800abb0 <memset>
    astronode_app_msg_t answer = {0};
 80078ac:	4b21      	ldr	r3, [pc, #132]	; (8007934 <astronode_send_sak_rr+0xa0>)
 80078ae:	24f0      	movs	r4, #240	; 0xf0
 80078b0:	0064      	lsls	r4, r4, #1
 80078b2:	191b      	adds	r3, r3, r4
 80078b4:	19db      	adds	r3, r3, r7
 80078b6:	0018      	movs	r0, r3
 80078b8:	23c6      	movs	r3, #198	; 0xc6
 80078ba:	001a      	movs	r2, r3
 80078bc:	2100      	movs	r1, #0
 80078be:	f003 f977 	bl	800abb0 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 80078c2:	197b      	adds	r3, r7, r5
 80078c4:	2245      	movs	r2, #69	; 0x45
 80078c6:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80078c8:	2350      	movs	r3, #80	; 0x50
 80078ca:	18fa      	adds	r2, r7, r3
 80078cc:	197b      	adds	r3, r7, r5
 80078ce:	0011      	movs	r1, r2
 80078d0:	0018      	movs	r0, r3
 80078d2:	f000 fd4f 	bl	8008374 <astronode_transport_send_receive>
 80078d6:	0003      	movs	r3, r0
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d126      	bne.n	800792a <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 80078dc:	4b15      	ldr	r3, [pc, #84]	; (8007934 <astronode_send_sak_rr+0xa0>)
 80078de:	191b      	adds	r3, r3, r4
 80078e0:	19db      	adds	r3, r3, r7
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	2bc5      	cmp	r3, #197	; 0xc5
 80078e6:	d11c      	bne.n	8007922 <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 80078e8:	4b12      	ldr	r3, [pc, #72]	; (8007934 <astronode_send_sak_rr+0xa0>)
 80078ea:	191b      	adds	r3, r3, r4
 80078ec:	19db      	adds	r3, r3, r7
 80078ee:	785b      	ldrb	r3, [r3, #1]
 80078f0:	b299      	uxth	r1, r3
 80078f2:	4b10      	ldr	r3, [pc, #64]	; (8007934 <astronode_send_sak_rr+0xa0>)
 80078f4:	191b      	adds	r3, r3, r4
 80078f6:	19db      	adds	r3, r3, r7
 80078f8:	789b      	ldrb	r3, [r3, #2]
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	021b      	lsls	r3, r3, #8
 80078fe:	b29a      	uxth	r2, r3
 8007900:	20ef      	movs	r0, #239	; 0xef
 8007902:	0040      	lsls	r0, r0, #1
 8007904:	183b      	adds	r3, r7, r0
 8007906:	188a      	adds	r2, r1, r2
 8007908:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 800790a:	183b      	adds	r3, r7, r0
 800790c:	881a      	ldrh	r2, [r3, #0]
 800790e:	490a      	ldr	r1, [pc, #40]	; (8007938 <astronode_send_sak_rr+0xa4>)
 8007910:	003b      	movs	r3, r7
 8007912:	0018      	movs	r0, r3
 8007914:	f003 f8b6 	bl	800aa84 <sprintf>
            send_debug_logs(str);
 8007918:	003b      	movs	r3, r7
 800791a:	0018      	movs	r0, r3
 800791c:	f7fb f9f4 	bl	8002d08 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No acknowledgment available.");
        }
    }
}
 8007920:	e003      	b.n	800792a <astronode_send_sak_rr+0x96>
            send_debug_logs("astronode_application: No acknowledgment available.");
 8007922:	4b06      	ldr	r3, [pc, #24]	; (800793c <astronode_send_sak_rr+0xa8>)
 8007924:	0018      	movs	r0, r3
 8007926:	f7fb f9ef 	bl	8002d08 <send_debug_logs>
}
 800792a:	46c0      	nop			; (mov r8, r8)
 800792c:	46bd      	mov	sp, r7
 800792e:	b078      	add	sp, #480	; 0x1e0
 8007930:	bdb0      	pop	{r4, r5, r7, pc}
 8007932:	46c0      	nop			; (mov r8, r8)
 8007934:	fffffe70 	.word	0xfffffe70
 8007938:	08012090 	.word	0x08012090
 800793c:	080120bc 	.word	0x080120bc

08007940 <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 8007940:	b5b0      	push	{r4, r5, r7, lr}
 8007942:	b0e4      	sub	sp, #400	; 0x190
 8007944:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007946:	24c8      	movs	r4, #200	; 0xc8
 8007948:	193b      	adds	r3, r7, r4
 800794a:	0018      	movs	r0, r3
 800794c:	23c6      	movs	r3, #198	; 0xc6
 800794e:	001a      	movs	r2, r3
 8007950:	2100      	movs	r1, #0
 8007952:	f003 f92d 	bl	800abb0 <memset>
    astronode_app_msg_t answer = {0};
 8007956:	4b16      	ldr	r3, [pc, #88]	; (80079b0 <astronode_send_sak_cr+0x70>)
 8007958:	25c8      	movs	r5, #200	; 0xc8
 800795a:	006d      	lsls	r5, r5, #1
 800795c:	195b      	adds	r3, r3, r5
 800795e:	19db      	adds	r3, r3, r7
 8007960:	0018      	movs	r0, r3
 8007962:	23c6      	movs	r3, #198	; 0xc6
 8007964:	001a      	movs	r2, r3
 8007966:	2100      	movs	r1, #0
 8007968:	f003 f922 	bl	800abb0 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 800796c:	193b      	adds	r3, r7, r4
 800796e:	2246      	movs	r2, #70	; 0x46
 8007970:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007972:	003a      	movs	r2, r7
 8007974:	193b      	adds	r3, r7, r4
 8007976:	0011      	movs	r1, r2
 8007978:	0018      	movs	r0, r3
 800797a:	f000 fcfb 	bl	8008374 <astronode_transport_send_receive>
 800797e:	0003      	movs	r3, r0
 8007980:	2b01      	cmp	r3, #1
 8007982:	d111      	bne.n	80079a8 <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 8007984:	4b0a      	ldr	r3, [pc, #40]	; (80079b0 <astronode_send_sak_cr+0x70>)
 8007986:	195b      	adds	r3, r3, r5
 8007988:	19db      	adds	r3, r3, r7
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	2bc6      	cmp	r3, #198	; 0xc6
 800798e:	d107      	bne.n	80079a0 <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 8007990:	4b08      	ldr	r3, [pc, #32]	; (80079b4 <astronode_send_sak_cr+0x74>)
 8007992:	2200      	movs	r2, #0
 8007994:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 8007996:	4b08      	ldr	r3, [pc, #32]	; (80079b8 <astronode_send_sak_cr+0x78>)
 8007998:	0018      	movs	r0, r3
 800799a:	f7fb f9b5 	bl	8002d08 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 800799e:	e003      	b.n	80079a8 <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 80079a0:	4b06      	ldr	r3, [pc, #24]	; (80079bc <astronode_send_sak_cr+0x7c>)
 80079a2:	0018      	movs	r0, r3
 80079a4:	f7fb f9b0 	bl	8002d08 <send_debug_logs>
}
 80079a8:	46c0      	nop			; (mov r8, r8)
 80079aa:	46bd      	mov	sp, r7
 80079ac:	b064      	add	sp, #400	; 0x190
 80079ae:	bdb0      	pop	{r4, r5, r7, pc}
 80079b0:	fffffe70 	.word	0xfffffe70
 80079b4:	20000b14 	.word	0x20000b14
 80079b8:	080120f0 	.word	0x080120f0
 80079bc:	08012118 	.word	0x08012118

080079c0 <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 80079c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079c2:	b0ed      	sub	sp, #436	; 0x1b4
 80079c4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80079c6:	21c8      	movs	r1, #200	; 0xc8
 80079c8:	2318      	movs	r3, #24
 80079ca:	18cb      	adds	r3, r1, r3
 80079cc:	19db      	adds	r3, r3, r7
 80079ce:	0018      	movs	r0, r3
 80079d0:	23c6      	movs	r3, #198	; 0xc6
 80079d2:	001a      	movs	r2, r3
 80079d4:	2100      	movs	r1, #0
 80079d6:	f003 f8eb 	bl	800abb0 <memset>
    astronode_app_msg_t answer = {0};
 80079da:	4b4a      	ldr	r3, [pc, #296]	; (8007b04 <astronode_send_mpn_rr+0x144>)
 80079dc:	26cc      	movs	r6, #204	; 0xcc
 80079de:	0076      	lsls	r6, r6, #1
 80079e0:	199b      	adds	r3, r3, r6
 80079e2:	2218      	movs	r2, #24
 80079e4:	4694      	mov	ip, r2
 80079e6:	44bc      	add	ip, r7
 80079e8:	4463      	add	r3, ip
 80079ea:	0018      	movs	r0, r3
 80079ec:	23c6      	movs	r3, #198	; 0xc6
 80079ee:	001a      	movs	r2, r3
 80079f0:	2100      	movs	r1, #0
 80079f2:	f003 f8dd 	bl	800abb0 <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 80079f6:	21c8      	movs	r1, #200	; 0xc8
 80079f8:	2318      	movs	r3, #24
 80079fa:	18cb      	adds	r3, r1, r3
 80079fc:	19db      	adds	r3, r3, r7
 80079fe:	221b      	movs	r2, #27
 8007a00:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007a02:	2318      	movs	r3, #24
 8007a04:	18fa      	adds	r2, r7, r3
 8007a06:	2318      	movs	r3, #24
 8007a08:	18cb      	adds	r3, r1, r3
 8007a0a:	19db      	adds	r3, r3, r7
 8007a0c:	0011      	movs	r1, r2
 8007a0e:	0018      	movs	r0, r3
 8007a10:	f000 fcb0 	bl	8008374 <astronode_transport_send_receive>
 8007a14:	0003      	movs	r3, r0
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d16f      	bne.n	8007afa <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 8007a1a:	4b3a      	ldr	r3, [pc, #232]	; (8007b04 <astronode_send_mpn_rr+0x144>)
 8007a1c:	0032      	movs	r2, r6
 8007a1e:	189b      	adds	r3, r3, r2
 8007a20:	2118      	movs	r1, #24
 8007a22:	468c      	mov	ip, r1
 8007a24:	44bc      	add	ip, r7
 8007a26:	4463      	add	r3, ip
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	2b9b      	cmp	r3, #155	; 0x9b
 8007a2c:	d161      	bne.n	8007af2 <astronode_send_mpn_rr+0x132>
        {
 8007a2e:	466b      	mov	r3, sp
 8007a30:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 8007a32:	4b34      	ldr	r3, [pc, #208]	; (8007b04 <astronode_send_mpn_rr+0x144>)
 8007a34:	189b      	adds	r3, r3, r2
 8007a36:	2218      	movs	r2, #24
 8007a38:	4694      	mov	ip, r2
 8007a3a:	44bc      	add	ip, r7
 8007a3c:	4463      	add	r3, ip
 8007a3e:	22c4      	movs	r2, #196	; 0xc4
 8007a40:	5a9b      	ldrh	r3, [r3, r2]
 8007a42:	001a      	movs	r2, r3
 8007a44:	3a01      	subs	r2, #1
 8007a46:	21ca      	movs	r1, #202	; 0xca
 8007a48:	0049      	lsls	r1, r1, #1
 8007a4a:	2018      	movs	r0, #24
 8007a4c:	1809      	adds	r1, r1, r0
 8007a4e:	19c9      	adds	r1, r1, r7
 8007a50:	600a      	str	r2, [r1, #0]
 8007a52:	001c      	movs	r4, r3
 8007a54:	2200      	movs	r2, #0
 8007a56:	0015      	movs	r5, r2
 8007a58:	0020      	movs	r0, r4
 8007a5a:	0029      	movs	r1, r5
 8007a5c:	0004      	movs	r4, r0
 8007a5e:	0f62      	lsrs	r2, r4, #29
 8007a60:	000c      	movs	r4, r1
 8007a62:	00e4      	lsls	r4, r4, #3
 8007a64:	617c      	str	r4, [r7, #20]
 8007a66:	697c      	ldr	r4, [r7, #20]
 8007a68:	4314      	orrs	r4, r2
 8007a6a:	617c      	str	r4, [r7, #20]
 8007a6c:	0001      	movs	r1, r0
 8007a6e:	00c9      	lsls	r1, r1, #3
 8007a70:	6139      	str	r1, [r7, #16]
 8007a72:	603b      	str	r3, [r7, #0]
 8007a74:	2200      	movs	r2, #0
 8007a76:	607a      	str	r2, [r7, #4]
 8007a78:	6838      	ldr	r0, [r7, #0]
 8007a7a:	6879      	ldr	r1, [r7, #4]
 8007a7c:	0004      	movs	r4, r0
 8007a7e:	0f62      	lsrs	r2, r4, #29
 8007a80:	000c      	movs	r4, r1
 8007a82:	00e4      	lsls	r4, r4, #3
 8007a84:	60fc      	str	r4, [r7, #12]
 8007a86:	68fc      	ldr	r4, [r7, #12]
 8007a88:	4314      	orrs	r4, r2
 8007a8a:	60fc      	str	r4, [r7, #12]
 8007a8c:	0001      	movs	r1, r0
 8007a8e:	00ca      	lsls	r2, r1, #3
 8007a90:	60ba      	str	r2, [r7, #8]
 8007a92:	3307      	adds	r3, #7
 8007a94:	08db      	lsrs	r3, r3, #3
 8007a96:	00db      	lsls	r3, r3, #3
 8007a98:	4669      	mov	r1, sp
 8007a9a:	1acb      	subs	r3, r1, r3
 8007a9c:	469d      	mov	sp, r3
 8007a9e:	466b      	mov	r3, sp
 8007aa0:	3300      	adds	r3, #0
 8007aa2:	24c8      	movs	r4, #200	; 0xc8
 8007aa4:	0064      	lsls	r4, r4, #1
 8007aa6:	2218      	movs	r2, #24
 8007aa8:	18a2      	adds	r2, r4, r2
 8007aaa:	19d1      	adds	r1, r2, r7
 8007aac:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 8007aae:	4b16      	ldr	r3, [pc, #88]	; (8007b08 <astronode_send_mpn_rr+0x148>)
 8007ab0:	0018      	movs	r0, r3
 8007ab2:	f7fb f929 	bl	8002d08 <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 8007ab6:	4b13      	ldr	r3, [pc, #76]	; (8007b04 <astronode_send_mpn_rr+0x144>)
 8007ab8:	22cc      	movs	r2, #204	; 0xcc
 8007aba:	0052      	lsls	r2, r2, #1
 8007abc:	189b      	adds	r3, r3, r2
 8007abe:	2218      	movs	r2, #24
 8007ac0:	4694      	mov	ip, r2
 8007ac2:	44bc      	add	ip, r7
 8007ac4:	4463      	add	r3, ip
 8007ac6:	22c4      	movs	r2, #196	; 0xc4
 8007ac8:	5a9b      	ldrh	r3, [r3, r2]
 8007aca:	0019      	movs	r1, r3
 8007acc:	2318      	movs	r3, #24
 8007ace:	18fb      	adds	r3, r7, r3
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	4a0e      	ldr	r2, [pc, #56]	; (8007b0c <astronode_send_mpn_rr+0x14c>)
 8007ad4:	2018      	movs	r0, #24
 8007ad6:	1820      	adds	r0, r4, r0
 8007ad8:	19c0      	adds	r0, r0, r7
 8007ada:	6800      	ldr	r0, [r0, #0]
 8007adc:	f002 ff9e 	bl	800aa1c <snprintf>
            send_debug_logs(product_number);
 8007ae0:	2318      	movs	r3, #24
 8007ae2:	18e3      	adds	r3, r4, r3
 8007ae4:	19db      	adds	r3, r3, r7
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	0018      	movs	r0, r3
 8007aea:	f7fb f90d 	bl	8002d08 <send_debug_logs>
 8007aee:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8007af0:	e003      	b.n	8007afa <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8007af2:	4b07      	ldr	r3, [pc, #28]	; (8007b10 <astronode_send_mpn_rr+0x150>)
 8007af4:	0018      	movs	r0, r3
 8007af6:	f7fb f907 	bl	8002d08 <send_debug_logs>
}
 8007afa:	46c0      	nop			; (mov r8, r8)
 8007afc:	46bd      	mov	sp, r7
 8007afe:	b06d      	add	sp, #436	; 0x1b4
 8007b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b02:	46c0      	nop			; (mov r8, r8)
 8007b04:	fffffe68 	.word	0xfffffe68
 8007b08:	080121e0 	.word	0x080121e0
 8007b0c:	08011d18 	.word	0x08011d18
 8007b10:	08011d54 	.word	0x08011d54

08007b14 <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 8007b14:	b5b0      	push	{r4, r5, r7, lr}
 8007b16:	b0e4      	sub	sp, #400	; 0x190
 8007b18:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007b1a:	24c8      	movs	r4, #200	; 0xc8
 8007b1c:	193b      	adds	r3, r7, r4
 8007b1e:	0018      	movs	r0, r3
 8007b20:	23c6      	movs	r3, #198	; 0xc6
 8007b22:	001a      	movs	r2, r3
 8007b24:	2100      	movs	r1, #0
 8007b26:	f003 f843 	bl	800abb0 <memset>
    astronode_app_msg_t answer = {0};
 8007b2a:	4b16      	ldr	r3, [pc, #88]	; (8007b84 <astronode_send_cmd_cr+0x70>)
 8007b2c:	25c8      	movs	r5, #200	; 0xc8
 8007b2e:	006d      	lsls	r5, r5, #1
 8007b30:	195b      	adds	r3, r3, r5
 8007b32:	19db      	adds	r3, r3, r7
 8007b34:	0018      	movs	r0, r3
 8007b36:	23c6      	movs	r3, #198	; 0xc6
 8007b38:	001a      	movs	r2, r3
 8007b3a:	2100      	movs	r1, #0
 8007b3c:	f003 f838 	bl	800abb0 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 8007b40:	193b      	adds	r3, r7, r4
 8007b42:	2248      	movs	r2, #72	; 0x48
 8007b44:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007b46:	003a      	movs	r2, r7
 8007b48:	193b      	adds	r3, r7, r4
 8007b4a:	0011      	movs	r1, r2
 8007b4c:	0018      	movs	r0, r3
 8007b4e:	f000 fc11 	bl	8008374 <astronode_transport_send_receive>
 8007b52:	0003      	movs	r3, r0
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d111      	bne.n	8007b7c <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 8007b58:	4b0a      	ldr	r3, [pc, #40]	; (8007b84 <astronode_send_cmd_cr+0x70>)
 8007b5a:	195b      	adds	r3, r3, r5
 8007b5c:	19db      	adds	r3, r3, r7
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	2bc8      	cmp	r3, #200	; 0xc8
 8007b62:	d107      	bne.n	8007b74 <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 8007b64:	4b08      	ldr	r3, [pc, #32]	; (8007b88 <astronode_send_cmd_cr+0x74>)
 8007b66:	2200      	movs	r2, #0
 8007b68:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 8007b6a:	4b08      	ldr	r3, [pc, #32]	; (8007b8c <astronode_send_cmd_cr+0x78>)
 8007b6c:	0018      	movs	r0, r3
 8007b6e:	f7fb f8cb 	bl	8002d08 <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 8007b72:	e003      	b.n	8007b7c <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 8007b74:	4b06      	ldr	r3, [pc, #24]	; (8007b90 <astronode_send_cmd_cr+0x7c>)
 8007b76:	0018      	movs	r0, r3
 8007b78:	f7fb f8c6 	bl	8002d08 <send_debug_logs>
}
 8007b7c:	46c0      	nop			; (mov r8, r8)
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	b064      	add	sp, #400	; 0x190
 8007b82:	bdb0      	pop	{r4, r5, r7, pc}
 8007b84:	fffffe70 	.word	0xfffffe70
 8007b88:	20000b16 	.word	0x20000b16
 8007b8c:	08012630 	.word	0x08012630
 8007b90:	08012654 	.word	0x08012654

08007b94 <astronode_send_cmd_rr>:

void astronode_send_cmd_rr(void)
{
 8007b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b96:	4cac      	ldr	r4, [pc, #688]	; (8007e48 <astronode_send_cmd_rr+0x2b4>)
 8007b98:	44a5      	add	sp, r4
 8007b9a:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007b9c:	218c      	movs	r1, #140	; 0x8c
 8007b9e:	0049      	lsls	r1, r1, #1
 8007ba0:	2318      	movs	r3, #24
 8007ba2:	18cb      	adds	r3, r1, r3
 8007ba4:	19db      	adds	r3, r3, r7
 8007ba6:	0018      	movs	r0, r3
 8007ba8:	23c6      	movs	r3, #198	; 0xc6
 8007baa:	001a      	movs	r2, r3
 8007bac:	2100      	movs	r1, #0
 8007bae:	f002 ffff 	bl	800abb0 <memset>
    astronode_app_msg_t answer = {0};
 8007bb2:	4ba6      	ldr	r3, [pc, #664]	; (8007e4c <astronode_send_cmd_rr+0x2b8>)
 8007bb4:	26f8      	movs	r6, #248	; 0xf8
 8007bb6:	0076      	lsls	r6, r6, #1
 8007bb8:	199b      	adds	r3, r3, r6
 8007bba:	2218      	movs	r2, #24
 8007bbc:	4694      	mov	ip, r2
 8007bbe:	44bc      	add	ip, r7
 8007bc0:	4463      	add	r3, ip
 8007bc2:	0018      	movs	r0, r3
 8007bc4:	23c6      	movs	r3, #198	; 0xc6
 8007bc6:	001a      	movs	r2, r3
 8007bc8:	2100      	movs	r1, #0
 8007bca:	f002 fff1 	bl	800abb0 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 8007bce:	218c      	movs	r1, #140	; 0x8c
 8007bd0:	0049      	lsls	r1, r1, #1
 8007bd2:	2318      	movs	r3, #24
 8007bd4:	18cb      	adds	r3, r1, r3
 8007bd6:	19db      	adds	r3, r3, r7
 8007bd8:	2247      	movs	r2, #71	; 0x47
 8007bda:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007bdc:	2350      	movs	r3, #80	; 0x50
 8007bde:	2218      	movs	r2, #24
 8007be0:	189b      	adds	r3, r3, r2
 8007be2:	19da      	adds	r2, r3, r7
 8007be4:	2318      	movs	r3, #24
 8007be6:	18cb      	adds	r3, r1, r3
 8007be8:	19db      	adds	r3, r3, r7
 8007bea:	0011      	movs	r1, r2
 8007bec:	0018      	movs	r0, r3
 8007bee:	f000 fbc1 	bl	8008374 <astronode_transport_send_receive>
 8007bf2:	0003      	movs	r3, r0
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d000      	beq.n	8007bfa <astronode_send_cmd_rr+0x66>
 8007bf8:	e121      	b.n	8007e3e <astronode_send_cmd_rr+0x2aa>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 8007bfa:	4b94      	ldr	r3, [pc, #592]	; (8007e4c <astronode_send_cmd_rr+0x2b8>)
 8007bfc:	199b      	adds	r3, r3, r6
 8007bfe:	2218      	movs	r2, #24
 8007c00:	4694      	mov	ip, r2
 8007c02:	44bc      	add	ip, r7
 8007c04:	4463      	add	r3, ip
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	2bc7      	cmp	r3, #199	; 0xc7
 8007c0a:	d000      	beq.n	8007c0e <astronode_send_cmd_rr+0x7a>
 8007c0c:	e113      	b.n	8007e36 <astronode_send_cmd_rr+0x2a2>
        {
 8007c0e:	466b      	mov	r3, sp
 8007c10:	001e      	movs	r6, r3
            send_debug_logs("Received downlink command");
 8007c12:	4b8f      	ldr	r3, [pc, #572]	; (8007e50 <astronode_send_cmd_rr+0x2bc>)
 8007c14:	0018      	movs	r0, r3
 8007c16:	f7fb f877 	bl	8002d08 <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 8007c1a:	4b8c      	ldr	r3, [pc, #560]	; (8007e4c <astronode_send_cmd_rr+0x2b8>)
 8007c1c:	21f8      	movs	r1, #248	; 0xf8
 8007c1e:	0049      	lsls	r1, r1, #1
 8007c20:	185b      	adds	r3, r3, r1
 8007c22:	2218      	movs	r2, #24
 8007c24:	4694      	mov	ip, r2
 8007c26:	44bc      	add	ip, r7
 8007c28:	4463      	add	r3, ip
 8007c2a:	785b      	ldrb	r3, [r3, #1]
 8007c2c:	001a      	movs	r2, r3
                                + (answer.p_payload[1] << 8)
 8007c2e:	4b87      	ldr	r3, [pc, #540]	; (8007e4c <astronode_send_cmd_rr+0x2b8>)
 8007c30:	185b      	adds	r3, r3, r1
 8007c32:	2018      	movs	r0, #24
 8007c34:	4684      	mov	ip, r0
 8007c36:	44bc      	add	ip, r7
 8007c38:	4463      	add	r3, ip
 8007c3a:	789b      	ldrb	r3, [r3, #2]
 8007c3c:	021b      	lsls	r3, r3, #8
 8007c3e:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[2] << 16)
 8007c40:	4b82      	ldr	r3, [pc, #520]	; (8007e4c <astronode_send_cmd_rr+0x2b8>)
 8007c42:	185b      	adds	r3, r3, r1
 8007c44:	2018      	movs	r0, #24
 8007c46:	4684      	mov	ip, r0
 8007c48:	44bc      	add	ip, r7
 8007c4a:	4463      	add	r3, ip
 8007c4c:	78db      	ldrb	r3, [r3, #3]
 8007c4e:	041b      	lsls	r3, r3, #16
 8007c50:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[3] << 24);
 8007c52:	4b7e      	ldr	r3, [pc, #504]	; (8007e4c <astronode_send_cmd_rr+0x2b8>)
 8007c54:	185b      	adds	r3, r3, r1
 8007c56:	2118      	movs	r1, #24
 8007c58:	468c      	mov	ip, r1
 8007c5a:	44bc      	add	ip, r7
 8007c5c:	4463      	add	r3, ip
 8007c5e:	791b      	ldrb	r3, [r3, #4]
 8007c60:	061b      	lsls	r3, r3, #24
 8007c62:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8007c64:	22f4      	movs	r2, #244	; 0xf4
 8007c66:	0052      	lsls	r2, r2, #1
 8007c68:	2118      	movs	r1, #24
 8007c6a:	1851      	adds	r1, r2, r1
 8007c6c:	19c8      	adds	r0, r1, r7
 8007c6e:	6003      	str	r3, [r0, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 8007c70:	2318      	movs	r3, #24
 8007c72:	18d3      	adds	r3, r2, r3
 8007c74:	19db      	adds	r3, r3, r7
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	4976      	ldr	r1, [pc, #472]	; (8007e54 <astronode_send_cmd_rr+0x2c0>)
 8007c7a:	2318      	movs	r3, #24
 8007c7c:	18fb      	adds	r3, r7, r3
 8007c7e:	0018      	movs	r0, r3
 8007c80:	f002 ff00 	bl	800aa84 <sprintf>
            send_debug_logs(str);
 8007c84:	2318      	movs	r3, #24
 8007c86:	18fb      	adds	r3, r7, r3
 8007c88:	0018      	movs	r0, r3
 8007c8a:	f7fb f83d 	bl	8002d08 <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 8007c8e:	4b6f      	ldr	r3, [pc, #444]	; (8007e4c <astronode_send_cmd_rr+0x2b8>)
 8007c90:	21f8      	movs	r1, #248	; 0xf8
 8007c92:	0049      	lsls	r1, r1, #1
 8007c94:	185b      	adds	r3, r3, r1
 8007c96:	2218      	movs	r2, #24
 8007c98:	4694      	mov	ip, r2
 8007c9a:	44bc      	add	ip, r7
 8007c9c:	4463      	add	r3, ip
 8007c9e:	22c4      	movs	r2, #196	; 0xc4
 8007ca0:	5a9b      	ldrh	r3, [r3, r2]
 8007ca2:	2b2c      	cmp	r3, #44	; 0x2c
 8007ca4:	d00e      	beq.n	8007cc4 <astronode_send_cmd_rr+0x130>
 8007ca6:	4b69      	ldr	r3, [pc, #420]	; (8007e4c <astronode_send_cmd_rr+0x2b8>)
 8007ca8:	185b      	adds	r3, r3, r1
 8007caa:	2218      	movs	r2, #24
 8007cac:	4694      	mov	ip, r2
 8007cae:	44bc      	add	ip, r7
 8007cb0:	4463      	add	r3, ip
 8007cb2:	22c4      	movs	r2, #196	; 0xc4
 8007cb4:	5a9b      	ldrh	r3, [r3, r2]
 8007cb6:	2b0c      	cmp	r3, #12
 8007cb8:	d004      	beq.n	8007cc4 <astronode_send_cmd_rr+0x130>
            {
                send_debug_logs("Command size error");
 8007cba:	4b67      	ldr	r3, [pc, #412]	; (8007e58 <astronode_send_cmd_rr+0x2c4>)
 8007cbc:	0018      	movs	r0, r3
 8007cbe:	f7fb f823 	bl	8002d08 <send_debug_logs>
                return;
 8007cc2:	e0b6      	b.n	8007e32 <astronode_send_cmd_rr+0x29e>
            }

            char command_content[answer.payload_len];
 8007cc4:	4b61      	ldr	r3, [pc, #388]	; (8007e4c <astronode_send_cmd_rr+0x2b8>)
 8007cc6:	22f8      	movs	r2, #248	; 0xf8
 8007cc8:	0052      	lsls	r2, r2, #1
 8007cca:	189b      	adds	r3, r3, r2
 8007ccc:	2218      	movs	r2, #24
 8007cce:	4694      	mov	ip, r2
 8007cd0:	44bc      	add	ip, r7
 8007cd2:	4463      	add	r3, ip
 8007cd4:	22c4      	movs	r2, #196	; 0xc4
 8007cd6:	5a9b      	ldrh	r3, [r3, r2]
 8007cd8:	001a      	movs	r2, r3
 8007cda:	3a01      	subs	r2, #1
 8007cdc:	21f2      	movs	r1, #242	; 0xf2
 8007cde:	0049      	lsls	r1, r1, #1
 8007ce0:	2018      	movs	r0, #24
 8007ce2:	1809      	adds	r1, r1, r0
 8007ce4:	19c9      	adds	r1, r1, r7
 8007ce6:	600a      	str	r2, [r1, #0]
 8007ce8:	001c      	movs	r4, r3
 8007cea:	2200      	movs	r2, #0
 8007cec:	0015      	movs	r5, r2
 8007cee:	0020      	movs	r0, r4
 8007cf0:	0029      	movs	r1, r5
 8007cf2:	0004      	movs	r4, r0
 8007cf4:	0f62      	lsrs	r2, r4, #29
 8007cf6:	000c      	movs	r4, r1
 8007cf8:	00e4      	lsls	r4, r4, #3
 8007cfa:	617c      	str	r4, [r7, #20]
 8007cfc:	697c      	ldr	r4, [r7, #20]
 8007cfe:	4314      	orrs	r4, r2
 8007d00:	617c      	str	r4, [r7, #20]
 8007d02:	0001      	movs	r1, r0
 8007d04:	00c9      	lsls	r1, r1, #3
 8007d06:	6139      	str	r1, [r7, #16]
 8007d08:	603b      	str	r3, [r7, #0]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	607a      	str	r2, [r7, #4]
 8007d0e:	6838      	ldr	r0, [r7, #0]
 8007d10:	6879      	ldr	r1, [r7, #4]
 8007d12:	0004      	movs	r4, r0
 8007d14:	0f62      	lsrs	r2, r4, #29
 8007d16:	000c      	movs	r4, r1
 8007d18:	00e4      	lsls	r4, r4, #3
 8007d1a:	60fc      	str	r4, [r7, #12]
 8007d1c:	68fc      	ldr	r4, [r7, #12]
 8007d1e:	4314      	orrs	r4, r2
 8007d20:	60fc      	str	r4, [r7, #12]
 8007d22:	0001      	movs	r1, r0
 8007d24:	00ca      	lsls	r2, r1, #3
 8007d26:	60ba      	str	r2, [r7, #8]
 8007d28:	3307      	adds	r3, #7
 8007d2a:	08db      	lsrs	r3, r3, #3
 8007d2c:	00db      	lsls	r3, r3, #3
 8007d2e:	4669      	mov	r1, sp
 8007d30:	1acb      	subs	r3, r1, r3
 8007d32:	469d      	mov	sp, r3
 8007d34:	466b      	mov	r3, sp
 8007d36:	3300      	adds	r3, #0
 8007d38:	20f0      	movs	r0, #240	; 0xf0
 8007d3a:	0040      	lsls	r0, r0, #1
 8007d3c:	2218      	movs	r2, #24
 8007d3e:	1882      	adds	r2, r0, r2
 8007d40:	19d1      	adds	r1, r2, r7
 8007d42:	600b      	str	r3, [r1, #0]
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 8007d44:	4b41      	ldr	r3, [pc, #260]	; (8007e4c <astronode_send_cmd_rr+0x2b8>)
 8007d46:	22f8      	movs	r2, #248	; 0xf8
 8007d48:	0052      	lsls	r2, r2, #1
 8007d4a:	189b      	adds	r3, r3, r2
 8007d4c:	2218      	movs	r2, #24
 8007d4e:	4694      	mov	ip, r2
 8007d50:	44bc      	add	ip, r7
 8007d52:	4463      	add	r3, ip
 8007d54:	22c4      	movs	r2, #196	; 0xc4
 8007d56:	5a9b      	ldrh	r3, [r3, r2]
 8007d58:	3b03      	subs	r3, #3
 8007d5a:	0019      	movs	r1, r3
 8007d5c:	2350      	movs	r3, #80	; 0x50
 8007d5e:	2218      	movs	r2, #24
 8007d60:	189b      	adds	r3, r3, r2
 8007d62:	19db      	adds	r3, r3, r7
 8007d64:	3305      	adds	r3, #5
 8007d66:	4a3d      	ldr	r2, [pc, #244]	; (8007e5c <astronode_send_cmd_rr+0x2c8>)
 8007d68:	2418      	movs	r4, #24
 8007d6a:	1900      	adds	r0, r0, r4
 8007d6c:	19c0      	adds	r0, r0, r7
 8007d6e:	6800      	ldr	r0, [r0, #0]
 8007d70:	f002 fe54 	bl	800aa1c <snprintf>
 8007d74:	0002      	movs	r2, r0
 8007d76:	23ef      	movs	r3, #239	; 0xef
 8007d78:	005b      	lsls	r3, r3, #1
 8007d7a:	2118      	movs	r1, #24
 8007d7c:	185b      	adds	r3, r3, r1
 8007d7e:	19db      	adds	r3, r3, r7
 8007d80:	801a      	strh	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8007d82:	23f0      	movs	r3, #240	; 0xf0
 8007d84:	33ff      	adds	r3, #255	; 0xff
 8007d86:	2218      	movs	r2, #24
 8007d88:	189b      	adds	r3, r3, r2
 8007d8a:	19db      	adds	r3, r3, r7
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	701a      	strb	r2, [r3, #0]
 8007d90:	e024      	b.n	8007ddc <astronode_send_cmd_rr+0x248>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 8007d92:	23f0      	movs	r3, #240	; 0xf0
 8007d94:	33ff      	adds	r3, #255	; 0xff
 8007d96:	2218      	movs	r2, #24
 8007d98:	189b      	adds	r3, r3, r2
 8007d9a:	19db      	adds	r3, r3, r7
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	22f0      	movs	r2, #240	; 0xf0
 8007da0:	0052      	lsls	r2, r2, #1
 8007da2:	2118      	movs	r1, #24
 8007da4:	1852      	adds	r2, r2, r1
 8007da6:	19d2      	adds	r2, r2, r7
 8007da8:	6812      	ldr	r2, [r2, #0]
 8007daa:	5cd3      	ldrb	r3, [r2, r3]
 8007dac:	1c5a      	adds	r2, r3, #1
 8007dae:	4b2c      	ldr	r3, [pc, #176]	; (8007e60 <astronode_send_cmd_rr+0x2cc>)
 8007db0:	18d3      	adds	r3, r2, r3
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	001a      	movs	r2, r3
 8007db6:	2397      	movs	r3, #151	; 0x97
 8007db8:	4013      	ands	r3, r2
 8007dba:	d104      	bne.n	8007dc6 <astronode_send_cmd_rr+0x232>
                {
                    send_debug_logs("Command contains non printable characters");
 8007dbc:	4b29      	ldr	r3, [pc, #164]	; (8007e64 <astronode_send_cmd_rr+0x2d0>)
 8007dbe:	0018      	movs	r0, r3
 8007dc0:	f7fa ffa2 	bl	8002d08 <send_debug_logs>
                    return;
 8007dc4:	e035      	b.n	8007e32 <astronode_send_cmd_rr+0x29e>
            for (uint8_t index = 0; index < command_content_size; index++)
 8007dc6:	21f0      	movs	r1, #240	; 0xf0
 8007dc8:	31ff      	adds	r1, #255	; 0xff
 8007dca:	2318      	movs	r3, #24
 8007dcc:	18cb      	adds	r3, r1, r3
 8007dce:	19db      	adds	r3, r3, r7
 8007dd0:	781a      	ldrb	r2, [r3, #0]
 8007dd2:	2318      	movs	r3, #24
 8007dd4:	18cb      	adds	r3, r1, r3
 8007dd6:	19db      	adds	r3, r3, r7
 8007dd8:	3201      	adds	r2, #1
 8007dda:	701a      	strb	r2, [r3, #0]
 8007ddc:	23f0      	movs	r3, #240	; 0xf0
 8007dde:	33ff      	adds	r3, #255	; 0xff
 8007de0:	2218      	movs	r2, #24
 8007de2:	189b      	adds	r3, r3, r2
 8007de4:	19db      	adds	r3, r3, r7
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	22ef      	movs	r2, #239	; 0xef
 8007dec:	0052      	lsls	r2, r2, #1
 8007dee:	2118      	movs	r1, #24
 8007df0:	1852      	adds	r2, r2, r1
 8007df2:	19d2      	adds	r2, r2, r7
 8007df4:	8812      	ldrh	r2, [r2, #0]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d8cb      	bhi.n	8007d92 <astronode_send_cmd_rr+0x1fe>
                }
            }
            send_debug_logs("Command content is: ");
 8007dfa:	4b1b      	ldr	r3, [pc, #108]	; (8007e68 <astronode_send_cmd_rr+0x2d4>)
 8007dfc:	0018      	movs	r0, r3
 8007dfe:	f7fa ff83 	bl	8002d08 <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 8007e02:	2350      	movs	r3, #80	; 0x50
 8007e04:	2218      	movs	r2, #24
 8007e06:	189b      	adds	r3, r3, r2
 8007e08:	19db      	adds	r3, r3, r7
 8007e0a:	1d5a      	adds	r2, r3, #5
 8007e0c:	4917      	ldr	r1, [pc, #92]	; (8007e6c <astronode_send_cmd_rr+0x2d8>)
 8007e0e:	24f0      	movs	r4, #240	; 0xf0
 8007e10:	0064      	lsls	r4, r4, #1
 8007e12:	2318      	movs	r3, #24
 8007e14:	18e3      	adds	r3, r4, r3
 8007e16:	19db      	adds	r3, r3, r7
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	0018      	movs	r0, r3
 8007e1c:	f002 fe32 	bl	800aa84 <sprintf>
            send_debug_logs(command_content);
 8007e20:	2318      	movs	r3, #24
 8007e22:	18e3      	adds	r3, r4, r3
 8007e24:	19db      	adds	r3, r3, r7
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	0018      	movs	r0, r3
 8007e2a:	f7fa ff6d 	bl	8002d08 <send_debug_logs>
 8007e2e:	46b5      	mov	sp, r6
 8007e30:	e005      	b.n	8007e3e <astronode_send_cmd_rr+0x2aa>
                return;
 8007e32:	46b5      	mov	sp, r6
 8007e34:	e003      	b.n	8007e3e <astronode_send_cmd_rr+0x2aa>
        }
        else
        {
            send_debug_logs("No command available.");
 8007e36:	4b0e      	ldr	r3, [pc, #56]	; (8007e70 <astronode_send_cmd_rr+0x2dc>)
 8007e38:	0018      	movs	r0, r3
 8007e3a:	f7fa ff65 	bl	8002d08 <send_debug_logs>
        }
    }
}
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	2383      	movs	r3, #131	; 0x83
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	449d      	add	sp, r3
 8007e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e48:	fffffdf4 	.word	0xfffffdf4
 8007e4c:	fffffe60 	.word	0xfffffe60
 8007e50:	0801266c 	.word	0x0801266c
 8007e54:	08012688 	.word	0x08012688
 8007e58:	080126d8 	.word	0x080126d8
 8007e5c:	08011d18 	.word	0x08011d18
 8007e60:	080130e8 	.word	0x080130e8
 8007e64:	080126ec 	.word	0x080126ec
 8007e68:	08012718 	.word	0x08012718
 8007e6c:	08012730 	.word	0x08012730
 8007e70:	08012734 	.word	0x08012734

08007e74 <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 8007e78:	4b02      	ldr	r3, [pc, #8]	; (8007e84 <is_sak_available+0x10>)
 8007e7a:	781b      	ldrb	r3, [r3, #0]
}
 8007e7c:	0018      	movs	r0, r3
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	46c0      	nop			; (mov r8, r8)
 8007e84:	20000b14 	.word	0x20000b14

08007e88 <is_astronode_reset>:

bool is_astronode_reset()
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8007e8c:	4b02      	ldr	r3, [pc, #8]	; (8007e98 <is_astronode_reset+0x10>)
 8007e8e:	781b      	ldrb	r3, [r3, #0]
}
 8007e90:	0018      	movs	r0, r3
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	46c0      	nop			; (mov r8, r8)
 8007e98:	20000b15 	.word	0x20000b15

08007e9c <is_command_available>:

bool is_command_available()
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	af00      	add	r7, sp, #0
    return g_is_command_available;
 8007ea0:	4b02      	ldr	r3, [pc, #8]	; (8007eac <is_command_available+0x10>)
 8007ea2:	781b      	ldrb	r3, [r3, #0]
}
 8007ea4:	0018      	movs	r0, r3
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	46c0      	nop			; (mov r8, r8)
 8007eac:	20000b16 	.word	0x20000b16

08007eb0 <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	0002      	movs	r2, r0
 8007eb8:	6039      	str	r1, [r7, #0]
 8007eba:	1dfb      	adds	r3, r7, #7
 8007ebc:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 8007ebe:	1dfb      	adds	r3, r7, #7
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	2b2f      	cmp	r3, #47	; 0x2f
 8007ec4:	d90b      	bls.n	8007ede <ascii_to_value+0x2e>
 8007ec6:	1dfb      	adds	r3, r7, #7
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	2b39      	cmp	r3, #57	; 0x39
 8007ecc:	d807      	bhi.n	8007ede <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 8007ece:	1dfb      	adds	r3, r7, #7
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	3b30      	subs	r3, #48	; 0x30
 8007ed4:	b2da      	uxtb	r2, r3
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	701a      	strb	r2, [r3, #0]
        return true;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e010      	b.n	8007f00 <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 8007ede:	1dfb      	adds	r3, r7, #7
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	2b40      	cmp	r3, #64	; 0x40
 8007ee4:	d90b      	bls.n	8007efe <ascii_to_value+0x4e>
 8007ee6:	1dfb      	adds	r3, r7, #7
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	2b46      	cmp	r3, #70	; 0x46
 8007eec:	d807      	bhi.n	8007efe <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 8007eee:	1dfb      	adds	r3, r7, #7
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	3b37      	subs	r3, #55	; 0x37
 8007ef4:	b2da      	uxtb	r2, r3
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	701a      	strb	r2, [r3, #0]
        return true;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e000      	b.n	8007f00 <ascii_to_value+0x50>
    }
    else
    {
        return false;
 8007efe:	2300      	movs	r3, #0
    }
}
 8007f00:	0018      	movs	r0, r3
 8007f02:	46bd      	mov	sp, r7
 8007f04:	b002      	add	sp, #8
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8007f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 8007f12:	250e      	movs	r5, #14
 8007f14:	197b      	adds	r3, r7, r5
 8007f16:	2200      	movs	r2, #0
 8007f18:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 8007f1a:	197b      	adds	r3, r7, r5
 8007f1c:	881b      	ldrh	r3, [r3, #0]
 8007f1e:	197a      	adds	r2, r7, r5
 8007f20:	1c59      	adds	r1, r3, #1
 8007f22:	8011      	strh	r1, [r2, #0]
 8007f24:	001a      	movs	r2, r3
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	189b      	adds	r3, r3, r2
 8007f2a:	2202      	movs	r2, #2
 8007f2c:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	260a      	movs	r6, #10
 8007f32:	19bc      	adds	r4, r7, r6
 8007f34:	4a44      	ldr	r2, [pc, #272]	; (8008048 <astronode_create_request_transport+0x140>)
 8007f36:	2101      	movs	r1, #1
 8007f38:	0018      	movs	r0, r3
 8007f3a:	f000 fa7d 	bl	8008438 <calculate_crc>
 8007f3e:	0003      	movs	r3, r0
 8007f40:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	1c58      	adds	r0, r3, #1
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	22c4      	movs	r2, #196	; 0xc4
 8007f4a:	5a99      	ldrh	r1, [r3, r2]
 8007f4c:	19bc      	adds	r4, r7, r6
 8007f4e:	19bb      	adds	r3, r7, r6
 8007f50:	881b      	ldrh	r3, [r3, #0]
 8007f52:	001a      	movs	r2, r3
 8007f54:	f000 fa70 	bl	8008438 <calculate_crc>
 8007f58:	0003      	movs	r3, r0
 8007f5a:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8007f5c:	19bb      	adds	r3, r7, r6
 8007f5e:	881b      	ldrh	r3, [r3, #0]
 8007f60:	021b      	lsls	r3, r3, #8
 8007f62:	b21a      	sxth	r2, r3
 8007f64:	0031      	movs	r1, r6
 8007f66:	19bb      	adds	r3, r7, r6
 8007f68:	881b      	ldrh	r3, [r3, #0]
 8007f6a:	0a1b      	lsrs	r3, r3, #8
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	b21b      	sxth	r3, r3
 8007f70:	4313      	orrs	r3, r2
 8007f72:	b21a      	sxth	r2, r3
 8007f74:	187b      	adds	r3, r7, r1
 8007f76:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	7818      	ldrb	r0, [r3, #0]
 8007f7c:	197b      	adds	r3, r7, r5
 8007f7e:	881b      	ldrh	r3, [r3, #0]
 8007f80:	683a      	ldr	r2, [r7, #0]
 8007f82:	18d3      	adds	r3, r2, r3
 8007f84:	0019      	movs	r1, r3
 8007f86:	f000 fbeb 	bl	8008760 <uint8_to_ascii_buffer>
    index += 2;
 8007f8a:	197b      	adds	r3, r7, r5
 8007f8c:	197a      	adds	r2, r7, r5
 8007f8e:	8812      	ldrh	r2, [r2, #0]
 8007f90:	3202      	adds	r2, #2
 8007f92:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8007f94:	230c      	movs	r3, #12
 8007f96:	18fb      	adds	r3, r7, r3
 8007f98:	2200      	movs	r2, #0
 8007f9a:	801a      	strh	r2, [r3, #0]
 8007f9c:	e017      	b.n	8007fce <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 8007f9e:	240c      	movs	r4, #12
 8007fa0:	193b      	adds	r3, r7, r4
 8007fa2:	881b      	ldrh	r3, [r3, #0]
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	18d3      	adds	r3, r2, r3
 8007fa8:	7858      	ldrb	r0, [r3, #1]
 8007faa:	250e      	movs	r5, #14
 8007fac:	197b      	adds	r3, r7, r5
 8007fae:	881b      	ldrh	r3, [r3, #0]
 8007fb0:	683a      	ldr	r2, [r7, #0]
 8007fb2:	18d3      	adds	r3, r2, r3
 8007fb4:	0019      	movs	r1, r3
 8007fb6:	f000 fbd3 	bl	8008760 <uint8_to_ascii_buffer>
        index += 2;
 8007fba:	197b      	adds	r3, r7, r5
 8007fbc:	197a      	adds	r2, r7, r5
 8007fbe:	8812      	ldrh	r2, [r2, #0]
 8007fc0:	3202      	adds	r2, #2
 8007fc2:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8007fc4:	193b      	adds	r3, r7, r4
 8007fc6:	881a      	ldrh	r2, [r3, #0]
 8007fc8:	193b      	adds	r3, r7, r4
 8007fca:	3201      	adds	r2, #1
 8007fcc:	801a      	strh	r2, [r3, #0]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	22c4      	movs	r2, #196	; 0xc4
 8007fd2:	5a9b      	ldrh	r3, [r3, r2]
 8007fd4:	220c      	movs	r2, #12
 8007fd6:	18ba      	adds	r2, r7, r2
 8007fd8:	8812      	ldrh	r2, [r2, #0]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d3df      	bcc.n	8007f9e <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 8007fde:	250a      	movs	r5, #10
 8007fe0:	197b      	adds	r3, r7, r5
 8007fe2:	881b      	ldrh	r3, [r3, #0]
 8007fe4:	0a1b      	lsrs	r3, r3, #8
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	b2d8      	uxtb	r0, r3
 8007fea:	240e      	movs	r4, #14
 8007fec:	193b      	adds	r3, r7, r4
 8007fee:	881b      	ldrh	r3, [r3, #0]
 8007ff0:	683a      	ldr	r2, [r7, #0]
 8007ff2:	18d3      	adds	r3, r2, r3
 8007ff4:	0019      	movs	r1, r3
 8007ff6:	f000 fbb3 	bl	8008760 <uint8_to_ascii_buffer>
    index += 2;
 8007ffa:	0021      	movs	r1, r4
 8007ffc:	187b      	adds	r3, r7, r1
 8007ffe:	187a      	adds	r2, r7, r1
 8008000:	8812      	ldrh	r2, [r2, #0]
 8008002:	3202      	adds	r2, #2
 8008004:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 8008006:	197b      	adds	r3, r7, r5
 8008008:	881b      	ldrh	r3, [r3, #0]
 800800a:	b2d8      	uxtb	r0, r3
 800800c:	000c      	movs	r4, r1
 800800e:	187b      	adds	r3, r7, r1
 8008010:	881b      	ldrh	r3, [r3, #0]
 8008012:	683a      	ldr	r2, [r7, #0]
 8008014:	18d3      	adds	r3, r2, r3
 8008016:	0019      	movs	r1, r3
 8008018:	f000 fba2 	bl	8008760 <uint8_to_ascii_buffer>
    index += 2;
 800801c:	0020      	movs	r0, r4
 800801e:	183b      	adds	r3, r7, r0
 8008020:	183a      	adds	r2, r7, r0
 8008022:	8812      	ldrh	r2, [r2, #0]
 8008024:	3202      	adds	r2, #2
 8008026:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 8008028:	183b      	adds	r3, r7, r0
 800802a:	881b      	ldrh	r3, [r3, #0]
 800802c:	183a      	adds	r2, r7, r0
 800802e:	1c59      	adds	r1, r3, #1
 8008030:	8011      	strh	r1, [r2, #0]
 8008032:	001a      	movs	r2, r3
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	189b      	adds	r3, r3, r2
 8008038:	2203      	movs	r2, #3
 800803a:	701a      	strb	r2, [r3, #0]

    return index;
 800803c:	183b      	adds	r3, r7, r0
 800803e:	881b      	ldrh	r3, [r3, #0]
}
 8008040:	0018      	movs	r0, r3
 8008042:	46bd      	mov	sp, r7
 8008044:	b005      	add	sp, #20
 8008046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008048:	0000ffff 	.word	0x0000ffff

0800804c <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 800804c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800804e:	b089      	sub	sp, #36	; 0x24
 8008050:	af00      	add	r7, sp, #0
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	607a      	str	r2, [r7, #4]
 8008056:	230a      	movs	r3, #10
 8008058:	18fb      	adds	r3, r7, r3
 800805a:	1c0a      	adds	r2, r1, #0
 800805c:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	2b02      	cmp	r3, #2
 8008064:	d005      	beq.n	8008072 <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 8008066:	4bbd      	ldr	r3, [pc, #756]	; (800835c <astronode_decode_answer_transport+0x310>)
 8008068:	0018      	movs	r0, r3
 800806a:	f7fa fe4d 	bl	8002d08 <send_debug_logs>
        return RS_FAILURE;
 800806e:	2300      	movs	r3, #0
 8008070:	e170      	b.n	8008354 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 8008072:	210a      	movs	r1, #10
 8008074:	187b      	adds	r3, r7, r1
 8008076:	881b      	ldrh	r3, [r3, #0]
 8008078:	2201      	movs	r2, #1
 800807a:	4013      	ands	r3, r2
 800807c:	b29b      	uxth	r3, r3
 800807e:	2b00      	cmp	r3, #0
 8008080:	d103      	bne.n	800808a <astronode_decode_answer_transport+0x3e>
 8008082:	187b      	adds	r3, r7, r1
 8008084:	881b      	ldrh	r3, [r3, #0]
 8008086:	2b07      	cmp	r3, #7
 8008088:	d805      	bhi.n	8008096 <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 800808a:	4bb5      	ldr	r3, [pc, #724]	; (8008360 <astronode_decode_answer_transport+0x314>)
 800808c:	0018      	movs	r0, r3
 800808e:	f7fa fe3b 	bl	8002d08 <send_debug_logs>
        return RS_FAILURE;
 8008092:	2300      	movs	r3, #0
 8008094:	e15e      	b.n	8008354 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 8008096:	230a      	movs	r3, #10
 8008098:	18fb      	adds	r3, r7, r3
 800809a:	881b      	ldrh	r3, [r3, #0]
 800809c:	3b08      	subs	r3, #8
 800809e:	2b00      	cmp	r3, #0
 80080a0:	da00      	bge.n	80080a4 <astronode_decode_answer_transport+0x58>
 80080a2:	3301      	adds	r3, #1
 80080a4:	105b      	asrs	r3, r3, #1
 80080a6:	b299      	uxth	r1, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	22c4      	movs	r2, #196	; 0xc4
 80080ac:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 80080ae:	230a      	movs	r3, #10
 80080b0:	18fb      	adds	r3, r7, r3
 80080b2:	881b      	ldrh	r3, [r3, #0]
 80080b4:	3b01      	subs	r3, #1
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	18d3      	adds	r3, r2, r3
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	2b03      	cmp	r3, #3
 80080be:	d005      	beq.n	80080cc <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 80080c0:	4ba8      	ldr	r3, [pc, #672]	; (8008364 <astronode_decode_answer_transport+0x318>)
 80080c2:	0018      	movs	r0, r3
 80080c4:	f7fa fe20 	bl	8002d08 <send_debug_logs>
        return RS_FAILURE;
 80080c8:	2300      	movs	r3, #0
 80080ca:	e143      	b.n	8008354 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 80080cc:	2117      	movs	r1, #23
 80080ce:	187b      	adds	r3, r7, r1
 80080d0:	2200      	movs	r2, #0
 80080d2:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 80080d4:	2416      	movs	r4, #22
 80080d6:	193b      	adds	r3, r7, r4
 80080d8:	2200      	movs	r2, #0
 80080da:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	3301      	adds	r3, #1
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	187a      	adds	r2, r7, r1
 80080e4:	0011      	movs	r1, r2
 80080e6:	0018      	movs	r0, r3
 80080e8:	f7ff fee2 	bl	8007eb0 <ascii_to_value>
 80080ec:	0003      	movs	r3, r0
 80080ee:	001a      	movs	r2, r3
 80080f0:	2301      	movs	r3, #1
 80080f2:	4053      	eors	r3, r2
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d10e      	bne.n	8008118 <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	3302      	adds	r3, #2
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	193a      	adds	r2, r7, r4
 8008102:	0011      	movs	r1, r2
 8008104:	0018      	movs	r0, r3
 8008106:	f7ff fed3 	bl	8007eb0 <ascii_to_value>
 800810a:	0003      	movs	r3, r0
 800810c:	001a      	movs	r2, r3
 800810e:	2301      	movs	r3, #1
 8008110:	4053      	eors	r3, r2
 8008112:	b2db      	uxtb	r3, r3
 8008114:	2b00      	cmp	r3, #0
 8008116:	d005      	beq.n	8008124 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008118:	4b93      	ldr	r3, [pc, #588]	; (8008368 <astronode_decode_answer_transport+0x31c>)
 800811a:	0018      	movs	r0, r3
 800811c:	f7fa fdf4 	bl	8002d08 <send_debug_logs>
        return RS_FAILURE;
 8008120:	2300      	movs	r3, #0
 8008122:	e117      	b.n	8008354 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 8008124:	2317      	movs	r3, #23
 8008126:	18fb      	adds	r3, r7, r3
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	011b      	lsls	r3, r3, #4
 800812c:	b2da      	uxtb	r2, r3
 800812e:	2316      	movs	r3, #22
 8008130:	18fb      	adds	r3, r7, r3
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	18d3      	adds	r3, r2, r3
 8008136:	b2da      	uxtb	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 800813c:	231e      	movs	r3, #30
 800813e:	18fb      	adds	r3, r7, r3
 8008140:	2203      	movs	r2, #3
 8008142:	801a      	strh	r2, [r3, #0]
 8008144:	231c      	movs	r3, #28
 8008146:	18fb      	adds	r3, r7, r3
 8008148:	2200      	movs	r2, #0
 800814a:	801a      	strh	r2, [r3, #0]
 800814c:	e045      	b.n	80081da <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 800814e:	241e      	movs	r4, #30
 8008150:	193b      	adds	r3, r7, r4
 8008152:	881b      	ldrh	r3, [r3, #0]
 8008154:	68fa      	ldr	r2, [r7, #12]
 8008156:	18d3      	adds	r3, r2, r3
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	2217      	movs	r2, #23
 800815c:	18ba      	adds	r2, r7, r2
 800815e:	0011      	movs	r1, r2
 8008160:	0018      	movs	r0, r3
 8008162:	f7ff fea5 	bl	8007eb0 <ascii_to_value>
 8008166:	0003      	movs	r3, r0
 8008168:	001a      	movs	r2, r3
 800816a:	2301      	movs	r3, #1
 800816c:	4053      	eors	r3, r2
 800816e:	b2db      	uxtb	r3, r3
 8008170:	2b00      	cmp	r3, #0
 8008172:	d112      	bne.n	800819a <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 8008174:	193b      	adds	r3, r7, r4
 8008176:	881b      	ldrh	r3, [r3, #0]
 8008178:	3301      	adds	r3, #1
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	18d3      	adds	r3, r2, r3
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	2216      	movs	r2, #22
 8008182:	18ba      	adds	r2, r7, r2
 8008184:	0011      	movs	r1, r2
 8008186:	0018      	movs	r0, r3
 8008188:	f7ff fe92 	bl	8007eb0 <ascii_to_value>
 800818c:	0003      	movs	r3, r0
 800818e:	001a      	movs	r2, r3
 8008190:	2301      	movs	r3, #1
 8008192:	4053      	eors	r3, r2
 8008194:	b2db      	uxtb	r3, r3
 8008196:	2b00      	cmp	r3, #0
 8008198:	d005      	beq.n	80081a6 <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800819a:	4b73      	ldr	r3, [pc, #460]	; (8008368 <astronode_decode_answer_transport+0x31c>)
 800819c:	0018      	movs	r0, r3
 800819e:	f7fa fdb3 	bl	8002d08 <send_debug_logs>
            return RS_FAILURE;
 80081a2:	2300      	movs	r3, #0
 80081a4:	e0d6      	b.n	8008354 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 80081a6:	2317      	movs	r3, #23
 80081a8:	18fb      	adds	r3, r7, r3
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	011b      	lsls	r3, r3, #4
 80081ae:	b2d9      	uxtb	r1, r3
 80081b0:	2316      	movs	r3, #22
 80081b2:	18fb      	adds	r3, r7, r3
 80081b4:	781a      	ldrb	r2, [r3, #0]
 80081b6:	201c      	movs	r0, #28
 80081b8:	183b      	adds	r3, r7, r0
 80081ba:	881b      	ldrh	r3, [r3, #0]
 80081bc:	1838      	adds	r0, r7, r0
 80081be:	1c5c      	adds	r4, r3, #1
 80081c0:	8004      	strh	r4, [r0, #0]
 80081c2:	0018      	movs	r0, r3
 80081c4:	188b      	adds	r3, r1, r2
 80081c6:	b2da      	uxtb	r2, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	181b      	adds	r3, r3, r0
 80081cc:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 80081ce:	221e      	movs	r2, #30
 80081d0:	18bb      	adds	r3, r7, r2
 80081d2:	18ba      	adds	r2, r7, r2
 80081d4:	8812      	ldrh	r2, [r2, #0]
 80081d6:	3202      	adds	r2, #2
 80081d8:	801a      	strh	r2, [r3, #0]
 80081da:	231e      	movs	r3, #30
 80081dc:	18fb      	adds	r3, r7, r3
 80081de:	881a      	ldrh	r2, [r3, #0]
 80081e0:	260a      	movs	r6, #10
 80081e2:	19bb      	adds	r3, r7, r6
 80081e4:	881b      	ldrh	r3, [r3, #0]
 80081e6:	3b05      	subs	r3, #5
 80081e8:	429a      	cmp	r2, r3
 80081ea:	dbb0      	blt.n	800814e <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	251a      	movs	r5, #26
 80081f0:	197c      	adds	r4, r7, r5
 80081f2:	4a5e      	ldr	r2, [pc, #376]	; (800836c <astronode_decode_answer_transport+0x320>)
 80081f4:	2101      	movs	r1, #1
 80081f6:	0018      	movs	r0, r3
 80081f8:	f000 f91e 	bl	8008438 <calculate_crc>
 80081fc:	0003      	movs	r3, r0
 80081fe:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	1c58      	adds	r0, r3, #1
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	22c4      	movs	r2, #196	; 0xc4
 8008208:	5a99      	ldrh	r1, [r3, r2]
 800820a:	197c      	adds	r4, r7, r5
 800820c:	197b      	adds	r3, r7, r5
 800820e:	881b      	ldrh	r3, [r3, #0]
 8008210:	001a      	movs	r2, r3
 8008212:	f000 f911 	bl	8008438 <calculate_crc>
 8008216:	0003      	movs	r3, r0
 8008218:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 800821a:	197b      	adds	r3, r7, r5
 800821c:	881b      	ldrh	r3, [r3, #0]
 800821e:	021b      	lsls	r3, r3, #8
 8008220:	b21a      	sxth	r2, r3
 8008222:	0029      	movs	r1, r5
 8008224:	197b      	adds	r3, r7, r5
 8008226:	881b      	ldrh	r3, [r3, #0]
 8008228:	0a1b      	lsrs	r3, r3, #8
 800822a:	b29b      	uxth	r3, r3
 800822c:	b21b      	sxth	r3, r3
 800822e:	4313      	orrs	r3, r2
 8008230:	b21a      	sxth	r2, r3
 8008232:	187b      	adds	r3, r7, r1
 8008234:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 8008236:	19bb      	adds	r3, r7, r6
 8008238:	881b      	ldrh	r3, [r3, #0]
 800823a:	3b05      	subs	r3, #5
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	18d3      	adds	r3, r2, r3
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	2217      	movs	r2, #23
 8008244:	18ba      	adds	r2, r7, r2
 8008246:	0011      	movs	r1, r2
 8008248:	0018      	movs	r0, r3
 800824a:	f7ff fe31 	bl	8007eb0 <ascii_to_value>
 800824e:	0003      	movs	r3, r0
 8008250:	001a      	movs	r2, r3
 8008252:	2301      	movs	r3, #1
 8008254:	4053      	eors	r3, r2
 8008256:	b2db      	uxtb	r3, r3
 8008258:	2b00      	cmp	r3, #0
 800825a:	d112      	bne.n	8008282 <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 800825c:	19bb      	adds	r3, r7, r6
 800825e:	881b      	ldrh	r3, [r3, #0]
 8008260:	3b04      	subs	r3, #4
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	18d3      	adds	r3, r2, r3
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	2216      	movs	r2, #22
 800826a:	18ba      	adds	r2, r7, r2
 800826c:	0011      	movs	r1, r2
 800826e:	0018      	movs	r0, r3
 8008270:	f7ff fe1e 	bl	8007eb0 <ascii_to_value>
 8008274:	0003      	movs	r3, r0
 8008276:	001a      	movs	r2, r3
 8008278:	2301      	movs	r3, #1
 800827a:	4053      	eors	r3, r2
 800827c:	b2db      	uxtb	r3, r3
 800827e:	2b00      	cmp	r3, #0
 8008280:	d005      	beq.n	800828e <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008282:	4b39      	ldr	r3, [pc, #228]	; (8008368 <astronode_decode_answer_transport+0x31c>)
 8008284:	0018      	movs	r0, r3
 8008286:	f7fa fd3f 	bl	8002d08 <send_debug_logs>
        return RS_FAILURE;
 800828a:	2300      	movs	r3, #0
 800828c:	e062      	b.n	8008354 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 800828e:	2017      	movs	r0, #23
 8008290:	183b      	adds	r3, r7, r0
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	b29b      	uxth	r3, r3
 8008296:	031b      	lsls	r3, r3, #12
 8008298:	b299      	uxth	r1, r3
 800829a:	2416      	movs	r4, #22
 800829c:	193b      	adds	r3, r7, r4
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	021b      	lsls	r3, r3, #8
 80082a4:	b29a      	uxth	r2, r3
 80082a6:	2318      	movs	r3, #24
 80082a8:	18fb      	adds	r3, r7, r3
 80082aa:	188a      	adds	r2, r1, r2
 80082ac:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 80082ae:	250a      	movs	r5, #10
 80082b0:	197b      	adds	r3, r7, r5
 80082b2:	881b      	ldrh	r3, [r3, #0]
 80082b4:	3b03      	subs	r3, #3
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	18d3      	adds	r3, r2, r3
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	183a      	adds	r2, r7, r0
 80082be:	0011      	movs	r1, r2
 80082c0:	0018      	movs	r0, r3
 80082c2:	f7ff fdf5 	bl	8007eb0 <ascii_to_value>
 80082c6:	0003      	movs	r3, r0
 80082c8:	001a      	movs	r2, r3
 80082ca:	2301      	movs	r3, #1
 80082cc:	4053      	eors	r3, r2
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d111      	bne.n	80082f8 <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 80082d4:	197b      	adds	r3, r7, r5
 80082d6:	881b      	ldrh	r3, [r3, #0]
 80082d8:	3b02      	subs	r3, #2
 80082da:	68fa      	ldr	r2, [r7, #12]
 80082dc:	18d3      	adds	r3, r2, r3
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	193a      	adds	r2, r7, r4
 80082e2:	0011      	movs	r1, r2
 80082e4:	0018      	movs	r0, r3
 80082e6:	f7ff fde3 	bl	8007eb0 <ascii_to_value>
 80082ea:	0003      	movs	r3, r0
 80082ec:	001a      	movs	r2, r3
 80082ee:	2301      	movs	r3, #1
 80082f0:	4053      	eors	r3, r2
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d005      	beq.n	8008304 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 80082f8:	4b1b      	ldr	r3, [pc, #108]	; (8008368 <astronode_decode_answer_transport+0x31c>)
 80082fa:	0018      	movs	r0, r3
 80082fc:	f7fa fd04 	bl	8002d08 <send_debug_logs>
        return RS_FAILURE;
 8008300:	2300      	movs	r3, #0
 8008302:	e027      	b.n	8008354 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 8008304:	2317      	movs	r3, #23
 8008306:	18fb      	adds	r3, r7, r3
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	b29b      	uxth	r3, r3
 800830c:	011b      	lsls	r3, r3, #4
 800830e:	b29a      	uxth	r2, r3
 8008310:	2316      	movs	r3, #22
 8008312:	18fb      	adds	r3, r7, r3
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	b29b      	uxth	r3, r3
 8008318:	18d3      	adds	r3, r2, r3
 800831a:	b299      	uxth	r1, r3
 800831c:	2018      	movs	r0, #24
 800831e:	183b      	adds	r3, r7, r0
 8008320:	183a      	adds	r2, r7, r0
 8008322:	8812      	ldrh	r2, [r2, #0]
 8008324:	188a      	adds	r2, r1, r2
 8008326:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 8008328:	183a      	adds	r2, r7, r0
 800832a:	231a      	movs	r3, #26
 800832c:	18fb      	adds	r3, r7, r3
 800832e:	8812      	ldrh	r2, [r2, #0]
 8008330:	881b      	ldrh	r3, [r3, #0]
 8008332:	429a      	cmp	r2, r3
 8008334:	d005      	beq.n	8008342 <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 8008336:	4b0e      	ldr	r3, [pc, #56]	; (8008370 <astronode_decode_answer_transport+0x324>)
 8008338:	0018      	movs	r0, r3
 800833a:	f7fa fce5 	bl	8002d08 <send_debug_logs>
        return RS_FAILURE;
 800833e:	2300      	movs	r3, #0
 8008340:	e008      	b.n	8008354 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	2bff      	cmp	r3, #255	; 0xff
 8008348:	d103      	bne.n	8008352 <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	0018      	movs	r0, r3
 800834e:	f000 f8c3 	bl	80084d8 <check_for_error>
    }

    return RS_SUCCESS;
 8008352:	2301      	movs	r3, #1
}
 8008354:	0018      	movs	r0, r3
 8008356:	46bd      	mov	sp, r7
 8008358:	b009      	add	sp, #36	; 0x24
 800835a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800835c:	080127c4 	.word	0x080127c4
 8008360:	08012814 	.word	0x08012814
 8008364:	08012864 	.word	0x08012864
 8008368:	080128b4 	.word	0x080128b4
 800836c:	0000ffff 	.word	0x0000ffff
 8008370:	08012900 	.word	0x08012900

08008374 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 8008374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008376:	4c2b      	ldr	r4, [pc, #172]	; (8008424 <astronode_transport_send_receive+0xb0>)
 8008378:	44a5      	add	sp, r4
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
 800837e:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8008380:	4b29      	ldr	r3, [pc, #164]	; (8008428 <astronode_transport_send_receive+0xb4>)
 8008382:	25ca      	movs	r5, #202	; 0xca
 8008384:	00ad      	lsls	r5, r5, #2
 8008386:	195b      	adds	r3, r3, r5
 8008388:	19db      	adds	r3, r3, r7
 800838a:	2200      	movs	r2, #0
 800838c:	601a      	str	r2, [r3, #0]
 800838e:	3304      	adds	r3, #4
 8008390:	22c4      	movs	r2, #196	; 0xc4
 8008392:	0052      	lsls	r2, r2, #1
 8008394:	2100      	movs	r1, #0
 8008396:	0018      	movs	r0, r3
 8008398:	f002 fc0a 	bl	800abb0 <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 800839c:	4b23      	ldr	r3, [pc, #140]	; (800842c <astronode_transport_send_receive+0xb8>)
 800839e:	195b      	adds	r3, r3, r5
 80083a0:	19db      	adds	r3, r3, r7
 80083a2:	2200      	movs	r2, #0
 80083a4:	601a      	str	r2, [r3, #0]
 80083a6:	3304      	adds	r3, #4
 80083a8:	22c4      	movs	r2, #196	; 0xc4
 80083aa:	0052      	lsls	r2, r2, #1
 80083ac:	2100      	movs	r1, #0
 80083ae:	0018      	movs	r0, r3
 80083b0:	f002 fbfe 	bl	800abb0 <memset>
    uint16_t answer_length =  0;
 80083b4:	4b1e      	ldr	r3, [pc, #120]	; (8008430 <astronode_transport_send_receive+0xbc>)
 80083b6:	195b      	adds	r3, r3, r5
 80083b8:	19db      	adds	r3, r3, r7
 80083ba:	2200      	movs	r2, #0
 80083bc:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 80083be:	4e1d      	ldr	r6, [pc, #116]	; (8008434 <astronode_transport_send_receive+0xc0>)
 80083c0:	19bc      	adds	r4, r7, r6
 80083c2:	23cc      	movs	r3, #204	; 0xcc
 80083c4:	005b      	lsls	r3, r3, #1
 80083c6:	18fa      	adds	r2, r7, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	0011      	movs	r1, r2
 80083cc:	0018      	movs	r0, r3
 80083ce:	f7ff fd9b 	bl	8007f08 <astronode_create_request_transport>
 80083d2:	0003      	movs	r3, r0
 80083d4:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 80083d6:	19bb      	adds	r3, r7, r6
 80083d8:	881a      	ldrh	r2, [r3, #0]
 80083da:	23cc      	movs	r3, #204	; 0xcc
 80083dc:	005b      	lsls	r3, r3, #1
 80083de:	18fb      	adds	r3, r7, r3
 80083e0:	0011      	movs	r1, r2
 80083e2:	0018      	movs	r0, r3
 80083e4:	f7fa fcda 	bl	8002d9c <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 80083e8:	230a      	movs	r3, #10
 80083ea:	18fa      	adds	r2, r7, r3
 80083ec:	240c      	movs	r4, #12
 80083ee:	193b      	adds	r3, r7, r4
 80083f0:	0011      	movs	r1, r2
 80083f2:	0018      	movs	r0, r3
 80083f4:	f000 f92c 	bl	8008650 <receive_astronode_answer>
 80083f8:	0003      	movs	r3, r0
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d10a      	bne.n	8008414 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 80083fe:	4b0c      	ldr	r3, [pc, #48]	; (8008430 <astronode_transport_send_receive+0xbc>)
 8008400:	195b      	adds	r3, r3, r5
 8008402:	19db      	adds	r3, r3, r7
 8008404:	8819      	ldrh	r1, [r3, #0]
 8008406:	683a      	ldr	r2, [r7, #0]
 8008408:	193b      	adds	r3, r7, r4
 800840a:	0018      	movs	r0, r3
 800840c:	f7ff fe1e 	bl	800804c <astronode_decode_answer_transport>
 8008410:	0003      	movs	r3, r0
 8008412:	e000      	b.n	8008416 <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 8008414:	2300      	movs	r3, #0
    }
}
 8008416:	0018      	movs	r0, r3
 8008418:	46bd      	mov	sp, r7
 800841a:	23cb      	movs	r3, #203	; 0xcb
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	449d      	add	sp, r3
 8008420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008422:	46c0      	nop			; (mov r8, r8)
 8008424:	fffffcd4 	.word	0xfffffcd4
 8008428:	fffffe70 	.word	0xfffffe70
 800842c:	fffffce4 	.word	0xfffffce4
 8008430:	fffffce2 	.word	0xfffffce2
 8008434:	00000326 	.word	0x00000326

08008438 <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 8008438:	b590      	push	{r4, r7, lr}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	0008      	movs	r0, r1
 8008442:	0011      	movs	r1, r2
 8008444:	1cbb      	adds	r3, r7, #2
 8008446:	1c02      	adds	r2, r0, #0
 8008448:	801a      	strh	r2, [r3, #0]
 800844a:	003b      	movs	r3, r7
 800844c:	1c0a      	adds	r2, r1, #0
 800844e:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 8008450:	230e      	movs	r3, #14
 8008452:	18fb      	adds	r3, r7, r3
 8008454:	003a      	movs	r2, r7
 8008456:	8812      	ldrh	r2, [r2, #0]
 8008458:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 800845a:	e02e      	b.n	80084ba <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 800845c:	240e      	movs	r4, #14
 800845e:	193b      	adds	r3, r7, r4
 8008460:	881b      	ldrh	r3, [r3, #0]
 8008462:	0a1b      	lsrs	r3, r3, #8
 8008464:	b299      	uxth	r1, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	1c5a      	adds	r2, r3, #1
 800846a:	607a      	str	r2, [r7, #4]
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	b29a      	uxth	r2, r3
 8008470:	200c      	movs	r0, #12
 8008472:	183b      	adds	r3, r7, r0
 8008474:	404a      	eors	r2, r1
 8008476:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 8008478:	183b      	adds	r3, r7, r0
 800847a:	881b      	ldrh	r3, [r3, #0]
 800847c:	091b      	lsrs	r3, r3, #4
 800847e:	b299      	uxth	r1, r3
 8008480:	183b      	adds	r3, r7, r0
 8008482:	183a      	adds	r2, r7, r0
 8008484:	8812      	ldrh	r2, [r2, #0]
 8008486:	404a      	eors	r2, r1
 8008488:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 800848a:	0021      	movs	r1, r4
 800848c:	187b      	adds	r3, r7, r1
 800848e:	881b      	ldrh	r3, [r3, #0]
 8008490:	021b      	lsls	r3, r3, #8
 8008492:	b21a      	sxth	r2, r3
 8008494:	183b      	adds	r3, r7, r0
 8008496:	881b      	ldrh	r3, [r3, #0]
 8008498:	031b      	lsls	r3, r3, #12
 800849a:	b21b      	sxth	r3, r3
 800849c:	4053      	eors	r3, r2
 800849e:	b21a      	sxth	r2, r3
 80084a0:	183b      	adds	r3, r7, r0
 80084a2:	881b      	ldrh	r3, [r3, #0]
 80084a4:	015b      	lsls	r3, r3, #5
 80084a6:	b21b      	sxth	r3, r3
 80084a8:	4053      	eors	r3, r2
 80084aa:	b21a      	sxth	r2, r3
 80084ac:	183b      	adds	r3, r7, r0
 80084ae:	2000      	movs	r0, #0
 80084b0:	5e1b      	ldrsh	r3, [r3, r0]
 80084b2:	4053      	eors	r3, r2
 80084b4:	b21a      	sxth	r2, r3
 80084b6:	187b      	adds	r3, r7, r1
 80084b8:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 80084ba:	1cbb      	adds	r3, r7, #2
 80084bc:	881b      	ldrh	r3, [r3, #0]
 80084be:	1cba      	adds	r2, r7, #2
 80084c0:	1e59      	subs	r1, r3, #1
 80084c2:	8011      	strh	r1, [r2, #0]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d1c9      	bne.n	800845c <calculate_crc+0x24>
    }
    return crc;
 80084c8:	230e      	movs	r3, #14
 80084ca:	18fb      	adds	r3, r7, r3
 80084cc:	881b      	ldrh	r3, [r3, #0]
}
 80084ce:	0018      	movs	r0, r3
 80084d0:	46bd      	mov	sp, r7
 80084d2:	b005      	add	sp, #20
 80084d4:	bd90      	pop	{r4, r7, pc}
	...

080084d8 <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	785b      	ldrb	r3, [r3, #1]
 80084e4:	b299      	uxth	r1, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	789b      	ldrb	r3, [r3, #2]
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	021b      	lsls	r3, r3, #8
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	200e      	movs	r0, #14
 80084f2:	183b      	adds	r3, r7, r0
 80084f4:	188a      	adds	r2, r1, r2
 80084f6:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 80084f8:	183b      	adds	r3, r7, r0
 80084fa:	881b      	ldrh	r3, [r3, #0]
 80084fc:	4a40      	ldr	r2, [pc, #256]	; (8008600 <check_for_error+0x128>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d100      	bne.n	8008504 <check_for_error+0x2c>
 8008502:	e06f      	b.n	80085e4 <check_for_error+0x10c>
 8008504:	4a3e      	ldr	r2, [pc, #248]	; (8008600 <check_for_error+0x128>)
 8008506:	4293      	cmp	r3, r2
 8008508:	dd00      	ble.n	800850c <check_for_error+0x34>
 800850a:	e070      	b.n	80085ee <check_for_error+0x116>
 800850c:	4a3d      	ldr	r2, [pc, #244]	; (8008604 <check_for_error+0x12c>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d100      	bne.n	8008514 <check_for_error+0x3c>
 8008512:	e062      	b.n	80085da <check_for_error+0x102>
 8008514:	4a3b      	ldr	r2, [pc, #236]	; (8008604 <check_for_error+0x12c>)
 8008516:	4293      	cmp	r3, r2
 8008518:	dd00      	ble.n	800851c <check_for_error+0x44>
 800851a:	e068      	b.n	80085ee <check_for_error+0x116>
 800851c:	4a3a      	ldr	r2, [pc, #232]	; (8008608 <check_for_error+0x130>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d056      	beq.n	80085d0 <check_for_error+0xf8>
 8008522:	4a39      	ldr	r2, [pc, #228]	; (8008608 <check_for_error+0x130>)
 8008524:	4293      	cmp	r3, r2
 8008526:	dd00      	ble.n	800852a <check_for_error+0x52>
 8008528:	e061      	b.n	80085ee <check_for_error+0x116>
 800852a:	4a38      	ldr	r2, [pc, #224]	; (800860c <check_for_error+0x134>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d04a      	beq.n	80085c6 <check_for_error+0xee>
 8008530:	4a36      	ldr	r2, [pc, #216]	; (800860c <check_for_error+0x134>)
 8008532:	4293      	cmp	r3, r2
 8008534:	dc5b      	bgt.n	80085ee <check_for_error+0x116>
 8008536:	4a36      	ldr	r2, [pc, #216]	; (8008610 <check_for_error+0x138>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d03f      	beq.n	80085bc <check_for_error+0xe4>
 800853c:	4a34      	ldr	r2, [pc, #208]	; (8008610 <check_for_error+0x138>)
 800853e:	4293      	cmp	r3, r2
 8008540:	dc55      	bgt.n	80085ee <check_for_error+0x116>
 8008542:	4a34      	ldr	r2, [pc, #208]	; (8008614 <check_for_error+0x13c>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d034      	beq.n	80085b2 <check_for_error+0xda>
 8008548:	4a32      	ldr	r2, [pc, #200]	; (8008614 <check_for_error+0x13c>)
 800854a:	4293      	cmp	r3, r2
 800854c:	dc4f      	bgt.n	80085ee <check_for_error+0x116>
 800854e:	4a32      	ldr	r2, [pc, #200]	; (8008618 <check_for_error+0x140>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d029      	beq.n	80085a8 <check_for_error+0xd0>
 8008554:	4a30      	ldr	r2, [pc, #192]	; (8008618 <check_for_error+0x140>)
 8008556:	4293      	cmp	r3, r2
 8008558:	dc49      	bgt.n	80085ee <check_for_error+0x116>
 800855a:	4a30      	ldr	r2, [pc, #192]	; (800861c <check_for_error+0x144>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d01e      	beq.n	800859e <check_for_error+0xc6>
 8008560:	4a2e      	ldr	r2, [pc, #184]	; (800861c <check_for_error+0x144>)
 8008562:	4293      	cmp	r3, r2
 8008564:	dc43      	bgt.n	80085ee <check_for_error+0x116>
 8008566:	2222      	movs	r2, #34	; 0x22
 8008568:	32ff      	adds	r2, #255	; 0xff
 800856a:	4293      	cmp	r3, r2
 800856c:	d012      	beq.n	8008594 <check_for_error+0xbc>
 800856e:	2291      	movs	r2, #145	; 0x91
 8008570:	0052      	lsls	r2, r2, #1
 8008572:	4293      	cmp	r3, r2
 8008574:	da3b      	bge.n	80085ee <check_for_error+0x116>
 8008576:	2b01      	cmp	r3, #1
 8008578:	d002      	beq.n	8008580 <check_for_error+0xa8>
 800857a:	2b11      	cmp	r3, #17
 800857c:	d005      	beq.n	800858a <check_for_error+0xb2>
 800857e:	e036      	b.n	80085ee <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 8008580:	4b27      	ldr	r3, [pc, #156]	; (8008620 <check_for_error+0x148>)
 8008582:	0018      	movs	r0, r3
 8008584:	f7fa fbc0 	bl	8002d08 <send_debug_logs>
            break;
 8008588:	e036      	b.n	80085f8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 800858a:	4b26      	ldr	r3, [pc, #152]	; (8008624 <check_for_error+0x14c>)
 800858c:	0018      	movs	r0, r3
 800858e:	f7fa fbbb 	bl	8002d08 <send_debug_logs>
            break;
 8008592:	e031      	b.n	80085f8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 8008594:	4b24      	ldr	r3, [pc, #144]	; (8008628 <check_for_error+0x150>)
 8008596:	0018      	movs	r0, r3
 8008598:	f7fa fbb6 	bl	8002d08 <send_debug_logs>
            break;
 800859c:	e02c      	b.n	80085f8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 800859e:	4b23      	ldr	r3, [pc, #140]	; (800862c <check_for_error+0x154>)
 80085a0:	0018      	movs	r0, r3
 80085a2:	f7fa fbb1 	bl	8002d08 <send_debug_logs>
            break;
 80085a6:	e027      	b.n	80085f8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 80085a8:	4b21      	ldr	r3, [pc, #132]	; (8008630 <check_for_error+0x158>)
 80085aa:	0018      	movs	r0, r3
 80085ac:	f7fa fbac 	bl	8002d08 <send_debug_logs>
            break;
 80085b0:	e022      	b.n	80085f8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 80085b2:	4b20      	ldr	r3, [pc, #128]	; (8008634 <check_for_error+0x15c>)
 80085b4:	0018      	movs	r0, r3
 80085b6:	f7fa fba7 	bl	8002d08 <send_debug_logs>
            break;
 80085ba:	e01d      	b.n	80085f8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 80085bc:	4b1e      	ldr	r3, [pc, #120]	; (8008638 <check_for_error+0x160>)
 80085be:	0018      	movs	r0, r3
 80085c0:	f7fa fba2 	bl	8002d08 <send_debug_logs>
            break;
 80085c4:	e018      	b.n	80085f8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 80085c6:	4b1d      	ldr	r3, [pc, #116]	; (800863c <check_for_error+0x164>)
 80085c8:	0018      	movs	r0, r3
 80085ca:	f7fa fb9d 	bl	8002d08 <send_debug_logs>
            break;
 80085ce:	e013      	b.n	80085f8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 80085d0:	4b1b      	ldr	r3, [pc, #108]	; (8008640 <check_for_error+0x168>)
 80085d2:	0018      	movs	r0, r3
 80085d4:	f7fa fb98 	bl	8002d08 <send_debug_logs>
            break;
 80085d8:	e00e      	b.n	80085f8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 80085da:	4b1a      	ldr	r3, [pc, #104]	; (8008644 <check_for_error+0x16c>)
 80085dc:	0018      	movs	r0, r3
 80085de:	f7fa fb93 	bl	8002d08 <send_debug_logs>
            break;
 80085e2:	e009      	b.n	80085f8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 80085e4:	4b18      	ldr	r3, [pc, #96]	; (8008648 <check_for_error+0x170>)
 80085e6:	0018      	movs	r0, r3
 80085e8:	f7fa fb8e 	bl	8002d08 <send_debug_logs>
            break;
 80085ec:	e004      	b.n	80085f8 <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 80085ee:	4b17      	ldr	r3, [pc, #92]	; (800864c <check_for_error+0x174>)
 80085f0:	0018      	movs	r0, r3
 80085f2:	f7fa fb89 	bl	8002d08 <send_debug_logs>
            break;
 80085f6:	46c0      	nop			; (mov r8, r8)
    }
}
 80085f8:	46c0      	nop			; (mov r8, r8)
 80085fa:	46bd      	mov	sp, r7
 80085fc:	b004      	add	sp, #16
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	00004601 	.word	0x00004601
 8008604:	00004501 	.word	0x00004501
 8008608:	00003501 	.word	0x00003501
 800860c:	00002601 	.word	0x00002601
 8008610:	00002511 	.word	0x00002511
 8008614:	00002501 	.word	0x00002501
 8008618:	00000611 	.word	0x00000611
 800861c:	00000601 	.word	0x00000601
 8008620:	08012944 	.word	0x08012944
 8008624:	08012990 	.word	0x08012990
 8008628:	080129f4 	.word	0x080129f4
 800862c:	08012a2c 	.word	0x08012a2c
 8008630:	08012ad0 	.word	0x08012ad0
 8008634:	08012b38 	.word	0x08012b38
 8008638:	08012b98 	.word	0x08012b98
 800863c:	08012c24 	.word	0x08012c24
 8008640:	08012c84 	.word	0x08012c84
 8008644:	08012d30 	.word	0x08012d30
 8008648:	08012d7c 	.word	0x08012d7c
 800864c:	08012dc4 	.word	0x08012dc4

08008650 <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 8008650:	b5b0      	push	{r4, r5, r7, lr}
 8008652:	b086      	sub	sp, #24
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 800865a:	230f      	movs	r3, #15
 800865c:	18fb      	adds	r3, r7, r3
 800865e:	2200      	movs	r2, #0
 8008660:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 8008662:	2316      	movs	r3, #22
 8008664:	18fb      	adds	r3, r7, r3
 8008666:	2200      	movs	r2, #0
 8008668:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 800866a:	f7fa fbdb 	bl	8002e24 <get_systick>
 800866e:	0003      	movs	r3, r0
 8008670:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 8008672:	2315      	movs	r3, #21
 8008674:	18fb      	adds	r3, r7, r3
 8008676:	2200      	movs	r2, #0
 8008678:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 800867a:	e054      	b.n	8008726 <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 800867c:	4a34      	ldr	r2, [pc, #208]	; (8008750 <receive_astronode_answer+0x100>)
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	0011      	movs	r1, r2
 8008682:	0018      	movs	r0, r3
 8008684:	f7fa fbd6 	bl	8002e34 <is_systick_timeout_over>
 8008688:	1e03      	subs	r3, r0, #0
 800868a:	d005      	beq.n	8008698 <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 800868c:	4b31      	ldr	r3, [pc, #196]	; (8008754 <receive_astronode_answer+0x104>)
 800868e:	0018      	movs	r0, r3
 8008690:	f7fa fb3a 	bl	8002d08 <send_debug_logs>
            return RS_FAILURE;
 8008694:	2300      	movs	r3, #0
 8008696:	e057      	b.n	8008748 <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 8008698:	250f      	movs	r5, #15
 800869a:	197b      	adds	r3, r7, r5
 800869c:	0018      	movs	r0, r3
 800869e:	f7fa fb9b 	bl	8002dd8 <is_astronode_character_received>
 80086a2:	0003      	movs	r3, r0
 80086a4:	0019      	movs	r1, r3
 80086a6:	2016      	movs	r0, #22
 80086a8:	183b      	adds	r3, r7, r0
 80086aa:	183a      	adds	r2, r7, r0
 80086ac:	8812      	ldrh	r2, [r2, #0]
 80086ae:	801a      	strh	r2, [r3, #0]
 80086b0:	2415      	movs	r4, #21
 80086b2:	193b      	adds	r3, r7, r4
 80086b4:	193a      	adds	r2, r7, r4
 80086b6:	7812      	ldrb	r2, [r2, #0]
 80086b8:	701a      	strb	r2, [r3, #0]
 80086ba:	2900      	cmp	r1, #0
 80086bc:	d033      	beq.n	8008726 <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 80086be:	197b      	adds	r3, r7, r5
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	2b02      	cmp	r3, #2
 80086c4:	d105      	bne.n	80086d2 <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 80086c6:	193b      	adds	r3, r7, r4
 80086c8:	2200      	movs	r2, #0
 80086ca:	701a      	strb	r2, [r3, #0]
                length = 0;
 80086cc:	183b      	adds	r3, r7, r0
 80086ce:	2200      	movs	r2, #0
 80086d0:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 80086d2:	2116      	movs	r1, #22
 80086d4:	187b      	adds	r3, r7, r1
 80086d6:	881b      	ldrh	r3, [r3, #0]
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	18d3      	adds	r3, r2, r3
 80086dc:	220f      	movs	r2, #15
 80086de:	18ba      	adds	r2, r7, r2
 80086e0:	7812      	ldrb	r2, [r2, #0]
 80086e2:	701a      	strb	r2, [r3, #0]
            length++;
 80086e4:	187b      	adds	r3, r7, r1
 80086e6:	881a      	ldrh	r2, [r3, #0]
 80086e8:	187b      	adds	r3, r7, r1
 80086ea:	3201      	adds	r2, #1
 80086ec:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 80086ee:	187b      	adds	r3, r7, r1
 80086f0:	881b      	ldrh	r3, [r3, #0]
 80086f2:	2bb2      	cmp	r3, #178	; 0xb2
 80086f4:	d905      	bls.n	8008702 <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 80086f6:	4b18      	ldr	r3, [pc, #96]	; (8008758 <receive_astronode_answer+0x108>)
 80086f8:	0018      	movs	r0, r3
 80086fa:	f7fa fb05 	bl	8002d08 <send_debug_logs>
                return RS_FAILURE;
 80086fe:	2300      	movs	r3, #0
 8008700:	e022      	b.n	8008748 <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 8008702:	230f      	movs	r3, #15
 8008704:	18fb      	adds	r3, r7, r3
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	2b03      	cmp	r3, #3
 800870a:	d10c      	bne.n	8008726 <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 800870c:	2216      	movs	r2, #22
 800870e:	18bb      	adds	r3, r7, r2
 8008710:	881b      	ldrh	r3, [r3, #0]
 8008712:	2b01      	cmp	r3, #1
 8008714:	d907      	bls.n	8008726 <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	18ba      	adds	r2, r7, r2
 800871a:	8812      	ldrh	r2, [r2, #0]
 800871c:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 800871e:	2315      	movs	r3, #21
 8008720:	18fb      	adds	r3, r7, r3
 8008722:	2201      	movs	r2, #1
 8008724:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 8008726:	2315      	movs	r3, #21
 8008728:	18fb      	adds	r3, r7, r3
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	2201      	movs	r2, #1
 800872e:	4053      	eors	r3, r2
 8008730:	b2db      	uxtb	r3, r3
 8008732:	2b00      	cmp	r3, #0
 8008734:	d1a2      	bne.n	800867c <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 8008736:	4b09      	ldr	r3, [pc, #36]	; (800875c <receive_astronode_answer+0x10c>)
 8008738:	0018      	movs	r0, r3
 800873a:	f7fa fae5 	bl	8002d08 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	0018      	movs	r0, r3
 8008742:	f7fa fae1 	bl	8002d08 <send_debug_logs>

    return RS_SUCCESS;
 8008746:	2301      	movs	r3, #1
}
 8008748:	0018      	movs	r0, r3
 800874a:	46bd      	mov	sp, r7
 800874c:	b006      	add	sp, #24
 800874e:	bdb0      	pop	{r4, r5, r7, pc}
 8008750:	000005dc 	.word	0x000005dc
 8008754:	08012de8 	.word	0x08012de8
 8008758:	08012e0c 	.word	0x08012e0c
 800875c:	08012e58 	.word	0x08012e58

08008760 <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	0002      	movs	r2, r0
 8008768:	6039      	str	r1, [r7, #0]
 800876a:	1dfb      	adds	r3, r7, #7
 800876c:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 800876e:	1dfb      	adds	r3, r7, #7
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	091b      	lsrs	r3, r3, #4
 8008774:	b2db      	uxtb	r3, r3
 8008776:	001a      	movs	r2, r3
 8008778:	4b08      	ldr	r3, [pc, #32]	; (800879c <uint8_to_ascii_buffer+0x3c>)
 800877a:	5c9a      	ldrb	r2, [r3, r2]
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 8008780:	1dfb      	adds	r3, r7, #7
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	220f      	movs	r2, #15
 8008786:	401a      	ands	r2, r3
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	3301      	adds	r3, #1
 800878c:	4903      	ldr	r1, [pc, #12]	; (800879c <uint8_to_ascii_buffer+0x3c>)
 800878e:	5c8a      	ldrb	r2, [r1, r2]
 8008790:	701a      	strb	r2, [r3, #0]
}
 8008792:	46c0      	nop			; (mov r8, r8)
 8008794:	46bd      	mov	sp, r7
 8008796:	b002      	add	sp, #8
 8008798:	bd80      	pop	{r7, pc}
 800879a:	46c0      	nop			; (mov r8, r8)
 800879c:	08013084 	.word	0x08013084

080087a0 <my_astro_init>:
 *      Author: mzeml
 */
#include "my_astronode.h"

bool my_astro_init ( void )
{
 80087a0:	b590      	push	{r4, r7, lr}
 80087a2:	b087      	sub	sp, #28
 80087a4:	af04      	add	r7, sp, #16
	bool cfg_wr = false ;
 80087a6:	1dfb      	adds	r3, r7, #7
 80087a8:	2200      	movs	r2, #0
 80087aa:	701a      	strb	r2, [r3, #0]
	tim_seconds = 0 ;
 80087ac:	4b24      	ldr	r3, [pc, #144]	; (8008840 <my_astro_init+0xa0>)
 80087ae:	2200      	movs	r2, #0
 80087b0:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( MY_TIMER ) ;
 80087b2:	4b24      	ldr	r3, [pc, #144]	; (8008844 <my_astro_init+0xa4>)
 80087b4:	0018      	movs	r0, r3
 80087b6:	f7fd f87d 	bl	80058b4 <HAL_TIM_Base_Start_IT>
	while ( tim_seconds < MY_ASTRO_INIT_TIME && !cfg_wr )
 80087ba:	e01a      	b.n	80087f2 <my_astro_init+0x52>
	{
		cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false ) ;
 80087bc:	1dfc      	adds	r4, r7, #7
 80087be:	2300      	movs	r3, #0
 80087c0:	9303      	str	r3, [sp, #12]
 80087c2:	2301      	movs	r3, #1
 80087c4:	9302      	str	r3, [sp, #8]
 80087c6:	2301      	movs	r3, #1
 80087c8:	9301      	str	r3, [sp, #4]
 80087ca:	2301      	movs	r3, #1
 80087cc:	9300      	str	r3, [sp, #0]
 80087ce:	2300      	movs	r3, #0
 80087d0:	2201      	movs	r2, #1
 80087d2:	2101      	movs	r1, #1
 80087d4:	2001      	movs	r0, #1
 80087d6:	f7fe fb3d 	bl	8006e54 <astronode_send_cfg_wr>
 80087da:	0003      	movs	r3, r0
 80087dc:	7023      	strb	r3, [r4, #0]
		my_astro_off () ;
 80087de:	f7fa fb4d 	bl	8002e7c <my_astro_off>
		HAL_Delay ( 3000 ) ;
 80087e2:	4b19      	ldr	r3, [pc, #100]	; (8008848 <my_astro_init+0xa8>)
 80087e4:	0018      	movs	r0, r3
 80087e6:	f7fa ff89 	bl	80036fc <HAL_Delay>
		my_astro_on () ;
 80087ea:	f7fa fb39 	bl	8002e60 <my_astro_on>
		reset_astronode () ;
 80087ee:	f7fa fabb 	bl	8002d68 <reset_astronode>
	while ( tim_seconds < MY_ASTRO_INIT_TIME && !cfg_wr )
 80087f2:	4b13      	ldr	r3, [pc, #76]	; (8008840 <my_astro_init+0xa0>)
 80087f4:	881b      	ldrh	r3, [r3, #0]
 80087f6:	2b3b      	cmp	r3, #59	; 0x3b
 80087f8:	d806      	bhi.n	8008808 <my_astro_init+0x68>
 80087fa:	1dfb      	adds	r3, r7, #7
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	2201      	movs	r2, #1
 8008800:	4053      	eors	r3, r2
 8008802:	b2db      	uxtb	r3, r3
 8008804:	2b00      	cmp	r3, #0
 8008806:	d1d9      	bne.n	80087bc <my_astro_init+0x1c>
	}
	tim_seconds = 0 ;
 8008808:	4b0d      	ldr	r3, [pc, #52]	; (8008840 <my_astro_init+0xa0>)
 800880a:	2200      	movs	r2, #0
 800880c:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT ( MY_TIMER ) ;
 800880e:	4b0d      	ldr	r3, [pc, #52]	; (8008844 <my_astro_init+0xa4>)
 8008810:	0018      	movs	r0, r3
 8008812:	f7fd f8ab 	bl	800596c <HAL_TIM_Base_Stop_IT>
	if ( cfg_wr )
 8008816:	1dfb      	adds	r3, r7, #7
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00b      	beq.n	8008836 <my_astro_init+0x96>
	{
		astronode_send_cfg_sr () ;
 800881e:	f7fe fae1 	bl	8006de4 <astronode_send_cfg_sr>
		astronode_send_mpn_rr () ;
 8008822:	f7ff f8cd 	bl	80079c0 <astronode_send_mpn_rr>
		astronode_send_msn_rr () ;
 8008826:	f7fe fc6b 	bl	8007100 <astronode_send_msn_rr>
		astronode_send_mgi_rr () ;
 800882a:	f7fe fbbf 	bl	8006fac <astronode_send_mgi_rr>
		astronode_send_pld_fr () ;
 800882e:	f7fe ff55 	bl	80076dc <astronode_send_pld_fr>
		return true ;
 8008832:	2301      	movs	r3, #1
 8008834:	e000      	b.n	8008838 <my_astro_init+0x98>
	}
	else
	{
		return false ;
 8008836:	2300      	movs	r3, #0
	}
}
 8008838:	0018      	movs	r0, r3
 800883a:	46bd      	mov	sp, r7
 800883c:	b003      	add	sp, #12
 800883e:	bd90      	pop	{r4, r7, pc}
 8008840:	200009a6 	.word	0x200009a6
 8008844:	2000077c 	.word	0x2000077c
 8008848:	00000bb8 	.word	0x00000bb8

0800884c <my_astro_add_payload_2_queue>:
bool my_astro_add_payload_2_queue ( char* payload )
{
 800884c:	b590      	push	{r4, r7, lr}
 800884e:	b085      	sub	sp, #20
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
	uint16_t id = 0 ;
 8008854:	240e      	movs	r4, #14
 8008856:	193b      	adds	r3, r7, r4
 8008858:	2200      	movs	r2, #0
 800885a:	801a      	strh	r2, [r3, #0]
	size_t l = strlen ( payload ) ;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	0018      	movs	r0, r3
 8008860:	f7f7 fc50 	bl	8000104 <strlen>
 8008864:	0003      	movs	r3, r0
 8008866:	60bb      	str	r3, [r7, #8]
	if ( l <= ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES )
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	2ba0      	cmp	r3, #160	; 0xa0
 800886c:	d80b      	bhi.n	8008886 <my_astro_add_payload_2_queue+0x3a>
	{
		if ( astronode_send_pld_er ( id , payload , l ) )
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	b29a      	uxth	r2, r3
 8008872:	6879      	ldr	r1, [r7, #4]
 8008874:	193b      	adds	r3, r7, r4
 8008876:	881b      	ldrh	r3, [r3, #0]
 8008878:	0018      	movs	r0, r3
 800887a:	f7fe fe8b 	bl	8007594 <astronode_send_pld_er>
 800887e:	1e03      	subs	r3, r0, #0
 8008880:	d005      	beq.n	800888e <my_astro_add_payload_2_queue+0x42>
		{
			return true ;
 8008882:	2301      	movs	r3, #1
 8008884:	e004      	b.n	8008890 <my_astro_add_payload_2_queue+0x44>
		}
	}
	else
	{
		send_debug_logs ( "ERROR: Payload exceeded ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES value." ) ;
 8008886:	4b04      	ldr	r3, [pc, #16]	; (8008898 <my_astro_add_payload_2_queue+0x4c>)
 8008888:	0018      	movs	r0, r3
 800888a:	f7fa fa3d 	bl	8002d08 <send_debug_logs>
	}
	return false ;
 800888e:	2300      	movs	r3, #0
}
 8008890:	0018      	movs	r0, r3
 8008892:	46bd      	mov	sp, r7
 8008894:	b005      	add	sp, #20
 8008896:	bd90      	pop	{r4, r7, pc}
 8008898:	08012e84 	.word	0x08012e84

0800889c <my_astro_read_evt_reg>:
bool my_astro_read_evt_reg ( void )
{
 800889c:	b580      	push	{r7, lr}
 800889e:	af00      	add	r7, sp, #0
	send_debug_logs ( "my_astro: evt pin is high." ) ;
 80088a0:	4b15      	ldr	r3, [pc, #84]	; (80088f8 <my_astro_read_evt_reg+0x5c>)
 80088a2:	0018      	movs	r0, r3
 80088a4:	f7fa fa30 	bl	8002d08 <send_debug_logs>
	astronode_send_evt_rr () ;
 80088a8:	f7fe fd34 	bl	8007314 <astronode_send_evt_rr>
	if (is_sak_available () )
 80088ac:	f7ff fae2 	bl	8007e74 <is_sak_available>
 80088b0:	1e03      	subs	r3, r0, #0
 80088b2:	d007      	beq.n	80088c4 <my_astro_read_evt_reg+0x28>
	{
	  astronode_send_sak_rr () ;
 80088b4:	f7fe ffee 	bl	8007894 <astronode_send_sak_rr>
	  astronode_send_sak_cr () ;
 80088b8:	f7ff f842 	bl	8007940 <astronode_send_sak_cr>
	  send_debug_logs ( "my_astro: message has been acknowledged." ) ;
 80088bc:	4b0f      	ldr	r3, [pc, #60]	; (80088fc <my_astro_read_evt_reg+0x60>)
 80088be:	0018      	movs	r0, r3
 80088c0:	f7fa fa22 	bl	8002d08 <send_debug_logs>
	  //astronode_send_per_rr () ;
	}
	if ( is_astronode_reset () )
 80088c4:	f7ff fae0 	bl	8007e88 <is_astronode_reset>
 80088c8:	1e03      	subs	r3, r0, #0
 80088ca:	d005      	beq.n	80088d8 <my_astro_read_evt_reg+0x3c>
	{
	  send_debug_logs ( "my_astro: terminal has been reset." ) ;
 80088cc:	4b0c      	ldr	r3, [pc, #48]	; (8008900 <my_astro_read_evt_reg+0x64>)
 80088ce:	0018      	movs	r0, r3
 80088d0:	f7fa fa1a 	bl	8002d08 <send_debug_logs>
	  astronode_send_res_cr () ;
 80088d4:	f7fe ff3e 	bl	8007754 <astronode_send_res_cr>
	}
	if ( is_command_available () )
 80088d8:	f7ff fae0 	bl	8007e9c <is_command_available>
 80088dc:	1e03      	subs	r3, r0, #0
 80088de:	d007      	beq.n	80088f0 <my_astro_read_evt_reg+0x54>
	{
	  send_debug_logs ( "my_astro: unicast command is available" ) ;
 80088e0:	4b08      	ldr	r3, [pc, #32]	; (8008904 <my_astro_read_evt_reg+0x68>)
 80088e2:	0018      	movs	r0, r3
 80088e4:	f7fa fa10 	bl	8002d08 <send_debug_logs>
	  astronode_send_cmd_rr () ;
 80088e8:	f7ff f954 	bl	8007b94 <astronode_send_cmd_rr>
	  astronode_send_cmd_cr () ;
 80088ec:	f7ff f912 	bl	8007b14 <astronode_send_cmd_cr>
	}
	return true ;
 80088f0:	2301      	movs	r3, #1
}
 80088f2:	0018      	movs	r0, r3
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}
 80088f8:	08012ec8 	.word	0x08012ec8
 80088fc:	08012ee4 	.word	0x08012ee4
 8008900:	08012f10 	.word	0x08012f10
 8008904:	08012f34 	.word	0x08012f34

08008908 <my_astro_log>:
bool my_astro_log ( void )
{
 8008908:	b580      	push	{r7, lr}
 800890a:	af00      	add	r7, sp, #0
	astronode_send_rtc_rr ();
 800890c:	f7fe ff62 	bl	80077d4 <astronode_send_rtc_rr>
	astronode_send_nco_rr () ;
 8008910:	f7fe fca0 	bl	8007254 <astronode_send_nco_rr>
	//astronode_send_lcd_rr () ;
	//astronode_send_end_rr () ;
	//astronode_send_per_rr () ;
	return true ;
 8008914:	2301      	movs	r3, #1
}
 8008916:	0018      	movs	r0, r3
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <my_astro_write_coordinates>:

void my_astro_write_coordinates ( int32_t astro_geo_wr_latitude , int32_t astro_geo_wr_longitude )
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
	astronode_send_geo_wr ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 8008926:	683a      	ldr	r2, [r7, #0]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	0011      	movs	r1, r2
 800892c:	0018      	movs	r0, r3
 800892e:	f7fe fd71 	bl	8007414 <astronode_send_geo_wr>
}
 8008932:	46c0      	nop			; (mov r8, r8)
 8008934:	46bd      	mov	sp, r7
 8008936:	b002      	add	sp, #8
 8008938:	bd80      	pop	{r7, pc}
	...

0800893c <my_lx6_get_coordinates>:

#include "my_lx6_gnss.h"


bool my_lx6_get_coordinates ( uint16_t active_time_ths , double nmea_pdop_ths , double* nmea_fixed_pdop_d , int32_t* astro_geo_wr_latitude , int32_t* astro_geo_wr_longitude )
{
 800893c:	b5b0      	push	{r4, r5, r7, lr}
 800893e:	4cc1      	ldr	r4, [pc, #772]	; (8008c44 <my_lx6_get_coordinates+0x308>)
 8008940:	44a5      	add	sp, r4
 8008942:	af02      	add	r7, sp, #8
 8008944:	0001      	movs	r1, r0
 8008946:	603a      	str	r2, [r7, #0]
 8008948:	607b      	str	r3, [r7, #4]
 800894a:	4bbf      	ldr	r3, [pc, #764]	; (8008c48 <my_lx6_get_coordinates+0x30c>)
 800894c:	209a      	movs	r0, #154	; 0x9a
 800894e:	0080      	lsls	r0, r0, #2
 8008950:	181b      	adds	r3, r3, r0
 8008952:	19db      	adds	r3, r3, r7
 8008954:	1c0a      	adds	r2, r1, #0
 8008956:	801a      	strh	r2, [r3, #0]
	bool		r = false ;
 8008958:	4bbc      	ldr	r3, [pc, #752]	; (8008c4c <my_lx6_get_coordinates+0x310>)
 800895a:	18fb      	adds	r3, r7, r3
 800895c:	2200      	movs	r2, #0
 800895e:	701a      	strb	r2, [r3, #0]
	uint8_t		rxd_byte = 0 ;
 8008960:	4bbb      	ldr	r3, [pc, #748]	; (8008c50 <my_lx6_get_coordinates+0x314>)
 8008962:	18fb      	adds	r3, r7, r3
 8008964:	2200      	movs	r2, #0
 8008966:	701a      	strb	r2, [r3, #0]
	bool 		received_nmea_rmc_flag = false ;
 8008968:	4bba      	ldr	r3, [pc, #744]	; (8008c54 <my_lx6_get_coordinates+0x318>)
 800896a:	18fb      	adds	r3, r7, r3
 800896c:	2200      	movs	r2, #0
 800896e:	701a      	strb	r2, [r3, #0]
	uint8_t		nmea_message[NMEA_MESSAGE_SIZE] = {0} ;
 8008970:	4bb9      	ldr	r3, [pc, #740]	; (8008c58 <my_lx6_get_coordinates+0x31c>)
 8008972:	0004      	movs	r4, r0
 8008974:	191b      	adds	r3, r3, r4
 8008976:	19db      	adds	r3, r3, r7
 8008978:	2200      	movs	r2, #0
 800897a:	601a      	str	r2, [r3, #0]
 800897c:	3304      	adds	r3, #4
 800897e:	22f6      	movs	r2, #246	; 0xf6
 8008980:	2100      	movs	r1, #0
 8008982:	0018      	movs	r0, r3
 8008984:	f002 f914 	bl	800abb0 <memset>
	uint8_t		gngll_message[NMEA_MESSAGE_SIZE] = {0} ;
 8008988:	4bb4      	ldr	r3, [pc, #720]	; (8008c5c <my_lx6_get_coordinates+0x320>)
 800898a:	191b      	adds	r3, r3, r4
 800898c:	19db      	adds	r3, r3, r7
 800898e:	2200      	movs	r2, #0
 8008990:	601a      	str	r2, [r3, #0]
 8008992:	3304      	adds	r3, #4
 8008994:	22f6      	movs	r2, #246	; 0xf6
 8008996:	2100      	movs	r1, #0
 8008998:	0018      	movs	r0, r3
 800899a:	f002 f909 	bl	800abb0 <memset>
	uint8_t		i_nmea = 0 ;
 800899e:	4bb0      	ldr	r3, [pc, #704]	; (8008c60 <my_lx6_get_coordinates+0x324>)
 80089a0:	191b      	adds	r3, r3, r4
 80089a2:	19db      	adds	r3, r3, r7
 80089a4:	2200      	movs	r2, #0
 80089a6:	701a      	strb	r2, [r3, #0]
	char 		nmea_latitude_s[MY_GNSS_NMEA_MAX_SIZE] = {0} ; // 10 + ew. znak minus + '\0'
 80089a8:	4bae      	ldr	r3, [pc, #696]	; (8008c64 <my_lx6_get_coordinates+0x328>)
 80089aa:	191b      	adds	r3, r3, r4
 80089ac:	19db      	adds	r3, r3, r7
 80089ae:	2200      	movs	r2, #0
 80089b0:	601a      	str	r2, [r3, #0]
 80089b2:	3304      	adds	r3, #4
 80089b4:	2208      	movs	r2, #8
 80089b6:	2100      	movs	r1, #0
 80089b8:	0018      	movs	r0, r3
 80089ba:	f002 f8f9 	bl	800abb0 <memset>
	char 		nmea_longitude_s[MY_GNSS_NMEA_MAX_SIZE] = {0} ; // 10 + ew. znak minus + '\0'
 80089be:	4baa      	ldr	r3, [pc, #680]	; (8008c68 <my_lx6_get_coordinates+0x32c>)
 80089c0:	191b      	adds	r3, r3, r4
 80089c2:	19db      	adds	r3, r3, r7
 80089c4:	2200      	movs	r2, #0
 80089c6:	601a      	str	r2, [r3, #0]
 80089c8:	3304      	adds	r3, #4
 80089ca:	2208      	movs	r2, #8
 80089cc:	2100      	movs	r1, #0
 80089ce:	0018      	movs	r0, r3
 80089d0:	f002 f8ee 	bl	800abb0 <memset>
	char 		nmea_coordinates_log[52] ; // Nagłowek + 12 + ew. znak minus + '\0'
	char* 		nmea_gngsa_label = "GNGSA" ;
 80089d4:	4ba5      	ldr	r3, [pc, #660]	; (8008c6c <my_lx6_get_coordinates+0x330>)
 80089d6:	2298      	movs	r2, #152	; 0x98
 80089d8:	0092      	lsls	r2, r2, #2
 80089da:	18ba      	adds	r2, r7, r2
 80089dc:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngll_label = "GNGLL" ;
 80089de:	4ba4      	ldr	r3, [pc, #656]	; (8008c70 <my_lx6_get_coordinates+0x334>)
 80089e0:	2297      	movs	r2, #151	; 0x97
 80089e2:	0092      	lsls	r2, r2, #2
 80089e4:	18ba      	adds	r2, r7, r2
 80089e6:	6013      	str	r3, [r2, #0]
	char* 		nmea_rmc_label = "RMC" ;
 80089e8:	4ba2      	ldr	r3, [pc, #648]	; (8008c74 <my_lx6_get_coordinates+0x338>)
 80089ea:	2296      	movs	r2, #150	; 0x96
 80089ec:	0092      	lsls	r2, r2, #2
 80089ee:	18ba      	adds	r2, r7, r2
 80089f0:	6013      	str	r3, [r2, #0]
	char		nmea_fixed_mode_s = '\0' ;
 80089f2:	4ba1      	ldr	r3, [pc, #644]	; (8008c78 <my_lx6_get_coordinates+0x33c>)
 80089f4:	18fb      	adds	r3, r7, r3
 80089f6:	2200      	movs	r2, #0
 80089f8:	701a      	strb	r2, [r3, #0]

	tim_seconds = 0 ;
 80089fa:	4ba0      	ldr	r3, [pc, #640]	; (8008c7c <my_lx6_get_coordinates+0x340>)
 80089fc:	2200      	movs	r2, #0
 80089fe:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &htim6 ) ;
 8008a00:	4b9f      	ldr	r3, [pc, #636]	; (8008c80 <my_lx6_get_coordinates+0x344>)
 8008a02:	0018      	movs	r0, r3
 8008a04:	f7fc ff56 	bl	80058b4 <HAL_TIM_Base_Start_IT>
	my_lx6_on () ;
 8008a08:	f7fa fa4a 	bl	8002ea0 <my_lx6_on>
	while ( tim_seconds < active_time_ths  ) // 1200 = 10 min.
 8008a0c:	e0cc      	b.n	8008ba8 <my_lx6_get_coordinates+0x26c>
	{
		HAL_UART_Receive ( HUART_Lx6 , &rxd_byte , 1 , UART_TIMEOUT ) ;
 8008a0e:	23fa      	movs	r3, #250	; 0xfa
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	4c8f      	ldr	r4, [pc, #572]	; (8008c50 <my_lx6_get_coordinates+0x314>)
 8008a14:	1939      	adds	r1, r7, r4
 8008a16:	489b      	ldr	r0, [pc, #620]	; (8008c84 <my_lx6_get_coordinates+0x348>)
 8008a18:	2201      	movs	r2, #1
 8008a1a:	f7fd fb5f 	bl	80060dc <HAL_UART_Receive>
		HAL_UART_Transmit ( HUART_DBG , &rxd_byte , 1 , UART_TIMEOUT ) ; // Transmit all nmea to DBG
 8008a1e:	23fa      	movs	r3, #250	; 0xfa
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	1939      	adds	r1, r7, r4
 8008a24:	4898      	ldr	r0, [pc, #608]	; (8008c88 <my_lx6_get_coordinates+0x34c>)
 8008a26:	2201      	movs	r2, #1
 8008a28:	f7fd fabc 	bl	8005fa4 <HAL_UART_Transmit>
		if ( rxd_byte )
 8008a2c:	0020      	movs	r0, r4
 8008a2e:	193b      	adds	r3, r7, r4
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d100      	bne.n	8008a38 <my_lx6_get_coordinates+0xfc>
 8008a36:	e087      	b.n	8008b48 <my_lx6_get_coordinates+0x20c>
		{
			if ( my_nmea_message ( &rxd_byte , nmea_message , &i_nmea ) == 2 )
 8008a38:	235f      	movs	r3, #95	; 0x5f
 8008a3a:	18fa      	adds	r2, r7, r3
 8008a3c:	24ae      	movs	r4, #174	; 0xae
 8008a3e:	0064      	lsls	r4, r4, #1
 8008a40:	1939      	adds	r1, r7, r4
 8008a42:	183b      	adds	r3, r7, r0
 8008a44:	0018      	movs	r0, r3
 8008a46:	f000 fa12 	bl	8008e6e <my_nmea_message>
 8008a4a:	0003      	movs	r3, r0
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	d000      	beq.n	8008a52 <my_lx6_get_coordinates+0x116>
 8008a50:	e07a      	b.n	8008b48 <my_lx6_get_coordinates+0x20c>
			{
				if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 8008a52:	193b      	adds	r3, r7, r4
 8008a54:	0018      	movs	r0, r3
 8008a56:	f000 faca 	bl	8008fee <is_my_nmea_checksum_ok>
 8008a5a:	1e03      	subs	r3, r0, #0
 8008a5c:	d100      	bne.n	8008a60 <my_lx6_get_coordinates+0x124>
 8008a5e:	e073      	b.n	8008b48 <my_lx6_get_coordinates+0x20c>
				{
					if ( strstr ( (char*) nmea_message , nmea_rmc_label ) && !received_nmea_rmc_flag )
 8008a60:	2396      	movs	r3, #150	; 0x96
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	18fb      	adds	r3, r7, r3
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	193b      	adds	r3, r7, r4
 8008a6a:	0011      	movs	r1, r2
 8008a6c:	0018      	movs	r0, r3
 8008a6e:	f002 f8cc 	bl	800ac0a <strstr>
 8008a72:	1e03      	subs	r3, r0, #0
 8008a74:	d00e      	beq.n	8008a94 <my_lx6_get_coordinates+0x158>
 8008a76:	4d77      	ldr	r5, [pc, #476]	; (8008c54 <my_lx6_get_coordinates+0x318>)
 8008a78:	197b      	adds	r3, r7, r5
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	4053      	eors	r3, r2
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d006      	beq.n	8008a94 <my_lx6_get_coordinates+0x158>
					{
						set_my_rtc_from_nmea_rmc ( (char*) nmea_message ) ;
 8008a86:	193b      	adds	r3, r7, r4
 8008a88:	0018      	movs	r0, r3
 8008a8a:	f000 f901 	bl	8008c90 <set_my_rtc_from_nmea_rmc>
						received_nmea_rmc_flag = true ;
 8008a8e:	197b      	adds	r3, r7, r5
 8008a90:	2201      	movs	r2, #1
 8008a92:	701a      	strb	r2, [r3, #0]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngsa_label ) )
 8008a94:	2398      	movs	r3, #152	; 0x98
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	18fb      	adds	r3, r7, r3
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	25ae      	movs	r5, #174	; 0xae
 8008a9e:	006d      	lsls	r5, r5, #1
 8008aa0:	197b      	adds	r3, r7, r5
 8008aa2:	0011      	movs	r1, r2
 8008aa4:	0018      	movs	r0, r3
 8008aa6:	f002 f8b0 	bl	800ac0a <strstr>
 8008aaa:	1e03      	subs	r3, r0, #0
 8008aac:	d013      	beq.n	8008ad6 <my_lx6_get_coordinates+0x19a>
					{
						nmea_fixed_mode_s = get_my_nmea_gngsa_fixed_mode_s ( (char*) nmea_message ) ;
 8008aae:	4b72      	ldr	r3, [pc, #456]	; (8008c78 <my_lx6_get_coordinates+0x33c>)
 8008ab0:	18fc      	adds	r4, r7, r3
 8008ab2:	197b      	adds	r3, r7, r5
 8008ab4:	0018      	movs	r0, r3
 8008ab6:	f000 fa46 	bl	8008f46 <get_my_nmea_gngsa_fixed_mode_s>
 8008aba:	0003      	movs	r3, r0
 8008abc:	7023      	strb	r3, [r4, #0]
						*nmea_fixed_pdop_d = get_my_nmea_gngsa_pdop_d ( (char*) nmea_message ) ;
 8008abe:	197b      	adds	r3, r7, r5
 8008ac0:	0018      	movs	r0, r3
 8008ac2:	f000 fa4b 	bl	8008f5c <get_my_nmea_gngsa_pdop_d>
 8008ac6:	0002      	movs	r2, r0
 8008ac8:	000b      	movs	r3, r1
 8008aca:	219e      	movs	r1, #158	; 0x9e
 8008acc:	0089      	lsls	r1, r1, #2
 8008ace:	1879      	adds	r1, r7, r1
 8008ad0:	6809      	ldr	r1, [r1, #0]
 8008ad2:	600a      	str	r2, [r1, #0]
 8008ad4:	604b      	str	r3, [r1, #4]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngll_label ) /*&& nmea_fixed_pdop_d <= nmea_pdop_ths */)
 8008ad6:	2397      	movs	r3, #151	; 0x97
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	18fb      	adds	r3, r7, r3
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	25ae      	movs	r5, #174	; 0xae
 8008ae0:	006d      	lsls	r5, r5, #1
 8008ae2:	197b      	adds	r3, r7, r5
 8008ae4:	0011      	movs	r1, r2
 8008ae6:	0018      	movs	r0, r3
 8008ae8:	f002 f88f 	bl	800ac0a <strstr>
 8008aec:	1e03      	subs	r3, r0, #0
 8008aee:	d02b      	beq.n	8008b48 <my_lx6_get_coordinates+0x20c>
					{
						if ( *nmea_fixed_pdop_d <= nmea_pdop_ths )
 8008af0:	239e      	movs	r3, #158	; 0x9e
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	18fb      	adds	r3, r7, r3
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	6838      	ldr	r0, [r7, #0]
 8008afe:	6879      	ldr	r1, [r7, #4]
 8008b00:	f7f7 fcc6 	bl	8000490 <__aeabi_dcmpge>
 8008b04:	1e03      	subs	r3, r0, #0
 8008b06:	d011      	beq.n	8008b2c <my_lx6_get_coordinates+0x1f0>
						{
							get_my_nmea_gngll_coordinates ( (char*) nmea_message , nmea_latitude_s , nmea_longitude_s , astro_geo_wr_latitude , astro_geo_wr_longitude ) ; // Nie musze nic kombinować z przenoszeniem tej operacji, bo po niej nie będzie już dalej odbierania wiadomości tylko wyjście
 8008b08:	239f      	movs	r3, #159	; 0x9f
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	18fb      	adds	r3, r7, r3
 8008b0e:	681c      	ldr	r4, [r3, #0]
 8008b10:	2344      	movs	r3, #68	; 0x44
 8008b12:	18fa      	adds	r2, r7, r3
 8008b14:	2350      	movs	r3, #80	; 0x50
 8008b16:	18f9      	adds	r1, r7, r3
 8008b18:	1978      	adds	r0, r7, r5
 8008b1a:	23a0      	movs	r3, #160	; 0xa0
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	18fb      	adds	r3, r7, r3
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	9300      	str	r3, [sp, #0]
 8008b24:	0023      	movs	r3, r4
 8008b26:	f000 fb1d 	bl	8009164 <get_my_nmea_gngll_coordinates>
 8008b2a:	e00d      	b.n	8008b48 <my_lx6_get_coordinates+0x20c>
						}
						else
						{
							memcpy ( gngll_message , nmea_message , NMEA_MESSAGE_SIZE ) ; // Zapisuję, żeby potem, jak nie osiągnę jakości nmea_pdop_ths to wykorzystać coordinates do payload
 8008b2c:	4b4b      	ldr	r3, [pc, #300]	; (8008c5c <my_lx6_get_coordinates+0x320>)
 8008b2e:	219a      	movs	r1, #154	; 0x9a
 8008b30:	0089      	lsls	r1, r1, #2
 8008b32:	185b      	adds	r3, r3, r1
 8008b34:	19da      	adds	r2, r3, r7
 8008b36:	4b48      	ldr	r3, [pc, #288]	; (8008c58 <my_lx6_get_coordinates+0x31c>)
 8008b38:	185b      	adds	r3, r3, r1
 8008b3a:	19db      	adds	r3, r3, r7
 8008b3c:	0010      	movs	r0, r2
 8008b3e:	0019      	movs	r1, r3
 8008b40:	23fa      	movs	r3, #250	; 0xfa
 8008b42:	001a      	movs	r2, r3
 8008b44:	f002 f919 	bl	800ad7a <memcpy>
						}
					}
				}
			}
		}
		if ( tim_seconds > MY_GNSS_RMC_TIME_THS && !received_nmea_rmc_flag )
 8008b48:	4b4c      	ldr	r3, [pc, #304]	; (8008c7c <my_lx6_get_coordinates+0x340>)
 8008b4a:	881b      	ldrh	r3, [r3, #0]
 8008b4c:	2b0a      	cmp	r3, #10
 8008b4e:	d907      	bls.n	8008b60 <my_lx6_get_coordinates+0x224>
 8008b50:	4b40      	ldr	r3, [pc, #256]	; (8008c54 <my_lx6_get_coordinates+0x318>)
 8008b52:	18fb      	adds	r3, r7, r3
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	2201      	movs	r2, #1
 8008b58:	4053      	eors	r3, r2
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d12f      	bne.n	8008bc0 <my_lx6_get_coordinates+0x284>
		{
			break ;
		}
		if ( *nmea_fixed_pdop_d <= nmea_pdop_ths )
 8008b60:	239e      	movs	r3, #158	; 0x9e
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	18fb      	adds	r3, r7, r3
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	6838      	ldr	r0, [r7, #0]
 8008b6e:	6879      	ldr	r1, [r7, #4]
 8008b70:	f7f7 fc8e 	bl	8000490 <__aeabi_dcmpge>
 8008b74:	1e03      	subs	r3, r0, #0
 8008b76:	d100      	bne.n	8008b7a <my_lx6_get_coordinates+0x23e>
 8008b78:	e016      	b.n	8008ba8 <my_lx6_get_coordinates+0x26c>
		{
			if ( nmea_latitude_s[0] != 0 )
 8008b7a:	4b3a      	ldr	r3, [pc, #232]	; (8008c64 <my_lx6_get_coordinates+0x328>)
 8008b7c:	229a      	movs	r2, #154	; 0x9a
 8008b7e:	0092      	lsls	r2, r2, #2
 8008b80:	189b      	adds	r3, r3, r2
 8008b82:	19db      	adds	r3, r3, r7
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d00e      	beq.n	8008ba8 <my_lx6_get_coordinates+0x26c>
			{
				if ( nmea_fixed_mode_s == NMEA_3D_FIX )
 8008b8a:	4b3b      	ldr	r3, [pc, #236]	; (8008c78 <my_lx6_get_coordinates+0x33c>)
 8008b8c:	18fb      	adds	r3, r7, r3
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	2b33      	cmp	r3, #51	; 0x33
 8008b92:	d109      	bne.n	8008ba8 <my_lx6_get_coordinates+0x26c>
				{
					if ( received_nmea_rmc_flag )
 8008b94:	4b2f      	ldr	r3, [pc, #188]	; (8008c54 <my_lx6_get_coordinates+0x318>)
 8008b96:	18fb      	adds	r3, r7, r3
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d004      	beq.n	8008ba8 <my_lx6_get_coordinates+0x26c>
					{
						r = true ;
 8008b9e:	4b2b      	ldr	r3, [pc, #172]	; (8008c4c <my_lx6_get_coordinates+0x310>)
 8008ba0:	18fb      	adds	r3, r7, r3
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	701a      	strb	r2, [r3, #0]
						break ;
 8008ba6:	e00c      	b.n	8008bc2 <my_lx6_get_coordinates+0x286>
	while ( tim_seconds < active_time_ths  ) // 1200 = 10 min.
 8008ba8:	4b34      	ldr	r3, [pc, #208]	; (8008c7c <my_lx6_get_coordinates+0x340>)
 8008baa:	881b      	ldrh	r3, [r3, #0]
 8008bac:	4a26      	ldr	r2, [pc, #152]	; (8008c48 <my_lx6_get_coordinates+0x30c>)
 8008bae:	219a      	movs	r1, #154	; 0x9a
 8008bb0:	0089      	lsls	r1, r1, #2
 8008bb2:	1852      	adds	r2, r2, r1
 8008bb4:	19d2      	adds	r2, r2, r7
 8008bb6:	8812      	ldrh	r2, [r2, #0]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d900      	bls.n	8008bbe <my_lx6_get_coordinates+0x282>
 8008bbc:	e727      	b.n	8008a0e <my_lx6_get_coordinates+0xd2>
 8008bbe:	e000      	b.n	8008bc2 <my_lx6_get_coordinates+0x286>
			break ;
 8008bc0:	46c0      	nop			; (mov r8, r8)
					}
				}
			}
		}
	}
	HAL_TIM_Base_Stop_IT ( &htim6 ) ;
 8008bc2:	4b2f      	ldr	r3, [pc, #188]	; (8008c80 <my_lx6_get_coordinates+0x344>)
 8008bc4:	0018      	movs	r0, r3
 8008bc6:	f7fc fed1 	bl	800596c <HAL_TIM_Base_Stop_IT>
	my_lx6_off () ;
 8008bca:	f7fa f981 	bl	8002ed0 <my_lx6_off>
	if ( nmea_latitude_s[0] == 0 && gngll_message[0] != 0 ) // Jeśli nie masz współrzędnych pdop to wykorzystaja gorsze i zrób ich backup
 8008bce:	4b25      	ldr	r3, [pc, #148]	; (8008c64 <my_lx6_get_coordinates+0x328>)
 8008bd0:	229a      	movs	r2, #154	; 0x9a
 8008bd2:	0092      	lsls	r2, r2, #2
 8008bd4:	189b      	adds	r3, r3, r2
 8008bd6:	19db      	adds	r3, r3, r7
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d11b      	bne.n	8008c16 <my_lx6_get_coordinates+0x2da>
 8008bde:	4b1f      	ldr	r3, [pc, #124]	; (8008c5c <my_lx6_get_coordinates+0x320>)
 8008be0:	189b      	adds	r3, r3, r2
 8008be2:	19db      	adds	r3, r3, r7
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d015      	beq.n	8008c16 <my_lx6_get_coordinates+0x2da>
	{
		get_my_nmea_gngll_coordinates ( (char*) gngll_message , nmea_latitude_s , nmea_longitude_s , astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 8008bea:	239f      	movs	r3, #159	; 0x9f
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	18fb      	adds	r3, r7, r3
 8008bf0:	681c      	ldr	r4, [r3, #0]
 8008bf2:	2344      	movs	r3, #68	; 0x44
 8008bf4:	18fa      	adds	r2, r7, r3
 8008bf6:	2350      	movs	r3, #80	; 0x50
 8008bf8:	18f9      	adds	r1, r7, r3
 8008bfa:	2360      	movs	r3, #96	; 0x60
 8008bfc:	18f8      	adds	r0, r7, r3
 8008bfe:	23a0      	movs	r3, #160	; 0xa0
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	18fb      	adds	r3, r7, r3
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	9300      	str	r3, [sp, #0]
 8008c08:	0023      	movs	r3, r4
 8008c0a:	f000 faab 	bl	8009164 <get_my_nmea_gngll_coordinates>
		r = true ;
 8008c0e:	4b0f      	ldr	r3, [pc, #60]	; (8008c4c <my_lx6_get_coordinates+0x310>)
 8008c10:	18fb      	adds	r3, r7, r3
 8008c12:	2201      	movs	r2, #1
 8008c14:	701a      	strb	r2, [r3, #0]
	}
	sprintf ( nmea_coordinates_log , "NMEA coordinates: %s,%s" , nmea_latitude_s , nmea_longitude_s ) ;
 8008c16:	2344      	movs	r3, #68	; 0x44
 8008c18:	18fb      	adds	r3, r7, r3
 8008c1a:	2250      	movs	r2, #80	; 0x50
 8008c1c:	18ba      	adds	r2, r7, r2
 8008c1e:	491b      	ldr	r1, [pc, #108]	; (8008c8c <my_lx6_get_coordinates+0x350>)
 8008c20:	2410      	movs	r4, #16
 8008c22:	1938      	adds	r0, r7, r4
 8008c24:	f001 ff2e 	bl	800aa84 <sprintf>
	send_debug_logs ( nmea_coordinates_log ) ;
 8008c28:	193b      	adds	r3, r7, r4
 8008c2a:	0018      	movs	r0, r3
 8008c2c:	f7fa f86c 	bl	8002d08 <send_debug_logs>
	return r ;
 8008c30:	4b06      	ldr	r3, [pc, #24]	; (8008c4c <my_lx6_get_coordinates+0x310>)
 8008c32:	18fb      	adds	r3, r7, r3
 8008c34:	781b      	ldrb	r3, [r3, #0]
}
 8008c36:	0018      	movs	r0, r3
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	239a      	movs	r3, #154	; 0x9a
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	449d      	add	sp, r3
 8008c40:	bdb0      	pop	{r4, r5, r7, pc}
 8008c42:	46c0      	nop			; (mov r8, r8)
 8008c44:	fffffd90 	.word	0xfffffd90
 8008c48:	fffffda6 	.word	0xfffffda6
 8008c4c:	00000267 	.word	0x00000267
 8008c50:	00000257 	.word	0x00000257
 8008c54:	00000266 	.word	0x00000266
 8008c58:	fffffef4 	.word	0xfffffef4
 8008c5c:	fffffdf8 	.word	0xfffffdf8
 8008c60:	fffffdf7 	.word	0xfffffdf7
 8008c64:	fffffde8 	.word	0xfffffde8
 8008c68:	fffffddc 	.word	0xfffffddc
 8008c6c:	08012f5c 	.word	0x08012f5c
 8008c70:	08012f64 	.word	0x08012f64
 8008c74:	08012f6c 	.word	0x08012f6c
 8008c78:	00000265 	.word	0x00000265
 8008c7c:	200009a6 	.word	0x200009a6
 8008c80:	2000077c 	.word	0x2000077c
 8008c84:	200008f0 	.word	0x200008f0
 8008c88:	2000085c 	.word	0x2000085c
 8008c8c:	08012f70 	.word	0x08012f70

08008c90 <set_my_rtc_from_nmea_rmc>:
*/

extern RTC_HandleTypeDef hrtc ;

void set_my_rtc_from_nmea_rmc ( const char* m )
{
 8008c90:	b5b0      	push	{r4, r5, r7, lr}
 8008c92:	b088      	sub	sp, #32
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
	  RTC_TimeTypeDef sTime;
	  RTC_DateTypeDef sDate;

	  get_my_nmea_rmc_date_yy ( m , &sDate.Year ) ;
 8008c98:	2508      	movs	r5, #8
 8008c9a:	197b      	adds	r3, r7, r5
 8008c9c:	1cda      	adds	r2, r3, #3
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	0011      	movs	r1, r2
 8008ca2:	0018      	movs	r0, r3
 8008ca4:	f000 fb60 	bl	8009368 <get_my_nmea_rmc_date_yy>
	  get_my_nmea_rmc_date_mm ( m , &sDate.Month ) ;
 8008ca8:	197b      	adds	r3, r7, r5
 8008caa:	1c5a      	adds	r2, r3, #1
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	0011      	movs	r1, r2
 8008cb0:	0018      	movs	r0, r3
 8008cb2:	f000 fb93 	bl	80093dc <get_my_nmea_rmc_date_mm>
	  get_my_nmea_rmc_date_dd ( m , &sDate.Date ) ;
 8008cb6:	197b      	adds	r3, r7, r5
 8008cb8:	1c9a      	adds	r2, r3, #2
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	0011      	movs	r1, r2
 8008cbe:	0018      	movs	r0, r3
 8008cc0:	f000 fbc6 	bl	8009450 <get_my_nmea_rmc_date_dd>
	  get_my_nmea_rmc_utc_hh ( m , &sTime.Hours ) ;
 8008cc4:	240c      	movs	r4, #12
 8008cc6:	193a      	adds	r2, r7, r4
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	0011      	movs	r1, r2
 8008ccc:	0018      	movs	r0, r3
 8008cce:	f000 fbf9 	bl	80094c4 <get_my_nmea_rmc_utc_hh>
	  get_my_nmea_rmc_utc_mm ( m , &sTime.Minutes ) ;
 8008cd2:	193b      	adds	r3, r7, r4
 8008cd4:	1c5a      	adds	r2, r3, #1
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	0011      	movs	r1, r2
 8008cda:	0018      	movs	r0, r3
 8008cdc:	f000 fc2c 	bl	8009538 <get_my_nmea_rmc_utc_mm>
	  get_my_nmea_rmc_utc_ss ( m , &sTime.Seconds ) ;
 8008ce0:	193b      	adds	r3, r7, r4
 8008ce2:	1c9a      	adds	r2, r3, #2
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	0011      	movs	r1, r2
 8008ce8:	0018      	movs	r0, r3
 8008cea:	f000 fc5f 	bl	80095ac <get_my_nmea_rmc_utc_ss>
	  get_my_nmea_rmc_utc_sss ( m , &sTime.SubSeconds ) ;
 8008cee:	193b      	adds	r3, r7, r4
 8008cf0:	1d1a      	adds	r2, r3, #4
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	0011      	movs	r1, r2
 8008cf6:	0018      	movs	r0, r3
 8008cf8:	f000 fc92 	bl	8009620 <get_my_nmea_rmc_utc_sss>
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008cfc:	193b      	adds	r3, r7, r4
 8008cfe:	2200      	movs	r2, #0
 8008d00:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008d02:	193b      	adds	r3, r7, r4
 8008d04:	2200      	movs	r2, #0
 8008d06:	611a      	str	r2, [r3, #16]

	  HAL_RTCEx_EnableBypassShadow ( &hrtc ) ;
 8008d08:	4b0b      	ldr	r3, [pc, #44]	; (8008d38 <set_my_rtc_from_nmea_rmc+0xa8>)
 8008d0a:	0018      	movs	r0, r3
 8008d0c:	f7fc fd11 	bl	8005732 <HAL_RTCEx_EnableBypassShadow>
	  HAL_RTC_SetTime ( &hrtc , &sTime , RTC_FORMAT_BIN ) ;
 8008d10:	1939      	adds	r1, r7, r4
 8008d12:	4b09      	ldr	r3, [pc, #36]	; (8008d38 <set_my_rtc_from_nmea_rmc+0xa8>)
 8008d14:	2200      	movs	r2, #0
 8008d16:	0018      	movs	r0, r3
 8008d18:	f7fc f90e 	bl	8004f38 <HAL_RTC_SetTime>
	  HAL_RTC_SetDate ( &hrtc , &sDate , RTC_FORMAT_BIN ) ;
 8008d1c:	1979      	adds	r1, r7, r5
 8008d1e:	4b06      	ldr	r3, [pc, #24]	; (8008d38 <set_my_rtc_from_nmea_rmc+0xa8>)
 8008d20:	2200      	movs	r2, #0
 8008d22:	0018      	movs	r0, r3
 8008d24:	f7fc fa0c 	bl	8005140 <HAL_RTC_SetDate>
	  HAL_RTCEx_DisableBypassShadow ( &hrtc ) ;
 8008d28:	4b03      	ldr	r3, [pc, #12]	; (8008d38 <set_my_rtc_from_nmea_rmc+0xa8>)
 8008d2a:	0018      	movs	r0, r3
 8008d2c:	f7fc fd35 	bl	800579a <HAL_RTCEx_DisableBypassShadow>
}
 8008d30:	46c0      	nop			; (mov r8, r8)
 8008d32:	46bd      	mov	sp, r7
 8008d34:	b008      	add	sp, #32
 8008d36:	bdb0      	pop	{r4, r5, r7, pc}
 8008d38:	20000750 	.word	0x20000750

08008d3c <get_my_rtc_time>:
uint16_t get_my_rtc_time ( char* dt_s )
{
 8008d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d3e:	b08d      	sub	sp, #52	; 0x34
 8008d40:	af04      	add	r7, sp, #16
 8008d42:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 8008d44:	2508      	movs	r5, #8
 8008d46:	1979      	adds	r1, r7, r5
 8008d48:	4b1b      	ldr	r3, [pc, #108]	; (8008db8 <get_my_rtc_time+0x7c>)
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	0018      	movs	r0, r3
 8008d4e:	f7fc f99b 	bl	8005088 <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 8008d52:	241c      	movs	r4, #28
 8008d54:	1939      	adds	r1, r7, r4
 8008d56:	4b18      	ldr	r3, [pc, #96]	; (8008db8 <get_my_rtc_time+0x7c>)
 8008d58:	2200      	movs	r2, #0
 8008d5a:	0018      	movs	r0, r3
 8008d5c:	f7fc fa82 	bl	8005264 <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds) ;
 8008d60:	0021      	movs	r1, r4
 8008d62:	187b      	adds	r3, r7, r1
 8008d64:	78db      	ldrb	r3, [r3, #3]
 8008d66:	22fa      	movs	r2, #250	; 0xfa
 8008d68:	00d2      	lsls	r2, r2, #3
 8008d6a:	189a      	adds	r2, r3, r2
 8008d6c:	187b      	adds	r3, r7, r1
 8008d6e:	785b      	ldrb	r3, [r3, #1]
 8008d70:	469c      	mov	ip, r3
 8008d72:	187b      	adds	r3, r7, r1
 8008d74:	789b      	ldrb	r3, [r3, #2]
 8008d76:	001c      	movs	r4, r3
 8008d78:	0028      	movs	r0, r5
 8008d7a:	183b      	adds	r3, r7, r0
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	001d      	movs	r5, r3
 8008d80:	183b      	adds	r3, r7, r0
 8008d82:	785b      	ldrb	r3, [r3, #1]
 8008d84:	001e      	movs	r6, r3
 8008d86:	183b      	adds	r3, r7, r0
 8008d88:	789b      	ldrb	r3, [r3, #2]
 8008d8a:	490c      	ldr	r1, [pc, #48]	; (8008dbc <get_my_rtc_time+0x80>)
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	9303      	str	r3, [sp, #12]
 8008d90:	9602      	str	r6, [sp, #8]
 8008d92:	9501      	str	r5, [sp, #4]
 8008d94:	9400      	str	r4, [sp, #0]
 8008d96:	4663      	mov	r3, ip
 8008d98:	f001 fe74 	bl	800aa84 <sprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 8008d9c:	211c      	movs	r1, #28
 8008d9e:	187b      	adds	r3, r7, r1
 8008da0:	78db      	ldrb	r3, [r3, #3]
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	22fa      	movs	r2, #250	; 0xfa
 8008da6:	00d2      	lsls	r2, r2, #3
 8008da8:	4694      	mov	ip, r2
 8008daa:	4463      	add	r3, ip
 8008dac:	b29b      	uxth	r3, r3
}
 8008dae:	0018      	movs	r0, r3
 8008db0:	46bd      	mov	sp, r7
 8008db2:	b009      	add	sp, #36	; 0x24
 8008db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008db6:	46c0      	nop			; (mov r8, r8)
 8008db8:	20000750 	.word	0x20000750
 8008dbc:	08012f88 	.word	0x08012f88

08008dc0 <my_string2double_conv>:
 */

#include "my_conversions.h"

double my_string2double_conv ( const char* s )
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
    double d = strtod ( s , NULL ) ;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2100      	movs	r1, #0
 8008dcc:	0018      	movs	r0, r3
 8008dce:	f001 fcbd 	bl	800a74c <strtod>
 8008dd2:	0002      	movs	r2, r0
 8008dd4:	000b      	movs	r3, r1
 8008dd6:	60ba      	str	r2, [r7, #8]
 8008dd8:	60fb      	str	r3, [r7, #12]
    return d ;
 8008dda:	68ba      	ldr	r2, [r7, #8]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
}
 8008dde:	0010      	movs	r0, r2
 8008de0:	0019      	movs	r1, r3
 8008de2:	46bd      	mov	sp, r7
 8008de4:	b004      	add	sp, #16
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	0008      	movs	r0, r1
 8008df2:	0011      	movs	r1, r2
 8008df4:	1cfb      	adds	r3, r7, #3
 8008df6:	1c02      	adds	r2, r0, #0
 8008df8:	701a      	strb	r2, [r3, #0]
 8008dfa:	1cbb      	adds	r3, r7, #2
 8008dfc:	1c0a      	adds	r2, r1, #0
 8008dfe:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 8008e00:	230f      	movs	r3, #15
 8008e02:	18fb      	adds	r3, r7, r3
 8008e04:	2200      	movs	r2, #0
 8008e06:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 8008e08:	230e      	movs	r3, #14
 8008e0a:	18fb      	adds	r3, r7, r3
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 8008e10:	e01c      	b.n	8008e4c <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 8008e12:	230f      	movs	r3, #15
 8008e14:	18fb      	adds	r3, r7, r3
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	18d3      	adds	r3, r2, r3
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	1cfa      	adds	r2, r7, #3
 8008e20:	7812      	ldrb	r2, [r2, #0]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d105      	bne.n	8008e32 <my_find_char_position+0x4a>
			p++ ;
 8008e26:	210e      	movs	r1, #14
 8008e28:	187b      	adds	r3, r7, r1
 8008e2a:	781a      	ldrb	r2, [r3, #0]
 8008e2c:	187b      	adds	r3, r7, r1
 8008e2e:	3201      	adds	r2, #1
 8008e30:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 8008e32:	230e      	movs	r3, #14
 8008e34:	18fa      	adds	r2, r7, r3
 8008e36:	1cbb      	adds	r3, r7, #2
 8008e38:	7812      	ldrb	r2, [r2, #0]
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d00e      	beq.n	8008e5e <my_find_char_position+0x76>
			break ;
		i++ ;
 8008e40:	210f      	movs	r1, #15
 8008e42:	187b      	adds	r3, r7, r1
 8008e44:	781a      	ldrb	r2, [r3, #0]
 8008e46:	187b      	adds	r3, r7, r1
 8008e48:	3201      	adds	r2, #1
 8008e4a:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 8008e4c:	230f      	movs	r3, #15
 8008e4e:	18fb      	adds	r3, r7, r3
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	18d3      	adds	r3, r2, r3
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d1da      	bne.n	8008e12 <my_find_char_position+0x2a>
 8008e5c:	e000      	b.n	8008e60 <my_find_char_position+0x78>
			break ;
 8008e5e:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 8008e60:	230f      	movs	r3, #15
 8008e62:	18fb      	adds	r3, r7, r3
 8008e64:	781b      	ldrb	r3, [r3, #0]
}
 8008e66:	0018      	movs	r0, r3
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	b004      	add	sp, #16
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <my_nmea_message>:
#include <inttypes.h>
#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b084      	sub	sp, #16
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	60f8      	str	r0, [r7, #12]
 8008e76:	60b9      	str	r1, [r7, #8]
 8008e78:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	2b24      	cmp	r3, #36	; 0x24
 8008e80:	d117      	bne.n	8008eb2 <my_nmea_message+0x44>
    {
        *i = 0 ;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	1c5a      	adds	r2, r3, #1
 8008e8e:	b2d1      	uxtb	r1, r2
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	7011      	strb	r1, [r2, #0]
 8008e94:	001a      	movs	r2, r3
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	189b      	adds	r3, r3, r2
 8008e9a:	68fa      	ldr	r2, [r7, #12]
 8008e9c:	7812      	ldrb	r2, [r2, #0]
 8008e9e:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	001a      	movs	r2, r3
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	189b      	adds	r3, r3, r2
 8008eaa:	2200      	movs	r2, #0
 8008eac:	701a      	strb	r2, [r3, #0]
        return 0 ;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	e045      	b.n	8008f3e <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	2b1f      	cmp	r3, #31
 8008eb8:	d907      	bls.n	8008eca <my_nmea_message+0x5c>
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	2b7e      	cmp	r3, #126	; 0x7e
 8008ec0:	d803      	bhi.n	8008eca <my_nmea_message+0x5c>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d103      	bne.n	8008ed2 <my_nmea_message+0x64>
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	2b0d      	cmp	r3, #13
 8008ed0:	d114      	bne.n	8008efc <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	1c5a      	adds	r2, r3, #1
 8008ed8:	b2d1      	uxtb	r1, r2
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	7011      	strb	r1, [r2, #0]
 8008ede:	001a      	movs	r2, r3
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	189b      	adds	r3, r3, r2
 8008ee4:	68fa      	ldr	r2, [r7, #12]
 8008ee6:	7812      	ldrb	r2, [r2, #0]
 8008ee8:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	001a      	movs	r2, r3
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	189b      	adds	r3, r3, r2
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	701a      	strb	r2, [r3, #0]
        return 1 ;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	e020      	b.n	8008f3e <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	2b0a      	cmp	r3, #10
 8008f02:	d11a      	bne.n	8008f3a <my_nmea_message+0xcc>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d916      	bls.n	8008f3a <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	3b01      	subs	r3, #1
 8008f12:	b2da      	uxtb	r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	701a      	strb	r2, [r3, #0]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	001a      	movs	r2, r3
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	189b      	adds	r3, r3, r2
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	2b0d      	cmp	r3, #13
 8008f26:	d108      	bne.n	8008f3a <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	001a      	movs	r2, r3
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	189b      	adds	r3, r3, r2
 8008f32:	2200      	movs	r2, #0
 8008f34:	701a      	strb	r2, [r3, #0]
            return 2 ;
 8008f36:	2302      	movs	r3, #2
 8008f38:	e001      	b.n	8008f3e <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	425b      	negs	r3, r3
}
 8008f3e:	0018      	movs	r0, r3
 8008f40:	46bd      	mov	sp, r7
 8008f42:	b004      	add	sp, #16
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <get_my_nmea_gngsa_fixed_mode_s>:

const char get_my_nmea_gngsa_fixed_mode_s ( const char* m )
{
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b082      	sub	sp, #8
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
	return m[9] ;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	3309      	adds	r3, #9
 8008f52:	781b      	ldrb	r3, [r3, #0]
}
 8008f54:	0018      	movs	r0, r3
 8008f56:	46bd      	mov	sp, r7
 8008f58:	b002      	add	sp, #8
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <get_my_nmea_gngsa_pdop_d>:

double get_my_nmea_gngsa_pdop_d ( const char* m )
{
 8008f5c:	b5b0      	push	{r4, r5, r7, lr}
 8008f5e:	b086      	sub	sp, #24
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
	uint8_t pdop_position = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION ) + 1 ;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	220f      	movs	r2, #15
 8008f68:	212c      	movs	r1, #44	; 0x2c
 8008f6a:	0018      	movs	r0, r3
 8008f6c:	f7ff ff3c 	bl	8008de8 <my_find_char_position>
 8008f70:	0003      	movs	r3, r0
 8008f72:	001a      	movs	r2, r3
 8008f74:	2517      	movs	r5, #23
 8008f76:	197b      	adds	r3, r7, r5
 8008f78:	3201      	adds	r2, #1
 8008f7a:	701a      	strb	r2, [r3, #0]
	uint8_t pdop_length = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION + 1 ) - pdop_position ;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2210      	movs	r2, #16
 8008f80:	212c      	movs	r1, #44	; 0x2c
 8008f82:	0018      	movs	r0, r3
 8008f84:	f7ff ff30 	bl	8008de8 <my_find_char_position>
 8008f88:	0003      	movs	r3, r0
 8008f8a:	0019      	movs	r1, r3
 8008f8c:	2416      	movs	r4, #22
 8008f8e:	193b      	adds	r3, r7, r4
 8008f90:	197a      	adds	r2, r7, r5
 8008f92:	7812      	ldrb	r2, [r2, #0]
 8008f94:	1a8a      	subs	r2, r1, r2
 8008f96:	701a      	strb	r2, [r3, #0]

	char* pdop_s = (char*) malloc ( ( pdop_length +1 ) * sizeof ( char ) ) ;
 8008f98:	193b      	adds	r3, r7, r4
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	0018      	movs	r0, r3
 8008fa0:	f000 fb72 	bl	8009688 <malloc>
 8008fa4:	0003      	movs	r3, r0
 8008fa6:	613b      	str	r3, [r7, #16]
	strncpy ( pdop_s , m + pdop_position , pdop_length ) ; // Kopiowanie fragmentu łańcucha
 8008fa8:	197b      	adds	r3, r7, r5
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	18d1      	adds	r1, r2, r3
 8008fb0:	193b      	adds	r3, r7, r4
 8008fb2:	781a      	ldrb	r2, [r3, #0]
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	0018      	movs	r0, r3
 8008fb8:	f001 fe13 	bl	800abe2 <strncpy>
	pdop_s[pdop_length] = '\0';
 8008fbc:	193b      	adds	r3, r7, r4
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	693a      	ldr	r2, [r7, #16]
 8008fc2:	18d3      	adds	r3, r2, r3
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	701a      	strb	r2, [r3, #0]
	double pdop = my_string2double_conv ( pdop_s ) ;
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	0018      	movs	r0, r3
 8008fcc:	f7ff fef8 	bl	8008dc0 <my_string2double_conv>
 8008fd0:	0002      	movs	r2, r0
 8008fd2:	000b      	movs	r3, r1
 8008fd4:	60ba      	str	r2, [r7, #8]
 8008fd6:	60fb      	str	r3, [r7, #12]
	free ( pdop_s ) ;
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	0018      	movs	r0, r3
 8008fdc:	f000 fb5e 	bl	800969c <free>
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
 8008fe0:	68ba      	ldr	r2, [r7, #8]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
}
 8008fe4:	0010      	movs	r0, r2
 8008fe6:	0019      	movs	r1, r3
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	b006      	add	sp, #24
 8008fec:	bdb0      	pop	{r4, r5, r7, pc}

08008fee <is_my_nmea_checksum_ok>:


bool is_my_nmea_checksum_ok ( const char* s )
{
 8008fee:	b590      	push	{r4, r7, lr}
 8008ff0:	b085      	sub	sp, #20
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 8008ff6:	230f      	movs	r3, #15
 8008ff8:	18fb      	adds	r3, r7, r3
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 8008ffe:	230e      	movs	r3, #14
 8009000:	18fb      	adds	r3, r7, r3
 8009002:	2201      	movs	r2, #1
 8009004:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8009006:	e00f      	b.n	8009028 <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 8009008:	220e      	movs	r2, #14
 800900a:	18bb      	adds	r3, r7, r2
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	18ba      	adds	r2, r7, r2
 8009010:	1c59      	adds	r1, r3, #1
 8009012:	7011      	strb	r1, [r2, #0]
 8009014:	001a      	movs	r2, r3
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	189b      	adds	r3, r3, r2
 800901a:	7819      	ldrb	r1, [r3, #0]
 800901c:	220f      	movs	r2, #15
 800901e:	18bb      	adds	r3, r7, r2
 8009020:	18ba      	adds	r2, r7, r2
 8009022:	7812      	ldrb	r2, [r2, #0]
 8009024:	404a      	eors	r2, r1
 8009026:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8009028:	210e      	movs	r1, #14
 800902a:	187b      	adds	r3, r7, r1
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	687a      	ldr	r2, [r7, #4]
 8009030:	18d3      	adds	r3, r2, r3
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	2b2a      	cmp	r3, #42	; 0x2a
 8009036:	d00a      	beq.n	800904e <is_my_nmea_checksum_ok+0x60>
 8009038:	187b      	adds	r3, r7, r1
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	18d3      	adds	r3, r2, r3
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d003      	beq.n	800904e <is_my_nmea_checksum_ok+0x60>
 8009046:	187b      	adds	r3, r7, r1
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d1dc      	bne.n	8009008 <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 800904e:	230f      	movs	r3, #15
 8009050:	18fb      	adds	r3, r7, r3
 8009052:	781c      	ldrb	r4, [r3, #0]
 8009054:	210e      	movs	r1, #14
 8009056:	187b      	adds	r3, r7, r1
 8009058:	187a      	adds	r2, r7, r1
 800905a:	7812      	ldrb	r2, [r2, #0]
 800905c:	3201      	adds	r2, #1
 800905e:	701a      	strb	r2, [r3, #0]
 8009060:	187b      	adds	r3, r7, r1
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	18d3      	adds	r3, r2, r3
 8009068:	2210      	movs	r2, #16
 800906a:	2100      	movs	r1, #0
 800906c:	0018      	movs	r0, r3
 800906e:	f001 fc05 	bl	800a87c <strtol>
 8009072:	0003      	movs	r3, r0
 8009074:	1ae3      	subs	r3, r4, r3
 8009076:	425a      	negs	r2, r3
 8009078:	4153      	adcs	r3, r2
 800907a:	b2db      	uxtb	r3, r3
}
 800907c:	0018      	movs	r0, r3
 800907e:	46bd      	mov	sp, r7
 8009080:	b005      	add	sp, #20
 8009082:	bd90      	pop	{r4, r7, pc}

08009084 <nmea2decimal>:
double nmea2decimal ( const char *coord , char dir )
{
 8009084:	b5b0      	push	{r4, r5, r7, lr}
 8009086:	b086      	sub	sp, #24
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	000a      	movs	r2, r1
 800908e:	1cfb      	adds	r3, r7, #3
 8009090:	701a      	strb	r2, [r3, #0]
    double deg , min ;
    sscanf ( coord , "%lf" , &deg ) ;
 8009092:	2308      	movs	r3, #8
 8009094:	18fa      	adds	r2, r7, r3
 8009096:	492f      	ldr	r1, [pc, #188]	; (8009154 <nmea2decimal+0xd0>)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	0018      	movs	r0, r3
 800909c:	f001 fd12 	bl	800aac4 <sscanf>
    min = deg / 100 ;
 80090a0:	68b8      	ldr	r0, [r7, #8]
 80090a2:	68f9      	ldr	r1, [r7, #12]
 80090a4:	2200      	movs	r2, #0
 80090a6:	4b2c      	ldr	r3, [pc, #176]	; (8009158 <nmea2decimal+0xd4>)
 80090a8:	f7f7 fee6 	bl	8000e78 <__aeabi_ddiv>
 80090ac:	0002      	movs	r2, r0
 80090ae:	000b      	movs	r3, r1
 80090b0:	613a      	str	r2, [r7, #16]
 80090b2:	617b      	str	r3, [r7, #20]
    deg = (int) min ;
 80090b4:	6938      	ldr	r0, [r7, #16]
 80090b6:	6979      	ldr	r1, [r7, #20]
 80090b8:	f7f9 f93a 	bl	8002330 <__aeabi_d2iz>
 80090bc:	0003      	movs	r3, r0
 80090be:	0018      	movs	r0, r3
 80090c0:	f7f9 f96c 	bl	800239c <__aeabi_i2d>
 80090c4:	0002      	movs	r2, r0
 80090c6:	000b      	movs	r3, r1
 80090c8:	60ba      	str	r2, [r7, #8]
 80090ca:	60fb      	str	r3, [r7, #12]
    min = ( min - deg ) * 10 ;
 80090cc:	68ba      	ldr	r2, [r7, #8]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	6938      	ldr	r0, [r7, #16]
 80090d2:	6979      	ldr	r1, [r7, #20]
 80090d4:	f7f8 fd8c 	bl	8001bf0 <__aeabi_dsub>
 80090d8:	0002      	movs	r2, r0
 80090da:	000b      	movs	r3, r1
 80090dc:	0010      	movs	r0, r2
 80090de:	0019      	movs	r1, r3
 80090e0:	2200      	movs	r2, #0
 80090e2:	4b1e      	ldr	r3, [pc, #120]	; (800915c <nmea2decimal+0xd8>)
 80090e4:	f7f8 fac2 	bl	800166c <__aeabi_dmul>
 80090e8:	0002      	movs	r2, r0
 80090ea:	000b      	movs	r3, r1
 80090ec:	613a      	str	r2, [r7, #16]
 80090ee:	617b      	str	r3, [r7, #20]
    min = min / 6 ;
 80090f0:	2200      	movs	r2, #0
 80090f2:	4b1b      	ldr	r3, [pc, #108]	; (8009160 <nmea2decimal+0xdc>)
 80090f4:	6938      	ldr	r0, [r7, #16]
 80090f6:	6979      	ldr	r1, [r7, #20]
 80090f8:	f7f7 febe 	bl	8000e78 <__aeabi_ddiv>
 80090fc:	0002      	movs	r2, r0
 80090fe:	000b      	movs	r3, r1
 8009100:	613a      	str	r2, [r7, #16]
 8009102:	617b      	str	r3, [r7, #20]
    //double c = deg + min ;
    if ( dir == 'S' || dir == 'W' )
 8009104:	1cfb      	adds	r3, r7, #3
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	2b53      	cmp	r3, #83	; 0x53
 800910a:	d003      	beq.n	8009114 <nmea2decimal+0x90>
 800910c:	1cfb      	adds	r3, r7, #3
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	2b57      	cmp	r3, #87	; 0x57
 8009112:	d10e      	bne.n	8009132 <nmea2decimal+0xae>
    	return ( deg + min ) * -1 ;
 8009114:	68b8      	ldr	r0, [r7, #8]
 8009116:	68f9      	ldr	r1, [r7, #12]
 8009118:	693a      	ldr	r2, [r7, #16]
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	f7f7 fb4c 	bl	80007b8 <__aeabi_dadd>
 8009120:	0002      	movs	r2, r0
 8009122:	000b      	movs	r3, r1
 8009124:	0011      	movs	r1, r2
 8009126:	000c      	movs	r4, r1
 8009128:	2180      	movs	r1, #128	; 0x80
 800912a:	0609      	lsls	r1, r1, #24
 800912c:	4059      	eors	r1, r3
 800912e:	000d      	movs	r5, r1
 8009130:	e009      	b.n	8009146 <nmea2decimal+0xc2>
    else
    	return deg + min ;
 8009132:	68b8      	ldr	r0, [r7, #8]
 8009134:	68f9      	ldr	r1, [r7, #12]
 8009136:	693a      	ldr	r2, [r7, #16]
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	f7f7 fb3d 	bl	80007b8 <__aeabi_dadd>
 800913e:	0002      	movs	r2, r0
 8009140:	000b      	movs	r3, r1
 8009142:	0014      	movs	r4, r2
 8009144:	001d      	movs	r5, r3
}
 8009146:	0022      	movs	r2, r4
 8009148:	002b      	movs	r3, r5
 800914a:	0010      	movs	r0, r2
 800914c:	0019      	movs	r1, r3
 800914e:	46bd      	mov	sp, r7
 8009150:	b006      	add	sp, #24
 8009152:	bdb0      	pop	{r4, r5, r7, pc}
 8009154:	08012fa8 	.word	0x08012fa8
 8009158:	40590000 	.word	0x40590000
 800915c:	40240000 	.word	0x40240000
 8009160:	40180000 	.word	0x40180000

08009164 <get_my_nmea_gngll_coordinates>:

void get_my_nmea_gngll_coordinates ( const char* m , char* latitude_s , char* longitude_s , int32_t* latitude_astro_geo_wr , int32_t* longitude_astro_geo_wr )
{
 8009164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009166:	b091      	sub	sp, #68	; 0x44
 8009168:	af02      	add	r7, sp, #8
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	60b9      	str	r1, [r7, #8]
 800916e:	607a      	str	r2, [r7, #4]
 8009170:	603b      	str	r3, [r7, #0]
	char direction ;

	//Latitude part
	uint8_t coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION ) + 1 ;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2201      	movs	r2, #1
 8009176:	212c      	movs	r1, #44	; 0x2c
 8009178:	0018      	movs	r0, r3
 800917a:	f7ff fe35 	bl	8008de8 <my_find_char_position>
 800917e:	0003      	movs	r3, r0
 8009180:	001a      	movs	r2, r3
 8009182:	2537      	movs	r5, #55	; 0x37
 8009184:	197b      	adds	r3, r7, r5
 8009186:	3201      	adds	r2, #1
 8009188:	701a      	strb	r2, [r3, #0]
	uint8_t coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2202      	movs	r2, #2
 800918e:	212c      	movs	r1, #44	; 0x2c
 8009190:	0018      	movs	r0, r3
 8009192:	f7ff fe29 	bl	8008de8 <my_find_char_position>
 8009196:	0003      	movs	r3, r0
 8009198:	0019      	movs	r1, r3
 800919a:	2436      	movs	r4, #54	; 0x36
 800919c:	193b      	adds	r3, r7, r4
 800919e:	197a      	adds	r2, r7, r5
 80091a0:	7812      	ldrb	r2, [r2, #0]
 80091a2:	1a8a      	subs	r2, r1, r2
 80091a4:	701a      	strb	r2, [r3, #0]

	char* latitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 80091a6:	193b      	adds	r3, r7, r4
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	3301      	adds	r3, #1
 80091ac:	0018      	movs	r0, r3
 80091ae:	f000 fa6b 	bl	8009688 <malloc>
 80091b2:	0003      	movs	r3, r0
 80091b4:	633b      	str	r3, [r7, #48]	; 0x30
	strncpy ( latitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 80091b6:	197b      	adds	r3, r7, r5
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	68fa      	ldr	r2, [r7, #12]
 80091bc:	18d1      	adds	r1, r2, r3
 80091be:	193b      	adds	r3, r7, r4
 80091c0:	781a      	ldrb	r2, [r3, #0]
 80091c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c4:	0018      	movs	r0, r3
 80091c6:	f001 fd0c 	bl	800abe2 <strncpy>
	latitude_s_temp[coordinate_length] = '\0';
 80091ca:	193b      	adds	r3, r7, r4
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091d0:	18d3      	adds	r3, r2, r3
 80091d2:	2200      	movs	r2, #0
 80091d4:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 80091d6:	197b      	adds	r3, r7, r5
 80091d8:	781a      	ldrb	r2, [r3, #0]
 80091da:	193b      	adds	r3, r7, r4
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	18d3      	adds	r3, r2, r3
 80091e0:	3301      	adds	r3, #1
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	18d2      	adds	r2, r2, r3
 80091e6:	262f      	movs	r6, #47	; 0x2f
 80091e8:	19bb      	adds	r3, r7, r6
 80091ea:	7812      	ldrb	r2, [r2, #0]
 80091ec:	701a      	strb	r2, [r3, #0]
	double latitude_d = nmea2decimal ( latitude_s_temp , direction ) ;
 80091ee:	19bb      	adds	r3, r7, r6
 80091f0:	781a      	ldrb	r2, [r3, #0]
 80091f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f4:	0011      	movs	r1, r2
 80091f6:	0018      	movs	r0, r3
 80091f8:	f7ff ff44 	bl	8009084 <nmea2decimal>
 80091fc:	0002      	movs	r2, r0
 80091fe:	000b      	movs	r3, r1
 8009200:	623a      	str	r2, [r7, #32]
 8009202:	627b      	str	r3, [r7, #36]	; 0x24
	free ( latitude_s_temp ) ;
 8009204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009206:	0018      	movs	r0, r3
 8009208:	f000 fa48 	bl	800969c <free>
	latitude_d = round ( latitude_d * 1e6 ) / 1e6 ;
 800920c:	2200      	movs	r2, #0
 800920e:	4b53      	ldr	r3, [pc, #332]	; (800935c <get_my_nmea_gngll_coordinates+0x1f8>)
 8009210:	6a38      	ldr	r0, [r7, #32]
 8009212:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009214:	f7f8 fa2a 	bl	800166c <__aeabi_dmul>
 8009218:	0002      	movs	r2, r0
 800921a:	000b      	movs	r3, r1
 800921c:	0010      	movs	r0, r2
 800921e:	0019      	movs	r1, r3
 8009220:	f008 f9fc 	bl	801161c <round>
 8009224:	2200      	movs	r2, #0
 8009226:	4b4d      	ldr	r3, [pc, #308]	; (800935c <get_my_nmea_gngll_coordinates+0x1f8>)
 8009228:	f7f7 fe26 	bl	8000e78 <__aeabi_ddiv>
 800922c:	0002      	movs	r2, r0
 800922e:	000b      	movs	r3, r1
 8009230:	623a      	str	r2, [r7, #32]
 8009232:	627b      	str	r3, [r7, #36]	; 0x24
	snprintf ( latitude_s , 12 , "%.6lf" , latitude_d ) ;
 8009234:	494a      	ldr	r1, [pc, #296]	; (8009360 <get_my_nmea_gngll_coordinates+0x1fc>)
 8009236:	68b8      	ldr	r0, [r7, #8]
 8009238:	6a3a      	ldr	r2, [r7, #32]
 800923a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923c:	9200      	str	r2, [sp, #0]
 800923e:	9301      	str	r3, [sp, #4]
 8009240:	000a      	movs	r2, r1
 8009242:	210c      	movs	r1, #12
 8009244:	f001 fbea 	bl	800aa1c <snprintf>
	*latitude_astro_geo_wr = (int32_t) ( latitude_d * 10000000 ) ;
 8009248:	2200      	movs	r2, #0
 800924a:	4b46      	ldr	r3, [pc, #280]	; (8009364 <get_my_nmea_gngll_coordinates+0x200>)
 800924c:	6a38      	ldr	r0, [r7, #32]
 800924e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009250:	f7f8 fa0c 	bl	800166c <__aeabi_dmul>
 8009254:	0002      	movs	r2, r0
 8009256:	000b      	movs	r3, r1
 8009258:	0010      	movs	r0, r2
 800925a:	0019      	movs	r1, r3
 800925c:	f7f9 f868 	bl	8002330 <__aeabi_d2iz>
 8009260:	0002      	movs	r2, r0
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	601a      	str	r2, [r3, #0]

	//Longitude part
	coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2) + 1 ;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2203      	movs	r2, #3
 800926a:	212c      	movs	r1, #44	; 0x2c
 800926c:	0018      	movs	r0, r3
 800926e:	f7ff fdbb 	bl	8008de8 <my_find_char_position>
 8009272:	0003      	movs	r3, r0
 8009274:	001a      	movs	r2, r3
 8009276:	197b      	adds	r3, r7, r5
 8009278:	3201      	adds	r2, #1
 800927a:	701a      	strb	r2, [r3, #0]
	coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2 + 1 ) - coordinate_position ;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2204      	movs	r2, #4
 8009280:	212c      	movs	r1, #44	; 0x2c
 8009282:	0018      	movs	r0, r3
 8009284:	f7ff fdb0 	bl	8008de8 <my_find_char_position>
 8009288:	0003      	movs	r3, r0
 800928a:	0019      	movs	r1, r3
 800928c:	193b      	adds	r3, r7, r4
 800928e:	197a      	adds	r2, r7, r5
 8009290:	7812      	ldrb	r2, [r2, #0]
 8009292:	1a8a      	subs	r2, r1, r2
 8009294:	701a      	strb	r2, [r3, #0]

	char* longitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 8009296:	193b      	adds	r3, r7, r4
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	3301      	adds	r3, #1
 800929c:	0018      	movs	r0, r3
 800929e:	f000 f9f3 	bl	8009688 <malloc>
 80092a2:	0003      	movs	r3, r0
 80092a4:	61fb      	str	r3, [r7, #28]
	strncpy ( longitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 80092a6:	197b      	adds	r3, r7, r5
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	68fa      	ldr	r2, [r7, #12]
 80092ac:	18d1      	adds	r1, r2, r3
 80092ae:	193b      	adds	r3, r7, r4
 80092b0:	781a      	ldrb	r2, [r3, #0]
 80092b2:	69fb      	ldr	r3, [r7, #28]
 80092b4:	0018      	movs	r0, r3
 80092b6:	f001 fc94 	bl	800abe2 <strncpy>
	longitude_s_temp[coordinate_length] = '\0';
 80092ba:	193b      	adds	r3, r7, r4
 80092bc:	781b      	ldrb	r3, [r3, #0]
 80092be:	69fa      	ldr	r2, [r7, #28]
 80092c0:	18d3      	adds	r3, r2, r3
 80092c2:	2200      	movs	r2, #0
 80092c4:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 80092c6:	197b      	adds	r3, r7, r5
 80092c8:	781a      	ldrb	r2, [r3, #0]
 80092ca:	193b      	adds	r3, r7, r4
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	18d3      	adds	r3, r2, r3
 80092d0:	3301      	adds	r3, #1
 80092d2:	68fa      	ldr	r2, [r7, #12]
 80092d4:	18d2      	adds	r2, r2, r3
 80092d6:	19bb      	adds	r3, r7, r6
 80092d8:	7812      	ldrb	r2, [r2, #0]
 80092da:	701a      	strb	r2, [r3, #0]
	double longitude_d = nmea2decimal ( longitude_s_temp , direction ) ;
 80092dc:	19bb      	adds	r3, r7, r6
 80092de:	781a      	ldrb	r2, [r3, #0]
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	0011      	movs	r1, r2
 80092e4:	0018      	movs	r0, r3
 80092e6:	f7ff fecd 	bl	8009084 <nmea2decimal>
 80092ea:	0002      	movs	r2, r0
 80092ec:	000b      	movs	r3, r1
 80092ee:	613a      	str	r2, [r7, #16]
 80092f0:	617b      	str	r3, [r7, #20]
	free ( longitude_s_temp ) ;
 80092f2:	69fb      	ldr	r3, [r7, #28]
 80092f4:	0018      	movs	r0, r3
 80092f6:	f000 f9d1 	bl	800969c <free>
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
 80092fa:	2200      	movs	r2, #0
 80092fc:	4b17      	ldr	r3, [pc, #92]	; (800935c <get_my_nmea_gngll_coordinates+0x1f8>)
 80092fe:	6938      	ldr	r0, [r7, #16]
 8009300:	6979      	ldr	r1, [r7, #20]
 8009302:	f7f8 f9b3 	bl	800166c <__aeabi_dmul>
 8009306:	0002      	movs	r2, r0
 8009308:	000b      	movs	r3, r1
 800930a:	0010      	movs	r0, r2
 800930c:	0019      	movs	r1, r3
 800930e:	f008 f985 	bl	801161c <round>
 8009312:	2200      	movs	r2, #0
 8009314:	4b11      	ldr	r3, [pc, #68]	; (800935c <get_my_nmea_gngll_coordinates+0x1f8>)
 8009316:	f7f7 fdaf 	bl	8000e78 <__aeabi_ddiv>
 800931a:	0002      	movs	r2, r0
 800931c:	000b      	movs	r3, r1
 800931e:	613a      	str	r2, [r7, #16]
 8009320:	617b      	str	r3, [r7, #20]
	snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
 8009322:	490f      	ldr	r1, [pc, #60]	; (8009360 <get_my_nmea_gngll_coordinates+0x1fc>)
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	693a      	ldr	r2, [r7, #16]
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	9200      	str	r2, [sp, #0]
 800932c:	9301      	str	r3, [sp, #4]
 800932e:	000a      	movs	r2, r1
 8009330:	210c      	movs	r1, #12
 8009332:	f001 fb73 	bl	800aa1c <snprintf>
	*longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
 8009336:	2200      	movs	r2, #0
 8009338:	4b0a      	ldr	r3, [pc, #40]	; (8009364 <get_my_nmea_gngll_coordinates+0x200>)
 800933a:	6938      	ldr	r0, [r7, #16]
 800933c:	6979      	ldr	r1, [r7, #20]
 800933e:	f7f8 f995 	bl	800166c <__aeabi_dmul>
 8009342:	0002      	movs	r2, r0
 8009344:	000b      	movs	r3, r1
 8009346:	0010      	movs	r0, r2
 8009348:	0019      	movs	r1, r3
 800934a:	f7f8 fff1 	bl	8002330 <__aeabi_d2iz>
 800934e:	0002      	movs	r2, r0
 8009350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009352:	601a      	str	r2, [r3, #0]
}
 8009354:	46c0      	nop			; (mov r8, r8)
 8009356:	46bd      	mov	sp, r7
 8009358:	b00f      	add	sp, #60	; 0x3c
 800935a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800935c:	412e8480 	.word	0x412e8480
 8009360:	08012fac 	.word	0x08012fac
 8009364:	416312d0 	.word	0x416312d0

08009368 <get_my_nmea_rmc_date_yy>:

void get_my_nmea_rmc_date_yy ( const char* m , uint8_t* yy )
{
 8009368:	b590      	push	{r4, r7, lr}
 800936a:	b087      	sub	sp, #28
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_YY_OFFSET ;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2209      	movs	r2, #9
 8009376:	212c      	movs	r1, #44	; 0x2c
 8009378:	0018      	movs	r0, r3
 800937a:	f7ff fd35 	bl	8008de8 <my_find_char_position>
 800937e:	0003      	movs	r3, r0
 8009380:	001a      	movs	r2, r3
 8009382:	2417      	movs	r4, #23
 8009384:	193b      	adds	r3, r7, r4
 8009386:	3205      	adds	r2, #5
 8009388:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800938a:	2003      	movs	r0, #3
 800938c:	f000 f97c 	bl	8009688 <malloc>
 8009390:	0003      	movs	r3, r0
 8009392:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8009394:	193b      	adds	r3, r7, r4
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	18d1      	adds	r1, r2, r3
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	2202      	movs	r2, #2
 80093a0:	0018      	movs	r0, r3
 80093a2:	f001 fc1e 	bl	800abe2 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	3302      	adds	r3, #2
 80093aa:	2200      	movs	r2, #0
 80093ac:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , yy ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 80093ae:	240e      	movs	r4, #14
 80093b0:	193a      	adds	r2, r7, r4
 80093b2:	4909      	ldr	r1, [pc, #36]	; (80093d8 <get_my_nmea_rmc_date_yy+0x70>)
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	0018      	movs	r0, r3
 80093b8:	f001 fb84 	bl	800aac4 <sscanf>
	free ( s ) ;
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	0018      	movs	r0, r3
 80093c0:	f000 f96c 	bl	800969c <free>
	*yy = (uint8_t) temp ;
 80093c4:	193b      	adds	r3, r7, r4
 80093c6:	881b      	ldrh	r3, [r3, #0]
 80093c8:	b2da      	uxtb	r2, r3
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	701a      	strb	r2, [r3, #0]

}
 80093ce:	46c0      	nop			; (mov r8, r8)
 80093d0:	46bd      	mov	sp, r7
 80093d2:	b007      	add	sp, #28
 80093d4:	bd90      	pop	{r4, r7, pc}
 80093d6:	46c0      	nop			; (mov r8, r8)
 80093d8:	08012fb4 	.word	0x08012fb4

080093dc <get_my_nmea_rmc_date_mm>:
void get_my_nmea_rmc_date_mm ( const char* m , uint8_t* mm )
{
 80093dc:	b590      	push	{r4, r7, lr}
 80093de:	b087      	sub	sp, #28
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_MM_OFFSET ;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2209      	movs	r2, #9
 80093ea:	212c      	movs	r1, #44	; 0x2c
 80093ec:	0018      	movs	r0, r3
 80093ee:	f7ff fcfb 	bl	8008de8 <my_find_char_position>
 80093f2:	0003      	movs	r3, r0
 80093f4:	001a      	movs	r2, r3
 80093f6:	2417      	movs	r4, #23
 80093f8:	193b      	adds	r3, r7, r4
 80093fa:	3203      	adds	r2, #3
 80093fc:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 80093fe:	2003      	movs	r0, #3
 8009400:	f000 f942 	bl	8009688 <malloc>
 8009404:	0003      	movs	r3, r0
 8009406:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8009408:	193b      	adds	r3, r7, r4
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	18d1      	adds	r1, r2, r3
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	2202      	movs	r2, #2
 8009414:	0018      	movs	r0, r3
 8009416:	f001 fbe4 	bl	800abe2 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	3302      	adds	r3, #2
 800941e:	2200      	movs	r2, #0
 8009420:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 8009422:	240e      	movs	r4, #14
 8009424:	193a      	adds	r2, r7, r4
 8009426:	4909      	ldr	r1, [pc, #36]	; (800944c <get_my_nmea_rmc_date_mm+0x70>)
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	0018      	movs	r0, r3
 800942c:	f001 fb4a 	bl	800aac4 <sscanf>
	free ( s ) ;
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	0018      	movs	r0, r3
 8009434:	f000 f932 	bl	800969c <free>
	*mm = (uint8_t) temp ;
 8009438:	193b      	adds	r3, r7, r4
 800943a:	881b      	ldrh	r3, [r3, #0]
 800943c:	b2da      	uxtb	r2, r3
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	701a      	strb	r2, [r3, #0]

}
 8009442:	46c0      	nop			; (mov r8, r8)
 8009444:	46bd      	mov	sp, r7
 8009446:	b007      	add	sp, #28
 8009448:	bd90      	pop	{r4, r7, pc}
 800944a:	46c0      	nop			; (mov r8, r8)
 800944c:	08012fb4 	.word	0x08012fb4

08009450 <get_my_nmea_rmc_date_dd>:
void get_my_nmea_rmc_date_dd ( const char* m , uint8_t* dd )
{
 8009450:	b590      	push	{r4, r7, lr}
 8009452:	b087      	sub	sp, #28
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_DD_OFFSET ;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2209      	movs	r2, #9
 800945e:	212c      	movs	r1, #44	; 0x2c
 8009460:	0018      	movs	r0, r3
 8009462:	f7ff fcc1 	bl	8008de8 <my_find_char_position>
 8009466:	0003      	movs	r3, r0
 8009468:	001a      	movs	r2, r3
 800946a:	2417      	movs	r4, #23
 800946c:	193b      	adds	r3, r7, r4
 800946e:	3201      	adds	r2, #1
 8009470:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 8009472:	2003      	movs	r0, #3
 8009474:	f000 f908 	bl	8009688 <malloc>
 8009478:	0003      	movs	r3, r0
 800947a:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800947c:	193b      	adds	r3, r7, r4
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	18d1      	adds	r1, r2, r3
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	2202      	movs	r2, #2
 8009488:	0018      	movs	r0, r3
 800948a:	f001 fbaa 	bl	800abe2 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	3302      	adds	r3, #2
 8009492:	2200      	movs	r2, #0
 8009494:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , dd ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 8009496:	240e      	movs	r4, #14
 8009498:	193a      	adds	r2, r7, r4
 800949a:	4909      	ldr	r1, [pc, #36]	; (80094c0 <get_my_nmea_rmc_date_dd+0x70>)
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	0018      	movs	r0, r3
 80094a0:	f001 fb10 	bl	800aac4 <sscanf>
	free ( s ) ;
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	0018      	movs	r0, r3
 80094a8:	f000 f8f8 	bl	800969c <free>
	*dd = (uint8_t) temp ;
 80094ac:	193b      	adds	r3, r7, r4
 80094ae:	881b      	ldrh	r3, [r3, #0]
 80094b0:	b2da      	uxtb	r2, r3
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	701a      	strb	r2, [r3, #0]

}
 80094b6:	46c0      	nop			; (mov r8, r8)
 80094b8:	46bd      	mov	sp, r7
 80094ba:	b007      	add	sp, #28
 80094bc:	bd90      	pop	{r4, r7, pc}
 80094be:	46c0      	nop			; (mov r8, r8)
 80094c0:	08012fb4 	.word	0x08012fb4

080094c4 <get_my_nmea_rmc_utc_hh>:
void get_my_nmea_rmc_utc_hh ( const char* m , uint8_t* hh )
{
 80094c4:	b590      	push	{r4, r7, lr}
 80094c6:	b087      	sub	sp, #28
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_HH_OFFSET ;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2201      	movs	r2, #1
 80094d2:	212c      	movs	r1, #44	; 0x2c
 80094d4:	0018      	movs	r0, r3
 80094d6:	f7ff fc87 	bl	8008de8 <my_find_char_position>
 80094da:	0003      	movs	r3, r0
 80094dc:	001a      	movs	r2, r3
 80094de:	2417      	movs	r4, #23
 80094e0:	193b      	adds	r3, r7, r4
 80094e2:	3201      	adds	r2, #1
 80094e4:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 80094e6:	2003      	movs	r0, #3
 80094e8:	f000 f8ce 	bl	8009688 <malloc>
 80094ec:	0003      	movs	r3, r0
 80094ee:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 80094f0:	193b      	adds	r3, r7, r4
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	18d1      	adds	r1, r2, r3
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	2202      	movs	r2, #2
 80094fc:	0018      	movs	r0, r3
 80094fe:	f001 fb70 	bl	800abe2 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	3302      	adds	r3, #2
 8009506:	2200      	movs	r2, #0
 8009508:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , hh ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800950a:	240e      	movs	r4, #14
 800950c:	193a      	adds	r2, r7, r4
 800950e:	4909      	ldr	r1, [pc, #36]	; (8009534 <get_my_nmea_rmc_utc_hh+0x70>)
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	0018      	movs	r0, r3
 8009514:	f001 fad6 	bl	800aac4 <sscanf>
	free ( s ) ;
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	0018      	movs	r0, r3
 800951c:	f000 f8be 	bl	800969c <free>
	*hh = (uint8_t) temp ;
 8009520:	193b      	adds	r3, r7, r4
 8009522:	881b      	ldrh	r3, [r3, #0]
 8009524:	b2da      	uxtb	r2, r3
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	701a      	strb	r2, [r3, #0]

}
 800952a:	46c0      	nop			; (mov r8, r8)
 800952c:	46bd      	mov	sp, r7
 800952e:	b007      	add	sp, #28
 8009530:	bd90      	pop	{r4, r7, pc}
 8009532:	46c0      	nop			; (mov r8, r8)
 8009534:	08012fb4 	.word	0x08012fb4

08009538 <get_my_nmea_rmc_utc_mm>:
void get_my_nmea_rmc_utc_mm ( const char* m , uint8_t* mm )
{
 8009538:	b590      	push	{r4, r7, lr}
 800953a:	b087      	sub	sp, #28
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_MM_OFFSET ;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2201      	movs	r2, #1
 8009546:	212c      	movs	r1, #44	; 0x2c
 8009548:	0018      	movs	r0, r3
 800954a:	f7ff fc4d 	bl	8008de8 <my_find_char_position>
 800954e:	0003      	movs	r3, r0
 8009550:	001a      	movs	r2, r3
 8009552:	2417      	movs	r4, #23
 8009554:	193b      	adds	r3, r7, r4
 8009556:	3203      	adds	r2, #3
 8009558:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800955a:	2003      	movs	r0, #3
 800955c:	f000 f894 	bl	8009688 <malloc>
 8009560:	0003      	movs	r3, r0
 8009562:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8009564:	193b      	adds	r3, r7, r4
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	18d1      	adds	r1, r2, r3
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	2202      	movs	r2, #2
 8009570:	0018      	movs	r0, r3
 8009572:	f001 fb36 	bl	800abe2 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	3302      	adds	r3, #2
 800957a:	2200      	movs	r2, #0
 800957c:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800957e:	240e      	movs	r4, #14
 8009580:	193a      	adds	r2, r7, r4
 8009582:	4909      	ldr	r1, [pc, #36]	; (80095a8 <get_my_nmea_rmc_utc_mm+0x70>)
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	0018      	movs	r0, r3
 8009588:	f001 fa9c 	bl	800aac4 <sscanf>
	free ( s ) ;
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	0018      	movs	r0, r3
 8009590:	f000 f884 	bl	800969c <free>
	*mm = (uint8_t) temp ;
 8009594:	193b      	adds	r3, r7, r4
 8009596:	881b      	ldrh	r3, [r3, #0]
 8009598:	b2da      	uxtb	r2, r3
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	701a      	strb	r2, [r3, #0]

}
 800959e:	46c0      	nop			; (mov r8, r8)
 80095a0:	46bd      	mov	sp, r7
 80095a2:	b007      	add	sp, #28
 80095a4:	bd90      	pop	{r4, r7, pc}
 80095a6:	46c0      	nop			; (mov r8, r8)
 80095a8:	08012fb4 	.word	0x08012fb4

080095ac <get_my_nmea_rmc_utc_ss>:
void get_my_nmea_rmc_utc_ss ( const char* m , uint8_t* ss )
{
 80095ac:	b590      	push	{r4, r7, lr}
 80095ae:	b087      	sub	sp, #28
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SS_OFFSET ;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2201      	movs	r2, #1
 80095ba:	212c      	movs	r1, #44	; 0x2c
 80095bc:	0018      	movs	r0, r3
 80095be:	f7ff fc13 	bl	8008de8 <my_find_char_position>
 80095c2:	0003      	movs	r3, r0
 80095c4:	001a      	movs	r2, r3
 80095c6:	2417      	movs	r4, #23
 80095c8:	193b      	adds	r3, r7, r4
 80095ca:	3205      	adds	r2, #5
 80095cc:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 80095ce:	2003      	movs	r0, #3
 80095d0:	f000 f85a 	bl	8009688 <malloc>
 80095d4:	0003      	movs	r3, r0
 80095d6:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 80095d8:	193b      	adds	r3, r7, r4
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	18d1      	adds	r1, r2, r3
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	2202      	movs	r2, #2
 80095e4:	0018      	movs	r0, r3
 80095e6:	f001 fafc 	bl	800abe2 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	3302      	adds	r3, #2
 80095ee:	2200      	movs	r2, #0
 80095f0:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , ss ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 80095f2:	240e      	movs	r4, #14
 80095f4:	193a      	adds	r2, r7, r4
 80095f6:	4909      	ldr	r1, [pc, #36]	; (800961c <get_my_nmea_rmc_utc_ss+0x70>)
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	0018      	movs	r0, r3
 80095fc:	f001 fa62 	bl	800aac4 <sscanf>
	free ( s ) ;
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	0018      	movs	r0, r3
 8009604:	f000 f84a 	bl	800969c <free>
	*ss = (uint8_t) temp ;
 8009608:	193b      	adds	r3, r7, r4
 800960a:	881b      	ldrh	r3, [r3, #0]
 800960c:	b2da      	uxtb	r2, r3
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	701a      	strb	r2, [r3, #0]

}
 8009612:	46c0      	nop			; (mov r8, r8)
 8009614:	46bd      	mov	sp, r7
 8009616:	b007      	add	sp, #28
 8009618:	bd90      	pop	{r4, r7, pc}
 800961a:	46c0      	nop			; (mov r8, r8)
 800961c:	08012fb4 	.word	0x08012fb4

08009620 <get_my_nmea_rmc_utc_sss>:
void get_my_nmea_rmc_utc_sss ( const char* m , uint32_t* sss )
{
 8009620:	b590      	push	{r4, r7, lr}
 8009622:	b085      	sub	sp, #20
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SSS_OFFSET ;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2201      	movs	r2, #1
 800962e:	212c      	movs	r1, #44	; 0x2c
 8009630:	0018      	movs	r0, r3
 8009632:	f7ff fbd9 	bl	8008de8 <my_find_char_position>
 8009636:	0003      	movs	r3, r0
 8009638:	001a      	movs	r2, r3
 800963a:	240f      	movs	r4, #15
 800963c:	193b      	adds	r3, r7, r4
 800963e:	3208      	adds	r2, #8
 8009640:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_SSS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 8009642:	2004      	movs	r0, #4
 8009644:	f000 f820 	bl	8009688 <malloc>
 8009648:	0003      	movs	r3, r0
 800964a:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_UTC_SSS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800964c:	193b      	adds	r3, r7, r4
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	18d1      	adds	r1, r2, r3
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	2203      	movs	r2, #3
 8009658:	0018      	movs	r0, r3
 800965a:	f001 fac2 	bl	800abe2 <strncpy>
	s[RMC_UTC_SSS_LENGTH] = '\0';
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	3303      	adds	r3, #3
 8009662:	2200      	movs	r2, #0
 8009664:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%lu" , sss ) ;
 8009666:	683a      	ldr	r2, [r7, #0]
 8009668:	4906      	ldr	r1, [pc, #24]	; (8009684 <get_my_nmea_rmc_utc_sss+0x64>)
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	0018      	movs	r0, r3
 800966e:	f001 fa29 	bl	800aac4 <sscanf>
	free ( s ) ;
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	0018      	movs	r0, r3
 8009676:	f000 f811 	bl	800969c <free>
}
 800967a:	46c0      	nop			; (mov r8, r8)
 800967c:	46bd      	mov	sp, r7
 800967e:	b005      	add	sp, #20
 8009680:	bd90      	pop	{r4, r7, pc}
 8009682:	46c0      	nop			; (mov r8, r8)
 8009684:	08012fb8 	.word	0x08012fb8

08009688 <malloc>:
 8009688:	b510      	push	{r4, lr}
 800968a:	4b03      	ldr	r3, [pc, #12]	; (8009698 <malloc+0x10>)
 800968c:	0001      	movs	r1, r0
 800968e:	6818      	ldr	r0, [r3, #0]
 8009690:	f000 f80e 	bl	80096b0 <_malloc_r>
 8009694:	bd10      	pop	{r4, pc}
 8009696:	46c0      	nop			; (mov r8, r8)
 8009698:	200006d8 	.word	0x200006d8

0800969c <free>:
 800969c:	b510      	push	{r4, lr}
 800969e:	4b03      	ldr	r3, [pc, #12]	; (80096ac <free+0x10>)
 80096a0:	0001      	movs	r1, r0
 80096a2:	6818      	ldr	r0, [r3, #0]
 80096a4:	f001 fbe4 	bl	800ae70 <_free_r>
 80096a8:	bd10      	pop	{r4, pc}
 80096aa:	46c0      	nop			; (mov r8, r8)
 80096ac:	200006d8 	.word	0x200006d8

080096b0 <_malloc_r>:
 80096b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096b2:	000d      	movs	r5, r1
 80096b4:	b087      	sub	sp, #28
 80096b6:	350b      	adds	r5, #11
 80096b8:	9001      	str	r0, [sp, #4]
 80096ba:	2d16      	cmp	r5, #22
 80096bc:	d908      	bls.n	80096d0 <_malloc_r+0x20>
 80096be:	2207      	movs	r2, #7
 80096c0:	4395      	bics	r5, r2
 80096c2:	d506      	bpl.n	80096d2 <_malloc_r+0x22>
 80096c4:	230c      	movs	r3, #12
 80096c6:	9a01      	ldr	r2, [sp, #4]
 80096c8:	6013      	str	r3, [r2, #0]
 80096ca:	2000      	movs	r0, #0
 80096cc:	b007      	add	sp, #28
 80096ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096d0:	2510      	movs	r5, #16
 80096d2:	42a9      	cmp	r1, r5
 80096d4:	d8f6      	bhi.n	80096c4 <_malloc_r+0x14>
 80096d6:	9801      	ldr	r0, [sp, #4]
 80096d8:	f000 f9fe 	bl	8009ad8 <__malloc_lock>
 80096dc:	23fc      	movs	r3, #252	; 0xfc
 80096de:	4ebe      	ldr	r6, [pc, #760]	; (80099d8 <_malloc_r+0x328>)
 80096e0:	005b      	lsls	r3, r3, #1
 80096e2:	429d      	cmp	r5, r3
 80096e4:	d219      	bcs.n	800971a <_malloc_r+0x6a>
 80096e6:	002a      	movs	r2, r5
 80096e8:	3208      	adds	r2, #8
 80096ea:	18b2      	adds	r2, r6, r2
 80096ec:	0011      	movs	r1, r2
 80096ee:	6854      	ldr	r4, [r2, #4]
 80096f0:	3908      	subs	r1, #8
 80096f2:	08eb      	lsrs	r3, r5, #3
 80096f4:	428c      	cmp	r4, r1
 80096f6:	d103      	bne.n	8009700 <_malloc_r+0x50>
 80096f8:	68d4      	ldr	r4, [r2, #12]
 80096fa:	3302      	adds	r3, #2
 80096fc:	42a2      	cmp	r2, r4
 80096fe:	d022      	beq.n	8009746 <_malloc_r+0x96>
 8009700:	2203      	movs	r2, #3
 8009702:	6863      	ldr	r3, [r4, #4]
 8009704:	68a1      	ldr	r1, [r4, #8]
 8009706:	4393      	bics	r3, r2
 8009708:	68e2      	ldr	r2, [r4, #12]
 800970a:	18e3      	adds	r3, r4, r3
 800970c:	60ca      	str	r2, [r1, #12]
 800970e:	6091      	str	r1, [r2, #8]
 8009710:	2201      	movs	r2, #1
 8009712:	6859      	ldr	r1, [r3, #4]
 8009714:	430a      	orrs	r2, r1
 8009716:	605a      	str	r2, [r3, #4]
 8009718:	e02a      	b.n	8009770 <_malloc_r+0xc0>
 800971a:	233f      	movs	r3, #63	; 0x3f
 800971c:	0a6a      	lsrs	r2, r5, #9
 800971e:	d003      	beq.n	8009728 <_malloc_r+0x78>
 8009720:	2a04      	cmp	r2, #4
 8009722:	d82b      	bhi.n	800977c <_malloc_r+0xcc>
 8009724:	09ab      	lsrs	r3, r5, #6
 8009726:	3338      	adds	r3, #56	; 0x38
 8009728:	2203      	movs	r2, #3
 800972a:	4694      	mov	ip, r2
 800972c:	00d9      	lsls	r1, r3, #3
 800972e:	1989      	adds	r1, r1, r6
 8009730:	68cc      	ldr	r4, [r1, #12]
 8009732:	428c      	cmp	r4, r1
 8009734:	d006      	beq.n	8009744 <_malloc_r+0x94>
 8009736:	4660      	mov	r0, ip
 8009738:	6862      	ldr	r2, [r4, #4]
 800973a:	4382      	bics	r2, r0
 800973c:	1b57      	subs	r7, r2, r5
 800973e:	2f0f      	cmp	r7, #15
 8009740:	dd34      	ble.n	80097ac <_malloc_r+0xfc>
 8009742:	3b01      	subs	r3, #1
 8009744:	3301      	adds	r3, #1
 8009746:	6934      	ldr	r4, [r6, #16]
 8009748:	49a4      	ldr	r1, [pc, #656]	; (80099dc <_malloc_r+0x32c>)
 800974a:	428c      	cmp	r4, r1
 800974c:	d055      	beq.n	80097fa <_malloc_r+0x14a>
 800974e:	2003      	movs	r0, #3
 8009750:	6862      	ldr	r2, [r4, #4]
 8009752:	4382      	bics	r2, r0
 8009754:	1b50      	subs	r0, r2, r5
 8009756:	280f      	cmp	r0, #15
 8009758:	dd36      	ble.n	80097c8 <_malloc_r+0x118>
 800975a:	2301      	movs	r3, #1
 800975c:	1967      	adds	r7, r4, r5
 800975e:	431d      	orrs	r5, r3
 8009760:	4303      	orrs	r3, r0
 8009762:	6065      	str	r5, [r4, #4]
 8009764:	6177      	str	r7, [r6, #20]
 8009766:	6137      	str	r7, [r6, #16]
 8009768:	60f9      	str	r1, [r7, #12]
 800976a:	60b9      	str	r1, [r7, #8]
 800976c:	607b      	str	r3, [r7, #4]
 800976e:	50a0      	str	r0, [r4, r2]
 8009770:	9801      	ldr	r0, [sp, #4]
 8009772:	f000 f9b9 	bl	8009ae8 <__malloc_unlock>
 8009776:	0020      	movs	r0, r4
 8009778:	3008      	adds	r0, #8
 800977a:	e7a7      	b.n	80096cc <_malloc_r+0x1c>
 800977c:	2a14      	cmp	r2, #20
 800977e:	d802      	bhi.n	8009786 <_malloc_r+0xd6>
 8009780:	0013      	movs	r3, r2
 8009782:	335b      	adds	r3, #91	; 0x5b
 8009784:	e7d0      	b.n	8009728 <_malloc_r+0x78>
 8009786:	2a54      	cmp	r2, #84	; 0x54
 8009788:	d802      	bhi.n	8009790 <_malloc_r+0xe0>
 800978a:	0b2b      	lsrs	r3, r5, #12
 800978c:	336e      	adds	r3, #110	; 0x6e
 800978e:	e7cb      	b.n	8009728 <_malloc_r+0x78>
 8009790:	23aa      	movs	r3, #170	; 0xaa
 8009792:	005b      	lsls	r3, r3, #1
 8009794:	429a      	cmp	r2, r3
 8009796:	d802      	bhi.n	800979e <_malloc_r+0xee>
 8009798:	0beb      	lsrs	r3, r5, #15
 800979a:	3377      	adds	r3, #119	; 0x77
 800979c:	e7c4      	b.n	8009728 <_malloc_r+0x78>
 800979e:	4990      	ldr	r1, [pc, #576]	; (80099e0 <_malloc_r+0x330>)
 80097a0:	237e      	movs	r3, #126	; 0x7e
 80097a2:	428a      	cmp	r2, r1
 80097a4:	d8c0      	bhi.n	8009728 <_malloc_r+0x78>
 80097a6:	0cab      	lsrs	r3, r5, #18
 80097a8:	337c      	adds	r3, #124	; 0x7c
 80097aa:	e7bd      	b.n	8009728 <_malloc_r+0x78>
 80097ac:	68e0      	ldr	r0, [r4, #12]
 80097ae:	2f00      	cmp	r7, #0
 80097b0:	db08      	blt.n	80097c4 <_malloc_r+0x114>
 80097b2:	68a3      	ldr	r3, [r4, #8]
 80097b4:	60d8      	str	r0, [r3, #12]
 80097b6:	6083      	str	r3, [r0, #8]
 80097b8:	2301      	movs	r3, #1
 80097ba:	18a2      	adds	r2, r4, r2
 80097bc:	6851      	ldr	r1, [r2, #4]
 80097be:	430b      	orrs	r3, r1
 80097c0:	6053      	str	r3, [r2, #4]
 80097c2:	e7d5      	b.n	8009770 <_malloc_r+0xc0>
 80097c4:	0004      	movs	r4, r0
 80097c6:	e7b4      	b.n	8009732 <_malloc_r+0x82>
 80097c8:	6171      	str	r1, [r6, #20]
 80097ca:	6131      	str	r1, [r6, #16]
 80097cc:	2800      	cmp	r0, #0
 80097ce:	daf3      	bge.n	80097b8 <_malloc_r+0x108>
 80097d0:	6871      	ldr	r1, [r6, #4]
 80097d2:	468c      	mov	ip, r1
 80097d4:	2180      	movs	r1, #128	; 0x80
 80097d6:	0089      	lsls	r1, r1, #2
 80097d8:	428a      	cmp	r2, r1
 80097da:	d300      	bcc.n	80097de <_malloc_r+0x12e>
 80097dc:	e08c      	b.n	80098f8 <_malloc_r+0x248>
 80097de:	08d1      	lsrs	r1, r2, #3
 80097e0:	0950      	lsrs	r0, r2, #5
 80097e2:	2201      	movs	r2, #1
 80097e4:	4082      	lsls	r2, r0
 80097e6:	4660      	mov	r0, ip
 80097e8:	4302      	orrs	r2, r0
 80097ea:	6072      	str	r2, [r6, #4]
 80097ec:	00ca      	lsls	r2, r1, #3
 80097ee:	1992      	adds	r2, r2, r6
 80097f0:	6891      	ldr	r1, [r2, #8]
 80097f2:	60e2      	str	r2, [r4, #12]
 80097f4:	60a1      	str	r1, [r4, #8]
 80097f6:	6094      	str	r4, [r2, #8]
 80097f8:	60cc      	str	r4, [r1, #12]
 80097fa:	2201      	movs	r2, #1
 80097fc:	4876      	ldr	r0, [pc, #472]	; (80099d8 <_malloc_r+0x328>)
 80097fe:	1099      	asrs	r1, r3, #2
 8009800:	408a      	lsls	r2, r1
 8009802:	6841      	ldr	r1, [r0, #4]
 8009804:	4291      	cmp	r1, r2
 8009806:	d328      	bcc.n	800985a <_malloc_r+0x1aa>
 8009808:	420a      	tst	r2, r1
 800980a:	d105      	bne.n	8009818 <_malloc_r+0x168>
 800980c:	2403      	movs	r4, #3
 800980e:	43a3      	bics	r3, r4
 8009810:	0052      	lsls	r2, r2, #1
 8009812:	3304      	adds	r3, #4
 8009814:	420a      	tst	r2, r1
 8009816:	d0fb      	beq.n	8009810 <_malloc_r+0x160>
 8009818:	496f      	ldr	r1, [pc, #444]	; (80099d8 <_malloc_r+0x328>)
 800981a:	9104      	str	r1, [sp, #16]
 800981c:	00d9      	lsls	r1, r3, #3
 800981e:	1841      	adds	r1, r0, r1
 8009820:	468c      	mov	ip, r1
 8009822:	000f      	movs	r7, r1
 8009824:	9302      	str	r3, [sp, #8]
 8009826:	68fc      	ldr	r4, [r7, #12]
 8009828:	42bc      	cmp	r4, r7
 800982a:	d000      	beq.n	800982e <_malloc_r+0x17e>
 800982c:	e09b      	b.n	8009966 <_malloc_r+0x2b6>
 800982e:	2403      	movs	r4, #3
 8009830:	9902      	ldr	r1, [sp, #8]
 8009832:	3708      	adds	r7, #8
 8009834:	3101      	adds	r1, #1
 8009836:	9102      	str	r1, [sp, #8]
 8009838:	4221      	tst	r1, r4
 800983a:	d1f4      	bne.n	8009826 <_malloc_r+0x176>
 800983c:	2103      	movs	r1, #3
 800983e:	420b      	tst	r3, r1
 8009840:	d000      	beq.n	8009844 <_malloc_r+0x194>
 8009842:	e0b7      	b.n	80099b4 <_malloc_r+0x304>
 8009844:	6843      	ldr	r3, [r0, #4]
 8009846:	4393      	bics	r3, r2
 8009848:	6043      	str	r3, [r0, #4]
 800984a:	9b04      	ldr	r3, [sp, #16]
 800984c:	0052      	lsls	r2, r2, #1
 800984e:	6859      	ldr	r1, [r3, #4]
 8009850:	4291      	cmp	r1, r2
 8009852:	d302      	bcc.n	800985a <_malloc_r+0x1aa>
 8009854:	2a00      	cmp	r2, #0
 8009856:	d000      	beq.n	800985a <_malloc_r+0x1aa>
 8009858:	e0bb      	b.n	80099d2 <_malloc_r+0x322>
 800985a:	2203      	movs	r2, #3
 800985c:	6883      	ldr	r3, [r0, #8]
 800985e:	9302      	str	r3, [sp, #8]
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	4393      	bics	r3, r2
 8009864:	9303      	str	r3, [sp, #12]
 8009866:	42ab      	cmp	r3, r5
 8009868:	d303      	bcc.n	8009872 <_malloc_r+0x1c2>
 800986a:	1b59      	subs	r1, r3, r5
 800986c:	290f      	cmp	r1, #15
 800986e:	dd00      	ble.n	8009872 <_malloc_r+0x1c2>
 8009870:	e123      	b.n	8009aba <_malloc_r+0x40a>
 8009872:	9b02      	ldr	r3, [sp, #8]
 8009874:	9a03      	ldr	r2, [sp, #12]
 8009876:	2008      	movs	r0, #8
 8009878:	189e      	adds	r6, r3, r2
 800987a:	4b5a      	ldr	r3, [pc, #360]	; (80099e4 <_malloc_r+0x334>)
 800987c:	681f      	ldr	r7, [r3, #0]
 800987e:	f001 fa71 	bl	800ad64 <sysconf>
 8009882:	4b59      	ldr	r3, [pc, #356]	; (80099e8 <_malloc_r+0x338>)
 8009884:	3710      	adds	r7, #16
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	197f      	adds	r7, r7, r5
 800988a:	9004      	str	r0, [sp, #16]
 800988c:	3301      	adds	r3, #1
 800988e:	d003      	beq.n	8009898 <_malloc_r+0x1e8>
 8009890:	1e7b      	subs	r3, r7, #1
 8009892:	181b      	adds	r3, r3, r0
 8009894:	4247      	negs	r7, r0
 8009896:	401f      	ands	r7, r3
 8009898:	0039      	movs	r1, r7
 800989a:	9801      	ldr	r0, [sp, #4]
 800989c:	f001 fa0e 	bl	800acbc <_sbrk_r>
 80098a0:	0004      	movs	r4, r0
 80098a2:	1c43      	adds	r3, r0, #1
 80098a4:	d100      	bne.n	80098a8 <_malloc_r+0x1f8>
 80098a6:	e0de      	b.n	8009a66 <_malloc_r+0x3b6>
 80098a8:	4286      	cmp	r6, r0
 80098aa:	d904      	bls.n	80098b6 <_malloc_r+0x206>
 80098ac:	4b4a      	ldr	r3, [pc, #296]	; (80099d8 <_malloc_r+0x328>)
 80098ae:	9a02      	ldr	r2, [sp, #8]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d000      	beq.n	80098b6 <_malloc_r+0x206>
 80098b4:	e0d7      	b.n	8009a66 <_malloc_r+0x3b6>
 80098b6:	4a4d      	ldr	r2, [pc, #308]	; (80099ec <_malloc_r+0x33c>)
 80098b8:	6813      	ldr	r3, [r2, #0]
 80098ba:	18fb      	adds	r3, r7, r3
 80098bc:	6013      	str	r3, [r2, #0]
 80098be:	9a04      	ldr	r2, [sp, #16]
 80098c0:	3a01      	subs	r2, #1
 80098c2:	42a6      	cmp	r6, r4
 80098c4:	d000      	beq.n	80098c8 <_malloc_r+0x218>
 80098c6:	e097      	b.n	80099f8 <_malloc_r+0x348>
 80098c8:	4216      	tst	r6, r2
 80098ca:	d000      	beq.n	80098ce <_malloc_r+0x21e>
 80098cc:	e094      	b.n	80099f8 <_malloc_r+0x348>
 80098ce:	4b42      	ldr	r3, [pc, #264]	; (80099d8 <_malloc_r+0x328>)
 80098d0:	689a      	ldr	r2, [r3, #8]
 80098d2:	9b03      	ldr	r3, [sp, #12]
 80098d4:	19df      	adds	r7, r3, r7
 80098d6:	2301      	movs	r3, #1
 80098d8:	433b      	orrs	r3, r7
 80098da:	6053      	str	r3, [r2, #4]
 80098dc:	4b43      	ldr	r3, [pc, #268]	; (80099ec <_malloc_r+0x33c>)
 80098de:	4a44      	ldr	r2, [pc, #272]	; (80099f0 <_malloc_r+0x340>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	6811      	ldr	r1, [r2, #0]
 80098e4:	428b      	cmp	r3, r1
 80098e6:	d900      	bls.n	80098ea <_malloc_r+0x23a>
 80098e8:	6013      	str	r3, [r2, #0]
 80098ea:	4a42      	ldr	r2, [pc, #264]	; (80099f4 <_malloc_r+0x344>)
 80098ec:	6811      	ldr	r1, [r2, #0]
 80098ee:	428b      	cmp	r3, r1
 80098f0:	d800      	bhi.n	80098f4 <_malloc_r+0x244>
 80098f2:	e0b8      	b.n	8009a66 <_malloc_r+0x3b6>
 80098f4:	6013      	str	r3, [r2, #0]
 80098f6:	e0b6      	b.n	8009a66 <_malloc_r+0x3b6>
 80098f8:	0a50      	lsrs	r0, r2, #9
 80098fa:	2804      	cmp	r0, #4
 80098fc:	d811      	bhi.n	8009922 <_malloc_r+0x272>
 80098fe:	0991      	lsrs	r1, r2, #6
 8009900:	3138      	adds	r1, #56	; 0x38
 8009902:	00cf      	lsls	r7, r1, #3
 8009904:	19bf      	adds	r7, r7, r6
 8009906:	68b8      	ldr	r0, [r7, #8]
 8009908:	4287      	cmp	r7, r0
 800990a:	d125      	bne.n	8009958 <_malloc_r+0x2a8>
 800990c:	2201      	movs	r2, #1
 800990e:	1089      	asrs	r1, r1, #2
 8009910:	408a      	lsls	r2, r1
 8009912:	4661      	mov	r1, ip
 8009914:	430a      	orrs	r2, r1
 8009916:	6072      	str	r2, [r6, #4]
 8009918:	60e7      	str	r7, [r4, #12]
 800991a:	60a0      	str	r0, [r4, #8]
 800991c:	60bc      	str	r4, [r7, #8]
 800991e:	60c4      	str	r4, [r0, #12]
 8009920:	e76b      	b.n	80097fa <_malloc_r+0x14a>
 8009922:	2814      	cmp	r0, #20
 8009924:	d802      	bhi.n	800992c <_malloc_r+0x27c>
 8009926:	0001      	movs	r1, r0
 8009928:	315b      	adds	r1, #91	; 0x5b
 800992a:	e7ea      	b.n	8009902 <_malloc_r+0x252>
 800992c:	2854      	cmp	r0, #84	; 0x54
 800992e:	d802      	bhi.n	8009936 <_malloc_r+0x286>
 8009930:	0b11      	lsrs	r1, r2, #12
 8009932:	316e      	adds	r1, #110	; 0x6e
 8009934:	e7e5      	b.n	8009902 <_malloc_r+0x252>
 8009936:	21aa      	movs	r1, #170	; 0xaa
 8009938:	0049      	lsls	r1, r1, #1
 800993a:	4288      	cmp	r0, r1
 800993c:	d802      	bhi.n	8009944 <_malloc_r+0x294>
 800993e:	0bd1      	lsrs	r1, r2, #15
 8009940:	3177      	adds	r1, #119	; 0x77
 8009942:	e7de      	b.n	8009902 <_malloc_r+0x252>
 8009944:	4f26      	ldr	r7, [pc, #152]	; (80099e0 <_malloc_r+0x330>)
 8009946:	217e      	movs	r1, #126	; 0x7e
 8009948:	42b8      	cmp	r0, r7
 800994a:	d8da      	bhi.n	8009902 <_malloc_r+0x252>
 800994c:	0c91      	lsrs	r1, r2, #18
 800994e:	317c      	adds	r1, #124	; 0x7c
 8009950:	e7d7      	b.n	8009902 <_malloc_r+0x252>
 8009952:	6880      	ldr	r0, [r0, #8]
 8009954:	4287      	cmp	r7, r0
 8009956:	d004      	beq.n	8009962 <_malloc_r+0x2b2>
 8009958:	2603      	movs	r6, #3
 800995a:	6841      	ldr	r1, [r0, #4]
 800995c:	43b1      	bics	r1, r6
 800995e:	4291      	cmp	r1, r2
 8009960:	d8f7      	bhi.n	8009952 <_malloc_r+0x2a2>
 8009962:	68c7      	ldr	r7, [r0, #12]
 8009964:	e7d8      	b.n	8009918 <_malloc_r+0x268>
 8009966:	2603      	movs	r6, #3
 8009968:	6861      	ldr	r1, [r4, #4]
 800996a:	43b1      	bics	r1, r6
 800996c:	9103      	str	r1, [sp, #12]
 800996e:	68e6      	ldr	r6, [r4, #12]
 8009970:	1b49      	subs	r1, r1, r5
 8009972:	290f      	cmp	r1, #15
 8009974:	dd10      	ble.n	8009998 <_malloc_r+0x2e8>
 8009976:	2201      	movs	r2, #1
 8009978:	1963      	adds	r3, r4, r5
 800997a:	4315      	orrs	r5, r2
 800997c:	6065      	str	r5, [r4, #4]
 800997e:	68a5      	ldr	r5, [r4, #8]
 8009980:	430a      	orrs	r2, r1
 8009982:	60ee      	str	r6, [r5, #12]
 8009984:	60b5      	str	r5, [r6, #8]
 8009986:	6143      	str	r3, [r0, #20]
 8009988:	6103      	str	r3, [r0, #16]
 800998a:	4814      	ldr	r0, [pc, #80]	; (80099dc <_malloc_r+0x32c>)
 800998c:	605a      	str	r2, [r3, #4]
 800998e:	60d8      	str	r0, [r3, #12]
 8009990:	6098      	str	r0, [r3, #8]
 8009992:	9b03      	ldr	r3, [sp, #12]
 8009994:	50e1      	str	r1, [r4, r3]
 8009996:	e6eb      	b.n	8009770 <_malloc_r+0xc0>
 8009998:	2900      	cmp	r1, #0
 800999a:	db09      	blt.n	80099b0 <_malloc_r+0x300>
 800999c:	9b03      	ldr	r3, [sp, #12]
 800999e:	18e1      	adds	r1, r4, r3
 80099a0:	2301      	movs	r3, #1
 80099a2:	684a      	ldr	r2, [r1, #4]
 80099a4:	4313      	orrs	r3, r2
 80099a6:	604b      	str	r3, [r1, #4]
 80099a8:	68a3      	ldr	r3, [r4, #8]
 80099aa:	60de      	str	r6, [r3, #12]
 80099ac:	60b3      	str	r3, [r6, #8]
 80099ae:	e6df      	b.n	8009770 <_malloc_r+0xc0>
 80099b0:	0034      	movs	r4, r6
 80099b2:	e739      	b.n	8009828 <_malloc_r+0x178>
 80099b4:	2108      	movs	r1, #8
 80099b6:	4249      	negs	r1, r1
 80099b8:	448c      	add	ip, r1
 80099ba:	4661      	mov	r1, ip
 80099bc:	6889      	ldr	r1, [r1, #8]
 80099be:	3b01      	subs	r3, #1
 80099c0:	4561      	cmp	r1, ip
 80099c2:	d100      	bne.n	80099c6 <_malloc_r+0x316>
 80099c4:	e73a      	b.n	800983c <_malloc_r+0x18c>
 80099c6:	e740      	b.n	800984a <_malloc_r+0x19a>
 80099c8:	3304      	adds	r3, #4
 80099ca:	0052      	lsls	r2, r2, #1
 80099cc:	420a      	tst	r2, r1
 80099ce:	d0fb      	beq.n	80099c8 <_malloc_r+0x318>
 80099d0:	e724      	b.n	800981c <_malloc_r+0x16c>
 80099d2:	9b02      	ldr	r3, [sp, #8]
 80099d4:	e7fa      	b.n	80099cc <_malloc_r+0x31c>
 80099d6:	46c0      	nop			; (mov r8, r8)
 80099d8:	2000002c 	.word	0x2000002c
 80099dc:	20000034 	.word	0x20000034
 80099e0:	00000554 	.word	0x00000554
 80099e4:	20000b48 	.word	0x20000b48
 80099e8:	20000434 	.word	0x20000434
 80099ec:	20000b18 	.word	0x20000b18
 80099f0:	20000b40 	.word	0x20000b40
 80099f4:	20000b44 	.word	0x20000b44
 80099f8:	4934      	ldr	r1, [pc, #208]	; (8009acc <_malloc_r+0x41c>)
 80099fa:	6808      	ldr	r0, [r1, #0]
 80099fc:	3001      	adds	r0, #1
 80099fe:	d140      	bne.n	8009a82 <_malloc_r+0x3d2>
 8009a00:	600c      	str	r4, [r1, #0]
 8009a02:	2107      	movs	r1, #7
 8009a04:	0026      	movs	r6, r4
 8009a06:	2300      	movs	r3, #0
 8009a08:	400e      	ands	r6, r1
 8009a0a:	420c      	tst	r4, r1
 8009a0c:	d002      	beq.n	8009a14 <_malloc_r+0x364>
 8009a0e:	3308      	adds	r3, #8
 8009a10:	1b9b      	subs	r3, r3, r6
 8009a12:	18e4      	adds	r4, r4, r3
 8009a14:	19e1      	adds	r1, r4, r7
 8009a16:	9105      	str	r1, [sp, #20]
 8009a18:	9f05      	ldr	r7, [sp, #20]
 8009a1a:	9904      	ldr	r1, [sp, #16]
 8009a1c:	4017      	ands	r7, r2
 8009a1e:	18cb      	adds	r3, r1, r3
 8009a20:	1bdf      	subs	r7, r3, r7
 8009a22:	4017      	ands	r7, r2
 8009a24:	0039      	movs	r1, r7
 8009a26:	9801      	ldr	r0, [sp, #4]
 8009a28:	f001 f948 	bl	800acbc <_sbrk_r>
 8009a2c:	1c43      	adds	r3, r0, #1
 8009a2e:	d107      	bne.n	8009a40 <_malloc_r+0x390>
 8009a30:	1e37      	subs	r7, r6, #0
 8009a32:	9805      	ldr	r0, [sp, #20]
 8009a34:	d004      	beq.n	8009a40 <_malloc_r+0x390>
 8009a36:	0030      	movs	r0, r6
 8009a38:	2700      	movs	r7, #0
 8009a3a:	9b05      	ldr	r3, [sp, #20]
 8009a3c:	3808      	subs	r0, #8
 8009a3e:	1818      	adds	r0, r3, r0
 8009a40:	4a23      	ldr	r2, [pc, #140]	; (8009ad0 <_malloc_r+0x420>)
 8009a42:	1b00      	subs	r0, r0, r4
 8009a44:	6813      	ldr	r3, [r2, #0]
 8009a46:	19c0      	adds	r0, r0, r7
 8009a48:	19db      	adds	r3, r3, r7
 8009a4a:	6013      	str	r3, [r2, #0]
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	4b21      	ldr	r3, [pc, #132]	; (8009ad4 <_malloc_r+0x424>)
 8009a50:	9902      	ldr	r1, [sp, #8]
 8009a52:	4310      	orrs	r0, r2
 8009a54:	609c      	str	r4, [r3, #8]
 8009a56:	6060      	str	r0, [r4, #4]
 8009a58:	4299      	cmp	r1, r3
 8009a5a:	d100      	bne.n	8009a5e <_malloc_r+0x3ae>
 8009a5c:	e73e      	b.n	80098dc <_malloc_r+0x22c>
 8009a5e:	9b03      	ldr	r3, [sp, #12]
 8009a60:	2b0f      	cmp	r3, #15
 8009a62:	d813      	bhi.n	8009a8c <_malloc_r+0x3dc>
 8009a64:	6062      	str	r2, [r4, #4]
 8009a66:	2203      	movs	r2, #3
 8009a68:	4b1a      	ldr	r3, [pc, #104]	; (8009ad4 <_malloc_r+0x424>)
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	4393      	bics	r3, r2
 8009a70:	1b59      	subs	r1, r3, r5
 8009a72:	42ab      	cmp	r3, r5
 8009a74:	d301      	bcc.n	8009a7a <_malloc_r+0x3ca>
 8009a76:	290f      	cmp	r1, #15
 8009a78:	dc1f      	bgt.n	8009aba <_malloc_r+0x40a>
 8009a7a:	9801      	ldr	r0, [sp, #4]
 8009a7c:	f000 f834 	bl	8009ae8 <__malloc_unlock>
 8009a80:	e623      	b.n	80096ca <_malloc_r+0x1a>
 8009a82:	4913      	ldr	r1, [pc, #76]	; (8009ad0 <_malloc_r+0x420>)
 8009a84:	1ba6      	subs	r6, r4, r6
 8009a86:	18f6      	adds	r6, r6, r3
 8009a88:	600e      	str	r6, [r1, #0]
 8009a8a:	e7ba      	b.n	8009a02 <_malloc_r+0x352>
 8009a8c:	2107      	movs	r1, #7
 8009a8e:	9b03      	ldr	r3, [sp, #12]
 8009a90:	3b0c      	subs	r3, #12
 8009a92:	438b      	bics	r3, r1
 8009a94:	9902      	ldr	r1, [sp, #8]
 8009a96:	6849      	ldr	r1, [r1, #4]
 8009a98:	400a      	ands	r2, r1
 8009a9a:	9902      	ldr	r1, [sp, #8]
 8009a9c:	431a      	orrs	r2, r3
 8009a9e:	604a      	str	r2, [r1, #4]
 8009aa0:	18ca      	adds	r2, r1, r3
 8009aa2:	2105      	movs	r1, #5
 8009aa4:	6051      	str	r1, [r2, #4]
 8009aa6:	6091      	str	r1, [r2, #8]
 8009aa8:	2b0f      	cmp	r3, #15
 8009aaa:	d800      	bhi.n	8009aae <_malloc_r+0x3fe>
 8009aac:	e716      	b.n	80098dc <_malloc_r+0x22c>
 8009aae:	9902      	ldr	r1, [sp, #8]
 8009ab0:	9801      	ldr	r0, [sp, #4]
 8009ab2:	3108      	adds	r1, #8
 8009ab4:	f001 f9dc 	bl	800ae70 <_free_r>
 8009ab8:	e710      	b.n	80098dc <_malloc_r+0x22c>
 8009aba:	2201      	movs	r2, #1
 8009abc:	0013      	movs	r3, r2
 8009abe:	4805      	ldr	r0, [pc, #20]	; (8009ad4 <_malloc_r+0x424>)
 8009ac0:	432b      	orrs	r3, r5
 8009ac2:	6884      	ldr	r4, [r0, #8]
 8009ac4:	6063      	str	r3, [r4, #4]
 8009ac6:	1963      	adds	r3, r4, r5
 8009ac8:	6083      	str	r3, [r0, #8]
 8009aca:	e623      	b.n	8009714 <_malloc_r+0x64>
 8009acc:	20000434 	.word	0x20000434
 8009ad0:	20000b18 	.word	0x20000b18
 8009ad4:	2000002c 	.word	0x2000002c

08009ad8 <__malloc_lock>:
 8009ad8:	b510      	push	{r4, lr}
 8009ada:	4802      	ldr	r0, [pc, #8]	; (8009ae4 <__malloc_lock+0xc>)
 8009adc:	f001 f940 	bl	800ad60 <__retarget_lock_acquire_recursive>
 8009ae0:	bd10      	pop	{r4, pc}
 8009ae2:	46c0      	nop			; (mov r8, r8)
 8009ae4:	20000c8d 	.word	0x20000c8d

08009ae8 <__malloc_unlock>:
 8009ae8:	b510      	push	{r4, lr}
 8009aea:	4802      	ldr	r0, [pc, #8]	; (8009af4 <__malloc_unlock+0xc>)
 8009aec:	f001 f939 	bl	800ad62 <__retarget_lock_release_recursive>
 8009af0:	bd10      	pop	{r4, pc}
 8009af2:	46c0      	nop			; (mov r8, r8)
 8009af4:	20000c8d 	.word	0x20000c8d

08009af8 <sulp>:
 8009af8:	b570      	push	{r4, r5, r6, lr}
 8009afa:	0016      	movs	r6, r2
 8009afc:	000d      	movs	r5, r1
 8009afe:	f002 f90d 	bl	800bd1c <__ulp>
 8009b02:	2e00      	cmp	r6, #0
 8009b04:	d00d      	beq.n	8009b22 <sulp+0x2a>
 8009b06:	236b      	movs	r3, #107	; 0x6b
 8009b08:	006a      	lsls	r2, r5, #1
 8009b0a:	0d52      	lsrs	r2, r2, #21
 8009b0c:	1a9b      	subs	r3, r3, r2
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	dd07      	ble.n	8009b22 <sulp+0x2a>
 8009b12:	2400      	movs	r4, #0
 8009b14:	4a03      	ldr	r2, [pc, #12]	; (8009b24 <sulp+0x2c>)
 8009b16:	051b      	lsls	r3, r3, #20
 8009b18:	189d      	adds	r5, r3, r2
 8009b1a:	002b      	movs	r3, r5
 8009b1c:	0022      	movs	r2, r4
 8009b1e:	f7f7 fda5 	bl	800166c <__aeabi_dmul>
 8009b22:	bd70      	pop	{r4, r5, r6, pc}
 8009b24:	3ff00000 	.word	0x3ff00000

08009b28 <_strtod_l>:
 8009b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b2a:	b0a1      	sub	sp, #132	; 0x84
 8009b2c:	9219      	str	r2, [sp, #100]	; 0x64
 8009b2e:	2200      	movs	r2, #0
 8009b30:	2600      	movs	r6, #0
 8009b32:	2700      	movs	r7, #0
 8009b34:	9004      	str	r0, [sp, #16]
 8009b36:	9107      	str	r1, [sp, #28]
 8009b38:	921c      	str	r2, [sp, #112]	; 0x70
 8009b3a:	911b      	str	r1, [sp, #108]	; 0x6c
 8009b3c:	780a      	ldrb	r2, [r1, #0]
 8009b3e:	2a2b      	cmp	r2, #43	; 0x2b
 8009b40:	d055      	beq.n	8009bee <_strtod_l+0xc6>
 8009b42:	d841      	bhi.n	8009bc8 <_strtod_l+0xa0>
 8009b44:	2a0d      	cmp	r2, #13
 8009b46:	d83b      	bhi.n	8009bc0 <_strtod_l+0x98>
 8009b48:	2a08      	cmp	r2, #8
 8009b4a:	d83b      	bhi.n	8009bc4 <_strtod_l+0x9c>
 8009b4c:	2a00      	cmp	r2, #0
 8009b4e:	d044      	beq.n	8009bda <_strtod_l+0xb2>
 8009b50:	2200      	movs	r2, #0
 8009b52:	920f      	str	r2, [sp, #60]	; 0x3c
 8009b54:	2100      	movs	r1, #0
 8009b56:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009b58:	9109      	str	r1, [sp, #36]	; 0x24
 8009b5a:	782a      	ldrb	r2, [r5, #0]
 8009b5c:	2a30      	cmp	r2, #48	; 0x30
 8009b5e:	d000      	beq.n	8009b62 <_strtod_l+0x3a>
 8009b60:	e085      	b.n	8009c6e <_strtod_l+0x146>
 8009b62:	786a      	ldrb	r2, [r5, #1]
 8009b64:	3120      	adds	r1, #32
 8009b66:	438a      	bics	r2, r1
 8009b68:	2a58      	cmp	r2, #88	; 0x58
 8009b6a:	d000      	beq.n	8009b6e <_strtod_l+0x46>
 8009b6c:	e075      	b.n	8009c5a <_strtod_l+0x132>
 8009b6e:	9302      	str	r3, [sp, #8]
 8009b70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b72:	4a97      	ldr	r2, [pc, #604]	; (8009dd0 <_strtod_l+0x2a8>)
 8009b74:	9301      	str	r3, [sp, #4]
 8009b76:	ab1c      	add	r3, sp, #112	; 0x70
 8009b78:	9300      	str	r3, [sp, #0]
 8009b7a:	9804      	ldr	r0, [sp, #16]
 8009b7c:	ab1d      	add	r3, sp, #116	; 0x74
 8009b7e:	a91b      	add	r1, sp, #108	; 0x6c
 8009b80:	f001 fa92 	bl	800b0a8 <__gethex>
 8009b84:	230f      	movs	r3, #15
 8009b86:	0002      	movs	r2, r0
 8009b88:	401a      	ands	r2, r3
 8009b8a:	0004      	movs	r4, r0
 8009b8c:	9205      	str	r2, [sp, #20]
 8009b8e:	4218      	tst	r0, r3
 8009b90:	d005      	beq.n	8009b9e <_strtod_l+0x76>
 8009b92:	2a06      	cmp	r2, #6
 8009b94:	d12d      	bne.n	8009bf2 <_strtod_l+0xca>
 8009b96:	1c6b      	adds	r3, r5, #1
 8009b98:	931b      	str	r3, [sp, #108]	; 0x6c
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b9e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d002      	beq.n	8009baa <_strtod_l+0x82>
 8009ba4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ba6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009ba8:	6013      	str	r3, [r2, #0]
 8009baa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d01b      	beq.n	8009be8 <_strtod_l+0xc0>
 8009bb0:	2380      	movs	r3, #128	; 0x80
 8009bb2:	0032      	movs	r2, r6
 8009bb4:	061b      	lsls	r3, r3, #24
 8009bb6:	18fb      	adds	r3, r7, r3
 8009bb8:	0010      	movs	r0, r2
 8009bba:	0019      	movs	r1, r3
 8009bbc:	b021      	add	sp, #132	; 0x84
 8009bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bc0:	2a20      	cmp	r2, #32
 8009bc2:	d1c5      	bne.n	8009b50 <_strtod_l+0x28>
 8009bc4:	3101      	adds	r1, #1
 8009bc6:	e7b8      	b.n	8009b3a <_strtod_l+0x12>
 8009bc8:	2a2d      	cmp	r2, #45	; 0x2d
 8009bca:	d1c1      	bne.n	8009b50 <_strtod_l+0x28>
 8009bcc:	3a2c      	subs	r2, #44	; 0x2c
 8009bce:	920f      	str	r2, [sp, #60]	; 0x3c
 8009bd0:	1c4a      	adds	r2, r1, #1
 8009bd2:	921b      	str	r2, [sp, #108]	; 0x6c
 8009bd4:	784a      	ldrb	r2, [r1, #1]
 8009bd6:	2a00      	cmp	r2, #0
 8009bd8:	d1bc      	bne.n	8009b54 <_strtod_l+0x2c>
 8009bda:	9b07      	ldr	r3, [sp, #28]
 8009bdc:	931b      	str	r3, [sp, #108]	; 0x6c
 8009bde:	2300      	movs	r3, #0
 8009be0:	930f      	str	r3, [sp, #60]	; 0x3c
 8009be2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d1dd      	bne.n	8009ba4 <_strtod_l+0x7c>
 8009be8:	0032      	movs	r2, r6
 8009bea:	003b      	movs	r3, r7
 8009bec:	e7e4      	b.n	8009bb8 <_strtod_l+0x90>
 8009bee:	2200      	movs	r2, #0
 8009bf0:	e7ed      	b.n	8009bce <_strtod_l+0xa6>
 8009bf2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009bf4:	2a00      	cmp	r2, #0
 8009bf6:	d007      	beq.n	8009c08 <_strtod_l+0xe0>
 8009bf8:	2135      	movs	r1, #53	; 0x35
 8009bfa:	a81e      	add	r0, sp, #120	; 0x78
 8009bfc:	f002 f97f 	bl	800befe <__copybits>
 8009c00:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009c02:	9804      	ldr	r0, [sp, #16]
 8009c04:	f001 fd7c 	bl	800b700 <_Bfree>
 8009c08:	9805      	ldr	r0, [sp, #20]
 8009c0a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009c0c:	3801      	subs	r0, #1
 8009c0e:	2804      	cmp	r0, #4
 8009c10:	d806      	bhi.n	8009c20 <_strtod_l+0xf8>
 8009c12:	f7f6 fa7f 	bl	8000114 <__gnu_thumb1_case_uqi>
 8009c16:	0312      	.short	0x0312
 8009c18:	1e1c      	.short	0x1e1c
 8009c1a:	12          	.byte	0x12
 8009c1b:	00          	.byte	0x00
 8009c1c:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8009c1e:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8009c20:	05e4      	lsls	r4, r4, #23
 8009c22:	d502      	bpl.n	8009c2a <_strtod_l+0x102>
 8009c24:	2380      	movs	r3, #128	; 0x80
 8009c26:	061b      	lsls	r3, r3, #24
 8009c28:	431f      	orrs	r7, r3
 8009c2a:	4b6a      	ldr	r3, [pc, #424]	; (8009dd4 <_strtod_l+0x2ac>)
 8009c2c:	423b      	tst	r3, r7
 8009c2e:	d1b6      	bne.n	8009b9e <_strtod_l+0x76>
 8009c30:	f001 f86a 	bl	800ad08 <__errno>
 8009c34:	2322      	movs	r3, #34	; 0x22
 8009c36:	6003      	str	r3, [r0, #0]
 8009c38:	e7b1      	b.n	8009b9e <_strtod_l+0x76>
 8009c3a:	4967      	ldr	r1, [pc, #412]	; (8009dd8 <_strtod_l+0x2b0>)
 8009c3c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009c3e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8009c40:	400a      	ands	r2, r1
 8009c42:	4966      	ldr	r1, [pc, #408]	; (8009ddc <_strtod_l+0x2b4>)
 8009c44:	185b      	adds	r3, r3, r1
 8009c46:	051b      	lsls	r3, r3, #20
 8009c48:	431a      	orrs	r2, r3
 8009c4a:	0017      	movs	r7, r2
 8009c4c:	e7e8      	b.n	8009c20 <_strtod_l+0xf8>
 8009c4e:	4f61      	ldr	r7, [pc, #388]	; (8009dd4 <_strtod_l+0x2ac>)
 8009c50:	e7e6      	b.n	8009c20 <_strtod_l+0xf8>
 8009c52:	2601      	movs	r6, #1
 8009c54:	4f62      	ldr	r7, [pc, #392]	; (8009de0 <_strtod_l+0x2b8>)
 8009c56:	4276      	negs	r6, r6
 8009c58:	e7e2      	b.n	8009c20 <_strtod_l+0xf8>
 8009c5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c5c:	1c5a      	adds	r2, r3, #1
 8009c5e:	921b      	str	r2, [sp, #108]	; 0x6c
 8009c60:	785b      	ldrb	r3, [r3, #1]
 8009c62:	2b30      	cmp	r3, #48	; 0x30
 8009c64:	d0f9      	beq.n	8009c5a <_strtod_l+0x132>
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d099      	beq.n	8009b9e <_strtod_l+0x76>
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c6e:	2500      	movs	r5, #0
 8009c70:	220a      	movs	r2, #10
 8009c72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c74:	950d      	str	r5, [sp, #52]	; 0x34
 8009c76:	9310      	str	r3, [sp, #64]	; 0x40
 8009c78:	9508      	str	r5, [sp, #32]
 8009c7a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8009c7c:	7804      	ldrb	r4, [r0, #0]
 8009c7e:	0023      	movs	r3, r4
 8009c80:	3b30      	subs	r3, #48	; 0x30
 8009c82:	b2d9      	uxtb	r1, r3
 8009c84:	2909      	cmp	r1, #9
 8009c86:	d927      	bls.n	8009cd8 <_strtod_l+0x1b0>
 8009c88:	2201      	movs	r2, #1
 8009c8a:	4956      	ldr	r1, [pc, #344]	; (8009de4 <_strtod_l+0x2bc>)
 8009c8c:	f000 ff98 	bl	800abc0 <strncmp>
 8009c90:	2800      	cmp	r0, #0
 8009c92:	d031      	beq.n	8009cf8 <_strtod_l+0x1d0>
 8009c94:	2000      	movs	r0, #0
 8009c96:	0023      	movs	r3, r4
 8009c98:	4684      	mov	ip, r0
 8009c9a:	9a08      	ldr	r2, [sp, #32]
 8009c9c:	900c      	str	r0, [sp, #48]	; 0x30
 8009c9e:	9205      	str	r2, [sp, #20]
 8009ca0:	2220      	movs	r2, #32
 8009ca2:	0019      	movs	r1, r3
 8009ca4:	4391      	bics	r1, r2
 8009ca6:	000a      	movs	r2, r1
 8009ca8:	2100      	movs	r1, #0
 8009caa:	9106      	str	r1, [sp, #24]
 8009cac:	2a45      	cmp	r2, #69	; 0x45
 8009cae:	d000      	beq.n	8009cb2 <_strtod_l+0x18a>
 8009cb0:	e0c2      	b.n	8009e38 <_strtod_l+0x310>
 8009cb2:	9b05      	ldr	r3, [sp, #20]
 8009cb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cb6:	4303      	orrs	r3, r0
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	428b      	cmp	r3, r1
 8009cbc:	d08d      	beq.n	8009bda <_strtod_l+0xb2>
 8009cbe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009cc0:	9307      	str	r3, [sp, #28]
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	931b      	str	r3, [sp, #108]	; 0x6c
 8009cc6:	9b07      	ldr	r3, [sp, #28]
 8009cc8:	785b      	ldrb	r3, [r3, #1]
 8009cca:	2b2b      	cmp	r3, #43	; 0x2b
 8009ccc:	d071      	beq.n	8009db2 <_strtod_l+0x28a>
 8009cce:	000c      	movs	r4, r1
 8009cd0:	2b2d      	cmp	r3, #45	; 0x2d
 8009cd2:	d174      	bne.n	8009dbe <_strtod_l+0x296>
 8009cd4:	2401      	movs	r4, #1
 8009cd6:	e06d      	b.n	8009db4 <_strtod_l+0x28c>
 8009cd8:	9908      	ldr	r1, [sp, #32]
 8009cda:	2908      	cmp	r1, #8
 8009cdc:	dc09      	bgt.n	8009cf2 <_strtod_l+0x1ca>
 8009cde:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009ce0:	4351      	muls	r1, r2
 8009ce2:	185b      	adds	r3, r3, r1
 8009ce4:	930d      	str	r3, [sp, #52]	; 0x34
 8009ce6:	9b08      	ldr	r3, [sp, #32]
 8009ce8:	3001      	adds	r0, #1
 8009cea:	3301      	adds	r3, #1
 8009cec:	9308      	str	r3, [sp, #32]
 8009cee:	901b      	str	r0, [sp, #108]	; 0x6c
 8009cf0:	e7c3      	b.n	8009c7a <_strtod_l+0x152>
 8009cf2:	4355      	muls	r5, r2
 8009cf4:	195d      	adds	r5, r3, r5
 8009cf6:	e7f6      	b.n	8009ce6 <_strtod_l+0x1be>
 8009cf8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009cfa:	1c5a      	adds	r2, r3, #1
 8009cfc:	921b      	str	r2, [sp, #108]	; 0x6c
 8009cfe:	9a08      	ldr	r2, [sp, #32]
 8009d00:	785b      	ldrb	r3, [r3, #1]
 8009d02:	2a00      	cmp	r2, #0
 8009d04:	d03a      	beq.n	8009d7c <_strtod_l+0x254>
 8009d06:	900c      	str	r0, [sp, #48]	; 0x30
 8009d08:	9205      	str	r2, [sp, #20]
 8009d0a:	001a      	movs	r2, r3
 8009d0c:	3a30      	subs	r2, #48	; 0x30
 8009d0e:	2a09      	cmp	r2, #9
 8009d10:	d912      	bls.n	8009d38 <_strtod_l+0x210>
 8009d12:	2201      	movs	r2, #1
 8009d14:	4694      	mov	ip, r2
 8009d16:	e7c3      	b.n	8009ca0 <_strtod_l+0x178>
 8009d18:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d1a:	3001      	adds	r0, #1
 8009d1c:	1c5a      	adds	r2, r3, #1
 8009d1e:	921b      	str	r2, [sp, #108]	; 0x6c
 8009d20:	785b      	ldrb	r3, [r3, #1]
 8009d22:	2b30      	cmp	r3, #48	; 0x30
 8009d24:	d0f8      	beq.n	8009d18 <_strtod_l+0x1f0>
 8009d26:	001a      	movs	r2, r3
 8009d28:	3a31      	subs	r2, #49	; 0x31
 8009d2a:	2a08      	cmp	r2, #8
 8009d2c:	d83c      	bhi.n	8009da8 <_strtod_l+0x280>
 8009d2e:	900c      	str	r0, [sp, #48]	; 0x30
 8009d30:	2000      	movs	r0, #0
 8009d32:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009d34:	9005      	str	r0, [sp, #20]
 8009d36:	9210      	str	r2, [sp, #64]	; 0x40
 8009d38:	001a      	movs	r2, r3
 8009d3a:	1c41      	adds	r1, r0, #1
 8009d3c:	3a30      	subs	r2, #48	; 0x30
 8009d3e:	2b30      	cmp	r3, #48	; 0x30
 8009d40:	d016      	beq.n	8009d70 <_strtod_l+0x248>
 8009d42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d44:	185b      	adds	r3, r3, r1
 8009d46:	930c      	str	r3, [sp, #48]	; 0x30
 8009d48:	9b05      	ldr	r3, [sp, #20]
 8009d4a:	210a      	movs	r1, #10
 8009d4c:	469c      	mov	ip, r3
 8009d4e:	4484      	add	ip, r0
 8009d50:	4563      	cmp	r3, ip
 8009d52:	d115      	bne.n	8009d80 <_strtod_l+0x258>
 8009d54:	9905      	ldr	r1, [sp, #20]
 8009d56:	9b05      	ldr	r3, [sp, #20]
 8009d58:	3101      	adds	r1, #1
 8009d5a:	1809      	adds	r1, r1, r0
 8009d5c:	181b      	adds	r3, r3, r0
 8009d5e:	9105      	str	r1, [sp, #20]
 8009d60:	2b08      	cmp	r3, #8
 8009d62:	dc19      	bgt.n	8009d98 <_strtod_l+0x270>
 8009d64:	230a      	movs	r3, #10
 8009d66:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009d68:	434b      	muls	r3, r1
 8009d6a:	2100      	movs	r1, #0
 8009d6c:	18d3      	adds	r3, r2, r3
 8009d6e:	930d      	str	r3, [sp, #52]	; 0x34
 8009d70:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d72:	0008      	movs	r0, r1
 8009d74:	1c5a      	adds	r2, r3, #1
 8009d76:	921b      	str	r2, [sp, #108]	; 0x6c
 8009d78:	785b      	ldrb	r3, [r3, #1]
 8009d7a:	e7c6      	b.n	8009d0a <_strtod_l+0x1e2>
 8009d7c:	9808      	ldr	r0, [sp, #32]
 8009d7e:	e7d0      	b.n	8009d22 <_strtod_l+0x1fa>
 8009d80:	1c5c      	adds	r4, r3, #1
 8009d82:	2b08      	cmp	r3, #8
 8009d84:	dc04      	bgt.n	8009d90 <_strtod_l+0x268>
 8009d86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d88:	434b      	muls	r3, r1
 8009d8a:	930d      	str	r3, [sp, #52]	; 0x34
 8009d8c:	0023      	movs	r3, r4
 8009d8e:	e7df      	b.n	8009d50 <_strtod_l+0x228>
 8009d90:	2c10      	cmp	r4, #16
 8009d92:	dcfb      	bgt.n	8009d8c <_strtod_l+0x264>
 8009d94:	434d      	muls	r5, r1
 8009d96:	e7f9      	b.n	8009d8c <_strtod_l+0x264>
 8009d98:	9b05      	ldr	r3, [sp, #20]
 8009d9a:	2100      	movs	r1, #0
 8009d9c:	2b10      	cmp	r3, #16
 8009d9e:	dce7      	bgt.n	8009d70 <_strtod_l+0x248>
 8009da0:	230a      	movs	r3, #10
 8009da2:	435d      	muls	r5, r3
 8009da4:	1955      	adds	r5, r2, r5
 8009da6:	e7e3      	b.n	8009d70 <_strtod_l+0x248>
 8009da8:	2200      	movs	r2, #0
 8009daa:	920c      	str	r2, [sp, #48]	; 0x30
 8009dac:	9205      	str	r2, [sp, #20]
 8009dae:	3201      	adds	r2, #1
 8009db0:	e7b0      	b.n	8009d14 <_strtod_l+0x1ec>
 8009db2:	2400      	movs	r4, #0
 8009db4:	9b07      	ldr	r3, [sp, #28]
 8009db6:	3302      	adds	r3, #2
 8009db8:	931b      	str	r3, [sp, #108]	; 0x6c
 8009dba:	9b07      	ldr	r3, [sp, #28]
 8009dbc:	789b      	ldrb	r3, [r3, #2]
 8009dbe:	001a      	movs	r2, r3
 8009dc0:	3a30      	subs	r2, #48	; 0x30
 8009dc2:	2a09      	cmp	r2, #9
 8009dc4:	d914      	bls.n	8009df0 <_strtod_l+0x2c8>
 8009dc6:	9a07      	ldr	r2, [sp, #28]
 8009dc8:	921b      	str	r2, [sp, #108]	; 0x6c
 8009dca:	2200      	movs	r2, #0
 8009dcc:	e033      	b.n	8009e36 <_strtod_l+0x30e>
 8009dce:	46c0      	nop			; (mov r8, r8)
 8009dd0:	08013098 	.word	0x08013098
 8009dd4:	7ff00000 	.word	0x7ff00000
 8009dd8:	ffefffff 	.word	0xffefffff
 8009ddc:	00000433 	.word	0x00000433
 8009de0:	7fffffff 	.word	0x7fffffff
 8009de4:	08013094 	.word	0x08013094
 8009de8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009dea:	1c5a      	adds	r2, r3, #1
 8009dec:	921b      	str	r2, [sp, #108]	; 0x6c
 8009dee:	785b      	ldrb	r3, [r3, #1]
 8009df0:	2b30      	cmp	r3, #48	; 0x30
 8009df2:	d0f9      	beq.n	8009de8 <_strtod_l+0x2c0>
 8009df4:	2200      	movs	r2, #0
 8009df6:	9206      	str	r2, [sp, #24]
 8009df8:	001a      	movs	r2, r3
 8009dfa:	3a31      	subs	r2, #49	; 0x31
 8009dfc:	2a08      	cmp	r2, #8
 8009dfe:	d81b      	bhi.n	8009e38 <_strtod_l+0x310>
 8009e00:	3b30      	subs	r3, #48	; 0x30
 8009e02:	930e      	str	r3, [sp, #56]	; 0x38
 8009e04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e06:	9306      	str	r3, [sp, #24]
 8009e08:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e0a:	1c59      	adds	r1, r3, #1
 8009e0c:	911b      	str	r1, [sp, #108]	; 0x6c
 8009e0e:	785b      	ldrb	r3, [r3, #1]
 8009e10:	001a      	movs	r2, r3
 8009e12:	3a30      	subs	r2, #48	; 0x30
 8009e14:	2a09      	cmp	r2, #9
 8009e16:	d93a      	bls.n	8009e8e <_strtod_l+0x366>
 8009e18:	9a06      	ldr	r2, [sp, #24]
 8009e1a:	1a8a      	subs	r2, r1, r2
 8009e1c:	49b2      	ldr	r1, [pc, #712]	; (800a0e8 <_strtod_l+0x5c0>)
 8009e1e:	9106      	str	r1, [sp, #24]
 8009e20:	2a08      	cmp	r2, #8
 8009e22:	dc04      	bgt.n	8009e2e <_strtod_l+0x306>
 8009e24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e26:	9206      	str	r2, [sp, #24]
 8009e28:	428a      	cmp	r2, r1
 8009e2a:	dd00      	ble.n	8009e2e <_strtod_l+0x306>
 8009e2c:	9106      	str	r1, [sp, #24]
 8009e2e:	2c00      	cmp	r4, #0
 8009e30:	d002      	beq.n	8009e38 <_strtod_l+0x310>
 8009e32:	9a06      	ldr	r2, [sp, #24]
 8009e34:	4252      	negs	r2, r2
 8009e36:	9206      	str	r2, [sp, #24]
 8009e38:	9a05      	ldr	r2, [sp, #20]
 8009e3a:	2a00      	cmp	r2, #0
 8009e3c:	d14d      	bne.n	8009eda <_strtod_l+0x3b2>
 8009e3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e40:	4310      	orrs	r0, r2
 8009e42:	d000      	beq.n	8009e46 <_strtod_l+0x31e>
 8009e44:	e6ab      	b.n	8009b9e <_strtod_l+0x76>
 8009e46:	4662      	mov	r2, ip
 8009e48:	2a00      	cmp	r2, #0
 8009e4a:	d000      	beq.n	8009e4e <_strtod_l+0x326>
 8009e4c:	e6c5      	b.n	8009bda <_strtod_l+0xb2>
 8009e4e:	2b69      	cmp	r3, #105	; 0x69
 8009e50:	d027      	beq.n	8009ea2 <_strtod_l+0x37a>
 8009e52:	dc23      	bgt.n	8009e9c <_strtod_l+0x374>
 8009e54:	2b49      	cmp	r3, #73	; 0x49
 8009e56:	d024      	beq.n	8009ea2 <_strtod_l+0x37a>
 8009e58:	2b4e      	cmp	r3, #78	; 0x4e
 8009e5a:	d000      	beq.n	8009e5e <_strtod_l+0x336>
 8009e5c:	e6bd      	b.n	8009bda <_strtod_l+0xb2>
 8009e5e:	49a3      	ldr	r1, [pc, #652]	; (800a0ec <_strtod_l+0x5c4>)
 8009e60:	a81b      	add	r0, sp, #108	; 0x6c
 8009e62:	f001 fb57 	bl	800b514 <__match>
 8009e66:	2800      	cmp	r0, #0
 8009e68:	d100      	bne.n	8009e6c <_strtod_l+0x344>
 8009e6a:	e6b6      	b.n	8009bda <_strtod_l+0xb2>
 8009e6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	2b28      	cmp	r3, #40	; 0x28
 8009e72:	d12c      	bne.n	8009ece <_strtod_l+0x3a6>
 8009e74:	499e      	ldr	r1, [pc, #632]	; (800a0f0 <_strtod_l+0x5c8>)
 8009e76:	aa1e      	add	r2, sp, #120	; 0x78
 8009e78:	a81b      	add	r0, sp, #108	; 0x6c
 8009e7a:	f001 fb5f 	bl	800b53c <__hexnan>
 8009e7e:	2805      	cmp	r0, #5
 8009e80:	d125      	bne.n	8009ece <_strtod_l+0x3a6>
 8009e82:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009e84:	4a9b      	ldr	r2, [pc, #620]	; (800a0f4 <_strtod_l+0x5cc>)
 8009e86:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8009e88:	431a      	orrs	r2, r3
 8009e8a:	0017      	movs	r7, r2
 8009e8c:	e687      	b.n	8009b9e <_strtod_l+0x76>
 8009e8e:	220a      	movs	r2, #10
 8009e90:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009e92:	434a      	muls	r2, r1
 8009e94:	18d2      	adds	r2, r2, r3
 8009e96:	3a30      	subs	r2, #48	; 0x30
 8009e98:	920e      	str	r2, [sp, #56]	; 0x38
 8009e9a:	e7b5      	b.n	8009e08 <_strtod_l+0x2e0>
 8009e9c:	2b6e      	cmp	r3, #110	; 0x6e
 8009e9e:	d0de      	beq.n	8009e5e <_strtod_l+0x336>
 8009ea0:	e69b      	b.n	8009bda <_strtod_l+0xb2>
 8009ea2:	4995      	ldr	r1, [pc, #596]	; (800a0f8 <_strtod_l+0x5d0>)
 8009ea4:	a81b      	add	r0, sp, #108	; 0x6c
 8009ea6:	f001 fb35 	bl	800b514 <__match>
 8009eaa:	2800      	cmp	r0, #0
 8009eac:	d100      	bne.n	8009eb0 <_strtod_l+0x388>
 8009eae:	e694      	b.n	8009bda <_strtod_l+0xb2>
 8009eb0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009eb2:	4992      	ldr	r1, [pc, #584]	; (800a0fc <_strtod_l+0x5d4>)
 8009eb4:	3b01      	subs	r3, #1
 8009eb6:	a81b      	add	r0, sp, #108	; 0x6c
 8009eb8:	931b      	str	r3, [sp, #108]	; 0x6c
 8009eba:	f001 fb2b 	bl	800b514 <__match>
 8009ebe:	2800      	cmp	r0, #0
 8009ec0:	d102      	bne.n	8009ec8 <_strtod_l+0x3a0>
 8009ec2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	931b      	str	r3, [sp, #108]	; 0x6c
 8009ec8:	2600      	movs	r6, #0
 8009eca:	4f8a      	ldr	r7, [pc, #552]	; (800a0f4 <_strtod_l+0x5cc>)
 8009ecc:	e667      	b.n	8009b9e <_strtod_l+0x76>
 8009ece:	488c      	ldr	r0, [pc, #560]	; (800a100 <_strtod_l+0x5d8>)
 8009ed0:	f000 ff5c 	bl	800ad8c <nan>
 8009ed4:	0006      	movs	r6, r0
 8009ed6:	000f      	movs	r7, r1
 8009ed8:	e661      	b.n	8009b9e <_strtod_l+0x76>
 8009eda:	9b06      	ldr	r3, [sp, #24]
 8009edc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ede:	1a9b      	subs	r3, r3, r2
 8009ee0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ee2:	9b08      	ldr	r3, [sp, #32]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d101      	bne.n	8009eec <_strtod_l+0x3c4>
 8009ee8:	9b05      	ldr	r3, [sp, #20]
 8009eea:	9308      	str	r3, [sp, #32]
 8009eec:	9c05      	ldr	r4, [sp, #20]
 8009eee:	2c10      	cmp	r4, #16
 8009ef0:	dd00      	ble.n	8009ef4 <_strtod_l+0x3cc>
 8009ef2:	2410      	movs	r4, #16
 8009ef4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009ef6:	f7f8 fa81 	bl	80023fc <__aeabi_ui2d>
 8009efa:	9b05      	ldr	r3, [sp, #20]
 8009efc:	0006      	movs	r6, r0
 8009efe:	000f      	movs	r7, r1
 8009f00:	2b09      	cmp	r3, #9
 8009f02:	dd15      	ble.n	8009f30 <_strtod_l+0x408>
 8009f04:	0022      	movs	r2, r4
 8009f06:	4b7f      	ldr	r3, [pc, #508]	; (800a104 <_strtod_l+0x5dc>)
 8009f08:	3a09      	subs	r2, #9
 8009f0a:	00d2      	lsls	r2, r2, #3
 8009f0c:	189b      	adds	r3, r3, r2
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	f7f7 fbab 	bl	800166c <__aeabi_dmul>
 8009f16:	0006      	movs	r6, r0
 8009f18:	0028      	movs	r0, r5
 8009f1a:	000f      	movs	r7, r1
 8009f1c:	f7f8 fa6e 	bl	80023fc <__aeabi_ui2d>
 8009f20:	0002      	movs	r2, r0
 8009f22:	000b      	movs	r3, r1
 8009f24:	0030      	movs	r0, r6
 8009f26:	0039      	movs	r1, r7
 8009f28:	f7f6 fc46 	bl	80007b8 <__aeabi_dadd>
 8009f2c:	0006      	movs	r6, r0
 8009f2e:	000f      	movs	r7, r1
 8009f30:	9b05      	ldr	r3, [sp, #20]
 8009f32:	2b0f      	cmp	r3, #15
 8009f34:	dc39      	bgt.n	8009faa <_strtod_l+0x482>
 8009f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d100      	bne.n	8009f3e <_strtod_l+0x416>
 8009f3c:	e62f      	b.n	8009b9e <_strtod_l+0x76>
 8009f3e:	dd24      	ble.n	8009f8a <_strtod_l+0x462>
 8009f40:	2b16      	cmp	r3, #22
 8009f42:	dc09      	bgt.n	8009f58 <_strtod_l+0x430>
 8009f44:	496f      	ldr	r1, [pc, #444]	; (800a104 <_strtod_l+0x5dc>)
 8009f46:	00db      	lsls	r3, r3, #3
 8009f48:	18c9      	adds	r1, r1, r3
 8009f4a:	0032      	movs	r2, r6
 8009f4c:	6808      	ldr	r0, [r1, #0]
 8009f4e:	6849      	ldr	r1, [r1, #4]
 8009f50:	003b      	movs	r3, r7
 8009f52:	f7f7 fb8b 	bl	800166c <__aeabi_dmul>
 8009f56:	e7bd      	b.n	8009ed4 <_strtod_l+0x3ac>
 8009f58:	2325      	movs	r3, #37	; 0x25
 8009f5a:	9a05      	ldr	r2, [sp, #20]
 8009f5c:	1a9b      	subs	r3, r3, r2
 8009f5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f60:	4293      	cmp	r3, r2
 8009f62:	db22      	blt.n	8009faa <_strtod_l+0x482>
 8009f64:	240f      	movs	r4, #15
 8009f66:	9b05      	ldr	r3, [sp, #20]
 8009f68:	4d66      	ldr	r5, [pc, #408]	; (800a104 <_strtod_l+0x5dc>)
 8009f6a:	1ae4      	subs	r4, r4, r3
 8009f6c:	00e1      	lsls	r1, r4, #3
 8009f6e:	1869      	adds	r1, r5, r1
 8009f70:	0032      	movs	r2, r6
 8009f72:	6808      	ldr	r0, [r1, #0]
 8009f74:	6849      	ldr	r1, [r1, #4]
 8009f76:	003b      	movs	r3, r7
 8009f78:	f7f7 fb78 	bl	800166c <__aeabi_dmul>
 8009f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f7e:	1b1c      	subs	r4, r3, r4
 8009f80:	00e4      	lsls	r4, r4, #3
 8009f82:	192d      	adds	r5, r5, r4
 8009f84:	682a      	ldr	r2, [r5, #0]
 8009f86:	686b      	ldr	r3, [r5, #4]
 8009f88:	e7e3      	b.n	8009f52 <_strtod_l+0x42a>
 8009f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f8c:	3316      	adds	r3, #22
 8009f8e:	db0c      	blt.n	8009faa <_strtod_l+0x482>
 8009f90:	9906      	ldr	r1, [sp, #24]
 8009f92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f94:	4b5b      	ldr	r3, [pc, #364]	; (800a104 <_strtod_l+0x5dc>)
 8009f96:	1a52      	subs	r2, r2, r1
 8009f98:	00d2      	lsls	r2, r2, #3
 8009f9a:	189b      	adds	r3, r3, r2
 8009f9c:	0030      	movs	r0, r6
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	0039      	movs	r1, r7
 8009fa4:	f7f6 ff68 	bl	8000e78 <__aeabi_ddiv>
 8009fa8:	e794      	b.n	8009ed4 <_strtod_l+0x3ac>
 8009faa:	9b05      	ldr	r3, [sp, #20]
 8009fac:	1b1c      	subs	r4, r3, r4
 8009fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fb0:	18e4      	adds	r4, r4, r3
 8009fb2:	2c00      	cmp	r4, #0
 8009fb4:	dd72      	ble.n	800a09c <_strtod_l+0x574>
 8009fb6:	220f      	movs	r2, #15
 8009fb8:	0023      	movs	r3, r4
 8009fba:	4013      	ands	r3, r2
 8009fbc:	4214      	tst	r4, r2
 8009fbe:	d00a      	beq.n	8009fd6 <_strtod_l+0x4ae>
 8009fc0:	4950      	ldr	r1, [pc, #320]	; (800a104 <_strtod_l+0x5dc>)
 8009fc2:	00db      	lsls	r3, r3, #3
 8009fc4:	18c9      	adds	r1, r1, r3
 8009fc6:	0032      	movs	r2, r6
 8009fc8:	6808      	ldr	r0, [r1, #0]
 8009fca:	6849      	ldr	r1, [r1, #4]
 8009fcc:	003b      	movs	r3, r7
 8009fce:	f7f7 fb4d 	bl	800166c <__aeabi_dmul>
 8009fd2:	0006      	movs	r6, r0
 8009fd4:	000f      	movs	r7, r1
 8009fd6:	230f      	movs	r3, #15
 8009fd8:	439c      	bics	r4, r3
 8009fda:	d04a      	beq.n	800a072 <_strtod_l+0x54a>
 8009fdc:	3326      	adds	r3, #38	; 0x26
 8009fde:	33ff      	adds	r3, #255	; 0xff
 8009fe0:	429c      	cmp	r4, r3
 8009fe2:	dd22      	ble.n	800a02a <_strtod_l+0x502>
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	9305      	str	r3, [sp, #20]
 8009fe8:	9306      	str	r3, [sp, #24]
 8009fea:	930d      	str	r3, [sp, #52]	; 0x34
 8009fec:	9308      	str	r3, [sp, #32]
 8009fee:	2322      	movs	r3, #34	; 0x22
 8009ff0:	2600      	movs	r6, #0
 8009ff2:	9a04      	ldr	r2, [sp, #16]
 8009ff4:	4f3f      	ldr	r7, [pc, #252]	; (800a0f4 <_strtod_l+0x5cc>)
 8009ff6:	6013      	str	r3, [r2, #0]
 8009ff8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ffa:	42b3      	cmp	r3, r6
 8009ffc:	d100      	bne.n	800a000 <_strtod_l+0x4d8>
 8009ffe:	e5ce      	b.n	8009b9e <_strtod_l+0x76>
 800a000:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a002:	9804      	ldr	r0, [sp, #16]
 800a004:	f001 fb7c 	bl	800b700 <_Bfree>
 800a008:	9908      	ldr	r1, [sp, #32]
 800a00a:	9804      	ldr	r0, [sp, #16]
 800a00c:	f001 fb78 	bl	800b700 <_Bfree>
 800a010:	9906      	ldr	r1, [sp, #24]
 800a012:	9804      	ldr	r0, [sp, #16]
 800a014:	f001 fb74 	bl	800b700 <_Bfree>
 800a018:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a01a:	9804      	ldr	r0, [sp, #16]
 800a01c:	f001 fb70 	bl	800b700 <_Bfree>
 800a020:	9905      	ldr	r1, [sp, #20]
 800a022:	9804      	ldr	r0, [sp, #16]
 800a024:	f001 fb6c 	bl	800b700 <_Bfree>
 800a028:	e5b9      	b.n	8009b9e <_strtod_l+0x76>
 800a02a:	2300      	movs	r3, #0
 800a02c:	0030      	movs	r0, r6
 800a02e:	0039      	movs	r1, r7
 800a030:	4d35      	ldr	r5, [pc, #212]	; (800a108 <_strtod_l+0x5e0>)
 800a032:	1124      	asrs	r4, r4, #4
 800a034:	9307      	str	r3, [sp, #28]
 800a036:	2c01      	cmp	r4, #1
 800a038:	dc1e      	bgt.n	800a078 <_strtod_l+0x550>
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d001      	beq.n	800a042 <_strtod_l+0x51a>
 800a03e:	0006      	movs	r6, r0
 800a040:	000f      	movs	r7, r1
 800a042:	4b32      	ldr	r3, [pc, #200]	; (800a10c <_strtod_l+0x5e4>)
 800a044:	9a07      	ldr	r2, [sp, #28]
 800a046:	18ff      	adds	r7, r7, r3
 800a048:	4b2f      	ldr	r3, [pc, #188]	; (800a108 <_strtod_l+0x5e0>)
 800a04a:	00d2      	lsls	r2, r2, #3
 800a04c:	189d      	adds	r5, r3, r2
 800a04e:	6828      	ldr	r0, [r5, #0]
 800a050:	6869      	ldr	r1, [r5, #4]
 800a052:	0032      	movs	r2, r6
 800a054:	003b      	movs	r3, r7
 800a056:	f7f7 fb09 	bl	800166c <__aeabi_dmul>
 800a05a:	4b26      	ldr	r3, [pc, #152]	; (800a0f4 <_strtod_l+0x5cc>)
 800a05c:	4a2c      	ldr	r2, [pc, #176]	; (800a110 <_strtod_l+0x5e8>)
 800a05e:	0006      	movs	r6, r0
 800a060:	400b      	ands	r3, r1
 800a062:	4293      	cmp	r3, r2
 800a064:	d8be      	bhi.n	8009fe4 <_strtod_l+0x4bc>
 800a066:	4a2b      	ldr	r2, [pc, #172]	; (800a114 <_strtod_l+0x5ec>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d913      	bls.n	800a094 <_strtod_l+0x56c>
 800a06c:	2601      	movs	r6, #1
 800a06e:	4f2a      	ldr	r7, [pc, #168]	; (800a118 <_strtod_l+0x5f0>)
 800a070:	4276      	negs	r6, r6
 800a072:	2300      	movs	r3, #0
 800a074:	9307      	str	r3, [sp, #28]
 800a076:	e088      	b.n	800a18a <_strtod_l+0x662>
 800a078:	2201      	movs	r2, #1
 800a07a:	4214      	tst	r4, r2
 800a07c:	d004      	beq.n	800a088 <_strtod_l+0x560>
 800a07e:	682a      	ldr	r2, [r5, #0]
 800a080:	686b      	ldr	r3, [r5, #4]
 800a082:	f7f7 faf3 	bl	800166c <__aeabi_dmul>
 800a086:	2301      	movs	r3, #1
 800a088:	9a07      	ldr	r2, [sp, #28]
 800a08a:	1064      	asrs	r4, r4, #1
 800a08c:	3201      	adds	r2, #1
 800a08e:	9207      	str	r2, [sp, #28]
 800a090:	3508      	adds	r5, #8
 800a092:	e7d0      	b.n	800a036 <_strtod_l+0x50e>
 800a094:	23d4      	movs	r3, #212	; 0xd4
 800a096:	049b      	lsls	r3, r3, #18
 800a098:	18cf      	adds	r7, r1, r3
 800a09a:	e7ea      	b.n	800a072 <_strtod_l+0x54a>
 800a09c:	2c00      	cmp	r4, #0
 800a09e:	d0e8      	beq.n	800a072 <_strtod_l+0x54a>
 800a0a0:	4264      	negs	r4, r4
 800a0a2:	230f      	movs	r3, #15
 800a0a4:	0022      	movs	r2, r4
 800a0a6:	401a      	ands	r2, r3
 800a0a8:	421c      	tst	r4, r3
 800a0aa:	d00a      	beq.n	800a0c2 <_strtod_l+0x59a>
 800a0ac:	4b15      	ldr	r3, [pc, #84]	; (800a104 <_strtod_l+0x5dc>)
 800a0ae:	00d2      	lsls	r2, r2, #3
 800a0b0:	189b      	adds	r3, r3, r2
 800a0b2:	0030      	movs	r0, r6
 800a0b4:	681a      	ldr	r2, [r3, #0]
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	0039      	movs	r1, r7
 800a0ba:	f7f6 fedd 	bl	8000e78 <__aeabi_ddiv>
 800a0be:	0006      	movs	r6, r0
 800a0c0:	000f      	movs	r7, r1
 800a0c2:	1124      	asrs	r4, r4, #4
 800a0c4:	d0d5      	beq.n	800a072 <_strtod_l+0x54a>
 800a0c6:	2c1f      	cmp	r4, #31
 800a0c8:	dd28      	ble.n	800a11c <_strtod_l+0x5f4>
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	9305      	str	r3, [sp, #20]
 800a0ce:	9306      	str	r3, [sp, #24]
 800a0d0:	930d      	str	r3, [sp, #52]	; 0x34
 800a0d2:	9308      	str	r3, [sp, #32]
 800a0d4:	2322      	movs	r3, #34	; 0x22
 800a0d6:	9a04      	ldr	r2, [sp, #16]
 800a0d8:	2600      	movs	r6, #0
 800a0da:	6013      	str	r3, [r2, #0]
 800a0dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0de:	2700      	movs	r7, #0
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d18d      	bne.n	800a000 <_strtod_l+0x4d8>
 800a0e4:	e55b      	b.n	8009b9e <_strtod_l+0x76>
 800a0e6:	46c0      	nop			; (mov r8, r8)
 800a0e8:	00004e1f 	.word	0x00004e1f
 800a0ec:	080133c9 	.word	0x080133c9
 800a0f0:	080130ac 	.word	0x080130ac
 800a0f4:	7ff00000 	.word	0x7ff00000
 800a0f8:	080133c1 	.word	0x080133c1
 800a0fc:	08013477 	.word	0x08013477
 800a100:	08013473 	.word	0x08013473
 800a104:	080132e8 	.word	0x080132e8
 800a108:	080132c0 	.word	0x080132c0
 800a10c:	fcb00000 	.word	0xfcb00000
 800a110:	7ca00000 	.word	0x7ca00000
 800a114:	7c900000 	.word	0x7c900000
 800a118:	7fefffff 	.word	0x7fefffff
 800a11c:	2310      	movs	r3, #16
 800a11e:	0022      	movs	r2, r4
 800a120:	401a      	ands	r2, r3
 800a122:	9207      	str	r2, [sp, #28]
 800a124:	421c      	tst	r4, r3
 800a126:	d001      	beq.n	800a12c <_strtod_l+0x604>
 800a128:	335a      	adds	r3, #90	; 0x5a
 800a12a:	9307      	str	r3, [sp, #28]
 800a12c:	0030      	movs	r0, r6
 800a12e:	0039      	movs	r1, r7
 800a130:	2300      	movs	r3, #0
 800a132:	4dc4      	ldr	r5, [pc, #784]	; (800a444 <_strtod_l+0x91c>)
 800a134:	2201      	movs	r2, #1
 800a136:	4214      	tst	r4, r2
 800a138:	d004      	beq.n	800a144 <_strtod_l+0x61c>
 800a13a:	682a      	ldr	r2, [r5, #0]
 800a13c:	686b      	ldr	r3, [r5, #4]
 800a13e:	f7f7 fa95 	bl	800166c <__aeabi_dmul>
 800a142:	2301      	movs	r3, #1
 800a144:	1064      	asrs	r4, r4, #1
 800a146:	3508      	adds	r5, #8
 800a148:	2c00      	cmp	r4, #0
 800a14a:	d1f3      	bne.n	800a134 <_strtod_l+0x60c>
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d001      	beq.n	800a154 <_strtod_l+0x62c>
 800a150:	0006      	movs	r6, r0
 800a152:	000f      	movs	r7, r1
 800a154:	9b07      	ldr	r3, [sp, #28]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d00f      	beq.n	800a17a <_strtod_l+0x652>
 800a15a:	236b      	movs	r3, #107	; 0x6b
 800a15c:	007a      	lsls	r2, r7, #1
 800a15e:	0d52      	lsrs	r2, r2, #21
 800a160:	0039      	movs	r1, r7
 800a162:	1a9b      	subs	r3, r3, r2
 800a164:	2b00      	cmp	r3, #0
 800a166:	dd08      	ble.n	800a17a <_strtod_l+0x652>
 800a168:	2b1f      	cmp	r3, #31
 800a16a:	dc00      	bgt.n	800a16e <_strtod_l+0x646>
 800a16c:	e121      	b.n	800a3b2 <_strtod_l+0x88a>
 800a16e:	2600      	movs	r6, #0
 800a170:	2b34      	cmp	r3, #52	; 0x34
 800a172:	dc00      	bgt.n	800a176 <_strtod_l+0x64e>
 800a174:	e116      	b.n	800a3a4 <_strtod_l+0x87c>
 800a176:	27dc      	movs	r7, #220	; 0xdc
 800a178:	04bf      	lsls	r7, r7, #18
 800a17a:	2200      	movs	r2, #0
 800a17c:	2300      	movs	r3, #0
 800a17e:	0030      	movs	r0, r6
 800a180:	0039      	movs	r1, r7
 800a182:	f7f6 f961 	bl	8000448 <__aeabi_dcmpeq>
 800a186:	2800      	cmp	r0, #0
 800a188:	d19f      	bne.n	800a0ca <_strtod_l+0x5a2>
 800a18a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a18c:	9a08      	ldr	r2, [sp, #32]
 800a18e:	9300      	str	r3, [sp, #0]
 800a190:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a192:	9b05      	ldr	r3, [sp, #20]
 800a194:	9804      	ldr	r0, [sp, #16]
 800a196:	f001 fb01 	bl	800b79c <__s2b>
 800a19a:	900d      	str	r0, [sp, #52]	; 0x34
 800a19c:	2800      	cmp	r0, #0
 800a19e:	d100      	bne.n	800a1a2 <_strtod_l+0x67a>
 800a1a0:	e720      	b.n	8009fe4 <_strtod_l+0x4bc>
 800a1a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1a4:	9906      	ldr	r1, [sp, #24]
 800a1a6:	17da      	asrs	r2, r3, #31
 800a1a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1aa:	1a5b      	subs	r3, r3, r1
 800a1ac:	401a      	ands	r2, r3
 800a1ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1b0:	9215      	str	r2, [sp, #84]	; 0x54
 800a1b2:	43db      	mvns	r3, r3
 800a1b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1b6:	17db      	asrs	r3, r3, #31
 800a1b8:	401a      	ands	r2, r3
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	9218      	str	r2, [sp, #96]	; 0x60
 800a1be:	9305      	str	r3, [sp, #20]
 800a1c0:	9306      	str	r3, [sp, #24]
 800a1c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1c4:	9804      	ldr	r0, [sp, #16]
 800a1c6:	6859      	ldr	r1, [r3, #4]
 800a1c8:	f001 fa72 	bl	800b6b0 <_Balloc>
 800a1cc:	9008      	str	r0, [sp, #32]
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	d100      	bne.n	800a1d4 <_strtod_l+0x6ac>
 800a1d2:	e70c      	b.n	8009fee <_strtod_l+0x4c6>
 800a1d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1d6:	300c      	adds	r0, #12
 800a1d8:	0019      	movs	r1, r3
 800a1da:	691a      	ldr	r2, [r3, #16]
 800a1dc:	310c      	adds	r1, #12
 800a1de:	3202      	adds	r2, #2
 800a1e0:	0092      	lsls	r2, r2, #2
 800a1e2:	f000 fdca 	bl	800ad7a <memcpy>
 800a1e6:	ab1e      	add	r3, sp, #120	; 0x78
 800a1e8:	9301      	str	r3, [sp, #4]
 800a1ea:	ab1d      	add	r3, sp, #116	; 0x74
 800a1ec:	9300      	str	r3, [sp, #0]
 800a1ee:	0032      	movs	r2, r6
 800a1f0:	003b      	movs	r3, r7
 800a1f2:	9804      	ldr	r0, [sp, #16]
 800a1f4:	9610      	str	r6, [sp, #64]	; 0x40
 800a1f6:	9711      	str	r7, [sp, #68]	; 0x44
 800a1f8:	f001 fdf8 	bl	800bdec <__d2b>
 800a1fc:	901c      	str	r0, [sp, #112]	; 0x70
 800a1fe:	2800      	cmp	r0, #0
 800a200:	d100      	bne.n	800a204 <_strtod_l+0x6dc>
 800a202:	e6f4      	b.n	8009fee <_strtod_l+0x4c6>
 800a204:	2101      	movs	r1, #1
 800a206:	9804      	ldr	r0, [sp, #16]
 800a208:	f001 fb5c 	bl	800b8c4 <__i2b>
 800a20c:	9006      	str	r0, [sp, #24]
 800a20e:	2800      	cmp	r0, #0
 800a210:	d100      	bne.n	800a214 <_strtod_l+0x6ec>
 800a212:	e6ec      	b.n	8009fee <_strtod_l+0x4c6>
 800a214:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a216:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a218:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a21a:	1ad4      	subs	r4, r2, r3
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	db01      	blt.n	800a224 <_strtod_l+0x6fc>
 800a220:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800a222:	195d      	adds	r5, r3, r5
 800a224:	9907      	ldr	r1, [sp, #28]
 800a226:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a228:	1a5b      	subs	r3, r3, r1
 800a22a:	2136      	movs	r1, #54	; 0x36
 800a22c:	189b      	adds	r3, r3, r2
 800a22e:	1a8a      	subs	r2, r1, r2
 800a230:	4985      	ldr	r1, [pc, #532]	; (800a448 <_strtod_l+0x920>)
 800a232:	2001      	movs	r0, #1
 800a234:	468c      	mov	ip, r1
 800a236:	2100      	movs	r1, #0
 800a238:	3b01      	subs	r3, #1
 800a23a:	9114      	str	r1, [sp, #80]	; 0x50
 800a23c:	9012      	str	r0, [sp, #72]	; 0x48
 800a23e:	4563      	cmp	r3, ip
 800a240:	da07      	bge.n	800a252 <_strtod_l+0x72a>
 800a242:	4661      	mov	r1, ip
 800a244:	1ac9      	subs	r1, r1, r3
 800a246:	1a52      	subs	r2, r2, r1
 800a248:	291f      	cmp	r1, #31
 800a24a:	dd00      	ble.n	800a24e <_strtod_l+0x726>
 800a24c:	e0b6      	b.n	800a3bc <_strtod_l+0x894>
 800a24e:	4088      	lsls	r0, r1
 800a250:	9012      	str	r0, [sp, #72]	; 0x48
 800a252:	18ab      	adds	r3, r5, r2
 800a254:	930c      	str	r3, [sp, #48]	; 0x30
 800a256:	18a4      	adds	r4, r4, r2
 800a258:	9b07      	ldr	r3, [sp, #28]
 800a25a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a25c:	191c      	adds	r4, r3, r4
 800a25e:	002b      	movs	r3, r5
 800a260:	4295      	cmp	r5, r2
 800a262:	dd00      	ble.n	800a266 <_strtod_l+0x73e>
 800a264:	0013      	movs	r3, r2
 800a266:	42a3      	cmp	r3, r4
 800a268:	dd00      	ble.n	800a26c <_strtod_l+0x744>
 800a26a:	0023      	movs	r3, r4
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	dd04      	ble.n	800a27a <_strtod_l+0x752>
 800a270:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a272:	1ae4      	subs	r4, r4, r3
 800a274:	1ad2      	subs	r2, r2, r3
 800a276:	920c      	str	r2, [sp, #48]	; 0x30
 800a278:	1aed      	subs	r5, r5, r3
 800a27a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	dd17      	ble.n	800a2b0 <_strtod_l+0x788>
 800a280:	001a      	movs	r2, r3
 800a282:	9906      	ldr	r1, [sp, #24]
 800a284:	9804      	ldr	r0, [sp, #16]
 800a286:	f001 fbe5 	bl	800ba54 <__pow5mult>
 800a28a:	9006      	str	r0, [sp, #24]
 800a28c:	2800      	cmp	r0, #0
 800a28e:	d100      	bne.n	800a292 <_strtod_l+0x76a>
 800a290:	e6ad      	b.n	8009fee <_strtod_l+0x4c6>
 800a292:	0001      	movs	r1, r0
 800a294:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a296:	9804      	ldr	r0, [sp, #16]
 800a298:	f001 fb2c 	bl	800b8f4 <__multiply>
 800a29c:	900e      	str	r0, [sp, #56]	; 0x38
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	d100      	bne.n	800a2a4 <_strtod_l+0x77c>
 800a2a2:	e6a4      	b.n	8009fee <_strtod_l+0x4c6>
 800a2a4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a2a6:	9804      	ldr	r0, [sp, #16]
 800a2a8:	f001 fa2a 	bl	800b700 <_Bfree>
 800a2ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2ae:	931c      	str	r3, [sp, #112]	; 0x70
 800a2b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	dd00      	ble.n	800a2b8 <_strtod_l+0x790>
 800a2b6:	e087      	b.n	800a3c8 <_strtod_l+0x8a0>
 800a2b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	dd08      	ble.n	800a2d0 <_strtod_l+0x7a8>
 800a2be:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a2c0:	9908      	ldr	r1, [sp, #32]
 800a2c2:	9804      	ldr	r0, [sp, #16]
 800a2c4:	f001 fbc6 	bl	800ba54 <__pow5mult>
 800a2c8:	9008      	str	r0, [sp, #32]
 800a2ca:	2800      	cmp	r0, #0
 800a2cc:	d100      	bne.n	800a2d0 <_strtod_l+0x7a8>
 800a2ce:	e68e      	b.n	8009fee <_strtod_l+0x4c6>
 800a2d0:	2c00      	cmp	r4, #0
 800a2d2:	dd08      	ble.n	800a2e6 <_strtod_l+0x7be>
 800a2d4:	0022      	movs	r2, r4
 800a2d6:	9908      	ldr	r1, [sp, #32]
 800a2d8:	9804      	ldr	r0, [sp, #16]
 800a2da:	f001 fbfd 	bl	800bad8 <__lshift>
 800a2de:	9008      	str	r0, [sp, #32]
 800a2e0:	2800      	cmp	r0, #0
 800a2e2:	d100      	bne.n	800a2e6 <_strtod_l+0x7be>
 800a2e4:	e683      	b.n	8009fee <_strtod_l+0x4c6>
 800a2e6:	2d00      	cmp	r5, #0
 800a2e8:	dd08      	ble.n	800a2fc <_strtod_l+0x7d4>
 800a2ea:	002a      	movs	r2, r5
 800a2ec:	9906      	ldr	r1, [sp, #24]
 800a2ee:	9804      	ldr	r0, [sp, #16]
 800a2f0:	f001 fbf2 	bl	800bad8 <__lshift>
 800a2f4:	9006      	str	r0, [sp, #24]
 800a2f6:	2800      	cmp	r0, #0
 800a2f8:	d100      	bne.n	800a2fc <_strtod_l+0x7d4>
 800a2fa:	e678      	b.n	8009fee <_strtod_l+0x4c6>
 800a2fc:	9a08      	ldr	r2, [sp, #32]
 800a2fe:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a300:	9804      	ldr	r0, [sp, #16]
 800a302:	f001 fc73 	bl	800bbec <__mdiff>
 800a306:	9005      	str	r0, [sp, #20]
 800a308:	2800      	cmp	r0, #0
 800a30a:	d100      	bne.n	800a30e <_strtod_l+0x7e6>
 800a30c:	e66f      	b.n	8009fee <_strtod_l+0x4c6>
 800a30e:	2200      	movs	r2, #0
 800a310:	68c3      	ldr	r3, [r0, #12]
 800a312:	9906      	ldr	r1, [sp, #24]
 800a314:	60c2      	str	r2, [r0, #12]
 800a316:	930c      	str	r3, [sp, #48]	; 0x30
 800a318:	f001 fc4c 	bl	800bbb4 <__mcmp>
 800a31c:	2800      	cmp	r0, #0
 800a31e:	da5d      	bge.n	800a3dc <_strtod_l+0x8b4>
 800a320:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a322:	4333      	orrs	r3, r6
 800a324:	d000      	beq.n	800a328 <_strtod_l+0x800>
 800a326:	e088      	b.n	800a43a <_strtod_l+0x912>
 800a328:	033b      	lsls	r3, r7, #12
 800a32a:	d000      	beq.n	800a32e <_strtod_l+0x806>
 800a32c:	e085      	b.n	800a43a <_strtod_l+0x912>
 800a32e:	22d6      	movs	r2, #214	; 0xd6
 800a330:	4b46      	ldr	r3, [pc, #280]	; (800a44c <_strtod_l+0x924>)
 800a332:	04d2      	lsls	r2, r2, #19
 800a334:	403b      	ands	r3, r7
 800a336:	4293      	cmp	r3, r2
 800a338:	d97f      	bls.n	800a43a <_strtod_l+0x912>
 800a33a:	9b05      	ldr	r3, [sp, #20]
 800a33c:	695b      	ldr	r3, [r3, #20]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d103      	bne.n	800a34a <_strtod_l+0x822>
 800a342:	9b05      	ldr	r3, [sp, #20]
 800a344:	691b      	ldr	r3, [r3, #16]
 800a346:	2b01      	cmp	r3, #1
 800a348:	dd77      	ble.n	800a43a <_strtod_l+0x912>
 800a34a:	9905      	ldr	r1, [sp, #20]
 800a34c:	2201      	movs	r2, #1
 800a34e:	9804      	ldr	r0, [sp, #16]
 800a350:	f001 fbc2 	bl	800bad8 <__lshift>
 800a354:	9906      	ldr	r1, [sp, #24]
 800a356:	9005      	str	r0, [sp, #20]
 800a358:	f001 fc2c 	bl	800bbb4 <__mcmp>
 800a35c:	2800      	cmp	r0, #0
 800a35e:	dd6c      	ble.n	800a43a <_strtod_l+0x912>
 800a360:	9907      	ldr	r1, [sp, #28]
 800a362:	003b      	movs	r3, r7
 800a364:	4a39      	ldr	r2, [pc, #228]	; (800a44c <_strtod_l+0x924>)
 800a366:	2900      	cmp	r1, #0
 800a368:	d100      	bne.n	800a36c <_strtod_l+0x844>
 800a36a:	e094      	b.n	800a496 <_strtod_l+0x96e>
 800a36c:	0011      	movs	r1, r2
 800a36e:	20d6      	movs	r0, #214	; 0xd6
 800a370:	4039      	ands	r1, r7
 800a372:	04c0      	lsls	r0, r0, #19
 800a374:	4281      	cmp	r1, r0
 800a376:	dd00      	ble.n	800a37a <_strtod_l+0x852>
 800a378:	e08d      	b.n	800a496 <_strtod_l+0x96e>
 800a37a:	23dc      	movs	r3, #220	; 0xdc
 800a37c:	049b      	lsls	r3, r3, #18
 800a37e:	4299      	cmp	r1, r3
 800a380:	dc00      	bgt.n	800a384 <_strtod_l+0x85c>
 800a382:	e6a7      	b.n	800a0d4 <_strtod_l+0x5ac>
 800a384:	0030      	movs	r0, r6
 800a386:	0039      	movs	r1, r7
 800a388:	4b31      	ldr	r3, [pc, #196]	; (800a450 <_strtod_l+0x928>)
 800a38a:	2200      	movs	r2, #0
 800a38c:	f7f7 f96e 	bl	800166c <__aeabi_dmul>
 800a390:	4b2e      	ldr	r3, [pc, #184]	; (800a44c <_strtod_l+0x924>)
 800a392:	0006      	movs	r6, r0
 800a394:	000f      	movs	r7, r1
 800a396:	420b      	tst	r3, r1
 800a398:	d000      	beq.n	800a39c <_strtod_l+0x874>
 800a39a:	e631      	b.n	800a000 <_strtod_l+0x4d8>
 800a39c:	2322      	movs	r3, #34	; 0x22
 800a39e:	9a04      	ldr	r2, [sp, #16]
 800a3a0:	6013      	str	r3, [r2, #0]
 800a3a2:	e62d      	b.n	800a000 <_strtod_l+0x4d8>
 800a3a4:	234b      	movs	r3, #75	; 0x4b
 800a3a6:	1a9a      	subs	r2, r3, r2
 800a3a8:	3b4c      	subs	r3, #76	; 0x4c
 800a3aa:	4093      	lsls	r3, r2
 800a3ac:	4019      	ands	r1, r3
 800a3ae:	000f      	movs	r7, r1
 800a3b0:	e6e3      	b.n	800a17a <_strtod_l+0x652>
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	4252      	negs	r2, r2
 800a3b6:	409a      	lsls	r2, r3
 800a3b8:	4016      	ands	r6, r2
 800a3ba:	e6de      	b.n	800a17a <_strtod_l+0x652>
 800a3bc:	4925      	ldr	r1, [pc, #148]	; (800a454 <_strtod_l+0x92c>)
 800a3be:	1acb      	subs	r3, r1, r3
 800a3c0:	0001      	movs	r1, r0
 800a3c2:	4099      	lsls	r1, r3
 800a3c4:	9114      	str	r1, [sp, #80]	; 0x50
 800a3c6:	e743      	b.n	800a250 <_strtod_l+0x728>
 800a3c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3ca:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a3cc:	9804      	ldr	r0, [sp, #16]
 800a3ce:	f001 fb83 	bl	800bad8 <__lshift>
 800a3d2:	901c      	str	r0, [sp, #112]	; 0x70
 800a3d4:	2800      	cmp	r0, #0
 800a3d6:	d000      	beq.n	800a3da <_strtod_l+0x8b2>
 800a3d8:	e76e      	b.n	800a2b8 <_strtod_l+0x790>
 800a3da:	e608      	b.n	8009fee <_strtod_l+0x4c6>
 800a3dc:	970e      	str	r7, [sp, #56]	; 0x38
 800a3de:	2800      	cmp	r0, #0
 800a3e0:	d177      	bne.n	800a4d2 <_strtod_l+0x9aa>
 800a3e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3e4:	033b      	lsls	r3, r7, #12
 800a3e6:	0b1b      	lsrs	r3, r3, #12
 800a3e8:	2a00      	cmp	r2, #0
 800a3ea:	d039      	beq.n	800a460 <_strtod_l+0x938>
 800a3ec:	4a1a      	ldr	r2, [pc, #104]	; (800a458 <_strtod_l+0x930>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d139      	bne.n	800a466 <_strtod_l+0x93e>
 800a3f2:	2101      	movs	r1, #1
 800a3f4:	9b07      	ldr	r3, [sp, #28]
 800a3f6:	4249      	negs	r1, r1
 800a3f8:	0032      	movs	r2, r6
 800a3fa:	0008      	movs	r0, r1
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d00b      	beq.n	800a418 <_strtod_l+0x8f0>
 800a400:	24d4      	movs	r4, #212	; 0xd4
 800a402:	4b12      	ldr	r3, [pc, #72]	; (800a44c <_strtod_l+0x924>)
 800a404:	0008      	movs	r0, r1
 800a406:	403b      	ands	r3, r7
 800a408:	04e4      	lsls	r4, r4, #19
 800a40a:	42a3      	cmp	r3, r4
 800a40c:	d804      	bhi.n	800a418 <_strtod_l+0x8f0>
 800a40e:	306c      	adds	r0, #108	; 0x6c
 800a410:	0d1b      	lsrs	r3, r3, #20
 800a412:	1ac3      	subs	r3, r0, r3
 800a414:	4099      	lsls	r1, r3
 800a416:	0008      	movs	r0, r1
 800a418:	4282      	cmp	r2, r0
 800a41a:	d124      	bne.n	800a466 <_strtod_l+0x93e>
 800a41c:	4b0f      	ldr	r3, [pc, #60]	; (800a45c <_strtod_l+0x934>)
 800a41e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a420:	4299      	cmp	r1, r3
 800a422:	d102      	bne.n	800a42a <_strtod_l+0x902>
 800a424:	3201      	adds	r2, #1
 800a426:	d100      	bne.n	800a42a <_strtod_l+0x902>
 800a428:	e5e1      	b.n	8009fee <_strtod_l+0x4c6>
 800a42a:	4b08      	ldr	r3, [pc, #32]	; (800a44c <_strtod_l+0x924>)
 800a42c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a42e:	2600      	movs	r6, #0
 800a430:	401a      	ands	r2, r3
 800a432:	0013      	movs	r3, r2
 800a434:	2280      	movs	r2, #128	; 0x80
 800a436:	0352      	lsls	r2, r2, #13
 800a438:	189f      	adds	r7, r3, r2
 800a43a:	9b07      	ldr	r3, [sp, #28]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d1a1      	bne.n	800a384 <_strtod_l+0x85c>
 800a440:	e5de      	b.n	800a000 <_strtod_l+0x4d8>
 800a442:	46c0      	nop			; (mov r8, r8)
 800a444:	080130c0 	.word	0x080130c0
 800a448:	fffffc02 	.word	0xfffffc02
 800a44c:	7ff00000 	.word	0x7ff00000
 800a450:	39500000 	.word	0x39500000
 800a454:	fffffbe2 	.word	0xfffffbe2
 800a458:	000fffff 	.word	0x000fffff
 800a45c:	7fefffff 	.word	0x7fefffff
 800a460:	4333      	orrs	r3, r6
 800a462:	d100      	bne.n	800a466 <_strtod_l+0x93e>
 800a464:	e77c      	b.n	800a360 <_strtod_l+0x838>
 800a466:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d01d      	beq.n	800a4a8 <_strtod_l+0x980>
 800a46c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a46e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a470:	4213      	tst	r3, r2
 800a472:	d0e2      	beq.n	800a43a <_strtod_l+0x912>
 800a474:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a476:	0030      	movs	r0, r6
 800a478:	0039      	movs	r1, r7
 800a47a:	9a07      	ldr	r2, [sp, #28]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d017      	beq.n	800a4b0 <_strtod_l+0x988>
 800a480:	f7ff fb3a 	bl	8009af8 <sulp>
 800a484:	0002      	movs	r2, r0
 800a486:	000b      	movs	r3, r1
 800a488:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a48a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a48c:	f7f6 f994 	bl	80007b8 <__aeabi_dadd>
 800a490:	0006      	movs	r6, r0
 800a492:	000f      	movs	r7, r1
 800a494:	e7d1      	b.n	800a43a <_strtod_l+0x912>
 800a496:	2601      	movs	r6, #1
 800a498:	4013      	ands	r3, r2
 800a49a:	4a98      	ldr	r2, [pc, #608]	; (800a6fc <_strtod_l+0xbd4>)
 800a49c:	4276      	negs	r6, r6
 800a49e:	189b      	adds	r3, r3, r2
 800a4a0:	4a97      	ldr	r2, [pc, #604]	; (800a700 <_strtod_l+0xbd8>)
 800a4a2:	431a      	orrs	r2, r3
 800a4a4:	0017      	movs	r7, r2
 800a4a6:	e7c8      	b.n	800a43a <_strtod_l+0x912>
 800a4a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a4aa:	4233      	tst	r3, r6
 800a4ac:	d0c5      	beq.n	800a43a <_strtod_l+0x912>
 800a4ae:	e7e1      	b.n	800a474 <_strtod_l+0x94c>
 800a4b0:	f7ff fb22 	bl	8009af8 <sulp>
 800a4b4:	0002      	movs	r2, r0
 800a4b6:	000b      	movs	r3, r1
 800a4b8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a4ba:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a4bc:	f7f7 fb98 	bl	8001bf0 <__aeabi_dsub>
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	0006      	movs	r6, r0
 800a4c6:	000f      	movs	r7, r1
 800a4c8:	f7f5 ffbe 	bl	8000448 <__aeabi_dcmpeq>
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	d0b4      	beq.n	800a43a <_strtod_l+0x912>
 800a4d0:	e600      	b.n	800a0d4 <_strtod_l+0x5ac>
 800a4d2:	9906      	ldr	r1, [sp, #24]
 800a4d4:	9805      	ldr	r0, [sp, #20]
 800a4d6:	f001 fce9 	bl	800beac <__ratio>
 800a4da:	2380      	movs	r3, #128	; 0x80
 800a4dc:	2200      	movs	r2, #0
 800a4de:	05db      	lsls	r3, r3, #23
 800a4e0:	0004      	movs	r4, r0
 800a4e2:	000d      	movs	r5, r1
 800a4e4:	f7f5 ffc0 	bl	8000468 <__aeabi_dcmple>
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	d06d      	beq.n	800a5c8 <_strtod_l+0xaa0>
 800a4ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d000      	beq.n	800a4f4 <_strtod_l+0x9cc>
 800a4f2:	e07e      	b.n	800a5f2 <_strtod_l+0xaca>
 800a4f4:	2e00      	cmp	r6, #0
 800a4f6:	d158      	bne.n	800a5aa <_strtod_l+0xa82>
 800a4f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4fa:	031b      	lsls	r3, r3, #12
 800a4fc:	d000      	beq.n	800a500 <_strtod_l+0x9d8>
 800a4fe:	e07f      	b.n	800a600 <_strtod_l+0xad8>
 800a500:	2200      	movs	r2, #0
 800a502:	0020      	movs	r0, r4
 800a504:	0029      	movs	r1, r5
 800a506:	4b7f      	ldr	r3, [pc, #508]	; (800a704 <_strtod_l+0xbdc>)
 800a508:	f7f5 ffa4 	bl	8000454 <__aeabi_dcmplt>
 800a50c:	2800      	cmp	r0, #0
 800a50e:	d158      	bne.n	800a5c2 <_strtod_l+0xa9a>
 800a510:	0020      	movs	r0, r4
 800a512:	0029      	movs	r1, r5
 800a514:	2200      	movs	r2, #0
 800a516:	4b7c      	ldr	r3, [pc, #496]	; (800a708 <_strtod_l+0xbe0>)
 800a518:	f7f7 f8a8 	bl	800166c <__aeabi_dmul>
 800a51c:	0004      	movs	r4, r0
 800a51e:	000d      	movs	r5, r1
 800a520:	2380      	movs	r3, #128	; 0x80
 800a522:	061b      	lsls	r3, r3, #24
 800a524:	940a      	str	r4, [sp, #40]	; 0x28
 800a526:	18eb      	adds	r3, r5, r3
 800a528:	930b      	str	r3, [sp, #44]	; 0x2c
 800a52a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a52c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a52e:	9212      	str	r2, [sp, #72]	; 0x48
 800a530:	9313      	str	r3, [sp, #76]	; 0x4c
 800a532:	4a76      	ldr	r2, [pc, #472]	; (800a70c <_strtod_l+0xbe4>)
 800a534:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a536:	4013      	ands	r3, r2
 800a538:	9314      	str	r3, [sp, #80]	; 0x50
 800a53a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a53c:	4b74      	ldr	r3, [pc, #464]	; (800a710 <_strtod_l+0xbe8>)
 800a53e:	429a      	cmp	r2, r3
 800a540:	d000      	beq.n	800a544 <_strtod_l+0xa1c>
 800a542:	e091      	b.n	800a668 <_strtod_l+0xb40>
 800a544:	4a73      	ldr	r2, [pc, #460]	; (800a714 <_strtod_l+0xbec>)
 800a546:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a548:	4694      	mov	ip, r2
 800a54a:	4463      	add	r3, ip
 800a54c:	001f      	movs	r7, r3
 800a54e:	0030      	movs	r0, r6
 800a550:	0019      	movs	r1, r3
 800a552:	f001 fbe3 	bl	800bd1c <__ulp>
 800a556:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a558:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a55a:	f7f7 f887 	bl	800166c <__aeabi_dmul>
 800a55e:	0032      	movs	r2, r6
 800a560:	003b      	movs	r3, r7
 800a562:	f7f6 f929 	bl	80007b8 <__aeabi_dadd>
 800a566:	4a69      	ldr	r2, [pc, #420]	; (800a70c <_strtod_l+0xbe4>)
 800a568:	4b6b      	ldr	r3, [pc, #428]	; (800a718 <_strtod_l+0xbf0>)
 800a56a:	0006      	movs	r6, r0
 800a56c:	400a      	ands	r2, r1
 800a56e:	429a      	cmp	r2, r3
 800a570:	d949      	bls.n	800a606 <_strtod_l+0xade>
 800a572:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a574:	4b69      	ldr	r3, [pc, #420]	; (800a71c <_strtod_l+0xbf4>)
 800a576:	429a      	cmp	r2, r3
 800a578:	d103      	bne.n	800a582 <_strtod_l+0xa5a>
 800a57a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a57c:	3301      	adds	r3, #1
 800a57e:	d100      	bne.n	800a582 <_strtod_l+0xa5a>
 800a580:	e535      	b.n	8009fee <_strtod_l+0x4c6>
 800a582:	2601      	movs	r6, #1
 800a584:	4f65      	ldr	r7, [pc, #404]	; (800a71c <_strtod_l+0xbf4>)
 800a586:	4276      	negs	r6, r6
 800a588:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a58a:	9804      	ldr	r0, [sp, #16]
 800a58c:	f001 f8b8 	bl	800b700 <_Bfree>
 800a590:	9908      	ldr	r1, [sp, #32]
 800a592:	9804      	ldr	r0, [sp, #16]
 800a594:	f001 f8b4 	bl	800b700 <_Bfree>
 800a598:	9906      	ldr	r1, [sp, #24]
 800a59a:	9804      	ldr	r0, [sp, #16]
 800a59c:	f001 f8b0 	bl	800b700 <_Bfree>
 800a5a0:	9905      	ldr	r1, [sp, #20]
 800a5a2:	9804      	ldr	r0, [sp, #16]
 800a5a4:	f001 f8ac 	bl	800b700 <_Bfree>
 800a5a8:	e60b      	b.n	800a1c2 <_strtod_l+0x69a>
 800a5aa:	2e01      	cmp	r6, #1
 800a5ac:	d103      	bne.n	800a5b6 <_strtod_l+0xa8e>
 800a5ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d100      	bne.n	800a5b6 <_strtod_l+0xa8e>
 800a5b4:	e58e      	b.n	800a0d4 <_strtod_l+0x5ac>
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	4c59      	ldr	r4, [pc, #356]	; (800a720 <_strtod_l+0xbf8>)
 800a5ba:	930a      	str	r3, [sp, #40]	; 0x28
 800a5bc:	940b      	str	r4, [sp, #44]	; 0x2c
 800a5be:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a5c0:	e01c      	b.n	800a5fc <_strtod_l+0xad4>
 800a5c2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a5c4:	4d50      	ldr	r5, [pc, #320]	; (800a708 <_strtod_l+0xbe0>)
 800a5c6:	e7ab      	b.n	800a520 <_strtod_l+0x9f8>
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	0020      	movs	r0, r4
 800a5cc:	0029      	movs	r1, r5
 800a5ce:	4b4e      	ldr	r3, [pc, #312]	; (800a708 <_strtod_l+0xbe0>)
 800a5d0:	f7f7 f84c 	bl	800166c <__aeabi_dmul>
 800a5d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5d6:	0004      	movs	r4, r0
 800a5d8:	000b      	movs	r3, r1
 800a5da:	000d      	movs	r5, r1
 800a5dc:	2a00      	cmp	r2, #0
 800a5de:	d104      	bne.n	800a5ea <_strtod_l+0xac2>
 800a5e0:	2280      	movs	r2, #128	; 0x80
 800a5e2:	0612      	lsls	r2, r2, #24
 800a5e4:	900a      	str	r0, [sp, #40]	; 0x28
 800a5e6:	188b      	adds	r3, r1, r2
 800a5e8:	e79e      	b.n	800a528 <_strtod_l+0xa00>
 800a5ea:	0002      	movs	r2, r0
 800a5ec:	920a      	str	r2, [sp, #40]	; 0x28
 800a5ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5f0:	e79b      	b.n	800a52a <_strtod_l+0xa02>
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	4c43      	ldr	r4, [pc, #268]	; (800a704 <_strtod_l+0xbdc>)
 800a5f6:	930a      	str	r3, [sp, #40]	; 0x28
 800a5f8:	940b      	str	r4, [sp, #44]	; 0x2c
 800a5fa:	2400      	movs	r4, #0
 800a5fc:	4d41      	ldr	r5, [pc, #260]	; (800a704 <_strtod_l+0xbdc>)
 800a5fe:	e794      	b.n	800a52a <_strtod_l+0xa02>
 800a600:	2300      	movs	r3, #0
 800a602:	4c47      	ldr	r4, [pc, #284]	; (800a720 <_strtod_l+0xbf8>)
 800a604:	e7f7      	b.n	800a5f6 <_strtod_l+0xace>
 800a606:	23d4      	movs	r3, #212	; 0xd4
 800a608:	049b      	lsls	r3, r3, #18
 800a60a:	18cf      	adds	r7, r1, r3
 800a60c:	9b07      	ldr	r3, [sp, #28]
 800a60e:	970e      	str	r7, [sp, #56]	; 0x38
 800a610:	2b00      	cmp	r3, #0
 800a612:	d1b9      	bne.n	800a588 <_strtod_l+0xa60>
 800a614:	4b3d      	ldr	r3, [pc, #244]	; (800a70c <_strtod_l+0xbe4>)
 800a616:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a618:	403b      	ands	r3, r7
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d1b4      	bne.n	800a588 <_strtod_l+0xa60>
 800a61e:	0020      	movs	r0, r4
 800a620:	0029      	movs	r1, r5
 800a622:	f7f5 ffab 	bl	800057c <__aeabi_d2lz>
 800a626:	f7f5 ffe5 	bl	80005f4 <__aeabi_l2d>
 800a62a:	0002      	movs	r2, r0
 800a62c:	000b      	movs	r3, r1
 800a62e:	0020      	movs	r0, r4
 800a630:	0029      	movs	r1, r5
 800a632:	f7f7 fadd 	bl	8001bf0 <__aeabi_dsub>
 800a636:	033b      	lsls	r3, r7, #12
 800a638:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a63a:	0b1b      	lsrs	r3, r3, #12
 800a63c:	4333      	orrs	r3, r6
 800a63e:	4313      	orrs	r3, r2
 800a640:	0004      	movs	r4, r0
 800a642:	000d      	movs	r5, r1
 800a644:	4a37      	ldr	r2, [pc, #220]	; (800a724 <_strtod_l+0xbfc>)
 800a646:	2b00      	cmp	r3, #0
 800a648:	d054      	beq.n	800a6f4 <_strtod_l+0xbcc>
 800a64a:	4b37      	ldr	r3, [pc, #220]	; (800a728 <_strtod_l+0xc00>)
 800a64c:	f7f5 ff02 	bl	8000454 <__aeabi_dcmplt>
 800a650:	2800      	cmp	r0, #0
 800a652:	d000      	beq.n	800a656 <_strtod_l+0xb2e>
 800a654:	e4d4      	b.n	800a000 <_strtod_l+0x4d8>
 800a656:	0020      	movs	r0, r4
 800a658:	0029      	movs	r1, r5
 800a65a:	4a34      	ldr	r2, [pc, #208]	; (800a72c <_strtod_l+0xc04>)
 800a65c:	4b2a      	ldr	r3, [pc, #168]	; (800a708 <_strtod_l+0xbe0>)
 800a65e:	f7f5 ff0d 	bl	800047c <__aeabi_dcmpgt>
 800a662:	2800      	cmp	r0, #0
 800a664:	d090      	beq.n	800a588 <_strtod_l+0xa60>
 800a666:	e4cb      	b.n	800a000 <_strtod_l+0x4d8>
 800a668:	9b07      	ldr	r3, [sp, #28]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d02b      	beq.n	800a6c6 <_strtod_l+0xb9e>
 800a66e:	23d4      	movs	r3, #212	; 0xd4
 800a670:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a672:	04db      	lsls	r3, r3, #19
 800a674:	429a      	cmp	r2, r3
 800a676:	d826      	bhi.n	800a6c6 <_strtod_l+0xb9e>
 800a678:	0020      	movs	r0, r4
 800a67a:	0029      	movs	r1, r5
 800a67c:	4a2c      	ldr	r2, [pc, #176]	; (800a730 <_strtod_l+0xc08>)
 800a67e:	4b2d      	ldr	r3, [pc, #180]	; (800a734 <_strtod_l+0xc0c>)
 800a680:	f7f5 fef2 	bl	8000468 <__aeabi_dcmple>
 800a684:	2800      	cmp	r0, #0
 800a686:	d017      	beq.n	800a6b8 <_strtod_l+0xb90>
 800a688:	0020      	movs	r0, r4
 800a68a:	0029      	movs	r1, r5
 800a68c:	f7f5 ff58 	bl	8000540 <__aeabi_d2uiz>
 800a690:	2800      	cmp	r0, #0
 800a692:	d100      	bne.n	800a696 <_strtod_l+0xb6e>
 800a694:	3001      	adds	r0, #1
 800a696:	f7f7 feb1 	bl	80023fc <__aeabi_ui2d>
 800a69a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a69c:	0004      	movs	r4, r0
 800a69e:	000b      	movs	r3, r1
 800a6a0:	000d      	movs	r5, r1
 800a6a2:	2a00      	cmp	r2, #0
 800a6a4:	d122      	bne.n	800a6ec <_strtod_l+0xbc4>
 800a6a6:	2280      	movs	r2, #128	; 0x80
 800a6a8:	0612      	lsls	r2, r2, #24
 800a6aa:	188b      	adds	r3, r1, r2
 800a6ac:	9016      	str	r0, [sp, #88]	; 0x58
 800a6ae:	9317      	str	r3, [sp, #92]	; 0x5c
 800a6b0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a6b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a6b4:	9212      	str	r2, [sp, #72]	; 0x48
 800a6b6:	9313      	str	r3, [sp, #76]	; 0x4c
 800a6b8:	22d6      	movs	r2, #214	; 0xd6
 800a6ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a6bc:	04d2      	lsls	r2, r2, #19
 800a6be:	189b      	adds	r3, r3, r2
 800a6c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a6c2:	1a9b      	subs	r3, r3, r2
 800a6c4:	9313      	str	r3, [sp, #76]	; 0x4c
 800a6c6:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a6c8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a6ca:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800a6cc:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800a6ce:	f001 fb25 	bl	800bd1c <__ulp>
 800a6d2:	0002      	movs	r2, r0
 800a6d4:	000b      	movs	r3, r1
 800a6d6:	0030      	movs	r0, r6
 800a6d8:	0039      	movs	r1, r7
 800a6da:	f7f6 ffc7 	bl	800166c <__aeabi_dmul>
 800a6de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a6e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6e2:	f7f6 f869 	bl	80007b8 <__aeabi_dadd>
 800a6e6:	0006      	movs	r6, r0
 800a6e8:	000f      	movs	r7, r1
 800a6ea:	e78f      	b.n	800a60c <_strtod_l+0xae4>
 800a6ec:	0002      	movs	r2, r0
 800a6ee:	9216      	str	r2, [sp, #88]	; 0x58
 800a6f0:	9317      	str	r3, [sp, #92]	; 0x5c
 800a6f2:	e7dd      	b.n	800a6b0 <_strtod_l+0xb88>
 800a6f4:	4b10      	ldr	r3, [pc, #64]	; (800a738 <_strtod_l+0xc10>)
 800a6f6:	f7f5 fead 	bl	8000454 <__aeabi_dcmplt>
 800a6fa:	e7b2      	b.n	800a662 <_strtod_l+0xb3a>
 800a6fc:	fff00000 	.word	0xfff00000
 800a700:	000fffff 	.word	0x000fffff
 800a704:	3ff00000 	.word	0x3ff00000
 800a708:	3fe00000 	.word	0x3fe00000
 800a70c:	7ff00000 	.word	0x7ff00000
 800a710:	7fe00000 	.word	0x7fe00000
 800a714:	fcb00000 	.word	0xfcb00000
 800a718:	7c9fffff 	.word	0x7c9fffff
 800a71c:	7fefffff 	.word	0x7fefffff
 800a720:	bff00000 	.word	0xbff00000
 800a724:	94a03595 	.word	0x94a03595
 800a728:	3fdfffff 	.word	0x3fdfffff
 800a72c:	35afe535 	.word	0x35afe535
 800a730:	ffc00000 	.word	0xffc00000
 800a734:	41dfffff 	.word	0x41dfffff
 800a738:	3fcfffff 	.word	0x3fcfffff

0800a73c <_strtod_r>:
 800a73c:	b510      	push	{r4, lr}
 800a73e:	4b02      	ldr	r3, [pc, #8]	; (800a748 <_strtod_r+0xc>)
 800a740:	f7ff f9f2 	bl	8009b28 <_strtod_l>
 800a744:	bd10      	pop	{r4, pc}
 800a746:	46c0      	nop			; (mov r8, r8)
 800a748:	20000448 	.word	0x20000448

0800a74c <strtod>:
 800a74c:	b510      	push	{r4, lr}
 800a74e:	4c04      	ldr	r4, [pc, #16]	; (800a760 <strtod+0x14>)
 800a750:	000a      	movs	r2, r1
 800a752:	0001      	movs	r1, r0
 800a754:	4b03      	ldr	r3, [pc, #12]	; (800a764 <strtod+0x18>)
 800a756:	6820      	ldr	r0, [r4, #0]
 800a758:	f7ff f9e6 	bl	8009b28 <_strtod_l>
 800a75c:	bd10      	pop	{r4, pc}
 800a75e:	46c0      	nop			; (mov r8, r8)
 800a760:	200006d8 	.word	0x200006d8
 800a764:	20000448 	.word	0x20000448

0800a768 <_strtol_l.constprop.0>:
 800a768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a76a:	b087      	sub	sp, #28
 800a76c:	001e      	movs	r6, r3
 800a76e:	9005      	str	r0, [sp, #20]
 800a770:	9101      	str	r1, [sp, #4]
 800a772:	9202      	str	r2, [sp, #8]
 800a774:	2b01      	cmp	r3, #1
 800a776:	d048      	beq.n	800a80a <_strtol_l.constprop.0+0xa2>
 800a778:	000b      	movs	r3, r1
 800a77a:	2e24      	cmp	r6, #36	; 0x24
 800a77c:	d845      	bhi.n	800a80a <_strtol_l.constprop.0+0xa2>
 800a77e:	4a3b      	ldr	r2, [pc, #236]	; (800a86c <_strtol_l.constprop.0+0x104>)
 800a780:	2108      	movs	r1, #8
 800a782:	4694      	mov	ip, r2
 800a784:	001a      	movs	r2, r3
 800a786:	4660      	mov	r0, ip
 800a788:	7814      	ldrb	r4, [r2, #0]
 800a78a:	3301      	adds	r3, #1
 800a78c:	5d00      	ldrb	r0, [r0, r4]
 800a78e:	001d      	movs	r5, r3
 800a790:	0007      	movs	r7, r0
 800a792:	400f      	ands	r7, r1
 800a794:	4208      	tst	r0, r1
 800a796:	d1f5      	bne.n	800a784 <_strtol_l.constprop.0+0x1c>
 800a798:	2c2d      	cmp	r4, #45	; 0x2d
 800a79a:	d13d      	bne.n	800a818 <_strtol_l.constprop.0+0xb0>
 800a79c:	2701      	movs	r7, #1
 800a79e:	781c      	ldrb	r4, [r3, #0]
 800a7a0:	1c95      	adds	r5, r2, #2
 800a7a2:	2e00      	cmp	r6, #0
 800a7a4:	d05e      	beq.n	800a864 <_strtol_l.constprop.0+0xfc>
 800a7a6:	2e10      	cmp	r6, #16
 800a7a8:	d109      	bne.n	800a7be <_strtol_l.constprop.0+0x56>
 800a7aa:	2c30      	cmp	r4, #48	; 0x30
 800a7ac:	d107      	bne.n	800a7be <_strtol_l.constprop.0+0x56>
 800a7ae:	2220      	movs	r2, #32
 800a7b0:	782b      	ldrb	r3, [r5, #0]
 800a7b2:	4393      	bics	r3, r2
 800a7b4:	2b58      	cmp	r3, #88	; 0x58
 800a7b6:	d150      	bne.n	800a85a <_strtol_l.constprop.0+0xf2>
 800a7b8:	2610      	movs	r6, #16
 800a7ba:	786c      	ldrb	r4, [r5, #1]
 800a7bc:	3502      	adds	r5, #2
 800a7be:	4b2c      	ldr	r3, [pc, #176]	; (800a870 <_strtol_l.constprop.0+0x108>)
 800a7c0:	0031      	movs	r1, r6
 800a7c2:	18fb      	adds	r3, r7, r3
 800a7c4:	0018      	movs	r0, r3
 800a7c6:	9303      	str	r3, [sp, #12]
 800a7c8:	f7f5 fd3e 	bl	8000248 <__aeabi_uidivmod>
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	9104      	str	r1, [sp, #16]
 800a7d0:	2101      	movs	r1, #1
 800a7d2:	4684      	mov	ip, r0
 800a7d4:	0010      	movs	r0, r2
 800a7d6:	4249      	negs	r1, r1
 800a7d8:	0023      	movs	r3, r4
 800a7da:	3b30      	subs	r3, #48	; 0x30
 800a7dc:	2b09      	cmp	r3, #9
 800a7de:	d903      	bls.n	800a7e8 <_strtol_l.constprop.0+0x80>
 800a7e0:	3b11      	subs	r3, #17
 800a7e2:	2b19      	cmp	r3, #25
 800a7e4:	d81d      	bhi.n	800a822 <_strtol_l.constprop.0+0xba>
 800a7e6:	330a      	adds	r3, #10
 800a7e8:	429e      	cmp	r6, r3
 800a7ea:	dd1e      	ble.n	800a82a <_strtol_l.constprop.0+0xc2>
 800a7ec:	1c54      	adds	r4, r2, #1
 800a7ee:	d009      	beq.n	800a804 <_strtol_l.constprop.0+0x9c>
 800a7f0:	000a      	movs	r2, r1
 800a7f2:	4584      	cmp	ip, r0
 800a7f4:	d306      	bcc.n	800a804 <_strtol_l.constprop.0+0x9c>
 800a7f6:	d102      	bne.n	800a7fe <_strtol_l.constprop.0+0x96>
 800a7f8:	9c04      	ldr	r4, [sp, #16]
 800a7fa:	429c      	cmp	r4, r3
 800a7fc:	db02      	blt.n	800a804 <_strtol_l.constprop.0+0x9c>
 800a7fe:	2201      	movs	r2, #1
 800a800:	4370      	muls	r0, r6
 800a802:	1818      	adds	r0, r3, r0
 800a804:	782c      	ldrb	r4, [r5, #0]
 800a806:	3501      	adds	r5, #1
 800a808:	e7e6      	b.n	800a7d8 <_strtol_l.constprop.0+0x70>
 800a80a:	f000 fa7d 	bl	800ad08 <__errno>
 800a80e:	2316      	movs	r3, #22
 800a810:	6003      	str	r3, [r0, #0]
 800a812:	2000      	movs	r0, #0
 800a814:	b007      	add	sp, #28
 800a816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a818:	2c2b      	cmp	r4, #43	; 0x2b
 800a81a:	d1c2      	bne.n	800a7a2 <_strtol_l.constprop.0+0x3a>
 800a81c:	781c      	ldrb	r4, [r3, #0]
 800a81e:	1c95      	adds	r5, r2, #2
 800a820:	e7bf      	b.n	800a7a2 <_strtol_l.constprop.0+0x3a>
 800a822:	0023      	movs	r3, r4
 800a824:	3b61      	subs	r3, #97	; 0x61
 800a826:	2b19      	cmp	r3, #25
 800a828:	d9dd      	bls.n	800a7e6 <_strtol_l.constprop.0+0x7e>
 800a82a:	1c53      	adds	r3, r2, #1
 800a82c:	d109      	bne.n	800a842 <_strtol_l.constprop.0+0xda>
 800a82e:	2322      	movs	r3, #34	; 0x22
 800a830:	9a05      	ldr	r2, [sp, #20]
 800a832:	9803      	ldr	r0, [sp, #12]
 800a834:	6013      	str	r3, [r2, #0]
 800a836:	9b02      	ldr	r3, [sp, #8]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d0eb      	beq.n	800a814 <_strtol_l.constprop.0+0xac>
 800a83c:	1e6b      	subs	r3, r5, #1
 800a83e:	9301      	str	r3, [sp, #4]
 800a840:	e007      	b.n	800a852 <_strtol_l.constprop.0+0xea>
 800a842:	2f00      	cmp	r7, #0
 800a844:	d000      	beq.n	800a848 <_strtol_l.constprop.0+0xe0>
 800a846:	4240      	negs	r0, r0
 800a848:	9b02      	ldr	r3, [sp, #8]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d0e2      	beq.n	800a814 <_strtol_l.constprop.0+0xac>
 800a84e:	2a00      	cmp	r2, #0
 800a850:	d1f4      	bne.n	800a83c <_strtol_l.constprop.0+0xd4>
 800a852:	9b02      	ldr	r3, [sp, #8]
 800a854:	9a01      	ldr	r2, [sp, #4]
 800a856:	601a      	str	r2, [r3, #0]
 800a858:	e7dc      	b.n	800a814 <_strtol_l.constprop.0+0xac>
 800a85a:	2430      	movs	r4, #48	; 0x30
 800a85c:	2e00      	cmp	r6, #0
 800a85e:	d1ae      	bne.n	800a7be <_strtol_l.constprop.0+0x56>
 800a860:	3608      	adds	r6, #8
 800a862:	e7ac      	b.n	800a7be <_strtol_l.constprop.0+0x56>
 800a864:	2c30      	cmp	r4, #48	; 0x30
 800a866:	d0a2      	beq.n	800a7ae <_strtol_l.constprop.0+0x46>
 800a868:	260a      	movs	r6, #10
 800a86a:	e7a8      	b.n	800a7be <_strtol_l.constprop.0+0x56>
 800a86c:	080130e9 	.word	0x080130e9
 800a870:	7fffffff 	.word	0x7fffffff

0800a874 <_strtol_r>:
 800a874:	b510      	push	{r4, lr}
 800a876:	f7ff ff77 	bl	800a768 <_strtol_l.constprop.0>
 800a87a:	bd10      	pop	{r4, pc}

0800a87c <strtol>:
 800a87c:	b510      	push	{r4, lr}
 800a87e:	4c04      	ldr	r4, [pc, #16]	; (800a890 <strtol+0x14>)
 800a880:	0013      	movs	r3, r2
 800a882:	000a      	movs	r2, r1
 800a884:	0001      	movs	r1, r0
 800a886:	6820      	ldr	r0, [r4, #0]
 800a888:	f7ff ff6e 	bl	800a768 <_strtol_l.constprop.0>
 800a88c:	bd10      	pop	{r4, pc}
 800a88e:	46c0      	nop			; (mov r8, r8)
 800a890:	200006d8 	.word	0x200006d8

0800a894 <std>:
 800a894:	2300      	movs	r3, #0
 800a896:	b510      	push	{r4, lr}
 800a898:	0004      	movs	r4, r0
 800a89a:	6003      	str	r3, [r0, #0]
 800a89c:	6043      	str	r3, [r0, #4]
 800a89e:	6083      	str	r3, [r0, #8]
 800a8a0:	8181      	strh	r1, [r0, #12]
 800a8a2:	6643      	str	r3, [r0, #100]	; 0x64
 800a8a4:	81c2      	strh	r2, [r0, #14]
 800a8a6:	6103      	str	r3, [r0, #16]
 800a8a8:	6143      	str	r3, [r0, #20]
 800a8aa:	6183      	str	r3, [r0, #24]
 800a8ac:	0019      	movs	r1, r3
 800a8ae:	2208      	movs	r2, #8
 800a8b0:	305c      	adds	r0, #92	; 0x5c
 800a8b2:	f000 f97d 	bl	800abb0 <memset>
 800a8b6:	4b0b      	ldr	r3, [pc, #44]	; (800a8e4 <std+0x50>)
 800a8b8:	61e4      	str	r4, [r4, #28]
 800a8ba:	6223      	str	r3, [r4, #32]
 800a8bc:	4b0a      	ldr	r3, [pc, #40]	; (800a8e8 <std+0x54>)
 800a8be:	6263      	str	r3, [r4, #36]	; 0x24
 800a8c0:	4b0a      	ldr	r3, [pc, #40]	; (800a8ec <std+0x58>)
 800a8c2:	62a3      	str	r3, [r4, #40]	; 0x28
 800a8c4:	4b0a      	ldr	r3, [pc, #40]	; (800a8f0 <std+0x5c>)
 800a8c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a8c8:	4b0a      	ldr	r3, [pc, #40]	; (800a8f4 <std+0x60>)
 800a8ca:	429c      	cmp	r4, r3
 800a8cc:	d005      	beq.n	800a8da <std+0x46>
 800a8ce:	4b0a      	ldr	r3, [pc, #40]	; (800a8f8 <std+0x64>)
 800a8d0:	429c      	cmp	r4, r3
 800a8d2:	d002      	beq.n	800a8da <std+0x46>
 800a8d4:	4b09      	ldr	r3, [pc, #36]	; (800a8fc <std+0x68>)
 800a8d6:	429c      	cmp	r4, r3
 800a8d8:	d103      	bne.n	800a8e2 <std+0x4e>
 800a8da:	0020      	movs	r0, r4
 800a8dc:	3058      	adds	r0, #88	; 0x58
 800a8de:	f000 fa3d 	bl	800ad5c <__retarget_lock_init_recursive>
 800a8e2:	bd10      	pop	{r4, pc}
 800a8e4:	0800ab15 	.word	0x0800ab15
 800a8e8:	0800ab41 	.word	0x0800ab41
 800a8ec:	0800ab79 	.word	0x0800ab79
 800a8f0:	0800aba5 	.word	0x0800aba5
 800a8f4:	20000b4c 	.word	0x20000b4c
 800a8f8:	20000bb4 	.word	0x20000bb4
 800a8fc:	20000c1c 	.word	0x20000c1c

0800a900 <stdio_exit_handler>:
 800a900:	b510      	push	{r4, lr}
 800a902:	4a03      	ldr	r2, [pc, #12]	; (800a910 <stdio_exit_handler+0x10>)
 800a904:	4903      	ldr	r1, [pc, #12]	; (800a914 <stdio_exit_handler+0x14>)
 800a906:	4804      	ldr	r0, [pc, #16]	; (800a918 <stdio_exit_handler+0x18>)
 800a908:	f000 f86c 	bl	800a9e4 <_fwalk_sglue>
 800a90c:	bd10      	pop	{r4, pc}
 800a90e:	46c0      	nop			; (mov r8, r8)
 800a910:	2000043c 	.word	0x2000043c
 800a914:	0800e85d 	.word	0x0800e85d
 800a918:	200005b8 	.word	0x200005b8

0800a91c <cleanup_stdio>:
 800a91c:	6841      	ldr	r1, [r0, #4]
 800a91e:	4b0b      	ldr	r3, [pc, #44]	; (800a94c <cleanup_stdio+0x30>)
 800a920:	b510      	push	{r4, lr}
 800a922:	0004      	movs	r4, r0
 800a924:	4299      	cmp	r1, r3
 800a926:	d001      	beq.n	800a92c <cleanup_stdio+0x10>
 800a928:	f003 ff98 	bl	800e85c <_fclose_r>
 800a92c:	68a1      	ldr	r1, [r4, #8]
 800a92e:	4b08      	ldr	r3, [pc, #32]	; (800a950 <cleanup_stdio+0x34>)
 800a930:	4299      	cmp	r1, r3
 800a932:	d002      	beq.n	800a93a <cleanup_stdio+0x1e>
 800a934:	0020      	movs	r0, r4
 800a936:	f003 ff91 	bl	800e85c <_fclose_r>
 800a93a:	68e1      	ldr	r1, [r4, #12]
 800a93c:	4b05      	ldr	r3, [pc, #20]	; (800a954 <cleanup_stdio+0x38>)
 800a93e:	4299      	cmp	r1, r3
 800a940:	d002      	beq.n	800a948 <cleanup_stdio+0x2c>
 800a942:	0020      	movs	r0, r4
 800a944:	f003 ff8a 	bl	800e85c <_fclose_r>
 800a948:	bd10      	pop	{r4, pc}
 800a94a:	46c0      	nop			; (mov r8, r8)
 800a94c:	20000b4c 	.word	0x20000b4c
 800a950:	20000bb4 	.word	0x20000bb4
 800a954:	20000c1c 	.word	0x20000c1c

0800a958 <global_stdio_init.part.0>:
 800a958:	b510      	push	{r4, lr}
 800a95a:	4b09      	ldr	r3, [pc, #36]	; (800a980 <global_stdio_init.part.0+0x28>)
 800a95c:	4a09      	ldr	r2, [pc, #36]	; (800a984 <global_stdio_init.part.0+0x2c>)
 800a95e:	2104      	movs	r1, #4
 800a960:	601a      	str	r2, [r3, #0]
 800a962:	4809      	ldr	r0, [pc, #36]	; (800a988 <global_stdio_init.part.0+0x30>)
 800a964:	2200      	movs	r2, #0
 800a966:	f7ff ff95 	bl	800a894 <std>
 800a96a:	2201      	movs	r2, #1
 800a96c:	2109      	movs	r1, #9
 800a96e:	4807      	ldr	r0, [pc, #28]	; (800a98c <global_stdio_init.part.0+0x34>)
 800a970:	f7ff ff90 	bl	800a894 <std>
 800a974:	2202      	movs	r2, #2
 800a976:	2112      	movs	r1, #18
 800a978:	4805      	ldr	r0, [pc, #20]	; (800a990 <global_stdio_init.part.0+0x38>)
 800a97a:	f7ff ff8b 	bl	800a894 <std>
 800a97e:	bd10      	pop	{r4, pc}
 800a980:	20000c84 	.word	0x20000c84
 800a984:	0800a901 	.word	0x0800a901
 800a988:	20000b4c 	.word	0x20000b4c
 800a98c:	20000bb4 	.word	0x20000bb4
 800a990:	20000c1c 	.word	0x20000c1c

0800a994 <__sfp_lock_acquire>:
 800a994:	b510      	push	{r4, lr}
 800a996:	4802      	ldr	r0, [pc, #8]	; (800a9a0 <__sfp_lock_acquire+0xc>)
 800a998:	f000 f9e2 	bl	800ad60 <__retarget_lock_acquire_recursive>
 800a99c:	bd10      	pop	{r4, pc}
 800a99e:	46c0      	nop			; (mov r8, r8)
 800a9a0:	20000c8e 	.word	0x20000c8e

0800a9a4 <__sfp_lock_release>:
 800a9a4:	b510      	push	{r4, lr}
 800a9a6:	4802      	ldr	r0, [pc, #8]	; (800a9b0 <__sfp_lock_release+0xc>)
 800a9a8:	f000 f9db 	bl	800ad62 <__retarget_lock_release_recursive>
 800a9ac:	bd10      	pop	{r4, pc}
 800a9ae:	46c0      	nop			; (mov r8, r8)
 800a9b0:	20000c8e 	.word	0x20000c8e

0800a9b4 <__sinit>:
 800a9b4:	b510      	push	{r4, lr}
 800a9b6:	0004      	movs	r4, r0
 800a9b8:	f7ff ffec 	bl	800a994 <__sfp_lock_acquire>
 800a9bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d002      	beq.n	800a9c8 <__sinit+0x14>
 800a9c2:	f7ff ffef 	bl	800a9a4 <__sfp_lock_release>
 800a9c6:	bd10      	pop	{r4, pc}
 800a9c8:	4b04      	ldr	r3, [pc, #16]	; (800a9dc <__sinit+0x28>)
 800a9ca:	6363      	str	r3, [r4, #52]	; 0x34
 800a9cc:	4b04      	ldr	r3, [pc, #16]	; (800a9e0 <__sinit+0x2c>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d1f6      	bne.n	800a9c2 <__sinit+0xe>
 800a9d4:	f7ff ffc0 	bl	800a958 <global_stdio_init.part.0>
 800a9d8:	e7f3      	b.n	800a9c2 <__sinit+0xe>
 800a9da:	46c0      	nop			; (mov r8, r8)
 800a9dc:	0800a91d 	.word	0x0800a91d
 800a9e0:	20000c84 	.word	0x20000c84

0800a9e4 <_fwalk_sglue>:
 800a9e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9e6:	0014      	movs	r4, r2
 800a9e8:	2600      	movs	r6, #0
 800a9ea:	9000      	str	r0, [sp, #0]
 800a9ec:	9101      	str	r1, [sp, #4]
 800a9ee:	68a5      	ldr	r5, [r4, #8]
 800a9f0:	6867      	ldr	r7, [r4, #4]
 800a9f2:	3f01      	subs	r7, #1
 800a9f4:	d504      	bpl.n	800aa00 <_fwalk_sglue+0x1c>
 800a9f6:	6824      	ldr	r4, [r4, #0]
 800a9f8:	2c00      	cmp	r4, #0
 800a9fa:	d1f8      	bne.n	800a9ee <_fwalk_sglue+0xa>
 800a9fc:	0030      	movs	r0, r6
 800a9fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aa00:	89ab      	ldrh	r3, [r5, #12]
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	d908      	bls.n	800aa18 <_fwalk_sglue+0x34>
 800aa06:	220e      	movs	r2, #14
 800aa08:	5eab      	ldrsh	r3, [r5, r2]
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	d004      	beq.n	800aa18 <_fwalk_sglue+0x34>
 800aa0e:	0029      	movs	r1, r5
 800aa10:	9800      	ldr	r0, [sp, #0]
 800aa12:	9b01      	ldr	r3, [sp, #4]
 800aa14:	4798      	blx	r3
 800aa16:	4306      	orrs	r6, r0
 800aa18:	3568      	adds	r5, #104	; 0x68
 800aa1a:	e7ea      	b.n	800a9f2 <_fwalk_sglue+0xe>

0800aa1c <snprintf>:
 800aa1c:	b40c      	push	{r2, r3}
 800aa1e:	b530      	push	{r4, r5, lr}
 800aa20:	4b17      	ldr	r3, [pc, #92]	; (800aa80 <snprintf+0x64>)
 800aa22:	000c      	movs	r4, r1
 800aa24:	681d      	ldr	r5, [r3, #0]
 800aa26:	b09d      	sub	sp, #116	; 0x74
 800aa28:	2900      	cmp	r1, #0
 800aa2a:	da08      	bge.n	800aa3e <snprintf+0x22>
 800aa2c:	238b      	movs	r3, #139	; 0x8b
 800aa2e:	2001      	movs	r0, #1
 800aa30:	602b      	str	r3, [r5, #0]
 800aa32:	4240      	negs	r0, r0
 800aa34:	b01d      	add	sp, #116	; 0x74
 800aa36:	bc30      	pop	{r4, r5}
 800aa38:	bc08      	pop	{r3}
 800aa3a:	b002      	add	sp, #8
 800aa3c:	4718      	bx	r3
 800aa3e:	2382      	movs	r3, #130	; 0x82
 800aa40:	466a      	mov	r2, sp
 800aa42:	009b      	lsls	r3, r3, #2
 800aa44:	8293      	strh	r3, [r2, #20]
 800aa46:	2300      	movs	r3, #0
 800aa48:	9002      	str	r0, [sp, #8]
 800aa4a:	9006      	str	r0, [sp, #24]
 800aa4c:	4299      	cmp	r1, r3
 800aa4e:	d000      	beq.n	800aa52 <snprintf+0x36>
 800aa50:	1e4b      	subs	r3, r1, #1
 800aa52:	9304      	str	r3, [sp, #16]
 800aa54:	9307      	str	r3, [sp, #28]
 800aa56:	2301      	movs	r3, #1
 800aa58:	466a      	mov	r2, sp
 800aa5a:	425b      	negs	r3, r3
 800aa5c:	82d3      	strh	r3, [r2, #22]
 800aa5e:	0028      	movs	r0, r5
 800aa60:	ab21      	add	r3, sp, #132	; 0x84
 800aa62:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800aa64:	a902      	add	r1, sp, #8
 800aa66:	9301      	str	r3, [sp, #4]
 800aa68:	f001 fa9a 	bl	800bfa0 <_svfprintf_r>
 800aa6c:	1c43      	adds	r3, r0, #1
 800aa6e:	da01      	bge.n	800aa74 <snprintf+0x58>
 800aa70:	238b      	movs	r3, #139	; 0x8b
 800aa72:	602b      	str	r3, [r5, #0]
 800aa74:	2c00      	cmp	r4, #0
 800aa76:	d0dd      	beq.n	800aa34 <snprintf+0x18>
 800aa78:	2200      	movs	r2, #0
 800aa7a:	9b02      	ldr	r3, [sp, #8]
 800aa7c:	701a      	strb	r2, [r3, #0]
 800aa7e:	e7d9      	b.n	800aa34 <snprintf+0x18>
 800aa80:	200006d8 	.word	0x200006d8

0800aa84 <sprintf>:
 800aa84:	b40e      	push	{r1, r2, r3}
 800aa86:	b500      	push	{lr}
 800aa88:	490b      	ldr	r1, [pc, #44]	; (800aab8 <sprintf+0x34>)
 800aa8a:	b09c      	sub	sp, #112	; 0x70
 800aa8c:	ab1d      	add	r3, sp, #116	; 0x74
 800aa8e:	9002      	str	r0, [sp, #8]
 800aa90:	9006      	str	r0, [sp, #24]
 800aa92:	9107      	str	r1, [sp, #28]
 800aa94:	9104      	str	r1, [sp, #16]
 800aa96:	4809      	ldr	r0, [pc, #36]	; (800aabc <sprintf+0x38>)
 800aa98:	4909      	ldr	r1, [pc, #36]	; (800aac0 <sprintf+0x3c>)
 800aa9a:	cb04      	ldmia	r3!, {r2}
 800aa9c:	9105      	str	r1, [sp, #20]
 800aa9e:	6800      	ldr	r0, [r0, #0]
 800aaa0:	a902      	add	r1, sp, #8
 800aaa2:	9301      	str	r3, [sp, #4]
 800aaa4:	f001 fa7c 	bl	800bfa0 <_svfprintf_r>
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	9b02      	ldr	r3, [sp, #8]
 800aaac:	701a      	strb	r2, [r3, #0]
 800aaae:	b01c      	add	sp, #112	; 0x70
 800aab0:	bc08      	pop	{r3}
 800aab2:	b003      	add	sp, #12
 800aab4:	4718      	bx	r3
 800aab6:	46c0      	nop			; (mov r8, r8)
 800aab8:	7fffffff 	.word	0x7fffffff
 800aabc:	200006d8 	.word	0x200006d8
 800aac0:	ffff0208 	.word	0xffff0208

0800aac4 <sscanf>:
 800aac4:	b40e      	push	{r1, r2, r3}
 800aac6:	b530      	push	{r4, r5, lr}
 800aac8:	2381      	movs	r3, #129	; 0x81
 800aaca:	b09c      	sub	sp, #112	; 0x70
 800aacc:	466a      	mov	r2, sp
 800aace:	ac1f      	add	r4, sp, #124	; 0x7c
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	cc20      	ldmia	r4!, {r5}
 800aad4:	8293      	strh	r3, [r2, #20]
 800aad6:	9002      	str	r0, [sp, #8]
 800aad8:	9006      	str	r0, [sp, #24]
 800aada:	f7f5 fb13 	bl	8000104 <strlen>
 800aade:	4b0b      	ldr	r3, [pc, #44]	; (800ab0c <sscanf+0x48>)
 800aae0:	466a      	mov	r2, sp
 800aae2:	930a      	str	r3, [sp, #40]	; 0x28
 800aae4:	2300      	movs	r3, #0
 800aae6:	9003      	str	r0, [sp, #12]
 800aae8:	9007      	str	r0, [sp, #28]
 800aaea:	4809      	ldr	r0, [pc, #36]	; (800ab10 <sscanf+0x4c>)
 800aaec:	930e      	str	r3, [sp, #56]	; 0x38
 800aaee:	9313      	str	r3, [sp, #76]	; 0x4c
 800aaf0:	3b01      	subs	r3, #1
 800aaf2:	82d3      	strh	r3, [r2, #22]
 800aaf4:	a902      	add	r1, sp, #8
 800aaf6:	0023      	movs	r3, r4
 800aaf8:	002a      	movs	r2, r5
 800aafa:	6800      	ldr	r0, [r0, #0]
 800aafc:	9401      	str	r4, [sp, #4]
 800aafe:	f002 fc91 	bl	800d424 <__ssvfscanf_r>
 800ab02:	b01c      	add	sp, #112	; 0x70
 800ab04:	bc30      	pop	{r4, r5}
 800ab06:	bc08      	pop	{r3}
 800ab08:	b003      	add	sp, #12
 800ab0a:	4718      	bx	r3
 800ab0c:	0800ab3d 	.word	0x0800ab3d
 800ab10:	200006d8 	.word	0x200006d8

0800ab14 <__sread>:
 800ab14:	b570      	push	{r4, r5, r6, lr}
 800ab16:	000c      	movs	r4, r1
 800ab18:	250e      	movs	r5, #14
 800ab1a:	5f49      	ldrsh	r1, [r1, r5]
 800ab1c:	f000 f8ba 	bl	800ac94 <_read_r>
 800ab20:	2800      	cmp	r0, #0
 800ab22:	db03      	blt.n	800ab2c <__sread+0x18>
 800ab24:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ab26:	181b      	adds	r3, r3, r0
 800ab28:	6523      	str	r3, [r4, #80]	; 0x50
 800ab2a:	bd70      	pop	{r4, r5, r6, pc}
 800ab2c:	89a3      	ldrh	r3, [r4, #12]
 800ab2e:	4a02      	ldr	r2, [pc, #8]	; (800ab38 <__sread+0x24>)
 800ab30:	4013      	ands	r3, r2
 800ab32:	81a3      	strh	r3, [r4, #12]
 800ab34:	e7f9      	b.n	800ab2a <__sread+0x16>
 800ab36:	46c0      	nop			; (mov r8, r8)
 800ab38:	ffffefff 	.word	0xffffefff

0800ab3c <__seofread>:
 800ab3c:	2000      	movs	r0, #0
 800ab3e:	4770      	bx	lr

0800ab40 <__swrite>:
 800ab40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab42:	001f      	movs	r7, r3
 800ab44:	898b      	ldrh	r3, [r1, #12]
 800ab46:	0005      	movs	r5, r0
 800ab48:	000c      	movs	r4, r1
 800ab4a:	0016      	movs	r6, r2
 800ab4c:	05db      	lsls	r3, r3, #23
 800ab4e:	d505      	bpl.n	800ab5c <__swrite+0x1c>
 800ab50:	230e      	movs	r3, #14
 800ab52:	5ec9      	ldrsh	r1, [r1, r3]
 800ab54:	2200      	movs	r2, #0
 800ab56:	2302      	movs	r3, #2
 800ab58:	f000 f888 	bl	800ac6c <_lseek_r>
 800ab5c:	89a3      	ldrh	r3, [r4, #12]
 800ab5e:	4a05      	ldr	r2, [pc, #20]	; (800ab74 <__swrite+0x34>)
 800ab60:	0028      	movs	r0, r5
 800ab62:	4013      	ands	r3, r2
 800ab64:	81a3      	strh	r3, [r4, #12]
 800ab66:	0032      	movs	r2, r6
 800ab68:	230e      	movs	r3, #14
 800ab6a:	5ee1      	ldrsh	r1, [r4, r3]
 800ab6c:	003b      	movs	r3, r7
 800ab6e:	f000 f8b7 	bl	800ace0 <_write_r>
 800ab72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab74:	ffffefff 	.word	0xffffefff

0800ab78 <__sseek>:
 800ab78:	b570      	push	{r4, r5, r6, lr}
 800ab7a:	000c      	movs	r4, r1
 800ab7c:	250e      	movs	r5, #14
 800ab7e:	5f49      	ldrsh	r1, [r1, r5]
 800ab80:	f000 f874 	bl	800ac6c <_lseek_r>
 800ab84:	89a3      	ldrh	r3, [r4, #12]
 800ab86:	1c42      	adds	r2, r0, #1
 800ab88:	d103      	bne.n	800ab92 <__sseek+0x1a>
 800ab8a:	4a05      	ldr	r2, [pc, #20]	; (800aba0 <__sseek+0x28>)
 800ab8c:	4013      	ands	r3, r2
 800ab8e:	81a3      	strh	r3, [r4, #12]
 800ab90:	bd70      	pop	{r4, r5, r6, pc}
 800ab92:	2280      	movs	r2, #128	; 0x80
 800ab94:	0152      	lsls	r2, r2, #5
 800ab96:	4313      	orrs	r3, r2
 800ab98:	81a3      	strh	r3, [r4, #12]
 800ab9a:	6520      	str	r0, [r4, #80]	; 0x50
 800ab9c:	e7f8      	b.n	800ab90 <__sseek+0x18>
 800ab9e:	46c0      	nop			; (mov r8, r8)
 800aba0:	ffffefff 	.word	0xffffefff

0800aba4 <__sclose>:
 800aba4:	b510      	push	{r4, lr}
 800aba6:	230e      	movs	r3, #14
 800aba8:	5ec9      	ldrsh	r1, [r1, r3]
 800abaa:	f000 f84d 	bl	800ac48 <_close_r>
 800abae:	bd10      	pop	{r4, pc}

0800abb0 <memset>:
 800abb0:	0003      	movs	r3, r0
 800abb2:	1882      	adds	r2, r0, r2
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d100      	bne.n	800abba <memset+0xa>
 800abb8:	4770      	bx	lr
 800abba:	7019      	strb	r1, [r3, #0]
 800abbc:	3301      	adds	r3, #1
 800abbe:	e7f9      	b.n	800abb4 <memset+0x4>

0800abc0 <strncmp>:
 800abc0:	b530      	push	{r4, r5, lr}
 800abc2:	0005      	movs	r5, r0
 800abc4:	1e10      	subs	r0, r2, #0
 800abc6:	d00b      	beq.n	800abe0 <strncmp+0x20>
 800abc8:	2400      	movs	r4, #0
 800abca:	3a01      	subs	r2, #1
 800abcc:	5d2b      	ldrb	r3, [r5, r4]
 800abce:	5d08      	ldrb	r0, [r1, r4]
 800abd0:	4283      	cmp	r3, r0
 800abd2:	d104      	bne.n	800abde <strncmp+0x1e>
 800abd4:	42a2      	cmp	r2, r4
 800abd6:	d002      	beq.n	800abde <strncmp+0x1e>
 800abd8:	3401      	adds	r4, #1
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d1f6      	bne.n	800abcc <strncmp+0xc>
 800abde:	1a18      	subs	r0, r3, r0
 800abe0:	bd30      	pop	{r4, r5, pc}

0800abe2 <strncpy>:
 800abe2:	0003      	movs	r3, r0
 800abe4:	b530      	push	{r4, r5, lr}
 800abe6:	001d      	movs	r5, r3
 800abe8:	2a00      	cmp	r2, #0
 800abea:	d006      	beq.n	800abfa <strncpy+0x18>
 800abec:	780c      	ldrb	r4, [r1, #0]
 800abee:	3a01      	subs	r2, #1
 800abf0:	3301      	adds	r3, #1
 800abf2:	702c      	strb	r4, [r5, #0]
 800abf4:	3101      	adds	r1, #1
 800abf6:	2c00      	cmp	r4, #0
 800abf8:	d1f5      	bne.n	800abe6 <strncpy+0x4>
 800abfa:	2100      	movs	r1, #0
 800abfc:	189a      	adds	r2, r3, r2
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d100      	bne.n	800ac04 <strncpy+0x22>
 800ac02:	bd30      	pop	{r4, r5, pc}
 800ac04:	7019      	strb	r1, [r3, #0]
 800ac06:	3301      	adds	r3, #1
 800ac08:	e7f9      	b.n	800abfe <strncpy+0x1c>

0800ac0a <strstr>:
 800ac0a:	780a      	ldrb	r2, [r1, #0]
 800ac0c:	b530      	push	{r4, r5, lr}
 800ac0e:	2a00      	cmp	r2, #0
 800ac10:	d10c      	bne.n	800ac2c <strstr+0x22>
 800ac12:	bd30      	pop	{r4, r5, pc}
 800ac14:	429a      	cmp	r2, r3
 800ac16:	d108      	bne.n	800ac2a <strstr+0x20>
 800ac18:	2301      	movs	r3, #1
 800ac1a:	5ccc      	ldrb	r4, [r1, r3]
 800ac1c:	2c00      	cmp	r4, #0
 800ac1e:	d0f8      	beq.n	800ac12 <strstr+0x8>
 800ac20:	5cc5      	ldrb	r5, [r0, r3]
 800ac22:	42a5      	cmp	r5, r4
 800ac24:	d101      	bne.n	800ac2a <strstr+0x20>
 800ac26:	3301      	adds	r3, #1
 800ac28:	e7f7      	b.n	800ac1a <strstr+0x10>
 800ac2a:	3001      	adds	r0, #1
 800ac2c:	7803      	ldrb	r3, [r0, #0]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d1f0      	bne.n	800ac14 <strstr+0xa>
 800ac32:	0018      	movs	r0, r3
 800ac34:	e7ed      	b.n	800ac12 <strstr+0x8>
	...

0800ac38 <__locale_mb_cur_max>:
 800ac38:	2294      	movs	r2, #148	; 0x94
 800ac3a:	4b02      	ldr	r3, [pc, #8]	; (800ac44 <__locale_mb_cur_max+0xc>)
 800ac3c:	0052      	lsls	r2, r2, #1
 800ac3e:	5c98      	ldrb	r0, [r3, r2]
 800ac40:	4770      	bx	lr
 800ac42:	46c0      	nop			; (mov r8, r8)
 800ac44:	20000448 	.word	0x20000448

0800ac48 <_close_r>:
 800ac48:	2300      	movs	r3, #0
 800ac4a:	b570      	push	{r4, r5, r6, lr}
 800ac4c:	4d06      	ldr	r5, [pc, #24]	; (800ac68 <_close_r+0x20>)
 800ac4e:	0004      	movs	r4, r0
 800ac50:	0008      	movs	r0, r1
 800ac52:	602b      	str	r3, [r5, #0]
 800ac54:	f7f8 fc39 	bl	80034ca <_close>
 800ac58:	1c43      	adds	r3, r0, #1
 800ac5a:	d103      	bne.n	800ac64 <_close_r+0x1c>
 800ac5c:	682b      	ldr	r3, [r5, #0]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d000      	beq.n	800ac64 <_close_r+0x1c>
 800ac62:	6023      	str	r3, [r4, #0]
 800ac64:	bd70      	pop	{r4, r5, r6, pc}
 800ac66:	46c0      	nop			; (mov r8, r8)
 800ac68:	20000c88 	.word	0x20000c88

0800ac6c <_lseek_r>:
 800ac6c:	b570      	push	{r4, r5, r6, lr}
 800ac6e:	0004      	movs	r4, r0
 800ac70:	0008      	movs	r0, r1
 800ac72:	0011      	movs	r1, r2
 800ac74:	001a      	movs	r2, r3
 800ac76:	2300      	movs	r3, #0
 800ac78:	4d05      	ldr	r5, [pc, #20]	; (800ac90 <_lseek_r+0x24>)
 800ac7a:	602b      	str	r3, [r5, #0]
 800ac7c:	f7f8 fc46 	bl	800350c <_lseek>
 800ac80:	1c43      	adds	r3, r0, #1
 800ac82:	d103      	bne.n	800ac8c <_lseek_r+0x20>
 800ac84:	682b      	ldr	r3, [r5, #0]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d000      	beq.n	800ac8c <_lseek_r+0x20>
 800ac8a:	6023      	str	r3, [r4, #0]
 800ac8c:	bd70      	pop	{r4, r5, r6, pc}
 800ac8e:	46c0      	nop			; (mov r8, r8)
 800ac90:	20000c88 	.word	0x20000c88

0800ac94 <_read_r>:
 800ac94:	b570      	push	{r4, r5, r6, lr}
 800ac96:	0004      	movs	r4, r0
 800ac98:	0008      	movs	r0, r1
 800ac9a:	0011      	movs	r1, r2
 800ac9c:	001a      	movs	r2, r3
 800ac9e:	2300      	movs	r3, #0
 800aca0:	4d05      	ldr	r5, [pc, #20]	; (800acb8 <_read_r+0x24>)
 800aca2:	602b      	str	r3, [r5, #0]
 800aca4:	f7f8 fbd8 	bl	8003458 <_read>
 800aca8:	1c43      	adds	r3, r0, #1
 800acaa:	d103      	bne.n	800acb4 <_read_r+0x20>
 800acac:	682b      	ldr	r3, [r5, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d000      	beq.n	800acb4 <_read_r+0x20>
 800acb2:	6023      	str	r3, [r4, #0]
 800acb4:	bd70      	pop	{r4, r5, r6, pc}
 800acb6:	46c0      	nop			; (mov r8, r8)
 800acb8:	20000c88 	.word	0x20000c88

0800acbc <_sbrk_r>:
 800acbc:	2300      	movs	r3, #0
 800acbe:	b570      	push	{r4, r5, r6, lr}
 800acc0:	4d06      	ldr	r5, [pc, #24]	; (800acdc <_sbrk_r+0x20>)
 800acc2:	0004      	movs	r4, r0
 800acc4:	0008      	movs	r0, r1
 800acc6:	602b      	str	r3, [r5, #0]
 800acc8:	f7f8 fc2c 	bl	8003524 <_sbrk>
 800accc:	1c43      	adds	r3, r0, #1
 800acce:	d103      	bne.n	800acd8 <_sbrk_r+0x1c>
 800acd0:	682b      	ldr	r3, [r5, #0]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d000      	beq.n	800acd8 <_sbrk_r+0x1c>
 800acd6:	6023      	str	r3, [r4, #0]
 800acd8:	bd70      	pop	{r4, r5, r6, pc}
 800acda:	46c0      	nop			; (mov r8, r8)
 800acdc:	20000c88 	.word	0x20000c88

0800ace0 <_write_r>:
 800ace0:	b570      	push	{r4, r5, r6, lr}
 800ace2:	0004      	movs	r4, r0
 800ace4:	0008      	movs	r0, r1
 800ace6:	0011      	movs	r1, r2
 800ace8:	001a      	movs	r2, r3
 800acea:	2300      	movs	r3, #0
 800acec:	4d05      	ldr	r5, [pc, #20]	; (800ad04 <_write_r+0x24>)
 800acee:	602b      	str	r3, [r5, #0]
 800acf0:	f7f8 fbcf 	bl	8003492 <_write>
 800acf4:	1c43      	adds	r3, r0, #1
 800acf6:	d103      	bne.n	800ad00 <_write_r+0x20>
 800acf8:	682b      	ldr	r3, [r5, #0]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d000      	beq.n	800ad00 <_write_r+0x20>
 800acfe:	6023      	str	r3, [r4, #0]
 800ad00:	bd70      	pop	{r4, r5, r6, pc}
 800ad02:	46c0      	nop			; (mov r8, r8)
 800ad04:	20000c88 	.word	0x20000c88

0800ad08 <__errno>:
 800ad08:	4b01      	ldr	r3, [pc, #4]	; (800ad10 <__errno+0x8>)
 800ad0a:	6818      	ldr	r0, [r3, #0]
 800ad0c:	4770      	bx	lr
 800ad0e:	46c0      	nop			; (mov r8, r8)
 800ad10:	200006d8 	.word	0x200006d8

0800ad14 <__libc_init_array>:
 800ad14:	b570      	push	{r4, r5, r6, lr}
 800ad16:	2600      	movs	r6, #0
 800ad18:	4c0c      	ldr	r4, [pc, #48]	; (800ad4c <__libc_init_array+0x38>)
 800ad1a:	4d0d      	ldr	r5, [pc, #52]	; (800ad50 <__libc_init_array+0x3c>)
 800ad1c:	1b64      	subs	r4, r4, r5
 800ad1e:	10a4      	asrs	r4, r4, #2
 800ad20:	42a6      	cmp	r6, r4
 800ad22:	d109      	bne.n	800ad38 <__libc_init_array+0x24>
 800ad24:	2600      	movs	r6, #0
 800ad26:	f006 fcc5 	bl	80116b4 <_init>
 800ad2a:	4c0a      	ldr	r4, [pc, #40]	; (800ad54 <__libc_init_array+0x40>)
 800ad2c:	4d0a      	ldr	r5, [pc, #40]	; (800ad58 <__libc_init_array+0x44>)
 800ad2e:	1b64      	subs	r4, r4, r5
 800ad30:	10a4      	asrs	r4, r4, #2
 800ad32:	42a6      	cmp	r6, r4
 800ad34:	d105      	bne.n	800ad42 <__libc_init_array+0x2e>
 800ad36:	bd70      	pop	{r4, r5, r6, pc}
 800ad38:	00b3      	lsls	r3, r6, #2
 800ad3a:	58eb      	ldr	r3, [r5, r3]
 800ad3c:	4798      	blx	r3
 800ad3e:	3601      	adds	r6, #1
 800ad40:	e7ee      	b.n	800ad20 <__libc_init_array+0xc>
 800ad42:	00b3      	lsls	r3, r6, #2
 800ad44:	58eb      	ldr	r3, [r5, r3]
 800ad46:	4798      	blx	r3
 800ad48:	3601      	adds	r6, #1
 800ad4a:	e7f2      	b.n	800ad32 <__libc_init_array+0x1e>
 800ad4c:	08013504 	.word	0x08013504
 800ad50:	08013504 	.word	0x08013504
 800ad54:	0801350c 	.word	0x0801350c
 800ad58:	08013504 	.word	0x08013504

0800ad5c <__retarget_lock_init_recursive>:
 800ad5c:	4770      	bx	lr

0800ad5e <__retarget_lock_close_recursive>:
 800ad5e:	4770      	bx	lr

0800ad60 <__retarget_lock_acquire_recursive>:
 800ad60:	4770      	bx	lr

0800ad62 <__retarget_lock_release_recursive>:
 800ad62:	4770      	bx	lr

0800ad64 <sysconf>:
 800ad64:	2380      	movs	r3, #128	; 0x80
 800ad66:	b510      	push	{r4, lr}
 800ad68:	2808      	cmp	r0, #8
 800ad6a:	d004      	beq.n	800ad76 <sysconf+0x12>
 800ad6c:	f7ff ffcc 	bl	800ad08 <__errno>
 800ad70:	2316      	movs	r3, #22
 800ad72:	6003      	str	r3, [r0, #0]
 800ad74:	3b17      	subs	r3, #23
 800ad76:	0018      	movs	r0, r3
 800ad78:	bd10      	pop	{r4, pc}

0800ad7a <memcpy>:
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	b510      	push	{r4, lr}
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d100      	bne.n	800ad84 <memcpy+0xa>
 800ad82:	bd10      	pop	{r4, pc}
 800ad84:	5ccc      	ldrb	r4, [r1, r3]
 800ad86:	54c4      	strb	r4, [r0, r3]
 800ad88:	3301      	adds	r3, #1
 800ad8a:	e7f8      	b.n	800ad7e <memcpy+0x4>

0800ad8c <nan>:
 800ad8c:	2000      	movs	r0, #0
 800ad8e:	4901      	ldr	r1, [pc, #4]	; (800ad94 <nan+0x8>)
 800ad90:	4770      	bx	lr
 800ad92:	46c0      	nop			; (mov r8, r8)
 800ad94:	7ff80000 	.word	0x7ff80000

0800ad98 <nanf>:
 800ad98:	4800      	ldr	r0, [pc, #0]	; (800ad9c <nanf+0x4>)
 800ad9a:	4770      	bx	lr
 800ad9c:	7fc00000 	.word	0x7fc00000

0800ada0 <register_fini>:
 800ada0:	4b03      	ldr	r3, [pc, #12]	; (800adb0 <register_fini+0x10>)
 800ada2:	b510      	push	{r4, lr}
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d002      	beq.n	800adae <register_fini+0xe>
 800ada8:	4802      	ldr	r0, [pc, #8]	; (800adb4 <register_fini+0x14>)
 800adaa:	f000 f805 	bl	800adb8 <atexit>
 800adae:	bd10      	pop	{r4, pc}
 800adb0:	00000000 	.word	0x00000000
 800adb4:	0800eb15 	.word	0x0800eb15

0800adb8 <atexit>:
 800adb8:	2300      	movs	r3, #0
 800adba:	b510      	push	{r4, lr}
 800adbc:	0001      	movs	r1, r0
 800adbe:	001a      	movs	r2, r3
 800adc0:	0018      	movs	r0, r3
 800adc2:	f003 fef9 	bl	800ebb8 <__register_exitproc>
 800adc6:	bd10      	pop	{r4, pc}

0800adc8 <_malloc_trim_r>:
 800adc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adca:	0004      	movs	r4, r0
 800adcc:	2008      	movs	r0, #8
 800adce:	000d      	movs	r5, r1
 800add0:	f7ff ffc8 	bl	800ad64 <sysconf>
 800add4:	0006      	movs	r6, r0
 800add6:	0020      	movs	r0, r4
 800add8:	f7fe fe7e 	bl	8009ad8 <__malloc_lock>
 800addc:	2203      	movs	r2, #3
 800adde:	4f21      	ldr	r7, [pc, #132]	; (800ae64 <_malloc_trim_r+0x9c>)
 800ade0:	0031      	movs	r1, r6
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	4393      	bics	r3, r2
 800ade8:	1b58      	subs	r0, r3, r5
 800adea:	3811      	subs	r0, #17
 800adec:	1980      	adds	r0, r0, r6
 800adee:	9301      	str	r3, [sp, #4]
 800adf0:	f7f5 f9a4 	bl	800013c <__udivsi3>
 800adf4:	1e45      	subs	r5, r0, #1
 800adf6:	4375      	muls	r5, r6
 800adf8:	42ae      	cmp	r6, r5
 800adfa:	dd04      	ble.n	800ae06 <_malloc_trim_r+0x3e>
 800adfc:	0020      	movs	r0, r4
 800adfe:	f7fe fe73 	bl	8009ae8 <__malloc_unlock>
 800ae02:	2000      	movs	r0, #0
 800ae04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ae06:	2100      	movs	r1, #0
 800ae08:	0020      	movs	r0, r4
 800ae0a:	f7ff ff57 	bl	800acbc <_sbrk_r>
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	9a01      	ldr	r2, [sp, #4]
 800ae12:	189b      	adds	r3, r3, r2
 800ae14:	4298      	cmp	r0, r3
 800ae16:	d1f1      	bne.n	800adfc <_malloc_trim_r+0x34>
 800ae18:	0020      	movs	r0, r4
 800ae1a:	4269      	negs	r1, r5
 800ae1c:	f7ff ff4e 	bl	800acbc <_sbrk_r>
 800ae20:	3001      	adds	r0, #1
 800ae22:	d110      	bne.n	800ae46 <_malloc_trim_r+0x7e>
 800ae24:	2100      	movs	r1, #0
 800ae26:	0020      	movs	r0, r4
 800ae28:	f7ff ff48 	bl	800acbc <_sbrk_r>
 800ae2c:	68ba      	ldr	r2, [r7, #8]
 800ae2e:	1a81      	subs	r1, r0, r2
 800ae30:	290f      	cmp	r1, #15
 800ae32:	dde3      	ble.n	800adfc <_malloc_trim_r+0x34>
 800ae34:	4d0c      	ldr	r5, [pc, #48]	; (800ae68 <_malloc_trim_r+0xa0>)
 800ae36:	4b0d      	ldr	r3, [pc, #52]	; (800ae6c <_malloc_trim_r+0xa4>)
 800ae38:	682d      	ldr	r5, [r5, #0]
 800ae3a:	1b40      	subs	r0, r0, r5
 800ae3c:	6018      	str	r0, [r3, #0]
 800ae3e:	2301      	movs	r3, #1
 800ae40:	430b      	orrs	r3, r1
 800ae42:	6053      	str	r3, [r2, #4]
 800ae44:	e7da      	b.n	800adfc <_malloc_trim_r+0x34>
 800ae46:	2601      	movs	r6, #1
 800ae48:	9b01      	ldr	r3, [sp, #4]
 800ae4a:	68ba      	ldr	r2, [r7, #8]
 800ae4c:	1b5b      	subs	r3, r3, r5
 800ae4e:	4333      	orrs	r3, r6
 800ae50:	6053      	str	r3, [r2, #4]
 800ae52:	4a06      	ldr	r2, [pc, #24]	; (800ae6c <_malloc_trim_r+0xa4>)
 800ae54:	0020      	movs	r0, r4
 800ae56:	6813      	ldr	r3, [r2, #0]
 800ae58:	1b5b      	subs	r3, r3, r5
 800ae5a:	6013      	str	r3, [r2, #0]
 800ae5c:	f7fe fe44 	bl	8009ae8 <__malloc_unlock>
 800ae60:	0030      	movs	r0, r6
 800ae62:	e7cf      	b.n	800ae04 <_malloc_trim_r+0x3c>
 800ae64:	2000002c 	.word	0x2000002c
 800ae68:	20000434 	.word	0x20000434
 800ae6c:	20000b18 	.word	0x20000b18

0800ae70 <_free_r>:
 800ae70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae72:	1e0d      	subs	r5, r1, #0
 800ae74:	9001      	str	r0, [sp, #4]
 800ae76:	d02d      	beq.n	800aed4 <_free_r+0x64>
 800ae78:	f7fe fe2e 	bl	8009ad8 <__malloc_lock>
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	0029      	movs	r1, r5
 800ae80:	469c      	mov	ip, r3
 800ae82:	3908      	subs	r1, #8
 800ae84:	684f      	ldr	r7, [r1, #4]
 800ae86:	4662      	mov	r2, ip
 800ae88:	003b      	movs	r3, r7
 800ae8a:	4664      	mov	r4, ip
 800ae8c:	4393      	bics	r3, r2
 800ae8e:	18c8      	adds	r0, r1, r3
 800ae90:	6845      	ldr	r5, [r0, #4]
 800ae92:	3202      	adds	r2, #2
 800ae94:	4395      	bics	r5, r2
 800ae96:	4a4a      	ldr	r2, [pc, #296]	; (800afc0 <_free_r+0x150>)
 800ae98:	4027      	ands	r7, r4
 800ae9a:	6896      	ldr	r6, [r2, #8]
 800ae9c:	4286      	cmp	r6, r0
 800ae9e:	d11a      	bne.n	800aed6 <_free_r+0x66>
 800aea0:	195b      	adds	r3, r3, r5
 800aea2:	2f00      	cmp	r7, #0
 800aea4:	d106      	bne.n	800aeb4 <_free_r+0x44>
 800aea6:	6808      	ldr	r0, [r1, #0]
 800aea8:	1a09      	subs	r1, r1, r0
 800aeaa:	688d      	ldr	r5, [r1, #8]
 800aeac:	181b      	adds	r3, r3, r0
 800aeae:	68c8      	ldr	r0, [r1, #12]
 800aeb0:	60e8      	str	r0, [r5, #12]
 800aeb2:	6085      	str	r5, [r0, #8]
 800aeb4:	2001      	movs	r0, #1
 800aeb6:	4318      	orrs	r0, r3
 800aeb8:	6048      	str	r0, [r1, #4]
 800aeba:	6091      	str	r1, [r2, #8]
 800aebc:	4a41      	ldr	r2, [pc, #260]	; (800afc4 <_free_r+0x154>)
 800aebe:	6812      	ldr	r2, [r2, #0]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d804      	bhi.n	800aece <_free_r+0x5e>
 800aec4:	4b40      	ldr	r3, [pc, #256]	; (800afc8 <_free_r+0x158>)
 800aec6:	9801      	ldr	r0, [sp, #4]
 800aec8:	6819      	ldr	r1, [r3, #0]
 800aeca:	f7ff ff7d 	bl	800adc8 <_malloc_trim_r>
 800aece:	9801      	ldr	r0, [sp, #4]
 800aed0:	f7fe fe0a 	bl	8009ae8 <__malloc_unlock>
 800aed4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800aed6:	2600      	movs	r6, #0
 800aed8:	6045      	str	r5, [r0, #4]
 800aeda:	42b7      	cmp	r7, r6
 800aedc:	d109      	bne.n	800aef2 <_free_r+0x82>
 800aede:	680f      	ldr	r7, [r1, #0]
 800aee0:	4c3a      	ldr	r4, [pc, #232]	; (800afcc <_free_r+0x15c>)
 800aee2:	1bc9      	subs	r1, r1, r7
 800aee4:	19db      	adds	r3, r3, r7
 800aee6:	688f      	ldr	r7, [r1, #8]
 800aee8:	42a7      	cmp	r7, r4
 800aeea:	d02c      	beq.n	800af46 <_free_r+0xd6>
 800aeec:	68cc      	ldr	r4, [r1, #12]
 800aeee:	60fc      	str	r4, [r7, #12]
 800aef0:	60a7      	str	r7, [r4, #8]
 800aef2:	1947      	adds	r7, r0, r5
 800aef4:	687c      	ldr	r4, [r7, #4]
 800aef6:	2701      	movs	r7, #1
 800aef8:	423c      	tst	r4, r7
 800aefa:	d10b      	bne.n	800af14 <_free_r+0xa4>
 800aefc:	195b      	adds	r3, r3, r5
 800aefe:	6885      	ldr	r5, [r0, #8]
 800af00:	2e00      	cmp	r6, #0
 800af02:	d122      	bne.n	800af4a <_free_r+0xda>
 800af04:	4c31      	ldr	r4, [pc, #196]	; (800afcc <_free_r+0x15c>)
 800af06:	42a5      	cmp	r5, r4
 800af08:	d11f      	bne.n	800af4a <_free_r+0xda>
 800af0a:	003e      	movs	r6, r7
 800af0c:	6151      	str	r1, [r2, #20]
 800af0e:	6111      	str	r1, [r2, #16]
 800af10:	60cd      	str	r5, [r1, #12]
 800af12:	608d      	str	r5, [r1, #8]
 800af14:	2501      	movs	r5, #1
 800af16:	0028      	movs	r0, r5
 800af18:	4318      	orrs	r0, r3
 800af1a:	6048      	str	r0, [r1, #4]
 800af1c:	50cb      	str	r3, [r1, r3]
 800af1e:	2e00      	cmp	r6, #0
 800af20:	d1d5      	bne.n	800aece <_free_r+0x5e>
 800af22:	2080      	movs	r0, #128	; 0x80
 800af24:	0080      	lsls	r0, r0, #2
 800af26:	4283      	cmp	r3, r0
 800af28:	d213      	bcs.n	800af52 <_free_r+0xe2>
 800af2a:	08d8      	lsrs	r0, r3, #3
 800af2c:	095b      	lsrs	r3, r3, #5
 800af2e:	409d      	lsls	r5, r3
 800af30:	6853      	ldr	r3, [r2, #4]
 800af32:	431d      	orrs	r5, r3
 800af34:	00c3      	lsls	r3, r0, #3
 800af36:	189b      	adds	r3, r3, r2
 800af38:	6055      	str	r5, [r2, #4]
 800af3a:	689a      	ldr	r2, [r3, #8]
 800af3c:	60cb      	str	r3, [r1, #12]
 800af3e:	608a      	str	r2, [r1, #8]
 800af40:	6099      	str	r1, [r3, #8]
 800af42:	60d1      	str	r1, [r2, #12]
 800af44:	e7c3      	b.n	800aece <_free_r+0x5e>
 800af46:	4666      	mov	r6, ip
 800af48:	e7d3      	b.n	800aef2 <_free_r+0x82>
 800af4a:	68c0      	ldr	r0, [r0, #12]
 800af4c:	60e8      	str	r0, [r5, #12]
 800af4e:	6085      	str	r5, [r0, #8]
 800af50:	e7e0      	b.n	800af14 <_free_r+0xa4>
 800af52:	0a5d      	lsrs	r5, r3, #9
 800af54:	2d04      	cmp	r5, #4
 800af56:	d812      	bhi.n	800af7e <_free_r+0x10e>
 800af58:	0998      	lsrs	r0, r3, #6
 800af5a:	3038      	adds	r0, #56	; 0x38
 800af5c:	00c6      	lsls	r6, r0, #3
 800af5e:	18b6      	adds	r6, r6, r2
 800af60:	68b5      	ldr	r5, [r6, #8]
 800af62:	2703      	movs	r7, #3
 800af64:	42ae      	cmp	r6, r5
 800af66:	d125      	bne.n	800afb4 <_free_r+0x144>
 800af68:	2301      	movs	r3, #1
 800af6a:	1080      	asrs	r0, r0, #2
 800af6c:	4083      	lsls	r3, r0
 800af6e:	6850      	ldr	r0, [r2, #4]
 800af70:	4303      	orrs	r3, r0
 800af72:	6053      	str	r3, [r2, #4]
 800af74:	60ce      	str	r6, [r1, #12]
 800af76:	608d      	str	r5, [r1, #8]
 800af78:	60b1      	str	r1, [r6, #8]
 800af7a:	60e9      	str	r1, [r5, #12]
 800af7c:	e7a7      	b.n	800aece <_free_r+0x5e>
 800af7e:	2d14      	cmp	r5, #20
 800af80:	d802      	bhi.n	800af88 <_free_r+0x118>
 800af82:	0028      	movs	r0, r5
 800af84:	305b      	adds	r0, #91	; 0x5b
 800af86:	e7e9      	b.n	800af5c <_free_r+0xec>
 800af88:	2d54      	cmp	r5, #84	; 0x54
 800af8a:	d802      	bhi.n	800af92 <_free_r+0x122>
 800af8c:	0b18      	lsrs	r0, r3, #12
 800af8e:	306e      	adds	r0, #110	; 0x6e
 800af90:	e7e4      	b.n	800af5c <_free_r+0xec>
 800af92:	20aa      	movs	r0, #170	; 0xaa
 800af94:	0040      	lsls	r0, r0, #1
 800af96:	4285      	cmp	r5, r0
 800af98:	d802      	bhi.n	800afa0 <_free_r+0x130>
 800af9a:	0bd8      	lsrs	r0, r3, #15
 800af9c:	3077      	adds	r0, #119	; 0x77
 800af9e:	e7dd      	b.n	800af5c <_free_r+0xec>
 800afa0:	4e0b      	ldr	r6, [pc, #44]	; (800afd0 <_free_r+0x160>)
 800afa2:	207e      	movs	r0, #126	; 0x7e
 800afa4:	42b5      	cmp	r5, r6
 800afa6:	d8d9      	bhi.n	800af5c <_free_r+0xec>
 800afa8:	0c98      	lsrs	r0, r3, #18
 800afaa:	307c      	adds	r0, #124	; 0x7c
 800afac:	e7d6      	b.n	800af5c <_free_r+0xec>
 800afae:	68ad      	ldr	r5, [r5, #8]
 800afb0:	42ae      	cmp	r6, r5
 800afb2:	d003      	beq.n	800afbc <_free_r+0x14c>
 800afb4:	686a      	ldr	r2, [r5, #4]
 800afb6:	43ba      	bics	r2, r7
 800afb8:	429a      	cmp	r2, r3
 800afba:	d8f8      	bhi.n	800afae <_free_r+0x13e>
 800afbc:	68ee      	ldr	r6, [r5, #12]
 800afbe:	e7d9      	b.n	800af74 <_free_r+0x104>
 800afc0:	2000002c 	.word	0x2000002c
 800afc4:	20000438 	.word	0x20000438
 800afc8:	20000b48 	.word	0x20000b48
 800afcc:	20000034 	.word	0x20000034
 800afd0:	00000554 	.word	0x00000554

0800afd4 <rshift>:
 800afd4:	0002      	movs	r2, r0
 800afd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afd8:	6904      	ldr	r4, [r0, #16]
 800afda:	114b      	asrs	r3, r1, #5
 800afdc:	b085      	sub	sp, #20
 800afde:	3214      	adds	r2, #20
 800afe0:	9302      	str	r3, [sp, #8]
 800afe2:	114d      	asrs	r5, r1, #5
 800afe4:	0013      	movs	r3, r2
 800afe6:	42ac      	cmp	r4, r5
 800afe8:	dd32      	ble.n	800b050 <rshift+0x7c>
 800afea:	261f      	movs	r6, #31
 800afec:	000f      	movs	r7, r1
 800afee:	114b      	asrs	r3, r1, #5
 800aff0:	009b      	lsls	r3, r3, #2
 800aff2:	00a5      	lsls	r5, r4, #2
 800aff4:	18d3      	adds	r3, r2, r3
 800aff6:	4037      	ands	r7, r6
 800aff8:	1955      	adds	r5, r2, r5
 800affa:	9300      	str	r3, [sp, #0]
 800affc:	9701      	str	r7, [sp, #4]
 800affe:	4231      	tst	r1, r6
 800b000:	d10d      	bne.n	800b01e <rshift+0x4a>
 800b002:	0016      	movs	r6, r2
 800b004:	0019      	movs	r1, r3
 800b006:	428d      	cmp	r5, r1
 800b008:	d836      	bhi.n	800b078 <rshift+0xa4>
 800b00a:	9900      	ldr	r1, [sp, #0]
 800b00c:	2300      	movs	r3, #0
 800b00e:	3903      	subs	r1, #3
 800b010:	428d      	cmp	r5, r1
 800b012:	d302      	bcc.n	800b01a <rshift+0x46>
 800b014:	9b02      	ldr	r3, [sp, #8]
 800b016:	1ae4      	subs	r4, r4, r3
 800b018:	00a3      	lsls	r3, r4, #2
 800b01a:	18d3      	adds	r3, r2, r3
 800b01c:	e018      	b.n	800b050 <rshift+0x7c>
 800b01e:	2120      	movs	r1, #32
 800b020:	9e01      	ldr	r6, [sp, #4]
 800b022:	9f01      	ldr	r7, [sp, #4]
 800b024:	1b89      	subs	r1, r1, r6
 800b026:	9e00      	ldr	r6, [sp, #0]
 800b028:	9103      	str	r1, [sp, #12]
 800b02a:	ce02      	ldmia	r6!, {r1}
 800b02c:	4694      	mov	ip, r2
 800b02e:	40f9      	lsrs	r1, r7
 800b030:	42b5      	cmp	r5, r6
 800b032:	d816      	bhi.n	800b062 <rshift+0x8e>
 800b034:	9e00      	ldr	r6, [sp, #0]
 800b036:	2300      	movs	r3, #0
 800b038:	3601      	adds	r6, #1
 800b03a:	42b5      	cmp	r5, r6
 800b03c:	d303      	bcc.n	800b046 <rshift+0x72>
 800b03e:	9b02      	ldr	r3, [sp, #8]
 800b040:	1ae3      	subs	r3, r4, r3
 800b042:	009b      	lsls	r3, r3, #2
 800b044:	3b04      	subs	r3, #4
 800b046:	18d3      	adds	r3, r2, r3
 800b048:	6019      	str	r1, [r3, #0]
 800b04a:	2900      	cmp	r1, #0
 800b04c:	d000      	beq.n	800b050 <rshift+0x7c>
 800b04e:	3304      	adds	r3, #4
 800b050:	1a99      	subs	r1, r3, r2
 800b052:	1089      	asrs	r1, r1, #2
 800b054:	6101      	str	r1, [r0, #16]
 800b056:	4293      	cmp	r3, r2
 800b058:	d101      	bne.n	800b05e <rshift+0x8a>
 800b05a:	2300      	movs	r3, #0
 800b05c:	6143      	str	r3, [r0, #20]
 800b05e:	b005      	add	sp, #20
 800b060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b062:	6837      	ldr	r7, [r6, #0]
 800b064:	9b03      	ldr	r3, [sp, #12]
 800b066:	409f      	lsls	r7, r3
 800b068:	430f      	orrs	r7, r1
 800b06a:	4661      	mov	r1, ip
 800b06c:	c180      	stmia	r1!, {r7}
 800b06e:	468c      	mov	ip, r1
 800b070:	9b01      	ldr	r3, [sp, #4]
 800b072:	ce02      	ldmia	r6!, {r1}
 800b074:	40d9      	lsrs	r1, r3
 800b076:	e7db      	b.n	800b030 <rshift+0x5c>
 800b078:	c980      	ldmia	r1!, {r7}
 800b07a:	c680      	stmia	r6!, {r7}
 800b07c:	e7c3      	b.n	800b006 <rshift+0x32>

0800b07e <__hexdig_fun>:
 800b07e:	0002      	movs	r2, r0
 800b080:	3a30      	subs	r2, #48	; 0x30
 800b082:	0003      	movs	r3, r0
 800b084:	2a09      	cmp	r2, #9
 800b086:	d802      	bhi.n	800b08e <__hexdig_fun+0x10>
 800b088:	3b20      	subs	r3, #32
 800b08a:	b2d8      	uxtb	r0, r3
 800b08c:	4770      	bx	lr
 800b08e:	0002      	movs	r2, r0
 800b090:	3a61      	subs	r2, #97	; 0x61
 800b092:	2a05      	cmp	r2, #5
 800b094:	d801      	bhi.n	800b09a <__hexdig_fun+0x1c>
 800b096:	3b47      	subs	r3, #71	; 0x47
 800b098:	e7f7      	b.n	800b08a <__hexdig_fun+0xc>
 800b09a:	001a      	movs	r2, r3
 800b09c:	3a41      	subs	r2, #65	; 0x41
 800b09e:	2000      	movs	r0, #0
 800b0a0:	2a05      	cmp	r2, #5
 800b0a2:	d8f3      	bhi.n	800b08c <__hexdig_fun+0xe>
 800b0a4:	3b27      	subs	r3, #39	; 0x27
 800b0a6:	e7f0      	b.n	800b08a <__hexdig_fun+0xc>

0800b0a8 <__gethex>:
 800b0a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0aa:	b089      	sub	sp, #36	; 0x24
 800b0ac:	9307      	str	r3, [sp, #28]
 800b0ae:	2302      	movs	r3, #2
 800b0b0:	9201      	str	r2, [sp, #4]
 800b0b2:	680a      	ldr	r2, [r1, #0]
 800b0b4:	425b      	negs	r3, r3
 800b0b6:	9003      	str	r0, [sp, #12]
 800b0b8:	9106      	str	r1, [sp, #24]
 800b0ba:	1c96      	adds	r6, r2, #2
 800b0bc:	1a9b      	subs	r3, r3, r2
 800b0be:	199a      	adds	r2, r3, r6
 800b0c0:	9600      	str	r6, [sp, #0]
 800b0c2:	9205      	str	r2, [sp, #20]
 800b0c4:	9a00      	ldr	r2, [sp, #0]
 800b0c6:	3601      	adds	r6, #1
 800b0c8:	7810      	ldrb	r0, [r2, #0]
 800b0ca:	2830      	cmp	r0, #48	; 0x30
 800b0cc:	d0f7      	beq.n	800b0be <__gethex+0x16>
 800b0ce:	f7ff ffd6 	bl	800b07e <__hexdig_fun>
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	001d      	movs	r5, r3
 800b0d6:	9302      	str	r3, [sp, #8]
 800b0d8:	4298      	cmp	r0, r3
 800b0da:	d11d      	bne.n	800b118 <__gethex+0x70>
 800b0dc:	2201      	movs	r2, #1
 800b0de:	49a6      	ldr	r1, [pc, #664]	; (800b378 <__gethex+0x2d0>)
 800b0e0:	9800      	ldr	r0, [sp, #0]
 800b0e2:	f7ff fd6d 	bl	800abc0 <strncmp>
 800b0e6:	0007      	movs	r7, r0
 800b0e8:	42a8      	cmp	r0, r5
 800b0ea:	d169      	bne.n	800b1c0 <__gethex+0x118>
 800b0ec:	9b00      	ldr	r3, [sp, #0]
 800b0ee:	0034      	movs	r4, r6
 800b0f0:	7858      	ldrb	r0, [r3, #1]
 800b0f2:	f7ff ffc4 	bl	800b07e <__hexdig_fun>
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	9302      	str	r3, [sp, #8]
 800b0fa:	42a8      	cmp	r0, r5
 800b0fc:	d02f      	beq.n	800b15e <__gethex+0xb6>
 800b0fe:	9600      	str	r6, [sp, #0]
 800b100:	9b00      	ldr	r3, [sp, #0]
 800b102:	7818      	ldrb	r0, [r3, #0]
 800b104:	2830      	cmp	r0, #48	; 0x30
 800b106:	d009      	beq.n	800b11c <__gethex+0x74>
 800b108:	f7ff ffb9 	bl	800b07e <__hexdig_fun>
 800b10c:	4242      	negs	r2, r0
 800b10e:	4142      	adcs	r2, r0
 800b110:	2301      	movs	r3, #1
 800b112:	0035      	movs	r5, r6
 800b114:	9202      	str	r2, [sp, #8]
 800b116:	9305      	str	r3, [sp, #20]
 800b118:	9c00      	ldr	r4, [sp, #0]
 800b11a:	e004      	b.n	800b126 <__gethex+0x7e>
 800b11c:	9b00      	ldr	r3, [sp, #0]
 800b11e:	3301      	adds	r3, #1
 800b120:	9300      	str	r3, [sp, #0]
 800b122:	e7ed      	b.n	800b100 <__gethex+0x58>
 800b124:	3401      	adds	r4, #1
 800b126:	7820      	ldrb	r0, [r4, #0]
 800b128:	f7ff ffa9 	bl	800b07e <__hexdig_fun>
 800b12c:	1e07      	subs	r7, r0, #0
 800b12e:	d1f9      	bne.n	800b124 <__gethex+0x7c>
 800b130:	2201      	movs	r2, #1
 800b132:	0020      	movs	r0, r4
 800b134:	4990      	ldr	r1, [pc, #576]	; (800b378 <__gethex+0x2d0>)
 800b136:	f7ff fd43 	bl	800abc0 <strncmp>
 800b13a:	2800      	cmp	r0, #0
 800b13c:	d10d      	bne.n	800b15a <__gethex+0xb2>
 800b13e:	2d00      	cmp	r5, #0
 800b140:	d106      	bne.n	800b150 <__gethex+0xa8>
 800b142:	3401      	adds	r4, #1
 800b144:	0025      	movs	r5, r4
 800b146:	7820      	ldrb	r0, [r4, #0]
 800b148:	f7ff ff99 	bl	800b07e <__hexdig_fun>
 800b14c:	2800      	cmp	r0, #0
 800b14e:	d102      	bne.n	800b156 <__gethex+0xae>
 800b150:	1b2d      	subs	r5, r5, r4
 800b152:	00af      	lsls	r7, r5, #2
 800b154:	e003      	b.n	800b15e <__gethex+0xb6>
 800b156:	3401      	adds	r4, #1
 800b158:	e7f5      	b.n	800b146 <__gethex+0x9e>
 800b15a:	2d00      	cmp	r5, #0
 800b15c:	d1f8      	bne.n	800b150 <__gethex+0xa8>
 800b15e:	2220      	movs	r2, #32
 800b160:	7823      	ldrb	r3, [r4, #0]
 800b162:	0026      	movs	r6, r4
 800b164:	4393      	bics	r3, r2
 800b166:	2b50      	cmp	r3, #80	; 0x50
 800b168:	d11d      	bne.n	800b1a6 <__gethex+0xfe>
 800b16a:	7863      	ldrb	r3, [r4, #1]
 800b16c:	2b2b      	cmp	r3, #43	; 0x2b
 800b16e:	d02c      	beq.n	800b1ca <__gethex+0x122>
 800b170:	2b2d      	cmp	r3, #45	; 0x2d
 800b172:	d02e      	beq.n	800b1d2 <__gethex+0x12a>
 800b174:	2300      	movs	r3, #0
 800b176:	1c66      	adds	r6, r4, #1
 800b178:	9304      	str	r3, [sp, #16]
 800b17a:	7830      	ldrb	r0, [r6, #0]
 800b17c:	f7ff ff7f 	bl	800b07e <__hexdig_fun>
 800b180:	1e43      	subs	r3, r0, #1
 800b182:	b2db      	uxtb	r3, r3
 800b184:	2b18      	cmp	r3, #24
 800b186:	d82b      	bhi.n	800b1e0 <__gethex+0x138>
 800b188:	3810      	subs	r0, #16
 800b18a:	0005      	movs	r5, r0
 800b18c:	7870      	ldrb	r0, [r6, #1]
 800b18e:	f7ff ff76 	bl	800b07e <__hexdig_fun>
 800b192:	1e43      	subs	r3, r0, #1
 800b194:	b2db      	uxtb	r3, r3
 800b196:	3601      	adds	r6, #1
 800b198:	2b18      	cmp	r3, #24
 800b19a:	d91c      	bls.n	800b1d6 <__gethex+0x12e>
 800b19c:	9b04      	ldr	r3, [sp, #16]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d000      	beq.n	800b1a4 <__gethex+0xfc>
 800b1a2:	426d      	negs	r5, r5
 800b1a4:	197f      	adds	r7, r7, r5
 800b1a6:	9b06      	ldr	r3, [sp, #24]
 800b1a8:	601e      	str	r6, [r3, #0]
 800b1aa:	9b02      	ldr	r3, [sp, #8]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d019      	beq.n	800b1e4 <__gethex+0x13c>
 800b1b0:	2600      	movs	r6, #0
 800b1b2:	9b05      	ldr	r3, [sp, #20]
 800b1b4:	42b3      	cmp	r3, r6
 800b1b6:	d100      	bne.n	800b1ba <__gethex+0x112>
 800b1b8:	3606      	adds	r6, #6
 800b1ba:	0030      	movs	r0, r6
 800b1bc:	b009      	add	sp, #36	; 0x24
 800b1be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	2700      	movs	r7, #0
 800b1c4:	9c00      	ldr	r4, [sp, #0]
 800b1c6:	9302      	str	r3, [sp, #8]
 800b1c8:	e7c9      	b.n	800b15e <__gethex+0xb6>
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	9304      	str	r3, [sp, #16]
 800b1ce:	1ca6      	adds	r6, r4, #2
 800b1d0:	e7d3      	b.n	800b17a <__gethex+0xd2>
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e7fa      	b.n	800b1cc <__gethex+0x124>
 800b1d6:	230a      	movs	r3, #10
 800b1d8:	435d      	muls	r5, r3
 800b1da:	182d      	adds	r5, r5, r0
 800b1dc:	3d10      	subs	r5, #16
 800b1de:	e7d5      	b.n	800b18c <__gethex+0xe4>
 800b1e0:	0026      	movs	r6, r4
 800b1e2:	e7e0      	b.n	800b1a6 <__gethex+0xfe>
 800b1e4:	9b00      	ldr	r3, [sp, #0]
 800b1e6:	9902      	ldr	r1, [sp, #8]
 800b1e8:	1ae3      	subs	r3, r4, r3
 800b1ea:	3b01      	subs	r3, #1
 800b1ec:	2b07      	cmp	r3, #7
 800b1ee:	dc0a      	bgt.n	800b206 <__gethex+0x15e>
 800b1f0:	9803      	ldr	r0, [sp, #12]
 800b1f2:	f000 fa5d 	bl	800b6b0 <_Balloc>
 800b1f6:	1e05      	subs	r5, r0, #0
 800b1f8:	d108      	bne.n	800b20c <__gethex+0x164>
 800b1fa:	002a      	movs	r2, r5
 800b1fc:	21e4      	movs	r1, #228	; 0xe4
 800b1fe:	4b5f      	ldr	r3, [pc, #380]	; (800b37c <__gethex+0x2d4>)
 800b200:	485f      	ldr	r0, [pc, #380]	; (800b380 <__gethex+0x2d8>)
 800b202:	f003 fd19 	bl	800ec38 <__assert_func>
 800b206:	3101      	adds	r1, #1
 800b208:	105b      	asrs	r3, r3, #1
 800b20a:	e7ef      	b.n	800b1ec <__gethex+0x144>
 800b20c:	0003      	movs	r3, r0
 800b20e:	3314      	adds	r3, #20
 800b210:	9302      	str	r3, [sp, #8]
 800b212:	9305      	str	r3, [sp, #20]
 800b214:	2300      	movs	r3, #0
 800b216:	001e      	movs	r6, r3
 800b218:	9304      	str	r3, [sp, #16]
 800b21a:	9b00      	ldr	r3, [sp, #0]
 800b21c:	42a3      	cmp	r3, r4
 800b21e:	d33f      	bcc.n	800b2a0 <__gethex+0x1f8>
 800b220:	9c05      	ldr	r4, [sp, #20]
 800b222:	9b02      	ldr	r3, [sp, #8]
 800b224:	c440      	stmia	r4!, {r6}
 800b226:	1ae4      	subs	r4, r4, r3
 800b228:	10a4      	asrs	r4, r4, #2
 800b22a:	0030      	movs	r0, r6
 800b22c:	612c      	str	r4, [r5, #16]
 800b22e:	f000 fb01 	bl	800b834 <__hi0bits>
 800b232:	9b01      	ldr	r3, [sp, #4]
 800b234:	0164      	lsls	r4, r4, #5
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	1a26      	subs	r6, r4, r0
 800b23a:	9300      	str	r3, [sp, #0]
 800b23c:	429e      	cmp	r6, r3
 800b23e:	dd51      	ble.n	800b2e4 <__gethex+0x23c>
 800b240:	1af6      	subs	r6, r6, r3
 800b242:	0031      	movs	r1, r6
 800b244:	0028      	movs	r0, r5
 800b246:	f000 fe7b 	bl	800bf40 <__any_on>
 800b24a:	1e04      	subs	r4, r0, #0
 800b24c:	d016      	beq.n	800b27c <__gethex+0x1d4>
 800b24e:	2401      	movs	r4, #1
 800b250:	231f      	movs	r3, #31
 800b252:	0020      	movs	r0, r4
 800b254:	1e72      	subs	r2, r6, #1
 800b256:	4013      	ands	r3, r2
 800b258:	4098      	lsls	r0, r3
 800b25a:	0003      	movs	r3, r0
 800b25c:	1151      	asrs	r1, r2, #5
 800b25e:	9802      	ldr	r0, [sp, #8]
 800b260:	0089      	lsls	r1, r1, #2
 800b262:	5809      	ldr	r1, [r1, r0]
 800b264:	4219      	tst	r1, r3
 800b266:	d009      	beq.n	800b27c <__gethex+0x1d4>
 800b268:	42a2      	cmp	r2, r4
 800b26a:	dd06      	ble.n	800b27a <__gethex+0x1d2>
 800b26c:	0028      	movs	r0, r5
 800b26e:	1eb1      	subs	r1, r6, #2
 800b270:	f000 fe66 	bl	800bf40 <__any_on>
 800b274:	3402      	adds	r4, #2
 800b276:	2800      	cmp	r0, #0
 800b278:	d100      	bne.n	800b27c <__gethex+0x1d4>
 800b27a:	2402      	movs	r4, #2
 800b27c:	0031      	movs	r1, r6
 800b27e:	0028      	movs	r0, r5
 800b280:	f7ff fea8 	bl	800afd4 <rshift>
 800b284:	19bf      	adds	r7, r7, r6
 800b286:	9b01      	ldr	r3, [sp, #4]
 800b288:	689b      	ldr	r3, [r3, #8]
 800b28a:	42bb      	cmp	r3, r7
 800b28c:	da3a      	bge.n	800b304 <__gethex+0x25c>
 800b28e:	0029      	movs	r1, r5
 800b290:	9803      	ldr	r0, [sp, #12]
 800b292:	f000 fa35 	bl	800b700 <_Bfree>
 800b296:	2300      	movs	r3, #0
 800b298:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b29a:	26a3      	movs	r6, #163	; 0xa3
 800b29c:	6013      	str	r3, [r2, #0]
 800b29e:	e78c      	b.n	800b1ba <__gethex+0x112>
 800b2a0:	3c01      	subs	r4, #1
 800b2a2:	7823      	ldrb	r3, [r4, #0]
 800b2a4:	2b2e      	cmp	r3, #46	; 0x2e
 800b2a6:	d012      	beq.n	800b2ce <__gethex+0x226>
 800b2a8:	9b04      	ldr	r3, [sp, #16]
 800b2aa:	2b20      	cmp	r3, #32
 800b2ac:	d104      	bne.n	800b2b8 <__gethex+0x210>
 800b2ae:	9b05      	ldr	r3, [sp, #20]
 800b2b0:	c340      	stmia	r3!, {r6}
 800b2b2:	2600      	movs	r6, #0
 800b2b4:	9305      	str	r3, [sp, #20]
 800b2b6:	9604      	str	r6, [sp, #16]
 800b2b8:	7820      	ldrb	r0, [r4, #0]
 800b2ba:	f7ff fee0 	bl	800b07e <__hexdig_fun>
 800b2be:	230f      	movs	r3, #15
 800b2c0:	4018      	ands	r0, r3
 800b2c2:	9b04      	ldr	r3, [sp, #16]
 800b2c4:	4098      	lsls	r0, r3
 800b2c6:	3304      	adds	r3, #4
 800b2c8:	4306      	orrs	r6, r0
 800b2ca:	9304      	str	r3, [sp, #16]
 800b2cc:	e7a5      	b.n	800b21a <__gethex+0x172>
 800b2ce:	9b00      	ldr	r3, [sp, #0]
 800b2d0:	42a3      	cmp	r3, r4
 800b2d2:	d8e9      	bhi.n	800b2a8 <__gethex+0x200>
 800b2d4:	2201      	movs	r2, #1
 800b2d6:	0020      	movs	r0, r4
 800b2d8:	4927      	ldr	r1, [pc, #156]	; (800b378 <__gethex+0x2d0>)
 800b2da:	f7ff fc71 	bl	800abc0 <strncmp>
 800b2de:	2800      	cmp	r0, #0
 800b2e0:	d1e2      	bne.n	800b2a8 <__gethex+0x200>
 800b2e2:	e79a      	b.n	800b21a <__gethex+0x172>
 800b2e4:	9b00      	ldr	r3, [sp, #0]
 800b2e6:	2400      	movs	r4, #0
 800b2e8:	429e      	cmp	r6, r3
 800b2ea:	dacc      	bge.n	800b286 <__gethex+0x1de>
 800b2ec:	1b9e      	subs	r6, r3, r6
 800b2ee:	0029      	movs	r1, r5
 800b2f0:	0032      	movs	r2, r6
 800b2f2:	9803      	ldr	r0, [sp, #12]
 800b2f4:	f000 fbf0 	bl	800bad8 <__lshift>
 800b2f8:	0003      	movs	r3, r0
 800b2fa:	3314      	adds	r3, #20
 800b2fc:	0005      	movs	r5, r0
 800b2fe:	1bbf      	subs	r7, r7, r6
 800b300:	9302      	str	r3, [sp, #8]
 800b302:	e7c0      	b.n	800b286 <__gethex+0x1de>
 800b304:	9b01      	ldr	r3, [sp, #4]
 800b306:	685e      	ldr	r6, [r3, #4]
 800b308:	42be      	cmp	r6, r7
 800b30a:	dd70      	ble.n	800b3ee <__gethex+0x346>
 800b30c:	9b00      	ldr	r3, [sp, #0]
 800b30e:	1bf6      	subs	r6, r6, r7
 800b310:	42b3      	cmp	r3, r6
 800b312:	dc37      	bgt.n	800b384 <__gethex+0x2dc>
 800b314:	9b01      	ldr	r3, [sp, #4]
 800b316:	68db      	ldr	r3, [r3, #12]
 800b318:	2b02      	cmp	r3, #2
 800b31a:	d024      	beq.n	800b366 <__gethex+0x2be>
 800b31c:	2b03      	cmp	r3, #3
 800b31e:	d026      	beq.n	800b36e <__gethex+0x2c6>
 800b320:	2b01      	cmp	r3, #1
 800b322:	d117      	bne.n	800b354 <__gethex+0x2ac>
 800b324:	9b00      	ldr	r3, [sp, #0]
 800b326:	42b3      	cmp	r3, r6
 800b328:	d114      	bne.n	800b354 <__gethex+0x2ac>
 800b32a:	2b01      	cmp	r3, #1
 800b32c:	d10b      	bne.n	800b346 <__gethex+0x29e>
 800b32e:	9b01      	ldr	r3, [sp, #4]
 800b330:	9a07      	ldr	r2, [sp, #28]
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	2662      	movs	r6, #98	; 0x62
 800b336:	6013      	str	r3, [r2, #0]
 800b338:	2301      	movs	r3, #1
 800b33a:	9a02      	ldr	r2, [sp, #8]
 800b33c:	612b      	str	r3, [r5, #16]
 800b33e:	6013      	str	r3, [r2, #0]
 800b340:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b342:	601d      	str	r5, [r3, #0]
 800b344:	e739      	b.n	800b1ba <__gethex+0x112>
 800b346:	9900      	ldr	r1, [sp, #0]
 800b348:	0028      	movs	r0, r5
 800b34a:	3901      	subs	r1, #1
 800b34c:	f000 fdf8 	bl	800bf40 <__any_on>
 800b350:	2800      	cmp	r0, #0
 800b352:	d1ec      	bne.n	800b32e <__gethex+0x286>
 800b354:	0029      	movs	r1, r5
 800b356:	9803      	ldr	r0, [sp, #12]
 800b358:	f000 f9d2 	bl	800b700 <_Bfree>
 800b35c:	2300      	movs	r3, #0
 800b35e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b360:	2650      	movs	r6, #80	; 0x50
 800b362:	6013      	str	r3, [r2, #0]
 800b364:	e729      	b.n	800b1ba <__gethex+0x112>
 800b366:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d1f3      	bne.n	800b354 <__gethex+0x2ac>
 800b36c:	e7df      	b.n	800b32e <__gethex+0x286>
 800b36e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b370:	2b00      	cmp	r3, #0
 800b372:	d1dc      	bne.n	800b32e <__gethex+0x286>
 800b374:	e7ee      	b.n	800b354 <__gethex+0x2ac>
 800b376:	46c0      	nop			; (mov r8, r8)
 800b378:	08013094 	.word	0x08013094
 800b37c:	080131f1 	.word	0x080131f1
 800b380:	08013202 	.word	0x08013202
 800b384:	1e77      	subs	r7, r6, #1
 800b386:	2c00      	cmp	r4, #0
 800b388:	d12f      	bne.n	800b3ea <__gethex+0x342>
 800b38a:	2f00      	cmp	r7, #0
 800b38c:	d004      	beq.n	800b398 <__gethex+0x2f0>
 800b38e:	0039      	movs	r1, r7
 800b390:	0028      	movs	r0, r5
 800b392:	f000 fdd5 	bl	800bf40 <__any_on>
 800b396:	0004      	movs	r4, r0
 800b398:	231f      	movs	r3, #31
 800b39a:	117a      	asrs	r2, r7, #5
 800b39c:	401f      	ands	r7, r3
 800b39e:	3b1e      	subs	r3, #30
 800b3a0:	40bb      	lsls	r3, r7
 800b3a2:	9902      	ldr	r1, [sp, #8]
 800b3a4:	0092      	lsls	r2, r2, #2
 800b3a6:	5852      	ldr	r2, [r2, r1]
 800b3a8:	421a      	tst	r2, r3
 800b3aa:	d001      	beq.n	800b3b0 <__gethex+0x308>
 800b3ac:	2302      	movs	r3, #2
 800b3ae:	431c      	orrs	r4, r3
 800b3b0:	9b00      	ldr	r3, [sp, #0]
 800b3b2:	0031      	movs	r1, r6
 800b3b4:	1b9b      	subs	r3, r3, r6
 800b3b6:	2602      	movs	r6, #2
 800b3b8:	0028      	movs	r0, r5
 800b3ba:	9300      	str	r3, [sp, #0]
 800b3bc:	f7ff fe0a 	bl	800afd4 <rshift>
 800b3c0:	9b01      	ldr	r3, [sp, #4]
 800b3c2:	685f      	ldr	r7, [r3, #4]
 800b3c4:	2c00      	cmp	r4, #0
 800b3c6:	d041      	beq.n	800b44c <__gethex+0x3a4>
 800b3c8:	9b01      	ldr	r3, [sp, #4]
 800b3ca:	68db      	ldr	r3, [r3, #12]
 800b3cc:	2b02      	cmp	r3, #2
 800b3ce:	d010      	beq.n	800b3f2 <__gethex+0x34a>
 800b3d0:	2b03      	cmp	r3, #3
 800b3d2:	d012      	beq.n	800b3fa <__gethex+0x352>
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	d106      	bne.n	800b3e6 <__gethex+0x33e>
 800b3d8:	07a2      	lsls	r2, r4, #30
 800b3da:	d504      	bpl.n	800b3e6 <__gethex+0x33e>
 800b3dc:	9a02      	ldr	r2, [sp, #8]
 800b3de:	6812      	ldr	r2, [r2, #0]
 800b3e0:	4314      	orrs	r4, r2
 800b3e2:	421c      	tst	r4, r3
 800b3e4:	d10c      	bne.n	800b400 <__gethex+0x358>
 800b3e6:	2310      	movs	r3, #16
 800b3e8:	e02f      	b.n	800b44a <__gethex+0x3a2>
 800b3ea:	2401      	movs	r4, #1
 800b3ec:	e7d4      	b.n	800b398 <__gethex+0x2f0>
 800b3ee:	2601      	movs	r6, #1
 800b3f0:	e7e8      	b.n	800b3c4 <__gethex+0x31c>
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b3f6:	1a9b      	subs	r3, r3, r2
 800b3f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d0f2      	beq.n	800b3e6 <__gethex+0x33e>
 800b400:	692b      	ldr	r3, [r5, #16]
 800b402:	2000      	movs	r0, #0
 800b404:	9302      	str	r3, [sp, #8]
 800b406:	009b      	lsls	r3, r3, #2
 800b408:	9304      	str	r3, [sp, #16]
 800b40a:	002b      	movs	r3, r5
 800b40c:	9a04      	ldr	r2, [sp, #16]
 800b40e:	3314      	adds	r3, #20
 800b410:	1899      	adds	r1, r3, r2
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	1c54      	adds	r4, r2, #1
 800b416:	d01e      	beq.n	800b456 <__gethex+0x3ae>
 800b418:	3201      	adds	r2, #1
 800b41a:	601a      	str	r2, [r3, #0]
 800b41c:	002b      	movs	r3, r5
 800b41e:	3314      	adds	r3, #20
 800b420:	2e02      	cmp	r6, #2
 800b422:	d141      	bne.n	800b4a8 <__gethex+0x400>
 800b424:	9a01      	ldr	r2, [sp, #4]
 800b426:	9900      	ldr	r1, [sp, #0]
 800b428:	6812      	ldr	r2, [r2, #0]
 800b42a:	3a01      	subs	r2, #1
 800b42c:	428a      	cmp	r2, r1
 800b42e:	d10b      	bne.n	800b448 <__gethex+0x3a0>
 800b430:	221f      	movs	r2, #31
 800b432:	9800      	ldr	r0, [sp, #0]
 800b434:	1149      	asrs	r1, r1, #5
 800b436:	4002      	ands	r2, r0
 800b438:	2001      	movs	r0, #1
 800b43a:	0004      	movs	r4, r0
 800b43c:	4094      	lsls	r4, r2
 800b43e:	0089      	lsls	r1, r1, #2
 800b440:	58cb      	ldr	r3, [r1, r3]
 800b442:	4223      	tst	r3, r4
 800b444:	d000      	beq.n	800b448 <__gethex+0x3a0>
 800b446:	2601      	movs	r6, #1
 800b448:	2320      	movs	r3, #32
 800b44a:	431e      	orrs	r6, r3
 800b44c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b44e:	601d      	str	r5, [r3, #0]
 800b450:	9b07      	ldr	r3, [sp, #28]
 800b452:	601f      	str	r7, [r3, #0]
 800b454:	e6b1      	b.n	800b1ba <__gethex+0x112>
 800b456:	c301      	stmia	r3!, {r0}
 800b458:	4299      	cmp	r1, r3
 800b45a:	d8da      	bhi.n	800b412 <__gethex+0x36a>
 800b45c:	68ab      	ldr	r3, [r5, #8]
 800b45e:	9a02      	ldr	r2, [sp, #8]
 800b460:	429a      	cmp	r2, r3
 800b462:	db18      	blt.n	800b496 <__gethex+0x3ee>
 800b464:	6869      	ldr	r1, [r5, #4]
 800b466:	9803      	ldr	r0, [sp, #12]
 800b468:	3101      	adds	r1, #1
 800b46a:	f000 f921 	bl	800b6b0 <_Balloc>
 800b46e:	1e04      	subs	r4, r0, #0
 800b470:	d104      	bne.n	800b47c <__gethex+0x3d4>
 800b472:	0022      	movs	r2, r4
 800b474:	2184      	movs	r1, #132	; 0x84
 800b476:	4b1c      	ldr	r3, [pc, #112]	; (800b4e8 <__gethex+0x440>)
 800b478:	481c      	ldr	r0, [pc, #112]	; (800b4ec <__gethex+0x444>)
 800b47a:	e6c2      	b.n	800b202 <__gethex+0x15a>
 800b47c:	0029      	movs	r1, r5
 800b47e:	692a      	ldr	r2, [r5, #16]
 800b480:	310c      	adds	r1, #12
 800b482:	3202      	adds	r2, #2
 800b484:	0092      	lsls	r2, r2, #2
 800b486:	300c      	adds	r0, #12
 800b488:	f7ff fc77 	bl	800ad7a <memcpy>
 800b48c:	0029      	movs	r1, r5
 800b48e:	9803      	ldr	r0, [sp, #12]
 800b490:	f000 f936 	bl	800b700 <_Bfree>
 800b494:	0025      	movs	r5, r4
 800b496:	692b      	ldr	r3, [r5, #16]
 800b498:	1c5a      	adds	r2, r3, #1
 800b49a:	612a      	str	r2, [r5, #16]
 800b49c:	2201      	movs	r2, #1
 800b49e:	3304      	adds	r3, #4
 800b4a0:	009b      	lsls	r3, r3, #2
 800b4a2:	18eb      	adds	r3, r5, r3
 800b4a4:	605a      	str	r2, [r3, #4]
 800b4a6:	e7b9      	b.n	800b41c <__gethex+0x374>
 800b4a8:	692a      	ldr	r2, [r5, #16]
 800b4aa:	9902      	ldr	r1, [sp, #8]
 800b4ac:	428a      	cmp	r2, r1
 800b4ae:	dd09      	ble.n	800b4c4 <__gethex+0x41c>
 800b4b0:	2101      	movs	r1, #1
 800b4b2:	0028      	movs	r0, r5
 800b4b4:	f7ff fd8e 	bl	800afd4 <rshift>
 800b4b8:	9b01      	ldr	r3, [sp, #4]
 800b4ba:	3701      	adds	r7, #1
 800b4bc:	689b      	ldr	r3, [r3, #8]
 800b4be:	42bb      	cmp	r3, r7
 800b4c0:	dac1      	bge.n	800b446 <__gethex+0x39e>
 800b4c2:	e6e4      	b.n	800b28e <__gethex+0x1e6>
 800b4c4:	221f      	movs	r2, #31
 800b4c6:	9c00      	ldr	r4, [sp, #0]
 800b4c8:	9900      	ldr	r1, [sp, #0]
 800b4ca:	2601      	movs	r6, #1
 800b4cc:	4014      	ands	r4, r2
 800b4ce:	4211      	tst	r1, r2
 800b4d0:	d0ba      	beq.n	800b448 <__gethex+0x3a0>
 800b4d2:	9a04      	ldr	r2, [sp, #16]
 800b4d4:	189b      	adds	r3, r3, r2
 800b4d6:	3b04      	subs	r3, #4
 800b4d8:	6818      	ldr	r0, [r3, #0]
 800b4da:	f000 f9ab 	bl	800b834 <__hi0bits>
 800b4de:	2320      	movs	r3, #32
 800b4e0:	1b1b      	subs	r3, r3, r4
 800b4e2:	4298      	cmp	r0, r3
 800b4e4:	dbe4      	blt.n	800b4b0 <__gethex+0x408>
 800b4e6:	e7af      	b.n	800b448 <__gethex+0x3a0>
 800b4e8:	080131f1 	.word	0x080131f1
 800b4ec:	08013202 	.word	0x08013202

0800b4f0 <L_shift>:
 800b4f0:	2308      	movs	r3, #8
 800b4f2:	b570      	push	{r4, r5, r6, lr}
 800b4f4:	2520      	movs	r5, #32
 800b4f6:	1a9a      	subs	r2, r3, r2
 800b4f8:	0092      	lsls	r2, r2, #2
 800b4fa:	1aad      	subs	r5, r5, r2
 800b4fc:	6843      	ldr	r3, [r0, #4]
 800b4fe:	6804      	ldr	r4, [r0, #0]
 800b500:	001e      	movs	r6, r3
 800b502:	40ae      	lsls	r6, r5
 800b504:	40d3      	lsrs	r3, r2
 800b506:	4334      	orrs	r4, r6
 800b508:	6004      	str	r4, [r0, #0]
 800b50a:	6043      	str	r3, [r0, #4]
 800b50c:	3004      	adds	r0, #4
 800b50e:	4288      	cmp	r0, r1
 800b510:	d3f4      	bcc.n	800b4fc <L_shift+0xc>
 800b512:	bd70      	pop	{r4, r5, r6, pc}

0800b514 <__match>:
 800b514:	b530      	push	{r4, r5, lr}
 800b516:	6803      	ldr	r3, [r0, #0]
 800b518:	780c      	ldrb	r4, [r1, #0]
 800b51a:	3301      	adds	r3, #1
 800b51c:	2c00      	cmp	r4, #0
 800b51e:	d102      	bne.n	800b526 <__match+0x12>
 800b520:	6003      	str	r3, [r0, #0]
 800b522:	2001      	movs	r0, #1
 800b524:	bd30      	pop	{r4, r5, pc}
 800b526:	781a      	ldrb	r2, [r3, #0]
 800b528:	0015      	movs	r5, r2
 800b52a:	3d41      	subs	r5, #65	; 0x41
 800b52c:	2d19      	cmp	r5, #25
 800b52e:	d800      	bhi.n	800b532 <__match+0x1e>
 800b530:	3220      	adds	r2, #32
 800b532:	3101      	adds	r1, #1
 800b534:	42a2      	cmp	r2, r4
 800b536:	d0ef      	beq.n	800b518 <__match+0x4>
 800b538:	2000      	movs	r0, #0
 800b53a:	e7f3      	b.n	800b524 <__match+0x10>

0800b53c <__hexnan>:
 800b53c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b53e:	680b      	ldr	r3, [r1, #0]
 800b540:	b08b      	sub	sp, #44	; 0x2c
 800b542:	9201      	str	r2, [sp, #4]
 800b544:	9901      	ldr	r1, [sp, #4]
 800b546:	115a      	asrs	r2, r3, #5
 800b548:	0092      	lsls	r2, r2, #2
 800b54a:	188a      	adds	r2, r1, r2
 800b54c:	9202      	str	r2, [sp, #8]
 800b54e:	0019      	movs	r1, r3
 800b550:	221f      	movs	r2, #31
 800b552:	4011      	ands	r1, r2
 800b554:	9008      	str	r0, [sp, #32]
 800b556:	9106      	str	r1, [sp, #24]
 800b558:	4213      	tst	r3, r2
 800b55a:	d002      	beq.n	800b562 <__hexnan+0x26>
 800b55c:	9b02      	ldr	r3, [sp, #8]
 800b55e:	3304      	adds	r3, #4
 800b560:	9302      	str	r3, [sp, #8]
 800b562:	9b02      	ldr	r3, [sp, #8]
 800b564:	2500      	movs	r5, #0
 800b566:	1f1f      	subs	r7, r3, #4
 800b568:	003e      	movs	r6, r7
 800b56a:	003c      	movs	r4, r7
 800b56c:	9b08      	ldr	r3, [sp, #32]
 800b56e:	603d      	str	r5, [r7, #0]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	9507      	str	r5, [sp, #28]
 800b574:	9305      	str	r3, [sp, #20]
 800b576:	9503      	str	r5, [sp, #12]
 800b578:	9b05      	ldr	r3, [sp, #20]
 800b57a:	3301      	adds	r3, #1
 800b57c:	9309      	str	r3, [sp, #36]	; 0x24
 800b57e:	9b05      	ldr	r3, [sp, #20]
 800b580:	785b      	ldrb	r3, [r3, #1]
 800b582:	9304      	str	r3, [sp, #16]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d028      	beq.n	800b5da <__hexnan+0x9e>
 800b588:	9804      	ldr	r0, [sp, #16]
 800b58a:	f7ff fd78 	bl	800b07e <__hexdig_fun>
 800b58e:	2800      	cmp	r0, #0
 800b590:	d154      	bne.n	800b63c <__hexnan+0x100>
 800b592:	9b04      	ldr	r3, [sp, #16]
 800b594:	2b20      	cmp	r3, #32
 800b596:	d819      	bhi.n	800b5cc <__hexnan+0x90>
 800b598:	9b03      	ldr	r3, [sp, #12]
 800b59a:	9a07      	ldr	r2, [sp, #28]
 800b59c:	4293      	cmp	r3, r2
 800b59e:	dd12      	ble.n	800b5c6 <__hexnan+0x8a>
 800b5a0:	42b4      	cmp	r4, r6
 800b5a2:	d206      	bcs.n	800b5b2 <__hexnan+0x76>
 800b5a4:	2d07      	cmp	r5, #7
 800b5a6:	dc04      	bgt.n	800b5b2 <__hexnan+0x76>
 800b5a8:	002a      	movs	r2, r5
 800b5aa:	0031      	movs	r1, r6
 800b5ac:	0020      	movs	r0, r4
 800b5ae:	f7ff ff9f 	bl	800b4f0 <L_shift>
 800b5b2:	9b01      	ldr	r3, [sp, #4]
 800b5b4:	2508      	movs	r5, #8
 800b5b6:	429c      	cmp	r4, r3
 800b5b8:	d905      	bls.n	800b5c6 <__hexnan+0x8a>
 800b5ba:	1f26      	subs	r6, r4, #4
 800b5bc:	2500      	movs	r5, #0
 800b5be:	0034      	movs	r4, r6
 800b5c0:	9b03      	ldr	r3, [sp, #12]
 800b5c2:	6035      	str	r5, [r6, #0]
 800b5c4:	9307      	str	r3, [sp, #28]
 800b5c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5c8:	9305      	str	r3, [sp, #20]
 800b5ca:	e7d5      	b.n	800b578 <__hexnan+0x3c>
 800b5cc:	9b04      	ldr	r3, [sp, #16]
 800b5ce:	2b29      	cmp	r3, #41	; 0x29
 800b5d0:	d159      	bne.n	800b686 <__hexnan+0x14a>
 800b5d2:	9b05      	ldr	r3, [sp, #20]
 800b5d4:	9a08      	ldr	r2, [sp, #32]
 800b5d6:	3302      	adds	r3, #2
 800b5d8:	6013      	str	r3, [r2, #0]
 800b5da:	9b03      	ldr	r3, [sp, #12]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d052      	beq.n	800b686 <__hexnan+0x14a>
 800b5e0:	42b4      	cmp	r4, r6
 800b5e2:	d206      	bcs.n	800b5f2 <__hexnan+0xb6>
 800b5e4:	2d07      	cmp	r5, #7
 800b5e6:	dc04      	bgt.n	800b5f2 <__hexnan+0xb6>
 800b5e8:	002a      	movs	r2, r5
 800b5ea:	0031      	movs	r1, r6
 800b5ec:	0020      	movs	r0, r4
 800b5ee:	f7ff ff7f 	bl	800b4f0 <L_shift>
 800b5f2:	9b01      	ldr	r3, [sp, #4]
 800b5f4:	429c      	cmp	r4, r3
 800b5f6:	d935      	bls.n	800b664 <__hexnan+0x128>
 800b5f8:	001a      	movs	r2, r3
 800b5fa:	0023      	movs	r3, r4
 800b5fc:	cb02      	ldmia	r3!, {r1}
 800b5fe:	c202      	stmia	r2!, {r1}
 800b600:	429f      	cmp	r7, r3
 800b602:	d2fb      	bcs.n	800b5fc <__hexnan+0xc0>
 800b604:	9b02      	ldr	r3, [sp, #8]
 800b606:	1c62      	adds	r2, r4, #1
 800b608:	1ed9      	subs	r1, r3, #3
 800b60a:	2304      	movs	r3, #4
 800b60c:	4291      	cmp	r1, r2
 800b60e:	d305      	bcc.n	800b61c <__hexnan+0xe0>
 800b610:	9b02      	ldr	r3, [sp, #8]
 800b612:	3b04      	subs	r3, #4
 800b614:	1b1b      	subs	r3, r3, r4
 800b616:	089b      	lsrs	r3, r3, #2
 800b618:	3301      	adds	r3, #1
 800b61a:	009b      	lsls	r3, r3, #2
 800b61c:	9a01      	ldr	r2, [sp, #4]
 800b61e:	18d3      	adds	r3, r2, r3
 800b620:	2200      	movs	r2, #0
 800b622:	c304      	stmia	r3!, {r2}
 800b624:	429f      	cmp	r7, r3
 800b626:	d2fc      	bcs.n	800b622 <__hexnan+0xe6>
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d104      	bne.n	800b638 <__hexnan+0xfc>
 800b62e:	9b01      	ldr	r3, [sp, #4]
 800b630:	429f      	cmp	r7, r3
 800b632:	d126      	bne.n	800b682 <__hexnan+0x146>
 800b634:	2301      	movs	r3, #1
 800b636:	603b      	str	r3, [r7, #0]
 800b638:	2005      	movs	r0, #5
 800b63a:	e025      	b.n	800b688 <__hexnan+0x14c>
 800b63c:	9b03      	ldr	r3, [sp, #12]
 800b63e:	3501      	adds	r5, #1
 800b640:	3301      	adds	r3, #1
 800b642:	9303      	str	r3, [sp, #12]
 800b644:	2d08      	cmp	r5, #8
 800b646:	dd06      	ble.n	800b656 <__hexnan+0x11a>
 800b648:	9b01      	ldr	r3, [sp, #4]
 800b64a:	429c      	cmp	r4, r3
 800b64c:	d9bb      	bls.n	800b5c6 <__hexnan+0x8a>
 800b64e:	2300      	movs	r3, #0
 800b650:	2501      	movs	r5, #1
 800b652:	3c04      	subs	r4, #4
 800b654:	6023      	str	r3, [r4, #0]
 800b656:	220f      	movs	r2, #15
 800b658:	6823      	ldr	r3, [r4, #0]
 800b65a:	4010      	ands	r0, r2
 800b65c:	011b      	lsls	r3, r3, #4
 800b65e:	4303      	orrs	r3, r0
 800b660:	6023      	str	r3, [r4, #0]
 800b662:	e7b0      	b.n	800b5c6 <__hexnan+0x8a>
 800b664:	9b06      	ldr	r3, [sp, #24]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d0de      	beq.n	800b628 <__hexnan+0xec>
 800b66a:	2320      	movs	r3, #32
 800b66c:	9a06      	ldr	r2, [sp, #24]
 800b66e:	9902      	ldr	r1, [sp, #8]
 800b670:	1a9b      	subs	r3, r3, r2
 800b672:	2201      	movs	r2, #1
 800b674:	4252      	negs	r2, r2
 800b676:	40da      	lsrs	r2, r3
 800b678:	3904      	subs	r1, #4
 800b67a:	680b      	ldr	r3, [r1, #0]
 800b67c:	4013      	ands	r3, r2
 800b67e:	600b      	str	r3, [r1, #0]
 800b680:	e7d2      	b.n	800b628 <__hexnan+0xec>
 800b682:	3f04      	subs	r7, #4
 800b684:	e7d0      	b.n	800b628 <__hexnan+0xec>
 800b686:	2004      	movs	r0, #4
 800b688:	b00b      	add	sp, #44	; 0x2c
 800b68a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b68c <__ascii_mbtowc>:
 800b68c:	b082      	sub	sp, #8
 800b68e:	2900      	cmp	r1, #0
 800b690:	d100      	bne.n	800b694 <__ascii_mbtowc+0x8>
 800b692:	a901      	add	r1, sp, #4
 800b694:	1e10      	subs	r0, r2, #0
 800b696:	d006      	beq.n	800b6a6 <__ascii_mbtowc+0x1a>
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d006      	beq.n	800b6aa <__ascii_mbtowc+0x1e>
 800b69c:	7813      	ldrb	r3, [r2, #0]
 800b69e:	600b      	str	r3, [r1, #0]
 800b6a0:	7810      	ldrb	r0, [r2, #0]
 800b6a2:	1e43      	subs	r3, r0, #1
 800b6a4:	4198      	sbcs	r0, r3
 800b6a6:	b002      	add	sp, #8
 800b6a8:	4770      	bx	lr
 800b6aa:	2002      	movs	r0, #2
 800b6ac:	4240      	negs	r0, r0
 800b6ae:	e7fa      	b.n	800b6a6 <__ascii_mbtowc+0x1a>

0800b6b0 <_Balloc>:
 800b6b0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b6b2:	b570      	push	{r4, r5, r6, lr}
 800b6b4:	0006      	movs	r6, r0
 800b6b6:	000c      	movs	r4, r1
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d012      	beq.n	800b6e2 <_Balloc+0x32>
 800b6bc:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800b6be:	00a2      	lsls	r2, r4, #2
 800b6c0:	189b      	adds	r3, r3, r2
 800b6c2:	6818      	ldr	r0, [r3, #0]
 800b6c4:	2800      	cmp	r0, #0
 800b6c6:	d115      	bne.n	800b6f4 <_Balloc+0x44>
 800b6c8:	2101      	movs	r1, #1
 800b6ca:	000d      	movs	r5, r1
 800b6cc:	40a5      	lsls	r5, r4
 800b6ce:	1d6a      	adds	r2, r5, #5
 800b6d0:	0030      	movs	r0, r6
 800b6d2:	0092      	lsls	r2, r2, #2
 800b6d4:	f003 face 	bl	800ec74 <_calloc_r>
 800b6d8:	2800      	cmp	r0, #0
 800b6da:	d009      	beq.n	800b6f0 <_Balloc+0x40>
 800b6dc:	6044      	str	r4, [r0, #4]
 800b6de:	6085      	str	r5, [r0, #8]
 800b6e0:	e00a      	b.n	800b6f8 <_Balloc+0x48>
 800b6e2:	2221      	movs	r2, #33	; 0x21
 800b6e4:	2104      	movs	r1, #4
 800b6e6:	f003 fac5 	bl	800ec74 <_calloc_r>
 800b6ea:	6470      	str	r0, [r6, #68]	; 0x44
 800b6ec:	2800      	cmp	r0, #0
 800b6ee:	d1e5      	bne.n	800b6bc <_Balloc+0xc>
 800b6f0:	2000      	movs	r0, #0
 800b6f2:	bd70      	pop	{r4, r5, r6, pc}
 800b6f4:	6802      	ldr	r2, [r0, #0]
 800b6f6:	601a      	str	r2, [r3, #0]
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	6103      	str	r3, [r0, #16]
 800b6fc:	60c3      	str	r3, [r0, #12]
 800b6fe:	e7f8      	b.n	800b6f2 <_Balloc+0x42>

0800b700 <_Bfree>:
 800b700:	2900      	cmp	r1, #0
 800b702:	d006      	beq.n	800b712 <_Bfree+0x12>
 800b704:	684a      	ldr	r2, [r1, #4]
 800b706:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b708:	0092      	lsls	r2, r2, #2
 800b70a:	189b      	adds	r3, r3, r2
 800b70c:	681a      	ldr	r2, [r3, #0]
 800b70e:	600a      	str	r2, [r1, #0]
 800b710:	6019      	str	r1, [r3, #0]
 800b712:	4770      	bx	lr

0800b714 <__multadd>:
 800b714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b716:	000e      	movs	r6, r1
 800b718:	9001      	str	r0, [sp, #4]
 800b71a:	000c      	movs	r4, r1
 800b71c:	001d      	movs	r5, r3
 800b71e:	2000      	movs	r0, #0
 800b720:	690f      	ldr	r7, [r1, #16]
 800b722:	3614      	adds	r6, #20
 800b724:	6833      	ldr	r3, [r6, #0]
 800b726:	3001      	adds	r0, #1
 800b728:	b299      	uxth	r1, r3
 800b72a:	4351      	muls	r1, r2
 800b72c:	0c1b      	lsrs	r3, r3, #16
 800b72e:	4353      	muls	r3, r2
 800b730:	1949      	adds	r1, r1, r5
 800b732:	0c0d      	lsrs	r5, r1, #16
 800b734:	195b      	adds	r3, r3, r5
 800b736:	0c1d      	lsrs	r5, r3, #16
 800b738:	b289      	uxth	r1, r1
 800b73a:	041b      	lsls	r3, r3, #16
 800b73c:	185b      	adds	r3, r3, r1
 800b73e:	c608      	stmia	r6!, {r3}
 800b740:	4287      	cmp	r7, r0
 800b742:	dcef      	bgt.n	800b724 <__multadd+0x10>
 800b744:	2d00      	cmp	r5, #0
 800b746:	d022      	beq.n	800b78e <__multadd+0x7a>
 800b748:	68a3      	ldr	r3, [r4, #8]
 800b74a:	42bb      	cmp	r3, r7
 800b74c:	dc19      	bgt.n	800b782 <__multadd+0x6e>
 800b74e:	6861      	ldr	r1, [r4, #4]
 800b750:	9801      	ldr	r0, [sp, #4]
 800b752:	3101      	adds	r1, #1
 800b754:	f7ff ffac 	bl	800b6b0 <_Balloc>
 800b758:	1e06      	subs	r6, r0, #0
 800b75a:	d105      	bne.n	800b768 <__multadd+0x54>
 800b75c:	0032      	movs	r2, r6
 800b75e:	21ba      	movs	r1, #186	; 0xba
 800b760:	4b0c      	ldr	r3, [pc, #48]	; (800b794 <__multadd+0x80>)
 800b762:	480d      	ldr	r0, [pc, #52]	; (800b798 <__multadd+0x84>)
 800b764:	f003 fa68 	bl	800ec38 <__assert_func>
 800b768:	0021      	movs	r1, r4
 800b76a:	6922      	ldr	r2, [r4, #16]
 800b76c:	310c      	adds	r1, #12
 800b76e:	3202      	adds	r2, #2
 800b770:	0092      	lsls	r2, r2, #2
 800b772:	300c      	adds	r0, #12
 800b774:	f7ff fb01 	bl	800ad7a <memcpy>
 800b778:	0021      	movs	r1, r4
 800b77a:	9801      	ldr	r0, [sp, #4]
 800b77c:	f7ff ffc0 	bl	800b700 <_Bfree>
 800b780:	0034      	movs	r4, r6
 800b782:	1d3b      	adds	r3, r7, #4
 800b784:	009b      	lsls	r3, r3, #2
 800b786:	18e3      	adds	r3, r4, r3
 800b788:	605d      	str	r5, [r3, #4]
 800b78a:	1c7b      	adds	r3, r7, #1
 800b78c:	6123      	str	r3, [r4, #16]
 800b78e:	0020      	movs	r0, r4
 800b790:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b792:	46c0      	nop			; (mov r8, r8)
 800b794:	080131f1 	.word	0x080131f1
 800b798:	08013262 	.word	0x08013262

0800b79c <__s2b>:
 800b79c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b79e:	0006      	movs	r6, r0
 800b7a0:	0018      	movs	r0, r3
 800b7a2:	000c      	movs	r4, r1
 800b7a4:	3008      	adds	r0, #8
 800b7a6:	2109      	movs	r1, #9
 800b7a8:	9301      	str	r3, [sp, #4]
 800b7aa:	0015      	movs	r5, r2
 800b7ac:	f7f4 fd50 	bl	8000250 <__divsi3>
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	2100      	movs	r1, #0
 800b7b4:	4283      	cmp	r3, r0
 800b7b6:	db0a      	blt.n	800b7ce <__s2b+0x32>
 800b7b8:	0030      	movs	r0, r6
 800b7ba:	f7ff ff79 	bl	800b6b0 <_Balloc>
 800b7be:	1e01      	subs	r1, r0, #0
 800b7c0:	d108      	bne.n	800b7d4 <__s2b+0x38>
 800b7c2:	000a      	movs	r2, r1
 800b7c4:	4b19      	ldr	r3, [pc, #100]	; (800b82c <__s2b+0x90>)
 800b7c6:	481a      	ldr	r0, [pc, #104]	; (800b830 <__s2b+0x94>)
 800b7c8:	31d3      	adds	r1, #211	; 0xd3
 800b7ca:	f003 fa35 	bl	800ec38 <__assert_func>
 800b7ce:	005b      	lsls	r3, r3, #1
 800b7d0:	3101      	adds	r1, #1
 800b7d2:	e7ef      	b.n	800b7b4 <__s2b+0x18>
 800b7d4:	9b08      	ldr	r3, [sp, #32]
 800b7d6:	6143      	str	r3, [r0, #20]
 800b7d8:	2301      	movs	r3, #1
 800b7da:	6103      	str	r3, [r0, #16]
 800b7dc:	2d09      	cmp	r5, #9
 800b7de:	dd18      	ble.n	800b812 <__s2b+0x76>
 800b7e0:	0023      	movs	r3, r4
 800b7e2:	3309      	adds	r3, #9
 800b7e4:	001f      	movs	r7, r3
 800b7e6:	9300      	str	r3, [sp, #0]
 800b7e8:	1964      	adds	r4, r4, r5
 800b7ea:	783b      	ldrb	r3, [r7, #0]
 800b7ec:	220a      	movs	r2, #10
 800b7ee:	0030      	movs	r0, r6
 800b7f0:	3b30      	subs	r3, #48	; 0x30
 800b7f2:	f7ff ff8f 	bl	800b714 <__multadd>
 800b7f6:	3701      	adds	r7, #1
 800b7f8:	0001      	movs	r1, r0
 800b7fa:	42a7      	cmp	r7, r4
 800b7fc:	d1f5      	bne.n	800b7ea <__s2b+0x4e>
 800b7fe:	002c      	movs	r4, r5
 800b800:	9b00      	ldr	r3, [sp, #0]
 800b802:	3c08      	subs	r4, #8
 800b804:	191c      	adds	r4, r3, r4
 800b806:	002f      	movs	r7, r5
 800b808:	9b01      	ldr	r3, [sp, #4]
 800b80a:	429f      	cmp	r7, r3
 800b80c:	db04      	blt.n	800b818 <__s2b+0x7c>
 800b80e:	0008      	movs	r0, r1
 800b810:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b812:	2509      	movs	r5, #9
 800b814:	340a      	adds	r4, #10
 800b816:	e7f6      	b.n	800b806 <__s2b+0x6a>
 800b818:	1b63      	subs	r3, r4, r5
 800b81a:	5ddb      	ldrb	r3, [r3, r7]
 800b81c:	220a      	movs	r2, #10
 800b81e:	0030      	movs	r0, r6
 800b820:	3b30      	subs	r3, #48	; 0x30
 800b822:	f7ff ff77 	bl	800b714 <__multadd>
 800b826:	3701      	adds	r7, #1
 800b828:	0001      	movs	r1, r0
 800b82a:	e7ed      	b.n	800b808 <__s2b+0x6c>
 800b82c:	080131f1 	.word	0x080131f1
 800b830:	08013262 	.word	0x08013262

0800b834 <__hi0bits>:
 800b834:	0003      	movs	r3, r0
 800b836:	0c02      	lsrs	r2, r0, #16
 800b838:	2000      	movs	r0, #0
 800b83a:	4282      	cmp	r2, r0
 800b83c:	d101      	bne.n	800b842 <__hi0bits+0xe>
 800b83e:	041b      	lsls	r3, r3, #16
 800b840:	3010      	adds	r0, #16
 800b842:	0e1a      	lsrs	r2, r3, #24
 800b844:	d101      	bne.n	800b84a <__hi0bits+0x16>
 800b846:	3008      	adds	r0, #8
 800b848:	021b      	lsls	r3, r3, #8
 800b84a:	0f1a      	lsrs	r2, r3, #28
 800b84c:	d101      	bne.n	800b852 <__hi0bits+0x1e>
 800b84e:	3004      	adds	r0, #4
 800b850:	011b      	lsls	r3, r3, #4
 800b852:	0f9a      	lsrs	r2, r3, #30
 800b854:	d101      	bne.n	800b85a <__hi0bits+0x26>
 800b856:	3002      	adds	r0, #2
 800b858:	009b      	lsls	r3, r3, #2
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	db03      	blt.n	800b866 <__hi0bits+0x32>
 800b85e:	3001      	adds	r0, #1
 800b860:	005b      	lsls	r3, r3, #1
 800b862:	d400      	bmi.n	800b866 <__hi0bits+0x32>
 800b864:	2020      	movs	r0, #32
 800b866:	4770      	bx	lr

0800b868 <__lo0bits>:
 800b868:	6803      	ldr	r3, [r0, #0]
 800b86a:	0001      	movs	r1, r0
 800b86c:	2207      	movs	r2, #7
 800b86e:	0018      	movs	r0, r3
 800b870:	4010      	ands	r0, r2
 800b872:	4213      	tst	r3, r2
 800b874:	d00d      	beq.n	800b892 <__lo0bits+0x2a>
 800b876:	3a06      	subs	r2, #6
 800b878:	2000      	movs	r0, #0
 800b87a:	4213      	tst	r3, r2
 800b87c:	d105      	bne.n	800b88a <__lo0bits+0x22>
 800b87e:	3002      	adds	r0, #2
 800b880:	4203      	tst	r3, r0
 800b882:	d003      	beq.n	800b88c <__lo0bits+0x24>
 800b884:	40d3      	lsrs	r3, r2
 800b886:	0010      	movs	r0, r2
 800b888:	600b      	str	r3, [r1, #0]
 800b88a:	4770      	bx	lr
 800b88c:	089b      	lsrs	r3, r3, #2
 800b88e:	600b      	str	r3, [r1, #0]
 800b890:	e7fb      	b.n	800b88a <__lo0bits+0x22>
 800b892:	b29a      	uxth	r2, r3
 800b894:	2a00      	cmp	r2, #0
 800b896:	d101      	bne.n	800b89c <__lo0bits+0x34>
 800b898:	2010      	movs	r0, #16
 800b89a:	0c1b      	lsrs	r3, r3, #16
 800b89c:	b2da      	uxtb	r2, r3
 800b89e:	2a00      	cmp	r2, #0
 800b8a0:	d101      	bne.n	800b8a6 <__lo0bits+0x3e>
 800b8a2:	3008      	adds	r0, #8
 800b8a4:	0a1b      	lsrs	r3, r3, #8
 800b8a6:	071a      	lsls	r2, r3, #28
 800b8a8:	d101      	bne.n	800b8ae <__lo0bits+0x46>
 800b8aa:	3004      	adds	r0, #4
 800b8ac:	091b      	lsrs	r3, r3, #4
 800b8ae:	079a      	lsls	r2, r3, #30
 800b8b0:	d101      	bne.n	800b8b6 <__lo0bits+0x4e>
 800b8b2:	3002      	adds	r0, #2
 800b8b4:	089b      	lsrs	r3, r3, #2
 800b8b6:	07da      	lsls	r2, r3, #31
 800b8b8:	d4e9      	bmi.n	800b88e <__lo0bits+0x26>
 800b8ba:	3001      	adds	r0, #1
 800b8bc:	085b      	lsrs	r3, r3, #1
 800b8be:	d1e6      	bne.n	800b88e <__lo0bits+0x26>
 800b8c0:	2020      	movs	r0, #32
 800b8c2:	e7e2      	b.n	800b88a <__lo0bits+0x22>

0800b8c4 <__i2b>:
 800b8c4:	b510      	push	{r4, lr}
 800b8c6:	000c      	movs	r4, r1
 800b8c8:	2101      	movs	r1, #1
 800b8ca:	f7ff fef1 	bl	800b6b0 <_Balloc>
 800b8ce:	2800      	cmp	r0, #0
 800b8d0:	d107      	bne.n	800b8e2 <__i2b+0x1e>
 800b8d2:	2146      	movs	r1, #70	; 0x46
 800b8d4:	4c05      	ldr	r4, [pc, #20]	; (800b8ec <__i2b+0x28>)
 800b8d6:	0002      	movs	r2, r0
 800b8d8:	4b05      	ldr	r3, [pc, #20]	; (800b8f0 <__i2b+0x2c>)
 800b8da:	0020      	movs	r0, r4
 800b8dc:	31ff      	adds	r1, #255	; 0xff
 800b8de:	f003 f9ab 	bl	800ec38 <__assert_func>
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	6144      	str	r4, [r0, #20]
 800b8e6:	6103      	str	r3, [r0, #16]
 800b8e8:	bd10      	pop	{r4, pc}
 800b8ea:	46c0      	nop			; (mov r8, r8)
 800b8ec:	08013262 	.word	0x08013262
 800b8f0:	080131f1 	.word	0x080131f1

0800b8f4 <__multiply>:
 800b8f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8f6:	0015      	movs	r5, r2
 800b8f8:	690a      	ldr	r2, [r1, #16]
 800b8fa:	692b      	ldr	r3, [r5, #16]
 800b8fc:	000c      	movs	r4, r1
 800b8fe:	b08b      	sub	sp, #44	; 0x2c
 800b900:	429a      	cmp	r2, r3
 800b902:	da01      	bge.n	800b908 <__multiply+0x14>
 800b904:	002c      	movs	r4, r5
 800b906:	000d      	movs	r5, r1
 800b908:	6927      	ldr	r7, [r4, #16]
 800b90a:	692e      	ldr	r6, [r5, #16]
 800b90c:	6861      	ldr	r1, [r4, #4]
 800b90e:	19bb      	adds	r3, r7, r6
 800b910:	9303      	str	r3, [sp, #12]
 800b912:	68a3      	ldr	r3, [r4, #8]
 800b914:	19ba      	adds	r2, r7, r6
 800b916:	4293      	cmp	r3, r2
 800b918:	da00      	bge.n	800b91c <__multiply+0x28>
 800b91a:	3101      	adds	r1, #1
 800b91c:	f7ff fec8 	bl	800b6b0 <_Balloc>
 800b920:	9002      	str	r0, [sp, #8]
 800b922:	2800      	cmp	r0, #0
 800b924:	d106      	bne.n	800b934 <__multiply+0x40>
 800b926:	21b1      	movs	r1, #177	; 0xb1
 800b928:	4b48      	ldr	r3, [pc, #288]	; (800ba4c <__multiply+0x158>)
 800b92a:	4849      	ldr	r0, [pc, #292]	; (800ba50 <__multiply+0x15c>)
 800b92c:	9a02      	ldr	r2, [sp, #8]
 800b92e:	0049      	lsls	r1, r1, #1
 800b930:	f003 f982 	bl	800ec38 <__assert_func>
 800b934:	9b02      	ldr	r3, [sp, #8]
 800b936:	2200      	movs	r2, #0
 800b938:	3314      	adds	r3, #20
 800b93a:	469c      	mov	ip, r3
 800b93c:	19bb      	adds	r3, r7, r6
 800b93e:	009b      	lsls	r3, r3, #2
 800b940:	4463      	add	r3, ip
 800b942:	9304      	str	r3, [sp, #16]
 800b944:	4663      	mov	r3, ip
 800b946:	9904      	ldr	r1, [sp, #16]
 800b948:	428b      	cmp	r3, r1
 800b94a:	d32a      	bcc.n	800b9a2 <__multiply+0xae>
 800b94c:	0023      	movs	r3, r4
 800b94e:	00bf      	lsls	r7, r7, #2
 800b950:	3314      	adds	r3, #20
 800b952:	3514      	adds	r5, #20
 800b954:	9308      	str	r3, [sp, #32]
 800b956:	00b6      	lsls	r6, r6, #2
 800b958:	19db      	adds	r3, r3, r7
 800b95a:	9305      	str	r3, [sp, #20]
 800b95c:	19ab      	adds	r3, r5, r6
 800b95e:	9309      	str	r3, [sp, #36]	; 0x24
 800b960:	2304      	movs	r3, #4
 800b962:	9306      	str	r3, [sp, #24]
 800b964:	0023      	movs	r3, r4
 800b966:	9a05      	ldr	r2, [sp, #20]
 800b968:	3315      	adds	r3, #21
 800b96a:	9501      	str	r5, [sp, #4]
 800b96c:	429a      	cmp	r2, r3
 800b96e:	d305      	bcc.n	800b97c <__multiply+0x88>
 800b970:	1b13      	subs	r3, r2, r4
 800b972:	3b15      	subs	r3, #21
 800b974:	089b      	lsrs	r3, r3, #2
 800b976:	3301      	adds	r3, #1
 800b978:	009b      	lsls	r3, r3, #2
 800b97a:	9306      	str	r3, [sp, #24]
 800b97c:	9b01      	ldr	r3, [sp, #4]
 800b97e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b980:	4293      	cmp	r3, r2
 800b982:	d310      	bcc.n	800b9a6 <__multiply+0xb2>
 800b984:	9b03      	ldr	r3, [sp, #12]
 800b986:	2b00      	cmp	r3, #0
 800b988:	dd05      	ble.n	800b996 <__multiply+0xa2>
 800b98a:	9b04      	ldr	r3, [sp, #16]
 800b98c:	3b04      	subs	r3, #4
 800b98e:	9304      	str	r3, [sp, #16]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d056      	beq.n	800ba44 <__multiply+0x150>
 800b996:	9b02      	ldr	r3, [sp, #8]
 800b998:	9a03      	ldr	r2, [sp, #12]
 800b99a:	0018      	movs	r0, r3
 800b99c:	611a      	str	r2, [r3, #16]
 800b99e:	b00b      	add	sp, #44	; 0x2c
 800b9a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9a2:	c304      	stmia	r3!, {r2}
 800b9a4:	e7cf      	b.n	800b946 <__multiply+0x52>
 800b9a6:	9b01      	ldr	r3, [sp, #4]
 800b9a8:	6818      	ldr	r0, [r3, #0]
 800b9aa:	b280      	uxth	r0, r0
 800b9ac:	2800      	cmp	r0, #0
 800b9ae:	d01e      	beq.n	800b9ee <__multiply+0xfa>
 800b9b0:	4667      	mov	r7, ip
 800b9b2:	2500      	movs	r5, #0
 800b9b4:	9e08      	ldr	r6, [sp, #32]
 800b9b6:	ce02      	ldmia	r6!, {r1}
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	9307      	str	r3, [sp, #28]
 800b9bc:	b28b      	uxth	r3, r1
 800b9be:	4343      	muls	r3, r0
 800b9c0:	001a      	movs	r2, r3
 800b9c2:	466b      	mov	r3, sp
 800b9c4:	8b9b      	ldrh	r3, [r3, #28]
 800b9c6:	18d3      	adds	r3, r2, r3
 800b9c8:	195b      	adds	r3, r3, r5
 800b9ca:	0c0d      	lsrs	r5, r1, #16
 800b9cc:	4345      	muls	r5, r0
 800b9ce:	9a07      	ldr	r2, [sp, #28]
 800b9d0:	0c11      	lsrs	r1, r2, #16
 800b9d2:	1869      	adds	r1, r5, r1
 800b9d4:	0c1a      	lsrs	r2, r3, #16
 800b9d6:	188a      	adds	r2, r1, r2
 800b9d8:	b29b      	uxth	r3, r3
 800b9da:	0c15      	lsrs	r5, r2, #16
 800b9dc:	0412      	lsls	r2, r2, #16
 800b9de:	431a      	orrs	r2, r3
 800b9e0:	9b05      	ldr	r3, [sp, #20]
 800b9e2:	c704      	stmia	r7!, {r2}
 800b9e4:	42b3      	cmp	r3, r6
 800b9e6:	d8e6      	bhi.n	800b9b6 <__multiply+0xc2>
 800b9e8:	4663      	mov	r3, ip
 800b9ea:	9a06      	ldr	r2, [sp, #24]
 800b9ec:	509d      	str	r5, [r3, r2]
 800b9ee:	9b01      	ldr	r3, [sp, #4]
 800b9f0:	6818      	ldr	r0, [r3, #0]
 800b9f2:	0c00      	lsrs	r0, r0, #16
 800b9f4:	d020      	beq.n	800ba38 <__multiply+0x144>
 800b9f6:	4663      	mov	r3, ip
 800b9f8:	0025      	movs	r5, r4
 800b9fa:	4661      	mov	r1, ip
 800b9fc:	2700      	movs	r7, #0
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	3514      	adds	r5, #20
 800ba02:	682a      	ldr	r2, [r5, #0]
 800ba04:	680e      	ldr	r6, [r1, #0]
 800ba06:	b292      	uxth	r2, r2
 800ba08:	4342      	muls	r2, r0
 800ba0a:	0c36      	lsrs	r6, r6, #16
 800ba0c:	1992      	adds	r2, r2, r6
 800ba0e:	19d2      	adds	r2, r2, r7
 800ba10:	0416      	lsls	r6, r2, #16
 800ba12:	b29b      	uxth	r3, r3
 800ba14:	431e      	orrs	r6, r3
 800ba16:	600e      	str	r6, [r1, #0]
 800ba18:	cd40      	ldmia	r5!, {r6}
 800ba1a:	684b      	ldr	r3, [r1, #4]
 800ba1c:	0c36      	lsrs	r6, r6, #16
 800ba1e:	4346      	muls	r6, r0
 800ba20:	b29b      	uxth	r3, r3
 800ba22:	0c12      	lsrs	r2, r2, #16
 800ba24:	18f3      	adds	r3, r6, r3
 800ba26:	189b      	adds	r3, r3, r2
 800ba28:	9a05      	ldr	r2, [sp, #20]
 800ba2a:	0c1f      	lsrs	r7, r3, #16
 800ba2c:	3104      	adds	r1, #4
 800ba2e:	42aa      	cmp	r2, r5
 800ba30:	d8e7      	bhi.n	800ba02 <__multiply+0x10e>
 800ba32:	4662      	mov	r2, ip
 800ba34:	9906      	ldr	r1, [sp, #24]
 800ba36:	5053      	str	r3, [r2, r1]
 800ba38:	9b01      	ldr	r3, [sp, #4]
 800ba3a:	3304      	adds	r3, #4
 800ba3c:	9301      	str	r3, [sp, #4]
 800ba3e:	2304      	movs	r3, #4
 800ba40:	449c      	add	ip, r3
 800ba42:	e79b      	b.n	800b97c <__multiply+0x88>
 800ba44:	9b03      	ldr	r3, [sp, #12]
 800ba46:	3b01      	subs	r3, #1
 800ba48:	9303      	str	r3, [sp, #12]
 800ba4a:	e79b      	b.n	800b984 <__multiply+0x90>
 800ba4c:	080131f1 	.word	0x080131f1
 800ba50:	08013262 	.word	0x08013262

0800ba54 <__pow5mult>:
 800ba54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba56:	2303      	movs	r3, #3
 800ba58:	0015      	movs	r5, r2
 800ba5a:	0007      	movs	r7, r0
 800ba5c:	000e      	movs	r6, r1
 800ba5e:	401a      	ands	r2, r3
 800ba60:	421d      	tst	r5, r3
 800ba62:	d008      	beq.n	800ba76 <__pow5mult+0x22>
 800ba64:	491a      	ldr	r1, [pc, #104]	; (800bad0 <__pow5mult+0x7c>)
 800ba66:	3a01      	subs	r2, #1
 800ba68:	0092      	lsls	r2, r2, #2
 800ba6a:	5852      	ldr	r2, [r2, r1]
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	0031      	movs	r1, r6
 800ba70:	f7ff fe50 	bl	800b714 <__multadd>
 800ba74:	0006      	movs	r6, r0
 800ba76:	10ad      	asrs	r5, r5, #2
 800ba78:	d027      	beq.n	800baca <__pow5mult+0x76>
 800ba7a:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800ba7c:	2c00      	cmp	r4, #0
 800ba7e:	d107      	bne.n	800ba90 <__pow5mult+0x3c>
 800ba80:	0038      	movs	r0, r7
 800ba82:	4914      	ldr	r1, [pc, #80]	; (800bad4 <__pow5mult+0x80>)
 800ba84:	f7ff ff1e 	bl	800b8c4 <__i2b>
 800ba88:	2300      	movs	r3, #0
 800ba8a:	0004      	movs	r4, r0
 800ba8c:	6438      	str	r0, [r7, #64]	; 0x40
 800ba8e:	6003      	str	r3, [r0, #0]
 800ba90:	2301      	movs	r3, #1
 800ba92:	421d      	tst	r5, r3
 800ba94:	d00a      	beq.n	800baac <__pow5mult+0x58>
 800ba96:	0031      	movs	r1, r6
 800ba98:	0022      	movs	r2, r4
 800ba9a:	0038      	movs	r0, r7
 800ba9c:	f7ff ff2a 	bl	800b8f4 <__multiply>
 800baa0:	0031      	movs	r1, r6
 800baa2:	9001      	str	r0, [sp, #4]
 800baa4:	0038      	movs	r0, r7
 800baa6:	f7ff fe2b 	bl	800b700 <_Bfree>
 800baaa:	9e01      	ldr	r6, [sp, #4]
 800baac:	106d      	asrs	r5, r5, #1
 800baae:	d00c      	beq.n	800baca <__pow5mult+0x76>
 800bab0:	6820      	ldr	r0, [r4, #0]
 800bab2:	2800      	cmp	r0, #0
 800bab4:	d107      	bne.n	800bac6 <__pow5mult+0x72>
 800bab6:	0022      	movs	r2, r4
 800bab8:	0021      	movs	r1, r4
 800baba:	0038      	movs	r0, r7
 800babc:	f7ff ff1a 	bl	800b8f4 <__multiply>
 800bac0:	2300      	movs	r3, #0
 800bac2:	6020      	str	r0, [r4, #0]
 800bac4:	6003      	str	r3, [r0, #0]
 800bac6:	0004      	movs	r4, r0
 800bac8:	e7e2      	b.n	800ba90 <__pow5mult+0x3c>
 800baca:	0030      	movs	r0, r6
 800bacc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bace:	46c0      	nop			; (mov r8, r8)
 800bad0:	080133b0 	.word	0x080133b0
 800bad4:	00000271 	.word	0x00000271

0800bad8 <__lshift>:
 800bad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bada:	000c      	movs	r4, r1
 800badc:	0017      	movs	r7, r2
 800bade:	6923      	ldr	r3, [r4, #16]
 800bae0:	1155      	asrs	r5, r2, #5
 800bae2:	b087      	sub	sp, #28
 800bae4:	18eb      	adds	r3, r5, r3
 800bae6:	9302      	str	r3, [sp, #8]
 800bae8:	3301      	adds	r3, #1
 800baea:	9301      	str	r3, [sp, #4]
 800baec:	6849      	ldr	r1, [r1, #4]
 800baee:	68a3      	ldr	r3, [r4, #8]
 800baf0:	9004      	str	r0, [sp, #16]
 800baf2:	9a01      	ldr	r2, [sp, #4]
 800baf4:	4293      	cmp	r3, r2
 800baf6:	db10      	blt.n	800bb1a <__lshift+0x42>
 800baf8:	9804      	ldr	r0, [sp, #16]
 800bafa:	f7ff fdd9 	bl	800b6b0 <_Balloc>
 800bafe:	2300      	movs	r3, #0
 800bb00:	0002      	movs	r2, r0
 800bb02:	0006      	movs	r6, r0
 800bb04:	0019      	movs	r1, r3
 800bb06:	3214      	adds	r2, #20
 800bb08:	4298      	cmp	r0, r3
 800bb0a:	d10c      	bne.n	800bb26 <__lshift+0x4e>
 800bb0c:	31df      	adds	r1, #223	; 0xdf
 800bb0e:	0032      	movs	r2, r6
 800bb10:	4b26      	ldr	r3, [pc, #152]	; (800bbac <__lshift+0xd4>)
 800bb12:	4827      	ldr	r0, [pc, #156]	; (800bbb0 <__lshift+0xd8>)
 800bb14:	31ff      	adds	r1, #255	; 0xff
 800bb16:	f003 f88f 	bl	800ec38 <__assert_func>
 800bb1a:	3101      	adds	r1, #1
 800bb1c:	005b      	lsls	r3, r3, #1
 800bb1e:	e7e8      	b.n	800baf2 <__lshift+0x1a>
 800bb20:	0098      	lsls	r0, r3, #2
 800bb22:	5011      	str	r1, [r2, r0]
 800bb24:	3301      	adds	r3, #1
 800bb26:	42ab      	cmp	r3, r5
 800bb28:	dbfa      	blt.n	800bb20 <__lshift+0x48>
 800bb2a:	43eb      	mvns	r3, r5
 800bb2c:	17db      	asrs	r3, r3, #31
 800bb2e:	401d      	ands	r5, r3
 800bb30:	211f      	movs	r1, #31
 800bb32:	0023      	movs	r3, r4
 800bb34:	0038      	movs	r0, r7
 800bb36:	00ad      	lsls	r5, r5, #2
 800bb38:	1955      	adds	r5, r2, r5
 800bb3a:	6922      	ldr	r2, [r4, #16]
 800bb3c:	3314      	adds	r3, #20
 800bb3e:	0092      	lsls	r2, r2, #2
 800bb40:	4008      	ands	r0, r1
 800bb42:	4684      	mov	ip, r0
 800bb44:	189a      	adds	r2, r3, r2
 800bb46:	420f      	tst	r7, r1
 800bb48:	d02a      	beq.n	800bba0 <__lshift+0xc8>
 800bb4a:	3101      	adds	r1, #1
 800bb4c:	1a09      	subs	r1, r1, r0
 800bb4e:	9105      	str	r1, [sp, #20]
 800bb50:	2100      	movs	r1, #0
 800bb52:	9503      	str	r5, [sp, #12]
 800bb54:	4667      	mov	r7, ip
 800bb56:	6818      	ldr	r0, [r3, #0]
 800bb58:	40b8      	lsls	r0, r7
 800bb5a:	4308      	orrs	r0, r1
 800bb5c:	9903      	ldr	r1, [sp, #12]
 800bb5e:	c101      	stmia	r1!, {r0}
 800bb60:	9103      	str	r1, [sp, #12]
 800bb62:	9805      	ldr	r0, [sp, #20]
 800bb64:	cb02      	ldmia	r3!, {r1}
 800bb66:	40c1      	lsrs	r1, r0
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	d8f3      	bhi.n	800bb54 <__lshift+0x7c>
 800bb6c:	0020      	movs	r0, r4
 800bb6e:	3015      	adds	r0, #21
 800bb70:	2304      	movs	r3, #4
 800bb72:	4282      	cmp	r2, r0
 800bb74:	d304      	bcc.n	800bb80 <__lshift+0xa8>
 800bb76:	1b13      	subs	r3, r2, r4
 800bb78:	3b15      	subs	r3, #21
 800bb7a:	089b      	lsrs	r3, r3, #2
 800bb7c:	3301      	adds	r3, #1
 800bb7e:	009b      	lsls	r3, r3, #2
 800bb80:	50e9      	str	r1, [r5, r3]
 800bb82:	2900      	cmp	r1, #0
 800bb84:	d002      	beq.n	800bb8c <__lshift+0xb4>
 800bb86:	9b02      	ldr	r3, [sp, #8]
 800bb88:	3302      	adds	r3, #2
 800bb8a:	9301      	str	r3, [sp, #4]
 800bb8c:	9b01      	ldr	r3, [sp, #4]
 800bb8e:	9804      	ldr	r0, [sp, #16]
 800bb90:	3b01      	subs	r3, #1
 800bb92:	0021      	movs	r1, r4
 800bb94:	6133      	str	r3, [r6, #16]
 800bb96:	f7ff fdb3 	bl	800b700 <_Bfree>
 800bb9a:	0030      	movs	r0, r6
 800bb9c:	b007      	add	sp, #28
 800bb9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bba0:	cb02      	ldmia	r3!, {r1}
 800bba2:	c502      	stmia	r5!, {r1}
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d8fb      	bhi.n	800bba0 <__lshift+0xc8>
 800bba8:	e7f0      	b.n	800bb8c <__lshift+0xb4>
 800bbaa:	46c0      	nop			; (mov r8, r8)
 800bbac:	080131f1 	.word	0x080131f1
 800bbb0:	08013262 	.word	0x08013262

0800bbb4 <__mcmp>:
 800bbb4:	b530      	push	{r4, r5, lr}
 800bbb6:	690b      	ldr	r3, [r1, #16]
 800bbb8:	6904      	ldr	r4, [r0, #16]
 800bbba:	0002      	movs	r2, r0
 800bbbc:	1ae0      	subs	r0, r4, r3
 800bbbe:	429c      	cmp	r4, r3
 800bbc0:	d10e      	bne.n	800bbe0 <__mcmp+0x2c>
 800bbc2:	3214      	adds	r2, #20
 800bbc4:	009b      	lsls	r3, r3, #2
 800bbc6:	3114      	adds	r1, #20
 800bbc8:	0014      	movs	r4, r2
 800bbca:	18c9      	adds	r1, r1, r3
 800bbcc:	18d2      	adds	r2, r2, r3
 800bbce:	3a04      	subs	r2, #4
 800bbd0:	3904      	subs	r1, #4
 800bbd2:	6815      	ldr	r5, [r2, #0]
 800bbd4:	680b      	ldr	r3, [r1, #0]
 800bbd6:	429d      	cmp	r5, r3
 800bbd8:	d003      	beq.n	800bbe2 <__mcmp+0x2e>
 800bbda:	2001      	movs	r0, #1
 800bbdc:	429d      	cmp	r5, r3
 800bbde:	d303      	bcc.n	800bbe8 <__mcmp+0x34>
 800bbe0:	bd30      	pop	{r4, r5, pc}
 800bbe2:	4294      	cmp	r4, r2
 800bbe4:	d3f3      	bcc.n	800bbce <__mcmp+0x1a>
 800bbe6:	e7fb      	b.n	800bbe0 <__mcmp+0x2c>
 800bbe8:	4240      	negs	r0, r0
 800bbea:	e7f9      	b.n	800bbe0 <__mcmp+0x2c>

0800bbec <__mdiff>:
 800bbec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbee:	000e      	movs	r6, r1
 800bbf0:	0007      	movs	r7, r0
 800bbf2:	0011      	movs	r1, r2
 800bbf4:	0030      	movs	r0, r6
 800bbf6:	b087      	sub	sp, #28
 800bbf8:	0014      	movs	r4, r2
 800bbfa:	f7ff ffdb 	bl	800bbb4 <__mcmp>
 800bbfe:	1e05      	subs	r5, r0, #0
 800bc00:	d110      	bne.n	800bc24 <__mdiff+0x38>
 800bc02:	0001      	movs	r1, r0
 800bc04:	0038      	movs	r0, r7
 800bc06:	f7ff fd53 	bl	800b6b0 <_Balloc>
 800bc0a:	1e02      	subs	r2, r0, #0
 800bc0c:	d104      	bne.n	800bc18 <__mdiff+0x2c>
 800bc0e:	4b3f      	ldr	r3, [pc, #252]	; (800bd0c <__mdiff+0x120>)
 800bc10:	483f      	ldr	r0, [pc, #252]	; (800bd10 <__mdiff+0x124>)
 800bc12:	4940      	ldr	r1, [pc, #256]	; (800bd14 <__mdiff+0x128>)
 800bc14:	f003 f810 	bl	800ec38 <__assert_func>
 800bc18:	2301      	movs	r3, #1
 800bc1a:	6145      	str	r5, [r0, #20]
 800bc1c:	6103      	str	r3, [r0, #16]
 800bc1e:	0010      	movs	r0, r2
 800bc20:	b007      	add	sp, #28
 800bc22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc24:	2301      	movs	r3, #1
 800bc26:	9301      	str	r3, [sp, #4]
 800bc28:	2800      	cmp	r0, #0
 800bc2a:	db04      	blt.n	800bc36 <__mdiff+0x4a>
 800bc2c:	0023      	movs	r3, r4
 800bc2e:	0034      	movs	r4, r6
 800bc30:	001e      	movs	r6, r3
 800bc32:	2300      	movs	r3, #0
 800bc34:	9301      	str	r3, [sp, #4]
 800bc36:	0038      	movs	r0, r7
 800bc38:	6861      	ldr	r1, [r4, #4]
 800bc3a:	f7ff fd39 	bl	800b6b0 <_Balloc>
 800bc3e:	1e02      	subs	r2, r0, #0
 800bc40:	d103      	bne.n	800bc4a <__mdiff+0x5e>
 800bc42:	4b32      	ldr	r3, [pc, #200]	; (800bd0c <__mdiff+0x120>)
 800bc44:	4832      	ldr	r0, [pc, #200]	; (800bd10 <__mdiff+0x124>)
 800bc46:	4934      	ldr	r1, [pc, #208]	; (800bd18 <__mdiff+0x12c>)
 800bc48:	e7e4      	b.n	800bc14 <__mdiff+0x28>
 800bc4a:	9b01      	ldr	r3, [sp, #4]
 800bc4c:	2700      	movs	r7, #0
 800bc4e:	60c3      	str	r3, [r0, #12]
 800bc50:	6920      	ldr	r0, [r4, #16]
 800bc52:	3414      	adds	r4, #20
 800bc54:	0083      	lsls	r3, r0, #2
 800bc56:	18e3      	adds	r3, r4, r3
 800bc58:	0021      	movs	r1, r4
 800bc5a:	9401      	str	r4, [sp, #4]
 800bc5c:	0034      	movs	r4, r6
 800bc5e:	9302      	str	r3, [sp, #8]
 800bc60:	6933      	ldr	r3, [r6, #16]
 800bc62:	3414      	adds	r4, #20
 800bc64:	009b      	lsls	r3, r3, #2
 800bc66:	18e3      	adds	r3, r4, r3
 800bc68:	9303      	str	r3, [sp, #12]
 800bc6a:	0013      	movs	r3, r2
 800bc6c:	3314      	adds	r3, #20
 800bc6e:	469c      	mov	ip, r3
 800bc70:	9305      	str	r3, [sp, #20]
 800bc72:	9104      	str	r1, [sp, #16]
 800bc74:	9b04      	ldr	r3, [sp, #16]
 800bc76:	cc02      	ldmia	r4!, {r1}
 800bc78:	cb20      	ldmia	r3!, {r5}
 800bc7a:	9304      	str	r3, [sp, #16]
 800bc7c:	b2ab      	uxth	r3, r5
 800bc7e:	19df      	adds	r7, r3, r7
 800bc80:	b28b      	uxth	r3, r1
 800bc82:	1afb      	subs	r3, r7, r3
 800bc84:	0c09      	lsrs	r1, r1, #16
 800bc86:	0c2d      	lsrs	r5, r5, #16
 800bc88:	1a6d      	subs	r5, r5, r1
 800bc8a:	1419      	asrs	r1, r3, #16
 800bc8c:	1869      	adds	r1, r5, r1
 800bc8e:	b29b      	uxth	r3, r3
 800bc90:	140f      	asrs	r7, r1, #16
 800bc92:	0409      	lsls	r1, r1, #16
 800bc94:	4319      	orrs	r1, r3
 800bc96:	4663      	mov	r3, ip
 800bc98:	c302      	stmia	r3!, {r1}
 800bc9a:	469c      	mov	ip, r3
 800bc9c:	9b03      	ldr	r3, [sp, #12]
 800bc9e:	42a3      	cmp	r3, r4
 800bca0:	d8e8      	bhi.n	800bc74 <__mdiff+0x88>
 800bca2:	0031      	movs	r1, r6
 800bca4:	9c03      	ldr	r4, [sp, #12]
 800bca6:	3115      	adds	r1, #21
 800bca8:	2304      	movs	r3, #4
 800bcaa:	428c      	cmp	r4, r1
 800bcac:	d304      	bcc.n	800bcb8 <__mdiff+0xcc>
 800bcae:	1ba3      	subs	r3, r4, r6
 800bcb0:	3b15      	subs	r3, #21
 800bcb2:	089b      	lsrs	r3, r3, #2
 800bcb4:	3301      	adds	r3, #1
 800bcb6:	009b      	lsls	r3, r3, #2
 800bcb8:	9901      	ldr	r1, [sp, #4]
 800bcba:	18cd      	adds	r5, r1, r3
 800bcbc:	9905      	ldr	r1, [sp, #20]
 800bcbe:	002e      	movs	r6, r5
 800bcc0:	18cb      	adds	r3, r1, r3
 800bcc2:	469c      	mov	ip, r3
 800bcc4:	9902      	ldr	r1, [sp, #8]
 800bcc6:	428e      	cmp	r6, r1
 800bcc8:	d310      	bcc.n	800bcec <__mdiff+0x100>
 800bcca:	9e02      	ldr	r6, [sp, #8]
 800bccc:	1ee9      	subs	r1, r5, #3
 800bcce:	2400      	movs	r4, #0
 800bcd0:	428e      	cmp	r6, r1
 800bcd2:	d304      	bcc.n	800bcde <__mdiff+0xf2>
 800bcd4:	0031      	movs	r1, r6
 800bcd6:	3103      	adds	r1, #3
 800bcd8:	1b49      	subs	r1, r1, r5
 800bcda:	0889      	lsrs	r1, r1, #2
 800bcdc:	008c      	lsls	r4, r1, #2
 800bcde:	191b      	adds	r3, r3, r4
 800bce0:	3b04      	subs	r3, #4
 800bce2:	6819      	ldr	r1, [r3, #0]
 800bce4:	2900      	cmp	r1, #0
 800bce6:	d00f      	beq.n	800bd08 <__mdiff+0x11c>
 800bce8:	6110      	str	r0, [r2, #16]
 800bcea:	e798      	b.n	800bc1e <__mdiff+0x32>
 800bcec:	ce02      	ldmia	r6!, {r1}
 800bcee:	b28c      	uxth	r4, r1
 800bcf0:	19e4      	adds	r4, r4, r7
 800bcf2:	0c0f      	lsrs	r7, r1, #16
 800bcf4:	1421      	asrs	r1, r4, #16
 800bcf6:	1879      	adds	r1, r7, r1
 800bcf8:	b2a4      	uxth	r4, r4
 800bcfa:	140f      	asrs	r7, r1, #16
 800bcfc:	0409      	lsls	r1, r1, #16
 800bcfe:	4321      	orrs	r1, r4
 800bd00:	4664      	mov	r4, ip
 800bd02:	c402      	stmia	r4!, {r1}
 800bd04:	46a4      	mov	ip, r4
 800bd06:	e7dd      	b.n	800bcc4 <__mdiff+0xd8>
 800bd08:	3801      	subs	r0, #1
 800bd0a:	e7e9      	b.n	800bce0 <__mdiff+0xf4>
 800bd0c:	080131f1 	.word	0x080131f1
 800bd10:	08013262 	.word	0x08013262
 800bd14:	00000237 	.word	0x00000237
 800bd18:	00000245 	.word	0x00000245

0800bd1c <__ulp>:
 800bd1c:	2000      	movs	r0, #0
 800bd1e:	4b0b      	ldr	r3, [pc, #44]	; (800bd4c <__ulp+0x30>)
 800bd20:	4019      	ands	r1, r3
 800bd22:	4b0b      	ldr	r3, [pc, #44]	; (800bd50 <__ulp+0x34>)
 800bd24:	18c9      	adds	r1, r1, r3
 800bd26:	4281      	cmp	r1, r0
 800bd28:	dc06      	bgt.n	800bd38 <__ulp+0x1c>
 800bd2a:	4249      	negs	r1, r1
 800bd2c:	150b      	asrs	r3, r1, #20
 800bd2e:	2b13      	cmp	r3, #19
 800bd30:	dc03      	bgt.n	800bd3a <__ulp+0x1e>
 800bd32:	2180      	movs	r1, #128	; 0x80
 800bd34:	0309      	lsls	r1, r1, #12
 800bd36:	4119      	asrs	r1, r3
 800bd38:	4770      	bx	lr
 800bd3a:	3b14      	subs	r3, #20
 800bd3c:	2001      	movs	r0, #1
 800bd3e:	2b1e      	cmp	r3, #30
 800bd40:	dc02      	bgt.n	800bd48 <__ulp+0x2c>
 800bd42:	2080      	movs	r0, #128	; 0x80
 800bd44:	0600      	lsls	r0, r0, #24
 800bd46:	40d8      	lsrs	r0, r3
 800bd48:	2100      	movs	r1, #0
 800bd4a:	e7f5      	b.n	800bd38 <__ulp+0x1c>
 800bd4c:	7ff00000 	.word	0x7ff00000
 800bd50:	fcc00000 	.word	0xfcc00000

0800bd54 <__b2d>:
 800bd54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd56:	0006      	movs	r6, r0
 800bd58:	6903      	ldr	r3, [r0, #16]
 800bd5a:	3614      	adds	r6, #20
 800bd5c:	009b      	lsls	r3, r3, #2
 800bd5e:	18f3      	adds	r3, r6, r3
 800bd60:	1f1d      	subs	r5, r3, #4
 800bd62:	682c      	ldr	r4, [r5, #0]
 800bd64:	000f      	movs	r7, r1
 800bd66:	0020      	movs	r0, r4
 800bd68:	9301      	str	r3, [sp, #4]
 800bd6a:	f7ff fd63 	bl	800b834 <__hi0bits>
 800bd6e:	2220      	movs	r2, #32
 800bd70:	1a12      	subs	r2, r2, r0
 800bd72:	603a      	str	r2, [r7, #0]
 800bd74:	0003      	movs	r3, r0
 800bd76:	4a1c      	ldr	r2, [pc, #112]	; (800bde8 <__b2d+0x94>)
 800bd78:	280a      	cmp	r0, #10
 800bd7a:	dc15      	bgt.n	800bda8 <__b2d+0x54>
 800bd7c:	210b      	movs	r1, #11
 800bd7e:	0027      	movs	r7, r4
 800bd80:	1a09      	subs	r1, r1, r0
 800bd82:	40cf      	lsrs	r7, r1
 800bd84:	433a      	orrs	r2, r7
 800bd86:	468c      	mov	ip, r1
 800bd88:	0011      	movs	r1, r2
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	42ae      	cmp	r6, r5
 800bd8e:	d202      	bcs.n	800bd96 <__b2d+0x42>
 800bd90:	9a01      	ldr	r2, [sp, #4]
 800bd92:	3a08      	subs	r2, #8
 800bd94:	6812      	ldr	r2, [r2, #0]
 800bd96:	3315      	adds	r3, #21
 800bd98:	409c      	lsls	r4, r3
 800bd9a:	4663      	mov	r3, ip
 800bd9c:	0027      	movs	r7, r4
 800bd9e:	40da      	lsrs	r2, r3
 800bda0:	4317      	orrs	r7, r2
 800bda2:	0038      	movs	r0, r7
 800bda4:	b003      	add	sp, #12
 800bda6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bda8:	2700      	movs	r7, #0
 800bdaa:	42ae      	cmp	r6, r5
 800bdac:	d202      	bcs.n	800bdb4 <__b2d+0x60>
 800bdae:	9d01      	ldr	r5, [sp, #4]
 800bdb0:	3d08      	subs	r5, #8
 800bdb2:	682f      	ldr	r7, [r5, #0]
 800bdb4:	210b      	movs	r1, #11
 800bdb6:	4249      	negs	r1, r1
 800bdb8:	468c      	mov	ip, r1
 800bdba:	449c      	add	ip, r3
 800bdbc:	2b0b      	cmp	r3, #11
 800bdbe:	d010      	beq.n	800bde2 <__b2d+0x8e>
 800bdc0:	4661      	mov	r1, ip
 800bdc2:	2320      	movs	r3, #32
 800bdc4:	408c      	lsls	r4, r1
 800bdc6:	1a5b      	subs	r3, r3, r1
 800bdc8:	0039      	movs	r1, r7
 800bdca:	40d9      	lsrs	r1, r3
 800bdcc:	430c      	orrs	r4, r1
 800bdce:	4322      	orrs	r2, r4
 800bdd0:	0011      	movs	r1, r2
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	42b5      	cmp	r5, r6
 800bdd6:	d901      	bls.n	800bddc <__b2d+0x88>
 800bdd8:	3d04      	subs	r5, #4
 800bdda:	682a      	ldr	r2, [r5, #0]
 800bddc:	4664      	mov	r4, ip
 800bdde:	40a7      	lsls	r7, r4
 800bde0:	e7dd      	b.n	800bd9e <__b2d+0x4a>
 800bde2:	4322      	orrs	r2, r4
 800bde4:	0011      	movs	r1, r2
 800bde6:	e7dc      	b.n	800bda2 <__b2d+0x4e>
 800bde8:	3ff00000 	.word	0x3ff00000

0800bdec <__d2b>:
 800bdec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdee:	2101      	movs	r1, #1
 800bdf0:	0014      	movs	r4, r2
 800bdf2:	001d      	movs	r5, r3
 800bdf4:	9f08      	ldr	r7, [sp, #32]
 800bdf6:	f7ff fc5b 	bl	800b6b0 <_Balloc>
 800bdfa:	1e06      	subs	r6, r0, #0
 800bdfc:	d105      	bne.n	800be0a <__d2b+0x1e>
 800bdfe:	0032      	movs	r2, r6
 800be00:	4b24      	ldr	r3, [pc, #144]	; (800be94 <__d2b+0xa8>)
 800be02:	4825      	ldr	r0, [pc, #148]	; (800be98 <__d2b+0xac>)
 800be04:	4925      	ldr	r1, [pc, #148]	; (800be9c <__d2b+0xb0>)
 800be06:	f002 ff17 	bl	800ec38 <__assert_func>
 800be0a:	032b      	lsls	r3, r5, #12
 800be0c:	006d      	lsls	r5, r5, #1
 800be0e:	0b1b      	lsrs	r3, r3, #12
 800be10:	0d6d      	lsrs	r5, r5, #21
 800be12:	d125      	bne.n	800be60 <__d2b+0x74>
 800be14:	9301      	str	r3, [sp, #4]
 800be16:	2c00      	cmp	r4, #0
 800be18:	d028      	beq.n	800be6c <__d2b+0x80>
 800be1a:	4668      	mov	r0, sp
 800be1c:	9400      	str	r4, [sp, #0]
 800be1e:	f7ff fd23 	bl	800b868 <__lo0bits>
 800be22:	9b01      	ldr	r3, [sp, #4]
 800be24:	9900      	ldr	r1, [sp, #0]
 800be26:	2800      	cmp	r0, #0
 800be28:	d01e      	beq.n	800be68 <__d2b+0x7c>
 800be2a:	2220      	movs	r2, #32
 800be2c:	001c      	movs	r4, r3
 800be2e:	1a12      	subs	r2, r2, r0
 800be30:	4094      	lsls	r4, r2
 800be32:	0022      	movs	r2, r4
 800be34:	40c3      	lsrs	r3, r0
 800be36:	430a      	orrs	r2, r1
 800be38:	6172      	str	r2, [r6, #20]
 800be3a:	9301      	str	r3, [sp, #4]
 800be3c:	9c01      	ldr	r4, [sp, #4]
 800be3e:	61b4      	str	r4, [r6, #24]
 800be40:	1e63      	subs	r3, r4, #1
 800be42:	419c      	sbcs	r4, r3
 800be44:	3401      	adds	r4, #1
 800be46:	6134      	str	r4, [r6, #16]
 800be48:	2d00      	cmp	r5, #0
 800be4a:	d017      	beq.n	800be7c <__d2b+0x90>
 800be4c:	2435      	movs	r4, #53	; 0x35
 800be4e:	4b14      	ldr	r3, [pc, #80]	; (800bea0 <__d2b+0xb4>)
 800be50:	18ed      	adds	r5, r5, r3
 800be52:	182d      	adds	r5, r5, r0
 800be54:	603d      	str	r5, [r7, #0]
 800be56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be58:	1a24      	subs	r4, r4, r0
 800be5a:	601c      	str	r4, [r3, #0]
 800be5c:	0030      	movs	r0, r6
 800be5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800be60:	2280      	movs	r2, #128	; 0x80
 800be62:	0352      	lsls	r2, r2, #13
 800be64:	4313      	orrs	r3, r2
 800be66:	e7d5      	b.n	800be14 <__d2b+0x28>
 800be68:	6171      	str	r1, [r6, #20]
 800be6a:	e7e7      	b.n	800be3c <__d2b+0x50>
 800be6c:	a801      	add	r0, sp, #4
 800be6e:	f7ff fcfb 	bl	800b868 <__lo0bits>
 800be72:	9b01      	ldr	r3, [sp, #4]
 800be74:	2401      	movs	r4, #1
 800be76:	6173      	str	r3, [r6, #20]
 800be78:	3020      	adds	r0, #32
 800be7a:	e7e4      	b.n	800be46 <__d2b+0x5a>
 800be7c:	4b09      	ldr	r3, [pc, #36]	; (800bea4 <__d2b+0xb8>)
 800be7e:	18c0      	adds	r0, r0, r3
 800be80:	4b09      	ldr	r3, [pc, #36]	; (800bea8 <__d2b+0xbc>)
 800be82:	6038      	str	r0, [r7, #0]
 800be84:	18e3      	adds	r3, r4, r3
 800be86:	009b      	lsls	r3, r3, #2
 800be88:	18f3      	adds	r3, r6, r3
 800be8a:	6958      	ldr	r0, [r3, #20]
 800be8c:	f7ff fcd2 	bl	800b834 <__hi0bits>
 800be90:	0164      	lsls	r4, r4, #5
 800be92:	e7e0      	b.n	800be56 <__d2b+0x6a>
 800be94:	080131f1 	.word	0x080131f1
 800be98:	08013262 	.word	0x08013262
 800be9c:	0000030f 	.word	0x0000030f
 800bea0:	fffffbcd 	.word	0xfffffbcd
 800bea4:	fffffbce 	.word	0xfffffbce
 800bea8:	3fffffff 	.word	0x3fffffff

0800beac <__ratio>:
 800beac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800beae:	b087      	sub	sp, #28
 800beb0:	000f      	movs	r7, r1
 800beb2:	a904      	add	r1, sp, #16
 800beb4:	0006      	movs	r6, r0
 800beb6:	f7ff ff4d 	bl	800bd54 <__b2d>
 800beba:	9000      	str	r0, [sp, #0]
 800bebc:	9101      	str	r1, [sp, #4]
 800bebe:	9c00      	ldr	r4, [sp, #0]
 800bec0:	9d01      	ldr	r5, [sp, #4]
 800bec2:	0038      	movs	r0, r7
 800bec4:	a905      	add	r1, sp, #20
 800bec6:	f7ff ff45 	bl	800bd54 <__b2d>
 800beca:	9002      	str	r0, [sp, #8]
 800becc:	9103      	str	r1, [sp, #12]
 800bece:	9a02      	ldr	r2, [sp, #8]
 800bed0:	9b03      	ldr	r3, [sp, #12]
 800bed2:	6930      	ldr	r0, [r6, #16]
 800bed4:	6939      	ldr	r1, [r7, #16]
 800bed6:	9e04      	ldr	r6, [sp, #16]
 800bed8:	1a40      	subs	r0, r0, r1
 800beda:	9905      	ldr	r1, [sp, #20]
 800bedc:	0140      	lsls	r0, r0, #5
 800bede:	1a71      	subs	r1, r6, r1
 800bee0:	1841      	adds	r1, r0, r1
 800bee2:	0508      	lsls	r0, r1, #20
 800bee4:	2900      	cmp	r1, #0
 800bee6:	dd07      	ble.n	800bef8 <__ratio+0x4c>
 800bee8:	9901      	ldr	r1, [sp, #4]
 800beea:	1845      	adds	r5, r0, r1
 800beec:	0020      	movs	r0, r4
 800beee:	0029      	movs	r1, r5
 800bef0:	f7f4 ffc2 	bl	8000e78 <__aeabi_ddiv>
 800bef4:	b007      	add	sp, #28
 800bef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bef8:	9903      	ldr	r1, [sp, #12]
 800befa:	1a0b      	subs	r3, r1, r0
 800befc:	e7f6      	b.n	800beec <__ratio+0x40>

0800befe <__copybits>:
 800befe:	b570      	push	{r4, r5, r6, lr}
 800bf00:	0014      	movs	r4, r2
 800bf02:	0005      	movs	r5, r0
 800bf04:	3901      	subs	r1, #1
 800bf06:	6913      	ldr	r3, [r2, #16]
 800bf08:	1149      	asrs	r1, r1, #5
 800bf0a:	3101      	adds	r1, #1
 800bf0c:	0089      	lsls	r1, r1, #2
 800bf0e:	3414      	adds	r4, #20
 800bf10:	009b      	lsls	r3, r3, #2
 800bf12:	1841      	adds	r1, r0, r1
 800bf14:	18e3      	adds	r3, r4, r3
 800bf16:	42a3      	cmp	r3, r4
 800bf18:	d80d      	bhi.n	800bf36 <__copybits+0x38>
 800bf1a:	0014      	movs	r4, r2
 800bf1c:	3411      	adds	r4, #17
 800bf1e:	2500      	movs	r5, #0
 800bf20:	429c      	cmp	r4, r3
 800bf22:	d803      	bhi.n	800bf2c <__copybits+0x2e>
 800bf24:	1a9b      	subs	r3, r3, r2
 800bf26:	3b11      	subs	r3, #17
 800bf28:	089b      	lsrs	r3, r3, #2
 800bf2a:	009d      	lsls	r5, r3, #2
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	1940      	adds	r0, r0, r5
 800bf30:	4281      	cmp	r1, r0
 800bf32:	d803      	bhi.n	800bf3c <__copybits+0x3e>
 800bf34:	bd70      	pop	{r4, r5, r6, pc}
 800bf36:	cc40      	ldmia	r4!, {r6}
 800bf38:	c540      	stmia	r5!, {r6}
 800bf3a:	e7ec      	b.n	800bf16 <__copybits+0x18>
 800bf3c:	c008      	stmia	r0!, {r3}
 800bf3e:	e7f7      	b.n	800bf30 <__copybits+0x32>

0800bf40 <__any_on>:
 800bf40:	0002      	movs	r2, r0
 800bf42:	6900      	ldr	r0, [r0, #16]
 800bf44:	b510      	push	{r4, lr}
 800bf46:	3214      	adds	r2, #20
 800bf48:	114b      	asrs	r3, r1, #5
 800bf4a:	4298      	cmp	r0, r3
 800bf4c:	db13      	blt.n	800bf76 <__any_on+0x36>
 800bf4e:	dd0c      	ble.n	800bf6a <__any_on+0x2a>
 800bf50:	241f      	movs	r4, #31
 800bf52:	0008      	movs	r0, r1
 800bf54:	4020      	ands	r0, r4
 800bf56:	4221      	tst	r1, r4
 800bf58:	d007      	beq.n	800bf6a <__any_on+0x2a>
 800bf5a:	0099      	lsls	r1, r3, #2
 800bf5c:	588c      	ldr	r4, [r1, r2]
 800bf5e:	0021      	movs	r1, r4
 800bf60:	40c1      	lsrs	r1, r0
 800bf62:	4081      	lsls	r1, r0
 800bf64:	2001      	movs	r0, #1
 800bf66:	428c      	cmp	r4, r1
 800bf68:	d104      	bne.n	800bf74 <__any_on+0x34>
 800bf6a:	009b      	lsls	r3, r3, #2
 800bf6c:	18d3      	adds	r3, r2, r3
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d803      	bhi.n	800bf7a <__any_on+0x3a>
 800bf72:	2000      	movs	r0, #0
 800bf74:	bd10      	pop	{r4, pc}
 800bf76:	0003      	movs	r3, r0
 800bf78:	e7f7      	b.n	800bf6a <__any_on+0x2a>
 800bf7a:	3b04      	subs	r3, #4
 800bf7c:	6819      	ldr	r1, [r3, #0]
 800bf7e:	2900      	cmp	r1, #0
 800bf80:	d0f5      	beq.n	800bf6e <__any_on+0x2e>
 800bf82:	2001      	movs	r0, #1
 800bf84:	e7f6      	b.n	800bf74 <__any_on+0x34>

0800bf86 <__ascii_wctomb>:
 800bf86:	0003      	movs	r3, r0
 800bf88:	1e08      	subs	r0, r1, #0
 800bf8a:	d005      	beq.n	800bf98 <__ascii_wctomb+0x12>
 800bf8c:	2aff      	cmp	r2, #255	; 0xff
 800bf8e:	d904      	bls.n	800bf9a <__ascii_wctomb+0x14>
 800bf90:	228a      	movs	r2, #138	; 0x8a
 800bf92:	2001      	movs	r0, #1
 800bf94:	601a      	str	r2, [r3, #0]
 800bf96:	4240      	negs	r0, r0
 800bf98:	4770      	bx	lr
 800bf9a:	2001      	movs	r0, #1
 800bf9c:	700a      	strb	r2, [r1, #0]
 800bf9e:	e7fb      	b.n	800bf98 <__ascii_wctomb+0x12>

0800bfa0 <_svfprintf_r>:
 800bfa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfa2:	b0d9      	sub	sp, #356	; 0x164
 800bfa4:	001c      	movs	r4, r3
 800bfa6:	910b      	str	r1, [sp, #44]	; 0x2c
 800bfa8:	9208      	str	r2, [sp, #32]
 800bfaa:	900a      	str	r0, [sp, #40]	; 0x28
 800bfac:	f002 fdae 	bl	800eb0c <_localeconv_r>
 800bfb0:	6803      	ldr	r3, [r0, #0]
 800bfb2:	0018      	movs	r0, r3
 800bfb4:	931c      	str	r3, [sp, #112]	; 0x70
 800bfb6:	f7f4 f8a5 	bl	8000104 <strlen>
 800bfba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfbc:	9016      	str	r0, [sp, #88]	; 0x58
 800bfbe:	899b      	ldrh	r3, [r3, #12]
 800bfc0:	061b      	lsls	r3, r3, #24
 800bfc2:	d517      	bpl.n	800bff4 <_svfprintf_r+0x54>
 800bfc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfc6:	691b      	ldr	r3, [r3, #16]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d113      	bne.n	800bff4 <_svfprintf_r+0x54>
 800bfcc:	2140      	movs	r1, #64	; 0x40
 800bfce:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bfd0:	f7fd fb6e 	bl	80096b0 <_malloc_r>
 800bfd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfd6:	6018      	str	r0, [r3, #0]
 800bfd8:	6118      	str	r0, [r3, #16]
 800bfda:	2800      	cmp	r0, #0
 800bfdc:	d107      	bne.n	800bfee <_svfprintf_r+0x4e>
 800bfde:	230c      	movs	r3, #12
 800bfe0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bfe2:	6013      	str	r3, [r2, #0]
 800bfe4:	3b0d      	subs	r3, #13
 800bfe6:	9317      	str	r3, [sp, #92]	; 0x5c
 800bfe8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800bfea:	b059      	add	sp, #356	; 0x164
 800bfec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfee:	2340      	movs	r3, #64	; 0x40
 800bff0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bff2:	6153      	str	r3, [r2, #20]
 800bff4:	2300      	movs	r3, #0
 800bff6:	2200      	movs	r2, #0
 800bff8:	932e      	str	r3, [sp, #184]	; 0xb8
 800bffa:	932d      	str	r3, [sp, #180]	; 0xb4
 800bffc:	930e      	str	r3, [sp, #56]	; 0x38
 800bffe:	2300      	movs	r3, #0
 800c000:	9214      	str	r2, [sp, #80]	; 0x50
 800c002:	9315      	str	r3, [sp, #84]	; 0x54
 800c004:	2300      	movs	r3, #0
 800c006:	af2f      	add	r7, sp, #188	; 0xbc
 800c008:	972c      	str	r7, [sp, #176]	; 0xb0
 800c00a:	931f      	str	r3, [sp, #124]	; 0x7c
 800c00c:	931e      	str	r3, [sp, #120]	; 0x78
 800c00e:	9312      	str	r3, [sp, #72]	; 0x48
 800c010:	931b      	str	r3, [sp, #108]	; 0x6c
 800c012:	931d      	str	r3, [sp, #116]	; 0x74
 800c014:	9317      	str	r3, [sp, #92]	; 0x5c
 800c016:	9d08      	ldr	r5, [sp, #32]
 800c018:	782b      	ldrb	r3, [r5, #0]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d002      	beq.n	800c024 <_svfprintf_r+0x84>
 800c01e:	2b25      	cmp	r3, #37	; 0x25
 800c020:	d000      	beq.n	800c024 <_svfprintf_r+0x84>
 800c022:	e091      	b.n	800c148 <_svfprintf_r+0x1a8>
 800c024:	9b08      	ldr	r3, [sp, #32]
 800c026:	1aee      	subs	r6, r5, r3
 800c028:	429d      	cmp	r5, r3
 800c02a:	d016      	beq.n	800c05a <_svfprintf_r+0xba>
 800c02c:	603b      	str	r3, [r7, #0]
 800c02e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800c030:	607e      	str	r6, [r7, #4]
 800c032:	199b      	adds	r3, r3, r6
 800c034:	932e      	str	r3, [sp, #184]	; 0xb8
 800c036:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c038:	3708      	adds	r7, #8
 800c03a:	3301      	adds	r3, #1
 800c03c:	932d      	str	r3, [sp, #180]	; 0xb4
 800c03e:	2b07      	cmp	r3, #7
 800c040:	dd08      	ble.n	800c054 <_svfprintf_r+0xb4>
 800c042:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c044:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c046:	aa2c      	add	r2, sp, #176	; 0xb0
 800c048:	f004 f8c0 	bl	80101cc <__ssprint_r>
 800c04c:	2800      	cmp	r0, #0
 800c04e:	d000      	beq.n	800c052 <_svfprintf_r+0xb2>
 800c050:	e1cf      	b.n	800c3f2 <_svfprintf_r+0x452>
 800c052:	af2f      	add	r7, sp, #188	; 0xbc
 800c054:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c056:	199b      	adds	r3, r3, r6
 800c058:	9317      	str	r3, [sp, #92]	; 0x5c
 800c05a:	782b      	ldrb	r3, [r5, #0]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d101      	bne.n	800c064 <_svfprintf_r+0xc4>
 800c060:	f001 f99e 	bl	800d3a0 <_svfprintf_r+0x1400>
 800c064:	221b      	movs	r2, #27
 800c066:	2300      	movs	r3, #0
 800c068:	a91e      	add	r1, sp, #120	; 0x78
 800c06a:	1852      	adds	r2, r2, r1
 800c06c:	7013      	strb	r3, [r2, #0]
 800c06e:	2201      	movs	r2, #1
 800c070:	001e      	movs	r6, r3
 800c072:	4252      	negs	r2, r2
 800c074:	3501      	adds	r5, #1
 800c076:	9209      	str	r2, [sp, #36]	; 0x24
 800c078:	9318      	str	r3, [sp, #96]	; 0x60
 800c07a:	1c6b      	adds	r3, r5, #1
 800c07c:	9313      	str	r3, [sp, #76]	; 0x4c
 800c07e:	782b      	ldrb	r3, [r5, #0]
 800c080:	930f      	str	r3, [sp, #60]	; 0x3c
 800c082:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800c084:	3820      	subs	r0, #32
 800c086:	285a      	cmp	r0, #90	; 0x5a
 800c088:	d901      	bls.n	800c08e <_svfprintf_r+0xee>
 800c08a:	f000 fe20 	bl	800ccce <_svfprintf_r+0xd2e>
 800c08e:	f7f4 f84b 	bl	8000128 <__gnu_thumb1_case_uhi>
 800c092:	0078      	.short	0x0078
 800c094:	061e061e 	.word	0x061e061e
 800c098:	061e0082 	.word	0x061e0082
 800c09c:	061e061e 	.word	0x061e061e
 800c0a0:	061e005d 	.word	0x061e005d
 800c0a4:	0084061e 	.word	0x0084061e
 800c0a8:	061e008c 	.word	0x061e008c
 800c0ac:	0091008a 	.word	0x0091008a
 800c0b0:	00b2061e 	.word	0x00b2061e
 800c0b4:	00b400b4 	.word	0x00b400b4
 800c0b8:	00b400b4 	.word	0x00b400b4
 800c0bc:	00b400b4 	.word	0x00b400b4
 800c0c0:	00b400b4 	.word	0x00b400b4
 800c0c4:	061e00b4 	.word	0x061e00b4
 800c0c8:	061e061e 	.word	0x061e061e
 800c0cc:	061e061e 	.word	0x061e061e
 800c0d0:	061e061e 	.word	0x061e061e
 800c0d4:	061e013b 	.word	0x061e013b
 800c0d8:	00f400e0 	.word	0x00f400e0
 800c0dc:	013b013b 	.word	0x013b013b
 800c0e0:	061e013b 	.word	0x061e013b
 800c0e4:	061e061e 	.word	0x061e061e
 800c0e8:	00c7061e 	.word	0x00c7061e
 800c0ec:	061e061e 	.word	0x061e061e
 800c0f0:	061e04c7 	.word	0x061e04c7
 800c0f4:	061e061e 	.word	0x061e061e
 800c0f8:	061e050a 	.word	0x061e050a
 800c0fc:	061e052a 	.word	0x061e052a
 800c100:	055c061e 	.word	0x055c061e
 800c104:	061e061e 	.word	0x061e061e
 800c108:	061e061e 	.word	0x061e061e
 800c10c:	061e061e 	.word	0x061e061e
 800c110:	061e061e 	.word	0x061e061e
 800c114:	061e013b 	.word	0x061e013b
 800c118:	00f600e0 	.word	0x00f600e0
 800c11c:	013b013b 	.word	0x013b013b
 800c120:	00c9013b 	.word	0x00c9013b
 800c124:	00dc00f6 	.word	0x00dc00f6
 800c128:	00d5061e 	.word	0x00d5061e
 800c12c:	04a7061e 	.word	0x04a7061e
 800c130:	04fa04c9 	.word	0x04fa04c9
 800c134:	061e00dc 	.word	0x061e00dc
 800c138:	0080050a 	.word	0x0080050a
 800c13c:	061e052c 	.word	0x061e052c
 800c140:	057c061e 	.word	0x057c061e
 800c144:	0080061e 	.word	0x0080061e
 800c148:	3501      	adds	r5, #1
 800c14a:	e765      	b.n	800c018 <_svfprintf_r+0x78>
 800c14c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c14e:	f002 fcdd 	bl	800eb0c <_localeconv_r>
 800c152:	6843      	ldr	r3, [r0, #4]
 800c154:	0018      	movs	r0, r3
 800c156:	931d      	str	r3, [sp, #116]	; 0x74
 800c158:	f7f3 ffd4 	bl	8000104 <strlen>
 800c15c:	901b      	str	r0, [sp, #108]	; 0x6c
 800c15e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c160:	f002 fcd4 	bl	800eb0c <_localeconv_r>
 800c164:	6883      	ldr	r3, [r0, #8]
 800c166:	9312      	str	r3, [sp, #72]	; 0x48
 800c168:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d011      	beq.n	800c192 <_svfprintf_r+0x1f2>
 800c16e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c170:	2b00      	cmp	r3, #0
 800c172:	d00e      	beq.n	800c192 <_svfprintf_r+0x1f2>
 800c174:	781b      	ldrb	r3, [r3, #0]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d00b      	beq.n	800c192 <_svfprintf_r+0x1f2>
 800c17a:	2380      	movs	r3, #128	; 0x80
 800c17c:	00db      	lsls	r3, r3, #3
 800c17e:	431e      	orrs	r6, r3
 800c180:	e007      	b.n	800c192 <_svfprintf_r+0x1f2>
 800c182:	231b      	movs	r3, #27
 800c184:	aa1e      	add	r2, sp, #120	; 0x78
 800c186:	189b      	adds	r3, r3, r2
 800c188:	781a      	ldrb	r2, [r3, #0]
 800c18a:	2a00      	cmp	r2, #0
 800c18c:	d101      	bne.n	800c192 <_svfprintf_r+0x1f2>
 800c18e:	3220      	adds	r2, #32
 800c190:	701a      	strb	r2, [r3, #0]
 800c192:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800c194:	e771      	b.n	800c07a <_svfprintf_r+0xda>
 800c196:	2301      	movs	r3, #1
 800c198:	e7f1      	b.n	800c17e <_svfprintf_r+0x1de>
 800c19a:	cc08      	ldmia	r4!, {r3}
 800c19c:	9318      	str	r3, [sp, #96]	; 0x60
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	daf7      	bge.n	800c192 <_svfprintf_r+0x1f2>
 800c1a2:	425b      	negs	r3, r3
 800c1a4:	9318      	str	r3, [sp, #96]	; 0x60
 800c1a6:	2304      	movs	r3, #4
 800c1a8:	e7e9      	b.n	800c17e <_svfprintf_r+0x1de>
 800c1aa:	231b      	movs	r3, #27
 800c1ac:	aa1e      	add	r2, sp, #120	; 0x78
 800c1ae:	189b      	adds	r3, r3, r2
 800c1b0:	222b      	movs	r2, #43	; 0x2b
 800c1b2:	e7ed      	b.n	800c190 <_svfprintf_r+0x1f0>
 800c1b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c1b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c1b8:	7812      	ldrb	r2, [r2, #0]
 800c1ba:	3301      	adds	r3, #1
 800c1bc:	920f      	str	r2, [sp, #60]	; 0x3c
 800c1be:	2a2a      	cmp	r2, #42	; 0x2a
 800c1c0:	d010      	beq.n	800c1e4 <_svfprintf_r+0x244>
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	9209      	str	r2, [sp, #36]	; 0x24
 800c1c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c1c8:	9313      	str	r3, [sp, #76]	; 0x4c
 800c1ca:	3a30      	subs	r2, #48	; 0x30
 800c1cc:	2a09      	cmp	r2, #9
 800c1ce:	d900      	bls.n	800c1d2 <_svfprintf_r+0x232>
 800c1d0:	e757      	b.n	800c082 <_svfprintf_r+0xe2>
 800c1d2:	200a      	movs	r0, #10
 800c1d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c1d6:	4341      	muls	r1, r0
 800c1d8:	188a      	adds	r2, r1, r2
 800c1da:	9209      	str	r2, [sp, #36]	; 0x24
 800c1dc:	781a      	ldrb	r2, [r3, #0]
 800c1de:	3301      	adds	r3, #1
 800c1e0:	920f      	str	r2, [sp, #60]	; 0x3c
 800c1e2:	e7f0      	b.n	800c1c6 <_svfprintf_r+0x226>
 800c1e4:	cc04      	ldmia	r4!, {r2}
 800c1e6:	9209      	str	r2, [sp, #36]	; 0x24
 800c1e8:	2a00      	cmp	r2, #0
 800c1ea:	da02      	bge.n	800c1f2 <_svfprintf_r+0x252>
 800c1ec:	2201      	movs	r2, #1
 800c1ee:	4252      	negs	r2, r2
 800c1f0:	9209      	str	r2, [sp, #36]	; 0x24
 800c1f2:	9313      	str	r3, [sp, #76]	; 0x4c
 800c1f4:	e7cd      	b.n	800c192 <_svfprintf_r+0x1f2>
 800c1f6:	2380      	movs	r3, #128	; 0x80
 800c1f8:	e7c1      	b.n	800c17e <_svfprintf_r+0x1de>
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c1fe:	9218      	str	r2, [sp, #96]	; 0x60
 800c200:	210a      	movs	r1, #10
 800c202:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c204:	434a      	muls	r2, r1
 800c206:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c208:	3930      	subs	r1, #48	; 0x30
 800c20a:	188a      	adds	r2, r1, r2
 800c20c:	9218      	str	r2, [sp, #96]	; 0x60
 800c20e:	001a      	movs	r2, r3
 800c210:	7812      	ldrb	r2, [r2, #0]
 800c212:	3301      	adds	r3, #1
 800c214:	920f      	str	r2, [sp, #60]	; 0x3c
 800c216:	3a30      	subs	r2, #48	; 0x30
 800c218:	9313      	str	r3, [sp, #76]	; 0x4c
 800c21a:	2a09      	cmp	r2, #9
 800c21c:	d9f0      	bls.n	800c200 <_svfprintf_r+0x260>
 800c21e:	e730      	b.n	800c082 <_svfprintf_r+0xe2>
 800c220:	2308      	movs	r3, #8
 800c222:	e7ac      	b.n	800c17e <_svfprintf_r+0x1de>
 800c224:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	2b68      	cmp	r3, #104	; 0x68
 800c22a:	d105      	bne.n	800c238 <_svfprintf_r+0x298>
 800c22c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c22e:	3301      	adds	r3, #1
 800c230:	9313      	str	r3, [sp, #76]	; 0x4c
 800c232:	2380      	movs	r3, #128	; 0x80
 800c234:	009b      	lsls	r3, r3, #2
 800c236:	e7a2      	b.n	800c17e <_svfprintf_r+0x1de>
 800c238:	2340      	movs	r3, #64	; 0x40
 800c23a:	e7a0      	b.n	800c17e <_svfprintf_r+0x1de>
 800c23c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c23e:	781b      	ldrb	r3, [r3, #0]
 800c240:	2b6c      	cmp	r3, #108	; 0x6c
 800c242:	d104      	bne.n	800c24e <_svfprintf_r+0x2ae>
 800c244:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c246:	3301      	adds	r3, #1
 800c248:	9313      	str	r3, [sp, #76]	; 0x4c
 800c24a:	2320      	movs	r3, #32
 800c24c:	e797      	b.n	800c17e <_svfprintf_r+0x1de>
 800c24e:	2310      	movs	r3, #16
 800c250:	e795      	b.n	800c17e <_svfprintf_r+0x1de>
 800c252:	0021      	movs	r1, r4
 800c254:	c904      	ldmia	r1!, {r2}
 800c256:	ab3f      	add	r3, sp, #252	; 0xfc
 800c258:	910d      	str	r1, [sp, #52]	; 0x34
 800c25a:	211b      	movs	r1, #27
 800c25c:	701a      	strb	r2, [r3, #0]
 800c25e:	2200      	movs	r2, #0
 800c260:	a81e      	add	r0, sp, #120	; 0x78
 800c262:	1809      	adds	r1, r1, r0
 800c264:	700a      	strb	r2, [r1, #0]
 800c266:	920c      	str	r2, [sp, #48]	; 0x30
 800c268:	3201      	adds	r2, #1
 800c26a:	9209      	str	r2, [sp, #36]	; 0x24
 800c26c:	2200      	movs	r2, #0
 800c26e:	9308      	str	r3, [sp, #32]
 800c270:	0015      	movs	r5, r2
 800c272:	9219      	str	r2, [sp, #100]	; 0x64
 800c274:	9210      	str	r2, [sp, #64]	; 0x40
 800c276:	9211      	str	r2, [sp, #68]	; 0x44
 800c278:	e1f1      	b.n	800c65e <_svfprintf_r+0x6be>
 800c27a:	2310      	movs	r3, #16
 800c27c:	431e      	orrs	r6, r3
 800c27e:	06b3      	lsls	r3, r6, #26
 800c280:	d531      	bpl.n	800c2e6 <_svfprintf_r+0x346>
 800c282:	2307      	movs	r3, #7
 800c284:	3407      	adds	r4, #7
 800c286:	439c      	bics	r4, r3
 800c288:	0022      	movs	r2, r4
 800c28a:	ca18      	ldmia	r2!, {r3, r4}
 800c28c:	9306      	str	r3, [sp, #24]
 800c28e:	9407      	str	r4, [sp, #28]
 800c290:	920d      	str	r2, [sp, #52]	; 0x34
 800c292:	9a07      	ldr	r2, [sp, #28]
 800c294:	2301      	movs	r3, #1
 800c296:	2a00      	cmp	r2, #0
 800c298:	da0b      	bge.n	800c2b2 <_svfprintf_r+0x312>
 800c29a:	9c06      	ldr	r4, [sp, #24]
 800c29c:	9d07      	ldr	r5, [sp, #28]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	4261      	negs	r1, r4
 800c2a2:	41aa      	sbcs	r2, r5
 800c2a4:	9106      	str	r1, [sp, #24]
 800c2a6:	9207      	str	r2, [sp, #28]
 800c2a8:	221b      	movs	r2, #27
 800c2aa:	a91e      	add	r1, sp, #120	; 0x78
 800c2ac:	1852      	adds	r2, r2, r1
 800c2ae:	212d      	movs	r1, #45	; 0x2d
 800c2b0:	7011      	strb	r1, [r2, #0]
 800c2b2:	9907      	ldr	r1, [sp, #28]
 800c2b4:	9a06      	ldr	r2, [sp, #24]
 800c2b6:	430a      	orrs	r2, r1
 800c2b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c2ba:	3101      	adds	r1, #1
 800c2bc:	d101      	bne.n	800c2c2 <_svfprintf_r+0x322>
 800c2be:	f001 f87b 	bl	800d3b8 <_svfprintf_r+0x1418>
 800c2c2:	2180      	movs	r1, #128	; 0x80
 800c2c4:	0034      	movs	r4, r6
 800c2c6:	438c      	bics	r4, r1
 800c2c8:	2a00      	cmp	r2, #0
 800c2ca:	d001      	beq.n	800c2d0 <_svfprintf_r+0x330>
 800c2cc:	f001 f879 	bl	800d3c2 <_svfprintf_r+0x1422>
 800c2d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2d2:	2a00      	cmp	r2, #0
 800c2d4:	d101      	bne.n	800c2da <_svfprintf_r+0x33a>
 800c2d6:	f000 fcef 	bl	800ccb8 <_svfprintf_r+0xd18>
 800c2da:	2b01      	cmp	r3, #1
 800c2dc:	d001      	beq.n	800c2e2 <_svfprintf_r+0x342>
 800c2de:	f001 f874 	bl	800d3ca <_svfprintf_r+0x142a>
 800c2e2:	f000 fc79 	bl	800cbd8 <_svfprintf_r+0xc38>
 800c2e6:	0022      	movs	r2, r4
 800c2e8:	ca08      	ldmia	r2!, {r3}
 800c2ea:	920d      	str	r2, [sp, #52]	; 0x34
 800c2ec:	06f2      	lsls	r2, r6, #27
 800c2ee:	d503      	bpl.n	800c2f8 <_svfprintf_r+0x358>
 800c2f0:	9306      	str	r3, [sp, #24]
 800c2f2:	17db      	asrs	r3, r3, #31
 800c2f4:	9307      	str	r3, [sp, #28]
 800c2f6:	e7cc      	b.n	800c292 <_svfprintf_r+0x2f2>
 800c2f8:	0672      	lsls	r2, r6, #25
 800c2fa:	d501      	bpl.n	800c300 <_svfprintf_r+0x360>
 800c2fc:	b21b      	sxth	r3, r3
 800c2fe:	e7f7      	b.n	800c2f0 <_svfprintf_r+0x350>
 800c300:	05b2      	lsls	r2, r6, #22
 800c302:	d5f5      	bpl.n	800c2f0 <_svfprintf_r+0x350>
 800c304:	b25b      	sxtb	r3, r3
 800c306:	e7f3      	b.n	800c2f0 <_svfprintf_r+0x350>
 800c308:	2307      	movs	r3, #7
 800c30a:	3407      	adds	r4, #7
 800c30c:	439c      	bics	r4, r3
 800c30e:	0022      	movs	r2, r4
 800c310:	ca18      	ldmia	r2!, {r3, r4}
 800c312:	920d      	str	r2, [sp, #52]	; 0x34
 800c314:	2201      	movs	r2, #1
 800c316:	9314      	str	r3, [sp, #80]	; 0x50
 800c318:	9415      	str	r4, [sp, #84]	; 0x54
 800c31a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c31c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800c31e:	005c      	lsls	r4, r3, #1
 800c320:	0864      	lsrs	r4, r4, #1
 800c322:	0028      	movs	r0, r5
 800c324:	0021      	movs	r1, r4
 800c326:	4b3e      	ldr	r3, [pc, #248]	; (800c420 <_svfprintf_r+0x480>)
 800c328:	4252      	negs	r2, r2
 800c32a:	f7f5 ffe3 	bl	80022f4 <__aeabi_dcmpun>
 800c32e:	2800      	cmp	r0, #0
 800c330:	d126      	bne.n	800c380 <_svfprintf_r+0x3e0>
 800c332:	2201      	movs	r2, #1
 800c334:	0028      	movs	r0, r5
 800c336:	0021      	movs	r1, r4
 800c338:	4b39      	ldr	r3, [pc, #228]	; (800c420 <_svfprintf_r+0x480>)
 800c33a:	4252      	negs	r2, r2
 800c33c:	f7f4 f894 	bl	8000468 <__aeabi_dcmple>
 800c340:	2800      	cmp	r0, #0
 800c342:	d11d      	bne.n	800c380 <_svfprintf_r+0x3e0>
 800c344:	9814      	ldr	r0, [sp, #80]	; 0x50
 800c346:	9915      	ldr	r1, [sp, #84]	; 0x54
 800c348:	2200      	movs	r2, #0
 800c34a:	2300      	movs	r3, #0
 800c34c:	f7f4 f882 	bl	8000454 <__aeabi_dcmplt>
 800c350:	2800      	cmp	r0, #0
 800c352:	d004      	beq.n	800c35e <_svfprintf_r+0x3be>
 800c354:	231b      	movs	r3, #27
 800c356:	aa1e      	add	r2, sp, #120	; 0x78
 800c358:	189b      	adds	r3, r3, r2
 800c35a:	222d      	movs	r2, #45	; 0x2d
 800c35c:	701a      	strb	r2, [r3, #0]
 800c35e:	4b31      	ldr	r3, [pc, #196]	; (800c424 <_svfprintf_r+0x484>)
 800c360:	9308      	str	r3, [sp, #32]
 800c362:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c364:	2b47      	cmp	r3, #71	; 0x47
 800c366:	dd01      	ble.n	800c36c <_svfprintf_r+0x3cc>
 800c368:	4b2f      	ldr	r3, [pc, #188]	; (800c428 <_svfprintf_r+0x488>)
 800c36a:	9308      	str	r3, [sp, #32]
 800c36c:	2380      	movs	r3, #128	; 0x80
 800c36e:	439e      	bics	r6, r3
 800c370:	2300      	movs	r3, #0
 800c372:	930c      	str	r3, [sp, #48]	; 0x30
 800c374:	3303      	adds	r3, #3
 800c376:	9309      	str	r3, [sp, #36]	; 0x24
 800c378:	2300      	movs	r3, #0
 800c37a:	9319      	str	r3, [sp, #100]	; 0x64
 800c37c:	f000 fc78 	bl	800cc70 <_svfprintf_r+0xcd0>
 800c380:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c382:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c384:	0010      	movs	r0, r2
 800c386:	0019      	movs	r1, r3
 800c388:	f7f5 ffb4 	bl	80022f4 <__aeabi_dcmpun>
 800c38c:	2800      	cmp	r0, #0
 800c38e:	d00e      	beq.n	800c3ae <_svfprintf_r+0x40e>
 800c390:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c392:	2b00      	cmp	r3, #0
 800c394:	da04      	bge.n	800c3a0 <_svfprintf_r+0x400>
 800c396:	231b      	movs	r3, #27
 800c398:	aa1e      	add	r2, sp, #120	; 0x78
 800c39a:	189b      	adds	r3, r3, r2
 800c39c:	222d      	movs	r2, #45	; 0x2d
 800c39e:	701a      	strb	r2, [r3, #0]
 800c3a0:	4b22      	ldr	r3, [pc, #136]	; (800c42c <_svfprintf_r+0x48c>)
 800c3a2:	9308      	str	r3, [sp, #32]
 800c3a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c3a6:	2b47      	cmp	r3, #71	; 0x47
 800c3a8:	dde0      	ble.n	800c36c <_svfprintf_r+0x3cc>
 800c3aa:	4b21      	ldr	r3, [pc, #132]	; (800c430 <_svfprintf_r+0x490>)
 800c3ac:	e7dd      	b.n	800c36a <_svfprintf_r+0x3ca>
 800c3ae:	2320      	movs	r3, #32
 800c3b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c3b2:	439a      	bics	r2, r3
 800c3b4:	9210      	str	r2, [sp, #64]	; 0x40
 800c3b6:	2a41      	cmp	r2, #65	; 0x41
 800c3b8:	d123      	bne.n	800c402 <_svfprintf_r+0x462>
 800c3ba:	2230      	movs	r2, #48	; 0x30
 800c3bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c3be:	ab25      	add	r3, sp, #148	; 0x94
 800c3c0:	701a      	strb	r2, [r3, #0]
 800c3c2:	3248      	adds	r2, #72	; 0x48
 800c3c4:	2961      	cmp	r1, #97	; 0x61
 800c3c6:	d000      	beq.n	800c3ca <_svfprintf_r+0x42a>
 800c3c8:	3a20      	subs	r2, #32
 800c3ca:	705a      	strb	r2, [r3, #1]
 800c3cc:	2302      	movs	r3, #2
 800c3ce:	431e      	orrs	r6, r3
 800c3d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3d2:	2b63      	cmp	r3, #99	; 0x63
 800c3d4:	dd2e      	ble.n	800c434 <_svfprintf_r+0x494>
 800c3d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c3d8:	1c59      	adds	r1, r3, #1
 800c3da:	f7fd f969 	bl	80096b0 <_malloc_r>
 800c3de:	9008      	str	r0, [sp, #32]
 800c3e0:	2800      	cmp	r0, #0
 800c3e2:	d000      	beq.n	800c3e6 <_svfprintf_r+0x446>
 800c3e4:	e216      	b.n	800c814 <_svfprintf_r+0x874>
 800c3e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3e8:	899a      	ldrh	r2, [r3, #12]
 800c3ea:	2340      	movs	r3, #64	; 0x40
 800c3ec:	4313      	orrs	r3, r2
 800c3ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c3f0:	8193      	strh	r3, [r2, #12]
 800c3f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3f4:	899b      	ldrh	r3, [r3, #12]
 800c3f6:	065b      	lsls	r3, r3, #25
 800c3f8:	d400      	bmi.n	800c3fc <_svfprintf_r+0x45c>
 800c3fa:	e5f5      	b.n	800bfe8 <_svfprintf_r+0x48>
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	425b      	negs	r3, r3
 800c400:	e5f1      	b.n	800bfe6 <_svfprintf_r+0x46>
 800c402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c404:	900c      	str	r0, [sp, #48]	; 0x30
 800c406:	3301      	adds	r3, #1
 800c408:	d100      	bne.n	800c40c <_svfprintf_r+0x46c>
 800c40a:	e206      	b.n	800c81a <_svfprintf_r+0x87a>
 800c40c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c40e:	2b47      	cmp	r3, #71	; 0x47
 800c410:	d114      	bne.n	800c43c <_svfprintf_r+0x49c>
 800c412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c414:	2b00      	cmp	r3, #0
 800c416:	d111      	bne.n	800c43c <_svfprintf_r+0x49c>
 800c418:	3301      	adds	r3, #1
 800c41a:	9309      	str	r3, [sp, #36]	; 0x24
 800c41c:	e00e      	b.n	800c43c <_svfprintf_r+0x49c>
 800c41e:	46c0      	nop			; (mov r8, r8)
 800c420:	7fefffff 	.word	0x7fefffff
 800c424:	080133bc 	.word	0x080133bc
 800c428:	080133c0 	.word	0x080133c0
 800c42c:	080133c4 	.word	0x080133c4
 800c430:	080133c8 	.word	0x080133c8
 800c434:	2300      	movs	r3, #0
 800c436:	930c      	str	r3, [sp, #48]	; 0x30
 800c438:	ab3f      	add	r3, sp, #252	; 0xfc
 800c43a:	9308      	str	r3, [sp, #32]
 800c43c:	2380      	movs	r3, #128	; 0x80
 800c43e:	005b      	lsls	r3, r3, #1
 800c440:	4333      	orrs	r3, r6
 800c442:	931a      	str	r3, [sp, #104]	; 0x68
 800c444:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c446:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800c448:	2b00      	cmp	r3, #0
 800c44a:	db00      	blt.n	800c44e <_svfprintf_r+0x4ae>
 800c44c:	e1e7      	b.n	800c81e <_svfprintf_r+0x87e>
 800c44e:	2280      	movs	r2, #128	; 0x80
 800c450:	0612      	lsls	r2, r2, #24
 800c452:	4694      	mov	ip, r2
 800c454:	4463      	add	r3, ip
 800c456:	930e      	str	r3, [sp, #56]	; 0x38
 800c458:	232d      	movs	r3, #45	; 0x2d
 800c45a:	9322      	str	r3, [sp, #136]	; 0x88
 800c45c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c45e:	2b41      	cmp	r3, #65	; 0x41
 800c460:	d000      	beq.n	800c464 <_svfprintf_r+0x4c4>
 800c462:	e1f5      	b.n	800c850 <_svfprintf_r+0x8b0>
 800c464:	0028      	movs	r0, r5
 800c466:	aa26      	add	r2, sp, #152	; 0x98
 800c468:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c46a:	f002 fb73 	bl	800eb54 <frexp>
 800c46e:	23ff      	movs	r3, #255	; 0xff
 800c470:	2200      	movs	r2, #0
 800c472:	059b      	lsls	r3, r3, #22
 800c474:	f7f5 f8fa 	bl	800166c <__aeabi_dmul>
 800c478:	2200      	movs	r2, #0
 800c47a:	2300      	movs	r3, #0
 800c47c:	0004      	movs	r4, r0
 800c47e:	000d      	movs	r5, r1
 800c480:	f7f3 ffe2 	bl	8000448 <__aeabi_dcmpeq>
 800c484:	2800      	cmp	r0, #0
 800c486:	d001      	beq.n	800c48c <_svfprintf_r+0x4ec>
 800c488:	2301      	movs	r3, #1
 800c48a:	9326      	str	r3, [sp, #152]	; 0x98
 800c48c:	4bda      	ldr	r3, [pc, #872]	; (800c7f8 <_svfprintf_r+0x858>)
 800c48e:	9319      	str	r3, [sp, #100]	; 0x64
 800c490:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c492:	2b61      	cmp	r3, #97	; 0x61
 800c494:	d001      	beq.n	800c49a <_svfprintf_r+0x4fa>
 800c496:	4bd9      	ldr	r3, [pc, #868]	; (800c7fc <_svfprintf_r+0x85c>)
 800c498:	9319      	str	r3, [sp, #100]	; 0x64
 800c49a:	9b08      	ldr	r3, [sp, #32]
 800c49c:	930e      	str	r3, [sp, #56]	; 0x38
 800c49e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4a0:	3b01      	subs	r3, #1
 800c4a2:	9311      	str	r3, [sp, #68]	; 0x44
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	4bd6      	ldr	r3, [pc, #856]	; (800c800 <_svfprintf_r+0x860>)
 800c4a8:	0020      	movs	r0, r4
 800c4aa:	0029      	movs	r1, r5
 800c4ac:	f7f5 f8de 	bl	800166c <__aeabi_dmul>
 800c4b0:	000d      	movs	r5, r1
 800c4b2:	0004      	movs	r4, r0
 800c4b4:	f7f5 ff3c 	bl	8002330 <__aeabi_d2iz>
 800c4b8:	9021      	str	r0, [sp, #132]	; 0x84
 800c4ba:	f7f5 ff6f 	bl	800239c <__aeabi_i2d>
 800c4be:	0002      	movs	r2, r0
 800c4c0:	000b      	movs	r3, r1
 800c4c2:	0020      	movs	r0, r4
 800c4c4:	0029      	movs	r1, r5
 800c4c6:	f7f5 fb93 	bl	8001bf0 <__aeabi_dsub>
 800c4ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c4cc:	000d      	movs	r5, r1
 800c4ce:	001a      	movs	r2, r3
 800c4d0:	3201      	adds	r2, #1
 800c4d2:	9921      	ldr	r1, [sp, #132]	; 0x84
 800c4d4:	920e      	str	r2, [sp, #56]	; 0x38
 800c4d6:	9223      	str	r2, [sp, #140]	; 0x8c
 800c4d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c4da:	0004      	movs	r4, r0
 800c4dc:	5c52      	ldrb	r2, [r2, r1]
 800c4de:	701a      	strb	r2, [r3, #0]
 800c4e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c4e2:	9320      	str	r3, [sp, #128]	; 0x80
 800c4e4:	3301      	adds	r3, #1
 800c4e6:	d00a      	beq.n	800c4fe <_svfprintf_r+0x55e>
 800c4e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	3b01      	subs	r3, #1
 800c4ee:	9311      	str	r3, [sp, #68]	; 0x44
 800c4f0:	0020      	movs	r0, r4
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	0029      	movs	r1, r5
 800c4f6:	f7f3 ffa7 	bl	8000448 <__aeabi_dcmpeq>
 800c4fa:	2800      	cmp	r0, #0
 800c4fc:	d0d2      	beq.n	800c4a4 <_svfprintf_r+0x504>
 800c4fe:	2200      	movs	r2, #0
 800c500:	0020      	movs	r0, r4
 800c502:	0029      	movs	r1, r5
 800c504:	4bbf      	ldr	r3, [pc, #764]	; (800c804 <_svfprintf_r+0x864>)
 800c506:	f7f3 ffb9 	bl	800047c <__aeabi_dcmpgt>
 800c50a:	2800      	cmp	r0, #0
 800c50c:	d10c      	bne.n	800c528 <_svfprintf_r+0x588>
 800c50e:	2200      	movs	r2, #0
 800c510:	0020      	movs	r0, r4
 800c512:	0029      	movs	r1, r5
 800c514:	4bbb      	ldr	r3, [pc, #748]	; (800c804 <_svfprintf_r+0x864>)
 800c516:	f7f3 ff97 	bl	8000448 <__aeabi_dcmpeq>
 800c51a:	2800      	cmp	r0, #0
 800c51c:	d100      	bne.n	800c520 <_svfprintf_r+0x580>
 800c51e:	e191      	b.n	800c844 <_svfprintf_r+0x8a4>
 800c520:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c522:	07db      	lsls	r3, r3, #31
 800c524:	d400      	bmi.n	800c528 <_svfprintf_r+0x588>
 800c526:	e18d      	b.n	800c844 <_svfprintf_r+0x8a4>
 800c528:	2030      	movs	r0, #48	; 0x30
 800c52a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c52c:	932a      	str	r3, [sp, #168]	; 0xa8
 800c52e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c530:	7bdb      	ldrb	r3, [r3, #15]
 800c532:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800c534:	3a01      	subs	r2, #1
 800c536:	922a      	str	r2, [sp, #168]	; 0xa8
 800c538:	7811      	ldrb	r1, [r2, #0]
 800c53a:	4299      	cmp	r1, r3
 800c53c:	d100      	bne.n	800c540 <_svfprintf_r+0x5a0>
 800c53e:	e171      	b.n	800c824 <_svfprintf_r+0x884>
 800c540:	1c4b      	adds	r3, r1, #1
 800c542:	b2db      	uxtb	r3, r3
 800c544:	2939      	cmp	r1, #57	; 0x39
 800c546:	d101      	bne.n	800c54c <_svfprintf_r+0x5ac>
 800c548:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c54a:	7a9b      	ldrb	r3, [r3, #10]
 800c54c:	7013      	strb	r3, [r2, #0]
 800c54e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c550:	9a08      	ldr	r2, [sp, #32]
 800c552:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800c554:	1a9b      	subs	r3, r3, r2
 800c556:	930e      	str	r3, [sp, #56]	; 0x38
 800c558:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c55a:	2b47      	cmp	r3, #71	; 0x47
 800c55c:	d000      	beq.n	800c560 <_svfprintf_r+0x5c0>
 800c55e:	e1c4      	b.n	800c8ea <_svfprintf_r+0x94a>
 800c560:	1ceb      	adds	r3, r5, #3
 800c562:	db03      	blt.n	800c56c <_svfprintf_r+0x5cc>
 800c564:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c566:	42ab      	cmp	r3, r5
 800c568:	db00      	blt.n	800c56c <_svfprintf_r+0x5cc>
 800c56a:	e1e6      	b.n	800c93a <_svfprintf_r+0x99a>
 800c56c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c56e:	3b02      	subs	r3, #2
 800c570:	930f      	str	r3, [sp, #60]	; 0x3c
 800c572:	223c      	movs	r2, #60	; 0x3c
 800c574:	466b      	mov	r3, sp
 800c576:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c578:	189b      	adds	r3, r3, r2
 800c57a:	1e6c      	subs	r4, r5, #1
 800c57c:	3a1c      	subs	r2, #28
 800c57e:	2000      	movs	r0, #0
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	9426      	str	r4, [sp, #152]	; 0x98
 800c584:	4391      	bics	r1, r2
 800c586:	2941      	cmp	r1, #65	; 0x41
 800c588:	d102      	bne.n	800c590 <_svfprintf_r+0x5f0>
 800c58a:	330f      	adds	r3, #15
 800c58c:	b2db      	uxtb	r3, r3
 800c58e:	3001      	adds	r0, #1
 800c590:	a928      	add	r1, sp, #160	; 0xa0
 800c592:	700b      	strb	r3, [r1, #0]
 800c594:	232b      	movs	r3, #43	; 0x2b
 800c596:	2c00      	cmp	r4, #0
 800c598:	da02      	bge.n	800c5a0 <_svfprintf_r+0x600>
 800c59a:	2401      	movs	r4, #1
 800c59c:	3302      	adds	r3, #2
 800c59e:	1b64      	subs	r4, r4, r5
 800c5a0:	704b      	strb	r3, [r1, #1]
 800c5a2:	2c09      	cmp	r4, #9
 800c5a4:	dc00      	bgt.n	800c5a8 <_svfprintf_r+0x608>
 800c5a6:	e1ba      	b.n	800c91e <_svfprintf_r+0x97e>
 800c5a8:	2337      	movs	r3, #55	; 0x37
 800c5aa:	250a      	movs	r5, #10
 800c5ac:	aa1e      	add	r2, sp, #120	; 0x78
 800c5ae:	189b      	adds	r3, r3, r2
 800c5b0:	9310      	str	r3, [sp, #64]	; 0x40
 800c5b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c5b4:	0020      	movs	r0, r4
 800c5b6:	9309      	str	r3, [sp, #36]	; 0x24
 800c5b8:	0029      	movs	r1, r5
 800c5ba:	3b01      	subs	r3, #1
 800c5bc:	9310      	str	r3, [sp, #64]	; 0x40
 800c5be:	f7f3 ff2d 	bl	800041c <__aeabi_idivmod>
 800c5c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c5c4:	3130      	adds	r1, #48	; 0x30
 800c5c6:	7019      	strb	r1, [r3, #0]
 800c5c8:	0020      	movs	r0, r4
 800c5ca:	0029      	movs	r1, r5
 800c5cc:	9411      	str	r4, [sp, #68]	; 0x44
 800c5ce:	f7f3 fe3f 	bl	8000250 <__divsi3>
 800c5d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c5d4:	0004      	movs	r4, r0
 800c5d6:	2b63      	cmp	r3, #99	; 0x63
 800c5d8:	dceb      	bgt.n	800c5b2 <_svfprintf_r+0x612>
 800c5da:	222a      	movs	r2, #42	; 0x2a
 800c5dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5de:	a81e      	add	r0, sp, #120	; 0x78
 800c5e0:	1e99      	subs	r1, r3, #2
 800c5e2:	1812      	adds	r2, r2, r0
 800c5e4:	2037      	movs	r0, #55	; 0x37
 800c5e6:	000b      	movs	r3, r1
 800c5e8:	3430      	adds	r4, #48	; 0x30
 800c5ea:	700c      	strb	r4, [r1, #0]
 800c5ec:	ac1e      	add	r4, sp, #120	; 0x78
 800c5ee:	1900      	adds	r0, r0, r4
 800c5f0:	4283      	cmp	r3, r0
 800c5f2:	d200      	bcs.n	800c5f6 <_svfprintf_r+0x656>
 800c5f4:	e18e      	b.n	800c914 <_svfprintf_r+0x974>
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	4281      	cmp	r1, r0
 800c5fa:	d804      	bhi.n	800c606 <_svfprintf_r+0x666>
 800c5fc:	aa1e      	add	r2, sp, #120	; 0x78
 800c5fe:	3339      	adds	r3, #57	; 0x39
 800c600:	189b      	adds	r3, r3, r2
 800c602:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c604:	1a9b      	subs	r3, r3, r2
 800c606:	222a      	movs	r2, #42	; 0x2a
 800c608:	a91e      	add	r1, sp, #120	; 0x78
 800c60a:	1852      	adds	r2, r2, r1
 800c60c:	18d3      	adds	r3, r2, r3
 800c60e:	aa28      	add	r2, sp, #160	; 0xa0
 800c610:	1a9b      	subs	r3, r3, r2
 800c612:	931e      	str	r3, [sp, #120]	; 0x78
 800c614:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c616:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c618:	4694      	mov	ip, r2
 800c61a:	4463      	add	r3, ip
 800c61c:	9309      	str	r3, [sp, #36]	; 0x24
 800c61e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c620:	2b01      	cmp	r3, #1
 800c622:	dc01      	bgt.n	800c628 <_svfprintf_r+0x688>
 800c624:	07f3      	lsls	r3, r6, #31
 800c626:	d504      	bpl.n	800c632 <_svfprintf_r+0x692>
 800c628:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c62a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c62c:	4694      	mov	ip, r2
 800c62e:	4463      	add	r3, ip
 800c630:	9309      	str	r3, [sp, #36]	; 0x24
 800c632:	2280      	movs	r2, #128	; 0x80
 800c634:	4b74      	ldr	r3, [pc, #464]	; (800c808 <_svfprintf_r+0x868>)
 800c636:	0052      	lsls	r2, r2, #1
 800c638:	4033      	ands	r3, r6
 800c63a:	431a      	orrs	r2, r3
 800c63c:	2300      	movs	r3, #0
 800c63e:	001d      	movs	r5, r3
 800c640:	921a      	str	r2, [sp, #104]	; 0x68
 800c642:	9310      	str	r3, [sp, #64]	; 0x40
 800c644:	9311      	str	r3, [sp, #68]	; 0x44
 800c646:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c648:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800c64a:	9319      	str	r3, [sp, #100]	; 0x64
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d006      	beq.n	800c65e <_svfprintf_r+0x6be>
 800c650:	231b      	movs	r3, #27
 800c652:	aa1e      	add	r2, sp, #120	; 0x78
 800c654:	189b      	adds	r3, r3, r2
 800c656:	222d      	movs	r2, #45	; 0x2d
 800c658:	701a      	strb	r2, [r3, #0]
 800c65a:	2300      	movs	r3, #0
 800c65c:	9319      	str	r3, [sp, #100]	; 0x64
 800c65e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c660:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c662:	931a      	str	r3, [sp, #104]	; 0x68
 800c664:	4293      	cmp	r3, r2
 800c666:	da00      	bge.n	800c66a <_svfprintf_r+0x6ca>
 800c668:	921a      	str	r2, [sp, #104]	; 0x68
 800c66a:	231b      	movs	r3, #27
 800c66c:	aa1e      	add	r2, sp, #120	; 0x78
 800c66e:	189b      	adds	r3, r3, r2
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	1e5a      	subs	r2, r3, #1
 800c674:	4193      	sbcs	r3, r2
 800c676:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c678:	18d3      	adds	r3, r2, r3
 800c67a:	931a      	str	r3, [sp, #104]	; 0x68
 800c67c:	0032      	movs	r2, r6
 800c67e:	2302      	movs	r3, #2
 800c680:	401a      	ands	r2, r3
 800c682:	9220      	str	r2, [sp, #128]	; 0x80
 800c684:	421e      	tst	r6, r3
 800c686:	d002      	beq.n	800c68e <_svfprintf_r+0x6ee>
 800c688:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c68a:	3302      	adds	r3, #2
 800c68c:	931a      	str	r3, [sp, #104]	; 0x68
 800c68e:	2384      	movs	r3, #132	; 0x84
 800c690:	0032      	movs	r2, r6
 800c692:	401a      	ands	r2, r3
 800c694:	9221      	str	r2, [sp, #132]	; 0x84
 800c696:	421e      	tst	r6, r3
 800c698:	d11f      	bne.n	800c6da <_svfprintf_r+0x73a>
 800c69a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c69c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c69e:	1a9c      	subs	r4, r3, r2
 800c6a0:	2c00      	cmp	r4, #0
 800c6a2:	dd1a      	ble.n	800c6da <_svfprintf_r+0x73a>
 800c6a4:	0039      	movs	r1, r7
 800c6a6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c6a8:	4858      	ldr	r0, [pc, #352]	; (800c80c <_svfprintf_r+0x86c>)
 800c6aa:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800c6ac:	3301      	adds	r3, #1
 800c6ae:	3108      	adds	r1, #8
 800c6b0:	6038      	str	r0, [r7, #0]
 800c6b2:	2c10      	cmp	r4, #16
 800c6b4:	dd00      	ble.n	800c6b8 <_svfprintf_r+0x718>
 800c6b6:	e31c      	b.n	800ccf2 <_svfprintf_r+0xd52>
 800c6b8:	607c      	str	r4, [r7, #4]
 800c6ba:	18a4      	adds	r4, r4, r2
 800c6bc:	000f      	movs	r7, r1
 800c6be:	942e      	str	r4, [sp, #184]	; 0xb8
 800c6c0:	932d      	str	r3, [sp, #180]	; 0xb4
 800c6c2:	2b07      	cmp	r3, #7
 800c6c4:	dd09      	ble.n	800c6da <_svfprintf_r+0x73a>
 800c6c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c6c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c6ca:	aa2c      	add	r2, sp, #176	; 0xb0
 800c6cc:	f003 fd7e 	bl	80101cc <__ssprint_r>
 800c6d0:	2800      	cmp	r0, #0
 800c6d2:	d001      	beq.n	800c6d8 <_svfprintf_r+0x738>
 800c6d4:	f000 fe43 	bl	800d35e <_svfprintf_r+0x13be>
 800c6d8:	af2f      	add	r7, sp, #188	; 0xbc
 800c6da:	221b      	movs	r2, #27
 800c6dc:	a91e      	add	r1, sp, #120	; 0x78
 800c6de:	1852      	adds	r2, r2, r1
 800c6e0:	7811      	ldrb	r1, [r2, #0]
 800c6e2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800c6e4:	2900      	cmp	r1, #0
 800c6e6:	d014      	beq.n	800c712 <_svfprintf_r+0x772>
 800c6e8:	603a      	str	r2, [r7, #0]
 800c6ea:	2201      	movs	r2, #1
 800c6ec:	189b      	adds	r3, r3, r2
 800c6ee:	932e      	str	r3, [sp, #184]	; 0xb8
 800c6f0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c6f2:	607a      	str	r2, [r7, #4]
 800c6f4:	189b      	adds	r3, r3, r2
 800c6f6:	932d      	str	r3, [sp, #180]	; 0xb4
 800c6f8:	3708      	adds	r7, #8
 800c6fa:	2b07      	cmp	r3, #7
 800c6fc:	dd09      	ble.n	800c712 <_svfprintf_r+0x772>
 800c6fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c700:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c702:	aa2c      	add	r2, sp, #176	; 0xb0
 800c704:	f003 fd62 	bl	80101cc <__ssprint_r>
 800c708:	2800      	cmp	r0, #0
 800c70a:	d001      	beq.n	800c710 <_svfprintf_r+0x770>
 800c70c:	f000 fe27 	bl	800d35e <_svfprintf_r+0x13be>
 800c710:	af2f      	add	r7, sp, #188	; 0xbc
 800c712:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c714:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800c716:	2a00      	cmp	r2, #0
 800c718:	d015      	beq.n	800c746 <_svfprintf_r+0x7a6>
 800c71a:	aa25      	add	r2, sp, #148	; 0x94
 800c71c:	603a      	str	r2, [r7, #0]
 800c71e:	2202      	movs	r2, #2
 800c720:	189b      	adds	r3, r3, r2
 800c722:	932e      	str	r3, [sp, #184]	; 0xb8
 800c724:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c726:	607a      	str	r2, [r7, #4]
 800c728:	3301      	adds	r3, #1
 800c72a:	932d      	str	r3, [sp, #180]	; 0xb4
 800c72c:	3708      	adds	r7, #8
 800c72e:	2b07      	cmp	r3, #7
 800c730:	dd09      	ble.n	800c746 <_svfprintf_r+0x7a6>
 800c732:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c734:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c736:	aa2c      	add	r2, sp, #176	; 0xb0
 800c738:	f003 fd48 	bl	80101cc <__ssprint_r>
 800c73c:	2800      	cmp	r0, #0
 800c73e:	d001      	beq.n	800c744 <_svfprintf_r+0x7a4>
 800c740:	f000 fe0d 	bl	800d35e <_svfprintf_r+0x13be>
 800c744:	af2f      	add	r7, sp, #188	; 0xbc
 800c746:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c748:	2b80      	cmp	r3, #128	; 0x80
 800c74a:	d11f      	bne.n	800c78c <_svfprintf_r+0x7ec>
 800c74c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c74e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c750:	1a9c      	subs	r4, r3, r2
 800c752:	2c00      	cmp	r4, #0
 800c754:	dd1a      	ble.n	800c78c <_svfprintf_r+0x7ec>
 800c756:	0039      	movs	r1, r7
 800c758:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c75a:	482d      	ldr	r0, [pc, #180]	; (800c810 <_svfprintf_r+0x870>)
 800c75c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800c75e:	3301      	adds	r3, #1
 800c760:	3108      	adds	r1, #8
 800c762:	6038      	str	r0, [r7, #0]
 800c764:	2c10      	cmp	r4, #16
 800c766:	dd00      	ble.n	800c76a <_svfprintf_r+0x7ca>
 800c768:	e2d6      	b.n	800cd18 <_svfprintf_r+0xd78>
 800c76a:	607c      	str	r4, [r7, #4]
 800c76c:	18a4      	adds	r4, r4, r2
 800c76e:	000f      	movs	r7, r1
 800c770:	942e      	str	r4, [sp, #184]	; 0xb8
 800c772:	932d      	str	r3, [sp, #180]	; 0xb4
 800c774:	2b07      	cmp	r3, #7
 800c776:	dd09      	ble.n	800c78c <_svfprintf_r+0x7ec>
 800c778:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c77a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c77c:	aa2c      	add	r2, sp, #176	; 0xb0
 800c77e:	f003 fd25 	bl	80101cc <__ssprint_r>
 800c782:	2800      	cmp	r0, #0
 800c784:	d001      	beq.n	800c78a <_svfprintf_r+0x7ea>
 800c786:	f000 fdea 	bl	800d35e <_svfprintf_r+0x13be>
 800c78a:	af2f      	add	r7, sp, #188	; 0xbc
 800c78c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c78e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c790:	1a9c      	subs	r4, r3, r2
 800c792:	2c00      	cmp	r4, #0
 800c794:	dd1a      	ble.n	800c7cc <_svfprintf_r+0x82c>
 800c796:	0039      	movs	r1, r7
 800c798:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c79a:	481d      	ldr	r0, [pc, #116]	; (800c810 <_svfprintf_r+0x870>)
 800c79c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800c79e:	3301      	adds	r3, #1
 800c7a0:	3108      	adds	r1, #8
 800c7a2:	6038      	str	r0, [r7, #0]
 800c7a4:	2c10      	cmp	r4, #16
 800c7a6:	dd00      	ble.n	800c7aa <_svfprintf_r+0x80a>
 800c7a8:	e2c9      	b.n	800cd3e <_svfprintf_r+0xd9e>
 800c7aa:	18a2      	adds	r2, r4, r2
 800c7ac:	607c      	str	r4, [r7, #4]
 800c7ae:	922e      	str	r2, [sp, #184]	; 0xb8
 800c7b0:	000f      	movs	r7, r1
 800c7b2:	932d      	str	r3, [sp, #180]	; 0xb4
 800c7b4:	2b07      	cmp	r3, #7
 800c7b6:	dd09      	ble.n	800c7cc <_svfprintf_r+0x82c>
 800c7b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c7ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c7bc:	aa2c      	add	r2, sp, #176	; 0xb0
 800c7be:	f003 fd05 	bl	80101cc <__ssprint_r>
 800c7c2:	2800      	cmp	r0, #0
 800c7c4:	d001      	beq.n	800c7ca <_svfprintf_r+0x82a>
 800c7c6:	f000 fdca 	bl	800d35e <_svfprintf_r+0x13be>
 800c7ca:	af2f      	add	r7, sp, #188	; 0xbc
 800c7cc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800c7ce:	9319      	str	r3, [sp, #100]	; 0x64
 800c7d0:	05f3      	lsls	r3, r6, #23
 800c7d2:	d500      	bpl.n	800c7d6 <_svfprintf_r+0x836>
 800c7d4:	e2ce      	b.n	800cd74 <_svfprintf_r+0xdd4>
 800c7d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7d8:	9b08      	ldr	r3, [sp, #32]
 800c7da:	4694      	mov	ip, r2
 800c7dc:	603b      	str	r3, [r7, #0]
 800c7de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7e0:	607b      	str	r3, [r7, #4]
 800c7e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c7e4:	4463      	add	r3, ip
 800c7e6:	932e      	str	r3, [sp, #184]	; 0xb8
 800c7e8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	932d      	str	r3, [sp, #180]	; 0xb4
 800c7ee:	2b07      	cmp	r3, #7
 800c7f0:	dd00      	ble.n	800c7f4 <_svfprintf_r+0x854>
 800c7f2:	e3a3      	b.n	800cf3c <_svfprintf_r+0xf9c>
 800c7f4:	3708      	adds	r7, #8
 800c7f6:	e301      	b.n	800cdfc <_svfprintf_r+0xe5c>
 800c7f8:	080133cc 	.word	0x080133cc
 800c7fc:	080133dd 	.word	0x080133dd
 800c800:	40300000 	.word	0x40300000
 800c804:	3fe00000 	.word	0x3fe00000
 800c808:	fffffbff 	.word	0xfffffbff
 800c80c:	080133f0 	.word	0x080133f0
 800c810:	08013400 	.word	0x08013400
 800c814:	9b08      	ldr	r3, [sp, #32]
 800c816:	930c      	str	r3, [sp, #48]	; 0x30
 800c818:	e610      	b.n	800c43c <_svfprintf_r+0x49c>
 800c81a:	2306      	movs	r3, #6
 800c81c:	e5fd      	b.n	800c41a <_svfprintf_r+0x47a>
 800c81e:	930e      	str	r3, [sp, #56]	; 0x38
 800c820:	2300      	movs	r3, #0
 800c822:	e61a      	b.n	800c45a <_svfprintf_r+0x4ba>
 800c824:	7010      	strb	r0, [r2, #0]
 800c826:	e684      	b.n	800c532 <_svfprintf_r+0x592>
 800c828:	7018      	strb	r0, [r3, #0]
 800c82a:	3301      	adds	r3, #1
 800c82c:	1aca      	subs	r2, r1, r3
 800c82e:	d5fb      	bpl.n	800c828 <_svfprintf_r+0x888>
 800c830:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c832:	2300      	movs	r3, #0
 800c834:	3201      	adds	r2, #1
 800c836:	db01      	blt.n	800c83c <_svfprintf_r+0x89c>
 800c838:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c83a:	3301      	adds	r3, #1
 800c83c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c83e:	18d3      	adds	r3, r2, r3
 800c840:	9323      	str	r3, [sp, #140]	; 0x8c
 800c842:	e684      	b.n	800c54e <_svfprintf_r+0x5ae>
 800c844:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c846:	9920      	ldr	r1, [sp, #128]	; 0x80
 800c848:	2030      	movs	r0, #48	; 0x30
 800c84a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c84c:	1851      	adds	r1, r2, r1
 800c84e:	e7ed      	b.n	800c82c <_svfprintf_r+0x88c>
 800c850:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c852:	2303      	movs	r3, #3
 800c854:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c856:	2a46      	cmp	r2, #70	; 0x46
 800c858:	d006      	beq.n	800c868 <_svfprintf_r+0x8c8>
 800c85a:	0014      	movs	r4, r2
 800c85c:	3c45      	subs	r4, #69	; 0x45
 800c85e:	4262      	negs	r2, r4
 800c860:	4154      	adcs	r4, r2
 800c862:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c864:	3b01      	subs	r3, #1
 800c866:	1914      	adds	r4, r2, r4
 800c868:	aa2a      	add	r2, sp, #168	; 0xa8
 800c86a:	9204      	str	r2, [sp, #16]
 800c86c:	aa27      	add	r2, sp, #156	; 0x9c
 800c86e:	9203      	str	r2, [sp, #12]
 800c870:	aa26      	add	r2, sp, #152	; 0x98
 800c872:	9202      	str	r2, [sp, #8]
 800c874:	9300      	str	r3, [sp, #0]
 800c876:	002a      	movs	r2, r5
 800c878:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c87a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c87c:	9401      	str	r4, [sp, #4]
 800c87e:	f002 fad7 	bl	800ee30 <_dtoa_r>
 800c882:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c884:	9008      	str	r0, [sp, #32]
 800c886:	2b47      	cmp	r3, #71	; 0x47
 800c888:	d103      	bne.n	800c892 <_svfprintf_r+0x8f2>
 800c88a:	07f3      	lsls	r3, r6, #31
 800c88c:	d401      	bmi.n	800c892 <_svfprintf_r+0x8f2>
 800c88e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800c890:	e65e      	b.n	800c550 <_svfprintf_r+0x5b0>
 800c892:	9b08      	ldr	r3, [sp, #32]
 800c894:	191b      	adds	r3, r3, r4
 800c896:	9311      	str	r3, [sp, #68]	; 0x44
 800c898:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c89a:	2b46      	cmp	r3, #70	; 0x46
 800c89c:	d112      	bne.n	800c8c4 <_svfprintf_r+0x924>
 800c89e:	9b08      	ldr	r3, [sp, #32]
 800c8a0:	781b      	ldrb	r3, [r3, #0]
 800c8a2:	2b30      	cmp	r3, #48	; 0x30
 800c8a4:	d10a      	bne.n	800c8bc <_svfprintf_r+0x91c>
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	0028      	movs	r0, r5
 800c8ac:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c8ae:	f7f3 fdcb 	bl	8000448 <__aeabi_dcmpeq>
 800c8b2:	2800      	cmp	r0, #0
 800c8b4:	d102      	bne.n	800c8bc <_svfprintf_r+0x91c>
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	1b1b      	subs	r3, r3, r4
 800c8ba:	9326      	str	r3, [sp, #152]	; 0x98
 800c8bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c8be:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c8c0:	18d3      	adds	r3, r2, r3
 800c8c2:	9311      	str	r3, [sp, #68]	; 0x44
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	0028      	movs	r0, r5
 800c8ca:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c8cc:	f7f3 fdbc 	bl	8000448 <__aeabi_dcmpeq>
 800c8d0:	2800      	cmp	r0, #0
 800c8d2:	d001      	beq.n	800c8d8 <_svfprintf_r+0x938>
 800c8d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c8d6:	932a      	str	r3, [sp, #168]	; 0xa8
 800c8d8:	2230      	movs	r2, #48	; 0x30
 800c8da:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800c8dc:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c8de:	4299      	cmp	r1, r3
 800c8e0:	d9d5      	bls.n	800c88e <_svfprintf_r+0x8ee>
 800c8e2:	1c59      	adds	r1, r3, #1
 800c8e4:	912a      	str	r1, [sp, #168]	; 0xa8
 800c8e6:	701a      	strb	r2, [r3, #0]
 800c8e8:	e7f7      	b.n	800c8da <_svfprintf_r+0x93a>
 800c8ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c8ec:	2b46      	cmp	r3, #70	; 0x46
 800c8ee:	d000      	beq.n	800c8f2 <_svfprintf_r+0x952>
 800c8f0:	e63f      	b.n	800c572 <_svfprintf_r+0x5d2>
 800c8f2:	2201      	movs	r2, #1
 800c8f4:	0033      	movs	r3, r6
 800c8f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c8f8:	4013      	ands	r3, r2
 800c8fa:	430b      	orrs	r3, r1
 800c8fc:	2d00      	cmp	r5, #0
 800c8fe:	dd2c      	ble.n	800c95a <_svfprintf_r+0x9ba>
 800c900:	2b00      	cmp	r3, #0
 800c902:	d046      	beq.n	800c992 <_svfprintf_r+0x9f2>
 800c904:	000a      	movs	r2, r1
 800c906:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c908:	18eb      	adds	r3, r5, r3
 800c90a:	18d3      	adds	r3, r2, r3
 800c90c:	9309      	str	r3, [sp, #36]	; 0x24
 800c90e:	2366      	movs	r3, #102	; 0x66
 800c910:	930f      	str	r3, [sp, #60]	; 0x3c
 800c912:	e030      	b.n	800c976 <_svfprintf_r+0x9d6>
 800c914:	781c      	ldrb	r4, [r3, #0]
 800c916:	3301      	adds	r3, #1
 800c918:	7014      	strb	r4, [r2, #0]
 800c91a:	3201      	adds	r2, #1
 800c91c:	e668      	b.n	800c5f0 <_svfprintf_r+0x650>
 800c91e:	222a      	movs	r2, #42	; 0x2a
 800c920:	ab1e      	add	r3, sp, #120	; 0x78
 800c922:	18d2      	adds	r2, r2, r3
 800c924:	2800      	cmp	r0, #0
 800c926:	d104      	bne.n	800c932 <_svfprintf_r+0x992>
 800c928:	2330      	movs	r3, #48	; 0x30
 800c92a:	222b      	movs	r2, #43	; 0x2b
 800c92c:	708b      	strb	r3, [r1, #2]
 800c92e:	ab1e      	add	r3, sp, #120	; 0x78
 800c930:	18d2      	adds	r2, r2, r3
 800c932:	3430      	adds	r4, #48	; 0x30
 800c934:	1c53      	adds	r3, r2, #1
 800c936:	7014      	strb	r4, [r2, #0]
 800c938:	e669      	b.n	800c60e <_svfprintf_r+0x66e>
 800c93a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c93c:	42ab      	cmp	r3, r5
 800c93e:	dd12      	ble.n	800c966 <_svfprintf_r+0x9c6>
 800c940:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c942:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c944:	4694      	mov	ip, r2
 800c946:	4463      	add	r3, ip
 800c948:	9309      	str	r3, [sp, #36]	; 0x24
 800c94a:	2367      	movs	r3, #103	; 0x67
 800c94c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c94e:	2d00      	cmp	r5, #0
 800c950:	dc11      	bgt.n	800c976 <_svfprintf_r+0x9d6>
 800c952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c954:	1b5b      	subs	r3, r3, r5
 800c956:	3301      	adds	r3, #1
 800c958:	e00c      	b.n	800c974 <_svfprintf_r+0x9d4>
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d01b      	beq.n	800c996 <_svfprintf_r+0x9f6>
 800c95e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c960:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c962:	3301      	adds	r3, #1
 800c964:	e7d1      	b.n	800c90a <_svfprintf_r+0x96a>
 800c966:	2367      	movs	r3, #103	; 0x67
 800c968:	9509      	str	r5, [sp, #36]	; 0x24
 800c96a:	930f      	str	r3, [sp, #60]	; 0x3c
 800c96c:	07f3      	lsls	r3, r6, #31
 800c96e:	d502      	bpl.n	800c976 <_svfprintf_r+0x9d6>
 800c970:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c972:	18eb      	adds	r3, r5, r3
 800c974:	9309      	str	r3, [sp, #36]	; 0x24
 800c976:	2380      	movs	r3, #128	; 0x80
 800c978:	0032      	movs	r2, r6
 800c97a:	00db      	lsls	r3, r3, #3
 800c97c:	401a      	ands	r2, r3
 800c97e:	9211      	str	r2, [sp, #68]	; 0x44
 800c980:	2200      	movs	r2, #0
 800c982:	9210      	str	r2, [sp, #64]	; 0x40
 800c984:	421e      	tst	r6, r3
 800c986:	d100      	bne.n	800c98a <_svfprintf_r+0x9ea>
 800c988:	e65d      	b.n	800c646 <_svfprintf_r+0x6a6>
 800c98a:	4295      	cmp	r5, r2
 800c98c:	dc25      	bgt.n	800c9da <_svfprintf_r+0xa3a>
 800c98e:	9211      	str	r2, [sp, #68]	; 0x44
 800c990:	e659      	b.n	800c646 <_svfprintf_r+0x6a6>
 800c992:	9509      	str	r5, [sp, #36]	; 0x24
 800c994:	e7bb      	b.n	800c90e <_svfprintf_r+0x96e>
 800c996:	2366      	movs	r3, #102	; 0x66
 800c998:	9209      	str	r2, [sp, #36]	; 0x24
 800c99a:	930f      	str	r3, [sp, #60]	; 0x3c
 800c99c:	e7eb      	b.n	800c976 <_svfprintf_r+0x9d6>
 800c99e:	42ab      	cmp	r3, r5
 800c9a0:	da0e      	bge.n	800c9c0 <_svfprintf_r+0xa20>
 800c9a2:	1aed      	subs	r5, r5, r3
 800c9a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c9a6:	785b      	ldrb	r3, [r3, #1]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d012      	beq.n	800c9d2 <_svfprintf_r+0xa32>
 800c9ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c9ae:	3301      	adds	r3, #1
 800c9b0:	9311      	str	r3, [sp, #68]	; 0x44
 800c9b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	9312      	str	r3, [sp, #72]	; 0x48
 800c9b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c9ba:	781b      	ldrb	r3, [r3, #0]
 800c9bc:	2bff      	cmp	r3, #255	; 0xff
 800c9be:	d1ee      	bne.n	800c99e <_svfprintf_r+0x9fe>
 800c9c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c9c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c9c4:	189b      	adds	r3, r3, r2
 800c9c6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c9c8:	4353      	muls	r3, r2
 800c9ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9cc:	189b      	adds	r3, r3, r2
 800c9ce:	9309      	str	r3, [sp, #36]	; 0x24
 800c9d0:	e639      	b.n	800c646 <_svfprintf_r+0x6a6>
 800c9d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c9d4:	3301      	adds	r3, #1
 800c9d6:	9310      	str	r3, [sp, #64]	; 0x40
 800c9d8:	e7ee      	b.n	800c9b8 <_svfprintf_r+0xa18>
 800c9da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c9dc:	9311      	str	r3, [sp, #68]	; 0x44
 800c9de:	e7eb      	b.n	800c9b8 <_svfprintf_r+0xa18>
 800c9e0:	1d23      	adds	r3, r4, #4
 800c9e2:	930d      	str	r3, [sp, #52]	; 0x34
 800c9e4:	06b3      	lsls	r3, r6, #26
 800c9e6:	d509      	bpl.n	800c9fc <_svfprintf_r+0xa5c>
 800c9e8:	6823      	ldr	r3, [r4, #0]
 800c9ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c9ec:	601a      	str	r2, [r3, #0]
 800c9ee:	17d2      	asrs	r2, r2, #31
 800c9f0:	605a      	str	r2, [r3, #4]
 800c9f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c9f4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800c9f6:	9308      	str	r3, [sp, #32]
 800c9f8:	f7ff fb0d 	bl	800c016 <_svfprintf_r+0x76>
 800c9fc:	06f3      	lsls	r3, r6, #27
 800c9fe:	d503      	bpl.n	800ca08 <_svfprintf_r+0xa68>
 800ca00:	6823      	ldr	r3, [r4, #0]
 800ca02:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ca04:	601a      	str	r2, [r3, #0]
 800ca06:	e7f4      	b.n	800c9f2 <_svfprintf_r+0xa52>
 800ca08:	0673      	lsls	r3, r6, #25
 800ca0a:	d503      	bpl.n	800ca14 <_svfprintf_r+0xa74>
 800ca0c:	6823      	ldr	r3, [r4, #0]
 800ca0e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ca10:	801a      	strh	r2, [r3, #0]
 800ca12:	e7ee      	b.n	800c9f2 <_svfprintf_r+0xa52>
 800ca14:	05b6      	lsls	r6, r6, #22
 800ca16:	d5f3      	bpl.n	800ca00 <_svfprintf_r+0xa60>
 800ca18:	6823      	ldr	r3, [r4, #0]
 800ca1a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ca1c:	701a      	strb	r2, [r3, #0]
 800ca1e:	e7e8      	b.n	800c9f2 <_svfprintf_r+0xa52>
 800ca20:	2310      	movs	r3, #16
 800ca22:	431e      	orrs	r6, r3
 800ca24:	2320      	movs	r3, #32
 800ca26:	0030      	movs	r0, r6
 800ca28:	4018      	ands	r0, r3
 800ca2a:	421e      	tst	r6, r3
 800ca2c:	d00f      	beq.n	800ca4e <_svfprintf_r+0xaae>
 800ca2e:	3b19      	subs	r3, #25
 800ca30:	3407      	adds	r4, #7
 800ca32:	439c      	bics	r4, r3
 800ca34:	0022      	movs	r2, r4
 800ca36:	ca18      	ldmia	r2!, {r3, r4}
 800ca38:	9306      	str	r3, [sp, #24]
 800ca3a:	9407      	str	r4, [sp, #28]
 800ca3c:	920d      	str	r2, [sp, #52]	; 0x34
 800ca3e:	4bc9      	ldr	r3, [pc, #804]	; (800cd64 <_svfprintf_r+0xdc4>)
 800ca40:	401e      	ands	r6, r3
 800ca42:	2300      	movs	r3, #0
 800ca44:	221b      	movs	r2, #27
 800ca46:	a91e      	add	r1, sp, #120	; 0x78
 800ca48:	1852      	adds	r2, r2, r1
 800ca4a:	2100      	movs	r1, #0
 800ca4c:	e430      	b.n	800c2b0 <_svfprintf_r+0x310>
 800ca4e:	0022      	movs	r2, r4
 800ca50:	ca08      	ldmia	r2!, {r3}
 800ca52:	0031      	movs	r1, r6
 800ca54:	920d      	str	r2, [sp, #52]	; 0x34
 800ca56:	2210      	movs	r2, #16
 800ca58:	4011      	ands	r1, r2
 800ca5a:	4216      	tst	r6, r2
 800ca5c:	d002      	beq.n	800ca64 <_svfprintf_r+0xac4>
 800ca5e:	9306      	str	r3, [sp, #24]
 800ca60:	9007      	str	r0, [sp, #28]
 800ca62:	e7ec      	b.n	800ca3e <_svfprintf_r+0xa9e>
 800ca64:	2240      	movs	r2, #64	; 0x40
 800ca66:	0030      	movs	r0, r6
 800ca68:	4010      	ands	r0, r2
 800ca6a:	4216      	tst	r6, r2
 800ca6c:	d003      	beq.n	800ca76 <_svfprintf_r+0xad6>
 800ca6e:	b29b      	uxth	r3, r3
 800ca70:	9306      	str	r3, [sp, #24]
 800ca72:	9107      	str	r1, [sp, #28]
 800ca74:	e7e3      	b.n	800ca3e <_svfprintf_r+0xa9e>
 800ca76:	2280      	movs	r2, #128	; 0x80
 800ca78:	0031      	movs	r1, r6
 800ca7a:	0092      	lsls	r2, r2, #2
 800ca7c:	4011      	ands	r1, r2
 800ca7e:	4216      	tst	r6, r2
 800ca80:	d0f6      	beq.n	800ca70 <_svfprintf_r+0xad0>
 800ca82:	b2db      	uxtb	r3, r3
 800ca84:	e7eb      	b.n	800ca5e <_svfprintf_r+0xabe>
 800ca86:	0023      	movs	r3, r4
 800ca88:	cb04      	ldmia	r3!, {r2}
 800ca8a:	49b7      	ldr	r1, [pc, #732]	; (800cd68 <_svfprintf_r+0xdc8>)
 800ca8c:	9206      	str	r2, [sp, #24]
 800ca8e:	aa25      	add	r2, sp, #148	; 0x94
 800ca90:	8011      	strh	r1, [r2, #0]
 800ca92:	4ab6      	ldr	r2, [pc, #728]	; (800cd6c <_svfprintf_r+0xdcc>)
 800ca94:	930d      	str	r3, [sp, #52]	; 0x34
 800ca96:	2300      	movs	r3, #0
 800ca98:	921f      	str	r2, [sp, #124]	; 0x7c
 800ca9a:	2278      	movs	r2, #120	; 0x78
 800ca9c:	9307      	str	r3, [sp, #28]
 800ca9e:	3302      	adds	r3, #2
 800caa0:	431e      	orrs	r6, r3
 800caa2:	920f      	str	r2, [sp, #60]	; 0x3c
 800caa4:	e7ce      	b.n	800ca44 <_svfprintf_r+0xaa4>
 800caa6:	0023      	movs	r3, r4
 800caa8:	cb04      	ldmia	r3!, {r2}
 800caaa:	2400      	movs	r4, #0
 800caac:	930d      	str	r3, [sp, #52]	; 0x34
 800caae:	231b      	movs	r3, #27
 800cab0:	9208      	str	r2, [sp, #32]
 800cab2:	aa1e      	add	r2, sp, #120	; 0x78
 800cab4:	189b      	adds	r3, r3, r2
 800cab6:	701c      	strb	r4, [r3, #0]
 800cab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caba:	3301      	adds	r3, #1
 800cabc:	d00e      	beq.n	800cadc <_svfprintf_r+0xb3c>
 800cabe:	0021      	movs	r1, r4
 800cac0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cac2:	9808      	ldr	r0, [sp, #32]
 800cac4:	f002 f83a 	bl	800eb3c <memchr>
 800cac8:	900c      	str	r0, [sp, #48]	; 0x30
 800caca:	42a0      	cmp	r0, r4
 800cacc:	d100      	bne.n	800cad0 <_svfprintf_r+0xb30>
 800cace:	e10d      	b.n	800ccec <_svfprintf_r+0xd4c>
 800cad0:	9a08      	ldr	r2, [sp, #32]
 800cad2:	1a83      	subs	r3, r0, r2
 800cad4:	9309      	str	r3, [sp, #36]	; 0x24
 800cad6:	0023      	movs	r3, r4
 800cad8:	940c      	str	r4, [sp, #48]	; 0x30
 800cada:	e44e      	b.n	800c37a <_svfprintf_r+0x3da>
 800cadc:	9808      	ldr	r0, [sp, #32]
 800cade:	f7f3 fb11 	bl	8000104 <strlen>
 800cae2:	9009      	str	r0, [sp, #36]	; 0x24
 800cae4:	e7f7      	b.n	800cad6 <_svfprintf_r+0xb36>
 800cae6:	2310      	movs	r3, #16
 800cae8:	431e      	orrs	r6, r3
 800caea:	2320      	movs	r3, #32
 800caec:	0030      	movs	r0, r6
 800caee:	4018      	ands	r0, r3
 800caf0:	421e      	tst	r6, r3
 800caf2:	d009      	beq.n	800cb08 <_svfprintf_r+0xb68>
 800caf4:	3b19      	subs	r3, #25
 800caf6:	3407      	adds	r4, #7
 800caf8:	439c      	bics	r4, r3
 800cafa:	0022      	movs	r2, r4
 800cafc:	ca18      	ldmia	r2!, {r3, r4}
 800cafe:	9306      	str	r3, [sp, #24]
 800cb00:	9407      	str	r4, [sp, #28]
 800cb02:	920d      	str	r2, [sp, #52]	; 0x34
 800cb04:	2301      	movs	r3, #1
 800cb06:	e79d      	b.n	800ca44 <_svfprintf_r+0xaa4>
 800cb08:	0023      	movs	r3, r4
 800cb0a:	cb04      	ldmia	r3!, {r2}
 800cb0c:	0031      	movs	r1, r6
 800cb0e:	930d      	str	r3, [sp, #52]	; 0x34
 800cb10:	2310      	movs	r3, #16
 800cb12:	4019      	ands	r1, r3
 800cb14:	421e      	tst	r6, r3
 800cb16:	d003      	beq.n	800cb20 <_svfprintf_r+0xb80>
 800cb18:	9206      	str	r2, [sp, #24]
 800cb1a:	9007      	str	r0, [sp, #28]
 800cb1c:	3b0f      	subs	r3, #15
 800cb1e:	e791      	b.n	800ca44 <_svfprintf_r+0xaa4>
 800cb20:	2340      	movs	r3, #64	; 0x40
 800cb22:	0030      	movs	r0, r6
 800cb24:	4018      	ands	r0, r3
 800cb26:	421e      	tst	r6, r3
 800cb28:	d003      	beq.n	800cb32 <_svfprintf_r+0xb92>
 800cb2a:	b293      	uxth	r3, r2
 800cb2c:	9306      	str	r3, [sp, #24]
 800cb2e:	9107      	str	r1, [sp, #28]
 800cb30:	e7e8      	b.n	800cb04 <_svfprintf_r+0xb64>
 800cb32:	2380      	movs	r3, #128	; 0x80
 800cb34:	0031      	movs	r1, r6
 800cb36:	009b      	lsls	r3, r3, #2
 800cb38:	4019      	ands	r1, r3
 800cb3a:	421e      	tst	r6, r3
 800cb3c:	d003      	beq.n	800cb46 <_svfprintf_r+0xba6>
 800cb3e:	b2d3      	uxtb	r3, r2
 800cb40:	9306      	str	r3, [sp, #24]
 800cb42:	9007      	str	r0, [sp, #28]
 800cb44:	e7de      	b.n	800cb04 <_svfprintf_r+0xb64>
 800cb46:	9206      	str	r2, [sp, #24]
 800cb48:	e7f1      	b.n	800cb2e <_svfprintf_r+0xb8e>
 800cb4a:	4b89      	ldr	r3, [pc, #548]	; (800cd70 <_svfprintf_r+0xdd0>)
 800cb4c:	0030      	movs	r0, r6
 800cb4e:	931f      	str	r3, [sp, #124]	; 0x7c
 800cb50:	2320      	movs	r3, #32
 800cb52:	4018      	ands	r0, r3
 800cb54:	421e      	tst	r6, r3
 800cb56:	d01a      	beq.n	800cb8e <_svfprintf_r+0xbee>
 800cb58:	3b19      	subs	r3, #25
 800cb5a:	3407      	adds	r4, #7
 800cb5c:	439c      	bics	r4, r3
 800cb5e:	0022      	movs	r2, r4
 800cb60:	ca18      	ldmia	r2!, {r3, r4}
 800cb62:	9306      	str	r3, [sp, #24]
 800cb64:	9407      	str	r4, [sp, #28]
 800cb66:	920d      	str	r2, [sp, #52]	; 0x34
 800cb68:	07f3      	lsls	r3, r6, #31
 800cb6a:	d50a      	bpl.n	800cb82 <_svfprintf_r+0xbe2>
 800cb6c:	9b06      	ldr	r3, [sp, #24]
 800cb6e:	9a07      	ldr	r2, [sp, #28]
 800cb70:	4313      	orrs	r3, r2
 800cb72:	d006      	beq.n	800cb82 <_svfprintf_r+0xbe2>
 800cb74:	2230      	movs	r2, #48	; 0x30
 800cb76:	ab25      	add	r3, sp, #148	; 0x94
 800cb78:	701a      	strb	r2, [r3, #0]
 800cb7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cb7c:	705a      	strb	r2, [r3, #1]
 800cb7e:	2302      	movs	r3, #2
 800cb80:	431e      	orrs	r6, r3
 800cb82:	4b78      	ldr	r3, [pc, #480]	; (800cd64 <_svfprintf_r+0xdc4>)
 800cb84:	401e      	ands	r6, r3
 800cb86:	2302      	movs	r3, #2
 800cb88:	e75c      	b.n	800ca44 <_svfprintf_r+0xaa4>
 800cb8a:	4b78      	ldr	r3, [pc, #480]	; (800cd6c <_svfprintf_r+0xdcc>)
 800cb8c:	e7de      	b.n	800cb4c <_svfprintf_r+0xbac>
 800cb8e:	0023      	movs	r3, r4
 800cb90:	cb04      	ldmia	r3!, {r2}
 800cb92:	0031      	movs	r1, r6
 800cb94:	930d      	str	r3, [sp, #52]	; 0x34
 800cb96:	2310      	movs	r3, #16
 800cb98:	4019      	ands	r1, r3
 800cb9a:	421e      	tst	r6, r3
 800cb9c:	d002      	beq.n	800cba4 <_svfprintf_r+0xc04>
 800cb9e:	9206      	str	r2, [sp, #24]
 800cba0:	9007      	str	r0, [sp, #28]
 800cba2:	e7e1      	b.n	800cb68 <_svfprintf_r+0xbc8>
 800cba4:	2340      	movs	r3, #64	; 0x40
 800cba6:	0030      	movs	r0, r6
 800cba8:	4018      	ands	r0, r3
 800cbaa:	421e      	tst	r6, r3
 800cbac:	d003      	beq.n	800cbb6 <_svfprintf_r+0xc16>
 800cbae:	b293      	uxth	r3, r2
 800cbb0:	9306      	str	r3, [sp, #24]
 800cbb2:	9107      	str	r1, [sp, #28]
 800cbb4:	e7d8      	b.n	800cb68 <_svfprintf_r+0xbc8>
 800cbb6:	2380      	movs	r3, #128	; 0x80
 800cbb8:	0031      	movs	r1, r6
 800cbba:	009b      	lsls	r3, r3, #2
 800cbbc:	4019      	ands	r1, r3
 800cbbe:	421e      	tst	r6, r3
 800cbc0:	d002      	beq.n	800cbc8 <_svfprintf_r+0xc28>
 800cbc2:	b2d3      	uxtb	r3, r2
 800cbc4:	9306      	str	r3, [sp, #24]
 800cbc6:	e7eb      	b.n	800cba0 <_svfprintf_r+0xc00>
 800cbc8:	9206      	str	r2, [sp, #24]
 800cbca:	e7f2      	b.n	800cbb2 <_svfprintf_r+0xc12>
 800cbcc:	9b07      	ldr	r3, [sp, #28]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d10a      	bne.n	800cbe8 <_svfprintf_r+0xc48>
 800cbd2:	9b06      	ldr	r3, [sp, #24]
 800cbd4:	2b09      	cmp	r3, #9
 800cbd6:	d807      	bhi.n	800cbe8 <_svfprintf_r+0xc48>
 800cbd8:	23e7      	movs	r3, #231	; 0xe7
 800cbda:	aa1e      	add	r2, sp, #120	; 0x78
 800cbdc:	189b      	adds	r3, r3, r2
 800cbde:	9a06      	ldr	r2, [sp, #24]
 800cbe0:	3230      	adds	r2, #48	; 0x30
 800cbe2:	701a      	strb	r2, [r3, #0]
 800cbe4:	f000 fc18 	bl	800d418 <_svfprintf_r+0x1478>
 800cbe8:	2680      	movs	r6, #128	; 0x80
 800cbea:	2300      	movs	r3, #0
 800cbec:	00f6      	lsls	r6, r6, #3
 800cbee:	930e      	str	r3, [sp, #56]	; 0x38
 800cbf0:	ad58      	add	r5, sp, #352	; 0x160
 800cbf2:	4026      	ands	r6, r4
 800cbf4:	220a      	movs	r2, #10
 800cbf6:	9806      	ldr	r0, [sp, #24]
 800cbf8:	9907      	ldr	r1, [sp, #28]
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	f7f3 fc52 	bl	80004a4 <__aeabi_uldivmod>
 800cc00:	1e6b      	subs	r3, r5, #1
 800cc02:	3230      	adds	r2, #48	; 0x30
 800cc04:	9308      	str	r3, [sp, #32]
 800cc06:	701a      	strb	r2, [r3, #0]
 800cc08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc0a:	900c      	str	r0, [sp, #48]	; 0x30
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	9110      	str	r1, [sp, #64]	; 0x40
 800cc10:	930e      	str	r3, [sp, #56]	; 0x38
 800cc12:	2e00      	cmp	r6, #0
 800cc14:	d01d      	beq.n	800cc52 <_svfprintf_r+0xcb2>
 800cc16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cc18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc1a:	781b      	ldrb	r3, [r3, #0]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d118      	bne.n	800cc52 <_svfprintf_r+0xcb2>
 800cc20:	2aff      	cmp	r2, #255	; 0xff
 800cc22:	d016      	beq.n	800cc52 <_svfprintf_r+0xcb2>
 800cc24:	9b07      	ldr	r3, [sp, #28]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d102      	bne.n	800cc30 <_svfprintf_r+0xc90>
 800cc2a:	9b06      	ldr	r3, [sp, #24]
 800cc2c:	2b09      	cmp	r3, #9
 800cc2e:	d910      	bls.n	800cc52 <_svfprintf_r+0xcb2>
 800cc30:	9b08      	ldr	r3, [sp, #32]
 800cc32:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800cc34:	991d      	ldr	r1, [sp, #116]	; 0x74
 800cc36:	1a9b      	subs	r3, r3, r2
 800cc38:	0018      	movs	r0, r3
 800cc3a:	9308      	str	r3, [sp, #32]
 800cc3c:	f7fd ffd1 	bl	800abe2 <strncpy>
 800cc40:	2200      	movs	r2, #0
 800cc42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cc44:	920e      	str	r2, [sp, #56]	; 0x38
 800cc46:	785b      	ldrb	r3, [r3, #1]
 800cc48:	1e5a      	subs	r2, r3, #1
 800cc4a:	4193      	sbcs	r3, r2
 800cc4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cc4e:	18d3      	adds	r3, r2, r3
 800cc50:	9312      	str	r3, [sp, #72]	; 0x48
 800cc52:	9b07      	ldr	r3, [sp, #28]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d10f      	bne.n	800cc78 <_svfprintf_r+0xcd8>
 800cc58:	9b06      	ldr	r3, [sp, #24]
 800cc5a:	2b09      	cmp	r3, #9
 800cc5c:	d80c      	bhi.n	800cc78 <_svfprintf_r+0xcd8>
 800cc5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc60:	9a08      	ldr	r2, [sp, #32]
 800cc62:	9319      	str	r3, [sp, #100]	; 0x64
 800cc64:	ab58      	add	r3, sp, #352	; 0x160
 800cc66:	1a9b      	subs	r3, r3, r2
 800cc68:	9309      	str	r3, [sp, #36]	; 0x24
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	0026      	movs	r6, r4
 800cc6e:	930c      	str	r3, [sp, #48]	; 0x30
 800cc70:	001d      	movs	r5, r3
 800cc72:	9310      	str	r3, [sp, #64]	; 0x40
 800cc74:	9311      	str	r3, [sp, #68]	; 0x44
 800cc76:	e4f2      	b.n	800c65e <_svfprintf_r+0x6be>
 800cc78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc7a:	9d08      	ldr	r5, [sp, #32]
 800cc7c:	9306      	str	r3, [sp, #24]
 800cc7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc80:	9307      	str	r3, [sp, #28]
 800cc82:	e7b7      	b.n	800cbf4 <_svfprintf_r+0xc54>
 800cc84:	200f      	movs	r0, #15
 800cc86:	ab58      	add	r3, sp, #352	; 0x160
 800cc88:	9308      	str	r3, [sp, #32]
 800cc8a:	9b08      	ldr	r3, [sp, #32]
 800cc8c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800cc8e:	3b01      	subs	r3, #1
 800cc90:	9308      	str	r3, [sp, #32]
 800cc92:	9b06      	ldr	r3, [sp, #24]
 800cc94:	4003      	ands	r3, r0
 800cc96:	5cd3      	ldrb	r3, [r2, r3]
 800cc98:	9a08      	ldr	r2, [sp, #32]
 800cc9a:	7013      	strb	r3, [r2, #0]
 800cc9c:	9b07      	ldr	r3, [sp, #28]
 800cc9e:	0719      	lsls	r1, r3, #28
 800cca0:	9b06      	ldr	r3, [sp, #24]
 800cca2:	091a      	lsrs	r2, r3, #4
 800cca4:	9b07      	ldr	r3, [sp, #28]
 800cca6:	4311      	orrs	r1, r2
 800cca8:	091b      	lsrs	r3, r3, #4
 800ccaa:	9307      	str	r3, [sp, #28]
 800ccac:	000b      	movs	r3, r1
 800ccae:	9a07      	ldr	r2, [sp, #28]
 800ccb0:	9106      	str	r1, [sp, #24]
 800ccb2:	4313      	orrs	r3, r2
 800ccb4:	d1e9      	bne.n	800cc8a <_svfprintf_r+0xcea>
 800ccb6:	e7d2      	b.n	800cc5e <_svfprintf_r+0xcbe>
 800ccb8:	aa58      	add	r2, sp, #352	; 0x160
 800ccba:	9208      	str	r2, [sp, #32]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d1ce      	bne.n	800cc5e <_svfprintf_r+0xcbe>
 800ccc0:	07f6      	lsls	r6, r6, #31
 800ccc2:	d5cc      	bpl.n	800cc5e <_svfprintf_r+0xcbe>
 800ccc4:	aa1e      	add	r2, sp, #120	; 0x78
 800ccc6:	33e7      	adds	r3, #231	; 0xe7
 800ccc8:	189b      	adds	r3, r3, r2
 800ccca:	2230      	movs	r2, #48	; 0x30
 800cccc:	e789      	b.n	800cbe2 <_svfprintf_r+0xc42>
 800ccce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d100      	bne.n	800ccd6 <_svfprintf_r+0xd36>
 800ccd4:	e364      	b.n	800d3a0 <_svfprintf_r+0x1400>
 800ccd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ccd8:	211b      	movs	r1, #27
 800ccda:	ab3f      	add	r3, sp, #252	; 0xfc
 800ccdc:	701a      	strb	r2, [r3, #0]
 800ccde:	2200      	movs	r2, #0
 800cce0:	a81e      	add	r0, sp, #120	; 0x78
 800cce2:	1809      	adds	r1, r1, r0
 800cce4:	700a      	strb	r2, [r1, #0]
 800cce6:	940d      	str	r4, [sp, #52]	; 0x34
 800cce8:	f7ff fabd 	bl	800c266 <_svfprintf_r+0x2c6>
 800ccec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ccee:	f7ff fb44 	bl	800c37a <_svfprintf_r+0x3da>
 800ccf2:	2010      	movs	r0, #16
 800ccf4:	1812      	adds	r2, r2, r0
 800ccf6:	6078      	str	r0, [r7, #4]
 800ccf8:	922e      	str	r2, [sp, #184]	; 0xb8
 800ccfa:	932d      	str	r3, [sp, #180]	; 0xb4
 800ccfc:	2b07      	cmp	r3, #7
 800ccfe:	dd08      	ble.n	800cd12 <_svfprintf_r+0xd72>
 800cd00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cd02:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cd04:	aa2c      	add	r2, sp, #176	; 0xb0
 800cd06:	f003 fa61 	bl	80101cc <__ssprint_r>
 800cd0a:	2800      	cmp	r0, #0
 800cd0c:	d000      	beq.n	800cd10 <_svfprintf_r+0xd70>
 800cd0e:	e326      	b.n	800d35e <_svfprintf_r+0x13be>
 800cd10:	a92f      	add	r1, sp, #188	; 0xbc
 800cd12:	000f      	movs	r7, r1
 800cd14:	3c10      	subs	r4, #16
 800cd16:	e4c5      	b.n	800c6a4 <_svfprintf_r+0x704>
 800cd18:	2010      	movs	r0, #16
 800cd1a:	1812      	adds	r2, r2, r0
 800cd1c:	6078      	str	r0, [r7, #4]
 800cd1e:	922e      	str	r2, [sp, #184]	; 0xb8
 800cd20:	932d      	str	r3, [sp, #180]	; 0xb4
 800cd22:	2b07      	cmp	r3, #7
 800cd24:	dd08      	ble.n	800cd38 <_svfprintf_r+0xd98>
 800cd26:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cd28:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cd2a:	aa2c      	add	r2, sp, #176	; 0xb0
 800cd2c:	f003 fa4e 	bl	80101cc <__ssprint_r>
 800cd30:	2800      	cmp	r0, #0
 800cd32:	d000      	beq.n	800cd36 <_svfprintf_r+0xd96>
 800cd34:	e313      	b.n	800d35e <_svfprintf_r+0x13be>
 800cd36:	a92f      	add	r1, sp, #188	; 0xbc
 800cd38:	000f      	movs	r7, r1
 800cd3a:	3c10      	subs	r4, #16
 800cd3c:	e50b      	b.n	800c756 <_svfprintf_r+0x7b6>
 800cd3e:	2010      	movs	r0, #16
 800cd40:	1812      	adds	r2, r2, r0
 800cd42:	6078      	str	r0, [r7, #4]
 800cd44:	922e      	str	r2, [sp, #184]	; 0xb8
 800cd46:	932d      	str	r3, [sp, #180]	; 0xb4
 800cd48:	2b07      	cmp	r3, #7
 800cd4a:	dd08      	ble.n	800cd5e <_svfprintf_r+0xdbe>
 800cd4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cd4e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cd50:	aa2c      	add	r2, sp, #176	; 0xb0
 800cd52:	f003 fa3b 	bl	80101cc <__ssprint_r>
 800cd56:	2800      	cmp	r0, #0
 800cd58:	d000      	beq.n	800cd5c <_svfprintf_r+0xdbc>
 800cd5a:	e300      	b.n	800d35e <_svfprintf_r+0x13be>
 800cd5c:	a92f      	add	r1, sp, #188	; 0xbc
 800cd5e:	000f      	movs	r7, r1
 800cd60:	3c10      	subs	r4, #16
 800cd62:	e518      	b.n	800c796 <_svfprintf_r+0x7f6>
 800cd64:	fffffbff 	.word	0xfffffbff
 800cd68:	00007830 	.word	0x00007830
 800cd6c:	080133cc 	.word	0x080133cc
 800cd70:	080133dd 	.word	0x080133dd
 800cd74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd76:	2b65      	cmp	r3, #101	; 0x65
 800cd78:	dc00      	bgt.n	800cd7c <_svfprintf_r+0xddc>
 800cd7a:	e241      	b.n	800d200 <_svfprintf_r+0x1260>
 800cd7c:	9814      	ldr	r0, [sp, #80]	; 0x50
 800cd7e:	9915      	ldr	r1, [sp, #84]	; 0x54
 800cd80:	2200      	movs	r2, #0
 800cd82:	2300      	movs	r3, #0
 800cd84:	f7f3 fb60 	bl	8000448 <__aeabi_dcmpeq>
 800cd88:	2800      	cmp	r0, #0
 800cd8a:	d077      	beq.n	800ce7c <_svfprintf_r+0xedc>
 800cd8c:	4bca      	ldr	r3, [pc, #808]	; (800d0b8 <_svfprintf_r+0x1118>)
 800cd8e:	603b      	str	r3, [r7, #0]
 800cd90:	2301      	movs	r3, #1
 800cd92:	607b      	str	r3, [r7, #4]
 800cd94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cd96:	3708      	adds	r7, #8
 800cd98:	3301      	adds	r3, #1
 800cd9a:	932e      	str	r3, [sp, #184]	; 0xb8
 800cd9c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cd9e:	3301      	adds	r3, #1
 800cda0:	932d      	str	r3, [sp, #180]	; 0xb4
 800cda2:	2b07      	cmp	r3, #7
 800cda4:	dd08      	ble.n	800cdb8 <_svfprintf_r+0xe18>
 800cda6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cda8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cdaa:	aa2c      	add	r2, sp, #176	; 0xb0
 800cdac:	f003 fa0e 	bl	80101cc <__ssprint_r>
 800cdb0:	2800      	cmp	r0, #0
 800cdb2:	d000      	beq.n	800cdb6 <_svfprintf_r+0xe16>
 800cdb4:	e2d3      	b.n	800d35e <_svfprintf_r+0x13be>
 800cdb6:	af2f      	add	r7, sp, #188	; 0xbc
 800cdb8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cdba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	db01      	blt.n	800cdc4 <_svfprintf_r+0xe24>
 800cdc0:	07f3      	lsls	r3, r6, #31
 800cdc2:	d51b      	bpl.n	800cdfc <_svfprintf_r+0xe5c>
 800cdc4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800cdc6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800cdc8:	603b      	str	r3, [r7, #0]
 800cdca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cdcc:	607b      	str	r3, [r7, #4]
 800cdce:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800cdd0:	3708      	adds	r7, #8
 800cdd2:	189b      	adds	r3, r3, r2
 800cdd4:	932e      	str	r3, [sp, #184]	; 0xb8
 800cdd6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cdd8:	3301      	adds	r3, #1
 800cdda:	932d      	str	r3, [sp, #180]	; 0xb4
 800cddc:	2b07      	cmp	r3, #7
 800cdde:	dd08      	ble.n	800cdf2 <_svfprintf_r+0xe52>
 800cde0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cde2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cde4:	aa2c      	add	r2, sp, #176	; 0xb0
 800cde6:	f003 f9f1 	bl	80101cc <__ssprint_r>
 800cdea:	2800      	cmp	r0, #0
 800cdec:	d000      	beq.n	800cdf0 <_svfprintf_r+0xe50>
 800cdee:	e2b6      	b.n	800d35e <_svfprintf_r+0x13be>
 800cdf0:	af2f      	add	r7, sp, #188	; 0xbc
 800cdf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cdf4:	2510      	movs	r5, #16
 800cdf6:	1e5c      	subs	r4, r3, #1
 800cdf8:	2c00      	cmp	r4, #0
 800cdfa:	dc2e      	bgt.n	800ce5a <_svfprintf_r+0xeba>
 800cdfc:	0776      	lsls	r6, r6, #29
 800cdfe:	d500      	bpl.n	800ce02 <_svfprintf_r+0xe62>
 800ce00:	e290      	b.n	800d324 <_svfprintf_r+0x1384>
 800ce02:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ce04:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ce06:	4293      	cmp	r3, r2
 800ce08:	da00      	bge.n	800ce0c <_svfprintf_r+0xe6c>
 800ce0a:	0013      	movs	r3, r2
 800ce0c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ce0e:	18d3      	adds	r3, r2, r3
 800ce10:	9317      	str	r3, [sp, #92]	; 0x5c
 800ce12:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d007      	beq.n	800ce28 <_svfprintf_r+0xe88>
 800ce18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ce1a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ce1c:	aa2c      	add	r2, sp, #176	; 0xb0
 800ce1e:	f003 f9d5 	bl	80101cc <__ssprint_r>
 800ce22:	2800      	cmp	r0, #0
 800ce24:	d000      	beq.n	800ce28 <_svfprintf_r+0xe88>
 800ce26:	e29a      	b.n	800d35e <_svfprintf_r+0x13be>
 800ce28:	2300      	movs	r3, #0
 800ce2a:	932d      	str	r3, [sp, #180]	; 0xb4
 800ce2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d000      	beq.n	800ce34 <_svfprintf_r+0xe94>
 800ce32:	e2b0      	b.n	800d396 <_svfprintf_r+0x13f6>
 800ce34:	af2f      	add	r7, sp, #188	; 0xbc
 800ce36:	e5dc      	b.n	800c9f2 <_svfprintf_r+0xa52>
 800ce38:	3210      	adds	r2, #16
 800ce3a:	607d      	str	r5, [r7, #4]
 800ce3c:	922e      	str	r2, [sp, #184]	; 0xb8
 800ce3e:	932d      	str	r3, [sp, #180]	; 0xb4
 800ce40:	2b07      	cmp	r3, #7
 800ce42:	dd08      	ble.n	800ce56 <_svfprintf_r+0xeb6>
 800ce44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ce46:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ce48:	aa2c      	add	r2, sp, #176	; 0xb0
 800ce4a:	f003 f9bf 	bl	80101cc <__ssprint_r>
 800ce4e:	2800      	cmp	r0, #0
 800ce50:	d000      	beq.n	800ce54 <_svfprintf_r+0xeb4>
 800ce52:	e284      	b.n	800d35e <_svfprintf_r+0x13be>
 800ce54:	a92f      	add	r1, sp, #188	; 0xbc
 800ce56:	000f      	movs	r7, r1
 800ce58:	3c10      	subs	r4, #16
 800ce5a:	0039      	movs	r1, r7
 800ce5c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ce5e:	4897      	ldr	r0, [pc, #604]	; (800d0bc <_svfprintf_r+0x111c>)
 800ce60:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ce62:	3301      	adds	r3, #1
 800ce64:	3108      	adds	r1, #8
 800ce66:	6038      	str	r0, [r7, #0]
 800ce68:	2c10      	cmp	r4, #16
 800ce6a:	dce5      	bgt.n	800ce38 <_svfprintf_r+0xe98>
 800ce6c:	607c      	str	r4, [r7, #4]
 800ce6e:	18a4      	adds	r4, r4, r2
 800ce70:	942e      	str	r4, [sp, #184]	; 0xb8
 800ce72:	000f      	movs	r7, r1
 800ce74:	932d      	str	r3, [sp, #180]	; 0xb4
 800ce76:	2b07      	cmp	r3, #7
 800ce78:	ddc0      	ble.n	800cdfc <_svfprintf_r+0xe5c>
 800ce7a:	e05f      	b.n	800cf3c <_svfprintf_r+0xf9c>
 800ce7c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	dc78      	bgt.n	800cf74 <_svfprintf_r+0xfd4>
 800ce82:	4b8d      	ldr	r3, [pc, #564]	; (800d0b8 <_svfprintf_r+0x1118>)
 800ce84:	603b      	str	r3, [r7, #0]
 800ce86:	2301      	movs	r3, #1
 800ce88:	607b      	str	r3, [r7, #4]
 800ce8a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ce8c:	3708      	adds	r7, #8
 800ce8e:	3301      	adds	r3, #1
 800ce90:	932e      	str	r3, [sp, #184]	; 0xb8
 800ce92:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ce94:	3301      	adds	r3, #1
 800ce96:	932d      	str	r3, [sp, #180]	; 0xb4
 800ce98:	2b07      	cmp	r3, #7
 800ce9a:	dd08      	ble.n	800ceae <_svfprintf_r+0xf0e>
 800ce9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ce9e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cea0:	aa2c      	add	r2, sp, #176	; 0xb0
 800cea2:	f003 f993 	bl	80101cc <__ssprint_r>
 800cea6:	2800      	cmp	r0, #0
 800cea8:	d000      	beq.n	800ceac <_svfprintf_r+0xf0c>
 800ceaa:	e258      	b.n	800d35e <_svfprintf_r+0x13be>
 800ceac:	af2f      	add	r7, sp, #188	; 0xbc
 800ceae:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ceb0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ceb2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ceb4:	430b      	orrs	r3, r1
 800ceb6:	2101      	movs	r1, #1
 800ceb8:	4031      	ands	r1, r6
 800ceba:	430b      	orrs	r3, r1
 800cebc:	d09e      	beq.n	800cdfc <_svfprintf_r+0xe5c>
 800cebe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800cec0:	603b      	str	r3, [r7, #0]
 800cec2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cec4:	607b      	str	r3, [r7, #4]
 800cec6:	189a      	adds	r2, r3, r2
 800cec8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ceca:	922e      	str	r2, [sp, #184]	; 0xb8
 800cecc:	3301      	adds	r3, #1
 800cece:	932d      	str	r3, [sp, #180]	; 0xb4
 800ced0:	3708      	adds	r7, #8
 800ced2:	2b07      	cmp	r3, #7
 800ced4:	dd08      	ble.n	800cee8 <_svfprintf_r+0xf48>
 800ced6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ced8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ceda:	aa2c      	add	r2, sp, #176	; 0xb0
 800cedc:	f003 f976 	bl	80101cc <__ssprint_r>
 800cee0:	2800      	cmp	r0, #0
 800cee2:	d000      	beq.n	800cee6 <_svfprintf_r+0xf46>
 800cee4:	e23b      	b.n	800d35e <_svfprintf_r+0x13be>
 800cee6:	af2f      	add	r7, sp, #188	; 0xbc
 800cee8:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800ceea:	2c00      	cmp	r4, #0
 800ceec:	da19      	bge.n	800cf22 <_svfprintf_r+0xf82>
 800ceee:	0038      	movs	r0, r7
 800cef0:	2510      	movs	r5, #16
 800cef2:	4264      	negs	r4, r4
 800cef4:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800cef6:	4a71      	ldr	r2, [pc, #452]	; (800d0bc <_svfprintf_r+0x111c>)
 800cef8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800cefa:	3101      	adds	r1, #1
 800cefc:	3708      	adds	r7, #8
 800cefe:	6002      	str	r2, [r0, #0]
 800cf00:	2c10      	cmp	r4, #16
 800cf02:	dc25      	bgt.n	800cf50 <_svfprintf_r+0xfb0>
 800cf04:	6044      	str	r4, [r0, #4]
 800cf06:	18e4      	adds	r4, r4, r3
 800cf08:	942e      	str	r4, [sp, #184]	; 0xb8
 800cf0a:	912d      	str	r1, [sp, #180]	; 0xb4
 800cf0c:	2907      	cmp	r1, #7
 800cf0e:	dd08      	ble.n	800cf22 <_svfprintf_r+0xf82>
 800cf10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cf12:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cf14:	aa2c      	add	r2, sp, #176	; 0xb0
 800cf16:	f003 f959 	bl	80101cc <__ssprint_r>
 800cf1a:	2800      	cmp	r0, #0
 800cf1c:	d000      	beq.n	800cf20 <_svfprintf_r+0xf80>
 800cf1e:	e21e      	b.n	800d35e <_svfprintf_r+0x13be>
 800cf20:	af2f      	add	r7, sp, #188	; 0xbc
 800cf22:	9b08      	ldr	r3, [sp, #32]
 800cf24:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800cf26:	603b      	str	r3, [r7, #0]
 800cf28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf2a:	18d2      	adds	r2, r2, r3
 800cf2c:	922e      	str	r2, [sp, #184]	; 0xb8
 800cf2e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800cf30:	607b      	str	r3, [r7, #4]
 800cf32:	3201      	adds	r2, #1
 800cf34:	922d      	str	r2, [sp, #180]	; 0xb4
 800cf36:	2a07      	cmp	r2, #7
 800cf38:	dc00      	bgt.n	800cf3c <_svfprintf_r+0xf9c>
 800cf3a:	e45b      	b.n	800c7f4 <_svfprintf_r+0x854>
 800cf3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cf3e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cf40:	aa2c      	add	r2, sp, #176	; 0xb0
 800cf42:	f003 f943 	bl	80101cc <__ssprint_r>
 800cf46:	2800      	cmp	r0, #0
 800cf48:	d000      	beq.n	800cf4c <_svfprintf_r+0xfac>
 800cf4a:	e208      	b.n	800d35e <_svfprintf_r+0x13be>
 800cf4c:	af2f      	add	r7, sp, #188	; 0xbc
 800cf4e:	e755      	b.n	800cdfc <_svfprintf_r+0xe5c>
 800cf50:	3310      	adds	r3, #16
 800cf52:	6045      	str	r5, [r0, #4]
 800cf54:	932e      	str	r3, [sp, #184]	; 0xb8
 800cf56:	912d      	str	r1, [sp, #180]	; 0xb4
 800cf58:	2907      	cmp	r1, #7
 800cf5a:	dd08      	ble.n	800cf6e <_svfprintf_r+0xfce>
 800cf5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cf5e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cf60:	aa2c      	add	r2, sp, #176	; 0xb0
 800cf62:	f003 f933 	bl	80101cc <__ssprint_r>
 800cf66:	2800      	cmp	r0, #0
 800cf68:	d000      	beq.n	800cf6c <_svfprintf_r+0xfcc>
 800cf6a:	e1f8      	b.n	800d35e <_svfprintf_r+0x13be>
 800cf6c:	af2f      	add	r7, sp, #188	; 0xbc
 800cf6e:	0038      	movs	r0, r7
 800cf70:	3c10      	subs	r4, #16
 800cf72:	e7bf      	b.n	800cef4 <_svfprintf_r+0xf54>
 800cf74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf76:	002c      	movs	r4, r5
 800cf78:	429d      	cmp	r5, r3
 800cf7a:	dd00      	ble.n	800cf7e <_svfprintf_r+0xfde>
 800cf7c:	001c      	movs	r4, r3
 800cf7e:	2c00      	cmp	r4, #0
 800cf80:	dd14      	ble.n	800cfac <_svfprintf_r+0x100c>
 800cf82:	9b08      	ldr	r3, [sp, #32]
 800cf84:	607c      	str	r4, [r7, #4]
 800cf86:	603b      	str	r3, [r7, #0]
 800cf88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cf8a:	3708      	adds	r7, #8
 800cf8c:	18e3      	adds	r3, r4, r3
 800cf8e:	932e      	str	r3, [sp, #184]	; 0xb8
 800cf90:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cf92:	3301      	adds	r3, #1
 800cf94:	932d      	str	r3, [sp, #180]	; 0xb4
 800cf96:	2b07      	cmp	r3, #7
 800cf98:	dd08      	ble.n	800cfac <_svfprintf_r+0x100c>
 800cf9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cf9c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cf9e:	aa2c      	add	r2, sp, #176	; 0xb0
 800cfa0:	f003 f914 	bl	80101cc <__ssprint_r>
 800cfa4:	2800      	cmp	r0, #0
 800cfa6:	d000      	beq.n	800cfaa <_svfprintf_r+0x100a>
 800cfa8:	e1d9      	b.n	800d35e <_svfprintf_r+0x13be>
 800cfaa:	af2f      	add	r7, sp, #188	; 0xbc
 800cfac:	43e3      	mvns	r3, r4
 800cfae:	17db      	asrs	r3, r3, #31
 800cfb0:	401c      	ands	r4, r3
 800cfb2:	1b2c      	subs	r4, r5, r4
 800cfb4:	2c00      	cmp	r4, #0
 800cfb6:	dd18      	ble.n	800cfea <_svfprintf_r+0x104a>
 800cfb8:	0039      	movs	r1, r7
 800cfba:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cfbc:	483f      	ldr	r0, [pc, #252]	; (800d0bc <_svfprintf_r+0x111c>)
 800cfbe:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800cfc0:	3301      	adds	r3, #1
 800cfc2:	3108      	adds	r1, #8
 800cfc4:	6038      	str	r0, [r7, #0]
 800cfc6:	2c10      	cmp	r4, #16
 800cfc8:	dc7a      	bgt.n	800d0c0 <_svfprintf_r+0x1120>
 800cfca:	607c      	str	r4, [r7, #4]
 800cfcc:	18a4      	adds	r4, r4, r2
 800cfce:	000f      	movs	r7, r1
 800cfd0:	942e      	str	r4, [sp, #184]	; 0xb8
 800cfd2:	932d      	str	r3, [sp, #180]	; 0xb4
 800cfd4:	2b07      	cmp	r3, #7
 800cfd6:	dd08      	ble.n	800cfea <_svfprintf_r+0x104a>
 800cfd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cfda:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cfdc:	aa2c      	add	r2, sp, #176	; 0xb0
 800cfde:	f003 f8f5 	bl	80101cc <__ssprint_r>
 800cfe2:	2800      	cmp	r0, #0
 800cfe4:	d000      	beq.n	800cfe8 <_svfprintf_r+0x1048>
 800cfe6:	e1ba      	b.n	800d35e <_svfprintf_r+0x13be>
 800cfe8:	af2f      	add	r7, sp, #188	; 0xbc
 800cfea:	9b08      	ldr	r3, [sp, #32]
 800cfec:	195d      	adds	r5, r3, r5
 800cfee:	0573      	lsls	r3, r6, #21
 800cff0:	d50b      	bpl.n	800d00a <_svfprintf_r+0x106a>
 800cff2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d176      	bne.n	800d0e6 <_svfprintf_r+0x1146>
 800cff8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d176      	bne.n	800d0ec <_svfprintf_r+0x114c>
 800cffe:	9b08      	ldr	r3, [sp, #32]
 800d000:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d002:	189b      	adds	r3, r3, r2
 800d004:	429d      	cmp	r5, r3
 800d006:	d900      	bls.n	800d00a <_svfprintf_r+0x106a>
 800d008:	001d      	movs	r5, r3
 800d00a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d00c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d00e:	4293      	cmp	r3, r2
 800d010:	db01      	blt.n	800d016 <_svfprintf_r+0x1076>
 800d012:	07f3      	lsls	r3, r6, #31
 800d014:	d516      	bpl.n	800d044 <_svfprintf_r+0x10a4>
 800d016:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800d018:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d01a:	603b      	str	r3, [r7, #0]
 800d01c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d01e:	607b      	str	r3, [r7, #4]
 800d020:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d022:	3708      	adds	r7, #8
 800d024:	189b      	adds	r3, r3, r2
 800d026:	932e      	str	r3, [sp, #184]	; 0xb8
 800d028:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d02a:	3301      	adds	r3, #1
 800d02c:	932d      	str	r3, [sp, #180]	; 0xb4
 800d02e:	2b07      	cmp	r3, #7
 800d030:	dd08      	ble.n	800d044 <_svfprintf_r+0x10a4>
 800d032:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d034:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d036:	aa2c      	add	r2, sp, #176	; 0xb0
 800d038:	f003 f8c8 	bl	80101cc <__ssprint_r>
 800d03c:	2800      	cmp	r0, #0
 800d03e:	d000      	beq.n	800d042 <_svfprintf_r+0x10a2>
 800d040:	e18d      	b.n	800d35e <_svfprintf_r+0x13be>
 800d042:	af2f      	add	r7, sp, #188	; 0xbc
 800d044:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d046:	9b08      	ldr	r3, [sp, #32]
 800d048:	4694      	mov	ip, r2
 800d04a:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800d04c:	4463      	add	r3, ip
 800d04e:	1b5b      	subs	r3, r3, r5
 800d050:	1b14      	subs	r4, r2, r4
 800d052:	429c      	cmp	r4, r3
 800d054:	dd00      	ble.n	800d058 <_svfprintf_r+0x10b8>
 800d056:	001c      	movs	r4, r3
 800d058:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d05a:	2c00      	cmp	r4, #0
 800d05c:	dd12      	ble.n	800d084 <_svfprintf_r+0x10e4>
 800d05e:	18e3      	adds	r3, r4, r3
 800d060:	932e      	str	r3, [sp, #184]	; 0xb8
 800d062:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d064:	603d      	str	r5, [r7, #0]
 800d066:	3301      	adds	r3, #1
 800d068:	607c      	str	r4, [r7, #4]
 800d06a:	932d      	str	r3, [sp, #180]	; 0xb4
 800d06c:	3708      	adds	r7, #8
 800d06e:	2b07      	cmp	r3, #7
 800d070:	dd08      	ble.n	800d084 <_svfprintf_r+0x10e4>
 800d072:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d074:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d076:	aa2c      	add	r2, sp, #176	; 0xb0
 800d078:	f003 f8a8 	bl	80101cc <__ssprint_r>
 800d07c:	2800      	cmp	r0, #0
 800d07e:	d000      	beq.n	800d082 <_svfprintf_r+0x10e2>
 800d080:	e16d      	b.n	800d35e <_svfprintf_r+0x13be>
 800d082:	af2f      	add	r7, sp, #188	; 0xbc
 800d084:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d086:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d088:	2510      	movs	r5, #16
 800d08a:	1ad3      	subs	r3, r2, r3
 800d08c:	43e2      	mvns	r2, r4
 800d08e:	17d2      	asrs	r2, r2, #31
 800d090:	4014      	ands	r4, r2
 800d092:	1b1c      	subs	r4, r3, r4
 800d094:	2c00      	cmp	r4, #0
 800d096:	dc00      	bgt.n	800d09a <_svfprintf_r+0x10fa>
 800d098:	e6b0      	b.n	800cdfc <_svfprintf_r+0xe5c>
 800d09a:	0039      	movs	r1, r7
 800d09c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d09e:	4807      	ldr	r0, [pc, #28]	; (800d0bc <_svfprintf_r+0x111c>)
 800d0a0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d0a2:	3301      	adds	r3, #1
 800d0a4:	3108      	adds	r1, #8
 800d0a6:	6038      	str	r0, [r7, #0]
 800d0a8:	2c10      	cmp	r4, #16
 800d0aa:	dd00      	ble.n	800d0ae <_svfprintf_r+0x110e>
 800d0ac:	e096      	b.n	800d1dc <_svfprintf_r+0x123c>
 800d0ae:	1912      	adds	r2, r2, r4
 800d0b0:	607c      	str	r4, [r7, #4]
 800d0b2:	922e      	str	r2, [sp, #184]	; 0xb8
 800d0b4:	e6dd      	b.n	800ce72 <_svfprintf_r+0xed2>
 800d0b6:	46c0      	nop			; (mov r8, r8)
 800d0b8:	080133ee 	.word	0x080133ee
 800d0bc:	08013400 	.word	0x08013400
 800d0c0:	2010      	movs	r0, #16
 800d0c2:	1812      	adds	r2, r2, r0
 800d0c4:	6078      	str	r0, [r7, #4]
 800d0c6:	922e      	str	r2, [sp, #184]	; 0xb8
 800d0c8:	932d      	str	r3, [sp, #180]	; 0xb4
 800d0ca:	2b07      	cmp	r3, #7
 800d0cc:	dd08      	ble.n	800d0e0 <_svfprintf_r+0x1140>
 800d0ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d0d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d0d2:	aa2c      	add	r2, sp, #176	; 0xb0
 800d0d4:	f003 f87a 	bl	80101cc <__ssprint_r>
 800d0d8:	2800      	cmp	r0, #0
 800d0da:	d000      	beq.n	800d0de <_svfprintf_r+0x113e>
 800d0dc:	e13f      	b.n	800d35e <_svfprintf_r+0x13be>
 800d0de:	a92f      	add	r1, sp, #188	; 0xbc
 800d0e0:	000f      	movs	r7, r1
 800d0e2:	3c10      	subs	r4, #16
 800d0e4:	e768      	b.n	800cfb8 <_svfprintf_r+0x1018>
 800d0e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d05d      	beq.n	800d1a8 <_svfprintf_r+0x1208>
 800d0ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d0ee:	3b01      	subs	r3, #1
 800d0f0:	9310      	str	r3, [sp, #64]	; 0x40
 800d0f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d0f4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d0f6:	603b      	str	r3, [r7, #0]
 800d0f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d0fa:	607b      	str	r3, [r7, #4]
 800d0fc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d0fe:	3708      	adds	r7, #8
 800d100:	189b      	adds	r3, r3, r2
 800d102:	932e      	str	r3, [sp, #184]	; 0xb8
 800d104:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d106:	3301      	adds	r3, #1
 800d108:	932d      	str	r3, [sp, #180]	; 0xb4
 800d10a:	2b07      	cmp	r3, #7
 800d10c:	dd08      	ble.n	800d120 <_svfprintf_r+0x1180>
 800d10e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d110:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d112:	aa2c      	add	r2, sp, #176	; 0xb0
 800d114:	f003 f85a 	bl	80101cc <__ssprint_r>
 800d118:	2800      	cmp	r0, #0
 800d11a:	d000      	beq.n	800d11e <_svfprintf_r+0x117e>
 800d11c:	e11f      	b.n	800d35e <_svfprintf_r+0x13be>
 800d11e:	af2f      	add	r7, sp, #188	; 0xbc
 800d120:	9b08      	ldr	r3, [sp, #32]
 800d122:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d124:	189c      	adds	r4, r3, r2
 800d126:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d128:	1b64      	subs	r4, r4, r5
 800d12a:	781b      	ldrb	r3, [r3, #0]
 800d12c:	429c      	cmp	r4, r3
 800d12e:	dd00      	ble.n	800d132 <_svfprintf_r+0x1192>
 800d130:	001c      	movs	r4, r3
 800d132:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d134:	2c00      	cmp	r4, #0
 800d136:	dd12      	ble.n	800d15e <_svfprintf_r+0x11be>
 800d138:	18e3      	adds	r3, r4, r3
 800d13a:	932e      	str	r3, [sp, #184]	; 0xb8
 800d13c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d13e:	603d      	str	r5, [r7, #0]
 800d140:	3301      	adds	r3, #1
 800d142:	607c      	str	r4, [r7, #4]
 800d144:	932d      	str	r3, [sp, #180]	; 0xb4
 800d146:	3708      	adds	r7, #8
 800d148:	2b07      	cmp	r3, #7
 800d14a:	dd08      	ble.n	800d15e <_svfprintf_r+0x11be>
 800d14c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d14e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d150:	aa2c      	add	r2, sp, #176	; 0xb0
 800d152:	f003 f83b 	bl	80101cc <__ssprint_r>
 800d156:	2800      	cmp	r0, #0
 800d158:	d000      	beq.n	800d15c <_svfprintf_r+0x11bc>
 800d15a:	e100      	b.n	800d35e <_svfprintf_r+0x13be>
 800d15c:	af2f      	add	r7, sp, #188	; 0xbc
 800d15e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d160:	781a      	ldrb	r2, [r3, #0]
 800d162:	43e3      	mvns	r3, r4
 800d164:	17db      	asrs	r3, r3, #31
 800d166:	401c      	ands	r4, r3
 800d168:	1b14      	subs	r4, r2, r4
 800d16a:	2c00      	cmp	r4, #0
 800d16c:	dd18      	ble.n	800d1a0 <_svfprintf_r+0x1200>
 800d16e:	0039      	movs	r1, r7
 800d170:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d172:	48aa      	ldr	r0, [pc, #680]	; (800d41c <_svfprintf_r+0x147c>)
 800d174:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d176:	3301      	adds	r3, #1
 800d178:	3108      	adds	r1, #8
 800d17a:	6038      	str	r0, [r7, #0]
 800d17c:	2c10      	cmp	r4, #16
 800d17e:	dc1a      	bgt.n	800d1b6 <_svfprintf_r+0x1216>
 800d180:	1912      	adds	r2, r2, r4
 800d182:	607c      	str	r4, [r7, #4]
 800d184:	922e      	str	r2, [sp, #184]	; 0xb8
 800d186:	000f      	movs	r7, r1
 800d188:	932d      	str	r3, [sp, #180]	; 0xb4
 800d18a:	2b07      	cmp	r3, #7
 800d18c:	dd08      	ble.n	800d1a0 <_svfprintf_r+0x1200>
 800d18e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d190:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d192:	aa2c      	add	r2, sp, #176	; 0xb0
 800d194:	f003 f81a 	bl	80101cc <__ssprint_r>
 800d198:	2800      	cmp	r0, #0
 800d19a:	d000      	beq.n	800d19e <_svfprintf_r+0x11fe>
 800d19c:	e0df      	b.n	800d35e <_svfprintf_r+0x13be>
 800d19e:	af2f      	add	r7, sp, #188	; 0xbc
 800d1a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d1a2:	781b      	ldrb	r3, [r3, #0]
 800d1a4:	18ed      	adds	r5, r5, r3
 800d1a6:	e724      	b.n	800cff2 <_svfprintf_r+0x1052>
 800d1a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d1aa:	3b01      	subs	r3, #1
 800d1ac:	9312      	str	r3, [sp, #72]	; 0x48
 800d1ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d1b0:	3b01      	subs	r3, #1
 800d1b2:	9311      	str	r3, [sp, #68]	; 0x44
 800d1b4:	e79d      	b.n	800d0f2 <_svfprintf_r+0x1152>
 800d1b6:	2010      	movs	r0, #16
 800d1b8:	1812      	adds	r2, r2, r0
 800d1ba:	6078      	str	r0, [r7, #4]
 800d1bc:	922e      	str	r2, [sp, #184]	; 0xb8
 800d1be:	932d      	str	r3, [sp, #180]	; 0xb4
 800d1c0:	2b07      	cmp	r3, #7
 800d1c2:	dd08      	ble.n	800d1d6 <_svfprintf_r+0x1236>
 800d1c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d1c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d1c8:	aa2c      	add	r2, sp, #176	; 0xb0
 800d1ca:	f002 ffff 	bl	80101cc <__ssprint_r>
 800d1ce:	2800      	cmp	r0, #0
 800d1d0:	d000      	beq.n	800d1d4 <_svfprintf_r+0x1234>
 800d1d2:	e0c4      	b.n	800d35e <_svfprintf_r+0x13be>
 800d1d4:	a92f      	add	r1, sp, #188	; 0xbc
 800d1d6:	000f      	movs	r7, r1
 800d1d8:	3c10      	subs	r4, #16
 800d1da:	e7c8      	b.n	800d16e <_svfprintf_r+0x11ce>
 800d1dc:	3210      	adds	r2, #16
 800d1de:	607d      	str	r5, [r7, #4]
 800d1e0:	922e      	str	r2, [sp, #184]	; 0xb8
 800d1e2:	932d      	str	r3, [sp, #180]	; 0xb4
 800d1e4:	2b07      	cmp	r3, #7
 800d1e6:	dd08      	ble.n	800d1fa <_svfprintf_r+0x125a>
 800d1e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d1ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d1ec:	aa2c      	add	r2, sp, #176	; 0xb0
 800d1ee:	f002 ffed 	bl	80101cc <__ssprint_r>
 800d1f2:	2800      	cmp	r0, #0
 800d1f4:	d000      	beq.n	800d1f8 <_svfprintf_r+0x1258>
 800d1f6:	e0b2      	b.n	800d35e <_svfprintf_r+0x13be>
 800d1f8:	a92f      	add	r1, sp, #188	; 0xbc
 800d1fa:	000f      	movs	r7, r1
 800d1fc:	3c10      	subs	r4, #16
 800d1fe:	e74c      	b.n	800d09a <_svfprintf_r+0x10fa>
 800d200:	003c      	movs	r4, r7
 800d202:	9919      	ldr	r1, [sp, #100]	; 0x64
 800d204:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d206:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d208:	3101      	adds	r1, #1
 800d20a:	3301      	adds	r3, #1
 800d20c:	3408      	adds	r4, #8
 800d20e:	2a01      	cmp	r2, #1
 800d210:	dc03      	bgt.n	800d21a <_svfprintf_r+0x127a>
 800d212:	2201      	movs	r2, #1
 800d214:	4216      	tst	r6, r2
 800d216:	d100      	bne.n	800d21a <_svfprintf_r+0x127a>
 800d218:	e07f      	b.n	800d31a <_svfprintf_r+0x137a>
 800d21a:	9a08      	ldr	r2, [sp, #32]
 800d21c:	912e      	str	r1, [sp, #184]	; 0xb8
 800d21e:	603a      	str	r2, [r7, #0]
 800d220:	2201      	movs	r2, #1
 800d222:	932d      	str	r3, [sp, #180]	; 0xb4
 800d224:	607a      	str	r2, [r7, #4]
 800d226:	2b07      	cmp	r3, #7
 800d228:	dd08      	ble.n	800d23c <_svfprintf_r+0x129c>
 800d22a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d22c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d22e:	aa2c      	add	r2, sp, #176	; 0xb0
 800d230:	f002 ffcc 	bl	80101cc <__ssprint_r>
 800d234:	2800      	cmp	r0, #0
 800d236:	d000      	beq.n	800d23a <_svfprintf_r+0x129a>
 800d238:	e091      	b.n	800d35e <_svfprintf_r+0x13be>
 800d23a:	ac2f      	add	r4, sp, #188	; 0xbc
 800d23c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800d23e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d240:	6023      	str	r3, [r4, #0]
 800d242:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d244:	6063      	str	r3, [r4, #4]
 800d246:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d248:	3408      	adds	r4, #8
 800d24a:	189b      	adds	r3, r3, r2
 800d24c:	932e      	str	r3, [sp, #184]	; 0xb8
 800d24e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d250:	3301      	adds	r3, #1
 800d252:	932d      	str	r3, [sp, #180]	; 0xb4
 800d254:	2b07      	cmp	r3, #7
 800d256:	dd07      	ble.n	800d268 <_svfprintf_r+0x12c8>
 800d258:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d25a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d25c:	aa2c      	add	r2, sp, #176	; 0xb0
 800d25e:	f002 ffb5 	bl	80101cc <__ssprint_r>
 800d262:	2800      	cmp	r0, #0
 800d264:	d17b      	bne.n	800d35e <_svfprintf_r+0x13be>
 800d266:	ac2f      	add	r4, sp, #188	; 0xbc
 800d268:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d26a:	2200      	movs	r2, #0
 800d26c:	9814      	ldr	r0, [sp, #80]	; 0x50
 800d26e:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d270:	9309      	str	r3, [sp, #36]	; 0x24
 800d272:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d274:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800d276:	1e5d      	subs	r5, r3, #1
 800d278:	2300      	movs	r3, #0
 800d27a:	f7f3 f8e5 	bl	8000448 <__aeabi_dcmpeq>
 800d27e:	2800      	cmp	r0, #0
 800d280:	d126      	bne.n	800d2d0 <_svfprintf_r+0x1330>
 800d282:	9b08      	ldr	r3, [sp, #32]
 800d284:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d286:	3301      	adds	r3, #1
 800d288:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d28a:	6023      	str	r3, [r4, #0]
 800d28c:	1e7b      	subs	r3, r7, #1
 800d28e:	3201      	adds	r2, #1
 800d290:	185b      	adds	r3, r3, r1
 800d292:	6065      	str	r5, [r4, #4]
 800d294:	932e      	str	r3, [sp, #184]	; 0xb8
 800d296:	922d      	str	r2, [sp, #180]	; 0xb4
 800d298:	3408      	adds	r4, #8
 800d29a:	2a07      	cmp	r2, #7
 800d29c:	dd07      	ble.n	800d2ae <_svfprintf_r+0x130e>
 800d29e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d2a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d2a2:	aa2c      	add	r2, sp, #176	; 0xb0
 800d2a4:	f002 ff92 	bl	80101cc <__ssprint_r>
 800d2a8:	2800      	cmp	r0, #0
 800d2aa:	d158      	bne.n	800d35e <_svfprintf_r+0x13be>
 800d2ac:	ac2f      	add	r4, sp, #188	; 0xbc
 800d2ae:	ab28      	add	r3, sp, #160	; 0xa0
 800d2b0:	6023      	str	r3, [r4, #0]
 800d2b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d2b4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d2b6:	6063      	str	r3, [r4, #4]
 800d2b8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d2ba:	189b      	adds	r3, r3, r2
 800d2bc:	932e      	str	r3, [sp, #184]	; 0xb8
 800d2be:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d2c0:	3301      	adds	r3, #1
 800d2c2:	932d      	str	r3, [sp, #180]	; 0xb4
 800d2c4:	2b07      	cmp	r3, #7
 800d2c6:	dd00      	ble.n	800d2ca <_svfprintf_r+0x132a>
 800d2c8:	e638      	b.n	800cf3c <_svfprintf_r+0xf9c>
 800d2ca:	3408      	adds	r4, #8
 800d2cc:	0027      	movs	r7, r4
 800d2ce:	e595      	b.n	800cdfc <_svfprintf_r+0xe5c>
 800d2d0:	2710      	movs	r7, #16
 800d2d2:	2d00      	cmp	r5, #0
 800d2d4:	ddeb      	ble.n	800d2ae <_svfprintf_r+0x130e>
 800d2d6:	0021      	movs	r1, r4
 800d2d8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d2da:	4850      	ldr	r0, [pc, #320]	; (800d41c <_svfprintf_r+0x147c>)
 800d2dc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d2de:	3301      	adds	r3, #1
 800d2e0:	3108      	adds	r1, #8
 800d2e2:	6020      	str	r0, [r4, #0]
 800d2e4:	2d10      	cmp	r5, #16
 800d2e6:	dc07      	bgt.n	800d2f8 <_svfprintf_r+0x1358>
 800d2e8:	6065      	str	r5, [r4, #4]
 800d2ea:	000c      	movs	r4, r1
 800d2ec:	18ad      	adds	r5, r5, r2
 800d2ee:	952e      	str	r5, [sp, #184]	; 0xb8
 800d2f0:	932d      	str	r3, [sp, #180]	; 0xb4
 800d2f2:	2b07      	cmp	r3, #7
 800d2f4:	dddb      	ble.n	800d2ae <_svfprintf_r+0x130e>
 800d2f6:	e7d2      	b.n	800d29e <_svfprintf_r+0x12fe>
 800d2f8:	3210      	adds	r2, #16
 800d2fa:	6067      	str	r7, [r4, #4]
 800d2fc:	922e      	str	r2, [sp, #184]	; 0xb8
 800d2fe:	932d      	str	r3, [sp, #180]	; 0xb4
 800d300:	2b07      	cmp	r3, #7
 800d302:	dd07      	ble.n	800d314 <_svfprintf_r+0x1374>
 800d304:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d306:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d308:	aa2c      	add	r2, sp, #176	; 0xb0
 800d30a:	f002 ff5f 	bl	80101cc <__ssprint_r>
 800d30e:	2800      	cmp	r0, #0
 800d310:	d125      	bne.n	800d35e <_svfprintf_r+0x13be>
 800d312:	a92f      	add	r1, sp, #188	; 0xbc
 800d314:	000c      	movs	r4, r1
 800d316:	3d10      	subs	r5, #16
 800d318:	e7dd      	b.n	800d2d6 <_svfprintf_r+0x1336>
 800d31a:	9808      	ldr	r0, [sp, #32]
 800d31c:	912e      	str	r1, [sp, #184]	; 0xb8
 800d31e:	c705      	stmia	r7!, {r0, r2}
 800d320:	932d      	str	r3, [sp, #180]	; 0xb4
 800d322:	e7e6      	b.n	800d2f2 <_svfprintf_r+0x1352>
 800d324:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d326:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d328:	2510      	movs	r5, #16
 800d32a:	1a9c      	subs	r4, r3, r2
 800d32c:	2c00      	cmp	r4, #0
 800d32e:	dc00      	bgt.n	800d332 <_svfprintf_r+0x1392>
 800d330:	e567      	b.n	800ce02 <_svfprintf_r+0xe62>
 800d332:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d334:	493a      	ldr	r1, [pc, #232]	; (800d420 <_svfprintf_r+0x1480>)
 800d336:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d338:	3301      	adds	r3, #1
 800d33a:	6039      	str	r1, [r7, #0]
 800d33c:	2c10      	cmp	r4, #16
 800d33e:	dc19      	bgt.n	800d374 <_svfprintf_r+0x13d4>
 800d340:	607c      	str	r4, [r7, #4]
 800d342:	18a4      	adds	r4, r4, r2
 800d344:	942e      	str	r4, [sp, #184]	; 0xb8
 800d346:	932d      	str	r3, [sp, #180]	; 0xb4
 800d348:	2b07      	cmp	r3, #7
 800d34a:	dc00      	bgt.n	800d34e <_svfprintf_r+0x13ae>
 800d34c:	e559      	b.n	800ce02 <_svfprintf_r+0xe62>
 800d34e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d350:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d352:	aa2c      	add	r2, sp, #176	; 0xb0
 800d354:	f002 ff3a 	bl	80101cc <__ssprint_r>
 800d358:	2800      	cmp	r0, #0
 800d35a:	d100      	bne.n	800d35e <_svfprintf_r+0x13be>
 800d35c:	e551      	b.n	800ce02 <_svfprintf_r+0xe62>
 800d35e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d360:	2b00      	cmp	r3, #0
 800d362:	d101      	bne.n	800d368 <_svfprintf_r+0x13c8>
 800d364:	f7ff f845 	bl	800c3f2 <_svfprintf_r+0x452>
 800d368:	0019      	movs	r1, r3
 800d36a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d36c:	f7fd fd80 	bl	800ae70 <_free_r>
 800d370:	f7ff f83f 	bl	800c3f2 <_svfprintf_r+0x452>
 800d374:	3210      	adds	r2, #16
 800d376:	607d      	str	r5, [r7, #4]
 800d378:	922e      	str	r2, [sp, #184]	; 0xb8
 800d37a:	932d      	str	r3, [sp, #180]	; 0xb4
 800d37c:	3708      	adds	r7, #8
 800d37e:	2b07      	cmp	r3, #7
 800d380:	dd07      	ble.n	800d392 <_svfprintf_r+0x13f2>
 800d382:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d384:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d386:	aa2c      	add	r2, sp, #176	; 0xb0
 800d388:	f002 ff20 	bl	80101cc <__ssprint_r>
 800d38c:	2800      	cmp	r0, #0
 800d38e:	d1e6      	bne.n	800d35e <_svfprintf_r+0x13be>
 800d390:	af2f      	add	r7, sp, #188	; 0xbc
 800d392:	3c10      	subs	r4, #16
 800d394:	e7cd      	b.n	800d332 <_svfprintf_r+0x1392>
 800d396:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d398:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d39a:	f7fd fd69 	bl	800ae70 <_free_r>
 800d39e:	e549      	b.n	800ce34 <_svfprintf_r+0xe94>
 800d3a0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d101      	bne.n	800d3aa <_svfprintf_r+0x140a>
 800d3a6:	f7ff f824 	bl	800c3f2 <_svfprintf_r+0x452>
 800d3aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d3ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d3ae:	aa2c      	add	r2, sp, #176	; 0xb0
 800d3b0:	f002 ff0c 	bl	80101cc <__ssprint_r>
 800d3b4:	f7ff f81d 	bl	800c3f2 <_svfprintf_r+0x452>
 800d3b8:	0034      	movs	r4, r6
 800d3ba:	2a00      	cmp	r2, #0
 800d3bc:	d101      	bne.n	800d3c2 <_svfprintf_r+0x1422>
 800d3be:	f7fe ff8c 	bl	800c2da <_svfprintf_r+0x33a>
 800d3c2:	2b01      	cmp	r3, #1
 800d3c4:	d101      	bne.n	800d3ca <_svfprintf_r+0x142a>
 800d3c6:	f7ff fc01 	bl	800cbcc <_svfprintf_r+0xc2c>
 800d3ca:	2b02      	cmp	r3, #2
 800d3cc:	d100      	bne.n	800d3d0 <_svfprintf_r+0x1430>
 800d3ce:	e459      	b.n	800cc84 <_svfprintf_r+0xce4>
 800d3d0:	2507      	movs	r5, #7
 800d3d2:	ab58      	add	r3, sp, #352	; 0x160
 800d3d4:	9308      	str	r3, [sp, #32]
 800d3d6:	9a08      	ldr	r2, [sp, #32]
 800d3d8:	0013      	movs	r3, r2
 800d3da:	3b01      	subs	r3, #1
 800d3dc:	9308      	str	r3, [sp, #32]
 800d3de:	9b06      	ldr	r3, [sp, #24]
 800d3e0:	9908      	ldr	r1, [sp, #32]
 800d3e2:	402b      	ands	r3, r5
 800d3e4:	3330      	adds	r3, #48	; 0x30
 800d3e6:	700b      	strb	r3, [r1, #0]
 800d3e8:	9907      	ldr	r1, [sp, #28]
 800d3ea:	074e      	lsls	r6, r1, #29
 800d3ec:	9906      	ldr	r1, [sp, #24]
 800d3ee:	08c8      	lsrs	r0, r1, #3
 800d3f0:	9907      	ldr	r1, [sp, #28]
 800d3f2:	4306      	orrs	r6, r0
 800d3f4:	08c9      	lsrs	r1, r1, #3
 800d3f6:	9107      	str	r1, [sp, #28]
 800d3f8:	0031      	movs	r1, r6
 800d3fa:	9807      	ldr	r0, [sp, #28]
 800d3fc:	9606      	str	r6, [sp, #24]
 800d3fe:	4301      	orrs	r1, r0
 800d400:	d1e9      	bne.n	800d3d6 <_svfprintf_r+0x1436>
 800d402:	07e1      	lsls	r1, r4, #31
 800d404:	d400      	bmi.n	800d408 <_svfprintf_r+0x1468>
 800d406:	e42a      	b.n	800cc5e <_svfprintf_r+0xcbe>
 800d408:	2b30      	cmp	r3, #48	; 0x30
 800d40a:	d100      	bne.n	800d40e <_svfprintf_r+0x146e>
 800d40c:	e427      	b.n	800cc5e <_svfprintf_r+0xcbe>
 800d40e:	2130      	movs	r1, #48	; 0x30
 800d410:	9b08      	ldr	r3, [sp, #32]
 800d412:	3b01      	subs	r3, #1
 800d414:	7019      	strb	r1, [r3, #0]
 800d416:	1e93      	subs	r3, r2, #2
 800d418:	9308      	str	r3, [sp, #32]
 800d41a:	e420      	b.n	800cc5e <_svfprintf_r+0xcbe>
 800d41c:	08013400 	.word	0x08013400
 800d420:	080133f0 	.word	0x080133f0

0800d424 <__ssvfscanf_r>:
 800d424:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d426:	4ca7      	ldr	r4, [pc, #668]	; (800d6c4 <__ssvfscanf_r+0x2a0>)
 800d428:	44a5      	add	sp, r4
 800d42a:	af02      	add	r7, sp, #8
 800d42c:	633b      	str	r3, [r7, #48]	; 0x30
 800d42e:	000b      	movs	r3, r1
 800d430:	6378      	str	r0, [r7, #52]	; 0x34
 800d432:	6479      	str	r1, [r7, #68]	; 0x44
 800d434:	61ba      	str	r2, [r7, #24]
 800d436:	220c      	movs	r2, #12
 800d438:	5e9a      	ldrsh	r2, [r3, r2]
 800d43a:	2380      	movs	r3, #128	; 0x80
 800d43c:	019b      	lsls	r3, r3, #6
 800d43e:	421a      	tst	r2, r3
 800d440:	d105      	bne.n	800d44e <__ssvfscanf_r+0x2a>
 800d442:	4313      	orrs	r3, r2
 800d444:	818b      	strh	r3, [r1, #12]
 800d446:	4aa0      	ldr	r2, [pc, #640]	; (800d6c8 <__ssvfscanf_r+0x2a4>)
 800d448:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800d44a:	4013      	ands	r3, r2
 800d44c:	664b      	str	r3, [r1, #100]	; 0x64
 800d44e:	2300      	movs	r3, #0
 800d450:	617b      	str	r3, [r7, #20]
 800d452:	643b      	str	r3, [r7, #64]	; 0x40
 800d454:	62bb      	str	r3, [r7, #40]	; 0x28
 800d456:	627b      	str	r3, [r7, #36]	; 0x24
 800d458:	63bb      	str	r3, [r7, #56]	; 0x38
 800d45a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d45c:	69bb      	ldr	r3, [r7, #24]
 800d45e:	69ba      	ldr	r2, [r7, #24]
 800d460:	781b      	ldrb	r3, [r3, #0]
 800d462:	3201      	adds	r2, #1
 800d464:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d466:	61ba      	str	r2, [r7, #24]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d100      	bne.n	800d46e <__ssvfscanf_r+0x4a>
 800d46c:	e0d7      	b.n	800d61e <__ssvfscanf_r+0x1fa>
 800d46e:	2608      	movs	r6, #8
 800d470:	2108      	movs	r1, #8
 800d472:	4a96      	ldr	r2, [pc, #600]	; (800d6cc <__ssvfscanf_r+0x2a8>)
 800d474:	5cd2      	ldrb	r2, [r2, r3]
 800d476:	4016      	ands	r6, r2
 800d478:	420a      	tst	r2, r1
 800d47a:	d01d      	beq.n	800d4b8 <__ssvfscanf_r+0x94>
 800d47c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d47e:	685b      	ldr	r3, [r3, #4]
 800d480:	2b00      	cmp	r3, #0
 800d482:	dd12      	ble.n	800d4aa <__ssvfscanf_r+0x86>
 800d484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d486:	4991      	ldr	r1, [pc, #580]	; (800d6cc <__ssvfscanf_r+0x2a8>)
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	781a      	ldrb	r2, [r3, #0]
 800d48c:	5c8a      	ldrb	r2, [r1, r2]
 800d48e:	2108      	movs	r1, #8
 800d490:	420a      	tst	r2, r1
 800d492:	d0e3      	beq.n	800d45c <__ssvfscanf_r+0x38>
 800d494:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d496:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d498:	3201      	adds	r2, #1
 800d49a:	63ba      	str	r2, [r7, #56]	; 0x38
 800d49c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d49e:	3301      	adds	r3, #1
 800d4a0:	6852      	ldr	r2, [r2, #4]
 800d4a2:	600b      	str	r3, [r1, #0]
 800d4a4:	3a01      	subs	r2, #1
 800d4a6:	604a      	str	r2, [r1, #4]
 800d4a8:	e7e8      	b.n	800d47c <__ssvfscanf_r+0x58>
 800d4aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d4ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d4ae:	f002 ff4d 	bl	801034c <__ssrefill_r>
 800d4b2:	2800      	cmp	r0, #0
 800d4b4:	d0e6      	beq.n	800d484 <__ssvfscanf_r+0x60>
 800d4b6:	e7d1      	b.n	800d45c <__ssvfscanf_r+0x38>
 800d4b8:	2b25      	cmp	r3, #37	; 0x25
 800d4ba:	d165      	bne.n	800d588 <__ssvfscanf_r+0x164>
 800d4bc:	250a      	movs	r5, #10
 800d4be:	2480      	movs	r4, #128	; 0x80
 800d4c0:	69ba      	ldr	r2, [r7, #24]
 800d4c2:	63fe      	str	r6, [r7, #60]	; 0x3c
 800d4c4:	3b16      	subs	r3, #22
 800d4c6:	69b9      	ldr	r1, [r7, #24]
 800d4c8:	3101      	adds	r1, #1
 800d4ca:	61b9      	str	r1, [r7, #24]
 800d4cc:	7811      	ldrb	r1, [r2, #0]
 800d4ce:	0008      	movs	r0, r1
 800d4d0:	3825      	subs	r0, #37	; 0x25
 800d4d2:	2855      	cmp	r0, #85	; 0x55
 800d4d4:	d900      	bls.n	800d4d8 <__ssvfscanf_r+0xb4>
 800d4d6:	e170      	b.n	800d7ba <__ssvfscanf_r+0x396>
 800d4d8:	f7f2 fe26 	bl	8000128 <__gnu_thumb1_case_uhi>
 800d4dc:	016f0056 	.word	0x016f0056
 800d4e0:	016f016f 	.word	0x016f016f
 800d4e4:	0081016f 	.word	0x0081016f
 800d4e8:	016f016f 	.word	0x016f016f
 800d4ec:	016f016f 	.word	0x016f016f
 800d4f0:	00b8016f 	.word	0x00b8016f
 800d4f4:	00b800b8 	.word	0x00b800b8
 800d4f8:	00b800b8 	.word	0x00b800b8
 800d4fc:	00b800b8 	.word	0x00b800b8
 800d500:	00b800b8 	.word	0x00b800b8
 800d504:	016f00b8 	.word	0x016f00b8
 800d508:	016f016f 	.word	0x016f016f
 800d50c:	016f016f 	.word	0x016f016f
 800d510:	016f016f 	.word	0x016f016f
 800d514:	016f00d8 	.word	0x016f00d8
 800d518:	00c1010a 	.word	0x00c1010a
 800d51c:	00d800d8 	.word	0x00d800d8
 800d520:	016f00d8 	.word	0x016f00d8
 800d524:	016f016f 	.word	0x016f016f
 800d528:	009f016f 	.word	0x009f016f
 800d52c:	016f016f 	.word	0x016f016f
 800d530:	016f00c9 	.word	0x016f00c9
 800d534:	016f016f 	.word	0x016f016f
 800d538:	016f00f0 	.word	0x016f00f0
 800d53c:	016f016f 	.word	0x016f016f
 800d540:	00d1016f 	.word	0x00d1016f
 800d544:	016f016f 	.word	0x016f016f
 800d548:	016f00fe 	.word	0x016f00fe
 800d54c:	016f016f 	.word	0x016f016f
 800d550:	016f016f 	.word	0x016f016f
 800d554:	016f00d8 	.word	0x016f00d8
 800d558:	00c3010c 	.word	0x00c3010c
 800d55c:	00d800d8 	.word	0x00d800d8
 800d560:	009400d8 	.word	0x009400d8
 800d564:	009f012f 	.word	0x009f012f
 800d568:	0088016f 	.word	0x0088016f
 800d56c:	011200a9 	.word	0x011200a9
 800d570:	011000cb 	.word	0x011000cb
 800d574:	016f016f 	.word	0x016f016f
 800d578:	00a600f2 	.word	0x00a600f2
 800d57c:	016f00cf 	.word	0x016f00cf
 800d580:	00d1016f 	.word	0x00d1016f
 800d584:	00a6016f 	.word	0x00a6016f
 800d588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d58a:	685b      	ldr	r3, [r3, #4]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	dd12      	ble.n	800d5b6 <__ssvfscanf_r+0x192>
 800d590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d592:	69ba      	ldr	r2, [r7, #24]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	3a01      	subs	r2, #1
 800d598:	7819      	ldrb	r1, [r3, #0]
 800d59a:	7812      	ldrb	r2, [r2, #0]
 800d59c:	4291      	cmp	r1, r2
 800d59e:	d13e      	bne.n	800d61e <__ssvfscanf_r+0x1fa>
 800d5a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d5a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d5a4:	6852      	ldr	r2, [r2, #4]
 800d5a6:	3301      	adds	r3, #1
 800d5a8:	600b      	str	r3, [r1, #0]
 800d5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ac:	3a01      	subs	r2, #1
 800d5ae:	604a      	str	r2, [r1, #4]
 800d5b0:	3301      	adds	r3, #1
 800d5b2:	63bb      	str	r3, [r7, #56]	; 0x38
 800d5b4:	e752      	b.n	800d45c <__ssvfscanf_r+0x38>
 800d5b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d5b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d5ba:	f002 fec7 	bl	801034c <__ssrefill_r>
 800d5be:	2800      	cmp	r0, #0
 800d5c0:	d0e6      	beq.n	800d590 <__ssvfscanf_r+0x16c>
 800d5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d003      	beq.n	800d5d0 <__ssvfscanf_r+0x1ac>
 800d5c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5ca:	899b      	ldrh	r3, [r3, #12]
 800d5cc:	065b      	lsls	r3, r3, #25
 800d5ce:	d526      	bpl.n	800d61e <__ssvfscanf_r+0x1fa>
 800d5d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d000      	beq.n	800d5d8 <__ssvfscanf_r+0x1b4>
 800d5d6:	e0f6      	b.n	800d7c6 <__ssvfscanf_r+0x3a2>
 800d5d8:	3b01      	subs	r3, #1
 800d5da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d5dc:	e104      	b.n	800d7e8 <__ssvfscanf_r+0x3c4>
 800d5de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d5e0:	4332      	orrs	r2, r6
 800d5e2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d5e4:	d11b      	bne.n	800d61e <__ssvfscanf_r+0x1fa>
 800d5e6:	2610      	movs	r6, #16
 800d5e8:	69ba      	ldr	r2, [r7, #24]
 800d5ea:	e76c      	b.n	800d4c6 <__ssvfscanf_r+0xa2>
 800d5ec:	421e      	tst	r6, r3
 800d5ee:	d116      	bne.n	800d61e <__ssvfscanf_r+0x1fa>
 800d5f0:	7851      	ldrb	r1, [r2, #1]
 800d5f2:	296c      	cmp	r1, #108	; 0x6c
 800d5f4:	d103      	bne.n	800d5fe <__ssvfscanf_r+0x1da>
 800d5f6:	3202      	adds	r2, #2
 800d5f8:	61ba      	str	r2, [r7, #24]
 800d5fa:	2202      	movs	r2, #2
 800d5fc:	e000      	b.n	800d600 <__ssvfscanf_r+0x1dc>
 800d5fe:	2201      	movs	r2, #1
 800d600:	4316      	orrs	r6, r2
 800d602:	e7f1      	b.n	800d5e8 <__ssvfscanf_r+0x1c4>
 800d604:	421e      	tst	r6, r3
 800d606:	d10a      	bne.n	800d61e <__ssvfscanf_r+0x1fa>
 800d608:	7851      	ldrb	r1, [r2, #1]
 800d60a:	2968      	cmp	r1, #104	; 0x68
 800d60c:	d103      	bne.n	800d616 <__ssvfscanf_r+0x1f2>
 800d60e:	3202      	adds	r2, #2
 800d610:	61ba      	str	r2, [r7, #24]
 800d612:	2208      	movs	r2, #8
 800d614:	e7f4      	b.n	800d600 <__ssvfscanf_r+0x1dc>
 800d616:	2204      	movs	r2, #4
 800d618:	e7f2      	b.n	800d600 <__ssvfscanf_r+0x1dc>
 800d61a:	421e      	tst	r6, r3
 800d61c:	d0ed      	beq.n	800d5fa <__ssvfscanf_r+0x1d6>
 800d61e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d620:	2b00      	cmp	r3, #0
 800d622:	d000      	beq.n	800d626 <__ssvfscanf_r+0x202>
 800d624:	e0da      	b.n	800d7dc <__ssvfscanf_r+0x3b8>
 800d626:	e0df      	b.n	800d7e8 <__ssvfscanf_r+0x3c4>
 800d628:	421e      	tst	r6, r3
 800d62a:	d0dd      	beq.n	800d5e8 <__ssvfscanf_r+0x1c4>
 800d62c:	e7f7      	b.n	800d61e <__ssvfscanf_r+0x1fa>
 800d62e:	228f      	movs	r2, #143	; 0x8f
 800d630:	218f      	movs	r1, #143	; 0x8f
 800d632:	4032      	ands	r2, r6
 800d634:	420e      	tst	r6, r1
 800d636:	d1f2      	bne.n	800d61e <__ssvfscanf_r+0x1fa>
 800d638:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d63a:	2900      	cmp	r1, #0
 800d63c:	d104      	bne.n	800d648 <__ssvfscanf_r+0x224>
 800d63e:	b082      	sub	sp, #8
 800d640:	a902      	add	r1, sp, #8
 800d642:	6439      	str	r1, [r7, #64]	; 0x40
 800d644:	600a      	str	r2, [r1, #0]
 800d646:	604a      	str	r2, [r1, #4]
 800d648:	4326      	orrs	r6, r4
 800d64a:	e7cd      	b.n	800d5e8 <__ssvfscanf_r+0x1c4>
 800d64c:	228f      	movs	r2, #143	; 0x8f
 800d64e:	4216      	tst	r6, r2
 800d650:	d1e5      	bne.n	800d61e <__ssvfscanf_r+0x1fa>
 800d652:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d654:	436a      	muls	r2, r5
 800d656:	3a30      	subs	r2, #48	; 0x30
 800d658:	188a      	adds	r2, r1, r2
 800d65a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d65c:	e7c4      	b.n	800d5e8 <__ssvfscanf_r+0x1c4>
 800d65e:	2301      	movs	r3, #1
 800d660:	431e      	orrs	r6, r3
 800d662:	4b1b      	ldr	r3, [pc, #108]	; (800d6d0 <__ssvfscanf_r+0x2ac>)
 800d664:	617b      	str	r3, [r7, #20]
 800d666:	230a      	movs	r3, #10
 800d668:	2403      	movs	r4, #3
 800d66a:	627b      	str	r3, [r7, #36]	; 0x24
 800d66c:	e00f      	b.n	800d68e <__ssvfscanf_r+0x26a>
 800d66e:	2301      	movs	r3, #1
 800d670:	431e      	orrs	r6, r3
 800d672:	4b18      	ldr	r3, [pc, #96]	; (800d6d4 <__ssvfscanf_r+0x2b0>)
 800d674:	617b      	str	r3, [r7, #20]
 800d676:	2308      	movs	r3, #8
 800d678:	e7f6      	b.n	800d668 <__ssvfscanf_r+0x244>
 800d67a:	4b16      	ldr	r3, [pc, #88]	; (800d6d4 <__ssvfscanf_r+0x2b0>)
 800d67c:	e7f2      	b.n	800d664 <__ssvfscanf_r+0x240>
 800d67e:	2380      	movs	r3, #128	; 0x80
 800d680:	009b      	lsls	r3, r3, #2
 800d682:	431e      	orrs	r6, r3
 800d684:	4b13      	ldr	r3, [pc, #76]	; (800d6d4 <__ssvfscanf_r+0x2b0>)
 800d686:	617b      	str	r3, [r7, #20]
 800d688:	2310      	movs	r3, #16
 800d68a:	e7ed      	b.n	800d668 <__ssvfscanf_r+0x244>
 800d68c:	2404      	movs	r4, #4
 800d68e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d690:	685b      	ldr	r3, [r3, #4]
 800d692:	2b00      	cmp	r3, #0
 800d694:	dd55      	ble.n	800d742 <__ssvfscanf_r+0x31e>
 800d696:	0673      	lsls	r3, r6, #25
 800d698:	d407      	bmi.n	800d6aa <__ssvfscanf_r+0x286>
 800d69a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d69c:	490b      	ldr	r1, [pc, #44]	; (800d6cc <__ssvfscanf_r+0x2a8>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	781a      	ldrb	r2, [r3, #0]
 800d6a2:	5c8a      	ldrb	r2, [r1, r2]
 800d6a4:	2108      	movs	r1, #8
 800d6a6:	420a      	tst	r2, r1
 800d6a8:	d152      	bne.n	800d750 <__ssvfscanf_r+0x32c>
 800d6aa:	1e60      	subs	r0, r4, #1
 800d6ac:	2803      	cmp	r0, #3
 800d6ae:	d863      	bhi.n	800d778 <__ssvfscanf_r+0x354>
 800d6b0:	f7f2 fd3a 	bl	8000128 <__gnu_thumb1_case_uhi>
 800d6b4:	03bd01da 	.word	0x03bd01da
 800d6b8:	068a0579 	.word	0x068a0579
 800d6bc:	2301      	movs	r3, #1
 800d6be:	431e      	orrs	r6, r3
 800d6c0:	2402      	movs	r4, #2
 800d6c2:	e7e4      	b.n	800d68e <__ssvfscanf_r+0x26a>
 800d6c4:	fffffd34 	.word	0xfffffd34
 800d6c8:	ffffdfff 	.word	0xffffdfff
 800d6cc:	080130e9 	.word	0x080130e9
 800d6d0:	0800a875 	.word	0x0800a875
 800d6d4:	0800fe7d 	.word	0x0800fe7d
 800d6d8:	2248      	movs	r2, #72	; 0x48
 800d6da:	2318      	movs	r3, #24
 800d6dc:	189b      	adds	r3, r3, r2
 800d6de:	19d8      	adds	r0, r3, r7
 800d6e0:	69b9      	ldr	r1, [r7, #24]
 800d6e2:	f001 f9d7 	bl	800ea94 <__sccl>
 800d6e6:	2340      	movs	r3, #64	; 0x40
 800d6e8:	2401      	movs	r4, #1
 800d6ea:	61b8      	str	r0, [r7, #24]
 800d6ec:	431e      	orrs	r6, r3
 800d6ee:	e7ce      	b.n	800d68e <__ssvfscanf_r+0x26a>
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	431e      	orrs	r6, r3
 800d6f4:	2340      	movs	r3, #64	; 0x40
 800d6f6:	2400      	movs	r4, #0
 800d6f8:	431e      	orrs	r6, r3
 800d6fa:	e7c8      	b.n	800d68e <__ssvfscanf_r+0x26a>
 800d6fc:	2388      	movs	r3, #136	; 0x88
 800d6fe:	e7bf      	b.n	800d680 <__ssvfscanf_r+0x25c>
 800d700:	06f3      	lsls	r3, r6, #27
 800d702:	d500      	bpl.n	800d706 <__ssvfscanf_r+0x2e2>
 800d704:	e6aa      	b.n	800d45c <__ssvfscanf_r+0x38>
 800d706:	2108      	movs	r1, #8
 800d708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d70a:	cb04      	ldmia	r3!, {r2}
 800d70c:	420e      	tst	r6, r1
 800d70e:	d003      	beq.n	800d718 <__ssvfscanf_r+0x2f4>
 800d710:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d712:	7011      	strb	r1, [r2, #0]
 800d714:	633b      	str	r3, [r7, #48]	; 0x30
 800d716:	e6a1      	b.n	800d45c <__ssvfscanf_r+0x38>
 800d718:	0771      	lsls	r1, r6, #29
 800d71a:	d502      	bpl.n	800d722 <__ssvfscanf_r+0x2fe>
 800d71c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d71e:	8011      	strh	r1, [r2, #0]
 800d720:	e7f8      	b.n	800d714 <__ssvfscanf_r+0x2f0>
 800d722:	07f1      	lsls	r1, r6, #31
 800d724:	d502      	bpl.n	800d72c <__ssvfscanf_r+0x308>
 800d726:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d728:	6011      	str	r1, [r2, #0]
 800d72a:	e7f3      	b.n	800d714 <__ssvfscanf_r+0x2f0>
 800d72c:	07b6      	lsls	r6, r6, #30
 800d72e:	d5fa      	bpl.n	800d726 <__ssvfscanf_r+0x302>
 800d730:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d732:	6011      	str	r1, [r2, #0]
 800d734:	17c9      	asrs	r1, r1, #31
 800d736:	6051      	str	r1, [r2, #4]
 800d738:	e7ec      	b.n	800d714 <__ssvfscanf_r+0x2f0>
 800d73a:	4ba2      	ldr	r3, [pc, #648]	; (800d9c4 <__ssvfscanf_r+0x5a0>)
 800d73c:	617b      	str	r3, [r7, #20]
 800d73e:	2300      	movs	r3, #0
 800d740:	e792      	b.n	800d668 <__ssvfscanf_r+0x244>
 800d742:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d744:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d746:	f002 fe01 	bl	801034c <__ssrefill_r>
 800d74a:	2800      	cmp	r0, #0
 800d74c:	d0a3      	beq.n	800d696 <__ssvfscanf_r+0x272>
 800d74e:	e738      	b.n	800d5c2 <__ssvfscanf_r+0x19e>
 800d750:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d752:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d754:	3201      	adds	r2, #1
 800d756:	63ba      	str	r2, [r7, #56]	; 0x38
 800d758:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d75a:	6852      	ldr	r2, [r2, #4]
 800d75c:	3a01      	subs	r2, #1
 800d75e:	604a      	str	r2, [r1, #4]
 800d760:	2a00      	cmp	r2, #0
 800d762:	dd02      	ble.n	800d76a <__ssvfscanf_r+0x346>
 800d764:	3301      	adds	r3, #1
 800d766:	600b      	str	r3, [r1, #0]
 800d768:	e797      	b.n	800d69a <__ssvfscanf_r+0x276>
 800d76a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d76c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d76e:	f002 fded 	bl	801034c <__ssrefill_r>
 800d772:	2800      	cmp	r0, #0
 800d774:	d091      	beq.n	800d69a <__ssvfscanf_r+0x276>
 800d776:	e724      	b.n	800d5c2 <__ssvfscanf_r+0x19e>
 800d778:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d77a:	2301      	movs	r3, #1
 800d77c:	2a00      	cmp	r2, #0
 800d77e:	d100      	bne.n	800d782 <__ssvfscanf_r+0x35e>
 800d780:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d782:	2210      	movs	r2, #16
 800d784:	0034      	movs	r4, r6
 800d786:	4032      	ands	r2, r6
 800d788:	623a      	str	r2, [r7, #32]
 800d78a:	401c      	ands	r4, r3
 800d78c:	421e      	tst	r6, r3
 800d78e:	d100      	bne.n	800d792 <__ssvfscanf_r+0x36e>
 800d790:	e0f3      	b.n	800d97a <__ssvfscanf_r+0x556>
 800d792:	2a00      	cmp	r2, #0
 800d794:	d000      	beq.n	800d798 <__ssvfscanf_r+0x374>
 800d796:	e0b6      	b.n	800d906 <__ssvfscanf_r+0x4e2>
 800d798:	2080      	movs	r0, #128	; 0x80
 800d79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d79c:	cb10      	ldmia	r3!, {r4}
 800d79e:	613b      	str	r3, [r7, #16]
 800d7a0:	4206      	tst	r6, r0
 800d7a2:	d100      	bne.n	800d7a6 <__ssvfscanf_r+0x382>
 800d7a4:	e0b7      	b.n	800d916 <__ssvfscanf_r+0x4f2>
 800d7a6:	2c00      	cmp	r4, #0
 800d7a8:	d007      	beq.n	800d7ba <__ssvfscanf_r+0x396>
 800d7aa:	f7fb ff6d 	bl	8009688 <malloc>
 800d7ae:	6338      	str	r0, [r7, #48]	; 0x30
 800d7b0:	2800      	cmp	r0, #0
 800d7b2:	d11f      	bne.n	800d7f4 <__ssvfscanf_r+0x3d0>
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	425b      	negs	r3, r3
 800d7b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d7ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d013      	beq.n	800d7e8 <__ssvfscanf_r+0x3c4>
 800d7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7c2:	3301      	adds	r3, #1
 800d7c4:	d10a      	bne.n	800d7dc <__ssvfscanf_r+0x3b8>
 800d7c6:	2400      	movs	r4, #0
 800d7c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7ca:	681d      	ldr	r5, [r3, #0]
 800d7cc:	88db      	ldrh	r3, [r3, #6]
 800d7ce:	42a3      	cmp	r3, r4
 800d7d0:	dd01      	ble.n	800d7d6 <__ssvfscanf_r+0x3b2>
 800d7d2:	f001 f82a 	bl	800e82a <__ssvfscanf_r+0x1406>
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	425b      	negs	r3, r3
 800d7da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d7dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7de:	6818      	ldr	r0, [r3, #0]
 800d7e0:	2800      	cmp	r0, #0
 800d7e2:	d001      	beq.n	800d7e8 <__ssvfscanf_r+0x3c4>
 800d7e4:	f7fb ff5a 	bl	800969c <free>
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7ec:	23b1      	movs	r3, #177	; 0xb1
 800d7ee:	009b      	lsls	r3, r3, #2
 800d7f0:	449d      	add	sp, r3
 800d7f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f6:	6023      	str	r3, [r4, #0]
 800d7f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7fa:	88de      	ldrh	r6, [r3, #6]
 800d7fc:	889d      	ldrh	r5, [r3, #4]
 800d7fe:	42ae      	cmp	r6, r5
 800d800:	d30e      	bcc.n	800d820 <__ssvfscanf_r+0x3fc>
 800d802:	4b71      	ldr	r3, [pc, #452]	; (800d9c8 <__ssvfscanf_r+0x5a4>)
 800d804:	429d      	cmp	r5, r3
 800d806:	d8d5      	bhi.n	800d7b4 <__ssvfscanf_r+0x390>
 800d808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d80a:	3508      	adds	r5, #8
 800d80c:	b2ad      	uxth	r5, r5
 800d80e:	6818      	ldr	r0, [r3, #0]
 800d810:	00a9      	lsls	r1, r5, #2
 800d812:	f002 f901 	bl	800fa18 <realloc>
 800d816:	2800      	cmp	r0, #0
 800d818:	d0cc      	beq.n	800d7b4 <__ssvfscanf_r+0x390>
 800d81a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d81c:	6018      	str	r0, [r3, #0]
 800d81e:	809d      	strh	r5, [r3, #4]
 800d820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d822:	1c72      	adds	r2, r6, #1
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	00b6      	lsls	r6, r6, #2
 800d828:	50f4      	str	r4, [r6, r3]
 800d82a:	2320      	movs	r3, #32
 800d82c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d82e:	0026      	movs	r6, r4
 800d830:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800d832:	80ca      	strh	r2, [r1, #6]
 800d834:	61fb      	str	r3, [r7, #28]
 800d836:	2500      	movs	r5, #0
 800d838:	f7fd f9fe 	bl	800ac38 <__locale_mb_cur_max>
 800d83c:	42a8      	cmp	r0, r5
 800d83e:	d100      	bne.n	800d842 <__ssvfscanf_r+0x41e>
 800d840:	e6bf      	b.n	800d5c2 <__ssvfscanf_r+0x19e>
 800d842:	1c6a      	adds	r2, r5, #1
 800d844:	60fa      	str	r2, [r7, #12]
 800d846:	228c      	movs	r2, #140	; 0x8c
 800d848:	2048      	movs	r0, #72	; 0x48
 800d84a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d84c:	0052      	lsls	r2, r2, #1
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	1812      	adds	r2, r2, r0
 800d852:	7819      	ldrb	r1, [r3, #0]
 800d854:	19d2      	adds	r2, r2, r7
 800d856:	5551      	strb	r1, [r2, r5]
 800d858:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d85a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d85c:	6852      	ldr	r2, [r2, #4]
 800d85e:	3301      	adds	r3, #1
 800d860:	600b      	str	r3, [r1, #0]
 800d862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d864:	3a01      	subs	r2, #1
 800d866:	604a      	str	r2, [r1, #4]
 800d868:	2b03      	cmp	r3, #3
 800d86a:	d102      	bne.n	800d872 <__ssvfscanf_r+0x44e>
 800d86c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d86e:	2b04      	cmp	r3, #4
 800d870:	d007      	beq.n	800d882 <__ssvfscanf_r+0x45e>
 800d872:	2048      	movs	r0, #72	; 0x48
 800d874:	2310      	movs	r3, #16
 800d876:	181b      	adds	r3, r3, r0
 800d878:	2208      	movs	r2, #8
 800d87a:	2100      	movs	r1, #0
 800d87c:	19d8      	adds	r0, r3, r7
 800d87e:	f7fd f997 	bl	800abb0 <memset>
 800d882:	2148      	movs	r1, #72	; 0x48
 800d884:	2310      	movs	r3, #16
 800d886:	228c      	movs	r2, #140	; 0x8c
 800d888:	185b      	adds	r3, r3, r1
 800d88a:	0052      	lsls	r2, r2, #1
 800d88c:	19db      	adds	r3, r3, r7
 800d88e:	1852      	adds	r2, r2, r1
 800d890:	9300      	str	r3, [sp, #0]
 800d892:	0021      	movs	r1, r4
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d898:	19d2      	adds	r2, r2, r7
 800d89a:	f002 fc57 	bl	801014c <_mbrtowc_r>
 800d89e:	0003      	movs	r3, r0
 800d8a0:	62b8      	str	r0, [r7, #40]	; 0x28
 800d8a2:	3301      	adds	r3, #1
 800d8a4:	d100      	bne.n	800d8a8 <__ssvfscanf_r+0x484>
 800d8a6:	e68c      	b.n	800d5c2 <__ssvfscanf_r+0x19e>
 800d8a8:	2800      	cmp	r0, #0
 800d8aa:	d139      	bne.n	800d920 <__ssvfscanf_r+0x4fc>
 800d8ac:	6a3b      	ldr	r3, [r7, #32]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d100      	bne.n	800d8b4 <__ssvfscanf_r+0x490>
 800d8b2:	6023      	str	r3, [r4, #0]
 800d8b4:	68fa      	ldr	r2, [r7, #12]
 800d8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8b8:	4694      	mov	ip, r2
 800d8ba:	4463      	add	r3, ip
 800d8bc:	63bb      	str	r3, [r7, #56]	; 0x38
 800d8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c0:	2b03      	cmp	r3, #3
 800d8c2:	d102      	bne.n	800d8ca <__ssvfscanf_r+0x4a6>
 800d8c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d8c6:	2b04      	cmp	r3, #4
 800d8c8:	d002      	beq.n	800d8d0 <__ssvfscanf_r+0x4ac>
 800d8ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8cc:	3b01      	subs	r3, #1
 800d8ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d8d0:	6a3b      	ldr	r3, [r7, #32]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d115      	bne.n	800d902 <__ssvfscanf_r+0x4de>
 800d8d6:	2e00      	cmp	r6, #0
 800d8d8:	d012      	beq.n	800d900 <__ssvfscanf_r+0x4dc>
 800d8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8dc:	69fa      	ldr	r2, [r7, #28]
 800d8de:	1ae5      	subs	r5, r4, r3
 800d8e0:	10ab      	asrs	r3, r5, #2
 800d8e2:	4293      	cmp	r3, r2
 800d8e4:	d30c      	bcc.n	800d900 <__ssvfscanf_r+0x4dc>
 800d8e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8e8:	00d1      	lsls	r1, r2, #3
 800d8ea:	f002 f895 	bl	800fa18 <realloc>
 800d8ee:	6338      	str	r0, [r7, #48]	; 0x30
 800d8f0:	2800      	cmp	r0, #0
 800d8f2:	d100      	bne.n	800d8f6 <__ssvfscanf_r+0x4d2>
 800d8f4:	e75e      	b.n	800d7b4 <__ssvfscanf_r+0x390>
 800d8f6:	69fb      	ldr	r3, [r7, #28]
 800d8f8:	1944      	adds	r4, r0, r5
 800d8fa:	005b      	lsls	r3, r3, #1
 800d8fc:	6030      	str	r0, [r6, #0]
 800d8fe:	61fb      	str	r3, [r7, #28]
 800d900:	3404      	adds	r4, #4
 800d902:	2500      	movs	r5, #0
 800d904:	e010      	b.n	800d928 <__ssvfscanf_r+0x504>
 800d906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d908:	613b      	str	r3, [r7, #16]
 800d90a:	2300      	movs	r3, #0
 800d90c:	001e      	movs	r6, r3
 800d90e:	001c      	movs	r4, r3
 800d910:	61fb      	str	r3, [r7, #28]
 800d912:	633b      	str	r3, [r7, #48]	; 0x30
 800d914:	e78f      	b.n	800d836 <__ssvfscanf_r+0x412>
 800d916:	6a3b      	ldr	r3, [r7, #32]
 800d918:	001e      	movs	r6, r3
 800d91a:	61fb      	str	r3, [r7, #28]
 800d91c:	633b      	str	r3, [r7, #48]	; 0x30
 800d91e:	e78a      	b.n	800d836 <__ssvfscanf_r+0x412>
 800d920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d922:	68fd      	ldr	r5, [r7, #12]
 800d924:	3302      	adds	r3, #2
 800d926:	d1c5      	bne.n	800d8b4 <__ssvfscanf_r+0x490>
 800d928:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d92a:	685b      	ldr	r3, [r3, #4]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	dc12      	bgt.n	800d956 <__ssvfscanf_r+0x532>
 800d930:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d932:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d934:	f002 fd0a 	bl	801034c <__ssrefill_r>
 800d938:	2800      	cmp	r0, #0
 800d93a:	d00c      	beq.n	800d956 <__ssvfscanf_r+0x532>
 800d93c:	2d00      	cmp	r5, #0
 800d93e:	d000      	beq.n	800d942 <__ssvfscanf_r+0x51e>
 800d940:	e63f      	b.n	800d5c2 <__ssvfscanf_r+0x19e>
 800d942:	2e00      	cmp	r6, #0
 800d944:	d10c      	bne.n	800d960 <__ssvfscanf_r+0x53c>
 800d946:	6a3b      	ldr	r3, [r7, #32]
 800d948:	425a      	negs	r2, r3
 800d94a:	4153      	adcs	r3, r2
 800d94c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d94e:	18d3      	adds	r3, r2, r3
 800d950:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	e6de      	b.n	800d714 <__ssvfscanf_r+0x2f0>
 800d956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d000      	beq.n	800d95e <__ssvfscanf_r+0x53a>
 800d95c:	e76c      	b.n	800d838 <__ssvfscanf_r+0x414>
 800d95e:	e7f0      	b.n	800d942 <__ssvfscanf_r+0x51e>
 800d960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d962:	69fa      	ldr	r2, [r7, #28]
 800d964:	1ae1      	subs	r1, r4, r3
 800d966:	108b      	asrs	r3, r1, #2
 800d968:	429a      	cmp	r2, r3
 800d96a:	d9ec      	bls.n	800d946 <__ssvfscanf_r+0x522>
 800d96c:	6830      	ldr	r0, [r6, #0]
 800d96e:	f002 f853 	bl	800fa18 <realloc>
 800d972:	2800      	cmp	r0, #0
 800d974:	d0e7      	beq.n	800d946 <__ssvfscanf_r+0x522>
 800d976:	6030      	str	r0, [r6, #0]
 800d978:	e7e5      	b.n	800d946 <__ssvfscanf_r+0x522>
 800d97a:	6a3b      	ldr	r3, [r7, #32]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d025      	beq.n	800d9cc <__ssvfscanf_r+0x5a8>
 800d980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d982:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d984:	685b      	ldr	r3, [r3, #4]
 800d986:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d988:	6812      	ldr	r2, [r2, #0]
 800d98a:	4299      	cmp	r1, r3
 800d98c:	dd11      	ble.n	800d9b2 <__ssvfscanf_r+0x58e>
 800d98e:	1ac9      	subs	r1, r1, r3
 800d990:	18d2      	adds	r2, r2, r3
 800d992:	18e4      	adds	r4, r4, r3
 800d994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d996:	63f9      	str	r1, [r7, #60]	; 0x3c
 800d998:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d99a:	0019      	movs	r1, r3
 800d99c:	601a      	str	r2, [r3, #0]
 800d99e:	f002 fcd5 	bl	801034c <__ssrefill_r>
 800d9a2:	2800      	cmp	r0, #0
 800d9a4:	d0ec      	beq.n	800d980 <__ssvfscanf_r+0x55c>
 800d9a6:	2c00      	cmp	r4, #0
 800d9a8:	d100      	bne.n	800d9ac <__ssvfscanf_r+0x588>
 800d9aa:	e60a      	b.n	800d5c2 <__ssvfscanf_r+0x19e>
 800d9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ae:	191b      	adds	r3, r3, r4
 800d9b0:	e5ff      	b.n	800d5b2 <__ssvfscanf_r+0x18e>
 800d9b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d9b4:	1a5b      	subs	r3, r3, r1
 800d9b6:	1864      	adds	r4, r4, r1
 800d9b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d9ba:	604b      	str	r3, [r1, #4]
 800d9bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9be:	18d2      	adds	r2, r2, r3
 800d9c0:	600a      	str	r2, [r1, #0]
 800d9c2:	e7f3      	b.n	800d9ac <__ssvfscanf_r+0x588>
 800d9c4:	0800a875 	.word	0x0800a875
 800d9c8:	0000fff6 	.word	0x0000fff6
 800d9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ce:	0034      	movs	r4, r6
 800d9d0:	cb20      	ldmia	r3!, {r5}
 800d9d2:	633b      	str	r3, [r7, #48]	; 0x30
 800d9d4:	2380      	movs	r3, #128	; 0x80
 800d9d6:	401c      	ands	r4, r3
 800d9d8:	421e      	tst	r6, r3
 800d9da:	d028      	beq.n	800da2e <__ssvfscanf_r+0x60a>
 800d9dc:	2d00      	cmp	r5, #0
 800d9de:	d100      	bne.n	800d9e2 <__ssvfscanf_r+0x5be>
 800d9e0:	e61d      	b.n	800d61e <__ssvfscanf_r+0x1fa>
 800d9e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d9e4:	f7fb fe50 	bl	8009688 <malloc>
 800d9e8:	6238      	str	r0, [r7, #32]
 800d9ea:	2800      	cmp	r0, #0
 800d9ec:	d100      	bne.n	800d9f0 <__ssvfscanf_r+0x5cc>
 800d9ee:	e5ef      	b.n	800d5d0 <__ssvfscanf_r+0x1ac>
 800d9f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9f2:	6028      	str	r0, [r5, #0]
 800d9f4:	88de      	ldrh	r6, [r3, #6]
 800d9f6:	889c      	ldrh	r4, [r3, #4]
 800d9f8:	6818      	ldr	r0, [r3, #0]
 800d9fa:	42a6      	cmp	r6, r4
 800d9fc:	d30e      	bcc.n	800da1c <__ssvfscanf_r+0x5f8>
 800d9fe:	4bbf      	ldr	r3, [pc, #764]	; (800dcfc <__ssvfscanf_r+0x8d8>)
 800da00:	429c      	cmp	r4, r3
 800da02:	d900      	bls.n	800da06 <__ssvfscanf_r+0x5e2>
 800da04:	e6df      	b.n	800d7c6 <__ssvfscanf_r+0x3a2>
 800da06:	3408      	adds	r4, #8
 800da08:	b2a4      	uxth	r4, r4
 800da0a:	00a1      	lsls	r1, r4, #2
 800da0c:	f002 f804 	bl	800fa18 <realloc>
 800da10:	2800      	cmp	r0, #0
 800da12:	d100      	bne.n	800da16 <__ssvfscanf_r+0x5f2>
 800da14:	e6d7      	b.n	800d7c6 <__ssvfscanf_r+0x3a2>
 800da16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da18:	6018      	str	r0, [r3, #0]
 800da1a:	809c      	strh	r4, [r3, #4]
 800da1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da1e:	1c72      	adds	r2, r6, #1
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800da24:	00b6      	lsls	r6, r6, #2
 800da26:	002c      	movs	r4, r5
 800da28:	50f5      	str	r5, [r6, r3]
 800da2a:	6a3d      	ldr	r5, [r7, #32]
 800da2c:	80ca      	strh	r2, [r1, #6]
 800da2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da30:	0029      	movs	r1, r5
 800da32:	9300      	str	r3, [sp, #0]
 800da34:	2201      	movs	r2, #1
 800da36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da38:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800da3a:	f002 fca6 	bl	801038a <_sfread_r>
 800da3e:	1e05      	subs	r5, r0, #0
 800da40:	d100      	bne.n	800da44 <__ssvfscanf_r+0x620>
 800da42:	e5be      	b.n	800d5c2 <__ssvfscanf_r+0x19e>
 800da44:	2c00      	cmp	r4, #0
 800da46:	d009      	beq.n	800da5c <__ssvfscanf_r+0x638>
 800da48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da4a:	4283      	cmp	r3, r0
 800da4c:	d906      	bls.n	800da5c <__ssvfscanf_r+0x638>
 800da4e:	0001      	movs	r1, r0
 800da50:	6820      	ldr	r0, [r4, #0]
 800da52:	f001 ffe1 	bl	800fa18 <realloc>
 800da56:	2800      	cmp	r0, #0
 800da58:	d000      	beq.n	800da5c <__ssvfscanf_r+0x638>
 800da5a:	6020      	str	r0, [r4, #0]
 800da5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da5e:	195b      	adds	r3, r3, r5
 800da60:	63bb      	str	r3, [r7, #56]	; 0x38
 800da62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da64:	3301      	adds	r3, #1
 800da66:	e4f8      	b.n	800d45a <__ssvfscanf_r+0x36>
 800da68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d101      	bne.n	800da72 <__ssvfscanf_r+0x64e>
 800da6e:	3b01      	subs	r3, #1
 800da70:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da72:	2210      	movs	r2, #16
 800da74:	2301      	movs	r3, #1
 800da76:	0034      	movs	r4, r6
 800da78:	4032      	ands	r2, r6
 800da7a:	401c      	ands	r4, r3
 800da7c:	623a      	str	r2, [r7, #32]
 800da7e:	421e      	tst	r6, r3
 800da80:	d100      	bne.n	800da84 <__ssvfscanf_r+0x660>
 800da82:	e116      	b.n	800dcb2 <__ssvfscanf_r+0x88e>
 800da84:	2a00      	cmp	r2, #0
 800da86:	d000      	beq.n	800da8a <__ssvfscanf_r+0x666>
 800da88:	e0b0      	b.n	800dbec <__ssvfscanf_r+0x7c8>
 800da8a:	2080      	movs	r0, #128	; 0x80
 800da8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da8e:	cb10      	ldmia	r3!, {r4}
 800da90:	60fb      	str	r3, [r7, #12]
 800da92:	4206      	tst	r6, r0
 800da94:	d100      	bne.n	800da98 <__ssvfscanf_r+0x674>
 800da96:	e0b2      	b.n	800dbfe <__ssvfscanf_r+0x7da>
 800da98:	2c00      	cmp	r4, #0
 800da9a:	d100      	bne.n	800da9e <__ssvfscanf_r+0x67a>
 800da9c:	e68d      	b.n	800d7ba <__ssvfscanf_r+0x396>
 800da9e:	f7fb fdf3 	bl	8009688 <malloc>
 800daa2:	6338      	str	r0, [r7, #48]	; 0x30
 800daa4:	2800      	cmp	r0, #0
 800daa6:	d100      	bne.n	800daaa <__ssvfscanf_r+0x686>
 800daa8:	e684      	b.n	800d7b4 <__ssvfscanf_r+0x390>
 800daaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daac:	6023      	str	r3, [r4, #0]
 800daae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dab0:	88de      	ldrh	r6, [r3, #6]
 800dab2:	889d      	ldrh	r5, [r3, #4]
 800dab4:	42ae      	cmp	r6, r5
 800dab6:	d310      	bcc.n	800dada <__ssvfscanf_r+0x6b6>
 800dab8:	4b90      	ldr	r3, [pc, #576]	; (800dcfc <__ssvfscanf_r+0x8d8>)
 800daba:	429d      	cmp	r5, r3
 800dabc:	d900      	bls.n	800dac0 <__ssvfscanf_r+0x69c>
 800dabe:	e679      	b.n	800d7b4 <__ssvfscanf_r+0x390>
 800dac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dac2:	3508      	adds	r5, #8
 800dac4:	b2ad      	uxth	r5, r5
 800dac6:	6818      	ldr	r0, [r3, #0]
 800dac8:	00a9      	lsls	r1, r5, #2
 800daca:	f001 ffa5 	bl	800fa18 <realloc>
 800dace:	2800      	cmp	r0, #0
 800dad0:	d100      	bne.n	800dad4 <__ssvfscanf_r+0x6b0>
 800dad2:	e66f      	b.n	800d7b4 <__ssvfscanf_r+0x390>
 800dad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dad6:	6018      	str	r0, [r3, #0]
 800dad8:	809d      	strh	r5, [r3, #4]
 800dada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dadc:	1c72      	adds	r2, r6, #1
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	00b6      	lsls	r6, r6, #2
 800dae2:	50f4      	str	r4, [r6, r3]
 800dae4:	2320      	movs	r3, #32
 800dae6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dae8:	0026      	movs	r6, r4
 800daea:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800daec:	80ca      	strh	r2, [r1, #6]
 800daee:	613b      	str	r3, [r7, #16]
 800daf0:	2500      	movs	r5, #0
 800daf2:	f7fd f8a1 	bl	800ac38 <__locale_mb_cur_max>
 800daf6:	42a8      	cmp	r0, r5
 800daf8:	d100      	bne.n	800dafc <__ssvfscanf_r+0x6d8>
 800dafa:	e562      	b.n	800d5c2 <__ssvfscanf_r+0x19e>
 800dafc:	1c6a      	adds	r2, r5, #1
 800dafe:	61fa      	str	r2, [r7, #28]
 800db00:	228c      	movs	r2, #140	; 0x8c
 800db02:	2048      	movs	r0, #72	; 0x48
 800db04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db06:	0052      	lsls	r2, r2, #1
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	1812      	adds	r2, r2, r0
 800db0c:	7819      	ldrb	r1, [r3, #0]
 800db0e:	19d2      	adds	r2, r2, r7
 800db10:	5551      	strb	r1, [r2, r5]
 800db12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db14:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800db16:	6852      	ldr	r2, [r2, #4]
 800db18:	3301      	adds	r3, #1
 800db1a:	600b      	str	r3, [r1, #0]
 800db1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db1e:	3a01      	subs	r2, #1
 800db20:	604a      	str	r2, [r1, #4]
 800db22:	2b03      	cmp	r3, #3
 800db24:	d102      	bne.n	800db2c <__ssvfscanf_r+0x708>
 800db26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db28:	2b04      	cmp	r3, #4
 800db2a:	d006      	beq.n	800db3a <__ssvfscanf_r+0x716>
 800db2c:	2048      	movs	r0, #72	; 0x48
 800db2e:	2208      	movs	r2, #8
 800db30:	1813      	adds	r3, r2, r0
 800db32:	2100      	movs	r1, #0
 800db34:	19d8      	adds	r0, r3, r7
 800db36:	f7fd f83b 	bl	800abb0 <memset>
 800db3a:	2148      	movs	r1, #72	; 0x48
 800db3c:	2308      	movs	r3, #8
 800db3e:	228c      	movs	r2, #140	; 0x8c
 800db40:	185b      	adds	r3, r3, r1
 800db42:	0052      	lsls	r2, r2, #1
 800db44:	19db      	adds	r3, r3, r7
 800db46:	1852      	adds	r2, r2, r1
 800db48:	9300      	str	r3, [sp, #0]
 800db4a:	0021      	movs	r1, r4
 800db4c:	69fb      	ldr	r3, [r7, #28]
 800db4e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800db50:	19d2      	adds	r2, r2, r7
 800db52:	f002 fafb 	bl	801014c <_mbrtowc_r>
 800db56:	0003      	movs	r3, r0
 800db58:	62b8      	str	r0, [r7, #40]	; 0x28
 800db5a:	3301      	adds	r3, #1
 800db5c:	d100      	bne.n	800db60 <__ssvfscanf_r+0x73c>
 800db5e:	e530      	b.n	800d5c2 <__ssvfscanf_r+0x19e>
 800db60:	2800      	cmp	r0, #0
 800db62:	d151      	bne.n	800dc08 <__ssvfscanf_r+0x7e4>
 800db64:	6020      	str	r0, [r4, #0]
 800db66:	2301      	movs	r3, #1
 800db68:	6825      	ldr	r5, [r4, #0]
 800db6a:	425b      	negs	r3, r3
 800db6c:	1c6a      	adds	r2, r5, #1
 800db6e:	d01a      	beq.n	800dba6 <__ssvfscanf_r+0x782>
 800db70:	2048      	movs	r0, #72	; 0x48
 800db72:	3311      	adds	r3, #17
 800db74:	181b      	adds	r3, r3, r0
 800db76:	2208      	movs	r2, #8
 800db78:	2100      	movs	r1, #0
 800db7a:	19d8      	adds	r0, r3, r7
 800db7c:	f7fd f818 	bl	800abb0 <memset>
 800db80:	4b5f      	ldr	r3, [pc, #380]	; (800dd00 <__ssvfscanf_r+0x8dc>)
 800db82:	2148      	movs	r1, #72	; 0x48
 800db84:	33e0      	adds	r3, #224	; 0xe0
 800db86:	681a      	ldr	r2, [r3, #0]
 800db88:	2310      	movs	r3, #16
 800db8a:	4694      	mov	ip, r2
 800db8c:	185b      	adds	r3, r3, r1
 800db8e:	002a      	movs	r2, r5
 800db90:	19db      	adds	r3, r3, r7
 800db92:	4665      	mov	r5, ip
 800db94:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800db96:	1879      	adds	r1, r7, r1
 800db98:	47a8      	blx	r5
 800db9a:	2300      	movs	r3, #0
 800db9c:	2801      	cmp	r0, #1
 800db9e:	d102      	bne.n	800dba6 <__ssvfscanf_r+0x782>
 800dba0:	3348      	adds	r3, #72	; 0x48
 800dba2:	18fb      	adds	r3, r7, r3
 800dba4:	781b      	ldrb	r3, [r3, #0]
 800dba6:	2218      	movs	r2, #24
 800dba8:	2148      	movs	r1, #72	; 0x48
 800dbaa:	1852      	adds	r2, r2, r1
 800dbac:	19d2      	adds	r2, r2, r7
 800dbae:	5cd3      	ldrb	r3, [r2, r3]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d149      	bne.n	800dc48 <__ssvfscanf_r+0x824>
 800dbb4:	69fb      	ldr	r3, [r7, #28]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d137      	bne.n	800dc2a <__ssvfscanf_r+0x806>
 800dbba:	6a3b      	ldr	r3, [r7, #32]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d113      	bne.n	800dbe8 <__ssvfscanf_r+0x7c4>
 800dbc0:	6023      	str	r3, [r4, #0]
 800dbc2:	2e00      	cmp	r6, #0
 800dbc4:	d00d      	beq.n	800dbe2 <__ssvfscanf_r+0x7be>
 800dbc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc8:	693a      	ldr	r2, [r7, #16]
 800dbca:	1ae4      	subs	r4, r4, r3
 800dbcc:	10a3      	asrs	r3, r4, #2
 800dbce:	3301      	adds	r3, #1
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	d906      	bls.n	800dbe2 <__ssvfscanf_r+0x7be>
 800dbd4:	6830      	ldr	r0, [r6, #0]
 800dbd6:	1d21      	adds	r1, r4, #4
 800dbd8:	f001 ff1e 	bl	800fa18 <realloc>
 800dbdc:	2800      	cmp	r0, #0
 800dbde:	d000      	beq.n	800dbe2 <__ssvfscanf_r+0x7be>
 800dbe0:	6030      	str	r0, [r6, #0]
 800dbe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe4:	3301      	adds	r3, #1
 800dbe6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	e593      	b.n	800d714 <__ssvfscanf_r+0x2f0>
 800dbec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbee:	60fb      	str	r3, [r7, #12]
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	001e      	movs	r6, r3
 800dbf4:	613b      	str	r3, [r7, #16]
 800dbf6:	633b      	str	r3, [r7, #48]	; 0x30
 800dbf8:	334c      	adds	r3, #76	; 0x4c
 800dbfa:	18fc      	adds	r4, r7, r3
 800dbfc:	e778      	b.n	800daf0 <__ssvfscanf_r+0x6cc>
 800dbfe:	6a3b      	ldr	r3, [r7, #32]
 800dc00:	001e      	movs	r6, r3
 800dc02:	613b      	str	r3, [r7, #16]
 800dc04:	633b      	str	r3, [r7, #48]	; 0x30
 800dc06:	e773      	b.n	800daf0 <__ssvfscanf_r+0x6cc>
 800dc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc0a:	69fd      	ldr	r5, [r7, #28]
 800dc0c:	3302      	adds	r3, #2
 800dc0e:	d1aa      	bne.n	800db66 <__ssvfscanf_r+0x742>
 800dc10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc12:	685b      	ldr	r3, [r3, #4]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	dc47      	bgt.n	800dca8 <__ssvfscanf_r+0x884>
 800dc18:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dc1a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dc1c:	f002 fb96 	bl	801034c <__ssrefill_r>
 800dc20:	2800      	cmp	r0, #0
 800dc22:	d041      	beq.n	800dca8 <__ssvfscanf_r+0x884>
 800dc24:	2d00      	cmp	r5, #0
 800dc26:	d0c8      	beq.n	800dbba <__ssvfscanf_r+0x796>
 800dc28:	e4cb      	b.n	800d5c2 <__ssvfscanf_r+0x19e>
 800dc2a:	69fb      	ldr	r3, [r7, #28]
 800dc2c:	2248      	movs	r2, #72	; 0x48
 800dc2e:	3b01      	subs	r3, #1
 800dc30:	61fb      	str	r3, [r7, #28]
 800dc32:	238c      	movs	r3, #140	; 0x8c
 800dc34:	005b      	lsls	r3, r3, #1
 800dc36:	189b      	adds	r3, r3, r2
 800dc38:	69fa      	ldr	r2, [r7, #28]
 800dc3a:	19db      	adds	r3, r3, r7
 800dc3c:	5cd1      	ldrb	r1, [r2, r3]
 800dc3e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dc40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dc42:	f002 fb47 	bl	80102d4 <_sungetc_r>
 800dc46:	e7b5      	b.n	800dbb4 <__ssvfscanf_r+0x790>
 800dc48:	69fa      	ldr	r2, [r7, #28]
 800dc4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc4c:	4694      	mov	ip, r2
 800dc4e:	4463      	add	r3, ip
 800dc50:	63bb      	str	r3, [r7, #56]	; 0x38
 800dc52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc54:	2b03      	cmp	r3, #3
 800dc56:	d102      	bne.n	800dc5e <__ssvfscanf_r+0x83a>
 800dc58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc5a:	2b04      	cmp	r3, #4
 800dc5c:	d002      	beq.n	800dc64 <__ssvfscanf_r+0x840>
 800dc5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc60:	3b01      	subs	r3, #1
 800dc62:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc64:	6a3b      	ldr	r3, [r7, #32]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d11a      	bne.n	800dca0 <__ssvfscanf_r+0x87c>
 800dc6a:	3404      	adds	r4, #4
 800dc6c:	2e00      	cmp	r6, #0
 800dc6e:	d019      	beq.n	800dca4 <__ssvfscanf_r+0x880>
 800dc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc72:	693a      	ldr	r2, [r7, #16]
 800dc74:	1ae3      	subs	r3, r4, r3
 800dc76:	61fb      	str	r3, [r7, #28]
 800dc78:	6a3d      	ldr	r5, [r7, #32]
 800dc7a:	109b      	asrs	r3, r3, #2
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	d3c7      	bcc.n	800dc10 <__ssvfscanf_r+0x7ec>
 800dc80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc82:	00d1      	lsls	r1, r2, #3
 800dc84:	f001 fec8 	bl	800fa18 <realloc>
 800dc88:	6338      	str	r0, [r7, #48]	; 0x30
 800dc8a:	2800      	cmp	r0, #0
 800dc8c:	d100      	bne.n	800dc90 <__ssvfscanf_r+0x86c>
 800dc8e:	e591      	b.n	800d7b4 <__ssvfscanf_r+0x390>
 800dc90:	4684      	mov	ip, r0
 800dc92:	693b      	ldr	r3, [r7, #16]
 800dc94:	69fc      	ldr	r4, [r7, #28]
 800dc96:	005b      	lsls	r3, r3, #1
 800dc98:	4464      	add	r4, ip
 800dc9a:	6030      	str	r0, [r6, #0]
 800dc9c:	613b      	str	r3, [r7, #16]
 800dc9e:	e7b7      	b.n	800dc10 <__ssvfscanf_r+0x7ec>
 800dca0:	2500      	movs	r5, #0
 800dca2:	e7b5      	b.n	800dc10 <__ssvfscanf_r+0x7ec>
 800dca4:	0035      	movs	r5, r6
 800dca6:	e7b3      	b.n	800dc10 <__ssvfscanf_r+0x7ec>
 800dca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d000      	beq.n	800dcb0 <__ssvfscanf_r+0x88c>
 800dcae:	e720      	b.n	800daf2 <__ssvfscanf_r+0x6ce>
 800dcb0:	e783      	b.n	800dbba <__ssvfscanf_r+0x796>
 800dcb2:	6a3b      	ldr	r3, [r7, #32]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d025      	beq.n	800dd04 <__ssvfscanf_r+0x8e0>
 800dcb8:	2118      	movs	r1, #24
 800dcba:	2048      	movs	r0, #72	; 0x48
 800dcbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcbe:	1809      	adds	r1, r1, r0
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	19c9      	adds	r1, r1, r7
 800dcc4:	781a      	ldrb	r2, [r3, #0]
 800dcc6:	5c8a      	ldrb	r2, [r1, r2]
 800dcc8:	2a00      	cmp	r2, #0
 800dcca:	d103      	bne.n	800dcd4 <__ssvfscanf_r+0x8b0>
 800dccc:	2c00      	cmp	r4, #0
 800dcce:	d000      	beq.n	800dcd2 <__ssvfscanf_r+0x8ae>
 800dcd0:	e66c      	b.n	800d9ac <__ssvfscanf_r+0x588>
 800dcd2:	e4a4      	b.n	800d61e <__ssvfscanf_r+0x1fa>
 800dcd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dcd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dcd8:	6852      	ldr	r2, [r2, #4]
 800dcda:	3301      	adds	r3, #1
 800dcdc:	600b      	str	r3, [r1, #0]
 800dcde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dce0:	3a01      	subs	r2, #1
 800dce2:	3401      	adds	r4, #1
 800dce4:	604a      	str	r2, [r1, #4]
 800dce6:	429c      	cmp	r4, r3
 800dce8:	d100      	bne.n	800dcec <__ssvfscanf_r+0x8c8>
 800dcea:	e65f      	b.n	800d9ac <__ssvfscanf_r+0x588>
 800dcec:	2a00      	cmp	r2, #0
 800dcee:	dce3      	bgt.n	800dcb8 <__ssvfscanf_r+0x894>
 800dcf0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dcf2:	f002 fb2b 	bl	801034c <__ssrefill_r>
 800dcf6:	2800      	cmp	r0, #0
 800dcf8:	d0de      	beq.n	800dcb8 <__ssvfscanf_r+0x894>
 800dcfa:	e657      	b.n	800d9ac <__ssvfscanf_r+0x588>
 800dcfc:	0000fff6 	.word	0x0000fff6
 800dd00:	20000448 	.word	0x20000448
 800dd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd06:	0032      	movs	r2, r6
 800dd08:	cb20      	ldmia	r3!, {r5}
 800dd0a:	61fb      	str	r3, [r7, #28]
 800dd0c:	2380      	movs	r3, #128	; 0x80
 800dd0e:	401a      	ands	r2, r3
 800dd10:	421e      	tst	r6, r3
 800dd12:	d100      	bne.n	800dd16 <__ssvfscanf_r+0x8f2>
 800dd14:	e086      	b.n	800de24 <__ssvfscanf_r+0xa00>
 800dd16:	2d00      	cmp	r5, #0
 800dd18:	d100      	bne.n	800dd1c <__ssvfscanf_r+0x8f8>
 800dd1a:	e480      	b.n	800d61e <__ssvfscanf_r+0x1fa>
 800dd1c:	2020      	movs	r0, #32
 800dd1e:	f7fb fcb3 	bl	8009688 <malloc>
 800dd22:	6338      	str	r0, [r7, #48]	; 0x30
 800dd24:	2800      	cmp	r0, #0
 800dd26:	d100      	bne.n	800dd2a <__ssvfscanf_r+0x906>
 800dd28:	e452      	b.n	800d5d0 <__ssvfscanf_r+0x1ac>
 800dd2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd2c:	6028      	str	r0, [r5, #0]
 800dd2e:	88de      	ldrh	r6, [r3, #6]
 800dd30:	889c      	ldrh	r4, [r3, #4]
 800dd32:	6818      	ldr	r0, [r3, #0]
 800dd34:	42a6      	cmp	r6, r4
 800dd36:	d30e      	bcc.n	800dd56 <__ssvfscanf_r+0x932>
 800dd38:	4bc3      	ldr	r3, [pc, #780]	; (800e048 <__ssvfscanf_r+0xc24>)
 800dd3a:	429c      	cmp	r4, r3
 800dd3c:	d900      	bls.n	800dd40 <__ssvfscanf_r+0x91c>
 800dd3e:	e542      	b.n	800d7c6 <__ssvfscanf_r+0x3a2>
 800dd40:	3408      	adds	r4, #8
 800dd42:	b2a4      	uxth	r4, r4
 800dd44:	00a1      	lsls	r1, r4, #2
 800dd46:	f001 fe67 	bl	800fa18 <realloc>
 800dd4a:	2800      	cmp	r0, #0
 800dd4c:	d100      	bne.n	800dd50 <__ssvfscanf_r+0x92c>
 800dd4e:	e53a      	b.n	800d7c6 <__ssvfscanf_r+0x3a2>
 800dd50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd52:	6018      	str	r0, [r3, #0]
 800dd54:	809c      	strh	r4, [r3, #4]
 800dd56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd58:	1c72      	adds	r2, r6, #1
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	00b6      	lsls	r6, r6, #2
 800dd5e:	50f5      	str	r5, [r6, r3]
 800dd60:	2320      	movs	r3, #32
 800dd62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dd64:	002e      	movs	r6, r5
 800dd66:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800dd68:	80ca      	strh	r2, [r1, #6]
 800dd6a:	623b      	str	r3, [r7, #32]
 800dd6c:	002c      	movs	r4, r5
 800dd6e:	2118      	movs	r1, #24
 800dd70:	2048      	movs	r0, #72	; 0x48
 800dd72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd74:	1809      	adds	r1, r1, r0
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	19c9      	adds	r1, r1, r7
 800dd7a:	781a      	ldrb	r2, [r3, #0]
 800dd7c:	5c8a      	ldrb	r2, [r1, r2]
 800dd7e:	2a00      	cmp	r2, #0
 800dd80:	d101      	bne.n	800dd86 <__ssvfscanf_r+0x962>
 800dd82:	633d      	str	r5, [r7, #48]	; 0x30
 800dd84:	e031      	b.n	800ddea <__ssvfscanf_r+0x9c6>
 800dd86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd88:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dd8a:	6852      	ldr	r2, [r2, #4]
 800dd8c:	3a01      	subs	r2, #1
 800dd8e:	604a      	str	r2, [r1, #4]
 800dd90:	1c5a      	adds	r2, r3, #1
 800dd92:	600a      	str	r2, [r1, #0]
 800dd94:	781b      	ldrb	r3, [r3, #0]
 800dd96:	1c6a      	adds	r2, r5, #1
 800dd98:	633a      	str	r2, [r7, #48]	; 0x30
 800dd9a:	702b      	strb	r3, [r5, #0]
 800dd9c:	2e00      	cmp	r6, #0
 800dd9e:	d010      	beq.n	800ddc2 <__ssvfscanf_r+0x99e>
 800dda0:	6a3b      	ldr	r3, [r7, #32]
 800dda2:	1b15      	subs	r5, r2, r4
 800dda4:	429d      	cmp	r5, r3
 800dda6:	d30c      	bcc.n	800ddc2 <__ssvfscanf_r+0x99e>
 800dda8:	005b      	lsls	r3, r3, #1
 800ddaa:	0020      	movs	r0, r4
 800ddac:	0019      	movs	r1, r3
 800ddae:	623b      	str	r3, [r7, #32]
 800ddb0:	f001 fe32 	bl	800fa18 <realloc>
 800ddb4:	1e04      	subs	r4, r0, #0
 800ddb6:	d101      	bne.n	800ddbc <__ssvfscanf_r+0x998>
 800ddb8:	f7ff fc0a 	bl	800d5d0 <__ssvfscanf_r+0x1ac>
 800ddbc:	1943      	adds	r3, r0, r5
 800ddbe:	633b      	str	r3, [r7, #48]	; 0x30
 800ddc0:	6030      	str	r0, [r6, #0]
 800ddc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddc4:	3b01      	subs	r3, #1
 800ddc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d00e      	beq.n	800ddea <__ssvfscanf_r+0x9c6>
 800ddcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddce:	685b      	ldr	r3, [r3, #4]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	dc2a      	bgt.n	800de2a <__ssvfscanf_r+0xa06>
 800ddd4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ddd6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ddd8:	f002 fab8 	bl	801034c <__ssrefill_r>
 800dddc:	2800      	cmp	r0, #0
 800ddde:	d024      	beq.n	800de2a <__ssvfscanf_r+0xa06>
 800dde0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dde2:	42a3      	cmp	r3, r4
 800dde4:	d101      	bne.n	800ddea <__ssvfscanf_r+0x9c6>
 800dde6:	f7ff fbec 	bl	800d5c2 <__ssvfscanf_r+0x19e>
 800ddea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddec:	1b1d      	subs	r5, r3, r4
 800ddee:	42a3      	cmp	r3, r4
 800ddf0:	d101      	bne.n	800ddf6 <__ssvfscanf_r+0x9d2>
 800ddf2:	f7ff fc14 	bl	800d61e <__ssvfscanf_r+0x1fa>
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddfa:	7013      	strb	r3, [r2, #0]
 800ddfc:	429e      	cmp	r6, r3
 800ddfe:	d009      	beq.n	800de14 <__ssvfscanf_r+0x9f0>
 800de00:	6a3b      	ldr	r3, [r7, #32]
 800de02:	1c69      	adds	r1, r5, #1
 800de04:	428b      	cmp	r3, r1
 800de06:	d905      	bls.n	800de14 <__ssvfscanf_r+0x9f0>
 800de08:	6830      	ldr	r0, [r6, #0]
 800de0a:	f001 fe05 	bl	800fa18 <realloc>
 800de0e:	2800      	cmp	r0, #0
 800de10:	d000      	beq.n	800de14 <__ssvfscanf_r+0x9f0>
 800de12:	6030      	str	r0, [r6, #0]
 800de14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de16:	3301      	adds	r3, #1
 800de18:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de1c:	195b      	adds	r3, r3, r5
 800de1e:	63bb      	str	r3, [r7, #56]	; 0x38
 800de20:	69fb      	ldr	r3, [r7, #28]
 800de22:	e477      	b.n	800d714 <__ssvfscanf_r+0x2f0>
 800de24:	0016      	movs	r6, r2
 800de26:	623a      	str	r2, [r7, #32]
 800de28:	e7a0      	b.n	800dd6c <__ssvfscanf_r+0x948>
 800de2a:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800de2c:	e79f      	b.n	800dd6e <__ssvfscanf_r+0x94a>
 800de2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de30:	2b00      	cmp	r3, #0
 800de32:	d101      	bne.n	800de38 <__ssvfscanf_r+0xa14>
 800de34:	3b01      	subs	r3, #1
 800de36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de38:	2210      	movs	r2, #16
 800de3a:	2301      	movs	r3, #1
 800de3c:	0034      	movs	r4, r6
 800de3e:	4032      	ands	r2, r6
 800de40:	401c      	ands	r4, r3
 800de42:	61fa      	str	r2, [r7, #28]
 800de44:	421e      	tst	r6, r3
 800de46:	d100      	bne.n	800de4a <__ssvfscanf_r+0xa26>
 800de48:	e102      	b.n	800e050 <__ssvfscanf_r+0xc2c>
 800de4a:	2a00      	cmp	r2, #0
 800de4c:	d000      	beq.n	800de50 <__ssvfscanf_r+0xa2c>
 800de4e:	e09f      	b.n	800df90 <__ssvfscanf_r+0xb6c>
 800de50:	2080      	movs	r0, #128	; 0x80
 800de52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de54:	cb10      	ldmia	r3!, {r4}
 800de56:	60fb      	str	r3, [r7, #12]
 800de58:	4206      	tst	r6, r0
 800de5a:	d100      	bne.n	800de5e <__ssvfscanf_r+0xa3a>
 800de5c:	e0a1      	b.n	800dfa2 <__ssvfscanf_r+0xb7e>
 800de5e:	2c00      	cmp	r4, #0
 800de60:	d100      	bne.n	800de64 <__ssvfscanf_r+0xa40>
 800de62:	e4aa      	b.n	800d7ba <__ssvfscanf_r+0x396>
 800de64:	f7fb fc10 	bl	8009688 <malloc>
 800de68:	6338      	str	r0, [r7, #48]	; 0x30
 800de6a:	2800      	cmp	r0, #0
 800de6c:	d100      	bne.n	800de70 <__ssvfscanf_r+0xa4c>
 800de6e:	e4a1      	b.n	800d7b4 <__ssvfscanf_r+0x390>
 800de70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de72:	6023      	str	r3, [r4, #0]
 800de74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de76:	88de      	ldrh	r6, [r3, #6]
 800de78:	889d      	ldrh	r5, [r3, #4]
 800de7a:	42ae      	cmp	r6, r5
 800de7c:	d310      	bcc.n	800dea0 <__ssvfscanf_r+0xa7c>
 800de7e:	4b72      	ldr	r3, [pc, #456]	; (800e048 <__ssvfscanf_r+0xc24>)
 800de80:	429d      	cmp	r5, r3
 800de82:	d900      	bls.n	800de86 <__ssvfscanf_r+0xa62>
 800de84:	e496      	b.n	800d7b4 <__ssvfscanf_r+0x390>
 800de86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de88:	3508      	adds	r5, #8
 800de8a:	b2ad      	uxth	r5, r5
 800de8c:	6818      	ldr	r0, [r3, #0]
 800de8e:	00a9      	lsls	r1, r5, #2
 800de90:	f001 fdc2 	bl	800fa18 <realloc>
 800de94:	2800      	cmp	r0, #0
 800de96:	d100      	bne.n	800de9a <__ssvfscanf_r+0xa76>
 800de98:	e48c      	b.n	800d7b4 <__ssvfscanf_r+0x390>
 800de9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de9c:	6018      	str	r0, [r3, #0]
 800de9e:	809d      	strh	r5, [r3, #4]
 800dea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dea2:	1c72      	adds	r2, r6, #1
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	00b6      	lsls	r6, r6, #2
 800dea8:	50f4      	str	r4, [r6, r3]
 800deaa:	2320      	movs	r3, #32
 800deac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800deae:	0025      	movs	r5, r4
 800deb0:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800deb2:	80ca      	strh	r2, [r1, #6]
 800deb4:	613b      	str	r3, [r7, #16]
 800deb6:	2300      	movs	r3, #0
 800deb8:	623b      	str	r3, [r7, #32]
 800deba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800debc:	4a63      	ldr	r2, [pc, #396]	; (800e04c <__ssvfscanf_r+0xc28>)
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	781b      	ldrb	r3, [r3, #0]
 800dec2:	5cd3      	ldrb	r3, [r2, r3]
 800dec4:	2208      	movs	r2, #8
 800dec6:	4213      	tst	r3, r2
 800dec8:	d149      	bne.n	800df5e <__ssvfscanf_r+0xb3a>
 800deca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800decc:	2b00      	cmp	r3, #0
 800dece:	d046      	beq.n	800df5e <__ssvfscanf_r+0xb3a>
 800ded0:	f7fc feb2 	bl	800ac38 <__locale_mb_cur_max>
 800ded4:	6a3b      	ldr	r3, [r7, #32]
 800ded6:	4298      	cmp	r0, r3
 800ded8:	d101      	bne.n	800dede <__ssvfscanf_r+0xaba>
 800deda:	f7ff fb72 	bl	800d5c2 <__ssvfscanf_r+0x19e>
 800dede:	6a3a      	ldr	r2, [r7, #32]
 800dee0:	2048      	movs	r0, #72	; 0x48
 800dee2:	1c56      	adds	r6, r2, #1
 800dee4:	228c      	movs	r2, #140	; 0x8c
 800dee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dee8:	0052      	lsls	r2, r2, #1
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	1812      	adds	r2, r2, r0
 800deee:	7819      	ldrb	r1, [r3, #0]
 800def0:	6a38      	ldr	r0, [r7, #32]
 800def2:	19d2      	adds	r2, r2, r7
 800def4:	5411      	strb	r1, [r2, r0]
 800def6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800def8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800defa:	6852      	ldr	r2, [r2, #4]
 800defc:	3301      	adds	r3, #1
 800defe:	600b      	str	r3, [r1, #0]
 800df00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df02:	3a01      	subs	r2, #1
 800df04:	604a      	str	r2, [r1, #4]
 800df06:	2b03      	cmp	r3, #3
 800df08:	d102      	bne.n	800df10 <__ssvfscanf_r+0xaec>
 800df0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df0c:	2b04      	cmp	r3, #4
 800df0e:	d007      	beq.n	800df20 <__ssvfscanf_r+0xafc>
 800df10:	2048      	movs	r0, #72	; 0x48
 800df12:	2310      	movs	r3, #16
 800df14:	181b      	adds	r3, r3, r0
 800df16:	2208      	movs	r2, #8
 800df18:	2100      	movs	r1, #0
 800df1a:	19d8      	adds	r0, r3, r7
 800df1c:	f7fc fe48 	bl	800abb0 <memset>
 800df20:	2148      	movs	r1, #72	; 0x48
 800df22:	2310      	movs	r3, #16
 800df24:	228c      	movs	r2, #140	; 0x8c
 800df26:	185b      	adds	r3, r3, r1
 800df28:	0052      	lsls	r2, r2, #1
 800df2a:	19db      	adds	r3, r3, r7
 800df2c:	1852      	adds	r2, r2, r1
 800df2e:	9300      	str	r3, [sp, #0]
 800df30:	0021      	movs	r1, r4
 800df32:	0033      	movs	r3, r6
 800df34:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800df36:	19d2      	adds	r2, r2, r7
 800df38:	f002 f908 	bl	801014c <_mbrtowc_r>
 800df3c:	0003      	movs	r3, r0
 800df3e:	62b8      	str	r0, [r7, #40]	; 0x28
 800df40:	3301      	adds	r3, #1
 800df42:	d101      	bne.n	800df48 <__ssvfscanf_r+0xb24>
 800df44:	f7ff fb3d 	bl	800d5c2 <__ssvfscanf_r+0x19e>
 800df48:	2800      	cmp	r0, #0
 800df4a:	d12f      	bne.n	800dfac <__ssvfscanf_r+0xb88>
 800df4c:	6020      	str	r0, [r4, #0]
 800df4e:	6820      	ldr	r0, [r4, #0]
 800df50:	f002 f91a 	bl	8010188 <iswspace>
 800df54:	6238      	str	r0, [r7, #32]
 800df56:	2800      	cmp	r0, #0
 800df58:	d04a      	beq.n	800dff0 <__ssvfscanf_r+0xbcc>
 800df5a:	2e00      	cmp	r6, #0
 800df5c:	d13c      	bne.n	800dfd8 <__ssvfscanf_r+0xbb4>
 800df5e:	69fb      	ldr	r3, [r7, #28]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d000      	beq.n	800df66 <__ssvfscanf_r+0xb42>
 800df64:	e640      	b.n	800dbe8 <__ssvfscanf_r+0x7c4>
 800df66:	6023      	str	r3, [r4, #0]
 800df68:	2d00      	cmp	r5, #0
 800df6a:	d100      	bne.n	800df6e <__ssvfscanf_r+0xb4a>
 800df6c:	e639      	b.n	800dbe2 <__ssvfscanf_r+0x7be>
 800df6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df70:	693a      	ldr	r2, [r7, #16]
 800df72:	1ae4      	subs	r4, r4, r3
 800df74:	10a3      	asrs	r3, r4, #2
 800df76:	3301      	adds	r3, #1
 800df78:	429a      	cmp	r2, r3
 800df7a:	d800      	bhi.n	800df7e <__ssvfscanf_r+0xb5a>
 800df7c:	e631      	b.n	800dbe2 <__ssvfscanf_r+0x7be>
 800df7e:	6828      	ldr	r0, [r5, #0]
 800df80:	1d21      	adds	r1, r4, #4
 800df82:	f001 fd49 	bl	800fa18 <realloc>
 800df86:	2800      	cmp	r0, #0
 800df88:	d100      	bne.n	800df8c <__ssvfscanf_r+0xb68>
 800df8a:	e62a      	b.n	800dbe2 <__ssvfscanf_r+0x7be>
 800df8c:	6028      	str	r0, [r5, #0]
 800df8e:	e628      	b.n	800dbe2 <__ssvfscanf_r+0x7be>
 800df90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df92:	60fb      	str	r3, [r7, #12]
 800df94:	2300      	movs	r3, #0
 800df96:	001d      	movs	r5, r3
 800df98:	613b      	str	r3, [r7, #16]
 800df9a:	633b      	str	r3, [r7, #48]	; 0x30
 800df9c:	334c      	adds	r3, #76	; 0x4c
 800df9e:	18fc      	adds	r4, r7, r3
 800dfa0:	e789      	b.n	800deb6 <__ssvfscanf_r+0xa92>
 800dfa2:	69fb      	ldr	r3, [r7, #28]
 800dfa4:	001d      	movs	r5, r3
 800dfa6:	613b      	str	r3, [r7, #16]
 800dfa8:	633b      	str	r3, [r7, #48]	; 0x30
 800dfaa:	e784      	b.n	800deb6 <__ssvfscanf_r+0xa92>
 800dfac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfae:	623e      	str	r6, [r7, #32]
 800dfb0:	3302      	adds	r3, #2
 800dfb2:	d1cc      	bne.n	800df4e <__ssvfscanf_r+0xb2a>
 800dfb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfb6:	685b      	ldr	r3, [r3, #4]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	dd00      	ble.n	800dfbe <__ssvfscanf_r+0xb9a>
 800dfbc:	e77d      	b.n	800deba <__ssvfscanf_r+0xa96>
 800dfbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dfc0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dfc2:	f002 f9c3 	bl	801034c <__ssrefill_r>
 800dfc6:	2800      	cmp	r0, #0
 800dfc8:	d100      	bne.n	800dfcc <__ssvfscanf_r+0xba8>
 800dfca:	e776      	b.n	800deba <__ssvfscanf_r+0xa96>
 800dfcc:	6a3b      	ldr	r3, [r7, #32]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d001      	beq.n	800dfd6 <__ssvfscanf_r+0xbb2>
 800dfd2:	f7ff faf6 	bl	800d5c2 <__ssvfscanf_r+0x19e>
 800dfd6:	e7c2      	b.n	800df5e <__ssvfscanf_r+0xb3a>
 800dfd8:	238c      	movs	r3, #140	; 0x8c
 800dfda:	2248      	movs	r2, #72	; 0x48
 800dfdc:	005b      	lsls	r3, r3, #1
 800dfde:	189b      	adds	r3, r3, r2
 800dfe0:	3e01      	subs	r6, #1
 800dfe2:	19db      	adds	r3, r3, r7
 800dfe4:	5cf1      	ldrb	r1, [r6, r3]
 800dfe6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dfe8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dfea:	f002 f973 	bl	80102d4 <_sungetc_r>
 800dfee:	e7b4      	b.n	800df5a <__ssvfscanf_r+0xb36>
 800dff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dff2:	199b      	adds	r3, r3, r6
 800dff4:	63bb      	str	r3, [r7, #56]	; 0x38
 800dff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dff8:	2b03      	cmp	r3, #3
 800dffa:	d102      	bne.n	800e002 <__ssvfscanf_r+0xbde>
 800dffc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dffe:	2b04      	cmp	r3, #4
 800e000:	d002      	beq.n	800e008 <__ssvfscanf_r+0xbe4>
 800e002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e004:	3b01      	subs	r3, #1
 800e006:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e008:	69fb      	ldr	r3, [r7, #28]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d1d2      	bne.n	800dfb4 <__ssvfscanf_r+0xb90>
 800e00e:	3404      	adds	r4, #4
 800e010:	2d00      	cmp	r5, #0
 800e012:	d016      	beq.n	800e042 <__ssvfscanf_r+0xc1e>
 800e014:	69fa      	ldr	r2, [r7, #28]
 800e016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e018:	623a      	str	r2, [r7, #32]
 800e01a:	693a      	ldr	r2, [r7, #16]
 800e01c:	1ae6      	subs	r6, r4, r3
 800e01e:	10b3      	asrs	r3, r6, #2
 800e020:	4293      	cmp	r3, r2
 800e022:	d3c7      	bcc.n	800dfb4 <__ssvfscanf_r+0xb90>
 800e024:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e026:	00d1      	lsls	r1, r2, #3
 800e028:	f001 fcf6 	bl	800fa18 <realloc>
 800e02c:	6338      	str	r0, [r7, #48]	; 0x30
 800e02e:	2800      	cmp	r0, #0
 800e030:	d101      	bne.n	800e036 <__ssvfscanf_r+0xc12>
 800e032:	f7ff fbbf 	bl	800d7b4 <__ssvfscanf_r+0x390>
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	1984      	adds	r4, r0, r6
 800e03a:	005b      	lsls	r3, r3, #1
 800e03c:	6028      	str	r0, [r5, #0]
 800e03e:	613b      	str	r3, [r7, #16]
 800e040:	e7b8      	b.n	800dfb4 <__ssvfscanf_r+0xb90>
 800e042:	623d      	str	r5, [r7, #32]
 800e044:	e7b6      	b.n	800dfb4 <__ssvfscanf_r+0xb90>
 800e046:	46c0      	nop			; (mov r8, r8)
 800e048:	0000fff6 	.word	0x0000fff6
 800e04c:	080130e9 	.word	0x080130e9
 800e050:	69fb      	ldr	r3, [r7, #28]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d01c      	beq.n	800e090 <__ssvfscanf_r+0xc6c>
 800e056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e058:	49bf      	ldr	r1, [pc, #764]	; (800e358 <__ssvfscanf_r+0xf34>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	781a      	ldrb	r2, [r3, #0]
 800e05e:	5c8a      	ldrb	r2, [r1, r2]
 800e060:	2108      	movs	r1, #8
 800e062:	420a      	tst	r2, r1
 800e064:	d000      	beq.n	800e068 <__ssvfscanf_r+0xc44>
 800e066:	e4a1      	b.n	800d9ac <__ssvfscanf_r+0x588>
 800e068:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e06a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e06c:	6852      	ldr	r2, [r2, #4]
 800e06e:	3301      	adds	r3, #1
 800e070:	600b      	str	r3, [r1, #0]
 800e072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e074:	3a01      	subs	r2, #1
 800e076:	3401      	adds	r4, #1
 800e078:	604a      	str	r2, [r1, #4]
 800e07a:	429c      	cmp	r4, r3
 800e07c:	d100      	bne.n	800e080 <__ssvfscanf_r+0xc5c>
 800e07e:	e495      	b.n	800d9ac <__ssvfscanf_r+0x588>
 800e080:	2a00      	cmp	r2, #0
 800e082:	dce8      	bgt.n	800e056 <__ssvfscanf_r+0xc32>
 800e084:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e086:	f002 f961 	bl	801034c <__ssrefill_r>
 800e08a:	2800      	cmp	r0, #0
 800e08c:	d0e3      	beq.n	800e056 <__ssvfscanf_r+0xc32>
 800e08e:	e48d      	b.n	800d9ac <__ssvfscanf_r+0x588>
 800e090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e092:	0032      	movs	r2, r6
 800e094:	cb10      	ldmia	r3!, {r4}
 800e096:	61fb      	str	r3, [r7, #28]
 800e098:	2380      	movs	r3, #128	; 0x80
 800e09a:	401a      	ands	r2, r3
 800e09c:	421e      	tst	r6, r3
 800e09e:	d039      	beq.n	800e114 <__ssvfscanf_r+0xcf0>
 800e0a0:	2c00      	cmp	r4, #0
 800e0a2:	d101      	bne.n	800e0a8 <__ssvfscanf_r+0xc84>
 800e0a4:	f7ff fabb 	bl	800d61e <__ssvfscanf_r+0x1fa>
 800e0a8:	2020      	movs	r0, #32
 800e0aa:	f7fb faed 	bl	8009688 <malloc>
 800e0ae:	6338      	str	r0, [r7, #48]	; 0x30
 800e0b0:	2800      	cmp	r0, #0
 800e0b2:	d101      	bne.n	800e0b8 <__ssvfscanf_r+0xc94>
 800e0b4:	f7ff fa8c 	bl	800d5d0 <__ssvfscanf_r+0x1ac>
 800e0b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0ba:	6020      	str	r0, [r4, #0]
 800e0bc:	88de      	ldrh	r6, [r3, #6]
 800e0be:	889d      	ldrh	r5, [r3, #4]
 800e0c0:	6818      	ldr	r0, [r3, #0]
 800e0c2:	42ae      	cmp	r6, r5
 800e0c4:	d310      	bcc.n	800e0e8 <__ssvfscanf_r+0xcc4>
 800e0c6:	4ba5      	ldr	r3, [pc, #660]	; (800e35c <__ssvfscanf_r+0xf38>)
 800e0c8:	429d      	cmp	r5, r3
 800e0ca:	d901      	bls.n	800e0d0 <__ssvfscanf_r+0xcac>
 800e0cc:	f7ff fb7b 	bl	800d7c6 <__ssvfscanf_r+0x3a2>
 800e0d0:	3508      	adds	r5, #8
 800e0d2:	b2ad      	uxth	r5, r5
 800e0d4:	00a9      	lsls	r1, r5, #2
 800e0d6:	f001 fc9f 	bl	800fa18 <realloc>
 800e0da:	2800      	cmp	r0, #0
 800e0dc:	d101      	bne.n	800e0e2 <__ssvfscanf_r+0xcbe>
 800e0de:	f7ff fb72 	bl	800d7c6 <__ssvfscanf_r+0x3a2>
 800e0e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0e4:	6018      	str	r0, [r3, #0]
 800e0e6:	809d      	strh	r5, [r3, #4]
 800e0e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0ea:	1c72      	adds	r2, r6, #1
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	00b6      	lsls	r6, r6, #2
 800e0f0:	50f4      	str	r4, [r6, r3]
 800e0f2:	2320      	movs	r3, #32
 800e0f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e0f6:	0026      	movs	r6, r4
 800e0f8:	80ca      	strh	r2, [r1, #6]
 800e0fa:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800e0fc:	633b      	str	r3, [r7, #48]	; 0x30
 800e0fe:	0025      	movs	r5, r4
 800e100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e102:	4995      	ldr	r1, [pc, #596]	; (800e358 <__ssvfscanf_r+0xf34>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	781a      	ldrb	r2, [r3, #0]
 800e108:	5c8a      	ldrb	r2, [r1, r2]
 800e10a:	2108      	movs	r1, #8
 800e10c:	420a      	tst	r2, r1
 800e10e:	d004      	beq.n	800e11a <__ssvfscanf_r+0xcf6>
 800e110:	623c      	str	r4, [r7, #32]
 800e112:	e031      	b.n	800e178 <__ssvfscanf_r+0xd54>
 800e114:	0016      	movs	r6, r2
 800e116:	633a      	str	r2, [r7, #48]	; 0x30
 800e118:	e7f1      	b.n	800e0fe <__ssvfscanf_r+0xcda>
 800e11a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e11c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e11e:	6852      	ldr	r2, [r2, #4]
 800e120:	3a01      	subs	r2, #1
 800e122:	604a      	str	r2, [r1, #4]
 800e124:	1c5a      	adds	r2, r3, #1
 800e126:	600a      	str	r2, [r1, #0]
 800e128:	781b      	ldrb	r3, [r3, #0]
 800e12a:	1c62      	adds	r2, r4, #1
 800e12c:	623a      	str	r2, [r7, #32]
 800e12e:	7023      	strb	r3, [r4, #0]
 800e130:	2e00      	cmp	r6, #0
 800e132:	d010      	beq.n	800e156 <__ssvfscanf_r+0xd32>
 800e134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e136:	1b54      	subs	r4, r2, r5
 800e138:	429c      	cmp	r4, r3
 800e13a:	d30c      	bcc.n	800e156 <__ssvfscanf_r+0xd32>
 800e13c:	005b      	lsls	r3, r3, #1
 800e13e:	0028      	movs	r0, r5
 800e140:	0019      	movs	r1, r3
 800e142:	633b      	str	r3, [r7, #48]	; 0x30
 800e144:	f001 fc68 	bl	800fa18 <realloc>
 800e148:	1e05      	subs	r5, r0, #0
 800e14a:	d101      	bne.n	800e150 <__ssvfscanf_r+0xd2c>
 800e14c:	f7ff fa40 	bl	800d5d0 <__ssvfscanf_r+0x1ac>
 800e150:	1903      	adds	r3, r0, r4
 800e152:	623b      	str	r3, [r7, #32]
 800e154:	6030      	str	r0, [r6, #0]
 800e156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e158:	3b01      	subs	r3, #1
 800e15a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d00b      	beq.n	800e178 <__ssvfscanf_r+0xd54>
 800e160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e162:	685b      	ldr	r3, [r3, #4]
 800e164:	2b00      	cmp	r3, #0
 800e166:	dd01      	ble.n	800e16c <__ssvfscanf_r+0xd48>
 800e168:	6a3c      	ldr	r4, [r7, #32]
 800e16a:	e7c9      	b.n	800e100 <__ssvfscanf_r+0xcdc>
 800e16c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e16e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e170:	f002 f8ec 	bl	801034c <__ssrefill_r>
 800e174:	2800      	cmp	r0, #0
 800e176:	d0f7      	beq.n	800e168 <__ssvfscanf_r+0xd44>
 800e178:	2300      	movs	r3, #0
 800e17a:	6a3a      	ldr	r2, [r7, #32]
 800e17c:	7013      	strb	r3, [r2, #0]
 800e17e:	1b55      	subs	r5, r2, r5
 800e180:	2e00      	cmp	r6, #0
 800e182:	d009      	beq.n	800e198 <__ssvfscanf_r+0xd74>
 800e184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e186:	1c69      	adds	r1, r5, #1
 800e188:	428b      	cmp	r3, r1
 800e18a:	d905      	bls.n	800e198 <__ssvfscanf_r+0xd74>
 800e18c:	6830      	ldr	r0, [r6, #0]
 800e18e:	f001 fc43 	bl	800fa18 <realloc>
 800e192:	2800      	cmp	r0, #0
 800e194:	d000      	beq.n	800e198 <__ssvfscanf_r+0xd74>
 800e196:	6030      	str	r0, [r6, #0]
 800e198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e19a:	195b      	adds	r3, r3, r5
 800e19c:	63bb      	str	r3, [r7, #56]	; 0x38
 800e19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a0:	3301      	adds	r3, #1
 800e1a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1a4:	e63c      	b.n	800de20 <__ssvfscanf_r+0x9fc>
 800e1a6:	22ae      	movs	r2, #174	; 0xae
 800e1a8:	2100      	movs	r1, #0
 800e1aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1ac:	0052      	lsls	r2, r2, #1
 800e1ae:	3b01      	subs	r3, #1
 800e1b0:	6239      	str	r1, [r7, #32]
 800e1b2:	4293      	cmp	r3, r2
 800e1b4:	d906      	bls.n	800e1c4 <__ssvfscanf_r+0xda0>
 800e1b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1b8:	3b5e      	subs	r3, #94	; 0x5e
 800e1ba:	3bff      	subs	r3, #255	; 0xff
 800e1bc:	623b      	str	r3, [r7, #32]
 800e1be:	235e      	movs	r3, #94	; 0x5e
 800e1c0:	33ff      	adds	r3, #255	; 0xff
 800e1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e1c4:	24d8      	movs	r4, #216	; 0xd8
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	2248      	movs	r2, #72	; 0x48
 800e1ca:	0124      	lsls	r4, r4, #4
 800e1cc:	4334      	orrs	r4, r6
 800e1ce:	2680      	movs	r6, #128	; 0x80
 800e1d0:	61fb      	str	r3, [r7, #28]
 800e1d2:	3319      	adds	r3, #25
 800e1d4:	33ff      	adds	r3, #255	; 0xff
 800e1d6:	189b      	adds	r3, r3, r2
 800e1d8:	19dd      	adds	r5, r3, r7
 800e1da:	00b6      	lsls	r6, r6, #2
 800e1dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1de:	681a      	ldr	r2, [r3, #0]
 800e1e0:	7813      	ldrb	r3, [r2, #0]
 800e1e2:	2b39      	cmp	r3, #57	; 0x39
 800e1e4:	d80f      	bhi.n	800e206 <__ssvfscanf_r+0xde2>
 800e1e6:	2b2a      	cmp	r3, #42	; 0x2a
 800e1e8:	d91b      	bls.n	800e222 <__ssvfscanf_r+0xdfe>
 800e1ea:	0018      	movs	r0, r3
 800e1ec:	382b      	subs	r0, #43	; 0x2b
 800e1ee:	280e      	cmp	r0, #14
 800e1f0:	d817      	bhi.n	800e222 <__ssvfscanf_r+0xdfe>
 800e1f2:	f7f1 ff8f 	bl	8000114 <__gnu_thumb1_case_uqi>
 800e1f6:	168f      	.short	0x168f
 800e1f8:	5416168f 	.word	0x5416168f
 800e1fc:	80808080 	.word	0x80808080
 800e200:	87808080 	.word	0x87808080
 800e204:	87          	.byte	0x87
 800e205:	00          	.byte	0x00
 800e206:	2b66      	cmp	r3, #102	; 0x66
 800e208:	d83a      	bhi.n	800e280 <__ssvfscanf_r+0xe5c>
 800e20a:	2b60      	cmp	r3, #96	; 0x60
 800e20c:	d803      	bhi.n	800e216 <__ssvfscanf_r+0xdf2>
 800e20e:	2b46      	cmp	r3, #70	; 0x46
 800e210:	d805      	bhi.n	800e21e <__ssvfscanf_r+0xdfa>
 800e212:	2b40      	cmp	r3, #64	; 0x40
 800e214:	d905      	bls.n	800e222 <__ssvfscanf_r+0xdfe>
 800e216:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e218:	290a      	cmp	r1, #10
 800e21a:	dc71      	bgt.n	800e300 <__ssvfscanf_r+0xedc>
 800e21c:	e001      	b.n	800e222 <__ssvfscanf_r+0xdfe>
 800e21e:	2b58      	cmp	r3, #88	; 0x58
 800e220:	d030      	beq.n	800e284 <__ssvfscanf_r+0xe60>
 800e222:	05e3      	lsls	r3, r4, #23
 800e224:	d515      	bpl.n	800e252 <__ssvfscanf_r+0xe2e>
 800e226:	238c      	movs	r3, #140	; 0x8c
 800e228:	2248      	movs	r2, #72	; 0x48
 800e22a:	005b      	lsls	r3, r3, #1
 800e22c:	189b      	adds	r3, r3, r2
 800e22e:	19db      	adds	r3, r3, r7
 800e230:	429d      	cmp	r5, r3
 800e232:	d905      	bls.n	800e240 <__ssvfscanf_r+0xe1c>
 800e234:	3d01      	subs	r5, #1
 800e236:	7829      	ldrb	r1, [r5, #0]
 800e238:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e23a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e23c:	f002 f84a 	bl	80102d4 <_sungetc_r>
 800e240:	238c      	movs	r3, #140	; 0x8c
 800e242:	2248      	movs	r2, #72	; 0x48
 800e244:	005b      	lsls	r3, r3, #1
 800e246:	189b      	adds	r3, r3, r2
 800e248:	19db      	adds	r3, r3, r7
 800e24a:	429d      	cmp	r5, r3
 800e24c:	d101      	bne.n	800e252 <__ssvfscanf_r+0xe2e>
 800e24e:	f7ff f9e6 	bl	800d61e <__ssvfscanf_r+0x1fa>
 800e252:	2310      	movs	r3, #16
 800e254:	0022      	movs	r2, r4
 800e256:	401a      	ands	r2, r3
 800e258:	421c      	tst	r4, r3
 800e25a:	d171      	bne.n	800e340 <__ssvfscanf_r+0xf1c>
 800e25c:	218c      	movs	r1, #140	; 0x8c
 800e25e:	2048      	movs	r0, #72	; 0x48
 800e260:	0049      	lsls	r1, r1, #1
 800e262:	1809      	adds	r1, r1, r0
 800e264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e266:	697e      	ldr	r6, [r7, #20]
 800e268:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e26a:	19c9      	adds	r1, r1, r7
 800e26c:	702a      	strb	r2, [r5, #0]
 800e26e:	47b0      	blx	r6
 800e270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e272:	1d1e      	adds	r6, r3, #4
 800e274:	06a3      	lsls	r3, r4, #26
 800e276:	d559      	bpl.n	800e32c <__ssvfscanf_r+0xf08>
 800e278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	6018      	str	r0, [r3, #0]
 800e27e:	e05b      	b.n	800e338 <__ssvfscanf_r+0xf14>
 800e280:	2b78      	cmp	r3, #120	; 0x78
 800e282:	d1ce      	bne.n	800e222 <__ssvfscanf_r+0xdfe>
 800e284:	21c0      	movs	r1, #192	; 0xc0
 800e286:	00c9      	lsls	r1, r1, #3
 800e288:	4021      	ands	r1, r4
 800e28a:	42b1      	cmp	r1, r6
 800e28c:	d1c9      	bne.n	800e222 <__ssvfscanf_r+0xdfe>
 800e28e:	4934      	ldr	r1, [pc, #208]	; (800e360 <__ssvfscanf_r+0xf3c>)
 800e290:	4021      	ands	r1, r4
 800e292:	24a0      	movs	r4, #160	; 0xa0
 800e294:	00e4      	lsls	r4, r4, #3
 800e296:	430c      	orrs	r4, r1
 800e298:	2110      	movs	r1, #16
 800e29a:	6279      	str	r1, [r7, #36]	; 0x24
 800e29c:	e00b      	b.n	800e2b6 <__ssvfscanf_r+0xe92>
 800e29e:	0521      	lsls	r1, r4, #20
 800e2a0:	d509      	bpl.n	800e2b6 <__ssvfscanf_r+0xe92>
 800e2a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e2a4:	2900      	cmp	r1, #0
 800e2a6:	d102      	bne.n	800e2ae <__ssvfscanf_r+0xe8a>
 800e2a8:	3108      	adds	r1, #8
 800e2aa:	4334      	orrs	r4, r6
 800e2ac:	6279      	str	r1, [r7, #36]	; 0x24
 800e2ae:	0561      	lsls	r1, r4, #21
 800e2b0:	d504      	bpl.n	800e2bc <__ssvfscanf_r+0xe98>
 800e2b2:	492c      	ldr	r1, [pc, #176]	; (800e364 <__ssvfscanf_r+0xf40>)
 800e2b4:	400c      	ands	r4, r1
 800e2b6:	702b      	strb	r3, [r5, #0]
 800e2b8:	3501      	adds	r5, #1
 800e2ba:	e00c      	b.n	800e2d6 <__ssvfscanf_r+0xeb2>
 800e2bc:	4b2a      	ldr	r3, [pc, #168]	; (800e368 <__ssvfscanf_r+0xf44>)
 800e2be:	401c      	ands	r4, r3
 800e2c0:	6a3b      	ldr	r3, [r7, #32]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d004      	beq.n	800e2d0 <__ssvfscanf_r+0xeac>
 800e2c6:	3b01      	subs	r3, #1
 800e2c8:	623b      	str	r3, [r7, #32]
 800e2ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2cc:	3301      	adds	r3, #1
 800e2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e2d0:	69fb      	ldr	r3, [r7, #28]
 800e2d2:	3301      	adds	r3, #1
 800e2d4:	61fb      	str	r3, [r7, #28]
 800e2d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e2da:	685b      	ldr	r3, [r3, #4]
 800e2dc:	3b01      	subs	r3, #1
 800e2de:	604b      	str	r3, [r1, #4]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	dd1c      	ble.n	800e31e <__ssvfscanf_r+0xefa>
 800e2e4:	3201      	adds	r2, #1
 800e2e6:	600a      	str	r2, [r1, #0]
 800e2e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2ea:	3b01      	subs	r3, #1
 800e2ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d000      	beq.n	800e2f4 <__ssvfscanf_r+0xed0>
 800e2f2:	e773      	b.n	800e1dc <__ssvfscanf_r+0xdb8>
 800e2f4:	e795      	b.n	800e222 <__ssvfscanf_r+0xdfe>
 800e2f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e2f8:	491c      	ldr	r1, [pc, #112]	; (800e36c <__ssvfscanf_r+0xf48>)
 800e2fa:	0040      	lsls	r0, r0, #1
 800e2fc:	5e41      	ldrsh	r1, [r0, r1]
 800e2fe:	6279      	str	r1, [r7, #36]	; 0x24
 800e300:	491b      	ldr	r1, [pc, #108]	; (800e370 <__ssvfscanf_r+0xf4c>)
 800e302:	e7d7      	b.n	800e2b4 <__ssvfscanf_r+0xe90>
 800e304:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e306:	4919      	ldr	r1, [pc, #100]	; (800e36c <__ssvfscanf_r+0xf48>)
 800e308:	0040      	lsls	r0, r0, #1
 800e30a:	5e41      	ldrsh	r1, [r0, r1]
 800e30c:	6279      	str	r1, [r7, #36]	; 0x24
 800e30e:	2908      	cmp	r1, #8
 800e310:	dcf6      	bgt.n	800e300 <__ssvfscanf_r+0xedc>
 800e312:	e786      	b.n	800e222 <__ssvfscanf_r+0xdfe>
 800e314:	2180      	movs	r1, #128	; 0x80
 800e316:	420c      	tst	r4, r1
 800e318:	d083      	beq.n	800e222 <__ssvfscanf_r+0xdfe>
 800e31a:	438c      	bics	r4, r1
 800e31c:	e7cb      	b.n	800e2b6 <__ssvfscanf_r+0xe92>
 800e31e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e320:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e322:	f002 f813 	bl	801034c <__ssrefill_r>
 800e326:	2800      	cmp	r0, #0
 800e328:	d0de      	beq.n	800e2e8 <__ssvfscanf_r+0xec4>
 800e32a:	e77a      	b.n	800e222 <__ssvfscanf_r+0xdfe>
 800e32c:	2308      	movs	r3, #8
 800e32e:	421c      	tst	r4, r3
 800e330:	d020      	beq.n	800e374 <__ssvfscanf_r+0xf50>
 800e332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	7018      	strb	r0, [r3, #0]
 800e338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e33a:	633e      	str	r6, [r7, #48]	; 0x30
 800e33c:	3301      	adds	r3, #1
 800e33e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e340:	238c      	movs	r3, #140	; 0x8c
 800e342:	2248      	movs	r2, #72	; 0x48
 800e344:	005b      	lsls	r3, r3, #1
 800e346:	189b      	adds	r3, r3, r2
 800e348:	19db      	adds	r3, r3, r7
 800e34a:	1aed      	subs	r5, r5, r3
 800e34c:	69fb      	ldr	r3, [r7, #28]
 800e34e:	18ed      	adds	r5, r5, r3
 800e350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e352:	195b      	adds	r3, r3, r5
 800e354:	f7ff f92d 	bl	800d5b2 <__ssvfscanf_r+0x18e>
 800e358:	080130e9 	.word	0x080130e9
 800e35c:	0000fff6 	.word	0x0000fff6
 800e360:	fffffdff 	.word	0xfffffdff
 800e364:	fffffa7f 	.word	0xfffffa7f
 800e368:	fffffc7f 	.word	0xfffffc7f
 800e36c:	08013416 	.word	0x08013416
 800e370:	fffff47f 	.word	0xfffff47f
 800e374:	0763      	lsls	r3, r4, #29
 800e376:	d503      	bpl.n	800e380 <__ssvfscanf_r+0xf5c>
 800e378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	8018      	strh	r0, [r3, #0]
 800e37e:	e7db      	b.n	800e338 <__ssvfscanf_r+0xf14>
 800e380:	2301      	movs	r3, #1
 800e382:	0022      	movs	r2, r4
 800e384:	401a      	ands	r2, r3
 800e386:	421c      	tst	r4, r3
 800e388:	d000      	beq.n	800e38c <__ssvfscanf_r+0xf68>
 800e38a:	e775      	b.n	800e278 <__ssvfscanf_r+0xe54>
 800e38c:	07a4      	lsls	r4, r4, #30
 800e38e:	d400      	bmi.n	800e392 <__ssvfscanf_r+0xf6e>
 800e390:	e772      	b.n	800e278 <__ssvfscanf_r+0xe54>
 800e392:	4ba8      	ldr	r3, [pc, #672]	; (800e634 <__ssvfscanf_r+0x1210>)
 800e394:	6979      	ldr	r1, [r7, #20]
 800e396:	4299      	cmp	r1, r3
 800e398:	d10c      	bne.n	800e3b4 <__ssvfscanf_r+0xf90>
 800e39a:	218c      	movs	r1, #140	; 0x8c
 800e39c:	2048      	movs	r0, #72	; 0x48
 800e39e:	0049      	lsls	r1, r1, #1
 800e3a0:	1809      	adds	r1, r1, r0
 800e3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e3a6:	19c9      	adds	r1, r1, r7
 800e3a8:	f001 fecc 	bl	8010144 <_strtoull_r>
 800e3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	c303      	stmia	r3!, {r0, r1}
 800e3b2:	e7c1      	b.n	800e338 <__ssvfscanf_r+0xf14>
 800e3b4:	218c      	movs	r1, #140	; 0x8c
 800e3b6:	2048      	movs	r0, #72	; 0x48
 800e3b8:	0049      	lsls	r1, r1, #1
 800e3ba:	1809      	adds	r1, r1, r0
 800e3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3be:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e3c0:	19c9      	adds	r1, r1, r7
 800e3c2:	f001 fe0d 	bl	800ffe0 <_strtoll_r>
 800e3c6:	e7f1      	b.n	800e3ac <__ssvfscanf_r+0xf88>
 800e3c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e3ca:	f000 fb9f 	bl	800eb0c <_localeconv_r>
 800e3ce:	22ae      	movs	r2, #174	; 0xae
 800e3d0:	2100      	movs	r1, #0
 800e3d2:	6803      	ldr	r3, [r0, #0]
 800e3d4:	0052      	lsls	r2, r2, #1
 800e3d6:	603b      	str	r3, [r7, #0]
 800e3d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3da:	60f9      	str	r1, [r7, #12]
 800e3dc:	3b01      	subs	r3, #1
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	d906      	bls.n	800e3f0 <__ssvfscanf_r+0xfcc>
 800e3e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3e4:	3b5e      	subs	r3, #94	; 0x5e
 800e3e6:	3bff      	subs	r3, #255	; 0xff
 800e3e8:	60fb      	str	r3, [r7, #12]
 800e3ea:	235e      	movs	r3, #94	; 0x5e
 800e3ec:	33ff      	adds	r3, #255	; 0xff
 800e3ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e3f0:	23f0      	movs	r3, #240	; 0xf0
 800e3f2:	00db      	lsls	r3, r3, #3
 800e3f4:	431e      	orrs	r6, r3
 800e3f6:	238c      	movs	r3, #140	; 0x8c
 800e3f8:	2248      	movs	r2, #72	; 0x48
 800e3fa:	2400      	movs	r4, #0
 800e3fc:	005b      	lsls	r3, r3, #1
 800e3fe:	189b      	adds	r3, r3, r2
 800e400:	623c      	str	r4, [r7, #32]
 800e402:	607c      	str	r4, [r7, #4]
 800e404:	60bc      	str	r4, [r7, #8]
 800e406:	61fc      	str	r4, [r7, #28]
 800e408:	613c      	str	r4, [r7, #16]
 800e40a:	19dd      	adds	r5, r3, r7
 800e40c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	781a      	ldrb	r2, [r3, #0]
 800e412:	0010      	movs	r0, r2
 800e414:	382b      	subs	r0, #43	; 0x2b
 800e416:	284e      	cmp	r0, #78	; 0x4e
 800e418:	d900      	bls.n	800e41c <__ssvfscanf_r+0xff8>
 800e41a:	e133      	b.n	800e684 <__ssvfscanf_r+0x1260>
 800e41c:	f7f1 fe84 	bl	8000128 <__gnu_thumb1_case_uhi>
 800e420:	0132009b 	.word	0x0132009b
 800e424:	0132009b 	.word	0x0132009b
 800e428:	004f0132 	.word	0x004f0132
 800e42c:	00720072 	.word	0x00720072
 800e430:	00720072 	.word	0x00720072
 800e434:	00720072 	.word	0x00720072
 800e438:	00720072 	.word	0x00720072
 800e43c:	01320072 	.word	0x01320072
 800e440:	01320132 	.word	0x01320132
 800e444:	01320132 	.word	0x01320132
 800e448:	01320132 	.word	0x01320132
 800e44c:	007b00bc 	.word	0x007b00bc
 800e450:	007b007b 	.word	0x007b007b
 800e454:	00f7012f 	.word	0x00f7012f
 800e458:	01320132 	.word	0x01320132
 800e45c:	013200e3 	.word	0x013200e3
 800e460:	01320132 	.word	0x01320132
 800e464:	00a00132 	.word	0x00a00132
 800e468:	01120132 	.word	0x01120132
 800e46c:	01320132 	.word	0x01320132
 800e470:	01010132 	.word	0x01010132
 800e474:	01320132 	.word	0x01320132
 800e478:	00820132 	.word	0x00820132
 800e47c:	01320105 	.word	0x01320105
 800e480:	01320132 	.word	0x01320132
 800e484:	01320132 	.word	0x01320132
 800e488:	01320132 	.word	0x01320132
 800e48c:	007b00bc 	.word	0x007b00bc
 800e490:	007b007b 	.word	0x007b007b
 800e494:	00f7012f 	.word	0x00f7012f
 800e498:	01320132 	.word	0x01320132
 800e49c:	013200e3 	.word	0x013200e3
 800e4a0:	01320132 	.word	0x01320132
 800e4a4:	00a00132 	.word	0x00a00132
 800e4a8:	01120132 	.word	0x01120132
 800e4ac:	01320132 	.word	0x01320132
 800e4b0:	01010132 	.word	0x01010132
 800e4b4:	01320132 	.word	0x01320132
 800e4b8:	00820132 	.word	0x00820132
 800e4bc:	0105      	.short	0x0105
 800e4be:	05f1      	lsls	r1, r6, #23
 800e4c0:	d520      	bpl.n	800e504 <__ssvfscanf_r+0x10e0>
 800e4c2:	2280      	movs	r2, #128	; 0x80
 800e4c4:	4396      	bics	r6, r2
 800e4c6:	69fa      	ldr	r2, [r7, #28]
 800e4c8:	3201      	adds	r2, #1
 800e4ca:	61fa      	str	r2, [r7, #28]
 800e4cc:	68fa      	ldr	r2, [r7, #12]
 800e4ce:	2a00      	cmp	r2, #0
 800e4d0:	d004      	beq.n	800e4dc <__ssvfscanf_r+0x10b8>
 800e4d2:	3a01      	subs	r2, #1
 800e4d4:	60fa      	str	r2, [r7, #12]
 800e4d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e4d8:	3201      	adds	r2, #1
 800e4da:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e4dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e4de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e4e0:	3a01      	subs	r2, #1
 800e4e2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e4e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e4e6:	3201      	adds	r2, #1
 800e4e8:	63ba      	str	r2, [r7, #56]	; 0x38
 800e4ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e4ec:	6852      	ldr	r2, [r2, #4]
 800e4ee:	3a01      	subs	r2, #1
 800e4f0:	604a      	str	r2, [r1, #4]
 800e4f2:	2a00      	cmp	r2, #0
 800e4f4:	dc00      	bgt.n	800e4f8 <__ssvfscanf_r+0x10d4>
 800e4f6:	e0d6      	b.n	800e6a6 <__ssvfscanf_r+0x1282>
 800e4f8:	3301      	adds	r3, #1
 800e4fa:	600b      	str	r3, [r1, #0]
 800e4fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d184      	bne.n	800e40c <__ssvfscanf_r+0xfe8>
 800e502:	e057      	b.n	800e5b4 <__ssvfscanf_r+0x1190>
 800e504:	6a39      	ldr	r1, [r7, #32]
 800e506:	1909      	adds	r1, r1, r4
 800e508:	2900      	cmp	r1, #0
 800e50a:	d153      	bne.n	800e5b4 <__ssvfscanf_r+0x1190>
 800e50c:	494a      	ldr	r1, [pc, #296]	; (800e638 <__ssvfscanf_r+0x1214>)
 800e50e:	400e      	ands	r6, r1
 800e510:	702a      	strb	r2, [r5, #0]
 800e512:	3501      	adds	r5, #1
 800e514:	e7e2      	b.n	800e4dc <__ssvfscanf_r+0x10b8>
 800e516:	0531      	lsls	r1, r6, #20
 800e518:	d54c      	bpl.n	800e5b4 <__ssvfscanf_r+0x1190>
 800e51a:	6a39      	ldr	r1, [r7, #32]
 800e51c:	1909      	adds	r1, r1, r4
 800e51e:	2900      	cmp	r1, #0
 800e520:	d040      	beq.n	800e5a4 <__ssvfscanf_r+0x1180>
 800e522:	e047      	b.n	800e5b4 <__ssvfscanf_r+0x1190>
 800e524:	2198      	movs	r1, #152	; 0x98
 800e526:	2080      	movs	r0, #128	; 0x80
 800e528:	0109      	lsls	r1, r1, #4
 800e52a:	4031      	ands	r1, r6
 800e52c:	0040      	lsls	r0, r0, #1
 800e52e:	4281      	cmp	r1, r0
 800e530:	d140      	bne.n	800e5b4 <__ssvfscanf_r+0x1190>
 800e532:	69f9      	ldr	r1, [r7, #28]
 800e534:	2901      	cmp	r1, #1
 800e536:	d13d      	bne.n	800e5b4 <__ssvfscanf_r+0x1190>
 800e538:	2080      	movs	r0, #128	; 0x80
 800e53a:	4940      	ldr	r1, [pc, #256]	; (800e63c <__ssvfscanf_r+0x1218>)
 800e53c:	0100      	lsls	r0, r0, #4
 800e53e:	400e      	ands	r6, r1
 800e540:	3132      	adds	r1, #50	; 0x32
 800e542:	31ff      	adds	r1, #255	; 0xff
 800e544:	7029      	strb	r1, [r5, #0]
 800e546:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e548:	4306      	orrs	r6, r0
 800e54a:	3901      	subs	r1, #1
 800e54c:	63f9      	str	r1, [r7, #60]	; 0x3c
 800e54e:	3501      	adds	r5, #1
 800e550:	2100      	movs	r1, #0
 800e552:	61f9      	str	r1, [r7, #28]
 800e554:	e7dc      	b.n	800e510 <__ssvfscanf_r+0x10ec>
 800e556:	2180      	movs	r1, #128	; 0x80
 800e558:	420e      	tst	r6, r1
 800e55a:	d02b      	beq.n	800e5b4 <__ssvfscanf_r+0x1190>
 800e55c:	438e      	bics	r6, r1
 800e55e:	e7d7      	b.n	800e510 <__ssvfscanf_r+0x10ec>
 800e560:	6a39      	ldr	r1, [r7, #32]
 800e562:	2900      	cmp	r1, #0
 800e564:	d10d      	bne.n	800e582 <__ssvfscanf_r+0x115e>
 800e566:	69f9      	ldr	r1, [r7, #28]
 800e568:	2900      	cmp	r1, #0
 800e56a:	d10e      	bne.n	800e58a <__ssvfscanf_r+0x1166>
 800e56c:	21e0      	movs	r1, #224	; 0xe0
 800e56e:	0030      	movs	r0, r6
 800e570:	00c9      	lsls	r1, r1, #3
 800e572:	4008      	ands	r0, r1
 800e574:	4288      	cmp	r0, r1
 800e576:	d108      	bne.n	800e58a <__ssvfscanf_r+0x1166>
 800e578:	4931      	ldr	r1, [pc, #196]	; (800e640 <__ssvfscanf_r+0x121c>)
 800e57a:	400e      	ands	r6, r1
 800e57c:	2101      	movs	r1, #1
 800e57e:	6239      	str	r1, [r7, #32]
 800e580:	e7c6      	b.n	800e510 <__ssvfscanf_r+0x10ec>
 800e582:	6a39      	ldr	r1, [r7, #32]
 800e584:	2902      	cmp	r1, #2
 800e586:	d100      	bne.n	800e58a <__ssvfscanf_r+0x1166>
 800e588:	e089      	b.n	800e69e <__ssvfscanf_r+0x127a>
 800e58a:	2c01      	cmp	r4, #1
 800e58c:	d001      	beq.n	800e592 <__ssvfscanf_r+0x116e>
 800e58e:	2c04      	cmp	r4, #4
 800e590:	d110      	bne.n	800e5b4 <__ssvfscanf_r+0x1190>
 800e592:	3401      	adds	r4, #1
 800e594:	b2e4      	uxtb	r4, r4
 800e596:	e7bb      	b.n	800e510 <__ssvfscanf_r+0x10ec>
 800e598:	0531      	lsls	r1, r6, #20
 800e59a:	d508      	bpl.n	800e5ae <__ssvfscanf_r+0x118a>
 800e59c:	6a39      	ldr	r1, [r7, #32]
 800e59e:	1909      	adds	r1, r1, r4
 800e5a0:	2900      	cmp	r1, #0
 800e5a2:	d104      	bne.n	800e5ae <__ssvfscanf_r+0x118a>
 800e5a4:	4824      	ldr	r0, [pc, #144]	; (800e638 <__ssvfscanf_r+0x1214>)
 800e5a6:	000c      	movs	r4, r1
 800e5a8:	4006      	ands	r6, r0
 800e5aa:	6239      	str	r1, [r7, #32]
 800e5ac:	e7b0      	b.n	800e510 <__ssvfscanf_r+0x10ec>
 800e5ae:	6a39      	ldr	r1, [r7, #32]
 800e5b0:	2901      	cmp	r1, #1
 800e5b2:	d076      	beq.n	800e6a2 <__ssvfscanf_r+0x127e>
 800e5b4:	69fb      	ldr	r3, [r7, #28]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d001      	beq.n	800e5be <__ssvfscanf_r+0x119a>
 800e5ba:	4b20      	ldr	r3, [pc, #128]	; (800e63c <__ssvfscanf_r+0x1218>)
 800e5bc:	401e      	ands	r6, r3
 800e5be:	6a3b      	ldr	r3, [r7, #32]
 800e5c0:	3b01      	subs	r3, #1
 800e5c2:	2b01      	cmp	r3, #1
 800e5c4:	d877      	bhi.n	800e6b6 <__ssvfscanf_r+0x1292>
 800e5c6:	238c      	movs	r3, #140	; 0x8c
 800e5c8:	2248      	movs	r2, #72	; 0x48
 800e5ca:	005b      	lsls	r3, r3, #1
 800e5cc:	189b      	adds	r3, r3, r2
 800e5ce:	19db      	adds	r3, r3, r7
 800e5d0:	429d      	cmp	r5, r3
 800e5d2:	d801      	bhi.n	800e5d8 <__ssvfscanf_r+0x11b4>
 800e5d4:	f7ff f823 	bl	800d61e <__ssvfscanf_r+0x1fa>
 800e5d8:	3d01      	subs	r5, #1
 800e5da:	7829      	ldrb	r1, [r5, #0]
 800e5dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e5de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e5e0:	f001 fe78 	bl	80102d4 <_sungetc_r>
 800e5e4:	e7ef      	b.n	800e5c6 <__ssvfscanf_r+0x11a2>
 800e5e6:	2c00      	cmp	r4, #0
 800e5e8:	d10c      	bne.n	800e604 <__ssvfscanf_r+0x11e0>
 800e5ea:	69f9      	ldr	r1, [r7, #28]
 800e5ec:	2900      	cmp	r1, #0
 800e5ee:	d1e4      	bne.n	800e5ba <__ssvfscanf_r+0x1196>
 800e5f0:	21e0      	movs	r1, #224	; 0xe0
 800e5f2:	0030      	movs	r0, r6
 800e5f4:	00c9      	lsls	r1, r1, #3
 800e5f6:	4008      	ands	r0, r1
 800e5f8:	4288      	cmp	r0, r1
 800e5fa:	d1e0      	bne.n	800e5be <__ssvfscanf_r+0x119a>
 800e5fc:	4910      	ldr	r1, [pc, #64]	; (800e640 <__ssvfscanf_r+0x121c>)
 800e5fe:	3401      	adds	r4, #1
 800e600:	400e      	ands	r6, r1
 800e602:	e785      	b.n	800e510 <__ssvfscanf_r+0x10ec>
 800e604:	20fd      	movs	r0, #253	; 0xfd
 800e606:	1ee1      	subs	r1, r4, #3
 800e608:	4201      	tst	r1, r0
 800e60a:	d1d3      	bne.n	800e5b4 <__ssvfscanf_r+0x1190>
 800e60c:	e7c1      	b.n	800e592 <__ssvfscanf_r+0x116e>
 800e60e:	0531      	lsls	r1, r6, #20
 800e610:	d503      	bpl.n	800e61a <__ssvfscanf_r+0x11f6>
 800e612:	6a39      	ldr	r1, [r7, #32]
 800e614:	1909      	adds	r1, r1, r4
 800e616:	2900      	cmp	r1, #0
 800e618:	d0c4      	beq.n	800e5a4 <__ssvfscanf_r+0x1180>
 800e61a:	2c02      	cmp	r4, #2
 800e61c:	d1ca      	bne.n	800e5b4 <__ssvfscanf_r+0x1190>
 800e61e:	2403      	movs	r4, #3
 800e620:	e776      	b.n	800e510 <__ssvfscanf_r+0x10ec>
 800e622:	2c06      	cmp	r4, #6
 800e624:	d1c6      	bne.n	800e5b4 <__ssvfscanf_r+0x1190>
 800e626:	2407      	movs	r4, #7
 800e628:	e772      	b.n	800e510 <__ssvfscanf_r+0x10ec>
 800e62a:	2c07      	cmp	r4, #7
 800e62c:	d1c2      	bne.n	800e5b4 <__ssvfscanf_r+0x1190>
 800e62e:	2408      	movs	r4, #8
 800e630:	e76e      	b.n	800e510 <__ssvfscanf_r+0x10ec>
 800e632:	46c0      	nop			; (mov r8, r8)
 800e634:	0800fe7d 	.word	0x0800fe7d
 800e638:	fffffe7f 	.word	0xfffffe7f
 800e63c:	fffffeff 	.word	0xfffffeff
 800e640:	fffff87f 	.word	0xfffff87f
 800e644:	0531      	lsls	r1, r6, #20
 800e646:	d5b5      	bpl.n	800e5b4 <__ssvfscanf_r+0x1190>
 800e648:	21a0      	movs	r1, #160	; 0xa0
 800e64a:	2080      	movs	r0, #128	; 0x80
 800e64c:	00c9      	lsls	r1, r1, #3
 800e64e:	00c0      	lsls	r0, r0, #3
 800e650:	4031      	ands	r1, r6
 800e652:	4281      	cmp	r1, r0
 800e654:	d004      	beq.n	800e660 <__ssvfscanf_r+0x123c>
 800e656:	4206      	tst	r6, r0
 800e658:	d0ac      	beq.n	800e5b4 <__ssvfscanf_r+0x1190>
 800e65a:	69f9      	ldr	r1, [r7, #28]
 800e65c:	2900      	cmp	r1, #0
 800e65e:	d0ae      	beq.n	800e5be <__ssvfscanf_r+0x119a>
 800e660:	2180      	movs	r1, #128	; 0x80
 800e662:	0089      	lsls	r1, r1, #2
 800e664:	420e      	tst	r6, r1
 800e666:	d104      	bne.n	800e672 <__ssvfscanf_r+0x124e>
 800e668:	69f9      	ldr	r1, [r7, #28]
 800e66a:	6938      	ldr	r0, [r7, #16]
 800e66c:	607d      	str	r5, [r7, #4]
 800e66e:	1a09      	subs	r1, r1, r0
 800e670:	60b9      	str	r1, [r7, #8]
 800e672:	20c0      	movs	r0, #192	; 0xc0
 800e674:	4973      	ldr	r1, [pc, #460]	; (800e844 <__ssvfscanf_r+0x1420>)
 800e676:	0040      	lsls	r0, r0, #1
 800e678:	400e      	ands	r6, r1
 800e67a:	4306      	orrs	r6, r0
 800e67c:	e768      	b.n	800e550 <__ssvfscanf_r+0x112c>
 800e67e:	0531      	lsls	r1, r6, #20
 800e680:	d5e2      	bpl.n	800e648 <__ssvfscanf_r+0x1224>
 800e682:	e74a      	b.n	800e51a <__ssvfscanf_r+0x10f6>
 800e684:	6839      	ldr	r1, [r7, #0]
 800e686:	7809      	ldrb	r1, [r1, #0]
 800e688:	4291      	cmp	r1, r2
 800e68a:	d193      	bne.n	800e5b4 <__ssvfscanf_r+0x1190>
 800e68c:	2180      	movs	r1, #128	; 0x80
 800e68e:	0089      	lsls	r1, r1, #2
 800e690:	420e      	tst	r6, r1
 800e692:	d08f      	beq.n	800e5b4 <__ssvfscanf_r+0x1190>
 800e694:	496c      	ldr	r1, [pc, #432]	; (800e848 <__ssvfscanf_r+0x1424>)
 800e696:	400e      	ands	r6, r1
 800e698:	69f9      	ldr	r1, [r7, #28]
 800e69a:	6139      	str	r1, [r7, #16]
 800e69c:	e738      	b.n	800e510 <__ssvfscanf_r+0x10ec>
 800e69e:	2103      	movs	r1, #3
 800e6a0:	e76d      	b.n	800e57e <__ssvfscanf_r+0x115a>
 800e6a2:	2102      	movs	r1, #2
 800e6a4:	e76b      	b.n	800e57e <__ssvfscanf_r+0x115a>
 800e6a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e6a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e6aa:	f001 fe4f 	bl	801034c <__ssrefill_r>
 800e6ae:	2800      	cmp	r0, #0
 800e6b0:	d100      	bne.n	800e6b4 <__ssvfscanf_r+0x1290>
 800e6b2:	e723      	b.n	800e4fc <__ssvfscanf_r+0x10d8>
 800e6b4:	e77e      	b.n	800e5b4 <__ssvfscanf_r+0x1190>
 800e6b6:	1e63      	subs	r3, r4, #1
 800e6b8:	2b06      	cmp	r3, #6
 800e6ba:	d825      	bhi.n	800e708 <__ssvfscanf_r+0x12e4>
 800e6bc:	2c02      	cmp	r4, #2
 800e6be:	d837      	bhi.n	800e730 <__ssvfscanf_r+0x130c>
 800e6c0:	238c      	movs	r3, #140	; 0x8c
 800e6c2:	2248      	movs	r2, #72	; 0x48
 800e6c4:	005b      	lsls	r3, r3, #1
 800e6c6:	189b      	adds	r3, r3, r2
 800e6c8:	19db      	adds	r3, r3, r7
 800e6ca:	429d      	cmp	r5, r3
 800e6cc:	d801      	bhi.n	800e6d2 <__ssvfscanf_r+0x12ae>
 800e6ce:	f7fe ffa6 	bl	800d61e <__ssvfscanf_r+0x1fa>
 800e6d2:	3d01      	subs	r5, #1
 800e6d4:	7829      	ldrb	r1, [r5, #0]
 800e6d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e6d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e6da:	f001 fdfb 	bl	80102d4 <_sungetc_r>
 800e6de:	e7ef      	b.n	800e6c0 <__ssvfscanf_r+0x129c>
 800e6e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e6e4:	3b01      	subs	r3, #1
 800e6e6:	7819      	ldrb	r1, [r3, #0]
 800e6e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e6ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e6ec:	f001 fdf2 	bl	80102d4 <_sungetc_r>
 800e6f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6f2:	6a3a      	ldr	r2, [r7, #32]
 800e6f4:	189b      	adds	r3, r3, r2
 800e6f6:	b2db      	uxtb	r3, r3
 800e6f8:	2b03      	cmp	r3, #3
 800e6fa:	d8f1      	bhi.n	800e6e0 <__ssvfscanf_r+0x12bc>
 800e6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6fe:	3c03      	subs	r4, #3
 800e700:	b2e4      	uxtb	r4, r4
 800e702:	1b1b      	subs	r3, r3, r4
 800e704:	1b2d      	subs	r5, r5, r4
 800e706:	63bb      	str	r3, [r7, #56]	; 0x38
 800e708:	05f3      	lsls	r3, r6, #23
 800e70a:	d52f      	bpl.n	800e76c <__ssvfscanf_r+0x1348>
 800e70c:	0573      	lsls	r3, r6, #21
 800e70e:	d514      	bpl.n	800e73a <__ssvfscanf_r+0x1316>
 800e710:	238c      	movs	r3, #140	; 0x8c
 800e712:	2248      	movs	r2, #72	; 0x48
 800e714:	005b      	lsls	r3, r3, #1
 800e716:	189b      	adds	r3, r3, r2
 800e718:	19db      	adds	r3, r3, r7
 800e71a:	429d      	cmp	r5, r3
 800e71c:	d801      	bhi.n	800e722 <__ssvfscanf_r+0x12fe>
 800e71e:	f7fe ff7e 	bl	800d61e <__ssvfscanf_r+0x1fa>
 800e722:	3d01      	subs	r5, #1
 800e724:	7829      	ldrb	r1, [r5, #0]
 800e726:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e728:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e72a:	f001 fdd3 	bl	80102d4 <_sungetc_r>
 800e72e:	e7ef      	b.n	800e710 <__ssvfscanf_r+0x12ec>
 800e730:	1b63      	subs	r3, r4, r5
 800e732:	b2db      	uxtb	r3, r3
 800e734:	63fd      	str	r5, [r7, #60]	; 0x3c
 800e736:	623b      	str	r3, [r7, #32]
 800e738:	e7da      	b.n	800e6f0 <__ssvfscanf_r+0x12cc>
 800e73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e73c:	1e6c      	subs	r4, r5, #1
 800e73e:	7821      	ldrb	r1, [r4, #0]
 800e740:	3b01      	subs	r3, #1
 800e742:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e744:	2965      	cmp	r1, #101	; 0x65
 800e746:	d00a      	beq.n	800e75e <__ssvfscanf_r+0x133a>
 800e748:	2945      	cmp	r1, #69	; 0x45
 800e74a:	d008      	beq.n	800e75e <__ssvfscanf_r+0x133a>
 800e74c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e74e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e750:	f001 fdc0 	bl	80102d4 <_sungetc_r>
 800e754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e756:	1eac      	subs	r4, r5, #2
 800e758:	3b02      	subs	r3, #2
 800e75a:	7821      	ldrb	r1, [r4, #0]
 800e75c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e75e:	0025      	movs	r5, r4
 800e760:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e762:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e764:	f001 fdb6 	bl	80102d4 <_sungetc_r>
 800e768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e76a:	63bb      	str	r3, [r7, #56]	; 0x38
 800e76c:	2310      	movs	r3, #16
 800e76e:	0032      	movs	r2, r6
 800e770:	401a      	ands	r2, r3
 800e772:	421e      	tst	r6, r3
 800e774:	d001      	beq.n	800e77a <__ssvfscanf_r+0x1356>
 800e776:	f7fe fe71 	bl	800d45c <__ssvfscanf_r+0x38>
 800e77a:	23c0      	movs	r3, #192	; 0xc0
 800e77c:	2180      	movs	r1, #128	; 0x80
 800e77e:	00db      	lsls	r3, r3, #3
 800e780:	702a      	strb	r2, [r5, #0]
 800e782:	4033      	ands	r3, r6
 800e784:	00c9      	lsls	r1, r1, #3
 800e786:	428b      	cmp	r3, r1
 800e788:	d11f      	bne.n	800e7ca <__ssvfscanf_r+0x13a6>
 800e78a:	693b      	ldr	r3, [r7, #16]
 800e78c:	69fa      	ldr	r2, [r7, #28]
 800e78e:	69f9      	ldr	r1, [r7, #28]
 800e790:	1a9a      	subs	r2, r3, r2
 800e792:	428b      	cmp	r3, r1
 800e794:	d125      	bne.n	800e7e2 <__ssvfscanf_r+0x13be>
 800e796:	238c      	movs	r3, #140	; 0x8c
 800e798:	2148      	movs	r1, #72	; 0x48
 800e79a:	005b      	lsls	r3, r3, #1
 800e79c:	185b      	adds	r3, r3, r1
 800e79e:	19d9      	adds	r1, r3, r7
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e7a4:	f7fb ffca 	bl	800a73c <_strtod_r>
 800e7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7aa:	0004      	movs	r4, r0
 800e7ac:	3304      	adds	r3, #4
 800e7ae:	000d      	movs	r5, r1
 800e7b0:	623b      	str	r3, [r7, #32]
 800e7b2:	07f3      	lsls	r3, r6, #31
 800e7b4:	d523      	bpl.n	800e7fe <__ssvfscanf_r+0x13da>
 800e7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	601c      	str	r4, [r3, #0]
 800e7bc:	605d      	str	r5, [r3, #4]
 800e7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c0:	3301      	adds	r3, #1
 800e7c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e7c4:	6a3b      	ldr	r3, [r7, #32]
 800e7c6:	f7fe ffa5 	bl	800d714 <__ssvfscanf_r+0x2f0>
 800e7ca:	68bb      	ldr	r3, [r7, #8]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d0e2      	beq.n	800e796 <__ssvfscanf_r+0x1372>
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e7d4:	1c59      	adds	r1, r3, #1
 800e7d6:	230a      	movs	r3, #10
 800e7d8:	f7fc f84c 	bl	800a874 <_strtol_r>
 800e7dc:	68bb      	ldr	r3, [r7, #8]
 800e7de:	687d      	ldr	r5, [r7, #4]
 800e7e0:	1ac2      	subs	r2, r0, r3
 800e7e2:	2148      	movs	r1, #72	; 0x48
 800e7e4:	4b19      	ldr	r3, [pc, #100]	; (800e84c <__ssvfscanf_r+0x1428>)
 800e7e6:	185b      	adds	r3, r3, r1
 800e7e8:	19db      	adds	r3, r3, r7
 800e7ea:	429d      	cmp	r5, r3
 800e7ec:	d302      	bcc.n	800e7f4 <__ssvfscanf_r+0x13d0>
 800e7ee:	4b18      	ldr	r3, [pc, #96]	; (800e850 <__ssvfscanf_r+0x142c>)
 800e7f0:	185b      	adds	r3, r3, r1
 800e7f2:	19dd      	adds	r5, r3, r7
 800e7f4:	0028      	movs	r0, r5
 800e7f6:	4917      	ldr	r1, [pc, #92]	; (800e854 <__ssvfscanf_r+0x1430>)
 800e7f8:	f7fc f944 	bl	800aa84 <sprintf>
 800e7fc:	e7cb      	b.n	800e796 <__ssvfscanf_r+0x1372>
 800e7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e804:	07b6      	lsls	r6, r6, #30
 800e806:	d4d8      	bmi.n	800e7ba <__ssvfscanf_r+0x1396>
 800e808:	0002      	movs	r2, r0
 800e80a:	000b      	movs	r3, r1
 800e80c:	f7f3 fd72 	bl	80022f4 <__aeabi_dcmpun>
 800e810:	2800      	cmp	r0, #0
 800e812:	d005      	beq.n	800e820 <__ssvfscanf_r+0x13fc>
 800e814:	4810      	ldr	r0, [pc, #64]	; (800e858 <__ssvfscanf_r+0x1434>)
 800e816:	f7fc fabf 	bl	800ad98 <nanf>
 800e81a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e81c:	6018      	str	r0, [r3, #0]
 800e81e:	e7ce      	b.n	800e7be <__ssvfscanf_r+0x139a>
 800e820:	0020      	movs	r0, r4
 800e822:	0029      	movs	r1, r5
 800e824:	f7f3 fe10 	bl	8002448 <__aeabi_d2f>
 800e828:	e7f7      	b.n	800e81a <__ssvfscanf_r+0x13f6>
 800e82a:	00a3      	lsls	r3, r4, #2
 800e82c:	18ed      	adds	r5, r5, r3
 800e82e:	682b      	ldr	r3, [r5, #0]
 800e830:	3401      	adds	r4, #1
 800e832:	6818      	ldr	r0, [r3, #0]
 800e834:	f7fa ff32 	bl	800969c <free>
 800e838:	2200      	movs	r2, #0
 800e83a:	682b      	ldr	r3, [r5, #0]
 800e83c:	601a      	str	r2, [r3, #0]
 800e83e:	f7fe ffc3 	bl	800d7c8 <__ssvfscanf_r+0x3a4>
 800e842:	46c0      	nop			; (mov r8, r8)
 800e844:	fffff07f 	.word	0xfffff07f
 800e848:	fffffd7f 	.word	0xfffffd7f
 800e84c:	0000026b 	.word	0x0000026b
 800e850:	0000026a 	.word	0x0000026a
 800e854:	08013410 	.word	0x08013410
 800e858:	08013473 	.word	0x08013473

0800e85c <_fclose_r>:
 800e85c:	b570      	push	{r4, r5, r6, lr}
 800e85e:	0005      	movs	r5, r0
 800e860:	1e0c      	subs	r4, r1, #0
 800e862:	d102      	bne.n	800e86a <_fclose_r+0xe>
 800e864:	2600      	movs	r6, #0
 800e866:	0030      	movs	r0, r6
 800e868:	bd70      	pop	{r4, r5, r6, pc}
 800e86a:	2800      	cmp	r0, #0
 800e86c:	d004      	beq.n	800e878 <_fclose_r+0x1c>
 800e86e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e870:	2b00      	cmp	r3, #0
 800e872:	d101      	bne.n	800e878 <_fclose_r+0x1c>
 800e874:	f7fc f89e 	bl	800a9b4 <__sinit>
 800e878:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e87a:	07db      	lsls	r3, r3, #31
 800e87c:	d405      	bmi.n	800e88a <_fclose_r+0x2e>
 800e87e:	89a3      	ldrh	r3, [r4, #12]
 800e880:	059b      	lsls	r3, r3, #22
 800e882:	d402      	bmi.n	800e88a <_fclose_r+0x2e>
 800e884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e886:	f7fc fa6b 	bl	800ad60 <__retarget_lock_acquire_recursive>
 800e88a:	220c      	movs	r2, #12
 800e88c:	5ea3      	ldrsh	r3, [r4, r2]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d109      	bne.n	800e8a6 <_fclose_r+0x4a>
 800e892:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e894:	3301      	adds	r3, #1
 800e896:	0016      	movs	r6, r2
 800e898:	401e      	ands	r6, r3
 800e89a:	421a      	tst	r2, r3
 800e89c:	d1e2      	bne.n	800e864 <_fclose_r+0x8>
 800e89e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e8a0:	f7fc fa5f 	bl	800ad62 <__retarget_lock_release_recursive>
 800e8a4:	e7df      	b.n	800e866 <_fclose_r+0xa>
 800e8a6:	0021      	movs	r1, r4
 800e8a8:	0028      	movs	r0, r5
 800e8aa:	f000 f837 	bl	800e91c <__sflush_r>
 800e8ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e8b0:	0006      	movs	r6, r0
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d006      	beq.n	800e8c4 <_fclose_r+0x68>
 800e8b6:	0028      	movs	r0, r5
 800e8b8:	69e1      	ldr	r1, [r4, #28]
 800e8ba:	4798      	blx	r3
 800e8bc:	2800      	cmp	r0, #0
 800e8be:	da01      	bge.n	800e8c4 <_fclose_r+0x68>
 800e8c0:	2601      	movs	r6, #1
 800e8c2:	4276      	negs	r6, r6
 800e8c4:	89a3      	ldrh	r3, [r4, #12]
 800e8c6:	061b      	lsls	r3, r3, #24
 800e8c8:	d503      	bpl.n	800e8d2 <_fclose_r+0x76>
 800e8ca:	0028      	movs	r0, r5
 800e8cc:	6921      	ldr	r1, [r4, #16]
 800e8ce:	f7fc facf 	bl	800ae70 <_free_r>
 800e8d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e8d4:	2900      	cmp	r1, #0
 800e8d6:	d008      	beq.n	800e8ea <_fclose_r+0x8e>
 800e8d8:	0023      	movs	r3, r4
 800e8da:	3340      	adds	r3, #64	; 0x40
 800e8dc:	4299      	cmp	r1, r3
 800e8de:	d002      	beq.n	800e8e6 <_fclose_r+0x8a>
 800e8e0:	0028      	movs	r0, r5
 800e8e2:	f7fc fac5 	bl	800ae70 <_free_r>
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	6323      	str	r3, [r4, #48]	; 0x30
 800e8ea:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e8ec:	2900      	cmp	r1, #0
 800e8ee:	d004      	beq.n	800e8fa <_fclose_r+0x9e>
 800e8f0:	0028      	movs	r0, r5
 800e8f2:	f7fc fabd 	bl	800ae70 <_free_r>
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	6463      	str	r3, [r4, #68]	; 0x44
 800e8fa:	f7fc f84b 	bl	800a994 <__sfp_lock_acquire>
 800e8fe:	2300      	movs	r3, #0
 800e900:	81a3      	strh	r3, [r4, #12]
 800e902:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e904:	07db      	lsls	r3, r3, #31
 800e906:	d402      	bmi.n	800e90e <_fclose_r+0xb2>
 800e908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e90a:	f7fc fa2a 	bl	800ad62 <__retarget_lock_release_recursive>
 800e90e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e910:	f7fc fa25 	bl	800ad5e <__retarget_lock_close_recursive>
 800e914:	f7fc f846 	bl	800a9a4 <__sfp_lock_release>
 800e918:	e7a5      	b.n	800e866 <_fclose_r+0xa>
	...

0800e91c <__sflush_r>:
 800e91c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e91e:	230c      	movs	r3, #12
 800e920:	5eca      	ldrsh	r2, [r1, r3]
 800e922:	000c      	movs	r4, r1
 800e924:	0005      	movs	r5, r0
 800e926:	b291      	uxth	r1, r2
 800e928:	0713      	lsls	r3, r2, #28
 800e92a:	d464      	bmi.n	800e9f6 <__sflush_r+0xda>
 800e92c:	2380      	movs	r3, #128	; 0x80
 800e92e:	011b      	lsls	r3, r3, #4
 800e930:	4313      	orrs	r3, r2
 800e932:	6862      	ldr	r2, [r4, #4]
 800e934:	81a3      	strh	r3, [r4, #12]
 800e936:	2a00      	cmp	r2, #0
 800e938:	dc04      	bgt.n	800e944 <__sflush_r+0x28>
 800e93a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e93c:	2a00      	cmp	r2, #0
 800e93e:	dc01      	bgt.n	800e944 <__sflush_r+0x28>
 800e940:	2000      	movs	r0, #0
 800e942:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e944:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800e946:	2f00      	cmp	r7, #0
 800e948:	d0fa      	beq.n	800e940 <__sflush_r+0x24>
 800e94a:	2200      	movs	r2, #0
 800e94c:	2080      	movs	r0, #128	; 0x80
 800e94e:	682e      	ldr	r6, [r5, #0]
 800e950:	602a      	str	r2, [r5, #0]
 800e952:	001a      	movs	r2, r3
 800e954:	0140      	lsls	r0, r0, #5
 800e956:	69e1      	ldr	r1, [r4, #28]
 800e958:	4002      	ands	r2, r0
 800e95a:	4203      	tst	r3, r0
 800e95c:	d038      	beq.n	800e9d0 <__sflush_r+0xb4>
 800e95e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e960:	89a3      	ldrh	r3, [r4, #12]
 800e962:	075b      	lsls	r3, r3, #29
 800e964:	d506      	bpl.n	800e974 <__sflush_r+0x58>
 800e966:	6863      	ldr	r3, [r4, #4]
 800e968:	1ac0      	subs	r0, r0, r3
 800e96a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d001      	beq.n	800e974 <__sflush_r+0x58>
 800e970:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e972:	1ac0      	subs	r0, r0, r3
 800e974:	0002      	movs	r2, r0
 800e976:	2300      	movs	r3, #0
 800e978:	0028      	movs	r0, r5
 800e97a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800e97c:	69e1      	ldr	r1, [r4, #28]
 800e97e:	47b8      	blx	r7
 800e980:	89a2      	ldrh	r2, [r4, #12]
 800e982:	1c43      	adds	r3, r0, #1
 800e984:	d106      	bne.n	800e994 <__sflush_r+0x78>
 800e986:	6829      	ldr	r1, [r5, #0]
 800e988:	291d      	cmp	r1, #29
 800e98a:	d830      	bhi.n	800e9ee <__sflush_r+0xd2>
 800e98c:	4b2c      	ldr	r3, [pc, #176]	; (800ea40 <__sflush_r+0x124>)
 800e98e:	410b      	asrs	r3, r1
 800e990:	07db      	lsls	r3, r3, #31
 800e992:	d42c      	bmi.n	800e9ee <__sflush_r+0xd2>
 800e994:	4b2b      	ldr	r3, [pc, #172]	; (800ea44 <__sflush_r+0x128>)
 800e996:	4013      	ands	r3, r2
 800e998:	2200      	movs	r2, #0
 800e99a:	6062      	str	r2, [r4, #4]
 800e99c:	6922      	ldr	r2, [r4, #16]
 800e99e:	b21b      	sxth	r3, r3
 800e9a0:	81a3      	strh	r3, [r4, #12]
 800e9a2:	6022      	str	r2, [r4, #0]
 800e9a4:	04db      	lsls	r3, r3, #19
 800e9a6:	d505      	bpl.n	800e9b4 <__sflush_r+0x98>
 800e9a8:	1c43      	adds	r3, r0, #1
 800e9aa:	d102      	bne.n	800e9b2 <__sflush_r+0x96>
 800e9ac:	682b      	ldr	r3, [r5, #0]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d100      	bne.n	800e9b4 <__sflush_r+0x98>
 800e9b2:	6520      	str	r0, [r4, #80]	; 0x50
 800e9b4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e9b6:	602e      	str	r6, [r5, #0]
 800e9b8:	2900      	cmp	r1, #0
 800e9ba:	d0c1      	beq.n	800e940 <__sflush_r+0x24>
 800e9bc:	0023      	movs	r3, r4
 800e9be:	3340      	adds	r3, #64	; 0x40
 800e9c0:	4299      	cmp	r1, r3
 800e9c2:	d002      	beq.n	800e9ca <__sflush_r+0xae>
 800e9c4:	0028      	movs	r0, r5
 800e9c6:	f7fc fa53 	bl	800ae70 <_free_r>
 800e9ca:	2000      	movs	r0, #0
 800e9cc:	6320      	str	r0, [r4, #48]	; 0x30
 800e9ce:	e7b8      	b.n	800e942 <__sflush_r+0x26>
 800e9d0:	2301      	movs	r3, #1
 800e9d2:	0028      	movs	r0, r5
 800e9d4:	47b8      	blx	r7
 800e9d6:	1c43      	adds	r3, r0, #1
 800e9d8:	d1c2      	bne.n	800e960 <__sflush_r+0x44>
 800e9da:	682b      	ldr	r3, [r5, #0]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d0bf      	beq.n	800e960 <__sflush_r+0x44>
 800e9e0:	2b1d      	cmp	r3, #29
 800e9e2:	d001      	beq.n	800e9e8 <__sflush_r+0xcc>
 800e9e4:	2b16      	cmp	r3, #22
 800e9e6:	d101      	bne.n	800e9ec <__sflush_r+0xd0>
 800e9e8:	602e      	str	r6, [r5, #0]
 800e9ea:	e7a9      	b.n	800e940 <__sflush_r+0x24>
 800e9ec:	89a2      	ldrh	r2, [r4, #12]
 800e9ee:	2340      	movs	r3, #64	; 0x40
 800e9f0:	4313      	orrs	r3, r2
 800e9f2:	81a3      	strh	r3, [r4, #12]
 800e9f4:	e7a5      	b.n	800e942 <__sflush_r+0x26>
 800e9f6:	6926      	ldr	r6, [r4, #16]
 800e9f8:	2e00      	cmp	r6, #0
 800e9fa:	d0a1      	beq.n	800e940 <__sflush_r+0x24>
 800e9fc:	6827      	ldr	r7, [r4, #0]
 800e9fe:	6026      	str	r6, [r4, #0]
 800ea00:	1bbb      	subs	r3, r7, r6
 800ea02:	9301      	str	r3, [sp, #4]
 800ea04:	2300      	movs	r3, #0
 800ea06:	0789      	lsls	r1, r1, #30
 800ea08:	d100      	bne.n	800ea0c <__sflush_r+0xf0>
 800ea0a:	6963      	ldr	r3, [r4, #20]
 800ea0c:	60a3      	str	r3, [r4, #8]
 800ea0e:	9b01      	ldr	r3, [sp, #4]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	dc00      	bgt.n	800ea16 <__sflush_r+0xfa>
 800ea14:	e794      	b.n	800e940 <__sflush_r+0x24>
 800ea16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea18:	0032      	movs	r2, r6
 800ea1a:	001f      	movs	r7, r3
 800ea1c:	0028      	movs	r0, r5
 800ea1e:	9b01      	ldr	r3, [sp, #4]
 800ea20:	69e1      	ldr	r1, [r4, #28]
 800ea22:	47b8      	blx	r7
 800ea24:	2800      	cmp	r0, #0
 800ea26:	dc06      	bgt.n	800ea36 <__sflush_r+0x11a>
 800ea28:	2340      	movs	r3, #64	; 0x40
 800ea2a:	2001      	movs	r0, #1
 800ea2c:	89a2      	ldrh	r2, [r4, #12]
 800ea2e:	4240      	negs	r0, r0
 800ea30:	4313      	orrs	r3, r2
 800ea32:	81a3      	strh	r3, [r4, #12]
 800ea34:	e785      	b.n	800e942 <__sflush_r+0x26>
 800ea36:	9b01      	ldr	r3, [sp, #4]
 800ea38:	1836      	adds	r6, r6, r0
 800ea3a:	1a1b      	subs	r3, r3, r0
 800ea3c:	9301      	str	r3, [sp, #4]
 800ea3e:	e7e6      	b.n	800ea0e <__sflush_r+0xf2>
 800ea40:	dfbffffe 	.word	0xdfbffffe
 800ea44:	fffff7ff 	.word	0xfffff7ff

0800ea48 <_fflush_r>:
 800ea48:	b570      	push	{r4, r5, r6, lr}
 800ea4a:	0005      	movs	r5, r0
 800ea4c:	000c      	movs	r4, r1
 800ea4e:	2800      	cmp	r0, #0
 800ea50:	d004      	beq.n	800ea5c <_fflush_r+0x14>
 800ea52:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d101      	bne.n	800ea5c <_fflush_r+0x14>
 800ea58:	f7fb ffac 	bl	800a9b4 <__sinit>
 800ea5c:	220c      	movs	r2, #12
 800ea5e:	5ea3      	ldrsh	r3, [r4, r2]
 800ea60:	1e1e      	subs	r6, r3, #0
 800ea62:	d015      	beq.n	800ea90 <_fflush_r+0x48>
 800ea64:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ea66:	07d2      	lsls	r2, r2, #31
 800ea68:	d404      	bmi.n	800ea74 <_fflush_r+0x2c>
 800ea6a:	059b      	lsls	r3, r3, #22
 800ea6c:	d402      	bmi.n	800ea74 <_fflush_r+0x2c>
 800ea6e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea70:	f7fc f976 	bl	800ad60 <__retarget_lock_acquire_recursive>
 800ea74:	0021      	movs	r1, r4
 800ea76:	0028      	movs	r0, r5
 800ea78:	f7ff ff50 	bl	800e91c <__sflush_r>
 800ea7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ea7e:	0006      	movs	r6, r0
 800ea80:	07db      	lsls	r3, r3, #31
 800ea82:	d405      	bmi.n	800ea90 <_fflush_r+0x48>
 800ea84:	89a3      	ldrh	r3, [r4, #12]
 800ea86:	059b      	lsls	r3, r3, #22
 800ea88:	d402      	bmi.n	800ea90 <_fflush_r+0x48>
 800ea8a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea8c:	f7fc f969 	bl	800ad62 <__retarget_lock_release_recursive>
 800ea90:	0030      	movs	r0, r6
 800ea92:	bd70      	pop	{r4, r5, r6, pc}

0800ea94 <__sccl>:
 800ea94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea96:	780b      	ldrb	r3, [r1, #0]
 800ea98:	0004      	movs	r4, r0
 800ea9a:	2b5e      	cmp	r3, #94	; 0x5e
 800ea9c:	d019      	beq.n	800ead2 <__sccl+0x3e>
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	1c4d      	adds	r5, r1, #1
 800eaa2:	0021      	movs	r1, r4
 800eaa4:	1c60      	adds	r0, r4, #1
 800eaa6:	30ff      	adds	r0, #255	; 0xff
 800eaa8:	700a      	strb	r2, [r1, #0]
 800eaaa:	3101      	adds	r1, #1
 800eaac:	4281      	cmp	r1, r0
 800eaae:	d1fb      	bne.n	800eaa8 <__sccl+0x14>
 800eab0:	1e68      	subs	r0, r5, #1
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d00c      	beq.n	800ead0 <__sccl+0x3c>
 800eab6:	2101      	movs	r1, #1
 800eab8:	262d      	movs	r6, #45	; 0x2d
 800eaba:	404a      	eors	r2, r1
 800eabc:	0028      	movs	r0, r5
 800eabe:	54e2      	strb	r2, [r4, r3]
 800eac0:	7801      	ldrb	r1, [r0, #0]
 800eac2:	1c45      	adds	r5, r0, #1
 800eac4:	292d      	cmp	r1, #45	; 0x2d
 800eac6:	d00c      	beq.n	800eae2 <__sccl+0x4e>
 800eac8:	295d      	cmp	r1, #93	; 0x5d
 800eaca:	d01d      	beq.n	800eb08 <__sccl+0x74>
 800eacc:	2900      	cmp	r1, #0
 800eace:	d104      	bne.n	800eada <__sccl+0x46>
 800ead0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ead2:	2201      	movs	r2, #1
 800ead4:	784b      	ldrb	r3, [r1, #1]
 800ead6:	1c8d      	adds	r5, r1, #2
 800ead8:	e7e3      	b.n	800eaa2 <__sccl+0xe>
 800eada:	000b      	movs	r3, r1
 800eadc:	e7ee      	b.n	800eabc <__sccl+0x28>
 800eade:	0033      	movs	r3, r6
 800eae0:	e7ec      	b.n	800eabc <__sccl+0x28>
 800eae2:	7841      	ldrb	r1, [r0, #1]
 800eae4:	295d      	cmp	r1, #93	; 0x5d
 800eae6:	d0fa      	beq.n	800eade <__sccl+0x4a>
 800eae8:	428b      	cmp	r3, r1
 800eaea:	dcf8      	bgt.n	800eade <__sccl+0x4a>
 800eaec:	001d      	movs	r5, r3
 800eaee:	3002      	adds	r0, #2
 800eaf0:	3501      	adds	r5, #1
 800eaf2:	5562      	strb	r2, [r4, r5]
 800eaf4:	42a9      	cmp	r1, r5
 800eaf6:	dcfb      	bgt.n	800eaf0 <__sccl+0x5c>
 800eaf8:	2500      	movs	r5, #0
 800eafa:	1c5f      	adds	r7, r3, #1
 800eafc:	428b      	cmp	r3, r1
 800eafe:	da01      	bge.n	800eb04 <__sccl+0x70>
 800eb00:	1acd      	subs	r5, r1, r3
 800eb02:	3d01      	subs	r5, #1
 800eb04:	197b      	adds	r3, r7, r5
 800eb06:	e7db      	b.n	800eac0 <__sccl+0x2c>
 800eb08:	0028      	movs	r0, r5
 800eb0a:	e7e1      	b.n	800ead0 <__sccl+0x3c>

0800eb0c <_localeconv_r>:
 800eb0c:	4800      	ldr	r0, [pc, #0]	; (800eb10 <_localeconv_r+0x4>)
 800eb0e:	4770      	bx	lr
 800eb10:	20000538 	.word	0x20000538

0800eb14 <__libc_fini_array>:
 800eb14:	b570      	push	{r4, r5, r6, lr}
 800eb16:	4c07      	ldr	r4, [pc, #28]	; (800eb34 <__libc_fini_array+0x20>)
 800eb18:	4d07      	ldr	r5, [pc, #28]	; (800eb38 <__libc_fini_array+0x24>)
 800eb1a:	1b64      	subs	r4, r4, r5
 800eb1c:	10a4      	asrs	r4, r4, #2
 800eb1e:	2c00      	cmp	r4, #0
 800eb20:	d102      	bne.n	800eb28 <__libc_fini_array+0x14>
 800eb22:	f002 fdcd 	bl	80116c0 <_fini>
 800eb26:	bd70      	pop	{r4, r5, r6, pc}
 800eb28:	3c01      	subs	r4, #1
 800eb2a:	00a3      	lsls	r3, r4, #2
 800eb2c:	58eb      	ldr	r3, [r5, r3]
 800eb2e:	4798      	blx	r3
 800eb30:	e7f5      	b.n	800eb1e <__libc_fini_array+0xa>
 800eb32:	46c0      	nop			; (mov r8, r8)
 800eb34:	08013510 	.word	0x08013510
 800eb38:	0801350c 	.word	0x0801350c

0800eb3c <memchr>:
 800eb3c:	b2c9      	uxtb	r1, r1
 800eb3e:	1882      	adds	r2, r0, r2
 800eb40:	4290      	cmp	r0, r2
 800eb42:	d101      	bne.n	800eb48 <memchr+0xc>
 800eb44:	2000      	movs	r0, #0
 800eb46:	4770      	bx	lr
 800eb48:	7803      	ldrb	r3, [r0, #0]
 800eb4a:	428b      	cmp	r3, r1
 800eb4c:	d0fb      	beq.n	800eb46 <memchr+0xa>
 800eb4e:	3001      	adds	r0, #1
 800eb50:	e7f6      	b.n	800eb40 <memchr+0x4>
	...

0800eb54 <frexp>:
 800eb54:	b570      	push	{r4, r5, r6, lr}
 800eb56:	0014      	movs	r4, r2
 800eb58:	2500      	movs	r5, #0
 800eb5a:	6025      	str	r5, [r4, #0]
 800eb5c:	4d10      	ldr	r5, [pc, #64]	; (800eba0 <frexp+0x4c>)
 800eb5e:	004b      	lsls	r3, r1, #1
 800eb60:	000a      	movs	r2, r1
 800eb62:	085b      	lsrs	r3, r3, #1
 800eb64:	42ab      	cmp	r3, r5
 800eb66:	dc1a      	bgt.n	800eb9e <frexp+0x4a>
 800eb68:	001d      	movs	r5, r3
 800eb6a:	4305      	orrs	r5, r0
 800eb6c:	d017      	beq.n	800eb9e <frexp+0x4a>
 800eb6e:	4d0d      	ldr	r5, [pc, #52]	; (800eba4 <frexp+0x50>)
 800eb70:	4229      	tst	r1, r5
 800eb72:	d109      	bne.n	800eb88 <frexp+0x34>
 800eb74:	2200      	movs	r2, #0
 800eb76:	4b0c      	ldr	r3, [pc, #48]	; (800eba8 <frexp+0x54>)
 800eb78:	f7f2 fd78 	bl	800166c <__aeabi_dmul>
 800eb7c:	2536      	movs	r5, #54	; 0x36
 800eb7e:	000a      	movs	r2, r1
 800eb80:	004b      	lsls	r3, r1, #1
 800eb82:	426d      	negs	r5, r5
 800eb84:	085b      	lsrs	r3, r3, #1
 800eb86:	6025      	str	r5, [r4, #0]
 800eb88:	4d08      	ldr	r5, [pc, #32]	; (800ebac <frexp+0x58>)
 800eb8a:	151b      	asrs	r3, r3, #20
 800eb8c:	195b      	adds	r3, r3, r5
 800eb8e:	6825      	ldr	r5, [r4, #0]
 800eb90:	18eb      	adds	r3, r5, r3
 800eb92:	6023      	str	r3, [r4, #0]
 800eb94:	4b06      	ldr	r3, [pc, #24]	; (800ebb0 <frexp+0x5c>)
 800eb96:	401a      	ands	r2, r3
 800eb98:	4b06      	ldr	r3, [pc, #24]	; (800ebb4 <frexp+0x60>)
 800eb9a:	4313      	orrs	r3, r2
 800eb9c:	0019      	movs	r1, r3
 800eb9e:	bd70      	pop	{r4, r5, r6, pc}
 800eba0:	7fefffff 	.word	0x7fefffff
 800eba4:	7ff00000 	.word	0x7ff00000
 800eba8:	43500000 	.word	0x43500000
 800ebac:	fffffc02 	.word	0xfffffc02
 800ebb0:	800fffff 	.word	0x800fffff
 800ebb4:	3fe00000 	.word	0x3fe00000

0800ebb8 <__register_exitproc>:
 800ebb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ebba:	4f1c      	ldr	r7, [pc, #112]	; (800ec2c <__register_exitproc+0x74>)
 800ebbc:	0004      	movs	r4, r0
 800ebbe:	6838      	ldr	r0, [r7, #0]
 800ebc0:	0016      	movs	r6, r2
 800ebc2:	9301      	str	r3, [sp, #4]
 800ebc4:	9100      	str	r1, [sp, #0]
 800ebc6:	f7fc f8cb 	bl	800ad60 <__retarget_lock_acquire_recursive>
 800ebca:	4a19      	ldr	r2, [pc, #100]	; (800ec30 <__register_exitproc+0x78>)
 800ebcc:	6813      	ldr	r3, [r2, #0]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d101      	bne.n	800ebd6 <__register_exitproc+0x1e>
 800ebd2:	4b18      	ldr	r3, [pc, #96]	; (800ec34 <__register_exitproc+0x7c>)
 800ebd4:	6013      	str	r3, [r2, #0]
 800ebd6:	685a      	ldr	r2, [r3, #4]
 800ebd8:	6838      	ldr	r0, [r7, #0]
 800ebda:	2a1f      	cmp	r2, #31
 800ebdc:	dd04      	ble.n	800ebe8 <__register_exitproc+0x30>
 800ebde:	f7fc f8c0 	bl	800ad62 <__retarget_lock_release_recursive>
 800ebe2:	2001      	movs	r0, #1
 800ebe4:	4240      	negs	r0, r0
 800ebe6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ebe8:	2c00      	cmp	r4, #0
 800ebea:	d014      	beq.n	800ec16 <__register_exitproc+0x5e>
 800ebec:	0091      	lsls	r1, r2, #2
 800ebee:	1859      	adds	r1, r3, r1
 800ebf0:	000f      	movs	r7, r1
 800ebf2:	3788      	adds	r7, #136	; 0x88
 800ebf4:	603e      	str	r6, [r7, #0]
 800ebf6:	2701      	movs	r7, #1
 800ebf8:	001e      	movs	r6, r3
 800ebfa:	4097      	lsls	r7, r2
 800ebfc:	3685      	adds	r6, #133	; 0x85
 800ebfe:	36ff      	adds	r6, #255	; 0xff
 800ec00:	6875      	ldr	r5, [r6, #4]
 800ec02:	31fc      	adds	r1, #252	; 0xfc
 800ec04:	433d      	orrs	r5, r7
 800ec06:	6075      	str	r5, [r6, #4]
 800ec08:	9d01      	ldr	r5, [sp, #4]
 800ec0a:	60cd      	str	r5, [r1, #12]
 800ec0c:	2c02      	cmp	r4, #2
 800ec0e:	d102      	bne.n	800ec16 <__register_exitproc+0x5e>
 800ec10:	68b1      	ldr	r1, [r6, #8]
 800ec12:	4339      	orrs	r1, r7
 800ec14:	60b1      	str	r1, [r6, #8]
 800ec16:	1c51      	adds	r1, r2, #1
 800ec18:	6059      	str	r1, [r3, #4]
 800ec1a:	3202      	adds	r2, #2
 800ec1c:	9900      	ldr	r1, [sp, #0]
 800ec1e:	0092      	lsls	r2, r2, #2
 800ec20:	50d1      	str	r1, [r2, r3]
 800ec22:	f7fc f89e 	bl	800ad62 <__retarget_lock_release_recursive>
 800ec26:	2000      	movs	r0, #0
 800ec28:	e7dd      	b.n	800ebe6 <__register_exitproc+0x2e>
 800ec2a:	46c0      	nop			; (mov r8, r8)
 800ec2c:	200006dc 	.word	0x200006dc
 800ec30:	20000c90 	.word	0x20000c90
 800ec34:	20000c94 	.word	0x20000c94

0800ec38 <__assert_func>:
 800ec38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ec3a:	0014      	movs	r4, r2
 800ec3c:	001a      	movs	r2, r3
 800ec3e:	4b09      	ldr	r3, [pc, #36]	; (800ec64 <__assert_func+0x2c>)
 800ec40:	0005      	movs	r5, r0
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	000e      	movs	r6, r1
 800ec46:	68d8      	ldr	r0, [r3, #12]
 800ec48:	4b07      	ldr	r3, [pc, #28]	; (800ec68 <__assert_func+0x30>)
 800ec4a:	2c00      	cmp	r4, #0
 800ec4c:	d101      	bne.n	800ec52 <__assert_func+0x1a>
 800ec4e:	4b07      	ldr	r3, [pc, #28]	; (800ec6c <__assert_func+0x34>)
 800ec50:	001c      	movs	r4, r3
 800ec52:	4907      	ldr	r1, [pc, #28]	; (800ec70 <__assert_func+0x38>)
 800ec54:	9301      	str	r3, [sp, #4]
 800ec56:	9402      	str	r4, [sp, #8]
 800ec58:	002b      	movs	r3, r5
 800ec5a:	9600      	str	r6, [sp, #0]
 800ec5c:	f001 faa6 	bl	80101ac <fiprintf>
 800ec60:	f002 fb8e 	bl	8011380 <abort>
 800ec64:	200006d8 	.word	0x200006d8
 800ec68:	08013438 	.word	0x08013438
 800ec6c:	08013473 	.word	0x08013473
 800ec70:	08013445 	.word	0x08013445

0800ec74 <_calloc_r>:
 800ec74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec76:	2400      	movs	r4, #0
 800ec78:	0c0b      	lsrs	r3, r1, #16
 800ec7a:	0c16      	lsrs	r6, r2, #16
 800ec7c:	42a3      	cmp	r3, r4
 800ec7e:	d133      	bne.n	800ece8 <_calloc_r+0x74>
 800ec80:	42a6      	cmp	r6, r4
 800ec82:	d121      	bne.n	800ecc8 <_calloc_r+0x54>
 800ec84:	b28b      	uxth	r3, r1
 800ec86:	b291      	uxth	r1, r2
 800ec88:	4359      	muls	r1, r3
 800ec8a:	f7fa fd11 	bl	80096b0 <_malloc_r>
 800ec8e:	1e05      	subs	r5, r0, #0
 800ec90:	d033      	beq.n	800ecfa <_calloc_r+0x86>
 800ec92:	0003      	movs	r3, r0
 800ec94:	3b08      	subs	r3, #8
 800ec96:	685a      	ldr	r2, [r3, #4]
 800ec98:	2303      	movs	r3, #3
 800ec9a:	439a      	bics	r2, r3
 800ec9c:	3a04      	subs	r2, #4
 800ec9e:	2a24      	cmp	r2, #36	; 0x24
 800eca0:	d832      	bhi.n	800ed08 <_calloc_r+0x94>
 800eca2:	0003      	movs	r3, r0
 800eca4:	2a13      	cmp	r2, #19
 800eca6:	d90a      	bls.n	800ecbe <_calloc_r+0x4a>
 800eca8:	6004      	str	r4, [r0, #0]
 800ecaa:	6044      	str	r4, [r0, #4]
 800ecac:	3308      	adds	r3, #8
 800ecae:	2a1b      	cmp	r2, #27
 800ecb0:	d905      	bls.n	800ecbe <_calloc_r+0x4a>
 800ecb2:	6084      	str	r4, [r0, #8]
 800ecb4:	60c4      	str	r4, [r0, #12]
 800ecb6:	2a24      	cmp	r2, #36	; 0x24
 800ecb8:	d021      	beq.n	800ecfe <_calloc_r+0x8a>
 800ecba:	0003      	movs	r3, r0
 800ecbc:	3310      	adds	r3, #16
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	601a      	str	r2, [r3, #0]
 800ecc2:	605a      	str	r2, [r3, #4]
 800ecc4:	609a      	str	r2, [r3, #8]
 800ecc6:	e018      	b.n	800ecfa <_calloc_r+0x86>
 800ecc8:	1c33      	adds	r3, r6, #0
 800ecca:	1c0d      	adds	r5, r1, #0
 800eccc:	b289      	uxth	r1, r1
 800ecce:	b292      	uxth	r2, r2
 800ecd0:	434a      	muls	r2, r1
 800ecd2:	b2ad      	uxth	r5, r5
 800ecd4:	b299      	uxth	r1, r3
 800ecd6:	4369      	muls	r1, r5
 800ecd8:	0c13      	lsrs	r3, r2, #16
 800ecda:	18c9      	adds	r1, r1, r3
 800ecdc:	0c0b      	lsrs	r3, r1, #16
 800ecde:	d107      	bne.n	800ecf0 <_calloc_r+0x7c>
 800ece0:	0409      	lsls	r1, r1, #16
 800ece2:	b292      	uxth	r2, r2
 800ece4:	4311      	orrs	r1, r2
 800ece6:	e7d0      	b.n	800ec8a <_calloc_r+0x16>
 800ece8:	2e00      	cmp	r6, #0
 800ecea:	d101      	bne.n	800ecf0 <_calloc_r+0x7c>
 800ecec:	1c15      	adds	r5, r2, #0
 800ecee:	e7ed      	b.n	800eccc <_calloc_r+0x58>
 800ecf0:	f7fc f80a 	bl	800ad08 <__errno>
 800ecf4:	230c      	movs	r3, #12
 800ecf6:	2500      	movs	r5, #0
 800ecf8:	6003      	str	r3, [r0, #0]
 800ecfa:	0028      	movs	r0, r5
 800ecfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecfe:	0003      	movs	r3, r0
 800ed00:	6104      	str	r4, [r0, #16]
 800ed02:	3318      	adds	r3, #24
 800ed04:	6144      	str	r4, [r0, #20]
 800ed06:	e7da      	b.n	800ecbe <_calloc_r+0x4a>
 800ed08:	2100      	movs	r1, #0
 800ed0a:	f7fb ff51 	bl	800abb0 <memset>
 800ed0e:	e7f4      	b.n	800ecfa <_calloc_r+0x86>

0800ed10 <quorem>:
 800ed10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed12:	6902      	ldr	r2, [r0, #16]
 800ed14:	690b      	ldr	r3, [r1, #16]
 800ed16:	b089      	sub	sp, #36	; 0x24
 800ed18:	0007      	movs	r7, r0
 800ed1a:	9104      	str	r1, [sp, #16]
 800ed1c:	2000      	movs	r0, #0
 800ed1e:	429a      	cmp	r2, r3
 800ed20:	db69      	blt.n	800edf6 <quorem+0xe6>
 800ed22:	3b01      	subs	r3, #1
 800ed24:	009c      	lsls	r4, r3, #2
 800ed26:	9301      	str	r3, [sp, #4]
 800ed28:	000b      	movs	r3, r1
 800ed2a:	3314      	adds	r3, #20
 800ed2c:	9306      	str	r3, [sp, #24]
 800ed2e:	191b      	adds	r3, r3, r4
 800ed30:	9305      	str	r3, [sp, #20]
 800ed32:	003b      	movs	r3, r7
 800ed34:	3314      	adds	r3, #20
 800ed36:	9303      	str	r3, [sp, #12]
 800ed38:	191c      	adds	r4, r3, r4
 800ed3a:	9b05      	ldr	r3, [sp, #20]
 800ed3c:	6826      	ldr	r6, [r4, #0]
 800ed3e:	681d      	ldr	r5, [r3, #0]
 800ed40:	0030      	movs	r0, r6
 800ed42:	3501      	adds	r5, #1
 800ed44:	0029      	movs	r1, r5
 800ed46:	f7f1 f9f9 	bl	800013c <__udivsi3>
 800ed4a:	9002      	str	r0, [sp, #8]
 800ed4c:	42ae      	cmp	r6, r5
 800ed4e:	d329      	bcc.n	800eda4 <quorem+0x94>
 800ed50:	9b06      	ldr	r3, [sp, #24]
 800ed52:	2600      	movs	r6, #0
 800ed54:	469c      	mov	ip, r3
 800ed56:	9d03      	ldr	r5, [sp, #12]
 800ed58:	9606      	str	r6, [sp, #24]
 800ed5a:	4662      	mov	r2, ip
 800ed5c:	ca08      	ldmia	r2!, {r3}
 800ed5e:	6828      	ldr	r0, [r5, #0]
 800ed60:	4694      	mov	ip, r2
 800ed62:	9a02      	ldr	r2, [sp, #8]
 800ed64:	b299      	uxth	r1, r3
 800ed66:	4351      	muls	r1, r2
 800ed68:	0c1b      	lsrs	r3, r3, #16
 800ed6a:	4353      	muls	r3, r2
 800ed6c:	1989      	adds	r1, r1, r6
 800ed6e:	0c0a      	lsrs	r2, r1, #16
 800ed70:	189b      	adds	r3, r3, r2
 800ed72:	9307      	str	r3, [sp, #28]
 800ed74:	0c1e      	lsrs	r6, r3, #16
 800ed76:	9b06      	ldr	r3, [sp, #24]
 800ed78:	b282      	uxth	r2, r0
 800ed7a:	18d2      	adds	r2, r2, r3
 800ed7c:	466b      	mov	r3, sp
 800ed7e:	b289      	uxth	r1, r1
 800ed80:	8b9b      	ldrh	r3, [r3, #28]
 800ed82:	1a52      	subs	r2, r2, r1
 800ed84:	0c01      	lsrs	r1, r0, #16
 800ed86:	1ac9      	subs	r1, r1, r3
 800ed88:	1413      	asrs	r3, r2, #16
 800ed8a:	18cb      	adds	r3, r1, r3
 800ed8c:	1419      	asrs	r1, r3, #16
 800ed8e:	b292      	uxth	r2, r2
 800ed90:	041b      	lsls	r3, r3, #16
 800ed92:	4313      	orrs	r3, r2
 800ed94:	c508      	stmia	r5!, {r3}
 800ed96:	9b05      	ldr	r3, [sp, #20]
 800ed98:	9106      	str	r1, [sp, #24]
 800ed9a:	4563      	cmp	r3, ip
 800ed9c:	d2dd      	bcs.n	800ed5a <quorem+0x4a>
 800ed9e:	6823      	ldr	r3, [r4, #0]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d030      	beq.n	800ee06 <quorem+0xf6>
 800eda4:	0038      	movs	r0, r7
 800eda6:	9904      	ldr	r1, [sp, #16]
 800eda8:	f7fc ff04 	bl	800bbb4 <__mcmp>
 800edac:	2800      	cmp	r0, #0
 800edae:	db21      	blt.n	800edf4 <quorem+0xe4>
 800edb0:	0038      	movs	r0, r7
 800edb2:	2600      	movs	r6, #0
 800edb4:	9b02      	ldr	r3, [sp, #8]
 800edb6:	9c04      	ldr	r4, [sp, #16]
 800edb8:	3301      	adds	r3, #1
 800edba:	9302      	str	r3, [sp, #8]
 800edbc:	3014      	adds	r0, #20
 800edbe:	3414      	adds	r4, #20
 800edc0:	6803      	ldr	r3, [r0, #0]
 800edc2:	cc02      	ldmia	r4!, {r1}
 800edc4:	b29d      	uxth	r5, r3
 800edc6:	19ad      	adds	r5, r5, r6
 800edc8:	b28a      	uxth	r2, r1
 800edca:	1aaa      	subs	r2, r5, r2
 800edcc:	0c09      	lsrs	r1, r1, #16
 800edce:	0c1b      	lsrs	r3, r3, #16
 800edd0:	1a5b      	subs	r3, r3, r1
 800edd2:	1411      	asrs	r1, r2, #16
 800edd4:	185b      	adds	r3, r3, r1
 800edd6:	141e      	asrs	r6, r3, #16
 800edd8:	b292      	uxth	r2, r2
 800edda:	041b      	lsls	r3, r3, #16
 800eddc:	4313      	orrs	r3, r2
 800edde:	c008      	stmia	r0!, {r3}
 800ede0:	9b05      	ldr	r3, [sp, #20]
 800ede2:	42a3      	cmp	r3, r4
 800ede4:	d2ec      	bcs.n	800edc0 <quorem+0xb0>
 800ede6:	9b01      	ldr	r3, [sp, #4]
 800ede8:	9a03      	ldr	r2, [sp, #12]
 800edea:	009b      	lsls	r3, r3, #2
 800edec:	18d3      	adds	r3, r2, r3
 800edee:	681a      	ldr	r2, [r3, #0]
 800edf0:	2a00      	cmp	r2, #0
 800edf2:	d015      	beq.n	800ee20 <quorem+0x110>
 800edf4:	9802      	ldr	r0, [sp, #8]
 800edf6:	b009      	add	sp, #36	; 0x24
 800edf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edfa:	6823      	ldr	r3, [r4, #0]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d106      	bne.n	800ee0e <quorem+0xfe>
 800ee00:	9b01      	ldr	r3, [sp, #4]
 800ee02:	3b01      	subs	r3, #1
 800ee04:	9301      	str	r3, [sp, #4]
 800ee06:	9b03      	ldr	r3, [sp, #12]
 800ee08:	3c04      	subs	r4, #4
 800ee0a:	42a3      	cmp	r3, r4
 800ee0c:	d3f5      	bcc.n	800edfa <quorem+0xea>
 800ee0e:	9b01      	ldr	r3, [sp, #4]
 800ee10:	613b      	str	r3, [r7, #16]
 800ee12:	e7c7      	b.n	800eda4 <quorem+0x94>
 800ee14:	681a      	ldr	r2, [r3, #0]
 800ee16:	2a00      	cmp	r2, #0
 800ee18:	d106      	bne.n	800ee28 <quorem+0x118>
 800ee1a:	9a01      	ldr	r2, [sp, #4]
 800ee1c:	3a01      	subs	r2, #1
 800ee1e:	9201      	str	r2, [sp, #4]
 800ee20:	9a03      	ldr	r2, [sp, #12]
 800ee22:	3b04      	subs	r3, #4
 800ee24:	429a      	cmp	r2, r3
 800ee26:	d3f5      	bcc.n	800ee14 <quorem+0x104>
 800ee28:	9b01      	ldr	r3, [sp, #4]
 800ee2a:	613b      	str	r3, [r7, #16]
 800ee2c:	e7e2      	b.n	800edf4 <quorem+0xe4>
	...

0800ee30 <_dtoa_r>:
 800ee30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee32:	0014      	movs	r4, r2
 800ee34:	001d      	movs	r5, r3
 800ee36:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800ee38:	b09d      	sub	sp, #116	; 0x74
 800ee3a:	9408      	str	r4, [sp, #32]
 800ee3c:	9509      	str	r5, [sp, #36]	; 0x24
 800ee3e:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800ee40:	9004      	str	r0, [sp, #16]
 800ee42:	2900      	cmp	r1, #0
 800ee44:	d009      	beq.n	800ee5a <_dtoa_r+0x2a>
 800ee46:	2301      	movs	r3, #1
 800ee48:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ee4a:	4093      	lsls	r3, r2
 800ee4c:	604a      	str	r2, [r1, #4]
 800ee4e:	608b      	str	r3, [r1, #8]
 800ee50:	f7fc fc56 	bl	800b700 <_Bfree>
 800ee54:	2300      	movs	r3, #0
 800ee56:	9a04      	ldr	r2, [sp, #16]
 800ee58:	6393      	str	r3, [r2, #56]	; 0x38
 800ee5a:	2d00      	cmp	r5, #0
 800ee5c:	da1e      	bge.n	800ee9c <_dtoa_r+0x6c>
 800ee5e:	2301      	movs	r3, #1
 800ee60:	6033      	str	r3, [r6, #0]
 800ee62:	006b      	lsls	r3, r5, #1
 800ee64:	085b      	lsrs	r3, r3, #1
 800ee66:	9309      	str	r3, [sp, #36]	; 0x24
 800ee68:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ee6a:	4bb5      	ldr	r3, [pc, #724]	; (800f140 <_dtoa_r+0x310>)
 800ee6c:	4ab4      	ldr	r2, [pc, #720]	; (800f140 <_dtoa_r+0x310>)
 800ee6e:	403b      	ands	r3, r7
 800ee70:	4293      	cmp	r3, r2
 800ee72:	d116      	bne.n	800eea2 <_dtoa_r+0x72>
 800ee74:	4bb3      	ldr	r3, [pc, #716]	; (800f144 <_dtoa_r+0x314>)
 800ee76:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ee78:	6013      	str	r3, [r2, #0]
 800ee7a:	033b      	lsls	r3, r7, #12
 800ee7c:	0b1b      	lsrs	r3, r3, #12
 800ee7e:	4323      	orrs	r3, r4
 800ee80:	d101      	bne.n	800ee86 <_dtoa_r+0x56>
 800ee82:	f000 fdb2 	bl	800f9ea <_dtoa_r+0xbba>
 800ee86:	4bb0      	ldr	r3, [pc, #704]	; (800f148 <_dtoa_r+0x318>)
 800ee88:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ee8a:	9306      	str	r3, [sp, #24]
 800ee8c:	2a00      	cmp	r2, #0
 800ee8e:	d002      	beq.n	800ee96 <_dtoa_r+0x66>
 800ee90:	4bae      	ldr	r3, [pc, #696]	; (800f14c <_dtoa_r+0x31c>)
 800ee92:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ee94:	6013      	str	r3, [r2, #0]
 800ee96:	9806      	ldr	r0, [sp, #24]
 800ee98:	b01d      	add	sp, #116	; 0x74
 800ee9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	6033      	str	r3, [r6, #0]
 800eea0:	e7e2      	b.n	800ee68 <_dtoa_r+0x38>
 800eea2:	9a08      	ldr	r2, [sp, #32]
 800eea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eea6:	9210      	str	r2, [sp, #64]	; 0x40
 800eea8:	9311      	str	r3, [sp, #68]	; 0x44
 800eeaa:	9810      	ldr	r0, [sp, #64]	; 0x40
 800eeac:	9911      	ldr	r1, [sp, #68]	; 0x44
 800eeae:	2200      	movs	r2, #0
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	f7f1 fac9 	bl	8000448 <__aeabi_dcmpeq>
 800eeb6:	1e06      	subs	r6, r0, #0
 800eeb8:	d009      	beq.n	800eece <_dtoa_r+0x9e>
 800eeba:	2301      	movs	r3, #1
 800eebc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800eebe:	6013      	str	r3, [r2, #0]
 800eec0:	4ba3      	ldr	r3, [pc, #652]	; (800f150 <_dtoa_r+0x320>)
 800eec2:	9306      	str	r3, [sp, #24]
 800eec4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d0e5      	beq.n	800ee96 <_dtoa_r+0x66>
 800eeca:	4ba2      	ldr	r3, [pc, #648]	; (800f154 <_dtoa_r+0x324>)
 800eecc:	e7e1      	b.n	800ee92 <_dtoa_r+0x62>
 800eece:	ab1a      	add	r3, sp, #104	; 0x68
 800eed0:	9301      	str	r3, [sp, #4]
 800eed2:	ab1b      	add	r3, sp, #108	; 0x6c
 800eed4:	9300      	str	r3, [sp, #0]
 800eed6:	9804      	ldr	r0, [sp, #16]
 800eed8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800eeda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eedc:	f7fc ff86 	bl	800bdec <__d2b>
 800eee0:	007a      	lsls	r2, r7, #1
 800eee2:	9005      	str	r0, [sp, #20]
 800eee4:	0d52      	lsrs	r2, r2, #21
 800eee6:	d100      	bne.n	800eeea <_dtoa_r+0xba>
 800eee8:	e07b      	b.n	800efe2 <_dtoa_r+0x1b2>
 800eeea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eeec:	9617      	str	r6, [sp, #92]	; 0x5c
 800eeee:	0319      	lsls	r1, r3, #12
 800eef0:	4b99      	ldr	r3, [pc, #612]	; (800f158 <_dtoa_r+0x328>)
 800eef2:	0b09      	lsrs	r1, r1, #12
 800eef4:	430b      	orrs	r3, r1
 800eef6:	4999      	ldr	r1, [pc, #612]	; (800f15c <_dtoa_r+0x32c>)
 800eef8:	1857      	adds	r7, r2, r1
 800eefa:	9810      	ldr	r0, [sp, #64]	; 0x40
 800eefc:	9911      	ldr	r1, [sp, #68]	; 0x44
 800eefe:	0019      	movs	r1, r3
 800ef00:	2200      	movs	r2, #0
 800ef02:	4b97      	ldr	r3, [pc, #604]	; (800f160 <_dtoa_r+0x330>)
 800ef04:	f7f2 fe74 	bl	8001bf0 <__aeabi_dsub>
 800ef08:	4a96      	ldr	r2, [pc, #600]	; (800f164 <_dtoa_r+0x334>)
 800ef0a:	4b97      	ldr	r3, [pc, #604]	; (800f168 <_dtoa_r+0x338>)
 800ef0c:	f7f2 fbae 	bl	800166c <__aeabi_dmul>
 800ef10:	4a96      	ldr	r2, [pc, #600]	; (800f16c <_dtoa_r+0x33c>)
 800ef12:	4b97      	ldr	r3, [pc, #604]	; (800f170 <_dtoa_r+0x340>)
 800ef14:	f7f1 fc50 	bl	80007b8 <__aeabi_dadd>
 800ef18:	0004      	movs	r4, r0
 800ef1a:	0038      	movs	r0, r7
 800ef1c:	000d      	movs	r5, r1
 800ef1e:	f7f3 fa3d 	bl	800239c <__aeabi_i2d>
 800ef22:	4a94      	ldr	r2, [pc, #592]	; (800f174 <_dtoa_r+0x344>)
 800ef24:	4b94      	ldr	r3, [pc, #592]	; (800f178 <_dtoa_r+0x348>)
 800ef26:	f7f2 fba1 	bl	800166c <__aeabi_dmul>
 800ef2a:	0002      	movs	r2, r0
 800ef2c:	000b      	movs	r3, r1
 800ef2e:	0020      	movs	r0, r4
 800ef30:	0029      	movs	r1, r5
 800ef32:	f7f1 fc41 	bl	80007b8 <__aeabi_dadd>
 800ef36:	0004      	movs	r4, r0
 800ef38:	000d      	movs	r5, r1
 800ef3a:	f7f3 f9f9 	bl	8002330 <__aeabi_d2iz>
 800ef3e:	2200      	movs	r2, #0
 800ef40:	9003      	str	r0, [sp, #12]
 800ef42:	2300      	movs	r3, #0
 800ef44:	0020      	movs	r0, r4
 800ef46:	0029      	movs	r1, r5
 800ef48:	f7f1 fa84 	bl	8000454 <__aeabi_dcmplt>
 800ef4c:	2800      	cmp	r0, #0
 800ef4e:	d00b      	beq.n	800ef68 <_dtoa_r+0x138>
 800ef50:	9803      	ldr	r0, [sp, #12]
 800ef52:	f7f3 fa23 	bl	800239c <__aeabi_i2d>
 800ef56:	002b      	movs	r3, r5
 800ef58:	0022      	movs	r2, r4
 800ef5a:	f7f1 fa75 	bl	8000448 <__aeabi_dcmpeq>
 800ef5e:	4243      	negs	r3, r0
 800ef60:	4158      	adcs	r0, r3
 800ef62:	9b03      	ldr	r3, [sp, #12]
 800ef64:	1a1b      	subs	r3, r3, r0
 800ef66:	9303      	str	r3, [sp, #12]
 800ef68:	2301      	movs	r3, #1
 800ef6a:	9316      	str	r3, [sp, #88]	; 0x58
 800ef6c:	9b03      	ldr	r3, [sp, #12]
 800ef6e:	2b16      	cmp	r3, #22
 800ef70:	d810      	bhi.n	800ef94 <_dtoa_r+0x164>
 800ef72:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ef74:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ef76:	9a03      	ldr	r2, [sp, #12]
 800ef78:	4b80      	ldr	r3, [pc, #512]	; (800f17c <_dtoa_r+0x34c>)
 800ef7a:	00d2      	lsls	r2, r2, #3
 800ef7c:	189b      	adds	r3, r3, r2
 800ef7e:	681a      	ldr	r2, [r3, #0]
 800ef80:	685b      	ldr	r3, [r3, #4]
 800ef82:	f7f1 fa67 	bl	8000454 <__aeabi_dcmplt>
 800ef86:	2800      	cmp	r0, #0
 800ef88:	d047      	beq.n	800f01a <_dtoa_r+0x1ea>
 800ef8a:	9b03      	ldr	r3, [sp, #12]
 800ef8c:	3b01      	subs	r3, #1
 800ef8e:	9303      	str	r3, [sp, #12]
 800ef90:	2300      	movs	r3, #0
 800ef92:	9316      	str	r3, [sp, #88]	; 0x58
 800ef94:	2200      	movs	r2, #0
 800ef96:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ef98:	920a      	str	r2, [sp, #40]	; 0x28
 800ef9a:	1bdb      	subs	r3, r3, r7
 800ef9c:	1e5a      	subs	r2, r3, #1
 800ef9e:	d53e      	bpl.n	800f01e <_dtoa_r+0x1ee>
 800efa0:	2201      	movs	r2, #1
 800efa2:	1ad3      	subs	r3, r2, r3
 800efa4:	930a      	str	r3, [sp, #40]	; 0x28
 800efa6:	2300      	movs	r3, #0
 800efa8:	930c      	str	r3, [sp, #48]	; 0x30
 800efaa:	9b03      	ldr	r3, [sp, #12]
 800efac:	2b00      	cmp	r3, #0
 800efae:	db38      	blt.n	800f022 <_dtoa_r+0x1f2>
 800efb0:	9a03      	ldr	r2, [sp, #12]
 800efb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800efb4:	4694      	mov	ip, r2
 800efb6:	4463      	add	r3, ip
 800efb8:	930c      	str	r3, [sp, #48]	; 0x30
 800efba:	2300      	movs	r3, #0
 800efbc:	9213      	str	r2, [sp, #76]	; 0x4c
 800efbe:	930d      	str	r3, [sp, #52]	; 0x34
 800efc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800efc2:	2401      	movs	r4, #1
 800efc4:	2b09      	cmp	r3, #9
 800efc6:	d867      	bhi.n	800f098 <_dtoa_r+0x268>
 800efc8:	2b05      	cmp	r3, #5
 800efca:	dd02      	ble.n	800efd2 <_dtoa_r+0x1a2>
 800efcc:	2400      	movs	r4, #0
 800efce:	3b04      	subs	r3, #4
 800efd0:	9322      	str	r3, [sp, #136]	; 0x88
 800efd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800efd4:	1e98      	subs	r0, r3, #2
 800efd6:	2803      	cmp	r0, #3
 800efd8:	d867      	bhi.n	800f0aa <_dtoa_r+0x27a>
 800efda:	f7f1 f89b 	bl	8000114 <__gnu_thumb1_case_uqi>
 800efde:	3a2b      	.short	0x3a2b
 800efe0:	5b38      	.short	0x5b38
 800efe2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800efe4:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800efe6:	18f6      	adds	r6, r6, r3
 800efe8:	4b65      	ldr	r3, [pc, #404]	; (800f180 <_dtoa_r+0x350>)
 800efea:	18f2      	adds	r2, r6, r3
 800efec:	2a20      	cmp	r2, #32
 800efee:	dd0f      	ble.n	800f010 <_dtoa_r+0x1e0>
 800eff0:	2340      	movs	r3, #64	; 0x40
 800eff2:	1a9b      	subs	r3, r3, r2
 800eff4:	409f      	lsls	r7, r3
 800eff6:	4b63      	ldr	r3, [pc, #396]	; (800f184 <_dtoa_r+0x354>)
 800eff8:	0038      	movs	r0, r7
 800effa:	18f3      	adds	r3, r6, r3
 800effc:	40dc      	lsrs	r4, r3
 800effe:	4320      	orrs	r0, r4
 800f000:	f7f3 f9fc 	bl	80023fc <__aeabi_ui2d>
 800f004:	2201      	movs	r2, #1
 800f006:	4b60      	ldr	r3, [pc, #384]	; (800f188 <_dtoa_r+0x358>)
 800f008:	1e77      	subs	r7, r6, #1
 800f00a:	18cb      	adds	r3, r1, r3
 800f00c:	9217      	str	r2, [sp, #92]	; 0x5c
 800f00e:	e776      	b.n	800eefe <_dtoa_r+0xce>
 800f010:	2320      	movs	r3, #32
 800f012:	0020      	movs	r0, r4
 800f014:	1a9b      	subs	r3, r3, r2
 800f016:	4098      	lsls	r0, r3
 800f018:	e7f2      	b.n	800f000 <_dtoa_r+0x1d0>
 800f01a:	9016      	str	r0, [sp, #88]	; 0x58
 800f01c:	e7ba      	b.n	800ef94 <_dtoa_r+0x164>
 800f01e:	920c      	str	r2, [sp, #48]	; 0x30
 800f020:	e7c3      	b.n	800efaa <_dtoa_r+0x17a>
 800f022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f024:	9a03      	ldr	r2, [sp, #12]
 800f026:	1a9b      	subs	r3, r3, r2
 800f028:	930a      	str	r3, [sp, #40]	; 0x28
 800f02a:	4253      	negs	r3, r2
 800f02c:	930d      	str	r3, [sp, #52]	; 0x34
 800f02e:	2300      	movs	r3, #0
 800f030:	9313      	str	r3, [sp, #76]	; 0x4c
 800f032:	e7c5      	b.n	800efc0 <_dtoa_r+0x190>
 800f034:	2300      	movs	r3, #0
 800f036:	930f      	str	r3, [sp, #60]	; 0x3c
 800f038:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f03a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f03c:	9307      	str	r3, [sp, #28]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	dc13      	bgt.n	800f06a <_dtoa_r+0x23a>
 800f042:	2301      	movs	r3, #1
 800f044:	001a      	movs	r2, r3
 800f046:	930b      	str	r3, [sp, #44]	; 0x2c
 800f048:	9307      	str	r3, [sp, #28]
 800f04a:	9223      	str	r2, [sp, #140]	; 0x8c
 800f04c:	e00d      	b.n	800f06a <_dtoa_r+0x23a>
 800f04e:	2301      	movs	r3, #1
 800f050:	e7f1      	b.n	800f036 <_dtoa_r+0x206>
 800f052:	2300      	movs	r3, #0
 800f054:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800f056:	930f      	str	r3, [sp, #60]	; 0x3c
 800f058:	4694      	mov	ip, r2
 800f05a:	9b03      	ldr	r3, [sp, #12]
 800f05c:	4463      	add	r3, ip
 800f05e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f060:	3301      	adds	r3, #1
 800f062:	9307      	str	r3, [sp, #28]
 800f064:	2b00      	cmp	r3, #0
 800f066:	dc00      	bgt.n	800f06a <_dtoa_r+0x23a>
 800f068:	2301      	movs	r3, #1
 800f06a:	2100      	movs	r1, #0
 800f06c:	2204      	movs	r2, #4
 800f06e:	0010      	movs	r0, r2
 800f070:	3014      	adds	r0, #20
 800f072:	4298      	cmp	r0, r3
 800f074:	d91d      	bls.n	800f0b2 <_dtoa_r+0x282>
 800f076:	9b04      	ldr	r3, [sp, #16]
 800f078:	0018      	movs	r0, r3
 800f07a:	63d9      	str	r1, [r3, #60]	; 0x3c
 800f07c:	f7fc fb18 	bl	800b6b0 <_Balloc>
 800f080:	9006      	str	r0, [sp, #24]
 800f082:	2800      	cmp	r0, #0
 800f084:	d118      	bne.n	800f0b8 <_dtoa_r+0x288>
 800f086:	21b0      	movs	r1, #176	; 0xb0
 800f088:	4b40      	ldr	r3, [pc, #256]	; (800f18c <_dtoa_r+0x35c>)
 800f08a:	4841      	ldr	r0, [pc, #260]	; (800f190 <_dtoa_r+0x360>)
 800f08c:	9a06      	ldr	r2, [sp, #24]
 800f08e:	31ff      	adds	r1, #255	; 0xff
 800f090:	f7ff fdd2 	bl	800ec38 <__assert_func>
 800f094:	2301      	movs	r3, #1
 800f096:	e7dd      	b.n	800f054 <_dtoa_r+0x224>
 800f098:	2300      	movs	r3, #0
 800f09a:	940f      	str	r4, [sp, #60]	; 0x3c
 800f09c:	9322      	str	r3, [sp, #136]	; 0x88
 800f09e:	3b01      	subs	r3, #1
 800f0a0:	930b      	str	r3, [sp, #44]	; 0x2c
 800f0a2:	9307      	str	r3, [sp, #28]
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	3313      	adds	r3, #19
 800f0a8:	e7cf      	b.n	800f04a <_dtoa_r+0x21a>
 800f0aa:	2301      	movs	r3, #1
 800f0ac:	930f      	str	r3, [sp, #60]	; 0x3c
 800f0ae:	3b02      	subs	r3, #2
 800f0b0:	e7f6      	b.n	800f0a0 <_dtoa_r+0x270>
 800f0b2:	3101      	adds	r1, #1
 800f0b4:	0052      	lsls	r2, r2, #1
 800f0b6:	e7da      	b.n	800f06e <_dtoa_r+0x23e>
 800f0b8:	9b04      	ldr	r3, [sp, #16]
 800f0ba:	9a06      	ldr	r2, [sp, #24]
 800f0bc:	639a      	str	r2, [r3, #56]	; 0x38
 800f0be:	9b07      	ldr	r3, [sp, #28]
 800f0c0:	2b0e      	cmp	r3, #14
 800f0c2:	d900      	bls.n	800f0c6 <_dtoa_r+0x296>
 800f0c4:	e0e3      	b.n	800f28e <_dtoa_r+0x45e>
 800f0c6:	2c00      	cmp	r4, #0
 800f0c8:	d100      	bne.n	800f0cc <_dtoa_r+0x29c>
 800f0ca:	e0e0      	b.n	800f28e <_dtoa_r+0x45e>
 800f0cc:	9b03      	ldr	r3, [sp, #12]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	dd62      	ble.n	800f198 <_dtoa_r+0x368>
 800f0d2:	210f      	movs	r1, #15
 800f0d4:	9a03      	ldr	r2, [sp, #12]
 800f0d6:	4b29      	ldr	r3, [pc, #164]	; (800f17c <_dtoa_r+0x34c>)
 800f0d8:	400a      	ands	r2, r1
 800f0da:	00d2      	lsls	r2, r2, #3
 800f0dc:	189b      	adds	r3, r3, r2
 800f0de:	681e      	ldr	r6, [r3, #0]
 800f0e0:	685f      	ldr	r7, [r3, #4]
 800f0e2:	9b03      	ldr	r3, [sp, #12]
 800f0e4:	2402      	movs	r4, #2
 800f0e6:	111d      	asrs	r5, r3, #4
 800f0e8:	05db      	lsls	r3, r3, #23
 800f0ea:	d50a      	bpl.n	800f102 <_dtoa_r+0x2d2>
 800f0ec:	4b29      	ldr	r3, [pc, #164]	; (800f194 <_dtoa_r+0x364>)
 800f0ee:	400d      	ands	r5, r1
 800f0f0:	6a1a      	ldr	r2, [r3, #32]
 800f0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0f4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f0f6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f0f8:	f7f1 febe 	bl	8000e78 <__aeabi_ddiv>
 800f0fc:	9008      	str	r0, [sp, #32]
 800f0fe:	9109      	str	r1, [sp, #36]	; 0x24
 800f100:	3401      	adds	r4, #1
 800f102:	4b24      	ldr	r3, [pc, #144]	; (800f194 <_dtoa_r+0x364>)
 800f104:	930e      	str	r3, [sp, #56]	; 0x38
 800f106:	2d00      	cmp	r5, #0
 800f108:	d108      	bne.n	800f11c <_dtoa_r+0x2ec>
 800f10a:	9808      	ldr	r0, [sp, #32]
 800f10c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f10e:	0032      	movs	r2, r6
 800f110:	003b      	movs	r3, r7
 800f112:	f7f1 feb1 	bl	8000e78 <__aeabi_ddiv>
 800f116:	9008      	str	r0, [sp, #32]
 800f118:	9109      	str	r1, [sp, #36]	; 0x24
 800f11a:	e058      	b.n	800f1ce <_dtoa_r+0x39e>
 800f11c:	2301      	movs	r3, #1
 800f11e:	421d      	tst	r5, r3
 800f120:	d009      	beq.n	800f136 <_dtoa_r+0x306>
 800f122:	18e4      	adds	r4, r4, r3
 800f124:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f126:	0030      	movs	r0, r6
 800f128:	681a      	ldr	r2, [r3, #0]
 800f12a:	685b      	ldr	r3, [r3, #4]
 800f12c:	0039      	movs	r1, r7
 800f12e:	f7f2 fa9d 	bl	800166c <__aeabi_dmul>
 800f132:	0006      	movs	r6, r0
 800f134:	000f      	movs	r7, r1
 800f136:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f138:	106d      	asrs	r5, r5, #1
 800f13a:	3308      	adds	r3, #8
 800f13c:	e7e2      	b.n	800f104 <_dtoa_r+0x2d4>
 800f13e:	46c0      	nop			; (mov r8, r8)
 800f140:	7ff00000 	.word	0x7ff00000
 800f144:	0000270f 	.word	0x0000270f
 800f148:	0801347d 	.word	0x0801347d
 800f14c:	08013480 	.word	0x08013480
 800f150:	080133ee 	.word	0x080133ee
 800f154:	080133ef 	.word	0x080133ef
 800f158:	3ff00000 	.word	0x3ff00000
 800f15c:	fffffc01 	.word	0xfffffc01
 800f160:	3ff80000 	.word	0x3ff80000
 800f164:	636f4361 	.word	0x636f4361
 800f168:	3fd287a7 	.word	0x3fd287a7
 800f16c:	8b60c8b3 	.word	0x8b60c8b3
 800f170:	3fc68a28 	.word	0x3fc68a28
 800f174:	509f79fb 	.word	0x509f79fb
 800f178:	3fd34413 	.word	0x3fd34413
 800f17c:	080132e8 	.word	0x080132e8
 800f180:	00000432 	.word	0x00000432
 800f184:	00000412 	.word	0x00000412
 800f188:	fe100000 	.word	0xfe100000
 800f18c:	080131f1 	.word	0x080131f1
 800f190:	08013481 	.word	0x08013481
 800f194:	080132c0 	.word	0x080132c0
 800f198:	9b03      	ldr	r3, [sp, #12]
 800f19a:	2402      	movs	r4, #2
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d016      	beq.n	800f1ce <_dtoa_r+0x39e>
 800f1a0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f1a2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f1a4:	220f      	movs	r2, #15
 800f1a6:	425d      	negs	r5, r3
 800f1a8:	402a      	ands	r2, r5
 800f1aa:	4bdd      	ldr	r3, [pc, #884]	; (800f520 <_dtoa_r+0x6f0>)
 800f1ac:	00d2      	lsls	r2, r2, #3
 800f1ae:	189b      	adds	r3, r3, r2
 800f1b0:	681a      	ldr	r2, [r3, #0]
 800f1b2:	685b      	ldr	r3, [r3, #4]
 800f1b4:	f7f2 fa5a 	bl	800166c <__aeabi_dmul>
 800f1b8:	2701      	movs	r7, #1
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	9008      	str	r0, [sp, #32]
 800f1be:	9109      	str	r1, [sp, #36]	; 0x24
 800f1c0:	4ed8      	ldr	r6, [pc, #864]	; (800f524 <_dtoa_r+0x6f4>)
 800f1c2:	112d      	asrs	r5, r5, #4
 800f1c4:	2d00      	cmp	r5, #0
 800f1c6:	d000      	beq.n	800f1ca <_dtoa_r+0x39a>
 800f1c8:	e091      	b.n	800f2ee <_dtoa_r+0x4be>
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d1a3      	bne.n	800f116 <_dtoa_r+0x2e6>
 800f1ce:	9e08      	ldr	r6, [sp, #32]
 800f1d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f1d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d100      	bne.n	800f1da <_dtoa_r+0x3aa>
 800f1d8:	e094      	b.n	800f304 <_dtoa_r+0x4d4>
 800f1da:	2200      	movs	r2, #0
 800f1dc:	0030      	movs	r0, r6
 800f1de:	0039      	movs	r1, r7
 800f1e0:	4bd1      	ldr	r3, [pc, #836]	; (800f528 <_dtoa_r+0x6f8>)
 800f1e2:	f7f1 f937 	bl	8000454 <__aeabi_dcmplt>
 800f1e6:	2800      	cmp	r0, #0
 800f1e8:	d100      	bne.n	800f1ec <_dtoa_r+0x3bc>
 800f1ea:	e08b      	b.n	800f304 <_dtoa_r+0x4d4>
 800f1ec:	9b07      	ldr	r3, [sp, #28]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d100      	bne.n	800f1f4 <_dtoa_r+0x3c4>
 800f1f2:	e087      	b.n	800f304 <_dtoa_r+0x4d4>
 800f1f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	dd45      	ble.n	800f286 <_dtoa_r+0x456>
 800f1fa:	9b03      	ldr	r3, [sp, #12]
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	3b01      	subs	r3, #1
 800f200:	930e      	str	r3, [sp, #56]	; 0x38
 800f202:	0030      	movs	r0, r6
 800f204:	4bc9      	ldr	r3, [pc, #804]	; (800f52c <_dtoa_r+0x6fc>)
 800f206:	0039      	movs	r1, r7
 800f208:	f7f2 fa30 	bl	800166c <__aeabi_dmul>
 800f20c:	9008      	str	r0, [sp, #32]
 800f20e:	9109      	str	r1, [sp, #36]	; 0x24
 800f210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f212:	3401      	adds	r4, #1
 800f214:	0020      	movs	r0, r4
 800f216:	9e08      	ldr	r6, [sp, #32]
 800f218:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f21a:	9312      	str	r3, [sp, #72]	; 0x48
 800f21c:	f7f3 f8be 	bl	800239c <__aeabi_i2d>
 800f220:	0032      	movs	r2, r6
 800f222:	003b      	movs	r3, r7
 800f224:	f7f2 fa22 	bl	800166c <__aeabi_dmul>
 800f228:	2200      	movs	r2, #0
 800f22a:	4bc1      	ldr	r3, [pc, #772]	; (800f530 <_dtoa_r+0x700>)
 800f22c:	f7f1 fac4 	bl	80007b8 <__aeabi_dadd>
 800f230:	4ac0      	ldr	r2, [pc, #768]	; (800f534 <_dtoa_r+0x704>)
 800f232:	9014      	str	r0, [sp, #80]	; 0x50
 800f234:	9115      	str	r1, [sp, #84]	; 0x54
 800f236:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f238:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800f23a:	4694      	mov	ip, r2
 800f23c:	9308      	str	r3, [sp, #32]
 800f23e:	9409      	str	r4, [sp, #36]	; 0x24
 800f240:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f242:	4463      	add	r3, ip
 800f244:	9318      	str	r3, [sp, #96]	; 0x60
 800f246:	9309      	str	r3, [sp, #36]	; 0x24
 800f248:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d15e      	bne.n	800f30c <_dtoa_r+0x4dc>
 800f24e:	2200      	movs	r2, #0
 800f250:	4bb9      	ldr	r3, [pc, #740]	; (800f538 <_dtoa_r+0x708>)
 800f252:	0030      	movs	r0, r6
 800f254:	0039      	movs	r1, r7
 800f256:	f7f2 fccb 	bl	8001bf0 <__aeabi_dsub>
 800f25a:	9a08      	ldr	r2, [sp, #32]
 800f25c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f25e:	0004      	movs	r4, r0
 800f260:	000d      	movs	r5, r1
 800f262:	f7f1 f90b 	bl	800047c <__aeabi_dcmpgt>
 800f266:	2800      	cmp	r0, #0
 800f268:	d000      	beq.n	800f26c <_dtoa_r+0x43c>
 800f26a:	e2b3      	b.n	800f7d4 <_dtoa_r+0x9a4>
 800f26c:	48b3      	ldr	r0, [pc, #716]	; (800f53c <_dtoa_r+0x70c>)
 800f26e:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f270:	4684      	mov	ip, r0
 800f272:	4461      	add	r1, ip
 800f274:	000b      	movs	r3, r1
 800f276:	0020      	movs	r0, r4
 800f278:	0029      	movs	r1, r5
 800f27a:	9a08      	ldr	r2, [sp, #32]
 800f27c:	f7f1 f8ea 	bl	8000454 <__aeabi_dcmplt>
 800f280:	2800      	cmp	r0, #0
 800f282:	d000      	beq.n	800f286 <_dtoa_r+0x456>
 800f284:	e2a3      	b.n	800f7ce <_dtoa_r+0x99e>
 800f286:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f288:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800f28a:	9308      	str	r3, [sp, #32]
 800f28c:	9409      	str	r4, [sp, #36]	; 0x24
 800f28e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f290:	2b00      	cmp	r3, #0
 800f292:	da00      	bge.n	800f296 <_dtoa_r+0x466>
 800f294:	e179      	b.n	800f58a <_dtoa_r+0x75a>
 800f296:	9a03      	ldr	r2, [sp, #12]
 800f298:	2a0e      	cmp	r2, #14
 800f29a:	dd00      	ble.n	800f29e <_dtoa_r+0x46e>
 800f29c:	e175      	b.n	800f58a <_dtoa_r+0x75a>
 800f29e:	4ba0      	ldr	r3, [pc, #640]	; (800f520 <_dtoa_r+0x6f0>)
 800f2a0:	00d2      	lsls	r2, r2, #3
 800f2a2:	189b      	adds	r3, r3, r2
 800f2a4:	681e      	ldr	r6, [r3, #0]
 800f2a6:	685f      	ldr	r7, [r3, #4]
 800f2a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	db00      	blt.n	800f2b0 <_dtoa_r+0x480>
 800f2ae:	e0e5      	b.n	800f47c <_dtoa_r+0x64c>
 800f2b0:	9b07      	ldr	r3, [sp, #28]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	dd00      	ble.n	800f2b8 <_dtoa_r+0x488>
 800f2b6:	e0e1      	b.n	800f47c <_dtoa_r+0x64c>
 800f2b8:	d000      	beq.n	800f2bc <_dtoa_r+0x48c>
 800f2ba:	e288      	b.n	800f7ce <_dtoa_r+0x99e>
 800f2bc:	2200      	movs	r2, #0
 800f2be:	0030      	movs	r0, r6
 800f2c0:	0039      	movs	r1, r7
 800f2c2:	4b9d      	ldr	r3, [pc, #628]	; (800f538 <_dtoa_r+0x708>)
 800f2c4:	f7f2 f9d2 	bl	800166c <__aeabi_dmul>
 800f2c8:	9a08      	ldr	r2, [sp, #32]
 800f2ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2cc:	f7f1 f8e0 	bl	8000490 <__aeabi_dcmpge>
 800f2d0:	9e07      	ldr	r6, [sp, #28]
 800f2d2:	0037      	movs	r7, r6
 800f2d4:	2800      	cmp	r0, #0
 800f2d6:	d000      	beq.n	800f2da <_dtoa_r+0x4aa>
 800f2d8:	e25f      	b.n	800f79a <_dtoa_r+0x96a>
 800f2da:	9b06      	ldr	r3, [sp, #24]
 800f2dc:	9a06      	ldr	r2, [sp, #24]
 800f2de:	3301      	adds	r3, #1
 800f2e0:	9308      	str	r3, [sp, #32]
 800f2e2:	2331      	movs	r3, #49	; 0x31
 800f2e4:	7013      	strb	r3, [r2, #0]
 800f2e6:	9b03      	ldr	r3, [sp, #12]
 800f2e8:	3301      	adds	r3, #1
 800f2ea:	9303      	str	r3, [sp, #12]
 800f2ec:	e25a      	b.n	800f7a4 <_dtoa_r+0x974>
 800f2ee:	423d      	tst	r5, r7
 800f2f0:	d005      	beq.n	800f2fe <_dtoa_r+0x4ce>
 800f2f2:	6832      	ldr	r2, [r6, #0]
 800f2f4:	6873      	ldr	r3, [r6, #4]
 800f2f6:	f7f2 f9b9 	bl	800166c <__aeabi_dmul>
 800f2fa:	003b      	movs	r3, r7
 800f2fc:	3401      	adds	r4, #1
 800f2fe:	106d      	asrs	r5, r5, #1
 800f300:	3608      	adds	r6, #8
 800f302:	e75f      	b.n	800f1c4 <_dtoa_r+0x394>
 800f304:	9b03      	ldr	r3, [sp, #12]
 800f306:	930e      	str	r3, [sp, #56]	; 0x38
 800f308:	9b07      	ldr	r3, [sp, #28]
 800f30a:	e783      	b.n	800f214 <_dtoa_r+0x3e4>
 800f30c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f30e:	4b84      	ldr	r3, [pc, #528]	; (800f520 <_dtoa_r+0x6f0>)
 800f310:	3a01      	subs	r2, #1
 800f312:	00d2      	lsls	r2, r2, #3
 800f314:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f316:	189b      	adds	r3, r3, r2
 800f318:	9c08      	ldr	r4, [sp, #32]
 800f31a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f31c:	681a      	ldr	r2, [r3, #0]
 800f31e:	685b      	ldr	r3, [r3, #4]
 800f320:	2900      	cmp	r1, #0
 800f322:	d051      	beq.n	800f3c8 <_dtoa_r+0x598>
 800f324:	2000      	movs	r0, #0
 800f326:	4986      	ldr	r1, [pc, #536]	; (800f540 <_dtoa_r+0x710>)
 800f328:	f7f1 fda6 	bl	8000e78 <__aeabi_ddiv>
 800f32c:	0022      	movs	r2, r4
 800f32e:	002b      	movs	r3, r5
 800f330:	f7f2 fc5e 	bl	8001bf0 <__aeabi_dsub>
 800f334:	9a06      	ldr	r2, [sp, #24]
 800f336:	0004      	movs	r4, r0
 800f338:	4694      	mov	ip, r2
 800f33a:	000d      	movs	r5, r1
 800f33c:	9b06      	ldr	r3, [sp, #24]
 800f33e:	9314      	str	r3, [sp, #80]	; 0x50
 800f340:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f342:	4463      	add	r3, ip
 800f344:	9318      	str	r3, [sp, #96]	; 0x60
 800f346:	0039      	movs	r1, r7
 800f348:	0030      	movs	r0, r6
 800f34a:	f7f2 fff1 	bl	8002330 <__aeabi_d2iz>
 800f34e:	9012      	str	r0, [sp, #72]	; 0x48
 800f350:	f7f3 f824 	bl	800239c <__aeabi_i2d>
 800f354:	0002      	movs	r2, r0
 800f356:	000b      	movs	r3, r1
 800f358:	0030      	movs	r0, r6
 800f35a:	0039      	movs	r1, r7
 800f35c:	f7f2 fc48 	bl	8001bf0 <__aeabi_dsub>
 800f360:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f362:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f364:	3301      	adds	r3, #1
 800f366:	9308      	str	r3, [sp, #32]
 800f368:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f36a:	0006      	movs	r6, r0
 800f36c:	3330      	adds	r3, #48	; 0x30
 800f36e:	7013      	strb	r3, [r2, #0]
 800f370:	0022      	movs	r2, r4
 800f372:	002b      	movs	r3, r5
 800f374:	000f      	movs	r7, r1
 800f376:	f7f1 f86d 	bl	8000454 <__aeabi_dcmplt>
 800f37a:	2800      	cmp	r0, #0
 800f37c:	d174      	bne.n	800f468 <_dtoa_r+0x638>
 800f37e:	0032      	movs	r2, r6
 800f380:	003b      	movs	r3, r7
 800f382:	2000      	movs	r0, #0
 800f384:	4968      	ldr	r1, [pc, #416]	; (800f528 <_dtoa_r+0x6f8>)
 800f386:	f7f2 fc33 	bl	8001bf0 <__aeabi_dsub>
 800f38a:	0022      	movs	r2, r4
 800f38c:	002b      	movs	r3, r5
 800f38e:	f7f1 f861 	bl	8000454 <__aeabi_dcmplt>
 800f392:	2800      	cmp	r0, #0
 800f394:	d000      	beq.n	800f398 <_dtoa_r+0x568>
 800f396:	e0d7      	b.n	800f548 <_dtoa_r+0x718>
 800f398:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f39a:	9a08      	ldr	r2, [sp, #32]
 800f39c:	4293      	cmp	r3, r2
 800f39e:	d100      	bne.n	800f3a2 <_dtoa_r+0x572>
 800f3a0:	e771      	b.n	800f286 <_dtoa_r+0x456>
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	0020      	movs	r0, r4
 800f3a6:	0029      	movs	r1, r5
 800f3a8:	4b60      	ldr	r3, [pc, #384]	; (800f52c <_dtoa_r+0x6fc>)
 800f3aa:	f7f2 f95f 	bl	800166c <__aeabi_dmul>
 800f3ae:	4b5f      	ldr	r3, [pc, #380]	; (800f52c <_dtoa_r+0x6fc>)
 800f3b0:	0004      	movs	r4, r0
 800f3b2:	000d      	movs	r5, r1
 800f3b4:	0030      	movs	r0, r6
 800f3b6:	0039      	movs	r1, r7
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	f7f2 f957 	bl	800166c <__aeabi_dmul>
 800f3be:	9b08      	ldr	r3, [sp, #32]
 800f3c0:	0006      	movs	r6, r0
 800f3c2:	000f      	movs	r7, r1
 800f3c4:	9314      	str	r3, [sp, #80]	; 0x50
 800f3c6:	e7be      	b.n	800f346 <_dtoa_r+0x516>
 800f3c8:	0020      	movs	r0, r4
 800f3ca:	0029      	movs	r1, r5
 800f3cc:	f7f2 f94e 	bl	800166c <__aeabi_dmul>
 800f3d0:	9a06      	ldr	r2, [sp, #24]
 800f3d2:	9b06      	ldr	r3, [sp, #24]
 800f3d4:	4694      	mov	ip, r2
 800f3d6:	9308      	str	r3, [sp, #32]
 800f3d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f3da:	9014      	str	r0, [sp, #80]	; 0x50
 800f3dc:	9115      	str	r1, [sp, #84]	; 0x54
 800f3de:	4463      	add	r3, ip
 800f3e0:	9319      	str	r3, [sp, #100]	; 0x64
 800f3e2:	0030      	movs	r0, r6
 800f3e4:	0039      	movs	r1, r7
 800f3e6:	f7f2 ffa3 	bl	8002330 <__aeabi_d2iz>
 800f3ea:	9018      	str	r0, [sp, #96]	; 0x60
 800f3ec:	f7f2 ffd6 	bl	800239c <__aeabi_i2d>
 800f3f0:	0002      	movs	r2, r0
 800f3f2:	000b      	movs	r3, r1
 800f3f4:	0030      	movs	r0, r6
 800f3f6:	0039      	movs	r1, r7
 800f3f8:	f7f2 fbfa 	bl	8001bf0 <__aeabi_dsub>
 800f3fc:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800f3fe:	9b08      	ldr	r3, [sp, #32]
 800f400:	3630      	adds	r6, #48	; 0x30
 800f402:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f404:	701e      	strb	r6, [r3, #0]
 800f406:	3301      	adds	r3, #1
 800f408:	0004      	movs	r4, r0
 800f40a:	000d      	movs	r5, r1
 800f40c:	9308      	str	r3, [sp, #32]
 800f40e:	4293      	cmp	r3, r2
 800f410:	d12d      	bne.n	800f46e <_dtoa_r+0x63e>
 800f412:	9814      	ldr	r0, [sp, #80]	; 0x50
 800f414:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f416:	9a06      	ldr	r2, [sp, #24]
 800f418:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f41a:	4694      	mov	ip, r2
 800f41c:	4463      	add	r3, ip
 800f41e:	2200      	movs	r2, #0
 800f420:	9308      	str	r3, [sp, #32]
 800f422:	4b47      	ldr	r3, [pc, #284]	; (800f540 <_dtoa_r+0x710>)
 800f424:	f7f1 f9c8 	bl	80007b8 <__aeabi_dadd>
 800f428:	0002      	movs	r2, r0
 800f42a:	000b      	movs	r3, r1
 800f42c:	0020      	movs	r0, r4
 800f42e:	0029      	movs	r1, r5
 800f430:	f7f1 f824 	bl	800047c <__aeabi_dcmpgt>
 800f434:	2800      	cmp	r0, #0
 800f436:	d000      	beq.n	800f43a <_dtoa_r+0x60a>
 800f438:	e086      	b.n	800f548 <_dtoa_r+0x718>
 800f43a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f43c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f43e:	2000      	movs	r0, #0
 800f440:	493f      	ldr	r1, [pc, #252]	; (800f540 <_dtoa_r+0x710>)
 800f442:	f7f2 fbd5 	bl	8001bf0 <__aeabi_dsub>
 800f446:	0002      	movs	r2, r0
 800f448:	000b      	movs	r3, r1
 800f44a:	0020      	movs	r0, r4
 800f44c:	0029      	movs	r1, r5
 800f44e:	f7f1 f801 	bl	8000454 <__aeabi_dcmplt>
 800f452:	2800      	cmp	r0, #0
 800f454:	d100      	bne.n	800f458 <_dtoa_r+0x628>
 800f456:	e716      	b.n	800f286 <_dtoa_r+0x456>
 800f458:	9b08      	ldr	r3, [sp, #32]
 800f45a:	001a      	movs	r2, r3
 800f45c:	3a01      	subs	r2, #1
 800f45e:	9208      	str	r2, [sp, #32]
 800f460:	7812      	ldrb	r2, [r2, #0]
 800f462:	2a30      	cmp	r2, #48	; 0x30
 800f464:	d0f8      	beq.n	800f458 <_dtoa_r+0x628>
 800f466:	9308      	str	r3, [sp, #32]
 800f468:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f46a:	9303      	str	r3, [sp, #12]
 800f46c:	e046      	b.n	800f4fc <_dtoa_r+0x6cc>
 800f46e:	2200      	movs	r2, #0
 800f470:	4b2e      	ldr	r3, [pc, #184]	; (800f52c <_dtoa_r+0x6fc>)
 800f472:	f7f2 f8fb 	bl	800166c <__aeabi_dmul>
 800f476:	0006      	movs	r6, r0
 800f478:	000f      	movs	r7, r1
 800f47a:	e7b2      	b.n	800f3e2 <_dtoa_r+0x5b2>
 800f47c:	9b06      	ldr	r3, [sp, #24]
 800f47e:	9a06      	ldr	r2, [sp, #24]
 800f480:	930a      	str	r3, [sp, #40]	; 0x28
 800f482:	9b07      	ldr	r3, [sp, #28]
 800f484:	9c08      	ldr	r4, [sp, #32]
 800f486:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f488:	3b01      	subs	r3, #1
 800f48a:	189b      	adds	r3, r3, r2
 800f48c:	930b      	str	r3, [sp, #44]	; 0x2c
 800f48e:	0032      	movs	r2, r6
 800f490:	003b      	movs	r3, r7
 800f492:	0020      	movs	r0, r4
 800f494:	0029      	movs	r1, r5
 800f496:	f7f1 fcef 	bl	8000e78 <__aeabi_ddiv>
 800f49a:	f7f2 ff49 	bl	8002330 <__aeabi_d2iz>
 800f49e:	9007      	str	r0, [sp, #28]
 800f4a0:	f7f2 ff7c 	bl	800239c <__aeabi_i2d>
 800f4a4:	0032      	movs	r2, r6
 800f4a6:	003b      	movs	r3, r7
 800f4a8:	f7f2 f8e0 	bl	800166c <__aeabi_dmul>
 800f4ac:	0002      	movs	r2, r0
 800f4ae:	000b      	movs	r3, r1
 800f4b0:	0020      	movs	r0, r4
 800f4b2:	0029      	movs	r1, r5
 800f4b4:	f7f2 fb9c 	bl	8001bf0 <__aeabi_dsub>
 800f4b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4ba:	001a      	movs	r2, r3
 800f4bc:	3201      	adds	r2, #1
 800f4be:	920a      	str	r2, [sp, #40]	; 0x28
 800f4c0:	9208      	str	r2, [sp, #32]
 800f4c2:	9a07      	ldr	r2, [sp, #28]
 800f4c4:	3230      	adds	r2, #48	; 0x30
 800f4c6:	701a      	strb	r2, [r3, #0]
 800f4c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f4ca:	429a      	cmp	r2, r3
 800f4cc:	d14f      	bne.n	800f56e <_dtoa_r+0x73e>
 800f4ce:	0002      	movs	r2, r0
 800f4d0:	000b      	movs	r3, r1
 800f4d2:	f7f1 f971 	bl	80007b8 <__aeabi_dadd>
 800f4d6:	0032      	movs	r2, r6
 800f4d8:	003b      	movs	r3, r7
 800f4da:	0004      	movs	r4, r0
 800f4dc:	000d      	movs	r5, r1
 800f4de:	f7f0 ffcd 	bl	800047c <__aeabi_dcmpgt>
 800f4e2:	2800      	cmp	r0, #0
 800f4e4:	d12e      	bne.n	800f544 <_dtoa_r+0x714>
 800f4e6:	0032      	movs	r2, r6
 800f4e8:	003b      	movs	r3, r7
 800f4ea:	0020      	movs	r0, r4
 800f4ec:	0029      	movs	r1, r5
 800f4ee:	f7f0 ffab 	bl	8000448 <__aeabi_dcmpeq>
 800f4f2:	2800      	cmp	r0, #0
 800f4f4:	d002      	beq.n	800f4fc <_dtoa_r+0x6cc>
 800f4f6:	9b07      	ldr	r3, [sp, #28]
 800f4f8:	07de      	lsls	r6, r3, #31
 800f4fa:	d423      	bmi.n	800f544 <_dtoa_r+0x714>
 800f4fc:	9905      	ldr	r1, [sp, #20]
 800f4fe:	9804      	ldr	r0, [sp, #16]
 800f500:	f7fc f8fe 	bl	800b700 <_Bfree>
 800f504:	2300      	movs	r3, #0
 800f506:	9a08      	ldr	r2, [sp, #32]
 800f508:	7013      	strb	r3, [r2, #0]
 800f50a:	9b03      	ldr	r3, [sp, #12]
 800f50c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f50e:	3301      	adds	r3, #1
 800f510:	6013      	str	r3, [r2, #0]
 800f512:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f514:	2b00      	cmp	r3, #0
 800f516:	d100      	bne.n	800f51a <_dtoa_r+0x6ea>
 800f518:	e4bd      	b.n	800ee96 <_dtoa_r+0x66>
 800f51a:	9a08      	ldr	r2, [sp, #32]
 800f51c:	601a      	str	r2, [r3, #0]
 800f51e:	e4ba      	b.n	800ee96 <_dtoa_r+0x66>
 800f520:	080132e8 	.word	0x080132e8
 800f524:	080132c0 	.word	0x080132c0
 800f528:	3ff00000 	.word	0x3ff00000
 800f52c:	40240000 	.word	0x40240000
 800f530:	401c0000 	.word	0x401c0000
 800f534:	fcc00000 	.word	0xfcc00000
 800f538:	40140000 	.word	0x40140000
 800f53c:	7cc00000 	.word	0x7cc00000
 800f540:	3fe00000 	.word	0x3fe00000
 800f544:	9b03      	ldr	r3, [sp, #12]
 800f546:	930e      	str	r3, [sp, #56]	; 0x38
 800f548:	9b08      	ldr	r3, [sp, #32]
 800f54a:	9308      	str	r3, [sp, #32]
 800f54c:	3b01      	subs	r3, #1
 800f54e:	781a      	ldrb	r2, [r3, #0]
 800f550:	2a39      	cmp	r2, #57	; 0x39
 800f552:	d108      	bne.n	800f566 <_dtoa_r+0x736>
 800f554:	9a06      	ldr	r2, [sp, #24]
 800f556:	429a      	cmp	r2, r3
 800f558:	d1f7      	bne.n	800f54a <_dtoa_r+0x71a>
 800f55a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f55c:	9906      	ldr	r1, [sp, #24]
 800f55e:	3201      	adds	r2, #1
 800f560:	920e      	str	r2, [sp, #56]	; 0x38
 800f562:	2230      	movs	r2, #48	; 0x30
 800f564:	700a      	strb	r2, [r1, #0]
 800f566:	781a      	ldrb	r2, [r3, #0]
 800f568:	3201      	adds	r2, #1
 800f56a:	701a      	strb	r2, [r3, #0]
 800f56c:	e77c      	b.n	800f468 <_dtoa_r+0x638>
 800f56e:	2200      	movs	r2, #0
 800f570:	4ba9      	ldr	r3, [pc, #676]	; (800f818 <_dtoa_r+0x9e8>)
 800f572:	f7f2 f87b 	bl	800166c <__aeabi_dmul>
 800f576:	2200      	movs	r2, #0
 800f578:	2300      	movs	r3, #0
 800f57a:	0004      	movs	r4, r0
 800f57c:	000d      	movs	r5, r1
 800f57e:	f7f0 ff63 	bl	8000448 <__aeabi_dcmpeq>
 800f582:	2800      	cmp	r0, #0
 800f584:	d100      	bne.n	800f588 <_dtoa_r+0x758>
 800f586:	e782      	b.n	800f48e <_dtoa_r+0x65e>
 800f588:	e7b8      	b.n	800f4fc <_dtoa_r+0x6cc>
 800f58a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800f58c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f58e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f590:	2f00      	cmp	r7, #0
 800f592:	d012      	beq.n	800f5ba <_dtoa_r+0x78a>
 800f594:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f596:	2a01      	cmp	r2, #1
 800f598:	dc6e      	bgt.n	800f678 <_dtoa_r+0x848>
 800f59a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f59c:	2a00      	cmp	r2, #0
 800f59e:	d065      	beq.n	800f66c <_dtoa_r+0x83c>
 800f5a0:	4a9e      	ldr	r2, [pc, #632]	; (800f81c <_dtoa_r+0x9ec>)
 800f5a2:	189b      	adds	r3, r3, r2
 800f5a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f5a6:	2101      	movs	r1, #1
 800f5a8:	18d2      	adds	r2, r2, r3
 800f5aa:	920a      	str	r2, [sp, #40]	; 0x28
 800f5ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f5ae:	9804      	ldr	r0, [sp, #16]
 800f5b0:	18d3      	adds	r3, r2, r3
 800f5b2:	930c      	str	r3, [sp, #48]	; 0x30
 800f5b4:	f7fc f986 	bl	800b8c4 <__i2b>
 800f5b8:	0007      	movs	r7, r0
 800f5ba:	2c00      	cmp	r4, #0
 800f5bc:	d00e      	beq.n	800f5dc <_dtoa_r+0x7ac>
 800f5be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	dd0b      	ble.n	800f5dc <_dtoa_r+0x7ac>
 800f5c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f5c6:	0023      	movs	r3, r4
 800f5c8:	4294      	cmp	r4, r2
 800f5ca:	dd00      	ble.n	800f5ce <_dtoa_r+0x79e>
 800f5cc:	0013      	movs	r3, r2
 800f5ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f5d0:	1ae4      	subs	r4, r4, r3
 800f5d2:	1ad2      	subs	r2, r2, r3
 800f5d4:	920a      	str	r2, [sp, #40]	; 0x28
 800f5d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f5d8:	1ad3      	subs	r3, r2, r3
 800f5da:	930c      	str	r3, [sp, #48]	; 0x30
 800f5dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d01e      	beq.n	800f620 <_dtoa_r+0x7f0>
 800f5e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d05c      	beq.n	800f6a2 <_dtoa_r+0x872>
 800f5e8:	2d00      	cmp	r5, #0
 800f5ea:	dd10      	ble.n	800f60e <_dtoa_r+0x7de>
 800f5ec:	0039      	movs	r1, r7
 800f5ee:	002a      	movs	r2, r5
 800f5f0:	9804      	ldr	r0, [sp, #16]
 800f5f2:	f7fc fa2f 	bl	800ba54 <__pow5mult>
 800f5f6:	9a05      	ldr	r2, [sp, #20]
 800f5f8:	0001      	movs	r1, r0
 800f5fa:	0007      	movs	r7, r0
 800f5fc:	9804      	ldr	r0, [sp, #16]
 800f5fe:	f7fc f979 	bl	800b8f4 <__multiply>
 800f602:	0006      	movs	r6, r0
 800f604:	9905      	ldr	r1, [sp, #20]
 800f606:	9804      	ldr	r0, [sp, #16]
 800f608:	f7fc f87a 	bl	800b700 <_Bfree>
 800f60c:	9605      	str	r6, [sp, #20]
 800f60e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f610:	1b5a      	subs	r2, r3, r5
 800f612:	42ab      	cmp	r3, r5
 800f614:	d004      	beq.n	800f620 <_dtoa_r+0x7f0>
 800f616:	9905      	ldr	r1, [sp, #20]
 800f618:	9804      	ldr	r0, [sp, #16]
 800f61a:	f7fc fa1b 	bl	800ba54 <__pow5mult>
 800f61e:	9005      	str	r0, [sp, #20]
 800f620:	2101      	movs	r1, #1
 800f622:	9804      	ldr	r0, [sp, #16]
 800f624:	f7fc f94e 	bl	800b8c4 <__i2b>
 800f628:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f62a:	0006      	movs	r6, r0
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	dd3a      	ble.n	800f6a6 <_dtoa_r+0x876>
 800f630:	001a      	movs	r2, r3
 800f632:	0001      	movs	r1, r0
 800f634:	9804      	ldr	r0, [sp, #16]
 800f636:	f7fc fa0d 	bl	800ba54 <__pow5mult>
 800f63a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f63c:	0006      	movs	r6, r0
 800f63e:	2500      	movs	r5, #0
 800f640:	2b01      	cmp	r3, #1
 800f642:	dc38      	bgt.n	800f6b6 <_dtoa_r+0x886>
 800f644:	2500      	movs	r5, #0
 800f646:	9b08      	ldr	r3, [sp, #32]
 800f648:	42ab      	cmp	r3, r5
 800f64a:	d130      	bne.n	800f6ae <_dtoa_r+0x87e>
 800f64c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f64e:	031b      	lsls	r3, r3, #12
 800f650:	42ab      	cmp	r3, r5
 800f652:	d12c      	bne.n	800f6ae <_dtoa_r+0x87e>
 800f654:	4b72      	ldr	r3, [pc, #456]	; (800f820 <_dtoa_r+0x9f0>)
 800f656:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f658:	4213      	tst	r3, r2
 800f65a:	d028      	beq.n	800f6ae <_dtoa_r+0x87e>
 800f65c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f65e:	3501      	adds	r5, #1
 800f660:	3301      	adds	r3, #1
 800f662:	930a      	str	r3, [sp, #40]	; 0x28
 800f664:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f666:	3301      	adds	r3, #1
 800f668:	930c      	str	r3, [sp, #48]	; 0x30
 800f66a:	e020      	b.n	800f6ae <_dtoa_r+0x87e>
 800f66c:	2336      	movs	r3, #54	; 0x36
 800f66e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f670:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f672:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f674:	1a9b      	subs	r3, r3, r2
 800f676:	e795      	b.n	800f5a4 <_dtoa_r+0x774>
 800f678:	9b07      	ldr	r3, [sp, #28]
 800f67a:	1e5d      	subs	r5, r3, #1
 800f67c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f67e:	42ab      	cmp	r3, r5
 800f680:	db07      	blt.n	800f692 <_dtoa_r+0x862>
 800f682:	1b5d      	subs	r5, r3, r5
 800f684:	9b07      	ldr	r3, [sp, #28]
 800f686:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f688:	2b00      	cmp	r3, #0
 800f68a:	da8b      	bge.n	800f5a4 <_dtoa_r+0x774>
 800f68c:	1ae4      	subs	r4, r4, r3
 800f68e:	2300      	movs	r3, #0
 800f690:	e788      	b.n	800f5a4 <_dtoa_r+0x774>
 800f692:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f694:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f696:	1aeb      	subs	r3, r5, r3
 800f698:	18d3      	adds	r3, r2, r3
 800f69a:	950d      	str	r5, [sp, #52]	; 0x34
 800f69c:	9313      	str	r3, [sp, #76]	; 0x4c
 800f69e:	2500      	movs	r5, #0
 800f6a0:	e7f0      	b.n	800f684 <_dtoa_r+0x854>
 800f6a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f6a4:	e7b7      	b.n	800f616 <_dtoa_r+0x7e6>
 800f6a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f6a8:	2500      	movs	r5, #0
 800f6aa:	2b01      	cmp	r3, #1
 800f6ac:	ddca      	ble.n	800f644 <_dtoa_r+0x814>
 800f6ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f6b0:	2001      	movs	r0, #1
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d008      	beq.n	800f6c8 <_dtoa_r+0x898>
 800f6b6:	6933      	ldr	r3, [r6, #16]
 800f6b8:	3303      	adds	r3, #3
 800f6ba:	009b      	lsls	r3, r3, #2
 800f6bc:	18f3      	adds	r3, r6, r3
 800f6be:	6858      	ldr	r0, [r3, #4]
 800f6c0:	f7fc f8b8 	bl	800b834 <__hi0bits>
 800f6c4:	2320      	movs	r3, #32
 800f6c6:	1a18      	subs	r0, r3, r0
 800f6c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f6ca:	1818      	adds	r0, r3, r0
 800f6cc:	0002      	movs	r2, r0
 800f6ce:	231f      	movs	r3, #31
 800f6d0:	401a      	ands	r2, r3
 800f6d2:	4218      	tst	r0, r3
 800f6d4:	d047      	beq.n	800f766 <_dtoa_r+0x936>
 800f6d6:	3301      	adds	r3, #1
 800f6d8:	1a9b      	subs	r3, r3, r2
 800f6da:	2b04      	cmp	r3, #4
 800f6dc:	dd3f      	ble.n	800f75e <_dtoa_r+0x92e>
 800f6de:	231c      	movs	r3, #28
 800f6e0:	1a9b      	subs	r3, r3, r2
 800f6e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f6e4:	18e4      	adds	r4, r4, r3
 800f6e6:	18d2      	adds	r2, r2, r3
 800f6e8:	920a      	str	r2, [sp, #40]	; 0x28
 800f6ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f6ec:	18d3      	adds	r3, r2, r3
 800f6ee:	930c      	str	r3, [sp, #48]	; 0x30
 800f6f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	dd05      	ble.n	800f702 <_dtoa_r+0x8d2>
 800f6f6:	001a      	movs	r2, r3
 800f6f8:	9905      	ldr	r1, [sp, #20]
 800f6fa:	9804      	ldr	r0, [sp, #16]
 800f6fc:	f7fc f9ec 	bl	800bad8 <__lshift>
 800f700:	9005      	str	r0, [sp, #20]
 800f702:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f704:	2b00      	cmp	r3, #0
 800f706:	dd05      	ble.n	800f714 <_dtoa_r+0x8e4>
 800f708:	0031      	movs	r1, r6
 800f70a:	001a      	movs	r2, r3
 800f70c:	9804      	ldr	r0, [sp, #16]
 800f70e:	f7fc f9e3 	bl	800bad8 <__lshift>
 800f712:	0006      	movs	r6, r0
 800f714:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f716:	2b00      	cmp	r3, #0
 800f718:	d027      	beq.n	800f76a <_dtoa_r+0x93a>
 800f71a:	0031      	movs	r1, r6
 800f71c:	9805      	ldr	r0, [sp, #20]
 800f71e:	f7fc fa49 	bl	800bbb4 <__mcmp>
 800f722:	2800      	cmp	r0, #0
 800f724:	da21      	bge.n	800f76a <_dtoa_r+0x93a>
 800f726:	9b03      	ldr	r3, [sp, #12]
 800f728:	220a      	movs	r2, #10
 800f72a:	3b01      	subs	r3, #1
 800f72c:	9303      	str	r3, [sp, #12]
 800f72e:	9905      	ldr	r1, [sp, #20]
 800f730:	2300      	movs	r3, #0
 800f732:	9804      	ldr	r0, [sp, #16]
 800f734:	f7fb ffee 	bl	800b714 <__multadd>
 800f738:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f73a:	9005      	str	r0, [sp, #20]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d100      	bne.n	800f742 <_dtoa_r+0x912>
 800f740:	e15d      	b.n	800f9fe <_dtoa_r+0xbce>
 800f742:	2300      	movs	r3, #0
 800f744:	0039      	movs	r1, r7
 800f746:	220a      	movs	r2, #10
 800f748:	9804      	ldr	r0, [sp, #16]
 800f74a:	f7fb ffe3 	bl	800b714 <__multadd>
 800f74e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f750:	0007      	movs	r7, r0
 800f752:	2b00      	cmp	r3, #0
 800f754:	dc49      	bgt.n	800f7ea <_dtoa_r+0x9ba>
 800f756:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f758:	2b02      	cmp	r3, #2
 800f75a:	dc0e      	bgt.n	800f77a <_dtoa_r+0x94a>
 800f75c:	e045      	b.n	800f7ea <_dtoa_r+0x9ba>
 800f75e:	2b04      	cmp	r3, #4
 800f760:	d0c6      	beq.n	800f6f0 <_dtoa_r+0x8c0>
 800f762:	331c      	adds	r3, #28
 800f764:	e7bd      	b.n	800f6e2 <_dtoa_r+0x8b2>
 800f766:	0013      	movs	r3, r2
 800f768:	e7fb      	b.n	800f762 <_dtoa_r+0x932>
 800f76a:	9b07      	ldr	r3, [sp, #28]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	dc36      	bgt.n	800f7de <_dtoa_r+0x9ae>
 800f770:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f772:	2b02      	cmp	r3, #2
 800f774:	dd33      	ble.n	800f7de <_dtoa_r+0x9ae>
 800f776:	9b07      	ldr	r3, [sp, #28]
 800f778:	930b      	str	r3, [sp, #44]	; 0x2c
 800f77a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d10c      	bne.n	800f79a <_dtoa_r+0x96a>
 800f780:	0031      	movs	r1, r6
 800f782:	2205      	movs	r2, #5
 800f784:	9804      	ldr	r0, [sp, #16]
 800f786:	f7fb ffc5 	bl	800b714 <__multadd>
 800f78a:	0006      	movs	r6, r0
 800f78c:	0001      	movs	r1, r0
 800f78e:	9805      	ldr	r0, [sp, #20]
 800f790:	f7fc fa10 	bl	800bbb4 <__mcmp>
 800f794:	2800      	cmp	r0, #0
 800f796:	dd00      	ble.n	800f79a <_dtoa_r+0x96a>
 800f798:	e59f      	b.n	800f2da <_dtoa_r+0x4aa>
 800f79a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f79c:	43db      	mvns	r3, r3
 800f79e:	9303      	str	r3, [sp, #12]
 800f7a0:	9b06      	ldr	r3, [sp, #24]
 800f7a2:	9308      	str	r3, [sp, #32]
 800f7a4:	2500      	movs	r5, #0
 800f7a6:	0031      	movs	r1, r6
 800f7a8:	9804      	ldr	r0, [sp, #16]
 800f7aa:	f7fb ffa9 	bl	800b700 <_Bfree>
 800f7ae:	2f00      	cmp	r7, #0
 800f7b0:	d100      	bne.n	800f7b4 <_dtoa_r+0x984>
 800f7b2:	e6a3      	b.n	800f4fc <_dtoa_r+0x6cc>
 800f7b4:	2d00      	cmp	r5, #0
 800f7b6:	d005      	beq.n	800f7c4 <_dtoa_r+0x994>
 800f7b8:	42bd      	cmp	r5, r7
 800f7ba:	d003      	beq.n	800f7c4 <_dtoa_r+0x994>
 800f7bc:	0029      	movs	r1, r5
 800f7be:	9804      	ldr	r0, [sp, #16]
 800f7c0:	f7fb ff9e 	bl	800b700 <_Bfree>
 800f7c4:	0039      	movs	r1, r7
 800f7c6:	9804      	ldr	r0, [sp, #16]
 800f7c8:	f7fb ff9a 	bl	800b700 <_Bfree>
 800f7cc:	e696      	b.n	800f4fc <_dtoa_r+0x6cc>
 800f7ce:	2600      	movs	r6, #0
 800f7d0:	0037      	movs	r7, r6
 800f7d2:	e7e2      	b.n	800f79a <_dtoa_r+0x96a>
 800f7d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f7d6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800f7d8:	9303      	str	r3, [sp, #12]
 800f7da:	0037      	movs	r7, r6
 800f7dc:	e57d      	b.n	800f2da <_dtoa_r+0x4aa>
 800f7de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d100      	bne.n	800f7e6 <_dtoa_r+0x9b6>
 800f7e4:	e0c3      	b.n	800f96e <_dtoa_r+0xb3e>
 800f7e6:	9b07      	ldr	r3, [sp, #28]
 800f7e8:	930b      	str	r3, [sp, #44]	; 0x2c
 800f7ea:	2c00      	cmp	r4, #0
 800f7ec:	dd05      	ble.n	800f7fa <_dtoa_r+0x9ca>
 800f7ee:	0039      	movs	r1, r7
 800f7f0:	0022      	movs	r2, r4
 800f7f2:	9804      	ldr	r0, [sp, #16]
 800f7f4:	f7fc f970 	bl	800bad8 <__lshift>
 800f7f8:	0007      	movs	r7, r0
 800f7fa:	0038      	movs	r0, r7
 800f7fc:	2d00      	cmp	r5, #0
 800f7fe:	d024      	beq.n	800f84a <_dtoa_r+0xa1a>
 800f800:	6879      	ldr	r1, [r7, #4]
 800f802:	9804      	ldr	r0, [sp, #16]
 800f804:	f7fb ff54 	bl	800b6b0 <_Balloc>
 800f808:	1e04      	subs	r4, r0, #0
 800f80a:	d111      	bne.n	800f830 <_dtoa_r+0xa00>
 800f80c:	0022      	movs	r2, r4
 800f80e:	4b05      	ldr	r3, [pc, #20]	; (800f824 <_dtoa_r+0x9f4>)
 800f810:	4805      	ldr	r0, [pc, #20]	; (800f828 <_dtoa_r+0x9f8>)
 800f812:	4906      	ldr	r1, [pc, #24]	; (800f82c <_dtoa_r+0x9fc>)
 800f814:	e43c      	b.n	800f090 <_dtoa_r+0x260>
 800f816:	46c0      	nop			; (mov r8, r8)
 800f818:	40240000 	.word	0x40240000
 800f81c:	00000433 	.word	0x00000433
 800f820:	7ff00000 	.word	0x7ff00000
 800f824:	080131f1 	.word	0x080131f1
 800f828:	08013481 	.word	0x08013481
 800f82c:	000002ef 	.word	0x000002ef
 800f830:	0039      	movs	r1, r7
 800f832:	693a      	ldr	r2, [r7, #16]
 800f834:	310c      	adds	r1, #12
 800f836:	3202      	adds	r2, #2
 800f838:	0092      	lsls	r2, r2, #2
 800f83a:	300c      	adds	r0, #12
 800f83c:	f7fb fa9d 	bl	800ad7a <memcpy>
 800f840:	2201      	movs	r2, #1
 800f842:	0021      	movs	r1, r4
 800f844:	9804      	ldr	r0, [sp, #16]
 800f846:	f7fc f947 	bl	800bad8 <__lshift>
 800f84a:	9b06      	ldr	r3, [sp, #24]
 800f84c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f84e:	9307      	str	r3, [sp, #28]
 800f850:	3b01      	subs	r3, #1
 800f852:	189b      	adds	r3, r3, r2
 800f854:	2201      	movs	r2, #1
 800f856:	003d      	movs	r5, r7
 800f858:	0007      	movs	r7, r0
 800f85a:	930e      	str	r3, [sp, #56]	; 0x38
 800f85c:	9b08      	ldr	r3, [sp, #32]
 800f85e:	4013      	ands	r3, r2
 800f860:	930d      	str	r3, [sp, #52]	; 0x34
 800f862:	0031      	movs	r1, r6
 800f864:	9805      	ldr	r0, [sp, #20]
 800f866:	f7ff fa53 	bl	800ed10 <quorem>
 800f86a:	0029      	movs	r1, r5
 800f86c:	0004      	movs	r4, r0
 800f86e:	900b      	str	r0, [sp, #44]	; 0x2c
 800f870:	9805      	ldr	r0, [sp, #20]
 800f872:	f7fc f99f 	bl	800bbb4 <__mcmp>
 800f876:	003a      	movs	r2, r7
 800f878:	900c      	str	r0, [sp, #48]	; 0x30
 800f87a:	0031      	movs	r1, r6
 800f87c:	9804      	ldr	r0, [sp, #16]
 800f87e:	f7fc f9b5 	bl	800bbec <__mdiff>
 800f882:	2201      	movs	r2, #1
 800f884:	68c3      	ldr	r3, [r0, #12]
 800f886:	3430      	adds	r4, #48	; 0x30
 800f888:	9008      	str	r0, [sp, #32]
 800f88a:	920a      	str	r2, [sp, #40]	; 0x28
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d104      	bne.n	800f89a <_dtoa_r+0xa6a>
 800f890:	0001      	movs	r1, r0
 800f892:	9805      	ldr	r0, [sp, #20]
 800f894:	f7fc f98e 	bl	800bbb4 <__mcmp>
 800f898:	900a      	str	r0, [sp, #40]	; 0x28
 800f89a:	9908      	ldr	r1, [sp, #32]
 800f89c:	9804      	ldr	r0, [sp, #16]
 800f89e:	f7fb ff2f 	bl	800b700 <_Bfree>
 800f8a2:	9b07      	ldr	r3, [sp, #28]
 800f8a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f8a6:	3301      	adds	r3, #1
 800f8a8:	9308      	str	r3, [sp, #32]
 800f8aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f8ac:	4313      	orrs	r3, r2
 800f8ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f8b0:	4313      	orrs	r3, r2
 800f8b2:	d109      	bne.n	800f8c8 <_dtoa_r+0xa98>
 800f8b4:	2c39      	cmp	r4, #57	; 0x39
 800f8b6:	d022      	beq.n	800f8fe <_dtoa_r+0xace>
 800f8b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	dd01      	ble.n	800f8c2 <_dtoa_r+0xa92>
 800f8be:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800f8c0:	3431      	adds	r4, #49	; 0x31
 800f8c2:	9b07      	ldr	r3, [sp, #28]
 800f8c4:	701c      	strb	r4, [r3, #0]
 800f8c6:	e76e      	b.n	800f7a6 <_dtoa_r+0x976>
 800f8c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	db04      	blt.n	800f8d8 <_dtoa_r+0xaa8>
 800f8ce:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f8d0:	4313      	orrs	r3, r2
 800f8d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f8d4:	4313      	orrs	r3, r2
 800f8d6:	d11e      	bne.n	800f916 <_dtoa_r+0xae6>
 800f8d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	ddf1      	ble.n	800f8c2 <_dtoa_r+0xa92>
 800f8de:	9905      	ldr	r1, [sp, #20]
 800f8e0:	2201      	movs	r2, #1
 800f8e2:	9804      	ldr	r0, [sp, #16]
 800f8e4:	f7fc f8f8 	bl	800bad8 <__lshift>
 800f8e8:	0031      	movs	r1, r6
 800f8ea:	9005      	str	r0, [sp, #20]
 800f8ec:	f7fc f962 	bl	800bbb4 <__mcmp>
 800f8f0:	2800      	cmp	r0, #0
 800f8f2:	dc02      	bgt.n	800f8fa <_dtoa_r+0xaca>
 800f8f4:	d1e5      	bne.n	800f8c2 <_dtoa_r+0xa92>
 800f8f6:	07e3      	lsls	r3, r4, #31
 800f8f8:	d5e3      	bpl.n	800f8c2 <_dtoa_r+0xa92>
 800f8fa:	2c39      	cmp	r4, #57	; 0x39
 800f8fc:	d1df      	bne.n	800f8be <_dtoa_r+0xa8e>
 800f8fe:	2339      	movs	r3, #57	; 0x39
 800f900:	9a07      	ldr	r2, [sp, #28]
 800f902:	7013      	strb	r3, [r2, #0]
 800f904:	9b08      	ldr	r3, [sp, #32]
 800f906:	9308      	str	r3, [sp, #32]
 800f908:	3b01      	subs	r3, #1
 800f90a:	781a      	ldrb	r2, [r3, #0]
 800f90c:	2a39      	cmp	r2, #57	; 0x39
 800f90e:	d063      	beq.n	800f9d8 <_dtoa_r+0xba8>
 800f910:	3201      	adds	r2, #1
 800f912:	701a      	strb	r2, [r3, #0]
 800f914:	e747      	b.n	800f7a6 <_dtoa_r+0x976>
 800f916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f918:	2b00      	cmp	r3, #0
 800f91a:	dd03      	ble.n	800f924 <_dtoa_r+0xaf4>
 800f91c:	2c39      	cmp	r4, #57	; 0x39
 800f91e:	d0ee      	beq.n	800f8fe <_dtoa_r+0xace>
 800f920:	3401      	adds	r4, #1
 800f922:	e7ce      	b.n	800f8c2 <_dtoa_r+0xa92>
 800f924:	9b07      	ldr	r3, [sp, #28]
 800f926:	9a07      	ldr	r2, [sp, #28]
 800f928:	701c      	strb	r4, [r3, #0]
 800f92a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f92c:	4293      	cmp	r3, r2
 800f92e:	d03e      	beq.n	800f9ae <_dtoa_r+0xb7e>
 800f930:	2300      	movs	r3, #0
 800f932:	220a      	movs	r2, #10
 800f934:	9905      	ldr	r1, [sp, #20]
 800f936:	9804      	ldr	r0, [sp, #16]
 800f938:	f7fb feec 	bl	800b714 <__multadd>
 800f93c:	2300      	movs	r3, #0
 800f93e:	9005      	str	r0, [sp, #20]
 800f940:	220a      	movs	r2, #10
 800f942:	0029      	movs	r1, r5
 800f944:	9804      	ldr	r0, [sp, #16]
 800f946:	42bd      	cmp	r5, r7
 800f948:	d106      	bne.n	800f958 <_dtoa_r+0xb28>
 800f94a:	f7fb fee3 	bl	800b714 <__multadd>
 800f94e:	0005      	movs	r5, r0
 800f950:	0007      	movs	r7, r0
 800f952:	9b08      	ldr	r3, [sp, #32]
 800f954:	9307      	str	r3, [sp, #28]
 800f956:	e784      	b.n	800f862 <_dtoa_r+0xa32>
 800f958:	f7fb fedc 	bl	800b714 <__multadd>
 800f95c:	0039      	movs	r1, r7
 800f95e:	0005      	movs	r5, r0
 800f960:	2300      	movs	r3, #0
 800f962:	220a      	movs	r2, #10
 800f964:	9804      	ldr	r0, [sp, #16]
 800f966:	f7fb fed5 	bl	800b714 <__multadd>
 800f96a:	0007      	movs	r7, r0
 800f96c:	e7f1      	b.n	800f952 <_dtoa_r+0xb22>
 800f96e:	9b07      	ldr	r3, [sp, #28]
 800f970:	930b      	str	r3, [sp, #44]	; 0x2c
 800f972:	2500      	movs	r5, #0
 800f974:	0031      	movs	r1, r6
 800f976:	9805      	ldr	r0, [sp, #20]
 800f978:	f7ff f9ca 	bl	800ed10 <quorem>
 800f97c:	9b06      	ldr	r3, [sp, #24]
 800f97e:	3030      	adds	r0, #48	; 0x30
 800f980:	5558      	strb	r0, [r3, r5]
 800f982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f984:	3501      	adds	r5, #1
 800f986:	0004      	movs	r4, r0
 800f988:	42ab      	cmp	r3, r5
 800f98a:	dd07      	ble.n	800f99c <_dtoa_r+0xb6c>
 800f98c:	2300      	movs	r3, #0
 800f98e:	220a      	movs	r2, #10
 800f990:	9905      	ldr	r1, [sp, #20]
 800f992:	9804      	ldr	r0, [sp, #16]
 800f994:	f7fb febe 	bl	800b714 <__multadd>
 800f998:	9005      	str	r0, [sp, #20]
 800f99a:	e7eb      	b.n	800f974 <_dtoa_r+0xb44>
 800f99c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f99e:	2301      	movs	r3, #1
 800f9a0:	2a00      	cmp	r2, #0
 800f9a2:	dd00      	ble.n	800f9a6 <_dtoa_r+0xb76>
 800f9a4:	0013      	movs	r3, r2
 800f9a6:	2500      	movs	r5, #0
 800f9a8:	9a06      	ldr	r2, [sp, #24]
 800f9aa:	18d3      	adds	r3, r2, r3
 800f9ac:	9308      	str	r3, [sp, #32]
 800f9ae:	9905      	ldr	r1, [sp, #20]
 800f9b0:	2201      	movs	r2, #1
 800f9b2:	9804      	ldr	r0, [sp, #16]
 800f9b4:	f7fc f890 	bl	800bad8 <__lshift>
 800f9b8:	0031      	movs	r1, r6
 800f9ba:	9005      	str	r0, [sp, #20]
 800f9bc:	f7fc f8fa 	bl	800bbb4 <__mcmp>
 800f9c0:	2800      	cmp	r0, #0
 800f9c2:	dc9f      	bgt.n	800f904 <_dtoa_r+0xad4>
 800f9c4:	d101      	bne.n	800f9ca <_dtoa_r+0xb9a>
 800f9c6:	07e4      	lsls	r4, r4, #31
 800f9c8:	d49c      	bmi.n	800f904 <_dtoa_r+0xad4>
 800f9ca:	9b08      	ldr	r3, [sp, #32]
 800f9cc:	9308      	str	r3, [sp, #32]
 800f9ce:	3b01      	subs	r3, #1
 800f9d0:	781a      	ldrb	r2, [r3, #0]
 800f9d2:	2a30      	cmp	r2, #48	; 0x30
 800f9d4:	d0fa      	beq.n	800f9cc <_dtoa_r+0xb9c>
 800f9d6:	e6e6      	b.n	800f7a6 <_dtoa_r+0x976>
 800f9d8:	9a06      	ldr	r2, [sp, #24]
 800f9da:	429a      	cmp	r2, r3
 800f9dc:	d193      	bne.n	800f906 <_dtoa_r+0xad6>
 800f9de:	9b03      	ldr	r3, [sp, #12]
 800f9e0:	3301      	adds	r3, #1
 800f9e2:	9303      	str	r3, [sp, #12]
 800f9e4:	2331      	movs	r3, #49	; 0x31
 800f9e6:	7013      	strb	r3, [r2, #0]
 800f9e8:	e6dd      	b.n	800f7a6 <_dtoa_r+0x976>
 800f9ea:	4b09      	ldr	r3, [pc, #36]	; (800fa10 <_dtoa_r+0xbe0>)
 800f9ec:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800f9ee:	9306      	str	r3, [sp, #24]
 800f9f0:	4b08      	ldr	r3, [pc, #32]	; (800fa14 <_dtoa_r+0xbe4>)
 800f9f2:	2a00      	cmp	r2, #0
 800f9f4:	d001      	beq.n	800f9fa <_dtoa_r+0xbca>
 800f9f6:	f7ff fa4c 	bl	800ee92 <_dtoa_r+0x62>
 800f9fa:	f7ff fa4c 	bl	800ee96 <_dtoa_r+0x66>
 800f9fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	dcb6      	bgt.n	800f972 <_dtoa_r+0xb42>
 800fa04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fa06:	2b02      	cmp	r3, #2
 800fa08:	dd00      	ble.n	800fa0c <_dtoa_r+0xbdc>
 800fa0a:	e6b6      	b.n	800f77a <_dtoa_r+0x94a>
 800fa0c:	e7b1      	b.n	800f972 <_dtoa_r+0xb42>
 800fa0e:	46c0      	nop			; (mov r8, r8)
 800fa10:	08013474 	.word	0x08013474
 800fa14:	0801347c 	.word	0x0801347c

0800fa18 <realloc>:
 800fa18:	b510      	push	{r4, lr}
 800fa1a:	4b03      	ldr	r3, [pc, #12]	; (800fa28 <realloc+0x10>)
 800fa1c:	000a      	movs	r2, r1
 800fa1e:	0001      	movs	r1, r0
 800fa20:	6818      	ldr	r0, [r3, #0]
 800fa22:	f000 f803 	bl	800fa2c <_realloc_r>
 800fa26:	bd10      	pop	{r4, pc}
 800fa28:	200006d8 	.word	0x200006d8

0800fa2c <_realloc_r>:
 800fa2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa2e:	b087      	sub	sp, #28
 800fa30:	1e0c      	subs	r4, r1, #0
 800fa32:	9001      	str	r0, [sp, #4]
 800fa34:	9205      	str	r2, [sp, #20]
 800fa36:	d106      	bne.n	800fa46 <_realloc_r+0x1a>
 800fa38:	0011      	movs	r1, r2
 800fa3a:	f7f9 fe39 	bl	80096b0 <_malloc_r>
 800fa3e:	0007      	movs	r7, r0
 800fa40:	0038      	movs	r0, r7
 800fa42:	b007      	add	sp, #28
 800fa44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa46:	9801      	ldr	r0, [sp, #4]
 800fa48:	f7fa f846 	bl	8009ad8 <__malloc_lock>
 800fa4c:	0023      	movs	r3, r4
 800fa4e:	3b08      	subs	r3, #8
 800fa50:	685f      	ldr	r7, [r3, #4]
 800fa52:	9304      	str	r3, [sp, #16]
 800fa54:	9b05      	ldr	r3, [sp, #20]
 800fa56:	330b      	adds	r3, #11
 800fa58:	2b16      	cmp	r3, #22
 800fa5a:	d908      	bls.n	800fa6e <_realloc_r+0x42>
 800fa5c:	2207      	movs	r2, #7
 800fa5e:	4393      	bics	r3, r2
 800fa60:	9300      	str	r3, [sp, #0]
 800fa62:	d506      	bpl.n	800fa72 <_realloc_r+0x46>
 800fa64:	230c      	movs	r3, #12
 800fa66:	9a01      	ldr	r2, [sp, #4]
 800fa68:	2700      	movs	r7, #0
 800fa6a:	6013      	str	r3, [r2, #0]
 800fa6c:	e7e8      	b.n	800fa40 <_realloc_r+0x14>
 800fa6e:	2310      	movs	r3, #16
 800fa70:	9300      	str	r3, [sp, #0]
 800fa72:	9b00      	ldr	r3, [sp, #0]
 800fa74:	9a05      	ldr	r2, [sp, #20]
 800fa76:	4293      	cmp	r3, r2
 800fa78:	d3f4      	bcc.n	800fa64 <_realloc_r+0x38>
 800fa7a:	9b04      	ldr	r3, [sp, #16]
 800fa7c:	003a      	movs	r2, r7
 800fa7e:	9302      	str	r3, [sp, #8]
 800fa80:	2303      	movs	r3, #3
 800fa82:	439a      	bics	r2, r3
 800fa84:	9b00      	ldr	r3, [sp, #0]
 800fa86:	9203      	str	r2, [sp, #12]
 800fa88:	4293      	cmp	r3, r2
 800fa8a:	dc00      	bgt.n	800fa8e <_realloc_r+0x62>
 800fa8c:	e169      	b.n	800fd62 <_realloc_r+0x336>
 800fa8e:	9b04      	ldr	r3, [sp, #16]
 800fa90:	48b8      	ldr	r0, [pc, #736]	; (800fd74 <_realloc_r+0x348>)
 800fa92:	189b      	adds	r3, r3, r2
 800fa94:	6882      	ldr	r2, [r0, #8]
 800fa96:	4694      	mov	ip, r2
 800fa98:	685a      	ldr	r2, [r3, #4]
 800fa9a:	459c      	cmp	ip, r3
 800fa9c:	d006      	beq.n	800faac <_realloc_r+0x80>
 800fa9e:	2501      	movs	r5, #1
 800faa0:	0011      	movs	r1, r2
 800faa2:	43a9      	bics	r1, r5
 800faa4:	1859      	adds	r1, r3, r1
 800faa6:	6849      	ldr	r1, [r1, #4]
 800faa8:	4229      	tst	r1, r5
 800faaa:	d144      	bne.n	800fb36 <_realloc_r+0x10a>
 800faac:	2103      	movs	r1, #3
 800faae:	438a      	bics	r2, r1
 800fab0:	9903      	ldr	r1, [sp, #12]
 800fab2:	188e      	adds	r6, r1, r2
 800fab4:	9900      	ldr	r1, [sp, #0]
 800fab6:	459c      	cmp	ip, r3
 800fab8:	d117      	bne.n	800faea <_realloc_r+0xbe>
 800faba:	3110      	adds	r1, #16
 800fabc:	42b1      	cmp	r1, r6
 800fabe:	dc3c      	bgt.n	800fb3a <_realloc_r+0x10e>
 800fac0:	9a00      	ldr	r2, [sp, #0]
 800fac2:	2101      	movs	r1, #1
 800fac4:	4694      	mov	ip, r2
 800fac6:	1ab6      	subs	r6, r6, r2
 800fac8:	0022      	movs	r2, r4
 800faca:	9b04      	ldr	r3, [sp, #16]
 800facc:	430e      	orrs	r6, r1
 800face:	4463      	add	r3, ip
 800fad0:	6083      	str	r3, [r0, #8]
 800fad2:	3a08      	subs	r2, #8
 800fad4:	605e      	str	r6, [r3, #4]
 800fad6:	6853      	ldr	r3, [r2, #4]
 800fad8:	9801      	ldr	r0, [sp, #4]
 800fada:	400b      	ands	r3, r1
 800fadc:	4661      	mov	r1, ip
 800fade:	430b      	orrs	r3, r1
 800fae0:	6053      	str	r3, [r2, #4]
 800fae2:	f7fa f801 	bl	8009ae8 <__malloc_unlock>
 800fae6:	0027      	movs	r7, r4
 800fae8:	e7aa      	b.n	800fa40 <_realloc_r+0x14>
 800faea:	42b1      	cmp	r1, r6
 800faec:	dc25      	bgt.n	800fb3a <_realloc_r+0x10e>
 800faee:	68da      	ldr	r2, [r3, #12]
 800faf0:	689b      	ldr	r3, [r3, #8]
 800faf2:	60da      	str	r2, [r3, #12]
 800faf4:	6093      	str	r3, [r2, #8]
 800faf6:	9b00      	ldr	r3, [sp, #0]
 800faf8:	9a02      	ldr	r2, [sp, #8]
 800fafa:	1af4      	subs	r4, r6, r3
 800fafc:	9b02      	ldr	r3, [sp, #8]
 800fafe:	1992      	adds	r2, r2, r6
 800fb00:	6858      	ldr	r0, [r3, #4]
 800fb02:	2301      	movs	r3, #1
 800fb04:	4018      	ands	r0, r3
 800fb06:	2c0f      	cmp	r4, #15
 800fb08:	d800      	bhi.n	800fb0c <_realloc_r+0xe0>
 800fb0a:	e12c      	b.n	800fd66 <_realloc_r+0x33a>
 800fb0c:	9d00      	ldr	r5, [sp, #0]
 800fb0e:	9902      	ldr	r1, [sp, #8]
 800fb10:	4328      	orrs	r0, r5
 800fb12:	1949      	adds	r1, r1, r5
 800fb14:	9d02      	ldr	r5, [sp, #8]
 800fb16:	431c      	orrs	r4, r3
 800fb18:	6068      	str	r0, [r5, #4]
 800fb1a:	604c      	str	r4, [r1, #4]
 800fb1c:	6850      	ldr	r0, [r2, #4]
 800fb1e:	3108      	adds	r1, #8
 800fb20:	4303      	orrs	r3, r0
 800fb22:	6053      	str	r3, [r2, #4]
 800fb24:	9801      	ldr	r0, [sp, #4]
 800fb26:	f7fb f9a3 	bl	800ae70 <_free_r>
 800fb2a:	9801      	ldr	r0, [sp, #4]
 800fb2c:	f7f9 ffdc 	bl	8009ae8 <__malloc_unlock>
 800fb30:	9f02      	ldr	r7, [sp, #8]
 800fb32:	3708      	adds	r7, #8
 800fb34:	e784      	b.n	800fa40 <_realloc_r+0x14>
 800fb36:	2200      	movs	r2, #0
 800fb38:	0013      	movs	r3, r2
 800fb3a:	07ff      	lsls	r7, r7, #31
 800fb3c:	d500      	bpl.n	800fb40 <_realloc_r+0x114>
 800fb3e:	e0c6      	b.n	800fcce <_realloc_r+0x2a2>
 800fb40:	0021      	movs	r1, r4
 800fb42:	2003      	movs	r0, #3
 800fb44:	3908      	subs	r1, #8
 800fb46:	680d      	ldr	r5, [r1, #0]
 800fb48:	9904      	ldr	r1, [sp, #16]
 800fb4a:	1b4d      	subs	r5, r1, r5
 800fb4c:	6869      	ldr	r1, [r5, #4]
 800fb4e:	4381      	bics	r1, r0
 800fb50:	9803      	ldr	r0, [sp, #12]
 800fb52:	180f      	adds	r7, r1, r0
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d100      	bne.n	800fb5a <_realloc_r+0x12e>
 800fb58:	e084      	b.n	800fc64 <_realloc_r+0x238>
 800fb5a:	19d6      	adds	r6, r2, r7
 800fb5c:	459c      	cmp	ip, r3
 800fb5e:	d148      	bne.n	800fbf2 <_realloc_r+0x1c6>
 800fb60:	9b00      	ldr	r3, [sp, #0]
 800fb62:	3310      	adds	r3, #16
 800fb64:	42b3      	cmp	r3, r6
 800fb66:	dc7d      	bgt.n	800fc64 <_realloc_r+0x238>
 800fb68:	68aa      	ldr	r2, [r5, #8]
 800fb6a:	68eb      	ldr	r3, [r5, #12]
 800fb6c:	002f      	movs	r7, r5
 800fb6e:	60d3      	str	r3, [r2, #12]
 800fb70:	609a      	str	r2, [r3, #8]
 800fb72:	0002      	movs	r2, r0
 800fb74:	3a04      	subs	r2, #4
 800fb76:	3708      	adds	r7, #8
 800fb78:	2a24      	cmp	r2, #36	; 0x24
 800fb7a:	d835      	bhi.n	800fbe8 <_realloc_r+0x1bc>
 800fb7c:	003b      	movs	r3, r7
 800fb7e:	2a13      	cmp	r2, #19
 800fb80:	d908      	bls.n	800fb94 <_realloc_r+0x168>
 800fb82:	6823      	ldr	r3, [r4, #0]
 800fb84:	60ab      	str	r3, [r5, #8]
 800fb86:	6863      	ldr	r3, [r4, #4]
 800fb88:	60eb      	str	r3, [r5, #12]
 800fb8a:	2a1b      	cmp	r2, #27
 800fb8c:	d81a      	bhi.n	800fbc4 <_realloc_r+0x198>
 800fb8e:	002b      	movs	r3, r5
 800fb90:	3408      	adds	r4, #8
 800fb92:	3310      	adds	r3, #16
 800fb94:	6822      	ldr	r2, [r4, #0]
 800fb96:	601a      	str	r2, [r3, #0]
 800fb98:	6862      	ldr	r2, [r4, #4]
 800fb9a:	605a      	str	r2, [r3, #4]
 800fb9c:	68a2      	ldr	r2, [r4, #8]
 800fb9e:	609a      	str	r2, [r3, #8]
 800fba0:	9b00      	ldr	r3, [sp, #0]
 800fba2:	4a74      	ldr	r2, [pc, #464]	; (800fd74 <_realloc_r+0x348>)
 800fba4:	18eb      	adds	r3, r5, r3
 800fba6:	6093      	str	r3, [r2, #8]
 800fba8:	9a00      	ldr	r2, [sp, #0]
 800fbaa:	1ab6      	subs	r6, r6, r2
 800fbac:	2201      	movs	r2, #1
 800fbae:	4316      	orrs	r6, r2
 800fbb0:	605e      	str	r6, [r3, #4]
 800fbb2:	686b      	ldr	r3, [r5, #4]
 800fbb4:	4013      	ands	r3, r2
 800fbb6:	9a00      	ldr	r2, [sp, #0]
 800fbb8:	4313      	orrs	r3, r2
 800fbba:	606b      	str	r3, [r5, #4]
 800fbbc:	9801      	ldr	r0, [sp, #4]
 800fbbe:	f7f9 ff93 	bl	8009ae8 <__malloc_unlock>
 800fbc2:	e73d      	b.n	800fa40 <_realloc_r+0x14>
 800fbc4:	68a3      	ldr	r3, [r4, #8]
 800fbc6:	612b      	str	r3, [r5, #16]
 800fbc8:	68e3      	ldr	r3, [r4, #12]
 800fbca:	616b      	str	r3, [r5, #20]
 800fbcc:	2a24      	cmp	r2, #36	; 0x24
 800fbce:	d003      	beq.n	800fbd8 <_realloc_r+0x1ac>
 800fbd0:	002b      	movs	r3, r5
 800fbd2:	3410      	adds	r4, #16
 800fbd4:	3318      	adds	r3, #24
 800fbd6:	e7dd      	b.n	800fb94 <_realloc_r+0x168>
 800fbd8:	6923      	ldr	r3, [r4, #16]
 800fbda:	61ab      	str	r3, [r5, #24]
 800fbdc:	002b      	movs	r3, r5
 800fbde:	6962      	ldr	r2, [r4, #20]
 800fbe0:	3320      	adds	r3, #32
 800fbe2:	61ea      	str	r2, [r5, #28]
 800fbe4:	3418      	adds	r4, #24
 800fbe6:	e7d5      	b.n	800fb94 <_realloc_r+0x168>
 800fbe8:	0021      	movs	r1, r4
 800fbea:	0038      	movs	r0, r7
 800fbec:	f001 fbb5 	bl	801135a <memmove>
 800fbf0:	e7d6      	b.n	800fba0 <_realloc_r+0x174>
 800fbf2:	9a00      	ldr	r2, [sp, #0]
 800fbf4:	42b2      	cmp	r2, r6
 800fbf6:	dc35      	bgt.n	800fc64 <_realloc_r+0x238>
 800fbf8:	0028      	movs	r0, r5
 800fbfa:	68da      	ldr	r2, [r3, #12]
 800fbfc:	689b      	ldr	r3, [r3, #8]
 800fbfe:	3008      	adds	r0, #8
 800fc00:	60da      	str	r2, [r3, #12]
 800fc02:	6093      	str	r3, [r2, #8]
 800fc04:	68aa      	ldr	r2, [r5, #8]
 800fc06:	68eb      	ldr	r3, [r5, #12]
 800fc08:	60d3      	str	r3, [r2, #12]
 800fc0a:	609a      	str	r2, [r3, #8]
 800fc0c:	9a03      	ldr	r2, [sp, #12]
 800fc0e:	3a04      	subs	r2, #4
 800fc10:	2a24      	cmp	r2, #36	; 0x24
 800fc12:	d823      	bhi.n	800fc5c <_realloc_r+0x230>
 800fc14:	2a13      	cmp	r2, #19
 800fc16:	d907      	bls.n	800fc28 <_realloc_r+0x1fc>
 800fc18:	6823      	ldr	r3, [r4, #0]
 800fc1a:	60ab      	str	r3, [r5, #8]
 800fc1c:	6863      	ldr	r3, [r4, #4]
 800fc1e:	60eb      	str	r3, [r5, #12]
 800fc20:	2a1b      	cmp	r2, #27
 800fc22:	d809      	bhi.n	800fc38 <_realloc_r+0x20c>
 800fc24:	3408      	adds	r4, #8
 800fc26:	3008      	adds	r0, #8
 800fc28:	6823      	ldr	r3, [r4, #0]
 800fc2a:	6003      	str	r3, [r0, #0]
 800fc2c:	6863      	ldr	r3, [r4, #4]
 800fc2e:	6043      	str	r3, [r0, #4]
 800fc30:	68a3      	ldr	r3, [r4, #8]
 800fc32:	6083      	str	r3, [r0, #8]
 800fc34:	9502      	str	r5, [sp, #8]
 800fc36:	e75e      	b.n	800faf6 <_realloc_r+0xca>
 800fc38:	68a3      	ldr	r3, [r4, #8]
 800fc3a:	612b      	str	r3, [r5, #16]
 800fc3c:	68e3      	ldr	r3, [r4, #12]
 800fc3e:	616b      	str	r3, [r5, #20]
 800fc40:	2a24      	cmp	r2, #36	; 0x24
 800fc42:	d003      	beq.n	800fc4c <_realloc_r+0x220>
 800fc44:	0028      	movs	r0, r5
 800fc46:	3410      	adds	r4, #16
 800fc48:	3018      	adds	r0, #24
 800fc4a:	e7ed      	b.n	800fc28 <_realloc_r+0x1fc>
 800fc4c:	0028      	movs	r0, r5
 800fc4e:	6923      	ldr	r3, [r4, #16]
 800fc50:	3020      	adds	r0, #32
 800fc52:	61ab      	str	r3, [r5, #24]
 800fc54:	6963      	ldr	r3, [r4, #20]
 800fc56:	3418      	adds	r4, #24
 800fc58:	61eb      	str	r3, [r5, #28]
 800fc5a:	e7e5      	b.n	800fc28 <_realloc_r+0x1fc>
 800fc5c:	0021      	movs	r1, r4
 800fc5e:	f001 fb7c 	bl	801135a <memmove>
 800fc62:	e7e7      	b.n	800fc34 <_realloc_r+0x208>
 800fc64:	9b00      	ldr	r3, [sp, #0]
 800fc66:	42bb      	cmp	r3, r7
 800fc68:	dc31      	bgt.n	800fcce <_realloc_r+0x2a2>
 800fc6a:	0028      	movs	r0, r5
 800fc6c:	68aa      	ldr	r2, [r5, #8]
 800fc6e:	68eb      	ldr	r3, [r5, #12]
 800fc70:	3008      	adds	r0, #8
 800fc72:	60d3      	str	r3, [r2, #12]
 800fc74:	609a      	str	r2, [r3, #8]
 800fc76:	9a03      	ldr	r2, [sp, #12]
 800fc78:	3a04      	subs	r2, #4
 800fc7a:	2a24      	cmp	r2, #36	; 0x24
 800fc7c:	d823      	bhi.n	800fcc6 <_realloc_r+0x29a>
 800fc7e:	2a13      	cmp	r2, #19
 800fc80:	d907      	bls.n	800fc92 <_realloc_r+0x266>
 800fc82:	6823      	ldr	r3, [r4, #0]
 800fc84:	60ab      	str	r3, [r5, #8]
 800fc86:	6863      	ldr	r3, [r4, #4]
 800fc88:	60eb      	str	r3, [r5, #12]
 800fc8a:	2a1b      	cmp	r2, #27
 800fc8c:	d809      	bhi.n	800fca2 <_realloc_r+0x276>
 800fc8e:	3408      	adds	r4, #8
 800fc90:	3008      	adds	r0, #8
 800fc92:	6823      	ldr	r3, [r4, #0]
 800fc94:	6003      	str	r3, [r0, #0]
 800fc96:	6863      	ldr	r3, [r4, #4]
 800fc98:	6043      	str	r3, [r0, #4]
 800fc9a:	68a3      	ldr	r3, [r4, #8]
 800fc9c:	6083      	str	r3, [r0, #8]
 800fc9e:	003e      	movs	r6, r7
 800fca0:	e7c8      	b.n	800fc34 <_realloc_r+0x208>
 800fca2:	68a3      	ldr	r3, [r4, #8]
 800fca4:	612b      	str	r3, [r5, #16]
 800fca6:	68e3      	ldr	r3, [r4, #12]
 800fca8:	616b      	str	r3, [r5, #20]
 800fcaa:	2a24      	cmp	r2, #36	; 0x24
 800fcac:	d003      	beq.n	800fcb6 <_realloc_r+0x28a>
 800fcae:	0028      	movs	r0, r5
 800fcb0:	3410      	adds	r4, #16
 800fcb2:	3018      	adds	r0, #24
 800fcb4:	e7ed      	b.n	800fc92 <_realloc_r+0x266>
 800fcb6:	0028      	movs	r0, r5
 800fcb8:	6923      	ldr	r3, [r4, #16]
 800fcba:	3020      	adds	r0, #32
 800fcbc:	61ab      	str	r3, [r5, #24]
 800fcbe:	6963      	ldr	r3, [r4, #20]
 800fcc0:	3418      	adds	r4, #24
 800fcc2:	61eb      	str	r3, [r5, #28]
 800fcc4:	e7e5      	b.n	800fc92 <_realloc_r+0x266>
 800fcc6:	0021      	movs	r1, r4
 800fcc8:	f001 fb47 	bl	801135a <memmove>
 800fccc:	e7e7      	b.n	800fc9e <_realloc_r+0x272>
 800fcce:	9905      	ldr	r1, [sp, #20]
 800fcd0:	9801      	ldr	r0, [sp, #4]
 800fcd2:	f7f9 fced 	bl	80096b0 <_malloc_r>
 800fcd6:	1e07      	subs	r7, r0, #0
 800fcd8:	d100      	bne.n	800fcdc <_realloc_r+0x2b0>
 800fcda:	e76f      	b.n	800fbbc <_realloc_r+0x190>
 800fcdc:	0023      	movs	r3, r4
 800fcde:	2201      	movs	r2, #1
 800fce0:	3b08      	subs	r3, #8
 800fce2:	685b      	ldr	r3, [r3, #4]
 800fce4:	4393      	bics	r3, r2
 800fce6:	9a04      	ldr	r2, [sp, #16]
 800fce8:	18d3      	adds	r3, r2, r3
 800fcea:	0002      	movs	r2, r0
 800fcec:	3a08      	subs	r2, #8
 800fcee:	4293      	cmp	r3, r2
 800fcf0:	d105      	bne.n	800fcfe <_realloc_r+0x2d2>
 800fcf2:	685e      	ldr	r6, [r3, #4]
 800fcf4:	2303      	movs	r3, #3
 800fcf6:	439e      	bics	r6, r3
 800fcf8:	9b03      	ldr	r3, [sp, #12]
 800fcfa:	18f6      	adds	r6, r6, r3
 800fcfc:	e6fb      	b.n	800faf6 <_realloc_r+0xca>
 800fcfe:	9a03      	ldr	r2, [sp, #12]
 800fd00:	3a04      	subs	r2, #4
 800fd02:	2a24      	cmp	r2, #36	; 0x24
 800fd04:	d829      	bhi.n	800fd5a <_realloc_r+0x32e>
 800fd06:	0003      	movs	r3, r0
 800fd08:	0021      	movs	r1, r4
 800fd0a:	2a13      	cmp	r2, #19
 800fd0c:	d908      	bls.n	800fd20 <_realloc_r+0x2f4>
 800fd0e:	6823      	ldr	r3, [r4, #0]
 800fd10:	6003      	str	r3, [r0, #0]
 800fd12:	6863      	ldr	r3, [r4, #4]
 800fd14:	6043      	str	r3, [r0, #4]
 800fd16:	2a1b      	cmp	r2, #27
 800fd18:	d80d      	bhi.n	800fd36 <_realloc_r+0x30a>
 800fd1a:	0003      	movs	r3, r0
 800fd1c:	3108      	adds	r1, #8
 800fd1e:	3308      	adds	r3, #8
 800fd20:	680a      	ldr	r2, [r1, #0]
 800fd22:	601a      	str	r2, [r3, #0]
 800fd24:	684a      	ldr	r2, [r1, #4]
 800fd26:	605a      	str	r2, [r3, #4]
 800fd28:	688a      	ldr	r2, [r1, #8]
 800fd2a:	609a      	str	r2, [r3, #8]
 800fd2c:	0021      	movs	r1, r4
 800fd2e:	9801      	ldr	r0, [sp, #4]
 800fd30:	f7fb f89e 	bl	800ae70 <_free_r>
 800fd34:	e742      	b.n	800fbbc <_realloc_r+0x190>
 800fd36:	68a3      	ldr	r3, [r4, #8]
 800fd38:	6083      	str	r3, [r0, #8]
 800fd3a:	68e3      	ldr	r3, [r4, #12]
 800fd3c:	60c3      	str	r3, [r0, #12]
 800fd3e:	2a24      	cmp	r2, #36	; 0x24
 800fd40:	d003      	beq.n	800fd4a <_realloc_r+0x31e>
 800fd42:	0003      	movs	r3, r0
 800fd44:	3110      	adds	r1, #16
 800fd46:	3310      	adds	r3, #16
 800fd48:	e7ea      	b.n	800fd20 <_realloc_r+0x2f4>
 800fd4a:	6923      	ldr	r3, [r4, #16]
 800fd4c:	3118      	adds	r1, #24
 800fd4e:	6103      	str	r3, [r0, #16]
 800fd50:	0003      	movs	r3, r0
 800fd52:	6962      	ldr	r2, [r4, #20]
 800fd54:	3318      	adds	r3, #24
 800fd56:	6142      	str	r2, [r0, #20]
 800fd58:	e7e2      	b.n	800fd20 <_realloc_r+0x2f4>
 800fd5a:	0021      	movs	r1, r4
 800fd5c:	f001 fafd 	bl	801135a <memmove>
 800fd60:	e7e4      	b.n	800fd2c <_realloc_r+0x300>
 800fd62:	9e03      	ldr	r6, [sp, #12]
 800fd64:	e6c7      	b.n	800faf6 <_realloc_r+0xca>
 800fd66:	9902      	ldr	r1, [sp, #8]
 800fd68:	4306      	orrs	r6, r0
 800fd6a:	604e      	str	r6, [r1, #4]
 800fd6c:	6851      	ldr	r1, [r2, #4]
 800fd6e:	430b      	orrs	r3, r1
 800fd70:	6053      	str	r3, [r2, #4]
 800fd72:	e6da      	b.n	800fb2a <_realloc_r+0xfe>
 800fd74:	2000002c 	.word	0x2000002c

0800fd78 <_strtoul_l.constprop.0>:
 800fd78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd7a:	b087      	sub	sp, #28
 800fd7c:	9202      	str	r2, [sp, #8]
 800fd7e:	4a3e      	ldr	r2, [pc, #248]	; (800fe78 <_strtoul_l.constprop.0+0x100>)
 800fd80:	001e      	movs	r6, r3
 800fd82:	9101      	str	r1, [sp, #4]
 800fd84:	000b      	movs	r3, r1
 800fd86:	4694      	mov	ip, r2
 800fd88:	2108      	movs	r1, #8
 800fd8a:	9005      	str	r0, [sp, #20]
 800fd8c:	001a      	movs	r2, r3
 800fd8e:	4660      	mov	r0, ip
 800fd90:	7814      	ldrb	r4, [r2, #0]
 800fd92:	3301      	adds	r3, #1
 800fd94:	5d00      	ldrb	r0, [r0, r4]
 800fd96:	001d      	movs	r5, r3
 800fd98:	0007      	movs	r7, r0
 800fd9a:	400f      	ands	r7, r1
 800fd9c:	4208      	tst	r0, r1
 800fd9e:	d1f5      	bne.n	800fd8c <_strtoul_l.constprop.0+0x14>
 800fda0:	2c2d      	cmp	r4, #45	; 0x2d
 800fda2:	d13d      	bne.n	800fe20 <_strtoul_l.constprop.0+0xa8>
 800fda4:	2701      	movs	r7, #1
 800fda6:	781c      	ldrb	r4, [r3, #0]
 800fda8:	1c95      	adds	r5, r2, #2
 800fdaa:	2e00      	cmp	r6, #0
 800fdac:	d05f      	beq.n	800fe6e <_strtoul_l.constprop.0+0xf6>
 800fdae:	2e10      	cmp	r6, #16
 800fdb0:	d109      	bne.n	800fdc6 <_strtoul_l.constprop.0+0x4e>
 800fdb2:	2c30      	cmp	r4, #48	; 0x30
 800fdb4:	d107      	bne.n	800fdc6 <_strtoul_l.constprop.0+0x4e>
 800fdb6:	2220      	movs	r2, #32
 800fdb8:	782b      	ldrb	r3, [r5, #0]
 800fdba:	4393      	bics	r3, r2
 800fdbc:	2b58      	cmp	r3, #88	; 0x58
 800fdbe:	d151      	bne.n	800fe64 <_strtoul_l.constprop.0+0xec>
 800fdc0:	2610      	movs	r6, #16
 800fdc2:	786c      	ldrb	r4, [r5, #1]
 800fdc4:	3502      	adds	r5, #2
 800fdc6:	2001      	movs	r0, #1
 800fdc8:	0031      	movs	r1, r6
 800fdca:	4240      	negs	r0, r0
 800fdcc:	f7f0 f9b6 	bl	800013c <__udivsi3>
 800fdd0:	9003      	str	r0, [sp, #12]
 800fdd2:	2001      	movs	r0, #1
 800fdd4:	0031      	movs	r1, r6
 800fdd6:	4240      	negs	r0, r0
 800fdd8:	f7f0 fa36 	bl	8000248 <__aeabi_uidivmod>
 800fddc:	2300      	movs	r3, #0
 800fdde:	2201      	movs	r2, #1
 800fde0:	9104      	str	r1, [sp, #16]
 800fde2:	2101      	movs	r1, #1
 800fde4:	0018      	movs	r0, r3
 800fde6:	4694      	mov	ip, r2
 800fde8:	4249      	negs	r1, r1
 800fdea:	0022      	movs	r2, r4
 800fdec:	3a30      	subs	r2, #48	; 0x30
 800fdee:	2a09      	cmp	r2, #9
 800fdf0:	d903      	bls.n	800fdfa <_strtoul_l.constprop.0+0x82>
 800fdf2:	3a11      	subs	r2, #17
 800fdf4:	2a19      	cmp	r2, #25
 800fdf6:	d818      	bhi.n	800fe2a <_strtoul_l.constprop.0+0xb2>
 800fdf8:	320a      	adds	r2, #10
 800fdfa:	4296      	cmp	r6, r2
 800fdfc:	dd19      	ble.n	800fe32 <_strtoul_l.constprop.0+0xba>
 800fdfe:	1c5c      	adds	r4, r3, #1
 800fe00:	d00b      	beq.n	800fe1a <_strtoul_l.constprop.0+0xa2>
 800fe02:	9c03      	ldr	r4, [sp, #12]
 800fe04:	000b      	movs	r3, r1
 800fe06:	4284      	cmp	r4, r0
 800fe08:	d307      	bcc.n	800fe1a <_strtoul_l.constprop.0+0xa2>
 800fe0a:	d103      	bne.n	800fe14 <_strtoul_l.constprop.0+0x9c>
 800fe0c:	9c04      	ldr	r4, [sp, #16]
 800fe0e:	000b      	movs	r3, r1
 800fe10:	4294      	cmp	r4, r2
 800fe12:	db02      	blt.n	800fe1a <_strtoul_l.constprop.0+0xa2>
 800fe14:	4663      	mov	r3, ip
 800fe16:	4370      	muls	r0, r6
 800fe18:	1810      	adds	r0, r2, r0
 800fe1a:	782c      	ldrb	r4, [r5, #0]
 800fe1c:	3501      	adds	r5, #1
 800fe1e:	e7e4      	b.n	800fdea <_strtoul_l.constprop.0+0x72>
 800fe20:	2c2b      	cmp	r4, #43	; 0x2b
 800fe22:	d1c2      	bne.n	800fdaa <_strtoul_l.constprop.0+0x32>
 800fe24:	781c      	ldrb	r4, [r3, #0]
 800fe26:	1c95      	adds	r5, r2, #2
 800fe28:	e7bf      	b.n	800fdaa <_strtoul_l.constprop.0+0x32>
 800fe2a:	0022      	movs	r2, r4
 800fe2c:	3a61      	subs	r2, #97	; 0x61
 800fe2e:	2a19      	cmp	r2, #25
 800fe30:	d9e2      	bls.n	800fdf8 <_strtoul_l.constprop.0+0x80>
 800fe32:	1c5a      	adds	r2, r3, #1
 800fe34:	d108      	bne.n	800fe48 <_strtoul_l.constprop.0+0xd0>
 800fe36:	2222      	movs	r2, #34	; 0x22
 800fe38:	9905      	ldr	r1, [sp, #20]
 800fe3a:	0018      	movs	r0, r3
 800fe3c:	600a      	str	r2, [r1, #0]
 800fe3e:	9a02      	ldr	r2, [sp, #8]
 800fe40:	2a00      	cmp	r2, #0
 800fe42:	d109      	bne.n	800fe58 <_strtoul_l.constprop.0+0xe0>
 800fe44:	b007      	add	sp, #28
 800fe46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe48:	2f00      	cmp	r7, #0
 800fe4a:	d000      	beq.n	800fe4e <_strtoul_l.constprop.0+0xd6>
 800fe4c:	4240      	negs	r0, r0
 800fe4e:	9a02      	ldr	r2, [sp, #8]
 800fe50:	2a00      	cmp	r2, #0
 800fe52:	d0f7      	beq.n	800fe44 <_strtoul_l.constprop.0+0xcc>
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d001      	beq.n	800fe5c <_strtoul_l.constprop.0+0xe4>
 800fe58:	1e6b      	subs	r3, r5, #1
 800fe5a:	9301      	str	r3, [sp, #4]
 800fe5c:	9b02      	ldr	r3, [sp, #8]
 800fe5e:	9a01      	ldr	r2, [sp, #4]
 800fe60:	601a      	str	r2, [r3, #0]
 800fe62:	e7ef      	b.n	800fe44 <_strtoul_l.constprop.0+0xcc>
 800fe64:	2430      	movs	r4, #48	; 0x30
 800fe66:	2e00      	cmp	r6, #0
 800fe68:	d1ad      	bne.n	800fdc6 <_strtoul_l.constprop.0+0x4e>
 800fe6a:	3608      	adds	r6, #8
 800fe6c:	e7ab      	b.n	800fdc6 <_strtoul_l.constprop.0+0x4e>
 800fe6e:	2c30      	cmp	r4, #48	; 0x30
 800fe70:	d0a1      	beq.n	800fdb6 <_strtoul_l.constprop.0+0x3e>
 800fe72:	260a      	movs	r6, #10
 800fe74:	e7a7      	b.n	800fdc6 <_strtoul_l.constprop.0+0x4e>
 800fe76:	46c0      	nop			; (mov r8, r8)
 800fe78:	080130e9 	.word	0x080130e9

0800fe7c <_strtoul_r>:
 800fe7c:	b510      	push	{r4, lr}
 800fe7e:	f7ff ff7b 	bl	800fd78 <_strtoul_l.constprop.0>
 800fe82:	bd10      	pop	{r4, pc}

0800fe84 <_strtoll_l.constprop.0>:
 800fe84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe86:	b08d      	sub	sp, #52	; 0x34
 800fe88:	9203      	str	r2, [sp, #12]
 800fe8a:	4a53      	ldr	r2, [pc, #332]	; (800ffd8 <_strtoll_l.constprop.0+0x154>)
 800fe8c:	001e      	movs	r6, r3
 800fe8e:	9102      	str	r1, [sp, #8]
 800fe90:	000b      	movs	r3, r1
 800fe92:	4694      	mov	ip, r2
 800fe94:	2108      	movs	r1, #8
 800fe96:	900a      	str	r0, [sp, #40]	; 0x28
 800fe98:	001a      	movs	r2, r3
 800fe9a:	4660      	mov	r0, ip
 800fe9c:	7814      	ldrb	r4, [r2, #0]
 800fe9e:	3301      	adds	r3, #1
 800fea0:	5d00      	ldrb	r0, [r0, r4]
 800fea2:	001d      	movs	r5, r3
 800fea4:	0007      	movs	r7, r0
 800fea6:	400f      	ands	r7, r1
 800fea8:	4208      	tst	r0, r1
 800feaa:	d1f5      	bne.n	800fe98 <_strtoll_l.constprop.0+0x14>
 800feac:	2c2d      	cmp	r4, #45	; 0x2d
 800feae:	d153      	bne.n	800ff58 <_strtoll_l.constprop.0+0xd4>
 800feb0:	781c      	ldrb	r4, [r3, #0]
 800feb2:	2301      	movs	r3, #1
 800feb4:	1c95      	adds	r5, r2, #2
 800feb6:	9301      	str	r3, [sp, #4]
 800feb8:	2e00      	cmp	r6, #0
 800feba:	d100      	bne.n	800febe <_strtoll_l.constprop.0+0x3a>
 800febc:	e086      	b.n	800ffcc <_strtoll_l.constprop.0+0x148>
 800febe:	2e10      	cmp	r6, #16
 800fec0:	d10a      	bne.n	800fed8 <_strtoll_l.constprop.0+0x54>
 800fec2:	2c30      	cmp	r4, #48	; 0x30
 800fec4:	d108      	bne.n	800fed8 <_strtoll_l.constprop.0+0x54>
 800fec6:	2220      	movs	r2, #32
 800fec8:	782b      	ldrb	r3, [r5, #0]
 800feca:	4393      	bics	r3, r2
 800fecc:	2b58      	cmp	r3, #88	; 0x58
 800fece:	d000      	beq.n	800fed2 <_strtoll_l.constprop.0+0x4e>
 800fed0:	e076      	b.n	800ffc0 <_strtoll_l.constprop.0+0x13c>
 800fed2:	2610      	movs	r6, #16
 800fed4:	786c      	ldrb	r4, [r5, #1]
 800fed6:	3502      	adds	r5, #2
 800fed8:	2001      	movs	r0, #1
 800feda:	2300      	movs	r3, #0
 800fedc:	493f      	ldr	r1, [pc, #252]	; (800ffdc <_strtoll_l.constprop.0+0x158>)
 800fede:	9a01      	ldr	r2, [sp, #4]
 800fee0:	4240      	negs	r0, r0
 800fee2:	1812      	adds	r2, r2, r0
 800fee4:	414b      	adcs	r3, r1
 800fee6:	9204      	str	r2, [sp, #16]
 800fee8:	9305      	str	r3, [sp, #20]
 800feea:	9804      	ldr	r0, [sp, #16]
 800feec:	9905      	ldr	r1, [sp, #20]
 800feee:	17f3      	asrs	r3, r6, #31
 800fef0:	0032      	movs	r2, r6
 800fef2:	930b      	str	r3, [sp, #44]	; 0x2c
 800fef4:	f7f0 fad6 	bl	80004a4 <__aeabi_uldivmod>
 800fef8:	2300      	movs	r3, #0
 800fefa:	000f      	movs	r7, r1
 800fefc:	9008      	str	r0, [sp, #32]
 800fefe:	2100      	movs	r1, #0
 800ff00:	2000      	movs	r0, #0
 800ff02:	9209      	str	r2, [sp, #36]	; 0x24
 800ff04:	0022      	movs	r2, r4
 800ff06:	3a30      	subs	r2, #48	; 0x30
 800ff08:	2a09      	cmp	r2, #9
 800ff0a:	d82b      	bhi.n	800ff64 <_strtoll_l.constprop.0+0xe0>
 800ff0c:	0014      	movs	r4, r2
 800ff0e:	42a6      	cmp	r6, r4
 800ff10:	dd37      	ble.n	800ff82 <_strtoll_l.constprop.0+0xfe>
 800ff12:	1c5a      	adds	r2, r3, #1
 800ff14:	d01d      	beq.n	800ff52 <_strtoll_l.constprop.0+0xce>
 800ff16:	42b9      	cmp	r1, r7
 800ff18:	d830      	bhi.n	800ff7c <_strtoll_l.constprop.0+0xf8>
 800ff1a:	d102      	bne.n	800ff22 <_strtoll_l.constprop.0+0x9e>
 800ff1c:	9b08      	ldr	r3, [sp, #32]
 800ff1e:	4298      	cmp	r0, r3
 800ff20:	d82c      	bhi.n	800ff7c <_strtoll_l.constprop.0+0xf8>
 800ff22:	9b08      	ldr	r3, [sp, #32]
 800ff24:	4283      	cmp	r3, r0
 800ff26:	d106      	bne.n	800ff36 <_strtoll_l.constprop.0+0xb2>
 800ff28:	428f      	cmp	r7, r1
 800ff2a:	d104      	bne.n	800ff36 <_strtoll_l.constprop.0+0xb2>
 800ff2c:	2301      	movs	r3, #1
 800ff2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff30:	425b      	negs	r3, r3
 800ff32:	42a2      	cmp	r2, r4
 800ff34:	db0d      	blt.n	800ff52 <_strtoll_l.constprop.0+0xce>
 800ff36:	000b      	movs	r3, r1
 800ff38:	0002      	movs	r2, r0
 800ff3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ff3c:	0030      	movs	r0, r6
 800ff3e:	f7f0 fad1 	bl	80004e4 <__aeabi_lmul>
 800ff42:	17e3      	asrs	r3, r4, #31
 800ff44:	9406      	str	r4, [sp, #24]
 800ff46:	9307      	str	r3, [sp, #28]
 800ff48:	9b06      	ldr	r3, [sp, #24]
 800ff4a:	9c07      	ldr	r4, [sp, #28]
 800ff4c:	18c0      	adds	r0, r0, r3
 800ff4e:	4161      	adcs	r1, r4
 800ff50:	2301      	movs	r3, #1
 800ff52:	782c      	ldrb	r4, [r5, #0]
 800ff54:	3501      	adds	r5, #1
 800ff56:	e7d5      	b.n	800ff04 <_strtoll_l.constprop.0+0x80>
 800ff58:	9701      	str	r7, [sp, #4]
 800ff5a:	2c2b      	cmp	r4, #43	; 0x2b
 800ff5c:	d1ac      	bne.n	800feb8 <_strtoll_l.constprop.0+0x34>
 800ff5e:	781c      	ldrb	r4, [r3, #0]
 800ff60:	1c95      	adds	r5, r2, #2
 800ff62:	e7a9      	b.n	800feb8 <_strtoll_l.constprop.0+0x34>
 800ff64:	0022      	movs	r2, r4
 800ff66:	3a41      	subs	r2, #65	; 0x41
 800ff68:	2a19      	cmp	r2, #25
 800ff6a:	d801      	bhi.n	800ff70 <_strtoll_l.constprop.0+0xec>
 800ff6c:	3c37      	subs	r4, #55	; 0x37
 800ff6e:	e7ce      	b.n	800ff0e <_strtoll_l.constprop.0+0x8a>
 800ff70:	0022      	movs	r2, r4
 800ff72:	3a61      	subs	r2, #97	; 0x61
 800ff74:	2a19      	cmp	r2, #25
 800ff76:	d804      	bhi.n	800ff82 <_strtoll_l.constprop.0+0xfe>
 800ff78:	3c57      	subs	r4, #87	; 0x57
 800ff7a:	e7c8      	b.n	800ff0e <_strtoll_l.constprop.0+0x8a>
 800ff7c:	2301      	movs	r3, #1
 800ff7e:	425b      	negs	r3, r3
 800ff80:	e7e7      	b.n	800ff52 <_strtoll_l.constprop.0+0xce>
 800ff82:	1c5a      	adds	r2, r3, #1
 800ff84:	d109      	bne.n	800ff9a <_strtoll_l.constprop.0+0x116>
 800ff86:	9804      	ldr	r0, [sp, #16]
 800ff88:	9905      	ldr	r1, [sp, #20]
 800ff8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ff8c:	3323      	adds	r3, #35	; 0x23
 800ff8e:	6013      	str	r3, [r2, #0]
 800ff90:	9b03      	ldr	r3, [sp, #12]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d10e      	bne.n	800ffb4 <_strtoll_l.constprop.0+0x130>
 800ff96:	b00d      	add	sp, #52	; 0x34
 800ff98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff9a:	9a01      	ldr	r2, [sp, #4]
 800ff9c:	2a00      	cmp	r2, #0
 800ff9e:	d004      	beq.n	800ffaa <_strtoll_l.constprop.0+0x126>
 800ffa0:	0006      	movs	r6, r0
 800ffa2:	000f      	movs	r7, r1
 800ffa4:	2100      	movs	r1, #0
 800ffa6:	4270      	negs	r0, r6
 800ffa8:	41b9      	sbcs	r1, r7
 800ffaa:	9a03      	ldr	r2, [sp, #12]
 800ffac:	2a00      	cmp	r2, #0
 800ffae:	d0f2      	beq.n	800ff96 <_strtoll_l.constprop.0+0x112>
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d001      	beq.n	800ffb8 <_strtoll_l.constprop.0+0x134>
 800ffb4:	1e6b      	subs	r3, r5, #1
 800ffb6:	9302      	str	r3, [sp, #8]
 800ffb8:	9b03      	ldr	r3, [sp, #12]
 800ffba:	9a02      	ldr	r2, [sp, #8]
 800ffbc:	601a      	str	r2, [r3, #0]
 800ffbe:	e7ea      	b.n	800ff96 <_strtoll_l.constprop.0+0x112>
 800ffc0:	2430      	movs	r4, #48	; 0x30
 800ffc2:	2e00      	cmp	r6, #0
 800ffc4:	d000      	beq.n	800ffc8 <_strtoll_l.constprop.0+0x144>
 800ffc6:	e787      	b.n	800fed8 <_strtoll_l.constprop.0+0x54>
 800ffc8:	3608      	adds	r6, #8
 800ffca:	e785      	b.n	800fed8 <_strtoll_l.constprop.0+0x54>
 800ffcc:	2c30      	cmp	r4, #48	; 0x30
 800ffce:	d100      	bne.n	800ffd2 <_strtoll_l.constprop.0+0x14e>
 800ffd0:	e779      	b.n	800fec6 <_strtoll_l.constprop.0+0x42>
 800ffd2:	260a      	movs	r6, #10
 800ffd4:	e780      	b.n	800fed8 <_strtoll_l.constprop.0+0x54>
 800ffd6:	46c0      	nop			; (mov r8, r8)
 800ffd8:	080130e9 	.word	0x080130e9
 800ffdc:	7fffffff 	.word	0x7fffffff

0800ffe0 <_strtoll_r>:
 800ffe0:	b510      	push	{r4, lr}
 800ffe2:	f7ff ff4f 	bl	800fe84 <_strtoll_l.constprop.0>
 800ffe6:	bd10      	pop	{r4, pc}

0800ffe8 <_strtoull_l.constprop.0>:
 800ffe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffea:	b08b      	sub	sp, #44	; 0x2c
 800ffec:	9202      	str	r2, [sp, #8]
 800ffee:	4a54      	ldr	r2, [pc, #336]	; (8010140 <_strtoull_l.constprop.0+0x158>)
 800fff0:	001e      	movs	r6, r3
 800fff2:	9101      	str	r1, [sp, #4]
 800fff4:	000b      	movs	r3, r1
 800fff6:	4694      	mov	ip, r2
 800fff8:	2108      	movs	r1, #8
 800fffa:	9009      	str	r0, [sp, #36]	; 0x24
 800fffc:	001a      	movs	r2, r3
 800fffe:	4660      	mov	r0, ip
 8010000:	7814      	ldrb	r4, [r2, #0]
 8010002:	3301      	adds	r3, #1
 8010004:	5d00      	ldrb	r0, [r0, r4]
 8010006:	001d      	movs	r5, r3
 8010008:	0007      	movs	r7, r0
 801000a:	400f      	ands	r7, r1
 801000c:	4208      	tst	r0, r1
 801000e:	d1f5      	bne.n	800fffc <_strtoull_l.constprop.0+0x14>
 8010010:	2c2d      	cmp	r4, #45	; 0x2d
 8010012:	d154      	bne.n	80100be <_strtoull_l.constprop.0+0xd6>
 8010014:	781c      	ldrb	r4, [r3, #0]
 8010016:	2301      	movs	r3, #1
 8010018:	1c95      	adds	r5, r2, #2
 801001a:	9306      	str	r3, [sp, #24]
 801001c:	2e00      	cmp	r6, #0
 801001e:	d100      	bne.n	8010022 <_strtoull_l.constprop.0+0x3a>
 8010020:	e088      	b.n	8010134 <_strtoull_l.constprop.0+0x14c>
 8010022:	2e10      	cmp	r6, #16
 8010024:	d10a      	bne.n	801003c <_strtoull_l.constprop.0+0x54>
 8010026:	2c30      	cmp	r4, #48	; 0x30
 8010028:	d108      	bne.n	801003c <_strtoull_l.constprop.0+0x54>
 801002a:	2220      	movs	r2, #32
 801002c:	782b      	ldrb	r3, [r5, #0]
 801002e:	4393      	bics	r3, r2
 8010030:	2b58      	cmp	r3, #88	; 0x58
 8010032:	d000      	beq.n	8010036 <_strtoull_l.constprop.0+0x4e>
 8010034:	e078      	b.n	8010128 <_strtoull_l.constprop.0+0x140>
 8010036:	2610      	movs	r6, #16
 8010038:	786c      	ldrb	r4, [r5, #1]
 801003a:	3502      	adds	r5, #2
 801003c:	17f7      	asrs	r7, r6, #31
 801003e:	0032      	movs	r2, r6
 8010040:	003b      	movs	r3, r7
 8010042:	2001      	movs	r0, #1
 8010044:	4240      	negs	r0, r0
 8010046:	17c1      	asrs	r1, r0, #31
 8010048:	f7f0 fa2c 	bl	80004a4 <__aeabi_uldivmod>
 801004c:	0032      	movs	r2, r6
 801004e:	9007      	str	r0, [sp, #28]
 8010050:	9103      	str	r1, [sp, #12]
 8010052:	003b      	movs	r3, r7
 8010054:	2001      	movs	r0, #1
 8010056:	4240      	negs	r0, r0
 8010058:	17c1      	asrs	r1, r0, #31
 801005a:	f7f0 fa23 	bl	80004a4 <__aeabi_uldivmod>
 801005e:	2300      	movs	r3, #0
 8010060:	2000      	movs	r0, #0
 8010062:	2100      	movs	r1, #0
 8010064:	9208      	str	r2, [sp, #32]
 8010066:	0022      	movs	r2, r4
 8010068:	3a30      	subs	r2, #48	; 0x30
 801006a:	2a09      	cmp	r2, #9
 801006c:	d82d      	bhi.n	80100ca <_strtoull_l.constprop.0+0xe2>
 801006e:	0014      	movs	r4, r2
 8010070:	42a6      	cmp	r6, r4
 8010072:	dd39      	ble.n	80100e8 <_strtoull_l.constprop.0+0x100>
 8010074:	1c5a      	adds	r2, r3, #1
 8010076:	d01f      	beq.n	80100b8 <_strtoull_l.constprop.0+0xd0>
 8010078:	9b03      	ldr	r3, [sp, #12]
 801007a:	4299      	cmp	r1, r3
 801007c:	d831      	bhi.n	80100e2 <_strtoull_l.constprop.0+0xfa>
 801007e:	d102      	bne.n	8010086 <_strtoull_l.constprop.0+0x9e>
 8010080:	9b07      	ldr	r3, [sp, #28]
 8010082:	4298      	cmp	r0, r3
 8010084:	d82d      	bhi.n	80100e2 <_strtoull_l.constprop.0+0xfa>
 8010086:	9b07      	ldr	r3, [sp, #28]
 8010088:	4283      	cmp	r3, r0
 801008a:	d107      	bne.n	801009c <_strtoull_l.constprop.0+0xb4>
 801008c:	9b03      	ldr	r3, [sp, #12]
 801008e:	428b      	cmp	r3, r1
 8010090:	d104      	bne.n	801009c <_strtoull_l.constprop.0+0xb4>
 8010092:	2301      	movs	r3, #1
 8010094:	9a08      	ldr	r2, [sp, #32]
 8010096:	425b      	negs	r3, r3
 8010098:	42a2      	cmp	r2, r4
 801009a:	db0d      	blt.n	80100b8 <_strtoull_l.constprop.0+0xd0>
 801009c:	000b      	movs	r3, r1
 801009e:	0002      	movs	r2, r0
 80100a0:	0039      	movs	r1, r7
 80100a2:	0030      	movs	r0, r6
 80100a4:	f7f0 fa1e 	bl	80004e4 <__aeabi_lmul>
 80100a8:	17e3      	asrs	r3, r4, #31
 80100aa:	9404      	str	r4, [sp, #16]
 80100ac:	9305      	str	r3, [sp, #20]
 80100ae:	9b04      	ldr	r3, [sp, #16]
 80100b0:	9c05      	ldr	r4, [sp, #20]
 80100b2:	18c0      	adds	r0, r0, r3
 80100b4:	4161      	adcs	r1, r4
 80100b6:	2301      	movs	r3, #1
 80100b8:	782c      	ldrb	r4, [r5, #0]
 80100ba:	3501      	adds	r5, #1
 80100bc:	e7d3      	b.n	8010066 <_strtoull_l.constprop.0+0x7e>
 80100be:	9706      	str	r7, [sp, #24]
 80100c0:	2c2b      	cmp	r4, #43	; 0x2b
 80100c2:	d1ab      	bne.n	801001c <_strtoull_l.constprop.0+0x34>
 80100c4:	781c      	ldrb	r4, [r3, #0]
 80100c6:	1c95      	adds	r5, r2, #2
 80100c8:	e7a8      	b.n	801001c <_strtoull_l.constprop.0+0x34>
 80100ca:	0022      	movs	r2, r4
 80100cc:	3a41      	subs	r2, #65	; 0x41
 80100ce:	2a19      	cmp	r2, #25
 80100d0:	d801      	bhi.n	80100d6 <_strtoull_l.constprop.0+0xee>
 80100d2:	3c37      	subs	r4, #55	; 0x37
 80100d4:	e7cc      	b.n	8010070 <_strtoull_l.constprop.0+0x88>
 80100d6:	0022      	movs	r2, r4
 80100d8:	3a61      	subs	r2, #97	; 0x61
 80100da:	2a19      	cmp	r2, #25
 80100dc:	d804      	bhi.n	80100e8 <_strtoull_l.constprop.0+0x100>
 80100de:	3c57      	subs	r4, #87	; 0x57
 80100e0:	e7c6      	b.n	8010070 <_strtoull_l.constprop.0+0x88>
 80100e2:	2301      	movs	r3, #1
 80100e4:	425b      	negs	r3, r3
 80100e6:	e7e7      	b.n	80100b8 <_strtoull_l.constprop.0+0xd0>
 80100e8:	1c5a      	adds	r2, r3, #1
 80100ea:	d10a      	bne.n	8010102 <_strtoull_l.constprop.0+0x11a>
 80100ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80100ee:	3323      	adds	r3, #35	; 0x23
 80100f0:	6013      	str	r3, [r2, #0]
 80100f2:	9b02      	ldr	r3, [sp, #8]
 80100f4:	2001      	movs	r0, #1
 80100f6:	4240      	negs	r0, r0
 80100f8:	17c1      	asrs	r1, r0, #31
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d10e      	bne.n	801011c <_strtoull_l.constprop.0+0x134>
 80100fe:	b00b      	add	sp, #44	; 0x2c
 8010100:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010102:	9a06      	ldr	r2, [sp, #24]
 8010104:	2a00      	cmp	r2, #0
 8010106:	d004      	beq.n	8010112 <_strtoull_l.constprop.0+0x12a>
 8010108:	0006      	movs	r6, r0
 801010a:	000f      	movs	r7, r1
 801010c:	2100      	movs	r1, #0
 801010e:	4270      	negs	r0, r6
 8010110:	41b9      	sbcs	r1, r7
 8010112:	9a02      	ldr	r2, [sp, #8]
 8010114:	2a00      	cmp	r2, #0
 8010116:	d0f2      	beq.n	80100fe <_strtoull_l.constprop.0+0x116>
 8010118:	2b00      	cmp	r3, #0
 801011a:	d001      	beq.n	8010120 <_strtoull_l.constprop.0+0x138>
 801011c:	1e6b      	subs	r3, r5, #1
 801011e:	9301      	str	r3, [sp, #4]
 8010120:	9b02      	ldr	r3, [sp, #8]
 8010122:	9a01      	ldr	r2, [sp, #4]
 8010124:	601a      	str	r2, [r3, #0]
 8010126:	e7ea      	b.n	80100fe <_strtoull_l.constprop.0+0x116>
 8010128:	2430      	movs	r4, #48	; 0x30
 801012a:	2e00      	cmp	r6, #0
 801012c:	d000      	beq.n	8010130 <_strtoull_l.constprop.0+0x148>
 801012e:	e785      	b.n	801003c <_strtoull_l.constprop.0+0x54>
 8010130:	3608      	adds	r6, #8
 8010132:	e783      	b.n	801003c <_strtoull_l.constprop.0+0x54>
 8010134:	2c30      	cmp	r4, #48	; 0x30
 8010136:	d100      	bne.n	801013a <_strtoull_l.constprop.0+0x152>
 8010138:	e777      	b.n	801002a <_strtoull_l.constprop.0+0x42>
 801013a:	260a      	movs	r6, #10
 801013c:	e77e      	b.n	801003c <_strtoull_l.constprop.0+0x54>
 801013e:	46c0      	nop			; (mov r8, r8)
 8010140:	080130e9 	.word	0x080130e9

08010144 <_strtoull_r>:
 8010144:	b510      	push	{r4, lr}
 8010146:	f7ff ff4f 	bl	800ffe8 <_strtoull_l.constprop.0>
 801014a:	bd10      	pop	{r4, pc}

0801014c <_mbrtowc_r>:
 801014c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801014e:	0004      	movs	r4, r0
 8010150:	0010      	movs	r0, r2
 8010152:	4a0b      	ldr	r2, [pc, #44]	; (8010180 <_mbrtowc_r+0x34>)
 8010154:	9d06      	ldr	r5, [sp, #24]
 8010156:	32e4      	adds	r2, #228	; 0xe4
 8010158:	6816      	ldr	r6, [r2, #0]
 801015a:	2800      	cmp	r0, #0
 801015c:	d10c      	bne.n	8010178 <_mbrtowc_r+0x2c>
 801015e:	2301      	movs	r3, #1
 8010160:	0001      	movs	r1, r0
 8010162:	4a08      	ldr	r2, [pc, #32]	; (8010184 <_mbrtowc_r+0x38>)
 8010164:	9500      	str	r5, [sp, #0]
 8010166:	0020      	movs	r0, r4
 8010168:	47b0      	blx	r6
 801016a:	1c43      	adds	r3, r0, #1
 801016c:	d103      	bne.n	8010176 <_mbrtowc_r+0x2a>
 801016e:	2300      	movs	r3, #0
 8010170:	602b      	str	r3, [r5, #0]
 8010172:	338a      	adds	r3, #138	; 0x8a
 8010174:	6023      	str	r3, [r4, #0]
 8010176:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8010178:	0002      	movs	r2, r0
 801017a:	9500      	str	r5, [sp, #0]
 801017c:	e7f3      	b.n	8010166 <_mbrtowc_r+0x1a>
 801017e:	46c0      	nop			; (mov r8, r8)
 8010180:	20000448 	.word	0x20000448
 8010184:	08013473 	.word	0x08013473

08010188 <iswspace>:
 8010188:	b510      	push	{r4, lr}
 801018a:	2100      	movs	r1, #0
 801018c:	f000 f802 	bl	8010194 <iswspace_l>
 8010190:	bd10      	pop	{r4, pc}
	...

08010194 <iswspace_l>:
 8010194:	0003      	movs	r3, r0
 8010196:	2000      	movs	r0, #0
 8010198:	2bff      	cmp	r3, #255	; 0xff
 801019a:	d803      	bhi.n	80101a4 <iswspace_l+0x10>
 801019c:	4a02      	ldr	r2, [pc, #8]	; (80101a8 <iswspace_l+0x14>)
 801019e:	5cd0      	ldrb	r0, [r2, r3]
 80101a0:	2308      	movs	r3, #8
 80101a2:	4018      	ands	r0, r3
 80101a4:	4770      	bx	lr
 80101a6:	46c0      	nop			; (mov r8, r8)
 80101a8:	080130e9 	.word	0x080130e9

080101ac <fiprintf>:
 80101ac:	b40e      	push	{r1, r2, r3}
 80101ae:	b517      	push	{r0, r1, r2, r4, lr}
 80101b0:	4c05      	ldr	r4, [pc, #20]	; (80101c8 <fiprintf+0x1c>)
 80101b2:	ab05      	add	r3, sp, #20
 80101b4:	cb04      	ldmia	r3!, {r2}
 80101b6:	0001      	movs	r1, r0
 80101b8:	6820      	ldr	r0, [r4, #0]
 80101ba:	9301      	str	r3, [sp, #4]
 80101bc:	f000 f954 	bl	8010468 <_vfiprintf_r>
 80101c0:	bc1e      	pop	{r1, r2, r3, r4}
 80101c2:	bc08      	pop	{r3}
 80101c4:	b003      	add	sp, #12
 80101c6:	4718      	bx	r3
 80101c8:	200006d8 	.word	0x200006d8

080101cc <__ssprint_r>:
 80101cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101ce:	6813      	ldr	r3, [r2, #0]
 80101d0:	b087      	sub	sp, #28
 80101d2:	0017      	movs	r7, r2
 80101d4:	9303      	str	r3, [sp, #12]
 80101d6:	6893      	ldr	r3, [r2, #8]
 80101d8:	2200      	movs	r2, #0
 80101da:	000c      	movs	r4, r1
 80101dc:	9005      	str	r0, [sp, #20]
 80101de:	9202      	str	r2, [sp, #8]
 80101e0:	9201      	str	r2, [sp, #4]
 80101e2:	4293      	cmp	r3, r2
 80101e4:	d10d      	bne.n	8010202 <__ssprint_r+0x36>
 80101e6:	2000      	movs	r0, #0
 80101e8:	2300      	movs	r3, #0
 80101ea:	607b      	str	r3, [r7, #4]
 80101ec:	b007      	add	sp, #28
 80101ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101f0:	9b03      	ldr	r3, [sp, #12]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	9302      	str	r3, [sp, #8]
 80101f6:	9b03      	ldr	r3, [sp, #12]
 80101f8:	685b      	ldr	r3, [r3, #4]
 80101fa:	9301      	str	r3, [sp, #4]
 80101fc:	9b03      	ldr	r3, [sp, #12]
 80101fe:	3308      	adds	r3, #8
 8010200:	9303      	str	r3, [sp, #12]
 8010202:	9a01      	ldr	r2, [sp, #4]
 8010204:	68a6      	ldr	r6, [r4, #8]
 8010206:	6823      	ldr	r3, [r4, #0]
 8010208:	2a00      	cmp	r2, #0
 801020a:	d0f1      	beq.n	80101f0 <__ssprint_r+0x24>
 801020c:	42b2      	cmp	r2, r6
 801020e:	d32e      	bcc.n	801026e <__ssprint_r+0xa2>
 8010210:	2190      	movs	r1, #144	; 0x90
 8010212:	89a2      	ldrh	r2, [r4, #12]
 8010214:	00c9      	lsls	r1, r1, #3
 8010216:	420a      	tst	r2, r1
 8010218:	d029      	beq.n	801026e <__ssprint_r+0xa2>
 801021a:	2003      	movs	r0, #3
 801021c:	6921      	ldr	r1, [r4, #16]
 801021e:	1a5b      	subs	r3, r3, r1
 8010220:	9304      	str	r3, [sp, #16]
 8010222:	6963      	ldr	r3, [r4, #20]
 8010224:	4343      	muls	r3, r0
 8010226:	0fdd      	lsrs	r5, r3, #31
 8010228:	18ed      	adds	r5, r5, r3
 801022a:	9b04      	ldr	r3, [sp, #16]
 801022c:	9801      	ldr	r0, [sp, #4]
 801022e:	3301      	adds	r3, #1
 8010230:	181b      	adds	r3, r3, r0
 8010232:	106d      	asrs	r5, r5, #1
 8010234:	42ab      	cmp	r3, r5
 8010236:	d900      	bls.n	801023a <__ssprint_r+0x6e>
 8010238:	001d      	movs	r5, r3
 801023a:	0552      	lsls	r2, r2, #21
 801023c:	d532      	bpl.n	80102a4 <__ssprint_r+0xd8>
 801023e:	0029      	movs	r1, r5
 8010240:	9805      	ldr	r0, [sp, #20]
 8010242:	f7f9 fa35 	bl	80096b0 <_malloc_r>
 8010246:	1e06      	subs	r6, r0, #0
 8010248:	d036      	beq.n	80102b8 <__ssprint_r+0xec>
 801024a:	9a04      	ldr	r2, [sp, #16]
 801024c:	6921      	ldr	r1, [r4, #16]
 801024e:	f7fa fd94 	bl	800ad7a <memcpy>
 8010252:	89a2      	ldrh	r2, [r4, #12]
 8010254:	4b1e      	ldr	r3, [pc, #120]	; (80102d0 <__ssprint_r+0x104>)
 8010256:	401a      	ands	r2, r3
 8010258:	2380      	movs	r3, #128	; 0x80
 801025a:	4313      	orrs	r3, r2
 801025c:	81a3      	strh	r3, [r4, #12]
 801025e:	9b04      	ldr	r3, [sp, #16]
 8010260:	6126      	str	r6, [r4, #16]
 8010262:	18f6      	adds	r6, r6, r3
 8010264:	6026      	str	r6, [r4, #0]
 8010266:	6165      	str	r5, [r4, #20]
 8010268:	9e01      	ldr	r6, [sp, #4]
 801026a:	1aed      	subs	r5, r5, r3
 801026c:	60a5      	str	r5, [r4, #8]
 801026e:	9b01      	ldr	r3, [sp, #4]
 8010270:	429e      	cmp	r6, r3
 8010272:	d900      	bls.n	8010276 <__ssprint_r+0xaa>
 8010274:	001e      	movs	r6, r3
 8010276:	0032      	movs	r2, r6
 8010278:	9902      	ldr	r1, [sp, #8]
 801027a:	6820      	ldr	r0, [r4, #0]
 801027c:	f001 f86d 	bl	801135a <memmove>
 8010280:	9a01      	ldr	r2, [sp, #4]
 8010282:	68a3      	ldr	r3, [r4, #8]
 8010284:	4694      	mov	ip, r2
 8010286:	1b9b      	subs	r3, r3, r6
 8010288:	60a3      	str	r3, [r4, #8]
 801028a:	6823      	ldr	r3, [r4, #0]
 801028c:	199b      	adds	r3, r3, r6
 801028e:	6023      	str	r3, [r4, #0]
 8010290:	9b02      	ldr	r3, [sp, #8]
 8010292:	4463      	add	r3, ip
 8010294:	9302      	str	r3, [sp, #8]
 8010296:	68bb      	ldr	r3, [r7, #8]
 8010298:	1a9b      	subs	r3, r3, r2
 801029a:	60bb      	str	r3, [r7, #8]
 801029c:	d0a3      	beq.n	80101e6 <__ssprint_r+0x1a>
 801029e:	2300      	movs	r3, #0
 80102a0:	9301      	str	r3, [sp, #4]
 80102a2:	e7ae      	b.n	8010202 <__ssprint_r+0x36>
 80102a4:	002a      	movs	r2, r5
 80102a6:	9805      	ldr	r0, [sp, #20]
 80102a8:	f7ff fbc0 	bl	800fa2c <_realloc_r>
 80102ac:	1e06      	subs	r6, r0, #0
 80102ae:	d1d6      	bne.n	801025e <__ssprint_r+0x92>
 80102b0:	6921      	ldr	r1, [r4, #16]
 80102b2:	9805      	ldr	r0, [sp, #20]
 80102b4:	f7fa fddc 	bl	800ae70 <_free_r>
 80102b8:	230c      	movs	r3, #12
 80102ba:	9a05      	ldr	r2, [sp, #20]
 80102bc:	2001      	movs	r0, #1
 80102be:	6013      	str	r3, [r2, #0]
 80102c0:	89a2      	ldrh	r2, [r4, #12]
 80102c2:	3334      	adds	r3, #52	; 0x34
 80102c4:	4313      	orrs	r3, r2
 80102c6:	81a3      	strh	r3, [r4, #12]
 80102c8:	2300      	movs	r3, #0
 80102ca:	4240      	negs	r0, r0
 80102cc:	60bb      	str	r3, [r7, #8]
 80102ce:	e78b      	b.n	80101e8 <__ssprint_r+0x1c>
 80102d0:	fffffb7f 	.word	0xfffffb7f

080102d4 <_sungetc_r>:
 80102d4:	b570      	push	{r4, r5, r6, lr}
 80102d6:	0014      	movs	r4, r2
 80102d8:	1c4b      	adds	r3, r1, #1
 80102da:	d103      	bne.n	80102e4 <_sungetc_r+0x10>
 80102dc:	2501      	movs	r5, #1
 80102de:	426d      	negs	r5, r5
 80102e0:	0028      	movs	r0, r5
 80102e2:	bd70      	pop	{r4, r5, r6, pc}
 80102e4:	8993      	ldrh	r3, [r2, #12]
 80102e6:	2220      	movs	r2, #32
 80102e8:	4393      	bics	r3, r2
 80102ea:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80102ec:	81a3      	strh	r3, [r4, #12]
 80102ee:	b2ce      	uxtb	r6, r1
 80102f0:	6863      	ldr	r3, [r4, #4]
 80102f2:	b2cd      	uxtb	r5, r1
 80102f4:	2a00      	cmp	r2, #0
 80102f6:	d010      	beq.n	801031a <_sungetc_r+0x46>
 80102f8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80102fa:	429a      	cmp	r2, r3
 80102fc:	dd07      	ble.n	801030e <_sungetc_r+0x3a>
 80102fe:	6823      	ldr	r3, [r4, #0]
 8010300:	3b01      	subs	r3, #1
 8010302:	6023      	str	r3, [r4, #0]
 8010304:	701e      	strb	r6, [r3, #0]
 8010306:	6863      	ldr	r3, [r4, #4]
 8010308:	3301      	adds	r3, #1
 801030a:	6063      	str	r3, [r4, #4]
 801030c:	e7e8      	b.n	80102e0 <_sungetc_r+0xc>
 801030e:	0021      	movs	r1, r4
 8010310:	f000 ff1a 	bl	8011148 <__submore>
 8010314:	2800      	cmp	r0, #0
 8010316:	d0f2      	beq.n	80102fe <_sungetc_r+0x2a>
 8010318:	e7e0      	b.n	80102dc <_sungetc_r+0x8>
 801031a:	6921      	ldr	r1, [r4, #16]
 801031c:	6822      	ldr	r2, [r4, #0]
 801031e:	2900      	cmp	r1, #0
 8010320:	d007      	beq.n	8010332 <_sungetc_r+0x5e>
 8010322:	4291      	cmp	r1, r2
 8010324:	d205      	bcs.n	8010332 <_sungetc_r+0x5e>
 8010326:	1e51      	subs	r1, r2, #1
 8010328:	7808      	ldrb	r0, [r1, #0]
 801032a:	42a8      	cmp	r0, r5
 801032c:	d101      	bne.n	8010332 <_sungetc_r+0x5e>
 801032e:	6021      	str	r1, [r4, #0]
 8010330:	e7ea      	b.n	8010308 <_sungetc_r+0x34>
 8010332:	63e3      	str	r3, [r4, #60]	; 0x3c
 8010334:	0023      	movs	r3, r4
 8010336:	3340      	adds	r3, #64	; 0x40
 8010338:	6323      	str	r3, [r4, #48]	; 0x30
 801033a:	2303      	movs	r3, #3
 801033c:	6363      	str	r3, [r4, #52]	; 0x34
 801033e:	0023      	movs	r3, r4
 8010340:	3342      	adds	r3, #66	; 0x42
 8010342:	63a2      	str	r2, [r4, #56]	; 0x38
 8010344:	701e      	strb	r6, [r3, #0]
 8010346:	6023      	str	r3, [r4, #0]
 8010348:	2301      	movs	r3, #1
 801034a:	e7de      	b.n	801030a <_sungetc_r+0x36>

0801034c <__ssrefill_r>:
 801034c:	b510      	push	{r4, lr}
 801034e:	000c      	movs	r4, r1
 8010350:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8010352:	2900      	cmp	r1, #0
 8010354:	d00e      	beq.n	8010374 <__ssrefill_r+0x28>
 8010356:	0023      	movs	r3, r4
 8010358:	3340      	adds	r3, #64	; 0x40
 801035a:	4299      	cmp	r1, r3
 801035c:	d001      	beq.n	8010362 <__ssrefill_r+0x16>
 801035e:	f7fa fd87 	bl	800ae70 <_free_r>
 8010362:	2000      	movs	r0, #0
 8010364:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010366:	6320      	str	r0, [r4, #48]	; 0x30
 8010368:	6063      	str	r3, [r4, #4]
 801036a:	4283      	cmp	r3, r0
 801036c:	d002      	beq.n	8010374 <__ssrefill_r+0x28>
 801036e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010370:	6023      	str	r3, [r4, #0]
 8010372:	bd10      	pop	{r4, pc}
 8010374:	6923      	ldr	r3, [r4, #16]
 8010376:	2001      	movs	r0, #1
 8010378:	6023      	str	r3, [r4, #0]
 801037a:	2300      	movs	r3, #0
 801037c:	89a2      	ldrh	r2, [r4, #12]
 801037e:	6063      	str	r3, [r4, #4]
 8010380:	3320      	adds	r3, #32
 8010382:	4313      	orrs	r3, r2
 8010384:	81a3      	strh	r3, [r4, #12]
 8010386:	4240      	negs	r0, r0
 8010388:	e7f3      	b.n	8010372 <__ssrefill_r+0x26>

0801038a <_sfread_r>:
 801038a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801038c:	0014      	movs	r4, r2
 801038e:	435c      	muls	r4, r3
 8010390:	b087      	sub	sp, #28
 8010392:	1e26      	subs	r6, r4, #0
 8010394:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010396:	9005      	str	r0, [sp, #20]
 8010398:	9101      	str	r1, [sp, #4]
 801039a:	9202      	str	r2, [sp, #8]
 801039c:	9303      	str	r3, [sp, #12]
 801039e:	d11e      	bne.n	80103de <_sfread_r+0x54>
 80103a0:	0020      	movs	r0, r4
 80103a2:	b007      	add	sp, #28
 80103a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103a6:	003a      	movs	r2, r7
 80103a8:	9801      	ldr	r0, [sp, #4]
 80103aa:	f7fa fce6 	bl	800ad7a <memcpy>
 80103ae:	682b      	ldr	r3, [r5, #0]
 80103b0:	0029      	movs	r1, r5
 80103b2:	19db      	adds	r3, r3, r7
 80103b4:	602b      	str	r3, [r5, #0]
 80103b6:	2300      	movs	r3, #0
 80103b8:	606b      	str	r3, [r5, #4]
 80103ba:	9b01      	ldr	r3, [sp, #4]
 80103bc:	9805      	ldr	r0, [sp, #20]
 80103be:	19db      	adds	r3, r3, r7
 80103c0:	9301      	str	r3, [sp, #4]
 80103c2:	1bf3      	subs	r3, r6, r7
 80103c4:	9304      	str	r3, [sp, #16]
 80103c6:	f7ff ffc1 	bl	801034c <__ssrefill_r>
 80103ca:	2800      	cmp	r0, #0
 80103cc:	d006      	beq.n	80103dc <_sfread_r+0x52>
 80103ce:	193c      	adds	r4, r7, r4
 80103d0:	1ba0      	subs	r0, r4, r6
 80103d2:	9902      	ldr	r1, [sp, #8]
 80103d4:	f7ef feb2 	bl	800013c <__udivsi3>
 80103d8:	0004      	movs	r4, r0
 80103da:	e7e1      	b.n	80103a0 <_sfread_r+0x16>
 80103dc:	9e04      	ldr	r6, [sp, #16]
 80103de:	686f      	ldr	r7, [r5, #4]
 80103e0:	6829      	ldr	r1, [r5, #0]
 80103e2:	42b7      	cmp	r7, r6
 80103e4:	d3df      	bcc.n	80103a6 <_sfread_r+0x1c>
 80103e6:	0032      	movs	r2, r6
 80103e8:	9801      	ldr	r0, [sp, #4]
 80103ea:	f7fa fcc6 	bl	800ad7a <memcpy>
 80103ee:	686b      	ldr	r3, [r5, #4]
 80103f0:	9c03      	ldr	r4, [sp, #12]
 80103f2:	1b9b      	subs	r3, r3, r6
 80103f4:	606b      	str	r3, [r5, #4]
 80103f6:	682b      	ldr	r3, [r5, #0]
 80103f8:	199b      	adds	r3, r3, r6
 80103fa:	602b      	str	r3, [r5, #0]
 80103fc:	e7d0      	b.n	80103a0 <_sfread_r+0x16>

080103fe <__sprint_r>:
 80103fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010400:	6893      	ldr	r3, [r2, #8]
 8010402:	b085      	sub	sp, #20
 8010404:	9001      	str	r0, [sp, #4]
 8010406:	000d      	movs	r5, r1
 8010408:	0014      	movs	r4, r2
 801040a:	1e18      	subs	r0, r3, #0
 801040c:	d018      	beq.n	8010440 <__sprint_r+0x42>
 801040e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8010410:	049b      	lsls	r3, r3, #18
 8010412:	d524      	bpl.n	801045e <__sprint_r+0x60>
 8010414:	6817      	ldr	r7, [r2, #0]
 8010416:	2600      	movs	r6, #0
 8010418:	683b      	ldr	r3, [r7, #0]
 801041a:	9302      	str	r3, [sp, #8]
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	9300      	str	r3, [sp, #0]
 8010420:	089b      	lsrs	r3, r3, #2
 8010422:	9303      	str	r3, [sp, #12]
 8010424:	9b03      	ldr	r3, [sp, #12]
 8010426:	42b3      	cmp	r3, r6
 8010428:	dc0e      	bgt.n	8010448 <__sprint_r+0x4a>
 801042a:	2203      	movs	r2, #3
 801042c:	9b00      	ldr	r3, [sp, #0]
 801042e:	68a0      	ldr	r0, [r4, #8]
 8010430:	4393      	bics	r3, r2
 8010432:	1ac0      	subs	r0, r0, r3
 8010434:	60a0      	str	r0, [r4, #8]
 8010436:	3708      	adds	r7, #8
 8010438:	2800      	cmp	r0, #0
 801043a:	d1ec      	bne.n	8010416 <__sprint_r+0x18>
 801043c:	2300      	movs	r3, #0
 801043e:	60a3      	str	r3, [r4, #8]
 8010440:	2300      	movs	r3, #0
 8010442:	6063      	str	r3, [r4, #4]
 8010444:	b005      	add	sp, #20
 8010446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010448:	9902      	ldr	r1, [sp, #8]
 801044a:	00b3      	lsls	r3, r6, #2
 801044c:	58c9      	ldr	r1, [r1, r3]
 801044e:	002a      	movs	r2, r5
 8010450:	9801      	ldr	r0, [sp, #4]
 8010452:	f000 ff59 	bl	8011308 <_fputwc_r>
 8010456:	1c43      	adds	r3, r0, #1
 8010458:	d0f0      	beq.n	801043c <__sprint_r+0x3e>
 801045a:	3601      	adds	r6, #1
 801045c:	e7e2      	b.n	8010424 <__sprint_r+0x26>
 801045e:	9801      	ldr	r0, [sp, #4]
 8010460:	f000 fd14 	bl	8010e8c <__sfvwrite_r>
 8010464:	e7ea      	b.n	801043c <__sprint_r+0x3e>
	...

08010468 <_vfiprintf_r>:
 8010468:	b5f0      	push	{r4, r5, r6, r7, lr}
 801046a:	b0c1      	sub	sp, #260	; 0x104
 801046c:	001c      	movs	r4, r3
 801046e:	001f      	movs	r7, r3
 8010470:	9006      	str	r0, [sp, #24]
 8010472:	9103      	str	r1, [sp, #12]
 8010474:	9207      	str	r2, [sp, #28]
 8010476:	2800      	cmp	r0, #0
 8010478:	d004      	beq.n	8010484 <_vfiprintf_r+0x1c>
 801047a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801047c:	2b00      	cmp	r3, #0
 801047e:	d101      	bne.n	8010484 <_vfiprintf_r+0x1c>
 8010480:	f7fa fa98 	bl	800a9b4 <__sinit>
 8010484:	9b03      	ldr	r3, [sp, #12]
 8010486:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010488:	07db      	lsls	r3, r3, #31
 801048a:	d407      	bmi.n	801049c <_vfiprintf_r+0x34>
 801048c:	9b03      	ldr	r3, [sp, #12]
 801048e:	899b      	ldrh	r3, [r3, #12]
 8010490:	059b      	lsls	r3, r3, #22
 8010492:	d403      	bmi.n	801049c <_vfiprintf_r+0x34>
 8010494:	9b03      	ldr	r3, [sp, #12]
 8010496:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8010498:	f7fa fc62 	bl	800ad60 <__retarget_lock_acquire_recursive>
 801049c:	9b03      	ldr	r3, [sp, #12]
 801049e:	220c      	movs	r2, #12
 80104a0:	5e9a      	ldrsh	r2, [r3, r2]
 80104a2:	2380      	movs	r3, #128	; 0x80
 80104a4:	019b      	lsls	r3, r3, #6
 80104a6:	421a      	tst	r2, r3
 80104a8:	d107      	bne.n	80104ba <_vfiprintf_r+0x52>
 80104aa:	4313      	orrs	r3, r2
 80104ac:	9a03      	ldr	r2, [sp, #12]
 80104ae:	8193      	strh	r3, [r2, #12]
 80104b0:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80104b2:	4aa3      	ldr	r2, [pc, #652]	; (8010740 <_vfiprintf_r+0x2d8>)
 80104b4:	4013      	ands	r3, r2
 80104b6:	9a03      	ldr	r2, [sp, #12]
 80104b8:	6653      	str	r3, [r2, #100]	; 0x64
 80104ba:	9b03      	ldr	r3, [sp, #12]
 80104bc:	899b      	ldrh	r3, [r3, #12]
 80104be:	071b      	lsls	r3, r3, #28
 80104c0:	d503      	bpl.n	80104ca <_vfiprintf_r+0x62>
 80104c2:	9b03      	ldr	r3, [sp, #12]
 80104c4:	691b      	ldr	r3, [r3, #16]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d118      	bne.n	80104fc <_vfiprintf_r+0x94>
 80104ca:	9903      	ldr	r1, [sp, #12]
 80104cc:	9806      	ldr	r0, [sp, #24]
 80104ce:	f000 fe79 	bl	80111c4 <__swsetup_r>
 80104d2:	2800      	cmp	r0, #0
 80104d4:	d012      	beq.n	80104fc <_vfiprintf_r+0x94>
 80104d6:	9b03      	ldr	r3, [sp, #12]
 80104d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80104da:	07db      	lsls	r3, r3, #31
 80104dc:	d505      	bpl.n	80104ea <_vfiprintf_r+0x82>
 80104de:	2301      	movs	r3, #1
 80104e0:	425b      	negs	r3, r3
 80104e2:	9308      	str	r3, [sp, #32]
 80104e4:	9808      	ldr	r0, [sp, #32]
 80104e6:	b041      	add	sp, #260	; 0x104
 80104e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104ea:	9b03      	ldr	r3, [sp, #12]
 80104ec:	899b      	ldrh	r3, [r3, #12]
 80104ee:	059b      	lsls	r3, r3, #22
 80104f0:	d4f5      	bmi.n	80104de <_vfiprintf_r+0x76>
 80104f2:	9b03      	ldr	r3, [sp, #12]
 80104f4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80104f6:	f7fa fc34 	bl	800ad62 <__retarget_lock_release_recursive>
 80104fa:	e7f0      	b.n	80104de <_vfiprintf_r+0x76>
 80104fc:	221a      	movs	r2, #26
 80104fe:	9b03      	ldr	r3, [sp, #12]
 8010500:	899b      	ldrh	r3, [r3, #12]
 8010502:	401a      	ands	r2, r3
 8010504:	2a0a      	cmp	r2, #10
 8010506:	d116      	bne.n	8010536 <_vfiprintf_r+0xce>
 8010508:	9a03      	ldr	r2, [sp, #12]
 801050a:	210e      	movs	r1, #14
 801050c:	5e52      	ldrsh	r2, [r2, r1]
 801050e:	2a00      	cmp	r2, #0
 8010510:	db11      	blt.n	8010536 <_vfiprintf_r+0xce>
 8010512:	9a03      	ldr	r2, [sp, #12]
 8010514:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8010516:	07d2      	lsls	r2, r2, #31
 8010518:	d405      	bmi.n	8010526 <_vfiprintf_r+0xbe>
 801051a:	059b      	lsls	r3, r3, #22
 801051c:	d403      	bmi.n	8010526 <_vfiprintf_r+0xbe>
 801051e:	9b03      	ldr	r3, [sp, #12]
 8010520:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8010522:	f7fa fc1e 	bl	800ad62 <__retarget_lock_release_recursive>
 8010526:	0023      	movs	r3, r4
 8010528:	9a07      	ldr	r2, [sp, #28]
 801052a:	9903      	ldr	r1, [sp, #12]
 801052c:	9806      	ldr	r0, [sp, #24]
 801052e:	f000 fc69 	bl	8010e04 <__sbprintf>
 8010532:	9008      	str	r0, [sp, #32]
 8010534:	e7d6      	b.n	80104e4 <_vfiprintf_r+0x7c>
 8010536:	2300      	movs	r3, #0
 8010538:	ad17      	add	r5, sp, #92	; 0x5c
 801053a:	9514      	str	r5, [sp, #80]	; 0x50
 801053c:	9316      	str	r3, [sp, #88]	; 0x58
 801053e:	9315      	str	r3, [sp, #84]	; 0x54
 8010540:	930c      	str	r3, [sp, #48]	; 0x30
 8010542:	930d      	str	r3, [sp, #52]	; 0x34
 8010544:	930e      	str	r3, [sp, #56]	; 0x38
 8010546:	930f      	str	r3, [sp, #60]	; 0x3c
 8010548:	9308      	str	r3, [sp, #32]
 801054a:	9c07      	ldr	r4, [sp, #28]
 801054c:	7823      	ldrb	r3, [r4, #0]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d002      	beq.n	8010558 <_vfiprintf_r+0xf0>
 8010552:	2b25      	cmp	r3, #37	; 0x25
 8010554:	d000      	beq.n	8010558 <_vfiprintf_r+0xf0>
 8010556:	e08d      	b.n	8010674 <_vfiprintf_r+0x20c>
 8010558:	9b07      	ldr	r3, [sp, #28]
 801055a:	1ae6      	subs	r6, r4, r3
 801055c:	429c      	cmp	r4, r3
 801055e:	d016      	beq.n	801058e <_vfiprintf_r+0x126>
 8010560:	602b      	str	r3, [r5, #0]
 8010562:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010564:	606e      	str	r6, [r5, #4]
 8010566:	199b      	adds	r3, r3, r6
 8010568:	9316      	str	r3, [sp, #88]	; 0x58
 801056a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801056c:	3508      	adds	r5, #8
 801056e:	3301      	adds	r3, #1
 8010570:	9315      	str	r3, [sp, #84]	; 0x54
 8010572:	2b07      	cmp	r3, #7
 8010574:	dd08      	ble.n	8010588 <_vfiprintf_r+0x120>
 8010576:	9903      	ldr	r1, [sp, #12]
 8010578:	9806      	ldr	r0, [sp, #24]
 801057a:	aa14      	add	r2, sp, #80	; 0x50
 801057c:	f7ff ff3f 	bl	80103fe <__sprint_r>
 8010580:	2800      	cmp	r0, #0
 8010582:	d000      	beq.n	8010586 <_vfiprintf_r+0x11e>
 8010584:	e3d9      	b.n	8010d3a <_vfiprintf_r+0x8d2>
 8010586:	ad17      	add	r5, sp, #92	; 0x5c
 8010588:	9b08      	ldr	r3, [sp, #32]
 801058a:	199b      	adds	r3, r3, r6
 801058c:	9308      	str	r3, [sp, #32]
 801058e:	7823      	ldrb	r3, [r4, #0]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d101      	bne.n	8010598 <_vfiprintf_r+0x130>
 8010594:	f000 fbf6 	bl	8010d84 <_vfiprintf_r+0x91c>
 8010598:	2200      	movs	r2, #0
 801059a:	a912      	add	r1, sp, #72	; 0x48
 801059c:	70ca      	strb	r2, [r1, #3]
 801059e:	2101      	movs	r1, #1
 80105a0:	1c63      	adds	r3, r4, #1
 80105a2:	0014      	movs	r4, r2
 80105a4:	4249      	negs	r1, r1
 80105a6:	9105      	str	r1, [sp, #20]
 80105a8:	9209      	str	r2, [sp, #36]	; 0x24
 80105aa:	1c5a      	adds	r2, r3, #1
 80105ac:	781b      	ldrb	r3, [r3, #0]
 80105ae:	9207      	str	r2, [sp, #28]
 80105b0:	0018      	movs	r0, r3
 80105b2:	3820      	subs	r0, #32
 80105b4:	285a      	cmp	r0, #90	; 0x5a
 80105b6:	d900      	bls.n	80105ba <_vfiprintf_r+0x152>
 80105b8:	e362      	b.n	8010c80 <_vfiprintf_r+0x818>
 80105ba:	f7ef fdb5 	bl	8000128 <__gnu_thumb1_case_uhi>
 80105be:	0078      	.short	0x0078
 80105c0:	03610361 	.word	0x03610361
 80105c4:	03610081 	.word	0x03610081
 80105c8:	03610361 	.word	0x03610361
 80105cc:	0361005d 	.word	0x0361005d
 80105d0:	00830361 	.word	0x00830361
 80105d4:	0361008b 	.word	0x0361008b
 80105d8:	008f0089 	.word	0x008f0089
 80105dc:	00ad0361 	.word	0x00ad0361
 80105e0:	00af00af 	.word	0x00af00af
 80105e4:	00af00af 	.word	0x00af00af
 80105e8:	00af00af 	.word	0x00af00af
 80105ec:	00af00af 	.word	0x00af00af
 80105f0:	036100af 	.word	0x036100af
 80105f4:	03610361 	.word	0x03610361
 80105f8:	03610361 	.word	0x03610361
 80105fc:	03610361 	.word	0x03610361
 8010600:	03610361 	.word	0x03610361
 8010604:	00e600da 	.word	0x00e600da
 8010608:	03610361 	.word	0x03610361
 801060c:	03610361 	.word	0x03610361
 8010610:	03610361 	.word	0x03610361
 8010614:	03610361 	.word	0x03610361
 8010618:	03610361 	.word	0x03610361
 801061c:	03610143 	.word	0x03610143
 8010620:	03610361 	.word	0x03610361
 8010624:	03610182 	.word	0x03610182
 8010628:	0361027c 	.word	0x0361027c
 801062c:	02ae0361 	.word	0x02ae0361
 8010630:	03610361 	.word	0x03610361
 8010634:	03610361 	.word	0x03610361
 8010638:	03610361 	.word	0x03610361
 801063c:	03610361 	.word	0x03610361
 8010640:	03610361 	.word	0x03610361
 8010644:	00e800da 	.word	0x00e800da
 8010648:	03610361 	.word	0x03610361
 801064c:	00c30361 	.word	0x00c30361
 8010650:	00d600e8 	.word	0x00d600e8
 8010654:	00cf0361 	.word	0x00cf0361
 8010658:	01260361 	.word	0x01260361
 801065c:	01740145 	.word	0x01740145
 8010660:	036100d6 	.word	0x036100d6
 8010664:	007f0182 	.word	0x007f0182
 8010668:	0361027e 	.word	0x0361027e
 801066c:	02cd0361 	.word	0x02cd0361
 8010670:	007f0361 	.word	0x007f0361
 8010674:	3401      	adds	r4, #1
 8010676:	e769      	b.n	801054c <_vfiprintf_r+0xe4>
 8010678:	9806      	ldr	r0, [sp, #24]
 801067a:	f7fe fa47 	bl	800eb0c <_localeconv_r>
 801067e:	6843      	ldr	r3, [r0, #4]
 8010680:	0018      	movs	r0, r3
 8010682:	930f      	str	r3, [sp, #60]	; 0x3c
 8010684:	f7ef fd3e 	bl	8000104 <strlen>
 8010688:	900e      	str	r0, [sp, #56]	; 0x38
 801068a:	9806      	ldr	r0, [sp, #24]
 801068c:	f7fe fa3e 	bl	800eb0c <_localeconv_r>
 8010690:	6883      	ldr	r3, [r0, #8]
 8010692:	930d      	str	r3, [sp, #52]	; 0x34
 8010694:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010696:	2b00      	cmp	r3, #0
 8010698:	d010      	beq.n	80106bc <_vfiprintf_r+0x254>
 801069a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801069c:	2b00      	cmp	r3, #0
 801069e:	d00d      	beq.n	80106bc <_vfiprintf_r+0x254>
 80106a0:	781b      	ldrb	r3, [r3, #0]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d00a      	beq.n	80106bc <_vfiprintf_r+0x254>
 80106a6:	2380      	movs	r3, #128	; 0x80
 80106a8:	00db      	lsls	r3, r3, #3
 80106aa:	431c      	orrs	r4, r3
 80106ac:	e006      	b.n	80106bc <_vfiprintf_r+0x254>
 80106ae:	ab12      	add	r3, sp, #72	; 0x48
 80106b0:	78da      	ldrb	r2, [r3, #3]
 80106b2:	3303      	adds	r3, #3
 80106b4:	2a00      	cmp	r2, #0
 80106b6:	d101      	bne.n	80106bc <_vfiprintf_r+0x254>
 80106b8:	3220      	adds	r2, #32
 80106ba:	701a      	strb	r2, [r3, #0]
 80106bc:	9b07      	ldr	r3, [sp, #28]
 80106be:	e774      	b.n	80105aa <_vfiprintf_r+0x142>
 80106c0:	2301      	movs	r3, #1
 80106c2:	e7f2      	b.n	80106aa <_vfiprintf_r+0x242>
 80106c4:	cf08      	ldmia	r7!, {r3}
 80106c6:	9309      	str	r3, [sp, #36]	; 0x24
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	daf7      	bge.n	80106bc <_vfiprintf_r+0x254>
 80106cc:	425b      	negs	r3, r3
 80106ce:	9309      	str	r3, [sp, #36]	; 0x24
 80106d0:	2304      	movs	r3, #4
 80106d2:	e7ea      	b.n	80106aa <_vfiprintf_r+0x242>
 80106d4:	222b      	movs	r2, #43	; 0x2b
 80106d6:	ab12      	add	r3, sp, #72	; 0x48
 80106d8:	70da      	strb	r2, [r3, #3]
 80106da:	e7ef      	b.n	80106bc <_vfiprintf_r+0x254>
 80106dc:	9b07      	ldr	r3, [sp, #28]
 80106de:	1c5a      	adds	r2, r3, #1
 80106e0:	781b      	ldrb	r3, [r3, #0]
 80106e2:	2b2a      	cmp	r3, #42	; 0x2a
 80106e4:	d00f      	beq.n	8010706 <_vfiprintf_r+0x29e>
 80106e6:	2100      	movs	r1, #0
 80106e8:	9105      	str	r1, [sp, #20]
 80106ea:	0019      	movs	r1, r3
 80106ec:	3930      	subs	r1, #48	; 0x30
 80106ee:	9207      	str	r2, [sp, #28]
 80106f0:	2909      	cmp	r1, #9
 80106f2:	d900      	bls.n	80106f6 <_vfiprintf_r+0x28e>
 80106f4:	e75c      	b.n	80105b0 <_vfiprintf_r+0x148>
 80106f6:	200a      	movs	r0, #10
 80106f8:	9b05      	ldr	r3, [sp, #20]
 80106fa:	4343      	muls	r3, r0
 80106fc:	185b      	adds	r3, r3, r1
 80106fe:	9305      	str	r3, [sp, #20]
 8010700:	7813      	ldrb	r3, [r2, #0]
 8010702:	3201      	adds	r2, #1
 8010704:	e7f1      	b.n	80106ea <_vfiprintf_r+0x282>
 8010706:	cf08      	ldmia	r7!, {r3}
 8010708:	9305      	str	r3, [sp, #20]
 801070a:	2b00      	cmp	r3, #0
 801070c:	da02      	bge.n	8010714 <_vfiprintf_r+0x2ac>
 801070e:	2301      	movs	r3, #1
 8010710:	425b      	negs	r3, r3
 8010712:	9305      	str	r3, [sp, #20]
 8010714:	9207      	str	r2, [sp, #28]
 8010716:	e7d1      	b.n	80106bc <_vfiprintf_r+0x254>
 8010718:	2380      	movs	r3, #128	; 0x80
 801071a:	e7c6      	b.n	80106aa <_vfiprintf_r+0x242>
 801071c:	2100      	movs	r1, #0
 801071e:	9a07      	ldr	r2, [sp, #28]
 8010720:	9109      	str	r1, [sp, #36]	; 0x24
 8010722:	200a      	movs	r0, #10
 8010724:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010726:	3b30      	subs	r3, #48	; 0x30
 8010728:	4341      	muls	r1, r0
 801072a:	185b      	adds	r3, r3, r1
 801072c:	9309      	str	r3, [sp, #36]	; 0x24
 801072e:	0013      	movs	r3, r2
 8010730:	781b      	ldrb	r3, [r3, #0]
 8010732:	3201      	adds	r2, #1
 8010734:	0019      	movs	r1, r3
 8010736:	3930      	subs	r1, #48	; 0x30
 8010738:	9207      	str	r2, [sp, #28]
 801073a:	2909      	cmp	r1, #9
 801073c:	d9f1      	bls.n	8010722 <_vfiprintf_r+0x2ba>
 801073e:	e737      	b.n	80105b0 <_vfiprintf_r+0x148>
 8010740:	ffffdfff 	.word	0xffffdfff
 8010744:	9b07      	ldr	r3, [sp, #28]
 8010746:	781b      	ldrb	r3, [r3, #0]
 8010748:	2b68      	cmp	r3, #104	; 0x68
 801074a:	d105      	bne.n	8010758 <_vfiprintf_r+0x2f0>
 801074c:	9b07      	ldr	r3, [sp, #28]
 801074e:	3301      	adds	r3, #1
 8010750:	9307      	str	r3, [sp, #28]
 8010752:	2380      	movs	r3, #128	; 0x80
 8010754:	009b      	lsls	r3, r3, #2
 8010756:	e7a8      	b.n	80106aa <_vfiprintf_r+0x242>
 8010758:	2340      	movs	r3, #64	; 0x40
 801075a:	e7a6      	b.n	80106aa <_vfiprintf_r+0x242>
 801075c:	9b07      	ldr	r3, [sp, #28]
 801075e:	781b      	ldrb	r3, [r3, #0]
 8010760:	2b6c      	cmp	r3, #108	; 0x6c
 8010762:	d104      	bne.n	801076e <_vfiprintf_r+0x306>
 8010764:	9b07      	ldr	r3, [sp, #28]
 8010766:	3301      	adds	r3, #1
 8010768:	9307      	str	r3, [sp, #28]
 801076a:	2320      	movs	r3, #32
 801076c:	e79d      	b.n	80106aa <_vfiprintf_r+0x242>
 801076e:	2310      	movs	r3, #16
 8010770:	e79b      	b.n	80106aa <_vfiprintf_r+0x242>
 8010772:	003a      	movs	r2, r7
 8010774:	ca08      	ldmia	r2!, {r3}
 8010776:	ae27      	add	r6, sp, #156	; 0x9c
 8010778:	7033      	strb	r3, [r6, #0]
 801077a:	2300      	movs	r3, #0
 801077c:	9204      	str	r2, [sp, #16]
 801077e:	aa12      	add	r2, sp, #72	; 0x48
 8010780:	70d3      	strb	r3, [r2, #3]
 8010782:	2201      	movs	r2, #1
 8010784:	930b      	str	r3, [sp, #44]	; 0x2c
 8010786:	9205      	str	r2, [sp, #20]
 8010788:	e0b0      	b.n	80108ec <_vfiprintf_r+0x484>
 801078a:	2310      	movs	r3, #16
 801078c:	431c      	orrs	r4, r3
 801078e:	06a3      	lsls	r3, r4, #26
 8010790:	d52a      	bpl.n	80107e8 <_vfiprintf_r+0x380>
 8010792:	2307      	movs	r3, #7
 8010794:	3707      	adds	r7, #7
 8010796:	439f      	bics	r7, r3
 8010798:	0039      	movs	r1, r7
 801079a:	c90c      	ldmia	r1!, {r2, r3}
 801079c:	9200      	str	r2, [sp, #0]
 801079e:	9301      	str	r3, [sp, #4]
 80107a0:	9104      	str	r1, [sp, #16]
 80107a2:	9a01      	ldr	r2, [sp, #4]
 80107a4:	2301      	movs	r3, #1
 80107a6:	2a00      	cmp	r2, #0
 80107a8:	da09      	bge.n	80107be <_vfiprintf_r+0x356>
 80107aa:	9e00      	ldr	r6, [sp, #0]
 80107ac:	9f01      	ldr	r7, [sp, #4]
 80107ae:	2200      	movs	r2, #0
 80107b0:	4271      	negs	r1, r6
 80107b2:	41ba      	sbcs	r2, r7
 80107b4:	9100      	str	r1, [sp, #0]
 80107b6:	9201      	str	r2, [sp, #4]
 80107b8:	212d      	movs	r1, #45	; 0x2d
 80107ba:	aa12      	add	r2, sp, #72	; 0x48
 80107bc:	70d1      	strb	r1, [r2, #3]
 80107be:	9901      	ldr	r1, [sp, #4]
 80107c0:	9a00      	ldr	r2, [sp, #0]
 80107c2:	430a      	orrs	r2, r1
 80107c4:	9905      	ldr	r1, [sp, #20]
 80107c6:	3101      	adds	r1, #1
 80107c8:	d100      	bne.n	80107cc <_vfiprintf_r+0x364>
 80107ca:	e2e9      	b.n	8010da0 <_vfiprintf_r+0x938>
 80107cc:	2180      	movs	r1, #128	; 0x80
 80107ce:	0027      	movs	r7, r4
 80107d0:	438f      	bics	r7, r1
 80107d2:	2a00      	cmp	r2, #0
 80107d4:	d000      	beq.n	80107d8 <_vfiprintf_r+0x370>
 80107d6:	e2e7      	b.n	8010da8 <_vfiprintf_r+0x940>
 80107d8:	9a05      	ldr	r2, [sp, #20]
 80107da:	2a00      	cmp	r2, #0
 80107dc:	d100      	bne.n	80107e0 <_vfiprintf_r+0x378>
 80107de:	e243      	b.n	8010c68 <_vfiprintf_r+0x800>
 80107e0:	2b01      	cmp	r3, #1
 80107e2:	d000      	beq.n	80107e6 <_vfiprintf_r+0x37e>
 80107e4:	e2e3      	b.n	8010dae <_vfiprintf_r+0x946>
 80107e6:	e1e7      	b.n	8010bb8 <_vfiprintf_r+0x750>
 80107e8:	003a      	movs	r2, r7
 80107ea:	ca08      	ldmia	r2!, {r3}
 80107ec:	9204      	str	r2, [sp, #16]
 80107ee:	06e2      	lsls	r2, r4, #27
 80107f0:	d503      	bpl.n	80107fa <_vfiprintf_r+0x392>
 80107f2:	9300      	str	r3, [sp, #0]
 80107f4:	17db      	asrs	r3, r3, #31
 80107f6:	9301      	str	r3, [sp, #4]
 80107f8:	e7d3      	b.n	80107a2 <_vfiprintf_r+0x33a>
 80107fa:	0662      	lsls	r2, r4, #25
 80107fc:	d501      	bpl.n	8010802 <_vfiprintf_r+0x39a>
 80107fe:	b21b      	sxth	r3, r3
 8010800:	e7f7      	b.n	80107f2 <_vfiprintf_r+0x38a>
 8010802:	05a2      	lsls	r2, r4, #22
 8010804:	d5f5      	bpl.n	80107f2 <_vfiprintf_r+0x38a>
 8010806:	b25b      	sxtb	r3, r3
 8010808:	e7f3      	b.n	80107f2 <_vfiprintf_r+0x38a>
 801080a:	1d3b      	adds	r3, r7, #4
 801080c:	9304      	str	r3, [sp, #16]
 801080e:	06a3      	lsls	r3, r4, #26
 8010810:	d506      	bpl.n	8010820 <_vfiprintf_r+0x3b8>
 8010812:	683b      	ldr	r3, [r7, #0]
 8010814:	9a08      	ldr	r2, [sp, #32]
 8010816:	601a      	str	r2, [r3, #0]
 8010818:	17d2      	asrs	r2, r2, #31
 801081a:	605a      	str	r2, [r3, #4]
 801081c:	9f04      	ldr	r7, [sp, #16]
 801081e:	e694      	b.n	801054a <_vfiprintf_r+0xe2>
 8010820:	06e3      	lsls	r3, r4, #27
 8010822:	d503      	bpl.n	801082c <_vfiprintf_r+0x3c4>
 8010824:	683b      	ldr	r3, [r7, #0]
 8010826:	9a08      	ldr	r2, [sp, #32]
 8010828:	601a      	str	r2, [r3, #0]
 801082a:	e7f7      	b.n	801081c <_vfiprintf_r+0x3b4>
 801082c:	0663      	lsls	r3, r4, #25
 801082e:	d503      	bpl.n	8010838 <_vfiprintf_r+0x3d0>
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	9a08      	ldr	r2, [sp, #32]
 8010834:	801a      	strh	r2, [r3, #0]
 8010836:	e7f1      	b.n	801081c <_vfiprintf_r+0x3b4>
 8010838:	05a4      	lsls	r4, r4, #22
 801083a:	d5f3      	bpl.n	8010824 <_vfiprintf_r+0x3bc>
 801083c:	683b      	ldr	r3, [r7, #0]
 801083e:	9a08      	ldr	r2, [sp, #32]
 8010840:	701a      	strb	r2, [r3, #0]
 8010842:	e7eb      	b.n	801081c <_vfiprintf_r+0x3b4>
 8010844:	2310      	movs	r3, #16
 8010846:	431c      	orrs	r4, r3
 8010848:	2320      	movs	r3, #32
 801084a:	0020      	movs	r0, r4
 801084c:	4018      	ands	r0, r3
 801084e:	421c      	tst	r4, r3
 8010850:	d00d      	beq.n	801086e <_vfiprintf_r+0x406>
 8010852:	3b19      	subs	r3, #25
 8010854:	3707      	adds	r7, #7
 8010856:	439f      	bics	r7, r3
 8010858:	0039      	movs	r1, r7
 801085a:	c90c      	ldmia	r1!, {r2, r3}
 801085c:	9200      	str	r2, [sp, #0]
 801085e:	9301      	str	r3, [sp, #4]
 8010860:	9104      	str	r1, [sp, #16]
 8010862:	4bcc      	ldr	r3, [pc, #816]	; (8010b94 <_vfiprintf_r+0x72c>)
 8010864:	401c      	ands	r4, r3
 8010866:	2300      	movs	r3, #0
 8010868:	2100      	movs	r1, #0
 801086a:	aa12      	add	r2, sp, #72	; 0x48
 801086c:	e7a6      	b.n	80107bc <_vfiprintf_r+0x354>
 801086e:	003a      	movs	r2, r7
 8010870:	ca08      	ldmia	r2!, {r3}
 8010872:	0021      	movs	r1, r4
 8010874:	9204      	str	r2, [sp, #16]
 8010876:	2210      	movs	r2, #16
 8010878:	4011      	ands	r1, r2
 801087a:	4214      	tst	r4, r2
 801087c:	d002      	beq.n	8010884 <_vfiprintf_r+0x41c>
 801087e:	9300      	str	r3, [sp, #0]
 8010880:	9001      	str	r0, [sp, #4]
 8010882:	e7ee      	b.n	8010862 <_vfiprintf_r+0x3fa>
 8010884:	2240      	movs	r2, #64	; 0x40
 8010886:	0020      	movs	r0, r4
 8010888:	4010      	ands	r0, r2
 801088a:	4214      	tst	r4, r2
 801088c:	d003      	beq.n	8010896 <_vfiprintf_r+0x42e>
 801088e:	b29b      	uxth	r3, r3
 8010890:	9300      	str	r3, [sp, #0]
 8010892:	9101      	str	r1, [sp, #4]
 8010894:	e7e5      	b.n	8010862 <_vfiprintf_r+0x3fa>
 8010896:	2280      	movs	r2, #128	; 0x80
 8010898:	0021      	movs	r1, r4
 801089a:	0092      	lsls	r2, r2, #2
 801089c:	4011      	ands	r1, r2
 801089e:	4214      	tst	r4, r2
 80108a0:	d0f6      	beq.n	8010890 <_vfiprintf_r+0x428>
 80108a2:	b2db      	uxtb	r3, r3
 80108a4:	e7eb      	b.n	801087e <_vfiprintf_r+0x416>
 80108a6:	003b      	movs	r3, r7
 80108a8:	cb04      	ldmia	r3!, {r2}
 80108aa:	49bb      	ldr	r1, [pc, #748]	; (8010b98 <_vfiprintf_r+0x730>)
 80108ac:	9304      	str	r3, [sp, #16]
 80108ae:	2300      	movs	r3, #0
 80108b0:	9200      	str	r2, [sp, #0]
 80108b2:	aa13      	add	r2, sp, #76	; 0x4c
 80108b4:	8011      	strh	r1, [r2, #0]
 80108b6:	4ab9      	ldr	r2, [pc, #740]	; (8010b9c <_vfiprintf_r+0x734>)
 80108b8:	9301      	str	r3, [sp, #4]
 80108ba:	3302      	adds	r3, #2
 80108bc:	431c      	orrs	r4, r3
 80108be:	920c      	str	r2, [sp, #48]	; 0x30
 80108c0:	e7d2      	b.n	8010868 <_vfiprintf_r+0x400>
 80108c2:	003b      	movs	r3, r7
 80108c4:	2700      	movs	r7, #0
 80108c6:	cb40      	ldmia	r3!, {r6}
 80108c8:	9304      	str	r3, [sp, #16]
 80108ca:	ab12      	add	r3, sp, #72	; 0x48
 80108cc:	70df      	strb	r7, [r3, #3]
 80108ce:	9b05      	ldr	r3, [sp, #20]
 80108d0:	3301      	adds	r3, #1
 80108d2:	d100      	bne.n	80108d6 <_vfiprintf_r+0x46e>
 80108d4:	e0ea      	b.n	8010aac <_vfiprintf_r+0x644>
 80108d6:	0039      	movs	r1, r7
 80108d8:	0030      	movs	r0, r6
 80108da:	9a05      	ldr	r2, [sp, #20]
 80108dc:	f7fe f92e 	bl	800eb3c <memchr>
 80108e0:	900b      	str	r0, [sp, #44]	; 0x2c
 80108e2:	42b8      	cmp	r0, r7
 80108e4:	d002      	beq.n	80108ec <_vfiprintf_r+0x484>
 80108e6:	1b83      	subs	r3, r0, r6
 80108e8:	9305      	str	r3, [sp, #20]
 80108ea:	970b      	str	r7, [sp, #44]	; 0x2c
 80108ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108ee:	9a05      	ldr	r2, [sp, #20]
 80108f0:	930a      	str	r3, [sp, #40]	; 0x28
 80108f2:	4293      	cmp	r3, r2
 80108f4:	da00      	bge.n	80108f8 <_vfiprintf_r+0x490>
 80108f6:	920a      	str	r2, [sp, #40]	; 0x28
 80108f8:	ab12      	add	r3, sp, #72	; 0x48
 80108fa:	3303      	adds	r3, #3
 80108fc:	781b      	ldrb	r3, [r3, #0]
 80108fe:	1e5a      	subs	r2, r3, #1
 8010900:	4193      	sbcs	r3, r2
 8010902:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010904:	18d3      	adds	r3, r2, r3
 8010906:	930a      	str	r3, [sp, #40]	; 0x28
 8010908:	0022      	movs	r2, r4
 801090a:	2302      	movs	r3, #2
 801090c:	401a      	ands	r2, r3
 801090e:	9210      	str	r2, [sp, #64]	; 0x40
 8010910:	421c      	tst	r4, r3
 8010912:	d002      	beq.n	801091a <_vfiprintf_r+0x4b2>
 8010914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010916:	3302      	adds	r3, #2
 8010918:	930a      	str	r3, [sp, #40]	; 0x28
 801091a:	2384      	movs	r3, #132	; 0x84
 801091c:	0022      	movs	r2, r4
 801091e:	401a      	ands	r2, r3
 8010920:	9211      	str	r2, [sp, #68]	; 0x44
 8010922:	421c      	tst	r4, r3
 8010924:	d11e      	bne.n	8010964 <_vfiprintf_r+0x4fc>
 8010926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010928:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801092a:	1a9f      	subs	r7, r3, r2
 801092c:	2f00      	cmp	r7, #0
 801092e:	dd19      	ble.n	8010964 <_vfiprintf_r+0x4fc>
 8010930:	0029      	movs	r1, r5
 8010932:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010934:	489a      	ldr	r0, [pc, #616]	; (8010ba0 <_vfiprintf_r+0x738>)
 8010936:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010938:	3301      	adds	r3, #1
 801093a:	3108      	adds	r1, #8
 801093c:	6028      	str	r0, [r5, #0]
 801093e:	2f10      	cmp	r7, #16
 8010940:	dd00      	ble.n	8010944 <_vfiprintf_r+0x4dc>
 8010942:	e1a7      	b.n	8010c94 <_vfiprintf_r+0x82c>
 8010944:	606f      	str	r7, [r5, #4]
 8010946:	18bf      	adds	r7, r7, r2
 8010948:	000d      	movs	r5, r1
 801094a:	9716      	str	r7, [sp, #88]	; 0x58
 801094c:	9315      	str	r3, [sp, #84]	; 0x54
 801094e:	2b07      	cmp	r3, #7
 8010950:	dd08      	ble.n	8010964 <_vfiprintf_r+0x4fc>
 8010952:	9903      	ldr	r1, [sp, #12]
 8010954:	9806      	ldr	r0, [sp, #24]
 8010956:	aa14      	add	r2, sp, #80	; 0x50
 8010958:	f7ff fd51 	bl	80103fe <__sprint_r>
 801095c:	2800      	cmp	r0, #0
 801095e:	d000      	beq.n	8010962 <_vfiprintf_r+0x4fa>
 8010960:	e1eb      	b.n	8010d3a <_vfiprintf_r+0x8d2>
 8010962:	ad17      	add	r5, sp, #92	; 0x5c
 8010964:	a912      	add	r1, sp, #72	; 0x48
 8010966:	78c8      	ldrb	r0, [r1, #3]
 8010968:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801096a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801096c:	3103      	adds	r1, #3
 801096e:	2800      	cmp	r0, #0
 8010970:	d012      	beq.n	8010998 <_vfiprintf_r+0x530>
 8010972:	6029      	str	r1, [r5, #0]
 8010974:	2101      	movs	r1, #1
 8010976:	3301      	adds	r3, #1
 8010978:	1852      	adds	r2, r2, r1
 801097a:	6069      	str	r1, [r5, #4]
 801097c:	9216      	str	r2, [sp, #88]	; 0x58
 801097e:	9315      	str	r3, [sp, #84]	; 0x54
 8010980:	3508      	adds	r5, #8
 8010982:	2b07      	cmp	r3, #7
 8010984:	dd08      	ble.n	8010998 <_vfiprintf_r+0x530>
 8010986:	9903      	ldr	r1, [sp, #12]
 8010988:	9806      	ldr	r0, [sp, #24]
 801098a:	aa14      	add	r2, sp, #80	; 0x50
 801098c:	f7ff fd37 	bl	80103fe <__sprint_r>
 8010990:	2800      	cmp	r0, #0
 8010992:	d000      	beq.n	8010996 <_vfiprintf_r+0x52e>
 8010994:	e1d1      	b.n	8010d3a <_vfiprintf_r+0x8d2>
 8010996:	ad17      	add	r5, sp, #92	; 0x5c
 8010998:	9910      	ldr	r1, [sp, #64]	; 0x40
 801099a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801099c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801099e:	2900      	cmp	r1, #0
 80109a0:	d013      	beq.n	80109ca <_vfiprintf_r+0x562>
 80109a2:	a913      	add	r1, sp, #76	; 0x4c
 80109a4:	6029      	str	r1, [r5, #0]
 80109a6:	2102      	movs	r1, #2
 80109a8:	3301      	adds	r3, #1
 80109aa:	1852      	adds	r2, r2, r1
 80109ac:	6069      	str	r1, [r5, #4]
 80109ae:	9216      	str	r2, [sp, #88]	; 0x58
 80109b0:	9315      	str	r3, [sp, #84]	; 0x54
 80109b2:	3508      	adds	r5, #8
 80109b4:	2b07      	cmp	r3, #7
 80109b6:	dd08      	ble.n	80109ca <_vfiprintf_r+0x562>
 80109b8:	9903      	ldr	r1, [sp, #12]
 80109ba:	9806      	ldr	r0, [sp, #24]
 80109bc:	aa14      	add	r2, sp, #80	; 0x50
 80109be:	f7ff fd1e 	bl	80103fe <__sprint_r>
 80109c2:	2800      	cmp	r0, #0
 80109c4:	d000      	beq.n	80109c8 <_vfiprintf_r+0x560>
 80109c6:	e1b8      	b.n	8010d3a <_vfiprintf_r+0x8d2>
 80109c8:	ad17      	add	r5, sp, #92	; 0x5c
 80109ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80109cc:	2b80      	cmp	r3, #128	; 0x80
 80109ce:	d11e      	bne.n	8010a0e <_vfiprintf_r+0x5a6>
 80109d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80109d4:	1a9f      	subs	r7, r3, r2
 80109d6:	2f00      	cmp	r7, #0
 80109d8:	dd19      	ble.n	8010a0e <_vfiprintf_r+0x5a6>
 80109da:	0029      	movs	r1, r5
 80109dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80109de:	4871      	ldr	r0, [pc, #452]	; (8010ba4 <_vfiprintf_r+0x73c>)
 80109e0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80109e2:	3301      	adds	r3, #1
 80109e4:	3108      	adds	r1, #8
 80109e6:	6028      	str	r0, [r5, #0]
 80109e8:	2f10      	cmp	r7, #16
 80109ea:	dd00      	ble.n	80109ee <_vfiprintf_r+0x586>
 80109ec:	e164      	b.n	8010cb8 <_vfiprintf_r+0x850>
 80109ee:	606f      	str	r7, [r5, #4]
 80109f0:	18bf      	adds	r7, r7, r2
 80109f2:	000d      	movs	r5, r1
 80109f4:	9716      	str	r7, [sp, #88]	; 0x58
 80109f6:	9315      	str	r3, [sp, #84]	; 0x54
 80109f8:	2b07      	cmp	r3, #7
 80109fa:	dd08      	ble.n	8010a0e <_vfiprintf_r+0x5a6>
 80109fc:	9903      	ldr	r1, [sp, #12]
 80109fe:	9806      	ldr	r0, [sp, #24]
 8010a00:	aa14      	add	r2, sp, #80	; 0x50
 8010a02:	f7ff fcfc 	bl	80103fe <__sprint_r>
 8010a06:	2800      	cmp	r0, #0
 8010a08:	d000      	beq.n	8010a0c <_vfiprintf_r+0x5a4>
 8010a0a:	e196      	b.n	8010d3a <_vfiprintf_r+0x8d2>
 8010a0c:	ad17      	add	r5, sp, #92	; 0x5c
 8010a0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a10:	9a05      	ldr	r2, [sp, #20]
 8010a12:	1a9f      	subs	r7, r3, r2
 8010a14:	2f00      	cmp	r7, #0
 8010a16:	dd19      	ble.n	8010a4c <_vfiprintf_r+0x5e4>
 8010a18:	0029      	movs	r1, r5
 8010a1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010a1c:	4861      	ldr	r0, [pc, #388]	; (8010ba4 <_vfiprintf_r+0x73c>)
 8010a1e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010a20:	3301      	adds	r3, #1
 8010a22:	3108      	adds	r1, #8
 8010a24:	6028      	str	r0, [r5, #0]
 8010a26:	2f10      	cmp	r7, #16
 8010a28:	dd00      	ble.n	8010a2c <_vfiprintf_r+0x5c4>
 8010a2a:	e157      	b.n	8010cdc <_vfiprintf_r+0x874>
 8010a2c:	606f      	str	r7, [r5, #4]
 8010a2e:	18bf      	adds	r7, r7, r2
 8010a30:	000d      	movs	r5, r1
 8010a32:	9716      	str	r7, [sp, #88]	; 0x58
 8010a34:	9315      	str	r3, [sp, #84]	; 0x54
 8010a36:	2b07      	cmp	r3, #7
 8010a38:	dd08      	ble.n	8010a4c <_vfiprintf_r+0x5e4>
 8010a3a:	9903      	ldr	r1, [sp, #12]
 8010a3c:	9806      	ldr	r0, [sp, #24]
 8010a3e:	aa14      	add	r2, sp, #80	; 0x50
 8010a40:	f7ff fcdd 	bl	80103fe <__sprint_r>
 8010a44:	2800      	cmp	r0, #0
 8010a46:	d000      	beq.n	8010a4a <_vfiprintf_r+0x5e2>
 8010a48:	e177      	b.n	8010d3a <_vfiprintf_r+0x8d2>
 8010a4a:	ad17      	add	r5, sp, #92	; 0x5c
 8010a4c:	9b05      	ldr	r3, [sp, #20]
 8010a4e:	9a05      	ldr	r2, [sp, #20]
 8010a50:	606b      	str	r3, [r5, #4]
 8010a52:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010a54:	602e      	str	r6, [r5, #0]
 8010a56:	189b      	adds	r3, r3, r2
 8010a58:	9316      	str	r3, [sp, #88]	; 0x58
 8010a5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010a5c:	3508      	adds	r5, #8
 8010a5e:	3301      	adds	r3, #1
 8010a60:	9315      	str	r3, [sp, #84]	; 0x54
 8010a62:	2b07      	cmp	r3, #7
 8010a64:	dd08      	ble.n	8010a78 <_vfiprintf_r+0x610>
 8010a66:	9903      	ldr	r1, [sp, #12]
 8010a68:	9806      	ldr	r0, [sp, #24]
 8010a6a:	aa14      	add	r2, sp, #80	; 0x50
 8010a6c:	f7ff fcc7 	bl	80103fe <__sprint_r>
 8010a70:	2800      	cmp	r0, #0
 8010a72:	d000      	beq.n	8010a76 <_vfiprintf_r+0x60e>
 8010a74:	e161      	b.n	8010d3a <_vfiprintf_r+0x8d2>
 8010a76:	ad17      	add	r5, sp, #92	; 0x5c
 8010a78:	0764      	lsls	r4, r4, #29
 8010a7a:	d500      	bpl.n	8010a7e <_vfiprintf_r+0x616>
 8010a7c:	e140      	b.n	8010d00 <_vfiprintf_r+0x898>
 8010a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010a82:	4293      	cmp	r3, r2
 8010a84:	da00      	bge.n	8010a88 <_vfiprintf_r+0x620>
 8010a86:	0013      	movs	r3, r2
 8010a88:	9a08      	ldr	r2, [sp, #32]
 8010a8a:	18d3      	adds	r3, r2, r3
 8010a8c:	9308      	str	r3, [sp, #32]
 8010a8e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d007      	beq.n	8010aa4 <_vfiprintf_r+0x63c>
 8010a94:	9903      	ldr	r1, [sp, #12]
 8010a96:	9806      	ldr	r0, [sp, #24]
 8010a98:	aa14      	add	r2, sp, #80	; 0x50
 8010a9a:	f7ff fcb0 	bl	80103fe <__sprint_r>
 8010a9e:	2800      	cmp	r0, #0
 8010aa0:	d000      	beq.n	8010aa4 <_vfiprintf_r+0x63c>
 8010aa2:	e14a      	b.n	8010d3a <_vfiprintf_r+0x8d2>
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	ad17      	add	r5, sp, #92	; 0x5c
 8010aa8:	9315      	str	r3, [sp, #84]	; 0x54
 8010aaa:	e6b7      	b.n	801081c <_vfiprintf_r+0x3b4>
 8010aac:	0030      	movs	r0, r6
 8010aae:	f7ef fb29 	bl	8000104 <strlen>
 8010ab2:	9005      	str	r0, [sp, #20]
 8010ab4:	e719      	b.n	80108ea <_vfiprintf_r+0x482>
 8010ab6:	2310      	movs	r3, #16
 8010ab8:	431c      	orrs	r4, r3
 8010aba:	2320      	movs	r3, #32
 8010abc:	0020      	movs	r0, r4
 8010abe:	4018      	ands	r0, r3
 8010ac0:	421c      	tst	r4, r3
 8010ac2:	d009      	beq.n	8010ad8 <_vfiprintf_r+0x670>
 8010ac4:	3b19      	subs	r3, #25
 8010ac6:	3707      	adds	r7, #7
 8010ac8:	439f      	bics	r7, r3
 8010aca:	0039      	movs	r1, r7
 8010acc:	c90c      	ldmia	r1!, {r2, r3}
 8010ace:	9200      	str	r2, [sp, #0]
 8010ad0:	9301      	str	r3, [sp, #4]
 8010ad2:	9104      	str	r1, [sp, #16]
 8010ad4:	2301      	movs	r3, #1
 8010ad6:	e6c7      	b.n	8010868 <_vfiprintf_r+0x400>
 8010ad8:	003b      	movs	r3, r7
 8010ada:	cb04      	ldmia	r3!, {r2}
 8010adc:	0021      	movs	r1, r4
 8010ade:	9304      	str	r3, [sp, #16]
 8010ae0:	2310      	movs	r3, #16
 8010ae2:	4019      	ands	r1, r3
 8010ae4:	421c      	tst	r4, r3
 8010ae6:	d003      	beq.n	8010af0 <_vfiprintf_r+0x688>
 8010ae8:	9200      	str	r2, [sp, #0]
 8010aea:	9001      	str	r0, [sp, #4]
 8010aec:	3b0f      	subs	r3, #15
 8010aee:	e6bb      	b.n	8010868 <_vfiprintf_r+0x400>
 8010af0:	2340      	movs	r3, #64	; 0x40
 8010af2:	0020      	movs	r0, r4
 8010af4:	4018      	ands	r0, r3
 8010af6:	421c      	tst	r4, r3
 8010af8:	d003      	beq.n	8010b02 <_vfiprintf_r+0x69a>
 8010afa:	b293      	uxth	r3, r2
 8010afc:	9300      	str	r3, [sp, #0]
 8010afe:	9101      	str	r1, [sp, #4]
 8010b00:	e7e8      	b.n	8010ad4 <_vfiprintf_r+0x66c>
 8010b02:	2380      	movs	r3, #128	; 0x80
 8010b04:	0021      	movs	r1, r4
 8010b06:	009b      	lsls	r3, r3, #2
 8010b08:	4019      	ands	r1, r3
 8010b0a:	421c      	tst	r4, r3
 8010b0c:	d003      	beq.n	8010b16 <_vfiprintf_r+0x6ae>
 8010b0e:	b2d3      	uxtb	r3, r2
 8010b10:	9300      	str	r3, [sp, #0]
 8010b12:	9001      	str	r0, [sp, #4]
 8010b14:	e7de      	b.n	8010ad4 <_vfiprintf_r+0x66c>
 8010b16:	9200      	str	r2, [sp, #0]
 8010b18:	e7f1      	b.n	8010afe <_vfiprintf_r+0x696>
 8010b1a:	4a23      	ldr	r2, [pc, #140]	; (8010ba8 <_vfiprintf_r+0x740>)
 8010b1c:	0020      	movs	r0, r4
 8010b1e:	920c      	str	r2, [sp, #48]	; 0x30
 8010b20:	2220      	movs	r2, #32
 8010b22:	4010      	ands	r0, r2
 8010b24:	4214      	tst	r4, r2
 8010b26:	d019      	beq.n	8010b5c <_vfiprintf_r+0x6f4>
 8010b28:	3a19      	subs	r2, #25
 8010b2a:	3707      	adds	r7, #7
 8010b2c:	4397      	bics	r7, r2
 8010b2e:	0038      	movs	r0, r7
 8010b30:	c806      	ldmia	r0!, {r1, r2}
 8010b32:	9100      	str	r1, [sp, #0]
 8010b34:	9201      	str	r2, [sp, #4]
 8010b36:	9004      	str	r0, [sp, #16]
 8010b38:	07e2      	lsls	r2, r4, #31
 8010b3a:	d509      	bpl.n	8010b50 <_vfiprintf_r+0x6e8>
 8010b3c:	9a00      	ldr	r2, [sp, #0]
 8010b3e:	9901      	ldr	r1, [sp, #4]
 8010b40:	430a      	orrs	r2, r1
 8010b42:	d005      	beq.n	8010b50 <_vfiprintf_r+0x6e8>
 8010b44:	aa13      	add	r2, sp, #76	; 0x4c
 8010b46:	2130      	movs	r1, #48	; 0x30
 8010b48:	7053      	strb	r3, [r2, #1]
 8010b4a:	2302      	movs	r3, #2
 8010b4c:	7011      	strb	r1, [r2, #0]
 8010b4e:	431c      	orrs	r4, r3
 8010b50:	4b10      	ldr	r3, [pc, #64]	; (8010b94 <_vfiprintf_r+0x72c>)
 8010b52:	401c      	ands	r4, r3
 8010b54:	2302      	movs	r3, #2
 8010b56:	e687      	b.n	8010868 <_vfiprintf_r+0x400>
 8010b58:	4a10      	ldr	r2, [pc, #64]	; (8010b9c <_vfiprintf_r+0x734>)
 8010b5a:	e7df      	b.n	8010b1c <_vfiprintf_r+0x6b4>
 8010b5c:	0039      	movs	r1, r7
 8010b5e:	c904      	ldmia	r1!, {r2}
 8010b60:	0026      	movs	r6, r4
 8010b62:	9104      	str	r1, [sp, #16]
 8010b64:	2110      	movs	r1, #16
 8010b66:	400e      	ands	r6, r1
 8010b68:	420c      	tst	r4, r1
 8010b6a:	d002      	beq.n	8010b72 <_vfiprintf_r+0x70a>
 8010b6c:	9200      	str	r2, [sp, #0]
 8010b6e:	9001      	str	r0, [sp, #4]
 8010b70:	e7e2      	b.n	8010b38 <_vfiprintf_r+0x6d0>
 8010b72:	2140      	movs	r1, #64	; 0x40
 8010b74:	0020      	movs	r0, r4
 8010b76:	4008      	ands	r0, r1
 8010b78:	420c      	tst	r4, r1
 8010b7a:	d003      	beq.n	8010b84 <_vfiprintf_r+0x71c>
 8010b7c:	b292      	uxth	r2, r2
 8010b7e:	9200      	str	r2, [sp, #0]
 8010b80:	9601      	str	r6, [sp, #4]
 8010b82:	e7d9      	b.n	8010b38 <_vfiprintf_r+0x6d0>
 8010b84:	2180      	movs	r1, #128	; 0x80
 8010b86:	0026      	movs	r6, r4
 8010b88:	0089      	lsls	r1, r1, #2
 8010b8a:	400e      	ands	r6, r1
 8010b8c:	420c      	tst	r4, r1
 8010b8e:	d0f6      	beq.n	8010b7e <_vfiprintf_r+0x716>
 8010b90:	b2d2      	uxtb	r2, r2
 8010b92:	e7eb      	b.n	8010b6c <_vfiprintf_r+0x704>
 8010b94:	fffffbff 	.word	0xfffffbff
 8010b98:	00007830 	.word	0x00007830
 8010b9c:	080133cc 	.word	0x080133cc
 8010ba0:	080134d9 	.word	0x080134d9
 8010ba4:	080134e9 	.word	0x080134e9
 8010ba8:	080133dd 	.word	0x080133dd
 8010bac:	9b01      	ldr	r3, [sp, #4]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d109      	bne.n	8010bc6 <_vfiprintf_r+0x75e>
 8010bb2:	9b00      	ldr	r3, [sp, #0]
 8010bb4:	2b09      	cmp	r3, #9
 8010bb6:	d806      	bhi.n	8010bc6 <_vfiprintf_r+0x75e>
 8010bb8:	26b7      	movs	r6, #183	; 0xb7
 8010bba:	ab12      	add	r3, sp, #72	; 0x48
 8010bbc:	18f6      	adds	r6, r6, r3
 8010bbe:	9b00      	ldr	r3, [sp, #0]
 8010bc0:	3330      	adds	r3, #48	; 0x30
 8010bc2:	7033      	strb	r3, [r6, #0]
 8010bc4:	e115      	b.n	8010df2 <_vfiprintf_r+0x98a>
 8010bc6:	2380      	movs	r3, #128	; 0x80
 8010bc8:	2400      	movs	r4, #0
 8010bca:	00db      	lsls	r3, r3, #3
 8010bcc:	403b      	ands	r3, r7
 8010bce:	ae40      	add	r6, sp, #256	; 0x100
 8010bd0:	930a      	str	r3, [sp, #40]	; 0x28
 8010bd2:	220a      	movs	r2, #10
 8010bd4:	9800      	ldr	r0, [sp, #0]
 8010bd6:	9901      	ldr	r1, [sp, #4]
 8010bd8:	2300      	movs	r3, #0
 8010bda:	f7ef fc63 	bl	80004a4 <__aeabi_uldivmod>
 8010bde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010be0:	3e01      	subs	r6, #1
 8010be2:	3230      	adds	r2, #48	; 0x30
 8010be4:	900b      	str	r0, [sp, #44]	; 0x2c
 8010be6:	9110      	str	r1, [sp, #64]	; 0x40
 8010be8:	7032      	strb	r2, [r6, #0]
 8010bea:	3401      	adds	r4, #1
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d01a      	beq.n	8010c26 <_vfiprintf_r+0x7be>
 8010bf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010bf2:	781b      	ldrb	r3, [r3, #0]
 8010bf4:	42a3      	cmp	r3, r4
 8010bf6:	d116      	bne.n	8010c26 <_vfiprintf_r+0x7be>
 8010bf8:	2cff      	cmp	r4, #255	; 0xff
 8010bfa:	d014      	beq.n	8010c26 <_vfiprintf_r+0x7be>
 8010bfc:	9b01      	ldr	r3, [sp, #4]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d102      	bne.n	8010c08 <_vfiprintf_r+0x7a0>
 8010c02:	9b00      	ldr	r3, [sp, #0]
 8010c04:	2b09      	cmp	r3, #9
 8010c06:	d90e      	bls.n	8010c26 <_vfiprintf_r+0x7be>
 8010c08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010c0a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010c0c:	1af6      	subs	r6, r6, r3
 8010c0e:	001a      	movs	r2, r3
 8010c10:	0030      	movs	r0, r6
 8010c12:	f7f9 ffe6 	bl	800abe2 <strncpy>
 8010c16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c18:	2400      	movs	r4, #0
 8010c1a:	785b      	ldrb	r3, [r3, #1]
 8010c1c:	1e5a      	subs	r2, r3, #1
 8010c1e:	4193      	sbcs	r3, r2
 8010c20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010c22:	18d3      	adds	r3, r2, r3
 8010c24:	930d      	str	r3, [sp, #52]	; 0x34
 8010c26:	9b01      	ldr	r3, [sp, #4]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d103      	bne.n	8010c34 <_vfiprintf_r+0x7cc>
 8010c2c:	9b00      	ldr	r3, [sp, #0]
 8010c2e:	2b09      	cmp	r3, #9
 8010c30:	d800      	bhi.n	8010c34 <_vfiprintf_r+0x7cc>
 8010c32:	e0de      	b.n	8010df2 <_vfiprintf_r+0x98a>
 8010c34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c36:	9300      	str	r3, [sp, #0]
 8010c38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010c3a:	9301      	str	r3, [sp, #4]
 8010c3c:	e7c9      	b.n	8010bd2 <_vfiprintf_r+0x76a>
 8010c3e:	200f      	movs	r0, #15
 8010c40:	9b00      	ldr	r3, [sp, #0]
 8010c42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010c44:	4003      	ands	r3, r0
 8010c46:	5cd3      	ldrb	r3, [r2, r3]
 8010c48:	3e01      	subs	r6, #1
 8010c4a:	7033      	strb	r3, [r6, #0]
 8010c4c:	9b01      	ldr	r3, [sp, #4]
 8010c4e:	0719      	lsls	r1, r3, #28
 8010c50:	9b00      	ldr	r3, [sp, #0]
 8010c52:	091a      	lsrs	r2, r3, #4
 8010c54:	9b01      	ldr	r3, [sp, #4]
 8010c56:	4311      	orrs	r1, r2
 8010c58:	091b      	lsrs	r3, r3, #4
 8010c5a:	9301      	str	r3, [sp, #4]
 8010c5c:	000b      	movs	r3, r1
 8010c5e:	9a01      	ldr	r2, [sp, #4]
 8010c60:	9100      	str	r1, [sp, #0]
 8010c62:	4313      	orrs	r3, r2
 8010c64:	d1ec      	bne.n	8010c40 <_vfiprintf_r+0x7d8>
 8010c66:	e0c4      	b.n	8010df2 <_vfiprintf_r+0x98a>
 8010c68:	ae40      	add	r6, sp, #256	; 0x100
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d000      	beq.n	8010c70 <_vfiprintf_r+0x808>
 8010c6e:	e0c0      	b.n	8010df2 <_vfiprintf_r+0x98a>
 8010c70:	07e4      	lsls	r4, r4, #31
 8010c72:	d400      	bmi.n	8010c76 <_vfiprintf_r+0x80e>
 8010c74:	e0bd      	b.n	8010df2 <_vfiprintf_r+0x98a>
 8010c76:	26b7      	movs	r6, #183	; 0xb7
 8010c78:	ab12      	add	r3, sp, #72	; 0x48
 8010c7a:	18f6      	adds	r6, r6, r3
 8010c7c:	2330      	movs	r3, #48	; 0x30
 8010c7e:	e7a0      	b.n	8010bc2 <_vfiprintf_r+0x75a>
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d100      	bne.n	8010c86 <_vfiprintf_r+0x81e>
 8010c84:	e07e      	b.n	8010d84 <_vfiprintf_r+0x91c>
 8010c86:	ae27      	add	r6, sp, #156	; 0x9c
 8010c88:	7033      	strb	r3, [r6, #0]
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	aa12      	add	r2, sp, #72	; 0x48
 8010c8e:	70d3      	strb	r3, [r2, #3]
 8010c90:	9704      	str	r7, [sp, #16]
 8010c92:	e576      	b.n	8010782 <_vfiprintf_r+0x31a>
 8010c94:	2010      	movs	r0, #16
 8010c96:	1812      	adds	r2, r2, r0
 8010c98:	6068      	str	r0, [r5, #4]
 8010c9a:	9216      	str	r2, [sp, #88]	; 0x58
 8010c9c:	9315      	str	r3, [sp, #84]	; 0x54
 8010c9e:	2b07      	cmp	r3, #7
 8010ca0:	dd07      	ble.n	8010cb2 <_vfiprintf_r+0x84a>
 8010ca2:	9903      	ldr	r1, [sp, #12]
 8010ca4:	9806      	ldr	r0, [sp, #24]
 8010ca6:	aa14      	add	r2, sp, #80	; 0x50
 8010ca8:	f7ff fba9 	bl	80103fe <__sprint_r>
 8010cac:	2800      	cmp	r0, #0
 8010cae:	d144      	bne.n	8010d3a <_vfiprintf_r+0x8d2>
 8010cb0:	a917      	add	r1, sp, #92	; 0x5c
 8010cb2:	000d      	movs	r5, r1
 8010cb4:	3f10      	subs	r7, #16
 8010cb6:	e63b      	b.n	8010930 <_vfiprintf_r+0x4c8>
 8010cb8:	2010      	movs	r0, #16
 8010cba:	1812      	adds	r2, r2, r0
 8010cbc:	6068      	str	r0, [r5, #4]
 8010cbe:	9216      	str	r2, [sp, #88]	; 0x58
 8010cc0:	9315      	str	r3, [sp, #84]	; 0x54
 8010cc2:	2b07      	cmp	r3, #7
 8010cc4:	dd07      	ble.n	8010cd6 <_vfiprintf_r+0x86e>
 8010cc6:	9903      	ldr	r1, [sp, #12]
 8010cc8:	9806      	ldr	r0, [sp, #24]
 8010cca:	aa14      	add	r2, sp, #80	; 0x50
 8010ccc:	f7ff fb97 	bl	80103fe <__sprint_r>
 8010cd0:	2800      	cmp	r0, #0
 8010cd2:	d132      	bne.n	8010d3a <_vfiprintf_r+0x8d2>
 8010cd4:	a917      	add	r1, sp, #92	; 0x5c
 8010cd6:	000d      	movs	r5, r1
 8010cd8:	3f10      	subs	r7, #16
 8010cda:	e67e      	b.n	80109da <_vfiprintf_r+0x572>
 8010cdc:	2010      	movs	r0, #16
 8010cde:	1812      	adds	r2, r2, r0
 8010ce0:	6068      	str	r0, [r5, #4]
 8010ce2:	9216      	str	r2, [sp, #88]	; 0x58
 8010ce4:	9315      	str	r3, [sp, #84]	; 0x54
 8010ce6:	2b07      	cmp	r3, #7
 8010ce8:	dd07      	ble.n	8010cfa <_vfiprintf_r+0x892>
 8010cea:	9903      	ldr	r1, [sp, #12]
 8010cec:	9806      	ldr	r0, [sp, #24]
 8010cee:	aa14      	add	r2, sp, #80	; 0x50
 8010cf0:	f7ff fb85 	bl	80103fe <__sprint_r>
 8010cf4:	2800      	cmp	r0, #0
 8010cf6:	d120      	bne.n	8010d3a <_vfiprintf_r+0x8d2>
 8010cf8:	a917      	add	r1, sp, #92	; 0x5c
 8010cfa:	000d      	movs	r5, r1
 8010cfc:	3f10      	subs	r7, #16
 8010cfe:	e68b      	b.n	8010a18 <_vfiprintf_r+0x5b0>
 8010d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d04:	2610      	movs	r6, #16
 8010d06:	1a9c      	subs	r4, r3, r2
 8010d08:	2c00      	cmp	r4, #0
 8010d0a:	dc00      	bgt.n	8010d0e <_vfiprintf_r+0x8a6>
 8010d0c:	e6b7      	b.n	8010a7e <_vfiprintf_r+0x616>
 8010d0e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010d10:	4a3b      	ldr	r2, [pc, #236]	; (8010e00 <_vfiprintf_r+0x998>)
 8010d12:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010d14:	3101      	adds	r1, #1
 8010d16:	602a      	str	r2, [r5, #0]
 8010d18:	2c10      	cmp	r4, #16
 8010d1a:	dc22      	bgt.n	8010d62 <_vfiprintf_r+0x8fa>
 8010d1c:	606c      	str	r4, [r5, #4]
 8010d1e:	18e4      	adds	r4, r4, r3
 8010d20:	9416      	str	r4, [sp, #88]	; 0x58
 8010d22:	9115      	str	r1, [sp, #84]	; 0x54
 8010d24:	2907      	cmp	r1, #7
 8010d26:	dc00      	bgt.n	8010d2a <_vfiprintf_r+0x8c2>
 8010d28:	e6a9      	b.n	8010a7e <_vfiprintf_r+0x616>
 8010d2a:	9903      	ldr	r1, [sp, #12]
 8010d2c:	9806      	ldr	r0, [sp, #24]
 8010d2e:	aa14      	add	r2, sp, #80	; 0x50
 8010d30:	f7ff fb65 	bl	80103fe <__sprint_r>
 8010d34:	2800      	cmp	r0, #0
 8010d36:	d100      	bne.n	8010d3a <_vfiprintf_r+0x8d2>
 8010d38:	e6a1      	b.n	8010a7e <_vfiprintf_r+0x616>
 8010d3a:	9b03      	ldr	r3, [sp, #12]
 8010d3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010d3e:	07db      	lsls	r3, r3, #31
 8010d40:	d407      	bmi.n	8010d52 <_vfiprintf_r+0x8ea>
 8010d42:	9b03      	ldr	r3, [sp, #12]
 8010d44:	899b      	ldrh	r3, [r3, #12]
 8010d46:	059b      	lsls	r3, r3, #22
 8010d48:	d403      	bmi.n	8010d52 <_vfiprintf_r+0x8ea>
 8010d4a:	9b03      	ldr	r3, [sp, #12]
 8010d4c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8010d4e:	f7fa f808 	bl	800ad62 <__retarget_lock_release_recursive>
 8010d52:	9b03      	ldr	r3, [sp, #12]
 8010d54:	899b      	ldrh	r3, [r3, #12]
 8010d56:	065b      	lsls	r3, r3, #25
 8010d58:	d401      	bmi.n	8010d5e <_vfiprintf_r+0x8f6>
 8010d5a:	f7ff fbc3 	bl	80104e4 <_vfiprintf_r+0x7c>
 8010d5e:	f7ff fbbe 	bl	80104de <_vfiprintf_r+0x76>
 8010d62:	3310      	adds	r3, #16
 8010d64:	606e      	str	r6, [r5, #4]
 8010d66:	9316      	str	r3, [sp, #88]	; 0x58
 8010d68:	9115      	str	r1, [sp, #84]	; 0x54
 8010d6a:	3508      	adds	r5, #8
 8010d6c:	2907      	cmp	r1, #7
 8010d6e:	dd07      	ble.n	8010d80 <_vfiprintf_r+0x918>
 8010d70:	9903      	ldr	r1, [sp, #12]
 8010d72:	9806      	ldr	r0, [sp, #24]
 8010d74:	aa14      	add	r2, sp, #80	; 0x50
 8010d76:	f7ff fb42 	bl	80103fe <__sprint_r>
 8010d7a:	2800      	cmp	r0, #0
 8010d7c:	d1dd      	bne.n	8010d3a <_vfiprintf_r+0x8d2>
 8010d7e:	ad17      	add	r5, sp, #92	; 0x5c
 8010d80:	3c10      	subs	r4, #16
 8010d82:	e7c4      	b.n	8010d0e <_vfiprintf_r+0x8a6>
 8010d84:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d102      	bne.n	8010d90 <_vfiprintf_r+0x928>
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	9315      	str	r3, [sp, #84]	; 0x54
 8010d8e:	e7d4      	b.n	8010d3a <_vfiprintf_r+0x8d2>
 8010d90:	9903      	ldr	r1, [sp, #12]
 8010d92:	9806      	ldr	r0, [sp, #24]
 8010d94:	aa14      	add	r2, sp, #80	; 0x50
 8010d96:	f7ff fb32 	bl	80103fe <__sprint_r>
 8010d9a:	2800      	cmp	r0, #0
 8010d9c:	d0f5      	beq.n	8010d8a <_vfiprintf_r+0x922>
 8010d9e:	e7cc      	b.n	8010d3a <_vfiprintf_r+0x8d2>
 8010da0:	0027      	movs	r7, r4
 8010da2:	2a00      	cmp	r2, #0
 8010da4:	d100      	bne.n	8010da8 <_vfiprintf_r+0x940>
 8010da6:	e51b      	b.n	80107e0 <_vfiprintf_r+0x378>
 8010da8:	2b01      	cmp	r3, #1
 8010daa:	d100      	bne.n	8010dae <_vfiprintf_r+0x946>
 8010dac:	e6fe      	b.n	8010bac <_vfiprintf_r+0x744>
 8010dae:	ae40      	add	r6, sp, #256	; 0x100
 8010db0:	2b02      	cmp	r3, #2
 8010db2:	d100      	bne.n	8010db6 <_vfiprintf_r+0x94e>
 8010db4:	e743      	b.n	8010c3e <_vfiprintf_r+0x7d6>
 8010db6:	2307      	movs	r3, #7
 8010db8:	469c      	mov	ip, r3
 8010dba:	4663      	mov	r3, ip
 8010dbc:	9900      	ldr	r1, [sp, #0]
 8010dbe:	0032      	movs	r2, r6
 8010dc0:	400b      	ands	r3, r1
 8010dc2:	9901      	ldr	r1, [sp, #4]
 8010dc4:	3e01      	subs	r6, #1
 8010dc6:	074c      	lsls	r4, r1, #29
 8010dc8:	9900      	ldr	r1, [sp, #0]
 8010dca:	3330      	adds	r3, #48	; 0x30
 8010dcc:	08c8      	lsrs	r0, r1, #3
 8010dce:	9901      	ldr	r1, [sp, #4]
 8010dd0:	4304      	orrs	r4, r0
 8010dd2:	08c9      	lsrs	r1, r1, #3
 8010dd4:	9101      	str	r1, [sp, #4]
 8010dd6:	0021      	movs	r1, r4
 8010dd8:	9801      	ldr	r0, [sp, #4]
 8010dda:	7033      	strb	r3, [r6, #0]
 8010ddc:	9400      	str	r4, [sp, #0]
 8010dde:	4301      	orrs	r1, r0
 8010de0:	d1eb      	bne.n	8010dba <_vfiprintf_r+0x952>
 8010de2:	07f9      	lsls	r1, r7, #31
 8010de4:	d505      	bpl.n	8010df2 <_vfiprintf_r+0x98a>
 8010de6:	2b30      	cmp	r3, #48	; 0x30
 8010de8:	d003      	beq.n	8010df2 <_vfiprintf_r+0x98a>
 8010dea:	2330      	movs	r3, #48	; 0x30
 8010dec:	3e01      	subs	r6, #1
 8010dee:	7033      	strb	r3, [r6, #0]
 8010df0:	1e96      	subs	r6, r2, #2
 8010df2:	9b05      	ldr	r3, [sp, #20]
 8010df4:	003c      	movs	r4, r7
 8010df6:	930b      	str	r3, [sp, #44]	; 0x2c
 8010df8:	ab40      	add	r3, sp, #256	; 0x100
 8010dfa:	1b9b      	subs	r3, r3, r6
 8010dfc:	9305      	str	r3, [sp, #20]
 8010dfe:	e575      	b.n	80108ec <_vfiprintf_r+0x484>
 8010e00:	080134d9 	.word	0x080134d9

08010e04 <__sbprintf>:
 8010e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e06:	0015      	movs	r5, r2
 8010e08:	2202      	movs	r2, #2
 8010e0a:	4c1e      	ldr	r4, [pc, #120]	; (8010e84 <__sbprintf+0x80>)
 8010e0c:	001f      	movs	r7, r3
 8010e0e:	898b      	ldrh	r3, [r1, #12]
 8010e10:	44a5      	add	sp, r4
 8010e12:	4393      	bics	r3, r2
 8010e14:	466a      	mov	r2, sp
 8010e16:	8193      	strh	r3, [r2, #12]
 8010e18:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8010e1a:	0006      	movs	r6, r0
 8010e1c:	9319      	str	r3, [sp, #100]	; 0x64
 8010e1e:	89cb      	ldrh	r3, [r1, #14]
 8010e20:	a816      	add	r0, sp, #88	; 0x58
 8010e22:	81d3      	strh	r3, [r2, #14]
 8010e24:	69cb      	ldr	r3, [r1, #28]
 8010e26:	000c      	movs	r4, r1
 8010e28:	9307      	str	r3, [sp, #28]
 8010e2a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8010e2c:	9309      	str	r3, [sp, #36]	; 0x24
 8010e2e:	ab1a      	add	r3, sp, #104	; 0x68
 8010e30:	9300      	str	r3, [sp, #0]
 8010e32:	9304      	str	r3, [sp, #16]
 8010e34:	2380      	movs	r3, #128	; 0x80
 8010e36:	00db      	lsls	r3, r3, #3
 8010e38:	9302      	str	r3, [sp, #8]
 8010e3a:	9305      	str	r3, [sp, #20]
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	9306      	str	r3, [sp, #24]
 8010e40:	f7f9 ff8c 	bl	800ad5c <__retarget_lock_init_recursive>
 8010e44:	002a      	movs	r2, r5
 8010e46:	003b      	movs	r3, r7
 8010e48:	4669      	mov	r1, sp
 8010e4a:	0030      	movs	r0, r6
 8010e4c:	f7ff fb0c 	bl	8010468 <_vfiprintf_r>
 8010e50:	1e05      	subs	r5, r0, #0
 8010e52:	db07      	blt.n	8010e64 <__sbprintf+0x60>
 8010e54:	4669      	mov	r1, sp
 8010e56:	0030      	movs	r0, r6
 8010e58:	f7fd fdf6 	bl	800ea48 <_fflush_r>
 8010e5c:	2800      	cmp	r0, #0
 8010e5e:	d001      	beq.n	8010e64 <__sbprintf+0x60>
 8010e60:	2501      	movs	r5, #1
 8010e62:	426d      	negs	r5, r5
 8010e64:	466b      	mov	r3, sp
 8010e66:	899a      	ldrh	r2, [r3, #12]
 8010e68:	2340      	movs	r3, #64	; 0x40
 8010e6a:	421a      	tst	r2, r3
 8010e6c:	d002      	beq.n	8010e74 <__sbprintf+0x70>
 8010e6e:	89a2      	ldrh	r2, [r4, #12]
 8010e70:	4313      	orrs	r3, r2
 8010e72:	81a3      	strh	r3, [r4, #12]
 8010e74:	9816      	ldr	r0, [sp, #88]	; 0x58
 8010e76:	f7f9 ff72 	bl	800ad5e <__retarget_lock_close_recursive>
 8010e7a:	0028      	movs	r0, r5
 8010e7c:	4b02      	ldr	r3, [pc, #8]	; (8010e88 <__sbprintf+0x84>)
 8010e7e:	449d      	add	sp, r3
 8010e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e82:	46c0      	nop			; (mov r8, r8)
 8010e84:	fffffb94 	.word	0xfffffb94
 8010e88:	0000046c 	.word	0x0000046c

08010e8c <__sfvwrite_r>:
 8010e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e8e:	6893      	ldr	r3, [r2, #8]
 8010e90:	b087      	sub	sp, #28
 8010e92:	000c      	movs	r4, r1
 8010e94:	9002      	str	r0, [sp, #8]
 8010e96:	9204      	str	r2, [sp, #16]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d102      	bne.n	8010ea2 <__sfvwrite_r+0x16>
 8010e9c:	2000      	movs	r0, #0
 8010e9e:	b007      	add	sp, #28
 8010ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ea2:	898b      	ldrh	r3, [r1, #12]
 8010ea4:	071b      	lsls	r3, r3, #28
 8010ea6:	d557      	bpl.n	8010f58 <__sfvwrite_r+0xcc>
 8010ea8:	690b      	ldr	r3, [r1, #16]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d054      	beq.n	8010f58 <__sfvwrite_r+0xcc>
 8010eae:	9b04      	ldr	r3, [sp, #16]
 8010eb0:	2202      	movs	r2, #2
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	9301      	str	r3, [sp, #4]
 8010eb6:	89a3      	ldrh	r3, [r4, #12]
 8010eb8:	001f      	movs	r7, r3
 8010eba:	4017      	ands	r7, r2
 8010ebc:	4213      	tst	r3, r2
 8010ebe:	d171      	bne.n	8010fa4 <__sfvwrite_r+0x118>
 8010ec0:	2201      	movs	r2, #1
 8010ec2:	2101      	movs	r1, #1
 8010ec4:	401a      	ands	r2, r3
 8010ec6:	420b      	tst	r3, r1
 8010ec8:	d100      	bne.n	8010ecc <__sfvwrite_r+0x40>
 8010eca:	e0a5      	b.n	8011018 <__sfvwrite_r+0x18c>
 8010ecc:	0038      	movs	r0, r7
 8010ece:	003e      	movs	r6, r7
 8010ed0:	9703      	str	r7, [sp, #12]
 8010ed2:	9b03      	ldr	r3, [sp, #12]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d100      	bne.n	8010eda <__sfvwrite_r+0x4e>
 8010ed8:	e10b      	b.n	80110f2 <__sfvwrite_r+0x266>
 8010eda:	2800      	cmp	r0, #0
 8010edc:	d10a      	bne.n	8010ef4 <__sfvwrite_r+0x68>
 8010ede:	001a      	movs	r2, r3
 8010ee0:	210a      	movs	r1, #10
 8010ee2:	0030      	movs	r0, r6
 8010ee4:	f7fd fe2a 	bl	800eb3c <memchr>
 8010ee8:	9b03      	ldr	r3, [sp, #12]
 8010eea:	1c5f      	adds	r7, r3, #1
 8010eec:	2800      	cmp	r0, #0
 8010eee:	d001      	beq.n	8010ef4 <__sfvwrite_r+0x68>
 8010ef0:	3001      	adds	r0, #1
 8010ef2:	1b87      	subs	r7, r0, r6
 8010ef4:	9b03      	ldr	r3, [sp, #12]
 8010ef6:	9705      	str	r7, [sp, #20]
 8010ef8:	429f      	cmp	r7, r3
 8010efa:	d900      	bls.n	8010efe <__sfvwrite_r+0x72>
 8010efc:	9305      	str	r3, [sp, #20]
 8010efe:	6820      	ldr	r0, [r4, #0]
 8010f00:	6922      	ldr	r2, [r4, #16]
 8010f02:	68a5      	ldr	r5, [r4, #8]
 8010f04:	6963      	ldr	r3, [r4, #20]
 8010f06:	4290      	cmp	r0, r2
 8010f08:	d800      	bhi.n	8010f0c <__sfvwrite_r+0x80>
 8010f0a:	e0fb      	b.n	8011104 <__sfvwrite_r+0x278>
 8010f0c:	9a05      	ldr	r2, [sp, #20]
 8010f0e:	18ed      	adds	r5, r5, r3
 8010f10:	42aa      	cmp	r2, r5
 8010f12:	dc00      	bgt.n	8010f16 <__sfvwrite_r+0x8a>
 8010f14:	e0f6      	b.n	8011104 <__sfvwrite_r+0x278>
 8010f16:	0031      	movs	r1, r6
 8010f18:	002a      	movs	r2, r5
 8010f1a:	f000 fa1e 	bl	801135a <memmove>
 8010f1e:	6823      	ldr	r3, [r4, #0]
 8010f20:	0021      	movs	r1, r4
 8010f22:	195b      	adds	r3, r3, r5
 8010f24:	9802      	ldr	r0, [sp, #8]
 8010f26:	6023      	str	r3, [r4, #0]
 8010f28:	f7fd fd8e 	bl	800ea48 <_fflush_r>
 8010f2c:	2800      	cmp	r0, #0
 8010f2e:	d16e      	bne.n	801100e <__sfvwrite_r+0x182>
 8010f30:	2001      	movs	r0, #1
 8010f32:	1b7f      	subs	r7, r7, r5
 8010f34:	d105      	bne.n	8010f42 <__sfvwrite_r+0xb6>
 8010f36:	0021      	movs	r1, r4
 8010f38:	9802      	ldr	r0, [sp, #8]
 8010f3a:	f7fd fd85 	bl	800ea48 <_fflush_r>
 8010f3e:	2800      	cmp	r0, #0
 8010f40:	d165      	bne.n	801100e <__sfvwrite_r+0x182>
 8010f42:	9b03      	ldr	r3, [sp, #12]
 8010f44:	9a04      	ldr	r2, [sp, #16]
 8010f46:	1b5b      	subs	r3, r3, r5
 8010f48:	9303      	str	r3, [sp, #12]
 8010f4a:	9b04      	ldr	r3, [sp, #16]
 8010f4c:	1976      	adds	r6, r6, r5
 8010f4e:	689b      	ldr	r3, [r3, #8]
 8010f50:	1b5b      	subs	r3, r3, r5
 8010f52:	6093      	str	r3, [r2, #8]
 8010f54:	d1bd      	bne.n	8010ed2 <__sfvwrite_r+0x46>
 8010f56:	e7a1      	b.n	8010e9c <__sfvwrite_r+0x10>
 8010f58:	0021      	movs	r1, r4
 8010f5a:	9802      	ldr	r0, [sp, #8]
 8010f5c:	f000 f932 	bl	80111c4 <__swsetup_r>
 8010f60:	2800      	cmp	r0, #0
 8010f62:	d0a4      	beq.n	8010eae <__sfvwrite_r+0x22>
 8010f64:	2001      	movs	r0, #1
 8010f66:	4240      	negs	r0, r0
 8010f68:	e799      	b.n	8010e9e <__sfvwrite_r+0x12>
 8010f6a:	9b01      	ldr	r3, [sp, #4]
 8010f6c:	681e      	ldr	r6, [r3, #0]
 8010f6e:	685d      	ldr	r5, [r3, #4]
 8010f70:	3308      	adds	r3, #8
 8010f72:	9301      	str	r3, [sp, #4]
 8010f74:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8010f76:	69e1      	ldr	r1, [r4, #28]
 8010f78:	2d00      	cmp	r5, #0
 8010f7a:	d0f6      	beq.n	8010f6a <__sfvwrite_r+0xde>
 8010f7c:	4a6e      	ldr	r2, [pc, #440]	; (8011138 <__sfvwrite_r+0x2ac>)
 8010f7e:	002b      	movs	r3, r5
 8010f80:	4295      	cmp	r5, r2
 8010f82:	d900      	bls.n	8010f86 <__sfvwrite_r+0xfa>
 8010f84:	0013      	movs	r3, r2
 8010f86:	0032      	movs	r2, r6
 8010f88:	9802      	ldr	r0, [sp, #8]
 8010f8a:	47b8      	blx	r7
 8010f8c:	2800      	cmp	r0, #0
 8010f8e:	dd3e      	ble.n	801100e <__sfvwrite_r+0x182>
 8010f90:	9b04      	ldr	r3, [sp, #16]
 8010f92:	9a04      	ldr	r2, [sp, #16]
 8010f94:	689b      	ldr	r3, [r3, #8]
 8010f96:	1836      	adds	r6, r6, r0
 8010f98:	1a1b      	subs	r3, r3, r0
 8010f9a:	1a2d      	subs	r5, r5, r0
 8010f9c:	6093      	str	r3, [r2, #8]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d1e8      	bne.n	8010f74 <__sfvwrite_r+0xe8>
 8010fa2:	e77b      	b.n	8010e9c <__sfvwrite_r+0x10>
 8010fa4:	2600      	movs	r6, #0
 8010fa6:	0035      	movs	r5, r6
 8010fa8:	e7e4      	b.n	8010f74 <__sfvwrite_r+0xe8>
 8010faa:	9b01      	ldr	r3, [sp, #4]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	9303      	str	r3, [sp, #12]
 8010fb0:	9b01      	ldr	r3, [sp, #4]
 8010fb2:	685d      	ldr	r5, [r3, #4]
 8010fb4:	3308      	adds	r3, #8
 8010fb6:	9301      	str	r3, [sp, #4]
 8010fb8:	220c      	movs	r2, #12
 8010fba:	5ea3      	ldrsh	r3, [r4, r2]
 8010fbc:	6820      	ldr	r0, [r4, #0]
 8010fbe:	68a6      	ldr	r6, [r4, #8]
 8010fc0:	2d00      	cmp	r5, #0
 8010fc2:	d0f2      	beq.n	8010faa <__sfvwrite_r+0x11e>
 8010fc4:	2180      	movs	r1, #128	; 0x80
 8010fc6:	0089      	lsls	r1, r1, #2
 8010fc8:	b29a      	uxth	r2, r3
 8010fca:	420b      	tst	r3, r1
 8010fcc:	d062      	beq.n	8011094 <__sfvwrite_r+0x208>
 8010fce:	42ae      	cmp	r6, r5
 8010fd0:	d837      	bhi.n	8011042 <__sfvwrite_r+0x1b6>
 8010fd2:	2390      	movs	r3, #144	; 0x90
 8010fd4:	00db      	lsls	r3, r3, #3
 8010fd6:	421a      	tst	r2, r3
 8010fd8:	d033      	beq.n	8011042 <__sfvwrite_r+0x1b6>
 8010fda:	6921      	ldr	r1, [r4, #16]
 8010fdc:	1a43      	subs	r3, r0, r1
 8010fde:	2003      	movs	r0, #3
 8010fe0:	9305      	str	r3, [sp, #20]
 8010fe2:	6963      	ldr	r3, [r4, #20]
 8010fe4:	4343      	muls	r3, r0
 8010fe6:	0fdf      	lsrs	r7, r3, #31
 8010fe8:	18ff      	adds	r7, r7, r3
 8010fea:	9b05      	ldr	r3, [sp, #20]
 8010fec:	107f      	asrs	r7, r7, #1
 8010fee:	3301      	adds	r3, #1
 8010ff0:	195b      	adds	r3, r3, r5
 8010ff2:	42bb      	cmp	r3, r7
 8010ff4:	d900      	bls.n	8010ff8 <__sfvwrite_r+0x16c>
 8010ff6:	001f      	movs	r7, r3
 8010ff8:	0552      	lsls	r2, r2, #21
 8010ffa:	d53c      	bpl.n	8011076 <__sfvwrite_r+0x1ea>
 8010ffc:	0039      	movs	r1, r7
 8010ffe:	9802      	ldr	r0, [sp, #8]
 8011000:	f7f8 fb56 	bl	80096b0 <_malloc_r>
 8011004:	1e06      	subs	r6, r0, #0
 8011006:	d10a      	bne.n	801101e <__sfvwrite_r+0x192>
 8011008:	230c      	movs	r3, #12
 801100a:	9a02      	ldr	r2, [sp, #8]
 801100c:	6013      	str	r3, [r2, #0]
 801100e:	2340      	movs	r3, #64	; 0x40
 8011010:	89a2      	ldrh	r2, [r4, #12]
 8011012:	4313      	orrs	r3, r2
 8011014:	81a3      	strh	r3, [r4, #12]
 8011016:	e7a5      	b.n	8010f64 <__sfvwrite_r+0xd8>
 8011018:	0015      	movs	r5, r2
 801101a:	9203      	str	r2, [sp, #12]
 801101c:	e7cc      	b.n	8010fb8 <__sfvwrite_r+0x12c>
 801101e:	9a05      	ldr	r2, [sp, #20]
 8011020:	6921      	ldr	r1, [r4, #16]
 8011022:	f7f9 feaa 	bl	800ad7a <memcpy>
 8011026:	89a2      	ldrh	r2, [r4, #12]
 8011028:	4b44      	ldr	r3, [pc, #272]	; (801113c <__sfvwrite_r+0x2b0>)
 801102a:	401a      	ands	r2, r3
 801102c:	2380      	movs	r3, #128	; 0x80
 801102e:	4313      	orrs	r3, r2
 8011030:	81a3      	strh	r3, [r4, #12]
 8011032:	9b05      	ldr	r3, [sp, #20]
 8011034:	6126      	str	r6, [r4, #16]
 8011036:	18f6      	adds	r6, r6, r3
 8011038:	6026      	str	r6, [r4, #0]
 801103a:	002e      	movs	r6, r5
 801103c:	6167      	str	r7, [r4, #20]
 801103e:	1aff      	subs	r7, r7, r3
 8011040:	60a7      	str	r7, [r4, #8]
 8011042:	002f      	movs	r7, r5
 8011044:	42ae      	cmp	r6, r5
 8011046:	d900      	bls.n	801104a <__sfvwrite_r+0x1be>
 8011048:	002e      	movs	r6, r5
 801104a:	0032      	movs	r2, r6
 801104c:	9903      	ldr	r1, [sp, #12]
 801104e:	6820      	ldr	r0, [r4, #0]
 8011050:	f000 f983 	bl	801135a <memmove>
 8011054:	68a3      	ldr	r3, [r4, #8]
 8011056:	1b9b      	subs	r3, r3, r6
 8011058:	60a3      	str	r3, [r4, #8]
 801105a:	6823      	ldr	r3, [r4, #0]
 801105c:	199b      	adds	r3, r3, r6
 801105e:	6023      	str	r3, [r4, #0]
 8011060:	9b03      	ldr	r3, [sp, #12]
 8011062:	9a04      	ldr	r2, [sp, #16]
 8011064:	19db      	adds	r3, r3, r7
 8011066:	9303      	str	r3, [sp, #12]
 8011068:	9b04      	ldr	r3, [sp, #16]
 801106a:	1bed      	subs	r5, r5, r7
 801106c:	689b      	ldr	r3, [r3, #8]
 801106e:	1bdb      	subs	r3, r3, r7
 8011070:	6093      	str	r3, [r2, #8]
 8011072:	d1a1      	bne.n	8010fb8 <__sfvwrite_r+0x12c>
 8011074:	e712      	b.n	8010e9c <__sfvwrite_r+0x10>
 8011076:	003a      	movs	r2, r7
 8011078:	9802      	ldr	r0, [sp, #8]
 801107a:	f7fe fcd7 	bl	800fa2c <_realloc_r>
 801107e:	1e06      	subs	r6, r0, #0
 8011080:	d1d7      	bne.n	8011032 <__sfvwrite_r+0x1a6>
 8011082:	6921      	ldr	r1, [r4, #16]
 8011084:	9802      	ldr	r0, [sp, #8]
 8011086:	f7f9 fef3 	bl	800ae70 <_free_r>
 801108a:	2280      	movs	r2, #128	; 0x80
 801108c:	89a3      	ldrh	r3, [r4, #12]
 801108e:	4393      	bics	r3, r2
 8011090:	81a3      	strh	r3, [r4, #12]
 8011092:	e7b9      	b.n	8011008 <__sfvwrite_r+0x17c>
 8011094:	6923      	ldr	r3, [r4, #16]
 8011096:	4283      	cmp	r3, r0
 8011098:	d302      	bcc.n	80110a0 <__sfvwrite_r+0x214>
 801109a:	6967      	ldr	r7, [r4, #20]
 801109c:	42af      	cmp	r7, r5
 801109e:	d916      	bls.n	80110ce <__sfvwrite_r+0x242>
 80110a0:	42ae      	cmp	r6, r5
 80110a2:	d900      	bls.n	80110a6 <__sfvwrite_r+0x21a>
 80110a4:	002e      	movs	r6, r5
 80110a6:	0032      	movs	r2, r6
 80110a8:	9903      	ldr	r1, [sp, #12]
 80110aa:	f000 f956 	bl	801135a <memmove>
 80110ae:	68a3      	ldr	r3, [r4, #8]
 80110b0:	6822      	ldr	r2, [r4, #0]
 80110b2:	1b9b      	subs	r3, r3, r6
 80110b4:	1992      	adds	r2, r2, r6
 80110b6:	0037      	movs	r7, r6
 80110b8:	60a3      	str	r3, [r4, #8]
 80110ba:	6022      	str	r2, [r4, #0]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d1cf      	bne.n	8011060 <__sfvwrite_r+0x1d4>
 80110c0:	0021      	movs	r1, r4
 80110c2:	9802      	ldr	r0, [sp, #8]
 80110c4:	f7fd fcc0 	bl	800ea48 <_fflush_r>
 80110c8:	2800      	cmp	r0, #0
 80110ca:	d0c9      	beq.n	8011060 <__sfvwrite_r+0x1d4>
 80110cc:	e79f      	b.n	801100e <__sfvwrite_r+0x182>
 80110ce:	4b1c      	ldr	r3, [pc, #112]	; (8011140 <__sfvwrite_r+0x2b4>)
 80110d0:	0028      	movs	r0, r5
 80110d2:	429d      	cmp	r5, r3
 80110d4:	d900      	bls.n	80110d8 <__sfvwrite_r+0x24c>
 80110d6:	481b      	ldr	r0, [pc, #108]	; (8011144 <__sfvwrite_r+0x2b8>)
 80110d8:	0039      	movs	r1, r7
 80110da:	f7ef f8b9 	bl	8000250 <__divsi3>
 80110de:	003b      	movs	r3, r7
 80110e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80110e2:	4343      	muls	r3, r0
 80110e4:	9a03      	ldr	r2, [sp, #12]
 80110e6:	69e1      	ldr	r1, [r4, #28]
 80110e8:	9802      	ldr	r0, [sp, #8]
 80110ea:	47b0      	blx	r6
 80110ec:	1e07      	subs	r7, r0, #0
 80110ee:	dcb7      	bgt.n	8011060 <__sfvwrite_r+0x1d4>
 80110f0:	e78d      	b.n	801100e <__sfvwrite_r+0x182>
 80110f2:	9b01      	ldr	r3, [sp, #4]
 80110f4:	2000      	movs	r0, #0
 80110f6:	681e      	ldr	r6, [r3, #0]
 80110f8:	685b      	ldr	r3, [r3, #4]
 80110fa:	9303      	str	r3, [sp, #12]
 80110fc:	9b01      	ldr	r3, [sp, #4]
 80110fe:	3308      	adds	r3, #8
 8011100:	9301      	str	r3, [sp, #4]
 8011102:	e6e6      	b.n	8010ed2 <__sfvwrite_r+0x46>
 8011104:	9a05      	ldr	r2, [sp, #20]
 8011106:	4293      	cmp	r3, r2
 8011108:	dc08      	bgt.n	801111c <__sfvwrite_r+0x290>
 801110a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801110c:	0032      	movs	r2, r6
 801110e:	69e1      	ldr	r1, [r4, #28]
 8011110:	9802      	ldr	r0, [sp, #8]
 8011112:	47a8      	blx	r5
 8011114:	1e05      	subs	r5, r0, #0
 8011116:	dd00      	ble.n	801111a <__sfvwrite_r+0x28e>
 8011118:	e70a      	b.n	8010f30 <__sfvwrite_r+0xa4>
 801111a:	e778      	b.n	801100e <__sfvwrite_r+0x182>
 801111c:	9a05      	ldr	r2, [sp, #20]
 801111e:	0031      	movs	r1, r6
 8011120:	f000 f91b 	bl	801135a <memmove>
 8011124:	9a05      	ldr	r2, [sp, #20]
 8011126:	68a3      	ldr	r3, [r4, #8]
 8011128:	0015      	movs	r5, r2
 801112a:	1a9b      	subs	r3, r3, r2
 801112c:	60a3      	str	r3, [r4, #8]
 801112e:	6823      	ldr	r3, [r4, #0]
 8011130:	189b      	adds	r3, r3, r2
 8011132:	6023      	str	r3, [r4, #0]
 8011134:	e6fc      	b.n	8010f30 <__sfvwrite_r+0xa4>
 8011136:	46c0      	nop			; (mov r8, r8)
 8011138:	7ffffc00 	.word	0x7ffffc00
 801113c:	fffffb7f 	.word	0xfffffb7f
 8011140:	7ffffffe 	.word	0x7ffffffe
 8011144:	7fffffff 	.word	0x7fffffff

08011148 <__submore>:
 8011148:	000b      	movs	r3, r1
 801114a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801114c:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 801114e:	3340      	adds	r3, #64	; 0x40
 8011150:	000c      	movs	r4, r1
 8011152:	429d      	cmp	r5, r3
 8011154:	d11c      	bne.n	8011190 <__submore+0x48>
 8011156:	2680      	movs	r6, #128	; 0x80
 8011158:	00f6      	lsls	r6, r6, #3
 801115a:	0031      	movs	r1, r6
 801115c:	f7f8 faa8 	bl	80096b0 <_malloc_r>
 8011160:	2800      	cmp	r0, #0
 8011162:	d102      	bne.n	801116a <__submore+0x22>
 8011164:	2001      	movs	r0, #1
 8011166:	4240      	negs	r0, r0
 8011168:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801116a:	0023      	movs	r3, r4
 801116c:	6320      	str	r0, [r4, #48]	; 0x30
 801116e:	6366      	str	r6, [r4, #52]	; 0x34
 8011170:	3342      	adds	r3, #66	; 0x42
 8011172:	781a      	ldrb	r2, [r3, #0]
 8011174:	4b10      	ldr	r3, [pc, #64]	; (80111b8 <__submore+0x70>)
 8011176:	54c2      	strb	r2, [r0, r3]
 8011178:	0023      	movs	r3, r4
 801117a:	3341      	adds	r3, #65	; 0x41
 801117c:	781a      	ldrb	r2, [r3, #0]
 801117e:	4b0f      	ldr	r3, [pc, #60]	; (80111bc <__submore+0x74>)
 8011180:	54c2      	strb	r2, [r0, r3]
 8011182:	782a      	ldrb	r2, [r5, #0]
 8011184:	4b0e      	ldr	r3, [pc, #56]	; (80111c0 <__submore+0x78>)
 8011186:	54c2      	strb	r2, [r0, r3]
 8011188:	18c0      	adds	r0, r0, r3
 801118a:	6020      	str	r0, [r4, #0]
 801118c:	2000      	movs	r0, #0
 801118e:	e7eb      	b.n	8011168 <__submore+0x20>
 8011190:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8011192:	0029      	movs	r1, r5
 8011194:	0073      	lsls	r3, r6, #1
 8011196:	001a      	movs	r2, r3
 8011198:	9301      	str	r3, [sp, #4]
 801119a:	f7fe fc47 	bl	800fa2c <_realloc_r>
 801119e:	1e05      	subs	r5, r0, #0
 80111a0:	d0e0      	beq.n	8011164 <__submore+0x1c>
 80111a2:	1987      	adds	r7, r0, r6
 80111a4:	0001      	movs	r1, r0
 80111a6:	0032      	movs	r2, r6
 80111a8:	0038      	movs	r0, r7
 80111aa:	f7f9 fde6 	bl	800ad7a <memcpy>
 80111ae:	9b01      	ldr	r3, [sp, #4]
 80111b0:	6027      	str	r7, [r4, #0]
 80111b2:	6325      	str	r5, [r4, #48]	; 0x30
 80111b4:	6363      	str	r3, [r4, #52]	; 0x34
 80111b6:	e7e9      	b.n	801118c <__submore+0x44>
 80111b8:	000003ff 	.word	0x000003ff
 80111bc:	000003fe 	.word	0x000003fe
 80111c0:	000003fd 	.word	0x000003fd

080111c4 <__swsetup_r>:
 80111c4:	4b30      	ldr	r3, [pc, #192]	; (8011288 <__swsetup_r+0xc4>)
 80111c6:	b570      	push	{r4, r5, r6, lr}
 80111c8:	0005      	movs	r5, r0
 80111ca:	6818      	ldr	r0, [r3, #0]
 80111cc:	000c      	movs	r4, r1
 80111ce:	2800      	cmp	r0, #0
 80111d0:	d004      	beq.n	80111dc <__swsetup_r+0x18>
 80111d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d101      	bne.n	80111dc <__swsetup_r+0x18>
 80111d8:	f7f9 fbec 	bl	800a9b4 <__sinit>
 80111dc:	230c      	movs	r3, #12
 80111de:	5ee2      	ldrsh	r2, [r4, r3]
 80111e0:	b293      	uxth	r3, r2
 80111e2:	0711      	lsls	r1, r2, #28
 80111e4:	d423      	bmi.n	801122e <__swsetup_r+0x6a>
 80111e6:	06d9      	lsls	r1, r3, #27
 80111e8:	d407      	bmi.n	80111fa <__swsetup_r+0x36>
 80111ea:	2309      	movs	r3, #9
 80111ec:	2001      	movs	r0, #1
 80111ee:	602b      	str	r3, [r5, #0]
 80111f0:	3337      	adds	r3, #55	; 0x37
 80111f2:	4313      	orrs	r3, r2
 80111f4:	81a3      	strh	r3, [r4, #12]
 80111f6:	4240      	negs	r0, r0
 80111f8:	bd70      	pop	{r4, r5, r6, pc}
 80111fa:	075b      	lsls	r3, r3, #29
 80111fc:	d513      	bpl.n	8011226 <__swsetup_r+0x62>
 80111fe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011200:	2900      	cmp	r1, #0
 8011202:	d008      	beq.n	8011216 <__swsetup_r+0x52>
 8011204:	0023      	movs	r3, r4
 8011206:	3340      	adds	r3, #64	; 0x40
 8011208:	4299      	cmp	r1, r3
 801120a:	d002      	beq.n	8011212 <__swsetup_r+0x4e>
 801120c:	0028      	movs	r0, r5
 801120e:	f7f9 fe2f 	bl	800ae70 <_free_r>
 8011212:	2300      	movs	r3, #0
 8011214:	6323      	str	r3, [r4, #48]	; 0x30
 8011216:	2224      	movs	r2, #36	; 0x24
 8011218:	89a3      	ldrh	r3, [r4, #12]
 801121a:	4393      	bics	r3, r2
 801121c:	81a3      	strh	r3, [r4, #12]
 801121e:	2300      	movs	r3, #0
 8011220:	6063      	str	r3, [r4, #4]
 8011222:	6923      	ldr	r3, [r4, #16]
 8011224:	6023      	str	r3, [r4, #0]
 8011226:	2308      	movs	r3, #8
 8011228:	89a2      	ldrh	r2, [r4, #12]
 801122a:	4313      	orrs	r3, r2
 801122c:	81a3      	strh	r3, [r4, #12]
 801122e:	6923      	ldr	r3, [r4, #16]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d10b      	bne.n	801124c <__swsetup_r+0x88>
 8011234:	21a0      	movs	r1, #160	; 0xa0
 8011236:	2280      	movs	r2, #128	; 0x80
 8011238:	89a3      	ldrh	r3, [r4, #12]
 801123a:	0089      	lsls	r1, r1, #2
 801123c:	0092      	lsls	r2, r2, #2
 801123e:	400b      	ands	r3, r1
 8011240:	4293      	cmp	r3, r2
 8011242:	d003      	beq.n	801124c <__swsetup_r+0x88>
 8011244:	0021      	movs	r1, r4
 8011246:	0028      	movs	r0, r5
 8011248:	f000 f8e8 	bl	801141c <__smakebuf_r>
 801124c:	220c      	movs	r2, #12
 801124e:	5ea3      	ldrsh	r3, [r4, r2]
 8011250:	2001      	movs	r0, #1
 8011252:	001a      	movs	r2, r3
 8011254:	b299      	uxth	r1, r3
 8011256:	4002      	ands	r2, r0
 8011258:	4203      	tst	r3, r0
 801125a:	d00f      	beq.n	801127c <__swsetup_r+0xb8>
 801125c:	2200      	movs	r2, #0
 801125e:	60a2      	str	r2, [r4, #8]
 8011260:	6962      	ldr	r2, [r4, #20]
 8011262:	4252      	negs	r2, r2
 8011264:	61a2      	str	r2, [r4, #24]
 8011266:	2000      	movs	r0, #0
 8011268:	6922      	ldr	r2, [r4, #16]
 801126a:	4282      	cmp	r2, r0
 801126c:	d1c4      	bne.n	80111f8 <__swsetup_r+0x34>
 801126e:	0609      	lsls	r1, r1, #24
 8011270:	d5c2      	bpl.n	80111f8 <__swsetup_r+0x34>
 8011272:	2240      	movs	r2, #64	; 0x40
 8011274:	4313      	orrs	r3, r2
 8011276:	81a3      	strh	r3, [r4, #12]
 8011278:	3801      	subs	r0, #1
 801127a:	e7bd      	b.n	80111f8 <__swsetup_r+0x34>
 801127c:	0788      	lsls	r0, r1, #30
 801127e:	d400      	bmi.n	8011282 <__swsetup_r+0xbe>
 8011280:	6962      	ldr	r2, [r4, #20]
 8011282:	60a2      	str	r2, [r4, #8]
 8011284:	e7ef      	b.n	8011266 <__swsetup_r+0xa2>
 8011286:	46c0      	nop			; (mov r8, r8)
 8011288:	200006d8 	.word	0x200006d8

0801128c <__fputwc>:
 801128c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801128e:	b085      	sub	sp, #20
 8011290:	000e      	movs	r6, r1
 8011292:	0015      	movs	r5, r2
 8011294:	9001      	str	r0, [sp, #4]
 8011296:	f7f9 fccf 	bl	800ac38 <__locale_mb_cur_max>
 801129a:	0004      	movs	r4, r0
 801129c:	2801      	cmp	r0, #1
 801129e:	d119      	bne.n	80112d4 <__fputwc+0x48>
 80112a0:	1e73      	subs	r3, r6, #1
 80112a2:	2bfe      	cmp	r3, #254	; 0xfe
 80112a4:	d816      	bhi.n	80112d4 <__fputwc+0x48>
 80112a6:	ab02      	add	r3, sp, #8
 80112a8:	711e      	strb	r6, [r3, #4]
 80112aa:	2700      	movs	r7, #0
 80112ac:	42a7      	cmp	r7, r4
 80112ae:	d020      	beq.n	80112f2 <__fputwc+0x66>
 80112b0:	ab03      	add	r3, sp, #12
 80112b2:	5dd9      	ldrb	r1, [r3, r7]
 80112b4:	68ab      	ldr	r3, [r5, #8]
 80112b6:	3b01      	subs	r3, #1
 80112b8:	60ab      	str	r3, [r5, #8]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	da04      	bge.n	80112c8 <__fputwc+0x3c>
 80112be:	69aa      	ldr	r2, [r5, #24]
 80112c0:	4293      	cmp	r3, r2
 80112c2:	db19      	blt.n	80112f8 <__fputwc+0x6c>
 80112c4:	290a      	cmp	r1, #10
 80112c6:	d017      	beq.n	80112f8 <__fputwc+0x6c>
 80112c8:	682b      	ldr	r3, [r5, #0]
 80112ca:	1c5a      	adds	r2, r3, #1
 80112cc:	602a      	str	r2, [r5, #0]
 80112ce:	7019      	strb	r1, [r3, #0]
 80112d0:	3701      	adds	r7, #1
 80112d2:	e7eb      	b.n	80112ac <__fputwc+0x20>
 80112d4:	002b      	movs	r3, r5
 80112d6:	0032      	movs	r2, r6
 80112d8:	9801      	ldr	r0, [sp, #4]
 80112da:	335c      	adds	r3, #92	; 0x5c
 80112dc:	a903      	add	r1, sp, #12
 80112de:	f000 f857 	bl	8011390 <_wcrtomb_r>
 80112e2:	0004      	movs	r4, r0
 80112e4:	1c43      	adds	r3, r0, #1
 80112e6:	d1e0      	bne.n	80112aa <__fputwc+0x1e>
 80112e8:	2340      	movs	r3, #64	; 0x40
 80112ea:	0006      	movs	r6, r0
 80112ec:	89aa      	ldrh	r2, [r5, #12]
 80112ee:	4313      	orrs	r3, r2
 80112f0:	81ab      	strh	r3, [r5, #12]
 80112f2:	0030      	movs	r0, r6
 80112f4:	b005      	add	sp, #20
 80112f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112f8:	002a      	movs	r2, r5
 80112fa:	9801      	ldr	r0, [sp, #4]
 80112fc:	f000 f8cc 	bl	8011498 <__swbuf_r>
 8011300:	1c43      	adds	r3, r0, #1
 8011302:	d1e5      	bne.n	80112d0 <__fputwc+0x44>
 8011304:	0006      	movs	r6, r0
 8011306:	e7f4      	b.n	80112f2 <__fputwc+0x66>

08011308 <_fputwc_r>:
 8011308:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801130a:	b570      	push	{r4, r5, r6, lr}
 801130c:	0005      	movs	r5, r0
 801130e:	000e      	movs	r6, r1
 8011310:	0014      	movs	r4, r2
 8011312:	07db      	lsls	r3, r3, #31
 8011314:	d405      	bmi.n	8011322 <_fputwc_r+0x1a>
 8011316:	8993      	ldrh	r3, [r2, #12]
 8011318:	059b      	lsls	r3, r3, #22
 801131a:	d402      	bmi.n	8011322 <_fputwc_r+0x1a>
 801131c:	6d90      	ldr	r0, [r2, #88]	; 0x58
 801131e:	f7f9 fd1f 	bl	800ad60 <__retarget_lock_acquire_recursive>
 8011322:	230c      	movs	r3, #12
 8011324:	5ee2      	ldrsh	r2, [r4, r3]
 8011326:	2380      	movs	r3, #128	; 0x80
 8011328:	019b      	lsls	r3, r3, #6
 801132a:	421a      	tst	r2, r3
 801132c:	d104      	bne.n	8011338 <_fputwc_r+0x30>
 801132e:	431a      	orrs	r2, r3
 8011330:	81a2      	strh	r2, [r4, #12]
 8011332:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011334:	4313      	orrs	r3, r2
 8011336:	6663      	str	r3, [r4, #100]	; 0x64
 8011338:	0028      	movs	r0, r5
 801133a:	0022      	movs	r2, r4
 801133c:	0031      	movs	r1, r6
 801133e:	f7ff ffa5 	bl	801128c <__fputwc>
 8011342:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011344:	0005      	movs	r5, r0
 8011346:	07db      	lsls	r3, r3, #31
 8011348:	d405      	bmi.n	8011356 <_fputwc_r+0x4e>
 801134a:	89a3      	ldrh	r3, [r4, #12]
 801134c:	059b      	lsls	r3, r3, #22
 801134e:	d402      	bmi.n	8011356 <_fputwc_r+0x4e>
 8011350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011352:	f7f9 fd06 	bl	800ad62 <__retarget_lock_release_recursive>
 8011356:	0028      	movs	r0, r5
 8011358:	bd70      	pop	{r4, r5, r6, pc}

0801135a <memmove>:
 801135a:	b510      	push	{r4, lr}
 801135c:	4288      	cmp	r0, r1
 801135e:	d902      	bls.n	8011366 <memmove+0xc>
 8011360:	188b      	adds	r3, r1, r2
 8011362:	4298      	cmp	r0, r3
 8011364:	d303      	bcc.n	801136e <memmove+0x14>
 8011366:	2300      	movs	r3, #0
 8011368:	e007      	b.n	801137a <memmove+0x20>
 801136a:	5c8b      	ldrb	r3, [r1, r2]
 801136c:	5483      	strb	r3, [r0, r2]
 801136e:	3a01      	subs	r2, #1
 8011370:	d2fb      	bcs.n	801136a <memmove+0x10>
 8011372:	bd10      	pop	{r4, pc}
 8011374:	5ccc      	ldrb	r4, [r1, r3]
 8011376:	54c4      	strb	r4, [r0, r3]
 8011378:	3301      	adds	r3, #1
 801137a:	429a      	cmp	r2, r3
 801137c:	d1fa      	bne.n	8011374 <memmove+0x1a>
 801137e:	e7f8      	b.n	8011372 <memmove+0x18>

08011380 <abort>:
 8011380:	2006      	movs	r0, #6
 8011382:	b510      	push	{r4, lr}
 8011384:	f000 f906 	bl	8011594 <raise>
 8011388:	2001      	movs	r0, #1
 801138a:	f7f2 f859 	bl	8003440 <_exit>
	...

08011390 <_wcrtomb_r>:
 8011390:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011392:	001d      	movs	r5, r3
 8011394:	4b09      	ldr	r3, [pc, #36]	; (80113bc <_wcrtomb_r+0x2c>)
 8011396:	0004      	movs	r4, r0
 8011398:	33e0      	adds	r3, #224	; 0xe0
 801139a:	681e      	ldr	r6, [r3, #0]
 801139c:	002b      	movs	r3, r5
 801139e:	2900      	cmp	r1, #0
 80113a0:	d101      	bne.n	80113a6 <_wcrtomb_r+0x16>
 80113a2:	000a      	movs	r2, r1
 80113a4:	a901      	add	r1, sp, #4
 80113a6:	0020      	movs	r0, r4
 80113a8:	47b0      	blx	r6
 80113aa:	1c43      	adds	r3, r0, #1
 80113ac:	d103      	bne.n	80113b6 <_wcrtomb_r+0x26>
 80113ae:	2300      	movs	r3, #0
 80113b0:	602b      	str	r3, [r5, #0]
 80113b2:	338a      	adds	r3, #138	; 0x8a
 80113b4:	6023      	str	r3, [r4, #0]
 80113b6:	b004      	add	sp, #16
 80113b8:	bd70      	pop	{r4, r5, r6, pc}
 80113ba:	46c0      	nop			; (mov r8, r8)
 80113bc:	20000448 	.word	0x20000448

080113c0 <__swhatbuf_r>:
 80113c0:	b570      	push	{r4, r5, r6, lr}
 80113c2:	000e      	movs	r6, r1
 80113c4:	001d      	movs	r5, r3
 80113c6:	230e      	movs	r3, #14
 80113c8:	5ec9      	ldrsh	r1, [r1, r3]
 80113ca:	0014      	movs	r4, r2
 80113cc:	b096      	sub	sp, #88	; 0x58
 80113ce:	2900      	cmp	r1, #0
 80113d0:	da09      	bge.n	80113e6 <__swhatbuf_r+0x26>
 80113d2:	89b2      	ldrh	r2, [r6, #12]
 80113d4:	2380      	movs	r3, #128	; 0x80
 80113d6:	0011      	movs	r1, r2
 80113d8:	4019      	ands	r1, r3
 80113da:	421a      	tst	r2, r3
 80113dc:	d018      	beq.n	8011410 <__swhatbuf_r+0x50>
 80113de:	2100      	movs	r1, #0
 80113e0:	3b40      	subs	r3, #64	; 0x40
 80113e2:	0008      	movs	r0, r1
 80113e4:	e010      	b.n	8011408 <__swhatbuf_r+0x48>
 80113e6:	466a      	mov	r2, sp
 80113e8:	f000 f8de 	bl	80115a8 <_fstat_r>
 80113ec:	2800      	cmp	r0, #0
 80113ee:	dbf0      	blt.n	80113d2 <__swhatbuf_r+0x12>
 80113f0:	23f0      	movs	r3, #240	; 0xf0
 80113f2:	9901      	ldr	r1, [sp, #4]
 80113f4:	021b      	lsls	r3, r3, #8
 80113f6:	4019      	ands	r1, r3
 80113f8:	4b07      	ldr	r3, [pc, #28]	; (8011418 <__swhatbuf_r+0x58>)
 80113fa:	2080      	movs	r0, #128	; 0x80
 80113fc:	18c9      	adds	r1, r1, r3
 80113fe:	424b      	negs	r3, r1
 8011400:	4159      	adcs	r1, r3
 8011402:	2380      	movs	r3, #128	; 0x80
 8011404:	0100      	lsls	r0, r0, #4
 8011406:	00db      	lsls	r3, r3, #3
 8011408:	6029      	str	r1, [r5, #0]
 801140a:	6023      	str	r3, [r4, #0]
 801140c:	b016      	add	sp, #88	; 0x58
 801140e:	bd70      	pop	{r4, r5, r6, pc}
 8011410:	2380      	movs	r3, #128	; 0x80
 8011412:	00db      	lsls	r3, r3, #3
 8011414:	e7e5      	b.n	80113e2 <__swhatbuf_r+0x22>
 8011416:	46c0      	nop			; (mov r8, r8)
 8011418:	ffffe000 	.word	0xffffe000

0801141c <__smakebuf_r>:
 801141c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801141e:	2602      	movs	r6, #2
 8011420:	898b      	ldrh	r3, [r1, #12]
 8011422:	0005      	movs	r5, r0
 8011424:	000c      	movs	r4, r1
 8011426:	4233      	tst	r3, r6
 8011428:	d006      	beq.n	8011438 <__smakebuf_r+0x1c>
 801142a:	0023      	movs	r3, r4
 801142c:	3343      	adds	r3, #67	; 0x43
 801142e:	6023      	str	r3, [r4, #0]
 8011430:	6123      	str	r3, [r4, #16]
 8011432:	2301      	movs	r3, #1
 8011434:	6163      	str	r3, [r4, #20]
 8011436:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8011438:	466a      	mov	r2, sp
 801143a:	ab01      	add	r3, sp, #4
 801143c:	f7ff ffc0 	bl	80113c0 <__swhatbuf_r>
 8011440:	9900      	ldr	r1, [sp, #0]
 8011442:	0007      	movs	r7, r0
 8011444:	0028      	movs	r0, r5
 8011446:	f7f8 f933 	bl	80096b0 <_malloc_r>
 801144a:	2800      	cmp	r0, #0
 801144c:	d108      	bne.n	8011460 <__smakebuf_r+0x44>
 801144e:	220c      	movs	r2, #12
 8011450:	5ea3      	ldrsh	r3, [r4, r2]
 8011452:	059a      	lsls	r2, r3, #22
 8011454:	d4ef      	bmi.n	8011436 <__smakebuf_r+0x1a>
 8011456:	2203      	movs	r2, #3
 8011458:	4393      	bics	r3, r2
 801145a:	431e      	orrs	r6, r3
 801145c:	81a6      	strh	r6, [r4, #12]
 801145e:	e7e4      	b.n	801142a <__smakebuf_r+0xe>
 8011460:	2380      	movs	r3, #128	; 0x80
 8011462:	89a2      	ldrh	r2, [r4, #12]
 8011464:	6020      	str	r0, [r4, #0]
 8011466:	4313      	orrs	r3, r2
 8011468:	81a3      	strh	r3, [r4, #12]
 801146a:	9b00      	ldr	r3, [sp, #0]
 801146c:	6120      	str	r0, [r4, #16]
 801146e:	6163      	str	r3, [r4, #20]
 8011470:	9b01      	ldr	r3, [sp, #4]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d00c      	beq.n	8011490 <__smakebuf_r+0x74>
 8011476:	0028      	movs	r0, r5
 8011478:	230e      	movs	r3, #14
 801147a:	5ee1      	ldrsh	r1, [r4, r3]
 801147c:	f000 f8a6 	bl	80115cc <_isatty_r>
 8011480:	2800      	cmp	r0, #0
 8011482:	d005      	beq.n	8011490 <__smakebuf_r+0x74>
 8011484:	2303      	movs	r3, #3
 8011486:	89a2      	ldrh	r2, [r4, #12]
 8011488:	439a      	bics	r2, r3
 801148a:	3b02      	subs	r3, #2
 801148c:	4313      	orrs	r3, r2
 801148e:	81a3      	strh	r3, [r4, #12]
 8011490:	89a3      	ldrh	r3, [r4, #12]
 8011492:	433b      	orrs	r3, r7
 8011494:	81a3      	strh	r3, [r4, #12]
 8011496:	e7ce      	b.n	8011436 <__smakebuf_r+0x1a>

08011498 <__swbuf_r>:
 8011498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801149a:	0006      	movs	r6, r0
 801149c:	000d      	movs	r5, r1
 801149e:	0014      	movs	r4, r2
 80114a0:	2800      	cmp	r0, #0
 80114a2:	d004      	beq.n	80114ae <__swbuf_r+0x16>
 80114a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d101      	bne.n	80114ae <__swbuf_r+0x16>
 80114aa:	f7f9 fa83 	bl	800a9b4 <__sinit>
 80114ae:	69a3      	ldr	r3, [r4, #24]
 80114b0:	60a3      	str	r3, [r4, #8]
 80114b2:	89a3      	ldrh	r3, [r4, #12]
 80114b4:	071b      	lsls	r3, r3, #28
 80114b6:	d52e      	bpl.n	8011516 <__swbuf_r+0x7e>
 80114b8:	6923      	ldr	r3, [r4, #16]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d02b      	beq.n	8011516 <__swbuf_r+0x7e>
 80114be:	230c      	movs	r3, #12
 80114c0:	5ee2      	ldrsh	r2, [r4, r3]
 80114c2:	2380      	movs	r3, #128	; 0x80
 80114c4:	019b      	lsls	r3, r3, #6
 80114c6:	b2ef      	uxtb	r7, r5
 80114c8:	b2ed      	uxtb	r5, r5
 80114ca:	421a      	tst	r2, r3
 80114cc:	d02c      	beq.n	8011528 <__swbuf_r+0x90>
 80114ce:	6923      	ldr	r3, [r4, #16]
 80114d0:	6820      	ldr	r0, [r4, #0]
 80114d2:	1ac0      	subs	r0, r0, r3
 80114d4:	6963      	ldr	r3, [r4, #20]
 80114d6:	4283      	cmp	r3, r0
 80114d8:	dc05      	bgt.n	80114e6 <__swbuf_r+0x4e>
 80114da:	0021      	movs	r1, r4
 80114dc:	0030      	movs	r0, r6
 80114de:	f7fd fab3 	bl	800ea48 <_fflush_r>
 80114e2:	2800      	cmp	r0, #0
 80114e4:	d11d      	bne.n	8011522 <__swbuf_r+0x8a>
 80114e6:	68a3      	ldr	r3, [r4, #8]
 80114e8:	3001      	adds	r0, #1
 80114ea:	3b01      	subs	r3, #1
 80114ec:	60a3      	str	r3, [r4, #8]
 80114ee:	6823      	ldr	r3, [r4, #0]
 80114f0:	1c5a      	adds	r2, r3, #1
 80114f2:	6022      	str	r2, [r4, #0]
 80114f4:	701f      	strb	r7, [r3, #0]
 80114f6:	6963      	ldr	r3, [r4, #20]
 80114f8:	4283      	cmp	r3, r0
 80114fa:	d004      	beq.n	8011506 <__swbuf_r+0x6e>
 80114fc:	89a3      	ldrh	r3, [r4, #12]
 80114fe:	07db      	lsls	r3, r3, #31
 8011500:	d507      	bpl.n	8011512 <__swbuf_r+0x7a>
 8011502:	2d0a      	cmp	r5, #10
 8011504:	d105      	bne.n	8011512 <__swbuf_r+0x7a>
 8011506:	0021      	movs	r1, r4
 8011508:	0030      	movs	r0, r6
 801150a:	f7fd fa9d 	bl	800ea48 <_fflush_r>
 801150e:	2800      	cmp	r0, #0
 8011510:	d107      	bne.n	8011522 <__swbuf_r+0x8a>
 8011512:	0028      	movs	r0, r5
 8011514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011516:	0021      	movs	r1, r4
 8011518:	0030      	movs	r0, r6
 801151a:	f7ff fe53 	bl	80111c4 <__swsetup_r>
 801151e:	2800      	cmp	r0, #0
 8011520:	d0cd      	beq.n	80114be <__swbuf_r+0x26>
 8011522:	2501      	movs	r5, #1
 8011524:	426d      	negs	r5, r5
 8011526:	e7f4      	b.n	8011512 <__swbuf_r+0x7a>
 8011528:	4313      	orrs	r3, r2
 801152a:	81a3      	strh	r3, [r4, #12]
 801152c:	4a02      	ldr	r2, [pc, #8]	; (8011538 <__swbuf_r+0xa0>)
 801152e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011530:	4013      	ands	r3, r2
 8011532:	6663      	str	r3, [r4, #100]	; 0x64
 8011534:	e7cb      	b.n	80114ce <__swbuf_r+0x36>
 8011536:	46c0      	nop			; (mov r8, r8)
 8011538:	ffffdfff 	.word	0xffffdfff

0801153c <_raise_r>:
 801153c:	b570      	push	{r4, r5, r6, lr}
 801153e:	0004      	movs	r4, r0
 8011540:	000d      	movs	r5, r1
 8011542:	291f      	cmp	r1, #31
 8011544:	d904      	bls.n	8011550 <_raise_r+0x14>
 8011546:	2316      	movs	r3, #22
 8011548:	6003      	str	r3, [r0, #0]
 801154a:	2001      	movs	r0, #1
 801154c:	4240      	negs	r0, r0
 801154e:	bd70      	pop	{r4, r5, r6, pc}
 8011550:	0003      	movs	r3, r0
 8011552:	33fc      	adds	r3, #252	; 0xfc
 8011554:	69db      	ldr	r3, [r3, #28]
 8011556:	2b00      	cmp	r3, #0
 8011558:	d004      	beq.n	8011564 <_raise_r+0x28>
 801155a:	008a      	lsls	r2, r1, #2
 801155c:	189b      	adds	r3, r3, r2
 801155e:	681a      	ldr	r2, [r3, #0]
 8011560:	2a00      	cmp	r2, #0
 8011562:	d108      	bne.n	8011576 <_raise_r+0x3a>
 8011564:	0020      	movs	r0, r4
 8011566:	f000 f855 	bl	8011614 <_getpid_r>
 801156a:	002a      	movs	r2, r5
 801156c:	0001      	movs	r1, r0
 801156e:	0020      	movs	r0, r4
 8011570:	f000 f83e 	bl	80115f0 <_kill_r>
 8011574:	e7eb      	b.n	801154e <_raise_r+0x12>
 8011576:	2000      	movs	r0, #0
 8011578:	2a01      	cmp	r2, #1
 801157a:	d0e8      	beq.n	801154e <_raise_r+0x12>
 801157c:	1c51      	adds	r1, r2, #1
 801157e:	d103      	bne.n	8011588 <_raise_r+0x4c>
 8011580:	2316      	movs	r3, #22
 8011582:	3001      	adds	r0, #1
 8011584:	6023      	str	r3, [r4, #0]
 8011586:	e7e2      	b.n	801154e <_raise_r+0x12>
 8011588:	2400      	movs	r4, #0
 801158a:	0028      	movs	r0, r5
 801158c:	601c      	str	r4, [r3, #0]
 801158e:	4790      	blx	r2
 8011590:	0020      	movs	r0, r4
 8011592:	e7dc      	b.n	801154e <_raise_r+0x12>

08011594 <raise>:
 8011594:	b510      	push	{r4, lr}
 8011596:	4b03      	ldr	r3, [pc, #12]	; (80115a4 <raise+0x10>)
 8011598:	0001      	movs	r1, r0
 801159a:	6818      	ldr	r0, [r3, #0]
 801159c:	f7ff ffce 	bl	801153c <_raise_r>
 80115a0:	bd10      	pop	{r4, pc}
 80115a2:	46c0      	nop			; (mov r8, r8)
 80115a4:	200006d8 	.word	0x200006d8

080115a8 <_fstat_r>:
 80115a8:	2300      	movs	r3, #0
 80115aa:	b570      	push	{r4, r5, r6, lr}
 80115ac:	4d06      	ldr	r5, [pc, #24]	; (80115c8 <_fstat_r+0x20>)
 80115ae:	0004      	movs	r4, r0
 80115b0:	0008      	movs	r0, r1
 80115b2:	0011      	movs	r1, r2
 80115b4:	602b      	str	r3, [r5, #0]
 80115b6:	f7f1 ff92 	bl	80034de <_fstat>
 80115ba:	1c43      	adds	r3, r0, #1
 80115bc:	d103      	bne.n	80115c6 <_fstat_r+0x1e>
 80115be:	682b      	ldr	r3, [r5, #0]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d000      	beq.n	80115c6 <_fstat_r+0x1e>
 80115c4:	6023      	str	r3, [r4, #0]
 80115c6:	bd70      	pop	{r4, r5, r6, pc}
 80115c8:	20000c88 	.word	0x20000c88

080115cc <_isatty_r>:
 80115cc:	2300      	movs	r3, #0
 80115ce:	b570      	push	{r4, r5, r6, lr}
 80115d0:	4d06      	ldr	r5, [pc, #24]	; (80115ec <_isatty_r+0x20>)
 80115d2:	0004      	movs	r4, r0
 80115d4:	0008      	movs	r0, r1
 80115d6:	602b      	str	r3, [r5, #0]
 80115d8:	f7f1 ff8f 	bl	80034fa <_isatty>
 80115dc:	1c43      	adds	r3, r0, #1
 80115de:	d103      	bne.n	80115e8 <_isatty_r+0x1c>
 80115e0:	682b      	ldr	r3, [r5, #0]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d000      	beq.n	80115e8 <_isatty_r+0x1c>
 80115e6:	6023      	str	r3, [r4, #0]
 80115e8:	bd70      	pop	{r4, r5, r6, pc}
 80115ea:	46c0      	nop			; (mov r8, r8)
 80115ec:	20000c88 	.word	0x20000c88

080115f0 <_kill_r>:
 80115f0:	2300      	movs	r3, #0
 80115f2:	b570      	push	{r4, r5, r6, lr}
 80115f4:	4d06      	ldr	r5, [pc, #24]	; (8011610 <_kill_r+0x20>)
 80115f6:	0004      	movs	r4, r0
 80115f8:	0008      	movs	r0, r1
 80115fa:	0011      	movs	r1, r2
 80115fc:	602b      	str	r3, [r5, #0]
 80115fe:	f7f1 ff0f 	bl	8003420 <_kill>
 8011602:	1c43      	adds	r3, r0, #1
 8011604:	d103      	bne.n	801160e <_kill_r+0x1e>
 8011606:	682b      	ldr	r3, [r5, #0]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d000      	beq.n	801160e <_kill_r+0x1e>
 801160c:	6023      	str	r3, [r4, #0]
 801160e:	bd70      	pop	{r4, r5, r6, pc}
 8011610:	20000c88 	.word	0x20000c88

08011614 <_getpid_r>:
 8011614:	b510      	push	{r4, lr}
 8011616:	f7f1 fefd 	bl	8003414 <_getpid>
 801161a:	bd10      	pop	{r4, pc}

0801161c <round>:
 801161c:	b570      	push	{r4, r5, r6, lr}
 801161e:	004a      	lsls	r2, r1, #1
 8011620:	000d      	movs	r5, r1
 8011622:	4920      	ldr	r1, [pc, #128]	; (80116a4 <round+0x88>)
 8011624:	0d52      	lsrs	r2, r2, #21
 8011626:	1851      	adds	r1, r2, r1
 8011628:	0006      	movs	r6, r0
 801162a:	2913      	cmp	r1, #19
 801162c:	dc18      	bgt.n	8011660 <round+0x44>
 801162e:	2900      	cmp	r1, #0
 8011630:	da09      	bge.n	8011646 <round+0x2a>
 8011632:	0feb      	lsrs	r3, r5, #31
 8011634:	2200      	movs	r2, #0
 8011636:	07db      	lsls	r3, r3, #31
 8011638:	3101      	adds	r1, #1
 801163a:	d101      	bne.n	8011640 <round+0x24>
 801163c:	491a      	ldr	r1, [pc, #104]	; (80116a8 <round+0x8c>)
 801163e:	430b      	orrs	r3, r1
 8011640:	0019      	movs	r1, r3
 8011642:	0010      	movs	r0, r2
 8011644:	e017      	b.n	8011676 <round+0x5a>
 8011646:	4c19      	ldr	r4, [pc, #100]	; (80116ac <round+0x90>)
 8011648:	410c      	asrs	r4, r1
 801164a:	0022      	movs	r2, r4
 801164c:	402a      	ands	r2, r5
 801164e:	4302      	orrs	r2, r0
 8011650:	d013      	beq.n	801167a <round+0x5e>
 8011652:	2280      	movs	r2, #128	; 0x80
 8011654:	0312      	lsls	r2, r2, #12
 8011656:	410a      	asrs	r2, r1
 8011658:	1953      	adds	r3, r2, r5
 801165a:	43a3      	bics	r3, r4
 801165c:	2200      	movs	r2, #0
 801165e:	e7ef      	b.n	8011640 <round+0x24>
 8011660:	2933      	cmp	r1, #51	; 0x33
 8011662:	dd0d      	ble.n	8011680 <round+0x64>
 8011664:	2380      	movs	r3, #128	; 0x80
 8011666:	00db      	lsls	r3, r3, #3
 8011668:	4299      	cmp	r1, r3
 801166a:	d106      	bne.n	801167a <round+0x5e>
 801166c:	0002      	movs	r2, r0
 801166e:	002b      	movs	r3, r5
 8011670:	0029      	movs	r1, r5
 8011672:	f7ef f8a1 	bl	80007b8 <__aeabi_dadd>
 8011676:	0006      	movs	r6, r0
 8011678:	000d      	movs	r5, r1
 801167a:	0030      	movs	r0, r6
 801167c:	0029      	movs	r1, r5
 801167e:	bd70      	pop	{r4, r5, r6, pc}
 8011680:	4c0b      	ldr	r4, [pc, #44]	; (80116b0 <round+0x94>)
 8011682:	1912      	adds	r2, r2, r4
 8011684:	2401      	movs	r4, #1
 8011686:	4264      	negs	r4, r4
 8011688:	40d4      	lsrs	r4, r2
 801168a:	4220      	tst	r0, r4
 801168c:	d0f5      	beq.n	801167a <round+0x5e>
 801168e:	2233      	movs	r2, #51	; 0x33
 8011690:	1a51      	subs	r1, r2, r1
 8011692:	3a32      	subs	r2, #50	; 0x32
 8011694:	408a      	lsls	r2, r1
 8011696:	1812      	adds	r2, r2, r0
 8011698:	4282      	cmp	r2, r0
 801169a:	4180      	sbcs	r0, r0
 801169c:	4240      	negs	r0, r0
 801169e:	182b      	adds	r3, r5, r0
 80116a0:	43a2      	bics	r2, r4
 80116a2:	e7cd      	b.n	8011640 <round+0x24>
 80116a4:	fffffc01 	.word	0xfffffc01
 80116a8:	3ff00000 	.word	0x3ff00000
 80116ac:	000fffff 	.word	0x000fffff
 80116b0:	fffffbed 	.word	0xfffffbed

080116b4 <_init>:
 80116b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116b6:	46c0      	nop			; (mov r8, r8)
 80116b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116ba:	bc08      	pop	{r3}
 80116bc:	469e      	mov	lr, r3
 80116be:	4770      	bx	lr

080116c0 <_fini>:
 80116c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116c2:	46c0      	nop			; (mov r8, r8)
 80116c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116c6:	bc08      	pop	{r3}
 80116c8:	469e      	mov	lr, r3
 80116ca:	4770      	bx	lr
