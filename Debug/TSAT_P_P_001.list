
TSAT_P_P_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dfc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001708  08003eb8  08003eb8  00013eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055c0  080055c0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080055c0  080055c0  000155c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055c8  080055c8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055c8  080055c8  000155c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055cc  080055cc  000155cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080055d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  20000010  080055e0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  080055e0  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f30d  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023db  00000000  00000000  0002f388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce0  00000000  00000000  00031768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a38  00000000  00000000  00032448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018ee9  00000000  00000000  00032e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000117a4  00000000  00000000  0004bd69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b218  00000000  00000000  0005d50d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e68  00000000  00000000  000f8728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000fb590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003ea0 	.word	0x08003ea0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08003ea0 	.word	0x08003ea0

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_uldivmod>:
 8000400:	2b00      	cmp	r3, #0
 8000402:	d111      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d10f      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000408:	2900      	cmp	r1, #0
 800040a:	d100      	bne.n	800040e <__aeabi_uldivmod+0xe>
 800040c:	2800      	cmp	r0, #0
 800040e:	d002      	beq.n	8000416 <__aeabi_uldivmod+0x16>
 8000410:	2100      	movs	r1, #0
 8000412:	43c9      	mvns	r1, r1
 8000414:	0008      	movs	r0, r1
 8000416:	b407      	push	{r0, r1, r2}
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <__aeabi_uldivmod+0x24>)
 800041a:	a102      	add	r1, pc, #8	; (adr r1, 8000424 <__aeabi_uldivmod+0x24>)
 800041c:	1840      	adds	r0, r0, r1
 800041e:	9002      	str	r0, [sp, #8]
 8000420:	bd03      	pop	{r0, r1, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	ffffffd9 	.word	0xffffffd9
 8000428:	b403      	push	{r0, r1}
 800042a:	4668      	mov	r0, sp
 800042c:	b501      	push	{r0, lr}
 800042e:	9802      	ldr	r0, [sp, #8]
 8000430:	f000 f806 	bl	8000440 <__udivmoddi4>
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	469e      	mov	lr, r3
 8000438:	b002      	add	sp, #8
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__udivmoddi4>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	4657      	mov	r7, sl
 8000444:	464e      	mov	r6, r9
 8000446:	4645      	mov	r5, r8
 8000448:	46de      	mov	lr, fp
 800044a:	b5e0      	push	{r5, r6, r7, lr}
 800044c:	0004      	movs	r4, r0
 800044e:	000d      	movs	r5, r1
 8000450:	4692      	mov	sl, r2
 8000452:	4699      	mov	r9, r3
 8000454:	b083      	sub	sp, #12
 8000456:	428b      	cmp	r3, r1
 8000458:	d830      	bhi.n	80004bc <__udivmoddi4+0x7c>
 800045a:	d02d      	beq.n	80004b8 <__udivmoddi4+0x78>
 800045c:	4649      	mov	r1, r9
 800045e:	4650      	mov	r0, sl
 8000460:	f000 f8ba 	bl	80005d8 <__clzdi2>
 8000464:	0029      	movs	r1, r5
 8000466:	0006      	movs	r6, r0
 8000468:	0020      	movs	r0, r4
 800046a:	f000 f8b5 	bl	80005d8 <__clzdi2>
 800046e:	1a33      	subs	r3, r6, r0
 8000470:	4698      	mov	r8, r3
 8000472:	3b20      	subs	r3, #32
 8000474:	d434      	bmi.n	80004e0 <__udivmoddi4+0xa0>
 8000476:	469b      	mov	fp, r3
 8000478:	4653      	mov	r3, sl
 800047a:	465a      	mov	r2, fp
 800047c:	4093      	lsls	r3, r2
 800047e:	4642      	mov	r2, r8
 8000480:	001f      	movs	r7, r3
 8000482:	4653      	mov	r3, sl
 8000484:	4093      	lsls	r3, r2
 8000486:	001e      	movs	r6, r3
 8000488:	42af      	cmp	r7, r5
 800048a:	d83b      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800048c:	42af      	cmp	r7, r5
 800048e:	d100      	bne.n	8000492 <__udivmoddi4+0x52>
 8000490:	e079      	b.n	8000586 <__udivmoddi4+0x146>
 8000492:	465b      	mov	r3, fp
 8000494:	1ba4      	subs	r4, r4, r6
 8000496:	41bd      	sbcs	r5, r7
 8000498:	2b00      	cmp	r3, #0
 800049a:	da00      	bge.n	800049e <__udivmoddi4+0x5e>
 800049c:	e076      	b.n	800058c <__udivmoddi4+0x14c>
 800049e:	2200      	movs	r2, #0
 80004a0:	2300      	movs	r3, #0
 80004a2:	9200      	str	r2, [sp, #0]
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2301      	movs	r3, #1
 80004a8:	465a      	mov	r2, fp
 80004aa:	4093      	lsls	r3, r2
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	4642      	mov	r2, r8
 80004b2:	4093      	lsls	r3, r2
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	e029      	b.n	800050c <__udivmoddi4+0xcc>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	d9cf      	bls.n	800045c <__udivmoddi4+0x1c>
 80004bc:	2200      	movs	r2, #0
 80004be:	2300      	movs	r3, #0
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <__udivmoddi4+0x8e>
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	9800      	ldr	r0, [sp, #0]
 80004d0:	9901      	ldr	r1, [sp, #4]
 80004d2:	b003      	add	sp, #12
 80004d4:	bcf0      	pop	{r4, r5, r6, r7}
 80004d6:	46bb      	mov	fp, r7
 80004d8:	46b2      	mov	sl, r6
 80004da:	46a9      	mov	r9, r5
 80004dc:	46a0      	mov	r8, r4
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	4642      	mov	r2, r8
 80004e2:	469b      	mov	fp, r3
 80004e4:	2320      	movs	r3, #32
 80004e6:	1a9b      	subs	r3, r3, r2
 80004e8:	4652      	mov	r2, sl
 80004ea:	40da      	lsrs	r2, r3
 80004ec:	4641      	mov	r1, r8
 80004ee:	0013      	movs	r3, r2
 80004f0:	464a      	mov	r2, r9
 80004f2:	408a      	lsls	r2, r1
 80004f4:	0017      	movs	r7, r2
 80004f6:	4642      	mov	r2, r8
 80004f8:	431f      	orrs	r7, r3
 80004fa:	4653      	mov	r3, sl
 80004fc:	4093      	lsls	r3, r2
 80004fe:	001e      	movs	r6, r3
 8000500:	42af      	cmp	r7, r5
 8000502:	d9c3      	bls.n	800048c <__udivmoddi4+0x4c>
 8000504:	2200      	movs	r2, #0
 8000506:	2300      	movs	r3, #0
 8000508:	9200      	str	r2, [sp, #0]
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	4643      	mov	r3, r8
 800050e:	2b00      	cmp	r3, #0
 8000510:	d0d8      	beq.n	80004c4 <__udivmoddi4+0x84>
 8000512:	07fb      	lsls	r3, r7, #31
 8000514:	0872      	lsrs	r2, r6, #1
 8000516:	431a      	orrs	r2, r3
 8000518:	4646      	mov	r6, r8
 800051a:	087b      	lsrs	r3, r7, #1
 800051c:	e00e      	b.n	800053c <__udivmoddi4+0xfc>
 800051e:	42ab      	cmp	r3, r5
 8000520:	d101      	bne.n	8000526 <__udivmoddi4+0xe6>
 8000522:	42a2      	cmp	r2, r4
 8000524:	d80c      	bhi.n	8000540 <__udivmoddi4+0x100>
 8000526:	1aa4      	subs	r4, r4, r2
 8000528:	419d      	sbcs	r5, r3
 800052a:	2001      	movs	r0, #1
 800052c:	1924      	adds	r4, r4, r4
 800052e:	416d      	adcs	r5, r5
 8000530:	2100      	movs	r1, #0
 8000532:	3e01      	subs	r6, #1
 8000534:	1824      	adds	r4, r4, r0
 8000536:	414d      	adcs	r5, r1
 8000538:	2e00      	cmp	r6, #0
 800053a:	d006      	beq.n	800054a <__udivmoddi4+0x10a>
 800053c:	42ab      	cmp	r3, r5
 800053e:	d9ee      	bls.n	800051e <__udivmoddi4+0xde>
 8000540:	3e01      	subs	r6, #1
 8000542:	1924      	adds	r4, r4, r4
 8000544:	416d      	adcs	r5, r5
 8000546:	2e00      	cmp	r6, #0
 8000548:	d1f8      	bne.n	800053c <__udivmoddi4+0xfc>
 800054a:	9800      	ldr	r0, [sp, #0]
 800054c:	9901      	ldr	r1, [sp, #4]
 800054e:	465b      	mov	r3, fp
 8000550:	1900      	adds	r0, r0, r4
 8000552:	4169      	adcs	r1, r5
 8000554:	2b00      	cmp	r3, #0
 8000556:	db24      	blt.n	80005a2 <__udivmoddi4+0x162>
 8000558:	002b      	movs	r3, r5
 800055a:	465a      	mov	r2, fp
 800055c:	4644      	mov	r4, r8
 800055e:	40d3      	lsrs	r3, r2
 8000560:	002a      	movs	r2, r5
 8000562:	40e2      	lsrs	r2, r4
 8000564:	001c      	movs	r4, r3
 8000566:	465b      	mov	r3, fp
 8000568:	0015      	movs	r5, r2
 800056a:	2b00      	cmp	r3, #0
 800056c:	db2a      	blt.n	80005c4 <__udivmoddi4+0x184>
 800056e:	0026      	movs	r6, r4
 8000570:	409e      	lsls	r6, r3
 8000572:	0033      	movs	r3, r6
 8000574:	0026      	movs	r6, r4
 8000576:	4647      	mov	r7, r8
 8000578:	40be      	lsls	r6, r7
 800057a:	0032      	movs	r2, r6
 800057c:	1a80      	subs	r0, r0, r2
 800057e:	4199      	sbcs	r1, r3
 8000580:	9000      	str	r0, [sp, #0]
 8000582:	9101      	str	r1, [sp, #4]
 8000584:	e79e      	b.n	80004c4 <__udivmoddi4+0x84>
 8000586:	42a3      	cmp	r3, r4
 8000588:	d8bc      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800058a:	e782      	b.n	8000492 <__udivmoddi4+0x52>
 800058c:	4642      	mov	r2, r8
 800058e:	2320      	movs	r3, #32
 8000590:	2100      	movs	r1, #0
 8000592:	1a9b      	subs	r3, r3, r2
 8000594:	2200      	movs	r2, #0
 8000596:	9100      	str	r1, [sp, #0]
 8000598:	9201      	str	r2, [sp, #4]
 800059a:	2201      	movs	r2, #1
 800059c:	40da      	lsrs	r2, r3
 800059e:	9201      	str	r2, [sp, #4]
 80005a0:	e785      	b.n	80004ae <__udivmoddi4+0x6e>
 80005a2:	4642      	mov	r2, r8
 80005a4:	2320      	movs	r3, #32
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	4646      	mov	r6, r8
 80005ac:	409a      	lsls	r2, r3
 80005ae:	0023      	movs	r3, r4
 80005b0:	40f3      	lsrs	r3, r6
 80005b2:	4644      	mov	r4, r8
 80005b4:	4313      	orrs	r3, r2
 80005b6:	002a      	movs	r2, r5
 80005b8:	40e2      	lsrs	r2, r4
 80005ba:	001c      	movs	r4, r3
 80005bc:	465b      	mov	r3, fp
 80005be:	0015      	movs	r5, r2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	dad4      	bge.n	800056e <__udivmoddi4+0x12e>
 80005c4:	4642      	mov	r2, r8
 80005c6:	002f      	movs	r7, r5
 80005c8:	2320      	movs	r3, #32
 80005ca:	0026      	movs	r6, r4
 80005cc:	4097      	lsls	r7, r2
 80005ce:	1a9b      	subs	r3, r3, r2
 80005d0:	40de      	lsrs	r6, r3
 80005d2:	003b      	movs	r3, r7
 80005d4:	4333      	orrs	r3, r6
 80005d6:	e7cd      	b.n	8000574 <__udivmoddi4+0x134>

080005d8 <__clzdi2>:
 80005d8:	b510      	push	{r4, lr}
 80005da:	2900      	cmp	r1, #0
 80005dc:	d103      	bne.n	80005e6 <__clzdi2+0xe>
 80005de:	f000 f807 	bl	80005f0 <__clzsi2>
 80005e2:	3020      	adds	r0, #32
 80005e4:	e002      	b.n	80005ec <__clzdi2+0x14>
 80005e6:	0008      	movs	r0, r1
 80005e8:	f000 f802 	bl	80005f0 <__clzsi2>
 80005ec:	bd10      	pop	{r4, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)

080005f0 <__clzsi2>:
 80005f0:	211c      	movs	r1, #28
 80005f2:	2301      	movs	r3, #1
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d301      	bcc.n	80005fe <__clzsi2+0xe>
 80005fa:	0c00      	lsrs	r0, r0, #16
 80005fc:	3910      	subs	r1, #16
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	4298      	cmp	r0, r3
 8000602:	d301      	bcc.n	8000608 <__clzsi2+0x18>
 8000604:	0a00      	lsrs	r0, r0, #8
 8000606:	3908      	subs	r1, #8
 8000608:	091b      	lsrs	r3, r3, #4
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0x22>
 800060e:	0900      	lsrs	r0, r0, #4
 8000610:	3904      	subs	r1, #4
 8000612:	a202      	add	r2, pc, #8	; (adr r2, 800061c <__clzsi2+0x2c>)
 8000614:	5c10      	ldrb	r0, [r2, r0]
 8000616:	1840      	adds	r0, r0, r1
 8000618:	4770      	bx	lr
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	02020304 	.word	0x02020304
 8000620:	01010101 	.word	0x01010101
	...

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b590      	push	{r4, r7, lr}
 800062e:	b085      	sub	sp, #20
 8000630:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000632:	f001 f9bd 	bl	80019b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000636:	f000 f855 	bl	80006e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063a:	f000 f9ab 	bl	8000994 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800063e:	f000 f927 	bl	8000890 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000642:	f000 f8d7 	bl	80007f4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000646:	f000 f971 	bl	800092c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800064a:	f000 f893 	bl	8000774 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit ( &huart2 , (uint8_t*) hello , strlen (hello) , DBG_TX_TIMEOUT ) ;
 800064e:	4b21      	ldr	r3, [pc, #132]	; (80006d4 <main+0xa8>)
 8000650:	681c      	ldr	r4, [r3, #0]
 8000652:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <main+0xa8>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	0018      	movs	r0, r3
 8000658:	f7ff fd54 	bl	8000104 <strlen>
 800065c:	0003      	movs	r3, r0
 800065e:	b29a      	uxth	r2, r3
 8000660:	23fa      	movs	r3, #250	; 0xfa
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	481c      	ldr	r0, [pc, #112]	; (80006d8 <main+0xac>)
 8000666:	0021      	movs	r1, r4
 8000668:	f002 fcce 	bl	8003008 <HAL_UART_Transmit>
  HAL_Delay ( 5000 ) ;
 800066c:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <main+0xb0>)
 800066e:	0018      	movs	r0, r3
 8000670:	f001 fa24 	bl	8001abc <HAL_Delay>
  my_astro_on () ;
 8000674:	f000 fab6 	bl	8000be4 <my_astro_on>
  HAL_Delay ( 1000 ) ;
 8000678:	23fa      	movs	r3, #250	; 0xfa
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	0018      	movs	r0, r3
 800067e:	f001 fa1d 	bl	8001abc <HAL_Delay>
  reset_astronode () ;
 8000682:	f000 fa45 	bl	8000b10 <reset_astronode>
  print_housekeeping_timer = get_systick () ;
 8000686:	f000 fa8f 	bl	8000ba8 <get_systick>
 800068a:	0002      	movs	r2, r0
 800068c:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <main+0xb4>)
 800068e:	601a      	str	r2, [r3, #0]
  astronode_send_cfg_wr ( true , false , true , false , true , true , true , false ) ;
 8000690:	2300      	movs	r3, #0
 8000692:	9303      	str	r3, [sp, #12]
 8000694:	2301      	movs	r3, #1
 8000696:	9302      	str	r3, [sp, #8]
 8000698:	2301      	movs	r3, #1
 800069a:	9301      	str	r3, [sp, #4]
 800069c:	2301      	movs	r3, #1
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	2300      	movs	r3, #0
 80006a2:	2201      	movs	r2, #1
 80006a4:	2100      	movs	r1, #0
 80006a6:	2001      	movs	r0, #1
 80006a8:	f000 fc60 	bl	8000f6c <astronode_send_cfg_wr>
  astronode_send_cfg_wr ( true , false , true , false , true , true , true , false ) ;
 80006ac:	2300      	movs	r3, #0
 80006ae:	9303      	str	r3, [sp, #12]
 80006b0:	2301      	movs	r3, #1
 80006b2:	9302      	str	r3, [sp, #8]
 80006b4:	2301      	movs	r3, #1
 80006b6:	9301      	str	r3, [sp, #4]
 80006b8:	2301      	movs	r3, #1
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	2300      	movs	r3, #0
 80006be:	2201      	movs	r2, #1
 80006c0:	2100      	movs	r1, #0
 80006c2:	2001      	movs	r0, #1
 80006c4:	f000 fc52 	bl	8000f6c <astronode_send_cfg_wr>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay ( 2000 ) ;
 80006c8:	23fa      	movs	r3, #250	; 0xfa
 80006ca:	00db      	lsls	r3, r3, #3
 80006cc:	0018      	movs	r0, r3
 80006ce:	f001 f9f5 	bl	8001abc <HAL_Delay>
 80006d2:	e7f9      	b.n	80006c8 <main+0x9c>
 80006d4:	20000000 	.word	0x20000000
 80006d8:	20000114 	.word	0x20000114
 80006dc:	00001388 	.word	0x00001388
 80006e0:	2000023c 	.word	0x2000023c

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b093      	sub	sp, #76	; 0x4c
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	2410      	movs	r4, #16
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	0018      	movs	r0, r3
 80006f0:	2338      	movs	r3, #56	; 0x38
 80006f2:	001a      	movs	r2, r3
 80006f4:	2100      	movs	r1, #0
 80006f6:	f003 fba7 	bl	8003e48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fa:	003b      	movs	r3, r7
 80006fc:	0018      	movs	r0, r3
 80006fe:	2310      	movs	r3, #16
 8000700:	001a      	movs	r2, r3
 8000702:	2100      	movs	r1, #0
 8000704:	f003 fba0 	bl	8003e48 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000708:	2380      	movs	r3, #128	; 0x80
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	0018      	movs	r0, r3
 800070e:	f001 fd5d 	bl	80021cc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000712:	193b      	adds	r3, r7, r4
 8000714:	2202      	movs	r2, #2
 8000716:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000718:	193b      	adds	r3, r7, r4
 800071a:	2280      	movs	r2, #128	; 0x80
 800071c:	0052      	lsls	r2, r2, #1
 800071e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000720:	193b      	adds	r3, r7, r4
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000726:	193b      	adds	r3, r7, r4
 8000728:	2240      	movs	r2, #64	; 0x40
 800072a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800072c:	193b      	adds	r3, r7, r4
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000732:	193b      	adds	r3, r7, r4
 8000734:	0018      	movs	r0, r3
 8000736:	f001 fd95 	bl	8002264 <HAL_RCC_OscConfig>
 800073a:	1e03      	subs	r3, r0, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800073e:	f000 fa5f 	bl	8000c00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000742:	003b      	movs	r3, r7
 8000744:	2207      	movs	r2, #7
 8000746:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000748:	003b      	movs	r3, r7
 800074a:	2200      	movs	r2, #0
 800074c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074e:	003b      	movs	r3, r7
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000754:	003b      	movs	r3, r7
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800075a:	003b      	movs	r3, r7
 800075c:	2100      	movs	r1, #0
 800075e:	0018      	movs	r0, r3
 8000760:	f002 f89a 	bl	8002898 <HAL_RCC_ClockConfig>
 8000764:	1e03      	subs	r3, r0, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000768:	f000 fa4a 	bl	8000c00 <Error_Handler>
  }
}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	b013      	add	sp, #76	; 0x4c
 8000772:	bd90      	pop	{r4, r7, pc}

08000774 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000778:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <MX_I2C1_Init+0x74>)
 800077a:	4a1c      	ldr	r2, [pc, #112]	; (80007ec <MX_I2C1_Init+0x78>)
 800077c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800077e:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <MX_I2C1_Init+0x74>)
 8000780:	4a1b      	ldr	r2, [pc, #108]	; (80007f0 <MX_I2C1_Init+0x7c>)
 8000782:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000784:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <MX_I2C1_Init+0x74>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800078a:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <MX_I2C1_Init+0x74>)
 800078c:	2201      	movs	r2, #1
 800078e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000790:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <MX_I2C1_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000796:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <MX_I2C1_Init+0x74>)
 8000798:	2200      	movs	r2, #0
 800079a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <MX_I2C1_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a2:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_I2C1_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_I2C1_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_I2C1_Init+0x74>)
 80007b0:	0018      	movs	r0, r3
 80007b2:	f001 fbdd 	bl	8001f70 <HAL_I2C_Init>
 80007b6:	1e03      	subs	r3, r0, #0
 80007b8:	d001      	beq.n	80007be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007ba:	f000 fa21 	bl	8000c00 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007be:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <MX_I2C1_Init+0x74>)
 80007c0:	2100      	movs	r1, #0
 80007c2:	0018      	movs	r0, r3
 80007c4:	f001 fc6a 	bl	800209c <HAL_I2CEx_ConfigAnalogFilter>
 80007c8:	1e03      	subs	r3, r0, #0
 80007ca:	d001      	beq.n	80007d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007cc:	f000 fa18 	bl	8000c00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <MX_I2C1_Init+0x74>)
 80007d2:	2100      	movs	r1, #0
 80007d4:	0018      	movs	r0, r3
 80007d6:	f001 fcad 	bl	8002134 <HAL_I2CEx_ConfigDigitalFilter>
 80007da:	1e03      	subs	r3, r0, #0
 80007dc:	d001      	beq.n	80007e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007de:	f000 fa0f 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	2000002c 	.word	0x2000002c
 80007ec:	40005400 	.word	0x40005400
 80007f0:	00303d5b 	.word	0x00303d5b

080007f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007f8:	4b23      	ldr	r3, [pc, #140]	; (8000888 <MX_USART1_UART_Init+0x94>)
 80007fa:	4a24      	ldr	r2, [pc, #144]	; (800088c <MX_USART1_UART_Init+0x98>)
 80007fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007fe:	4b22      	ldr	r3, [pc, #136]	; (8000888 <MX_USART1_UART_Init+0x94>)
 8000800:	2296      	movs	r2, #150	; 0x96
 8000802:	0192      	lsls	r2, r2, #6
 8000804:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000806:	4b20      	ldr	r3, [pc, #128]	; (8000888 <MX_USART1_UART_Init+0x94>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800080c:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <MX_USART1_UART_Init+0x94>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000812:	4b1d      	ldr	r3, [pc, #116]	; (8000888 <MX_USART1_UART_Init+0x94>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000818:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <MX_USART1_UART_Init+0x94>)
 800081a:	220c      	movs	r2, #12
 800081c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081e:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <MX_USART1_UART_Init+0x94>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000824:	4b18      	ldr	r3, [pc, #96]	; (8000888 <MX_USART1_UART_Init+0x94>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082a:	4b17      	ldr	r3, [pc, #92]	; (8000888 <MX_USART1_UART_Init+0x94>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000830:	4b15      	ldr	r3, [pc, #84]	; (8000888 <MX_USART1_UART_Init+0x94>)
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000836:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_USART1_UART_Init+0x94>)
 8000838:	2200      	movs	r2, #0
 800083a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_USART1_UART_Init+0x94>)
 800083e:	0018      	movs	r0, r3
 8000840:	f002 fb8c 	bl	8002f5c <HAL_UART_Init>
 8000844:	1e03      	subs	r3, r0, #0
 8000846:	d001      	beq.n	800084c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000848:	f000 f9da 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800084c:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_USART1_UART_Init+0x94>)
 800084e:	2100      	movs	r1, #0
 8000850:	0018      	movs	r0, r3
 8000852:	f003 fa19 	bl	8003c88 <HAL_UARTEx_SetTxFifoThreshold>
 8000856:	1e03      	subs	r3, r0, #0
 8000858:	d001      	beq.n	800085e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800085a:	f000 f9d1 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800085e:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <MX_USART1_UART_Init+0x94>)
 8000860:	2100      	movs	r1, #0
 8000862:	0018      	movs	r0, r3
 8000864:	f003 fa50 	bl	8003d08 <HAL_UARTEx_SetRxFifoThreshold>
 8000868:	1e03      	subs	r3, r0, #0
 800086a:	d001      	beq.n	8000870 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800086c:	f000 f9c8 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <MX_USART1_UART_Init+0x94>)
 8000872:	0018      	movs	r0, r3
 8000874:	f003 f9ce 	bl	8003c14 <HAL_UARTEx_DisableFifoMode>
 8000878:	1e03      	subs	r3, r0, #0
 800087a:	d001      	beq.n	8000880 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800087c:	f000 f9c0 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000880:	46c0      	nop			; (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	20000080 	.word	0x20000080
 800088c:	40013800 	.word	0x40013800

08000890 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000894:	4b23      	ldr	r3, [pc, #140]	; (8000924 <MX_USART2_UART_Init+0x94>)
 8000896:	4a24      	ldr	r2, [pc, #144]	; (8000928 <MX_USART2_UART_Init+0x98>)
 8000898:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800089a:	4b22      	ldr	r3, [pc, #136]	; (8000924 <MX_USART2_UART_Init+0x94>)
 800089c:	22e1      	movs	r2, #225	; 0xe1
 800089e:	0252      	lsls	r2, r2, #9
 80008a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b20      	ldr	r3, [pc, #128]	; (8000924 <MX_USART2_UART_Init+0x94>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <MX_USART2_UART_Init+0x94>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <MX_USART2_UART_Init+0x94>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <MX_USART2_UART_Init+0x94>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <MX_USART2_UART_Init+0x94>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b18      	ldr	r3, [pc, #96]	; (8000924 <MX_USART2_UART_Init+0x94>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c6:	4b17      	ldr	r3, [pc, #92]	; (8000924 <MX_USART2_UART_Init+0x94>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008cc:	4b15      	ldr	r3, [pc, #84]	; (8000924 <MX_USART2_UART_Init+0x94>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_USART2_UART_Init+0x94>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <MX_USART2_UART_Init+0x94>)
 80008da:	0018      	movs	r0, r3
 80008dc:	f002 fb3e 	bl	8002f5c <HAL_UART_Init>
 80008e0:	1e03      	subs	r3, r0, #0
 80008e2:	d001      	beq.n	80008e8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008e4:	f000 f98c 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e8:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_USART2_UART_Init+0x94>)
 80008ea:	2100      	movs	r1, #0
 80008ec:	0018      	movs	r0, r3
 80008ee:	f003 f9cb 	bl	8003c88 <HAL_UARTEx_SetTxFifoThreshold>
 80008f2:	1e03      	subs	r3, r0, #0
 80008f4:	d001      	beq.n	80008fa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008f6:	f000 f983 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <MX_USART2_UART_Init+0x94>)
 80008fc:	2100      	movs	r1, #0
 80008fe:	0018      	movs	r0, r3
 8000900:	f003 fa02 	bl	8003d08 <HAL_UARTEx_SetRxFifoThreshold>
 8000904:	1e03      	subs	r3, r0, #0
 8000906:	d001      	beq.n	800090c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000908:	f000 f97a 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800090c:	4b05      	ldr	r3, [pc, #20]	; (8000924 <MX_USART2_UART_Init+0x94>)
 800090e:	0018      	movs	r0, r3
 8000910:	f003 f980 	bl	8003c14 <HAL_UARTEx_DisableFifoMode>
 8000914:	1e03      	subs	r3, r0, #0
 8000916:	d001      	beq.n	800091c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000918:	f000 f972 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800091c:	46c0      	nop			; (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	20000114 	.word	0x20000114
 8000928:	40004400 	.word	0x40004400

0800092c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000930:	4b16      	ldr	r3, [pc, #88]	; (800098c <MX_USART3_UART_Init+0x60>)
 8000932:	4a17      	ldr	r2, [pc, #92]	; (8000990 <MX_USART3_UART_Init+0x64>)
 8000934:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <MX_USART3_UART_Init+0x60>)
 8000938:	2296      	movs	r2, #150	; 0x96
 800093a:	0192      	lsls	r2, r2, #6
 800093c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800093e:	4b13      	ldr	r3, [pc, #76]	; (800098c <MX_USART3_UART_Init+0x60>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <MX_USART3_UART_Init+0x60>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <MX_USART3_UART_Init+0x60>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000950:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_USART3_UART_Init+0x60>)
 8000952:	220c      	movs	r2, #12
 8000954:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000956:	4b0d      	ldr	r3, [pc, #52]	; (800098c <MX_USART3_UART_Init+0x60>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800095c:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MX_USART3_UART_Init+0x60>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000962:	4b0a      	ldr	r3, [pc, #40]	; (800098c <MX_USART3_UART_Init+0x60>)
 8000964:	2200      	movs	r2, #0
 8000966:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <MX_USART3_UART_Init+0x60>)
 800096a:	2200      	movs	r2, #0
 800096c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <MX_USART3_UART_Init+0x60>)
 8000970:	2200      	movs	r2, #0
 8000972:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <MX_USART3_UART_Init+0x60>)
 8000976:	0018      	movs	r0, r3
 8000978:	f002 faf0 	bl	8002f5c <HAL_UART_Init>
 800097c:	1e03      	subs	r3, r0, #0
 800097e:	d001      	beq.n	8000984 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000980:	f000 f93e 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000984:	46c0      	nop			; (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	200001a8 	.word	0x200001a8
 8000990:	40004800 	.word	0x40004800

08000994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000994:	b590      	push	{r4, r7, lr}
 8000996:	b08b      	sub	sp, #44	; 0x2c
 8000998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099a:	2414      	movs	r4, #20
 800099c:	193b      	adds	r3, r7, r4
 800099e:	0018      	movs	r0, r3
 80009a0:	2314      	movs	r3, #20
 80009a2:	001a      	movs	r2, r3
 80009a4:	2100      	movs	r1, #0
 80009a6:	f003 fa4f 	bl	8003e48 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009aa:	4b3c      	ldr	r3, [pc, #240]	; (8000a9c <MX_GPIO_Init+0x108>)
 80009ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009ae:	4b3b      	ldr	r3, [pc, #236]	; (8000a9c <MX_GPIO_Init+0x108>)
 80009b0:	2104      	movs	r1, #4
 80009b2:	430a      	orrs	r2, r1
 80009b4:	635a      	str	r2, [r3, #52]	; 0x34
 80009b6:	4b39      	ldr	r3, [pc, #228]	; (8000a9c <MX_GPIO_Init+0x108>)
 80009b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ba:	2204      	movs	r2, #4
 80009bc:	4013      	ands	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009c2:	4b36      	ldr	r3, [pc, #216]	; (8000a9c <MX_GPIO_Init+0x108>)
 80009c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009c6:	4b35      	ldr	r3, [pc, #212]	; (8000a9c <MX_GPIO_Init+0x108>)
 80009c8:	2120      	movs	r1, #32
 80009ca:	430a      	orrs	r2, r1
 80009cc:	635a      	str	r2, [r3, #52]	; 0x34
 80009ce:	4b33      	ldr	r3, [pc, #204]	; (8000a9c <MX_GPIO_Init+0x108>)
 80009d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009d2:	2220      	movs	r2, #32
 80009d4:	4013      	ands	r3, r2
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	4b30      	ldr	r3, [pc, #192]	; (8000a9c <MX_GPIO_Init+0x108>)
 80009dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009de:	4b2f      	ldr	r3, [pc, #188]	; (8000a9c <MX_GPIO_Init+0x108>)
 80009e0:	2101      	movs	r1, #1
 80009e2:	430a      	orrs	r2, r1
 80009e4:	635a      	str	r2, [r3, #52]	; 0x34
 80009e6:	4b2d      	ldr	r3, [pc, #180]	; (8000a9c <MX_GPIO_Init+0x108>)
 80009e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ea:	2201      	movs	r2, #1
 80009ec:	4013      	ands	r3, r2
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	4b2a      	ldr	r3, [pc, #168]	; (8000a9c <MX_GPIO_Init+0x108>)
 80009f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009f6:	4b29      	ldr	r3, [pc, #164]	; (8000a9c <MX_GPIO_Init+0x108>)
 80009f8:	2102      	movs	r1, #2
 80009fa:	430a      	orrs	r2, r1
 80009fc:	635a      	str	r2, [r3, #52]	; 0x34
 80009fe:	4b27      	ldr	r3, [pc, #156]	; (8000a9c <MX_GPIO_Init+0x108>)
 8000a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a02:	2202      	movs	r2, #2
 8000a04:	4013      	ands	r3, r2
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L86_RST_Pin|ASTRO_PWR_SW_Pin|ASTRO_RST_Pin|L86_PWR_SW_Pin, GPIO_PIN_RESET);
 8000a0a:	4925      	ldr	r1, [pc, #148]	; (8000aa0 <MX_GPIO_Init+0x10c>)
 8000a0c:	4b25      	ldr	r3, [pc, #148]	; (8000aa4 <MX_GPIO_Init+0x110>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	0018      	movs	r0, r3
 8000a12:	f001 fa8f 	bl	8001f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LDG_Pin|ASTRO_PWR_SWA6_Pin|ASTRO_RSTA11_Pin|ASTRO_EVENT_Pin
 8000a16:	4924      	ldr	r1, [pc, #144]	; (8000aa8 <MX_GPIO_Init+0x114>)
 8000a18:	23a0      	movs	r3, #160	; 0xa0
 8000a1a:	05db      	lsls	r3, r3, #23
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f001 fa88 	bl	8001f34 <HAL_GPIO_WritePin>
                          |ASTRO_WAKEUP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : L86_RST_Pin ASTRO_PWR_SW_Pin ASTRO_RST_Pin L86_PWR_SW_Pin */
  GPIO_InitStruct.Pin = L86_RST_Pin|ASTRO_PWR_SW_Pin|ASTRO_RST_Pin|L86_PWR_SW_Pin;
 8000a24:	193b      	adds	r3, r7, r4
 8000a26:	4a1e      	ldr	r2, [pc, #120]	; (8000aa0 <MX_GPIO_Init+0x10c>)
 8000a28:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	193b      	adds	r3, r7, r4
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	193b      	adds	r3, r7, r4
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	4a19      	ldr	r2, [pc, #100]	; (8000aa4 <MX_GPIO_Init+0x110>)
 8000a40:	0019      	movs	r1, r3
 8000a42:	0010      	movs	r0, r2
 8000a44:	f001 f912 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin ASTRO_PWR_SWA6_Pin ASTRO_RSTA11_Pin ASTRO_EVENT_Pin
                           ASTRO_WAKEUP_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|ASTRO_PWR_SWA6_Pin|ASTRO_RSTA11_Pin|ASTRO_EVENT_Pin
 8000a48:	193b      	adds	r3, r7, r4
 8000a4a:	4a17      	ldr	r2, [pc, #92]	; (8000aa8 <MX_GPIO_Init+0x114>)
 8000a4c:	601a      	str	r2, [r3, #0]
                          |ASTRO_WAKEUP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	193b      	adds	r3, r7, r4
 8000a50:	2201      	movs	r2, #1
 8000a52:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	193b      	adds	r3, r7, r4
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	193b      	adds	r3, r7, r4
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a60:	193a      	adds	r2, r7, r4
 8000a62:	23a0      	movs	r3, #160	; 0xa0
 8000a64:	05db      	lsls	r3, r3, #23
 8000a66:	0011      	movs	r1, r2
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f001 f8ff 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LIS_INT1_EXTI8_Pin LIS_INT2_EXTI9_Pin */
  GPIO_InitStruct.Pin = LIS_INT1_EXTI8_Pin|LIS_INT2_EXTI9_Pin;
 8000a6e:	0021      	movs	r1, r4
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	22c0      	movs	r2, #192	; 0xc0
 8000a74:	0092      	lsls	r2, r2, #2
 8000a76:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a78:	187b      	adds	r3, r7, r1
 8000a7a:	2288      	movs	r2, #136	; 0x88
 8000a7c:	0352      	lsls	r2, r2, #13
 8000a7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	4a08      	ldr	r2, [pc, #32]	; (8000aac <MX_GPIO_Init+0x118>)
 8000a8a:	0019      	movs	r1, r3
 8000a8c:	0010      	movs	r0, r2
 8000a8e:	f001 f8ed 	bl	8001c6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	46bd      	mov	sp, r7
 8000a96:	b00b      	add	sp, #44	; 0x2c
 8000a98:	bd90      	pop	{r4, r7, pc}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	00001188 	.word	0x00001188
 8000aa4:	50000800 	.word	0x50000800
 8000aa8:	00009860 	.word	0x00009860
 8000aac:	50000400 	.word	0x50000400

08000ab0 <send_debug_logs>:

/* USER CODE BEGIN 4 */
void send_debug_logs ( char* p_tx_buffer )
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	0018      	movs	r0, r3
 8000abc:	f7ff fb22 	bl	8000104 <strlen>
 8000ac0:	0003      	movs	r3, r0
 8000ac2:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	2bfa      	cmp	r3, #250	; 0xfa
 8000ac8:	d908      	bls.n	8000adc <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 8000aca:	23fa      	movs	r3, #250	; 0xfa
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	490d      	ldr	r1, [pc, #52]	; (8000b04 <send_debug_logs+0x54>)
 8000ad0:	480d      	ldr	r0, [pc, #52]	; (8000b08 <send_debug_logs+0x58>)
 8000ad2:	222a      	movs	r2, #42	; 0x2a
 8000ad4:	f002 fa98 	bl	8003008 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 8000ad8:	23fa      	movs	r3, #250	; 0xfa
 8000ada:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	23fa      	movs	r3, #250	; 0xfa
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	6879      	ldr	r1, [r7, #4]
 8000ae6:	4808      	ldr	r0, [pc, #32]	; (8000b08 <send_debug_logs+0x58>)
 8000ae8:	f002 fa8e 	bl	8003008 <HAL_UART_Transmit>
    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8000aec:	23fa      	movs	r3, #250	; 0xfa
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	4906      	ldr	r1, [pc, #24]	; (8000b0c <send_debug_logs+0x5c>)
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <send_debug_logs+0x58>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	f002 fa87 	bl	8003008 <HAL_UART_Transmit>
}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	46bd      	mov	sp, r7
 8000afe:	b004      	add	sp, #16
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	08003ecc 	.word	0x08003ecc
 8000b08:	20000114 	.word	0x20000114
 8000b0c:	08003ef8 	.word	0x08003ef8

08000b10 <reset_astronode>:
void reset_astronode ( void )
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 8000b14:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <reset_astronode+0x30>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	2180      	movs	r1, #128	; 0x80
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f001 fa0a 	bl	8001f34 <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 8000b20:	2001      	movs	r0, #1
 8000b22:	f000 ffcb 	bl	8001abc <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <reset_astronode+0x30>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2180      	movs	r1, #128	; 0x80
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f001 fa01 	bl	8001f34 <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 8000b32:	20fa      	movs	r0, #250	; 0xfa
 8000b34:	f000 ffc2 	bl	8001abc <HAL_Delay>
}
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	50000800 	.word	0x50000800

08000b44 <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <send_astronode_request+0x34>)
 8000b50:	0018      	movs	r0, r3
 8000b52:	f7ff ffad 	bl	8000ab0 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f7ff ffa9 	bl	8000ab0 <send_debug_logs>

    HAL_UART_Transmit ( HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	23fa      	movs	r3, #250	; 0xfa
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	6879      	ldr	r1, [r7, #4]
 8000b68:	4804      	ldr	r0, [pc, #16]	; (8000b7c <send_astronode_request+0x38>)
 8000b6a:	f002 fa4d 	bl	8003008 <HAL_UART_Transmit>
}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b002      	add	sp, #8
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	08003efc 	.word	0x08003efc
 8000b7c:	20000080 	.word	0x20000080

08000b80 <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 8000b88:	6879      	ldr	r1, [r7, #4]
 8000b8a:	4806      	ldr	r0, [pc, #24]	; (8000ba4 <is_astronode_character_received+0x24>)
 8000b8c:	2364      	movs	r3, #100	; 0x64
 8000b8e:	2201      	movs	r2, #1
 8000b90:	f002 fad6 	bl	8003140 <HAL_UART_Receive>
 8000b94:	0003      	movs	r3, r0
 8000b96:	425a      	negs	r2, r3
 8000b98:	4153      	adcs	r3, r2
 8000b9a:	b2db      	uxtb	r3, r3
}
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	b002      	add	sp, #8
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000080 	.word	0x20000080

08000ba8 <get_systick>:
uint32_t get_systick ( void )
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 8000bac:	f000 ff7c 	bl	8001aa8 <HAL_GetTick>
 8000bb0:	0003      	movs	r3, r0
}
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	000a      	movs	r2, r1
 8000bc2:	1cbb      	adds	r3, r7, #2
 8000bc4:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 8000bc6:	f7ff ffef 	bl	8000ba8 <get_systick>
 8000bca:	0002      	movs	r2, r0
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	1cba      	adds	r2, r7, #2
 8000bd2:	8812      	ldrh	r2, [r2, #0]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	419b      	sbcs	r3, r3
 8000bd8:	425b      	negs	r3, r3
 8000bda:	b2db      	uxtb	r3, r3
}
 8000bdc:	0018      	movs	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b002      	add	sp, #8
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <my_astro_on>:
void my_astro_on ( void )
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOC , ASTRO_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8000be8:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <my_astro_on+0x18>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	2108      	movs	r1, #8
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f001 f9a0 	bl	8001f34 <HAL_GPIO_WritePin>
}
 8000bf4:	46c0      	nop			; (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	50000800 	.word	0x50000800

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <Error_Handler+0x8>
	...

08000c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <HAL_MspInit+0x44>)
 8000c14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <HAL_MspInit+0x44>)
 8000c18:	2101      	movs	r1, #1
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	641a      	str	r2, [r3, #64]	; 0x40
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <HAL_MspInit+0x44>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	2201      	movs	r2, #1
 8000c24:	4013      	ands	r3, r2
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <HAL_MspInit+0x44>)
 8000c2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c2e:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <HAL_MspInit+0x44>)
 8000c30:	2180      	movs	r1, #128	; 0x80
 8000c32:	0549      	lsls	r1, r1, #21
 8000c34:	430a      	orrs	r2, r1
 8000c36:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <HAL_MspInit+0x44>)
 8000c3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c3c:	2380      	movs	r3, #128	; 0x80
 8000c3e:	055b      	lsls	r3, r3, #21
 8000c40:	4013      	ands	r3, r2
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b002      	add	sp, #8
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	40021000 	.word	0x40021000

08000c54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c54:	b590      	push	{r4, r7, lr}
 8000c56:	b097      	sub	sp, #92	; 0x5c
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	2344      	movs	r3, #68	; 0x44
 8000c5e:	18fb      	adds	r3, r7, r3
 8000c60:	0018      	movs	r0, r3
 8000c62:	2314      	movs	r3, #20
 8000c64:	001a      	movs	r2, r3
 8000c66:	2100      	movs	r1, #0
 8000c68:	f003 f8ee 	bl	8003e48 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c6c:	2410      	movs	r4, #16
 8000c6e:	193b      	adds	r3, r7, r4
 8000c70:	0018      	movs	r0, r3
 8000c72:	2334      	movs	r3, #52	; 0x34
 8000c74:	001a      	movs	r2, r3
 8000c76:	2100      	movs	r1, #0
 8000c78:	f003 f8e6 	bl	8003e48 <memset>
  if(hi2c->Instance==I2C1)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a22      	ldr	r2, [pc, #136]	; (8000d0c <HAL_I2C_MspInit+0xb8>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d13d      	bne.n	8000d02 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c86:	193b      	adds	r3, r7, r4
 8000c88:	2220      	movs	r2, #32
 8000c8a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c8c:	193b      	adds	r3, r7, r4
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c92:	193b      	adds	r3, r7, r4
 8000c94:	0018      	movs	r0, r3
 8000c96:	f001 ffa9 	bl	8002bec <HAL_RCCEx_PeriphCLKConfig>
 8000c9a:	1e03      	subs	r3, r0, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c9e:	f7ff ffaf 	bl	8000c00 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca2:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <HAL_I2C_MspInit+0xbc>)
 8000ca4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <HAL_I2C_MspInit+0xbc>)
 8000ca8:	2102      	movs	r1, #2
 8000caa:	430a      	orrs	r2, r1
 8000cac:	635a      	str	r2, [r3, #52]	; 0x34
 8000cae:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <HAL_I2C_MspInit+0xbc>)
 8000cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cb2:	2202      	movs	r2, #2
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LIS_SCL_Pin|LIS_SDA_Pin;
 8000cba:	2144      	movs	r1, #68	; 0x44
 8000cbc:	187b      	adds	r3, r7, r1
 8000cbe:	22c0      	movs	r2, #192	; 0xc0
 8000cc0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cc2:	187b      	adds	r3, r7, r1
 8000cc4:	2212      	movs	r2, #18
 8000cc6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	187b      	adds	r3, r7, r1
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	2206      	movs	r2, #6
 8000cd8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cda:	187b      	adds	r3, r7, r1
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <HAL_I2C_MspInit+0xc0>)
 8000cde:	0019      	movs	r1, r3
 8000ce0:	0010      	movs	r0, r2
 8000ce2:	f000 ffc3 	bl	8001c6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <HAL_I2C_MspInit+0xbc>)
 8000ce8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <HAL_I2C_MspInit+0xbc>)
 8000cec:	2180      	movs	r1, #128	; 0x80
 8000cee:	0389      	lsls	r1, r1, #14
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_I2C_MspInit+0xbc>)
 8000cf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	039b      	lsls	r3, r3, #14
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b017      	add	sp, #92	; 0x5c
 8000d08:	bd90      	pop	{r4, r7, pc}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	40005400 	.word	0x40005400
 8000d10:	40021000 	.word	0x40021000
 8000d14:	50000400 	.word	0x50000400

08000d18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d18:	b590      	push	{r4, r7, lr}
 8000d1a:	b09b      	sub	sp, #108	; 0x6c
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	2354      	movs	r3, #84	; 0x54
 8000d22:	18fb      	adds	r3, r7, r3
 8000d24:	0018      	movs	r0, r3
 8000d26:	2314      	movs	r3, #20
 8000d28:	001a      	movs	r2, r3
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	f003 f88c 	bl	8003e48 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d30:	2420      	movs	r4, #32
 8000d32:	193b      	adds	r3, r7, r4
 8000d34:	0018      	movs	r0, r3
 8000d36:	2334      	movs	r3, #52	; 0x34
 8000d38:	001a      	movs	r2, r3
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	f003 f884 	bl	8003e48 <memset>
  if(huart->Instance==USART1)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a61      	ldr	r2, [pc, #388]	; (8000ecc <HAL_UART_MspInit+0x1b4>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d140      	bne.n	8000dcc <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d4a:	193b      	adds	r3, r7, r4
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d50:	193b      	adds	r3, r7, r4
 8000d52:	2200      	movs	r2, #0
 8000d54:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d56:	193b      	adds	r3, r7, r4
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f001 ff47 	bl	8002bec <HAL_RCCEx_PeriphCLKConfig>
 8000d5e:	1e03      	subs	r3, r0, #0
 8000d60:	d001      	beq.n	8000d66 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d62:	f7ff ff4d 	bl	8000c00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d66:	4b5a      	ldr	r3, [pc, #360]	; (8000ed0 <HAL_UART_MspInit+0x1b8>)
 8000d68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d6a:	4b59      	ldr	r3, [pc, #356]	; (8000ed0 <HAL_UART_MspInit+0x1b8>)
 8000d6c:	2180      	movs	r1, #128	; 0x80
 8000d6e:	01c9      	lsls	r1, r1, #7
 8000d70:	430a      	orrs	r2, r1
 8000d72:	641a      	str	r2, [r3, #64]	; 0x40
 8000d74:	4b56      	ldr	r3, [pc, #344]	; (8000ed0 <HAL_UART_MspInit+0x1b8>)
 8000d76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d78:	2380      	movs	r3, #128	; 0x80
 8000d7a:	01db      	lsls	r3, r3, #7
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	61fb      	str	r3, [r7, #28]
 8000d80:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	4b53      	ldr	r3, [pc, #332]	; (8000ed0 <HAL_UART_MspInit+0x1b8>)
 8000d84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d86:	4b52      	ldr	r3, [pc, #328]	; (8000ed0 <HAL_UART_MspInit+0x1b8>)
 8000d88:	2101      	movs	r1, #1
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	635a      	str	r2, [r3, #52]	; 0x34
 8000d8e:	4b50      	ldr	r3, [pc, #320]	; (8000ed0 <HAL_UART_MspInit+0x1b8>)
 8000d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d92:	2201      	movs	r2, #1
 8000d94:	4013      	ands	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
 8000d98:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ASTRO_TXD_Pin|ASTRO_RXD_Pin;
 8000d9a:	2154      	movs	r1, #84	; 0x54
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	22c0      	movs	r2, #192	; 0xc0
 8000da0:	00d2      	lsls	r2, r2, #3
 8000da2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	2202      	movs	r2, #2
 8000da8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	187b      	adds	r3, r7, r1
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000db6:	187b      	adds	r3, r7, r1
 8000db8:	2201      	movs	r2, #1
 8000dba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbc:	187a      	adds	r2, r7, r1
 8000dbe:	23a0      	movs	r3, #160	; 0xa0
 8000dc0:	05db      	lsls	r3, r3, #23
 8000dc2:	0011      	movs	r1, r2
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f000 ff51 	bl	8001c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dca:	e07b      	b.n	8000ec4 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART2)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a40      	ldr	r2, [pc, #256]	; (8000ed4 <HAL_UART_MspInit+0x1bc>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d140      	bne.n	8000e58 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000dd6:	2120      	movs	r1, #32
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	2202      	movs	r2, #2
 8000ddc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dde:	187b      	adds	r3, r7, r1
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	0018      	movs	r0, r3
 8000de8:	f001 ff00 	bl	8002bec <HAL_RCCEx_PeriphCLKConfig>
 8000dec:	1e03      	subs	r3, r0, #0
 8000dee:	d001      	beq.n	8000df4 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 8000df0:	f7ff ff06 	bl	8000c00 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000df4:	4b36      	ldr	r3, [pc, #216]	; (8000ed0 <HAL_UART_MspInit+0x1b8>)
 8000df6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000df8:	4b35      	ldr	r3, [pc, #212]	; (8000ed0 <HAL_UART_MspInit+0x1b8>)
 8000dfa:	2180      	movs	r1, #128	; 0x80
 8000dfc:	0289      	lsls	r1, r1, #10
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e02:	4b33      	ldr	r3, [pc, #204]	; (8000ed0 <HAL_UART_MspInit+0x1b8>)
 8000e04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e06:	2380      	movs	r3, #128	; 0x80
 8000e08:	029b      	lsls	r3, r3, #10
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	617b      	str	r3, [r7, #20]
 8000e0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e10:	4b2f      	ldr	r3, [pc, #188]	; (8000ed0 <HAL_UART_MspInit+0x1b8>)
 8000e12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e14:	4b2e      	ldr	r3, [pc, #184]	; (8000ed0 <HAL_UART_MspInit+0x1b8>)
 8000e16:	2101      	movs	r1, #1
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	635a      	str	r2, [r3, #52]	; 0x34
 8000e1c:	4b2c      	ldr	r3, [pc, #176]	; (8000ed0 <HAL_UART_MspInit+0x1b8>)
 8000e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e20:	2201      	movs	r2, #1
 8000e22:	4013      	ands	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DBG_TXD_Pin|DBG_RXD_Pin;
 8000e28:	2154      	movs	r1, #84	; 0x54
 8000e2a:	187b      	adds	r3, r7, r1
 8000e2c:	220c      	movs	r2, #12
 8000e2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	187b      	adds	r3, r7, r1
 8000e32:	2202      	movs	r2, #2
 8000e34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e36:	187b      	adds	r3, r7, r1
 8000e38:	2201      	movs	r2, #1
 8000e3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	2200      	movs	r2, #0
 8000e40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000e42:	187b      	adds	r3, r7, r1
 8000e44:	2201      	movs	r2, #1
 8000e46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	187a      	adds	r2, r7, r1
 8000e4a:	23a0      	movs	r3, #160	; 0xa0
 8000e4c:	05db      	lsls	r3, r3, #23
 8000e4e:	0011      	movs	r1, r2
 8000e50:	0018      	movs	r0, r3
 8000e52:	f000 ff0b 	bl	8001c6c <HAL_GPIO_Init>
}
 8000e56:	e035      	b.n	8000ec4 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART3)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a1e      	ldr	r2, [pc, #120]	; (8000ed8 <HAL_UART_MspInit+0x1c0>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d130      	bne.n	8000ec4 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e62:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <HAL_UART_MspInit+0x1b8>)
 8000e64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e66:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <HAL_UART_MspInit+0x1b8>)
 8000e68:	2180      	movs	r1, #128	; 0x80
 8000e6a:	02c9      	lsls	r1, r1, #11
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e70:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <HAL_UART_MspInit+0x1b8>)
 8000e72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	02db      	lsls	r3, r3, #11
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7e:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <HAL_UART_MspInit+0x1b8>)
 8000e80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e82:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <HAL_UART_MspInit+0x1b8>)
 8000e84:	2104      	movs	r1, #4
 8000e86:	430a      	orrs	r2, r1
 8000e88:	635a      	str	r2, [r3, #52]	; 0x34
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <HAL_UART_MspInit+0x1b8>)
 8000e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e8e:	2204      	movs	r2, #4
 8000e90:	4013      	ands	r3, r2
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = L86_RXD_Pin|L86_TXD_Pin;
 8000e96:	2154      	movs	r1, #84	; 0x54
 8000e98:	187b      	adds	r3, r7, r1
 8000e9a:	22c0      	movs	r2, #192	; 0xc0
 8000e9c:	0112      	lsls	r2, r2, #4
 8000e9e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	187b      	adds	r3, r7, r1
 8000ea2:	2202      	movs	r2, #2
 8000ea4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	2200      	movs	r2, #0
 8000eb0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 8000eb2:	187b      	adds	r3, r7, r1
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	4a08      	ldr	r2, [pc, #32]	; (8000edc <HAL_UART_MspInit+0x1c4>)
 8000ebc:	0019      	movs	r1, r3
 8000ebe:	0010      	movs	r0, r2
 8000ec0:	f000 fed4 	bl	8001c6c <HAL_GPIO_Init>
}
 8000ec4:	46c0      	nop			; (mov r8, r8)
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	b01b      	add	sp, #108	; 0x6c
 8000eca:	bd90      	pop	{r4, r7, pc}
 8000ecc:	40013800 	.word	0x40013800
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40004400 	.word	0x40004400
 8000ed8:	40004800 	.word	0x40004800
 8000edc:	50000800 	.word	0x50000800

08000ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <NMI_Handler+0x4>

08000ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <HardFault_Handler+0x4>

08000eec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ef0:	46c0      	nop			; (mov r8, r8)
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f04:	f000 fdbe 	bl	8001a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f08:	46c0      	nop			; (mov r8, r8)
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f18:	480d      	ldr	r0, [pc, #52]	; (8000f50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f1a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f1c:	f7ff fff7 	bl	8000f0e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f20:	480c      	ldr	r0, [pc, #48]	; (8000f54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f22:	490d      	ldr	r1, [pc, #52]	; (8000f58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f24:	4a0d      	ldr	r2, [pc, #52]	; (8000f5c <LoopForever+0xe>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f38:	4c0a      	ldr	r4, [pc, #40]	; (8000f64 <LoopForever+0x16>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f46:	f002 ff87 	bl	8003e58 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f4a:	f7ff fb6f 	bl	800062c <main>

08000f4e <LoopForever>:

LoopForever:
  b LoopForever
 8000f4e:	e7fe      	b.n	8000f4e <LoopForever>
  ldr   r0, =_estack
 8000f50:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000f54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f58:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f5c:	080055d0 	.word	0x080055d0
  ldr r2, =_sbss
 8000f60:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f64:	20000244 	.word	0x20000244

08000f68 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f68:	e7fe      	b.n	8000f68 <ADC1_COMP_IRQHandler>
	...

08000f6c <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 8000f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6e:	b0e7      	sub	sp, #412	; 0x19c
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	0005      	movs	r5, r0
 8000f74:	000c      	movs	r4, r1
 8000f76:	0010      	movs	r0, r2
 8000f78:	0019      	movs	r1, r3
 8000f7a:	4b4a      	ldr	r3, [pc, #296]	; (80010a4 <astronode_send_cfg_wr+0x138>)
 8000f7c:	26cc      	movs	r6, #204	; 0xcc
 8000f7e:	0076      	lsls	r6, r6, #1
 8000f80:	199b      	adds	r3, r3, r6
 8000f82:	19db      	adds	r3, r3, r7
 8000f84:	1c2a      	adds	r2, r5, #0
 8000f86:	701a      	strb	r2, [r3, #0]
 8000f88:	4b47      	ldr	r3, [pc, #284]	; (80010a8 <astronode_send_cfg_wr+0x13c>)
 8000f8a:	0035      	movs	r5, r6
 8000f8c:	195b      	adds	r3, r3, r5
 8000f8e:	19db      	adds	r3, r3, r7
 8000f90:	1c22      	adds	r2, r4, #0
 8000f92:	701a      	strb	r2, [r3, #0]
 8000f94:	4b45      	ldr	r3, [pc, #276]	; (80010ac <astronode_send_cfg_wr+0x140>)
 8000f96:	002c      	movs	r4, r5
 8000f98:	191b      	adds	r3, r3, r4
 8000f9a:	19db      	adds	r3, r3, r7
 8000f9c:	1c02      	adds	r2, r0, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
 8000fa0:	4b43      	ldr	r3, [pc, #268]	; (80010b0 <astronode_send_cfg_wr+0x144>)
 8000fa2:	191b      	adds	r3, r3, r4
 8000fa4:	19db      	adds	r3, r3, r7
 8000fa6:	1c0a      	adds	r2, r1, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8000faa:	25d0      	movs	r5, #208	; 0xd0
 8000fac:	197b      	adds	r3, r7, r5
 8000fae:	0018      	movs	r0, r3
 8000fb0:	23c6      	movs	r3, #198	; 0xc6
 8000fb2:	001a      	movs	r2, r3
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	f002 ff47 	bl	8003e48 <memset>
    astronode_app_msg_t answer = {0};
 8000fba:	4b3e      	ldr	r3, [pc, #248]	; (80010b4 <astronode_send_cfg_wr+0x148>)
 8000fbc:	191b      	adds	r3, r3, r4
 8000fbe:	19db      	adds	r3, r3, r7
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	23c6      	movs	r3, #198	; 0xc6
 8000fc4:	001a      	movs	r2, r3
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	f002 ff3e 	bl	8003e48 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8000fcc:	0029      	movs	r1, r5
 8000fce:	187b      	adds	r3, r7, r1
 8000fd0:	2205      	movs	r2, #5
 8000fd2:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8000fd4:	4b33      	ldr	r3, [pc, #204]	; (80010a4 <astronode_send_cfg_wr+0x138>)
 8000fd6:	191b      	adds	r3, r3, r4
 8000fd8:	19db      	adds	r3, r3, r7
 8000fda:	2200      	movs	r2, #0
 8000fdc:	569a      	ldrsb	r2, [r3, r2]
 8000fde:	4b32      	ldr	r3, [pc, #200]	; (80010a8 <astronode_send_cfg_wr+0x13c>)
 8000fe0:	191b      	adds	r3, r3, r4
 8000fe2:	19db      	adds	r3, r3, r7
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	b25b      	sxtb	r3, r3
 8000fea:	4313      	orrs	r3, r2
 8000fec:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 8000fee:	4b2f      	ldr	r3, [pc, #188]	; (80010ac <astronode_send_cfg_wr+0x140>)
 8000ff0:	191b      	adds	r3, r3, r4
 8000ff2:	19db      	adds	r3, r3, r7
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	b25b      	sxtb	r3, r3
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 8000ffe:	4b2c      	ldr	r3, [pc, #176]	; (80010b0 <astronode_send_cfg_wr+0x144>)
 8001000:	191b      	adds	r3, r3, r4
 8001002:	19db      	adds	r3, r3, r7
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	00db      	lsls	r3, r3, #3
 8001008:	b25b      	sxtb	r3, r3
 800100a:	4313      	orrs	r3, r2
 800100c:	b25b      	sxtb	r3, r3
 800100e:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8001010:	187b      	adds	r3, r7, r1
 8001012:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8001014:	23d4      	movs	r3, #212	; 0xd4
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	2508      	movs	r5, #8
 800101a:	195b      	adds	r3, r3, r5
 800101c:	19db      	adds	r3, r3, r7
 800101e:	2200      	movs	r2, #0
 8001020:	569a      	ldrsb	r2, [r3, r2]
 8001022:	23d6      	movs	r3, #214	; 0xd6
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	195b      	adds	r3, r3, r5
 8001028:	19db      	adds	r3, r3, r7
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	b25b      	sxtb	r3, r3
 8001030:	4313      	orrs	r3, r2
 8001032:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 8001034:	23d8      	movs	r3, #216	; 0xd8
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	195b      	adds	r3, r3, r5
 800103a:	19db      	adds	r3, r3, r7
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	b25b      	sxtb	r3, r3
 8001042:	4313      	orrs	r3, r2
 8001044:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 8001046:	23da      	movs	r3, #218	; 0xda
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	195b      	adds	r3, r3, r5
 800104c:	19db      	adds	r3, r3, r7
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	b25b      	sxtb	r3, r3
 8001054:	4313      	orrs	r3, r2
 8001056:	b25b      	sxtb	r3, r3
 8001058:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 800105a:	187b      	adds	r3, r7, r1
 800105c:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 800105e:	0008      	movs	r0, r1
 8001060:	187b      	adds	r3, r7, r1
 8001062:	22c4      	movs	r2, #196	; 0xc4
 8001064:	2103      	movs	r1, #3
 8001066:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8001068:	002b      	movs	r3, r5
 800106a:	18fa      	adds	r2, r7, r3
 800106c:	183b      	adds	r3, r7, r0
 800106e:	0011      	movs	r1, r2
 8001070:	0018      	movs	r0, r3
 8001072:	f000 fa87 	bl	8001584 <astronode_transport_send_receive>
 8001076:	0003      	movs	r3, r0
 8001078:	2b01      	cmp	r3, #1
 800107a:	d10e      	bne.n	800109a <astronode_send_cfg_wr+0x12e>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 800107c:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <astronode_send_cfg_wr+0x148>)
 800107e:	191b      	adds	r3, r3, r4
 8001080:	19db      	adds	r3, r3, r7
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b85      	cmp	r3, #133	; 0x85
 8001086:	d104      	bne.n	8001092 <astronode_send_cfg_wr+0x126>
        {
            send_debug_logs("Astronode configuration successfully set.");
 8001088:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <astronode_send_cfg_wr+0x14c>)
 800108a:	0018      	movs	r0, r3
 800108c:	f7ff fd10 	bl	8000ab0 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
        }
    }
}
 8001090:	e003      	b.n	800109a <astronode_send_cfg_wr+0x12e>
            send_debug_logs("Failed to set the Astronode configuration.");
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <astronode_send_cfg_wr+0x150>)
 8001094:	0018      	movs	r0, r3
 8001096:	f7ff fd0b 	bl	8000ab0 <send_debug_logs>
}
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	46bd      	mov	sp, r7
 800109e:	b067      	add	sp, #412	; 0x19c
 80010a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	fffffe6f 	.word	0xfffffe6f
 80010a8:	fffffe6e 	.word	0xfffffe6e
 80010ac:	fffffe6d 	.word	0xfffffe6d
 80010b0:	fffffe6c 	.word	0xfffffe6c
 80010b4:	fffffe70 	.word	0xfffffe70
 80010b8:	08004398 	.word	0x08004398
 80010bc:	080043c4 	.word	0x080043c4

080010c0 <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	0002      	movs	r2, r0
 80010c8:	6039      	str	r1, [r7, #0]
 80010ca:	1dfb      	adds	r3, r7, #7
 80010cc:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 80010ce:	1dfb      	adds	r3, r7, #7
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b2f      	cmp	r3, #47	; 0x2f
 80010d4:	d90b      	bls.n	80010ee <ascii_to_value+0x2e>
 80010d6:	1dfb      	adds	r3, r7, #7
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b39      	cmp	r3, #57	; 0x39
 80010dc:	d807      	bhi.n	80010ee <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 80010de:	1dfb      	adds	r3, r7, #7
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	3b30      	subs	r3, #48	; 0x30
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	701a      	strb	r2, [r3, #0]
        return true;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e010      	b.n	8001110 <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 80010ee:	1dfb      	adds	r3, r7, #7
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b40      	cmp	r3, #64	; 0x40
 80010f4:	d90b      	bls.n	800110e <ascii_to_value+0x4e>
 80010f6:	1dfb      	adds	r3, r7, #7
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b46      	cmp	r3, #70	; 0x46
 80010fc:	d807      	bhi.n	800110e <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 80010fe:	1dfb      	adds	r3, r7, #7
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	3b37      	subs	r3, #55	; 0x37
 8001104:	b2da      	uxtb	r2, r3
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	701a      	strb	r2, [r3, #0]
        return true;
 800110a:	2301      	movs	r3, #1
 800110c:	e000      	b.n	8001110 <ascii_to_value+0x50>
    }
    else
    {
        return false;
 800110e:	2300      	movs	r3, #0
    }
}
 8001110:	0018      	movs	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	b002      	add	sp, #8
 8001116:	bd80      	pop	{r7, pc}

08001118 <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8001118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 8001122:	250e      	movs	r5, #14
 8001124:	197b      	adds	r3, r7, r5
 8001126:	2200      	movs	r2, #0
 8001128:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 800112a:	197b      	adds	r3, r7, r5
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	197a      	adds	r2, r7, r5
 8001130:	1c59      	adds	r1, r3, #1
 8001132:	8011      	strh	r1, [r2, #0]
 8001134:	001a      	movs	r2, r3
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	189b      	adds	r3, r3, r2
 800113a:	2202      	movs	r2, #2
 800113c:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	260a      	movs	r6, #10
 8001142:	19bc      	adds	r4, r7, r6
 8001144:	4a44      	ldr	r2, [pc, #272]	; (8001258 <astronode_create_request_transport+0x140>)
 8001146:	2101      	movs	r1, #1
 8001148:	0018      	movs	r0, r3
 800114a:	f000 fa7d 	bl	8001648 <calculate_crc>
 800114e:	0003      	movs	r3, r0
 8001150:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	1c58      	adds	r0, r3, #1
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	22c4      	movs	r2, #196	; 0xc4
 800115a:	5a99      	ldrh	r1, [r3, r2]
 800115c:	19bc      	adds	r4, r7, r6
 800115e:	19bb      	adds	r3, r7, r6
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	001a      	movs	r2, r3
 8001164:	f000 fa70 	bl	8001648 <calculate_crc>
 8001168:	0003      	movs	r3, r0
 800116a:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 800116c:	19bb      	adds	r3, r7, r6
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	021b      	lsls	r3, r3, #8
 8001172:	b21a      	sxth	r2, r3
 8001174:	0031      	movs	r1, r6
 8001176:	19bb      	adds	r3, r7, r6
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	0a1b      	lsrs	r3, r3, #8
 800117c:	b29b      	uxth	r3, r3
 800117e:	b21b      	sxth	r3, r3
 8001180:	4313      	orrs	r3, r2
 8001182:	b21a      	sxth	r2, r3
 8001184:	187b      	adds	r3, r7, r1
 8001186:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	7818      	ldrb	r0, [r3, #0]
 800118c:	197b      	adds	r3, r7, r5
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	18d3      	adds	r3, r2, r3
 8001194:	0019      	movs	r1, r3
 8001196:	f000 fbeb 	bl	8001970 <uint8_to_ascii_buffer>
    index += 2;
 800119a:	197b      	adds	r3, r7, r5
 800119c:	197a      	adds	r2, r7, r5
 800119e:	8812      	ldrh	r2, [r2, #0]
 80011a0:	3202      	adds	r2, #2
 80011a2:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 80011a4:	230c      	movs	r3, #12
 80011a6:	18fb      	adds	r3, r7, r3
 80011a8:	2200      	movs	r2, #0
 80011aa:	801a      	strh	r2, [r3, #0]
 80011ac:	e017      	b.n	80011de <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 80011ae:	240c      	movs	r4, #12
 80011b0:	193b      	adds	r3, r7, r4
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	18d3      	adds	r3, r2, r3
 80011b8:	7858      	ldrb	r0, [r3, #1]
 80011ba:	250e      	movs	r5, #14
 80011bc:	197b      	adds	r3, r7, r5
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	18d3      	adds	r3, r2, r3
 80011c4:	0019      	movs	r1, r3
 80011c6:	f000 fbd3 	bl	8001970 <uint8_to_ascii_buffer>
        index += 2;
 80011ca:	197b      	adds	r3, r7, r5
 80011cc:	197a      	adds	r2, r7, r5
 80011ce:	8812      	ldrh	r2, [r2, #0]
 80011d0:	3202      	adds	r2, #2
 80011d2:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 80011d4:	193b      	adds	r3, r7, r4
 80011d6:	881a      	ldrh	r2, [r3, #0]
 80011d8:	193b      	adds	r3, r7, r4
 80011da:	3201      	adds	r2, #1
 80011dc:	801a      	strh	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	22c4      	movs	r2, #196	; 0xc4
 80011e2:	5a9b      	ldrh	r3, [r3, r2]
 80011e4:	220c      	movs	r2, #12
 80011e6:	18ba      	adds	r2, r7, r2
 80011e8:	8812      	ldrh	r2, [r2, #0]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d3df      	bcc.n	80011ae <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 80011ee:	250a      	movs	r5, #10
 80011f0:	197b      	adds	r3, r7, r5
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	0a1b      	lsrs	r3, r3, #8
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	b2d8      	uxtb	r0, r3
 80011fa:	240e      	movs	r4, #14
 80011fc:	193b      	adds	r3, r7, r4
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	683a      	ldr	r2, [r7, #0]
 8001202:	18d3      	adds	r3, r2, r3
 8001204:	0019      	movs	r1, r3
 8001206:	f000 fbb3 	bl	8001970 <uint8_to_ascii_buffer>
    index += 2;
 800120a:	0021      	movs	r1, r4
 800120c:	187b      	adds	r3, r7, r1
 800120e:	187a      	adds	r2, r7, r1
 8001210:	8812      	ldrh	r2, [r2, #0]
 8001212:	3202      	adds	r2, #2
 8001214:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 8001216:	197b      	adds	r3, r7, r5
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	b2d8      	uxtb	r0, r3
 800121c:	000c      	movs	r4, r1
 800121e:	187b      	adds	r3, r7, r1
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	18d3      	adds	r3, r2, r3
 8001226:	0019      	movs	r1, r3
 8001228:	f000 fba2 	bl	8001970 <uint8_to_ascii_buffer>
    index += 2;
 800122c:	0020      	movs	r0, r4
 800122e:	183b      	adds	r3, r7, r0
 8001230:	183a      	adds	r2, r7, r0
 8001232:	8812      	ldrh	r2, [r2, #0]
 8001234:	3202      	adds	r2, #2
 8001236:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 8001238:	183b      	adds	r3, r7, r0
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	183a      	adds	r2, r7, r0
 800123e:	1c59      	adds	r1, r3, #1
 8001240:	8011      	strh	r1, [r2, #0]
 8001242:	001a      	movs	r2, r3
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	189b      	adds	r3, r3, r2
 8001248:	2203      	movs	r2, #3
 800124a:	701a      	strb	r2, [r3, #0]

    return index;
 800124c:	183b      	adds	r3, r7, r0
 800124e:	881b      	ldrh	r3, [r3, #0]
}
 8001250:	0018      	movs	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	b005      	add	sp, #20
 8001256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001258:	0000ffff 	.word	0x0000ffff

0800125c <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 800125c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800125e:	b089      	sub	sp, #36	; 0x24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	230a      	movs	r3, #10
 8001268:	18fb      	adds	r3, r7, r3
 800126a:	1c0a      	adds	r2, r1, #0
 800126c:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d005      	beq.n	8001282 <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 8001276:	4bbd      	ldr	r3, [pc, #756]	; (800156c <astronode_decode_answer_transport+0x310>)
 8001278:	0018      	movs	r0, r3
 800127a:	f7ff fc19 	bl	8000ab0 <send_debug_logs>
        return RS_FAILURE;
 800127e:	2300      	movs	r3, #0
 8001280:	e170      	b.n	8001564 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 8001282:	210a      	movs	r1, #10
 8001284:	187b      	adds	r3, r7, r1
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	2201      	movs	r2, #1
 800128a:	4013      	ands	r3, r2
 800128c:	b29b      	uxth	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d103      	bne.n	800129a <astronode_decode_answer_transport+0x3e>
 8001292:	187b      	adds	r3, r7, r1
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	2b07      	cmp	r3, #7
 8001298:	d805      	bhi.n	80012a6 <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 800129a:	4bb5      	ldr	r3, [pc, #724]	; (8001570 <astronode_decode_answer_transport+0x314>)
 800129c:	0018      	movs	r0, r3
 800129e:	f7ff fc07 	bl	8000ab0 <send_debug_logs>
        return RS_FAILURE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	e15e      	b.n	8001564 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 80012a6:	230a      	movs	r3, #10
 80012a8:	18fb      	adds	r3, r7, r3
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	3b08      	subs	r3, #8
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	da00      	bge.n	80012b4 <astronode_decode_answer_transport+0x58>
 80012b2:	3301      	adds	r3, #1
 80012b4:	105b      	asrs	r3, r3, #1
 80012b6:	b299      	uxth	r1, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	22c4      	movs	r2, #196	; 0xc4
 80012bc:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 80012be:	230a      	movs	r3, #10
 80012c0:	18fb      	adds	r3, r7, r3
 80012c2:	881b      	ldrh	r3, [r3, #0]
 80012c4:	3b01      	subs	r3, #1
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	18d3      	adds	r3, r2, r3
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b03      	cmp	r3, #3
 80012ce:	d005      	beq.n	80012dc <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 80012d0:	4ba8      	ldr	r3, [pc, #672]	; (8001574 <astronode_decode_answer_transport+0x318>)
 80012d2:	0018      	movs	r0, r3
 80012d4:	f7ff fbec 	bl	8000ab0 <send_debug_logs>
        return RS_FAILURE;
 80012d8:	2300      	movs	r3, #0
 80012da:	e143      	b.n	8001564 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 80012dc:	2117      	movs	r1, #23
 80012de:	187b      	adds	r3, r7, r1
 80012e0:	2200      	movs	r2, #0
 80012e2:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 80012e4:	2416      	movs	r4, #22
 80012e6:	193b      	adds	r3, r7, r4
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	3301      	adds	r3, #1
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	187a      	adds	r2, r7, r1
 80012f4:	0011      	movs	r1, r2
 80012f6:	0018      	movs	r0, r3
 80012f8:	f7ff fee2 	bl	80010c0 <ascii_to_value>
 80012fc:	0003      	movs	r3, r0
 80012fe:	001a      	movs	r2, r3
 8001300:	2301      	movs	r3, #1
 8001302:	4053      	eors	r3, r2
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10e      	bne.n	8001328 <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	3302      	adds	r3, #2
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	193a      	adds	r2, r7, r4
 8001312:	0011      	movs	r1, r2
 8001314:	0018      	movs	r0, r3
 8001316:	f7ff fed3 	bl	80010c0 <ascii_to_value>
 800131a:	0003      	movs	r3, r0
 800131c:	001a      	movs	r2, r3
 800131e:	2301      	movs	r3, #1
 8001320:	4053      	eors	r3, r2
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d005      	beq.n	8001334 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8001328:	4b93      	ldr	r3, [pc, #588]	; (8001578 <astronode_decode_answer_transport+0x31c>)
 800132a:	0018      	movs	r0, r3
 800132c:	f7ff fbc0 	bl	8000ab0 <send_debug_logs>
        return RS_FAILURE;
 8001330:	2300      	movs	r3, #0
 8001332:	e117      	b.n	8001564 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 8001334:	2317      	movs	r3, #23
 8001336:	18fb      	adds	r3, r7, r3
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	011b      	lsls	r3, r3, #4
 800133c:	b2da      	uxtb	r2, r3
 800133e:	2316      	movs	r3, #22
 8001340:	18fb      	adds	r3, r7, r3
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	18d3      	adds	r3, r2, r3
 8001346:	b2da      	uxtb	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 800134c:	231e      	movs	r3, #30
 800134e:	18fb      	adds	r3, r7, r3
 8001350:	2203      	movs	r2, #3
 8001352:	801a      	strh	r2, [r3, #0]
 8001354:	231c      	movs	r3, #28
 8001356:	18fb      	adds	r3, r7, r3
 8001358:	2200      	movs	r2, #0
 800135a:	801a      	strh	r2, [r3, #0]
 800135c:	e045      	b.n	80013ea <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 800135e:	241e      	movs	r4, #30
 8001360:	193b      	adds	r3, r7, r4
 8001362:	881b      	ldrh	r3, [r3, #0]
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	18d3      	adds	r3, r2, r3
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2217      	movs	r2, #23
 800136c:	18ba      	adds	r2, r7, r2
 800136e:	0011      	movs	r1, r2
 8001370:	0018      	movs	r0, r3
 8001372:	f7ff fea5 	bl	80010c0 <ascii_to_value>
 8001376:	0003      	movs	r3, r0
 8001378:	001a      	movs	r2, r3
 800137a:	2301      	movs	r3, #1
 800137c:	4053      	eors	r3, r2
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	d112      	bne.n	80013aa <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 8001384:	193b      	adds	r3, r7, r4
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	3301      	adds	r3, #1
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	18d3      	adds	r3, r2, r3
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2216      	movs	r2, #22
 8001392:	18ba      	adds	r2, r7, r2
 8001394:	0011      	movs	r1, r2
 8001396:	0018      	movs	r0, r3
 8001398:	f7ff fe92 	bl	80010c0 <ascii_to_value>
 800139c:	0003      	movs	r3, r0
 800139e:	001a      	movs	r2, r3
 80013a0:	2301      	movs	r3, #1
 80013a2:	4053      	eors	r3, r2
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d005      	beq.n	80013b6 <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 80013aa:	4b73      	ldr	r3, [pc, #460]	; (8001578 <astronode_decode_answer_transport+0x31c>)
 80013ac:	0018      	movs	r0, r3
 80013ae:	f7ff fb7f 	bl	8000ab0 <send_debug_logs>
            return RS_FAILURE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	e0d6      	b.n	8001564 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 80013b6:	2317      	movs	r3, #23
 80013b8:	18fb      	adds	r3, r7, r3
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	011b      	lsls	r3, r3, #4
 80013be:	b2d9      	uxtb	r1, r3
 80013c0:	2316      	movs	r3, #22
 80013c2:	18fb      	adds	r3, r7, r3
 80013c4:	781a      	ldrb	r2, [r3, #0]
 80013c6:	201c      	movs	r0, #28
 80013c8:	183b      	adds	r3, r7, r0
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	1838      	adds	r0, r7, r0
 80013ce:	1c5c      	adds	r4, r3, #1
 80013d0:	8004      	strh	r4, [r0, #0]
 80013d2:	0018      	movs	r0, r3
 80013d4:	188b      	adds	r3, r1, r2
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	181b      	adds	r3, r3, r0
 80013dc:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 80013de:	221e      	movs	r2, #30
 80013e0:	18bb      	adds	r3, r7, r2
 80013e2:	18ba      	adds	r2, r7, r2
 80013e4:	8812      	ldrh	r2, [r2, #0]
 80013e6:	3202      	adds	r2, #2
 80013e8:	801a      	strh	r2, [r3, #0]
 80013ea:	231e      	movs	r3, #30
 80013ec:	18fb      	adds	r3, r7, r3
 80013ee:	881a      	ldrh	r2, [r3, #0]
 80013f0:	260a      	movs	r6, #10
 80013f2:	19bb      	adds	r3, r7, r6
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	3b05      	subs	r3, #5
 80013f8:	429a      	cmp	r2, r3
 80013fa:	dbb0      	blt.n	800135e <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	251a      	movs	r5, #26
 8001400:	197c      	adds	r4, r7, r5
 8001402:	4a5e      	ldr	r2, [pc, #376]	; (800157c <astronode_decode_answer_transport+0x320>)
 8001404:	2101      	movs	r1, #1
 8001406:	0018      	movs	r0, r3
 8001408:	f000 f91e 	bl	8001648 <calculate_crc>
 800140c:	0003      	movs	r3, r0
 800140e:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	1c58      	adds	r0, r3, #1
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	22c4      	movs	r2, #196	; 0xc4
 8001418:	5a99      	ldrh	r1, [r3, r2]
 800141a:	197c      	adds	r4, r7, r5
 800141c:	197b      	adds	r3, r7, r5
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	001a      	movs	r2, r3
 8001422:	f000 f911 	bl	8001648 <calculate_crc>
 8001426:	0003      	movs	r3, r0
 8001428:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 800142a:	197b      	adds	r3, r7, r5
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	021b      	lsls	r3, r3, #8
 8001430:	b21a      	sxth	r2, r3
 8001432:	0029      	movs	r1, r5
 8001434:	197b      	adds	r3, r7, r5
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	0a1b      	lsrs	r3, r3, #8
 800143a:	b29b      	uxth	r3, r3
 800143c:	b21b      	sxth	r3, r3
 800143e:	4313      	orrs	r3, r2
 8001440:	b21a      	sxth	r2, r3
 8001442:	187b      	adds	r3, r7, r1
 8001444:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 8001446:	19bb      	adds	r3, r7, r6
 8001448:	881b      	ldrh	r3, [r3, #0]
 800144a:	3b05      	subs	r3, #5
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	18d3      	adds	r3, r2, r3
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2217      	movs	r2, #23
 8001454:	18ba      	adds	r2, r7, r2
 8001456:	0011      	movs	r1, r2
 8001458:	0018      	movs	r0, r3
 800145a:	f7ff fe31 	bl	80010c0 <ascii_to_value>
 800145e:	0003      	movs	r3, r0
 8001460:	001a      	movs	r2, r3
 8001462:	2301      	movs	r3, #1
 8001464:	4053      	eors	r3, r2
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2b00      	cmp	r3, #0
 800146a:	d112      	bne.n	8001492 <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 800146c:	19bb      	adds	r3, r7, r6
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	3b04      	subs	r3, #4
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	18d3      	adds	r3, r2, r3
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2216      	movs	r2, #22
 800147a:	18ba      	adds	r2, r7, r2
 800147c:	0011      	movs	r1, r2
 800147e:	0018      	movs	r0, r3
 8001480:	f7ff fe1e 	bl	80010c0 <ascii_to_value>
 8001484:	0003      	movs	r3, r0
 8001486:	001a      	movs	r2, r3
 8001488:	2301      	movs	r3, #1
 800148a:	4053      	eors	r3, r2
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d005      	beq.n	800149e <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8001492:	4b39      	ldr	r3, [pc, #228]	; (8001578 <astronode_decode_answer_transport+0x31c>)
 8001494:	0018      	movs	r0, r3
 8001496:	f7ff fb0b 	bl	8000ab0 <send_debug_logs>
        return RS_FAILURE;
 800149a:	2300      	movs	r3, #0
 800149c:	e062      	b.n	8001564 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 800149e:	2017      	movs	r0, #23
 80014a0:	183b      	adds	r3, r7, r0
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	031b      	lsls	r3, r3, #12
 80014a8:	b299      	uxth	r1, r3
 80014aa:	2416      	movs	r4, #22
 80014ac:	193b      	adds	r3, r7, r4
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	021b      	lsls	r3, r3, #8
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	2318      	movs	r3, #24
 80014b8:	18fb      	adds	r3, r7, r3
 80014ba:	188a      	adds	r2, r1, r2
 80014bc:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 80014be:	250a      	movs	r5, #10
 80014c0:	197b      	adds	r3, r7, r5
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	3b03      	subs	r3, #3
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	18d3      	adds	r3, r2, r3
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	183a      	adds	r2, r7, r0
 80014ce:	0011      	movs	r1, r2
 80014d0:	0018      	movs	r0, r3
 80014d2:	f7ff fdf5 	bl	80010c0 <ascii_to_value>
 80014d6:	0003      	movs	r3, r0
 80014d8:	001a      	movs	r2, r3
 80014da:	2301      	movs	r3, #1
 80014dc:	4053      	eors	r3, r2
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d111      	bne.n	8001508 <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 80014e4:	197b      	adds	r3, r7, r5
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	3b02      	subs	r3, #2
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	18d3      	adds	r3, r2, r3
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	193a      	adds	r2, r7, r4
 80014f2:	0011      	movs	r1, r2
 80014f4:	0018      	movs	r0, r3
 80014f6:	f7ff fde3 	bl	80010c0 <ascii_to_value>
 80014fa:	0003      	movs	r3, r0
 80014fc:	001a      	movs	r2, r3
 80014fe:	2301      	movs	r3, #1
 8001500:	4053      	eors	r3, r2
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b00      	cmp	r3, #0
 8001506:	d005      	beq.n	8001514 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8001508:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <astronode_decode_answer_transport+0x31c>)
 800150a:	0018      	movs	r0, r3
 800150c:	f7ff fad0 	bl	8000ab0 <send_debug_logs>
        return RS_FAILURE;
 8001510:	2300      	movs	r3, #0
 8001512:	e027      	b.n	8001564 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 8001514:	2317      	movs	r3, #23
 8001516:	18fb      	adds	r3, r7, r3
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b29b      	uxth	r3, r3
 800151c:	011b      	lsls	r3, r3, #4
 800151e:	b29a      	uxth	r2, r3
 8001520:	2316      	movs	r3, #22
 8001522:	18fb      	adds	r3, r7, r3
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b29b      	uxth	r3, r3
 8001528:	18d3      	adds	r3, r2, r3
 800152a:	b299      	uxth	r1, r3
 800152c:	2018      	movs	r0, #24
 800152e:	183b      	adds	r3, r7, r0
 8001530:	183a      	adds	r2, r7, r0
 8001532:	8812      	ldrh	r2, [r2, #0]
 8001534:	188a      	adds	r2, r1, r2
 8001536:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 8001538:	183a      	adds	r2, r7, r0
 800153a:	231a      	movs	r3, #26
 800153c:	18fb      	adds	r3, r7, r3
 800153e:	8812      	ldrh	r2, [r2, #0]
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	429a      	cmp	r2, r3
 8001544:	d005      	beq.n	8001552 <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <astronode_decode_answer_transport+0x324>)
 8001548:	0018      	movs	r0, r3
 800154a:	f7ff fab1 	bl	8000ab0 <send_debug_logs>
        return RS_FAILURE;
 800154e:	2300      	movs	r3, #0
 8001550:	e008      	b.n	8001564 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2bff      	cmp	r3, #255	; 0xff
 8001558:	d103      	bne.n	8001562 <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	0018      	movs	r0, r3
 800155e:	f000 f8c3 	bl	80016e8 <check_for_error>
    }

    return RS_SUCCESS;
 8001562:	2301      	movs	r3, #1
}
 8001564:	0018      	movs	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	b009      	add	sp, #36	; 0x24
 800156a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800156c:	08004e68 	.word	0x08004e68
 8001570:	08004eb8 	.word	0x08004eb8
 8001574:	08004f08 	.word	0x08004f08
 8001578:	08004f58 	.word	0x08004f58
 800157c:	0000ffff 	.word	0x0000ffff
 8001580:	08004fa4 	.word	0x08004fa4

08001584 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 8001584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001586:	4c2b      	ldr	r4, [pc, #172]	; (8001634 <astronode_transport_send_receive+0xb0>)
 8001588:	44a5      	add	sp, r4
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
 800158e:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8001590:	4b29      	ldr	r3, [pc, #164]	; (8001638 <astronode_transport_send_receive+0xb4>)
 8001592:	25ca      	movs	r5, #202	; 0xca
 8001594:	00ad      	lsls	r5, r5, #2
 8001596:	195b      	adds	r3, r3, r5
 8001598:	19db      	adds	r3, r3, r7
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	3304      	adds	r3, #4
 80015a0:	22c4      	movs	r2, #196	; 0xc4
 80015a2:	0052      	lsls	r2, r2, #1
 80015a4:	2100      	movs	r1, #0
 80015a6:	0018      	movs	r0, r3
 80015a8:	f002 fc4e 	bl	8003e48 <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 80015ac:	4b23      	ldr	r3, [pc, #140]	; (800163c <astronode_transport_send_receive+0xb8>)
 80015ae:	195b      	adds	r3, r3, r5
 80015b0:	19db      	adds	r3, r3, r7
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	3304      	adds	r3, #4
 80015b8:	22c4      	movs	r2, #196	; 0xc4
 80015ba:	0052      	lsls	r2, r2, #1
 80015bc:	2100      	movs	r1, #0
 80015be:	0018      	movs	r0, r3
 80015c0:	f002 fc42 	bl	8003e48 <memset>
    uint16_t answer_length =  0;
 80015c4:	4b1e      	ldr	r3, [pc, #120]	; (8001640 <astronode_transport_send_receive+0xbc>)
 80015c6:	195b      	adds	r3, r3, r5
 80015c8:	19db      	adds	r3, r3, r7
 80015ca:	2200      	movs	r2, #0
 80015cc:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 80015ce:	4e1d      	ldr	r6, [pc, #116]	; (8001644 <astronode_transport_send_receive+0xc0>)
 80015d0:	19bc      	adds	r4, r7, r6
 80015d2:	23cc      	movs	r3, #204	; 0xcc
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	18fa      	adds	r2, r7, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	0011      	movs	r1, r2
 80015dc:	0018      	movs	r0, r3
 80015de:	f7ff fd9b 	bl	8001118 <astronode_create_request_transport>
 80015e2:	0003      	movs	r3, r0
 80015e4:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 80015e6:	19bb      	adds	r3, r7, r6
 80015e8:	881a      	ldrh	r2, [r3, #0]
 80015ea:	23cc      	movs	r3, #204	; 0xcc
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	18fb      	adds	r3, r7, r3
 80015f0:	0011      	movs	r1, r2
 80015f2:	0018      	movs	r0, r3
 80015f4:	f7ff faa6 	bl	8000b44 <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 80015f8:	230a      	movs	r3, #10
 80015fa:	18fa      	adds	r2, r7, r3
 80015fc:	240c      	movs	r4, #12
 80015fe:	193b      	adds	r3, r7, r4
 8001600:	0011      	movs	r1, r2
 8001602:	0018      	movs	r0, r3
 8001604:	f000 f92c 	bl	8001860 <receive_astronode_answer>
 8001608:	0003      	movs	r3, r0
 800160a:	2b01      	cmp	r3, #1
 800160c:	d10a      	bne.n	8001624 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 800160e:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <astronode_transport_send_receive+0xbc>)
 8001610:	195b      	adds	r3, r3, r5
 8001612:	19db      	adds	r3, r3, r7
 8001614:	8819      	ldrh	r1, [r3, #0]
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	193b      	adds	r3, r7, r4
 800161a:	0018      	movs	r0, r3
 800161c:	f7ff fe1e 	bl	800125c <astronode_decode_answer_transport>
 8001620:	0003      	movs	r3, r0
 8001622:	e000      	b.n	8001626 <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 8001624:	2300      	movs	r3, #0
    }
}
 8001626:	0018      	movs	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	23cb      	movs	r3, #203	; 0xcb
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	449d      	add	sp, r3
 8001630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	fffffcd4 	.word	0xfffffcd4
 8001638:	fffffe70 	.word	0xfffffe70
 800163c:	fffffce4 	.word	0xfffffce4
 8001640:	fffffce2 	.word	0xfffffce2
 8001644:	00000326 	.word	0x00000326

08001648 <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 8001648:	b590      	push	{r4, r7, lr}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	0008      	movs	r0, r1
 8001652:	0011      	movs	r1, r2
 8001654:	1cbb      	adds	r3, r7, #2
 8001656:	1c02      	adds	r2, r0, #0
 8001658:	801a      	strh	r2, [r3, #0]
 800165a:	003b      	movs	r3, r7
 800165c:	1c0a      	adds	r2, r1, #0
 800165e:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 8001660:	230e      	movs	r3, #14
 8001662:	18fb      	adds	r3, r7, r3
 8001664:	003a      	movs	r2, r7
 8001666:	8812      	ldrh	r2, [r2, #0]
 8001668:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 800166a:	e02e      	b.n	80016ca <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 800166c:	240e      	movs	r4, #14
 800166e:	193b      	adds	r3, r7, r4
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	0a1b      	lsrs	r3, r3, #8
 8001674:	b299      	uxth	r1, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	1c5a      	adds	r2, r3, #1
 800167a:	607a      	str	r2, [r7, #4]
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	b29a      	uxth	r2, r3
 8001680:	200c      	movs	r0, #12
 8001682:	183b      	adds	r3, r7, r0
 8001684:	404a      	eors	r2, r1
 8001686:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 8001688:	183b      	adds	r3, r7, r0
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	091b      	lsrs	r3, r3, #4
 800168e:	b299      	uxth	r1, r3
 8001690:	183b      	adds	r3, r7, r0
 8001692:	183a      	adds	r2, r7, r0
 8001694:	8812      	ldrh	r2, [r2, #0]
 8001696:	404a      	eors	r2, r1
 8001698:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 800169a:	0021      	movs	r1, r4
 800169c:	187b      	adds	r3, r7, r1
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	021b      	lsls	r3, r3, #8
 80016a2:	b21a      	sxth	r2, r3
 80016a4:	183b      	adds	r3, r7, r0
 80016a6:	881b      	ldrh	r3, [r3, #0]
 80016a8:	031b      	lsls	r3, r3, #12
 80016aa:	b21b      	sxth	r3, r3
 80016ac:	4053      	eors	r3, r2
 80016ae:	b21a      	sxth	r2, r3
 80016b0:	183b      	adds	r3, r7, r0
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	015b      	lsls	r3, r3, #5
 80016b6:	b21b      	sxth	r3, r3
 80016b8:	4053      	eors	r3, r2
 80016ba:	b21a      	sxth	r2, r3
 80016bc:	183b      	adds	r3, r7, r0
 80016be:	2000      	movs	r0, #0
 80016c0:	5e1b      	ldrsh	r3, [r3, r0]
 80016c2:	4053      	eors	r3, r2
 80016c4:	b21a      	sxth	r2, r3
 80016c6:	187b      	adds	r3, r7, r1
 80016c8:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 80016ca:	1cbb      	adds	r3, r7, #2
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	1cba      	adds	r2, r7, #2
 80016d0:	1e59      	subs	r1, r3, #1
 80016d2:	8011      	strh	r1, [r2, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1c9      	bne.n	800166c <calculate_crc+0x24>
    }
    return crc;
 80016d8:	230e      	movs	r3, #14
 80016da:	18fb      	adds	r3, r7, r3
 80016dc:	881b      	ldrh	r3, [r3, #0]
}
 80016de:	0018      	movs	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b005      	add	sp, #20
 80016e4:	bd90      	pop	{r4, r7, pc}
	...

080016e8 <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	785b      	ldrb	r3, [r3, #1]
 80016f4:	b299      	uxth	r1, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	789b      	ldrb	r3, [r3, #2]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	021b      	lsls	r3, r3, #8
 80016fe:	b29a      	uxth	r2, r3
 8001700:	200e      	movs	r0, #14
 8001702:	183b      	adds	r3, r7, r0
 8001704:	188a      	adds	r2, r1, r2
 8001706:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 8001708:	183b      	adds	r3, r7, r0
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	4a40      	ldr	r2, [pc, #256]	; (8001810 <check_for_error+0x128>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d100      	bne.n	8001714 <check_for_error+0x2c>
 8001712:	e06f      	b.n	80017f4 <check_for_error+0x10c>
 8001714:	4a3e      	ldr	r2, [pc, #248]	; (8001810 <check_for_error+0x128>)
 8001716:	4293      	cmp	r3, r2
 8001718:	dd00      	ble.n	800171c <check_for_error+0x34>
 800171a:	e070      	b.n	80017fe <check_for_error+0x116>
 800171c:	4a3d      	ldr	r2, [pc, #244]	; (8001814 <check_for_error+0x12c>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d100      	bne.n	8001724 <check_for_error+0x3c>
 8001722:	e062      	b.n	80017ea <check_for_error+0x102>
 8001724:	4a3b      	ldr	r2, [pc, #236]	; (8001814 <check_for_error+0x12c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	dd00      	ble.n	800172c <check_for_error+0x44>
 800172a:	e068      	b.n	80017fe <check_for_error+0x116>
 800172c:	4a3a      	ldr	r2, [pc, #232]	; (8001818 <check_for_error+0x130>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d056      	beq.n	80017e0 <check_for_error+0xf8>
 8001732:	4a39      	ldr	r2, [pc, #228]	; (8001818 <check_for_error+0x130>)
 8001734:	4293      	cmp	r3, r2
 8001736:	dd00      	ble.n	800173a <check_for_error+0x52>
 8001738:	e061      	b.n	80017fe <check_for_error+0x116>
 800173a:	4a38      	ldr	r2, [pc, #224]	; (800181c <check_for_error+0x134>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d04a      	beq.n	80017d6 <check_for_error+0xee>
 8001740:	4a36      	ldr	r2, [pc, #216]	; (800181c <check_for_error+0x134>)
 8001742:	4293      	cmp	r3, r2
 8001744:	dc5b      	bgt.n	80017fe <check_for_error+0x116>
 8001746:	4a36      	ldr	r2, [pc, #216]	; (8001820 <check_for_error+0x138>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d03f      	beq.n	80017cc <check_for_error+0xe4>
 800174c:	4a34      	ldr	r2, [pc, #208]	; (8001820 <check_for_error+0x138>)
 800174e:	4293      	cmp	r3, r2
 8001750:	dc55      	bgt.n	80017fe <check_for_error+0x116>
 8001752:	4a34      	ldr	r2, [pc, #208]	; (8001824 <check_for_error+0x13c>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d034      	beq.n	80017c2 <check_for_error+0xda>
 8001758:	4a32      	ldr	r2, [pc, #200]	; (8001824 <check_for_error+0x13c>)
 800175a:	4293      	cmp	r3, r2
 800175c:	dc4f      	bgt.n	80017fe <check_for_error+0x116>
 800175e:	4a32      	ldr	r2, [pc, #200]	; (8001828 <check_for_error+0x140>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d029      	beq.n	80017b8 <check_for_error+0xd0>
 8001764:	4a30      	ldr	r2, [pc, #192]	; (8001828 <check_for_error+0x140>)
 8001766:	4293      	cmp	r3, r2
 8001768:	dc49      	bgt.n	80017fe <check_for_error+0x116>
 800176a:	4a30      	ldr	r2, [pc, #192]	; (800182c <check_for_error+0x144>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d01e      	beq.n	80017ae <check_for_error+0xc6>
 8001770:	4a2e      	ldr	r2, [pc, #184]	; (800182c <check_for_error+0x144>)
 8001772:	4293      	cmp	r3, r2
 8001774:	dc43      	bgt.n	80017fe <check_for_error+0x116>
 8001776:	2222      	movs	r2, #34	; 0x22
 8001778:	32ff      	adds	r2, #255	; 0xff
 800177a:	4293      	cmp	r3, r2
 800177c:	d012      	beq.n	80017a4 <check_for_error+0xbc>
 800177e:	2291      	movs	r2, #145	; 0x91
 8001780:	0052      	lsls	r2, r2, #1
 8001782:	4293      	cmp	r3, r2
 8001784:	da3b      	bge.n	80017fe <check_for_error+0x116>
 8001786:	2b01      	cmp	r3, #1
 8001788:	d002      	beq.n	8001790 <check_for_error+0xa8>
 800178a:	2b11      	cmp	r3, #17
 800178c:	d005      	beq.n	800179a <check_for_error+0xb2>
 800178e:	e036      	b.n	80017fe <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 8001790:	4b27      	ldr	r3, [pc, #156]	; (8001830 <check_for_error+0x148>)
 8001792:	0018      	movs	r0, r3
 8001794:	f7ff f98c 	bl	8000ab0 <send_debug_logs>
            break;
 8001798:	e036      	b.n	8001808 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 800179a:	4b26      	ldr	r3, [pc, #152]	; (8001834 <check_for_error+0x14c>)
 800179c:	0018      	movs	r0, r3
 800179e:	f7ff f987 	bl	8000ab0 <send_debug_logs>
            break;
 80017a2:	e031      	b.n	8001808 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 80017a4:	4b24      	ldr	r3, [pc, #144]	; (8001838 <check_for_error+0x150>)
 80017a6:	0018      	movs	r0, r3
 80017a8:	f7ff f982 	bl	8000ab0 <send_debug_logs>
            break;
 80017ac:	e02c      	b.n	8001808 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 80017ae:	4b23      	ldr	r3, [pc, #140]	; (800183c <check_for_error+0x154>)
 80017b0:	0018      	movs	r0, r3
 80017b2:	f7ff f97d 	bl	8000ab0 <send_debug_logs>
            break;
 80017b6:	e027      	b.n	8001808 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 80017b8:	4b21      	ldr	r3, [pc, #132]	; (8001840 <check_for_error+0x158>)
 80017ba:	0018      	movs	r0, r3
 80017bc:	f7ff f978 	bl	8000ab0 <send_debug_logs>
            break;
 80017c0:	e022      	b.n	8001808 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 80017c2:	4b20      	ldr	r3, [pc, #128]	; (8001844 <check_for_error+0x15c>)
 80017c4:	0018      	movs	r0, r3
 80017c6:	f7ff f973 	bl	8000ab0 <send_debug_logs>
            break;
 80017ca:	e01d      	b.n	8001808 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 80017cc:	4b1e      	ldr	r3, [pc, #120]	; (8001848 <check_for_error+0x160>)
 80017ce:	0018      	movs	r0, r3
 80017d0:	f7ff f96e 	bl	8000ab0 <send_debug_logs>
            break;
 80017d4:	e018      	b.n	8001808 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 80017d6:	4b1d      	ldr	r3, [pc, #116]	; (800184c <check_for_error+0x164>)
 80017d8:	0018      	movs	r0, r3
 80017da:	f7ff f969 	bl	8000ab0 <send_debug_logs>
            break;
 80017de:	e013      	b.n	8001808 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 80017e0:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <check_for_error+0x168>)
 80017e2:	0018      	movs	r0, r3
 80017e4:	f7ff f964 	bl	8000ab0 <send_debug_logs>
            break;
 80017e8:	e00e      	b.n	8001808 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 80017ea:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <check_for_error+0x16c>)
 80017ec:	0018      	movs	r0, r3
 80017ee:	f7ff f95f 	bl	8000ab0 <send_debug_logs>
            break;
 80017f2:	e009      	b.n	8001808 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 80017f4:	4b18      	ldr	r3, [pc, #96]	; (8001858 <check_for_error+0x170>)
 80017f6:	0018      	movs	r0, r3
 80017f8:	f7ff f95a 	bl	8000ab0 <send_debug_logs>
            break;
 80017fc:	e004      	b.n	8001808 <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 80017fe:	4b17      	ldr	r3, [pc, #92]	; (800185c <check_for_error+0x174>)
 8001800:	0018      	movs	r0, r3
 8001802:	f7ff f955 	bl	8000ab0 <send_debug_logs>
            break;
 8001806:	46c0      	nop			; (mov r8, r8)
    }
}
 8001808:	46c0      	nop			; (mov r8, r8)
 800180a:	46bd      	mov	sp, r7
 800180c:	b004      	add	sp, #16
 800180e:	bd80      	pop	{r7, pc}
 8001810:	00004601 	.word	0x00004601
 8001814:	00004501 	.word	0x00004501
 8001818:	00003501 	.word	0x00003501
 800181c:	00002601 	.word	0x00002601
 8001820:	00002511 	.word	0x00002511
 8001824:	00002501 	.word	0x00002501
 8001828:	00000611 	.word	0x00000611
 800182c:	00000601 	.word	0x00000601
 8001830:	08004fe8 	.word	0x08004fe8
 8001834:	08005034 	.word	0x08005034
 8001838:	08005098 	.word	0x08005098
 800183c:	080050d0 	.word	0x080050d0
 8001840:	08005174 	.word	0x08005174
 8001844:	080051dc 	.word	0x080051dc
 8001848:	0800523c 	.word	0x0800523c
 800184c:	080052c8 	.word	0x080052c8
 8001850:	08005328 	.word	0x08005328
 8001854:	080053d4 	.word	0x080053d4
 8001858:	08005420 	.word	0x08005420
 800185c:	08005468 	.word	0x08005468

08001860 <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 8001860:	b5b0      	push	{r4, r5, r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 800186a:	230f      	movs	r3, #15
 800186c:	18fb      	adds	r3, r7, r3
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 8001872:	2316      	movs	r3, #22
 8001874:	18fb      	adds	r3, r7, r3
 8001876:	2200      	movs	r2, #0
 8001878:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 800187a:	f7ff f995 	bl	8000ba8 <get_systick>
 800187e:	0003      	movs	r3, r0
 8001880:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 8001882:	2315      	movs	r3, #21
 8001884:	18fb      	adds	r3, r7, r3
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 800188a:	e054      	b.n	8001936 <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 800188c:	4a34      	ldr	r2, [pc, #208]	; (8001960 <receive_astronode_answer+0x100>)
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	0011      	movs	r1, r2
 8001892:	0018      	movs	r0, r3
 8001894:	f7ff f990 	bl	8000bb8 <is_systick_timeout_over>
 8001898:	1e03      	subs	r3, r0, #0
 800189a:	d005      	beq.n	80018a8 <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 800189c:	4b31      	ldr	r3, [pc, #196]	; (8001964 <receive_astronode_answer+0x104>)
 800189e:	0018      	movs	r0, r3
 80018a0:	f7ff f906 	bl	8000ab0 <send_debug_logs>
            return RS_FAILURE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	e057      	b.n	8001958 <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 80018a8:	250f      	movs	r5, #15
 80018aa:	197b      	adds	r3, r7, r5
 80018ac:	0018      	movs	r0, r3
 80018ae:	f7ff f967 	bl	8000b80 <is_astronode_character_received>
 80018b2:	0003      	movs	r3, r0
 80018b4:	0019      	movs	r1, r3
 80018b6:	2016      	movs	r0, #22
 80018b8:	183b      	adds	r3, r7, r0
 80018ba:	183a      	adds	r2, r7, r0
 80018bc:	8812      	ldrh	r2, [r2, #0]
 80018be:	801a      	strh	r2, [r3, #0]
 80018c0:	2415      	movs	r4, #21
 80018c2:	193b      	adds	r3, r7, r4
 80018c4:	193a      	adds	r2, r7, r4
 80018c6:	7812      	ldrb	r2, [r2, #0]
 80018c8:	701a      	strb	r2, [r3, #0]
 80018ca:	2900      	cmp	r1, #0
 80018cc:	d033      	beq.n	8001936 <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 80018ce:	197b      	adds	r3, r7, r5
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d105      	bne.n	80018e2 <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 80018d6:	193b      	adds	r3, r7, r4
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
                length = 0;
 80018dc:	183b      	adds	r3, r7, r0
 80018de:	2200      	movs	r2, #0
 80018e0:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 80018e2:	2116      	movs	r1, #22
 80018e4:	187b      	adds	r3, r7, r1
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	18d3      	adds	r3, r2, r3
 80018ec:	220f      	movs	r2, #15
 80018ee:	18ba      	adds	r2, r7, r2
 80018f0:	7812      	ldrb	r2, [r2, #0]
 80018f2:	701a      	strb	r2, [r3, #0]
            length++;
 80018f4:	187b      	adds	r3, r7, r1
 80018f6:	881a      	ldrh	r2, [r3, #0]
 80018f8:	187b      	adds	r3, r7, r1
 80018fa:	3201      	adds	r2, #1
 80018fc:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 80018fe:	187b      	adds	r3, r7, r1
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	2bb2      	cmp	r3, #178	; 0xb2
 8001904:	d905      	bls.n	8001912 <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 8001906:	4b18      	ldr	r3, [pc, #96]	; (8001968 <receive_astronode_answer+0x108>)
 8001908:	0018      	movs	r0, r3
 800190a:	f7ff f8d1 	bl	8000ab0 <send_debug_logs>
                return RS_FAILURE;
 800190e:	2300      	movs	r3, #0
 8001910:	e022      	b.n	8001958 <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 8001912:	230f      	movs	r3, #15
 8001914:	18fb      	adds	r3, r7, r3
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b03      	cmp	r3, #3
 800191a:	d10c      	bne.n	8001936 <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 800191c:	2216      	movs	r2, #22
 800191e:	18bb      	adds	r3, r7, r2
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d907      	bls.n	8001936 <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	18ba      	adds	r2, r7, r2
 800192a:	8812      	ldrh	r2, [r2, #0]
 800192c:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 800192e:	2315      	movs	r3, #21
 8001930:	18fb      	adds	r3, r7, r3
 8001932:	2201      	movs	r2, #1
 8001934:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 8001936:	2315      	movs	r3, #21
 8001938:	18fb      	adds	r3, r7, r3
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2201      	movs	r2, #1
 800193e:	4053      	eors	r3, r2
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1a2      	bne.n	800188c <receive_astronode_answer+0x2c>
                }
            }
        }
    }

    send_debug_logs("Message received from the Astronode <-- ");
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <receive_astronode_answer+0x10c>)
 8001948:	0018      	movs	r0, r3
 800194a:	f7ff f8b1 	bl	8000ab0 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	0018      	movs	r0, r3
 8001952:	f7ff f8ad 	bl	8000ab0 <send_debug_logs>

    return RS_SUCCESS;
 8001956:	2301      	movs	r3, #1
}
 8001958:	0018      	movs	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	b006      	add	sp, #24
 800195e:	bdb0      	pop	{r4, r5, r7, pc}
 8001960:	000005dc 	.word	0x000005dc
 8001964:	0800548c 	.word	0x0800548c
 8001968:	080054b0 	.word	0x080054b0
 800196c:	080054fc 	.word	0x080054fc

08001970 <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	0002      	movs	r2, r0
 8001978:	6039      	str	r1, [r7, #0]
 800197a:	1dfb      	adds	r3, r7, #7
 800197c:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 800197e:	1dfb      	adds	r3, r7, #7
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	091b      	lsrs	r3, r3, #4
 8001984:	b2db      	uxtb	r3, r3
 8001986:	001a      	movs	r2, r3
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <uint8_to_ascii_buffer+0x3c>)
 800198a:	5c9a      	ldrb	r2, [r3, r2]
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 8001990:	1dfb      	adds	r3, r7, #7
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	220f      	movs	r2, #15
 8001996:	401a      	ands	r2, r3
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	3301      	adds	r3, #1
 800199c:	4903      	ldr	r1, [pc, #12]	; (80019ac <uint8_to_ascii_buffer+0x3c>)
 800199e:	5c8a      	ldrb	r2, [r1, r2]
 80019a0:	701a      	strb	r2, [r3, #0]
}
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	46bd      	mov	sp, r7
 80019a6:	b002      	add	sp, #8
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	08005588 	.word	0x08005588

080019b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019b6:	1dfb      	adds	r3, r7, #7
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019bc:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <HAL_Init+0x3c>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <HAL_Init+0x3c>)
 80019c2:	2180      	movs	r1, #128	; 0x80
 80019c4:	0049      	lsls	r1, r1, #1
 80019c6:	430a      	orrs	r2, r1
 80019c8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019ca:	2000      	movs	r0, #0
 80019cc:	f000 f810 	bl	80019f0 <HAL_InitTick>
 80019d0:	1e03      	subs	r3, r0, #0
 80019d2:	d003      	beq.n	80019dc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80019d4:	1dfb      	adds	r3, r7, #7
 80019d6:	2201      	movs	r2, #1
 80019d8:	701a      	strb	r2, [r3, #0]
 80019da:	e001      	b.n	80019e0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80019dc:	f7ff f916 	bl	8000c0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019e0:	1dfb      	adds	r3, r7, #7
 80019e2:	781b      	ldrb	r3, [r3, #0]
}
 80019e4:	0018      	movs	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	b002      	add	sp, #8
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40022000 	.word	0x40022000

080019f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f0:	b590      	push	{r4, r7, lr}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019f8:	230f      	movs	r3, #15
 80019fa:	18fb      	adds	r3, r7, r3
 80019fc:	2200      	movs	r2, #0
 80019fe:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001a00:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <HAL_InitTick+0x88>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d02b      	beq.n	8001a60 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001a08:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <HAL_InitTick+0x8c>)
 8001a0a:	681c      	ldr	r4, [r3, #0]
 8001a0c:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <HAL_InitTick+0x88>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	0019      	movs	r1, r3
 8001a12:	23fa      	movs	r3, #250	; 0xfa
 8001a14:	0098      	lsls	r0, r3, #2
 8001a16:	f7fe fb7d 	bl	8000114 <__udivsi3>
 8001a1a:	0003      	movs	r3, r0
 8001a1c:	0019      	movs	r1, r3
 8001a1e:	0020      	movs	r0, r4
 8001a20:	f7fe fb78 	bl	8000114 <__udivsi3>
 8001a24:	0003      	movs	r3, r0
 8001a26:	0018      	movs	r0, r3
 8001a28:	f000 f913 	bl	8001c52 <HAL_SYSTICK_Config>
 8001a2c:	1e03      	subs	r3, r0, #0
 8001a2e:	d112      	bne.n	8001a56 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d80a      	bhi.n	8001a4c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	2301      	movs	r3, #1
 8001a3a:	425b      	negs	r3, r3
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f000 f8f2 	bl	8001c28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a44:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <HAL_InitTick+0x90>)
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	e00d      	b.n	8001a68 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001a4c:	230f      	movs	r3, #15
 8001a4e:	18fb      	adds	r3, r7, r3
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]
 8001a54:	e008      	b.n	8001a68 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a56:	230f      	movs	r3, #15
 8001a58:	18fb      	adds	r3, r7, r3
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	701a      	strb	r2, [r3, #0]
 8001a5e:	e003      	b.n	8001a68 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a60:	230f      	movs	r3, #15
 8001a62:	18fb      	adds	r3, r7, r3
 8001a64:	2201      	movs	r2, #1
 8001a66:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001a68:	230f      	movs	r3, #15
 8001a6a:	18fb      	adds	r3, r7, r3
 8001a6c:	781b      	ldrb	r3, [r3, #0]
}
 8001a6e:	0018      	movs	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	b005      	add	sp, #20
 8001a74:	bd90      	pop	{r4, r7, pc}
 8001a76:	46c0      	nop			; (mov r8, r8)
 8001a78:	2000000c 	.word	0x2000000c
 8001a7c:	20000004 	.word	0x20000004
 8001a80:	20000008 	.word	0x20000008

08001a84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a88:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <HAL_IncTick+0x1c>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	001a      	movs	r2, r3
 8001a8e:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <HAL_IncTick+0x20>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	18d2      	adds	r2, r2, r3
 8001a94:	4b03      	ldr	r3, [pc, #12]	; (8001aa4 <HAL_IncTick+0x20>)
 8001a96:	601a      	str	r2, [r3, #0]
}
 8001a98:	46c0      	nop			; (mov r8, r8)
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	2000000c 	.word	0x2000000c
 8001aa4:	20000240 	.word	0x20000240

08001aa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8001aac:	4b02      	ldr	r3, [pc, #8]	; (8001ab8 <HAL_GetTick+0x10>)
 8001aae:	681b      	ldr	r3, [r3, #0]
}
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	46c0      	nop			; (mov r8, r8)
 8001ab8:	20000240 	.word	0x20000240

08001abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ac4:	f7ff fff0 	bl	8001aa8 <HAL_GetTick>
 8001ac8:	0003      	movs	r3, r0
 8001aca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	d005      	beq.n	8001ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <HAL_Delay+0x44>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	001a      	movs	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	189b      	adds	r3, r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	f7ff ffe0 	bl	8001aa8 <HAL_GetTick>
 8001ae8:	0002      	movs	r2, r0
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d8f7      	bhi.n	8001ae4 <HAL_Delay+0x28>
  {
  }
}
 8001af4:	46c0      	nop			; (mov r8, r8)
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	46bd      	mov	sp, r7
 8001afa:	b004      	add	sp, #16
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	2000000c 	.word	0x2000000c

08001b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b04:	b590      	push	{r4, r7, lr}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	0002      	movs	r2, r0
 8001b0c:	6039      	str	r1, [r7, #0]
 8001b0e:	1dfb      	adds	r3, r7, #7
 8001b10:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b12:	1dfb      	adds	r3, r7, #7
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b7f      	cmp	r3, #127	; 0x7f
 8001b18:	d828      	bhi.n	8001b6c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b1a:	4a2f      	ldr	r2, [pc, #188]	; (8001bd8 <__NVIC_SetPriority+0xd4>)
 8001b1c:	1dfb      	adds	r3, r7, #7
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	b25b      	sxtb	r3, r3
 8001b22:	089b      	lsrs	r3, r3, #2
 8001b24:	33c0      	adds	r3, #192	; 0xc0
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	589b      	ldr	r3, [r3, r2]
 8001b2a:	1dfa      	adds	r2, r7, #7
 8001b2c:	7812      	ldrb	r2, [r2, #0]
 8001b2e:	0011      	movs	r1, r2
 8001b30:	2203      	movs	r2, #3
 8001b32:	400a      	ands	r2, r1
 8001b34:	00d2      	lsls	r2, r2, #3
 8001b36:	21ff      	movs	r1, #255	; 0xff
 8001b38:	4091      	lsls	r1, r2
 8001b3a:	000a      	movs	r2, r1
 8001b3c:	43d2      	mvns	r2, r2
 8001b3e:	401a      	ands	r2, r3
 8001b40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	019b      	lsls	r3, r3, #6
 8001b46:	22ff      	movs	r2, #255	; 0xff
 8001b48:	401a      	ands	r2, r3
 8001b4a:	1dfb      	adds	r3, r7, #7
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	0018      	movs	r0, r3
 8001b50:	2303      	movs	r3, #3
 8001b52:	4003      	ands	r3, r0
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b58:	481f      	ldr	r0, [pc, #124]	; (8001bd8 <__NVIC_SetPriority+0xd4>)
 8001b5a:	1dfb      	adds	r3, r7, #7
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	b25b      	sxtb	r3, r3
 8001b60:	089b      	lsrs	r3, r3, #2
 8001b62:	430a      	orrs	r2, r1
 8001b64:	33c0      	adds	r3, #192	; 0xc0
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b6a:	e031      	b.n	8001bd0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b6c:	4a1b      	ldr	r2, [pc, #108]	; (8001bdc <__NVIC_SetPriority+0xd8>)
 8001b6e:	1dfb      	adds	r3, r7, #7
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	0019      	movs	r1, r3
 8001b74:	230f      	movs	r3, #15
 8001b76:	400b      	ands	r3, r1
 8001b78:	3b08      	subs	r3, #8
 8001b7a:	089b      	lsrs	r3, r3, #2
 8001b7c:	3306      	adds	r3, #6
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	18d3      	adds	r3, r2, r3
 8001b82:	3304      	adds	r3, #4
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	1dfa      	adds	r2, r7, #7
 8001b88:	7812      	ldrb	r2, [r2, #0]
 8001b8a:	0011      	movs	r1, r2
 8001b8c:	2203      	movs	r2, #3
 8001b8e:	400a      	ands	r2, r1
 8001b90:	00d2      	lsls	r2, r2, #3
 8001b92:	21ff      	movs	r1, #255	; 0xff
 8001b94:	4091      	lsls	r1, r2
 8001b96:	000a      	movs	r2, r1
 8001b98:	43d2      	mvns	r2, r2
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	019b      	lsls	r3, r3, #6
 8001ba2:	22ff      	movs	r2, #255	; 0xff
 8001ba4:	401a      	ands	r2, r3
 8001ba6:	1dfb      	adds	r3, r7, #7
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	0018      	movs	r0, r3
 8001bac:	2303      	movs	r3, #3
 8001bae:	4003      	ands	r3, r0
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bb4:	4809      	ldr	r0, [pc, #36]	; (8001bdc <__NVIC_SetPriority+0xd8>)
 8001bb6:	1dfb      	adds	r3, r7, #7
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	001c      	movs	r4, r3
 8001bbc:	230f      	movs	r3, #15
 8001bbe:	4023      	ands	r3, r4
 8001bc0:	3b08      	subs	r3, #8
 8001bc2:	089b      	lsrs	r3, r3, #2
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	3306      	adds	r3, #6
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	18c3      	adds	r3, r0, r3
 8001bcc:	3304      	adds	r3, #4
 8001bce:	601a      	str	r2, [r3, #0]
}
 8001bd0:	46c0      	nop			; (mov r8, r8)
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	b003      	add	sp, #12
 8001bd6:	bd90      	pop	{r4, r7, pc}
 8001bd8:	e000e100 	.word	0xe000e100
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	1e5a      	subs	r2, r3, #1
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	045b      	lsls	r3, r3, #17
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d301      	bcc.n	8001bf8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e010      	b.n	8001c1a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bf8:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <SysTick_Config+0x44>)
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	3a01      	subs	r2, #1
 8001bfe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c00:	2301      	movs	r3, #1
 8001c02:	425b      	negs	r3, r3
 8001c04:	2103      	movs	r1, #3
 8001c06:	0018      	movs	r0, r3
 8001c08:	f7ff ff7c 	bl	8001b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <SysTick_Config+0x44>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c12:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <SysTick_Config+0x44>)
 8001c14:	2207      	movs	r2, #7
 8001c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	b002      	add	sp, #8
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	e000e010 	.word	0xe000e010

08001c28 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
 8001c32:	210f      	movs	r1, #15
 8001c34:	187b      	adds	r3, r7, r1
 8001c36:	1c02      	adds	r2, r0, #0
 8001c38:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	187b      	adds	r3, r7, r1
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	b25b      	sxtb	r3, r3
 8001c42:	0011      	movs	r1, r2
 8001c44:	0018      	movs	r0, r3
 8001c46:	f7ff ff5d 	bl	8001b04 <__NVIC_SetPriority>
}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	b004      	add	sp, #16
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f7ff ffbf 	bl	8001be0 <SysTick_Config>
 8001c62:	0003      	movs	r3, r0
}
 8001c64:	0018      	movs	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	b002      	add	sp, #8
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c7a:	e147      	b.n	8001f0c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2101      	movs	r1, #1
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	4091      	lsls	r1, r2
 8001c86:	000a      	movs	r2, r1
 8001c88:	4013      	ands	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d100      	bne.n	8001c94 <HAL_GPIO_Init+0x28>
 8001c92:	e138      	b.n	8001f06 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2203      	movs	r2, #3
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d005      	beq.n	8001cac <HAL_GPIO_Init+0x40>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d130      	bne.n	8001d0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	2203      	movs	r2, #3
 8001cb8:	409a      	lsls	r2, r3
 8001cba:	0013      	movs	r3, r2
 8001cbc:	43da      	mvns	r2, r3
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	68da      	ldr	r2, [r3, #12]
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	409a      	lsls	r2, r3
 8001cce:	0013      	movs	r3, r2
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	409a      	lsls	r2, r3
 8001ce8:	0013      	movs	r3, r2
 8001cea:	43da      	mvns	r2, r3
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	091b      	lsrs	r3, r3, #4
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	409a      	lsls	r2, r3
 8001d00:	0013      	movs	r3, r2
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2203      	movs	r2, #3
 8001d14:	4013      	ands	r3, r2
 8001d16:	2b03      	cmp	r3, #3
 8001d18:	d017      	beq.n	8001d4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	2203      	movs	r2, #3
 8001d26:	409a      	lsls	r2, r3
 8001d28:	0013      	movs	r3, r2
 8001d2a:	43da      	mvns	r2, r3
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	409a      	lsls	r2, r3
 8001d3c:	0013      	movs	r3, r2
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2203      	movs	r2, #3
 8001d50:	4013      	ands	r3, r2
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d123      	bne.n	8001d9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	08da      	lsrs	r2, r3, #3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3208      	adds	r2, #8
 8001d5e:	0092      	lsls	r2, r2, #2
 8001d60:	58d3      	ldr	r3, [r2, r3]
 8001d62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	2207      	movs	r2, #7
 8001d68:	4013      	ands	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	220f      	movs	r2, #15
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	0013      	movs	r3, r2
 8001d72:	43da      	mvns	r2, r3
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	4013      	ands	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	691a      	ldr	r2, [r3, #16]
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	2107      	movs	r1, #7
 8001d82:	400b      	ands	r3, r1
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	409a      	lsls	r2, r3
 8001d88:	0013      	movs	r3, r2
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	08da      	lsrs	r2, r3, #3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3208      	adds	r2, #8
 8001d98:	0092      	lsls	r2, r2, #2
 8001d9a:	6939      	ldr	r1, [r7, #16]
 8001d9c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	2203      	movs	r2, #3
 8001daa:	409a      	lsls	r2, r3
 8001dac:	0013      	movs	r3, r2
 8001dae:	43da      	mvns	r2, r3
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	4013      	ands	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2203      	movs	r2, #3
 8001dbc:	401a      	ands	r2, r3
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	409a      	lsls	r2, r3
 8001dc4:	0013      	movs	r3, r2
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	23c0      	movs	r3, #192	; 0xc0
 8001dd8:	029b      	lsls	r3, r3, #10
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d100      	bne.n	8001de0 <HAL_GPIO_Init+0x174>
 8001dde:	e092      	b.n	8001f06 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001de0:	4a50      	ldr	r2, [pc, #320]	; (8001f24 <HAL_GPIO_Init+0x2b8>)
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	089b      	lsrs	r3, r3, #2
 8001de6:	3318      	adds	r3, #24
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	589b      	ldr	r3, [r3, r2]
 8001dec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	2203      	movs	r2, #3
 8001df2:	4013      	ands	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	220f      	movs	r2, #15
 8001df8:	409a      	lsls	r2, r3
 8001dfa:	0013      	movs	r3, r2
 8001dfc:	43da      	mvns	r2, r3
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	23a0      	movs	r3, #160	; 0xa0
 8001e08:	05db      	lsls	r3, r3, #23
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d013      	beq.n	8001e36 <HAL_GPIO_Init+0x1ca>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a45      	ldr	r2, [pc, #276]	; (8001f28 <HAL_GPIO_Init+0x2bc>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d00d      	beq.n	8001e32 <HAL_GPIO_Init+0x1c6>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a44      	ldr	r2, [pc, #272]	; (8001f2c <HAL_GPIO_Init+0x2c0>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d007      	beq.n	8001e2e <HAL_GPIO_Init+0x1c2>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a43      	ldr	r2, [pc, #268]	; (8001f30 <HAL_GPIO_Init+0x2c4>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d101      	bne.n	8001e2a <HAL_GPIO_Init+0x1be>
 8001e26:	2303      	movs	r3, #3
 8001e28:	e006      	b.n	8001e38 <HAL_GPIO_Init+0x1cc>
 8001e2a:	2305      	movs	r3, #5
 8001e2c:	e004      	b.n	8001e38 <HAL_GPIO_Init+0x1cc>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e002      	b.n	8001e38 <HAL_GPIO_Init+0x1cc>
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <HAL_GPIO_Init+0x1cc>
 8001e36:	2300      	movs	r3, #0
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	2103      	movs	r1, #3
 8001e3c:	400a      	ands	r2, r1
 8001e3e:	00d2      	lsls	r2, r2, #3
 8001e40:	4093      	lsls	r3, r2
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001e48:	4936      	ldr	r1, [pc, #216]	; (8001f24 <HAL_GPIO_Init+0x2b8>)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	089b      	lsrs	r3, r3, #2
 8001e4e:	3318      	adds	r3, #24
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e56:	4b33      	ldr	r3, [pc, #204]	; (8001f24 <HAL_GPIO_Init+0x2b8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	43da      	mvns	r2, r3
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4013      	ands	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	2380      	movs	r3, #128	; 0x80
 8001e6c:	035b      	lsls	r3, r3, #13
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e7a:	4b2a      	ldr	r3, [pc, #168]	; (8001f24 <HAL_GPIO_Init+0x2b8>)
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001e80:	4b28      	ldr	r3, [pc, #160]	; (8001f24 <HAL_GPIO_Init+0x2b8>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	43da      	mvns	r2, r3
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	2380      	movs	r3, #128	; 0x80
 8001e96:	039b      	lsls	r3, r3, #14
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d003      	beq.n	8001ea4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ea4:	4b1f      	ldr	r3, [pc, #124]	; (8001f24 <HAL_GPIO_Init+0x2b8>)
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001eaa:	4a1e      	ldr	r2, [pc, #120]	; (8001f24 <HAL_GPIO_Init+0x2b8>)
 8001eac:	2384      	movs	r3, #132	; 0x84
 8001eae:	58d3      	ldr	r3, [r2, r3]
 8001eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	43da      	mvns	r2, r3
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	2380      	movs	r3, #128	; 0x80
 8001ec2:	029b      	lsls	r3, r3, #10
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d003      	beq.n	8001ed0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ed0:	4914      	ldr	r1, [pc, #80]	; (8001f24 <HAL_GPIO_Init+0x2b8>)
 8001ed2:	2284      	movs	r2, #132	; 0x84
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001ed8:	4a12      	ldr	r2, [pc, #72]	; (8001f24 <HAL_GPIO_Init+0x2b8>)
 8001eda:	2380      	movs	r3, #128	; 0x80
 8001edc:	58d3      	ldr	r3, [r2, r3]
 8001ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	43da      	mvns	r2, r3
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	025b      	lsls	r3, r3, #9
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001efe:	4909      	ldr	r1, [pc, #36]	; (8001f24 <HAL_GPIO_Init+0x2b8>)
 8001f00:	2280      	movs	r2, #128	; 0x80
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	40da      	lsrs	r2, r3
 8001f14:	1e13      	subs	r3, r2, #0
 8001f16:	d000      	beq.n	8001f1a <HAL_GPIO_Init+0x2ae>
 8001f18:	e6b0      	b.n	8001c7c <HAL_GPIO_Init+0x10>
  }
}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	46c0      	nop			; (mov r8, r8)
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	b006      	add	sp, #24
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40021800 	.word	0x40021800
 8001f28:	50000400 	.word	0x50000400
 8001f2c:	50000800 	.word	0x50000800
 8001f30:	50000c00 	.word	0x50000c00

08001f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	0008      	movs	r0, r1
 8001f3e:	0011      	movs	r1, r2
 8001f40:	1cbb      	adds	r3, r7, #2
 8001f42:	1c02      	adds	r2, r0, #0
 8001f44:	801a      	strh	r2, [r3, #0]
 8001f46:	1c7b      	adds	r3, r7, #1
 8001f48:	1c0a      	adds	r2, r1, #0
 8001f4a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f4c:	1c7b      	adds	r3, r7, #1
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d004      	beq.n	8001f5e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f54:	1cbb      	adds	r3, r7, #2
 8001f56:	881a      	ldrh	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f5c:	e003      	b.n	8001f66 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f5e:	1cbb      	adds	r3, r7, #2
 8001f60:	881a      	ldrh	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f66:	46c0      	nop			; (mov r8, r8)
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	b002      	add	sp, #8
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e082      	b.n	8002088 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2241      	movs	r2, #65	; 0x41
 8001f86:	5c9b      	ldrb	r3, [r3, r2]
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d107      	bne.n	8001f9e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2240      	movs	r2, #64	; 0x40
 8001f92:	2100      	movs	r1, #0
 8001f94:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	0018      	movs	r0, r3
 8001f9a:	f7fe fe5b 	bl	8000c54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2241      	movs	r2, #65	; 0x41
 8001fa2:	2124      	movs	r1, #36	; 0x24
 8001fa4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	438a      	bics	r2, r1
 8001fb4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4934      	ldr	r1, [pc, #208]	; (8002090 <HAL_I2C_Init+0x120>)
 8001fc0:	400a      	ands	r2, r1
 8001fc2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4931      	ldr	r1, [pc, #196]	; (8002094 <HAL_I2C_Init+0x124>)
 8001fd0:	400a      	ands	r2, r1
 8001fd2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d108      	bne.n	8001fee <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2180      	movs	r1, #128	; 0x80
 8001fe6:	0209      	lsls	r1, r1, #8
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	e007      	b.n	8001ffe <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689a      	ldr	r2, [r3, #8]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2184      	movs	r1, #132	; 0x84
 8001ff8:	0209      	lsls	r1, r1, #8
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	2b02      	cmp	r3, #2
 8002004:	d104      	bne.n	8002010 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2280      	movs	r2, #128	; 0x80
 800200c:	0112      	lsls	r2, r2, #4
 800200e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	491f      	ldr	r1, [pc, #124]	; (8002098 <HAL_I2C_Init+0x128>)
 800201c:	430a      	orrs	r2, r1
 800201e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	491a      	ldr	r1, [pc, #104]	; (8002094 <HAL_I2C_Init+0x124>)
 800202c:	400a      	ands	r2, r1
 800202e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691a      	ldr	r2, [r3, #16]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	431a      	orrs	r2, r3
 800203a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69d9      	ldr	r1, [r3, #28]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a1a      	ldr	r2, [r3, #32]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	430a      	orrs	r2, r1
 8002058:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2101      	movs	r1, #1
 8002066:	430a      	orrs	r2, r1
 8002068:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2241      	movs	r2, #65	; 0x41
 8002074:	2120      	movs	r1, #32
 8002076:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2242      	movs	r2, #66	; 0x42
 8002082:	2100      	movs	r1, #0
 8002084:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	0018      	movs	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	b002      	add	sp, #8
 800208e:	bd80      	pop	{r7, pc}
 8002090:	f0ffffff 	.word	0xf0ffffff
 8002094:	ffff7fff 	.word	0xffff7fff
 8002098:	02008000 	.word	0x02008000

0800209c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2241      	movs	r2, #65	; 0x41
 80020aa:	5c9b      	ldrb	r3, [r3, r2]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b20      	cmp	r3, #32
 80020b0:	d138      	bne.n	8002124 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2240      	movs	r2, #64	; 0x40
 80020b6:	5c9b      	ldrb	r3, [r3, r2]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d101      	bne.n	80020c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020bc:	2302      	movs	r3, #2
 80020be:	e032      	b.n	8002126 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2240      	movs	r2, #64	; 0x40
 80020c4:	2101      	movs	r1, #1
 80020c6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2241      	movs	r2, #65	; 0x41
 80020cc:	2124      	movs	r1, #36	; 0x24
 80020ce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2101      	movs	r1, #1
 80020dc:	438a      	bics	r2, r1
 80020de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4911      	ldr	r1, [pc, #68]	; (8002130 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80020ec:	400a      	ands	r2, r1
 80020ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6819      	ldr	r1, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2101      	movs	r1, #1
 800210c:	430a      	orrs	r2, r1
 800210e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2241      	movs	r2, #65	; 0x41
 8002114:	2120      	movs	r1, #32
 8002116:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2240      	movs	r2, #64	; 0x40
 800211c:	2100      	movs	r1, #0
 800211e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	e000      	b.n	8002126 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002124:	2302      	movs	r3, #2
  }
}
 8002126:	0018      	movs	r0, r3
 8002128:	46bd      	mov	sp, r7
 800212a:	b002      	add	sp, #8
 800212c:	bd80      	pop	{r7, pc}
 800212e:	46c0      	nop			; (mov r8, r8)
 8002130:	ffffefff 	.word	0xffffefff

08002134 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2241      	movs	r2, #65	; 0x41
 8002142:	5c9b      	ldrb	r3, [r3, r2]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b20      	cmp	r3, #32
 8002148:	d139      	bne.n	80021be <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2240      	movs	r2, #64	; 0x40
 800214e:	5c9b      	ldrb	r3, [r3, r2]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d101      	bne.n	8002158 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002154:	2302      	movs	r3, #2
 8002156:	e033      	b.n	80021c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2240      	movs	r2, #64	; 0x40
 800215c:	2101      	movs	r1, #1
 800215e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2241      	movs	r2, #65	; 0x41
 8002164:	2124      	movs	r1, #36	; 0x24
 8002166:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2101      	movs	r1, #1
 8002174:	438a      	bics	r2, r1
 8002176:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4a11      	ldr	r2, [pc, #68]	; (80021c8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002184:	4013      	ands	r3, r2
 8002186:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	021b      	lsls	r3, r3, #8
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	4313      	orrs	r3, r2
 8002190:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2101      	movs	r1, #1
 80021a6:	430a      	orrs	r2, r1
 80021a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2241      	movs	r2, #65	; 0x41
 80021ae:	2120      	movs	r1, #32
 80021b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2240      	movs	r2, #64	; 0x40
 80021b6:	2100      	movs	r1, #0
 80021b8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80021ba:	2300      	movs	r3, #0
 80021bc:	e000      	b.n	80021c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021be:	2302      	movs	r3, #2
  }
}
 80021c0:	0018      	movs	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	b004      	add	sp, #16
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	fffff0ff 	.word	0xfffff0ff

080021cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80021d4:	4b19      	ldr	r3, [pc, #100]	; (800223c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a19      	ldr	r2, [pc, #100]	; (8002240 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80021da:	4013      	ands	r3, r2
 80021dc:	0019      	movs	r1, r3
 80021de:	4b17      	ldr	r3, [pc, #92]	; (800223c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	2380      	movs	r3, #128	; 0x80
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d11f      	bne.n	8002230 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80021f0:	4b14      	ldr	r3, [pc, #80]	; (8002244 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	0013      	movs	r3, r2
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	189b      	adds	r3, r3, r2
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	4912      	ldr	r1, [pc, #72]	; (8002248 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80021fe:	0018      	movs	r0, r3
 8002200:	f7fd ff88 	bl	8000114 <__udivsi3>
 8002204:	0003      	movs	r3, r0
 8002206:	3301      	adds	r3, #1
 8002208:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800220a:	e008      	b.n	800221e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	3b01      	subs	r3, #1
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	e001      	b.n	800221e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e009      	b.n	8002232 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800221e:	4b07      	ldr	r3, [pc, #28]	; (800223c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002220:	695a      	ldr	r2, [r3, #20]
 8002222:	2380      	movs	r3, #128	; 0x80
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	401a      	ands	r2, r3
 8002228:	2380      	movs	r3, #128	; 0x80
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	429a      	cmp	r2, r3
 800222e:	d0ed      	beq.n	800220c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	0018      	movs	r0, r3
 8002234:	46bd      	mov	sp, r7
 8002236:	b004      	add	sp, #16
 8002238:	bd80      	pop	{r7, pc}
 800223a:	46c0      	nop			; (mov r8, r8)
 800223c:	40007000 	.word	0x40007000
 8002240:	fffff9ff 	.word	0xfffff9ff
 8002244:	20000004 	.word	0x20000004
 8002248:	000f4240 	.word	0x000f4240

0800224c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002250:	4b03      	ldr	r3, [pc, #12]	; (8002260 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	23e0      	movs	r3, #224	; 0xe0
 8002256:	01db      	lsls	r3, r3, #7
 8002258:	4013      	ands	r3, r2
}
 800225a:	0018      	movs	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40021000 	.word	0x40021000

08002264 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e2fe      	b.n	8002874 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2201      	movs	r2, #1
 800227c:	4013      	ands	r3, r2
 800227e:	d100      	bne.n	8002282 <HAL_RCC_OscConfig+0x1e>
 8002280:	e07c      	b.n	800237c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002282:	4bc3      	ldr	r3, [pc, #780]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	2238      	movs	r2, #56	; 0x38
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800228c:	4bc0      	ldr	r3, [pc, #768]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	2203      	movs	r2, #3
 8002292:	4013      	ands	r3, r2
 8002294:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	2b10      	cmp	r3, #16
 800229a:	d102      	bne.n	80022a2 <HAL_RCC_OscConfig+0x3e>
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d002      	beq.n	80022a8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d10b      	bne.n	80022c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a8:	4bb9      	ldr	r3, [pc, #740]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	2380      	movs	r3, #128	; 0x80
 80022ae:	029b      	lsls	r3, r3, #10
 80022b0:	4013      	ands	r3, r2
 80022b2:	d062      	beq.n	800237a <HAL_RCC_OscConfig+0x116>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d15e      	bne.n	800237a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e2d9      	b.n	8002874 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	2380      	movs	r3, #128	; 0x80
 80022c6:	025b      	lsls	r3, r3, #9
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d107      	bne.n	80022dc <HAL_RCC_OscConfig+0x78>
 80022cc:	4bb0      	ldr	r3, [pc, #704]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	4baf      	ldr	r3, [pc, #700]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 80022d2:	2180      	movs	r1, #128	; 0x80
 80022d4:	0249      	lsls	r1, r1, #9
 80022d6:	430a      	orrs	r2, r1
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	e020      	b.n	800231e <HAL_RCC_OscConfig+0xba>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	23a0      	movs	r3, #160	; 0xa0
 80022e2:	02db      	lsls	r3, r3, #11
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d10e      	bne.n	8002306 <HAL_RCC_OscConfig+0xa2>
 80022e8:	4ba9      	ldr	r3, [pc, #676]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4ba8      	ldr	r3, [pc, #672]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 80022ee:	2180      	movs	r1, #128	; 0x80
 80022f0:	02c9      	lsls	r1, r1, #11
 80022f2:	430a      	orrs	r2, r1
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	4ba6      	ldr	r3, [pc, #664]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	4ba5      	ldr	r3, [pc, #660]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 80022fc:	2180      	movs	r1, #128	; 0x80
 80022fe:	0249      	lsls	r1, r1, #9
 8002300:	430a      	orrs	r2, r1
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	e00b      	b.n	800231e <HAL_RCC_OscConfig+0xba>
 8002306:	4ba2      	ldr	r3, [pc, #648]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	4ba1      	ldr	r3, [pc, #644]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 800230c:	49a1      	ldr	r1, [pc, #644]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 800230e:	400a      	ands	r2, r1
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	4b9f      	ldr	r3, [pc, #636]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	4b9e      	ldr	r3, [pc, #632]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 8002318:	499f      	ldr	r1, [pc, #636]	; (8002598 <HAL_RCC_OscConfig+0x334>)
 800231a:	400a      	ands	r2, r1
 800231c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d014      	beq.n	8002350 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002326:	f7ff fbbf 	bl	8001aa8 <HAL_GetTick>
 800232a:	0003      	movs	r3, r0
 800232c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002330:	f7ff fbba 	bl	8001aa8 <HAL_GetTick>
 8002334:	0002      	movs	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b64      	cmp	r3, #100	; 0x64
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e298      	b.n	8002874 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002342:	4b93      	ldr	r3, [pc, #588]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	2380      	movs	r3, #128	; 0x80
 8002348:	029b      	lsls	r3, r3, #10
 800234a:	4013      	ands	r3, r2
 800234c:	d0f0      	beq.n	8002330 <HAL_RCC_OscConfig+0xcc>
 800234e:	e015      	b.n	800237c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002350:	f7ff fbaa 	bl	8001aa8 <HAL_GetTick>
 8002354:	0003      	movs	r3, r0
 8002356:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800235a:	f7ff fba5 	bl	8001aa8 <HAL_GetTick>
 800235e:	0002      	movs	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b64      	cmp	r3, #100	; 0x64
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e283      	b.n	8002874 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800236c:	4b88      	ldr	r3, [pc, #544]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	2380      	movs	r3, #128	; 0x80
 8002372:	029b      	lsls	r3, r3, #10
 8002374:	4013      	ands	r3, r2
 8002376:	d1f0      	bne.n	800235a <HAL_RCC_OscConfig+0xf6>
 8002378:	e000      	b.n	800237c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2202      	movs	r2, #2
 8002382:	4013      	ands	r3, r2
 8002384:	d100      	bne.n	8002388 <HAL_RCC_OscConfig+0x124>
 8002386:	e099      	b.n	80024bc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002388:	4b81      	ldr	r3, [pc, #516]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	2238      	movs	r2, #56	; 0x38
 800238e:	4013      	ands	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002392:	4b7f      	ldr	r3, [pc, #508]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	2203      	movs	r2, #3
 8002398:	4013      	ands	r3, r2
 800239a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	2b10      	cmp	r3, #16
 80023a0:	d102      	bne.n	80023a8 <HAL_RCC_OscConfig+0x144>
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d002      	beq.n	80023ae <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d135      	bne.n	800241a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023ae:	4b78      	ldr	r3, [pc, #480]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	2380      	movs	r3, #128	; 0x80
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	4013      	ands	r3, r2
 80023b8:	d005      	beq.n	80023c6 <HAL_RCC_OscConfig+0x162>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e256      	b.n	8002874 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c6:	4b72      	ldr	r3, [pc, #456]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	4a74      	ldr	r2, [pc, #464]	; (800259c <HAL_RCC_OscConfig+0x338>)
 80023cc:	4013      	ands	r3, r2
 80023ce:	0019      	movs	r1, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	021a      	lsls	r2, r3, #8
 80023d6:	4b6e      	ldr	r3, [pc, #440]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 80023d8:	430a      	orrs	r2, r1
 80023da:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d112      	bne.n	8002408 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80023e2:	4b6b      	ldr	r3, [pc, #428]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a6e      	ldr	r2, [pc, #440]	; (80025a0 <HAL_RCC_OscConfig+0x33c>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	0019      	movs	r1, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	691a      	ldr	r2, [r3, #16]
 80023f0:	4b67      	ldr	r3, [pc, #412]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 80023f2:	430a      	orrs	r2, r1
 80023f4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80023f6:	4b66      	ldr	r3, [pc, #408]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	0adb      	lsrs	r3, r3, #11
 80023fc:	2207      	movs	r2, #7
 80023fe:	4013      	ands	r3, r2
 8002400:	4a68      	ldr	r2, [pc, #416]	; (80025a4 <HAL_RCC_OscConfig+0x340>)
 8002402:	40da      	lsrs	r2, r3
 8002404:	4b68      	ldr	r3, [pc, #416]	; (80025a8 <HAL_RCC_OscConfig+0x344>)
 8002406:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002408:	4b68      	ldr	r3, [pc, #416]	; (80025ac <HAL_RCC_OscConfig+0x348>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	0018      	movs	r0, r3
 800240e:	f7ff faef 	bl	80019f0 <HAL_InitTick>
 8002412:	1e03      	subs	r3, r0, #0
 8002414:	d051      	beq.n	80024ba <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e22c      	b.n	8002874 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d030      	beq.n	8002484 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002422:	4b5b      	ldr	r3, [pc, #364]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a5e      	ldr	r2, [pc, #376]	; (80025a0 <HAL_RCC_OscConfig+0x33c>)
 8002428:	4013      	ands	r3, r2
 800242a:	0019      	movs	r1, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691a      	ldr	r2, [r3, #16]
 8002430:	4b57      	ldr	r3, [pc, #348]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 8002432:	430a      	orrs	r2, r1
 8002434:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002436:	4b56      	ldr	r3, [pc, #344]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	4b55      	ldr	r3, [pc, #340]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 800243c:	2180      	movs	r1, #128	; 0x80
 800243e:	0049      	lsls	r1, r1, #1
 8002440:	430a      	orrs	r2, r1
 8002442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002444:	f7ff fb30 	bl	8001aa8 <HAL_GetTick>
 8002448:	0003      	movs	r3, r0
 800244a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800244e:	f7ff fb2b 	bl	8001aa8 <HAL_GetTick>
 8002452:	0002      	movs	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e209      	b.n	8002874 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002460:	4b4b      	ldr	r3, [pc, #300]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	2380      	movs	r3, #128	; 0x80
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	4013      	ands	r3, r2
 800246a:	d0f0      	beq.n	800244e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800246c:	4b48      	ldr	r3, [pc, #288]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	4a4a      	ldr	r2, [pc, #296]	; (800259c <HAL_RCC_OscConfig+0x338>)
 8002472:	4013      	ands	r3, r2
 8002474:	0019      	movs	r1, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	021a      	lsls	r2, r3, #8
 800247c:	4b44      	ldr	r3, [pc, #272]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 800247e:	430a      	orrs	r2, r1
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	e01b      	b.n	80024bc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002484:	4b42      	ldr	r3, [pc, #264]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4b41      	ldr	r3, [pc, #260]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 800248a:	4949      	ldr	r1, [pc, #292]	; (80025b0 <HAL_RCC_OscConfig+0x34c>)
 800248c:	400a      	ands	r2, r1
 800248e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002490:	f7ff fb0a 	bl	8001aa8 <HAL_GetTick>
 8002494:	0003      	movs	r3, r0
 8002496:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800249a:	f7ff fb05 	bl	8001aa8 <HAL_GetTick>
 800249e:	0002      	movs	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e1e3      	b.n	8002874 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024ac:	4b38      	ldr	r3, [pc, #224]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	2380      	movs	r3, #128	; 0x80
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	4013      	ands	r3, r2
 80024b6:	d1f0      	bne.n	800249a <HAL_RCC_OscConfig+0x236>
 80024b8:	e000      	b.n	80024bc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024ba:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2208      	movs	r2, #8
 80024c2:	4013      	ands	r3, r2
 80024c4:	d047      	beq.n	8002556 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80024c6:	4b32      	ldr	r3, [pc, #200]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	2238      	movs	r2, #56	; 0x38
 80024cc:	4013      	ands	r3, r2
 80024ce:	2b18      	cmp	r3, #24
 80024d0:	d10a      	bne.n	80024e8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80024d2:	4b2f      	ldr	r3, [pc, #188]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 80024d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d6:	2202      	movs	r2, #2
 80024d8:	4013      	ands	r3, r2
 80024da:	d03c      	beq.n	8002556 <HAL_RCC_OscConfig+0x2f2>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d138      	bne.n	8002556 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e1c5      	b.n	8002874 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d019      	beq.n	8002524 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80024f0:	4b27      	ldr	r3, [pc, #156]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 80024f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024f4:	4b26      	ldr	r3, [pc, #152]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 80024f6:	2101      	movs	r1, #1
 80024f8:	430a      	orrs	r2, r1
 80024fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fc:	f7ff fad4 	bl	8001aa8 <HAL_GetTick>
 8002500:	0003      	movs	r3, r0
 8002502:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002506:	f7ff facf 	bl	8001aa8 <HAL_GetTick>
 800250a:	0002      	movs	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e1ad      	b.n	8002874 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002518:	4b1d      	ldr	r3, [pc, #116]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 800251a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800251c:	2202      	movs	r2, #2
 800251e:	4013      	ands	r3, r2
 8002520:	d0f1      	beq.n	8002506 <HAL_RCC_OscConfig+0x2a2>
 8002522:	e018      	b.n	8002556 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002524:	4b1a      	ldr	r3, [pc, #104]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 8002526:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002528:	4b19      	ldr	r3, [pc, #100]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 800252a:	2101      	movs	r1, #1
 800252c:	438a      	bics	r2, r1
 800252e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002530:	f7ff faba 	bl	8001aa8 <HAL_GetTick>
 8002534:	0003      	movs	r3, r0
 8002536:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800253a:	f7ff fab5 	bl	8001aa8 <HAL_GetTick>
 800253e:	0002      	movs	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e193      	b.n	8002874 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800254c:	4b10      	ldr	r3, [pc, #64]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 800254e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002550:	2202      	movs	r2, #2
 8002552:	4013      	ands	r3, r2
 8002554:	d1f1      	bne.n	800253a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2204      	movs	r2, #4
 800255c:	4013      	ands	r3, r2
 800255e:	d100      	bne.n	8002562 <HAL_RCC_OscConfig+0x2fe>
 8002560:	e0c6      	b.n	80026f0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002562:	231f      	movs	r3, #31
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	2200      	movs	r2, #0
 8002568:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800256a:	4b09      	ldr	r3, [pc, #36]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	2238      	movs	r2, #56	; 0x38
 8002570:	4013      	ands	r3, r2
 8002572:	2b20      	cmp	r3, #32
 8002574:	d11e      	bne.n	80025b4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002576:	4b06      	ldr	r3, [pc, #24]	; (8002590 <HAL_RCC_OscConfig+0x32c>)
 8002578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257a:	2202      	movs	r2, #2
 800257c:	4013      	ands	r3, r2
 800257e:	d100      	bne.n	8002582 <HAL_RCC_OscConfig+0x31e>
 8002580:	e0b6      	b.n	80026f0 <HAL_RCC_OscConfig+0x48c>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d000      	beq.n	800258c <HAL_RCC_OscConfig+0x328>
 800258a:	e0b1      	b.n	80026f0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e171      	b.n	8002874 <HAL_RCC_OscConfig+0x610>
 8002590:	40021000 	.word	0x40021000
 8002594:	fffeffff 	.word	0xfffeffff
 8002598:	fffbffff 	.word	0xfffbffff
 800259c:	ffff80ff 	.word	0xffff80ff
 80025a0:	ffffc7ff 	.word	0xffffc7ff
 80025a4:	00f42400 	.word	0x00f42400
 80025a8:	20000004 	.word	0x20000004
 80025ac:	20000008 	.word	0x20000008
 80025b0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025b4:	4bb1      	ldr	r3, [pc, #708]	; (800287c <HAL_RCC_OscConfig+0x618>)
 80025b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025b8:	2380      	movs	r3, #128	; 0x80
 80025ba:	055b      	lsls	r3, r3, #21
 80025bc:	4013      	ands	r3, r2
 80025be:	d101      	bne.n	80025c4 <HAL_RCC_OscConfig+0x360>
 80025c0:	2301      	movs	r3, #1
 80025c2:	e000      	b.n	80025c6 <HAL_RCC_OscConfig+0x362>
 80025c4:	2300      	movs	r3, #0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d011      	beq.n	80025ee <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80025ca:	4bac      	ldr	r3, [pc, #688]	; (800287c <HAL_RCC_OscConfig+0x618>)
 80025cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025ce:	4bab      	ldr	r3, [pc, #684]	; (800287c <HAL_RCC_OscConfig+0x618>)
 80025d0:	2180      	movs	r1, #128	; 0x80
 80025d2:	0549      	lsls	r1, r1, #21
 80025d4:	430a      	orrs	r2, r1
 80025d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80025d8:	4ba8      	ldr	r3, [pc, #672]	; (800287c <HAL_RCC_OscConfig+0x618>)
 80025da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025dc:	2380      	movs	r3, #128	; 0x80
 80025de:	055b      	lsls	r3, r3, #21
 80025e0:	4013      	ands	r3, r2
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80025e6:	231f      	movs	r3, #31
 80025e8:	18fb      	adds	r3, r7, r3
 80025ea:	2201      	movs	r2, #1
 80025ec:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025ee:	4ba4      	ldr	r3, [pc, #656]	; (8002880 <HAL_RCC_OscConfig+0x61c>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	2380      	movs	r3, #128	; 0x80
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	4013      	ands	r3, r2
 80025f8:	d11a      	bne.n	8002630 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025fa:	4ba1      	ldr	r3, [pc, #644]	; (8002880 <HAL_RCC_OscConfig+0x61c>)
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	4ba0      	ldr	r3, [pc, #640]	; (8002880 <HAL_RCC_OscConfig+0x61c>)
 8002600:	2180      	movs	r1, #128	; 0x80
 8002602:	0049      	lsls	r1, r1, #1
 8002604:	430a      	orrs	r2, r1
 8002606:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002608:	f7ff fa4e 	bl	8001aa8 <HAL_GetTick>
 800260c:	0003      	movs	r3, r0
 800260e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002612:	f7ff fa49 	bl	8001aa8 <HAL_GetTick>
 8002616:	0002      	movs	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e127      	b.n	8002874 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002624:	4b96      	ldr	r3, [pc, #600]	; (8002880 <HAL_RCC_OscConfig+0x61c>)
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	2380      	movs	r3, #128	; 0x80
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	4013      	ands	r3, r2
 800262e:	d0f0      	beq.n	8002612 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d106      	bne.n	8002646 <HAL_RCC_OscConfig+0x3e2>
 8002638:	4b90      	ldr	r3, [pc, #576]	; (800287c <HAL_RCC_OscConfig+0x618>)
 800263a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800263c:	4b8f      	ldr	r3, [pc, #572]	; (800287c <HAL_RCC_OscConfig+0x618>)
 800263e:	2101      	movs	r1, #1
 8002640:	430a      	orrs	r2, r1
 8002642:	65da      	str	r2, [r3, #92]	; 0x5c
 8002644:	e01c      	b.n	8002680 <HAL_RCC_OscConfig+0x41c>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	2b05      	cmp	r3, #5
 800264c:	d10c      	bne.n	8002668 <HAL_RCC_OscConfig+0x404>
 800264e:	4b8b      	ldr	r3, [pc, #556]	; (800287c <HAL_RCC_OscConfig+0x618>)
 8002650:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002652:	4b8a      	ldr	r3, [pc, #552]	; (800287c <HAL_RCC_OscConfig+0x618>)
 8002654:	2104      	movs	r1, #4
 8002656:	430a      	orrs	r2, r1
 8002658:	65da      	str	r2, [r3, #92]	; 0x5c
 800265a:	4b88      	ldr	r3, [pc, #544]	; (800287c <HAL_RCC_OscConfig+0x618>)
 800265c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800265e:	4b87      	ldr	r3, [pc, #540]	; (800287c <HAL_RCC_OscConfig+0x618>)
 8002660:	2101      	movs	r1, #1
 8002662:	430a      	orrs	r2, r1
 8002664:	65da      	str	r2, [r3, #92]	; 0x5c
 8002666:	e00b      	b.n	8002680 <HAL_RCC_OscConfig+0x41c>
 8002668:	4b84      	ldr	r3, [pc, #528]	; (800287c <HAL_RCC_OscConfig+0x618>)
 800266a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800266c:	4b83      	ldr	r3, [pc, #524]	; (800287c <HAL_RCC_OscConfig+0x618>)
 800266e:	2101      	movs	r1, #1
 8002670:	438a      	bics	r2, r1
 8002672:	65da      	str	r2, [r3, #92]	; 0x5c
 8002674:	4b81      	ldr	r3, [pc, #516]	; (800287c <HAL_RCC_OscConfig+0x618>)
 8002676:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002678:	4b80      	ldr	r3, [pc, #512]	; (800287c <HAL_RCC_OscConfig+0x618>)
 800267a:	2104      	movs	r1, #4
 800267c:	438a      	bics	r2, r1
 800267e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d014      	beq.n	80026b2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002688:	f7ff fa0e 	bl	8001aa8 <HAL_GetTick>
 800268c:	0003      	movs	r3, r0
 800268e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002690:	e009      	b.n	80026a6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002692:	f7ff fa09 	bl	8001aa8 <HAL_GetTick>
 8002696:	0002      	movs	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	4a79      	ldr	r2, [pc, #484]	; (8002884 <HAL_RCC_OscConfig+0x620>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e0e6      	b.n	8002874 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026a6:	4b75      	ldr	r3, [pc, #468]	; (800287c <HAL_RCC_OscConfig+0x618>)
 80026a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026aa:	2202      	movs	r2, #2
 80026ac:	4013      	ands	r3, r2
 80026ae:	d0f0      	beq.n	8002692 <HAL_RCC_OscConfig+0x42e>
 80026b0:	e013      	b.n	80026da <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b2:	f7ff f9f9 	bl	8001aa8 <HAL_GetTick>
 80026b6:	0003      	movs	r3, r0
 80026b8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026ba:	e009      	b.n	80026d0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026bc:	f7ff f9f4 	bl	8001aa8 <HAL_GetTick>
 80026c0:	0002      	movs	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	4a6f      	ldr	r2, [pc, #444]	; (8002884 <HAL_RCC_OscConfig+0x620>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e0d1      	b.n	8002874 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026d0:	4b6a      	ldr	r3, [pc, #424]	; (800287c <HAL_RCC_OscConfig+0x618>)
 80026d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d4:	2202      	movs	r2, #2
 80026d6:	4013      	ands	r3, r2
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80026da:	231f      	movs	r3, #31
 80026dc:	18fb      	adds	r3, r7, r3
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d105      	bne.n	80026f0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80026e4:	4b65      	ldr	r3, [pc, #404]	; (800287c <HAL_RCC_OscConfig+0x618>)
 80026e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026e8:	4b64      	ldr	r3, [pc, #400]	; (800287c <HAL_RCC_OscConfig+0x618>)
 80026ea:	4967      	ldr	r1, [pc, #412]	; (8002888 <HAL_RCC_OscConfig+0x624>)
 80026ec:	400a      	ands	r2, r1
 80026ee:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d100      	bne.n	80026fa <HAL_RCC_OscConfig+0x496>
 80026f8:	e0bb      	b.n	8002872 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026fa:	4b60      	ldr	r3, [pc, #384]	; (800287c <HAL_RCC_OscConfig+0x618>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2238      	movs	r2, #56	; 0x38
 8002700:	4013      	ands	r3, r2
 8002702:	2b10      	cmp	r3, #16
 8002704:	d100      	bne.n	8002708 <HAL_RCC_OscConfig+0x4a4>
 8002706:	e07b      	b.n	8002800 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	2b02      	cmp	r3, #2
 800270e:	d156      	bne.n	80027be <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002710:	4b5a      	ldr	r3, [pc, #360]	; (800287c <HAL_RCC_OscConfig+0x618>)
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	4b59      	ldr	r3, [pc, #356]	; (800287c <HAL_RCC_OscConfig+0x618>)
 8002716:	495d      	ldr	r1, [pc, #372]	; (800288c <HAL_RCC_OscConfig+0x628>)
 8002718:	400a      	ands	r2, r1
 800271a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271c:	f7ff f9c4 	bl	8001aa8 <HAL_GetTick>
 8002720:	0003      	movs	r3, r0
 8002722:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002726:	f7ff f9bf 	bl	8001aa8 <HAL_GetTick>
 800272a:	0002      	movs	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e09d      	b.n	8002874 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002738:	4b50      	ldr	r3, [pc, #320]	; (800287c <HAL_RCC_OscConfig+0x618>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	2380      	movs	r3, #128	; 0x80
 800273e:	049b      	lsls	r3, r3, #18
 8002740:	4013      	ands	r3, r2
 8002742:	d1f0      	bne.n	8002726 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002744:	4b4d      	ldr	r3, [pc, #308]	; (800287c <HAL_RCC_OscConfig+0x618>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	4a51      	ldr	r2, [pc, #324]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 800274a:	4013      	ands	r3, r2
 800274c:	0019      	movs	r1, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a1a      	ldr	r2, [r3, #32]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275c:	021b      	lsls	r3, r3, #8
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	431a      	orrs	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002770:	431a      	orrs	r2, r3
 8002772:	4b42      	ldr	r3, [pc, #264]	; (800287c <HAL_RCC_OscConfig+0x618>)
 8002774:	430a      	orrs	r2, r1
 8002776:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002778:	4b40      	ldr	r3, [pc, #256]	; (800287c <HAL_RCC_OscConfig+0x618>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4b3f      	ldr	r3, [pc, #252]	; (800287c <HAL_RCC_OscConfig+0x618>)
 800277e:	2180      	movs	r1, #128	; 0x80
 8002780:	0449      	lsls	r1, r1, #17
 8002782:	430a      	orrs	r2, r1
 8002784:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002786:	4b3d      	ldr	r3, [pc, #244]	; (800287c <HAL_RCC_OscConfig+0x618>)
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	4b3c      	ldr	r3, [pc, #240]	; (800287c <HAL_RCC_OscConfig+0x618>)
 800278c:	2180      	movs	r1, #128	; 0x80
 800278e:	0549      	lsls	r1, r1, #21
 8002790:	430a      	orrs	r2, r1
 8002792:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002794:	f7ff f988 	bl	8001aa8 <HAL_GetTick>
 8002798:	0003      	movs	r3, r0
 800279a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279e:	f7ff f983 	bl	8001aa8 <HAL_GetTick>
 80027a2:	0002      	movs	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e061      	b.n	8002874 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027b0:	4b32      	ldr	r3, [pc, #200]	; (800287c <HAL_RCC_OscConfig+0x618>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	2380      	movs	r3, #128	; 0x80
 80027b6:	049b      	lsls	r3, r3, #18
 80027b8:	4013      	ands	r3, r2
 80027ba:	d0f0      	beq.n	800279e <HAL_RCC_OscConfig+0x53a>
 80027bc:	e059      	b.n	8002872 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027be:	4b2f      	ldr	r3, [pc, #188]	; (800287c <HAL_RCC_OscConfig+0x618>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	4b2e      	ldr	r3, [pc, #184]	; (800287c <HAL_RCC_OscConfig+0x618>)
 80027c4:	4931      	ldr	r1, [pc, #196]	; (800288c <HAL_RCC_OscConfig+0x628>)
 80027c6:	400a      	ands	r2, r1
 80027c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ca:	f7ff f96d 	bl	8001aa8 <HAL_GetTick>
 80027ce:	0003      	movs	r3, r0
 80027d0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d4:	f7ff f968 	bl	8001aa8 <HAL_GetTick>
 80027d8:	0002      	movs	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e046      	b.n	8002874 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027e6:	4b25      	ldr	r3, [pc, #148]	; (800287c <HAL_RCC_OscConfig+0x618>)
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	2380      	movs	r3, #128	; 0x80
 80027ec:	049b      	lsls	r3, r3, #18
 80027ee:	4013      	ands	r3, r2
 80027f0:	d1f0      	bne.n	80027d4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80027f2:	4b22      	ldr	r3, [pc, #136]	; (800287c <HAL_RCC_OscConfig+0x618>)
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	4b21      	ldr	r3, [pc, #132]	; (800287c <HAL_RCC_OscConfig+0x618>)
 80027f8:	4926      	ldr	r1, [pc, #152]	; (8002894 <HAL_RCC_OscConfig+0x630>)
 80027fa:	400a      	ands	r2, r1
 80027fc:	60da      	str	r2, [r3, #12]
 80027fe:	e038      	b.n	8002872 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e033      	b.n	8002874 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800280c:	4b1b      	ldr	r3, [pc, #108]	; (800287c <HAL_RCC_OscConfig+0x618>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2203      	movs	r2, #3
 8002816:	401a      	ands	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	429a      	cmp	r2, r3
 800281e:	d126      	bne.n	800286e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	2270      	movs	r2, #112	; 0x70
 8002824:	401a      	ands	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800282a:	429a      	cmp	r2, r3
 800282c:	d11f      	bne.n	800286e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	23fe      	movs	r3, #254	; 0xfe
 8002832:	01db      	lsls	r3, r3, #7
 8002834:	401a      	ands	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800283c:	429a      	cmp	r2, r3
 800283e:	d116      	bne.n	800286e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	23f8      	movs	r3, #248	; 0xf8
 8002844:	039b      	lsls	r3, r3, #14
 8002846:	401a      	ands	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800284c:	429a      	cmp	r2, r3
 800284e:	d10e      	bne.n	800286e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	23e0      	movs	r3, #224	; 0xe0
 8002854:	051b      	lsls	r3, r3, #20
 8002856:	401a      	ands	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800285c:	429a      	cmp	r2, r3
 800285e:	d106      	bne.n	800286e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	0f5b      	lsrs	r3, r3, #29
 8002864:	075a      	lsls	r2, r3, #29
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800286a:	429a      	cmp	r2, r3
 800286c:	d001      	beq.n	8002872 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	0018      	movs	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	b008      	add	sp, #32
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40021000 	.word	0x40021000
 8002880:	40007000 	.word	0x40007000
 8002884:	00001388 	.word	0x00001388
 8002888:	efffffff 	.word	0xefffffff
 800288c:	feffffff 	.word	0xfeffffff
 8002890:	11c1808c 	.word	0x11c1808c
 8002894:	eefefffc 	.word	0xeefefffc

08002898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e0e9      	b.n	8002a80 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028ac:	4b76      	ldr	r3, [pc, #472]	; (8002a88 <HAL_RCC_ClockConfig+0x1f0>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2207      	movs	r2, #7
 80028b2:	4013      	ands	r3, r2
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d91e      	bls.n	80028f8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ba:	4b73      	ldr	r3, [pc, #460]	; (8002a88 <HAL_RCC_ClockConfig+0x1f0>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2207      	movs	r2, #7
 80028c0:	4393      	bics	r3, r2
 80028c2:	0019      	movs	r1, r3
 80028c4:	4b70      	ldr	r3, [pc, #448]	; (8002a88 <HAL_RCC_ClockConfig+0x1f0>)
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028cc:	f7ff f8ec 	bl	8001aa8 <HAL_GetTick>
 80028d0:	0003      	movs	r3, r0
 80028d2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028d4:	e009      	b.n	80028ea <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d6:	f7ff f8e7 	bl	8001aa8 <HAL_GetTick>
 80028da:	0002      	movs	r2, r0
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	4a6a      	ldr	r2, [pc, #424]	; (8002a8c <HAL_RCC_ClockConfig+0x1f4>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e0ca      	b.n	8002a80 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028ea:	4b67      	ldr	r3, [pc, #412]	; (8002a88 <HAL_RCC_ClockConfig+0x1f0>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2207      	movs	r2, #7
 80028f0:	4013      	ands	r3, r2
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d1ee      	bne.n	80028d6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2202      	movs	r2, #2
 80028fe:	4013      	ands	r3, r2
 8002900:	d015      	beq.n	800292e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2204      	movs	r2, #4
 8002908:	4013      	ands	r3, r2
 800290a:	d006      	beq.n	800291a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800290c:	4b60      	ldr	r3, [pc, #384]	; (8002a90 <HAL_RCC_ClockConfig+0x1f8>)
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	4b5f      	ldr	r3, [pc, #380]	; (8002a90 <HAL_RCC_ClockConfig+0x1f8>)
 8002912:	21e0      	movs	r1, #224	; 0xe0
 8002914:	01c9      	lsls	r1, r1, #7
 8002916:	430a      	orrs	r2, r1
 8002918:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800291a:	4b5d      	ldr	r3, [pc, #372]	; (8002a90 <HAL_RCC_ClockConfig+0x1f8>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	4a5d      	ldr	r2, [pc, #372]	; (8002a94 <HAL_RCC_ClockConfig+0x1fc>)
 8002920:	4013      	ands	r3, r2
 8002922:	0019      	movs	r1, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	4b59      	ldr	r3, [pc, #356]	; (8002a90 <HAL_RCC_ClockConfig+0x1f8>)
 800292a:	430a      	orrs	r2, r1
 800292c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2201      	movs	r2, #1
 8002934:	4013      	ands	r3, r2
 8002936:	d057      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d107      	bne.n	8002950 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002940:	4b53      	ldr	r3, [pc, #332]	; (8002a90 <HAL_RCC_ClockConfig+0x1f8>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	2380      	movs	r3, #128	; 0x80
 8002946:	029b      	lsls	r3, r3, #10
 8002948:	4013      	ands	r3, r2
 800294a:	d12b      	bne.n	80029a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e097      	b.n	8002a80 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b02      	cmp	r3, #2
 8002956:	d107      	bne.n	8002968 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002958:	4b4d      	ldr	r3, [pc, #308]	; (8002a90 <HAL_RCC_ClockConfig+0x1f8>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	2380      	movs	r3, #128	; 0x80
 800295e:	049b      	lsls	r3, r3, #18
 8002960:	4013      	ands	r3, r2
 8002962:	d11f      	bne.n	80029a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e08b      	b.n	8002a80 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d107      	bne.n	8002980 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002970:	4b47      	ldr	r3, [pc, #284]	; (8002a90 <HAL_RCC_ClockConfig+0x1f8>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	2380      	movs	r3, #128	; 0x80
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	4013      	ands	r3, r2
 800297a:	d113      	bne.n	80029a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e07f      	b.n	8002a80 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b03      	cmp	r3, #3
 8002986:	d106      	bne.n	8002996 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002988:	4b41      	ldr	r3, [pc, #260]	; (8002a90 <HAL_RCC_ClockConfig+0x1f8>)
 800298a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800298c:	2202      	movs	r2, #2
 800298e:	4013      	ands	r3, r2
 8002990:	d108      	bne.n	80029a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e074      	b.n	8002a80 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002996:	4b3e      	ldr	r3, [pc, #248]	; (8002a90 <HAL_RCC_ClockConfig+0x1f8>)
 8002998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299a:	2202      	movs	r2, #2
 800299c:	4013      	ands	r3, r2
 800299e:	d101      	bne.n	80029a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e06d      	b.n	8002a80 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029a4:	4b3a      	ldr	r3, [pc, #232]	; (8002a90 <HAL_RCC_ClockConfig+0x1f8>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	2207      	movs	r2, #7
 80029aa:	4393      	bics	r3, r2
 80029ac:	0019      	movs	r1, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	4b37      	ldr	r3, [pc, #220]	; (8002a90 <HAL_RCC_ClockConfig+0x1f8>)
 80029b4:	430a      	orrs	r2, r1
 80029b6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029b8:	f7ff f876 	bl	8001aa8 <HAL_GetTick>
 80029bc:	0003      	movs	r3, r0
 80029be:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c0:	e009      	b.n	80029d6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c2:	f7ff f871 	bl	8001aa8 <HAL_GetTick>
 80029c6:	0002      	movs	r2, r0
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	4a2f      	ldr	r2, [pc, #188]	; (8002a8c <HAL_RCC_ClockConfig+0x1f4>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e054      	b.n	8002a80 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d6:	4b2e      	ldr	r3, [pc, #184]	; (8002a90 <HAL_RCC_ClockConfig+0x1f8>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	2238      	movs	r2, #56	; 0x38
 80029dc:	401a      	ands	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d1ec      	bne.n	80029c2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029e8:	4b27      	ldr	r3, [pc, #156]	; (8002a88 <HAL_RCC_ClockConfig+0x1f0>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2207      	movs	r2, #7
 80029ee:	4013      	ands	r3, r2
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d21e      	bcs.n	8002a34 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f6:	4b24      	ldr	r3, [pc, #144]	; (8002a88 <HAL_RCC_ClockConfig+0x1f0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2207      	movs	r2, #7
 80029fc:	4393      	bics	r3, r2
 80029fe:	0019      	movs	r1, r3
 8002a00:	4b21      	ldr	r3, [pc, #132]	; (8002a88 <HAL_RCC_ClockConfig+0x1f0>)
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a08:	f7ff f84e 	bl	8001aa8 <HAL_GetTick>
 8002a0c:	0003      	movs	r3, r0
 8002a0e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a10:	e009      	b.n	8002a26 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a12:	f7ff f849 	bl	8001aa8 <HAL_GetTick>
 8002a16:	0002      	movs	r2, r0
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	4a1b      	ldr	r2, [pc, #108]	; (8002a8c <HAL_RCC_ClockConfig+0x1f4>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e02c      	b.n	8002a80 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a26:	4b18      	ldr	r3, [pc, #96]	; (8002a88 <HAL_RCC_ClockConfig+0x1f0>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2207      	movs	r2, #7
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d1ee      	bne.n	8002a12 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2204      	movs	r2, #4
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	d009      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002a3e:	4b14      	ldr	r3, [pc, #80]	; (8002a90 <HAL_RCC_ClockConfig+0x1f8>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	4a15      	ldr	r2, [pc, #84]	; (8002a98 <HAL_RCC_ClockConfig+0x200>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	0019      	movs	r1, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <HAL_RCC_ClockConfig+0x1f8>)
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002a52:	f000 f829 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 8002a56:	0001      	movs	r1, r0
 8002a58:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <HAL_RCC_ClockConfig+0x1f8>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	0a1b      	lsrs	r3, r3, #8
 8002a5e:	220f      	movs	r2, #15
 8002a60:	401a      	ands	r2, r3
 8002a62:	4b0e      	ldr	r3, [pc, #56]	; (8002a9c <HAL_RCC_ClockConfig+0x204>)
 8002a64:	0092      	lsls	r2, r2, #2
 8002a66:	58d3      	ldr	r3, [r2, r3]
 8002a68:	221f      	movs	r2, #31
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	000a      	movs	r2, r1
 8002a6e:	40da      	lsrs	r2, r3
 8002a70:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <HAL_RCC_ClockConfig+0x208>)
 8002a72:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <HAL_RCC_ClockConfig+0x20c>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f7fe ffb9 	bl	80019f0 <HAL_InitTick>
 8002a7e:	0003      	movs	r3, r0
}
 8002a80:	0018      	movs	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	b004      	add	sp, #16
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40022000 	.word	0x40022000
 8002a8c:	00001388 	.word	0x00001388
 8002a90:	40021000 	.word	0x40021000
 8002a94:	fffff0ff 	.word	0xfffff0ff
 8002a98:	ffff8fff 	.word	0xffff8fff
 8002a9c:	08005528 	.word	0x08005528
 8002aa0:	20000004 	.word	0x20000004
 8002aa4:	20000008 	.word	0x20000008

08002aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aae:	4b3c      	ldr	r3, [pc, #240]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	2238      	movs	r2, #56	; 0x38
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	d10f      	bne.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002ab8:	4b39      	ldr	r3, [pc, #228]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	0adb      	lsrs	r3, r3, #11
 8002abe:	2207      	movs	r2, #7
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	409a      	lsls	r2, r3
 8002ac6:	0013      	movs	r3, r2
 8002ac8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002aca:	6839      	ldr	r1, [r7, #0]
 8002acc:	4835      	ldr	r0, [pc, #212]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002ace:	f7fd fb21 	bl	8000114 <__udivsi3>
 8002ad2:	0003      	movs	r3, r0
 8002ad4:	613b      	str	r3, [r7, #16]
 8002ad6:	e05d      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ad8:	4b31      	ldr	r3, [pc, #196]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2238      	movs	r2, #56	; 0x38
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d102      	bne.n	8002aea <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ae4:	4b30      	ldr	r3, [pc, #192]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	e054      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002aea:	4b2d      	ldr	r3, [pc, #180]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2238      	movs	r2, #56	; 0x38
 8002af0:	4013      	ands	r3, r2
 8002af2:	2b10      	cmp	r3, #16
 8002af4:	d138      	bne.n	8002b68 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002af6:	4b2a      	ldr	r3, [pc, #168]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	2203      	movs	r2, #3
 8002afc:	4013      	ands	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b00:	4b27      	ldr	r3, [pc, #156]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	091b      	lsrs	r3, r3, #4
 8002b06:	2207      	movs	r2, #7
 8002b08:	4013      	ands	r3, r2
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d10d      	bne.n	8002b30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b14:	68b9      	ldr	r1, [r7, #8]
 8002b16:	4824      	ldr	r0, [pc, #144]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002b18:	f7fd fafc 	bl	8000114 <__udivsi3>
 8002b1c:	0003      	movs	r3, r0
 8002b1e:	0019      	movs	r1, r3
 8002b20:	4b1f      	ldr	r3, [pc, #124]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	0a1b      	lsrs	r3, r3, #8
 8002b26:	227f      	movs	r2, #127	; 0x7f
 8002b28:	4013      	ands	r3, r2
 8002b2a:	434b      	muls	r3, r1
 8002b2c:	617b      	str	r3, [r7, #20]
        break;
 8002b2e:	e00d      	b.n	8002b4c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002b30:	68b9      	ldr	r1, [r7, #8]
 8002b32:	481c      	ldr	r0, [pc, #112]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b34:	f7fd faee 	bl	8000114 <__udivsi3>
 8002b38:	0003      	movs	r3, r0
 8002b3a:	0019      	movs	r1, r3
 8002b3c:	4b18      	ldr	r3, [pc, #96]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	0a1b      	lsrs	r3, r3, #8
 8002b42:	227f      	movs	r2, #127	; 0x7f
 8002b44:	4013      	ands	r3, r2
 8002b46:	434b      	muls	r3, r1
 8002b48:	617b      	str	r3, [r7, #20]
        break;
 8002b4a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002b4c:	4b14      	ldr	r3, [pc, #80]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	0f5b      	lsrs	r3, r3, #29
 8002b52:	2207      	movs	r2, #7
 8002b54:	4013      	ands	r3, r2
 8002b56:	3301      	adds	r3, #1
 8002b58:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	6978      	ldr	r0, [r7, #20]
 8002b5e:	f7fd fad9 	bl	8000114 <__udivsi3>
 8002b62:	0003      	movs	r3, r0
 8002b64:	613b      	str	r3, [r7, #16]
 8002b66:	e015      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002b68:	4b0d      	ldr	r3, [pc, #52]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2238      	movs	r2, #56	; 0x38
 8002b6e:	4013      	ands	r3, r2
 8002b70:	2b20      	cmp	r3, #32
 8002b72:	d103      	bne.n	8002b7c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002b74:	2380      	movs	r3, #128	; 0x80
 8002b76:	021b      	lsls	r3, r3, #8
 8002b78:	613b      	str	r3, [r7, #16]
 8002b7a:	e00b      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002b7c:	4b08      	ldr	r3, [pc, #32]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	2238      	movs	r2, #56	; 0x38
 8002b82:	4013      	ands	r3, r2
 8002b84:	2b18      	cmp	r3, #24
 8002b86:	d103      	bne.n	8002b90 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002b88:	23fa      	movs	r3, #250	; 0xfa
 8002b8a:	01db      	lsls	r3, r3, #7
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	e001      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b94:	693b      	ldr	r3, [r7, #16]
}
 8002b96:	0018      	movs	r0, r3
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	b006      	add	sp, #24
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	00f42400 	.word	0x00f42400
 8002ba8:	007a1200 	.word	0x007a1200

08002bac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bb0:	4b02      	ldr	r3, [pc, #8]	; (8002bbc <HAL_RCC_GetHCLKFreq+0x10>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
}
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	20000004 	.word	0x20000004

08002bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bc0:	b5b0      	push	{r4, r5, r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002bc4:	f7ff fff2 	bl	8002bac <HAL_RCC_GetHCLKFreq>
 8002bc8:	0004      	movs	r4, r0
 8002bca:	f7ff fb3f 	bl	800224c <LL_RCC_GetAPB1Prescaler>
 8002bce:	0003      	movs	r3, r0
 8002bd0:	0b1a      	lsrs	r2, r3, #12
 8002bd2:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bd4:	0092      	lsls	r2, r2, #2
 8002bd6:	58d3      	ldr	r3, [r2, r3]
 8002bd8:	221f      	movs	r2, #31
 8002bda:	4013      	ands	r3, r2
 8002bdc:	40dc      	lsrs	r4, r3
 8002bde:	0023      	movs	r3, r4
}
 8002be0:	0018      	movs	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bdb0      	pop	{r4, r5, r7, pc}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	08005568 	.word	0x08005568

08002bec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002bf4:	2313      	movs	r3, #19
 8002bf6:	18fb      	adds	r3, r7, r3
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bfc:	2312      	movs	r3, #18
 8002bfe:	18fb      	adds	r3, r7, r3
 8002c00:	2200      	movs	r2, #0
 8002c02:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	2380      	movs	r3, #128	; 0x80
 8002c0a:	029b      	lsls	r3, r3, #10
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d100      	bne.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002c10:	e0a3      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c12:	2011      	movs	r0, #17
 8002c14:	183b      	adds	r3, r7, r0
 8002c16:	2200      	movs	r2, #0
 8002c18:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c1a:	4bc3      	ldr	r3, [pc, #780]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c1e:	2380      	movs	r3, #128	; 0x80
 8002c20:	055b      	lsls	r3, r3, #21
 8002c22:	4013      	ands	r3, r2
 8002c24:	d110      	bne.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c26:	4bc0      	ldr	r3, [pc, #768]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c2a:	4bbf      	ldr	r3, [pc, #764]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c2c:	2180      	movs	r1, #128	; 0x80
 8002c2e:	0549      	lsls	r1, r1, #21
 8002c30:	430a      	orrs	r2, r1
 8002c32:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c34:	4bbc      	ldr	r3, [pc, #752]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c38:	2380      	movs	r3, #128	; 0x80
 8002c3a:	055b      	lsls	r3, r3, #21
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	60bb      	str	r3, [r7, #8]
 8002c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c42:	183b      	adds	r3, r7, r0
 8002c44:	2201      	movs	r2, #1
 8002c46:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c48:	4bb8      	ldr	r3, [pc, #736]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	4bb7      	ldr	r3, [pc, #732]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002c4e:	2180      	movs	r1, #128	; 0x80
 8002c50:	0049      	lsls	r1, r1, #1
 8002c52:	430a      	orrs	r2, r1
 8002c54:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c56:	f7fe ff27 	bl	8001aa8 <HAL_GetTick>
 8002c5a:	0003      	movs	r3, r0
 8002c5c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c5e:	e00b      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c60:	f7fe ff22 	bl	8001aa8 <HAL_GetTick>
 8002c64:	0002      	movs	r2, r0
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d904      	bls.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002c6e:	2313      	movs	r3, #19
 8002c70:	18fb      	adds	r3, r7, r3
 8002c72:	2203      	movs	r2, #3
 8002c74:	701a      	strb	r2, [r3, #0]
        break;
 8002c76:	e005      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c78:	4bac      	ldr	r3, [pc, #688]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	2380      	movs	r3, #128	; 0x80
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	4013      	ands	r3, r2
 8002c82:	d0ed      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002c84:	2313      	movs	r3, #19
 8002c86:	18fb      	adds	r3, r7, r3
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d154      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c8e:	4ba6      	ldr	r3, [pc, #664]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c92:	23c0      	movs	r3, #192	; 0xc0
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4013      	ands	r3, r2
 8002c98:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d019      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d014      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002caa:	4b9f      	ldr	r3, [pc, #636]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cae:	4aa0      	ldr	r2, [pc, #640]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cb4:	4b9c      	ldr	r3, [pc, #624]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cb6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cb8:	4b9b      	ldr	r3, [pc, #620]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cba:	2180      	movs	r1, #128	; 0x80
 8002cbc:	0249      	lsls	r1, r1, #9
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cc2:	4b99      	ldr	r3, [pc, #612]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cc4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cc6:	4b98      	ldr	r3, [pc, #608]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cc8:	499a      	ldr	r1, [pc, #616]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002cca:	400a      	ands	r2, r1
 8002ccc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cce:	4b96      	ldr	r3, [pc, #600]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d016      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cdc:	f7fe fee4 	bl	8001aa8 <HAL_GetTick>
 8002ce0:	0003      	movs	r3, r0
 8002ce2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ce4:	e00c      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce6:	f7fe fedf 	bl	8001aa8 <HAL_GetTick>
 8002cea:	0002      	movs	r2, r0
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	4a91      	ldr	r2, [pc, #580]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d904      	bls.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002cf6:	2313      	movs	r3, #19
 8002cf8:	18fb      	adds	r3, r7, r3
 8002cfa:	2203      	movs	r2, #3
 8002cfc:	701a      	strb	r2, [r3, #0]
            break;
 8002cfe:	e004      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d00:	4b89      	ldr	r3, [pc, #548]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d04:	2202      	movs	r2, #2
 8002d06:	4013      	ands	r3, r2
 8002d08:	d0ed      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002d0a:	2313      	movs	r3, #19
 8002d0c:	18fb      	adds	r3, r7, r3
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10a      	bne.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d14:	4b84      	ldr	r3, [pc, #528]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d18:	4a85      	ldr	r2, [pc, #532]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	0019      	movs	r1, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d22:	4b81      	ldr	r3, [pc, #516]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d24:	430a      	orrs	r2, r1
 8002d26:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d28:	e00c      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d2a:	2312      	movs	r3, #18
 8002d2c:	18fb      	adds	r3, r7, r3
 8002d2e:	2213      	movs	r2, #19
 8002d30:	18ba      	adds	r2, r7, r2
 8002d32:	7812      	ldrb	r2, [r2, #0]
 8002d34:	701a      	strb	r2, [r3, #0]
 8002d36:	e005      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d38:	2312      	movs	r3, #18
 8002d3a:	18fb      	adds	r3, r7, r3
 8002d3c:	2213      	movs	r2, #19
 8002d3e:	18ba      	adds	r2, r7, r2
 8002d40:	7812      	ldrb	r2, [r2, #0]
 8002d42:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d44:	2311      	movs	r3, #17
 8002d46:	18fb      	adds	r3, r7, r3
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d105      	bne.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d4e:	4b76      	ldr	r3, [pc, #472]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d52:	4b75      	ldr	r3, [pc, #468]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d54:	4979      	ldr	r1, [pc, #484]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002d56:	400a      	ands	r2, r1
 8002d58:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	4013      	ands	r3, r2
 8002d62:	d009      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d64:	4b70      	ldr	r3, [pc, #448]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d68:	2203      	movs	r2, #3
 8002d6a:	4393      	bics	r3, r2
 8002d6c:	0019      	movs	r1, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	4b6d      	ldr	r3, [pc, #436]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d74:	430a      	orrs	r2, r1
 8002d76:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	4013      	ands	r3, r2
 8002d80:	d009      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d82:	4b69      	ldr	r3, [pc, #420]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d86:	220c      	movs	r2, #12
 8002d88:	4393      	bics	r3, r2
 8002d8a:	0019      	movs	r1, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	4b65      	ldr	r3, [pc, #404]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d92:	430a      	orrs	r2, r1
 8002d94:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2210      	movs	r2, #16
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d009      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002da0:	4b61      	ldr	r3, [pc, #388]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da4:	4a66      	ldr	r2, [pc, #408]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	0019      	movs	r1, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	4b5e      	ldr	r3, [pc, #376]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002db0:	430a      	orrs	r2, r1
 8002db2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	2380      	movs	r3, #128	; 0x80
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	d009      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dc0:	4b59      	ldr	r3, [pc, #356]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc4:	4a5f      	ldr	r2, [pc, #380]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	0019      	movs	r1, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	699a      	ldr	r2, [r3, #24]
 8002dce:	4b56      	ldr	r3, [pc, #344]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d009      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002de0:	4b51      	ldr	r3, [pc, #324]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de4:	4a58      	ldr	r2, [pc, #352]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002de6:	4013      	ands	r3, r2
 8002de8:	0019      	movs	r1, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69da      	ldr	r2, [r3, #28]
 8002dee:	4b4e      	ldr	r3, [pc, #312]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002df0:	430a      	orrs	r2, r1
 8002df2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	d009      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dfe:	4b4a      	ldr	r3, [pc, #296]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e02:	4a52      	ldr	r2, [pc, #328]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	0019      	movs	r1, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	4b46      	ldr	r3, [pc, #280]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	2380      	movs	r3, #128	; 0x80
 8002e18:	01db      	lsls	r3, r3, #7
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	d015      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e1e:	4b42      	ldr	r3, [pc, #264]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	0899      	lsrs	r1, r3, #2
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1a      	ldr	r2, [r3, #32]
 8002e2a:	4b3f      	ldr	r3, [pc, #252]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a1a      	ldr	r2, [r3, #32]
 8002e34:	2380      	movs	r3, #128	; 0x80
 8002e36:	05db      	lsls	r3, r3, #23
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d106      	bne.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e3c:	4b3a      	ldr	r3, [pc, #232]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	4b39      	ldr	r3, [pc, #228]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e42:	2180      	movs	r1, #128	; 0x80
 8002e44:	0249      	lsls	r1, r1, #9
 8002e46:	430a      	orrs	r2, r1
 8002e48:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	2380      	movs	r3, #128	; 0x80
 8002e50:	031b      	lsls	r3, r3, #12
 8002e52:	4013      	ands	r3, r2
 8002e54:	d009      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e56:	4b34      	ldr	r3, [pc, #208]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5a:	2240      	movs	r2, #64	; 0x40
 8002e5c:	4393      	bics	r3, r2
 8002e5e:	0019      	movs	r1, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e64:	4b30      	ldr	r3, [pc, #192]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e66:	430a      	orrs	r2, r1
 8002e68:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	2380      	movs	r3, #128	; 0x80
 8002e70:	039b      	lsls	r3, r3, #14
 8002e72:	4013      	ands	r3, r2
 8002e74:	d016      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e76:	4b2c      	ldr	r3, [pc, #176]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7a:	4a35      	ldr	r2, [pc, #212]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	0019      	movs	r1, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e84:	4b28      	ldr	r3, [pc, #160]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e86:	430a      	orrs	r2, r1
 8002e88:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e8e:	2380      	movs	r3, #128	; 0x80
 8002e90:	03db      	lsls	r3, r3, #15
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d106      	bne.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002e96:	4b24      	ldr	r3, [pc, #144]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	4b23      	ldr	r3, [pc, #140]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e9c:	2180      	movs	r1, #128	; 0x80
 8002e9e:	0449      	lsls	r1, r1, #17
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	2380      	movs	r3, #128	; 0x80
 8002eaa:	03db      	lsls	r3, r3, #15
 8002eac:	4013      	ands	r3, r2
 8002eae:	d016      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002eb0:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb4:	4a27      	ldr	r2, [pc, #156]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	0019      	movs	r1, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ebe:	4b1a      	ldr	r3, [pc, #104]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec8:	2380      	movs	r3, #128	; 0x80
 8002eca:	045b      	lsls	r3, r3, #17
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d106      	bne.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002ed0:	4b15      	ldr	r3, [pc, #84]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	4b14      	ldr	r3, [pc, #80]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ed6:	2180      	movs	r1, #128	; 0x80
 8002ed8:	0449      	lsls	r1, r1, #17
 8002eda:	430a      	orrs	r2, r1
 8002edc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	2380      	movs	r3, #128	; 0x80
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	d016      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002eea:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eee:	4a1a      	ldr	r2, [pc, #104]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	0019      	movs	r1, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	695a      	ldr	r2, [r3, #20]
 8002ef8:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002efa:	430a      	orrs	r2, r1
 8002efc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695a      	ldr	r2, [r3, #20]
 8002f02:	2380      	movs	r3, #128	; 0x80
 8002f04:	01db      	lsls	r3, r3, #7
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d106      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002f0a:	4b07      	ldr	r3, [pc, #28]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f0c:	68da      	ldr	r2, [r3, #12]
 8002f0e:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f10:	2180      	movs	r1, #128	; 0x80
 8002f12:	0249      	lsls	r1, r1, #9
 8002f14:	430a      	orrs	r2, r1
 8002f16:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002f18:	2312      	movs	r3, #18
 8002f1a:	18fb      	adds	r3, r7, r3
 8002f1c:	781b      	ldrb	r3, [r3, #0]
}
 8002f1e:	0018      	movs	r0, r3
 8002f20:	46bd      	mov	sp, r7
 8002f22:	b006      	add	sp, #24
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	46c0      	nop			; (mov r8, r8)
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	40007000 	.word	0x40007000
 8002f30:	fffffcff 	.word	0xfffffcff
 8002f34:	fffeffff 	.word	0xfffeffff
 8002f38:	00001388 	.word	0x00001388
 8002f3c:	efffffff 	.word	0xefffffff
 8002f40:	fffff3ff 	.word	0xfffff3ff
 8002f44:	fff3ffff 	.word	0xfff3ffff
 8002f48:	ffcfffff 	.word	0xffcfffff
 8002f4c:	ffffcfff 	.word	0xffffcfff
 8002f50:	ffbfffff 	.word	0xffbfffff
 8002f54:	feffffff 	.word	0xfeffffff
 8002f58:	ffff3fff 	.word	0xffff3fff

08002f5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e046      	b.n	8002ffc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2288      	movs	r2, #136	; 0x88
 8002f72:	589b      	ldr	r3, [r3, r2]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d107      	bne.n	8002f88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2284      	movs	r2, #132	; 0x84
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	0018      	movs	r0, r3
 8002f84:	f7fd fec8 	bl	8000d18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2288      	movs	r2, #136	; 0x88
 8002f8c:	2124      	movs	r1, #36	; 0x24
 8002f8e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	438a      	bics	r2, r1
 8002f9e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f000 f9ae 	bl	8003304 <UART_SetConfig>
 8002fa8:	0003      	movs	r3, r0
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e024      	b.n	8002ffc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f000 fc5f 	bl	8003880 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	490d      	ldr	r1, [pc, #52]	; (8003004 <HAL_UART_Init+0xa8>)
 8002fce:	400a      	ands	r2, r1
 8002fd0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	212a      	movs	r1, #42	; 0x2a
 8002fde:	438a      	bics	r2, r1
 8002fe0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2101      	movs	r1, #1
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	f000 fcf7 	bl	80039e8 <UART_CheckIdleState>
 8002ffa:	0003      	movs	r3, r0
}
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	b002      	add	sp, #8
 8003002:	bd80      	pop	{r7, pc}
 8003004:	ffffb7ff 	.word	0xffffb7ff

08003008 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b08a      	sub	sp, #40	; 0x28
 800300c:	af02      	add	r7, sp, #8
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	603b      	str	r3, [r7, #0]
 8003014:	1dbb      	adds	r3, r7, #6
 8003016:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2288      	movs	r2, #136	; 0x88
 800301c:	589b      	ldr	r3, [r3, r2]
 800301e:	2b20      	cmp	r3, #32
 8003020:	d000      	beq.n	8003024 <HAL_UART_Transmit+0x1c>
 8003022:	e088      	b.n	8003136 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_UART_Transmit+0x2a>
 800302a:	1dbb      	adds	r3, r7, #6
 800302c:	881b      	ldrh	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e080      	b.n	8003138 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	2380      	movs	r3, #128	; 0x80
 800303c:	015b      	lsls	r3, r3, #5
 800303e:	429a      	cmp	r2, r3
 8003040:	d109      	bne.n	8003056 <HAL_UART_Transmit+0x4e>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d105      	bne.n	8003056 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2201      	movs	r2, #1
 800304e:	4013      	ands	r3, r2
 8003050:	d001      	beq.n	8003056 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e070      	b.n	8003138 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2290      	movs	r2, #144	; 0x90
 800305a:	2100      	movs	r1, #0
 800305c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2288      	movs	r2, #136	; 0x88
 8003062:	2121      	movs	r1, #33	; 0x21
 8003064:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003066:	f7fe fd1f 	bl	8001aa8 <HAL_GetTick>
 800306a:	0003      	movs	r3, r0
 800306c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1dba      	adds	r2, r7, #6
 8003072:	2154      	movs	r1, #84	; 0x54
 8003074:	8812      	ldrh	r2, [r2, #0]
 8003076:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	1dba      	adds	r2, r7, #6
 800307c:	2156      	movs	r1, #86	; 0x56
 800307e:	8812      	ldrh	r2, [r2, #0]
 8003080:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	2380      	movs	r3, #128	; 0x80
 8003088:	015b      	lsls	r3, r3, #5
 800308a:	429a      	cmp	r2, r3
 800308c:	d108      	bne.n	80030a0 <HAL_UART_Transmit+0x98>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d104      	bne.n	80030a0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003096:	2300      	movs	r3, #0
 8003098:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	61bb      	str	r3, [r7, #24]
 800309e:	e003      	b.n	80030a8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030a4:	2300      	movs	r3, #0
 80030a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030a8:	e02c      	b.n	8003104 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	0013      	movs	r3, r2
 80030b4:	2200      	movs	r2, #0
 80030b6:	2180      	movs	r1, #128	; 0x80
 80030b8:	f000 fce4 	bl	8003a84 <UART_WaitOnFlagUntilTimeout>
 80030bc:	1e03      	subs	r3, r0, #0
 80030be:	d001      	beq.n	80030c4 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e039      	b.n	8003138 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10b      	bne.n	80030e2 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	881b      	ldrh	r3, [r3, #0]
 80030ce:	001a      	movs	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	05d2      	lsls	r2, r2, #23
 80030d6:	0dd2      	lsrs	r2, r2, #23
 80030d8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	3302      	adds	r3, #2
 80030de:	61bb      	str	r3, [r7, #24]
 80030e0:	e007      	b.n	80030f2 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	781a      	ldrb	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	3301      	adds	r3, #1
 80030f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2256      	movs	r2, #86	; 0x56
 80030f6:	5a9b      	ldrh	r3, [r3, r2]
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b299      	uxth	r1, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2256      	movs	r2, #86	; 0x56
 8003102:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2256      	movs	r2, #86	; 0x56
 8003108:	5a9b      	ldrh	r3, [r3, r2]
 800310a:	b29b      	uxth	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1cc      	bne.n	80030aa <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	0013      	movs	r3, r2
 800311a:	2200      	movs	r2, #0
 800311c:	2140      	movs	r1, #64	; 0x40
 800311e:	f000 fcb1 	bl	8003a84 <UART_WaitOnFlagUntilTimeout>
 8003122:	1e03      	subs	r3, r0, #0
 8003124:	d001      	beq.n	800312a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e006      	b.n	8003138 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2288      	movs	r2, #136	; 0x88
 800312e:	2120      	movs	r1, #32
 8003130:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003132:	2300      	movs	r3, #0
 8003134:	e000      	b.n	8003138 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8003136:	2302      	movs	r3, #2
  }
}
 8003138:	0018      	movs	r0, r3
 800313a:	46bd      	mov	sp, r7
 800313c:	b008      	add	sp, #32
 800313e:	bd80      	pop	{r7, pc}

08003140 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b08a      	sub	sp, #40	; 0x28
 8003144:	af02      	add	r7, sp, #8
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	603b      	str	r3, [r7, #0]
 800314c:	1dbb      	adds	r3, r7, #6
 800314e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	228c      	movs	r2, #140	; 0x8c
 8003154:	589b      	ldr	r3, [r3, r2]
 8003156:	2b20      	cmp	r3, #32
 8003158:	d000      	beq.n	800315c <HAL_UART_Receive+0x1c>
 800315a:	e0cc      	b.n	80032f6 <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_UART_Receive+0x2a>
 8003162:	1dbb      	adds	r3, r7, #6
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e0c4      	b.n	80032f8 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	2380      	movs	r3, #128	; 0x80
 8003174:	015b      	lsls	r3, r3, #5
 8003176:	429a      	cmp	r2, r3
 8003178:	d109      	bne.n	800318e <HAL_UART_Receive+0x4e>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d105      	bne.n	800318e <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2201      	movs	r2, #1
 8003186:	4013      	ands	r3, r2
 8003188:	d001      	beq.n	800318e <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e0b4      	b.n	80032f8 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2290      	movs	r2, #144	; 0x90
 8003192:	2100      	movs	r1, #0
 8003194:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	228c      	movs	r2, #140	; 0x8c
 800319a:	2122      	movs	r1, #34	; 0x22
 800319c:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031a4:	f7fe fc80 	bl	8001aa8 <HAL_GetTick>
 80031a8:	0003      	movs	r3, r0
 80031aa:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	1dba      	adds	r2, r7, #6
 80031b0:	215c      	movs	r1, #92	; 0x5c
 80031b2:	8812      	ldrh	r2, [r2, #0]
 80031b4:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	1dba      	adds	r2, r7, #6
 80031ba:	215e      	movs	r1, #94	; 0x5e
 80031bc:	8812      	ldrh	r2, [r2, #0]
 80031be:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	2380      	movs	r3, #128	; 0x80
 80031c6:	015b      	lsls	r3, r3, #5
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d10d      	bne.n	80031e8 <HAL_UART_Receive+0xa8>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d104      	bne.n	80031de <HAL_UART_Receive+0x9e>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2260      	movs	r2, #96	; 0x60
 80031d8:	4949      	ldr	r1, [pc, #292]	; (8003300 <HAL_UART_Receive+0x1c0>)
 80031da:	5299      	strh	r1, [r3, r2]
 80031dc:	e02e      	b.n	800323c <HAL_UART_Receive+0xfc>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2260      	movs	r2, #96	; 0x60
 80031e2:	21ff      	movs	r1, #255	; 0xff
 80031e4:	5299      	strh	r1, [r3, r2]
 80031e6:	e029      	b.n	800323c <HAL_UART_Receive+0xfc>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10d      	bne.n	800320c <HAL_UART_Receive+0xcc>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d104      	bne.n	8003202 <HAL_UART_Receive+0xc2>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2260      	movs	r2, #96	; 0x60
 80031fc:	21ff      	movs	r1, #255	; 0xff
 80031fe:	5299      	strh	r1, [r3, r2]
 8003200:	e01c      	b.n	800323c <HAL_UART_Receive+0xfc>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2260      	movs	r2, #96	; 0x60
 8003206:	217f      	movs	r1, #127	; 0x7f
 8003208:	5299      	strh	r1, [r3, r2]
 800320a:	e017      	b.n	800323c <HAL_UART_Receive+0xfc>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	2380      	movs	r3, #128	; 0x80
 8003212:	055b      	lsls	r3, r3, #21
 8003214:	429a      	cmp	r2, r3
 8003216:	d10d      	bne.n	8003234 <HAL_UART_Receive+0xf4>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d104      	bne.n	800322a <HAL_UART_Receive+0xea>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2260      	movs	r2, #96	; 0x60
 8003224:	217f      	movs	r1, #127	; 0x7f
 8003226:	5299      	strh	r1, [r3, r2]
 8003228:	e008      	b.n	800323c <HAL_UART_Receive+0xfc>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2260      	movs	r2, #96	; 0x60
 800322e:	213f      	movs	r1, #63	; 0x3f
 8003230:	5299      	strh	r1, [r3, r2]
 8003232:	e003      	b.n	800323c <HAL_UART_Receive+0xfc>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2260      	movs	r2, #96	; 0x60
 8003238:	2100      	movs	r1, #0
 800323a:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800323c:	2312      	movs	r3, #18
 800323e:	18fb      	adds	r3, r7, r3
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	2160      	movs	r1, #96	; 0x60
 8003244:	5a52      	ldrh	r2, [r2, r1]
 8003246:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	2380      	movs	r3, #128	; 0x80
 800324e:	015b      	lsls	r3, r3, #5
 8003250:	429a      	cmp	r2, r3
 8003252:	d108      	bne.n	8003266 <HAL_UART_Receive+0x126>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d104      	bne.n	8003266 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800325c:	2300      	movs	r3, #0
 800325e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	61bb      	str	r3, [r7, #24]
 8003264:	e003      	b.n	800326e <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800326a:	2300      	movs	r3, #0
 800326c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800326e:	e036      	b.n	80032de <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	0013      	movs	r3, r2
 800327a:	2200      	movs	r2, #0
 800327c:	2120      	movs	r1, #32
 800327e:	f000 fc01 	bl	8003a84 <UART_WaitOnFlagUntilTimeout>
 8003282:	1e03      	subs	r3, r0, #0
 8003284:	d001      	beq.n	800328a <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e036      	b.n	80032f8 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10e      	bne.n	80032ae <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	b29b      	uxth	r3, r3
 8003298:	2212      	movs	r2, #18
 800329a:	18ba      	adds	r2, r7, r2
 800329c:	8812      	ldrh	r2, [r2, #0]
 800329e:	4013      	ands	r3, r2
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	3302      	adds	r3, #2
 80032aa:	61bb      	str	r3, [r7, #24]
 80032ac:	e00e      	b.n	80032cc <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2212      	movs	r2, #18
 80032b8:	18ba      	adds	r2, r7, r2
 80032ba:	8812      	ldrh	r2, [r2, #0]
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	4013      	ands	r3, r2
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	3301      	adds	r3, #1
 80032ca:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	225e      	movs	r2, #94	; 0x5e
 80032d0:	5a9b      	ldrh	r3, [r3, r2]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	3b01      	subs	r3, #1
 80032d6:	b299      	uxth	r1, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	225e      	movs	r2, #94	; 0x5e
 80032dc:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	225e      	movs	r2, #94	; 0x5e
 80032e2:	5a9b      	ldrh	r3, [r3, r2]
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1c2      	bne.n	8003270 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	228c      	movs	r2, #140	; 0x8c
 80032ee:	2120      	movs	r1, #32
 80032f0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	e000      	b.n	80032f8 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 80032f6:	2302      	movs	r3, #2
  }
}
 80032f8:	0018      	movs	r0, r3
 80032fa:	46bd      	mov	sp, r7
 80032fc:	b008      	add	sp, #32
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	000001ff 	.word	0x000001ff

08003304 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003304:	b5b0      	push	{r4, r5, r7, lr}
 8003306:	b090      	sub	sp, #64	; 0x40
 8003308:	af00      	add	r7, sp, #0
 800330a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800330c:	231a      	movs	r3, #26
 800330e:	2220      	movs	r2, #32
 8003310:	189b      	adds	r3, r3, r2
 8003312:	19db      	adds	r3, r3, r7
 8003314:	2200      	movs	r2, #0
 8003316:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	431a      	orrs	r2, r3
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	431a      	orrs	r2, r3
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	4313      	orrs	r3, r2
 800332e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4aaf      	ldr	r2, [pc, #700]	; (80035f4 <UART_SetConfig+0x2f0>)
 8003338:	4013      	ands	r3, r2
 800333a:	0019      	movs	r1, r3
 800333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003342:	430b      	orrs	r3, r1
 8003344:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	4aaa      	ldr	r2, [pc, #680]	; (80035f8 <UART_SetConfig+0x2f4>)
 800334e:	4013      	ands	r3, r2
 8003350:	0018      	movs	r0, r3
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	68d9      	ldr	r1, [r3, #12]
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	0003      	movs	r3, r0
 800335c:	430b      	orrs	r3, r1
 800335e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4aa4      	ldr	r2, [pc, #656]	; (80035fc <UART_SetConfig+0x2f8>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d004      	beq.n	800337a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003376:	4313      	orrs	r3, r2
 8003378:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	4a9f      	ldr	r2, [pc, #636]	; (8003600 <UART_SetConfig+0x2fc>)
 8003382:	4013      	ands	r3, r2
 8003384:	0019      	movs	r1, r3
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800338c:	430b      	orrs	r3, r1
 800338e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003396:	220f      	movs	r2, #15
 8003398:	4393      	bics	r3, r2
 800339a:	0018      	movs	r0, r3
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	0003      	movs	r3, r0
 80033a6:	430b      	orrs	r3, r1
 80033a8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a95      	ldr	r2, [pc, #596]	; (8003604 <UART_SetConfig+0x300>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d131      	bne.n	8003418 <UART_SetConfig+0x114>
 80033b4:	4b94      	ldr	r3, [pc, #592]	; (8003608 <UART_SetConfig+0x304>)
 80033b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b8:	2203      	movs	r2, #3
 80033ba:	4013      	ands	r3, r2
 80033bc:	2b03      	cmp	r3, #3
 80033be:	d01d      	beq.n	80033fc <UART_SetConfig+0xf8>
 80033c0:	d823      	bhi.n	800340a <UART_SetConfig+0x106>
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d00c      	beq.n	80033e0 <UART_SetConfig+0xdc>
 80033c6:	d820      	bhi.n	800340a <UART_SetConfig+0x106>
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d002      	beq.n	80033d2 <UART_SetConfig+0xce>
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d00e      	beq.n	80033ee <UART_SetConfig+0xea>
 80033d0:	e01b      	b.n	800340a <UART_SetConfig+0x106>
 80033d2:	231b      	movs	r3, #27
 80033d4:	2220      	movs	r2, #32
 80033d6:	189b      	adds	r3, r3, r2
 80033d8:	19db      	adds	r3, r3, r7
 80033da:	2200      	movs	r2, #0
 80033dc:	701a      	strb	r2, [r3, #0]
 80033de:	e0b4      	b.n	800354a <UART_SetConfig+0x246>
 80033e0:	231b      	movs	r3, #27
 80033e2:	2220      	movs	r2, #32
 80033e4:	189b      	adds	r3, r3, r2
 80033e6:	19db      	adds	r3, r3, r7
 80033e8:	2202      	movs	r2, #2
 80033ea:	701a      	strb	r2, [r3, #0]
 80033ec:	e0ad      	b.n	800354a <UART_SetConfig+0x246>
 80033ee:	231b      	movs	r3, #27
 80033f0:	2220      	movs	r2, #32
 80033f2:	189b      	adds	r3, r3, r2
 80033f4:	19db      	adds	r3, r3, r7
 80033f6:	2204      	movs	r2, #4
 80033f8:	701a      	strb	r2, [r3, #0]
 80033fa:	e0a6      	b.n	800354a <UART_SetConfig+0x246>
 80033fc:	231b      	movs	r3, #27
 80033fe:	2220      	movs	r2, #32
 8003400:	189b      	adds	r3, r3, r2
 8003402:	19db      	adds	r3, r3, r7
 8003404:	2208      	movs	r2, #8
 8003406:	701a      	strb	r2, [r3, #0]
 8003408:	e09f      	b.n	800354a <UART_SetConfig+0x246>
 800340a:	231b      	movs	r3, #27
 800340c:	2220      	movs	r2, #32
 800340e:	189b      	adds	r3, r3, r2
 8003410:	19db      	adds	r3, r3, r7
 8003412:	2210      	movs	r2, #16
 8003414:	701a      	strb	r2, [r3, #0]
 8003416:	e098      	b.n	800354a <UART_SetConfig+0x246>
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a7b      	ldr	r2, [pc, #492]	; (800360c <UART_SetConfig+0x308>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d131      	bne.n	8003486 <UART_SetConfig+0x182>
 8003422:	4b79      	ldr	r3, [pc, #484]	; (8003608 <UART_SetConfig+0x304>)
 8003424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003426:	220c      	movs	r2, #12
 8003428:	4013      	ands	r3, r2
 800342a:	2b0c      	cmp	r3, #12
 800342c:	d01d      	beq.n	800346a <UART_SetConfig+0x166>
 800342e:	d823      	bhi.n	8003478 <UART_SetConfig+0x174>
 8003430:	2b08      	cmp	r3, #8
 8003432:	d00c      	beq.n	800344e <UART_SetConfig+0x14a>
 8003434:	d820      	bhi.n	8003478 <UART_SetConfig+0x174>
 8003436:	2b00      	cmp	r3, #0
 8003438:	d002      	beq.n	8003440 <UART_SetConfig+0x13c>
 800343a:	2b04      	cmp	r3, #4
 800343c:	d00e      	beq.n	800345c <UART_SetConfig+0x158>
 800343e:	e01b      	b.n	8003478 <UART_SetConfig+0x174>
 8003440:	231b      	movs	r3, #27
 8003442:	2220      	movs	r2, #32
 8003444:	189b      	adds	r3, r3, r2
 8003446:	19db      	adds	r3, r3, r7
 8003448:	2200      	movs	r2, #0
 800344a:	701a      	strb	r2, [r3, #0]
 800344c:	e07d      	b.n	800354a <UART_SetConfig+0x246>
 800344e:	231b      	movs	r3, #27
 8003450:	2220      	movs	r2, #32
 8003452:	189b      	adds	r3, r3, r2
 8003454:	19db      	adds	r3, r3, r7
 8003456:	2202      	movs	r2, #2
 8003458:	701a      	strb	r2, [r3, #0]
 800345a:	e076      	b.n	800354a <UART_SetConfig+0x246>
 800345c:	231b      	movs	r3, #27
 800345e:	2220      	movs	r2, #32
 8003460:	189b      	adds	r3, r3, r2
 8003462:	19db      	adds	r3, r3, r7
 8003464:	2204      	movs	r2, #4
 8003466:	701a      	strb	r2, [r3, #0]
 8003468:	e06f      	b.n	800354a <UART_SetConfig+0x246>
 800346a:	231b      	movs	r3, #27
 800346c:	2220      	movs	r2, #32
 800346e:	189b      	adds	r3, r3, r2
 8003470:	19db      	adds	r3, r3, r7
 8003472:	2208      	movs	r2, #8
 8003474:	701a      	strb	r2, [r3, #0]
 8003476:	e068      	b.n	800354a <UART_SetConfig+0x246>
 8003478:	231b      	movs	r3, #27
 800347a:	2220      	movs	r2, #32
 800347c:	189b      	adds	r3, r3, r2
 800347e:	19db      	adds	r3, r3, r7
 8003480:	2210      	movs	r2, #16
 8003482:	701a      	strb	r2, [r3, #0]
 8003484:	e061      	b.n	800354a <UART_SetConfig+0x246>
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a61      	ldr	r2, [pc, #388]	; (8003610 <UART_SetConfig+0x30c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d106      	bne.n	800349e <UART_SetConfig+0x19a>
 8003490:	231b      	movs	r3, #27
 8003492:	2220      	movs	r2, #32
 8003494:	189b      	adds	r3, r3, r2
 8003496:	19db      	adds	r3, r3, r7
 8003498:	2200      	movs	r2, #0
 800349a:	701a      	strb	r2, [r3, #0]
 800349c:	e055      	b.n	800354a <UART_SetConfig+0x246>
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a5c      	ldr	r2, [pc, #368]	; (8003614 <UART_SetConfig+0x310>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d106      	bne.n	80034b6 <UART_SetConfig+0x1b2>
 80034a8:	231b      	movs	r3, #27
 80034aa:	2220      	movs	r2, #32
 80034ac:	189b      	adds	r3, r3, r2
 80034ae:	19db      	adds	r3, r3, r7
 80034b0:	2200      	movs	r2, #0
 80034b2:	701a      	strb	r2, [r3, #0]
 80034b4:	e049      	b.n	800354a <UART_SetConfig+0x246>
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a50      	ldr	r2, [pc, #320]	; (80035fc <UART_SetConfig+0x2f8>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d13e      	bne.n	800353e <UART_SetConfig+0x23a>
 80034c0:	4b51      	ldr	r3, [pc, #324]	; (8003608 <UART_SetConfig+0x304>)
 80034c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034c4:	23c0      	movs	r3, #192	; 0xc0
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	4013      	ands	r3, r2
 80034ca:	22c0      	movs	r2, #192	; 0xc0
 80034cc:	0112      	lsls	r2, r2, #4
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d027      	beq.n	8003522 <UART_SetConfig+0x21e>
 80034d2:	22c0      	movs	r2, #192	; 0xc0
 80034d4:	0112      	lsls	r2, r2, #4
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d82a      	bhi.n	8003530 <UART_SetConfig+0x22c>
 80034da:	2280      	movs	r2, #128	; 0x80
 80034dc:	0112      	lsls	r2, r2, #4
 80034de:	4293      	cmp	r3, r2
 80034e0:	d011      	beq.n	8003506 <UART_SetConfig+0x202>
 80034e2:	2280      	movs	r2, #128	; 0x80
 80034e4:	0112      	lsls	r2, r2, #4
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d822      	bhi.n	8003530 <UART_SetConfig+0x22c>
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d004      	beq.n	80034f8 <UART_SetConfig+0x1f4>
 80034ee:	2280      	movs	r2, #128	; 0x80
 80034f0:	00d2      	lsls	r2, r2, #3
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d00e      	beq.n	8003514 <UART_SetConfig+0x210>
 80034f6:	e01b      	b.n	8003530 <UART_SetConfig+0x22c>
 80034f8:	231b      	movs	r3, #27
 80034fa:	2220      	movs	r2, #32
 80034fc:	189b      	adds	r3, r3, r2
 80034fe:	19db      	adds	r3, r3, r7
 8003500:	2200      	movs	r2, #0
 8003502:	701a      	strb	r2, [r3, #0]
 8003504:	e021      	b.n	800354a <UART_SetConfig+0x246>
 8003506:	231b      	movs	r3, #27
 8003508:	2220      	movs	r2, #32
 800350a:	189b      	adds	r3, r3, r2
 800350c:	19db      	adds	r3, r3, r7
 800350e:	2202      	movs	r2, #2
 8003510:	701a      	strb	r2, [r3, #0]
 8003512:	e01a      	b.n	800354a <UART_SetConfig+0x246>
 8003514:	231b      	movs	r3, #27
 8003516:	2220      	movs	r2, #32
 8003518:	189b      	adds	r3, r3, r2
 800351a:	19db      	adds	r3, r3, r7
 800351c:	2204      	movs	r2, #4
 800351e:	701a      	strb	r2, [r3, #0]
 8003520:	e013      	b.n	800354a <UART_SetConfig+0x246>
 8003522:	231b      	movs	r3, #27
 8003524:	2220      	movs	r2, #32
 8003526:	189b      	adds	r3, r3, r2
 8003528:	19db      	adds	r3, r3, r7
 800352a:	2208      	movs	r2, #8
 800352c:	701a      	strb	r2, [r3, #0]
 800352e:	e00c      	b.n	800354a <UART_SetConfig+0x246>
 8003530:	231b      	movs	r3, #27
 8003532:	2220      	movs	r2, #32
 8003534:	189b      	adds	r3, r3, r2
 8003536:	19db      	adds	r3, r3, r7
 8003538:	2210      	movs	r2, #16
 800353a:	701a      	strb	r2, [r3, #0]
 800353c:	e005      	b.n	800354a <UART_SetConfig+0x246>
 800353e:	231b      	movs	r3, #27
 8003540:	2220      	movs	r2, #32
 8003542:	189b      	adds	r3, r3, r2
 8003544:	19db      	adds	r3, r3, r7
 8003546:	2210      	movs	r2, #16
 8003548:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a2b      	ldr	r2, [pc, #172]	; (80035fc <UART_SetConfig+0x2f8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d000      	beq.n	8003556 <UART_SetConfig+0x252>
 8003554:	e0a9      	b.n	80036aa <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003556:	231b      	movs	r3, #27
 8003558:	2220      	movs	r2, #32
 800355a:	189b      	adds	r3, r3, r2
 800355c:	19db      	adds	r3, r3, r7
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b08      	cmp	r3, #8
 8003562:	d015      	beq.n	8003590 <UART_SetConfig+0x28c>
 8003564:	dc18      	bgt.n	8003598 <UART_SetConfig+0x294>
 8003566:	2b04      	cmp	r3, #4
 8003568:	d00d      	beq.n	8003586 <UART_SetConfig+0x282>
 800356a:	dc15      	bgt.n	8003598 <UART_SetConfig+0x294>
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <UART_SetConfig+0x272>
 8003570:	2b02      	cmp	r3, #2
 8003572:	d005      	beq.n	8003580 <UART_SetConfig+0x27c>
 8003574:	e010      	b.n	8003598 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003576:	f7ff fb23 	bl	8002bc0 <HAL_RCC_GetPCLK1Freq>
 800357a:	0003      	movs	r3, r0
 800357c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800357e:	e014      	b.n	80035aa <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003580:	4b25      	ldr	r3, [pc, #148]	; (8003618 <UART_SetConfig+0x314>)
 8003582:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003584:	e011      	b.n	80035aa <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003586:	f7ff fa8f 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 800358a:	0003      	movs	r3, r0
 800358c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800358e:	e00c      	b.n	80035aa <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003590:	2380      	movs	r3, #128	; 0x80
 8003592:	021b      	lsls	r3, r3, #8
 8003594:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003596:	e008      	b.n	80035aa <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8003598:	2300      	movs	r3, #0
 800359a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800359c:	231a      	movs	r3, #26
 800359e:	2220      	movs	r2, #32
 80035a0:	189b      	adds	r3, r3, r2
 80035a2:	19db      	adds	r3, r3, r7
 80035a4:	2201      	movs	r2, #1
 80035a6:	701a      	strb	r2, [r3, #0]
        break;
 80035a8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80035aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d100      	bne.n	80035b2 <UART_SetConfig+0x2ae>
 80035b0:	e14b      	b.n	800384a <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035b6:	4b19      	ldr	r3, [pc, #100]	; (800361c <UART_SetConfig+0x318>)
 80035b8:	0052      	lsls	r2, r2, #1
 80035ba:	5ad3      	ldrh	r3, [r2, r3]
 80035bc:	0019      	movs	r1, r3
 80035be:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80035c0:	f7fc fda8 	bl	8000114 <__udivsi3>
 80035c4:	0003      	movs	r3, r0
 80035c6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	0013      	movs	r3, r2
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	189b      	adds	r3, r3, r2
 80035d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d305      	bcc.n	80035e4 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d91d      	bls.n	8003620 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80035e4:	231a      	movs	r3, #26
 80035e6:	2220      	movs	r2, #32
 80035e8:	189b      	adds	r3, r3, r2
 80035ea:	19db      	adds	r3, r3, r7
 80035ec:	2201      	movs	r2, #1
 80035ee:	701a      	strb	r2, [r3, #0]
 80035f0:	e12b      	b.n	800384a <UART_SetConfig+0x546>
 80035f2:	46c0      	nop			; (mov r8, r8)
 80035f4:	cfff69f3 	.word	0xcfff69f3
 80035f8:	ffffcfff 	.word	0xffffcfff
 80035fc:	40008000 	.word	0x40008000
 8003600:	11fff4ff 	.word	0x11fff4ff
 8003604:	40013800 	.word	0x40013800
 8003608:	40021000 	.word	0x40021000
 800360c:	40004400 	.word	0x40004400
 8003610:	40004800 	.word	0x40004800
 8003614:	40004c00 	.word	0x40004c00
 8003618:	00f42400 	.word	0x00f42400
 800361c:	08005598 	.word	0x08005598
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003622:	61bb      	str	r3, [r7, #24]
 8003624:	2300      	movs	r3, #0
 8003626:	61fb      	str	r3, [r7, #28]
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800362c:	4b92      	ldr	r3, [pc, #584]	; (8003878 <UART_SetConfig+0x574>)
 800362e:	0052      	lsls	r2, r2, #1
 8003630:	5ad3      	ldrh	r3, [r2, r3]
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	2300      	movs	r3, #0
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	69b8      	ldr	r0, [r7, #24]
 800363e:	69f9      	ldr	r1, [r7, #28]
 8003640:	f7fc fede 	bl	8000400 <__aeabi_uldivmod>
 8003644:	0002      	movs	r2, r0
 8003646:	000b      	movs	r3, r1
 8003648:	0e11      	lsrs	r1, r2, #24
 800364a:	021d      	lsls	r5, r3, #8
 800364c:	430d      	orrs	r5, r1
 800364e:	0214      	lsls	r4, r2, #8
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	085b      	lsrs	r3, r3, #1
 8003656:	60bb      	str	r3, [r7, #8]
 8003658:	2300      	movs	r3, #0
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	68b8      	ldr	r0, [r7, #8]
 800365e:	68f9      	ldr	r1, [r7, #12]
 8003660:	1900      	adds	r0, r0, r4
 8003662:	4169      	adcs	r1, r5
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	603b      	str	r3, [r7, #0]
 800366a:	2300      	movs	r3, #0
 800366c:	607b      	str	r3, [r7, #4]
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f7fc fec5 	bl	8000400 <__aeabi_uldivmod>
 8003676:	0002      	movs	r2, r0
 8003678:	000b      	movs	r3, r1
 800367a:	0013      	movs	r3, r2
 800367c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800367e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003680:	23c0      	movs	r3, #192	; 0xc0
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	429a      	cmp	r2, r3
 8003686:	d309      	bcc.n	800369c <UART_SetConfig+0x398>
 8003688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800368a:	2380      	movs	r3, #128	; 0x80
 800368c:	035b      	lsls	r3, r3, #13
 800368e:	429a      	cmp	r2, r3
 8003690:	d204      	bcs.n	800369c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003698:	60da      	str	r2, [r3, #12]
 800369a:	e0d6      	b.n	800384a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800369c:	231a      	movs	r3, #26
 800369e:	2220      	movs	r2, #32
 80036a0:	189b      	adds	r3, r3, r2
 80036a2:	19db      	adds	r3, r3, r7
 80036a4:	2201      	movs	r2, #1
 80036a6:	701a      	strb	r2, [r3, #0]
 80036a8:	e0cf      	b.n	800384a <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	69da      	ldr	r2, [r3, #28]
 80036ae:	2380      	movs	r3, #128	; 0x80
 80036b0:	021b      	lsls	r3, r3, #8
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d000      	beq.n	80036b8 <UART_SetConfig+0x3b4>
 80036b6:	e070      	b.n	800379a <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80036b8:	231b      	movs	r3, #27
 80036ba:	2220      	movs	r2, #32
 80036bc:	189b      	adds	r3, r3, r2
 80036be:	19db      	adds	r3, r3, r7
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	2b08      	cmp	r3, #8
 80036c4:	d015      	beq.n	80036f2 <UART_SetConfig+0x3ee>
 80036c6:	dc18      	bgt.n	80036fa <UART_SetConfig+0x3f6>
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	d00d      	beq.n	80036e8 <UART_SetConfig+0x3e4>
 80036cc:	dc15      	bgt.n	80036fa <UART_SetConfig+0x3f6>
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <UART_SetConfig+0x3d4>
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d005      	beq.n	80036e2 <UART_SetConfig+0x3de>
 80036d6:	e010      	b.n	80036fa <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036d8:	f7ff fa72 	bl	8002bc0 <HAL_RCC_GetPCLK1Freq>
 80036dc:	0003      	movs	r3, r0
 80036de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80036e0:	e014      	b.n	800370c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036e2:	4b66      	ldr	r3, [pc, #408]	; (800387c <UART_SetConfig+0x578>)
 80036e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80036e6:	e011      	b.n	800370c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036e8:	f7ff f9de 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 80036ec:	0003      	movs	r3, r0
 80036ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80036f0:	e00c      	b.n	800370c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036f2:	2380      	movs	r3, #128	; 0x80
 80036f4:	021b      	lsls	r3, r3, #8
 80036f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80036f8:	e008      	b.n	800370c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80036fe:	231a      	movs	r3, #26
 8003700:	2220      	movs	r2, #32
 8003702:	189b      	adds	r3, r3, r2
 8003704:	19db      	adds	r3, r3, r7
 8003706:	2201      	movs	r2, #1
 8003708:	701a      	strb	r2, [r3, #0]
        break;
 800370a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800370c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800370e:	2b00      	cmp	r3, #0
 8003710:	d100      	bne.n	8003714 <UART_SetConfig+0x410>
 8003712:	e09a      	b.n	800384a <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003718:	4b57      	ldr	r3, [pc, #348]	; (8003878 <UART_SetConfig+0x574>)
 800371a:	0052      	lsls	r2, r2, #1
 800371c:	5ad3      	ldrh	r3, [r2, r3]
 800371e:	0019      	movs	r1, r3
 8003720:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003722:	f7fc fcf7 	bl	8000114 <__udivsi3>
 8003726:	0003      	movs	r3, r0
 8003728:	005a      	lsls	r2, r3, #1
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	085b      	lsrs	r3, r3, #1
 8003730:	18d2      	adds	r2, r2, r3
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	0019      	movs	r1, r3
 8003738:	0010      	movs	r0, r2
 800373a:	f7fc fceb 	bl	8000114 <__udivsi3>
 800373e:	0003      	movs	r3, r0
 8003740:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003744:	2b0f      	cmp	r3, #15
 8003746:	d921      	bls.n	800378c <UART_SetConfig+0x488>
 8003748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800374a:	2380      	movs	r3, #128	; 0x80
 800374c:	025b      	lsls	r3, r3, #9
 800374e:	429a      	cmp	r2, r3
 8003750:	d21c      	bcs.n	800378c <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003754:	b29a      	uxth	r2, r3
 8003756:	200e      	movs	r0, #14
 8003758:	2420      	movs	r4, #32
 800375a:	1903      	adds	r3, r0, r4
 800375c:	19db      	adds	r3, r3, r7
 800375e:	210f      	movs	r1, #15
 8003760:	438a      	bics	r2, r1
 8003762:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003766:	085b      	lsrs	r3, r3, #1
 8003768:	b29b      	uxth	r3, r3
 800376a:	2207      	movs	r2, #7
 800376c:	4013      	ands	r3, r2
 800376e:	b299      	uxth	r1, r3
 8003770:	1903      	adds	r3, r0, r4
 8003772:	19db      	adds	r3, r3, r7
 8003774:	1902      	adds	r2, r0, r4
 8003776:	19d2      	adds	r2, r2, r7
 8003778:	8812      	ldrh	r2, [r2, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	1902      	adds	r2, r0, r4
 8003784:	19d2      	adds	r2, r2, r7
 8003786:	8812      	ldrh	r2, [r2, #0]
 8003788:	60da      	str	r2, [r3, #12]
 800378a:	e05e      	b.n	800384a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800378c:	231a      	movs	r3, #26
 800378e:	2220      	movs	r2, #32
 8003790:	189b      	adds	r3, r3, r2
 8003792:	19db      	adds	r3, r3, r7
 8003794:	2201      	movs	r2, #1
 8003796:	701a      	strb	r2, [r3, #0]
 8003798:	e057      	b.n	800384a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800379a:	231b      	movs	r3, #27
 800379c:	2220      	movs	r2, #32
 800379e:	189b      	adds	r3, r3, r2
 80037a0:	19db      	adds	r3, r3, r7
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d015      	beq.n	80037d4 <UART_SetConfig+0x4d0>
 80037a8:	dc18      	bgt.n	80037dc <UART_SetConfig+0x4d8>
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d00d      	beq.n	80037ca <UART_SetConfig+0x4c6>
 80037ae:	dc15      	bgt.n	80037dc <UART_SetConfig+0x4d8>
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d002      	beq.n	80037ba <UART_SetConfig+0x4b6>
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d005      	beq.n	80037c4 <UART_SetConfig+0x4c0>
 80037b8:	e010      	b.n	80037dc <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037ba:	f7ff fa01 	bl	8002bc0 <HAL_RCC_GetPCLK1Freq>
 80037be:	0003      	movs	r3, r0
 80037c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80037c2:	e014      	b.n	80037ee <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037c4:	4b2d      	ldr	r3, [pc, #180]	; (800387c <UART_SetConfig+0x578>)
 80037c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80037c8:	e011      	b.n	80037ee <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ca:	f7ff f96d 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 80037ce:	0003      	movs	r3, r0
 80037d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80037d2:	e00c      	b.n	80037ee <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037d4:	2380      	movs	r3, #128	; 0x80
 80037d6:	021b      	lsls	r3, r3, #8
 80037d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80037da:	e008      	b.n	80037ee <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80037dc:	2300      	movs	r3, #0
 80037de:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80037e0:	231a      	movs	r3, #26
 80037e2:	2220      	movs	r2, #32
 80037e4:	189b      	adds	r3, r3, r2
 80037e6:	19db      	adds	r3, r3, r7
 80037e8:	2201      	movs	r2, #1
 80037ea:	701a      	strb	r2, [r3, #0]
        break;
 80037ec:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80037ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d02a      	beq.n	800384a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037f8:	4b1f      	ldr	r3, [pc, #124]	; (8003878 <UART_SetConfig+0x574>)
 80037fa:	0052      	lsls	r2, r2, #1
 80037fc:	5ad3      	ldrh	r3, [r2, r3]
 80037fe:	0019      	movs	r1, r3
 8003800:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003802:	f7fc fc87 	bl	8000114 <__udivsi3>
 8003806:	0003      	movs	r3, r0
 8003808:	001a      	movs	r2, r3
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	085b      	lsrs	r3, r3, #1
 8003810:	18d2      	adds	r2, r2, r3
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	0019      	movs	r1, r3
 8003818:	0010      	movs	r0, r2
 800381a:	f7fc fc7b 	bl	8000114 <__udivsi3>
 800381e:	0003      	movs	r3, r0
 8003820:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003824:	2b0f      	cmp	r3, #15
 8003826:	d90a      	bls.n	800383e <UART_SetConfig+0x53a>
 8003828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800382a:	2380      	movs	r3, #128	; 0x80
 800382c:	025b      	lsls	r3, r3, #9
 800382e:	429a      	cmp	r2, r3
 8003830:	d205      	bcs.n	800383e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003834:	b29a      	uxth	r2, r3
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	60da      	str	r2, [r3, #12]
 800383c:	e005      	b.n	800384a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800383e:	231a      	movs	r3, #26
 8003840:	2220      	movs	r2, #32
 8003842:	189b      	adds	r3, r3, r2
 8003844:	19db      	adds	r3, r3, r7
 8003846:	2201      	movs	r2, #1
 8003848:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	226a      	movs	r2, #106	; 0x6a
 800384e:	2101      	movs	r1, #1
 8003850:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	2268      	movs	r2, #104	; 0x68
 8003856:	2101      	movs	r1, #1
 8003858:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	2200      	movs	r2, #0
 800385e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	2200      	movs	r2, #0
 8003864:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003866:	231a      	movs	r3, #26
 8003868:	2220      	movs	r2, #32
 800386a:	189b      	adds	r3, r3, r2
 800386c:	19db      	adds	r3, r3, r7
 800386e:	781b      	ldrb	r3, [r3, #0]
}
 8003870:	0018      	movs	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	b010      	add	sp, #64	; 0x40
 8003876:	bdb0      	pop	{r4, r5, r7, pc}
 8003878:	08005598 	.word	0x08005598
 800387c:	00f42400 	.word	0x00f42400

08003880 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388c:	2201      	movs	r2, #1
 800388e:	4013      	ands	r3, r2
 8003890:	d00b      	beq.n	80038aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	4a4a      	ldr	r2, [pc, #296]	; (80039c4 <UART_AdvFeatureConfig+0x144>)
 800389a:	4013      	ands	r3, r2
 800389c:	0019      	movs	r1, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ae:	2202      	movs	r2, #2
 80038b0:	4013      	ands	r3, r2
 80038b2:	d00b      	beq.n	80038cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	4a43      	ldr	r2, [pc, #268]	; (80039c8 <UART_AdvFeatureConfig+0x148>)
 80038bc:	4013      	ands	r3, r2
 80038be:	0019      	movs	r1, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d0:	2204      	movs	r2, #4
 80038d2:	4013      	ands	r3, r2
 80038d4:	d00b      	beq.n	80038ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	4a3b      	ldr	r2, [pc, #236]	; (80039cc <UART_AdvFeatureConfig+0x14c>)
 80038de:	4013      	ands	r3, r2
 80038e0:	0019      	movs	r1, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f2:	2208      	movs	r2, #8
 80038f4:	4013      	ands	r3, r2
 80038f6:	d00b      	beq.n	8003910 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	4a34      	ldr	r2, [pc, #208]	; (80039d0 <UART_AdvFeatureConfig+0x150>)
 8003900:	4013      	ands	r3, r2
 8003902:	0019      	movs	r1, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003914:	2210      	movs	r2, #16
 8003916:	4013      	ands	r3, r2
 8003918:	d00b      	beq.n	8003932 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	4a2c      	ldr	r2, [pc, #176]	; (80039d4 <UART_AdvFeatureConfig+0x154>)
 8003922:	4013      	ands	r3, r2
 8003924:	0019      	movs	r1, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003936:	2220      	movs	r2, #32
 8003938:	4013      	ands	r3, r2
 800393a:	d00b      	beq.n	8003954 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	4a25      	ldr	r2, [pc, #148]	; (80039d8 <UART_AdvFeatureConfig+0x158>)
 8003944:	4013      	ands	r3, r2
 8003946:	0019      	movs	r1, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003958:	2240      	movs	r2, #64	; 0x40
 800395a:	4013      	ands	r3, r2
 800395c:	d01d      	beq.n	800399a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	4a1d      	ldr	r2, [pc, #116]	; (80039dc <UART_AdvFeatureConfig+0x15c>)
 8003966:	4013      	ands	r3, r2
 8003968:	0019      	movs	r1, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800397a:	2380      	movs	r3, #128	; 0x80
 800397c:	035b      	lsls	r3, r3, #13
 800397e:	429a      	cmp	r2, r3
 8003980:	d10b      	bne.n	800399a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	4a15      	ldr	r2, [pc, #84]	; (80039e0 <UART_AdvFeatureConfig+0x160>)
 800398a:	4013      	ands	r3, r2
 800398c:	0019      	movs	r1, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399e:	2280      	movs	r2, #128	; 0x80
 80039a0:	4013      	ands	r3, r2
 80039a2:	d00b      	beq.n	80039bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	4a0e      	ldr	r2, [pc, #56]	; (80039e4 <UART_AdvFeatureConfig+0x164>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	0019      	movs	r1, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	605a      	str	r2, [r3, #4]
  }
}
 80039bc:	46c0      	nop			; (mov r8, r8)
 80039be:	46bd      	mov	sp, r7
 80039c0:	b002      	add	sp, #8
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	fffdffff 	.word	0xfffdffff
 80039c8:	fffeffff 	.word	0xfffeffff
 80039cc:	fffbffff 	.word	0xfffbffff
 80039d0:	ffff7fff 	.word	0xffff7fff
 80039d4:	ffffefff 	.word	0xffffefff
 80039d8:	ffffdfff 	.word	0xffffdfff
 80039dc:	ffefffff 	.word	0xffefffff
 80039e0:	ff9fffff 	.word	0xff9fffff
 80039e4:	fff7ffff 	.word	0xfff7ffff

080039e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af02      	add	r7, sp, #8
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2290      	movs	r2, #144	; 0x90
 80039f4:	2100      	movs	r1, #0
 80039f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039f8:	f7fe f856 	bl	8001aa8 <HAL_GetTick>
 80039fc:	0003      	movs	r3, r0
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2208      	movs	r2, #8
 8003a08:	4013      	ands	r3, r2
 8003a0a:	2b08      	cmp	r3, #8
 8003a0c:	d10c      	bne.n	8003a28 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2280      	movs	r2, #128	; 0x80
 8003a12:	0391      	lsls	r1, r2, #14
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	4a1a      	ldr	r2, [pc, #104]	; (8003a80 <UART_CheckIdleState+0x98>)
 8003a18:	9200      	str	r2, [sp, #0]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f000 f832 	bl	8003a84 <UART_WaitOnFlagUntilTimeout>
 8003a20:	1e03      	subs	r3, r0, #0
 8003a22:	d001      	beq.n	8003a28 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e026      	b.n	8003a76 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2204      	movs	r2, #4
 8003a30:	4013      	ands	r3, r2
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d10c      	bne.n	8003a50 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2280      	movs	r2, #128	; 0x80
 8003a3a:	03d1      	lsls	r1, r2, #15
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	4a10      	ldr	r2, [pc, #64]	; (8003a80 <UART_CheckIdleState+0x98>)
 8003a40:	9200      	str	r2, [sp, #0]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f000 f81e 	bl	8003a84 <UART_WaitOnFlagUntilTimeout>
 8003a48:	1e03      	subs	r3, r0, #0
 8003a4a:	d001      	beq.n	8003a50 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e012      	b.n	8003a76 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2288      	movs	r2, #136	; 0x88
 8003a54:	2120      	movs	r1, #32
 8003a56:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	228c      	movs	r2, #140	; 0x8c
 8003a5c:	2120      	movs	r1, #32
 8003a5e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2284      	movs	r2, #132	; 0x84
 8003a70:	2100      	movs	r1, #0
 8003a72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	0018      	movs	r0, r3
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	b004      	add	sp, #16
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	01ffffff 	.word	0x01ffffff

08003a84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b094      	sub	sp, #80	; 0x50
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	1dfb      	adds	r3, r7, #7
 8003a92:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a94:	e0a7      	b.n	8003be6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a98:	3301      	adds	r3, #1
 8003a9a:	d100      	bne.n	8003a9e <UART_WaitOnFlagUntilTimeout+0x1a>
 8003a9c:	e0a3      	b.n	8003be6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a9e:	f7fe f803 	bl	8001aa8 <HAL_GetTick>
 8003aa2:	0002      	movs	r2, r0
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d302      	bcc.n	8003ab4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003aae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d13f      	bne.n	8003b34 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ab4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003abc:	647b      	str	r3, [r7, #68]	; 0x44
 8003abe:	2301      	movs	r3, #1
 8003ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac4:	f383 8810 	msr	PRIMASK, r3
}
 8003ac8:	46c0      	nop			; (mov r8, r8)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	494e      	ldr	r1, [pc, #312]	; (8003c10 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003ad6:	400a      	ands	r2, r1
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003adc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae0:	f383 8810 	msr	PRIMASK, r3
}
 8003ae4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ae6:	f3ef 8310 	mrs	r3, PRIMASK
 8003aea:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aee:	643b      	str	r3, [r7, #64]	; 0x40
 8003af0:	2301      	movs	r3, #1
 8003af2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af6:	f383 8810 	msr	PRIMASK, r3
}
 8003afa:	46c0      	nop			; (mov r8, r8)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689a      	ldr	r2, [r3, #8]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2101      	movs	r1, #1
 8003b08:	438a      	bics	r2, r1
 8003b0a:	609a      	str	r2, [r3, #8]
 8003b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b12:	f383 8810 	msr	PRIMASK, r3
}
 8003b16:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2288      	movs	r2, #136	; 0x88
 8003b1c:	2120      	movs	r1, #32
 8003b1e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	228c      	movs	r2, #140	; 0x8c
 8003b24:	2120      	movs	r1, #32
 8003b26:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2284      	movs	r2, #132	; 0x84
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e069      	b.n	8003c08 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2204      	movs	r2, #4
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	d052      	beq.n	8003be6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	69da      	ldr	r2, [r3, #28]
 8003b46:	2380      	movs	r3, #128	; 0x80
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	401a      	ands	r2, r3
 8003b4c:	2380      	movs	r3, #128	; 0x80
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d148      	bne.n	8003be6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2280      	movs	r2, #128	; 0x80
 8003b5a:	0112      	lsls	r2, r2, #4
 8003b5c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b5e:	f3ef 8310 	mrs	r3, PRIMASK
 8003b62:	613b      	str	r3, [r7, #16]
  return(result);
 8003b64:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003b66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b68:	2301      	movs	r3, #1
 8003b6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f383 8810 	msr	PRIMASK, r3
}
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4924      	ldr	r1, [pc, #144]	; (8003c10 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003b80:	400a      	ands	r2, r1
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b86:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	f383 8810 	msr	PRIMASK, r3
}
 8003b8e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b90:	f3ef 8310 	mrs	r3, PRIMASK
 8003b94:	61fb      	str	r3, [r7, #28]
  return(result);
 8003b96:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b98:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	f383 8810 	msr	PRIMASK, r3
}
 8003ba4:	46c0      	nop			; (mov r8, r8)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	438a      	bics	r2, r1
 8003bb4:	609a      	str	r2, [r3, #8]
 8003bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bb8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	f383 8810 	msr	PRIMASK, r3
}
 8003bc0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2288      	movs	r2, #136	; 0x88
 8003bc6:	2120      	movs	r1, #32
 8003bc8:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	228c      	movs	r2, #140	; 0x8c
 8003bce:	2120      	movs	r1, #32
 8003bd0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2290      	movs	r2, #144	; 0x90
 8003bd6:	2120      	movs	r1, #32
 8003bd8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2284      	movs	r2, #132	; 0x84
 8003bde:	2100      	movs	r1, #0
 8003be0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e010      	b.n	8003c08 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	425a      	negs	r2, r3
 8003bf6:	4153      	adcs	r3, r2
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	001a      	movs	r2, r3
 8003bfc:	1dfb      	adds	r3, r7, #7
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d100      	bne.n	8003c06 <UART_WaitOnFlagUntilTimeout+0x182>
 8003c04:	e747      	b.n	8003a96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	0018      	movs	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	b014      	add	sp, #80	; 0x50
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	fffffe5f 	.word	0xfffffe5f

08003c14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2284      	movs	r2, #132	; 0x84
 8003c20:	5c9b      	ldrb	r3, [r3, r2]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d101      	bne.n	8003c2a <HAL_UARTEx_DisableFifoMode+0x16>
 8003c26:	2302      	movs	r3, #2
 8003c28:	e027      	b.n	8003c7a <HAL_UARTEx_DisableFifoMode+0x66>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2284      	movs	r2, #132	; 0x84
 8003c2e:	2101      	movs	r1, #1
 8003c30:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2288      	movs	r2, #136	; 0x88
 8003c36:	2124      	movs	r1, #36	; 0x24
 8003c38:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	438a      	bics	r2, r1
 8003c50:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	4a0b      	ldr	r2, [pc, #44]	; (8003c84 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003c56:	4013      	ands	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2288      	movs	r2, #136	; 0x88
 8003c6c:	2120      	movs	r1, #32
 8003c6e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2284      	movs	r2, #132	; 0x84
 8003c74:	2100      	movs	r1, #0
 8003c76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	b004      	add	sp, #16
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	46c0      	nop			; (mov r8, r8)
 8003c84:	dfffffff 	.word	0xdfffffff

08003c88 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2284      	movs	r2, #132	; 0x84
 8003c96:	5c9b      	ldrb	r3, [r3, r2]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d101      	bne.n	8003ca0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	e02e      	b.n	8003cfe <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2284      	movs	r2, #132	; 0x84
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2288      	movs	r2, #136	; 0x88
 8003cac:	2124      	movs	r1, #36	; 0x24
 8003cae:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	438a      	bics	r2, r1
 8003cc6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	08d9      	lsrs	r1, r3, #3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	0018      	movs	r0, r3
 8003ce0:	f000 f854 	bl	8003d8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2288      	movs	r2, #136	; 0x88
 8003cf0:	2120      	movs	r1, #32
 8003cf2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2284      	movs	r2, #132	; 0x84
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	0018      	movs	r0, r3
 8003d00:	46bd      	mov	sp, r7
 8003d02:	b004      	add	sp, #16
 8003d04:	bd80      	pop	{r7, pc}
	...

08003d08 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2284      	movs	r2, #132	; 0x84
 8003d16:	5c9b      	ldrb	r3, [r3, r2]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d101      	bne.n	8003d20 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	e02f      	b.n	8003d80 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2284      	movs	r2, #132	; 0x84
 8003d24:	2101      	movs	r1, #1
 8003d26:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2288      	movs	r2, #136	; 0x88
 8003d2c:	2124      	movs	r1, #36	; 0x24
 8003d2e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2101      	movs	r1, #1
 8003d44:	438a      	bics	r2, r1
 8003d46:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	4a0e      	ldr	r2, [pc, #56]	; (8003d88 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003d50:	4013      	ands	r3, r2
 8003d52:	0019      	movs	r1, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	0018      	movs	r0, r3
 8003d62:	f000 f813 	bl	8003d8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2288      	movs	r2, #136	; 0x88
 8003d72:	2120      	movs	r1, #32
 8003d74:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2284      	movs	r2, #132	; 0x84
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	0018      	movs	r0, r3
 8003d82:	46bd      	mov	sp, r7
 8003d84:	b004      	add	sp, #16
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	f1ffffff 	.word	0xf1ffffff

08003d8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d108      	bne.n	8003dae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	226a      	movs	r2, #106	; 0x6a
 8003da0:	2101      	movs	r1, #1
 8003da2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2268      	movs	r2, #104	; 0x68
 8003da8:	2101      	movs	r1, #1
 8003daa:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003dac:	e043      	b.n	8003e36 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003dae:	260f      	movs	r6, #15
 8003db0:	19bb      	adds	r3, r7, r6
 8003db2:	2208      	movs	r2, #8
 8003db4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003db6:	200e      	movs	r0, #14
 8003db8:	183b      	adds	r3, r7, r0
 8003dba:	2208      	movs	r2, #8
 8003dbc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	0e5b      	lsrs	r3, r3, #25
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	240d      	movs	r4, #13
 8003dca:	193b      	adds	r3, r7, r4
 8003dcc:	2107      	movs	r1, #7
 8003dce:	400a      	ands	r2, r1
 8003dd0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	0f5b      	lsrs	r3, r3, #29
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	250c      	movs	r5, #12
 8003dde:	197b      	adds	r3, r7, r5
 8003de0:	2107      	movs	r1, #7
 8003de2:	400a      	ands	r2, r1
 8003de4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003de6:	183b      	adds	r3, r7, r0
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	197a      	adds	r2, r7, r5
 8003dec:	7812      	ldrb	r2, [r2, #0]
 8003dee:	4914      	ldr	r1, [pc, #80]	; (8003e40 <UARTEx_SetNbDataToProcess+0xb4>)
 8003df0:	5c8a      	ldrb	r2, [r1, r2]
 8003df2:	435a      	muls	r2, r3
 8003df4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003df6:	197b      	adds	r3, r7, r5
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	4a12      	ldr	r2, [pc, #72]	; (8003e44 <UARTEx_SetNbDataToProcess+0xb8>)
 8003dfc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003dfe:	0019      	movs	r1, r3
 8003e00:	f7fc fa12 	bl	8000228 <__divsi3>
 8003e04:	0003      	movs	r3, r0
 8003e06:	b299      	uxth	r1, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	226a      	movs	r2, #106	; 0x6a
 8003e0c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e0e:	19bb      	adds	r3, r7, r6
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	193a      	adds	r2, r7, r4
 8003e14:	7812      	ldrb	r2, [r2, #0]
 8003e16:	490a      	ldr	r1, [pc, #40]	; (8003e40 <UARTEx_SetNbDataToProcess+0xb4>)
 8003e18:	5c8a      	ldrb	r2, [r1, r2]
 8003e1a:	435a      	muls	r2, r3
 8003e1c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003e1e:	193b      	adds	r3, r7, r4
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	4a08      	ldr	r2, [pc, #32]	; (8003e44 <UARTEx_SetNbDataToProcess+0xb8>)
 8003e24:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e26:	0019      	movs	r1, r3
 8003e28:	f7fc f9fe 	bl	8000228 <__divsi3>
 8003e2c:	0003      	movs	r3, r0
 8003e2e:	b299      	uxth	r1, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2268      	movs	r2, #104	; 0x68
 8003e34:	5299      	strh	r1, [r3, r2]
}
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	b005      	add	sp, #20
 8003e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e3e:	46c0      	nop			; (mov r8, r8)
 8003e40:	080055b0 	.word	0x080055b0
 8003e44:	080055b8 	.word	0x080055b8

08003e48 <memset>:
 8003e48:	0003      	movs	r3, r0
 8003e4a:	1882      	adds	r2, r0, r2
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d100      	bne.n	8003e52 <memset+0xa>
 8003e50:	4770      	bx	lr
 8003e52:	7019      	strb	r1, [r3, #0]
 8003e54:	3301      	adds	r3, #1
 8003e56:	e7f9      	b.n	8003e4c <memset+0x4>

08003e58 <__libc_init_array>:
 8003e58:	b570      	push	{r4, r5, r6, lr}
 8003e5a:	2600      	movs	r6, #0
 8003e5c:	4c0c      	ldr	r4, [pc, #48]	; (8003e90 <__libc_init_array+0x38>)
 8003e5e:	4d0d      	ldr	r5, [pc, #52]	; (8003e94 <__libc_init_array+0x3c>)
 8003e60:	1b64      	subs	r4, r4, r5
 8003e62:	10a4      	asrs	r4, r4, #2
 8003e64:	42a6      	cmp	r6, r4
 8003e66:	d109      	bne.n	8003e7c <__libc_init_array+0x24>
 8003e68:	2600      	movs	r6, #0
 8003e6a:	f000 f819 	bl	8003ea0 <_init>
 8003e6e:	4c0a      	ldr	r4, [pc, #40]	; (8003e98 <__libc_init_array+0x40>)
 8003e70:	4d0a      	ldr	r5, [pc, #40]	; (8003e9c <__libc_init_array+0x44>)
 8003e72:	1b64      	subs	r4, r4, r5
 8003e74:	10a4      	asrs	r4, r4, #2
 8003e76:	42a6      	cmp	r6, r4
 8003e78:	d105      	bne.n	8003e86 <__libc_init_array+0x2e>
 8003e7a:	bd70      	pop	{r4, r5, r6, pc}
 8003e7c:	00b3      	lsls	r3, r6, #2
 8003e7e:	58eb      	ldr	r3, [r5, r3]
 8003e80:	4798      	blx	r3
 8003e82:	3601      	adds	r6, #1
 8003e84:	e7ee      	b.n	8003e64 <__libc_init_array+0xc>
 8003e86:	00b3      	lsls	r3, r6, #2
 8003e88:	58eb      	ldr	r3, [r5, r3]
 8003e8a:	4798      	blx	r3
 8003e8c:	3601      	adds	r6, #1
 8003e8e:	e7f2      	b.n	8003e76 <__libc_init_array+0x1e>
 8003e90:	080055c8 	.word	0x080055c8
 8003e94:	080055c8 	.word	0x080055c8
 8003e98:	080055cc 	.word	0x080055cc
 8003e9c:	080055c8 	.word	0x080055c8

08003ea0 <_init>:
 8003ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea2:	46c0      	nop			; (mov r8, r8)
 8003ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ea6:	bc08      	pop	{r3}
 8003ea8:	469e      	mov	lr, r3
 8003eaa:	4770      	bx	lr

08003eac <_fini>:
 8003eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eae:	46c0      	nop			; (mov r8, r8)
 8003eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eb2:	bc08      	pop	{r3}
 8003eb4:	469e      	mov	lr, r3
 8003eb6:	4770      	bx	lr
