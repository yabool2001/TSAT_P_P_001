
TSAT_P_P_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000132bc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000200c  08013378  08013378  00023378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015384  08015384  000306e0  2**0
                  CONTENTS
  4 .ARM          00000008  08015384  08015384  00025384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801538c  0801538c  000306e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801538c  0801538c  0002538c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015394  08015394  00025394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006e0  20000000  08015398  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007ec  200006e0  08015a78  000306e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ecc  08015a78  00030ecc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000306e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030708  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001de7a  00000000  00000000  0003074b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ed4  00000000  00000000  0004e5c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ae8  00000000  00000000  000524a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001506  00000000  00000000  00053f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e0eb  00000000  00000000  0005548e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ee2a  00000000  00000000  00073579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b187e  00000000  00000000  000923a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007d4c  00000000  00000000  00143c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0014b970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006e0 	.word	0x200006e0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08013360 	.word	0x08013360

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006e4 	.word	0x200006e4
 8000100:	08013360 	.word	0x08013360

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b3 	bl	80015a4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f803 	bl	8001454 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a5 	bl	80015a4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f89b 	bl	80015a4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f82b 	bl	80014d8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f821 	bl	80014d8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f8a4 	bl	8000620 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_d2uiz>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	2200      	movs	r2, #0
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__aeabi_d2uiz+0x38>)
 8000546:	0004      	movs	r4, r0
 8000548:	000d      	movs	r5, r1
 800054a:	f7ff ffa1 	bl	8000490 <__aeabi_dcmpge>
 800054e:	2800      	cmp	r0, #0
 8000550:	d104      	bne.n	800055c <__aeabi_d2uiz+0x1c>
 8000552:	0020      	movs	r0, r4
 8000554:	0029      	movs	r1, r5
 8000556:	f001 feeb 	bl	8002330 <__aeabi_d2iz>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__aeabi_d2uiz+0x38>)
 800055e:	2200      	movs	r2, #0
 8000560:	0020      	movs	r0, r4
 8000562:	0029      	movs	r1, r5
 8000564:	f001 fb44 	bl	8001bf0 <__aeabi_dsub>
 8000568:	f001 fee2 	bl	8002330 <__aeabi_d2iz>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	061b      	lsls	r3, r3, #24
 8000570:	469c      	mov	ip, r3
 8000572:	4460      	add	r0, ip
 8000574:	e7f1      	b.n	800055a <__aeabi_d2uiz+0x1a>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	41e00000 	.word	0x41e00000

0800057c <__aeabi_d2lz>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	0005      	movs	r5, r0
 8000580:	000c      	movs	r4, r1
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0028      	movs	r0, r5
 8000588:	0021      	movs	r1, r4
 800058a:	f7ff ff63 	bl	8000454 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x28>
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e1      	adds	r1, r4, r3
 80005aa:	0028      	movs	r0, r5
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x22>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 f853 	bl	800166c <__aeabi_dmul>
 80005c6:	f7ff ffbb 	bl	8000540 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f001 ff16 	bl	80023fc <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 f84a 	bl	800166c <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dsub>
 80005e4:	f7ff ffac 	bl	8000540 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f001 fecf 	bl	800239c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 f833 	bl	800166c <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f001 fef6 	bl	80023fc <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 f8d0 	bl	80007b8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f001 ffa6 	bl	8002590 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f001 ffa1 	bl	8002590 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_dadd>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0004      	movs	r4, r0
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	001f      	movs	r7, r3
 80007c6:	030b      	lsls	r3, r1, #12
 80007c8:	0010      	movs	r0, r2
 80007ca:	004e      	lsls	r6, r1, #1
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0fcd      	lsrs	r5, r1, #31
 80007d0:	0f61      	lsrs	r1, r4, #29
 80007d2:	007a      	lsls	r2, r7, #1
 80007d4:	4319      	orrs	r1, r3
 80007d6:	00e3      	lsls	r3, r4, #3
 80007d8:	033c      	lsls	r4, r7, #12
 80007da:	0fff      	lsrs	r7, r7, #31
 80007dc:	46bc      	mov	ip, r7
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0f47      	lsrs	r7, r0, #29
 80007e2:	4327      	orrs	r7, r4
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	0d52      	lsrs	r2, r2, #21
 80007e8:	00c0      	lsls	r0, r0, #3
 80007ea:	46b9      	mov	r9, r7
 80007ec:	4680      	mov	r8, r0
 80007ee:	1ab7      	subs	r7, r6, r2
 80007f0:	4565      	cmp	r5, ip
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x3e>
 80007f4:	e09b      	b.n	800092e <__aeabi_dadd+0x176>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x44>
 80007fa:	e084      	b.n	8000906 <__aeabi_dadd+0x14e>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x4a>
 8000800:	e0be      	b.n	8000980 <__aeabi_dadd+0x1c8>
 8000802:	4ac8      	ldr	r2, [pc, #800]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000804:	4296      	cmp	r6, r2
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x52>
 8000808:	e124      	b.n	8000a54 <__aeabi_dadd+0x29c>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	464c      	mov	r4, r9
 800080e:	0412      	lsls	r2, r2, #16
 8000810:	4314      	orrs	r4, r2
 8000812:	46a1      	mov	r9, r4
 8000814:	2f38      	cmp	r7, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x62>
 8000818:	e167      	b.n	8000aea <__aeabi_dadd+0x332>
 800081a:	2f1f      	cmp	r7, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x68>
 800081e:	e1d6      	b.n	8000bce <__aeabi_dadd+0x416>
 8000820:	2220      	movs	r2, #32
 8000822:	464c      	mov	r4, r9
 8000824:	1bd2      	subs	r2, r2, r7
 8000826:	4094      	lsls	r4, r2
 8000828:	46a2      	mov	sl, r4
 800082a:	4644      	mov	r4, r8
 800082c:	40fc      	lsrs	r4, r7
 800082e:	0020      	movs	r0, r4
 8000830:	4654      	mov	r4, sl
 8000832:	4304      	orrs	r4, r0
 8000834:	4640      	mov	r0, r8
 8000836:	4090      	lsls	r0, r2
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	464a      	mov	r2, r9
 800083e:	40fa      	lsrs	r2, r7
 8000840:	4304      	orrs	r4, r0
 8000842:	1a89      	subs	r1, r1, r2
 8000844:	1b1c      	subs	r4, r3, r4
 8000846:	42a3      	cmp	r3, r4
 8000848:	4192      	sbcs	r2, r2
 800084a:	4252      	negs	r2, r2
 800084c:	1a8b      	subs	r3, r1, r2
 800084e:	469a      	mov	sl, r3
 8000850:	4653      	mov	r3, sl
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dadd+0xa0>
 8000856:	e0d4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000858:	4653      	mov	r3, sl
 800085a:	025a      	lsls	r2, r3, #9
 800085c:	0a53      	lsrs	r3, r2, #9
 800085e:	469a      	mov	sl, r3
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0xb0>
 8000866:	e104      	b.n	8000a72 <__aeabi_dadd+0x2ba>
 8000868:	4650      	mov	r0, sl
 800086a:	f001 fe73 	bl	8002554 <__clzsi2>
 800086e:	0003      	movs	r3, r0
 8000870:	3b08      	subs	r3, #8
 8000872:	2220      	movs	r2, #32
 8000874:	0020      	movs	r0, r4
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	4651      	mov	r1, sl
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4099      	lsls	r1, r3
 800087e:	0002      	movs	r2, r0
 8000880:	409c      	lsls	r4, r3
 8000882:	430a      	orrs	r2, r1
 8000884:	42b3      	cmp	r3, r6
 8000886:	da00      	bge.n	800088a <__aeabi_dadd+0xd2>
 8000888:	e102      	b.n	8000a90 <__aeabi_dadd+0x2d8>
 800088a:	1b9b      	subs	r3, r3, r6
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	291f      	cmp	r1, #31
 8000890:	dd00      	ble.n	8000894 <__aeabi_dadd+0xdc>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_dadd+0x22c>
 8000894:	2320      	movs	r3, #32
 8000896:	0010      	movs	r0, r2
 8000898:	0026      	movs	r6, r4
 800089a:	1a5b      	subs	r3, r3, r1
 800089c:	409c      	lsls	r4, r3
 800089e:	4098      	lsls	r0, r3
 80008a0:	40ce      	lsrs	r6, r1
 80008a2:	40ca      	lsrs	r2, r1
 80008a4:	1e63      	subs	r3, r4, #1
 80008a6:	419c      	sbcs	r4, r3
 80008a8:	4330      	orrs	r0, r6
 80008aa:	4692      	mov	sl, r2
 80008ac:	2600      	movs	r6, #0
 80008ae:	4304      	orrs	r4, r0
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d009      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008bc:	1d23      	adds	r3, r4, #4
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41a4      	sbcs	r4, r4
 80008c2:	4264      	negs	r4, r4
 80008c4:	44a2      	add	sl, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	4653      	mov	r3, sl
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_dadd+0x118>
 80008ce:	e09b      	b.n	8000a08 <__aeabi_dadd+0x250>
 80008d0:	4b94      	ldr	r3, [pc, #592]	; (8000b24 <__aeabi_dadd+0x36c>)
 80008d2:	3601      	adds	r6, #1
 80008d4:	429e      	cmp	r6, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x122>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x294>
 80008da:	4653      	mov	r3, sl
 80008dc:	4992      	ldr	r1, [pc, #584]	; (8000b28 <__aeabi_dadd+0x370>)
 80008de:	08e4      	lsrs	r4, r4, #3
 80008e0:	400b      	ands	r3, r1
 80008e2:	0019      	movs	r1, r3
 80008e4:	075b      	lsls	r3, r3, #29
 80008e6:	4323      	orrs	r3, r4
 80008e8:	0572      	lsls	r2, r6, #21
 80008ea:	024c      	lsls	r4, r1, #9
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	0512      	lsls	r2, r2, #20
 80008f2:	07ed      	lsls	r5, r5, #31
 80008f4:	4322      	orrs	r2, r4
 80008f6:	432a      	orrs	r2, r5
 80008f8:	0018      	movs	r0, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	bce0      	pop	{r5, r6, r7}
 80008fe:	46ba      	mov	sl, r7
 8000900:	46b1      	mov	r9, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000906:	2f00      	cmp	r7, #0
 8000908:	d048      	beq.n	800099c <__aeabi_dadd+0x1e4>
 800090a:	1b97      	subs	r7, r2, r6
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x15a>
 8000910:	e10e      	b.n	8000b30 <__aeabi_dadd+0x378>
 8000912:	000c      	movs	r4, r1
 8000914:	431c      	orrs	r4, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x162>
 8000918:	e1b7      	b.n	8000c8a <__aeabi_dadd+0x4d2>
 800091a:	1e7c      	subs	r4, r7, #1
 800091c:	2f01      	cmp	r7, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x16a>
 8000920:	e226      	b.n	8000d70 <__aeabi_dadd+0x5b8>
 8000922:	4d80      	ldr	r5, [pc, #512]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000924:	42af      	cmp	r7, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x172>
 8000928:	e1d5      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 800092a:	0027      	movs	r7, r4
 800092c:	e107      	b.n	8000b3e <__aeabi_dadd+0x386>
 800092e:	2f00      	cmp	r7, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x17c>
 8000932:	e0b2      	b.n	8000a9a <__aeabi_dadd+0x2e2>
 8000934:	2a00      	cmp	r2, #0
 8000936:	d047      	beq.n	80009c8 <__aeabi_dadd+0x210>
 8000938:	4a7a      	ldr	r2, [pc, #488]	; (8000b24 <__aeabi_dadd+0x36c>)
 800093a:	4296      	cmp	r6, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x188>
 800093e:	e089      	b.n	8000a54 <__aeabi_dadd+0x29c>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	464c      	mov	r4, r9
 8000944:	0412      	lsls	r2, r2, #16
 8000946:	4314      	orrs	r4, r2
 8000948:	46a1      	mov	r9, r4
 800094a:	2f38      	cmp	r7, #56	; 0x38
 800094c:	dc6b      	bgt.n	8000a26 <__aeabi_dadd+0x26e>
 800094e:	2f1f      	cmp	r7, #31
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x19c>
 8000952:	e16e      	b.n	8000c32 <__aeabi_dadd+0x47a>
 8000954:	003a      	movs	r2, r7
 8000956:	4648      	mov	r0, r9
 8000958:	3a20      	subs	r2, #32
 800095a:	40d0      	lsrs	r0, r2
 800095c:	4684      	mov	ip, r0
 800095e:	2f20      	cmp	r7, #32
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x1ba>
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	4648      	mov	r0, r9
 8000966:	1bd2      	subs	r2, r2, r7
 8000968:	4090      	lsls	r0, r2
 800096a:	0002      	movs	r2, r0
 800096c:	4640      	mov	r0, r8
 800096e:	4310      	orrs	r0, r2
 8000970:	4680      	mov	r8, r0
 8000972:	4640      	mov	r0, r8
 8000974:	1e42      	subs	r2, r0, #1
 8000976:	4190      	sbcs	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	0004      	movs	r4, r0
 800097c:	4314      	orrs	r4, r2
 800097e:	e057      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000980:	464a      	mov	r2, r9
 8000982:	4302      	orrs	r2, r0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x1d0>
 8000986:	e103      	b.n	8000b90 <__aeabi_dadd+0x3d8>
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	2f01      	cmp	r7, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x1d8>
 800098e:	e193      	b.n	8000cb8 <__aeabi_dadd+0x500>
 8000990:	4c64      	ldr	r4, [pc, #400]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000992:	42a7      	cmp	r7, r4
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x1e0>
 8000996:	e18a      	b.n	8000cae <__aeabi_dadd+0x4f6>
 8000998:	0017      	movs	r7, r2
 800099a:	e73b      	b.n	8000814 <__aeabi_dadd+0x5c>
 800099c:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <__aeabi_dadd+0x374>)
 800099e:	1c72      	adds	r2, r6, #1
 80009a0:	4222      	tst	r2, r4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x1ee>
 80009a4:	e0e0      	b.n	8000b68 <__aeabi_dadd+0x3b0>
 80009a6:	000a      	movs	r2, r1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x1f8>
 80009ae:	e174      	b.n	8000c9a <__aeabi_dadd+0x4e2>
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x1fe>
 80009b4:	e1d0      	b.n	8000d58 <__aeabi_dadd+0x5a0>
 80009b6:	464a      	mov	r2, r9
 80009b8:	4302      	orrs	r2, r0
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x206>
 80009bc:	e1e3      	b.n	8000d86 <__aeabi_dadd+0x5ce>
 80009be:	074a      	lsls	r2, r1, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c9      	lsrs	r1, r1, #3
 80009c6:	e029      	b.n	8000a1c <__aeabi_dadd+0x264>
 80009c8:	464a      	mov	r2, r9
 80009ca:	4302      	orrs	r2, r0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x218>
 80009ce:	e17d      	b.n	8000ccc <__aeabi_dadd+0x514>
 80009d0:	1e7a      	subs	r2, r7, #1
 80009d2:	2f01      	cmp	r7, #1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x220>
 80009d6:	e0e0      	b.n	8000b9a <__aeabi_dadd+0x3e2>
 80009d8:	4c52      	ldr	r4, [pc, #328]	; (8000b24 <__aeabi_dadd+0x36c>)
 80009da:	42a7      	cmp	r7, r4
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x228>
 80009de:	e166      	b.n	8000cae <__aeabi_dadd+0x4f6>
 80009e0:	0017      	movs	r7, r2
 80009e2:	e7b2      	b.n	800094a <__aeabi_dadd+0x192>
 80009e4:	0010      	movs	r0, r2
 80009e6:	3b1f      	subs	r3, #31
 80009e8:	40d8      	lsrs	r0, r3
 80009ea:	2920      	cmp	r1, #32
 80009ec:	d003      	beq.n	80009f6 <__aeabi_dadd+0x23e>
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	409a      	lsls	r2, r3
 80009f4:	4314      	orrs	r4, r2
 80009f6:	1e63      	subs	r3, r4, #1
 80009f8:	419c      	sbcs	r4, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	2600      	movs	r6, #0
 80009fe:	469a      	mov	sl, r3
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0763      	lsls	r3, r4, #29
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x250>
 8000a06:	e755      	b.n	80008b4 <__aeabi_dadd+0xfc>
 8000a08:	4652      	mov	r2, sl
 8000a0a:	08e3      	lsrs	r3, r4, #3
 8000a0c:	0752      	lsls	r2, r2, #29
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4652      	mov	r2, sl
 8000a12:	0037      	movs	r7, r6
 8000a14:	08d1      	lsrs	r1, r2, #3
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a18:	4297      	cmp	r7, r2
 8000a1a:	d01f      	beq.n	8000a5c <__aeabi_dadd+0x2a4>
 8000a1c:	0309      	lsls	r1, r1, #12
 8000a1e:	057a      	lsls	r2, r7, #21
 8000a20:	0b0c      	lsrs	r4, r1, #12
 8000a22:	0d52      	lsrs	r2, r2, #21
 8000a24:	e764      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a26:	4642      	mov	r2, r8
 8000a28:	464c      	mov	r4, r9
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	18e4      	adds	r4, r4, r3
 8000a32:	429c      	cmp	r4, r3
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	448a      	add	sl, r1
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	d5df      	bpl.n	8000a02 <__aeabi_dadd+0x24a>
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a44:	3601      	adds	r6, #1
 8000a46:	429e      	cmp	r6, r3
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x294>
 8000a4a:	e0b3      	b.n	8000bb4 <__aeabi_dadd+0x3fc>
 8000a4c:	0032      	movs	r2, r6
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2300      	movs	r3, #0
 8000a52:	e74d      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x2ac>
 8000a62:	e200      	b.n	8000e66 <__aeabi_dadd+0x6ae>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	430c      	orrs	r4, r1
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a6e:	0b24      	lsrs	r4, r4, #12
 8000a70:	e73e      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a72:	0020      	movs	r0, r4
 8000a74:	f001 fd6e 	bl	8002554 <__clzsi2>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	dc00      	bgt.n	8000a82 <__aeabi_dadd+0x2ca>
 8000a80:	e6f7      	b.n	8000872 <__aeabi_dadd+0xba>
 8000a82:	0022      	movs	r2, r4
 8000a84:	3808      	subs	r0, #8
 8000a86:	4082      	lsls	r2, r0
 8000a88:	2400      	movs	r4, #0
 8000a8a:	42b3      	cmp	r3, r6
 8000a8c:	db00      	blt.n	8000a90 <__aeabi_dadd+0x2d8>
 8000a8e:	e6fc      	b.n	800088a <__aeabi_dadd+0xd2>
 8000a90:	1af6      	subs	r6, r6, r3
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <__aeabi_dadd+0x370>)
 8000a94:	401a      	ands	r2, r3
 8000a96:	4692      	mov	sl, r2
 8000a98:	e70a      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d02b      	beq.n	8000af6 <__aeabi_dadd+0x33e>
 8000a9e:	1b97      	subs	r7, r2, r6
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x2ee>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_dadd+0x460>
 8000aa6:	4c1f      	ldr	r4, [pc, #124]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x2f6>
 8000aac:	e11c      	b.n	8000ce8 <__aeabi_dadd+0x530>
 8000aae:	2480      	movs	r4, #128	; 0x80
 8000ab0:	0424      	lsls	r4, r4, #16
 8000ab2:	4321      	orrs	r1, r4
 8000ab4:	2f38      	cmp	r7, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x302>
 8000ab8:	e11e      	b.n	8000cf8 <__aeabi_dadd+0x540>
 8000aba:	2f1f      	cmp	r7, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x308>
 8000abe:	e19e      	b.n	8000dfe <__aeabi_dadd+0x646>
 8000ac0:	2620      	movs	r6, #32
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	1bf6      	subs	r6, r6, r7
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	40b3      	lsls	r3, r6
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	40f8      	lsrs	r0, r7
 8000ace:	1e5e      	subs	r6, r3, #1
 8000ad0:	41b3      	sbcs	r3, r6
 8000ad2:	40f9      	lsrs	r1, r7
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	4489      	add	r9, r1
 8000ada:	4444      	add	r4, r8
 8000adc:	4544      	cmp	r4, r8
 8000ade:	419b      	sbcs	r3, r3
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	444b      	add	r3, r9
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	0016      	movs	r6, r2
 8000ae8:	e7a8      	b.n	8000a3c <__aeabi_dadd+0x284>
 8000aea:	4642      	mov	r2, r8
 8000aec:	464c      	mov	r4, r9
 8000aee:	4314      	orrs	r4, r2
 8000af0:	1e62      	subs	r2, r4, #1
 8000af2:	4194      	sbcs	r4, r2
 8000af4:	e6a6      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__aeabi_dadd+0x374>)
 8000af8:	1c72      	adds	r2, r6, #1
 8000afa:	4222      	tst	r2, r4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dadd+0x348>
 8000afe:	e0a8      	b.n	8000c52 <__aeabi_dadd+0x49a>
 8000b00:	000a      	movs	r2, r1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x352>
 8000b08:	e10a      	b.n	8000d20 <__aeabi_dadd+0x568>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x358>
 8000b0e:	e15e      	b.n	8000dce <__aeabi_dadd+0x616>
 8000b10:	464a      	mov	r2, r9
 8000b12:	4302      	orrs	r2, r0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x360>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x624>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e77c      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	4ccf      	ldr	r4, [pc, #828]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x380>
 8000b36:	e0ce      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	0424      	lsls	r4, r4, #16
 8000b3c:	4321      	orrs	r1, r4
 8000b3e:	2f38      	cmp	r7, #56	; 0x38
 8000b40:	dc5b      	bgt.n	8000bfa <__aeabi_dadd+0x442>
 8000b42:	2f1f      	cmp	r7, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x390>
 8000b46:	e0dc      	b.n	8000d02 <__aeabi_dadd+0x54a>
 8000b48:	2520      	movs	r5, #32
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	1bed      	subs	r5, r5, r7
 8000b4e:	001e      	movs	r6, r3
 8000b50:	40ab      	lsls	r3, r5
 8000b52:	40ac      	lsls	r4, r5
 8000b54:	40fe      	lsrs	r6, r7
 8000b56:	1e5d      	subs	r5, r3, #1
 8000b58:	41ab      	sbcs	r3, r5
 8000b5a:	4334      	orrs	r4, r6
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	4699      	mov	r9, r3
 8000b66:	e04c      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1a1c      	subs	r4, r3, r0
 8000b6c:	1a88      	subs	r0, r1, r2
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	4252      	negs	r2, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	0002      	movs	r2, r0
 8000b78:	4650      	mov	r0, sl
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	d478      	bmi.n	8000c74 <__aeabi_dadd+0x4bc>
 8000b82:	4653      	mov	r3, sl
 8000b84:	4323      	orrs	r3, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x3d2>
 8000b88:	e66a      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	e745      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e73d      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000b9a:	181c      	adds	r4, r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	419b      	sbcs	r3, r3
 8000ba0:	4449      	add	r1, r9
 8000ba2:	468a      	mov	sl, r1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	449a      	add	sl, r3
 8000ba8:	4653      	mov	r3, sl
 8000baa:	2601      	movs	r6, #1
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_dadd+0x3fa>
 8000bb0:	e727      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000bb2:	2602      	movs	r6, #2
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	4baf      	ldr	r3, [pc, #700]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	4021      	ands	r1, r4
 8000bc0:	0862      	lsrs	r2, r4, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	07dc      	lsls	r4, r3, #31
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	469a      	mov	sl, r3
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	e670      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	464c      	mov	r4, r9
 8000bd2:	3a20      	subs	r2, #32
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	46a4      	mov	ip, r4
 8000bd8:	2f20      	cmp	r7, #32
 8000bda:	d007      	beq.n	8000bec <__aeabi_dadd+0x434>
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	4648      	mov	r0, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4090      	lsls	r0, r2
 8000be4:	0002      	movs	r2, r0
 8000be6:	4640      	mov	r0, r8
 8000be8:	4310      	orrs	r0, r2
 8000bea:	4680      	mov	r8, r0
 8000bec:	4640      	mov	r0, r8
 8000bee:	1e42      	subs	r2, r0, #1
 8000bf0:	4190      	sbcs	r0, r2
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	0004      	movs	r4, r0
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	e624      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000bfa:	4319      	orrs	r1, r3
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	4643      	mov	r3, r8
 8000c04:	1b1c      	subs	r4, r3, r4
 8000c06:	45a0      	cmp	r8, r4
 8000c08:	419b      	sbcs	r3, r3
 8000c0a:	4649      	mov	r1, r9
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	4665      	mov	r5, ip
 8000c14:	0016      	movs	r6, r2
 8000c16:	e61b      	b.n	8000850 <__aeabi_dadd+0x98>
 8000c18:	000c      	movs	r4, r1
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x468>
 8000c1e:	e0c7      	b.n	8000db0 <__aeabi_dadd+0x5f8>
 8000c20:	1e7c      	subs	r4, r7, #1
 8000c22:	2f01      	cmp	r7, #1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x470>
 8000c26:	e0f9      	b.n	8000e1c <__aeabi_dadd+0x664>
 8000c28:	4e91      	ldr	r6, [pc, #580]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c2a:	42b7      	cmp	r7, r6
 8000c2c:	d05c      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000c2e:	0027      	movs	r7, r4
 8000c30:	e740      	b.n	8000ab4 <__aeabi_dadd+0x2fc>
 8000c32:	2220      	movs	r2, #32
 8000c34:	464c      	mov	r4, r9
 8000c36:	4640      	mov	r0, r8
 8000c38:	1bd2      	subs	r2, r2, r7
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	40f8      	lsrs	r0, r7
 8000c3e:	4304      	orrs	r4, r0
 8000c40:	4640      	mov	r0, r8
 8000c42:	4090      	lsls	r0, r2
 8000c44:	1e42      	subs	r2, r0, #1
 8000c46:	4190      	sbcs	r0, r2
 8000c48:	464a      	mov	r2, r9
 8000c4a:	40fa      	lsrs	r2, r7
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	1889      	adds	r1, r1, r2
 8000c50:	e6ee      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000c52:	4c87      	ldr	r4, [pc, #540]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x4a2>
 8000c58:	e6f9      	b.n	8000a4e <__aeabi_dadd+0x296>
 8000c5a:	1818      	adds	r0, r3, r0
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	419b      	sbcs	r3, r3
 8000c60:	4449      	add	r1, r9
 8000c62:	425b      	negs	r3, r3
 8000c64:	18cb      	adds	r3, r1, r3
 8000c66:	07dc      	lsls	r4, r3, #31
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	0016      	movs	r6, r2
 8000c70:	4304      	orrs	r4, r0
 8000c72:	e6c6      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000c74:	4642      	mov	r2, r8
 8000c76:	1ad4      	subs	r4, r2, r3
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	4180      	sbcs	r0, r0
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4240      	negs	r0, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	1a0b      	subs	r3, r1, r0
 8000c84:	469a      	mov	sl, r3
 8000c86:	4665      	mov	r5, ip
 8000c88:	e5ea      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	075b      	lsls	r3, r3, #29
 8000c92:	4665      	mov	r5, ip
 8000c94:	4303      	orrs	r3, r0
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	e6bd      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x4e8>
 8000c9e:	e08e      	b.n	8000dbe <__aeabi_dadd+0x606>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	d117      	bne.n	8000cd6 <__aeabi_dadd+0x51e>
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	2500      	movs	r5, #0
 8000caa:	0309      	lsls	r1, r1, #12
 8000cac:	e6da      	b.n	8000a64 <__aeabi_dadd+0x2ac>
 8000cae:	074a      	lsls	r2, r1, #29
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	e6d1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	464a      	mov	r2, r9
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	1a89      	subs	r1, r1, r2
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	2601      	movs	r6, #1
 8000cca:	e5c1      	b.n	8000850 <__aeabi_dadd+0x98>
 8000ccc:	074a      	lsls	r2, r1, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	e69f      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	08d8      	lsrs	r0, r3, #3
 8000cda:	464b      	mov	r3, r9
 8000cdc:	464a      	mov	r2, r9
 8000cde:	075b      	lsls	r3, r3, #29
 8000ce0:	4665      	mov	r5, ip
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	08d1      	lsrs	r1, r2, #3
 8000ce6:	e6b9      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	08d8      	lsrs	r0, r3, #3
 8000cec:	464b      	mov	r3, r9
 8000cee:	464a      	mov	r2, r9
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	08d1      	lsrs	r1, r2, #3
 8000cf6:	e6b1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cf8:	4319      	orrs	r1, r3
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	e6eb      	b.n	8000ada <__aeabi_dadd+0x322>
 8000d02:	003c      	movs	r4, r7
 8000d04:	000d      	movs	r5, r1
 8000d06:	3c20      	subs	r4, #32
 8000d08:	40e5      	lsrs	r5, r4
 8000d0a:	2f20      	cmp	r7, #32
 8000d0c:	d003      	beq.n	8000d16 <__aeabi_dadd+0x55e>
 8000d0e:	2440      	movs	r4, #64	; 0x40
 8000d10:	1be4      	subs	r4, r4, r7
 8000d12:	40a1      	lsls	r1, r4
 8000d14:	430b      	orrs	r3, r1
 8000d16:	001c      	movs	r4, r3
 8000d18:	1e63      	subs	r3, r4, #1
 8000d1a:	419c      	sbcs	r4, r3
 8000d1c:	432c      	orrs	r4, r5
 8000d1e:	e770      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d0e1      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000d24:	464a      	mov	r2, r9
 8000d26:	4302      	orrs	r2, r0
 8000d28:	d0c1      	beq.n	8000cae <__aeabi_dadd+0x4f6>
 8000d2a:	074a      	lsls	r2, r1, #29
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	08c9      	lsrs	r1, r1, #3
 8000d34:	0312      	lsls	r2, r2, #12
 8000d36:	4211      	tst	r1, r2
 8000d38:	d008      	beq.n	8000d4c <__aeabi_dadd+0x594>
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	08c4      	lsrs	r4, r0, #3
 8000d3e:	4214      	tst	r4, r2
 8000d40:	d104      	bne.n	8000d4c <__aeabi_dadd+0x594>
 8000d42:	4643      	mov	r3, r8
 8000d44:	0021      	movs	r1, r4
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	0f5a      	lsrs	r2, r3, #29
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e681      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dadd+0x5a8>
 8000d5e:	e714      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000d60:	464b      	mov	r3, r9
 8000d62:	464a      	mov	r2, r9
 8000d64:	08c0      	lsrs	r0, r0, #3
 8000d66:	075b      	lsls	r3, r3, #29
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4303      	orrs	r3, r0
 8000d6c:	08d1      	lsrs	r1, r2, #3
 8000d6e:	e655      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000d70:	1ac4      	subs	r4, r0, r3
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	464b      	mov	r3, r9
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a59      	subs	r1, r3, r1
 8000d7c:	1a0b      	subs	r3, r1, r0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4665      	mov	r5, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	e564      	b.n	8000850 <__aeabi_dadd+0x98>
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	464a      	mov	r2, r9
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	1a8a      	subs	r2, r1, r2
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a12      	subs	r2, r2, r0
 8000d94:	4692      	mov	sl, r2
 8000d96:	0212      	lsls	r2, r2, #8
 8000d98:	d549      	bpl.n	8000e2e <__aeabi_dadd+0x676>
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	1ad4      	subs	r4, r2, r3
 8000d9e:	45a0      	cmp	r8, r4
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	464b      	mov	r3, r9
 8000da4:	4240      	negs	r0, r0
 8000da6:	1a59      	subs	r1, r3, r1
 8000da8:	1a0b      	subs	r3, r1, r0
 8000daa:	469a      	mov	sl, r3
 8000dac:	4665      	mov	r5, ip
 8000dae:	e57f      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000db0:	464b      	mov	r3, r9
 8000db2:	464a      	mov	r2, r9
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	4303      	orrs	r3, r0
 8000dba:	08d1      	lsrs	r1, r2, #3
 8000dbc:	e62b      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	d138      	bne.n	8000e38 <__aeabi_dadd+0x680>
 8000dc6:	074a      	lsls	r2, r1, #29
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	e646      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	08c0      	lsrs	r0, r0, #3
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	08d1      	lsrs	r1, r2, #3
 8000dda:	e61f      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000ddc:	181c      	adds	r4, r3, r0
 8000dde:	429c      	cmp	r4, r3
 8000de0:	419b      	sbcs	r3, r3
 8000de2:	4449      	add	r1, r9
 8000de4:	468a      	mov	sl, r1
 8000de6:	425b      	negs	r3, r3
 8000de8:	449a      	add	sl, r3
 8000dea:	4653      	mov	r3, sl
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	d400      	bmi.n	8000df2 <__aeabi_dadd+0x63a>
 8000df0:	e607      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000df2:	4652      	mov	r2, sl
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000df6:	2601      	movs	r6, #1
 8000df8:	401a      	ands	r2, r3
 8000dfa:	4692      	mov	sl, r2
 8000dfc:	e601      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000dfe:	003c      	movs	r4, r7
 8000e00:	000e      	movs	r6, r1
 8000e02:	3c20      	subs	r4, #32
 8000e04:	40e6      	lsrs	r6, r4
 8000e06:	2f20      	cmp	r7, #32
 8000e08:	d003      	beq.n	8000e12 <__aeabi_dadd+0x65a>
 8000e0a:	2440      	movs	r4, #64	; 0x40
 8000e0c:	1be4      	subs	r4, r4, r7
 8000e0e:	40a1      	lsls	r1, r4
 8000e10:	430b      	orrs	r3, r1
 8000e12:	001c      	movs	r4, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4334      	orrs	r4, r6
 8000e1a:	e65e      	b.n	8000ada <__aeabi_dadd+0x322>
 8000e1c:	4443      	add	r3, r8
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	4180      	sbcs	r0, r0
 8000e22:	4449      	add	r1, r9
 8000e24:	468a      	mov	sl, r1
 8000e26:	4240      	negs	r0, r0
 8000e28:	001c      	movs	r4, r3
 8000e2a:	4482      	add	sl, r0
 8000e2c:	e6bc      	b.n	8000ba8 <__aeabi_dadd+0x3f0>
 8000e2e:	4653      	mov	r3, sl
 8000e30:	4323      	orrs	r3, r4
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x67e>
 8000e34:	e6a9      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000e36:	e5e4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000e38:	074a      	lsls	r2, r1, #29
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	4211      	tst	r1, r2
 8000e44:	d009      	beq.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e46:	4648      	mov	r0, r9
 8000e48:	08c4      	lsrs	r4, r0, #3
 8000e4a:	4214      	tst	r4, r2
 8000e4c:	d105      	bne.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	4665      	mov	r5, ip
 8000e52:	0021      	movs	r1, r4
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	0f5a      	lsrs	r2, r3, #29
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	0752      	lsls	r2, r2, #29
 8000e62:	4313      	orrs	r3, r2
 8000e64:	e5fa      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4a01      	ldr	r2, [pc, #4]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	e540      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	ff7fffff 	.word	0xff7fffff

08000e78 <__aeabi_ddiv>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	4657      	mov	r7, sl
 8000e7c:	464e      	mov	r6, r9
 8000e7e:	4645      	mov	r5, r8
 8000e80:	46de      	mov	lr, fp
 8000e82:	b5e0      	push	{r5, r6, r7, lr}
 8000e84:	030c      	lsls	r4, r1, #12
 8000e86:	001f      	movs	r7, r3
 8000e88:	004b      	lsls	r3, r1, #1
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	0005      	movs	r5, r0
 8000e90:	b085      	sub	sp, #20
 8000e92:	0b24      	lsrs	r4, r4, #12
 8000e94:	0d5b      	lsrs	r3, r3, #21
 8000e96:	0fce      	lsrs	r6, r1, #31
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x26>
 8000e9c:	e152      	b.n	8001144 <__aeabi_ddiv+0x2cc>
 8000e9e:	4ad2      	ldr	r2, [pc, #840]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x2e>
 8000ea4:	e16e      	b.n	8001184 <__aeabi_ddiv+0x30c>
 8000ea6:	0f42      	lsrs	r2, r0, #29
 8000ea8:	00e4      	lsls	r4, r4, #3
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4acd      	ldr	r2, [pc, #820]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4693      	mov	fp, r2
 8000eba:	449b      	add	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	033c      	lsls	r4, r7, #12
 8000ec4:	007b      	lsls	r3, r7, #1
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	0d5b      	lsrs	r3, r3, #21
 8000ecc:	0fff      	lsrs	r7, r7, #31
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x5c>
 8000ed2:	e11a      	b.n	800110a <__aeabi_ddiv+0x292>
 8000ed4:	4ac4      	ldr	r2, [pc, #784]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x64>
 8000eda:	e15e      	b.n	800119a <__aeabi_ddiv+0x322>
 8000edc:	0f42      	lsrs	r2, r0, #29
 8000ede:	00e4      	lsls	r4, r4, #3
 8000ee0:	4322      	orrs	r2, r4
 8000ee2:	2480      	movs	r4, #128	; 0x80
 8000ee4:	0424      	lsls	r4, r4, #16
 8000ee6:	4314      	orrs	r4, r2
 8000ee8:	4ac0      	ldr	r2, [pc, #768]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eea:	00c1      	lsls	r1, r0, #3
 8000eec:	4694      	mov	ip, r2
 8000eee:	465a      	mov	r2, fp
 8000ef0:	4463      	add	r3, ip
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	0033      	movs	r3, r6
 8000efa:	407b      	eors	r3, r7
 8000efc:	469a      	mov	sl, r3
 8000efe:	464b      	mov	r3, r9
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d827      	bhi.n	8000f54 <__aeabi_ddiv+0xdc>
 8000f04:	4aba      	ldr	r2, [pc, #744]	; (80011f0 <__aeabi_ddiv+0x378>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	58d3      	ldr	r3, [r2, r3]
 8000f0a:	469f      	mov	pc, r3
 8000f0c:	46b2      	mov	sl, r6
 8000f0e:	9b00      	ldr	r3, [sp, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d016      	beq.n	8000f42 <__aeabi_ddiv+0xca>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xa2>
 8000f18:	e287      	b.n	800142a <__aeabi_ddiv+0x5b2>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_ddiv+0xa8>
 8000f1e:	e0d5      	b.n	80010cc <__aeabi_ddiv+0x254>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	2500      	movs	r5, #0
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	07d2      	lsls	r2, r2, #31
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	0028      	movs	r0, r5
 8000f32:	0019      	movs	r1, r3
 8000f34:	b005      	add	sp, #20
 8000f36:	bcf0      	pop	{r4, r5, r6, r7}
 8000f38:	46bb      	mov	fp, r7
 8000f3a:	46b2      	mov	sl, r6
 8000f3c:	46a9      	mov	r9, r5
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000f48:	e7ed      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8000f4a:	46ba      	mov	sl, r7
 8000f4c:	46a0      	mov	r8, r4
 8000f4e:	000d      	movs	r5, r1
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	e7dc      	b.n	8000f0e <__aeabi_ddiv+0x96>
 8000f54:	4544      	cmp	r4, r8
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0xe2>
 8000f58:	e1c4      	b.n	80012e4 <__aeabi_ddiv+0x46c>
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0xe6>
 8000f5c:	e1bf      	b.n	80012de <__aeabi_ddiv+0x466>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	469c      	mov	ip, r3
 8000f64:	002e      	movs	r6, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2500      	movs	r5, #0
 8000f6a:	44e3      	add	fp, ip
 8000f6c:	0223      	lsls	r3, r4, #8
 8000f6e:	0e0c      	lsrs	r4, r1, #24
 8000f70:	431c      	orrs	r4, r3
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	4699      	mov	r9, r3
 8000f76:	0423      	lsls	r3, r4, #16
 8000f78:	020a      	lsls	r2, r1, #8
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	9701      	str	r7, [sp, #4]
 8000f82:	f7ff f961 	bl	8000248 <__aeabi_uidivmod>
 8000f86:	0002      	movs	r2, r0
 8000f88:	437a      	muls	r2, r7
 8000f8a:	040b      	lsls	r3, r1, #16
 8000f8c:	0c31      	lsrs	r1, r6, #16
 8000f8e:	4680      	mov	r8, r0
 8000f90:	4319      	orrs	r1, r3
 8000f92:	428a      	cmp	r2, r1
 8000f94:	d907      	bls.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	1909      	adds	r1, r1, r4
 8000f9e:	44e0      	add	r8, ip
 8000fa0:	428c      	cmp	r4, r1
 8000fa2:	d800      	bhi.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000fa4:	e201      	b.n	80013aa <__aeabi_ddiv+0x532>
 8000fa6:	1a88      	subs	r0, r1, r2
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f7ff f94d 	bl	8000248 <__aeabi_uidivmod>
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0436      	lsls	r6, r6, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	0c36      	lsrs	r6, r6, #16
 8000fb8:	0003      	movs	r3, r0
 8000fba:	430e      	orrs	r6, r1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	d904      	bls.n	8000fca <__aeabi_ddiv+0x152>
 8000fc0:	1936      	adds	r6, r6, r4
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	42b4      	cmp	r4, r6
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x152>
 8000fc8:	e1e9      	b.n	800139e <__aeabi_ddiv+0x526>
 8000fca:	1ab0      	subs	r0, r6, r2
 8000fcc:	4642      	mov	r2, r8
 8000fce:	9e00      	ldr	r6, [sp, #0]
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	0c33      	lsrs	r3, r6, #16
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	4690      	mov	r8, r2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	0413      	lsls	r3, r2, #16
 8000fe0:	0432      	lsls	r2, r6, #16
 8000fe2:	0c16      	lsrs	r6, r2, #16
 8000fe4:	0032      	movs	r2, r6
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	9603      	str	r6, [sp, #12]
 8000fec:	437b      	muls	r3, r7
 8000fee:	434e      	muls	r6, r1
 8000ff0:	4379      	muls	r1, r7
 8000ff2:	0c17      	lsrs	r7, r2, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	199b      	adds	r3, r3, r6
 8000ff8:	4463      	add	r3, ip
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x18e>
 8000ffe:	2680      	movs	r6, #128	; 0x80
 8001000:	0276      	lsls	r6, r6, #9
 8001002:	46b4      	mov	ip, r6
 8001004:	4461      	add	r1, ip
 8001006:	0c1e      	lsrs	r6, r3, #16
 8001008:	1871      	adds	r1, r6, r1
 800100a:	0416      	lsls	r6, r2, #16
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	199e      	adds	r6, r3, r6
 8001012:	4288      	cmp	r0, r1
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1a4>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1c6>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1c6>
 800101c:	4643      	mov	r3, r8
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c0>
 8001036:	e19e      	b.n	8001376 <__aeabi_ddiv+0x4fe>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1c4>
 800103a:	e199      	b.n	8001370 <__aeabi_ddiv+0x4f8>
 800103c:	4690      	mov	r8, r2
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a40      	subs	r0, r0, r1
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1d8>
 800104e:	e1d2      	b.n	80013f6 <__aeabi_ddiv+0x57e>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8f9 	bl	8000248 <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f0>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4ca>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x20c>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4b4>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x23a>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	4286      	cmp	r6, r0
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x24c>
 80010c2:	e100      	b.n	80012c6 <__aeabi_ddiv+0x44e>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x250>
 80010c6:	e0fb      	b.n	80012c0 <__aeabi_ddiv+0x448>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x37c>)
 80010ce:	445b      	add	r3, fp
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x25e>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3b4>
 80010d6:	076a      	lsls	r2, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x264>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e0>
 80010dc:	08e9      	lsrs	r1, r5, #3
 80010de:	4642      	mov	r2, r8
 80010e0:	01d2      	lsls	r2, r2, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x27a>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x380>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4690      	mov	r8, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	445b      	add	r3, fp
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <__aeabi_ddiv+0x384>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x282>
 80010f8:	e723      	b.n	8000f42 <__aeabi_ddiv+0xca>
 80010fa:	4642      	mov	r2, r8
 80010fc:	055b      	lsls	r3, r3, #21
 80010fe:	0755      	lsls	r5, r2, #29
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	430d      	orrs	r5, r1
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	e70d      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800110a:	4651      	mov	r1, sl
 800110c:	4321      	orrs	r1, r4
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x29a>
 8001110:	e07c      	b.n	800120c <__aeabi_ddiv+0x394>
 8001112:	2c00      	cmp	r4, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x2a0>
 8001116:	e0fb      	b.n	8001310 <__aeabi_ddiv+0x498>
 8001118:	0020      	movs	r0, r4
 800111a:	f001 fa1b 	bl	8002554 <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	3a0b      	subs	r2, #11
 8001122:	231d      	movs	r3, #29
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	4652      	mov	r2, sl
 8001128:	0001      	movs	r1, r0
 800112a:	40da      	lsrs	r2, r3
 800112c:	4653      	mov	r3, sl
 800112e:	3908      	subs	r1, #8
 8001130:	408b      	lsls	r3, r1
 8001132:	408c      	lsls	r4, r1
 8001134:	0019      	movs	r1, r3
 8001136:	4314      	orrs	r4, r2
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x388>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 8001144:	0003      	movs	r3, r0
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x35e>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2da>
 8001150:	e0cf      	b.n	80012f2 <__aeabi_ddiv+0x47a>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 f9fe 	bl	8002554 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <__aeabi_ddiv+0x38c>)
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69e      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 8001184:	0002      	movs	r2, r0
 8001186:	4322      	orrs	r2, r4
 8001188:	4690      	mov	r8, r2
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x350>
 800118c:	2208      	movs	r2, #8
 800118e:	469b      	mov	fp, r3
 8001190:	2302      	movs	r3, #2
 8001192:	2500      	movs	r5, #0
 8001194:	4691      	mov	r9, r2
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e693      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 800119a:	4651      	mov	r1, sl
 800119c:	4321      	orrs	r1, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x33c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	464a      	mov	r2, r9
 80011a4:	431a      	orrs	r2, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x390>)
 80011a8:	4691      	mov	r9, r2
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e6a1      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x390>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4651      	mov	r1, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e697      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011c8:	220c      	movs	r2, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4691      	mov	r9, r2
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e675      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e66d      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	08014e1c 	.word	0x08014e1c
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	464a      	mov	r2, r9
 800120e:	2301      	movs	r3, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	4691      	mov	r9, r2
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66e      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001224:	0312      	lsls	r2, r2, #12
 8001226:	e67e      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2201      	movs	r2, #1
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	2a38      	cmp	r2, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3be>
 8001234:	e674      	b.n	8000f20 <__aeabi_ddiv+0xa8>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3c4>
 800123a:	e0bd      	b.n	80013b8 <__aeabi_ddiv+0x540>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	4641      	mov	r1, r8
 8001244:	40d9      	lsrs	r1, r3
 8001246:	000b      	movs	r3, r1
 8001248:	2a20      	cmp	r2, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3de>
 800124c:	4641      	mov	r1, r8
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <__aeabi_ddiv+0x5d0>)
 8001250:	445a      	add	r2, fp
 8001252:	4091      	lsls	r1, r2
 8001254:	430d      	orrs	r5, r1
 8001256:	0029      	movs	r1, r5
 8001258:	1e4a      	subs	r2, r1, #1
 800125a:	4191      	sbcs	r1, r2
 800125c:	4319      	orrs	r1, r3
 800125e:	2307      	movs	r3, #7
 8001260:	001d      	movs	r5, r3
 8001262:	2200      	movs	r2, #0
 8001264:	400d      	ands	r5, r1
 8001266:	420b      	tst	r3, r1
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x3f4>
 800126a:	e0d0      	b.n	800140e <__aeabi_ddiv+0x596>
 800126c:	220f      	movs	r2, #15
 800126e:	2300      	movs	r3, #0
 8001270:	400a      	ands	r2, r1
 8001272:	2a04      	cmp	r2, #4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x400>
 8001276:	e0c7      	b.n	8001408 <__aeabi_ddiv+0x590>
 8001278:	1d0a      	adds	r2, r1, #4
 800127a:	428a      	cmp	r2, r1
 800127c:	4189      	sbcs	r1, r1
 800127e:	4249      	negs	r1, r1
 8001280:	185b      	adds	r3, r3, r1
 8001282:	0011      	movs	r1, r2
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	d400      	bmi.n	800128a <__aeabi_ddiv+0x412>
 8001288:	e0be      	b.n	8001408 <__aeabi_ddiv+0x590>
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2500      	movs	r5, #0
 8001290:	e649      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4643      	mov	r3, r8
 8001296:	0312      	lsls	r2, r2, #12
 8001298:	4213      	tst	r3, r2
 800129a:	d008      	beq.n	80012ae <__aeabi_ddiv+0x436>
 800129c:	4214      	tst	r4, r2
 800129e:	d106      	bne.n	80012ae <__aeabi_ddiv+0x436>
 80012a0:	4322      	orrs	r2, r4
 80012a2:	0312      	lsls	r2, r2, #12
 80012a4:	46ba      	mov	sl, r7
 80012a6:	000d      	movs	r5, r1
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012aa:	0b12      	lsrs	r2, r2, #12
 80012ac:	e63b      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4643      	mov	r3, r8
 80012b2:	0312      	lsls	r2, r2, #12
 80012b4:	431a      	orrs	r2, r3
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	46b2      	mov	sl, r6
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	e632      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x44e>
 80012c4:	e702      	b.n	80010cc <__aeabi_ddiv+0x254>
 80012c6:	19a6      	adds	r6, r4, r6
 80012c8:	1e6a      	subs	r2, r5, #1
 80012ca:	42a6      	cmp	r6, r4
 80012cc:	d200      	bcs.n	80012d0 <__aeabi_ddiv+0x458>
 80012ce:	e089      	b.n	80013e4 <__aeabi_ddiv+0x56c>
 80012d0:	4286      	cmp	r6, r0
 80012d2:	d200      	bcs.n	80012d6 <__aeabi_ddiv+0x45e>
 80012d4:	e09f      	b.n	8001416 <__aeabi_ddiv+0x59e>
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x462>
 80012d8:	e0af      	b.n	800143a <__aeabi_ddiv+0x5c2>
 80012da:	0015      	movs	r5, r2
 80012dc:	e6f4      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d900      	bls.n	80012e4 <__aeabi_ddiv+0x46c>
 80012e2:	e63c      	b.n	8000f5e <__aeabi_ddiv+0xe6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	07de      	lsls	r6, r3, #31
 80012e8:	0858      	lsrs	r0, r3, #1
 80012ea:	086b      	lsrs	r3, r5, #1
 80012ec:	431e      	orrs	r6, r3
 80012ee:	07ed      	lsls	r5, r5, #31
 80012f0:	e63c      	b.n	8000f6c <__aeabi_ddiv+0xf4>
 80012f2:	f001 f92f 	bl	8002554 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x48c>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2e6>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x2fe>
 8001310:	f001 f920 	bl	8002554 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4aa>
 8001320:	e6ff      	b.n	8001122 <__aeabi_ddiv+0x2aa>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2100      	movs	r1, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c0>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4be>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4c4>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x20c>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4d4>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4da>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001358:	220f      	movs	r2, #15
 800135a:	402a      	ands	r2, r5
 800135c:	2a04      	cmp	r2, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4ea>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x264>
 8001362:	1d29      	adds	r1, r5, #4
 8001364:	42a9      	cmp	r1, r5
 8001366:	41ad      	sbcs	r5, r5
 8001368:	426d      	negs	r5, r5
 800136a:	08c9      	lsrs	r1, r1, #3
 800136c:	44a8      	add	r8, r5
 800136e:	e6b6      	b.n	80010de <__aeabi_ddiv+0x266>
 8001370:	42af      	cmp	r7, r5
 8001372:	d900      	bls.n	8001376 <__aeabi_ddiv+0x4fe>
 8001374:	e662      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001376:	4281      	cmp	r1, r0
 8001378:	d804      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x506>
 800137c:	e65e      	b.n	800103c <__aeabi_ddiv+0x1c4>
 800137e:	42ae      	cmp	r6, r5
 8001380:	d800      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 8001382:	e65b      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001384:	2302      	movs	r3, #2
 8001386:	425b      	negs	r3, r3
 8001388:	469c      	mov	ip, r3
 800138a:	9b00      	ldr	r3, [sp, #0]
 800138c:	44e0      	add	r8, ip
 800138e:	469c      	mov	ip, r3
 8001390:	4465      	add	r5, ip
 8001392:	429d      	cmp	r5, r3
 8001394:	419b      	sbcs	r3, r3
 8001396:	425b      	negs	r3, r3
 8001398:	191b      	adds	r3, r3, r4
 800139a:	18c0      	adds	r0, r0, r3
 800139c:	e64f      	b.n	800103e <__aeabi_ddiv+0x1c6>
 800139e:	42b2      	cmp	r2, r6
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x52c>
 80013a2:	e612      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013a4:	1e83      	subs	r3, r0, #2
 80013a6:	1936      	adds	r6, r6, r4
 80013a8:	e60f      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013aa:	428a      	cmp	r2, r1
 80013ac:	d800      	bhi.n	80013b0 <__aeabi_ddiv+0x538>
 80013ae:	e5fa      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	4698      	mov	r8, r3
 80013b4:	1909      	adds	r1, r1, r4
 80013b6:	e5f6      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <__aeabi_ddiv+0x5d4>)
 80013ba:	0028      	movs	r0, r5
 80013bc:	445b      	add	r3, fp
 80013be:	4641      	mov	r1, r8
 80013c0:	409d      	lsls	r5, r3
 80013c2:	4099      	lsls	r1, r3
 80013c4:	40d0      	lsrs	r0, r2
 80013c6:	1e6b      	subs	r3, r5, #1
 80013c8:	419d      	sbcs	r5, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	4301      	orrs	r1, r0
 80013ce:	4329      	orrs	r1, r5
 80013d0:	40d3      	lsrs	r3, r2
 80013d2:	074a      	lsls	r2, r1, #29
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x560>
 80013d6:	e755      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013d8:	220f      	movs	r2, #15
 80013da:	400a      	ands	r2, r1
 80013dc:	2a04      	cmp	r2, #4
 80013de:	d000      	beq.n	80013e2 <__aeabi_ddiv+0x56a>
 80013e0:	e74a      	b.n	8001278 <__aeabi_ddiv+0x400>
 80013e2:	e74f      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013e4:	0015      	movs	r5, r2
 80013e6:	4286      	cmp	r6, r0
 80013e8:	d000      	beq.n	80013ec <__aeabi_ddiv+0x574>
 80013ea:	e66d      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013ec:	9a00      	ldr	r2, [sp, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d000      	beq.n	80013f4 <__aeabi_ddiv+0x57c>
 80013f2:	e669      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013f4:	e66a      	b.n	80010cc <__aeabi_ddiv+0x254>
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <__aeabi_ddiv+0x5d8>)
 80013f8:	445b      	add	r3, fp
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc00      	bgt.n	8001400 <__aeabi_ddiv+0x588>
 80013fe:	e713      	b.n	8001228 <__aeabi_ddiv+0x3b0>
 8001400:	2501      	movs	r5, #1
 8001402:	2100      	movs	r1, #0
 8001404:	44a8      	add	r8, r5
 8001406:	e66a      	b.n	80010de <__aeabi_ddiv+0x266>
 8001408:	075d      	lsls	r5, r3, #29
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	0b1a      	lsrs	r2, r3, #12
 800140e:	08c9      	lsrs	r1, r1, #3
 8001410:	2300      	movs	r3, #0
 8001412:	430d      	orrs	r5, r1
 8001414:	e587      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	3d02      	subs	r5, #2
 800141a:	004a      	lsls	r2, r1, #1
 800141c:	428a      	cmp	r2, r1
 800141e:	41bf      	sbcs	r7, r7
 8001420:	427f      	negs	r7, r7
 8001422:	193f      	adds	r7, r7, r4
 8001424:	19f6      	adds	r6, r6, r7
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	e7dd      	b.n	80013e6 <__aeabi_ddiv+0x56e>
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4643      	mov	r3, r8
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	431a      	orrs	r2, r3
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001436:	0b12      	lsrs	r2, r2, #12
 8001438:	e575      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	4299      	cmp	r1, r3
 800143e:	d3ea      	bcc.n	8001416 <__aeabi_ddiv+0x59e>
 8001440:	0015      	movs	r5, r2
 8001442:	e7d3      	b.n	80013ec <__aeabi_ddiv+0x574>
 8001444:	000007ff 	.word	0x000007ff
 8001448:	0000043e 	.word	0x0000043e
 800144c:	0000041e 	.word	0x0000041e
 8001450:	000003ff 	.word	0x000003ff

08001454 <__eqdf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	46de      	mov	lr, fp
 800145c:	4657      	mov	r7, sl
 800145e:	4690      	mov	r8, r2
 8001460:	b5e0      	push	{r5, r6, r7, lr}
 8001462:	0017      	movs	r7, r2
 8001464:	031a      	lsls	r2, r3, #12
 8001466:	0b12      	lsrs	r2, r2, #12
 8001468:	0005      	movs	r5, r0
 800146a:	4684      	mov	ip, r0
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <__eqdf2+0x80>)
 800146e:	030e      	lsls	r6, r1, #12
 8001470:	004c      	lsls	r4, r1, #1
 8001472:	4691      	mov	r9, r2
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	0fdb      	lsrs	r3, r3, #31
 8001478:	469b      	mov	fp, r3
 800147a:	0b36      	lsrs	r6, r6, #12
 800147c:	0d64      	lsrs	r4, r4, #21
 800147e:	0fc9      	lsrs	r1, r1, #31
 8001480:	0d52      	lsrs	r2, r2, #21
 8001482:	4284      	cmp	r4, r0
 8001484:	d019      	beq.n	80014ba <__eqdf2+0x66>
 8001486:	4282      	cmp	r2, r0
 8001488:	d010      	beq.n	80014ac <__eqdf2+0x58>
 800148a:	2001      	movs	r0, #1
 800148c:	4294      	cmp	r4, r2
 800148e:	d10e      	bne.n	80014ae <__eqdf2+0x5a>
 8001490:	454e      	cmp	r6, r9
 8001492:	d10c      	bne.n	80014ae <__eqdf2+0x5a>
 8001494:	2001      	movs	r0, #1
 8001496:	45c4      	cmp	ip, r8
 8001498:	d109      	bne.n	80014ae <__eqdf2+0x5a>
 800149a:	4559      	cmp	r1, fp
 800149c:	d017      	beq.n	80014ce <__eqdf2+0x7a>
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d105      	bne.n	80014ae <__eqdf2+0x5a>
 80014a2:	0030      	movs	r0, r6
 80014a4:	4328      	orrs	r0, r5
 80014a6:	1e43      	subs	r3, r0, #1
 80014a8:	4198      	sbcs	r0, r3
 80014aa:	e000      	b.n	80014ae <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	bcf0      	pop	{r4, r5, r6, r7}
 80014b0:	46bb      	mov	fp, r7
 80014b2:	46b2      	mov	sl, r6
 80014b4:	46a9      	mov	r9, r5
 80014b6:	46a0      	mov	r8, r4
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	0033      	movs	r3, r6
 80014bc:	2001      	movs	r0, #1
 80014be:	432b      	orrs	r3, r5
 80014c0:	d1f5      	bne.n	80014ae <__eqdf2+0x5a>
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d1f3      	bne.n	80014ae <__eqdf2+0x5a>
 80014c6:	464b      	mov	r3, r9
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d1f0      	bne.n	80014ae <__eqdf2+0x5a>
 80014cc:	e7e2      	b.n	8001494 <__eqdf2+0x40>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7ed      	b.n	80014ae <__eqdf2+0x5a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	4647      	mov	r7, r8
 80014dc:	46ce      	mov	lr, r9
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	0016      	movs	r6, r2
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	0b1b      	lsrs	r3, r3, #12
 80014e8:	4d2d      	ldr	r5, [pc, #180]	; (80015a0 <__gedf2+0xc8>)
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	b580      	push	{r7, lr}
 80014f0:	0043      	lsls	r3, r0, #1
 80014f2:	030f      	lsls	r7, r1, #12
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d021      	beq.n	800154a <__gedf2+0x72>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d013      	beq.n	8001532 <__gedf2+0x5a>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d122      	bne.n	8001554 <__gedf2+0x7c>
 800150e:	433c      	orrs	r4, r7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <__gedf2+0x42>
 8001514:	464d      	mov	r5, r9
 8001516:	432e      	orrs	r6, r5
 8001518:	d022      	beq.n	8001560 <__gedf2+0x88>
 800151a:	2c00      	cmp	r4, #0
 800151c:	d010      	beq.n	8001540 <__gedf2+0x68>
 800151e:	4281      	cmp	r1, r0
 8001520:	d022      	beq.n	8001568 <__gedf2+0x90>
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bcc0      	pop	{r6, r7}
 800152c:	46b9      	mov	r9, r7
 800152e:	46b0      	mov	r8, r6
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	464d      	mov	r5, r9
 8001534:	432e      	orrs	r6, r5
 8001536:	d129      	bne.n	800158c <__gedf2+0xb4>
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f0      	bne.n	800151e <__gedf2+0x46>
 800153c:	433c      	orrs	r4, r7
 800153e:	d1ee      	bne.n	800151e <__gedf2+0x46>
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f2      	bne.n	800152a <__gedf2+0x52>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7ef      	b.n	800152a <__gedf2+0x52>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d11d      	bne.n	800158c <__gedf2+0xb4>
 8001550:	4293      	cmp	r3, r2
 8001552:	d0ee      	beq.n	8001532 <__gedf2+0x5a>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e2      	bne.n	800151e <__gedf2+0x46>
 8001558:	464c      	mov	r4, r9
 800155a:	4326      	orrs	r6, r4
 800155c:	d1df      	bne.n	800151e <__gedf2+0x46>
 800155e:	e7e0      	b.n	8001522 <__gedf2+0x4a>
 8001560:	2000      	movs	r0, #0
 8001562:	2c00      	cmp	r4, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7dc      	b.n	8001522 <__gedf2+0x4a>
 8001568:	429a      	cmp	r2, r3
 800156a:	dc0a      	bgt.n	8001582 <__gedf2+0xaa>
 800156c:	dbe8      	blt.n	8001540 <__gedf2+0x68>
 800156e:	454f      	cmp	r7, r9
 8001570:	d8d7      	bhi.n	8001522 <__gedf2+0x4a>
 8001572:	d00e      	beq.n	8001592 <__gedf2+0xba>
 8001574:	2000      	movs	r0, #0
 8001576:	454f      	cmp	r7, r9
 8001578:	d2d7      	bcs.n	800152a <__gedf2+0x52>
 800157a:	2900      	cmp	r1, #0
 800157c:	d0e2      	beq.n	8001544 <__gedf2+0x6c>
 800157e:	0008      	movs	r0, r1
 8001580:	e7d3      	b.n	800152a <__gedf2+0x52>
 8001582:	4243      	negs	r3, r0
 8001584:	4158      	adcs	r0, r3
 8001586:	0040      	lsls	r0, r0, #1
 8001588:	3801      	subs	r0, #1
 800158a:	e7ce      	b.n	800152a <__gedf2+0x52>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7cb      	b.n	800152a <__gedf2+0x52>
 8001592:	45c4      	cmp	ip, r8
 8001594:	d8c5      	bhi.n	8001522 <__gedf2+0x4a>
 8001596:	2000      	movs	r0, #0
 8001598:	45c4      	cmp	ip, r8
 800159a:	d2c6      	bcs.n	800152a <__gedf2+0x52>
 800159c:	e7ed      	b.n	800157a <__gedf2+0xa2>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4647      	mov	r7, r8
 80015a8:	46ce      	mov	lr, r9
 80015aa:	0004      	movs	r4, r0
 80015ac:	0018      	movs	r0, r3
 80015ae:	0016      	movs	r6, r2
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	0b1b      	lsrs	r3, r3, #12
 80015b4:	4d2c      	ldr	r5, [pc, #176]	; (8001668 <__ledf2+0xc4>)
 80015b6:	004a      	lsls	r2, r1, #1
 80015b8:	4699      	mov	r9, r3
 80015ba:	b580      	push	{r7, lr}
 80015bc:	0043      	lsls	r3, r0, #1
 80015be:	030f      	lsls	r7, r1, #12
 80015c0:	46a4      	mov	ip, r4
 80015c2:	46b0      	mov	r8, r6
 80015c4:	0b3f      	lsrs	r7, r7, #12
 80015c6:	0d52      	lsrs	r2, r2, #21
 80015c8:	0fc9      	lsrs	r1, r1, #31
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fc0      	lsrs	r0, r0, #31
 80015ce:	42aa      	cmp	r2, r5
 80015d0:	d00d      	beq.n	80015ee <__ledf2+0x4a>
 80015d2:	42ab      	cmp	r3, r5
 80015d4:	d010      	beq.n	80015f8 <__ledf2+0x54>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d127      	bne.n	800162a <__ledf2+0x86>
 80015da:	433c      	orrs	r4, r7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <__ledf2+0x60>
 80015e0:	464d      	mov	r5, r9
 80015e2:	432e      	orrs	r6, r5
 80015e4:	d10e      	bne.n	8001604 <__ledf2+0x60>
 80015e6:	2000      	movs	r0, #0
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d015      	beq.n	8001618 <__ledf2+0x74>
 80015ec:	e00e      	b.n	800160c <__ledf2+0x68>
 80015ee:	003d      	movs	r5, r7
 80015f0:	4325      	orrs	r5, r4
 80015f2:	d110      	bne.n	8001616 <__ledf2+0x72>
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d118      	bne.n	800162a <__ledf2+0x86>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10b      	bne.n	8001616 <__ledf2+0x72>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d102      	bne.n	8001608 <__ledf2+0x64>
 8001602:	433c      	orrs	r4, r7
 8001604:	2c00      	cmp	r4, #0
 8001606:	d00b      	beq.n	8001620 <__ledf2+0x7c>
 8001608:	4281      	cmp	r1, r0
 800160a:	d014      	beq.n	8001636 <__ledf2+0x92>
 800160c:	2002      	movs	r0, #2
 800160e:	3901      	subs	r1, #1
 8001610:	4008      	ands	r0, r1
 8001612:	3801      	subs	r0, #1
 8001614:	e000      	b.n	8001618 <__ledf2+0x74>
 8001616:	2002      	movs	r0, #2
 8001618:	bcc0      	pop	{r6, r7}
 800161a:	46b9      	mov	r9, r7
 800161c:	46b0      	mov	r8, r6
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001620:	2800      	cmp	r0, #0
 8001622:	d1f9      	bne.n	8001618 <__ledf2+0x74>
 8001624:	2001      	movs	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7f6      	b.n	8001618 <__ledf2+0x74>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ec      	bne.n	8001608 <__ledf2+0x64>
 800162e:	464c      	mov	r4, r9
 8001630:	4326      	orrs	r6, r4
 8001632:	d1e9      	bne.n	8001608 <__ledf2+0x64>
 8001634:	e7ea      	b.n	800160c <__ledf2+0x68>
 8001636:	429a      	cmp	r2, r3
 8001638:	dd04      	ble.n	8001644 <__ledf2+0xa0>
 800163a:	4243      	negs	r3, r0
 800163c:	4158      	adcs	r0, r3
 800163e:	0040      	lsls	r0, r0, #1
 8001640:	3801      	subs	r0, #1
 8001642:	e7e9      	b.n	8001618 <__ledf2+0x74>
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <__ledf2+0x7c>
 8001648:	454f      	cmp	r7, r9
 800164a:	d8df      	bhi.n	800160c <__ledf2+0x68>
 800164c:	d006      	beq.n	800165c <__ledf2+0xb8>
 800164e:	2000      	movs	r0, #0
 8001650:	454f      	cmp	r7, r9
 8001652:	d2e1      	bcs.n	8001618 <__ledf2+0x74>
 8001654:	2900      	cmp	r1, #0
 8001656:	d0e5      	beq.n	8001624 <__ledf2+0x80>
 8001658:	0008      	movs	r0, r1
 800165a:	e7dd      	b.n	8001618 <__ledf2+0x74>
 800165c:	45c4      	cmp	ip, r8
 800165e:	d8d5      	bhi.n	800160c <__ledf2+0x68>
 8001660:	2000      	movs	r0, #0
 8001662:	45c4      	cmp	ip, r8
 8001664:	d2d8      	bcs.n	8001618 <__ledf2+0x74>
 8001666:	e7f5      	b.n	8001654 <__ledf2+0xb0>
 8001668:	000007ff 	.word	0x000007ff

0800166c <__aeabi_dmul>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	4657      	mov	r7, sl
 8001674:	464e      	mov	r6, r9
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	001f      	movs	r7, r3
 800167a:	030b      	lsls	r3, r1, #12
 800167c:	0b1b      	lsrs	r3, r3, #12
 800167e:	469b      	mov	fp, r3
 8001680:	004d      	lsls	r5, r1, #1
 8001682:	0fcb      	lsrs	r3, r1, #31
 8001684:	0004      	movs	r4, r0
 8001686:	4691      	mov	r9, r2
 8001688:	4698      	mov	r8, r3
 800168a:	b087      	sub	sp, #28
 800168c:	0d6d      	lsrs	r5, r5, #21
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x26>
 8001690:	e1cd      	b.n	8001a2e <__aeabi_dmul+0x3c2>
 8001692:	4bce      	ldr	r3, [pc, #824]	; (80019cc <__aeabi_dmul+0x360>)
 8001694:	429d      	cmp	r5, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x2e>
 8001698:	e1e9      	b.n	8001a6e <__aeabi_dmul+0x402>
 800169a:	465a      	mov	r2, fp
 800169c:	0f43      	lsrs	r3, r0, #29
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	00c3      	lsls	r3, r0, #3
 80016aa:	469a      	mov	sl, r3
 80016ac:	4bc8      	ldr	r3, [pc, #800]	; (80019d0 <__aeabi_dmul+0x364>)
 80016ae:	4693      	mov	fp, r2
 80016b0:	469c      	mov	ip, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	2600      	movs	r6, #0
 80016b6:	4465      	add	r5, ip
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	033c      	lsls	r4, r7, #12
 80016bc:	007b      	lsls	r3, r7, #1
 80016be:	4648      	mov	r0, r9
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	0fff      	lsrs	r7, r7, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x60>
 80016ca:	e189      	b.n	80019e0 <__aeabi_dmul+0x374>
 80016cc:	4abf      	ldr	r2, [pc, #764]	; (80019cc <__aeabi_dmul+0x360>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <__aeabi_dmul+0x9a>
 80016d2:	0f42      	lsrs	r2, r0, #29
 80016d4:	00e4      	lsls	r4, r4, #3
 80016d6:	4322      	orrs	r2, r4
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0424      	lsls	r4, r4, #16
 80016dc:	4314      	orrs	r4, r2
 80016de:	4abc      	ldr	r2, [pc, #752]	; (80019d0 <__aeabi_dmul+0x364>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4694      	mov	ip, r2
 80016e4:	4642      	mov	r2, r8
 80016e6:	4463      	add	r3, ip
 80016e8:	195b      	adds	r3, r3, r5
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
 80016ee:	407a      	eors	r2, r7
 80016f0:	3301      	adds	r3, #1
 80016f2:	00c0      	lsls	r0, r0, #3
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2e0a      	cmp	r6, #10
 80016fa:	dd1c      	ble.n	8001736 <__aeabi_dmul+0xca>
 80016fc:	003a      	movs	r2, r7
 80016fe:	2e0b      	cmp	r6, #11
 8001700:	d05e      	beq.n	80017c0 <__aeabi_dmul+0x154>
 8001702:	4647      	mov	r7, r8
 8001704:	e056      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001706:	4649      	mov	r1, r9
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <__aeabi_dmul+0x360>)
 800170a:	4321      	orrs	r1, r4
 800170c:	18eb      	adds	r3, r5, r3
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2900      	cmp	r1, #0
 8001712:	d12a      	bne.n	800176a <__aeabi_dmul+0xfe>
 8001714:	2080      	movs	r0, #128	; 0x80
 8001716:	2202      	movs	r2, #2
 8001718:	0100      	lsls	r0, r0, #4
 800171a:	002b      	movs	r3, r5
 800171c:	4684      	mov	ip, r0
 800171e:	4316      	orrs	r6, r2
 8001720:	4642      	mov	r2, r8
 8001722:	4463      	add	r3, ip
 8001724:	407a      	eors	r2, r7
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2e0a      	cmp	r6, #10
 800172c:	dd00      	ble.n	8001730 <__aeabi_dmul+0xc4>
 800172e:	e231      	b.n	8001b94 <__aeabi_dmul+0x528>
 8001730:	2000      	movs	r0, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2e02      	cmp	r6, #2
 8001738:	dc26      	bgt.n	8001788 <__aeabi_dmul+0x11c>
 800173a:	3e01      	subs	r6, #1
 800173c:	2e01      	cmp	r6, #1
 800173e:	d852      	bhi.n	80017e6 <__aeabi_dmul+0x17a>
 8001740:	2902      	cmp	r1, #2
 8001742:	d04c      	beq.n	80017de <__aeabi_dmul+0x172>
 8001744:	2901      	cmp	r1, #1
 8001746:	d000      	beq.n	800174a <__aeabi_dmul+0xde>
 8001748:	e118      	b.n	800197c <__aeabi_dmul+0x310>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2500      	movs	r5, #0
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	4323      	orrs	r3, r4
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	4313      	orrs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	0019      	movs	r1, r3
 800175c:	b007      	add	sp, #28
 800175e:	bcf0      	pop	{r4, r5, r6, r7}
 8001760:	46bb      	mov	fp, r7
 8001762:	46b2      	mov	sl, r6
 8001764:	46a9      	mov	r9, r5
 8001766:	46a0      	mov	r8, r4
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	2203      	movs	r2, #3
 800176e:	0109      	lsls	r1, r1, #4
 8001770:	002b      	movs	r3, r5
 8001772:	468c      	mov	ip, r1
 8001774:	4316      	orrs	r6, r2
 8001776:	4642      	mov	r2, r8
 8001778:	4463      	add	r3, ip
 800177a:	407a      	eors	r2, r7
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2e0a      	cmp	r6, #10
 8001782:	dd00      	ble.n	8001786 <__aeabi_dmul+0x11a>
 8001784:	e228      	b.n	8001bd8 <__aeabi_dmul+0x56c>
 8001786:	2103      	movs	r1, #3
 8001788:	2501      	movs	r5, #1
 800178a:	40b5      	lsls	r5, r6
 800178c:	46ac      	mov	ip, r5
 800178e:	26a6      	movs	r6, #166	; 0xa6
 8001790:	4663      	mov	r3, ip
 8001792:	00f6      	lsls	r6, r6, #3
 8001794:	4035      	ands	r5, r6
 8001796:	4233      	tst	r3, r6
 8001798:	d10b      	bne.n	80017b2 <__aeabi_dmul+0x146>
 800179a:	2690      	movs	r6, #144	; 0x90
 800179c:	00b6      	lsls	r6, r6, #2
 800179e:	4233      	tst	r3, r6
 80017a0:	d118      	bne.n	80017d4 <__aeabi_dmul+0x168>
 80017a2:	3eb9      	subs	r6, #185	; 0xb9
 80017a4:	3eff      	subs	r6, #255	; 0xff
 80017a6:	421e      	tst	r6, r3
 80017a8:	d01d      	beq.n	80017e6 <__aeabi_dmul+0x17a>
 80017aa:	46a3      	mov	fp, r4
 80017ac:	4682      	mov	sl, r0
 80017ae:	9100      	str	r1, [sp, #0]
 80017b0:	e000      	b.n	80017b4 <__aeabi_dmul+0x148>
 80017b2:	0017      	movs	r7, r2
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	003a      	movs	r2, r7
 80017b8:	2902      	cmp	r1, #2
 80017ba:	d010      	beq.n	80017de <__aeabi_dmul+0x172>
 80017bc:	465c      	mov	r4, fp
 80017be:	4650      	mov	r0, sl
 80017c0:	2903      	cmp	r1, #3
 80017c2:	d1bf      	bne.n	8001744 <__aeabi_dmul+0xd8>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	431c      	orrs	r4, r3
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <__aeabi_dmul+0x360>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	e7bd      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017d4:	2480      	movs	r4, #128	; 0x80
 80017d6:	2200      	movs	r2, #0
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <__aeabi_dmul+0x360>)
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	e7b8      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017de:	2400      	movs	r4, #0
 80017e0:	2500      	movs	r5, #0
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <__aeabi_dmul+0x360>)
 80017e4:	e7b4      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017e6:	4653      	mov	r3, sl
 80017e8:	041e      	lsls	r6, r3, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	0c1f      	lsrs	r7, r3, #16
 80017ee:	0033      	movs	r3, r6
 80017f0:	0c01      	lsrs	r1, r0, #16
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c00      	lsrs	r0, r0, #16
 80017f6:	4343      	muls	r3, r0
 80017f8:	4698      	mov	r8, r3
 80017fa:	0003      	movs	r3, r0
 80017fc:	437b      	muls	r3, r7
 80017fe:	4699      	mov	r9, r3
 8001800:	0033      	movs	r3, r6
 8001802:	434b      	muls	r3, r1
 8001804:	469c      	mov	ip, r3
 8001806:	4643      	mov	r3, r8
 8001808:	000d      	movs	r5, r1
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	469a      	mov	sl, r3
 800180e:	437d      	muls	r5, r7
 8001810:	44cc      	add	ip, r9
 8001812:	44d4      	add	ip, sl
 8001814:	9500      	str	r5, [sp, #0]
 8001816:	45e1      	cmp	r9, ip
 8001818:	d904      	bls.n	8001824 <__aeabi_dmul+0x1b8>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4699      	mov	r9, r3
 8001820:	444d      	add	r5, r9
 8001822:	9500      	str	r5, [sp, #0]
 8001824:	4663      	mov	r3, ip
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	001d      	movs	r5, r3
 800182a:	4663      	mov	r3, ip
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	469c      	mov	ip, r3
 8001830:	4643      	mov	r3, r8
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	4663      	mov	r3, ip
 800183a:	4443      	add	r3, r8
 800183c:	9303      	str	r3, [sp, #12]
 800183e:	0c23      	lsrs	r3, r4, #16
 8001840:	4698      	mov	r8, r3
 8001842:	0033      	movs	r3, r6
 8001844:	0424      	lsls	r4, r4, #16
 8001846:	0c24      	lsrs	r4, r4, #16
 8001848:	4363      	muls	r3, r4
 800184a:	469c      	mov	ip, r3
 800184c:	0023      	movs	r3, r4
 800184e:	437b      	muls	r3, r7
 8001850:	4699      	mov	r9, r3
 8001852:	4643      	mov	r3, r8
 8001854:	435e      	muls	r6, r3
 8001856:	435f      	muls	r7, r3
 8001858:	444e      	add	r6, r9
 800185a:	4663      	mov	r3, ip
 800185c:	46b2      	mov	sl, r6
 800185e:	0c1e      	lsrs	r6, r3, #16
 8001860:	4456      	add	r6, sl
 8001862:	45b1      	cmp	r9, r6
 8001864:	d903      	bls.n	800186e <__aeabi_dmul+0x202>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4699      	mov	r9, r3
 800186c:	444f      	add	r7, r9
 800186e:	0c33      	lsrs	r3, r6, #16
 8001870:	4699      	mov	r9, r3
 8001872:	003b      	movs	r3, r7
 8001874:	444b      	add	r3, r9
 8001876:	9305      	str	r3, [sp, #20]
 8001878:	4663      	mov	r3, ip
 800187a:	46ac      	mov	ip, r5
 800187c:	041f      	lsls	r7, r3, #16
 800187e:	0c3f      	lsrs	r7, r7, #16
 8001880:	0436      	lsls	r6, r6, #16
 8001882:	19f6      	adds	r6, r6, r7
 8001884:	44b4      	add	ip, r6
 8001886:	4663      	mov	r3, ip
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	465b      	mov	r3, fp
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	469c      	mov	ip, r3
 8001890:	465b      	mov	r3, fp
 8001892:	041f      	lsls	r7, r3, #16
 8001894:	0c3f      	lsrs	r7, r7, #16
 8001896:	003b      	movs	r3, r7
 8001898:	4343      	muls	r3, r0
 800189a:	4699      	mov	r9, r3
 800189c:	4663      	mov	r3, ip
 800189e:	4343      	muls	r3, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	4660      	mov	r0, ip
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	469b      	mov	fp, r3
 80018aa:	4348      	muls	r0, r1
 80018ac:	4379      	muls	r1, r7
 80018ae:	4451      	add	r1, sl
 80018b0:	4459      	add	r1, fp
 80018b2:	458a      	cmp	sl, r1
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x252>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	469a      	mov	sl, r3
 80018bc:	4450      	add	r0, sl
 80018be:	0c0b      	lsrs	r3, r1, #16
 80018c0:	469a      	mov	sl, r3
 80018c2:	464b      	mov	r3, r9
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	4699      	mov	r9, r3
 80018ca:	003b      	movs	r3, r7
 80018cc:	4363      	muls	r3, r4
 80018ce:	0409      	lsls	r1, r1, #16
 80018d0:	4645      	mov	r5, r8
 80018d2:	4449      	add	r1, r9
 80018d4:	4699      	mov	r9, r3
 80018d6:	4663      	mov	r3, ip
 80018d8:	435c      	muls	r4, r3
 80018da:	436b      	muls	r3, r5
 80018dc:	469c      	mov	ip, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	4698      	mov	r8, r3
 80018e4:	436f      	muls	r7, r5
 80018e6:	193f      	adds	r7, r7, r4
 80018e8:	4447      	add	r7, r8
 80018ea:	4450      	add	r0, sl
 80018ec:	42bc      	cmp	r4, r7
 80018ee:	d903      	bls.n	80018f8 <__aeabi_dmul+0x28c>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	4698      	mov	r8, r3
 80018f6:	44c4      	add	ip, r8
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	9d00      	ldr	r5, [sp, #0]
 80018fc:	4698      	mov	r8, r3
 80018fe:	4445      	add	r5, r8
 8001900:	42b5      	cmp	r5, r6
 8001902:	41b6      	sbcs	r6, r6
 8001904:	4273      	negs	r3, r6
 8001906:	4698      	mov	r8, r3
 8001908:	464b      	mov	r3, r9
 800190a:	041e      	lsls	r6, r3, #16
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	043c      	lsls	r4, r7, #16
 8001910:	4699      	mov	r9, r3
 8001912:	0c36      	lsrs	r6, r6, #16
 8001914:	19a4      	adds	r4, r4, r6
 8001916:	444c      	add	r4, r9
 8001918:	46a1      	mov	r9, r4
 800191a:	4683      	mov	fp, r0
 800191c:	186e      	adds	r6, r5, r1
 800191e:	44c1      	add	r9, r8
 8001920:	428e      	cmp	r6, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	44cb      	add	fp, r9
 8001926:	465d      	mov	r5, fp
 8001928:	4249      	negs	r1, r1
 800192a:	186d      	adds	r5, r5, r1
 800192c:	429c      	cmp	r4, r3
 800192e:	41a4      	sbcs	r4, r4
 8001930:	45c1      	cmp	r9, r8
 8001932:	419b      	sbcs	r3, r3
 8001934:	4583      	cmp	fp, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	428d      	cmp	r5, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	425b      	negs	r3, r3
 800193e:	4264      	negs	r4, r4
 8001940:	431c      	orrs	r4, r3
 8001942:	4240      	negs	r0, r0
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	4249      	negs	r1, r1
 8001948:	4301      	orrs	r1, r0
 800194a:	0270      	lsls	r0, r6, #9
 800194c:	0c3f      	lsrs	r7, r7, #16
 800194e:	4318      	orrs	r0, r3
 8001950:	19e4      	adds	r4, r4, r7
 8001952:	1e47      	subs	r7, r0, #1
 8001954:	41b8      	sbcs	r0, r7
 8001956:	1864      	adds	r4, r4, r1
 8001958:	4464      	add	r4, ip
 800195a:	0df6      	lsrs	r6, r6, #23
 800195c:	0261      	lsls	r1, r4, #9
 800195e:	4330      	orrs	r0, r6
 8001960:	0dec      	lsrs	r4, r5, #23
 8001962:	026e      	lsls	r6, r5, #9
 8001964:	430c      	orrs	r4, r1
 8001966:	4330      	orrs	r0, r6
 8001968:	01c9      	lsls	r1, r1, #7
 800196a:	d400      	bmi.n	800196e <__aeabi_dmul+0x302>
 800196c:	e0f1      	b.n	8001b52 <__aeabi_dmul+0x4e6>
 800196e:	2101      	movs	r1, #1
 8001970:	0843      	lsrs	r3, r0, #1
 8001972:	4001      	ands	r1, r0
 8001974:	430b      	orrs	r3, r1
 8001976:	07e0      	lsls	r0, r4, #31
 8001978:	4318      	orrs	r0, r3
 800197a:	0864      	lsrs	r4, r4, #1
 800197c:	4915      	ldr	r1, [pc, #84]	; (80019d4 <__aeabi_dmul+0x368>)
 800197e:	9b02      	ldr	r3, [sp, #8]
 8001980:	468c      	mov	ip, r1
 8001982:	4463      	add	r3, ip
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_dmul+0x31e>
 8001988:	e097      	b.n	8001aba <__aeabi_dmul+0x44e>
 800198a:	0741      	lsls	r1, r0, #29
 800198c:	d009      	beq.n	80019a2 <__aeabi_dmul+0x336>
 800198e:	210f      	movs	r1, #15
 8001990:	4001      	ands	r1, r0
 8001992:	2904      	cmp	r1, #4
 8001994:	d005      	beq.n	80019a2 <__aeabi_dmul+0x336>
 8001996:	1d01      	adds	r1, r0, #4
 8001998:	4281      	cmp	r1, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	4240      	negs	r0, r0
 800199e:	1824      	adds	r4, r4, r0
 80019a0:	0008      	movs	r0, r1
 80019a2:	01e1      	lsls	r1, r4, #7
 80019a4:	d506      	bpl.n	80019b4 <__aeabi_dmul+0x348>
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	00c9      	lsls	r1, r1, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <__aeabi_dmul+0x36c>)
 80019ae:	401c      	ands	r4, r3
 80019b0:	9b02      	ldr	r3, [sp, #8]
 80019b2:	4463      	add	r3, ip
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <__aeabi_dmul+0x370>)
 80019b6:	428b      	cmp	r3, r1
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dmul+0x350>
 80019ba:	e710      	b.n	80017de <__aeabi_dmul+0x172>
 80019bc:	0761      	lsls	r1, r4, #29
 80019be:	08c5      	lsrs	r5, r0, #3
 80019c0:	0264      	lsls	r4, r4, #9
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	430d      	orrs	r5, r1
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	e6c1      	b.n	8001750 <__aeabi_dmul+0xe4>
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	fffffc01 	.word	0xfffffc01
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	464b      	mov	r3, r9
 80019e2:	4323      	orrs	r3, r4
 80019e4:	d059      	beq.n	8001a9a <__aeabi_dmul+0x42e>
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x380>
 80019ea:	e0a3      	b.n	8001b34 <__aeabi_dmul+0x4c8>
 80019ec:	0020      	movs	r0, r4
 80019ee:	f000 fdb1 	bl	8002554 <__clzsi2>
 80019f2:	0001      	movs	r1, r0
 80019f4:	0003      	movs	r3, r0
 80019f6:	390b      	subs	r1, #11
 80019f8:	221d      	movs	r2, #29
 80019fa:	1a52      	subs	r2, r2, r1
 80019fc:	4649      	mov	r1, r9
 80019fe:	0018      	movs	r0, r3
 8001a00:	40d1      	lsrs	r1, r2
 8001a02:	464a      	mov	r2, r9
 8001a04:	3808      	subs	r0, #8
 8001a06:	4082      	lsls	r2, r0
 8001a08:	4084      	lsls	r4, r0
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	430c      	orrs	r4, r1
 8001a0e:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a10:	1aeb      	subs	r3, r5, r3
 8001a12:	4694      	mov	ip, r2
 8001a14:	4642      	mov	r2, r8
 8001a16:	4463      	add	r3, ip
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	407a      	eors	r2, r7
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2e0a      	cmp	r6, #10
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dmul+0x3c0>
 8001a2a:	e667      	b.n	80016fc <__aeabi_dmul+0x90>
 8001a2c:	e683      	b.n	8001736 <__aeabi_dmul+0xca>
 8001a2e:	465b      	mov	r3, fp
 8001a30:	4303      	orrs	r3, r0
 8001a32:	469a      	mov	sl, r3
 8001a34:	d02a      	beq.n	8001a8c <__aeabi_dmul+0x420>
 8001a36:	465b      	mov	r3, fp
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06d      	beq.n	8001b18 <__aeabi_dmul+0x4ac>
 8001a3c:	4658      	mov	r0, fp
 8001a3e:	f000 fd89 	bl	8002554 <__clzsi2>
 8001a42:	0001      	movs	r1, r0
 8001a44:	0003      	movs	r3, r0
 8001a46:	390b      	subs	r1, #11
 8001a48:	221d      	movs	r2, #29
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	465d      	mov	r5, fp
 8001a52:	40d1      	lsrs	r1, r2
 8001a54:	3808      	subs	r0, #8
 8001a56:	4085      	lsls	r5, r0
 8001a58:	000a      	movs	r2, r1
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	432a      	orrs	r2, r5
 8001a5e:	4693      	mov	fp, r2
 8001a60:	46a2      	mov	sl, r4
 8001a62:	4d5f      	ldr	r5, [pc, #380]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a64:	2600      	movs	r6, #0
 8001a66:	1aed      	subs	r5, r5, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e625      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	4303      	orrs	r3, r0
 8001a72:	469a      	mov	sl, r3
 8001a74:	d105      	bne.n	8001a82 <__aeabi_dmul+0x416>
 8001a76:	2300      	movs	r3, #0
 8001a78:	469b      	mov	fp, r3
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	2608      	movs	r6, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	e61b      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a82:	2303      	movs	r3, #3
 8001a84:	4682      	mov	sl, r0
 8001a86:	260c      	movs	r6, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	e616      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	469b      	mov	fp, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	2604      	movs	r6, #4
 8001a94:	2500      	movs	r5, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e60f      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	9501      	str	r5, [sp, #4]
 8001aa0:	431e      	orrs	r6, r3
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	407a      	eors	r2, r7
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2e0a      	cmp	r6, #10
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dmul+0x44c>
 8001ab6:	e621      	b.n	80016fc <__aeabi_dmul+0x90>
 8001ab8:	e63d      	b.n	8001736 <__aeabi_dmul+0xca>
 8001aba:	2101      	movs	r1, #1
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	2938      	cmp	r1, #56	; 0x38
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dmul+0x458>
 8001ac2:	e642      	b.n	800174a <__aeabi_dmul+0xde>
 8001ac4:	291f      	cmp	r1, #31
 8001ac6:	dd47      	ble.n	8001b58 <__aeabi_dmul+0x4ec>
 8001ac8:	261f      	movs	r6, #31
 8001aca:	0025      	movs	r5, r4
 8001acc:	4276      	negs	r6, r6
 8001ace:	1af3      	subs	r3, r6, r3
 8001ad0:	40dd      	lsrs	r5, r3
 8001ad2:	002b      	movs	r3, r5
 8001ad4:	2920      	cmp	r1, #32
 8001ad6:	d005      	beq.n	8001ae4 <__aeabi_dmul+0x478>
 8001ad8:	4942      	ldr	r1, [pc, #264]	; (8001be4 <__aeabi_dmul+0x578>)
 8001ada:	9d02      	ldr	r5, [sp, #8]
 8001adc:	468c      	mov	ip, r1
 8001ade:	4465      	add	r5, ip
 8001ae0:	40ac      	lsls	r4, r5
 8001ae2:	4320      	orrs	r0, r4
 8001ae4:	1e41      	subs	r1, r0, #1
 8001ae6:	4188      	sbcs	r0, r1
 8001ae8:	4318      	orrs	r0, r3
 8001aea:	2307      	movs	r3, #7
 8001aec:	001d      	movs	r5, r3
 8001aee:	2400      	movs	r4, #0
 8001af0:	4005      	ands	r5, r0
 8001af2:	4203      	tst	r3, r0
 8001af4:	d04a      	beq.n	8001b8c <__aeabi_dmul+0x520>
 8001af6:	230f      	movs	r3, #15
 8001af8:	2400      	movs	r4, #0
 8001afa:	4003      	ands	r3, r0
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d042      	beq.n	8001b86 <__aeabi_dmul+0x51a>
 8001b00:	1d03      	adds	r3, r0, #4
 8001b02:	4283      	cmp	r3, r0
 8001b04:	4180      	sbcs	r0, r0
 8001b06:	4240      	negs	r0, r0
 8001b08:	1824      	adds	r4, r4, r0
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	0223      	lsls	r3, r4, #8
 8001b0e:	d53a      	bpl.n	8001b86 <__aeabi_dmul+0x51a>
 8001b10:	2301      	movs	r3, #1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e61b      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b18:	f000 fd1c 	bl	8002554 <__clzsi2>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	0003      	movs	r3, r0
 8001b20:	3115      	adds	r1, #21
 8001b22:	3320      	adds	r3, #32
 8001b24:	291c      	cmp	r1, #28
 8001b26:	dd8f      	ble.n	8001a48 <__aeabi_dmul+0x3dc>
 8001b28:	3808      	subs	r0, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4692      	mov	sl, r2
 8001b30:	46a3      	mov	fp, r4
 8001b32:	e796      	b.n	8001a62 <__aeabi_dmul+0x3f6>
 8001b34:	f000 fd0e 	bl	8002554 <__clzsi2>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	3115      	adds	r1, #21
 8001b3e:	3320      	adds	r3, #32
 8001b40:	291c      	cmp	r1, #28
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dmul+0x4da>
 8001b44:	e758      	b.n	80019f8 <__aeabi_dmul+0x38c>
 8001b46:	0002      	movs	r2, r0
 8001b48:	464c      	mov	r4, r9
 8001b4a:	3a08      	subs	r2, #8
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	4094      	lsls	r4, r2
 8001b50:	e75d      	b.n	8001a0e <__aeabi_dmul+0x3a2>
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	e711      	b.n	800197c <__aeabi_dmul+0x310>
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <__aeabi_dmul+0x57c>)
 8001b5a:	0026      	movs	r6, r4
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	0003      	movs	r3, r0
 8001b60:	9d02      	ldr	r5, [sp, #8]
 8001b62:	40cb      	lsrs	r3, r1
 8001b64:	4465      	add	r5, ip
 8001b66:	40ae      	lsls	r6, r5
 8001b68:	431e      	orrs	r6, r3
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	40ab      	lsls	r3, r5
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	4183      	sbcs	r3, r0
 8001b72:	0030      	movs	r0, r6
 8001b74:	4318      	orrs	r0, r3
 8001b76:	40cc      	lsrs	r4, r1
 8001b78:	0743      	lsls	r3, r0, #29
 8001b7a:	d0c7      	beq.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	4003      	ands	r3, r0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d1bd      	bne.n	8001b00 <__aeabi_dmul+0x494>
 8001b84:	e7c2      	b.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b86:	0765      	lsls	r5, r4, #29
 8001b88:	0264      	lsls	r4, r4, #9
 8001b8a:	0b24      	lsrs	r4, r4, #12
 8001b8c:	08c0      	lsrs	r0, r0, #3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4305      	orrs	r5, r0
 8001b92:	e5dd      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b94:	2500      	movs	r5, #0
 8001b96:	2302      	movs	r3, #2
 8001b98:	2e0f      	cmp	r6, #15
 8001b9a:	d10c      	bne.n	8001bb6 <__aeabi_dmul+0x54a>
 8001b9c:	2480      	movs	r4, #128	; 0x80
 8001b9e:	465b      	mov	r3, fp
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4223      	tst	r3, r4
 8001ba4:	d00e      	beq.n	8001bc4 <__aeabi_dmul+0x558>
 8001ba6:	4221      	tst	r1, r4
 8001ba8:	d10c      	bne.n	8001bc4 <__aeabi_dmul+0x558>
 8001baa:	430c      	orrs	r4, r1
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	003a      	movs	r2, r7
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <__aeabi_dmul+0x580>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e5cc      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bb6:	2e0b      	cmp	r6, #11
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dmul+0x550>
 8001bba:	e5a2      	b.n	8001702 <__aeabi_dmul+0x96>
 8001bbc:	468b      	mov	fp, r1
 8001bbe:	46aa      	mov	sl, r5
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	e5f7      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001bc4:	2480      	movs	r4, #128	; 0x80
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4655      	mov	r5, sl
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_dmul+0x580>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e5bb      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bd8:	464d      	mov	r5, r9
 8001bda:	0021      	movs	r1, r4
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e7db      	b.n	8001b98 <__aeabi_dmul+0x52c>
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	0000043e 	.word	0x0000043e
 8001be8:	0000041e 	.word	0x0000041e
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dsub>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	0004      	movs	r4, r0
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	032b      	lsls	r3, r5, #12
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	0f62      	lsrs	r2, r4, #29
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	00e3      	lsls	r3, r4, #3
 8001c0e:	030c      	lsls	r4, r1, #12
 8001c10:	0a64      	lsrs	r4, r4, #9
 8001c12:	0f47      	lsrs	r7, r0, #29
 8001c14:	4327      	orrs	r7, r4
 8001c16:	4cd0      	ldr	r4, [pc, #832]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c18:	006e      	lsls	r6, r5, #1
 8001c1a:	4691      	mov	r9, r2
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	004a      	lsls	r2, r1, #1
 8001c20:	00c0      	lsls	r0, r0, #3
 8001c22:	4698      	mov	r8, r3
 8001c24:	46a2      	mov	sl, r4
 8001c26:	0d76      	lsrs	r6, r6, #21
 8001c28:	0fed      	lsrs	r5, r5, #31
 8001c2a:	0d52      	lsrs	r2, r2, #21
 8001c2c:	0fc9      	lsrs	r1, r1, #31
 8001c2e:	9001      	str	r0, [sp, #4]
 8001c30:	42a2      	cmp	r2, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x46>
 8001c34:	e0b9      	b.n	8001daa <__aeabi_dsub+0x1ba>
 8001c36:	2401      	movs	r4, #1
 8001c38:	4061      	eors	r1, r4
 8001c3a:	468b      	mov	fp, r1
 8001c3c:	428d      	cmp	r5, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x52>
 8001c40:	e08d      	b.n	8001d5e <__aeabi_dsub+0x16e>
 8001c42:	1ab4      	subs	r4, r6, r2
 8001c44:	46a4      	mov	ip, r4
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x5c>
 8001c4a:	e0b7      	b.n	8001dbc <__aeabi_dsub+0x1cc>
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x62>
 8001c50:	e0cb      	b.n	8001dea <__aeabi_dsub+0x1fa>
 8001c52:	4ac1      	ldr	r2, [pc, #772]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c54:	4296      	cmp	r6, r2
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x6a>
 8001c58:	e186      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0412      	lsls	r2, r2, #16
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	2a38      	cmp	r2, #56	; 0x38
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0x78>
 8001c66:	e1a4      	b.n	8001fb2 <__aeabi_dsub+0x3c2>
 8001c68:	2a1f      	cmp	r2, #31
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x7e>
 8001c6c:	e21d      	b.n	80020aa <__aeabi_dsub+0x4ba>
 8001c6e:	4661      	mov	r1, ip
 8001c70:	2220      	movs	r2, #32
 8001c72:	003c      	movs	r4, r7
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	0001      	movs	r1, r0
 8001c78:	4090      	lsls	r0, r2
 8001c7a:	4094      	lsls	r4, r2
 8001c7c:	1e42      	subs	r2, r0, #1
 8001c7e:	4190      	sbcs	r0, r2
 8001c80:	4662      	mov	r2, ip
 8001c82:	46a0      	mov	r8, r4
 8001c84:	4664      	mov	r4, ip
 8001c86:	40d7      	lsrs	r7, r2
 8001c88:	464a      	mov	r2, r9
 8001c8a:	40e1      	lsrs	r1, r4
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	1bd2      	subs	r2, r2, r7
 8001c90:	4691      	mov	r9, r2
 8001c92:	430c      	orrs	r4, r1
 8001c94:	4304      	orrs	r4, r0
 8001c96:	1b1c      	subs	r4, r3, r4
 8001c98:	42a3      	cmp	r3, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0xbc>
 8001caa:	e12b      	b.n	8001f04 <__aeabi_dsub+0x314>
 8001cac:	4653      	mov	r3, sl
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	0a53      	lsrs	r3, r2, #9
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0xcc>
 8001cba:	e166      	b.n	8001f8a <__aeabi_dsub+0x39a>
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f000 fc49 	bl	8002554 <__clzsi2>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	3b08      	subs	r3, #8
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	0020      	movs	r0, r4
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	4651      	mov	r1, sl
 8001cce:	40d0      	lsrs	r0, r2
 8001cd0:	4099      	lsls	r1, r3
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	409c      	lsls	r4, r3
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	dd00      	ble.n	8001cde <__aeabi_dsub+0xee>
 8001cdc:	e164      	b.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001cde:	1b9b      	subs	r3, r3, r6
 8001ce0:	1c59      	adds	r1, r3, #1
 8001ce2:	291f      	cmp	r1, #31
 8001ce4:	dd00      	ble.n	8001ce8 <__aeabi_dsub+0xf8>
 8001ce6:	e0fe      	b.n	8001ee6 <__aeabi_dsub+0x2f6>
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0010      	movs	r0, r2
 8001cec:	0026      	movs	r6, r4
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	409c      	lsls	r4, r3
 8001cf2:	4098      	lsls	r0, r3
 8001cf4:	40ce      	lsrs	r6, r1
 8001cf6:	40ca      	lsrs	r2, r1
 8001cf8:	1e63      	subs	r3, r4, #1
 8001cfa:	419c      	sbcs	r4, r3
 8001cfc:	4330      	orrs	r0, r6
 8001cfe:	4692      	mov	sl, r2
 8001d00:	2600      	movs	r6, #0
 8001d02:	4304      	orrs	r4, r0
 8001d04:	0763      	lsls	r3, r4, #29
 8001d06:	d009      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d08:	230f      	movs	r3, #15
 8001d0a:	4023      	ands	r3, r4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d005      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d10:	1d23      	adds	r3, r4, #4
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	41a4      	sbcs	r4, r4
 8001d16:	4264      	negs	r4, r4
 8001d18:	44a2      	add	sl, r4
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	4653      	mov	r3, sl
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	d400      	bmi.n	8001d24 <__aeabi_dsub+0x134>
 8001d22:	e0f2      	b.n	8001f0a <__aeabi_dsub+0x31a>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <__aeabi_dsub+0x368>)
 8001d26:	3601      	adds	r6, #1
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x13e>
 8001d2c:	e10f      	b.n	8001f4e <__aeabi_dsub+0x35e>
 8001d2e:	4653      	mov	r3, sl
 8001d30:	498a      	ldr	r1, [pc, #552]	; (8001f5c <__aeabi_dsub+0x36c>)
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	400b      	ands	r3, r1
 8001d36:	0019      	movs	r1, r3
 8001d38:	075b      	lsls	r3, r3, #29
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	0572      	lsls	r2, r6, #21
 8001d3e:	024c      	lsls	r4, r1, #9
 8001d40:	0b24      	lsrs	r4, r4, #12
 8001d42:	0d52      	lsrs	r2, r2, #21
 8001d44:	0512      	lsls	r2, r2, #20
 8001d46:	4322      	orrs	r2, r4
 8001d48:	07ed      	lsls	r5, r5, #31
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	b003      	add	sp, #12
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	1ab4      	subs	r4, r6, r2
 8001d60:	46a4      	mov	ip, r4
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	dd59      	ble.n	8001e1a <__aeabi_dsub+0x22a>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x17c>
 8001d6a:	e0b0      	b.n	8001ece <__aeabi_dsub+0x2de>
 8001d6c:	4556      	cmp	r6, sl
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x182>
 8001d70:	e0fa      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	4317      	orrs	r7, r2
 8001d78:	4662      	mov	r2, ip
 8001d7a:	2a38      	cmp	r2, #56	; 0x38
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x190>
 8001d7e:	e0d4      	b.n	8001f2a <__aeabi_dsub+0x33a>
 8001d80:	2a1f      	cmp	r2, #31
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x196>
 8001d84:	e1c0      	b.n	8002108 <__aeabi_dsub+0x518>
 8001d86:	0039      	movs	r1, r7
 8001d88:	3a20      	subs	r2, #32
 8001d8a:	40d1      	lsrs	r1, r2
 8001d8c:	4662      	mov	r2, ip
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d006      	beq.n	8001da0 <__aeabi_dsub+0x1b0>
 8001d92:	4664      	mov	r4, ip
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	1b12      	subs	r2, r2, r4
 8001d98:	003c      	movs	r4, r7
 8001d9a:	4094      	lsls	r4, r2
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	9401      	str	r4, [sp, #4]
 8001da0:	9c01      	ldr	r4, [sp, #4]
 8001da2:	1e62      	subs	r2, r4, #1
 8001da4:	4194      	sbcs	r4, r2
 8001da6:	430c      	orrs	r4, r1
 8001da8:	e0c3      	b.n	8001f32 <__aeabi_dsub+0x342>
 8001daa:	003c      	movs	r4, r7
 8001dac:	4304      	orrs	r4, r0
 8001dae:	d02b      	beq.n	8001e08 <__aeabi_dsub+0x218>
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d02e      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001db6:	4c6a      	ldr	r4, [pc, #424]	; (8001f60 <__aeabi_dsub+0x370>)
 8001db8:	46a4      	mov	ip, r4
 8001dba:	44b4      	add	ip, r6
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d05f      	beq.n	8001e82 <__aeabi_dsub+0x292>
 8001dc2:	1b94      	subs	r4, r2, r6
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x1dc>
 8001dca:	e120      	b.n	800200e <__aeabi_dsub+0x41e>
 8001dcc:	464c      	mov	r4, r9
 8001dce:	431c      	orrs	r4, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1e4>
 8001dd2:	e1c7      	b.n	8002164 <__aeabi_dsub+0x574>
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	1e4c      	subs	r4, r1, #1
 8001dd8:	2901      	cmp	r1, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1ee>
 8001ddc:	e223      	b.n	8002226 <__aeabi_dsub+0x636>
 8001dde:	4d5e      	ldr	r5, [pc, #376]	; (8001f58 <__aeabi_dsub+0x368>)
 8001de0:	45ac      	cmp	ip, r5
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x1f6>
 8001de4:	e1d8      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8001de6:	46a4      	mov	ip, r4
 8001de8:	e11a      	b.n	8002020 <__aeabi_dsub+0x430>
 8001dea:	003a      	movs	r2, r7
 8001dec:	4302      	orrs	r2, r0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x202>
 8001df0:	e0e4      	b.n	8001fbc <__aeabi_dsub+0x3cc>
 8001df2:	0022      	movs	r2, r4
 8001df4:	3a01      	subs	r2, #1
 8001df6:	2c01      	cmp	r4, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x20c>
 8001dfa:	e1c3      	b.n	8002184 <__aeabi_dsub+0x594>
 8001dfc:	4956      	ldr	r1, [pc, #344]	; (8001f58 <__aeabi_dsub+0x368>)
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x214>
 8001e02:	e0b1      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001e04:	4694      	mov	ip, r2
 8001e06:	e72b      	b.n	8001c60 <__aeabi_dsub+0x70>
 8001e08:	2401      	movs	r4, #1
 8001e0a:	4061      	eors	r1, r4
 8001e0c:	468b      	mov	fp, r1
 8001e0e:	428d      	cmp	r5, r1
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001e12:	e716      	b.n	8001c42 <__aeabi_dsub+0x52>
 8001e14:	4952      	ldr	r1, [pc, #328]	; (8001f60 <__aeabi_dsub+0x370>)
 8001e16:	468c      	mov	ip, r1
 8001e18:	44b4      	add	ip, r6
 8001e1a:	4664      	mov	r4, ip
 8001e1c:	2c00      	cmp	r4, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x232>
 8001e20:	e0d3      	b.n	8001fca <__aeabi_dsub+0x3da>
 8001e22:	1b91      	subs	r1, r2, r6
 8001e24:	468c      	mov	ip, r1
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x23c>
 8001e2a:	e15e      	b.n	80020ea <__aeabi_dsub+0x4fa>
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <__aeabi_dsub+0x368>)
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x244>
 8001e32:	e1be      	b.n	80021b2 <__aeabi_dsub+0x5c2>
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	464c      	mov	r4, r9
 8001e38:	0409      	lsls	r1, r1, #16
 8001e3a:	430c      	orrs	r4, r1
 8001e3c:	46a1      	mov	r9, r4
 8001e3e:	4661      	mov	r1, ip
 8001e40:	2938      	cmp	r1, #56	; 0x38
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x256>
 8001e44:	e1ba      	b.n	80021bc <__aeabi_dsub+0x5cc>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x25c>
 8001e4a:	e227      	b.n	800229c <__aeabi_dsub+0x6ac>
 8001e4c:	2420      	movs	r4, #32
 8001e4e:	1a64      	subs	r4, r4, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	40a1      	lsls	r1, r4
 8001e54:	001e      	movs	r6, r3
 8001e56:	4688      	mov	r8, r1
 8001e58:	4661      	mov	r1, ip
 8001e5a:	40a3      	lsls	r3, r4
 8001e5c:	40ce      	lsrs	r6, r1
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1e5c      	subs	r4, r3, #1
 8001e62:	41a3      	sbcs	r3, r4
 8001e64:	4331      	orrs	r1, r6
 8001e66:	4319      	orrs	r1, r3
 8001e68:	000c      	movs	r4, r1
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	40d9      	lsrs	r1, r3
 8001e70:	187f      	adds	r7, r7, r1
 8001e72:	1824      	adds	r4, r4, r0
 8001e74:	4284      	cmp	r4, r0
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	425b      	negs	r3, r3
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	0016      	movs	r6, r2
 8001e7e:	44ba      	add	sl, r7
 8001e80:	e05d      	b.n	8001f3e <__aeabi_dsub+0x34e>
 8001e82:	4c38      	ldr	r4, [pc, #224]	; (8001f64 <__aeabi_dsub+0x374>)
 8001e84:	1c72      	adds	r2, r6, #1
 8001e86:	4222      	tst	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x29c>
 8001e8a:	e0df      	b.n	800204c <__aeabi_dsub+0x45c>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	d000      	beq.n	8001e96 <__aeabi_dsub+0x2a6>
 8001e94:	e15c      	b.n	8002150 <__aeabi_dsub+0x560>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x2ac>
 8001e9a:	e1cf      	b.n	800223c <__aeabi_dsub+0x64c>
 8001e9c:	003a      	movs	r2, r7
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x2b4>
 8001ea2:	e17f      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001ea4:	1a1c      	subs	r4, r3, r0
 8001ea6:	464a      	mov	r2, r9
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	4189      	sbcs	r1, r1
 8001eac:	1bd2      	subs	r2, r2, r7
 8001eae:	4249      	negs	r1, r1
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	4692      	mov	sl, r2
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x2ca>
 8001eb8:	e20a      	b.n	80022d0 <__aeabi_dsub+0x6e0>
 8001eba:	1ac4      	subs	r4, r0, r3
 8001ebc:	42a0      	cmp	r0, r4
 8001ebe:	4180      	sbcs	r0, r0
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1aff      	subs	r7, r7, r3
 8001ec6:	1a3b      	subs	r3, r7, r0
 8001ec8:	469a      	mov	sl, r3
 8001eca:	465d      	mov	r5, fp
 8001ecc:	e71a      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	d073      	beq.n	8001fbc <__aeabi_dsub+0x3cc>
 8001ed4:	0022      	movs	r2, r4
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	2c01      	cmp	r4, #1
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x2ee>
 8001edc:	e0cb      	b.n	8002076 <__aeabi_dsub+0x486>
 8001ede:	4554      	cmp	r4, sl
 8001ee0:	d042      	beq.n	8001f68 <__aeabi_dsub+0x378>
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	e748      	b.n	8001d78 <__aeabi_dsub+0x188>
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	3b1f      	subs	r3, #31
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	2920      	cmp	r1, #32
 8001eee:	d003      	beq.n	8001ef8 <__aeabi_dsub+0x308>
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4314      	orrs	r4, r2
 8001ef8:	1e63      	subs	r3, r4, #1
 8001efa:	419c      	sbcs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	2600      	movs	r6, #0
 8001f00:	469a      	mov	sl, r3
 8001f02:	4304      	orrs	r4, r0
 8001f04:	0763      	lsls	r3, r4, #29
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x31a>
 8001f08:	e6fe      	b.n	8001d08 <__aeabi_dsub+0x118>
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	08e3      	lsrs	r3, r4, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4652      	mov	r2, sl
 8001f14:	46b4      	mov	ip, r6
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f1a:	458c      	cmp	ip, r1
 8001f1c:	d02a      	beq.n	8001f74 <__aeabi_dsub+0x384>
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	0b14      	lsrs	r4, r2, #12
 8001f22:	4662      	mov	r2, ip
 8001f24:	0552      	lsls	r2, r2, #21
 8001f26:	0d52      	lsrs	r2, r2, #21
 8001f28:	e70c      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f2a:	003c      	movs	r4, r7
 8001f2c:	4304      	orrs	r4, r0
 8001f2e:	1e62      	subs	r2, r4, #1
 8001f30:	4194      	sbcs	r4, r2
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	429c      	cmp	r4, r3
 8001f36:	4192      	sbcs	r2, r2
 8001f38:	4252      	negs	r2, r2
 8001f3a:	444a      	add	r2, r9
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	4653      	mov	r3, sl
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	d5df      	bpl.n	8001f04 <__aeabi_dsub+0x314>
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f46:	3601      	adds	r6, #1
 8001f48:	429e      	cmp	r6, r3
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dsub+0x35e>
 8001f4c:	e0a0      	b.n	8002090 <__aeabi_dsub+0x4a0>
 8001f4e:	0032      	movs	r2, r6
 8001f50:	2400      	movs	r4, #0
 8001f52:	2300      	movs	r3, #0
 8001f54:	e6f6      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000007fe 	.word	0x000007fe
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	0752      	lsls	r2, r2, #29
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	464a      	mov	r2, r9
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	0019      	movs	r1, r3
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x38c>
 8001f7a:	e1b5      	b.n	80022e8 <__aeabi_dsub+0x6f8>
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	4314      	orrs	r4, r2
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4ad5      	ldr	r2, [pc, #852]	; (80022dc <__aeabi_dsub+0x6ec>)
 8001f86:	0b24      	lsrs	r4, r4, #12
 8001f88:	e6dc      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f000 fae2 	bl	8002554 <__clzsi2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	3318      	adds	r3, #24
 8001f94:	2b1f      	cmp	r3, #31
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_dsub+0x3aa>
 8001f98:	e695      	b.n	8001cc6 <__aeabi_dsub+0xd6>
 8001f9a:	0022      	movs	r2, r4
 8001f9c:	3808      	subs	r0, #8
 8001f9e:	4082      	lsls	r2, r0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	429e      	cmp	r6, r3
 8001fa4:	dc00      	bgt.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001fa6:	e69a      	b.n	8001cde <__aeabi_dsub+0xee>
 8001fa8:	1af6      	subs	r6, r6, r3
 8001faa:	4bcd      	ldr	r3, [pc, #820]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e6a8      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001fb2:	003c      	movs	r4, r7
 8001fb4:	4304      	orrs	r4, r0
 8001fb6:	1e62      	subs	r2, r4, #1
 8001fb8:	4194      	sbcs	r4, r2
 8001fba:	e66c      	b.n	8001c96 <__aeabi_dsub+0xa6>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	0752      	lsls	r2, r2, #29
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	e7a6      	b.n	8001f18 <__aeabi_dsub+0x328>
 8001fca:	4cc6      	ldr	r4, [pc, #792]	; (80022e4 <__aeabi_dsub+0x6f4>)
 8001fcc:	1c72      	adds	r2, r6, #1
 8001fce:	4222      	tst	r2, r4
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x3e4>
 8001fd2:	e0ac      	b.n	800212e <__aeabi_dsub+0x53e>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	2e00      	cmp	r6, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x3ee>
 8001fdc:	e105      	b.n	80021ea <__aeabi_dsub+0x5fa>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x3f4>
 8001fe2:	e156      	b.n	8002292 <__aeabi_dsub+0x6a2>
 8001fe4:	003a      	movs	r2, r7
 8001fe6:	4302      	orrs	r2, r0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x3fc>
 8001fea:	e0db      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001fec:	181c      	adds	r4, r3, r0
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	444f      	add	r7, r9
 8001ff4:	46ba      	mov	sl, r7
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	449a      	add	sl, r3
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	d400      	bmi.n	8002002 <__aeabi_dsub+0x412>
 8002000:	e780      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002002:	4652      	mov	r2, sl
 8002004:	4bb6      	ldr	r3, [pc, #728]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002006:	2601      	movs	r6, #1
 8002008:	401a      	ands	r2, r3
 800200a:	4692      	mov	sl, r2
 800200c:	e77a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800200e:	4cb3      	ldr	r4, [pc, #716]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002010:	42a2      	cmp	r2, r4
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x426>
 8002014:	e0c0      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8002016:	2480      	movs	r4, #128	; 0x80
 8002018:	464d      	mov	r5, r9
 800201a:	0424      	lsls	r4, r4, #16
 800201c:	4325      	orrs	r5, r4
 800201e:	46a9      	mov	r9, r5
 8002020:	4664      	mov	r4, ip
 8002022:	2c38      	cmp	r4, #56	; 0x38
 8002024:	dc53      	bgt.n	80020ce <__aeabi_dsub+0x4de>
 8002026:	4661      	mov	r1, ip
 8002028:	2c1f      	cmp	r4, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x43e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_dsub+0x5da>
 800202e:	2520      	movs	r5, #32
 8002030:	001e      	movs	r6, r3
 8002032:	1b2d      	subs	r5, r5, r4
 8002034:	464c      	mov	r4, r9
 8002036:	40ab      	lsls	r3, r5
 8002038:	40ac      	lsls	r4, r5
 800203a:	40ce      	lsrs	r6, r1
 800203c:	1e5d      	subs	r5, r3, #1
 800203e:	41ab      	sbcs	r3, r5
 8002040:	4334      	orrs	r4, r6
 8002042:	4323      	orrs	r3, r4
 8002044:	464c      	mov	r4, r9
 8002046:	40cc      	lsrs	r4, r1
 8002048:	1b3f      	subs	r7, r7, r4
 800204a:	e045      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 800204c:	464a      	mov	r2, r9
 800204e:	1a1c      	subs	r4, r3, r0
 8002050:	1bd1      	subs	r1, r2, r7
 8002052:	42a3      	cmp	r3, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	4252      	negs	r2, r2
 8002058:	4692      	mov	sl, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4651      	mov	r1, sl
 800205e:	1a52      	subs	r2, r2, r1
 8002060:	4692      	mov	sl, r2
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	d500      	bpl.n	8002068 <__aeabi_dsub+0x478>
 8002066:	e083      	b.n	8002170 <__aeabi_dsub+0x580>
 8002068:	4653      	mov	r3, sl
 800206a:	4323      	orrs	r3, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x480>
 800206e:	e621      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	e753      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002076:	181c      	adds	r4, r3, r0
 8002078:	429c      	cmp	r4, r3
 800207a:	419b      	sbcs	r3, r3
 800207c:	444f      	add	r7, r9
 800207e:	46ba      	mov	sl, r7
 8002080:	425b      	negs	r3, r3
 8002082:	449a      	add	sl, r3
 8002084:	4653      	mov	r3, sl
 8002086:	2601      	movs	r6, #1
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x49e>
 800208c:	e73a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800208e:	2602      	movs	r6, #2
 8002090:	4652      	mov	r2, sl
 8002092:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002094:	2101      	movs	r1, #1
 8002096:	401a      	ands	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	4021      	ands	r1, r4
 800209c:	0862      	lsrs	r2, r4, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	07dc      	lsls	r4, r3, #31
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	469a      	mov	sl, r3
 80020a6:	4314      	orrs	r4, r2
 80020a8:	e62c      	b.n	8001d04 <__aeabi_dsub+0x114>
 80020aa:	0039      	movs	r1, r7
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d1      	lsrs	r1, r2
 80020b0:	4662      	mov	r2, ip
 80020b2:	2a20      	cmp	r2, #32
 80020b4:	d006      	beq.n	80020c4 <__aeabi_dsub+0x4d4>
 80020b6:	4664      	mov	r4, ip
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	1b12      	subs	r2, r2, r4
 80020bc:	003c      	movs	r4, r7
 80020be:	4094      	lsls	r4, r2
 80020c0:	4304      	orrs	r4, r0
 80020c2:	9401      	str	r4, [sp, #4]
 80020c4:	9c01      	ldr	r4, [sp, #4]
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	e5e3      	b.n	8001c96 <__aeabi_dsub+0xa6>
 80020ce:	4649      	mov	r1, r9
 80020d0:	4319      	orrs	r1, r3
 80020d2:	000b      	movs	r3, r1
 80020d4:	1e5c      	subs	r4, r3, #1
 80020d6:	41a3      	sbcs	r3, r4
 80020d8:	1ac4      	subs	r4, r0, r3
 80020da:	42a0      	cmp	r0, r4
 80020dc:	419b      	sbcs	r3, r3
 80020de:	425b      	negs	r3, r3
 80020e0:	1afb      	subs	r3, r7, r3
 80020e2:	469a      	mov	sl, r3
 80020e4:	465d      	mov	r5, fp
 80020e6:	0016      	movs	r6, r2
 80020e8:	e5dc      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 80020ea:	4649      	mov	r1, r9
 80020ec:	4319      	orrs	r1, r3
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x502>
 80020f0:	e0ae      	b.n	8002250 <__aeabi_dsub+0x660>
 80020f2:	4661      	mov	r1, ip
 80020f4:	4664      	mov	r4, ip
 80020f6:	3901      	subs	r1, #1
 80020f8:	2c01      	cmp	r4, #1
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x50e>
 80020fc:	e0e0      	b.n	80022c0 <__aeabi_dsub+0x6d0>
 80020fe:	4c77      	ldr	r4, [pc, #476]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002100:	45a4      	cmp	ip, r4
 8002102:	d056      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 8002104:	468c      	mov	ip, r1
 8002106:	e69a      	b.n	8001e3e <__aeabi_dsub+0x24e>
 8002108:	4661      	mov	r1, ip
 800210a:	2220      	movs	r2, #32
 800210c:	003c      	movs	r4, r7
 800210e:	1a52      	subs	r2, r2, r1
 8002110:	4094      	lsls	r4, r2
 8002112:	0001      	movs	r1, r0
 8002114:	4090      	lsls	r0, r2
 8002116:	46a0      	mov	r8, r4
 8002118:	4664      	mov	r4, ip
 800211a:	1e42      	subs	r2, r0, #1
 800211c:	4190      	sbcs	r0, r2
 800211e:	4662      	mov	r2, ip
 8002120:	40e1      	lsrs	r1, r4
 8002122:	4644      	mov	r4, r8
 8002124:	40d7      	lsrs	r7, r2
 8002126:	430c      	orrs	r4, r1
 8002128:	4304      	orrs	r4, r0
 800212a:	44b9      	add	r9, r7
 800212c:	e701      	b.n	8001f32 <__aeabi_dsub+0x342>
 800212e:	496b      	ldr	r1, [pc, #428]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002130:	428a      	cmp	r2, r1
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x546>
 8002134:	e70c      	b.n	8001f50 <__aeabi_dsub+0x360>
 8002136:	1818      	adds	r0, r3, r0
 8002138:	4298      	cmp	r0, r3
 800213a:	419b      	sbcs	r3, r3
 800213c:	444f      	add	r7, r9
 800213e:	425b      	negs	r3, r3
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	07dc      	lsls	r4, r3, #31
 8002144:	0840      	lsrs	r0, r0, #1
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	469a      	mov	sl, r3
 800214a:	0016      	movs	r6, r2
 800214c:	4304      	orrs	r4, r0
 800214e:	e6d9      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d000      	beq.n	8002156 <__aeabi_dsub+0x566>
 8002154:	e081      	b.n	800225a <__aeabi_dsub+0x66a>
 8002156:	003b      	movs	r3, r7
 8002158:	4303      	orrs	r3, r0
 800215a:	d11d      	bne.n	8002198 <__aeabi_dsub+0x5a8>
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2500      	movs	r5, #0
 8002160:	0312      	lsls	r2, r2, #12
 8002162:	e70b      	b.n	8001f7c <__aeabi_dsub+0x38c>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	077b      	lsls	r3, r7, #29
 8002168:	465d      	mov	r5, fp
 800216a:	4303      	orrs	r3, r0
 800216c:	08fa      	lsrs	r2, r7, #3
 800216e:	e6d3      	b.n	8001f18 <__aeabi_dsub+0x328>
 8002170:	1ac4      	subs	r4, r0, r3
 8002172:	42a0      	cmp	r0, r4
 8002174:	4180      	sbcs	r0, r0
 8002176:	464b      	mov	r3, r9
 8002178:	4240      	negs	r0, r0
 800217a:	1aff      	subs	r7, r7, r3
 800217c:	1a3b      	subs	r3, r7, r0
 800217e:	469a      	mov	sl, r3
 8002180:	465d      	mov	r5, fp
 8002182:	e597      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002184:	1a1c      	subs	r4, r3, r0
 8002186:	464a      	mov	r2, r9
 8002188:	42a3      	cmp	r3, r4
 800218a:	419b      	sbcs	r3, r3
 800218c:	1bd7      	subs	r7, r2, r7
 800218e:	425b      	negs	r3, r3
 8002190:	1afb      	subs	r3, r7, r3
 8002192:	469a      	mov	sl, r3
 8002194:	2601      	movs	r6, #1
 8002196:	e585      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e6e7      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021a4:	464a      	mov	r2, r9
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	0752      	lsls	r2, r2, #29
 80021aa:	4313      	orrs	r3, r2
 80021ac:	464a      	mov	r2, r9
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	e6b5      	b.n	8001f1e <__aeabi_dsub+0x32e>
 80021b2:	08c0      	lsrs	r0, r0, #3
 80021b4:	077b      	lsls	r3, r7, #29
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6db      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021bc:	4649      	mov	r1, r9
 80021be:	4319      	orrs	r1, r3
 80021c0:	000b      	movs	r3, r1
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	418b      	sbcs	r3, r1
 80021c6:	001c      	movs	r4, r3
 80021c8:	e653      	b.n	8001e72 <__aeabi_dsub+0x282>
 80021ca:	464d      	mov	r5, r9
 80021cc:	3c20      	subs	r4, #32
 80021ce:	40e5      	lsrs	r5, r4
 80021d0:	2920      	cmp	r1, #32
 80021d2:	d005      	beq.n	80021e0 <__aeabi_dsub+0x5f0>
 80021d4:	2440      	movs	r4, #64	; 0x40
 80021d6:	1a64      	subs	r4, r4, r1
 80021d8:	4649      	mov	r1, r9
 80021da:	40a1      	lsls	r1, r4
 80021dc:	430b      	orrs	r3, r1
 80021de:	4698      	mov	r8, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	1e5c      	subs	r4, r3, #1
 80021e4:	41a3      	sbcs	r3, r4
 80021e6:	432b      	orrs	r3, r5
 80021e8:	e776      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d0e1      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 80021ee:	003a      	movs	r2, r7
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x608>
 80021f6:	e6b8      	b.n	8001f6a <__aeabi_dsub+0x37a>
 80021f8:	464a      	mov	r2, r9
 80021fa:	0752      	lsls	r2, r2, #29
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	4313      	orrs	r3, r2
 8002200:	464a      	mov	r2, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	08d2      	lsrs	r2, r2, #3
 8002206:	4222      	tst	r2, r4
 8002208:	d007      	beq.n	800221a <__aeabi_dsub+0x62a>
 800220a:	08fe      	lsrs	r6, r7, #3
 800220c:	4226      	tst	r6, r4
 800220e:	d104      	bne.n	800221a <__aeabi_dsub+0x62a>
 8002210:	465d      	mov	r5, fp
 8002212:	0032      	movs	r2, r6
 8002214:	08c3      	lsrs	r3, r0, #3
 8002216:	077f      	lsls	r7, r7, #29
 8002218:	433b      	orrs	r3, r7
 800221a:	0f59      	lsrs	r1, r3, #29
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	0749      	lsls	r1, r1, #29
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	430b      	orrs	r3, r1
 8002224:	e6a6      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002226:	1ac4      	subs	r4, r0, r3
 8002228:	42a0      	cmp	r0, r4
 800222a:	4180      	sbcs	r0, r0
 800222c:	464b      	mov	r3, r9
 800222e:	4240      	negs	r0, r0
 8002230:	1aff      	subs	r7, r7, r3
 8002232:	1a3b      	subs	r3, r7, r0
 8002234:	469a      	mov	sl, r3
 8002236:	465d      	mov	r5, fp
 8002238:	2601      	movs	r6, #1
 800223a:	e533      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 800223c:	003b      	movs	r3, r7
 800223e:	4303      	orrs	r3, r0
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x654>
 8002242:	e715      	b.n	8002070 <__aeabi_dsub+0x480>
 8002244:	08c0      	lsrs	r0, r0, #3
 8002246:	077b      	lsls	r3, r7, #29
 8002248:	465d      	mov	r5, fp
 800224a:	4303      	orrs	r3, r0
 800224c:	08fa      	lsrs	r2, r7, #3
 800224e:	e666      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	077b      	lsls	r3, r7, #29
 8002254:	4303      	orrs	r3, r0
 8002256:	08fa      	lsrs	r2, r7, #3
 8002258:	e65e      	b.n	8001f18 <__aeabi_dsub+0x328>
 800225a:	003a      	movs	r2, r7
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4302      	orrs	r2, r0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x674>
 8002262:	e682      	b.n	8001f6a <__aeabi_dsub+0x37a>
 8002264:	464a      	mov	r2, r9
 8002266:	0752      	lsls	r2, r2, #29
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	4313      	orrs	r3, r2
 800226c:	464a      	mov	r2, r9
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	4222      	tst	r2, r4
 8002274:	d007      	beq.n	8002286 <__aeabi_dsub+0x696>
 8002276:	08fe      	lsrs	r6, r7, #3
 8002278:	4226      	tst	r6, r4
 800227a:	d104      	bne.n	8002286 <__aeabi_dsub+0x696>
 800227c:	465d      	mov	r5, fp
 800227e:	0032      	movs	r2, r6
 8002280:	08c3      	lsrs	r3, r0, #3
 8002282:	077f      	lsls	r7, r7, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	0f59      	lsrs	r1, r3, #29
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	e670      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002292:	08c0      	lsrs	r0, r0, #3
 8002294:	077b      	lsls	r3, r7, #29
 8002296:	4303      	orrs	r3, r0
 8002298:	08fa      	lsrs	r2, r7, #3
 800229a:	e640      	b.n	8001f1e <__aeabi_dsub+0x32e>
 800229c:	464c      	mov	r4, r9
 800229e:	3920      	subs	r1, #32
 80022a0:	40cc      	lsrs	r4, r1
 80022a2:	4661      	mov	r1, ip
 80022a4:	2920      	cmp	r1, #32
 80022a6:	d006      	beq.n	80022b6 <__aeabi_dsub+0x6c6>
 80022a8:	4666      	mov	r6, ip
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	1b89      	subs	r1, r1, r6
 80022ae:	464e      	mov	r6, r9
 80022b0:	408e      	lsls	r6, r1
 80022b2:	4333      	orrs	r3, r6
 80022b4:	4698      	mov	r8, r3
 80022b6:	4643      	mov	r3, r8
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	418b      	sbcs	r3, r1
 80022bc:	431c      	orrs	r4, r3
 80022be:	e5d8      	b.n	8001e72 <__aeabi_dsub+0x282>
 80022c0:	181c      	adds	r4, r3, r0
 80022c2:	4284      	cmp	r4, r0
 80022c4:	4180      	sbcs	r0, r0
 80022c6:	444f      	add	r7, r9
 80022c8:	46ba      	mov	sl, r7
 80022ca:	4240      	negs	r0, r0
 80022cc:	4482      	add	sl, r0
 80022ce:	e6d9      	b.n	8002084 <__aeabi_dsub+0x494>
 80022d0:	4653      	mov	r3, sl
 80022d2:	4323      	orrs	r3, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x6e8>
 80022d6:	e6cb      	b.n	8002070 <__aeabi_dsub+0x480>
 80022d8:	e614      	b.n	8001f04 <__aeabi_dsub+0x314>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000007ff 	.word	0x000007ff
 80022e0:	ff7fffff 	.word	0xff7fffff
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	2300      	movs	r3, #0
 80022ea:	4a01      	ldr	r2, [pc, #4]	; (80022f0 <__aeabi_dsub+0x700>)
 80022ec:	001c      	movs	r4, r3
 80022ee:	e529      	b.n	8001d44 <__aeabi_dsub+0x154>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dcmpun>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0005      	movs	r5, r0
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <__aeabi_dcmpun+0x38>)
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	0016      	movs	r6, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	0d49      	lsrs	r1, r1, #21
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d5b      	lsrs	r3, r3, #21
 800230c:	4281      	cmp	r1, r0
 800230e:	d008      	beq.n	8002322 <__aeabi_dcmpun+0x2e>
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <__aeabi_dcmpun+0x38>)
 8002312:	2000      	movs	r0, #0
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002318:	0020      	movs	r0, r4
 800231a:	4330      	orrs	r0, r6
 800231c:	1e43      	subs	r3, r0, #1
 800231e:	4198      	sbcs	r0, r3
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	2001      	movs	r0, #1
 8002324:	432a      	orrs	r2, r5
 8002326:	d1fb      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002328:	e7f2      	b.n	8002310 <__aeabi_dcmpun+0x1c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff

08002330 <__aeabi_d2iz>:
 8002330:	000a      	movs	r2, r1
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	4c13      	ldr	r4, [pc, #76]	; (8002384 <__aeabi_d2iz+0x54>)
 8002336:	0053      	lsls	r3, r2, #1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	0005      	movs	r5, r0
 800233c:	0b09      	lsrs	r1, r1, #12
 800233e:	2000      	movs	r0, #0
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	0fd2      	lsrs	r2, r2, #31
 8002344:	42a3      	cmp	r3, r4
 8002346:	dd04      	ble.n	8002352 <__aeabi_d2iz+0x22>
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <__aeabi_d2iz+0x58>)
 800234a:	4283      	cmp	r3, r0
 800234c:	dd02      	ble.n	8002354 <__aeabi_d2iz+0x24>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_d2iz+0x5c>)
 8002350:	18d0      	adds	r0, r2, r3
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	0340      	lsls	r0, r0, #13
 8002358:	4301      	orrs	r1, r0
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <__aeabi_d2iz+0x60>)
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	281f      	cmp	r0, #31
 8002360:	dd08      	ble.n	8002374 <__aeabi_d2iz+0x44>
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <__aeabi_d2iz+0x64>)
 8002364:	1ac3      	subs	r3, r0, r3
 8002366:	40d9      	lsrs	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	4258      	negs	r0, r3
 800236c:	2a00      	cmp	r2, #0
 800236e:	d1f0      	bne.n	8002352 <__aeabi_d2iz+0x22>
 8002370:	0018      	movs	r0, r3
 8002372:	e7ee      	b.n	8002352 <__aeabi_d2iz+0x22>
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <__aeabi_d2iz+0x68>)
 8002376:	40c5      	lsrs	r5, r0
 8002378:	46a4      	mov	ip, r4
 800237a:	4463      	add	r3, ip
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	432b      	orrs	r3, r5
 8002382:	e7f2      	b.n	800236a <__aeabi_d2iz+0x3a>
 8002384:	000003fe 	.word	0x000003fe
 8002388:	0000041d 	.word	0x0000041d
 800238c:	7fffffff 	.word	0x7fffffff
 8002390:	00000433 	.word	0x00000433
 8002394:	00000413 	.word	0x00000413
 8002398:	fffffbed 	.word	0xfffffbed

0800239c <__aeabi_i2d>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2800      	cmp	r0, #0
 80023a0:	d016      	beq.n	80023d0 <__aeabi_i2d+0x34>
 80023a2:	17c3      	asrs	r3, r0, #31
 80023a4:	18c5      	adds	r5, r0, r3
 80023a6:	405d      	eors	r5, r3
 80023a8:	0fc4      	lsrs	r4, r0, #31
 80023aa:	0028      	movs	r0, r5
 80023ac:	f000 f8d2 	bl	8002554 <__clzsi2>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <__aeabi_i2d+0x5c>)
 80023b2:	1a1b      	subs	r3, r3, r0
 80023b4:	280a      	cmp	r0, #10
 80023b6:	dc16      	bgt.n	80023e6 <__aeabi_i2d+0x4a>
 80023b8:	0002      	movs	r2, r0
 80023ba:	002e      	movs	r6, r5
 80023bc:	3215      	adds	r2, #21
 80023be:	4096      	lsls	r6, r2
 80023c0:	220b      	movs	r2, #11
 80023c2:	1a12      	subs	r2, r2, r0
 80023c4:	40d5      	lsrs	r5, r2
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	e003      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023d0:	2400      	movs	r4, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	2500      	movs	r5, #0
 80023d6:	2600      	movs	r6, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	432b      	orrs	r3, r5
 80023dc:	07e4      	lsls	r4, r4, #31
 80023de:	4323      	orrs	r3, r4
 80023e0:	0030      	movs	r0, r6
 80023e2:	0019      	movs	r1, r3
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	380b      	subs	r0, #11
 80023e8:	4085      	lsls	r5, r0
 80023ea:	055b      	lsls	r3, r3, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	2600      	movs	r6, #0
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	e7f0      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0000041e 	.word	0x0000041e

080023fc <__aeabi_ui2d>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e04      	subs	r4, r0, #0
 8002400:	d010      	beq.n	8002424 <__aeabi_ui2d+0x28>
 8002402:	f000 f8a7 	bl	8002554 <__clzsi2>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <__aeabi_ui2d+0x48>)
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	280a      	cmp	r0, #10
 800240c:	dc11      	bgt.n	8002432 <__aeabi_ui2d+0x36>
 800240e:	220b      	movs	r2, #11
 8002410:	0021      	movs	r1, r4
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d1      	lsrs	r1, r2
 8002416:	3015      	adds	r0, #21
 8002418:	030a      	lsls	r2, r1, #12
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4084      	lsls	r4, r0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e001      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	4313      	orrs	r3, r2
 800242c:	0020      	movs	r0, r4
 800242e:	0019      	movs	r1, r3
 8002430:	bd10      	pop	{r4, pc}
 8002432:	0022      	movs	r2, r4
 8002434:	380b      	subs	r0, #11
 8002436:	4082      	lsls	r2, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	2400      	movs	r4, #0
 800243e:	0b12      	lsrs	r2, r2, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	e7f1      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_d2f>:
 8002448:	0002      	movs	r2, r0
 800244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244c:	004b      	lsls	r3, r1, #1
 800244e:	030d      	lsls	r5, r1, #12
 8002450:	0f40      	lsrs	r0, r0, #29
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	0fcc      	lsrs	r4, r1, #31
 8002456:	0a6d      	lsrs	r5, r5, #9
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <__aeabi_d2f+0xfc>)
 800245a:	4305      	orrs	r5, r0
 800245c:	1c58      	adds	r0, r3, #1
 800245e:	00d7      	lsls	r7, r2, #3
 8002460:	4208      	tst	r0, r1
 8002462:	d00a      	beq.n	800247a <__aeabi_d2f+0x32>
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <__aeabi_d2f+0x100>)
 8002466:	1859      	adds	r1, r3, r1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	dd16      	ble.n	800249a <__aeabi_d2f+0x52>
 800246c:	20ff      	movs	r0, #255	; 0xff
 800246e:	2200      	movs	r2, #0
 8002470:	05c0      	lsls	r0, r0, #23
 8002472:	4310      	orrs	r0, r2
 8002474:	07e4      	lsls	r4, r4, #31
 8002476:	4320      	orrs	r0, r4
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <__aeabi_d2f+0x44>
 800247e:	433d      	orrs	r5, r7
 8002480:	d026      	beq.n	80024d0 <__aeabi_d2f+0x88>
 8002482:	2205      	movs	r2, #5
 8002484:	0192      	lsls	r2, r2, #6
 8002486:	0a52      	lsrs	r2, r2, #9
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	e7f1      	b.n	8002470 <__aeabi_d2f+0x28>
 800248c:	432f      	orrs	r7, r5
 800248e:	d0ed      	beq.n	800246c <__aeabi_d2f+0x24>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	03d2      	lsls	r2, r2, #15
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	432a      	orrs	r2, r5
 8002498:	e7ea      	b.n	8002470 <__aeabi_d2f+0x28>
 800249a:	2900      	cmp	r1, #0
 800249c:	dd1b      	ble.n	80024d6 <__aeabi_d2f+0x8e>
 800249e:	0192      	lsls	r2, r2, #6
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	4182      	sbcs	r2, r0
 80024a4:	00ed      	lsls	r5, r5, #3
 80024a6:	0f7f      	lsrs	r7, r7, #29
 80024a8:	432a      	orrs	r2, r5
 80024aa:	433a      	orrs	r2, r7
 80024ac:	0753      	lsls	r3, r2, #29
 80024ae:	d047      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024b0:	230f      	movs	r3, #15
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d000      	beq.n	80024ba <__aeabi_d2f+0x72>
 80024b8:	3204      	adds	r2, #4
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	04db      	lsls	r3, r3, #19
 80024be:	4013      	ands	r3, r2
 80024c0:	d03e      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024c2:	1c48      	adds	r0, r1, #1
 80024c4:	29fe      	cmp	r1, #254	; 0xfe
 80024c6:	d0d1      	beq.n	800246c <__aeabi_d2f+0x24>
 80024c8:	0192      	lsls	r2, r2, #6
 80024ca:	0a52      	lsrs	r2, r2, #9
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	e7cf      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d0:	2000      	movs	r0, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	e7cc      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d6:	000a      	movs	r2, r1
 80024d8:	3217      	adds	r2, #23
 80024da:	db2f      	blt.n	800253c <__aeabi_d2f+0xf4>
 80024dc:	2680      	movs	r6, #128	; 0x80
 80024de:	0436      	lsls	r6, r6, #16
 80024e0:	432e      	orrs	r6, r5
 80024e2:	251e      	movs	r5, #30
 80024e4:	1a6d      	subs	r5, r5, r1
 80024e6:	2d1f      	cmp	r5, #31
 80024e8:	dd11      	ble.n	800250e <__aeabi_d2f+0xc6>
 80024ea:	2202      	movs	r2, #2
 80024ec:	4252      	negs	r2, r2
 80024ee:	1a52      	subs	r2, r2, r1
 80024f0:	0031      	movs	r1, r6
 80024f2:	40d1      	lsrs	r1, r2
 80024f4:	2d20      	cmp	r5, #32
 80024f6:	d004      	beq.n	8002502 <__aeabi_d2f+0xba>
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <__aeabi_d2f+0x104>)
 80024fa:	4694      	mov	ip, r2
 80024fc:	4463      	add	r3, ip
 80024fe:	409e      	lsls	r6, r3
 8002500:	4337      	orrs	r7, r6
 8002502:	003a      	movs	r2, r7
 8002504:	1e53      	subs	r3, r2, #1
 8002506:	419a      	sbcs	r2, r3
 8002508:	430a      	orrs	r2, r1
 800250a:	2100      	movs	r1, #0
 800250c:	e7ce      	b.n	80024ac <__aeabi_d2f+0x64>
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <__aeabi_d2f+0x108>)
 8002510:	0038      	movs	r0, r7
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	4098      	lsls	r0, r3
 8002518:	003a      	movs	r2, r7
 800251a:	1e41      	subs	r1, r0, #1
 800251c:	4188      	sbcs	r0, r1
 800251e:	409e      	lsls	r6, r3
 8002520:	40ea      	lsrs	r2, r5
 8002522:	4330      	orrs	r0, r6
 8002524:	4302      	orrs	r2, r0
 8002526:	2100      	movs	r1, #0
 8002528:	0753      	lsls	r3, r2, #29
 800252a:	d1c1      	bne.n	80024b0 <__aeabi_d2f+0x68>
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0013      	movs	r3, r2
 8002530:	04c9      	lsls	r1, r1, #19
 8002532:	2001      	movs	r0, #1
 8002534:	400b      	ands	r3, r1
 8002536:	420a      	tst	r2, r1
 8002538:	d1c6      	bne.n	80024c8 <__aeabi_d2f+0x80>
 800253a:	e7a3      	b.n	8002484 <__aeabi_d2f+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	e7a0      	b.n	8002482 <__aeabi_d2f+0x3a>
 8002540:	000b      	movs	r3, r1
 8002542:	e79f      	b.n	8002484 <__aeabi_d2f+0x3c>
 8002544:	000007fe 	.word	0x000007fe
 8002548:	fffffc80 	.word	0xfffffc80
 800254c:	fffffca2 	.word	0xfffffca2
 8002550:	fffffc82 	.word	0xfffffc82

08002554 <__clzsi2>:
 8002554:	211c      	movs	r1, #28
 8002556:	2301      	movs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	4298      	cmp	r0, r3
 800255c:	d301      	bcc.n	8002562 <__clzsi2+0xe>
 800255e:	0c00      	lsrs	r0, r0, #16
 8002560:	3910      	subs	r1, #16
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	4298      	cmp	r0, r3
 8002566:	d301      	bcc.n	800256c <__clzsi2+0x18>
 8002568:	0a00      	lsrs	r0, r0, #8
 800256a:	3908      	subs	r1, #8
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	4298      	cmp	r0, r3
 8002570:	d301      	bcc.n	8002576 <__clzsi2+0x22>
 8002572:	0900      	lsrs	r0, r0, #4
 8002574:	3904      	subs	r1, #4
 8002576:	a202      	add	r2, pc, #8	; (adr r2, 8002580 <__clzsi2+0x2c>)
 8002578:	5c10      	ldrb	r0, [r2, r0]
 800257a:	1840      	adds	r0, r0, r1
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	02020304 	.word	0x02020304
 8002584:	01010101 	.word	0x01010101
	...

08002590 <__clzdi2>:
 8002590:	b510      	push	{r4, lr}
 8002592:	2900      	cmp	r1, #0
 8002594:	d103      	bne.n	800259e <__clzdi2+0xe>
 8002596:	f7ff ffdd 	bl	8002554 <__clzsi2>
 800259a:	3020      	adds	r0, #32
 800259c:	e002      	b.n	80025a4 <__clzdi2+0x14>
 800259e:	0008      	movs	r0, r1
 80025a0:	f7ff ffd8 	bl	8002554 <__clzsi2>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b5b0      	push	{r4, r5, r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025ac:	f001 fa78 	bl	8003aa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b0:	f000 f91e 	bl	80027f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025b4:	f000 fb58 	bl	8002c68 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80025b8:	f000 fad4 	bl	8002b64 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80025bc:	f000 fa84 	bl	8002ac8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80025c0:	f000 fb1e 	bl	8002c00 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80025c4:	f000 fa42 	bl	8002a4c <MX_TIM6_Init>
  MX_RTC_Init();
 80025c8:	f000 f95e 	bl	8002888 <MX_RTC_Init>
  MX_SPI1_Init();
 80025cc:	f000 fa00 	bl	80029d0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // System hello
  HAL_UART_Transmit ( &huart2 , (uint8_t*) hello , strlen (hello) , UART_TIMEOUT ) ;
 80025d0:	4b70      	ldr	r3, [pc, #448]	; (8002794 <main+0x1ec>)
 80025d2:	681c      	ldr	r4, [r3, #0]
 80025d4:	4b6f      	ldr	r3, [pc, #444]	; (8002794 <main+0x1ec>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	0018      	movs	r0, r3
 80025da:	f7fd fd93 	bl	8000104 <strlen>
 80025de:	0003      	movs	r3, r0
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	23fa      	movs	r3, #250	; 0xfa
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	486c      	ldr	r0, [pc, #432]	; (8002798 <main+0x1f0>)
 80025e8:	0021      	movs	r1, r4
 80025ea:	f004 fd8f 	bl	800710c <HAL_UART_Transmit>

  // Is system initialized?
  send_debug_logs ( "Start initialization process" ) ;
 80025ee:	4b6b      	ldr	r3, [pc, #428]	; (800279c <main+0x1f4>)
 80025f0:	0018      	movs	r0, r3
 80025f2:	f000 fd61 	bl	80030b8 <send_debug_logs>
  if ( ! is_system_initialized () )
 80025f6:	f000 feb9 	bl	800336c <is_system_initialized>
 80025fa:	0003      	movs	r3, r0
 80025fc:	001a      	movs	r2, r3
 80025fe:	2301      	movs	r3, #1
 8002600:	4053      	eors	r3, r2
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	d017      	beq.n	8002638 <main+0x90>
  {
	  // ASTRO INIT
	  if ( !my_astro_init () )
 8002608:	f007 fc5a 	bl	8009ec0 <my_astro_init>
 800260c:	0003      	movs	r3, r0
 800260e:	001a      	movs	r2, r3
 8002610:	2301      	movs	r3, #1
 8002612:	4053      	eors	r3, r2
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <main+0x76>
	  {
		  HAL_NVIC_SystemReset () ;
 800261a:	f001 fbea 	bl	8003df2 <HAL_NVIC_SystemReset>
	  }

	  // ACC INIT
	  my_lis2dw12_ctx.write_reg = my_lis2dw12_platform_write ;
 800261e:	4b60      	ldr	r3, [pc, #384]	; (80027a0 <main+0x1f8>)
 8002620:	4a60      	ldr	r2, [pc, #384]	; (80027a4 <main+0x1fc>)
 8002622:	601a      	str	r2, [r3, #0]
	  my_lis2dw12_ctx.read_reg = my_lis2dw12_platform_read ;
 8002624:	4b5e      	ldr	r3, [pc, #376]	; (80027a0 <main+0x1f8>)
 8002626:	4a60      	ldr	r2, [pc, #384]	; (80027a8 <main+0x200>)
 8002628:	605a      	str	r2, [r3, #4]
	  my_lis2dw12_ctx.handle = HSPI1 ;
 800262a:	4b5d      	ldr	r3, [pc, #372]	; (80027a0 <main+0x1f8>)
 800262c:	4a5f      	ldr	r2, [pc, #380]	; (80027ac <main+0x204>)
 800262e:	60da      	str	r2, [r3, #12]
	  my_lis2dw12_init ( &my_lis2dw12_ctx ) ;
 8002630:	4b5b      	ldr	r3, [pc, #364]	; (80027a0 <main+0x1f8>)
 8002632:	0018      	movs	r0, r3
 8002634:	f007 fd09 	bl	800a04a <my_lis2dw12_init>

	  // RTC INIT
  }

  // Preparation process
  send_debug_logs ( "Start preparation process" ) ;
 8002638:	4b5d      	ldr	r3, [pc, #372]	; (80027b0 <main+0x208>)
 800263a:	0018      	movs	r0, r3
 800263c:	f000 fd3c 	bl	80030b8 <send_debug_logs>
  while ( !enqueue_hello_payload () )
 8002640:	e025      	b.n	800268e <main+0xe6>
  {
	  my_lis2dw12_int1_wu_enable ( &my_lis2dw12_ctx ) ;
 8002642:	4b57      	ldr	r3, [pc, #348]	; (80027a0 <main+0x1f8>)
 8002644:	0018      	movs	r0, r3
 8002646:	f007 fd59 	bl	800a0fc <my_lis2dw12_int1_wu_enable>
	  send_debug_logs ( "Enter STOPMode during preparation process" ) ;
 800264a:	4b5a      	ldr	r3, [pc, #360]	; (80027b4 <main+0x20c>)
 800264c:	0018      	movs	r0, r3
 800264e:	f000 fd33 	bl	80030b8 <send_debug_logs>
	  HAL_SuspendTick () ; // Jak nie wyłączę to mnie przerwanie SysTick od razu wybudzi!!!
 8002652:	f001 facf 	bl	8003bf4 <HAL_SuspendTick>
	  HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
 8002656:	2380      	movs	r3, #128	; 0x80
 8002658:	01db      	lsls	r3, r3, #7
 800265a:	2102      	movs	r1, #2
 800265c:	0018      	movs	r0, r3
 800265e:	f001 fe7b 	bl	8004358 <HAL_PWR_EnterSTOPMode>
	  HAL_ResumeTick () ;
 8002662:	f001 fad5 	bl	8003c10 <HAL_ResumeTick>
	  if ( is_acc_int1_wkup_flag )
 8002666:	4b54      	ldr	r3, [pc, #336]	; (80027b8 <main+0x210>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00f      	beq.n	800268e <main+0xe6>
	  {
		  send_debug_logs ( "main.c - preparation sm: lis2dw12_int1 wake up after STOPMode" ) ;
 800266e:	4b53      	ldr	r3, [pc, #332]	; (80027bc <main+0x214>)
 8002670:	0018      	movs	r0, r3
 8002672:	f000 fd21 	bl	80030b8 <send_debug_logs>
		  // Turn off next int1_wkups for the end of procedure
		  my_lis2dw12_int1_wu_disable ( &my_lis2dw12_ctx ) ;
 8002676:	4b4a      	ldr	r3, [pc, #296]	; (80027a0 <main+0x1f8>)
 8002678:	0018      	movs	r0, r3
 800267a:	f007 fd5a 	bl	800a132 <my_lis2dw12_int1_wu_disable>
		  is_acc_int1_wkup_flag = false ;
 800267e:	4b4e      	ldr	r3, [pc, #312]	; (80027b8 <main+0x210>)
 8002680:	2200      	movs	r2, #0
 8002682:	701a      	strb	r2, [r3, #0]
		  HAL_Delay ( 500 ) ; // docelowo 2000
 8002684:	23fa      	movs	r3, #250	; 0xfa
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	0018      	movs	r0, r3
 800268a:	f001 fa8f 	bl	8003bac <HAL_Delay>
  while ( !enqueue_hello_payload () )
 800268e:	f000 fc6d 	bl	8002f6c <enqueue_hello_payload>
 8002692:	0003      	movs	r3, r0
 8002694:	001a      	movs	r2, r3
 8002696:	2301      	movs	r3, #1
 8002698:	4053      	eors	r3, r2
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1d0      	bne.n	8002642 <main+0x9a>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  astro_log_loop_timer = get_systick () ;
 80026a0:	f000 fd9a 	bl	80031d8 <get_systick>
 80026a4:	0002      	movs	r2, r0
 80026a6:	4b46      	ldr	r3, [pc, #280]	; (80027c0 <main+0x218>)
 80026a8:	601a      	str	r2, [r3, #0]
  // RUNNING STATE MACHINE
  while (1)
  {
	  if ( is_evt_pin_high() )
 80026aa:	f000 fd83 	bl	80031b4 <is_evt_pin_high>
 80026ae:	1e03      	subs	r3, r0, #0
 80026b0:	d006      	beq.n	80026c0 <main+0x118>
	  {
		  send_debug_logs ( "main.c - running sm: is_evt_pin_high" ) ;
 80026b2:	4b44      	ldr	r3, [pc, #272]	; (80027c4 <main+0x21c>)
 80026b4:	0018      	movs	r0, r3
 80026b6:	f000 fcff 	bl	80030b8 <send_debug_logs>
		  my_astro_read_evt_reg () ;
 80026ba:	f007 fc77 	bl	8009fac <my_astro_read_evt_reg>
 80026be:	e00d      	b.n	80026dc <main+0x134>
	  }
	  else
	  {
		  send_debug_logs ( "main.c - running sm: no is_evt_pin_high" ) ;
 80026c0:	4b41      	ldr	r3, [pc, #260]	; (80027c8 <main+0x220>)
 80026c2:	0018      	movs	r0, r3
 80026c4:	f000 fcf8 	bl	80030b8 <send_debug_logs>
		  HAL_SuspendTick () ; // Jak nie wyłączę to mnie przerwanie SysTick od razu wybudzi!!!
 80026c8:	f001 fa94 	bl	8003bf4 <HAL_SuspendTick>
		  HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
 80026cc:	2380      	movs	r3, #128	; 0x80
 80026ce:	01db      	lsls	r3, r3, #7
 80026d0:	2102      	movs	r1, #2
 80026d2:	0018      	movs	r0, r3
 80026d4:	f001 fe40 	bl	8004358 <HAL_PWR_EnterSTOPMode>
		  HAL_ResumeTick () ;
 80026d8:	f001 fa9a 	bl	8003c10 <HAL_ResumeTick>
	  }
	  if ( is_astro_evt_flag )
 80026dc:	4b3b      	ldr	r3, [pc, #236]	; (80027cc <main+0x224>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d008      	beq.n	80026f6 <main+0x14e>
	  {
		  send_debug_logs ( "main.c - running sm: is_astro_evt_flag" ) ;
 80026e4:	4b3a      	ldr	r3, [pc, #232]	; (80027d0 <main+0x228>)
 80026e6:	0018      	movs	r0, r3
 80026e8:	f000 fce6 	bl	80030b8 <send_debug_logs>
		  my_astro_read_evt_reg () ;
 80026ec:	f007 fc5e 	bl	8009fac <my_astro_read_evt_reg>
		  is_astro_evt_flag = false ;
 80026f0:	4b36      	ldr	r3, [pc, #216]	; (80027cc <main+0x224>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	701a      	strb	r2, [r3, #0]
	  }
	  if ( is_acc_int1_wkup_flag )
 80026f6:	4b30      	ldr	r3, [pc, #192]	; (80027b8 <main+0x210>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d034      	beq.n	8002768 <main+0x1c0>
	  {
		  // Turn off next int1_wkups for the end of procedure
		  my_lis2dw12_int1_wu_disable ( &my_lis2dw12_ctx ) ;
 80026fe:	4b28      	ldr	r3, [pc, #160]	; (80027a0 <main+0x1f8>)
 8002700:	0018      	movs	r0, r3
 8002702:	f007 fd16 	bl	800a132 <my_lis2dw12_int1_wu_disable>
		  is_acc_int1_wkup_flag = false ;
 8002706:	4b2c      	ldr	r3, [pc, #176]	; (80027b8 <main+0x210>)
 8002708:	2200      	movs	r2, #0
 800270a:	701a      	strb	r2, [r3, #0]

		  send_debug_logs ( "main.c - running sm: lis2dw12_int1 wake up after STOPMode" ) ;
 800270c:	4b31      	ldr	r3, [pc, #196]	; (80027d4 <main+0x22c>)
 800270e:	0018      	movs	r0, r3
 8002710:	f000 fcd2 	bl	80030b8 <send_debug_logs>
		  my_astro_log ();
 8002714:	f007 fc80 	bl	800a018 <my_astro_log>


		  my_rtc_get_dt ( &rtc_d , &rtc_t ) ;
 8002718:	4a2f      	ldr	r2, [pc, #188]	; (80027d8 <main+0x230>)
 800271a:	4b30      	ldr	r3, [pc, #192]	; (80027dc <main+0x234>)
 800271c:	0011      	movs	r1, r2
 800271e:	0018      	movs	r0, r3
 8002720:	f007 ff62 	bl	800a5e8 <my_rtc_get_dt>
		  current_ts = my_conv_rtc2timestamp ( &rtc_d , &rtc_t ) ;
 8002724:	4a2c      	ldr	r2, [pc, #176]	; (80027d8 <main+0x230>)
 8002726:	4b2d      	ldr	r3, [pc, #180]	; (80027dc <main+0x234>)
 8002728:	0011      	movs	r1, r2
 800272a:	0018      	movs	r0, r3
 800272c:	f008 f886 	bl	800a83c <my_conv_rtc2timestamp>
 8002730:	0002      	movs	r2, r0
 8002732:	4b2b      	ldr	r3, [pc, #172]	; (80027e0 <main+0x238>)
 8002734:	601a      	str	r2, [r3, #0]
		  /*
		  dbg_buff[0] = 0 ;
		  sprintf ( dbg_buff , "Seconds elapsed from last fix: %lu" , current_ts - last_fix_ts ) ;
		  send_debug_logs ( dbg_buff ) ;
		  */
		  if ( ( current_ts - last_fix_ts ) > SECONDS_IN_1_HOUR ) // If more than 1 hour has elapsed from last fix.
 8002736:	4b2a      	ldr	r3, [pc, #168]	; (80027e0 <main+0x238>)
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	4b2a      	ldr	r3, [pc, #168]	; (80027e4 <main+0x23c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	1ad2      	subs	r2, r2, r3
 8002740:	23e1      	movs	r3, #225	; 0xe1
 8002742:	011b      	lsls	r3, r3, #4
 8002744:	429a      	cmp	r2, r3
 8002746:	d909      	bls.n	800275c <main+0x1b4>
		  {
			  if ( astronode_send_rtc_rr () && !astronode_send_nco_rr () ) // If Astro's RC know time and has opportunity to contact SV
 8002748:	f006 f8fc 	bl	8008944 <astronode_send_rtc_rr>
 800274c:	1e03      	subs	r3, r0, #0
 800274e:	d005      	beq.n	800275c <main+0x1b4>
 8002750:	f005 fe34 	bl	80083bc <astronode_send_nco_rr>
 8002754:	1e03      	subs	r3, r0, #0
 8002756:	d101      	bne.n	800275c <main+0x1b4>
			  {
				  enqueue_payload () ;
 8002758:	f000 fb4a 	bl	8002df0 <enqueue_payload>
			  }
		  }
		  // Turn on int1_wkup
		  my_astro_log ();
 800275c:	f007 fc5c 	bl	800a018 <my_astro_log>
		  my_lis2dw12_int1_wu_enable ( &my_lis2dw12_ctx ) ;
 8002760:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <main+0x1f8>)
 8002762:	0018      	movs	r0, r3
 8002764:	f007 fcca 	bl	800a0fc <my_lis2dw12_int1_wu_enable>
	  }
	  if ( is_rtc_alarm_a_flag )
 8002768:	4b1f      	ldr	r3, [pc, #124]	; (80027e8 <main+0x240>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d09c      	beq.n	80026aa <main+0x102>
	  {
		  send_debug_logs ( "main.c - running sm: rtc alarm A event" ) ;
 8002770:	4b1e      	ldr	r3, [pc, #120]	; (80027ec <main+0x244>)
 8002772:	0018      	movs	r0, r3
 8002774:	f000 fca0 	bl	80030b8 <send_debug_logs>
		  enqueue_payload () ;
 8002778:	f000 fb3a 	bl	8002df0 <enqueue_payload>
		  my_astro_log () ;
 800277c:	f007 fc4c 	bl	800a018 <my_astro_log>
		  my_rtc_set_alarm ( SECONDS_IN_1_HOUR ) ;
 8002780:	23e1      	movs	r3, #225	; 0xe1
 8002782:	011b      	lsls	r3, r3, #4
 8002784:	0018      	movs	r0, r3
 8002786:	f007 ff89 	bl	800a69c <my_rtc_set_alarm>
		  is_rtc_alarm_a_flag = false ;
 800278a:	4b17      	ldr	r3, [pc, #92]	; (80027e8 <main+0x240>)
 800278c:	2200      	movs	r2, #0
 800278e:	701a      	strb	r2, [r3, #0]
	  if ( is_evt_pin_high() )
 8002790:	e78b      	b.n	80026aa <main+0x102>
 8002792:	46c0      	nop			; (mov r8, r8)
 8002794:	20000000 	.word	0x20000000
 8002798:	2000086c 	.word	0x2000086c
 800279c:	08013390 	.word	0x08013390
 80027a0:	20000b88 	.word	0x20000b88
 80027a4:	0800327d 	.word	0x0800327d
 80027a8:	080032ed 	.word	0x080032ed
 80027ac:	20000728 	.word	0x20000728
 80027b0:	080133b0 	.word	0x080133b0
 80027b4:	080133cc 	.word	0x080133cc
 80027b8:	20000bb0 	.word	0x20000bb0
 80027bc:	080133f8 	.word	0x080133f8
 80027c0:	20000a2c 	.word	0x20000a2c
 80027c4:	08013438 	.word	0x08013438
 80027c8:	08013460 	.word	0x08013460
 80027cc:	20000bb1 	.word	0x20000bb1
 80027d0:	08013488 	.word	0x08013488
 80027d4:	080134b0 	.word	0x080134b0
 80027d8:	20000b98 	.word	0x20000b98
 80027dc:	20000bac 	.word	0x20000bac
 80027e0:	20000a0c 	.word	0x20000a0c
 80027e4:	20000a20 	.word	0x20000a20
 80027e8:	20000bb2 	.word	0x20000bb2
 80027ec:	080134ec 	.word	0x080134ec

080027f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027f0:	b590      	push	{r4, r7, lr}
 80027f2:	b093      	sub	sp, #76	; 0x4c
 80027f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027f6:	2410      	movs	r4, #16
 80027f8:	193b      	adds	r3, r7, r4
 80027fa:	0018      	movs	r0, r3
 80027fc:	2338      	movs	r3, #56	; 0x38
 80027fe:	001a      	movs	r2, r3
 8002800:	2100      	movs	r1, #0
 8002802:	f00a f82b 	bl	800c85c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002806:	003b      	movs	r3, r7
 8002808:	0018      	movs	r0, r3
 800280a:	2310      	movs	r3, #16
 800280c:	001a      	movs	r2, r3
 800280e:	2100      	movs	r1, #0
 8002810:	f00a f824 	bl	800c85c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002814:	2380      	movs	r3, #128	; 0x80
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	0018      	movs	r0, r3
 800281a:	f001 fdd5 	bl	80043c8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800281e:	193b      	adds	r3, r7, r4
 8002820:	220a      	movs	r2, #10
 8002822:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002824:	193b      	adds	r3, r7, r4
 8002826:	2280      	movs	r2, #128	; 0x80
 8002828:	0052      	lsls	r2, r2, #1
 800282a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800282c:	0021      	movs	r1, r4
 800282e:	187b      	adds	r3, r7, r1
 8002830:	2200      	movs	r2, #0
 8002832:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002834:	187b      	adds	r3, r7, r1
 8002836:	2240      	movs	r2, #64	; 0x40
 8002838:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800283a:	187b      	adds	r3, r7, r1
 800283c:	2201      	movs	r2, #1
 800283e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002840:	187b      	adds	r3, r7, r1
 8002842:	2200      	movs	r2, #0
 8002844:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002846:	187b      	adds	r3, r7, r1
 8002848:	0018      	movs	r0, r3
 800284a:	f001 fe09 	bl	8004460 <HAL_RCC_OscConfig>
 800284e:	1e03      	subs	r3, r0, #0
 8002850:	d001      	beq.n	8002856 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002852:	f000 fdf1 	bl	8003438 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002856:	003b      	movs	r3, r7
 8002858:	2207      	movs	r2, #7
 800285a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800285c:	003b      	movs	r3, r7
 800285e:	2200      	movs	r2, #0
 8002860:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002862:	003b      	movs	r3, r7
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002868:	003b      	movs	r3, r7
 800286a:	2200      	movs	r2, #0
 800286c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800286e:	003b      	movs	r3, r7
 8002870:	2100      	movs	r1, #0
 8002872:	0018      	movs	r0, r3
 8002874:	f002 f90e 	bl	8004a94 <HAL_RCC_ClockConfig>
 8002878:	1e03      	subs	r3, r0, #0
 800287a:	d001      	beq.n	8002880 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800287c:	f000 fddc 	bl	8003438 <Error_Handler>
  }
}
 8002880:	46c0      	nop			; (mov r8, r8)
 8002882:	46bd      	mov	sp, r7
 8002884:	b013      	add	sp, #76	; 0x4c
 8002886:	bd90      	pop	{r4, r7, pc}

08002888 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b090      	sub	sp, #64	; 0x40
 800288c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800288e:	232c      	movs	r3, #44	; 0x2c
 8002890:	18fb      	adds	r3, r7, r3
 8002892:	0018      	movs	r0, r3
 8002894:	2314      	movs	r3, #20
 8002896:	001a      	movs	r2, r3
 8002898:	2100      	movs	r1, #0
 800289a:	f009 ffdf 	bl	800c85c <memset>
  RTC_DateTypeDef sDate = {0};
 800289e:	2328      	movs	r3, #40	; 0x28
 80028a0:	18fb      	adds	r3, r7, r3
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80028a6:	003b      	movs	r3, r7
 80028a8:	0018      	movs	r0, r3
 80028aa:	2328      	movs	r3, #40	; 0x28
 80028ac:	001a      	movs	r2, r3
 80028ae:	2100      	movs	r1, #0
 80028b0:	f009 ffd4 	bl	800c85c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80028b4:	4b44      	ldr	r3, [pc, #272]	; (80029c8 <MX_RTC_Init+0x140>)
 80028b6:	4a45      	ldr	r2, [pc, #276]	; (80029cc <MX_RTC_Init+0x144>)
 80028b8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80028ba:	4b43      	ldr	r3, [pc, #268]	; (80029c8 <MX_RTC_Init+0x140>)
 80028bc:	2200      	movs	r2, #0
 80028be:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80028c0:	4b41      	ldr	r3, [pc, #260]	; (80029c8 <MX_RTC_Init+0x140>)
 80028c2:	227f      	movs	r2, #127	; 0x7f
 80028c4:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80028c6:	4b40      	ldr	r3, [pc, #256]	; (80029c8 <MX_RTC_Init+0x140>)
 80028c8:	22ff      	movs	r2, #255	; 0xff
 80028ca:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80028cc:	4b3e      	ldr	r3, [pc, #248]	; (80029c8 <MX_RTC_Init+0x140>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80028d2:	4b3d      	ldr	r3, [pc, #244]	; (80029c8 <MX_RTC_Init+0x140>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80028d8:	4b3b      	ldr	r3, [pc, #236]	; (80029c8 <MX_RTC_Init+0x140>)
 80028da:	2200      	movs	r2, #0
 80028dc:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80028de:	4b3a      	ldr	r3, [pc, #232]	; (80029c8 <MX_RTC_Init+0x140>)
 80028e0:	2280      	movs	r2, #128	; 0x80
 80028e2:	05d2      	lsls	r2, r2, #23
 80028e4:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80028e6:	4b38      	ldr	r3, [pc, #224]	; (80029c8 <MX_RTC_Init+0x140>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80028ec:	4b36      	ldr	r3, [pc, #216]	; (80029c8 <MX_RTC_Init+0x140>)
 80028ee:	0018      	movs	r0, r3
 80028f0:	f002 fc32 	bl	8005158 <HAL_RTC_Init>
 80028f4:	1e03      	subs	r3, r0, #0
 80028f6:	d001      	beq.n	80028fc <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80028f8:	f000 fd9e 	bl	8003438 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80028fc:	212c      	movs	r1, #44	; 0x2c
 80028fe:	187b      	adds	r3, r7, r1
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8002904:	187b      	adds	r3, r7, r1
 8002906:	2200      	movs	r2, #0
 8002908:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800290a:	187b      	adds	r3, r7, r1
 800290c:	2200      	movs	r2, #0
 800290e:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0;
 8002910:	187b      	adds	r3, r7, r1
 8002912:	2200      	movs	r2, #0
 8002914:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002916:	187b      	adds	r3, r7, r1
 8002918:	2200      	movs	r2, #0
 800291a:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800291c:	187b      	adds	r3, r7, r1
 800291e:	2200      	movs	r2, #0
 8002920:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002922:	1879      	adds	r1, r7, r1
 8002924:	4b28      	ldr	r3, [pc, #160]	; (80029c8 <MX_RTC_Init+0x140>)
 8002926:	2200      	movs	r2, #0
 8002928:	0018      	movs	r0, r3
 800292a:	f002 fcb7 	bl	800529c <HAL_RTC_SetTime>
 800292e:	1e03      	subs	r3, r0, #0
 8002930:	d001      	beq.n	8002936 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8002932:	f000 fd81 	bl	8003438 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8002936:	2128      	movs	r1, #40	; 0x28
 8002938:	187b      	adds	r3, r7, r1
 800293a:	2206      	movs	r2, #6
 800293c:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800293e:	187b      	adds	r3, r7, r1
 8002940:	2201      	movs	r2, #1
 8002942:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8002944:	187b      	adds	r3, r7, r1
 8002946:	2201      	movs	r2, #1
 8002948:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 800294a:	187b      	adds	r3, r7, r1
 800294c:	2200      	movs	r2, #0
 800294e:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002950:	1879      	adds	r1, r7, r1
 8002952:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <MX_RTC_Init+0x140>)
 8002954:	2200      	movs	r2, #0
 8002956:	0018      	movs	r0, r3
 8002958:	f002 fda4 	bl	80054a4 <HAL_RTC_SetDate>
 800295c:	1e03      	subs	r3, r0, #0
 800295e:	d001      	beq.n	8002964 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8002960:	f000 fd6a 	bl	8003438 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8002964:	003b      	movs	r3, r7
 8002966:	2200      	movs	r2, #0
 8002968:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 800296a:	003b      	movs	r3, r7
 800296c:	2200      	movs	r2, #0
 800296e:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8002970:	003b      	movs	r3, r7
 8002972:	2200      	movs	r2, #0
 8002974:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8002976:	003b      	movs	r3, r7
 8002978:	2200      	movs	r2, #0
 800297a:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800297c:	003b      	movs	r3, r7
 800297e:	2200      	movs	r2, #0
 8002980:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002982:	003b      	movs	r3, r7
 8002984:	2200      	movs	r2, #0
 8002986:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002988:	003b      	movs	r3, r7
 800298a:	2200      	movs	r2, #0
 800298c:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800298e:	003b      	movs	r3, r7
 8002990:	2200      	movs	r2, #0
 8002992:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002994:	003b      	movs	r3, r7
 8002996:	2200      	movs	r2, #0
 8002998:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 800299a:	003b      	movs	r3, r7
 800299c:	2220      	movs	r2, #32
 800299e:	2101      	movs	r1, #1
 80029a0:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80029a2:	003b      	movs	r3, r7
 80029a4:	2280      	movs	r2, #128	; 0x80
 80029a6:	0052      	lsls	r2, r2, #1
 80029a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80029aa:	0039      	movs	r1, r7
 80029ac:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <MX_RTC_Init+0x140>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	0018      	movs	r0, r3
 80029b2:	f002 fe57 	bl	8005664 <HAL_RTC_SetAlarm>
 80029b6:	1e03      	subs	r3, r0, #0
 80029b8:	d001      	beq.n	80029be <MX_RTC_Init+0x136>
  {
    Error_Handler();
 80029ba:	f000 fd3d 	bl	8003438 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b010      	add	sp, #64	; 0x40
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	200006fc 	.word	0x200006fc
 80029cc:	40002800 	.word	0x40002800

080029d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80029d4:	4b1b      	ldr	r3, [pc, #108]	; (8002a44 <MX_SPI1_Init+0x74>)
 80029d6:	4a1c      	ldr	r2, [pc, #112]	; (8002a48 <MX_SPI1_Init+0x78>)
 80029d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029da:	4b1a      	ldr	r3, [pc, #104]	; (8002a44 <MX_SPI1_Init+0x74>)
 80029dc:	2282      	movs	r2, #130	; 0x82
 80029de:	0052      	lsls	r2, r2, #1
 80029e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80029e2:	4b18      	ldr	r3, [pc, #96]	; (8002a44 <MX_SPI1_Init+0x74>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80029e8:	4b16      	ldr	r3, [pc, #88]	; (8002a44 <MX_SPI1_Init+0x74>)
 80029ea:	22e0      	movs	r2, #224	; 0xe0
 80029ec:	00d2      	lsls	r2, r2, #3
 80029ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029f0:	4b14      	ldr	r3, [pc, #80]	; (8002a44 <MX_SPI1_Init+0x74>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029f6:	4b13      	ldr	r3, [pc, #76]	; (8002a44 <MX_SPI1_Init+0x74>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029fc:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <MX_SPI1_Init+0x74>)
 80029fe:	2280      	movs	r2, #128	; 0x80
 8002a00:	0092      	lsls	r2, r2, #2
 8002a02:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a04:	4b0f      	ldr	r3, [pc, #60]	; (8002a44 <MX_SPI1_Init+0x74>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a0a:	4b0e      	ldr	r3, [pc, #56]	; (8002a44 <MX_SPI1_Init+0x74>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a10:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <MX_SPI1_Init+0x74>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a16:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <MX_SPI1_Init+0x74>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002a1c:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <MX_SPI1_Init+0x74>)
 8002a1e:	2207      	movs	r2, #7
 8002a20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a22:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <MX_SPI1_Init+0x74>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a28:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <MX_SPI1_Init+0x74>)
 8002a2a:	2208      	movs	r2, #8
 8002a2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a2e:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <MX_SPI1_Init+0x74>)
 8002a30:	0018      	movs	r0, r3
 8002a32:	f003 f899 	bl	8005b68 <HAL_SPI_Init>
 8002a36:	1e03      	subs	r3, r0, #0
 8002a38:	d001      	beq.n	8002a3e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002a3a:	f000 fcfd 	bl	8003438 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a3e:	46c0      	nop			; (mov r8, r8)
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	20000728 	.word	0x20000728
 8002a48:	40013000 	.word	0x40013000

08002a4c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a52:	1d3b      	adds	r3, r7, #4
 8002a54:	0018      	movs	r0, r3
 8002a56:	230c      	movs	r3, #12
 8002a58:	001a      	movs	r2, r3
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	f009 fefe 	bl	800c85c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002a60:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <MX_TIM6_Init+0x6c>)
 8002a62:	4a16      	ldr	r2, [pc, #88]	; (8002abc <MX_TIM6_Init+0x70>)
 8002a64:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8002a66:	4b14      	ldr	r3, [pc, #80]	; (8002ab8 <MX_TIM6_Init+0x6c>)
 8002a68:	4a15      	ldr	r2, [pc, #84]	; (8002ac0 <MX_TIM6_Init+0x74>)
 8002a6a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a6c:	4b12      	ldr	r3, [pc, #72]	; (8002ab8 <MX_TIM6_Init+0x6c>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002a72:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <MX_TIM6_Init+0x6c>)
 8002a74:	4a13      	ldr	r2, [pc, #76]	; (8002ac4 <MX_TIM6_Init+0x78>)
 8002a76:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a78:	4b0f      	ldr	r3, [pc, #60]	; (8002ab8 <MX_TIM6_Init+0x6c>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002a7e:	4b0e      	ldr	r3, [pc, #56]	; (8002ab8 <MX_TIM6_Init+0x6c>)
 8002a80:	0018      	movs	r0, r3
 8002a82:	f003 ff73 	bl	800696c <HAL_TIM_Base_Init>
 8002a86:	1e03      	subs	r3, r0, #0
 8002a88:	d001      	beq.n	8002a8e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002a8a:	f000 fcd5 	bl	8003438 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a8e:	1d3b      	adds	r3, r7, #4
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a94:	1d3b      	adds	r3, r7, #4
 8002a96:	2200      	movs	r2, #0
 8002a98:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002a9a:	1d3a      	adds	r2, r7, #4
 8002a9c:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <MX_TIM6_Init+0x6c>)
 8002a9e:	0011      	movs	r1, r2
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f004 fa17 	bl	8006ed4 <HAL_TIMEx_MasterConfigSynchronization>
 8002aa6:	1e03      	subs	r3, r0, #0
 8002aa8:	d001      	beq.n	8002aae <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002aaa:	f000 fcc5 	bl	8003438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	b004      	add	sp, #16
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	2000078c 	.word	0x2000078c
 8002abc:	40001000 	.word	0x40001000
 8002ac0:	00003e7f 	.word	0x00003e7f
 8002ac4:	000003e7 	.word	0x000003e7

08002ac8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002acc:	4b23      	ldr	r3, [pc, #140]	; (8002b5c <MX_USART1_UART_Init+0x94>)
 8002ace:	4a24      	ldr	r2, [pc, #144]	; (8002b60 <MX_USART1_UART_Init+0x98>)
 8002ad0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002ad2:	4b22      	ldr	r3, [pc, #136]	; (8002b5c <MX_USART1_UART_Init+0x94>)
 8002ad4:	2296      	movs	r2, #150	; 0x96
 8002ad6:	0192      	lsls	r2, r2, #6
 8002ad8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ada:	4b20      	ldr	r3, [pc, #128]	; (8002b5c <MX_USART1_UART_Init+0x94>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ae0:	4b1e      	ldr	r3, [pc, #120]	; (8002b5c <MX_USART1_UART_Init+0x94>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ae6:	4b1d      	ldr	r3, [pc, #116]	; (8002b5c <MX_USART1_UART_Init+0x94>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002aec:	4b1b      	ldr	r3, [pc, #108]	; (8002b5c <MX_USART1_UART_Init+0x94>)
 8002aee:	220c      	movs	r2, #12
 8002af0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002af2:	4b1a      	ldr	r3, [pc, #104]	; (8002b5c <MX_USART1_UART_Init+0x94>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002af8:	4b18      	ldr	r3, [pc, #96]	; (8002b5c <MX_USART1_UART_Init+0x94>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002afe:	4b17      	ldr	r3, [pc, #92]	; (8002b5c <MX_USART1_UART_Init+0x94>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b04:	4b15      	ldr	r3, [pc, #84]	; (8002b5c <MX_USART1_UART_Init+0x94>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b0a:	4b14      	ldr	r3, [pc, #80]	; (8002b5c <MX_USART1_UART_Init+0x94>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b10:	4b12      	ldr	r3, [pc, #72]	; (8002b5c <MX_USART1_UART_Init+0x94>)
 8002b12:	0018      	movs	r0, r3
 8002b14:	f004 fa64 	bl	8006fe0 <HAL_UART_Init>
 8002b18:	1e03      	subs	r3, r0, #0
 8002b1a:	d001      	beq.n	8002b20 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002b1c:	f000 fc8c 	bl	8003438 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b20:	4b0e      	ldr	r3, [pc, #56]	; (8002b5c <MX_USART1_UART_Init+0x94>)
 8002b22:	2100      	movs	r1, #0
 8002b24:	0018      	movs	r0, r3
 8002b26:	f005 f931 	bl	8007d8c <HAL_UARTEx_SetTxFifoThreshold>
 8002b2a:	1e03      	subs	r3, r0, #0
 8002b2c:	d001      	beq.n	8002b32 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002b2e:	f000 fc83 	bl	8003438 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b32:	4b0a      	ldr	r3, [pc, #40]	; (8002b5c <MX_USART1_UART_Init+0x94>)
 8002b34:	2100      	movs	r1, #0
 8002b36:	0018      	movs	r0, r3
 8002b38:	f005 f968 	bl	8007e0c <HAL_UARTEx_SetRxFifoThreshold>
 8002b3c:	1e03      	subs	r3, r0, #0
 8002b3e:	d001      	beq.n	8002b44 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002b40:	f000 fc7a 	bl	8003438 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002b44:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <MX_USART1_UART_Init+0x94>)
 8002b46:	0018      	movs	r0, r3
 8002b48:	f005 f8e6 	bl	8007d18 <HAL_UARTEx_DisableFifoMode>
 8002b4c:	1e03      	subs	r3, r0, #0
 8002b4e:	d001      	beq.n	8002b54 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002b50:	f000 fc72 	bl	8003438 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b54:	46c0      	nop			; (mov r8, r8)
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	200007d8 	.word	0x200007d8
 8002b60:	40013800 	.word	0x40013800

08002b64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b68:	4b23      	ldr	r3, [pc, #140]	; (8002bf8 <MX_USART2_UART_Init+0x94>)
 8002b6a:	4a24      	ldr	r2, [pc, #144]	; (8002bfc <MX_USART2_UART_Init+0x98>)
 8002b6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b6e:	4b22      	ldr	r3, [pc, #136]	; (8002bf8 <MX_USART2_UART_Init+0x94>)
 8002b70:	22e1      	movs	r2, #225	; 0xe1
 8002b72:	0252      	lsls	r2, r2, #9
 8002b74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b76:	4b20      	ldr	r3, [pc, #128]	; (8002bf8 <MX_USART2_UART_Init+0x94>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b7c:	4b1e      	ldr	r3, [pc, #120]	; (8002bf8 <MX_USART2_UART_Init+0x94>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b82:	4b1d      	ldr	r3, [pc, #116]	; (8002bf8 <MX_USART2_UART_Init+0x94>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b88:	4b1b      	ldr	r3, [pc, #108]	; (8002bf8 <MX_USART2_UART_Init+0x94>)
 8002b8a:	220c      	movs	r2, #12
 8002b8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b8e:	4b1a      	ldr	r3, [pc, #104]	; (8002bf8 <MX_USART2_UART_Init+0x94>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b94:	4b18      	ldr	r3, [pc, #96]	; (8002bf8 <MX_USART2_UART_Init+0x94>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b9a:	4b17      	ldr	r3, [pc, #92]	; (8002bf8 <MX_USART2_UART_Init+0x94>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ba0:	4b15      	ldr	r3, [pc, #84]	; (8002bf8 <MX_USART2_UART_Init+0x94>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ba6:	4b14      	ldr	r3, [pc, #80]	; (8002bf8 <MX_USART2_UART_Init+0x94>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002bac:	4b12      	ldr	r3, [pc, #72]	; (8002bf8 <MX_USART2_UART_Init+0x94>)
 8002bae:	0018      	movs	r0, r3
 8002bb0:	f004 fa16 	bl	8006fe0 <HAL_UART_Init>
 8002bb4:	1e03      	subs	r3, r0, #0
 8002bb6:	d001      	beq.n	8002bbc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002bb8:	f000 fc3e 	bl	8003438 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bbc:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <MX_USART2_UART_Init+0x94>)
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f005 f8e3 	bl	8007d8c <HAL_UARTEx_SetTxFifoThreshold>
 8002bc6:	1e03      	subs	r3, r0, #0
 8002bc8:	d001      	beq.n	8002bce <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002bca:	f000 fc35 	bl	8003438 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bce:	4b0a      	ldr	r3, [pc, #40]	; (8002bf8 <MX_USART2_UART_Init+0x94>)
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	f005 f91a 	bl	8007e0c <HAL_UARTEx_SetRxFifoThreshold>
 8002bd8:	1e03      	subs	r3, r0, #0
 8002bda:	d001      	beq.n	8002be0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002bdc:	f000 fc2c 	bl	8003438 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002be0:	4b05      	ldr	r3, [pc, #20]	; (8002bf8 <MX_USART2_UART_Init+0x94>)
 8002be2:	0018      	movs	r0, r3
 8002be4:	f005 f898 	bl	8007d18 <HAL_UARTEx_DisableFifoMode>
 8002be8:	1e03      	subs	r3, r0, #0
 8002bea:	d001      	beq.n	8002bf0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002bec:	f000 fc24 	bl	8003438 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002bf0:	46c0      	nop			; (mov r8, r8)
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	46c0      	nop			; (mov r8, r8)
 8002bf8:	2000086c 	.word	0x2000086c
 8002bfc:	40004400 	.word	0x40004400

08002c00 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002c04:	4b16      	ldr	r3, [pc, #88]	; (8002c60 <MX_USART3_UART_Init+0x60>)
 8002c06:	4a17      	ldr	r2, [pc, #92]	; (8002c64 <MX_USART3_UART_Init+0x64>)
 8002c08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002c0a:	4b15      	ldr	r3, [pc, #84]	; (8002c60 <MX_USART3_UART_Init+0x60>)
 8002c0c:	2296      	movs	r2, #150	; 0x96
 8002c0e:	0192      	lsls	r2, r2, #6
 8002c10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c12:	4b13      	ldr	r3, [pc, #76]	; (8002c60 <MX_USART3_UART_Init+0x60>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002c18:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <MX_USART3_UART_Init+0x60>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c1e:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <MX_USART3_UART_Init+0x60>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c24:	4b0e      	ldr	r3, [pc, #56]	; (8002c60 <MX_USART3_UART_Init+0x60>)
 8002c26:	220c      	movs	r2, #12
 8002c28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c2a:	4b0d      	ldr	r3, [pc, #52]	; (8002c60 <MX_USART3_UART_Init+0x60>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c30:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <MX_USART3_UART_Init+0x60>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c36:	4b0a      	ldr	r3, [pc, #40]	; (8002c60 <MX_USART3_UART_Init+0x60>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c3c:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <MX_USART3_UART_Init+0x60>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c42:	4b07      	ldr	r3, [pc, #28]	; (8002c60 <MX_USART3_UART_Init+0x60>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c48:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <MX_USART3_UART_Init+0x60>)
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	f004 f9c8 	bl	8006fe0 <HAL_UART_Init>
 8002c50:	1e03      	subs	r3, r0, #0
 8002c52:	d001      	beq.n	8002c58 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002c54:	f000 fbf0 	bl	8003438 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c58:	46c0      	nop			; (mov r8, r8)
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	46c0      	nop			; (mov r8, r8)
 8002c60:	20000900 	.word	0x20000900
 8002c64:	40004800 	.word	0x40004800

08002c68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c68:	b590      	push	{r4, r7, lr}
 8002c6a:	b08b      	sub	sp, #44	; 0x2c
 8002c6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c6e:	2414      	movs	r4, #20
 8002c70:	193b      	adds	r3, r7, r4
 8002c72:	0018      	movs	r0, r3
 8002c74:	2314      	movs	r3, #20
 8002c76:	001a      	movs	r2, r3
 8002c78:	2100      	movs	r1, #0
 8002c7a:	f009 fdef 	bl	800c85c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c7e:	4b58      	ldr	r3, [pc, #352]	; (8002de0 <MX_GPIO_Init+0x178>)
 8002c80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c82:	4b57      	ldr	r3, [pc, #348]	; (8002de0 <MX_GPIO_Init+0x178>)
 8002c84:	2104      	movs	r1, #4
 8002c86:	430a      	orrs	r2, r1
 8002c88:	635a      	str	r2, [r3, #52]	; 0x34
 8002c8a:	4b55      	ldr	r3, [pc, #340]	; (8002de0 <MX_GPIO_Init+0x178>)
 8002c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8e:	2204      	movs	r2, #4
 8002c90:	4013      	ands	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]
 8002c94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c96:	4b52      	ldr	r3, [pc, #328]	; (8002de0 <MX_GPIO_Init+0x178>)
 8002c98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c9a:	4b51      	ldr	r3, [pc, #324]	; (8002de0 <MX_GPIO_Init+0x178>)
 8002c9c:	2120      	movs	r1, #32
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	635a      	str	r2, [r3, #52]	; 0x34
 8002ca2:	4b4f      	ldr	r3, [pc, #316]	; (8002de0 <MX_GPIO_Init+0x178>)
 8002ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	4013      	ands	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cae:	4b4c      	ldr	r3, [pc, #304]	; (8002de0 <MX_GPIO_Init+0x178>)
 8002cb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cb2:	4b4b      	ldr	r3, [pc, #300]	; (8002de0 <MX_GPIO_Init+0x178>)
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	635a      	str	r2, [r3, #52]	; 0x34
 8002cba:	4b49      	ldr	r3, [pc, #292]	; (8002de0 <MX_GPIO_Init+0x178>)
 8002cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	60bb      	str	r3, [r7, #8]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cc6:	4b46      	ldr	r3, [pc, #280]	; (8002de0 <MX_GPIO_Init+0x178>)
 8002cc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cca:	4b45      	ldr	r3, [pc, #276]	; (8002de0 <MX_GPIO_Init+0x178>)
 8002ccc:	2102      	movs	r1, #2
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	635a      	str	r2, [r3, #52]	; 0x34
 8002cd2:	4b43      	ldr	r3, [pc, #268]	; (8002de0 <MX_GPIO_Init+0x178>)
 8002cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	4013      	ands	r3, r2
 8002cda:	607b      	str	r3, [r7, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L86_RST_Pin|L86_PWR_SW_Pin, GPIO_PIN_RESET);
 8002cde:	2388      	movs	r3, #136	; 0x88
 8002ce0:	015b      	lsls	r3, r3, #5
 8002ce2:	4840      	ldr	r0, [pc, #256]	; (8002de4 <MX_GPIO_Init+0x17c>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	0019      	movs	r1, r3
 8002ce8:	f001 fae5 	bl	80042b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RST_Pin|ASTRO_WAKEUP_Pin, GPIO_PIN_RESET);
 8002cec:	493e      	ldr	r1, [pc, #248]	; (8002de8 <MX_GPIO_Init+0x180>)
 8002cee:	23a0      	movs	r3, #160	; 0xa0
 8002cf0:	05db      	lsls	r3, r3, #23
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f001 fade 	bl	80042b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIS_SPI1_CS_GPIO_Port, LIS_SPI1_CS_Pin, GPIO_PIN_RESET);
 8002cfa:	2380      	movs	r3, #128	; 0x80
 8002cfc:	01db      	lsls	r3, r3, #7
 8002cfe:	483b      	ldr	r0, [pc, #236]	; (8002dec <MX_GPIO_Init+0x184>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	0019      	movs	r1, r3
 8002d04:	f001 fad7 	bl	80042b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : L86_RST_Pin L86_PWR_SW_Pin */
  GPIO_InitStruct.Pin = L86_RST_Pin|L86_PWR_SW_Pin;
 8002d08:	193b      	adds	r3, r7, r4
 8002d0a:	2288      	movs	r2, #136	; 0x88
 8002d0c:	0152      	lsls	r2, r2, #5
 8002d0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d10:	193b      	adds	r3, r7, r4
 8002d12:	2201      	movs	r2, #1
 8002d14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d16:	193b      	adds	r3, r7, r4
 8002d18:	2200      	movs	r2, #0
 8002d1a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1c:	193b      	adds	r3, r7, r4
 8002d1e:	2200      	movs	r2, #0
 8002d20:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d22:	193b      	adds	r3, r7, r4
 8002d24:	4a2f      	ldr	r2, [pc, #188]	; (8002de4 <MX_GPIO_Init+0x17c>)
 8002d26:	0019      	movs	r1, r3
 8002d28:	0010      	movs	r0, r2
 8002d2a:	f001 f873 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin ASTRO_PWR_SW_Pin ASTRO_RST_Pin ASTRO_WAKEUP_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RST_Pin|ASTRO_WAKEUP_Pin;
 8002d2e:	193b      	adds	r3, r7, r4
 8002d30:	4a2d      	ldr	r2, [pc, #180]	; (8002de8 <MX_GPIO_Init+0x180>)
 8002d32:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d34:	193b      	adds	r3, r7, r4
 8002d36:	2201      	movs	r2, #1
 8002d38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3a:	193b      	adds	r3, r7, r4
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d40:	193b      	adds	r3, r7, r4
 8002d42:	2200      	movs	r2, #0
 8002d44:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d46:	193a      	adds	r2, r7, r4
 8002d48:	23a0      	movs	r3, #160	; 0xa0
 8002d4a:	05db      	lsls	r3, r3, #23
 8002d4c:	0011      	movs	r1, r2
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f001 f860 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIS_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = LIS_SPI1_CS_Pin;
 8002d54:	0021      	movs	r1, r4
 8002d56:	187b      	adds	r3, r7, r1
 8002d58:	2280      	movs	r2, #128	; 0x80
 8002d5a:	01d2      	lsls	r2, r2, #7
 8002d5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d5e:	000c      	movs	r4, r1
 8002d60:	193b      	adds	r3, r7, r4
 8002d62:	2201      	movs	r2, #1
 8002d64:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d66:	193b      	adds	r3, r7, r4
 8002d68:	2200      	movs	r2, #0
 8002d6a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6c:	193b      	adds	r3, r7, r4
 8002d6e:	2200      	movs	r2, #0
 8002d70:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LIS_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002d72:	193b      	adds	r3, r7, r4
 8002d74:	4a1d      	ldr	r2, [pc, #116]	; (8002dec <MX_GPIO_Init+0x184>)
 8002d76:	0019      	movs	r1, r3
 8002d78:	0010      	movs	r0, r2
 8002d7a:	f001 f84b 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : ASTRO_EVT_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin;
 8002d7e:	193b      	adds	r3, r7, r4
 8002d80:	2280      	movs	r2, #128	; 0x80
 8002d82:	0152      	lsls	r2, r2, #5
 8002d84:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d86:	193b      	adds	r3, r7, r4
 8002d88:	2288      	movs	r2, #136	; 0x88
 8002d8a:	0352      	lsls	r2, r2, #13
 8002d8c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8e:	193b      	adds	r3, r7, r4
 8002d90:	2200      	movs	r2, #0
 8002d92:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ASTRO_EVT_GPIO_Port, &GPIO_InitStruct);
 8002d94:	193a      	adds	r2, r7, r4
 8002d96:	23a0      	movs	r3, #160	; 0xa0
 8002d98:	05db      	lsls	r3, r3, #23
 8002d9a:	0011      	movs	r1, r2
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f001 f839 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIS_INT1_EXTI8_Pin LIS_INT2_EXTI9_Pin */
  GPIO_InitStruct.Pin = LIS_INT1_EXTI8_Pin|LIS_INT2_EXTI9_Pin;
 8002da2:	0021      	movs	r1, r4
 8002da4:	187b      	adds	r3, r7, r1
 8002da6:	22c0      	movs	r2, #192	; 0xc0
 8002da8:	0092      	lsls	r2, r2, #2
 8002daa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002dac:	187b      	adds	r3, r7, r1
 8002dae:	2288      	movs	r2, #136	; 0x88
 8002db0:	0352      	lsls	r2, r2, #13
 8002db2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db4:	187b      	adds	r3, r7, r1
 8002db6:	2200      	movs	r2, #0
 8002db8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dba:	187b      	adds	r3, r7, r1
 8002dbc:	4a0b      	ldr	r2, [pc, #44]	; (8002dec <MX_GPIO_Init+0x184>)
 8002dbe:	0019      	movs	r1, r3
 8002dc0:	0010      	movs	r0, r2
 8002dc2:	f001 f827 	bl	8003e14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	2101      	movs	r1, #1
 8002dca:	2007      	movs	r0, #7
 8002dcc:	f000 ffec 	bl	8003da8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002dd0:	2007      	movs	r0, #7
 8002dd2:	f000 fffe 	bl	8003dd2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	b00b      	add	sp, #44	; 0x2c
 8002ddc:	bd90      	pop	{r4, r7, pc}
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	40021000 	.word	0x40021000
 8002de4:	50000800 	.word	0x50000800
 8002de8:	00008860 	.word	0x00008860
 8002dec:	50000400 	.word	0x50000400

08002df0 <enqueue_payload>:

/* USER CODE BEGIN 4 */
bool enqueue_payload ( void )
{
 8002df0:	b590      	push	{r4, r7, lr}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af04      	add	r7, sp, #16
	astro_geo_wr_latitude = 0 ;
 8002df6:	4b48      	ldr	r3, [pc, #288]	; (8002f18 <enqueue_payload+0x128>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
	astro_geo_wr_longitude = 0 ;
 8002dfc:	4b47      	ldr	r3, [pc, #284]	; (8002f1c <enqueue_payload+0x12c>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]
	if ( my_lx6_get_coordinates ( my_lx6_gnss_active_time_ths , nmea_pdop_ths , &nmea_fixed_pdop_d , &astro_geo_wr_latitude , &astro_geo_wr_longitude ) )
 8002e02:	4b47      	ldr	r3, [pc, #284]	; (8002f20 <enqueue_payload+0x130>)
 8002e04:	8818      	ldrh	r0, [r3, #0]
 8002e06:	4b47      	ldr	r3, [pc, #284]	; (8002f24 <enqueue_payload+0x134>)
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	4943      	ldr	r1, [pc, #268]	; (8002f1c <enqueue_payload+0x12c>)
 8002e0e:	9102      	str	r1, [sp, #8]
 8002e10:	4941      	ldr	r1, [pc, #260]	; (8002f18 <enqueue_payload+0x128>)
 8002e12:	9101      	str	r1, [sp, #4]
 8002e14:	4944      	ldr	r1, [pc, #272]	; (8002f28 <enqueue_payload+0x138>)
 8002e16:	9100      	str	r1, [sp, #0]
 8002e18:	f007 f9a6 	bl	800a168 <my_lx6_get_coordinates>
 8002e1c:	1e03      	subs	r3, r0, #0
 8002e1e:	d100      	bne.n	8002e22 <enqueue_payload+0x32>
 8002e20:	e075      	b.n	8002f0e <enqueue_payload+0x11e>
	{
		my_astro_write_coordinates ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 8002e22:	4b3d      	ldr	r3, [pc, #244]	; (8002f18 <enqueue_payload+0x128>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	4b3d      	ldr	r3, [pc, #244]	; (8002f1c <enqueue_payload+0x12c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	0019      	movs	r1, r3
 8002e2c:	0010      	movs	r0, r2
 8002e2e:	f007 f8fd 	bl	800a02c <my_astro_write_coordinates>

		// Update ts of last fix
		my_rtc_get_dt ( &rtc_d , &rtc_t ) ;
 8002e32:	4a3e      	ldr	r2, [pc, #248]	; (8002f2c <enqueue_payload+0x13c>)
 8002e34:	4b3e      	ldr	r3, [pc, #248]	; (8002f30 <enqueue_payload+0x140>)
 8002e36:	0011      	movs	r1, r2
 8002e38:	0018      	movs	r0, r3
 8002e3a:	f007 fbd5 	bl	800a5e8 <my_rtc_get_dt>
		last_fix_ts = my_conv_rtc2timestamp ( &rtc_d , &rtc_t ) ;
 8002e3e:	4a3b      	ldr	r2, [pc, #236]	; (8002f2c <enqueue_payload+0x13c>)
 8002e40:	4b3b      	ldr	r3, [pc, #236]	; (8002f30 <enqueue_payload+0x140>)
 8002e42:	0011      	movs	r1, r2
 8002e44:	0018      	movs	r0, r3
 8002e46:	f007 fcf9 	bl	800a83c <my_conv_rtc2timestamp>
 8002e4a:	0002      	movs	r2, r0
 8002e4c:	4b39      	ldr	r3, [pc, #228]	; (8002f34 <enqueue_payload+0x144>)
 8002e4e:	601a      	str	r2, [r3, #0]

		dbg_buff[0] = 0 ;
 8002e50:	4b39      	ldr	r3, [pc, #228]	; (8002f38 <enqueue_payload+0x148>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	701a      	strb	r2, [r3, #0]
		sprintf ( dbg_buff , "Last fix timestap: %lu" , last_fix_ts ) ;
 8002e56:	4b37      	ldr	r3, [pc, #220]	; (8002f34 <enqueue_payload+0x144>)
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	4938      	ldr	r1, [pc, #224]	; (8002f3c <enqueue_payload+0x14c>)
 8002e5c:	4b36      	ldr	r3, [pc, #216]	; (8002f38 <enqueue_payload+0x148>)
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f009 fc66 	bl	800c730 <sprintf>
		send_debug_logs ( dbg_buff ) ;
 8002e64:	4b34      	ldr	r3, [pc, #208]	; (8002f38 <enqueue_payload+0x148>)
 8002e66:	0018      	movs	r0, r3
 8002e68:	f000 f926 	bl	80030b8 <send_debug_logs>

		my_rtc_get_time_s ( rtc_dt_s ) ;
 8002e6c:	4b34      	ldr	r3, [pc, #208]	; (8002f40 <enqueue_payload+0x150>)
 8002e6e:	0018      	movs	r0, r3
 8002e70:	f007 fbd2 	bl	800a618 <my_rtc_get_time_s>
		send_debug_logs ( rtc_dt_s ) ;
 8002e74:	4b32      	ldr	r3, [pc, #200]	; (8002f40 <enqueue_payload+0x150>)
 8002e76:	0018      	movs	r0, r3
 8002e78:	f000 f91e 	bl	80030b8 <send_debug_logs>

		if ( nmea_fixed_pdop_d < 100.0 )
 8002e7c:	4b2a      	ldr	r3, [pc, #168]	; (8002f28 <enqueue_payload+0x138>)
 8002e7e:	6818      	ldr	r0, [r3, #0]
 8002e80:	6859      	ldr	r1, [r3, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	4b2f      	ldr	r3, [pc, #188]	; (8002f44 <enqueue_payload+0x154>)
 8002e86:	f7fd fae5 	bl	8000454 <__aeabi_dcmplt>
 8002e8a:	1e03      	subs	r3, r0, #0
 8002e8c:	d00a      	beq.n	8002ea4 <enqueue_payload+0xb4>
		{
			snprintf ( nmea_fixed_pdop_s , NMEA_FIX_PDOP_STRING_BUFF_SIZE , "%.1f", nmea_fixed_pdop_d );
 8002e8e:	4b26      	ldr	r3, [pc, #152]	; (8002f28 <enqueue_payload+0x138>)
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	492c      	ldr	r1, [pc, #176]	; (8002f48 <enqueue_payload+0x158>)
 8002e96:	482d      	ldr	r0, [pc, #180]	; (8002f4c <enqueue_payload+0x15c>)
 8002e98:	9200      	str	r2, [sp, #0]
 8002e9a:	9301      	str	r3, [sp, #4]
 8002e9c:	000a      	movs	r2, r1
 8002e9e:	2105      	movs	r1, #5
 8002ea0:	f009 fc12 	bl	800c6c8 <snprintf>
		}

		agg_tim_gnss_seconds = agg_tim_gnss_seconds + tim_seconds  ;
 8002ea4:	4b2a      	ldr	r3, [pc, #168]	; (8002f50 <enqueue_payload+0x160>)
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	001a      	movs	r2, r3
 8002eaa:	4b2a      	ldr	r3, [pc, #168]	; (8002f54 <enqueue_payload+0x164>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	18d2      	adds	r2, r2, r3
 8002eb0:	4b28      	ldr	r3, [pc, #160]	; (8002f54 <enqueue_payload+0x164>)
 8002eb2:	601a      	str	r2, [r3, #0]

		sprintf ( payload , "%s,%d,%lu" , nmea_fixed_pdop_s , tim_seconds , agg_tim_gnss_seconds ) ;
 8002eb4:	4b26      	ldr	r3, [pc, #152]	; (8002f50 <enqueue_payload+0x160>)
 8002eb6:	881b      	ldrh	r3, [r3, #0]
 8002eb8:	001c      	movs	r4, r3
 8002eba:	4b26      	ldr	r3, [pc, #152]	; (8002f54 <enqueue_payload+0x164>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a23      	ldr	r2, [pc, #140]	; (8002f4c <enqueue_payload+0x15c>)
 8002ec0:	4925      	ldr	r1, [pc, #148]	; (8002f58 <enqueue_payload+0x168>)
 8002ec2:	4826      	ldr	r0, [pc, #152]	; (8002f5c <enqueue_payload+0x16c>)
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	0023      	movs	r3, r4
 8002ec8:	f009 fc32 	bl	800c730 <sprintf>
		sprintf ( astro_payload_log , "Astronode payload: %s" , payload ) ;
 8002ecc:	4a23      	ldr	r2, [pc, #140]	; (8002f5c <enqueue_payload+0x16c>)
 8002ece:	4924      	ldr	r1, [pc, #144]	; (8002f60 <enqueue_payload+0x170>)
 8002ed0:	4b24      	ldr	r3, [pc, #144]	; (8002f64 <enqueue_payload+0x174>)
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f009 fc2c 	bl	800c730 <sprintf>
		send_debug_logs ( astro_payload_log ) ;
 8002ed8:	4b22      	ldr	r3, [pc, #136]	; (8002f64 <enqueue_payload+0x174>)
 8002eda:	0018      	movs	r0, r3
 8002edc:	f000 f8ec 	bl	80030b8 <send_debug_logs>
		// astronode_send_pld_fr () ; // Don't clear entire payload queue because it's worth having a travel history, even if sent with delay.
		my_astro_add_payload_2_queue ( astro_payload_id_counter++ , payload ) ;
 8002ee0:	4b21      	ldr	r3, [pc, #132]	; (8002f68 <enqueue_payload+0x178>)
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	b291      	uxth	r1, r2
 8002ee8:	4a1f      	ldr	r2, [pc, #124]	; (8002f68 <enqueue_payload+0x178>)
 8002eea:	8011      	strh	r1, [r2, #0]
 8002eec:	4a1b      	ldr	r2, [pc, #108]	; (8002f5c <enqueue_payload+0x16c>)
 8002eee:	0011      	movs	r1, r2
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f007 f833 	bl	8009f5c <my_astro_add_payload_2_queue>
		if ( astro_payload_id_counter == 0 ) // Avoid id = 0 to avoid collision with control test payload that is always 0
 8002ef6:	4b1c      	ldr	r3, [pc, #112]	; (8002f68 <enqueue_payload+0x178>)
 8002ef8:	881b      	ldrh	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d105      	bne.n	8002f0a <enqueue_payload+0x11a>
		{
			astro_payload_id_counter++ ;
 8002efe:	4b1a      	ldr	r3, [pc, #104]	; (8002f68 <enqueue_payload+0x178>)
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	3301      	adds	r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	4b18      	ldr	r3, [pc, #96]	; (8002f68 <enqueue_payload+0x178>)
 8002f08:	801a      	strh	r2, [r3, #0]
		}
		return true ;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <enqueue_payload+0x120>
	}

	return false ;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	0018      	movs	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	b001      	add	sp, #4
 8002f16:	bd90      	pop	{r4, r7, pc}
 8002f18:	20000a10 	.word	0x20000a10
 8002f1c:	20000a14 	.word	0x20000a14
 8002f20:	20000010 	.word	0x20000010
 8002f24:	20000008 	.word	0x20000008
 8002f28:	20000018 	.word	0x20000018
 8002f2c:	20000b98 	.word	0x20000b98
 8002f30:	20000bac 	.word	0x20000bac
 8002f34:	20000a20 	.word	0x20000a20
 8002f38:	20000994 	.word	0x20000994
 8002f3c:	08013514 	.word	0x08013514
 8002f40:	200009f8 	.word	0x200009f8
 8002f44:	40590000 	.word	0x40590000
 8002f48:	0801352c 	.word	0x0801352c
 8002f4c:	20000a18 	.word	0x20000a18
 8002f50:	20000a24 	.word	0x20000a24
 8002f54:	20000a28 	.word	0x20000a28
 8002f58:	08013534 	.word	0x08013534
 8002f5c:	20000a30 	.word	0x20000a30
 8002f60:	08013540 	.word	0x08013540
 8002f64:	20000ad0 	.word	0x20000ad0
 8002f68:	20000020 	.word	0x20000020

08002f6c <enqueue_hello_payload>:

bool enqueue_hello_payload ( void )
{
 8002f6c:	b5b0      	push	{r4, r5, r7, lr}
 8002f6e:	b088      	sub	sp, #32
 8002f70:	af04      	add	r7, sp, #16
	bool r = false ;
 8002f72:	230f      	movs	r3, #15
 8002f74:	18fb      	adds	r3, r7, r3
 8002f76:	2200      	movs	r2, #0
 8002f78:	701a      	strb	r2, [r3, #0]
	char* fv = "FIRMWARE_RELEASE_YEAR" ;
 8002f7a:	4b3d      	ldr	r3, [pc, #244]	; (8003070 <enqueue_hello_payload+0x104>)
 8002f7c:	60bb      	str	r3, [r7, #8]

	int32_t astro_geo_wr_latitude = 0 , astro_geo_wr_longitude = 0 ;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	607b      	str	r3, [r7, #4]
 8002f82:	2300      	movs	r3, #0
 8002f84:	603b      	str	r3, [r7, #0]

	if ( my_lx6_get_coordinates ( my_lx6_gnss_active_time_ths , nmea_pdop_ths , &nmea_fixed_pdop_d , &astro_geo_wr_latitude , &astro_geo_wr_longitude ) )
 8002f86:	4b3b      	ldr	r3, [pc, #236]	; (8003074 <enqueue_hello_payload+0x108>)
 8002f88:	8818      	ldrh	r0, [r3, #0]
 8002f8a:	4b3b      	ldr	r3, [pc, #236]	; (8003078 <enqueue_hello_payload+0x10c>)
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	0039      	movs	r1, r7
 8002f92:	9102      	str	r1, [sp, #8]
 8002f94:	1d39      	adds	r1, r7, #4
 8002f96:	9101      	str	r1, [sp, #4]
 8002f98:	4938      	ldr	r1, [pc, #224]	; (800307c <enqueue_hello_payload+0x110>)
 8002f9a:	9100      	str	r1, [sp, #0]
 8002f9c:	f007 f8e4 	bl	800a168 <my_lx6_get_coordinates>
 8002fa0:	1e03      	subs	r3, r0, #0
 8002fa2:	d05d      	beq.n	8003060 <enqueue_hello_payload+0xf4>
	{
		my_astro_write_coordinates ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	0011      	movs	r1, r2
 8002faa:	0018      	movs	r0, r3
 8002fac:	f007 f83e 	bl	800a02c <my_astro_write_coordinates>

		// Update ts of last fix
		my_rtc_get_dt ( &rtc_d , &rtc_t ) ;
 8002fb0:	4a33      	ldr	r2, [pc, #204]	; (8003080 <enqueue_hello_payload+0x114>)
 8002fb2:	4b34      	ldr	r3, [pc, #208]	; (8003084 <enqueue_hello_payload+0x118>)
 8002fb4:	0011      	movs	r1, r2
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f007 fb16 	bl	800a5e8 <my_rtc_get_dt>
		last_fix_ts = my_conv_rtc2timestamp ( &rtc_d , &rtc_t ) ;
 8002fbc:	4a30      	ldr	r2, [pc, #192]	; (8003080 <enqueue_hello_payload+0x114>)
 8002fbe:	4b31      	ldr	r3, [pc, #196]	; (8003084 <enqueue_hello_payload+0x118>)
 8002fc0:	0011      	movs	r1, r2
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f007 fc3a 	bl	800a83c <my_conv_rtc2timestamp>
 8002fc8:	0002      	movs	r2, r0
 8002fca:	4b2f      	ldr	r3, [pc, #188]	; (8003088 <enqueue_hello_payload+0x11c>)
 8002fcc:	601a      	str	r2, [r3, #0]

		dbg_buff[0] = 0 ;
 8002fce:	4b2f      	ldr	r3, [pc, #188]	; (800308c <enqueue_hello_payload+0x120>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	701a      	strb	r2, [r3, #0]
		sprintf ( dbg_buff , "Hello payload and first fix timestap: %lu" , last_fix_ts ) ;
 8002fd4:	4b2c      	ldr	r3, [pc, #176]	; (8003088 <enqueue_hello_payload+0x11c>)
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	492d      	ldr	r1, [pc, #180]	; (8003090 <enqueue_hello_payload+0x124>)
 8002fda:	4b2c      	ldr	r3, [pc, #176]	; (800308c <enqueue_hello_payload+0x120>)
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f009 fba7 	bl	800c730 <sprintf>
		send_debug_logs ( dbg_buff ) ;
 8002fe2:	4b2a      	ldr	r3, [pc, #168]	; (800308c <enqueue_hello_payload+0x120>)
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f000 f867 	bl	80030b8 <send_debug_logs>

		my_rtc_get_time_s ( rtc_dt_s ) ;
 8002fea:	4b2a      	ldr	r3, [pc, #168]	; (8003094 <enqueue_hello_payload+0x128>)
 8002fec:	0018      	movs	r0, r3
 8002fee:	f007 fb13 	bl	800a618 <my_rtc_get_time_s>
		send_debug_logs ( rtc_dt_s ) ;
 8002ff2:	4b28      	ldr	r3, [pc, #160]	; (8003094 <enqueue_hello_payload+0x128>)
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	f000 f85f 	bl	80030b8 <send_debug_logs>

		snprintf ( nmea_fixed_pdop_s , NMEA_FIX_PDOP_STRING_BUFF_SIZE , "%.1f", nmea_fixed_pdop_d );
 8002ffa:	4b20      	ldr	r3, [pc, #128]	; (800307c <enqueue_hello_payload+0x110>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	4925      	ldr	r1, [pc, #148]	; (8003098 <enqueue_hello_payload+0x12c>)
 8003002:	4826      	ldr	r0, [pc, #152]	; (800309c <enqueue_hello_payload+0x130>)
 8003004:	9200      	str	r2, [sp, #0]
 8003006:	9301      	str	r3, [sp, #4]
 8003008:	000a      	movs	r2, r1
 800300a:	2105      	movs	r1, #5
 800300c:	f009 fb5c 	bl	800c6c8 <snprintf>

		agg_tim_gnss_seconds = agg_tim_gnss_seconds + tim_seconds  ;
 8003010:	4b23      	ldr	r3, [pc, #140]	; (80030a0 <enqueue_hello_payload+0x134>)
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	001a      	movs	r2, r3
 8003016:	4b23      	ldr	r3, [pc, #140]	; (80030a4 <enqueue_hello_payload+0x138>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	18d2      	adds	r2, r2, r3
 800301c:	4b21      	ldr	r3, [pc, #132]	; (80030a4 <enqueue_hello_payload+0x138>)
 800301e:	601a      	str	r2, [r3, #0]

		sprintf ( payload , "%s,%d,%lu;%s" , nmea_fixed_pdop_s , tim_seconds , agg_tim_gnss_seconds , fv ) ;
 8003020:	4b1f      	ldr	r3, [pc, #124]	; (80030a0 <enqueue_hello_payload+0x134>)
 8003022:	881b      	ldrh	r3, [r3, #0]
 8003024:	001d      	movs	r5, r3
 8003026:	4b1f      	ldr	r3, [pc, #124]	; (80030a4 <enqueue_hello_payload+0x138>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4c1c      	ldr	r4, [pc, #112]	; (800309c <enqueue_hello_payload+0x130>)
 800302c:	491e      	ldr	r1, [pc, #120]	; (80030a8 <enqueue_hello_payload+0x13c>)
 800302e:	481f      	ldr	r0, [pc, #124]	; (80030ac <enqueue_hello_payload+0x140>)
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	9201      	str	r2, [sp, #4]
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	002b      	movs	r3, r5
 8003038:	0022      	movs	r2, r4
 800303a:	f009 fb79 	bl	800c730 <sprintf>
		sprintf ( astro_payload_log , "Astronode payload: %s" , payload ) ;
 800303e:	4a1b      	ldr	r2, [pc, #108]	; (80030ac <enqueue_hello_payload+0x140>)
 8003040:	491b      	ldr	r1, [pc, #108]	; (80030b0 <enqueue_hello_payload+0x144>)
 8003042:	4b1c      	ldr	r3, [pc, #112]	; (80030b4 <enqueue_hello_payload+0x148>)
 8003044:	0018      	movs	r0, r3
 8003046:	f009 fb73 	bl	800c730 <sprintf>
		send_debug_logs ( astro_payload_log ) ;
 800304a:	4b1a      	ldr	r3, [pc, #104]	; (80030b4 <enqueue_hello_payload+0x148>)
 800304c:	0018      	movs	r0, r3
 800304e:	f000 f833 	bl	80030b8 <send_debug_logs>
		// astronode_send_pld_fr () ; // Don't clear entire payload queue because it's worth having a travel history, even if sent with delay.
		my_astro_add_payload_2_queue ( 0 , payload ) ;
 8003052:	4b16      	ldr	r3, [pc, #88]	; (80030ac <enqueue_hello_payload+0x140>)
 8003054:	0019      	movs	r1, r3
 8003056:	2000      	movs	r0, #0
 8003058:	f006 ff80 	bl	8009f5c <my_astro_add_payload_2_queue>

		return true ;
 800305c:	2301      	movs	r3, #1
 800305e:	e002      	b.n	8003066 <enqueue_hello_payload+0xfa>
	}

	return r ;
 8003060:	230f      	movs	r3, #15
 8003062:	18fb      	adds	r3, r7, r3
 8003064:	781b      	ldrb	r3, [r3, #0]
}
 8003066:	0018      	movs	r0, r3
 8003068:	46bd      	mov	sp, r7
 800306a:	b004      	add	sp, #16
 800306c:	bdb0      	pop	{r4, r5, r7, pc}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	08013558 	.word	0x08013558
 8003074:	20000010 	.word	0x20000010
 8003078:	20000008 	.word	0x20000008
 800307c:	20000018 	.word	0x20000018
 8003080:	20000b98 	.word	0x20000b98
 8003084:	20000bac 	.word	0x20000bac
 8003088:	20000a20 	.word	0x20000a20
 800308c:	20000994 	.word	0x20000994
 8003090:	08013570 	.word	0x08013570
 8003094:	200009f8 	.word	0x200009f8
 8003098:	0801352c 	.word	0x0801352c
 800309c:	20000a18 	.word	0x20000a18
 80030a0:	20000a24 	.word	0x20000a24
 80030a4:	20000a28 	.word	0x20000a28
 80030a8:	0801359c 	.word	0x0801359c
 80030ac:	20000a30 	.word	0x20000a30
 80030b0:	08013540 	.word	0x08013540
 80030b4:	20000ad0 	.word	0x20000ad0

080030b8 <send_debug_logs>:

void send_debug_logs ( char* p_tx_buffer )
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	0018      	movs	r0, r3
 80030c4:	f7fd f81e 	bl	8000104 <strlen>
 80030c8:	0003      	movs	r3, r0
 80030ca:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2bfa      	cmp	r3, #250	; 0xfa
 80030d0:	d908      	bls.n	80030e4 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 80030d2:	23fa      	movs	r3, #250	; 0xfa
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	490d      	ldr	r1, [pc, #52]	; (800310c <send_debug_logs+0x54>)
 80030d8:	480d      	ldr	r0, [pc, #52]	; (8003110 <send_debug_logs+0x58>)
 80030da:	222a      	movs	r2, #42	; 0x2a
 80030dc:	f004 f816 	bl	800710c <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 80030e0:	23fa      	movs	r3, #250	; 0xfa
 80030e2:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	23fa      	movs	r3, #250	; 0xfa
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	4808      	ldr	r0, [pc, #32]	; (8003110 <send_debug_logs+0x58>)
 80030f0:	f004 f80c 	bl	800710c <HAL_UART_Transmit>
    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 80030f4:	23fa      	movs	r3, #250	; 0xfa
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4906      	ldr	r1, [pc, #24]	; (8003114 <send_debug_logs+0x5c>)
 80030fa:	4805      	ldr	r0, [pc, #20]	; (8003110 <send_debug_logs+0x58>)
 80030fc:	2201      	movs	r2, #1
 80030fe:	f004 f805 	bl	800710c <HAL_UART_Transmit>
}
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	46bd      	mov	sp, r7
 8003106:	b004      	add	sp, #16
 8003108:	bd80      	pop	{r7, pc}
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	080135ac 	.word	0x080135ac
 8003110:	2000086c 	.word	0x2000086c
 8003114:	080135d8 	.word	0x080135d8

08003118 <reset_astronode>:
void reset_astronode ( void )
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 800311c:	2380      	movs	r3, #128	; 0x80
 800311e:	0119      	lsls	r1, r3, #4
 8003120:	23a0      	movs	r3, #160	; 0xa0
 8003122:	05db      	lsls	r3, r3, #23
 8003124:	2201      	movs	r2, #1
 8003126:	0018      	movs	r0, r3
 8003128:	f001 f8c5 	bl	80042b6 <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 800312c:	2001      	movs	r0, #1
 800312e:	f000 fd3d 	bl	8003bac <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 8003132:	2380      	movs	r3, #128	; 0x80
 8003134:	0119      	lsls	r1, r3, #4
 8003136:	23a0      	movs	r3, #160	; 0xa0
 8003138:	05db      	lsls	r3, r3, #23
 800313a:	2200      	movs	r2, #0
 800313c:	0018      	movs	r0, r3
 800313e:	f001 f8ba 	bl	80042b6 <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 8003142:	20fa      	movs	r0, #250	; 0xfa
 8003144:	f000 fd32 	bl	8003bac <HAL_Delay>
}
 8003148:	46c0      	nop			; (mov r8, r8)
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
	...

08003150 <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 800315a:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <send_astronode_request+0x34>)
 800315c:	0018      	movs	r0, r3
 800315e:	f7ff ffab 	bl	80030b8 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	0018      	movs	r0, r3
 8003166:	f7ff ffa7 	bl	80030b8 <send_debug_logs>

    HAL_UART_Transmit ( HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	b29a      	uxth	r2, r3
 800316e:	23fa      	movs	r3, #250	; 0xfa
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4804      	ldr	r0, [pc, #16]	; (8003188 <send_astronode_request+0x38>)
 8003176:	f003 ffc9 	bl	800710c <HAL_UART_Transmit>
}
 800317a:	46c0      	nop			; (mov r8, r8)
 800317c:	46bd      	mov	sp, r7
 800317e:	b002      	add	sp, #8
 8003180:	bd80      	pop	{r7, pc}
 8003182:	46c0      	nop			; (mov r8, r8)
 8003184:	080135dc 	.word	0x080135dc
 8003188:	200007d8 	.word	0x200007d8

0800318c <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	4806      	ldr	r0, [pc, #24]	; (80031b0 <is_astronode_character_received+0x24>)
 8003198:	2364      	movs	r3, #100	; 0x64
 800319a:	2201      	movs	r2, #1
 800319c:	f004 f852 	bl	8007244 <HAL_UART_Receive>
 80031a0:	0003      	movs	r3, r0
 80031a2:	425a      	negs	r2, r3
 80031a4:	4153      	adcs	r3, r2
 80031a6:	b2db      	uxtb	r3, r3
}
 80031a8:	0018      	movs	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b002      	add	sp, #8
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	200007d8 	.word	0x200007d8

080031b4 <is_evt_pin_high>:
bool is_evt_pin_high ( void )
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
	return ( HAL_GPIO_ReadPin ( GPIOA , ASTRO_EVT_Pin ) == GPIO_PIN_SET ? true : false);
 80031b8:	2380      	movs	r3, #128	; 0x80
 80031ba:	015a      	lsls	r2, r3, #5
 80031bc:	23a0      	movs	r3, #160	; 0xa0
 80031be:	05db      	lsls	r3, r3, #23
 80031c0:	0011      	movs	r1, r2
 80031c2:	0018      	movs	r0, r3
 80031c4:	f001 f85a 	bl	800427c <HAL_GPIO_ReadPin>
 80031c8:	0003      	movs	r3, r0
 80031ca:	3b01      	subs	r3, #1
 80031cc:	425a      	negs	r2, r3
 80031ce:	4153      	adcs	r3, r2
 80031d0:	b2db      	uxtb	r3, r3
}
 80031d2:	0018      	movs	r0, r3
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <get_systick>:

uint32_t get_systick ( void )
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 80031dc:	f000 fcdc 	bl	8003b98 <HAL_GetTick>
 80031e0:	0003      	movs	r3, r0
}
 80031e2:	0018      	movs	r0, r3
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	000a      	movs	r2, r1
 80031f2:	1cbb      	adds	r3, r7, #2
 80031f4:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 80031f6:	f7ff ffef 	bl	80031d8 <get_systick>
 80031fa:	0002      	movs	r2, r0
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	1cba      	adds	r2, r7, #2
 8003202:	8812      	ldrh	r2, [r2, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	419b      	sbcs	r3, r3
 8003208:	425b      	negs	r3, r3
 800320a:	b2db      	uxtb	r3, r3
}
 800320c:	0018      	movs	r0, r3
 800320e:	46bd      	mov	sp, r7
 8003210:	b002      	add	sp, #8
 8003212:	bd80      	pop	{r7, pc}

08003214 <my_lx6_on>:
void my_ldg_off ( void )
{
	HAL_GPIO_WritePin ( GPIOA , LDG_Pin , GPIO_PIN_RESET ) ;
}
void my_lx6_on ( void )
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOC , L86_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8003218:	2380      	movs	r3, #128	; 0x80
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	4808      	ldr	r0, [pc, #32]	; (8003240 <my_lx6_on+0x2c>)
 800321e:	2201      	movs	r2, #1
 8003220:	0019      	movs	r1, r3
 8003222:	f001 f848 	bl	80042b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_SET ) ;
 8003226:	2380      	movs	r3, #128	; 0x80
 8003228:	015b      	lsls	r3, r3, #5
 800322a:	4805      	ldr	r0, [pc, #20]	; (8003240 <my_lx6_on+0x2c>)
 800322c:	2201      	movs	r2, #1
 800322e:	0019      	movs	r1, r3
 8003230:	f001 f841 	bl	80042b6 <HAL_GPIO_WritePin>
	MX_USART3_UART_Init () ;
 8003234:	f7ff fce4 	bl	8002c00 <MX_USART3_UART_Init>
}
 8003238:	46c0      	nop			; (mov r8, r8)
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	50000800 	.word	0x50000800

08003244 <my_lx6_off>:
void my_lx6_off ( void )
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOC , L86_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 8003248:	2380      	movs	r3, #128	; 0x80
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	4809      	ldr	r0, [pc, #36]	; (8003274 <my_lx6_off+0x30>)
 800324e:	2200      	movs	r2, #0
 8003250:	0019      	movs	r1, r3
 8003252:	f001 f830 	bl	80042b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_RESET ) ;
 8003256:	2380      	movs	r3, #128	; 0x80
 8003258:	015b      	lsls	r3, r3, #5
 800325a:	4806      	ldr	r0, [pc, #24]	; (8003274 <my_lx6_off+0x30>)
 800325c:	2200      	movs	r2, #0
 800325e:	0019      	movs	r1, r3
 8003260:	f001 f829 	bl	80042b6 <HAL_GPIO_WritePin>
	HAL_UART_DeInit ( HUART_Lx6 ) ;
 8003264:	4b04      	ldr	r3, [pc, #16]	; (8003278 <my_lx6_off+0x34>)
 8003266:	0018      	movs	r0, r3
 8003268:	f003 ff10 	bl	800708c <HAL_UART_DeInit>
}
 800326c:	46c0      	nop			; (mov r8, r8)
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	50000800 	.word	0x50000800
 8003278:	20000900 	.word	0x20000900

0800327c <my_lis2dw12_platform_write>:
int32_t my_lis2dw12_platform_write ( void *handle , uint8_t reg , const uint8_t *bufp , uint16_t len )
{
 800327c:	b5b0      	push	{r4, r5, r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	0008      	movs	r0, r1
 8003286:	607a      	str	r2, [r7, #4]
 8003288:	0019      	movs	r1, r3
 800328a:	240b      	movs	r4, #11
 800328c:	193b      	adds	r3, r7, r4
 800328e:	1c02      	adds	r2, r0, #0
 8003290:	701a      	strb	r2, [r3, #0]
 8003292:	2508      	movs	r5, #8
 8003294:	197b      	adds	r3, r7, r5
 8003296:	1c0a      	adds	r2, r1, #0
 8003298:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin	( LIS_SPI1_CS_GPIO_Port , LIS_SPI1_CS_Pin , GPIO_PIN_RESET ) ;
 800329a:	2380      	movs	r3, #128	; 0x80
 800329c:	01db      	lsls	r3, r3, #7
 800329e:	4812      	ldr	r0, [pc, #72]	; (80032e8 <my_lis2dw12_platform_write+0x6c>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	0019      	movs	r1, r3
 80032a4:	f001 f807 	bl	80042b6 <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 80032a8:	2014      	movs	r0, #20
 80032aa:	f000 fc7f 	bl	8003bac <HAL_Delay>
	HAL_SPI_Transmit	( handle , &reg , 1 , 1000 ) ;
 80032ae:	23fa      	movs	r3, #250	; 0xfa
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	1939      	adds	r1, r7, r4
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f002 fd0e 	bl	8005cd8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit	( handle , (uint8_t*) bufp , len , 1000 ) ;
 80032bc:	23fa      	movs	r3, #250	; 0xfa
 80032be:	009c      	lsls	r4, r3, #2
 80032c0:	197b      	adds	r3, r7, r5
 80032c2:	881a      	ldrh	r2, [r3, #0]
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	0023      	movs	r3, r4
 80032ca:	f002 fd05 	bl	8005cd8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin	( LIS_SPI1_CS_GPIO_Port , LIS_SPI1_CS_Pin , GPIO_PIN_SET) ;
 80032ce:	2380      	movs	r3, #128	; 0x80
 80032d0:	01db      	lsls	r3, r3, #7
 80032d2:	4805      	ldr	r0, [pc, #20]	; (80032e8 <my_lis2dw12_platform_write+0x6c>)
 80032d4:	2201      	movs	r2, #1
 80032d6:	0019      	movs	r1, r3
 80032d8:	f000 ffed 	bl	80042b6 <HAL_GPIO_WritePin>

	return 0;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	0018      	movs	r0, r3
 80032e0:	46bd      	mov	sp, r7
 80032e2:	b004      	add	sp, #16
 80032e4:	bdb0      	pop	{r4, r5, r7, pc}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	50000400 	.word	0x50000400

080032ec <my_lis2dw12_platform_read>:
int32_t my_lis2dw12_platform_read ( void *handle , uint8_t reg , uint8_t *bufp , uint16_t len )
{
 80032ec:	b5b0      	push	{r4, r5, r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	0008      	movs	r0, r1
 80032f6:	607a      	str	r2, [r7, #4]
 80032f8:	0019      	movs	r1, r3
 80032fa:	240b      	movs	r4, #11
 80032fc:	193b      	adds	r3, r7, r4
 80032fe:	1c02      	adds	r2, r0, #0
 8003300:	701a      	strb	r2, [r3, #0]
 8003302:	2508      	movs	r5, #8
 8003304:	197b      	adds	r3, r7, r5
 8003306:	1c0a      	adds	r2, r1, #0
 8003308:	801a      	strh	r2, [r3, #0]
	reg |= 0x80;
 800330a:	193b      	adds	r3, r7, r4
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2280      	movs	r2, #128	; 0x80
 8003310:	4252      	negs	r2, r2
 8003312:	4313      	orrs	r3, r2
 8003314:	b2da      	uxtb	r2, r3
 8003316:	193b      	adds	r3, r7, r4
 8003318:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin ( LIS_SPI1_CS_GPIO_Port , LIS_SPI1_CS_Pin , GPIO_PIN_RESET) ;
 800331a:	2380      	movs	r3, #128	; 0x80
 800331c:	01db      	lsls	r3, r3, #7
 800331e:	4812      	ldr	r0, [pc, #72]	; (8003368 <my_lis2dw12_platform_read+0x7c>)
 8003320:	2200      	movs	r2, #0
 8003322:	0019      	movs	r1, r3
 8003324:	f000 ffc7 	bl	80042b6 <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 8003328:	2014      	movs	r0, #20
 800332a:	f000 fc3f 	bl	8003bac <HAL_Delay>
	HAL_SPI_Transmit ( handle , &reg , 1 , 1000 ) ;
 800332e:	23fa      	movs	r3, #250	; 0xfa
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	1939      	adds	r1, r7, r4
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	2201      	movs	r2, #1
 8003338:	f002 fcce 	bl	8005cd8 <HAL_SPI_Transmit>
	HAL_SPI_Receive ( handle , bufp , len , 1000 ) ;
 800333c:	23fa      	movs	r3, #250	; 0xfa
 800333e:	009c      	lsls	r4, r3, #2
 8003340:	197b      	adds	r3, r7, r5
 8003342:	881a      	ldrh	r2, [r3, #0]
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	0023      	movs	r3, r4
 800334a:	f002 fe1d 	bl	8005f88 <HAL_SPI_Receive>
	HAL_GPIO_WritePin ( LIS_SPI1_CS_GPIO_Port , LIS_SPI1_CS_Pin , GPIO_PIN_SET) ;
 800334e:	2380      	movs	r3, #128	; 0x80
 8003350:	01db      	lsls	r3, r3, #7
 8003352:	4805      	ldr	r0, [pc, #20]	; (8003368 <my_lis2dw12_platform_read+0x7c>)
 8003354:	2201      	movs	r2, #1
 8003356:	0019      	movs	r1, r3
 8003358:	f000 ffad 	bl	80042b6 <HAL_GPIO_WritePin>

	return 0;
 800335c:	2300      	movs	r3, #0
}
 800335e:	0018      	movs	r0, r3
 8003360:	46bd      	mov	sp, r7
 8003362:	b004      	add	sp, #16
 8003364:	bdb0      	pop	{r4, r5, r7, pc}
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	50000400 	.word	0x50000400

0800336c <is_system_initialized>:
bool is_system_initialized ( void )
{
 800336c:	b590      	push	{r4, r7, lr}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
	uint16_t yyyy ;

	uint32_t commn_ts = astronode_send_rtc_rr () ;
 8003372:	f005 fae7 	bl	8008944 <astronode_send_rtc_rr>
 8003376:	0003      	movs	r3, r0
 8003378:	607b      	str	r3, [r7, #4]

	yyyy = my_rtc_get_time_s ( rtc_dt_s ) ;
 800337a:	1cbc      	adds	r4, r7, #2
 800337c:	4b0c      	ldr	r3, [pc, #48]	; (80033b0 <is_system_initialized+0x44>)
 800337e:	0018      	movs	r0, r3
 8003380:	f007 f94a 	bl	800a618 <my_rtc_get_time_s>
 8003384:	0003      	movs	r3, r0
 8003386:	8023      	strh	r3, [r4, #0]
	send_debug_logs ( rtc_dt_s ) ;
 8003388:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <is_system_initialized+0x44>)
 800338a:	0018      	movs	r0, r3
 800338c:	f7ff fe94 	bl	80030b8 <send_debug_logs>
	if ( yyyy >= FIRMWARE_RELEASE_YEAR || commn_ts != 0 )
 8003390:	1cbb      	adds	r3, r7, #2
 8003392:	881b      	ldrh	r3, [r3, #0]
 8003394:	4a07      	ldr	r2, [pc, #28]	; (80033b4 <is_system_initialized+0x48>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d802      	bhi.n	80033a0 <is_system_initialized+0x34>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <is_system_initialized+0x38>
	{
		return true ;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e000      	b.n	80033a6 <is_system_initialized+0x3a>
	}
	return false ;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	0018      	movs	r0, r3
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b003      	add	sp, #12
 80033ac:	bd90      	pop	{r4, r7, pc}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	200009f8 	.word	0x200009f8
 80033b4:	000007e6 	.word	0x000007e6

080033b8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a0a      	ldr	r2, [pc, #40]	; (80033f0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d10d      	bne.n	80033e6 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		tim_seconds++ ;
 80033ca:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	3301      	adds	r3, #1
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	4b08      	ldr	r3, [pc, #32]	; (80033f4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80033d4:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > TIM_SECONDS_THS_SYSTEM_RESET )
 80033d6:	4b07      	ldr	r3, [pc, #28]	; (80033f4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80033d8:	881a      	ldrh	r2, [r3, #0]
 80033da:	23e1      	movs	r3, #225	; 0xe1
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	429a      	cmp	r2, r3
 80033e0:	d901      	bls.n	80033e6 <HAL_TIM_PeriodElapsedCallback+0x2e>
		  {
			  HAL_NVIC_SystemReset () ;
 80033e2:	f000 fd06 	bl	8003df2 <HAL_NVIC_SystemReset>
		  }
	}
}
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	46bd      	mov	sp, r7
 80033ea:	b002      	add	sp, #8
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	40001000 	.word	0x40001000
 80033f4:	20000a24 	.word	0x20000a24

080033f8 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback ( uint16_t GPIO_Pin )
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	0002      	movs	r2, r0
 8003400:	1dbb      	adds	r3, r7, #6
 8003402:	801a      	strh	r2, [r3, #0]
	if ( GPIO_Pin == 0x100 ) // LIS_INT1_EXTI8_Pin = 0x100
 8003404:	1dbb      	adds	r3, r7, #6
 8003406:	881a      	ldrh	r2, [r3, #0]
 8003408:	2380      	movs	r3, #128	; 0x80
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	429a      	cmp	r2, r3
 800340e:	d102      	bne.n	8003416 <HAL_GPIO_EXTI_Rising_Callback+0x1e>
	{
		is_acc_int1_wkup_flag = true ;
 8003410:	4b07      	ldr	r3, [pc, #28]	; (8003430 <HAL_GPIO_EXTI_Rising_Callback+0x38>)
 8003412:	2201      	movs	r2, #1
 8003414:	701a      	strb	r2, [r3, #0]
		sprintf ( dbg_buff , "INT on GPIO_Pin %04x detected!\n" , GPIO_Pin ) ;
		send_debug_logs ( dbg_buff ) ;
		*/
	}
	//zamiast poniższego może lepiej wrócić do pierwotnego przeglądania GPIO w trybie input bez przerwania
	if ( GPIO_Pin == 0x1000 ) // ASTRO_EVT_Pin = 0x1000
 8003416:	1dbb      	adds	r3, r7, #6
 8003418:	881a      	ldrh	r2, [r3, #0]
 800341a:	2380      	movs	r3, #128	; 0x80
 800341c:	015b      	lsls	r3, r3, #5
 800341e:	429a      	cmp	r2, r3
 8003420:	d102      	bne.n	8003428 <HAL_GPIO_EXTI_Rising_Callback+0x30>
	{
		is_astro_evt_flag = true ;
 8003422:	4b04      	ldr	r3, [pc, #16]	; (8003434 <HAL_GPIO_EXTI_Rising_Callback+0x3c>)
 8003424:	2201      	movs	r2, #1
 8003426:	701a      	strb	r2, [r3, #0]
	}
}
 8003428:	46c0      	nop			; (mov r8, r8)
 800342a:	46bd      	mov	sp, r7
 800342c:	b002      	add	sp, #8
 800342e:	bd80      	pop	{r7, pc}
 8003430:	20000bb0 	.word	0x20000bb0
 8003434:	20000bb1 	.word	0x20000bb1

08003438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800343c:	b672      	cpsid	i
}
 800343e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003440:	e7fe      	b.n	8003440 <Error_Handler+0x8>
	...

08003444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800344a:	4b0f      	ldr	r3, [pc, #60]	; (8003488 <HAL_MspInit+0x44>)
 800344c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800344e:	4b0e      	ldr	r3, [pc, #56]	; (8003488 <HAL_MspInit+0x44>)
 8003450:	2101      	movs	r1, #1
 8003452:	430a      	orrs	r2, r1
 8003454:	641a      	str	r2, [r3, #64]	; 0x40
 8003456:	4b0c      	ldr	r3, [pc, #48]	; (8003488 <HAL_MspInit+0x44>)
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	2201      	movs	r2, #1
 800345c:	4013      	ands	r3, r2
 800345e:	607b      	str	r3, [r7, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003462:	4b09      	ldr	r3, [pc, #36]	; (8003488 <HAL_MspInit+0x44>)
 8003464:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003466:	4b08      	ldr	r3, [pc, #32]	; (8003488 <HAL_MspInit+0x44>)
 8003468:	2180      	movs	r1, #128	; 0x80
 800346a:	0549      	lsls	r1, r1, #21
 800346c:	430a      	orrs	r2, r1
 800346e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003470:	4b05      	ldr	r3, [pc, #20]	; (8003488 <HAL_MspInit+0x44>)
 8003472:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003474:	2380      	movs	r3, #128	; 0x80
 8003476:	055b      	lsls	r3, r3, #21
 8003478:	4013      	ands	r3, r2
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	46bd      	mov	sp, r7
 8003482:	b002      	add	sp, #8
 8003484:	bd80      	pop	{r7, pc}
 8003486:	46c0      	nop			; (mov r8, r8)
 8003488:	40021000 	.word	0x40021000

0800348c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800348c:	b590      	push	{r4, r7, lr}
 800348e:	b091      	sub	sp, #68	; 0x44
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003494:	240c      	movs	r4, #12
 8003496:	193b      	adds	r3, r7, r4
 8003498:	0018      	movs	r0, r3
 800349a:	2334      	movs	r3, #52	; 0x34
 800349c:	001a      	movs	r2, r3
 800349e:	2100      	movs	r1, #0
 80034a0:	f009 f9dc 	bl	800c85c <memset>
  if(hrtc->Instance==RTC)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a15      	ldr	r2, [pc, #84]	; (8003500 <HAL_RTC_MspInit+0x74>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d124      	bne.n	80034f8 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80034ae:	193b      	adds	r3, r7, r4
 80034b0:	2280      	movs	r2, #128	; 0x80
 80034b2:	0292      	lsls	r2, r2, #10
 80034b4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80034b6:	193b      	adds	r3, r7, r4
 80034b8:	2280      	movs	r2, #128	; 0x80
 80034ba:	0092      	lsls	r2, r2, #2
 80034bc:	631a      	str	r2, [r3, #48]	; 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034be:	193b      	adds	r3, r7, r4
 80034c0:	0018      	movs	r0, r3
 80034c2:	f001 fc91 	bl	8004de8 <HAL_RCCEx_PeriphCLKConfig>
 80034c6:	1e03      	subs	r3, r0, #0
 80034c8:	d001      	beq.n	80034ce <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80034ca:	f7ff ffb5 	bl	8003438 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80034ce:	4b0d      	ldr	r3, [pc, #52]	; (8003504 <HAL_RTC_MspInit+0x78>)
 80034d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034d2:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <HAL_RTC_MspInit+0x78>)
 80034d4:	2180      	movs	r1, #128	; 0x80
 80034d6:	0209      	lsls	r1, r1, #8
 80034d8:	430a      	orrs	r2, r1
 80034da:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80034dc:	4b09      	ldr	r3, [pc, #36]	; (8003504 <HAL_RTC_MspInit+0x78>)
 80034de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034e0:	4b08      	ldr	r3, [pc, #32]	; (8003504 <HAL_RTC_MspInit+0x78>)
 80034e2:	2180      	movs	r1, #128	; 0x80
 80034e4:	00c9      	lsls	r1, r1, #3
 80034e6:	430a      	orrs	r2, r1
 80034e8:	63da      	str	r2, [r3, #60]	; 0x3c
 80034ea:	4b06      	ldr	r3, [pc, #24]	; (8003504 <HAL_RTC_MspInit+0x78>)
 80034ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034ee:	2380      	movs	r3, #128	; 0x80
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	4013      	ands	r3, r2
 80034f4:	60bb      	str	r3, [r7, #8]
 80034f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80034f8:	46c0      	nop			; (mov r8, r8)
 80034fa:	46bd      	mov	sp, r7
 80034fc:	b011      	add	sp, #68	; 0x44
 80034fe:	bd90      	pop	{r4, r7, pc}
 8003500:	40002800 	.word	0x40002800
 8003504:	40021000 	.word	0x40021000

08003508 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003508:	b590      	push	{r4, r7, lr}
 800350a:	b08b      	sub	sp, #44	; 0x2c
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003510:	2414      	movs	r4, #20
 8003512:	193b      	adds	r3, r7, r4
 8003514:	0018      	movs	r0, r3
 8003516:	2314      	movs	r3, #20
 8003518:	001a      	movs	r2, r3
 800351a:	2100      	movs	r1, #0
 800351c:	f009 f99e 	bl	800c85c <memset>
  if(hspi->Instance==SPI1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a1b      	ldr	r2, [pc, #108]	; (8003594 <HAL_SPI_MspInit+0x8c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d12f      	bne.n	800358a <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800352a:	4b1b      	ldr	r3, [pc, #108]	; (8003598 <HAL_SPI_MspInit+0x90>)
 800352c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800352e:	4b1a      	ldr	r3, [pc, #104]	; (8003598 <HAL_SPI_MspInit+0x90>)
 8003530:	2180      	movs	r1, #128	; 0x80
 8003532:	0149      	lsls	r1, r1, #5
 8003534:	430a      	orrs	r2, r1
 8003536:	641a      	str	r2, [r3, #64]	; 0x40
 8003538:	4b17      	ldr	r3, [pc, #92]	; (8003598 <HAL_SPI_MspInit+0x90>)
 800353a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800353c:	2380      	movs	r3, #128	; 0x80
 800353e:	015b      	lsls	r3, r3, #5
 8003540:	4013      	ands	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
 8003544:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003546:	4b14      	ldr	r3, [pc, #80]	; (8003598 <HAL_SPI_MspInit+0x90>)
 8003548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800354a:	4b13      	ldr	r3, [pc, #76]	; (8003598 <HAL_SPI_MspInit+0x90>)
 800354c:	2102      	movs	r1, #2
 800354e:	430a      	orrs	r2, r1
 8003550:	635a      	str	r2, [r3, #52]	; 0x34
 8003552:	4b11      	ldr	r3, [pc, #68]	; (8003598 <HAL_SPI_MspInit+0x90>)
 8003554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003556:	2202      	movs	r2, #2
 8003558:	4013      	ands	r3, r2
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LIS_SPI1_SCK_Pin|LIS_SPI1_MISO_Pin|LIS_SPI1_MOSI_Pin;
 800355e:	0021      	movs	r1, r4
 8003560:	187b      	adds	r3, r7, r1
 8003562:	2238      	movs	r2, #56	; 0x38
 8003564:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003566:	187b      	adds	r3, r7, r1
 8003568:	2202      	movs	r2, #2
 800356a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356c:	187b      	adds	r3, r7, r1
 800356e:	2200      	movs	r2, #0
 8003570:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003572:	187b      	adds	r3, r7, r1
 8003574:	2200      	movs	r2, #0
 8003576:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003578:	187b      	adds	r3, r7, r1
 800357a:	2200      	movs	r2, #0
 800357c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800357e:	187b      	adds	r3, r7, r1
 8003580:	4a06      	ldr	r2, [pc, #24]	; (800359c <HAL_SPI_MspInit+0x94>)
 8003582:	0019      	movs	r1, r3
 8003584:	0010      	movs	r0, r2
 8003586:	f000 fc45 	bl	8003e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800358a:	46c0      	nop			; (mov r8, r8)
 800358c:	46bd      	mov	sp, r7
 800358e:	b00b      	add	sp, #44	; 0x2c
 8003590:	bd90      	pop	{r4, r7, pc}
 8003592:	46c0      	nop			; (mov r8, r8)
 8003594:	40013000 	.word	0x40013000
 8003598:	40021000 	.word	0x40021000
 800359c:	50000400 	.word	0x50000400

080035a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a0d      	ldr	r2, [pc, #52]	; (80035e4 <HAL_TIM_Base_MspInit+0x44>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d113      	bne.n	80035da <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80035b2:	4b0d      	ldr	r3, [pc, #52]	; (80035e8 <HAL_TIM_Base_MspInit+0x48>)
 80035b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035b6:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <HAL_TIM_Base_MspInit+0x48>)
 80035b8:	2110      	movs	r1, #16
 80035ba:	430a      	orrs	r2, r1
 80035bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80035be:	4b0a      	ldr	r3, [pc, #40]	; (80035e8 <HAL_TIM_Base_MspInit+0x48>)
 80035c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c2:	2210      	movs	r2, #16
 80035c4:	4013      	ands	r3, r2
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 80035ca:	2200      	movs	r2, #0
 80035cc:	2100      	movs	r1, #0
 80035ce:	2011      	movs	r0, #17
 80035d0:	f000 fbea 	bl	8003da8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 80035d4:	2011      	movs	r0, #17
 80035d6:	f000 fbfc 	bl	8003dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80035da:	46c0      	nop			; (mov r8, r8)
 80035dc:	46bd      	mov	sp, r7
 80035de:	b004      	add	sp, #16
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	46c0      	nop			; (mov r8, r8)
 80035e4:	40001000 	.word	0x40001000
 80035e8:	40021000 	.word	0x40021000

080035ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035ec:	b590      	push	{r4, r7, lr}
 80035ee:	b09b      	sub	sp, #108	; 0x6c
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f4:	2354      	movs	r3, #84	; 0x54
 80035f6:	18fb      	adds	r3, r7, r3
 80035f8:	0018      	movs	r0, r3
 80035fa:	2314      	movs	r3, #20
 80035fc:	001a      	movs	r2, r3
 80035fe:	2100      	movs	r1, #0
 8003600:	f009 f92c 	bl	800c85c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003604:	2420      	movs	r4, #32
 8003606:	193b      	adds	r3, r7, r4
 8003608:	0018      	movs	r0, r3
 800360a:	2334      	movs	r3, #52	; 0x34
 800360c:	001a      	movs	r2, r3
 800360e:	2100      	movs	r1, #0
 8003610:	f009 f924 	bl	800c85c <memset>
  if(huart->Instance==USART1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a61      	ldr	r2, [pc, #388]	; (80037a0 <HAL_UART_MspInit+0x1b4>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d140      	bne.n	80036a0 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800361e:	193b      	adds	r3, r7, r4
 8003620:	2201      	movs	r2, #1
 8003622:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003624:	193b      	adds	r3, r7, r4
 8003626:	2200      	movs	r2, #0
 8003628:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800362a:	193b      	adds	r3, r7, r4
 800362c:	0018      	movs	r0, r3
 800362e:	f001 fbdb 	bl	8004de8 <HAL_RCCEx_PeriphCLKConfig>
 8003632:	1e03      	subs	r3, r0, #0
 8003634:	d001      	beq.n	800363a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003636:	f7ff feff 	bl	8003438 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800363a:	4b5a      	ldr	r3, [pc, #360]	; (80037a4 <HAL_UART_MspInit+0x1b8>)
 800363c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800363e:	4b59      	ldr	r3, [pc, #356]	; (80037a4 <HAL_UART_MspInit+0x1b8>)
 8003640:	2180      	movs	r1, #128	; 0x80
 8003642:	01c9      	lsls	r1, r1, #7
 8003644:	430a      	orrs	r2, r1
 8003646:	641a      	str	r2, [r3, #64]	; 0x40
 8003648:	4b56      	ldr	r3, [pc, #344]	; (80037a4 <HAL_UART_MspInit+0x1b8>)
 800364a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800364c:	2380      	movs	r3, #128	; 0x80
 800364e:	01db      	lsls	r3, r3, #7
 8003650:	4013      	ands	r3, r2
 8003652:	61fb      	str	r3, [r7, #28]
 8003654:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003656:	4b53      	ldr	r3, [pc, #332]	; (80037a4 <HAL_UART_MspInit+0x1b8>)
 8003658:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800365a:	4b52      	ldr	r3, [pc, #328]	; (80037a4 <HAL_UART_MspInit+0x1b8>)
 800365c:	2101      	movs	r1, #1
 800365e:	430a      	orrs	r2, r1
 8003660:	635a      	str	r2, [r3, #52]	; 0x34
 8003662:	4b50      	ldr	r3, [pc, #320]	; (80037a4 <HAL_UART_MspInit+0x1b8>)
 8003664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003666:	2201      	movs	r2, #1
 8003668:	4013      	ands	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
 800366c:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ASTRO_TXD_Pin|ASTRO_RXD_Pin;
 800366e:	2154      	movs	r1, #84	; 0x54
 8003670:	187b      	adds	r3, r7, r1
 8003672:	22c0      	movs	r2, #192	; 0xc0
 8003674:	00d2      	lsls	r2, r2, #3
 8003676:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003678:	187b      	adds	r3, r7, r1
 800367a:	2202      	movs	r2, #2
 800367c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367e:	187b      	adds	r3, r7, r1
 8003680:	2200      	movs	r2, #0
 8003682:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003684:	187b      	adds	r3, r7, r1
 8003686:	2200      	movs	r2, #0
 8003688:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800368a:	187b      	adds	r3, r7, r1
 800368c:	2201      	movs	r2, #1
 800368e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003690:	187a      	adds	r2, r7, r1
 8003692:	23a0      	movs	r3, #160	; 0xa0
 8003694:	05db      	lsls	r3, r3, #23
 8003696:	0011      	movs	r1, r2
 8003698:	0018      	movs	r0, r3
 800369a:	f000 fbbb 	bl	8003e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800369e:	e07b      	b.n	8003798 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART2)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a40      	ldr	r2, [pc, #256]	; (80037a8 <HAL_UART_MspInit+0x1bc>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d140      	bne.n	800372c <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80036aa:	2120      	movs	r1, #32
 80036ac:	187b      	adds	r3, r7, r1
 80036ae:	2202      	movs	r2, #2
 80036b0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80036b2:	187b      	adds	r3, r7, r1
 80036b4:	2200      	movs	r2, #0
 80036b6:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036b8:	187b      	adds	r3, r7, r1
 80036ba:	0018      	movs	r0, r3
 80036bc:	f001 fb94 	bl	8004de8 <HAL_RCCEx_PeriphCLKConfig>
 80036c0:	1e03      	subs	r3, r0, #0
 80036c2:	d001      	beq.n	80036c8 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 80036c4:	f7ff feb8 	bl	8003438 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80036c8:	4b36      	ldr	r3, [pc, #216]	; (80037a4 <HAL_UART_MspInit+0x1b8>)
 80036ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036cc:	4b35      	ldr	r3, [pc, #212]	; (80037a4 <HAL_UART_MspInit+0x1b8>)
 80036ce:	2180      	movs	r1, #128	; 0x80
 80036d0:	0289      	lsls	r1, r1, #10
 80036d2:	430a      	orrs	r2, r1
 80036d4:	63da      	str	r2, [r3, #60]	; 0x3c
 80036d6:	4b33      	ldr	r3, [pc, #204]	; (80037a4 <HAL_UART_MspInit+0x1b8>)
 80036d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036da:	2380      	movs	r3, #128	; 0x80
 80036dc:	029b      	lsls	r3, r3, #10
 80036de:	4013      	ands	r3, r2
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036e4:	4b2f      	ldr	r3, [pc, #188]	; (80037a4 <HAL_UART_MspInit+0x1b8>)
 80036e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036e8:	4b2e      	ldr	r3, [pc, #184]	; (80037a4 <HAL_UART_MspInit+0x1b8>)
 80036ea:	2101      	movs	r1, #1
 80036ec:	430a      	orrs	r2, r1
 80036ee:	635a      	str	r2, [r3, #52]	; 0x34
 80036f0:	4b2c      	ldr	r3, [pc, #176]	; (80037a4 <HAL_UART_MspInit+0x1b8>)
 80036f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f4:	2201      	movs	r2, #1
 80036f6:	4013      	ands	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DBG_TXD_Pin|DBG_RXD_Pin;
 80036fc:	2154      	movs	r1, #84	; 0x54
 80036fe:	187b      	adds	r3, r7, r1
 8003700:	220c      	movs	r2, #12
 8003702:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003704:	187b      	adds	r3, r7, r1
 8003706:	2202      	movs	r2, #2
 8003708:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800370a:	187b      	adds	r3, r7, r1
 800370c:	2201      	movs	r2, #1
 800370e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003710:	187b      	adds	r3, r7, r1
 8003712:	2200      	movs	r2, #0
 8003714:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003716:	187b      	adds	r3, r7, r1
 8003718:	2201      	movs	r2, #1
 800371a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800371c:	187a      	adds	r2, r7, r1
 800371e:	23a0      	movs	r3, #160	; 0xa0
 8003720:	05db      	lsls	r3, r3, #23
 8003722:	0011      	movs	r1, r2
 8003724:	0018      	movs	r0, r3
 8003726:	f000 fb75 	bl	8003e14 <HAL_GPIO_Init>
}
 800372a:	e035      	b.n	8003798 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART3)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a1e      	ldr	r2, [pc, #120]	; (80037ac <HAL_UART_MspInit+0x1c0>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d130      	bne.n	8003798 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003736:	4b1b      	ldr	r3, [pc, #108]	; (80037a4 <HAL_UART_MspInit+0x1b8>)
 8003738:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800373a:	4b1a      	ldr	r3, [pc, #104]	; (80037a4 <HAL_UART_MspInit+0x1b8>)
 800373c:	2180      	movs	r1, #128	; 0x80
 800373e:	02c9      	lsls	r1, r1, #11
 8003740:	430a      	orrs	r2, r1
 8003742:	63da      	str	r2, [r3, #60]	; 0x3c
 8003744:	4b17      	ldr	r3, [pc, #92]	; (80037a4 <HAL_UART_MspInit+0x1b8>)
 8003746:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003748:	2380      	movs	r3, #128	; 0x80
 800374a:	02db      	lsls	r3, r3, #11
 800374c:	4013      	ands	r3, r2
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003752:	4b14      	ldr	r3, [pc, #80]	; (80037a4 <HAL_UART_MspInit+0x1b8>)
 8003754:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003756:	4b13      	ldr	r3, [pc, #76]	; (80037a4 <HAL_UART_MspInit+0x1b8>)
 8003758:	2104      	movs	r1, #4
 800375a:	430a      	orrs	r2, r1
 800375c:	635a      	str	r2, [r3, #52]	; 0x34
 800375e:	4b11      	ldr	r3, [pc, #68]	; (80037a4 <HAL_UART_MspInit+0x1b8>)
 8003760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003762:	2204      	movs	r2, #4
 8003764:	4013      	ands	r3, r2
 8003766:	60bb      	str	r3, [r7, #8]
 8003768:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = L86_RXD_Pin|L86_TXD_Pin;
 800376a:	2154      	movs	r1, #84	; 0x54
 800376c:	187b      	adds	r3, r7, r1
 800376e:	22c0      	movs	r2, #192	; 0xc0
 8003770:	0112      	lsls	r2, r2, #4
 8003772:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003774:	187b      	adds	r3, r7, r1
 8003776:	2202      	movs	r2, #2
 8003778:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377a:	187b      	adds	r3, r7, r1
 800377c:	2200      	movs	r2, #0
 800377e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003780:	187b      	adds	r3, r7, r1
 8003782:	2200      	movs	r2, #0
 8003784:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 8003786:	187b      	adds	r3, r7, r1
 8003788:	2200      	movs	r2, #0
 800378a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800378c:	187b      	adds	r3, r7, r1
 800378e:	4a08      	ldr	r2, [pc, #32]	; (80037b0 <HAL_UART_MspInit+0x1c4>)
 8003790:	0019      	movs	r1, r3
 8003792:	0010      	movs	r0, r2
 8003794:	f000 fb3e 	bl	8003e14 <HAL_GPIO_Init>
}
 8003798:	46c0      	nop			; (mov r8, r8)
 800379a:	46bd      	mov	sp, r7
 800379c:	b01b      	add	sp, #108	; 0x6c
 800379e:	bd90      	pop	{r4, r7, pc}
 80037a0:	40013800 	.word	0x40013800
 80037a4:	40021000 	.word	0x40021000
 80037a8:	40004400 	.word	0x40004400
 80037ac:	40004800 	.word	0x40004800
 80037b0:	50000800 	.word	0x50000800

080037b4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a1c      	ldr	r2, [pc, #112]	; (8003834 <HAL_UART_MspDeInit+0x80>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d10e      	bne.n	80037e4 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80037c6:	4b1c      	ldr	r3, [pc, #112]	; (8003838 <HAL_UART_MspDeInit+0x84>)
 80037c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037ca:	4b1b      	ldr	r3, [pc, #108]	; (8003838 <HAL_UART_MspDeInit+0x84>)
 80037cc:	491b      	ldr	r1, [pc, #108]	; (800383c <HAL_UART_MspDeInit+0x88>)
 80037ce:	400a      	ands	r2, r1
 80037d0:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, ASTRO_TXD_Pin|ASTRO_RXD_Pin);
 80037d2:	23c0      	movs	r3, #192	; 0xc0
 80037d4:	00da      	lsls	r2, r3, #3
 80037d6:	23a0      	movs	r3, #160	; 0xa0
 80037d8:	05db      	lsls	r3, r3, #23
 80037da:	0011      	movs	r1, r2
 80037dc:	0018      	movs	r0, r3
 80037de:	f000 fc7d 	bl	80040dc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 80037e2:	e023      	b.n	800382c <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART2)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a15      	ldr	r2, [pc, #84]	; (8003840 <HAL_UART_MspDeInit+0x8c>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d10c      	bne.n	8003808 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 80037ee:	4b12      	ldr	r3, [pc, #72]	; (8003838 <HAL_UART_MspDeInit+0x84>)
 80037f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037f2:	4b11      	ldr	r3, [pc, #68]	; (8003838 <HAL_UART_MspDeInit+0x84>)
 80037f4:	4913      	ldr	r1, [pc, #76]	; (8003844 <HAL_UART_MspDeInit+0x90>)
 80037f6:	400a      	ands	r2, r1
 80037f8:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TXD_Pin|DBG_RXD_Pin);
 80037fa:	23a0      	movs	r3, #160	; 0xa0
 80037fc:	05db      	lsls	r3, r3, #23
 80037fe:	210c      	movs	r1, #12
 8003800:	0018      	movs	r0, r3
 8003802:	f000 fc6b 	bl	80040dc <HAL_GPIO_DeInit>
}
 8003806:	e011      	b.n	800382c <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART3)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a0e      	ldr	r2, [pc, #56]	; (8003848 <HAL_UART_MspDeInit+0x94>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d10c      	bne.n	800382c <HAL_UART_MspDeInit+0x78>
    __HAL_RCC_USART3_CLK_DISABLE();
 8003812:	4b09      	ldr	r3, [pc, #36]	; (8003838 <HAL_UART_MspDeInit+0x84>)
 8003814:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003816:	4b08      	ldr	r3, [pc, #32]	; (8003838 <HAL_UART_MspDeInit+0x84>)
 8003818:	490c      	ldr	r1, [pc, #48]	; (800384c <HAL_UART_MspDeInit+0x98>)
 800381a:	400a      	ands	r2, r1
 800381c:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOC, L86_RXD_Pin|L86_TXD_Pin);
 800381e:	23c0      	movs	r3, #192	; 0xc0
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	4a0b      	ldr	r2, [pc, #44]	; (8003850 <HAL_UART_MspDeInit+0x9c>)
 8003824:	0019      	movs	r1, r3
 8003826:	0010      	movs	r0, r2
 8003828:	f000 fc58 	bl	80040dc <HAL_GPIO_DeInit>
}
 800382c:	46c0      	nop			; (mov r8, r8)
 800382e:	46bd      	mov	sp, r7
 8003830:	b002      	add	sp, #8
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40013800 	.word	0x40013800
 8003838:	40021000 	.word	0x40021000
 800383c:	ffffbfff 	.word	0xffffbfff
 8003840:	40004400 	.word	0x40004400
 8003844:	fffdffff 	.word	0xfffdffff
 8003848:	40004800 	.word	0x40004800
 800384c:	fffbffff 	.word	0xfffbffff
 8003850:	50000800 	.word	0x50000800

08003854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003858:	e7fe      	b.n	8003858 <NMI_Handler+0x4>

0800385a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800385e:	e7fe      	b.n	800385e <HardFault_Handler+0x4>

08003860 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003864:	46c0      	nop			; (mov r8, r8)
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003878:	f000 f97c 	bl	8003b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800387c:	46c0      	nop			; (mov r8, r8)
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIS_INT1_EXTI8_Pin);
 8003886:	2380      	movs	r3, #128	; 0x80
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	0018      	movs	r0, r3
 800388c:	f000 fd30 	bl	80042f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LIS_INT2_EXTI9_Pin);
 8003890:	2380      	movs	r3, #128	; 0x80
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	0018      	movs	r0, r3
 8003896:	f000 fd2b 	bl	80042f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ASTRO_EVT_Pin);
 800389a:	2380      	movs	r3, #128	; 0x80
 800389c:	015b      	lsls	r3, r3, #5
 800389e:	0018      	movs	r0, r3
 80038a0:	f000 fd26 	bl	80042f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80038a4:	46c0      	nop			; (mov r8, r8)
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
	...

080038ac <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80038b0:	4b03      	ldr	r3, [pc, #12]	; (80038c0 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 80038b2:	0018      	movs	r0, r3
 80038b4:	f003 f93c 	bl	8006b30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 80038b8:	46c0      	nop			; (mov r8, r8)
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	2000078c 	.word	0x2000078c

080038c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  return 1;
 80038c8:	2301      	movs	r3, #1
}
 80038ca:	0018      	movs	r0, r3
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <_kill>:

int _kill(int pid, int sig)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80038da:	f009 f86b 	bl	800c9b4 <__errno>
 80038de:	0003      	movs	r3, r0
 80038e0:	2216      	movs	r2, #22
 80038e2:	601a      	str	r2, [r3, #0]
  return -1;
 80038e4:	2301      	movs	r3, #1
 80038e6:	425b      	negs	r3, r3
}
 80038e8:	0018      	movs	r0, r3
 80038ea:	46bd      	mov	sp, r7
 80038ec:	b002      	add	sp, #8
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <_exit>:

void _exit (int status)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80038f8:	2301      	movs	r3, #1
 80038fa:	425a      	negs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	0011      	movs	r1, r2
 8003900:	0018      	movs	r0, r3
 8003902:	f7ff ffe5 	bl	80038d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003906:	e7fe      	b.n	8003906 <_exit+0x16>

08003908 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003914:	2300      	movs	r3, #0
 8003916:	617b      	str	r3, [r7, #20]
 8003918:	e00a      	b.n	8003930 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800391a:	e000      	b.n	800391e <_read+0x16>
 800391c:	bf00      	nop
 800391e:	0001      	movs	r1, r0
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	60ba      	str	r2, [r7, #8]
 8003926:	b2ca      	uxtb	r2, r1
 8003928:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	3301      	adds	r3, #1
 800392e:	617b      	str	r3, [r7, #20]
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	429a      	cmp	r2, r3
 8003936:	dbf0      	blt.n	800391a <_read+0x12>
  }

  return len;
 8003938:	687b      	ldr	r3, [r7, #4]
}
 800393a:	0018      	movs	r0, r3
 800393c:	46bd      	mov	sp, r7
 800393e:	b006      	add	sp, #24
 8003940:	bd80      	pop	{r7, pc}

08003942 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b086      	sub	sp, #24
 8003946:	af00      	add	r7, sp, #0
 8003948:	60f8      	str	r0, [r7, #12]
 800394a:	60b9      	str	r1, [r7, #8]
 800394c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800394e:	2300      	movs	r3, #0
 8003950:	617b      	str	r3, [r7, #20]
 8003952:	e009      	b.n	8003968 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	1c5a      	adds	r2, r3, #1
 8003958:	60ba      	str	r2, [r7, #8]
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	0018      	movs	r0, r3
 800395e:	e000      	b.n	8003962 <_write+0x20>
 8003960:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	3301      	adds	r3, #1
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	429a      	cmp	r2, r3
 800396e:	dbf1      	blt.n	8003954 <_write+0x12>
  }
  return len;
 8003970:	687b      	ldr	r3, [r7, #4]
}
 8003972:	0018      	movs	r0, r3
 8003974:	46bd      	mov	sp, r7
 8003976:	b006      	add	sp, #24
 8003978:	bd80      	pop	{r7, pc}

0800397a <_close>:

int _close(int file)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b082      	sub	sp, #8
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003982:	2301      	movs	r3, #1
 8003984:	425b      	negs	r3, r3
}
 8003986:	0018      	movs	r0, r3
 8003988:	46bd      	mov	sp, r7
 800398a:	b002      	add	sp, #8
 800398c:	bd80      	pop	{r7, pc}

0800398e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b082      	sub	sp, #8
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
 8003996:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	2280      	movs	r2, #128	; 0x80
 800399c:	0192      	lsls	r2, r2, #6
 800399e:	605a      	str	r2, [r3, #4]
  return 0;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	0018      	movs	r0, r3
 80039a4:	46bd      	mov	sp, r7
 80039a6:	b002      	add	sp, #8
 80039a8:	bd80      	pop	{r7, pc}

080039aa <_isatty>:

int _isatty(int file)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b082      	sub	sp, #8
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80039b2:	2301      	movs	r3, #1
}
 80039b4:	0018      	movs	r0, r3
 80039b6:	46bd      	mov	sp, r7
 80039b8:	b002      	add	sp, #8
 80039ba:	bd80      	pop	{r7, pc}

080039bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	0018      	movs	r0, r3
 80039cc:	46bd      	mov	sp, r7
 80039ce:	b004      	add	sp, #16
 80039d0:	bd80      	pop	{r7, pc}
	...

080039d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039dc:	4a14      	ldr	r2, [pc, #80]	; (8003a30 <_sbrk+0x5c>)
 80039de:	4b15      	ldr	r3, [pc, #84]	; (8003a34 <_sbrk+0x60>)
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039e8:	4b13      	ldr	r3, [pc, #76]	; (8003a38 <_sbrk+0x64>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d102      	bne.n	80039f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039f0:	4b11      	ldr	r3, [pc, #68]	; (8003a38 <_sbrk+0x64>)
 80039f2:	4a12      	ldr	r2, [pc, #72]	; (8003a3c <_sbrk+0x68>)
 80039f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039f6:	4b10      	ldr	r3, [pc, #64]	; (8003a38 <_sbrk+0x64>)
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	18d3      	adds	r3, r2, r3
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d207      	bcs.n	8003a14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a04:	f008 ffd6 	bl	800c9b4 <__errno>
 8003a08:	0003      	movs	r3, r0
 8003a0a:	220c      	movs	r2, #12
 8003a0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	425b      	negs	r3, r3
 8003a12:	e009      	b.n	8003a28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a14:	4b08      	ldr	r3, [pc, #32]	; (8003a38 <_sbrk+0x64>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a1a:	4b07      	ldr	r3, [pc, #28]	; (8003a38 <_sbrk+0x64>)
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	18d2      	adds	r2, r2, r3
 8003a22:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <_sbrk+0x64>)
 8003a24:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003a26:	68fb      	ldr	r3, [r7, #12]
}
 8003a28:	0018      	movs	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b006      	add	sp, #24
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	20009000 	.word	0x20009000
 8003a34:	00000400 	.word	0x00000400
 8003a38:	20000bb4 	.word	0x20000bb4
 8003a3c:	20000ed0 	.word	0x20000ed0

08003a40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a44:	46c0      	nop			; (mov r8, r8)
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
	...

08003a4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003a4c:	480d      	ldr	r0, [pc, #52]	; (8003a84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003a4e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003a50:	f7ff fff6 	bl	8003a40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a54:	480c      	ldr	r0, [pc, #48]	; (8003a88 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a56:	490d      	ldr	r1, [pc, #52]	; (8003a8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a58:	4a0d      	ldr	r2, [pc, #52]	; (8003a90 <LoopForever+0xe>)
  movs r3, #0
 8003a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a5c:	e002      	b.n	8003a64 <LoopCopyDataInit>

08003a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a62:	3304      	adds	r3, #4

08003a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a68:	d3f9      	bcc.n	8003a5e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a6a:	4a0a      	ldr	r2, [pc, #40]	; (8003a94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a6c:	4c0a      	ldr	r4, [pc, #40]	; (8003a98 <LoopForever+0x16>)
  movs r3, #0
 8003a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a70:	e001      	b.n	8003a76 <LoopFillZerobss>

08003a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a74:	3204      	adds	r2, #4

08003a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a78:	d3fb      	bcc.n	8003a72 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003a7a:	f008 ffa1 	bl	800c9c0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003a7e:	f7fe fd93 	bl	80025a8 <main>

08003a82 <LoopForever>:

LoopForever:
  b LoopForever
 8003a82:	e7fe      	b.n	8003a82 <LoopForever>
  ldr   r0, =_estack
 8003a84:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8003a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a8c:	200006e0 	.word	0x200006e0
  ldr r2, =_sidata
 8003a90:	08015398 	.word	0x08015398
  ldr r2, =_sbss
 8003a94:	200006e0 	.word	0x200006e0
  ldr r4, =_ebss
 8003a98:	20000ecc 	.word	0x20000ecc

08003a9c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a9c:	e7fe      	b.n	8003a9c <ADC1_COMP_IRQHandler>
	...

08003aa0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003aa6:	1dfb      	adds	r3, r7, #7
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003aac:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <HAL_Init+0x3c>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	4b0a      	ldr	r3, [pc, #40]	; (8003adc <HAL_Init+0x3c>)
 8003ab2:	2180      	movs	r1, #128	; 0x80
 8003ab4:	0049      	lsls	r1, r1, #1
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003aba:	2000      	movs	r0, #0
 8003abc:	f000 f810 	bl	8003ae0 <HAL_InitTick>
 8003ac0:	1e03      	subs	r3, r0, #0
 8003ac2:	d003      	beq.n	8003acc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003ac4:	1dfb      	adds	r3, r7, #7
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	701a      	strb	r2, [r3, #0]
 8003aca:	e001      	b.n	8003ad0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003acc:	f7ff fcba 	bl	8003444 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003ad0:	1dfb      	adds	r3, r7, #7
 8003ad2:	781b      	ldrb	r3, [r3, #0]
}
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	b002      	add	sp, #8
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40022000 	.word	0x40022000

08003ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ae0:	b590      	push	{r4, r7, lr}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003ae8:	230f      	movs	r3, #15
 8003aea:	18fb      	adds	r3, r7, r3
 8003aec:	2200      	movs	r2, #0
 8003aee:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003af0:	4b1d      	ldr	r3, [pc, #116]	; (8003b68 <HAL_InitTick+0x88>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d02b      	beq.n	8003b50 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003af8:	4b1c      	ldr	r3, [pc, #112]	; (8003b6c <HAL_InitTick+0x8c>)
 8003afa:	681c      	ldr	r4, [r3, #0]
 8003afc:	4b1a      	ldr	r3, [pc, #104]	; (8003b68 <HAL_InitTick+0x88>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	0019      	movs	r1, r3
 8003b02:	23fa      	movs	r3, #250	; 0xfa
 8003b04:	0098      	lsls	r0, r3, #2
 8003b06:	f7fc fb19 	bl	800013c <__udivsi3>
 8003b0a:	0003      	movs	r3, r0
 8003b0c:	0019      	movs	r1, r3
 8003b0e:	0020      	movs	r0, r4
 8003b10:	f7fc fb14 	bl	800013c <__udivsi3>
 8003b14:	0003      	movs	r3, r0
 8003b16:	0018      	movs	r0, r3
 8003b18:	f000 f96f 	bl	8003dfa <HAL_SYSTICK_Config>
 8003b1c:	1e03      	subs	r3, r0, #0
 8003b1e:	d112      	bne.n	8003b46 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b03      	cmp	r3, #3
 8003b24:	d80a      	bhi.n	8003b3c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	2301      	movs	r3, #1
 8003b2a:	425b      	negs	r3, r3
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	0018      	movs	r0, r3
 8003b30:	f000 f93a 	bl	8003da8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b34:	4b0e      	ldr	r3, [pc, #56]	; (8003b70 <HAL_InitTick+0x90>)
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	e00d      	b.n	8003b58 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003b3c:	230f      	movs	r3, #15
 8003b3e:	18fb      	adds	r3, r7, r3
 8003b40:	2201      	movs	r2, #1
 8003b42:	701a      	strb	r2, [r3, #0]
 8003b44:	e008      	b.n	8003b58 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003b46:	230f      	movs	r3, #15
 8003b48:	18fb      	adds	r3, r7, r3
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	701a      	strb	r2, [r3, #0]
 8003b4e:	e003      	b.n	8003b58 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003b50:	230f      	movs	r3, #15
 8003b52:	18fb      	adds	r3, r7, r3
 8003b54:	2201      	movs	r2, #1
 8003b56:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003b58:	230f      	movs	r3, #15
 8003b5a:	18fb      	adds	r3, r7, r3
 8003b5c:	781b      	ldrb	r3, [r3, #0]
}
 8003b5e:	0018      	movs	r0, r3
 8003b60:	46bd      	mov	sp, r7
 8003b62:	b005      	add	sp, #20
 8003b64:	bd90      	pop	{r4, r7, pc}
 8003b66:	46c0      	nop			; (mov r8, r8)
 8003b68:	2000002c 	.word	0x2000002c
 8003b6c:	20000024 	.word	0x20000024
 8003b70:	20000028 	.word	0x20000028

08003b74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b78:	4b05      	ldr	r3, [pc, #20]	; (8003b90 <HAL_IncTick+0x1c>)
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	001a      	movs	r2, r3
 8003b7e:	4b05      	ldr	r3, [pc, #20]	; (8003b94 <HAL_IncTick+0x20>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	18d2      	adds	r2, r2, r3
 8003b84:	4b03      	ldr	r3, [pc, #12]	; (8003b94 <HAL_IncTick+0x20>)
 8003b86:	601a      	str	r2, [r3, #0]
}
 8003b88:	46c0      	nop			; (mov r8, r8)
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	2000002c 	.word	0x2000002c
 8003b94:	20000bb8 	.word	0x20000bb8

08003b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b9c:	4b02      	ldr	r3, [pc, #8]	; (8003ba8 <HAL_GetTick+0x10>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
}
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	46c0      	nop			; (mov r8, r8)
 8003ba8:	20000bb8 	.word	0x20000bb8

08003bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bb4:	f7ff fff0 	bl	8003b98 <HAL_GetTick>
 8003bb8:	0003      	movs	r3, r0
 8003bba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	d005      	beq.n	8003bd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bc6:	4b0a      	ldr	r3, [pc, #40]	; (8003bf0 <HAL_Delay+0x44>)
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	001a      	movs	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	189b      	adds	r3, r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003bd2:	46c0      	nop			; (mov r8, r8)
 8003bd4:	f7ff ffe0 	bl	8003b98 <HAL_GetTick>
 8003bd8:	0002      	movs	r2, r0
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d8f7      	bhi.n	8003bd4 <HAL_Delay+0x28>
  {
  }
}
 8003be4:	46c0      	nop			; (mov r8, r8)
 8003be6:	46c0      	nop			; (mov r8, r8)
 8003be8:	46bd      	mov	sp, r7
 8003bea:	b004      	add	sp, #16
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	46c0      	nop			; (mov r8, r8)
 8003bf0:	2000002c 	.word	0x2000002c

08003bf4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8003bf8:	4b04      	ldr	r3, [pc, #16]	; (8003c0c <HAL_SuspendTick+0x18>)
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	4b03      	ldr	r3, [pc, #12]	; (8003c0c <HAL_SuspendTick+0x18>)
 8003bfe:	2102      	movs	r1, #2
 8003c00:	438a      	bics	r2, r1
 8003c02:	601a      	str	r2, [r3, #0]
}
 8003c04:	46c0      	nop			; (mov r8, r8)
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	e000e010 	.word	0xe000e010

08003c10 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003c14:	4b04      	ldr	r3, [pc, #16]	; (8003c28 <HAL_ResumeTick+0x18>)
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	4b03      	ldr	r3, [pc, #12]	; (8003c28 <HAL_ResumeTick+0x18>)
 8003c1a:	2102      	movs	r1, #2
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	601a      	str	r2, [r3, #0]
}
 8003c20:	46c0      	nop			; (mov r8, r8)
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	e000e010 	.word	0xe000e010

08003c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	0002      	movs	r2, r0
 8003c34:	1dfb      	adds	r3, r7, #7
 8003c36:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003c38:	1dfb      	adds	r3, r7, #7
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	2b7f      	cmp	r3, #127	; 0x7f
 8003c3e:	d809      	bhi.n	8003c54 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c40:	1dfb      	adds	r3, r7, #7
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	001a      	movs	r2, r3
 8003c46:	231f      	movs	r3, #31
 8003c48:	401a      	ands	r2, r3
 8003c4a:	4b04      	ldr	r3, [pc, #16]	; (8003c5c <__NVIC_EnableIRQ+0x30>)
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	4091      	lsls	r1, r2
 8003c50:	000a      	movs	r2, r1
 8003c52:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003c54:	46c0      	nop			; (mov r8, r8)
 8003c56:	46bd      	mov	sp, r7
 8003c58:	b002      	add	sp, #8
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	e000e100 	.word	0xe000e100

08003c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c60:	b590      	push	{r4, r7, lr}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	0002      	movs	r2, r0
 8003c68:	6039      	str	r1, [r7, #0]
 8003c6a:	1dfb      	adds	r3, r7, #7
 8003c6c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003c6e:	1dfb      	adds	r3, r7, #7
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	2b7f      	cmp	r3, #127	; 0x7f
 8003c74:	d828      	bhi.n	8003cc8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c76:	4a2f      	ldr	r2, [pc, #188]	; (8003d34 <__NVIC_SetPriority+0xd4>)
 8003c78:	1dfb      	adds	r3, r7, #7
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	b25b      	sxtb	r3, r3
 8003c7e:	089b      	lsrs	r3, r3, #2
 8003c80:	33c0      	adds	r3, #192	; 0xc0
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	589b      	ldr	r3, [r3, r2]
 8003c86:	1dfa      	adds	r2, r7, #7
 8003c88:	7812      	ldrb	r2, [r2, #0]
 8003c8a:	0011      	movs	r1, r2
 8003c8c:	2203      	movs	r2, #3
 8003c8e:	400a      	ands	r2, r1
 8003c90:	00d2      	lsls	r2, r2, #3
 8003c92:	21ff      	movs	r1, #255	; 0xff
 8003c94:	4091      	lsls	r1, r2
 8003c96:	000a      	movs	r2, r1
 8003c98:	43d2      	mvns	r2, r2
 8003c9a:	401a      	ands	r2, r3
 8003c9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	019b      	lsls	r3, r3, #6
 8003ca2:	22ff      	movs	r2, #255	; 0xff
 8003ca4:	401a      	ands	r2, r3
 8003ca6:	1dfb      	adds	r3, r7, #7
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	0018      	movs	r0, r3
 8003cac:	2303      	movs	r3, #3
 8003cae:	4003      	ands	r3, r0
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003cb4:	481f      	ldr	r0, [pc, #124]	; (8003d34 <__NVIC_SetPriority+0xd4>)
 8003cb6:	1dfb      	adds	r3, r7, #7
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	b25b      	sxtb	r3, r3
 8003cbc:	089b      	lsrs	r3, r3, #2
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	33c0      	adds	r3, #192	; 0xc0
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003cc6:	e031      	b.n	8003d2c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003cc8:	4a1b      	ldr	r2, [pc, #108]	; (8003d38 <__NVIC_SetPriority+0xd8>)
 8003cca:	1dfb      	adds	r3, r7, #7
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	0019      	movs	r1, r3
 8003cd0:	230f      	movs	r3, #15
 8003cd2:	400b      	ands	r3, r1
 8003cd4:	3b08      	subs	r3, #8
 8003cd6:	089b      	lsrs	r3, r3, #2
 8003cd8:	3306      	adds	r3, #6
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	18d3      	adds	r3, r2, r3
 8003cde:	3304      	adds	r3, #4
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	1dfa      	adds	r2, r7, #7
 8003ce4:	7812      	ldrb	r2, [r2, #0]
 8003ce6:	0011      	movs	r1, r2
 8003ce8:	2203      	movs	r2, #3
 8003cea:	400a      	ands	r2, r1
 8003cec:	00d2      	lsls	r2, r2, #3
 8003cee:	21ff      	movs	r1, #255	; 0xff
 8003cf0:	4091      	lsls	r1, r2
 8003cf2:	000a      	movs	r2, r1
 8003cf4:	43d2      	mvns	r2, r2
 8003cf6:	401a      	ands	r2, r3
 8003cf8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	019b      	lsls	r3, r3, #6
 8003cfe:	22ff      	movs	r2, #255	; 0xff
 8003d00:	401a      	ands	r2, r3
 8003d02:	1dfb      	adds	r3, r7, #7
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	0018      	movs	r0, r3
 8003d08:	2303      	movs	r3, #3
 8003d0a:	4003      	ands	r3, r0
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d10:	4809      	ldr	r0, [pc, #36]	; (8003d38 <__NVIC_SetPriority+0xd8>)
 8003d12:	1dfb      	adds	r3, r7, #7
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	001c      	movs	r4, r3
 8003d18:	230f      	movs	r3, #15
 8003d1a:	4023      	ands	r3, r4
 8003d1c:	3b08      	subs	r3, #8
 8003d1e:	089b      	lsrs	r3, r3, #2
 8003d20:	430a      	orrs	r2, r1
 8003d22:	3306      	adds	r3, #6
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	18c3      	adds	r3, r0, r3
 8003d28:	3304      	adds	r3, #4
 8003d2a:	601a      	str	r2, [r3, #0]
}
 8003d2c:	46c0      	nop			; (mov r8, r8)
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	b003      	add	sp, #12
 8003d32:	bd90      	pop	{r4, r7, pc}
 8003d34:	e000e100 	.word	0xe000e100
 8003d38:	e000ed00 	.word	0xe000ed00

08003d3c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003d40:	f3bf 8f4f 	dsb	sy
}
 8003d44:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d46:	4b04      	ldr	r3, [pc, #16]	; (8003d58 <__NVIC_SystemReset+0x1c>)
 8003d48:	4a04      	ldr	r2, [pc, #16]	; (8003d5c <__NVIC_SystemReset+0x20>)
 8003d4a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003d4c:	f3bf 8f4f 	dsb	sy
}
 8003d50:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003d52:	46c0      	nop			; (mov r8, r8)
 8003d54:	e7fd      	b.n	8003d52 <__NVIC_SystemReset+0x16>
 8003d56:	46c0      	nop			; (mov r8, r8)
 8003d58:	e000ed00 	.word	0xe000ed00
 8003d5c:	05fa0004 	.word	0x05fa0004

08003d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	1e5a      	subs	r2, r3, #1
 8003d6c:	2380      	movs	r3, #128	; 0x80
 8003d6e:	045b      	lsls	r3, r3, #17
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d301      	bcc.n	8003d78 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d74:	2301      	movs	r3, #1
 8003d76:	e010      	b.n	8003d9a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d78:	4b0a      	ldr	r3, [pc, #40]	; (8003da4 <SysTick_Config+0x44>)
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	3a01      	subs	r2, #1
 8003d7e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d80:	2301      	movs	r3, #1
 8003d82:	425b      	negs	r3, r3
 8003d84:	2103      	movs	r1, #3
 8003d86:	0018      	movs	r0, r3
 8003d88:	f7ff ff6a 	bl	8003c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d8c:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <SysTick_Config+0x44>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d92:	4b04      	ldr	r3, [pc, #16]	; (8003da4 <SysTick_Config+0x44>)
 8003d94:	2207      	movs	r2, #7
 8003d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	b002      	add	sp, #8
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	46c0      	nop			; (mov r8, r8)
 8003da4:	e000e010 	.word	0xe000e010

08003da8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60b9      	str	r1, [r7, #8]
 8003db0:	607a      	str	r2, [r7, #4]
 8003db2:	210f      	movs	r1, #15
 8003db4:	187b      	adds	r3, r7, r1
 8003db6:	1c02      	adds	r2, r0, #0
 8003db8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	187b      	adds	r3, r7, r1
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	b25b      	sxtb	r3, r3
 8003dc2:	0011      	movs	r1, r2
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f7ff ff4b 	bl	8003c60 <__NVIC_SetPriority>
}
 8003dca:	46c0      	nop			; (mov r8, r8)
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	b004      	add	sp, #16
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b082      	sub	sp, #8
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	0002      	movs	r2, r0
 8003dda:	1dfb      	adds	r3, r7, #7
 8003ddc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dde:	1dfb      	adds	r3, r7, #7
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	b25b      	sxtb	r3, r3
 8003de4:	0018      	movs	r0, r3
 8003de6:	f7ff ff21 	bl	8003c2c <__NVIC_EnableIRQ>
}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	46bd      	mov	sp, r7
 8003dee:	b002      	add	sp, #8
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003df6:	f7ff ffa1 	bl	8003d3c <__NVIC_SystemReset>

08003dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b082      	sub	sp, #8
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	0018      	movs	r0, r3
 8003e06:	f7ff ffab 	bl	8003d60 <SysTick_Config>
 8003e0a:	0003      	movs	r3, r0
}
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	b002      	add	sp, #8
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e22:	e147      	b.n	80040b4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2101      	movs	r1, #1
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	4091      	lsls	r1, r2
 8003e2e:	000a      	movs	r2, r1
 8003e30:	4013      	ands	r3, r2
 8003e32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d100      	bne.n	8003e3c <HAL_GPIO_Init+0x28>
 8003e3a:	e138      	b.n	80040ae <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2203      	movs	r2, #3
 8003e42:	4013      	ands	r3, r2
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d005      	beq.n	8003e54 <HAL_GPIO_Init+0x40>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	2203      	movs	r2, #3
 8003e4e:	4013      	ands	r3, r2
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d130      	bne.n	8003eb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	2203      	movs	r2, #3
 8003e60:	409a      	lsls	r2, r3
 8003e62:	0013      	movs	r3, r2
 8003e64:	43da      	mvns	r2, r3
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	68da      	ldr	r2, [r3, #12]
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	409a      	lsls	r2, r3
 8003e76:	0013      	movs	r3, r2
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	409a      	lsls	r2, r3
 8003e90:	0013      	movs	r3, r2
 8003e92:	43da      	mvns	r2, r3
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	4013      	ands	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	091b      	lsrs	r3, r3, #4
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	401a      	ands	r2, r3
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	409a      	lsls	r2, r3
 8003ea8:	0013      	movs	r3, r2
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2203      	movs	r2, #3
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	2b03      	cmp	r3, #3
 8003ec0:	d017      	beq.n	8003ef2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	2203      	movs	r2, #3
 8003ece:	409a      	lsls	r2, r3
 8003ed0:	0013      	movs	r3, r2
 8003ed2:	43da      	mvns	r2, r3
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	689a      	ldr	r2, [r3, #8]
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	409a      	lsls	r2, r3
 8003ee4:	0013      	movs	r3, r2
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2203      	movs	r2, #3
 8003ef8:	4013      	ands	r3, r2
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d123      	bne.n	8003f46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	08da      	lsrs	r2, r3, #3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	3208      	adds	r2, #8
 8003f06:	0092      	lsls	r2, r2, #2
 8003f08:	58d3      	ldr	r3, [r2, r3]
 8003f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	2207      	movs	r2, #7
 8003f10:	4013      	ands	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	220f      	movs	r2, #15
 8003f16:	409a      	lsls	r2, r3
 8003f18:	0013      	movs	r3, r2
 8003f1a:	43da      	mvns	r2, r3
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	691a      	ldr	r2, [r3, #16]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	2107      	movs	r1, #7
 8003f2a:	400b      	ands	r3, r1
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	409a      	lsls	r2, r3
 8003f30:	0013      	movs	r3, r2
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	08da      	lsrs	r2, r3, #3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3208      	adds	r2, #8
 8003f40:	0092      	lsls	r2, r2, #2
 8003f42:	6939      	ldr	r1, [r7, #16]
 8003f44:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	2203      	movs	r2, #3
 8003f52:	409a      	lsls	r2, r3
 8003f54:	0013      	movs	r3, r2
 8003f56:	43da      	mvns	r2, r3
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2203      	movs	r2, #3
 8003f64:	401a      	ands	r2, r3
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	409a      	lsls	r2, r3
 8003f6c:	0013      	movs	r3, r2
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	23c0      	movs	r3, #192	; 0xc0
 8003f80:	029b      	lsls	r3, r3, #10
 8003f82:	4013      	ands	r3, r2
 8003f84:	d100      	bne.n	8003f88 <HAL_GPIO_Init+0x174>
 8003f86:	e092      	b.n	80040ae <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003f88:	4a50      	ldr	r2, [pc, #320]	; (80040cc <HAL_GPIO_Init+0x2b8>)
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	089b      	lsrs	r3, r3, #2
 8003f8e:	3318      	adds	r3, #24
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	589b      	ldr	r3, [r3, r2]
 8003f94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	2203      	movs	r2, #3
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	220f      	movs	r2, #15
 8003fa0:	409a      	lsls	r2, r3
 8003fa2:	0013      	movs	r3, r2
 8003fa4:	43da      	mvns	r2, r3
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	23a0      	movs	r3, #160	; 0xa0
 8003fb0:	05db      	lsls	r3, r3, #23
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d013      	beq.n	8003fde <HAL_GPIO_Init+0x1ca>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a45      	ldr	r2, [pc, #276]	; (80040d0 <HAL_GPIO_Init+0x2bc>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d00d      	beq.n	8003fda <HAL_GPIO_Init+0x1c6>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a44      	ldr	r2, [pc, #272]	; (80040d4 <HAL_GPIO_Init+0x2c0>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d007      	beq.n	8003fd6 <HAL_GPIO_Init+0x1c2>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a43      	ldr	r2, [pc, #268]	; (80040d8 <HAL_GPIO_Init+0x2c4>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d101      	bne.n	8003fd2 <HAL_GPIO_Init+0x1be>
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e006      	b.n	8003fe0 <HAL_GPIO_Init+0x1cc>
 8003fd2:	2305      	movs	r3, #5
 8003fd4:	e004      	b.n	8003fe0 <HAL_GPIO_Init+0x1cc>
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	e002      	b.n	8003fe0 <HAL_GPIO_Init+0x1cc>
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e000      	b.n	8003fe0 <HAL_GPIO_Init+0x1cc>
 8003fde:	2300      	movs	r3, #0
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	2103      	movs	r1, #3
 8003fe4:	400a      	ands	r2, r1
 8003fe6:	00d2      	lsls	r2, r2, #3
 8003fe8:	4093      	lsls	r3, r2
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003ff0:	4936      	ldr	r1, [pc, #216]	; (80040cc <HAL_GPIO_Init+0x2b8>)
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	089b      	lsrs	r3, r3, #2
 8003ff6:	3318      	adds	r3, #24
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ffe:	4b33      	ldr	r3, [pc, #204]	; (80040cc <HAL_GPIO_Init+0x2b8>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	43da      	mvns	r2, r3
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	4013      	ands	r3, r2
 800400c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	2380      	movs	r3, #128	; 0x80
 8004014:	035b      	lsls	r3, r3, #13
 8004016:	4013      	ands	r3, r2
 8004018:	d003      	beq.n	8004022 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4313      	orrs	r3, r2
 8004020:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004022:	4b2a      	ldr	r3, [pc, #168]	; (80040cc <HAL_GPIO_Init+0x2b8>)
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004028:	4b28      	ldr	r3, [pc, #160]	; (80040cc <HAL_GPIO_Init+0x2b8>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	43da      	mvns	r2, r3
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	4013      	ands	r3, r2
 8004036:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	2380      	movs	r3, #128	; 0x80
 800403e:	039b      	lsls	r3, r3, #14
 8004040:	4013      	ands	r3, r2
 8004042:	d003      	beq.n	800404c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	4313      	orrs	r3, r2
 800404a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800404c:	4b1f      	ldr	r3, [pc, #124]	; (80040cc <HAL_GPIO_Init+0x2b8>)
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004052:	4a1e      	ldr	r2, [pc, #120]	; (80040cc <HAL_GPIO_Init+0x2b8>)
 8004054:	2384      	movs	r3, #132	; 0x84
 8004056:	58d3      	ldr	r3, [r2, r3]
 8004058:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	43da      	mvns	r2, r3
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	4013      	ands	r3, r2
 8004062:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	2380      	movs	r3, #128	; 0x80
 800406a:	029b      	lsls	r3, r3, #10
 800406c:	4013      	ands	r3, r2
 800406e:	d003      	beq.n	8004078 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	4313      	orrs	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004078:	4914      	ldr	r1, [pc, #80]	; (80040cc <HAL_GPIO_Init+0x2b8>)
 800407a:	2284      	movs	r2, #132	; 0x84
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004080:	4a12      	ldr	r2, [pc, #72]	; (80040cc <HAL_GPIO_Init+0x2b8>)
 8004082:	2380      	movs	r3, #128	; 0x80
 8004084:	58d3      	ldr	r3, [r2, r3]
 8004086:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	43da      	mvns	r2, r3
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	4013      	ands	r3, r2
 8004090:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	2380      	movs	r3, #128	; 0x80
 8004098:	025b      	lsls	r3, r3, #9
 800409a:	4013      	ands	r3, r2
 800409c:	d003      	beq.n	80040a6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80040a6:	4909      	ldr	r1, [pc, #36]	; (80040cc <HAL_GPIO_Init+0x2b8>)
 80040a8:	2280      	movs	r2, #128	; 0x80
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	3301      	adds	r3, #1
 80040b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	40da      	lsrs	r2, r3
 80040bc:	1e13      	subs	r3, r2, #0
 80040be:	d000      	beq.n	80040c2 <HAL_GPIO_Init+0x2ae>
 80040c0:	e6b0      	b.n	8003e24 <HAL_GPIO_Init+0x10>
  }
}
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	46c0      	nop			; (mov r8, r8)
 80040c6:	46bd      	mov	sp, r7
 80040c8:	b006      	add	sp, #24
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40021800 	.word	0x40021800
 80040d0:	50000400 	.word	0x50000400
 80040d4:	50000800 	.word	0x50000800
 80040d8:	50000c00 	.word	0x50000c00

080040dc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040e6:	2300      	movs	r3, #0
 80040e8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80040ea:	e0b4      	b.n	8004256 <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80040ec:	2201      	movs	r2, #1
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	409a      	lsls	r2, r3
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	4013      	ands	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d100      	bne.n	8004100 <HAL_GPIO_DeInit+0x24>
 80040fe:	e0a7      	b.n	8004250 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8004100:	4a5a      	ldr	r2, [pc, #360]	; (800426c <HAL_GPIO_DeInit+0x190>)
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	089b      	lsrs	r3, r3, #2
 8004106:	3318      	adds	r3, #24
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	589b      	ldr	r3, [r3, r2]
 800410c:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	2203      	movs	r2, #3
 8004112:	4013      	ands	r3, r2
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	220f      	movs	r2, #15
 8004118:	409a      	lsls	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	4013      	ands	r3, r2
 800411e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	23a0      	movs	r3, #160	; 0xa0
 8004124:	05db      	lsls	r3, r3, #23
 8004126:	429a      	cmp	r2, r3
 8004128:	d013      	beq.n	8004152 <HAL_GPIO_DeInit+0x76>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a50      	ldr	r2, [pc, #320]	; (8004270 <HAL_GPIO_DeInit+0x194>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d00d      	beq.n	800414e <HAL_GPIO_DeInit+0x72>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a4f      	ldr	r2, [pc, #316]	; (8004274 <HAL_GPIO_DeInit+0x198>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d007      	beq.n	800414a <HAL_GPIO_DeInit+0x6e>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a4e      	ldr	r2, [pc, #312]	; (8004278 <HAL_GPIO_DeInit+0x19c>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d101      	bne.n	8004146 <HAL_GPIO_DeInit+0x6a>
 8004142:	2303      	movs	r3, #3
 8004144:	e006      	b.n	8004154 <HAL_GPIO_DeInit+0x78>
 8004146:	2305      	movs	r3, #5
 8004148:	e004      	b.n	8004154 <HAL_GPIO_DeInit+0x78>
 800414a:	2302      	movs	r3, #2
 800414c:	e002      	b.n	8004154 <HAL_GPIO_DeInit+0x78>
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <HAL_GPIO_DeInit+0x78>
 8004152:	2300      	movs	r3, #0
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	2103      	movs	r1, #3
 8004158:	400a      	ands	r2, r1
 800415a:	00d2      	lsls	r2, r2, #3
 800415c:	4093      	lsls	r3, r2
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	429a      	cmp	r2, r3
 8004162:	d136      	bne.n	80041d2 <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004164:	4a41      	ldr	r2, [pc, #260]	; (800426c <HAL_GPIO_DeInit+0x190>)
 8004166:	2380      	movs	r3, #128	; 0x80
 8004168:	58d3      	ldr	r3, [r2, r3]
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	43d2      	mvns	r2, r2
 800416e:	493f      	ldr	r1, [pc, #252]	; (800426c <HAL_GPIO_DeInit+0x190>)
 8004170:	4013      	ands	r3, r2
 8004172:	2280      	movs	r2, #128	; 0x80
 8004174:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8004176:	4a3d      	ldr	r2, [pc, #244]	; (800426c <HAL_GPIO_DeInit+0x190>)
 8004178:	2384      	movs	r3, #132	; 0x84
 800417a:	58d3      	ldr	r3, [r2, r3]
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	43d2      	mvns	r2, r2
 8004180:	493a      	ldr	r1, [pc, #232]	; (800426c <HAL_GPIO_DeInit+0x190>)
 8004182:	4013      	ands	r3, r2
 8004184:	2284      	movs	r2, #132	; 0x84
 8004186:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004188:	4b38      	ldr	r3, [pc, #224]	; (800426c <HAL_GPIO_DeInit+0x190>)
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	43d9      	mvns	r1, r3
 8004190:	4b36      	ldr	r3, [pc, #216]	; (800426c <HAL_GPIO_DeInit+0x190>)
 8004192:	400a      	ands	r2, r1
 8004194:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8004196:	4b35      	ldr	r3, [pc, #212]	; (800426c <HAL_GPIO_DeInit+0x190>)
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	43d9      	mvns	r1, r3
 800419e:	4b33      	ldr	r3, [pc, #204]	; (800426c <HAL_GPIO_DeInit+0x190>)
 80041a0:	400a      	ands	r2, r1
 80041a2:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	2203      	movs	r2, #3
 80041a8:	4013      	ands	r3, r2
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	220f      	movs	r2, #15
 80041ae:	409a      	lsls	r2, r3
 80041b0:	0013      	movs	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 80041b4:	4a2d      	ldr	r2, [pc, #180]	; (800426c <HAL_GPIO_DeInit+0x190>)
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	089b      	lsrs	r3, r3, #2
 80041ba:	3318      	adds	r3, #24
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	589a      	ldr	r2, [r3, r2]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	43d9      	mvns	r1, r3
 80041c4:	4829      	ldr	r0, [pc, #164]	; (800426c <HAL_GPIO_DeInit+0x190>)
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	089b      	lsrs	r3, r3, #2
 80041ca:	400a      	ands	r2, r1
 80041cc:	3318      	adds	r3, #24
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	2103      	movs	r1, #3
 80041dc:	4099      	lsls	r1, r3
 80041de:	000b      	movs	r3, r1
 80041e0:	431a      	orrs	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	08da      	lsrs	r2, r3, #3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	3208      	adds	r2, #8
 80041ee:	0092      	lsls	r2, r2, #2
 80041f0:	58d3      	ldr	r3, [r2, r3]
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	2107      	movs	r1, #7
 80041f6:	400a      	ands	r2, r1
 80041f8:	0092      	lsls	r2, r2, #2
 80041fa:	210f      	movs	r1, #15
 80041fc:	4091      	lsls	r1, r2
 80041fe:	000a      	movs	r2, r1
 8004200:	43d1      	mvns	r1, r2
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	08d2      	lsrs	r2, r2, #3
 8004206:	4019      	ands	r1, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3208      	adds	r2, #8
 800420c:	0092      	lsls	r2, r2, #2
 800420e:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	0052      	lsls	r2, r2, #1
 8004218:	2103      	movs	r1, #3
 800421a:	4091      	lsls	r1, r2
 800421c:	000a      	movs	r2, r1
 800421e:	43d2      	mvns	r2, r2
 8004220:	401a      	ands	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2101      	movs	r1, #1
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	4091      	lsls	r1, r2
 8004230:	000a      	movs	r2, r1
 8004232:	43d2      	mvns	r2, r2
 8004234:	401a      	ands	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	0052      	lsls	r2, r2, #1
 8004242:	2103      	movs	r1, #3
 8004244:	4091      	lsls	r1, r2
 8004246:	000a      	movs	r2, r1
 8004248:	43d2      	mvns	r2, r2
 800424a:	401a      	ands	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	3301      	adds	r3, #1
 8004254:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	40da      	lsrs	r2, r3
 800425c:	1e13      	subs	r3, r2, #0
 800425e:	d000      	beq.n	8004262 <HAL_GPIO_DeInit+0x186>
 8004260:	e744      	b.n	80040ec <HAL_GPIO_DeInit+0x10>
  }
}
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	46c0      	nop			; (mov r8, r8)
 8004266:	46bd      	mov	sp, r7
 8004268:	b006      	add	sp, #24
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40021800 	.word	0x40021800
 8004270:	50000400 	.word	0x50000400
 8004274:	50000800 	.word	0x50000800
 8004278:	50000c00 	.word	0x50000c00

0800427c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	000a      	movs	r2, r1
 8004286:	1cbb      	adds	r3, r7, #2
 8004288:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	1cba      	adds	r2, r7, #2
 8004290:	8812      	ldrh	r2, [r2, #0]
 8004292:	4013      	ands	r3, r2
 8004294:	d004      	beq.n	80042a0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004296:	230f      	movs	r3, #15
 8004298:	18fb      	adds	r3, r7, r3
 800429a:	2201      	movs	r2, #1
 800429c:	701a      	strb	r2, [r3, #0]
 800429e:	e003      	b.n	80042a8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042a0:	230f      	movs	r3, #15
 80042a2:	18fb      	adds	r3, r7, r3
 80042a4:	2200      	movs	r2, #0
 80042a6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80042a8:	230f      	movs	r3, #15
 80042aa:	18fb      	adds	r3, r7, r3
 80042ac:	781b      	ldrb	r3, [r3, #0]
}
 80042ae:	0018      	movs	r0, r3
 80042b0:	46bd      	mov	sp, r7
 80042b2:	b004      	add	sp, #16
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b082      	sub	sp, #8
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
 80042be:	0008      	movs	r0, r1
 80042c0:	0011      	movs	r1, r2
 80042c2:	1cbb      	adds	r3, r7, #2
 80042c4:	1c02      	adds	r2, r0, #0
 80042c6:	801a      	strh	r2, [r3, #0]
 80042c8:	1c7b      	adds	r3, r7, #1
 80042ca:	1c0a      	adds	r2, r1, #0
 80042cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042ce:	1c7b      	adds	r3, r7, #1
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d004      	beq.n	80042e0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042d6:	1cbb      	adds	r3, r7, #2
 80042d8:	881a      	ldrh	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042de:	e003      	b.n	80042e8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042e0:	1cbb      	adds	r3, r7, #2
 80042e2:	881a      	ldrh	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80042e8:	46c0      	nop			; (mov r8, r8)
 80042ea:	46bd      	mov	sp, r7
 80042ec:	b002      	add	sp, #8
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	0002      	movs	r2, r0
 80042f8:	1dbb      	adds	r3, r7, #6
 80042fa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80042fc:	4b10      	ldr	r3, [pc, #64]	; (8004340 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	1dba      	adds	r2, r7, #6
 8004302:	8812      	ldrh	r2, [r2, #0]
 8004304:	4013      	ands	r3, r2
 8004306:	d008      	beq.n	800431a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004308:	4b0d      	ldr	r3, [pc, #52]	; (8004340 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800430a:	1dba      	adds	r2, r7, #6
 800430c:	8812      	ldrh	r2, [r2, #0]
 800430e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004310:	1dbb      	adds	r3, r7, #6
 8004312:	881b      	ldrh	r3, [r3, #0]
 8004314:	0018      	movs	r0, r3
 8004316:	f7ff f86f 	bl	80033f8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800431a:	4b09      	ldr	r3, [pc, #36]	; (8004340 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	1dba      	adds	r2, r7, #6
 8004320:	8812      	ldrh	r2, [r2, #0]
 8004322:	4013      	ands	r3, r2
 8004324:	d008      	beq.n	8004338 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004326:	4b06      	ldr	r3, [pc, #24]	; (8004340 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004328:	1dba      	adds	r2, r7, #6
 800432a:	8812      	ldrh	r2, [r2, #0]
 800432c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800432e:	1dbb      	adds	r3, r7, #6
 8004330:	881b      	ldrh	r3, [r3, #0]
 8004332:	0018      	movs	r0, r3
 8004334:	f000 f806 	bl	8004344 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004338:	46c0      	nop			; (mov r8, r8)
 800433a:	46bd      	mov	sp, r7
 800433c:	b002      	add	sp, #8
 800433e:	bd80      	pop	{r7, pc}
 8004340:	40021800 	.word	0x40021800

08004344 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	0002      	movs	r2, r0
 800434c:	1dbb      	adds	r3, r7, #6
 800434e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8004350:	46c0      	nop			; (mov r8, r8)
 8004352:	46bd      	mov	sp, r7
 8004354:	b002      	add	sp, #8
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	000a      	movs	r2, r1
 8004362:	1cfb      	adds	r3, r7, #3
 8004364:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d009      	beq.n	8004380 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 800436c:	4b14      	ldr	r3, [pc, #80]	; (80043c0 <HAL_PWR_EnterSTOPMode+0x68>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2207      	movs	r2, #7
 8004372:	4393      	bics	r3, r2
 8004374:	001a      	movs	r2, r3
 8004376:	4b12      	ldr	r3, [pc, #72]	; (80043c0 <HAL_PWR_EnterSTOPMode+0x68>)
 8004378:	2101      	movs	r1, #1
 800437a:	430a      	orrs	r2, r1
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	e005      	b.n	800438c <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8004380:	4b0f      	ldr	r3, [pc, #60]	; (80043c0 <HAL_PWR_EnterSTOPMode+0x68>)
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	4b0e      	ldr	r3, [pc, #56]	; (80043c0 <HAL_PWR_EnterSTOPMode+0x68>)
 8004386:	2107      	movs	r1, #7
 8004388:	438a      	bics	r2, r1
 800438a:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800438c:	4b0d      	ldr	r3, [pc, #52]	; (80043c4 <HAL_PWR_EnterSTOPMode+0x6c>)
 800438e:	691a      	ldr	r2, [r3, #16]
 8004390:	4b0c      	ldr	r3, [pc, #48]	; (80043c4 <HAL_PWR_EnterSTOPMode+0x6c>)
 8004392:	2104      	movs	r1, #4
 8004394:	430a      	orrs	r2, r1
 8004396:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004398:	1cfb      	adds	r3, r7, #3
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d101      	bne.n	80043a4 <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80043a0:	bf30      	wfi
 80043a2:	e002      	b.n	80043aa <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80043a4:	bf40      	sev
    __WFE();
 80043a6:	bf20      	wfe
    __WFE();
 80043a8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80043aa:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <HAL_PWR_EnterSTOPMode+0x6c>)
 80043ac:	691a      	ldr	r2, [r3, #16]
 80043ae:	4b05      	ldr	r3, [pc, #20]	; (80043c4 <HAL_PWR_EnterSTOPMode+0x6c>)
 80043b0:	2104      	movs	r1, #4
 80043b2:	438a      	bics	r2, r1
 80043b4:	611a      	str	r2, [r3, #16]
}
 80043b6:	46c0      	nop			; (mov r8, r8)
 80043b8:	46bd      	mov	sp, r7
 80043ba:	b002      	add	sp, #8
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	46c0      	nop			; (mov r8, r8)
 80043c0:	40007000 	.word	0x40007000
 80043c4:	e000ed00 	.word	0xe000ed00

080043c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80043d0:	4b19      	ldr	r3, [pc, #100]	; (8004438 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a19      	ldr	r2, [pc, #100]	; (800443c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80043d6:	4013      	ands	r3, r2
 80043d8:	0019      	movs	r1, r3
 80043da:	4b17      	ldr	r3, [pc, #92]	; (8004438 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	430a      	orrs	r2, r1
 80043e0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	2380      	movs	r3, #128	; 0x80
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d11f      	bne.n	800442c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80043ec:	4b14      	ldr	r3, [pc, #80]	; (8004440 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	0013      	movs	r3, r2
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	189b      	adds	r3, r3, r2
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	4912      	ldr	r1, [pc, #72]	; (8004444 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80043fa:	0018      	movs	r0, r3
 80043fc:	f7fb fe9e 	bl	800013c <__udivsi3>
 8004400:	0003      	movs	r3, r0
 8004402:	3301      	adds	r3, #1
 8004404:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004406:	e008      	b.n	800441a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	3b01      	subs	r3, #1
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	e001      	b.n	800441a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e009      	b.n	800442e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800441a:	4b07      	ldr	r3, [pc, #28]	; (8004438 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800441c:	695a      	ldr	r2, [r3, #20]
 800441e:	2380      	movs	r3, #128	; 0x80
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	401a      	ands	r2, r3
 8004424:	2380      	movs	r3, #128	; 0x80
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	429a      	cmp	r2, r3
 800442a:	d0ed      	beq.n	8004408 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	0018      	movs	r0, r3
 8004430:	46bd      	mov	sp, r7
 8004432:	b004      	add	sp, #16
 8004434:	bd80      	pop	{r7, pc}
 8004436:	46c0      	nop			; (mov r8, r8)
 8004438:	40007000 	.word	0x40007000
 800443c:	fffff9ff 	.word	0xfffff9ff
 8004440:	20000024 	.word	0x20000024
 8004444:	000f4240 	.word	0x000f4240

08004448 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800444c:	4b03      	ldr	r3, [pc, #12]	; (800445c <LL_RCC_GetAPB1Prescaler+0x14>)
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	23e0      	movs	r3, #224	; 0xe0
 8004452:	01db      	lsls	r3, r3, #7
 8004454:	4013      	ands	r3, r2
}
 8004456:	0018      	movs	r0, r3
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40021000 	.word	0x40021000

08004460 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b088      	sub	sp, #32
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e2fe      	b.n	8004a70 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2201      	movs	r2, #1
 8004478:	4013      	ands	r3, r2
 800447a:	d100      	bne.n	800447e <HAL_RCC_OscConfig+0x1e>
 800447c:	e07c      	b.n	8004578 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800447e:	4bc3      	ldr	r3, [pc, #780]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	2238      	movs	r2, #56	; 0x38
 8004484:	4013      	ands	r3, r2
 8004486:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004488:	4bc0      	ldr	r3, [pc, #768]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	2203      	movs	r2, #3
 800448e:	4013      	ands	r3, r2
 8004490:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	2b10      	cmp	r3, #16
 8004496:	d102      	bne.n	800449e <HAL_RCC_OscConfig+0x3e>
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	2b03      	cmp	r3, #3
 800449c:	d002      	beq.n	80044a4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d10b      	bne.n	80044bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a4:	4bb9      	ldr	r3, [pc, #740]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	2380      	movs	r3, #128	; 0x80
 80044aa:	029b      	lsls	r3, r3, #10
 80044ac:	4013      	ands	r3, r2
 80044ae:	d062      	beq.n	8004576 <HAL_RCC_OscConfig+0x116>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d15e      	bne.n	8004576 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e2d9      	b.n	8004a70 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	2380      	movs	r3, #128	; 0x80
 80044c2:	025b      	lsls	r3, r3, #9
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d107      	bne.n	80044d8 <HAL_RCC_OscConfig+0x78>
 80044c8:	4bb0      	ldr	r3, [pc, #704]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	4baf      	ldr	r3, [pc, #700]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 80044ce:	2180      	movs	r1, #128	; 0x80
 80044d0:	0249      	lsls	r1, r1, #9
 80044d2:	430a      	orrs	r2, r1
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	e020      	b.n	800451a <HAL_RCC_OscConfig+0xba>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	23a0      	movs	r3, #160	; 0xa0
 80044de:	02db      	lsls	r3, r3, #11
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d10e      	bne.n	8004502 <HAL_RCC_OscConfig+0xa2>
 80044e4:	4ba9      	ldr	r3, [pc, #676]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	4ba8      	ldr	r3, [pc, #672]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 80044ea:	2180      	movs	r1, #128	; 0x80
 80044ec:	02c9      	lsls	r1, r1, #11
 80044ee:	430a      	orrs	r2, r1
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	4ba6      	ldr	r3, [pc, #664]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	4ba5      	ldr	r3, [pc, #660]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 80044f8:	2180      	movs	r1, #128	; 0x80
 80044fa:	0249      	lsls	r1, r1, #9
 80044fc:	430a      	orrs	r2, r1
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	e00b      	b.n	800451a <HAL_RCC_OscConfig+0xba>
 8004502:	4ba2      	ldr	r3, [pc, #648]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	4ba1      	ldr	r3, [pc, #644]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 8004508:	49a1      	ldr	r1, [pc, #644]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 800450a:	400a      	ands	r2, r1
 800450c:	601a      	str	r2, [r3, #0]
 800450e:	4b9f      	ldr	r3, [pc, #636]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	4b9e      	ldr	r3, [pc, #632]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 8004514:	499f      	ldr	r1, [pc, #636]	; (8004794 <HAL_RCC_OscConfig+0x334>)
 8004516:	400a      	ands	r2, r1
 8004518:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d014      	beq.n	800454c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004522:	f7ff fb39 	bl	8003b98 <HAL_GetTick>
 8004526:	0003      	movs	r3, r0
 8004528:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800452c:	f7ff fb34 	bl	8003b98 <HAL_GetTick>
 8004530:	0002      	movs	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b64      	cmp	r3, #100	; 0x64
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e298      	b.n	8004a70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800453e:	4b93      	ldr	r3, [pc, #588]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	2380      	movs	r3, #128	; 0x80
 8004544:	029b      	lsls	r3, r3, #10
 8004546:	4013      	ands	r3, r2
 8004548:	d0f0      	beq.n	800452c <HAL_RCC_OscConfig+0xcc>
 800454a:	e015      	b.n	8004578 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454c:	f7ff fb24 	bl	8003b98 <HAL_GetTick>
 8004550:	0003      	movs	r3, r0
 8004552:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004554:	e008      	b.n	8004568 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004556:	f7ff fb1f 	bl	8003b98 <HAL_GetTick>
 800455a:	0002      	movs	r2, r0
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b64      	cmp	r3, #100	; 0x64
 8004562:	d901      	bls.n	8004568 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e283      	b.n	8004a70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004568:	4b88      	ldr	r3, [pc, #544]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	2380      	movs	r3, #128	; 0x80
 800456e:	029b      	lsls	r3, r3, #10
 8004570:	4013      	ands	r3, r2
 8004572:	d1f0      	bne.n	8004556 <HAL_RCC_OscConfig+0xf6>
 8004574:	e000      	b.n	8004578 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004576:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2202      	movs	r2, #2
 800457e:	4013      	ands	r3, r2
 8004580:	d100      	bne.n	8004584 <HAL_RCC_OscConfig+0x124>
 8004582:	e099      	b.n	80046b8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004584:	4b81      	ldr	r3, [pc, #516]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	2238      	movs	r2, #56	; 0x38
 800458a:	4013      	ands	r3, r2
 800458c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800458e:	4b7f      	ldr	r3, [pc, #508]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	2203      	movs	r2, #3
 8004594:	4013      	ands	r3, r2
 8004596:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	2b10      	cmp	r3, #16
 800459c:	d102      	bne.n	80045a4 <HAL_RCC_OscConfig+0x144>
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d002      	beq.n	80045aa <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d135      	bne.n	8004616 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045aa:	4b78      	ldr	r3, [pc, #480]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	2380      	movs	r3, #128	; 0x80
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	4013      	ands	r3, r2
 80045b4:	d005      	beq.n	80045c2 <HAL_RCC_OscConfig+0x162>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e256      	b.n	8004a70 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c2:	4b72      	ldr	r3, [pc, #456]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	4a74      	ldr	r2, [pc, #464]	; (8004798 <HAL_RCC_OscConfig+0x338>)
 80045c8:	4013      	ands	r3, r2
 80045ca:	0019      	movs	r1, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	021a      	lsls	r2, r3, #8
 80045d2:	4b6e      	ldr	r3, [pc, #440]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 80045d4:	430a      	orrs	r2, r1
 80045d6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d112      	bne.n	8004604 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80045de:	4b6b      	ldr	r3, [pc, #428]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a6e      	ldr	r2, [pc, #440]	; (800479c <HAL_RCC_OscConfig+0x33c>)
 80045e4:	4013      	ands	r3, r2
 80045e6:	0019      	movs	r1, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	4b67      	ldr	r3, [pc, #412]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 80045ee:	430a      	orrs	r2, r1
 80045f0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80045f2:	4b66      	ldr	r3, [pc, #408]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	0adb      	lsrs	r3, r3, #11
 80045f8:	2207      	movs	r2, #7
 80045fa:	4013      	ands	r3, r2
 80045fc:	4a68      	ldr	r2, [pc, #416]	; (80047a0 <HAL_RCC_OscConfig+0x340>)
 80045fe:	40da      	lsrs	r2, r3
 8004600:	4b68      	ldr	r3, [pc, #416]	; (80047a4 <HAL_RCC_OscConfig+0x344>)
 8004602:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004604:	4b68      	ldr	r3, [pc, #416]	; (80047a8 <HAL_RCC_OscConfig+0x348>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	0018      	movs	r0, r3
 800460a:	f7ff fa69 	bl	8003ae0 <HAL_InitTick>
 800460e:	1e03      	subs	r3, r0, #0
 8004610:	d051      	beq.n	80046b6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e22c      	b.n	8004a70 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d030      	beq.n	8004680 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800461e:	4b5b      	ldr	r3, [pc, #364]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a5e      	ldr	r2, [pc, #376]	; (800479c <HAL_RCC_OscConfig+0x33c>)
 8004624:	4013      	ands	r3, r2
 8004626:	0019      	movs	r1, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	691a      	ldr	r2, [r3, #16]
 800462c:	4b57      	ldr	r3, [pc, #348]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 800462e:	430a      	orrs	r2, r1
 8004630:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004632:	4b56      	ldr	r3, [pc, #344]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	4b55      	ldr	r3, [pc, #340]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 8004638:	2180      	movs	r1, #128	; 0x80
 800463a:	0049      	lsls	r1, r1, #1
 800463c:	430a      	orrs	r2, r1
 800463e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004640:	f7ff faaa 	bl	8003b98 <HAL_GetTick>
 8004644:	0003      	movs	r3, r0
 8004646:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004648:	e008      	b.n	800465c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800464a:	f7ff faa5 	bl	8003b98 <HAL_GetTick>
 800464e:	0002      	movs	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e209      	b.n	8004a70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800465c:	4b4b      	ldr	r3, [pc, #300]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	2380      	movs	r3, #128	; 0x80
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	4013      	ands	r3, r2
 8004666:	d0f0      	beq.n	800464a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004668:	4b48      	ldr	r3, [pc, #288]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	4a4a      	ldr	r2, [pc, #296]	; (8004798 <HAL_RCC_OscConfig+0x338>)
 800466e:	4013      	ands	r3, r2
 8004670:	0019      	movs	r1, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	021a      	lsls	r2, r3, #8
 8004678:	4b44      	ldr	r3, [pc, #272]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 800467a:	430a      	orrs	r2, r1
 800467c:	605a      	str	r2, [r3, #4]
 800467e:	e01b      	b.n	80046b8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004680:	4b42      	ldr	r3, [pc, #264]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	4b41      	ldr	r3, [pc, #260]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 8004686:	4949      	ldr	r1, [pc, #292]	; (80047ac <HAL_RCC_OscConfig+0x34c>)
 8004688:	400a      	ands	r2, r1
 800468a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468c:	f7ff fa84 	bl	8003b98 <HAL_GetTick>
 8004690:	0003      	movs	r3, r0
 8004692:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004694:	e008      	b.n	80046a8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004696:	f7ff fa7f 	bl	8003b98 <HAL_GetTick>
 800469a:	0002      	movs	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e1e3      	b.n	8004a70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046a8:	4b38      	ldr	r3, [pc, #224]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	2380      	movs	r3, #128	; 0x80
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	4013      	ands	r3, r2
 80046b2:	d1f0      	bne.n	8004696 <HAL_RCC_OscConfig+0x236>
 80046b4:	e000      	b.n	80046b8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046b6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2208      	movs	r2, #8
 80046be:	4013      	ands	r3, r2
 80046c0:	d047      	beq.n	8004752 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80046c2:	4b32      	ldr	r3, [pc, #200]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	2238      	movs	r2, #56	; 0x38
 80046c8:	4013      	ands	r3, r2
 80046ca:	2b18      	cmp	r3, #24
 80046cc:	d10a      	bne.n	80046e4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80046ce:	4b2f      	ldr	r3, [pc, #188]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 80046d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046d2:	2202      	movs	r2, #2
 80046d4:	4013      	ands	r3, r2
 80046d6:	d03c      	beq.n	8004752 <HAL_RCC_OscConfig+0x2f2>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d138      	bne.n	8004752 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e1c5      	b.n	8004a70 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d019      	beq.n	8004720 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80046ec:	4b27      	ldr	r3, [pc, #156]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 80046ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80046f0:	4b26      	ldr	r3, [pc, #152]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 80046f2:	2101      	movs	r1, #1
 80046f4:	430a      	orrs	r2, r1
 80046f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f8:	f7ff fa4e 	bl	8003b98 <HAL_GetTick>
 80046fc:	0003      	movs	r3, r0
 80046fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004700:	e008      	b.n	8004714 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004702:	f7ff fa49 	bl	8003b98 <HAL_GetTick>
 8004706:	0002      	movs	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e1ad      	b.n	8004a70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004714:	4b1d      	ldr	r3, [pc, #116]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 8004716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004718:	2202      	movs	r2, #2
 800471a:	4013      	ands	r3, r2
 800471c:	d0f1      	beq.n	8004702 <HAL_RCC_OscConfig+0x2a2>
 800471e:	e018      	b.n	8004752 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004720:	4b1a      	ldr	r3, [pc, #104]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 8004722:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004724:	4b19      	ldr	r3, [pc, #100]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 8004726:	2101      	movs	r1, #1
 8004728:	438a      	bics	r2, r1
 800472a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472c:	f7ff fa34 	bl	8003b98 <HAL_GetTick>
 8004730:	0003      	movs	r3, r0
 8004732:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004734:	e008      	b.n	8004748 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004736:	f7ff fa2f 	bl	8003b98 <HAL_GetTick>
 800473a:	0002      	movs	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e193      	b.n	8004a70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004748:	4b10      	ldr	r3, [pc, #64]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 800474a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800474c:	2202      	movs	r2, #2
 800474e:	4013      	ands	r3, r2
 8004750:	d1f1      	bne.n	8004736 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2204      	movs	r2, #4
 8004758:	4013      	ands	r3, r2
 800475a:	d100      	bne.n	800475e <HAL_RCC_OscConfig+0x2fe>
 800475c:	e0c6      	b.n	80048ec <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800475e:	231f      	movs	r3, #31
 8004760:	18fb      	adds	r3, r7, r3
 8004762:	2200      	movs	r2, #0
 8004764:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004766:	4b09      	ldr	r3, [pc, #36]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	2238      	movs	r2, #56	; 0x38
 800476c:	4013      	ands	r3, r2
 800476e:	2b20      	cmp	r3, #32
 8004770:	d11e      	bne.n	80047b0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004772:	4b06      	ldr	r3, [pc, #24]	; (800478c <HAL_RCC_OscConfig+0x32c>)
 8004774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004776:	2202      	movs	r2, #2
 8004778:	4013      	ands	r3, r2
 800477a:	d100      	bne.n	800477e <HAL_RCC_OscConfig+0x31e>
 800477c:	e0b6      	b.n	80048ec <HAL_RCC_OscConfig+0x48c>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d000      	beq.n	8004788 <HAL_RCC_OscConfig+0x328>
 8004786:	e0b1      	b.n	80048ec <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e171      	b.n	8004a70 <HAL_RCC_OscConfig+0x610>
 800478c:	40021000 	.word	0x40021000
 8004790:	fffeffff 	.word	0xfffeffff
 8004794:	fffbffff 	.word	0xfffbffff
 8004798:	ffff80ff 	.word	0xffff80ff
 800479c:	ffffc7ff 	.word	0xffffc7ff
 80047a0:	00f42400 	.word	0x00f42400
 80047a4:	20000024 	.word	0x20000024
 80047a8:	20000028 	.word	0x20000028
 80047ac:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047b0:	4bb1      	ldr	r3, [pc, #708]	; (8004a78 <HAL_RCC_OscConfig+0x618>)
 80047b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047b4:	2380      	movs	r3, #128	; 0x80
 80047b6:	055b      	lsls	r3, r3, #21
 80047b8:	4013      	ands	r3, r2
 80047ba:	d101      	bne.n	80047c0 <HAL_RCC_OscConfig+0x360>
 80047bc:	2301      	movs	r3, #1
 80047be:	e000      	b.n	80047c2 <HAL_RCC_OscConfig+0x362>
 80047c0:	2300      	movs	r3, #0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d011      	beq.n	80047ea <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80047c6:	4bac      	ldr	r3, [pc, #688]	; (8004a78 <HAL_RCC_OscConfig+0x618>)
 80047c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047ca:	4bab      	ldr	r3, [pc, #684]	; (8004a78 <HAL_RCC_OscConfig+0x618>)
 80047cc:	2180      	movs	r1, #128	; 0x80
 80047ce:	0549      	lsls	r1, r1, #21
 80047d0:	430a      	orrs	r2, r1
 80047d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80047d4:	4ba8      	ldr	r3, [pc, #672]	; (8004a78 <HAL_RCC_OscConfig+0x618>)
 80047d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047d8:	2380      	movs	r3, #128	; 0x80
 80047da:	055b      	lsls	r3, r3, #21
 80047dc:	4013      	ands	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80047e2:	231f      	movs	r3, #31
 80047e4:	18fb      	adds	r3, r7, r3
 80047e6:	2201      	movs	r2, #1
 80047e8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ea:	4ba4      	ldr	r3, [pc, #656]	; (8004a7c <HAL_RCC_OscConfig+0x61c>)
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	2380      	movs	r3, #128	; 0x80
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	4013      	ands	r3, r2
 80047f4:	d11a      	bne.n	800482c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047f6:	4ba1      	ldr	r3, [pc, #644]	; (8004a7c <HAL_RCC_OscConfig+0x61c>)
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	4ba0      	ldr	r3, [pc, #640]	; (8004a7c <HAL_RCC_OscConfig+0x61c>)
 80047fc:	2180      	movs	r1, #128	; 0x80
 80047fe:	0049      	lsls	r1, r1, #1
 8004800:	430a      	orrs	r2, r1
 8004802:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004804:	f7ff f9c8 	bl	8003b98 <HAL_GetTick>
 8004808:	0003      	movs	r3, r0
 800480a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800480c:	e008      	b.n	8004820 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800480e:	f7ff f9c3 	bl	8003b98 <HAL_GetTick>
 8004812:	0002      	movs	r2, r0
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b02      	cmp	r3, #2
 800481a:	d901      	bls.n	8004820 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e127      	b.n	8004a70 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004820:	4b96      	ldr	r3, [pc, #600]	; (8004a7c <HAL_RCC_OscConfig+0x61c>)
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	2380      	movs	r3, #128	; 0x80
 8004826:	005b      	lsls	r3, r3, #1
 8004828:	4013      	ands	r3, r2
 800482a:	d0f0      	beq.n	800480e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d106      	bne.n	8004842 <HAL_RCC_OscConfig+0x3e2>
 8004834:	4b90      	ldr	r3, [pc, #576]	; (8004a78 <HAL_RCC_OscConfig+0x618>)
 8004836:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004838:	4b8f      	ldr	r3, [pc, #572]	; (8004a78 <HAL_RCC_OscConfig+0x618>)
 800483a:	2101      	movs	r1, #1
 800483c:	430a      	orrs	r2, r1
 800483e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004840:	e01c      	b.n	800487c <HAL_RCC_OscConfig+0x41c>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	2b05      	cmp	r3, #5
 8004848:	d10c      	bne.n	8004864 <HAL_RCC_OscConfig+0x404>
 800484a:	4b8b      	ldr	r3, [pc, #556]	; (8004a78 <HAL_RCC_OscConfig+0x618>)
 800484c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800484e:	4b8a      	ldr	r3, [pc, #552]	; (8004a78 <HAL_RCC_OscConfig+0x618>)
 8004850:	2104      	movs	r1, #4
 8004852:	430a      	orrs	r2, r1
 8004854:	65da      	str	r2, [r3, #92]	; 0x5c
 8004856:	4b88      	ldr	r3, [pc, #544]	; (8004a78 <HAL_RCC_OscConfig+0x618>)
 8004858:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800485a:	4b87      	ldr	r3, [pc, #540]	; (8004a78 <HAL_RCC_OscConfig+0x618>)
 800485c:	2101      	movs	r1, #1
 800485e:	430a      	orrs	r2, r1
 8004860:	65da      	str	r2, [r3, #92]	; 0x5c
 8004862:	e00b      	b.n	800487c <HAL_RCC_OscConfig+0x41c>
 8004864:	4b84      	ldr	r3, [pc, #528]	; (8004a78 <HAL_RCC_OscConfig+0x618>)
 8004866:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004868:	4b83      	ldr	r3, [pc, #524]	; (8004a78 <HAL_RCC_OscConfig+0x618>)
 800486a:	2101      	movs	r1, #1
 800486c:	438a      	bics	r2, r1
 800486e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004870:	4b81      	ldr	r3, [pc, #516]	; (8004a78 <HAL_RCC_OscConfig+0x618>)
 8004872:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004874:	4b80      	ldr	r3, [pc, #512]	; (8004a78 <HAL_RCC_OscConfig+0x618>)
 8004876:	2104      	movs	r1, #4
 8004878:	438a      	bics	r2, r1
 800487a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d014      	beq.n	80048ae <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004884:	f7ff f988 	bl	8003b98 <HAL_GetTick>
 8004888:	0003      	movs	r3, r0
 800488a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800488c:	e009      	b.n	80048a2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800488e:	f7ff f983 	bl	8003b98 <HAL_GetTick>
 8004892:	0002      	movs	r2, r0
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	4a79      	ldr	r2, [pc, #484]	; (8004a80 <HAL_RCC_OscConfig+0x620>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e0e6      	b.n	8004a70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048a2:	4b75      	ldr	r3, [pc, #468]	; (8004a78 <HAL_RCC_OscConfig+0x618>)
 80048a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a6:	2202      	movs	r2, #2
 80048a8:	4013      	ands	r3, r2
 80048aa:	d0f0      	beq.n	800488e <HAL_RCC_OscConfig+0x42e>
 80048ac:	e013      	b.n	80048d6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ae:	f7ff f973 	bl	8003b98 <HAL_GetTick>
 80048b2:	0003      	movs	r3, r0
 80048b4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048b6:	e009      	b.n	80048cc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b8:	f7ff f96e 	bl	8003b98 <HAL_GetTick>
 80048bc:	0002      	movs	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	4a6f      	ldr	r2, [pc, #444]	; (8004a80 <HAL_RCC_OscConfig+0x620>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e0d1      	b.n	8004a70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048cc:	4b6a      	ldr	r3, [pc, #424]	; (8004a78 <HAL_RCC_OscConfig+0x618>)
 80048ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d0:	2202      	movs	r2, #2
 80048d2:	4013      	ands	r3, r2
 80048d4:	d1f0      	bne.n	80048b8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80048d6:	231f      	movs	r3, #31
 80048d8:	18fb      	adds	r3, r7, r3
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d105      	bne.n	80048ec <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80048e0:	4b65      	ldr	r3, [pc, #404]	; (8004a78 <HAL_RCC_OscConfig+0x618>)
 80048e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048e4:	4b64      	ldr	r3, [pc, #400]	; (8004a78 <HAL_RCC_OscConfig+0x618>)
 80048e6:	4967      	ldr	r1, [pc, #412]	; (8004a84 <HAL_RCC_OscConfig+0x624>)
 80048e8:	400a      	ands	r2, r1
 80048ea:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	69db      	ldr	r3, [r3, #28]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d100      	bne.n	80048f6 <HAL_RCC_OscConfig+0x496>
 80048f4:	e0bb      	b.n	8004a6e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048f6:	4b60      	ldr	r3, [pc, #384]	; (8004a78 <HAL_RCC_OscConfig+0x618>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	2238      	movs	r2, #56	; 0x38
 80048fc:	4013      	ands	r3, r2
 80048fe:	2b10      	cmp	r3, #16
 8004900:	d100      	bne.n	8004904 <HAL_RCC_OscConfig+0x4a4>
 8004902:	e07b      	b.n	80049fc <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	69db      	ldr	r3, [r3, #28]
 8004908:	2b02      	cmp	r3, #2
 800490a:	d156      	bne.n	80049ba <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800490c:	4b5a      	ldr	r3, [pc, #360]	; (8004a78 <HAL_RCC_OscConfig+0x618>)
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	4b59      	ldr	r3, [pc, #356]	; (8004a78 <HAL_RCC_OscConfig+0x618>)
 8004912:	495d      	ldr	r1, [pc, #372]	; (8004a88 <HAL_RCC_OscConfig+0x628>)
 8004914:	400a      	ands	r2, r1
 8004916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004918:	f7ff f93e 	bl	8003b98 <HAL_GetTick>
 800491c:	0003      	movs	r3, r0
 800491e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004920:	e008      	b.n	8004934 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004922:	f7ff f939 	bl	8003b98 <HAL_GetTick>
 8004926:	0002      	movs	r2, r0
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d901      	bls.n	8004934 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e09d      	b.n	8004a70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004934:	4b50      	ldr	r3, [pc, #320]	; (8004a78 <HAL_RCC_OscConfig+0x618>)
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	2380      	movs	r3, #128	; 0x80
 800493a:	049b      	lsls	r3, r3, #18
 800493c:	4013      	ands	r3, r2
 800493e:	d1f0      	bne.n	8004922 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004940:	4b4d      	ldr	r3, [pc, #308]	; (8004a78 <HAL_RCC_OscConfig+0x618>)
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	4a51      	ldr	r2, [pc, #324]	; (8004a8c <HAL_RCC_OscConfig+0x62c>)
 8004946:	4013      	ands	r3, r2
 8004948:	0019      	movs	r1, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a1a      	ldr	r2, [r3, #32]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004958:	021b      	lsls	r3, r3, #8
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004960:	431a      	orrs	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800496c:	431a      	orrs	r2, r3
 800496e:	4b42      	ldr	r3, [pc, #264]	; (8004a78 <HAL_RCC_OscConfig+0x618>)
 8004970:	430a      	orrs	r2, r1
 8004972:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004974:	4b40      	ldr	r3, [pc, #256]	; (8004a78 <HAL_RCC_OscConfig+0x618>)
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	4b3f      	ldr	r3, [pc, #252]	; (8004a78 <HAL_RCC_OscConfig+0x618>)
 800497a:	2180      	movs	r1, #128	; 0x80
 800497c:	0449      	lsls	r1, r1, #17
 800497e:	430a      	orrs	r2, r1
 8004980:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004982:	4b3d      	ldr	r3, [pc, #244]	; (8004a78 <HAL_RCC_OscConfig+0x618>)
 8004984:	68da      	ldr	r2, [r3, #12]
 8004986:	4b3c      	ldr	r3, [pc, #240]	; (8004a78 <HAL_RCC_OscConfig+0x618>)
 8004988:	2180      	movs	r1, #128	; 0x80
 800498a:	0549      	lsls	r1, r1, #21
 800498c:	430a      	orrs	r2, r1
 800498e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004990:	f7ff f902 	bl	8003b98 <HAL_GetTick>
 8004994:	0003      	movs	r3, r0
 8004996:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004998:	e008      	b.n	80049ac <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800499a:	f7ff f8fd 	bl	8003b98 <HAL_GetTick>
 800499e:	0002      	movs	r2, r0
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e061      	b.n	8004a70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ac:	4b32      	ldr	r3, [pc, #200]	; (8004a78 <HAL_RCC_OscConfig+0x618>)
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	2380      	movs	r3, #128	; 0x80
 80049b2:	049b      	lsls	r3, r3, #18
 80049b4:	4013      	ands	r3, r2
 80049b6:	d0f0      	beq.n	800499a <HAL_RCC_OscConfig+0x53a>
 80049b8:	e059      	b.n	8004a6e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ba:	4b2f      	ldr	r3, [pc, #188]	; (8004a78 <HAL_RCC_OscConfig+0x618>)
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	4b2e      	ldr	r3, [pc, #184]	; (8004a78 <HAL_RCC_OscConfig+0x618>)
 80049c0:	4931      	ldr	r1, [pc, #196]	; (8004a88 <HAL_RCC_OscConfig+0x628>)
 80049c2:	400a      	ands	r2, r1
 80049c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c6:	f7ff f8e7 	bl	8003b98 <HAL_GetTick>
 80049ca:	0003      	movs	r3, r0
 80049cc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049d0:	f7ff f8e2 	bl	8003b98 <HAL_GetTick>
 80049d4:	0002      	movs	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e046      	b.n	8004a70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049e2:	4b25      	ldr	r3, [pc, #148]	; (8004a78 <HAL_RCC_OscConfig+0x618>)
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	2380      	movs	r3, #128	; 0x80
 80049e8:	049b      	lsls	r3, r3, #18
 80049ea:	4013      	ands	r3, r2
 80049ec:	d1f0      	bne.n	80049d0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80049ee:	4b22      	ldr	r3, [pc, #136]	; (8004a78 <HAL_RCC_OscConfig+0x618>)
 80049f0:	68da      	ldr	r2, [r3, #12]
 80049f2:	4b21      	ldr	r3, [pc, #132]	; (8004a78 <HAL_RCC_OscConfig+0x618>)
 80049f4:	4926      	ldr	r1, [pc, #152]	; (8004a90 <HAL_RCC_OscConfig+0x630>)
 80049f6:	400a      	ands	r2, r1
 80049f8:	60da      	str	r2, [r3, #12]
 80049fa:	e038      	b.n	8004a6e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	69db      	ldr	r3, [r3, #28]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d101      	bne.n	8004a08 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e033      	b.n	8004a70 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004a08:	4b1b      	ldr	r3, [pc, #108]	; (8004a78 <HAL_RCC_OscConfig+0x618>)
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	2203      	movs	r2, #3
 8004a12:	401a      	ands	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d126      	bne.n	8004a6a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	2270      	movs	r2, #112	; 0x70
 8004a20:	401a      	ands	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d11f      	bne.n	8004a6a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	23fe      	movs	r3, #254	; 0xfe
 8004a2e:	01db      	lsls	r3, r3, #7
 8004a30:	401a      	ands	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a36:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d116      	bne.n	8004a6a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	23f8      	movs	r3, #248	; 0xf8
 8004a40:	039b      	lsls	r3, r3, #14
 8004a42:	401a      	ands	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d10e      	bne.n	8004a6a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	23e0      	movs	r3, #224	; 0xe0
 8004a50:	051b      	lsls	r3, r3, #20
 8004a52:	401a      	ands	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d106      	bne.n	8004a6a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	0f5b      	lsrs	r3, r3, #29
 8004a60:	075a      	lsls	r2, r3, #29
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d001      	beq.n	8004a6e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e000      	b.n	8004a70 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	0018      	movs	r0, r3
 8004a72:	46bd      	mov	sp, r7
 8004a74:	b008      	add	sp, #32
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	40007000 	.word	0x40007000
 8004a80:	00001388 	.word	0x00001388
 8004a84:	efffffff 	.word	0xefffffff
 8004a88:	feffffff 	.word	0xfeffffff
 8004a8c:	11c1808c 	.word	0x11c1808c
 8004a90:	eefefffc 	.word	0xeefefffc

08004a94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e0e9      	b.n	8004c7c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004aa8:	4b76      	ldr	r3, [pc, #472]	; (8004c84 <HAL_RCC_ClockConfig+0x1f0>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2207      	movs	r2, #7
 8004aae:	4013      	ands	r3, r2
 8004ab0:	683a      	ldr	r2, [r7, #0]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d91e      	bls.n	8004af4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ab6:	4b73      	ldr	r3, [pc, #460]	; (8004c84 <HAL_RCC_ClockConfig+0x1f0>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2207      	movs	r2, #7
 8004abc:	4393      	bics	r3, r2
 8004abe:	0019      	movs	r1, r3
 8004ac0:	4b70      	ldr	r3, [pc, #448]	; (8004c84 <HAL_RCC_ClockConfig+0x1f0>)
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004ac8:	f7ff f866 	bl	8003b98 <HAL_GetTick>
 8004acc:	0003      	movs	r3, r0
 8004ace:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004ad0:	e009      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ad2:	f7ff f861 	bl	8003b98 <HAL_GetTick>
 8004ad6:	0002      	movs	r2, r0
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	4a6a      	ldr	r2, [pc, #424]	; (8004c88 <HAL_RCC_ClockConfig+0x1f4>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e0ca      	b.n	8004c7c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004ae6:	4b67      	ldr	r3, [pc, #412]	; (8004c84 <HAL_RCC_ClockConfig+0x1f0>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2207      	movs	r2, #7
 8004aec:	4013      	ands	r3, r2
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d1ee      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2202      	movs	r2, #2
 8004afa:	4013      	ands	r3, r2
 8004afc:	d015      	beq.n	8004b2a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2204      	movs	r2, #4
 8004b04:	4013      	ands	r3, r2
 8004b06:	d006      	beq.n	8004b16 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004b08:	4b60      	ldr	r3, [pc, #384]	; (8004c8c <HAL_RCC_ClockConfig+0x1f8>)
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	4b5f      	ldr	r3, [pc, #380]	; (8004c8c <HAL_RCC_ClockConfig+0x1f8>)
 8004b0e:	21e0      	movs	r1, #224	; 0xe0
 8004b10:	01c9      	lsls	r1, r1, #7
 8004b12:	430a      	orrs	r2, r1
 8004b14:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b16:	4b5d      	ldr	r3, [pc, #372]	; (8004c8c <HAL_RCC_ClockConfig+0x1f8>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	4a5d      	ldr	r2, [pc, #372]	; (8004c90 <HAL_RCC_ClockConfig+0x1fc>)
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	0019      	movs	r1, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689a      	ldr	r2, [r3, #8]
 8004b24:	4b59      	ldr	r3, [pc, #356]	; (8004c8c <HAL_RCC_ClockConfig+0x1f8>)
 8004b26:	430a      	orrs	r2, r1
 8004b28:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	4013      	ands	r3, r2
 8004b32:	d057      	beq.n	8004be4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d107      	bne.n	8004b4c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b3c:	4b53      	ldr	r3, [pc, #332]	; (8004c8c <HAL_RCC_ClockConfig+0x1f8>)
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	2380      	movs	r3, #128	; 0x80
 8004b42:	029b      	lsls	r3, r3, #10
 8004b44:	4013      	ands	r3, r2
 8004b46:	d12b      	bne.n	8004ba0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e097      	b.n	8004c7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d107      	bne.n	8004b64 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b54:	4b4d      	ldr	r3, [pc, #308]	; (8004c8c <HAL_RCC_ClockConfig+0x1f8>)
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	2380      	movs	r3, #128	; 0x80
 8004b5a:	049b      	lsls	r3, r3, #18
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	d11f      	bne.n	8004ba0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e08b      	b.n	8004c7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d107      	bne.n	8004b7c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b6c:	4b47      	ldr	r3, [pc, #284]	; (8004c8c <HAL_RCC_ClockConfig+0x1f8>)
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	2380      	movs	r3, #128	; 0x80
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	4013      	ands	r3, r2
 8004b76:	d113      	bne.n	8004ba0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e07f      	b.n	8004c7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	2b03      	cmp	r3, #3
 8004b82:	d106      	bne.n	8004b92 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b84:	4b41      	ldr	r3, [pc, #260]	; (8004c8c <HAL_RCC_ClockConfig+0x1f8>)
 8004b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b88:	2202      	movs	r2, #2
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	d108      	bne.n	8004ba0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e074      	b.n	8004c7c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b92:	4b3e      	ldr	r3, [pc, #248]	; (8004c8c <HAL_RCC_ClockConfig+0x1f8>)
 8004b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b96:	2202      	movs	r2, #2
 8004b98:	4013      	ands	r3, r2
 8004b9a:	d101      	bne.n	8004ba0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e06d      	b.n	8004c7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ba0:	4b3a      	ldr	r3, [pc, #232]	; (8004c8c <HAL_RCC_ClockConfig+0x1f8>)
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	2207      	movs	r2, #7
 8004ba6:	4393      	bics	r3, r2
 8004ba8:	0019      	movs	r1, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	4b37      	ldr	r3, [pc, #220]	; (8004c8c <HAL_RCC_ClockConfig+0x1f8>)
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bb4:	f7fe fff0 	bl	8003b98 <HAL_GetTick>
 8004bb8:	0003      	movs	r3, r0
 8004bba:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bbc:	e009      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bbe:	f7fe ffeb 	bl	8003b98 <HAL_GetTick>
 8004bc2:	0002      	movs	r2, r0
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	4a2f      	ldr	r2, [pc, #188]	; (8004c88 <HAL_RCC_ClockConfig+0x1f4>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e054      	b.n	8004c7c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bd2:	4b2e      	ldr	r3, [pc, #184]	; (8004c8c <HAL_RCC_ClockConfig+0x1f8>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	2238      	movs	r2, #56	; 0x38
 8004bd8:	401a      	ands	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d1ec      	bne.n	8004bbe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004be4:	4b27      	ldr	r3, [pc, #156]	; (8004c84 <HAL_RCC_ClockConfig+0x1f0>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2207      	movs	r2, #7
 8004bea:	4013      	ands	r3, r2
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d21e      	bcs.n	8004c30 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bf2:	4b24      	ldr	r3, [pc, #144]	; (8004c84 <HAL_RCC_ClockConfig+0x1f0>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2207      	movs	r2, #7
 8004bf8:	4393      	bics	r3, r2
 8004bfa:	0019      	movs	r1, r3
 8004bfc:	4b21      	ldr	r3, [pc, #132]	; (8004c84 <HAL_RCC_ClockConfig+0x1f0>)
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	430a      	orrs	r2, r1
 8004c02:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c04:	f7fe ffc8 	bl	8003b98 <HAL_GetTick>
 8004c08:	0003      	movs	r3, r0
 8004c0a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c0c:	e009      	b.n	8004c22 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c0e:	f7fe ffc3 	bl	8003b98 <HAL_GetTick>
 8004c12:	0002      	movs	r2, r0
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	4a1b      	ldr	r2, [pc, #108]	; (8004c88 <HAL_RCC_ClockConfig+0x1f4>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e02c      	b.n	8004c7c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c22:	4b18      	ldr	r3, [pc, #96]	; (8004c84 <HAL_RCC_ClockConfig+0x1f0>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2207      	movs	r2, #7
 8004c28:	4013      	ands	r3, r2
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d1ee      	bne.n	8004c0e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2204      	movs	r2, #4
 8004c36:	4013      	ands	r3, r2
 8004c38:	d009      	beq.n	8004c4e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004c3a:	4b14      	ldr	r3, [pc, #80]	; (8004c8c <HAL_RCC_ClockConfig+0x1f8>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	4a15      	ldr	r2, [pc, #84]	; (8004c94 <HAL_RCC_ClockConfig+0x200>)
 8004c40:	4013      	ands	r3, r2
 8004c42:	0019      	movs	r1, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68da      	ldr	r2, [r3, #12]
 8004c48:	4b10      	ldr	r3, [pc, #64]	; (8004c8c <HAL_RCC_ClockConfig+0x1f8>)
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004c4e:	f000 f829 	bl	8004ca4 <HAL_RCC_GetSysClockFreq>
 8004c52:	0001      	movs	r1, r0
 8004c54:	4b0d      	ldr	r3, [pc, #52]	; (8004c8c <HAL_RCC_ClockConfig+0x1f8>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	0a1b      	lsrs	r3, r3, #8
 8004c5a:	220f      	movs	r2, #15
 8004c5c:	401a      	ands	r2, r3
 8004c5e:	4b0e      	ldr	r3, [pc, #56]	; (8004c98 <HAL_RCC_ClockConfig+0x204>)
 8004c60:	0092      	lsls	r2, r2, #2
 8004c62:	58d3      	ldr	r3, [r2, r3]
 8004c64:	221f      	movs	r2, #31
 8004c66:	4013      	ands	r3, r2
 8004c68:	000a      	movs	r2, r1
 8004c6a:	40da      	lsrs	r2, r3
 8004c6c:	4b0b      	ldr	r3, [pc, #44]	; (8004c9c <HAL_RCC_ClockConfig+0x208>)
 8004c6e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004c70:	4b0b      	ldr	r3, [pc, #44]	; (8004ca0 <HAL_RCC_ClockConfig+0x20c>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	0018      	movs	r0, r3
 8004c76:	f7fe ff33 	bl	8003ae0 <HAL_InitTick>
 8004c7a:	0003      	movs	r3, r0
}
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	b004      	add	sp, #16
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	40022000 	.word	0x40022000
 8004c88:	00001388 	.word	0x00001388
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	fffff0ff 	.word	0xfffff0ff
 8004c94:	ffff8fff 	.word	0xffff8fff
 8004c98:	08014e5c 	.word	0x08014e5c
 8004c9c:	20000024 	.word	0x20000024
 8004ca0:	20000028 	.word	0x20000028

08004ca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004caa:	4b3c      	ldr	r3, [pc, #240]	; (8004d9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	2238      	movs	r2, #56	; 0x38
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	d10f      	bne.n	8004cd4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004cb4:	4b39      	ldr	r3, [pc, #228]	; (8004d9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	0adb      	lsrs	r3, r3, #11
 8004cba:	2207      	movs	r2, #7
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	409a      	lsls	r2, r3
 8004cc2:	0013      	movs	r3, r2
 8004cc4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004cc6:	6839      	ldr	r1, [r7, #0]
 8004cc8:	4835      	ldr	r0, [pc, #212]	; (8004da0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004cca:	f7fb fa37 	bl	800013c <__udivsi3>
 8004cce:	0003      	movs	r3, r0
 8004cd0:	613b      	str	r3, [r7, #16]
 8004cd2:	e05d      	b.n	8004d90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004cd4:	4b31      	ldr	r3, [pc, #196]	; (8004d9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	2238      	movs	r2, #56	; 0x38
 8004cda:	4013      	ands	r3, r2
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d102      	bne.n	8004ce6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ce0:	4b30      	ldr	r3, [pc, #192]	; (8004da4 <HAL_RCC_GetSysClockFreq+0x100>)
 8004ce2:	613b      	str	r3, [r7, #16]
 8004ce4:	e054      	b.n	8004d90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ce6:	4b2d      	ldr	r3, [pc, #180]	; (8004d9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	2238      	movs	r2, #56	; 0x38
 8004cec:	4013      	ands	r3, r2
 8004cee:	2b10      	cmp	r3, #16
 8004cf0:	d138      	bne.n	8004d64 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004cf2:	4b2a      	ldr	r3, [pc, #168]	; (8004d9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	2203      	movs	r2, #3
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cfc:	4b27      	ldr	r3, [pc, #156]	; (8004d9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	091b      	lsrs	r3, r3, #4
 8004d02:	2207      	movs	r2, #7
 8004d04:	4013      	ands	r3, r2
 8004d06:	3301      	adds	r3, #1
 8004d08:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2b03      	cmp	r3, #3
 8004d0e:	d10d      	bne.n	8004d2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d10:	68b9      	ldr	r1, [r7, #8]
 8004d12:	4824      	ldr	r0, [pc, #144]	; (8004da4 <HAL_RCC_GetSysClockFreq+0x100>)
 8004d14:	f7fb fa12 	bl	800013c <__udivsi3>
 8004d18:	0003      	movs	r3, r0
 8004d1a:	0019      	movs	r1, r3
 8004d1c:	4b1f      	ldr	r3, [pc, #124]	; (8004d9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	0a1b      	lsrs	r3, r3, #8
 8004d22:	227f      	movs	r2, #127	; 0x7f
 8004d24:	4013      	ands	r3, r2
 8004d26:	434b      	muls	r3, r1
 8004d28:	617b      	str	r3, [r7, #20]
        break;
 8004d2a:	e00d      	b.n	8004d48 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004d2c:	68b9      	ldr	r1, [r7, #8]
 8004d2e:	481c      	ldr	r0, [pc, #112]	; (8004da0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004d30:	f7fb fa04 	bl	800013c <__udivsi3>
 8004d34:	0003      	movs	r3, r0
 8004d36:	0019      	movs	r1, r3
 8004d38:	4b18      	ldr	r3, [pc, #96]	; (8004d9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	0a1b      	lsrs	r3, r3, #8
 8004d3e:	227f      	movs	r2, #127	; 0x7f
 8004d40:	4013      	ands	r3, r2
 8004d42:	434b      	muls	r3, r1
 8004d44:	617b      	str	r3, [r7, #20]
        break;
 8004d46:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004d48:	4b14      	ldr	r3, [pc, #80]	; (8004d9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	0f5b      	lsrs	r3, r3, #29
 8004d4e:	2207      	movs	r2, #7
 8004d50:	4013      	ands	r3, r2
 8004d52:	3301      	adds	r3, #1
 8004d54:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004d56:	6879      	ldr	r1, [r7, #4]
 8004d58:	6978      	ldr	r0, [r7, #20]
 8004d5a:	f7fb f9ef 	bl	800013c <__udivsi3>
 8004d5e:	0003      	movs	r3, r0
 8004d60:	613b      	str	r3, [r7, #16]
 8004d62:	e015      	b.n	8004d90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004d64:	4b0d      	ldr	r3, [pc, #52]	; (8004d9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	2238      	movs	r2, #56	; 0x38
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	2b20      	cmp	r3, #32
 8004d6e:	d103      	bne.n	8004d78 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004d70:	2380      	movs	r3, #128	; 0x80
 8004d72:	021b      	lsls	r3, r3, #8
 8004d74:	613b      	str	r3, [r7, #16]
 8004d76:	e00b      	b.n	8004d90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004d78:	4b08      	ldr	r3, [pc, #32]	; (8004d9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	2238      	movs	r2, #56	; 0x38
 8004d7e:	4013      	ands	r3, r2
 8004d80:	2b18      	cmp	r3, #24
 8004d82:	d103      	bne.n	8004d8c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004d84:	23fa      	movs	r3, #250	; 0xfa
 8004d86:	01db      	lsls	r3, r3, #7
 8004d88:	613b      	str	r3, [r7, #16]
 8004d8a:	e001      	b.n	8004d90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004d90:	693b      	ldr	r3, [r7, #16]
}
 8004d92:	0018      	movs	r0, r3
 8004d94:	46bd      	mov	sp, r7
 8004d96:	b006      	add	sp, #24
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	46c0      	nop			; (mov r8, r8)
 8004d9c:	40021000 	.word	0x40021000
 8004da0:	00f42400 	.word	0x00f42400
 8004da4:	007a1200 	.word	0x007a1200

08004da8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dac:	4b02      	ldr	r3, [pc, #8]	; (8004db8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004dae:	681b      	ldr	r3, [r3, #0]
}
 8004db0:	0018      	movs	r0, r3
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	46c0      	nop			; (mov r8, r8)
 8004db8:	20000024 	.word	0x20000024

08004dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dbc:	b5b0      	push	{r4, r5, r7, lr}
 8004dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004dc0:	f7ff fff2 	bl	8004da8 <HAL_RCC_GetHCLKFreq>
 8004dc4:	0004      	movs	r4, r0
 8004dc6:	f7ff fb3f 	bl	8004448 <LL_RCC_GetAPB1Prescaler>
 8004dca:	0003      	movs	r3, r0
 8004dcc:	0b1a      	lsrs	r2, r3, #12
 8004dce:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004dd0:	0092      	lsls	r2, r2, #2
 8004dd2:	58d3      	ldr	r3, [r2, r3]
 8004dd4:	221f      	movs	r2, #31
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	40dc      	lsrs	r4, r3
 8004dda:	0023      	movs	r3, r4
}
 8004ddc:	0018      	movs	r0, r3
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bdb0      	pop	{r4, r5, r7, pc}
 8004de2:	46c0      	nop			; (mov r8, r8)
 8004de4:	08014e9c 	.word	0x08014e9c

08004de8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004df0:	2313      	movs	r3, #19
 8004df2:	18fb      	adds	r3, r7, r3
 8004df4:	2200      	movs	r2, #0
 8004df6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004df8:	2312      	movs	r3, #18
 8004dfa:	18fb      	adds	r3, r7, r3
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	2380      	movs	r3, #128	; 0x80
 8004e06:	029b      	lsls	r3, r3, #10
 8004e08:	4013      	ands	r3, r2
 8004e0a:	d100      	bne.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004e0c:	e0a3      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e0e:	2011      	movs	r0, #17
 8004e10:	183b      	adds	r3, r7, r0
 8004e12:	2200      	movs	r2, #0
 8004e14:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e16:	4bc3      	ldr	r3, [pc, #780]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e1a:	2380      	movs	r3, #128	; 0x80
 8004e1c:	055b      	lsls	r3, r3, #21
 8004e1e:	4013      	ands	r3, r2
 8004e20:	d110      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e22:	4bc0      	ldr	r3, [pc, #768]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e26:	4bbf      	ldr	r3, [pc, #764]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e28:	2180      	movs	r1, #128	; 0x80
 8004e2a:	0549      	lsls	r1, r1, #21
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004e30:	4bbc      	ldr	r3, [pc, #752]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e34:	2380      	movs	r3, #128	; 0x80
 8004e36:	055b      	lsls	r3, r3, #21
 8004e38:	4013      	ands	r3, r2
 8004e3a:	60bb      	str	r3, [r7, #8]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e3e:	183b      	adds	r3, r7, r0
 8004e40:	2201      	movs	r2, #1
 8004e42:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e44:	4bb8      	ldr	r3, [pc, #736]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	4bb7      	ldr	r3, [pc, #732]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004e4a:	2180      	movs	r1, #128	; 0x80
 8004e4c:	0049      	lsls	r1, r1, #1
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e52:	f7fe fea1 	bl	8003b98 <HAL_GetTick>
 8004e56:	0003      	movs	r3, r0
 8004e58:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e5a:	e00b      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e5c:	f7fe fe9c 	bl	8003b98 <HAL_GetTick>
 8004e60:	0002      	movs	r2, r0
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d904      	bls.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004e6a:	2313      	movs	r3, #19
 8004e6c:	18fb      	adds	r3, r7, r3
 8004e6e:	2203      	movs	r2, #3
 8004e70:	701a      	strb	r2, [r3, #0]
        break;
 8004e72:	e005      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e74:	4bac      	ldr	r3, [pc, #688]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	2380      	movs	r3, #128	; 0x80
 8004e7a:	005b      	lsls	r3, r3, #1
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	d0ed      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004e80:	2313      	movs	r3, #19
 8004e82:	18fb      	adds	r3, r7, r3
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d154      	bne.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e8a:	4ba6      	ldr	r3, [pc, #664]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e8e:	23c0      	movs	r3, #192	; 0xc0
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4013      	ands	r3, r2
 8004e94:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d019      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d014      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ea6:	4b9f      	ldr	r3, [pc, #636]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eaa:	4aa0      	ldr	r2, [pc, #640]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004eac:	4013      	ands	r3, r2
 8004eae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004eb0:	4b9c      	ldr	r3, [pc, #624]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004eb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004eb4:	4b9b      	ldr	r3, [pc, #620]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004eb6:	2180      	movs	r1, #128	; 0x80
 8004eb8:	0249      	lsls	r1, r1, #9
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ebe:	4b99      	ldr	r3, [pc, #612]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ec0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ec2:	4b98      	ldr	r3, [pc, #608]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ec4:	499a      	ldr	r1, [pc, #616]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004ec6:	400a      	ands	r2, r1
 8004ec8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004eca:	4b96      	ldr	r3, [pc, #600]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	d016      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed8:	f7fe fe5e 	bl	8003b98 <HAL_GetTick>
 8004edc:	0003      	movs	r3, r0
 8004ede:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ee0:	e00c      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee2:	f7fe fe59 	bl	8003b98 <HAL_GetTick>
 8004ee6:	0002      	movs	r2, r0
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	4a91      	ldr	r2, [pc, #580]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d904      	bls.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004ef2:	2313      	movs	r3, #19
 8004ef4:	18fb      	adds	r3, r7, r3
 8004ef6:	2203      	movs	r2, #3
 8004ef8:	701a      	strb	r2, [r3, #0]
            break;
 8004efa:	e004      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004efc:	4b89      	ldr	r3, [pc, #548]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f00:	2202      	movs	r2, #2
 8004f02:	4013      	ands	r3, r2
 8004f04:	d0ed      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004f06:	2313      	movs	r3, #19
 8004f08:	18fb      	adds	r3, r7, r3
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10a      	bne.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f10:	4b84      	ldr	r3, [pc, #528]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f14:	4a85      	ldr	r2, [pc, #532]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004f16:	4013      	ands	r3, r2
 8004f18:	0019      	movs	r1, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f1e:	4b81      	ldr	r3, [pc, #516]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f20:	430a      	orrs	r2, r1
 8004f22:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f24:	e00c      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f26:	2312      	movs	r3, #18
 8004f28:	18fb      	adds	r3, r7, r3
 8004f2a:	2213      	movs	r2, #19
 8004f2c:	18ba      	adds	r2, r7, r2
 8004f2e:	7812      	ldrb	r2, [r2, #0]
 8004f30:	701a      	strb	r2, [r3, #0]
 8004f32:	e005      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f34:	2312      	movs	r3, #18
 8004f36:	18fb      	adds	r3, r7, r3
 8004f38:	2213      	movs	r2, #19
 8004f3a:	18ba      	adds	r2, r7, r2
 8004f3c:	7812      	ldrb	r2, [r2, #0]
 8004f3e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f40:	2311      	movs	r3, #17
 8004f42:	18fb      	adds	r3, r7, r3
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d105      	bne.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f4a:	4b76      	ldr	r3, [pc, #472]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f4e:	4b75      	ldr	r3, [pc, #468]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f50:	4979      	ldr	r1, [pc, #484]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004f52:	400a      	ands	r2, r1
 8004f54:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	d009      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f60:	4b70      	ldr	r3, [pc, #448]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f64:	2203      	movs	r2, #3
 8004f66:	4393      	bics	r3, r2
 8004f68:	0019      	movs	r1, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	4b6d      	ldr	r3, [pc, #436]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f70:	430a      	orrs	r2, r1
 8004f72:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2202      	movs	r2, #2
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	d009      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f7e:	4b69      	ldr	r3, [pc, #420]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f82:	220c      	movs	r2, #12
 8004f84:	4393      	bics	r3, r2
 8004f86:	0019      	movs	r1, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689a      	ldr	r2, [r3, #8]
 8004f8c:	4b65      	ldr	r3, [pc, #404]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2210      	movs	r2, #16
 8004f98:	4013      	ands	r3, r2
 8004f9a:	d009      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f9c:	4b61      	ldr	r3, [pc, #388]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa0:	4a66      	ldr	r2, [pc, #408]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	0019      	movs	r1, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68da      	ldr	r2, [r3, #12]
 8004faa:	4b5e      	ldr	r3, [pc, #376]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004fac:	430a      	orrs	r2, r1
 8004fae:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	2380      	movs	r3, #128	; 0x80
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4013      	ands	r3, r2
 8004fba:	d009      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fbc:	4b59      	ldr	r3, [pc, #356]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc0:	4a5f      	ldr	r2, [pc, #380]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	0019      	movs	r1, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699a      	ldr	r2, [r3, #24]
 8004fca:	4b56      	ldr	r3, [pc, #344]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	2380      	movs	r3, #128	; 0x80
 8004fd6:	00db      	lsls	r3, r3, #3
 8004fd8:	4013      	ands	r3, r2
 8004fda:	d009      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004fdc:	4b51      	ldr	r3, [pc, #324]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe0:	4a58      	ldr	r2, [pc, #352]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	0019      	movs	r1, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	69da      	ldr	r2, [r3, #28]
 8004fea:	4b4e      	ldr	r3, [pc, #312]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004fec:	430a      	orrs	r2, r1
 8004fee:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	d009      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ffa:	4b4a      	ldr	r3, [pc, #296]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffe:	4a52      	ldr	r2, [pc, #328]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8005000:	4013      	ands	r3, r2
 8005002:	0019      	movs	r1, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691a      	ldr	r2, [r3, #16]
 8005008:	4b46      	ldr	r3, [pc, #280]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800500a:	430a      	orrs	r2, r1
 800500c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	2380      	movs	r3, #128	; 0x80
 8005014:	01db      	lsls	r3, r3, #7
 8005016:	4013      	ands	r3, r2
 8005018:	d015      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800501a:	4b42      	ldr	r3, [pc, #264]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800501c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	0899      	lsrs	r1, r3, #2
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a1a      	ldr	r2, [r3, #32]
 8005026:	4b3f      	ldr	r3, [pc, #252]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005028:	430a      	orrs	r2, r1
 800502a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a1a      	ldr	r2, [r3, #32]
 8005030:	2380      	movs	r3, #128	; 0x80
 8005032:	05db      	lsls	r3, r3, #23
 8005034:	429a      	cmp	r2, r3
 8005036:	d106      	bne.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005038:	4b3a      	ldr	r3, [pc, #232]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800503a:	68da      	ldr	r2, [r3, #12]
 800503c:	4b39      	ldr	r3, [pc, #228]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800503e:	2180      	movs	r1, #128	; 0x80
 8005040:	0249      	lsls	r1, r1, #9
 8005042:	430a      	orrs	r2, r1
 8005044:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	2380      	movs	r3, #128	; 0x80
 800504c:	031b      	lsls	r3, r3, #12
 800504e:	4013      	ands	r3, r2
 8005050:	d009      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005052:	4b34      	ldr	r3, [pc, #208]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005056:	2240      	movs	r2, #64	; 0x40
 8005058:	4393      	bics	r3, r2
 800505a:	0019      	movs	r1, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005060:	4b30      	ldr	r3, [pc, #192]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005062:	430a      	orrs	r2, r1
 8005064:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	2380      	movs	r3, #128	; 0x80
 800506c:	039b      	lsls	r3, r3, #14
 800506e:	4013      	ands	r3, r2
 8005070:	d016      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005072:	4b2c      	ldr	r3, [pc, #176]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005076:	4a35      	ldr	r2, [pc, #212]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005078:	4013      	ands	r3, r2
 800507a:	0019      	movs	r1, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005080:	4b28      	ldr	r3, [pc, #160]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005082:	430a      	orrs	r2, r1
 8005084:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800508a:	2380      	movs	r3, #128	; 0x80
 800508c:	03db      	lsls	r3, r3, #15
 800508e:	429a      	cmp	r2, r3
 8005090:	d106      	bne.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005092:	4b24      	ldr	r3, [pc, #144]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	4b23      	ldr	r3, [pc, #140]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005098:	2180      	movs	r1, #128	; 0x80
 800509a:	0449      	lsls	r1, r1, #17
 800509c:	430a      	orrs	r2, r1
 800509e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	2380      	movs	r3, #128	; 0x80
 80050a6:	03db      	lsls	r3, r3, #15
 80050a8:	4013      	ands	r3, r2
 80050aa:	d016      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80050ac:	4b1d      	ldr	r3, [pc, #116]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b0:	4a27      	ldr	r2, [pc, #156]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80050b2:	4013      	ands	r3, r2
 80050b4:	0019      	movs	r1, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ba:	4b1a      	ldr	r3, [pc, #104]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050bc:	430a      	orrs	r2, r1
 80050be:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c4:	2380      	movs	r3, #128	; 0x80
 80050c6:	045b      	lsls	r3, r3, #17
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d106      	bne.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80050cc:	4b15      	ldr	r3, [pc, #84]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	4b14      	ldr	r3, [pc, #80]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050d2:	2180      	movs	r1, #128	; 0x80
 80050d4:	0449      	lsls	r1, r1, #17
 80050d6:	430a      	orrs	r2, r1
 80050d8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	2380      	movs	r3, #128	; 0x80
 80050e0:	011b      	lsls	r3, r3, #4
 80050e2:	4013      	ands	r3, r2
 80050e4:	d016      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80050e6:	4b0f      	ldr	r3, [pc, #60]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ea:	4a1a      	ldr	r2, [pc, #104]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80050ec:	4013      	ands	r3, r2
 80050ee:	0019      	movs	r1, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	695a      	ldr	r2, [r3, #20]
 80050f4:	4b0b      	ldr	r3, [pc, #44]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050f6:	430a      	orrs	r2, r1
 80050f8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	695a      	ldr	r2, [r3, #20]
 80050fe:	2380      	movs	r3, #128	; 0x80
 8005100:	01db      	lsls	r3, r3, #7
 8005102:	429a      	cmp	r2, r3
 8005104:	d106      	bne.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005106:	4b07      	ldr	r3, [pc, #28]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005108:	68da      	ldr	r2, [r3, #12]
 800510a:	4b06      	ldr	r3, [pc, #24]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800510c:	2180      	movs	r1, #128	; 0x80
 800510e:	0249      	lsls	r1, r1, #9
 8005110:	430a      	orrs	r2, r1
 8005112:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005114:	2312      	movs	r3, #18
 8005116:	18fb      	adds	r3, r7, r3
 8005118:	781b      	ldrb	r3, [r3, #0]
}
 800511a:	0018      	movs	r0, r3
 800511c:	46bd      	mov	sp, r7
 800511e:	b006      	add	sp, #24
 8005120:	bd80      	pop	{r7, pc}
 8005122:	46c0      	nop			; (mov r8, r8)
 8005124:	40021000 	.word	0x40021000
 8005128:	40007000 	.word	0x40007000
 800512c:	fffffcff 	.word	0xfffffcff
 8005130:	fffeffff 	.word	0xfffeffff
 8005134:	00001388 	.word	0x00001388
 8005138:	efffffff 	.word	0xefffffff
 800513c:	fffff3ff 	.word	0xfffff3ff
 8005140:	fff3ffff 	.word	0xfff3ffff
 8005144:	ffcfffff 	.word	0xffcfffff
 8005148:	ffffcfff 	.word	0xffffcfff
 800514c:	ffbfffff 	.word	0xffbfffff
 8005150:	feffffff 	.word	0xfeffffff
 8005154:	ffff3fff 	.word	0xffff3fff

08005158 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005158:	b5b0      	push	{r4, r5, r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005160:	230f      	movs	r3, #15
 8005162:	18fb      	adds	r3, r7, r3
 8005164:	2201      	movs	r2, #1
 8005166:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d100      	bne.n	8005170 <HAL_RTC_Init+0x18>
 800516e:	e08c      	b.n	800528a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2229      	movs	r2, #41	; 0x29
 8005174:	5c9b      	ldrb	r3, [r3, r2]
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10b      	bne.n	8005194 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2228      	movs	r2, #40	; 0x28
 8005180:	2100      	movs	r1, #0
 8005182:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2288      	movs	r2, #136	; 0x88
 8005188:	0212      	lsls	r2, r2, #8
 800518a:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	0018      	movs	r0, r3
 8005190:	f7fe f97c 	bl	800348c <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2229      	movs	r2, #41	; 0x29
 8005198:	2102      	movs	r1, #2
 800519a:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	2210      	movs	r2, #16
 80051a4:	4013      	ands	r3, r2
 80051a6:	2b10      	cmp	r3, #16
 80051a8:	d062      	beq.n	8005270 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	22ca      	movs	r2, #202	; 0xca
 80051b0:	625a      	str	r2, [r3, #36]	; 0x24
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2253      	movs	r2, #83	; 0x53
 80051b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80051ba:	250f      	movs	r5, #15
 80051bc:	197c      	adds	r4, r7, r5
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	0018      	movs	r0, r3
 80051c2:	f000 fb9c 	bl	80058fe <RTC_EnterInitMode>
 80051c6:	0003      	movs	r3, r0
 80051c8:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80051ca:	0028      	movs	r0, r5
 80051cc:	183b      	adds	r3, r7, r0
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d12c      	bne.n	800522e <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	699a      	ldr	r2, [r3, #24]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	492e      	ldr	r1, [pc, #184]	; (8005298 <HAL_RTC_Init+0x140>)
 80051e0:	400a      	ands	r2, r1
 80051e2:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6999      	ldr	r1, [r3, #24]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	689a      	ldr	r2, [r3, #8]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	431a      	orrs	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	431a      	orrs	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	6912      	ldr	r2, [r2, #16]
 800520a:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6919      	ldr	r1, [r3, #16]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	041a      	lsls	r2, r3, #16
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005220:	183c      	adds	r4, r7, r0
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	0018      	movs	r0, r3
 8005226:	f000 fbad 	bl	8005984 <RTC_ExitInitMode>
 800522a:	0003      	movs	r3, r0
 800522c:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800522e:	230f      	movs	r3, #15
 8005230:	18fb      	adds	r3, r7, r3
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d116      	bne.n	8005266 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	699a      	ldr	r2, [r3, #24]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	00d2      	lsls	r2, r2, #3
 8005244:	08d2      	lsrs	r2, r2, #3
 8005246:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6999      	ldr	r1, [r3, #24]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	431a      	orrs	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	22ff      	movs	r2, #255	; 0xff
 800526c:	625a      	str	r2, [r3, #36]	; 0x24
 800526e:	e003      	b.n	8005278 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005270:	230f      	movs	r3, #15
 8005272:	18fb      	adds	r3, r7, r3
 8005274:	2200      	movs	r2, #0
 8005276:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8005278:	230f      	movs	r3, #15
 800527a:	18fb      	adds	r3, r7, r3
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d103      	bne.n	800528a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2229      	movs	r2, #41	; 0x29
 8005286:	2101      	movs	r1, #1
 8005288:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800528a:	230f      	movs	r3, #15
 800528c:	18fb      	adds	r3, r7, r3
 800528e:	781b      	ldrb	r3, [r3, #0]
}
 8005290:	0018      	movs	r0, r3
 8005292:	46bd      	mov	sp, r7
 8005294:	b004      	add	sp, #16
 8005296:	bdb0      	pop	{r4, r5, r7, pc}
 8005298:	fb8fffbf 	.word	0xfb8fffbf

0800529c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800529c:	b5b0      	push	{r4, r5, r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2228      	movs	r2, #40	; 0x28
 80052ac:	5c9b      	ldrb	r3, [r3, r2]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d101      	bne.n	80052b6 <HAL_RTC_SetTime+0x1a>
 80052b2:	2302      	movs	r3, #2
 80052b4:	e092      	b.n	80053dc <HAL_RTC_SetTime+0x140>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2228      	movs	r2, #40	; 0x28
 80052ba:	2101      	movs	r1, #1
 80052bc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2229      	movs	r2, #41	; 0x29
 80052c2:	2102      	movs	r1, #2
 80052c4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	22ca      	movs	r2, #202	; 0xca
 80052cc:	625a      	str	r2, [r3, #36]	; 0x24
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2253      	movs	r2, #83	; 0x53
 80052d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80052d6:	2513      	movs	r5, #19
 80052d8:	197c      	adds	r4, r7, r5
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	0018      	movs	r0, r3
 80052de:	f000 fb0e 	bl	80058fe <RTC_EnterInitMode>
 80052e2:	0003      	movs	r3, r0
 80052e4:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80052e6:	197b      	adds	r3, r7, r5
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d162      	bne.n	80053b4 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d125      	bne.n	8005340 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	2240      	movs	r2, #64	; 0x40
 80052fc:	4013      	ands	r3, r2
 80052fe:	d102      	bne.n	8005306 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	2200      	movs	r2, #0
 8005304:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	0018      	movs	r0, r3
 800530c:	f000 fb7e 	bl	8005a0c <RTC_ByteToBcd2>
 8005310:	0003      	movs	r3, r0
 8005312:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	785b      	ldrb	r3, [r3, #1]
 8005318:	0018      	movs	r0, r3
 800531a:	f000 fb77 	bl	8005a0c <RTC_ByteToBcd2>
 800531e:	0003      	movs	r3, r0
 8005320:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005322:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	789b      	ldrb	r3, [r3, #2]
 8005328:	0018      	movs	r0, r3
 800532a:	f000 fb6f 	bl	8005a0c <RTC_ByteToBcd2>
 800532e:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005330:	0022      	movs	r2, r4
 8005332:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	78db      	ldrb	r3, [r3, #3]
 8005338:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800533a:	4313      	orrs	r3, r2
 800533c:	617b      	str	r3, [r7, #20]
 800533e:	e017      	b.n	8005370 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	2240      	movs	r2, #64	; 0x40
 8005348:	4013      	ands	r3, r2
 800534a:	d102      	bne.n	8005352 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	2200      	movs	r2, #0
 8005350:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	785b      	ldrb	r3, [r3, #1]
 800535c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800535e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005364:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	78db      	ldrb	r3, [r3, #3]
 800536a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800536c:	4313      	orrs	r3, r2
 800536e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	491b      	ldr	r1, [pc, #108]	; (80053e4 <HAL_RTC_SetTime+0x148>)
 8005378:	400a      	ands	r2, r1
 800537a:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699a      	ldr	r2, [r3, #24]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4918      	ldr	r1, [pc, #96]	; (80053e8 <HAL_RTC_SetTime+0x14c>)
 8005388:	400a      	ands	r2, r1
 800538a:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6999      	ldr	r1, [r3, #24]
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	68da      	ldr	r2, [r3, #12]
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	431a      	orrs	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	430a      	orrs	r2, r1
 80053a2:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80053a4:	2313      	movs	r3, #19
 80053a6:	18fc      	adds	r4, r7, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	0018      	movs	r0, r3
 80053ac:	f000 faea 	bl	8005984 <RTC_ExitInitMode>
 80053b0:	0003      	movs	r3, r0
 80053b2:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	22ff      	movs	r2, #255	; 0xff
 80053ba:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 80053bc:	2313      	movs	r3, #19
 80053be:	18fb      	adds	r3, r7, r3
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d103      	bne.n	80053ce <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2229      	movs	r2, #41	; 0x29
 80053ca:	2101      	movs	r1, #1
 80053cc:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2228      	movs	r2, #40	; 0x28
 80053d2:	2100      	movs	r1, #0
 80053d4:	5499      	strb	r1, [r3, r2]

  return status;
 80053d6:	2313      	movs	r3, #19
 80053d8:	18fb      	adds	r3, r7, r3
 80053da:	781b      	ldrb	r3, [r3, #0]
}
 80053dc:	0018      	movs	r0, r3
 80053de:	46bd      	mov	sp, r7
 80053e0:	b006      	add	sp, #24
 80053e2:	bdb0      	pop	{r4, r5, r7, pc}
 80053e4:	007f7f7f 	.word	0x007f7f7f
 80053e8:	fffbffff 	.word	0xfffbffff

080053ec <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689a      	ldr	r2, [r3, #8]
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	045b      	lsls	r3, r3, #17
 800540a:	0c5a      	lsrs	r2, r3, #17
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a22      	ldr	r2, [pc, #136]	; (80054a0 <HAL_RTC_GetTime+0xb4>)
 8005418:	4013      	ands	r3, r2
 800541a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	0c1b      	lsrs	r3, r3, #16
 8005420:	b2db      	uxtb	r3, r3
 8005422:	223f      	movs	r2, #63	; 0x3f
 8005424:	4013      	ands	r3, r2
 8005426:	b2da      	uxtb	r2, r3
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	0a1b      	lsrs	r3, r3, #8
 8005430:	b2db      	uxtb	r3, r3
 8005432:	227f      	movs	r2, #127	; 0x7f
 8005434:	4013      	ands	r3, r2
 8005436:	b2da      	uxtb	r2, r3
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	b2db      	uxtb	r3, r3
 8005440:	227f      	movs	r2, #127	; 0x7f
 8005442:	4013      	ands	r3, r2
 8005444:	b2da      	uxtb	r2, r3
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	0d9b      	lsrs	r3, r3, #22
 800544e:	b2db      	uxtb	r3, r3
 8005450:	2201      	movs	r2, #1
 8005452:	4013      	ands	r3, r2
 8005454:	b2da      	uxtb	r2, r3
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d11a      	bne.n	8005496 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	0018      	movs	r0, r3
 8005466:	f000 faf9 	bl	8005a5c <RTC_Bcd2ToByte>
 800546a:	0003      	movs	r3, r0
 800546c:	001a      	movs	r2, r3
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	785b      	ldrb	r3, [r3, #1]
 8005476:	0018      	movs	r0, r3
 8005478:	f000 faf0 	bl	8005a5c <RTC_Bcd2ToByte>
 800547c:	0003      	movs	r3, r0
 800547e:	001a      	movs	r2, r3
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	789b      	ldrb	r3, [r3, #2]
 8005488:	0018      	movs	r0, r3
 800548a:	f000 fae7 	bl	8005a5c <RTC_Bcd2ToByte>
 800548e:	0003      	movs	r3, r0
 8005490:	001a      	movs	r2, r3
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	0018      	movs	r0, r3
 800549a:	46bd      	mov	sp, r7
 800549c:	b006      	add	sp, #24
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	007f7f7f 	.word	0x007f7f7f

080054a4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80054a4:	b5b0      	push	{r4, r5, r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2228      	movs	r2, #40	; 0x28
 80054b4:	5c9b      	ldrb	r3, [r3, r2]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d101      	bne.n	80054be <HAL_RTC_SetDate+0x1a>
 80054ba:	2302      	movs	r3, #2
 80054bc:	e07e      	b.n	80055bc <HAL_RTC_SetDate+0x118>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2228      	movs	r2, #40	; 0x28
 80054c2:	2101      	movs	r1, #1
 80054c4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2229      	movs	r2, #41	; 0x29
 80054ca:	2102      	movs	r1, #2
 80054cc:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10e      	bne.n	80054f2 <HAL_RTC_SetDate+0x4e>
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	785b      	ldrb	r3, [r3, #1]
 80054d8:	001a      	movs	r2, r3
 80054da:	2310      	movs	r3, #16
 80054dc:	4013      	ands	r3, r2
 80054de:	d008      	beq.n	80054f2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	785b      	ldrb	r3, [r3, #1]
 80054e4:	2210      	movs	r2, #16
 80054e6:	4393      	bics	r3, r2
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	330a      	adds	r3, #10
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d11c      	bne.n	8005532 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	78db      	ldrb	r3, [r3, #3]
 80054fc:	0018      	movs	r0, r3
 80054fe:	f000 fa85 	bl	8005a0c <RTC_ByteToBcd2>
 8005502:	0003      	movs	r3, r0
 8005504:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	785b      	ldrb	r3, [r3, #1]
 800550a:	0018      	movs	r0, r3
 800550c:	f000 fa7e 	bl	8005a0c <RTC_ByteToBcd2>
 8005510:	0003      	movs	r3, r0
 8005512:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005514:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	789b      	ldrb	r3, [r3, #2]
 800551a:	0018      	movs	r0, r3
 800551c:	f000 fa76 	bl	8005a0c <RTC_ByteToBcd2>
 8005520:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005522:	0022      	movs	r2, r4
 8005524:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800552c:	4313      	orrs	r3, r2
 800552e:	617b      	str	r3, [r7, #20]
 8005530:	e00e      	b.n	8005550 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	78db      	ldrb	r3, [r3, #3]
 8005536:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	785b      	ldrb	r3, [r3, #1]
 800553c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800553e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005544:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800554c:	4313      	orrs	r3, r2
 800554e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	22ca      	movs	r2, #202	; 0xca
 8005556:	625a      	str	r2, [r3, #36]	; 0x24
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2253      	movs	r2, #83	; 0x53
 800555e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005560:	2513      	movs	r5, #19
 8005562:	197c      	adds	r4, r7, r5
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	0018      	movs	r0, r3
 8005568:	f000 f9c9 	bl	80058fe <RTC_EnterInitMode>
 800556c:	0003      	movs	r3, r0
 800556e:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005570:	0028      	movs	r0, r5
 8005572:	183b      	adds	r3, r7, r0
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10c      	bne.n	8005594 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	4910      	ldr	r1, [pc, #64]	; (80055c4 <HAL_RTC_SetDate+0x120>)
 8005582:	400a      	ands	r2, r1
 8005584:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005586:	183c      	adds	r4, r7, r0
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	0018      	movs	r0, r3
 800558c:	f000 f9fa 	bl	8005984 <RTC_ExitInitMode>
 8005590:	0003      	movs	r3, r0
 8005592:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	22ff      	movs	r2, #255	; 0xff
 800559a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800559c:	2313      	movs	r3, #19
 800559e:	18fb      	adds	r3, r7, r3
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d103      	bne.n	80055ae <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2229      	movs	r2, #41	; 0x29
 80055aa:	2101      	movs	r1, #1
 80055ac:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2228      	movs	r2, #40	; 0x28
 80055b2:	2100      	movs	r1, #0
 80055b4:	5499      	strb	r1, [r3, r2]

  return status;
 80055b6:	2313      	movs	r3, #19
 80055b8:	18fb      	adds	r3, r7, r3
 80055ba:	781b      	ldrb	r3, [r3, #0]
}
 80055bc:	0018      	movs	r0, r3
 80055be:	46bd      	mov	sp, r7
 80055c0:	b006      	add	sp, #24
 80055c2:	bdb0      	pop	{r4, r5, r7, pc}
 80055c4:	00ffff3f 	.word	0x00ffff3f

080055c8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	4a21      	ldr	r2, [pc, #132]	; (8005660 <HAL_RTC_GetDate+0x98>)
 80055dc:	4013      	ands	r3, r2
 80055de:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	0c1b      	lsrs	r3, r3, #16
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	0a1b      	lsrs	r3, r3, #8
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	221f      	movs	r2, #31
 80055f2:	4013      	ands	r3, r2
 80055f4:	b2da      	uxtb	r2, r3
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	223f      	movs	r2, #63	; 0x3f
 8005600:	4013      	ands	r3, r2
 8005602:	b2da      	uxtb	r2, r3
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	0b5b      	lsrs	r3, r3, #13
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2207      	movs	r2, #7
 8005610:	4013      	ands	r3, r2
 8005612:	b2da      	uxtb	r2, r3
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d11a      	bne.n	8005654 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	78db      	ldrb	r3, [r3, #3]
 8005622:	0018      	movs	r0, r3
 8005624:	f000 fa1a 	bl	8005a5c <RTC_Bcd2ToByte>
 8005628:	0003      	movs	r3, r0
 800562a:	001a      	movs	r2, r3
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	785b      	ldrb	r3, [r3, #1]
 8005634:	0018      	movs	r0, r3
 8005636:	f000 fa11 	bl	8005a5c <RTC_Bcd2ToByte>
 800563a:	0003      	movs	r3, r0
 800563c:	001a      	movs	r2, r3
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	789b      	ldrb	r3, [r3, #2]
 8005646:	0018      	movs	r0, r3
 8005648:	f000 fa08 	bl	8005a5c <RTC_Bcd2ToByte>
 800564c:	0003      	movs	r3, r0
 800564e:	001a      	movs	r2, r3
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	0018      	movs	r0, r3
 8005658:	46bd      	mov	sp, r7
 800565a:	b006      	add	sp, #24
 800565c:	bd80      	pop	{r7, pc}
 800565e:	46c0      	nop			; (mov r8, r8)
 8005660:	00ffff3f 	.word	0x00ffff3f

08005664 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005664:	b590      	push	{r4, r7, lr}
 8005666:	b089      	sub	sp, #36	; 0x24
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2228      	movs	r2, #40	; 0x28
 8005674:	5c9b      	ldrb	r3, [r3, r2]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d101      	bne.n	800567e <HAL_RTC_SetAlarm+0x1a>
 800567a:	2302      	movs	r3, #2
 800567c:	e10c      	b.n	8005898 <HAL_RTC_SetAlarm+0x234>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2228      	movs	r2, #40	; 0x28
 8005682:	2101      	movs	r1, #1
 8005684:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2229      	movs	r2, #41	; 0x29
 800568a:	2102      	movs	r1, #2
 800568c:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d136      	bne.n	8005702 <HAL_RTC_SetAlarm+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	2240      	movs	r2, #64	; 0x40
 800569c:	4013      	ands	r3, r2
 800569e:	d102      	bne.n	80056a6 <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	2200      	movs	r2, #0
 80056a4:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	0018      	movs	r0, r3
 80056ac:	f000 f9ae 	bl	8005a0c <RTC_ByteToBcd2>
 80056b0:	0003      	movs	r3, r0
 80056b2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	785b      	ldrb	r3, [r3, #1]
 80056b8:	0018      	movs	r0, r3
 80056ba:	f000 f9a7 	bl	8005a0c <RTC_ByteToBcd2>
 80056be:	0003      	movs	r3, r0
 80056c0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80056c2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	789b      	ldrb	r3, [r3, #2]
 80056c8:	0018      	movs	r0, r3
 80056ca:	f000 f99f 	bl	8005a0c <RTC_ByteToBcd2>
 80056ce:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80056d0:	0022      	movs	r2, r4
 80056d2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	78db      	ldrb	r3, [r3, #3]
 80056d8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80056da:	431a      	orrs	r2, r3
 80056dc:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	2220      	movs	r2, #32
 80056e2:	5c9b      	ldrb	r3, [r3, r2]
 80056e4:	0018      	movs	r0, r3
 80056e6:	f000 f991 	bl	8005a0c <RTC_ByteToBcd2>
 80056ea:	0003      	movs	r3, r0
 80056ec:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80056ee:	0022      	movs	r2, r4
 80056f0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80056f6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80056fc:	4313      	orrs	r3, r2
 80056fe:	61fb      	str	r3, [r7, #28]
 8005700:	e022      	b.n	8005748 <HAL_RTC_SetAlarm+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	2240      	movs	r2, #64	; 0x40
 800570a:	4013      	ands	r3, r2
 800570c:	d102      	bne.n	8005714 <HAL_RTC_SetAlarm+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	2200      	movs	r2, #0
 8005712:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	785b      	ldrb	r3, [r3, #1]
 800571e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005720:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005726:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	78db      	ldrb	r3, [r3, #3]
 800572c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800572e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2120      	movs	r1, #32
 8005734:	5c5b      	ldrb	r3, [r3, r1]
 8005736:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005738:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800573e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005744:	4313      	orrs	r3, r2
 8005746:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	4313      	orrs	r3, r2
 8005752:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	22ca      	movs	r2, #202	; 0xca
 800575a:	625a      	str	r2, [r3, #36]	; 0x24
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2253      	movs	r2, #83	; 0x53
 8005762:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005768:	2380      	movs	r3, #128	; 0x80
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	429a      	cmp	r2, r3
 800576e:	d143      	bne.n	80057f8 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	699a      	ldr	r2, [r3, #24]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4949      	ldr	r1, [pc, #292]	; (80058a0 <HAL_RTC_SetAlarm+0x23c>)
 800577c:	400a      	ands	r2, r1
 800577e:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	699a      	ldr	r2, [r3, #24]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4946      	ldr	r1, [pc, #280]	; (80058a4 <HAL_RTC_SetAlarm+0x240>)
 800578c:	400a      	ands	r2, r1
 800578e:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8005790:	f7fe fa02 	bl	8003b98 <HAL_GetTick>
 8005794:	0003      	movs	r3, r0
 8005796:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005798:	e016      	b.n	80057c8 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800579a:	f7fe f9fd 	bl	8003b98 <HAL_GetTick>
 800579e:	0002      	movs	r2, r0
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	1ad2      	subs	r2, r2, r3
 80057a4:	23fa      	movs	r3, #250	; 0xfa
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d90d      	bls.n	80057c8 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	22ff      	movs	r2, #255	; 0xff
 80057b2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2229      	movs	r2, #41	; 0x29
 80057b8:	2103      	movs	r1, #3
 80057ba:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2228      	movs	r2, #40	; 0x28
 80057c0:	2100      	movs	r1, #0
 80057c2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e067      	b.n	8005898 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	2201      	movs	r2, #1
 80057d0:	4013      	ands	r3, r2
 80057d2:	d0e2      	beq.n	800579a <HAL_RTC_SetAlarm+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	69fa      	ldr	r2, [r7, #28]
 80057da:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699a      	ldr	r2, [r3, #24]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2180      	movs	r1, #128	; 0x80
 80057f0:	0049      	lsls	r1, r1, #1
 80057f2:	430a      	orrs	r2, r1
 80057f4:	619a      	str	r2, [r3, #24]
 80057f6:	e042      	b.n	800587e <HAL_RTC_SetAlarm+0x21a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	699a      	ldr	r2, [r3, #24]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4929      	ldr	r1, [pc, #164]	; (80058a8 <HAL_RTC_SetAlarm+0x244>)
 8005804:	400a      	ands	r2, r1
 8005806:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	699a      	ldr	r2, [r3, #24]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4926      	ldr	r1, [pc, #152]	; (80058ac <HAL_RTC_SetAlarm+0x248>)
 8005814:	400a      	ands	r2, r1
 8005816:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8005818:	f7fe f9be 	bl	8003b98 <HAL_GetTick>
 800581c:	0003      	movs	r3, r0
 800581e:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005820:	e016      	b.n	8005850 <HAL_RTC_SetAlarm+0x1ec>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005822:	f7fe f9b9 	bl	8003b98 <HAL_GetTick>
 8005826:	0002      	movs	r2, r0
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	1ad2      	subs	r2, r2, r3
 800582c:	23fa      	movs	r3, #250	; 0xfa
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	429a      	cmp	r2, r3
 8005832:	d90d      	bls.n	8005850 <HAL_RTC_SetAlarm+0x1ec>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	22ff      	movs	r2, #255	; 0xff
 800583a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2229      	movs	r2, #41	; 0x29
 8005840:	2103      	movs	r1, #3
 8005842:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2228      	movs	r2, #40	; 0x28
 8005848:	2100      	movs	r1, #0
 800584a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e023      	b.n	8005898 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	2202      	movs	r2, #2
 8005858:	4013      	ands	r3, r2
 800585a:	d0e2      	beq.n	8005822 <HAL_RTC_SetAlarm+0x1be>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	69fa      	ldr	r2, [r7, #28]
 8005862:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	699a      	ldr	r2, [r3, #24]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2180      	movs	r1, #128	; 0x80
 8005878:	0089      	lsls	r1, r1, #2
 800587a:	430a      	orrs	r2, r1
 800587c:	619a      	str	r2, [r3, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	22ff      	movs	r2, #255	; 0xff
 8005884:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2229      	movs	r2, #41	; 0x29
 800588a:	2101      	movs	r1, #1
 800588c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2228      	movs	r2, #40	; 0x28
 8005892:	2100      	movs	r1, #0
 8005894:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	0018      	movs	r0, r3
 800589a:	46bd      	mov	sp, r7
 800589c:	b009      	add	sp, #36	; 0x24
 800589e:	bd90      	pop	{r4, r7, pc}
 80058a0:	fffffeff 	.word	0xfffffeff
 80058a4:	ffffefff 	.word	0xffffefff
 80058a8:	fffffdff 	.word	0xfffffdff
 80058ac:	ffffdfff 	.word	0xffffdfff

080058b0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68da      	ldr	r2, [r3, #12]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	21a0      	movs	r1, #160	; 0xa0
 80058c4:	438a      	bics	r2, r1
 80058c6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80058c8:	f7fe f966 	bl	8003b98 <HAL_GetTick>
 80058cc:	0003      	movs	r3, r0
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80058d0:	e00a      	b.n	80058e8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80058d2:	f7fe f961 	bl	8003b98 <HAL_GetTick>
 80058d6:	0002      	movs	r2, r0
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	1ad2      	subs	r2, r2, r3
 80058dc:	23fa      	movs	r3, #250	; 0xfa
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d901      	bls.n	80058e8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e006      	b.n	80058f6 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	2220      	movs	r2, #32
 80058f0:	4013      	ands	r3, r2
 80058f2:	d0ee      	beq.n	80058d2 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	0018      	movs	r0, r3
 80058f8:	46bd      	mov	sp, r7
 80058fa:	b004      	add	sp, #16
 80058fc:	bd80      	pop	{r7, pc}

080058fe <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b084      	sub	sp, #16
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8005906:	230f      	movs	r3, #15
 8005908:	18fb      	adds	r3, r7, r3
 800590a:	2200      	movs	r2, #0
 800590c:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	2240      	movs	r2, #64	; 0x40
 8005916:	4013      	ands	r3, r2
 8005918:	d12c      	bne.n	8005974 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68da      	ldr	r2, [r3, #12]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2180      	movs	r1, #128	; 0x80
 8005926:	430a      	orrs	r2, r1
 8005928:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800592a:	f7fe f935 	bl	8003b98 <HAL_GetTick>
 800592e:	0003      	movs	r3, r0
 8005930:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005932:	e014      	b.n	800595e <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005934:	f7fe f930 	bl	8003b98 <HAL_GetTick>
 8005938:	0002      	movs	r2, r0
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	1ad2      	subs	r2, r2, r3
 800593e:	200f      	movs	r0, #15
 8005940:	183b      	adds	r3, r7, r0
 8005942:	1839      	adds	r1, r7, r0
 8005944:	7809      	ldrb	r1, [r1, #0]
 8005946:	7019      	strb	r1, [r3, #0]
 8005948:	23fa      	movs	r3, #250	; 0xfa
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	429a      	cmp	r2, r3
 800594e:	d906      	bls.n	800595e <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8005950:	183b      	adds	r3, r7, r0
 8005952:	2203      	movs	r2, #3
 8005954:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2229      	movs	r2, #41	; 0x29
 800595a:	2103      	movs	r1, #3
 800595c:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	2240      	movs	r2, #64	; 0x40
 8005966:	4013      	ands	r3, r2
 8005968:	d104      	bne.n	8005974 <RTC_EnterInitMode+0x76>
 800596a:	230f      	movs	r3, #15
 800596c:	18fb      	adds	r3, r7, r3
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	2b03      	cmp	r3, #3
 8005972:	d1df      	bne.n	8005934 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005974:	230f      	movs	r3, #15
 8005976:	18fb      	adds	r3, r7, r3
 8005978:	781b      	ldrb	r3, [r3, #0]
}
 800597a:	0018      	movs	r0, r3
 800597c:	46bd      	mov	sp, r7
 800597e:	b004      	add	sp, #16
 8005980:	bd80      	pop	{r7, pc}
	...

08005984 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005984:	b590      	push	{r4, r7, lr}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800598c:	240f      	movs	r4, #15
 800598e:	193b      	adds	r3, r7, r4
 8005990:	2200      	movs	r2, #0
 8005992:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005994:	4b1c      	ldr	r3, [pc, #112]	; (8005a08 <RTC_ExitInitMode+0x84>)
 8005996:	68da      	ldr	r2, [r3, #12]
 8005998:	4b1b      	ldr	r3, [pc, #108]	; (8005a08 <RTC_ExitInitMode+0x84>)
 800599a:	2180      	movs	r1, #128	; 0x80
 800599c:	438a      	bics	r2, r1
 800599e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80059a0:	4b19      	ldr	r3, [pc, #100]	; (8005a08 <RTC_ExitInitMode+0x84>)
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	2220      	movs	r2, #32
 80059a6:	4013      	ands	r3, r2
 80059a8:	d10d      	bne.n	80059c6 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	0018      	movs	r0, r3
 80059ae:	f7ff ff7f 	bl	80058b0 <HAL_RTC_WaitForSynchro>
 80059b2:	1e03      	subs	r3, r0, #0
 80059b4:	d021      	beq.n	80059fa <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2229      	movs	r2, #41	; 0x29
 80059ba:	2103      	movs	r1, #3
 80059bc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80059be:	193b      	adds	r3, r7, r4
 80059c0:	2203      	movs	r2, #3
 80059c2:	701a      	strb	r2, [r3, #0]
 80059c4:	e019      	b.n	80059fa <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80059c6:	4b10      	ldr	r3, [pc, #64]	; (8005a08 <RTC_ExitInitMode+0x84>)
 80059c8:	699a      	ldr	r2, [r3, #24]
 80059ca:	4b0f      	ldr	r3, [pc, #60]	; (8005a08 <RTC_ExitInitMode+0x84>)
 80059cc:	2120      	movs	r1, #32
 80059ce:	438a      	bics	r2, r1
 80059d0:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	0018      	movs	r0, r3
 80059d6:	f7ff ff6b 	bl	80058b0 <HAL_RTC_WaitForSynchro>
 80059da:	1e03      	subs	r3, r0, #0
 80059dc:	d007      	beq.n	80059ee <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2229      	movs	r2, #41	; 0x29
 80059e2:	2103      	movs	r1, #3
 80059e4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80059e6:	230f      	movs	r3, #15
 80059e8:	18fb      	adds	r3, r7, r3
 80059ea:	2203      	movs	r2, #3
 80059ec:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80059ee:	4b06      	ldr	r3, [pc, #24]	; (8005a08 <RTC_ExitInitMode+0x84>)
 80059f0:	699a      	ldr	r2, [r3, #24]
 80059f2:	4b05      	ldr	r3, [pc, #20]	; (8005a08 <RTC_ExitInitMode+0x84>)
 80059f4:	2120      	movs	r1, #32
 80059f6:	430a      	orrs	r2, r1
 80059f8:	619a      	str	r2, [r3, #24]
  }

  return status;
 80059fa:	230f      	movs	r3, #15
 80059fc:	18fb      	adds	r3, r7, r3
 80059fe:	781b      	ldrb	r3, [r3, #0]
}
 8005a00:	0018      	movs	r0, r3
 8005a02:	46bd      	mov	sp, r7
 8005a04:	b005      	add	sp, #20
 8005a06:	bd90      	pop	{r4, r7, pc}
 8005a08:	40002800 	.word	0x40002800

08005a0c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	0002      	movs	r2, r0
 8005a14:	1dfb      	adds	r3, r7, #7
 8005a16:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005a1c:	230b      	movs	r3, #11
 8005a1e:	18fb      	adds	r3, r7, r3
 8005a20:	1dfa      	adds	r2, r7, #7
 8005a22:	7812      	ldrb	r2, [r2, #0]
 8005a24:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8005a26:	e008      	b.n	8005a3a <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005a2e:	220b      	movs	r2, #11
 8005a30:	18bb      	adds	r3, r7, r2
 8005a32:	18ba      	adds	r2, r7, r2
 8005a34:	7812      	ldrb	r2, [r2, #0]
 8005a36:	3a0a      	subs	r2, #10
 8005a38:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8005a3a:	210b      	movs	r1, #11
 8005a3c:	187b      	adds	r3, r7, r1
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	2b09      	cmp	r3, #9
 8005a42:	d8f1      	bhi.n	8005a28 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	011b      	lsls	r3, r3, #4
 8005a4a:	b2da      	uxtb	r2, r3
 8005a4c:	187b      	adds	r3, r7, r1
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	b2db      	uxtb	r3, r3
}
 8005a54:	0018      	movs	r0, r3
 8005a56:	46bd      	mov	sp, r7
 8005a58:	b004      	add	sp, #16
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	0002      	movs	r2, r0
 8005a64:	1dfb      	adds	r3, r7, #7
 8005a66:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005a68:	1dfb      	adds	r3, r7, #7
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	091b      	lsrs	r3, r3, #4
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	001a      	movs	r2, r3
 8005a72:	0013      	movs	r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	189b      	adds	r3, r3, r2
 8005a78:	005b      	lsls	r3, r3, #1
 8005a7a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	b2da      	uxtb	r2, r3
 8005a80:	1dfb      	adds	r3, r7, #7
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	210f      	movs	r1, #15
 8005a86:	400b      	ands	r3, r1
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	18d3      	adds	r3, r2, r3
 8005a8c:	b2db      	uxtb	r3, r3
}
 8005a8e:	0018      	movs	r0, r3
 8005a90:	46bd      	mov	sp, r7
 8005a92:	b004      	add	sp, #16
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b082      	sub	sp, #8
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2228      	movs	r2, #40	; 0x28
 8005aa2:	5c9b      	ldrb	r3, [r3, r2]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d101      	bne.n	8005aac <HAL_RTCEx_EnableBypassShadow+0x16>
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	e024      	b.n	8005af6 <HAL_RTCEx_EnableBypassShadow+0x60>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2228      	movs	r2, #40	; 0x28
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2229      	movs	r2, #41	; 0x29
 8005ab8:	2102      	movs	r1, #2
 8005aba:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	22ca      	movs	r2, #202	; 0xca
 8005ac2:	625a      	str	r2, [r3, #36]	; 0x24
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2253      	movs	r2, #83	; 0x53
 8005aca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	699a      	ldr	r2, [r3, #24]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2120      	movs	r1, #32
 8005ad8:	430a      	orrs	r2, r1
 8005ada:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	22ff      	movs	r2, #255	; 0xff
 8005ae2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2229      	movs	r2, #41	; 0x29
 8005ae8:	2101      	movs	r1, #1
 8005aea:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2228      	movs	r2, #40	; 0x28
 8005af0:	2100      	movs	r1, #0
 8005af2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	0018      	movs	r0, r3
 8005af8:	46bd      	mov	sp, r7
 8005afa:	b002      	add	sp, #8
 8005afc:	bd80      	pop	{r7, pc}

08005afe <HAL_RTCEx_DisableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b082      	sub	sp, #8
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2228      	movs	r2, #40	; 0x28
 8005b0a:	5c9b      	ldrb	r3, [r3, r2]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d101      	bne.n	8005b14 <HAL_RTCEx_DisableBypassShadow+0x16>
 8005b10:	2302      	movs	r3, #2
 8005b12:	e024      	b.n	8005b5e <HAL_RTCEx_DisableBypassShadow+0x60>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2228      	movs	r2, #40	; 0x28
 8005b18:	2101      	movs	r1, #1
 8005b1a:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2229      	movs	r2, #41	; 0x29
 8005b20:	2102      	movs	r1, #2
 8005b22:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	22ca      	movs	r2, #202	; 0xca
 8005b2a:	625a      	str	r2, [r3, #36]	; 0x24
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2253      	movs	r2, #83	; 0x53
 8005b32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset the BYPSHAD bit */
  hrtc->Instance->CR &= ((uint8_t)~RTC_CR_BYPSHAD);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	699a      	ldr	r2, [r3, #24]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	21df      	movs	r1, #223	; 0xdf
 8005b40:	400a      	ands	r2, r1
 8005b42:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	22ff      	movs	r2, #255	; 0xff
 8005b4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2229      	movs	r2, #41	; 0x29
 8005b50:	2101      	movs	r1, #1
 8005b52:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2228      	movs	r2, #40	; 0x28
 8005b58:	2100      	movs	r1, #0
 8005b5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	0018      	movs	r0, r3
 8005b60:	46bd      	mov	sp, r7
 8005b62:	b002      	add	sp, #8
 8005b64:	bd80      	pop	{r7, pc}
	...

08005b68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e0a8      	b.n	8005ccc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d109      	bne.n	8005b96 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	2382      	movs	r3, #130	; 0x82
 8005b88:	005b      	lsls	r3, r3, #1
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d009      	beq.n	8005ba2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	61da      	str	r2, [r3, #28]
 8005b94:	e005      	b.n	8005ba2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	225d      	movs	r2, #93	; 0x5d
 8005bac:	5c9b      	ldrb	r3, [r3, r2]
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d107      	bne.n	8005bc4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	225c      	movs	r2, #92	; 0x5c
 8005bb8:	2100      	movs	r1, #0
 8005bba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	0018      	movs	r0, r3
 8005bc0:	f7fd fca2 	bl	8003508 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	225d      	movs	r2, #93	; 0x5d
 8005bc8:	2102      	movs	r1, #2
 8005bca:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2140      	movs	r1, #64	; 0x40
 8005bd8:	438a      	bics	r2, r1
 8005bda:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	68da      	ldr	r2, [r3, #12]
 8005be0:	23e0      	movs	r3, #224	; 0xe0
 8005be2:	00db      	lsls	r3, r3, #3
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d902      	bls.n	8005bee <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005be8:	2300      	movs	r3, #0
 8005bea:	60fb      	str	r3, [r7, #12]
 8005bec:	e002      	b.n	8005bf4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005bee:	2380      	movs	r3, #128	; 0x80
 8005bf0:	015b      	lsls	r3, r3, #5
 8005bf2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68da      	ldr	r2, [r3, #12]
 8005bf8:	23f0      	movs	r3, #240	; 0xf0
 8005bfa:	011b      	lsls	r3, r3, #4
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d008      	beq.n	8005c12 <HAL_SPI_Init+0xaa>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68da      	ldr	r2, [r3, #12]
 8005c04:	23e0      	movs	r3, #224	; 0xe0
 8005c06:	00db      	lsls	r3, r3, #3
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d002      	beq.n	8005c12 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	2382      	movs	r3, #130	; 0x82
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	401a      	ands	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6899      	ldr	r1, [r3, #8]
 8005c20:	2384      	movs	r3, #132	; 0x84
 8005c22:	021b      	lsls	r3, r3, #8
 8005c24:	400b      	ands	r3, r1
 8005c26:	431a      	orrs	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	2102      	movs	r1, #2
 8005c2e:	400b      	ands	r3, r1
 8005c30:	431a      	orrs	r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	2101      	movs	r1, #1
 8005c38:	400b      	ands	r3, r1
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6999      	ldr	r1, [r3, #24]
 8005c40:	2380      	movs	r3, #128	; 0x80
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	400b      	ands	r3, r1
 8005c46:	431a      	orrs	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	2138      	movs	r1, #56	; 0x38
 8005c4e:	400b      	ands	r3, r1
 8005c50:	431a      	orrs	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	2180      	movs	r1, #128	; 0x80
 8005c58:	400b      	ands	r3, r1
 8005c5a:	431a      	orrs	r2, r3
 8005c5c:	0011      	movs	r1, r2
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c62:	2380      	movs	r3, #128	; 0x80
 8005c64:	019b      	lsls	r3, r3, #6
 8005c66:	401a      	ands	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	0c1b      	lsrs	r3, r3, #16
 8005c76:	2204      	movs	r2, #4
 8005c78:	401a      	ands	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	2110      	movs	r1, #16
 8005c80:	400b      	ands	r3, r1
 8005c82:	431a      	orrs	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c88:	2108      	movs	r1, #8
 8005c8a:	400b      	ands	r3, r1
 8005c8c:	431a      	orrs	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68d9      	ldr	r1, [r3, #12]
 8005c92:	23f0      	movs	r3, #240	; 0xf0
 8005c94:	011b      	lsls	r3, r3, #4
 8005c96:	400b      	ands	r3, r1
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	0011      	movs	r1, r2
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	2380      	movs	r3, #128	; 0x80
 8005ca0:	015b      	lsls	r3, r3, #5
 8005ca2:	401a      	ands	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	69da      	ldr	r2, [r3, #28]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4907      	ldr	r1, [pc, #28]	; (8005cd4 <HAL_SPI_Init+0x16c>)
 8005cb8:	400a      	ands	r2, r1
 8005cba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	225d      	movs	r2, #93	; 0x5d
 8005cc6:	2101      	movs	r1, #1
 8005cc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	0018      	movs	r0, r3
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	b004      	add	sp, #16
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	fffff7ff 	.word	0xfffff7ff

08005cd8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b088      	sub	sp, #32
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	603b      	str	r3, [r7, #0]
 8005ce4:	1dbb      	adds	r3, r7, #6
 8005ce6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ce8:	231f      	movs	r3, #31
 8005cea:	18fb      	adds	r3, r7, r3
 8005cec:	2200      	movs	r2, #0
 8005cee:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	225c      	movs	r2, #92	; 0x5c
 8005cf4:	5c9b      	ldrb	r3, [r3, r2]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d101      	bne.n	8005cfe <HAL_SPI_Transmit+0x26>
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	e140      	b.n	8005f80 <HAL_SPI_Transmit+0x2a8>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	225c      	movs	r2, #92	; 0x5c
 8005d02:	2101      	movs	r1, #1
 8005d04:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d06:	f7fd ff47 	bl	8003b98 <HAL_GetTick>
 8005d0a:	0003      	movs	r3, r0
 8005d0c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005d0e:	2316      	movs	r3, #22
 8005d10:	18fb      	adds	r3, r7, r3
 8005d12:	1dba      	adds	r2, r7, #6
 8005d14:	8812      	ldrh	r2, [r2, #0]
 8005d16:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	225d      	movs	r2, #93	; 0x5d
 8005d1c:	5c9b      	ldrb	r3, [r3, r2]
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d004      	beq.n	8005d2e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005d24:	231f      	movs	r3, #31
 8005d26:	18fb      	adds	r3, r7, r3
 8005d28:	2202      	movs	r2, #2
 8005d2a:	701a      	strb	r2, [r3, #0]
    goto error;
 8005d2c:	e11d      	b.n	8005f6a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d003      	beq.n	8005d3c <HAL_SPI_Transmit+0x64>
 8005d34:	1dbb      	adds	r3, r7, #6
 8005d36:	881b      	ldrh	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d104      	bne.n	8005d46 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005d3c:	231f      	movs	r3, #31
 8005d3e:	18fb      	adds	r3, r7, r3
 8005d40:	2201      	movs	r2, #1
 8005d42:	701a      	strb	r2, [r3, #0]
    goto error;
 8005d44:	e111      	b.n	8005f6a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	225d      	movs	r2, #93	; 0x5d
 8005d4a:	2103      	movs	r1, #3
 8005d4c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	1dba      	adds	r2, r7, #6
 8005d5e:	8812      	ldrh	r2, [r2, #0]
 8005d60:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	1dba      	adds	r2, r7, #6
 8005d66:	8812      	ldrh	r2, [r2, #0]
 8005d68:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2244      	movs	r2, #68	; 0x44
 8005d74:	2100      	movs	r1, #0
 8005d76:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2246      	movs	r2, #70	; 0x46
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	689a      	ldr	r2, [r3, #8]
 8005d90:	2380      	movs	r3, #128	; 0x80
 8005d92:	021b      	lsls	r3, r3, #8
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d110      	bne.n	8005dba <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2140      	movs	r1, #64	; 0x40
 8005da4:	438a      	bics	r2, r1
 8005da6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2180      	movs	r1, #128	; 0x80
 8005db4:	01c9      	lsls	r1, r1, #7
 8005db6:	430a      	orrs	r2, r1
 8005db8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2240      	movs	r2, #64	; 0x40
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	2b40      	cmp	r3, #64	; 0x40
 8005dc6:	d007      	beq.n	8005dd8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2140      	movs	r1, #64	; 0x40
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	68da      	ldr	r2, [r3, #12]
 8005ddc:	23e0      	movs	r3, #224	; 0xe0
 8005dde:	00db      	lsls	r3, r3, #3
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d94e      	bls.n	8005e82 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d004      	beq.n	8005df6 <HAL_SPI_Transmit+0x11e>
 8005dec:	2316      	movs	r3, #22
 8005dee:	18fb      	adds	r3, r7, r3
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d13f      	bne.n	8005e76 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfa:	881a      	ldrh	r2, [r3, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e06:	1c9a      	adds	r2, r3, #2
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	3b01      	subs	r3, #1
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e1a:	e02c      	b.n	8005e76 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	2202      	movs	r2, #2
 8005e24:	4013      	ands	r3, r2
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d112      	bne.n	8005e50 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2e:	881a      	ldrh	r2, [r3, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3a:	1c9a      	adds	r2, r3, #2
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	3b01      	subs	r3, #1
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e4e:	e012      	b.n	8005e76 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e50:	f7fd fea2 	bl	8003b98 <HAL_GetTick>
 8005e54:	0002      	movs	r2, r0
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d802      	bhi.n	8005e66 <HAL_SPI_Transmit+0x18e>
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	3301      	adds	r3, #1
 8005e64:	d102      	bne.n	8005e6c <HAL_SPI_Transmit+0x194>
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d104      	bne.n	8005e76 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8005e6c:	231f      	movs	r3, #31
 8005e6e:	18fb      	adds	r3, r7, r3
 8005e70:	2203      	movs	r2, #3
 8005e72:	701a      	strb	r2, [r3, #0]
          goto error;
 8005e74:	e079      	b.n	8005f6a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1cd      	bne.n	8005e1c <HAL_SPI_Transmit+0x144>
 8005e80:	e04f      	b.n	8005f22 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d004      	beq.n	8005e94 <HAL_SPI_Transmit+0x1bc>
 8005e8a:	2316      	movs	r3, #22
 8005e8c:	18fb      	adds	r3, r7, r3
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d141      	bne.n	8005f18 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	330c      	adds	r3, #12
 8005e9e:	7812      	ldrb	r2, [r2, #0]
 8005ea0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea6:	1c5a      	adds	r2, r3, #1
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8005eba:	e02d      	b.n	8005f18 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d113      	bne.n	8005ef2 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	330c      	adds	r3, #12
 8005ed4:	7812      	ldrb	r2, [r2, #0]
 8005ed6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005edc:	1c5a      	adds	r2, r3, #1
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ef0:	e012      	b.n	8005f18 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ef2:	f7fd fe51 	bl	8003b98 <HAL_GetTick>
 8005ef6:	0002      	movs	r2, r0
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d802      	bhi.n	8005f08 <HAL_SPI_Transmit+0x230>
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	3301      	adds	r3, #1
 8005f06:	d102      	bne.n	8005f0e <HAL_SPI_Transmit+0x236>
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d104      	bne.n	8005f18 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8005f0e:	231f      	movs	r3, #31
 8005f10:	18fb      	adds	r3, r7, r3
 8005f12:	2203      	movs	r2, #3
 8005f14:	701a      	strb	r2, [r3, #0]
          goto error;
 8005f16:	e028      	b.n	8005f6a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1cc      	bne.n	8005ebc <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f22:	69ba      	ldr	r2, [r7, #24]
 8005f24:	6839      	ldr	r1, [r7, #0]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	0018      	movs	r0, r3
 8005f2a:	f000 fcd9 	bl	80068e0 <SPI_EndRxTxTransaction>
 8005f2e:	1e03      	subs	r3, r0, #0
 8005f30:	d002      	beq.n	8005f38 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2220      	movs	r2, #32
 8005f36:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10a      	bne.n	8005f56 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f40:	2300      	movs	r3, #0
 8005f42:	613b      	str	r3, [r7, #16]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	613b      	str	r3, [r7, #16]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	613b      	str	r3, [r7, #16]
 8005f54:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d004      	beq.n	8005f68 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8005f5e:	231f      	movs	r3, #31
 8005f60:	18fb      	adds	r3, r7, r3
 8005f62:	2201      	movs	r2, #1
 8005f64:	701a      	strb	r2, [r3, #0]
 8005f66:	e000      	b.n	8005f6a <HAL_SPI_Transmit+0x292>
  }

error:
 8005f68:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	225d      	movs	r2, #93	; 0x5d
 8005f6e:	2101      	movs	r1, #1
 8005f70:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	225c      	movs	r2, #92	; 0x5c
 8005f76:	2100      	movs	r1, #0
 8005f78:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005f7a:	231f      	movs	r3, #31
 8005f7c:	18fb      	adds	r3, r7, r3
 8005f7e:	781b      	ldrb	r3, [r3, #0]
}
 8005f80:	0018      	movs	r0, r3
 8005f82:	46bd      	mov	sp, r7
 8005f84:	b008      	add	sp, #32
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f88:	b590      	push	{r4, r7, lr}
 8005f8a:	b089      	sub	sp, #36	; 0x24
 8005f8c:	af02      	add	r7, sp, #8
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	603b      	str	r3, [r7, #0]
 8005f94:	1dbb      	adds	r3, r7, #6
 8005f96:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f98:	2317      	movs	r3, #23
 8005f9a:	18fb      	adds	r3, r7, r3
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	2382      	movs	r3, #130	; 0x82
 8005fa6:	005b      	lsls	r3, r3, #1
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d113      	bne.n	8005fd4 <HAL_SPI_Receive+0x4c>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10f      	bne.n	8005fd4 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	225d      	movs	r2, #93	; 0x5d
 8005fb8:	2104      	movs	r1, #4
 8005fba:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005fbc:	1dbb      	adds	r3, r7, #6
 8005fbe:	881c      	ldrh	r4, [r3, #0]
 8005fc0:	68ba      	ldr	r2, [r7, #8]
 8005fc2:	68b9      	ldr	r1, [r7, #8]
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	0023      	movs	r3, r4
 8005fcc:	f000 f928 	bl	8006220 <HAL_SPI_TransmitReceive>
 8005fd0:	0003      	movs	r3, r0
 8005fd2:	e11c      	b.n	800620e <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	225c      	movs	r2, #92	; 0x5c
 8005fd8:	5c9b      	ldrb	r3, [r3, r2]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d101      	bne.n	8005fe2 <HAL_SPI_Receive+0x5a>
 8005fde:	2302      	movs	r3, #2
 8005fe0:	e115      	b.n	800620e <HAL_SPI_Receive+0x286>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	225c      	movs	r2, #92	; 0x5c
 8005fe6:	2101      	movs	r1, #1
 8005fe8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fea:	f7fd fdd5 	bl	8003b98 <HAL_GetTick>
 8005fee:	0003      	movs	r3, r0
 8005ff0:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	225d      	movs	r2, #93	; 0x5d
 8005ff6:	5c9b      	ldrb	r3, [r3, r2]
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d004      	beq.n	8006008 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8005ffe:	2317      	movs	r3, #23
 8006000:	18fb      	adds	r3, r7, r3
 8006002:	2202      	movs	r2, #2
 8006004:	701a      	strb	r2, [r3, #0]
    goto error;
 8006006:	e0f7      	b.n	80061f8 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d003      	beq.n	8006016 <HAL_SPI_Receive+0x8e>
 800600e:	1dbb      	adds	r3, r7, #6
 8006010:	881b      	ldrh	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d104      	bne.n	8006020 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8006016:	2317      	movs	r3, #23
 8006018:	18fb      	adds	r3, r7, r3
 800601a:	2201      	movs	r2, #1
 800601c:	701a      	strb	r2, [r3, #0]
    goto error;
 800601e:	e0eb      	b.n	80061f8 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	225d      	movs	r2, #93	; 0x5d
 8006024:	2104      	movs	r1, #4
 8006026:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	1dba      	adds	r2, r7, #6
 8006038:	2144      	movs	r1, #68	; 0x44
 800603a:	8812      	ldrh	r2, [r2, #0]
 800603c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	1dba      	adds	r2, r7, #6
 8006042:	2146      	movs	r1, #70	; 0x46
 8006044:	8812      	ldrh	r2, [r2, #0]
 8006046:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	68da      	ldr	r2, [r3, #12]
 800606a:	23e0      	movs	r3, #224	; 0xe0
 800606c:	00db      	lsls	r3, r3, #3
 800606e:	429a      	cmp	r2, r3
 8006070:	d908      	bls.n	8006084 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	685a      	ldr	r2, [r3, #4]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4966      	ldr	r1, [pc, #408]	; (8006218 <HAL_SPI_Receive+0x290>)
 800607e:	400a      	ands	r2, r1
 8006080:	605a      	str	r2, [r3, #4]
 8006082:	e008      	b.n	8006096 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	685a      	ldr	r2, [r3, #4]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2180      	movs	r1, #128	; 0x80
 8006090:	0149      	lsls	r1, r1, #5
 8006092:	430a      	orrs	r2, r1
 8006094:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	689a      	ldr	r2, [r3, #8]
 800609a:	2380      	movs	r3, #128	; 0x80
 800609c:	021b      	lsls	r3, r3, #8
 800609e:	429a      	cmp	r2, r3
 80060a0:	d10f      	bne.n	80060c2 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2140      	movs	r1, #64	; 0x40
 80060ae:	438a      	bics	r2, r1
 80060b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4957      	ldr	r1, [pc, #348]	; (800621c <HAL_SPI_Receive+0x294>)
 80060be:	400a      	ands	r2, r1
 80060c0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2240      	movs	r2, #64	; 0x40
 80060ca:	4013      	ands	r3, r2
 80060cc:	2b40      	cmp	r3, #64	; 0x40
 80060ce:	d007      	beq.n	80060e0 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2140      	movs	r1, #64	; 0x40
 80060dc:	430a      	orrs	r2, r1
 80060de:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	68da      	ldr	r2, [r3, #12]
 80060e4:	23e0      	movs	r3, #224	; 0xe0
 80060e6:	00db      	lsls	r3, r3, #3
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d900      	bls.n	80060ee <HAL_SPI_Receive+0x166>
 80060ec:	e069      	b.n	80061c2 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80060ee:	e031      	b.n	8006154 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	2201      	movs	r2, #1
 80060f8:	4013      	ands	r3, r2
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d117      	bne.n	800612e <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	330c      	adds	r3, #12
 8006104:	001a      	movs	r2, r3
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610a:	7812      	ldrb	r2, [r2, #0]
 800610c:	b2d2      	uxtb	r2, r2
 800610e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006114:	1c5a      	adds	r2, r3, #1
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2246      	movs	r2, #70	; 0x46
 800611e:	5a9b      	ldrh	r3, [r3, r2]
 8006120:	b29b      	uxth	r3, r3
 8006122:	3b01      	subs	r3, #1
 8006124:	b299      	uxth	r1, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2246      	movs	r2, #70	; 0x46
 800612a:	5299      	strh	r1, [r3, r2]
 800612c:	e012      	b.n	8006154 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800612e:	f7fd fd33 	bl	8003b98 <HAL_GetTick>
 8006132:	0002      	movs	r2, r0
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	429a      	cmp	r2, r3
 800613c:	d802      	bhi.n	8006144 <HAL_SPI_Receive+0x1bc>
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	3301      	adds	r3, #1
 8006142:	d102      	bne.n	800614a <HAL_SPI_Receive+0x1c2>
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d104      	bne.n	8006154 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800614a:	2317      	movs	r3, #23
 800614c:	18fb      	adds	r3, r7, r3
 800614e:	2203      	movs	r2, #3
 8006150:	701a      	strb	r2, [r3, #0]
          goto error;
 8006152:	e051      	b.n	80061f8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2246      	movs	r2, #70	; 0x46
 8006158:	5a9b      	ldrh	r3, [r3, r2]
 800615a:	b29b      	uxth	r3, r3
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1c7      	bne.n	80060f0 <HAL_SPI_Receive+0x168>
 8006160:	e035      	b.n	80061ce <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	2201      	movs	r2, #1
 800616a:	4013      	ands	r3, r2
 800616c:	2b01      	cmp	r3, #1
 800616e:	d115      	bne.n	800619c <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68da      	ldr	r2, [r3, #12]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617a:	b292      	uxth	r2, r2
 800617c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	1c9a      	adds	r2, r3, #2
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2246      	movs	r2, #70	; 0x46
 800618c:	5a9b      	ldrh	r3, [r3, r2]
 800618e:	b29b      	uxth	r3, r3
 8006190:	3b01      	subs	r3, #1
 8006192:	b299      	uxth	r1, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2246      	movs	r2, #70	; 0x46
 8006198:	5299      	strh	r1, [r3, r2]
 800619a:	e012      	b.n	80061c2 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800619c:	f7fd fcfc 	bl	8003b98 <HAL_GetTick>
 80061a0:	0002      	movs	r2, r0
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d802      	bhi.n	80061b2 <HAL_SPI_Receive+0x22a>
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	3301      	adds	r3, #1
 80061b0:	d102      	bne.n	80061b8 <HAL_SPI_Receive+0x230>
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d104      	bne.n	80061c2 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80061b8:	2317      	movs	r3, #23
 80061ba:	18fb      	adds	r3, r7, r3
 80061bc:	2203      	movs	r2, #3
 80061be:	701a      	strb	r2, [r3, #0]
          goto error;
 80061c0:	e01a      	b.n	80061f8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2246      	movs	r2, #70	; 0x46
 80061c6:	5a9b      	ldrh	r3, [r3, r2]
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1c9      	bne.n	8006162 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	6839      	ldr	r1, [r7, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	0018      	movs	r0, r3
 80061d6:	f000 fb25 	bl	8006824 <SPI_EndRxTransaction>
 80061da:	1e03      	subs	r3, r0, #0
 80061dc:	d002      	beq.n	80061e4 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2220      	movs	r2, #32
 80061e2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d004      	beq.n	80061f6 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 80061ec:	2317      	movs	r3, #23
 80061ee:	18fb      	adds	r3, r7, r3
 80061f0:	2201      	movs	r2, #1
 80061f2:	701a      	strb	r2, [r3, #0]
 80061f4:	e000      	b.n	80061f8 <HAL_SPI_Receive+0x270>
  }

error :
 80061f6:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	225d      	movs	r2, #93	; 0x5d
 80061fc:	2101      	movs	r1, #1
 80061fe:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	225c      	movs	r2, #92	; 0x5c
 8006204:	2100      	movs	r1, #0
 8006206:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006208:	2317      	movs	r3, #23
 800620a:	18fb      	adds	r3, r7, r3
 800620c:	781b      	ldrb	r3, [r3, #0]
}
 800620e:	0018      	movs	r0, r3
 8006210:	46bd      	mov	sp, r7
 8006212:	b007      	add	sp, #28
 8006214:	bd90      	pop	{r4, r7, pc}
 8006216:	46c0      	nop			; (mov r8, r8)
 8006218:	ffffefff 	.word	0xffffefff
 800621c:	ffffbfff 	.word	0xffffbfff

08006220 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b08a      	sub	sp, #40	; 0x28
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
 800622c:	001a      	movs	r2, r3
 800622e:	1cbb      	adds	r3, r7, #2
 8006230:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006232:	2301      	movs	r3, #1
 8006234:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006236:	2323      	movs	r3, #35	; 0x23
 8006238:	18fb      	adds	r3, r7, r3
 800623a:	2200      	movs	r2, #0
 800623c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	225c      	movs	r2, #92	; 0x5c
 8006242:	5c9b      	ldrb	r3, [r3, r2]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d101      	bne.n	800624c <HAL_SPI_TransmitReceive+0x2c>
 8006248:	2302      	movs	r3, #2
 800624a:	e1b5      	b.n	80065b8 <HAL_SPI_TransmitReceive+0x398>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	225c      	movs	r2, #92	; 0x5c
 8006250:	2101      	movs	r1, #1
 8006252:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006254:	f7fd fca0 	bl	8003b98 <HAL_GetTick>
 8006258:	0003      	movs	r3, r0
 800625a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800625c:	201b      	movs	r0, #27
 800625e:	183b      	adds	r3, r7, r0
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	215d      	movs	r1, #93	; 0x5d
 8006264:	5c52      	ldrb	r2, [r2, r1]
 8006266:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800626e:	2312      	movs	r3, #18
 8006270:	18fb      	adds	r3, r7, r3
 8006272:	1cba      	adds	r2, r7, #2
 8006274:	8812      	ldrh	r2, [r2, #0]
 8006276:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006278:	183b      	adds	r3, r7, r0
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d011      	beq.n	80062a4 <HAL_SPI_TransmitReceive+0x84>
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	2382      	movs	r3, #130	; 0x82
 8006284:	005b      	lsls	r3, r3, #1
 8006286:	429a      	cmp	r2, r3
 8006288:	d107      	bne.n	800629a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d103      	bne.n	800629a <HAL_SPI_TransmitReceive+0x7a>
 8006292:	183b      	adds	r3, r7, r0
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	2b04      	cmp	r3, #4
 8006298:	d004      	beq.n	80062a4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800629a:	2323      	movs	r3, #35	; 0x23
 800629c:	18fb      	adds	r3, r7, r3
 800629e:	2202      	movs	r2, #2
 80062a0:	701a      	strb	r2, [r3, #0]
    goto error;
 80062a2:	e17e      	b.n	80065a2 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d006      	beq.n	80062b8 <HAL_SPI_TransmitReceive+0x98>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d003      	beq.n	80062b8 <HAL_SPI_TransmitReceive+0x98>
 80062b0:	1cbb      	adds	r3, r7, #2
 80062b2:	881b      	ldrh	r3, [r3, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d104      	bne.n	80062c2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80062b8:	2323      	movs	r3, #35	; 0x23
 80062ba:	18fb      	adds	r3, r7, r3
 80062bc:	2201      	movs	r2, #1
 80062be:	701a      	strb	r2, [r3, #0]
    goto error;
 80062c0:	e16f      	b.n	80065a2 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	225d      	movs	r2, #93	; 0x5d
 80062c6:	5c9b      	ldrb	r3, [r3, r2]
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b04      	cmp	r3, #4
 80062cc:	d003      	beq.n	80062d6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	225d      	movs	r2, #93	; 0x5d
 80062d2:	2105      	movs	r1, #5
 80062d4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	1cba      	adds	r2, r7, #2
 80062e6:	2146      	movs	r1, #70	; 0x46
 80062e8:	8812      	ldrh	r2, [r2, #0]
 80062ea:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	1cba      	adds	r2, r7, #2
 80062f0:	2144      	movs	r1, #68	; 0x44
 80062f2:	8812      	ldrh	r2, [r2, #0]
 80062f4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	1cba      	adds	r2, r7, #2
 8006300:	8812      	ldrh	r2, [r2, #0]
 8006302:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	1cba      	adds	r2, r7, #2
 8006308:	8812      	ldrh	r2, [r2, #0]
 800630a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2200      	movs	r2, #0
 8006310:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	68da      	ldr	r2, [r3, #12]
 800631c:	23e0      	movs	r3, #224	; 0xe0
 800631e:	00db      	lsls	r3, r3, #3
 8006320:	429a      	cmp	r2, r3
 8006322:	d908      	bls.n	8006336 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	685a      	ldr	r2, [r3, #4]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	49a4      	ldr	r1, [pc, #656]	; (80065c0 <HAL_SPI_TransmitReceive+0x3a0>)
 8006330:	400a      	ands	r2, r1
 8006332:	605a      	str	r2, [r3, #4]
 8006334:	e008      	b.n	8006348 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2180      	movs	r1, #128	; 0x80
 8006342:	0149      	lsls	r1, r1, #5
 8006344:	430a      	orrs	r2, r1
 8006346:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2240      	movs	r2, #64	; 0x40
 8006350:	4013      	ands	r3, r2
 8006352:	2b40      	cmp	r3, #64	; 0x40
 8006354:	d007      	beq.n	8006366 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2140      	movs	r1, #64	; 0x40
 8006362:	430a      	orrs	r2, r1
 8006364:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	68da      	ldr	r2, [r3, #12]
 800636a:	23e0      	movs	r3, #224	; 0xe0
 800636c:	00db      	lsls	r3, r3, #3
 800636e:	429a      	cmp	r2, r3
 8006370:	d800      	bhi.n	8006374 <HAL_SPI_TransmitReceive+0x154>
 8006372:	e07f      	b.n	8006474 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d005      	beq.n	8006388 <HAL_SPI_TransmitReceive+0x168>
 800637c:	2312      	movs	r3, #18
 800637e:	18fb      	adds	r3, r7, r3
 8006380:	881b      	ldrh	r3, [r3, #0]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d000      	beq.n	8006388 <HAL_SPI_TransmitReceive+0x168>
 8006386:	e069      	b.n	800645c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638c:	881a      	ldrh	r2, [r3, #0]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006398:	1c9a      	adds	r2, r3, #2
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	3b01      	subs	r3, #1
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063ac:	e056      	b.n	800645c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	2202      	movs	r2, #2
 80063b6:	4013      	ands	r3, r2
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d11b      	bne.n	80063f4 <HAL_SPI_TransmitReceive+0x1d4>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d016      	beq.n	80063f4 <HAL_SPI_TransmitReceive+0x1d4>
 80063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d113      	bne.n	80063f4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d0:	881a      	ldrh	r2, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063dc:	1c9a      	adds	r2, r3, #2
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	3b01      	subs	r3, #1
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063f0:	2300      	movs	r3, #0
 80063f2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	2201      	movs	r2, #1
 80063fc:	4013      	ands	r3, r2
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d11c      	bne.n	800643c <HAL_SPI_TransmitReceive+0x21c>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2246      	movs	r2, #70	; 0x46
 8006406:	5a9b      	ldrh	r3, [r3, r2]
 8006408:	b29b      	uxth	r3, r3
 800640a:	2b00      	cmp	r3, #0
 800640c:	d016      	beq.n	800643c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68da      	ldr	r2, [r3, #12]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006418:	b292      	uxth	r2, r2
 800641a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006420:	1c9a      	adds	r2, r3, #2
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2246      	movs	r2, #70	; 0x46
 800642a:	5a9b      	ldrh	r3, [r3, r2]
 800642c:	b29b      	uxth	r3, r3
 800642e:	3b01      	subs	r3, #1
 8006430:	b299      	uxth	r1, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2246      	movs	r2, #70	; 0x46
 8006436:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006438:	2301      	movs	r3, #1
 800643a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800643c:	f7fd fbac 	bl	8003b98 <HAL_GetTick>
 8006440:	0002      	movs	r2, r0
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006448:	429a      	cmp	r2, r3
 800644a:	d807      	bhi.n	800645c <HAL_SPI_TransmitReceive+0x23c>
 800644c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644e:	3301      	adds	r3, #1
 8006450:	d004      	beq.n	800645c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8006452:	2323      	movs	r3, #35	; 0x23
 8006454:	18fb      	adds	r3, r7, r3
 8006456:	2203      	movs	r2, #3
 8006458:	701a      	strb	r2, [r3, #0]
        goto error;
 800645a:	e0a2      	b.n	80065a2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006460:	b29b      	uxth	r3, r3
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1a3      	bne.n	80063ae <HAL_SPI_TransmitReceive+0x18e>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2246      	movs	r2, #70	; 0x46
 800646a:	5a9b      	ldrh	r3, [r3, r2]
 800646c:	b29b      	uxth	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d19d      	bne.n	80063ae <HAL_SPI_TransmitReceive+0x18e>
 8006472:	e085      	b.n	8006580 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d005      	beq.n	8006488 <HAL_SPI_TransmitReceive+0x268>
 800647c:	2312      	movs	r3, #18
 800647e:	18fb      	adds	r3, r7, r3
 8006480:	881b      	ldrh	r3, [r3, #0]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d000      	beq.n	8006488 <HAL_SPI_TransmitReceive+0x268>
 8006486:	e070      	b.n	800656a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	330c      	adds	r3, #12
 8006492:	7812      	ldrb	r2, [r2, #0]
 8006494:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649a:	1c5a      	adds	r2, r3, #1
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	3b01      	subs	r3, #1
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064ae:	e05c      	b.n	800656a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	2202      	movs	r2, #2
 80064b8:	4013      	ands	r3, r2
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d11c      	bne.n	80064f8 <HAL_SPI_TransmitReceive+0x2d8>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d017      	beq.n	80064f8 <HAL_SPI_TransmitReceive+0x2d8>
 80064c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d114      	bne.n	80064f8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	330c      	adds	r3, #12
 80064d8:	7812      	ldrb	r2, [r2, #0]
 80064da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e0:	1c5a      	adds	r2, r3, #1
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	3b01      	subs	r3, #1
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064f4:	2300      	movs	r3, #0
 80064f6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	2201      	movs	r2, #1
 8006500:	4013      	ands	r3, r2
 8006502:	2b01      	cmp	r3, #1
 8006504:	d11e      	bne.n	8006544 <HAL_SPI_TransmitReceive+0x324>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2246      	movs	r2, #70	; 0x46
 800650a:	5a9b      	ldrh	r3, [r3, r2]
 800650c:	b29b      	uxth	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d018      	beq.n	8006544 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	330c      	adds	r3, #12
 8006518:	001a      	movs	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651e:	7812      	ldrb	r2, [r2, #0]
 8006520:	b2d2      	uxtb	r2, r2
 8006522:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006528:	1c5a      	adds	r2, r3, #1
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2246      	movs	r2, #70	; 0x46
 8006532:	5a9b      	ldrh	r3, [r3, r2]
 8006534:	b29b      	uxth	r3, r3
 8006536:	3b01      	subs	r3, #1
 8006538:	b299      	uxth	r1, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2246      	movs	r2, #70	; 0x46
 800653e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006540:	2301      	movs	r3, #1
 8006542:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006544:	f7fd fb28 	bl	8003b98 <HAL_GetTick>
 8006548:	0002      	movs	r2, r0
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006550:	429a      	cmp	r2, r3
 8006552:	d802      	bhi.n	800655a <HAL_SPI_TransmitReceive+0x33a>
 8006554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006556:	3301      	adds	r3, #1
 8006558:	d102      	bne.n	8006560 <HAL_SPI_TransmitReceive+0x340>
 800655a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655c:	2b00      	cmp	r3, #0
 800655e:	d104      	bne.n	800656a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8006560:	2323      	movs	r3, #35	; 0x23
 8006562:	18fb      	adds	r3, r7, r3
 8006564:	2203      	movs	r2, #3
 8006566:	701a      	strb	r2, [r3, #0]
        goto error;
 8006568:	e01b      	b.n	80065a2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800656e:	b29b      	uxth	r3, r3
 8006570:	2b00      	cmp	r3, #0
 8006572:	d19d      	bne.n	80064b0 <HAL_SPI_TransmitReceive+0x290>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2246      	movs	r2, #70	; 0x46
 8006578:	5a9b      	ldrh	r3, [r3, r2]
 800657a:	b29b      	uxth	r3, r3
 800657c:	2b00      	cmp	r3, #0
 800657e:	d197      	bne.n	80064b0 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006580:	69fa      	ldr	r2, [r7, #28]
 8006582:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	0018      	movs	r0, r3
 8006588:	f000 f9aa 	bl	80068e0 <SPI_EndRxTxTransaction>
 800658c:	1e03      	subs	r3, r0, #0
 800658e:	d007      	beq.n	80065a0 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8006590:	2323      	movs	r3, #35	; 0x23
 8006592:	18fb      	adds	r3, r7, r3
 8006594:	2201      	movs	r2, #1
 8006596:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2220      	movs	r2, #32
 800659c:	661a      	str	r2, [r3, #96]	; 0x60
 800659e:	e000      	b.n	80065a2 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80065a0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	225d      	movs	r2, #93	; 0x5d
 80065a6:	2101      	movs	r1, #1
 80065a8:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	225c      	movs	r2, #92	; 0x5c
 80065ae:	2100      	movs	r1, #0
 80065b0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80065b2:	2323      	movs	r3, #35	; 0x23
 80065b4:	18fb      	adds	r3, r7, r3
 80065b6:	781b      	ldrb	r3, [r3, #0]
}
 80065b8:	0018      	movs	r0, r3
 80065ba:	46bd      	mov	sp, r7
 80065bc:	b00a      	add	sp, #40	; 0x28
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	ffffefff 	.word	0xffffefff

080065c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b088      	sub	sp, #32
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	603b      	str	r3, [r7, #0]
 80065d0:	1dfb      	adds	r3, r7, #7
 80065d2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80065d4:	f7fd fae0 	bl	8003b98 <HAL_GetTick>
 80065d8:	0002      	movs	r2, r0
 80065da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065dc:	1a9b      	subs	r3, r3, r2
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	18d3      	adds	r3, r2, r3
 80065e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80065e4:	f7fd fad8 	bl	8003b98 <HAL_GetTick>
 80065e8:	0003      	movs	r3, r0
 80065ea:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80065ec:	4b3a      	ldr	r3, [pc, #232]	; (80066d8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	015b      	lsls	r3, r3, #5
 80065f2:	0d1b      	lsrs	r3, r3, #20
 80065f4:	69fa      	ldr	r2, [r7, #28]
 80065f6:	4353      	muls	r3, r2
 80065f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065fa:	e058      	b.n	80066ae <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	3301      	adds	r3, #1
 8006600:	d055      	beq.n	80066ae <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006602:	f7fd fac9 	bl	8003b98 <HAL_GetTick>
 8006606:	0002      	movs	r2, r0
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	69fa      	ldr	r2, [r7, #28]
 800660e:	429a      	cmp	r2, r3
 8006610:	d902      	bls.n	8006618 <SPI_WaitFlagStateUntilTimeout+0x54>
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d142      	bne.n	800669e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	685a      	ldr	r2, [r3, #4]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	21e0      	movs	r1, #224	; 0xe0
 8006624:	438a      	bics	r2, r1
 8006626:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	2382      	movs	r3, #130	; 0x82
 800662e:	005b      	lsls	r3, r3, #1
 8006630:	429a      	cmp	r2, r3
 8006632:	d113      	bne.n	800665c <SPI_WaitFlagStateUntilTimeout+0x98>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	689a      	ldr	r2, [r3, #8]
 8006638:	2380      	movs	r3, #128	; 0x80
 800663a:	021b      	lsls	r3, r3, #8
 800663c:	429a      	cmp	r2, r3
 800663e:	d005      	beq.n	800664c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	689a      	ldr	r2, [r3, #8]
 8006644:	2380      	movs	r3, #128	; 0x80
 8006646:	00db      	lsls	r3, r3, #3
 8006648:	429a      	cmp	r2, r3
 800664a:	d107      	bne.n	800665c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2140      	movs	r1, #64	; 0x40
 8006658:	438a      	bics	r2, r1
 800665a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006660:	2380      	movs	r3, #128	; 0x80
 8006662:	019b      	lsls	r3, r3, #6
 8006664:	429a      	cmp	r2, r3
 8006666:	d110      	bne.n	800668a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	491a      	ldr	r1, [pc, #104]	; (80066dc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006674:	400a      	ands	r2, r1
 8006676:	601a      	str	r2, [r3, #0]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2180      	movs	r1, #128	; 0x80
 8006684:	0189      	lsls	r1, r1, #6
 8006686:	430a      	orrs	r2, r1
 8006688:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	225d      	movs	r2, #93	; 0x5d
 800668e:	2101      	movs	r1, #1
 8006690:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	225c      	movs	r2, #92	; 0x5c
 8006696:	2100      	movs	r1, #0
 8006698:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	e017      	b.n	80066ce <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d101      	bne.n	80066a8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80066a4:	2300      	movs	r3, #0
 80066a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	3b01      	subs	r3, #1
 80066ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	4013      	ands	r3, r2
 80066b8:	68ba      	ldr	r2, [r7, #8]
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	425a      	negs	r2, r3
 80066be:	4153      	adcs	r3, r2
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	001a      	movs	r2, r3
 80066c4:	1dfb      	adds	r3, r7, #7
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d197      	bne.n	80065fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	0018      	movs	r0, r3
 80066d0:	46bd      	mov	sp, r7
 80066d2:	b008      	add	sp, #32
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	46c0      	nop			; (mov r8, r8)
 80066d8:	20000024 	.word	0x20000024
 80066dc:	ffffdfff 	.word	0xffffdfff

080066e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b08a      	sub	sp, #40	; 0x28
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
 80066ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80066ee:	2317      	movs	r3, #23
 80066f0:	18fb      	adds	r3, r7, r3
 80066f2:	2200      	movs	r2, #0
 80066f4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80066f6:	f7fd fa4f 	bl	8003b98 <HAL_GetTick>
 80066fa:	0002      	movs	r2, r0
 80066fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fe:	1a9b      	subs	r3, r3, r2
 8006700:	683a      	ldr	r2, [r7, #0]
 8006702:	18d3      	adds	r3, r2, r3
 8006704:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006706:	f7fd fa47 	bl	8003b98 <HAL_GetTick>
 800670a:	0003      	movs	r3, r0
 800670c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	330c      	adds	r3, #12
 8006714:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006716:	4b41      	ldr	r3, [pc, #260]	; (800681c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	0013      	movs	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	189b      	adds	r3, r3, r2
 8006720:	00da      	lsls	r2, r3, #3
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	0d1b      	lsrs	r3, r3, #20
 8006726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006728:	4353      	muls	r3, r2
 800672a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800672c:	e068      	b.n	8006800 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	23c0      	movs	r3, #192	; 0xc0
 8006732:	00db      	lsls	r3, r3, #3
 8006734:	429a      	cmp	r2, r3
 8006736:	d10a      	bne.n	800674e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d107      	bne.n	800674e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	b2da      	uxtb	r2, r3
 8006744:	2117      	movs	r1, #23
 8006746:	187b      	adds	r3, r7, r1
 8006748:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800674a:	187b      	adds	r3, r7, r1
 800674c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	3301      	adds	r3, #1
 8006752:	d055      	beq.n	8006800 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006754:	f7fd fa20 	bl	8003b98 <HAL_GetTick>
 8006758:	0002      	movs	r2, r0
 800675a:	6a3b      	ldr	r3, [r7, #32]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006760:	429a      	cmp	r2, r3
 8006762:	d902      	bls.n	800676a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006766:	2b00      	cmp	r3, #0
 8006768:	d142      	bne.n	80067f0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	21e0      	movs	r1, #224	; 0xe0
 8006776:	438a      	bics	r2, r1
 8006778:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	685a      	ldr	r2, [r3, #4]
 800677e:	2382      	movs	r3, #130	; 0x82
 8006780:	005b      	lsls	r3, r3, #1
 8006782:	429a      	cmp	r2, r3
 8006784:	d113      	bne.n	80067ae <SPI_WaitFifoStateUntilTimeout+0xce>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	689a      	ldr	r2, [r3, #8]
 800678a:	2380      	movs	r3, #128	; 0x80
 800678c:	021b      	lsls	r3, r3, #8
 800678e:	429a      	cmp	r2, r3
 8006790:	d005      	beq.n	800679e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	689a      	ldr	r2, [r3, #8]
 8006796:	2380      	movs	r3, #128	; 0x80
 8006798:	00db      	lsls	r3, r3, #3
 800679a:	429a      	cmp	r2, r3
 800679c:	d107      	bne.n	80067ae <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2140      	movs	r1, #64	; 0x40
 80067aa:	438a      	bics	r2, r1
 80067ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067b2:	2380      	movs	r3, #128	; 0x80
 80067b4:	019b      	lsls	r3, r3, #6
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d110      	bne.n	80067dc <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4916      	ldr	r1, [pc, #88]	; (8006820 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80067c6:	400a      	ands	r2, r1
 80067c8:	601a      	str	r2, [r3, #0]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2180      	movs	r1, #128	; 0x80
 80067d6:	0189      	lsls	r1, r1, #6
 80067d8:	430a      	orrs	r2, r1
 80067da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	225d      	movs	r2, #93	; 0x5d
 80067e0:	2101      	movs	r1, #1
 80067e2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	225c      	movs	r2, #92	; 0x5c
 80067e8:	2100      	movs	r1, #0
 80067ea:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e010      	b.n	8006812 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80067f6:	2300      	movs	r3, #0
 80067f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	3b01      	subs	r3, #1
 80067fe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	68ba      	ldr	r2, [r7, #8]
 8006808:	4013      	ands	r3, r2
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	429a      	cmp	r2, r3
 800680e:	d18e      	bne.n	800672e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	0018      	movs	r0, r3
 8006814:	46bd      	mov	sp, r7
 8006816:	b00a      	add	sp, #40	; 0x28
 8006818:	bd80      	pop	{r7, pc}
 800681a:	46c0      	nop			; (mov r8, r8)
 800681c:	20000024 	.word	0x20000024
 8006820:	ffffdfff 	.word	0xffffdfff

08006824 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af02      	add	r7, sp, #8
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	685a      	ldr	r2, [r3, #4]
 8006834:	2382      	movs	r3, #130	; 0x82
 8006836:	005b      	lsls	r3, r3, #1
 8006838:	429a      	cmp	r2, r3
 800683a:	d113      	bne.n	8006864 <SPI_EndRxTransaction+0x40>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	689a      	ldr	r2, [r3, #8]
 8006840:	2380      	movs	r3, #128	; 0x80
 8006842:	021b      	lsls	r3, r3, #8
 8006844:	429a      	cmp	r2, r3
 8006846:	d005      	beq.n	8006854 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	689a      	ldr	r2, [r3, #8]
 800684c:	2380      	movs	r3, #128	; 0x80
 800684e:	00db      	lsls	r3, r3, #3
 8006850:	429a      	cmp	r2, r3
 8006852:	d107      	bne.n	8006864 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2140      	movs	r1, #64	; 0x40
 8006860:	438a      	bics	r2, r1
 8006862:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	9300      	str	r3, [sp, #0]
 800686c:	0013      	movs	r3, r2
 800686e:	2200      	movs	r2, #0
 8006870:	2180      	movs	r1, #128	; 0x80
 8006872:	f7ff fea7 	bl	80065c4 <SPI_WaitFlagStateUntilTimeout>
 8006876:	1e03      	subs	r3, r0, #0
 8006878:	d007      	beq.n	800688a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800687e:	2220      	movs	r2, #32
 8006880:	431a      	orrs	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e026      	b.n	80068d8 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	2382      	movs	r3, #130	; 0x82
 8006890:	005b      	lsls	r3, r3, #1
 8006892:	429a      	cmp	r2, r3
 8006894:	d11f      	bne.n	80068d6 <SPI_EndRxTransaction+0xb2>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	689a      	ldr	r2, [r3, #8]
 800689a:	2380      	movs	r3, #128	; 0x80
 800689c:	021b      	lsls	r3, r3, #8
 800689e:	429a      	cmp	r2, r3
 80068a0:	d005      	beq.n	80068ae <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	689a      	ldr	r2, [r3, #8]
 80068a6:	2380      	movs	r3, #128	; 0x80
 80068a8:	00db      	lsls	r3, r3, #3
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d113      	bne.n	80068d6 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	23c0      	movs	r3, #192	; 0xc0
 80068b2:	00d9      	lsls	r1, r3, #3
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	0013      	movs	r3, r2
 80068bc:	2200      	movs	r2, #0
 80068be:	f7ff ff0f 	bl	80066e0 <SPI_WaitFifoStateUntilTimeout>
 80068c2:	1e03      	subs	r3, r0, #0
 80068c4:	d007      	beq.n	80068d6 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068ca:	2220      	movs	r2, #32
 80068cc:	431a      	orrs	r2, r3
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e000      	b.n	80068d8 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	0018      	movs	r0, r3
 80068da:	46bd      	mov	sp, r7
 80068dc:	b004      	add	sp, #16
 80068de:	bd80      	pop	{r7, pc}

080068e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b086      	sub	sp, #24
 80068e4:	af02      	add	r7, sp, #8
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	23c0      	movs	r3, #192	; 0xc0
 80068f0:	0159      	lsls	r1, r3, #5
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	9300      	str	r3, [sp, #0]
 80068f8:	0013      	movs	r3, r2
 80068fa:	2200      	movs	r2, #0
 80068fc:	f7ff fef0 	bl	80066e0 <SPI_WaitFifoStateUntilTimeout>
 8006900:	1e03      	subs	r3, r0, #0
 8006902:	d007      	beq.n	8006914 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006908:	2220      	movs	r2, #32
 800690a:	431a      	orrs	r2, r3
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e027      	b.n	8006964 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006914:	68ba      	ldr	r2, [r7, #8]
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	9300      	str	r3, [sp, #0]
 800691c:	0013      	movs	r3, r2
 800691e:	2200      	movs	r2, #0
 8006920:	2180      	movs	r1, #128	; 0x80
 8006922:	f7ff fe4f 	bl	80065c4 <SPI_WaitFlagStateUntilTimeout>
 8006926:	1e03      	subs	r3, r0, #0
 8006928:	d007      	beq.n	800693a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800692e:	2220      	movs	r2, #32
 8006930:	431a      	orrs	r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e014      	b.n	8006964 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800693a:	68ba      	ldr	r2, [r7, #8]
 800693c:	23c0      	movs	r3, #192	; 0xc0
 800693e:	00d9      	lsls	r1, r3, #3
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	0013      	movs	r3, r2
 8006948:	2200      	movs	r2, #0
 800694a:	f7ff fec9 	bl	80066e0 <SPI_WaitFifoStateUntilTimeout>
 800694e:	1e03      	subs	r3, r0, #0
 8006950:	d007      	beq.n	8006962 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006956:	2220      	movs	r2, #32
 8006958:	431a      	orrs	r2, r3
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e000      	b.n	8006964 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	0018      	movs	r0, r3
 8006966:	46bd      	mov	sp, r7
 8006968:	b004      	add	sp, #16
 800696a:	bd80      	pop	{r7, pc}

0800696c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d101      	bne.n	800697e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e04a      	b.n	8006a14 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	223d      	movs	r2, #61	; 0x3d
 8006982:	5c9b      	ldrb	r3, [r3, r2]
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d107      	bne.n	800699a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	223c      	movs	r2, #60	; 0x3c
 800698e:	2100      	movs	r1, #0
 8006990:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	0018      	movs	r0, r3
 8006996:	f7fc fe03 	bl	80035a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	223d      	movs	r2, #61	; 0x3d
 800699e:	2102      	movs	r1, #2
 80069a0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	3304      	adds	r3, #4
 80069aa:	0019      	movs	r1, r3
 80069ac:	0010      	movs	r0, r2
 80069ae:	f000 fa11 	bl	8006dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2248      	movs	r2, #72	; 0x48
 80069b6:	2101      	movs	r1, #1
 80069b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	223e      	movs	r2, #62	; 0x3e
 80069be:	2101      	movs	r1, #1
 80069c0:	5499      	strb	r1, [r3, r2]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	223f      	movs	r2, #63	; 0x3f
 80069c6:	2101      	movs	r1, #1
 80069c8:	5499      	strb	r1, [r3, r2]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2240      	movs	r2, #64	; 0x40
 80069ce:	2101      	movs	r1, #1
 80069d0:	5499      	strb	r1, [r3, r2]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2241      	movs	r2, #65	; 0x41
 80069d6:	2101      	movs	r1, #1
 80069d8:	5499      	strb	r1, [r3, r2]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2242      	movs	r2, #66	; 0x42
 80069de:	2101      	movs	r1, #1
 80069e0:	5499      	strb	r1, [r3, r2]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2243      	movs	r2, #67	; 0x43
 80069e6:	2101      	movs	r1, #1
 80069e8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2244      	movs	r2, #68	; 0x44
 80069ee:	2101      	movs	r1, #1
 80069f0:	5499      	strb	r1, [r3, r2]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2245      	movs	r2, #69	; 0x45
 80069f6:	2101      	movs	r1, #1
 80069f8:	5499      	strb	r1, [r3, r2]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2246      	movs	r2, #70	; 0x46
 80069fe:	2101      	movs	r1, #1
 8006a00:	5499      	strb	r1, [r3, r2]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2247      	movs	r2, #71	; 0x47
 8006a06:	2101      	movs	r1, #1
 8006a08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	223d      	movs	r2, #61	; 0x3d
 8006a0e:	2101      	movs	r1, #1
 8006a10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	0018      	movs	r0, r3
 8006a16:	46bd      	mov	sp, r7
 8006a18:	b002      	add	sp, #8
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	223d      	movs	r2, #61	; 0x3d
 8006a28:	5c9b      	ldrb	r3, [r3, r2]
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d001      	beq.n	8006a34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e042      	b.n	8006aba <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	223d      	movs	r2, #61	; 0x3d
 8006a38:	2102      	movs	r1, #2
 8006a3a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68da      	ldr	r2, [r3, #12]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2101      	movs	r1, #1
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a1c      	ldr	r2, [pc, #112]	; (8006ac4 <HAL_TIM_Base_Start_IT+0xa8>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d00f      	beq.n	8006a76 <HAL_TIM_Base_Start_IT+0x5a>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	2380      	movs	r3, #128	; 0x80
 8006a5c:	05db      	lsls	r3, r3, #23
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d009      	beq.n	8006a76 <HAL_TIM_Base_Start_IT+0x5a>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a18      	ldr	r2, [pc, #96]	; (8006ac8 <HAL_TIM_Base_Start_IT+0xac>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d004      	beq.n	8006a76 <HAL_TIM_Base_Start_IT+0x5a>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a16      	ldr	r2, [pc, #88]	; (8006acc <HAL_TIM_Base_Start_IT+0xb0>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d116      	bne.n	8006aa4 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	4a14      	ldr	r2, [pc, #80]	; (8006ad0 <HAL_TIM_Base_Start_IT+0xb4>)
 8006a7e:	4013      	ands	r3, r2
 8006a80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2b06      	cmp	r3, #6
 8006a86:	d016      	beq.n	8006ab6 <HAL_TIM_Base_Start_IT+0x9a>
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	2380      	movs	r3, #128	; 0x80
 8006a8c:	025b      	lsls	r3, r3, #9
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d011      	beq.n	8006ab6 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2101      	movs	r1, #1
 8006a9e:	430a      	orrs	r2, r1
 8006aa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aa2:	e008      	b.n	8006ab6 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2101      	movs	r1, #1
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	601a      	str	r2, [r3, #0]
 8006ab4:	e000      	b.n	8006ab8 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ab6:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	0018      	movs	r0, r3
 8006abc:	46bd      	mov	sp, r7
 8006abe:	b004      	add	sp, #16
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	46c0      	nop			; (mov r8, r8)
 8006ac4:	40012c00 	.word	0x40012c00
 8006ac8:	40000400 	.word	0x40000400
 8006acc:	40014000 	.word	0x40014000
 8006ad0:	00010007 	.word	0x00010007

08006ad4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68da      	ldr	r2, [r3, #12]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	438a      	bics	r2, r1
 8006aea:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	4a0d      	ldr	r2, [pc, #52]	; (8006b28 <HAL_TIM_Base_Stop_IT+0x54>)
 8006af4:	4013      	ands	r3, r2
 8006af6:	d10d      	bne.n	8006b14 <HAL_TIM_Base_Stop_IT+0x40>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	4a0b      	ldr	r2, [pc, #44]	; (8006b2c <HAL_TIM_Base_Stop_IT+0x58>)
 8006b00:	4013      	ands	r3, r2
 8006b02:	d107      	bne.n	8006b14 <HAL_TIM_Base_Stop_IT+0x40>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2101      	movs	r1, #1
 8006b10:	438a      	bics	r2, r1
 8006b12:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	223d      	movs	r2, #61	; 0x3d
 8006b18:	2101      	movs	r1, #1
 8006b1a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	0018      	movs	r0, r3
 8006b20:	46bd      	mov	sp, r7
 8006b22:	b002      	add	sp, #8
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	46c0      	nop			; (mov r8, r8)
 8006b28:	00001111 	.word	0x00001111
 8006b2c:	00000444 	.word	0x00000444

08006b30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	2202      	movs	r2, #2
 8006b40:	4013      	ands	r3, r2
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	d124      	bne.n	8006b90 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	2202      	movs	r2, #2
 8006b4e:	4013      	ands	r3, r2
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	d11d      	bne.n	8006b90 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2203      	movs	r2, #3
 8006b5a:	4252      	negs	r2, r2
 8006b5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	2203      	movs	r2, #3
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	d004      	beq.n	8006b7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	0018      	movs	r0, r3
 8006b74:	f000 f916 	bl	8006da4 <HAL_TIM_IC_CaptureCallback>
 8006b78:	e007      	b.n	8006b8a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	0018      	movs	r0, r3
 8006b7e:	f000 f909 	bl	8006d94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	0018      	movs	r0, r3
 8006b86:	f000 f915 	bl	8006db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	2204      	movs	r2, #4
 8006b98:	4013      	ands	r3, r2
 8006b9a:	2b04      	cmp	r3, #4
 8006b9c:	d125      	bne.n	8006bea <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	2204      	movs	r2, #4
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	2b04      	cmp	r3, #4
 8006baa:	d11e      	bne.n	8006bea <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2205      	movs	r2, #5
 8006bb2:	4252      	negs	r2, r2
 8006bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2202      	movs	r2, #2
 8006bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	699a      	ldr	r2, [r3, #24]
 8006bc2:	23c0      	movs	r3, #192	; 0xc0
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	d004      	beq.n	8006bd4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	0018      	movs	r0, r3
 8006bce:	f000 f8e9 	bl	8006da4 <HAL_TIM_IC_CaptureCallback>
 8006bd2:	e007      	b.n	8006be4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	0018      	movs	r0, r3
 8006bd8:	f000 f8dc 	bl	8006d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	0018      	movs	r0, r3
 8006be0:	f000 f8e8 	bl	8006db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	2208      	movs	r2, #8
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	2b08      	cmp	r3, #8
 8006bf6:	d124      	bne.n	8006c42 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	2208      	movs	r2, #8
 8006c00:	4013      	ands	r3, r2
 8006c02:	2b08      	cmp	r3, #8
 8006c04:	d11d      	bne.n	8006c42 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2209      	movs	r2, #9
 8006c0c:	4252      	negs	r2, r2
 8006c0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2204      	movs	r2, #4
 8006c14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	69db      	ldr	r3, [r3, #28]
 8006c1c:	2203      	movs	r2, #3
 8006c1e:	4013      	ands	r3, r2
 8006c20:	d004      	beq.n	8006c2c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	0018      	movs	r0, r3
 8006c26:	f000 f8bd 	bl	8006da4 <HAL_TIM_IC_CaptureCallback>
 8006c2a:	e007      	b.n	8006c3c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	0018      	movs	r0, r3
 8006c30:	f000 f8b0 	bl	8006d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	0018      	movs	r0, r3
 8006c38:	f000 f8bc 	bl	8006db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	2210      	movs	r2, #16
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	2b10      	cmp	r3, #16
 8006c4e:	d125      	bne.n	8006c9c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	2210      	movs	r2, #16
 8006c58:	4013      	ands	r3, r2
 8006c5a:	2b10      	cmp	r3, #16
 8006c5c:	d11e      	bne.n	8006c9c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2211      	movs	r2, #17
 8006c64:	4252      	negs	r2, r2
 8006c66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2208      	movs	r2, #8
 8006c6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	69da      	ldr	r2, [r3, #28]
 8006c74:	23c0      	movs	r3, #192	; 0xc0
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4013      	ands	r3, r2
 8006c7a:	d004      	beq.n	8006c86 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	0018      	movs	r0, r3
 8006c80:	f000 f890 	bl	8006da4 <HAL_TIM_IC_CaptureCallback>
 8006c84:	e007      	b.n	8006c96 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	0018      	movs	r0, r3
 8006c8a:	f000 f883 	bl	8006d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	0018      	movs	r0, r3
 8006c92:	f000 f88f 	bl	8006db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d10f      	bne.n	8006cca <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d108      	bne.n	8006cca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2202      	movs	r2, #2
 8006cbe:	4252      	negs	r2, r2
 8006cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	0018      	movs	r0, r3
 8006cc6:	f7fc fb77 	bl	80033b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	2280      	movs	r2, #128	; 0x80
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	2b80      	cmp	r3, #128	; 0x80
 8006cd6:	d10f      	bne.n	8006cf8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	2280      	movs	r2, #128	; 0x80
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	2b80      	cmp	r3, #128	; 0x80
 8006ce4:	d108      	bne.n	8006cf8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2281      	movs	r2, #129	; 0x81
 8006cec:	4252      	negs	r2, r2
 8006cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	0018      	movs	r0, r3
 8006cf4:	f000 f964 	bl	8006fc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	691a      	ldr	r2, [r3, #16]
 8006cfe:	2380      	movs	r3, #128	; 0x80
 8006d00:	005b      	lsls	r3, r3, #1
 8006d02:	401a      	ands	r2, r3
 8006d04:	2380      	movs	r3, #128	; 0x80
 8006d06:	005b      	lsls	r3, r3, #1
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d10e      	bne.n	8006d2a <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	2280      	movs	r2, #128	; 0x80
 8006d14:	4013      	ands	r3, r2
 8006d16:	2b80      	cmp	r3, #128	; 0x80
 8006d18:	d107      	bne.n	8006d2a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a1c      	ldr	r2, [pc, #112]	; (8006d90 <HAL_TIM_IRQHandler+0x260>)
 8006d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	0018      	movs	r0, r3
 8006d26:	f000 f953 	bl	8006fd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	2240      	movs	r2, #64	; 0x40
 8006d32:	4013      	ands	r3, r2
 8006d34:	2b40      	cmp	r3, #64	; 0x40
 8006d36:	d10f      	bne.n	8006d58 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	2240      	movs	r2, #64	; 0x40
 8006d40:	4013      	ands	r3, r2
 8006d42:	2b40      	cmp	r3, #64	; 0x40
 8006d44:	d108      	bne.n	8006d58 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2241      	movs	r2, #65	; 0x41
 8006d4c:	4252      	negs	r2, r2
 8006d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	0018      	movs	r0, r3
 8006d54:	f000 f836 	bl	8006dc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	4013      	ands	r3, r2
 8006d62:	2b20      	cmp	r3, #32
 8006d64:	d10f      	bne.n	8006d86 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	4013      	ands	r3, r2
 8006d70:	2b20      	cmp	r3, #32
 8006d72:	d108      	bne.n	8006d86 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2221      	movs	r2, #33	; 0x21
 8006d7a:	4252      	negs	r2, r2
 8006d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	0018      	movs	r0, r3
 8006d82:	f000 f915 	bl	8006fb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d86:	46c0      	nop			; (mov r8, r8)
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	b002      	add	sp, #8
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	46c0      	nop			; (mov r8, r8)
 8006d90:	fffffeff 	.word	0xfffffeff

08006d94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d9c:	46c0      	nop			; (mov r8, r8)
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	b002      	add	sp, #8
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006dac:	46c0      	nop			; (mov r8, r8)
 8006dae:	46bd      	mov	sp, r7
 8006db0:	b002      	add	sp, #8
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006dbc:	46c0      	nop			; (mov r8, r8)
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	b002      	add	sp, #8
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006dcc:	46c0      	nop			; (mov r8, r8)
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	b002      	add	sp, #8
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a34      	ldr	r2, [pc, #208]	; (8006eb8 <TIM_Base_SetConfig+0xe4>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d008      	beq.n	8006dfe <TIM_Base_SetConfig+0x2a>
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	2380      	movs	r3, #128	; 0x80
 8006df0:	05db      	lsls	r3, r3, #23
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d003      	beq.n	8006dfe <TIM_Base_SetConfig+0x2a>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a30      	ldr	r2, [pc, #192]	; (8006ebc <TIM_Base_SetConfig+0xe8>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d108      	bne.n	8006e10 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2270      	movs	r2, #112	; 0x70
 8006e02:	4393      	bics	r3, r2
 8006e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a29      	ldr	r2, [pc, #164]	; (8006eb8 <TIM_Base_SetConfig+0xe4>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d018      	beq.n	8006e4a <TIM_Base_SetConfig+0x76>
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	2380      	movs	r3, #128	; 0x80
 8006e1c:	05db      	lsls	r3, r3, #23
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d013      	beq.n	8006e4a <TIM_Base_SetConfig+0x76>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a25      	ldr	r2, [pc, #148]	; (8006ebc <TIM_Base_SetConfig+0xe8>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d00f      	beq.n	8006e4a <TIM_Base_SetConfig+0x76>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a24      	ldr	r2, [pc, #144]	; (8006ec0 <TIM_Base_SetConfig+0xec>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d00b      	beq.n	8006e4a <TIM_Base_SetConfig+0x76>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a23      	ldr	r2, [pc, #140]	; (8006ec4 <TIM_Base_SetConfig+0xf0>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d007      	beq.n	8006e4a <TIM_Base_SetConfig+0x76>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a22      	ldr	r2, [pc, #136]	; (8006ec8 <TIM_Base_SetConfig+0xf4>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d003      	beq.n	8006e4a <TIM_Base_SetConfig+0x76>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a21      	ldr	r2, [pc, #132]	; (8006ecc <TIM_Base_SetConfig+0xf8>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d108      	bne.n	8006e5c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	4a20      	ldr	r2, [pc, #128]	; (8006ed0 <TIM_Base_SetConfig+0xfc>)
 8006e4e:	4013      	ands	r3, r2
 8006e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2280      	movs	r2, #128	; 0x80
 8006e60:	4393      	bics	r3, r2
 8006e62:	001a      	movs	r2, r3
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	695b      	ldr	r3, [r3, #20]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	689a      	ldr	r2, [r3, #8]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a0c      	ldr	r2, [pc, #48]	; (8006eb8 <TIM_Base_SetConfig+0xe4>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d00b      	beq.n	8006ea2 <TIM_Base_SetConfig+0xce>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a0d      	ldr	r2, [pc, #52]	; (8006ec4 <TIM_Base_SetConfig+0xf0>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d007      	beq.n	8006ea2 <TIM_Base_SetConfig+0xce>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a0c      	ldr	r2, [pc, #48]	; (8006ec8 <TIM_Base_SetConfig+0xf4>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d003      	beq.n	8006ea2 <TIM_Base_SetConfig+0xce>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a0b      	ldr	r2, [pc, #44]	; (8006ecc <TIM_Base_SetConfig+0xf8>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d103      	bne.n	8006eaa <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	691a      	ldr	r2, [r3, #16]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	615a      	str	r2, [r3, #20]
}
 8006eb0:	46c0      	nop			; (mov r8, r8)
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	b004      	add	sp, #16
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	40012c00 	.word	0x40012c00
 8006ebc:	40000400 	.word	0x40000400
 8006ec0:	40002000 	.word	0x40002000
 8006ec4:	40014000 	.word	0x40014000
 8006ec8:	40014400 	.word	0x40014400
 8006ecc:	40014800 	.word	0x40014800
 8006ed0:	fffffcff 	.word	0xfffffcff

08006ed4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	223c      	movs	r2, #60	; 0x3c
 8006ee2:	5c9b      	ldrb	r3, [r3, r2]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d101      	bne.n	8006eec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ee8:	2302      	movs	r3, #2
 8006eea:	e055      	b.n	8006f98 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	223c      	movs	r2, #60	; 0x3c
 8006ef0:	2101      	movs	r1, #1
 8006ef2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	223d      	movs	r2, #61	; 0x3d
 8006ef8:	2102      	movs	r1, #2
 8006efa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a23      	ldr	r2, [pc, #140]	; (8006fa0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d108      	bne.n	8006f28 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	4a22      	ldr	r2, [pc, #136]	; (8006fa4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2270      	movs	r2, #112	; 0x70
 8006f2c:	4393      	bics	r3, r2
 8006f2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a16      	ldr	r2, [pc, #88]	; (8006fa0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d00f      	beq.n	8006f6c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	2380      	movs	r3, #128	; 0x80
 8006f52:	05db      	lsls	r3, r3, #23
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d009      	beq.n	8006f6c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a12      	ldr	r2, [pc, #72]	; (8006fa8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d004      	beq.n	8006f6c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a11      	ldr	r2, [pc, #68]	; (8006fac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d10c      	bne.n	8006f86 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	2280      	movs	r2, #128	; 0x80
 8006f70:	4393      	bics	r3, r2
 8006f72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	68ba      	ldr	r2, [r7, #8]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68ba      	ldr	r2, [r7, #8]
 8006f84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	223d      	movs	r2, #61	; 0x3d
 8006f8a:	2101      	movs	r1, #1
 8006f8c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	223c      	movs	r2, #60	; 0x3c
 8006f92:	2100      	movs	r1, #0
 8006f94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	0018      	movs	r0, r3
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	b004      	add	sp, #16
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	40012c00 	.word	0x40012c00
 8006fa4:	ff0fffff 	.word	0xff0fffff
 8006fa8:	40000400 	.word	0x40000400
 8006fac:	40014000 	.word	0x40014000

08006fb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fb8:	46c0      	nop			; (mov r8, r8)
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	b002      	add	sp, #8
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fc8:	46c0      	nop			; (mov r8, r8)
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	b002      	add	sp, #8
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006fd8:	46c0      	nop			; (mov r8, r8)
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	b002      	add	sp, #8
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d101      	bne.n	8006ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e046      	b.n	8007080 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2288      	movs	r2, #136	; 0x88
 8006ff6:	589b      	ldr	r3, [r3, r2]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d107      	bne.n	800700c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2284      	movs	r2, #132	; 0x84
 8007000:	2100      	movs	r1, #0
 8007002:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	0018      	movs	r0, r3
 8007008:	f7fc faf0 	bl	80035ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2288      	movs	r2, #136	; 0x88
 8007010:	2124      	movs	r1, #36	; 0x24
 8007012:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2101      	movs	r1, #1
 8007020:	438a      	bics	r2, r1
 8007022:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	0018      	movs	r0, r3
 8007028:	f000 f9ee 	bl	8007408 <UART_SetConfig>
 800702c:	0003      	movs	r3, r0
 800702e:	2b01      	cmp	r3, #1
 8007030:	d101      	bne.n	8007036 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e024      	b.n	8007080 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800703a:	2b00      	cmp	r3, #0
 800703c:	d003      	beq.n	8007046 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	0018      	movs	r0, r3
 8007042:	f000 fc9f 	bl	8007984 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	490d      	ldr	r1, [pc, #52]	; (8007088 <HAL_UART_Init+0xa8>)
 8007052:	400a      	ands	r2, r1
 8007054:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	689a      	ldr	r2, [r3, #8]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	212a      	movs	r1, #42	; 0x2a
 8007062:	438a      	bics	r2, r1
 8007064:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2101      	movs	r1, #1
 8007072:	430a      	orrs	r2, r1
 8007074:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	0018      	movs	r0, r3
 800707a:	f000 fd37 	bl	8007aec <UART_CheckIdleState>
 800707e:	0003      	movs	r3, r0
}
 8007080:	0018      	movs	r0, r3
 8007082:	46bd      	mov	sp, r7
 8007084:	b002      	add	sp, #8
 8007086:	bd80      	pop	{r7, pc}
 8007088:	ffffb7ff 	.word	0xffffb7ff

0800708c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d101      	bne.n	800709e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e032      	b.n	8007104 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2288      	movs	r2, #136	; 0x88
 80070a2:	2124      	movs	r1, #36	; 0x24
 80070a4:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2101      	movs	r1, #1
 80070b2:	438a      	bics	r2, r1
 80070b4:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2200      	movs	r2, #0
 80070bc:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2200      	movs	r2, #0
 80070c4:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2200      	movs	r2, #0
 80070cc:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	0018      	movs	r0, r3
 80070d2:	f7fc fb6f 	bl	80037b4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2290      	movs	r2, #144	; 0x90
 80070da:	2100      	movs	r1, #0
 80070dc:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2288      	movs	r2, #136	; 0x88
 80070e2:	2100      	movs	r1, #0
 80070e4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	228c      	movs	r2, #140	; 0x8c
 80070ea:	2100      	movs	r1, #0
 80070ec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2284      	movs	r2, #132	; 0x84
 80070fe:	2100      	movs	r1, #0
 8007100:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	0018      	movs	r0, r3
 8007106:	46bd      	mov	sp, r7
 8007108:	b002      	add	sp, #8
 800710a:	bd80      	pop	{r7, pc}

0800710c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b08a      	sub	sp, #40	; 0x28
 8007110:	af02      	add	r7, sp, #8
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	603b      	str	r3, [r7, #0]
 8007118:	1dbb      	adds	r3, r7, #6
 800711a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2288      	movs	r2, #136	; 0x88
 8007120:	589b      	ldr	r3, [r3, r2]
 8007122:	2b20      	cmp	r3, #32
 8007124:	d000      	beq.n	8007128 <HAL_UART_Transmit+0x1c>
 8007126:	e088      	b.n	800723a <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d003      	beq.n	8007136 <HAL_UART_Transmit+0x2a>
 800712e:	1dbb      	adds	r3, r7, #6
 8007130:	881b      	ldrh	r3, [r3, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d101      	bne.n	800713a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e080      	b.n	800723c <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	689a      	ldr	r2, [r3, #8]
 800713e:	2380      	movs	r3, #128	; 0x80
 8007140:	015b      	lsls	r3, r3, #5
 8007142:	429a      	cmp	r2, r3
 8007144:	d109      	bne.n	800715a <HAL_UART_Transmit+0x4e>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d105      	bne.n	800715a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	2201      	movs	r2, #1
 8007152:	4013      	ands	r3, r2
 8007154:	d001      	beq.n	800715a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e070      	b.n	800723c <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2290      	movs	r2, #144	; 0x90
 800715e:	2100      	movs	r1, #0
 8007160:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2288      	movs	r2, #136	; 0x88
 8007166:	2121      	movs	r1, #33	; 0x21
 8007168:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800716a:	f7fc fd15 	bl	8003b98 <HAL_GetTick>
 800716e:	0003      	movs	r3, r0
 8007170:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	1dba      	adds	r2, r7, #6
 8007176:	2154      	movs	r1, #84	; 0x54
 8007178:	8812      	ldrh	r2, [r2, #0]
 800717a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	1dba      	adds	r2, r7, #6
 8007180:	2156      	movs	r1, #86	; 0x56
 8007182:	8812      	ldrh	r2, [r2, #0]
 8007184:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	689a      	ldr	r2, [r3, #8]
 800718a:	2380      	movs	r3, #128	; 0x80
 800718c:	015b      	lsls	r3, r3, #5
 800718e:	429a      	cmp	r2, r3
 8007190:	d108      	bne.n	80071a4 <HAL_UART_Transmit+0x98>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d104      	bne.n	80071a4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800719a:	2300      	movs	r3, #0
 800719c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	61bb      	str	r3, [r7, #24]
 80071a2:	e003      	b.n	80071ac <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071a8:	2300      	movs	r3, #0
 80071aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80071ac:	e02c      	b.n	8007208 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	68f8      	ldr	r0, [r7, #12]
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	9300      	str	r3, [sp, #0]
 80071b6:	0013      	movs	r3, r2
 80071b8:	2200      	movs	r2, #0
 80071ba:	2180      	movs	r1, #128	; 0x80
 80071bc:	f000 fce4 	bl	8007b88 <UART_WaitOnFlagUntilTimeout>
 80071c0:	1e03      	subs	r3, r0, #0
 80071c2:	d001      	beq.n	80071c8 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80071c4:	2303      	movs	r3, #3
 80071c6:	e039      	b.n	800723c <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10b      	bne.n	80071e6 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	881b      	ldrh	r3, [r3, #0]
 80071d2:	001a      	movs	r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	05d2      	lsls	r2, r2, #23
 80071da:	0dd2      	lsrs	r2, r2, #23
 80071dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	3302      	adds	r3, #2
 80071e2:	61bb      	str	r3, [r7, #24]
 80071e4:	e007      	b.n	80071f6 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	781a      	ldrb	r2, [r3, #0]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	3301      	adds	r3, #1
 80071f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2256      	movs	r2, #86	; 0x56
 80071fa:	5a9b      	ldrh	r3, [r3, r2]
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	3b01      	subs	r3, #1
 8007200:	b299      	uxth	r1, r3
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2256      	movs	r2, #86	; 0x56
 8007206:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2256      	movs	r2, #86	; 0x56
 800720c:	5a9b      	ldrh	r3, [r3, r2]
 800720e:	b29b      	uxth	r3, r3
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1cc      	bne.n	80071ae <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	9300      	str	r3, [sp, #0]
 800721c:	0013      	movs	r3, r2
 800721e:	2200      	movs	r2, #0
 8007220:	2140      	movs	r1, #64	; 0x40
 8007222:	f000 fcb1 	bl	8007b88 <UART_WaitOnFlagUntilTimeout>
 8007226:	1e03      	subs	r3, r0, #0
 8007228:	d001      	beq.n	800722e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e006      	b.n	800723c <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2288      	movs	r2, #136	; 0x88
 8007232:	2120      	movs	r1, #32
 8007234:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007236:	2300      	movs	r3, #0
 8007238:	e000      	b.n	800723c <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800723a:	2302      	movs	r3, #2
  }
}
 800723c:	0018      	movs	r0, r3
 800723e:	46bd      	mov	sp, r7
 8007240:	b008      	add	sp, #32
 8007242:	bd80      	pop	{r7, pc}

08007244 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b08a      	sub	sp, #40	; 0x28
 8007248:	af02      	add	r7, sp, #8
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	603b      	str	r3, [r7, #0]
 8007250:	1dbb      	adds	r3, r7, #6
 8007252:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	228c      	movs	r2, #140	; 0x8c
 8007258:	589b      	ldr	r3, [r3, r2]
 800725a:	2b20      	cmp	r3, #32
 800725c:	d000      	beq.n	8007260 <HAL_UART_Receive+0x1c>
 800725e:	e0cc      	b.n	80073fa <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d003      	beq.n	800726e <HAL_UART_Receive+0x2a>
 8007266:	1dbb      	adds	r3, r7, #6
 8007268:	881b      	ldrh	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d101      	bne.n	8007272 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e0c4      	b.n	80073fc <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	689a      	ldr	r2, [r3, #8]
 8007276:	2380      	movs	r3, #128	; 0x80
 8007278:	015b      	lsls	r3, r3, #5
 800727a:	429a      	cmp	r2, r3
 800727c:	d109      	bne.n	8007292 <HAL_UART_Receive+0x4e>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d105      	bne.n	8007292 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	2201      	movs	r2, #1
 800728a:	4013      	ands	r3, r2
 800728c:	d001      	beq.n	8007292 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e0b4      	b.n	80073fc <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2290      	movs	r2, #144	; 0x90
 8007296:	2100      	movs	r1, #0
 8007298:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	228c      	movs	r2, #140	; 0x8c
 800729e:	2122      	movs	r1, #34	; 0x22
 80072a0:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2200      	movs	r2, #0
 80072a6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072a8:	f7fc fc76 	bl	8003b98 <HAL_GetTick>
 80072ac:	0003      	movs	r3, r0
 80072ae:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	1dba      	adds	r2, r7, #6
 80072b4:	215c      	movs	r1, #92	; 0x5c
 80072b6:	8812      	ldrh	r2, [r2, #0]
 80072b8:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	1dba      	adds	r2, r7, #6
 80072be:	215e      	movs	r1, #94	; 0x5e
 80072c0:	8812      	ldrh	r2, [r2, #0]
 80072c2:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	689a      	ldr	r2, [r3, #8]
 80072c8:	2380      	movs	r3, #128	; 0x80
 80072ca:	015b      	lsls	r3, r3, #5
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d10d      	bne.n	80072ec <HAL_UART_Receive+0xa8>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d104      	bne.n	80072e2 <HAL_UART_Receive+0x9e>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2260      	movs	r2, #96	; 0x60
 80072dc:	4949      	ldr	r1, [pc, #292]	; (8007404 <HAL_UART_Receive+0x1c0>)
 80072de:	5299      	strh	r1, [r3, r2]
 80072e0:	e02e      	b.n	8007340 <HAL_UART_Receive+0xfc>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2260      	movs	r2, #96	; 0x60
 80072e6:	21ff      	movs	r1, #255	; 0xff
 80072e8:	5299      	strh	r1, [r3, r2]
 80072ea:	e029      	b.n	8007340 <HAL_UART_Receive+0xfc>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10d      	bne.n	8007310 <HAL_UART_Receive+0xcc>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d104      	bne.n	8007306 <HAL_UART_Receive+0xc2>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2260      	movs	r2, #96	; 0x60
 8007300:	21ff      	movs	r1, #255	; 0xff
 8007302:	5299      	strh	r1, [r3, r2]
 8007304:	e01c      	b.n	8007340 <HAL_UART_Receive+0xfc>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2260      	movs	r2, #96	; 0x60
 800730a:	217f      	movs	r1, #127	; 0x7f
 800730c:	5299      	strh	r1, [r3, r2]
 800730e:	e017      	b.n	8007340 <HAL_UART_Receive+0xfc>
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	689a      	ldr	r2, [r3, #8]
 8007314:	2380      	movs	r3, #128	; 0x80
 8007316:	055b      	lsls	r3, r3, #21
 8007318:	429a      	cmp	r2, r3
 800731a:	d10d      	bne.n	8007338 <HAL_UART_Receive+0xf4>
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d104      	bne.n	800732e <HAL_UART_Receive+0xea>
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2260      	movs	r2, #96	; 0x60
 8007328:	217f      	movs	r1, #127	; 0x7f
 800732a:	5299      	strh	r1, [r3, r2]
 800732c:	e008      	b.n	8007340 <HAL_UART_Receive+0xfc>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2260      	movs	r2, #96	; 0x60
 8007332:	213f      	movs	r1, #63	; 0x3f
 8007334:	5299      	strh	r1, [r3, r2]
 8007336:	e003      	b.n	8007340 <HAL_UART_Receive+0xfc>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2260      	movs	r2, #96	; 0x60
 800733c:	2100      	movs	r1, #0
 800733e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8007340:	2312      	movs	r3, #18
 8007342:	18fb      	adds	r3, r7, r3
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	2160      	movs	r1, #96	; 0x60
 8007348:	5a52      	ldrh	r2, [r2, r1]
 800734a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	689a      	ldr	r2, [r3, #8]
 8007350:	2380      	movs	r3, #128	; 0x80
 8007352:	015b      	lsls	r3, r3, #5
 8007354:	429a      	cmp	r2, r3
 8007356:	d108      	bne.n	800736a <HAL_UART_Receive+0x126>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d104      	bne.n	800736a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8007360:	2300      	movs	r3, #0
 8007362:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	61bb      	str	r3, [r7, #24]
 8007368:	e003      	b.n	8007372 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800736e:	2300      	movs	r3, #0
 8007370:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007372:	e036      	b.n	80073e2 <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007374:	697a      	ldr	r2, [r7, #20]
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	9300      	str	r3, [sp, #0]
 800737c:	0013      	movs	r3, r2
 800737e:	2200      	movs	r2, #0
 8007380:	2120      	movs	r1, #32
 8007382:	f000 fc01 	bl	8007b88 <UART_WaitOnFlagUntilTimeout>
 8007386:	1e03      	subs	r3, r0, #0
 8007388:	d001      	beq.n	800738e <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e036      	b.n	80073fc <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10e      	bne.n	80073b2 <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739a:	b29b      	uxth	r3, r3
 800739c:	2212      	movs	r2, #18
 800739e:	18ba      	adds	r2, r7, r2
 80073a0:	8812      	ldrh	r2, [r2, #0]
 80073a2:	4013      	ands	r3, r2
 80073a4:	b29a      	uxth	r2, r3
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	3302      	adds	r3, #2
 80073ae:	61bb      	str	r3, [r7, #24]
 80073b0:	e00e      	b.n	80073d0 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2212      	movs	r2, #18
 80073bc:	18ba      	adds	r2, r7, r2
 80073be:	8812      	ldrh	r2, [r2, #0]
 80073c0:	b2d2      	uxtb	r2, r2
 80073c2:	4013      	ands	r3, r2
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	3301      	adds	r3, #1
 80073ce:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	225e      	movs	r2, #94	; 0x5e
 80073d4:	5a9b      	ldrh	r3, [r3, r2]
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	3b01      	subs	r3, #1
 80073da:	b299      	uxth	r1, r3
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	225e      	movs	r2, #94	; 0x5e
 80073e0:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	225e      	movs	r2, #94	; 0x5e
 80073e6:	5a9b      	ldrh	r3, [r3, r2]
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1c2      	bne.n	8007374 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	228c      	movs	r2, #140	; 0x8c
 80073f2:	2120      	movs	r1, #32
 80073f4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80073f6:	2300      	movs	r3, #0
 80073f8:	e000      	b.n	80073fc <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 80073fa:	2302      	movs	r3, #2
  }
}
 80073fc:	0018      	movs	r0, r3
 80073fe:	46bd      	mov	sp, r7
 8007400:	b008      	add	sp, #32
 8007402:	bd80      	pop	{r7, pc}
 8007404:	000001ff 	.word	0x000001ff

08007408 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007408:	b5b0      	push	{r4, r5, r7, lr}
 800740a:	b090      	sub	sp, #64	; 0x40
 800740c:	af00      	add	r7, sp, #0
 800740e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007410:	231a      	movs	r3, #26
 8007412:	2220      	movs	r2, #32
 8007414:	189b      	adds	r3, r3, r2
 8007416:	19db      	adds	r3, r3, r7
 8007418:	2200      	movs	r2, #0
 800741a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800741c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741e:	689a      	ldr	r2, [r3, #8]
 8007420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	431a      	orrs	r2, r3
 8007426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	431a      	orrs	r2, r3
 800742c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742e:	69db      	ldr	r3, [r3, #28]
 8007430:	4313      	orrs	r3, r2
 8007432:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4aaf      	ldr	r2, [pc, #700]	; (80076f8 <UART_SetConfig+0x2f0>)
 800743c:	4013      	ands	r3, r2
 800743e:	0019      	movs	r1, r3
 8007440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007446:	430b      	orrs	r3, r1
 8007448:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	4aaa      	ldr	r2, [pc, #680]	; (80076fc <UART_SetConfig+0x2f4>)
 8007452:	4013      	ands	r3, r2
 8007454:	0018      	movs	r0, r3
 8007456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007458:	68d9      	ldr	r1, [r3, #12]
 800745a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	0003      	movs	r3, r0
 8007460:	430b      	orrs	r3, r1
 8007462:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800746a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4aa4      	ldr	r2, [pc, #656]	; (8007700 <UART_SetConfig+0x2f8>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d004      	beq.n	800747e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007476:	6a1b      	ldr	r3, [r3, #32]
 8007478:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800747a:	4313      	orrs	r3, r2
 800747c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800747e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	4a9f      	ldr	r2, [pc, #636]	; (8007704 <UART_SetConfig+0x2fc>)
 8007486:	4013      	ands	r3, r2
 8007488:	0019      	movs	r1, r3
 800748a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007490:	430b      	orrs	r3, r1
 8007492:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749a:	220f      	movs	r2, #15
 800749c:	4393      	bics	r3, r2
 800749e:	0018      	movs	r0, r3
 80074a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80074a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	0003      	movs	r3, r0
 80074aa:	430b      	orrs	r3, r1
 80074ac:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a95      	ldr	r2, [pc, #596]	; (8007708 <UART_SetConfig+0x300>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d131      	bne.n	800751c <UART_SetConfig+0x114>
 80074b8:	4b94      	ldr	r3, [pc, #592]	; (800770c <UART_SetConfig+0x304>)
 80074ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074bc:	2203      	movs	r2, #3
 80074be:	4013      	ands	r3, r2
 80074c0:	2b03      	cmp	r3, #3
 80074c2:	d01d      	beq.n	8007500 <UART_SetConfig+0xf8>
 80074c4:	d823      	bhi.n	800750e <UART_SetConfig+0x106>
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d00c      	beq.n	80074e4 <UART_SetConfig+0xdc>
 80074ca:	d820      	bhi.n	800750e <UART_SetConfig+0x106>
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d002      	beq.n	80074d6 <UART_SetConfig+0xce>
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d00e      	beq.n	80074f2 <UART_SetConfig+0xea>
 80074d4:	e01b      	b.n	800750e <UART_SetConfig+0x106>
 80074d6:	231b      	movs	r3, #27
 80074d8:	2220      	movs	r2, #32
 80074da:	189b      	adds	r3, r3, r2
 80074dc:	19db      	adds	r3, r3, r7
 80074de:	2200      	movs	r2, #0
 80074e0:	701a      	strb	r2, [r3, #0]
 80074e2:	e0b4      	b.n	800764e <UART_SetConfig+0x246>
 80074e4:	231b      	movs	r3, #27
 80074e6:	2220      	movs	r2, #32
 80074e8:	189b      	adds	r3, r3, r2
 80074ea:	19db      	adds	r3, r3, r7
 80074ec:	2202      	movs	r2, #2
 80074ee:	701a      	strb	r2, [r3, #0]
 80074f0:	e0ad      	b.n	800764e <UART_SetConfig+0x246>
 80074f2:	231b      	movs	r3, #27
 80074f4:	2220      	movs	r2, #32
 80074f6:	189b      	adds	r3, r3, r2
 80074f8:	19db      	adds	r3, r3, r7
 80074fa:	2204      	movs	r2, #4
 80074fc:	701a      	strb	r2, [r3, #0]
 80074fe:	e0a6      	b.n	800764e <UART_SetConfig+0x246>
 8007500:	231b      	movs	r3, #27
 8007502:	2220      	movs	r2, #32
 8007504:	189b      	adds	r3, r3, r2
 8007506:	19db      	adds	r3, r3, r7
 8007508:	2208      	movs	r2, #8
 800750a:	701a      	strb	r2, [r3, #0]
 800750c:	e09f      	b.n	800764e <UART_SetConfig+0x246>
 800750e:	231b      	movs	r3, #27
 8007510:	2220      	movs	r2, #32
 8007512:	189b      	adds	r3, r3, r2
 8007514:	19db      	adds	r3, r3, r7
 8007516:	2210      	movs	r2, #16
 8007518:	701a      	strb	r2, [r3, #0]
 800751a:	e098      	b.n	800764e <UART_SetConfig+0x246>
 800751c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a7b      	ldr	r2, [pc, #492]	; (8007710 <UART_SetConfig+0x308>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d131      	bne.n	800758a <UART_SetConfig+0x182>
 8007526:	4b79      	ldr	r3, [pc, #484]	; (800770c <UART_SetConfig+0x304>)
 8007528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800752a:	220c      	movs	r2, #12
 800752c:	4013      	ands	r3, r2
 800752e:	2b0c      	cmp	r3, #12
 8007530:	d01d      	beq.n	800756e <UART_SetConfig+0x166>
 8007532:	d823      	bhi.n	800757c <UART_SetConfig+0x174>
 8007534:	2b08      	cmp	r3, #8
 8007536:	d00c      	beq.n	8007552 <UART_SetConfig+0x14a>
 8007538:	d820      	bhi.n	800757c <UART_SetConfig+0x174>
 800753a:	2b00      	cmp	r3, #0
 800753c:	d002      	beq.n	8007544 <UART_SetConfig+0x13c>
 800753e:	2b04      	cmp	r3, #4
 8007540:	d00e      	beq.n	8007560 <UART_SetConfig+0x158>
 8007542:	e01b      	b.n	800757c <UART_SetConfig+0x174>
 8007544:	231b      	movs	r3, #27
 8007546:	2220      	movs	r2, #32
 8007548:	189b      	adds	r3, r3, r2
 800754a:	19db      	adds	r3, r3, r7
 800754c:	2200      	movs	r2, #0
 800754e:	701a      	strb	r2, [r3, #0]
 8007550:	e07d      	b.n	800764e <UART_SetConfig+0x246>
 8007552:	231b      	movs	r3, #27
 8007554:	2220      	movs	r2, #32
 8007556:	189b      	adds	r3, r3, r2
 8007558:	19db      	adds	r3, r3, r7
 800755a:	2202      	movs	r2, #2
 800755c:	701a      	strb	r2, [r3, #0]
 800755e:	e076      	b.n	800764e <UART_SetConfig+0x246>
 8007560:	231b      	movs	r3, #27
 8007562:	2220      	movs	r2, #32
 8007564:	189b      	adds	r3, r3, r2
 8007566:	19db      	adds	r3, r3, r7
 8007568:	2204      	movs	r2, #4
 800756a:	701a      	strb	r2, [r3, #0]
 800756c:	e06f      	b.n	800764e <UART_SetConfig+0x246>
 800756e:	231b      	movs	r3, #27
 8007570:	2220      	movs	r2, #32
 8007572:	189b      	adds	r3, r3, r2
 8007574:	19db      	adds	r3, r3, r7
 8007576:	2208      	movs	r2, #8
 8007578:	701a      	strb	r2, [r3, #0]
 800757a:	e068      	b.n	800764e <UART_SetConfig+0x246>
 800757c:	231b      	movs	r3, #27
 800757e:	2220      	movs	r2, #32
 8007580:	189b      	adds	r3, r3, r2
 8007582:	19db      	adds	r3, r3, r7
 8007584:	2210      	movs	r2, #16
 8007586:	701a      	strb	r2, [r3, #0]
 8007588:	e061      	b.n	800764e <UART_SetConfig+0x246>
 800758a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a61      	ldr	r2, [pc, #388]	; (8007714 <UART_SetConfig+0x30c>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d106      	bne.n	80075a2 <UART_SetConfig+0x19a>
 8007594:	231b      	movs	r3, #27
 8007596:	2220      	movs	r2, #32
 8007598:	189b      	adds	r3, r3, r2
 800759a:	19db      	adds	r3, r3, r7
 800759c:	2200      	movs	r2, #0
 800759e:	701a      	strb	r2, [r3, #0]
 80075a0:	e055      	b.n	800764e <UART_SetConfig+0x246>
 80075a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a5c      	ldr	r2, [pc, #368]	; (8007718 <UART_SetConfig+0x310>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d106      	bne.n	80075ba <UART_SetConfig+0x1b2>
 80075ac:	231b      	movs	r3, #27
 80075ae:	2220      	movs	r2, #32
 80075b0:	189b      	adds	r3, r3, r2
 80075b2:	19db      	adds	r3, r3, r7
 80075b4:	2200      	movs	r2, #0
 80075b6:	701a      	strb	r2, [r3, #0]
 80075b8:	e049      	b.n	800764e <UART_SetConfig+0x246>
 80075ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a50      	ldr	r2, [pc, #320]	; (8007700 <UART_SetConfig+0x2f8>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d13e      	bne.n	8007642 <UART_SetConfig+0x23a>
 80075c4:	4b51      	ldr	r3, [pc, #324]	; (800770c <UART_SetConfig+0x304>)
 80075c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075c8:	23c0      	movs	r3, #192	; 0xc0
 80075ca:	011b      	lsls	r3, r3, #4
 80075cc:	4013      	ands	r3, r2
 80075ce:	22c0      	movs	r2, #192	; 0xc0
 80075d0:	0112      	lsls	r2, r2, #4
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d027      	beq.n	8007626 <UART_SetConfig+0x21e>
 80075d6:	22c0      	movs	r2, #192	; 0xc0
 80075d8:	0112      	lsls	r2, r2, #4
 80075da:	4293      	cmp	r3, r2
 80075dc:	d82a      	bhi.n	8007634 <UART_SetConfig+0x22c>
 80075de:	2280      	movs	r2, #128	; 0x80
 80075e0:	0112      	lsls	r2, r2, #4
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d011      	beq.n	800760a <UART_SetConfig+0x202>
 80075e6:	2280      	movs	r2, #128	; 0x80
 80075e8:	0112      	lsls	r2, r2, #4
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d822      	bhi.n	8007634 <UART_SetConfig+0x22c>
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d004      	beq.n	80075fc <UART_SetConfig+0x1f4>
 80075f2:	2280      	movs	r2, #128	; 0x80
 80075f4:	00d2      	lsls	r2, r2, #3
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d00e      	beq.n	8007618 <UART_SetConfig+0x210>
 80075fa:	e01b      	b.n	8007634 <UART_SetConfig+0x22c>
 80075fc:	231b      	movs	r3, #27
 80075fe:	2220      	movs	r2, #32
 8007600:	189b      	adds	r3, r3, r2
 8007602:	19db      	adds	r3, r3, r7
 8007604:	2200      	movs	r2, #0
 8007606:	701a      	strb	r2, [r3, #0]
 8007608:	e021      	b.n	800764e <UART_SetConfig+0x246>
 800760a:	231b      	movs	r3, #27
 800760c:	2220      	movs	r2, #32
 800760e:	189b      	adds	r3, r3, r2
 8007610:	19db      	adds	r3, r3, r7
 8007612:	2202      	movs	r2, #2
 8007614:	701a      	strb	r2, [r3, #0]
 8007616:	e01a      	b.n	800764e <UART_SetConfig+0x246>
 8007618:	231b      	movs	r3, #27
 800761a:	2220      	movs	r2, #32
 800761c:	189b      	adds	r3, r3, r2
 800761e:	19db      	adds	r3, r3, r7
 8007620:	2204      	movs	r2, #4
 8007622:	701a      	strb	r2, [r3, #0]
 8007624:	e013      	b.n	800764e <UART_SetConfig+0x246>
 8007626:	231b      	movs	r3, #27
 8007628:	2220      	movs	r2, #32
 800762a:	189b      	adds	r3, r3, r2
 800762c:	19db      	adds	r3, r3, r7
 800762e:	2208      	movs	r2, #8
 8007630:	701a      	strb	r2, [r3, #0]
 8007632:	e00c      	b.n	800764e <UART_SetConfig+0x246>
 8007634:	231b      	movs	r3, #27
 8007636:	2220      	movs	r2, #32
 8007638:	189b      	adds	r3, r3, r2
 800763a:	19db      	adds	r3, r3, r7
 800763c:	2210      	movs	r2, #16
 800763e:	701a      	strb	r2, [r3, #0]
 8007640:	e005      	b.n	800764e <UART_SetConfig+0x246>
 8007642:	231b      	movs	r3, #27
 8007644:	2220      	movs	r2, #32
 8007646:	189b      	adds	r3, r3, r2
 8007648:	19db      	adds	r3, r3, r7
 800764a:	2210      	movs	r2, #16
 800764c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800764e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a2b      	ldr	r2, [pc, #172]	; (8007700 <UART_SetConfig+0x2f8>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d000      	beq.n	800765a <UART_SetConfig+0x252>
 8007658:	e0a9      	b.n	80077ae <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800765a:	231b      	movs	r3, #27
 800765c:	2220      	movs	r2, #32
 800765e:	189b      	adds	r3, r3, r2
 8007660:	19db      	adds	r3, r3, r7
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	2b08      	cmp	r3, #8
 8007666:	d015      	beq.n	8007694 <UART_SetConfig+0x28c>
 8007668:	dc18      	bgt.n	800769c <UART_SetConfig+0x294>
 800766a:	2b04      	cmp	r3, #4
 800766c:	d00d      	beq.n	800768a <UART_SetConfig+0x282>
 800766e:	dc15      	bgt.n	800769c <UART_SetConfig+0x294>
 8007670:	2b00      	cmp	r3, #0
 8007672:	d002      	beq.n	800767a <UART_SetConfig+0x272>
 8007674:	2b02      	cmp	r3, #2
 8007676:	d005      	beq.n	8007684 <UART_SetConfig+0x27c>
 8007678:	e010      	b.n	800769c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800767a:	f7fd fb9f 	bl	8004dbc <HAL_RCC_GetPCLK1Freq>
 800767e:	0003      	movs	r3, r0
 8007680:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007682:	e014      	b.n	80076ae <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007684:	4b25      	ldr	r3, [pc, #148]	; (800771c <UART_SetConfig+0x314>)
 8007686:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007688:	e011      	b.n	80076ae <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800768a:	f7fd fb0b 	bl	8004ca4 <HAL_RCC_GetSysClockFreq>
 800768e:	0003      	movs	r3, r0
 8007690:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007692:	e00c      	b.n	80076ae <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007694:	2380      	movs	r3, #128	; 0x80
 8007696:	021b      	lsls	r3, r3, #8
 8007698:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800769a:	e008      	b.n	80076ae <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800769c:	2300      	movs	r3, #0
 800769e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80076a0:	231a      	movs	r3, #26
 80076a2:	2220      	movs	r2, #32
 80076a4:	189b      	adds	r3, r3, r2
 80076a6:	19db      	adds	r3, r3, r7
 80076a8:	2201      	movs	r2, #1
 80076aa:	701a      	strb	r2, [r3, #0]
        break;
 80076ac:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80076ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d100      	bne.n	80076b6 <UART_SetConfig+0x2ae>
 80076b4:	e14b      	b.n	800794e <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80076b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076ba:	4b19      	ldr	r3, [pc, #100]	; (8007720 <UART_SetConfig+0x318>)
 80076bc:	0052      	lsls	r2, r2, #1
 80076be:	5ad3      	ldrh	r3, [r2, r3]
 80076c0:	0019      	movs	r1, r3
 80076c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80076c4:	f7f8 fd3a 	bl	800013c <__udivsi3>
 80076c8:	0003      	movs	r3, r0
 80076ca:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ce:	685a      	ldr	r2, [r3, #4]
 80076d0:	0013      	movs	r3, r2
 80076d2:	005b      	lsls	r3, r3, #1
 80076d4:	189b      	adds	r3, r3, r2
 80076d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076d8:	429a      	cmp	r2, r3
 80076da:	d305      	bcc.n	80076e8 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80076dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d91d      	bls.n	8007724 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80076e8:	231a      	movs	r3, #26
 80076ea:	2220      	movs	r2, #32
 80076ec:	189b      	adds	r3, r3, r2
 80076ee:	19db      	adds	r3, r3, r7
 80076f0:	2201      	movs	r2, #1
 80076f2:	701a      	strb	r2, [r3, #0]
 80076f4:	e12b      	b.n	800794e <UART_SetConfig+0x546>
 80076f6:	46c0      	nop			; (mov r8, r8)
 80076f8:	cfff69f3 	.word	0xcfff69f3
 80076fc:	ffffcfff 	.word	0xffffcfff
 8007700:	40008000 	.word	0x40008000
 8007704:	11fff4ff 	.word	0x11fff4ff
 8007708:	40013800 	.word	0x40013800
 800770c:	40021000 	.word	0x40021000
 8007710:	40004400 	.word	0x40004400
 8007714:	40004800 	.word	0x40004800
 8007718:	40004c00 	.word	0x40004c00
 800771c:	00f42400 	.word	0x00f42400
 8007720:	08014ebc 	.word	0x08014ebc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007726:	61bb      	str	r3, [r7, #24]
 8007728:	2300      	movs	r3, #0
 800772a:	61fb      	str	r3, [r7, #28]
 800772c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007730:	4b92      	ldr	r3, [pc, #584]	; (800797c <UART_SetConfig+0x574>)
 8007732:	0052      	lsls	r2, r2, #1
 8007734:	5ad3      	ldrh	r3, [r2, r3]
 8007736:	613b      	str	r3, [r7, #16]
 8007738:	2300      	movs	r3, #0
 800773a:	617b      	str	r3, [r7, #20]
 800773c:	693a      	ldr	r2, [r7, #16]
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	69b8      	ldr	r0, [r7, #24]
 8007742:	69f9      	ldr	r1, [r7, #28]
 8007744:	f7f8 feae 	bl	80004a4 <__aeabi_uldivmod>
 8007748:	0002      	movs	r2, r0
 800774a:	000b      	movs	r3, r1
 800774c:	0e11      	lsrs	r1, r2, #24
 800774e:	021d      	lsls	r5, r3, #8
 8007750:	430d      	orrs	r5, r1
 8007752:	0214      	lsls	r4, r2, #8
 8007754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	085b      	lsrs	r3, r3, #1
 800775a:	60bb      	str	r3, [r7, #8]
 800775c:	2300      	movs	r3, #0
 800775e:	60fb      	str	r3, [r7, #12]
 8007760:	68b8      	ldr	r0, [r7, #8]
 8007762:	68f9      	ldr	r1, [r7, #12]
 8007764:	1900      	adds	r0, r0, r4
 8007766:	4169      	adcs	r1, r5
 8007768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	603b      	str	r3, [r7, #0]
 800776e:	2300      	movs	r3, #0
 8007770:	607b      	str	r3, [r7, #4]
 8007772:	683a      	ldr	r2, [r7, #0]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f7f8 fe95 	bl	80004a4 <__aeabi_uldivmod>
 800777a:	0002      	movs	r2, r0
 800777c:	000b      	movs	r3, r1
 800777e:	0013      	movs	r3, r2
 8007780:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007782:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007784:	23c0      	movs	r3, #192	; 0xc0
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	429a      	cmp	r2, r3
 800778a:	d309      	bcc.n	80077a0 <UART_SetConfig+0x398>
 800778c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800778e:	2380      	movs	r3, #128	; 0x80
 8007790:	035b      	lsls	r3, r3, #13
 8007792:	429a      	cmp	r2, r3
 8007794:	d204      	bcs.n	80077a0 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8007796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800779c:	60da      	str	r2, [r3, #12]
 800779e:	e0d6      	b.n	800794e <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80077a0:	231a      	movs	r3, #26
 80077a2:	2220      	movs	r2, #32
 80077a4:	189b      	adds	r3, r3, r2
 80077a6:	19db      	adds	r3, r3, r7
 80077a8:	2201      	movs	r2, #1
 80077aa:	701a      	strb	r2, [r3, #0]
 80077ac:	e0cf      	b.n	800794e <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b0:	69da      	ldr	r2, [r3, #28]
 80077b2:	2380      	movs	r3, #128	; 0x80
 80077b4:	021b      	lsls	r3, r3, #8
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d000      	beq.n	80077bc <UART_SetConfig+0x3b4>
 80077ba:	e070      	b.n	800789e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80077bc:	231b      	movs	r3, #27
 80077be:	2220      	movs	r2, #32
 80077c0:	189b      	adds	r3, r3, r2
 80077c2:	19db      	adds	r3, r3, r7
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	2b08      	cmp	r3, #8
 80077c8:	d015      	beq.n	80077f6 <UART_SetConfig+0x3ee>
 80077ca:	dc18      	bgt.n	80077fe <UART_SetConfig+0x3f6>
 80077cc:	2b04      	cmp	r3, #4
 80077ce:	d00d      	beq.n	80077ec <UART_SetConfig+0x3e4>
 80077d0:	dc15      	bgt.n	80077fe <UART_SetConfig+0x3f6>
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d002      	beq.n	80077dc <UART_SetConfig+0x3d4>
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d005      	beq.n	80077e6 <UART_SetConfig+0x3de>
 80077da:	e010      	b.n	80077fe <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077dc:	f7fd faee 	bl	8004dbc <HAL_RCC_GetPCLK1Freq>
 80077e0:	0003      	movs	r3, r0
 80077e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077e4:	e014      	b.n	8007810 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077e6:	4b66      	ldr	r3, [pc, #408]	; (8007980 <UART_SetConfig+0x578>)
 80077e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077ea:	e011      	b.n	8007810 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077ec:	f7fd fa5a 	bl	8004ca4 <HAL_RCC_GetSysClockFreq>
 80077f0:	0003      	movs	r3, r0
 80077f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077f4:	e00c      	b.n	8007810 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077f6:	2380      	movs	r3, #128	; 0x80
 80077f8:	021b      	lsls	r3, r3, #8
 80077fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077fc:	e008      	b.n	8007810 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80077fe:	2300      	movs	r3, #0
 8007800:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007802:	231a      	movs	r3, #26
 8007804:	2220      	movs	r2, #32
 8007806:	189b      	adds	r3, r3, r2
 8007808:	19db      	adds	r3, r3, r7
 800780a:	2201      	movs	r2, #1
 800780c:	701a      	strb	r2, [r3, #0]
        break;
 800780e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007812:	2b00      	cmp	r3, #0
 8007814:	d100      	bne.n	8007818 <UART_SetConfig+0x410>
 8007816:	e09a      	b.n	800794e <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800781c:	4b57      	ldr	r3, [pc, #348]	; (800797c <UART_SetConfig+0x574>)
 800781e:	0052      	lsls	r2, r2, #1
 8007820:	5ad3      	ldrh	r3, [r2, r3]
 8007822:	0019      	movs	r1, r3
 8007824:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007826:	f7f8 fc89 	bl	800013c <__udivsi3>
 800782a:	0003      	movs	r3, r0
 800782c:	005a      	lsls	r2, r3, #1
 800782e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	085b      	lsrs	r3, r3, #1
 8007834:	18d2      	adds	r2, r2, r3
 8007836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	0019      	movs	r1, r3
 800783c:	0010      	movs	r0, r2
 800783e:	f7f8 fc7d 	bl	800013c <__udivsi3>
 8007842:	0003      	movs	r3, r0
 8007844:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007848:	2b0f      	cmp	r3, #15
 800784a:	d921      	bls.n	8007890 <UART_SetConfig+0x488>
 800784c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800784e:	2380      	movs	r3, #128	; 0x80
 8007850:	025b      	lsls	r3, r3, #9
 8007852:	429a      	cmp	r2, r3
 8007854:	d21c      	bcs.n	8007890 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007858:	b29a      	uxth	r2, r3
 800785a:	200e      	movs	r0, #14
 800785c:	2420      	movs	r4, #32
 800785e:	1903      	adds	r3, r0, r4
 8007860:	19db      	adds	r3, r3, r7
 8007862:	210f      	movs	r1, #15
 8007864:	438a      	bics	r2, r1
 8007866:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786a:	085b      	lsrs	r3, r3, #1
 800786c:	b29b      	uxth	r3, r3
 800786e:	2207      	movs	r2, #7
 8007870:	4013      	ands	r3, r2
 8007872:	b299      	uxth	r1, r3
 8007874:	1903      	adds	r3, r0, r4
 8007876:	19db      	adds	r3, r3, r7
 8007878:	1902      	adds	r2, r0, r4
 800787a:	19d2      	adds	r2, r2, r7
 800787c:	8812      	ldrh	r2, [r2, #0]
 800787e:	430a      	orrs	r2, r1
 8007880:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	1902      	adds	r2, r0, r4
 8007888:	19d2      	adds	r2, r2, r7
 800788a:	8812      	ldrh	r2, [r2, #0]
 800788c:	60da      	str	r2, [r3, #12]
 800788e:	e05e      	b.n	800794e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8007890:	231a      	movs	r3, #26
 8007892:	2220      	movs	r2, #32
 8007894:	189b      	adds	r3, r3, r2
 8007896:	19db      	adds	r3, r3, r7
 8007898:	2201      	movs	r2, #1
 800789a:	701a      	strb	r2, [r3, #0]
 800789c:	e057      	b.n	800794e <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800789e:	231b      	movs	r3, #27
 80078a0:	2220      	movs	r2, #32
 80078a2:	189b      	adds	r3, r3, r2
 80078a4:	19db      	adds	r3, r3, r7
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	2b08      	cmp	r3, #8
 80078aa:	d015      	beq.n	80078d8 <UART_SetConfig+0x4d0>
 80078ac:	dc18      	bgt.n	80078e0 <UART_SetConfig+0x4d8>
 80078ae:	2b04      	cmp	r3, #4
 80078b0:	d00d      	beq.n	80078ce <UART_SetConfig+0x4c6>
 80078b2:	dc15      	bgt.n	80078e0 <UART_SetConfig+0x4d8>
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d002      	beq.n	80078be <UART_SetConfig+0x4b6>
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d005      	beq.n	80078c8 <UART_SetConfig+0x4c0>
 80078bc:	e010      	b.n	80078e0 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078be:	f7fd fa7d 	bl	8004dbc <HAL_RCC_GetPCLK1Freq>
 80078c2:	0003      	movs	r3, r0
 80078c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078c6:	e014      	b.n	80078f2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078c8:	4b2d      	ldr	r3, [pc, #180]	; (8007980 <UART_SetConfig+0x578>)
 80078ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078cc:	e011      	b.n	80078f2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078ce:	f7fd f9e9 	bl	8004ca4 <HAL_RCC_GetSysClockFreq>
 80078d2:	0003      	movs	r3, r0
 80078d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078d6:	e00c      	b.n	80078f2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078d8:	2380      	movs	r3, #128	; 0x80
 80078da:	021b      	lsls	r3, r3, #8
 80078dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078de:	e008      	b.n	80078f2 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80078e0:	2300      	movs	r3, #0
 80078e2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80078e4:	231a      	movs	r3, #26
 80078e6:	2220      	movs	r2, #32
 80078e8:	189b      	adds	r3, r3, r2
 80078ea:	19db      	adds	r3, r3, r7
 80078ec:	2201      	movs	r2, #1
 80078ee:	701a      	strb	r2, [r3, #0]
        break;
 80078f0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80078f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d02a      	beq.n	800794e <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078fc:	4b1f      	ldr	r3, [pc, #124]	; (800797c <UART_SetConfig+0x574>)
 80078fe:	0052      	lsls	r2, r2, #1
 8007900:	5ad3      	ldrh	r3, [r2, r3]
 8007902:	0019      	movs	r1, r3
 8007904:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007906:	f7f8 fc19 	bl	800013c <__udivsi3>
 800790a:	0003      	movs	r3, r0
 800790c:	001a      	movs	r2, r3
 800790e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	085b      	lsrs	r3, r3, #1
 8007914:	18d2      	adds	r2, r2, r3
 8007916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	0019      	movs	r1, r3
 800791c:	0010      	movs	r0, r2
 800791e:	f7f8 fc0d 	bl	800013c <__udivsi3>
 8007922:	0003      	movs	r3, r0
 8007924:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007928:	2b0f      	cmp	r3, #15
 800792a:	d90a      	bls.n	8007942 <UART_SetConfig+0x53a>
 800792c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800792e:	2380      	movs	r3, #128	; 0x80
 8007930:	025b      	lsls	r3, r3, #9
 8007932:	429a      	cmp	r2, r3
 8007934:	d205      	bcs.n	8007942 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007938:	b29a      	uxth	r2, r3
 800793a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	60da      	str	r2, [r3, #12]
 8007940:	e005      	b.n	800794e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8007942:	231a      	movs	r3, #26
 8007944:	2220      	movs	r2, #32
 8007946:	189b      	adds	r3, r3, r2
 8007948:	19db      	adds	r3, r3, r7
 800794a:	2201      	movs	r2, #1
 800794c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800794e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007950:	226a      	movs	r2, #106	; 0x6a
 8007952:	2101      	movs	r1, #1
 8007954:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007958:	2268      	movs	r2, #104	; 0x68
 800795a:	2101      	movs	r1, #1
 800795c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800795e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007960:	2200      	movs	r2, #0
 8007962:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007966:	2200      	movs	r2, #0
 8007968:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800796a:	231a      	movs	r3, #26
 800796c:	2220      	movs	r2, #32
 800796e:	189b      	adds	r3, r3, r2
 8007970:	19db      	adds	r3, r3, r7
 8007972:	781b      	ldrb	r3, [r3, #0]
}
 8007974:	0018      	movs	r0, r3
 8007976:	46bd      	mov	sp, r7
 8007978:	b010      	add	sp, #64	; 0x40
 800797a:	bdb0      	pop	{r4, r5, r7, pc}
 800797c:	08014ebc 	.word	0x08014ebc
 8007980:	00f42400 	.word	0x00f42400

08007984 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007990:	2201      	movs	r2, #1
 8007992:	4013      	ands	r3, r2
 8007994:	d00b      	beq.n	80079ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	4a4a      	ldr	r2, [pc, #296]	; (8007ac8 <UART_AdvFeatureConfig+0x144>)
 800799e:	4013      	ands	r3, r2
 80079a0:	0019      	movs	r1, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	430a      	orrs	r2, r1
 80079ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b2:	2202      	movs	r2, #2
 80079b4:	4013      	ands	r3, r2
 80079b6:	d00b      	beq.n	80079d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	4a43      	ldr	r2, [pc, #268]	; (8007acc <UART_AdvFeatureConfig+0x148>)
 80079c0:	4013      	ands	r3, r2
 80079c2:	0019      	movs	r1, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	430a      	orrs	r2, r1
 80079ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d4:	2204      	movs	r2, #4
 80079d6:	4013      	ands	r3, r2
 80079d8:	d00b      	beq.n	80079f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	4a3b      	ldr	r2, [pc, #236]	; (8007ad0 <UART_AdvFeatureConfig+0x14c>)
 80079e2:	4013      	ands	r3, r2
 80079e4:	0019      	movs	r1, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	430a      	orrs	r2, r1
 80079f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f6:	2208      	movs	r2, #8
 80079f8:	4013      	ands	r3, r2
 80079fa:	d00b      	beq.n	8007a14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	4a34      	ldr	r2, [pc, #208]	; (8007ad4 <UART_AdvFeatureConfig+0x150>)
 8007a04:	4013      	ands	r3, r2
 8007a06:	0019      	movs	r1, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	430a      	orrs	r2, r1
 8007a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a18:	2210      	movs	r2, #16
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	d00b      	beq.n	8007a36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	4a2c      	ldr	r2, [pc, #176]	; (8007ad8 <UART_AdvFeatureConfig+0x154>)
 8007a26:	4013      	ands	r3, r2
 8007a28:	0019      	movs	r1, r3
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	430a      	orrs	r2, r1
 8007a34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3a:	2220      	movs	r2, #32
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	d00b      	beq.n	8007a58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	4a25      	ldr	r2, [pc, #148]	; (8007adc <UART_AdvFeatureConfig+0x158>)
 8007a48:	4013      	ands	r3, r2
 8007a4a:	0019      	movs	r1, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	430a      	orrs	r2, r1
 8007a56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a5c:	2240      	movs	r2, #64	; 0x40
 8007a5e:	4013      	ands	r3, r2
 8007a60:	d01d      	beq.n	8007a9e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	4a1d      	ldr	r2, [pc, #116]	; (8007ae0 <UART_AdvFeatureConfig+0x15c>)
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	0019      	movs	r1, r3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	430a      	orrs	r2, r1
 8007a78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a7e:	2380      	movs	r3, #128	; 0x80
 8007a80:	035b      	lsls	r3, r3, #13
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d10b      	bne.n	8007a9e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	4a15      	ldr	r2, [pc, #84]	; (8007ae4 <UART_AdvFeatureConfig+0x160>)
 8007a8e:	4013      	ands	r3, r2
 8007a90:	0019      	movs	r1, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	430a      	orrs	r2, r1
 8007a9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa2:	2280      	movs	r2, #128	; 0x80
 8007aa4:	4013      	ands	r3, r2
 8007aa6:	d00b      	beq.n	8007ac0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	4a0e      	ldr	r2, [pc, #56]	; (8007ae8 <UART_AdvFeatureConfig+0x164>)
 8007ab0:	4013      	ands	r3, r2
 8007ab2:	0019      	movs	r1, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	430a      	orrs	r2, r1
 8007abe:	605a      	str	r2, [r3, #4]
  }
}
 8007ac0:	46c0      	nop			; (mov r8, r8)
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	b002      	add	sp, #8
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	fffdffff 	.word	0xfffdffff
 8007acc:	fffeffff 	.word	0xfffeffff
 8007ad0:	fffbffff 	.word	0xfffbffff
 8007ad4:	ffff7fff 	.word	0xffff7fff
 8007ad8:	ffffefff 	.word	0xffffefff
 8007adc:	ffffdfff 	.word	0xffffdfff
 8007ae0:	ffefffff 	.word	0xffefffff
 8007ae4:	ff9fffff 	.word	0xff9fffff
 8007ae8:	fff7ffff 	.word	0xfff7ffff

08007aec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b086      	sub	sp, #24
 8007af0:	af02      	add	r7, sp, #8
 8007af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2290      	movs	r2, #144	; 0x90
 8007af8:	2100      	movs	r1, #0
 8007afa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007afc:	f7fc f84c 	bl	8003b98 <HAL_GetTick>
 8007b00:	0003      	movs	r3, r0
 8007b02:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2208      	movs	r2, #8
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	2b08      	cmp	r3, #8
 8007b10:	d10c      	bne.n	8007b2c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2280      	movs	r2, #128	; 0x80
 8007b16:	0391      	lsls	r1, r2, #14
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	4a1a      	ldr	r2, [pc, #104]	; (8007b84 <UART_CheckIdleState+0x98>)
 8007b1c:	9200      	str	r2, [sp, #0]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f000 f832 	bl	8007b88 <UART_WaitOnFlagUntilTimeout>
 8007b24:	1e03      	subs	r3, r0, #0
 8007b26:	d001      	beq.n	8007b2c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	e026      	b.n	8007b7a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2204      	movs	r2, #4
 8007b34:	4013      	ands	r3, r2
 8007b36:	2b04      	cmp	r3, #4
 8007b38:	d10c      	bne.n	8007b54 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2280      	movs	r2, #128	; 0x80
 8007b3e:	03d1      	lsls	r1, r2, #15
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	4a10      	ldr	r2, [pc, #64]	; (8007b84 <UART_CheckIdleState+0x98>)
 8007b44:	9200      	str	r2, [sp, #0]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f000 f81e 	bl	8007b88 <UART_WaitOnFlagUntilTimeout>
 8007b4c:	1e03      	subs	r3, r0, #0
 8007b4e:	d001      	beq.n	8007b54 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b50:	2303      	movs	r3, #3
 8007b52:	e012      	b.n	8007b7a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2288      	movs	r2, #136	; 0x88
 8007b58:	2120      	movs	r1, #32
 8007b5a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	228c      	movs	r2, #140	; 0x8c
 8007b60:	2120      	movs	r1, #32
 8007b62:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2284      	movs	r2, #132	; 0x84
 8007b74:	2100      	movs	r1, #0
 8007b76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	0018      	movs	r0, r3
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	b004      	add	sp, #16
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	46c0      	nop			; (mov r8, r8)
 8007b84:	01ffffff 	.word	0x01ffffff

08007b88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b094      	sub	sp, #80	; 0x50
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	603b      	str	r3, [r7, #0]
 8007b94:	1dfb      	adds	r3, r7, #7
 8007b96:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b98:	e0a7      	b.n	8007cea <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	d100      	bne.n	8007ba2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8007ba0:	e0a3      	b.n	8007cea <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ba2:	f7fb fff9 	bl	8003b98 <HAL_GetTick>
 8007ba6:	0002      	movs	r2, r0
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	1ad3      	subs	r3, r2, r3
 8007bac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d302      	bcc.n	8007bb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007bb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d13f      	bne.n	8007c38 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bb8:	f3ef 8310 	mrs	r3, PRIMASK
 8007bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007bc0:	647b      	str	r3, [r7, #68]	; 0x44
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc8:	f383 8810 	msr	PRIMASK, r3
}
 8007bcc:	46c0      	nop			; (mov r8, r8)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	494e      	ldr	r1, [pc, #312]	; (8007d14 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007bda:	400a      	ands	r2, r1
 8007bdc:	601a      	str	r2, [r3, #0]
 8007bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007be0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be4:	f383 8810 	msr	PRIMASK, r3
}
 8007be8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bea:	f3ef 8310 	mrs	r3, PRIMASK
 8007bee:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bf2:	643b      	str	r3, [r7, #64]	; 0x40
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bfa:	f383 8810 	msr	PRIMASK, r3
}
 8007bfe:	46c0      	nop			; (mov r8, r8)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	689a      	ldr	r2, [r3, #8]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2101      	movs	r1, #1
 8007c0c:	438a      	bics	r2, r1
 8007c0e:	609a      	str	r2, [r3, #8]
 8007c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c16:	f383 8810 	msr	PRIMASK, r3
}
 8007c1a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2288      	movs	r2, #136	; 0x88
 8007c20:	2120      	movs	r1, #32
 8007c22:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	228c      	movs	r2, #140	; 0x8c
 8007c28:	2120      	movs	r1, #32
 8007c2a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2284      	movs	r2, #132	; 0x84
 8007c30:	2100      	movs	r1, #0
 8007c32:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007c34:	2303      	movs	r3, #3
 8007c36:	e069      	b.n	8007d0c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2204      	movs	r2, #4
 8007c40:	4013      	ands	r3, r2
 8007c42:	d052      	beq.n	8007cea <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	69da      	ldr	r2, [r3, #28]
 8007c4a:	2380      	movs	r3, #128	; 0x80
 8007c4c:	011b      	lsls	r3, r3, #4
 8007c4e:	401a      	ands	r2, r3
 8007c50:	2380      	movs	r3, #128	; 0x80
 8007c52:	011b      	lsls	r3, r3, #4
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d148      	bne.n	8007cea <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2280      	movs	r2, #128	; 0x80
 8007c5e:	0112      	lsls	r2, r2, #4
 8007c60:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c62:	f3ef 8310 	mrs	r3, PRIMASK
 8007c66:	613b      	str	r3, [r7, #16]
  return(result);
 8007c68:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	f383 8810 	msr	PRIMASK, r3
}
 8007c76:	46c0      	nop			; (mov r8, r8)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4924      	ldr	r1, [pc, #144]	; (8007d14 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007c84:	400a      	ands	r2, r1
 8007c86:	601a      	str	r2, [r3, #0]
 8007c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c8a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c8c:	69bb      	ldr	r3, [r7, #24]
 8007c8e:	f383 8810 	msr	PRIMASK, r3
}
 8007c92:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c94:	f3ef 8310 	mrs	r3, PRIMASK
 8007c98:	61fb      	str	r3, [r7, #28]
  return(result);
 8007c9a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ca2:	6a3b      	ldr	r3, [r7, #32]
 8007ca4:	f383 8810 	msr	PRIMASK, r3
}
 8007ca8:	46c0      	nop			; (mov r8, r8)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	689a      	ldr	r2, [r3, #8]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2101      	movs	r1, #1
 8007cb6:	438a      	bics	r2, r1
 8007cb8:	609a      	str	r2, [r3, #8]
 8007cba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cbc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc0:	f383 8810 	msr	PRIMASK, r3
}
 8007cc4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2288      	movs	r2, #136	; 0x88
 8007cca:	2120      	movs	r1, #32
 8007ccc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	228c      	movs	r2, #140	; 0x8c
 8007cd2:	2120      	movs	r1, #32
 8007cd4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2290      	movs	r2, #144	; 0x90
 8007cda:	2120      	movs	r1, #32
 8007cdc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2284      	movs	r2, #132	; 0x84
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007ce6:	2303      	movs	r3, #3
 8007ce8:	e010      	b.n	8007d0c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	69db      	ldr	r3, [r3, #28]
 8007cf0:	68ba      	ldr	r2, [r7, #8]
 8007cf2:	4013      	ands	r3, r2
 8007cf4:	68ba      	ldr	r2, [r7, #8]
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	425a      	negs	r2, r3
 8007cfa:	4153      	adcs	r3, r2
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	001a      	movs	r2, r3
 8007d00:	1dfb      	adds	r3, r7, #7
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d100      	bne.n	8007d0a <UART_WaitOnFlagUntilTimeout+0x182>
 8007d08:	e747      	b.n	8007b9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	0018      	movs	r0, r3
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	b014      	add	sp, #80	; 0x50
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	fffffe5f 	.word	0xfffffe5f

08007d18 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2284      	movs	r2, #132	; 0x84
 8007d24:	5c9b      	ldrb	r3, [r3, r2]
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d101      	bne.n	8007d2e <HAL_UARTEx_DisableFifoMode+0x16>
 8007d2a:	2302      	movs	r3, #2
 8007d2c:	e027      	b.n	8007d7e <HAL_UARTEx_DisableFifoMode+0x66>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2284      	movs	r2, #132	; 0x84
 8007d32:	2101      	movs	r1, #1
 8007d34:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2288      	movs	r2, #136	; 0x88
 8007d3a:	2124      	movs	r1, #36	; 0x24
 8007d3c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2101      	movs	r1, #1
 8007d52:	438a      	bics	r2, r1
 8007d54:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	4a0b      	ldr	r2, [pc, #44]	; (8007d88 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2288      	movs	r2, #136	; 0x88
 8007d70:	2120      	movs	r1, #32
 8007d72:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2284      	movs	r2, #132	; 0x84
 8007d78:	2100      	movs	r1, #0
 8007d7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	0018      	movs	r0, r3
 8007d80:	46bd      	mov	sp, r7
 8007d82:	b004      	add	sp, #16
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	46c0      	nop			; (mov r8, r8)
 8007d88:	dfffffff 	.word	0xdfffffff

08007d8c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2284      	movs	r2, #132	; 0x84
 8007d9a:	5c9b      	ldrb	r3, [r3, r2]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d101      	bne.n	8007da4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007da0:	2302      	movs	r3, #2
 8007da2:	e02e      	b.n	8007e02 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2284      	movs	r2, #132	; 0x84
 8007da8:	2101      	movs	r1, #1
 8007daa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2288      	movs	r2, #136	; 0x88
 8007db0:	2124      	movs	r1, #36	; 0x24
 8007db2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2101      	movs	r1, #1
 8007dc8:	438a      	bics	r2, r1
 8007dca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	00db      	lsls	r3, r3, #3
 8007dd4:	08d9      	lsrs	r1, r3, #3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	683a      	ldr	r2, [r7, #0]
 8007ddc:	430a      	orrs	r2, r1
 8007dde:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	0018      	movs	r0, r3
 8007de4:	f000 f854 	bl	8007e90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2288      	movs	r2, #136	; 0x88
 8007df4:	2120      	movs	r1, #32
 8007df6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2284      	movs	r2, #132	; 0x84
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	0018      	movs	r0, r3
 8007e04:	46bd      	mov	sp, r7
 8007e06:	b004      	add	sp, #16
 8007e08:	bd80      	pop	{r7, pc}
	...

08007e0c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2284      	movs	r2, #132	; 0x84
 8007e1a:	5c9b      	ldrb	r3, [r3, r2]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d101      	bne.n	8007e24 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007e20:	2302      	movs	r3, #2
 8007e22:	e02f      	b.n	8007e84 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2284      	movs	r2, #132	; 0x84
 8007e28:	2101      	movs	r1, #1
 8007e2a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2288      	movs	r2, #136	; 0x88
 8007e30:	2124      	movs	r1, #36	; 0x24
 8007e32:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2101      	movs	r1, #1
 8007e48:	438a      	bics	r2, r1
 8007e4a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	4a0e      	ldr	r2, [pc, #56]	; (8007e8c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007e54:	4013      	ands	r3, r2
 8007e56:	0019      	movs	r1, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	683a      	ldr	r2, [r7, #0]
 8007e5e:	430a      	orrs	r2, r1
 8007e60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	0018      	movs	r0, r3
 8007e66:	f000 f813 	bl	8007e90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68fa      	ldr	r2, [r7, #12]
 8007e70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2288      	movs	r2, #136	; 0x88
 8007e76:	2120      	movs	r1, #32
 8007e78:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2284      	movs	r2, #132	; 0x84
 8007e7e:	2100      	movs	r1, #0
 8007e80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e82:	2300      	movs	r3, #0
}
 8007e84:	0018      	movs	r0, r3
 8007e86:	46bd      	mov	sp, r7
 8007e88:	b004      	add	sp, #16
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	f1ffffff 	.word	0xf1ffffff

08007e90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d108      	bne.n	8007eb2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	226a      	movs	r2, #106	; 0x6a
 8007ea4:	2101      	movs	r1, #1
 8007ea6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2268      	movs	r2, #104	; 0x68
 8007eac:	2101      	movs	r1, #1
 8007eae:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007eb0:	e043      	b.n	8007f3a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007eb2:	260f      	movs	r6, #15
 8007eb4:	19bb      	adds	r3, r7, r6
 8007eb6:	2208      	movs	r2, #8
 8007eb8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007eba:	200e      	movs	r0, #14
 8007ebc:	183b      	adds	r3, r7, r0
 8007ebe:	2208      	movs	r2, #8
 8007ec0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	0e5b      	lsrs	r3, r3, #25
 8007eca:	b2da      	uxtb	r2, r3
 8007ecc:	240d      	movs	r4, #13
 8007ece:	193b      	adds	r3, r7, r4
 8007ed0:	2107      	movs	r1, #7
 8007ed2:	400a      	ands	r2, r1
 8007ed4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	0f5b      	lsrs	r3, r3, #29
 8007ede:	b2da      	uxtb	r2, r3
 8007ee0:	250c      	movs	r5, #12
 8007ee2:	197b      	adds	r3, r7, r5
 8007ee4:	2107      	movs	r1, #7
 8007ee6:	400a      	ands	r2, r1
 8007ee8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007eea:	183b      	adds	r3, r7, r0
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	197a      	adds	r2, r7, r5
 8007ef0:	7812      	ldrb	r2, [r2, #0]
 8007ef2:	4914      	ldr	r1, [pc, #80]	; (8007f44 <UARTEx_SetNbDataToProcess+0xb4>)
 8007ef4:	5c8a      	ldrb	r2, [r1, r2]
 8007ef6:	435a      	muls	r2, r3
 8007ef8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007efa:	197b      	adds	r3, r7, r5
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	4a12      	ldr	r2, [pc, #72]	; (8007f48 <UARTEx_SetNbDataToProcess+0xb8>)
 8007f00:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f02:	0019      	movs	r1, r3
 8007f04:	f7f8 f9a4 	bl	8000250 <__divsi3>
 8007f08:	0003      	movs	r3, r0
 8007f0a:	b299      	uxth	r1, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	226a      	movs	r2, #106	; 0x6a
 8007f10:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f12:	19bb      	adds	r3, r7, r6
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	193a      	adds	r2, r7, r4
 8007f18:	7812      	ldrb	r2, [r2, #0]
 8007f1a:	490a      	ldr	r1, [pc, #40]	; (8007f44 <UARTEx_SetNbDataToProcess+0xb4>)
 8007f1c:	5c8a      	ldrb	r2, [r1, r2]
 8007f1e:	435a      	muls	r2, r3
 8007f20:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007f22:	193b      	adds	r3, r7, r4
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	4a08      	ldr	r2, [pc, #32]	; (8007f48 <UARTEx_SetNbDataToProcess+0xb8>)
 8007f28:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f2a:	0019      	movs	r1, r3
 8007f2c:	f7f8 f990 	bl	8000250 <__divsi3>
 8007f30:	0003      	movs	r3, r0
 8007f32:	b299      	uxth	r1, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2268      	movs	r2, #104	; 0x68
 8007f38:	5299      	strh	r1, [r3, r2]
}
 8007f3a:	46c0      	nop			; (mov r8, r8)
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	b005      	add	sp, #20
 8007f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f42:	46c0      	nop			; (mov r8, r8)
 8007f44:	08014ed4 	.word	0x08014ed4
 8007f48:	08014edc 	.word	0x08014edc

08007f4c <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8007f4c:	b5b0      	push	{r4, r5, r7, lr}
 8007f4e:	b0e4      	sub	sp, #400	; 0x190
 8007f50:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007f52:	24c8      	movs	r4, #200	; 0xc8
 8007f54:	193b      	adds	r3, r7, r4
 8007f56:	0018      	movs	r0, r3
 8007f58:	23c6      	movs	r3, #198	; 0xc6
 8007f5a:	001a      	movs	r2, r3
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	f004 fc7d 	bl	800c85c <memset>
    astronode_app_msg_t answer = {0};
 8007f62:	4b13      	ldr	r3, [pc, #76]	; (8007fb0 <astronode_send_cfg_sr+0x64>)
 8007f64:	25c8      	movs	r5, #200	; 0xc8
 8007f66:	006d      	lsls	r5, r5, #1
 8007f68:	195b      	adds	r3, r3, r5
 8007f6a:	19db      	adds	r3, r3, r7
 8007f6c:	0018      	movs	r0, r3
 8007f6e:	23c6      	movs	r3, #198	; 0xc6
 8007f70:	001a      	movs	r2, r3
 8007f72:	2100      	movs	r1, #0
 8007f74:	f004 fc72 	bl	800c85c <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 8007f78:	193b      	adds	r3, r7, r4
 8007f7a:	2210      	movs	r2, #16
 8007f7c:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 8007f7e:	003a      	movs	r2, r7
 8007f80:	193b      	adds	r3, r7, r4
 8007f82:	0011      	movs	r1, r2
 8007f84:	0018      	movs	r0, r3
 8007f86:	f001 fab1 	bl	80094ec <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 8007f8a:	4b09      	ldr	r3, [pc, #36]	; (8007fb0 <astronode_send_cfg_sr+0x64>)
 8007f8c:	195b      	adds	r3, r3, r5
 8007f8e:	19db      	adds	r3, r3, r7
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	2b90      	cmp	r3, #144	; 0x90
 8007f94:	d104      	bne.n	8007fa0 <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 8007f96:	4b07      	ldr	r3, [pc, #28]	; (8007fb4 <astronode_send_cfg_sr+0x68>)
 8007f98:	0018      	movs	r0, r3
 8007f9a:	f7fb f88d 	bl	80030b8 <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8007f9e:	e003      	b.n	8007fa8 <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8007fa0:	4b05      	ldr	r3, [pc, #20]	; (8007fb8 <astronode_send_cfg_sr+0x6c>)
 8007fa2:	0018      	movs	r0, r3
 8007fa4:	f7fb f888 	bl	80030b8 <send_debug_logs>
}
 8007fa8:	46c0      	nop			; (mov r8, r8)
 8007faa:	46bd      	mov	sp, r7
 8007fac:	b064      	add	sp, #400	; 0x190
 8007fae:	bdb0      	pop	{r4, r5, r7, pc}
 8007fb0:	fffffe70 	.word	0xfffffe70
 8007fb4:	08013a10 	.word	0x08013a10
 8007fb8:	08013a44 	.word	0x08013a44

08007fbc <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 8007fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fbe:	b0e7      	sub	sp, #412	; 0x19c
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	0005      	movs	r5, r0
 8007fc4:	000c      	movs	r4, r1
 8007fc6:	0010      	movs	r0, r2
 8007fc8:	0019      	movs	r1, r3
 8007fca:	4b4b      	ldr	r3, [pc, #300]	; (80080f8 <astronode_send_cfg_wr+0x13c>)
 8007fcc:	26cc      	movs	r6, #204	; 0xcc
 8007fce:	0076      	lsls	r6, r6, #1
 8007fd0:	199b      	adds	r3, r3, r6
 8007fd2:	19db      	adds	r3, r3, r7
 8007fd4:	1c2a      	adds	r2, r5, #0
 8007fd6:	701a      	strb	r2, [r3, #0]
 8007fd8:	4b48      	ldr	r3, [pc, #288]	; (80080fc <astronode_send_cfg_wr+0x140>)
 8007fda:	0035      	movs	r5, r6
 8007fdc:	195b      	adds	r3, r3, r5
 8007fde:	19db      	adds	r3, r3, r7
 8007fe0:	1c22      	adds	r2, r4, #0
 8007fe2:	701a      	strb	r2, [r3, #0]
 8007fe4:	4b46      	ldr	r3, [pc, #280]	; (8008100 <astronode_send_cfg_wr+0x144>)
 8007fe6:	002c      	movs	r4, r5
 8007fe8:	191b      	adds	r3, r3, r4
 8007fea:	19db      	adds	r3, r3, r7
 8007fec:	1c02      	adds	r2, r0, #0
 8007fee:	701a      	strb	r2, [r3, #0]
 8007ff0:	4b44      	ldr	r3, [pc, #272]	; (8008104 <astronode_send_cfg_wr+0x148>)
 8007ff2:	191b      	adds	r3, r3, r4
 8007ff4:	19db      	adds	r3, r3, r7
 8007ff6:	1c0a      	adds	r2, r1, #0
 8007ff8:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8007ffa:	25d0      	movs	r5, #208	; 0xd0
 8007ffc:	197b      	adds	r3, r7, r5
 8007ffe:	0018      	movs	r0, r3
 8008000:	23c6      	movs	r3, #198	; 0xc6
 8008002:	001a      	movs	r2, r3
 8008004:	2100      	movs	r1, #0
 8008006:	f004 fc29 	bl	800c85c <memset>
    astronode_app_msg_t answer = {0};
 800800a:	4b3f      	ldr	r3, [pc, #252]	; (8008108 <astronode_send_cfg_wr+0x14c>)
 800800c:	191b      	adds	r3, r3, r4
 800800e:	19db      	adds	r3, r3, r7
 8008010:	0018      	movs	r0, r3
 8008012:	23c6      	movs	r3, #198	; 0xc6
 8008014:	001a      	movs	r2, r3
 8008016:	2100      	movs	r1, #0
 8008018:	f004 fc20 	bl	800c85c <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 800801c:	0029      	movs	r1, r5
 800801e:	187b      	adds	r3, r7, r1
 8008020:	2205      	movs	r2, #5
 8008022:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8008024:	4b34      	ldr	r3, [pc, #208]	; (80080f8 <astronode_send_cfg_wr+0x13c>)
 8008026:	191b      	adds	r3, r3, r4
 8008028:	19db      	adds	r3, r3, r7
 800802a:	2200      	movs	r2, #0
 800802c:	569a      	ldrsb	r2, [r3, r2]
 800802e:	4b33      	ldr	r3, [pc, #204]	; (80080fc <astronode_send_cfg_wr+0x140>)
 8008030:	191b      	adds	r3, r3, r4
 8008032:	19db      	adds	r3, r3, r7
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	005b      	lsls	r3, r3, #1
 8008038:	b25b      	sxtb	r3, r3
 800803a:	4313      	orrs	r3, r2
 800803c:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 800803e:	4b30      	ldr	r3, [pc, #192]	; (8008100 <astronode_send_cfg_wr+0x144>)
 8008040:	191b      	adds	r3, r3, r4
 8008042:	19db      	adds	r3, r3, r7
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	b25b      	sxtb	r3, r3
 800804a:	4313      	orrs	r3, r2
 800804c:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 800804e:	4b2d      	ldr	r3, [pc, #180]	; (8008104 <astronode_send_cfg_wr+0x148>)
 8008050:	191b      	adds	r3, r3, r4
 8008052:	19db      	adds	r3, r3, r7
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	00db      	lsls	r3, r3, #3
 8008058:	b25b      	sxtb	r3, r3
 800805a:	4313      	orrs	r3, r2
 800805c:	b25b      	sxtb	r3, r3
 800805e:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8008060:	187b      	adds	r3, r7, r1
 8008062:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8008064:	23d4      	movs	r3, #212	; 0xd4
 8008066:	005b      	lsls	r3, r3, #1
 8008068:	2508      	movs	r5, #8
 800806a:	195b      	adds	r3, r3, r5
 800806c:	19db      	adds	r3, r3, r7
 800806e:	2200      	movs	r2, #0
 8008070:	569a      	ldrsb	r2, [r3, r2]
 8008072:	23d6      	movs	r3, #214	; 0xd6
 8008074:	005b      	lsls	r3, r3, #1
 8008076:	195b      	adds	r3, r3, r5
 8008078:	19db      	adds	r3, r3, r7
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	005b      	lsls	r3, r3, #1
 800807e:	b25b      	sxtb	r3, r3
 8008080:	4313      	orrs	r3, r2
 8008082:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 8008084:	23d8      	movs	r3, #216	; 0xd8
 8008086:	005b      	lsls	r3, r3, #1
 8008088:	195b      	adds	r3, r3, r5
 800808a:	19db      	adds	r3, r3, r7
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	b25b      	sxtb	r3, r3
 8008092:	4313      	orrs	r3, r2
 8008094:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 8008096:	23da      	movs	r3, #218	; 0xda
 8008098:	005b      	lsls	r3, r3, #1
 800809a:	195b      	adds	r3, r3, r5
 800809c:	19db      	adds	r3, r3, r7
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	00db      	lsls	r3, r3, #3
 80080a2:	b25b      	sxtb	r3, r3
 80080a4:	4313      	orrs	r3, r2
 80080a6:	b25b      	sxtb	r3, r3
 80080a8:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 80080aa:	187b      	adds	r3, r7, r1
 80080ac:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 80080ae:	0008      	movs	r0, r1
 80080b0:	187b      	adds	r3, r7, r1
 80080b2:	22c4      	movs	r2, #196	; 0xc4
 80080b4:	2103      	movs	r1, #3
 80080b6:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80080b8:	002b      	movs	r3, r5
 80080ba:	18fa      	adds	r2, r7, r3
 80080bc:	183b      	adds	r3, r7, r0
 80080be:	0011      	movs	r1, r2
 80080c0:	0018      	movs	r0, r3
 80080c2:	f001 fa13 	bl	80094ec <astronode_transport_send_receive>
 80080c6:	0003      	movs	r3, r0
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d10f      	bne.n	80080ec <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 80080cc:	4b0e      	ldr	r3, [pc, #56]	; (8008108 <astronode_send_cfg_wr+0x14c>)
 80080ce:	191b      	adds	r3, r3, r4
 80080d0:	19db      	adds	r3, r3, r7
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	2b85      	cmp	r3, #133	; 0x85
 80080d6:	d105      	bne.n	80080e4 <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 80080d8:	4b0c      	ldr	r3, [pc, #48]	; (800810c <astronode_send_cfg_wr+0x150>)
 80080da:	0018      	movs	r0, r3
 80080dc:	f7fa ffec 	bl	80030b8 <send_debug_logs>
            return true ;
 80080e0:	2301      	movs	r3, #1
 80080e2:	e004      	b.n	80080ee <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 80080e4:	4b0a      	ldr	r3, [pc, #40]	; (8008110 <astronode_send_cfg_wr+0x154>)
 80080e6:	0018      	movs	r0, r3
 80080e8:	f7fa ffe6 	bl	80030b8 <send_debug_logs>
        }
    }
    return false ;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	0018      	movs	r0, r3
 80080f0:	46bd      	mov	sp, r7
 80080f2:	b067      	add	sp, #412	; 0x19c
 80080f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080f6:	46c0      	nop			; (mov r8, r8)
 80080f8:	fffffe6f 	.word	0xfffffe6f
 80080fc:	fffffe6e 	.word	0xfffffe6e
 8008100:	fffffe6d 	.word	0xfffffe6d
 8008104:	fffffe6c 	.word	0xfffffe6c
 8008108:	fffffe70 	.word	0xfffffe70
 800810c:	08013a78 	.word	0x08013a78
 8008110:	08013aa4 	.word	0x08013aa4

08008114 <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 8008114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008116:	b0ed      	sub	sp, #436	; 0x1b4
 8008118:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800811a:	21c8      	movs	r1, #200	; 0xc8
 800811c:	2318      	movs	r3, #24
 800811e:	18cb      	adds	r3, r1, r3
 8008120:	19db      	adds	r3, r3, r7
 8008122:	0018      	movs	r0, r3
 8008124:	23c6      	movs	r3, #198	; 0xc6
 8008126:	001a      	movs	r2, r3
 8008128:	2100      	movs	r1, #0
 800812a:	f004 fb97 	bl	800c85c <memset>
    astronode_app_msg_t answer = {0};
 800812e:	4b4a      	ldr	r3, [pc, #296]	; (8008258 <astronode_send_mgi_rr+0x144>)
 8008130:	26cc      	movs	r6, #204	; 0xcc
 8008132:	0076      	lsls	r6, r6, #1
 8008134:	199b      	adds	r3, r3, r6
 8008136:	2218      	movs	r2, #24
 8008138:	4694      	mov	ip, r2
 800813a:	44bc      	add	ip, r7
 800813c:	4463      	add	r3, ip
 800813e:	0018      	movs	r0, r3
 8008140:	23c6      	movs	r3, #198	; 0xc6
 8008142:	001a      	movs	r2, r3
 8008144:	2100      	movs	r1, #0
 8008146:	f004 fb89 	bl	800c85c <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 800814a:	21c8      	movs	r1, #200	; 0xc8
 800814c:	2318      	movs	r3, #24
 800814e:	18cb      	adds	r3, r1, r3
 8008150:	19db      	adds	r3, r3, r7
 8008152:	2219      	movs	r2, #25
 8008154:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008156:	2318      	movs	r3, #24
 8008158:	18fa      	adds	r2, r7, r3
 800815a:	2318      	movs	r3, #24
 800815c:	18cb      	adds	r3, r1, r3
 800815e:	19db      	adds	r3, r3, r7
 8008160:	0011      	movs	r1, r2
 8008162:	0018      	movs	r0, r3
 8008164:	f001 f9c2 	bl	80094ec <astronode_transport_send_receive>
 8008168:	0003      	movs	r3, r0
 800816a:	2b01      	cmp	r3, #1
 800816c:	d16f      	bne.n	800824e <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 800816e:	4b3a      	ldr	r3, [pc, #232]	; (8008258 <astronode_send_mgi_rr+0x144>)
 8008170:	0032      	movs	r2, r6
 8008172:	189b      	adds	r3, r3, r2
 8008174:	2118      	movs	r1, #24
 8008176:	468c      	mov	ip, r1
 8008178:	44bc      	add	ip, r7
 800817a:	4463      	add	r3, ip
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	2b99      	cmp	r3, #153	; 0x99
 8008180:	d161      	bne.n	8008246 <astronode_send_mgi_rr+0x132>
        {
 8008182:	466b      	mov	r3, sp
 8008184:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 8008186:	4b34      	ldr	r3, [pc, #208]	; (8008258 <astronode_send_mgi_rr+0x144>)
 8008188:	189b      	adds	r3, r3, r2
 800818a:	2218      	movs	r2, #24
 800818c:	4694      	mov	ip, r2
 800818e:	44bc      	add	ip, r7
 8008190:	4463      	add	r3, ip
 8008192:	22c4      	movs	r2, #196	; 0xc4
 8008194:	5a9b      	ldrh	r3, [r3, r2]
 8008196:	001a      	movs	r2, r3
 8008198:	3a01      	subs	r2, #1
 800819a:	21ca      	movs	r1, #202	; 0xca
 800819c:	0049      	lsls	r1, r1, #1
 800819e:	2018      	movs	r0, #24
 80081a0:	1809      	adds	r1, r1, r0
 80081a2:	19c9      	adds	r1, r1, r7
 80081a4:	600a      	str	r2, [r1, #0]
 80081a6:	001c      	movs	r4, r3
 80081a8:	2200      	movs	r2, #0
 80081aa:	0015      	movs	r5, r2
 80081ac:	0020      	movs	r0, r4
 80081ae:	0029      	movs	r1, r5
 80081b0:	0004      	movs	r4, r0
 80081b2:	0f62      	lsrs	r2, r4, #29
 80081b4:	000c      	movs	r4, r1
 80081b6:	00e4      	lsls	r4, r4, #3
 80081b8:	617c      	str	r4, [r7, #20]
 80081ba:	697c      	ldr	r4, [r7, #20]
 80081bc:	4314      	orrs	r4, r2
 80081be:	617c      	str	r4, [r7, #20]
 80081c0:	0001      	movs	r1, r0
 80081c2:	00c9      	lsls	r1, r1, #3
 80081c4:	6139      	str	r1, [r7, #16]
 80081c6:	603b      	str	r3, [r7, #0]
 80081c8:	2200      	movs	r2, #0
 80081ca:	607a      	str	r2, [r7, #4]
 80081cc:	6838      	ldr	r0, [r7, #0]
 80081ce:	6879      	ldr	r1, [r7, #4]
 80081d0:	0004      	movs	r4, r0
 80081d2:	0f62      	lsrs	r2, r4, #29
 80081d4:	000c      	movs	r4, r1
 80081d6:	00e4      	lsls	r4, r4, #3
 80081d8:	60fc      	str	r4, [r7, #12]
 80081da:	68fc      	ldr	r4, [r7, #12]
 80081dc:	4314      	orrs	r4, r2
 80081de:	60fc      	str	r4, [r7, #12]
 80081e0:	0001      	movs	r1, r0
 80081e2:	00ca      	lsls	r2, r1, #3
 80081e4:	60ba      	str	r2, [r7, #8]
 80081e6:	3307      	adds	r3, #7
 80081e8:	08db      	lsrs	r3, r3, #3
 80081ea:	00db      	lsls	r3, r3, #3
 80081ec:	4669      	mov	r1, sp
 80081ee:	1acb      	subs	r3, r1, r3
 80081f0:	469d      	mov	sp, r3
 80081f2:	466b      	mov	r3, sp
 80081f4:	3300      	adds	r3, #0
 80081f6:	24c8      	movs	r4, #200	; 0xc8
 80081f8:	0064      	lsls	r4, r4, #1
 80081fa:	2218      	movs	r2, #24
 80081fc:	18a2      	adds	r2, r4, r2
 80081fe:	19d1      	adds	r1, r2, r7
 8008200:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 8008202:	4b16      	ldr	r3, [pc, #88]	; (800825c <astronode_send_mgi_rr+0x148>)
 8008204:	0018      	movs	r0, r3
 8008206:	f7fa ff57 	bl	80030b8 <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 800820a:	4b13      	ldr	r3, [pc, #76]	; (8008258 <astronode_send_mgi_rr+0x144>)
 800820c:	22cc      	movs	r2, #204	; 0xcc
 800820e:	0052      	lsls	r2, r2, #1
 8008210:	189b      	adds	r3, r3, r2
 8008212:	2218      	movs	r2, #24
 8008214:	4694      	mov	ip, r2
 8008216:	44bc      	add	ip, r7
 8008218:	4463      	add	r3, ip
 800821a:	22c4      	movs	r2, #196	; 0xc4
 800821c:	5a9b      	ldrh	r3, [r3, r2]
 800821e:	0019      	movs	r1, r3
 8008220:	2318      	movs	r3, #24
 8008222:	18fb      	adds	r3, r7, r3
 8008224:	3301      	adds	r3, #1
 8008226:	4a0e      	ldr	r2, [pc, #56]	; (8008260 <astronode_send_mgi_rr+0x14c>)
 8008228:	2018      	movs	r0, #24
 800822a:	1820      	adds	r0, r4, r0
 800822c:	19c0      	adds	r0, r0, r7
 800822e:	6800      	ldr	r0, [r0, #0]
 8008230:	f004 fa4a 	bl	800c6c8 <snprintf>
            send_debug_logs(guid);
 8008234:	2318      	movs	r3, #24
 8008236:	18e3      	adds	r3, r4, r3
 8008238:	19db      	adds	r3, r3, r7
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	0018      	movs	r0, r3
 800823e:	f7fa ff3b 	bl	80030b8 <send_debug_logs>
 8008242:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 8008244:	e003      	b.n	800824e <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 8008246:	4b07      	ldr	r3, [pc, #28]	; (8008264 <astronode_send_mgi_rr+0x150>)
 8008248:	0018      	movs	r0, r3
 800824a:	f7fa ff35 	bl	80030b8 <send_debug_logs>
}
 800824e:	46c0      	nop			; (mov r8, r8)
 8008250:	46bd      	mov	sp, r7
 8008252:	b06d      	add	sp, #436	; 0x1b4
 8008254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008256:	46c0      	nop			; (mov r8, r8)
 8008258:	fffffe68 	.word	0xfffffe68
 800825c:	08013b30 	.word	0x08013b30
 8008260:	08013b40 	.word	0x08013b40
 8008264:	08013b44 	.word	0x08013b44

08008268 <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 8008268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800826a:	b0ed      	sub	sp, #436	; 0x1b4
 800826c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800826e:	21c8      	movs	r1, #200	; 0xc8
 8008270:	2318      	movs	r3, #24
 8008272:	18cb      	adds	r3, r1, r3
 8008274:	19db      	adds	r3, r3, r7
 8008276:	0018      	movs	r0, r3
 8008278:	23c6      	movs	r3, #198	; 0xc6
 800827a:	001a      	movs	r2, r3
 800827c:	2100      	movs	r1, #0
 800827e:	f004 faed 	bl	800c85c <memset>
    astronode_app_msg_t answer = {0};
 8008282:	4b4a      	ldr	r3, [pc, #296]	; (80083ac <astronode_send_msn_rr+0x144>)
 8008284:	26cc      	movs	r6, #204	; 0xcc
 8008286:	0076      	lsls	r6, r6, #1
 8008288:	199b      	adds	r3, r3, r6
 800828a:	2218      	movs	r2, #24
 800828c:	4694      	mov	ip, r2
 800828e:	44bc      	add	ip, r7
 8008290:	4463      	add	r3, ip
 8008292:	0018      	movs	r0, r3
 8008294:	23c6      	movs	r3, #198	; 0xc6
 8008296:	001a      	movs	r2, r3
 8008298:	2100      	movs	r1, #0
 800829a:	f004 fadf 	bl	800c85c <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 800829e:	21c8      	movs	r1, #200	; 0xc8
 80082a0:	2318      	movs	r3, #24
 80082a2:	18cb      	adds	r3, r1, r3
 80082a4:	19db      	adds	r3, r3, r7
 80082a6:	221a      	movs	r2, #26
 80082a8:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80082aa:	2318      	movs	r3, #24
 80082ac:	18fa      	adds	r2, r7, r3
 80082ae:	2318      	movs	r3, #24
 80082b0:	18cb      	adds	r3, r1, r3
 80082b2:	19db      	adds	r3, r3, r7
 80082b4:	0011      	movs	r1, r2
 80082b6:	0018      	movs	r0, r3
 80082b8:	f001 f918 	bl	80094ec <astronode_transport_send_receive>
 80082bc:	0003      	movs	r3, r0
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d16f      	bne.n	80083a2 <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 80082c2:	4b3a      	ldr	r3, [pc, #232]	; (80083ac <astronode_send_msn_rr+0x144>)
 80082c4:	0032      	movs	r2, r6
 80082c6:	189b      	adds	r3, r3, r2
 80082c8:	2118      	movs	r1, #24
 80082ca:	468c      	mov	ip, r1
 80082cc:	44bc      	add	ip, r7
 80082ce:	4463      	add	r3, ip
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	2b9a      	cmp	r3, #154	; 0x9a
 80082d4:	d161      	bne.n	800839a <astronode_send_msn_rr+0x132>
        {
 80082d6:	466b      	mov	r3, sp
 80082d8:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 80082da:	4b34      	ldr	r3, [pc, #208]	; (80083ac <astronode_send_msn_rr+0x144>)
 80082dc:	189b      	adds	r3, r3, r2
 80082de:	2218      	movs	r2, #24
 80082e0:	4694      	mov	ip, r2
 80082e2:	44bc      	add	ip, r7
 80082e4:	4463      	add	r3, ip
 80082e6:	22c4      	movs	r2, #196	; 0xc4
 80082e8:	5a9b      	ldrh	r3, [r3, r2]
 80082ea:	001a      	movs	r2, r3
 80082ec:	3a01      	subs	r2, #1
 80082ee:	21ca      	movs	r1, #202	; 0xca
 80082f0:	0049      	lsls	r1, r1, #1
 80082f2:	2018      	movs	r0, #24
 80082f4:	1809      	adds	r1, r1, r0
 80082f6:	19c9      	adds	r1, r1, r7
 80082f8:	600a      	str	r2, [r1, #0]
 80082fa:	001c      	movs	r4, r3
 80082fc:	2200      	movs	r2, #0
 80082fe:	0015      	movs	r5, r2
 8008300:	0020      	movs	r0, r4
 8008302:	0029      	movs	r1, r5
 8008304:	0004      	movs	r4, r0
 8008306:	0f62      	lsrs	r2, r4, #29
 8008308:	000c      	movs	r4, r1
 800830a:	00e4      	lsls	r4, r4, #3
 800830c:	617c      	str	r4, [r7, #20]
 800830e:	697c      	ldr	r4, [r7, #20]
 8008310:	4314      	orrs	r4, r2
 8008312:	617c      	str	r4, [r7, #20]
 8008314:	0001      	movs	r1, r0
 8008316:	00c9      	lsls	r1, r1, #3
 8008318:	6139      	str	r1, [r7, #16]
 800831a:	603b      	str	r3, [r7, #0]
 800831c:	2200      	movs	r2, #0
 800831e:	607a      	str	r2, [r7, #4]
 8008320:	6838      	ldr	r0, [r7, #0]
 8008322:	6879      	ldr	r1, [r7, #4]
 8008324:	0004      	movs	r4, r0
 8008326:	0f62      	lsrs	r2, r4, #29
 8008328:	000c      	movs	r4, r1
 800832a:	00e4      	lsls	r4, r4, #3
 800832c:	60fc      	str	r4, [r7, #12]
 800832e:	68fc      	ldr	r4, [r7, #12]
 8008330:	4314      	orrs	r4, r2
 8008332:	60fc      	str	r4, [r7, #12]
 8008334:	0001      	movs	r1, r0
 8008336:	00ca      	lsls	r2, r1, #3
 8008338:	60ba      	str	r2, [r7, #8]
 800833a:	3307      	adds	r3, #7
 800833c:	08db      	lsrs	r3, r3, #3
 800833e:	00db      	lsls	r3, r3, #3
 8008340:	4669      	mov	r1, sp
 8008342:	1acb      	subs	r3, r1, r3
 8008344:	469d      	mov	sp, r3
 8008346:	466b      	mov	r3, sp
 8008348:	3300      	adds	r3, #0
 800834a:	24c8      	movs	r4, #200	; 0xc8
 800834c:	0064      	lsls	r4, r4, #1
 800834e:	2218      	movs	r2, #24
 8008350:	18a2      	adds	r2, r4, r2
 8008352:	19d1      	adds	r1, r2, r7
 8008354:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 8008356:	4b16      	ldr	r3, [pc, #88]	; (80083b0 <astronode_send_msn_rr+0x148>)
 8008358:	0018      	movs	r0, r3
 800835a:	f7fa fead 	bl	80030b8 <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 800835e:	4b13      	ldr	r3, [pc, #76]	; (80083ac <astronode_send_msn_rr+0x144>)
 8008360:	22cc      	movs	r2, #204	; 0xcc
 8008362:	0052      	lsls	r2, r2, #1
 8008364:	189b      	adds	r3, r3, r2
 8008366:	2218      	movs	r2, #24
 8008368:	4694      	mov	ip, r2
 800836a:	44bc      	add	ip, r7
 800836c:	4463      	add	r3, ip
 800836e:	22c4      	movs	r2, #196	; 0xc4
 8008370:	5a9b      	ldrh	r3, [r3, r2]
 8008372:	0019      	movs	r1, r3
 8008374:	2318      	movs	r3, #24
 8008376:	18fb      	adds	r3, r7, r3
 8008378:	3301      	adds	r3, #1
 800837a:	4a0e      	ldr	r2, [pc, #56]	; (80083b4 <astronode_send_msn_rr+0x14c>)
 800837c:	2018      	movs	r0, #24
 800837e:	1820      	adds	r0, r4, r0
 8008380:	19c0      	adds	r0, r0, r7
 8008382:	6800      	ldr	r0, [r0, #0]
 8008384:	f004 f9a0 	bl	800c6c8 <snprintf>
            send_debug_logs(serial_number);
 8008388:	2318      	movs	r3, #24
 800838a:	18e3      	adds	r3, r4, r3
 800838c:	19db      	adds	r3, r3, r7
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	0018      	movs	r0, r3
 8008392:	f7fa fe91 	bl	80030b8 <send_debug_logs>
 8008396:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8008398:	e003      	b.n	80083a2 <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 800839a:	4b07      	ldr	r3, [pc, #28]	; (80083b8 <astronode_send_msn_rr+0x150>)
 800839c:	0018      	movs	r0, r3
 800839e:	f7fa fe8b 	bl	80030b8 <send_debug_logs>
}
 80083a2:	46c0      	nop			; (mov r8, r8)
 80083a4:	46bd      	mov	sp, r7
 80083a6:	b06d      	add	sp, #436	; 0x1b4
 80083a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083aa:	46c0      	nop			; (mov r8, r8)
 80083ac:	fffffe68 	.word	0xfffffe68
 80083b0:	08013b60 	.word	0x08013b60
 80083b4:	08013b40 	.word	0x08013b40
 80083b8:	08013b7c 	.word	0x08013b7c

080083bc <astronode_send_nco_rr>:

uint32_t astronode_send_nco_rr ( void )
{
 80083bc:	b5b0      	push	{r4, r5, r7, lr}
 80083be:	b0fa      	sub	sp, #488	; 0x1e8
 80083c0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0} ;
 80083c2:	258e      	movs	r5, #142	; 0x8e
 80083c4:	006d      	lsls	r5, r5, #1
 80083c6:	197b      	adds	r3, r7, r5
 80083c8:	0018      	movs	r0, r3
 80083ca:	23c6      	movs	r3, #198	; 0xc6
 80083cc:	001a      	movs	r2, r3
 80083ce:	2100      	movs	r1, #0
 80083d0:	f004 fa44 	bl	800c85c <memset>
    astronode_app_msg_t answer = {0} ;
 80083d4:	4b28      	ldr	r3, [pc, #160]	; (8008478 <astronode_send_nco_rr+0xbc>)
 80083d6:	24f4      	movs	r4, #244	; 0xf4
 80083d8:	0064      	lsls	r4, r4, #1
 80083da:	191b      	adds	r3, r3, r4
 80083dc:	19db      	adds	r3, r3, r7
 80083de:	0018      	movs	r0, r3
 80083e0:	23c6      	movs	r3, #198	; 0xc6
 80083e2:	001a      	movs	r2, r3
 80083e4:	2100      	movs	r1, #0
 80083e6:	f004 fa39 	bl	800c85c <memset>

    request.op_code = ASTRONODE_OP_CODE_NCO_RR ;
 80083ea:	197b      	adds	r3, r7, r5
 80083ec:	2218      	movs	r2, #24
 80083ee:	701a      	strb	r2, [r3, #0]

    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 80083f0:	2354      	movs	r3, #84	; 0x54
 80083f2:	18fa      	adds	r2, r7, r3
 80083f4:	197b      	adds	r3, r7, r5
 80083f6:	0011      	movs	r1, r2
 80083f8:	0018      	movs	r0, r3
 80083fa:	f001 f877 	bl	80094ec <astronode_transport_send_receive>
 80083fe:	0003      	movs	r3, r0
 8008400:	2b01      	cmp	r3, #1
 8008402:	d133      	bne.n	800846c <astronode_send_nco_rr+0xb0>
    {
        if ( answer.op_code == ASTRONODE_OP_CODE_NCO_RA )
 8008404:	4b1c      	ldr	r3, [pc, #112]	; (8008478 <astronode_send_nco_rr+0xbc>)
 8008406:	0021      	movs	r1, r4
 8008408:	185b      	adds	r3, r3, r1
 800840a:	19db      	adds	r3, r3, r7
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	2b98      	cmp	r3, #152	; 0x98
 8008410:	d128      	bne.n	8008464 <astronode_send_nco_rr+0xa8>
        {
            uint32_t time_to_next_pass = answer.p_payload[0]
 8008412:	4b19      	ldr	r3, [pc, #100]	; (8008478 <astronode_send_nco_rr+0xbc>)
 8008414:	185b      	adds	r3, r3, r1
 8008416:	19db      	adds	r3, r3, r7
 8008418:	785b      	ldrb	r3, [r3, #1]
 800841a:	001a      	movs	r2, r3
                                        + ( answer.p_payload[1] << 8 )
 800841c:	4b16      	ldr	r3, [pc, #88]	; (8008478 <astronode_send_nco_rr+0xbc>)
 800841e:	185b      	adds	r3, r3, r1
 8008420:	19db      	adds	r3, r3, r7
 8008422:	789b      	ldrb	r3, [r3, #2]
 8008424:	021b      	lsls	r3, r3, #8
 8008426:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[2] << 16 )
 8008428:	4b13      	ldr	r3, [pc, #76]	; (8008478 <astronode_send_nco_rr+0xbc>)
 800842a:	185b      	adds	r3, r3, r1
 800842c:	19db      	adds	r3, r3, r7
 800842e:	78db      	ldrb	r3, [r3, #3]
 8008430:	041b      	lsls	r3, r3, #16
 8008432:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[3] << 24 ) ;
 8008434:	4b10      	ldr	r3, [pc, #64]	; (8008478 <astronode_send_nco_rr+0xbc>)
 8008436:	185b      	adds	r3, r3, r1
 8008438:	19db      	adds	r3, r3, r7
 800843a:	791b      	ldrb	r3, [r3, #4]
 800843c:	061b      	lsls	r3, r3, #24
 800843e:	18d3      	adds	r3, r2, r3
            uint32_t time_to_next_pass = answer.p_payload[0]
 8008440:	24f2      	movs	r4, #242	; 0xf2
 8008442:	0064      	lsls	r4, r4, #1
 8008444:	193a      	adds	r2, r7, r4
 8008446:	6013      	str	r3, [r2, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf (str , "Next opportunity for communication with the Astrocast Network: %lds." , time_to_next_pass ) ;
 8008448:	193b      	adds	r3, r7, r4
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	490b      	ldr	r1, [pc, #44]	; (800847c <astronode_send_nco_rr+0xc0>)
 800844e:	1d3b      	adds	r3, r7, #4
 8008450:	0018      	movs	r0, r3
 8008452:	f004 f96d 	bl	800c730 <sprintf>
            send_debug_logs ( str ) ;
 8008456:	1d3b      	adds	r3, r7, #4
 8008458:	0018      	movs	r0, r3
 800845a:	f7fa fe2d 	bl	80030b8 <send_debug_logs>
            return time_to_next_pass ;
 800845e:	193b      	adds	r3, r7, r4
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	e005      	b.n	8008470 <astronode_send_nco_rr+0xb4>
        }
        else
        {
            send_debug_logs ( "Failed to read satellite constellation ephemeris data." ) ;
 8008464:	4b06      	ldr	r3, [pc, #24]	; (8008480 <astronode_send_nco_rr+0xc4>)
 8008466:	0018      	movs	r0, r3
 8008468:	f7fa fe26 	bl	80030b8 <send_debug_logs>
        }
    }
    return 0xFFFFFFFF ; // Longest possible time
 800846c:	2301      	movs	r3, #1
 800846e:	425b      	negs	r3, r3
}
 8008470:	0018      	movs	r0, r3
 8008472:	46bd      	mov	sp, r7
 8008474:	b07a      	add	sp, #488	; 0x1e8
 8008476:	bdb0      	pop	{r4, r5, r7, pc}
 8008478:	fffffe6c 	.word	0xfffffe6c
 800847c:	08013ba4 	.word	0x08013ba4
 8008480:	08013bec 	.word	0x08013bec

08008484 <astronode_send_evt_rr>:

void astronode_send_evt_rr(void)
{
 8008484:	b5b0      	push	{r4, r5, r7, lr}
 8008486:	b0e4      	sub	sp, #400	; 0x190
 8008488:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800848a:	24c8      	movs	r4, #200	; 0xc8
 800848c:	193b      	adds	r3, r7, r4
 800848e:	0018      	movs	r0, r3
 8008490:	23c6      	movs	r3, #198	; 0xc6
 8008492:	001a      	movs	r2, r3
 8008494:	2100      	movs	r1, #0
 8008496:	f004 f9e1 	bl	800c85c <memset>
    astronode_app_msg_t answer = {0};
 800849a:	4b31      	ldr	r3, [pc, #196]	; (8008560 <astronode_send_evt_rr+0xdc>)
 800849c:	25c8      	movs	r5, #200	; 0xc8
 800849e:	006d      	lsls	r5, r5, #1
 80084a0:	195b      	adds	r3, r3, r5
 80084a2:	19db      	adds	r3, r3, r7
 80084a4:	0018      	movs	r0, r3
 80084a6:	23c6      	movs	r3, #198	; 0xc6
 80084a8:	001a      	movs	r2, r3
 80084aa:	2100      	movs	r1, #0
 80084ac:	f004 f9d6 	bl	800c85c <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 80084b0:	193b      	adds	r3, r7, r4
 80084b2:	2265      	movs	r2, #101	; 0x65
 80084b4:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80084b6:	003a      	movs	r2, r7
 80084b8:	193b      	adds	r3, r7, r4
 80084ba:	0011      	movs	r1, r2
 80084bc:	0018      	movs	r0, r3
 80084be:	f001 f815 	bl	80094ec <astronode_transport_send_receive>
 80084c2:	0003      	movs	r3, r0
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d147      	bne.n	8008558 <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 80084c8:	4b25      	ldr	r3, [pc, #148]	; (8008560 <astronode_send_evt_rr+0xdc>)
 80084ca:	195b      	adds	r3, r3, r5
 80084cc:	19db      	adds	r3, r3, r7
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	2be5      	cmp	r3, #229	; 0xe5
 80084d2:	d141      	bne.n	8008558 <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 80084d4:	4b22      	ldr	r3, [pc, #136]	; (8008560 <astronode_send_evt_rr+0xdc>)
 80084d6:	195b      	adds	r3, r3, r5
 80084d8:	19db      	adds	r3, r3, r7
 80084da:	785b      	ldrb	r3, [r3, #1]
 80084dc:	001a      	movs	r2, r3
 80084de:	2301      	movs	r3, #1
 80084e0:	4013      	ands	r3, r2
 80084e2:	d006      	beq.n	80084f2 <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 80084e4:	4b1f      	ldr	r3, [pc, #124]	; (8008564 <astronode_send_evt_rr+0xe0>)
 80084e6:	2201      	movs	r2, #1
 80084e8:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 80084ea:	4b1f      	ldr	r3, [pc, #124]	; (8008568 <astronode_send_evt_rr+0xe4>)
 80084ec:	0018      	movs	r0, r3
 80084ee:	f7fa fde3 	bl	80030b8 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 80084f2:	4b1b      	ldr	r3, [pc, #108]	; (8008560 <astronode_send_evt_rr+0xdc>)
 80084f4:	22c8      	movs	r2, #200	; 0xc8
 80084f6:	0052      	lsls	r2, r2, #1
 80084f8:	189b      	adds	r3, r3, r2
 80084fa:	19db      	adds	r3, r3, r7
 80084fc:	785b      	ldrb	r3, [r3, #1]
 80084fe:	001a      	movs	r2, r3
 8008500:	2302      	movs	r3, #2
 8008502:	4013      	ands	r3, r2
 8008504:	d006      	beq.n	8008514 <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 8008506:	4b19      	ldr	r3, [pc, #100]	; (800856c <astronode_send_evt_rr+0xe8>)
 8008508:	2201      	movs	r2, #1
 800850a:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 800850c:	4b18      	ldr	r3, [pc, #96]	; (8008570 <astronode_send_evt_rr+0xec>)
 800850e:	0018      	movs	r0, r3
 8008510:	f7fa fdd2 	bl	80030b8 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 8008514:	4b12      	ldr	r3, [pc, #72]	; (8008560 <astronode_send_evt_rr+0xdc>)
 8008516:	22c8      	movs	r2, #200	; 0xc8
 8008518:	0052      	lsls	r2, r2, #1
 800851a:	189b      	adds	r3, r3, r2
 800851c:	19db      	adds	r3, r3, r7
 800851e:	785b      	ldrb	r3, [r3, #1]
 8008520:	001a      	movs	r2, r3
 8008522:	2304      	movs	r3, #4
 8008524:	4013      	ands	r3, r2
 8008526:	d006      	beq.n	8008536 <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 8008528:	4b12      	ldr	r3, [pc, #72]	; (8008574 <astronode_send_evt_rr+0xf0>)
 800852a:	2201      	movs	r2, #1
 800852c:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 800852e:	4b12      	ldr	r3, [pc, #72]	; (8008578 <astronode_send_evt_rr+0xf4>)
 8008530:	0018      	movs	r0, r3
 8008532:	f7fa fdc1 	bl	80030b8 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 8008536:	4b0a      	ldr	r3, [pc, #40]	; (8008560 <astronode_send_evt_rr+0xdc>)
 8008538:	22c8      	movs	r2, #200	; 0xc8
 800853a:	0052      	lsls	r2, r2, #1
 800853c:	189b      	adds	r3, r3, r2
 800853e:	19db      	adds	r3, r3, r7
 8008540:	785b      	ldrb	r3, [r3, #1]
 8008542:	001a      	movs	r2, r3
 8008544:	2308      	movs	r3, #8
 8008546:	4013      	ands	r3, r2
 8008548:	d006      	beq.n	8008558 <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 800854a:	4b0c      	ldr	r3, [pc, #48]	; (800857c <astronode_send_evt_rr+0xf8>)
 800854c:	2201      	movs	r2, #1
 800854e:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 8008550:	4b0b      	ldr	r3, [pc, #44]	; (8008580 <astronode_send_evt_rr+0xfc>)
 8008552:	0018      	movs	r0, r3
 8008554:	f7fa fdb0 	bl	80030b8 <send_debug_logs>
            }

        }
    }
}
 8008558:	46c0      	nop			; (mov r8, r8)
 800855a:	46bd      	mov	sp, r7
 800855c:	b064      	add	sp, #400	; 0x190
 800855e:	bdb0      	pop	{r4, r5, r7, pc}
 8008560:	fffffe70 	.word	0xfffffe70
 8008564:	20000bbc 	.word	0x20000bbc
 8008568:	08013c24 	.word	0x08013c24
 800856c:	20000bbd 	.word	0x20000bbd
 8008570:	08013c48 	.word	0x08013c48
 8008574:	20000bbe 	.word	0x20000bbe
 8008578:	08013c60 	.word	0x08013c60
 800857c:	20000bbf 	.word	0x20000bbf
 8008580:	08013c74 	.word	0x08013c74

08008584 <astronode_send_geo_wr>:

void astronode_send_geo_wr(int32_t latitude, int32_t longitude)
{
 8008584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008586:	b0e7      	sub	sp, #412	; 0x19c
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
    astronode_app_msg_t request = {0};
 800858e:	24d0      	movs	r4, #208	; 0xd0
 8008590:	193b      	adds	r3, r7, r4
 8008592:	0018      	movs	r0, r3
 8008594:	23c6      	movs	r3, #198	; 0xc6
 8008596:	001a      	movs	r2, r3
 8008598:	2100      	movs	r1, #0
 800859a:	f004 f95f 	bl	800c85c <memset>
    astronode_app_msg_t answer = {0};
 800859e:	4b56      	ldr	r3, [pc, #344]	; (80086f8 <astronode_send_geo_wr+0x174>)
 80085a0:	26cc      	movs	r6, #204	; 0xcc
 80085a2:	0076      	lsls	r6, r6, #1
 80085a4:	199b      	adds	r3, r3, r6
 80085a6:	19db      	adds	r3, r3, r7
 80085a8:	0018      	movs	r0, r3
 80085aa:	23c6      	movs	r3, #198	; 0xc6
 80085ac:	001a      	movs	r2, r3
 80085ae:	2100      	movs	r1, #0
 80085b0:	f004 f954 	bl	800c85c <memset>

    request.op_code = ASTRONODE_OP_CODE_GEO_WR;
 80085b4:	193b      	adds	r3, r7, r4
 80085b6:	2235      	movs	r2, #53	; 0x35
 80085b8:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) latitude;
 80085ba:	193b      	adds	r3, r7, r4
 80085bc:	22c4      	movs	r2, #196	; 0xc4
 80085be:	5a9b      	ldrh	r3, [r3, r2]
 80085c0:	1c5a      	adds	r2, r3, #1
 80085c2:	b290      	uxth	r0, r2
 80085c4:	193a      	adds	r2, r7, r4
 80085c6:	21c4      	movs	r1, #196	; 0xc4
 80085c8:	5250      	strh	r0, [r2, r1]
 80085ca:	0019      	movs	r1, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	b2da      	uxtb	r2, r3
 80085d0:	193b      	adds	r3, r7, r4
 80085d2:	185b      	adds	r3, r3, r1
 80085d4:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 8);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	1218      	asrs	r0, r3, #8
 80085da:	0025      	movs	r5, r4
 80085dc:	197b      	adds	r3, r7, r5
 80085de:	22c4      	movs	r2, #196	; 0xc4
 80085e0:	5a9b      	ldrh	r3, [r3, r2]
 80085e2:	1c5a      	adds	r2, r3, #1
 80085e4:	b294      	uxth	r4, r2
 80085e6:	197a      	adds	r2, r7, r5
 80085e8:	21c4      	movs	r1, #196	; 0xc4
 80085ea:	5254      	strh	r4, [r2, r1]
 80085ec:	0019      	movs	r1, r3
 80085ee:	b2c2      	uxtb	r2, r0
 80085f0:	002c      	movs	r4, r5
 80085f2:	193b      	adds	r3, r7, r4
 80085f4:	185b      	adds	r3, r3, r1
 80085f6:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 16);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	1418      	asrs	r0, r3, #16
 80085fc:	0025      	movs	r5, r4
 80085fe:	197b      	adds	r3, r7, r5
 8008600:	22c4      	movs	r2, #196	; 0xc4
 8008602:	5a9b      	ldrh	r3, [r3, r2]
 8008604:	1c5a      	adds	r2, r3, #1
 8008606:	b294      	uxth	r4, r2
 8008608:	197a      	adds	r2, r7, r5
 800860a:	21c4      	movs	r1, #196	; 0xc4
 800860c:	5254      	strh	r4, [r2, r1]
 800860e:	0019      	movs	r1, r3
 8008610:	b2c2      	uxtb	r2, r0
 8008612:	002c      	movs	r4, r5
 8008614:	193b      	adds	r3, r7, r4
 8008616:	185b      	adds	r3, r3, r1
 8008618:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 24);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	1618      	asrs	r0, r3, #24
 800861e:	0025      	movs	r5, r4
 8008620:	197b      	adds	r3, r7, r5
 8008622:	22c4      	movs	r2, #196	; 0xc4
 8008624:	5a9b      	ldrh	r3, [r3, r2]
 8008626:	1c5a      	adds	r2, r3, #1
 8008628:	b294      	uxth	r4, r2
 800862a:	197a      	adds	r2, r7, r5
 800862c:	21c4      	movs	r1, #196	; 0xc4
 800862e:	5254      	strh	r4, [r2, r1]
 8008630:	0019      	movs	r1, r3
 8008632:	b2c2      	uxtb	r2, r0
 8008634:	002c      	movs	r4, r5
 8008636:	193b      	adds	r3, r7, r4
 8008638:	185b      	adds	r3, r3, r1
 800863a:	705a      	strb	r2, [r3, #1]

    request.p_payload[request.payload_len++] = (uint8_t) longitude;
 800863c:	193b      	adds	r3, r7, r4
 800863e:	22c4      	movs	r2, #196	; 0xc4
 8008640:	5a9b      	ldrh	r3, [r3, r2]
 8008642:	1c5a      	adds	r2, r3, #1
 8008644:	b290      	uxth	r0, r2
 8008646:	193a      	adds	r2, r7, r4
 8008648:	21c4      	movs	r1, #196	; 0xc4
 800864a:	5250      	strh	r0, [r2, r1]
 800864c:	0019      	movs	r1, r3
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	b2da      	uxtb	r2, r3
 8008652:	193b      	adds	r3, r7, r4
 8008654:	185b      	adds	r3, r3, r1
 8008656:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 8);
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	1218      	asrs	r0, r3, #8
 800865c:	0025      	movs	r5, r4
 800865e:	197b      	adds	r3, r7, r5
 8008660:	22c4      	movs	r2, #196	; 0xc4
 8008662:	5a9b      	ldrh	r3, [r3, r2]
 8008664:	1c5a      	adds	r2, r3, #1
 8008666:	b294      	uxth	r4, r2
 8008668:	197a      	adds	r2, r7, r5
 800866a:	21c4      	movs	r1, #196	; 0xc4
 800866c:	5254      	strh	r4, [r2, r1]
 800866e:	0019      	movs	r1, r3
 8008670:	b2c2      	uxtb	r2, r0
 8008672:	002c      	movs	r4, r5
 8008674:	193b      	adds	r3, r7, r4
 8008676:	185b      	adds	r3, r3, r1
 8008678:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 16);
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	1418      	asrs	r0, r3, #16
 800867e:	0025      	movs	r5, r4
 8008680:	197b      	adds	r3, r7, r5
 8008682:	22c4      	movs	r2, #196	; 0xc4
 8008684:	5a9b      	ldrh	r3, [r3, r2]
 8008686:	1c5a      	adds	r2, r3, #1
 8008688:	b294      	uxth	r4, r2
 800868a:	197a      	adds	r2, r7, r5
 800868c:	21c4      	movs	r1, #196	; 0xc4
 800868e:	5254      	strh	r4, [r2, r1]
 8008690:	0019      	movs	r1, r3
 8008692:	b2c2      	uxtb	r2, r0
 8008694:	002c      	movs	r4, r5
 8008696:	193b      	adds	r3, r7, r4
 8008698:	185b      	adds	r3, r3, r1
 800869a:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 24);
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	1618      	asrs	r0, r3, #24
 80086a0:	0025      	movs	r5, r4
 80086a2:	197b      	adds	r3, r7, r5
 80086a4:	22c4      	movs	r2, #196	; 0xc4
 80086a6:	5a9b      	ldrh	r3, [r3, r2]
 80086a8:	1c5a      	adds	r2, r3, #1
 80086aa:	b294      	uxth	r4, r2
 80086ac:	197a      	adds	r2, r7, r5
 80086ae:	21c4      	movs	r1, #196	; 0xc4
 80086b0:	5254      	strh	r4, [r2, r1]
 80086b2:	0019      	movs	r1, r3
 80086b4:	b2c2      	uxtb	r2, r0
 80086b6:	0028      	movs	r0, r5
 80086b8:	183b      	adds	r3, r7, r0
 80086ba:	185b      	adds	r3, r3, r1
 80086bc:	705a      	strb	r2, [r3, #1]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80086be:	2308      	movs	r3, #8
 80086c0:	18fa      	adds	r2, r7, r3
 80086c2:	183b      	adds	r3, r7, r0
 80086c4:	0011      	movs	r1, r2
 80086c6:	0018      	movs	r0, r3
 80086c8:	f000 ff10 	bl	80094ec <astronode_transport_send_receive>
 80086cc:	0003      	movs	r3, r0
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d10e      	bne.n	80086f0 <astronode_send_geo_wr+0x16c>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_GEO_WA)
 80086d2:	4b09      	ldr	r3, [pc, #36]	; (80086f8 <astronode_send_geo_wr+0x174>)
 80086d4:	199b      	adds	r3, r3, r6
 80086d6:	19db      	adds	r3, r3, r7
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	2bb5      	cmp	r3, #181	; 0xb5
 80086dc:	d104      	bne.n	80086e8 <astronode_send_geo_wr+0x164>
        {
            send_debug_logs("Geolocation values were set successfully.");
 80086de:	4b07      	ldr	r3, [pc, #28]	; (80086fc <astronode_send_geo_wr+0x178>)
 80086e0:	0018      	movs	r0, r3
 80086e2:	f7fa fce9 	bl	80030b8 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the geolocation information.");
        }
    }
}
 80086e6:	e003      	b.n	80086f0 <astronode_send_geo_wr+0x16c>
            send_debug_logs("Failed to set the geolocation information.");
 80086e8:	4b05      	ldr	r3, [pc, #20]	; (8008700 <astronode_send_geo_wr+0x17c>)
 80086ea:	0018      	movs	r0, r3
 80086ec:	f7fa fce4 	bl	80030b8 <send_debug_logs>
}
 80086f0:	46c0      	nop			; (mov r8, r8)
 80086f2:	46bd      	mov	sp, r7
 80086f4:	b067      	add	sp, #412	; 0x19c
 80086f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086f8:	fffffe70 	.word	0xfffffe70
 80086fc:	08013c88 	.word	0x08013c88
 8008700:	08013cb4 	.word	0x08013cb4

08008704 <astronode_send_pld_er>:
        }
    }
}

bool astronode_send_pld_er ( uint16_t payload_id , char *p_payload , uint16_t payload_length )
{
 8008704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008706:	b0fb      	sub	sp, #492	; 0x1ec
 8008708:	af00      	add	r7, sp, #0
 800870a:	6039      	str	r1, [r7, #0]
 800870c:	0011      	movs	r1, r2
 800870e:	4b4a      	ldr	r3, [pc, #296]	; (8008838 <astronode_send_pld_er+0x134>)
 8008710:	26f4      	movs	r6, #244	; 0xf4
 8008712:	0076      	lsls	r6, r6, #1
 8008714:	199b      	adds	r3, r3, r6
 8008716:	19db      	adds	r3, r3, r7
 8008718:	1c02      	adds	r2, r0, #0
 800871a:	801a      	strh	r2, [r3, #0]
 800871c:	4b47      	ldr	r3, [pc, #284]	; (800883c <astronode_send_pld_er+0x138>)
 800871e:	199b      	adds	r3, r3, r6
 8008720:	19db      	adds	r3, r3, r7
 8008722:	1c0a      	adds	r2, r1, #0
 8008724:	801a      	strh	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8008726:	2490      	movs	r4, #144	; 0x90
 8008728:	0064      	lsls	r4, r4, #1
 800872a:	193b      	adds	r3, r7, r4
 800872c:	0018      	movs	r0, r3
 800872e:	23c6      	movs	r3, #198	; 0xc6
 8008730:	001a      	movs	r2, r3
 8008732:	2100      	movs	r1, #0
 8008734:	f004 f892 	bl	800c85c <memset>
    astronode_app_msg_t answer = {0};
 8008738:	4b41      	ldr	r3, [pc, #260]	; (8008840 <astronode_send_pld_er+0x13c>)
 800873a:	199b      	adds	r3, r3, r6
 800873c:	19db      	adds	r3, r3, r7
 800873e:	0018      	movs	r0, r3
 8008740:	23c6      	movs	r3, #198	; 0xc6
 8008742:	001a      	movs	r2, r3
 8008744:	2100      	movs	r1, #0
 8008746:	f004 f889 	bl	800c85c <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_ER;
 800874a:	193b      	adds	r3, r7, r4
 800874c:	2225      	movs	r2, #37	; 0x25
 800874e:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) payload_id;
 8008750:	193b      	adds	r3, r7, r4
 8008752:	22c4      	movs	r2, #196	; 0xc4
 8008754:	5a9b      	ldrh	r3, [r3, r2]
 8008756:	1c5a      	adds	r2, r3, #1
 8008758:	b290      	uxth	r0, r2
 800875a:	193a      	adds	r2, r7, r4
 800875c:	21c4      	movs	r1, #196	; 0xc4
 800875e:	5250      	strh	r0, [r2, r1]
 8008760:	0019      	movs	r1, r3
 8008762:	4b35      	ldr	r3, [pc, #212]	; (8008838 <astronode_send_pld_er+0x134>)
 8008764:	199b      	adds	r3, r3, r6
 8008766:	19db      	adds	r3, r3, r7
 8008768:	881b      	ldrh	r3, [r3, #0]
 800876a:	b2da      	uxtb	r2, r3
 800876c:	193b      	adds	r3, r7, r4
 800876e:	185b      	adds	r3, r3, r1
 8008770:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (payload_id >> 8);
 8008772:	4b31      	ldr	r3, [pc, #196]	; (8008838 <astronode_send_pld_er+0x134>)
 8008774:	199b      	adds	r3, r3, r6
 8008776:	19db      	adds	r3, r3, r7
 8008778:	881b      	ldrh	r3, [r3, #0]
 800877a:	0a1b      	lsrs	r3, r3, #8
 800877c:	b298      	uxth	r0, r3
 800877e:	0025      	movs	r5, r4
 8008780:	197b      	adds	r3, r7, r5
 8008782:	22c4      	movs	r2, #196	; 0xc4
 8008784:	5a9b      	ldrh	r3, [r3, r2]
 8008786:	1c5a      	adds	r2, r3, #1
 8008788:	b294      	uxth	r4, r2
 800878a:	197a      	adds	r2, r7, r5
 800878c:	21c4      	movs	r1, #196	; 0xc4
 800878e:	5254      	strh	r4, [r2, r1]
 8008790:	0019      	movs	r1, r3
 8008792:	b2c2      	uxtb	r2, r0
 8008794:	002c      	movs	r4, r5
 8008796:	193b      	adds	r3, r7, r4
 8008798:	185b      	adds	r3, r3, r1
 800879a:	705a      	strb	r2, [r3, #1]

    memcpy(&request.p_payload[request.payload_len], p_payload, payload_length);
 800879c:	193b      	adds	r3, r7, r4
 800879e:	22c4      	movs	r2, #196	; 0xc4
 80087a0:	5a9b      	ldrh	r3, [r3, r2]
 80087a2:	001a      	movs	r2, r3
 80087a4:	193b      	adds	r3, r7, r4
 80087a6:	189b      	adds	r3, r3, r2
 80087a8:	1c58      	adds	r0, r3, #1
 80087aa:	4b24      	ldr	r3, [pc, #144]	; (800883c <astronode_send_pld_er+0x138>)
 80087ac:	199b      	adds	r3, r3, r6
 80087ae:	19db      	adds	r3, r3, r7
 80087b0:	881a      	ldrh	r2, [r3, #0]
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	0019      	movs	r1, r3
 80087b6:	f004 f936 	bl	800ca26 <memcpy>
    request.payload_len = 2 + payload_length;
 80087ba:	4b20      	ldr	r3, [pc, #128]	; (800883c <astronode_send_pld_er+0x138>)
 80087bc:	199b      	adds	r3, r3, r6
 80087be:	19db      	adds	r3, r3, r7
 80087c0:	881b      	ldrh	r3, [r3, #0]
 80087c2:	3302      	adds	r3, #2
 80087c4:	b299      	uxth	r1, r3
 80087c6:	193b      	adds	r3, r7, r4
 80087c8:	22c4      	movs	r2, #196	; 0xc4
 80087ca:	5299      	strh	r1, [r3, r2]
    char s[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 80087cc:	2358      	movs	r3, #88	; 0x58
 80087ce:	18fa      	adds	r2, r7, r3
 80087d0:	193b      	adds	r3, r7, r4
 80087d2:	0011      	movs	r1, r2
 80087d4:	0018      	movs	r0, r3
 80087d6:	f000 fe89 	bl	80094ec <astronode_transport_send_receive>
 80087da:	0003      	movs	r3, r0
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d125      	bne.n	800882c <astronode_send_pld_er+0x128>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_EA)
 80087e0:	4b17      	ldr	r3, [pc, #92]	; (8008840 <astronode_send_pld_er+0x13c>)
 80087e2:	199b      	adds	r3, r3, r6
 80087e4:	19db      	adds	r3, r3, r7
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	2ba5      	cmp	r3, #165	; 0xa5
 80087ea:	d10f      	bne.n	800880c <astronode_send_pld_er+0x108>
        {
        	sprintf ( s , "astronode_application: payload %d queued." , payload_id ) ;
 80087ec:	4b12      	ldr	r3, [pc, #72]	; (8008838 <astronode_send_pld_er+0x134>)
 80087ee:	199b      	adds	r3, r3, r6
 80087f0:	19db      	adds	r3, r3, r7
 80087f2:	881a      	ldrh	r2, [r3, #0]
 80087f4:	4913      	ldr	r1, [pc, #76]	; (8008844 <astronode_send_pld_er+0x140>)
 80087f6:	2408      	movs	r4, #8
 80087f8:	193b      	adds	r3, r7, r4
 80087fa:	0018      	movs	r0, r3
 80087fc:	f003 ff98 	bl	800c730 <sprintf>
            send_debug_logs ( s ) ;
 8008800:	193b      	adds	r3, r7, r4
 8008802:	0018      	movs	r0, r3
 8008804:	f7fa fc58 	bl	80030b8 <send_debug_logs>
            return true ;
 8008808:	2301      	movs	r3, #1
 800880a:	e010      	b.n	800882e <astronode_send_pld_er+0x12a>
        }
        else
        {
            sprintf ( s , "astronode_application: payload %d not queued." , payload_id ) ;
 800880c:	4b0a      	ldr	r3, [pc, #40]	; (8008838 <astronode_send_pld_er+0x134>)
 800880e:	22f4      	movs	r2, #244	; 0xf4
 8008810:	0052      	lsls	r2, r2, #1
 8008812:	189b      	adds	r3, r3, r2
 8008814:	19db      	adds	r3, r3, r7
 8008816:	881a      	ldrh	r2, [r3, #0]
 8008818:	490b      	ldr	r1, [pc, #44]	; (8008848 <astronode_send_pld_er+0x144>)
 800881a:	2408      	movs	r4, #8
 800881c:	193b      	adds	r3, r7, r4
 800881e:	0018      	movs	r0, r3
 8008820:	f003 ff86 	bl	800c730 <sprintf>
            send_debug_logs ( s ) ;
 8008824:	193b      	adds	r3, r7, r4
 8008826:	0018      	movs	r0, r3
 8008828:	f7fa fc46 	bl	80030b8 <send_debug_logs>
        }
    }
    return false ;
 800882c:	2300      	movs	r3, #0
}
 800882e:	0018      	movs	r0, r3
 8008830:	46bd      	mov	sp, r7
 8008832:	b07b      	add	sp, #492	; 0x1ec
 8008834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008836:	46c0      	nop			; (mov r8, r8)
 8008838:	fffffe1e 	.word	0xfffffe1e
 800883c:	fffffe1c 	.word	0xfffffe1c
 8008840:	fffffe70 	.word	0xfffffe70
 8008844:	08013d2c 	.word	0x08013d2c
 8008848:	08013d58 	.word	0x08013d58

0800884c <astronode_send_pld_fr>:

void astronode_send_pld_fr(void)
{
 800884c:	b5b0      	push	{r4, r5, r7, lr}
 800884e:	b0e4      	sub	sp, #400	; 0x190
 8008850:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008852:	24c8      	movs	r4, #200	; 0xc8
 8008854:	193b      	adds	r3, r7, r4
 8008856:	0018      	movs	r0, r3
 8008858:	23c6      	movs	r3, #198	; 0xc6
 800885a:	001a      	movs	r2, r3
 800885c:	2100      	movs	r1, #0
 800885e:	f003 fffd 	bl	800c85c <memset>
    astronode_app_msg_t answer = {0};
 8008862:	4b15      	ldr	r3, [pc, #84]	; (80088b8 <astronode_send_pld_fr+0x6c>)
 8008864:	25c8      	movs	r5, #200	; 0xc8
 8008866:	006d      	lsls	r5, r5, #1
 8008868:	195b      	adds	r3, r3, r5
 800886a:	19db      	adds	r3, r3, r7
 800886c:	0018      	movs	r0, r3
 800886e:	23c6      	movs	r3, #198	; 0xc6
 8008870:	001a      	movs	r2, r3
 8008872:	2100      	movs	r1, #0
 8008874:	f003 fff2 	bl	800c85c <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_FR;
 8008878:	193b      	adds	r3, r7, r4
 800887a:	2227      	movs	r2, #39	; 0x27
 800887c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800887e:	003a      	movs	r2, r7
 8008880:	193b      	adds	r3, r7, r4
 8008882:	0011      	movs	r1, r2
 8008884:	0018      	movs	r0, r3
 8008886:	f000 fe31 	bl	80094ec <astronode_transport_send_receive>
 800888a:	0003      	movs	r3, r0
 800888c:	2b01      	cmp	r3, #1
 800888e:	d10e      	bne.n	80088ae <astronode_send_pld_fr+0x62>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_FA)
 8008890:	4b09      	ldr	r3, [pc, #36]	; (80088b8 <astronode_send_pld_fr+0x6c>)
 8008892:	195b      	adds	r3, r3, r5
 8008894:	19db      	adds	r3, r3, r7
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	2ba7      	cmp	r3, #167	; 0xa7
 800889a:	d104      	bne.n	80088a6 <astronode_send_pld_fr+0x5a>
        {
            send_debug_logs("astronode_application: payload queue has been cleared.");
 800889c:	4b07      	ldr	r3, [pc, #28]	; (80088bc <astronode_send_pld_fr+0x70>)
 800889e:	0018      	movs	r0, r3
 80088a0:	f7fa fc0a 	bl	80030b8 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
        }
    }
}
 80088a4:	e003      	b.n	80088ae <astronode_send_pld_fr+0x62>
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
 80088a6:	4b06      	ldr	r3, [pc, #24]	; (80088c0 <astronode_send_pld_fr+0x74>)
 80088a8:	0018      	movs	r0, r3
 80088aa:	f7fa fc05 	bl	80030b8 <send_debug_logs>
}
 80088ae:	46c0      	nop			; (mov r8, r8)
 80088b0:	46bd      	mov	sp, r7
 80088b2:	b064      	add	sp, #400	; 0x190
 80088b4:	bdb0      	pop	{r4, r5, r7, pc}
 80088b6:	46c0      	nop			; (mov r8, r8)
 80088b8:	fffffe70 	.word	0xfffffe70
 80088bc:	08013d88 	.word	0x08013d88
 80088c0:	08013dc0 	.word	0x08013dc0

080088c4 <astronode_send_res_cr>:

void astronode_send_res_cr(void)
{
 80088c4:	b5b0      	push	{r4, r5, r7, lr}
 80088c6:	b0e4      	sub	sp, #400	; 0x190
 80088c8:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80088ca:	24c8      	movs	r4, #200	; 0xc8
 80088cc:	193b      	adds	r3, r7, r4
 80088ce:	0018      	movs	r0, r3
 80088d0:	23c6      	movs	r3, #198	; 0xc6
 80088d2:	001a      	movs	r2, r3
 80088d4:	2100      	movs	r1, #0
 80088d6:	f003 ffc1 	bl	800c85c <memset>
    astronode_app_msg_t answer = {0};
 80088da:	4b16      	ldr	r3, [pc, #88]	; (8008934 <astronode_send_res_cr+0x70>)
 80088dc:	25c8      	movs	r5, #200	; 0xc8
 80088de:	006d      	lsls	r5, r5, #1
 80088e0:	195b      	adds	r3, r3, r5
 80088e2:	19db      	adds	r3, r3, r7
 80088e4:	0018      	movs	r0, r3
 80088e6:	23c6      	movs	r3, #198	; 0xc6
 80088e8:	001a      	movs	r2, r3
 80088ea:	2100      	movs	r1, #0
 80088ec:	f003 ffb6 	bl	800c85c <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 80088f0:	193b      	adds	r3, r7, r4
 80088f2:	2255      	movs	r2, #85	; 0x55
 80088f4:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80088f6:	003a      	movs	r2, r7
 80088f8:	193b      	adds	r3, r7, r4
 80088fa:	0011      	movs	r1, r2
 80088fc:	0018      	movs	r0, r3
 80088fe:	f000 fdf5 	bl	80094ec <astronode_transport_send_receive>
 8008902:	0003      	movs	r3, r0
 8008904:	2b01      	cmp	r3, #1
 8008906:	d111      	bne.n	800892c <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 8008908:	4b0a      	ldr	r3, [pc, #40]	; (8008934 <astronode_send_res_cr+0x70>)
 800890a:	195b      	adds	r3, r3, r5
 800890c:	19db      	adds	r3, r3, r7
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	2bd5      	cmp	r3, #213	; 0xd5
 8008912:	d107      	bne.n	8008924 <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 8008914:	4b08      	ldr	r3, [pc, #32]	; (8008938 <astronode_send_res_cr+0x74>)
 8008916:	2200      	movs	r2, #0
 8008918:	701a      	strb	r2, [r3, #0]
            send_debug_logs("astronode_application: The reset has been cleared.");
 800891a:	4b08      	ldr	r3, [pc, #32]	; (800893c <astronode_send_res_cr+0x78>)
 800891c:	0018      	movs	r0, r3
 800891e:	f7fa fbcb 	bl	80030b8 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No reset to clear.");
        }
    }
}
 8008922:	e003      	b.n	800892c <astronode_send_res_cr+0x68>
            send_debug_logs("astronode_application: No reset to clear.");
 8008924:	4b06      	ldr	r3, [pc, #24]	; (8008940 <astronode_send_res_cr+0x7c>)
 8008926:	0018      	movs	r0, r3
 8008928:	f7fa fbc6 	bl	80030b8 <send_debug_logs>
}
 800892c:	46c0      	nop			; (mov r8, r8)
 800892e:	46bd      	mov	sp, r7
 8008930:	b064      	add	sp, #400	; 0x190
 8008932:	bdb0      	pop	{r4, r5, r7, pc}
 8008934:	fffffe70 	.word	0xfffffe70
 8008938:	20000bbd 	.word	0x20000bbd
 800893c:	08013dfc 	.word	0x08013dfc
 8008940:	08013e30 	.word	0x08013e30

08008944 <astronode_send_rtc_rr>:

uint32_t astronode_send_rtc_rr ( void )
{
 8008944:	b5b0      	push	{r4, r5, r7, lr}
 8008946:	b0fa      	sub	sp, #488	; 0x1e8
 8008948:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0} ;
 800894a:	258e      	movs	r5, #142	; 0x8e
 800894c:	006d      	lsls	r5, r5, #1
 800894e:	197b      	adds	r3, r7, r5
 8008950:	0018      	movs	r0, r3
 8008952:	23c6      	movs	r3, #198	; 0xc6
 8008954:	001a      	movs	r2, r3
 8008956:	2100      	movs	r1, #0
 8008958:	f003 ff80 	bl	800c85c <memset>
    astronode_app_msg_t answer = {0} ;
 800895c:	4b28      	ldr	r3, [pc, #160]	; (8008a00 <astronode_send_rtc_rr+0xbc>)
 800895e:	24f4      	movs	r4, #244	; 0xf4
 8008960:	0064      	lsls	r4, r4, #1
 8008962:	191b      	adds	r3, r3, r4
 8008964:	19db      	adds	r3, r3, r7
 8008966:	0018      	movs	r0, r3
 8008968:	23c6      	movs	r3, #198	; 0xc6
 800896a:	001a      	movs	r2, r3
 800896c:	2100      	movs	r1, #0
 800896e:	f003 ff75 	bl	800c85c <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR ;
 8008972:	197b      	adds	r3, r7, r5
 8008974:	2217      	movs	r2, #23
 8008976:	701a      	strb	r2, [r3, #0]

    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 8008978:	2354      	movs	r3, #84	; 0x54
 800897a:	18fa      	adds	r2, r7, r3
 800897c:	197b      	adds	r3, r7, r5
 800897e:	0011      	movs	r1, r2
 8008980:	0018      	movs	r0, r3
 8008982:	f000 fdb3 	bl	80094ec <astronode_transport_send_receive>
 8008986:	0003      	movs	r3, r0
 8008988:	2b01      	cmp	r3, #1
 800898a:	d133      	bne.n	80089f4 <astronode_send_rtc_rr+0xb0>
    {
        if ( answer.op_code == ASTRONODE_OP_CODE_RTC_RA )
 800898c:	4b1c      	ldr	r3, [pc, #112]	; (8008a00 <astronode_send_rtc_rr+0xbc>)
 800898e:	0021      	movs	r1, r4
 8008990:	185b      	adds	r3, r3, r1
 8008992:	19db      	adds	r3, r3, r7
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	2b97      	cmp	r3, #151	; 0x97
 8008998:	d128      	bne.n	80089ec <astronode_send_rtc_rr+0xa8>
        {
            uint32_t rtc_time = answer.p_payload[0]
 800899a:	4b19      	ldr	r3, [pc, #100]	; (8008a00 <astronode_send_rtc_rr+0xbc>)
 800899c:	185b      	adds	r3, r3, r1
 800899e:	19db      	adds	r3, r3, r7
 80089a0:	785b      	ldrb	r3, [r3, #1]
 80089a2:	001a      	movs	r2, r3
                                        + ( answer.p_payload[1] << 8 )
 80089a4:	4b16      	ldr	r3, [pc, #88]	; (8008a00 <astronode_send_rtc_rr+0xbc>)
 80089a6:	185b      	adds	r3, r3, r1
 80089a8:	19db      	adds	r3, r3, r7
 80089aa:	789b      	ldrb	r3, [r3, #2]
 80089ac:	021b      	lsls	r3, r3, #8
 80089ae:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[2] << 16 )
 80089b0:	4b13      	ldr	r3, [pc, #76]	; (8008a00 <astronode_send_rtc_rr+0xbc>)
 80089b2:	185b      	adds	r3, r3, r1
 80089b4:	19db      	adds	r3, r3, r7
 80089b6:	78db      	ldrb	r3, [r3, #3]
 80089b8:	041b      	lsls	r3, r3, #16
 80089ba:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[3] << 24 ) ;
 80089bc:	4b10      	ldr	r3, [pc, #64]	; (8008a00 <astronode_send_rtc_rr+0xbc>)
 80089be:	185b      	adds	r3, r3, r1
 80089c0:	19db      	adds	r3, r3, r7
 80089c2:	791b      	ldrb	r3, [r3, #4]
 80089c4:	061b      	lsls	r3, r3, #24
 80089c6:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 80089c8:	24f2      	movs	r4, #242	; 0xf2
 80089ca:	0064      	lsls	r4, r4, #1
 80089cc:	193a      	adds	r2, r7, r4
 80089ce:	6013      	str	r3, [r2, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
            sprintf ( str , "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds." , rtc_time ) ;
 80089d0:	193b      	adds	r3, r7, r4
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	490b      	ldr	r1, [pc, #44]	; (8008a04 <astronode_send_rtc_rr+0xc0>)
 80089d6:	1d3b      	adds	r3, r7, #4
 80089d8:	0018      	movs	r0, r3
 80089da:	f003 fea9 	bl	800c730 <sprintf>
            send_debug_logs ( str ) ;
 80089de:	1d3b      	adds	r3, r7, #4
 80089e0:	0018      	movs	r0, r3
 80089e2:	f7fa fb69 	bl	80030b8 <send_debug_logs>
            return rtc_time ;
 80089e6:	193b      	adds	r3, r7, r4
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	e004      	b.n	80089f6 <astronode_send_rtc_rr+0xb2>
        }
        else
        {
            send_debug_logs ( "Failed to read rtc time." ) ;
 80089ec:	4b06      	ldr	r3, [pc, #24]	; (8008a08 <astronode_send_rtc_rr+0xc4>)
 80089ee:	0018      	movs	r0, r3
 80089f0:	f7fa fb62 	bl	80030b8 <send_debug_logs>
        }
    }
    return 0 ;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	0018      	movs	r0, r3
 80089f8:	46bd      	mov	sp, r7
 80089fa:	b07a      	add	sp, #488	; 0x1e8
 80089fc:	bdb0      	pop	{r4, r5, r7, pc}
 80089fe:	46c0      	nop			; (mov r8, r8)
 8008a00:	fffffe6c 	.word	0xfffffe6c
 8008a04:	08013e5c 	.word	0x08013e5c
 8008a08:	08013e9c 	.word	0x08013e9c

08008a0c <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 8008a0c:	b5b0      	push	{r4, r5, r7, lr}
 8008a0e:	b0f8      	sub	sp, #480	; 0x1e0
 8008a10:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008a12:	258c      	movs	r5, #140	; 0x8c
 8008a14:	006d      	lsls	r5, r5, #1
 8008a16:	197b      	adds	r3, r7, r5
 8008a18:	0018      	movs	r0, r3
 8008a1a:	23c6      	movs	r3, #198	; 0xc6
 8008a1c:	001a      	movs	r2, r3
 8008a1e:	2100      	movs	r1, #0
 8008a20:	f003 ff1c 	bl	800c85c <memset>
    astronode_app_msg_t answer = {0};
 8008a24:	4b21      	ldr	r3, [pc, #132]	; (8008aac <astronode_send_sak_rr+0xa0>)
 8008a26:	24f0      	movs	r4, #240	; 0xf0
 8008a28:	0064      	lsls	r4, r4, #1
 8008a2a:	191b      	adds	r3, r3, r4
 8008a2c:	19db      	adds	r3, r3, r7
 8008a2e:	0018      	movs	r0, r3
 8008a30:	23c6      	movs	r3, #198	; 0xc6
 8008a32:	001a      	movs	r2, r3
 8008a34:	2100      	movs	r1, #0
 8008a36:	f003 ff11 	bl	800c85c <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 8008a3a:	197b      	adds	r3, r7, r5
 8008a3c:	2245      	movs	r2, #69	; 0x45
 8008a3e:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008a40:	2350      	movs	r3, #80	; 0x50
 8008a42:	18fa      	adds	r2, r7, r3
 8008a44:	197b      	adds	r3, r7, r5
 8008a46:	0011      	movs	r1, r2
 8008a48:	0018      	movs	r0, r3
 8008a4a:	f000 fd4f 	bl	80094ec <astronode_transport_send_receive>
 8008a4e:	0003      	movs	r3, r0
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d126      	bne.n	8008aa2 <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 8008a54:	4b15      	ldr	r3, [pc, #84]	; (8008aac <astronode_send_sak_rr+0xa0>)
 8008a56:	191b      	adds	r3, r3, r4
 8008a58:	19db      	adds	r3, r3, r7
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	2bc5      	cmp	r3, #197	; 0xc5
 8008a5e:	d11c      	bne.n	8008a9a <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 8008a60:	4b12      	ldr	r3, [pc, #72]	; (8008aac <astronode_send_sak_rr+0xa0>)
 8008a62:	191b      	adds	r3, r3, r4
 8008a64:	19db      	adds	r3, r3, r7
 8008a66:	785b      	ldrb	r3, [r3, #1]
 8008a68:	b299      	uxth	r1, r3
 8008a6a:	4b10      	ldr	r3, [pc, #64]	; (8008aac <astronode_send_sak_rr+0xa0>)
 8008a6c:	191b      	adds	r3, r3, r4
 8008a6e:	19db      	adds	r3, r3, r7
 8008a70:	789b      	ldrb	r3, [r3, #2]
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	021b      	lsls	r3, r3, #8
 8008a76:	b29a      	uxth	r2, r3
 8008a78:	20ef      	movs	r0, #239	; 0xef
 8008a7a:	0040      	lsls	r0, r0, #1
 8008a7c:	183b      	adds	r3, r7, r0
 8008a7e:	188a      	adds	r2, r1, r2
 8008a80:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 8008a82:	183b      	adds	r3, r7, r0
 8008a84:	881a      	ldrh	r2, [r3, #0]
 8008a86:	490a      	ldr	r1, [pc, #40]	; (8008ab0 <astronode_send_sak_rr+0xa4>)
 8008a88:	003b      	movs	r3, r7
 8008a8a:	0018      	movs	r0, r3
 8008a8c:	f003 fe50 	bl	800c730 <sprintf>
            send_debug_logs(str);
 8008a90:	003b      	movs	r3, r7
 8008a92:	0018      	movs	r0, r3
 8008a94:	f7fa fb10 	bl	80030b8 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No acknowledgment available.");
        }
    }
}
 8008a98:	e003      	b.n	8008aa2 <astronode_send_sak_rr+0x96>
            send_debug_logs("astronode_application: No acknowledgment available.");
 8008a9a:	4b06      	ldr	r3, [pc, #24]	; (8008ab4 <astronode_send_sak_rr+0xa8>)
 8008a9c:	0018      	movs	r0, r3
 8008a9e:	f7fa fb0b 	bl	80030b8 <send_debug_logs>
}
 8008aa2:	46c0      	nop			; (mov r8, r8)
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	b078      	add	sp, #480	; 0x1e0
 8008aa8:	bdb0      	pop	{r4, r5, r7, pc}
 8008aaa:	46c0      	nop			; (mov r8, r8)
 8008aac:	fffffe70 	.word	0xfffffe70
 8008ab0:	08013eb8 	.word	0x08013eb8
 8008ab4:	08013ee4 	.word	0x08013ee4

08008ab8 <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 8008ab8:	b5b0      	push	{r4, r5, r7, lr}
 8008aba:	b0e4      	sub	sp, #400	; 0x190
 8008abc:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008abe:	24c8      	movs	r4, #200	; 0xc8
 8008ac0:	193b      	adds	r3, r7, r4
 8008ac2:	0018      	movs	r0, r3
 8008ac4:	23c6      	movs	r3, #198	; 0xc6
 8008ac6:	001a      	movs	r2, r3
 8008ac8:	2100      	movs	r1, #0
 8008aca:	f003 fec7 	bl	800c85c <memset>
    astronode_app_msg_t answer = {0};
 8008ace:	4b16      	ldr	r3, [pc, #88]	; (8008b28 <astronode_send_sak_cr+0x70>)
 8008ad0:	25c8      	movs	r5, #200	; 0xc8
 8008ad2:	006d      	lsls	r5, r5, #1
 8008ad4:	195b      	adds	r3, r3, r5
 8008ad6:	19db      	adds	r3, r3, r7
 8008ad8:	0018      	movs	r0, r3
 8008ada:	23c6      	movs	r3, #198	; 0xc6
 8008adc:	001a      	movs	r2, r3
 8008ade:	2100      	movs	r1, #0
 8008ae0:	f003 febc 	bl	800c85c <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 8008ae4:	193b      	adds	r3, r7, r4
 8008ae6:	2246      	movs	r2, #70	; 0x46
 8008ae8:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008aea:	003a      	movs	r2, r7
 8008aec:	193b      	adds	r3, r7, r4
 8008aee:	0011      	movs	r1, r2
 8008af0:	0018      	movs	r0, r3
 8008af2:	f000 fcfb 	bl	80094ec <astronode_transport_send_receive>
 8008af6:	0003      	movs	r3, r0
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d111      	bne.n	8008b20 <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 8008afc:	4b0a      	ldr	r3, [pc, #40]	; (8008b28 <astronode_send_sak_cr+0x70>)
 8008afe:	195b      	adds	r3, r3, r5
 8008b00:	19db      	adds	r3, r3, r7
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	2bc6      	cmp	r3, #198	; 0xc6
 8008b06:	d107      	bne.n	8008b18 <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 8008b08:	4b08      	ldr	r3, [pc, #32]	; (8008b2c <astronode_send_sak_cr+0x74>)
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 8008b0e:	4b08      	ldr	r3, [pc, #32]	; (8008b30 <astronode_send_sak_cr+0x78>)
 8008b10:	0018      	movs	r0, r3
 8008b12:	f7fa fad1 	bl	80030b8 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 8008b16:	e003      	b.n	8008b20 <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 8008b18:	4b06      	ldr	r3, [pc, #24]	; (8008b34 <astronode_send_sak_cr+0x7c>)
 8008b1a:	0018      	movs	r0, r3
 8008b1c:	f7fa facc 	bl	80030b8 <send_debug_logs>
}
 8008b20:	46c0      	nop			; (mov r8, r8)
 8008b22:	46bd      	mov	sp, r7
 8008b24:	b064      	add	sp, #400	; 0x190
 8008b26:	bdb0      	pop	{r4, r5, r7, pc}
 8008b28:	fffffe70 	.word	0xfffffe70
 8008b2c:	20000bbc 	.word	0x20000bbc
 8008b30:	08013f18 	.word	0x08013f18
 8008b34:	08013f40 	.word	0x08013f40

08008b38 <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 8008b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b3a:	b0ed      	sub	sp, #436	; 0x1b4
 8008b3c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008b3e:	21c8      	movs	r1, #200	; 0xc8
 8008b40:	2318      	movs	r3, #24
 8008b42:	18cb      	adds	r3, r1, r3
 8008b44:	19db      	adds	r3, r3, r7
 8008b46:	0018      	movs	r0, r3
 8008b48:	23c6      	movs	r3, #198	; 0xc6
 8008b4a:	001a      	movs	r2, r3
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	f003 fe85 	bl	800c85c <memset>
    astronode_app_msg_t answer = {0};
 8008b52:	4b4a      	ldr	r3, [pc, #296]	; (8008c7c <astronode_send_mpn_rr+0x144>)
 8008b54:	26cc      	movs	r6, #204	; 0xcc
 8008b56:	0076      	lsls	r6, r6, #1
 8008b58:	199b      	adds	r3, r3, r6
 8008b5a:	2218      	movs	r2, #24
 8008b5c:	4694      	mov	ip, r2
 8008b5e:	44bc      	add	ip, r7
 8008b60:	4463      	add	r3, ip
 8008b62:	0018      	movs	r0, r3
 8008b64:	23c6      	movs	r3, #198	; 0xc6
 8008b66:	001a      	movs	r2, r3
 8008b68:	2100      	movs	r1, #0
 8008b6a:	f003 fe77 	bl	800c85c <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 8008b6e:	21c8      	movs	r1, #200	; 0xc8
 8008b70:	2318      	movs	r3, #24
 8008b72:	18cb      	adds	r3, r1, r3
 8008b74:	19db      	adds	r3, r3, r7
 8008b76:	221b      	movs	r2, #27
 8008b78:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008b7a:	2318      	movs	r3, #24
 8008b7c:	18fa      	adds	r2, r7, r3
 8008b7e:	2318      	movs	r3, #24
 8008b80:	18cb      	adds	r3, r1, r3
 8008b82:	19db      	adds	r3, r3, r7
 8008b84:	0011      	movs	r1, r2
 8008b86:	0018      	movs	r0, r3
 8008b88:	f000 fcb0 	bl	80094ec <astronode_transport_send_receive>
 8008b8c:	0003      	movs	r3, r0
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d16f      	bne.n	8008c72 <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 8008b92:	4b3a      	ldr	r3, [pc, #232]	; (8008c7c <astronode_send_mpn_rr+0x144>)
 8008b94:	0032      	movs	r2, r6
 8008b96:	189b      	adds	r3, r3, r2
 8008b98:	2118      	movs	r1, #24
 8008b9a:	468c      	mov	ip, r1
 8008b9c:	44bc      	add	ip, r7
 8008b9e:	4463      	add	r3, ip
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	2b9b      	cmp	r3, #155	; 0x9b
 8008ba4:	d161      	bne.n	8008c6a <astronode_send_mpn_rr+0x132>
        {
 8008ba6:	466b      	mov	r3, sp
 8008ba8:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 8008baa:	4b34      	ldr	r3, [pc, #208]	; (8008c7c <astronode_send_mpn_rr+0x144>)
 8008bac:	189b      	adds	r3, r3, r2
 8008bae:	2218      	movs	r2, #24
 8008bb0:	4694      	mov	ip, r2
 8008bb2:	44bc      	add	ip, r7
 8008bb4:	4463      	add	r3, ip
 8008bb6:	22c4      	movs	r2, #196	; 0xc4
 8008bb8:	5a9b      	ldrh	r3, [r3, r2]
 8008bba:	001a      	movs	r2, r3
 8008bbc:	3a01      	subs	r2, #1
 8008bbe:	21ca      	movs	r1, #202	; 0xca
 8008bc0:	0049      	lsls	r1, r1, #1
 8008bc2:	2018      	movs	r0, #24
 8008bc4:	1809      	adds	r1, r1, r0
 8008bc6:	19c9      	adds	r1, r1, r7
 8008bc8:	600a      	str	r2, [r1, #0]
 8008bca:	001c      	movs	r4, r3
 8008bcc:	2200      	movs	r2, #0
 8008bce:	0015      	movs	r5, r2
 8008bd0:	0020      	movs	r0, r4
 8008bd2:	0029      	movs	r1, r5
 8008bd4:	0004      	movs	r4, r0
 8008bd6:	0f62      	lsrs	r2, r4, #29
 8008bd8:	000c      	movs	r4, r1
 8008bda:	00e4      	lsls	r4, r4, #3
 8008bdc:	617c      	str	r4, [r7, #20]
 8008bde:	697c      	ldr	r4, [r7, #20]
 8008be0:	4314      	orrs	r4, r2
 8008be2:	617c      	str	r4, [r7, #20]
 8008be4:	0001      	movs	r1, r0
 8008be6:	00c9      	lsls	r1, r1, #3
 8008be8:	6139      	str	r1, [r7, #16]
 8008bea:	603b      	str	r3, [r7, #0]
 8008bec:	2200      	movs	r2, #0
 8008bee:	607a      	str	r2, [r7, #4]
 8008bf0:	6838      	ldr	r0, [r7, #0]
 8008bf2:	6879      	ldr	r1, [r7, #4]
 8008bf4:	0004      	movs	r4, r0
 8008bf6:	0f62      	lsrs	r2, r4, #29
 8008bf8:	000c      	movs	r4, r1
 8008bfa:	00e4      	lsls	r4, r4, #3
 8008bfc:	60fc      	str	r4, [r7, #12]
 8008bfe:	68fc      	ldr	r4, [r7, #12]
 8008c00:	4314      	orrs	r4, r2
 8008c02:	60fc      	str	r4, [r7, #12]
 8008c04:	0001      	movs	r1, r0
 8008c06:	00ca      	lsls	r2, r1, #3
 8008c08:	60ba      	str	r2, [r7, #8]
 8008c0a:	3307      	adds	r3, #7
 8008c0c:	08db      	lsrs	r3, r3, #3
 8008c0e:	00db      	lsls	r3, r3, #3
 8008c10:	4669      	mov	r1, sp
 8008c12:	1acb      	subs	r3, r1, r3
 8008c14:	469d      	mov	sp, r3
 8008c16:	466b      	mov	r3, sp
 8008c18:	3300      	adds	r3, #0
 8008c1a:	24c8      	movs	r4, #200	; 0xc8
 8008c1c:	0064      	lsls	r4, r4, #1
 8008c1e:	2218      	movs	r2, #24
 8008c20:	18a2      	adds	r2, r4, r2
 8008c22:	19d1      	adds	r1, r2, r7
 8008c24:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 8008c26:	4b16      	ldr	r3, [pc, #88]	; (8008c80 <astronode_send_mpn_rr+0x148>)
 8008c28:	0018      	movs	r0, r3
 8008c2a:	f7fa fa45 	bl	80030b8 <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 8008c2e:	4b13      	ldr	r3, [pc, #76]	; (8008c7c <astronode_send_mpn_rr+0x144>)
 8008c30:	22cc      	movs	r2, #204	; 0xcc
 8008c32:	0052      	lsls	r2, r2, #1
 8008c34:	189b      	adds	r3, r3, r2
 8008c36:	2218      	movs	r2, #24
 8008c38:	4694      	mov	ip, r2
 8008c3a:	44bc      	add	ip, r7
 8008c3c:	4463      	add	r3, ip
 8008c3e:	22c4      	movs	r2, #196	; 0xc4
 8008c40:	5a9b      	ldrh	r3, [r3, r2]
 8008c42:	0019      	movs	r1, r3
 8008c44:	2318      	movs	r3, #24
 8008c46:	18fb      	adds	r3, r7, r3
 8008c48:	3301      	adds	r3, #1
 8008c4a:	4a0e      	ldr	r2, [pc, #56]	; (8008c84 <astronode_send_mpn_rr+0x14c>)
 8008c4c:	2018      	movs	r0, #24
 8008c4e:	1820      	adds	r0, r4, r0
 8008c50:	19c0      	adds	r0, r0, r7
 8008c52:	6800      	ldr	r0, [r0, #0]
 8008c54:	f003 fd38 	bl	800c6c8 <snprintf>
            send_debug_logs(product_number);
 8008c58:	2318      	movs	r3, #24
 8008c5a:	18e3      	adds	r3, r4, r3
 8008c5c:	19db      	adds	r3, r3, r7
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	0018      	movs	r0, r3
 8008c62:	f7fa fa29 	bl	80030b8 <send_debug_logs>
 8008c66:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8008c68:	e003      	b.n	8008c72 <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8008c6a:	4b07      	ldr	r3, [pc, #28]	; (8008c88 <astronode_send_mpn_rr+0x150>)
 8008c6c:	0018      	movs	r0, r3
 8008c6e:	f7fa fa23 	bl	80030b8 <send_debug_logs>
}
 8008c72:	46c0      	nop			; (mov r8, r8)
 8008c74:	46bd      	mov	sp, r7
 8008c76:	b06d      	add	sp, #436	; 0x1b4
 8008c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c7a:	46c0      	nop			; (mov r8, r8)
 8008c7c:	fffffe68 	.word	0xfffffe68
 8008c80:	08014008 	.word	0x08014008
 8008c84:	08013b40 	.word	0x08013b40
 8008c88:	08013b7c 	.word	0x08013b7c

08008c8c <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 8008c8c:	b5b0      	push	{r4, r5, r7, lr}
 8008c8e:	b0e4      	sub	sp, #400	; 0x190
 8008c90:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008c92:	24c8      	movs	r4, #200	; 0xc8
 8008c94:	193b      	adds	r3, r7, r4
 8008c96:	0018      	movs	r0, r3
 8008c98:	23c6      	movs	r3, #198	; 0xc6
 8008c9a:	001a      	movs	r2, r3
 8008c9c:	2100      	movs	r1, #0
 8008c9e:	f003 fddd 	bl	800c85c <memset>
    astronode_app_msg_t answer = {0};
 8008ca2:	4b16      	ldr	r3, [pc, #88]	; (8008cfc <astronode_send_cmd_cr+0x70>)
 8008ca4:	25c8      	movs	r5, #200	; 0xc8
 8008ca6:	006d      	lsls	r5, r5, #1
 8008ca8:	195b      	adds	r3, r3, r5
 8008caa:	19db      	adds	r3, r3, r7
 8008cac:	0018      	movs	r0, r3
 8008cae:	23c6      	movs	r3, #198	; 0xc6
 8008cb0:	001a      	movs	r2, r3
 8008cb2:	2100      	movs	r1, #0
 8008cb4:	f003 fdd2 	bl	800c85c <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 8008cb8:	193b      	adds	r3, r7, r4
 8008cba:	2248      	movs	r2, #72	; 0x48
 8008cbc:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008cbe:	003a      	movs	r2, r7
 8008cc0:	193b      	adds	r3, r7, r4
 8008cc2:	0011      	movs	r1, r2
 8008cc4:	0018      	movs	r0, r3
 8008cc6:	f000 fc11 	bl	80094ec <astronode_transport_send_receive>
 8008cca:	0003      	movs	r3, r0
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d111      	bne.n	8008cf4 <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 8008cd0:	4b0a      	ldr	r3, [pc, #40]	; (8008cfc <astronode_send_cmd_cr+0x70>)
 8008cd2:	195b      	adds	r3, r3, r5
 8008cd4:	19db      	adds	r3, r3, r7
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	2bc8      	cmp	r3, #200	; 0xc8
 8008cda:	d107      	bne.n	8008cec <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 8008cdc:	4b08      	ldr	r3, [pc, #32]	; (8008d00 <astronode_send_cmd_cr+0x74>)
 8008cde:	2200      	movs	r2, #0
 8008ce0:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 8008ce2:	4b08      	ldr	r3, [pc, #32]	; (8008d04 <astronode_send_cmd_cr+0x78>)
 8008ce4:	0018      	movs	r0, r3
 8008ce6:	f7fa f9e7 	bl	80030b8 <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 8008cea:	e003      	b.n	8008cf4 <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 8008cec:	4b06      	ldr	r3, [pc, #24]	; (8008d08 <astronode_send_cmd_cr+0x7c>)
 8008cee:	0018      	movs	r0, r3
 8008cf0:	f7fa f9e2 	bl	80030b8 <send_debug_logs>
}
 8008cf4:	46c0      	nop			; (mov r8, r8)
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	b064      	add	sp, #400	; 0x190
 8008cfa:	bdb0      	pop	{r4, r5, r7, pc}
 8008cfc:	fffffe70 	.word	0xfffffe70
 8008d00:	20000bbe 	.word	0x20000bbe
 8008d04:	08014458 	.word	0x08014458
 8008d08:	0801447c 	.word	0x0801447c

08008d0c <astronode_send_cmd_rr>:

void astronode_send_cmd_rr(void)
{
 8008d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d0e:	4cac      	ldr	r4, [pc, #688]	; (8008fc0 <astronode_send_cmd_rr+0x2b4>)
 8008d10:	44a5      	add	sp, r4
 8008d12:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008d14:	218c      	movs	r1, #140	; 0x8c
 8008d16:	0049      	lsls	r1, r1, #1
 8008d18:	2318      	movs	r3, #24
 8008d1a:	18cb      	adds	r3, r1, r3
 8008d1c:	19db      	adds	r3, r3, r7
 8008d1e:	0018      	movs	r0, r3
 8008d20:	23c6      	movs	r3, #198	; 0xc6
 8008d22:	001a      	movs	r2, r3
 8008d24:	2100      	movs	r1, #0
 8008d26:	f003 fd99 	bl	800c85c <memset>
    astronode_app_msg_t answer = {0};
 8008d2a:	4ba6      	ldr	r3, [pc, #664]	; (8008fc4 <astronode_send_cmd_rr+0x2b8>)
 8008d2c:	26f8      	movs	r6, #248	; 0xf8
 8008d2e:	0076      	lsls	r6, r6, #1
 8008d30:	199b      	adds	r3, r3, r6
 8008d32:	2218      	movs	r2, #24
 8008d34:	4694      	mov	ip, r2
 8008d36:	44bc      	add	ip, r7
 8008d38:	4463      	add	r3, ip
 8008d3a:	0018      	movs	r0, r3
 8008d3c:	23c6      	movs	r3, #198	; 0xc6
 8008d3e:	001a      	movs	r2, r3
 8008d40:	2100      	movs	r1, #0
 8008d42:	f003 fd8b 	bl	800c85c <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 8008d46:	218c      	movs	r1, #140	; 0x8c
 8008d48:	0049      	lsls	r1, r1, #1
 8008d4a:	2318      	movs	r3, #24
 8008d4c:	18cb      	adds	r3, r1, r3
 8008d4e:	19db      	adds	r3, r3, r7
 8008d50:	2247      	movs	r2, #71	; 0x47
 8008d52:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008d54:	2350      	movs	r3, #80	; 0x50
 8008d56:	2218      	movs	r2, #24
 8008d58:	189b      	adds	r3, r3, r2
 8008d5a:	19da      	adds	r2, r3, r7
 8008d5c:	2318      	movs	r3, #24
 8008d5e:	18cb      	adds	r3, r1, r3
 8008d60:	19db      	adds	r3, r3, r7
 8008d62:	0011      	movs	r1, r2
 8008d64:	0018      	movs	r0, r3
 8008d66:	f000 fbc1 	bl	80094ec <astronode_transport_send_receive>
 8008d6a:	0003      	movs	r3, r0
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d000      	beq.n	8008d72 <astronode_send_cmd_rr+0x66>
 8008d70:	e121      	b.n	8008fb6 <astronode_send_cmd_rr+0x2aa>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 8008d72:	4b94      	ldr	r3, [pc, #592]	; (8008fc4 <astronode_send_cmd_rr+0x2b8>)
 8008d74:	199b      	adds	r3, r3, r6
 8008d76:	2218      	movs	r2, #24
 8008d78:	4694      	mov	ip, r2
 8008d7a:	44bc      	add	ip, r7
 8008d7c:	4463      	add	r3, ip
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	2bc7      	cmp	r3, #199	; 0xc7
 8008d82:	d000      	beq.n	8008d86 <astronode_send_cmd_rr+0x7a>
 8008d84:	e113      	b.n	8008fae <astronode_send_cmd_rr+0x2a2>
        {
 8008d86:	466b      	mov	r3, sp
 8008d88:	001e      	movs	r6, r3
            send_debug_logs("Received downlink command");
 8008d8a:	4b8f      	ldr	r3, [pc, #572]	; (8008fc8 <astronode_send_cmd_rr+0x2bc>)
 8008d8c:	0018      	movs	r0, r3
 8008d8e:	f7fa f993 	bl	80030b8 <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 8008d92:	4b8c      	ldr	r3, [pc, #560]	; (8008fc4 <astronode_send_cmd_rr+0x2b8>)
 8008d94:	21f8      	movs	r1, #248	; 0xf8
 8008d96:	0049      	lsls	r1, r1, #1
 8008d98:	185b      	adds	r3, r3, r1
 8008d9a:	2218      	movs	r2, #24
 8008d9c:	4694      	mov	ip, r2
 8008d9e:	44bc      	add	ip, r7
 8008da0:	4463      	add	r3, ip
 8008da2:	785b      	ldrb	r3, [r3, #1]
 8008da4:	001a      	movs	r2, r3
                                + (answer.p_payload[1] << 8)
 8008da6:	4b87      	ldr	r3, [pc, #540]	; (8008fc4 <astronode_send_cmd_rr+0x2b8>)
 8008da8:	185b      	adds	r3, r3, r1
 8008daa:	2018      	movs	r0, #24
 8008dac:	4684      	mov	ip, r0
 8008dae:	44bc      	add	ip, r7
 8008db0:	4463      	add	r3, ip
 8008db2:	789b      	ldrb	r3, [r3, #2]
 8008db4:	021b      	lsls	r3, r3, #8
 8008db6:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[2] << 16)
 8008db8:	4b82      	ldr	r3, [pc, #520]	; (8008fc4 <astronode_send_cmd_rr+0x2b8>)
 8008dba:	185b      	adds	r3, r3, r1
 8008dbc:	2018      	movs	r0, #24
 8008dbe:	4684      	mov	ip, r0
 8008dc0:	44bc      	add	ip, r7
 8008dc2:	4463      	add	r3, ip
 8008dc4:	78db      	ldrb	r3, [r3, #3]
 8008dc6:	041b      	lsls	r3, r3, #16
 8008dc8:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[3] << 24);
 8008dca:	4b7e      	ldr	r3, [pc, #504]	; (8008fc4 <astronode_send_cmd_rr+0x2b8>)
 8008dcc:	185b      	adds	r3, r3, r1
 8008dce:	2118      	movs	r1, #24
 8008dd0:	468c      	mov	ip, r1
 8008dd2:	44bc      	add	ip, r7
 8008dd4:	4463      	add	r3, ip
 8008dd6:	791b      	ldrb	r3, [r3, #4]
 8008dd8:	061b      	lsls	r3, r3, #24
 8008dda:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8008ddc:	22f4      	movs	r2, #244	; 0xf4
 8008dde:	0052      	lsls	r2, r2, #1
 8008de0:	2118      	movs	r1, #24
 8008de2:	1851      	adds	r1, r2, r1
 8008de4:	19c8      	adds	r0, r1, r7
 8008de6:	6003      	str	r3, [r0, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 8008de8:	2318      	movs	r3, #24
 8008dea:	18d3      	adds	r3, r2, r3
 8008dec:	19db      	adds	r3, r3, r7
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	4976      	ldr	r1, [pc, #472]	; (8008fcc <astronode_send_cmd_rr+0x2c0>)
 8008df2:	2318      	movs	r3, #24
 8008df4:	18fb      	adds	r3, r7, r3
 8008df6:	0018      	movs	r0, r3
 8008df8:	f003 fc9a 	bl	800c730 <sprintf>
            send_debug_logs(str);
 8008dfc:	2318      	movs	r3, #24
 8008dfe:	18fb      	adds	r3, r7, r3
 8008e00:	0018      	movs	r0, r3
 8008e02:	f7fa f959 	bl	80030b8 <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 8008e06:	4b6f      	ldr	r3, [pc, #444]	; (8008fc4 <astronode_send_cmd_rr+0x2b8>)
 8008e08:	21f8      	movs	r1, #248	; 0xf8
 8008e0a:	0049      	lsls	r1, r1, #1
 8008e0c:	185b      	adds	r3, r3, r1
 8008e0e:	2218      	movs	r2, #24
 8008e10:	4694      	mov	ip, r2
 8008e12:	44bc      	add	ip, r7
 8008e14:	4463      	add	r3, ip
 8008e16:	22c4      	movs	r2, #196	; 0xc4
 8008e18:	5a9b      	ldrh	r3, [r3, r2]
 8008e1a:	2b2c      	cmp	r3, #44	; 0x2c
 8008e1c:	d00e      	beq.n	8008e3c <astronode_send_cmd_rr+0x130>
 8008e1e:	4b69      	ldr	r3, [pc, #420]	; (8008fc4 <astronode_send_cmd_rr+0x2b8>)
 8008e20:	185b      	adds	r3, r3, r1
 8008e22:	2218      	movs	r2, #24
 8008e24:	4694      	mov	ip, r2
 8008e26:	44bc      	add	ip, r7
 8008e28:	4463      	add	r3, ip
 8008e2a:	22c4      	movs	r2, #196	; 0xc4
 8008e2c:	5a9b      	ldrh	r3, [r3, r2]
 8008e2e:	2b0c      	cmp	r3, #12
 8008e30:	d004      	beq.n	8008e3c <astronode_send_cmd_rr+0x130>
            {
                send_debug_logs("Command size error");
 8008e32:	4b67      	ldr	r3, [pc, #412]	; (8008fd0 <astronode_send_cmd_rr+0x2c4>)
 8008e34:	0018      	movs	r0, r3
 8008e36:	f7fa f93f 	bl	80030b8 <send_debug_logs>
                return;
 8008e3a:	e0b6      	b.n	8008faa <astronode_send_cmd_rr+0x29e>
            }

            char command_content[answer.payload_len];
 8008e3c:	4b61      	ldr	r3, [pc, #388]	; (8008fc4 <astronode_send_cmd_rr+0x2b8>)
 8008e3e:	22f8      	movs	r2, #248	; 0xf8
 8008e40:	0052      	lsls	r2, r2, #1
 8008e42:	189b      	adds	r3, r3, r2
 8008e44:	2218      	movs	r2, #24
 8008e46:	4694      	mov	ip, r2
 8008e48:	44bc      	add	ip, r7
 8008e4a:	4463      	add	r3, ip
 8008e4c:	22c4      	movs	r2, #196	; 0xc4
 8008e4e:	5a9b      	ldrh	r3, [r3, r2]
 8008e50:	001a      	movs	r2, r3
 8008e52:	3a01      	subs	r2, #1
 8008e54:	21f2      	movs	r1, #242	; 0xf2
 8008e56:	0049      	lsls	r1, r1, #1
 8008e58:	2018      	movs	r0, #24
 8008e5a:	1809      	adds	r1, r1, r0
 8008e5c:	19c9      	adds	r1, r1, r7
 8008e5e:	600a      	str	r2, [r1, #0]
 8008e60:	001c      	movs	r4, r3
 8008e62:	2200      	movs	r2, #0
 8008e64:	0015      	movs	r5, r2
 8008e66:	0020      	movs	r0, r4
 8008e68:	0029      	movs	r1, r5
 8008e6a:	0004      	movs	r4, r0
 8008e6c:	0f62      	lsrs	r2, r4, #29
 8008e6e:	000c      	movs	r4, r1
 8008e70:	00e4      	lsls	r4, r4, #3
 8008e72:	617c      	str	r4, [r7, #20]
 8008e74:	697c      	ldr	r4, [r7, #20]
 8008e76:	4314      	orrs	r4, r2
 8008e78:	617c      	str	r4, [r7, #20]
 8008e7a:	0001      	movs	r1, r0
 8008e7c:	00c9      	lsls	r1, r1, #3
 8008e7e:	6139      	str	r1, [r7, #16]
 8008e80:	603b      	str	r3, [r7, #0]
 8008e82:	2200      	movs	r2, #0
 8008e84:	607a      	str	r2, [r7, #4]
 8008e86:	6838      	ldr	r0, [r7, #0]
 8008e88:	6879      	ldr	r1, [r7, #4]
 8008e8a:	0004      	movs	r4, r0
 8008e8c:	0f62      	lsrs	r2, r4, #29
 8008e8e:	000c      	movs	r4, r1
 8008e90:	00e4      	lsls	r4, r4, #3
 8008e92:	60fc      	str	r4, [r7, #12]
 8008e94:	68fc      	ldr	r4, [r7, #12]
 8008e96:	4314      	orrs	r4, r2
 8008e98:	60fc      	str	r4, [r7, #12]
 8008e9a:	0001      	movs	r1, r0
 8008e9c:	00ca      	lsls	r2, r1, #3
 8008e9e:	60ba      	str	r2, [r7, #8]
 8008ea0:	3307      	adds	r3, #7
 8008ea2:	08db      	lsrs	r3, r3, #3
 8008ea4:	00db      	lsls	r3, r3, #3
 8008ea6:	4669      	mov	r1, sp
 8008ea8:	1acb      	subs	r3, r1, r3
 8008eaa:	469d      	mov	sp, r3
 8008eac:	466b      	mov	r3, sp
 8008eae:	3300      	adds	r3, #0
 8008eb0:	20f0      	movs	r0, #240	; 0xf0
 8008eb2:	0040      	lsls	r0, r0, #1
 8008eb4:	2218      	movs	r2, #24
 8008eb6:	1882      	adds	r2, r0, r2
 8008eb8:	19d1      	adds	r1, r2, r7
 8008eba:	600b      	str	r3, [r1, #0]
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 8008ebc:	4b41      	ldr	r3, [pc, #260]	; (8008fc4 <astronode_send_cmd_rr+0x2b8>)
 8008ebe:	22f8      	movs	r2, #248	; 0xf8
 8008ec0:	0052      	lsls	r2, r2, #1
 8008ec2:	189b      	adds	r3, r3, r2
 8008ec4:	2218      	movs	r2, #24
 8008ec6:	4694      	mov	ip, r2
 8008ec8:	44bc      	add	ip, r7
 8008eca:	4463      	add	r3, ip
 8008ecc:	22c4      	movs	r2, #196	; 0xc4
 8008ece:	5a9b      	ldrh	r3, [r3, r2]
 8008ed0:	3b03      	subs	r3, #3
 8008ed2:	0019      	movs	r1, r3
 8008ed4:	2350      	movs	r3, #80	; 0x50
 8008ed6:	2218      	movs	r2, #24
 8008ed8:	189b      	adds	r3, r3, r2
 8008eda:	19db      	adds	r3, r3, r7
 8008edc:	3305      	adds	r3, #5
 8008ede:	4a3d      	ldr	r2, [pc, #244]	; (8008fd4 <astronode_send_cmd_rr+0x2c8>)
 8008ee0:	2418      	movs	r4, #24
 8008ee2:	1900      	adds	r0, r0, r4
 8008ee4:	19c0      	adds	r0, r0, r7
 8008ee6:	6800      	ldr	r0, [r0, #0]
 8008ee8:	f003 fbee 	bl	800c6c8 <snprintf>
 8008eec:	0002      	movs	r2, r0
 8008eee:	23ef      	movs	r3, #239	; 0xef
 8008ef0:	005b      	lsls	r3, r3, #1
 8008ef2:	2118      	movs	r1, #24
 8008ef4:	185b      	adds	r3, r3, r1
 8008ef6:	19db      	adds	r3, r3, r7
 8008ef8:	801a      	strh	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8008efa:	23f0      	movs	r3, #240	; 0xf0
 8008efc:	33ff      	adds	r3, #255	; 0xff
 8008efe:	2218      	movs	r2, #24
 8008f00:	189b      	adds	r3, r3, r2
 8008f02:	19db      	adds	r3, r3, r7
 8008f04:	2200      	movs	r2, #0
 8008f06:	701a      	strb	r2, [r3, #0]
 8008f08:	e024      	b.n	8008f54 <astronode_send_cmd_rr+0x248>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 8008f0a:	23f0      	movs	r3, #240	; 0xf0
 8008f0c:	33ff      	adds	r3, #255	; 0xff
 8008f0e:	2218      	movs	r2, #24
 8008f10:	189b      	adds	r3, r3, r2
 8008f12:	19db      	adds	r3, r3, r7
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	22f0      	movs	r2, #240	; 0xf0
 8008f18:	0052      	lsls	r2, r2, #1
 8008f1a:	2118      	movs	r1, #24
 8008f1c:	1852      	adds	r2, r2, r1
 8008f1e:	19d2      	adds	r2, r2, r7
 8008f20:	6812      	ldr	r2, [r2, #0]
 8008f22:	5cd3      	ldrb	r3, [r2, r3]
 8008f24:	1c5a      	adds	r2, r3, #1
 8008f26:	4b2c      	ldr	r3, [pc, #176]	; (8008fd8 <astronode_send_cmd_rr+0x2cc>)
 8008f28:	18d3      	adds	r3, r2, r3
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	001a      	movs	r2, r3
 8008f2e:	2397      	movs	r3, #151	; 0x97
 8008f30:	4013      	ands	r3, r2
 8008f32:	d104      	bne.n	8008f3e <astronode_send_cmd_rr+0x232>
                {
                    send_debug_logs("Command contains non printable characters");
 8008f34:	4b29      	ldr	r3, [pc, #164]	; (8008fdc <astronode_send_cmd_rr+0x2d0>)
 8008f36:	0018      	movs	r0, r3
 8008f38:	f7fa f8be 	bl	80030b8 <send_debug_logs>
                    return;
 8008f3c:	e035      	b.n	8008faa <astronode_send_cmd_rr+0x29e>
            for (uint8_t index = 0; index < command_content_size; index++)
 8008f3e:	21f0      	movs	r1, #240	; 0xf0
 8008f40:	31ff      	adds	r1, #255	; 0xff
 8008f42:	2318      	movs	r3, #24
 8008f44:	18cb      	adds	r3, r1, r3
 8008f46:	19db      	adds	r3, r3, r7
 8008f48:	781a      	ldrb	r2, [r3, #0]
 8008f4a:	2318      	movs	r3, #24
 8008f4c:	18cb      	adds	r3, r1, r3
 8008f4e:	19db      	adds	r3, r3, r7
 8008f50:	3201      	adds	r2, #1
 8008f52:	701a      	strb	r2, [r3, #0]
 8008f54:	23f0      	movs	r3, #240	; 0xf0
 8008f56:	33ff      	adds	r3, #255	; 0xff
 8008f58:	2218      	movs	r2, #24
 8008f5a:	189b      	adds	r3, r3, r2
 8008f5c:	19db      	adds	r3, r3, r7
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	22ef      	movs	r2, #239	; 0xef
 8008f64:	0052      	lsls	r2, r2, #1
 8008f66:	2118      	movs	r1, #24
 8008f68:	1852      	adds	r2, r2, r1
 8008f6a:	19d2      	adds	r2, r2, r7
 8008f6c:	8812      	ldrh	r2, [r2, #0]
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d8cb      	bhi.n	8008f0a <astronode_send_cmd_rr+0x1fe>
                }
            }
            send_debug_logs("Command content is: ");
 8008f72:	4b1b      	ldr	r3, [pc, #108]	; (8008fe0 <astronode_send_cmd_rr+0x2d4>)
 8008f74:	0018      	movs	r0, r3
 8008f76:	f7fa f89f 	bl	80030b8 <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 8008f7a:	2350      	movs	r3, #80	; 0x50
 8008f7c:	2218      	movs	r2, #24
 8008f7e:	189b      	adds	r3, r3, r2
 8008f80:	19db      	adds	r3, r3, r7
 8008f82:	1d5a      	adds	r2, r3, #5
 8008f84:	4917      	ldr	r1, [pc, #92]	; (8008fe4 <astronode_send_cmd_rr+0x2d8>)
 8008f86:	24f0      	movs	r4, #240	; 0xf0
 8008f88:	0064      	lsls	r4, r4, #1
 8008f8a:	2318      	movs	r3, #24
 8008f8c:	18e3      	adds	r3, r4, r3
 8008f8e:	19db      	adds	r3, r3, r7
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	0018      	movs	r0, r3
 8008f94:	f003 fbcc 	bl	800c730 <sprintf>
            send_debug_logs(command_content);
 8008f98:	2318      	movs	r3, #24
 8008f9a:	18e3      	adds	r3, r4, r3
 8008f9c:	19db      	adds	r3, r3, r7
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	0018      	movs	r0, r3
 8008fa2:	f7fa f889 	bl	80030b8 <send_debug_logs>
 8008fa6:	46b5      	mov	sp, r6
 8008fa8:	e005      	b.n	8008fb6 <astronode_send_cmd_rr+0x2aa>
                return;
 8008faa:	46b5      	mov	sp, r6
 8008fac:	e003      	b.n	8008fb6 <astronode_send_cmd_rr+0x2aa>
        }
        else
        {
            send_debug_logs("No command available.");
 8008fae:	4b0e      	ldr	r3, [pc, #56]	; (8008fe8 <astronode_send_cmd_rr+0x2dc>)
 8008fb0:	0018      	movs	r0, r3
 8008fb2:	f7fa f881 	bl	80030b8 <send_debug_logs>
        }
    }
}
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	2383      	movs	r3, #131	; 0x83
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	449d      	add	sp, r3
 8008fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fc0:	fffffdf4 	.word	0xfffffdf4
 8008fc4:	fffffe60 	.word	0xfffffe60
 8008fc8:	08014494 	.word	0x08014494
 8008fcc:	080144b0 	.word	0x080144b0
 8008fd0:	08014500 	.word	0x08014500
 8008fd4:	08013b40 	.word	0x08013b40
 8008fd8:	08014f70 	.word	0x08014f70
 8008fdc:	08014514 	.word	0x08014514
 8008fe0:	08014540 	.word	0x08014540
 8008fe4:	08014558 	.word	0x08014558
 8008fe8:	0801455c 	.word	0x0801455c

08008fec <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 8008ff0:	4b02      	ldr	r3, [pc, #8]	; (8008ffc <is_sak_available+0x10>)
 8008ff2:	781b      	ldrb	r3, [r3, #0]
}
 8008ff4:	0018      	movs	r0, r3
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	46c0      	nop			; (mov r8, r8)
 8008ffc:	20000bbc 	.word	0x20000bbc

08009000 <is_astronode_reset>:

bool is_astronode_reset()
{
 8009000:	b580      	push	{r7, lr}
 8009002:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8009004:	4b02      	ldr	r3, [pc, #8]	; (8009010 <is_astronode_reset+0x10>)
 8009006:	781b      	ldrb	r3, [r3, #0]
}
 8009008:	0018      	movs	r0, r3
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	46c0      	nop			; (mov r8, r8)
 8009010:	20000bbd 	.word	0x20000bbd

08009014 <is_command_available>:

bool is_command_available()
{
 8009014:	b580      	push	{r7, lr}
 8009016:	af00      	add	r7, sp, #0
    return g_is_command_available;
 8009018:	4b02      	ldr	r3, [pc, #8]	; (8009024 <is_command_available+0x10>)
 800901a:	781b      	ldrb	r3, [r3, #0]
}
 800901c:	0018      	movs	r0, r3
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	46c0      	nop			; (mov r8, r8)
 8009024:	20000bbe 	.word	0x20000bbe

08009028 <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	0002      	movs	r2, r0
 8009030:	6039      	str	r1, [r7, #0]
 8009032:	1dfb      	adds	r3, r7, #7
 8009034:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 8009036:	1dfb      	adds	r3, r7, #7
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	2b2f      	cmp	r3, #47	; 0x2f
 800903c:	d90b      	bls.n	8009056 <ascii_to_value+0x2e>
 800903e:	1dfb      	adds	r3, r7, #7
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	2b39      	cmp	r3, #57	; 0x39
 8009044:	d807      	bhi.n	8009056 <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 8009046:	1dfb      	adds	r3, r7, #7
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	3b30      	subs	r3, #48	; 0x30
 800904c:	b2da      	uxtb	r2, r3
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	701a      	strb	r2, [r3, #0]
        return true;
 8009052:	2301      	movs	r3, #1
 8009054:	e010      	b.n	8009078 <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 8009056:	1dfb      	adds	r3, r7, #7
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	2b40      	cmp	r3, #64	; 0x40
 800905c:	d90b      	bls.n	8009076 <ascii_to_value+0x4e>
 800905e:	1dfb      	adds	r3, r7, #7
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	2b46      	cmp	r3, #70	; 0x46
 8009064:	d807      	bhi.n	8009076 <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 8009066:	1dfb      	adds	r3, r7, #7
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	3b37      	subs	r3, #55	; 0x37
 800906c:	b2da      	uxtb	r2, r3
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	701a      	strb	r2, [r3, #0]
        return true;
 8009072:	2301      	movs	r3, #1
 8009074:	e000      	b.n	8009078 <ascii_to_value+0x50>
    }
    else
    {
        return false;
 8009076:	2300      	movs	r3, #0
    }
}
 8009078:	0018      	movs	r0, r3
 800907a:	46bd      	mov	sp, r7
 800907c:	b002      	add	sp, #8
 800907e:	bd80      	pop	{r7, pc}

08009080 <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8009080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009082:	b085      	sub	sp, #20
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 800908a:	250e      	movs	r5, #14
 800908c:	197b      	adds	r3, r7, r5
 800908e:	2200      	movs	r2, #0
 8009090:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 8009092:	197b      	adds	r3, r7, r5
 8009094:	881b      	ldrh	r3, [r3, #0]
 8009096:	197a      	adds	r2, r7, r5
 8009098:	1c59      	adds	r1, r3, #1
 800909a:	8011      	strh	r1, [r2, #0]
 800909c:	001a      	movs	r2, r3
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	189b      	adds	r3, r3, r2
 80090a2:	2202      	movs	r2, #2
 80090a4:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	260a      	movs	r6, #10
 80090aa:	19bc      	adds	r4, r7, r6
 80090ac:	4a44      	ldr	r2, [pc, #272]	; (80091c0 <astronode_create_request_transport+0x140>)
 80090ae:	2101      	movs	r1, #1
 80090b0:	0018      	movs	r0, r3
 80090b2:	f000 fa7d 	bl	80095b0 <calculate_crc>
 80090b6:	0003      	movs	r3, r0
 80090b8:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	1c58      	adds	r0, r3, #1
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	22c4      	movs	r2, #196	; 0xc4
 80090c2:	5a99      	ldrh	r1, [r3, r2]
 80090c4:	19bc      	adds	r4, r7, r6
 80090c6:	19bb      	adds	r3, r7, r6
 80090c8:	881b      	ldrh	r3, [r3, #0]
 80090ca:	001a      	movs	r2, r3
 80090cc:	f000 fa70 	bl	80095b0 <calculate_crc>
 80090d0:	0003      	movs	r3, r0
 80090d2:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 80090d4:	19bb      	adds	r3, r7, r6
 80090d6:	881b      	ldrh	r3, [r3, #0]
 80090d8:	021b      	lsls	r3, r3, #8
 80090da:	b21a      	sxth	r2, r3
 80090dc:	0031      	movs	r1, r6
 80090de:	19bb      	adds	r3, r7, r6
 80090e0:	881b      	ldrh	r3, [r3, #0]
 80090e2:	0a1b      	lsrs	r3, r3, #8
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	b21b      	sxth	r3, r3
 80090e8:	4313      	orrs	r3, r2
 80090ea:	b21a      	sxth	r2, r3
 80090ec:	187b      	adds	r3, r7, r1
 80090ee:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	7818      	ldrb	r0, [r3, #0]
 80090f4:	197b      	adds	r3, r7, r5
 80090f6:	881b      	ldrh	r3, [r3, #0]
 80090f8:	683a      	ldr	r2, [r7, #0]
 80090fa:	18d3      	adds	r3, r2, r3
 80090fc:	0019      	movs	r1, r3
 80090fe:	f000 fbeb 	bl	80098d8 <uint8_to_ascii_buffer>
    index += 2;
 8009102:	197b      	adds	r3, r7, r5
 8009104:	197a      	adds	r2, r7, r5
 8009106:	8812      	ldrh	r2, [r2, #0]
 8009108:	3202      	adds	r2, #2
 800910a:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 800910c:	230c      	movs	r3, #12
 800910e:	18fb      	adds	r3, r7, r3
 8009110:	2200      	movs	r2, #0
 8009112:	801a      	strh	r2, [r3, #0]
 8009114:	e017      	b.n	8009146 <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 8009116:	240c      	movs	r4, #12
 8009118:	193b      	adds	r3, r7, r4
 800911a:	881b      	ldrh	r3, [r3, #0]
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	18d3      	adds	r3, r2, r3
 8009120:	7858      	ldrb	r0, [r3, #1]
 8009122:	250e      	movs	r5, #14
 8009124:	197b      	adds	r3, r7, r5
 8009126:	881b      	ldrh	r3, [r3, #0]
 8009128:	683a      	ldr	r2, [r7, #0]
 800912a:	18d3      	adds	r3, r2, r3
 800912c:	0019      	movs	r1, r3
 800912e:	f000 fbd3 	bl	80098d8 <uint8_to_ascii_buffer>
        index += 2;
 8009132:	197b      	adds	r3, r7, r5
 8009134:	197a      	adds	r2, r7, r5
 8009136:	8812      	ldrh	r2, [r2, #0]
 8009138:	3202      	adds	r2, #2
 800913a:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 800913c:	193b      	adds	r3, r7, r4
 800913e:	881a      	ldrh	r2, [r3, #0]
 8009140:	193b      	adds	r3, r7, r4
 8009142:	3201      	adds	r2, #1
 8009144:	801a      	strh	r2, [r3, #0]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	22c4      	movs	r2, #196	; 0xc4
 800914a:	5a9b      	ldrh	r3, [r3, r2]
 800914c:	220c      	movs	r2, #12
 800914e:	18ba      	adds	r2, r7, r2
 8009150:	8812      	ldrh	r2, [r2, #0]
 8009152:	429a      	cmp	r2, r3
 8009154:	d3df      	bcc.n	8009116 <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 8009156:	250a      	movs	r5, #10
 8009158:	197b      	adds	r3, r7, r5
 800915a:	881b      	ldrh	r3, [r3, #0]
 800915c:	0a1b      	lsrs	r3, r3, #8
 800915e:	b29b      	uxth	r3, r3
 8009160:	b2d8      	uxtb	r0, r3
 8009162:	240e      	movs	r4, #14
 8009164:	193b      	adds	r3, r7, r4
 8009166:	881b      	ldrh	r3, [r3, #0]
 8009168:	683a      	ldr	r2, [r7, #0]
 800916a:	18d3      	adds	r3, r2, r3
 800916c:	0019      	movs	r1, r3
 800916e:	f000 fbb3 	bl	80098d8 <uint8_to_ascii_buffer>
    index += 2;
 8009172:	0021      	movs	r1, r4
 8009174:	187b      	adds	r3, r7, r1
 8009176:	187a      	adds	r2, r7, r1
 8009178:	8812      	ldrh	r2, [r2, #0]
 800917a:	3202      	adds	r2, #2
 800917c:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 800917e:	197b      	adds	r3, r7, r5
 8009180:	881b      	ldrh	r3, [r3, #0]
 8009182:	b2d8      	uxtb	r0, r3
 8009184:	000c      	movs	r4, r1
 8009186:	187b      	adds	r3, r7, r1
 8009188:	881b      	ldrh	r3, [r3, #0]
 800918a:	683a      	ldr	r2, [r7, #0]
 800918c:	18d3      	adds	r3, r2, r3
 800918e:	0019      	movs	r1, r3
 8009190:	f000 fba2 	bl	80098d8 <uint8_to_ascii_buffer>
    index += 2;
 8009194:	0020      	movs	r0, r4
 8009196:	183b      	adds	r3, r7, r0
 8009198:	183a      	adds	r2, r7, r0
 800919a:	8812      	ldrh	r2, [r2, #0]
 800919c:	3202      	adds	r2, #2
 800919e:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 80091a0:	183b      	adds	r3, r7, r0
 80091a2:	881b      	ldrh	r3, [r3, #0]
 80091a4:	183a      	adds	r2, r7, r0
 80091a6:	1c59      	adds	r1, r3, #1
 80091a8:	8011      	strh	r1, [r2, #0]
 80091aa:	001a      	movs	r2, r3
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	189b      	adds	r3, r3, r2
 80091b0:	2203      	movs	r2, #3
 80091b2:	701a      	strb	r2, [r3, #0]

    return index;
 80091b4:	183b      	adds	r3, r7, r0
 80091b6:	881b      	ldrh	r3, [r3, #0]
}
 80091b8:	0018      	movs	r0, r3
 80091ba:	46bd      	mov	sp, r7
 80091bc:	b005      	add	sp, #20
 80091be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091c0:	0000ffff 	.word	0x0000ffff

080091c4 <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 80091c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091c6:	b089      	sub	sp, #36	; 0x24
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	607a      	str	r2, [r7, #4]
 80091ce:	230a      	movs	r3, #10
 80091d0:	18fb      	adds	r3, r7, r3
 80091d2:	1c0a      	adds	r2, r1, #0
 80091d4:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	2b02      	cmp	r3, #2
 80091dc:	d005      	beq.n	80091ea <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 80091de:	4bbd      	ldr	r3, [pc, #756]	; (80094d4 <astronode_decode_answer_transport+0x310>)
 80091e0:	0018      	movs	r0, r3
 80091e2:	f7f9 ff69 	bl	80030b8 <send_debug_logs>
        return RS_FAILURE;
 80091e6:	2300      	movs	r3, #0
 80091e8:	e170      	b.n	80094cc <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 80091ea:	210a      	movs	r1, #10
 80091ec:	187b      	adds	r3, r7, r1
 80091ee:	881b      	ldrh	r3, [r3, #0]
 80091f0:	2201      	movs	r2, #1
 80091f2:	4013      	ands	r3, r2
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d103      	bne.n	8009202 <astronode_decode_answer_transport+0x3e>
 80091fa:	187b      	adds	r3, r7, r1
 80091fc:	881b      	ldrh	r3, [r3, #0]
 80091fe:	2b07      	cmp	r3, #7
 8009200:	d805      	bhi.n	800920e <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 8009202:	4bb5      	ldr	r3, [pc, #724]	; (80094d8 <astronode_decode_answer_transport+0x314>)
 8009204:	0018      	movs	r0, r3
 8009206:	f7f9 ff57 	bl	80030b8 <send_debug_logs>
        return RS_FAILURE;
 800920a:	2300      	movs	r3, #0
 800920c:	e15e      	b.n	80094cc <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 800920e:	230a      	movs	r3, #10
 8009210:	18fb      	adds	r3, r7, r3
 8009212:	881b      	ldrh	r3, [r3, #0]
 8009214:	3b08      	subs	r3, #8
 8009216:	2b00      	cmp	r3, #0
 8009218:	da00      	bge.n	800921c <astronode_decode_answer_transport+0x58>
 800921a:	3301      	adds	r3, #1
 800921c:	105b      	asrs	r3, r3, #1
 800921e:	b299      	uxth	r1, r3
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	22c4      	movs	r2, #196	; 0xc4
 8009224:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 8009226:	230a      	movs	r3, #10
 8009228:	18fb      	adds	r3, r7, r3
 800922a:	881b      	ldrh	r3, [r3, #0]
 800922c:	3b01      	subs	r3, #1
 800922e:	68fa      	ldr	r2, [r7, #12]
 8009230:	18d3      	adds	r3, r2, r3
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	2b03      	cmp	r3, #3
 8009236:	d005      	beq.n	8009244 <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 8009238:	4ba8      	ldr	r3, [pc, #672]	; (80094dc <astronode_decode_answer_transport+0x318>)
 800923a:	0018      	movs	r0, r3
 800923c:	f7f9 ff3c 	bl	80030b8 <send_debug_logs>
        return RS_FAILURE;
 8009240:	2300      	movs	r3, #0
 8009242:	e143      	b.n	80094cc <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 8009244:	2117      	movs	r1, #23
 8009246:	187b      	adds	r3, r7, r1
 8009248:	2200      	movs	r2, #0
 800924a:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 800924c:	2416      	movs	r4, #22
 800924e:	193b      	adds	r3, r7, r4
 8009250:	2200      	movs	r2, #0
 8009252:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	3301      	adds	r3, #1
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	187a      	adds	r2, r7, r1
 800925c:	0011      	movs	r1, r2
 800925e:	0018      	movs	r0, r3
 8009260:	f7ff fee2 	bl	8009028 <ascii_to_value>
 8009264:	0003      	movs	r3, r0
 8009266:	001a      	movs	r2, r3
 8009268:	2301      	movs	r3, #1
 800926a:	4053      	eors	r3, r2
 800926c:	b2db      	uxtb	r3, r3
 800926e:	2b00      	cmp	r3, #0
 8009270:	d10e      	bne.n	8009290 <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	3302      	adds	r3, #2
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	193a      	adds	r2, r7, r4
 800927a:	0011      	movs	r1, r2
 800927c:	0018      	movs	r0, r3
 800927e:	f7ff fed3 	bl	8009028 <ascii_to_value>
 8009282:	0003      	movs	r3, r0
 8009284:	001a      	movs	r2, r3
 8009286:	2301      	movs	r3, #1
 8009288:	4053      	eors	r3, r2
 800928a:	b2db      	uxtb	r3, r3
 800928c:	2b00      	cmp	r3, #0
 800928e:	d005      	beq.n	800929c <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8009290:	4b93      	ldr	r3, [pc, #588]	; (80094e0 <astronode_decode_answer_transport+0x31c>)
 8009292:	0018      	movs	r0, r3
 8009294:	f7f9 ff10 	bl	80030b8 <send_debug_logs>
        return RS_FAILURE;
 8009298:	2300      	movs	r3, #0
 800929a:	e117      	b.n	80094cc <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 800929c:	2317      	movs	r3, #23
 800929e:	18fb      	adds	r3, r7, r3
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	011b      	lsls	r3, r3, #4
 80092a4:	b2da      	uxtb	r2, r3
 80092a6:	2316      	movs	r3, #22
 80092a8:	18fb      	adds	r3, r7, r3
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	18d3      	adds	r3, r2, r3
 80092ae:	b2da      	uxtb	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 80092b4:	231e      	movs	r3, #30
 80092b6:	18fb      	adds	r3, r7, r3
 80092b8:	2203      	movs	r2, #3
 80092ba:	801a      	strh	r2, [r3, #0]
 80092bc:	231c      	movs	r3, #28
 80092be:	18fb      	adds	r3, r7, r3
 80092c0:	2200      	movs	r2, #0
 80092c2:	801a      	strh	r2, [r3, #0]
 80092c4:	e045      	b.n	8009352 <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 80092c6:	241e      	movs	r4, #30
 80092c8:	193b      	adds	r3, r7, r4
 80092ca:	881b      	ldrh	r3, [r3, #0]
 80092cc:	68fa      	ldr	r2, [r7, #12]
 80092ce:	18d3      	adds	r3, r2, r3
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	2217      	movs	r2, #23
 80092d4:	18ba      	adds	r2, r7, r2
 80092d6:	0011      	movs	r1, r2
 80092d8:	0018      	movs	r0, r3
 80092da:	f7ff fea5 	bl	8009028 <ascii_to_value>
 80092de:	0003      	movs	r3, r0
 80092e0:	001a      	movs	r2, r3
 80092e2:	2301      	movs	r3, #1
 80092e4:	4053      	eors	r3, r2
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d112      	bne.n	8009312 <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 80092ec:	193b      	adds	r3, r7, r4
 80092ee:	881b      	ldrh	r3, [r3, #0]
 80092f0:	3301      	adds	r3, #1
 80092f2:	68fa      	ldr	r2, [r7, #12]
 80092f4:	18d3      	adds	r3, r2, r3
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	2216      	movs	r2, #22
 80092fa:	18ba      	adds	r2, r7, r2
 80092fc:	0011      	movs	r1, r2
 80092fe:	0018      	movs	r0, r3
 8009300:	f7ff fe92 	bl	8009028 <ascii_to_value>
 8009304:	0003      	movs	r3, r0
 8009306:	001a      	movs	r2, r3
 8009308:	2301      	movs	r3, #1
 800930a:	4053      	eors	r3, r2
 800930c:	b2db      	uxtb	r3, r3
 800930e:	2b00      	cmp	r3, #0
 8009310:	d005      	beq.n	800931e <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8009312:	4b73      	ldr	r3, [pc, #460]	; (80094e0 <astronode_decode_answer_transport+0x31c>)
 8009314:	0018      	movs	r0, r3
 8009316:	f7f9 fecf 	bl	80030b8 <send_debug_logs>
            return RS_FAILURE;
 800931a:	2300      	movs	r3, #0
 800931c:	e0d6      	b.n	80094cc <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 800931e:	2317      	movs	r3, #23
 8009320:	18fb      	adds	r3, r7, r3
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	011b      	lsls	r3, r3, #4
 8009326:	b2d9      	uxtb	r1, r3
 8009328:	2316      	movs	r3, #22
 800932a:	18fb      	adds	r3, r7, r3
 800932c:	781a      	ldrb	r2, [r3, #0]
 800932e:	201c      	movs	r0, #28
 8009330:	183b      	adds	r3, r7, r0
 8009332:	881b      	ldrh	r3, [r3, #0]
 8009334:	1838      	adds	r0, r7, r0
 8009336:	1c5c      	adds	r4, r3, #1
 8009338:	8004      	strh	r4, [r0, #0]
 800933a:	0018      	movs	r0, r3
 800933c:	188b      	adds	r3, r1, r2
 800933e:	b2da      	uxtb	r2, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	181b      	adds	r3, r3, r0
 8009344:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8009346:	221e      	movs	r2, #30
 8009348:	18bb      	adds	r3, r7, r2
 800934a:	18ba      	adds	r2, r7, r2
 800934c:	8812      	ldrh	r2, [r2, #0]
 800934e:	3202      	adds	r2, #2
 8009350:	801a      	strh	r2, [r3, #0]
 8009352:	231e      	movs	r3, #30
 8009354:	18fb      	adds	r3, r7, r3
 8009356:	881a      	ldrh	r2, [r3, #0]
 8009358:	260a      	movs	r6, #10
 800935a:	19bb      	adds	r3, r7, r6
 800935c:	881b      	ldrh	r3, [r3, #0]
 800935e:	3b05      	subs	r3, #5
 8009360:	429a      	cmp	r2, r3
 8009362:	dbb0      	blt.n	80092c6 <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	251a      	movs	r5, #26
 8009368:	197c      	adds	r4, r7, r5
 800936a:	4a5e      	ldr	r2, [pc, #376]	; (80094e4 <astronode_decode_answer_transport+0x320>)
 800936c:	2101      	movs	r1, #1
 800936e:	0018      	movs	r0, r3
 8009370:	f000 f91e 	bl	80095b0 <calculate_crc>
 8009374:	0003      	movs	r3, r0
 8009376:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	1c58      	adds	r0, r3, #1
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	22c4      	movs	r2, #196	; 0xc4
 8009380:	5a99      	ldrh	r1, [r3, r2]
 8009382:	197c      	adds	r4, r7, r5
 8009384:	197b      	adds	r3, r7, r5
 8009386:	881b      	ldrh	r3, [r3, #0]
 8009388:	001a      	movs	r2, r3
 800938a:	f000 f911 	bl	80095b0 <calculate_crc>
 800938e:	0003      	movs	r3, r0
 8009390:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 8009392:	197b      	adds	r3, r7, r5
 8009394:	881b      	ldrh	r3, [r3, #0]
 8009396:	021b      	lsls	r3, r3, #8
 8009398:	b21a      	sxth	r2, r3
 800939a:	0029      	movs	r1, r5
 800939c:	197b      	adds	r3, r7, r5
 800939e:	881b      	ldrh	r3, [r3, #0]
 80093a0:	0a1b      	lsrs	r3, r3, #8
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	b21b      	sxth	r3, r3
 80093a6:	4313      	orrs	r3, r2
 80093a8:	b21a      	sxth	r2, r3
 80093aa:	187b      	adds	r3, r7, r1
 80093ac:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 80093ae:	19bb      	adds	r3, r7, r6
 80093b0:	881b      	ldrh	r3, [r3, #0]
 80093b2:	3b05      	subs	r3, #5
 80093b4:	68fa      	ldr	r2, [r7, #12]
 80093b6:	18d3      	adds	r3, r2, r3
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	2217      	movs	r2, #23
 80093bc:	18ba      	adds	r2, r7, r2
 80093be:	0011      	movs	r1, r2
 80093c0:	0018      	movs	r0, r3
 80093c2:	f7ff fe31 	bl	8009028 <ascii_to_value>
 80093c6:	0003      	movs	r3, r0
 80093c8:	001a      	movs	r2, r3
 80093ca:	2301      	movs	r3, #1
 80093cc:	4053      	eors	r3, r2
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d112      	bne.n	80093fa <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 80093d4:	19bb      	adds	r3, r7, r6
 80093d6:	881b      	ldrh	r3, [r3, #0]
 80093d8:	3b04      	subs	r3, #4
 80093da:	68fa      	ldr	r2, [r7, #12]
 80093dc:	18d3      	adds	r3, r2, r3
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	2216      	movs	r2, #22
 80093e2:	18ba      	adds	r2, r7, r2
 80093e4:	0011      	movs	r1, r2
 80093e6:	0018      	movs	r0, r3
 80093e8:	f7ff fe1e 	bl	8009028 <ascii_to_value>
 80093ec:	0003      	movs	r3, r0
 80093ee:	001a      	movs	r2, r3
 80093f0:	2301      	movs	r3, #1
 80093f2:	4053      	eors	r3, r2
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d005      	beq.n	8009406 <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 80093fa:	4b39      	ldr	r3, [pc, #228]	; (80094e0 <astronode_decode_answer_transport+0x31c>)
 80093fc:	0018      	movs	r0, r3
 80093fe:	f7f9 fe5b 	bl	80030b8 <send_debug_logs>
        return RS_FAILURE;
 8009402:	2300      	movs	r3, #0
 8009404:	e062      	b.n	80094cc <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 8009406:	2017      	movs	r0, #23
 8009408:	183b      	adds	r3, r7, r0
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	b29b      	uxth	r3, r3
 800940e:	031b      	lsls	r3, r3, #12
 8009410:	b299      	uxth	r1, r3
 8009412:	2416      	movs	r4, #22
 8009414:	193b      	adds	r3, r7, r4
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	b29b      	uxth	r3, r3
 800941a:	021b      	lsls	r3, r3, #8
 800941c:	b29a      	uxth	r2, r3
 800941e:	2318      	movs	r3, #24
 8009420:	18fb      	adds	r3, r7, r3
 8009422:	188a      	adds	r2, r1, r2
 8009424:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 8009426:	250a      	movs	r5, #10
 8009428:	197b      	adds	r3, r7, r5
 800942a:	881b      	ldrh	r3, [r3, #0]
 800942c:	3b03      	subs	r3, #3
 800942e:	68fa      	ldr	r2, [r7, #12]
 8009430:	18d3      	adds	r3, r2, r3
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	183a      	adds	r2, r7, r0
 8009436:	0011      	movs	r1, r2
 8009438:	0018      	movs	r0, r3
 800943a:	f7ff fdf5 	bl	8009028 <ascii_to_value>
 800943e:	0003      	movs	r3, r0
 8009440:	001a      	movs	r2, r3
 8009442:	2301      	movs	r3, #1
 8009444:	4053      	eors	r3, r2
 8009446:	b2db      	uxtb	r3, r3
 8009448:	2b00      	cmp	r3, #0
 800944a:	d111      	bne.n	8009470 <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 800944c:	197b      	adds	r3, r7, r5
 800944e:	881b      	ldrh	r3, [r3, #0]
 8009450:	3b02      	subs	r3, #2
 8009452:	68fa      	ldr	r2, [r7, #12]
 8009454:	18d3      	adds	r3, r2, r3
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	193a      	adds	r2, r7, r4
 800945a:	0011      	movs	r1, r2
 800945c:	0018      	movs	r0, r3
 800945e:	f7ff fde3 	bl	8009028 <ascii_to_value>
 8009462:	0003      	movs	r3, r0
 8009464:	001a      	movs	r2, r3
 8009466:	2301      	movs	r3, #1
 8009468:	4053      	eors	r3, r2
 800946a:	b2db      	uxtb	r3, r3
 800946c:	2b00      	cmp	r3, #0
 800946e:	d005      	beq.n	800947c <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8009470:	4b1b      	ldr	r3, [pc, #108]	; (80094e0 <astronode_decode_answer_transport+0x31c>)
 8009472:	0018      	movs	r0, r3
 8009474:	f7f9 fe20 	bl	80030b8 <send_debug_logs>
        return RS_FAILURE;
 8009478:	2300      	movs	r3, #0
 800947a:	e027      	b.n	80094cc <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 800947c:	2317      	movs	r3, #23
 800947e:	18fb      	adds	r3, r7, r3
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	b29b      	uxth	r3, r3
 8009484:	011b      	lsls	r3, r3, #4
 8009486:	b29a      	uxth	r2, r3
 8009488:	2316      	movs	r3, #22
 800948a:	18fb      	adds	r3, r7, r3
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	b29b      	uxth	r3, r3
 8009490:	18d3      	adds	r3, r2, r3
 8009492:	b299      	uxth	r1, r3
 8009494:	2018      	movs	r0, #24
 8009496:	183b      	adds	r3, r7, r0
 8009498:	183a      	adds	r2, r7, r0
 800949a:	8812      	ldrh	r2, [r2, #0]
 800949c:	188a      	adds	r2, r1, r2
 800949e:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 80094a0:	183a      	adds	r2, r7, r0
 80094a2:	231a      	movs	r3, #26
 80094a4:	18fb      	adds	r3, r7, r3
 80094a6:	8812      	ldrh	r2, [r2, #0]
 80094a8:	881b      	ldrh	r3, [r3, #0]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d005      	beq.n	80094ba <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 80094ae:	4b0e      	ldr	r3, [pc, #56]	; (80094e8 <astronode_decode_answer_transport+0x324>)
 80094b0:	0018      	movs	r0, r3
 80094b2:	f7f9 fe01 	bl	80030b8 <send_debug_logs>
        return RS_FAILURE;
 80094b6:	2300      	movs	r3, #0
 80094b8:	e008      	b.n	80094cc <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	2bff      	cmp	r3, #255	; 0xff
 80094c0:	d103      	bne.n	80094ca <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	0018      	movs	r0, r3
 80094c6:	f000 f8c3 	bl	8009650 <check_for_error>
    }

    return RS_SUCCESS;
 80094ca:	2301      	movs	r3, #1
}
 80094cc:	0018      	movs	r0, r3
 80094ce:	46bd      	mov	sp, r7
 80094d0:	b009      	add	sp, #36	; 0x24
 80094d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094d4:	080145ec 	.word	0x080145ec
 80094d8:	0801463c 	.word	0x0801463c
 80094dc:	0801468c 	.word	0x0801468c
 80094e0:	080146dc 	.word	0x080146dc
 80094e4:	0000ffff 	.word	0x0000ffff
 80094e8:	08014728 	.word	0x08014728

080094ec <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 80094ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094ee:	4c2b      	ldr	r4, [pc, #172]	; (800959c <astronode_transport_send_receive+0xb0>)
 80094f0:	44a5      	add	sp, r4
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
 80094f6:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 80094f8:	4b29      	ldr	r3, [pc, #164]	; (80095a0 <astronode_transport_send_receive+0xb4>)
 80094fa:	25ca      	movs	r5, #202	; 0xca
 80094fc:	00ad      	lsls	r5, r5, #2
 80094fe:	195b      	adds	r3, r3, r5
 8009500:	19db      	adds	r3, r3, r7
 8009502:	2200      	movs	r2, #0
 8009504:	601a      	str	r2, [r3, #0]
 8009506:	3304      	adds	r3, #4
 8009508:	22c4      	movs	r2, #196	; 0xc4
 800950a:	0052      	lsls	r2, r2, #1
 800950c:	2100      	movs	r1, #0
 800950e:	0018      	movs	r0, r3
 8009510:	f003 f9a4 	bl	800c85c <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8009514:	4b23      	ldr	r3, [pc, #140]	; (80095a4 <astronode_transport_send_receive+0xb8>)
 8009516:	195b      	adds	r3, r3, r5
 8009518:	19db      	adds	r3, r3, r7
 800951a:	2200      	movs	r2, #0
 800951c:	601a      	str	r2, [r3, #0]
 800951e:	3304      	adds	r3, #4
 8009520:	22c4      	movs	r2, #196	; 0xc4
 8009522:	0052      	lsls	r2, r2, #1
 8009524:	2100      	movs	r1, #0
 8009526:	0018      	movs	r0, r3
 8009528:	f003 f998 	bl	800c85c <memset>
    uint16_t answer_length =  0;
 800952c:	4b1e      	ldr	r3, [pc, #120]	; (80095a8 <astronode_transport_send_receive+0xbc>)
 800952e:	195b      	adds	r3, r3, r5
 8009530:	19db      	adds	r3, r3, r7
 8009532:	2200      	movs	r2, #0
 8009534:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 8009536:	4e1d      	ldr	r6, [pc, #116]	; (80095ac <astronode_transport_send_receive+0xc0>)
 8009538:	19bc      	adds	r4, r7, r6
 800953a:	23cc      	movs	r3, #204	; 0xcc
 800953c:	005b      	lsls	r3, r3, #1
 800953e:	18fa      	adds	r2, r7, r3
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	0011      	movs	r1, r2
 8009544:	0018      	movs	r0, r3
 8009546:	f7ff fd9b 	bl	8009080 <astronode_create_request_transport>
 800954a:	0003      	movs	r3, r0
 800954c:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 800954e:	19bb      	adds	r3, r7, r6
 8009550:	881a      	ldrh	r2, [r3, #0]
 8009552:	23cc      	movs	r3, #204	; 0xcc
 8009554:	005b      	lsls	r3, r3, #1
 8009556:	18fb      	adds	r3, r7, r3
 8009558:	0011      	movs	r1, r2
 800955a:	0018      	movs	r0, r3
 800955c:	f7f9 fdf8 	bl	8003150 <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 8009560:	230a      	movs	r3, #10
 8009562:	18fa      	adds	r2, r7, r3
 8009564:	240c      	movs	r4, #12
 8009566:	193b      	adds	r3, r7, r4
 8009568:	0011      	movs	r1, r2
 800956a:	0018      	movs	r0, r3
 800956c:	f000 f92c 	bl	80097c8 <receive_astronode_answer>
 8009570:	0003      	movs	r3, r0
 8009572:	2b01      	cmp	r3, #1
 8009574:	d10a      	bne.n	800958c <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 8009576:	4b0c      	ldr	r3, [pc, #48]	; (80095a8 <astronode_transport_send_receive+0xbc>)
 8009578:	195b      	adds	r3, r3, r5
 800957a:	19db      	adds	r3, r3, r7
 800957c:	8819      	ldrh	r1, [r3, #0]
 800957e:	683a      	ldr	r2, [r7, #0]
 8009580:	193b      	adds	r3, r7, r4
 8009582:	0018      	movs	r0, r3
 8009584:	f7ff fe1e 	bl	80091c4 <astronode_decode_answer_transport>
 8009588:	0003      	movs	r3, r0
 800958a:	e000      	b.n	800958e <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 800958c:	2300      	movs	r3, #0
    }
}
 800958e:	0018      	movs	r0, r3
 8009590:	46bd      	mov	sp, r7
 8009592:	23cb      	movs	r3, #203	; 0xcb
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	449d      	add	sp, r3
 8009598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800959a:	46c0      	nop			; (mov r8, r8)
 800959c:	fffffcd4 	.word	0xfffffcd4
 80095a0:	fffffe70 	.word	0xfffffe70
 80095a4:	fffffce4 	.word	0xfffffce4
 80095a8:	fffffce2 	.word	0xfffffce2
 80095ac:	00000326 	.word	0x00000326

080095b0 <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 80095b0:	b590      	push	{r4, r7, lr}
 80095b2:	b085      	sub	sp, #20
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	0008      	movs	r0, r1
 80095ba:	0011      	movs	r1, r2
 80095bc:	1cbb      	adds	r3, r7, #2
 80095be:	1c02      	adds	r2, r0, #0
 80095c0:	801a      	strh	r2, [r3, #0]
 80095c2:	003b      	movs	r3, r7
 80095c4:	1c0a      	adds	r2, r1, #0
 80095c6:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 80095c8:	230e      	movs	r3, #14
 80095ca:	18fb      	adds	r3, r7, r3
 80095cc:	003a      	movs	r2, r7
 80095ce:	8812      	ldrh	r2, [r2, #0]
 80095d0:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 80095d2:	e02e      	b.n	8009632 <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 80095d4:	240e      	movs	r4, #14
 80095d6:	193b      	adds	r3, r7, r4
 80095d8:	881b      	ldrh	r3, [r3, #0]
 80095da:	0a1b      	lsrs	r3, r3, #8
 80095dc:	b299      	uxth	r1, r3
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	1c5a      	adds	r2, r3, #1
 80095e2:	607a      	str	r2, [r7, #4]
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	b29a      	uxth	r2, r3
 80095e8:	200c      	movs	r0, #12
 80095ea:	183b      	adds	r3, r7, r0
 80095ec:	404a      	eors	r2, r1
 80095ee:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 80095f0:	183b      	adds	r3, r7, r0
 80095f2:	881b      	ldrh	r3, [r3, #0]
 80095f4:	091b      	lsrs	r3, r3, #4
 80095f6:	b299      	uxth	r1, r3
 80095f8:	183b      	adds	r3, r7, r0
 80095fa:	183a      	adds	r2, r7, r0
 80095fc:	8812      	ldrh	r2, [r2, #0]
 80095fe:	404a      	eors	r2, r1
 8009600:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 8009602:	0021      	movs	r1, r4
 8009604:	187b      	adds	r3, r7, r1
 8009606:	881b      	ldrh	r3, [r3, #0]
 8009608:	021b      	lsls	r3, r3, #8
 800960a:	b21a      	sxth	r2, r3
 800960c:	183b      	adds	r3, r7, r0
 800960e:	881b      	ldrh	r3, [r3, #0]
 8009610:	031b      	lsls	r3, r3, #12
 8009612:	b21b      	sxth	r3, r3
 8009614:	4053      	eors	r3, r2
 8009616:	b21a      	sxth	r2, r3
 8009618:	183b      	adds	r3, r7, r0
 800961a:	881b      	ldrh	r3, [r3, #0]
 800961c:	015b      	lsls	r3, r3, #5
 800961e:	b21b      	sxth	r3, r3
 8009620:	4053      	eors	r3, r2
 8009622:	b21a      	sxth	r2, r3
 8009624:	183b      	adds	r3, r7, r0
 8009626:	2000      	movs	r0, #0
 8009628:	5e1b      	ldrsh	r3, [r3, r0]
 800962a:	4053      	eors	r3, r2
 800962c:	b21a      	sxth	r2, r3
 800962e:	187b      	adds	r3, r7, r1
 8009630:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 8009632:	1cbb      	adds	r3, r7, #2
 8009634:	881b      	ldrh	r3, [r3, #0]
 8009636:	1cba      	adds	r2, r7, #2
 8009638:	1e59      	subs	r1, r3, #1
 800963a:	8011      	strh	r1, [r2, #0]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d1c9      	bne.n	80095d4 <calculate_crc+0x24>
    }
    return crc;
 8009640:	230e      	movs	r3, #14
 8009642:	18fb      	adds	r3, r7, r3
 8009644:	881b      	ldrh	r3, [r3, #0]
}
 8009646:	0018      	movs	r0, r3
 8009648:	46bd      	mov	sp, r7
 800964a:	b005      	add	sp, #20
 800964c:	bd90      	pop	{r4, r7, pc}
	...

08009650 <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	785b      	ldrb	r3, [r3, #1]
 800965c:	b299      	uxth	r1, r3
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	789b      	ldrb	r3, [r3, #2]
 8009662:	b29b      	uxth	r3, r3
 8009664:	021b      	lsls	r3, r3, #8
 8009666:	b29a      	uxth	r2, r3
 8009668:	200e      	movs	r0, #14
 800966a:	183b      	adds	r3, r7, r0
 800966c:	188a      	adds	r2, r1, r2
 800966e:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 8009670:	183b      	adds	r3, r7, r0
 8009672:	881b      	ldrh	r3, [r3, #0]
 8009674:	4a40      	ldr	r2, [pc, #256]	; (8009778 <check_for_error+0x128>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d100      	bne.n	800967c <check_for_error+0x2c>
 800967a:	e06f      	b.n	800975c <check_for_error+0x10c>
 800967c:	4a3e      	ldr	r2, [pc, #248]	; (8009778 <check_for_error+0x128>)
 800967e:	4293      	cmp	r3, r2
 8009680:	dd00      	ble.n	8009684 <check_for_error+0x34>
 8009682:	e070      	b.n	8009766 <check_for_error+0x116>
 8009684:	4a3d      	ldr	r2, [pc, #244]	; (800977c <check_for_error+0x12c>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d100      	bne.n	800968c <check_for_error+0x3c>
 800968a:	e062      	b.n	8009752 <check_for_error+0x102>
 800968c:	4a3b      	ldr	r2, [pc, #236]	; (800977c <check_for_error+0x12c>)
 800968e:	4293      	cmp	r3, r2
 8009690:	dd00      	ble.n	8009694 <check_for_error+0x44>
 8009692:	e068      	b.n	8009766 <check_for_error+0x116>
 8009694:	4a3a      	ldr	r2, [pc, #232]	; (8009780 <check_for_error+0x130>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d056      	beq.n	8009748 <check_for_error+0xf8>
 800969a:	4a39      	ldr	r2, [pc, #228]	; (8009780 <check_for_error+0x130>)
 800969c:	4293      	cmp	r3, r2
 800969e:	dd00      	ble.n	80096a2 <check_for_error+0x52>
 80096a0:	e061      	b.n	8009766 <check_for_error+0x116>
 80096a2:	4a38      	ldr	r2, [pc, #224]	; (8009784 <check_for_error+0x134>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d04a      	beq.n	800973e <check_for_error+0xee>
 80096a8:	4a36      	ldr	r2, [pc, #216]	; (8009784 <check_for_error+0x134>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	dc5b      	bgt.n	8009766 <check_for_error+0x116>
 80096ae:	4a36      	ldr	r2, [pc, #216]	; (8009788 <check_for_error+0x138>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d03f      	beq.n	8009734 <check_for_error+0xe4>
 80096b4:	4a34      	ldr	r2, [pc, #208]	; (8009788 <check_for_error+0x138>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	dc55      	bgt.n	8009766 <check_for_error+0x116>
 80096ba:	4a34      	ldr	r2, [pc, #208]	; (800978c <check_for_error+0x13c>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d034      	beq.n	800972a <check_for_error+0xda>
 80096c0:	4a32      	ldr	r2, [pc, #200]	; (800978c <check_for_error+0x13c>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	dc4f      	bgt.n	8009766 <check_for_error+0x116>
 80096c6:	4a32      	ldr	r2, [pc, #200]	; (8009790 <check_for_error+0x140>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d029      	beq.n	8009720 <check_for_error+0xd0>
 80096cc:	4a30      	ldr	r2, [pc, #192]	; (8009790 <check_for_error+0x140>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	dc49      	bgt.n	8009766 <check_for_error+0x116>
 80096d2:	4a30      	ldr	r2, [pc, #192]	; (8009794 <check_for_error+0x144>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d01e      	beq.n	8009716 <check_for_error+0xc6>
 80096d8:	4a2e      	ldr	r2, [pc, #184]	; (8009794 <check_for_error+0x144>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	dc43      	bgt.n	8009766 <check_for_error+0x116>
 80096de:	2222      	movs	r2, #34	; 0x22
 80096e0:	32ff      	adds	r2, #255	; 0xff
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d012      	beq.n	800970c <check_for_error+0xbc>
 80096e6:	2291      	movs	r2, #145	; 0x91
 80096e8:	0052      	lsls	r2, r2, #1
 80096ea:	4293      	cmp	r3, r2
 80096ec:	da3b      	bge.n	8009766 <check_for_error+0x116>
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d002      	beq.n	80096f8 <check_for_error+0xa8>
 80096f2:	2b11      	cmp	r3, #17
 80096f4:	d005      	beq.n	8009702 <check_for_error+0xb2>
 80096f6:	e036      	b.n	8009766 <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 80096f8:	4b27      	ldr	r3, [pc, #156]	; (8009798 <check_for_error+0x148>)
 80096fa:	0018      	movs	r0, r3
 80096fc:	f7f9 fcdc 	bl	80030b8 <send_debug_logs>
            break;
 8009700:	e036      	b.n	8009770 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 8009702:	4b26      	ldr	r3, [pc, #152]	; (800979c <check_for_error+0x14c>)
 8009704:	0018      	movs	r0, r3
 8009706:	f7f9 fcd7 	bl	80030b8 <send_debug_logs>
            break;
 800970a:	e031      	b.n	8009770 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 800970c:	4b24      	ldr	r3, [pc, #144]	; (80097a0 <check_for_error+0x150>)
 800970e:	0018      	movs	r0, r3
 8009710:	f7f9 fcd2 	bl	80030b8 <send_debug_logs>
            break;
 8009714:	e02c      	b.n	8009770 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 8009716:	4b23      	ldr	r3, [pc, #140]	; (80097a4 <check_for_error+0x154>)
 8009718:	0018      	movs	r0, r3
 800971a:	f7f9 fccd 	bl	80030b8 <send_debug_logs>
            break;
 800971e:	e027      	b.n	8009770 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 8009720:	4b21      	ldr	r3, [pc, #132]	; (80097a8 <check_for_error+0x158>)
 8009722:	0018      	movs	r0, r3
 8009724:	f7f9 fcc8 	bl	80030b8 <send_debug_logs>
            break;
 8009728:	e022      	b.n	8009770 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 800972a:	4b20      	ldr	r3, [pc, #128]	; (80097ac <check_for_error+0x15c>)
 800972c:	0018      	movs	r0, r3
 800972e:	f7f9 fcc3 	bl	80030b8 <send_debug_logs>
            break;
 8009732:	e01d      	b.n	8009770 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 8009734:	4b1e      	ldr	r3, [pc, #120]	; (80097b0 <check_for_error+0x160>)
 8009736:	0018      	movs	r0, r3
 8009738:	f7f9 fcbe 	bl	80030b8 <send_debug_logs>
            break;
 800973c:	e018      	b.n	8009770 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 800973e:	4b1d      	ldr	r3, [pc, #116]	; (80097b4 <check_for_error+0x164>)
 8009740:	0018      	movs	r0, r3
 8009742:	f7f9 fcb9 	bl	80030b8 <send_debug_logs>
            break;
 8009746:	e013      	b.n	8009770 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 8009748:	4b1b      	ldr	r3, [pc, #108]	; (80097b8 <check_for_error+0x168>)
 800974a:	0018      	movs	r0, r3
 800974c:	f7f9 fcb4 	bl	80030b8 <send_debug_logs>
            break;
 8009750:	e00e      	b.n	8009770 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 8009752:	4b1a      	ldr	r3, [pc, #104]	; (80097bc <check_for_error+0x16c>)
 8009754:	0018      	movs	r0, r3
 8009756:	f7f9 fcaf 	bl	80030b8 <send_debug_logs>
            break;
 800975a:	e009      	b.n	8009770 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 800975c:	4b18      	ldr	r3, [pc, #96]	; (80097c0 <check_for_error+0x170>)
 800975e:	0018      	movs	r0, r3
 8009760:	f7f9 fcaa 	bl	80030b8 <send_debug_logs>
            break;
 8009764:	e004      	b.n	8009770 <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 8009766:	4b17      	ldr	r3, [pc, #92]	; (80097c4 <check_for_error+0x174>)
 8009768:	0018      	movs	r0, r3
 800976a:	f7f9 fca5 	bl	80030b8 <send_debug_logs>
            break;
 800976e:	46c0      	nop			; (mov r8, r8)
    }
}
 8009770:	46c0      	nop			; (mov r8, r8)
 8009772:	46bd      	mov	sp, r7
 8009774:	b004      	add	sp, #16
 8009776:	bd80      	pop	{r7, pc}
 8009778:	00004601 	.word	0x00004601
 800977c:	00004501 	.word	0x00004501
 8009780:	00003501 	.word	0x00003501
 8009784:	00002601 	.word	0x00002601
 8009788:	00002511 	.word	0x00002511
 800978c:	00002501 	.word	0x00002501
 8009790:	00000611 	.word	0x00000611
 8009794:	00000601 	.word	0x00000601
 8009798:	0801476c 	.word	0x0801476c
 800979c:	080147b8 	.word	0x080147b8
 80097a0:	0801481c 	.word	0x0801481c
 80097a4:	08014854 	.word	0x08014854
 80097a8:	080148f8 	.word	0x080148f8
 80097ac:	08014960 	.word	0x08014960
 80097b0:	080149c0 	.word	0x080149c0
 80097b4:	08014a4c 	.word	0x08014a4c
 80097b8:	08014aac 	.word	0x08014aac
 80097bc:	08014b58 	.word	0x08014b58
 80097c0:	08014ba4 	.word	0x08014ba4
 80097c4:	08014bec 	.word	0x08014bec

080097c8 <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 80097c8:	b5b0      	push	{r4, r5, r7, lr}
 80097ca:	b086      	sub	sp, #24
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 80097d2:	230f      	movs	r3, #15
 80097d4:	18fb      	adds	r3, r7, r3
 80097d6:	2200      	movs	r2, #0
 80097d8:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 80097da:	2316      	movs	r3, #22
 80097dc:	18fb      	adds	r3, r7, r3
 80097de:	2200      	movs	r2, #0
 80097e0:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 80097e2:	f7f9 fcf9 	bl	80031d8 <get_systick>
 80097e6:	0003      	movs	r3, r0
 80097e8:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 80097ea:	2315      	movs	r3, #21
 80097ec:	18fb      	adds	r3, r7, r3
 80097ee:	2200      	movs	r2, #0
 80097f0:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 80097f2:	e054      	b.n	800989e <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 80097f4:	4a34      	ldr	r2, [pc, #208]	; (80098c8 <receive_astronode_answer+0x100>)
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	0011      	movs	r1, r2
 80097fa:	0018      	movs	r0, r3
 80097fc:	f7f9 fcf4 	bl	80031e8 <is_systick_timeout_over>
 8009800:	1e03      	subs	r3, r0, #0
 8009802:	d005      	beq.n	8009810 <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 8009804:	4b31      	ldr	r3, [pc, #196]	; (80098cc <receive_astronode_answer+0x104>)
 8009806:	0018      	movs	r0, r3
 8009808:	f7f9 fc56 	bl	80030b8 <send_debug_logs>
            return RS_FAILURE;
 800980c:	2300      	movs	r3, #0
 800980e:	e057      	b.n	80098c0 <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 8009810:	250f      	movs	r5, #15
 8009812:	197b      	adds	r3, r7, r5
 8009814:	0018      	movs	r0, r3
 8009816:	f7f9 fcb9 	bl	800318c <is_astronode_character_received>
 800981a:	0003      	movs	r3, r0
 800981c:	0019      	movs	r1, r3
 800981e:	2016      	movs	r0, #22
 8009820:	183b      	adds	r3, r7, r0
 8009822:	183a      	adds	r2, r7, r0
 8009824:	8812      	ldrh	r2, [r2, #0]
 8009826:	801a      	strh	r2, [r3, #0]
 8009828:	2415      	movs	r4, #21
 800982a:	193b      	adds	r3, r7, r4
 800982c:	193a      	adds	r2, r7, r4
 800982e:	7812      	ldrb	r2, [r2, #0]
 8009830:	701a      	strb	r2, [r3, #0]
 8009832:	2900      	cmp	r1, #0
 8009834:	d033      	beq.n	800989e <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 8009836:	197b      	adds	r3, r7, r5
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	2b02      	cmp	r3, #2
 800983c:	d105      	bne.n	800984a <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 800983e:	193b      	adds	r3, r7, r4
 8009840:	2200      	movs	r2, #0
 8009842:	701a      	strb	r2, [r3, #0]
                length = 0;
 8009844:	183b      	adds	r3, r7, r0
 8009846:	2200      	movs	r2, #0
 8009848:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 800984a:	2116      	movs	r1, #22
 800984c:	187b      	adds	r3, r7, r1
 800984e:	881b      	ldrh	r3, [r3, #0]
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	18d3      	adds	r3, r2, r3
 8009854:	220f      	movs	r2, #15
 8009856:	18ba      	adds	r2, r7, r2
 8009858:	7812      	ldrb	r2, [r2, #0]
 800985a:	701a      	strb	r2, [r3, #0]
            length++;
 800985c:	187b      	adds	r3, r7, r1
 800985e:	881a      	ldrh	r2, [r3, #0]
 8009860:	187b      	adds	r3, r7, r1
 8009862:	3201      	adds	r2, #1
 8009864:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 8009866:	187b      	adds	r3, r7, r1
 8009868:	881b      	ldrh	r3, [r3, #0]
 800986a:	2bb2      	cmp	r3, #178	; 0xb2
 800986c:	d905      	bls.n	800987a <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 800986e:	4b18      	ldr	r3, [pc, #96]	; (80098d0 <receive_astronode_answer+0x108>)
 8009870:	0018      	movs	r0, r3
 8009872:	f7f9 fc21 	bl	80030b8 <send_debug_logs>
                return RS_FAILURE;
 8009876:	2300      	movs	r3, #0
 8009878:	e022      	b.n	80098c0 <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 800987a:	230f      	movs	r3, #15
 800987c:	18fb      	adds	r3, r7, r3
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	2b03      	cmp	r3, #3
 8009882:	d10c      	bne.n	800989e <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 8009884:	2216      	movs	r2, #22
 8009886:	18bb      	adds	r3, r7, r2
 8009888:	881b      	ldrh	r3, [r3, #0]
 800988a:	2b01      	cmp	r3, #1
 800988c:	d907      	bls.n	800989e <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	18ba      	adds	r2, r7, r2
 8009892:	8812      	ldrh	r2, [r2, #0]
 8009894:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 8009896:	2315      	movs	r3, #21
 8009898:	18fb      	adds	r3, r7, r3
 800989a:	2201      	movs	r2, #1
 800989c:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 800989e:	2315      	movs	r3, #21
 80098a0:	18fb      	adds	r3, r7, r3
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	2201      	movs	r2, #1
 80098a6:	4053      	eors	r3, r2
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d1a2      	bne.n	80097f4 <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 80098ae:	4b09      	ldr	r3, [pc, #36]	; (80098d4 <receive_astronode_answer+0x10c>)
 80098b0:	0018      	movs	r0, r3
 80098b2:	f7f9 fc01 	bl	80030b8 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	0018      	movs	r0, r3
 80098ba:	f7f9 fbfd 	bl	80030b8 <send_debug_logs>

    return RS_SUCCESS;
 80098be:	2301      	movs	r3, #1
}
 80098c0:	0018      	movs	r0, r3
 80098c2:	46bd      	mov	sp, r7
 80098c4:	b006      	add	sp, #24
 80098c6:	bdb0      	pop	{r4, r5, r7, pc}
 80098c8:	000005dc 	.word	0x000005dc
 80098cc:	08014c10 	.word	0x08014c10
 80098d0:	08014c34 	.word	0x08014c34
 80098d4:	08014c80 	.word	0x08014c80

080098d8 <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b082      	sub	sp, #8
 80098dc:	af00      	add	r7, sp, #0
 80098de:	0002      	movs	r2, r0
 80098e0:	6039      	str	r1, [r7, #0]
 80098e2:	1dfb      	adds	r3, r7, #7
 80098e4:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 80098e6:	1dfb      	adds	r3, r7, #7
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	091b      	lsrs	r3, r3, #4
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	001a      	movs	r2, r3
 80098f0:	4b08      	ldr	r3, [pc, #32]	; (8009914 <uint8_to_ascii_buffer+0x3c>)
 80098f2:	5c9a      	ldrb	r2, [r3, r2]
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 80098f8:	1dfb      	adds	r3, r7, #7
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	220f      	movs	r2, #15
 80098fe:	401a      	ands	r2, r3
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	3301      	adds	r3, #1
 8009904:	4903      	ldr	r1, [pc, #12]	; (8009914 <uint8_to_ascii_buffer+0x3c>)
 8009906:	5c8a      	ldrb	r2, [r1, r2]
 8009908:	701a      	strb	r2, [r3, #0]
}
 800990a:	46c0      	nop			; (mov r8, r8)
 800990c:	46bd      	mov	sp, r7
 800990e:	b002      	add	sp, #8
 8009910:	bd80      	pop	{r7, pc}
 8009912:	46c0      	nop			; (mov r8, r8)
 8009914:	08014ee4 	.word	0x08014ee4

08009918 <lis2dw12_read_reg>:
  *
  */
int32_t __weak lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8009918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800991a:	b087      	sub	sp, #28
 800991c:	af00      	add	r7, sp, #0
 800991e:	60f8      	str	r0, [r7, #12]
 8009920:	0008      	movs	r0, r1
 8009922:	607a      	str	r2, [r7, #4]
 8009924:	0019      	movs	r1, r3
 8009926:	260b      	movs	r6, #11
 8009928:	19bb      	adds	r3, r7, r6
 800992a:	1c02      	adds	r2, r0, #0
 800992c:	701a      	strb	r2, [r3, #0]
 800992e:	2508      	movs	r5, #8
 8009930:	197b      	adds	r3, r7, r5
 8009932:	1c0a      	adds	r2, r1, #0
 8009934:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	685c      	ldr	r4, [r3, #4]
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	68d8      	ldr	r0, [r3, #12]
 800993e:	197b      	adds	r3, r7, r5
 8009940:	881d      	ldrh	r5, [r3, #0]
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	19bb      	adds	r3, r7, r6
 8009946:	7819      	ldrb	r1, [r3, #0]
 8009948:	002b      	movs	r3, r5
 800994a:	47a0      	blx	r4
 800994c:	0003      	movs	r3, r0
 800994e:	617b      	str	r3, [r7, #20]

  return ret;
 8009950:	697b      	ldr	r3, [r7, #20]
}
 8009952:	0018      	movs	r0, r3
 8009954:	46bd      	mov	sp, r7
 8009956:	b007      	add	sp, #28
 8009958:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800995a <lis2dw12_write_reg>:
  *
  */
int32_t __weak lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 800995a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800995c:	b087      	sub	sp, #28
 800995e:	af00      	add	r7, sp, #0
 8009960:	60f8      	str	r0, [r7, #12]
 8009962:	0008      	movs	r0, r1
 8009964:	607a      	str	r2, [r7, #4]
 8009966:	0019      	movs	r1, r3
 8009968:	260b      	movs	r6, #11
 800996a:	19bb      	adds	r3, r7, r6
 800996c:	1c02      	adds	r2, r0, #0
 800996e:	701a      	strb	r2, [r3, #0]
 8009970:	2508      	movs	r5, #8
 8009972:	197b      	adds	r3, r7, r5
 8009974:	1c0a      	adds	r2, r1, #0
 8009976:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681c      	ldr	r4, [r3, #0]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	68d8      	ldr	r0, [r3, #12]
 8009980:	197b      	adds	r3, r7, r5
 8009982:	881d      	ldrh	r5, [r3, #0]
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	19bb      	adds	r3, r7, r6
 8009988:	7819      	ldrb	r1, [r3, #0]
 800998a:	002b      	movs	r3, r5
 800998c:	47a0      	blx	r4
 800998e:	0003      	movs	r3, r0
 8009990:	617b      	str	r3, [r7, #20]

  return ret;
 8009992:	697b      	ldr	r3, [r7, #20]
}
 8009994:	0018      	movs	r0, r3
 8009996:	46bd      	mov	sp, r7
 8009998:	b007      	add	sp, #28
 800999a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800999c <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 800999c:	b590      	push	{r4, r7, lr}
 800999e:	b087      	sub	sp, #28
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	000a      	movs	r2, r1
 80099a6:	1cfb      	adds	r3, r7, #3
 80099a8:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80099aa:	2410      	movs	r4, #16
 80099ac:	193a      	adds	r2, r7, r4
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	2301      	movs	r3, #1
 80099b2:	2120      	movs	r1, #32
 80099b4:	f7ff ffb0 	bl	8009918 <lis2dw12_read_reg>
 80099b8:	0003      	movs	r3, r0
 80099ba:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d129      	bne.n	8009a16 <lis2dw12_power_mode_set+0x7a>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 80099c2:	1cfb      	adds	r3, r7, #3
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	089b      	lsrs	r3, r3, #2
 80099c8:	1c1a      	adds	r2, r3, #0
 80099ca:	2303      	movs	r3, #3
 80099cc:	4013      	ands	r3, r2
 80099ce:	b2da      	uxtb	r2, r3
 80099d0:	193b      	adds	r3, r7, r4
 80099d2:	2103      	movs	r1, #3
 80099d4:	400a      	ands	r2, r1
 80099d6:	0090      	lsls	r0, r2, #2
 80099d8:	781a      	ldrb	r2, [r3, #0]
 80099da:	210c      	movs	r1, #12
 80099dc:	438a      	bics	r2, r1
 80099de:	1c11      	adds	r1, r2, #0
 80099e0:	1c02      	adds	r2, r0, #0
 80099e2:	430a      	orrs	r2, r1
 80099e4:	701a      	strb	r2, [r3, #0]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 80099e6:	1cfb      	adds	r3, r7, #3
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	2203      	movs	r2, #3
 80099ec:	4013      	ands	r3, r2
 80099ee:	b2da      	uxtb	r2, r3
 80099f0:	193b      	adds	r3, r7, r4
 80099f2:	2103      	movs	r1, #3
 80099f4:	400a      	ands	r2, r1
 80099f6:	0010      	movs	r0, r2
 80099f8:	781a      	ldrb	r2, [r3, #0]
 80099fa:	2103      	movs	r1, #3
 80099fc:	438a      	bics	r2, r1
 80099fe:	1c11      	adds	r1, r2, #0
 8009a00:	1c02      	adds	r2, r0, #0
 8009a02:	430a      	orrs	r2, r1
 8009a04:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8009a06:	193a      	adds	r2, r7, r4
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	2120      	movs	r1, #32
 8009a0e:	f7ff ffa4 	bl	800995a <lis2dw12_write_reg>
 8009a12:	0003      	movs	r3, r0
 8009a14:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d108      	bne.n	8009a2e <lis2dw12_power_mode_set+0x92>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8009a1c:	230c      	movs	r3, #12
 8009a1e:	18fa      	adds	r2, r7, r3
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	2301      	movs	r3, #1
 8009a24:	2125      	movs	r1, #37	; 0x25
 8009a26:	f7ff ff77 	bl	8009918 <lis2dw12_read_reg>
 8009a2a:	0003      	movs	r3, r0
 8009a2c:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d11a      	bne.n	8009a6a <lis2dw12_power_mode_set+0xce>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8009a34:	1cfb      	adds	r3, r7, #3
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	091b      	lsrs	r3, r3, #4
 8009a3a:	1c1a      	adds	r2, r3, #0
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	4013      	ands	r3, r2
 8009a40:	b2da      	uxtb	r2, r3
 8009a42:	240c      	movs	r4, #12
 8009a44:	193b      	adds	r3, r7, r4
 8009a46:	2101      	movs	r1, #1
 8009a48:	400a      	ands	r2, r1
 8009a4a:	0090      	lsls	r0, r2, #2
 8009a4c:	781a      	ldrb	r2, [r3, #0]
 8009a4e:	2104      	movs	r1, #4
 8009a50:	438a      	bics	r2, r1
 8009a52:	1c11      	adds	r1, r2, #0
 8009a54:	1c02      	adds	r2, r0, #0
 8009a56:	430a      	orrs	r2, r1
 8009a58:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8009a5a:	193a      	adds	r2, r7, r4
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	2301      	movs	r3, #1
 8009a60:	2125      	movs	r1, #37	; 0x25
 8009a62:	f7ff ff7a 	bl	800995a <lis2dw12_write_reg>
 8009a66:	0003      	movs	r3, r0
 8009a68:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8009a6a:	697b      	ldr	r3, [r7, #20]
}
 8009a6c:	0018      	movs	r0, r3
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	b007      	add	sp, #28
 8009a72:	bd90      	pop	{r4, r7, pc}

08009a74 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8009a74:	b590      	push	{r4, r7, lr}
 8009a76:	b087      	sub	sp, #28
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	000a      	movs	r2, r1
 8009a7e:	1cfb      	adds	r3, r7, #3
 8009a80:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8009a82:	2410      	movs	r4, #16
 8009a84:	193a      	adds	r2, r7, r4
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	2301      	movs	r3, #1
 8009a8a:	2120      	movs	r1, #32
 8009a8c:	f7ff ff44 	bl	8009918 <lis2dw12_read_reg>
 8009a90:	0003      	movs	r3, r0
 8009a92:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d115      	bne.n	8009ac6 <lis2dw12_data_rate_set+0x52>
  {
    ctrl1.odr = (uint8_t) val;
 8009a9a:	1cfb      	adds	r3, r7, #3
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	220f      	movs	r2, #15
 8009aa0:	4013      	ands	r3, r2
 8009aa2:	b2da      	uxtb	r2, r3
 8009aa4:	193b      	adds	r3, r7, r4
 8009aa6:	0110      	lsls	r0, r2, #4
 8009aa8:	781a      	ldrb	r2, [r3, #0]
 8009aaa:	210f      	movs	r1, #15
 8009aac:	400a      	ands	r2, r1
 8009aae:	1c11      	adds	r1, r2, #0
 8009ab0:	1c02      	adds	r2, r0, #0
 8009ab2:	430a      	orrs	r2, r1
 8009ab4:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8009ab6:	193a      	adds	r2, r7, r4
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	2301      	movs	r3, #1
 8009abc:	2120      	movs	r1, #32
 8009abe:	f7ff ff4c 	bl	800995a <lis2dw12_write_reg>
 8009ac2:	0003      	movs	r3, r0
 8009ac4:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d108      	bne.n	8009ade <lis2dw12_data_rate_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8009acc:	230c      	movs	r3, #12
 8009ace:	18fa      	adds	r2, r7, r3
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	2122      	movs	r1, #34	; 0x22
 8009ad6:	f7ff ff1f 	bl	8009918 <lis2dw12_read_reg>
 8009ada:	0003      	movs	r3, r0
 8009adc:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d11a      	bne.n	8009b1a <lis2dw12_data_rate_set+0xa6>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8009ae4:	1cfb      	adds	r3, r7, #3
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	091b      	lsrs	r3, r3, #4
 8009aea:	1c1a      	adds	r2, r3, #0
 8009aec:	2303      	movs	r3, #3
 8009aee:	4013      	ands	r3, r2
 8009af0:	b2da      	uxtb	r2, r3
 8009af2:	240c      	movs	r4, #12
 8009af4:	193b      	adds	r3, r7, r4
 8009af6:	2103      	movs	r1, #3
 8009af8:	400a      	ands	r2, r1
 8009afa:	0010      	movs	r0, r2
 8009afc:	781a      	ldrb	r2, [r3, #0]
 8009afe:	2103      	movs	r1, #3
 8009b00:	438a      	bics	r2, r1
 8009b02:	1c11      	adds	r1, r2, #0
 8009b04:	1c02      	adds	r2, r0, #0
 8009b06:	430a      	orrs	r2, r1
 8009b08:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8009b0a:	193a      	adds	r2, r7, r4
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	2301      	movs	r3, #1
 8009b10:	2122      	movs	r1, #34	; 0x22
 8009b12:	f7ff ff22 	bl	800995a <lis2dw12_write_reg>
 8009b16:	0003      	movs	r3, r0
 8009b18:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8009b1a:	697b      	ldr	r3, [r7, #20]
}
 8009b1c:	0018      	movs	r0, r3
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	b007      	add	sp, #28
 8009b22:	bd90      	pop	{r4, r7, pc}

08009b24 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8009b24:	b590      	push	{r4, r7, lr}
 8009b26:	b085      	sub	sp, #20
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	000a      	movs	r2, r1
 8009b2e:	1cfb      	adds	r3, r7, #3
 8009b30:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8009b32:	2408      	movs	r4, #8
 8009b34:	193a      	adds	r2, r7, r4
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	2301      	movs	r3, #1
 8009b3a:	2125      	movs	r1, #37	; 0x25
 8009b3c:	f7ff feec 	bl	8009918 <lis2dw12_read_reg>
 8009b40:	0003      	movs	r3, r0
 8009b42:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d117      	bne.n	8009b7a <lis2dw12_full_scale_set+0x56>
  {
    reg.fs = (uint8_t) val;
 8009b4a:	1cfb      	adds	r3, r7, #3
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	2203      	movs	r2, #3
 8009b50:	4013      	ands	r3, r2
 8009b52:	b2da      	uxtb	r2, r3
 8009b54:	193b      	adds	r3, r7, r4
 8009b56:	2103      	movs	r1, #3
 8009b58:	400a      	ands	r2, r1
 8009b5a:	0110      	lsls	r0, r2, #4
 8009b5c:	781a      	ldrb	r2, [r3, #0]
 8009b5e:	2130      	movs	r1, #48	; 0x30
 8009b60:	438a      	bics	r2, r1
 8009b62:	1c11      	adds	r1, r2, #0
 8009b64:	1c02      	adds	r2, r0, #0
 8009b66:	430a      	orrs	r2, r1
 8009b68:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8009b6a:	193a      	adds	r2, r7, r4
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	2301      	movs	r3, #1
 8009b70:	2125      	movs	r1, #37	; 0x25
 8009b72:	f7ff fef2 	bl	800995a <lis2dw12_write_reg>
 8009b76:	0003      	movs	r3, r0
 8009b78:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
}
 8009b7c:	0018      	movs	r0, r3
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	b005      	add	sp, #20
 8009b82:	bd90      	pop	{r4, r7, pc}

08009b84 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8009b8e:	683a      	ldr	r2, [r7, #0]
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	2301      	movs	r3, #1
 8009b94:	210f      	movs	r1, #15
 8009b96:	f7ff febf 	bl	8009918 <lis2dw12_read_reg>
 8009b9a:	0003      	movs	r3, r0
 8009b9c:	60fb      	str	r3, [r7, #12]

  return ret;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
}
 8009ba0:	0018      	movs	r0, r3
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	b004      	add	sp, #16
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <lis2dw12_reset_set>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8009ba8:	b590      	push	{r4, r7, lr}
 8009baa:	b085      	sub	sp, #20
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	000a      	movs	r2, r1
 8009bb2:	1cfb      	adds	r3, r7, #3
 8009bb4:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8009bb6:	2408      	movs	r4, #8
 8009bb8:	193a      	adds	r2, r7, r4
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	2121      	movs	r1, #33	; 0x21
 8009bc0:	f7ff feaa 	bl	8009918 <lis2dw12_read_reg>
 8009bc4:	0003      	movs	r3, r0
 8009bc6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d117      	bne.n	8009bfe <lis2dw12_reset_set+0x56>
  {
    reg.soft_reset = val;
 8009bce:	1cfb      	adds	r3, r7, #3
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	4013      	ands	r3, r2
 8009bd6:	b2da      	uxtb	r2, r3
 8009bd8:	193b      	adds	r3, r7, r4
 8009bda:	2101      	movs	r1, #1
 8009bdc:	400a      	ands	r2, r1
 8009bde:	0190      	lsls	r0, r2, #6
 8009be0:	781a      	ldrb	r2, [r3, #0]
 8009be2:	2140      	movs	r1, #64	; 0x40
 8009be4:	438a      	bics	r2, r1
 8009be6:	1c11      	adds	r1, r2, #0
 8009be8:	1c02      	adds	r2, r0, #0
 8009bea:	430a      	orrs	r2, r1
 8009bec:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8009bee:	193a      	adds	r2, r7, r4
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	2121      	movs	r1, #33	; 0x21
 8009bf6:	f7ff feb0 	bl	800995a <lis2dw12_write_reg>
 8009bfa:	0003      	movs	r3, r0
 8009bfc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
}
 8009c00:	0018      	movs	r0, r3
 8009c02:	46bd      	mov	sp, r7
 8009c04:	b005      	add	sp, #20
 8009c06:	bd90      	pop	{r4, r7, pc}

08009c08 <lis2dw12_reset_get>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8009c08:	b590      	push	{r4, r7, lr}
 8009c0a:	b085      	sub	sp, #20
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8009c12:	2408      	movs	r4, #8
 8009c14:	193a      	adds	r2, r7, r4
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	2301      	movs	r3, #1
 8009c1a:	2121      	movs	r1, #33	; 0x21
 8009c1c:	f7ff fe7c 	bl	8009918 <lis2dw12_read_reg>
 8009c20:	0003      	movs	r3, r0
 8009c22:	60fb      	str	r3, [r7, #12]
  *val = reg.soft_reset;
 8009c24:	193b      	adds	r3, r7, r4
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	065b      	lsls	r3, r3, #25
 8009c2a:	0fdb      	lsrs	r3, r3, #31
 8009c2c:	b2db      	uxtb	r3, r3
 8009c2e:	001a      	movs	r2, r3
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	701a      	strb	r2, [r3, #0]

  return ret;
 8009c34:	68fb      	ldr	r3, [r7, #12]
}
 8009c36:	0018      	movs	r0, r3
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	b005      	add	sp, #20
 8009c3c:	bd90      	pop	{r4, r7, pc}

08009c3e <lis2dw12_filter_path_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_filter_path_set(stmdev_ctx_t *ctx,
                                 lis2dw12_fds_t val)
{
 8009c3e:	b590      	push	{r4, r7, lr}
 8009c40:	b087      	sub	sp, #28
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
 8009c46:	000a      	movs	r2, r1
 8009c48:	1cfb      	adds	r3, r7, #3
 8009c4a:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t ctrl6;
  lis2dw12_ctrl_reg7_t ctrl_reg7;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8009c4c:	2410      	movs	r4, #16
 8009c4e:	193a      	adds	r2, r7, r4
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	2301      	movs	r3, #1
 8009c54:	2125      	movs	r1, #37	; 0x25
 8009c56:	f7ff fe5f 	bl	8009918 <lis2dw12_read_reg>
 8009c5a:	0003      	movs	r3, r0
 8009c5c:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d119      	bne.n	8009c98 <lis2dw12_filter_path_set+0x5a>
  {
    ctrl6.fds = ((uint8_t) val & 0x10U) >> 4;
 8009c64:	1cfb      	adds	r3, r7, #3
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	091b      	lsrs	r3, r3, #4
 8009c6a:	1c1a      	adds	r2, r3, #0
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	4013      	ands	r3, r2
 8009c70:	b2da      	uxtb	r2, r3
 8009c72:	193b      	adds	r3, r7, r4
 8009c74:	2101      	movs	r1, #1
 8009c76:	400a      	ands	r2, r1
 8009c78:	00d0      	lsls	r0, r2, #3
 8009c7a:	781a      	ldrb	r2, [r3, #0]
 8009c7c:	2108      	movs	r1, #8
 8009c7e:	438a      	bics	r2, r1
 8009c80:	1c11      	adds	r1, r2, #0
 8009c82:	1c02      	adds	r2, r0, #0
 8009c84:	430a      	orrs	r2, r1
 8009c86:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8009c88:	193a      	adds	r2, r7, r4
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	2125      	movs	r1, #37	; 0x25
 8009c90:	f7ff fe63 	bl	800995a <lis2dw12_write_reg>
 8009c94:	0003      	movs	r3, r0
 8009c96:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d108      	bne.n	8009cb0 <lis2dw12_filter_path_set+0x72>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL_REG7,
 8009c9e:	230c      	movs	r3, #12
 8009ca0:	18fa      	adds	r2, r7, r3
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	213f      	movs	r1, #63	; 0x3f
 8009ca8:	f7ff fe36 	bl	8009918 <lis2dw12_read_reg>
 8009cac:	0003      	movs	r3, r0
 8009cae:	617b      	str	r3, [r7, #20]
                            (uint8_t *) &ctrl_reg7, 1);
  }

  if (ret == 0)
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d118      	bne.n	8009ce8 <lis2dw12_filter_path_set+0xaa>
  {
    ctrl_reg7.usr_off_on_out = (uint8_t) val & 0x01U;
 8009cb6:	1cfb      	adds	r3, r7, #3
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	4013      	ands	r3, r2
 8009cbe:	b2da      	uxtb	r2, r3
 8009cc0:	240c      	movs	r4, #12
 8009cc2:	193b      	adds	r3, r7, r4
 8009cc4:	2101      	movs	r1, #1
 8009cc6:	400a      	ands	r2, r1
 8009cc8:	0110      	lsls	r0, r2, #4
 8009cca:	781a      	ldrb	r2, [r3, #0]
 8009ccc:	2110      	movs	r1, #16
 8009cce:	438a      	bics	r2, r1
 8009cd0:	1c11      	adds	r1, r2, #0
 8009cd2:	1c02      	adds	r2, r0, #0
 8009cd4:	430a      	orrs	r2, r1
 8009cd6:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL_REG7,
 8009cd8:	193a      	adds	r2, r7, r4
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	2301      	movs	r3, #1
 8009cde:	213f      	movs	r1, #63	; 0x3f
 8009ce0:	f7ff fe3b 	bl	800995a <lis2dw12_write_reg>
 8009ce4:	0003      	movs	r3, r0
 8009ce6:	617b      	str	r3, [r7, #20]
                             (uint8_t *) &ctrl_reg7, 1);
  }

  return ret;
 8009ce8:	697b      	ldr	r3, [r7, #20]
}
 8009cea:	0018      	movs	r0, r3
 8009cec:	46bd      	mov	sp, r7
 8009cee:	b007      	add	sp, #28
 8009cf0:	bd90      	pop	{r4, r7, pc}

08009cf2 <lis2dw12_pin_int1_route_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_pin_int1_route_set(stmdev_ctx_t *ctx,
                                    lis2dw12_ctrl4_int1_pad_ctrl_t *val)
{
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b086      	sub	sp, #24
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
 8009cfa:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl5_int2_pad_ctrl_t ctrl5_int2_pad_ctrl;
  lis2dw12_ctrl_reg7_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL5_INT2_PAD_CTRL,
 8009cfc:	2310      	movs	r3, #16
 8009cfe:	18fa      	adds	r2, r7, r3
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	2301      	movs	r3, #1
 8009d04:	2124      	movs	r1, #36	; 0x24
 8009d06:	f7ff fe07 	bl	8009918 <lis2dw12_read_reg>
 8009d0a:	0003      	movs	r3, r0
 8009d0c:	617b      	str	r3, [r7, #20]
                          (uint8_t *)&ctrl5_int2_pad_ctrl, 1);

  if (ret == 0)
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d108      	bne.n	8009d26 <lis2dw12_pin_int1_route_set+0x34>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg, 1);
 8009d14:	230c      	movs	r3, #12
 8009d16:	18fa      	adds	r2, r7, r3
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	213f      	movs	r1, #63	; 0x3f
 8009d1e:	f7ff fdfb 	bl	8009918 <lis2dw12_read_reg>
 8009d22:	0003      	movs	r3, r0
 8009d24:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d146      	bne.n	8009dba <lis2dw12_pin_int1_route_set+0xc8>
  {
    if ((val->int1_tap |
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	071b      	lsls	r3, r3, #28
 8009d32:	0fdb      	lsrs	r3, r3, #31
 8009d34:	b2da      	uxtb	r2, r3
         val->int1_ff |
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	06db      	lsls	r3, r3, #27
 8009d3c:	0fdb      	lsrs	r3, r3, #31
 8009d3e:	b2db      	uxtb	r3, r3
    if ((val->int1_tap |
 8009d40:	4313      	orrs	r3, r2
 8009d42:	b2da      	uxtb	r2, r3
         val->int1_wu |
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	069b      	lsls	r3, r3, #26
 8009d4a:	0fdb      	lsrs	r3, r3, #31
 8009d4c:	b2db      	uxtb	r3, r3
         val->int1_ff |
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	b2da      	uxtb	r2, r3
         val->int1_single_tap |
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	065b      	lsls	r3, r3, #25
 8009d58:	0fdb      	lsrs	r3, r3, #31
 8009d5a:	b2db      	uxtb	r3, r3
         val->int1_wu |
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	b2da      	uxtb	r2, r3
         val->int1_6d |
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	061b      	lsls	r3, r3, #24
 8009d66:	0fdb      	lsrs	r3, r3, #31
 8009d68:	b2db      	uxtb	r3, r3
         val->int1_single_tap |
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	b2da      	uxtb	r2, r3
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 8009d6e:	2110      	movs	r1, #16
 8009d70:	187b      	adds	r3, r7, r1
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	061b      	lsls	r3, r3, #24
 8009d76:	0fdb      	lsrs	r3, r3, #31
 8009d78:	b2db      	uxtb	r3, r3
         val->int1_6d |
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	b2da      	uxtb	r2, r3
         ctrl5_int2_pad_ctrl.int2_sleep_chg) != PROPERTY_DISABLE)
 8009d7e:	187b      	adds	r3, r7, r1
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	065b      	lsls	r3, r3, #25
 8009d84:	0fdb      	lsrs	r3, r3, #31
 8009d86:	b2db      	uxtb	r3, r3
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	b2db      	uxtb	r3, r3
    if ((val->int1_tap |
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d006      	beq.n	8009d9e <lis2dw12_pin_int1_route_set+0xac>
    {
      reg.interrupts_enable = PROPERTY_ENABLE;
 8009d90:	230c      	movs	r3, #12
 8009d92:	18fb      	adds	r3, r7, r3
 8009d94:	781a      	ldrb	r2, [r3, #0]
 8009d96:	2120      	movs	r1, #32
 8009d98:	430a      	orrs	r2, r1
 8009d9a:	701a      	strb	r2, [r3, #0]
 8009d9c:	e005      	b.n	8009daa <lis2dw12_pin_int1_route_set+0xb8>
    }

    else
    {
      reg.interrupts_enable = PROPERTY_DISABLE;
 8009d9e:	230c      	movs	r3, #12
 8009da0:	18fb      	adds	r3, r7, r3
 8009da2:	781a      	ldrb	r2, [r3, #0]
 8009da4:	2120      	movs	r1, #32
 8009da6:	438a      	bics	r2, r1
 8009da8:	701a      	strb	r2, [r3, #0]
    }

    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL4_INT1_PAD_CTRL,
 8009daa:	683a      	ldr	r2, [r7, #0]
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	2301      	movs	r3, #1
 8009db0:	2123      	movs	r1, #35	; 0x23
 8009db2:	f7ff fdd2 	bl	800995a <lis2dw12_write_reg>
 8009db6:	0003      	movs	r3, r0
 8009db8:	617b      	str	r3, [r7, #20]
                             (uint8_t *) val, 1);
  }

  if (ret == 0)
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d108      	bne.n	8009dd2 <lis2dw12_pin_int1_route_set+0xe0>
  {
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL_REG7, (uint8_t *) &reg, 1);
 8009dc0:	230c      	movs	r3, #12
 8009dc2:	18fa      	adds	r2, r7, r3
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	213f      	movs	r1, #63	; 0x3f
 8009dca:	f7ff fdc6 	bl	800995a <lis2dw12_write_reg>
 8009dce:	0003      	movs	r3, r0
 8009dd0:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8009dd2:	697b      	ldr	r3, [r7, #20]
}
 8009dd4:	0018      	movs	r0, r3
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	b006      	add	sp, #24
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <lis2dw12_pin_int1_route_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_pin_int1_route_get(stmdev_ctx_t *ctx,
                                    lis2dw12_ctrl4_int1_pad_ctrl_t *val)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL4_INT1_PAD_CTRL,
 8009de6:	683a      	ldr	r2, [r7, #0]
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	2301      	movs	r3, #1
 8009dec:	2123      	movs	r1, #35	; 0x23
 8009dee:	f7ff fd93 	bl	8009918 <lis2dw12_read_reg>
 8009df2:	0003      	movs	r3, r0
 8009df4:	60fb      	str	r3, [r7, #12]
                          (uint8_t *) val, 1);

  return ret;
 8009df6:	68fb      	ldr	r3, [r7, #12]
}
 8009df8:	0018      	movs	r0, r3
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	b004      	add	sp, #16
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <lis2dw12_wkup_threshold_set>:
  * @param  val      change the values of wk_ths in reg WAKE_UP_THS
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_wkup_threshold_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8009e00:	b590      	push	{r4, r7, lr}
 8009e02:	b085      	sub	sp, #20
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	000a      	movs	r2, r1
 8009e0a:	1cfb      	adds	r3, r7, #3
 8009e0c:	701a      	strb	r2, [r3, #0]
  lis2dw12_wake_up_ths_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WAKE_UP_THS, (uint8_t *) &reg, 1);
 8009e0e:	2408      	movs	r4, #8
 8009e10:	193a      	adds	r2, r7, r4
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	2301      	movs	r3, #1
 8009e16:	2134      	movs	r1, #52	; 0x34
 8009e18:	f7ff fd7e 	bl	8009918 <lis2dw12_read_reg>
 8009e1c:	0003      	movs	r3, r0
 8009e1e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d117      	bne.n	8009e56 <lis2dw12_wkup_threshold_set+0x56>
  {
    reg.wk_ths = val;
 8009e26:	1cfb      	adds	r3, r7, #3
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	223f      	movs	r2, #63	; 0x3f
 8009e2c:	4013      	ands	r3, r2
 8009e2e:	b2da      	uxtb	r2, r3
 8009e30:	193b      	adds	r3, r7, r4
 8009e32:	213f      	movs	r1, #63	; 0x3f
 8009e34:	400a      	ands	r2, r1
 8009e36:	0010      	movs	r0, r2
 8009e38:	781a      	ldrb	r2, [r3, #0]
 8009e3a:	213f      	movs	r1, #63	; 0x3f
 8009e3c:	438a      	bics	r2, r1
 8009e3e:	1c11      	adds	r1, r2, #0
 8009e40:	1c02      	adds	r2, r0, #0
 8009e42:	430a      	orrs	r2, r1
 8009e44:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_WAKE_UP_THS, (uint8_t *) &reg, 1);
 8009e46:	193a      	adds	r2, r7, r4
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	2134      	movs	r1, #52	; 0x34
 8009e4e:	f7ff fd84 	bl	800995a <lis2dw12_write_reg>
 8009e52:	0003      	movs	r3, r0
 8009e54:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009e56:	68fb      	ldr	r3, [r7, #12]
}
 8009e58:	0018      	movs	r0, r3
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	b005      	add	sp, #20
 8009e5e:	bd90      	pop	{r4, r7, pc}

08009e60 <lis2dw12_wkup_dur_set>:
  * @param  val      change the values of wake_dur in reg WAKE_UP_DUR
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_wkup_dur_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8009e60:	b590      	push	{r4, r7, lr}
 8009e62:	b085      	sub	sp, #20
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	000a      	movs	r2, r1
 8009e6a:	1cfb      	adds	r3, r7, #3
 8009e6c:	701a      	strb	r2, [r3, #0]
  lis2dw12_wake_up_dur_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WAKE_UP_DUR, (uint8_t *) &reg, 1);
 8009e6e:	2408      	movs	r4, #8
 8009e70:	193a      	adds	r2, r7, r4
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	2301      	movs	r3, #1
 8009e76:	2135      	movs	r1, #53	; 0x35
 8009e78:	f7ff fd4e 	bl	8009918 <lis2dw12_read_reg>
 8009e7c:	0003      	movs	r3, r0
 8009e7e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d117      	bne.n	8009eb6 <lis2dw12_wkup_dur_set+0x56>
  {
    reg.wake_dur = val;
 8009e86:	1cfb      	adds	r3, r7, #3
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	2203      	movs	r2, #3
 8009e8c:	4013      	ands	r3, r2
 8009e8e:	b2da      	uxtb	r2, r3
 8009e90:	193b      	adds	r3, r7, r4
 8009e92:	2103      	movs	r1, #3
 8009e94:	400a      	ands	r2, r1
 8009e96:	0150      	lsls	r0, r2, #5
 8009e98:	781a      	ldrb	r2, [r3, #0]
 8009e9a:	2160      	movs	r1, #96	; 0x60
 8009e9c:	438a      	bics	r2, r1
 8009e9e:	1c11      	adds	r1, r2, #0
 8009ea0:	1c02      	adds	r2, r0, #0
 8009ea2:	430a      	orrs	r2, r1
 8009ea4:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_WAKE_UP_DUR, (uint8_t *) &reg, 1);
 8009ea6:	193a      	adds	r2, r7, r4
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	2301      	movs	r3, #1
 8009eac:	2135      	movs	r1, #53	; 0x35
 8009eae:	f7ff fd54 	bl	800995a <lis2dw12_write_reg>
 8009eb2:	0003      	movs	r3, r0
 8009eb4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
}
 8009eb8:	0018      	movs	r0, r3
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	b005      	add	sp, #20
 8009ebe:	bd90      	pop	{r4, r7, pc}

08009ec0 <my_astro_init>:
 */
#include "my_astronode.h"


bool my_astro_init ( void )
{
 8009ec0:	b590      	push	{r4, r7, lr}
 8009ec2:	b087      	sub	sp, #28
 8009ec4:	af04      	add	r7, sp, #16
	bool cfg_wr = false ;
 8009ec6:	1dfb      	adds	r3, r7, #7
 8009ec8:	2200      	movs	r2, #0
 8009eca:	701a      	strb	r2, [r3, #0]
	tim_seconds = 0 ;
 8009ecc:	4b21      	ldr	r3, [pc, #132]	; (8009f54 <my_astro_init+0x94>)
 8009ece:	2200      	movs	r2, #0
 8009ed0:	801a      	strh	r2, [r3, #0]

	HAL_TIM_Base_Start_IT ( MY_TIMER ) ;
 8009ed2:	4b21      	ldr	r3, [pc, #132]	; (8009f58 <my_astro_init+0x98>)
 8009ed4:	0018      	movs	r0, r3
 8009ed6:	f7fc fda1 	bl	8006a1c <HAL_TIM_Base_Start_IT>
	while ( tim_seconds < MY_ASTRO_INIT_TIME && !cfg_wr )
 8009eda:	e015      	b.n	8009f08 <my_astro_init+0x48>
	{
		reset_astronode () ;
 8009edc:	f7f9 f91c 	bl	8003118 <reset_astronode>
		HAL_Delay ( 100 ) ;
 8009ee0:	2064      	movs	r0, #100	; 0x64
 8009ee2:	f7f9 fe63 	bl	8003bac <HAL_Delay>
		// Deep Sleep Mode (false) NOT used
		// Satellite Ack Event Pin Mask (true): EVT pin shows EVT register Payload Ack bit state
		// Reset Notification Event Pin Mask (true):  EVT pin shows EVT register Reset Event Notification bit state
		// Command Available Event Pin Mask (true): EVT pin shows EVT register Command Available bit state
		// Message Transmission (Tx) Pending Event Pin Mask (false):  EVT pin does not show EVT register Msg Tx Pending bit state
		cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false  ) ;
 8009ee6:	1dfc      	adds	r4, r7, #7
 8009ee8:	2300      	movs	r3, #0
 8009eea:	9303      	str	r3, [sp, #12]
 8009eec:	2301      	movs	r3, #1
 8009eee:	9302      	str	r3, [sp, #8]
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	9301      	str	r3, [sp, #4]
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	9300      	str	r3, [sp, #0]
 8009ef8:	2300      	movs	r3, #0
 8009efa:	2201      	movs	r2, #1
 8009efc:	2101      	movs	r1, #1
 8009efe:	2001      	movs	r0, #1
 8009f00:	f7fe f85c 	bl	8007fbc <astronode_send_cfg_wr>
 8009f04:	0003      	movs	r3, r0
 8009f06:	7023      	strb	r3, [r4, #0]
	while ( tim_seconds < MY_ASTRO_INIT_TIME && !cfg_wr )
 8009f08:	4b12      	ldr	r3, [pc, #72]	; (8009f54 <my_astro_init+0x94>)
 8009f0a:	881b      	ldrh	r3, [r3, #0]
 8009f0c:	2b3b      	cmp	r3, #59	; 0x3b
 8009f0e:	d806      	bhi.n	8009f1e <my_astro_init+0x5e>
 8009f10:	1dfb      	adds	r3, r7, #7
 8009f12:	781b      	ldrb	r3, [r3, #0]
 8009f14:	2201      	movs	r2, #1
 8009f16:	4053      	eors	r3, r2
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d1de      	bne.n	8009edc <my_astro_init+0x1c>
	}
	//tim_seconds = 0 ;
	HAL_TIM_Base_Stop_IT ( MY_TIMER ) ;
 8009f1e:	4b0e      	ldr	r3, [pc, #56]	; (8009f58 <my_astro_init+0x98>)
 8009f20:	0018      	movs	r0, r3
 8009f22:	f7fc fdd7 	bl	8006ad4 <HAL_TIM_Base_Stop_IT>
	if ( cfg_wr )
 8009f26:	1dfb      	adds	r3, r7, #7
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d00d      	beq.n	8009f4a <my_astro_init+0x8a>
	{
		astronode_send_rtc_rr () ;
 8009f2e:	f7fe fd09 	bl	8008944 <astronode_send_rtc_rr>
		astronode_send_cfg_sr () ;
 8009f32:	f7fe f80b 	bl	8007f4c <astronode_send_cfg_sr>
		astronode_send_mpn_rr () ;
 8009f36:	f7fe fdff 	bl	8008b38 <astronode_send_mpn_rr>
		astronode_send_msn_rr () ;
 8009f3a:	f7fe f995 	bl	8008268 <astronode_send_msn_rr>
		astronode_send_mgi_rr () ;
 8009f3e:	f7fe f8e9 	bl	8008114 <astronode_send_mgi_rr>
		astronode_send_pld_fr () ;
 8009f42:	f7fe fc83 	bl	800884c <astronode_send_pld_fr>
		return true ;
 8009f46:	2301      	movs	r3, #1
 8009f48:	e000      	b.n	8009f4c <my_astro_init+0x8c>
	}
	else
	{
		return false ;
 8009f4a:	2300      	movs	r3, #0
	}
}
 8009f4c:	0018      	movs	r0, r3
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	b003      	add	sp, #12
 8009f52:	bd90      	pop	{r4, r7, pc}
 8009f54:	20000a24 	.word	0x20000a24
 8009f58:	2000078c 	.word	0x2000078c

08009f5c <my_astro_add_payload_2_queue>:
bool my_astro_add_payload_2_queue ( uint16_t id , char* payload )
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	0002      	movs	r2, r0
 8009f64:	6039      	str	r1, [r7, #0]
 8009f66:	1dbb      	adds	r3, r7, #6
 8009f68:	801a      	strh	r2, [r3, #0]
	size_t l = strlen ( payload ) ;
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	0018      	movs	r0, r3
 8009f6e:	f7f6 f8c9 	bl	8000104 <strlen>
 8009f72:	0003      	movs	r3, r0
 8009f74:	60fb      	str	r3, [r7, #12]
	if ( l <= ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES )
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2ba0      	cmp	r3, #160	; 0xa0
 8009f7a:	d80b      	bhi.n	8009f94 <my_astro_add_payload_2_queue+0x38>
	{
		if ( astronode_send_pld_er ( id , payload , l ) )
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	b29a      	uxth	r2, r3
 8009f80:	6839      	ldr	r1, [r7, #0]
 8009f82:	1dbb      	adds	r3, r7, #6
 8009f84:	881b      	ldrh	r3, [r3, #0]
 8009f86:	0018      	movs	r0, r3
 8009f88:	f7fe fbbc 	bl	8008704 <astronode_send_pld_er>
 8009f8c:	1e03      	subs	r3, r0, #0
 8009f8e:	d005      	beq.n	8009f9c <my_astro_add_payload_2_queue+0x40>
		{
			return true ;
 8009f90:	2301      	movs	r3, #1
 8009f92:	e004      	b.n	8009f9e <my_astro_add_payload_2_queue+0x42>
		}
	}
	else
	{
		send_debug_logs ( "ERROR: Payload exceeded ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES value." ) ;
 8009f94:	4b04      	ldr	r3, [pc, #16]	; (8009fa8 <my_astro_add_payload_2_queue+0x4c>)
 8009f96:	0018      	movs	r0, r3
 8009f98:	f7f9 f88e 	bl	80030b8 <send_debug_logs>
	}
	return false ;
 8009f9c:	2300      	movs	r3, #0
}
 8009f9e:	0018      	movs	r0, r3
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	b004      	add	sp, #16
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	46c0      	nop			; (mov r8, r8)
 8009fa8:	08014cac 	.word	0x08014cac

08009fac <my_astro_read_evt_reg>:
bool my_astro_read_evt_reg ( void )
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	af00      	add	r7, sp, #0
	send_debug_logs ( "my_astro: evt pin is high." ) ;
 8009fb0:	4b15      	ldr	r3, [pc, #84]	; (800a008 <my_astro_read_evt_reg+0x5c>)
 8009fb2:	0018      	movs	r0, r3
 8009fb4:	f7f9 f880 	bl	80030b8 <send_debug_logs>
	astronode_send_evt_rr () ;
 8009fb8:	f7fe fa64 	bl	8008484 <astronode_send_evt_rr>
	if (is_sak_available () )
 8009fbc:	f7ff f816 	bl	8008fec <is_sak_available>
 8009fc0:	1e03      	subs	r3, r0, #0
 8009fc2:	d007      	beq.n	8009fd4 <my_astro_read_evt_reg+0x28>
	{
	  astronode_send_sak_rr () ;
 8009fc4:	f7fe fd22 	bl	8008a0c <astronode_send_sak_rr>
	  astronode_send_sak_cr () ;
 8009fc8:	f7fe fd76 	bl	8008ab8 <astronode_send_sak_cr>
	  send_debug_logs ( "my_astro: message has been acknowledged." ) ;
 8009fcc:	4b0f      	ldr	r3, [pc, #60]	; (800a00c <my_astro_read_evt_reg+0x60>)
 8009fce:	0018      	movs	r0, r3
 8009fd0:	f7f9 f872 	bl	80030b8 <send_debug_logs>
	  //astronode_send_per_rr () ;
	}
	if ( is_astronode_reset () )
 8009fd4:	f7ff f814 	bl	8009000 <is_astronode_reset>
 8009fd8:	1e03      	subs	r3, r0, #0
 8009fda:	d005      	beq.n	8009fe8 <my_astro_read_evt_reg+0x3c>
	{
	  send_debug_logs ( "my_astro: terminal has been reset." ) ;
 8009fdc:	4b0c      	ldr	r3, [pc, #48]	; (800a010 <my_astro_read_evt_reg+0x64>)
 8009fde:	0018      	movs	r0, r3
 8009fe0:	f7f9 f86a 	bl	80030b8 <send_debug_logs>
	  astronode_send_res_cr () ;
 8009fe4:	f7fe fc6e 	bl	80088c4 <astronode_send_res_cr>
	}
	if ( is_command_available () )
 8009fe8:	f7ff f814 	bl	8009014 <is_command_available>
 8009fec:	1e03      	subs	r3, r0, #0
 8009fee:	d007      	beq.n	800a000 <my_astro_read_evt_reg+0x54>
	{
	  send_debug_logs ( "my_astro: unicast command is available" ) ;
 8009ff0:	4b08      	ldr	r3, [pc, #32]	; (800a014 <my_astro_read_evt_reg+0x68>)
 8009ff2:	0018      	movs	r0, r3
 8009ff4:	f7f9 f860 	bl	80030b8 <send_debug_logs>
	  astronode_send_cmd_rr () ;
 8009ff8:	f7fe fe88 	bl	8008d0c <astronode_send_cmd_rr>
	  astronode_send_cmd_cr () ;
 8009ffc:	f7fe fe46 	bl	8008c8c <astronode_send_cmd_cr>
	}
	return true ;
 800a000:	2301      	movs	r3, #1
}
 800a002:	0018      	movs	r0, r3
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}
 800a008:	08014cf0 	.word	0x08014cf0
 800a00c:	08014d0c 	.word	0x08014d0c
 800a010:	08014d38 	.word	0x08014d38
 800a014:	08014d5c 	.word	0x08014d5c

0800a018 <my_astro_log>:
bool my_astro_log ( void )
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	af00      	add	r7, sp, #0
	astronode_send_rtc_rr ();
 800a01c:	f7fe fc92 	bl	8008944 <astronode_send_rtc_rr>
	astronode_send_nco_rr () ;
 800a020:	f7fe f9cc 	bl	80083bc <astronode_send_nco_rr>
	//astronode_send_lcd_rr () ;
	//astronode_send_end_rr () ;
	//astronode_send_per_rr () ;
	return true ;
 800a024:	2301      	movs	r3, #1
}
 800a026:	0018      	movs	r0, r3
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <my_astro_write_coordinates>:

void my_astro_write_coordinates ( int32_t astro_geo_wr_latitude , int32_t astro_geo_wr_longitude )
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	6039      	str	r1, [r7, #0]
	astronode_send_geo_wr ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 800a036:	683a      	ldr	r2, [r7, #0]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	0011      	movs	r1, r2
 800a03c:	0018      	movs	r0, r3
 800a03e:	f7fe faa1 	bl	8008584 <astronode_send_geo_wr>
}
 800a042:	46c0      	nop			; (mov r8, r8)
 800a044:	46bd      	mov	sp, r7
 800a046:	b002      	add	sp, #8
 800a048:	bd80      	pop	{r7, pc}

0800a04a <my_lis2dw12_init>:
 */

#include "my_lis2dw12.h"

bool my_lis2dw12_init ( stmdev_ctx_t* ctx )
{
 800a04a:	b590      	push	{r4, r7, lr}
 800a04c:	b085      	sub	sp, #20
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
	uint8_t rst = 1 ;
 800a052:	230f      	movs	r3, #15
 800a054:	18fb      	adds	r3, r7, r3
 800a056:	2201      	movs	r2, #1
 800a058:	701a      	strb	r2, [r3, #0]

	/*Restore default configuration */
	lis2dw12_reset_set ( ctx , PROPERTY_ENABLE ) ;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2101      	movs	r1, #1
 800a05e:	0018      	movs	r0, r3
 800a060:	f7ff fda2 	bl	8009ba8 <lis2dw12_reset_set>
	do {
		lis2dw12_reset_get ( ctx, &rst ) ;
 800a064:	240f      	movs	r4, #15
 800a066:	193a      	adds	r2, r7, r4
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	0011      	movs	r1, r2
 800a06c:	0018      	movs	r0, r3
 800a06e:	f7ff fdcb 	bl	8009c08 <lis2dw12_reset_get>
	} while ( rst ) ;
 800a072:	193b      	adds	r3, r7, r4
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d1f4      	bne.n	800a064 <my_lis2dw12_init+0x1a>

	if ( my_lis2dw12_get_id ( ctx ) == LIS2DW12_ID )
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	0018      	movs	r0, r3
 800a07e:	f000 f828 	bl	800a0d2 <my_lis2dw12_get_id>
 800a082:	0003      	movs	r3, r0
 800a084:	2b44      	cmp	r3, #68	; 0x44
 800a086:	d11f      	bne.n	800a0c8 <my_lis2dw12_init+0x7e>
	{
		lis2dw12_full_scale_set 	( ctx , LIS2DW12_2g ) ;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2100      	movs	r1, #0
 800a08c:	0018      	movs	r0, r3
 800a08e:	f7ff fd49 	bl	8009b24 <lis2dw12_full_scale_set>
		lis2dw12_power_mode_set 	( ctx , LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit ) ;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2110      	movs	r1, #16
 800a096:	0018      	movs	r0, r3
 800a098:	f7ff fc80 	bl	800999c <lis2dw12_power_mode_set>
		lis2dw12_data_rate_set 		( ctx , LIS2DW12_XL_ODR_200Hz ) ;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2106      	movs	r1, #6
 800a0a0:	0018      	movs	r0, r3
 800a0a2:	f7ff fce7 	bl	8009a74 <lis2dw12_data_rate_set>
		lis2dw12_filter_path_set 	( ctx , LIS2DW12_HIGH_PASS_ON_OUT ) ;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2110      	movs	r1, #16
 800a0aa:	0018      	movs	r0, r3
 800a0ac:	f7ff fdc7 	bl	8009c3e <lis2dw12_filter_path_set>
		lis2dw12_wkup_dur_set		( ctx , 0 ) ;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2100      	movs	r1, #0
 800a0b4:	0018      	movs	r0, r3
 800a0b6:	f7ff fed3 	bl	8009e60 <lis2dw12_wkup_dur_set>
		lis2dw12_wkup_threshold_set	( ctx, 2 ) ;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2102      	movs	r1, #2
 800a0be:	0018      	movs	r0, r3
 800a0c0:	f7ff fe9e 	bl	8009e00 <lis2dw12_wkup_threshold_set>
		return true ;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	e000      	b.n	800a0ca <my_lis2dw12_init+0x80>
	}

	return false ;
 800a0c8:	2300      	movs	r3, #0

}
 800a0ca:	0018      	movs	r0, r3
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	b005      	add	sp, #20
 800a0d0:	bd90      	pop	{r4, r7, pc}

0800a0d2 <my_lis2dw12_get_id>:

uint8_t my_lis2dw12_get_id ( stmdev_ctx_t* ctx )
{
 800a0d2:	b590      	push	{r4, r7, lr}
 800a0d4:	b085      	sub	sp, #20
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
	uint8_t id = 0 ;
 800a0da:	210f      	movs	r1, #15
 800a0dc:	187b      	adds	r3, r7, r1
 800a0de:	2200      	movs	r2, #0
 800a0e0:	701a      	strb	r2, [r3, #0]
	lis2dw12_device_id_get ( ctx , &id ) ;
 800a0e2:	000c      	movs	r4, r1
 800a0e4:	187a      	adds	r2, r7, r1
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	0011      	movs	r1, r2
 800a0ea:	0018      	movs	r0, r3
 800a0ec:	f7ff fd4a 	bl	8009b84 <lis2dw12_device_id_get>
	return id ;
 800a0f0:	193b      	adds	r3, r7, r4
 800a0f2:	781b      	ldrb	r3, [r3, #0]
}
 800a0f4:	0018      	movs	r0, r3
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	b005      	add	sp, #20
 800a0fa:	bd90      	pop	{r4, r7, pc}

0800a0fc <my_lis2dw12_int1_wu_enable>:

void my_lis2dw12_int1_wu_enable ( stmdev_ctx_t* ctx )
{
 800a0fc:	b590      	push	{r4, r7, lr}
 800a0fe:	b085      	sub	sp, #20
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
	lis2dw12_reg_t int_route ;
	lis2dw12_pin_int1_route_get	( ctx, &int_route.ctrl4_int1_pad_ctrl ) ;
 800a104:	240c      	movs	r4, #12
 800a106:	193a      	adds	r2, r7, r4
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	0011      	movs	r1, r2
 800a10c:	0018      	movs	r0, r3
 800a10e:	f7ff fe65 	bl	8009ddc <lis2dw12_pin_int1_route_get>
	int_route.ctrl4_int1_pad_ctrl.int1_wu = PROPERTY_ENABLE ;
 800a112:	0020      	movs	r0, r4
 800a114:	183b      	adds	r3, r7, r0
 800a116:	781a      	ldrb	r2, [r3, #0]
 800a118:	2120      	movs	r1, #32
 800a11a:	430a      	orrs	r2, r1
 800a11c:	701a      	strb	r2, [r3, #0]
	lis2dw12_pin_int1_route_set	( ctx , &int_route.ctrl4_int1_pad_ctrl ) ;
 800a11e:	183a      	adds	r2, r7, r0
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	0011      	movs	r1, r2
 800a124:	0018      	movs	r0, r3
 800a126:	f7ff fde4 	bl	8009cf2 <lis2dw12_pin_int1_route_set>
}
 800a12a:	46c0      	nop			; (mov r8, r8)
 800a12c:	46bd      	mov	sp, r7
 800a12e:	b005      	add	sp, #20
 800a130:	bd90      	pop	{r4, r7, pc}

0800a132 <my_lis2dw12_int1_wu_disable>:
void my_lis2dw12_int1_wu_disable ( stmdev_ctx_t* ctx )
{
 800a132:	b590      	push	{r4, r7, lr}
 800a134:	b085      	sub	sp, #20
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
	lis2dw12_reg_t int_route ;
	lis2dw12_pin_int1_route_get	( ctx, &int_route.ctrl4_int1_pad_ctrl ) ;
 800a13a:	240c      	movs	r4, #12
 800a13c:	193a      	adds	r2, r7, r4
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	0011      	movs	r1, r2
 800a142:	0018      	movs	r0, r3
 800a144:	f7ff fe4a 	bl	8009ddc <lis2dw12_pin_int1_route_get>
	int_route.ctrl4_int1_pad_ctrl.int1_wu = PROPERTY_DISABLE ;
 800a148:	0020      	movs	r0, r4
 800a14a:	183b      	adds	r3, r7, r0
 800a14c:	781a      	ldrb	r2, [r3, #0]
 800a14e:	2120      	movs	r1, #32
 800a150:	438a      	bics	r2, r1
 800a152:	701a      	strb	r2, [r3, #0]
	lis2dw12_pin_int1_route_set	( ctx , &int_route.ctrl4_int1_pad_ctrl ) ;
 800a154:	183a      	adds	r2, r7, r0
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	0011      	movs	r1, r2
 800a15a:	0018      	movs	r0, r3
 800a15c:	f7ff fdc9 	bl	8009cf2 <lis2dw12_pin_int1_route_set>
}
 800a160:	46c0      	nop			; (mov r8, r8)
 800a162:	46bd      	mov	sp, r7
 800a164:	b005      	add	sp, #20
 800a166:	bd90      	pop	{r4, r7, pc}

0800a168 <my_lx6_get_coordinates>:

#include "my_lx6_gnss.h"


bool my_lx6_get_coordinates ( uint16_t active_time_ths , double nmea_pdop_ths , double* nmea_fixed_pdop_d , int32_t* astro_geo_wr_latitude , int32_t* astro_geo_wr_longitude )
{
 800a168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a16a:	4cde      	ldr	r4, [pc, #888]	; (800a4e4 <my_lx6_get_coordinates+0x37c>)
 800a16c:	44a5      	add	sp, r4
 800a16e:	af02      	add	r7, sp, #8
 800a170:	0001      	movs	r1, r0
 800a172:	603a      	str	r2, [r7, #0]
 800a174:	607b      	str	r3, [r7, #4]
 800a176:	4bdc      	ldr	r3, [pc, #880]	; (800a4e8 <my_lx6_get_coordinates+0x380>)
 800a178:	20ce      	movs	r0, #206	; 0xce
 800a17a:	0080      	lsls	r0, r0, #2
 800a17c:	181b      	adds	r3, r3, r0
 800a17e:	19db      	adds	r3, r3, r7
 800a180:	1c0a      	adds	r2, r1, #0
 800a182:	801a      	strh	r2, [r3, #0]
	bool		r = false ;
 800a184:	4bd9      	ldr	r3, [pc, #868]	; (800a4ec <my_lx6_get_coordinates+0x384>)
 800a186:	18fb      	adds	r3, r7, r3
 800a188:	2200      	movs	r2, #0
 800a18a:	701a      	strb	r2, [r3, #0]
	uint8_t		rxd_byte = 0 ;
 800a18c:	4bd8      	ldr	r3, [pc, #864]	; (800a4f0 <my_lx6_get_coordinates+0x388>)
 800a18e:	18fb      	adds	r3, r7, r3
 800a190:	2200      	movs	r2, #0
 800a192:	701a      	strb	r2, [r3, #0]
	uint8_t		nmea_message[NMEA_MESSAGE_SIZE] = {0} ;
 800a194:	4bd7      	ldr	r3, [pc, #860]	; (800a4f4 <my_lx6_get_coordinates+0x38c>)
 800a196:	0004      	movs	r4, r0
 800a198:	191b      	adds	r3, r3, r4
 800a19a:	19db      	adds	r3, r3, r7
 800a19c:	2200      	movs	r2, #0
 800a19e:	601a      	str	r2, [r3, #0]
 800a1a0:	3304      	adds	r3, #4
 800a1a2:	22f6      	movs	r2, #246	; 0xf6
 800a1a4:	2100      	movs	r1, #0
 800a1a6:	0018      	movs	r0, r3
 800a1a8:	f002 fb58 	bl	800c85c <memset>
	uint8_t		gngll_message[NMEA_MESSAGE_SIZE] = {0} ;
 800a1ac:	4bd2      	ldr	r3, [pc, #840]	; (800a4f8 <my_lx6_get_coordinates+0x390>)
 800a1ae:	191b      	adds	r3, r3, r4
 800a1b0:	19db      	adds	r3, r3, r7
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	601a      	str	r2, [r3, #0]
 800a1b6:	3304      	adds	r3, #4
 800a1b8:	22f6      	movs	r2, #246	; 0xf6
 800a1ba:	2100      	movs	r1, #0
 800a1bc:	0018      	movs	r0, r3
 800a1be:	f002 fb4d 	bl	800c85c <memset>
	uint8_t		rmc_message[NMEA_MESSAGE_SIZE] = {0} ;
 800a1c2:	4bce      	ldr	r3, [pc, #824]	; (800a4fc <my_lx6_get_coordinates+0x394>)
 800a1c4:	191b      	adds	r3, r3, r4
 800a1c6:	19db      	adds	r3, r3, r7
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	601a      	str	r2, [r3, #0]
 800a1cc:	3304      	adds	r3, #4
 800a1ce:	22f6      	movs	r2, #246	; 0xf6
 800a1d0:	2100      	movs	r1, #0
 800a1d2:	0018      	movs	r0, r3
 800a1d4:	f002 fb42 	bl	800c85c <memset>
	uint8_t		i_nmea = 0 ;
 800a1d8:	4bc9      	ldr	r3, [pc, #804]	; (800a500 <my_lx6_get_coordinates+0x398>)
 800a1da:	0021      	movs	r1, r4
 800a1dc:	185b      	adds	r3, r3, r1
 800a1de:	19db      	adds	r3, r3, r7
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	701a      	strb	r2, [r3, #0]
	uint8_t		gsv_tns = 0 ;
 800a1e4:	4bc7      	ldr	r3, [pc, #796]	; (800a504 <my_lx6_get_coordinates+0x39c>)
 800a1e6:	18fb      	adds	r3, r7, r3
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	701a      	strb	r2, [r3, #0]
	char 		nmea_latitude_s[MY_GNSS_NMEA_MAX_SIZE] = {0} ; // 10 + ew. znak minus + '\0'
 800a1ec:	4bc6      	ldr	r3, [pc, #792]	; (800a508 <my_lx6_get_coordinates+0x3a0>)
 800a1ee:	000c      	movs	r4, r1
 800a1f0:	185b      	adds	r3, r3, r1
 800a1f2:	19db      	adds	r3, r3, r7
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	601a      	str	r2, [r3, #0]
 800a1f8:	3304      	adds	r3, #4
 800a1fa:	2208      	movs	r2, #8
 800a1fc:	2100      	movs	r1, #0
 800a1fe:	0018      	movs	r0, r3
 800a200:	f002 fb2c 	bl	800c85c <memset>
	char 		nmea_longitude_s[MY_GNSS_NMEA_MAX_SIZE] = {0} ; // 10 + ew. znak minus + '\0'
 800a204:	4bc1      	ldr	r3, [pc, #772]	; (800a50c <my_lx6_get_coordinates+0x3a4>)
 800a206:	191b      	adds	r3, r3, r4
 800a208:	19db      	adds	r3, r3, r7
 800a20a:	2200      	movs	r2, #0
 800a20c:	601a      	str	r2, [r3, #0]
 800a20e:	3304      	adds	r3, #4
 800a210:	2208      	movs	r2, #8
 800a212:	2100      	movs	r1, #0
 800a214:	0018      	movs	r0, r3
 800a216:	f002 fb21 	bl	800c85c <memset>
	char* 		nmea_gngsa_label = "GNGSA" ;
 800a21a:	4bbd      	ldr	r3, [pc, #756]	; (800a510 <my_lx6_get_coordinates+0x3a8>)
 800a21c:	22cc      	movs	r2, #204	; 0xcc
 800a21e:	0092      	lsls	r2, r2, #2
 800a220:	18ba      	adds	r2, r7, r2
 800a222:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngll_label = "GNGLL" ;
 800a224:	4bbb      	ldr	r3, [pc, #748]	; (800a514 <my_lx6_get_coordinates+0x3ac>)
 800a226:	22cb      	movs	r2, #203	; 0xcb
 800a228:	0092      	lsls	r2, r2, #2
 800a22a:	18ba      	adds	r2, r7, r2
 800a22c:	6013      	str	r3, [r2, #0]
	char* 		nmea_rmc_label = "RMC" ;
 800a22e:	4bba      	ldr	r3, [pc, #744]	; (800a518 <my_lx6_get_coordinates+0x3b0>)
 800a230:	22ca      	movs	r2, #202	; 0xca
 800a232:	0092      	lsls	r2, r2, #2
 800a234:	18ba      	adds	r2, r7, r2
 800a236:	6013      	str	r3, [r2, #0]
	char* 		nmea_gsv_label = "GSV" ;
 800a238:	4bb8      	ldr	r3, [pc, #736]	; (800a51c <my_lx6_get_coordinates+0x3b4>)
 800a23a:	22c9      	movs	r2, #201	; 0xc9
 800a23c:	0092      	lsls	r2, r2, #2
 800a23e:	18ba      	adds	r2, r7, r2
 800a240:	6013      	str	r3, [r2, #0]
	char		nmea_fixed_mode_s = '\0' ;
 800a242:	4bb7      	ldr	r3, [pc, #732]	; (800a520 <my_lx6_get_coordinates+0x3b8>)
 800a244:	18fb      	adds	r3, r7, r3
 800a246:	2200      	movs	r2, #0
 800a248:	701a      	strb	r2, [r3, #0]

	tim_seconds = 0 ;
 800a24a:	4bb6      	ldr	r3, [pc, #728]	; (800a524 <my_lx6_get_coordinates+0x3bc>)
 800a24c:	2200      	movs	r2, #0
 800a24e:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &htim6 ) ;
 800a250:	4bb5      	ldr	r3, [pc, #724]	; (800a528 <my_lx6_get_coordinates+0x3c0>)
 800a252:	0018      	movs	r0, r3
 800a254:	f7fc fbe2 	bl	8006a1c <HAL_TIM_Base_Start_IT>
	my_lx6_on () ;
 800a258:	f7f8 ffdc 	bl	8003214 <my_lx6_on>
	while ( tim_seconds < active_time_ths  ) // 1200 = 10 min.
 800a25c:	e0ea      	b.n	800a434 <my_lx6_get_coordinates+0x2cc>
	{
		HAL_UART_Receive ( HUART_Lx6 , &rxd_byte , 1 , UART_TIMEOUT ) ;
 800a25e:	23fa      	movs	r3, #250	; 0xfa
 800a260:	009b      	lsls	r3, r3, #2
 800a262:	4ca3      	ldr	r4, [pc, #652]	; (800a4f0 <my_lx6_get_coordinates+0x388>)
 800a264:	1939      	adds	r1, r7, r4
 800a266:	48b1      	ldr	r0, [pc, #708]	; (800a52c <my_lx6_get_coordinates+0x3c4>)
 800a268:	2201      	movs	r2, #1
 800a26a:	f7fc ffeb 	bl	8007244 <HAL_UART_Receive>
		HAL_UART_Transmit ( HUART_DBG , &rxd_byte , 1 , UART_TIMEOUT ) ; // Transmit all nmea to DBG
 800a26e:	23fa      	movs	r3, #250	; 0xfa
 800a270:	009b      	lsls	r3, r3, #2
 800a272:	1939      	adds	r1, r7, r4
 800a274:	48ae      	ldr	r0, [pc, #696]	; (800a530 <my_lx6_get_coordinates+0x3c8>)
 800a276:	2201      	movs	r2, #1
 800a278:	f7fc ff48 	bl	800710c <HAL_UART_Transmit>
		if ( rxd_byte )
 800a27c:	0020      	movs	r0, r4
 800a27e:	193b      	adds	r3, r7, r4
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	4ca0      	ldr	r4, [pc, #640]	; (800a504 <my_lx6_get_coordinates+0x39c>)
 800a284:	193a      	adds	r2, r7, r4
 800a286:	1939      	adds	r1, r7, r4
 800a288:	7809      	ldrb	r1, [r1, #0]
 800a28a:	7011      	strb	r1, [r2, #0]
 800a28c:	4da4      	ldr	r5, [pc, #656]	; (800a520 <my_lx6_get_coordinates+0x3b8>)
 800a28e:	197a      	adds	r2, r7, r5
 800a290:	1979      	adds	r1, r7, r5
 800a292:	7809      	ldrb	r1, [r1, #0]
 800a294:	7011      	strb	r1, [r2, #0]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d100      	bne.n	800a29c <my_lx6_get_coordinates+0x134>
 800a29a:	e0cb      	b.n	800a434 <my_lx6_get_coordinates+0x2cc>
		{
			if ( my_nmea_message ( &rxd_byte , nmea_message , &i_nmea ) == 2 )
 800a29c:	232f      	movs	r3, #47	; 0x2f
 800a29e:	18fa      	adds	r2, r7, r3
 800a2a0:	268a      	movs	r6, #138	; 0x8a
 800a2a2:	00b6      	lsls	r6, r6, #2
 800a2a4:	19b9      	adds	r1, r7, r6
 800a2a6:	183b      	adds	r3, r7, r0
 800a2a8:	0018      	movs	r0, r3
 800a2aa:	f000 fbfd 	bl	800aaa8 <my_nmea_message>
 800a2ae:	0001      	movs	r1, r0
 800a2b0:	193b      	adds	r3, r7, r4
 800a2b2:	193a      	adds	r2, r7, r4
 800a2b4:	7812      	ldrb	r2, [r2, #0]
 800a2b6:	701a      	strb	r2, [r3, #0]
 800a2b8:	197b      	adds	r3, r7, r5
 800a2ba:	197a      	adds	r2, r7, r5
 800a2bc:	7812      	ldrb	r2, [r2, #0]
 800a2be:	701a      	strb	r2, [r3, #0]
 800a2c0:	2902      	cmp	r1, #2
 800a2c2:	d000      	beq.n	800a2c6 <my_lx6_get_coordinates+0x15e>
 800a2c4:	e0b6      	b.n	800a434 <my_lx6_get_coordinates+0x2cc>
			{
				if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 800a2c6:	19bb      	adds	r3, r7, r6
 800a2c8:	0018      	movs	r0, r3
 800a2ca:	f000 fcad 	bl	800ac28 <is_my_nmea_checksum_ok>
 800a2ce:	0003      	movs	r3, r0
 800a2d0:	0019      	movs	r1, r3
 800a2d2:	193b      	adds	r3, r7, r4
 800a2d4:	193a      	adds	r2, r7, r4
 800a2d6:	7812      	ldrb	r2, [r2, #0]
 800a2d8:	701a      	strb	r2, [r3, #0]
 800a2da:	197b      	adds	r3, r7, r5
 800a2dc:	197a      	adds	r2, r7, r5
 800a2de:	7812      	ldrb	r2, [r2, #0]
 800a2e0:	701a      	strb	r2, [r3, #0]
 800a2e2:	2900      	cmp	r1, #0
 800a2e4:	d100      	bne.n	800a2e8 <my_lx6_get_coordinates+0x180>
 800a2e6:	e0a5      	b.n	800a434 <my_lx6_get_coordinates+0x2cc>
				{
					if ( strstr ( (char*) nmea_message , nmea_rmc_label ) )
 800a2e8:	23ca      	movs	r3, #202	; 0xca
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	18fb      	adds	r3, r7, r3
 800a2ee:	681a      	ldr	r2, [r3, #0]
 800a2f0:	19bb      	adds	r3, r7, r6
 800a2f2:	0011      	movs	r1, r2
 800a2f4:	0018      	movs	r0, r3
 800a2f6:	f002 fade 	bl	800c8b6 <strstr>
 800a2fa:	1e03      	subs	r3, r0, #0
 800a2fc:	d00d      	beq.n	800a31a <my_lx6_get_coordinates+0x1b2>
					{
						memcpy ( rmc_message , nmea_message , NMEA_MESSAGE_SIZE ) ; // Zapisuję, żeby skorzystać z czasu jak najdokładniejszego, bo przed fix ten czas jest fake.
 800a2fe:	4b7f      	ldr	r3, [pc, #508]	; (800a4fc <my_lx6_get_coordinates+0x394>)
 800a300:	21ce      	movs	r1, #206	; 0xce
 800a302:	0089      	lsls	r1, r1, #2
 800a304:	185b      	adds	r3, r3, r1
 800a306:	19da      	adds	r2, r3, r7
 800a308:	4b7a      	ldr	r3, [pc, #488]	; (800a4f4 <my_lx6_get_coordinates+0x38c>)
 800a30a:	185b      	adds	r3, r3, r1
 800a30c:	19db      	adds	r3, r3, r7
 800a30e:	0010      	movs	r0, r2
 800a310:	0019      	movs	r1, r3
 800a312:	23fa      	movs	r3, #250	; 0xfa
 800a314:	001a      	movs	r2, r3
 800a316:	f002 fb86 	bl	800ca26 <memcpy>
					}
					if ( strstr ( (char*) nmea_message , nmea_gsv_label ) && gsv_tns < MY_GNSS_MIN_TNS )
 800a31a:	23c9      	movs	r3, #201	; 0xc9
 800a31c:	009b      	lsls	r3, r3, #2
 800a31e:	18fb      	adds	r3, r7, r3
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	248a      	movs	r4, #138	; 0x8a
 800a324:	00a4      	lsls	r4, r4, #2
 800a326:	193b      	adds	r3, r7, r4
 800a328:	0011      	movs	r1, r2
 800a32a:	0018      	movs	r0, r3
 800a32c:	f002 fac3 	bl	800c8b6 <strstr>
 800a330:	1e03      	subs	r3, r0, #0
 800a332:	d011      	beq.n	800a358 <my_lx6_get_coordinates+0x1f0>
 800a334:	4d73      	ldr	r5, [pc, #460]	; (800a504 <my_lx6_get_coordinates+0x39c>)
 800a336:	197b      	adds	r3, r7, r5
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	2b02      	cmp	r3, #2
 800a33c:	d80c      	bhi.n	800a358 <my_lx6_get_coordinates+0x1f0>
					{
						if ( tim_seconds > MY_GNSS_MIN_TNS_TIME_THS )
 800a33e:	4b79      	ldr	r3, [pc, #484]	; (800a524 <my_lx6_get_coordinates+0x3bc>)
 800a340:	881b      	ldrh	r3, [r3, #0]
 800a342:	2b0a      	cmp	r3, #10
 800a344:	d900      	bls.n	800a348 <my_lx6_get_coordinates+0x1e0>
 800a346:	e081      	b.n	800a44c <my_lx6_get_coordinates+0x2e4>
						{
							break ;
						}
						gsv_tns = my_nmea_get_gsv_tns ( (char*) nmea_message ) ;
 800a348:	193b      	adds	r3, r7, r4
 800a34a:	0018      	movs	r0, r3
 800a34c:	f000 fe2a 	bl	800afa4 <my_nmea_get_gsv_tns>
 800a350:	0003      	movs	r3, r0
 800a352:	001a      	movs	r2, r3
 800a354:	197b      	adds	r3, r7, r5
 800a356:	701a      	strb	r2, [r3, #0]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngsa_label ) )
 800a358:	23cc      	movs	r3, #204	; 0xcc
 800a35a:	009b      	lsls	r3, r3, #2
 800a35c:	18fb      	adds	r3, r7, r3
 800a35e:	681a      	ldr	r2, [r3, #0]
 800a360:	258a      	movs	r5, #138	; 0x8a
 800a362:	00ad      	lsls	r5, r5, #2
 800a364:	197b      	adds	r3, r7, r5
 800a366:	0011      	movs	r1, r2
 800a368:	0018      	movs	r0, r3
 800a36a:	f002 faa4 	bl	800c8b6 <strstr>
 800a36e:	1e03      	subs	r3, r0, #0
 800a370:	d015      	beq.n	800a39e <my_lx6_get_coordinates+0x236>
					{
						nmea_fixed_mode_s = get_my_nmea_gngsa_fixed_mode_s ( (char*) nmea_message ) ;
 800a372:	4b6b      	ldr	r3, [pc, #428]	; (800a520 <my_lx6_get_coordinates+0x3b8>)
 800a374:	18fc      	adds	r4, r7, r3
 800a376:	197b      	adds	r3, r7, r5
 800a378:	0018      	movs	r0, r3
 800a37a:	f000 fc01 	bl	800ab80 <get_my_nmea_gngsa_fixed_mode_s>
 800a37e:	0003      	movs	r3, r0
 800a380:	7023      	strb	r3, [r4, #0]
						*nmea_fixed_pdop_d = get_my_nmea_gngsa_pdop_d ( (char*) nmea_message ) ;
 800a382:	197b      	adds	r3, r7, r5
 800a384:	0018      	movs	r0, r3
 800a386:	f000 fc06 	bl	800ab96 <get_my_nmea_gngsa_pdop_d>
 800a38a:	0002      	movs	r2, r0
 800a38c:	000b      	movs	r3, r1
 800a38e:	21d2      	movs	r1, #210	; 0xd2
 800a390:	0089      	lsls	r1, r1, #2
 800a392:	2008      	movs	r0, #8
 800a394:	1809      	adds	r1, r1, r0
 800a396:	19c9      	adds	r1, r1, r7
 800a398:	6809      	ldr	r1, [r1, #0]
 800a39a:	600a      	str	r2, [r1, #0]
 800a39c:	604b      	str	r3, [r1, #4]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngll_label ) /*&& nmea_fixed_pdop_d <= nmea_pdop_ths */)
 800a39e:	23cb      	movs	r3, #203	; 0xcb
 800a3a0:	009b      	lsls	r3, r3, #2
 800a3a2:	18fb      	adds	r3, r7, r3
 800a3a4:	681a      	ldr	r2, [r3, #0]
 800a3a6:	258a      	movs	r5, #138	; 0x8a
 800a3a8:	00ad      	lsls	r5, r5, #2
 800a3aa:	197b      	adds	r3, r7, r5
 800a3ac:	0011      	movs	r1, r2
 800a3ae:	0018      	movs	r0, r3
 800a3b0:	f002 fa81 	bl	800c8b6 <strstr>
 800a3b4:	1e03      	subs	r3, r0, #0
 800a3b6:	d03d      	beq.n	800a434 <my_lx6_get_coordinates+0x2cc>
					{
						if ( *nmea_fixed_pdop_d <= nmea_pdop_ths && nmea_fixed_mode_s == NMEA_3D_FIX )
 800a3b8:	23d2      	movs	r3, #210	; 0xd2
 800a3ba:	009b      	lsls	r3, r3, #2
 800a3bc:	2408      	movs	r4, #8
 800a3be:	191b      	adds	r3, r3, r4
 800a3c0:	19db      	adds	r3, r3, r7
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	6838      	ldr	r0, [r7, #0]
 800a3ca:	6879      	ldr	r1, [r7, #4]
 800a3cc:	f7f6 f860 	bl	8000490 <__aeabi_dcmpge>
 800a3d0:	1e03      	subs	r3, r0, #0
 800a3d2:	d021      	beq.n	800a418 <my_lx6_get_coordinates+0x2b0>
 800a3d4:	4b52      	ldr	r3, [pc, #328]	; (800a520 <my_lx6_get_coordinates+0x3b8>)
 800a3d6:	18fb      	adds	r3, r7, r3
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	2b33      	cmp	r3, #51	; 0x33
 800a3dc:	d11c      	bne.n	800a418 <my_lx6_get_coordinates+0x2b0>
						{
							get_my_nmea_gngll_coordinates ( (char*) nmea_message , nmea_latitude_s , nmea_longitude_s , astro_geo_wr_latitude , astro_geo_wr_longitude ) ; // Nie musze nic kombinować z przenoszeniem tej operacji, bo po niej nie będzie już dalej odbierania wiadomości tylko wyjście
 800a3de:	23d3      	movs	r3, #211	; 0xd3
 800a3e0:	009b      	lsls	r3, r3, #2
 800a3e2:	0026      	movs	r6, r4
 800a3e4:	191b      	adds	r3, r3, r4
 800a3e6:	19db      	adds	r3, r3, r7
 800a3e8:	681c      	ldr	r4, [r3, #0]
 800a3ea:	2314      	movs	r3, #20
 800a3ec:	18fa      	adds	r2, r7, r3
 800a3ee:	2320      	movs	r3, #32
 800a3f0:	18f9      	adds	r1, r7, r3
 800a3f2:	1978      	adds	r0, r7, r5
 800a3f4:	23d4      	movs	r3, #212	; 0xd4
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	199b      	adds	r3, r3, r6
 800a3fa:	19db      	adds	r3, r3, r7
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	9300      	str	r3, [sp, #0]
 800a400:	0023      	movs	r3, r4
 800a402:	f000 fccd 	bl	800ada0 <get_my_nmea_gngll_coordinates>
							my_rtc_set_dt_from_nmea_rmc ( (char*) nmea_message ) ; // Jeśli masz fix to na pewno czas jest dobry
 800a406:	197b      	adds	r3, r7, r5
 800a408:	0018      	movs	r0, r3
 800a40a:	f000 f897 	bl	800a53c <my_rtc_set_dt_from_nmea_rmc>
							r = true ;
 800a40e:	4b37      	ldr	r3, [pc, #220]	; (800a4ec <my_lx6_get_coordinates+0x384>)
 800a410:	18fb      	adds	r3, r7, r3
 800a412:	2201      	movs	r2, #1
 800a414:	701a      	strb	r2, [r3, #0]
							break ;
 800a416:	e01a      	b.n	800a44e <my_lx6_get_coordinates+0x2e6>
						}
						else
						{
							memcpy ( gngll_message , nmea_message , NMEA_MESSAGE_SIZE ) ; // Zapisuję, żeby potem, jak nie osiągnę jakości nmea_pdop_ths to wykorzystać coordinates do payload
 800a418:	4b37      	ldr	r3, [pc, #220]	; (800a4f8 <my_lx6_get_coordinates+0x390>)
 800a41a:	21ce      	movs	r1, #206	; 0xce
 800a41c:	0089      	lsls	r1, r1, #2
 800a41e:	185b      	adds	r3, r3, r1
 800a420:	19da      	adds	r2, r3, r7
 800a422:	4b34      	ldr	r3, [pc, #208]	; (800a4f4 <my_lx6_get_coordinates+0x38c>)
 800a424:	185b      	adds	r3, r3, r1
 800a426:	19db      	adds	r3, r3, r7
 800a428:	0010      	movs	r0, r2
 800a42a:	0019      	movs	r1, r3
 800a42c:	23fa      	movs	r3, #250	; 0xfa
 800a42e:	001a      	movs	r2, r3
 800a430:	f002 faf9 	bl	800ca26 <memcpy>
	while ( tim_seconds < active_time_ths  ) // 1200 = 10 min.
 800a434:	4b3b      	ldr	r3, [pc, #236]	; (800a524 <my_lx6_get_coordinates+0x3bc>)
 800a436:	881b      	ldrh	r3, [r3, #0]
 800a438:	4a2b      	ldr	r2, [pc, #172]	; (800a4e8 <my_lx6_get_coordinates+0x380>)
 800a43a:	21ce      	movs	r1, #206	; 0xce
 800a43c:	0089      	lsls	r1, r1, #2
 800a43e:	1852      	adds	r2, r2, r1
 800a440:	19d2      	adds	r2, r2, r7
 800a442:	8812      	ldrh	r2, [r2, #0]
 800a444:	429a      	cmp	r2, r3
 800a446:	d900      	bls.n	800a44a <my_lx6_get_coordinates+0x2e2>
 800a448:	e709      	b.n	800a25e <my_lx6_get_coordinates+0xf6>
 800a44a:	e000      	b.n	800a44e <my_lx6_get_coordinates+0x2e6>
							break ;
 800a44c:	46c0      	nop			; (mov r8, r8)
					}
				}
			}
		}
	}
	HAL_TIM_Base_Stop_IT ( &htim6 ) ;
 800a44e:	4b36      	ldr	r3, [pc, #216]	; (800a528 <my_lx6_get_coordinates+0x3c0>)
 800a450:	0018      	movs	r0, r3
 800a452:	f7fc fb3f 	bl	8006ad4 <HAL_TIM_Base_Stop_IT>
	my_lx6_off () ;
 800a456:	f7f8 fef5 	bl	8003244 <my_lx6_off>
	if ( nmea_latitude_s[0] == 0 && gngll_message[0] != 0 ) // Jeśli nie masz współrzędnych pdop to wykorzystaja gorsze i zrób ich backup
 800a45a:	4b2b      	ldr	r3, [pc, #172]	; (800a508 <my_lx6_get_coordinates+0x3a0>)
 800a45c:	22ce      	movs	r2, #206	; 0xce
 800a45e:	0092      	lsls	r2, r2, #2
 800a460:	189b      	adds	r3, r3, r2
 800a462:	19db      	adds	r3, r3, r7
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d125      	bne.n	800a4b6 <my_lx6_get_coordinates+0x34e>
 800a46a:	4b23      	ldr	r3, [pc, #140]	; (800a4f8 <my_lx6_get_coordinates+0x390>)
 800a46c:	189b      	adds	r3, r3, r2
 800a46e:	19db      	adds	r3, r3, r7
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d01f      	beq.n	800a4b6 <my_lx6_get_coordinates+0x34e>
	{
		get_my_nmea_gngll_coordinates ( (char*) gngll_message , nmea_latitude_s , nmea_longitude_s , astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 800a476:	23d3      	movs	r3, #211	; 0xd3
 800a478:	009b      	lsls	r3, r3, #2
 800a47a:	2508      	movs	r5, #8
 800a47c:	195b      	adds	r3, r3, r5
 800a47e:	19db      	adds	r3, r3, r7
 800a480:	681c      	ldr	r4, [r3, #0]
 800a482:	2314      	movs	r3, #20
 800a484:	18fa      	adds	r2, r7, r3
 800a486:	2320      	movs	r3, #32
 800a488:	18f9      	adds	r1, r7, r3
 800a48a:	2396      	movs	r3, #150	; 0x96
 800a48c:	005b      	lsls	r3, r3, #1
 800a48e:	18f8      	adds	r0, r7, r3
 800a490:	23d4      	movs	r3, #212	; 0xd4
 800a492:	009b      	lsls	r3, r3, #2
 800a494:	195b      	adds	r3, r3, r5
 800a496:	19db      	adds	r3, r3, r7
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	9300      	str	r3, [sp, #0]
 800a49c:	0023      	movs	r3, r4
 800a49e:	f000 fc7f 	bl	800ada0 <get_my_nmea_gngll_coordinates>
		my_rtc_set_dt_from_nmea_rmc ( (char*) nmea_message ) ; // Jeśli masz fix to na pewno czas jest dobry
 800a4a2:	238a      	movs	r3, #138	; 0x8a
 800a4a4:	009b      	lsls	r3, r3, #2
 800a4a6:	18fb      	adds	r3, r7, r3
 800a4a8:	0018      	movs	r0, r3
 800a4aa:	f000 f847 	bl	800a53c <my_rtc_set_dt_from_nmea_rmc>
		r = true ;
 800a4ae:	4b0f      	ldr	r3, [pc, #60]	; (800a4ec <my_lx6_get_coordinates+0x384>)
 800a4b0:	18fb      	adds	r3, r7, r3
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	701a      	strb	r2, [r3, #0]
	}
	if ( r )
 800a4b6:	4b0d      	ldr	r3, [pc, #52]	; (800a4ec <my_lx6_get_coordinates+0x384>)
 800a4b8:	18fb      	adds	r3, r7, r3
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d004      	beq.n	800a4ca <my_lx6_get_coordinates+0x362>
		send_debug_logs ( "my_lx6_gnss.c: Successful fix." ) ;
 800a4c0:	4b1c      	ldr	r3, [pc, #112]	; (800a534 <my_lx6_get_coordinates+0x3cc>)
 800a4c2:	0018      	movs	r0, r3
 800a4c4:	f7f8 fdf8 	bl	80030b8 <send_debug_logs>
 800a4c8:	e003      	b.n	800a4d2 <my_lx6_get_coordinates+0x36a>
	else
		send_debug_logs ( "my_lx6_gnss.c: No fix." ) ;
 800a4ca:	4b1b      	ldr	r3, [pc, #108]	; (800a538 <my_lx6_get_coordinates+0x3d0>)
 800a4cc:	0018      	movs	r0, r3
 800a4ce:	f7f8 fdf3 	bl	80030b8 <send_debug_logs>
	return r ;
 800a4d2:	4b06      	ldr	r3, [pc, #24]	; (800a4ec <my_lx6_get_coordinates+0x384>)
 800a4d4:	18fb      	adds	r3, r7, r3
 800a4d6:	781b      	ldrb	r3, [r3, #0]
}
 800a4d8:	0018      	movs	r0, r3
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	23cf      	movs	r3, #207	; 0xcf
 800a4de:	009b      	lsls	r3, r3, #2
 800a4e0:	449d      	add	sp, r3
 800a4e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4e4:	fffffcbc 	.word	0xfffffcbc
 800a4e8:	fffffcd6 	.word	0xfffffcd6
 800a4ec:	00000337 	.word	0x00000337
 800a4f0:	00000323 	.word	0x00000323
 800a4f4:	fffffef0 	.word	0xfffffef0
 800a4f8:	fffffdf4 	.word	0xfffffdf4
 800a4fc:	fffffcf8 	.word	0xfffffcf8
 800a500:	fffffcf7 	.word	0xfffffcf7
 800a504:	00000336 	.word	0x00000336
 800a508:	fffffce8 	.word	0xfffffce8
 800a50c:	fffffcdc 	.word	0xfffffcdc
 800a510:	08014d84 	.word	0x08014d84
 800a514:	08014d8c 	.word	0x08014d8c
 800a518:	08014d94 	.word	0x08014d94
 800a51c:	08014d98 	.word	0x08014d98
 800a520:	00000335 	.word	0x00000335
 800a524:	20000a24 	.word	0x20000a24
 800a528:	2000078c 	.word	0x2000078c
 800a52c:	20000900 	.word	0x20000900
 800a530:	2000086c 	.word	0x2000086c
 800a534:	08014d9c 	.word	0x08014d9c
 800a538:	08014dbc 	.word	0x08014dbc

0800a53c <my_rtc_set_dt_from_nmea_rmc>:
*/

extern RTC_HandleTypeDef hrtc ;

void my_rtc_set_dt_from_nmea_rmc ( const char* m )
{
 800a53c:	b5b0      	push	{r4, r5, r7, lr}
 800a53e:	b088      	sub	sp, #32
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
	  RTC_TimeTypeDef sTime;
	  RTC_DateTypeDef sDate;

	  my_nmea_get_rmc_date_yy ( m , &sDate.Year ) ;
 800a544:	2508      	movs	r5, #8
 800a546:	197b      	adds	r3, r7, r5
 800a548:	1cda      	adds	r2, r3, #3
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	0011      	movs	r1, r2
 800a54e:	0018      	movs	r0, r3
 800a550:	f000 fd60 	bl	800b014 <my_nmea_get_rmc_date_yy>
	  my_nmea_get_rmc_date_mm ( m , &sDate.Month ) ;
 800a554:	197b      	adds	r3, r7, r5
 800a556:	1c5a      	adds	r2, r3, #1
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	0011      	movs	r1, r2
 800a55c:	0018      	movs	r0, r3
 800a55e:	f000 fd93 	bl	800b088 <my_nmea_get_rmc_date_mm>
	  my_nmea_get_rmc_date_dd ( m , &sDate.Date ) ;
 800a562:	197b      	adds	r3, r7, r5
 800a564:	1c9a      	adds	r2, r3, #2
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	0011      	movs	r1, r2
 800a56a:	0018      	movs	r0, r3
 800a56c:	f000 fdc6 	bl	800b0fc <my_nmea_get_rmc_date_dd>
	  my_nmea_get_rmc_utc_hh ( m , &sTime.Hours ) ;
 800a570:	240c      	movs	r4, #12
 800a572:	193a      	adds	r2, r7, r4
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	0011      	movs	r1, r2
 800a578:	0018      	movs	r0, r3
 800a57a:	f000 fdf9 	bl	800b170 <my_nmea_get_rmc_utc_hh>
	  my_nmea_get_rmc_utc_mm ( m , &sTime.Minutes ) ;
 800a57e:	193b      	adds	r3, r7, r4
 800a580:	1c5a      	adds	r2, r3, #1
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	0011      	movs	r1, r2
 800a586:	0018      	movs	r0, r3
 800a588:	f000 fe2c 	bl	800b1e4 <my_nmea_get_rmc_utc_mm>
	  my_nmea_get_rmc_utc_ss ( m , &sTime.Seconds ) ;
 800a58c:	193b      	adds	r3, r7, r4
 800a58e:	1c9a      	adds	r2, r3, #2
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	0011      	movs	r1, r2
 800a594:	0018      	movs	r0, r3
 800a596:	f000 fe5f 	bl	800b258 <my_nmea_get_rmc_utc_ss>
	  my_nmea_get_rmc_utc_sss ( m , &sTime.SubSeconds ) ;
 800a59a:	193b      	adds	r3, r7, r4
 800a59c:	1d1a      	adds	r2, r3, #4
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	0011      	movs	r1, r2
 800a5a2:	0018      	movs	r0, r3
 800a5a4:	f000 fe92 	bl	800b2cc <my_nmea_get_rmc_utc_sss>
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a5a8:	193b      	adds	r3, r7, r4
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a5ae:	193b      	adds	r3, r7, r4
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	611a      	str	r2, [r3, #16]

	  HAL_RTCEx_EnableBypassShadow ( &hrtc ) ;
 800a5b4:	4b0b      	ldr	r3, [pc, #44]	; (800a5e4 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800a5b6:	0018      	movs	r0, r3
 800a5b8:	f7fb fa6d 	bl	8005a96 <HAL_RTCEx_EnableBypassShadow>
	  HAL_RTC_SetTime ( &hrtc , &sTime , RTC_FORMAT_BIN ) ;
 800a5bc:	1939      	adds	r1, r7, r4
 800a5be:	4b09      	ldr	r3, [pc, #36]	; (800a5e4 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	0018      	movs	r0, r3
 800a5c4:	f7fa fe6a 	bl	800529c <HAL_RTC_SetTime>
	  HAL_RTC_SetDate ( &hrtc , &sDate , RTC_FORMAT_BIN ) ;
 800a5c8:	1979      	adds	r1, r7, r5
 800a5ca:	4b06      	ldr	r3, [pc, #24]	; (800a5e4 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	0018      	movs	r0, r3
 800a5d0:	f7fa ff68 	bl	80054a4 <HAL_RTC_SetDate>
	  HAL_RTCEx_DisableBypassShadow ( &hrtc ) ;
 800a5d4:	4b03      	ldr	r3, [pc, #12]	; (800a5e4 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800a5d6:	0018      	movs	r0, r3
 800a5d8:	f7fb fa91 	bl	8005afe <HAL_RTCEx_DisableBypassShadow>
}
 800a5dc:	46c0      	nop			; (mov r8, r8)
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	b008      	add	sp, #32
 800a5e2:	bdb0      	pop	{r4, r5, r7, pc}
 800a5e4:	200006fc 	.word	0x200006fc

0800a5e8 <my_rtc_get_dt>:
void my_rtc_get_dt ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	6039      	str	r1, [r7, #0]
	HAL_RTC_GetDate ( &hrtc , d , RTC_FORMAT_BIN ) ;
 800a5f2:	6879      	ldr	r1, [r7, #4]
 800a5f4:	4b07      	ldr	r3, [pc, #28]	; (800a614 <my_rtc_get_dt+0x2c>)
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	0018      	movs	r0, r3
 800a5fa:	f7fa ffe5 	bl	80055c8 <HAL_RTC_GetDate>
	HAL_RTC_GetTime ( &hrtc , t , RTC_FORMAT_BIN ) ;
 800a5fe:	6839      	ldr	r1, [r7, #0]
 800a600:	4b04      	ldr	r3, [pc, #16]	; (800a614 <my_rtc_get_dt+0x2c>)
 800a602:	2200      	movs	r2, #0
 800a604:	0018      	movs	r0, r3
 800a606:	f7fa fef1 	bl	80053ec <HAL_RTC_GetTime>
}
 800a60a:	46c0      	nop			; (mov r8, r8)
 800a60c:	46bd      	mov	sp, r7
 800a60e:	b002      	add	sp, #8
 800a610:	bd80      	pop	{r7, pc}
 800a612:	46c0      	nop			; (mov r8, r8)
 800a614:	200006fc 	.word	0x200006fc

0800a618 <my_rtc_get_time_s>:
uint16_t my_rtc_get_time_s ( char* dt_s )
{
 800a618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a61a:	b08d      	sub	sp, #52	; 0x34
 800a61c:	af04      	add	r7, sp, #16
 800a61e:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 800a620:	2508      	movs	r5, #8
 800a622:	1979      	adds	r1, r7, r5
 800a624:	4b1b      	ldr	r3, [pc, #108]	; (800a694 <my_rtc_get_time_s+0x7c>)
 800a626:	2200      	movs	r2, #0
 800a628:	0018      	movs	r0, r3
 800a62a:	f7fa fedf 	bl	80053ec <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 800a62e:	241c      	movs	r4, #28
 800a630:	1939      	adds	r1, r7, r4
 800a632:	4b18      	ldr	r3, [pc, #96]	; (800a694 <my_rtc_get_time_s+0x7c>)
 800a634:	2200      	movs	r2, #0
 800a636:	0018      	movs	r0, r3
 800a638:	f7fa ffc6 	bl	80055c8 <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds) ;
 800a63c:	0021      	movs	r1, r4
 800a63e:	187b      	adds	r3, r7, r1
 800a640:	78db      	ldrb	r3, [r3, #3]
 800a642:	22fa      	movs	r2, #250	; 0xfa
 800a644:	00d2      	lsls	r2, r2, #3
 800a646:	189a      	adds	r2, r3, r2
 800a648:	187b      	adds	r3, r7, r1
 800a64a:	785b      	ldrb	r3, [r3, #1]
 800a64c:	469c      	mov	ip, r3
 800a64e:	187b      	adds	r3, r7, r1
 800a650:	789b      	ldrb	r3, [r3, #2]
 800a652:	001c      	movs	r4, r3
 800a654:	0028      	movs	r0, r5
 800a656:	183b      	adds	r3, r7, r0
 800a658:	781b      	ldrb	r3, [r3, #0]
 800a65a:	001d      	movs	r5, r3
 800a65c:	183b      	adds	r3, r7, r0
 800a65e:	785b      	ldrb	r3, [r3, #1]
 800a660:	001e      	movs	r6, r3
 800a662:	183b      	adds	r3, r7, r0
 800a664:	789b      	ldrb	r3, [r3, #2]
 800a666:	490c      	ldr	r1, [pc, #48]	; (800a698 <my_rtc_get_time_s+0x80>)
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	9303      	str	r3, [sp, #12]
 800a66c:	9602      	str	r6, [sp, #8]
 800a66e:	9501      	str	r5, [sp, #4]
 800a670:	9400      	str	r4, [sp, #0]
 800a672:	4663      	mov	r3, ip
 800a674:	f002 f85c 	bl	800c730 <sprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 800a678:	211c      	movs	r1, #28
 800a67a:	187b      	adds	r3, r7, r1
 800a67c:	78db      	ldrb	r3, [r3, #3]
 800a67e:	b29b      	uxth	r3, r3
 800a680:	22fa      	movs	r2, #250	; 0xfa
 800a682:	00d2      	lsls	r2, r2, #3
 800a684:	4694      	mov	ip, r2
 800a686:	4463      	add	r3, ip
 800a688:	b29b      	uxth	r3, r3
}
 800a68a:	0018      	movs	r0, r3
 800a68c:	46bd      	mov	sp, r7
 800a68e:	b009      	add	sp, #36	; 0x24
 800a690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a692:	46c0      	nop			; (mov r8, r8)
 800a694:	200006fc 	.word	0x200006fc
 800a698:	08014dd4 	.word	0x08014dd4

0800a69c <my_rtc_set_alarm>:
bool my_rtc_set_alarm ( uint32_t s )
{
 800a69c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a69e:	b0a5      	sub	sp, #148	; 0x94
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
	tim_seconds = 0 ;
 800a6a4:	4b36      	ldr	r3, [pc, #216]	; (800a780 <my_rtc_set_alarm+0xe4>)
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	801a      	strh	r2, [r3, #0]

	RTC_DateTypeDef 	d ;
	RTC_TimeTypeDef 	t ;
	RTC_AlarmTypeDef	a ;

	bool r = false ;
 800a6aa:	268f      	movs	r6, #143	; 0x8f
 800a6ac:	19bb      	adds	r3, r7, r6
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	701a      	strb	r2, [r3, #0]

	my_rtc_get_dt ( &d , &t ) ;
 800a6b2:	2470      	movs	r4, #112	; 0x70
 800a6b4:	193a      	adds	r2, r7, r4
 800a6b6:	2584      	movs	r5, #132	; 0x84
 800a6b8:	197b      	adds	r3, r7, r5
 800a6ba:	0011      	movs	r1, r2
 800a6bc:	0018      	movs	r0, r3
 800a6be:	f7ff ff93 	bl	800a5e8 <my_rtc_get_dt>
	uint32_t alarm_ts = my_conv_rtc2timestamp ( &d , &t ) + s ;
 800a6c2:	193a      	adds	r2, r7, r4
 800a6c4:	197b      	adds	r3, r7, r5
 800a6c6:	0011      	movs	r1, r2
 800a6c8:	0018      	movs	r0, r3
 800a6ca:	f000 f8b7 	bl	800a83c <my_conv_rtc2timestamp>
 800a6ce:	0002      	movs	r2, r0
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	189b      	adds	r3, r3, r2
 800a6d4:	2088      	movs	r0, #136	; 0x88
 800a6d6:	183a      	adds	r2, r7, r0
 800a6d8:	6013      	str	r3, [r2, #0]
	my_conv_timestamp2rtc ( alarm_ts , &d , &t ) ;
 800a6da:	193a      	adds	r2, r7, r4
 800a6dc:	1979      	adds	r1, r7, r5
 800a6de:	0005      	movs	r5, r0
 800a6e0:	183b      	adds	r3, r7, r0
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	0018      	movs	r0, r3
 800a6e6:	f000 f91d 	bl	800a924 <my_conv_timestamp2rtc>
	a.AlarmTime.Hours = t.Hours ;
 800a6ea:	193b      	adds	r3, r7, r4
 800a6ec:	781a      	ldrb	r2, [r3, #0]
 800a6ee:	2148      	movs	r1, #72	; 0x48
 800a6f0:	187b      	adds	r3, r7, r1
 800a6f2:	701a      	strb	r2, [r3, #0]
	a.AlarmTime.Minutes = t.Minutes ;
 800a6f4:	193b      	adds	r3, r7, r4
 800a6f6:	785a      	ldrb	r2, [r3, #1]
 800a6f8:	187b      	adds	r3, r7, r1
 800a6fa:	705a      	strb	r2, [r3, #1]
	a.AlarmTime.Seconds = t.Seconds ;
 800a6fc:	193b      	adds	r3, r7, r4
 800a6fe:	789a      	ldrb	r2, [r3, #2]
 800a700:	187b      	adds	r3, r7, r1
 800a702:	709a      	strb	r2, [r3, #2]
	a.AlarmTime.SubSeconds = 0 ;
 800a704:	187b      	adds	r3, r7, r1
 800a706:	2200      	movs	r2, #0
 800a708:	605a      	str	r2, [r3, #4]
	a.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 800a70a:	187b      	adds	r3, r7, r1
 800a70c:	2200      	movs	r2, #0
 800a70e:	60da      	str	r2, [r3, #12]
	a.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET ;
 800a710:	187b      	adds	r3, r7, r1
 800a712:	2200      	movs	r2, #0
 800a714:	611a      	str	r2, [r3, #16]
	a.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY ;
 800a716:	187b      	adds	r3, r7, r1
 800a718:	2280      	movs	r2, #128	; 0x80
 800a71a:	0612      	lsls	r2, r2, #24
 800a71c:	615a      	str	r2, [r3, #20]
	a.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL ;
 800a71e:	187b      	adds	r3, r7, r1
 800a720:	2200      	movs	r2, #0
 800a722:	619a      	str	r2, [r3, #24]
	a.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE ;
 800a724:	187b      	adds	r3, r7, r1
 800a726:	2200      	movs	r2, #0
 800a728:	61da      	str	r2, [r3, #28]
	a.Alarm = RTC_ALARM_A ;
 800a72a:	187b      	adds	r3, r7, r1
 800a72c:	2280      	movs	r2, #128	; 0x80
 800a72e:	0052      	lsls	r2, r2, #1
 800a730:	625a      	str	r2, [r3, #36]	; 0x24

	if ( HAL_RTC_SetAlarm ( &hrtc , &a , RTC_FORMAT_BIN ) == HAL_OK )
 800a732:	1879      	adds	r1, r7, r1
 800a734:	4b13      	ldr	r3, [pc, #76]	; (800a784 <my_rtc_set_alarm+0xe8>)
 800a736:	2200      	movs	r2, #0
 800a738:	0018      	movs	r0, r3
 800a73a:	f7fa ff93 	bl	8005664 <HAL_RTC_SetAlarm>
 800a73e:	1e03      	subs	r3, r0, #0
 800a740:	d117      	bne.n	800a772 <my_rtc_set_alarm+0xd6>
	{
		char s[60] = {0} ;
 800a742:	240c      	movs	r4, #12
 800a744:	193b      	adds	r3, r7, r4
 800a746:	2200      	movs	r2, #0
 800a748:	601a      	str	r2, [r3, #0]
 800a74a:	3304      	adds	r3, #4
 800a74c:	2238      	movs	r2, #56	; 0x38
 800a74e:	2100      	movs	r1, #0
 800a750:	0018      	movs	r0, r3
 800a752:	f002 f883 	bl	800c85c <memset>
		sprintf ( s , "Alarm set to %lu" , alarm_ts ) ;
 800a756:	197b      	adds	r3, r7, r5
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	490b      	ldr	r1, [pc, #44]	; (800a788 <my_rtc_set_alarm+0xec>)
 800a75c:	193b      	adds	r3, r7, r4
 800a75e:	0018      	movs	r0, r3
 800a760:	f001 ffe6 	bl	800c730 <sprintf>
		send_debug_logs ( s ) ;
 800a764:	193b      	adds	r3, r7, r4
 800a766:	0018      	movs	r0, r3
 800a768:	f7f8 fca6 	bl	80030b8 <send_debug_logs>
		r = true ;
 800a76c:	19bb      	adds	r3, r7, r6
 800a76e:	2201      	movs	r2, #1
 800a770:	701a      	strb	r2, [r3, #0]
			break ;
		}
	}
	HAL_TIM_Base_Stop_IT ( MY_TIMER ) ;
	*/
	return r ;
 800a772:	238f      	movs	r3, #143	; 0x8f
 800a774:	18fb      	adds	r3, r7, r3
 800a776:	781b      	ldrb	r3, [r3, #0]
}
 800a778:	0018      	movs	r0, r3
 800a77a:	46bd      	mov	sp, r7
 800a77c:	b025      	add	sp, #148	; 0x94
 800a77e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a780:	20000a24 	.word	0x20000a24
 800a784:	200006fc 	.word	0x200006fc
 800a788:	08014df4 	.word	0x08014df4

0800a78c <my_string2double_conv>:
 */

#include "my_conversions.h"

double my_string2double_conv ( const char* s )
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b084      	sub	sp, #16
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
    double d = strtod ( s , NULL ) ;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2100      	movs	r1, #0
 800a798:	0018      	movs	r0, r3
 800a79a:	f001 fe2d 	bl	800c3f8 <strtod>
 800a79e:	0002      	movs	r2, r0
 800a7a0:	000b      	movs	r3, r1
 800a7a2:	60ba      	str	r2, [r7, #8]
 800a7a4:	60fb      	str	r3, [r7, #12]
    return d ;
 800a7a6:	68ba      	ldr	r2, [r7, #8]
 800a7a8:	68fb      	ldr	r3, [r7, #12]
}
 800a7aa:	0010      	movs	r0, r2
 800a7ac:	0019      	movs	r1, r3
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	b004      	add	sp, #16
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	0008      	movs	r0, r1
 800a7be:	0011      	movs	r1, r2
 800a7c0:	1cfb      	adds	r3, r7, #3
 800a7c2:	1c02      	adds	r2, r0, #0
 800a7c4:	701a      	strb	r2, [r3, #0]
 800a7c6:	1cbb      	adds	r3, r7, #2
 800a7c8:	1c0a      	adds	r2, r1, #0
 800a7ca:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 800a7cc:	230f      	movs	r3, #15
 800a7ce:	18fb      	adds	r3, r7, r3
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 800a7d4:	230e      	movs	r3, #14
 800a7d6:	18fb      	adds	r3, r7, r3
 800a7d8:	2200      	movs	r2, #0
 800a7da:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 800a7dc:	e01c      	b.n	800a818 <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 800a7de:	230f      	movs	r3, #15
 800a7e0:	18fb      	adds	r3, r7, r3
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	18d3      	adds	r3, r2, r3
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	1cfa      	adds	r2, r7, #3
 800a7ec:	7812      	ldrb	r2, [r2, #0]
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d105      	bne.n	800a7fe <my_find_char_position+0x4a>
			p++ ;
 800a7f2:	210e      	movs	r1, #14
 800a7f4:	187b      	adds	r3, r7, r1
 800a7f6:	781a      	ldrb	r2, [r3, #0]
 800a7f8:	187b      	adds	r3, r7, r1
 800a7fa:	3201      	adds	r2, #1
 800a7fc:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 800a7fe:	230e      	movs	r3, #14
 800a800:	18fa      	adds	r2, r7, r3
 800a802:	1cbb      	adds	r3, r7, #2
 800a804:	7812      	ldrb	r2, [r2, #0]
 800a806:	781b      	ldrb	r3, [r3, #0]
 800a808:	429a      	cmp	r2, r3
 800a80a:	d00e      	beq.n	800a82a <my_find_char_position+0x76>
			break ;
		i++ ;
 800a80c:	210f      	movs	r1, #15
 800a80e:	187b      	adds	r3, r7, r1
 800a810:	781a      	ldrb	r2, [r3, #0]
 800a812:	187b      	adds	r3, r7, r1
 800a814:	3201      	adds	r2, #1
 800a816:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 800a818:	230f      	movs	r3, #15
 800a81a:	18fb      	adds	r3, r7, r3
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	18d3      	adds	r3, r2, r3
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d1da      	bne.n	800a7de <my_find_char_position+0x2a>
 800a828:	e000      	b.n	800a82c <my_find_char_position+0x78>
			break ;
 800a82a:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 800a82c:	230f      	movs	r3, #15
 800a82e:	18fb      	adds	r3, r7, r3
 800a830:	781b      	ldrb	r3, [r3, #0]
}
 800a832:	0018      	movs	r0, r3
 800a834:	46bd      	mov	sp, r7
 800a836:	b004      	add	sp, #16
 800a838:	bd80      	pop	{r7, pc}
	...

0800a83c <my_conv_rtc2timestamp>:

// Function converting RTC date and time to Unix timestamp (ts): number of seconds after the Epoch (1970.01.01).
uint32_t my_conv_rtc2timestamp ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b086      	sub	sp, #24
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
    // Number of days in months (considering leap years).
    static const uint8_t monthDays[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;

    // Conversion of years into days.
    uint32_t years = d->Year + 2000;  // RTC starts from 20
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	78db      	ldrb	r3, [r3, #3]
 800a84a:	22fa      	movs	r2, #250	; 0xfa
 800a84c:	00d2      	lsls	r2, r2, #3
 800a84e:	4694      	mov	ip, r2
 800a850:	4463      	add	r3, ip
 800a852:	60fb      	str	r3, [r7, #12]
    uint32_t days = ( years - 1970 ) * 365 + ( ( years - 1969 ) / 4 ) ;  // Days for years and leap years.
 800a854:	68fa      	ldr	r2, [r7, #12]
 800a856:	0013      	movs	r3, r2
 800a858:	00db      	lsls	r3, r3, #3
 800a85a:	189b      	adds	r3, r3, r2
 800a85c:	00db      	lsls	r3, r3, #3
 800a85e:	189b      	adds	r3, r3, r2
 800a860:	009a      	lsls	r2, r3, #2
 800a862:	189a      	adds	r2, r3, r2
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	492c      	ldr	r1, [pc, #176]	; (800a918 <my_conv_rtc2timestamp+0xdc>)
 800a868:	468c      	mov	ip, r1
 800a86a:	4463      	add	r3, ip
 800a86c:	089b      	lsrs	r3, r3, #2
 800a86e:	18d3      	adds	r3, r2, r3
 800a870:	4a2a      	ldr	r2, [pc, #168]	; (800a91c <my_conv_rtc2timestamp+0xe0>)
 800a872:	4694      	mov	ip, r2
 800a874:	4463      	add	r3, ip
 800a876:	617b      	str	r3, [r7, #20]
    // Conversion of months into days.
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 800a878:	2300      	movs	r3, #0
 800a87a:	613b      	str	r3, [r7, #16]
 800a87c:	e00a      	b.n	800a894 <my_conv_rtc2timestamp+0x58>
    {
        days += monthDays[i] ;
 800a87e:	4a28      	ldr	r2, [pc, #160]	; (800a920 <my_conv_rtc2timestamp+0xe4>)
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	18d3      	adds	r3, r2, r3
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	001a      	movs	r2, r3
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	189b      	adds	r3, r3, r2
 800a88c:	617b      	str	r3, [r7, #20]
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	3301      	adds	r3, #1
 800a892:	613b      	str	r3, [r7, #16]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	785b      	ldrb	r3, [r3, #1]
 800a898:	3b01      	subs	r3, #1
 800a89a:	693a      	ldr	r2, [r7, #16]
 800a89c:	429a      	cmp	r2, r3
 800a89e:	dbee      	blt.n	800a87e <my_conv_rtc2timestamp+0x42>
    }
    if ( d->Month > 2 && my_conv_is_leap_year ( years ) )
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	785b      	ldrb	r3, [r3, #1]
 800a8a4:	2b02      	cmp	r3, #2
 800a8a6:	d908      	bls.n	800a8ba <my_conv_rtc2timestamp+0x7e>
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	0018      	movs	r0, r3
 800a8ac:	f000 f8de 	bl	800aa6c <my_conv_is_leap_year>
 800a8b0:	1e03      	subs	r3, r0, #0
 800a8b2:	d002      	beq.n	800a8ba <my_conv_rtc2timestamp+0x7e>
    {
        days++ ;  // Add one day in a leap year.
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	3301      	adds	r3, #1
 800a8b8:	617b      	str	r3, [r7, #20]
    }
    // add the days of the month
    days += d->Date - 1 ;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	789b      	ldrb	r3, [r3, #2]
 800a8be:	001a      	movs	r2, r3
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	18d3      	adds	r3, r2, r3
 800a8c4:	3b01      	subs	r3, #1
 800a8c6:	617b      	str	r3, [r7, #20]
    // Convert days into seconds and add hours, minutes, seconds.
    uint32_t ts = days * 86400 + t->Hours * 3600 + t->Minutes * 60 + t->Seconds ;
 800a8c8:	697a      	ldr	r2, [r7, #20]
 800a8ca:	0013      	movs	r3, r2
 800a8cc:	005b      	lsls	r3, r3, #1
 800a8ce:	189b      	adds	r3, r3, r2
 800a8d0:	011a      	lsls	r2, r3, #4
 800a8d2:	1ad2      	subs	r2, r2, r3
 800a8d4:	0113      	lsls	r3, r2, #4
 800a8d6:	1a9b      	subs	r3, r3, r2
 800a8d8:	01db      	lsls	r3, r3, #7
 800a8da:	0019      	movs	r1, r3
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	001a      	movs	r2, r3
 800a8e2:	0013      	movs	r3, r2
 800a8e4:	011b      	lsls	r3, r3, #4
 800a8e6:	1a9b      	subs	r3, r3, r2
 800a8e8:	011a      	lsls	r2, r3, #4
 800a8ea:	1ad2      	subs	r2, r2, r3
 800a8ec:	0113      	lsls	r3, r2, #4
 800a8ee:	001a      	movs	r2, r3
 800a8f0:	0013      	movs	r3, r2
 800a8f2:	18ca      	adds	r2, r1, r3
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	785b      	ldrb	r3, [r3, #1]
 800a8f8:	0019      	movs	r1, r3
 800a8fa:	000b      	movs	r3, r1
 800a8fc:	011b      	lsls	r3, r3, #4
 800a8fe:	1a5b      	subs	r3, r3, r1
 800a900:	009b      	lsls	r3, r3, #2
 800a902:	18d3      	adds	r3, r2, r3
 800a904:	683a      	ldr	r2, [r7, #0]
 800a906:	7892      	ldrb	r2, [r2, #2]
 800a908:	189b      	adds	r3, r3, r2
 800a90a:	60bb      	str	r3, [r7, #8]

    return ts ;
 800a90c:	68bb      	ldr	r3, [r7, #8]
}
 800a90e:	0018      	movs	r0, r3
 800a910:	46bd      	mov	sp, r7
 800a912:	b006      	add	sp, #24
 800a914:	bd80      	pop	{r7, pc}
 800a916:	46c0      	nop			; (mov r8, r8)
 800a918:	fffff84f 	.word	0xfffff84f
 800a91c:	fff50736 	.word	0xfff50736
 800a920:	08014ef4 	.word	0x08014ef4

0800a924 <my_conv_timestamp2rtc>:

// Function converting Unix timestamp (ts) to RTC date and time
void my_conv_timestamp2rtc ( uint32_t ts , RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 800a924:	b590      	push	{r4, r7, lr}
 800a926:	b08b      	sub	sp, #44	; 0x2c
 800a928:	af00      	add	r7, sp, #0
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	607a      	str	r2, [r7, #4]
	static const uint16_t daysInMonth[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;
	uint32_t seconds = ts % 60 ;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	213c      	movs	r1, #60	; 0x3c
 800a934:	0018      	movs	r0, r3
 800a936:	f7f5 fc87 	bl	8000248 <__aeabi_uidivmod>
 800a93a:	000b      	movs	r3, r1
 800a93c:	61bb      	str	r3, [r7, #24]
	uint32_t minutes = ( ts / 60 ) % 60 ;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	213c      	movs	r1, #60	; 0x3c
 800a942:	0018      	movs	r0, r3
 800a944:	f7f5 fbfa 	bl	800013c <__udivsi3>
 800a948:	0003      	movs	r3, r0
 800a94a:	213c      	movs	r1, #60	; 0x3c
 800a94c:	0018      	movs	r0, r3
 800a94e:	f7f5 fc7b 	bl	8000248 <__aeabi_uidivmod>
 800a952:	000b      	movs	r3, r1
 800a954:	617b      	str	r3, [r7, #20]
	uint32_t hours = ( ts / 3600 ) % 24 ;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	22e1      	movs	r2, #225	; 0xe1
 800a95a:	0111      	lsls	r1, r2, #4
 800a95c:	0018      	movs	r0, r3
 800a95e:	f7f5 fbed 	bl	800013c <__udivsi3>
 800a962:	0003      	movs	r3, r0
 800a964:	2118      	movs	r1, #24
 800a966:	0018      	movs	r0, r3
 800a968:	f7f5 fc6e 	bl	8000248 <__aeabi_uidivmod>
 800a96c:	000b      	movs	r3, r1
 800a96e:	613b      	str	r3, [r7, #16]

	// Counting days since Epoch
	uint32_t days = ts / 86400 ;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	493b      	ldr	r1, [pc, #236]	; (800aa60 <my_conv_timestamp2rtc+0x13c>)
 800a974:	0018      	movs	r0, r3
 800a976:	f7f5 fbe1 	bl	800013c <__udivsi3>
 800a97a:	0003      	movs	r3, r0
 800a97c:	627b      	str	r3, [r7, #36]	; 0x24

	// Calculating the year
	uint32_t year = 1970 ;
 800a97e:	4b39      	ldr	r3, [pc, #228]	; (800aa64 <my_conv_timestamp2rtc+0x140>)
 800a980:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 800a982:	e00d      	b.n	800a9a0 <my_conv_timestamp2rtc+0x7c>
	{
		days -= 365 + my_conv_is_leap_year ( year ) ;
 800a984:	6a3b      	ldr	r3, [r7, #32]
 800a986:	0018      	movs	r0, r3
 800a988:	f000 f870 	bl	800aa6c <my_conv_is_leap_year>
 800a98c:	0003      	movs	r3, r0
 800a98e:	336e      	adds	r3, #110	; 0x6e
 800a990:	33ff      	adds	r3, #255	; 0xff
 800a992:	001a      	movs	r2, r3
 800a994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a996:	1a9b      	subs	r3, r3, r2
 800a998:	627b      	str	r3, [r7, #36]	; 0x24
		year++ ;
 800a99a:	6a3b      	ldr	r3, [r7, #32]
 800a99c:	3301      	adds	r3, #1
 800a99e:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 800a9a0:	6a3b      	ldr	r3, [r7, #32]
 800a9a2:	0018      	movs	r0, r3
 800a9a4:	f000 f862 	bl	800aa6c <my_conv_is_leap_year>
 800a9a8:	0003      	movs	r3, r0
 800a9aa:	336e      	adds	r3, #110	; 0x6e
 800a9ac:	33ff      	adds	r3, #255	; 0xff
 800a9ae:	001a      	movs	r2, r3
 800a9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d2e6      	bcs.n	800a984 <my_conv_timestamp2rtc+0x60>
	}

	// Calculating the month
	uint32_t month = 0 ;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 800a9ba:	e018      	b.n	800a9ee <my_conv_timestamp2rtc+0xca>
		days -= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ;
 800a9bc:	4b2a      	ldr	r3, [pc, #168]	; (800aa68 <my_conv_timestamp2rtc+0x144>)
 800a9be:	69fa      	ldr	r2, [r7, #28]
 800a9c0:	0052      	lsls	r2, r2, #1
 800a9c2:	5ad3      	ldrh	r3, [r2, r3]
 800a9c4:	001c      	movs	r4, r3
 800a9c6:	69fb      	ldr	r3, [r7, #28]
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d107      	bne.n	800a9dc <my_conv_timestamp2rtc+0xb8>
 800a9cc:	6a3b      	ldr	r3, [r7, #32]
 800a9ce:	0018      	movs	r0, r3
 800a9d0:	f000 f84c 	bl	800aa6c <my_conv_is_leap_year>
 800a9d4:	1e03      	subs	r3, r0, #0
 800a9d6:	d001      	beq.n	800a9dc <my_conv_timestamp2rtc+0xb8>
 800a9d8:	2301      	movs	r3, #1
 800a9da:	e000      	b.n	800a9de <my_conv_timestamp2rtc+0xba>
 800a9dc:	2300      	movs	r3, #0
 800a9de:	191b      	adds	r3, r3, r4
 800a9e0:	001a      	movs	r2, r3
 800a9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e4:	1a9b      	subs	r3, r3, r2
 800a9e6:	627b      	str	r3, [r7, #36]	; 0x24
		month++ ;
 800a9e8:	69fb      	ldr	r3, [r7, #28]
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 800a9ee:	4b1e      	ldr	r3, [pc, #120]	; (800aa68 <my_conv_timestamp2rtc+0x144>)
 800a9f0:	69fa      	ldr	r2, [r7, #28]
 800a9f2:	0052      	lsls	r2, r2, #1
 800a9f4:	5ad3      	ldrh	r3, [r2, r3]
 800a9f6:	001c      	movs	r4, r3
 800a9f8:	69fb      	ldr	r3, [r7, #28]
 800a9fa:	2b01      	cmp	r3, #1
 800a9fc:	d107      	bne.n	800aa0e <my_conv_timestamp2rtc+0xea>
 800a9fe:	6a3b      	ldr	r3, [r7, #32]
 800aa00:	0018      	movs	r0, r3
 800aa02:	f000 f833 	bl	800aa6c <my_conv_is_leap_year>
 800aa06:	1e03      	subs	r3, r0, #0
 800aa08:	d001      	beq.n	800aa0e <my_conv_timestamp2rtc+0xea>
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	e000      	b.n	800aa10 <my_conv_timestamp2rtc+0xec>
 800aa0e:	2300      	movs	r3, #0
 800aa10:	191b      	adds	r3, r3, r4
 800aa12:	001a      	movs	r2, r3
 800aa14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d2d0      	bcs.n	800a9bc <my_conv_timestamp2rtc+0x98>
	}

	// Setting date and time in RTC structures
	d->Year = year - 2000 ; // RTC_DateTypeDef.Year expects years since 2000
 800aa1a:	6a3b      	ldr	r3, [r7, #32]
 800aa1c:	b2db      	uxtb	r3, r3
 800aa1e:	3330      	adds	r3, #48	; 0x30
 800aa20:	b2da      	uxtb	r2, r3
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	70da      	strb	r2, [r3, #3]
	d->Month = month + 1 ;  // +1 because month is counted from 0
 800aa26:	69fb      	ldr	r3, [r7, #28]
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	b2da      	uxtb	r2, r3
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	705a      	strb	r2, [r3, #1]
	d->Date = days + 1 ;    // +1 because days are counted from 0
 800aa32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	3301      	adds	r3, #1
 800aa38:	b2da      	uxtb	r2, r3
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	709a      	strb	r2, [r3, #2]
	t->Hours = hours ;
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	b2da      	uxtb	r2, r3
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	701a      	strb	r2, [r3, #0]
	t->Minutes = minutes ;
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	b2da      	uxtb	r2, r3
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	705a      	strb	r2, [r3, #1]
	t->Seconds = seconds ;
 800aa4e:	69bb      	ldr	r3, [r7, #24]
 800aa50:	b2da      	uxtb	r2, r3
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	709a      	strb	r2, [r3, #2]
}
 800aa56:	46c0      	nop			; (mov r8, r8)
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	b00b      	add	sp, #44	; 0x2c
 800aa5c:	bd90      	pop	{r4, r7, pc}
 800aa5e:	46c0      	nop			; (mov r8, r8)
 800aa60:	00015180 	.word	0x00015180
 800aa64:	000007b2 	.word	0x000007b2
 800aa68:	08014f00 	.word	0x08014f00

0800aa6c <my_conv_is_leap_year>:

// Function checking for leap years
int my_conv_is_leap_year ( int yyyy )
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
    return ( ( yyyy % 4 == 0 ) && ( yyyy % 100 != 0 ) ) || ( yyyy % 400 == 0 ) ;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2203      	movs	r2, #3
 800aa78:	4013      	ands	r3, r2
 800aa7a:	d106      	bne.n	800aa8a <my_conv_is_leap_year+0x1e>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2164      	movs	r1, #100	; 0x64
 800aa80:	0018      	movs	r0, r3
 800aa82:	f7f5 fccb 	bl	800041c <__aeabi_idivmod>
 800aa86:	1e0b      	subs	r3, r1, #0
 800aa88:	d107      	bne.n	800aa9a <my_conv_is_leap_year+0x2e>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	22c8      	movs	r2, #200	; 0xc8
 800aa8e:	0051      	lsls	r1, r2, #1
 800aa90:	0018      	movs	r0, r3
 800aa92:	f7f5 fcc3 	bl	800041c <__aeabi_idivmod>
 800aa96:	1e0b      	subs	r3, r1, #0
 800aa98:	d101      	bne.n	800aa9e <my_conv_is_leap_year+0x32>
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	e000      	b.n	800aaa0 <my_conv_is_leap_year+0x34>
 800aa9e:	2300      	movs	r3, #0
}
 800aaa0:	0018      	movs	r0, r3
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	b002      	add	sp, #8
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <my_nmea_message>:
#include <inttypes.h>
#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b084      	sub	sp, #16
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	60f8      	str	r0, [r7, #12]
 800aab0:	60b9      	str	r1, [r7, #8]
 800aab2:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	2b24      	cmp	r3, #36	; 0x24
 800aaba:	d117      	bne.n	800aaec <my_nmea_message+0x44>
    {
        *i = 0 ;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2200      	movs	r2, #0
 800aac0:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	1c5a      	adds	r2, r3, #1
 800aac8:	b2d1      	uxtb	r1, r2
 800aaca:	687a      	ldr	r2, [r7, #4]
 800aacc:	7011      	strb	r1, [r2, #0]
 800aace:	001a      	movs	r2, r3
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	189b      	adds	r3, r3, r2
 800aad4:	68fa      	ldr	r2, [r7, #12]
 800aad6:	7812      	ldrb	r2, [r2, #0]
 800aad8:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	001a      	movs	r2, r3
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	189b      	adds	r3, r3, r2
 800aae4:	2200      	movs	r2, #0
 800aae6:	701a      	strb	r2, [r3, #0]
        return 0 ;
 800aae8:	2300      	movs	r3, #0
 800aaea:	e045      	b.n	800ab78 <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	781b      	ldrb	r3, [r3, #0]
 800aaf0:	2b1f      	cmp	r3, #31
 800aaf2:	d907      	bls.n	800ab04 <my_nmea_message+0x5c>
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	2b7e      	cmp	r3, #126	; 0x7e
 800aafa:	d803      	bhi.n	800ab04 <my_nmea_message+0x5c>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d103      	bne.n	800ab0c <my_nmea_message+0x64>
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	2b0d      	cmp	r3, #13
 800ab0a:	d114      	bne.n	800ab36 <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	1c5a      	adds	r2, r3, #1
 800ab12:	b2d1      	uxtb	r1, r2
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	7011      	strb	r1, [r2, #0]
 800ab18:	001a      	movs	r2, r3
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	189b      	adds	r3, r3, r2
 800ab1e:	68fa      	ldr	r2, [r7, #12]
 800ab20:	7812      	ldrb	r2, [r2, #0]
 800ab22:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	781b      	ldrb	r3, [r3, #0]
 800ab28:	001a      	movs	r2, r3
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	189b      	adds	r3, r3, r2
 800ab2e:	2200      	movs	r2, #0
 800ab30:	701a      	strb	r2, [r3, #0]
        return 1 ;
 800ab32:	2301      	movs	r3, #1
 800ab34:	e020      	b.n	800ab78 <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	2b0a      	cmp	r3, #10
 800ab3c:	d11a      	bne.n	800ab74 <my_nmea_message+0xcc>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d916      	bls.n	800ab74 <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	781b      	ldrb	r3, [r3, #0]
 800ab4a:	3b01      	subs	r3, #1
 800ab4c:	b2da      	uxtb	r2, r3
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	701a      	strb	r2, [r3, #0]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	001a      	movs	r2, r3
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	189b      	adds	r3, r3, r2
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	2b0d      	cmp	r3, #13
 800ab60:	d108      	bne.n	800ab74 <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	001a      	movs	r2, r3
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	189b      	adds	r3, r3, r2
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	701a      	strb	r2, [r3, #0]
            return 2 ;
 800ab70:	2302      	movs	r3, #2
 800ab72:	e001      	b.n	800ab78 <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 800ab74:	2301      	movs	r3, #1
 800ab76:	425b      	negs	r3, r3
}
 800ab78:	0018      	movs	r0, r3
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	b004      	add	sp, #16
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <get_my_nmea_gngsa_fixed_mode_s>:

const char get_my_nmea_gngsa_fixed_mode_s ( const char* m )
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b082      	sub	sp, #8
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
	return m[9] ;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	3309      	adds	r3, #9
 800ab8c:	781b      	ldrb	r3, [r3, #0]
}
 800ab8e:	0018      	movs	r0, r3
 800ab90:	46bd      	mov	sp, r7
 800ab92:	b002      	add	sp, #8
 800ab94:	bd80      	pop	{r7, pc}

0800ab96 <get_my_nmea_gngsa_pdop_d>:

double get_my_nmea_gngsa_pdop_d ( const char* m )
{
 800ab96:	b5b0      	push	{r4, r5, r7, lr}
 800ab98:	b086      	sub	sp, #24
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
	uint8_t pdop_position = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION ) + 1 ;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	220f      	movs	r2, #15
 800aba2:	212c      	movs	r1, #44	; 0x2c
 800aba4:	0018      	movs	r0, r3
 800aba6:	f7ff fe05 	bl	800a7b4 <my_find_char_position>
 800abaa:	0003      	movs	r3, r0
 800abac:	001a      	movs	r2, r3
 800abae:	2517      	movs	r5, #23
 800abb0:	197b      	adds	r3, r7, r5
 800abb2:	3201      	adds	r2, #1
 800abb4:	701a      	strb	r2, [r3, #0]
	uint8_t pdop_length = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION + 1 ) - pdop_position ;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2210      	movs	r2, #16
 800abba:	212c      	movs	r1, #44	; 0x2c
 800abbc:	0018      	movs	r0, r3
 800abbe:	f7ff fdf9 	bl	800a7b4 <my_find_char_position>
 800abc2:	0003      	movs	r3, r0
 800abc4:	0019      	movs	r1, r3
 800abc6:	2416      	movs	r4, #22
 800abc8:	193b      	adds	r3, r7, r4
 800abca:	197a      	adds	r2, r7, r5
 800abcc:	7812      	ldrb	r2, [r2, #0]
 800abce:	1a8a      	subs	r2, r1, r2
 800abd0:	701a      	strb	r2, [r3, #0]

	char* pdop_s = (char*) malloc ( ( pdop_length +1 ) * sizeof ( char ) ) ;
 800abd2:	193b      	adds	r3, r7, r4
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	3301      	adds	r3, #1
 800abd8:	0018      	movs	r0, r3
 800abda:	f000 fbab 	bl	800b334 <malloc>
 800abde:	0003      	movs	r3, r0
 800abe0:	613b      	str	r3, [r7, #16]
	strncpy ( pdop_s , m + pdop_position , pdop_length ) ; // Kopiowanie fragmentu łańcucha
 800abe2:	197b      	adds	r3, r7, r5
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	687a      	ldr	r2, [r7, #4]
 800abe8:	18d1      	adds	r1, r2, r3
 800abea:	193b      	adds	r3, r7, r4
 800abec:	781a      	ldrb	r2, [r3, #0]
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	0018      	movs	r0, r3
 800abf2:	f001 fe4c 	bl	800c88e <strncpy>
	pdop_s[pdop_length] = '\0';
 800abf6:	193b      	adds	r3, r7, r4
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	693a      	ldr	r2, [r7, #16]
 800abfc:	18d3      	adds	r3, r2, r3
 800abfe:	2200      	movs	r2, #0
 800ac00:	701a      	strb	r2, [r3, #0]
	double pdop = my_string2double_conv ( pdop_s ) ;
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	0018      	movs	r0, r3
 800ac06:	f7ff fdc1 	bl	800a78c <my_string2double_conv>
 800ac0a:	0002      	movs	r2, r0
 800ac0c:	000b      	movs	r3, r1
 800ac0e:	60ba      	str	r2, [r7, #8]
 800ac10:	60fb      	str	r3, [r7, #12]
	free ( pdop_s ) ;
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	0018      	movs	r0, r3
 800ac16:	f000 fb97 	bl	800b348 <free>
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
 800ac1a:	68ba      	ldr	r2, [r7, #8]
 800ac1c:	68fb      	ldr	r3, [r7, #12]
}
 800ac1e:	0010      	movs	r0, r2
 800ac20:	0019      	movs	r1, r3
 800ac22:	46bd      	mov	sp, r7
 800ac24:	b006      	add	sp, #24
 800ac26:	bdb0      	pop	{r4, r5, r7, pc}

0800ac28 <is_my_nmea_checksum_ok>:


bool is_my_nmea_checksum_ok ( const char* s )
{
 800ac28:	b590      	push	{r4, r7, lr}
 800ac2a:	b085      	sub	sp, #20
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 800ac30:	230f      	movs	r3, #15
 800ac32:	18fb      	adds	r3, r7, r3
 800ac34:	2200      	movs	r2, #0
 800ac36:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 800ac38:	230e      	movs	r3, #14
 800ac3a:	18fb      	adds	r3, r7, r3
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 800ac40:	e00f      	b.n	800ac62 <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 800ac42:	220e      	movs	r2, #14
 800ac44:	18bb      	adds	r3, r7, r2
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	18ba      	adds	r2, r7, r2
 800ac4a:	1c59      	adds	r1, r3, #1
 800ac4c:	7011      	strb	r1, [r2, #0]
 800ac4e:	001a      	movs	r2, r3
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	189b      	adds	r3, r3, r2
 800ac54:	7819      	ldrb	r1, [r3, #0]
 800ac56:	220f      	movs	r2, #15
 800ac58:	18bb      	adds	r3, r7, r2
 800ac5a:	18ba      	adds	r2, r7, r2
 800ac5c:	7812      	ldrb	r2, [r2, #0]
 800ac5e:	404a      	eors	r2, r1
 800ac60:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 800ac62:	210e      	movs	r1, #14
 800ac64:	187b      	adds	r3, r7, r1
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	687a      	ldr	r2, [r7, #4]
 800ac6a:	18d3      	adds	r3, r2, r3
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	2b2a      	cmp	r3, #42	; 0x2a
 800ac70:	d00a      	beq.n	800ac88 <is_my_nmea_checksum_ok+0x60>
 800ac72:	187b      	adds	r3, r7, r1
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	18d3      	adds	r3, r2, r3
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d003      	beq.n	800ac88 <is_my_nmea_checksum_ok+0x60>
 800ac80:	187b      	adds	r3, r7, r1
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d1dc      	bne.n	800ac42 <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 800ac88:	230f      	movs	r3, #15
 800ac8a:	18fb      	adds	r3, r7, r3
 800ac8c:	781c      	ldrb	r4, [r3, #0]
 800ac8e:	210e      	movs	r1, #14
 800ac90:	187b      	adds	r3, r7, r1
 800ac92:	187a      	adds	r2, r7, r1
 800ac94:	7812      	ldrb	r2, [r2, #0]
 800ac96:	3201      	adds	r2, #1
 800ac98:	701a      	strb	r2, [r3, #0]
 800ac9a:	187b      	adds	r3, r7, r1
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	18d3      	adds	r3, r2, r3
 800aca2:	2210      	movs	r2, #16
 800aca4:	2100      	movs	r1, #0
 800aca6:	0018      	movs	r0, r3
 800aca8:	f001 fc3e 	bl	800c528 <strtol>
 800acac:	0003      	movs	r3, r0
 800acae:	1ae3      	subs	r3, r4, r3
 800acb0:	425a      	negs	r2, r3
 800acb2:	4153      	adcs	r3, r2
 800acb4:	b2db      	uxtb	r3, r3
}
 800acb6:	0018      	movs	r0, r3
 800acb8:	46bd      	mov	sp, r7
 800acba:	b005      	add	sp, #20
 800acbc:	bd90      	pop	{r4, r7, pc}
	...

0800acc0 <nmea2decimal>:
double nmea2decimal ( const char *coord , char dir )
{
 800acc0:	b5b0      	push	{r4, r5, r7, lr}
 800acc2:	b086      	sub	sp, #24
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	000a      	movs	r2, r1
 800acca:	1cfb      	adds	r3, r7, #3
 800accc:	701a      	strb	r2, [r3, #0]
    double deg , min ;
    sscanf ( coord , "%lf" , &deg ) ;
 800acce:	2308      	movs	r3, #8
 800acd0:	18fa      	adds	r2, r7, r3
 800acd2:	492f      	ldr	r1, [pc, #188]	; (800ad90 <nmea2decimal+0xd0>)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	0018      	movs	r0, r3
 800acd8:	f001 fd4a 	bl	800c770 <sscanf>
    min = deg / 100 ;
 800acdc:	68b8      	ldr	r0, [r7, #8]
 800acde:	68f9      	ldr	r1, [r7, #12]
 800ace0:	2200      	movs	r2, #0
 800ace2:	4b2c      	ldr	r3, [pc, #176]	; (800ad94 <nmea2decimal+0xd4>)
 800ace4:	f7f6 f8c8 	bl	8000e78 <__aeabi_ddiv>
 800ace8:	0002      	movs	r2, r0
 800acea:	000b      	movs	r3, r1
 800acec:	613a      	str	r2, [r7, #16]
 800acee:	617b      	str	r3, [r7, #20]
    deg = (int) min ;
 800acf0:	6938      	ldr	r0, [r7, #16]
 800acf2:	6979      	ldr	r1, [r7, #20]
 800acf4:	f7f7 fb1c 	bl	8002330 <__aeabi_d2iz>
 800acf8:	0003      	movs	r3, r0
 800acfa:	0018      	movs	r0, r3
 800acfc:	f7f7 fb4e 	bl	800239c <__aeabi_i2d>
 800ad00:	0002      	movs	r2, r0
 800ad02:	000b      	movs	r3, r1
 800ad04:	60ba      	str	r2, [r7, #8]
 800ad06:	60fb      	str	r3, [r7, #12]
    min = ( min - deg ) * 10 ;
 800ad08:	68ba      	ldr	r2, [r7, #8]
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	6938      	ldr	r0, [r7, #16]
 800ad0e:	6979      	ldr	r1, [r7, #20]
 800ad10:	f7f6 ff6e 	bl	8001bf0 <__aeabi_dsub>
 800ad14:	0002      	movs	r2, r0
 800ad16:	000b      	movs	r3, r1
 800ad18:	0010      	movs	r0, r2
 800ad1a:	0019      	movs	r1, r3
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	4b1e      	ldr	r3, [pc, #120]	; (800ad98 <nmea2decimal+0xd8>)
 800ad20:	f7f6 fca4 	bl	800166c <__aeabi_dmul>
 800ad24:	0002      	movs	r2, r0
 800ad26:	000b      	movs	r3, r1
 800ad28:	613a      	str	r2, [r7, #16]
 800ad2a:	617b      	str	r3, [r7, #20]
    min = min / 6 ;
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	4b1b      	ldr	r3, [pc, #108]	; (800ad9c <nmea2decimal+0xdc>)
 800ad30:	6938      	ldr	r0, [r7, #16]
 800ad32:	6979      	ldr	r1, [r7, #20]
 800ad34:	f7f6 f8a0 	bl	8000e78 <__aeabi_ddiv>
 800ad38:	0002      	movs	r2, r0
 800ad3a:	000b      	movs	r3, r1
 800ad3c:	613a      	str	r2, [r7, #16]
 800ad3e:	617b      	str	r3, [r7, #20]
    //double c = deg + min ;
    if ( dir == 'S' || dir == 'W' )
 800ad40:	1cfb      	adds	r3, r7, #3
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	2b53      	cmp	r3, #83	; 0x53
 800ad46:	d003      	beq.n	800ad50 <nmea2decimal+0x90>
 800ad48:	1cfb      	adds	r3, r7, #3
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	2b57      	cmp	r3, #87	; 0x57
 800ad4e:	d10e      	bne.n	800ad6e <nmea2decimal+0xae>
    	return ( deg + min ) * -1 ;
 800ad50:	68b8      	ldr	r0, [r7, #8]
 800ad52:	68f9      	ldr	r1, [r7, #12]
 800ad54:	693a      	ldr	r2, [r7, #16]
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	f7f5 fd2e 	bl	80007b8 <__aeabi_dadd>
 800ad5c:	0002      	movs	r2, r0
 800ad5e:	000b      	movs	r3, r1
 800ad60:	0011      	movs	r1, r2
 800ad62:	000c      	movs	r4, r1
 800ad64:	2180      	movs	r1, #128	; 0x80
 800ad66:	0609      	lsls	r1, r1, #24
 800ad68:	4059      	eors	r1, r3
 800ad6a:	000d      	movs	r5, r1
 800ad6c:	e009      	b.n	800ad82 <nmea2decimal+0xc2>
    else
    	return deg + min ;
 800ad6e:	68b8      	ldr	r0, [r7, #8]
 800ad70:	68f9      	ldr	r1, [r7, #12]
 800ad72:	693a      	ldr	r2, [r7, #16]
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	f7f5 fd1f 	bl	80007b8 <__aeabi_dadd>
 800ad7a:	0002      	movs	r2, r0
 800ad7c:	000b      	movs	r3, r1
 800ad7e:	0014      	movs	r4, r2
 800ad80:	001d      	movs	r5, r3
}
 800ad82:	0022      	movs	r2, r4
 800ad84:	002b      	movs	r3, r5
 800ad86:	0010      	movs	r0, r2
 800ad88:	0019      	movs	r1, r3
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	b006      	add	sp, #24
 800ad8e:	bdb0      	pop	{r4, r5, r7, pc}
 800ad90:	08014e08 	.word	0x08014e08
 800ad94:	40590000 	.word	0x40590000
 800ad98:	40240000 	.word	0x40240000
 800ad9c:	40180000 	.word	0x40180000

0800ada0 <get_my_nmea_gngll_coordinates>:

void get_my_nmea_gngll_coordinates ( const char* m , char* latitude_s , char* longitude_s , int32_t* latitude_astro_geo_wr , int32_t* longitude_astro_geo_wr )
{
 800ada0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ada2:	b091      	sub	sp, #68	; 0x44
 800ada4:	af02      	add	r7, sp, #8
 800ada6:	60f8      	str	r0, [r7, #12]
 800ada8:	60b9      	str	r1, [r7, #8]
 800adaa:	607a      	str	r2, [r7, #4]
 800adac:	603b      	str	r3, [r7, #0]
	char direction ;

	//Latitude part
	uint8_t coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION ) + 1 ;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2201      	movs	r2, #1
 800adb2:	212c      	movs	r1, #44	; 0x2c
 800adb4:	0018      	movs	r0, r3
 800adb6:	f7ff fcfd 	bl	800a7b4 <my_find_char_position>
 800adba:	0003      	movs	r3, r0
 800adbc:	001a      	movs	r2, r3
 800adbe:	2537      	movs	r5, #55	; 0x37
 800adc0:	197b      	adds	r3, r7, r5
 800adc2:	3201      	adds	r2, #1
 800adc4:	701a      	strb	r2, [r3, #0]
	uint8_t coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2202      	movs	r2, #2
 800adca:	212c      	movs	r1, #44	; 0x2c
 800adcc:	0018      	movs	r0, r3
 800adce:	f7ff fcf1 	bl	800a7b4 <my_find_char_position>
 800add2:	0003      	movs	r3, r0
 800add4:	0019      	movs	r1, r3
 800add6:	2436      	movs	r4, #54	; 0x36
 800add8:	193b      	adds	r3, r7, r4
 800adda:	197a      	adds	r2, r7, r5
 800addc:	7812      	ldrb	r2, [r2, #0]
 800adde:	1a8a      	subs	r2, r1, r2
 800ade0:	701a      	strb	r2, [r3, #0]

	char* latitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800ade2:	193b      	adds	r3, r7, r4
 800ade4:	781b      	ldrb	r3, [r3, #0]
 800ade6:	3301      	adds	r3, #1
 800ade8:	0018      	movs	r0, r3
 800adea:	f000 faa3 	bl	800b334 <malloc>
 800adee:	0003      	movs	r3, r0
 800adf0:	633b      	str	r3, [r7, #48]	; 0x30
	strncpy ( latitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800adf2:	197b      	adds	r3, r7, r5
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	68fa      	ldr	r2, [r7, #12]
 800adf8:	18d1      	adds	r1, r2, r3
 800adfa:	193b      	adds	r3, r7, r4
 800adfc:	781a      	ldrb	r2, [r3, #0]
 800adfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae00:	0018      	movs	r0, r3
 800ae02:	f001 fd44 	bl	800c88e <strncpy>
	latitude_s_temp[coordinate_length] = '\0';
 800ae06:	193b      	adds	r3, r7, r4
 800ae08:	781b      	ldrb	r3, [r3, #0]
 800ae0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae0c:	18d3      	adds	r3, r2, r3
 800ae0e:	2200      	movs	r2, #0
 800ae10:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800ae12:	197b      	adds	r3, r7, r5
 800ae14:	781a      	ldrb	r2, [r3, #0]
 800ae16:	193b      	adds	r3, r7, r4
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	18d3      	adds	r3, r2, r3
 800ae1c:	3301      	adds	r3, #1
 800ae1e:	68fa      	ldr	r2, [r7, #12]
 800ae20:	18d2      	adds	r2, r2, r3
 800ae22:	262f      	movs	r6, #47	; 0x2f
 800ae24:	19bb      	adds	r3, r7, r6
 800ae26:	7812      	ldrb	r2, [r2, #0]
 800ae28:	701a      	strb	r2, [r3, #0]
	double latitude_d = nmea2decimal ( latitude_s_temp , direction ) ;
 800ae2a:	19bb      	adds	r3, r7, r6
 800ae2c:	781a      	ldrb	r2, [r3, #0]
 800ae2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae30:	0011      	movs	r1, r2
 800ae32:	0018      	movs	r0, r3
 800ae34:	f7ff ff44 	bl	800acc0 <nmea2decimal>
 800ae38:	0002      	movs	r2, r0
 800ae3a:	000b      	movs	r3, r1
 800ae3c:	623a      	str	r2, [r7, #32]
 800ae3e:	627b      	str	r3, [r7, #36]	; 0x24
	free ( latitude_s_temp ) ;
 800ae40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae42:	0018      	movs	r0, r3
 800ae44:	f000 fa80 	bl	800b348 <free>
	latitude_d = round ( latitude_d * 1e6 ) / 1e6 ;
 800ae48:	2200      	movs	r2, #0
 800ae4a:	4b53      	ldr	r3, [pc, #332]	; (800af98 <get_my_nmea_gngll_coordinates+0x1f8>)
 800ae4c:	6a38      	ldr	r0, [r7, #32]
 800ae4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae50:	f7f6 fc0c 	bl	800166c <__aeabi_dmul>
 800ae54:	0002      	movs	r2, r0
 800ae56:	000b      	movs	r3, r1
 800ae58:	0010      	movs	r0, r2
 800ae5a:	0019      	movs	r1, r3
 800ae5c:	f008 fa34 	bl	80132c8 <round>
 800ae60:	2200      	movs	r2, #0
 800ae62:	4b4d      	ldr	r3, [pc, #308]	; (800af98 <get_my_nmea_gngll_coordinates+0x1f8>)
 800ae64:	f7f6 f808 	bl	8000e78 <__aeabi_ddiv>
 800ae68:	0002      	movs	r2, r0
 800ae6a:	000b      	movs	r3, r1
 800ae6c:	623a      	str	r2, [r7, #32]
 800ae6e:	627b      	str	r3, [r7, #36]	; 0x24
	snprintf ( latitude_s , 12 , "%.6lf" , latitude_d ) ;
 800ae70:	494a      	ldr	r1, [pc, #296]	; (800af9c <get_my_nmea_gngll_coordinates+0x1fc>)
 800ae72:	68b8      	ldr	r0, [r7, #8]
 800ae74:	6a3a      	ldr	r2, [r7, #32]
 800ae76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae78:	9200      	str	r2, [sp, #0]
 800ae7a:	9301      	str	r3, [sp, #4]
 800ae7c:	000a      	movs	r2, r1
 800ae7e:	210c      	movs	r1, #12
 800ae80:	f001 fc22 	bl	800c6c8 <snprintf>
	*latitude_astro_geo_wr = (int32_t) ( latitude_d * 10000000 ) ;
 800ae84:	2200      	movs	r2, #0
 800ae86:	4b46      	ldr	r3, [pc, #280]	; (800afa0 <get_my_nmea_gngll_coordinates+0x200>)
 800ae88:	6a38      	ldr	r0, [r7, #32]
 800ae8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae8c:	f7f6 fbee 	bl	800166c <__aeabi_dmul>
 800ae90:	0002      	movs	r2, r0
 800ae92:	000b      	movs	r3, r1
 800ae94:	0010      	movs	r0, r2
 800ae96:	0019      	movs	r1, r3
 800ae98:	f7f7 fa4a 	bl	8002330 <__aeabi_d2iz>
 800ae9c:	0002      	movs	r2, r0
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	601a      	str	r2, [r3, #0]

	//Longitude part
	coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2) + 1 ;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2203      	movs	r2, #3
 800aea6:	212c      	movs	r1, #44	; 0x2c
 800aea8:	0018      	movs	r0, r3
 800aeaa:	f7ff fc83 	bl	800a7b4 <my_find_char_position>
 800aeae:	0003      	movs	r3, r0
 800aeb0:	001a      	movs	r2, r3
 800aeb2:	197b      	adds	r3, r7, r5
 800aeb4:	3201      	adds	r2, #1
 800aeb6:	701a      	strb	r2, [r3, #0]
	coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2 + 1 ) - coordinate_position ;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2204      	movs	r2, #4
 800aebc:	212c      	movs	r1, #44	; 0x2c
 800aebe:	0018      	movs	r0, r3
 800aec0:	f7ff fc78 	bl	800a7b4 <my_find_char_position>
 800aec4:	0003      	movs	r3, r0
 800aec6:	0019      	movs	r1, r3
 800aec8:	193b      	adds	r3, r7, r4
 800aeca:	197a      	adds	r2, r7, r5
 800aecc:	7812      	ldrb	r2, [r2, #0]
 800aece:	1a8a      	subs	r2, r1, r2
 800aed0:	701a      	strb	r2, [r3, #0]

	char* longitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800aed2:	193b      	adds	r3, r7, r4
 800aed4:	781b      	ldrb	r3, [r3, #0]
 800aed6:	3301      	adds	r3, #1
 800aed8:	0018      	movs	r0, r3
 800aeda:	f000 fa2b 	bl	800b334 <malloc>
 800aede:	0003      	movs	r3, r0
 800aee0:	61fb      	str	r3, [r7, #28]
	strncpy ( longitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800aee2:	197b      	adds	r3, r7, r5
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	68fa      	ldr	r2, [r7, #12]
 800aee8:	18d1      	adds	r1, r2, r3
 800aeea:	193b      	adds	r3, r7, r4
 800aeec:	781a      	ldrb	r2, [r3, #0]
 800aeee:	69fb      	ldr	r3, [r7, #28]
 800aef0:	0018      	movs	r0, r3
 800aef2:	f001 fccc 	bl	800c88e <strncpy>
	longitude_s_temp[coordinate_length] = '\0';
 800aef6:	193b      	adds	r3, r7, r4
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	69fa      	ldr	r2, [r7, #28]
 800aefc:	18d3      	adds	r3, r2, r3
 800aefe:	2200      	movs	r2, #0
 800af00:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800af02:	197b      	adds	r3, r7, r5
 800af04:	781a      	ldrb	r2, [r3, #0]
 800af06:	193b      	adds	r3, r7, r4
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	18d3      	adds	r3, r2, r3
 800af0c:	3301      	adds	r3, #1
 800af0e:	68fa      	ldr	r2, [r7, #12]
 800af10:	18d2      	adds	r2, r2, r3
 800af12:	19bb      	adds	r3, r7, r6
 800af14:	7812      	ldrb	r2, [r2, #0]
 800af16:	701a      	strb	r2, [r3, #0]
	double longitude_d = nmea2decimal ( longitude_s_temp , direction ) ;
 800af18:	19bb      	adds	r3, r7, r6
 800af1a:	781a      	ldrb	r2, [r3, #0]
 800af1c:	69fb      	ldr	r3, [r7, #28]
 800af1e:	0011      	movs	r1, r2
 800af20:	0018      	movs	r0, r3
 800af22:	f7ff fecd 	bl	800acc0 <nmea2decimal>
 800af26:	0002      	movs	r2, r0
 800af28:	000b      	movs	r3, r1
 800af2a:	613a      	str	r2, [r7, #16]
 800af2c:	617b      	str	r3, [r7, #20]
	free ( longitude_s_temp ) ;
 800af2e:	69fb      	ldr	r3, [r7, #28]
 800af30:	0018      	movs	r0, r3
 800af32:	f000 fa09 	bl	800b348 <free>
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
 800af36:	2200      	movs	r2, #0
 800af38:	4b17      	ldr	r3, [pc, #92]	; (800af98 <get_my_nmea_gngll_coordinates+0x1f8>)
 800af3a:	6938      	ldr	r0, [r7, #16]
 800af3c:	6979      	ldr	r1, [r7, #20]
 800af3e:	f7f6 fb95 	bl	800166c <__aeabi_dmul>
 800af42:	0002      	movs	r2, r0
 800af44:	000b      	movs	r3, r1
 800af46:	0010      	movs	r0, r2
 800af48:	0019      	movs	r1, r3
 800af4a:	f008 f9bd 	bl	80132c8 <round>
 800af4e:	2200      	movs	r2, #0
 800af50:	4b11      	ldr	r3, [pc, #68]	; (800af98 <get_my_nmea_gngll_coordinates+0x1f8>)
 800af52:	f7f5 ff91 	bl	8000e78 <__aeabi_ddiv>
 800af56:	0002      	movs	r2, r0
 800af58:	000b      	movs	r3, r1
 800af5a:	613a      	str	r2, [r7, #16]
 800af5c:	617b      	str	r3, [r7, #20]
	snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
 800af5e:	490f      	ldr	r1, [pc, #60]	; (800af9c <get_my_nmea_gngll_coordinates+0x1fc>)
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	693a      	ldr	r2, [r7, #16]
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	9200      	str	r2, [sp, #0]
 800af68:	9301      	str	r3, [sp, #4]
 800af6a:	000a      	movs	r2, r1
 800af6c:	210c      	movs	r1, #12
 800af6e:	f001 fbab 	bl	800c6c8 <snprintf>
	*longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
 800af72:	2200      	movs	r2, #0
 800af74:	4b0a      	ldr	r3, [pc, #40]	; (800afa0 <get_my_nmea_gngll_coordinates+0x200>)
 800af76:	6938      	ldr	r0, [r7, #16]
 800af78:	6979      	ldr	r1, [r7, #20]
 800af7a:	f7f6 fb77 	bl	800166c <__aeabi_dmul>
 800af7e:	0002      	movs	r2, r0
 800af80:	000b      	movs	r3, r1
 800af82:	0010      	movs	r0, r2
 800af84:	0019      	movs	r1, r3
 800af86:	f7f7 f9d3 	bl	8002330 <__aeabi_d2iz>
 800af8a:	0002      	movs	r2, r0
 800af8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af8e:	601a      	str	r2, [r3, #0]
}
 800af90:	46c0      	nop			; (mov r8, r8)
 800af92:	46bd      	mov	sp, r7
 800af94:	b00f      	add	sp, #60	; 0x3c
 800af96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af98:	412e8480 	.word	0x412e8480
 800af9c:	08014e0c 	.word	0x08014e0c
 800afa0:	416312d0 	.word	0x416312d0

0800afa4 <my_nmea_get_gsv_tns>:
uint16_t my_nmea_get_gsv_tns ( const char* m ) //tns = Total Number Satelites
{
 800afa4:	b5b0      	push	{r4, r5, r7, lr}
 800afa6:	b086      	sub	sp, #24
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
	uint16_t tns = 0 ;
 800afac:	240e      	movs	r4, #14
 800afae:	193b      	adds	r3, r7, r4
 800afb0:	2200      	movs	r2, #0
 800afb2:	801a      	strh	r2, [r3, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , GSV_TNS_POSITION ) + 1 ;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2203      	movs	r2, #3
 800afb8:	212c      	movs	r1, #44	; 0x2c
 800afba:	0018      	movs	r0, r3
 800afbc:	f7ff fbfa 	bl	800a7b4 <my_find_char_position>
 800afc0:	0003      	movs	r3, r0
 800afc2:	001a      	movs	r2, r3
 800afc4:	2517      	movs	r5, #23
 800afc6:	197b      	adds	r3, r7, r5
 800afc8:	3201      	adds	r2, #1
 800afca:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( GSV_TNS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800afcc:	2003      	movs	r0, #3
 800afce:	f000 f9b1 	bl	800b334 <malloc>
 800afd2:	0003      	movs	r3, r0
 800afd4:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , GSV_TNS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800afd6:	197b      	adds	r3, r7, r5
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	18d1      	adds	r1, r2, r3
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	2202      	movs	r2, #2
 800afe2:	0018      	movs	r0, r3
 800afe4:	f001 fc53 	bl	800c88e <strncpy>
	s[GSV_TNS_LENGTH] = '\0';
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	3302      	adds	r3, #2
 800afec:	2200      	movs	r2, #0
 800afee:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%hu" , &tns ) ;
 800aff0:	193a      	adds	r2, r7, r4
 800aff2:	4907      	ldr	r1, [pc, #28]	; (800b010 <my_nmea_get_gsv_tns+0x6c>)
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	0018      	movs	r0, r3
 800aff8:	f001 fbba 	bl	800c770 <sscanf>
	free ( s ) ;
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	0018      	movs	r0, r3
 800b000:	f000 f9a2 	bl	800b348 <free>
	return tns ;
 800b004:	193b      	adds	r3, r7, r4
 800b006:	881b      	ldrh	r3, [r3, #0]
}
 800b008:	0018      	movs	r0, r3
 800b00a:	46bd      	mov	sp, r7
 800b00c:	b006      	add	sp, #24
 800b00e:	bdb0      	pop	{r4, r5, r7, pc}
 800b010:	08014e14 	.word	0x08014e14

0800b014 <my_nmea_get_rmc_date_yy>:

void my_nmea_get_rmc_date_yy ( const char* m , uint8_t* yy )
{
 800b014:	b590      	push	{r4, r7, lr}
 800b016:	b087      	sub	sp, #28
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_YY_OFFSET ;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2209      	movs	r2, #9
 800b022:	212c      	movs	r1, #44	; 0x2c
 800b024:	0018      	movs	r0, r3
 800b026:	f7ff fbc5 	bl	800a7b4 <my_find_char_position>
 800b02a:	0003      	movs	r3, r0
 800b02c:	001a      	movs	r2, r3
 800b02e:	2417      	movs	r4, #23
 800b030:	193b      	adds	r3, r7, r4
 800b032:	3205      	adds	r2, #5
 800b034:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800b036:	2003      	movs	r0, #3
 800b038:	f000 f97c 	bl	800b334 <malloc>
 800b03c:	0003      	movs	r3, r0
 800b03e:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800b040:	193b      	adds	r3, r7, r4
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	687a      	ldr	r2, [r7, #4]
 800b046:	18d1      	adds	r1, r2, r3
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	2202      	movs	r2, #2
 800b04c:	0018      	movs	r0, r3
 800b04e:	f001 fc1e 	bl	800c88e <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	3302      	adds	r3, #2
 800b056:	2200      	movs	r2, #0
 800b058:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , yy ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800b05a:	240e      	movs	r4, #14
 800b05c:	193a      	adds	r2, r7, r4
 800b05e:	4909      	ldr	r1, [pc, #36]	; (800b084 <my_nmea_get_rmc_date_yy+0x70>)
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	0018      	movs	r0, r3
 800b064:	f001 fb84 	bl	800c770 <sscanf>
	free ( s ) ;
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	0018      	movs	r0, r3
 800b06c:	f000 f96c 	bl	800b348 <free>
	*yy = (uint8_t) temp ;
 800b070:	193b      	adds	r3, r7, r4
 800b072:	881b      	ldrh	r3, [r3, #0]
 800b074:	b2da      	uxtb	r2, r3
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	701a      	strb	r2, [r3, #0]

}
 800b07a:	46c0      	nop			; (mov r8, r8)
 800b07c:	46bd      	mov	sp, r7
 800b07e:	b007      	add	sp, #28
 800b080:	bd90      	pop	{r4, r7, pc}
 800b082:	46c0      	nop			; (mov r8, r8)
 800b084:	08014e14 	.word	0x08014e14

0800b088 <my_nmea_get_rmc_date_mm>:
void my_nmea_get_rmc_date_mm ( const char* m , uint8_t* mm )
{
 800b088:	b590      	push	{r4, r7, lr}
 800b08a:	b087      	sub	sp, #28
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_MM_OFFSET ;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2209      	movs	r2, #9
 800b096:	212c      	movs	r1, #44	; 0x2c
 800b098:	0018      	movs	r0, r3
 800b09a:	f7ff fb8b 	bl	800a7b4 <my_find_char_position>
 800b09e:	0003      	movs	r3, r0
 800b0a0:	001a      	movs	r2, r3
 800b0a2:	2417      	movs	r4, #23
 800b0a4:	193b      	adds	r3, r7, r4
 800b0a6:	3203      	adds	r2, #3
 800b0a8:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800b0aa:	2003      	movs	r0, #3
 800b0ac:	f000 f942 	bl	800b334 <malloc>
 800b0b0:	0003      	movs	r3, r0
 800b0b2:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800b0b4:	193b      	adds	r3, r7, r4
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	687a      	ldr	r2, [r7, #4]
 800b0ba:	18d1      	adds	r1, r2, r3
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	2202      	movs	r2, #2
 800b0c0:	0018      	movs	r0, r3
 800b0c2:	f001 fbe4 	bl	800c88e <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	3302      	adds	r3, #2
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800b0ce:	240e      	movs	r4, #14
 800b0d0:	193a      	adds	r2, r7, r4
 800b0d2:	4909      	ldr	r1, [pc, #36]	; (800b0f8 <my_nmea_get_rmc_date_mm+0x70>)
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	0018      	movs	r0, r3
 800b0d8:	f001 fb4a 	bl	800c770 <sscanf>
	free ( s ) ;
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	0018      	movs	r0, r3
 800b0e0:	f000 f932 	bl	800b348 <free>
	*mm = (uint8_t) temp ;
 800b0e4:	193b      	adds	r3, r7, r4
 800b0e6:	881b      	ldrh	r3, [r3, #0]
 800b0e8:	b2da      	uxtb	r2, r3
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	701a      	strb	r2, [r3, #0]

}
 800b0ee:	46c0      	nop			; (mov r8, r8)
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	b007      	add	sp, #28
 800b0f4:	bd90      	pop	{r4, r7, pc}
 800b0f6:	46c0      	nop			; (mov r8, r8)
 800b0f8:	08014e14 	.word	0x08014e14

0800b0fc <my_nmea_get_rmc_date_dd>:
void my_nmea_get_rmc_date_dd ( const char* m , uint8_t* dd )
{
 800b0fc:	b590      	push	{r4, r7, lr}
 800b0fe:	b087      	sub	sp, #28
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_DD_OFFSET ;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2209      	movs	r2, #9
 800b10a:	212c      	movs	r1, #44	; 0x2c
 800b10c:	0018      	movs	r0, r3
 800b10e:	f7ff fb51 	bl	800a7b4 <my_find_char_position>
 800b112:	0003      	movs	r3, r0
 800b114:	001a      	movs	r2, r3
 800b116:	2417      	movs	r4, #23
 800b118:	193b      	adds	r3, r7, r4
 800b11a:	3201      	adds	r2, #1
 800b11c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800b11e:	2003      	movs	r0, #3
 800b120:	f000 f908 	bl	800b334 <malloc>
 800b124:	0003      	movs	r3, r0
 800b126:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800b128:	193b      	adds	r3, r7, r4
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	687a      	ldr	r2, [r7, #4]
 800b12e:	18d1      	adds	r1, r2, r3
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	2202      	movs	r2, #2
 800b134:	0018      	movs	r0, r3
 800b136:	f001 fbaa 	bl	800c88e <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	3302      	adds	r3, #2
 800b13e:	2200      	movs	r2, #0
 800b140:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , dd ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800b142:	240e      	movs	r4, #14
 800b144:	193a      	adds	r2, r7, r4
 800b146:	4909      	ldr	r1, [pc, #36]	; (800b16c <my_nmea_get_rmc_date_dd+0x70>)
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	0018      	movs	r0, r3
 800b14c:	f001 fb10 	bl	800c770 <sscanf>
	free ( s ) ;
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	0018      	movs	r0, r3
 800b154:	f000 f8f8 	bl	800b348 <free>
	*dd = (uint8_t) temp ;
 800b158:	193b      	adds	r3, r7, r4
 800b15a:	881b      	ldrh	r3, [r3, #0]
 800b15c:	b2da      	uxtb	r2, r3
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	701a      	strb	r2, [r3, #0]

}
 800b162:	46c0      	nop			; (mov r8, r8)
 800b164:	46bd      	mov	sp, r7
 800b166:	b007      	add	sp, #28
 800b168:	bd90      	pop	{r4, r7, pc}
 800b16a:	46c0      	nop			; (mov r8, r8)
 800b16c:	08014e14 	.word	0x08014e14

0800b170 <my_nmea_get_rmc_utc_hh>:
void my_nmea_get_rmc_utc_hh ( const char* m , uint8_t* hh )
{
 800b170:	b590      	push	{r4, r7, lr}
 800b172:	b087      	sub	sp, #28
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_HH_OFFSET ;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2201      	movs	r2, #1
 800b17e:	212c      	movs	r1, #44	; 0x2c
 800b180:	0018      	movs	r0, r3
 800b182:	f7ff fb17 	bl	800a7b4 <my_find_char_position>
 800b186:	0003      	movs	r3, r0
 800b188:	001a      	movs	r2, r3
 800b18a:	2417      	movs	r4, #23
 800b18c:	193b      	adds	r3, r7, r4
 800b18e:	3201      	adds	r2, #1
 800b190:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800b192:	2003      	movs	r0, #3
 800b194:	f000 f8ce 	bl	800b334 <malloc>
 800b198:	0003      	movs	r3, r0
 800b19a:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800b19c:	193b      	adds	r3, r7, r4
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	18d1      	adds	r1, r2, r3
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	2202      	movs	r2, #2
 800b1a8:	0018      	movs	r0, r3
 800b1aa:	f001 fb70 	bl	800c88e <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	3302      	adds	r3, #2
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , hh ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800b1b6:	240e      	movs	r4, #14
 800b1b8:	193a      	adds	r2, r7, r4
 800b1ba:	4909      	ldr	r1, [pc, #36]	; (800b1e0 <my_nmea_get_rmc_utc_hh+0x70>)
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	0018      	movs	r0, r3
 800b1c0:	f001 fad6 	bl	800c770 <sscanf>
	free ( s ) ;
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	0018      	movs	r0, r3
 800b1c8:	f000 f8be 	bl	800b348 <free>
	*hh = (uint8_t) temp ;
 800b1cc:	193b      	adds	r3, r7, r4
 800b1ce:	881b      	ldrh	r3, [r3, #0]
 800b1d0:	b2da      	uxtb	r2, r3
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	701a      	strb	r2, [r3, #0]

}
 800b1d6:	46c0      	nop			; (mov r8, r8)
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	b007      	add	sp, #28
 800b1dc:	bd90      	pop	{r4, r7, pc}
 800b1de:	46c0      	nop			; (mov r8, r8)
 800b1e0:	08014e14 	.word	0x08014e14

0800b1e4 <my_nmea_get_rmc_utc_mm>:
void my_nmea_get_rmc_utc_mm ( const char* m , uint8_t* mm )
{
 800b1e4:	b590      	push	{r4, r7, lr}
 800b1e6:	b087      	sub	sp, #28
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_MM_OFFSET ;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2201      	movs	r2, #1
 800b1f2:	212c      	movs	r1, #44	; 0x2c
 800b1f4:	0018      	movs	r0, r3
 800b1f6:	f7ff fadd 	bl	800a7b4 <my_find_char_position>
 800b1fa:	0003      	movs	r3, r0
 800b1fc:	001a      	movs	r2, r3
 800b1fe:	2417      	movs	r4, #23
 800b200:	193b      	adds	r3, r7, r4
 800b202:	3203      	adds	r2, #3
 800b204:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800b206:	2003      	movs	r0, #3
 800b208:	f000 f894 	bl	800b334 <malloc>
 800b20c:	0003      	movs	r3, r0
 800b20e:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800b210:	193b      	adds	r3, r7, r4
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	18d1      	adds	r1, r2, r3
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	2202      	movs	r2, #2
 800b21c:	0018      	movs	r0, r3
 800b21e:	f001 fb36 	bl	800c88e <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	3302      	adds	r3, #2
 800b226:	2200      	movs	r2, #0
 800b228:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800b22a:	240e      	movs	r4, #14
 800b22c:	193a      	adds	r2, r7, r4
 800b22e:	4909      	ldr	r1, [pc, #36]	; (800b254 <my_nmea_get_rmc_utc_mm+0x70>)
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	0018      	movs	r0, r3
 800b234:	f001 fa9c 	bl	800c770 <sscanf>
	free ( s ) ;
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	0018      	movs	r0, r3
 800b23c:	f000 f884 	bl	800b348 <free>
	*mm = (uint8_t) temp ;
 800b240:	193b      	adds	r3, r7, r4
 800b242:	881b      	ldrh	r3, [r3, #0]
 800b244:	b2da      	uxtb	r2, r3
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	701a      	strb	r2, [r3, #0]

}
 800b24a:	46c0      	nop			; (mov r8, r8)
 800b24c:	46bd      	mov	sp, r7
 800b24e:	b007      	add	sp, #28
 800b250:	bd90      	pop	{r4, r7, pc}
 800b252:	46c0      	nop			; (mov r8, r8)
 800b254:	08014e14 	.word	0x08014e14

0800b258 <my_nmea_get_rmc_utc_ss>:
void my_nmea_get_rmc_utc_ss ( const char* m , uint8_t* ss )
{
 800b258:	b590      	push	{r4, r7, lr}
 800b25a:	b087      	sub	sp, #28
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SS_OFFSET ;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2201      	movs	r2, #1
 800b266:	212c      	movs	r1, #44	; 0x2c
 800b268:	0018      	movs	r0, r3
 800b26a:	f7ff faa3 	bl	800a7b4 <my_find_char_position>
 800b26e:	0003      	movs	r3, r0
 800b270:	001a      	movs	r2, r3
 800b272:	2417      	movs	r4, #23
 800b274:	193b      	adds	r3, r7, r4
 800b276:	3205      	adds	r2, #5
 800b278:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800b27a:	2003      	movs	r0, #3
 800b27c:	f000 f85a 	bl	800b334 <malloc>
 800b280:	0003      	movs	r3, r0
 800b282:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800b284:	193b      	adds	r3, r7, r4
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	18d1      	adds	r1, r2, r3
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	2202      	movs	r2, #2
 800b290:	0018      	movs	r0, r3
 800b292:	f001 fafc 	bl	800c88e <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	3302      	adds	r3, #2
 800b29a:	2200      	movs	r2, #0
 800b29c:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , ss ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800b29e:	240e      	movs	r4, #14
 800b2a0:	193a      	adds	r2, r7, r4
 800b2a2:	4909      	ldr	r1, [pc, #36]	; (800b2c8 <my_nmea_get_rmc_utc_ss+0x70>)
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	0018      	movs	r0, r3
 800b2a8:	f001 fa62 	bl	800c770 <sscanf>
	free ( s ) ;
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	0018      	movs	r0, r3
 800b2b0:	f000 f84a 	bl	800b348 <free>
	*ss = (uint8_t) temp ;
 800b2b4:	193b      	adds	r3, r7, r4
 800b2b6:	881b      	ldrh	r3, [r3, #0]
 800b2b8:	b2da      	uxtb	r2, r3
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	701a      	strb	r2, [r3, #0]

}
 800b2be:	46c0      	nop			; (mov r8, r8)
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	b007      	add	sp, #28
 800b2c4:	bd90      	pop	{r4, r7, pc}
 800b2c6:	46c0      	nop			; (mov r8, r8)
 800b2c8:	08014e14 	.word	0x08014e14

0800b2cc <my_nmea_get_rmc_utc_sss>:
void my_nmea_get_rmc_utc_sss ( const char* m , uint32_t* sss )
{
 800b2cc:	b590      	push	{r4, r7, lr}
 800b2ce:	b085      	sub	sp, #20
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	6039      	str	r1, [r7, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SSS_OFFSET ;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2201      	movs	r2, #1
 800b2da:	212c      	movs	r1, #44	; 0x2c
 800b2dc:	0018      	movs	r0, r3
 800b2de:	f7ff fa69 	bl	800a7b4 <my_find_char_position>
 800b2e2:	0003      	movs	r3, r0
 800b2e4:	001a      	movs	r2, r3
 800b2e6:	240f      	movs	r4, #15
 800b2e8:	193b      	adds	r3, r7, r4
 800b2ea:	3208      	adds	r2, #8
 800b2ec:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_SSS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800b2ee:	2004      	movs	r0, #4
 800b2f0:	f000 f820 	bl	800b334 <malloc>
 800b2f4:	0003      	movs	r3, r0
 800b2f6:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_UTC_SSS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800b2f8:	193b      	adds	r3, r7, r4
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	687a      	ldr	r2, [r7, #4]
 800b2fe:	18d1      	adds	r1, r2, r3
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	2203      	movs	r2, #3
 800b304:	0018      	movs	r0, r3
 800b306:	f001 fac2 	bl	800c88e <strncpy>
	s[RMC_UTC_SSS_LENGTH] = '\0';
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	3303      	adds	r3, #3
 800b30e:	2200      	movs	r2, #0
 800b310:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%lu" , sss ) ;
 800b312:	683a      	ldr	r2, [r7, #0]
 800b314:	4906      	ldr	r1, [pc, #24]	; (800b330 <my_nmea_get_rmc_utc_sss+0x64>)
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	0018      	movs	r0, r3
 800b31a:	f001 fa29 	bl	800c770 <sscanf>
	free ( s ) ;
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	0018      	movs	r0, r3
 800b322:	f000 f811 	bl	800b348 <free>
}
 800b326:	46c0      	nop			; (mov r8, r8)
 800b328:	46bd      	mov	sp, r7
 800b32a:	b005      	add	sp, #20
 800b32c:	bd90      	pop	{r4, r7, pc}
 800b32e:	46c0      	nop			; (mov r8, r8)
 800b330:	08014e18 	.word	0x08014e18

0800b334 <malloc>:
 800b334:	b510      	push	{r4, lr}
 800b336:	4b03      	ldr	r3, [pc, #12]	; (800b344 <malloc+0x10>)
 800b338:	0001      	movs	r1, r0
 800b33a:	6818      	ldr	r0, [r3, #0]
 800b33c:	f000 f80e 	bl	800b35c <_malloc_r>
 800b340:	bd10      	pop	{r4, pc}
 800b342:	46c0      	nop			; (mov r8, r8)
 800b344:	200006d8 	.word	0x200006d8

0800b348 <free>:
 800b348:	b510      	push	{r4, lr}
 800b34a:	4b03      	ldr	r3, [pc, #12]	; (800b358 <free+0x10>)
 800b34c:	0001      	movs	r1, r0
 800b34e:	6818      	ldr	r0, [r3, #0]
 800b350:	f001 fbe4 	bl	800cb1c <_free_r>
 800b354:	bd10      	pop	{r4, pc}
 800b356:	46c0      	nop			; (mov r8, r8)
 800b358:	200006d8 	.word	0x200006d8

0800b35c <_malloc_r>:
 800b35c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b35e:	000d      	movs	r5, r1
 800b360:	b087      	sub	sp, #28
 800b362:	350b      	adds	r5, #11
 800b364:	9001      	str	r0, [sp, #4]
 800b366:	2d16      	cmp	r5, #22
 800b368:	d908      	bls.n	800b37c <_malloc_r+0x20>
 800b36a:	2207      	movs	r2, #7
 800b36c:	4395      	bics	r5, r2
 800b36e:	d506      	bpl.n	800b37e <_malloc_r+0x22>
 800b370:	230c      	movs	r3, #12
 800b372:	9a01      	ldr	r2, [sp, #4]
 800b374:	6013      	str	r3, [r2, #0]
 800b376:	2000      	movs	r0, #0
 800b378:	b007      	add	sp, #28
 800b37a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b37c:	2510      	movs	r5, #16
 800b37e:	42a9      	cmp	r1, r5
 800b380:	d8f6      	bhi.n	800b370 <_malloc_r+0x14>
 800b382:	9801      	ldr	r0, [sp, #4]
 800b384:	f000 f9fe 	bl	800b784 <__malloc_lock>
 800b388:	23fc      	movs	r3, #252	; 0xfc
 800b38a:	4ebe      	ldr	r6, [pc, #760]	; (800b684 <_malloc_r+0x328>)
 800b38c:	005b      	lsls	r3, r3, #1
 800b38e:	429d      	cmp	r5, r3
 800b390:	d219      	bcs.n	800b3c6 <_malloc_r+0x6a>
 800b392:	002a      	movs	r2, r5
 800b394:	3208      	adds	r2, #8
 800b396:	18b2      	adds	r2, r6, r2
 800b398:	0011      	movs	r1, r2
 800b39a:	6854      	ldr	r4, [r2, #4]
 800b39c:	3908      	subs	r1, #8
 800b39e:	08eb      	lsrs	r3, r5, #3
 800b3a0:	428c      	cmp	r4, r1
 800b3a2:	d103      	bne.n	800b3ac <_malloc_r+0x50>
 800b3a4:	68d4      	ldr	r4, [r2, #12]
 800b3a6:	3302      	adds	r3, #2
 800b3a8:	42a2      	cmp	r2, r4
 800b3aa:	d022      	beq.n	800b3f2 <_malloc_r+0x96>
 800b3ac:	2203      	movs	r2, #3
 800b3ae:	6863      	ldr	r3, [r4, #4]
 800b3b0:	68a1      	ldr	r1, [r4, #8]
 800b3b2:	4393      	bics	r3, r2
 800b3b4:	68e2      	ldr	r2, [r4, #12]
 800b3b6:	18e3      	adds	r3, r4, r3
 800b3b8:	60ca      	str	r2, [r1, #12]
 800b3ba:	6091      	str	r1, [r2, #8]
 800b3bc:	2201      	movs	r2, #1
 800b3be:	6859      	ldr	r1, [r3, #4]
 800b3c0:	430a      	orrs	r2, r1
 800b3c2:	605a      	str	r2, [r3, #4]
 800b3c4:	e02a      	b.n	800b41c <_malloc_r+0xc0>
 800b3c6:	233f      	movs	r3, #63	; 0x3f
 800b3c8:	0a6a      	lsrs	r2, r5, #9
 800b3ca:	d003      	beq.n	800b3d4 <_malloc_r+0x78>
 800b3cc:	2a04      	cmp	r2, #4
 800b3ce:	d82b      	bhi.n	800b428 <_malloc_r+0xcc>
 800b3d0:	09ab      	lsrs	r3, r5, #6
 800b3d2:	3338      	adds	r3, #56	; 0x38
 800b3d4:	2203      	movs	r2, #3
 800b3d6:	4694      	mov	ip, r2
 800b3d8:	00d9      	lsls	r1, r3, #3
 800b3da:	1989      	adds	r1, r1, r6
 800b3dc:	68cc      	ldr	r4, [r1, #12]
 800b3de:	428c      	cmp	r4, r1
 800b3e0:	d006      	beq.n	800b3f0 <_malloc_r+0x94>
 800b3e2:	4660      	mov	r0, ip
 800b3e4:	6862      	ldr	r2, [r4, #4]
 800b3e6:	4382      	bics	r2, r0
 800b3e8:	1b57      	subs	r7, r2, r5
 800b3ea:	2f0f      	cmp	r7, #15
 800b3ec:	dd34      	ble.n	800b458 <_malloc_r+0xfc>
 800b3ee:	3b01      	subs	r3, #1
 800b3f0:	3301      	adds	r3, #1
 800b3f2:	6934      	ldr	r4, [r6, #16]
 800b3f4:	49a4      	ldr	r1, [pc, #656]	; (800b688 <_malloc_r+0x32c>)
 800b3f6:	428c      	cmp	r4, r1
 800b3f8:	d055      	beq.n	800b4a6 <_malloc_r+0x14a>
 800b3fa:	2003      	movs	r0, #3
 800b3fc:	6862      	ldr	r2, [r4, #4]
 800b3fe:	4382      	bics	r2, r0
 800b400:	1b50      	subs	r0, r2, r5
 800b402:	280f      	cmp	r0, #15
 800b404:	dd36      	ble.n	800b474 <_malloc_r+0x118>
 800b406:	2301      	movs	r3, #1
 800b408:	1967      	adds	r7, r4, r5
 800b40a:	431d      	orrs	r5, r3
 800b40c:	4303      	orrs	r3, r0
 800b40e:	6065      	str	r5, [r4, #4]
 800b410:	6177      	str	r7, [r6, #20]
 800b412:	6137      	str	r7, [r6, #16]
 800b414:	60f9      	str	r1, [r7, #12]
 800b416:	60b9      	str	r1, [r7, #8]
 800b418:	607b      	str	r3, [r7, #4]
 800b41a:	50a0      	str	r0, [r4, r2]
 800b41c:	9801      	ldr	r0, [sp, #4]
 800b41e:	f000 f9b9 	bl	800b794 <__malloc_unlock>
 800b422:	0020      	movs	r0, r4
 800b424:	3008      	adds	r0, #8
 800b426:	e7a7      	b.n	800b378 <_malloc_r+0x1c>
 800b428:	2a14      	cmp	r2, #20
 800b42a:	d802      	bhi.n	800b432 <_malloc_r+0xd6>
 800b42c:	0013      	movs	r3, r2
 800b42e:	335b      	adds	r3, #91	; 0x5b
 800b430:	e7d0      	b.n	800b3d4 <_malloc_r+0x78>
 800b432:	2a54      	cmp	r2, #84	; 0x54
 800b434:	d802      	bhi.n	800b43c <_malloc_r+0xe0>
 800b436:	0b2b      	lsrs	r3, r5, #12
 800b438:	336e      	adds	r3, #110	; 0x6e
 800b43a:	e7cb      	b.n	800b3d4 <_malloc_r+0x78>
 800b43c:	23aa      	movs	r3, #170	; 0xaa
 800b43e:	005b      	lsls	r3, r3, #1
 800b440:	429a      	cmp	r2, r3
 800b442:	d802      	bhi.n	800b44a <_malloc_r+0xee>
 800b444:	0beb      	lsrs	r3, r5, #15
 800b446:	3377      	adds	r3, #119	; 0x77
 800b448:	e7c4      	b.n	800b3d4 <_malloc_r+0x78>
 800b44a:	4990      	ldr	r1, [pc, #576]	; (800b68c <_malloc_r+0x330>)
 800b44c:	237e      	movs	r3, #126	; 0x7e
 800b44e:	428a      	cmp	r2, r1
 800b450:	d8c0      	bhi.n	800b3d4 <_malloc_r+0x78>
 800b452:	0cab      	lsrs	r3, r5, #18
 800b454:	337c      	adds	r3, #124	; 0x7c
 800b456:	e7bd      	b.n	800b3d4 <_malloc_r+0x78>
 800b458:	68e0      	ldr	r0, [r4, #12]
 800b45a:	2f00      	cmp	r7, #0
 800b45c:	db08      	blt.n	800b470 <_malloc_r+0x114>
 800b45e:	68a3      	ldr	r3, [r4, #8]
 800b460:	60d8      	str	r0, [r3, #12]
 800b462:	6083      	str	r3, [r0, #8]
 800b464:	2301      	movs	r3, #1
 800b466:	18a2      	adds	r2, r4, r2
 800b468:	6851      	ldr	r1, [r2, #4]
 800b46a:	430b      	orrs	r3, r1
 800b46c:	6053      	str	r3, [r2, #4]
 800b46e:	e7d5      	b.n	800b41c <_malloc_r+0xc0>
 800b470:	0004      	movs	r4, r0
 800b472:	e7b4      	b.n	800b3de <_malloc_r+0x82>
 800b474:	6171      	str	r1, [r6, #20]
 800b476:	6131      	str	r1, [r6, #16]
 800b478:	2800      	cmp	r0, #0
 800b47a:	daf3      	bge.n	800b464 <_malloc_r+0x108>
 800b47c:	6871      	ldr	r1, [r6, #4]
 800b47e:	468c      	mov	ip, r1
 800b480:	2180      	movs	r1, #128	; 0x80
 800b482:	0089      	lsls	r1, r1, #2
 800b484:	428a      	cmp	r2, r1
 800b486:	d300      	bcc.n	800b48a <_malloc_r+0x12e>
 800b488:	e08c      	b.n	800b5a4 <_malloc_r+0x248>
 800b48a:	08d1      	lsrs	r1, r2, #3
 800b48c:	0950      	lsrs	r0, r2, #5
 800b48e:	2201      	movs	r2, #1
 800b490:	4082      	lsls	r2, r0
 800b492:	4660      	mov	r0, ip
 800b494:	4302      	orrs	r2, r0
 800b496:	6072      	str	r2, [r6, #4]
 800b498:	00ca      	lsls	r2, r1, #3
 800b49a:	1992      	adds	r2, r2, r6
 800b49c:	6891      	ldr	r1, [r2, #8]
 800b49e:	60e2      	str	r2, [r4, #12]
 800b4a0:	60a1      	str	r1, [r4, #8]
 800b4a2:	6094      	str	r4, [r2, #8]
 800b4a4:	60cc      	str	r4, [r1, #12]
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	4876      	ldr	r0, [pc, #472]	; (800b684 <_malloc_r+0x328>)
 800b4aa:	1099      	asrs	r1, r3, #2
 800b4ac:	408a      	lsls	r2, r1
 800b4ae:	6841      	ldr	r1, [r0, #4]
 800b4b0:	4291      	cmp	r1, r2
 800b4b2:	d328      	bcc.n	800b506 <_malloc_r+0x1aa>
 800b4b4:	420a      	tst	r2, r1
 800b4b6:	d105      	bne.n	800b4c4 <_malloc_r+0x168>
 800b4b8:	2403      	movs	r4, #3
 800b4ba:	43a3      	bics	r3, r4
 800b4bc:	0052      	lsls	r2, r2, #1
 800b4be:	3304      	adds	r3, #4
 800b4c0:	420a      	tst	r2, r1
 800b4c2:	d0fb      	beq.n	800b4bc <_malloc_r+0x160>
 800b4c4:	496f      	ldr	r1, [pc, #444]	; (800b684 <_malloc_r+0x328>)
 800b4c6:	9104      	str	r1, [sp, #16]
 800b4c8:	00d9      	lsls	r1, r3, #3
 800b4ca:	1841      	adds	r1, r0, r1
 800b4cc:	468c      	mov	ip, r1
 800b4ce:	000f      	movs	r7, r1
 800b4d0:	9302      	str	r3, [sp, #8]
 800b4d2:	68fc      	ldr	r4, [r7, #12]
 800b4d4:	42bc      	cmp	r4, r7
 800b4d6:	d000      	beq.n	800b4da <_malloc_r+0x17e>
 800b4d8:	e09b      	b.n	800b612 <_malloc_r+0x2b6>
 800b4da:	2403      	movs	r4, #3
 800b4dc:	9902      	ldr	r1, [sp, #8]
 800b4de:	3708      	adds	r7, #8
 800b4e0:	3101      	adds	r1, #1
 800b4e2:	9102      	str	r1, [sp, #8]
 800b4e4:	4221      	tst	r1, r4
 800b4e6:	d1f4      	bne.n	800b4d2 <_malloc_r+0x176>
 800b4e8:	2103      	movs	r1, #3
 800b4ea:	420b      	tst	r3, r1
 800b4ec:	d000      	beq.n	800b4f0 <_malloc_r+0x194>
 800b4ee:	e0b7      	b.n	800b660 <_malloc_r+0x304>
 800b4f0:	6843      	ldr	r3, [r0, #4]
 800b4f2:	4393      	bics	r3, r2
 800b4f4:	6043      	str	r3, [r0, #4]
 800b4f6:	9b04      	ldr	r3, [sp, #16]
 800b4f8:	0052      	lsls	r2, r2, #1
 800b4fa:	6859      	ldr	r1, [r3, #4]
 800b4fc:	4291      	cmp	r1, r2
 800b4fe:	d302      	bcc.n	800b506 <_malloc_r+0x1aa>
 800b500:	2a00      	cmp	r2, #0
 800b502:	d000      	beq.n	800b506 <_malloc_r+0x1aa>
 800b504:	e0bb      	b.n	800b67e <_malloc_r+0x322>
 800b506:	2203      	movs	r2, #3
 800b508:	6883      	ldr	r3, [r0, #8]
 800b50a:	9302      	str	r3, [sp, #8]
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	4393      	bics	r3, r2
 800b510:	9303      	str	r3, [sp, #12]
 800b512:	42ab      	cmp	r3, r5
 800b514:	d303      	bcc.n	800b51e <_malloc_r+0x1c2>
 800b516:	1b59      	subs	r1, r3, r5
 800b518:	290f      	cmp	r1, #15
 800b51a:	dd00      	ble.n	800b51e <_malloc_r+0x1c2>
 800b51c:	e123      	b.n	800b766 <_malloc_r+0x40a>
 800b51e:	9b02      	ldr	r3, [sp, #8]
 800b520:	9a03      	ldr	r2, [sp, #12]
 800b522:	2008      	movs	r0, #8
 800b524:	189e      	adds	r6, r3, r2
 800b526:	4b5a      	ldr	r3, [pc, #360]	; (800b690 <_malloc_r+0x334>)
 800b528:	681f      	ldr	r7, [r3, #0]
 800b52a:	f001 fa71 	bl	800ca10 <sysconf>
 800b52e:	4b59      	ldr	r3, [pc, #356]	; (800b694 <_malloc_r+0x338>)
 800b530:	3710      	adds	r7, #16
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	197f      	adds	r7, r7, r5
 800b536:	9004      	str	r0, [sp, #16]
 800b538:	3301      	adds	r3, #1
 800b53a:	d003      	beq.n	800b544 <_malloc_r+0x1e8>
 800b53c:	1e7b      	subs	r3, r7, #1
 800b53e:	181b      	adds	r3, r3, r0
 800b540:	4247      	negs	r7, r0
 800b542:	401f      	ands	r7, r3
 800b544:	0039      	movs	r1, r7
 800b546:	9801      	ldr	r0, [sp, #4]
 800b548:	f001 fa0e 	bl	800c968 <_sbrk_r>
 800b54c:	0004      	movs	r4, r0
 800b54e:	1c43      	adds	r3, r0, #1
 800b550:	d100      	bne.n	800b554 <_malloc_r+0x1f8>
 800b552:	e0de      	b.n	800b712 <_malloc_r+0x3b6>
 800b554:	4286      	cmp	r6, r0
 800b556:	d904      	bls.n	800b562 <_malloc_r+0x206>
 800b558:	4b4a      	ldr	r3, [pc, #296]	; (800b684 <_malloc_r+0x328>)
 800b55a:	9a02      	ldr	r2, [sp, #8]
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d000      	beq.n	800b562 <_malloc_r+0x206>
 800b560:	e0d7      	b.n	800b712 <_malloc_r+0x3b6>
 800b562:	4a4d      	ldr	r2, [pc, #308]	; (800b698 <_malloc_r+0x33c>)
 800b564:	6813      	ldr	r3, [r2, #0]
 800b566:	18fb      	adds	r3, r7, r3
 800b568:	6013      	str	r3, [r2, #0]
 800b56a:	9a04      	ldr	r2, [sp, #16]
 800b56c:	3a01      	subs	r2, #1
 800b56e:	42a6      	cmp	r6, r4
 800b570:	d000      	beq.n	800b574 <_malloc_r+0x218>
 800b572:	e097      	b.n	800b6a4 <_malloc_r+0x348>
 800b574:	4216      	tst	r6, r2
 800b576:	d000      	beq.n	800b57a <_malloc_r+0x21e>
 800b578:	e094      	b.n	800b6a4 <_malloc_r+0x348>
 800b57a:	4b42      	ldr	r3, [pc, #264]	; (800b684 <_malloc_r+0x328>)
 800b57c:	689a      	ldr	r2, [r3, #8]
 800b57e:	9b03      	ldr	r3, [sp, #12]
 800b580:	19df      	adds	r7, r3, r7
 800b582:	2301      	movs	r3, #1
 800b584:	433b      	orrs	r3, r7
 800b586:	6053      	str	r3, [r2, #4]
 800b588:	4b43      	ldr	r3, [pc, #268]	; (800b698 <_malloc_r+0x33c>)
 800b58a:	4a44      	ldr	r2, [pc, #272]	; (800b69c <_malloc_r+0x340>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	6811      	ldr	r1, [r2, #0]
 800b590:	428b      	cmp	r3, r1
 800b592:	d900      	bls.n	800b596 <_malloc_r+0x23a>
 800b594:	6013      	str	r3, [r2, #0]
 800b596:	4a42      	ldr	r2, [pc, #264]	; (800b6a0 <_malloc_r+0x344>)
 800b598:	6811      	ldr	r1, [r2, #0]
 800b59a:	428b      	cmp	r3, r1
 800b59c:	d800      	bhi.n	800b5a0 <_malloc_r+0x244>
 800b59e:	e0b8      	b.n	800b712 <_malloc_r+0x3b6>
 800b5a0:	6013      	str	r3, [r2, #0]
 800b5a2:	e0b6      	b.n	800b712 <_malloc_r+0x3b6>
 800b5a4:	0a50      	lsrs	r0, r2, #9
 800b5a6:	2804      	cmp	r0, #4
 800b5a8:	d811      	bhi.n	800b5ce <_malloc_r+0x272>
 800b5aa:	0991      	lsrs	r1, r2, #6
 800b5ac:	3138      	adds	r1, #56	; 0x38
 800b5ae:	00cf      	lsls	r7, r1, #3
 800b5b0:	19bf      	adds	r7, r7, r6
 800b5b2:	68b8      	ldr	r0, [r7, #8]
 800b5b4:	4287      	cmp	r7, r0
 800b5b6:	d125      	bne.n	800b604 <_malloc_r+0x2a8>
 800b5b8:	2201      	movs	r2, #1
 800b5ba:	1089      	asrs	r1, r1, #2
 800b5bc:	408a      	lsls	r2, r1
 800b5be:	4661      	mov	r1, ip
 800b5c0:	430a      	orrs	r2, r1
 800b5c2:	6072      	str	r2, [r6, #4]
 800b5c4:	60e7      	str	r7, [r4, #12]
 800b5c6:	60a0      	str	r0, [r4, #8]
 800b5c8:	60bc      	str	r4, [r7, #8]
 800b5ca:	60c4      	str	r4, [r0, #12]
 800b5cc:	e76b      	b.n	800b4a6 <_malloc_r+0x14a>
 800b5ce:	2814      	cmp	r0, #20
 800b5d0:	d802      	bhi.n	800b5d8 <_malloc_r+0x27c>
 800b5d2:	0001      	movs	r1, r0
 800b5d4:	315b      	adds	r1, #91	; 0x5b
 800b5d6:	e7ea      	b.n	800b5ae <_malloc_r+0x252>
 800b5d8:	2854      	cmp	r0, #84	; 0x54
 800b5da:	d802      	bhi.n	800b5e2 <_malloc_r+0x286>
 800b5dc:	0b11      	lsrs	r1, r2, #12
 800b5de:	316e      	adds	r1, #110	; 0x6e
 800b5e0:	e7e5      	b.n	800b5ae <_malloc_r+0x252>
 800b5e2:	21aa      	movs	r1, #170	; 0xaa
 800b5e4:	0049      	lsls	r1, r1, #1
 800b5e6:	4288      	cmp	r0, r1
 800b5e8:	d802      	bhi.n	800b5f0 <_malloc_r+0x294>
 800b5ea:	0bd1      	lsrs	r1, r2, #15
 800b5ec:	3177      	adds	r1, #119	; 0x77
 800b5ee:	e7de      	b.n	800b5ae <_malloc_r+0x252>
 800b5f0:	4f26      	ldr	r7, [pc, #152]	; (800b68c <_malloc_r+0x330>)
 800b5f2:	217e      	movs	r1, #126	; 0x7e
 800b5f4:	42b8      	cmp	r0, r7
 800b5f6:	d8da      	bhi.n	800b5ae <_malloc_r+0x252>
 800b5f8:	0c91      	lsrs	r1, r2, #18
 800b5fa:	317c      	adds	r1, #124	; 0x7c
 800b5fc:	e7d7      	b.n	800b5ae <_malloc_r+0x252>
 800b5fe:	6880      	ldr	r0, [r0, #8]
 800b600:	4287      	cmp	r7, r0
 800b602:	d004      	beq.n	800b60e <_malloc_r+0x2b2>
 800b604:	2603      	movs	r6, #3
 800b606:	6841      	ldr	r1, [r0, #4]
 800b608:	43b1      	bics	r1, r6
 800b60a:	4291      	cmp	r1, r2
 800b60c:	d8f7      	bhi.n	800b5fe <_malloc_r+0x2a2>
 800b60e:	68c7      	ldr	r7, [r0, #12]
 800b610:	e7d8      	b.n	800b5c4 <_malloc_r+0x268>
 800b612:	2603      	movs	r6, #3
 800b614:	6861      	ldr	r1, [r4, #4]
 800b616:	43b1      	bics	r1, r6
 800b618:	9103      	str	r1, [sp, #12]
 800b61a:	68e6      	ldr	r6, [r4, #12]
 800b61c:	1b49      	subs	r1, r1, r5
 800b61e:	290f      	cmp	r1, #15
 800b620:	dd10      	ble.n	800b644 <_malloc_r+0x2e8>
 800b622:	2201      	movs	r2, #1
 800b624:	1963      	adds	r3, r4, r5
 800b626:	4315      	orrs	r5, r2
 800b628:	6065      	str	r5, [r4, #4]
 800b62a:	68a5      	ldr	r5, [r4, #8]
 800b62c:	430a      	orrs	r2, r1
 800b62e:	60ee      	str	r6, [r5, #12]
 800b630:	60b5      	str	r5, [r6, #8]
 800b632:	6143      	str	r3, [r0, #20]
 800b634:	6103      	str	r3, [r0, #16]
 800b636:	4814      	ldr	r0, [pc, #80]	; (800b688 <_malloc_r+0x32c>)
 800b638:	605a      	str	r2, [r3, #4]
 800b63a:	60d8      	str	r0, [r3, #12]
 800b63c:	6098      	str	r0, [r3, #8]
 800b63e:	9b03      	ldr	r3, [sp, #12]
 800b640:	50e1      	str	r1, [r4, r3]
 800b642:	e6eb      	b.n	800b41c <_malloc_r+0xc0>
 800b644:	2900      	cmp	r1, #0
 800b646:	db09      	blt.n	800b65c <_malloc_r+0x300>
 800b648:	9b03      	ldr	r3, [sp, #12]
 800b64a:	18e1      	adds	r1, r4, r3
 800b64c:	2301      	movs	r3, #1
 800b64e:	684a      	ldr	r2, [r1, #4]
 800b650:	4313      	orrs	r3, r2
 800b652:	604b      	str	r3, [r1, #4]
 800b654:	68a3      	ldr	r3, [r4, #8]
 800b656:	60de      	str	r6, [r3, #12]
 800b658:	60b3      	str	r3, [r6, #8]
 800b65a:	e6df      	b.n	800b41c <_malloc_r+0xc0>
 800b65c:	0034      	movs	r4, r6
 800b65e:	e739      	b.n	800b4d4 <_malloc_r+0x178>
 800b660:	2108      	movs	r1, #8
 800b662:	4249      	negs	r1, r1
 800b664:	448c      	add	ip, r1
 800b666:	4661      	mov	r1, ip
 800b668:	6889      	ldr	r1, [r1, #8]
 800b66a:	3b01      	subs	r3, #1
 800b66c:	4561      	cmp	r1, ip
 800b66e:	d100      	bne.n	800b672 <_malloc_r+0x316>
 800b670:	e73a      	b.n	800b4e8 <_malloc_r+0x18c>
 800b672:	e740      	b.n	800b4f6 <_malloc_r+0x19a>
 800b674:	3304      	adds	r3, #4
 800b676:	0052      	lsls	r2, r2, #1
 800b678:	420a      	tst	r2, r1
 800b67a:	d0fb      	beq.n	800b674 <_malloc_r+0x318>
 800b67c:	e724      	b.n	800b4c8 <_malloc_r+0x16c>
 800b67e:	9b02      	ldr	r3, [sp, #8]
 800b680:	e7fa      	b.n	800b678 <_malloc_r+0x31c>
 800b682:	46c0      	nop			; (mov r8, r8)
 800b684:	20000030 	.word	0x20000030
 800b688:	20000038 	.word	0x20000038
 800b68c:	00000554 	.word	0x00000554
 800b690:	20000bf0 	.word	0x20000bf0
 800b694:	20000438 	.word	0x20000438
 800b698:	20000bc0 	.word	0x20000bc0
 800b69c:	20000be8 	.word	0x20000be8
 800b6a0:	20000bec 	.word	0x20000bec
 800b6a4:	4934      	ldr	r1, [pc, #208]	; (800b778 <_malloc_r+0x41c>)
 800b6a6:	6808      	ldr	r0, [r1, #0]
 800b6a8:	3001      	adds	r0, #1
 800b6aa:	d140      	bne.n	800b72e <_malloc_r+0x3d2>
 800b6ac:	600c      	str	r4, [r1, #0]
 800b6ae:	2107      	movs	r1, #7
 800b6b0:	0026      	movs	r6, r4
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	400e      	ands	r6, r1
 800b6b6:	420c      	tst	r4, r1
 800b6b8:	d002      	beq.n	800b6c0 <_malloc_r+0x364>
 800b6ba:	3308      	adds	r3, #8
 800b6bc:	1b9b      	subs	r3, r3, r6
 800b6be:	18e4      	adds	r4, r4, r3
 800b6c0:	19e1      	adds	r1, r4, r7
 800b6c2:	9105      	str	r1, [sp, #20]
 800b6c4:	9f05      	ldr	r7, [sp, #20]
 800b6c6:	9904      	ldr	r1, [sp, #16]
 800b6c8:	4017      	ands	r7, r2
 800b6ca:	18cb      	adds	r3, r1, r3
 800b6cc:	1bdf      	subs	r7, r3, r7
 800b6ce:	4017      	ands	r7, r2
 800b6d0:	0039      	movs	r1, r7
 800b6d2:	9801      	ldr	r0, [sp, #4]
 800b6d4:	f001 f948 	bl	800c968 <_sbrk_r>
 800b6d8:	1c43      	adds	r3, r0, #1
 800b6da:	d107      	bne.n	800b6ec <_malloc_r+0x390>
 800b6dc:	1e37      	subs	r7, r6, #0
 800b6de:	9805      	ldr	r0, [sp, #20]
 800b6e0:	d004      	beq.n	800b6ec <_malloc_r+0x390>
 800b6e2:	0030      	movs	r0, r6
 800b6e4:	2700      	movs	r7, #0
 800b6e6:	9b05      	ldr	r3, [sp, #20]
 800b6e8:	3808      	subs	r0, #8
 800b6ea:	1818      	adds	r0, r3, r0
 800b6ec:	4a23      	ldr	r2, [pc, #140]	; (800b77c <_malloc_r+0x420>)
 800b6ee:	1b00      	subs	r0, r0, r4
 800b6f0:	6813      	ldr	r3, [r2, #0]
 800b6f2:	19c0      	adds	r0, r0, r7
 800b6f4:	19db      	adds	r3, r3, r7
 800b6f6:	6013      	str	r3, [r2, #0]
 800b6f8:	2201      	movs	r2, #1
 800b6fa:	4b21      	ldr	r3, [pc, #132]	; (800b780 <_malloc_r+0x424>)
 800b6fc:	9902      	ldr	r1, [sp, #8]
 800b6fe:	4310      	orrs	r0, r2
 800b700:	609c      	str	r4, [r3, #8]
 800b702:	6060      	str	r0, [r4, #4]
 800b704:	4299      	cmp	r1, r3
 800b706:	d100      	bne.n	800b70a <_malloc_r+0x3ae>
 800b708:	e73e      	b.n	800b588 <_malloc_r+0x22c>
 800b70a:	9b03      	ldr	r3, [sp, #12]
 800b70c:	2b0f      	cmp	r3, #15
 800b70e:	d813      	bhi.n	800b738 <_malloc_r+0x3dc>
 800b710:	6062      	str	r2, [r4, #4]
 800b712:	2203      	movs	r2, #3
 800b714:	4b1a      	ldr	r3, [pc, #104]	; (800b780 <_malloc_r+0x424>)
 800b716:	689b      	ldr	r3, [r3, #8]
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	4393      	bics	r3, r2
 800b71c:	1b59      	subs	r1, r3, r5
 800b71e:	42ab      	cmp	r3, r5
 800b720:	d301      	bcc.n	800b726 <_malloc_r+0x3ca>
 800b722:	290f      	cmp	r1, #15
 800b724:	dc1f      	bgt.n	800b766 <_malloc_r+0x40a>
 800b726:	9801      	ldr	r0, [sp, #4]
 800b728:	f000 f834 	bl	800b794 <__malloc_unlock>
 800b72c:	e623      	b.n	800b376 <_malloc_r+0x1a>
 800b72e:	4913      	ldr	r1, [pc, #76]	; (800b77c <_malloc_r+0x420>)
 800b730:	1ba6      	subs	r6, r4, r6
 800b732:	18f6      	adds	r6, r6, r3
 800b734:	600e      	str	r6, [r1, #0]
 800b736:	e7ba      	b.n	800b6ae <_malloc_r+0x352>
 800b738:	2107      	movs	r1, #7
 800b73a:	9b03      	ldr	r3, [sp, #12]
 800b73c:	3b0c      	subs	r3, #12
 800b73e:	438b      	bics	r3, r1
 800b740:	9902      	ldr	r1, [sp, #8]
 800b742:	6849      	ldr	r1, [r1, #4]
 800b744:	400a      	ands	r2, r1
 800b746:	9902      	ldr	r1, [sp, #8]
 800b748:	431a      	orrs	r2, r3
 800b74a:	604a      	str	r2, [r1, #4]
 800b74c:	18ca      	adds	r2, r1, r3
 800b74e:	2105      	movs	r1, #5
 800b750:	6051      	str	r1, [r2, #4]
 800b752:	6091      	str	r1, [r2, #8]
 800b754:	2b0f      	cmp	r3, #15
 800b756:	d800      	bhi.n	800b75a <_malloc_r+0x3fe>
 800b758:	e716      	b.n	800b588 <_malloc_r+0x22c>
 800b75a:	9902      	ldr	r1, [sp, #8]
 800b75c:	9801      	ldr	r0, [sp, #4]
 800b75e:	3108      	adds	r1, #8
 800b760:	f001 f9dc 	bl	800cb1c <_free_r>
 800b764:	e710      	b.n	800b588 <_malloc_r+0x22c>
 800b766:	2201      	movs	r2, #1
 800b768:	0013      	movs	r3, r2
 800b76a:	4805      	ldr	r0, [pc, #20]	; (800b780 <_malloc_r+0x424>)
 800b76c:	432b      	orrs	r3, r5
 800b76e:	6884      	ldr	r4, [r0, #8]
 800b770:	6063      	str	r3, [r4, #4]
 800b772:	1963      	adds	r3, r4, r5
 800b774:	6083      	str	r3, [r0, #8]
 800b776:	e623      	b.n	800b3c0 <_malloc_r+0x64>
 800b778:	20000438 	.word	0x20000438
 800b77c:	20000bc0 	.word	0x20000bc0
 800b780:	20000030 	.word	0x20000030

0800b784 <__malloc_lock>:
 800b784:	b510      	push	{r4, lr}
 800b786:	4802      	ldr	r0, [pc, #8]	; (800b790 <__malloc_lock+0xc>)
 800b788:	f001 f940 	bl	800ca0c <__retarget_lock_acquire_recursive>
 800b78c:	bd10      	pop	{r4, pc}
 800b78e:	46c0      	nop			; (mov r8, r8)
 800b790:	20000d35 	.word	0x20000d35

0800b794 <__malloc_unlock>:
 800b794:	b510      	push	{r4, lr}
 800b796:	4802      	ldr	r0, [pc, #8]	; (800b7a0 <__malloc_unlock+0xc>)
 800b798:	f001 f939 	bl	800ca0e <__retarget_lock_release_recursive>
 800b79c:	bd10      	pop	{r4, pc}
 800b79e:	46c0      	nop			; (mov r8, r8)
 800b7a0:	20000d35 	.word	0x20000d35

0800b7a4 <sulp>:
 800b7a4:	b570      	push	{r4, r5, r6, lr}
 800b7a6:	0016      	movs	r6, r2
 800b7a8:	000d      	movs	r5, r1
 800b7aa:	f002 f90d 	bl	800d9c8 <__ulp>
 800b7ae:	2e00      	cmp	r6, #0
 800b7b0:	d00d      	beq.n	800b7ce <sulp+0x2a>
 800b7b2:	236b      	movs	r3, #107	; 0x6b
 800b7b4:	006a      	lsls	r2, r5, #1
 800b7b6:	0d52      	lsrs	r2, r2, #21
 800b7b8:	1a9b      	subs	r3, r3, r2
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	dd07      	ble.n	800b7ce <sulp+0x2a>
 800b7be:	2400      	movs	r4, #0
 800b7c0:	4a03      	ldr	r2, [pc, #12]	; (800b7d0 <sulp+0x2c>)
 800b7c2:	051b      	lsls	r3, r3, #20
 800b7c4:	189d      	adds	r5, r3, r2
 800b7c6:	002b      	movs	r3, r5
 800b7c8:	0022      	movs	r2, r4
 800b7ca:	f7f5 ff4f 	bl	800166c <__aeabi_dmul>
 800b7ce:	bd70      	pop	{r4, r5, r6, pc}
 800b7d0:	3ff00000 	.word	0x3ff00000

0800b7d4 <_strtod_l>:
 800b7d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7d6:	b0a1      	sub	sp, #132	; 0x84
 800b7d8:	9219      	str	r2, [sp, #100]	; 0x64
 800b7da:	2200      	movs	r2, #0
 800b7dc:	2600      	movs	r6, #0
 800b7de:	2700      	movs	r7, #0
 800b7e0:	9004      	str	r0, [sp, #16]
 800b7e2:	9107      	str	r1, [sp, #28]
 800b7e4:	921c      	str	r2, [sp, #112]	; 0x70
 800b7e6:	911b      	str	r1, [sp, #108]	; 0x6c
 800b7e8:	780a      	ldrb	r2, [r1, #0]
 800b7ea:	2a2b      	cmp	r2, #43	; 0x2b
 800b7ec:	d055      	beq.n	800b89a <_strtod_l+0xc6>
 800b7ee:	d841      	bhi.n	800b874 <_strtod_l+0xa0>
 800b7f0:	2a0d      	cmp	r2, #13
 800b7f2:	d83b      	bhi.n	800b86c <_strtod_l+0x98>
 800b7f4:	2a08      	cmp	r2, #8
 800b7f6:	d83b      	bhi.n	800b870 <_strtod_l+0x9c>
 800b7f8:	2a00      	cmp	r2, #0
 800b7fa:	d044      	beq.n	800b886 <_strtod_l+0xb2>
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	920f      	str	r2, [sp, #60]	; 0x3c
 800b800:	2100      	movs	r1, #0
 800b802:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b804:	9109      	str	r1, [sp, #36]	; 0x24
 800b806:	782a      	ldrb	r2, [r5, #0]
 800b808:	2a30      	cmp	r2, #48	; 0x30
 800b80a:	d000      	beq.n	800b80e <_strtod_l+0x3a>
 800b80c:	e085      	b.n	800b91a <_strtod_l+0x146>
 800b80e:	786a      	ldrb	r2, [r5, #1]
 800b810:	3120      	adds	r1, #32
 800b812:	438a      	bics	r2, r1
 800b814:	2a58      	cmp	r2, #88	; 0x58
 800b816:	d000      	beq.n	800b81a <_strtod_l+0x46>
 800b818:	e075      	b.n	800b906 <_strtod_l+0x132>
 800b81a:	9302      	str	r3, [sp, #8]
 800b81c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b81e:	4a97      	ldr	r2, [pc, #604]	; (800ba7c <_strtod_l+0x2a8>)
 800b820:	9301      	str	r3, [sp, #4]
 800b822:	ab1c      	add	r3, sp, #112	; 0x70
 800b824:	9300      	str	r3, [sp, #0]
 800b826:	9804      	ldr	r0, [sp, #16]
 800b828:	ab1d      	add	r3, sp, #116	; 0x74
 800b82a:	a91b      	add	r1, sp, #108	; 0x6c
 800b82c:	f001 fa92 	bl	800cd54 <__gethex>
 800b830:	230f      	movs	r3, #15
 800b832:	0002      	movs	r2, r0
 800b834:	401a      	ands	r2, r3
 800b836:	0004      	movs	r4, r0
 800b838:	9205      	str	r2, [sp, #20]
 800b83a:	4218      	tst	r0, r3
 800b83c:	d005      	beq.n	800b84a <_strtod_l+0x76>
 800b83e:	2a06      	cmp	r2, #6
 800b840:	d12d      	bne.n	800b89e <_strtod_l+0xca>
 800b842:	1c6b      	adds	r3, r5, #1
 800b844:	931b      	str	r3, [sp, #108]	; 0x6c
 800b846:	2300      	movs	r3, #0
 800b848:	930f      	str	r3, [sp, #60]	; 0x3c
 800b84a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d002      	beq.n	800b856 <_strtod_l+0x82>
 800b850:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b852:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b854:	6013      	str	r3, [r2, #0]
 800b856:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d01b      	beq.n	800b894 <_strtod_l+0xc0>
 800b85c:	2380      	movs	r3, #128	; 0x80
 800b85e:	0032      	movs	r2, r6
 800b860:	061b      	lsls	r3, r3, #24
 800b862:	18fb      	adds	r3, r7, r3
 800b864:	0010      	movs	r0, r2
 800b866:	0019      	movs	r1, r3
 800b868:	b021      	add	sp, #132	; 0x84
 800b86a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b86c:	2a20      	cmp	r2, #32
 800b86e:	d1c5      	bne.n	800b7fc <_strtod_l+0x28>
 800b870:	3101      	adds	r1, #1
 800b872:	e7b8      	b.n	800b7e6 <_strtod_l+0x12>
 800b874:	2a2d      	cmp	r2, #45	; 0x2d
 800b876:	d1c1      	bne.n	800b7fc <_strtod_l+0x28>
 800b878:	3a2c      	subs	r2, #44	; 0x2c
 800b87a:	920f      	str	r2, [sp, #60]	; 0x3c
 800b87c:	1c4a      	adds	r2, r1, #1
 800b87e:	921b      	str	r2, [sp, #108]	; 0x6c
 800b880:	784a      	ldrb	r2, [r1, #1]
 800b882:	2a00      	cmp	r2, #0
 800b884:	d1bc      	bne.n	800b800 <_strtod_l+0x2c>
 800b886:	9b07      	ldr	r3, [sp, #28]
 800b888:	931b      	str	r3, [sp, #108]	; 0x6c
 800b88a:	2300      	movs	r3, #0
 800b88c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b88e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b890:	2b00      	cmp	r3, #0
 800b892:	d1dd      	bne.n	800b850 <_strtod_l+0x7c>
 800b894:	0032      	movs	r2, r6
 800b896:	003b      	movs	r3, r7
 800b898:	e7e4      	b.n	800b864 <_strtod_l+0x90>
 800b89a:	2200      	movs	r2, #0
 800b89c:	e7ed      	b.n	800b87a <_strtod_l+0xa6>
 800b89e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b8a0:	2a00      	cmp	r2, #0
 800b8a2:	d007      	beq.n	800b8b4 <_strtod_l+0xe0>
 800b8a4:	2135      	movs	r1, #53	; 0x35
 800b8a6:	a81e      	add	r0, sp, #120	; 0x78
 800b8a8:	f002 f97f 	bl	800dbaa <__copybits>
 800b8ac:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b8ae:	9804      	ldr	r0, [sp, #16]
 800b8b0:	f001 fd7c 	bl	800d3ac <_Bfree>
 800b8b4:	9805      	ldr	r0, [sp, #20]
 800b8b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b8b8:	3801      	subs	r0, #1
 800b8ba:	2804      	cmp	r0, #4
 800b8bc:	d806      	bhi.n	800b8cc <_strtod_l+0xf8>
 800b8be:	f7f4 fc29 	bl	8000114 <__gnu_thumb1_case_uqi>
 800b8c2:	0312      	.short	0x0312
 800b8c4:	1e1c      	.short	0x1e1c
 800b8c6:	12          	.byte	0x12
 800b8c7:	00          	.byte	0x00
 800b8c8:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b8ca:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800b8cc:	05e4      	lsls	r4, r4, #23
 800b8ce:	d502      	bpl.n	800b8d6 <_strtod_l+0x102>
 800b8d0:	2380      	movs	r3, #128	; 0x80
 800b8d2:	061b      	lsls	r3, r3, #24
 800b8d4:	431f      	orrs	r7, r3
 800b8d6:	4b6a      	ldr	r3, [pc, #424]	; (800ba80 <_strtod_l+0x2ac>)
 800b8d8:	423b      	tst	r3, r7
 800b8da:	d1b6      	bne.n	800b84a <_strtod_l+0x76>
 800b8dc:	f001 f86a 	bl	800c9b4 <__errno>
 800b8e0:	2322      	movs	r3, #34	; 0x22
 800b8e2:	6003      	str	r3, [r0, #0]
 800b8e4:	e7b1      	b.n	800b84a <_strtod_l+0x76>
 800b8e6:	4967      	ldr	r1, [pc, #412]	; (800ba84 <_strtod_l+0x2b0>)
 800b8e8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b8ea:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b8ec:	400a      	ands	r2, r1
 800b8ee:	4966      	ldr	r1, [pc, #408]	; (800ba88 <_strtod_l+0x2b4>)
 800b8f0:	185b      	adds	r3, r3, r1
 800b8f2:	051b      	lsls	r3, r3, #20
 800b8f4:	431a      	orrs	r2, r3
 800b8f6:	0017      	movs	r7, r2
 800b8f8:	e7e8      	b.n	800b8cc <_strtod_l+0xf8>
 800b8fa:	4f61      	ldr	r7, [pc, #388]	; (800ba80 <_strtod_l+0x2ac>)
 800b8fc:	e7e6      	b.n	800b8cc <_strtod_l+0xf8>
 800b8fe:	2601      	movs	r6, #1
 800b900:	4f62      	ldr	r7, [pc, #392]	; (800ba8c <_strtod_l+0x2b8>)
 800b902:	4276      	negs	r6, r6
 800b904:	e7e2      	b.n	800b8cc <_strtod_l+0xf8>
 800b906:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b908:	1c5a      	adds	r2, r3, #1
 800b90a:	921b      	str	r2, [sp, #108]	; 0x6c
 800b90c:	785b      	ldrb	r3, [r3, #1]
 800b90e:	2b30      	cmp	r3, #48	; 0x30
 800b910:	d0f9      	beq.n	800b906 <_strtod_l+0x132>
 800b912:	2b00      	cmp	r3, #0
 800b914:	d099      	beq.n	800b84a <_strtod_l+0x76>
 800b916:	2301      	movs	r3, #1
 800b918:	9309      	str	r3, [sp, #36]	; 0x24
 800b91a:	2500      	movs	r5, #0
 800b91c:	220a      	movs	r2, #10
 800b91e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b920:	950d      	str	r5, [sp, #52]	; 0x34
 800b922:	9310      	str	r3, [sp, #64]	; 0x40
 800b924:	9508      	str	r5, [sp, #32]
 800b926:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b928:	7804      	ldrb	r4, [r0, #0]
 800b92a:	0023      	movs	r3, r4
 800b92c:	3b30      	subs	r3, #48	; 0x30
 800b92e:	b2d9      	uxtb	r1, r3
 800b930:	2909      	cmp	r1, #9
 800b932:	d927      	bls.n	800b984 <_strtod_l+0x1b0>
 800b934:	2201      	movs	r2, #1
 800b936:	4956      	ldr	r1, [pc, #344]	; (800ba90 <_strtod_l+0x2bc>)
 800b938:	f000 ff98 	bl	800c86c <strncmp>
 800b93c:	2800      	cmp	r0, #0
 800b93e:	d031      	beq.n	800b9a4 <_strtod_l+0x1d0>
 800b940:	2000      	movs	r0, #0
 800b942:	0023      	movs	r3, r4
 800b944:	4684      	mov	ip, r0
 800b946:	9a08      	ldr	r2, [sp, #32]
 800b948:	900c      	str	r0, [sp, #48]	; 0x30
 800b94a:	9205      	str	r2, [sp, #20]
 800b94c:	2220      	movs	r2, #32
 800b94e:	0019      	movs	r1, r3
 800b950:	4391      	bics	r1, r2
 800b952:	000a      	movs	r2, r1
 800b954:	2100      	movs	r1, #0
 800b956:	9106      	str	r1, [sp, #24]
 800b958:	2a45      	cmp	r2, #69	; 0x45
 800b95a:	d000      	beq.n	800b95e <_strtod_l+0x18a>
 800b95c:	e0c2      	b.n	800bae4 <_strtod_l+0x310>
 800b95e:	9b05      	ldr	r3, [sp, #20]
 800b960:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b962:	4303      	orrs	r3, r0
 800b964:	4313      	orrs	r3, r2
 800b966:	428b      	cmp	r3, r1
 800b968:	d08d      	beq.n	800b886 <_strtod_l+0xb2>
 800b96a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b96c:	9307      	str	r3, [sp, #28]
 800b96e:	3301      	adds	r3, #1
 800b970:	931b      	str	r3, [sp, #108]	; 0x6c
 800b972:	9b07      	ldr	r3, [sp, #28]
 800b974:	785b      	ldrb	r3, [r3, #1]
 800b976:	2b2b      	cmp	r3, #43	; 0x2b
 800b978:	d071      	beq.n	800ba5e <_strtod_l+0x28a>
 800b97a:	000c      	movs	r4, r1
 800b97c:	2b2d      	cmp	r3, #45	; 0x2d
 800b97e:	d174      	bne.n	800ba6a <_strtod_l+0x296>
 800b980:	2401      	movs	r4, #1
 800b982:	e06d      	b.n	800ba60 <_strtod_l+0x28c>
 800b984:	9908      	ldr	r1, [sp, #32]
 800b986:	2908      	cmp	r1, #8
 800b988:	dc09      	bgt.n	800b99e <_strtod_l+0x1ca>
 800b98a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b98c:	4351      	muls	r1, r2
 800b98e:	185b      	adds	r3, r3, r1
 800b990:	930d      	str	r3, [sp, #52]	; 0x34
 800b992:	9b08      	ldr	r3, [sp, #32]
 800b994:	3001      	adds	r0, #1
 800b996:	3301      	adds	r3, #1
 800b998:	9308      	str	r3, [sp, #32]
 800b99a:	901b      	str	r0, [sp, #108]	; 0x6c
 800b99c:	e7c3      	b.n	800b926 <_strtod_l+0x152>
 800b99e:	4355      	muls	r5, r2
 800b9a0:	195d      	adds	r5, r3, r5
 800b9a2:	e7f6      	b.n	800b992 <_strtod_l+0x1be>
 800b9a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b9a6:	1c5a      	adds	r2, r3, #1
 800b9a8:	921b      	str	r2, [sp, #108]	; 0x6c
 800b9aa:	9a08      	ldr	r2, [sp, #32]
 800b9ac:	785b      	ldrb	r3, [r3, #1]
 800b9ae:	2a00      	cmp	r2, #0
 800b9b0:	d03a      	beq.n	800ba28 <_strtod_l+0x254>
 800b9b2:	900c      	str	r0, [sp, #48]	; 0x30
 800b9b4:	9205      	str	r2, [sp, #20]
 800b9b6:	001a      	movs	r2, r3
 800b9b8:	3a30      	subs	r2, #48	; 0x30
 800b9ba:	2a09      	cmp	r2, #9
 800b9bc:	d912      	bls.n	800b9e4 <_strtod_l+0x210>
 800b9be:	2201      	movs	r2, #1
 800b9c0:	4694      	mov	ip, r2
 800b9c2:	e7c3      	b.n	800b94c <_strtod_l+0x178>
 800b9c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b9c6:	3001      	adds	r0, #1
 800b9c8:	1c5a      	adds	r2, r3, #1
 800b9ca:	921b      	str	r2, [sp, #108]	; 0x6c
 800b9cc:	785b      	ldrb	r3, [r3, #1]
 800b9ce:	2b30      	cmp	r3, #48	; 0x30
 800b9d0:	d0f8      	beq.n	800b9c4 <_strtod_l+0x1f0>
 800b9d2:	001a      	movs	r2, r3
 800b9d4:	3a31      	subs	r2, #49	; 0x31
 800b9d6:	2a08      	cmp	r2, #8
 800b9d8:	d83c      	bhi.n	800ba54 <_strtod_l+0x280>
 800b9da:	900c      	str	r0, [sp, #48]	; 0x30
 800b9dc:	2000      	movs	r0, #0
 800b9de:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b9e0:	9005      	str	r0, [sp, #20]
 800b9e2:	9210      	str	r2, [sp, #64]	; 0x40
 800b9e4:	001a      	movs	r2, r3
 800b9e6:	1c41      	adds	r1, r0, #1
 800b9e8:	3a30      	subs	r2, #48	; 0x30
 800b9ea:	2b30      	cmp	r3, #48	; 0x30
 800b9ec:	d016      	beq.n	800ba1c <_strtod_l+0x248>
 800b9ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b9f0:	185b      	adds	r3, r3, r1
 800b9f2:	930c      	str	r3, [sp, #48]	; 0x30
 800b9f4:	9b05      	ldr	r3, [sp, #20]
 800b9f6:	210a      	movs	r1, #10
 800b9f8:	469c      	mov	ip, r3
 800b9fa:	4484      	add	ip, r0
 800b9fc:	4563      	cmp	r3, ip
 800b9fe:	d115      	bne.n	800ba2c <_strtod_l+0x258>
 800ba00:	9905      	ldr	r1, [sp, #20]
 800ba02:	9b05      	ldr	r3, [sp, #20]
 800ba04:	3101      	adds	r1, #1
 800ba06:	1809      	adds	r1, r1, r0
 800ba08:	181b      	adds	r3, r3, r0
 800ba0a:	9105      	str	r1, [sp, #20]
 800ba0c:	2b08      	cmp	r3, #8
 800ba0e:	dc19      	bgt.n	800ba44 <_strtod_l+0x270>
 800ba10:	230a      	movs	r3, #10
 800ba12:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ba14:	434b      	muls	r3, r1
 800ba16:	2100      	movs	r1, #0
 800ba18:	18d3      	adds	r3, r2, r3
 800ba1a:	930d      	str	r3, [sp, #52]	; 0x34
 800ba1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba1e:	0008      	movs	r0, r1
 800ba20:	1c5a      	adds	r2, r3, #1
 800ba22:	921b      	str	r2, [sp, #108]	; 0x6c
 800ba24:	785b      	ldrb	r3, [r3, #1]
 800ba26:	e7c6      	b.n	800b9b6 <_strtod_l+0x1e2>
 800ba28:	9808      	ldr	r0, [sp, #32]
 800ba2a:	e7d0      	b.n	800b9ce <_strtod_l+0x1fa>
 800ba2c:	1c5c      	adds	r4, r3, #1
 800ba2e:	2b08      	cmp	r3, #8
 800ba30:	dc04      	bgt.n	800ba3c <_strtod_l+0x268>
 800ba32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba34:	434b      	muls	r3, r1
 800ba36:	930d      	str	r3, [sp, #52]	; 0x34
 800ba38:	0023      	movs	r3, r4
 800ba3a:	e7df      	b.n	800b9fc <_strtod_l+0x228>
 800ba3c:	2c10      	cmp	r4, #16
 800ba3e:	dcfb      	bgt.n	800ba38 <_strtod_l+0x264>
 800ba40:	434d      	muls	r5, r1
 800ba42:	e7f9      	b.n	800ba38 <_strtod_l+0x264>
 800ba44:	9b05      	ldr	r3, [sp, #20]
 800ba46:	2100      	movs	r1, #0
 800ba48:	2b10      	cmp	r3, #16
 800ba4a:	dce7      	bgt.n	800ba1c <_strtod_l+0x248>
 800ba4c:	230a      	movs	r3, #10
 800ba4e:	435d      	muls	r5, r3
 800ba50:	1955      	adds	r5, r2, r5
 800ba52:	e7e3      	b.n	800ba1c <_strtod_l+0x248>
 800ba54:	2200      	movs	r2, #0
 800ba56:	920c      	str	r2, [sp, #48]	; 0x30
 800ba58:	9205      	str	r2, [sp, #20]
 800ba5a:	3201      	adds	r2, #1
 800ba5c:	e7b0      	b.n	800b9c0 <_strtod_l+0x1ec>
 800ba5e:	2400      	movs	r4, #0
 800ba60:	9b07      	ldr	r3, [sp, #28]
 800ba62:	3302      	adds	r3, #2
 800ba64:	931b      	str	r3, [sp, #108]	; 0x6c
 800ba66:	9b07      	ldr	r3, [sp, #28]
 800ba68:	789b      	ldrb	r3, [r3, #2]
 800ba6a:	001a      	movs	r2, r3
 800ba6c:	3a30      	subs	r2, #48	; 0x30
 800ba6e:	2a09      	cmp	r2, #9
 800ba70:	d914      	bls.n	800ba9c <_strtod_l+0x2c8>
 800ba72:	9a07      	ldr	r2, [sp, #28]
 800ba74:	921b      	str	r2, [sp, #108]	; 0x6c
 800ba76:	2200      	movs	r2, #0
 800ba78:	e033      	b.n	800bae2 <_strtod_l+0x30e>
 800ba7a:	46c0      	nop			; (mov r8, r8)
 800ba7c:	08014f1c 	.word	0x08014f1c
 800ba80:	7ff00000 	.word	0x7ff00000
 800ba84:	ffefffff 	.word	0xffefffff
 800ba88:	00000433 	.word	0x00000433
 800ba8c:	7fffffff 	.word	0x7fffffff
 800ba90:	08014f18 	.word	0x08014f18
 800ba94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba96:	1c5a      	adds	r2, r3, #1
 800ba98:	921b      	str	r2, [sp, #108]	; 0x6c
 800ba9a:	785b      	ldrb	r3, [r3, #1]
 800ba9c:	2b30      	cmp	r3, #48	; 0x30
 800ba9e:	d0f9      	beq.n	800ba94 <_strtod_l+0x2c0>
 800baa0:	2200      	movs	r2, #0
 800baa2:	9206      	str	r2, [sp, #24]
 800baa4:	001a      	movs	r2, r3
 800baa6:	3a31      	subs	r2, #49	; 0x31
 800baa8:	2a08      	cmp	r2, #8
 800baaa:	d81b      	bhi.n	800bae4 <_strtod_l+0x310>
 800baac:	3b30      	subs	r3, #48	; 0x30
 800baae:	930e      	str	r3, [sp, #56]	; 0x38
 800bab0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bab2:	9306      	str	r3, [sp, #24]
 800bab4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bab6:	1c59      	adds	r1, r3, #1
 800bab8:	911b      	str	r1, [sp, #108]	; 0x6c
 800baba:	785b      	ldrb	r3, [r3, #1]
 800babc:	001a      	movs	r2, r3
 800babe:	3a30      	subs	r2, #48	; 0x30
 800bac0:	2a09      	cmp	r2, #9
 800bac2:	d93a      	bls.n	800bb3a <_strtod_l+0x366>
 800bac4:	9a06      	ldr	r2, [sp, #24]
 800bac6:	1a8a      	subs	r2, r1, r2
 800bac8:	49b2      	ldr	r1, [pc, #712]	; (800bd94 <_strtod_l+0x5c0>)
 800baca:	9106      	str	r1, [sp, #24]
 800bacc:	2a08      	cmp	r2, #8
 800bace:	dc04      	bgt.n	800bada <_strtod_l+0x306>
 800bad0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bad2:	9206      	str	r2, [sp, #24]
 800bad4:	428a      	cmp	r2, r1
 800bad6:	dd00      	ble.n	800bada <_strtod_l+0x306>
 800bad8:	9106      	str	r1, [sp, #24]
 800bada:	2c00      	cmp	r4, #0
 800badc:	d002      	beq.n	800bae4 <_strtod_l+0x310>
 800bade:	9a06      	ldr	r2, [sp, #24]
 800bae0:	4252      	negs	r2, r2
 800bae2:	9206      	str	r2, [sp, #24]
 800bae4:	9a05      	ldr	r2, [sp, #20]
 800bae6:	2a00      	cmp	r2, #0
 800bae8:	d14d      	bne.n	800bb86 <_strtod_l+0x3b2>
 800baea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800baec:	4310      	orrs	r0, r2
 800baee:	d000      	beq.n	800baf2 <_strtod_l+0x31e>
 800baf0:	e6ab      	b.n	800b84a <_strtod_l+0x76>
 800baf2:	4662      	mov	r2, ip
 800baf4:	2a00      	cmp	r2, #0
 800baf6:	d000      	beq.n	800bafa <_strtod_l+0x326>
 800baf8:	e6c5      	b.n	800b886 <_strtod_l+0xb2>
 800bafa:	2b69      	cmp	r3, #105	; 0x69
 800bafc:	d027      	beq.n	800bb4e <_strtod_l+0x37a>
 800bafe:	dc23      	bgt.n	800bb48 <_strtod_l+0x374>
 800bb00:	2b49      	cmp	r3, #73	; 0x49
 800bb02:	d024      	beq.n	800bb4e <_strtod_l+0x37a>
 800bb04:	2b4e      	cmp	r3, #78	; 0x4e
 800bb06:	d000      	beq.n	800bb0a <_strtod_l+0x336>
 800bb08:	e6bd      	b.n	800b886 <_strtod_l+0xb2>
 800bb0a:	49a3      	ldr	r1, [pc, #652]	; (800bd98 <_strtod_l+0x5c4>)
 800bb0c:	a81b      	add	r0, sp, #108	; 0x6c
 800bb0e:	f001 fb57 	bl	800d1c0 <__match>
 800bb12:	2800      	cmp	r0, #0
 800bb14:	d100      	bne.n	800bb18 <_strtod_l+0x344>
 800bb16:	e6b6      	b.n	800b886 <_strtod_l+0xb2>
 800bb18:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	2b28      	cmp	r3, #40	; 0x28
 800bb1e:	d12c      	bne.n	800bb7a <_strtod_l+0x3a6>
 800bb20:	499e      	ldr	r1, [pc, #632]	; (800bd9c <_strtod_l+0x5c8>)
 800bb22:	aa1e      	add	r2, sp, #120	; 0x78
 800bb24:	a81b      	add	r0, sp, #108	; 0x6c
 800bb26:	f001 fb5f 	bl	800d1e8 <__hexnan>
 800bb2a:	2805      	cmp	r0, #5
 800bb2c:	d125      	bne.n	800bb7a <_strtod_l+0x3a6>
 800bb2e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bb30:	4a9b      	ldr	r2, [pc, #620]	; (800bda0 <_strtod_l+0x5cc>)
 800bb32:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800bb34:	431a      	orrs	r2, r3
 800bb36:	0017      	movs	r7, r2
 800bb38:	e687      	b.n	800b84a <_strtod_l+0x76>
 800bb3a:	220a      	movs	r2, #10
 800bb3c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800bb3e:	434a      	muls	r2, r1
 800bb40:	18d2      	adds	r2, r2, r3
 800bb42:	3a30      	subs	r2, #48	; 0x30
 800bb44:	920e      	str	r2, [sp, #56]	; 0x38
 800bb46:	e7b5      	b.n	800bab4 <_strtod_l+0x2e0>
 800bb48:	2b6e      	cmp	r3, #110	; 0x6e
 800bb4a:	d0de      	beq.n	800bb0a <_strtod_l+0x336>
 800bb4c:	e69b      	b.n	800b886 <_strtod_l+0xb2>
 800bb4e:	4995      	ldr	r1, [pc, #596]	; (800bda4 <_strtod_l+0x5d0>)
 800bb50:	a81b      	add	r0, sp, #108	; 0x6c
 800bb52:	f001 fb35 	bl	800d1c0 <__match>
 800bb56:	2800      	cmp	r0, #0
 800bb58:	d100      	bne.n	800bb5c <_strtod_l+0x388>
 800bb5a:	e694      	b.n	800b886 <_strtod_l+0xb2>
 800bb5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bb5e:	4992      	ldr	r1, [pc, #584]	; (800bda8 <_strtod_l+0x5d4>)
 800bb60:	3b01      	subs	r3, #1
 800bb62:	a81b      	add	r0, sp, #108	; 0x6c
 800bb64:	931b      	str	r3, [sp, #108]	; 0x6c
 800bb66:	f001 fb2b 	bl	800d1c0 <__match>
 800bb6a:	2800      	cmp	r0, #0
 800bb6c:	d102      	bne.n	800bb74 <_strtod_l+0x3a0>
 800bb6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bb70:	3301      	adds	r3, #1
 800bb72:	931b      	str	r3, [sp, #108]	; 0x6c
 800bb74:	2600      	movs	r6, #0
 800bb76:	4f8a      	ldr	r7, [pc, #552]	; (800bda0 <_strtod_l+0x5cc>)
 800bb78:	e667      	b.n	800b84a <_strtod_l+0x76>
 800bb7a:	488c      	ldr	r0, [pc, #560]	; (800bdac <_strtod_l+0x5d8>)
 800bb7c:	f000 ff5c 	bl	800ca38 <nan>
 800bb80:	0006      	movs	r6, r0
 800bb82:	000f      	movs	r7, r1
 800bb84:	e661      	b.n	800b84a <_strtod_l+0x76>
 800bb86:	9b06      	ldr	r3, [sp, #24]
 800bb88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb8a:	1a9b      	subs	r3, r3, r2
 800bb8c:	9309      	str	r3, [sp, #36]	; 0x24
 800bb8e:	9b08      	ldr	r3, [sp, #32]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d101      	bne.n	800bb98 <_strtod_l+0x3c4>
 800bb94:	9b05      	ldr	r3, [sp, #20]
 800bb96:	9308      	str	r3, [sp, #32]
 800bb98:	9c05      	ldr	r4, [sp, #20]
 800bb9a:	2c10      	cmp	r4, #16
 800bb9c:	dd00      	ble.n	800bba0 <_strtod_l+0x3cc>
 800bb9e:	2410      	movs	r4, #16
 800bba0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bba2:	f7f6 fc2b 	bl	80023fc <__aeabi_ui2d>
 800bba6:	9b05      	ldr	r3, [sp, #20]
 800bba8:	0006      	movs	r6, r0
 800bbaa:	000f      	movs	r7, r1
 800bbac:	2b09      	cmp	r3, #9
 800bbae:	dd15      	ble.n	800bbdc <_strtod_l+0x408>
 800bbb0:	0022      	movs	r2, r4
 800bbb2:	4b7f      	ldr	r3, [pc, #508]	; (800bdb0 <_strtod_l+0x5dc>)
 800bbb4:	3a09      	subs	r2, #9
 800bbb6:	00d2      	lsls	r2, r2, #3
 800bbb8:	189b      	adds	r3, r3, r2
 800bbba:	681a      	ldr	r2, [r3, #0]
 800bbbc:	685b      	ldr	r3, [r3, #4]
 800bbbe:	f7f5 fd55 	bl	800166c <__aeabi_dmul>
 800bbc2:	0006      	movs	r6, r0
 800bbc4:	0028      	movs	r0, r5
 800bbc6:	000f      	movs	r7, r1
 800bbc8:	f7f6 fc18 	bl	80023fc <__aeabi_ui2d>
 800bbcc:	0002      	movs	r2, r0
 800bbce:	000b      	movs	r3, r1
 800bbd0:	0030      	movs	r0, r6
 800bbd2:	0039      	movs	r1, r7
 800bbd4:	f7f4 fdf0 	bl	80007b8 <__aeabi_dadd>
 800bbd8:	0006      	movs	r6, r0
 800bbda:	000f      	movs	r7, r1
 800bbdc:	9b05      	ldr	r3, [sp, #20]
 800bbde:	2b0f      	cmp	r3, #15
 800bbe0:	dc39      	bgt.n	800bc56 <_strtod_l+0x482>
 800bbe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d100      	bne.n	800bbea <_strtod_l+0x416>
 800bbe8:	e62f      	b.n	800b84a <_strtod_l+0x76>
 800bbea:	dd24      	ble.n	800bc36 <_strtod_l+0x462>
 800bbec:	2b16      	cmp	r3, #22
 800bbee:	dc09      	bgt.n	800bc04 <_strtod_l+0x430>
 800bbf0:	496f      	ldr	r1, [pc, #444]	; (800bdb0 <_strtod_l+0x5dc>)
 800bbf2:	00db      	lsls	r3, r3, #3
 800bbf4:	18c9      	adds	r1, r1, r3
 800bbf6:	0032      	movs	r2, r6
 800bbf8:	6808      	ldr	r0, [r1, #0]
 800bbfa:	6849      	ldr	r1, [r1, #4]
 800bbfc:	003b      	movs	r3, r7
 800bbfe:	f7f5 fd35 	bl	800166c <__aeabi_dmul>
 800bc02:	e7bd      	b.n	800bb80 <_strtod_l+0x3ac>
 800bc04:	2325      	movs	r3, #37	; 0x25
 800bc06:	9a05      	ldr	r2, [sp, #20]
 800bc08:	1a9b      	subs	r3, r3, r2
 800bc0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	db22      	blt.n	800bc56 <_strtod_l+0x482>
 800bc10:	240f      	movs	r4, #15
 800bc12:	9b05      	ldr	r3, [sp, #20]
 800bc14:	4d66      	ldr	r5, [pc, #408]	; (800bdb0 <_strtod_l+0x5dc>)
 800bc16:	1ae4      	subs	r4, r4, r3
 800bc18:	00e1      	lsls	r1, r4, #3
 800bc1a:	1869      	adds	r1, r5, r1
 800bc1c:	0032      	movs	r2, r6
 800bc1e:	6808      	ldr	r0, [r1, #0]
 800bc20:	6849      	ldr	r1, [r1, #4]
 800bc22:	003b      	movs	r3, r7
 800bc24:	f7f5 fd22 	bl	800166c <__aeabi_dmul>
 800bc28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc2a:	1b1c      	subs	r4, r3, r4
 800bc2c:	00e4      	lsls	r4, r4, #3
 800bc2e:	192d      	adds	r5, r5, r4
 800bc30:	682a      	ldr	r2, [r5, #0]
 800bc32:	686b      	ldr	r3, [r5, #4]
 800bc34:	e7e3      	b.n	800bbfe <_strtod_l+0x42a>
 800bc36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc38:	3316      	adds	r3, #22
 800bc3a:	db0c      	blt.n	800bc56 <_strtod_l+0x482>
 800bc3c:	9906      	ldr	r1, [sp, #24]
 800bc3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc40:	4b5b      	ldr	r3, [pc, #364]	; (800bdb0 <_strtod_l+0x5dc>)
 800bc42:	1a52      	subs	r2, r2, r1
 800bc44:	00d2      	lsls	r2, r2, #3
 800bc46:	189b      	adds	r3, r3, r2
 800bc48:	0030      	movs	r0, r6
 800bc4a:	681a      	ldr	r2, [r3, #0]
 800bc4c:	685b      	ldr	r3, [r3, #4]
 800bc4e:	0039      	movs	r1, r7
 800bc50:	f7f5 f912 	bl	8000e78 <__aeabi_ddiv>
 800bc54:	e794      	b.n	800bb80 <_strtod_l+0x3ac>
 800bc56:	9b05      	ldr	r3, [sp, #20]
 800bc58:	1b1c      	subs	r4, r3, r4
 800bc5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc5c:	18e4      	adds	r4, r4, r3
 800bc5e:	2c00      	cmp	r4, #0
 800bc60:	dd72      	ble.n	800bd48 <_strtod_l+0x574>
 800bc62:	220f      	movs	r2, #15
 800bc64:	0023      	movs	r3, r4
 800bc66:	4013      	ands	r3, r2
 800bc68:	4214      	tst	r4, r2
 800bc6a:	d00a      	beq.n	800bc82 <_strtod_l+0x4ae>
 800bc6c:	4950      	ldr	r1, [pc, #320]	; (800bdb0 <_strtod_l+0x5dc>)
 800bc6e:	00db      	lsls	r3, r3, #3
 800bc70:	18c9      	adds	r1, r1, r3
 800bc72:	0032      	movs	r2, r6
 800bc74:	6808      	ldr	r0, [r1, #0]
 800bc76:	6849      	ldr	r1, [r1, #4]
 800bc78:	003b      	movs	r3, r7
 800bc7a:	f7f5 fcf7 	bl	800166c <__aeabi_dmul>
 800bc7e:	0006      	movs	r6, r0
 800bc80:	000f      	movs	r7, r1
 800bc82:	230f      	movs	r3, #15
 800bc84:	439c      	bics	r4, r3
 800bc86:	d04a      	beq.n	800bd1e <_strtod_l+0x54a>
 800bc88:	3326      	adds	r3, #38	; 0x26
 800bc8a:	33ff      	adds	r3, #255	; 0xff
 800bc8c:	429c      	cmp	r4, r3
 800bc8e:	dd22      	ble.n	800bcd6 <_strtod_l+0x502>
 800bc90:	2300      	movs	r3, #0
 800bc92:	9305      	str	r3, [sp, #20]
 800bc94:	9306      	str	r3, [sp, #24]
 800bc96:	930d      	str	r3, [sp, #52]	; 0x34
 800bc98:	9308      	str	r3, [sp, #32]
 800bc9a:	2322      	movs	r3, #34	; 0x22
 800bc9c:	2600      	movs	r6, #0
 800bc9e:	9a04      	ldr	r2, [sp, #16]
 800bca0:	4f3f      	ldr	r7, [pc, #252]	; (800bda0 <_strtod_l+0x5cc>)
 800bca2:	6013      	str	r3, [r2, #0]
 800bca4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bca6:	42b3      	cmp	r3, r6
 800bca8:	d100      	bne.n	800bcac <_strtod_l+0x4d8>
 800bcaa:	e5ce      	b.n	800b84a <_strtod_l+0x76>
 800bcac:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bcae:	9804      	ldr	r0, [sp, #16]
 800bcb0:	f001 fb7c 	bl	800d3ac <_Bfree>
 800bcb4:	9908      	ldr	r1, [sp, #32]
 800bcb6:	9804      	ldr	r0, [sp, #16]
 800bcb8:	f001 fb78 	bl	800d3ac <_Bfree>
 800bcbc:	9906      	ldr	r1, [sp, #24]
 800bcbe:	9804      	ldr	r0, [sp, #16]
 800bcc0:	f001 fb74 	bl	800d3ac <_Bfree>
 800bcc4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bcc6:	9804      	ldr	r0, [sp, #16]
 800bcc8:	f001 fb70 	bl	800d3ac <_Bfree>
 800bccc:	9905      	ldr	r1, [sp, #20]
 800bcce:	9804      	ldr	r0, [sp, #16]
 800bcd0:	f001 fb6c 	bl	800d3ac <_Bfree>
 800bcd4:	e5b9      	b.n	800b84a <_strtod_l+0x76>
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	0030      	movs	r0, r6
 800bcda:	0039      	movs	r1, r7
 800bcdc:	4d35      	ldr	r5, [pc, #212]	; (800bdb4 <_strtod_l+0x5e0>)
 800bcde:	1124      	asrs	r4, r4, #4
 800bce0:	9307      	str	r3, [sp, #28]
 800bce2:	2c01      	cmp	r4, #1
 800bce4:	dc1e      	bgt.n	800bd24 <_strtod_l+0x550>
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d001      	beq.n	800bcee <_strtod_l+0x51a>
 800bcea:	0006      	movs	r6, r0
 800bcec:	000f      	movs	r7, r1
 800bcee:	4b32      	ldr	r3, [pc, #200]	; (800bdb8 <_strtod_l+0x5e4>)
 800bcf0:	9a07      	ldr	r2, [sp, #28]
 800bcf2:	18ff      	adds	r7, r7, r3
 800bcf4:	4b2f      	ldr	r3, [pc, #188]	; (800bdb4 <_strtod_l+0x5e0>)
 800bcf6:	00d2      	lsls	r2, r2, #3
 800bcf8:	189d      	adds	r5, r3, r2
 800bcfa:	6828      	ldr	r0, [r5, #0]
 800bcfc:	6869      	ldr	r1, [r5, #4]
 800bcfe:	0032      	movs	r2, r6
 800bd00:	003b      	movs	r3, r7
 800bd02:	f7f5 fcb3 	bl	800166c <__aeabi_dmul>
 800bd06:	4b26      	ldr	r3, [pc, #152]	; (800bda0 <_strtod_l+0x5cc>)
 800bd08:	4a2c      	ldr	r2, [pc, #176]	; (800bdbc <_strtod_l+0x5e8>)
 800bd0a:	0006      	movs	r6, r0
 800bd0c:	400b      	ands	r3, r1
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d8be      	bhi.n	800bc90 <_strtod_l+0x4bc>
 800bd12:	4a2b      	ldr	r2, [pc, #172]	; (800bdc0 <_strtod_l+0x5ec>)
 800bd14:	4293      	cmp	r3, r2
 800bd16:	d913      	bls.n	800bd40 <_strtod_l+0x56c>
 800bd18:	2601      	movs	r6, #1
 800bd1a:	4f2a      	ldr	r7, [pc, #168]	; (800bdc4 <_strtod_l+0x5f0>)
 800bd1c:	4276      	negs	r6, r6
 800bd1e:	2300      	movs	r3, #0
 800bd20:	9307      	str	r3, [sp, #28]
 800bd22:	e088      	b.n	800be36 <_strtod_l+0x662>
 800bd24:	2201      	movs	r2, #1
 800bd26:	4214      	tst	r4, r2
 800bd28:	d004      	beq.n	800bd34 <_strtod_l+0x560>
 800bd2a:	682a      	ldr	r2, [r5, #0]
 800bd2c:	686b      	ldr	r3, [r5, #4]
 800bd2e:	f7f5 fc9d 	bl	800166c <__aeabi_dmul>
 800bd32:	2301      	movs	r3, #1
 800bd34:	9a07      	ldr	r2, [sp, #28]
 800bd36:	1064      	asrs	r4, r4, #1
 800bd38:	3201      	adds	r2, #1
 800bd3a:	9207      	str	r2, [sp, #28]
 800bd3c:	3508      	adds	r5, #8
 800bd3e:	e7d0      	b.n	800bce2 <_strtod_l+0x50e>
 800bd40:	23d4      	movs	r3, #212	; 0xd4
 800bd42:	049b      	lsls	r3, r3, #18
 800bd44:	18cf      	adds	r7, r1, r3
 800bd46:	e7ea      	b.n	800bd1e <_strtod_l+0x54a>
 800bd48:	2c00      	cmp	r4, #0
 800bd4a:	d0e8      	beq.n	800bd1e <_strtod_l+0x54a>
 800bd4c:	4264      	negs	r4, r4
 800bd4e:	230f      	movs	r3, #15
 800bd50:	0022      	movs	r2, r4
 800bd52:	401a      	ands	r2, r3
 800bd54:	421c      	tst	r4, r3
 800bd56:	d00a      	beq.n	800bd6e <_strtod_l+0x59a>
 800bd58:	4b15      	ldr	r3, [pc, #84]	; (800bdb0 <_strtod_l+0x5dc>)
 800bd5a:	00d2      	lsls	r2, r2, #3
 800bd5c:	189b      	adds	r3, r3, r2
 800bd5e:	0030      	movs	r0, r6
 800bd60:	681a      	ldr	r2, [r3, #0]
 800bd62:	685b      	ldr	r3, [r3, #4]
 800bd64:	0039      	movs	r1, r7
 800bd66:	f7f5 f887 	bl	8000e78 <__aeabi_ddiv>
 800bd6a:	0006      	movs	r6, r0
 800bd6c:	000f      	movs	r7, r1
 800bd6e:	1124      	asrs	r4, r4, #4
 800bd70:	d0d5      	beq.n	800bd1e <_strtod_l+0x54a>
 800bd72:	2c1f      	cmp	r4, #31
 800bd74:	dd28      	ble.n	800bdc8 <_strtod_l+0x5f4>
 800bd76:	2300      	movs	r3, #0
 800bd78:	9305      	str	r3, [sp, #20]
 800bd7a:	9306      	str	r3, [sp, #24]
 800bd7c:	930d      	str	r3, [sp, #52]	; 0x34
 800bd7e:	9308      	str	r3, [sp, #32]
 800bd80:	2322      	movs	r3, #34	; 0x22
 800bd82:	9a04      	ldr	r2, [sp, #16]
 800bd84:	2600      	movs	r6, #0
 800bd86:	6013      	str	r3, [r2, #0]
 800bd88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd8a:	2700      	movs	r7, #0
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d18d      	bne.n	800bcac <_strtod_l+0x4d8>
 800bd90:	e55b      	b.n	800b84a <_strtod_l+0x76>
 800bd92:	46c0      	nop			; (mov r8, r8)
 800bd94:	00004e1f 	.word	0x00004e1f
 800bd98:	08015251 	.word	0x08015251
 800bd9c:	08014f30 	.word	0x08014f30
 800bda0:	7ff00000 	.word	0x7ff00000
 800bda4:	08015249 	.word	0x08015249
 800bda8:	080152ff 	.word	0x080152ff
 800bdac:	080152fb 	.word	0x080152fb
 800bdb0:	08015170 	.word	0x08015170
 800bdb4:	08015148 	.word	0x08015148
 800bdb8:	fcb00000 	.word	0xfcb00000
 800bdbc:	7ca00000 	.word	0x7ca00000
 800bdc0:	7c900000 	.word	0x7c900000
 800bdc4:	7fefffff 	.word	0x7fefffff
 800bdc8:	2310      	movs	r3, #16
 800bdca:	0022      	movs	r2, r4
 800bdcc:	401a      	ands	r2, r3
 800bdce:	9207      	str	r2, [sp, #28]
 800bdd0:	421c      	tst	r4, r3
 800bdd2:	d001      	beq.n	800bdd8 <_strtod_l+0x604>
 800bdd4:	335a      	adds	r3, #90	; 0x5a
 800bdd6:	9307      	str	r3, [sp, #28]
 800bdd8:	0030      	movs	r0, r6
 800bdda:	0039      	movs	r1, r7
 800bddc:	2300      	movs	r3, #0
 800bdde:	4dc4      	ldr	r5, [pc, #784]	; (800c0f0 <_strtod_l+0x91c>)
 800bde0:	2201      	movs	r2, #1
 800bde2:	4214      	tst	r4, r2
 800bde4:	d004      	beq.n	800bdf0 <_strtod_l+0x61c>
 800bde6:	682a      	ldr	r2, [r5, #0]
 800bde8:	686b      	ldr	r3, [r5, #4]
 800bdea:	f7f5 fc3f 	bl	800166c <__aeabi_dmul>
 800bdee:	2301      	movs	r3, #1
 800bdf0:	1064      	asrs	r4, r4, #1
 800bdf2:	3508      	adds	r5, #8
 800bdf4:	2c00      	cmp	r4, #0
 800bdf6:	d1f3      	bne.n	800bde0 <_strtod_l+0x60c>
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d001      	beq.n	800be00 <_strtod_l+0x62c>
 800bdfc:	0006      	movs	r6, r0
 800bdfe:	000f      	movs	r7, r1
 800be00:	9b07      	ldr	r3, [sp, #28]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d00f      	beq.n	800be26 <_strtod_l+0x652>
 800be06:	236b      	movs	r3, #107	; 0x6b
 800be08:	007a      	lsls	r2, r7, #1
 800be0a:	0d52      	lsrs	r2, r2, #21
 800be0c:	0039      	movs	r1, r7
 800be0e:	1a9b      	subs	r3, r3, r2
 800be10:	2b00      	cmp	r3, #0
 800be12:	dd08      	ble.n	800be26 <_strtod_l+0x652>
 800be14:	2b1f      	cmp	r3, #31
 800be16:	dc00      	bgt.n	800be1a <_strtod_l+0x646>
 800be18:	e121      	b.n	800c05e <_strtod_l+0x88a>
 800be1a:	2600      	movs	r6, #0
 800be1c:	2b34      	cmp	r3, #52	; 0x34
 800be1e:	dc00      	bgt.n	800be22 <_strtod_l+0x64e>
 800be20:	e116      	b.n	800c050 <_strtod_l+0x87c>
 800be22:	27dc      	movs	r7, #220	; 0xdc
 800be24:	04bf      	lsls	r7, r7, #18
 800be26:	2200      	movs	r2, #0
 800be28:	2300      	movs	r3, #0
 800be2a:	0030      	movs	r0, r6
 800be2c:	0039      	movs	r1, r7
 800be2e:	f7f4 fb0b 	bl	8000448 <__aeabi_dcmpeq>
 800be32:	2800      	cmp	r0, #0
 800be34:	d19f      	bne.n	800bd76 <_strtod_l+0x5a2>
 800be36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be38:	9a08      	ldr	r2, [sp, #32]
 800be3a:	9300      	str	r3, [sp, #0]
 800be3c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800be3e:	9b05      	ldr	r3, [sp, #20]
 800be40:	9804      	ldr	r0, [sp, #16]
 800be42:	f001 fb01 	bl	800d448 <__s2b>
 800be46:	900d      	str	r0, [sp, #52]	; 0x34
 800be48:	2800      	cmp	r0, #0
 800be4a:	d100      	bne.n	800be4e <_strtod_l+0x67a>
 800be4c:	e720      	b.n	800bc90 <_strtod_l+0x4bc>
 800be4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be50:	9906      	ldr	r1, [sp, #24]
 800be52:	17da      	asrs	r2, r3, #31
 800be54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be56:	1a5b      	subs	r3, r3, r1
 800be58:	401a      	ands	r2, r3
 800be5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be5c:	9215      	str	r2, [sp, #84]	; 0x54
 800be5e:	43db      	mvns	r3, r3
 800be60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be62:	17db      	asrs	r3, r3, #31
 800be64:	401a      	ands	r2, r3
 800be66:	2300      	movs	r3, #0
 800be68:	9218      	str	r2, [sp, #96]	; 0x60
 800be6a:	9305      	str	r3, [sp, #20]
 800be6c:	9306      	str	r3, [sp, #24]
 800be6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be70:	9804      	ldr	r0, [sp, #16]
 800be72:	6859      	ldr	r1, [r3, #4]
 800be74:	f001 fa72 	bl	800d35c <_Balloc>
 800be78:	9008      	str	r0, [sp, #32]
 800be7a:	2800      	cmp	r0, #0
 800be7c:	d100      	bne.n	800be80 <_strtod_l+0x6ac>
 800be7e:	e70c      	b.n	800bc9a <_strtod_l+0x4c6>
 800be80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be82:	300c      	adds	r0, #12
 800be84:	0019      	movs	r1, r3
 800be86:	691a      	ldr	r2, [r3, #16]
 800be88:	310c      	adds	r1, #12
 800be8a:	3202      	adds	r2, #2
 800be8c:	0092      	lsls	r2, r2, #2
 800be8e:	f000 fdca 	bl	800ca26 <memcpy>
 800be92:	ab1e      	add	r3, sp, #120	; 0x78
 800be94:	9301      	str	r3, [sp, #4]
 800be96:	ab1d      	add	r3, sp, #116	; 0x74
 800be98:	9300      	str	r3, [sp, #0]
 800be9a:	0032      	movs	r2, r6
 800be9c:	003b      	movs	r3, r7
 800be9e:	9804      	ldr	r0, [sp, #16]
 800bea0:	9610      	str	r6, [sp, #64]	; 0x40
 800bea2:	9711      	str	r7, [sp, #68]	; 0x44
 800bea4:	f001 fdf8 	bl	800da98 <__d2b>
 800bea8:	901c      	str	r0, [sp, #112]	; 0x70
 800beaa:	2800      	cmp	r0, #0
 800beac:	d100      	bne.n	800beb0 <_strtod_l+0x6dc>
 800beae:	e6f4      	b.n	800bc9a <_strtod_l+0x4c6>
 800beb0:	2101      	movs	r1, #1
 800beb2:	9804      	ldr	r0, [sp, #16]
 800beb4:	f001 fb5c 	bl	800d570 <__i2b>
 800beb8:	9006      	str	r0, [sp, #24]
 800beba:	2800      	cmp	r0, #0
 800bebc:	d100      	bne.n	800bec0 <_strtod_l+0x6ec>
 800bebe:	e6ec      	b.n	800bc9a <_strtod_l+0x4c6>
 800bec0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bec2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bec4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800bec6:	1ad4      	subs	r4, r2, r3
 800bec8:	2b00      	cmp	r3, #0
 800beca:	db01      	blt.n	800bed0 <_strtod_l+0x6fc>
 800becc:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800bece:	195d      	adds	r5, r3, r5
 800bed0:	9907      	ldr	r1, [sp, #28]
 800bed2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800bed4:	1a5b      	subs	r3, r3, r1
 800bed6:	2136      	movs	r1, #54	; 0x36
 800bed8:	189b      	adds	r3, r3, r2
 800beda:	1a8a      	subs	r2, r1, r2
 800bedc:	4985      	ldr	r1, [pc, #532]	; (800c0f4 <_strtod_l+0x920>)
 800bede:	2001      	movs	r0, #1
 800bee0:	468c      	mov	ip, r1
 800bee2:	2100      	movs	r1, #0
 800bee4:	3b01      	subs	r3, #1
 800bee6:	9114      	str	r1, [sp, #80]	; 0x50
 800bee8:	9012      	str	r0, [sp, #72]	; 0x48
 800beea:	4563      	cmp	r3, ip
 800beec:	da07      	bge.n	800befe <_strtod_l+0x72a>
 800beee:	4661      	mov	r1, ip
 800bef0:	1ac9      	subs	r1, r1, r3
 800bef2:	1a52      	subs	r2, r2, r1
 800bef4:	291f      	cmp	r1, #31
 800bef6:	dd00      	ble.n	800befa <_strtod_l+0x726>
 800bef8:	e0b6      	b.n	800c068 <_strtod_l+0x894>
 800befa:	4088      	lsls	r0, r1
 800befc:	9012      	str	r0, [sp, #72]	; 0x48
 800befe:	18ab      	adds	r3, r5, r2
 800bf00:	930c      	str	r3, [sp, #48]	; 0x30
 800bf02:	18a4      	adds	r4, r4, r2
 800bf04:	9b07      	ldr	r3, [sp, #28]
 800bf06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf08:	191c      	adds	r4, r3, r4
 800bf0a:	002b      	movs	r3, r5
 800bf0c:	4295      	cmp	r5, r2
 800bf0e:	dd00      	ble.n	800bf12 <_strtod_l+0x73e>
 800bf10:	0013      	movs	r3, r2
 800bf12:	42a3      	cmp	r3, r4
 800bf14:	dd00      	ble.n	800bf18 <_strtod_l+0x744>
 800bf16:	0023      	movs	r3, r4
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	dd04      	ble.n	800bf26 <_strtod_l+0x752>
 800bf1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf1e:	1ae4      	subs	r4, r4, r3
 800bf20:	1ad2      	subs	r2, r2, r3
 800bf22:	920c      	str	r2, [sp, #48]	; 0x30
 800bf24:	1aed      	subs	r5, r5, r3
 800bf26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	dd17      	ble.n	800bf5c <_strtod_l+0x788>
 800bf2c:	001a      	movs	r2, r3
 800bf2e:	9906      	ldr	r1, [sp, #24]
 800bf30:	9804      	ldr	r0, [sp, #16]
 800bf32:	f001 fbe5 	bl	800d700 <__pow5mult>
 800bf36:	9006      	str	r0, [sp, #24]
 800bf38:	2800      	cmp	r0, #0
 800bf3a:	d100      	bne.n	800bf3e <_strtod_l+0x76a>
 800bf3c:	e6ad      	b.n	800bc9a <_strtod_l+0x4c6>
 800bf3e:	0001      	movs	r1, r0
 800bf40:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bf42:	9804      	ldr	r0, [sp, #16]
 800bf44:	f001 fb2c 	bl	800d5a0 <__multiply>
 800bf48:	900e      	str	r0, [sp, #56]	; 0x38
 800bf4a:	2800      	cmp	r0, #0
 800bf4c:	d100      	bne.n	800bf50 <_strtod_l+0x77c>
 800bf4e:	e6a4      	b.n	800bc9a <_strtod_l+0x4c6>
 800bf50:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bf52:	9804      	ldr	r0, [sp, #16]
 800bf54:	f001 fa2a 	bl	800d3ac <_Bfree>
 800bf58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf5a:	931c      	str	r3, [sp, #112]	; 0x70
 800bf5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	dd00      	ble.n	800bf64 <_strtod_l+0x790>
 800bf62:	e087      	b.n	800c074 <_strtod_l+0x8a0>
 800bf64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	dd08      	ble.n	800bf7c <_strtod_l+0x7a8>
 800bf6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bf6c:	9908      	ldr	r1, [sp, #32]
 800bf6e:	9804      	ldr	r0, [sp, #16]
 800bf70:	f001 fbc6 	bl	800d700 <__pow5mult>
 800bf74:	9008      	str	r0, [sp, #32]
 800bf76:	2800      	cmp	r0, #0
 800bf78:	d100      	bne.n	800bf7c <_strtod_l+0x7a8>
 800bf7a:	e68e      	b.n	800bc9a <_strtod_l+0x4c6>
 800bf7c:	2c00      	cmp	r4, #0
 800bf7e:	dd08      	ble.n	800bf92 <_strtod_l+0x7be>
 800bf80:	0022      	movs	r2, r4
 800bf82:	9908      	ldr	r1, [sp, #32]
 800bf84:	9804      	ldr	r0, [sp, #16]
 800bf86:	f001 fbfd 	bl	800d784 <__lshift>
 800bf8a:	9008      	str	r0, [sp, #32]
 800bf8c:	2800      	cmp	r0, #0
 800bf8e:	d100      	bne.n	800bf92 <_strtod_l+0x7be>
 800bf90:	e683      	b.n	800bc9a <_strtod_l+0x4c6>
 800bf92:	2d00      	cmp	r5, #0
 800bf94:	dd08      	ble.n	800bfa8 <_strtod_l+0x7d4>
 800bf96:	002a      	movs	r2, r5
 800bf98:	9906      	ldr	r1, [sp, #24]
 800bf9a:	9804      	ldr	r0, [sp, #16]
 800bf9c:	f001 fbf2 	bl	800d784 <__lshift>
 800bfa0:	9006      	str	r0, [sp, #24]
 800bfa2:	2800      	cmp	r0, #0
 800bfa4:	d100      	bne.n	800bfa8 <_strtod_l+0x7d4>
 800bfa6:	e678      	b.n	800bc9a <_strtod_l+0x4c6>
 800bfa8:	9a08      	ldr	r2, [sp, #32]
 800bfaa:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bfac:	9804      	ldr	r0, [sp, #16]
 800bfae:	f001 fc73 	bl	800d898 <__mdiff>
 800bfb2:	9005      	str	r0, [sp, #20]
 800bfb4:	2800      	cmp	r0, #0
 800bfb6:	d100      	bne.n	800bfba <_strtod_l+0x7e6>
 800bfb8:	e66f      	b.n	800bc9a <_strtod_l+0x4c6>
 800bfba:	2200      	movs	r2, #0
 800bfbc:	68c3      	ldr	r3, [r0, #12]
 800bfbe:	9906      	ldr	r1, [sp, #24]
 800bfc0:	60c2      	str	r2, [r0, #12]
 800bfc2:	930c      	str	r3, [sp, #48]	; 0x30
 800bfc4:	f001 fc4c 	bl	800d860 <__mcmp>
 800bfc8:	2800      	cmp	r0, #0
 800bfca:	da5d      	bge.n	800c088 <_strtod_l+0x8b4>
 800bfcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bfce:	4333      	orrs	r3, r6
 800bfd0:	d000      	beq.n	800bfd4 <_strtod_l+0x800>
 800bfd2:	e088      	b.n	800c0e6 <_strtod_l+0x912>
 800bfd4:	033b      	lsls	r3, r7, #12
 800bfd6:	d000      	beq.n	800bfda <_strtod_l+0x806>
 800bfd8:	e085      	b.n	800c0e6 <_strtod_l+0x912>
 800bfda:	22d6      	movs	r2, #214	; 0xd6
 800bfdc:	4b46      	ldr	r3, [pc, #280]	; (800c0f8 <_strtod_l+0x924>)
 800bfde:	04d2      	lsls	r2, r2, #19
 800bfe0:	403b      	ands	r3, r7
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	d97f      	bls.n	800c0e6 <_strtod_l+0x912>
 800bfe6:	9b05      	ldr	r3, [sp, #20]
 800bfe8:	695b      	ldr	r3, [r3, #20]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d103      	bne.n	800bff6 <_strtod_l+0x822>
 800bfee:	9b05      	ldr	r3, [sp, #20]
 800bff0:	691b      	ldr	r3, [r3, #16]
 800bff2:	2b01      	cmp	r3, #1
 800bff4:	dd77      	ble.n	800c0e6 <_strtod_l+0x912>
 800bff6:	9905      	ldr	r1, [sp, #20]
 800bff8:	2201      	movs	r2, #1
 800bffa:	9804      	ldr	r0, [sp, #16]
 800bffc:	f001 fbc2 	bl	800d784 <__lshift>
 800c000:	9906      	ldr	r1, [sp, #24]
 800c002:	9005      	str	r0, [sp, #20]
 800c004:	f001 fc2c 	bl	800d860 <__mcmp>
 800c008:	2800      	cmp	r0, #0
 800c00a:	dd6c      	ble.n	800c0e6 <_strtod_l+0x912>
 800c00c:	9907      	ldr	r1, [sp, #28]
 800c00e:	003b      	movs	r3, r7
 800c010:	4a39      	ldr	r2, [pc, #228]	; (800c0f8 <_strtod_l+0x924>)
 800c012:	2900      	cmp	r1, #0
 800c014:	d100      	bne.n	800c018 <_strtod_l+0x844>
 800c016:	e094      	b.n	800c142 <_strtod_l+0x96e>
 800c018:	0011      	movs	r1, r2
 800c01a:	20d6      	movs	r0, #214	; 0xd6
 800c01c:	4039      	ands	r1, r7
 800c01e:	04c0      	lsls	r0, r0, #19
 800c020:	4281      	cmp	r1, r0
 800c022:	dd00      	ble.n	800c026 <_strtod_l+0x852>
 800c024:	e08d      	b.n	800c142 <_strtod_l+0x96e>
 800c026:	23dc      	movs	r3, #220	; 0xdc
 800c028:	049b      	lsls	r3, r3, #18
 800c02a:	4299      	cmp	r1, r3
 800c02c:	dc00      	bgt.n	800c030 <_strtod_l+0x85c>
 800c02e:	e6a7      	b.n	800bd80 <_strtod_l+0x5ac>
 800c030:	0030      	movs	r0, r6
 800c032:	0039      	movs	r1, r7
 800c034:	4b31      	ldr	r3, [pc, #196]	; (800c0fc <_strtod_l+0x928>)
 800c036:	2200      	movs	r2, #0
 800c038:	f7f5 fb18 	bl	800166c <__aeabi_dmul>
 800c03c:	4b2e      	ldr	r3, [pc, #184]	; (800c0f8 <_strtod_l+0x924>)
 800c03e:	0006      	movs	r6, r0
 800c040:	000f      	movs	r7, r1
 800c042:	420b      	tst	r3, r1
 800c044:	d000      	beq.n	800c048 <_strtod_l+0x874>
 800c046:	e631      	b.n	800bcac <_strtod_l+0x4d8>
 800c048:	2322      	movs	r3, #34	; 0x22
 800c04a:	9a04      	ldr	r2, [sp, #16]
 800c04c:	6013      	str	r3, [r2, #0]
 800c04e:	e62d      	b.n	800bcac <_strtod_l+0x4d8>
 800c050:	234b      	movs	r3, #75	; 0x4b
 800c052:	1a9a      	subs	r2, r3, r2
 800c054:	3b4c      	subs	r3, #76	; 0x4c
 800c056:	4093      	lsls	r3, r2
 800c058:	4019      	ands	r1, r3
 800c05a:	000f      	movs	r7, r1
 800c05c:	e6e3      	b.n	800be26 <_strtod_l+0x652>
 800c05e:	2201      	movs	r2, #1
 800c060:	4252      	negs	r2, r2
 800c062:	409a      	lsls	r2, r3
 800c064:	4016      	ands	r6, r2
 800c066:	e6de      	b.n	800be26 <_strtod_l+0x652>
 800c068:	4925      	ldr	r1, [pc, #148]	; (800c100 <_strtod_l+0x92c>)
 800c06a:	1acb      	subs	r3, r1, r3
 800c06c:	0001      	movs	r1, r0
 800c06e:	4099      	lsls	r1, r3
 800c070:	9114      	str	r1, [sp, #80]	; 0x50
 800c072:	e743      	b.n	800befc <_strtod_l+0x728>
 800c074:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c076:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c078:	9804      	ldr	r0, [sp, #16]
 800c07a:	f001 fb83 	bl	800d784 <__lshift>
 800c07e:	901c      	str	r0, [sp, #112]	; 0x70
 800c080:	2800      	cmp	r0, #0
 800c082:	d000      	beq.n	800c086 <_strtod_l+0x8b2>
 800c084:	e76e      	b.n	800bf64 <_strtod_l+0x790>
 800c086:	e608      	b.n	800bc9a <_strtod_l+0x4c6>
 800c088:	970e      	str	r7, [sp, #56]	; 0x38
 800c08a:	2800      	cmp	r0, #0
 800c08c:	d177      	bne.n	800c17e <_strtod_l+0x9aa>
 800c08e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c090:	033b      	lsls	r3, r7, #12
 800c092:	0b1b      	lsrs	r3, r3, #12
 800c094:	2a00      	cmp	r2, #0
 800c096:	d039      	beq.n	800c10c <_strtod_l+0x938>
 800c098:	4a1a      	ldr	r2, [pc, #104]	; (800c104 <_strtod_l+0x930>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d139      	bne.n	800c112 <_strtod_l+0x93e>
 800c09e:	2101      	movs	r1, #1
 800c0a0:	9b07      	ldr	r3, [sp, #28]
 800c0a2:	4249      	negs	r1, r1
 800c0a4:	0032      	movs	r2, r6
 800c0a6:	0008      	movs	r0, r1
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d00b      	beq.n	800c0c4 <_strtod_l+0x8f0>
 800c0ac:	24d4      	movs	r4, #212	; 0xd4
 800c0ae:	4b12      	ldr	r3, [pc, #72]	; (800c0f8 <_strtod_l+0x924>)
 800c0b0:	0008      	movs	r0, r1
 800c0b2:	403b      	ands	r3, r7
 800c0b4:	04e4      	lsls	r4, r4, #19
 800c0b6:	42a3      	cmp	r3, r4
 800c0b8:	d804      	bhi.n	800c0c4 <_strtod_l+0x8f0>
 800c0ba:	306c      	adds	r0, #108	; 0x6c
 800c0bc:	0d1b      	lsrs	r3, r3, #20
 800c0be:	1ac3      	subs	r3, r0, r3
 800c0c0:	4099      	lsls	r1, r3
 800c0c2:	0008      	movs	r0, r1
 800c0c4:	4282      	cmp	r2, r0
 800c0c6:	d124      	bne.n	800c112 <_strtod_l+0x93e>
 800c0c8:	4b0f      	ldr	r3, [pc, #60]	; (800c108 <_strtod_l+0x934>)
 800c0ca:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c0cc:	4299      	cmp	r1, r3
 800c0ce:	d102      	bne.n	800c0d6 <_strtod_l+0x902>
 800c0d0:	3201      	adds	r2, #1
 800c0d2:	d100      	bne.n	800c0d6 <_strtod_l+0x902>
 800c0d4:	e5e1      	b.n	800bc9a <_strtod_l+0x4c6>
 800c0d6:	4b08      	ldr	r3, [pc, #32]	; (800c0f8 <_strtod_l+0x924>)
 800c0d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c0da:	2600      	movs	r6, #0
 800c0dc:	401a      	ands	r2, r3
 800c0de:	0013      	movs	r3, r2
 800c0e0:	2280      	movs	r2, #128	; 0x80
 800c0e2:	0352      	lsls	r2, r2, #13
 800c0e4:	189f      	adds	r7, r3, r2
 800c0e6:	9b07      	ldr	r3, [sp, #28]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d1a1      	bne.n	800c030 <_strtod_l+0x85c>
 800c0ec:	e5de      	b.n	800bcac <_strtod_l+0x4d8>
 800c0ee:	46c0      	nop			; (mov r8, r8)
 800c0f0:	08014f48 	.word	0x08014f48
 800c0f4:	fffffc02 	.word	0xfffffc02
 800c0f8:	7ff00000 	.word	0x7ff00000
 800c0fc:	39500000 	.word	0x39500000
 800c100:	fffffbe2 	.word	0xfffffbe2
 800c104:	000fffff 	.word	0x000fffff
 800c108:	7fefffff 	.word	0x7fefffff
 800c10c:	4333      	orrs	r3, r6
 800c10e:	d100      	bne.n	800c112 <_strtod_l+0x93e>
 800c110:	e77c      	b.n	800c00c <_strtod_l+0x838>
 800c112:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c114:	2b00      	cmp	r3, #0
 800c116:	d01d      	beq.n	800c154 <_strtod_l+0x980>
 800c118:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c11a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c11c:	4213      	tst	r3, r2
 800c11e:	d0e2      	beq.n	800c0e6 <_strtod_l+0x912>
 800c120:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c122:	0030      	movs	r0, r6
 800c124:	0039      	movs	r1, r7
 800c126:	9a07      	ldr	r2, [sp, #28]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d017      	beq.n	800c15c <_strtod_l+0x988>
 800c12c:	f7ff fb3a 	bl	800b7a4 <sulp>
 800c130:	0002      	movs	r2, r0
 800c132:	000b      	movs	r3, r1
 800c134:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c136:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c138:	f7f4 fb3e 	bl	80007b8 <__aeabi_dadd>
 800c13c:	0006      	movs	r6, r0
 800c13e:	000f      	movs	r7, r1
 800c140:	e7d1      	b.n	800c0e6 <_strtod_l+0x912>
 800c142:	2601      	movs	r6, #1
 800c144:	4013      	ands	r3, r2
 800c146:	4a98      	ldr	r2, [pc, #608]	; (800c3a8 <_strtod_l+0xbd4>)
 800c148:	4276      	negs	r6, r6
 800c14a:	189b      	adds	r3, r3, r2
 800c14c:	4a97      	ldr	r2, [pc, #604]	; (800c3ac <_strtod_l+0xbd8>)
 800c14e:	431a      	orrs	r2, r3
 800c150:	0017      	movs	r7, r2
 800c152:	e7c8      	b.n	800c0e6 <_strtod_l+0x912>
 800c154:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c156:	4233      	tst	r3, r6
 800c158:	d0c5      	beq.n	800c0e6 <_strtod_l+0x912>
 800c15a:	e7e1      	b.n	800c120 <_strtod_l+0x94c>
 800c15c:	f7ff fb22 	bl	800b7a4 <sulp>
 800c160:	0002      	movs	r2, r0
 800c162:	000b      	movs	r3, r1
 800c164:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c166:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c168:	f7f5 fd42 	bl	8001bf0 <__aeabi_dsub>
 800c16c:	2200      	movs	r2, #0
 800c16e:	2300      	movs	r3, #0
 800c170:	0006      	movs	r6, r0
 800c172:	000f      	movs	r7, r1
 800c174:	f7f4 f968 	bl	8000448 <__aeabi_dcmpeq>
 800c178:	2800      	cmp	r0, #0
 800c17a:	d0b4      	beq.n	800c0e6 <_strtod_l+0x912>
 800c17c:	e600      	b.n	800bd80 <_strtod_l+0x5ac>
 800c17e:	9906      	ldr	r1, [sp, #24]
 800c180:	9805      	ldr	r0, [sp, #20]
 800c182:	f001 fce9 	bl	800db58 <__ratio>
 800c186:	2380      	movs	r3, #128	; 0x80
 800c188:	2200      	movs	r2, #0
 800c18a:	05db      	lsls	r3, r3, #23
 800c18c:	0004      	movs	r4, r0
 800c18e:	000d      	movs	r5, r1
 800c190:	f7f4 f96a 	bl	8000468 <__aeabi_dcmple>
 800c194:	2800      	cmp	r0, #0
 800c196:	d06d      	beq.n	800c274 <_strtod_l+0xaa0>
 800c198:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d000      	beq.n	800c1a0 <_strtod_l+0x9cc>
 800c19e:	e07e      	b.n	800c29e <_strtod_l+0xaca>
 800c1a0:	2e00      	cmp	r6, #0
 800c1a2:	d158      	bne.n	800c256 <_strtod_l+0xa82>
 800c1a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1a6:	031b      	lsls	r3, r3, #12
 800c1a8:	d000      	beq.n	800c1ac <_strtod_l+0x9d8>
 800c1aa:	e07f      	b.n	800c2ac <_strtod_l+0xad8>
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	0020      	movs	r0, r4
 800c1b0:	0029      	movs	r1, r5
 800c1b2:	4b7f      	ldr	r3, [pc, #508]	; (800c3b0 <_strtod_l+0xbdc>)
 800c1b4:	f7f4 f94e 	bl	8000454 <__aeabi_dcmplt>
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	d158      	bne.n	800c26e <_strtod_l+0xa9a>
 800c1bc:	0020      	movs	r0, r4
 800c1be:	0029      	movs	r1, r5
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	4b7c      	ldr	r3, [pc, #496]	; (800c3b4 <_strtod_l+0xbe0>)
 800c1c4:	f7f5 fa52 	bl	800166c <__aeabi_dmul>
 800c1c8:	0004      	movs	r4, r0
 800c1ca:	000d      	movs	r5, r1
 800c1cc:	2380      	movs	r3, #128	; 0x80
 800c1ce:	061b      	lsls	r3, r3, #24
 800c1d0:	940a      	str	r4, [sp, #40]	; 0x28
 800c1d2:	18eb      	adds	r3, r5, r3
 800c1d4:	930b      	str	r3, [sp, #44]	; 0x2c
 800c1d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1da:	9212      	str	r2, [sp, #72]	; 0x48
 800c1dc:	9313      	str	r3, [sp, #76]	; 0x4c
 800c1de:	4a76      	ldr	r2, [pc, #472]	; (800c3b8 <_strtod_l+0xbe4>)
 800c1e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1e2:	4013      	ands	r3, r2
 800c1e4:	9314      	str	r3, [sp, #80]	; 0x50
 800c1e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c1e8:	4b74      	ldr	r3, [pc, #464]	; (800c3bc <_strtod_l+0xbe8>)
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d000      	beq.n	800c1f0 <_strtod_l+0xa1c>
 800c1ee:	e091      	b.n	800c314 <_strtod_l+0xb40>
 800c1f0:	4a73      	ldr	r2, [pc, #460]	; (800c3c0 <_strtod_l+0xbec>)
 800c1f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1f4:	4694      	mov	ip, r2
 800c1f6:	4463      	add	r3, ip
 800c1f8:	001f      	movs	r7, r3
 800c1fa:	0030      	movs	r0, r6
 800c1fc:	0019      	movs	r1, r3
 800c1fe:	f001 fbe3 	bl	800d9c8 <__ulp>
 800c202:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c204:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c206:	f7f5 fa31 	bl	800166c <__aeabi_dmul>
 800c20a:	0032      	movs	r2, r6
 800c20c:	003b      	movs	r3, r7
 800c20e:	f7f4 fad3 	bl	80007b8 <__aeabi_dadd>
 800c212:	4a69      	ldr	r2, [pc, #420]	; (800c3b8 <_strtod_l+0xbe4>)
 800c214:	4b6b      	ldr	r3, [pc, #428]	; (800c3c4 <_strtod_l+0xbf0>)
 800c216:	0006      	movs	r6, r0
 800c218:	400a      	ands	r2, r1
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d949      	bls.n	800c2b2 <_strtod_l+0xade>
 800c21e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c220:	4b69      	ldr	r3, [pc, #420]	; (800c3c8 <_strtod_l+0xbf4>)
 800c222:	429a      	cmp	r2, r3
 800c224:	d103      	bne.n	800c22e <_strtod_l+0xa5a>
 800c226:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c228:	3301      	adds	r3, #1
 800c22a:	d100      	bne.n	800c22e <_strtod_l+0xa5a>
 800c22c:	e535      	b.n	800bc9a <_strtod_l+0x4c6>
 800c22e:	2601      	movs	r6, #1
 800c230:	4f65      	ldr	r7, [pc, #404]	; (800c3c8 <_strtod_l+0xbf4>)
 800c232:	4276      	negs	r6, r6
 800c234:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c236:	9804      	ldr	r0, [sp, #16]
 800c238:	f001 f8b8 	bl	800d3ac <_Bfree>
 800c23c:	9908      	ldr	r1, [sp, #32]
 800c23e:	9804      	ldr	r0, [sp, #16]
 800c240:	f001 f8b4 	bl	800d3ac <_Bfree>
 800c244:	9906      	ldr	r1, [sp, #24]
 800c246:	9804      	ldr	r0, [sp, #16]
 800c248:	f001 f8b0 	bl	800d3ac <_Bfree>
 800c24c:	9905      	ldr	r1, [sp, #20]
 800c24e:	9804      	ldr	r0, [sp, #16]
 800c250:	f001 f8ac 	bl	800d3ac <_Bfree>
 800c254:	e60b      	b.n	800be6e <_strtod_l+0x69a>
 800c256:	2e01      	cmp	r6, #1
 800c258:	d103      	bne.n	800c262 <_strtod_l+0xa8e>
 800c25a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d100      	bne.n	800c262 <_strtod_l+0xa8e>
 800c260:	e58e      	b.n	800bd80 <_strtod_l+0x5ac>
 800c262:	2300      	movs	r3, #0
 800c264:	4c59      	ldr	r4, [pc, #356]	; (800c3cc <_strtod_l+0xbf8>)
 800c266:	930a      	str	r3, [sp, #40]	; 0x28
 800c268:	940b      	str	r4, [sp, #44]	; 0x2c
 800c26a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800c26c:	e01c      	b.n	800c2a8 <_strtod_l+0xad4>
 800c26e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800c270:	4d50      	ldr	r5, [pc, #320]	; (800c3b4 <_strtod_l+0xbe0>)
 800c272:	e7ab      	b.n	800c1cc <_strtod_l+0x9f8>
 800c274:	2200      	movs	r2, #0
 800c276:	0020      	movs	r0, r4
 800c278:	0029      	movs	r1, r5
 800c27a:	4b4e      	ldr	r3, [pc, #312]	; (800c3b4 <_strtod_l+0xbe0>)
 800c27c:	f7f5 f9f6 	bl	800166c <__aeabi_dmul>
 800c280:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c282:	0004      	movs	r4, r0
 800c284:	000b      	movs	r3, r1
 800c286:	000d      	movs	r5, r1
 800c288:	2a00      	cmp	r2, #0
 800c28a:	d104      	bne.n	800c296 <_strtod_l+0xac2>
 800c28c:	2280      	movs	r2, #128	; 0x80
 800c28e:	0612      	lsls	r2, r2, #24
 800c290:	900a      	str	r0, [sp, #40]	; 0x28
 800c292:	188b      	adds	r3, r1, r2
 800c294:	e79e      	b.n	800c1d4 <_strtod_l+0xa00>
 800c296:	0002      	movs	r2, r0
 800c298:	920a      	str	r2, [sp, #40]	; 0x28
 800c29a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c29c:	e79b      	b.n	800c1d6 <_strtod_l+0xa02>
 800c29e:	2300      	movs	r3, #0
 800c2a0:	4c43      	ldr	r4, [pc, #268]	; (800c3b0 <_strtod_l+0xbdc>)
 800c2a2:	930a      	str	r3, [sp, #40]	; 0x28
 800c2a4:	940b      	str	r4, [sp, #44]	; 0x2c
 800c2a6:	2400      	movs	r4, #0
 800c2a8:	4d41      	ldr	r5, [pc, #260]	; (800c3b0 <_strtod_l+0xbdc>)
 800c2aa:	e794      	b.n	800c1d6 <_strtod_l+0xa02>
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	4c47      	ldr	r4, [pc, #284]	; (800c3cc <_strtod_l+0xbf8>)
 800c2b0:	e7f7      	b.n	800c2a2 <_strtod_l+0xace>
 800c2b2:	23d4      	movs	r3, #212	; 0xd4
 800c2b4:	049b      	lsls	r3, r3, #18
 800c2b6:	18cf      	adds	r7, r1, r3
 800c2b8:	9b07      	ldr	r3, [sp, #28]
 800c2ba:	970e      	str	r7, [sp, #56]	; 0x38
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d1b9      	bne.n	800c234 <_strtod_l+0xa60>
 800c2c0:	4b3d      	ldr	r3, [pc, #244]	; (800c3b8 <_strtod_l+0xbe4>)
 800c2c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c2c4:	403b      	ands	r3, r7
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d1b4      	bne.n	800c234 <_strtod_l+0xa60>
 800c2ca:	0020      	movs	r0, r4
 800c2cc:	0029      	movs	r1, r5
 800c2ce:	f7f4 f955 	bl	800057c <__aeabi_d2lz>
 800c2d2:	f7f4 f98f 	bl	80005f4 <__aeabi_l2d>
 800c2d6:	0002      	movs	r2, r0
 800c2d8:	000b      	movs	r3, r1
 800c2da:	0020      	movs	r0, r4
 800c2dc:	0029      	movs	r1, r5
 800c2de:	f7f5 fc87 	bl	8001bf0 <__aeabi_dsub>
 800c2e2:	033b      	lsls	r3, r7, #12
 800c2e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c2e6:	0b1b      	lsrs	r3, r3, #12
 800c2e8:	4333      	orrs	r3, r6
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	0004      	movs	r4, r0
 800c2ee:	000d      	movs	r5, r1
 800c2f0:	4a37      	ldr	r2, [pc, #220]	; (800c3d0 <_strtod_l+0xbfc>)
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d054      	beq.n	800c3a0 <_strtod_l+0xbcc>
 800c2f6:	4b37      	ldr	r3, [pc, #220]	; (800c3d4 <_strtod_l+0xc00>)
 800c2f8:	f7f4 f8ac 	bl	8000454 <__aeabi_dcmplt>
 800c2fc:	2800      	cmp	r0, #0
 800c2fe:	d000      	beq.n	800c302 <_strtod_l+0xb2e>
 800c300:	e4d4      	b.n	800bcac <_strtod_l+0x4d8>
 800c302:	0020      	movs	r0, r4
 800c304:	0029      	movs	r1, r5
 800c306:	4a34      	ldr	r2, [pc, #208]	; (800c3d8 <_strtod_l+0xc04>)
 800c308:	4b2a      	ldr	r3, [pc, #168]	; (800c3b4 <_strtod_l+0xbe0>)
 800c30a:	f7f4 f8b7 	bl	800047c <__aeabi_dcmpgt>
 800c30e:	2800      	cmp	r0, #0
 800c310:	d090      	beq.n	800c234 <_strtod_l+0xa60>
 800c312:	e4cb      	b.n	800bcac <_strtod_l+0x4d8>
 800c314:	9b07      	ldr	r3, [sp, #28]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d02b      	beq.n	800c372 <_strtod_l+0xb9e>
 800c31a:	23d4      	movs	r3, #212	; 0xd4
 800c31c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c31e:	04db      	lsls	r3, r3, #19
 800c320:	429a      	cmp	r2, r3
 800c322:	d826      	bhi.n	800c372 <_strtod_l+0xb9e>
 800c324:	0020      	movs	r0, r4
 800c326:	0029      	movs	r1, r5
 800c328:	4a2c      	ldr	r2, [pc, #176]	; (800c3dc <_strtod_l+0xc08>)
 800c32a:	4b2d      	ldr	r3, [pc, #180]	; (800c3e0 <_strtod_l+0xc0c>)
 800c32c:	f7f4 f89c 	bl	8000468 <__aeabi_dcmple>
 800c330:	2800      	cmp	r0, #0
 800c332:	d017      	beq.n	800c364 <_strtod_l+0xb90>
 800c334:	0020      	movs	r0, r4
 800c336:	0029      	movs	r1, r5
 800c338:	f7f4 f902 	bl	8000540 <__aeabi_d2uiz>
 800c33c:	2800      	cmp	r0, #0
 800c33e:	d100      	bne.n	800c342 <_strtod_l+0xb6e>
 800c340:	3001      	adds	r0, #1
 800c342:	f7f6 f85b 	bl	80023fc <__aeabi_ui2d>
 800c346:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c348:	0004      	movs	r4, r0
 800c34a:	000b      	movs	r3, r1
 800c34c:	000d      	movs	r5, r1
 800c34e:	2a00      	cmp	r2, #0
 800c350:	d122      	bne.n	800c398 <_strtod_l+0xbc4>
 800c352:	2280      	movs	r2, #128	; 0x80
 800c354:	0612      	lsls	r2, r2, #24
 800c356:	188b      	adds	r3, r1, r2
 800c358:	9016      	str	r0, [sp, #88]	; 0x58
 800c35a:	9317      	str	r3, [sp, #92]	; 0x5c
 800c35c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c35e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c360:	9212      	str	r2, [sp, #72]	; 0x48
 800c362:	9313      	str	r3, [sp, #76]	; 0x4c
 800c364:	22d6      	movs	r2, #214	; 0xd6
 800c366:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c368:	04d2      	lsls	r2, r2, #19
 800c36a:	189b      	adds	r3, r3, r2
 800c36c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c36e:	1a9b      	subs	r3, r3, r2
 800c370:	9313      	str	r3, [sp, #76]	; 0x4c
 800c372:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c374:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c376:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800c378:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800c37a:	f001 fb25 	bl	800d9c8 <__ulp>
 800c37e:	0002      	movs	r2, r0
 800c380:	000b      	movs	r3, r1
 800c382:	0030      	movs	r0, r6
 800c384:	0039      	movs	r1, r7
 800c386:	f7f5 f971 	bl	800166c <__aeabi_dmul>
 800c38a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c38c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c38e:	f7f4 fa13 	bl	80007b8 <__aeabi_dadd>
 800c392:	0006      	movs	r6, r0
 800c394:	000f      	movs	r7, r1
 800c396:	e78f      	b.n	800c2b8 <_strtod_l+0xae4>
 800c398:	0002      	movs	r2, r0
 800c39a:	9216      	str	r2, [sp, #88]	; 0x58
 800c39c:	9317      	str	r3, [sp, #92]	; 0x5c
 800c39e:	e7dd      	b.n	800c35c <_strtod_l+0xb88>
 800c3a0:	4b10      	ldr	r3, [pc, #64]	; (800c3e4 <_strtod_l+0xc10>)
 800c3a2:	f7f4 f857 	bl	8000454 <__aeabi_dcmplt>
 800c3a6:	e7b2      	b.n	800c30e <_strtod_l+0xb3a>
 800c3a8:	fff00000 	.word	0xfff00000
 800c3ac:	000fffff 	.word	0x000fffff
 800c3b0:	3ff00000 	.word	0x3ff00000
 800c3b4:	3fe00000 	.word	0x3fe00000
 800c3b8:	7ff00000 	.word	0x7ff00000
 800c3bc:	7fe00000 	.word	0x7fe00000
 800c3c0:	fcb00000 	.word	0xfcb00000
 800c3c4:	7c9fffff 	.word	0x7c9fffff
 800c3c8:	7fefffff 	.word	0x7fefffff
 800c3cc:	bff00000 	.word	0xbff00000
 800c3d0:	94a03595 	.word	0x94a03595
 800c3d4:	3fdfffff 	.word	0x3fdfffff
 800c3d8:	35afe535 	.word	0x35afe535
 800c3dc:	ffc00000 	.word	0xffc00000
 800c3e0:	41dfffff 	.word	0x41dfffff
 800c3e4:	3fcfffff 	.word	0x3fcfffff

0800c3e8 <_strtod_r>:
 800c3e8:	b510      	push	{r4, lr}
 800c3ea:	4b02      	ldr	r3, [pc, #8]	; (800c3f4 <_strtod_r+0xc>)
 800c3ec:	f7ff f9f2 	bl	800b7d4 <_strtod_l>
 800c3f0:	bd10      	pop	{r4, pc}
 800c3f2:	46c0      	nop			; (mov r8, r8)
 800c3f4:	2000044c 	.word	0x2000044c

0800c3f8 <strtod>:
 800c3f8:	b510      	push	{r4, lr}
 800c3fa:	4c04      	ldr	r4, [pc, #16]	; (800c40c <strtod+0x14>)
 800c3fc:	000a      	movs	r2, r1
 800c3fe:	0001      	movs	r1, r0
 800c400:	4b03      	ldr	r3, [pc, #12]	; (800c410 <strtod+0x18>)
 800c402:	6820      	ldr	r0, [r4, #0]
 800c404:	f7ff f9e6 	bl	800b7d4 <_strtod_l>
 800c408:	bd10      	pop	{r4, pc}
 800c40a:	46c0      	nop			; (mov r8, r8)
 800c40c:	200006d8 	.word	0x200006d8
 800c410:	2000044c 	.word	0x2000044c

0800c414 <_strtol_l.constprop.0>:
 800c414:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c416:	b087      	sub	sp, #28
 800c418:	001e      	movs	r6, r3
 800c41a:	9005      	str	r0, [sp, #20]
 800c41c:	9101      	str	r1, [sp, #4]
 800c41e:	9202      	str	r2, [sp, #8]
 800c420:	2b01      	cmp	r3, #1
 800c422:	d048      	beq.n	800c4b6 <_strtol_l.constprop.0+0xa2>
 800c424:	000b      	movs	r3, r1
 800c426:	2e24      	cmp	r6, #36	; 0x24
 800c428:	d845      	bhi.n	800c4b6 <_strtol_l.constprop.0+0xa2>
 800c42a:	4a3b      	ldr	r2, [pc, #236]	; (800c518 <_strtol_l.constprop.0+0x104>)
 800c42c:	2108      	movs	r1, #8
 800c42e:	4694      	mov	ip, r2
 800c430:	001a      	movs	r2, r3
 800c432:	4660      	mov	r0, ip
 800c434:	7814      	ldrb	r4, [r2, #0]
 800c436:	3301      	adds	r3, #1
 800c438:	5d00      	ldrb	r0, [r0, r4]
 800c43a:	001d      	movs	r5, r3
 800c43c:	0007      	movs	r7, r0
 800c43e:	400f      	ands	r7, r1
 800c440:	4208      	tst	r0, r1
 800c442:	d1f5      	bne.n	800c430 <_strtol_l.constprop.0+0x1c>
 800c444:	2c2d      	cmp	r4, #45	; 0x2d
 800c446:	d13d      	bne.n	800c4c4 <_strtol_l.constprop.0+0xb0>
 800c448:	2701      	movs	r7, #1
 800c44a:	781c      	ldrb	r4, [r3, #0]
 800c44c:	1c95      	adds	r5, r2, #2
 800c44e:	2e00      	cmp	r6, #0
 800c450:	d05e      	beq.n	800c510 <_strtol_l.constprop.0+0xfc>
 800c452:	2e10      	cmp	r6, #16
 800c454:	d109      	bne.n	800c46a <_strtol_l.constprop.0+0x56>
 800c456:	2c30      	cmp	r4, #48	; 0x30
 800c458:	d107      	bne.n	800c46a <_strtol_l.constprop.0+0x56>
 800c45a:	2220      	movs	r2, #32
 800c45c:	782b      	ldrb	r3, [r5, #0]
 800c45e:	4393      	bics	r3, r2
 800c460:	2b58      	cmp	r3, #88	; 0x58
 800c462:	d150      	bne.n	800c506 <_strtol_l.constprop.0+0xf2>
 800c464:	2610      	movs	r6, #16
 800c466:	786c      	ldrb	r4, [r5, #1]
 800c468:	3502      	adds	r5, #2
 800c46a:	4b2c      	ldr	r3, [pc, #176]	; (800c51c <_strtol_l.constprop.0+0x108>)
 800c46c:	0031      	movs	r1, r6
 800c46e:	18fb      	adds	r3, r7, r3
 800c470:	0018      	movs	r0, r3
 800c472:	9303      	str	r3, [sp, #12]
 800c474:	f7f3 fee8 	bl	8000248 <__aeabi_uidivmod>
 800c478:	2200      	movs	r2, #0
 800c47a:	9104      	str	r1, [sp, #16]
 800c47c:	2101      	movs	r1, #1
 800c47e:	4684      	mov	ip, r0
 800c480:	0010      	movs	r0, r2
 800c482:	4249      	negs	r1, r1
 800c484:	0023      	movs	r3, r4
 800c486:	3b30      	subs	r3, #48	; 0x30
 800c488:	2b09      	cmp	r3, #9
 800c48a:	d903      	bls.n	800c494 <_strtol_l.constprop.0+0x80>
 800c48c:	3b11      	subs	r3, #17
 800c48e:	2b19      	cmp	r3, #25
 800c490:	d81d      	bhi.n	800c4ce <_strtol_l.constprop.0+0xba>
 800c492:	330a      	adds	r3, #10
 800c494:	429e      	cmp	r6, r3
 800c496:	dd1e      	ble.n	800c4d6 <_strtol_l.constprop.0+0xc2>
 800c498:	1c54      	adds	r4, r2, #1
 800c49a:	d009      	beq.n	800c4b0 <_strtol_l.constprop.0+0x9c>
 800c49c:	000a      	movs	r2, r1
 800c49e:	4584      	cmp	ip, r0
 800c4a0:	d306      	bcc.n	800c4b0 <_strtol_l.constprop.0+0x9c>
 800c4a2:	d102      	bne.n	800c4aa <_strtol_l.constprop.0+0x96>
 800c4a4:	9c04      	ldr	r4, [sp, #16]
 800c4a6:	429c      	cmp	r4, r3
 800c4a8:	db02      	blt.n	800c4b0 <_strtol_l.constprop.0+0x9c>
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	4370      	muls	r0, r6
 800c4ae:	1818      	adds	r0, r3, r0
 800c4b0:	782c      	ldrb	r4, [r5, #0]
 800c4b2:	3501      	adds	r5, #1
 800c4b4:	e7e6      	b.n	800c484 <_strtol_l.constprop.0+0x70>
 800c4b6:	f000 fa7d 	bl	800c9b4 <__errno>
 800c4ba:	2316      	movs	r3, #22
 800c4bc:	6003      	str	r3, [r0, #0]
 800c4be:	2000      	movs	r0, #0
 800c4c0:	b007      	add	sp, #28
 800c4c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4c4:	2c2b      	cmp	r4, #43	; 0x2b
 800c4c6:	d1c2      	bne.n	800c44e <_strtol_l.constprop.0+0x3a>
 800c4c8:	781c      	ldrb	r4, [r3, #0]
 800c4ca:	1c95      	adds	r5, r2, #2
 800c4cc:	e7bf      	b.n	800c44e <_strtol_l.constprop.0+0x3a>
 800c4ce:	0023      	movs	r3, r4
 800c4d0:	3b61      	subs	r3, #97	; 0x61
 800c4d2:	2b19      	cmp	r3, #25
 800c4d4:	d9dd      	bls.n	800c492 <_strtol_l.constprop.0+0x7e>
 800c4d6:	1c53      	adds	r3, r2, #1
 800c4d8:	d109      	bne.n	800c4ee <_strtol_l.constprop.0+0xda>
 800c4da:	2322      	movs	r3, #34	; 0x22
 800c4dc:	9a05      	ldr	r2, [sp, #20]
 800c4de:	9803      	ldr	r0, [sp, #12]
 800c4e0:	6013      	str	r3, [r2, #0]
 800c4e2:	9b02      	ldr	r3, [sp, #8]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d0eb      	beq.n	800c4c0 <_strtol_l.constprop.0+0xac>
 800c4e8:	1e6b      	subs	r3, r5, #1
 800c4ea:	9301      	str	r3, [sp, #4]
 800c4ec:	e007      	b.n	800c4fe <_strtol_l.constprop.0+0xea>
 800c4ee:	2f00      	cmp	r7, #0
 800c4f0:	d000      	beq.n	800c4f4 <_strtol_l.constprop.0+0xe0>
 800c4f2:	4240      	negs	r0, r0
 800c4f4:	9b02      	ldr	r3, [sp, #8]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d0e2      	beq.n	800c4c0 <_strtol_l.constprop.0+0xac>
 800c4fa:	2a00      	cmp	r2, #0
 800c4fc:	d1f4      	bne.n	800c4e8 <_strtol_l.constprop.0+0xd4>
 800c4fe:	9b02      	ldr	r3, [sp, #8]
 800c500:	9a01      	ldr	r2, [sp, #4]
 800c502:	601a      	str	r2, [r3, #0]
 800c504:	e7dc      	b.n	800c4c0 <_strtol_l.constprop.0+0xac>
 800c506:	2430      	movs	r4, #48	; 0x30
 800c508:	2e00      	cmp	r6, #0
 800c50a:	d1ae      	bne.n	800c46a <_strtol_l.constprop.0+0x56>
 800c50c:	3608      	adds	r6, #8
 800c50e:	e7ac      	b.n	800c46a <_strtol_l.constprop.0+0x56>
 800c510:	2c30      	cmp	r4, #48	; 0x30
 800c512:	d0a2      	beq.n	800c45a <_strtol_l.constprop.0+0x46>
 800c514:	260a      	movs	r6, #10
 800c516:	e7a8      	b.n	800c46a <_strtol_l.constprop.0+0x56>
 800c518:	08014f71 	.word	0x08014f71
 800c51c:	7fffffff 	.word	0x7fffffff

0800c520 <_strtol_r>:
 800c520:	b510      	push	{r4, lr}
 800c522:	f7ff ff77 	bl	800c414 <_strtol_l.constprop.0>
 800c526:	bd10      	pop	{r4, pc}

0800c528 <strtol>:
 800c528:	b510      	push	{r4, lr}
 800c52a:	4c04      	ldr	r4, [pc, #16]	; (800c53c <strtol+0x14>)
 800c52c:	0013      	movs	r3, r2
 800c52e:	000a      	movs	r2, r1
 800c530:	0001      	movs	r1, r0
 800c532:	6820      	ldr	r0, [r4, #0]
 800c534:	f7ff ff6e 	bl	800c414 <_strtol_l.constprop.0>
 800c538:	bd10      	pop	{r4, pc}
 800c53a:	46c0      	nop			; (mov r8, r8)
 800c53c:	200006d8 	.word	0x200006d8

0800c540 <std>:
 800c540:	2300      	movs	r3, #0
 800c542:	b510      	push	{r4, lr}
 800c544:	0004      	movs	r4, r0
 800c546:	6003      	str	r3, [r0, #0]
 800c548:	6043      	str	r3, [r0, #4]
 800c54a:	6083      	str	r3, [r0, #8]
 800c54c:	8181      	strh	r1, [r0, #12]
 800c54e:	6643      	str	r3, [r0, #100]	; 0x64
 800c550:	81c2      	strh	r2, [r0, #14]
 800c552:	6103      	str	r3, [r0, #16]
 800c554:	6143      	str	r3, [r0, #20]
 800c556:	6183      	str	r3, [r0, #24]
 800c558:	0019      	movs	r1, r3
 800c55a:	2208      	movs	r2, #8
 800c55c:	305c      	adds	r0, #92	; 0x5c
 800c55e:	f000 f97d 	bl	800c85c <memset>
 800c562:	4b0b      	ldr	r3, [pc, #44]	; (800c590 <std+0x50>)
 800c564:	61e4      	str	r4, [r4, #28]
 800c566:	6223      	str	r3, [r4, #32]
 800c568:	4b0a      	ldr	r3, [pc, #40]	; (800c594 <std+0x54>)
 800c56a:	6263      	str	r3, [r4, #36]	; 0x24
 800c56c:	4b0a      	ldr	r3, [pc, #40]	; (800c598 <std+0x58>)
 800c56e:	62a3      	str	r3, [r4, #40]	; 0x28
 800c570:	4b0a      	ldr	r3, [pc, #40]	; (800c59c <std+0x5c>)
 800c572:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c574:	4b0a      	ldr	r3, [pc, #40]	; (800c5a0 <std+0x60>)
 800c576:	429c      	cmp	r4, r3
 800c578:	d005      	beq.n	800c586 <std+0x46>
 800c57a:	4b0a      	ldr	r3, [pc, #40]	; (800c5a4 <std+0x64>)
 800c57c:	429c      	cmp	r4, r3
 800c57e:	d002      	beq.n	800c586 <std+0x46>
 800c580:	4b09      	ldr	r3, [pc, #36]	; (800c5a8 <std+0x68>)
 800c582:	429c      	cmp	r4, r3
 800c584:	d103      	bne.n	800c58e <std+0x4e>
 800c586:	0020      	movs	r0, r4
 800c588:	3058      	adds	r0, #88	; 0x58
 800c58a:	f000 fa3d 	bl	800ca08 <__retarget_lock_init_recursive>
 800c58e:	bd10      	pop	{r4, pc}
 800c590:	0800c7c1 	.word	0x0800c7c1
 800c594:	0800c7ed 	.word	0x0800c7ed
 800c598:	0800c825 	.word	0x0800c825
 800c59c:	0800c851 	.word	0x0800c851
 800c5a0:	20000bf4 	.word	0x20000bf4
 800c5a4:	20000c5c 	.word	0x20000c5c
 800c5a8:	20000cc4 	.word	0x20000cc4

0800c5ac <stdio_exit_handler>:
 800c5ac:	b510      	push	{r4, lr}
 800c5ae:	4a03      	ldr	r2, [pc, #12]	; (800c5bc <stdio_exit_handler+0x10>)
 800c5b0:	4903      	ldr	r1, [pc, #12]	; (800c5c0 <stdio_exit_handler+0x14>)
 800c5b2:	4804      	ldr	r0, [pc, #16]	; (800c5c4 <stdio_exit_handler+0x18>)
 800c5b4:	f000 f86c 	bl	800c690 <_fwalk_sglue>
 800c5b8:	bd10      	pop	{r4, pc}
 800c5ba:	46c0      	nop			; (mov r8, r8)
 800c5bc:	20000440 	.word	0x20000440
 800c5c0:	08010509 	.word	0x08010509
 800c5c4:	200005b8 	.word	0x200005b8

0800c5c8 <cleanup_stdio>:
 800c5c8:	6841      	ldr	r1, [r0, #4]
 800c5ca:	4b0b      	ldr	r3, [pc, #44]	; (800c5f8 <cleanup_stdio+0x30>)
 800c5cc:	b510      	push	{r4, lr}
 800c5ce:	0004      	movs	r4, r0
 800c5d0:	4299      	cmp	r1, r3
 800c5d2:	d001      	beq.n	800c5d8 <cleanup_stdio+0x10>
 800c5d4:	f003 ff98 	bl	8010508 <_fclose_r>
 800c5d8:	68a1      	ldr	r1, [r4, #8]
 800c5da:	4b08      	ldr	r3, [pc, #32]	; (800c5fc <cleanup_stdio+0x34>)
 800c5dc:	4299      	cmp	r1, r3
 800c5de:	d002      	beq.n	800c5e6 <cleanup_stdio+0x1e>
 800c5e0:	0020      	movs	r0, r4
 800c5e2:	f003 ff91 	bl	8010508 <_fclose_r>
 800c5e6:	68e1      	ldr	r1, [r4, #12]
 800c5e8:	4b05      	ldr	r3, [pc, #20]	; (800c600 <cleanup_stdio+0x38>)
 800c5ea:	4299      	cmp	r1, r3
 800c5ec:	d002      	beq.n	800c5f4 <cleanup_stdio+0x2c>
 800c5ee:	0020      	movs	r0, r4
 800c5f0:	f003 ff8a 	bl	8010508 <_fclose_r>
 800c5f4:	bd10      	pop	{r4, pc}
 800c5f6:	46c0      	nop			; (mov r8, r8)
 800c5f8:	20000bf4 	.word	0x20000bf4
 800c5fc:	20000c5c 	.word	0x20000c5c
 800c600:	20000cc4 	.word	0x20000cc4

0800c604 <global_stdio_init.part.0>:
 800c604:	b510      	push	{r4, lr}
 800c606:	4b09      	ldr	r3, [pc, #36]	; (800c62c <global_stdio_init.part.0+0x28>)
 800c608:	4a09      	ldr	r2, [pc, #36]	; (800c630 <global_stdio_init.part.0+0x2c>)
 800c60a:	2104      	movs	r1, #4
 800c60c:	601a      	str	r2, [r3, #0]
 800c60e:	4809      	ldr	r0, [pc, #36]	; (800c634 <global_stdio_init.part.0+0x30>)
 800c610:	2200      	movs	r2, #0
 800c612:	f7ff ff95 	bl	800c540 <std>
 800c616:	2201      	movs	r2, #1
 800c618:	2109      	movs	r1, #9
 800c61a:	4807      	ldr	r0, [pc, #28]	; (800c638 <global_stdio_init.part.0+0x34>)
 800c61c:	f7ff ff90 	bl	800c540 <std>
 800c620:	2202      	movs	r2, #2
 800c622:	2112      	movs	r1, #18
 800c624:	4805      	ldr	r0, [pc, #20]	; (800c63c <global_stdio_init.part.0+0x38>)
 800c626:	f7ff ff8b 	bl	800c540 <std>
 800c62a:	bd10      	pop	{r4, pc}
 800c62c:	20000d2c 	.word	0x20000d2c
 800c630:	0800c5ad 	.word	0x0800c5ad
 800c634:	20000bf4 	.word	0x20000bf4
 800c638:	20000c5c 	.word	0x20000c5c
 800c63c:	20000cc4 	.word	0x20000cc4

0800c640 <__sfp_lock_acquire>:
 800c640:	b510      	push	{r4, lr}
 800c642:	4802      	ldr	r0, [pc, #8]	; (800c64c <__sfp_lock_acquire+0xc>)
 800c644:	f000 f9e2 	bl	800ca0c <__retarget_lock_acquire_recursive>
 800c648:	bd10      	pop	{r4, pc}
 800c64a:	46c0      	nop			; (mov r8, r8)
 800c64c:	20000d36 	.word	0x20000d36

0800c650 <__sfp_lock_release>:
 800c650:	b510      	push	{r4, lr}
 800c652:	4802      	ldr	r0, [pc, #8]	; (800c65c <__sfp_lock_release+0xc>)
 800c654:	f000 f9db 	bl	800ca0e <__retarget_lock_release_recursive>
 800c658:	bd10      	pop	{r4, pc}
 800c65a:	46c0      	nop			; (mov r8, r8)
 800c65c:	20000d36 	.word	0x20000d36

0800c660 <__sinit>:
 800c660:	b510      	push	{r4, lr}
 800c662:	0004      	movs	r4, r0
 800c664:	f7ff ffec 	bl	800c640 <__sfp_lock_acquire>
 800c668:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d002      	beq.n	800c674 <__sinit+0x14>
 800c66e:	f7ff ffef 	bl	800c650 <__sfp_lock_release>
 800c672:	bd10      	pop	{r4, pc}
 800c674:	4b04      	ldr	r3, [pc, #16]	; (800c688 <__sinit+0x28>)
 800c676:	6363      	str	r3, [r4, #52]	; 0x34
 800c678:	4b04      	ldr	r3, [pc, #16]	; (800c68c <__sinit+0x2c>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d1f6      	bne.n	800c66e <__sinit+0xe>
 800c680:	f7ff ffc0 	bl	800c604 <global_stdio_init.part.0>
 800c684:	e7f3      	b.n	800c66e <__sinit+0xe>
 800c686:	46c0      	nop			; (mov r8, r8)
 800c688:	0800c5c9 	.word	0x0800c5c9
 800c68c:	20000d2c 	.word	0x20000d2c

0800c690 <_fwalk_sglue>:
 800c690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c692:	0014      	movs	r4, r2
 800c694:	2600      	movs	r6, #0
 800c696:	9000      	str	r0, [sp, #0]
 800c698:	9101      	str	r1, [sp, #4]
 800c69a:	68a5      	ldr	r5, [r4, #8]
 800c69c:	6867      	ldr	r7, [r4, #4]
 800c69e:	3f01      	subs	r7, #1
 800c6a0:	d504      	bpl.n	800c6ac <_fwalk_sglue+0x1c>
 800c6a2:	6824      	ldr	r4, [r4, #0]
 800c6a4:	2c00      	cmp	r4, #0
 800c6a6:	d1f8      	bne.n	800c69a <_fwalk_sglue+0xa>
 800c6a8:	0030      	movs	r0, r6
 800c6aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c6ac:	89ab      	ldrh	r3, [r5, #12]
 800c6ae:	2b01      	cmp	r3, #1
 800c6b0:	d908      	bls.n	800c6c4 <_fwalk_sglue+0x34>
 800c6b2:	220e      	movs	r2, #14
 800c6b4:	5eab      	ldrsh	r3, [r5, r2]
 800c6b6:	3301      	adds	r3, #1
 800c6b8:	d004      	beq.n	800c6c4 <_fwalk_sglue+0x34>
 800c6ba:	0029      	movs	r1, r5
 800c6bc:	9800      	ldr	r0, [sp, #0]
 800c6be:	9b01      	ldr	r3, [sp, #4]
 800c6c0:	4798      	blx	r3
 800c6c2:	4306      	orrs	r6, r0
 800c6c4:	3568      	adds	r5, #104	; 0x68
 800c6c6:	e7ea      	b.n	800c69e <_fwalk_sglue+0xe>

0800c6c8 <snprintf>:
 800c6c8:	b40c      	push	{r2, r3}
 800c6ca:	b530      	push	{r4, r5, lr}
 800c6cc:	4b17      	ldr	r3, [pc, #92]	; (800c72c <snprintf+0x64>)
 800c6ce:	000c      	movs	r4, r1
 800c6d0:	681d      	ldr	r5, [r3, #0]
 800c6d2:	b09d      	sub	sp, #116	; 0x74
 800c6d4:	2900      	cmp	r1, #0
 800c6d6:	da08      	bge.n	800c6ea <snprintf+0x22>
 800c6d8:	238b      	movs	r3, #139	; 0x8b
 800c6da:	2001      	movs	r0, #1
 800c6dc:	602b      	str	r3, [r5, #0]
 800c6de:	4240      	negs	r0, r0
 800c6e0:	b01d      	add	sp, #116	; 0x74
 800c6e2:	bc30      	pop	{r4, r5}
 800c6e4:	bc08      	pop	{r3}
 800c6e6:	b002      	add	sp, #8
 800c6e8:	4718      	bx	r3
 800c6ea:	2382      	movs	r3, #130	; 0x82
 800c6ec:	466a      	mov	r2, sp
 800c6ee:	009b      	lsls	r3, r3, #2
 800c6f0:	8293      	strh	r3, [r2, #20]
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	9002      	str	r0, [sp, #8]
 800c6f6:	9006      	str	r0, [sp, #24]
 800c6f8:	4299      	cmp	r1, r3
 800c6fa:	d000      	beq.n	800c6fe <snprintf+0x36>
 800c6fc:	1e4b      	subs	r3, r1, #1
 800c6fe:	9304      	str	r3, [sp, #16]
 800c700:	9307      	str	r3, [sp, #28]
 800c702:	2301      	movs	r3, #1
 800c704:	466a      	mov	r2, sp
 800c706:	425b      	negs	r3, r3
 800c708:	82d3      	strh	r3, [r2, #22]
 800c70a:	0028      	movs	r0, r5
 800c70c:	ab21      	add	r3, sp, #132	; 0x84
 800c70e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c710:	a902      	add	r1, sp, #8
 800c712:	9301      	str	r3, [sp, #4]
 800c714:	f001 fa9a 	bl	800dc4c <_svfprintf_r>
 800c718:	1c43      	adds	r3, r0, #1
 800c71a:	da01      	bge.n	800c720 <snprintf+0x58>
 800c71c:	238b      	movs	r3, #139	; 0x8b
 800c71e:	602b      	str	r3, [r5, #0]
 800c720:	2c00      	cmp	r4, #0
 800c722:	d0dd      	beq.n	800c6e0 <snprintf+0x18>
 800c724:	2200      	movs	r2, #0
 800c726:	9b02      	ldr	r3, [sp, #8]
 800c728:	701a      	strb	r2, [r3, #0]
 800c72a:	e7d9      	b.n	800c6e0 <snprintf+0x18>
 800c72c:	200006d8 	.word	0x200006d8

0800c730 <sprintf>:
 800c730:	b40e      	push	{r1, r2, r3}
 800c732:	b500      	push	{lr}
 800c734:	490b      	ldr	r1, [pc, #44]	; (800c764 <sprintf+0x34>)
 800c736:	b09c      	sub	sp, #112	; 0x70
 800c738:	ab1d      	add	r3, sp, #116	; 0x74
 800c73a:	9002      	str	r0, [sp, #8]
 800c73c:	9006      	str	r0, [sp, #24]
 800c73e:	9107      	str	r1, [sp, #28]
 800c740:	9104      	str	r1, [sp, #16]
 800c742:	4809      	ldr	r0, [pc, #36]	; (800c768 <sprintf+0x38>)
 800c744:	4909      	ldr	r1, [pc, #36]	; (800c76c <sprintf+0x3c>)
 800c746:	cb04      	ldmia	r3!, {r2}
 800c748:	9105      	str	r1, [sp, #20]
 800c74a:	6800      	ldr	r0, [r0, #0]
 800c74c:	a902      	add	r1, sp, #8
 800c74e:	9301      	str	r3, [sp, #4]
 800c750:	f001 fa7c 	bl	800dc4c <_svfprintf_r>
 800c754:	2200      	movs	r2, #0
 800c756:	9b02      	ldr	r3, [sp, #8]
 800c758:	701a      	strb	r2, [r3, #0]
 800c75a:	b01c      	add	sp, #112	; 0x70
 800c75c:	bc08      	pop	{r3}
 800c75e:	b003      	add	sp, #12
 800c760:	4718      	bx	r3
 800c762:	46c0      	nop			; (mov r8, r8)
 800c764:	7fffffff 	.word	0x7fffffff
 800c768:	200006d8 	.word	0x200006d8
 800c76c:	ffff0208 	.word	0xffff0208

0800c770 <sscanf>:
 800c770:	b40e      	push	{r1, r2, r3}
 800c772:	b530      	push	{r4, r5, lr}
 800c774:	2381      	movs	r3, #129	; 0x81
 800c776:	b09c      	sub	sp, #112	; 0x70
 800c778:	466a      	mov	r2, sp
 800c77a:	ac1f      	add	r4, sp, #124	; 0x7c
 800c77c:	009b      	lsls	r3, r3, #2
 800c77e:	cc20      	ldmia	r4!, {r5}
 800c780:	8293      	strh	r3, [r2, #20]
 800c782:	9002      	str	r0, [sp, #8]
 800c784:	9006      	str	r0, [sp, #24]
 800c786:	f7f3 fcbd 	bl	8000104 <strlen>
 800c78a:	4b0b      	ldr	r3, [pc, #44]	; (800c7b8 <sscanf+0x48>)
 800c78c:	466a      	mov	r2, sp
 800c78e:	930a      	str	r3, [sp, #40]	; 0x28
 800c790:	2300      	movs	r3, #0
 800c792:	9003      	str	r0, [sp, #12]
 800c794:	9007      	str	r0, [sp, #28]
 800c796:	4809      	ldr	r0, [pc, #36]	; (800c7bc <sscanf+0x4c>)
 800c798:	930e      	str	r3, [sp, #56]	; 0x38
 800c79a:	9313      	str	r3, [sp, #76]	; 0x4c
 800c79c:	3b01      	subs	r3, #1
 800c79e:	82d3      	strh	r3, [r2, #22]
 800c7a0:	a902      	add	r1, sp, #8
 800c7a2:	0023      	movs	r3, r4
 800c7a4:	002a      	movs	r2, r5
 800c7a6:	6800      	ldr	r0, [r0, #0]
 800c7a8:	9401      	str	r4, [sp, #4]
 800c7aa:	f002 fc91 	bl	800f0d0 <__ssvfscanf_r>
 800c7ae:	b01c      	add	sp, #112	; 0x70
 800c7b0:	bc30      	pop	{r4, r5}
 800c7b2:	bc08      	pop	{r3}
 800c7b4:	b003      	add	sp, #12
 800c7b6:	4718      	bx	r3
 800c7b8:	0800c7e9 	.word	0x0800c7e9
 800c7bc:	200006d8 	.word	0x200006d8

0800c7c0 <__sread>:
 800c7c0:	b570      	push	{r4, r5, r6, lr}
 800c7c2:	000c      	movs	r4, r1
 800c7c4:	250e      	movs	r5, #14
 800c7c6:	5f49      	ldrsh	r1, [r1, r5]
 800c7c8:	f000 f8ba 	bl	800c940 <_read_r>
 800c7cc:	2800      	cmp	r0, #0
 800c7ce:	db03      	blt.n	800c7d8 <__sread+0x18>
 800c7d0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c7d2:	181b      	adds	r3, r3, r0
 800c7d4:	6523      	str	r3, [r4, #80]	; 0x50
 800c7d6:	bd70      	pop	{r4, r5, r6, pc}
 800c7d8:	89a3      	ldrh	r3, [r4, #12]
 800c7da:	4a02      	ldr	r2, [pc, #8]	; (800c7e4 <__sread+0x24>)
 800c7dc:	4013      	ands	r3, r2
 800c7de:	81a3      	strh	r3, [r4, #12]
 800c7e0:	e7f9      	b.n	800c7d6 <__sread+0x16>
 800c7e2:	46c0      	nop			; (mov r8, r8)
 800c7e4:	ffffefff 	.word	0xffffefff

0800c7e8 <__seofread>:
 800c7e8:	2000      	movs	r0, #0
 800c7ea:	4770      	bx	lr

0800c7ec <__swrite>:
 800c7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ee:	001f      	movs	r7, r3
 800c7f0:	898b      	ldrh	r3, [r1, #12]
 800c7f2:	0005      	movs	r5, r0
 800c7f4:	000c      	movs	r4, r1
 800c7f6:	0016      	movs	r6, r2
 800c7f8:	05db      	lsls	r3, r3, #23
 800c7fa:	d505      	bpl.n	800c808 <__swrite+0x1c>
 800c7fc:	230e      	movs	r3, #14
 800c7fe:	5ec9      	ldrsh	r1, [r1, r3]
 800c800:	2200      	movs	r2, #0
 800c802:	2302      	movs	r3, #2
 800c804:	f000 f888 	bl	800c918 <_lseek_r>
 800c808:	89a3      	ldrh	r3, [r4, #12]
 800c80a:	4a05      	ldr	r2, [pc, #20]	; (800c820 <__swrite+0x34>)
 800c80c:	0028      	movs	r0, r5
 800c80e:	4013      	ands	r3, r2
 800c810:	81a3      	strh	r3, [r4, #12]
 800c812:	0032      	movs	r2, r6
 800c814:	230e      	movs	r3, #14
 800c816:	5ee1      	ldrsh	r1, [r4, r3]
 800c818:	003b      	movs	r3, r7
 800c81a:	f000 f8b7 	bl	800c98c <_write_r>
 800c81e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c820:	ffffefff 	.word	0xffffefff

0800c824 <__sseek>:
 800c824:	b570      	push	{r4, r5, r6, lr}
 800c826:	000c      	movs	r4, r1
 800c828:	250e      	movs	r5, #14
 800c82a:	5f49      	ldrsh	r1, [r1, r5]
 800c82c:	f000 f874 	bl	800c918 <_lseek_r>
 800c830:	89a3      	ldrh	r3, [r4, #12]
 800c832:	1c42      	adds	r2, r0, #1
 800c834:	d103      	bne.n	800c83e <__sseek+0x1a>
 800c836:	4a05      	ldr	r2, [pc, #20]	; (800c84c <__sseek+0x28>)
 800c838:	4013      	ands	r3, r2
 800c83a:	81a3      	strh	r3, [r4, #12]
 800c83c:	bd70      	pop	{r4, r5, r6, pc}
 800c83e:	2280      	movs	r2, #128	; 0x80
 800c840:	0152      	lsls	r2, r2, #5
 800c842:	4313      	orrs	r3, r2
 800c844:	81a3      	strh	r3, [r4, #12]
 800c846:	6520      	str	r0, [r4, #80]	; 0x50
 800c848:	e7f8      	b.n	800c83c <__sseek+0x18>
 800c84a:	46c0      	nop			; (mov r8, r8)
 800c84c:	ffffefff 	.word	0xffffefff

0800c850 <__sclose>:
 800c850:	b510      	push	{r4, lr}
 800c852:	230e      	movs	r3, #14
 800c854:	5ec9      	ldrsh	r1, [r1, r3]
 800c856:	f000 f84d 	bl	800c8f4 <_close_r>
 800c85a:	bd10      	pop	{r4, pc}

0800c85c <memset>:
 800c85c:	0003      	movs	r3, r0
 800c85e:	1882      	adds	r2, r0, r2
 800c860:	4293      	cmp	r3, r2
 800c862:	d100      	bne.n	800c866 <memset+0xa>
 800c864:	4770      	bx	lr
 800c866:	7019      	strb	r1, [r3, #0]
 800c868:	3301      	adds	r3, #1
 800c86a:	e7f9      	b.n	800c860 <memset+0x4>

0800c86c <strncmp>:
 800c86c:	b530      	push	{r4, r5, lr}
 800c86e:	0005      	movs	r5, r0
 800c870:	1e10      	subs	r0, r2, #0
 800c872:	d00b      	beq.n	800c88c <strncmp+0x20>
 800c874:	2400      	movs	r4, #0
 800c876:	3a01      	subs	r2, #1
 800c878:	5d2b      	ldrb	r3, [r5, r4]
 800c87a:	5d08      	ldrb	r0, [r1, r4]
 800c87c:	4283      	cmp	r3, r0
 800c87e:	d104      	bne.n	800c88a <strncmp+0x1e>
 800c880:	42a2      	cmp	r2, r4
 800c882:	d002      	beq.n	800c88a <strncmp+0x1e>
 800c884:	3401      	adds	r4, #1
 800c886:	2b00      	cmp	r3, #0
 800c888:	d1f6      	bne.n	800c878 <strncmp+0xc>
 800c88a:	1a18      	subs	r0, r3, r0
 800c88c:	bd30      	pop	{r4, r5, pc}

0800c88e <strncpy>:
 800c88e:	0003      	movs	r3, r0
 800c890:	b530      	push	{r4, r5, lr}
 800c892:	001d      	movs	r5, r3
 800c894:	2a00      	cmp	r2, #0
 800c896:	d006      	beq.n	800c8a6 <strncpy+0x18>
 800c898:	780c      	ldrb	r4, [r1, #0]
 800c89a:	3a01      	subs	r2, #1
 800c89c:	3301      	adds	r3, #1
 800c89e:	702c      	strb	r4, [r5, #0]
 800c8a0:	3101      	adds	r1, #1
 800c8a2:	2c00      	cmp	r4, #0
 800c8a4:	d1f5      	bne.n	800c892 <strncpy+0x4>
 800c8a6:	2100      	movs	r1, #0
 800c8a8:	189a      	adds	r2, r3, r2
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	d100      	bne.n	800c8b0 <strncpy+0x22>
 800c8ae:	bd30      	pop	{r4, r5, pc}
 800c8b0:	7019      	strb	r1, [r3, #0]
 800c8b2:	3301      	adds	r3, #1
 800c8b4:	e7f9      	b.n	800c8aa <strncpy+0x1c>

0800c8b6 <strstr>:
 800c8b6:	780a      	ldrb	r2, [r1, #0]
 800c8b8:	b530      	push	{r4, r5, lr}
 800c8ba:	2a00      	cmp	r2, #0
 800c8bc:	d10c      	bne.n	800c8d8 <strstr+0x22>
 800c8be:	bd30      	pop	{r4, r5, pc}
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d108      	bne.n	800c8d6 <strstr+0x20>
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	5ccc      	ldrb	r4, [r1, r3]
 800c8c8:	2c00      	cmp	r4, #0
 800c8ca:	d0f8      	beq.n	800c8be <strstr+0x8>
 800c8cc:	5cc5      	ldrb	r5, [r0, r3]
 800c8ce:	42a5      	cmp	r5, r4
 800c8d0:	d101      	bne.n	800c8d6 <strstr+0x20>
 800c8d2:	3301      	adds	r3, #1
 800c8d4:	e7f7      	b.n	800c8c6 <strstr+0x10>
 800c8d6:	3001      	adds	r0, #1
 800c8d8:	7803      	ldrb	r3, [r0, #0]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d1f0      	bne.n	800c8c0 <strstr+0xa>
 800c8de:	0018      	movs	r0, r3
 800c8e0:	e7ed      	b.n	800c8be <strstr+0x8>
	...

0800c8e4 <__locale_mb_cur_max>:
 800c8e4:	2294      	movs	r2, #148	; 0x94
 800c8e6:	4b02      	ldr	r3, [pc, #8]	; (800c8f0 <__locale_mb_cur_max+0xc>)
 800c8e8:	0052      	lsls	r2, r2, #1
 800c8ea:	5c98      	ldrb	r0, [r3, r2]
 800c8ec:	4770      	bx	lr
 800c8ee:	46c0      	nop			; (mov r8, r8)
 800c8f0:	2000044c 	.word	0x2000044c

0800c8f4 <_close_r>:
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	b570      	push	{r4, r5, r6, lr}
 800c8f8:	4d06      	ldr	r5, [pc, #24]	; (800c914 <_close_r+0x20>)
 800c8fa:	0004      	movs	r4, r0
 800c8fc:	0008      	movs	r0, r1
 800c8fe:	602b      	str	r3, [r5, #0]
 800c900:	f7f7 f83b 	bl	800397a <_close>
 800c904:	1c43      	adds	r3, r0, #1
 800c906:	d103      	bne.n	800c910 <_close_r+0x1c>
 800c908:	682b      	ldr	r3, [r5, #0]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d000      	beq.n	800c910 <_close_r+0x1c>
 800c90e:	6023      	str	r3, [r4, #0]
 800c910:	bd70      	pop	{r4, r5, r6, pc}
 800c912:	46c0      	nop			; (mov r8, r8)
 800c914:	20000d30 	.word	0x20000d30

0800c918 <_lseek_r>:
 800c918:	b570      	push	{r4, r5, r6, lr}
 800c91a:	0004      	movs	r4, r0
 800c91c:	0008      	movs	r0, r1
 800c91e:	0011      	movs	r1, r2
 800c920:	001a      	movs	r2, r3
 800c922:	2300      	movs	r3, #0
 800c924:	4d05      	ldr	r5, [pc, #20]	; (800c93c <_lseek_r+0x24>)
 800c926:	602b      	str	r3, [r5, #0]
 800c928:	f7f7 f848 	bl	80039bc <_lseek>
 800c92c:	1c43      	adds	r3, r0, #1
 800c92e:	d103      	bne.n	800c938 <_lseek_r+0x20>
 800c930:	682b      	ldr	r3, [r5, #0]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d000      	beq.n	800c938 <_lseek_r+0x20>
 800c936:	6023      	str	r3, [r4, #0]
 800c938:	bd70      	pop	{r4, r5, r6, pc}
 800c93a:	46c0      	nop			; (mov r8, r8)
 800c93c:	20000d30 	.word	0x20000d30

0800c940 <_read_r>:
 800c940:	b570      	push	{r4, r5, r6, lr}
 800c942:	0004      	movs	r4, r0
 800c944:	0008      	movs	r0, r1
 800c946:	0011      	movs	r1, r2
 800c948:	001a      	movs	r2, r3
 800c94a:	2300      	movs	r3, #0
 800c94c:	4d05      	ldr	r5, [pc, #20]	; (800c964 <_read_r+0x24>)
 800c94e:	602b      	str	r3, [r5, #0]
 800c950:	f7f6 ffda 	bl	8003908 <_read>
 800c954:	1c43      	adds	r3, r0, #1
 800c956:	d103      	bne.n	800c960 <_read_r+0x20>
 800c958:	682b      	ldr	r3, [r5, #0]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d000      	beq.n	800c960 <_read_r+0x20>
 800c95e:	6023      	str	r3, [r4, #0]
 800c960:	bd70      	pop	{r4, r5, r6, pc}
 800c962:	46c0      	nop			; (mov r8, r8)
 800c964:	20000d30 	.word	0x20000d30

0800c968 <_sbrk_r>:
 800c968:	2300      	movs	r3, #0
 800c96a:	b570      	push	{r4, r5, r6, lr}
 800c96c:	4d06      	ldr	r5, [pc, #24]	; (800c988 <_sbrk_r+0x20>)
 800c96e:	0004      	movs	r4, r0
 800c970:	0008      	movs	r0, r1
 800c972:	602b      	str	r3, [r5, #0]
 800c974:	f7f7 f82e 	bl	80039d4 <_sbrk>
 800c978:	1c43      	adds	r3, r0, #1
 800c97a:	d103      	bne.n	800c984 <_sbrk_r+0x1c>
 800c97c:	682b      	ldr	r3, [r5, #0]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d000      	beq.n	800c984 <_sbrk_r+0x1c>
 800c982:	6023      	str	r3, [r4, #0]
 800c984:	bd70      	pop	{r4, r5, r6, pc}
 800c986:	46c0      	nop			; (mov r8, r8)
 800c988:	20000d30 	.word	0x20000d30

0800c98c <_write_r>:
 800c98c:	b570      	push	{r4, r5, r6, lr}
 800c98e:	0004      	movs	r4, r0
 800c990:	0008      	movs	r0, r1
 800c992:	0011      	movs	r1, r2
 800c994:	001a      	movs	r2, r3
 800c996:	2300      	movs	r3, #0
 800c998:	4d05      	ldr	r5, [pc, #20]	; (800c9b0 <_write_r+0x24>)
 800c99a:	602b      	str	r3, [r5, #0]
 800c99c:	f7f6 ffd1 	bl	8003942 <_write>
 800c9a0:	1c43      	adds	r3, r0, #1
 800c9a2:	d103      	bne.n	800c9ac <_write_r+0x20>
 800c9a4:	682b      	ldr	r3, [r5, #0]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d000      	beq.n	800c9ac <_write_r+0x20>
 800c9aa:	6023      	str	r3, [r4, #0]
 800c9ac:	bd70      	pop	{r4, r5, r6, pc}
 800c9ae:	46c0      	nop			; (mov r8, r8)
 800c9b0:	20000d30 	.word	0x20000d30

0800c9b4 <__errno>:
 800c9b4:	4b01      	ldr	r3, [pc, #4]	; (800c9bc <__errno+0x8>)
 800c9b6:	6818      	ldr	r0, [r3, #0]
 800c9b8:	4770      	bx	lr
 800c9ba:	46c0      	nop			; (mov r8, r8)
 800c9bc:	200006d8 	.word	0x200006d8

0800c9c0 <__libc_init_array>:
 800c9c0:	b570      	push	{r4, r5, r6, lr}
 800c9c2:	2600      	movs	r6, #0
 800c9c4:	4c0c      	ldr	r4, [pc, #48]	; (800c9f8 <__libc_init_array+0x38>)
 800c9c6:	4d0d      	ldr	r5, [pc, #52]	; (800c9fc <__libc_init_array+0x3c>)
 800c9c8:	1b64      	subs	r4, r4, r5
 800c9ca:	10a4      	asrs	r4, r4, #2
 800c9cc:	42a6      	cmp	r6, r4
 800c9ce:	d109      	bne.n	800c9e4 <__libc_init_array+0x24>
 800c9d0:	2600      	movs	r6, #0
 800c9d2:	f006 fcc5 	bl	8013360 <_init>
 800c9d6:	4c0a      	ldr	r4, [pc, #40]	; (800ca00 <__libc_init_array+0x40>)
 800c9d8:	4d0a      	ldr	r5, [pc, #40]	; (800ca04 <__libc_init_array+0x44>)
 800c9da:	1b64      	subs	r4, r4, r5
 800c9dc:	10a4      	asrs	r4, r4, #2
 800c9de:	42a6      	cmp	r6, r4
 800c9e0:	d105      	bne.n	800c9ee <__libc_init_array+0x2e>
 800c9e2:	bd70      	pop	{r4, r5, r6, pc}
 800c9e4:	00b3      	lsls	r3, r6, #2
 800c9e6:	58eb      	ldr	r3, [r5, r3]
 800c9e8:	4798      	blx	r3
 800c9ea:	3601      	adds	r6, #1
 800c9ec:	e7ee      	b.n	800c9cc <__libc_init_array+0xc>
 800c9ee:	00b3      	lsls	r3, r6, #2
 800c9f0:	58eb      	ldr	r3, [r5, r3]
 800c9f2:	4798      	blx	r3
 800c9f4:	3601      	adds	r6, #1
 800c9f6:	e7f2      	b.n	800c9de <__libc_init_array+0x1e>
 800c9f8:	0801538c 	.word	0x0801538c
 800c9fc:	0801538c 	.word	0x0801538c
 800ca00:	08015394 	.word	0x08015394
 800ca04:	0801538c 	.word	0x0801538c

0800ca08 <__retarget_lock_init_recursive>:
 800ca08:	4770      	bx	lr

0800ca0a <__retarget_lock_close_recursive>:
 800ca0a:	4770      	bx	lr

0800ca0c <__retarget_lock_acquire_recursive>:
 800ca0c:	4770      	bx	lr

0800ca0e <__retarget_lock_release_recursive>:
 800ca0e:	4770      	bx	lr

0800ca10 <sysconf>:
 800ca10:	2380      	movs	r3, #128	; 0x80
 800ca12:	b510      	push	{r4, lr}
 800ca14:	2808      	cmp	r0, #8
 800ca16:	d004      	beq.n	800ca22 <sysconf+0x12>
 800ca18:	f7ff ffcc 	bl	800c9b4 <__errno>
 800ca1c:	2316      	movs	r3, #22
 800ca1e:	6003      	str	r3, [r0, #0]
 800ca20:	3b17      	subs	r3, #23
 800ca22:	0018      	movs	r0, r3
 800ca24:	bd10      	pop	{r4, pc}

0800ca26 <memcpy>:
 800ca26:	2300      	movs	r3, #0
 800ca28:	b510      	push	{r4, lr}
 800ca2a:	429a      	cmp	r2, r3
 800ca2c:	d100      	bne.n	800ca30 <memcpy+0xa>
 800ca2e:	bd10      	pop	{r4, pc}
 800ca30:	5ccc      	ldrb	r4, [r1, r3]
 800ca32:	54c4      	strb	r4, [r0, r3]
 800ca34:	3301      	adds	r3, #1
 800ca36:	e7f8      	b.n	800ca2a <memcpy+0x4>

0800ca38 <nan>:
 800ca38:	2000      	movs	r0, #0
 800ca3a:	4901      	ldr	r1, [pc, #4]	; (800ca40 <nan+0x8>)
 800ca3c:	4770      	bx	lr
 800ca3e:	46c0      	nop			; (mov r8, r8)
 800ca40:	7ff80000 	.word	0x7ff80000

0800ca44 <nanf>:
 800ca44:	4800      	ldr	r0, [pc, #0]	; (800ca48 <nanf+0x4>)
 800ca46:	4770      	bx	lr
 800ca48:	7fc00000 	.word	0x7fc00000

0800ca4c <register_fini>:
 800ca4c:	4b03      	ldr	r3, [pc, #12]	; (800ca5c <register_fini+0x10>)
 800ca4e:	b510      	push	{r4, lr}
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d002      	beq.n	800ca5a <register_fini+0xe>
 800ca54:	4802      	ldr	r0, [pc, #8]	; (800ca60 <register_fini+0x14>)
 800ca56:	f000 f805 	bl	800ca64 <atexit>
 800ca5a:	bd10      	pop	{r4, pc}
 800ca5c:	00000000 	.word	0x00000000
 800ca60:	080107c1 	.word	0x080107c1

0800ca64 <atexit>:
 800ca64:	2300      	movs	r3, #0
 800ca66:	b510      	push	{r4, lr}
 800ca68:	0001      	movs	r1, r0
 800ca6a:	001a      	movs	r2, r3
 800ca6c:	0018      	movs	r0, r3
 800ca6e:	f003 fef9 	bl	8010864 <__register_exitproc>
 800ca72:	bd10      	pop	{r4, pc}

0800ca74 <_malloc_trim_r>:
 800ca74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca76:	0004      	movs	r4, r0
 800ca78:	2008      	movs	r0, #8
 800ca7a:	000d      	movs	r5, r1
 800ca7c:	f7ff ffc8 	bl	800ca10 <sysconf>
 800ca80:	0006      	movs	r6, r0
 800ca82:	0020      	movs	r0, r4
 800ca84:	f7fe fe7e 	bl	800b784 <__malloc_lock>
 800ca88:	2203      	movs	r2, #3
 800ca8a:	4f21      	ldr	r7, [pc, #132]	; (800cb10 <_malloc_trim_r+0x9c>)
 800ca8c:	0031      	movs	r1, r6
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	4393      	bics	r3, r2
 800ca94:	1b58      	subs	r0, r3, r5
 800ca96:	3811      	subs	r0, #17
 800ca98:	1980      	adds	r0, r0, r6
 800ca9a:	9301      	str	r3, [sp, #4]
 800ca9c:	f7f3 fb4e 	bl	800013c <__udivsi3>
 800caa0:	1e45      	subs	r5, r0, #1
 800caa2:	4375      	muls	r5, r6
 800caa4:	42ae      	cmp	r6, r5
 800caa6:	dd04      	ble.n	800cab2 <_malloc_trim_r+0x3e>
 800caa8:	0020      	movs	r0, r4
 800caaa:	f7fe fe73 	bl	800b794 <__malloc_unlock>
 800caae:	2000      	movs	r0, #0
 800cab0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cab2:	2100      	movs	r1, #0
 800cab4:	0020      	movs	r0, r4
 800cab6:	f7ff ff57 	bl	800c968 <_sbrk_r>
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	9a01      	ldr	r2, [sp, #4]
 800cabe:	189b      	adds	r3, r3, r2
 800cac0:	4298      	cmp	r0, r3
 800cac2:	d1f1      	bne.n	800caa8 <_malloc_trim_r+0x34>
 800cac4:	0020      	movs	r0, r4
 800cac6:	4269      	negs	r1, r5
 800cac8:	f7ff ff4e 	bl	800c968 <_sbrk_r>
 800cacc:	3001      	adds	r0, #1
 800cace:	d110      	bne.n	800caf2 <_malloc_trim_r+0x7e>
 800cad0:	2100      	movs	r1, #0
 800cad2:	0020      	movs	r0, r4
 800cad4:	f7ff ff48 	bl	800c968 <_sbrk_r>
 800cad8:	68ba      	ldr	r2, [r7, #8]
 800cada:	1a81      	subs	r1, r0, r2
 800cadc:	290f      	cmp	r1, #15
 800cade:	dde3      	ble.n	800caa8 <_malloc_trim_r+0x34>
 800cae0:	4d0c      	ldr	r5, [pc, #48]	; (800cb14 <_malloc_trim_r+0xa0>)
 800cae2:	4b0d      	ldr	r3, [pc, #52]	; (800cb18 <_malloc_trim_r+0xa4>)
 800cae4:	682d      	ldr	r5, [r5, #0]
 800cae6:	1b40      	subs	r0, r0, r5
 800cae8:	6018      	str	r0, [r3, #0]
 800caea:	2301      	movs	r3, #1
 800caec:	430b      	orrs	r3, r1
 800caee:	6053      	str	r3, [r2, #4]
 800caf0:	e7da      	b.n	800caa8 <_malloc_trim_r+0x34>
 800caf2:	2601      	movs	r6, #1
 800caf4:	9b01      	ldr	r3, [sp, #4]
 800caf6:	68ba      	ldr	r2, [r7, #8]
 800caf8:	1b5b      	subs	r3, r3, r5
 800cafa:	4333      	orrs	r3, r6
 800cafc:	6053      	str	r3, [r2, #4]
 800cafe:	4a06      	ldr	r2, [pc, #24]	; (800cb18 <_malloc_trim_r+0xa4>)
 800cb00:	0020      	movs	r0, r4
 800cb02:	6813      	ldr	r3, [r2, #0]
 800cb04:	1b5b      	subs	r3, r3, r5
 800cb06:	6013      	str	r3, [r2, #0]
 800cb08:	f7fe fe44 	bl	800b794 <__malloc_unlock>
 800cb0c:	0030      	movs	r0, r6
 800cb0e:	e7cf      	b.n	800cab0 <_malloc_trim_r+0x3c>
 800cb10:	20000030 	.word	0x20000030
 800cb14:	20000438 	.word	0x20000438
 800cb18:	20000bc0 	.word	0x20000bc0

0800cb1c <_free_r>:
 800cb1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb1e:	1e0d      	subs	r5, r1, #0
 800cb20:	9001      	str	r0, [sp, #4]
 800cb22:	d02d      	beq.n	800cb80 <_free_r+0x64>
 800cb24:	f7fe fe2e 	bl	800b784 <__malloc_lock>
 800cb28:	2301      	movs	r3, #1
 800cb2a:	0029      	movs	r1, r5
 800cb2c:	469c      	mov	ip, r3
 800cb2e:	3908      	subs	r1, #8
 800cb30:	684f      	ldr	r7, [r1, #4]
 800cb32:	4662      	mov	r2, ip
 800cb34:	003b      	movs	r3, r7
 800cb36:	4664      	mov	r4, ip
 800cb38:	4393      	bics	r3, r2
 800cb3a:	18c8      	adds	r0, r1, r3
 800cb3c:	6845      	ldr	r5, [r0, #4]
 800cb3e:	3202      	adds	r2, #2
 800cb40:	4395      	bics	r5, r2
 800cb42:	4a4a      	ldr	r2, [pc, #296]	; (800cc6c <_free_r+0x150>)
 800cb44:	4027      	ands	r7, r4
 800cb46:	6896      	ldr	r6, [r2, #8]
 800cb48:	4286      	cmp	r6, r0
 800cb4a:	d11a      	bne.n	800cb82 <_free_r+0x66>
 800cb4c:	195b      	adds	r3, r3, r5
 800cb4e:	2f00      	cmp	r7, #0
 800cb50:	d106      	bne.n	800cb60 <_free_r+0x44>
 800cb52:	6808      	ldr	r0, [r1, #0]
 800cb54:	1a09      	subs	r1, r1, r0
 800cb56:	688d      	ldr	r5, [r1, #8]
 800cb58:	181b      	adds	r3, r3, r0
 800cb5a:	68c8      	ldr	r0, [r1, #12]
 800cb5c:	60e8      	str	r0, [r5, #12]
 800cb5e:	6085      	str	r5, [r0, #8]
 800cb60:	2001      	movs	r0, #1
 800cb62:	4318      	orrs	r0, r3
 800cb64:	6048      	str	r0, [r1, #4]
 800cb66:	6091      	str	r1, [r2, #8]
 800cb68:	4a41      	ldr	r2, [pc, #260]	; (800cc70 <_free_r+0x154>)
 800cb6a:	6812      	ldr	r2, [r2, #0]
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d804      	bhi.n	800cb7a <_free_r+0x5e>
 800cb70:	4b40      	ldr	r3, [pc, #256]	; (800cc74 <_free_r+0x158>)
 800cb72:	9801      	ldr	r0, [sp, #4]
 800cb74:	6819      	ldr	r1, [r3, #0]
 800cb76:	f7ff ff7d 	bl	800ca74 <_malloc_trim_r>
 800cb7a:	9801      	ldr	r0, [sp, #4]
 800cb7c:	f7fe fe0a 	bl	800b794 <__malloc_unlock>
 800cb80:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800cb82:	2600      	movs	r6, #0
 800cb84:	6045      	str	r5, [r0, #4]
 800cb86:	42b7      	cmp	r7, r6
 800cb88:	d109      	bne.n	800cb9e <_free_r+0x82>
 800cb8a:	680f      	ldr	r7, [r1, #0]
 800cb8c:	4c3a      	ldr	r4, [pc, #232]	; (800cc78 <_free_r+0x15c>)
 800cb8e:	1bc9      	subs	r1, r1, r7
 800cb90:	19db      	adds	r3, r3, r7
 800cb92:	688f      	ldr	r7, [r1, #8]
 800cb94:	42a7      	cmp	r7, r4
 800cb96:	d02c      	beq.n	800cbf2 <_free_r+0xd6>
 800cb98:	68cc      	ldr	r4, [r1, #12]
 800cb9a:	60fc      	str	r4, [r7, #12]
 800cb9c:	60a7      	str	r7, [r4, #8]
 800cb9e:	1947      	adds	r7, r0, r5
 800cba0:	687c      	ldr	r4, [r7, #4]
 800cba2:	2701      	movs	r7, #1
 800cba4:	423c      	tst	r4, r7
 800cba6:	d10b      	bne.n	800cbc0 <_free_r+0xa4>
 800cba8:	195b      	adds	r3, r3, r5
 800cbaa:	6885      	ldr	r5, [r0, #8]
 800cbac:	2e00      	cmp	r6, #0
 800cbae:	d122      	bne.n	800cbf6 <_free_r+0xda>
 800cbb0:	4c31      	ldr	r4, [pc, #196]	; (800cc78 <_free_r+0x15c>)
 800cbb2:	42a5      	cmp	r5, r4
 800cbb4:	d11f      	bne.n	800cbf6 <_free_r+0xda>
 800cbb6:	003e      	movs	r6, r7
 800cbb8:	6151      	str	r1, [r2, #20]
 800cbba:	6111      	str	r1, [r2, #16]
 800cbbc:	60cd      	str	r5, [r1, #12]
 800cbbe:	608d      	str	r5, [r1, #8]
 800cbc0:	2501      	movs	r5, #1
 800cbc2:	0028      	movs	r0, r5
 800cbc4:	4318      	orrs	r0, r3
 800cbc6:	6048      	str	r0, [r1, #4]
 800cbc8:	50cb      	str	r3, [r1, r3]
 800cbca:	2e00      	cmp	r6, #0
 800cbcc:	d1d5      	bne.n	800cb7a <_free_r+0x5e>
 800cbce:	2080      	movs	r0, #128	; 0x80
 800cbd0:	0080      	lsls	r0, r0, #2
 800cbd2:	4283      	cmp	r3, r0
 800cbd4:	d213      	bcs.n	800cbfe <_free_r+0xe2>
 800cbd6:	08d8      	lsrs	r0, r3, #3
 800cbd8:	095b      	lsrs	r3, r3, #5
 800cbda:	409d      	lsls	r5, r3
 800cbdc:	6853      	ldr	r3, [r2, #4]
 800cbde:	431d      	orrs	r5, r3
 800cbe0:	00c3      	lsls	r3, r0, #3
 800cbe2:	189b      	adds	r3, r3, r2
 800cbe4:	6055      	str	r5, [r2, #4]
 800cbe6:	689a      	ldr	r2, [r3, #8]
 800cbe8:	60cb      	str	r3, [r1, #12]
 800cbea:	608a      	str	r2, [r1, #8]
 800cbec:	6099      	str	r1, [r3, #8]
 800cbee:	60d1      	str	r1, [r2, #12]
 800cbf0:	e7c3      	b.n	800cb7a <_free_r+0x5e>
 800cbf2:	4666      	mov	r6, ip
 800cbf4:	e7d3      	b.n	800cb9e <_free_r+0x82>
 800cbf6:	68c0      	ldr	r0, [r0, #12]
 800cbf8:	60e8      	str	r0, [r5, #12]
 800cbfa:	6085      	str	r5, [r0, #8]
 800cbfc:	e7e0      	b.n	800cbc0 <_free_r+0xa4>
 800cbfe:	0a5d      	lsrs	r5, r3, #9
 800cc00:	2d04      	cmp	r5, #4
 800cc02:	d812      	bhi.n	800cc2a <_free_r+0x10e>
 800cc04:	0998      	lsrs	r0, r3, #6
 800cc06:	3038      	adds	r0, #56	; 0x38
 800cc08:	00c6      	lsls	r6, r0, #3
 800cc0a:	18b6      	adds	r6, r6, r2
 800cc0c:	68b5      	ldr	r5, [r6, #8]
 800cc0e:	2703      	movs	r7, #3
 800cc10:	42ae      	cmp	r6, r5
 800cc12:	d125      	bne.n	800cc60 <_free_r+0x144>
 800cc14:	2301      	movs	r3, #1
 800cc16:	1080      	asrs	r0, r0, #2
 800cc18:	4083      	lsls	r3, r0
 800cc1a:	6850      	ldr	r0, [r2, #4]
 800cc1c:	4303      	orrs	r3, r0
 800cc1e:	6053      	str	r3, [r2, #4]
 800cc20:	60ce      	str	r6, [r1, #12]
 800cc22:	608d      	str	r5, [r1, #8]
 800cc24:	60b1      	str	r1, [r6, #8]
 800cc26:	60e9      	str	r1, [r5, #12]
 800cc28:	e7a7      	b.n	800cb7a <_free_r+0x5e>
 800cc2a:	2d14      	cmp	r5, #20
 800cc2c:	d802      	bhi.n	800cc34 <_free_r+0x118>
 800cc2e:	0028      	movs	r0, r5
 800cc30:	305b      	adds	r0, #91	; 0x5b
 800cc32:	e7e9      	b.n	800cc08 <_free_r+0xec>
 800cc34:	2d54      	cmp	r5, #84	; 0x54
 800cc36:	d802      	bhi.n	800cc3e <_free_r+0x122>
 800cc38:	0b18      	lsrs	r0, r3, #12
 800cc3a:	306e      	adds	r0, #110	; 0x6e
 800cc3c:	e7e4      	b.n	800cc08 <_free_r+0xec>
 800cc3e:	20aa      	movs	r0, #170	; 0xaa
 800cc40:	0040      	lsls	r0, r0, #1
 800cc42:	4285      	cmp	r5, r0
 800cc44:	d802      	bhi.n	800cc4c <_free_r+0x130>
 800cc46:	0bd8      	lsrs	r0, r3, #15
 800cc48:	3077      	adds	r0, #119	; 0x77
 800cc4a:	e7dd      	b.n	800cc08 <_free_r+0xec>
 800cc4c:	4e0b      	ldr	r6, [pc, #44]	; (800cc7c <_free_r+0x160>)
 800cc4e:	207e      	movs	r0, #126	; 0x7e
 800cc50:	42b5      	cmp	r5, r6
 800cc52:	d8d9      	bhi.n	800cc08 <_free_r+0xec>
 800cc54:	0c98      	lsrs	r0, r3, #18
 800cc56:	307c      	adds	r0, #124	; 0x7c
 800cc58:	e7d6      	b.n	800cc08 <_free_r+0xec>
 800cc5a:	68ad      	ldr	r5, [r5, #8]
 800cc5c:	42ae      	cmp	r6, r5
 800cc5e:	d003      	beq.n	800cc68 <_free_r+0x14c>
 800cc60:	686a      	ldr	r2, [r5, #4]
 800cc62:	43ba      	bics	r2, r7
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d8f8      	bhi.n	800cc5a <_free_r+0x13e>
 800cc68:	68ee      	ldr	r6, [r5, #12]
 800cc6a:	e7d9      	b.n	800cc20 <_free_r+0x104>
 800cc6c:	20000030 	.word	0x20000030
 800cc70:	2000043c 	.word	0x2000043c
 800cc74:	20000bf0 	.word	0x20000bf0
 800cc78:	20000038 	.word	0x20000038
 800cc7c:	00000554 	.word	0x00000554

0800cc80 <rshift>:
 800cc80:	0002      	movs	r2, r0
 800cc82:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc84:	6904      	ldr	r4, [r0, #16]
 800cc86:	114b      	asrs	r3, r1, #5
 800cc88:	b085      	sub	sp, #20
 800cc8a:	3214      	adds	r2, #20
 800cc8c:	9302      	str	r3, [sp, #8]
 800cc8e:	114d      	asrs	r5, r1, #5
 800cc90:	0013      	movs	r3, r2
 800cc92:	42ac      	cmp	r4, r5
 800cc94:	dd32      	ble.n	800ccfc <rshift+0x7c>
 800cc96:	261f      	movs	r6, #31
 800cc98:	000f      	movs	r7, r1
 800cc9a:	114b      	asrs	r3, r1, #5
 800cc9c:	009b      	lsls	r3, r3, #2
 800cc9e:	00a5      	lsls	r5, r4, #2
 800cca0:	18d3      	adds	r3, r2, r3
 800cca2:	4037      	ands	r7, r6
 800cca4:	1955      	adds	r5, r2, r5
 800cca6:	9300      	str	r3, [sp, #0]
 800cca8:	9701      	str	r7, [sp, #4]
 800ccaa:	4231      	tst	r1, r6
 800ccac:	d10d      	bne.n	800ccca <rshift+0x4a>
 800ccae:	0016      	movs	r6, r2
 800ccb0:	0019      	movs	r1, r3
 800ccb2:	428d      	cmp	r5, r1
 800ccb4:	d836      	bhi.n	800cd24 <rshift+0xa4>
 800ccb6:	9900      	ldr	r1, [sp, #0]
 800ccb8:	2300      	movs	r3, #0
 800ccba:	3903      	subs	r1, #3
 800ccbc:	428d      	cmp	r5, r1
 800ccbe:	d302      	bcc.n	800ccc6 <rshift+0x46>
 800ccc0:	9b02      	ldr	r3, [sp, #8]
 800ccc2:	1ae4      	subs	r4, r4, r3
 800ccc4:	00a3      	lsls	r3, r4, #2
 800ccc6:	18d3      	adds	r3, r2, r3
 800ccc8:	e018      	b.n	800ccfc <rshift+0x7c>
 800ccca:	2120      	movs	r1, #32
 800cccc:	9e01      	ldr	r6, [sp, #4]
 800ccce:	9f01      	ldr	r7, [sp, #4]
 800ccd0:	1b89      	subs	r1, r1, r6
 800ccd2:	9e00      	ldr	r6, [sp, #0]
 800ccd4:	9103      	str	r1, [sp, #12]
 800ccd6:	ce02      	ldmia	r6!, {r1}
 800ccd8:	4694      	mov	ip, r2
 800ccda:	40f9      	lsrs	r1, r7
 800ccdc:	42b5      	cmp	r5, r6
 800ccde:	d816      	bhi.n	800cd0e <rshift+0x8e>
 800cce0:	9e00      	ldr	r6, [sp, #0]
 800cce2:	2300      	movs	r3, #0
 800cce4:	3601      	adds	r6, #1
 800cce6:	42b5      	cmp	r5, r6
 800cce8:	d303      	bcc.n	800ccf2 <rshift+0x72>
 800ccea:	9b02      	ldr	r3, [sp, #8]
 800ccec:	1ae3      	subs	r3, r4, r3
 800ccee:	009b      	lsls	r3, r3, #2
 800ccf0:	3b04      	subs	r3, #4
 800ccf2:	18d3      	adds	r3, r2, r3
 800ccf4:	6019      	str	r1, [r3, #0]
 800ccf6:	2900      	cmp	r1, #0
 800ccf8:	d000      	beq.n	800ccfc <rshift+0x7c>
 800ccfa:	3304      	adds	r3, #4
 800ccfc:	1a99      	subs	r1, r3, r2
 800ccfe:	1089      	asrs	r1, r1, #2
 800cd00:	6101      	str	r1, [r0, #16]
 800cd02:	4293      	cmp	r3, r2
 800cd04:	d101      	bne.n	800cd0a <rshift+0x8a>
 800cd06:	2300      	movs	r3, #0
 800cd08:	6143      	str	r3, [r0, #20]
 800cd0a:	b005      	add	sp, #20
 800cd0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd0e:	6837      	ldr	r7, [r6, #0]
 800cd10:	9b03      	ldr	r3, [sp, #12]
 800cd12:	409f      	lsls	r7, r3
 800cd14:	430f      	orrs	r7, r1
 800cd16:	4661      	mov	r1, ip
 800cd18:	c180      	stmia	r1!, {r7}
 800cd1a:	468c      	mov	ip, r1
 800cd1c:	9b01      	ldr	r3, [sp, #4]
 800cd1e:	ce02      	ldmia	r6!, {r1}
 800cd20:	40d9      	lsrs	r1, r3
 800cd22:	e7db      	b.n	800ccdc <rshift+0x5c>
 800cd24:	c980      	ldmia	r1!, {r7}
 800cd26:	c680      	stmia	r6!, {r7}
 800cd28:	e7c3      	b.n	800ccb2 <rshift+0x32>

0800cd2a <__hexdig_fun>:
 800cd2a:	0002      	movs	r2, r0
 800cd2c:	3a30      	subs	r2, #48	; 0x30
 800cd2e:	0003      	movs	r3, r0
 800cd30:	2a09      	cmp	r2, #9
 800cd32:	d802      	bhi.n	800cd3a <__hexdig_fun+0x10>
 800cd34:	3b20      	subs	r3, #32
 800cd36:	b2d8      	uxtb	r0, r3
 800cd38:	4770      	bx	lr
 800cd3a:	0002      	movs	r2, r0
 800cd3c:	3a61      	subs	r2, #97	; 0x61
 800cd3e:	2a05      	cmp	r2, #5
 800cd40:	d801      	bhi.n	800cd46 <__hexdig_fun+0x1c>
 800cd42:	3b47      	subs	r3, #71	; 0x47
 800cd44:	e7f7      	b.n	800cd36 <__hexdig_fun+0xc>
 800cd46:	001a      	movs	r2, r3
 800cd48:	3a41      	subs	r2, #65	; 0x41
 800cd4a:	2000      	movs	r0, #0
 800cd4c:	2a05      	cmp	r2, #5
 800cd4e:	d8f3      	bhi.n	800cd38 <__hexdig_fun+0xe>
 800cd50:	3b27      	subs	r3, #39	; 0x27
 800cd52:	e7f0      	b.n	800cd36 <__hexdig_fun+0xc>

0800cd54 <__gethex>:
 800cd54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd56:	b089      	sub	sp, #36	; 0x24
 800cd58:	9307      	str	r3, [sp, #28]
 800cd5a:	2302      	movs	r3, #2
 800cd5c:	9201      	str	r2, [sp, #4]
 800cd5e:	680a      	ldr	r2, [r1, #0]
 800cd60:	425b      	negs	r3, r3
 800cd62:	9003      	str	r0, [sp, #12]
 800cd64:	9106      	str	r1, [sp, #24]
 800cd66:	1c96      	adds	r6, r2, #2
 800cd68:	1a9b      	subs	r3, r3, r2
 800cd6a:	199a      	adds	r2, r3, r6
 800cd6c:	9600      	str	r6, [sp, #0]
 800cd6e:	9205      	str	r2, [sp, #20]
 800cd70:	9a00      	ldr	r2, [sp, #0]
 800cd72:	3601      	adds	r6, #1
 800cd74:	7810      	ldrb	r0, [r2, #0]
 800cd76:	2830      	cmp	r0, #48	; 0x30
 800cd78:	d0f7      	beq.n	800cd6a <__gethex+0x16>
 800cd7a:	f7ff ffd6 	bl	800cd2a <__hexdig_fun>
 800cd7e:	2300      	movs	r3, #0
 800cd80:	001d      	movs	r5, r3
 800cd82:	9302      	str	r3, [sp, #8]
 800cd84:	4298      	cmp	r0, r3
 800cd86:	d11d      	bne.n	800cdc4 <__gethex+0x70>
 800cd88:	2201      	movs	r2, #1
 800cd8a:	49a6      	ldr	r1, [pc, #664]	; (800d024 <__gethex+0x2d0>)
 800cd8c:	9800      	ldr	r0, [sp, #0]
 800cd8e:	f7ff fd6d 	bl	800c86c <strncmp>
 800cd92:	0007      	movs	r7, r0
 800cd94:	42a8      	cmp	r0, r5
 800cd96:	d169      	bne.n	800ce6c <__gethex+0x118>
 800cd98:	9b00      	ldr	r3, [sp, #0]
 800cd9a:	0034      	movs	r4, r6
 800cd9c:	7858      	ldrb	r0, [r3, #1]
 800cd9e:	f7ff ffc4 	bl	800cd2a <__hexdig_fun>
 800cda2:	2301      	movs	r3, #1
 800cda4:	9302      	str	r3, [sp, #8]
 800cda6:	42a8      	cmp	r0, r5
 800cda8:	d02f      	beq.n	800ce0a <__gethex+0xb6>
 800cdaa:	9600      	str	r6, [sp, #0]
 800cdac:	9b00      	ldr	r3, [sp, #0]
 800cdae:	7818      	ldrb	r0, [r3, #0]
 800cdb0:	2830      	cmp	r0, #48	; 0x30
 800cdb2:	d009      	beq.n	800cdc8 <__gethex+0x74>
 800cdb4:	f7ff ffb9 	bl	800cd2a <__hexdig_fun>
 800cdb8:	4242      	negs	r2, r0
 800cdba:	4142      	adcs	r2, r0
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	0035      	movs	r5, r6
 800cdc0:	9202      	str	r2, [sp, #8]
 800cdc2:	9305      	str	r3, [sp, #20]
 800cdc4:	9c00      	ldr	r4, [sp, #0]
 800cdc6:	e004      	b.n	800cdd2 <__gethex+0x7e>
 800cdc8:	9b00      	ldr	r3, [sp, #0]
 800cdca:	3301      	adds	r3, #1
 800cdcc:	9300      	str	r3, [sp, #0]
 800cdce:	e7ed      	b.n	800cdac <__gethex+0x58>
 800cdd0:	3401      	adds	r4, #1
 800cdd2:	7820      	ldrb	r0, [r4, #0]
 800cdd4:	f7ff ffa9 	bl	800cd2a <__hexdig_fun>
 800cdd8:	1e07      	subs	r7, r0, #0
 800cdda:	d1f9      	bne.n	800cdd0 <__gethex+0x7c>
 800cddc:	2201      	movs	r2, #1
 800cdde:	0020      	movs	r0, r4
 800cde0:	4990      	ldr	r1, [pc, #576]	; (800d024 <__gethex+0x2d0>)
 800cde2:	f7ff fd43 	bl	800c86c <strncmp>
 800cde6:	2800      	cmp	r0, #0
 800cde8:	d10d      	bne.n	800ce06 <__gethex+0xb2>
 800cdea:	2d00      	cmp	r5, #0
 800cdec:	d106      	bne.n	800cdfc <__gethex+0xa8>
 800cdee:	3401      	adds	r4, #1
 800cdf0:	0025      	movs	r5, r4
 800cdf2:	7820      	ldrb	r0, [r4, #0]
 800cdf4:	f7ff ff99 	bl	800cd2a <__hexdig_fun>
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	d102      	bne.n	800ce02 <__gethex+0xae>
 800cdfc:	1b2d      	subs	r5, r5, r4
 800cdfe:	00af      	lsls	r7, r5, #2
 800ce00:	e003      	b.n	800ce0a <__gethex+0xb6>
 800ce02:	3401      	adds	r4, #1
 800ce04:	e7f5      	b.n	800cdf2 <__gethex+0x9e>
 800ce06:	2d00      	cmp	r5, #0
 800ce08:	d1f8      	bne.n	800cdfc <__gethex+0xa8>
 800ce0a:	2220      	movs	r2, #32
 800ce0c:	7823      	ldrb	r3, [r4, #0]
 800ce0e:	0026      	movs	r6, r4
 800ce10:	4393      	bics	r3, r2
 800ce12:	2b50      	cmp	r3, #80	; 0x50
 800ce14:	d11d      	bne.n	800ce52 <__gethex+0xfe>
 800ce16:	7863      	ldrb	r3, [r4, #1]
 800ce18:	2b2b      	cmp	r3, #43	; 0x2b
 800ce1a:	d02c      	beq.n	800ce76 <__gethex+0x122>
 800ce1c:	2b2d      	cmp	r3, #45	; 0x2d
 800ce1e:	d02e      	beq.n	800ce7e <__gethex+0x12a>
 800ce20:	2300      	movs	r3, #0
 800ce22:	1c66      	adds	r6, r4, #1
 800ce24:	9304      	str	r3, [sp, #16]
 800ce26:	7830      	ldrb	r0, [r6, #0]
 800ce28:	f7ff ff7f 	bl	800cd2a <__hexdig_fun>
 800ce2c:	1e43      	subs	r3, r0, #1
 800ce2e:	b2db      	uxtb	r3, r3
 800ce30:	2b18      	cmp	r3, #24
 800ce32:	d82b      	bhi.n	800ce8c <__gethex+0x138>
 800ce34:	3810      	subs	r0, #16
 800ce36:	0005      	movs	r5, r0
 800ce38:	7870      	ldrb	r0, [r6, #1]
 800ce3a:	f7ff ff76 	bl	800cd2a <__hexdig_fun>
 800ce3e:	1e43      	subs	r3, r0, #1
 800ce40:	b2db      	uxtb	r3, r3
 800ce42:	3601      	adds	r6, #1
 800ce44:	2b18      	cmp	r3, #24
 800ce46:	d91c      	bls.n	800ce82 <__gethex+0x12e>
 800ce48:	9b04      	ldr	r3, [sp, #16]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d000      	beq.n	800ce50 <__gethex+0xfc>
 800ce4e:	426d      	negs	r5, r5
 800ce50:	197f      	adds	r7, r7, r5
 800ce52:	9b06      	ldr	r3, [sp, #24]
 800ce54:	601e      	str	r6, [r3, #0]
 800ce56:	9b02      	ldr	r3, [sp, #8]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d019      	beq.n	800ce90 <__gethex+0x13c>
 800ce5c:	2600      	movs	r6, #0
 800ce5e:	9b05      	ldr	r3, [sp, #20]
 800ce60:	42b3      	cmp	r3, r6
 800ce62:	d100      	bne.n	800ce66 <__gethex+0x112>
 800ce64:	3606      	adds	r6, #6
 800ce66:	0030      	movs	r0, r6
 800ce68:	b009      	add	sp, #36	; 0x24
 800ce6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	2700      	movs	r7, #0
 800ce70:	9c00      	ldr	r4, [sp, #0]
 800ce72:	9302      	str	r3, [sp, #8]
 800ce74:	e7c9      	b.n	800ce0a <__gethex+0xb6>
 800ce76:	2300      	movs	r3, #0
 800ce78:	9304      	str	r3, [sp, #16]
 800ce7a:	1ca6      	adds	r6, r4, #2
 800ce7c:	e7d3      	b.n	800ce26 <__gethex+0xd2>
 800ce7e:	2301      	movs	r3, #1
 800ce80:	e7fa      	b.n	800ce78 <__gethex+0x124>
 800ce82:	230a      	movs	r3, #10
 800ce84:	435d      	muls	r5, r3
 800ce86:	182d      	adds	r5, r5, r0
 800ce88:	3d10      	subs	r5, #16
 800ce8a:	e7d5      	b.n	800ce38 <__gethex+0xe4>
 800ce8c:	0026      	movs	r6, r4
 800ce8e:	e7e0      	b.n	800ce52 <__gethex+0xfe>
 800ce90:	9b00      	ldr	r3, [sp, #0]
 800ce92:	9902      	ldr	r1, [sp, #8]
 800ce94:	1ae3      	subs	r3, r4, r3
 800ce96:	3b01      	subs	r3, #1
 800ce98:	2b07      	cmp	r3, #7
 800ce9a:	dc0a      	bgt.n	800ceb2 <__gethex+0x15e>
 800ce9c:	9803      	ldr	r0, [sp, #12]
 800ce9e:	f000 fa5d 	bl	800d35c <_Balloc>
 800cea2:	1e05      	subs	r5, r0, #0
 800cea4:	d108      	bne.n	800ceb8 <__gethex+0x164>
 800cea6:	002a      	movs	r2, r5
 800cea8:	21e4      	movs	r1, #228	; 0xe4
 800ceaa:	4b5f      	ldr	r3, [pc, #380]	; (800d028 <__gethex+0x2d4>)
 800ceac:	485f      	ldr	r0, [pc, #380]	; (800d02c <__gethex+0x2d8>)
 800ceae:	f003 fd19 	bl	80108e4 <__assert_func>
 800ceb2:	3101      	adds	r1, #1
 800ceb4:	105b      	asrs	r3, r3, #1
 800ceb6:	e7ef      	b.n	800ce98 <__gethex+0x144>
 800ceb8:	0003      	movs	r3, r0
 800ceba:	3314      	adds	r3, #20
 800cebc:	9302      	str	r3, [sp, #8]
 800cebe:	9305      	str	r3, [sp, #20]
 800cec0:	2300      	movs	r3, #0
 800cec2:	001e      	movs	r6, r3
 800cec4:	9304      	str	r3, [sp, #16]
 800cec6:	9b00      	ldr	r3, [sp, #0]
 800cec8:	42a3      	cmp	r3, r4
 800ceca:	d33f      	bcc.n	800cf4c <__gethex+0x1f8>
 800cecc:	9c05      	ldr	r4, [sp, #20]
 800cece:	9b02      	ldr	r3, [sp, #8]
 800ced0:	c440      	stmia	r4!, {r6}
 800ced2:	1ae4      	subs	r4, r4, r3
 800ced4:	10a4      	asrs	r4, r4, #2
 800ced6:	0030      	movs	r0, r6
 800ced8:	612c      	str	r4, [r5, #16]
 800ceda:	f000 fb01 	bl	800d4e0 <__hi0bits>
 800cede:	9b01      	ldr	r3, [sp, #4]
 800cee0:	0164      	lsls	r4, r4, #5
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	1a26      	subs	r6, r4, r0
 800cee6:	9300      	str	r3, [sp, #0]
 800cee8:	429e      	cmp	r6, r3
 800ceea:	dd51      	ble.n	800cf90 <__gethex+0x23c>
 800ceec:	1af6      	subs	r6, r6, r3
 800ceee:	0031      	movs	r1, r6
 800cef0:	0028      	movs	r0, r5
 800cef2:	f000 fe7b 	bl	800dbec <__any_on>
 800cef6:	1e04      	subs	r4, r0, #0
 800cef8:	d016      	beq.n	800cf28 <__gethex+0x1d4>
 800cefa:	2401      	movs	r4, #1
 800cefc:	231f      	movs	r3, #31
 800cefe:	0020      	movs	r0, r4
 800cf00:	1e72      	subs	r2, r6, #1
 800cf02:	4013      	ands	r3, r2
 800cf04:	4098      	lsls	r0, r3
 800cf06:	0003      	movs	r3, r0
 800cf08:	1151      	asrs	r1, r2, #5
 800cf0a:	9802      	ldr	r0, [sp, #8]
 800cf0c:	0089      	lsls	r1, r1, #2
 800cf0e:	5809      	ldr	r1, [r1, r0]
 800cf10:	4219      	tst	r1, r3
 800cf12:	d009      	beq.n	800cf28 <__gethex+0x1d4>
 800cf14:	42a2      	cmp	r2, r4
 800cf16:	dd06      	ble.n	800cf26 <__gethex+0x1d2>
 800cf18:	0028      	movs	r0, r5
 800cf1a:	1eb1      	subs	r1, r6, #2
 800cf1c:	f000 fe66 	bl	800dbec <__any_on>
 800cf20:	3402      	adds	r4, #2
 800cf22:	2800      	cmp	r0, #0
 800cf24:	d100      	bne.n	800cf28 <__gethex+0x1d4>
 800cf26:	2402      	movs	r4, #2
 800cf28:	0031      	movs	r1, r6
 800cf2a:	0028      	movs	r0, r5
 800cf2c:	f7ff fea8 	bl	800cc80 <rshift>
 800cf30:	19bf      	adds	r7, r7, r6
 800cf32:	9b01      	ldr	r3, [sp, #4]
 800cf34:	689b      	ldr	r3, [r3, #8]
 800cf36:	42bb      	cmp	r3, r7
 800cf38:	da3a      	bge.n	800cfb0 <__gethex+0x25c>
 800cf3a:	0029      	movs	r1, r5
 800cf3c:	9803      	ldr	r0, [sp, #12]
 800cf3e:	f000 fa35 	bl	800d3ac <_Bfree>
 800cf42:	2300      	movs	r3, #0
 800cf44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cf46:	26a3      	movs	r6, #163	; 0xa3
 800cf48:	6013      	str	r3, [r2, #0]
 800cf4a:	e78c      	b.n	800ce66 <__gethex+0x112>
 800cf4c:	3c01      	subs	r4, #1
 800cf4e:	7823      	ldrb	r3, [r4, #0]
 800cf50:	2b2e      	cmp	r3, #46	; 0x2e
 800cf52:	d012      	beq.n	800cf7a <__gethex+0x226>
 800cf54:	9b04      	ldr	r3, [sp, #16]
 800cf56:	2b20      	cmp	r3, #32
 800cf58:	d104      	bne.n	800cf64 <__gethex+0x210>
 800cf5a:	9b05      	ldr	r3, [sp, #20]
 800cf5c:	c340      	stmia	r3!, {r6}
 800cf5e:	2600      	movs	r6, #0
 800cf60:	9305      	str	r3, [sp, #20]
 800cf62:	9604      	str	r6, [sp, #16]
 800cf64:	7820      	ldrb	r0, [r4, #0]
 800cf66:	f7ff fee0 	bl	800cd2a <__hexdig_fun>
 800cf6a:	230f      	movs	r3, #15
 800cf6c:	4018      	ands	r0, r3
 800cf6e:	9b04      	ldr	r3, [sp, #16]
 800cf70:	4098      	lsls	r0, r3
 800cf72:	3304      	adds	r3, #4
 800cf74:	4306      	orrs	r6, r0
 800cf76:	9304      	str	r3, [sp, #16]
 800cf78:	e7a5      	b.n	800cec6 <__gethex+0x172>
 800cf7a:	9b00      	ldr	r3, [sp, #0]
 800cf7c:	42a3      	cmp	r3, r4
 800cf7e:	d8e9      	bhi.n	800cf54 <__gethex+0x200>
 800cf80:	2201      	movs	r2, #1
 800cf82:	0020      	movs	r0, r4
 800cf84:	4927      	ldr	r1, [pc, #156]	; (800d024 <__gethex+0x2d0>)
 800cf86:	f7ff fc71 	bl	800c86c <strncmp>
 800cf8a:	2800      	cmp	r0, #0
 800cf8c:	d1e2      	bne.n	800cf54 <__gethex+0x200>
 800cf8e:	e79a      	b.n	800cec6 <__gethex+0x172>
 800cf90:	9b00      	ldr	r3, [sp, #0]
 800cf92:	2400      	movs	r4, #0
 800cf94:	429e      	cmp	r6, r3
 800cf96:	dacc      	bge.n	800cf32 <__gethex+0x1de>
 800cf98:	1b9e      	subs	r6, r3, r6
 800cf9a:	0029      	movs	r1, r5
 800cf9c:	0032      	movs	r2, r6
 800cf9e:	9803      	ldr	r0, [sp, #12]
 800cfa0:	f000 fbf0 	bl	800d784 <__lshift>
 800cfa4:	0003      	movs	r3, r0
 800cfa6:	3314      	adds	r3, #20
 800cfa8:	0005      	movs	r5, r0
 800cfaa:	1bbf      	subs	r7, r7, r6
 800cfac:	9302      	str	r3, [sp, #8]
 800cfae:	e7c0      	b.n	800cf32 <__gethex+0x1de>
 800cfb0:	9b01      	ldr	r3, [sp, #4]
 800cfb2:	685e      	ldr	r6, [r3, #4]
 800cfb4:	42be      	cmp	r6, r7
 800cfb6:	dd70      	ble.n	800d09a <__gethex+0x346>
 800cfb8:	9b00      	ldr	r3, [sp, #0]
 800cfba:	1bf6      	subs	r6, r6, r7
 800cfbc:	42b3      	cmp	r3, r6
 800cfbe:	dc37      	bgt.n	800d030 <__gethex+0x2dc>
 800cfc0:	9b01      	ldr	r3, [sp, #4]
 800cfc2:	68db      	ldr	r3, [r3, #12]
 800cfc4:	2b02      	cmp	r3, #2
 800cfc6:	d024      	beq.n	800d012 <__gethex+0x2be>
 800cfc8:	2b03      	cmp	r3, #3
 800cfca:	d026      	beq.n	800d01a <__gethex+0x2c6>
 800cfcc:	2b01      	cmp	r3, #1
 800cfce:	d117      	bne.n	800d000 <__gethex+0x2ac>
 800cfd0:	9b00      	ldr	r3, [sp, #0]
 800cfd2:	42b3      	cmp	r3, r6
 800cfd4:	d114      	bne.n	800d000 <__gethex+0x2ac>
 800cfd6:	2b01      	cmp	r3, #1
 800cfd8:	d10b      	bne.n	800cff2 <__gethex+0x29e>
 800cfda:	9b01      	ldr	r3, [sp, #4]
 800cfdc:	9a07      	ldr	r2, [sp, #28]
 800cfde:	685b      	ldr	r3, [r3, #4]
 800cfe0:	2662      	movs	r6, #98	; 0x62
 800cfe2:	6013      	str	r3, [r2, #0]
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	9a02      	ldr	r2, [sp, #8]
 800cfe8:	612b      	str	r3, [r5, #16]
 800cfea:	6013      	str	r3, [r2, #0]
 800cfec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cfee:	601d      	str	r5, [r3, #0]
 800cff0:	e739      	b.n	800ce66 <__gethex+0x112>
 800cff2:	9900      	ldr	r1, [sp, #0]
 800cff4:	0028      	movs	r0, r5
 800cff6:	3901      	subs	r1, #1
 800cff8:	f000 fdf8 	bl	800dbec <__any_on>
 800cffc:	2800      	cmp	r0, #0
 800cffe:	d1ec      	bne.n	800cfda <__gethex+0x286>
 800d000:	0029      	movs	r1, r5
 800d002:	9803      	ldr	r0, [sp, #12]
 800d004:	f000 f9d2 	bl	800d3ac <_Bfree>
 800d008:	2300      	movs	r3, #0
 800d00a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d00c:	2650      	movs	r6, #80	; 0x50
 800d00e:	6013      	str	r3, [r2, #0]
 800d010:	e729      	b.n	800ce66 <__gethex+0x112>
 800d012:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d014:	2b00      	cmp	r3, #0
 800d016:	d1f3      	bne.n	800d000 <__gethex+0x2ac>
 800d018:	e7df      	b.n	800cfda <__gethex+0x286>
 800d01a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d1dc      	bne.n	800cfda <__gethex+0x286>
 800d020:	e7ee      	b.n	800d000 <__gethex+0x2ac>
 800d022:	46c0      	nop			; (mov r8, r8)
 800d024:	08014f18 	.word	0x08014f18
 800d028:	08015079 	.word	0x08015079
 800d02c:	0801508a 	.word	0x0801508a
 800d030:	1e77      	subs	r7, r6, #1
 800d032:	2c00      	cmp	r4, #0
 800d034:	d12f      	bne.n	800d096 <__gethex+0x342>
 800d036:	2f00      	cmp	r7, #0
 800d038:	d004      	beq.n	800d044 <__gethex+0x2f0>
 800d03a:	0039      	movs	r1, r7
 800d03c:	0028      	movs	r0, r5
 800d03e:	f000 fdd5 	bl	800dbec <__any_on>
 800d042:	0004      	movs	r4, r0
 800d044:	231f      	movs	r3, #31
 800d046:	117a      	asrs	r2, r7, #5
 800d048:	401f      	ands	r7, r3
 800d04a:	3b1e      	subs	r3, #30
 800d04c:	40bb      	lsls	r3, r7
 800d04e:	9902      	ldr	r1, [sp, #8]
 800d050:	0092      	lsls	r2, r2, #2
 800d052:	5852      	ldr	r2, [r2, r1]
 800d054:	421a      	tst	r2, r3
 800d056:	d001      	beq.n	800d05c <__gethex+0x308>
 800d058:	2302      	movs	r3, #2
 800d05a:	431c      	orrs	r4, r3
 800d05c:	9b00      	ldr	r3, [sp, #0]
 800d05e:	0031      	movs	r1, r6
 800d060:	1b9b      	subs	r3, r3, r6
 800d062:	2602      	movs	r6, #2
 800d064:	0028      	movs	r0, r5
 800d066:	9300      	str	r3, [sp, #0]
 800d068:	f7ff fe0a 	bl	800cc80 <rshift>
 800d06c:	9b01      	ldr	r3, [sp, #4]
 800d06e:	685f      	ldr	r7, [r3, #4]
 800d070:	2c00      	cmp	r4, #0
 800d072:	d041      	beq.n	800d0f8 <__gethex+0x3a4>
 800d074:	9b01      	ldr	r3, [sp, #4]
 800d076:	68db      	ldr	r3, [r3, #12]
 800d078:	2b02      	cmp	r3, #2
 800d07a:	d010      	beq.n	800d09e <__gethex+0x34a>
 800d07c:	2b03      	cmp	r3, #3
 800d07e:	d012      	beq.n	800d0a6 <__gethex+0x352>
 800d080:	2b01      	cmp	r3, #1
 800d082:	d106      	bne.n	800d092 <__gethex+0x33e>
 800d084:	07a2      	lsls	r2, r4, #30
 800d086:	d504      	bpl.n	800d092 <__gethex+0x33e>
 800d088:	9a02      	ldr	r2, [sp, #8]
 800d08a:	6812      	ldr	r2, [r2, #0]
 800d08c:	4314      	orrs	r4, r2
 800d08e:	421c      	tst	r4, r3
 800d090:	d10c      	bne.n	800d0ac <__gethex+0x358>
 800d092:	2310      	movs	r3, #16
 800d094:	e02f      	b.n	800d0f6 <__gethex+0x3a2>
 800d096:	2401      	movs	r4, #1
 800d098:	e7d4      	b.n	800d044 <__gethex+0x2f0>
 800d09a:	2601      	movs	r6, #1
 800d09c:	e7e8      	b.n	800d070 <__gethex+0x31c>
 800d09e:	2301      	movs	r3, #1
 800d0a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d0a2:	1a9b      	subs	r3, r3, r2
 800d0a4:	930f      	str	r3, [sp, #60]	; 0x3c
 800d0a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d0f2      	beq.n	800d092 <__gethex+0x33e>
 800d0ac:	692b      	ldr	r3, [r5, #16]
 800d0ae:	2000      	movs	r0, #0
 800d0b0:	9302      	str	r3, [sp, #8]
 800d0b2:	009b      	lsls	r3, r3, #2
 800d0b4:	9304      	str	r3, [sp, #16]
 800d0b6:	002b      	movs	r3, r5
 800d0b8:	9a04      	ldr	r2, [sp, #16]
 800d0ba:	3314      	adds	r3, #20
 800d0bc:	1899      	adds	r1, r3, r2
 800d0be:	681a      	ldr	r2, [r3, #0]
 800d0c0:	1c54      	adds	r4, r2, #1
 800d0c2:	d01e      	beq.n	800d102 <__gethex+0x3ae>
 800d0c4:	3201      	adds	r2, #1
 800d0c6:	601a      	str	r2, [r3, #0]
 800d0c8:	002b      	movs	r3, r5
 800d0ca:	3314      	adds	r3, #20
 800d0cc:	2e02      	cmp	r6, #2
 800d0ce:	d141      	bne.n	800d154 <__gethex+0x400>
 800d0d0:	9a01      	ldr	r2, [sp, #4]
 800d0d2:	9900      	ldr	r1, [sp, #0]
 800d0d4:	6812      	ldr	r2, [r2, #0]
 800d0d6:	3a01      	subs	r2, #1
 800d0d8:	428a      	cmp	r2, r1
 800d0da:	d10b      	bne.n	800d0f4 <__gethex+0x3a0>
 800d0dc:	221f      	movs	r2, #31
 800d0de:	9800      	ldr	r0, [sp, #0]
 800d0e0:	1149      	asrs	r1, r1, #5
 800d0e2:	4002      	ands	r2, r0
 800d0e4:	2001      	movs	r0, #1
 800d0e6:	0004      	movs	r4, r0
 800d0e8:	4094      	lsls	r4, r2
 800d0ea:	0089      	lsls	r1, r1, #2
 800d0ec:	58cb      	ldr	r3, [r1, r3]
 800d0ee:	4223      	tst	r3, r4
 800d0f0:	d000      	beq.n	800d0f4 <__gethex+0x3a0>
 800d0f2:	2601      	movs	r6, #1
 800d0f4:	2320      	movs	r3, #32
 800d0f6:	431e      	orrs	r6, r3
 800d0f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d0fa:	601d      	str	r5, [r3, #0]
 800d0fc:	9b07      	ldr	r3, [sp, #28]
 800d0fe:	601f      	str	r7, [r3, #0]
 800d100:	e6b1      	b.n	800ce66 <__gethex+0x112>
 800d102:	c301      	stmia	r3!, {r0}
 800d104:	4299      	cmp	r1, r3
 800d106:	d8da      	bhi.n	800d0be <__gethex+0x36a>
 800d108:	68ab      	ldr	r3, [r5, #8]
 800d10a:	9a02      	ldr	r2, [sp, #8]
 800d10c:	429a      	cmp	r2, r3
 800d10e:	db18      	blt.n	800d142 <__gethex+0x3ee>
 800d110:	6869      	ldr	r1, [r5, #4]
 800d112:	9803      	ldr	r0, [sp, #12]
 800d114:	3101      	adds	r1, #1
 800d116:	f000 f921 	bl	800d35c <_Balloc>
 800d11a:	1e04      	subs	r4, r0, #0
 800d11c:	d104      	bne.n	800d128 <__gethex+0x3d4>
 800d11e:	0022      	movs	r2, r4
 800d120:	2184      	movs	r1, #132	; 0x84
 800d122:	4b1c      	ldr	r3, [pc, #112]	; (800d194 <__gethex+0x440>)
 800d124:	481c      	ldr	r0, [pc, #112]	; (800d198 <__gethex+0x444>)
 800d126:	e6c2      	b.n	800ceae <__gethex+0x15a>
 800d128:	0029      	movs	r1, r5
 800d12a:	692a      	ldr	r2, [r5, #16]
 800d12c:	310c      	adds	r1, #12
 800d12e:	3202      	adds	r2, #2
 800d130:	0092      	lsls	r2, r2, #2
 800d132:	300c      	adds	r0, #12
 800d134:	f7ff fc77 	bl	800ca26 <memcpy>
 800d138:	0029      	movs	r1, r5
 800d13a:	9803      	ldr	r0, [sp, #12]
 800d13c:	f000 f936 	bl	800d3ac <_Bfree>
 800d140:	0025      	movs	r5, r4
 800d142:	692b      	ldr	r3, [r5, #16]
 800d144:	1c5a      	adds	r2, r3, #1
 800d146:	612a      	str	r2, [r5, #16]
 800d148:	2201      	movs	r2, #1
 800d14a:	3304      	adds	r3, #4
 800d14c:	009b      	lsls	r3, r3, #2
 800d14e:	18eb      	adds	r3, r5, r3
 800d150:	605a      	str	r2, [r3, #4]
 800d152:	e7b9      	b.n	800d0c8 <__gethex+0x374>
 800d154:	692a      	ldr	r2, [r5, #16]
 800d156:	9902      	ldr	r1, [sp, #8]
 800d158:	428a      	cmp	r2, r1
 800d15a:	dd09      	ble.n	800d170 <__gethex+0x41c>
 800d15c:	2101      	movs	r1, #1
 800d15e:	0028      	movs	r0, r5
 800d160:	f7ff fd8e 	bl	800cc80 <rshift>
 800d164:	9b01      	ldr	r3, [sp, #4]
 800d166:	3701      	adds	r7, #1
 800d168:	689b      	ldr	r3, [r3, #8]
 800d16a:	42bb      	cmp	r3, r7
 800d16c:	dac1      	bge.n	800d0f2 <__gethex+0x39e>
 800d16e:	e6e4      	b.n	800cf3a <__gethex+0x1e6>
 800d170:	221f      	movs	r2, #31
 800d172:	9c00      	ldr	r4, [sp, #0]
 800d174:	9900      	ldr	r1, [sp, #0]
 800d176:	2601      	movs	r6, #1
 800d178:	4014      	ands	r4, r2
 800d17a:	4211      	tst	r1, r2
 800d17c:	d0ba      	beq.n	800d0f4 <__gethex+0x3a0>
 800d17e:	9a04      	ldr	r2, [sp, #16]
 800d180:	189b      	adds	r3, r3, r2
 800d182:	3b04      	subs	r3, #4
 800d184:	6818      	ldr	r0, [r3, #0]
 800d186:	f000 f9ab 	bl	800d4e0 <__hi0bits>
 800d18a:	2320      	movs	r3, #32
 800d18c:	1b1b      	subs	r3, r3, r4
 800d18e:	4298      	cmp	r0, r3
 800d190:	dbe4      	blt.n	800d15c <__gethex+0x408>
 800d192:	e7af      	b.n	800d0f4 <__gethex+0x3a0>
 800d194:	08015079 	.word	0x08015079
 800d198:	0801508a 	.word	0x0801508a

0800d19c <L_shift>:
 800d19c:	2308      	movs	r3, #8
 800d19e:	b570      	push	{r4, r5, r6, lr}
 800d1a0:	2520      	movs	r5, #32
 800d1a2:	1a9a      	subs	r2, r3, r2
 800d1a4:	0092      	lsls	r2, r2, #2
 800d1a6:	1aad      	subs	r5, r5, r2
 800d1a8:	6843      	ldr	r3, [r0, #4]
 800d1aa:	6804      	ldr	r4, [r0, #0]
 800d1ac:	001e      	movs	r6, r3
 800d1ae:	40ae      	lsls	r6, r5
 800d1b0:	40d3      	lsrs	r3, r2
 800d1b2:	4334      	orrs	r4, r6
 800d1b4:	6004      	str	r4, [r0, #0]
 800d1b6:	6043      	str	r3, [r0, #4]
 800d1b8:	3004      	adds	r0, #4
 800d1ba:	4288      	cmp	r0, r1
 800d1bc:	d3f4      	bcc.n	800d1a8 <L_shift+0xc>
 800d1be:	bd70      	pop	{r4, r5, r6, pc}

0800d1c0 <__match>:
 800d1c0:	b530      	push	{r4, r5, lr}
 800d1c2:	6803      	ldr	r3, [r0, #0]
 800d1c4:	780c      	ldrb	r4, [r1, #0]
 800d1c6:	3301      	adds	r3, #1
 800d1c8:	2c00      	cmp	r4, #0
 800d1ca:	d102      	bne.n	800d1d2 <__match+0x12>
 800d1cc:	6003      	str	r3, [r0, #0]
 800d1ce:	2001      	movs	r0, #1
 800d1d0:	bd30      	pop	{r4, r5, pc}
 800d1d2:	781a      	ldrb	r2, [r3, #0]
 800d1d4:	0015      	movs	r5, r2
 800d1d6:	3d41      	subs	r5, #65	; 0x41
 800d1d8:	2d19      	cmp	r5, #25
 800d1da:	d800      	bhi.n	800d1de <__match+0x1e>
 800d1dc:	3220      	adds	r2, #32
 800d1de:	3101      	adds	r1, #1
 800d1e0:	42a2      	cmp	r2, r4
 800d1e2:	d0ef      	beq.n	800d1c4 <__match+0x4>
 800d1e4:	2000      	movs	r0, #0
 800d1e6:	e7f3      	b.n	800d1d0 <__match+0x10>

0800d1e8 <__hexnan>:
 800d1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1ea:	680b      	ldr	r3, [r1, #0]
 800d1ec:	b08b      	sub	sp, #44	; 0x2c
 800d1ee:	9201      	str	r2, [sp, #4]
 800d1f0:	9901      	ldr	r1, [sp, #4]
 800d1f2:	115a      	asrs	r2, r3, #5
 800d1f4:	0092      	lsls	r2, r2, #2
 800d1f6:	188a      	adds	r2, r1, r2
 800d1f8:	9202      	str	r2, [sp, #8]
 800d1fa:	0019      	movs	r1, r3
 800d1fc:	221f      	movs	r2, #31
 800d1fe:	4011      	ands	r1, r2
 800d200:	9008      	str	r0, [sp, #32]
 800d202:	9106      	str	r1, [sp, #24]
 800d204:	4213      	tst	r3, r2
 800d206:	d002      	beq.n	800d20e <__hexnan+0x26>
 800d208:	9b02      	ldr	r3, [sp, #8]
 800d20a:	3304      	adds	r3, #4
 800d20c:	9302      	str	r3, [sp, #8]
 800d20e:	9b02      	ldr	r3, [sp, #8]
 800d210:	2500      	movs	r5, #0
 800d212:	1f1f      	subs	r7, r3, #4
 800d214:	003e      	movs	r6, r7
 800d216:	003c      	movs	r4, r7
 800d218:	9b08      	ldr	r3, [sp, #32]
 800d21a:	603d      	str	r5, [r7, #0]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	9507      	str	r5, [sp, #28]
 800d220:	9305      	str	r3, [sp, #20]
 800d222:	9503      	str	r5, [sp, #12]
 800d224:	9b05      	ldr	r3, [sp, #20]
 800d226:	3301      	adds	r3, #1
 800d228:	9309      	str	r3, [sp, #36]	; 0x24
 800d22a:	9b05      	ldr	r3, [sp, #20]
 800d22c:	785b      	ldrb	r3, [r3, #1]
 800d22e:	9304      	str	r3, [sp, #16]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d028      	beq.n	800d286 <__hexnan+0x9e>
 800d234:	9804      	ldr	r0, [sp, #16]
 800d236:	f7ff fd78 	bl	800cd2a <__hexdig_fun>
 800d23a:	2800      	cmp	r0, #0
 800d23c:	d154      	bne.n	800d2e8 <__hexnan+0x100>
 800d23e:	9b04      	ldr	r3, [sp, #16]
 800d240:	2b20      	cmp	r3, #32
 800d242:	d819      	bhi.n	800d278 <__hexnan+0x90>
 800d244:	9b03      	ldr	r3, [sp, #12]
 800d246:	9a07      	ldr	r2, [sp, #28]
 800d248:	4293      	cmp	r3, r2
 800d24a:	dd12      	ble.n	800d272 <__hexnan+0x8a>
 800d24c:	42b4      	cmp	r4, r6
 800d24e:	d206      	bcs.n	800d25e <__hexnan+0x76>
 800d250:	2d07      	cmp	r5, #7
 800d252:	dc04      	bgt.n	800d25e <__hexnan+0x76>
 800d254:	002a      	movs	r2, r5
 800d256:	0031      	movs	r1, r6
 800d258:	0020      	movs	r0, r4
 800d25a:	f7ff ff9f 	bl	800d19c <L_shift>
 800d25e:	9b01      	ldr	r3, [sp, #4]
 800d260:	2508      	movs	r5, #8
 800d262:	429c      	cmp	r4, r3
 800d264:	d905      	bls.n	800d272 <__hexnan+0x8a>
 800d266:	1f26      	subs	r6, r4, #4
 800d268:	2500      	movs	r5, #0
 800d26a:	0034      	movs	r4, r6
 800d26c:	9b03      	ldr	r3, [sp, #12]
 800d26e:	6035      	str	r5, [r6, #0]
 800d270:	9307      	str	r3, [sp, #28]
 800d272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d274:	9305      	str	r3, [sp, #20]
 800d276:	e7d5      	b.n	800d224 <__hexnan+0x3c>
 800d278:	9b04      	ldr	r3, [sp, #16]
 800d27a:	2b29      	cmp	r3, #41	; 0x29
 800d27c:	d159      	bne.n	800d332 <__hexnan+0x14a>
 800d27e:	9b05      	ldr	r3, [sp, #20]
 800d280:	9a08      	ldr	r2, [sp, #32]
 800d282:	3302      	adds	r3, #2
 800d284:	6013      	str	r3, [r2, #0]
 800d286:	9b03      	ldr	r3, [sp, #12]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d052      	beq.n	800d332 <__hexnan+0x14a>
 800d28c:	42b4      	cmp	r4, r6
 800d28e:	d206      	bcs.n	800d29e <__hexnan+0xb6>
 800d290:	2d07      	cmp	r5, #7
 800d292:	dc04      	bgt.n	800d29e <__hexnan+0xb6>
 800d294:	002a      	movs	r2, r5
 800d296:	0031      	movs	r1, r6
 800d298:	0020      	movs	r0, r4
 800d29a:	f7ff ff7f 	bl	800d19c <L_shift>
 800d29e:	9b01      	ldr	r3, [sp, #4]
 800d2a0:	429c      	cmp	r4, r3
 800d2a2:	d935      	bls.n	800d310 <__hexnan+0x128>
 800d2a4:	001a      	movs	r2, r3
 800d2a6:	0023      	movs	r3, r4
 800d2a8:	cb02      	ldmia	r3!, {r1}
 800d2aa:	c202      	stmia	r2!, {r1}
 800d2ac:	429f      	cmp	r7, r3
 800d2ae:	d2fb      	bcs.n	800d2a8 <__hexnan+0xc0>
 800d2b0:	9b02      	ldr	r3, [sp, #8]
 800d2b2:	1c62      	adds	r2, r4, #1
 800d2b4:	1ed9      	subs	r1, r3, #3
 800d2b6:	2304      	movs	r3, #4
 800d2b8:	4291      	cmp	r1, r2
 800d2ba:	d305      	bcc.n	800d2c8 <__hexnan+0xe0>
 800d2bc:	9b02      	ldr	r3, [sp, #8]
 800d2be:	3b04      	subs	r3, #4
 800d2c0:	1b1b      	subs	r3, r3, r4
 800d2c2:	089b      	lsrs	r3, r3, #2
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	009b      	lsls	r3, r3, #2
 800d2c8:	9a01      	ldr	r2, [sp, #4]
 800d2ca:	18d3      	adds	r3, r2, r3
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	c304      	stmia	r3!, {r2}
 800d2d0:	429f      	cmp	r7, r3
 800d2d2:	d2fc      	bcs.n	800d2ce <__hexnan+0xe6>
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d104      	bne.n	800d2e4 <__hexnan+0xfc>
 800d2da:	9b01      	ldr	r3, [sp, #4]
 800d2dc:	429f      	cmp	r7, r3
 800d2de:	d126      	bne.n	800d32e <__hexnan+0x146>
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	603b      	str	r3, [r7, #0]
 800d2e4:	2005      	movs	r0, #5
 800d2e6:	e025      	b.n	800d334 <__hexnan+0x14c>
 800d2e8:	9b03      	ldr	r3, [sp, #12]
 800d2ea:	3501      	adds	r5, #1
 800d2ec:	3301      	adds	r3, #1
 800d2ee:	9303      	str	r3, [sp, #12]
 800d2f0:	2d08      	cmp	r5, #8
 800d2f2:	dd06      	ble.n	800d302 <__hexnan+0x11a>
 800d2f4:	9b01      	ldr	r3, [sp, #4]
 800d2f6:	429c      	cmp	r4, r3
 800d2f8:	d9bb      	bls.n	800d272 <__hexnan+0x8a>
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	2501      	movs	r5, #1
 800d2fe:	3c04      	subs	r4, #4
 800d300:	6023      	str	r3, [r4, #0]
 800d302:	220f      	movs	r2, #15
 800d304:	6823      	ldr	r3, [r4, #0]
 800d306:	4010      	ands	r0, r2
 800d308:	011b      	lsls	r3, r3, #4
 800d30a:	4303      	orrs	r3, r0
 800d30c:	6023      	str	r3, [r4, #0]
 800d30e:	e7b0      	b.n	800d272 <__hexnan+0x8a>
 800d310:	9b06      	ldr	r3, [sp, #24]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d0de      	beq.n	800d2d4 <__hexnan+0xec>
 800d316:	2320      	movs	r3, #32
 800d318:	9a06      	ldr	r2, [sp, #24]
 800d31a:	9902      	ldr	r1, [sp, #8]
 800d31c:	1a9b      	subs	r3, r3, r2
 800d31e:	2201      	movs	r2, #1
 800d320:	4252      	negs	r2, r2
 800d322:	40da      	lsrs	r2, r3
 800d324:	3904      	subs	r1, #4
 800d326:	680b      	ldr	r3, [r1, #0]
 800d328:	4013      	ands	r3, r2
 800d32a:	600b      	str	r3, [r1, #0]
 800d32c:	e7d2      	b.n	800d2d4 <__hexnan+0xec>
 800d32e:	3f04      	subs	r7, #4
 800d330:	e7d0      	b.n	800d2d4 <__hexnan+0xec>
 800d332:	2004      	movs	r0, #4
 800d334:	b00b      	add	sp, #44	; 0x2c
 800d336:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d338 <__ascii_mbtowc>:
 800d338:	b082      	sub	sp, #8
 800d33a:	2900      	cmp	r1, #0
 800d33c:	d100      	bne.n	800d340 <__ascii_mbtowc+0x8>
 800d33e:	a901      	add	r1, sp, #4
 800d340:	1e10      	subs	r0, r2, #0
 800d342:	d006      	beq.n	800d352 <__ascii_mbtowc+0x1a>
 800d344:	2b00      	cmp	r3, #0
 800d346:	d006      	beq.n	800d356 <__ascii_mbtowc+0x1e>
 800d348:	7813      	ldrb	r3, [r2, #0]
 800d34a:	600b      	str	r3, [r1, #0]
 800d34c:	7810      	ldrb	r0, [r2, #0]
 800d34e:	1e43      	subs	r3, r0, #1
 800d350:	4198      	sbcs	r0, r3
 800d352:	b002      	add	sp, #8
 800d354:	4770      	bx	lr
 800d356:	2002      	movs	r0, #2
 800d358:	4240      	negs	r0, r0
 800d35a:	e7fa      	b.n	800d352 <__ascii_mbtowc+0x1a>

0800d35c <_Balloc>:
 800d35c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800d35e:	b570      	push	{r4, r5, r6, lr}
 800d360:	0006      	movs	r6, r0
 800d362:	000c      	movs	r4, r1
 800d364:	2b00      	cmp	r3, #0
 800d366:	d012      	beq.n	800d38e <_Balloc+0x32>
 800d368:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800d36a:	00a2      	lsls	r2, r4, #2
 800d36c:	189b      	adds	r3, r3, r2
 800d36e:	6818      	ldr	r0, [r3, #0]
 800d370:	2800      	cmp	r0, #0
 800d372:	d115      	bne.n	800d3a0 <_Balloc+0x44>
 800d374:	2101      	movs	r1, #1
 800d376:	000d      	movs	r5, r1
 800d378:	40a5      	lsls	r5, r4
 800d37a:	1d6a      	adds	r2, r5, #5
 800d37c:	0030      	movs	r0, r6
 800d37e:	0092      	lsls	r2, r2, #2
 800d380:	f003 face 	bl	8010920 <_calloc_r>
 800d384:	2800      	cmp	r0, #0
 800d386:	d009      	beq.n	800d39c <_Balloc+0x40>
 800d388:	6044      	str	r4, [r0, #4]
 800d38a:	6085      	str	r5, [r0, #8]
 800d38c:	e00a      	b.n	800d3a4 <_Balloc+0x48>
 800d38e:	2221      	movs	r2, #33	; 0x21
 800d390:	2104      	movs	r1, #4
 800d392:	f003 fac5 	bl	8010920 <_calloc_r>
 800d396:	6470      	str	r0, [r6, #68]	; 0x44
 800d398:	2800      	cmp	r0, #0
 800d39a:	d1e5      	bne.n	800d368 <_Balloc+0xc>
 800d39c:	2000      	movs	r0, #0
 800d39e:	bd70      	pop	{r4, r5, r6, pc}
 800d3a0:	6802      	ldr	r2, [r0, #0]
 800d3a2:	601a      	str	r2, [r3, #0]
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	6103      	str	r3, [r0, #16]
 800d3a8:	60c3      	str	r3, [r0, #12]
 800d3aa:	e7f8      	b.n	800d39e <_Balloc+0x42>

0800d3ac <_Bfree>:
 800d3ac:	2900      	cmp	r1, #0
 800d3ae:	d006      	beq.n	800d3be <_Bfree+0x12>
 800d3b0:	684a      	ldr	r2, [r1, #4]
 800d3b2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800d3b4:	0092      	lsls	r2, r2, #2
 800d3b6:	189b      	adds	r3, r3, r2
 800d3b8:	681a      	ldr	r2, [r3, #0]
 800d3ba:	600a      	str	r2, [r1, #0]
 800d3bc:	6019      	str	r1, [r3, #0]
 800d3be:	4770      	bx	lr

0800d3c0 <__multadd>:
 800d3c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3c2:	000e      	movs	r6, r1
 800d3c4:	9001      	str	r0, [sp, #4]
 800d3c6:	000c      	movs	r4, r1
 800d3c8:	001d      	movs	r5, r3
 800d3ca:	2000      	movs	r0, #0
 800d3cc:	690f      	ldr	r7, [r1, #16]
 800d3ce:	3614      	adds	r6, #20
 800d3d0:	6833      	ldr	r3, [r6, #0]
 800d3d2:	3001      	adds	r0, #1
 800d3d4:	b299      	uxth	r1, r3
 800d3d6:	4351      	muls	r1, r2
 800d3d8:	0c1b      	lsrs	r3, r3, #16
 800d3da:	4353      	muls	r3, r2
 800d3dc:	1949      	adds	r1, r1, r5
 800d3de:	0c0d      	lsrs	r5, r1, #16
 800d3e0:	195b      	adds	r3, r3, r5
 800d3e2:	0c1d      	lsrs	r5, r3, #16
 800d3e4:	b289      	uxth	r1, r1
 800d3e6:	041b      	lsls	r3, r3, #16
 800d3e8:	185b      	adds	r3, r3, r1
 800d3ea:	c608      	stmia	r6!, {r3}
 800d3ec:	4287      	cmp	r7, r0
 800d3ee:	dcef      	bgt.n	800d3d0 <__multadd+0x10>
 800d3f0:	2d00      	cmp	r5, #0
 800d3f2:	d022      	beq.n	800d43a <__multadd+0x7a>
 800d3f4:	68a3      	ldr	r3, [r4, #8]
 800d3f6:	42bb      	cmp	r3, r7
 800d3f8:	dc19      	bgt.n	800d42e <__multadd+0x6e>
 800d3fa:	6861      	ldr	r1, [r4, #4]
 800d3fc:	9801      	ldr	r0, [sp, #4]
 800d3fe:	3101      	adds	r1, #1
 800d400:	f7ff ffac 	bl	800d35c <_Balloc>
 800d404:	1e06      	subs	r6, r0, #0
 800d406:	d105      	bne.n	800d414 <__multadd+0x54>
 800d408:	0032      	movs	r2, r6
 800d40a:	21ba      	movs	r1, #186	; 0xba
 800d40c:	4b0c      	ldr	r3, [pc, #48]	; (800d440 <__multadd+0x80>)
 800d40e:	480d      	ldr	r0, [pc, #52]	; (800d444 <__multadd+0x84>)
 800d410:	f003 fa68 	bl	80108e4 <__assert_func>
 800d414:	0021      	movs	r1, r4
 800d416:	6922      	ldr	r2, [r4, #16]
 800d418:	310c      	adds	r1, #12
 800d41a:	3202      	adds	r2, #2
 800d41c:	0092      	lsls	r2, r2, #2
 800d41e:	300c      	adds	r0, #12
 800d420:	f7ff fb01 	bl	800ca26 <memcpy>
 800d424:	0021      	movs	r1, r4
 800d426:	9801      	ldr	r0, [sp, #4]
 800d428:	f7ff ffc0 	bl	800d3ac <_Bfree>
 800d42c:	0034      	movs	r4, r6
 800d42e:	1d3b      	adds	r3, r7, #4
 800d430:	009b      	lsls	r3, r3, #2
 800d432:	18e3      	adds	r3, r4, r3
 800d434:	605d      	str	r5, [r3, #4]
 800d436:	1c7b      	adds	r3, r7, #1
 800d438:	6123      	str	r3, [r4, #16]
 800d43a:	0020      	movs	r0, r4
 800d43c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d43e:	46c0      	nop			; (mov r8, r8)
 800d440:	08015079 	.word	0x08015079
 800d444:	080150ea 	.word	0x080150ea

0800d448 <__s2b>:
 800d448:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d44a:	0006      	movs	r6, r0
 800d44c:	0018      	movs	r0, r3
 800d44e:	000c      	movs	r4, r1
 800d450:	3008      	adds	r0, #8
 800d452:	2109      	movs	r1, #9
 800d454:	9301      	str	r3, [sp, #4]
 800d456:	0015      	movs	r5, r2
 800d458:	f7f2 fefa 	bl	8000250 <__divsi3>
 800d45c:	2301      	movs	r3, #1
 800d45e:	2100      	movs	r1, #0
 800d460:	4283      	cmp	r3, r0
 800d462:	db0a      	blt.n	800d47a <__s2b+0x32>
 800d464:	0030      	movs	r0, r6
 800d466:	f7ff ff79 	bl	800d35c <_Balloc>
 800d46a:	1e01      	subs	r1, r0, #0
 800d46c:	d108      	bne.n	800d480 <__s2b+0x38>
 800d46e:	000a      	movs	r2, r1
 800d470:	4b19      	ldr	r3, [pc, #100]	; (800d4d8 <__s2b+0x90>)
 800d472:	481a      	ldr	r0, [pc, #104]	; (800d4dc <__s2b+0x94>)
 800d474:	31d3      	adds	r1, #211	; 0xd3
 800d476:	f003 fa35 	bl	80108e4 <__assert_func>
 800d47a:	005b      	lsls	r3, r3, #1
 800d47c:	3101      	adds	r1, #1
 800d47e:	e7ef      	b.n	800d460 <__s2b+0x18>
 800d480:	9b08      	ldr	r3, [sp, #32]
 800d482:	6143      	str	r3, [r0, #20]
 800d484:	2301      	movs	r3, #1
 800d486:	6103      	str	r3, [r0, #16]
 800d488:	2d09      	cmp	r5, #9
 800d48a:	dd18      	ble.n	800d4be <__s2b+0x76>
 800d48c:	0023      	movs	r3, r4
 800d48e:	3309      	adds	r3, #9
 800d490:	001f      	movs	r7, r3
 800d492:	9300      	str	r3, [sp, #0]
 800d494:	1964      	adds	r4, r4, r5
 800d496:	783b      	ldrb	r3, [r7, #0]
 800d498:	220a      	movs	r2, #10
 800d49a:	0030      	movs	r0, r6
 800d49c:	3b30      	subs	r3, #48	; 0x30
 800d49e:	f7ff ff8f 	bl	800d3c0 <__multadd>
 800d4a2:	3701      	adds	r7, #1
 800d4a4:	0001      	movs	r1, r0
 800d4a6:	42a7      	cmp	r7, r4
 800d4a8:	d1f5      	bne.n	800d496 <__s2b+0x4e>
 800d4aa:	002c      	movs	r4, r5
 800d4ac:	9b00      	ldr	r3, [sp, #0]
 800d4ae:	3c08      	subs	r4, #8
 800d4b0:	191c      	adds	r4, r3, r4
 800d4b2:	002f      	movs	r7, r5
 800d4b4:	9b01      	ldr	r3, [sp, #4]
 800d4b6:	429f      	cmp	r7, r3
 800d4b8:	db04      	blt.n	800d4c4 <__s2b+0x7c>
 800d4ba:	0008      	movs	r0, r1
 800d4bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d4be:	2509      	movs	r5, #9
 800d4c0:	340a      	adds	r4, #10
 800d4c2:	e7f6      	b.n	800d4b2 <__s2b+0x6a>
 800d4c4:	1b63      	subs	r3, r4, r5
 800d4c6:	5ddb      	ldrb	r3, [r3, r7]
 800d4c8:	220a      	movs	r2, #10
 800d4ca:	0030      	movs	r0, r6
 800d4cc:	3b30      	subs	r3, #48	; 0x30
 800d4ce:	f7ff ff77 	bl	800d3c0 <__multadd>
 800d4d2:	3701      	adds	r7, #1
 800d4d4:	0001      	movs	r1, r0
 800d4d6:	e7ed      	b.n	800d4b4 <__s2b+0x6c>
 800d4d8:	08015079 	.word	0x08015079
 800d4dc:	080150ea 	.word	0x080150ea

0800d4e0 <__hi0bits>:
 800d4e0:	0003      	movs	r3, r0
 800d4e2:	0c02      	lsrs	r2, r0, #16
 800d4e4:	2000      	movs	r0, #0
 800d4e6:	4282      	cmp	r2, r0
 800d4e8:	d101      	bne.n	800d4ee <__hi0bits+0xe>
 800d4ea:	041b      	lsls	r3, r3, #16
 800d4ec:	3010      	adds	r0, #16
 800d4ee:	0e1a      	lsrs	r2, r3, #24
 800d4f0:	d101      	bne.n	800d4f6 <__hi0bits+0x16>
 800d4f2:	3008      	adds	r0, #8
 800d4f4:	021b      	lsls	r3, r3, #8
 800d4f6:	0f1a      	lsrs	r2, r3, #28
 800d4f8:	d101      	bne.n	800d4fe <__hi0bits+0x1e>
 800d4fa:	3004      	adds	r0, #4
 800d4fc:	011b      	lsls	r3, r3, #4
 800d4fe:	0f9a      	lsrs	r2, r3, #30
 800d500:	d101      	bne.n	800d506 <__hi0bits+0x26>
 800d502:	3002      	adds	r0, #2
 800d504:	009b      	lsls	r3, r3, #2
 800d506:	2b00      	cmp	r3, #0
 800d508:	db03      	blt.n	800d512 <__hi0bits+0x32>
 800d50a:	3001      	adds	r0, #1
 800d50c:	005b      	lsls	r3, r3, #1
 800d50e:	d400      	bmi.n	800d512 <__hi0bits+0x32>
 800d510:	2020      	movs	r0, #32
 800d512:	4770      	bx	lr

0800d514 <__lo0bits>:
 800d514:	6803      	ldr	r3, [r0, #0]
 800d516:	0001      	movs	r1, r0
 800d518:	2207      	movs	r2, #7
 800d51a:	0018      	movs	r0, r3
 800d51c:	4010      	ands	r0, r2
 800d51e:	4213      	tst	r3, r2
 800d520:	d00d      	beq.n	800d53e <__lo0bits+0x2a>
 800d522:	3a06      	subs	r2, #6
 800d524:	2000      	movs	r0, #0
 800d526:	4213      	tst	r3, r2
 800d528:	d105      	bne.n	800d536 <__lo0bits+0x22>
 800d52a:	3002      	adds	r0, #2
 800d52c:	4203      	tst	r3, r0
 800d52e:	d003      	beq.n	800d538 <__lo0bits+0x24>
 800d530:	40d3      	lsrs	r3, r2
 800d532:	0010      	movs	r0, r2
 800d534:	600b      	str	r3, [r1, #0]
 800d536:	4770      	bx	lr
 800d538:	089b      	lsrs	r3, r3, #2
 800d53a:	600b      	str	r3, [r1, #0]
 800d53c:	e7fb      	b.n	800d536 <__lo0bits+0x22>
 800d53e:	b29a      	uxth	r2, r3
 800d540:	2a00      	cmp	r2, #0
 800d542:	d101      	bne.n	800d548 <__lo0bits+0x34>
 800d544:	2010      	movs	r0, #16
 800d546:	0c1b      	lsrs	r3, r3, #16
 800d548:	b2da      	uxtb	r2, r3
 800d54a:	2a00      	cmp	r2, #0
 800d54c:	d101      	bne.n	800d552 <__lo0bits+0x3e>
 800d54e:	3008      	adds	r0, #8
 800d550:	0a1b      	lsrs	r3, r3, #8
 800d552:	071a      	lsls	r2, r3, #28
 800d554:	d101      	bne.n	800d55a <__lo0bits+0x46>
 800d556:	3004      	adds	r0, #4
 800d558:	091b      	lsrs	r3, r3, #4
 800d55a:	079a      	lsls	r2, r3, #30
 800d55c:	d101      	bne.n	800d562 <__lo0bits+0x4e>
 800d55e:	3002      	adds	r0, #2
 800d560:	089b      	lsrs	r3, r3, #2
 800d562:	07da      	lsls	r2, r3, #31
 800d564:	d4e9      	bmi.n	800d53a <__lo0bits+0x26>
 800d566:	3001      	adds	r0, #1
 800d568:	085b      	lsrs	r3, r3, #1
 800d56a:	d1e6      	bne.n	800d53a <__lo0bits+0x26>
 800d56c:	2020      	movs	r0, #32
 800d56e:	e7e2      	b.n	800d536 <__lo0bits+0x22>

0800d570 <__i2b>:
 800d570:	b510      	push	{r4, lr}
 800d572:	000c      	movs	r4, r1
 800d574:	2101      	movs	r1, #1
 800d576:	f7ff fef1 	bl	800d35c <_Balloc>
 800d57a:	2800      	cmp	r0, #0
 800d57c:	d107      	bne.n	800d58e <__i2b+0x1e>
 800d57e:	2146      	movs	r1, #70	; 0x46
 800d580:	4c05      	ldr	r4, [pc, #20]	; (800d598 <__i2b+0x28>)
 800d582:	0002      	movs	r2, r0
 800d584:	4b05      	ldr	r3, [pc, #20]	; (800d59c <__i2b+0x2c>)
 800d586:	0020      	movs	r0, r4
 800d588:	31ff      	adds	r1, #255	; 0xff
 800d58a:	f003 f9ab 	bl	80108e4 <__assert_func>
 800d58e:	2301      	movs	r3, #1
 800d590:	6144      	str	r4, [r0, #20]
 800d592:	6103      	str	r3, [r0, #16]
 800d594:	bd10      	pop	{r4, pc}
 800d596:	46c0      	nop			; (mov r8, r8)
 800d598:	080150ea 	.word	0x080150ea
 800d59c:	08015079 	.word	0x08015079

0800d5a0 <__multiply>:
 800d5a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5a2:	0015      	movs	r5, r2
 800d5a4:	690a      	ldr	r2, [r1, #16]
 800d5a6:	692b      	ldr	r3, [r5, #16]
 800d5a8:	000c      	movs	r4, r1
 800d5aa:	b08b      	sub	sp, #44	; 0x2c
 800d5ac:	429a      	cmp	r2, r3
 800d5ae:	da01      	bge.n	800d5b4 <__multiply+0x14>
 800d5b0:	002c      	movs	r4, r5
 800d5b2:	000d      	movs	r5, r1
 800d5b4:	6927      	ldr	r7, [r4, #16]
 800d5b6:	692e      	ldr	r6, [r5, #16]
 800d5b8:	6861      	ldr	r1, [r4, #4]
 800d5ba:	19bb      	adds	r3, r7, r6
 800d5bc:	9303      	str	r3, [sp, #12]
 800d5be:	68a3      	ldr	r3, [r4, #8]
 800d5c0:	19ba      	adds	r2, r7, r6
 800d5c2:	4293      	cmp	r3, r2
 800d5c4:	da00      	bge.n	800d5c8 <__multiply+0x28>
 800d5c6:	3101      	adds	r1, #1
 800d5c8:	f7ff fec8 	bl	800d35c <_Balloc>
 800d5cc:	9002      	str	r0, [sp, #8]
 800d5ce:	2800      	cmp	r0, #0
 800d5d0:	d106      	bne.n	800d5e0 <__multiply+0x40>
 800d5d2:	21b1      	movs	r1, #177	; 0xb1
 800d5d4:	4b48      	ldr	r3, [pc, #288]	; (800d6f8 <__multiply+0x158>)
 800d5d6:	4849      	ldr	r0, [pc, #292]	; (800d6fc <__multiply+0x15c>)
 800d5d8:	9a02      	ldr	r2, [sp, #8]
 800d5da:	0049      	lsls	r1, r1, #1
 800d5dc:	f003 f982 	bl	80108e4 <__assert_func>
 800d5e0:	9b02      	ldr	r3, [sp, #8]
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	3314      	adds	r3, #20
 800d5e6:	469c      	mov	ip, r3
 800d5e8:	19bb      	adds	r3, r7, r6
 800d5ea:	009b      	lsls	r3, r3, #2
 800d5ec:	4463      	add	r3, ip
 800d5ee:	9304      	str	r3, [sp, #16]
 800d5f0:	4663      	mov	r3, ip
 800d5f2:	9904      	ldr	r1, [sp, #16]
 800d5f4:	428b      	cmp	r3, r1
 800d5f6:	d32a      	bcc.n	800d64e <__multiply+0xae>
 800d5f8:	0023      	movs	r3, r4
 800d5fa:	00bf      	lsls	r7, r7, #2
 800d5fc:	3314      	adds	r3, #20
 800d5fe:	3514      	adds	r5, #20
 800d600:	9308      	str	r3, [sp, #32]
 800d602:	00b6      	lsls	r6, r6, #2
 800d604:	19db      	adds	r3, r3, r7
 800d606:	9305      	str	r3, [sp, #20]
 800d608:	19ab      	adds	r3, r5, r6
 800d60a:	9309      	str	r3, [sp, #36]	; 0x24
 800d60c:	2304      	movs	r3, #4
 800d60e:	9306      	str	r3, [sp, #24]
 800d610:	0023      	movs	r3, r4
 800d612:	9a05      	ldr	r2, [sp, #20]
 800d614:	3315      	adds	r3, #21
 800d616:	9501      	str	r5, [sp, #4]
 800d618:	429a      	cmp	r2, r3
 800d61a:	d305      	bcc.n	800d628 <__multiply+0x88>
 800d61c:	1b13      	subs	r3, r2, r4
 800d61e:	3b15      	subs	r3, #21
 800d620:	089b      	lsrs	r3, r3, #2
 800d622:	3301      	adds	r3, #1
 800d624:	009b      	lsls	r3, r3, #2
 800d626:	9306      	str	r3, [sp, #24]
 800d628:	9b01      	ldr	r3, [sp, #4]
 800d62a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d62c:	4293      	cmp	r3, r2
 800d62e:	d310      	bcc.n	800d652 <__multiply+0xb2>
 800d630:	9b03      	ldr	r3, [sp, #12]
 800d632:	2b00      	cmp	r3, #0
 800d634:	dd05      	ble.n	800d642 <__multiply+0xa2>
 800d636:	9b04      	ldr	r3, [sp, #16]
 800d638:	3b04      	subs	r3, #4
 800d63a:	9304      	str	r3, [sp, #16]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d056      	beq.n	800d6f0 <__multiply+0x150>
 800d642:	9b02      	ldr	r3, [sp, #8]
 800d644:	9a03      	ldr	r2, [sp, #12]
 800d646:	0018      	movs	r0, r3
 800d648:	611a      	str	r2, [r3, #16]
 800d64a:	b00b      	add	sp, #44	; 0x2c
 800d64c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d64e:	c304      	stmia	r3!, {r2}
 800d650:	e7cf      	b.n	800d5f2 <__multiply+0x52>
 800d652:	9b01      	ldr	r3, [sp, #4]
 800d654:	6818      	ldr	r0, [r3, #0]
 800d656:	b280      	uxth	r0, r0
 800d658:	2800      	cmp	r0, #0
 800d65a:	d01e      	beq.n	800d69a <__multiply+0xfa>
 800d65c:	4667      	mov	r7, ip
 800d65e:	2500      	movs	r5, #0
 800d660:	9e08      	ldr	r6, [sp, #32]
 800d662:	ce02      	ldmia	r6!, {r1}
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	9307      	str	r3, [sp, #28]
 800d668:	b28b      	uxth	r3, r1
 800d66a:	4343      	muls	r3, r0
 800d66c:	001a      	movs	r2, r3
 800d66e:	466b      	mov	r3, sp
 800d670:	8b9b      	ldrh	r3, [r3, #28]
 800d672:	18d3      	adds	r3, r2, r3
 800d674:	195b      	adds	r3, r3, r5
 800d676:	0c0d      	lsrs	r5, r1, #16
 800d678:	4345      	muls	r5, r0
 800d67a:	9a07      	ldr	r2, [sp, #28]
 800d67c:	0c11      	lsrs	r1, r2, #16
 800d67e:	1869      	adds	r1, r5, r1
 800d680:	0c1a      	lsrs	r2, r3, #16
 800d682:	188a      	adds	r2, r1, r2
 800d684:	b29b      	uxth	r3, r3
 800d686:	0c15      	lsrs	r5, r2, #16
 800d688:	0412      	lsls	r2, r2, #16
 800d68a:	431a      	orrs	r2, r3
 800d68c:	9b05      	ldr	r3, [sp, #20]
 800d68e:	c704      	stmia	r7!, {r2}
 800d690:	42b3      	cmp	r3, r6
 800d692:	d8e6      	bhi.n	800d662 <__multiply+0xc2>
 800d694:	4663      	mov	r3, ip
 800d696:	9a06      	ldr	r2, [sp, #24]
 800d698:	509d      	str	r5, [r3, r2]
 800d69a:	9b01      	ldr	r3, [sp, #4]
 800d69c:	6818      	ldr	r0, [r3, #0]
 800d69e:	0c00      	lsrs	r0, r0, #16
 800d6a0:	d020      	beq.n	800d6e4 <__multiply+0x144>
 800d6a2:	4663      	mov	r3, ip
 800d6a4:	0025      	movs	r5, r4
 800d6a6:	4661      	mov	r1, ip
 800d6a8:	2700      	movs	r7, #0
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	3514      	adds	r5, #20
 800d6ae:	682a      	ldr	r2, [r5, #0]
 800d6b0:	680e      	ldr	r6, [r1, #0]
 800d6b2:	b292      	uxth	r2, r2
 800d6b4:	4342      	muls	r2, r0
 800d6b6:	0c36      	lsrs	r6, r6, #16
 800d6b8:	1992      	adds	r2, r2, r6
 800d6ba:	19d2      	adds	r2, r2, r7
 800d6bc:	0416      	lsls	r6, r2, #16
 800d6be:	b29b      	uxth	r3, r3
 800d6c0:	431e      	orrs	r6, r3
 800d6c2:	600e      	str	r6, [r1, #0]
 800d6c4:	cd40      	ldmia	r5!, {r6}
 800d6c6:	684b      	ldr	r3, [r1, #4]
 800d6c8:	0c36      	lsrs	r6, r6, #16
 800d6ca:	4346      	muls	r6, r0
 800d6cc:	b29b      	uxth	r3, r3
 800d6ce:	0c12      	lsrs	r2, r2, #16
 800d6d0:	18f3      	adds	r3, r6, r3
 800d6d2:	189b      	adds	r3, r3, r2
 800d6d4:	9a05      	ldr	r2, [sp, #20]
 800d6d6:	0c1f      	lsrs	r7, r3, #16
 800d6d8:	3104      	adds	r1, #4
 800d6da:	42aa      	cmp	r2, r5
 800d6dc:	d8e7      	bhi.n	800d6ae <__multiply+0x10e>
 800d6de:	4662      	mov	r2, ip
 800d6e0:	9906      	ldr	r1, [sp, #24]
 800d6e2:	5053      	str	r3, [r2, r1]
 800d6e4:	9b01      	ldr	r3, [sp, #4]
 800d6e6:	3304      	adds	r3, #4
 800d6e8:	9301      	str	r3, [sp, #4]
 800d6ea:	2304      	movs	r3, #4
 800d6ec:	449c      	add	ip, r3
 800d6ee:	e79b      	b.n	800d628 <__multiply+0x88>
 800d6f0:	9b03      	ldr	r3, [sp, #12]
 800d6f2:	3b01      	subs	r3, #1
 800d6f4:	9303      	str	r3, [sp, #12]
 800d6f6:	e79b      	b.n	800d630 <__multiply+0x90>
 800d6f8:	08015079 	.word	0x08015079
 800d6fc:	080150ea 	.word	0x080150ea

0800d700 <__pow5mult>:
 800d700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d702:	2303      	movs	r3, #3
 800d704:	0015      	movs	r5, r2
 800d706:	0007      	movs	r7, r0
 800d708:	000e      	movs	r6, r1
 800d70a:	401a      	ands	r2, r3
 800d70c:	421d      	tst	r5, r3
 800d70e:	d008      	beq.n	800d722 <__pow5mult+0x22>
 800d710:	491a      	ldr	r1, [pc, #104]	; (800d77c <__pow5mult+0x7c>)
 800d712:	3a01      	subs	r2, #1
 800d714:	0092      	lsls	r2, r2, #2
 800d716:	5852      	ldr	r2, [r2, r1]
 800d718:	2300      	movs	r3, #0
 800d71a:	0031      	movs	r1, r6
 800d71c:	f7ff fe50 	bl	800d3c0 <__multadd>
 800d720:	0006      	movs	r6, r0
 800d722:	10ad      	asrs	r5, r5, #2
 800d724:	d027      	beq.n	800d776 <__pow5mult+0x76>
 800d726:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800d728:	2c00      	cmp	r4, #0
 800d72a:	d107      	bne.n	800d73c <__pow5mult+0x3c>
 800d72c:	0038      	movs	r0, r7
 800d72e:	4914      	ldr	r1, [pc, #80]	; (800d780 <__pow5mult+0x80>)
 800d730:	f7ff ff1e 	bl	800d570 <__i2b>
 800d734:	2300      	movs	r3, #0
 800d736:	0004      	movs	r4, r0
 800d738:	6438      	str	r0, [r7, #64]	; 0x40
 800d73a:	6003      	str	r3, [r0, #0]
 800d73c:	2301      	movs	r3, #1
 800d73e:	421d      	tst	r5, r3
 800d740:	d00a      	beq.n	800d758 <__pow5mult+0x58>
 800d742:	0031      	movs	r1, r6
 800d744:	0022      	movs	r2, r4
 800d746:	0038      	movs	r0, r7
 800d748:	f7ff ff2a 	bl	800d5a0 <__multiply>
 800d74c:	0031      	movs	r1, r6
 800d74e:	9001      	str	r0, [sp, #4]
 800d750:	0038      	movs	r0, r7
 800d752:	f7ff fe2b 	bl	800d3ac <_Bfree>
 800d756:	9e01      	ldr	r6, [sp, #4]
 800d758:	106d      	asrs	r5, r5, #1
 800d75a:	d00c      	beq.n	800d776 <__pow5mult+0x76>
 800d75c:	6820      	ldr	r0, [r4, #0]
 800d75e:	2800      	cmp	r0, #0
 800d760:	d107      	bne.n	800d772 <__pow5mult+0x72>
 800d762:	0022      	movs	r2, r4
 800d764:	0021      	movs	r1, r4
 800d766:	0038      	movs	r0, r7
 800d768:	f7ff ff1a 	bl	800d5a0 <__multiply>
 800d76c:	2300      	movs	r3, #0
 800d76e:	6020      	str	r0, [r4, #0]
 800d770:	6003      	str	r3, [r0, #0]
 800d772:	0004      	movs	r4, r0
 800d774:	e7e2      	b.n	800d73c <__pow5mult+0x3c>
 800d776:	0030      	movs	r0, r6
 800d778:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d77a:	46c0      	nop			; (mov r8, r8)
 800d77c:	08015238 	.word	0x08015238
 800d780:	00000271 	.word	0x00000271

0800d784 <__lshift>:
 800d784:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d786:	000c      	movs	r4, r1
 800d788:	0017      	movs	r7, r2
 800d78a:	6923      	ldr	r3, [r4, #16]
 800d78c:	1155      	asrs	r5, r2, #5
 800d78e:	b087      	sub	sp, #28
 800d790:	18eb      	adds	r3, r5, r3
 800d792:	9302      	str	r3, [sp, #8]
 800d794:	3301      	adds	r3, #1
 800d796:	9301      	str	r3, [sp, #4]
 800d798:	6849      	ldr	r1, [r1, #4]
 800d79a:	68a3      	ldr	r3, [r4, #8]
 800d79c:	9004      	str	r0, [sp, #16]
 800d79e:	9a01      	ldr	r2, [sp, #4]
 800d7a0:	4293      	cmp	r3, r2
 800d7a2:	db10      	blt.n	800d7c6 <__lshift+0x42>
 800d7a4:	9804      	ldr	r0, [sp, #16]
 800d7a6:	f7ff fdd9 	bl	800d35c <_Balloc>
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	0002      	movs	r2, r0
 800d7ae:	0006      	movs	r6, r0
 800d7b0:	0019      	movs	r1, r3
 800d7b2:	3214      	adds	r2, #20
 800d7b4:	4298      	cmp	r0, r3
 800d7b6:	d10c      	bne.n	800d7d2 <__lshift+0x4e>
 800d7b8:	31df      	adds	r1, #223	; 0xdf
 800d7ba:	0032      	movs	r2, r6
 800d7bc:	4b26      	ldr	r3, [pc, #152]	; (800d858 <__lshift+0xd4>)
 800d7be:	4827      	ldr	r0, [pc, #156]	; (800d85c <__lshift+0xd8>)
 800d7c0:	31ff      	adds	r1, #255	; 0xff
 800d7c2:	f003 f88f 	bl	80108e4 <__assert_func>
 800d7c6:	3101      	adds	r1, #1
 800d7c8:	005b      	lsls	r3, r3, #1
 800d7ca:	e7e8      	b.n	800d79e <__lshift+0x1a>
 800d7cc:	0098      	lsls	r0, r3, #2
 800d7ce:	5011      	str	r1, [r2, r0]
 800d7d0:	3301      	adds	r3, #1
 800d7d2:	42ab      	cmp	r3, r5
 800d7d4:	dbfa      	blt.n	800d7cc <__lshift+0x48>
 800d7d6:	43eb      	mvns	r3, r5
 800d7d8:	17db      	asrs	r3, r3, #31
 800d7da:	401d      	ands	r5, r3
 800d7dc:	211f      	movs	r1, #31
 800d7de:	0023      	movs	r3, r4
 800d7e0:	0038      	movs	r0, r7
 800d7e2:	00ad      	lsls	r5, r5, #2
 800d7e4:	1955      	adds	r5, r2, r5
 800d7e6:	6922      	ldr	r2, [r4, #16]
 800d7e8:	3314      	adds	r3, #20
 800d7ea:	0092      	lsls	r2, r2, #2
 800d7ec:	4008      	ands	r0, r1
 800d7ee:	4684      	mov	ip, r0
 800d7f0:	189a      	adds	r2, r3, r2
 800d7f2:	420f      	tst	r7, r1
 800d7f4:	d02a      	beq.n	800d84c <__lshift+0xc8>
 800d7f6:	3101      	adds	r1, #1
 800d7f8:	1a09      	subs	r1, r1, r0
 800d7fa:	9105      	str	r1, [sp, #20]
 800d7fc:	2100      	movs	r1, #0
 800d7fe:	9503      	str	r5, [sp, #12]
 800d800:	4667      	mov	r7, ip
 800d802:	6818      	ldr	r0, [r3, #0]
 800d804:	40b8      	lsls	r0, r7
 800d806:	4308      	orrs	r0, r1
 800d808:	9903      	ldr	r1, [sp, #12]
 800d80a:	c101      	stmia	r1!, {r0}
 800d80c:	9103      	str	r1, [sp, #12]
 800d80e:	9805      	ldr	r0, [sp, #20]
 800d810:	cb02      	ldmia	r3!, {r1}
 800d812:	40c1      	lsrs	r1, r0
 800d814:	429a      	cmp	r2, r3
 800d816:	d8f3      	bhi.n	800d800 <__lshift+0x7c>
 800d818:	0020      	movs	r0, r4
 800d81a:	3015      	adds	r0, #21
 800d81c:	2304      	movs	r3, #4
 800d81e:	4282      	cmp	r2, r0
 800d820:	d304      	bcc.n	800d82c <__lshift+0xa8>
 800d822:	1b13      	subs	r3, r2, r4
 800d824:	3b15      	subs	r3, #21
 800d826:	089b      	lsrs	r3, r3, #2
 800d828:	3301      	adds	r3, #1
 800d82a:	009b      	lsls	r3, r3, #2
 800d82c:	50e9      	str	r1, [r5, r3]
 800d82e:	2900      	cmp	r1, #0
 800d830:	d002      	beq.n	800d838 <__lshift+0xb4>
 800d832:	9b02      	ldr	r3, [sp, #8]
 800d834:	3302      	adds	r3, #2
 800d836:	9301      	str	r3, [sp, #4]
 800d838:	9b01      	ldr	r3, [sp, #4]
 800d83a:	9804      	ldr	r0, [sp, #16]
 800d83c:	3b01      	subs	r3, #1
 800d83e:	0021      	movs	r1, r4
 800d840:	6133      	str	r3, [r6, #16]
 800d842:	f7ff fdb3 	bl	800d3ac <_Bfree>
 800d846:	0030      	movs	r0, r6
 800d848:	b007      	add	sp, #28
 800d84a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d84c:	cb02      	ldmia	r3!, {r1}
 800d84e:	c502      	stmia	r5!, {r1}
 800d850:	429a      	cmp	r2, r3
 800d852:	d8fb      	bhi.n	800d84c <__lshift+0xc8>
 800d854:	e7f0      	b.n	800d838 <__lshift+0xb4>
 800d856:	46c0      	nop			; (mov r8, r8)
 800d858:	08015079 	.word	0x08015079
 800d85c:	080150ea 	.word	0x080150ea

0800d860 <__mcmp>:
 800d860:	b530      	push	{r4, r5, lr}
 800d862:	690b      	ldr	r3, [r1, #16]
 800d864:	6904      	ldr	r4, [r0, #16]
 800d866:	0002      	movs	r2, r0
 800d868:	1ae0      	subs	r0, r4, r3
 800d86a:	429c      	cmp	r4, r3
 800d86c:	d10e      	bne.n	800d88c <__mcmp+0x2c>
 800d86e:	3214      	adds	r2, #20
 800d870:	009b      	lsls	r3, r3, #2
 800d872:	3114      	adds	r1, #20
 800d874:	0014      	movs	r4, r2
 800d876:	18c9      	adds	r1, r1, r3
 800d878:	18d2      	adds	r2, r2, r3
 800d87a:	3a04      	subs	r2, #4
 800d87c:	3904      	subs	r1, #4
 800d87e:	6815      	ldr	r5, [r2, #0]
 800d880:	680b      	ldr	r3, [r1, #0]
 800d882:	429d      	cmp	r5, r3
 800d884:	d003      	beq.n	800d88e <__mcmp+0x2e>
 800d886:	2001      	movs	r0, #1
 800d888:	429d      	cmp	r5, r3
 800d88a:	d303      	bcc.n	800d894 <__mcmp+0x34>
 800d88c:	bd30      	pop	{r4, r5, pc}
 800d88e:	4294      	cmp	r4, r2
 800d890:	d3f3      	bcc.n	800d87a <__mcmp+0x1a>
 800d892:	e7fb      	b.n	800d88c <__mcmp+0x2c>
 800d894:	4240      	negs	r0, r0
 800d896:	e7f9      	b.n	800d88c <__mcmp+0x2c>

0800d898 <__mdiff>:
 800d898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d89a:	000e      	movs	r6, r1
 800d89c:	0007      	movs	r7, r0
 800d89e:	0011      	movs	r1, r2
 800d8a0:	0030      	movs	r0, r6
 800d8a2:	b087      	sub	sp, #28
 800d8a4:	0014      	movs	r4, r2
 800d8a6:	f7ff ffdb 	bl	800d860 <__mcmp>
 800d8aa:	1e05      	subs	r5, r0, #0
 800d8ac:	d110      	bne.n	800d8d0 <__mdiff+0x38>
 800d8ae:	0001      	movs	r1, r0
 800d8b0:	0038      	movs	r0, r7
 800d8b2:	f7ff fd53 	bl	800d35c <_Balloc>
 800d8b6:	1e02      	subs	r2, r0, #0
 800d8b8:	d104      	bne.n	800d8c4 <__mdiff+0x2c>
 800d8ba:	4b3f      	ldr	r3, [pc, #252]	; (800d9b8 <__mdiff+0x120>)
 800d8bc:	483f      	ldr	r0, [pc, #252]	; (800d9bc <__mdiff+0x124>)
 800d8be:	4940      	ldr	r1, [pc, #256]	; (800d9c0 <__mdiff+0x128>)
 800d8c0:	f003 f810 	bl	80108e4 <__assert_func>
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	6145      	str	r5, [r0, #20]
 800d8c8:	6103      	str	r3, [r0, #16]
 800d8ca:	0010      	movs	r0, r2
 800d8cc:	b007      	add	sp, #28
 800d8ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	9301      	str	r3, [sp, #4]
 800d8d4:	2800      	cmp	r0, #0
 800d8d6:	db04      	blt.n	800d8e2 <__mdiff+0x4a>
 800d8d8:	0023      	movs	r3, r4
 800d8da:	0034      	movs	r4, r6
 800d8dc:	001e      	movs	r6, r3
 800d8de:	2300      	movs	r3, #0
 800d8e0:	9301      	str	r3, [sp, #4]
 800d8e2:	0038      	movs	r0, r7
 800d8e4:	6861      	ldr	r1, [r4, #4]
 800d8e6:	f7ff fd39 	bl	800d35c <_Balloc>
 800d8ea:	1e02      	subs	r2, r0, #0
 800d8ec:	d103      	bne.n	800d8f6 <__mdiff+0x5e>
 800d8ee:	4b32      	ldr	r3, [pc, #200]	; (800d9b8 <__mdiff+0x120>)
 800d8f0:	4832      	ldr	r0, [pc, #200]	; (800d9bc <__mdiff+0x124>)
 800d8f2:	4934      	ldr	r1, [pc, #208]	; (800d9c4 <__mdiff+0x12c>)
 800d8f4:	e7e4      	b.n	800d8c0 <__mdiff+0x28>
 800d8f6:	9b01      	ldr	r3, [sp, #4]
 800d8f8:	2700      	movs	r7, #0
 800d8fa:	60c3      	str	r3, [r0, #12]
 800d8fc:	6920      	ldr	r0, [r4, #16]
 800d8fe:	3414      	adds	r4, #20
 800d900:	0083      	lsls	r3, r0, #2
 800d902:	18e3      	adds	r3, r4, r3
 800d904:	0021      	movs	r1, r4
 800d906:	9401      	str	r4, [sp, #4]
 800d908:	0034      	movs	r4, r6
 800d90a:	9302      	str	r3, [sp, #8]
 800d90c:	6933      	ldr	r3, [r6, #16]
 800d90e:	3414      	adds	r4, #20
 800d910:	009b      	lsls	r3, r3, #2
 800d912:	18e3      	adds	r3, r4, r3
 800d914:	9303      	str	r3, [sp, #12]
 800d916:	0013      	movs	r3, r2
 800d918:	3314      	adds	r3, #20
 800d91a:	469c      	mov	ip, r3
 800d91c:	9305      	str	r3, [sp, #20]
 800d91e:	9104      	str	r1, [sp, #16]
 800d920:	9b04      	ldr	r3, [sp, #16]
 800d922:	cc02      	ldmia	r4!, {r1}
 800d924:	cb20      	ldmia	r3!, {r5}
 800d926:	9304      	str	r3, [sp, #16]
 800d928:	b2ab      	uxth	r3, r5
 800d92a:	19df      	adds	r7, r3, r7
 800d92c:	b28b      	uxth	r3, r1
 800d92e:	1afb      	subs	r3, r7, r3
 800d930:	0c09      	lsrs	r1, r1, #16
 800d932:	0c2d      	lsrs	r5, r5, #16
 800d934:	1a6d      	subs	r5, r5, r1
 800d936:	1419      	asrs	r1, r3, #16
 800d938:	1869      	adds	r1, r5, r1
 800d93a:	b29b      	uxth	r3, r3
 800d93c:	140f      	asrs	r7, r1, #16
 800d93e:	0409      	lsls	r1, r1, #16
 800d940:	4319      	orrs	r1, r3
 800d942:	4663      	mov	r3, ip
 800d944:	c302      	stmia	r3!, {r1}
 800d946:	469c      	mov	ip, r3
 800d948:	9b03      	ldr	r3, [sp, #12]
 800d94a:	42a3      	cmp	r3, r4
 800d94c:	d8e8      	bhi.n	800d920 <__mdiff+0x88>
 800d94e:	0031      	movs	r1, r6
 800d950:	9c03      	ldr	r4, [sp, #12]
 800d952:	3115      	adds	r1, #21
 800d954:	2304      	movs	r3, #4
 800d956:	428c      	cmp	r4, r1
 800d958:	d304      	bcc.n	800d964 <__mdiff+0xcc>
 800d95a:	1ba3      	subs	r3, r4, r6
 800d95c:	3b15      	subs	r3, #21
 800d95e:	089b      	lsrs	r3, r3, #2
 800d960:	3301      	adds	r3, #1
 800d962:	009b      	lsls	r3, r3, #2
 800d964:	9901      	ldr	r1, [sp, #4]
 800d966:	18cd      	adds	r5, r1, r3
 800d968:	9905      	ldr	r1, [sp, #20]
 800d96a:	002e      	movs	r6, r5
 800d96c:	18cb      	adds	r3, r1, r3
 800d96e:	469c      	mov	ip, r3
 800d970:	9902      	ldr	r1, [sp, #8]
 800d972:	428e      	cmp	r6, r1
 800d974:	d310      	bcc.n	800d998 <__mdiff+0x100>
 800d976:	9e02      	ldr	r6, [sp, #8]
 800d978:	1ee9      	subs	r1, r5, #3
 800d97a:	2400      	movs	r4, #0
 800d97c:	428e      	cmp	r6, r1
 800d97e:	d304      	bcc.n	800d98a <__mdiff+0xf2>
 800d980:	0031      	movs	r1, r6
 800d982:	3103      	adds	r1, #3
 800d984:	1b49      	subs	r1, r1, r5
 800d986:	0889      	lsrs	r1, r1, #2
 800d988:	008c      	lsls	r4, r1, #2
 800d98a:	191b      	adds	r3, r3, r4
 800d98c:	3b04      	subs	r3, #4
 800d98e:	6819      	ldr	r1, [r3, #0]
 800d990:	2900      	cmp	r1, #0
 800d992:	d00f      	beq.n	800d9b4 <__mdiff+0x11c>
 800d994:	6110      	str	r0, [r2, #16]
 800d996:	e798      	b.n	800d8ca <__mdiff+0x32>
 800d998:	ce02      	ldmia	r6!, {r1}
 800d99a:	b28c      	uxth	r4, r1
 800d99c:	19e4      	adds	r4, r4, r7
 800d99e:	0c0f      	lsrs	r7, r1, #16
 800d9a0:	1421      	asrs	r1, r4, #16
 800d9a2:	1879      	adds	r1, r7, r1
 800d9a4:	b2a4      	uxth	r4, r4
 800d9a6:	140f      	asrs	r7, r1, #16
 800d9a8:	0409      	lsls	r1, r1, #16
 800d9aa:	4321      	orrs	r1, r4
 800d9ac:	4664      	mov	r4, ip
 800d9ae:	c402      	stmia	r4!, {r1}
 800d9b0:	46a4      	mov	ip, r4
 800d9b2:	e7dd      	b.n	800d970 <__mdiff+0xd8>
 800d9b4:	3801      	subs	r0, #1
 800d9b6:	e7e9      	b.n	800d98c <__mdiff+0xf4>
 800d9b8:	08015079 	.word	0x08015079
 800d9bc:	080150ea 	.word	0x080150ea
 800d9c0:	00000237 	.word	0x00000237
 800d9c4:	00000245 	.word	0x00000245

0800d9c8 <__ulp>:
 800d9c8:	2000      	movs	r0, #0
 800d9ca:	4b0b      	ldr	r3, [pc, #44]	; (800d9f8 <__ulp+0x30>)
 800d9cc:	4019      	ands	r1, r3
 800d9ce:	4b0b      	ldr	r3, [pc, #44]	; (800d9fc <__ulp+0x34>)
 800d9d0:	18c9      	adds	r1, r1, r3
 800d9d2:	4281      	cmp	r1, r0
 800d9d4:	dc06      	bgt.n	800d9e4 <__ulp+0x1c>
 800d9d6:	4249      	negs	r1, r1
 800d9d8:	150b      	asrs	r3, r1, #20
 800d9da:	2b13      	cmp	r3, #19
 800d9dc:	dc03      	bgt.n	800d9e6 <__ulp+0x1e>
 800d9de:	2180      	movs	r1, #128	; 0x80
 800d9e0:	0309      	lsls	r1, r1, #12
 800d9e2:	4119      	asrs	r1, r3
 800d9e4:	4770      	bx	lr
 800d9e6:	3b14      	subs	r3, #20
 800d9e8:	2001      	movs	r0, #1
 800d9ea:	2b1e      	cmp	r3, #30
 800d9ec:	dc02      	bgt.n	800d9f4 <__ulp+0x2c>
 800d9ee:	2080      	movs	r0, #128	; 0x80
 800d9f0:	0600      	lsls	r0, r0, #24
 800d9f2:	40d8      	lsrs	r0, r3
 800d9f4:	2100      	movs	r1, #0
 800d9f6:	e7f5      	b.n	800d9e4 <__ulp+0x1c>
 800d9f8:	7ff00000 	.word	0x7ff00000
 800d9fc:	fcc00000 	.word	0xfcc00000

0800da00 <__b2d>:
 800da00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da02:	0006      	movs	r6, r0
 800da04:	6903      	ldr	r3, [r0, #16]
 800da06:	3614      	adds	r6, #20
 800da08:	009b      	lsls	r3, r3, #2
 800da0a:	18f3      	adds	r3, r6, r3
 800da0c:	1f1d      	subs	r5, r3, #4
 800da0e:	682c      	ldr	r4, [r5, #0]
 800da10:	000f      	movs	r7, r1
 800da12:	0020      	movs	r0, r4
 800da14:	9301      	str	r3, [sp, #4]
 800da16:	f7ff fd63 	bl	800d4e0 <__hi0bits>
 800da1a:	2220      	movs	r2, #32
 800da1c:	1a12      	subs	r2, r2, r0
 800da1e:	603a      	str	r2, [r7, #0]
 800da20:	0003      	movs	r3, r0
 800da22:	4a1c      	ldr	r2, [pc, #112]	; (800da94 <__b2d+0x94>)
 800da24:	280a      	cmp	r0, #10
 800da26:	dc15      	bgt.n	800da54 <__b2d+0x54>
 800da28:	210b      	movs	r1, #11
 800da2a:	0027      	movs	r7, r4
 800da2c:	1a09      	subs	r1, r1, r0
 800da2e:	40cf      	lsrs	r7, r1
 800da30:	433a      	orrs	r2, r7
 800da32:	468c      	mov	ip, r1
 800da34:	0011      	movs	r1, r2
 800da36:	2200      	movs	r2, #0
 800da38:	42ae      	cmp	r6, r5
 800da3a:	d202      	bcs.n	800da42 <__b2d+0x42>
 800da3c:	9a01      	ldr	r2, [sp, #4]
 800da3e:	3a08      	subs	r2, #8
 800da40:	6812      	ldr	r2, [r2, #0]
 800da42:	3315      	adds	r3, #21
 800da44:	409c      	lsls	r4, r3
 800da46:	4663      	mov	r3, ip
 800da48:	0027      	movs	r7, r4
 800da4a:	40da      	lsrs	r2, r3
 800da4c:	4317      	orrs	r7, r2
 800da4e:	0038      	movs	r0, r7
 800da50:	b003      	add	sp, #12
 800da52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da54:	2700      	movs	r7, #0
 800da56:	42ae      	cmp	r6, r5
 800da58:	d202      	bcs.n	800da60 <__b2d+0x60>
 800da5a:	9d01      	ldr	r5, [sp, #4]
 800da5c:	3d08      	subs	r5, #8
 800da5e:	682f      	ldr	r7, [r5, #0]
 800da60:	210b      	movs	r1, #11
 800da62:	4249      	negs	r1, r1
 800da64:	468c      	mov	ip, r1
 800da66:	449c      	add	ip, r3
 800da68:	2b0b      	cmp	r3, #11
 800da6a:	d010      	beq.n	800da8e <__b2d+0x8e>
 800da6c:	4661      	mov	r1, ip
 800da6e:	2320      	movs	r3, #32
 800da70:	408c      	lsls	r4, r1
 800da72:	1a5b      	subs	r3, r3, r1
 800da74:	0039      	movs	r1, r7
 800da76:	40d9      	lsrs	r1, r3
 800da78:	430c      	orrs	r4, r1
 800da7a:	4322      	orrs	r2, r4
 800da7c:	0011      	movs	r1, r2
 800da7e:	2200      	movs	r2, #0
 800da80:	42b5      	cmp	r5, r6
 800da82:	d901      	bls.n	800da88 <__b2d+0x88>
 800da84:	3d04      	subs	r5, #4
 800da86:	682a      	ldr	r2, [r5, #0]
 800da88:	4664      	mov	r4, ip
 800da8a:	40a7      	lsls	r7, r4
 800da8c:	e7dd      	b.n	800da4a <__b2d+0x4a>
 800da8e:	4322      	orrs	r2, r4
 800da90:	0011      	movs	r1, r2
 800da92:	e7dc      	b.n	800da4e <__b2d+0x4e>
 800da94:	3ff00000 	.word	0x3ff00000

0800da98 <__d2b>:
 800da98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da9a:	2101      	movs	r1, #1
 800da9c:	0014      	movs	r4, r2
 800da9e:	001d      	movs	r5, r3
 800daa0:	9f08      	ldr	r7, [sp, #32]
 800daa2:	f7ff fc5b 	bl	800d35c <_Balloc>
 800daa6:	1e06      	subs	r6, r0, #0
 800daa8:	d105      	bne.n	800dab6 <__d2b+0x1e>
 800daaa:	0032      	movs	r2, r6
 800daac:	4b24      	ldr	r3, [pc, #144]	; (800db40 <__d2b+0xa8>)
 800daae:	4825      	ldr	r0, [pc, #148]	; (800db44 <__d2b+0xac>)
 800dab0:	4925      	ldr	r1, [pc, #148]	; (800db48 <__d2b+0xb0>)
 800dab2:	f002 ff17 	bl	80108e4 <__assert_func>
 800dab6:	032b      	lsls	r3, r5, #12
 800dab8:	006d      	lsls	r5, r5, #1
 800daba:	0b1b      	lsrs	r3, r3, #12
 800dabc:	0d6d      	lsrs	r5, r5, #21
 800dabe:	d125      	bne.n	800db0c <__d2b+0x74>
 800dac0:	9301      	str	r3, [sp, #4]
 800dac2:	2c00      	cmp	r4, #0
 800dac4:	d028      	beq.n	800db18 <__d2b+0x80>
 800dac6:	4668      	mov	r0, sp
 800dac8:	9400      	str	r4, [sp, #0]
 800daca:	f7ff fd23 	bl	800d514 <__lo0bits>
 800dace:	9b01      	ldr	r3, [sp, #4]
 800dad0:	9900      	ldr	r1, [sp, #0]
 800dad2:	2800      	cmp	r0, #0
 800dad4:	d01e      	beq.n	800db14 <__d2b+0x7c>
 800dad6:	2220      	movs	r2, #32
 800dad8:	001c      	movs	r4, r3
 800dada:	1a12      	subs	r2, r2, r0
 800dadc:	4094      	lsls	r4, r2
 800dade:	0022      	movs	r2, r4
 800dae0:	40c3      	lsrs	r3, r0
 800dae2:	430a      	orrs	r2, r1
 800dae4:	6172      	str	r2, [r6, #20]
 800dae6:	9301      	str	r3, [sp, #4]
 800dae8:	9c01      	ldr	r4, [sp, #4]
 800daea:	61b4      	str	r4, [r6, #24]
 800daec:	1e63      	subs	r3, r4, #1
 800daee:	419c      	sbcs	r4, r3
 800daf0:	3401      	adds	r4, #1
 800daf2:	6134      	str	r4, [r6, #16]
 800daf4:	2d00      	cmp	r5, #0
 800daf6:	d017      	beq.n	800db28 <__d2b+0x90>
 800daf8:	2435      	movs	r4, #53	; 0x35
 800dafa:	4b14      	ldr	r3, [pc, #80]	; (800db4c <__d2b+0xb4>)
 800dafc:	18ed      	adds	r5, r5, r3
 800dafe:	182d      	adds	r5, r5, r0
 800db00:	603d      	str	r5, [r7, #0]
 800db02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db04:	1a24      	subs	r4, r4, r0
 800db06:	601c      	str	r4, [r3, #0]
 800db08:	0030      	movs	r0, r6
 800db0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800db0c:	2280      	movs	r2, #128	; 0x80
 800db0e:	0352      	lsls	r2, r2, #13
 800db10:	4313      	orrs	r3, r2
 800db12:	e7d5      	b.n	800dac0 <__d2b+0x28>
 800db14:	6171      	str	r1, [r6, #20]
 800db16:	e7e7      	b.n	800dae8 <__d2b+0x50>
 800db18:	a801      	add	r0, sp, #4
 800db1a:	f7ff fcfb 	bl	800d514 <__lo0bits>
 800db1e:	9b01      	ldr	r3, [sp, #4]
 800db20:	2401      	movs	r4, #1
 800db22:	6173      	str	r3, [r6, #20]
 800db24:	3020      	adds	r0, #32
 800db26:	e7e4      	b.n	800daf2 <__d2b+0x5a>
 800db28:	4b09      	ldr	r3, [pc, #36]	; (800db50 <__d2b+0xb8>)
 800db2a:	18c0      	adds	r0, r0, r3
 800db2c:	4b09      	ldr	r3, [pc, #36]	; (800db54 <__d2b+0xbc>)
 800db2e:	6038      	str	r0, [r7, #0]
 800db30:	18e3      	adds	r3, r4, r3
 800db32:	009b      	lsls	r3, r3, #2
 800db34:	18f3      	adds	r3, r6, r3
 800db36:	6958      	ldr	r0, [r3, #20]
 800db38:	f7ff fcd2 	bl	800d4e0 <__hi0bits>
 800db3c:	0164      	lsls	r4, r4, #5
 800db3e:	e7e0      	b.n	800db02 <__d2b+0x6a>
 800db40:	08015079 	.word	0x08015079
 800db44:	080150ea 	.word	0x080150ea
 800db48:	0000030f 	.word	0x0000030f
 800db4c:	fffffbcd 	.word	0xfffffbcd
 800db50:	fffffbce 	.word	0xfffffbce
 800db54:	3fffffff 	.word	0x3fffffff

0800db58 <__ratio>:
 800db58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db5a:	b087      	sub	sp, #28
 800db5c:	000f      	movs	r7, r1
 800db5e:	a904      	add	r1, sp, #16
 800db60:	0006      	movs	r6, r0
 800db62:	f7ff ff4d 	bl	800da00 <__b2d>
 800db66:	9000      	str	r0, [sp, #0]
 800db68:	9101      	str	r1, [sp, #4]
 800db6a:	9c00      	ldr	r4, [sp, #0]
 800db6c:	9d01      	ldr	r5, [sp, #4]
 800db6e:	0038      	movs	r0, r7
 800db70:	a905      	add	r1, sp, #20
 800db72:	f7ff ff45 	bl	800da00 <__b2d>
 800db76:	9002      	str	r0, [sp, #8]
 800db78:	9103      	str	r1, [sp, #12]
 800db7a:	9a02      	ldr	r2, [sp, #8]
 800db7c:	9b03      	ldr	r3, [sp, #12]
 800db7e:	6930      	ldr	r0, [r6, #16]
 800db80:	6939      	ldr	r1, [r7, #16]
 800db82:	9e04      	ldr	r6, [sp, #16]
 800db84:	1a40      	subs	r0, r0, r1
 800db86:	9905      	ldr	r1, [sp, #20]
 800db88:	0140      	lsls	r0, r0, #5
 800db8a:	1a71      	subs	r1, r6, r1
 800db8c:	1841      	adds	r1, r0, r1
 800db8e:	0508      	lsls	r0, r1, #20
 800db90:	2900      	cmp	r1, #0
 800db92:	dd07      	ble.n	800dba4 <__ratio+0x4c>
 800db94:	9901      	ldr	r1, [sp, #4]
 800db96:	1845      	adds	r5, r0, r1
 800db98:	0020      	movs	r0, r4
 800db9a:	0029      	movs	r1, r5
 800db9c:	f7f3 f96c 	bl	8000e78 <__aeabi_ddiv>
 800dba0:	b007      	add	sp, #28
 800dba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dba4:	9903      	ldr	r1, [sp, #12]
 800dba6:	1a0b      	subs	r3, r1, r0
 800dba8:	e7f6      	b.n	800db98 <__ratio+0x40>

0800dbaa <__copybits>:
 800dbaa:	b570      	push	{r4, r5, r6, lr}
 800dbac:	0014      	movs	r4, r2
 800dbae:	0005      	movs	r5, r0
 800dbb0:	3901      	subs	r1, #1
 800dbb2:	6913      	ldr	r3, [r2, #16]
 800dbb4:	1149      	asrs	r1, r1, #5
 800dbb6:	3101      	adds	r1, #1
 800dbb8:	0089      	lsls	r1, r1, #2
 800dbba:	3414      	adds	r4, #20
 800dbbc:	009b      	lsls	r3, r3, #2
 800dbbe:	1841      	adds	r1, r0, r1
 800dbc0:	18e3      	adds	r3, r4, r3
 800dbc2:	42a3      	cmp	r3, r4
 800dbc4:	d80d      	bhi.n	800dbe2 <__copybits+0x38>
 800dbc6:	0014      	movs	r4, r2
 800dbc8:	3411      	adds	r4, #17
 800dbca:	2500      	movs	r5, #0
 800dbcc:	429c      	cmp	r4, r3
 800dbce:	d803      	bhi.n	800dbd8 <__copybits+0x2e>
 800dbd0:	1a9b      	subs	r3, r3, r2
 800dbd2:	3b11      	subs	r3, #17
 800dbd4:	089b      	lsrs	r3, r3, #2
 800dbd6:	009d      	lsls	r5, r3, #2
 800dbd8:	2300      	movs	r3, #0
 800dbda:	1940      	adds	r0, r0, r5
 800dbdc:	4281      	cmp	r1, r0
 800dbde:	d803      	bhi.n	800dbe8 <__copybits+0x3e>
 800dbe0:	bd70      	pop	{r4, r5, r6, pc}
 800dbe2:	cc40      	ldmia	r4!, {r6}
 800dbe4:	c540      	stmia	r5!, {r6}
 800dbe6:	e7ec      	b.n	800dbc2 <__copybits+0x18>
 800dbe8:	c008      	stmia	r0!, {r3}
 800dbea:	e7f7      	b.n	800dbdc <__copybits+0x32>

0800dbec <__any_on>:
 800dbec:	0002      	movs	r2, r0
 800dbee:	6900      	ldr	r0, [r0, #16]
 800dbf0:	b510      	push	{r4, lr}
 800dbf2:	3214      	adds	r2, #20
 800dbf4:	114b      	asrs	r3, r1, #5
 800dbf6:	4298      	cmp	r0, r3
 800dbf8:	db13      	blt.n	800dc22 <__any_on+0x36>
 800dbfa:	dd0c      	ble.n	800dc16 <__any_on+0x2a>
 800dbfc:	241f      	movs	r4, #31
 800dbfe:	0008      	movs	r0, r1
 800dc00:	4020      	ands	r0, r4
 800dc02:	4221      	tst	r1, r4
 800dc04:	d007      	beq.n	800dc16 <__any_on+0x2a>
 800dc06:	0099      	lsls	r1, r3, #2
 800dc08:	588c      	ldr	r4, [r1, r2]
 800dc0a:	0021      	movs	r1, r4
 800dc0c:	40c1      	lsrs	r1, r0
 800dc0e:	4081      	lsls	r1, r0
 800dc10:	2001      	movs	r0, #1
 800dc12:	428c      	cmp	r4, r1
 800dc14:	d104      	bne.n	800dc20 <__any_on+0x34>
 800dc16:	009b      	lsls	r3, r3, #2
 800dc18:	18d3      	adds	r3, r2, r3
 800dc1a:	4293      	cmp	r3, r2
 800dc1c:	d803      	bhi.n	800dc26 <__any_on+0x3a>
 800dc1e:	2000      	movs	r0, #0
 800dc20:	bd10      	pop	{r4, pc}
 800dc22:	0003      	movs	r3, r0
 800dc24:	e7f7      	b.n	800dc16 <__any_on+0x2a>
 800dc26:	3b04      	subs	r3, #4
 800dc28:	6819      	ldr	r1, [r3, #0]
 800dc2a:	2900      	cmp	r1, #0
 800dc2c:	d0f5      	beq.n	800dc1a <__any_on+0x2e>
 800dc2e:	2001      	movs	r0, #1
 800dc30:	e7f6      	b.n	800dc20 <__any_on+0x34>

0800dc32 <__ascii_wctomb>:
 800dc32:	0003      	movs	r3, r0
 800dc34:	1e08      	subs	r0, r1, #0
 800dc36:	d005      	beq.n	800dc44 <__ascii_wctomb+0x12>
 800dc38:	2aff      	cmp	r2, #255	; 0xff
 800dc3a:	d904      	bls.n	800dc46 <__ascii_wctomb+0x14>
 800dc3c:	228a      	movs	r2, #138	; 0x8a
 800dc3e:	2001      	movs	r0, #1
 800dc40:	601a      	str	r2, [r3, #0]
 800dc42:	4240      	negs	r0, r0
 800dc44:	4770      	bx	lr
 800dc46:	2001      	movs	r0, #1
 800dc48:	700a      	strb	r2, [r1, #0]
 800dc4a:	e7fb      	b.n	800dc44 <__ascii_wctomb+0x12>

0800dc4c <_svfprintf_r>:
 800dc4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc4e:	b0d9      	sub	sp, #356	; 0x164
 800dc50:	001c      	movs	r4, r3
 800dc52:	910b      	str	r1, [sp, #44]	; 0x2c
 800dc54:	9208      	str	r2, [sp, #32]
 800dc56:	900a      	str	r0, [sp, #40]	; 0x28
 800dc58:	f002 fdae 	bl	80107b8 <_localeconv_r>
 800dc5c:	6803      	ldr	r3, [r0, #0]
 800dc5e:	0018      	movs	r0, r3
 800dc60:	931c      	str	r3, [sp, #112]	; 0x70
 800dc62:	f7f2 fa4f 	bl	8000104 <strlen>
 800dc66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc68:	9016      	str	r0, [sp, #88]	; 0x58
 800dc6a:	899b      	ldrh	r3, [r3, #12]
 800dc6c:	061b      	lsls	r3, r3, #24
 800dc6e:	d517      	bpl.n	800dca0 <_svfprintf_r+0x54>
 800dc70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc72:	691b      	ldr	r3, [r3, #16]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d113      	bne.n	800dca0 <_svfprintf_r+0x54>
 800dc78:	2140      	movs	r1, #64	; 0x40
 800dc7a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dc7c:	f7fd fb6e 	bl	800b35c <_malloc_r>
 800dc80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc82:	6018      	str	r0, [r3, #0]
 800dc84:	6118      	str	r0, [r3, #16]
 800dc86:	2800      	cmp	r0, #0
 800dc88:	d107      	bne.n	800dc9a <_svfprintf_r+0x4e>
 800dc8a:	230c      	movs	r3, #12
 800dc8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc8e:	6013      	str	r3, [r2, #0]
 800dc90:	3b0d      	subs	r3, #13
 800dc92:	9317      	str	r3, [sp, #92]	; 0x5c
 800dc94:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800dc96:	b059      	add	sp, #356	; 0x164
 800dc98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc9a:	2340      	movs	r3, #64	; 0x40
 800dc9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dc9e:	6153      	str	r3, [r2, #20]
 800dca0:	2300      	movs	r3, #0
 800dca2:	2200      	movs	r2, #0
 800dca4:	932e      	str	r3, [sp, #184]	; 0xb8
 800dca6:	932d      	str	r3, [sp, #180]	; 0xb4
 800dca8:	930e      	str	r3, [sp, #56]	; 0x38
 800dcaa:	2300      	movs	r3, #0
 800dcac:	9214      	str	r2, [sp, #80]	; 0x50
 800dcae:	9315      	str	r3, [sp, #84]	; 0x54
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	af2f      	add	r7, sp, #188	; 0xbc
 800dcb4:	972c      	str	r7, [sp, #176]	; 0xb0
 800dcb6:	931f      	str	r3, [sp, #124]	; 0x7c
 800dcb8:	931e      	str	r3, [sp, #120]	; 0x78
 800dcba:	9312      	str	r3, [sp, #72]	; 0x48
 800dcbc:	931b      	str	r3, [sp, #108]	; 0x6c
 800dcbe:	931d      	str	r3, [sp, #116]	; 0x74
 800dcc0:	9317      	str	r3, [sp, #92]	; 0x5c
 800dcc2:	9d08      	ldr	r5, [sp, #32]
 800dcc4:	782b      	ldrb	r3, [r5, #0]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d002      	beq.n	800dcd0 <_svfprintf_r+0x84>
 800dcca:	2b25      	cmp	r3, #37	; 0x25
 800dccc:	d000      	beq.n	800dcd0 <_svfprintf_r+0x84>
 800dcce:	e091      	b.n	800ddf4 <_svfprintf_r+0x1a8>
 800dcd0:	9b08      	ldr	r3, [sp, #32]
 800dcd2:	1aee      	subs	r6, r5, r3
 800dcd4:	429d      	cmp	r5, r3
 800dcd6:	d016      	beq.n	800dd06 <_svfprintf_r+0xba>
 800dcd8:	603b      	str	r3, [r7, #0]
 800dcda:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dcdc:	607e      	str	r6, [r7, #4]
 800dcde:	199b      	adds	r3, r3, r6
 800dce0:	932e      	str	r3, [sp, #184]	; 0xb8
 800dce2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dce4:	3708      	adds	r7, #8
 800dce6:	3301      	adds	r3, #1
 800dce8:	932d      	str	r3, [sp, #180]	; 0xb4
 800dcea:	2b07      	cmp	r3, #7
 800dcec:	dd08      	ble.n	800dd00 <_svfprintf_r+0xb4>
 800dcee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dcf0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dcf2:	aa2c      	add	r2, sp, #176	; 0xb0
 800dcf4:	f004 f8c0 	bl	8011e78 <__ssprint_r>
 800dcf8:	2800      	cmp	r0, #0
 800dcfa:	d000      	beq.n	800dcfe <_svfprintf_r+0xb2>
 800dcfc:	e1cf      	b.n	800e09e <_svfprintf_r+0x452>
 800dcfe:	af2f      	add	r7, sp, #188	; 0xbc
 800dd00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dd02:	199b      	adds	r3, r3, r6
 800dd04:	9317      	str	r3, [sp, #92]	; 0x5c
 800dd06:	782b      	ldrb	r3, [r5, #0]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d101      	bne.n	800dd10 <_svfprintf_r+0xc4>
 800dd0c:	f001 f99e 	bl	800f04c <_svfprintf_r+0x1400>
 800dd10:	221b      	movs	r2, #27
 800dd12:	2300      	movs	r3, #0
 800dd14:	a91e      	add	r1, sp, #120	; 0x78
 800dd16:	1852      	adds	r2, r2, r1
 800dd18:	7013      	strb	r3, [r2, #0]
 800dd1a:	2201      	movs	r2, #1
 800dd1c:	001e      	movs	r6, r3
 800dd1e:	4252      	negs	r2, r2
 800dd20:	3501      	adds	r5, #1
 800dd22:	9209      	str	r2, [sp, #36]	; 0x24
 800dd24:	9318      	str	r3, [sp, #96]	; 0x60
 800dd26:	1c6b      	adds	r3, r5, #1
 800dd28:	9313      	str	r3, [sp, #76]	; 0x4c
 800dd2a:	782b      	ldrb	r3, [r5, #0]
 800dd2c:	930f      	str	r3, [sp, #60]	; 0x3c
 800dd2e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800dd30:	3820      	subs	r0, #32
 800dd32:	285a      	cmp	r0, #90	; 0x5a
 800dd34:	d901      	bls.n	800dd3a <_svfprintf_r+0xee>
 800dd36:	f000 fe20 	bl	800e97a <_svfprintf_r+0xd2e>
 800dd3a:	f7f2 f9f5 	bl	8000128 <__gnu_thumb1_case_uhi>
 800dd3e:	0078      	.short	0x0078
 800dd40:	061e061e 	.word	0x061e061e
 800dd44:	061e0082 	.word	0x061e0082
 800dd48:	061e061e 	.word	0x061e061e
 800dd4c:	061e005d 	.word	0x061e005d
 800dd50:	0084061e 	.word	0x0084061e
 800dd54:	061e008c 	.word	0x061e008c
 800dd58:	0091008a 	.word	0x0091008a
 800dd5c:	00b2061e 	.word	0x00b2061e
 800dd60:	00b400b4 	.word	0x00b400b4
 800dd64:	00b400b4 	.word	0x00b400b4
 800dd68:	00b400b4 	.word	0x00b400b4
 800dd6c:	00b400b4 	.word	0x00b400b4
 800dd70:	061e00b4 	.word	0x061e00b4
 800dd74:	061e061e 	.word	0x061e061e
 800dd78:	061e061e 	.word	0x061e061e
 800dd7c:	061e061e 	.word	0x061e061e
 800dd80:	061e013b 	.word	0x061e013b
 800dd84:	00f400e0 	.word	0x00f400e0
 800dd88:	013b013b 	.word	0x013b013b
 800dd8c:	061e013b 	.word	0x061e013b
 800dd90:	061e061e 	.word	0x061e061e
 800dd94:	00c7061e 	.word	0x00c7061e
 800dd98:	061e061e 	.word	0x061e061e
 800dd9c:	061e04c7 	.word	0x061e04c7
 800dda0:	061e061e 	.word	0x061e061e
 800dda4:	061e050a 	.word	0x061e050a
 800dda8:	061e052a 	.word	0x061e052a
 800ddac:	055c061e 	.word	0x055c061e
 800ddb0:	061e061e 	.word	0x061e061e
 800ddb4:	061e061e 	.word	0x061e061e
 800ddb8:	061e061e 	.word	0x061e061e
 800ddbc:	061e061e 	.word	0x061e061e
 800ddc0:	061e013b 	.word	0x061e013b
 800ddc4:	00f600e0 	.word	0x00f600e0
 800ddc8:	013b013b 	.word	0x013b013b
 800ddcc:	00c9013b 	.word	0x00c9013b
 800ddd0:	00dc00f6 	.word	0x00dc00f6
 800ddd4:	00d5061e 	.word	0x00d5061e
 800ddd8:	04a7061e 	.word	0x04a7061e
 800dddc:	04fa04c9 	.word	0x04fa04c9
 800dde0:	061e00dc 	.word	0x061e00dc
 800dde4:	0080050a 	.word	0x0080050a
 800dde8:	061e052c 	.word	0x061e052c
 800ddec:	057c061e 	.word	0x057c061e
 800ddf0:	0080061e 	.word	0x0080061e
 800ddf4:	3501      	adds	r5, #1
 800ddf6:	e765      	b.n	800dcc4 <_svfprintf_r+0x78>
 800ddf8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ddfa:	f002 fcdd 	bl	80107b8 <_localeconv_r>
 800ddfe:	6843      	ldr	r3, [r0, #4]
 800de00:	0018      	movs	r0, r3
 800de02:	931d      	str	r3, [sp, #116]	; 0x74
 800de04:	f7f2 f97e 	bl	8000104 <strlen>
 800de08:	901b      	str	r0, [sp, #108]	; 0x6c
 800de0a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de0c:	f002 fcd4 	bl	80107b8 <_localeconv_r>
 800de10:	6883      	ldr	r3, [r0, #8]
 800de12:	9312      	str	r3, [sp, #72]	; 0x48
 800de14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800de16:	2b00      	cmp	r3, #0
 800de18:	d011      	beq.n	800de3e <_svfprintf_r+0x1f2>
 800de1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d00e      	beq.n	800de3e <_svfprintf_r+0x1f2>
 800de20:	781b      	ldrb	r3, [r3, #0]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d00b      	beq.n	800de3e <_svfprintf_r+0x1f2>
 800de26:	2380      	movs	r3, #128	; 0x80
 800de28:	00db      	lsls	r3, r3, #3
 800de2a:	431e      	orrs	r6, r3
 800de2c:	e007      	b.n	800de3e <_svfprintf_r+0x1f2>
 800de2e:	231b      	movs	r3, #27
 800de30:	aa1e      	add	r2, sp, #120	; 0x78
 800de32:	189b      	adds	r3, r3, r2
 800de34:	781a      	ldrb	r2, [r3, #0]
 800de36:	2a00      	cmp	r2, #0
 800de38:	d101      	bne.n	800de3e <_svfprintf_r+0x1f2>
 800de3a:	3220      	adds	r2, #32
 800de3c:	701a      	strb	r2, [r3, #0]
 800de3e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800de40:	e771      	b.n	800dd26 <_svfprintf_r+0xda>
 800de42:	2301      	movs	r3, #1
 800de44:	e7f1      	b.n	800de2a <_svfprintf_r+0x1de>
 800de46:	cc08      	ldmia	r4!, {r3}
 800de48:	9318      	str	r3, [sp, #96]	; 0x60
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	daf7      	bge.n	800de3e <_svfprintf_r+0x1f2>
 800de4e:	425b      	negs	r3, r3
 800de50:	9318      	str	r3, [sp, #96]	; 0x60
 800de52:	2304      	movs	r3, #4
 800de54:	e7e9      	b.n	800de2a <_svfprintf_r+0x1de>
 800de56:	231b      	movs	r3, #27
 800de58:	aa1e      	add	r2, sp, #120	; 0x78
 800de5a:	189b      	adds	r3, r3, r2
 800de5c:	222b      	movs	r2, #43	; 0x2b
 800de5e:	e7ed      	b.n	800de3c <_svfprintf_r+0x1f0>
 800de60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800de62:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800de64:	7812      	ldrb	r2, [r2, #0]
 800de66:	3301      	adds	r3, #1
 800de68:	920f      	str	r2, [sp, #60]	; 0x3c
 800de6a:	2a2a      	cmp	r2, #42	; 0x2a
 800de6c:	d010      	beq.n	800de90 <_svfprintf_r+0x244>
 800de6e:	2200      	movs	r2, #0
 800de70:	9209      	str	r2, [sp, #36]	; 0x24
 800de72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800de74:	9313      	str	r3, [sp, #76]	; 0x4c
 800de76:	3a30      	subs	r2, #48	; 0x30
 800de78:	2a09      	cmp	r2, #9
 800de7a:	d900      	bls.n	800de7e <_svfprintf_r+0x232>
 800de7c:	e757      	b.n	800dd2e <_svfprintf_r+0xe2>
 800de7e:	200a      	movs	r0, #10
 800de80:	9909      	ldr	r1, [sp, #36]	; 0x24
 800de82:	4341      	muls	r1, r0
 800de84:	188a      	adds	r2, r1, r2
 800de86:	9209      	str	r2, [sp, #36]	; 0x24
 800de88:	781a      	ldrb	r2, [r3, #0]
 800de8a:	3301      	adds	r3, #1
 800de8c:	920f      	str	r2, [sp, #60]	; 0x3c
 800de8e:	e7f0      	b.n	800de72 <_svfprintf_r+0x226>
 800de90:	cc04      	ldmia	r4!, {r2}
 800de92:	9209      	str	r2, [sp, #36]	; 0x24
 800de94:	2a00      	cmp	r2, #0
 800de96:	da02      	bge.n	800de9e <_svfprintf_r+0x252>
 800de98:	2201      	movs	r2, #1
 800de9a:	4252      	negs	r2, r2
 800de9c:	9209      	str	r2, [sp, #36]	; 0x24
 800de9e:	9313      	str	r3, [sp, #76]	; 0x4c
 800dea0:	e7cd      	b.n	800de3e <_svfprintf_r+0x1f2>
 800dea2:	2380      	movs	r3, #128	; 0x80
 800dea4:	e7c1      	b.n	800de2a <_svfprintf_r+0x1de>
 800dea6:	2200      	movs	r2, #0
 800dea8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800deaa:	9218      	str	r2, [sp, #96]	; 0x60
 800deac:	210a      	movs	r1, #10
 800deae:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800deb0:	434a      	muls	r2, r1
 800deb2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800deb4:	3930      	subs	r1, #48	; 0x30
 800deb6:	188a      	adds	r2, r1, r2
 800deb8:	9218      	str	r2, [sp, #96]	; 0x60
 800deba:	001a      	movs	r2, r3
 800debc:	7812      	ldrb	r2, [r2, #0]
 800debe:	3301      	adds	r3, #1
 800dec0:	920f      	str	r2, [sp, #60]	; 0x3c
 800dec2:	3a30      	subs	r2, #48	; 0x30
 800dec4:	9313      	str	r3, [sp, #76]	; 0x4c
 800dec6:	2a09      	cmp	r2, #9
 800dec8:	d9f0      	bls.n	800deac <_svfprintf_r+0x260>
 800deca:	e730      	b.n	800dd2e <_svfprintf_r+0xe2>
 800decc:	2308      	movs	r3, #8
 800dece:	e7ac      	b.n	800de2a <_svfprintf_r+0x1de>
 800ded0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ded2:	781b      	ldrb	r3, [r3, #0]
 800ded4:	2b68      	cmp	r3, #104	; 0x68
 800ded6:	d105      	bne.n	800dee4 <_svfprintf_r+0x298>
 800ded8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800deda:	3301      	adds	r3, #1
 800dedc:	9313      	str	r3, [sp, #76]	; 0x4c
 800dede:	2380      	movs	r3, #128	; 0x80
 800dee0:	009b      	lsls	r3, r3, #2
 800dee2:	e7a2      	b.n	800de2a <_svfprintf_r+0x1de>
 800dee4:	2340      	movs	r3, #64	; 0x40
 800dee6:	e7a0      	b.n	800de2a <_svfprintf_r+0x1de>
 800dee8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800deea:	781b      	ldrb	r3, [r3, #0]
 800deec:	2b6c      	cmp	r3, #108	; 0x6c
 800deee:	d104      	bne.n	800defa <_svfprintf_r+0x2ae>
 800def0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800def2:	3301      	adds	r3, #1
 800def4:	9313      	str	r3, [sp, #76]	; 0x4c
 800def6:	2320      	movs	r3, #32
 800def8:	e797      	b.n	800de2a <_svfprintf_r+0x1de>
 800defa:	2310      	movs	r3, #16
 800defc:	e795      	b.n	800de2a <_svfprintf_r+0x1de>
 800defe:	0021      	movs	r1, r4
 800df00:	c904      	ldmia	r1!, {r2}
 800df02:	ab3f      	add	r3, sp, #252	; 0xfc
 800df04:	910d      	str	r1, [sp, #52]	; 0x34
 800df06:	211b      	movs	r1, #27
 800df08:	701a      	strb	r2, [r3, #0]
 800df0a:	2200      	movs	r2, #0
 800df0c:	a81e      	add	r0, sp, #120	; 0x78
 800df0e:	1809      	adds	r1, r1, r0
 800df10:	700a      	strb	r2, [r1, #0]
 800df12:	920c      	str	r2, [sp, #48]	; 0x30
 800df14:	3201      	adds	r2, #1
 800df16:	9209      	str	r2, [sp, #36]	; 0x24
 800df18:	2200      	movs	r2, #0
 800df1a:	9308      	str	r3, [sp, #32]
 800df1c:	0015      	movs	r5, r2
 800df1e:	9219      	str	r2, [sp, #100]	; 0x64
 800df20:	9210      	str	r2, [sp, #64]	; 0x40
 800df22:	9211      	str	r2, [sp, #68]	; 0x44
 800df24:	e1f1      	b.n	800e30a <_svfprintf_r+0x6be>
 800df26:	2310      	movs	r3, #16
 800df28:	431e      	orrs	r6, r3
 800df2a:	06b3      	lsls	r3, r6, #26
 800df2c:	d531      	bpl.n	800df92 <_svfprintf_r+0x346>
 800df2e:	2307      	movs	r3, #7
 800df30:	3407      	adds	r4, #7
 800df32:	439c      	bics	r4, r3
 800df34:	0022      	movs	r2, r4
 800df36:	ca18      	ldmia	r2!, {r3, r4}
 800df38:	9306      	str	r3, [sp, #24]
 800df3a:	9407      	str	r4, [sp, #28]
 800df3c:	920d      	str	r2, [sp, #52]	; 0x34
 800df3e:	9a07      	ldr	r2, [sp, #28]
 800df40:	2301      	movs	r3, #1
 800df42:	2a00      	cmp	r2, #0
 800df44:	da0b      	bge.n	800df5e <_svfprintf_r+0x312>
 800df46:	9c06      	ldr	r4, [sp, #24]
 800df48:	9d07      	ldr	r5, [sp, #28]
 800df4a:	2200      	movs	r2, #0
 800df4c:	4261      	negs	r1, r4
 800df4e:	41aa      	sbcs	r2, r5
 800df50:	9106      	str	r1, [sp, #24]
 800df52:	9207      	str	r2, [sp, #28]
 800df54:	221b      	movs	r2, #27
 800df56:	a91e      	add	r1, sp, #120	; 0x78
 800df58:	1852      	adds	r2, r2, r1
 800df5a:	212d      	movs	r1, #45	; 0x2d
 800df5c:	7011      	strb	r1, [r2, #0]
 800df5e:	9907      	ldr	r1, [sp, #28]
 800df60:	9a06      	ldr	r2, [sp, #24]
 800df62:	430a      	orrs	r2, r1
 800df64:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df66:	3101      	adds	r1, #1
 800df68:	d101      	bne.n	800df6e <_svfprintf_r+0x322>
 800df6a:	f001 f87b 	bl	800f064 <_svfprintf_r+0x1418>
 800df6e:	2180      	movs	r1, #128	; 0x80
 800df70:	0034      	movs	r4, r6
 800df72:	438c      	bics	r4, r1
 800df74:	2a00      	cmp	r2, #0
 800df76:	d001      	beq.n	800df7c <_svfprintf_r+0x330>
 800df78:	f001 f879 	bl	800f06e <_svfprintf_r+0x1422>
 800df7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df7e:	2a00      	cmp	r2, #0
 800df80:	d101      	bne.n	800df86 <_svfprintf_r+0x33a>
 800df82:	f000 fcef 	bl	800e964 <_svfprintf_r+0xd18>
 800df86:	2b01      	cmp	r3, #1
 800df88:	d001      	beq.n	800df8e <_svfprintf_r+0x342>
 800df8a:	f001 f874 	bl	800f076 <_svfprintf_r+0x142a>
 800df8e:	f000 fc79 	bl	800e884 <_svfprintf_r+0xc38>
 800df92:	0022      	movs	r2, r4
 800df94:	ca08      	ldmia	r2!, {r3}
 800df96:	920d      	str	r2, [sp, #52]	; 0x34
 800df98:	06f2      	lsls	r2, r6, #27
 800df9a:	d503      	bpl.n	800dfa4 <_svfprintf_r+0x358>
 800df9c:	9306      	str	r3, [sp, #24]
 800df9e:	17db      	asrs	r3, r3, #31
 800dfa0:	9307      	str	r3, [sp, #28]
 800dfa2:	e7cc      	b.n	800df3e <_svfprintf_r+0x2f2>
 800dfa4:	0672      	lsls	r2, r6, #25
 800dfa6:	d501      	bpl.n	800dfac <_svfprintf_r+0x360>
 800dfa8:	b21b      	sxth	r3, r3
 800dfaa:	e7f7      	b.n	800df9c <_svfprintf_r+0x350>
 800dfac:	05b2      	lsls	r2, r6, #22
 800dfae:	d5f5      	bpl.n	800df9c <_svfprintf_r+0x350>
 800dfb0:	b25b      	sxtb	r3, r3
 800dfb2:	e7f3      	b.n	800df9c <_svfprintf_r+0x350>
 800dfb4:	2307      	movs	r3, #7
 800dfb6:	3407      	adds	r4, #7
 800dfb8:	439c      	bics	r4, r3
 800dfba:	0022      	movs	r2, r4
 800dfbc:	ca18      	ldmia	r2!, {r3, r4}
 800dfbe:	920d      	str	r2, [sp, #52]	; 0x34
 800dfc0:	2201      	movs	r2, #1
 800dfc2:	9314      	str	r3, [sp, #80]	; 0x50
 800dfc4:	9415      	str	r4, [sp, #84]	; 0x54
 800dfc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dfc8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800dfca:	005c      	lsls	r4, r3, #1
 800dfcc:	0864      	lsrs	r4, r4, #1
 800dfce:	0028      	movs	r0, r5
 800dfd0:	0021      	movs	r1, r4
 800dfd2:	4b3e      	ldr	r3, [pc, #248]	; (800e0cc <_svfprintf_r+0x480>)
 800dfd4:	4252      	negs	r2, r2
 800dfd6:	f7f4 f98d 	bl	80022f4 <__aeabi_dcmpun>
 800dfda:	2800      	cmp	r0, #0
 800dfdc:	d126      	bne.n	800e02c <_svfprintf_r+0x3e0>
 800dfde:	2201      	movs	r2, #1
 800dfe0:	0028      	movs	r0, r5
 800dfe2:	0021      	movs	r1, r4
 800dfe4:	4b39      	ldr	r3, [pc, #228]	; (800e0cc <_svfprintf_r+0x480>)
 800dfe6:	4252      	negs	r2, r2
 800dfe8:	f7f2 fa3e 	bl	8000468 <__aeabi_dcmple>
 800dfec:	2800      	cmp	r0, #0
 800dfee:	d11d      	bne.n	800e02c <_svfprintf_r+0x3e0>
 800dff0:	9814      	ldr	r0, [sp, #80]	; 0x50
 800dff2:	9915      	ldr	r1, [sp, #84]	; 0x54
 800dff4:	2200      	movs	r2, #0
 800dff6:	2300      	movs	r3, #0
 800dff8:	f7f2 fa2c 	bl	8000454 <__aeabi_dcmplt>
 800dffc:	2800      	cmp	r0, #0
 800dffe:	d004      	beq.n	800e00a <_svfprintf_r+0x3be>
 800e000:	231b      	movs	r3, #27
 800e002:	aa1e      	add	r2, sp, #120	; 0x78
 800e004:	189b      	adds	r3, r3, r2
 800e006:	222d      	movs	r2, #45	; 0x2d
 800e008:	701a      	strb	r2, [r3, #0]
 800e00a:	4b31      	ldr	r3, [pc, #196]	; (800e0d0 <_svfprintf_r+0x484>)
 800e00c:	9308      	str	r3, [sp, #32]
 800e00e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e010:	2b47      	cmp	r3, #71	; 0x47
 800e012:	dd01      	ble.n	800e018 <_svfprintf_r+0x3cc>
 800e014:	4b2f      	ldr	r3, [pc, #188]	; (800e0d4 <_svfprintf_r+0x488>)
 800e016:	9308      	str	r3, [sp, #32]
 800e018:	2380      	movs	r3, #128	; 0x80
 800e01a:	439e      	bics	r6, r3
 800e01c:	2300      	movs	r3, #0
 800e01e:	930c      	str	r3, [sp, #48]	; 0x30
 800e020:	3303      	adds	r3, #3
 800e022:	9309      	str	r3, [sp, #36]	; 0x24
 800e024:	2300      	movs	r3, #0
 800e026:	9319      	str	r3, [sp, #100]	; 0x64
 800e028:	f000 fc78 	bl	800e91c <_svfprintf_r+0xcd0>
 800e02c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e02e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e030:	0010      	movs	r0, r2
 800e032:	0019      	movs	r1, r3
 800e034:	f7f4 f95e 	bl	80022f4 <__aeabi_dcmpun>
 800e038:	2800      	cmp	r0, #0
 800e03a:	d00e      	beq.n	800e05a <_svfprintf_r+0x40e>
 800e03c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e03e:	2b00      	cmp	r3, #0
 800e040:	da04      	bge.n	800e04c <_svfprintf_r+0x400>
 800e042:	231b      	movs	r3, #27
 800e044:	aa1e      	add	r2, sp, #120	; 0x78
 800e046:	189b      	adds	r3, r3, r2
 800e048:	222d      	movs	r2, #45	; 0x2d
 800e04a:	701a      	strb	r2, [r3, #0]
 800e04c:	4b22      	ldr	r3, [pc, #136]	; (800e0d8 <_svfprintf_r+0x48c>)
 800e04e:	9308      	str	r3, [sp, #32]
 800e050:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e052:	2b47      	cmp	r3, #71	; 0x47
 800e054:	dde0      	ble.n	800e018 <_svfprintf_r+0x3cc>
 800e056:	4b21      	ldr	r3, [pc, #132]	; (800e0dc <_svfprintf_r+0x490>)
 800e058:	e7dd      	b.n	800e016 <_svfprintf_r+0x3ca>
 800e05a:	2320      	movs	r3, #32
 800e05c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e05e:	439a      	bics	r2, r3
 800e060:	9210      	str	r2, [sp, #64]	; 0x40
 800e062:	2a41      	cmp	r2, #65	; 0x41
 800e064:	d123      	bne.n	800e0ae <_svfprintf_r+0x462>
 800e066:	2230      	movs	r2, #48	; 0x30
 800e068:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e06a:	ab25      	add	r3, sp, #148	; 0x94
 800e06c:	701a      	strb	r2, [r3, #0]
 800e06e:	3248      	adds	r2, #72	; 0x48
 800e070:	2961      	cmp	r1, #97	; 0x61
 800e072:	d000      	beq.n	800e076 <_svfprintf_r+0x42a>
 800e074:	3a20      	subs	r2, #32
 800e076:	705a      	strb	r2, [r3, #1]
 800e078:	2302      	movs	r3, #2
 800e07a:	431e      	orrs	r6, r3
 800e07c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e07e:	2b63      	cmp	r3, #99	; 0x63
 800e080:	dd2e      	ble.n	800e0e0 <_svfprintf_r+0x494>
 800e082:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e084:	1c59      	adds	r1, r3, #1
 800e086:	f7fd f969 	bl	800b35c <_malloc_r>
 800e08a:	9008      	str	r0, [sp, #32]
 800e08c:	2800      	cmp	r0, #0
 800e08e:	d000      	beq.n	800e092 <_svfprintf_r+0x446>
 800e090:	e216      	b.n	800e4c0 <_svfprintf_r+0x874>
 800e092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e094:	899a      	ldrh	r2, [r3, #12]
 800e096:	2340      	movs	r3, #64	; 0x40
 800e098:	4313      	orrs	r3, r2
 800e09a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e09c:	8193      	strh	r3, [r2, #12]
 800e09e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0a0:	899b      	ldrh	r3, [r3, #12]
 800e0a2:	065b      	lsls	r3, r3, #25
 800e0a4:	d400      	bmi.n	800e0a8 <_svfprintf_r+0x45c>
 800e0a6:	e5f5      	b.n	800dc94 <_svfprintf_r+0x48>
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	425b      	negs	r3, r3
 800e0ac:	e5f1      	b.n	800dc92 <_svfprintf_r+0x46>
 800e0ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0b0:	900c      	str	r0, [sp, #48]	; 0x30
 800e0b2:	3301      	adds	r3, #1
 800e0b4:	d100      	bne.n	800e0b8 <_svfprintf_r+0x46c>
 800e0b6:	e206      	b.n	800e4c6 <_svfprintf_r+0x87a>
 800e0b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e0ba:	2b47      	cmp	r3, #71	; 0x47
 800e0bc:	d114      	bne.n	800e0e8 <_svfprintf_r+0x49c>
 800e0be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d111      	bne.n	800e0e8 <_svfprintf_r+0x49c>
 800e0c4:	3301      	adds	r3, #1
 800e0c6:	9309      	str	r3, [sp, #36]	; 0x24
 800e0c8:	e00e      	b.n	800e0e8 <_svfprintf_r+0x49c>
 800e0ca:	46c0      	nop			; (mov r8, r8)
 800e0cc:	7fefffff 	.word	0x7fefffff
 800e0d0:	08015244 	.word	0x08015244
 800e0d4:	08015248 	.word	0x08015248
 800e0d8:	0801524c 	.word	0x0801524c
 800e0dc:	08015250 	.word	0x08015250
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	930c      	str	r3, [sp, #48]	; 0x30
 800e0e4:	ab3f      	add	r3, sp, #252	; 0xfc
 800e0e6:	9308      	str	r3, [sp, #32]
 800e0e8:	2380      	movs	r3, #128	; 0x80
 800e0ea:	005b      	lsls	r3, r3, #1
 800e0ec:	4333      	orrs	r3, r6
 800e0ee:	931a      	str	r3, [sp, #104]	; 0x68
 800e0f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e0f2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	db00      	blt.n	800e0fa <_svfprintf_r+0x4ae>
 800e0f8:	e1e7      	b.n	800e4ca <_svfprintf_r+0x87e>
 800e0fa:	2280      	movs	r2, #128	; 0x80
 800e0fc:	0612      	lsls	r2, r2, #24
 800e0fe:	4694      	mov	ip, r2
 800e100:	4463      	add	r3, ip
 800e102:	930e      	str	r3, [sp, #56]	; 0x38
 800e104:	232d      	movs	r3, #45	; 0x2d
 800e106:	9322      	str	r3, [sp, #136]	; 0x88
 800e108:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e10a:	2b41      	cmp	r3, #65	; 0x41
 800e10c:	d000      	beq.n	800e110 <_svfprintf_r+0x4c4>
 800e10e:	e1f5      	b.n	800e4fc <_svfprintf_r+0x8b0>
 800e110:	0028      	movs	r0, r5
 800e112:	aa26      	add	r2, sp, #152	; 0x98
 800e114:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e116:	f002 fb73 	bl	8010800 <frexp>
 800e11a:	23ff      	movs	r3, #255	; 0xff
 800e11c:	2200      	movs	r2, #0
 800e11e:	059b      	lsls	r3, r3, #22
 800e120:	f7f3 faa4 	bl	800166c <__aeabi_dmul>
 800e124:	2200      	movs	r2, #0
 800e126:	2300      	movs	r3, #0
 800e128:	0004      	movs	r4, r0
 800e12a:	000d      	movs	r5, r1
 800e12c:	f7f2 f98c 	bl	8000448 <__aeabi_dcmpeq>
 800e130:	2800      	cmp	r0, #0
 800e132:	d001      	beq.n	800e138 <_svfprintf_r+0x4ec>
 800e134:	2301      	movs	r3, #1
 800e136:	9326      	str	r3, [sp, #152]	; 0x98
 800e138:	4bda      	ldr	r3, [pc, #872]	; (800e4a4 <_svfprintf_r+0x858>)
 800e13a:	9319      	str	r3, [sp, #100]	; 0x64
 800e13c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e13e:	2b61      	cmp	r3, #97	; 0x61
 800e140:	d001      	beq.n	800e146 <_svfprintf_r+0x4fa>
 800e142:	4bd9      	ldr	r3, [pc, #868]	; (800e4a8 <_svfprintf_r+0x85c>)
 800e144:	9319      	str	r3, [sp, #100]	; 0x64
 800e146:	9b08      	ldr	r3, [sp, #32]
 800e148:	930e      	str	r3, [sp, #56]	; 0x38
 800e14a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e14c:	3b01      	subs	r3, #1
 800e14e:	9311      	str	r3, [sp, #68]	; 0x44
 800e150:	2200      	movs	r2, #0
 800e152:	4bd6      	ldr	r3, [pc, #856]	; (800e4ac <_svfprintf_r+0x860>)
 800e154:	0020      	movs	r0, r4
 800e156:	0029      	movs	r1, r5
 800e158:	f7f3 fa88 	bl	800166c <__aeabi_dmul>
 800e15c:	000d      	movs	r5, r1
 800e15e:	0004      	movs	r4, r0
 800e160:	f7f4 f8e6 	bl	8002330 <__aeabi_d2iz>
 800e164:	9021      	str	r0, [sp, #132]	; 0x84
 800e166:	f7f4 f919 	bl	800239c <__aeabi_i2d>
 800e16a:	0002      	movs	r2, r0
 800e16c:	000b      	movs	r3, r1
 800e16e:	0020      	movs	r0, r4
 800e170:	0029      	movs	r1, r5
 800e172:	f7f3 fd3d 	bl	8001bf0 <__aeabi_dsub>
 800e176:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e178:	000d      	movs	r5, r1
 800e17a:	001a      	movs	r2, r3
 800e17c:	3201      	adds	r2, #1
 800e17e:	9921      	ldr	r1, [sp, #132]	; 0x84
 800e180:	920e      	str	r2, [sp, #56]	; 0x38
 800e182:	9223      	str	r2, [sp, #140]	; 0x8c
 800e184:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e186:	0004      	movs	r4, r0
 800e188:	5c52      	ldrb	r2, [r2, r1]
 800e18a:	701a      	strb	r2, [r3, #0]
 800e18c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e18e:	9320      	str	r3, [sp, #128]	; 0x80
 800e190:	3301      	adds	r3, #1
 800e192:	d00a      	beq.n	800e1aa <_svfprintf_r+0x55e>
 800e194:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e196:	2200      	movs	r2, #0
 800e198:	3b01      	subs	r3, #1
 800e19a:	9311      	str	r3, [sp, #68]	; 0x44
 800e19c:	0020      	movs	r0, r4
 800e19e:	2300      	movs	r3, #0
 800e1a0:	0029      	movs	r1, r5
 800e1a2:	f7f2 f951 	bl	8000448 <__aeabi_dcmpeq>
 800e1a6:	2800      	cmp	r0, #0
 800e1a8:	d0d2      	beq.n	800e150 <_svfprintf_r+0x504>
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	0020      	movs	r0, r4
 800e1ae:	0029      	movs	r1, r5
 800e1b0:	4bbf      	ldr	r3, [pc, #764]	; (800e4b0 <_svfprintf_r+0x864>)
 800e1b2:	f7f2 f963 	bl	800047c <__aeabi_dcmpgt>
 800e1b6:	2800      	cmp	r0, #0
 800e1b8:	d10c      	bne.n	800e1d4 <_svfprintf_r+0x588>
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	0020      	movs	r0, r4
 800e1be:	0029      	movs	r1, r5
 800e1c0:	4bbb      	ldr	r3, [pc, #748]	; (800e4b0 <_svfprintf_r+0x864>)
 800e1c2:	f7f2 f941 	bl	8000448 <__aeabi_dcmpeq>
 800e1c6:	2800      	cmp	r0, #0
 800e1c8:	d100      	bne.n	800e1cc <_svfprintf_r+0x580>
 800e1ca:	e191      	b.n	800e4f0 <_svfprintf_r+0x8a4>
 800e1cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e1ce:	07db      	lsls	r3, r3, #31
 800e1d0:	d400      	bmi.n	800e1d4 <_svfprintf_r+0x588>
 800e1d2:	e18d      	b.n	800e4f0 <_svfprintf_r+0x8a4>
 800e1d4:	2030      	movs	r0, #48	; 0x30
 800e1d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e1d8:	932a      	str	r3, [sp, #168]	; 0xa8
 800e1da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e1dc:	7bdb      	ldrb	r3, [r3, #15]
 800e1de:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800e1e0:	3a01      	subs	r2, #1
 800e1e2:	922a      	str	r2, [sp, #168]	; 0xa8
 800e1e4:	7811      	ldrb	r1, [r2, #0]
 800e1e6:	4299      	cmp	r1, r3
 800e1e8:	d100      	bne.n	800e1ec <_svfprintf_r+0x5a0>
 800e1ea:	e171      	b.n	800e4d0 <_svfprintf_r+0x884>
 800e1ec:	1c4b      	adds	r3, r1, #1
 800e1ee:	b2db      	uxtb	r3, r3
 800e1f0:	2939      	cmp	r1, #57	; 0x39
 800e1f2:	d101      	bne.n	800e1f8 <_svfprintf_r+0x5ac>
 800e1f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e1f6:	7a9b      	ldrb	r3, [r3, #10]
 800e1f8:	7013      	strb	r3, [r2, #0]
 800e1fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e1fc:	9a08      	ldr	r2, [sp, #32]
 800e1fe:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800e200:	1a9b      	subs	r3, r3, r2
 800e202:	930e      	str	r3, [sp, #56]	; 0x38
 800e204:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e206:	2b47      	cmp	r3, #71	; 0x47
 800e208:	d000      	beq.n	800e20c <_svfprintf_r+0x5c0>
 800e20a:	e1c4      	b.n	800e596 <_svfprintf_r+0x94a>
 800e20c:	1ceb      	adds	r3, r5, #3
 800e20e:	db03      	blt.n	800e218 <_svfprintf_r+0x5cc>
 800e210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e212:	42ab      	cmp	r3, r5
 800e214:	db00      	blt.n	800e218 <_svfprintf_r+0x5cc>
 800e216:	e1e6      	b.n	800e5e6 <_svfprintf_r+0x99a>
 800e218:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e21a:	3b02      	subs	r3, #2
 800e21c:	930f      	str	r3, [sp, #60]	; 0x3c
 800e21e:	223c      	movs	r2, #60	; 0x3c
 800e220:	466b      	mov	r3, sp
 800e222:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e224:	189b      	adds	r3, r3, r2
 800e226:	1e6c      	subs	r4, r5, #1
 800e228:	3a1c      	subs	r2, #28
 800e22a:	2000      	movs	r0, #0
 800e22c:	781b      	ldrb	r3, [r3, #0]
 800e22e:	9426      	str	r4, [sp, #152]	; 0x98
 800e230:	4391      	bics	r1, r2
 800e232:	2941      	cmp	r1, #65	; 0x41
 800e234:	d102      	bne.n	800e23c <_svfprintf_r+0x5f0>
 800e236:	330f      	adds	r3, #15
 800e238:	b2db      	uxtb	r3, r3
 800e23a:	3001      	adds	r0, #1
 800e23c:	a928      	add	r1, sp, #160	; 0xa0
 800e23e:	700b      	strb	r3, [r1, #0]
 800e240:	232b      	movs	r3, #43	; 0x2b
 800e242:	2c00      	cmp	r4, #0
 800e244:	da02      	bge.n	800e24c <_svfprintf_r+0x600>
 800e246:	2401      	movs	r4, #1
 800e248:	3302      	adds	r3, #2
 800e24a:	1b64      	subs	r4, r4, r5
 800e24c:	704b      	strb	r3, [r1, #1]
 800e24e:	2c09      	cmp	r4, #9
 800e250:	dc00      	bgt.n	800e254 <_svfprintf_r+0x608>
 800e252:	e1ba      	b.n	800e5ca <_svfprintf_r+0x97e>
 800e254:	2337      	movs	r3, #55	; 0x37
 800e256:	250a      	movs	r5, #10
 800e258:	aa1e      	add	r2, sp, #120	; 0x78
 800e25a:	189b      	adds	r3, r3, r2
 800e25c:	9310      	str	r3, [sp, #64]	; 0x40
 800e25e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e260:	0020      	movs	r0, r4
 800e262:	9309      	str	r3, [sp, #36]	; 0x24
 800e264:	0029      	movs	r1, r5
 800e266:	3b01      	subs	r3, #1
 800e268:	9310      	str	r3, [sp, #64]	; 0x40
 800e26a:	f7f2 f8d7 	bl	800041c <__aeabi_idivmod>
 800e26e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e270:	3130      	adds	r1, #48	; 0x30
 800e272:	7019      	strb	r1, [r3, #0]
 800e274:	0020      	movs	r0, r4
 800e276:	0029      	movs	r1, r5
 800e278:	9411      	str	r4, [sp, #68]	; 0x44
 800e27a:	f7f1 ffe9 	bl	8000250 <__divsi3>
 800e27e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e280:	0004      	movs	r4, r0
 800e282:	2b63      	cmp	r3, #99	; 0x63
 800e284:	dceb      	bgt.n	800e25e <_svfprintf_r+0x612>
 800e286:	222a      	movs	r2, #42	; 0x2a
 800e288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e28a:	a81e      	add	r0, sp, #120	; 0x78
 800e28c:	1e99      	subs	r1, r3, #2
 800e28e:	1812      	adds	r2, r2, r0
 800e290:	2037      	movs	r0, #55	; 0x37
 800e292:	000b      	movs	r3, r1
 800e294:	3430      	adds	r4, #48	; 0x30
 800e296:	700c      	strb	r4, [r1, #0]
 800e298:	ac1e      	add	r4, sp, #120	; 0x78
 800e29a:	1900      	adds	r0, r0, r4
 800e29c:	4283      	cmp	r3, r0
 800e29e:	d200      	bcs.n	800e2a2 <_svfprintf_r+0x656>
 800e2a0:	e18e      	b.n	800e5c0 <_svfprintf_r+0x974>
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	4281      	cmp	r1, r0
 800e2a6:	d804      	bhi.n	800e2b2 <_svfprintf_r+0x666>
 800e2a8:	aa1e      	add	r2, sp, #120	; 0x78
 800e2aa:	3339      	adds	r3, #57	; 0x39
 800e2ac:	189b      	adds	r3, r3, r2
 800e2ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2b0:	1a9b      	subs	r3, r3, r2
 800e2b2:	222a      	movs	r2, #42	; 0x2a
 800e2b4:	a91e      	add	r1, sp, #120	; 0x78
 800e2b6:	1852      	adds	r2, r2, r1
 800e2b8:	18d3      	adds	r3, r2, r3
 800e2ba:	aa28      	add	r2, sp, #160	; 0xa0
 800e2bc:	1a9b      	subs	r3, r3, r2
 800e2be:	931e      	str	r3, [sp, #120]	; 0x78
 800e2c0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e2c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e2c4:	4694      	mov	ip, r2
 800e2c6:	4463      	add	r3, ip
 800e2c8:	9309      	str	r3, [sp, #36]	; 0x24
 800e2ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e2cc:	2b01      	cmp	r3, #1
 800e2ce:	dc01      	bgt.n	800e2d4 <_svfprintf_r+0x688>
 800e2d0:	07f3      	lsls	r3, r6, #31
 800e2d2:	d504      	bpl.n	800e2de <_svfprintf_r+0x692>
 800e2d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e2d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2d8:	4694      	mov	ip, r2
 800e2da:	4463      	add	r3, ip
 800e2dc:	9309      	str	r3, [sp, #36]	; 0x24
 800e2de:	2280      	movs	r2, #128	; 0x80
 800e2e0:	4b74      	ldr	r3, [pc, #464]	; (800e4b4 <_svfprintf_r+0x868>)
 800e2e2:	0052      	lsls	r2, r2, #1
 800e2e4:	4033      	ands	r3, r6
 800e2e6:	431a      	orrs	r2, r3
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	001d      	movs	r5, r3
 800e2ec:	921a      	str	r2, [sp, #104]	; 0x68
 800e2ee:	9310      	str	r3, [sp, #64]	; 0x40
 800e2f0:	9311      	str	r3, [sp, #68]	; 0x44
 800e2f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e2f4:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800e2f6:	9319      	str	r3, [sp, #100]	; 0x64
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d006      	beq.n	800e30a <_svfprintf_r+0x6be>
 800e2fc:	231b      	movs	r3, #27
 800e2fe:	aa1e      	add	r2, sp, #120	; 0x78
 800e300:	189b      	adds	r3, r3, r2
 800e302:	222d      	movs	r2, #45	; 0x2d
 800e304:	701a      	strb	r2, [r3, #0]
 800e306:	2300      	movs	r3, #0
 800e308:	9319      	str	r3, [sp, #100]	; 0x64
 800e30a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e30c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e30e:	931a      	str	r3, [sp, #104]	; 0x68
 800e310:	4293      	cmp	r3, r2
 800e312:	da00      	bge.n	800e316 <_svfprintf_r+0x6ca>
 800e314:	921a      	str	r2, [sp, #104]	; 0x68
 800e316:	231b      	movs	r3, #27
 800e318:	aa1e      	add	r2, sp, #120	; 0x78
 800e31a:	189b      	adds	r3, r3, r2
 800e31c:	781b      	ldrb	r3, [r3, #0]
 800e31e:	1e5a      	subs	r2, r3, #1
 800e320:	4193      	sbcs	r3, r2
 800e322:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e324:	18d3      	adds	r3, r2, r3
 800e326:	931a      	str	r3, [sp, #104]	; 0x68
 800e328:	0032      	movs	r2, r6
 800e32a:	2302      	movs	r3, #2
 800e32c:	401a      	ands	r2, r3
 800e32e:	9220      	str	r2, [sp, #128]	; 0x80
 800e330:	421e      	tst	r6, r3
 800e332:	d002      	beq.n	800e33a <_svfprintf_r+0x6ee>
 800e334:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e336:	3302      	adds	r3, #2
 800e338:	931a      	str	r3, [sp, #104]	; 0x68
 800e33a:	2384      	movs	r3, #132	; 0x84
 800e33c:	0032      	movs	r2, r6
 800e33e:	401a      	ands	r2, r3
 800e340:	9221      	str	r2, [sp, #132]	; 0x84
 800e342:	421e      	tst	r6, r3
 800e344:	d11f      	bne.n	800e386 <_svfprintf_r+0x73a>
 800e346:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e348:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e34a:	1a9c      	subs	r4, r3, r2
 800e34c:	2c00      	cmp	r4, #0
 800e34e:	dd1a      	ble.n	800e386 <_svfprintf_r+0x73a>
 800e350:	0039      	movs	r1, r7
 800e352:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e354:	4858      	ldr	r0, [pc, #352]	; (800e4b8 <_svfprintf_r+0x86c>)
 800e356:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e358:	3301      	adds	r3, #1
 800e35a:	3108      	adds	r1, #8
 800e35c:	6038      	str	r0, [r7, #0]
 800e35e:	2c10      	cmp	r4, #16
 800e360:	dd00      	ble.n	800e364 <_svfprintf_r+0x718>
 800e362:	e31c      	b.n	800e99e <_svfprintf_r+0xd52>
 800e364:	607c      	str	r4, [r7, #4]
 800e366:	18a4      	adds	r4, r4, r2
 800e368:	000f      	movs	r7, r1
 800e36a:	942e      	str	r4, [sp, #184]	; 0xb8
 800e36c:	932d      	str	r3, [sp, #180]	; 0xb4
 800e36e:	2b07      	cmp	r3, #7
 800e370:	dd09      	ble.n	800e386 <_svfprintf_r+0x73a>
 800e372:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e374:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e376:	aa2c      	add	r2, sp, #176	; 0xb0
 800e378:	f003 fd7e 	bl	8011e78 <__ssprint_r>
 800e37c:	2800      	cmp	r0, #0
 800e37e:	d001      	beq.n	800e384 <_svfprintf_r+0x738>
 800e380:	f000 fe43 	bl	800f00a <_svfprintf_r+0x13be>
 800e384:	af2f      	add	r7, sp, #188	; 0xbc
 800e386:	221b      	movs	r2, #27
 800e388:	a91e      	add	r1, sp, #120	; 0x78
 800e38a:	1852      	adds	r2, r2, r1
 800e38c:	7811      	ldrb	r1, [r2, #0]
 800e38e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e390:	2900      	cmp	r1, #0
 800e392:	d014      	beq.n	800e3be <_svfprintf_r+0x772>
 800e394:	603a      	str	r2, [r7, #0]
 800e396:	2201      	movs	r2, #1
 800e398:	189b      	adds	r3, r3, r2
 800e39a:	932e      	str	r3, [sp, #184]	; 0xb8
 800e39c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e39e:	607a      	str	r2, [r7, #4]
 800e3a0:	189b      	adds	r3, r3, r2
 800e3a2:	932d      	str	r3, [sp, #180]	; 0xb4
 800e3a4:	3708      	adds	r7, #8
 800e3a6:	2b07      	cmp	r3, #7
 800e3a8:	dd09      	ble.n	800e3be <_svfprintf_r+0x772>
 800e3aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e3ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e3ae:	aa2c      	add	r2, sp, #176	; 0xb0
 800e3b0:	f003 fd62 	bl	8011e78 <__ssprint_r>
 800e3b4:	2800      	cmp	r0, #0
 800e3b6:	d001      	beq.n	800e3bc <_svfprintf_r+0x770>
 800e3b8:	f000 fe27 	bl	800f00a <_svfprintf_r+0x13be>
 800e3bc:	af2f      	add	r7, sp, #188	; 0xbc
 800e3be:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e3c0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e3c2:	2a00      	cmp	r2, #0
 800e3c4:	d015      	beq.n	800e3f2 <_svfprintf_r+0x7a6>
 800e3c6:	aa25      	add	r2, sp, #148	; 0x94
 800e3c8:	603a      	str	r2, [r7, #0]
 800e3ca:	2202      	movs	r2, #2
 800e3cc:	189b      	adds	r3, r3, r2
 800e3ce:	932e      	str	r3, [sp, #184]	; 0xb8
 800e3d0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e3d2:	607a      	str	r2, [r7, #4]
 800e3d4:	3301      	adds	r3, #1
 800e3d6:	932d      	str	r3, [sp, #180]	; 0xb4
 800e3d8:	3708      	adds	r7, #8
 800e3da:	2b07      	cmp	r3, #7
 800e3dc:	dd09      	ble.n	800e3f2 <_svfprintf_r+0x7a6>
 800e3de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e3e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e3e2:	aa2c      	add	r2, sp, #176	; 0xb0
 800e3e4:	f003 fd48 	bl	8011e78 <__ssprint_r>
 800e3e8:	2800      	cmp	r0, #0
 800e3ea:	d001      	beq.n	800e3f0 <_svfprintf_r+0x7a4>
 800e3ec:	f000 fe0d 	bl	800f00a <_svfprintf_r+0x13be>
 800e3f0:	af2f      	add	r7, sp, #188	; 0xbc
 800e3f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e3f4:	2b80      	cmp	r3, #128	; 0x80
 800e3f6:	d11f      	bne.n	800e438 <_svfprintf_r+0x7ec>
 800e3f8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e3fa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e3fc:	1a9c      	subs	r4, r3, r2
 800e3fe:	2c00      	cmp	r4, #0
 800e400:	dd1a      	ble.n	800e438 <_svfprintf_r+0x7ec>
 800e402:	0039      	movs	r1, r7
 800e404:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e406:	482d      	ldr	r0, [pc, #180]	; (800e4bc <_svfprintf_r+0x870>)
 800e408:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e40a:	3301      	adds	r3, #1
 800e40c:	3108      	adds	r1, #8
 800e40e:	6038      	str	r0, [r7, #0]
 800e410:	2c10      	cmp	r4, #16
 800e412:	dd00      	ble.n	800e416 <_svfprintf_r+0x7ca>
 800e414:	e2d6      	b.n	800e9c4 <_svfprintf_r+0xd78>
 800e416:	607c      	str	r4, [r7, #4]
 800e418:	18a4      	adds	r4, r4, r2
 800e41a:	000f      	movs	r7, r1
 800e41c:	942e      	str	r4, [sp, #184]	; 0xb8
 800e41e:	932d      	str	r3, [sp, #180]	; 0xb4
 800e420:	2b07      	cmp	r3, #7
 800e422:	dd09      	ble.n	800e438 <_svfprintf_r+0x7ec>
 800e424:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e426:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e428:	aa2c      	add	r2, sp, #176	; 0xb0
 800e42a:	f003 fd25 	bl	8011e78 <__ssprint_r>
 800e42e:	2800      	cmp	r0, #0
 800e430:	d001      	beq.n	800e436 <_svfprintf_r+0x7ea>
 800e432:	f000 fdea 	bl	800f00a <_svfprintf_r+0x13be>
 800e436:	af2f      	add	r7, sp, #188	; 0xbc
 800e438:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e43a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e43c:	1a9c      	subs	r4, r3, r2
 800e43e:	2c00      	cmp	r4, #0
 800e440:	dd1a      	ble.n	800e478 <_svfprintf_r+0x82c>
 800e442:	0039      	movs	r1, r7
 800e444:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e446:	481d      	ldr	r0, [pc, #116]	; (800e4bc <_svfprintf_r+0x870>)
 800e448:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e44a:	3301      	adds	r3, #1
 800e44c:	3108      	adds	r1, #8
 800e44e:	6038      	str	r0, [r7, #0]
 800e450:	2c10      	cmp	r4, #16
 800e452:	dd00      	ble.n	800e456 <_svfprintf_r+0x80a>
 800e454:	e2c9      	b.n	800e9ea <_svfprintf_r+0xd9e>
 800e456:	18a2      	adds	r2, r4, r2
 800e458:	607c      	str	r4, [r7, #4]
 800e45a:	922e      	str	r2, [sp, #184]	; 0xb8
 800e45c:	000f      	movs	r7, r1
 800e45e:	932d      	str	r3, [sp, #180]	; 0xb4
 800e460:	2b07      	cmp	r3, #7
 800e462:	dd09      	ble.n	800e478 <_svfprintf_r+0x82c>
 800e464:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e466:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e468:	aa2c      	add	r2, sp, #176	; 0xb0
 800e46a:	f003 fd05 	bl	8011e78 <__ssprint_r>
 800e46e:	2800      	cmp	r0, #0
 800e470:	d001      	beq.n	800e476 <_svfprintf_r+0x82a>
 800e472:	f000 fdca 	bl	800f00a <_svfprintf_r+0x13be>
 800e476:	af2f      	add	r7, sp, #188	; 0xbc
 800e478:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e47a:	9319      	str	r3, [sp, #100]	; 0x64
 800e47c:	05f3      	lsls	r3, r6, #23
 800e47e:	d500      	bpl.n	800e482 <_svfprintf_r+0x836>
 800e480:	e2ce      	b.n	800ea20 <_svfprintf_r+0xdd4>
 800e482:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e484:	9b08      	ldr	r3, [sp, #32]
 800e486:	4694      	mov	ip, r2
 800e488:	603b      	str	r3, [r7, #0]
 800e48a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e48c:	607b      	str	r3, [r7, #4]
 800e48e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e490:	4463      	add	r3, ip
 800e492:	932e      	str	r3, [sp, #184]	; 0xb8
 800e494:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e496:	3301      	adds	r3, #1
 800e498:	932d      	str	r3, [sp, #180]	; 0xb4
 800e49a:	2b07      	cmp	r3, #7
 800e49c:	dd00      	ble.n	800e4a0 <_svfprintf_r+0x854>
 800e49e:	e3a3      	b.n	800ebe8 <_svfprintf_r+0xf9c>
 800e4a0:	3708      	adds	r7, #8
 800e4a2:	e301      	b.n	800eaa8 <_svfprintf_r+0xe5c>
 800e4a4:	08015254 	.word	0x08015254
 800e4a8:	08015265 	.word	0x08015265
 800e4ac:	40300000 	.word	0x40300000
 800e4b0:	3fe00000 	.word	0x3fe00000
 800e4b4:	fffffbff 	.word	0xfffffbff
 800e4b8:	08015278 	.word	0x08015278
 800e4bc:	08015288 	.word	0x08015288
 800e4c0:	9b08      	ldr	r3, [sp, #32]
 800e4c2:	930c      	str	r3, [sp, #48]	; 0x30
 800e4c4:	e610      	b.n	800e0e8 <_svfprintf_r+0x49c>
 800e4c6:	2306      	movs	r3, #6
 800e4c8:	e5fd      	b.n	800e0c6 <_svfprintf_r+0x47a>
 800e4ca:	930e      	str	r3, [sp, #56]	; 0x38
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	e61a      	b.n	800e106 <_svfprintf_r+0x4ba>
 800e4d0:	7010      	strb	r0, [r2, #0]
 800e4d2:	e684      	b.n	800e1de <_svfprintf_r+0x592>
 800e4d4:	7018      	strb	r0, [r3, #0]
 800e4d6:	3301      	adds	r3, #1
 800e4d8:	1aca      	subs	r2, r1, r3
 800e4da:	d5fb      	bpl.n	800e4d4 <_svfprintf_r+0x888>
 800e4dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e4de:	2300      	movs	r3, #0
 800e4e0:	3201      	adds	r2, #1
 800e4e2:	db01      	blt.n	800e4e8 <_svfprintf_r+0x89c>
 800e4e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e4e6:	3301      	adds	r3, #1
 800e4e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e4ea:	18d3      	adds	r3, r2, r3
 800e4ec:	9323      	str	r3, [sp, #140]	; 0x8c
 800e4ee:	e684      	b.n	800e1fa <_svfprintf_r+0x5ae>
 800e4f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e4f2:	9920      	ldr	r1, [sp, #128]	; 0x80
 800e4f4:	2030      	movs	r0, #48	; 0x30
 800e4f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e4f8:	1851      	adds	r1, r2, r1
 800e4fa:	e7ed      	b.n	800e4d8 <_svfprintf_r+0x88c>
 800e4fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e4fe:	2303      	movs	r3, #3
 800e500:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800e502:	2a46      	cmp	r2, #70	; 0x46
 800e504:	d006      	beq.n	800e514 <_svfprintf_r+0x8c8>
 800e506:	0014      	movs	r4, r2
 800e508:	3c45      	subs	r4, #69	; 0x45
 800e50a:	4262      	negs	r2, r4
 800e50c:	4154      	adcs	r4, r2
 800e50e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e510:	3b01      	subs	r3, #1
 800e512:	1914      	adds	r4, r2, r4
 800e514:	aa2a      	add	r2, sp, #168	; 0xa8
 800e516:	9204      	str	r2, [sp, #16]
 800e518:	aa27      	add	r2, sp, #156	; 0x9c
 800e51a:	9203      	str	r2, [sp, #12]
 800e51c:	aa26      	add	r2, sp, #152	; 0x98
 800e51e:	9202      	str	r2, [sp, #8]
 800e520:	9300      	str	r3, [sp, #0]
 800e522:	002a      	movs	r2, r5
 800e524:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e526:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e528:	9401      	str	r4, [sp, #4]
 800e52a:	f002 fad7 	bl	8010adc <_dtoa_r>
 800e52e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e530:	9008      	str	r0, [sp, #32]
 800e532:	2b47      	cmp	r3, #71	; 0x47
 800e534:	d103      	bne.n	800e53e <_svfprintf_r+0x8f2>
 800e536:	07f3      	lsls	r3, r6, #31
 800e538:	d401      	bmi.n	800e53e <_svfprintf_r+0x8f2>
 800e53a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800e53c:	e65e      	b.n	800e1fc <_svfprintf_r+0x5b0>
 800e53e:	9b08      	ldr	r3, [sp, #32]
 800e540:	191b      	adds	r3, r3, r4
 800e542:	9311      	str	r3, [sp, #68]	; 0x44
 800e544:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e546:	2b46      	cmp	r3, #70	; 0x46
 800e548:	d112      	bne.n	800e570 <_svfprintf_r+0x924>
 800e54a:	9b08      	ldr	r3, [sp, #32]
 800e54c:	781b      	ldrb	r3, [r3, #0]
 800e54e:	2b30      	cmp	r3, #48	; 0x30
 800e550:	d10a      	bne.n	800e568 <_svfprintf_r+0x91c>
 800e552:	2200      	movs	r2, #0
 800e554:	2300      	movs	r3, #0
 800e556:	0028      	movs	r0, r5
 800e558:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e55a:	f7f1 ff75 	bl	8000448 <__aeabi_dcmpeq>
 800e55e:	2800      	cmp	r0, #0
 800e560:	d102      	bne.n	800e568 <_svfprintf_r+0x91c>
 800e562:	2301      	movs	r3, #1
 800e564:	1b1b      	subs	r3, r3, r4
 800e566:	9326      	str	r3, [sp, #152]	; 0x98
 800e568:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e56a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e56c:	18d3      	adds	r3, r2, r3
 800e56e:	9311      	str	r3, [sp, #68]	; 0x44
 800e570:	2200      	movs	r2, #0
 800e572:	2300      	movs	r3, #0
 800e574:	0028      	movs	r0, r5
 800e576:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e578:	f7f1 ff66 	bl	8000448 <__aeabi_dcmpeq>
 800e57c:	2800      	cmp	r0, #0
 800e57e:	d001      	beq.n	800e584 <_svfprintf_r+0x938>
 800e580:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e582:	932a      	str	r3, [sp, #168]	; 0xa8
 800e584:	2230      	movs	r2, #48	; 0x30
 800e586:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800e588:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e58a:	4299      	cmp	r1, r3
 800e58c:	d9d5      	bls.n	800e53a <_svfprintf_r+0x8ee>
 800e58e:	1c59      	adds	r1, r3, #1
 800e590:	912a      	str	r1, [sp, #168]	; 0xa8
 800e592:	701a      	strb	r2, [r3, #0]
 800e594:	e7f7      	b.n	800e586 <_svfprintf_r+0x93a>
 800e596:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e598:	2b46      	cmp	r3, #70	; 0x46
 800e59a:	d000      	beq.n	800e59e <_svfprintf_r+0x952>
 800e59c:	e63f      	b.n	800e21e <_svfprintf_r+0x5d2>
 800e59e:	2201      	movs	r2, #1
 800e5a0:	0033      	movs	r3, r6
 800e5a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e5a4:	4013      	ands	r3, r2
 800e5a6:	430b      	orrs	r3, r1
 800e5a8:	2d00      	cmp	r5, #0
 800e5aa:	dd2c      	ble.n	800e606 <_svfprintf_r+0x9ba>
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d046      	beq.n	800e63e <_svfprintf_r+0x9f2>
 800e5b0:	000a      	movs	r2, r1
 800e5b2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e5b4:	18eb      	adds	r3, r5, r3
 800e5b6:	18d3      	adds	r3, r2, r3
 800e5b8:	9309      	str	r3, [sp, #36]	; 0x24
 800e5ba:	2366      	movs	r3, #102	; 0x66
 800e5bc:	930f      	str	r3, [sp, #60]	; 0x3c
 800e5be:	e030      	b.n	800e622 <_svfprintf_r+0x9d6>
 800e5c0:	781c      	ldrb	r4, [r3, #0]
 800e5c2:	3301      	adds	r3, #1
 800e5c4:	7014      	strb	r4, [r2, #0]
 800e5c6:	3201      	adds	r2, #1
 800e5c8:	e668      	b.n	800e29c <_svfprintf_r+0x650>
 800e5ca:	222a      	movs	r2, #42	; 0x2a
 800e5cc:	ab1e      	add	r3, sp, #120	; 0x78
 800e5ce:	18d2      	adds	r2, r2, r3
 800e5d0:	2800      	cmp	r0, #0
 800e5d2:	d104      	bne.n	800e5de <_svfprintf_r+0x992>
 800e5d4:	2330      	movs	r3, #48	; 0x30
 800e5d6:	222b      	movs	r2, #43	; 0x2b
 800e5d8:	708b      	strb	r3, [r1, #2]
 800e5da:	ab1e      	add	r3, sp, #120	; 0x78
 800e5dc:	18d2      	adds	r2, r2, r3
 800e5de:	3430      	adds	r4, #48	; 0x30
 800e5e0:	1c53      	adds	r3, r2, #1
 800e5e2:	7014      	strb	r4, [r2, #0]
 800e5e4:	e669      	b.n	800e2ba <_svfprintf_r+0x66e>
 800e5e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e5e8:	42ab      	cmp	r3, r5
 800e5ea:	dd12      	ble.n	800e612 <_svfprintf_r+0x9c6>
 800e5ec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e5ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e5f0:	4694      	mov	ip, r2
 800e5f2:	4463      	add	r3, ip
 800e5f4:	9309      	str	r3, [sp, #36]	; 0x24
 800e5f6:	2367      	movs	r3, #103	; 0x67
 800e5f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800e5fa:	2d00      	cmp	r5, #0
 800e5fc:	dc11      	bgt.n	800e622 <_svfprintf_r+0x9d6>
 800e5fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e600:	1b5b      	subs	r3, r3, r5
 800e602:	3301      	adds	r3, #1
 800e604:	e00c      	b.n	800e620 <_svfprintf_r+0x9d4>
 800e606:	2b00      	cmp	r3, #0
 800e608:	d01b      	beq.n	800e642 <_svfprintf_r+0x9f6>
 800e60a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e60c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e60e:	3301      	adds	r3, #1
 800e610:	e7d1      	b.n	800e5b6 <_svfprintf_r+0x96a>
 800e612:	2367      	movs	r3, #103	; 0x67
 800e614:	9509      	str	r5, [sp, #36]	; 0x24
 800e616:	930f      	str	r3, [sp, #60]	; 0x3c
 800e618:	07f3      	lsls	r3, r6, #31
 800e61a:	d502      	bpl.n	800e622 <_svfprintf_r+0x9d6>
 800e61c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e61e:	18eb      	adds	r3, r5, r3
 800e620:	9309      	str	r3, [sp, #36]	; 0x24
 800e622:	2380      	movs	r3, #128	; 0x80
 800e624:	0032      	movs	r2, r6
 800e626:	00db      	lsls	r3, r3, #3
 800e628:	401a      	ands	r2, r3
 800e62a:	9211      	str	r2, [sp, #68]	; 0x44
 800e62c:	2200      	movs	r2, #0
 800e62e:	9210      	str	r2, [sp, #64]	; 0x40
 800e630:	421e      	tst	r6, r3
 800e632:	d100      	bne.n	800e636 <_svfprintf_r+0x9ea>
 800e634:	e65d      	b.n	800e2f2 <_svfprintf_r+0x6a6>
 800e636:	4295      	cmp	r5, r2
 800e638:	dc25      	bgt.n	800e686 <_svfprintf_r+0xa3a>
 800e63a:	9211      	str	r2, [sp, #68]	; 0x44
 800e63c:	e659      	b.n	800e2f2 <_svfprintf_r+0x6a6>
 800e63e:	9509      	str	r5, [sp, #36]	; 0x24
 800e640:	e7bb      	b.n	800e5ba <_svfprintf_r+0x96e>
 800e642:	2366      	movs	r3, #102	; 0x66
 800e644:	9209      	str	r2, [sp, #36]	; 0x24
 800e646:	930f      	str	r3, [sp, #60]	; 0x3c
 800e648:	e7eb      	b.n	800e622 <_svfprintf_r+0x9d6>
 800e64a:	42ab      	cmp	r3, r5
 800e64c:	da0e      	bge.n	800e66c <_svfprintf_r+0xa20>
 800e64e:	1aed      	subs	r5, r5, r3
 800e650:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e652:	785b      	ldrb	r3, [r3, #1]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d012      	beq.n	800e67e <_svfprintf_r+0xa32>
 800e658:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e65a:	3301      	adds	r3, #1
 800e65c:	9311      	str	r3, [sp, #68]	; 0x44
 800e65e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e660:	3301      	adds	r3, #1
 800e662:	9312      	str	r3, [sp, #72]	; 0x48
 800e664:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e666:	781b      	ldrb	r3, [r3, #0]
 800e668:	2bff      	cmp	r3, #255	; 0xff
 800e66a:	d1ee      	bne.n	800e64a <_svfprintf_r+0x9fe>
 800e66c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e66e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e670:	189b      	adds	r3, r3, r2
 800e672:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e674:	4353      	muls	r3, r2
 800e676:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e678:	189b      	adds	r3, r3, r2
 800e67a:	9309      	str	r3, [sp, #36]	; 0x24
 800e67c:	e639      	b.n	800e2f2 <_svfprintf_r+0x6a6>
 800e67e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e680:	3301      	adds	r3, #1
 800e682:	9310      	str	r3, [sp, #64]	; 0x40
 800e684:	e7ee      	b.n	800e664 <_svfprintf_r+0xa18>
 800e686:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e688:	9311      	str	r3, [sp, #68]	; 0x44
 800e68a:	e7eb      	b.n	800e664 <_svfprintf_r+0xa18>
 800e68c:	1d23      	adds	r3, r4, #4
 800e68e:	930d      	str	r3, [sp, #52]	; 0x34
 800e690:	06b3      	lsls	r3, r6, #26
 800e692:	d509      	bpl.n	800e6a8 <_svfprintf_r+0xa5c>
 800e694:	6823      	ldr	r3, [r4, #0]
 800e696:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e698:	601a      	str	r2, [r3, #0]
 800e69a:	17d2      	asrs	r2, r2, #31
 800e69c:	605a      	str	r2, [r3, #4]
 800e69e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e6a0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800e6a2:	9308      	str	r3, [sp, #32]
 800e6a4:	f7ff fb0d 	bl	800dcc2 <_svfprintf_r+0x76>
 800e6a8:	06f3      	lsls	r3, r6, #27
 800e6aa:	d503      	bpl.n	800e6b4 <_svfprintf_r+0xa68>
 800e6ac:	6823      	ldr	r3, [r4, #0]
 800e6ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e6b0:	601a      	str	r2, [r3, #0]
 800e6b2:	e7f4      	b.n	800e69e <_svfprintf_r+0xa52>
 800e6b4:	0673      	lsls	r3, r6, #25
 800e6b6:	d503      	bpl.n	800e6c0 <_svfprintf_r+0xa74>
 800e6b8:	6823      	ldr	r3, [r4, #0]
 800e6ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e6bc:	801a      	strh	r2, [r3, #0]
 800e6be:	e7ee      	b.n	800e69e <_svfprintf_r+0xa52>
 800e6c0:	05b6      	lsls	r6, r6, #22
 800e6c2:	d5f3      	bpl.n	800e6ac <_svfprintf_r+0xa60>
 800e6c4:	6823      	ldr	r3, [r4, #0]
 800e6c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e6c8:	701a      	strb	r2, [r3, #0]
 800e6ca:	e7e8      	b.n	800e69e <_svfprintf_r+0xa52>
 800e6cc:	2310      	movs	r3, #16
 800e6ce:	431e      	orrs	r6, r3
 800e6d0:	2320      	movs	r3, #32
 800e6d2:	0030      	movs	r0, r6
 800e6d4:	4018      	ands	r0, r3
 800e6d6:	421e      	tst	r6, r3
 800e6d8:	d00f      	beq.n	800e6fa <_svfprintf_r+0xaae>
 800e6da:	3b19      	subs	r3, #25
 800e6dc:	3407      	adds	r4, #7
 800e6de:	439c      	bics	r4, r3
 800e6e0:	0022      	movs	r2, r4
 800e6e2:	ca18      	ldmia	r2!, {r3, r4}
 800e6e4:	9306      	str	r3, [sp, #24]
 800e6e6:	9407      	str	r4, [sp, #28]
 800e6e8:	920d      	str	r2, [sp, #52]	; 0x34
 800e6ea:	4bc9      	ldr	r3, [pc, #804]	; (800ea10 <_svfprintf_r+0xdc4>)
 800e6ec:	401e      	ands	r6, r3
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	221b      	movs	r2, #27
 800e6f2:	a91e      	add	r1, sp, #120	; 0x78
 800e6f4:	1852      	adds	r2, r2, r1
 800e6f6:	2100      	movs	r1, #0
 800e6f8:	e430      	b.n	800df5c <_svfprintf_r+0x310>
 800e6fa:	0022      	movs	r2, r4
 800e6fc:	ca08      	ldmia	r2!, {r3}
 800e6fe:	0031      	movs	r1, r6
 800e700:	920d      	str	r2, [sp, #52]	; 0x34
 800e702:	2210      	movs	r2, #16
 800e704:	4011      	ands	r1, r2
 800e706:	4216      	tst	r6, r2
 800e708:	d002      	beq.n	800e710 <_svfprintf_r+0xac4>
 800e70a:	9306      	str	r3, [sp, #24]
 800e70c:	9007      	str	r0, [sp, #28]
 800e70e:	e7ec      	b.n	800e6ea <_svfprintf_r+0xa9e>
 800e710:	2240      	movs	r2, #64	; 0x40
 800e712:	0030      	movs	r0, r6
 800e714:	4010      	ands	r0, r2
 800e716:	4216      	tst	r6, r2
 800e718:	d003      	beq.n	800e722 <_svfprintf_r+0xad6>
 800e71a:	b29b      	uxth	r3, r3
 800e71c:	9306      	str	r3, [sp, #24]
 800e71e:	9107      	str	r1, [sp, #28]
 800e720:	e7e3      	b.n	800e6ea <_svfprintf_r+0xa9e>
 800e722:	2280      	movs	r2, #128	; 0x80
 800e724:	0031      	movs	r1, r6
 800e726:	0092      	lsls	r2, r2, #2
 800e728:	4011      	ands	r1, r2
 800e72a:	4216      	tst	r6, r2
 800e72c:	d0f6      	beq.n	800e71c <_svfprintf_r+0xad0>
 800e72e:	b2db      	uxtb	r3, r3
 800e730:	e7eb      	b.n	800e70a <_svfprintf_r+0xabe>
 800e732:	0023      	movs	r3, r4
 800e734:	cb04      	ldmia	r3!, {r2}
 800e736:	49b7      	ldr	r1, [pc, #732]	; (800ea14 <_svfprintf_r+0xdc8>)
 800e738:	9206      	str	r2, [sp, #24]
 800e73a:	aa25      	add	r2, sp, #148	; 0x94
 800e73c:	8011      	strh	r1, [r2, #0]
 800e73e:	4ab6      	ldr	r2, [pc, #728]	; (800ea18 <_svfprintf_r+0xdcc>)
 800e740:	930d      	str	r3, [sp, #52]	; 0x34
 800e742:	2300      	movs	r3, #0
 800e744:	921f      	str	r2, [sp, #124]	; 0x7c
 800e746:	2278      	movs	r2, #120	; 0x78
 800e748:	9307      	str	r3, [sp, #28]
 800e74a:	3302      	adds	r3, #2
 800e74c:	431e      	orrs	r6, r3
 800e74e:	920f      	str	r2, [sp, #60]	; 0x3c
 800e750:	e7ce      	b.n	800e6f0 <_svfprintf_r+0xaa4>
 800e752:	0023      	movs	r3, r4
 800e754:	cb04      	ldmia	r3!, {r2}
 800e756:	2400      	movs	r4, #0
 800e758:	930d      	str	r3, [sp, #52]	; 0x34
 800e75a:	231b      	movs	r3, #27
 800e75c:	9208      	str	r2, [sp, #32]
 800e75e:	aa1e      	add	r2, sp, #120	; 0x78
 800e760:	189b      	adds	r3, r3, r2
 800e762:	701c      	strb	r4, [r3, #0]
 800e764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e766:	3301      	adds	r3, #1
 800e768:	d00e      	beq.n	800e788 <_svfprintf_r+0xb3c>
 800e76a:	0021      	movs	r1, r4
 800e76c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e76e:	9808      	ldr	r0, [sp, #32]
 800e770:	f002 f83a 	bl	80107e8 <memchr>
 800e774:	900c      	str	r0, [sp, #48]	; 0x30
 800e776:	42a0      	cmp	r0, r4
 800e778:	d100      	bne.n	800e77c <_svfprintf_r+0xb30>
 800e77a:	e10d      	b.n	800e998 <_svfprintf_r+0xd4c>
 800e77c:	9a08      	ldr	r2, [sp, #32]
 800e77e:	1a83      	subs	r3, r0, r2
 800e780:	9309      	str	r3, [sp, #36]	; 0x24
 800e782:	0023      	movs	r3, r4
 800e784:	940c      	str	r4, [sp, #48]	; 0x30
 800e786:	e44e      	b.n	800e026 <_svfprintf_r+0x3da>
 800e788:	9808      	ldr	r0, [sp, #32]
 800e78a:	f7f1 fcbb 	bl	8000104 <strlen>
 800e78e:	9009      	str	r0, [sp, #36]	; 0x24
 800e790:	e7f7      	b.n	800e782 <_svfprintf_r+0xb36>
 800e792:	2310      	movs	r3, #16
 800e794:	431e      	orrs	r6, r3
 800e796:	2320      	movs	r3, #32
 800e798:	0030      	movs	r0, r6
 800e79a:	4018      	ands	r0, r3
 800e79c:	421e      	tst	r6, r3
 800e79e:	d009      	beq.n	800e7b4 <_svfprintf_r+0xb68>
 800e7a0:	3b19      	subs	r3, #25
 800e7a2:	3407      	adds	r4, #7
 800e7a4:	439c      	bics	r4, r3
 800e7a6:	0022      	movs	r2, r4
 800e7a8:	ca18      	ldmia	r2!, {r3, r4}
 800e7aa:	9306      	str	r3, [sp, #24]
 800e7ac:	9407      	str	r4, [sp, #28]
 800e7ae:	920d      	str	r2, [sp, #52]	; 0x34
 800e7b0:	2301      	movs	r3, #1
 800e7b2:	e79d      	b.n	800e6f0 <_svfprintf_r+0xaa4>
 800e7b4:	0023      	movs	r3, r4
 800e7b6:	cb04      	ldmia	r3!, {r2}
 800e7b8:	0031      	movs	r1, r6
 800e7ba:	930d      	str	r3, [sp, #52]	; 0x34
 800e7bc:	2310      	movs	r3, #16
 800e7be:	4019      	ands	r1, r3
 800e7c0:	421e      	tst	r6, r3
 800e7c2:	d003      	beq.n	800e7cc <_svfprintf_r+0xb80>
 800e7c4:	9206      	str	r2, [sp, #24]
 800e7c6:	9007      	str	r0, [sp, #28]
 800e7c8:	3b0f      	subs	r3, #15
 800e7ca:	e791      	b.n	800e6f0 <_svfprintf_r+0xaa4>
 800e7cc:	2340      	movs	r3, #64	; 0x40
 800e7ce:	0030      	movs	r0, r6
 800e7d0:	4018      	ands	r0, r3
 800e7d2:	421e      	tst	r6, r3
 800e7d4:	d003      	beq.n	800e7de <_svfprintf_r+0xb92>
 800e7d6:	b293      	uxth	r3, r2
 800e7d8:	9306      	str	r3, [sp, #24]
 800e7da:	9107      	str	r1, [sp, #28]
 800e7dc:	e7e8      	b.n	800e7b0 <_svfprintf_r+0xb64>
 800e7de:	2380      	movs	r3, #128	; 0x80
 800e7e0:	0031      	movs	r1, r6
 800e7e2:	009b      	lsls	r3, r3, #2
 800e7e4:	4019      	ands	r1, r3
 800e7e6:	421e      	tst	r6, r3
 800e7e8:	d003      	beq.n	800e7f2 <_svfprintf_r+0xba6>
 800e7ea:	b2d3      	uxtb	r3, r2
 800e7ec:	9306      	str	r3, [sp, #24]
 800e7ee:	9007      	str	r0, [sp, #28]
 800e7f0:	e7de      	b.n	800e7b0 <_svfprintf_r+0xb64>
 800e7f2:	9206      	str	r2, [sp, #24]
 800e7f4:	e7f1      	b.n	800e7da <_svfprintf_r+0xb8e>
 800e7f6:	4b89      	ldr	r3, [pc, #548]	; (800ea1c <_svfprintf_r+0xdd0>)
 800e7f8:	0030      	movs	r0, r6
 800e7fa:	931f      	str	r3, [sp, #124]	; 0x7c
 800e7fc:	2320      	movs	r3, #32
 800e7fe:	4018      	ands	r0, r3
 800e800:	421e      	tst	r6, r3
 800e802:	d01a      	beq.n	800e83a <_svfprintf_r+0xbee>
 800e804:	3b19      	subs	r3, #25
 800e806:	3407      	adds	r4, #7
 800e808:	439c      	bics	r4, r3
 800e80a:	0022      	movs	r2, r4
 800e80c:	ca18      	ldmia	r2!, {r3, r4}
 800e80e:	9306      	str	r3, [sp, #24]
 800e810:	9407      	str	r4, [sp, #28]
 800e812:	920d      	str	r2, [sp, #52]	; 0x34
 800e814:	07f3      	lsls	r3, r6, #31
 800e816:	d50a      	bpl.n	800e82e <_svfprintf_r+0xbe2>
 800e818:	9b06      	ldr	r3, [sp, #24]
 800e81a:	9a07      	ldr	r2, [sp, #28]
 800e81c:	4313      	orrs	r3, r2
 800e81e:	d006      	beq.n	800e82e <_svfprintf_r+0xbe2>
 800e820:	2230      	movs	r2, #48	; 0x30
 800e822:	ab25      	add	r3, sp, #148	; 0x94
 800e824:	701a      	strb	r2, [r3, #0]
 800e826:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e828:	705a      	strb	r2, [r3, #1]
 800e82a:	2302      	movs	r3, #2
 800e82c:	431e      	orrs	r6, r3
 800e82e:	4b78      	ldr	r3, [pc, #480]	; (800ea10 <_svfprintf_r+0xdc4>)
 800e830:	401e      	ands	r6, r3
 800e832:	2302      	movs	r3, #2
 800e834:	e75c      	b.n	800e6f0 <_svfprintf_r+0xaa4>
 800e836:	4b78      	ldr	r3, [pc, #480]	; (800ea18 <_svfprintf_r+0xdcc>)
 800e838:	e7de      	b.n	800e7f8 <_svfprintf_r+0xbac>
 800e83a:	0023      	movs	r3, r4
 800e83c:	cb04      	ldmia	r3!, {r2}
 800e83e:	0031      	movs	r1, r6
 800e840:	930d      	str	r3, [sp, #52]	; 0x34
 800e842:	2310      	movs	r3, #16
 800e844:	4019      	ands	r1, r3
 800e846:	421e      	tst	r6, r3
 800e848:	d002      	beq.n	800e850 <_svfprintf_r+0xc04>
 800e84a:	9206      	str	r2, [sp, #24]
 800e84c:	9007      	str	r0, [sp, #28]
 800e84e:	e7e1      	b.n	800e814 <_svfprintf_r+0xbc8>
 800e850:	2340      	movs	r3, #64	; 0x40
 800e852:	0030      	movs	r0, r6
 800e854:	4018      	ands	r0, r3
 800e856:	421e      	tst	r6, r3
 800e858:	d003      	beq.n	800e862 <_svfprintf_r+0xc16>
 800e85a:	b293      	uxth	r3, r2
 800e85c:	9306      	str	r3, [sp, #24]
 800e85e:	9107      	str	r1, [sp, #28]
 800e860:	e7d8      	b.n	800e814 <_svfprintf_r+0xbc8>
 800e862:	2380      	movs	r3, #128	; 0x80
 800e864:	0031      	movs	r1, r6
 800e866:	009b      	lsls	r3, r3, #2
 800e868:	4019      	ands	r1, r3
 800e86a:	421e      	tst	r6, r3
 800e86c:	d002      	beq.n	800e874 <_svfprintf_r+0xc28>
 800e86e:	b2d3      	uxtb	r3, r2
 800e870:	9306      	str	r3, [sp, #24]
 800e872:	e7eb      	b.n	800e84c <_svfprintf_r+0xc00>
 800e874:	9206      	str	r2, [sp, #24]
 800e876:	e7f2      	b.n	800e85e <_svfprintf_r+0xc12>
 800e878:	9b07      	ldr	r3, [sp, #28]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d10a      	bne.n	800e894 <_svfprintf_r+0xc48>
 800e87e:	9b06      	ldr	r3, [sp, #24]
 800e880:	2b09      	cmp	r3, #9
 800e882:	d807      	bhi.n	800e894 <_svfprintf_r+0xc48>
 800e884:	23e7      	movs	r3, #231	; 0xe7
 800e886:	aa1e      	add	r2, sp, #120	; 0x78
 800e888:	189b      	adds	r3, r3, r2
 800e88a:	9a06      	ldr	r2, [sp, #24]
 800e88c:	3230      	adds	r2, #48	; 0x30
 800e88e:	701a      	strb	r2, [r3, #0]
 800e890:	f000 fc18 	bl	800f0c4 <_svfprintf_r+0x1478>
 800e894:	2680      	movs	r6, #128	; 0x80
 800e896:	2300      	movs	r3, #0
 800e898:	00f6      	lsls	r6, r6, #3
 800e89a:	930e      	str	r3, [sp, #56]	; 0x38
 800e89c:	ad58      	add	r5, sp, #352	; 0x160
 800e89e:	4026      	ands	r6, r4
 800e8a0:	220a      	movs	r2, #10
 800e8a2:	9806      	ldr	r0, [sp, #24]
 800e8a4:	9907      	ldr	r1, [sp, #28]
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	f7f1 fdfc 	bl	80004a4 <__aeabi_uldivmod>
 800e8ac:	1e6b      	subs	r3, r5, #1
 800e8ae:	3230      	adds	r2, #48	; 0x30
 800e8b0:	9308      	str	r3, [sp, #32]
 800e8b2:	701a      	strb	r2, [r3, #0]
 800e8b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e8b6:	900c      	str	r0, [sp, #48]	; 0x30
 800e8b8:	3301      	adds	r3, #1
 800e8ba:	9110      	str	r1, [sp, #64]	; 0x40
 800e8bc:	930e      	str	r3, [sp, #56]	; 0x38
 800e8be:	2e00      	cmp	r6, #0
 800e8c0:	d01d      	beq.n	800e8fe <_svfprintf_r+0xcb2>
 800e8c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e8c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e8c6:	781b      	ldrb	r3, [r3, #0]
 800e8c8:	429a      	cmp	r2, r3
 800e8ca:	d118      	bne.n	800e8fe <_svfprintf_r+0xcb2>
 800e8cc:	2aff      	cmp	r2, #255	; 0xff
 800e8ce:	d016      	beq.n	800e8fe <_svfprintf_r+0xcb2>
 800e8d0:	9b07      	ldr	r3, [sp, #28]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d102      	bne.n	800e8dc <_svfprintf_r+0xc90>
 800e8d6:	9b06      	ldr	r3, [sp, #24]
 800e8d8:	2b09      	cmp	r3, #9
 800e8da:	d910      	bls.n	800e8fe <_svfprintf_r+0xcb2>
 800e8dc:	9b08      	ldr	r3, [sp, #32]
 800e8de:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e8e0:	991d      	ldr	r1, [sp, #116]	; 0x74
 800e8e2:	1a9b      	subs	r3, r3, r2
 800e8e4:	0018      	movs	r0, r3
 800e8e6:	9308      	str	r3, [sp, #32]
 800e8e8:	f7fd ffd1 	bl	800c88e <strncpy>
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e8f0:	920e      	str	r2, [sp, #56]	; 0x38
 800e8f2:	785b      	ldrb	r3, [r3, #1]
 800e8f4:	1e5a      	subs	r2, r3, #1
 800e8f6:	4193      	sbcs	r3, r2
 800e8f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e8fa:	18d3      	adds	r3, r2, r3
 800e8fc:	9312      	str	r3, [sp, #72]	; 0x48
 800e8fe:	9b07      	ldr	r3, [sp, #28]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d10f      	bne.n	800e924 <_svfprintf_r+0xcd8>
 800e904:	9b06      	ldr	r3, [sp, #24]
 800e906:	2b09      	cmp	r3, #9
 800e908:	d80c      	bhi.n	800e924 <_svfprintf_r+0xcd8>
 800e90a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e90c:	9a08      	ldr	r2, [sp, #32]
 800e90e:	9319      	str	r3, [sp, #100]	; 0x64
 800e910:	ab58      	add	r3, sp, #352	; 0x160
 800e912:	1a9b      	subs	r3, r3, r2
 800e914:	9309      	str	r3, [sp, #36]	; 0x24
 800e916:	2300      	movs	r3, #0
 800e918:	0026      	movs	r6, r4
 800e91a:	930c      	str	r3, [sp, #48]	; 0x30
 800e91c:	001d      	movs	r5, r3
 800e91e:	9310      	str	r3, [sp, #64]	; 0x40
 800e920:	9311      	str	r3, [sp, #68]	; 0x44
 800e922:	e4f2      	b.n	800e30a <_svfprintf_r+0x6be>
 800e924:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e926:	9d08      	ldr	r5, [sp, #32]
 800e928:	9306      	str	r3, [sp, #24]
 800e92a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e92c:	9307      	str	r3, [sp, #28]
 800e92e:	e7b7      	b.n	800e8a0 <_svfprintf_r+0xc54>
 800e930:	200f      	movs	r0, #15
 800e932:	ab58      	add	r3, sp, #352	; 0x160
 800e934:	9308      	str	r3, [sp, #32]
 800e936:	9b08      	ldr	r3, [sp, #32]
 800e938:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e93a:	3b01      	subs	r3, #1
 800e93c:	9308      	str	r3, [sp, #32]
 800e93e:	9b06      	ldr	r3, [sp, #24]
 800e940:	4003      	ands	r3, r0
 800e942:	5cd3      	ldrb	r3, [r2, r3]
 800e944:	9a08      	ldr	r2, [sp, #32]
 800e946:	7013      	strb	r3, [r2, #0]
 800e948:	9b07      	ldr	r3, [sp, #28]
 800e94a:	0719      	lsls	r1, r3, #28
 800e94c:	9b06      	ldr	r3, [sp, #24]
 800e94e:	091a      	lsrs	r2, r3, #4
 800e950:	9b07      	ldr	r3, [sp, #28]
 800e952:	4311      	orrs	r1, r2
 800e954:	091b      	lsrs	r3, r3, #4
 800e956:	9307      	str	r3, [sp, #28]
 800e958:	000b      	movs	r3, r1
 800e95a:	9a07      	ldr	r2, [sp, #28]
 800e95c:	9106      	str	r1, [sp, #24]
 800e95e:	4313      	orrs	r3, r2
 800e960:	d1e9      	bne.n	800e936 <_svfprintf_r+0xcea>
 800e962:	e7d2      	b.n	800e90a <_svfprintf_r+0xcbe>
 800e964:	aa58      	add	r2, sp, #352	; 0x160
 800e966:	9208      	str	r2, [sp, #32]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d1ce      	bne.n	800e90a <_svfprintf_r+0xcbe>
 800e96c:	07f6      	lsls	r6, r6, #31
 800e96e:	d5cc      	bpl.n	800e90a <_svfprintf_r+0xcbe>
 800e970:	aa1e      	add	r2, sp, #120	; 0x78
 800e972:	33e7      	adds	r3, #231	; 0xe7
 800e974:	189b      	adds	r3, r3, r2
 800e976:	2230      	movs	r2, #48	; 0x30
 800e978:	e789      	b.n	800e88e <_svfprintf_r+0xc42>
 800e97a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d100      	bne.n	800e982 <_svfprintf_r+0xd36>
 800e980:	e364      	b.n	800f04c <_svfprintf_r+0x1400>
 800e982:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e984:	211b      	movs	r1, #27
 800e986:	ab3f      	add	r3, sp, #252	; 0xfc
 800e988:	701a      	strb	r2, [r3, #0]
 800e98a:	2200      	movs	r2, #0
 800e98c:	a81e      	add	r0, sp, #120	; 0x78
 800e98e:	1809      	adds	r1, r1, r0
 800e990:	700a      	strb	r2, [r1, #0]
 800e992:	940d      	str	r4, [sp, #52]	; 0x34
 800e994:	f7ff fabd 	bl	800df12 <_svfprintf_r+0x2c6>
 800e998:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e99a:	f7ff fb44 	bl	800e026 <_svfprintf_r+0x3da>
 800e99e:	2010      	movs	r0, #16
 800e9a0:	1812      	adds	r2, r2, r0
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	922e      	str	r2, [sp, #184]	; 0xb8
 800e9a6:	932d      	str	r3, [sp, #180]	; 0xb4
 800e9a8:	2b07      	cmp	r3, #7
 800e9aa:	dd08      	ble.n	800e9be <_svfprintf_r+0xd72>
 800e9ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e9ae:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e9b0:	aa2c      	add	r2, sp, #176	; 0xb0
 800e9b2:	f003 fa61 	bl	8011e78 <__ssprint_r>
 800e9b6:	2800      	cmp	r0, #0
 800e9b8:	d000      	beq.n	800e9bc <_svfprintf_r+0xd70>
 800e9ba:	e326      	b.n	800f00a <_svfprintf_r+0x13be>
 800e9bc:	a92f      	add	r1, sp, #188	; 0xbc
 800e9be:	000f      	movs	r7, r1
 800e9c0:	3c10      	subs	r4, #16
 800e9c2:	e4c5      	b.n	800e350 <_svfprintf_r+0x704>
 800e9c4:	2010      	movs	r0, #16
 800e9c6:	1812      	adds	r2, r2, r0
 800e9c8:	6078      	str	r0, [r7, #4]
 800e9ca:	922e      	str	r2, [sp, #184]	; 0xb8
 800e9cc:	932d      	str	r3, [sp, #180]	; 0xb4
 800e9ce:	2b07      	cmp	r3, #7
 800e9d0:	dd08      	ble.n	800e9e4 <_svfprintf_r+0xd98>
 800e9d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e9d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e9d6:	aa2c      	add	r2, sp, #176	; 0xb0
 800e9d8:	f003 fa4e 	bl	8011e78 <__ssprint_r>
 800e9dc:	2800      	cmp	r0, #0
 800e9de:	d000      	beq.n	800e9e2 <_svfprintf_r+0xd96>
 800e9e0:	e313      	b.n	800f00a <_svfprintf_r+0x13be>
 800e9e2:	a92f      	add	r1, sp, #188	; 0xbc
 800e9e4:	000f      	movs	r7, r1
 800e9e6:	3c10      	subs	r4, #16
 800e9e8:	e50b      	b.n	800e402 <_svfprintf_r+0x7b6>
 800e9ea:	2010      	movs	r0, #16
 800e9ec:	1812      	adds	r2, r2, r0
 800e9ee:	6078      	str	r0, [r7, #4]
 800e9f0:	922e      	str	r2, [sp, #184]	; 0xb8
 800e9f2:	932d      	str	r3, [sp, #180]	; 0xb4
 800e9f4:	2b07      	cmp	r3, #7
 800e9f6:	dd08      	ble.n	800ea0a <_svfprintf_r+0xdbe>
 800e9f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e9fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e9fc:	aa2c      	add	r2, sp, #176	; 0xb0
 800e9fe:	f003 fa3b 	bl	8011e78 <__ssprint_r>
 800ea02:	2800      	cmp	r0, #0
 800ea04:	d000      	beq.n	800ea08 <_svfprintf_r+0xdbc>
 800ea06:	e300      	b.n	800f00a <_svfprintf_r+0x13be>
 800ea08:	a92f      	add	r1, sp, #188	; 0xbc
 800ea0a:	000f      	movs	r7, r1
 800ea0c:	3c10      	subs	r4, #16
 800ea0e:	e518      	b.n	800e442 <_svfprintf_r+0x7f6>
 800ea10:	fffffbff 	.word	0xfffffbff
 800ea14:	00007830 	.word	0x00007830
 800ea18:	08015254 	.word	0x08015254
 800ea1c:	08015265 	.word	0x08015265
 800ea20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea22:	2b65      	cmp	r3, #101	; 0x65
 800ea24:	dc00      	bgt.n	800ea28 <_svfprintf_r+0xddc>
 800ea26:	e241      	b.n	800eeac <_svfprintf_r+0x1260>
 800ea28:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ea2a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	2300      	movs	r3, #0
 800ea30:	f7f1 fd0a 	bl	8000448 <__aeabi_dcmpeq>
 800ea34:	2800      	cmp	r0, #0
 800ea36:	d077      	beq.n	800eb28 <_svfprintf_r+0xedc>
 800ea38:	4bca      	ldr	r3, [pc, #808]	; (800ed64 <_svfprintf_r+0x1118>)
 800ea3a:	603b      	str	r3, [r7, #0]
 800ea3c:	2301      	movs	r3, #1
 800ea3e:	607b      	str	r3, [r7, #4]
 800ea40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ea42:	3708      	adds	r7, #8
 800ea44:	3301      	adds	r3, #1
 800ea46:	932e      	str	r3, [sp, #184]	; 0xb8
 800ea48:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ea4a:	3301      	adds	r3, #1
 800ea4c:	932d      	str	r3, [sp, #180]	; 0xb4
 800ea4e:	2b07      	cmp	r3, #7
 800ea50:	dd08      	ble.n	800ea64 <_svfprintf_r+0xe18>
 800ea52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea54:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ea56:	aa2c      	add	r2, sp, #176	; 0xb0
 800ea58:	f003 fa0e 	bl	8011e78 <__ssprint_r>
 800ea5c:	2800      	cmp	r0, #0
 800ea5e:	d000      	beq.n	800ea62 <_svfprintf_r+0xe16>
 800ea60:	e2d3      	b.n	800f00a <_svfprintf_r+0x13be>
 800ea62:	af2f      	add	r7, sp, #188	; 0xbc
 800ea64:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ea66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ea68:	4293      	cmp	r3, r2
 800ea6a:	db01      	blt.n	800ea70 <_svfprintf_r+0xe24>
 800ea6c:	07f3      	lsls	r3, r6, #31
 800ea6e:	d51b      	bpl.n	800eaa8 <_svfprintf_r+0xe5c>
 800ea70:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ea72:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ea74:	603b      	str	r3, [r7, #0]
 800ea76:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ea78:	607b      	str	r3, [r7, #4]
 800ea7a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ea7c:	3708      	adds	r7, #8
 800ea7e:	189b      	adds	r3, r3, r2
 800ea80:	932e      	str	r3, [sp, #184]	; 0xb8
 800ea82:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ea84:	3301      	adds	r3, #1
 800ea86:	932d      	str	r3, [sp, #180]	; 0xb4
 800ea88:	2b07      	cmp	r3, #7
 800ea8a:	dd08      	ble.n	800ea9e <_svfprintf_r+0xe52>
 800ea8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea8e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ea90:	aa2c      	add	r2, sp, #176	; 0xb0
 800ea92:	f003 f9f1 	bl	8011e78 <__ssprint_r>
 800ea96:	2800      	cmp	r0, #0
 800ea98:	d000      	beq.n	800ea9c <_svfprintf_r+0xe50>
 800ea9a:	e2b6      	b.n	800f00a <_svfprintf_r+0x13be>
 800ea9c:	af2f      	add	r7, sp, #188	; 0xbc
 800ea9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eaa0:	2510      	movs	r5, #16
 800eaa2:	1e5c      	subs	r4, r3, #1
 800eaa4:	2c00      	cmp	r4, #0
 800eaa6:	dc2e      	bgt.n	800eb06 <_svfprintf_r+0xeba>
 800eaa8:	0776      	lsls	r6, r6, #29
 800eaaa:	d500      	bpl.n	800eaae <_svfprintf_r+0xe62>
 800eaac:	e290      	b.n	800efd0 <_svfprintf_r+0x1384>
 800eaae:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800eab0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800eab2:	4293      	cmp	r3, r2
 800eab4:	da00      	bge.n	800eab8 <_svfprintf_r+0xe6c>
 800eab6:	0013      	movs	r3, r2
 800eab8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800eaba:	18d3      	adds	r3, r2, r3
 800eabc:	9317      	str	r3, [sp, #92]	; 0x5c
 800eabe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d007      	beq.n	800ead4 <_svfprintf_r+0xe88>
 800eac4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eac6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eac8:	aa2c      	add	r2, sp, #176	; 0xb0
 800eaca:	f003 f9d5 	bl	8011e78 <__ssprint_r>
 800eace:	2800      	cmp	r0, #0
 800ead0:	d000      	beq.n	800ead4 <_svfprintf_r+0xe88>
 800ead2:	e29a      	b.n	800f00a <_svfprintf_r+0x13be>
 800ead4:	2300      	movs	r3, #0
 800ead6:	932d      	str	r3, [sp, #180]	; 0xb4
 800ead8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d000      	beq.n	800eae0 <_svfprintf_r+0xe94>
 800eade:	e2b0      	b.n	800f042 <_svfprintf_r+0x13f6>
 800eae0:	af2f      	add	r7, sp, #188	; 0xbc
 800eae2:	e5dc      	b.n	800e69e <_svfprintf_r+0xa52>
 800eae4:	3210      	adds	r2, #16
 800eae6:	607d      	str	r5, [r7, #4]
 800eae8:	922e      	str	r2, [sp, #184]	; 0xb8
 800eaea:	932d      	str	r3, [sp, #180]	; 0xb4
 800eaec:	2b07      	cmp	r3, #7
 800eaee:	dd08      	ble.n	800eb02 <_svfprintf_r+0xeb6>
 800eaf0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eaf2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eaf4:	aa2c      	add	r2, sp, #176	; 0xb0
 800eaf6:	f003 f9bf 	bl	8011e78 <__ssprint_r>
 800eafa:	2800      	cmp	r0, #0
 800eafc:	d000      	beq.n	800eb00 <_svfprintf_r+0xeb4>
 800eafe:	e284      	b.n	800f00a <_svfprintf_r+0x13be>
 800eb00:	a92f      	add	r1, sp, #188	; 0xbc
 800eb02:	000f      	movs	r7, r1
 800eb04:	3c10      	subs	r4, #16
 800eb06:	0039      	movs	r1, r7
 800eb08:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800eb0a:	4897      	ldr	r0, [pc, #604]	; (800ed68 <_svfprintf_r+0x111c>)
 800eb0c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800eb0e:	3301      	adds	r3, #1
 800eb10:	3108      	adds	r1, #8
 800eb12:	6038      	str	r0, [r7, #0]
 800eb14:	2c10      	cmp	r4, #16
 800eb16:	dce5      	bgt.n	800eae4 <_svfprintf_r+0xe98>
 800eb18:	607c      	str	r4, [r7, #4]
 800eb1a:	18a4      	adds	r4, r4, r2
 800eb1c:	942e      	str	r4, [sp, #184]	; 0xb8
 800eb1e:	000f      	movs	r7, r1
 800eb20:	932d      	str	r3, [sp, #180]	; 0xb4
 800eb22:	2b07      	cmp	r3, #7
 800eb24:	ddc0      	ble.n	800eaa8 <_svfprintf_r+0xe5c>
 800eb26:	e05f      	b.n	800ebe8 <_svfprintf_r+0xf9c>
 800eb28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	dc78      	bgt.n	800ec20 <_svfprintf_r+0xfd4>
 800eb2e:	4b8d      	ldr	r3, [pc, #564]	; (800ed64 <_svfprintf_r+0x1118>)
 800eb30:	603b      	str	r3, [r7, #0]
 800eb32:	2301      	movs	r3, #1
 800eb34:	607b      	str	r3, [r7, #4]
 800eb36:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800eb38:	3708      	adds	r7, #8
 800eb3a:	3301      	adds	r3, #1
 800eb3c:	932e      	str	r3, [sp, #184]	; 0xb8
 800eb3e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800eb40:	3301      	adds	r3, #1
 800eb42:	932d      	str	r3, [sp, #180]	; 0xb4
 800eb44:	2b07      	cmp	r3, #7
 800eb46:	dd08      	ble.n	800eb5a <_svfprintf_r+0xf0e>
 800eb48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eb4a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eb4c:	aa2c      	add	r2, sp, #176	; 0xb0
 800eb4e:	f003 f993 	bl	8011e78 <__ssprint_r>
 800eb52:	2800      	cmp	r0, #0
 800eb54:	d000      	beq.n	800eb58 <_svfprintf_r+0xf0c>
 800eb56:	e258      	b.n	800f00a <_svfprintf_r+0x13be>
 800eb58:	af2f      	add	r7, sp, #188	; 0xbc
 800eb5a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800eb5c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800eb5e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800eb60:	430b      	orrs	r3, r1
 800eb62:	2101      	movs	r1, #1
 800eb64:	4031      	ands	r1, r6
 800eb66:	430b      	orrs	r3, r1
 800eb68:	d09e      	beq.n	800eaa8 <_svfprintf_r+0xe5c>
 800eb6a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800eb6c:	603b      	str	r3, [r7, #0]
 800eb6e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800eb70:	607b      	str	r3, [r7, #4]
 800eb72:	189a      	adds	r2, r3, r2
 800eb74:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800eb76:	922e      	str	r2, [sp, #184]	; 0xb8
 800eb78:	3301      	adds	r3, #1
 800eb7a:	932d      	str	r3, [sp, #180]	; 0xb4
 800eb7c:	3708      	adds	r7, #8
 800eb7e:	2b07      	cmp	r3, #7
 800eb80:	dd08      	ble.n	800eb94 <_svfprintf_r+0xf48>
 800eb82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eb84:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eb86:	aa2c      	add	r2, sp, #176	; 0xb0
 800eb88:	f003 f976 	bl	8011e78 <__ssprint_r>
 800eb8c:	2800      	cmp	r0, #0
 800eb8e:	d000      	beq.n	800eb92 <_svfprintf_r+0xf46>
 800eb90:	e23b      	b.n	800f00a <_svfprintf_r+0x13be>
 800eb92:	af2f      	add	r7, sp, #188	; 0xbc
 800eb94:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800eb96:	2c00      	cmp	r4, #0
 800eb98:	da19      	bge.n	800ebce <_svfprintf_r+0xf82>
 800eb9a:	0038      	movs	r0, r7
 800eb9c:	2510      	movs	r5, #16
 800eb9e:	4264      	negs	r4, r4
 800eba0:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800eba2:	4a71      	ldr	r2, [pc, #452]	; (800ed68 <_svfprintf_r+0x111c>)
 800eba4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800eba6:	3101      	adds	r1, #1
 800eba8:	3708      	adds	r7, #8
 800ebaa:	6002      	str	r2, [r0, #0]
 800ebac:	2c10      	cmp	r4, #16
 800ebae:	dc25      	bgt.n	800ebfc <_svfprintf_r+0xfb0>
 800ebb0:	6044      	str	r4, [r0, #4]
 800ebb2:	18e4      	adds	r4, r4, r3
 800ebb4:	942e      	str	r4, [sp, #184]	; 0xb8
 800ebb6:	912d      	str	r1, [sp, #180]	; 0xb4
 800ebb8:	2907      	cmp	r1, #7
 800ebba:	dd08      	ble.n	800ebce <_svfprintf_r+0xf82>
 800ebbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ebbe:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ebc0:	aa2c      	add	r2, sp, #176	; 0xb0
 800ebc2:	f003 f959 	bl	8011e78 <__ssprint_r>
 800ebc6:	2800      	cmp	r0, #0
 800ebc8:	d000      	beq.n	800ebcc <_svfprintf_r+0xf80>
 800ebca:	e21e      	b.n	800f00a <_svfprintf_r+0x13be>
 800ebcc:	af2f      	add	r7, sp, #188	; 0xbc
 800ebce:	9b08      	ldr	r3, [sp, #32]
 800ebd0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ebd2:	603b      	str	r3, [r7, #0]
 800ebd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ebd6:	18d2      	adds	r2, r2, r3
 800ebd8:	922e      	str	r2, [sp, #184]	; 0xb8
 800ebda:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800ebdc:	607b      	str	r3, [r7, #4]
 800ebde:	3201      	adds	r2, #1
 800ebe0:	922d      	str	r2, [sp, #180]	; 0xb4
 800ebe2:	2a07      	cmp	r2, #7
 800ebe4:	dc00      	bgt.n	800ebe8 <_svfprintf_r+0xf9c>
 800ebe6:	e45b      	b.n	800e4a0 <_svfprintf_r+0x854>
 800ebe8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ebea:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ebec:	aa2c      	add	r2, sp, #176	; 0xb0
 800ebee:	f003 f943 	bl	8011e78 <__ssprint_r>
 800ebf2:	2800      	cmp	r0, #0
 800ebf4:	d000      	beq.n	800ebf8 <_svfprintf_r+0xfac>
 800ebf6:	e208      	b.n	800f00a <_svfprintf_r+0x13be>
 800ebf8:	af2f      	add	r7, sp, #188	; 0xbc
 800ebfa:	e755      	b.n	800eaa8 <_svfprintf_r+0xe5c>
 800ebfc:	3310      	adds	r3, #16
 800ebfe:	6045      	str	r5, [r0, #4]
 800ec00:	932e      	str	r3, [sp, #184]	; 0xb8
 800ec02:	912d      	str	r1, [sp, #180]	; 0xb4
 800ec04:	2907      	cmp	r1, #7
 800ec06:	dd08      	ble.n	800ec1a <_svfprintf_r+0xfce>
 800ec08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ec0a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ec0c:	aa2c      	add	r2, sp, #176	; 0xb0
 800ec0e:	f003 f933 	bl	8011e78 <__ssprint_r>
 800ec12:	2800      	cmp	r0, #0
 800ec14:	d000      	beq.n	800ec18 <_svfprintf_r+0xfcc>
 800ec16:	e1f8      	b.n	800f00a <_svfprintf_r+0x13be>
 800ec18:	af2f      	add	r7, sp, #188	; 0xbc
 800ec1a:	0038      	movs	r0, r7
 800ec1c:	3c10      	subs	r4, #16
 800ec1e:	e7bf      	b.n	800eba0 <_svfprintf_r+0xf54>
 800ec20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ec22:	002c      	movs	r4, r5
 800ec24:	429d      	cmp	r5, r3
 800ec26:	dd00      	ble.n	800ec2a <_svfprintf_r+0xfde>
 800ec28:	001c      	movs	r4, r3
 800ec2a:	2c00      	cmp	r4, #0
 800ec2c:	dd14      	ble.n	800ec58 <_svfprintf_r+0x100c>
 800ec2e:	9b08      	ldr	r3, [sp, #32]
 800ec30:	607c      	str	r4, [r7, #4]
 800ec32:	603b      	str	r3, [r7, #0]
 800ec34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ec36:	3708      	adds	r7, #8
 800ec38:	18e3      	adds	r3, r4, r3
 800ec3a:	932e      	str	r3, [sp, #184]	; 0xb8
 800ec3c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ec3e:	3301      	adds	r3, #1
 800ec40:	932d      	str	r3, [sp, #180]	; 0xb4
 800ec42:	2b07      	cmp	r3, #7
 800ec44:	dd08      	ble.n	800ec58 <_svfprintf_r+0x100c>
 800ec46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ec48:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ec4a:	aa2c      	add	r2, sp, #176	; 0xb0
 800ec4c:	f003 f914 	bl	8011e78 <__ssprint_r>
 800ec50:	2800      	cmp	r0, #0
 800ec52:	d000      	beq.n	800ec56 <_svfprintf_r+0x100a>
 800ec54:	e1d9      	b.n	800f00a <_svfprintf_r+0x13be>
 800ec56:	af2f      	add	r7, sp, #188	; 0xbc
 800ec58:	43e3      	mvns	r3, r4
 800ec5a:	17db      	asrs	r3, r3, #31
 800ec5c:	401c      	ands	r4, r3
 800ec5e:	1b2c      	subs	r4, r5, r4
 800ec60:	2c00      	cmp	r4, #0
 800ec62:	dd18      	ble.n	800ec96 <_svfprintf_r+0x104a>
 800ec64:	0039      	movs	r1, r7
 800ec66:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ec68:	483f      	ldr	r0, [pc, #252]	; (800ed68 <_svfprintf_r+0x111c>)
 800ec6a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ec6c:	3301      	adds	r3, #1
 800ec6e:	3108      	adds	r1, #8
 800ec70:	6038      	str	r0, [r7, #0]
 800ec72:	2c10      	cmp	r4, #16
 800ec74:	dc7a      	bgt.n	800ed6c <_svfprintf_r+0x1120>
 800ec76:	607c      	str	r4, [r7, #4]
 800ec78:	18a4      	adds	r4, r4, r2
 800ec7a:	000f      	movs	r7, r1
 800ec7c:	942e      	str	r4, [sp, #184]	; 0xb8
 800ec7e:	932d      	str	r3, [sp, #180]	; 0xb4
 800ec80:	2b07      	cmp	r3, #7
 800ec82:	dd08      	ble.n	800ec96 <_svfprintf_r+0x104a>
 800ec84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ec86:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ec88:	aa2c      	add	r2, sp, #176	; 0xb0
 800ec8a:	f003 f8f5 	bl	8011e78 <__ssprint_r>
 800ec8e:	2800      	cmp	r0, #0
 800ec90:	d000      	beq.n	800ec94 <_svfprintf_r+0x1048>
 800ec92:	e1ba      	b.n	800f00a <_svfprintf_r+0x13be>
 800ec94:	af2f      	add	r7, sp, #188	; 0xbc
 800ec96:	9b08      	ldr	r3, [sp, #32]
 800ec98:	195d      	adds	r5, r3, r5
 800ec9a:	0573      	lsls	r3, r6, #21
 800ec9c:	d50b      	bpl.n	800ecb6 <_svfprintf_r+0x106a>
 800ec9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d176      	bne.n	800ed92 <_svfprintf_r+0x1146>
 800eca4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d176      	bne.n	800ed98 <_svfprintf_r+0x114c>
 800ecaa:	9b08      	ldr	r3, [sp, #32]
 800ecac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ecae:	189b      	adds	r3, r3, r2
 800ecb0:	429d      	cmp	r5, r3
 800ecb2:	d900      	bls.n	800ecb6 <_svfprintf_r+0x106a>
 800ecb4:	001d      	movs	r5, r3
 800ecb6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ecb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ecba:	4293      	cmp	r3, r2
 800ecbc:	db01      	blt.n	800ecc2 <_svfprintf_r+0x1076>
 800ecbe:	07f3      	lsls	r3, r6, #31
 800ecc0:	d516      	bpl.n	800ecf0 <_svfprintf_r+0x10a4>
 800ecc2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ecc4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ecc6:	603b      	str	r3, [r7, #0]
 800ecc8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ecca:	607b      	str	r3, [r7, #4]
 800eccc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ecce:	3708      	adds	r7, #8
 800ecd0:	189b      	adds	r3, r3, r2
 800ecd2:	932e      	str	r3, [sp, #184]	; 0xb8
 800ecd4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ecd6:	3301      	adds	r3, #1
 800ecd8:	932d      	str	r3, [sp, #180]	; 0xb4
 800ecda:	2b07      	cmp	r3, #7
 800ecdc:	dd08      	ble.n	800ecf0 <_svfprintf_r+0x10a4>
 800ecde:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ece0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ece2:	aa2c      	add	r2, sp, #176	; 0xb0
 800ece4:	f003 f8c8 	bl	8011e78 <__ssprint_r>
 800ece8:	2800      	cmp	r0, #0
 800ecea:	d000      	beq.n	800ecee <_svfprintf_r+0x10a2>
 800ecec:	e18d      	b.n	800f00a <_svfprintf_r+0x13be>
 800ecee:	af2f      	add	r7, sp, #188	; 0xbc
 800ecf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ecf2:	9b08      	ldr	r3, [sp, #32]
 800ecf4:	4694      	mov	ip, r2
 800ecf6:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800ecf8:	4463      	add	r3, ip
 800ecfa:	1b5b      	subs	r3, r3, r5
 800ecfc:	1b14      	subs	r4, r2, r4
 800ecfe:	429c      	cmp	r4, r3
 800ed00:	dd00      	ble.n	800ed04 <_svfprintf_r+0x10b8>
 800ed02:	001c      	movs	r4, r3
 800ed04:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ed06:	2c00      	cmp	r4, #0
 800ed08:	dd12      	ble.n	800ed30 <_svfprintf_r+0x10e4>
 800ed0a:	18e3      	adds	r3, r4, r3
 800ed0c:	932e      	str	r3, [sp, #184]	; 0xb8
 800ed0e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ed10:	603d      	str	r5, [r7, #0]
 800ed12:	3301      	adds	r3, #1
 800ed14:	607c      	str	r4, [r7, #4]
 800ed16:	932d      	str	r3, [sp, #180]	; 0xb4
 800ed18:	3708      	adds	r7, #8
 800ed1a:	2b07      	cmp	r3, #7
 800ed1c:	dd08      	ble.n	800ed30 <_svfprintf_r+0x10e4>
 800ed1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ed20:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ed22:	aa2c      	add	r2, sp, #176	; 0xb0
 800ed24:	f003 f8a8 	bl	8011e78 <__ssprint_r>
 800ed28:	2800      	cmp	r0, #0
 800ed2a:	d000      	beq.n	800ed2e <_svfprintf_r+0x10e2>
 800ed2c:	e16d      	b.n	800f00a <_svfprintf_r+0x13be>
 800ed2e:	af2f      	add	r7, sp, #188	; 0xbc
 800ed30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ed32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ed34:	2510      	movs	r5, #16
 800ed36:	1ad3      	subs	r3, r2, r3
 800ed38:	43e2      	mvns	r2, r4
 800ed3a:	17d2      	asrs	r2, r2, #31
 800ed3c:	4014      	ands	r4, r2
 800ed3e:	1b1c      	subs	r4, r3, r4
 800ed40:	2c00      	cmp	r4, #0
 800ed42:	dc00      	bgt.n	800ed46 <_svfprintf_r+0x10fa>
 800ed44:	e6b0      	b.n	800eaa8 <_svfprintf_r+0xe5c>
 800ed46:	0039      	movs	r1, r7
 800ed48:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ed4a:	4807      	ldr	r0, [pc, #28]	; (800ed68 <_svfprintf_r+0x111c>)
 800ed4c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ed4e:	3301      	adds	r3, #1
 800ed50:	3108      	adds	r1, #8
 800ed52:	6038      	str	r0, [r7, #0]
 800ed54:	2c10      	cmp	r4, #16
 800ed56:	dd00      	ble.n	800ed5a <_svfprintf_r+0x110e>
 800ed58:	e096      	b.n	800ee88 <_svfprintf_r+0x123c>
 800ed5a:	1912      	adds	r2, r2, r4
 800ed5c:	607c      	str	r4, [r7, #4]
 800ed5e:	922e      	str	r2, [sp, #184]	; 0xb8
 800ed60:	e6dd      	b.n	800eb1e <_svfprintf_r+0xed2>
 800ed62:	46c0      	nop			; (mov r8, r8)
 800ed64:	08015276 	.word	0x08015276
 800ed68:	08015288 	.word	0x08015288
 800ed6c:	2010      	movs	r0, #16
 800ed6e:	1812      	adds	r2, r2, r0
 800ed70:	6078      	str	r0, [r7, #4]
 800ed72:	922e      	str	r2, [sp, #184]	; 0xb8
 800ed74:	932d      	str	r3, [sp, #180]	; 0xb4
 800ed76:	2b07      	cmp	r3, #7
 800ed78:	dd08      	ble.n	800ed8c <_svfprintf_r+0x1140>
 800ed7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ed7c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ed7e:	aa2c      	add	r2, sp, #176	; 0xb0
 800ed80:	f003 f87a 	bl	8011e78 <__ssprint_r>
 800ed84:	2800      	cmp	r0, #0
 800ed86:	d000      	beq.n	800ed8a <_svfprintf_r+0x113e>
 800ed88:	e13f      	b.n	800f00a <_svfprintf_r+0x13be>
 800ed8a:	a92f      	add	r1, sp, #188	; 0xbc
 800ed8c:	000f      	movs	r7, r1
 800ed8e:	3c10      	subs	r4, #16
 800ed90:	e768      	b.n	800ec64 <_svfprintf_r+0x1018>
 800ed92:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d05d      	beq.n	800ee54 <_svfprintf_r+0x1208>
 800ed98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ed9a:	3b01      	subs	r3, #1
 800ed9c:	9310      	str	r3, [sp, #64]	; 0x40
 800ed9e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800eda0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800eda2:	603b      	str	r3, [r7, #0]
 800eda4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eda6:	607b      	str	r3, [r7, #4]
 800eda8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800edaa:	3708      	adds	r7, #8
 800edac:	189b      	adds	r3, r3, r2
 800edae:	932e      	str	r3, [sp, #184]	; 0xb8
 800edb0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800edb2:	3301      	adds	r3, #1
 800edb4:	932d      	str	r3, [sp, #180]	; 0xb4
 800edb6:	2b07      	cmp	r3, #7
 800edb8:	dd08      	ble.n	800edcc <_svfprintf_r+0x1180>
 800edba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800edbc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800edbe:	aa2c      	add	r2, sp, #176	; 0xb0
 800edc0:	f003 f85a 	bl	8011e78 <__ssprint_r>
 800edc4:	2800      	cmp	r0, #0
 800edc6:	d000      	beq.n	800edca <_svfprintf_r+0x117e>
 800edc8:	e11f      	b.n	800f00a <_svfprintf_r+0x13be>
 800edca:	af2f      	add	r7, sp, #188	; 0xbc
 800edcc:	9b08      	ldr	r3, [sp, #32]
 800edce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800edd0:	189c      	adds	r4, r3, r2
 800edd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800edd4:	1b64      	subs	r4, r4, r5
 800edd6:	781b      	ldrb	r3, [r3, #0]
 800edd8:	429c      	cmp	r4, r3
 800edda:	dd00      	ble.n	800edde <_svfprintf_r+0x1192>
 800eddc:	001c      	movs	r4, r3
 800edde:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ede0:	2c00      	cmp	r4, #0
 800ede2:	dd12      	ble.n	800ee0a <_svfprintf_r+0x11be>
 800ede4:	18e3      	adds	r3, r4, r3
 800ede6:	932e      	str	r3, [sp, #184]	; 0xb8
 800ede8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800edea:	603d      	str	r5, [r7, #0]
 800edec:	3301      	adds	r3, #1
 800edee:	607c      	str	r4, [r7, #4]
 800edf0:	932d      	str	r3, [sp, #180]	; 0xb4
 800edf2:	3708      	adds	r7, #8
 800edf4:	2b07      	cmp	r3, #7
 800edf6:	dd08      	ble.n	800ee0a <_svfprintf_r+0x11be>
 800edf8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800edfa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800edfc:	aa2c      	add	r2, sp, #176	; 0xb0
 800edfe:	f003 f83b 	bl	8011e78 <__ssprint_r>
 800ee02:	2800      	cmp	r0, #0
 800ee04:	d000      	beq.n	800ee08 <_svfprintf_r+0x11bc>
 800ee06:	e100      	b.n	800f00a <_svfprintf_r+0x13be>
 800ee08:	af2f      	add	r7, sp, #188	; 0xbc
 800ee0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ee0c:	781a      	ldrb	r2, [r3, #0]
 800ee0e:	43e3      	mvns	r3, r4
 800ee10:	17db      	asrs	r3, r3, #31
 800ee12:	401c      	ands	r4, r3
 800ee14:	1b14      	subs	r4, r2, r4
 800ee16:	2c00      	cmp	r4, #0
 800ee18:	dd18      	ble.n	800ee4c <_svfprintf_r+0x1200>
 800ee1a:	0039      	movs	r1, r7
 800ee1c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ee1e:	48aa      	ldr	r0, [pc, #680]	; (800f0c8 <_svfprintf_r+0x147c>)
 800ee20:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ee22:	3301      	adds	r3, #1
 800ee24:	3108      	adds	r1, #8
 800ee26:	6038      	str	r0, [r7, #0]
 800ee28:	2c10      	cmp	r4, #16
 800ee2a:	dc1a      	bgt.n	800ee62 <_svfprintf_r+0x1216>
 800ee2c:	1912      	adds	r2, r2, r4
 800ee2e:	607c      	str	r4, [r7, #4]
 800ee30:	922e      	str	r2, [sp, #184]	; 0xb8
 800ee32:	000f      	movs	r7, r1
 800ee34:	932d      	str	r3, [sp, #180]	; 0xb4
 800ee36:	2b07      	cmp	r3, #7
 800ee38:	dd08      	ble.n	800ee4c <_svfprintf_r+0x1200>
 800ee3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ee3c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ee3e:	aa2c      	add	r2, sp, #176	; 0xb0
 800ee40:	f003 f81a 	bl	8011e78 <__ssprint_r>
 800ee44:	2800      	cmp	r0, #0
 800ee46:	d000      	beq.n	800ee4a <_svfprintf_r+0x11fe>
 800ee48:	e0df      	b.n	800f00a <_svfprintf_r+0x13be>
 800ee4a:	af2f      	add	r7, sp, #188	; 0xbc
 800ee4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ee4e:	781b      	ldrb	r3, [r3, #0]
 800ee50:	18ed      	adds	r5, r5, r3
 800ee52:	e724      	b.n	800ec9e <_svfprintf_r+0x1052>
 800ee54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ee56:	3b01      	subs	r3, #1
 800ee58:	9312      	str	r3, [sp, #72]	; 0x48
 800ee5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ee5c:	3b01      	subs	r3, #1
 800ee5e:	9311      	str	r3, [sp, #68]	; 0x44
 800ee60:	e79d      	b.n	800ed9e <_svfprintf_r+0x1152>
 800ee62:	2010      	movs	r0, #16
 800ee64:	1812      	adds	r2, r2, r0
 800ee66:	6078      	str	r0, [r7, #4]
 800ee68:	922e      	str	r2, [sp, #184]	; 0xb8
 800ee6a:	932d      	str	r3, [sp, #180]	; 0xb4
 800ee6c:	2b07      	cmp	r3, #7
 800ee6e:	dd08      	ble.n	800ee82 <_svfprintf_r+0x1236>
 800ee70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ee72:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ee74:	aa2c      	add	r2, sp, #176	; 0xb0
 800ee76:	f002 ffff 	bl	8011e78 <__ssprint_r>
 800ee7a:	2800      	cmp	r0, #0
 800ee7c:	d000      	beq.n	800ee80 <_svfprintf_r+0x1234>
 800ee7e:	e0c4      	b.n	800f00a <_svfprintf_r+0x13be>
 800ee80:	a92f      	add	r1, sp, #188	; 0xbc
 800ee82:	000f      	movs	r7, r1
 800ee84:	3c10      	subs	r4, #16
 800ee86:	e7c8      	b.n	800ee1a <_svfprintf_r+0x11ce>
 800ee88:	3210      	adds	r2, #16
 800ee8a:	607d      	str	r5, [r7, #4]
 800ee8c:	922e      	str	r2, [sp, #184]	; 0xb8
 800ee8e:	932d      	str	r3, [sp, #180]	; 0xb4
 800ee90:	2b07      	cmp	r3, #7
 800ee92:	dd08      	ble.n	800eea6 <_svfprintf_r+0x125a>
 800ee94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ee96:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ee98:	aa2c      	add	r2, sp, #176	; 0xb0
 800ee9a:	f002 ffed 	bl	8011e78 <__ssprint_r>
 800ee9e:	2800      	cmp	r0, #0
 800eea0:	d000      	beq.n	800eea4 <_svfprintf_r+0x1258>
 800eea2:	e0b2      	b.n	800f00a <_svfprintf_r+0x13be>
 800eea4:	a92f      	add	r1, sp, #188	; 0xbc
 800eea6:	000f      	movs	r7, r1
 800eea8:	3c10      	subs	r4, #16
 800eeaa:	e74c      	b.n	800ed46 <_svfprintf_r+0x10fa>
 800eeac:	003c      	movs	r4, r7
 800eeae:	9919      	ldr	r1, [sp, #100]	; 0x64
 800eeb0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800eeb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eeb4:	3101      	adds	r1, #1
 800eeb6:	3301      	adds	r3, #1
 800eeb8:	3408      	adds	r4, #8
 800eeba:	2a01      	cmp	r2, #1
 800eebc:	dc03      	bgt.n	800eec6 <_svfprintf_r+0x127a>
 800eebe:	2201      	movs	r2, #1
 800eec0:	4216      	tst	r6, r2
 800eec2:	d100      	bne.n	800eec6 <_svfprintf_r+0x127a>
 800eec4:	e07f      	b.n	800efc6 <_svfprintf_r+0x137a>
 800eec6:	9a08      	ldr	r2, [sp, #32]
 800eec8:	912e      	str	r1, [sp, #184]	; 0xb8
 800eeca:	603a      	str	r2, [r7, #0]
 800eecc:	2201      	movs	r2, #1
 800eece:	932d      	str	r3, [sp, #180]	; 0xb4
 800eed0:	607a      	str	r2, [r7, #4]
 800eed2:	2b07      	cmp	r3, #7
 800eed4:	dd08      	ble.n	800eee8 <_svfprintf_r+0x129c>
 800eed6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eed8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eeda:	aa2c      	add	r2, sp, #176	; 0xb0
 800eedc:	f002 ffcc 	bl	8011e78 <__ssprint_r>
 800eee0:	2800      	cmp	r0, #0
 800eee2:	d000      	beq.n	800eee6 <_svfprintf_r+0x129a>
 800eee4:	e091      	b.n	800f00a <_svfprintf_r+0x13be>
 800eee6:	ac2f      	add	r4, sp, #188	; 0xbc
 800eee8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800eeea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800eeec:	6023      	str	r3, [r4, #0]
 800eeee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800eef0:	6063      	str	r3, [r4, #4]
 800eef2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800eef4:	3408      	adds	r4, #8
 800eef6:	189b      	adds	r3, r3, r2
 800eef8:	932e      	str	r3, [sp, #184]	; 0xb8
 800eefa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800eefc:	3301      	adds	r3, #1
 800eefe:	932d      	str	r3, [sp, #180]	; 0xb4
 800ef00:	2b07      	cmp	r3, #7
 800ef02:	dd07      	ble.n	800ef14 <_svfprintf_r+0x12c8>
 800ef04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ef06:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ef08:	aa2c      	add	r2, sp, #176	; 0xb0
 800ef0a:	f002 ffb5 	bl	8011e78 <__ssprint_r>
 800ef0e:	2800      	cmp	r0, #0
 800ef10:	d17b      	bne.n	800f00a <_svfprintf_r+0x13be>
 800ef12:	ac2f      	add	r4, sp, #188	; 0xbc
 800ef14:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ef16:	2200      	movs	r2, #0
 800ef18:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ef1a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ef1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ef1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef20:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800ef22:	1e5d      	subs	r5, r3, #1
 800ef24:	2300      	movs	r3, #0
 800ef26:	f7f1 fa8f 	bl	8000448 <__aeabi_dcmpeq>
 800ef2a:	2800      	cmp	r0, #0
 800ef2c:	d126      	bne.n	800ef7c <_svfprintf_r+0x1330>
 800ef2e:	9b08      	ldr	r3, [sp, #32]
 800ef30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef32:	3301      	adds	r3, #1
 800ef34:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ef36:	6023      	str	r3, [r4, #0]
 800ef38:	1e7b      	subs	r3, r7, #1
 800ef3a:	3201      	adds	r2, #1
 800ef3c:	185b      	adds	r3, r3, r1
 800ef3e:	6065      	str	r5, [r4, #4]
 800ef40:	932e      	str	r3, [sp, #184]	; 0xb8
 800ef42:	922d      	str	r2, [sp, #180]	; 0xb4
 800ef44:	3408      	adds	r4, #8
 800ef46:	2a07      	cmp	r2, #7
 800ef48:	dd07      	ble.n	800ef5a <_svfprintf_r+0x130e>
 800ef4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ef4c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ef4e:	aa2c      	add	r2, sp, #176	; 0xb0
 800ef50:	f002 ff92 	bl	8011e78 <__ssprint_r>
 800ef54:	2800      	cmp	r0, #0
 800ef56:	d158      	bne.n	800f00a <_svfprintf_r+0x13be>
 800ef58:	ac2f      	add	r4, sp, #188	; 0xbc
 800ef5a:	ab28      	add	r3, sp, #160	; 0xa0
 800ef5c:	6023      	str	r3, [r4, #0]
 800ef5e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ef60:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ef62:	6063      	str	r3, [r4, #4]
 800ef64:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ef66:	189b      	adds	r3, r3, r2
 800ef68:	932e      	str	r3, [sp, #184]	; 0xb8
 800ef6a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ef6c:	3301      	adds	r3, #1
 800ef6e:	932d      	str	r3, [sp, #180]	; 0xb4
 800ef70:	2b07      	cmp	r3, #7
 800ef72:	dd00      	ble.n	800ef76 <_svfprintf_r+0x132a>
 800ef74:	e638      	b.n	800ebe8 <_svfprintf_r+0xf9c>
 800ef76:	3408      	adds	r4, #8
 800ef78:	0027      	movs	r7, r4
 800ef7a:	e595      	b.n	800eaa8 <_svfprintf_r+0xe5c>
 800ef7c:	2710      	movs	r7, #16
 800ef7e:	2d00      	cmp	r5, #0
 800ef80:	ddeb      	ble.n	800ef5a <_svfprintf_r+0x130e>
 800ef82:	0021      	movs	r1, r4
 800ef84:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ef86:	4850      	ldr	r0, [pc, #320]	; (800f0c8 <_svfprintf_r+0x147c>)
 800ef88:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ef8a:	3301      	adds	r3, #1
 800ef8c:	3108      	adds	r1, #8
 800ef8e:	6020      	str	r0, [r4, #0]
 800ef90:	2d10      	cmp	r5, #16
 800ef92:	dc07      	bgt.n	800efa4 <_svfprintf_r+0x1358>
 800ef94:	6065      	str	r5, [r4, #4]
 800ef96:	000c      	movs	r4, r1
 800ef98:	18ad      	adds	r5, r5, r2
 800ef9a:	952e      	str	r5, [sp, #184]	; 0xb8
 800ef9c:	932d      	str	r3, [sp, #180]	; 0xb4
 800ef9e:	2b07      	cmp	r3, #7
 800efa0:	dddb      	ble.n	800ef5a <_svfprintf_r+0x130e>
 800efa2:	e7d2      	b.n	800ef4a <_svfprintf_r+0x12fe>
 800efa4:	3210      	adds	r2, #16
 800efa6:	6067      	str	r7, [r4, #4]
 800efa8:	922e      	str	r2, [sp, #184]	; 0xb8
 800efaa:	932d      	str	r3, [sp, #180]	; 0xb4
 800efac:	2b07      	cmp	r3, #7
 800efae:	dd07      	ble.n	800efc0 <_svfprintf_r+0x1374>
 800efb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800efb2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800efb4:	aa2c      	add	r2, sp, #176	; 0xb0
 800efb6:	f002 ff5f 	bl	8011e78 <__ssprint_r>
 800efba:	2800      	cmp	r0, #0
 800efbc:	d125      	bne.n	800f00a <_svfprintf_r+0x13be>
 800efbe:	a92f      	add	r1, sp, #188	; 0xbc
 800efc0:	000c      	movs	r4, r1
 800efc2:	3d10      	subs	r5, #16
 800efc4:	e7dd      	b.n	800ef82 <_svfprintf_r+0x1336>
 800efc6:	9808      	ldr	r0, [sp, #32]
 800efc8:	912e      	str	r1, [sp, #184]	; 0xb8
 800efca:	c705      	stmia	r7!, {r0, r2}
 800efcc:	932d      	str	r3, [sp, #180]	; 0xb4
 800efce:	e7e6      	b.n	800ef9e <_svfprintf_r+0x1352>
 800efd0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800efd2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800efd4:	2510      	movs	r5, #16
 800efd6:	1a9c      	subs	r4, r3, r2
 800efd8:	2c00      	cmp	r4, #0
 800efda:	dc00      	bgt.n	800efde <_svfprintf_r+0x1392>
 800efdc:	e567      	b.n	800eaae <_svfprintf_r+0xe62>
 800efde:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800efe0:	493a      	ldr	r1, [pc, #232]	; (800f0cc <_svfprintf_r+0x1480>)
 800efe2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800efe4:	3301      	adds	r3, #1
 800efe6:	6039      	str	r1, [r7, #0]
 800efe8:	2c10      	cmp	r4, #16
 800efea:	dc19      	bgt.n	800f020 <_svfprintf_r+0x13d4>
 800efec:	607c      	str	r4, [r7, #4]
 800efee:	18a4      	adds	r4, r4, r2
 800eff0:	942e      	str	r4, [sp, #184]	; 0xb8
 800eff2:	932d      	str	r3, [sp, #180]	; 0xb4
 800eff4:	2b07      	cmp	r3, #7
 800eff6:	dc00      	bgt.n	800effa <_svfprintf_r+0x13ae>
 800eff8:	e559      	b.n	800eaae <_svfprintf_r+0xe62>
 800effa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800effc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800effe:	aa2c      	add	r2, sp, #176	; 0xb0
 800f000:	f002 ff3a 	bl	8011e78 <__ssprint_r>
 800f004:	2800      	cmp	r0, #0
 800f006:	d100      	bne.n	800f00a <_svfprintf_r+0x13be>
 800f008:	e551      	b.n	800eaae <_svfprintf_r+0xe62>
 800f00a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d101      	bne.n	800f014 <_svfprintf_r+0x13c8>
 800f010:	f7ff f845 	bl	800e09e <_svfprintf_r+0x452>
 800f014:	0019      	movs	r1, r3
 800f016:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f018:	f7fd fd80 	bl	800cb1c <_free_r>
 800f01c:	f7ff f83f 	bl	800e09e <_svfprintf_r+0x452>
 800f020:	3210      	adds	r2, #16
 800f022:	607d      	str	r5, [r7, #4]
 800f024:	922e      	str	r2, [sp, #184]	; 0xb8
 800f026:	932d      	str	r3, [sp, #180]	; 0xb4
 800f028:	3708      	adds	r7, #8
 800f02a:	2b07      	cmp	r3, #7
 800f02c:	dd07      	ble.n	800f03e <_svfprintf_r+0x13f2>
 800f02e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f030:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f032:	aa2c      	add	r2, sp, #176	; 0xb0
 800f034:	f002 ff20 	bl	8011e78 <__ssprint_r>
 800f038:	2800      	cmp	r0, #0
 800f03a:	d1e6      	bne.n	800f00a <_svfprintf_r+0x13be>
 800f03c:	af2f      	add	r7, sp, #188	; 0xbc
 800f03e:	3c10      	subs	r4, #16
 800f040:	e7cd      	b.n	800efde <_svfprintf_r+0x1392>
 800f042:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f044:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f046:	f7fd fd69 	bl	800cb1c <_free_r>
 800f04a:	e549      	b.n	800eae0 <_svfprintf_r+0xe94>
 800f04c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d101      	bne.n	800f056 <_svfprintf_r+0x140a>
 800f052:	f7ff f824 	bl	800e09e <_svfprintf_r+0x452>
 800f056:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f058:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f05a:	aa2c      	add	r2, sp, #176	; 0xb0
 800f05c:	f002 ff0c 	bl	8011e78 <__ssprint_r>
 800f060:	f7ff f81d 	bl	800e09e <_svfprintf_r+0x452>
 800f064:	0034      	movs	r4, r6
 800f066:	2a00      	cmp	r2, #0
 800f068:	d101      	bne.n	800f06e <_svfprintf_r+0x1422>
 800f06a:	f7fe ff8c 	bl	800df86 <_svfprintf_r+0x33a>
 800f06e:	2b01      	cmp	r3, #1
 800f070:	d101      	bne.n	800f076 <_svfprintf_r+0x142a>
 800f072:	f7ff fc01 	bl	800e878 <_svfprintf_r+0xc2c>
 800f076:	2b02      	cmp	r3, #2
 800f078:	d100      	bne.n	800f07c <_svfprintf_r+0x1430>
 800f07a:	e459      	b.n	800e930 <_svfprintf_r+0xce4>
 800f07c:	2507      	movs	r5, #7
 800f07e:	ab58      	add	r3, sp, #352	; 0x160
 800f080:	9308      	str	r3, [sp, #32]
 800f082:	9a08      	ldr	r2, [sp, #32]
 800f084:	0013      	movs	r3, r2
 800f086:	3b01      	subs	r3, #1
 800f088:	9308      	str	r3, [sp, #32]
 800f08a:	9b06      	ldr	r3, [sp, #24]
 800f08c:	9908      	ldr	r1, [sp, #32]
 800f08e:	402b      	ands	r3, r5
 800f090:	3330      	adds	r3, #48	; 0x30
 800f092:	700b      	strb	r3, [r1, #0]
 800f094:	9907      	ldr	r1, [sp, #28]
 800f096:	074e      	lsls	r6, r1, #29
 800f098:	9906      	ldr	r1, [sp, #24]
 800f09a:	08c8      	lsrs	r0, r1, #3
 800f09c:	9907      	ldr	r1, [sp, #28]
 800f09e:	4306      	orrs	r6, r0
 800f0a0:	08c9      	lsrs	r1, r1, #3
 800f0a2:	9107      	str	r1, [sp, #28]
 800f0a4:	0031      	movs	r1, r6
 800f0a6:	9807      	ldr	r0, [sp, #28]
 800f0a8:	9606      	str	r6, [sp, #24]
 800f0aa:	4301      	orrs	r1, r0
 800f0ac:	d1e9      	bne.n	800f082 <_svfprintf_r+0x1436>
 800f0ae:	07e1      	lsls	r1, r4, #31
 800f0b0:	d400      	bmi.n	800f0b4 <_svfprintf_r+0x1468>
 800f0b2:	e42a      	b.n	800e90a <_svfprintf_r+0xcbe>
 800f0b4:	2b30      	cmp	r3, #48	; 0x30
 800f0b6:	d100      	bne.n	800f0ba <_svfprintf_r+0x146e>
 800f0b8:	e427      	b.n	800e90a <_svfprintf_r+0xcbe>
 800f0ba:	2130      	movs	r1, #48	; 0x30
 800f0bc:	9b08      	ldr	r3, [sp, #32]
 800f0be:	3b01      	subs	r3, #1
 800f0c0:	7019      	strb	r1, [r3, #0]
 800f0c2:	1e93      	subs	r3, r2, #2
 800f0c4:	9308      	str	r3, [sp, #32]
 800f0c6:	e420      	b.n	800e90a <_svfprintf_r+0xcbe>
 800f0c8:	08015288 	.word	0x08015288
 800f0cc:	08015278 	.word	0x08015278

0800f0d0 <__ssvfscanf_r>:
 800f0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0d2:	4ca7      	ldr	r4, [pc, #668]	; (800f370 <__ssvfscanf_r+0x2a0>)
 800f0d4:	44a5      	add	sp, r4
 800f0d6:	af02      	add	r7, sp, #8
 800f0d8:	633b      	str	r3, [r7, #48]	; 0x30
 800f0da:	000b      	movs	r3, r1
 800f0dc:	6378      	str	r0, [r7, #52]	; 0x34
 800f0de:	6479      	str	r1, [r7, #68]	; 0x44
 800f0e0:	61ba      	str	r2, [r7, #24]
 800f0e2:	220c      	movs	r2, #12
 800f0e4:	5e9a      	ldrsh	r2, [r3, r2]
 800f0e6:	2380      	movs	r3, #128	; 0x80
 800f0e8:	019b      	lsls	r3, r3, #6
 800f0ea:	421a      	tst	r2, r3
 800f0ec:	d105      	bne.n	800f0fa <__ssvfscanf_r+0x2a>
 800f0ee:	4313      	orrs	r3, r2
 800f0f0:	818b      	strh	r3, [r1, #12]
 800f0f2:	4aa0      	ldr	r2, [pc, #640]	; (800f374 <__ssvfscanf_r+0x2a4>)
 800f0f4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800f0f6:	4013      	ands	r3, r2
 800f0f8:	664b      	str	r3, [r1, #100]	; 0x64
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	617b      	str	r3, [r7, #20]
 800f0fe:	643b      	str	r3, [r7, #64]	; 0x40
 800f100:	62bb      	str	r3, [r7, #40]	; 0x28
 800f102:	627b      	str	r3, [r7, #36]	; 0x24
 800f104:	63bb      	str	r3, [r7, #56]	; 0x38
 800f106:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f108:	69bb      	ldr	r3, [r7, #24]
 800f10a:	69ba      	ldr	r2, [r7, #24]
 800f10c:	781b      	ldrb	r3, [r3, #0]
 800f10e:	3201      	adds	r2, #1
 800f110:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f112:	61ba      	str	r2, [r7, #24]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d100      	bne.n	800f11a <__ssvfscanf_r+0x4a>
 800f118:	e0d7      	b.n	800f2ca <__ssvfscanf_r+0x1fa>
 800f11a:	2608      	movs	r6, #8
 800f11c:	2108      	movs	r1, #8
 800f11e:	4a96      	ldr	r2, [pc, #600]	; (800f378 <__ssvfscanf_r+0x2a8>)
 800f120:	5cd2      	ldrb	r2, [r2, r3]
 800f122:	4016      	ands	r6, r2
 800f124:	420a      	tst	r2, r1
 800f126:	d01d      	beq.n	800f164 <__ssvfscanf_r+0x94>
 800f128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f12a:	685b      	ldr	r3, [r3, #4]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	dd12      	ble.n	800f156 <__ssvfscanf_r+0x86>
 800f130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f132:	4991      	ldr	r1, [pc, #580]	; (800f378 <__ssvfscanf_r+0x2a8>)
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	781a      	ldrb	r2, [r3, #0]
 800f138:	5c8a      	ldrb	r2, [r1, r2]
 800f13a:	2108      	movs	r1, #8
 800f13c:	420a      	tst	r2, r1
 800f13e:	d0e3      	beq.n	800f108 <__ssvfscanf_r+0x38>
 800f140:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f142:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f144:	3201      	adds	r2, #1
 800f146:	63ba      	str	r2, [r7, #56]	; 0x38
 800f148:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f14a:	3301      	adds	r3, #1
 800f14c:	6852      	ldr	r2, [r2, #4]
 800f14e:	600b      	str	r3, [r1, #0]
 800f150:	3a01      	subs	r2, #1
 800f152:	604a      	str	r2, [r1, #4]
 800f154:	e7e8      	b.n	800f128 <__ssvfscanf_r+0x58>
 800f156:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f158:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f15a:	f002 ff4d 	bl	8011ff8 <__ssrefill_r>
 800f15e:	2800      	cmp	r0, #0
 800f160:	d0e6      	beq.n	800f130 <__ssvfscanf_r+0x60>
 800f162:	e7d1      	b.n	800f108 <__ssvfscanf_r+0x38>
 800f164:	2b25      	cmp	r3, #37	; 0x25
 800f166:	d165      	bne.n	800f234 <__ssvfscanf_r+0x164>
 800f168:	250a      	movs	r5, #10
 800f16a:	2480      	movs	r4, #128	; 0x80
 800f16c:	69ba      	ldr	r2, [r7, #24]
 800f16e:	63fe      	str	r6, [r7, #60]	; 0x3c
 800f170:	3b16      	subs	r3, #22
 800f172:	69b9      	ldr	r1, [r7, #24]
 800f174:	3101      	adds	r1, #1
 800f176:	61b9      	str	r1, [r7, #24]
 800f178:	7811      	ldrb	r1, [r2, #0]
 800f17a:	0008      	movs	r0, r1
 800f17c:	3825      	subs	r0, #37	; 0x25
 800f17e:	2855      	cmp	r0, #85	; 0x55
 800f180:	d900      	bls.n	800f184 <__ssvfscanf_r+0xb4>
 800f182:	e170      	b.n	800f466 <__ssvfscanf_r+0x396>
 800f184:	f7f0 ffd0 	bl	8000128 <__gnu_thumb1_case_uhi>
 800f188:	016f0056 	.word	0x016f0056
 800f18c:	016f016f 	.word	0x016f016f
 800f190:	0081016f 	.word	0x0081016f
 800f194:	016f016f 	.word	0x016f016f
 800f198:	016f016f 	.word	0x016f016f
 800f19c:	00b8016f 	.word	0x00b8016f
 800f1a0:	00b800b8 	.word	0x00b800b8
 800f1a4:	00b800b8 	.word	0x00b800b8
 800f1a8:	00b800b8 	.word	0x00b800b8
 800f1ac:	00b800b8 	.word	0x00b800b8
 800f1b0:	016f00b8 	.word	0x016f00b8
 800f1b4:	016f016f 	.word	0x016f016f
 800f1b8:	016f016f 	.word	0x016f016f
 800f1bc:	016f016f 	.word	0x016f016f
 800f1c0:	016f00d8 	.word	0x016f00d8
 800f1c4:	00c1010a 	.word	0x00c1010a
 800f1c8:	00d800d8 	.word	0x00d800d8
 800f1cc:	016f00d8 	.word	0x016f00d8
 800f1d0:	016f016f 	.word	0x016f016f
 800f1d4:	009f016f 	.word	0x009f016f
 800f1d8:	016f016f 	.word	0x016f016f
 800f1dc:	016f00c9 	.word	0x016f00c9
 800f1e0:	016f016f 	.word	0x016f016f
 800f1e4:	016f00f0 	.word	0x016f00f0
 800f1e8:	016f016f 	.word	0x016f016f
 800f1ec:	00d1016f 	.word	0x00d1016f
 800f1f0:	016f016f 	.word	0x016f016f
 800f1f4:	016f00fe 	.word	0x016f00fe
 800f1f8:	016f016f 	.word	0x016f016f
 800f1fc:	016f016f 	.word	0x016f016f
 800f200:	016f00d8 	.word	0x016f00d8
 800f204:	00c3010c 	.word	0x00c3010c
 800f208:	00d800d8 	.word	0x00d800d8
 800f20c:	009400d8 	.word	0x009400d8
 800f210:	009f012f 	.word	0x009f012f
 800f214:	0088016f 	.word	0x0088016f
 800f218:	011200a9 	.word	0x011200a9
 800f21c:	011000cb 	.word	0x011000cb
 800f220:	016f016f 	.word	0x016f016f
 800f224:	00a600f2 	.word	0x00a600f2
 800f228:	016f00cf 	.word	0x016f00cf
 800f22c:	00d1016f 	.word	0x00d1016f
 800f230:	00a6016f 	.word	0x00a6016f
 800f234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f236:	685b      	ldr	r3, [r3, #4]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	dd12      	ble.n	800f262 <__ssvfscanf_r+0x192>
 800f23c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f23e:	69ba      	ldr	r2, [r7, #24]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	3a01      	subs	r2, #1
 800f244:	7819      	ldrb	r1, [r3, #0]
 800f246:	7812      	ldrb	r2, [r2, #0]
 800f248:	4291      	cmp	r1, r2
 800f24a:	d13e      	bne.n	800f2ca <__ssvfscanf_r+0x1fa>
 800f24c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f24e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f250:	6852      	ldr	r2, [r2, #4]
 800f252:	3301      	adds	r3, #1
 800f254:	600b      	str	r3, [r1, #0]
 800f256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f258:	3a01      	subs	r2, #1
 800f25a:	604a      	str	r2, [r1, #4]
 800f25c:	3301      	adds	r3, #1
 800f25e:	63bb      	str	r3, [r7, #56]	; 0x38
 800f260:	e752      	b.n	800f108 <__ssvfscanf_r+0x38>
 800f262:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f264:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f266:	f002 fec7 	bl	8011ff8 <__ssrefill_r>
 800f26a:	2800      	cmp	r0, #0
 800f26c:	d0e6      	beq.n	800f23c <__ssvfscanf_r+0x16c>
 800f26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f270:	2b00      	cmp	r3, #0
 800f272:	d003      	beq.n	800f27c <__ssvfscanf_r+0x1ac>
 800f274:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f276:	899b      	ldrh	r3, [r3, #12]
 800f278:	065b      	lsls	r3, r3, #25
 800f27a:	d526      	bpl.n	800f2ca <__ssvfscanf_r+0x1fa>
 800f27c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d000      	beq.n	800f284 <__ssvfscanf_r+0x1b4>
 800f282:	e0f6      	b.n	800f472 <__ssvfscanf_r+0x3a2>
 800f284:	3b01      	subs	r3, #1
 800f286:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f288:	e104      	b.n	800f494 <__ssvfscanf_r+0x3c4>
 800f28a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f28c:	4332      	orrs	r2, r6
 800f28e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f290:	d11b      	bne.n	800f2ca <__ssvfscanf_r+0x1fa>
 800f292:	2610      	movs	r6, #16
 800f294:	69ba      	ldr	r2, [r7, #24]
 800f296:	e76c      	b.n	800f172 <__ssvfscanf_r+0xa2>
 800f298:	421e      	tst	r6, r3
 800f29a:	d116      	bne.n	800f2ca <__ssvfscanf_r+0x1fa>
 800f29c:	7851      	ldrb	r1, [r2, #1]
 800f29e:	296c      	cmp	r1, #108	; 0x6c
 800f2a0:	d103      	bne.n	800f2aa <__ssvfscanf_r+0x1da>
 800f2a2:	3202      	adds	r2, #2
 800f2a4:	61ba      	str	r2, [r7, #24]
 800f2a6:	2202      	movs	r2, #2
 800f2a8:	e000      	b.n	800f2ac <__ssvfscanf_r+0x1dc>
 800f2aa:	2201      	movs	r2, #1
 800f2ac:	4316      	orrs	r6, r2
 800f2ae:	e7f1      	b.n	800f294 <__ssvfscanf_r+0x1c4>
 800f2b0:	421e      	tst	r6, r3
 800f2b2:	d10a      	bne.n	800f2ca <__ssvfscanf_r+0x1fa>
 800f2b4:	7851      	ldrb	r1, [r2, #1]
 800f2b6:	2968      	cmp	r1, #104	; 0x68
 800f2b8:	d103      	bne.n	800f2c2 <__ssvfscanf_r+0x1f2>
 800f2ba:	3202      	adds	r2, #2
 800f2bc:	61ba      	str	r2, [r7, #24]
 800f2be:	2208      	movs	r2, #8
 800f2c0:	e7f4      	b.n	800f2ac <__ssvfscanf_r+0x1dc>
 800f2c2:	2204      	movs	r2, #4
 800f2c4:	e7f2      	b.n	800f2ac <__ssvfscanf_r+0x1dc>
 800f2c6:	421e      	tst	r6, r3
 800f2c8:	d0ed      	beq.n	800f2a6 <__ssvfscanf_r+0x1d6>
 800f2ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d000      	beq.n	800f2d2 <__ssvfscanf_r+0x202>
 800f2d0:	e0da      	b.n	800f488 <__ssvfscanf_r+0x3b8>
 800f2d2:	e0df      	b.n	800f494 <__ssvfscanf_r+0x3c4>
 800f2d4:	421e      	tst	r6, r3
 800f2d6:	d0dd      	beq.n	800f294 <__ssvfscanf_r+0x1c4>
 800f2d8:	e7f7      	b.n	800f2ca <__ssvfscanf_r+0x1fa>
 800f2da:	228f      	movs	r2, #143	; 0x8f
 800f2dc:	218f      	movs	r1, #143	; 0x8f
 800f2de:	4032      	ands	r2, r6
 800f2e0:	420e      	tst	r6, r1
 800f2e2:	d1f2      	bne.n	800f2ca <__ssvfscanf_r+0x1fa>
 800f2e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f2e6:	2900      	cmp	r1, #0
 800f2e8:	d104      	bne.n	800f2f4 <__ssvfscanf_r+0x224>
 800f2ea:	b082      	sub	sp, #8
 800f2ec:	a902      	add	r1, sp, #8
 800f2ee:	6439      	str	r1, [r7, #64]	; 0x40
 800f2f0:	600a      	str	r2, [r1, #0]
 800f2f2:	604a      	str	r2, [r1, #4]
 800f2f4:	4326      	orrs	r6, r4
 800f2f6:	e7cd      	b.n	800f294 <__ssvfscanf_r+0x1c4>
 800f2f8:	228f      	movs	r2, #143	; 0x8f
 800f2fa:	4216      	tst	r6, r2
 800f2fc:	d1e5      	bne.n	800f2ca <__ssvfscanf_r+0x1fa>
 800f2fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f300:	436a      	muls	r2, r5
 800f302:	3a30      	subs	r2, #48	; 0x30
 800f304:	188a      	adds	r2, r1, r2
 800f306:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f308:	e7c4      	b.n	800f294 <__ssvfscanf_r+0x1c4>
 800f30a:	2301      	movs	r3, #1
 800f30c:	431e      	orrs	r6, r3
 800f30e:	4b1b      	ldr	r3, [pc, #108]	; (800f37c <__ssvfscanf_r+0x2ac>)
 800f310:	617b      	str	r3, [r7, #20]
 800f312:	230a      	movs	r3, #10
 800f314:	2403      	movs	r4, #3
 800f316:	627b      	str	r3, [r7, #36]	; 0x24
 800f318:	e00f      	b.n	800f33a <__ssvfscanf_r+0x26a>
 800f31a:	2301      	movs	r3, #1
 800f31c:	431e      	orrs	r6, r3
 800f31e:	4b18      	ldr	r3, [pc, #96]	; (800f380 <__ssvfscanf_r+0x2b0>)
 800f320:	617b      	str	r3, [r7, #20]
 800f322:	2308      	movs	r3, #8
 800f324:	e7f6      	b.n	800f314 <__ssvfscanf_r+0x244>
 800f326:	4b16      	ldr	r3, [pc, #88]	; (800f380 <__ssvfscanf_r+0x2b0>)
 800f328:	e7f2      	b.n	800f310 <__ssvfscanf_r+0x240>
 800f32a:	2380      	movs	r3, #128	; 0x80
 800f32c:	009b      	lsls	r3, r3, #2
 800f32e:	431e      	orrs	r6, r3
 800f330:	4b13      	ldr	r3, [pc, #76]	; (800f380 <__ssvfscanf_r+0x2b0>)
 800f332:	617b      	str	r3, [r7, #20]
 800f334:	2310      	movs	r3, #16
 800f336:	e7ed      	b.n	800f314 <__ssvfscanf_r+0x244>
 800f338:	2404      	movs	r4, #4
 800f33a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f33c:	685b      	ldr	r3, [r3, #4]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	dd55      	ble.n	800f3ee <__ssvfscanf_r+0x31e>
 800f342:	0673      	lsls	r3, r6, #25
 800f344:	d407      	bmi.n	800f356 <__ssvfscanf_r+0x286>
 800f346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f348:	490b      	ldr	r1, [pc, #44]	; (800f378 <__ssvfscanf_r+0x2a8>)
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	781a      	ldrb	r2, [r3, #0]
 800f34e:	5c8a      	ldrb	r2, [r1, r2]
 800f350:	2108      	movs	r1, #8
 800f352:	420a      	tst	r2, r1
 800f354:	d152      	bne.n	800f3fc <__ssvfscanf_r+0x32c>
 800f356:	1e60      	subs	r0, r4, #1
 800f358:	2803      	cmp	r0, #3
 800f35a:	d863      	bhi.n	800f424 <__ssvfscanf_r+0x354>
 800f35c:	f7f0 fee4 	bl	8000128 <__gnu_thumb1_case_uhi>
 800f360:	03bd01da 	.word	0x03bd01da
 800f364:	068a0579 	.word	0x068a0579
 800f368:	2301      	movs	r3, #1
 800f36a:	431e      	orrs	r6, r3
 800f36c:	2402      	movs	r4, #2
 800f36e:	e7e4      	b.n	800f33a <__ssvfscanf_r+0x26a>
 800f370:	fffffd34 	.word	0xfffffd34
 800f374:	ffffdfff 	.word	0xffffdfff
 800f378:	08014f71 	.word	0x08014f71
 800f37c:	0800c521 	.word	0x0800c521
 800f380:	08011b29 	.word	0x08011b29
 800f384:	2248      	movs	r2, #72	; 0x48
 800f386:	2318      	movs	r3, #24
 800f388:	189b      	adds	r3, r3, r2
 800f38a:	19d8      	adds	r0, r3, r7
 800f38c:	69b9      	ldr	r1, [r7, #24]
 800f38e:	f001 f9d7 	bl	8010740 <__sccl>
 800f392:	2340      	movs	r3, #64	; 0x40
 800f394:	2401      	movs	r4, #1
 800f396:	61b8      	str	r0, [r7, #24]
 800f398:	431e      	orrs	r6, r3
 800f39a:	e7ce      	b.n	800f33a <__ssvfscanf_r+0x26a>
 800f39c:	2301      	movs	r3, #1
 800f39e:	431e      	orrs	r6, r3
 800f3a0:	2340      	movs	r3, #64	; 0x40
 800f3a2:	2400      	movs	r4, #0
 800f3a4:	431e      	orrs	r6, r3
 800f3a6:	e7c8      	b.n	800f33a <__ssvfscanf_r+0x26a>
 800f3a8:	2388      	movs	r3, #136	; 0x88
 800f3aa:	e7bf      	b.n	800f32c <__ssvfscanf_r+0x25c>
 800f3ac:	06f3      	lsls	r3, r6, #27
 800f3ae:	d500      	bpl.n	800f3b2 <__ssvfscanf_r+0x2e2>
 800f3b0:	e6aa      	b.n	800f108 <__ssvfscanf_r+0x38>
 800f3b2:	2108      	movs	r1, #8
 800f3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3b6:	cb04      	ldmia	r3!, {r2}
 800f3b8:	420e      	tst	r6, r1
 800f3ba:	d003      	beq.n	800f3c4 <__ssvfscanf_r+0x2f4>
 800f3bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f3be:	7011      	strb	r1, [r2, #0]
 800f3c0:	633b      	str	r3, [r7, #48]	; 0x30
 800f3c2:	e6a1      	b.n	800f108 <__ssvfscanf_r+0x38>
 800f3c4:	0771      	lsls	r1, r6, #29
 800f3c6:	d502      	bpl.n	800f3ce <__ssvfscanf_r+0x2fe>
 800f3c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f3ca:	8011      	strh	r1, [r2, #0]
 800f3cc:	e7f8      	b.n	800f3c0 <__ssvfscanf_r+0x2f0>
 800f3ce:	07f1      	lsls	r1, r6, #31
 800f3d0:	d502      	bpl.n	800f3d8 <__ssvfscanf_r+0x308>
 800f3d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f3d4:	6011      	str	r1, [r2, #0]
 800f3d6:	e7f3      	b.n	800f3c0 <__ssvfscanf_r+0x2f0>
 800f3d8:	07b6      	lsls	r6, r6, #30
 800f3da:	d5fa      	bpl.n	800f3d2 <__ssvfscanf_r+0x302>
 800f3dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f3de:	6011      	str	r1, [r2, #0]
 800f3e0:	17c9      	asrs	r1, r1, #31
 800f3e2:	6051      	str	r1, [r2, #4]
 800f3e4:	e7ec      	b.n	800f3c0 <__ssvfscanf_r+0x2f0>
 800f3e6:	4ba2      	ldr	r3, [pc, #648]	; (800f670 <__ssvfscanf_r+0x5a0>)
 800f3e8:	617b      	str	r3, [r7, #20]
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	e792      	b.n	800f314 <__ssvfscanf_r+0x244>
 800f3ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f3f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f3f2:	f002 fe01 	bl	8011ff8 <__ssrefill_r>
 800f3f6:	2800      	cmp	r0, #0
 800f3f8:	d0a3      	beq.n	800f342 <__ssvfscanf_r+0x272>
 800f3fa:	e738      	b.n	800f26e <__ssvfscanf_r+0x19e>
 800f3fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f3fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f400:	3201      	adds	r2, #1
 800f402:	63ba      	str	r2, [r7, #56]	; 0x38
 800f404:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f406:	6852      	ldr	r2, [r2, #4]
 800f408:	3a01      	subs	r2, #1
 800f40a:	604a      	str	r2, [r1, #4]
 800f40c:	2a00      	cmp	r2, #0
 800f40e:	dd02      	ble.n	800f416 <__ssvfscanf_r+0x346>
 800f410:	3301      	adds	r3, #1
 800f412:	600b      	str	r3, [r1, #0]
 800f414:	e797      	b.n	800f346 <__ssvfscanf_r+0x276>
 800f416:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f418:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f41a:	f002 fded 	bl	8011ff8 <__ssrefill_r>
 800f41e:	2800      	cmp	r0, #0
 800f420:	d091      	beq.n	800f346 <__ssvfscanf_r+0x276>
 800f422:	e724      	b.n	800f26e <__ssvfscanf_r+0x19e>
 800f424:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f426:	2301      	movs	r3, #1
 800f428:	2a00      	cmp	r2, #0
 800f42a:	d100      	bne.n	800f42e <__ssvfscanf_r+0x35e>
 800f42c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f42e:	2210      	movs	r2, #16
 800f430:	0034      	movs	r4, r6
 800f432:	4032      	ands	r2, r6
 800f434:	623a      	str	r2, [r7, #32]
 800f436:	401c      	ands	r4, r3
 800f438:	421e      	tst	r6, r3
 800f43a:	d100      	bne.n	800f43e <__ssvfscanf_r+0x36e>
 800f43c:	e0f3      	b.n	800f626 <__ssvfscanf_r+0x556>
 800f43e:	2a00      	cmp	r2, #0
 800f440:	d000      	beq.n	800f444 <__ssvfscanf_r+0x374>
 800f442:	e0b6      	b.n	800f5b2 <__ssvfscanf_r+0x4e2>
 800f444:	2080      	movs	r0, #128	; 0x80
 800f446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f448:	cb10      	ldmia	r3!, {r4}
 800f44a:	613b      	str	r3, [r7, #16]
 800f44c:	4206      	tst	r6, r0
 800f44e:	d100      	bne.n	800f452 <__ssvfscanf_r+0x382>
 800f450:	e0b7      	b.n	800f5c2 <__ssvfscanf_r+0x4f2>
 800f452:	2c00      	cmp	r4, #0
 800f454:	d007      	beq.n	800f466 <__ssvfscanf_r+0x396>
 800f456:	f7fb ff6d 	bl	800b334 <malloc>
 800f45a:	6338      	str	r0, [r7, #48]	; 0x30
 800f45c:	2800      	cmp	r0, #0
 800f45e:	d11f      	bne.n	800f4a0 <__ssvfscanf_r+0x3d0>
 800f460:	2301      	movs	r3, #1
 800f462:	425b      	negs	r3, r3
 800f464:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d013      	beq.n	800f494 <__ssvfscanf_r+0x3c4>
 800f46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f46e:	3301      	adds	r3, #1
 800f470:	d10a      	bne.n	800f488 <__ssvfscanf_r+0x3b8>
 800f472:	2400      	movs	r4, #0
 800f474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f476:	681d      	ldr	r5, [r3, #0]
 800f478:	88db      	ldrh	r3, [r3, #6]
 800f47a:	42a3      	cmp	r3, r4
 800f47c:	dd01      	ble.n	800f482 <__ssvfscanf_r+0x3b2>
 800f47e:	f001 f82a 	bl	80104d6 <__ssvfscanf_r+0x1406>
 800f482:	2301      	movs	r3, #1
 800f484:	425b      	negs	r3, r3
 800f486:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f48a:	6818      	ldr	r0, [r3, #0]
 800f48c:	2800      	cmp	r0, #0
 800f48e:	d001      	beq.n	800f494 <__ssvfscanf_r+0x3c4>
 800f490:	f7fb ff5a 	bl	800b348 <free>
 800f494:	46bd      	mov	sp, r7
 800f496:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f498:	23b1      	movs	r3, #177	; 0xb1
 800f49a:	009b      	lsls	r3, r3, #2
 800f49c:	449d      	add	sp, r3
 800f49e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4a2:	6023      	str	r3, [r4, #0]
 800f4a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4a6:	88de      	ldrh	r6, [r3, #6]
 800f4a8:	889d      	ldrh	r5, [r3, #4]
 800f4aa:	42ae      	cmp	r6, r5
 800f4ac:	d30e      	bcc.n	800f4cc <__ssvfscanf_r+0x3fc>
 800f4ae:	4b71      	ldr	r3, [pc, #452]	; (800f674 <__ssvfscanf_r+0x5a4>)
 800f4b0:	429d      	cmp	r5, r3
 800f4b2:	d8d5      	bhi.n	800f460 <__ssvfscanf_r+0x390>
 800f4b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4b6:	3508      	adds	r5, #8
 800f4b8:	b2ad      	uxth	r5, r5
 800f4ba:	6818      	ldr	r0, [r3, #0]
 800f4bc:	00a9      	lsls	r1, r5, #2
 800f4be:	f002 f901 	bl	80116c4 <realloc>
 800f4c2:	2800      	cmp	r0, #0
 800f4c4:	d0cc      	beq.n	800f460 <__ssvfscanf_r+0x390>
 800f4c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4c8:	6018      	str	r0, [r3, #0]
 800f4ca:	809d      	strh	r5, [r3, #4]
 800f4cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4ce:	1c72      	adds	r2, r6, #1
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	00b6      	lsls	r6, r6, #2
 800f4d4:	50f4      	str	r4, [r6, r3]
 800f4d6:	2320      	movs	r3, #32
 800f4d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f4da:	0026      	movs	r6, r4
 800f4dc:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f4de:	80ca      	strh	r2, [r1, #6]
 800f4e0:	61fb      	str	r3, [r7, #28]
 800f4e2:	2500      	movs	r5, #0
 800f4e4:	f7fd f9fe 	bl	800c8e4 <__locale_mb_cur_max>
 800f4e8:	42a8      	cmp	r0, r5
 800f4ea:	d100      	bne.n	800f4ee <__ssvfscanf_r+0x41e>
 800f4ec:	e6bf      	b.n	800f26e <__ssvfscanf_r+0x19e>
 800f4ee:	1c6a      	adds	r2, r5, #1
 800f4f0:	60fa      	str	r2, [r7, #12]
 800f4f2:	228c      	movs	r2, #140	; 0x8c
 800f4f4:	2048      	movs	r0, #72	; 0x48
 800f4f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4f8:	0052      	lsls	r2, r2, #1
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	1812      	adds	r2, r2, r0
 800f4fe:	7819      	ldrb	r1, [r3, #0]
 800f500:	19d2      	adds	r2, r2, r7
 800f502:	5551      	strb	r1, [r2, r5]
 800f504:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f506:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f508:	6852      	ldr	r2, [r2, #4]
 800f50a:	3301      	adds	r3, #1
 800f50c:	600b      	str	r3, [r1, #0]
 800f50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f510:	3a01      	subs	r2, #1
 800f512:	604a      	str	r2, [r1, #4]
 800f514:	2b03      	cmp	r3, #3
 800f516:	d102      	bne.n	800f51e <__ssvfscanf_r+0x44e>
 800f518:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f51a:	2b04      	cmp	r3, #4
 800f51c:	d007      	beq.n	800f52e <__ssvfscanf_r+0x45e>
 800f51e:	2048      	movs	r0, #72	; 0x48
 800f520:	2310      	movs	r3, #16
 800f522:	181b      	adds	r3, r3, r0
 800f524:	2208      	movs	r2, #8
 800f526:	2100      	movs	r1, #0
 800f528:	19d8      	adds	r0, r3, r7
 800f52a:	f7fd f997 	bl	800c85c <memset>
 800f52e:	2148      	movs	r1, #72	; 0x48
 800f530:	2310      	movs	r3, #16
 800f532:	228c      	movs	r2, #140	; 0x8c
 800f534:	185b      	adds	r3, r3, r1
 800f536:	0052      	lsls	r2, r2, #1
 800f538:	19db      	adds	r3, r3, r7
 800f53a:	1852      	adds	r2, r2, r1
 800f53c:	9300      	str	r3, [sp, #0]
 800f53e:	0021      	movs	r1, r4
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f544:	19d2      	adds	r2, r2, r7
 800f546:	f002 fc57 	bl	8011df8 <_mbrtowc_r>
 800f54a:	0003      	movs	r3, r0
 800f54c:	62b8      	str	r0, [r7, #40]	; 0x28
 800f54e:	3301      	adds	r3, #1
 800f550:	d100      	bne.n	800f554 <__ssvfscanf_r+0x484>
 800f552:	e68c      	b.n	800f26e <__ssvfscanf_r+0x19e>
 800f554:	2800      	cmp	r0, #0
 800f556:	d139      	bne.n	800f5cc <__ssvfscanf_r+0x4fc>
 800f558:	6a3b      	ldr	r3, [r7, #32]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d100      	bne.n	800f560 <__ssvfscanf_r+0x490>
 800f55e:	6023      	str	r3, [r4, #0]
 800f560:	68fa      	ldr	r2, [r7, #12]
 800f562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f564:	4694      	mov	ip, r2
 800f566:	4463      	add	r3, ip
 800f568:	63bb      	str	r3, [r7, #56]	; 0x38
 800f56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f56c:	2b03      	cmp	r3, #3
 800f56e:	d102      	bne.n	800f576 <__ssvfscanf_r+0x4a6>
 800f570:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f572:	2b04      	cmp	r3, #4
 800f574:	d002      	beq.n	800f57c <__ssvfscanf_r+0x4ac>
 800f576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f578:	3b01      	subs	r3, #1
 800f57a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f57c:	6a3b      	ldr	r3, [r7, #32]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d115      	bne.n	800f5ae <__ssvfscanf_r+0x4de>
 800f582:	2e00      	cmp	r6, #0
 800f584:	d012      	beq.n	800f5ac <__ssvfscanf_r+0x4dc>
 800f586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f588:	69fa      	ldr	r2, [r7, #28]
 800f58a:	1ae5      	subs	r5, r4, r3
 800f58c:	10ab      	asrs	r3, r5, #2
 800f58e:	4293      	cmp	r3, r2
 800f590:	d30c      	bcc.n	800f5ac <__ssvfscanf_r+0x4dc>
 800f592:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f594:	00d1      	lsls	r1, r2, #3
 800f596:	f002 f895 	bl	80116c4 <realloc>
 800f59a:	6338      	str	r0, [r7, #48]	; 0x30
 800f59c:	2800      	cmp	r0, #0
 800f59e:	d100      	bne.n	800f5a2 <__ssvfscanf_r+0x4d2>
 800f5a0:	e75e      	b.n	800f460 <__ssvfscanf_r+0x390>
 800f5a2:	69fb      	ldr	r3, [r7, #28]
 800f5a4:	1944      	adds	r4, r0, r5
 800f5a6:	005b      	lsls	r3, r3, #1
 800f5a8:	6030      	str	r0, [r6, #0]
 800f5aa:	61fb      	str	r3, [r7, #28]
 800f5ac:	3404      	adds	r4, #4
 800f5ae:	2500      	movs	r5, #0
 800f5b0:	e010      	b.n	800f5d4 <__ssvfscanf_r+0x504>
 800f5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5b4:	613b      	str	r3, [r7, #16]
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	001e      	movs	r6, r3
 800f5ba:	001c      	movs	r4, r3
 800f5bc:	61fb      	str	r3, [r7, #28]
 800f5be:	633b      	str	r3, [r7, #48]	; 0x30
 800f5c0:	e78f      	b.n	800f4e2 <__ssvfscanf_r+0x412>
 800f5c2:	6a3b      	ldr	r3, [r7, #32]
 800f5c4:	001e      	movs	r6, r3
 800f5c6:	61fb      	str	r3, [r7, #28]
 800f5c8:	633b      	str	r3, [r7, #48]	; 0x30
 800f5ca:	e78a      	b.n	800f4e2 <__ssvfscanf_r+0x412>
 800f5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ce:	68fd      	ldr	r5, [r7, #12]
 800f5d0:	3302      	adds	r3, #2
 800f5d2:	d1c5      	bne.n	800f560 <__ssvfscanf_r+0x490>
 800f5d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5d6:	685b      	ldr	r3, [r3, #4]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	dc12      	bgt.n	800f602 <__ssvfscanf_r+0x532>
 800f5dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f5de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f5e0:	f002 fd0a 	bl	8011ff8 <__ssrefill_r>
 800f5e4:	2800      	cmp	r0, #0
 800f5e6:	d00c      	beq.n	800f602 <__ssvfscanf_r+0x532>
 800f5e8:	2d00      	cmp	r5, #0
 800f5ea:	d000      	beq.n	800f5ee <__ssvfscanf_r+0x51e>
 800f5ec:	e63f      	b.n	800f26e <__ssvfscanf_r+0x19e>
 800f5ee:	2e00      	cmp	r6, #0
 800f5f0:	d10c      	bne.n	800f60c <__ssvfscanf_r+0x53c>
 800f5f2:	6a3b      	ldr	r3, [r7, #32]
 800f5f4:	425a      	negs	r2, r3
 800f5f6:	4153      	adcs	r3, r2
 800f5f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f5fa:	18d3      	adds	r3, r2, r3
 800f5fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f5fe:	693b      	ldr	r3, [r7, #16]
 800f600:	e6de      	b.n	800f3c0 <__ssvfscanf_r+0x2f0>
 800f602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f604:	2b00      	cmp	r3, #0
 800f606:	d000      	beq.n	800f60a <__ssvfscanf_r+0x53a>
 800f608:	e76c      	b.n	800f4e4 <__ssvfscanf_r+0x414>
 800f60a:	e7f0      	b.n	800f5ee <__ssvfscanf_r+0x51e>
 800f60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f60e:	69fa      	ldr	r2, [r7, #28]
 800f610:	1ae1      	subs	r1, r4, r3
 800f612:	108b      	asrs	r3, r1, #2
 800f614:	429a      	cmp	r2, r3
 800f616:	d9ec      	bls.n	800f5f2 <__ssvfscanf_r+0x522>
 800f618:	6830      	ldr	r0, [r6, #0]
 800f61a:	f002 f853 	bl	80116c4 <realloc>
 800f61e:	2800      	cmp	r0, #0
 800f620:	d0e7      	beq.n	800f5f2 <__ssvfscanf_r+0x522>
 800f622:	6030      	str	r0, [r6, #0]
 800f624:	e7e5      	b.n	800f5f2 <__ssvfscanf_r+0x522>
 800f626:	6a3b      	ldr	r3, [r7, #32]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d025      	beq.n	800f678 <__ssvfscanf_r+0x5a8>
 800f62c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f62e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f630:	685b      	ldr	r3, [r3, #4]
 800f632:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f634:	6812      	ldr	r2, [r2, #0]
 800f636:	4299      	cmp	r1, r3
 800f638:	dd11      	ble.n	800f65e <__ssvfscanf_r+0x58e>
 800f63a:	1ac9      	subs	r1, r1, r3
 800f63c:	18d2      	adds	r2, r2, r3
 800f63e:	18e4      	adds	r4, r4, r3
 800f640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f642:	63f9      	str	r1, [r7, #60]	; 0x3c
 800f644:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f646:	0019      	movs	r1, r3
 800f648:	601a      	str	r2, [r3, #0]
 800f64a:	f002 fcd5 	bl	8011ff8 <__ssrefill_r>
 800f64e:	2800      	cmp	r0, #0
 800f650:	d0ec      	beq.n	800f62c <__ssvfscanf_r+0x55c>
 800f652:	2c00      	cmp	r4, #0
 800f654:	d100      	bne.n	800f658 <__ssvfscanf_r+0x588>
 800f656:	e60a      	b.n	800f26e <__ssvfscanf_r+0x19e>
 800f658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f65a:	191b      	adds	r3, r3, r4
 800f65c:	e5ff      	b.n	800f25e <__ssvfscanf_r+0x18e>
 800f65e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f660:	1a5b      	subs	r3, r3, r1
 800f662:	1864      	adds	r4, r4, r1
 800f664:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f666:	604b      	str	r3, [r1, #4]
 800f668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f66a:	18d2      	adds	r2, r2, r3
 800f66c:	600a      	str	r2, [r1, #0]
 800f66e:	e7f3      	b.n	800f658 <__ssvfscanf_r+0x588>
 800f670:	0800c521 	.word	0x0800c521
 800f674:	0000fff6 	.word	0x0000fff6
 800f678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f67a:	0034      	movs	r4, r6
 800f67c:	cb20      	ldmia	r3!, {r5}
 800f67e:	633b      	str	r3, [r7, #48]	; 0x30
 800f680:	2380      	movs	r3, #128	; 0x80
 800f682:	401c      	ands	r4, r3
 800f684:	421e      	tst	r6, r3
 800f686:	d028      	beq.n	800f6da <__ssvfscanf_r+0x60a>
 800f688:	2d00      	cmp	r5, #0
 800f68a:	d100      	bne.n	800f68e <__ssvfscanf_r+0x5be>
 800f68c:	e61d      	b.n	800f2ca <__ssvfscanf_r+0x1fa>
 800f68e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f690:	f7fb fe50 	bl	800b334 <malloc>
 800f694:	6238      	str	r0, [r7, #32]
 800f696:	2800      	cmp	r0, #0
 800f698:	d100      	bne.n	800f69c <__ssvfscanf_r+0x5cc>
 800f69a:	e5ef      	b.n	800f27c <__ssvfscanf_r+0x1ac>
 800f69c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f69e:	6028      	str	r0, [r5, #0]
 800f6a0:	88de      	ldrh	r6, [r3, #6]
 800f6a2:	889c      	ldrh	r4, [r3, #4]
 800f6a4:	6818      	ldr	r0, [r3, #0]
 800f6a6:	42a6      	cmp	r6, r4
 800f6a8:	d30e      	bcc.n	800f6c8 <__ssvfscanf_r+0x5f8>
 800f6aa:	4bbf      	ldr	r3, [pc, #764]	; (800f9a8 <__ssvfscanf_r+0x8d8>)
 800f6ac:	429c      	cmp	r4, r3
 800f6ae:	d900      	bls.n	800f6b2 <__ssvfscanf_r+0x5e2>
 800f6b0:	e6df      	b.n	800f472 <__ssvfscanf_r+0x3a2>
 800f6b2:	3408      	adds	r4, #8
 800f6b4:	b2a4      	uxth	r4, r4
 800f6b6:	00a1      	lsls	r1, r4, #2
 800f6b8:	f002 f804 	bl	80116c4 <realloc>
 800f6bc:	2800      	cmp	r0, #0
 800f6be:	d100      	bne.n	800f6c2 <__ssvfscanf_r+0x5f2>
 800f6c0:	e6d7      	b.n	800f472 <__ssvfscanf_r+0x3a2>
 800f6c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6c4:	6018      	str	r0, [r3, #0]
 800f6c6:	809c      	strh	r4, [r3, #4]
 800f6c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6ca:	1c72      	adds	r2, r6, #1
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f6d0:	00b6      	lsls	r6, r6, #2
 800f6d2:	002c      	movs	r4, r5
 800f6d4:	50f5      	str	r5, [r6, r3]
 800f6d6:	6a3d      	ldr	r5, [r7, #32]
 800f6d8:	80ca      	strh	r2, [r1, #6]
 800f6da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6dc:	0029      	movs	r1, r5
 800f6de:	9300      	str	r3, [sp, #0]
 800f6e0:	2201      	movs	r2, #1
 800f6e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f6e6:	f002 fca6 	bl	8012036 <_sfread_r>
 800f6ea:	1e05      	subs	r5, r0, #0
 800f6ec:	d100      	bne.n	800f6f0 <__ssvfscanf_r+0x620>
 800f6ee:	e5be      	b.n	800f26e <__ssvfscanf_r+0x19e>
 800f6f0:	2c00      	cmp	r4, #0
 800f6f2:	d009      	beq.n	800f708 <__ssvfscanf_r+0x638>
 800f6f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6f6:	4283      	cmp	r3, r0
 800f6f8:	d906      	bls.n	800f708 <__ssvfscanf_r+0x638>
 800f6fa:	0001      	movs	r1, r0
 800f6fc:	6820      	ldr	r0, [r4, #0]
 800f6fe:	f001 ffe1 	bl	80116c4 <realloc>
 800f702:	2800      	cmp	r0, #0
 800f704:	d000      	beq.n	800f708 <__ssvfscanf_r+0x638>
 800f706:	6020      	str	r0, [r4, #0]
 800f708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f70a:	195b      	adds	r3, r3, r5
 800f70c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f710:	3301      	adds	r3, #1
 800f712:	e4f8      	b.n	800f106 <__ssvfscanf_r+0x36>
 800f714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f716:	2b00      	cmp	r3, #0
 800f718:	d101      	bne.n	800f71e <__ssvfscanf_r+0x64e>
 800f71a:	3b01      	subs	r3, #1
 800f71c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f71e:	2210      	movs	r2, #16
 800f720:	2301      	movs	r3, #1
 800f722:	0034      	movs	r4, r6
 800f724:	4032      	ands	r2, r6
 800f726:	401c      	ands	r4, r3
 800f728:	623a      	str	r2, [r7, #32]
 800f72a:	421e      	tst	r6, r3
 800f72c:	d100      	bne.n	800f730 <__ssvfscanf_r+0x660>
 800f72e:	e116      	b.n	800f95e <__ssvfscanf_r+0x88e>
 800f730:	2a00      	cmp	r2, #0
 800f732:	d000      	beq.n	800f736 <__ssvfscanf_r+0x666>
 800f734:	e0b0      	b.n	800f898 <__ssvfscanf_r+0x7c8>
 800f736:	2080      	movs	r0, #128	; 0x80
 800f738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f73a:	cb10      	ldmia	r3!, {r4}
 800f73c:	60fb      	str	r3, [r7, #12]
 800f73e:	4206      	tst	r6, r0
 800f740:	d100      	bne.n	800f744 <__ssvfscanf_r+0x674>
 800f742:	e0b2      	b.n	800f8aa <__ssvfscanf_r+0x7da>
 800f744:	2c00      	cmp	r4, #0
 800f746:	d100      	bne.n	800f74a <__ssvfscanf_r+0x67a>
 800f748:	e68d      	b.n	800f466 <__ssvfscanf_r+0x396>
 800f74a:	f7fb fdf3 	bl	800b334 <malloc>
 800f74e:	6338      	str	r0, [r7, #48]	; 0x30
 800f750:	2800      	cmp	r0, #0
 800f752:	d100      	bne.n	800f756 <__ssvfscanf_r+0x686>
 800f754:	e684      	b.n	800f460 <__ssvfscanf_r+0x390>
 800f756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f758:	6023      	str	r3, [r4, #0]
 800f75a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f75c:	88de      	ldrh	r6, [r3, #6]
 800f75e:	889d      	ldrh	r5, [r3, #4]
 800f760:	42ae      	cmp	r6, r5
 800f762:	d310      	bcc.n	800f786 <__ssvfscanf_r+0x6b6>
 800f764:	4b90      	ldr	r3, [pc, #576]	; (800f9a8 <__ssvfscanf_r+0x8d8>)
 800f766:	429d      	cmp	r5, r3
 800f768:	d900      	bls.n	800f76c <__ssvfscanf_r+0x69c>
 800f76a:	e679      	b.n	800f460 <__ssvfscanf_r+0x390>
 800f76c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f76e:	3508      	adds	r5, #8
 800f770:	b2ad      	uxth	r5, r5
 800f772:	6818      	ldr	r0, [r3, #0]
 800f774:	00a9      	lsls	r1, r5, #2
 800f776:	f001 ffa5 	bl	80116c4 <realloc>
 800f77a:	2800      	cmp	r0, #0
 800f77c:	d100      	bne.n	800f780 <__ssvfscanf_r+0x6b0>
 800f77e:	e66f      	b.n	800f460 <__ssvfscanf_r+0x390>
 800f780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f782:	6018      	str	r0, [r3, #0]
 800f784:	809d      	strh	r5, [r3, #4]
 800f786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f788:	1c72      	adds	r2, r6, #1
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	00b6      	lsls	r6, r6, #2
 800f78e:	50f4      	str	r4, [r6, r3]
 800f790:	2320      	movs	r3, #32
 800f792:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f794:	0026      	movs	r6, r4
 800f796:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f798:	80ca      	strh	r2, [r1, #6]
 800f79a:	613b      	str	r3, [r7, #16]
 800f79c:	2500      	movs	r5, #0
 800f79e:	f7fd f8a1 	bl	800c8e4 <__locale_mb_cur_max>
 800f7a2:	42a8      	cmp	r0, r5
 800f7a4:	d100      	bne.n	800f7a8 <__ssvfscanf_r+0x6d8>
 800f7a6:	e562      	b.n	800f26e <__ssvfscanf_r+0x19e>
 800f7a8:	1c6a      	adds	r2, r5, #1
 800f7aa:	61fa      	str	r2, [r7, #28]
 800f7ac:	228c      	movs	r2, #140	; 0x8c
 800f7ae:	2048      	movs	r0, #72	; 0x48
 800f7b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f7b2:	0052      	lsls	r2, r2, #1
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	1812      	adds	r2, r2, r0
 800f7b8:	7819      	ldrb	r1, [r3, #0]
 800f7ba:	19d2      	adds	r2, r2, r7
 800f7bc:	5551      	strb	r1, [r2, r5]
 800f7be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f7c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f7c2:	6852      	ldr	r2, [r2, #4]
 800f7c4:	3301      	adds	r3, #1
 800f7c6:	600b      	str	r3, [r1, #0]
 800f7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ca:	3a01      	subs	r2, #1
 800f7cc:	604a      	str	r2, [r1, #4]
 800f7ce:	2b03      	cmp	r3, #3
 800f7d0:	d102      	bne.n	800f7d8 <__ssvfscanf_r+0x708>
 800f7d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7d4:	2b04      	cmp	r3, #4
 800f7d6:	d006      	beq.n	800f7e6 <__ssvfscanf_r+0x716>
 800f7d8:	2048      	movs	r0, #72	; 0x48
 800f7da:	2208      	movs	r2, #8
 800f7dc:	1813      	adds	r3, r2, r0
 800f7de:	2100      	movs	r1, #0
 800f7e0:	19d8      	adds	r0, r3, r7
 800f7e2:	f7fd f83b 	bl	800c85c <memset>
 800f7e6:	2148      	movs	r1, #72	; 0x48
 800f7e8:	2308      	movs	r3, #8
 800f7ea:	228c      	movs	r2, #140	; 0x8c
 800f7ec:	185b      	adds	r3, r3, r1
 800f7ee:	0052      	lsls	r2, r2, #1
 800f7f0:	19db      	adds	r3, r3, r7
 800f7f2:	1852      	adds	r2, r2, r1
 800f7f4:	9300      	str	r3, [sp, #0]
 800f7f6:	0021      	movs	r1, r4
 800f7f8:	69fb      	ldr	r3, [r7, #28]
 800f7fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f7fc:	19d2      	adds	r2, r2, r7
 800f7fe:	f002 fafb 	bl	8011df8 <_mbrtowc_r>
 800f802:	0003      	movs	r3, r0
 800f804:	62b8      	str	r0, [r7, #40]	; 0x28
 800f806:	3301      	adds	r3, #1
 800f808:	d100      	bne.n	800f80c <__ssvfscanf_r+0x73c>
 800f80a:	e530      	b.n	800f26e <__ssvfscanf_r+0x19e>
 800f80c:	2800      	cmp	r0, #0
 800f80e:	d151      	bne.n	800f8b4 <__ssvfscanf_r+0x7e4>
 800f810:	6020      	str	r0, [r4, #0]
 800f812:	2301      	movs	r3, #1
 800f814:	6825      	ldr	r5, [r4, #0]
 800f816:	425b      	negs	r3, r3
 800f818:	1c6a      	adds	r2, r5, #1
 800f81a:	d01a      	beq.n	800f852 <__ssvfscanf_r+0x782>
 800f81c:	2048      	movs	r0, #72	; 0x48
 800f81e:	3311      	adds	r3, #17
 800f820:	181b      	adds	r3, r3, r0
 800f822:	2208      	movs	r2, #8
 800f824:	2100      	movs	r1, #0
 800f826:	19d8      	adds	r0, r3, r7
 800f828:	f7fd f818 	bl	800c85c <memset>
 800f82c:	4b5f      	ldr	r3, [pc, #380]	; (800f9ac <__ssvfscanf_r+0x8dc>)
 800f82e:	2148      	movs	r1, #72	; 0x48
 800f830:	33e0      	adds	r3, #224	; 0xe0
 800f832:	681a      	ldr	r2, [r3, #0]
 800f834:	2310      	movs	r3, #16
 800f836:	4694      	mov	ip, r2
 800f838:	185b      	adds	r3, r3, r1
 800f83a:	002a      	movs	r2, r5
 800f83c:	19db      	adds	r3, r3, r7
 800f83e:	4665      	mov	r5, ip
 800f840:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f842:	1879      	adds	r1, r7, r1
 800f844:	47a8      	blx	r5
 800f846:	2300      	movs	r3, #0
 800f848:	2801      	cmp	r0, #1
 800f84a:	d102      	bne.n	800f852 <__ssvfscanf_r+0x782>
 800f84c:	3348      	adds	r3, #72	; 0x48
 800f84e:	18fb      	adds	r3, r7, r3
 800f850:	781b      	ldrb	r3, [r3, #0]
 800f852:	2218      	movs	r2, #24
 800f854:	2148      	movs	r1, #72	; 0x48
 800f856:	1852      	adds	r2, r2, r1
 800f858:	19d2      	adds	r2, r2, r7
 800f85a:	5cd3      	ldrb	r3, [r2, r3]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d149      	bne.n	800f8f4 <__ssvfscanf_r+0x824>
 800f860:	69fb      	ldr	r3, [r7, #28]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d137      	bne.n	800f8d6 <__ssvfscanf_r+0x806>
 800f866:	6a3b      	ldr	r3, [r7, #32]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d113      	bne.n	800f894 <__ssvfscanf_r+0x7c4>
 800f86c:	6023      	str	r3, [r4, #0]
 800f86e:	2e00      	cmp	r6, #0
 800f870:	d00d      	beq.n	800f88e <__ssvfscanf_r+0x7be>
 800f872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f874:	693a      	ldr	r2, [r7, #16]
 800f876:	1ae4      	subs	r4, r4, r3
 800f878:	10a3      	asrs	r3, r4, #2
 800f87a:	3301      	adds	r3, #1
 800f87c:	429a      	cmp	r2, r3
 800f87e:	d906      	bls.n	800f88e <__ssvfscanf_r+0x7be>
 800f880:	6830      	ldr	r0, [r6, #0]
 800f882:	1d21      	adds	r1, r4, #4
 800f884:	f001 ff1e 	bl	80116c4 <realloc>
 800f888:	2800      	cmp	r0, #0
 800f88a:	d000      	beq.n	800f88e <__ssvfscanf_r+0x7be>
 800f88c:	6030      	str	r0, [r6, #0]
 800f88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f890:	3301      	adds	r3, #1
 800f892:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	e593      	b.n	800f3c0 <__ssvfscanf_r+0x2f0>
 800f898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f89a:	60fb      	str	r3, [r7, #12]
 800f89c:	2300      	movs	r3, #0
 800f89e:	001e      	movs	r6, r3
 800f8a0:	613b      	str	r3, [r7, #16]
 800f8a2:	633b      	str	r3, [r7, #48]	; 0x30
 800f8a4:	334c      	adds	r3, #76	; 0x4c
 800f8a6:	18fc      	adds	r4, r7, r3
 800f8a8:	e778      	b.n	800f79c <__ssvfscanf_r+0x6cc>
 800f8aa:	6a3b      	ldr	r3, [r7, #32]
 800f8ac:	001e      	movs	r6, r3
 800f8ae:	613b      	str	r3, [r7, #16]
 800f8b0:	633b      	str	r3, [r7, #48]	; 0x30
 800f8b2:	e773      	b.n	800f79c <__ssvfscanf_r+0x6cc>
 800f8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8b6:	69fd      	ldr	r5, [r7, #28]
 800f8b8:	3302      	adds	r3, #2
 800f8ba:	d1aa      	bne.n	800f812 <__ssvfscanf_r+0x742>
 800f8bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8be:	685b      	ldr	r3, [r3, #4]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	dc47      	bgt.n	800f954 <__ssvfscanf_r+0x884>
 800f8c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f8c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f8c8:	f002 fb96 	bl	8011ff8 <__ssrefill_r>
 800f8cc:	2800      	cmp	r0, #0
 800f8ce:	d041      	beq.n	800f954 <__ssvfscanf_r+0x884>
 800f8d0:	2d00      	cmp	r5, #0
 800f8d2:	d0c8      	beq.n	800f866 <__ssvfscanf_r+0x796>
 800f8d4:	e4cb      	b.n	800f26e <__ssvfscanf_r+0x19e>
 800f8d6:	69fb      	ldr	r3, [r7, #28]
 800f8d8:	2248      	movs	r2, #72	; 0x48
 800f8da:	3b01      	subs	r3, #1
 800f8dc:	61fb      	str	r3, [r7, #28]
 800f8de:	238c      	movs	r3, #140	; 0x8c
 800f8e0:	005b      	lsls	r3, r3, #1
 800f8e2:	189b      	adds	r3, r3, r2
 800f8e4:	69fa      	ldr	r2, [r7, #28]
 800f8e6:	19db      	adds	r3, r3, r7
 800f8e8:	5cd1      	ldrb	r1, [r2, r3]
 800f8ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f8ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f8ee:	f002 fb47 	bl	8011f80 <_sungetc_r>
 800f8f2:	e7b5      	b.n	800f860 <__ssvfscanf_r+0x790>
 800f8f4:	69fa      	ldr	r2, [r7, #28]
 800f8f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8f8:	4694      	mov	ip, r2
 800f8fa:	4463      	add	r3, ip
 800f8fc:	63bb      	str	r3, [r7, #56]	; 0x38
 800f8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f900:	2b03      	cmp	r3, #3
 800f902:	d102      	bne.n	800f90a <__ssvfscanf_r+0x83a>
 800f904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f906:	2b04      	cmp	r3, #4
 800f908:	d002      	beq.n	800f910 <__ssvfscanf_r+0x840>
 800f90a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f90c:	3b01      	subs	r3, #1
 800f90e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f910:	6a3b      	ldr	r3, [r7, #32]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d11a      	bne.n	800f94c <__ssvfscanf_r+0x87c>
 800f916:	3404      	adds	r4, #4
 800f918:	2e00      	cmp	r6, #0
 800f91a:	d019      	beq.n	800f950 <__ssvfscanf_r+0x880>
 800f91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f91e:	693a      	ldr	r2, [r7, #16]
 800f920:	1ae3      	subs	r3, r4, r3
 800f922:	61fb      	str	r3, [r7, #28]
 800f924:	6a3d      	ldr	r5, [r7, #32]
 800f926:	109b      	asrs	r3, r3, #2
 800f928:	4293      	cmp	r3, r2
 800f92a:	d3c7      	bcc.n	800f8bc <__ssvfscanf_r+0x7ec>
 800f92c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f92e:	00d1      	lsls	r1, r2, #3
 800f930:	f001 fec8 	bl	80116c4 <realloc>
 800f934:	6338      	str	r0, [r7, #48]	; 0x30
 800f936:	2800      	cmp	r0, #0
 800f938:	d100      	bne.n	800f93c <__ssvfscanf_r+0x86c>
 800f93a:	e591      	b.n	800f460 <__ssvfscanf_r+0x390>
 800f93c:	4684      	mov	ip, r0
 800f93e:	693b      	ldr	r3, [r7, #16]
 800f940:	69fc      	ldr	r4, [r7, #28]
 800f942:	005b      	lsls	r3, r3, #1
 800f944:	4464      	add	r4, ip
 800f946:	6030      	str	r0, [r6, #0]
 800f948:	613b      	str	r3, [r7, #16]
 800f94a:	e7b7      	b.n	800f8bc <__ssvfscanf_r+0x7ec>
 800f94c:	2500      	movs	r5, #0
 800f94e:	e7b5      	b.n	800f8bc <__ssvfscanf_r+0x7ec>
 800f950:	0035      	movs	r5, r6
 800f952:	e7b3      	b.n	800f8bc <__ssvfscanf_r+0x7ec>
 800f954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f956:	2b00      	cmp	r3, #0
 800f958:	d000      	beq.n	800f95c <__ssvfscanf_r+0x88c>
 800f95a:	e720      	b.n	800f79e <__ssvfscanf_r+0x6ce>
 800f95c:	e783      	b.n	800f866 <__ssvfscanf_r+0x796>
 800f95e:	6a3b      	ldr	r3, [r7, #32]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d025      	beq.n	800f9b0 <__ssvfscanf_r+0x8e0>
 800f964:	2118      	movs	r1, #24
 800f966:	2048      	movs	r0, #72	; 0x48
 800f968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f96a:	1809      	adds	r1, r1, r0
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	19c9      	adds	r1, r1, r7
 800f970:	781a      	ldrb	r2, [r3, #0]
 800f972:	5c8a      	ldrb	r2, [r1, r2]
 800f974:	2a00      	cmp	r2, #0
 800f976:	d103      	bne.n	800f980 <__ssvfscanf_r+0x8b0>
 800f978:	2c00      	cmp	r4, #0
 800f97a:	d000      	beq.n	800f97e <__ssvfscanf_r+0x8ae>
 800f97c:	e66c      	b.n	800f658 <__ssvfscanf_r+0x588>
 800f97e:	e4a4      	b.n	800f2ca <__ssvfscanf_r+0x1fa>
 800f980:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f982:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f984:	6852      	ldr	r2, [r2, #4]
 800f986:	3301      	adds	r3, #1
 800f988:	600b      	str	r3, [r1, #0]
 800f98a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f98c:	3a01      	subs	r2, #1
 800f98e:	3401      	adds	r4, #1
 800f990:	604a      	str	r2, [r1, #4]
 800f992:	429c      	cmp	r4, r3
 800f994:	d100      	bne.n	800f998 <__ssvfscanf_r+0x8c8>
 800f996:	e65f      	b.n	800f658 <__ssvfscanf_r+0x588>
 800f998:	2a00      	cmp	r2, #0
 800f99a:	dce3      	bgt.n	800f964 <__ssvfscanf_r+0x894>
 800f99c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f99e:	f002 fb2b 	bl	8011ff8 <__ssrefill_r>
 800f9a2:	2800      	cmp	r0, #0
 800f9a4:	d0de      	beq.n	800f964 <__ssvfscanf_r+0x894>
 800f9a6:	e657      	b.n	800f658 <__ssvfscanf_r+0x588>
 800f9a8:	0000fff6 	.word	0x0000fff6
 800f9ac:	2000044c 	.word	0x2000044c
 800f9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9b2:	0032      	movs	r2, r6
 800f9b4:	cb20      	ldmia	r3!, {r5}
 800f9b6:	61fb      	str	r3, [r7, #28]
 800f9b8:	2380      	movs	r3, #128	; 0x80
 800f9ba:	401a      	ands	r2, r3
 800f9bc:	421e      	tst	r6, r3
 800f9be:	d100      	bne.n	800f9c2 <__ssvfscanf_r+0x8f2>
 800f9c0:	e086      	b.n	800fad0 <__ssvfscanf_r+0xa00>
 800f9c2:	2d00      	cmp	r5, #0
 800f9c4:	d100      	bne.n	800f9c8 <__ssvfscanf_r+0x8f8>
 800f9c6:	e480      	b.n	800f2ca <__ssvfscanf_r+0x1fa>
 800f9c8:	2020      	movs	r0, #32
 800f9ca:	f7fb fcb3 	bl	800b334 <malloc>
 800f9ce:	6338      	str	r0, [r7, #48]	; 0x30
 800f9d0:	2800      	cmp	r0, #0
 800f9d2:	d100      	bne.n	800f9d6 <__ssvfscanf_r+0x906>
 800f9d4:	e452      	b.n	800f27c <__ssvfscanf_r+0x1ac>
 800f9d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9d8:	6028      	str	r0, [r5, #0]
 800f9da:	88de      	ldrh	r6, [r3, #6]
 800f9dc:	889c      	ldrh	r4, [r3, #4]
 800f9de:	6818      	ldr	r0, [r3, #0]
 800f9e0:	42a6      	cmp	r6, r4
 800f9e2:	d30e      	bcc.n	800fa02 <__ssvfscanf_r+0x932>
 800f9e4:	4bc3      	ldr	r3, [pc, #780]	; (800fcf4 <__ssvfscanf_r+0xc24>)
 800f9e6:	429c      	cmp	r4, r3
 800f9e8:	d900      	bls.n	800f9ec <__ssvfscanf_r+0x91c>
 800f9ea:	e542      	b.n	800f472 <__ssvfscanf_r+0x3a2>
 800f9ec:	3408      	adds	r4, #8
 800f9ee:	b2a4      	uxth	r4, r4
 800f9f0:	00a1      	lsls	r1, r4, #2
 800f9f2:	f001 fe67 	bl	80116c4 <realloc>
 800f9f6:	2800      	cmp	r0, #0
 800f9f8:	d100      	bne.n	800f9fc <__ssvfscanf_r+0x92c>
 800f9fa:	e53a      	b.n	800f472 <__ssvfscanf_r+0x3a2>
 800f9fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9fe:	6018      	str	r0, [r3, #0]
 800fa00:	809c      	strh	r4, [r3, #4]
 800fa02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa04:	1c72      	adds	r2, r6, #1
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	00b6      	lsls	r6, r6, #2
 800fa0a:	50f5      	str	r5, [r6, r3]
 800fa0c:	2320      	movs	r3, #32
 800fa0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fa10:	002e      	movs	r6, r5
 800fa12:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800fa14:	80ca      	strh	r2, [r1, #6]
 800fa16:	623b      	str	r3, [r7, #32]
 800fa18:	002c      	movs	r4, r5
 800fa1a:	2118      	movs	r1, #24
 800fa1c:	2048      	movs	r0, #72	; 0x48
 800fa1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa20:	1809      	adds	r1, r1, r0
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	19c9      	adds	r1, r1, r7
 800fa26:	781a      	ldrb	r2, [r3, #0]
 800fa28:	5c8a      	ldrb	r2, [r1, r2]
 800fa2a:	2a00      	cmp	r2, #0
 800fa2c:	d101      	bne.n	800fa32 <__ssvfscanf_r+0x962>
 800fa2e:	633d      	str	r5, [r7, #48]	; 0x30
 800fa30:	e031      	b.n	800fa96 <__ssvfscanf_r+0x9c6>
 800fa32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fa34:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fa36:	6852      	ldr	r2, [r2, #4]
 800fa38:	3a01      	subs	r2, #1
 800fa3a:	604a      	str	r2, [r1, #4]
 800fa3c:	1c5a      	adds	r2, r3, #1
 800fa3e:	600a      	str	r2, [r1, #0]
 800fa40:	781b      	ldrb	r3, [r3, #0]
 800fa42:	1c6a      	adds	r2, r5, #1
 800fa44:	633a      	str	r2, [r7, #48]	; 0x30
 800fa46:	702b      	strb	r3, [r5, #0]
 800fa48:	2e00      	cmp	r6, #0
 800fa4a:	d010      	beq.n	800fa6e <__ssvfscanf_r+0x99e>
 800fa4c:	6a3b      	ldr	r3, [r7, #32]
 800fa4e:	1b15      	subs	r5, r2, r4
 800fa50:	429d      	cmp	r5, r3
 800fa52:	d30c      	bcc.n	800fa6e <__ssvfscanf_r+0x99e>
 800fa54:	005b      	lsls	r3, r3, #1
 800fa56:	0020      	movs	r0, r4
 800fa58:	0019      	movs	r1, r3
 800fa5a:	623b      	str	r3, [r7, #32]
 800fa5c:	f001 fe32 	bl	80116c4 <realloc>
 800fa60:	1e04      	subs	r4, r0, #0
 800fa62:	d101      	bne.n	800fa68 <__ssvfscanf_r+0x998>
 800fa64:	f7ff fc0a 	bl	800f27c <__ssvfscanf_r+0x1ac>
 800fa68:	1943      	adds	r3, r0, r5
 800fa6a:	633b      	str	r3, [r7, #48]	; 0x30
 800fa6c:	6030      	str	r0, [r6, #0]
 800fa6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa70:	3b01      	subs	r3, #1
 800fa72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d00e      	beq.n	800fa96 <__ssvfscanf_r+0x9c6>
 800fa78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa7a:	685b      	ldr	r3, [r3, #4]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	dc2a      	bgt.n	800fad6 <__ssvfscanf_r+0xa06>
 800fa80:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fa82:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fa84:	f002 fab8 	bl	8011ff8 <__ssrefill_r>
 800fa88:	2800      	cmp	r0, #0
 800fa8a:	d024      	beq.n	800fad6 <__ssvfscanf_r+0xa06>
 800fa8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa8e:	42a3      	cmp	r3, r4
 800fa90:	d101      	bne.n	800fa96 <__ssvfscanf_r+0x9c6>
 800fa92:	f7ff fbec 	bl	800f26e <__ssvfscanf_r+0x19e>
 800fa96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa98:	1b1d      	subs	r5, r3, r4
 800fa9a:	42a3      	cmp	r3, r4
 800fa9c:	d101      	bne.n	800faa2 <__ssvfscanf_r+0x9d2>
 800fa9e:	f7ff fc14 	bl	800f2ca <__ssvfscanf_r+0x1fa>
 800faa2:	2300      	movs	r3, #0
 800faa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800faa6:	7013      	strb	r3, [r2, #0]
 800faa8:	429e      	cmp	r6, r3
 800faaa:	d009      	beq.n	800fac0 <__ssvfscanf_r+0x9f0>
 800faac:	6a3b      	ldr	r3, [r7, #32]
 800faae:	1c69      	adds	r1, r5, #1
 800fab0:	428b      	cmp	r3, r1
 800fab2:	d905      	bls.n	800fac0 <__ssvfscanf_r+0x9f0>
 800fab4:	6830      	ldr	r0, [r6, #0]
 800fab6:	f001 fe05 	bl	80116c4 <realloc>
 800faba:	2800      	cmp	r0, #0
 800fabc:	d000      	beq.n	800fac0 <__ssvfscanf_r+0x9f0>
 800fabe:	6030      	str	r0, [r6, #0]
 800fac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fac2:	3301      	adds	r3, #1
 800fac4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fac8:	195b      	adds	r3, r3, r5
 800faca:	63bb      	str	r3, [r7, #56]	; 0x38
 800facc:	69fb      	ldr	r3, [r7, #28]
 800face:	e477      	b.n	800f3c0 <__ssvfscanf_r+0x2f0>
 800fad0:	0016      	movs	r6, r2
 800fad2:	623a      	str	r2, [r7, #32]
 800fad4:	e7a0      	b.n	800fa18 <__ssvfscanf_r+0x948>
 800fad6:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800fad8:	e79f      	b.n	800fa1a <__ssvfscanf_r+0x94a>
 800fada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d101      	bne.n	800fae4 <__ssvfscanf_r+0xa14>
 800fae0:	3b01      	subs	r3, #1
 800fae2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fae4:	2210      	movs	r2, #16
 800fae6:	2301      	movs	r3, #1
 800fae8:	0034      	movs	r4, r6
 800faea:	4032      	ands	r2, r6
 800faec:	401c      	ands	r4, r3
 800faee:	61fa      	str	r2, [r7, #28]
 800faf0:	421e      	tst	r6, r3
 800faf2:	d100      	bne.n	800faf6 <__ssvfscanf_r+0xa26>
 800faf4:	e102      	b.n	800fcfc <__ssvfscanf_r+0xc2c>
 800faf6:	2a00      	cmp	r2, #0
 800faf8:	d000      	beq.n	800fafc <__ssvfscanf_r+0xa2c>
 800fafa:	e09f      	b.n	800fc3c <__ssvfscanf_r+0xb6c>
 800fafc:	2080      	movs	r0, #128	; 0x80
 800fafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb00:	cb10      	ldmia	r3!, {r4}
 800fb02:	60fb      	str	r3, [r7, #12]
 800fb04:	4206      	tst	r6, r0
 800fb06:	d100      	bne.n	800fb0a <__ssvfscanf_r+0xa3a>
 800fb08:	e0a1      	b.n	800fc4e <__ssvfscanf_r+0xb7e>
 800fb0a:	2c00      	cmp	r4, #0
 800fb0c:	d100      	bne.n	800fb10 <__ssvfscanf_r+0xa40>
 800fb0e:	e4aa      	b.n	800f466 <__ssvfscanf_r+0x396>
 800fb10:	f7fb fc10 	bl	800b334 <malloc>
 800fb14:	6338      	str	r0, [r7, #48]	; 0x30
 800fb16:	2800      	cmp	r0, #0
 800fb18:	d100      	bne.n	800fb1c <__ssvfscanf_r+0xa4c>
 800fb1a:	e4a1      	b.n	800f460 <__ssvfscanf_r+0x390>
 800fb1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb1e:	6023      	str	r3, [r4, #0]
 800fb20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb22:	88de      	ldrh	r6, [r3, #6]
 800fb24:	889d      	ldrh	r5, [r3, #4]
 800fb26:	42ae      	cmp	r6, r5
 800fb28:	d310      	bcc.n	800fb4c <__ssvfscanf_r+0xa7c>
 800fb2a:	4b72      	ldr	r3, [pc, #456]	; (800fcf4 <__ssvfscanf_r+0xc24>)
 800fb2c:	429d      	cmp	r5, r3
 800fb2e:	d900      	bls.n	800fb32 <__ssvfscanf_r+0xa62>
 800fb30:	e496      	b.n	800f460 <__ssvfscanf_r+0x390>
 800fb32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb34:	3508      	adds	r5, #8
 800fb36:	b2ad      	uxth	r5, r5
 800fb38:	6818      	ldr	r0, [r3, #0]
 800fb3a:	00a9      	lsls	r1, r5, #2
 800fb3c:	f001 fdc2 	bl	80116c4 <realloc>
 800fb40:	2800      	cmp	r0, #0
 800fb42:	d100      	bne.n	800fb46 <__ssvfscanf_r+0xa76>
 800fb44:	e48c      	b.n	800f460 <__ssvfscanf_r+0x390>
 800fb46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb48:	6018      	str	r0, [r3, #0]
 800fb4a:	809d      	strh	r5, [r3, #4]
 800fb4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb4e:	1c72      	adds	r2, r6, #1
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	00b6      	lsls	r6, r6, #2
 800fb54:	50f4      	str	r4, [r6, r3]
 800fb56:	2320      	movs	r3, #32
 800fb58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fb5a:	0025      	movs	r5, r4
 800fb5c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800fb5e:	80ca      	strh	r2, [r1, #6]
 800fb60:	613b      	str	r3, [r7, #16]
 800fb62:	2300      	movs	r3, #0
 800fb64:	623b      	str	r3, [r7, #32]
 800fb66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb68:	4a63      	ldr	r2, [pc, #396]	; (800fcf8 <__ssvfscanf_r+0xc28>)
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	781b      	ldrb	r3, [r3, #0]
 800fb6e:	5cd3      	ldrb	r3, [r2, r3]
 800fb70:	2208      	movs	r2, #8
 800fb72:	4213      	tst	r3, r2
 800fb74:	d149      	bne.n	800fc0a <__ssvfscanf_r+0xb3a>
 800fb76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d046      	beq.n	800fc0a <__ssvfscanf_r+0xb3a>
 800fb7c:	f7fc feb2 	bl	800c8e4 <__locale_mb_cur_max>
 800fb80:	6a3b      	ldr	r3, [r7, #32]
 800fb82:	4298      	cmp	r0, r3
 800fb84:	d101      	bne.n	800fb8a <__ssvfscanf_r+0xaba>
 800fb86:	f7ff fb72 	bl	800f26e <__ssvfscanf_r+0x19e>
 800fb8a:	6a3a      	ldr	r2, [r7, #32]
 800fb8c:	2048      	movs	r0, #72	; 0x48
 800fb8e:	1c56      	adds	r6, r2, #1
 800fb90:	228c      	movs	r2, #140	; 0x8c
 800fb92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb94:	0052      	lsls	r2, r2, #1
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	1812      	adds	r2, r2, r0
 800fb9a:	7819      	ldrb	r1, [r3, #0]
 800fb9c:	6a38      	ldr	r0, [r7, #32]
 800fb9e:	19d2      	adds	r2, r2, r7
 800fba0:	5411      	strb	r1, [r2, r0]
 800fba2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fba4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fba6:	6852      	ldr	r2, [r2, #4]
 800fba8:	3301      	adds	r3, #1
 800fbaa:	600b      	str	r3, [r1, #0]
 800fbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbae:	3a01      	subs	r2, #1
 800fbb0:	604a      	str	r2, [r1, #4]
 800fbb2:	2b03      	cmp	r3, #3
 800fbb4:	d102      	bne.n	800fbbc <__ssvfscanf_r+0xaec>
 800fbb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fbb8:	2b04      	cmp	r3, #4
 800fbba:	d007      	beq.n	800fbcc <__ssvfscanf_r+0xafc>
 800fbbc:	2048      	movs	r0, #72	; 0x48
 800fbbe:	2310      	movs	r3, #16
 800fbc0:	181b      	adds	r3, r3, r0
 800fbc2:	2208      	movs	r2, #8
 800fbc4:	2100      	movs	r1, #0
 800fbc6:	19d8      	adds	r0, r3, r7
 800fbc8:	f7fc fe48 	bl	800c85c <memset>
 800fbcc:	2148      	movs	r1, #72	; 0x48
 800fbce:	2310      	movs	r3, #16
 800fbd0:	228c      	movs	r2, #140	; 0x8c
 800fbd2:	185b      	adds	r3, r3, r1
 800fbd4:	0052      	lsls	r2, r2, #1
 800fbd6:	19db      	adds	r3, r3, r7
 800fbd8:	1852      	adds	r2, r2, r1
 800fbda:	9300      	str	r3, [sp, #0]
 800fbdc:	0021      	movs	r1, r4
 800fbde:	0033      	movs	r3, r6
 800fbe0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fbe2:	19d2      	adds	r2, r2, r7
 800fbe4:	f002 f908 	bl	8011df8 <_mbrtowc_r>
 800fbe8:	0003      	movs	r3, r0
 800fbea:	62b8      	str	r0, [r7, #40]	; 0x28
 800fbec:	3301      	adds	r3, #1
 800fbee:	d101      	bne.n	800fbf4 <__ssvfscanf_r+0xb24>
 800fbf0:	f7ff fb3d 	bl	800f26e <__ssvfscanf_r+0x19e>
 800fbf4:	2800      	cmp	r0, #0
 800fbf6:	d12f      	bne.n	800fc58 <__ssvfscanf_r+0xb88>
 800fbf8:	6020      	str	r0, [r4, #0]
 800fbfa:	6820      	ldr	r0, [r4, #0]
 800fbfc:	f002 f91a 	bl	8011e34 <iswspace>
 800fc00:	6238      	str	r0, [r7, #32]
 800fc02:	2800      	cmp	r0, #0
 800fc04:	d04a      	beq.n	800fc9c <__ssvfscanf_r+0xbcc>
 800fc06:	2e00      	cmp	r6, #0
 800fc08:	d13c      	bne.n	800fc84 <__ssvfscanf_r+0xbb4>
 800fc0a:	69fb      	ldr	r3, [r7, #28]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d000      	beq.n	800fc12 <__ssvfscanf_r+0xb42>
 800fc10:	e640      	b.n	800f894 <__ssvfscanf_r+0x7c4>
 800fc12:	6023      	str	r3, [r4, #0]
 800fc14:	2d00      	cmp	r5, #0
 800fc16:	d100      	bne.n	800fc1a <__ssvfscanf_r+0xb4a>
 800fc18:	e639      	b.n	800f88e <__ssvfscanf_r+0x7be>
 800fc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc1c:	693a      	ldr	r2, [r7, #16]
 800fc1e:	1ae4      	subs	r4, r4, r3
 800fc20:	10a3      	asrs	r3, r4, #2
 800fc22:	3301      	adds	r3, #1
 800fc24:	429a      	cmp	r2, r3
 800fc26:	d800      	bhi.n	800fc2a <__ssvfscanf_r+0xb5a>
 800fc28:	e631      	b.n	800f88e <__ssvfscanf_r+0x7be>
 800fc2a:	6828      	ldr	r0, [r5, #0]
 800fc2c:	1d21      	adds	r1, r4, #4
 800fc2e:	f001 fd49 	bl	80116c4 <realloc>
 800fc32:	2800      	cmp	r0, #0
 800fc34:	d100      	bne.n	800fc38 <__ssvfscanf_r+0xb68>
 800fc36:	e62a      	b.n	800f88e <__ssvfscanf_r+0x7be>
 800fc38:	6028      	str	r0, [r5, #0]
 800fc3a:	e628      	b.n	800f88e <__ssvfscanf_r+0x7be>
 800fc3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc3e:	60fb      	str	r3, [r7, #12]
 800fc40:	2300      	movs	r3, #0
 800fc42:	001d      	movs	r5, r3
 800fc44:	613b      	str	r3, [r7, #16]
 800fc46:	633b      	str	r3, [r7, #48]	; 0x30
 800fc48:	334c      	adds	r3, #76	; 0x4c
 800fc4a:	18fc      	adds	r4, r7, r3
 800fc4c:	e789      	b.n	800fb62 <__ssvfscanf_r+0xa92>
 800fc4e:	69fb      	ldr	r3, [r7, #28]
 800fc50:	001d      	movs	r5, r3
 800fc52:	613b      	str	r3, [r7, #16]
 800fc54:	633b      	str	r3, [r7, #48]	; 0x30
 800fc56:	e784      	b.n	800fb62 <__ssvfscanf_r+0xa92>
 800fc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc5a:	623e      	str	r6, [r7, #32]
 800fc5c:	3302      	adds	r3, #2
 800fc5e:	d1cc      	bne.n	800fbfa <__ssvfscanf_r+0xb2a>
 800fc60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc62:	685b      	ldr	r3, [r3, #4]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	dd00      	ble.n	800fc6a <__ssvfscanf_r+0xb9a>
 800fc68:	e77d      	b.n	800fb66 <__ssvfscanf_r+0xa96>
 800fc6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fc6c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fc6e:	f002 f9c3 	bl	8011ff8 <__ssrefill_r>
 800fc72:	2800      	cmp	r0, #0
 800fc74:	d100      	bne.n	800fc78 <__ssvfscanf_r+0xba8>
 800fc76:	e776      	b.n	800fb66 <__ssvfscanf_r+0xa96>
 800fc78:	6a3b      	ldr	r3, [r7, #32]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d001      	beq.n	800fc82 <__ssvfscanf_r+0xbb2>
 800fc7e:	f7ff faf6 	bl	800f26e <__ssvfscanf_r+0x19e>
 800fc82:	e7c2      	b.n	800fc0a <__ssvfscanf_r+0xb3a>
 800fc84:	238c      	movs	r3, #140	; 0x8c
 800fc86:	2248      	movs	r2, #72	; 0x48
 800fc88:	005b      	lsls	r3, r3, #1
 800fc8a:	189b      	adds	r3, r3, r2
 800fc8c:	3e01      	subs	r6, #1
 800fc8e:	19db      	adds	r3, r3, r7
 800fc90:	5cf1      	ldrb	r1, [r6, r3]
 800fc92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fc94:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fc96:	f002 f973 	bl	8011f80 <_sungetc_r>
 800fc9a:	e7b4      	b.n	800fc06 <__ssvfscanf_r+0xb36>
 800fc9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc9e:	199b      	adds	r3, r3, r6
 800fca0:	63bb      	str	r3, [r7, #56]	; 0x38
 800fca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fca4:	2b03      	cmp	r3, #3
 800fca6:	d102      	bne.n	800fcae <__ssvfscanf_r+0xbde>
 800fca8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fcaa:	2b04      	cmp	r3, #4
 800fcac:	d002      	beq.n	800fcb4 <__ssvfscanf_r+0xbe4>
 800fcae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcb0:	3b01      	subs	r3, #1
 800fcb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fcb4:	69fb      	ldr	r3, [r7, #28]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d1d2      	bne.n	800fc60 <__ssvfscanf_r+0xb90>
 800fcba:	3404      	adds	r4, #4
 800fcbc:	2d00      	cmp	r5, #0
 800fcbe:	d016      	beq.n	800fcee <__ssvfscanf_r+0xc1e>
 800fcc0:	69fa      	ldr	r2, [r7, #28]
 800fcc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcc4:	623a      	str	r2, [r7, #32]
 800fcc6:	693a      	ldr	r2, [r7, #16]
 800fcc8:	1ae6      	subs	r6, r4, r3
 800fcca:	10b3      	asrs	r3, r6, #2
 800fccc:	4293      	cmp	r3, r2
 800fcce:	d3c7      	bcc.n	800fc60 <__ssvfscanf_r+0xb90>
 800fcd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fcd2:	00d1      	lsls	r1, r2, #3
 800fcd4:	f001 fcf6 	bl	80116c4 <realloc>
 800fcd8:	6338      	str	r0, [r7, #48]	; 0x30
 800fcda:	2800      	cmp	r0, #0
 800fcdc:	d101      	bne.n	800fce2 <__ssvfscanf_r+0xc12>
 800fcde:	f7ff fbbf 	bl	800f460 <__ssvfscanf_r+0x390>
 800fce2:	693b      	ldr	r3, [r7, #16]
 800fce4:	1984      	adds	r4, r0, r6
 800fce6:	005b      	lsls	r3, r3, #1
 800fce8:	6028      	str	r0, [r5, #0]
 800fcea:	613b      	str	r3, [r7, #16]
 800fcec:	e7b8      	b.n	800fc60 <__ssvfscanf_r+0xb90>
 800fcee:	623d      	str	r5, [r7, #32]
 800fcf0:	e7b6      	b.n	800fc60 <__ssvfscanf_r+0xb90>
 800fcf2:	46c0      	nop			; (mov r8, r8)
 800fcf4:	0000fff6 	.word	0x0000fff6
 800fcf8:	08014f71 	.word	0x08014f71
 800fcfc:	69fb      	ldr	r3, [r7, #28]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d01c      	beq.n	800fd3c <__ssvfscanf_r+0xc6c>
 800fd02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd04:	49bf      	ldr	r1, [pc, #764]	; (8010004 <__ssvfscanf_r+0xf34>)
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	781a      	ldrb	r2, [r3, #0]
 800fd0a:	5c8a      	ldrb	r2, [r1, r2]
 800fd0c:	2108      	movs	r1, #8
 800fd0e:	420a      	tst	r2, r1
 800fd10:	d000      	beq.n	800fd14 <__ssvfscanf_r+0xc44>
 800fd12:	e4a1      	b.n	800f658 <__ssvfscanf_r+0x588>
 800fd14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fd16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fd18:	6852      	ldr	r2, [r2, #4]
 800fd1a:	3301      	adds	r3, #1
 800fd1c:	600b      	str	r3, [r1, #0]
 800fd1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd20:	3a01      	subs	r2, #1
 800fd22:	3401      	adds	r4, #1
 800fd24:	604a      	str	r2, [r1, #4]
 800fd26:	429c      	cmp	r4, r3
 800fd28:	d100      	bne.n	800fd2c <__ssvfscanf_r+0xc5c>
 800fd2a:	e495      	b.n	800f658 <__ssvfscanf_r+0x588>
 800fd2c:	2a00      	cmp	r2, #0
 800fd2e:	dce8      	bgt.n	800fd02 <__ssvfscanf_r+0xc32>
 800fd30:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fd32:	f002 f961 	bl	8011ff8 <__ssrefill_r>
 800fd36:	2800      	cmp	r0, #0
 800fd38:	d0e3      	beq.n	800fd02 <__ssvfscanf_r+0xc32>
 800fd3a:	e48d      	b.n	800f658 <__ssvfscanf_r+0x588>
 800fd3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd3e:	0032      	movs	r2, r6
 800fd40:	cb10      	ldmia	r3!, {r4}
 800fd42:	61fb      	str	r3, [r7, #28]
 800fd44:	2380      	movs	r3, #128	; 0x80
 800fd46:	401a      	ands	r2, r3
 800fd48:	421e      	tst	r6, r3
 800fd4a:	d039      	beq.n	800fdc0 <__ssvfscanf_r+0xcf0>
 800fd4c:	2c00      	cmp	r4, #0
 800fd4e:	d101      	bne.n	800fd54 <__ssvfscanf_r+0xc84>
 800fd50:	f7ff fabb 	bl	800f2ca <__ssvfscanf_r+0x1fa>
 800fd54:	2020      	movs	r0, #32
 800fd56:	f7fb faed 	bl	800b334 <malloc>
 800fd5a:	6338      	str	r0, [r7, #48]	; 0x30
 800fd5c:	2800      	cmp	r0, #0
 800fd5e:	d101      	bne.n	800fd64 <__ssvfscanf_r+0xc94>
 800fd60:	f7ff fa8c 	bl	800f27c <__ssvfscanf_r+0x1ac>
 800fd64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd66:	6020      	str	r0, [r4, #0]
 800fd68:	88de      	ldrh	r6, [r3, #6]
 800fd6a:	889d      	ldrh	r5, [r3, #4]
 800fd6c:	6818      	ldr	r0, [r3, #0]
 800fd6e:	42ae      	cmp	r6, r5
 800fd70:	d310      	bcc.n	800fd94 <__ssvfscanf_r+0xcc4>
 800fd72:	4ba5      	ldr	r3, [pc, #660]	; (8010008 <__ssvfscanf_r+0xf38>)
 800fd74:	429d      	cmp	r5, r3
 800fd76:	d901      	bls.n	800fd7c <__ssvfscanf_r+0xcac>
 800fd78:	f7ff fb7b 	bl	800f472 <__ssvfscanf_r+0x3a2>
 800fd7c:	3508      	adds	r5, #8
 800fd7e:	b2ad      	uxth	r5, r5
 800fd80:	00a9      	lsls	r1, r5, #2
 800fd82:	f001 fc9f 	bl	80116c4 <realloc>
 800fd86:	2800      	cmp	r0, #0
 800fd88:	d101      	bne.n	800fd8e <__ssvfscanf_r+0xcbe>
 800fd8a:	f7ff fb72 	bl	800f472 <__ssvfscanf_r+0x3a2>
 800fd8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd90:	6018      	str	r0, [r3, #0]
 800fd92:	809d      	strh	r5, [r3, #4]
 800fd94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd96:	1c72      	adds	r2, r6, #1
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	00b6      	lsls	r6, r6, #2
 800fd9c:	50f4      	str	r4, [r6, r3]
 800fd9e:	2320      	movs	r3, #32
 800fda0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fda2:	0026      	movs	r6, r4
 800fda4:	80ca      	strh	r2, [r1, #6]
 800fda6:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800fda8:	633b      	str	r3, [r7, #48]	; 0x30
 800fdaa:	0025      	movs	r5, r4
 800fdac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fdae:	4995      	ldr	r1, [pc, #596]	; (8010004 <__ssvfscanf_r+0xf34>)
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	781a      	ldrb	r2, [r3, #0]
 800fdb4:	5c8a      	ldrb	r2, [r1, r2]
 800fdb6:	2108      	movs	r1, #8
 800fdb8:	420a      	tst	r2, r1
 800fdba:	d004      	beq.n	800fdc6 <__ssvfscanf_r+0xcf6>
 800fdbc:	623c      	str	r4, [r7, #32]
 800fdbe:	e031      	b.n	800fe24 <__ssvfscanf_r+0xd54>
 800fdc0:	0016      	movs	r6, r2
 800fdc2:	633a      	str	r2, [r7, #48]	; 0x30
 800fdc4:	e7f1      	b.n	800fdaa <__ssvfscanf_r+0xcda>
 800fdc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fdc8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fdca:	6852      	ldr	r2, [r2, #4]
 800fdcc:	3a01      	subs	r2, #1
 800fdce:	604a      	str	r2, [r1, #4]
 800fdd0:	1c5a      	adds	r2, r3, #1
 800fdd2:	600a      	str	r2, [r1, #0]
 800fdd4:	781b      	ldrb	r3, [r3, #0]
 800fdd6:	1c62      	adds	r2, r4, #1
 800fdd8:	623a      	str	r2, [r7, #32]
 800fdda:	7023      	strb	r3, [r4, #0]
 800fddc:	2e00      	cmp	r6, #0
 800fdde:	d010      	beq.n	800fe02 <__ssvfscanf_r+0xd32>
 800fde0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fde2:	1b54      	subs	r4, r2, r5
 800fde4:	429c      	cmp	r4, r3
 800fde6:	d30c      	bcc.n	800fe02 <__ssvfscanf_r+0xd32>
 800fde8:	005b      	lsls	r3, r3, #1
 800fdea:	0028      	movs	r0, r5
 800fdec:	0019      	movs	r1, r3
 800fdee:	633b      	str	r3, [r7, #48]	; 0x30
 800fdf0:	f001 fc68 	bl	80116c4 <realloc>
 800fdf4:	1e05      	subs	r5, r0, #0
 800fdf6:	d101      	bne.n	800fdfc <__ssvfscanf_r+0xd2c>
 800fdf8:	f7ff fa40 	bl	800f27c <__ssvfscanf_r+0x1ac>
 800fdfc:	1903      	adds	r3, r0, r4
 800fdfe:	623b      	str	r3, [r7, #32]
 800fe00:	6030      	str	r0, [r6, #0]
 800fe02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe04:	3b01      	subs	r3, #1
 800fe06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d00b      	beq.n	800fe24 <__ssvfscanf_r+0xd54>
 800fe0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe0e:	685b      	ldr	r3, [r3, #4]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	dd01      	ble.n	800fe18 <__ssvfscanf_r+0xd48>
 800fe14:	6a3c      	ldr	r4, [r7, #32]
 800fe16:	e7c9      	b.n	800fdac <__ssvfscanf_r+0xcdc>
 800fe18:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fe1a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fe1c:	f002 f8ec 	bl	8011ff8 <__ssrefill_r>
 800fe20:	2800      	cmp	r0, #0
 800fe22:	d0f7      	beq.n	800fe14 <__ssvfscanf_r+0xd44>
 800fe24:	2300      	movs	r3, #0
 800fe26:	6a3a      	ldr	r2, [r7, #32]
 800fe28:	7013      	strb	r3, [r2, #0]
 800fe2a:	1b55      	subs	r5, r2, r5
 800fe2c:	2e00      	cmp	r6, #0
 800fe2e:	d009      	beq.n	800fe44 <__ssvfscanf_r+0xd74>
 800fe30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe32:	1c69      	adds	r1, r5, #1
 800fe34:	428b      	cmp	r3, r1
 800fe36:	d905      	bls.n	800fe44 <__ssvfscanf_r+0xd74>
 800fe38:	6830      	ldr	r0, [r6, #0]
 800fe3a:	f001 fc43 	bl	80116c4 <realloc>
 800fe3e:	2800      	cmp	r0, #0
 800fe40:	d000      	beq.n	800fe44 <__ssvfscanf_r+0xd74>
 800fe42:	6030      	str	r0, [r6, #0]
 800fe44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe46:	195b      	adds	r3, r3, r5
 800fe48:	63bb      	str	r3, [r7, #56]	; 0x38
 800fe4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe4c:	3301      	adds	r3, #1
 800fe4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe50:	e63c      	b.n	800facc <__ssvfscanf_r+0x9fc>
 800fe52:	22ae      	movs	r2, #174	; 0xae
 800fe54:	2100      	movs	r1, #0
 800fe56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe58:	0052      	lsls	r2, r2, #1
 800fe5a:	3b01      	subs	r3, #1
 800fe5c:	6239      	str	r1, [r7, #32]
 800fe5e:	4293      	cmp	r3, r2
 800fe60:	d906      	bls.n	800fe70 <__ssvfscanf_r+0xda0>
 800fe62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe64:	3b5e      	subs	r3, #94	; 0x5e
 800fe66:	3bff      	subs	r3, #255	; 0xff
 800fe68:	623b      	str	r3, [r7, #32]
 800fe6a:	235e      	movs	r3, #94	; 0x5e
 800fe6c:	33ff      	adds	r3, #255	; 0xff
 800fe6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe70:	24d8      	movs	r4, #216	; 0xd8
 800fe72:	2300      	movs	r3, #0
 800fe74:	2248      	movs	r2, #72	; 0x48
 800fe76:	0124      	lsls	r4, r4, #4
 800fe78:	4334      	orrs	r4, r6
 800fe7a:	2680      	movs	r6, #128	; 0x80
 800fe7c:	61fb      	str	r3, [r7, #28]
 800fe7e:	3319      	adds	r3, #25
 800fe80:	33ff      	adds	r3, #255	; 0xff
 800fe82:	189b      	adds	r3, r3, r2
 800fe84:	19dd      	adds	r5, r3, r7
 800fe86:	00b6      	lsls	r6, r6, #2
 800fe88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe8a:	681a      	ldr	r2, [r3, #0]
 800fe8c:	7813      	ldrb	r3, [r2, #0]
 800fe8e:	2b39      	cmp	r3, #57	; 0x39
 800fe90:	d80f      	bhi.n	800feb2 <__ssvfscanf_r+0xde2>
 800fe92:	2b2a      	cmp	r3, #42	; 0x2a
 800fe94:	d91b      	bls.n	800fece <__ssvfscanf_r+0xdfe>
 800fe96:	0018      	movs	r0, r3
 800fe98:	382b      	subs	r0, #43	; 0x2b
 800fe9a:	280e      	cmp	r0, #14
 800fe9c:	d817      	bhi.n	800fece <__ssvfscanf_r+0xdfe>
 800fe9e:	f7f0 f939 	bl	8000114 <__gnu_thumb1_case_uqi>
 800fea2:	168f      	.short	0x168f
 800fea4:	5416168f 	.word	0x5416168f
 800fea8:	80808080 	.word	0x80808080
 800feac:	87808080 	.word	0x87808080
 800feb0:	87          	.byte	0x87
 800feb1:	00          	.byte	0x00
 800feb2:	2b66      	cmp	r3, #102	; 0x66
 800feb4:	d83a      	bhi.n	800ff2c <__ssvfscanf_r+0xe5c>
 800feb6:	2b60      	cmp	r3, #96	; 0x60
 800feb8:	d803      	bhi.n	800fec2 <__ssvfscanf_r+0xdf2>
 800feba:	2b46      	cmp	r3, #70	; 0x46
 800febc:	d805      	bhi.n	800feca <__ssvfscanf_r+0xdfa>
 800febe:	2b40      	cmp	r3, #64	; 0x40
 800fec0:	d905      	bls.n	800fece <__ssvfscanf_r+0xdfe>
 800fec2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fec4:	290a      	cmp	r1, #10
 800fec6:	dc71      	bgt.n	800ffac <__ssvfscanf_r+0xedc>
 800fec8:	e001      	b.n	800fece <__ssvfscanf_r+0xdfe>
 800feca:	2b58      	cmp	r3, #88	; 0x58
 800fecc:	d030      	beq.n	800ff30 <__ssvfscanf_r+0xe60>
 800fece:	05e3      	lsls	r3, r4, #23
 800fed0:	d515      	bpl.n	800fefe <__ssvfscanf_r+0xe2e>
 800fed2:	238c      	movs	r3, #140	; 0x8c
 800fed4:	2248      	movs	r2, #72	; 0x48
 800fed6:	005b      	lsls	r3, r3, #1
 800fed8:	189b      	adds	r3, r3, r2
 800feda:	19db      	adds	r3, r3, r7
 800fedc:	429d      	cmp	r5, r3
 800fede:	d905      	bls.n	800feec <__ssvfscanf_r+0xe1c>
 800fee0:	3d01      	subs	r5, #1
 800fee2:	7829      	ldrb	r1, [r5, #0]
 800fee4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fee6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fee8:	f002 f84a 	bl	8011f80 <_sungetc_r>
 800feec:	238c      	movs	r3, #140	; 0x8c
 800feee:	2248      	movs	r2, #72	; 0x48
 800fef0:	005b      	lsls	r3, r3, #1
 800fef2:	189b      	adds	r3, r3, r2
 800fef4:	19db      	adds	r3, r3, r7
 800fef6:	429d      	cmp	r5, r3
 800fef8:	d101      	bne.n	800fefe <__ssvfscanf_r+0xe2e>
 800fefa:	f7ff f9e6 	bl	800f2ca <__ssvfscanf_r+0x1fa>
 800fefe:	2310      	movs	r3, #16
 800ff00:	0022      	movs	r2, r4
 800ff02:	401a      	ands	r2, r3
 800ff04:	421c      	tst	r4, r3
 800ff06:	d171      	bne.n	800ffec <__ssvfscanf_r+0xf1c>
 800ff08:	218c      	movs	r1, #140	; 0x8c
 800ff0a:	2048      	movs	r0, #72	; 0x48
 800ff0c:	0049      	lsls	r1, r1, #1
 800ff0e:	1809      	adds	r1, r1, r0
 800ff10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff12:	697e      	ldr	r6, [r7, #20]
 800ff14:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ff16:	19c9      	adds	r1, r1, r7
 800ff18:	702a      	strb	r2, [r5, #0]
 800ff1a:	47b0      	blx	r6
 800ff1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff1e:	1d1e      	adds	r6, r3, #4
 800ff20:	06a3      	lsls	r3, r4, #26
 800ff22:	d559      	bpl.n	800ffd8 <__ssvfscanf_r+0xf08>
 800ff24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	6018      	str	r0, [r3, #0]
 800ff2a:	e05b      	b.n	800ffe4 <__ssvfscanf_r+0xf14>
 800ff2c:	2b78      	cmp	r3, #120	; 0x78
 800ff2e:	d1ce      	bne.n	800fece <__ssvfscanf_r+0xdfe>
 800ff30:	21c0      	movs	r1, #192	; 0xc0
 800ff32:	00c9      	lsls	r1, r1, #3
 800ff34:	4021      	ands	r1, r4
 800ff36:	42b1      	cmp	r1, r6
 800ff38:	d1c9      	bne.n	800fece <__ssvfscanf_r+0xdfe>
 800ff3a:	4934      	ldr	r1, [pc, #208]	; (801000c <__ssvfscanf_r+0xf3c>)
 800ff3c:	4021      	ands	r1, r4
 800ff3e:	24a0      	movs	r4, #160	; 0xa0
 800ff40:	00e4      	lsls	r4, r4, #3
 800ff42:	430c      	orrs	r4, r1
 800ff44:	2110      	movs	r1, #16
 800ff46:	6279      	str	r1, [r7, #36]	; 0x24
 800ff48:	e00b      	b.n	800ff62 <__ssvfscanf_r+0xe92>
 800ff4a:	0521      	lsls	r1, r4, #20
 800ff4c:	d509      	bpl.n	800ff62 <__ssvfscanf_r+0xe92>
 800ff4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ff50:	2900      	cmp	r1, #0
 800ff52:	d102      	bne.n	800ff5a <__ssvfscanf_r+0xe8a>
 800ff54:	3108      	adds	r1, #8
 800ff56:	4334      	orrs	r4, r6
 800ff58:	6279      	str	r1, [r7, #36]	; 0x24
 800ff5a:	0561      	lsls	r1, r4, #21
 800ff5c:	d504      	bpl.n	800ff68 <__ssvfscanf_r+0xe98>
 800ff5e:	492c      	ldr	r1, [pc, #176]	; (8010010 <__ssvfscanf_r+0xf40>)
 800ff60:	400c      	ands	r4, r1
 800ff62:	702b      	strb	r3, [r5, #0]
 800ff64:	3501      	adds	r5, #1
 800ff66:	e00c      	b.n	800ff82 <__ssvfscanf_r+0xeb2>
 800ff68:	4b2a      	ldr	r3, [pc, #168]	; (8010014 <__ssvfscanf_r+0xf44>)
 800ff6a:	401c      	ands	r4, r3
 800ff6c:	6a3b      	ldr	r3, [r7, #32]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d004      	beq.n	800ff7c <__ssvfscanf_r+0xeac>
 800ff72:	3b01      	subs	r3, #1
 800ff74:	623b      	str	r3, [r7, #32]
 800ff76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff78:	3301      	adds	r3, #1
 800ff7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ff7c:	69fb      	ldr	r3, [r7, #28]
 800ff7e:	3301      	adds	r3, #1
 800ff80:	61fb      	str	r3, [r7, #28]
 800ff82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff84:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ff86:	685b      	ldr	r3, [r3, #4]
 800ff88:	3b01      	subs	r3, #1
 800ff8a:	604b      	str	r3, [r1, #4]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	dd1c      	ble.n	800ffca <__ssvfscanf_r+0xefa>
 800ff90:	3201      	adds	r2, #1
 800ff92:	600a      	str	r2, [r1, #0]
 800ff94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff96:	3b01      	subs	r3, #1
 800ff98:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d000      	beq.n	800ffa0 <__ssvfscanf_r+0xed0>
 800ff9e:	e773      	b.n	800fe88 <__ssvfscanf_r+0xdb8>
 800ffa0:	e795      	b.n	800fece <__ssvfscanf_r+0xdfe>
 800ffa2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ffa4:	491c      	ldr	r1, [pc, #112]	; (8010018 <__ssvfscanf_r+0xf48>)
 800ffa6:	0040      	lsls	r0, r0, #1
 800ffa8:	5e41      	ldrsh	r1, [r0, r1]
 800ffaa:	6279      	str	r1, [r7, #36]	; 0x24
 800ffac:	491b      	ldr	r1, [pc, #108]	; (801001c <__ssvfscanf_r+0xf4c>)
 800ffae:	e7d7      	b.n	800ff60 <__ssvfscanf_r+0xe90>
 800ffb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ffb2:	4919      	ldr	r1, [pc, #100]	; (8010018 <__ssvfscanf_r+0xf48>)
 800ffb4:	0040      	lsls	r0, r0, #1
 800ffb6:	5e41      	ldrsh	r1, [r0, r1]
 800ffb8:	6279      	str	r1, [r7, #36]	; 0x24
 800ffba:	2908      	cmp	r1, #8
 800ffbc:	dcf6      	bgt.n	800ffac <__ssvfscanf_r+0xedc>
 800ffbe:	e786      	b.n	800fece <__ssvfscanf_r+0xdfe>
 800ffc0:	2180      	movs	r1, #128	; 0x80
 800ffc2:	420c      	tst	r4, r1
 800ffc4:	d083      	beq.n	800fece <__ssvfscanf_r+0xdfe>
 800ffc6:	438c      	bics	r4, r1
 800ffc8:	e7cb      	b.n	800ff62 <__ssvfscanf_r+0xe92>
 800ffca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ffcc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ffce:	f002 f813 	bl	8011ff8 <__ssrefill_r>
 800ffd2:	2800      	cmp	r0, #0
 800ffd4:	d0de      	beq.n	800ff94 <__ssvfscanf_r+0xec4>
 800ffd6:	e77a      	b.n	800fece <__ssvfscanf_r+0xdfe>
 800ffd8:	2308      	movs	r3, #8
 800ffda:	421c      	tst	r4, r3
 800ffdc:	d020      	beq.n	8010020 <__ssvfscanf_r+0xf50>
 800ffde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	7018      	strb	r0, [r3, #0]
 800ffe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffe6:	633e      	str	r6, [r7, #48]	; 0x30
 800ffe8:	3301      	adds	r3, #1
 800ffea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ffec:	238c      	movs	r3, #140	; 0x8c
 800ffee:	2248      	movs	r2, #72	; 0x48
 800fff0:	005b      	lsls	r3, r3, #1
 800fff2:	189b      	adds	r3, r3, r2
 800fff4:	19db      	adds	r3, r3, r7
 800fff6:	1aed      	subs	r5, r5, r3
 800fff8:	69fb      	ldr	r3, [r7, #28]
 800fffa:	18ed      	adds	r5, r5, r3
 800fffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fffe:	195b      	adds	r3, r3, r5
 8010000:	f7ff f92d 	bl	800f25e <__ssvfscanf_r+0x18e>
 8010004:	08014f71 	.word	0x08014f71
 8010008:	0000fff6 	.word	0x0000fff6
 801000c:	fffffdff 	.word	0xfffffdff
 8010010:	fffffa7f 	.word	0xfffffa7f
 8010014:	fffffc7f 	.word	0xfffffc7f
 8010018:	0801529e 	.word	0x0801529e
 801001c:	fffff47f 	.word	0xfffff47f
 8010020:	0763      	lsls	r3, r4, #29
 8010022:	d503      	bpl.n	801002c <__ssvfscanf_r+0xf5c>
 8010024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	8018      	strh	r0, [r3, #0]
 801002a:	e7db      	b.n	800ffe4 <__ssvfscanf_r+0xf14>
 801002c:	2301      	movs	r3, #1
 801002e:	0022      	movs	r2, r4
 8010030:	401a      	ands	r2, r3
 8010032:	421c      	tst	r4, r3
 8010034:	d000      	beq.n	8010038 <__ssvfscanf_r+0xf68>
 8010036:	e775      	b.n	800ff24 <__ssvfscanf_r+0xe54>
 8010038:	07a4      	lsls	r4, r4, #30
 801003a:	d400      	bmi.n	801003e <__ssvfscanf_r+0xf6e>
 801003c:	e772      	b.n	800ff24 <__ssvfscanf_r+0xe54>
 801003e:	4ba8      	ldr	r3, [pc, #672]	; (80102e0 <__ssvfscanf_r+0x1210>)
 8010040:	6979      	ldr	r1, [r7, #20]
 8010042:	4299      	cmp	r1, r3
 8010044:	d10c      	bne.n	8010060 <__ssvfscanf_r+0xf90>
 8010046:	218c      	movs	r1, #140	; 0x8c
 8010048:	2048      	movs	r0, #72	; 0x48
 801004a:	0049      	lsls	r1, r1, #1
 801004c:	1809      	adds	r1, r1, r0
 801004e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010050:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010052:	19c9      	adds	r1, r1, r7
 8010054:	f001 fecc 	bl	8011df0 <_strtoull_r>
 8010058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	c303      	stmia	r3!, {r0, r1}
 801005e:	e7c1      	b.n	800ffe4 <__ssvfscanf_r+0xf14>
 8010060:	218c      	movs	r1, #140	; 0x8c
 8010062:	2048      	movs	r0, #72	; 0x48
 8010064:	0049      	lsls	r1, r1, #1
 8010066:	1809      	adds	r1, r1, r0
 8010068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801006a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801006c:	19c9      	adds	r1, r1, r7
 801006e:	f001 fe0d 	bl	8011c8c <_strtoll_r>
 8010072:	e7f1      	b.n	8010058 <__ssvfscanf_r+0xf88>
 8010074:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010076:	f000 fb9f 	bl	80107b8 <_localeconv_r>
 801007a:	22ae      	movs	r2, #174	; 0xae
 801007c:	2100      	movs	r1, #0
 801007e:	6803      	ldr	r3, [r0, #0]
 8010080:	0052      	lsls	r2, r2, #1
 8010082:	603b      	str	r3, [r7, #0]
 8010084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010086:	60f9      	str	r1, [r7, #12]
 8010088:	3b01      	subs	r3, #1
 801008a:	4293      	cmp	r3, r2
 801008c:	d906      	bls.n	801009c <__ssvfscanf_r+0xfcc>
 801008e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010090:	3b5e      	subs	r3, #94	; 0x5e
 8010092:	3bff      	subs	r3, #255	; 0xff
 8010094:	60fb      	str	r3, [r7, #12]
 8010096:	235e      	movs	r3, #94	; 0x5e
 8010098:	33ff      	adds	r3, #255	; 0xff
 801009a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801009c:	23f0      	movs	r3, #240	; 0xf0
 801009e:	00db      	lsls	r3, r3, #3
 80100a0:	431e      	orrs	r6, r3
 80100a2:	238c      	movs	r3, #140	; 0x8c
 80100a4:	2248      	movs	r2, #72	; 0x48
 80100a6:	2400      	movs	r4, #0
 80100a8:	005b      	lsls	r3, r3, #1
 80100aa:	189b      	adds	r3, r3, r2
 80100ac:	623c      	str	r4, [r7, #32]
 80100ae:	607c      	str	r4, [r7, #4]
 80100b0:	60bc      	str	r4, [r7, #8]
 80100b2:	61fc      	str	r4, [r7, #28]
 80100b4:	613c      	str	r4, [r7, #16]
 80100b6:	19dd      	adds	r5, r3, r7
 80100b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	781a      	ldrb	r2, [r3, #0]
 80100be:	0010      	movs	r0, r2
 80100c0:	382b      	subs	r0, #43	; 0x2b
 80100c2:	284e      	cmp	r0, #78	; 0x4e
 80100c4:	d900      	bls.n	80100c8 <__ssvfscanf_r+0xff8>
 80100c6:	e133      	b.n	8010330 <__ssvfscanf_r+0x1260>
 80100c8:	f7f0 f82e 	bl	8000128 <__gnu_thumb1_case_uhi>
 80100cc:	0132009b 	.word	0x0132009b
 80100d0:	0132009b 	.word	0x0132009b
 80100d4:	004f0132 	.word	0x004f0132
 80100d8:	00720072 	.word	0x00720072
 80100dc:	00720072 	.word	0x00720072
 80100e0:	00720072 	.word	0x00720072
 80100e4:	00720072 	.word	0x00720072
 80100e8:	01320072 	.word	0x01320072
 80100ec:	01320132 	.word	0x01320132
 80100f0:	01320132 	.word	0x01320132
 80100f4:	01320132 	.word	0x01320132
 80100f8:	007b00bc 	.word	0x007b00bc
 80100fc:	007b007b 	.word	0x007b007b
 8010100:	00f7012f 	.word	0x00f7012f
 8010104:	01320132 	.word	0x01320132
 8010108:	013200e3 	.word	0x013200e3
 801010c:	01320132 	.word	0x01320132
 8010110:	00a00132 	.word	0x00a00132
 8010114:	01120132 	.word	0x01120132
 8010118:	01320132 	.word	0x01320132
 801011c:	01010132 	.word	0x01010132
 8010120:	01320132 	.word	0x01320132
 8010124:	00820132 	.word	0x00820132
 8010128:	01320105 	.word	0x01320105
 801012c:	01320132 	.word	0x01320132
 8010130:	01320132 	.word	0x01320132
 8010134:	01320132 	.word	0x01320132
 8010138:	007b00bc 	.word	0x007b00bc
 801013c:	007b007b 	.word	0x007b007b
 8010140:	00f7012f 	.word	0x00f7012f
 8010144:	01320132 	.word	0x01320132
 8010148:	013200e3 	.word	0x013200e3
 801014c:	01320132 	.word	0x01320132
 8010150:	00a00132 	.word	0x00a00132
 8010154:	01120132 	.word	0x01120132
 8010158:	01320132 	.word	0x01320132
 801015c:	01010132 	.word	0x01010132
 8010160:	01320132 	.word	0x01320132
 8010164:	00820132 	.word	0x00820132
 8010168:	0105      	.short	0x0105
 801016a:	05f1      	lsls	r1, r6, #23
 801016c:	d520      	bpl.n	80101b0 <__ssvfscanf_r+0x10e0>
 801016e:	2280      	movs	r2, #128	; 0x80
 8010170:	4396      	bics	r6, r2
 8010172:	69fa      	ldr	r2, [r7, #28]
 8010174:	3201      	adds	r2, #1
 8010176:	61fa      	str	r2, [r7, #28]
 8010178:	68fa      	ldr	r2, [r7, #12]
 801017a:	2a00      	cmp	r2, #0
 801017c:	d004      	beq.n	8010188 <__ssvfscanf_r+0x10b8>
 801017e:	3a01      	subs	r2, #1
 8010180:	60fa      	str	r2, [r7, #12]
 8010182:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010184:	3201      	adds	r2, #1
 8010186:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010188:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801018a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801018c:	3a01      	subs	r2, #1
 801018e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010190:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010192:	3201      	adds	r2, #1
 8010194:	63ba      	str	r2, [r7, #56]	; 0x38
 8010196:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010198:	6852      	ldr	r2, [r2, #4]
 801019a:	3a01      	subs	r2, #1
 801019c:	604a      	str	r2, [r1, #4]
 801019e:	2a00      	cmp	r2, #0
 80101a0:	dc00      	bgt.n	80101a4 <__ssvfscanf_r+0x10d4>
 80101a2:	e0d6      	b.n	8010352 <__ssvfscanf_r+0x1282>
 80101a4:	3301      	adds	r3, #1
 80101a6:	600b      	str	r3, [r1, #0]
 80101a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d184      	bne.n	80100b8 <__ssvfscanf_r+0xfe8>
 80101ae:	e057      	b.n	8010260 <__ssvfscanf_r+0x1190>
 80101b0:	6a39      	ldr	r1, [r7, #32]
 80101b2:	1909      	adds	r1, r1, r4
 80101b4:	2900      	cmp	r1, #0
 80101b6:	d153      	bne.n	8010260 <__ssvfscanf_r+0x1190>
 80101b8:	494a      	ldr	r1, [pc, #296]	; (80102e4 <__ssvfscanf_r+0x1214>)
 80101ba:	400e      	ands	r6, r1
 80101bc:	702a      	strb	r2, [r5, #0]
 80101be:	3501      	adds	r5, #1
 80101c0:	e7e2      	b.n	8010188 <__ssvfscanf_r+0x10b8>
 80101c2:	0531      	lsls	r1, r6, #20
 80101c4:	d54c      	bpl.n	8010260 <__ssvfscanf_r+0x1190>
 80101c6:	6a39      	ldr	r1, [r7, #32]
 80101c8:	1909      	adds	r1, r1, r4
 80101ca:	2900      	cmp	r1, #0
 80101cc:	d040      	beq.n	8010250 <__ssvfscanf_r+0x1180>
 80101ce:	e047      	b.n	8010260 <__ssvfscanf_r+0x1190>
 80101d0:	2198      	movs	r1, #152	; 0x98
 80101d2:	2080      	movs	r0, #128	; 0x80
 80101d4:	0109      	lsls	r1, r1, #4
 80101d6:	4031      	ands	r1, r6
 80101d8:	0040      	lsls	r0, r0, #1
 80101da:	4281      	cmp	r1, r0
 80101dc:	d140      	bne.n	8010260 <__ssvfscanf_r+0x1190>
 80101de:	69f9      	ldr	r1, [r7, #28]
 80101e0:	2901      	cmp	r1, #1
 80101e2:	d13d      	bne.n	8010260 <__ssvfscanf_r+0x1190>
 80101e4:	2080      	movs	r0, #128	; 0x80
 80101e6:	4940      	ldr	r1, [pc, #256]	; (80102e8 <__ssvfscanf_r+0x1218>)
 80101e8:	0100      	lsls	r0, r0, #4
 80101ea:	400e      	ands	r6, r1
 80101ec:	3132      	adds	r1, #50	; 0x32
 80101ee:	31ff      	adds	r1, #255	; 0xff
 80101f0:	7029      	strb	r1, [r5, #0]
 80101f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80101f4:	4306      	orrs	r6, r0
 80101f6:	3901      	subs	r1, #1
 80101f8:	63f9      	str	r1, [r7, #60]	; 0x3c
 80101fa:	3501      	adds	r5, #1
 80101fc:	2100      	movs	r1, #0
 80101fe:	61f9      	str	r1, [r7, #28]
 8010200:	e7dc      	b.n	80101bc <__ssvfscanf_r+0x10ec>
 8010202:	2180      	movs	r1, #128	; 0x80
 8010204:	420e      	tst	r6, r1
 8010206:	d02b      	beq.n	8010260 <__ssvfscanf_r+0x1190>
 8010208:	438e      	bics	r6, r1
 801020a:	e7d7      	b.n	80101bc <__ssvfscanf_r+0x10ec>
 801020c:	6a39      	ldr	r1, [r7, #32]
 801020e:	2900      	cmp	r1, #0
 8010210:	d10d      	bne.n	801022e <__ssvfscanf_r+0x115e>
 8010212:	69f9      	ldr	r1, [r7, #28]
 8010214:	2900      	cmp	r1, #0
 8010216:	d10e      	bne.n	8010236 <__ssvfscanf_r+0x1166>
 8010218:	21e0      	movs	r1, #224	; 0xe0
 801021a:	0030      	movs	r0, r6
 801021c:	00c9      	lsls	r1, r1, #3
 801021e:	4008      	ands	r0, r1
 8010220:	4288      	cmp	r0, r1
 8010222:	d108      	bne.n	8010236 <__ssvfscanf_r+0x1166>
 8010224:	4931      	ldr	r1, [pc, #196]	; (80102ec <__ssvfscanf_r+0x121c>)
 8010226:	400e      	ands	r6, r1
 8010228:	2101      	movs	r1, #1
 801022a:	6239      	str	r1, [r7, #32]
 801022c:	e7c6      	b.n	80101bc <__ssvfscanf_r+0x10ec>
 801022e:	6a39      	ldr	r1, [r7, #32]
 8010230:	2902      	cmp	r1, #2
 8010232:	d100      	bne.n	8010236 <__ssvfscanf_r+0x1166>
 8010234:	e089      	b.n	801034a <__ssvfscanf_r+0x127a>
 8010236:	2c01      	cmp	r4, #1
 8010238:	d001      	beq.n	801023e <__ssvfscanf_r+0x116e>
 801023a:	2c04      	cmp	r4, #4
 801023c:	d110      	bne.n	8010260 <__ssvfscanf_r+0x1190>
 801023e:	3401      	adds	r4, #1
 8010240:	b2e4      	uxtb	r4, r4
 8010242:	e7bb      	b.n	80101bc <__ssvfscanf_r+0x10ec>
 8010244:	0531      	lsls	r1, r6, #20
 8010246:	d508      	bpl.n	801025a <__ssvfscanf_r+0x118a>
 8010248:	6a39      	ldr	r1, [r7, #32]
 801024a:	1909      	adds	r1, r1, r4
 801024c:	2900      	cmp	r1, #0
 801024e:	d104      	bne.n	801025a <__ssvfscanf_r+0x118a>
 8010250:	4824      	ldr	r0, [pc, #144]	; (80102e4 <__ssvfscanf_r+0x1214>)
 8010252:	000c      	movs	r4, r1
 8010254:	4006      	ands	r6, r0
 8010256:	6239      	str	r1, [r7, #32]
 8010258:	e7b0      	b.n	80101bc <__ssvfscanf_r+0x10ec>
 801025a:	6a39      	ldr	r1, [r7, #32]
 801025c:	2901      	cmp	r1, #1
 801025e:	d076      	beq.n	801034e <__ssvfscanf_r+0x127e>
 8010260:	69fb      	ldr	r3, [r7, #28]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d001      	beq.n	801026a <__ssvfscanf_r+0x119a>
 8010266:	4b20      	ldr	r3, [pc, #128]	; (80102e8 <__ssvfscanf_r+0x1218>)
 8010268:	401e      	ands	r6, r3
 801026a:	6a3b      	ldr	r3, [r7, #32]
 801026c:	3b01      	subs	r3, #1
 801026e:	2b01      	cmp	r3, #1
 8010270:	d877      	bhi.n	8010362 <__ssvfscanf_r+0x1292>
 8010272:	238c      	movs	r3, #140	; 0x8c
 8010274:	2248      	movs	r2, #72	; 0x48
 8010276:	005b      	lsls	r3, r3, #1
 8010278:	189b      	adds	r3, r3, r2
 801027a:	19db      	adds	r3, r3, r7
 801027c:	429d      	cmp	r5, r3
 801027e:	d801      	bhi.n	8010284 <__ssvfscanf_r+0x11b4>
 8010280:	f7ff f823 	bl	800f2ca <__ssvfscanf_r+0x1fa>
 8010284:	3d01      	subs	r5, #1
 8010286:	7829      	ldrb	r1, [r5, #0]
 8010288:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801028a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801028c:	f001 fe78 	bl	8011f80 <_sungetc_r>
 8010290:	e7ef      	b.n	8010272 <__ssvfscanf_r+0x11a2>
 8010292:	2c00      	cmp	r4, #0
 8010294:	d10c      	bne.n	80102b0 <__ssvfscanf_r+0x11e0>
 8010296:	69f9      	ldr	r1, [r7, #28]
 8010298:	2900      	cmp	r1, #0
 801029a:	d1e4      	bne.n	8010266 <__ssvfscanf_r+0x1196>
 801029c:	21e0      	movs	r1, #224	; 0xe0
 801029e:	0030      	movs	r0, r6
 80102a0:	00c9      	lsls	r1, r1, #3
 80102a2:	4008      	ands	r0, r1
 80102a4:	4288      	cmp	r0, r1
 80102a6:	d1e0      	bne.n	801026a <__ssvfscanf_r+0x119a>
 80102a8:	4910      	ldr	r1, [pc, #64]	; (80102ec <__ssvfscanf_r+0x121c>)
 80102aa:	3401      	adds	r4, #1
 80102ac:	400e      	ands	r6, r1
 80102ae:	e785      	b.n	80101bc <__ssvfscanf_r+0x10ec>
 80102b0:	20fd      	movs	r0, #253	; 0xfd
 80102b2:	1ee1      	subs	r1, r4, #3
 80102b4:	4201      	tst	r1, r0
 80102b6:	d1d3      	bne.n	8010260 <__ssvfscanf_r+0x1190>
 80102b8:	e7c1      	b.n	801023e <__ssvfscanf_r+0x116e>
 80102ba:	0531      	lsls	r1, r6, #20
 80102bc:	d503      	bpl.n	80102c6 <__ssvfscanf_r+0x11f6>
 80102be:	6a39      	ldr	r1, [r7, #32]
 80102c0:	1909      	adds	r1, r1, r4
 80102c2:	2900      	cmp	r1, #0
 80102c4:	d0c4      	beq.n	8010250 <__ssvfscanf_r+0x1180>
 80102c6:	2c02      	cmp	r4, #2
 80102c8:	d1ca      	bne.n	8010260 <__ssvfscanf_r+0x1190>
 80102ca:	2403      	movs	r4, #3
 80102cc:	e776      	b.n	80101bc <__ssvfscanf_r+0x10ec>
 80102ce:	2c06      	cmp	r4, #6
 80102d0:	d1c6      	bne.n	8010260 <__ssvfscanf_r+0x1190>
 80102d2:	2407      	movs	r4, #7
 80102d4:	e772      	b.n	80101bc <__ssvfscanf_r+0x10ec>
 80102d6:	2c07      	cmp	r4, #7
 80102d8:	d1c2      	bne.n	8010260 <__ssvfscanf_r+0x1190>
 80102da:	2408      	movs	r4, #8
 80102dc:	e76e      	b.n	80101bc <__ssvfscanf_r+0x10ec>
 80102de:	46c0      	nop			; (mov r8, r8)
 80102e0:	08011b29 	.word	0x08011b29
 80102e4:	fffffe7f 	.word	0xfffffe7f
 80102e8:	fffffeff 	.word	0xfffffeff
 80102ec:	fffff87f 	.word	0xfffff87f
 80102f0:	0531      	lsls	r1, r6, #20
 80102f2:	d5b5      	bpl.n	8010260 <__ssvfscanf_r+0x1190>
 80102f4:	21a0      	movs	r1, #160	; 0xa0
 80102f6:	2080      	movs	r0, #128	; 0x80
 80102f8:	00c9      	lsls	r1, r1, #3
 80102fa:	00c0      	lsls	r0, r0, #3
 80102fc:	4031      	ands	r1, r6
 80102fe:	4281      	cmp	r1, r0
 8010300:	d004      	beq.n	801030c <__ssvfscanf_r+0x123c>
 8010302:	4206      	tst	r6, r0
 8010304:	d0ac      	beq.n	8010260 <__ssvfscanf_r+0x1190>
 8010306:	69f9      	ldr	r1, [r7, #28]
 8010308:	2900      	cmp	r1, #0
 801030a:	d0ae      	beq.n	801026a <__ssvfscanf_r+0x119a>
 801030c:	2180      	movs	r1, #128	; 0x80
 801030e:	0089      	lsls	r1, r1, #2
 8010310:	420e      	tst	r6, r1
 8010312:	d104      	bne.n	801031e <__ssvfscanf_r+0x124e>
 8010314:	69f9      	ldr	r1, [r7, #28]
 8010316:	6938      	ldr	r0, [r7, #16]
 8010318:	607d      	str	r5, [r7, #4]
 801031a:	1a09      	subs	r1, r1, r0
 801031c:	60b9      	str	r1, [r7, #8]
 801031e:	20c0      	movs	r0, #192	; 0xc0
 8010320:	4973      	ldr	r1, [pc, #460]	; (80104f0 <__ssvfscanf_r+0x1420>)
 8010322:	0040      	lsls	r0, r0, #1
 8010324:	400e      	ands	r6, r1
 8010326:	4306      	orrs	r6, r0
 8010328:	e768      	b.n	80101fc <__ssvfscanf_r+0x112c>
 801032a:	0531      	lsls	r1, r6, #20
 801032c:	d5e2      	bpl.n	80102f4 <__ssvfscanf_r+0x1224>
 801032e:	e74a      	b.n	80101c6 <__ssvfscanf_r+0x10f6>
 8010330:	6839      	ldr	r1, [r7, #0]
 8010332:	7809      	ldrb	r1, [r1, #0]
 8010334:	4291      	cmp	r1, r2
 8010336:	d193      	bne.n	8010260 <__ssvfscanf_r+0x1190>
 8010338:	2180      	movs	r1, #128	; 0x80
 801033a:	0089      	lsls	r1, r1, #2
 801033c:	420e      	tst	r6, r1
 801033e:	d08f      	beq.n	8010260 <__ssvfscanf_r+0x1190>
 8010340:	496c      	ldr	r1, [pc, #432]	; (80104f4 <__ssvfscanf_r+0x1424>)
 8010342:	400e      	ands	r6, r1
 8010344:	69f9      	ldr	r1, [r7, #28]
 8010346:	6139      	str	r1, [r7, #16]
 8010348:	e738      	b.n	80101bc <__ssvfscanf_r+0x10ec>
 801034a:	2103      	movs	r1, #3
 801034c:	e76d      	b.n	801022a <__ssvfscanf_r+0x115a>
 801034e:	2102      	movs	r1, #2
 8010350:	e76b      	b.n	801022a <__ssvfscanf_r+0x115a>
 8010352:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010354:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010356:	f001 fe4f 	bl	8011ff8 <__ssrefill_r>
 801035a:	2800      	cmp	r0, #0
 801035c:	d100      	bne.n	8010360 <__ssvfscanf_r+0x1290>
 801035e:	e723      	b.n	80101a8 <__ssvfscanf_r+0x10d8>
 8010360:	e77e      	b.n	8010260 <__ssvfscanf_r+0x1190>
 8010362:	1e63      	subs	r3, r4, #1
 8010364:	2b06      	cmp	r3, #6
 8010366:	d825      	bhi.n	80103b4 <__ssvfscanf_r+0x12e4>
 8010368:	2c02      	cmp	r4, #2
 801036a:	d837      	bhi.n	80103dc <__ssvfscanf_r+0x130c>
 801036c:	238c      	movs	r3, #140	; 0x8c
 801036e:	2248      	movs	r2, #72	; 0x48
 8010370:	005b      	lsls	r3, r3, #1
 8010372:	189b      	adds	r3, r3, r2
 8010374:	19db      	adds	r3, r3, r7
 8010376:	429d      	cmp	r5, r3
 8010378:	d801      	bhi.n	801037e <__ssvfscanf_r+0x12ae>
 801037a:	f7fe ffa6 	bl	800f2ca <__ssvfscanf_r+0x1fa>
 801037e:	3d01      	subs	r5, #1
 8010380:	7829      	ldrb	r1, [r5, #0]
 8010382:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010384:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010386:	f001 fdfb 	bl	8011f80 <_sungetc_r>
 801038a:	e7ef      	b.n	801036c <__ssvfscanf_r+0x129c>
 801038c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801038e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010390:	3b01      	subs	r3, #1
 8010392:	7819      	ldrb	r1, [r3, #0]
 8010394:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010396:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010398:	f001 fdf2 	bl	8011f80 <_sungetc_r>
 801039c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801039e:	6a3a      	ldr	r2, [r7, #32]
 80103a0:	189b      	adds	r3, r3, r2
 80103a2:	b2db      	uxtb	r3, r3
 80103a4:	2b03      	cmp	r3, #3
 80103a6:	d8f1      	bhi.n	801038c <__ssvfscanf_r+0x12bc>
 80103a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103aa:	3c03      	subs	r4, #3
 80103ac:	b2e4      	uxtb	r4, r4
 80103ae:	1b1b      	subs	r3, r3, r4
 80103b0:	1b2d      	subs	r5, r5, r4
 80103b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80103b4:	05f3      	lsls	r3, r6, #23
 80103b6:	d52f      	bpl.n	8010418 <__ssvfscanf_r+0x1348>
 80103b8:	0573      	lsls	r3, r6, #21
 80103ba:	d514      	bpl.n	80103e6 <__ssvfscanf_r+0x1316>
 80103bc:	238c      	movs	r3, #140	; 0x8c
 80103be:	2248      	movs	r2, #72	; 0x48
 80103c0:	005b      	lsls	r3, r3, #1
 80103c2:	189b      	adds	r3, r3, r2
 80103c4:	19db      	adds	r3, r3, r7
 80103c6:	429d      	cmp	r5, r3
 80103c8:	d801      	bhi.n	80103ce <__ssvfscanf_r+0x12fe>
 80103ca:	f7fe ff7e 	bl	800f2ca <__ssvfscanf_r+0x1fa>
 80103ce:	3d01      	subs	r5, #1
 80103d0:	7829      	ldrb	r1, [r5, #0]
 80103d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80103d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80103d6:	f001 fdd3 	bl	8011f80 <_sungetc_r>
 80103da:	e7ef      	b.n	80103bc <__ssvfscanf_r+0x12ec>
 80103dc:	1b63      	subs	r3, r4, r5
 80103de:	b2db      	uxtb	r3, r3
 80103e0:	63fd      	str	r5, [r7, #60]	; 0x3c
 80103e2:	623b      	str	r3, [r7, #32]
 80103e4:	e7da      	b.n	801039c <__ssvfscanf_r+0x12cc>
 80103e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103e8:	1e6c      	subs	r4, r5, #1
 80103ea:	7821      	ldrb	r1, [r4, #0]
 80103ec:	3b01      	subs	r3, #1
 80103ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80103f0:	2965      	cmp	r1, #101	; 0x65
 80103f2:	d00a      	beq.n	801040a <__ssvfscanf_r+0x133a>
 80103f4:	2945      	cmp	r1, #69	; 0x45
 80103f6:	d008      	beq.n	801040a <__ssvfscanf_r+0x133a>
 80103f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80103fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80103fc:	f001 fdc0 	bl	8011f80 <_sungetc_r>
 8010400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010402:	1eac      	subs	r4, r5, #2
 8010404:	3b02      	subs	r3, #2
 8010406:	7821      	ldrb	r1, [r4, #0]
 8010408:	63fb      	str	r3, [r7, #60]	; 0x3c
 801040a:	0025      	movs	r5, r4
 801040c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801040e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010410:	f001 fdb6 	bl	8011f80 <_sungetc_r>
 8010414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010416:	63bb      	str	r3, [r7, #56]	; 0x38
 8010418:	2310      	movs	r3, #16
 801041a:	0032      	movs	r2, r6
 801041c:	401a      	ands	r2, r3
 801041e:	421e      	tst	r6, r3
 8010420:	d001      	beq.n	8010426 <__ssvfscanf_r+0x1356>
 8010422:	f7fe fe71 	bl	800f108 <__ssvfscanf_r+0x38>
 8010426:	23c0      	movs	r3, #192	; 0xc0
 8010428:	2180      	movs	r1, #128	; 0x80
 801042a:	00db      	lsls	r3, r3, #3
 801042c:	702a      	strb	r2, [r5, #0]
 801042e:	4033      	ands	r3, r6
 8010430:	00c9      	lsls	r1, r1, #3
 8010432:	428b      	cmp	r3, r1
 8010434:	d11f      	bne.n	8010476 <__ssvfscanf_r+0x13a6>
 8010436:	693b      	ldr	r3, [r7, #16]
 8010438:	69fa      	ldr	r2, [r7, #28]
 801043a:	69f9      	ldr	r1, [r7, #28]
 801043c:	1a9a      	subs	r2, r3, r2
 801043e:	428b      	cmp	r3, r1
 8010440:	d125      	bne.n	801048e <__ssvfscanf_r+0x13be>
 8010442:	238c      	movs	r3, #140	; 0x8c
 8010444:	2148      	movs	r1, #72	; 0x48
 8010446:	005b      	lsls	r3, r3, #1
 8010448:	185b      	adds	r3, r3, r1
 801044a:	19d9      	adds	r1, r3, r7
 801044c:	2200      	movs	r2, #0
 801044e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010450:	f7fb ffca 	bl	800c3e8 <_strtod_r>
 8010454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010456:	0004      	movs	r4, r0
 8010458:	3304      	adds	r3, #4
 801045a:	000d      	movs	r5, r1
 801045c:	623b      	str	r3, [r7, #32]
 801045e:	07f3      	lsls	r3, r6, #31
 8010460:	d523      	bpl.n	80104aa <__ssvfscanf_r+0x13da>
 8010462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	601c      	str	r4, [r3, #0]
 8010468:	605d      	str	r5, [r3, #4]
 801046a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801046c:	3301      	adds	r3, #1
 801046e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010470:	6a3b      	ldr	r3, [r7, #32]
 8010472:	f7fe ffa5 	bl	800f3c0 <__ssvfscanf_r+0x2f0>
 8010476:	68bb      	ldr	r3, [r7, #8]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d0e2      	beq.n	8010442 <__ssvfscanf_r+0x1372>
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010480:	1c59      	adds	r1, r3, #1
 8010482:	230a      	movs	r3, #10
 8010484:	f7fc f84c 	bl	800c520 <_strtol_r>
 8010488:	68bb      	ldr	r3, [r7, #8]
 801048a:	687d      	ldr	r5, [r7, #4]
 801048c:	1ac2      	subs	r2, r0, r3
 801048e:	2148      	movs	r1, #72	; 0x48
 8010490:	4b19      	ldr	r3, [pc, #100]	; (80104f8 <__ssvfscanf_r+0x1428>)
 8010492:	185b      	adds	r3, r3, r1
 8010494:	19db      	adds	r3, r3, r7
 8010496:	429d      	cmp	r5, r3
 8010498:	d302      	bcc.n	80104a0 <__ssvfscanf_r+0x13d0>
 801049a:	4b18      	ldr	r3, [pc, #96]	; (80104fc <__ssvfscanf_r+0x142c>)
 801049c:	185b      	adds	r3, r3, r1
 801049e:	19dd      	adds	r5, r3, r7
 80104a0:	0028      	movs	r0, r5
 80104a2:	4917      	ldr	r1, [pc, #92]	; (8010500 <__ssvfscanf_r+0x1430>)
 80104a4:	f7fc f944 	bl	800c730 <sprintf>
 80104a8:	e7cb      	b.n	8010442 <__ssvfscanf_r+0x1372>
 80104aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80104b0:	07b6      	lsls	r6, r6, #30
 80104b2:	d4d8      	bmi.n	8010466 <__ssvfscanf_r+0x1396>
 80104b4:	0002      	movs	r2, r0
 80104b6:	000b      	movs	r3, r1
 80104b8:	f7f1 ff1c 	bl	80022f4 <__aeabi_dcmpun>
 80104bc:	2800      	cmp	r0, #0
 80104be:	d005      	beq.n	80104cc <__ssvfscanf_r+0x13fc>
 80104c0:	4810      	ldr	r0, [pc, #64]	; (8010504 <__ssvfscanf_r+0x1434>)
 80104c2:	f7fc fabf 	bl	800ca44 <nanf>
 80104c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104c8:	6018      	str	r0, [r3, #0]
 80104ca:	e7ce      	b.n	801046a <__ssvfscanf_r+0x139a>
 80104cc:	0020      	movs	r0, r4
 80104ce:	0029      	movs	r1, r5
 80104d0:	f7f1 ffba 	bl	8002448 <__aeabi_d2f>
 80104d4:	e7f7      	b.n	80104c6 <__ssvfscanf_r+0x13f6>
 80104d6:	00a3      	lsls	r3, r4, #2
 80104d8:	18ed      	adds	r5, r5, r3
 80104da:	682b      	ldr	r3, [r5, #0]
 80104dc:	3401      	adds	r4, #1
 80104de:	6818      	ldr	r0, [r3, #0]
 80104e0:	f7fa ff32 	bl	800b348 <free>
 80104e4:	2200      	movs	r2, #0
 80104e6:	682b      	ldr	r3, [r5, #0]
 80104e8:	601a      	str	r2, [r3, #0]
 80104ea:	f7fe ffc3 	bl	800f474 <__ssvfscanf_r+0x3a4>
 80104ee:	46c0      	nop			; (mov r8, r8)
 80104f0:	fffff07f 	.word	0xfffff07f
 80104f4:	fffffd7f 	.word	0xfffffd7f
 80104f8:	0000026b 	.word	0x0000026b
 80104fc:	0000026a 	.word	0x0000026a
 8010500:	08015298 	.word	0x08015298
 8010504:	080152fb 	.word	0x080152fb

08010508 <_fclose_r>:
 8010508:	b570      	push	{r4, r5, r6, lr}
 801050a:	0005      	movs	r5, r0
 801050c:	1e0c      	subs	r4, r1, #0
 801050e:	d102      	bne.n	8010516 <_fclose_r+0xe>
 8010510:	2600      	movs	r6, #0
 8010512:	0030      	movs	r0, r6
 8010514:	bd70      	pop	{r4, r5, r6, pc}
 8010516:	2800      	cmp	r0, #0
 8010518:	d004      	beq.n	8010524 <_fclose_r+0x1c>
 801051a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801051c:	2b00      	cmp	r3, #0
 801051e:	d101      	bne.n	8010524 <_fclose_r+0x1c>
 8010520:	f7fc f89e 	bl	800c660 <__sinit>
 8010524:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010526:	07db      	lsls	r3, r3, #31
 8010528:	d405      	bmi.n	8010536 <_fclose_r+0x2e>
 801052a:	89a3      	ldrh	r3, [r4, #12]
 801052c:	059b      	lsls	r3, r3, #22
 801052e:	d402      	bmi.n	8010536 <_fclose_r+0x2e>
 8010530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010532:	f7fc fa6b 	bl	800ca0c <__retarget_lock_acquire_recursive>
 8010536:	220c      	movs	r2, #12
 8010538:	5ea3      	ldrsh	r3, [r4, r2]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d109      	bne.n	8010552 <_fclose_r+0x4a>
 801053e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010540:	3301      	adds	r3, #1
 8010542:	0016      	movs	r6, r2
 8010544:	401e      	ands	r6, r3
 8010546:	421a      	tst	r2, r3
 8010548:	d1e2      	bne.n	8010510 <_fclose_r+0x8>
 801054a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801054c:	f7fc fa5f 	bl	800ca0e <__retarget_lock_release_recursive>
 8010550:	e7df      	b.n	8010512 <_fclose_r+0xa>
 8010552:	0021      	movs	r1, r4
 8010554:	0028      	movs	r0, r5
 8010556:	f000 f837 	bl	80105c8 <__sflush_r>
 801055a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801055c:	0006      	movs	r6, r0
 801055e:	2b00      	cmp	r3, #0
 8010560:	d006      	beq.n	8010570 <_fclose_r+0x68>
 8010562:	0028      	movs	r0, r5
 8010564:	69e1      	ldr	r1, [r4, #28]
 8010566:	4798      	blx	r3
 8010568:	2800      	cmp	r0, #0
 801056a:	da01      	bge.n	8010570 <_fclose_r+0x68>
 801056c:	2601      	movs	r6, #1
 801056e:	4276      	negs	r6, r6
 8010570:	89a3      	ldrh	r3, [r4, #12]
 8010572:	061b      	lsls	r3, r3, #24
 8010574:	d503      	bpl.n	801057e <_fclose_r+0x76>
 8010576:	0028      	movs	r0, r5
 8010578:	6921      	ldr	r1, [r4, #16]
 801057a:	f7fc facf 	bl	800cb1c <_free_r>
 801057e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010580:	2900      	cmp	r1, #0
 8010582:	d008      	beq.n	8010596 <_fclose_r+0x8e>
 8010584:	0023      	movs	r3, r4
 8010586:	3340      	adds	r3, #64	; 0x40
 8010588:	4299      	cmp	r1, r3
 801058a:	d002      	beq.n	8010592 <_fclose_r+0x8a>
 801058c:	0028      	movs	r0, r5
 801058e:	f7fc fac5 	bl	800cb1c <_free_r>
 8010592:	2300      	movs	r3, #0
 8010594:	6323      	str	r3, [r4, #48]	; 0x30
 8010596:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8010598:	2900      	cmp	r1, #0
 801059a:	d004      	beq.n	80105a6 <_fclose_r+0x9e>
 801059c:	0028      	movs	r0, r5
 801059e:	f7fc fabd 	bl	800cb1c <_free_r>
 80105a2:	2300      	movs	r3, #0
 80105a4:	6463      	str	r3, [r4, #68]	; 0x44
 80105a6:	f7fc f84b 	bl	800c640 <__sfp_lock_acquire>
 80105aa:	2300      	movs	r3, #0
 80105ac:	81a3      	strh	r3, [r4, #12]
 80105ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80105b0:	07db      	lsls	r3, r3, #31
 80105b2:	d402      	bmi.n	80105ba <_fclose_r+0xb2>
 80105b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105b6:	f7fc fa2a 	bl	800ca0e <__retarget_lock_release_recursive>
 80105ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105bc:	f7fc fa25 	bl	800ca0a <__retarget_lock_close_recursive>
 80105c0:	f7fc f846 	bl	800c650 <__sfp_lock_release>
 80105c4:	e7a5      	b.n	8010512 <_fclose_r+0xa>
	...

080105c8 <__sflush_r>:
 80105c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80105ca:	230c      	movs	r3, #12
 80105cc:	5eca      	ldrsh	r2, [r1, r3]
 80105ce:	000c      	movs	r4, r1
 80105d0:	0005      	movs	r5, r0
 80105d2:	b291      	uxth	r1, r2
 80105d4:	0713      	lsls	r3, r2, #28
 80105d6:	d464      	bmi.n	80106a2 <__sflush_r+0xda>
 80105d8:	2380      	movs	r3, #128	; 0x80
 80105da:	011b      	lsls	r3, r3, #4
 80105dc:	4313      	orrs	r3, r2
 80105de:	6862      	ldr	r2, [r4, #4]
 80105e0:	81a3      	strh	r3, [r4, #12]
 80105e2:	2a00      	cmp	r2, #0
 80105e4:	dc04      	bgt.n	80105f0 <__sflush_r+0x28>
 80105e6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80105e8:	2a00      	cmp	r2, #0
 80105ea:	dc01      	bgt.n	80105f0 <__sflush_r+0x28>
 80105ec:	2000      	movs	r0, #0
 80105ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80105f0:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80105f2:	2f00      	cmp	r7, #0
 80105f4:	d0fa      	beq.n	80105ec <__sflush_r+0x24>
 80105f6:	2200      	movs	r2, #0
 80105f8:	2080      	movs	r0, #128	; 0x80
 80105fa:	682e      	ldr	r6, [r5, #0]
 80105fc:	602a      	str	r2, [r5, #0]
 80105fe:	001a      	movs	r2, r3
 8010600:	0140      	lsls	r0, r0, #5
 8010602:	69e1      	ldr	r1, [r4, #28]
 8010604:	4002      	ands	r2, r0
 8010606:	4203      	tst	r3, r0
 8010608:	d038      	beq.n	801067c <__sflush_r+0xb4>
 801060a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801060c:	89a3      	ldrh	r3, [r4, #12]
 801060e:	075b      	lsls	r3, r3, #29
 8010610:	d506      	bpl.n	8010620 <__sflush_r+0x58>
 8010612:	6863      	ldr	r3, [r4, #4]
 8010614:	1ac0      	subs	r0, r0, r3
 8010616:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010618:	2b00      	cmp	r3, #0
 801061a:	d001      	beq.n	8010620 <__sflush_r+0x58>
 801061c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801061e:	1ac0      	subs	r0, r0, r3
 8010620:	0002      	movs	r2, r0
 8010622:	2300      	movs	r3, #0
 8010624:	0028      	movs	r0, r5
 8010626:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8010628:	69e1      	ldr	r1, [r4, #28]
 801062a:	47b8      	blx	r7
 801062c:	89a2      	ldrh	r2, [r4, #12]
 801062e:	1c43      	adds	r3, r0, #1
 8010630:	d106      	bne.n	8010640 <__sflush_r+0x78>
 8010632:	6829      	ldr	r1, [r5, #0]
 8010634:	291d      	cmp	r1, #29
 8010636:	d830      	bhi.n	801069a <__sflush_r+0xd2>
 8010638:	4b2c      	ldr	r3, [pc, #176]	; (80106ec <__sflush_r+0x124>)
 801063a:	410b      	asrs	r3, r1
 801063c:	07db      	lsls	r3, r3, #31
 801063e:	d42c      	bmi.n	801069a <__sflush_r+0xd2>
 8010640:	4b2b      	ldr	r3, [pc, #172]	; (80106f0 <__sflush_r+0x128>)
 8010642:	4013      	ands	r3, r2
 8010644:	2200      	movs	r2, #0
 8010646:	6062      	str	r2, [r4, #4]
 8010648:	6922      	ldr	r2, [r4, #16]
 801064a:	b21b      	sxth	r3, r3
 801064c:	81a3      	strh	r3, [r4, #12]
 801064e:	6022      	str	r2, [r4, #0]
 8010650:	04db      	lsls	r3, r3, #19
 8010652:	d505      	bpl.n	8010660 <__sflush_r+0x98>
 8010654:	1c43      	adds	r3, r0, #1
 8010656:	d102      	bne.n	801065e <__sflush_r+0x96>
 8010658:	682b      	ldr	r3, [r5, #0]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d100      	bne.n	8010660 <__sflush_r+0x98>
 801065e:	6520      	str	r0, [r4, #80]	; 0x50
 8010660:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010662:	602e      	str	r6, [r5, #0]
 8010664:	2900      	cmp	r1, #0
 8010666:	d0c1      	beq.n	80105ec <__sflush_r+0x24>
 8010668:	0023      	movs	r3, r4
 801066a:	3340      	adds	r3, #64	; 0x40
 801066c:	4299      	cmp	r1, r3
 801066e:	d002      	beq.n	8010676 <__sflush_r+0xae>
 8010670:	0028      	movs	r0, r5
 8010672:	f7fc fa53 	bl	800cb1c <_free_r>
 8010676:	2000      	movs	r0, #0
 8010678:	6320      	str	r0, [r4, #48]	; 0x30
 801067a:	e7b8      	b.n	80105ee <__sflush_r+0x26>
 801067c:	2301      	movs	r3, #1
 801067e:	0028      	movs	r0, r5
 8010680:	47b8      	blx	r7
 8010682:	1c43      	adds	r3, r0, #1
 8010684:	d1c2      	bne.n	801060c <__sflush_r+0x44>
 8010686:	682b      	ldr	r3, [r5, #0]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d0bf      	beq.n	801060c <__sflush_r+0x44>
 801068c:	2b1d      	cmp	r3, #29
 801068e:	d001      	beq.n	8010694 <__sflush_r+0xcc>
 8010690:	2b16      	cmp	r3, #22
 8010692:	d101      	bne.n	8010698 <__sflush_r+0xd0>
 8010694:	602e      	str	r6, [r5, #0]
 8010696:	e7a9      	b.n	80105ec <__sflush_r+0x24>
 8010698:	89a2      	ldrh	r2, [r4, #12]
 801069a:	2340      	movs	r3, #64	; 0x40
 801069c:	4313      	orrs	r3, r2
 801069e:	81a3      	strh	r3, [r4, #12]
 80106a0:	e7a5      	b.n	80105ee <__sflush_r+0x26>
 80106a2:	6926      	ldr	r6, [r4, #16]
 80106a4:	2e00      	cmp	r6, #0
 80106a6:	d0a1      	beq.n	80105ec <__sflush_r+0x24>
 80106a8:	6827      	ldr	r7, [r4, #0]
 80106aa:	6026      	str	r6, [r4, #0]
 80106ac:	1bbb      	subs	r3, r7, r6
 80106ae:	9301      	str	r3, [sp, #4]
 80106b0:	2300      	movs	r3, #0
 80106b2:	0789      	lsls	r1, r1, #30
 80106b4:	d100      	bne.n	80106b8 <__sflush_r+0xf0>
 80106b6:	6963      	ldr	r3, [r4, #20]
 80106b8:	60a3      	str	r3, [r4, #8]
 80106ba:	9b01      	ldr	r3, [sp, #4]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	dc00      	bgt.n	80106c2 <__sflush_r+0xfa>
 80106c0:	e794      	b.n	80105ec <__sflush_r+0x24>
 80106c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80106c4:	0032      	movs	r2, r6
 80106c6:	001f      	movs	r7, r3
 80106c8:	0028      	movs	r0, r5
 80106ca:	9b01      	ldr	r3, [sp, #4]
 80106cc:	69e1      	ldr	r1, [r4, #28]
 80106ce:	47b8      	blx	r7
 80106d0:	2800      	cmp	r0, #0
 80106d2:	dc06      	bgt.n	80106e2 <__sflush_r+0x11a>
 80106d4:	2340      	movs	r3, #64	; 0x40
 80106d6:	2001      	movs	r0, #1
 80106d8:	89a2      	ldrh	r2, [r4, #12]
 80106da:	4240      	negs	r0, r0
 80106dc:	4313      	orrs	r3, r2
 80106de:	81a3      	strh	r3, [r4, #12]
 80106e0:	e785      	b.n	80105ee <__sflush_r+0x26>
 80106e2:	9b01      	ldr	r3, [sp, #4]
 80106e4:	1836      	adds	r6, r6, r0
 80106e6:	1a1b      	subs	r3, r3, r0
 80106e8:	9301      	str	r3, [sp, #4]
 80106ea:	e7e6      	b.n	80106ba <__sflush_r+0xf2>
 80106ec:	dfbffffe 	.word	0xdfbffffe
 80106f0:	fffff7ff 	.word	0xfffff7ff

080106f4 <_fflush_r>:
 80106f4:	b570      	push	{r4, r5, r6, lr}
 80106f6:	0005      	movs	r5, r0
 80106f8:	000c      	movs	r4, r1
 80106fa:	2800      	cmp	r0, #0
 80106fc:	d004      	beq.n	8010708 <_fflush_r+0x14>
 80106fe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010700:	2b00      	cmp	r3, #0
 8010702:	d101      	bne.n	8010708 <_fflush_r+0x14>
 8010704:	f7fb ffac 	bl	800c660 <__sinit>
 8010708:	220c      	movs	r2, #12
 801070a:	5ea3      	ldrsh	r3, [r4, r2]
 801070c:	1e1e      	subs	r6, r3, #0
 801070e:	d015      	beq.n	801073c <_fflush_r+0x48>
 8010710:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010712:	07d2      	lsls	r2, r2, #31
 8010714:	d404      	bmi.n	8010720 <_fflush_r+0x2c>
 8010716:	059b      	lsls	r3, r3, #22
 8010718:	d402      	bmi.n	8010720 <_fflush_r+0x2c>
 801071a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801071c:	f7fc f976 	bl	800ca0c <__retarget_lock_acquire_recursive>
 8010720:	0021      	movs	r1, r4
 8010722:	0028      	movs	r0, r5
 8010724:	f7ff ff50 	bl	80105c8 <__sflush_r>
 8010728:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801072a:	0006      	movs	r6, r0
 801072c:	07db      	lsls	r3, r3, #31
 801072e:	d405      	bmi.n	801073c <_fflush_r+0x48>
 8010730:	89a3      	ldrh	r3, [r4, #12]
 8010732:	059b      	lsls	r3, r3, #22
 8010734:	d402      	bmi.n	801073c <_fflush_r+0x48>
 8010736:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010738:	f7fc f969 	bl	800ca0e <__retarget_lock_release_recursive>
 801073c:	0030      	movs	r0, r6
 801073e:	bd70      	pop	{r4, r5, r6, pc}

08010740 <__sccl>:
 8010740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010742:	780b      	ldrb	r3, [r1, #0]
 8010744:	0004      	movs	r4, r0
 8010746:	2b5e      	cmp	r3, #94	; 0x5e
 8010748:	d019      	beq.n	801077e <__sccl+0x3e>
 801074a:	2200      	movs	r2, #0
 801074c:	1c4d      	adds	r5, r1, #1
 801074e:	0021      	movs	r1, r4
 8010750:	1c60      	adds	r0, r4, #1
 8010752:	30ff      	adds	r0, #255	; 0xff
 8010754:	700a      	strb	r2, [r1, #0]
 8010756:	3101      	adds	r1, #1
 8010758:	4281      	cmp	r1, r0
 801075a:	d1fb      	bne.n	8010754 <__sccl+0x14>
 801075c:	1e68      	subs	r0, r5, #1
 801075e:	2b00      	cmp	r3, #0
 8010760:	d00c      	beq.n	801077c <__sccl+0x3c>
 8010762:	2101      	movs	r1, #1
 8010764:	262d      	movs	r6, #45	; 0x2d
 8010766:	404a      	eors	r2, r1
 8010768:	0028      	movs	r0, r5
 801076a:	54e2      	strb	r2, [r4, r3]
 801076c:	7801      	ldrb	r1, [r0, #0]
 801076e:	1c45      	adds	r5, r0, #1
 8010770:	292d      	cmp	r1, #45	; 0x2d
 8010772:	d00c      	beq.n	801078e <__sccl+0x4e>
 8010774:	295d      	cmp	r1, #93	; 0x5d
 8010776:	d01d      	beq.n	80107b4 <__sccl+0x74>
 8010778:	2900      	cmp	r1, #0
 801077a:	d104      	bne.n	8010786 <__sccl+0x46>
 801077c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801077e:	2201      	movs	r2, #1
 8010780:	784b      	ldrb	r3, [r1, #1]
 8010782:	1c8d      	adds	r5, r1, #2
 8010784:	e7e3      	b.n	801074e <__sccl+0xe>
 8010786:	000b      	movs	r3, r1
 8010788:	e7ee      	b.n	8010768 <__sccl+0x28>
 801078a:	0033      	movs	r3, r6
 801078c:	e7ec      	b.n	8010768 <__sccl+0x28>
 801078e:	7841      	ldrb	r1, [r0, #1]
 8010790:	295d      	cmp	r1, #93	; 0x5d
 8010792:	d0fa      	beq.n	801078a <__sccl+0x4a>
 8010794:	428b      	cmp	r3, r1
 8010796:	dcf8      	bgt.n	801078a <__sccl+0x4a>
 8010798:	001d      	movs	r5, r3
 801079a:	3002      	adds	r0, #2
 801079c:	3501      	adds	r5, #1
 801079e:	5562      	strb	r2, [r4, r5]
 80107a0:	42a9      	cmp	r1, r5
 80107a2:	dcfb      	bgt.n	801079c <__sccl+0x5c>
 80107a4:	2500      	movs	r5, #0
 80107a6:	1c5f      	adds	r7, r3, #1
 80107a8:	428b      	cmp	r3, r1
 80107aa:	da01      	bge.n	80107b0 <__sccl+0x70>
 80107ac:	1acd      	subs	r5, r1, r3
 80107ae:	3d01      	subs	r5, #1
 80107b0:	197b      	adds	r3, r7, r5
 80107b2:	e7db      	b.n	801076c <__sccl+0x2c>
 80107b4:	0028      	movs	r0, r5
 80107b6:	e7e1      	b.n	801077c <__sccl+0x3c>

080107b8 <_localeconv_r>:
 80107b8:	4800      	ldr	r0, [pc, #0]	; (80107bc <_localeconv_r+0x4>)
 80107ba:	4770      	bx	lr
 80107bc:	2000053c 	.word	0x2000053c

080107c0 <__libc_fini_array>:
 80107c0:	b570      	push	{r4, r5, r6, lr}
 80107c2:	4c07      	ldr	r4, [pc, #28]	; (80107e0 <__libc_fini_array+0x20>)
 80107c4:	4d07      	ldr	r5, [pc, #28]	; (80107e4 <__libc_fini_array+0x24>)
 80107c6:	1b64      	subs	r4, r4, r5
 80107c8:	10a4      	asrs	r4, r4, #2
 80107ca:	2c00      	cmp	r4, #0
 80107cc:	d102      	bne.n	80107d4 <__libc_fini_array+0x14>
 80107ce:	f002 fdcd 	bl	801336c <_fini>
 80107d2:	bd70      	pop	{r4, r5, r6, pc}
 80107d4:	3c01      	subs	r4, #1
 80107d6:	00a3      	lsls	r3, r4, #2
 80107d8:	58eb      	ldr	r3, [r5, r3]
 80107da:	4798      	blx	r3
 80107dc:	e7f5      	b.n	80107ca <__libc_fini_array+0xa>
 80107de:	46c0      	nop			; (mov r8, r8)
 80107e0:	08015398 	.word	0x08015398
 80107e4:	08015394 	.word	0x08015394

080107e8 <memchr>:
 80107e8:	b2c9      	uxtb	r1, r1
 80107ea:	1882      	adds	r2, r0, r2
 80107ec:	4290      	cmp	r0, r2
 80107ee:	d101      	bne.n	80107f4 <memchr+0xc>
 80107f0:	2000      	movs	r0, #0
 80107f2:	4770      	bx	lr
 80107f4:	7803      	ldrb	r3, [r0, #0]
 80107f6:	428b      	cmp	r3, r1
 80107f8:	d0fb      	beq.n	80107f2 <memchr+0xa>
 80107fa:	3001      	adds	r0, #1
 80107fc:	e7f6      	b.n	80107ec <memchr+0x4>
	...

08010800 <frexp>:
 8010800:	b570      	push	{r4, r5, r6, lr}
 8010802:	0014      	movs	r4, r2
 8010804:	2500      	movs	r5, #0
 8010806:	6025      	str	r5, [r4, #0]
 8010808:	4d10      	ldr	r5, [pc, #64]	; (801084c <frexp+0x4c>)
 801080a:	004b      	lsls	r3, r1, #1
 801080c:	000a      	movs	r2, r1
 801080e:	085b      	lsrs	r3, r3, #1
 8010810:	42ab      	cmp	r3, r5
 8010812:	dc1a      	bgt.n	801084a <frexp+0x4a>
 8010814:	001d      	movs	r5, r3
 8010816:	4305      	orrs	r5, r0
 8010818:	d017      	beq.n	801084a <frexp+0x4a>
 801081a:	4d0d      	ldr	r5, [pc, #52]	; (8010850 <frexp+0x50>)
 801081c:	4229      	tst	r1, r5
 801081e:	d109      	bne.n	8010834 <frexp+0x34>
 8010820:	2200      	movs	r2, #0
 8010822:	4b0c      	ldr	r3, [pc, #48]	; (8010854 <frexp+0x54>)
 8010824:	f7f0 ff22 	bl	800166c <__aeabi_dmul>
 8010828:	2536      	movs	r5, #54	; 0x36
 801082a:	000a      	movs	r2, r1
 801082c:	004b      	lsls	r3, r1, #1
 801082e:	426d      	negs	r5, r5
 8010830:	085b      	lsrs	r3, r3, #1
 8010832:	6025      	str	r5, [r4, #0]
 8010834:	4d08      	ldr	r5, [pc, #32]	; (8010858 <frexp+0x58>)
 8010836:	151b      	asrs	r3, r3, #20
 8010838:	195b      	adds	r3, r3, r5
 801083a:	6825      	ldr	r5, [r4, #0]
 801083c:	18eb      	adds	r3, r5, r3
 801083e:	6023      	str	r3, [r4, #0]
 8010840:	4b06      	ldr	r3, [pc, #24]	; (801085c <frexp+0x5c>)
 8010842:	401a      	ands	r2, r3
 8010844:	4b06      	ldr	r3, [pc, #24]	; (8010860 <frexp+0x60>)
 8010846:	4313      	orrs	r3, r2
 8010848:	0019      	movs	r1, r3
 801084a:	bd70      	pop	{r4, r5, r6, pc}
 801084c:	7fefffff 	.word	0x7fefffff
 8010850:	7ff00000 	.word	0x7ff00000
 8010854:	43500000 	.word	0x43500000
 8010858:	fffffc02 	.word	0xfffffc02
 801085c:	800fffff 	.word	0x800fffff
 8010860:	3fe00000 	.word	0x3fe00000

08010864 <__register_exitproc>:
 8010864:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010866:	4f1c      	ldr	r7, [pc, #112]	; (80108d8 <__register_exitproc+0x74>)
 8010868:	0004      	movs	r4, r0
 801086a:	6838      	ldr	r0, [r7, #0]
 801086c:	0016      	movs	r6, r2
 801086e:	9301      	str	r3, [sp, #4]
 8010870:	9100      	str	r1, [sp, #0]
 8010872:	f7fc f8cb 	bl	800ca0c <__retarget_lock_acquire_recursive>
 8010876:	4a19      	ldr	r2, [pc, #100]	; (80108dc <__register_exitproc+0x78>)
 8010878:	6813      	ldr	r3, [r2, #0]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d101      	bne.n	8010882 <__register_exitproc+0x1e>
 801087e:	4b18      	ldr	r3, [pc, #96]	; (80108e0 <__register_exitproc+0x7c>)
 8010880:	6013      	str	r3, [r2, #0]
 8010882:	685a      	ldr	r2, [r3, #4]
 8010884:	6838      	ldr	r0, [r7, #0]
 8010886:	2a1f      	cmp	r2, #31
 8010888:	dd04      	ble.n	8010894 <__register_exitproc+0x30>
 801088a:	f7fc f8c0 	bl	800ca0e <__retarget_lock_release_recursive>
 801088e:	2001      	movs	r0, #1
 8010890:	4240      	negs	r0, r0
 8010892:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010894:	2c00      	cmp	r4, #0
 8010896:	d014      	beq.n	80108c2 <__register_exitproc+0x5e>
 8010898:	0091      	lsls	r1, r2, #2
 801089a:	1859      	adds	r1, r3, r1
 801089c:	000f      	movs	r7, r1
 801089e:	3788      	adds	r7, #136	; 0x88
 80108a0:	603e      	str	r6, [r7, #0]
 80108a2:	2701      	movs	r7, #1
 80108a4:	001e      	movs	r6, r3
 80108a6:	4097      	lsls	r7, r2
 80108a8:	3685      	adds	r6, #133	; 0x85
 80108aa:	36ff      	adds	r6, #255	; 0xff
 80108ac:	6875      	ldr	r5, [r6, #4]
 80108ae:	31fc      	adds	r1, #252	; 0xfc
 80108b0:	433d      	orrs	r5, r7
 80108b2:	6075      	str	r5, [r6, #4]
 80108b4:	9d01      	ldr	r5, [sp, #4]
 80108b6:	60cd      	str	r5, [r1, #12]
 80108b8:	2c02      	cmp	r4, #2
 80108ba:	d102      	bne.n	80108c2 <__register_exitproc+0x5e>
 80108bc:	68b1      	ldr	r1, [r6, #8]
 80108be:	4339      	orrs	r1, r7
 80108c0:	60b1      	str	r1, [r6, #8]
 80108c2:	1c51      	adds	r1, r2, #1
 80108c4:	6059      	str	r1, [r3, #4]
 80108c6:	3202      	adds	r2, #2
 80108c8:	9900      	ldr	r1, [sp, #0]
 80108ca:	0092      	lsls	r2, r2, #2
 80108cc:	50d1      	str	r1, [r2, r3]
 80108ce:	f7fc f89e 	bl	800ca0e <__retarget_lock_release_recursive>
 80108d2:	2000      	movs	r0, #0
 80108d4:	e7dd      	b.n	8010892 <__register_exitproc+0x2e>
 80108d6:	46c0      	nop			; (mov r8, r8)
 80108d8:	200006dc 	.word	0x200006dc
 80108dc:	20000d38 	.word	0x20000d38
 80108e0:	20000d3c 	.word	0x20000d3c

080108e4 <__assert_func>:
 80108e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80108e6:	0014      	movs	r4, r2
 80108e8:	001a      	movs	r2, r3
 80108ea:	4b09      	ldr	r3, [pc, #36]	; (8010910 <__assert_func+0x2c>)
 80108ec:	0005      	movs	r5, r0
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	000e      	movs	r6, r1
 80108f2:	68d8      	ldr	r0, [r3, #12]
 80108f4:	4b07      	ldr	r3, [pc, #28]	; (8010914 <__assert_func+0x30>)
 80108f6:	2c00      	cmp	r4, #0
 80108f8:	d101      	bne.n	80108fe <__assert_func+0x1a>
 80108fa:	4b07      	ldr	r3, [pc, #28]	; (8010918 <__assert_func+0x34>)
 80108fc:	001c      	movs	r4, r3
 80108fe:	4907      	ldr	r1, [pc, #28]	; (801091c <__assert_func+0x38>)
 8010900:	9301      	str	r3, [sp, #4]
 8010902:	9402      	str	r4, [sp, #8]
 8010904:	002b      	movs	r3, r5
 8010906:	9600      	str	r6, [sp, #0]
 8010908:	f001 faa6 	bl	8011e58 <fiprintf>
 801090c:	f002 fb8e 	bl	801302c <abort>
 8010910:	200006d8 	.word	0x200006d8
 8010914:	080152c0 	.word	0x080152c0
 8010918:	080152fb 	.word	0x080152fb
 801091c:	080152cd 	.word	0x080152cd

08010920 <_calloc_r>:
 8010920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010922:	2400      	movs	r4, #0
 8010924:	0c0b      	lsrs	r3, r1, #16
 8010926:	0c16      	lsrs	r6, r2, #16
 8010928:	42a3      	cmp	r3, r4
 801092a:	d133      	bne.n	8010994 <_calloc_r+0x74>
 801092c:	42a6      	cmp	r6, r4
 801092e:	d121      	bne.n	8010974 <_calloc_r+0x54>
 8010930:	b28b      	uxth	r3, r1
 8010932:	b291      	uxth	r1, r2
 8010934:	4359      	muls	r1, r3
 8010936:	f7fa fd11 	bl	800b35c <_malloc_r>
 801093a:	1e05      	subs	r5, r0, #0
 801093c:	d033      	beq.n	80109a6 <_calloc_r+0x86>
 801093e:	0003      	movs	r3, r0
 8010940:	3b08      	subs	r3, #8
 8010942:	685a      	ldr	r2, [r3, #4]
 8010944:	2303      	movs	r3, #3
 8010946:	439a      	bics	r2, r3
 8010948:	3a04      	subs	r2, #4
 801094a:	2a24      	cmp	r2, #36	; 0x24
 801094c:	d832      	bhi.n	80109b4 <_calloc_r+0x94>
 801094e:	0003      	movs	r3, r0
 8010950:	2a13      	cmp	r2, #19
 8010952:	d90a      	bls.n	801096a <_calloc_r+0x4a>
 8010954:	6004      	str	r4, [r0, #0]
 8010956:	6044      	str	r4, [r0, #4]
 8010958:	3308      	adds	r3, #8
 801095a:	2a1b      	cmp	r2, #27
 801095c:	d905      	bls.n	801096a <_calloc_r+0x4a>
 801095e:	6084      	str	r4, [r0, #8]
 8010960:	60c4      	str	r4, [r0, #12]
 8010962:	2a24      	cmp	r2, #36	; 0x24
 8010964:	d021      	beq.n	80109aa <_calloc_r+0x8a>
 8010966:	0003      	movs	r3, r0
 8010968:	3310      	adds	r3, #16
 801096a:	2200      	movs	r2, #0
 801096c:	601a      	str	r2, [r3, #0]
 801096e:	605a      	str	r2, [r3, #4]
 8010970:	609a      	str	r2, [r3, #8]
 8010972:	e018      	b.n	80109a6 <_calloc_r+0x86>
 8010974:	1c33      	adds	r3, r6, #0
 8010976:	1c0d      	adds	r5, r1, #0
 8010978:	b289      	uxth	r1, r1
 801097a:	b292      	uxth	r2, r2
 801097c:	434a      	muls	r2, r1
 801097e:	b2ad      	uxth	r5, r5
 8010980:	b299      	uxth	r1, r3
 8010982:	4369      	muls	r1, r5
 8010984:	0c13      	lsrs	r3, r2, #16
 8010986:	18c9      	adds	r1, r1, r3
 8010988:	0c0b      	lsrs	r3, r1, #16
 801098a:	d107      	bne.n	801099c <_calloc_r+0x7c>
 801098c:	0409      	lsls	r1, r1, #16
 801098e:	b292      	uxth	r2, r2
 8010990:	4311      	orrs	r1, r2
 8010992:	e7d0      	b.n	8010936 <_calloc_r+0x16>
 8010994:	2e00      	cmp	r6, #0
 8010996:	d101      	bne.n	801099c <_calloc_r+0x7c>
 8010998:	1c15      	adds	r5, r2, #0
 801099a:	e7ed      	b.n	8010978 <_calloc_r+0x58>
 801099c:	f7fc f80a 	bl	800c9b4 <__errno>
 80109a0:	230c      	movs	r3, #12
 80109a2:	2500      	movs	r5, #0
 80109a4:	6003      	str	r3, [r0, #0]
 80109a6:	0028      	movs	r0, r5
 80109a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109aa:	0003      	movs	r3, r0
 80109ac:	6104      	str	r4, [r0, #16]
 80109ae:	3318      	adds	r3, #24
 80109b0:	6144      	str	r4, [r0, #20]
 80109b2:	e7da      	b.n	801096a <_calloc_r+0x4a>
 80109b4:	2100      	movs	r1, #0
 80109b6:	f7fb ff51 	bl	800c85c <memset>
 80109ba:	e7f4      	b.n	80109a6 <_calloc_r+0x86>

080109bc <quorem>:
 80109bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109be:	6902      	ldr	r2, [r0, #16]
 80109c0:	690b      	ldr	r3, [r1, #16]
 80109c2:	b089      	sub	sp, #36	; 0x24
 80109c4:	0007      	movs	r7, r0
 80109c6:	9104      	str	r1, [sp, #16]
 80109c8:	2000      	movs	r0, #0
 80109ca:	429a      	cmp	r2, r3
 80109cc:	db69      	blt.n	8010aa2 <quorem+0xe6>
 80109ce:	3b01      	subs	r3, #1
 80109d0:	009c      	lsls	r4, r3, #2
 80109d2:	9301      	str	r3, [sp, #4]
 80109d4:	000b      	movs	r3, r1
 80109d6:	3314      	adds	r3, #20
 80109d8:	9306      	str	r3, [sp, #24]
 80109da:	191b      	adds	r3, r3, r4
 80109dc:	9305      	str	r3, [sp, #20]
 80109de:	003b      	movs	r3, r7
 80109e0:	3314      	adds	r3, #20
 80109e2:	9303      	str	r3, [sp, #12]
 80109e4:	191c      	adds	r4, r3, r4
 80109e6:	9b05      	ldr	r3, [sp, #20]
 80109e8:	6826      	ldr	r6, [r4, #0]
 80109ea:	681d      	ldr	r5, [r3, #0]
 80109ec:	0030      	movs	r0, r6
 80109ee:	3501      	adds	r5, #1
 80109f0:	0029      	movs	r1, r5
 80109f2:	f7ef fba3 	bl	800013c <__udivsi3>
 80109f6:	9002      	str	r0, [sp, #8]
 80109f8:	42ae      	cmp	r6, r5
 80109fa:	d329      	bcc.n	8010a50 <quorem+0x94>
 80109fc:	9b06      	ldr	r3, [sp, #24]
 80109fe:	2600      	movs	r6, #0
 8010a00:	469c      	mov	ip, r3
 8010a02:	9d03      	ldr	r5, [sp, #12]
 8010a04:	9606      	str	r6, [sp, #24]
 8010a06:	4662      	mov	r2, ip
 8010a08:	ca08      	ldmia	r2!, {r3}
 8010a0a:	6828      	ldr	r0, [r5, #0]
 8010a0c:	4694      	mov	ip, r2
 8010a0e:	9a02      	ldr	r2, [sp, #8]
 8010a10:	b299      	uxth	r1, r3
 8010a12:	4351      	muls	r1, r2
 8010a14:	0c1b      	lsrs	r3, r3, #16
 8010a16:	4353      	muls	r3, r2
 8010a18:	1989      	adds	r1, r1, r6
 8010a1a:	0c0a      	lsrs	r2, r1, #16
 8010a1c:	189b      	adds	r3, r3, r2
 8010a1e:	9307      	str	r3, [sp, #28]
 8010a20:	0c1e      	lsrs	r6, r3, #16
 8010a22:	9b06      	ldr	r3, [sp, #24]
 8010a24:	b282      	uxth	r2, r0
 8010a26:	18d2      	adds	r2, r2, r3
 8010a28:	466b      	mov	r3, sp
 8010a2a:	b289      	uxth	r1, r1
 8010a2c:	8b9b      	ldrh	r3, [r3, #28]
 8010a2e:	1a52      	subs	r2, r2, r1
 8010a30:	0c01      	lsrs	r1, r0, #16
 8010a32:	1ac9      	subs	r1, r1, r3
 8010a34:	1413      	asrs	r3, r2, #16
 8010a36:	18cb      	adds	r3, r1, r3
 8010a38:	1419      	asrs	r1, r3, #16
 8010a3a:	b292      	uxth	r2, r2
 8010a3c:	041b      	lsls	r3, r3, #16
 8010a3e:	4313      	orrs	r3, r2
 8010a40:	c508      	stmia	r5!, {r3}
 8010a42:	9b05      	ldr	r3, [sp, #20]
 8010a44:	9106      	str	r1, [sp, #24]
 8010a46:	4563      	cmp	r3, ip
 8010a48:	d2dd      	bcs.n	8010a06 <quorem+0x4a>
 8010a4a:	6823      	ldr	r3, [r4, #0]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d030      	beq.n	8010ab2 <quorem+0xf6>
 8010a50:	0038      	movs	r0, r7
 8010a52:	9904      	ldr	r1, [sp, #16]
 8010a54:	f7fc ff04 	bl	800d860 <__mcmp>
 8010a58:	2800      	cmp	r0, #0
 8010a5a:	db21      	blt.n	8010aa0 <quorem+0xe4>
 8010a5c:	0038      	movs	r0, r7
 8010a5e:	2600      	movs	r6, #0
 8010a60:	9b02      	ldr	r3, [sp, #8]
 8010a62:	9c04      	ldr	r4, [sp, #16]
 8010a64:	3301      	adds	r3, #1
 8010a66:	9302      	str	r3, [sp, #8]
 8010a68:	3014      	adds	r0, #20
 8010a6a:	3414      	adds	r4, #20
 8010a6c:	6803      	ldr	r3, [r0, #0]
 8010a6e:	cc02      	ldmia	r4!, {r1}
 8010a70:	b29d      	uxth	r5, r3
 8010a72:	19ad      	adds	r5, r5, r6
 8010a74:	b28a      	uxth	r2, r1
 8010a76:	1aaa      	subs	r2, r5, r2
 8010a78:	0c09      	lsrs	r1, r1, #16
 8010a7a:	0c1b      	lsrs	r3, r3, #16
 8010a7c:	1a5b      	subs	r3, r3, r1
 8010a7e:	1411      	asrs	r1, r2, #16
 8010a80:	185b      	adds	r3, r3, r1
 8010a82:	141e      	asrs	r6, r3, #16
 8010a84:	b292      	uxth	r2, r2
 8010a86:	041b      	lsls	r3, r3, #16
 8010a88:	4313      	orrs	r3, r2
 8010a8a:	c008      	stmia	r0!, {r3}
 8010a8c:	9b05      	ldr	r3, [sp, #20]
 8010a8e:	42a3      	cmp	r3, r4
 8010a90:	d2ec      	bcs.n	8010a6c <quorem+0xb0>
 8010a92:	9b01      	ldr	r3, [sp, #4]
 8010a94:	9a03      	ldr	r2, [sp, #12]
 8010a96:	009b      	lsls	r3, r3, #2
 8010a98:	18d3      	adds	r3, r2, r3
 8010a9a:	681a      	ldr	r2, [r3, #0]
 8010a9c:	2a00      	cmp	r2, #0
 8010a9e:	d015      	beq.n	8010acc <quorem+0x110>
 8010aa0:	9802      	ldr	r0, [sp, #8]
 8010aa2:	b009      	add	sp, #36	; 0x24
 8010aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010aa6:	6823      	ldr	r3, [r4, #0]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d106      	bne.n	8010aba <quorem+0xfe>
 8010aac:	9b01      	ldr	r3, [sp, #4]
 8010aae:	3b01      	subs	r3, #1
 8010ab0:	9301      	str	r3, [sp, #4]
 8010ab2:	9b03      	ldr	r3, [sp, #12]
 8010ab4:	3c04      	subs	r4, #4
 8010ab6:	42a3      	cmp	r3, r4
 8010ab8:	d3f5      	bcc.n	8010aa6 <quorem+0xea>
 8010aba:	9b01      	ldr	r3, [sp, #4]
 8010abc:	613b      	str	r3, [r7, #16]
 8010abe:	e7c7      	b.n	8010a50 <quorem+0x94>
 8010ac0:	681a      	ldr	r2, [r3, #0]
 8010ac2:	2a00      	cmp	r2, #0
 8010ac4:	d106      	bne.n	8010ad4 <quorem+0x118>
 8010ac6:	9a01      	ldr	r2, [sp, #4]
 8010ac8:	3a01      	subs	r2, #1
 8010aca:	9201      	str	r2, [sp, #4]
 8010acc:	9a03      	ldr	r2, [sp, #12]
 8010ace:	3b04      	subs	r3, #4
 8010ad0:	429a      	cmp	r2, r3
 8010ad2:	d3f5      	bcc.n	8010ac0 <quorem+0x104>
 8010ad4:	9b01      	ldr	r3, [sp, #4]
 8010ad6:	613b      	str	r3, [r7, #16]
 8010ad8:	e7e2      	b.n	8010aa0 <quorem+0xe4>
	...

08010adc <_dtoa_r>:
 8010adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ade:	0014      	movs	r4, r2
 8010ae0:	001d      	movs	r5, r3
 8010ae2:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8010ae4:	b09d      	sub	sp, #116	; 0x74
 8010ae6:	9408      	str	r4, [sp, #32]
 8010ae8:	9509      	str	r5, [sp, #36]	; 0x24
 8010aea:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8010aec:	9004      	str	r0, [sp, #16]
 8010aee:	2900      	cmp	r1, #0
 8010af0:	d009      	beq.n	8010b06 <_dtoa_r+0x2a>
 8010af2:	2301      	movs	r3, #1
 8010af4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010af6:	4093      	lsls	r3, r2
 8010af8:	604a      	str	r2, [r1, #4]
 8010afa:	608b      	str	r3, [r1, #8]
 8010afc:	f7fc fc56 	bl	800d3ac <_Bfree>
 8010b00:	2300      	movs	r3, #0
 8010b02:	9a04      	ldr	r2, [sp, #16]
 8010b04:	6393      	str	r3, [r2, #56]	; 0x38
 8010b06:	2d00      	cmp	r5, #0
 8010b08:	da1e      	bge.n	8010b48 <_dtoa_r+0x6c>
 8010b0a:	2301      	movs	r3, #1
 8010b0c:	6033      	str	r3, [r6, #0]
 8010b0e:	006b      	lsls	r3, r5, #1
 8010b10:	085b      	lsrs	r3, r3, #1
 8010b12:	9309      	str	r3, [sp, #36]	; 0x24
 8010b14:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010b16:	4bb5      	ldr	r3, [pc, #724]	; (8010dec <_dtoa_r+0x310>)
 8010b18:	4ab4      	ldr	r2, [pc, #720]	; (8010dec <_dtoa_r+0x310>)
 8010b1a:	403b      	ands	r3, r7
 8010b1c:	4293      	cmp	r3, r2
 8010b1e:	d116      	bne.n	8010b4e <_dtoa_r+0x72>
 8010b20:	4bb3      	ldr	r3, [pc, #716]	; (8010df0 <_dtoa_r+0x314>)
 8010b22:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010b24:	6013      	str	r3, [r2, #0]
 8010b26:	033b      	lsls	r3, r7, #12
 8010b28:	0b1b      	lsrs	r3, r3, #12
 8010b2a:	4323      	orrs	r3, r4
 8010b2c:	d101      	bne.n	8010b32 <_dtoa_r+0x56>
 8010b2e:	f000 fdb2 	bl	8011696 <_dtoa_r+0xbba>
 8010b32:	4bb0      	ldr	r3, [pc, #704]	; (8010df4 <_dtoa_r+0x318>)
 8010b34:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010b36:	9306      	str	r3, [sp, #24]
 8010b38:	2a00      	cmp	r2, #0
 8010b3a:	d002      	beq.n	8010b42 <_dtoa_r+0x66>
 8010b3c:	4bae      	ldr	r3, [pc, #696]	; (8010df8 <_dtoa_r+0x31c>)
 8010b3e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010b40:	6013      	str	r3, [r2, #0]
 8010b42:	9806      	ldr	r0, [sp, #24]
 8010b44:	b01d      	add	sp, #116	; 0x74
 8010b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b48:	2300      	movs	r3, #0
 8010b4a:	6033      	str	r3, [r6, #0]
 8010b4c:	e7e2      	b.n	8010b14 <_dtoa_r+0x38>
 8010b4e:	9a08      	ldr	r2, [sp, #32]
 8010b50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b52:	9210      	str	r2, [sp, #64]	; 0x40
 8010b54:	9311      	str	r3, [sp, #68]	; 0x44
 8010b56:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010b58:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	f7ef fc73 	bl	8000448 <__aeabi_dcmpeq>
 8010b62:	1e06      	subs	r6, r0, #0
 8010b64:	d009      	beq.n	8010b7a <_dtoa_r+0x9e>
 8010b66:	2301      	movs	r3, #1
 8010b68:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010b6a:	6013      	str	r3, [r2, #0]
 8010b6c:	4ba3      	ldr	r3, [pc, #652]	; (8010dfc <_dtoa_r+0x320>)
 8010b6e:	9306      	str	r3, [sp, #24]
 8010b70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d0e5      	beq.n	8010b42 <_dtoa_r+0x66>
 8010b76:	4ba2      	ldr	r3, [pc, #648]	; (8010e00 <_dtoa_r+0x324>)
 8010b78:	e7e1      	b.n	8010b3e <_dtoa_r+0x62>
 8010b7a:	ab1a      	add	r3, sp, #104	; 0x68
 8010b7c:	9301      	str	r3, [sp, #4]
 8010b7e:	ab1b      	add	r3, sp, #108	; 0x6c
 8010b80:	9300      	str	r3, [sp, #0]
 8010b82:	9804      	ldr	r0, [sp, #16]
 8010b84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010b86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010b88:	f7fc ff86 	bl	800da98 <__d2b>
 8010b8c:	007a      	lsls	r2, r7, #1
 8010b8e:	9005      	str	r0, [sp, #20]
 8010b90:	0d52      	lsrs	r2, r2, #21
 8010b92:	d100      	bne.n	8010b96 <_dtoa_r+0xba>
 8010b94:	e07b      	b.n	8010c8e <_dtoa_r+0x1b2>
 8010b96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010b98:	9617      	str	r6, [sp, #92]	; 0x5c
 8010b9a:	0319      	lsls	r1, r3, #12
 8010b9c:	4b99      	ldr	r3, [pc, #612]	; (8010e04 <_dtoa_r+0x328>)
 8010b9e:	0b09      	lsrs	r1, r1, #12
 8010ba0:	430b      	orrs	r3, r1
 8010ba2:	4999      	ldr	r1, [pc, #612]	; (8010e08 <_dtoa_r+0x32c>)
 8010ba4:	1857      	adds	r7, r2, r1
 8010ba6:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010ba8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010baa:	0019      	movs	r1, r3
 8010bac:	2200      	movs	r2, #0
 8010bae:	4b97      	ldr	r3, [pc, #604]	; (8010e0c <_dtoa_r+0x330>)
 8010bb0:	f7f1 f81e 	bl	8001bf0 <__aeabi_dsub>
 8010bb4:	4a96      	ldr	r2, [pc, #600]	; (8010e10 <_dtoa_r+0x334>)
 8010bb6:	4b97      	ldr	r3, [pc, #604]	; (8010e14 <_dtoa_r+0x338>)
 8010bb8:	f7f0 fd58 	bl	800166c <__aeabi_dmul>
 8010bbc:	4a96      	ldr	r2, [pc, #600]	; (8010e18 <_dtoa_r+0x33c>)
 8010bbe:	4b97      	ldr	r3, [pc, #604]	; (8010e1c <_dtoa_r+0x340>)
 8010bc0:	f7ef fdfa 	bl	80007b8 <__aeabi_dadd>
 8010bc4:	0004      	movs	r4, r0
 8010bc6:	0038      	movs	r0, r7
 8010bc8:	000d      	movs	r5, r1
 8010bca:	f7f1 fbe7 	bl	800239c <__aeabi_i2d>
 8010bce:	4a94      	ldr	r2, [pc, #592]	; (8010e20 <_dtoa_r+0x344>)
 8010bd0:	4b94      	ldr	r3, [pc, #592]	; (8010e24 <_dtoa_r+0x348>)
 8010bd2:	f7f0 fd4b 	bl	800166c <__aeabi_dmul>
 8010bd6:	0002      	movs	r2, r0
 8010bd8:	000b      	movs	r3, r1
 8010bda:	0020      	movs	r0, r4
 8010bdc:	0029      	movs	r1, r5
 8010bde:	f7ef fdeb 	bl	80007b8 <__aeabi_dadd>
 8010be2:	0004      	movs	r4, r0
 8010be4:	000d      	movs	r5, r1
 8010be6:	f7f1 fba3 	bl	8002330 <__aeabi_d2iz>
 8010bea:	2200      	movs	r2, #0
 8010bec:	9003      	str	r0, [sp, #12]
 8010bee:	2300      	movs	r3, #0
 8010bf0:	0020      	movs	r0, r4
 8010bf2:	0029      	movs	r1, r5
 8010bf4:	f7ef fc2e 	bl	8000454 <__aeabi_dcmplt>
 8010bf8:	2800      	cmp	r0, #0
 8010bfa:	d00b      	beq.n	8010c14 <_dtoa_r+0x138>
 8010bfc:	9803      	ldr	r0, [sp, #12]
 8010bfe:	f7f1 fbcd 	bl	800239c <__aeabi_i2d>
 8010c02:	002b      	movs	r3, r5
 8010c04:	0022      	movs	r2, r4
 8010c06:	f7ef fc1f 	bl	8000448 <__aeabi_dcmpeq>
 8010c0a:	4243      	negs	r3, r0
 8010c0c:	4158      	adcs	r0, r3
 8010c0e:	9b03      	ldr	r3, [sp, #12]
 8010c10:	1a1b      	subs	r3, r3, r0
 8010c12:	9303      	str	r3, [sp, #12]
 8010c14:	2301      	movs	r3, #1
 8010c16:	9316      	str	r3, [sp, #88]	; 0x58
 8010c18:	9b03      	ldr	r3, [sp, #12]
 8010c1a:	2b16      	cmp	r3, #22
 8010c1c:	d810      	bhi.n	8010c40 <_dtoa_r+0x164>
 8010c1e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010c20:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010c22:	9a03      	ldr	r2, [sp, #12]
 8010c24:	4b80      	ldr	r3, [pc, #512]	; (8010e28 <_dtoa_r+0x34c>)
 8010c26:	00d2      	lsls	r2, r2, #3
 8010c28:	189b      	adds	r3, r3, r2
 8010c2a:	681a      	ldr	r2, [r3, #0]
 8010c2c:	685b      	ldr	r3, [r3, #4]
 8010c2e:	f7ef fc11 	bl	8000454 <__aeabi_dcmplt>
 8010c32:	2800      	cmp	r0, #0
 8010c34:	d047      	beq.n	8010cc6 <_dtoa_r+0x1ea>
 8010c36:	9b03      	ldr	r3, [sp, #12]
 8010c38:	3b01      	subs	r3, #1
 8010c3a:	9303      	str	r3, [sp, #12]
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	9316      	str	r3, [sp, #88]	; 0x58
 8010c40:	2200      	movs	r2, #0
 8010c42:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010c44:	920a      	str	r2, [sp, #40]	; 0x28
 8010c46:	1bdb      	subs	r3, r3, r7
 8010c48:	1e5a      	subs	r2, r3, #1
 8010c4a:	d53e      	bpl.n	8010cca <_dtoa_r+0x1ee>
 8010c4c:	2201      	movs	r2, #1
 8010c4e:	1ad3      	subs	r3, r2, r3
 8010c50:	930a      	str	r3, [sp, #40]	; 0x28
 8010c52:	2300      	movs	r3, #0
 8010c54:	930c      	str	r3, [sp, #48]	; 0x30
 8010c56:	9b03      	ldr	r3, [sp, #12]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	db38      	blt.n	8010cce <_dtoa_r+0x1f2>
 8010c5c:	9a03      	ldr	r2, [sp, #12]
 8010c5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c60:	4694      	mov	ip, r2
 8010c62:	4463      	add	r3, ip
 8010c64:	930c      	str	r3, [sp, #48]	; 0x30
 8010c66:	2300      	movs	r3, #0
 8010c68:	9213      	str	r2, [sp, #76]	; 0x4c
 8010c6a:	930d      	str	r3, [sp, #52]	; 0x34
 8010c6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010c6e:	2401      	movs	r4, #1
 8010c70:	2b09      	cmp	r3, #9
 8010c72:	d867      	bhi.n	8010d44 <_dtoa_r+0x268>
 8010c74:	2b05      	cmp	r3, #5
 8010c76:	dd02      	ble.n	8010c7e <_dtoa_r+0x1a2>
 8010c78:	2400      	movs	r4, #0
 8010c7a:	3b04      	subs	r3, #4
 8010c7c:	9322      	str	r3, [sp, #136]	; 0x88
 8010c7e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010c80:	1e98      	subs	r0, r3, #2
 8010c82:	2803      	cmp	r0, #3
 8010c84:	d867      	bhi.n	8010d56 <_dtoa_r+0x27a>
 8010c86:	f7ef fa45 	bl	8000114 <__gnu_thumb1_case_uqi>
 8010c8a:	3a2b      	.short	0x3a2b
 8010c8c:	5b38      	.short	0x5b38
 8010c8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010c90:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8010c92:	18f6      	adds	r6, r6, r3
 8010c94:	4b65      	ldr	r3, [pc, #404]	; (8010e2c <_dtoa_r+0x350>)
 8010c96:	18f2      	adds	r2, r6, r3
 8010c98:	2a20      	cmp	r2, #32
 8010c9a:	dd0f      	ble.n	8010cbc <_dtoa_r+0x1e0>
 8010c9c:	2340      	movs	r3, #64	; 0x40
 8010c9e:	1a9b      	subs	r3, r3, r2
 8010ca0:	409f      	lsls	r7, r3
 8010ca2:	4b63      	ldr	r3, [pc, #396]	; (8010e30 <_dtoa_r+0x354>)
 8010ca4:	0038      	movs	r0, r7
 8010ca6:	18f3      	adds	r3, r6, r3
 8010ca8:	40dc      	lsrs	r4, r3
 8010caa:	4320      	orrs	r0, r4
 8010cac:	f7f1 fba6 	bl	80023fc <__aeabi_ui2d>
 8010cb0:	2201      	movs	r2, #1
 8010cb2:	4b60      	ldr	r3, [pc, #384]	; (8010e34 <_dtoa_r+0x358>)
 8010cb4:	1e77      	subs	r7, r6, #1
 8010cb6:	18cb      	adds	r3, r1, r3
 8010cb8:	9217      	str	r2, [sp, #92]	; 0x5c
 8010cba:	e776      	b.n	8010baa <_dtoa_r+0xce>
 8010cbc:	2320      	movs	r3, #32
 8010cbe:	0020      	movs	r0, r4
 8010cc0:	1a9b      	subs	r3, r3, r2
 8010cc2:	4098      	lsls	r0, r3
 8010cc4:	e7f2      	b.n	8010cac <_dtoa_r+0x1d0>
 8010cc6:	9016      	str	r0, [sp, #88]	; 0x58
 8010cc8:	e7ba      	b.n	8010c40 <_dtoa_r+0x164>
 8010cca:	920c      	str	r2, [sp, #48]	; 0x30
 8010ccc:	e7c3      	b.n	8010c56 <_dtoa_r+0x17a>
 8010cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010cd0:	9a03      	ldr	r2, [sp, #12]
 8010cd2:	1a9b      	subs	r3, r3, r2
 8010cd4:	930a      	str	r3, [sp, #40]	; 0x28
 8010cd6:	4253      	negs	r3, r2
 8010cd8:	930d      	str	r3, [sp, #52]	; 0x34
 8010cda:	2300      	movs	r3, #0
 8010cdc:	9313      	str	r3, [sp, #76]	; 0x4c
 8010cde:	e7c5      	b.n	8010c6c <_dtoa_r+0x190>
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	930f      	str	r3, [sp, #60]	; 0x3c
 8010ce4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010ce6:	930b      	str	r3, [sp, #44]	; 0x2c
 8010ce8:	9307      	str	r3, [sp, #28]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	dc13      	bgt.n	8010d16 <_dtoa_r+0x23a>
 8010cee:	2301      	movs	r3, #1
 8010cf0:	001a      	movs	r2, r3
 8010cf2:	930b      	str	r3, [sp, #44]	; 0x2c
 8010cf4:	9307      	str	r3, [sp, #28]
 8010cf6:	9223      	str	r2, [sp, #140]	; 0x8c
 8010cf8:	e00d      	b.n	8010d16 <_dtoa_r+0x23a>
 8010cfa:	2301      	movs	r3, #1
 8010cfc:	e7f1      	b.n	8010ce2 <_dtoa_r+0x206>
 8010cfe:	2300      	movs	r3, #0
 8010d00:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8010d02:	930f      	str	r3, [sp, #60]	; 0x3c
 8010d04:	4694      	mov	ip, r2
 8010d06:	9b03      	ldr	r3, [sp, #12]
 8010d08:	4463      	add	r3, ip
 8010d0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8010d0c:	3301      	adds	r3, #1
 8010d0e:	9307      	str	r3, [sp, #28]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	dc00      	bgt.n	8010d16 <_dtoa_r+0x23a>
 8010d14:	2301      	movs	r3, #1
 8010d16:	2100      	movs	r1, #0
 8010d18:	2204      	movs	r2, #4
 8010d1a:	0010      	movs	r0, r2
 8010d1c:	3014      	adds	r0, #20
 8010d1e:	4298      	cmp	r0, r3
 8010d20:	d91d      	bls.n	8010d5e <_dtoa_r+0x282>
 8010d22:	9b04      	ldr	r3, [sp, #16]
 8010d24:	0018      	movs	r0, r3
 8010d26:	63d9      	str	r1, [r3, #60]	; 0x3c
 8010d28:	f7fc fb18 	bl	800d35c <_Balloc>
 8010d2c:	9006      	str	r0, [sp, #24]
 8010d2e:	2800      	cmp	r0, #0
 8010d30:	d118      	bne.n	8010d64 <_dtoa_r+0x288>
 8010d32:	21b0      	movs	r1, #176	; 0xb0
 8010d34:	4b40      	ldr	r3, [pc, #256]	; (8010e38 <_dtoa_r+0x35c>)
 8010d36:	4841      	ldr	r0, [pc, #260]	; (8010e3c <_dtoa_r+0x360>)
 8010d38:	9a06      	ldr	r2, [sp, #24]
 8010d3a:	31ff      	adds	r1, #255	; 0xff
 8010d3c:	f7ff fdd2 	bl	80108e4 <__assert_func>
 8010d40:	2301      	movs	r3, #1
 8010d42:	e7dd      	b.n	8010d00 <_dtoa_r+0x224>
 8010d44:	2300      	movs	r3, #0
 8010d46:	940f      	str	r4, [sp, #60]	; 0x3c
 8010d48:	9322      	str	r3, [sp, #136]	; 0x88
 8010d4a:	3b01      	subs	r3, #1
 8010d4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8010d4e:	9307      	str	r3, [sp, #28]
 8010d50:	2200      	movs	r2, #0
 8010d52:	3313      	adds	r3, #19
 8010d54:	e7cf      	b.n	8010cf6 <_dtoa_r+0x21a>
 8010d56:	2301      	movs	r3, #1
 8010d58:	930f      	str	r3, [sp, #60]	; 0x3c
 8010d5a:	3b02      	subs	r3, #2
 8010d5c:	e7f6      	b.n	8010d4c <_dtoa_r+0x270>
 8010d5e:	3101      	adds	r1, #1
 8010d60:	0052      	lsls	r2, r2, #1
 8010d62:	e7da      	b.n	8010d1a <_dtoa_r+0x23e>
 8010d64:	9b04      	ldr	r3, [sp, #16]
 8010d66:	9a06      	ldr	r2, [sp, #24]
 8010d68:	639a      	str	r2, [r3, #56]	; 0x38
 8010d6a:	9b07      	ldr	r3, [sp, #28]
 8010d6c:	2b0e      	cmp	r3, #14
 8010d6e:	d900      	bls.n	8010d72 <_dtoa_r+0x296>
 8010d70:	e0e3      	b.n	8010f3a <_dtoa_r+0x45e>
 8010d72:	2c00      	cmp	r4, #0
 8010d74:	d100      	bne.n	8010d78 <_dtoa_r+0x29c>
 8010d76:	e0e0      	b.n	8010f3a <_dtoa_r+0x45e>
 8010d78:	9b03      	ldr	r3, [sp, #12]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	dd62      	ble.n	8010e44 <_dtoa_r+0x368>
 8010d7e:	210f      	movs	r1, #15
 8010d80:	9a03      	ldr	r2, [sp, #12]
 8010d82:	4b29      	ldr	r3, [pc, #164]	; (8010e28 <_dtoa_r+0x34c>)
 8010d84:	400a      	ands	r2, r1
 8010d86:	00d2      	lsls	r2, r2, #3
 8010d88:	189b      	adds	r3, r3, r2
 8010d8a:	681e      	ldr	r6, [r3, #0]
 8010d8c:	685f      	ldr	r7, [r3, #4]
 8010d8e:	9b03      	ldr	r3, [sp, #12]
 8010d90:	2402      	movs	r4, #2
 8010d92:	111d      	asrs	r5, r3, #4
 8010d94:	05db      	lsls	r3, r3, #23
 8010d96:	d50a      	bpl.n	8010dae <_dtoa_r+0x2d2>
 8010d98:	4b29      	ldr	r3, [pc, #164]	; (8010e40 <_dtoa_r+0x364>)
 8010d9a:	400d      	ands	r5, r1
 8010d9c:	6a1a      	ldr	r2, [r3, #32]
 8010d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010da0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010da2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010da4:	f7f0 f868 	bl	8000e78 <__aeabi_ddiv>
 8010da8:	9008      	str	r0, [sp, #32]
 8010daa:	9109      	str	r1, [sp, #36]	; 0x24
 8010dac:	3401      	adds	r4, #1
 8010dae:	4b24      	ldr	r3, [pc, #144]	; (8010e40 <_dtoa_r+0x364>)
 8010db0:	930e      	str	r3, [sp, #56]	; 0x38
 8010db2:	2d00      	cmp	r5, #0
 8010db4:	d108      	bne.n	8010dc8 <_dtoa_r+0x2ec>
 8010db6:	9808      	ldr	r0, [sp, #32]
 8010db8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010dba:	0032      	movs	r2, r6
 8010dbc:	003b      	movs	r3, r7
 8010dbe:	f7f0 f85b 	bl	8000e78 <__aeabi_ddiv>
 8010dc2:	9008      	str	r0, [sp, #32]
 8010dc4:	9109      	str	r1, [sp, #36]	; 0x24
 8010dc6:	e058      	b.n	8010e7a <_dtoa_r+0x39e>
 8010dc8:	2301      	movs	r3, #1
 8010dca:	421d      	tst	r5, r3
 8010dcc:	d009      	beq.n	8010de2 <_dtoa_r+0x306>
 8010dce:	18e4      	adds	r4, r4, r3
 8010dd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010dd2:	0030      	movs	r0, r6
 8010dd4:	681a      	ldr	r2, [r3, #0]
 8010dd6:	685b      	ldr	r3, [r3, #4]
 8010dd8:	0039      	movs	r1, r7
 8010dda:	f7f0 fc47 	bl	800166c <__aeabi_dmul>
 8010dde:	0006      	movs	r6, r0
 8010de0:	000f      	movs	r7, r1
 8010de2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010de4:	106d      	asrs	r5, r5, #1
 8010de6:	3308      	adds	r3, #8
 8010de8:	e7e2      	b.n	8010db0 <_dtoa_r+0x2d4>
 8010dea:	46c0      	nop			; (mov r8, r8)
 8010dec:	7ff00000 	.word	0x7ff00000
 8010df0:	0000270f 	.word	0x0000270f
 8010df4:	08015305 	.word	0x08015305
 8010df8:	08015308 	.word	0x08015308
 8010dfc:	08015276 	.word	0x08015276
 8010e00:	08015277 	.word	0x08015277
 8010e04:	3ff00000 	.word	0x3ff00000
 8010e08:	fffffc01 	.word	0xfffffc01
 8010e0c:	3ff80000 	.word	0x3ff80000
 8010e10:	636f4361 	.word	0x636f4361
 8010e14:	3fd287a7 	.word	0x3fd287a7
 8010e18:	8b60c8b3 	.word	0x8b60c8b3
 8010e1c:	3fc68a28 	.word	0x3fc68a28
 8010e20:	509f79fb 	.word	0x509f79fb
 8010e24:	3fd34413 	.word	0x3fd34413
 8010e28:	08015170 	.word	0x08015170
 8010e2c:	00000432 	.word	0x00000432
 8010e30:	00000412 	.word	0x00000412
 8010e34:	fe100000 	.word	0xfe100000
 8010e38:	08015079 	.word	0x08015079
 8010e3c:	08015309 	.word	0x08015309
 8010e40:	08015148 	.word	0x08015148
 8010e44:	9b03      	ldr	r3, [sp, #12]
 8010e46:	2402      	movs	r4, #2
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d016      	beq.n	8010e7a <_dtoa_r+0x39e>
 8010e4c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010e4e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010e50:	220f      	movs	r2, #15
 8010e52:	425d      	negs	r5, r3
 8010e54:	402a      	ands	r2, r5
 8010e56:	4bdd      	ldr	r3, [pc, #884]	; (80111cc <_dtoa_r+0x6f0>)
 8010e58:	00d2      	lsls	r2, r2, #3
 8010e5a:	189b      	adds	r3, r3, r2
 8010e5c:	681a      	ldr	r2, [r3, #0]
 8010e5e:	685b      	ldr	r3, [r3, #4]
 8010e60:	f7f0 fc04 	bl	800166c <__aeabi_dmul>
 8010e64:	2701      	movs	r7, #1
 8010e66:	2300      	movs	r3, #0
 8010e68:	9008      	str	r0, [sp, #32]
 8010e6a:	9109      	str	r1, [sp, #36]	; 0x24
 8010e6c:	4ed8      	ldr	r6, [pc, #864]	; (80111d0 <_dtoa_r+0x6f4>)
 8010e6e:	112d      	asrs	r5, r5, #4
 8010e70:	2d00      	cmp	r5, #0
 8010e72:	d000      	beq.n	8010e76 <_dtoa_r+0x39a>
 8010e74:	e091      	b.n	8010f9a <_dtoa_r+0x4be>
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d1a3      	bne.n	8010dc2 <_dtoa_r+0x2e6>
 8010e7a:	9e08      	ldr	r6, [sp, #32]
 8010e7c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010e7e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d100      	bne.n	8010e86 <_dtoa_r+0x3aa>
 8010e84:	e094      	b.n	8010fb0 <_dtoa_r+0x4d4>
 8010e86:	2200      	movs	r2, #0
 8010e88:	0030      	movs	r0, r6
 8010e8a:	0039      	movs	r1, r7
 8010e8c:	4bd1      	ldr	r3, [pc, #836]	; (80111d4 <_dtoa_r+0x6f8>)
 8010e8e:	f7ef fae1 	bl	8000454 <__aeabi_dcmplt>
 8010e92:	2800      	cmp	r0, #0
 8010e94:	d100      	bne.n	8010e98 <_dtoa_r+0x3bc>
 8010e96:	e08b      	b.n	8010fb0 <_dtoa_r+0x4d4>
 8010e98:	9b07      	ldr	r3, [sp, #28]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d100      	bne.n	8010ea0 <_dtoa_r+0x3c4>
 8010e9e:	e087      	b.n	8010fb0 <_dtoa_r+0x4d4>
 8010ea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	dd45      	ble.n	8010f32 <_dtoa_r+0x456>
 8010ea6:	9b03      	ldr	r3, [sp, #12]
 8010ea8:	2200      	movs	r2, #0
 8010eaa:	3b01      	subs	r3, #1
 8010eac:	930e      	str	r3, [sp, #56]	; 0x38
 8010eae:	0030      	movs	r0, r6
 8010eb0:	4bc9      	ldr	r3, [pc, #804]	; (80111d8 <_dtoa_r+0x6fc>)
 8010eb2:	0039      	movs	r1, r7
 8010eb4:	f7f0 fbda 	bl	800166c <__aeabi_dmul>
 8010eb8:	9008      	str	r0, [sp, #32]
 8010eba:	9109      	str	r1, [sp, #36]	; 0x24
 8010ebc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ebe:	3401      	adds	r4, #1
 8010ec0:	0020      	movs	r0, r4
 8010ec2:	9e08      	ldr	r6, [sp, #32]
 8010ec4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010ec6:	9312      	str	r3, [sp, #72]	; 0x48
 8010ec8:	f7f1 fa68 	bl	800239c <__aeabi_i2d>
 8010ecc:	0032      	movs	r2, r6
 8010ece:	003b      	movs	r3, r7
 8010ed0:	f7f0 fbcc 	bl	800166c <__aeabi_dmul>
 8010ed4:	2200      	movs	r2, #0
 8010ed6:	4bc1      	ldr	r3, [pc, #772]	; (80111dc <_dtoa_r+0x700>)
 8010ed8:	f7ef fc6e 	bl	80007b8 <__aeabi_dadd>
 8010edc:	4ac0      	ldr	r2, [pc, #768]	; (80111e0 <_dtoa_r+0x704>)
 8010ede:	9014      	str	r0, [sp, #80]	; 0x50
 8010ee0:	9115      	str	r1, [sp, #84]	; 0x54
 8010ee2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010ee4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8010ee6:	4694      	mov	ip, r2
 8010ee8:	9308      	str	r3, [sp, #32]
 8010eea:	9409      	str	r4, [sp, #36]	; 0x24
 8010eec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010eee:	4463      	add	r3, ip
 8010ef0:	9318      	str	r3, [sp, #96]	; 0x60
 8010ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8010ef4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d15e      	bne.n	8010fb8 <_dtoa_r+0x4dc>
 8010efa:	2200      	movs	r2, #0
 8010efc:	4bb9      	ldr	r3, [pc, #740]	; (80111e4 <_dtoa_r+0x708>)
 8010efe:	0030      	movs	r0, r6
 8010f00:	0039      	movs	r1, r7
 8010f02:	f7f0 fe75 	bl	8001bf0 <__aeabi_dsub>
 8010f06:	9a08      	ldr	r2, [sp, #32]
 8010f08:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010f0a:	0004      	movs	r4, r0
 8010f0c:	000d      	movs	r5, r1
 8010f0e:	f7ef fab5 	bl	800047c <__aeabi_dcmpgt>
 8010f12:	2800      	cmp	r0, #0
 8010f14:	d000      	beq.n	8010f18 <_dtoa_r+0x43c>
 8010f16:	e2b3      	b.n	8011480 <_dtoa_r+0x9a4>
 8010f18:	48b3      	ldr	r0, [pc, #716]	; (80111e8 <_dtoa_r+0x70c>)
 8010f1a:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010f1c:	4684      	mov	ip, r0
 8010f1e:	4461      	add	r1, ip
 8010f20:	000b      	movs	r3, r1
 8010f22:	0020      	movs	r0, r4
 8010f24:	0029      	movs	r1, r5
 8010f26:	9a08      	ldr	r2, [sp, #32]
 8010f28:	f7ef fa94 	bl	8000454 <__aeabi_dcmplt>
 8010f2c:	2800      	cmp	r0, #0
 8010f2e:	d000      	beq.n	8010f32 <_dtoa_r+0x456>
 8010f30:	e2a3      	b.n	801147a <_dtoa_r+0x99e>
 8010f32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010f34:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8010f36:	9308      	str	r3, [sp, #32]
 8010f38:	9409      	str	r4, [sp, #36]	; 0x24
 8010f3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	da00      	bge.n	8010f42 <_dtoa_r+0x466>
 8010f40:	e179      	b.n	8011236 <_dtoa_r+0x75a>
 8010f42:	9a03      	ldr	r2, [sp, #12]
 8010f44:	2a0e      	cmp	r2, #14
 8010f46:	dd00      	ble.n	8010f4a <_dtoa_r+0x46e>
 8010f48:	e175      	b.n	8011236 <_dtoa_r+0x75a>
 8010f4a:	4ba0      	ldr	r3, [pc, #640]	; (80111cc <_dtoa_r+0x6f0>)
 8010f4c:	00d2      	lsls	r2, r2, #3
 8010f4e:	189b      	adds	r3, r3, r2
 8010f50:	681e      	ldr	r6, [r3, #0]
 8010f52:	685f      	ldr	r7, [r3, #4]
 8010f54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	db00      	blt.n	8010f5c <_dtoa_r+0x480>
 8010f5a:	e0e5      	b.n	8011128 <_dtoa_r+0x64c>
 8010f5c:	9b07      	ldr	r3, [sp, #28]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	dd00      	ble.n	8010f64 <_dtoa_r+0x488>
 8010f62:	e0e1      	b.n	8011128 <_dtoa_r+0x64c>
 8010f64:	d000      	beq.n	8010f68 <_dtoa_r+0x48c>
 8010f66:	e288      	b.n	801147a <_dtoa_r+0x99e>
 8010f68:	2200      	movs	r2, #0
 8010f6a:	0030      	movs	r0, r6
 8010f6c:	0039      	movs	r1, r7
 8010f6e:	4b9d      	ldr	r3, [pc, #628]	; (80111e4 <_dtoa_r+0x708>)
 8010f70:	f7f0 fb7c 	bl	800166c <__aeabi_dmul>
 8010f74:	9a08      	ldr	r2, [sp, #32]
 8010f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f78:	f7ef fa8a 	bl	8000490 <__aeabi_dcmpge>
 8010f7c:	9e07      	ldr	r6, [sp, #28]
 8010f7e:	0037      	movs	r7, r6
 8010f80:	2800      	cmp	r0, #0
 8010f82:	d000      	beq.n	8010f86 <_dtoa_r+0x4aa>
 8010f84:	e25f      	b.n	8011446 <_dtoa_r+0x96a>
 8010f86:	9b06      	ldr	r3, [sp, #24]
 8010f88:	9a06      	ldr	r2, [sp, #24]
 8010f8a:	3301      	adds	r3, #1
 8010f8c:	9308      	str	r3, [sp, #32]
 8010f8e:	2331      	movs	r3, #49	; 0x31
 8010f90:	7013      	strb	r3, [r2, #0]
 8010f92:	9b03      	ldr	r3, [sp, #12]
 8010f94:	3301      	adds	r3, #1
 8010f96:	9303      	str	r3, [sp, #12]
 8010f98:	e25a      	b.n	8011450 <_dtoa_r+0x974>
 8010f9a:	423d      	tst	r5, r7
 8010f9c:	d005      	beq.n	8010faa <_dtoa_r+0x4ce>
 8010f9e:	6832      	ldr	r2, [r6, #0]
 8010fa0:	6873      	ldr	r3, [r6, #4]
 8010fa2:	f7f0 fb63 	bl	800166c <__aeabi_dmul>
 8010fa6:	003b      	movs	r3, r7
 8010fa8:	3401      	adds	r4, #1
 8010faa:	106d      	asrs	r5, r5, #1
 8010fac:	3608      	adds	r6, #8
 8010fae:	e75f      	b.n	8010e70 <_dtoa_r+0x394>
 8010fb0:	9b03      	ldr	r3, [sp, #12]
 8010fb2:	930e      	str	r3, [sp, #56]	; 0x38
 8010fb4:	9b07      	ldr	r3, [sp, #28]
 8010fb6:	e783      	b.n	8010ec0 <_dtoa_r+0x3e4>
 8010fb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010fba:	4b84      	ldr	r3, [pc, #528]	; (80111cc <_dtoa_r+0x6f0>)
 8010fbc:	3a01      	subs	r2, #1
 8010fbe:	00d2      	lsls	r2, r2, #3
 8010fc0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010fc2:	189b      	adds	r3, r3, r2
 8010fc4:	9c08      	ldr	r4, [sp, #32]
 8010fc6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010fc8:	681a      	ldr	r2, [r3, #0]
 8010fca:	685b      	ldr	r3, [r3, #4]
 8010fcc:	2900      	cmp	r1, #0
 8010fce:	d051      	beq.n	8011074 <_dtoa_r+0x598>
 8010fd0:	2000      	movs	r0, #0
 8010fd2:	4986      	ldr	r1, [pc, #536]	; (80111ec <_dtoa_r+0x710>)
 8010fd4:	f7ef ff50 	bl	8000e78 <__aeabi_ddiv>
 8010fd8:	0022      	movs	r2, r4
 8010fda:	002b      	movs	r3, r5
 8010fdc:	f7f0 fe08 	bl	8001bf0 <__aeabi_dsub>
 8010fe0:	9a06      	ldr	r2, [sp, #24]
 8010fe2:	0004      	movs	r4, r0
 8010fe4:	4694      	mov	ip, r2
 8010fe6:	000d      	movs	r5, r1
 8010fe8:	9b06      	ldr	r3, [sp, #24]
 8010fea:	9314      	str	r3, [sp, #80]	; 0x50
 8010fec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010fee:	4463      	add	r3, ip
 8010ff0:	9318      	str	r3, [sp, #96]	; 0x60
 8010ff2:	0039      	movs	r1, r7
 8010ff4:	0030      	movs	r0, r6
 8010ff6:	f7f1 f99b 	bl	8002330 <__aeabi_d2iz>
 8010ffa:	9012      	str	r0, [sp, #72]	; 0x48
 8010ffc:	f7f1 f9ce 	bl	800239c <__aeabi_i2d>
 8011000:	0002      	movs	r2, r0
 8011002:	000b      	movs	r3, r1
 8011004:	0030      	movs	r0, r6
 8011006:	0039      	movs	r1, r7
 8011008:	f7f0 fdf2 	bl	8001bf0 <__aeabi_dsub>
 801100c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801100e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011010:	3301      	adds	r3, #1
 8011012:	9308      	str	r3, [sp, #32]
 8011014:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011016:	0006      	movs	r6, r0
 8011018:	3330      	adds	r3, #48	; 0x30
 801101a:	7013      	strb	r3, [r2, #0]
 801101c:	0022      	movs	r2, r4
 801101e:	002b      	movs	r3, r5
 8011020:	000f      	movs	r7, r1
 8011022:	f7ef fa17 	bl	8000454 <__aeabi_dcmplt>
 8011026:	2800      	cmp	r0, #0
 8011028:	d174      	bne.n	8011114 <_dtoa_r+0x638>
 801102a:	0032      	movs	r2, r6
 801102c:	003b      	movs	r3, r7
 801102e:	2000      	movs	r0, #0
 8011030:	4968      	ldr	r1, [pc, #416]	; (80111d4 <_dtoa_r+0x6f8>)
 8011032:	f7f0 fddd 	bl	8001bf0 <__aeabi_dsub>
 8011036:	0022      	movs	r2, r4
 8011038:	002b      	movs	r3, r5
 801103a:	f7ef fa0b 	bl	8000454 <__aeabi_dcmplt>
 801103e:	2800      	cmp	r0, #0
 8011040:	d000      	beq.n	8011044 <_dtoa_r+0x568>
 8011042:	e0d7      	b.n	80111f4 <_dtoa_r+0x718>
 8011044:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011046:	9a08      	ldr	r2, [sp, #32]
 8011048:	4293      	cmp	r3, r2
 801104a:	d100      	bne.n	801104e <_dtoa_r+0x572>
 801104c:	e771      	b.n	8010f32 <_dtoa_r+0x456>
 801104e:	2200      	movs	r2, #0
 8011050:	0020      	movs	r0, r4
 8011052:	0029      	movs	r1, r5
 8011054:	4b60      	ldr	r3, [pc, #384]	; (80111d8 <_dtoa_r+0x6fc>)
 8011056:	f7f0 fb09 	bl	800166c <__aeabi_dmul>
 801105a:	4b5f      	ldr	r3, [pc, #380]	; (80111d8 <_dtoa_r+0x6fc>)
 801105c:	0004      	movs	r4, r0
 801105e:	000d      	movs	r5, r1
 8011060:	0030      	movs	r0, r6
 8011062:	0039      	movs	r1, r7
 8011064:	2200      	movs	r2, #0
 8011066:	f7f0 fb01 	bl	800166c <__aeabi_dmul>
 801106a:	9b08      	ldr	r3, [sp, #32]
 801106c:	0006      	movs	r6, r0
 801106e:	000f      	movs	r7, r1
 8011070:	9314      	str	r3, [sp, #80]	; 0x50
 8011072:	e7be      	b.n	8010ff2 <_dtoa_r+0x516>
 8011074:	0020      	movs	r0, r4
 8011076:	0029      	movs	r1, r5
 8011078:	f7f0 faf8 	bl	800166c <__aeabi_dmul>
 801107c:	9a06      	ldr	r2, [sp, #24]
 801107e:	9b06      	ldr	r3, [sp, #24]
 8011080:	4694      	mov	ip, r2
 8011082:	9308      	str	r3, [sp, #32]
 8011084:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011086:	9014      	str	r0, [sp, #80]	; 0x50
 8011088:	9115      	str	r1, [sp, #84]	; 0x54
 801108a:	4463      	add	r3, ip
 801108c:	9319      	str	r3, [sp, #100]	; 0x64
 801108e:	0030      	movs	r0, r6
 8011090:	0039      	movs	r1, r7
 8011092:	f7f1 f94d 	bl	8002330 <__aeabi_d2iz>
 8011096:	9018      	str	r0, [sp, #96]	; 0x60
 8011098:	f7f1 f980 	bl	800239c <__aeabi_i2d>
 801109c:	0002      	movs	r2, r0
 801109e:	000b      	movs	r3, r1
 80110a0:	0030      	movs	r0, r6
 80110a2:	0039      	movs	r1, r7
 80110a4:	f7f0 fda4 	bl	8001bf0 <__aeabi_dsub>
 80110a8:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80110aa:	9b08      	ldr	r3, [sp, #32]
 80110ac:	3630      	adds	r6, #48	; 0x30
 80110ae:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80110b0:	701e      	strb	r6, [r3, #0]
 80110b2:	3301      	adds	r3, #1
 80110b4:	0004      	movs	r4, r0
 80110b6:	000d      	movs	r5, r1
 80110b8:	9308      	str	r3, [sp, #32]
 80110ba:	4293      	cmp	r3, r2
 80110bc:	d12d      	bne.n	801111a <_dtoa_r+0x63e>
 80110be:	9814      	ldr	r0, [sp, #80]	; 0x50
 80110c0:	9915      	ldr	r1, [sp, #84]	; 0x54
 80110c2:	9a06      	ldr	r2, [sp, #24]
 80110c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80110c6:	4694      	mov	ip, r2
 80110c8:	4463      	add	r3, ip
 80110ca:	2200      	movs	r2, #0
 80110cc:	9308      	str	r3, [sp, #32]
 80110ce:	4b47      	ldr	r3, [pc, #284]	; (80111ec <_dtoa_r+0x710>)
 80110d0:	f7ef fb72 	bl	80007b8 <__aeabi_dadd>
 80110d4:	0002      	movs	r2, r0
 80110d6:	000b      	movs	r3, r1
 80110d8:	0020      	movs	r0, r4
 80110da:	0029      	movs	r1, r5
 80110dc:	f7ef f9ce 	bl	800047c <__aeabi_dcmpgt>
 80110e0:	2800      	cmp	r0, #0
 80110e2:	d000      	beq.n	80110e6 <_dtoa_r+0x60a>
 80110e4:	e086      	b.n	80111f4 <_dtoa_r+0x718>
 80110e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80110e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80110ea:	2000      	movs	r0, #0
 80110ec:	493f      	ldr	r1, [pc, #252]	; (80111ec <_dtoa_r+0x710>)
 80110ee:	f7f0 fd7f 	bl	8001bf0 <__aeabi_dsub>
 80110f2:	0002      	movs	r2, r0
 80110f4:	000b      	movs	r3, r1
 80110f6:	0020      	movs	r0, r4
 80110f8:	0029      	movs	r1, r5
 80110fa:	f7ef f9ab 	bl	8000454 <__aeabi_dcmplt>
 80110fe:	2800      	cmp	r0, #0
 8011100:	d100      	bne.n	8011104 <_dtoa_r+0x628>
 8011102:	e716      	b.n	8010f32 <_dtoa_r+0x456>
 8011104:	9b08      	ldr	r3, [sp, #32]
 8011106:	001a      	movs	r2, r3
 8011108:	3a01      	subs	r2, #1
 801110a:	9208      	str	r2, [sp, #32]
 801110c:	7812      	ldrb	r2, [r2, #0]
 801110e:	2a30      	cmp	r2, #48	; 0x30
 8011110:	d0f8      	beq.n	8011104 <_dtoa_r+0x628>
 8011112:	9308      	str	r3, [sp, #32]
 8011114:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011116:	9303      	str	r3, [sp, #12]
 8011118:	e046      	b.n	80111a8 <_dtoa_r+0x6cc>
 801111a:	2200      	movs	r2, #0
 801111c:	4b2e      	ldr	r3, [pc, #184]	; (80111d8 <_dtoa_r+0x6fc>)
 801111e:	f7f0 faa5 	bl	800166c <__aeabi_dmul>
 8011122:	0006      	movs	r6, r0
 8011124:	000f      	movs	r7, r1
 8011126:	e7b2      	b.n	801108e <_dtoa_r+0x5b2>
 8011128:	9b06      	ldr	r3, [sp, #24]
 801112a:	9a06      	ldr	r2, [sp, #24]
 801112c:	930a      	str	r3, [sp, #40]	; 0x28
 801112e:	9b07      	ldr	r3, [sp, #28]
 8011130:	9c08      	ldr	r4, [sp, #32]
 8011132:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011134:	3b01      	subs	r3, #1
 8011136:	189b      	adds	r3, r3, r2
 8011138:	930b      	str	r3, [sp, #44]	; 0x2c
 801113a:	0032      	movs	r2, r6
 801113c:	003b      	movs	r3, r7
 801113e:	0020      	movs	r0, r4
 8011140:	0029      	movs	r1, r5
 8011142:	f7ef fe99 	bl	8000e78 <__aeabi_ddiv>
 8011146:	f7f1 f8f3 	bl	8002330 <__aeabi_d2iz>
 801114a:	9007      	str	r0, [sp, #28]
 801114c:	f7f1 f926 	bl	800239c <__aeabi_i2d>
 8011150:	0032      	movs	r2, r6
 8011152:	003b      	movs	r3, r7
 8011154:	f7f0 fa8a 	bl	800166c <__aeabi_dmul>
 8011158:	0002      	movs	r2, r0
 801115a:	000b      	movs	r3, r1
 801115c:	0020      	movs	r0, r4
 801115e:	0029      	movs	r1, r5
 8011160:	f7f0 fd46 	bl	8001bf0 <__aeabi_dsub>
 8011164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011166:	001a      	movs	r2, r3
 8011168:	3201      	adds	r2, #1
 801116a:	920a      	str	r2, [sp, #40]	; 0x28
 801116c:	9208      	str	r2, [sp, #32]
 801116e:	9a07      	ldr	r2, [sp, #28]
 8011170:	3230      	adds	r2, #48	; 0x30
 8011172:	701a      	strb	r2, [r3, #0]
 8011174:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011176:	429a      	cmp	r2, r3
 8011178:	d14f      	bne.n	801121a <_dtoa_r+0x73e>
 801117a:	0002      	movs	r2, r0
 801117c:	000b      	movs	r3, r1
 801117e:	f7ef fb1b 	bl	80007b8 <__aeabi_dadd>
 8011182:	0032      	movs	r2, r6
 8011184:	003b      	movs	r3, r7
 8011186:	0004      	movs	r4, r0
 8011188:	000d      	movs	r5, r1
 801118a:	f7ef f977 	bl	800047c <__aeabi_dcmpgt>
 801118e:	2800      	cmp	r0, #0
 8011190:	d12e      	bne.n	80111f0 <_dtoa_r+0x714>
 8011192:	0032      	movs	r2, r6
 8011194:	003b      	movs	r3, r7
 8011196:	0020      	movs	r0, r4
 8011198:	0029      	movs	r1, r5
 801119a:	f7ef f955 	bl	8000448 <__aeabi_dcmpeq>
 801119e:	2800      	cmp	r0, #0
 80111a0:	d002      	beq.n	80111a8 <_dtoa_r+0x6cc>
 80111a2:	9b07      	ldr	r3, [sp, #28]
 80111a4:	07de      	lsls	r6, r3, #31
 80111a6:	d423      	bmi.n	80111f0 <_dtoa_r+0x714>
 80111a8:	9905      	ldr	r1, [sp, #20]
 80111aa:	9804      	ldr	r0, [sp, #16]
 80111ac:	f7fc f8fe 	bl	800d3ac <_Bfree>
 80111b0:	2300      	movs	r3, #0
 80111b2:	9a08      	ldr	r2, [sp, #32]
 80111b4:	7013      	strb	r3, [r2, #0]
 80111b6:	9b03      	ldr	r3, [sp, #12]
 80111b8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80111ba:	3301      	adds	r3, #1
 80111bc:	6013      	str	r3, [r2, #0]
 80111be:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d100      	bne.n	80111c6 <_dtoa_r+0x6ea>
 80111c4:	e4bd      	b.n	8010b42 <_dtoa_r+0x66>
 80111c6:	9a08      	ldr	r2, [sp, #32]
 80111c8:	601a      	str	r2, [r3, #0]
 80111ca:	e4ba      	b.n	8010b42 <_dtoa_r+0x66>
 80111cc:	08015170 	.word	0x08015170
 80111d0:	08015148 	.word	0x08015148
 80111d4:	3ff00000 	.word	0x3ff00000
 80111d8:	40240000 	.word	0x40240000
 80111dc:	401c0000 	.word	0x401c0000
 80111e0:	fcc00000 	.word	0xfcc00000
 80111e4:	40140000 	.word	0x40140000
 80111e8:	7cc00000 	.word	0x7cc00000
 80111ec:	3fe00000 	.word	0x3fe00000
 80111f0:	9b03      	ldr	r3, [sp, #12]
 80111f2:	930e      	str	r3, [sp, #56]	; 0x38
 80111f4:	9b08      	ldr	r3, [sp, #32]
 80111f6:	9308      	str	r3, [sp, #32]
 80111f8:	3b01      	subs	r3, #1
 80111fa:	781a      	ldrb	r2, [r3, #0]
 80111fc:	2a39      	cmp	r2, #57	; 0x39
 80111fe:	d108      	bne.n	8011212 <_dtoa_r+0x736>
 8011200:	9a06      	ldr	r2, [sp, #24]
 8011202:	429a      	cmp	r2, r3
 8011204:	d1f7      	bne.n	80111f6 <_dtoa_r+0x71a>
 8011206:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011208:	9906      	ldr	r1, [sp, #24]
 801120a:	3201      	adds	r2, #1
 801120c:	920e      	str	r2, [sp, #56]	; 0x38
 801120e:	2230      	movs	r2, #48	; 0x30
 8011210:	700a      	strb	r2, [r1, #0]
 8011212:	781a      	ldrb	r2, [r3, #0]
 8011214:	3201      	adds	r2, #1
 8011216:	701a      	strb	r2, [r3, #0]
 8011218:	e77c      	b.n	8011114 <_dtoa_r+0x638>
 801121a:	2200      	movs	r2, #0
 801121c:	4ba9      	ldr	r3, [pc, #676]	; (80114c4 <_dtoa_r+0x9e8>)
 801121e:	f7f0 fa25 	bl	800166c <__aeabi_dmul>
 8011222:	2200      	movs	r2, #0
 8011224:	2300      	movs	r3, #0
 8011226:	0004      	movs	r4, r0
 8011228:	000d      	movs	r5, r1
 801122a:	f7ef f90d 	bl	8000448 <__aeabi_dcmpeq>
 801122e:	2800      	cmp	r0, #0
 8011230:	d100      	bne.n	8011234 <_dtoa_r+0x758>
 8011232:	e782      	b.n	801113a <_dtoa_r+0x65e>
 8011234:	e7b8      	b.n	80111a8 <_dtoa_r+0x6cc>
 8011236:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8011238:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801123a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801123c:	2f00      	cmp	r7, #0
 801123e:	d012      	beq.n	8011266 <_dtoa_r+0x78a>
 8011240:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8011242:	2a01      	cmp	r2, #1
 8011244:	dc6e      	bgt.n	8011324 <_dtoa_r+0x848>
 8011246:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011248:	2a00      	cmp	r2, #0
 801124a:	d065      	beq.n	8011318 <_dtoa_r+0x83c>
 801124c:	4a9e      	ldr	r2, [pc, #632]	; (80114c8 <_dtoa_r+0x9ec>)
 801124e:	189b      	adds	r3, r3, r2
 8011250:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011252:	2101      	movs	r1, #1
 8011254:	18d2      	adds	r2, r2, r3
 8011256:	920a      	str	r2, [sp, #40]	; 0x28
 8011258:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801125a:	9804      	ldr	r0, [sp, #16]
 801125c:	18d3      	adds	r3, r2, r3
 801125e:	930c      	str	r3, [sp, #48]	; 0x30
 8011260:	f7fc f986 	bl	800d570 <__i2b>
 8011264:	0007      	movs	r7, r0
 8011266:	2c00      	cmp	r4, #0
 8011268:	d00e      	beq.n	8011288 <_dtoa_r+0x7ac>
 801126a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801126c:	2b00      	cmp	r3, #0
 801126e:	dd0b      	ble.n	8011288 <_dtoa_r+0x7ac>
 8011270:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011272:	0023      	movs	r3, r4
 8011274:	4294      	cmp	r4, r2
 8011276:	dd00      	ble.n	801127a <_dtoa_r+0x79e>
 8011278:	0013      	movs	r3, r2
 801127a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801127c:	1ae4      	subs	r4, r4, r3
 801127e:	1ad2      	subs	r2, r2, r3
 8011280:	920a      	str	r2, [sp, #40]	; 0x28
 8011282:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011284:	1ad3      	subs	r3, r2, r3
 8011286:	930c      	str	r3, [sp, #48]	; 0x30
 8011288:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801128a:	2b00      	cmp	r3, #0
 801128c:	d01e      	beq.n	80112cc <_dtoa_r+0x7f0>
 801128e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011290:	2b00      	cmp	r3, #0
 8011292:	d05c      	beq.n	801134e <_dtoa_r+0x872>
 8011294:	2d00      	cmp	r5, #0
 8011296:	dd10      	ble.n	80112ba <_dtoa_r+0x7de>
 8011298:	0039      	movs	r1, r7
 801129a:	002a      	movs	r2, r5
 801129c:	9804      	ldr	r0, [sp, #16]
 801129e:	f7fc fa2f 	bl	800d700 <__pow5mult>
 80112a2:	9a05      	ldr	r2, [sp, #20]
 80112a4:	0001      	movs	r1, r0
 80112a6:	0007      	movs	r7, r0
 80112a8:	9804      	ldr	r0, [sp, #16]
 80112aa:	f7fc f979 	bl	800d5a0 <__multiply>
 80112ae:	0006      	movs	r6, r0
 80112b0:	9905      	ldr	r1, [sp, #20]
 80112b2:	9804      	ldr	r0, [sp, #16]
 80112b4:	f7fc f87a 	bl	800d3ac <_Bfree>
 80112b8:	9605      	str	r6, [sp, #20]
 80112ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80112bc:	1b5a      	subs	r2, r3, r5
 80112be:	42ab      	cmp	r3, r5
 80112c0:	d004      	beq.n	80112cc <_dtoa_r+0x7f0>
 80112c2:	9905      	ldr	r1, [sp, #20]
 80112c4:	9804      	ldr	r0, [sp, #16]
 80112c6:	f7fc fa1b 	bl	800d700 <__pow5mult>
 80112ca:	9005      	str	r0, [sp, #20]
 80112cc:	2101      	movs	r1, #1
 80112ce:	9804      	ldr	r0, [sp, #16]
 80112d0:	f7fc f94e 	bl	800d570 <__i2b>
 80112d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80112d6:	0006      	movs	r6, r0
 80112d8:	2b00      	cmp	r3, #0
 80112da:	dd3a      	ble.n	8011352 <_dtoa_r+0x876>
 80112dc:	001a      	movs	r2, r3
 80112de:	0001      	movs	r1, r0
 80112e0:	9804      	ldr	r0, [sp, #16]
 80112e2:	f7fc fa0d 	bl	800d700 <__pow5mult>
 80112e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80112e8:	0006      	movs	r6, r0
 80112ea:	2500      	movs	r5, #0
 80112ec:	2b01      	cmp	r3, #1
 80112ee:	dc38      	bgt.n	8011362 <_dtoa_r+0x886>
 80112f0:	2500      	movs	r5, #0
 80112f2:	9b08      	ldr	r3, [sp, #32]
 80112f4:	42ab      	cmp	r3, r5
 80112f6:	d130      	bne.n	801135a <_dtoa_r+0x87e>
 80112f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112fa:	031b      	lsls	r3, r3, #12
 80112fc:	42ab      	cmp	r3, r5
 80112fe:	d12c      	bne.n	801135a <_dtoa_r+0x87e>
 8011300:	4b72      	ldr	r3, [pc, #456]	; (80114cc <_dtoa_r+0x9f0>)
 8011302:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011304:	4213      	tst	r3, r2
 8011306:	d028      	beq.n	801135a <_dtoa_r+0x87e>
 8011308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801130a:	3501      	adds	r5, #1
 801130c:	3301      	adds	r3, #1
 801130e:	930a      	str	r3, [sp, #40]	; 0x28
 8011310:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011312:	3301      	adds	r3, #1
 8011314:	930c      	str	r3, [sp, #48]	; 0x30
 8011316:	e020      	b.n	801135a <_dtoa_r+0x87e>
 8011318:	2336      	movs	r3, #54	; 0x36
 801131a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801131c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801131e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011320:	1a9b      	subs	r3, r3, r2
 8011322:	e795      	b.n	8011250 <_dtoa_r+0x774>
 8011324:	9b07      	ldr	r3, [sp, #28]
 8011326:	1e5d      	subs	r5, r3, #1
 8011328:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801132a:	42ab      	cmp	r3, r5
 801132c:	db07      	blt.n	801133e <_dtoa_r+0x862>
 801132e:	1b5d      	subs	r5, r3, r5
 8011330:	9b07      	ldr	r3, [sp, #28]
 8011332:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011334:	2b00      	cmp	r3, #0
 8011336:	da8b      	bge.n	8011250 <_dtoa_r+0x774>
 8011338:	1ae4      	subs	r4, r4, r3
 801133a:	2300      	movs	r3, #0
 801133c:	e788      	b.n	8011250 <_dtoa_r+0x774>
 801133e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011340:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011342:	1aeb      	subs	r3, r5, r3
 8011344:	18d3      	adds	r3, r2, r3
 8011346:	950d      	str	r5, [sp, #52]	; 0x34
 8011348:	9313      	str	r3, [sp, #76]	; 0x4c
 801134a:	2500      	movs	r5, #0
 801134c:	e7f0      	b.n	8011330 <_dtoa_r+0x854>
 801134e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011350:	e7b7      	b.n	80112c2 <_dtoa_r+0x7e6>
 8011352:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011354:	2500      	movs	r5, #0
 8011356:	2b01      	cmp	r3, #1
 8011358:	ddca      	ble.n	80112f0 <_dtoa_r+0x814>
 801135a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801135c:	2001      	movs	r0, #1
 801135e:	2b00      	cmp	r3, #0
 8011360:	d008      	beq.n	8011374 <_dtoa_r+0x898>
 8011362:	6933      	ldr	r3, [r6, #16]
 8011364:	3303      	adds	r3, #3
 8011366:	009b      	lsls	r3, r3, #2
 8011368:	18f3      	adds	r3, r6, r3
 801136a:	6858      	ldr	r0, [r3, #4]
 801136c:	f7fc f8b8 	bl	800d4e0 <__hi0bits>
 8011370:	2320      	movs	r3, #32
 8011372:	1a18      	subs	r0, r3, r0
 8011374:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011376:	1818      	adds	r0, r3, r0
 8011378:	0002      	movs	r2, r0
 801137a:	231f      	movs	r3, #31
 801137c:	401a      	ands	r2, r3
 801137e:	4218      	tst	r0, r3
 8011380:	d047      	beq.n	8011412 <_dtoa_r+0x936>
 8011382:	3301      	adds	r3, #1
 8011384:	1a9b      	subs	r3, r3, r2
 8011386:	2b04      	cmp	r3, #4
 8011388:	dd3f      	ble.n	801140a <_dtoa_r+0x92e>
 801138a:	231c      	movs	r3, #28
 801138c:	1a9b      	subs	r3, r3, r2
 801138e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011390:	18e4      	adds	r4, r4, r3
 8011392:	18d2      	adds	r2, r2, r3
 8011394:	920a      	str	r2, [sp, #40]	; 0x28
 8011396:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011398:	18d3      	adds	r3, r2, r3
 801139a:	930c      	str	r3, [sp, #48]	; 0x30
 801139c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801139e:	2b00      	cmp	r3, #0
 80113a0:	dd05      	ble.n	80113ae <_dtoa_r+0x8d2>
 80113a2:	001a      	movs	r2, r3
 80113a4:	9905      	ldr	r1, [sp, #20]
 80113a6:	9804      	ldr	r0, [sp, #16]
 80113a8:	f7fc f9ec 	bl	800d784 <__lshift>
 80113ac:	9005      	str	r0, [sp, #20]
 80113ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	dd05      	ble.n	80113c0 <_dtoa_r+0x8e4>
 80113b4:	0031      	movs	r1, r6
 80113b6:	001a      	movs	r2, r3
 80113b8:	9804      	ldr	r0, [sp, #16]
 80113ba:	f7fc f9e3 	bl	800d784 <__lshift>
 80113be:	0006      	movs	r6, r0
 80113c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d027      	beq.n	8011416 <_dtoa_r+0x93a>
 80113c6:	0031      	movs	r1, r6
 80113c8:	9805      	ldr	r0, [sp, #20]
 80113ca:	f7fc fa49 	bl	800d860 <__mcmp>
 80113ce:	2800      	cmp	r0, #0
 80113d0:	da21      	bge.n	8011416 <_dtoa_r+0x93a>
 80113d2:	9b03      	ldr	r3, [sp, #12]
 80113d4:	220a      	movs	r2, #10
 80113d6:	3b01      	subs	r3, #1
 80113d8:	9303      	str	r3, [sp, #12]
 80113da:	9905      	ldr	r1, [sp, #20]
 80113dc:	2300      	movs	r3, #0
 80113de:	9804      	ldr	r0, [sp, #16]
 80113e0:	f7fb ffee 	bl	800d3c0 <__multadd>
 80113e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80113e6:	9005      	str	r0, [sp, #20]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d100      	bne.n	80113ee <_dtoa_r+0x912>
 80113ec:	e15d      	b.n	80116aa <_dtoa_r+0xbce>
 80113ee:	2300      	movs	r3, #0
 80113f0:	0039      	movs	r1, r7
 80113f2:	220a      	movs	r2, #10
 80113f4:	9804      	ldr	r0, [sp, #16]
 80113f6:	f7fb ffe3 	bl	800d3c0 <__multadd>
 80113fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80113fc:	0007      	movs	r7, r0
 80113fe:	2b00      	cmp	r3, #0
 8011400:	dc49      	bgt.n	8011496 <_dtoa_r+0x9ba>
 8011402:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011404:	2b02      	cmp	r3, #2
 8011406:	dc0e      	bgt.n	8011426 <_dtoa_r+0x94a>
 8011408:	e045      	b.n	8011496 <_dtoa_r+0x9ba>
 801140a:	2b04      	cmp	r3, #4
 801140c:	d0c6      	beq.n	801139c <_dtoa_r+0x8c0>
 801140e:	331c      	adds	r3, #28
 8011410:	e7bd      	b.n	801138e <_dtoa_r+0x8b2>
 8011412:	0013      	movs	r3, r2
 8011414:	e7fb      	b.n	801140e <_dtoa_r+0x932>
 8011416:	9b07      	ldr	r3, [sp, #28]
 8011418:	2b00      	cmp	r3, #0
 801141a:	dc36      	bgt.n	801148a <_dtoa_r+0x9ae>
 801141c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801141e:	2b02      	cmp	r3, #2
 8011420:	dd33      	ble.n	801148a <_dtoa_r+0x9ae>
 8011422:	9b07      	ldr	r3, [sp, #28]
 8011424:	930b      	str	r3, [sp, #44]	; 0x2c
 8011426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011428:	2b00      	cmp	r3, #0
 801142a:	d10c      	bne.n	8011446 <_dtoa_r+0x96a>
 801142c:	0031      	movs	r1, r6
 801142e:	2205      	movs	r2, #5
 8011430:	9804      	ldr	r0, [sp, #16]
 8011432:	f7fb ffc5 	bl	800d3c0 <__multadd>
 8011436:	0006      	movs	r6, r0
 8011438:	0001      	movs	r1, r0
 801143a:	9805      	ldr	r0, [sp, #20]
 801143c:	f7fc fa10 	bl	800d860 <__mcmp>
 8011440:	2800      	cmp	r0, #0
 8011442:	dd00      	ble.n	8011446 <_dtoa_r+0x96a>
 8011444:	e59f      	b.n	8010f86 <_dtoa_r+0x4aa>
 8011446:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011448:	43db      	mvns	r3, r3
 801144a:	9303      	str	r3, [sp, #12]
 801144c:	9b06      	ldr	r3, [sp, #24]
 801144e:	9308      	str	r3, [sp, #32]
 8011450:	2500      	movs	r5, #0
 8011452:	0031      	movs	r1, r6
 8011454:	9804      	ldr	r0, [sp, #16]
 8011456:	f7fb ffa9 	bl	800d3ac <_Bfree>
 801145a:	2f00      	cmp	r7, #0
 801145c:	d100      	bne.n	8011460 <_dtoa_r+0x984>
 801145e:	e6a3      	b.n	80111a8 <_dtoa_r+0x6cc>
 8011460:	2d00      	cmp	r5, #0
 8011462:	d005      	beq.n	8011470 <_dtoa_r+0x994>
 8011464:	42bd      	cmp	r5, r7
 8011466:	d003      	beq.n	8011470 <_dtoa_r+0x994>
 8011468:	0029      	movs	r1, r5
 801146a:	9804      	ldr	r0, [sp, #16]
 801146c:	f7fb ff9e 	bl	800d3ac <_Bfree>
 8011470:	0039      	movs	r1, r7
 8011472:	9804      	ldr	r0, [sp, #16]
 8011474:	f7fb ff9a 	bl	800d3ac <_Bfree>
 8011478:	e696      	b.n	80111a8 <_dtoa_r+0x6cc>
 801147a:	2600      	movs	r6, #0
 801147c:	0037      	movs	r7, r6
 801147e:	e7e2      	b.n	8011446 <_dtoa_r+0x96a>
 8011480:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011482:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8011484:	9303      	str	r3, [sp, #12]
 8011486:	0037      	movs	r7, r6
 8011488:	e57d      	b.n	8010f86 <_dtoa_r+0x4aa>
 801148a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801148c:	2b00      	cmp	r3, #0
 801148e:	d100      	bne.n	8011492 <_dtoa_r+0x9b6>
 8011490:	e0c3      	b.n	801161a <_dtoa_r+0xb3e>
 8011492:	9b07      	ldr	r3, [sp, #28]
 8011494:	930b      	str	r3, [sp, #44]	; 0x2c
 8011496:	2c00      	cmp	r4, #0
 8011498:	dd05      	ble.n	80114a6 <_dtoa_r+0x9ca>
 801149a:	0039      	movs	r1, r7
 801149c:	0022      	movs	r2, r4
 801149e:	9804      	ldr	r0, [sp, #16]
 80114a0:	f7fc f970 	bl	800d784 <__lshift>
 80114a4:	0007      	movs	r7, r0
 80114a6:	0038      	movs	r0, r7
 80114a8:	2d00      	cmp	r5, #0
 80114aa:	d024      	beq.n	80114f6 <_dtoa_r+0xa1a>
 80114ac:	6879      	ldr	r1, [r7, #4]
 80114ae:	9804      	ldr	r0, [sp, #16]
 80114b0:	f7fb ff54 	bl	800d35c <_Balloc>
 80114b4:	1e04      	subs	r4, r0, #0
 80114b6:	d111      	bne.n	80114dc <_dtoa_r+0xa00>
 80114b8:	0022      	movs	r2, r4
 80114ba:	4b05      	ldr	r3, [pc, #20]	; (80114d0 <_dtoa_r+0x9f4>)
 80114bc:	4805      	ldr	r0, [pc, #20]	; (80114d4 <_dtoa_r+0x9f8>)
 80114be:	4906      	ldr	r1, [pc, #24]	; (80114d8 <_dtoa_r+0x9fc>)
 80114c0:	e43c      	b.n	8010d3c <_dtoa_r+0x260>
 80114c2:	46c0      	nop			; (mov r8, r8)
 80114c4:	40240000 	.word	0x40240000
 80114c8:	00000433 	.word	0x00000433
 80114cc:	7ff00000 	.word	0x7ff00000
 80114d0:	08015079 	.word	0x08015079
 80114d4:	08015309 	.word	0x08015309
 80114d8:	000002ef 	.word	0x000002ef
 80114dc:	0039      	movs	r1, r7
 80114de:	693a      	ldr	r2, [r7, #16]
 80114e0:	310c      	adds	r1, #12
 80114e2:	3202      	adds	r2, #2
 80114e4:	0092      	lsls	r2, r2, #2
 80114e6:	300c      	adds	r0, #12
 80114e8:	f7fb fa9d 	bl	800ca26 <memcpy>
 80114ec:	2201      	movs	r2, #1
 80114ee:	0021      	movs	r1, r4
 80114f0:	9804      	ldr	r0, [sp, #16]
 80114f2:	f7fc f947 	bl	800d784 <__lshift>
 80114f6:	9b06      	ldr	r3, [sp, #24]
 80114f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80114fa:	9307      	str	r3, [sp, #28]
 80114fc:	3b01      	subs	r3, #1
 80114fe:	189b      	adds	r3, r3, r2
 8011500:	2201      	movs	r2, #1
 8011502:	003d      	movs	r5, r7
 8011504:	0007      	movs	r7, r0
 8011506:	930e      	str	r3, [sp, #56]	; 0x38
 8011508:	9b08      	ldr	r3, [sp, #32]
 801150a:	4013      	ands	r3, r2
 801150c:	930d      	str	r3, [sp, #52]	; 0x34
 801150e:	0031      	movs	r1, r6
 8011510:	9805      	ldr	r0, [sp, #20]
 8011512:	f7ff fa53 	bl	80109bc <quorem>
 8011516:	0029      	movs	r1, r5
 8011518:	0004      	movs	r4, r0
 801151a:	900b      	str	r0, [sp, #44]	; 0x2c
 801151c:	9805      	ldr	r0, [sp, #20]
 801151e:	f7fc f99f 	bl	800d860 <__mcmp>
 8011522:	003a      	movs	r2, r7
 8011524:	900c      	str	r0, [sp, #48]	; 0x30
 8011526:	0031      	movs	r1, r6
 8011528:	9804      	ldr	r0, [sp, #16]
 801152a:	f7fc f9b5 	bl	800d898 <__mdiff>
 801152e:	2201      	movs	r2, #1
 8011530:	68c3      	ldr	r3, [r0, #12]
 8011532:	3430      	adds	r4, #48	; 0x30
 8011534:	9008      	str	r0, [sp, #32]
 8011536:	920a      	str	r2, [sp, #40]	; 0x28
 8011538:	2b00      	cmp	r3, #0
 801153a:	d104      	bne.n	8011546 <_dtoa_r+0xa6a>
 801153c:	0001      	movs	r1, r0
 801153e:	9805      	ldr	r0, [sp, #20]
 8011540:	f7fc f98e 	bl	800d860 <__mcmp>
 8011544:	900a      	str	r0, [sp, #40]	; 0x28
 8011546:	9908      	ldr	r1, [sp, #32]
 8011548:	9804      	ldr	r0, [sp, #16]
 801154a:	f7fb ff2f 	bl	800d3ac <_Bfree>
 801154e:	9b07      	ldr	r3, [sp, #28]
 8011550:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011552:	3301      	adds	r3, #1
 8011554:	9308      	str	r3, [sp, #32]
 8011556:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011558:	4313      	orrs	r3, r2
 801155a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801155c:	4313      	orrs	r3, r2
 801155e:	d109      	bne.n	8011574 <_dtoa_r+0xa98>
 8011560:	2c39      	cmp	r4, #57	; 0x39
 8011562:	d022      	beq.n	80115aa <_dtoa_r+0xace>
 8011564:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011566:	2b00      	cmp	r3, #0
 8011568:	dd01      	ble.n	801156e <_dtoa_r+0xa92>
 801156a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801156c:	3431      	adds	r4, #49	; 0x31
 801156e:	9b07      	ldr	r3, [sp, #28]
 8011570:	701c      	strb	r4, [r3, #0]
 8011572:	e76e      	b.n	8011452 <_dtoa_r+0x976>
 8011574:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011576:	2b00      	cmp	r3, #0
 8011578:	db04      	blt.n	8011584 <_dtoa_r+0xaa8>
 801157a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801157c:	4313      	orrs	r3, r2
 801157e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011580:	4313      	orrs	r3, r2
 8011582:	d11e      	bne.n	80115c2 <_dtoa_r+0xae6>
 8011584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011586:	2b00      	cmp	r3, #0
 8011588:	ddf1      	ble.n	801156e <_dtoa_r+0xa92>
 801158a:	9905      	ldr	r1, [sp, #20]
 801158c:	2201      	movs	r2, #1
 801158e:	9804      	ldr	r0, [sp, #16]
 8011590:	f7fc f8f8 	bl	800d784 <__lshift>
 8011594:	0031      	movs	r1, r6
 8011596:	9005      	str	r0, [sp, #20]
 8011598:	f7fc f962 	bl	800d860 <__mcmp>
 801159c:	2800      	cmp	r0, #0
 801159e:	dc02      	bgt.n	80115a6 <_dtoa_r+0xaca>
 80115a0:	d1e5      	bne.n	801156e <_dtoa_r+0xa92>
 80115a2:	07e3      	lsls	r3, r4, #31
 80115a4:	d5e3      	bpl.n	801156e <_dtoa_r+0xa92>
 80115a6:	2c39      	cmp	r4, #57	; 0x39
 80115a8:	d1df      	bne.n	801156a <_dtoa_r+0xa8e>
 80115aa:	2339      	movs	r3, #57	; 0x39
 80115ac:	9a07      	ldr	r2, [sp, #28]
 80115ae:	7013      	strb	r3, [r2, #0]
 80115b0:	9b08      	ldr	r3, [sp, #32]
 80115b2:	9308      	str	r3, [sp, #32]
 80115b4:	3b01      	subs	r3, #1
 80115b6:	781a      	ldrb	r2, [r3, #0]
 80115b8:	2a39      	cmp	r2, #57	; 0x39
 80115ba:	d063      	beq.n	8011684 <_dtoa_r+0xba8>
 80115bc:	3201      	adds	r2, #1
 80115be:	701a      	strb	r2, [r3, #0]
 80115c0:	e747      	b.n	8011452 <_dtoa_r+0x976>
 80115c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	dd03      	ble.n	80115d0 <_dtoa_r+0xaf4>
 80115c8:	2c39      	cmp	r4, #57	; 0x39
 80115ca:	d0ee      	beq.n	80115aa <_dtoa_r+0xace>
 80115cc:	3401      	adds	r4, #1
 80115ce:	e7ce      	b.n	801156e <_dtoa_r+0xa92>
 80115d0:	9b07      	ldr	r3, [sp, #28]
 80115d2:	9a07      	ldr	r2, [sp, #28]
 80115d4:	701c      	strb	r4, [r3, #0]
 80115d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80115d8:	4293      	cmp	r3, r2
 80115da:	d03e      	beq.n	801165a <_dtoa_r+0xb7e>
 80115dc:	2300      	movs	r3, #0
 80115de:	220a      	movs	r2, #10
 80115e0:	9905      	ldr	r1, [sp, #20]
 80115e2:	9804      	ldr	r0, [sp, #16]
 80115e4:	f7fb feec 	bl	800d3c0 <__multadd>
 80115e8:	2300      	movs	r3, #0
 80115ea:	9005      	str	r0, [sp, #20]
 80115ec:	220a      	movs	r2, #10
 80115ee:	0029      	movs	r1, r5
 80115f0:	9804      	ldr	r0, [sp, #16]
 80115f2:	42bd      	cmp	r5, r7
 80115f4:	d106      	bne.n	8011604 <_dtoa_r+0xb28>
 80115f6:	f7fb fee3 	bl	800d3c0 <__multadd>
 80115fa:	0005      	movs	r5, r0
 80115fc:	0007      	movs	r7, r0
 80115fe:	9b08      	ldr	r3, [sp, #32]
 8011600:	9307      	str	r3, [sp, #28]
 8011602:	e784      	b.n	801150e <_dtoa_r+0xa32>
 8011604:	f7fb fedc 	bl	800d3c0 <__multadd>
 8011608:	0039      	movs	r1, r7
 801160a:	0005      	movs	r5, r0
 801160c:	2300      	movs	r3, #0
 801160e:	220a      	movs	r2, #10
 8011610:	9804      	ldr	r0, [sp, #16]
 8011612:	f7fb fed5 	bl	800d3c0 <__multadd>
 8011616:	0007      	movs	r7, r0
 8011618:	e7f1      	b.n	80115fe <_dtoa_r+0xb22>
 801161a:	9b07      	ldr	r3, [sp, #28]
 801161c:	930b      	str	r3, [sp, #44]	; 0x2c
 801161e:	2500      	movs	r5, #0
 8011620:	0031      	movs	r1, r6
 8011622:	9805      	ldr	r0, [sp, #20]
 8011624:	f7ff f9ca 	bl	80109bc <quorem>
 8011628:	9b06      	ldr	r3, [sp, #24]
 801162a:	3030      	adds	r0, #48	; 0x30
 801162c:	5558      	strb	r0, [r3, r5]
 801162e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011630:	3501      	adds	r5, #1
 8011632:	0004      	movs	r4, r0
 8011634:	42ab      	cmp	r3, r5
 8011636:	dd07      	ble.n	8011648 <_dtoa_r+0xb6c>
 8011638:	2300      	movs	r3, #0
 801163a:	220a      	movs	r2, #10
 801163c:	9905      	ldr	r1, [sp, #20]
 801163e:	9804      	ldr	r0, [sp, #16]
 8011640:	f7fb febe 	bl	800d3c0 <__multadd>
 8011644:	9005      	str	r0, [sp, #20]
 8011646:	e7eb      	b.n	8011620 <_dtoa_r+0xb44>
 8011648:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801164a:	2301      	movs	r3, #1
 801164c:	2a00      	cmp	r2, #0
 801164e:	dd00      	ble.n	8011652 <_dtoa_r+0xb76>
 8011650:	0013      	movs	r3, r2
 8011652:	2500      	movs	r5, #0
 8011654:	9a06      	ldr	r2, [sp, #24]
 8011656:	18d3      	adds	r3, r2, r3
 8011658:	9308      	str	r3, [sp, #32]
 801165a:	9905      	ldr	r1, [sp, #20]
 801165c:	2201      	movs	r2, #1
 801165e:	9804      	ldr	r0, [sp, #16]
 8011660:	f7fc f890 	bl	800d784 <__lshift>
 8011664:	0031      	movs	r1, r6
 8011666:	9005      	str	r0, [sp, #20]
 8011668:	f7fc f8fa 	bl	800d860 <__mcmp>
 801166c:	2800      	cmp	r0, #0
 801166e:	dc9f      	bgt.n	80115b0 <_dtoa_r+0xad4>
 8011670:	d101      	bne.n	8011676 <_dtoa_r+0xb9a>
 8011672:	07e4      	lsls	r4, r4, #31
 8011674:	d49c      	bmi.n	80115b0 <_dtoa_r+0xad4>
 8011676:	9b08      	ldr	r3, [sp, #32]
 8011678:	9308      	str	r3, [sp, #32]
 801167a:	3b01      	subs	r3, #1
 801167c:	781a      	ldrb	r2, [r3, #0]
 801167e:	2a30      	cmp	r2, #48	; 0x30
 8011680:	d0fa      	beq.n	8011678 <_dtoa_r+0xb9c>
 8011682:	e6e6      	b.n	8011452 <_dtoa_r+0x976>
 8011684:	9a06      	ldr	r2, [sp, #24]
 8011686:	429a      	cmp	r2, r3
 8011688:	d193      	bne.n	80115b2 <_dtoa_r+0xad6>
 801168a:	9b03      	ldr	r3, [sp, #12]
 801168c:	3301      	adds	r3, #1
 801168e:	9303      	str	r3, [sp, #12]
 8011690:	2331      	movs	r3, #49	; 0x31
 8011692:	7013      	strb	r3, [r2, #0]
 8011694:	e6dd      	b.n	8011452 <_dtoa_r+0x976>
 8011696:	4b09      	ldr	r3, [pc, #36]	; (80116bc <_dtoa_r+0xbe0>)
 8011698:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801169a:	9306      	str	r3, [sp, #24]
 801169c:	4b08      	ldr	r3, [pc, #32]	; (80116c0 <_dtoa_r+0xbe4>)
 801169e:	2a00      	cmp	r2, #0
 80116a0:	d001      	beq.n	80116a6 <_dtoa_r+0xbca>
 80116a2:	f7ff fa4c 	bl	8010b3e <_dtoa_r+0x62>
 80116a6:	f7ff fa4c 	bl	8010b42 <_dtoa_r+0x66>
 80116aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	dcb6      	bgt.n	801161e <_dtoa_r+0xb42>
 80116b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80116b2:	2b02      	cmp	r3, #2
 80116b4:	dd00      	ble.n	80116b8 <_dtoa_r+0xbdc>
 80116b6:	e6b6      	b.n	8011426 <_dtoa_r+0x94a>
 80116b8:	e7b1      	b.n	801161e <_dtoa_r+0xb42>
 80116ba:	46c0      	nop			; (mov r8, r8)
 80116bc:	080152fc 	.word	0x080152fc
 80116c0:	08015304 	.word	0x08015304

080116c4 <realloc>:
 80116c4:	b510      	push	{r4, lr}
 80116c6:	4b03      	ldr	r3, [pc, #12]	; (80116d4 <realloc+0x10>)
 80116c8:	000a      	movs	r2, r1
 80116ca:	0001      	movs	r1, r0
 80116cc:	6818      	ldr	r0, [r3, #0]
 80116ce:	f000 f803 	bl	80116d8 <_realloc_r>
 80116d2:	bd10      	pop	{r4, pc}
 80116d4:	200006d8 	.word	0x200006d8

080116d8 <_realloc_r>:
 80116d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116da:	b087      	sub	sp, #28
 80116dc:	1e0c      	subs	r4, r1, #0
 80116de:	9001      	str	r0, [sp, #4]
 80116e0:	9205      	str	r2, [sp, #20]
 80116e2:	d106      	bne.n	80116f2 <_realloc_r+0x1a>
 80116e4:	0011      	movs	r1, r2
 80116e6:	f7f9 fe39 	bl	800b35c <_malloc_r>
 80116ea:	0007      	movs	r7, r0
 80116ec:	0038      	movs	r0, r7
 80116ee:	b007      	add	sp, #28
 80116f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116f2:	9801      	ldr	r0, [sp, #4]
 80116f4:	f7fa f846 	bl	800b784 <__malloc_lock>
 80116f8:	0023      	movs	r3, r4
 80116fa:	3b08      	subs	r3, #8
 80116fc:	685f      	ldr	r7, [r3, #4]
 80116fe:	9304      	str	r3, [sp, #16]
 8011700:	9b05      	ldr	r3, [sp, #20]
 8011702:	330b      	adds	r3, #11
 8011704:	2b16      	cmp	r3, #22
 8011706:	d908      	bls.n	801171a <_realloc_r+0x42>
 8011708:	2207      	movs	r2, #7
 801170a:	4393      	bics	r3, r2
 801170c:	9300      	str	r3, [sp, #0]
 801170e:	d506      	bpl.n	801171e <_realloc_r+0x46>
 8011710:	230c      	movs	r3, #12
 8011712:	9a01      	ldr	r2, [sp, #4]
 8011714:	2700      	movs	r7, #0
 8011716:	6013      	str	r3, [r2, #0]
 8011718:	e7e8      	b.n	80116ec <_realloc_r+0x14>
 801171a:	2310      	movs	r3, #16
 801171c:	9300      	str	r3, [sp, #0]
 801171e:	9b00      	ldr	r3, [sp, #0]
 8011720:	9a05      	ldr	r2, [sp, #20]
 8011722:	4293      	cmp	r3, r2
 8011724:	d3f4      	bcc.n	8011710 <_realloc_r+0x38>
 8011726:	9b04      	ldr	r3, [sp, #16]
 8011728:	003a      	movs	r2, r7
 801172a:	9302      	str	r3, [sp, #8]
 801172c:	2303      	movs	r3, #3
 801172e:	439a      	bics	r2, r3
 8011730:	9b00      	ldr	r3, [sp, #0]
 8011732:	9203      	str	r2, [sp, #12]
 8011734:	4293      	cmp	r3, r2
 8011736:	dc00      	bgt.n	801173a <_realloc_r+0x62>
 8011738:	e169      	b.n	8011a0e <_realloc_r+0x336>
 801173a:	9b04      	ldr	r3, [sp, #16]
 801173c:	48b8      	ldr	r0, [pc, #736]	; (8011a20 <_realloc_r+0x348>)
 801173e:	189b      	adds	r3, r3, r2
 8011740:	6882      	ldr	r2, [r0, #8]
 8011742:	4694      	mov	ip, r2
 8011744:	685a      	ldr	r2, [r3, #4]
 8011746:	459c      	cmp	ip, r3
 8011748:	d006      	beq.n	8011758 <_realloc_r+0x80>
 801174a:	2501      	movs	r5, #1
 801174c:	0011      	movs	r1, r2
 801174e:	43a9      	bics	r1, r5
 8011750:	1859      	adds	r1, r3, r1
 8011752:	6849      	ldr	r1, [r1, #4]
 8011754:	4229      	tst	r1, r5
 8011756:	d144      	bne.n	80117e2 <_realloc_r+0x10a>
 8011758:	2103      	movs	r1, #3
 801175a:	438a      	bics	r2, r1
 801175c:	9903      	ldr	r1, [sp, #12]
 801175e:	188e      	adds	r6, r1, r2
 8011760:	9900      	ldr	r1, [sp, #0]
 8011762:	459c      	cmp	ip, r3
 8011764:	d117      	bne.n	8011796 <_realloc_r+0xbe>
 8011766:	3110      	adds	r1, #16
 8011768:	42b1      	cmp	r1, r6
 801176a:	dc3c      	bgt.n	80117e6 <_realloc_r+0x10e>
 801176c:	9a00      	ldr	r2, [sp, #0]
 801176e:	2101      	movs	r1, #1
 8011770:	4694      	mov	ip, r2
 8011772:	1ab6      	subs	r6, r6, r2
 8011774:	0022      	movs	r2, r4
 8011776:	9b04      	ldr	r3, [sp, #16]
 8011778:	430e      	orrs	r6, r1
 801177a:	4463      	add	r3, ip
 801177c:	6083      	str	r3, [r0, #8]
 801177e:	3a08      	subs	r2, #8
 8011780:	605e      	str	r6, [r3, #4]
 8011782:	6853      	ldr	r3, [r2, #4]
 8011784:	9801      	ldr	r0, [sp, #4]
 8011786:	400b      	ands	r3, r1
 8011788:	4661      	mov	r1, ip
 801178a:	430b      	orrs	r3, r1
 801178c:	6053      	str	r3, [r2, #4]
 801178e:	f7fa f801 	bl	800b794 <__malloc_unlock>
 8011792:	0027      	movs	r7, r4
 8011794:	e7aa      	b.n	80116ec <_realloc_r+0x14>
 8011796:	42b1      	cmp	r1, r6
 8011798:	dc25      	bgt.n	80117e6 <_realloc_r+0x10e>
 801179a:	68da      	ldr	r2, [r3, #12]
 801179c:	689b      	ldr	r3, [r3, #8]
 801179e:	60da      	str	r2, [r3, #12]
 80117a0:	6093      	str	r3, [r2, #8]
 80117a2:	9b00      	ldr	r3, [sp, #0]
 80117a4:	9a02      	ldr	r2, [sp, #8]
 80117a6:	1af4      	subs	r4, r6, r3
 80117a8:	9b02      	ldr	r3, [sp, #8]
 80117aa:	1992      	adds	r2, r2, r6
 80117ac:	6858      	ldr	r0, [r3, #4]
 80117ae:	2301      	movs	r3, #1
 80117b0:	4018      	ands	r0, r3
 80117b2:	2c0f      	cmp	r4, #15
 80117b4:	d800      	bhi.n	80117b8 <_realloc_r+0xe0>
 80117b6:	e12c      	b.n	8011a12 <_realloc_r+0x33a>
 80117b8:	9d00      	ldr	r5, [sp, #0]
 80117ba:	9902      	ldr	r1, [sp, #8]
 80117bc:	4328      	orrs	r0, r5
 80117be:	1949      	adds	r1, r1, r5
 80117c0:	9d02      	ldr	r5, [sp, #8]
 80117c2:	431c      	orrs	r4, r3
 80117c4:	6068      	str	r0, [r5, #4]
 80117c6:	604c      	str	r4, [r1, #4]
 80117c8:	6850      	ldr	r0, [r2, #4]
 80117ca:	3108      	adds	r1, #8
 80117cc:	4303      	orrs	r3, r0
 80117ce:	6053      	str	r3, [r2, #4]
 80117d0:	9801      	ldr	r0, [sp, #4]
 80117d2:	f7fb f9a3 	bl	800cb1c <_free_r>
 80117d6:	9801      	ldr	r0, [sp, #4]
 80117d8:	f7f9 ffdc 	bl	800b794 <__malloc_unlock>
 80117dc:	9f02      	ldr	r7, [sp, #8]
 80117de:	3708      	adds	r7, #8
 80117e0:	e784      	b.n	80116ec <_realloc_r+0x14>
 80117e2:	2200      	movs	r2, #0
 80117e4:	0013      	movs	r3, r2
 80117e6:	07ff      	lsls	r7, r7, #31
 80117e8:	d500      	bpl.n	80117ec <_realloc_r+0x114>
 80117ea:	e0c6      	b.n	801197a <_realloc_r+0x2a2>
 80117ec:	0021      	movs	r1, r4
 80117ee:	2003      	movs	r0, #3
 80117f0:	3908      	subs	r1, #8
 80117f2:	680d      	ldr	r5, [r1, #0]
 80117f4:	9904      	ldr	r1, [sp, #16]
 80117f6:	1b4d      	subs	r5, r1, r5
 80117f8:	6869      	ldr	r1, [r5, #4]
 80117fa:	4381      	bics	r1, r0
 80117fc:	9803      	ldr	r0, [sp, #12]
 80117fe:	180f      	adds	r7, r1, r0
 8011800:	2b00      	cmp	r3, #0
 8011802:	d100      	bne.n	8011806 <_realloc_r+0x12e>
 8011804:	e084      	b.n	8011910 <_realloc_r+0x238>
 8011806:	19d6      	adds	r6, r2, r7
 8011808:	459c      	cmp	ip, r3
 801180a:	d148      	bne.n	801189e <_realloc_r+0x1c6>
 801180c:	9b00      	ldr	r3, [sp, #0]
 801180e:	3310      	adds	r3, #16
 8011810:	42b3      	cmp	r3, r6
 8011812:	dc7d      	bgt.n	8011910 <_realloc_r+0x238>
 8011814:	68aa      	ldr	r2, [r5, #8]
 8011816:	68eb      	ldr	r3, [r5, #12]
 8011818:	002f      	movs	r7, r5
 801181a:	60d3      	str	r3, [r2, #12]
 801181c:	609a      	str	r2, [r3, #8]
 801181e:	0002      	movs	r2, r0
 8011820:	3a04      	subs	r2, #4
 8011822:	3708      	adds	r7, #8
 8011824:	2a24      	cmp	r2, #36	; 0x24
 8011826:	d835      	bhi.n	8011894 <_realloc_r+0x1bc>
 8011828:	003b      	movs	r3, r7
 801182a:	2a13      	cmp	r2, #19
 801182c:	d908      	bls.n	8011840 <_realloc_r+0x168>
 801182e:	6823      	ldr	r3, [r4, #0]
 8011830:	60ab      	str	r3, [r5, #8]
 8011832:	6863      	ldr	r3, [r4, #4]
 8011834:	60eb      	str	r3, [r5, #12]
 8011836:	2a1b      	cmp	r2, #27
 8011838:	d81a      	bhi.n	8011870 <_realloc_r+0x198>
 801183a:	002b      	movs	r3, r5
 801183c:	3408      	adds	r4, #8
 801183e:	3310      	adds	r3, #16
 8011840:	6822      	ldr	r2, [r4, #0]
 8011842:	601a      	str	r2, [r3, #0]
 8011844:	6862      	ldr	r2, [r4, #4]
 8011846:	605a      	str	r2, [r3, #4]
 8011848:	68a2      	ldr	r2, [r4, #8]
 801184a:	609a      	str	r2, [r3, #8]
 801184c:	9b00      	ldr	r3, [sp, #0]
 801184e:	4a74      	ldr	r2, [pc, #464]	; (8011a20 <_realloc_r+0x348>)
 8011850:	18eb      	adds	r3, r5, r3
 8011852:	6093      	str	r3, [r2, #8]
 8011854:	9a00      	ldr	r2, [sp, #0]
 8011856:	1ab6      	subs	r6, r6, r2
 8011858:	2201      	movs	r2, #1
 801185a:	4316      	orrs	r6, r2
 801185c:	605e      	str	r6, [r3, #4]
 801185e:	686b      	ldr	r3, [r5, #4]
 8011860:	4013      	ands	r3, r2
 8011862:	9a00      	ldr	r2, [sp, #0]
 8011864:	4313      	orrs	r3, r2
 8011866:	606b      	str	r3, [r5, #4]
 8011868:	9801      	ldr	r0, [sp, #4]
 801186a:	f7f9 ff93 	bl	800b794 <__malloc_unlock>
 801186e:	e73d      	b.n	80116ec <_realloc_r+0x14>
 8011870:	68a3      	ldr	r3, [r4, #8]
 8011872:	612b      	str	r3, [r5, #16]
 8011874:	68e3      	ldr	r3, [r4, #12]
 8011876:	616b      	str	r3, [r5, #20]
 8011878:	2a24      	cmp	r2, #36	; 0x24
 801187a:	d003      	beq.n	8011884 <_realloc_r+0x1ac>
 801187c:	002b      	movs	r3, r5
 801187e:	3410      	adds	r4, #16
 8011880:	3318      	adds	r3, #24
 8011882:	e7dd      	b.n	8011840 <_realloc_r+0x168>
 8011884:	6923      	ldr	r3, [r4, #16]
 8011886:	61ab      	str	r3, [r5, #24]
 8011888:	002b      	movs	r3, r5
 801188a:	6962      	ldr	r2, [r4, #20]
 801188c:	3320      	adds	r3, #32
 801188e:	61ea      	str	r2, [r5, #28]
 8011890:	3418      	adds	r4, #24
 8011892:	e7d5      	b.n	8011840 <_realloc_r+0x168>
 8011894:	0021      	movs	r1, r4
 8011896:	0038      	movs	r0, r7
 8011898:	f001 fbb5 	bl	8013006 <memmove>
 801189c:	e7d6      	b.n	801184c <_realloc_r+0x174>
 801189e:	9a00      	ldr	r2, [sp, #0]
 80118a0:	42b2      	cmp	r2, r6
 80118a2:	dc35      	bgt.n	8011910 <_realloc_r+0x238>
 80118a4:	0028      	movs	r0, r5
 80118a6:	68da      	ldr	r2, [r3, #12]
 80118a8:	689b      	ldr	r3, [r3, #8]
 80118aa:	3008      	adds	r0, #8
 80118ac:	60da      	str	r2, [r3, #12]
 80118ae:	6093      	str	r3, [r2, #8]
 80118b0:	68aa      	ldr	r2, [r5, #8]
 80118b2:	68eb      	ldr	r3, [r5, #12]
 80118b4:	60d3      	str	r3, [r2, #12]
 80118b6:	609a      	str	r2, [r3, #8]
 80118b8:	9a03      	ldr	r2, [sp, #12]
 80118ba:	3a04      	subs	r2, #4
 80118bc:	2a24      	cmp	r2, #36	; 0x24
 80118be:	d823      	bhi.n	8011908 <_realloc_r+0x230>
 80118c0:	2a13      	cmp	r2, #19
 80118c2:	d907      	bls.n	80118d4 <_realloc_r+0x1fc>
 80118c4:	6823      	ldr	r3, [r4, #0]
 80118c6:	60ab      	str	r3, [r5, #8]
 80118c8:	6863      	ldr	r3, [r4, #4]
 80118ca:	60eb      	str	r3, [r5, #12]
 80118cc:	2a1b      	cmp	r2, #27
 80118ce:	d809      	bhi.n	80118e4 <_realloc_r+0x20c>
 80118d0:	3408      	adds	r4, #8
 80118d2:	3008      	adds	r0, #8
 80118d4:	6823      	ldr	r3, [r4, #0]
 80118d6:	6003      	str	r3, [r0, #0]
 80118d8:	6863      	ldr	r3, [r4, #4]
 80118da:	6043      	str	r3, [r0, #4]
 80118dc:	68a3      	ldr	r3, [r4, #8]
 80118de:	6083      	str	r3, [r0, #8]
 80118e0:	9502      	str	r5, [sp, #8]
 80118e2:	e75e      	b.n	80117a2 <_realloc_r+0xca>
 80118e4:	68a3      	ldr	r3, [r4, #8]
 80118e6:	612b      	str	r3, [r5, #16]
 80118e8:	68e3      	ldr	r3, [r4, #12]
 80118ea:	616b      	str	r3, [r5, #20]
 80118ec:	2a24      	cmp	r2, #36	; 0x24
 80118ee:	d003      	beq.n	80118f8 <_realloc_r+0x220>
 80118f0:	0028      	movs	r0, r5
 80118f2:	3410      	adds	r4, #16
 80118f4:	3018      	adds	r0, #24
 80118f6:	e7ed      	b.n	80118d4 <_realloc_r+0x1fc>
 80118f8:	0028      	movs	r0, r5
 80118fa:	6923      	ldr	r3, [r4, #16]
 80118fc:	3020      	adds	r0, #32
 80118fe:	61ab      	str	r3, [r5, #24]
 8011900:	6963      	ldr	r3, [r4, #20]
 8011902:	3418      	adds	r4, #24
 8011904:	61eb      	str	r3, [r5, #28]
 8011906:	e7e5      	b.n	80118d4 <_realloc_r+0x1fc>
 8011908:	0021      	movs	r1, r4
 801190a:	f001 fb7c 	bl	8013006 <memmove>
 801190e:	e7e7      	b.n	80118e0 <_realloc_r+0x208>
 8011910:	9b00      	ldr	r3, [sp, #0]
 8011912:	42bb      	cmp	r3, r7
 8011914:	dc31      	bgt.n	801197a <_realloc_r+0x2a2>
 8011916:	0028      	movs	r0, r5
 8011918:	68aa      	ldr	r2, [r5, #8]
 801191a:	68eb      	ldr	r3, [r5, #12]
 801191c:	3008      	adds	r0, #8
 801191e:	60d3      	str	r3, [r2, #12]
 8011920:	609a      	str	r2, [r3, #8]
 8011922:	9a03      	ldr	r2, [sp, #12]
 8011924:	3a04      	subs	r2, #4
 8011926:	2a24      	cmp	r2, #36	; 0x24
 8011928:	d823      	bhi.n	8011972 <_realloc_r+0x29a>
 801192a:	2a13      	cmp	r2, #19
 801192c:	d907      	bls.n	801193e <_realloc_r+0x266>
 801192e:	6823      	ldr	r3, [r4, #0]
 8011930:	60ab      	str	r3, [r5, #8]
 8011932:	6863      	ldr	r3, [r4, #4]
 8011934:	60eb      	str	r3, [r5, #12]
 8011936:	2a1b      	cmp	r2, #27
 8011938:	d809      	bhi.n	801194e <_realloc_r+0x276>
 801193a:	3408      	adds	r4, #8
 801193c:	3008      	adds	r0, #8
 801193e:	6823      	ldr	r3, [r4, #0]
 8011940:	6003      	str	r3, [r0, #0]
 8011942:	6863      	ldr	r3, [r4, #4]
 8011944:	6043      	str	r3, [r0, #4]
 8011946:	68a3      	ldr	r3, [r4, #8]
 8011948:	6083      	str	r3, [r0, #8]
 801194a:	003e      	movs	r6, r7
 801194c:	e7c8      	b.n	80118e0 <_realloc_r+0x208>
 801194e:	68a3      	ldr	r3, [r4, #8]
 8011950:	612b      	str	r3, [r5, #16]
 8011952:	68e3      	ldr	r3, [r4, #12]
 8011954:	616b      	str	r3, [r5, #20]
 8011956:	2a24      	cmp	r2, #36	; 0x24
 8011958:	d003      	beq.n	8011962 <_realloc_r+0x28a>
 801195a:	0028      	movs	r0, r5
 801195c:	3410      	adds	r4, #16
 801195e:	3018      	adds	r0, #24
 8011960:	e7ed      	b.n	801193e <_realloc_r+0x266>
 8011962:	0028      	movs	r0, r5
 8011964:	6923      	ldr	r3, [r4, #16]
 8011966:	3020      	adds	r0, #32
 8011968:	61ab      	str	r3, [r5, #24]
 801196a:	6963      	ldr	r3, [r4, #20]
 801196c:	3418      	adds	r4, #24
 801196e:	61eb      	str	r3, [r5, #28]
 8011970:	e7e5      	b.n	801193e <_realloc_r+0x266>
 8011972:	0021      	movs	r1, r4
 8011974:	f001 fb47 	bl	8013006 <memmove>
 8011978:	e7e7      	b.n	801194a <_realloc_r+0x272>
 801197a:	9905      	ldr	r1, [sp, #20]
 801197c:	9801      	ldr	r0, [sp, #4]
 801197e:	f7f9 fced 	bl	800b35c <_malloc_r>
 8011982:	1e07      	subs	r7, r0, #0
 8011984:	d100      	bne.n	8011988 <_realloc_r+0x2b0>
 8011986:	e76f      	b.n	8011868 <_realloc_r+0x190>
 8011988:	0023      	movs	r3, r4
 801198a:	2201      	movs	r2, #1
 801198c:	3b08      	subs	r3, #8
 801198e:	685b      	ldr	r3, [r3, #4]
 8011990:	4393      	bics	r3, r2
 8011992:	9a04      	ldr	r2, [sp, #16]
 8011994:	18d3      	adds	r3, r2, r3
 8011996:	0002      	movs	r2, r0
 8011998:	3a08      	subs	r2, #8
 801199a:	4293      	cmp	r3, r2
 801199c:	d105      	bne.n	80119aa <_realloc_r+0x2d2>
 801199e:	685e      	ldr	r6, [r3, #4]
 80119a0:	2303      	movs	r3, #3
 80119a2:	439e      	bics	r6, r3
 80119a4:	9b03      	ldr	r3, [sp, #12]
 80119a6:	18f6      	adds	r6, r6, r3
 80119a8:	e6fb      	b.n	80117a2 <_realloc_r+0xca>
 80119aa:	9a03      	ldr	r2, [sp, #12]
 80119ac:	3a04      	subs	r2, #4
 80119ae:	2a24      	cmp	r2, #36	; 0x24
 80119b0:	d829      	bhi.n	8011a06 <_realloc_r+0x32e>
 80119b2:	0003      	movs	r3, r0
 80119b4:	0021      	movs	r1, r4
 80119b6:	2a13      	cmp	r2, #19
 80119b8:	d908      	bls.n	80119cc <_realloc_r+0x2f4>
 80119ba:	6823      	ldr	r3, [r4, #0]
 80119bc:	6003      	str	r3, [r0, #0]
 80119be:	6863      	ldr	r3, [r4, #4]
 80119c0:	6043      	str	r3, [r0, #4]
 80119c2:	2a1b      	cmp	r2, #27
 80119c4:	d80d      	bhi.n	80119e2 <_realloc_r+0x30a>
 80119c6:	0003      	movs	r3, r0
 80119c8:	3108      	adds	r1, #8
 80119ca:	3308      	adds	r3, #8
 80119cc:	680a      	ldr	r2, [r1, #0]
 80119ce:	601a      	str	r2, [r3, #0]
 80119d0:	684a      	ldr	r2, [r1, #4]
 80119d2:	605a      	str	r2, [r3, #4]
 80119d4:	688a      	ldr	r2, [r1, #8]
 80119d6:	609a      	str	r2, [r3, #8]
 80119d8:	0021      	movs	r1, r4
 80119da:	9801      	ldr	r0, [sp, #4]
 80119dc:	f7fb f89e 	bl	800cb1c <_free_r>
 80119e0:	e742      	b.n	8011868 <_realloc_r+0x190>
 80119e2:	68a3      	ldr	r3, [r4, #8]
 80119e4:	6083      	str	r3, [r0, #8]
 80119e6:	68e3      	ldr	r3, [r4, #12]
 80119e8:	60c3      	str	r3, [r0, #12]
 80119ea:	2a24      	cmp	r2, #36	; 0x24
 80119ec:	d003      	beq.n	80119f6 <_realloc_r+0x31e>
 80119ee:	0003      	movs	r3, r0
 80119f0:	3110      	adds	r1, #16
 80119f2:	3310      	adds	r3, #16
 80119f4:	e7ea      	b.n	80119cc <_realloc_r+0x2f4>
 80119f6:	6923      	ldr	r3, [r4, #16]
 80119f8:	3118      	adds	r1, #24
 80119fa:	6103      	str	r3, [r0, #16]
 80119fc:	0003      	movs	r3, r0
 80119fe:	6962      	ldr	r2, [r4, #20]
 8011a00:	3318      	adds	r3, #24
 8011a02:	6142      	str	r2, [r0, #20]
 8011a04:	e7e2      	b.n	80119cc <_realloc_r+0x2f4>
 8011a06:	0021      	movs	r1, r4
 8011a08:	f001 fafd 	bl	8013006 <memmove>
 8011a0c:	e7e4      	b.n	80119d8 <_realloc_r+0x300>
 8011a0e:	9e03      	ldr	r6, [sp, #12]
 8011a10:	e6c7      	b.n	80117a2 <_realloc_r+0xca>
 8011a12:	9902      	ldr	r1, [sp, #8]
 8011a14:	4306      	orrs	r6, r0
 8011a16:	604e      	str	r6, [r1, #4]
 8011a18:	6851      	ldr	r1, [r2, #4]
 8011a1a:	430b      	orrs	r3, r1
 8011a1c:	6053      	str	r3, [r2, #4]
 8011a1e:	e6da      	b.n	80117d6 <_realloc_r+0xfe>
 8011a20:	20000030 	.word	0x20000030

08011a24 <_strtoul_l.constprop.0>:
 8011a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a26:	b087      	sub	sp, #28
 8011a28:	9202      	str	r2, [sp, #8]
 8011a2a:	4a3e      	ldr	r2, [pc, #248]	; (8011b24 <_strtoul_l.constprop.0+0x100>)
 8011a2c:	001e      	movs	r6, r3
 8011a2e:	9101      	str	r1, [sp, #4]
 8011a30:	000b      	movs	r3, r1
 8011a32:	4694      	mov	ip, r2
 8011a34:	2108      	movs	r1, #8
 8011a36:	9005      	str	r0, [sp, #20]
 8011a38:	001a      	movs	r2, r3
 8011a3a:	4660      	mov	r0, ip
 8011a3c:	7814      	ldrb	r4, [r2, #0]
 8011a3e:	3301      	adds	r3, #1
 8011a40:	5d00      	ldrb	r0, [r0, r4]
 8011a42:	001d      	movs	r5, r3
 8011a44:	0007      	movs	r7, r0
 8011a46:	400f      	ands	r7, r1
 8011a48:	4208      	tst	r0, r1
 8011a4a:	d1f5      	bne.n	8011a38 <_strtoul_l.constprop.0+0x14>
 8011a4c:	2c2d      	cmp	r4, #45	; 0x2d
 8011a4e:	d13d      	bne.n	8011acc <_strtoul_l.constprop.0+0xa8>
 8011a50:	2701      	movs	r7, #1
 8011a52:	781c      	ldrb	r4, [r3, #0]
 8011a54:	1c95      	adds	r5, r2, #2
 8011a56:	2e00      	cmp	r6, #0
 8011a58:	d05f      	beq.n	8011b1a <_strtoul_l.constprop.0+0xf6>
 8011a5a:	2e10      	cmp	r6, #16
 8011a5c:	d109      	bne.n	8011a72 <_strtoul_l.constprop.0+0x4e>
 8011a5e:	2c30      	cmp	r4, #48	; 0x30
 8011a60:	d107      	bne.n	8011a72 <_strtoul_l.constprop.0+0x4e>
 8011a62:	2220      	movs	r2, #32
 8011a64:	782b      	ldrb	r3, [r5, #0]
 8011a66:	4393      	bics	r3, r2
 8011a68:	2b58      	cmp	r3, #88	; 0x58
 8011a6a:	d151      	bne.n	8011b10 <_strtoul_l.constprop.0+0xec>
 8011a6c:	2610      	movs	r6, #16
 8011a6e:	786c      	ldrb	r4, [r5, #1]
 8011a70:	3502      	adds	r5, #2
 8011a72:	2001      	movs	r0, #1
 8011a74:	0031      	movs	r1, r6
 8011a76:	4240      	negs	r0, r0
 8011a78:	f7ee fb60 	bl	800013c <__udivsi3>
 8011a7c:	9003      	str	r0, [sp, #12]
 8011a7e:	2001      	movs	r0, #1
 8011a80:	0031      	movs	r1, r6
 8011a82:	4240      	negs	r0, r0
 8011a84:	f7ee fbe0 	bl	8000248 <__aeabi_uidivmod>
 8011a88:	2300      	movs	r3, #0
 8011a8a:	2201      	movs	r2, #1
 8011a8c:	9104      	str	r1, [sp, #16]
 8011a8e:	2101      	movs	r1, #1
 8011a90:	0018      	movs	r0, r3
 8011a92:	4694      	mov	ip, r2
 8011a94:	4249      	negs	r1, r1
 8011a96:	0022      	movs	r2, r4
 8011a98:	3a30      	subs	r2, #48	; 0x30
 8011a9a:	2a09      	cmp	r2, #9
 8011a9c:	d903      	bls.n	8011aa6 <_strtoul_l.constprop.0+0x82>
 8011a9e:	3a11      	subs	r2, #17
 8011aa0:	2a19      	cmp	r2, #25
 8011aa2:	d818      	bhi.n	8011ad6 <_strtoul_l.constprop.0+0xb2>
 8011aa4:	320a      	adds	r2, #10
 8011aa6:	4296      	cmp	r6, r2
 8011aa8:	dd19      	ble.n	8011ade <_strtoul_l.constprop.0+0xba>
 8011aaa:	1c5c      	adds	r4, r3, #1
 8011aac:	d00b      	beq.n	8011ac6 <_strtoul_l.constprop.0+0xa2>
 8011aae:	9c03      	ldr	r4, [sp, #12]
 8011ab0:	000b      	movs	r3, r1
 8011ab2:	4284      	cmp	r4, r0
 8011ab4:	d307      	bcc.n	8011ac6 <_strtoul_l.constprop.0+0xa2>
 8011ab6:	d103      	bne.n	8011ac0 <_strtoul_l.constprop.0+0x9c>
 8011ab8:	9c04      	ldr	r4, [sp, #16]
 8011aba:	000b      	movs	r3, r1
 8011abc:	4294      	cmp	r4, r2
 8011abe:	db02      	blt.n	8011ac6 <_strtoul_l.constprop.0+0xa2>
 8011ac0:	4663      	mov	r3, ip
 8011ac2:	4370      	muls	r0, r6
 8011ac4:	1810      	adds	r0, r2, r0
 8011ac6:	782c      	ldrb	r4, [r5, #0]
 8011ac8:	3501      	adds	r5, #1
 8011aca:	e7e4      	b.n	8011a96 <_strtoul_l.constprop.0+0x72>
 8011acc:	2c2b      	cmp	r4, #43	; 0x2b
 8011ace:	d1c2      	bne.n	8011a56 <_strtoul_l.constprop.0+0x32>
 8011ad0:	781c      	ldrb	r4, [r3, #0]
 8011ad2:	1c95      	adds	r5, r2, #2
 8011ad4:	e7bf      	b.n	8011a56 <_strtoul_l.constprop.0+0x32>
 8011ad6:	0022      	movs	r2, r4
 8011ad8:	3a61      	subs	r2, #97	; 0x61
 8011ada:	2a19      	cmp	r2, #25
 8011adc:	d9e2      	bls.n	8011aa4 <_strtoul_l.constprop.0+0x80>
 8011ade:	1c5a      	adds	r2, r3, #1
 8011ae0:	d108      	bne.n	8011af4 <_strtoul_l.constprop.0+0xd0>
 8011ae2:	2222      	movs	r2, #34	; 0x22
 8011ae4:	9905      	ldr	r1, [sp, #20]
 8011ae6:	0018      	movs	r0, r3
 8011ae8:	600a      	str	r2, [r1, #0]
 8011aea:	9a02      	ldr	r2, [sp, #8]
 8011aec:	2a00      	cmp	r2, #0
 8011aee:	d109      	bne.n	8011b04 <_strtoul_l.constprop.0+0xe0>
 8011af0:	b007      	add	sp, #28
 8011af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011af4:	2f00      	cmp	r7, #0
 8011af6:	d000      	beq.n	8011afa <_strtoul_l.constprop.0+0xd6>
 8011af8:	4240      	negs	r0, r0
 8011afa:	9a02      	ldr	r2, [sp, #8]
 8011afc:	2a00      	cmp	r2, #0
 8011afe:	d0f7      	beq.n	8011af0 <_strtoul_l.constprop.0+0xcc>
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d001      	beq.n	8011b08 <_strtoul_l.constprop.0+0xe4>
 8011b04:	1e6b      	subs	r3, r5, #1
 8011b06:	9301      	str	r3, [sp, #4]
 8011b08:	9b02      	ldr	r3, [sp, #8]
 8011b0a:	9a01      	ldr	r2, [sp, #4]
 8011b0c:	601a      	str	r2, [r3, #0]
 8011b0e:	e7ef      	b.n	8011af0 <_strtoul_l.constprop.0+0xcc>
 8011b10:	2430      	movs	r4, #48	; 0x30
 8011b12:	2e00      	cmp	r6, #0
 8011b14:	d1ad      	bne.n	8011a72 <_strtoul_l.constprop.0+0x4e>
 8011b16:	3608      	adds	r6, #8
 8011b18:	e7ab      	b.n	8011a72 <_strtoul_l.constprop.0+0x4e>
 8011b1a:	2c30      	cmp	r4, #48	; 0x30
 8011b1c:	d0a1      	beq.n	8011a62 <_strtoul_l.constprop.0+0x3e>
 8011b1e:	260a      	movs	r6, #10
 8011b20:	e7a7      	b.n	8011a72 <_strtoul_l.constprop.0+0x4e>
 8011b22:	46c0      	nop			; (mov r8, r8)
 8011b24:	08014f71 	.word	0x08014f71

08011b28 <_strtoul_r>:
 8011b28:	b510      	push	{r4, lr}
 8011b2a:	f7ff ff7b 	bl	8011a24 <_strtoul_l.constprop.0>
 8011b2e:	bd10      	pop	{r4, pc}

08011b30 <_strtoll_l.constprop.0>:
 8011b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b32:	b08d      	sub	sp, #52	; 0x34
 8011b34:	9203      	str	r2, [sp, #12]
 8011b36:	4a53      	ldr	r2, [pc, #332]	; (8011c84 <_strtoll_l.constprop.0+0x154>)
 8011b38:	001e      	movs	r6, r3
 8011b3a:	9102      	str	r1, [sp, #8]
 8011b3c:	000b      	movs	r3, r1
 8011b3e:	4694      	mov	ip, r2
 8011b40:	2108      	movs	r1, #8
 8011b42:	900a      	str	r0, [sp, #40]	; 0x28
 8011b44:	001a      	movs	r2, r3
 8011b46:	4660      	mov	r0, ip
 8011b48:	7814      	ldrb	r4, [r2, #0]
 8011b4a:	3301      	adds	r3, #1
 8011b4c:	5d00      	ldrb	r0, [r0, r4]
 8011b4e:	001d      	movs	r5, r3
 8011b50:	0007      	movs	r7, r0
 8011b52:	400f      	ands	r7, r1
 8011b54:	4208      	tst	r0, r1
 8011b56:	d1f5      	bne.n	8011b44 <_strtoll_l.constprop.0+0x14>
 8011b58:	2c2d      	cmp	r4, #45	; 0x2d
 8011b5a:	d153      	bne.n	8011c04 <_strtoll_l.constprop.0+0xd4>
 8011b5c:	781c      	ldrb	r4, [r3, #0]
 8011b5e:	2301      	movs	r3, #1
 8011b60:	1c95      	adds	r5, r2, #2
 8011b62:	9301      	str	r3, [sp, #4]
 8011b64:	2e00      	cmp	r6, #0
 8011b66:	d100      	bne.n	8011b6a <_strtoll_l.constprop.0+0x3a>
 8011b68:	e086      	b.n	8011c78 <_strtoll_l.constprop.0+0x148>
 8011b6a:	2e10      	cmp	r6, #16
 8011b6c:	d10a      	bne.n	8011b84 <_strtoll_l.constprop.0+0x54>
 8011b6e:	2c30      	cmp	r4, #48	; 0x30
 8011b70:	d108      	bne.n	8011b84 <_strtoll_l.constprop.0+0x54>
 8011b72:	2220      	movs	r2, #32
 8011b74:	782b      	ldrb	r3, [r5, #0]
 8011b76:	4393      	bics	r3, r2
 8011b78:	2b58      	cmp	r3, #88	; 0x58
 8011b7a:	d000      	beq.n	8011b7e <_strtoll_l.constprop.0+0x4e>
 8011b7c:	e076      	b.n	8011c6c <_strtoll_l.constprop.0+0x13c>
 8011b7e:	2610      	movs	r6, #16
 8011b80:	786c      	ldrb	r4, [r5, #1]
 8011b82:	3502      	adds	r5, #2
 8011b84:	2001      	movs	r0, #1
 8011b86:	2300      	movs	r3, #0
 8011b88:	493f      	ldr	r1, [pc, #252]	; (8011c88 <_strtoll_l.constprop.0+0x158>)
 8011b8a:	9a01      	ldr	r2, [sp, #4]
 8011b8c:	4240      	negs	r0, r0
 8011b8e:	1812      	adds	r2, r2, r0
 8011b90:	414b      	adcs	r3, r1
 8011b92:	9204      	str	r2, [sp, #16]
 8011b94:	9305      	str	r3, [sp, #20]
 8011b96:	9804      	ldr	r0, [sp, #16]
 8011b98:	9905      	ldr	r1, [sp, #20]
 8011b9a:	17f3      	asrs	r3, r6, #31
 8011b9c:	0032      	movs	r2, r6
 8011b9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011ba0:	f7ee fc80 	bl	80004a4 <__aeabi_uldivmod>
 8011ba4:	2300      	movs	r3, #0
 8011ba6:	000f      	movs	r7, r1
 8011ba8:	9008      	str	r0, [sp, #32]
 8011baa:	2100      	movs	r1, #0
 8011bac:	2000      	movs	r0, #0
 8011bae:	9209      	str	r2, [sp, #36]	; 0x24
 8011bb0:	0022      	movs	r2, r4
 8011bb2:	3a30      	subs	r2, #48	; 0x30
 8011bb4:	2a09      	cmp	r2, #9
 8011bb6:	d82b      	bhi.n	8011c10 <_strtoll_l.constprop.0+0xe0>
 8011bb8:	0014      	movs	r4, r2
 8011bba:	42a6      	cmp	r6, r4
 8011bbc:	dd37      	ble.n	8011c2e <_strtoll_l.constprop.0+0xfe>
 8011bbe:	1c5a      	adds	r2, r3, #1
 8011bc0:	d01d      	beq.n	8011bfe <_strtoll_l.constprop.0+0xce>
 8011bc2:	42b9      	cmp	r1, r7
 8011bc4:	d830      	bhi.n	8011c28 <_strtoll_l.constprop.0+0xf8>
 8011bc6:	d102      	bne.n	8011bce <_strtoll_l.constprop.0+0x9e>
 8011bc8:	9b08      	ldr	r3, [sp, #32]
 8011bca:	4298      	cmp	r0, r3
 8011bcc:	d82c      	bhi.n	8011c28 <_strtoll_l.constprop.0+0xf8>
 8011bce:	9b08      	ldr	r3, [sp, #32]
 8011bd0:	4283      	cmp	r3, r0
 8011bd2:	d106      	bne.n	8011be2 <_strtoll_l.constprop.0+0xb2>
 8011bd4:	428f      	cmp	r7, r1
 8011bd6:	d104      	bne.n	8011be2 <_strtoll_l.constprop.0+0xb2>
 8011bd8:	2301      	movs	r3, #1
 8011bda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011bdc:	425b      	negs	r3, r3
 8011bde:	42a2      	cmp	r2, r4
 8011be0:	db0d      	blt.n	8011bfe <_strtoll_l.constprop.0+0xce>
 8011be2:	000b      	movs	r3, r1
 8011be4:	0002      	movs	r2, r0
 8011be6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011be8:	0030      	movs	r0, r6
 8011bea:	f7ee fc7b 	bl	80004e4 <__aeabi_lmul>
 8011bee:	17e3      	asrs	r3, r4, #31
 8011bf0:	9406      	str	r4, [sp, #24]
 8011bf2:	9307      	str	r3, [sp, #28]
 8011bf4:	9b06      	ldr	r3, [sp, #24]
 8011bf6:	9c07      	ldr	r4, [sp, #28]
 8011bf8:	18c0      	adds	r0, r0, r3
 8011bfa:	4161      	adcs	r1, r4
 8011bfc:	2301      	movs	r3, #1
 8011bfe:	782c      	ldrb	r4, [r5, #0]
 8011c00:	3501      	adds	r5, #1
 8011c02:	e7d5      	b.n	8011bb0 <_strtoll_l.constprop.0+0x80>
 8011c04:	9701      	str	r7, [sp, #4]
 8011c06:	2c2b      	cmp	r4, #43	; 0x2b
 8011c08:	d1ac      	bne.n	8011b64 <_strtoll_l.constprop.0+0x34>
 8011c0a:	781c      	ldrb	r4, [r3, #0]
 8011c0c:	1c95      	adds	r5, r2, #2
 8011c0e:	e7a9      	b.n	8011b64 <_strtoll_l.constprop.0+0x34>
 8011c10:	0022      	movs	r2, r4
 8011c12:	3a41      	subs	r2, #65	; 0x41
 8011c14:	2a19      	cmp	r2, #25
 8011c16:	d801      	bhi.n	8011c1c <_strtoll_l.constprop.0+0xec>
 8011c18:	3c37      	subs	r4, #55	; 0x37
 8011c1a:	e7ce      	b.n	8011bba <_strtoll_l.constprop.0+0x8a>
 8011c1c:	0022      	movs	r2, r4
 8011c1e:	3a61      	subs	r2, #97	; 0x61
 8011c20:	2a19      	cmp	r2, #25
 8011c22:	d804      	bhi.n	8011c2e <_strtoll_l.constprop.0+0xfe>
 8011c24:	3c57      	subs	r4, #87	; 0x57
 8011c26:	e7c8      	b.n	8011bba <_strtoll_l.constprop.0+0x8a>
 8011c28:	2301      	movs	r3, #1
 8011c2a:	425b      	negs	r3, r3
 8011c2c:	e7e7      	b.n	8011bfe <_strtoll_l.constprop.0+0xce>
 8011c2e:	1c5a      	adds	r2, r3, #1
 8011c30:	d109      	bne.n	8011c46 <_strtoll_l.constprop.0+0x116>
 8011c32:	9804      	ldr	r0, [sp, #16]
 8011c34:	9905      	ldr	r1, [sp, #20]
 8011c36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011c38:	3323      	adds	r3, #35	; 0x23
 8011c3a:	6013      	str	r3, [r2, #0]
 8011c3c:	9b03      	ldr	r3, [sp, #12]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d10e      	bne.n	8011c60 <_strtoll_l.constprop.0+0x130>
 8011c42:	b00d      	add	sp, #52	; 0x34
 8011c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c46:	9a01      	ldr	r2, [sp, #4]
 8011c48:	2a00      	cmp	r2, #0
 8011c4a:	d004      	beq.n	8011c56 <_strtoll_l.constprop.0+0x126>
 8011c4c:	0006      	movs	r6, r0
 8011c4e:	000f      	movs	r7, r1
 8011c50:	2100      	movs	r1, #0
 8011c52:	4270      	negs	r0, r6
 8011c54:	41b9      	sbcs	r1, r7
 8011c56:	9a03      	ldr	r2, [sp, #12]
 8011c58:	2a00      	cmp	r2, #0
 8011c5a:	d0f2      	beq.n	8011c42 <_strtoll_l.constprop.0+0x112>
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d001      	beq.n	8011c64 <_strtoll_l.constprop.0+0x134>
 8011c60:	1e6b      	subs	r3, r5, #1
 8011c62:	9302      	str	r3, [sp, #8]
 8011c64:	9b03      	ldr	r3, [sp, #12]
 8011c66:	9a02      	ldr	r2, [sp, #8]
 8011c68:	601a      	str	r2, [r3, #0]
 8011c6a:	e7ea      	b.n	8011c42 <_strtoll_l.constprop.0+0x112>
 8011c6c:	2430      	movs	r4, #48	; 0x30
 8011c6e:	2e00      	cmp	r6, #0
 8011c70:	d000      	beq.n	8011c74 <_strtoll_l.constprop.0+0x144>
 8011c72:	e787      	b.n	8011b84 <_strtoll_l.constprop.0+0x54>
 8011c74:	3608      	adds	r6, #8
 8011c76:	e785      	b.n	8011b84 <_strtoll_l.constprop.0+0x54>
 8011c78:	2c30      	cmp	r4, #48	; 0x30
 8011c7a:	d100      	bne.n	8011c7e <_strtoll_l.constprop.0+0x14e>
 8011c7c:	e779      	b.n	8011b72 <_strtoll_l.constprop.0+0x42>
 8011c7e:	260a      	movs	r6, #10
 8011c80:	e780      	b.n	8011b84 <_strtoll_l.constprop.0+0x54>
 8011c82:	46c0      	nop			; (mov r8, r8)
 8011c84:	08014f71 	.word	0x08014f71
 8011c88:	7fffffff 	.word	0x7fffffff

08011c8c <_strtoll_r>:
 8011c8c:	b510      	push	{r4, lr}
 8011c8e:	f7ff ff4f 	bl	8011b30 <_strtoll_l.constprop.0>
 8011c92:	bd10      	pop	{r4, pc}

08011c94 <_strtoull_l.constprop.0>:
 8011c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c96:	b08b      	sub	sp, #44	; 0x2c
 8011c98:	9202      	str	r2, [sp, #8]
 8011c9a:	4a54      	ldr	r2, [pc, #336]	; (8011dec <_strtoull_l.constprop.0+0x158>)
 8011c9c:	001e      	movs	r6, r3
 8011c9e:	9101      	str	r1, [sp, #4]
 8011ca0:	000b      	movs	r3, r1
 8011ca2:	4694      	mov	ip, r2
 8011ca4:	2108      	movs	r1, #8
 8011ca6:	9009      	str	r0, [sp, #36]	; 0x24
 8011ca8:	001a      	movs	r2, r3
 8011caa:	4660      	mov	r0, ip
 8011cac:	7814      	ldrb	r4, [r2, #0]
 8011cae:	3301      	adds	r3, #1
 8011cb0:	5d00      	ldrb	r0, [r0, r4]
 8011cb2:	001d      	movs	r5, r3
 8011cb4:	0007      	movs	r7, r0
 8011cb6:	400f      	ands	r7, r1
 8011cb8:	4208      	tst	r0, r1
 8011cba:	d1f5      	bne.n	8011ca8 <_strtoull_l.constprop.0+0x14>
 8011cbc:	2c2d      	cmp	r4, #45	; 0x2d
 8011cbe:	d154      	bne.n	8011d6a <_strtoull_l.constprop.0+0xd6>
 8011cc0:	781c      	ldrb	r4, [r3, #0]
 8011cc2:	2301      	movs	r3, #1
 8011cc4:	1c95      	adds	r5, r2, #2
 8011cc6:	9306      	str	r3, [sp, #24]
 8011cc8:	2e00      	cmp	r6, #0
 8011cca:	d100      	bne.n	8011cce <_strtoull_l.constprop.0+0x3a>
 8011ccc:	e088      	b.n	8011de0 <_strtoull_l.constprop.0+0x14c>
 8011cce:	2e10      	cmp	r6, #16
 8011cd0:	d10a      	bne.n	8011ce8 <_strtoull_l.constprop.0+0x54>
 8011cd2:	2c30      	cmp	r4, #48	; 0x30
 8011cd4:	d108      	bne.n	8011ce8 <_strtoull_l.constprop.0+0x54>
 8011cd6:	2220      	movs	r2, #32
 8011cd8:	782b      	ldrb	r3, [r5, #0]
 8011cda:	4393      	bics	r3, r2
 8011cdc:	2b58      	cmp	r3, #88	; 0x58
 8011cde:	d000      	beq.n	8011ce2 <_strtoull_l.constprop.0+0x4e>
 8011ce0:	e078      	b.n	8011dd4 <_strtoull_l.constprop.0+0x140>
 8011ce2:	2610      	movs	r6, #16
 8011ce4:	786c      	ldrb	r4, [r5, #1]
 8011ce6:	3502      	adds	r5, #2
 8011ce8:	17f7      	asrs	r7, r6, #31
 8011cea:	0032      	movs	r2, r6
 8011cec:	003b      	movs	r3, r7
 8011cee:	2001      	movs	r0, #1
 8011cf0:	4240      	negs	r0, r0
 8011cf2:	17c1      	asrs	r1, r0, #31
 8011cf4:	f7ee fbd6 	bl	80004a4 <__aeabi_uldivmod>
 8011cf8:	0032      	movs	r2, r6
 8011cfa:	9007      	str	r0, [sp, #28]
 8011cfc:	9103      	str	r1, [sp, #12]
 8011cfe:	003b      	movs	r3, r7
 8011d00:	2001      	movs	r0, #1
 8011d02:	4240      	negs	r0, r0
 8011d04:	17c1      	asrs	r1, r0, #31
 8011d06:	f7ee fbcd 	bl	80004a4 <__aeabi_uldivmod>
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	2000      	movs	r0, #0
 8011d0e:	2100      	movs	r1, #0
 8011d10:	9208      	str	r2, [sp, #32]
 8011d12:	0022      	movs	r2, r4
 8011d14:	3a30      	subs	r2, #48	; 0x30
 8011d16:	2a09      	cmp	r2, #9
 8011d18:	d82d      	bhi.n	8011d76 <_strtoull_l.constprop.0+0xe2>
 8011d1a:	0014      	movs	r4, r2
 8011d1c:	42a6      	cmp	r6, r4
 8011d1e:	dd39      	ble.n	8011d94 <_strtoull_l.constprop.0+0x100>
 8011d20:	1c5a      	adds	r2, r3, #1
 8011d22:	d01f      	beq.n	8011d64 <_strtoull_l.constprop.0+0xd0>
 8011d24:	9b03      	ldr	r3, [sp, #12]
 8011d26:	4299      	cmp	r1, r3
 8011d28:	d831      	bhi.n	8011d8e <_strtoull_l.constprop.0+0xfa>
 8011d2a:	d102      	bne.n	8011d32 <_strtoull_l.constprop.0+0x9e>
 8011d2c:	9b07      	ldr	r3, [sp, #28]
 8011d2e:	4298      	cmp	r0, r3
 8011d30:	d82d      	bhi.n	8011d8e <_strtoull_l.constprop.0+0xfa>
 8011d32:	9b07      	ldr	r3, [sp, #28]
 8011d34:	4283      	cmp	r3, r0
 8011d36:	d107      	bne.n	8011d48 <_strtoull_l.constprop.0+0xb4>
 8011d38:	9b03      	ldr	r3, [sp, #12]
 8011d3a:	428b      	cmp	r3, r1
 8011d3c:	d104      	bne.n	8011d48 <_strtoull_l.constprop.0+0xb4>
 8011d3e:	2301      	movs	r3, #1
 8011d40:	9a08      	ldr	r2, [sp, #32]
 8011d42:	425b      	negs	r3, r3
 8011d44:	42a2      	cmp	r2, r4
 8011d46:	db0d      	blt.n	8011d64 <_strtoull_l.constprop.0+0xd0>
 8011d48:	000b      	movs	r3, r1
 8011d4a:	0002      	movs	r2, r0
 8011d4c:	0039      	movs	r1, r7
 8011d4e:	0030      	movs	r0, r6
 8011d50:	f7ee fbc8 	bl	80004e4 <__aeabi_lmul>
 8011d54:	17e3      	asrs	r3, r4, #31
 8011d56:	9404      	str	r4, [sp, #16]
 8011d58:	9305      	str	r3, [sp, #20]
 8011d5a:	9b04      	ldr	r3, [sp, #16]
 8011d5c:	9c05      	ldr	r4, [sp, #20]
 8011d5e:	18c0      	adds	r0, r0, r3
 8011d60:	4161      	adcs	r1, r4
 8011d62:	2301      	movs	r3, #1
 8011d64:	782c      	ldrb	r4, [r5, #0]
 8011d66:	3501      	adds	r5, #1
 8011d68:	e7d3      	b.n	8011d12 <_strtoull_l.constprop.0+0x7e>
 8011d6a:	9706      	str	r7, [sp, #24]
 8011d6c:	2c2b      	cmp	r4, #43	; 0x2b
 8011d6e:	d1ab      	bne.n	8011cc8 <_strtoull_l.constprop.0+0x34>
 8011d70:	781c      	ldrb	r4, [r3, #0]
 8011d72:	1c95      	adds	r5, r2, #2
 8011d74:	e7a8      	b.n	8011cc8 <_strtoull_l.constprop.0+0x34>
 8011d76:	0022      	movs	r2, r4
 8011d78:	3a41      	subs	r2, #65	; 0x41
 8011d7a:	2a19      	cmp	r2, #25
 8011d7c:	d801      	bhi.n	8011d82 <_strtoull_l.constprop.0+0xee>
 8011d7e:	3c37      	subs	r4, #55	; 0x37
 8011d80:	e7cc      	b.n	8011d1c <_strtoull_l.constprop.0+0x88>
 8011d82:	0022      	movs	r2, r4
 8011d84:	3a61      	subs	r2, #97	; 0x61
 8011d86:	2a19      	cmp	r2, #25
 8011d88:	d804      	bhi.n	8011d94 <_strtoull_l.constprop.0+0x100>
 8011d8a:	3c57      	subs	r4, #87	; 0x57
 8011d8c:	e7c6      	b.n	8011d1c <_strtoull_l.constprop.0+0x88>
 8011d8e:	2301      	movs	r3, #1
 8011d90:	425b      	negs	r3, r3
 8011d92:	e7e7      	b.n	8011d64 <_strtoull_l.constprop.0+0xd0>
 8011d94:	1c5a      	adds	r2, r3, #1
 8011d96:	d10a      	bne.n	8011dae <_strtoull_l.constprop.0+0x11a>
 8011d98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011d9a:	3323      	adds	r3, #35	; 0x23
 8011d9c:	6013      	str	r3, [r2, #0]
 8011d9e:	9b02      	ldr	r3, [sp, #8]
 8011da0:	2001      	movs	r0, #1
 8011da2:	4240      	negs	r0, r0
 8011da4:	17c1      	asrs	r1, r0, #31
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d10e      	bne.n	8011dc8 <_strtoull_l.constprop.0+0x134>
 8011daa:	b00b      	add	sp, #44	; 0x2c
 8011dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011dae:	9a06      	ldr	r2, [sp, #24]
 8011db0:	2a00      	cmp	r2, #0
 8011db2:	d004      	beq.n	8011dbe <_strtoull_l.constprop.0+0x12a>
 8011db4:	0006      	movs	r6, r0
 8011db6:	000f      	movs	r7, r1
 8011db8:	2100      	movs	r1, #0
 8011dba:	4270      	negs	r0, r6
 8011dbc:	41b9      	sbcs	r1, r7
 8011dbe:	9a02      	ldr	r2, [sp, #8]
 8011dc0:	2a00      	cmp	r2, #0
 8011dc2:	d0f2      	beq.n	8011daa <_strtoull_l.constprop.0+0x116>
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d001      	beq.n	8011dcc <_strtoull_l.constprop.0+0x138>
 8011dc8:	1e6b      	subs	r3, r5, #1
 8011dca:	9301      	str	r3, [sp, #4]
 8011dcc:	9b02      	ldr	r3, [sp, #8]
 8011dce:	9a01      	ldr	r2, [sp, #4]
 8011dd0:	601a      	str	r2, [r3, #0]
 8011dd2:	e7ea      	b.n	8011daa <_strtoull_l.constprop.0+0x116>
 8011dd4:	2430      	movs	r4, #48	; 0x30
 8011dd6:	2e00      	cmp	r6, #0
 8011dd8:	d000      	beq.n	8011ddc <_strtoull_l.constprop.0+0x148>
 8011dda:	e785      	b.n	8011ce8 <_strtoull_l.constprop.0+0x54>
 8011ddc:	3608      	adds	r6, #8
 8011dde:	e783      	b.n	8011ce8 <_strtoull_l.constprop.0+0x54>
 8011de0:	2c30      	cmp	r4, #48	; 0x30
 8011de2:	d100      	bne.n	8011de6 <_strtoull_l.constprop.0+0x152>
 8011de4:	e777      	b.n	8011cd6 <_strtoull_l.constprop.0+0x42>
 8011de6:	260a      	movs	r6, #10
 8011de8:	e77e      	b.n	8011ce8 <_strtoull_l.constprop.0+0x54>
 8011dea:	46c0      	nop			; (mov r8, r8)
 8011dec:	08014f71 	.word	0x08014f71

08011df0 <_strtoull_r>:
 8011df0:	b510      	push	{r4, lr}
 8011df2:	f7ff ff4f 	bl	8011c94 <_strtoull_l.constprop.0>
 8011df6:	bd10      	pop	{r4, pc}

08011df8 <_mbrtowc_r>:
 8011df8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011dfa:	0004      	movs	r4, r0
 8011dfc:	0010      	movs	r0, r2
 8011dfe:	4a0b      	ldr	r2, [pc, #44]	; (8011e2c <_mbrtowc_r+0x34>)
 8011e00:	9d06      	ldr	r5, [sp, #24]
 8011e02:	32e4      	adds	r2, #228	; 0xe4
 8011e04:	6816      	ldr	r6, [r2, #0]
 8011e06:	2800      	cmp	r0, #0
 8011e08:	d10c      	bne.n	8011e24 <_mbrtowc_r+0x2c>
 8011e0a:	2301      	movs	r3, #1
 8011e0c:	0001      	movs	r1, r0
 8011e0e:	4a08      	ldr	r2, [pc, #32]	; (8011e30 <_mbrtowc_r+0x38>)
 8011e10:	9500      	str	r5, [sp, #0]
 8011e12:	0020      	movs	r0, r4
 8011e14:	47b0      	blx	r6
 8011e16:	1c43      	adds	r3, r0, #1
 8011e18:	d103      	bne.n	8011e22 <_mbrtowc_r+0x2a>
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	602b      	str	r3, [r5, #0]
 8011e1e:	338a      	adds	r3, #138	; 0x8a
 8011e20:	6023      	str	r3, [r4, #0]
 8011e22:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8011e24:	0002      	movs	r2, r0
 8011e26:	9500      	str	r5, [sp, #0]
 8011e28:	e7f3      	b.n	8011e12 <_mbrtowc_r+0x1a>
 8011e2a:	46c0      	nop			; (mov r8, r8)
 8011e2c:	2000044c 	.word	0x2000044c
 8011e30:	080152fb 	.word	0x080152fb

08011e34 <iswspace>:
 8011e34:	b510      	push	{r4, lr}
 8011e36:	2100      	movs	r1, #0
 8011e38:	f000 f802 	bl	8011e40 <iswspace_l>
 8011e3c:	bd10      	pop	{r4, pc}
	...

08011e40 <iswspace_l>:
 8011e40:	0003      	movs	r3, r0
 8011e42:	2000      	movs	r0, #0
 8011e44:	2bff      	cmp	r3, #255	; 0xff
 8011e46:	d803      	bhi.n	8011e50 <iswspace_l+0x10>
 8011e48:	4a02      	ldr	r2, [pc, #8]	; (8011e54 <iswspace_l+0x14>)
 8011e4a:	5cd0      	ldrb	r0, [r2, r3]
 8011e4c:	2308      	movs	r3, #8
 8011e4e:	4018      	ands	r0, r3
 8011e50:	4770      	bx	lr
 8011e52:	46c0      	nop			; (mov r8, r8)
 8011e54:	08014f71 	.word	0x08014f71

08011e58 <fiprintf>:
 8011e58:	b40e      	push	{r1, r2, r3}
 8011e5a:	b517      	push	{r0, r1, r2, r4, lr}
 8011e5c:	4c05      	ldr	r4, [pc, #20]	; (8011e74 <fiprintf+0x1c>)
 8011e5e:	ab05      	add	r3, sp, #20
 8011e60:	cb04      	ldmia	r3!, {r2}
 8011e62:	0001      	movs	r1, r0
 8011e64:	6820      	ldr	r0, [r4, #0]
 8011e66:	9301      	str	r3, [sp, #4]
 8011e68:	f000 f954 	bl	8012114 <_vfiprintf_r>
 8011e6c:	bc1e      	pop	{r1, r2, r3, r4}
 8011e6e:	bc08      	pop	{r3}
 8011e70:	b003      	add	sp, #12
 8011e72:	4718      	bx	r3
 8011e74:	200006d8 	.word	0x200006d8

08011e78 <__ssprint_r>:
 8011e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e7a:	6813      	ldr	r3, [r2, #0]
 8011e7c:	b087      	sub	sp, #28
 8011e7e:	0017      	movs	r7, r2
 8011e80:	9303      	str	r3, [sp, #12]
 8011e82:	6893      	ldr	r3, [r2, #8]
 8011e84:	2200      	movs	r2, #0
 8011e86:	000c      	movs	r4, r1
 8011e88:	9005      	str	r0, [sp, #20]
 8011e8a:	9202      	str	r2, [sp, #8]
 8011e8c:	9201      	str	r2, [sp, #4]
 8011e8e:	4293      	cmp	r3, r2
 8011e90:	d10d      	bne.n	8011eae <__ssprint_r+0x36>
 8011e92:	2000      	movs	r0, #0
 8011e94:	2300      	movs	r3, #0
 8011e96:	607b      	str	r3, [r7, #4]
 8011e98:	b007      	add	sp, #28
 8011e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e9c:	9b03      	ldr	r3, [sp, #12]
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	9302      	str	r3, [sp, #8]
 8011ea2:	9b03      	ldr	r3, [sp, #12]
 8011ea4:	685b      	ldr	r3, [r3, #4]
 8011ea6:	9301      	str	r3, [sp, #4]
 8011ea8:	9b03      	ldr	r3, [sp, #12]
 8011eaa:	3308      	adds	r3, #8
 8011eac:	9303      	str	r3, [sp, #12]
 8011eae:	9a01      	ldr	r2, [sp, #4]
 8011eb0:	68a6      	ldr	r6, [r4, #8]
 8011eb2:	6823      	ldr	r3, [r4, #0]
 8011eb4:	2a00      	cmp	r2, #0
 8011eb6:	d0f1      	beq.n	8011e9c <__ssprint_r+0x24>
 8011eb8:	42b2      	cmp	r2, r6
 8011eba:	d32e      	bcc.n	8011f1a <__ssprint_r+0xa2>
 8011ebc:	2190      	movs	r1, #144	; 0x90
 8011ebe:	89a2      	ldrh	r2, [r4, #12]
 8011ec0:	00c9      	lsls	r1, r1, #3
 8011ec2:	420a      	tst	r2, r1
 8011ec4:	d029      	beq.n	8011f1a <__ssprint_r+0xa2>
 8011ec6:	2003      	movs	r0, #3
 8011ec8:	6921      	ldr	r1, [r4, #16]
 8011eca:	1a5b      	subs	r3, r3, r1
 8011ecc:	9304      	str	r3, [sp, #16]
 8011ece:	6963      	ldr	r3, [r4, #20]
 8011ed0:	4343      	muls	r3, r0
 8011ed2:	0fdd      	lsrs	r5, r3, #31
 8011ed4:	18ed      	adds	r5, r5, r3
 8011ed6:	9b04      	ldr	r3, [sp, #16]
 8011ed8:	9801      	ldr	r0, [sp, #4]
 8011eda:	3301      	adds	r3, #1
 8011edc:	181b      	adds	r3, r3, r0
 8011ede:	106d      	asrs	r5, r5, #1
 8011ee0:	42ab      	cmp	r3, r5
 8011ee2:	d900      	bls.n	8011ee6 <__ssprint_r+0x6e>
 8011ee4:	001d      	movs	r5, r3
 8011ee6:	0552      	lsls	r2, r2, #21
 8011ee8:	d532      	bpl.n	8011f50 <__ssprint_r+0xd8>
 8011eea:	0029      	movs	r1, r5
 8011eec:	9805      	ldr	r0, [sp, #20]
 8011eee:	f7f9 fa35 	bl	800b35c <_malloc_r>
 8011ef2:	1e06      	subs	r6, r0, #0
 8011ef4:	d036      	beq.n	8011f64 <__ssprint_r+0xec>
 8011ef6:	9a04      	ldr	r2, [sp, #16]
 8011ef8:	6921      	ldr	r1, [r4, #16]
 8011efa:	f7fa fd94 	bl	800ca26 <memcpy>
 8011efe:	89a2      	ldrh	r2, [r4, #12]
 8011f00:	4b1e      	ldr	r3, [pc, #120]	; (8011f7c <__ssprint_r+0x104>)
 8011f02:	401a      	ands	r2, r3
 8011f04:	2380      	movs	r3, #128	; 0x80
 8011f06:	4313      	orrs	r3, r2
 8011f08:	81a3      	strh	r3, [r4, #12]
 8011f0a:	9b04      	ldr	r3, [sp, #16]
 8011f0c:	6126      	str	r6, [r4, #16]
 8011f0e:	18f6      	adds	r6, r6, r3
 8011f10:	6026      	str	r6, [r4, #0]
 8011f12:	6165      	str	r5, [r4, #20]
 8011f14:	9e01      	ldr	r6, [sp, #4]
 8011f16:	1aed      	subs	r5, r5, r3
 8011f18:	60a5      	str	r5, [r4, #8]
 8011f1a:	9b01      	ldr	r3, [sp, #4]
 8011f1c:	429e      	cmp	r6, r3
 8011f1e:	d900      	bls.n	8011f22 <__ssprint_r+0xaa>
 8011f20:	001e      	movs	r6, r3
 8011f22:	0032      	movs	r2, r6
 8011f24:	9902      	ldr	r1, [sp, #8]
 8011f26:	6820      	ldr	r0, [r4, #0]
 8011f28:	f001 f86d 	bl	8013006 <memmove>
 8011f2c:	9a01      	ldr	r2, [sp, #4]
 8011f2e:	68a3      	ldr	r3, [r4, #8]
 8011f30:	4694      	mov	ip, r2
 8011f32:	1b9b      	subs	r3, r3, r6
 8011f34:	60a3      	str	r3, [r4, #8]
 8011f36:	6823      	ldr	r3, [r4, #0]
 8011f38:	199b      	adds	r3, r3, r6
 8011f3a:	6023      	str	r3, [r4, #0]
 8011f3c:	9b02      	ldr	r3, [sp, #8]
 8011f3e:	4463      	add	r3, ip
 8011f40:	9302      	str	r3, [sp, #8]
 8011f42:	68bb      	ldr	r3, [r7, #8]
 8011f44:	1a9b      	subs	r3, r3, r2
 8011f46:	60bb      	str	r3, [r7, #8]
 8011f48:	d0a3      	beq.n	8011e92 <__ssprint_r+0x1a>
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	9301      	str	r3, [sp, #4]
 8011f4e:	e7ae      	b.n	8011eae <__ssprint_r+0x36>
 8011f50:	002a      	movs	r2, r5
 8011f52:	9805      	ldr	r0, [sp, #20]
 8011f54:	f7ff fbc0 	bl	80116d8 <_realloc_r>
 8011f58:	1e06      	subs	r6, r0, #0
 8011f5a:	d1d6      	bne.n	8011f0a <__ssprint_r+0x92>
 8011f5c:	6921      	ldr	r1, [r4, #16]
 8011f5e:	9805      	ldr	r0, [sp, #20]
 8011f60:	f7fa fddc 	bl	800cb1c <_free_r>
 8011f64:	230c      	movs	r3, #12
 8011f66:	9a05      	ldr	r2, [sp, #20]
 8011f68:	2001      	movs	r0, #1
 8011f6a:	6013      	str	r3, [r2, #0]
 8011f6c:	89a2      	ldrh	r2, [r4, #12]
 8011f6e:	3334      	adds	r3, #52	; 0x34
 8011f70:	4313      	orrs	r3, r2
 8011f72:	81a3      	strh	r3, [r4, #12]
 8011f74:	2300      	movs	r3, #0
 8011f76:	4240      	negs	r0, r0
 8011f78:	60bb      	str	r3, [r7, #8]
 8011f7a:	e78b      	b.n	8011e94 <__ssprint_r+0x1c>
 8011f7c:	fffffb7f 	.word	0xfffffb7f

08011f80 <_sungetc_r>:
 8011f80:	b570      	push	{r4, r5, r6, lr}
 8011f82:	0014      	movs	r4, r2
 8011f84:	1c4b      	adds	r3, r1, #1
 8011f86:	d103      	bne.n	8011f90 <_sungetc_r+0x10>
 8011f88:	2501      	movs	r5, #1
 8011f8a:	426d      	negs	r5, r5
 8011f8c:	0028      	movs	r0, r5
 8011f8e:	bd70      	pop	{r4, r5, r6, pc}
 8011f90:	8993      	ldrh	r3, [r2, #12]
 8011f92:	2220      	movs	r2, #32
 8011f94:	4393      	bics	r3, r2
 8011f96:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011f98:	81a3      	strh	r3, [r4, #12]
 8011f9a:	b2ce      	uxtb	r6, r1
 8011f9c:	6863      	ldr	r3, [r4, #4]
 8011f9e:	b2cd      	uxtb	r5, r1
 8011fa0:	2a00      	cmp	r2, #0
 8011fa2:	d010      	beq.n	8011fc6 <_sungetc_r+0x46>
 8011fa4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8011fa6:	429a      	cmp	r2, r3
 8011fa8:	dd07      	ble.n	8011fba <_sungetc_r+0x3a>
 8011faa:	6823      	ldr	r3, [r4, #0]
 8011fac:	3b01      	subs	r3, #1
 8011fae:	6023      	str	r3, [r4, #0]
 8011fb0:	701e      	strb	r6, [r3, #0]
 8011fb2:	6863      	ldr	r3, [r4, #4]
 8011fb4:	3301      	adds	r3, #1
 8011fb6:	6063      	str	r3, [r4, #4]
 8011fb8:	e7e8      	b.n	8011f8c <_sungetc_r+0xc>
 8011fba:	0021      	movs	r1, r4
 8011fbc:	f000 ff1a 	bl	8012df4 <__submore>
 8011fc0:	2800      	cmp	r0, #0
 8011fc2:	d0f2      	beq.n	8011faa <_sungetc_r+0x2a>
 8011fc4:	e7e0      	b.n	8011f88 <_sungetc_r+0x8>
 8011fc6:	6921      	ldr	r1, [r4, #16]
 8011fc8:	6822      	ldr	r2, [r4, #0]
 8011fca:	2900      	cmp	r1, #0
 8011fcc:	d007      	beq.n	8011fde <_sungetc_r+0x5e>
 8011fce:	4291      	cmp	r1, r2
 8011fd0:	d205      	bcs.n	8011fde <_sungetc_r+0x5e>
 8011fd2:	1e51      	subs	r1, r2, #1
 8011fd4:	7808      	ldrb	r0, [r1, #0]
 8011fd6:	42a8      	cmp	r0, r5
 8011fd8:	d101      	bne.n	8011fde <_sungetc_r+0x5e>
 8011fda:	6021      	str	r1, [r4, #0]
 8011fdc:	e7ea      	b.n	8011fb4 <_sungetc_r+0x34>
 8011fde:	63e3      	str	r3, [r4, #60]	; 0x3c
 8011fe0:	0023      	movs	r3, r4
 8011fe2:	3340      	adds	r3, #64	; 0x40
 8011fe4:	6323      	str	r3, [r4, #48]	; 0x30
 8011fe6:	2303      	movs	r3, #3
 8011fe8:	6363      	str	r3, [r4, #52]	; 0x34
 8011fea:	0023      	movs	r3, r4
 8011fec:	3342      	adds	r3, #66	; 0x42
 8011fee:	63a2      	str	r2, [r4, #56]	; 0x38
 8011ff0:	701e      	strb	r6, [r3, #0]
 8011ff2:	6023      	str	r3, [r4, #0]
 8011ff4:	2301      	movs	r3, #1
 8011ff6:	e7de      	b.n	8011fb6 <_sungetc_r+0x36>

08011ff8 <__ssrefill_r>:
 8011ff8:	b510      	push	{r4, lr}
 8011ffa:	000c      	movs	r4, r1
 8011ffc:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8011ffe:	2900      	cmp	r1, #0
 8012000:	d00e      	beq.n	8012020 <__ssrefill_r+0x28>
 8012002:	0023      	movs	r3, r4
 8012004:	3340      	adds	r3, #64	; 0x40
 8012006:	4299      	cmp	r1, r3
 8012008:	d001      	beq.n	801200e <__ssrefill_r+0x16>
 801200a:	f7fa fd87 	bl	800cb1c <_free_r>
 801200e:	2000      	movs	r0, #0
 8012010:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012012:	6320      	str	r0, [r4, #48]	; 0x30
 8012014:	6063      	str	r3, [r4, #4]
 8012016:	4283      	cmp	r3, r0
 8012018:	d002      	beq.n	8012020 <__ssrefill_r+0x28>
 801201a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801201c:	6023      	str	r3, [r4, #0]
 801201e:	bd10      	pop	{r4, pc}
 8012020:	6923      	ldr	r3, [r4, #16]
 8012022:	2001      	movs	r0, #1
 8012024:	6023      	str	r3, [r4, #0]
 8012026:	2300      	movs	r3, #0
 8012028:	89a2      	ldrh	r2, [r4, #12]
 801202a:	6063      	str	r3, [r4, #4]
 801202c:	3320      	adds	r3, #32
 801202e:	4313      	orrs	r3, r2
 8012030:	81a3      	strh	r3, [r4, #12]
 8012032:	4240      	negs	r0, r0
 8012034:	e7f3      	b.n	801201e <__ssrefill_r+0x26>

08012036 <_sfread_r>:
 8012036:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012038:	0014      	movs	r4, r2
 801203a:	435c      	muls	r4, r3
 801203c:	b087      	sub	sp, #28
 801203e:	1e26      	subs	r6, r4, #0
 8012040:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012042:	9005      	str	r0, [sp, #20]
 8012044:	9101      	str	r1, [sp, #4]
 8012046:	9202      	str	r2, [sp, #8]
 8012048:	9303      	str	r3, [sp, #12]
 801204a:	d11e      	bne.n	801208a <_sfread_r+0x54>
 801204c:	0020      	movs	r0, r4
 801204e:	b007      	add	sp, #28
 8012050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012052:	003a      	movs	r2, r7
 8012054:	9801      	ldr	r0, [sp, #4]
 8012056:	f7fa fce6 	bl	800ca26 <memcpy>
 801205a:	682b      	ldr	r3, [r5, #0]
 801205c:	0029      	movs	r1, r5
 801205e:	19db      	adds	r3, r3, r7
 8012060:	602b      	str	r3, [r5, #0]
 8012062:	2300      	movs	r3, #0
 8012064:	606b      	str	r3, [r5, #4]
 8012066:	9b01      	ldr	r3, [sp, #4]
 8012068:	9805      	ldr	r0, [sp, #20]
 801206a:	19db      	adds	r3, r3, r7
 801206c:	9301      	str	r3, [sp, #4]
 801206e:	1bf3      	subs	r3, r6, r7
 8012070:	9304      	str	r3, [sp, #16]
 8012072:	f7ff ffc1 	bl	8011ff8 <__ssrefill_r>
 8012076:	2800      	cmp	r0, #0
 8012078:	d006      	beq.n	8012088 <_sfread_r+0x52>
 801207a:	193c      	adds	r4, r7, r4
 801207c:	1ba0      	subs	r0, r4, r6
 801207e:	9902      	ldr	r1, [sp, #8]
 8012080:	f7ee f85c 	bl	800013c <__udivsi3>
 8012084:	0004      	movs	r4, r0
 8012086:	e7e1      	b.n	801204c <_sfread_r+0x16>
 8012088:	9e04      	ldr	r6, [sp, #16]
 801208a:	686f      	ldr	r7, [r5, #4]
 801208c:	6829      	ldr	r1, [r5, #0]
 801208e:	42b7      	cmp	r7, r6
 8012090:	d3df      	bcc.n	8012052 <_sfread_r+0x1c>
 8012092:	0032      	movs	r2, r6
 8012094:	9801      	ldr	r0, [sp, #4]
 8012096:	f7fa fcc6 	bl	800ca26 <memcpy>
 801209a:	686b      	ldr	r3, [r5, #4]
 801209c:	9c03      	ldr	r4, [sp, #12]
 801209e:	1b9b      	subs	r3, r3, r6
 80120a0:	606b      	str	r3, [r5, #4]
 80120a2:	682b      	ldr	r3, [r5, #0]
 80120a4:	199b      	adds	r3, r3, r6
 80120a6:	602b      	str	r3, [r5, #0]
 80120a8:	e7d0      	b.n	801204c <_sfread_r+0x16>

080120aa <__sprint_r>:
 80120aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120ac:	6893      	ldr	r3, [r2, #8]
 80120ae:	b085      	sub	sp, #20
 80120b0:	9001      	str	r0, [sp, #4]
 80120b2:	000d      	movs	r5, r1
 80120b4:	0014      	movs	r4, r2
 80120b6:	1e18      	subs	r0, r3, #0
 80120b8:	d018      	beq.n	80120ec <__sprint_r+0x42>
 80120ba:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80120bc:	049b      	lsls	r3, r3, #18
 80120be:	d524      	bpl.n	801210a <__sprint_r+0x60>
 80120c0:	6817      	ldr	r7, [r2, #0]
 80120c2:	2600      	movs	r6, #0
 80120c4:	683b      	ldr	r3, [r7, #0]
 80120c6:	9302      	str	r3, [sp, #8]
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	9300      	str	r3, [sp, #0]
 80120cc:	089b      	lsrs	r3, r3, #2
 80120ce:	9303      	str	r3, [sp, #12]
 80120d0:	9b03      	ldr	r3, [sp, #12]
 80120d2:	42b3      	cmp	r3, r6
 80120d4:	dc0e      	bgt.n	80120f4 <__sprint_r+0x4a>
 80120d6:	2203      	movs	r2, #3
 80120d8:	9b00      	ldr	r3, [sp, #0]
 80120da:	68a0      	ldr	r0, [r4, #8]
 80120dc:	4393      	bics	r3, r2
 80120de:	1ac0      	subs	r0, r0, r3
 80120e0:	60a0      	str	r0, [r4, #8]
 80120e2:	3708      	adds	r7, #8
 80120e4:	2800      	cmp	r0, #0
 80120e6:	d1ec      	bne.n	80120c2 <__sprint_r+0x18>
 80120e8:	2300      	movs	r3, #0
 80120ea:	60a3      	str	r3, [r4, #8]
 80120ec:	2300      	movs	r3, #0
 80120ee:	6063      	str	r3, [r4, #4]
 80120f0:	b005      	add	sp, #20
 80120f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120f4:	9902      	ldr	r1, [sp, #8]
 80120f6:	00b3      	lsls	r3, r6, #2
 80120f8:	58c9      	ldr	r1, [r1, r3]
 80120fa:	002a      	movs	r2, r5
 80120fc:	9801      	ldr	r0, [sp, #4]
 80120fe:	f000 ff59 	bl	8012fb4 <_fputwc_r>
 8012102:	1c43      	adds	r3, r0, #1
 8012104:	d0f0      	beq.n	80120e8 <__sprint_r+0x3e>
 8012106:	3601      	adds	r6, #1
 8012108:	e7e2      	b.n	80120d0 <__sprint_r+0x26>
 801210a:	9801      	ldr	r0, [sp, #4]
 801210c:	f000 fd14 	bl	8012b38 <__sfvwrite_r>
 8012110:	e7ea      	b.n	80120e8 <__sprint_r+0x3e>
	...

08012114 <_vfiprintf_r>:
 8012114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012116:	b0c1      	sub	sp, #260	; 0x104
 8012118:	001c      	movs	r4, r3
 801211a:	001f      	movs	r7, r3
 801211c:	9006      	str	r0, [sp, #24]
 801211e:	9103      	str	r1, [sp, #12]
 8012120:	9207      	str	r2, [sp, #28]
 8012122:	2800      	cmp	r0, #0
 8012124:	d004      	beq.n	8012130 <_vfiprintf_r+0x1c>
 8012126:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012128:	2b00      	cmp	r3, #0
 801212a:	d101      	bne.n	8012130 <_vfiprintf_r+0x1c>
 801212c:	f7fa fa98 	bl	800c660 <__sinit>
 8012130:	9b03      	ldr	r3, [sp, #12]
 8012132:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012134:	07db      	lsls	r3, r3, #31
 8012136:	d407      	bmi.n	8012148 <_vfiprintf_r+0x34>
 8012138:	9b03      	ldr	r3, [sp, #12]
 801213a:	899b      	ldrh	r3, [r3, #12]
 801213c:	059b      	lsls	r3, r3, #22
 801213e:	d403      	bmi.n	8012148 <_vfiprintf_r+0x34>
 8012140:	9b03      	ldr	r3, [sp, #12]
 8012142:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8012144:	f7fa fc62 	bl	800ca0c <__retarget_lock_acquire_recursive>
 8012148:	9b03      	ldr	r3, [sp, #12]
 801214a:	220c      	movs	r2, #12
 801214c:	5e9a      	ldrsh	r2, [r3, r2]
 801214e:	2380      	movs	r3, #128	; 0x80
 8012150:	019b      	lsls	r3, r3, #6
 8012152:	421a      	tst	r2, r3
 8012154:	d107      	bne.n	8012166 <_vfiprintf_r+0x52>
 8012156:	4313      	orrs	r3, r2
 8012158:	9a03      	ldr	r2, [sp, #12]
 801215a:	8193      	strh	r3, [r2, #12]
 801215c:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801215e:	4aa3      	ldr	r2, [pc, #652]	; (80123ec <_vfiprintf_r+0x2d8>)
 8012160:	4013      	ands	r3, r2
 8012162:	9a03      	ldr	r2, [sp, #12]
 8012164:	6653      	str	r3, [r2, #100]	; 0x64
 8012166:	9b03      	ldr	r3, [sp, #12]
 8012168:	899b      	ldrh	r3, [r3, #12]
 801216a:	071b      	lsls	r3, r3, #28
 801216c:	d503      	bpl.n	8012176 <_vfiprintf_r+0x62>
 801216e:	9b03      	ldr	r3, [sp, #12]
 8012170:	691b      	ldr	r3, [r3, #16]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d118      	bne.n	80121a8 <_vfiprintf_r+0x94>
 8012176:	9903      	ldr	r1, [sp, #12]
 8012178:	9806      	ldr	r0, [sp, #24]
 801217a:	f000 fe79 	bl	8012e70 <__swsetup_r>
 801217e:	2800      	cmp	r0, #0
 8012180:	d012      	beq.n	80121a8 <_vfiprintf_r+0x94>
 8012182:	9b03      	ldr	r3, [sp, #12]
 8012184:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012186:	07db      	lsls	r3, r3, #31
 8012188:	d505      	bpl.n	8012196 <_vfiprintf_r+0x82>
 801218a:	2301      	movs	r3, #1
 801218c:	425b      	negs	r3, r3
 801218e:	9308      	str	r3, [sp, #32]
 8012190:	9808      	ldr	r0, [sp, #32]
 8012192:	b041      	add	sp, #260	; 0x104
 8012194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012196:	9b03      	ldr	r3, [sp, #12]
 8012198:	899b      	ldrh	r3, [r3, #12]
 801219a:	059b      	lsls	r3, r3, #22
 801219c:	d4f5      	bmi.n	801218a <_vfiprintf_r+0x76>
 801219e:	9b03      	ldr	r3, [sp, #12]
 80121a0:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80121a2:	f7fa fc34 	bl	800ca0e <__retarget_lock_release_recursive>
 80121a6:	e7f0      	b.n	801218a <_vfiprintf_r+0x76>
 80121a8:	221a      	movs	r2, #26
 80121aa:	9b03      	ldr	r3, [sp, #12]
 80121ac:	899b      	ldrh	r3, [r3, #12]
 80121ae:	401a      	ands	r2, r3
 80121b0:	2a0a      	cmp	r2, #10
 80121b2:	d116      	bne.n	80121e2 <_vfiprintf_r+0xce>
 80121b4:	9a03      	ldr	r2, [sp, #12]
 80121b6:	210e      	movs	r1, #14
 80121b8:	5e52      	ldrsh	r2, [r2, r1]
 80121ba:	2a00      	cmp	r2, #0
 80121bc:	db11      	blt.n	80121e2 <_vfiprintf_r+0xce>
 80121be:	9a03      	ldr	r2, [sp, #12]
 80121c0:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80121c2:	07d2      	lsls	r2, r2, #31
 80121c4:	d405      	bmi.n	80121d2 <_vfiprintf_r+0xbe>
 80121c6:	059b      	lsls	r3, r3, #22
 80121c8:	d403      	bmi.n	80121d2 <_vfiprintf_r+0xbe>
 80121ca:	9b03      	ldr	r3, [sp, #12]
 80121cc:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80121ce:	f7fa fc1e 	bl	800ca0e <__retarget_lock_release_recursive>
 80121d2:	0023      	movs	r3, r4
 80121d4:	9a07      	ldr	r2, [sp, #28]
 80121d6:	9903      	ldr	r1, [sp, #12]
 80121d8:	9806      	ldr	r0, [sp, #24]
 80121da:	f000 fc69 	bl	8012ab0 <__sbprintf>
 80121de:	9008      	str	r0, [sp, #32]
 80121e0:	e7d6      	b.n	8012190 <_vfiprintf_r+0x7c>
 80121e2:	2300      	movs	r3, #0
 80121e4:	ad17      	add	r5, sp, #92	; 0x5c
 80121e6:	9514      	str	r5, [sp, #80]	; 0x50
 80121e8:	9316      	str	r3, [sp, #88]	; 0x58
 80121ea:	9315      	str	r3, [sp, #84]	; 0x54
 80121ec:	930c      	str	r3, [sp, #48]	; 0x30
 80121ee:	930d      	str	r3, [sp, #52]	; 0x34
 80121f0:	930e      	str	r3, [sp, #56]	; 0x38
 80121f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80121f4:	9308      	str	r3, [sp, #32]
 80121f6:	9c07      	ldr	r4, [sp, #28]
 80121f8:	7823      	ldrb	r3, [r4, #0]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d002      	beq.n	8012204 <_vfiprintf_r+0xf0>
 80121fe:	2b25      	cmp	r3, #37	; 0x25
 8012200:	d000      	beq.n	8012204 <_vfiprintf_r+0xf0>
 8012202:	e08d      	b.n	8012320 <_vfiprintf_r+0x20c>
 8012204:	9b07      	ldr	r3, [sp, #28]
 8012206:	1ae6      	subs	r6, r4, r3
 8012208:	429c      	cmp	r4, r3
 801220a:	d016      	beq.n	801223a <_vfiprintf_r+0x126>
 801220c:	602b      	str	r3, [r5, #0]
 801220e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012210:	606e      	str	r6, [r5, #4]
 8012212:	199b      	adds	r3, r3, r6
 8012214:	9316      	str	r3, [sp, #88]	; 0x58
 8012216:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012218:	3508      	adds	r5, #8
 801221a:	3301      	adds	r3, #1
 801221c:	9315      	str	r3, [sp, #84]	; 0x54
 801221e:	2b07      	cmp	r3, #7
 8012220:	dd08      	ble.n	8012234 <_vfiprintf_r+0x120>
 8012222:	9903      	ldr	r1, [sp, #12]
 8012224:	9806      	ldr	r0, [sp, #24]
 8012226:	aa14      	add	r2, sp, #80	; 0x50
 8012228:	f7ff ff3f 	bl	80120aa <__sprint_r>
 801222c:	2800      	cmp	r0, #0
 801222e:	d000      	beq.n	8012232 <_vfiprintf_r+0x11e>
 8012230:	e3d9      	b.n	80129e6 <_vfiprintf_r+0x8d2>
 8012232:	ad17      	add	r5, sp, #92	; 0x5c
 8012234:	9b08      	ldr	r3, [sp, #32]
 8012236:	199b      	adds	r3, r3, r6
 8012238:	9308      	str	r3, [sp, #32]
 801223a:	7823      	ldrb	r3, [r4, #0]
 801223c:	2b00      	cmp	r3, #0
 801223e:	d101      	bne.n	8012244 <_vfiprintf_r+0x130>
 8012240:	f000 fbf6 	bl	8012a30 <_vfiprintf_r+0x91c>
 8012244:	2200      	movs	r2, #0
 8012246:	a912      	add	r1, sp, #72	; 0x48
 8012248:	70ca      	strb	r2, [r1, #3]
 801224a:	2101      	movs	r1, #1
 801224c:	1c63      	adds	r3, r4, #1
 801224e:	0014      	movs	r4, r2
 8012250:	4249      	negs	r1, r1
 8012252:	9105      	str	r1, [sp, #20]
 8012254:	9209      	str	r2, [sp, #36]	; 0x24
 8012256:	1c5a      	adds	r2, r3, #1
 8012258:	781b      	ldrb	r3, [r3, #0]
 801225a:	9207      	str	r2, [sp, #28]
 801225c:	0018      	movs	r0, r3
 801225e:	3820      	subs	r0, #32
 8012260:	285a      	cmp	r0, #90	; 0x5a
 8012262:	d900      	bls.n	8012266 <_vfiprintf_r+0x152>
 8012264:	e362      	b.n	801292c <_vfiprintf_r+0x818>
 8012266:	f7ed ff5f 	bl	8000128 <__gnu_thumb1_case_uhi>
 801226a:	0078      	.short	0x0078
 801226c:	03610361 	.word	0x03610361
 8012270:	03610081 	.word	0x03610081
 8012274:	03610361 	.word	0x03610361
 8012278:	0361005d 	.word	0x0361005d
 801227c:	00830361 	.word	0x00830361
 8012280:	0361008b 	.word	0x0361008b
 8012284:	008f0089 	.word	0x008f0089
 8012288:	00ad0361 	.word	0x00ad0361
 801228c:	00af00af 	.word	0x00af00af
 8012290:	00af00af 	.word	0x00af00af
 8012294:	00af00af 	.word	0x00af00af
 8012298:	00af00af 	.word	0x00af00af
 801229c:	036100af 	.word	0x036100af
 80122a0:	03610361 	.word	0x03610361
 80122a4:	03610361 	.word	0x03610361
 80122a8:	03610361 	.word	0x03610361
 80122ac:	03610361 	.word	0x03610361
 80122b0:	00e600da 	.word	0x00e600da
 80122b4:	03610361 	.word	0x03610361
 80122b8:	03610361 	.word	0x03610361
 80122bc:	03610361 	.word	0x03610361
 80122c0:	03610361 	.word	0x03610361
 80122c4:	03610361 	.word	0x03610361
 80122c8:	03610143 	.word	0x03610143
 80122cc:	03610361 	.word	0x03610361
 80122d0:	03610182 	.word	0x03610182
 80122d4:	0361027c 	.word	0x0361027c
 80122d8:	02ae0361 	.word	0x02ae0361
 80122dc:	03610361 	.word	0x03610361
 80122e0:	03610361 	.word	0x03610361
 80122e4:	03610361 	.word	0x03610361
 80122e8:	03610361 	.word	0x03610361
 80122ec:	03610361 	.word	0x03610361
 80122f0:	00e800da 	.word	0x00e800da
 80122f4:	03610361 	.word	0x03610361
 80122f8:	00c30361 	.word	0x00c30361
 80122fc:	00d600e8 	.word	0x00d600e8
 8012300:	00cf0361 	.word	0x00cf0361
 8012304:	01260361 	.word	0x01260361
 8012308:	01740145 	.word	0x01740145
 801230c:	036100d6 	.word	0x036100d6
 8012310:	007f0182 	.word	0x007f0182
 8012314:	0361027e 	.word	0x0361027e
 8012318:	02cd0361 	.word	0x02cd0361
 801231c:	007f0361 	.word	0x007f0361
 8012320:	3401      	adds	r4, #1
 8012322:	e769      	b.n	80121f8 <_vfiprintf_r+0xe4>
 8012324:	9806      	ldr	r0, [sp, #24]
 8012326:	f7fe fa47 	bl	80107b8 <_localeconv_r>
 801232a:	6843      	ldr	r3, [r0, #4]
 801232c:	0018      	movs	r0, r3
 801232e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012330:	f7ed fee8 	bl	8000104 <strlen>
 8012334:	900e      	str	r0, [sp, #56]	; 0x38
 8012336:	9806      	ldr	r0, [sp, #24]
 8012338:	f7fe fa3e 	bl	80107b8 <_localeconv_r>
 801233c:	6883      	ldr	r3, [r0, #8]
 801233e:	930d      	str	r3, [sp, #52]	; 0x34
 8012340:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012342:	2b00      	cmp	r3, #0
 8012344:	d010      	beq.n	8012368 <_vfiprintf_r+0x254>
 8012346:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012348:	2b00      	cmp	r3, #0
 801234a:	d00d      	beq.n	8012368 <_vfiprintf_r+0x254>
 801234c:	781b      	ldrb	r3, [r3, #0]
 801234e:	2b00      	cmp	r3, #0
 8012350:	d00a      	beq.n	8012368 <_vfiprintf_r+0x254>
 8012352:	2380      	movs	r3, #128	; 0x80
 8012354:	00db      	lsls	r3, r3, #3
 8012356:	431c      	orrs	r4, r3
 8012358:	e006      	b.n	8012368 <_vfiprintf_r+0x254>
 801235a:	ab12      	add	r3, sp, #72	; 0x48
 801235c:	78da      	ldrb	r2, [r3, #3]
 801235e:	3303      	adds	r3, #3
 8012360:	2a00      	cmp	r2, #0
 8012362:	d101      	bne.n	8012368 <_vfiprintf_r+0x254>
 8012364:	3220      	adds	r2, #32
 8012366:	701a      	strb	r2, [r3, #0]
 8012368:	9b07      	ldr	r3, [sp, #28]
 801236a:	e774      	b.n	8012256 <_vfiprintf_r+0x142>
 801236c:	2301      	movs	r3, #1
 801236e:	e7f2      	b.n	8012356 <_vfiprintf_r+0x242>
 8012370:	cf08      	ldmia	r7!, {r3}
 8012372:	9309      	str	r3, [sp, #36]	; 0x24
 8012374:	2b00      	cmp	r3, #0
 8012376:	daf7      	bge.n	8012368 <_vfiprintf_r+0x254>
 8012378:	425b      	negs	r3, r3
 801237a:	9309      	str	r3, [sp, #36]	; 0x24
 801237c:	2304      	movs	r3, #4
 801237e:	e7ea      	b.n	8012356 <_vfiprintf_r+0x242>
 8012380:	222b      	movs	r2, #43	; 0x2b
 8012382:	ab12      	add	r3, sp, #72	; 0x48
 8012384:	70da      	strb	r2, [r3, #3]
 8012386:	e7ef      	b.n	8012368 <_vfiprintf_r+0x254>
 8012388:	9b07      	ldr	r3, [sp, #28]
 801238a:	1c5a      	adds	r2, r3, #1
 801238c:	781b      	ldrb	r3, [r3, #0]
 801238e:	2b2a      	cmp	r3, #42	; 0x2a
 8012390:	d00f      	beq.n	80123b2 <_vfiprintf_r+0x29e>
 8012392:	2100      	movs	r1, #0
 8012394:	9105      	str	r1, [sp, #20]
 8012396:	0019      	movs	r1, r3
 8012398:	3930      	subs	r1, #48	; 0x30
 801239a:	9207      	str	r2, [sp, #28]
 801239c:	2909      	cmp	r1, #9
 801239e:	d900      	bls.n	80123a2 <_vfiprintf_r+0x28e>
 80123a0:	e75c      	b.n	801225c <_vfiprintf_r+0x148>
 80123a2:	200a      	movs	r0, #10
 80123a4:	9b05      	ldr	r3, [sp, #20]
 80123a6:	4343      	muls	r3, r0
 80123a8:	185b      	adds	r3, r3, r1
 80123aa:	9305      	str	r3, [sp, #20]
 80123ac:	7813      	ldrb	r3, [r2, #0]
 80123ae:	3201      	adds	r2, #1
 80123b0:	e7f1      	b.n	8012396 <_vfiprintf_r+0x282>
 80123b2:	cf08      	ldmia	r7!, {r3}
 80123b4:	9305      	str	r3, [sp, #20]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	da02      	bge.n	80123c0 <_vfiprintf_r+0x2ac>
 80123ba:	2301      	movs	r3, #1
 80123bc:	425b      	negs	r3, r3
 80123be:	9305      	str	r3, [sp, #20]
 80123c0:	9207      	str	r2, [sp, #28]
 80123c2:	e7d1      	b.n	8012368 <_vfiprintf_r+0x254>
 80123c4:	2380      	movs	r3, #128	; 0x80
 80123c6:	e7c6      	b.n	8012356 <_vfiprintf_r+0x242>
 80123c8:	2100      	movs	r1, #0
 80123ca:	9a07      	ldr	r2, [sp, #28]
 80123cc:	9109      	str	r1, [sp, #36]	; 0x24
 80123ce:	200a      	movs	r0, #10
 80123d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80123d2:	3b30      	subs	r3, #48	; 0x30
 80123d4:	4341      	muls	r1, r0
 80123d6:	185b      	adds	r3, r3, r1
 80123d8:	9309      	str	r3, [sp, #36]	; 0x24
 80123da:	0013      	movs	r3, r2
 80123dc:	781b      	ldrb	r3, [r3, #0]
 80123de:	3201      	adds	r2, #1
 80123e0:	0019      	movs	r1, r3
 80123e2:	3930      	subs	r1, #48	; 0x30
 80123e4:	9207      	str	r2, [sp, #28]
 80123e6:	2909      	cmp	r1, #9
 80123e8:	d9f1      	bls.n	80123ce <_vfiprintf_r+0x2ba>
 80123ea:	e737      	b.n	801225c <_vfiprintf_r+0x148>
 80123ec:	ffffdfff 	.word	0xffffdfff
 80123f0:	9b07      	ldr	r3, [sp, #28]
 80123f2:	781b      	ldrb	r3, [r3, #0]
 80123f4:	2b68      	cmp	r3, #104	; 0x68
 80123f6:	d105      	bne.n	8012404 <_vfiprintf_r+0x2f0>
 80123f8:	9b07      	ldr	r3, [sp, #28]
 80123fa:	3301      	adds	r3, #1
 80123fc:	9307      	str	r3, [sp, #28]
 80123fe:	2380      	movs	r3, #128	; 0x80
 8012400:	009b      	lsls	r3, r3, #2
 8012402:	e7a8      	b.n	8012356 <_vfiprintf_r+0x242>
 8012404:	2340      	movs	r3, #64	; 0x40
 8012406:	e7a6      	b.n	8012356 <_vfiprintf_r+0x242>
 8012408:	9b07      	ldr	r3, [sp, #28]
 801240a:	781b      	ldrb	r3, [r3, #0]
 801240c:	2b6c      	cmp	r3, #108	; 0x6c
 801240e:	d104      	bne.n	801241a <_vfiprintf_r+0x306>
 8012410:	9b07      	ldr	r3, [sp, #28]
 8012412:	3301      	adds	r3, #1
 8012414:	9307      	str	r3, [sp, #28]
 8012416:	2320      	movs	r3, #32
 8012418:	e79d      	b.n	8012356 <_vfiprintf_r+0x242>
 801241a:	2310      	movs	r3, #16
 801241c:	e79b      	b.n	8012356 <_vfiprintf_r+0x242>
 801241e:	003a      	movs	r2, r7
 8012420:	ca08      	ldmia	r2!, {r3}
 8012422:	ae27      	add	r6, sp, #156	; 0x9c
 8012424:	7033      	strb	r3, [r6, #0]
 8012426:	2300      	movs	r3, #0
 8012428:	9204      	str	r2, [sp, #16]
 801242a:	aa12      	add	r2, sp, #72	; 0x48
 801242c:	70d3      	strb	r3, [r2, #3]
 801242e:	2201      	movs	r2, #1
 8012430:	930b      	str	r3, [sp, #44]	; 0x2c
 8012432:	9205      	str	r2, [sp, #20]
 8012434:	e0b0      	b.n	8012598 <_vfiprintf_r+0x484>
 8012436:	2310      	movs	r3, #16
 8012438:	431c      	orrs	r4, r3
 801243a:	06a3      	lsls	r3, r4, #26
 801243c:	d52a      	bpl.n	8012494 <_vfiprintf_r+0x380>
 801243e:	2307      	movs	r3, #7
 8012440:	3707      	adds	r7, #7
 8012442:	439f      	bics	r7, r3
 8012444:	0039      	movs	r1, r7
 8012446:	c90c      	ldmia	r1!, {r2, r3}
 8012448:	9200      	str	r2, [sp, #0]
 801244a:	9301      	str	r3, [sp, #4]
 801244c:	9104      	str	r1, [sp, #16]
 801244e:	9a01      	ldr	r2, [sp, #4]
 8012450:	2301      	movs	r3, #1
 8012452:	2a00      	cmp	r2, #0
 8012454:	da09      	bge.n	801246a <_vfiprintf_r+0x356>
 8012456:	9e00      	ldr	r6, [sp, #0]
 8012458:	9f01      	ldr	r7, [sp, #4]
 801245a:	2200      	movs	r2, #0
 801245c:	4271      	negs	r1, r6
 801245e:	41ba      	sbcs	r2, r7
 8012460:	9100      	str	r1, [sp, #0]
 8012462:	9201      	str	r2, [sp, #4]
 8012464:	212d      	movs	r1, #45	; 0x2d
 8012466:	aa12      	add	r2, sp, #72	; 0x48
 8012468:	70d1      	strb	r1, [r2, #3]
 801246a:	9901      	ldr	r1, [sp, #4]
 801246c:	9a00      	ldr	r2, [sp, #0]
 801246e:	430a      	orrs	r2, r1
 8012470:	9905      	ldr	r1, [sp, #20]
 8012472:	3101      	adds	r1, #1
 8012474:	d100      	bne.n	8012478 <_vfiprintf_r+0x364>
 8012476:	e2e9      	b.n	8012a4c <_vfiprintf_r+0x938>
 8012478:	2180      	movs	r1, #128	; 0x80
 801247a:	0027      	movs	r7, r4
 801247c:	438f      	bics	r7, r1
 801247e:	2a00      	cmp	r2, #0
 8012480:	d000      	beq.n	8012484 <_vfiprintf_r+0x370>
 8012482:	e2e7      	b.n	8012a54 <_vfiprintf_r+0x940>
 8012484:	9a05      	ldr	r2, [sp, #20]
 8012486:	2a00      	cmp	r2, #0
 8012488:	d100      	bne.n	801248c <_vfiprintf_r+0x378>
 801248a:	e243      	b.n	8012914 <_vfiprintf_r+0x800>
 801248c:	2b01      	cmp	r3, #1
 801248e:	d000      	beq.n	8012492 <_vfiprintf_r+0x37e>
 8012490:	e2e3      	b.n	8012a5a <_vfiprintf_r+0x946>
 8012492:	e1e7      	b.n	8012864 <_vfiprintf_r+0x750>
 8012494:	003a      	movs	r2, r7
 8012496:	ca08      	ldmia	r2!, {r3}
 8012498:	9204      	str	r2, [sp, #16]
 801249a:	06e2      	lsls	r2, r4, #27
 801249c:	d503      	bpl.n	80124a6 <_vfiprintf_r+0x392>
 801249e:	9300      	str	r3, [sp, #0]
 80124a0:	17db      	asrs	r3, r3, #31
 80124a2:	9301      	str	r3, [sp, #4]
 80124a4:	e7d3      	b.n	801244e <_vfiprintf_r+0x33a>
 80124a6:	0662      	lsls	r2, r4, #25
 80124a8:	d501      	bpl.n	80124ae <_vfiprintf_r+0x39a>
 80124aa:	b21b      	sxth	r3, r3
 80124ac:	e7f7      	b.n	801249e <_vfiprintf_r+0x38a>
 80124ae:	05a2      	lsls	r2, r4, #22
 80124b0:	d5f5      	bpl.n	801249e <_vfiprintf_r+0x38a>
 80124b2:	b25b      	sxtb	r3, r3
 80124b4:	e7f3      	b.n	801249e <_vfiprintf_r+0x38a>
 80124b6:	1d3b      	adds	r3, r7, #4
 80124b8:	9304      	str	r3, [sp, #16]
 80124ba:	06a3      	lsls	r3, r4, #26
 80124bc:	d506      	bpl.n	80124cc <_vfiprintf_r+0x3b8>
 80124be:	683b      	ldr	r3, [r7, #0]
 80124c0:	9a08      	ldr	r2, [sp, #32]
 80124c2:	601a      	str	r2, [r3, #0]
 80124c4:	17d2      	asrs	r2, r2, #31
 80124c6:	605a      	str	r2, [r3, #4]
 80124c8:	9f04      	ldr	r7, [sp, #16]
 80124ca:	e694      	b.n	80121f6 <_vfiprintf_r+0xe2>
 80124cc:	06e3      	lsls	r3, r4, #27
 80124ce:	d503      	bpl.n	80124d8 <_vfiprintf_r+0x3c4>
 80124d0:	683b      	ldr	r3, [r7, #0]
 80124d2:	9a08      	ldr	r2, [sp, #32]
 80124d4:	601a      	str	r2, [r3, #0]
 80124d6:	e7f7      	b.n	80124c8 <_vfiprintf_r+0x3b4>
 80124d8:	0663      	lsls	r3, r4, #25
 80124da:	d503      	bpl.n	80124e4 <_vfiprintf_r+0x3d0>
 80124dc:	683b      	ldr	r3, [r7, #0]
 80124de:	9a08      	ldr	r2, [sp, #32]
 80124e0:	801a      	strh	r2, [r3, #0]
 80124e2:	e7f1      	b.n	80124c8 <_vfiprintf_r+0x3b4>
 80124e4:	05a4      	lsls	r4, r4, #22
 80124e6:	d5f3      	bpl.n	80124d0 <_vfiprintf_r+0x3bc>
 80124e8:	683b      	ldr	r3, [r7, #0]
 80124ea:	9a08      	ldr	r2, [sp, #32]
 80124ec:	701a      	strb	r2, [r3, #0]
 80124ee:	e7eb      	b.n	80124c8 <_vfiprintf_r+0x3b4>
 80124f0:	2310      	movs	r3, #16
 80124f2:	431c      	orrs	r4, r3
 80124f4:	2320      	movs	r3, #32
 80124f6:	0020      	movs	r0, r4
 80124f8:	4018      	ands	r0, r3
 80124fa:	421c      	tst	r4, r3
 80124fc:	d00d      	beq.n	801251a <_vfiprintf_r+0x406>
 80124fe:	3b19      	subs	r3, #25
 8012500:	3707      	adds	r7, #7
 8012502:	439f      	bics	r7, r3
 8012504:	0039      	movs	r1, r7
 8012506:	c90c      	ldmia	r1!, {r2, r3}
 8012508:	9200      	str	r2, [sp, #0]
 801250a:	9301      	str	r3, [sp, #4]
 801250c:	9104      	str	r1, [sp, #16]
 801250e:	4bcc      	ldr	r3, [pc, #816]	; (8012840 <_vfiprintf_r+0x72c>)
 8012510:	401c      	ands	r4, r3
 8012512:	2300      	movs	r3, #0
 8012514:	2100      	movs	r1, #0
 8012516:	aa12      	add	r2, sp, #72	; 0x48
 8012518:	e7a6      	b.n	8012468 <_vfiprintf_r+0x354>
 801251a:	003a      	movs	r2, r7
 801251c:	ca08      	ldmia	r2!, {r3}
 801251e:	0021      	movs	r1, r4
 8012520:	9204      	str	r2, [sp, #16]
 8012522:	2210      	movs	r2, #16
 8012524:	4011      	ands	r1, r2
 8012526:	4214      	tst	r4, r2
 8012528:	d002      	beq.n	8012530 <_vfiprintf_r+0x41c>
 801252a:	9300      	str	r3, [sp, #0]
 801252c:	9001      	str	r0, [sp, #4]
 801252e:	e7ee      	b.n	801250e <_vfiprintf_r+0x3fa>
 8012530:	2240      	movs	r2, #64	; 0x40
 8012532:	0020      	movs	r0, r4
 8012534:	4010      	ands	r0, r2
 8012536:	4214      	tst	r4, r2
 8012538:	d003      	beq.n	8012542 <_vfiprintf_r+0x42e>
 801253a:	b29b      	uxth	r3, r3
 801253c:	9300      	str	r3, [sp, #0]
 801253e:	9101      	str	r1, [sp, #4]
 8012540:	e7e5      	b.n	801250e <_vfiprintf_r+0x3fa>
 8012542:	2280      	movs	r2, #128	; 0x80
 8012544:	0021      	movs	r1, r4
 8012546:	0092      	lsls	r2, r2, #2
 8012548:	4011      	ands	r1, r2
 801254a:	4214      	tst	r4, r2
 801254c:	d0f6      	beq.n	801253c <_vfiprintf_r+0x428>
 801254e:	b2db      	uxtb	r3, r3
 8012550:	e7eb      	b.n	801252a <_vfiprintf_r+0x416>
 8012552:	003b      	movs	r3, r7
 8012554:	cb04      	ldmia	r3!, {r2}
 8012556:	49bb      	ldr	r1, [pc, #748]	; (8012844 <_vfiprintf_r+0x730>)
 8012558:	9304      	str	r3, [sp, #16]
 801255a:	2300      	movs	r3, #0
 801255c:	9200      	str	r2, [sp, #0]
 801255e:	aa13      	add	r2, sp, #76	; 0x4c
 8012560:	8011      	strh	r1, [r2, #0]
 8012562:	4ab9      	ldr	r2, [pc, #740]	; (8012848 <_vfiprintf_r+0x734>)
 8012564:	9301      	str	r3, [sp, #4]
 8012566:	3302      	adds	r3, #2
 8012568:	431c      	orrs	r4, r3
 801256a:	920c      	str	r2, [sp, #48]	; 0x30
 801256c:	e7d2      	b.n	8012514 <_vfiprintf_r+0x400>
 801256e:	003b      	movs	r3, r7
 8012570:	2700      	movs	r7, #0
 8012572:	cb40      	ldmia	r3!, {r6}
 8012574:	9304      	str	r3, [sp, #16]
 8012576:	ab12      	add	r3, sp, #72	; 0x48
 8012578:	70df      	strb	r7, [r3, #3]
 801257a:	9b05      	ldr	r3, [sp, #20]
 801257c:	3301      	adds	r3, #1
 801257e:	d100      	bne.n	8012582 <_vfiprintf_r+0x46e>
 8012580:	e0ea      	b.n	8012758 <_vfiprintf_r+0x644>
 8012582:	0039      	movs	r1, r7
 8012584:	0030      	movs	r0, r6
 8012586:	9a05      	ldr	r2, [sp, #20]
 8012588:	f7fe f92e 	bl	80107e8 <memchr>
 801258c:	900b      	str	r0, [sp, #44]	; 0x2c
 801258e:	42b8      	cmp	r0, r7
 8012590:	d002      	beq.n	8012598 <_vfiprintf_r+0x484>
 8012592:	1b83      	subs	r3, r0, r6
 8012594:	9305      	str	r3, [sp, #20]
 8012596:	970b      	str	r7, [sp, #44]	; 0x2c
 8012598:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801259a:	9a05      	ldr	r2, [sp, #20]
 801259c:	930a      	str	r3, [sp, #40]	; 0x28
 801259e:	4293      	cmp	r3, r2
 80125a0:	da00      	bge.n	80125a4 <_vfiprintf_r+0x490>
 80125a2:	920a      	str	r2, [sp, #40]	; 0x28
 80125a4:	ab12      	add	r3, sp, #72	; 0x48
 80125a6:	3303      	adds	r3, #3
 80125a8:	781b      	ldrb	r3, [r3, #0]
 80125aa:	1e5a      	subs	r2, r3, #1
 80125ac:	4193      	sbcs	r3, r2
 80125ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80125b0:	18d3      	adds	r3, r2, r3
 80125b2:	930a      	str	r3, [sp, #40]	; 0x28
 80125b4:	0022      	movs	r2, r4
 80125b6:	2302      	movs	r3, #2
 80125b8:	401a      	ands	r2, r3
 80125ba:	9210      	str	r2, [sp, #64]	; 0x40
 80125bc:	421c      	tst	r4, r3
 80125be:	d002      	beq.n	80125c6 <_vfiprintf_r+0x4b2>
 80125c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125c2:	3302      	adds	r3, #2
 80125c4:	930a      	str	r3, [sp, #40]	; 0x28
 80125c6:	2384      	movs	r3, #132	; 0x84
 80125c8:	0022      	movs	r2, r4
 80125ca:	401a      	ands	r2, r3
 80125cc:	9211      	str	r2, [sp, #68]	; 0x44
 80125ce:	421c      	tst	r4, r3
 80125d0:	d11e      	bne.n	8012610 <_vfiprintf_r+0x4fc>
 80125d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80125d6:	1a9f      	subs	r7, r3, r2
 80125d8:	2f00      	cmp	r7, #0
 80125da:	dd19      	ble.n	8012610 <_vfiprintf_r+0x4fc>
 80125dc:	0029      	movs	r1, r5
 80125de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80125e0:	489a      	ldr	r0, [pc, #616]	; (801284c <_vfiprintf_r+0x738>)
 80125e2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80125e4:	3301      	adds	r3, #1
 80125e6:	3108      	adds	r1, #8
 80125e8:	6028      	str	r0, [r5, #0]
 80125ea:	2f10      	cmp	r7, #16
 80125ec:	dd00      	ble.n	80125f0 <_vfiprintf_r+0x4dc>
 80125ee:	e1a7      	b.n	8012940 <_vfiprintf_r+0x82c>
 80125f0:	606f      	str	r7, [r5, #4]
 80125f2:	18bf      	adds	r7, r7, r2
 80125f4:	000d      	movs	r5, r1
 80125f6:	9716      	str	r7, [sp, #88]	; 0x58
 80125f8:	9315      	str	r3, [sp, #84]	; 0x54
 80125fa:	2b07      	cmp	r3, #7
 80125fc:	dd08      	ble.n	8012610 <_vfiprintf_r+0x4fc>
 80125fe:	9903      	ldr	r1, [sp, #12]
 8012600:	9806      	ldr	r0, [sp, #24]
 8012602:	aa14      	add	r2, sp, #80	; 0x50
 8012604:	f7ff fd51 	bl	80120aa <__sprint_r>
 8012608:	2800      	cmp	r0, #0
 801260a:	d000      	beq.n	801260e <_vfiprintf_r+0x4fa>
 801260c:	e1eb      	b.n	80129e6 <_vfiprintf_r+0x8d2>
 801260e:	ad17      	add	r5, sp, #92	; 0x5c
 8012610:	a912      	add	r1, sp, #72	; 0x48
 8012612:	78c8      	ldrb	r0, [r1, #3]
 8012614:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012616:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012618:	3103      	adds	r1, #3
 801261a:	2800      	cmp	r0, #0
 801261c:	d012      	beq.n	8012644 <_vfiprintf_r+0x530>
 801261e:	6029      	str	r1, [r5, #0]
 8012620:	2101      	movs	r1, #1
 8012622:	3301      	adds	r3, #1
 8012624:	1852      	adds	r2, r2, r1
 8012626:	6069      	str	r1, [r5, #4]
 8012628:	9216      	str	r2, [sp, #88]	; 0x58
 801262a:	9315      	str	r3, [sp, #84]	; 0x54
 801262c:	3508      	adds	r5, #8
 801262e:	2b07      	cmp	r3, #7
 8012630:	dd08      	ble.n	8012644 <_vfiprintf_r+0x530>
 8012632:	9903      	ldr	r1, [sp, #12]
 8012634:	9806      	ldr	r0, [sp, #24]
 8012636:	aa14      	add	r2, sp, #80	; 0x50
 8012638:	f7ff fd37 	bl	80120aa <__sprint_r>
 801263c:	2800      	cmp	r0, #0
 801263e:	d000      	beq.n	8012642 <_vfiprintf_r+0x52e>
 8012640:	e1d1      	b.n	80129e6 <_vfiprintf_r+0x8d2>
 8012642:	ad17      	add	r5, sp, #92	; 0x5c
 8012644:	9910      	ldr	r1, [sp, #64]	; 0x40
 8012646:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012648:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801264a:	2900      	cmp	r1, #0
 801264c:	d013      	beq.n	8012676 <_vfiprintf_r+0x562>
 801264e:	a913      	add	r1, sp, #76	; 0x4c
 8012650:	6029      	str	r1, [r5, #0]
 8012652:	2102      	movs	r1, #2
 8012654:	3301      	adds	r3, #1
 8012656:	1852      	adds	r2, r2, r1
 8012658:	6069      	str	r1, [r5, #4]
 801265a:	9216      	str	r2, [sp, #88]	; 0x58
 801265c:	9315      	str	r3, [sp, #84]	; 0x54
 801265e:	3508      	adds	r5, #8
 8012660:	2b07      	cmp	r3, #7
 8012662:	dd08      	ble.n	8012676 <_vfiprintf_r+0x562>
 8012664:	9903      	ldr	r1, [sp, #12]
 8012666:	9806      	ldr	r0, [sp, #24]
 8012668:	aa14      	add	r2, sp, #80	; 0x50
 801266a:	f7ff fd1e 	bl	80120aa <__sprint_r>
 801266e:	2800      	cmp	r0, #0
 8012670:	d000      	beq.n	8012674 <_vfiprintf_r+0x560>
 8012672:	e1b8      	b.n	80129e6 <_vfiprintf_r+0x8d2>
 8012674:	ad17      	add	r5, sp, #92	; 0x5c
 8012676:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012678:	2b80      	cmp	r3, #128	; 0x80
 801267a:	d11e      	bne.n	80126ba <_vfiprintf_r+0x5a6>
 801267c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801267e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012680:	1a9f      	subs	r7, r3, r2
 8012682:	2f00      	cmp	r7, #0
 8012684:	dd19      	ble.n	80126ba <_vfiprintf_r+0x5a6>
 8012686:	0029      	movs	r1, r5
 8012688:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801268a:	4871      	ldr	r0, [pc, #452]	; (8012850 <_vfiprintf_r+0x73c>)
 801268c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801268e:	3301      	adds	r3, #1
 8012690:	3108      	adds	r1, #8
 8012692:	6028      	str	r0, [r5, #0]
 8012694:	2f10      	cmp	r7, #16
 8012696:	dd00      	ble.n	801269a <_vfiprintf_r+0x586>
 8012698:	e164      	b.n	8012964 <_vfiprintf_r+0x850>
 801269a:	606f      	str	r7, [r5, #4]
 801269c:	18bf      	adds	r7, r7, r2
 801269e:	000d      	movs	r5, r1
 80126a0:	9716      	str	r7, [sp, #88]	; 0x58
 80126a2:	9315      	str	r3, [sp, #84]	; 0x54
 80126a4:	2b07      	cmp	r3, #7
 80126a6:	dd08      	ble.n	80126ba <_vfiprintf_r+0x5a6>
 80126a8:	9903      	ldr	r1, [sp, #12]
 80126aa:	9806      	ldr	r0, [sp, #24]
 80126ac:	aa14      	add	r2, sp, #80	; 0x50
 80126ae:	f7ff fcfc 	bl	80120aa <__sprint_r>
 80126b2:	2800      	cmp	r0, #0
 80126b4:	d000      	beq.n	80126b8 <_vfiprintf_r+0x5a4>
 80126b6:	e196      	b.n	80129e6 <_vfiprintf_r+0x8d2>
 80126b8:	ad17      	add	r5, sp, #92	; 0x5c
 80126ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80126bc:	9a05      	ldr	r2, [sp, #20]
 80126be:	1a9f      	subs	r7, r3, r2
 80126c0:	2f00      	cmp	r7, #0
 80126c2:	dd19      	ble.n	80126f8 <_vfiprintf_r+0x5e4>
 80126c4:	0029      	movs	r1, r5
 80126c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80126c8:	4861      	ldr	r0, [pc, #388]	; (8012850 <_vfiprintf_r+0x73c>)
 80126ca:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80126cc:	3301      	adds	r3, #1
 80126ce:	3108      	adds	r1, #8
 80126d0:	6028      	str	r0, [r5, #0]
 80126d2:	2f10      	cmp	r7, #16
 80126d4:	dd00      	ble.n	80126d8 <_vfiprintf_r+0x5c4>
 80126d6:	e157      	b.n	8012988 <_vfiprintf_r+0x874>
 80126d8:	606f      	str	r7, [r5, #4]
 80126da:	18bf      	adds	r7, r7, r2
 80126dc:	000d      	movs	r5, r1
 80126de:	9716      	str	r7, [sp, #88]	; 0x58
 80126e0:	9315      	str	r3, [sp, #84]	; 0x54
 80126e2:	2b07      	cmp	r3, #7
 80126e4:	dd08      	ble.n	80126f8 <_vfiprintf_r+0x5e4>
 80126e6:	9903      	ldr	r1, [sp, #12]
 80126e8:	9806      	ldr	r0, [sp, #24]
 80126ea:	aa14      	add	r2, sp, #80	; 0x50
 80126ec:	f7ff fcdd 	bl	80120aa <__sprint_r>
 80126f0:	2800      	cmp	r0, #0
 80126f2:	d000      	beq.n	80126f6 <_vfiprintf_r+0x5e2>
 80126f4:	e177      	b.n	80129e6 <_vfiprintf_r+0x8d2>
 80126f6:	ad17      	add	r5, sp, #92	; 0x5c
 80126f8:	9b05      	ldr	r3, [sp, #20]
 80126fa:	9a05      	ldr	r2, [sp, #20]
 80126fc:	606b      	str	r3, [r5, #4]
 80126fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012700:	602e      	str	r6, [r5, #0]
 8012702:	189b      	adds	r3, r3, r2
 8012704:	9316      	str	r3, [sp, #88]	; 0x58
 8012706:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012708:	3508      	adds	r5, #8
 801270a:	3301      	adds	r3, #1
 801270c:	9315      	str	r3, [sp, #84]	; 0x54
 801270e:	2b07      	cmp	r3, #7
 8012710:	dd08      	ble.n	8012724 <_vfiprintf_r+0x610>
 8012712:	9903      	ldr	r1, [sp, #12]
 8012714:	9806      	ldr	r0, [sp, #24]
 8012716:	aa14      	add	r2, sp, #80	; 0x50
 8012718:	f7ff fcc7 	bl	80120aa <__sprint_r>
 801271c:	2800      	cmp	r0, #0
 801271e:	d000      	beq.n	8012722 <_vfiprintf_r+0x60e>
 8012720:	e161      	b.n	80129e6 <_vfiprintf_r+0x8d2>
 8012722:	ad17      	add	r5, sp, #92	; 0x5c
 8012724:	0764      	lsls	r4, r4, #29
 8012726:	d500      	bpl.n	801272a <_vfiprintf_r+0x616>
 8012728:	e140      	b.n	80129ac <_vfiprintf_r+0x898>
 801272a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801272c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801272e:	4293      	cmp	r3, r2
 8012730:	da00      	bge.n	8012734 <_vfiprintf_r+0x620>
 8012732:	0013      	movs	r3, r2
 8012734:	9a08      	ldr	r2, [sp, #32]
 8012736:	18d3      	adds	r3, r2, r3
 8012738:	9308      	str	r3, [sp, #32]
 801273a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801273c:	2b00      	cmp	r3, #0
 801273e:	d007      	beq.n	8012750 <_vfiprintf_r+0x63c>
 8012740:	9903      	ldr	r1, [sp, #12]
 8012742:	9806      	ldr	r0, [sp, #24]
 8012744:	aa14      	add	r2, sp, #80	; 0x50
 8012746:	f7ff fcb0 	bl	80120aa <__sprint_r>
 801274a:	2800      	cmp	r0, #0
 801274c:	d000      	beq.n	8012750 <_vfiprintf_r+0x63c>
 801274e:	e14a      	b.n	80129e6 <_vfiprintf_r+0x8d2>
 8012750:	2300      	movs	r3, #0
 8012752:	ad17      	add	r5, sp, #92	; 0x5c
 8012754:	9315      	str	r3, [sp, #84]	; 0x54
 8012756:	e6b7      	b.n	80124c8 <_vfiprintf_r+0x3b4>
 8012758:	0030      	movs	r0, r6
 801275a:	f7ed fcd3 	bl	8000104 <strlen>
 801275e:	9005      	str	r0, [sp, #20]
 8012760:	e719      	b.n	8012596 <_vfiprintf_r+0x482>
 8012762:	2310      	movs	r3, #16
 8012764:	431c      	orrs	r4, r3
 8012766:	2320      	movs	r3, #32
 8012768:	0020      	movs	r0, r4
 801276a:	4018      	ands	r0, r3
 801276c:	421c      	tst	r4, r3
 801276e:	d009      	beq.n	8012784 <_vfiprintf_r+0x670>
 8012770:	3b19      	subs	r3, #25
 8012772:	3707      	adds	r7, #7
 8012774:	439f      	bics	r7, r3
 8012776:	0039      	movs	r1, r7
 8012778:	c90c      	ldmia	r1!, {r2, r3}
 801277a:	9200      	str	r2, [sp, #0]
 801277c:	9301      	str	r3, [sp, #4]
 801277e:	9104      	str	r1, [sp, #16]
 8012780:	2301      	movs	r3, #1
 8012782:	e6c7      	b.n	8012514 <_vfiprintf_r+0x400>
 8012784:	003b      	movs	r3, r7
 8012786:	cb04      	ldmia	r3!, {r2}
 8012788:	0021      	movs	r1, r4
 801278a:	9304      	str	r3, [sp, #16]
 801278c:	2310      	movs	r3, #16
 801278e:	4019      	ands	r1, r3
 8012790:	421c      	tst	r4, r3
 8012792:	d003      	beq.n	801279c <_vfiprintf_r+0x688>
 8012794:	9200      	str	r2, [sp, #0]
 8012796:	9001      	str	r0, [sp, #4]
 8012798:	3b0f      	subs	r3, #15
 801279a:	e6bb      	b.n	8012514 <_vfiprintf_r+0x400>
 801279c:	2340      	movs	r3, #64	; 0x40
 801279e:	0020      	movs	r0, r4
 80127a0:	4018      	ands	r0, r3
 80127a2:	421c      	tst	r4, r3
 80127a4:	d003      	beq.n	80127ae <_vfiprintf_r+0x69a>
 80127a6:	b293      	uxth	r3, r2
 80127a8:	9300      	str	r3, [sp, #0]
 80127aa:	9101      	str	r1, [sp, #4]
 80127ac:	e7e8      	b.n	8012780 <_vfiprintf_r+0x66c>
 80127ae:	2380      	movs	r3, #128	; 0x80
 80127b0:	0021      	movs	r1, r4
 80127b2:	009b      	lsls	r3, r3, #2
 80127b4:	4019      	ands	r1, r3
 80127b6:	421c      	tst	r4, r3
 80127b8:	d003      	beq.n	80127c2 <_vfiprintf_r+0x6ae>
 80127ba:	b2d3      	uxtb	r3, r2
 80127bc:	9300      	str	r3, [sp, #0]
 80127be:	9001      	str	r0, [sp, #4]
 80127c0:	e7de      	b.n	8012780 <_vfiprintf_r+0x66c>
 80127c2:	9200      	str	r2, [sp, #0]
 80127c4:	e7f1      	b.n	80127aa <_vfiprintf_r+0x696>
 80127c6:	4a23      	ldr	r2, [pc, #140]	; (8012854 <_vfiprintf_r+0x740>)
 80127c8:	0020      	movs	r0, r4
 80127ca:	920c      	str	r2, [sp, #48]	; 0x30
 80127cc:	2220      	movs	r2, #32
 80127ce:	4010      	ands	r0, r2
 80127d0:	4214      	tst	r4, r2
 80127d2:	d019      	beq.n	8012808 <_vfiprintf_r+0x6f4>
 80127d4:	3a19      	subs	r2, #25
 80127d6:	3707      	adds	r7, #7
 80127d8:	4397      	bics	r7, r2
 80127da:	0038      	movs	r0, r7
 80127dc:	c806      	ldmia	r0!, {r1, r2}
 80127de:	9100      	str	r1, [sp, #0]
 80127e0:	9201      	str	r2, [sp, #4]
 80127e2:	9004      	str	r0, [sp, #16]
 80127e4:	07e2      	lsls	r2, r4, #31
 80127e6:	d509      	bpl.n	80127fc <_vfiprintf_r+0x6e8>
 80127e8:	9a00      	ldr	r2, [sp, #0]
 80127ea:	9901      	ldr	r1, [sp, #4]
 80127ec:	430a      	orrs	r2, r1
 80127ee:	d005      	beq.n	80127fc <_vfiprintf_r+0x6e8>
 80127f0:	aa13      	add	r2, sp, #76	; 0x4c
 80127f2:	2130      	movs	r1, #48	; 0x30
 80127f4:	7053      	strb	r3, [r2, #1]
 80127f6:	2302      	movs	r3, #2
 80127f8:	7011      	strb	r1, [r2, #0]
 80127fa:	431c      	orrs	r4, r3
 80127fc:	4b10      	ldr	r3, [pc, #64]	; (8012840 <_vfiprintf_r+0x72c>)
 80127fe:	401c      	ands	r4, r3
 8012800:	2302      	movs	r3, #2
 8012802:	e687      	b.n	8012514 <_vfiprintf_r+0x400>
 8012804:	4a10      	ldr	r2, [pc, #64]	; (8012848 <_vfiprintf_r+0x734>)
 8012806:	e7df      	b.n	80127c8 <_vfiprintf_r+0x6b4>
 8012808:	0039      	movs	r1, r7
 801280a:	c904      	ldmia	r1!, {r2}
 801280c:	0026      	movs	r6, r4
 801280e:	9104      	str	r1, [sp, #16]
 8012810:	2110      	movs	r1, #16
 8012812:	400e      	ands	r6, r1
 8012814:	420c      	tst	r4, r1
 8012816:	d002      	beq.n	801281e <_vfiprintf_r+0x70a>
 8012818:	9200      	str	r2, [sp, #0]
 801281a:	9001      	str	r0, [sp, #4]
 801281c:	e7e2      	b.n	80127e4 <_vfiprintf_r+0x6d0>
 801281e:	2140      	movs	r1, #64	; 0x40
 8012820:	0020      	movs	r0, r4
 8012822:	4008      	ands	r0, r1
 8012824:	420c      	tst	r4, r1
 8012826:	d003      	beq.n	8012830 <_vfiprintf_r+0x71c>
 8012828:	b292      	uxth	r2, r2
 801282a:	9200      	str	r2, [sp, #0]
 801282c:	9601      	str	r6, [sp, #4]
 801282e:	e7d9      	b.n	80127e4 <_vfiprintf_r+0x6d0>
 8012830:	2180      	movs	r1, #128	; 0x80
 8012832:	0026      	movs	r6, r4
 8012834:	0089      	lsls	r1, r1, #2
 8012836:	400e      	ands	r6, r1
 8012838:	420c      	tst	r4, r1
 801283a:	d0f6      	beq.n	801282a <_vfiprintf_r+0x716>
 801283c:	b2d2      	uxtb	r2, r2
 801283e:	e7eb      	b.n	8012818 <_vfiprintf_r+0x704>
 8012840:	fffffbff 	.word	0xfffffbff
 8012844:	00007830 	.word	0x00007830
 8012848:	08015254 	.word	0x08015254
 801284c:	08015361 	.word	0x08015361
 8012850:	08015371 	.word	0x08015371
 8012854:	08015265 	.word	0x08015265
 8012858:	9b01      	ldr	r3, [sp, #4]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d109      	bne.n	8012872 <_vfiprintf_r+0x75e>
 801285e:	9b00      	ldr	r3, [sp, #0]
 8012860:	2b09      	cmp	r3, #9
 8012862:	d806      	bhi.n	8012872 <_vfiprintf_r+0x75e>
 8012864:	26b7      	movs	r6, #183	; 0xb7
 8012866:	ab12      	add	r3, sp, #72	; 0x48
 8012868:	18f6      	adds	r6, r6, r3
 801286a:	9b00      	ldr	r3, [sp, #0]
 801286c:	3330      	adds	r3, #48	; 0x30
 801286e:	7033      	strb	r3, [r6, #0]
 8012870:	e115      	b.n	8012a9e <_vfiprintf_r+0x98a>
 8012872:	2380      	movs	r3, #128	; 0x80
 8012874:	2400      	movs	r4, #0
 8012876:	00db      	lsls	r3, r3, #3
 8012878:	403b      	ands	r3, r7
 801287a:	ae40      	add	r6, sp, #256	; 0x100
 801287c:	930a      	str	r3, [sp, #40]	; 0x28
 801287e:	220a      	movs	r2, #10
 8012880:	9800      	ldr	r0, [sp, #0]
 8012882:	9901      	ldr	r1, [sp, #4]
 8012884:	2300      	movs	r3, #0
 8012886:	f7ed fe0d 	bl	80004a4 <__aeabi_uldivmod>
 801288a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801288c:	3e01      	subs	r6, #1
 801288e:	3230      	adds	r2, #48	; 0x30
 8012890:	900b      	str	r0, [sp, #44]	; 0x2c
 8012892:	9110      	str	r1, [sp, #64]	; 0x40
 8012894:	7032      	strb	r2, [r6, #0]
 8012896:	3401      	adds	r4, #1
 8012898:	2b00      	cmp	r3, #0
 801289a:	d01a      	beq.n	80128d2 <_vfiprintf_r+0x7be>
 801289c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801289e:	781b      	ldrb	r3, [r3, #0]
 80128a0:	42a3      	cmp	r3, r4
 80128a2:	d116      	bne.n	80128d2 <_vfiprintf_r+0x7be>
 80128a4:	2cff      	cmp	r4, #255	; 0xff
 80128a6:	d014      	beq.n	80128d2 <_vfiprintf_r+0x7be>
 80128a8:	9b01      	ldr	r3, [sp, #4]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d102      	bne.n	80128b4 <_vfiprintf_r+0x7a0>
 80128ae:	9b00      	ldr	r3, [sp, #0]
 80128b0:	2b09      	cmp	r3, #9
 80128b2:	d90e      	bls.n	80128d2 <_vfiprintf_r+0x7be>
 80128b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80128b6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80128b8:	1af6      	subs	r6, r6, r3
 80128ba:	001a      	movs	r2, r3
 80128bc:	0030      	movs	r0, r6
 80128be:	f7f9 ffe6 	bl	800c88e <strncpy>
 80128c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80128c4:	2400      	movs	r4, #0
 80128c6:	785b      	ldrb	r3, [r3, #1]
 80128c8:	1e5a      	subs	r2, r3, #1
 80128ca:	4193      	sbcs	r3, r2
 80128cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80128ce:	18d3      	adds	r3, r2, r3
 80128d0:	930d      	str	r3, [sp, #52]	; 0x34
 80128d2:	9b01      	ldr	r3, [sp, #4]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d103      	bne.n	80128e0 <_vfiprintf_r+0x7cc>
 80128d8:	9b00      	ldr	r3, [sp, #0]
 80128da:	2b09      	cmp	r3, #9
 80128dc:	d800      	bhi.n	80128e0 <_vfiprintf_r+0x7cc>
 80128de:	e0de      	b.n	8012a9e <_vfiprintf_r+0x98a>
 80128e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80128e2:	9300      	str	r3, [sp, #0]
 80128e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80128e6:	9301      	str	r3, [sp, #4]
 80128e8:	e7c9      	b.n	801287e <_vfiprintf_r+0x76a>
 80128ea:	200f      	movs	r0, #15
 80128ec:	9b00      	ldr	r3, [sp, #0]
 80128ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80128f0:	4003      	ands	r3, r0
 80128f2:	5cd3      	ldrb	r3, [r2, r3]
 80128f4:	3e01      	subs	r6, #1
 80128f6:	7033      	strb	r3, [r6, #0]
 80128f8:	9b01      	ldr	r3, [sp, #4]
 80128fa:	0719      	lsls	r1, r3, #28
 80128fc:	9b00      	ldr	r3, [sp, #0]
 80128fe:	091a      	lsrs	r2, r3, #4
 8012900:	9b01      	ldr	r3, [sp, #4]
 8012902:	4311      	orrs	r1, r2
 8012904:	091b      	lsrs	r3, r3, #4
 8012906:	9301      	str	r3, [sp, #4]
 8012908:	000b      	movs	r3, r1
 801290a:	9a01      	ldr	r2, [sp, #4]
 801290c:	9100      	str	r1, [sp, #0]
 801290e:	4313      	orrs	r3, r2
 8012910:	d1ec      	bne.n	80128ec <_vfiprintf_r+0x7d8>
 8012912:	e0c4      	b.n	8012a9e <_vfiprintf_r+0x98a>
 8012914:	ae40      	add	r6, sp, #256	; 0x100
 8012916:	2b00      	cmp	r3, #0
 8012918:	d000      	beq.n	801291c <_vfiprintf_r+0x808>
 801291a:	e0c0      	b.n	8012a9e <_vfiprintf_r+0x98a>
 801291c:	07e4      	lsls	r4, r4, #31
 801291e:	d400      	bmi.n	8012922 <_vfiprintf_r+0x80e>
 8012920:	e0bd      	b.n	8012a9e <_vfiprintf_r+0x98a>
 8012922:	26b7      	movs	r6, #183	; 0xb7
 8012924:	ab12      	add	r3, sp, #72	; 0x48
 8012926:	18f6      	adds	r6, r6, r3
 8012928:	2330      	movs	r3, #48	; 0x30
 801292a:	e7a0      	b.n	801286e <_vfiprintf_r+0x75a>
 801292c:	2b00      	cmp	r3, #0
 801292e:	d100      	bne.n	8012932 <_vfiprintf_r+0x81e>
 8012930:	e07e      	b.n	8012a30 <_vfiprintf_r+0x91c>
 8012932:	ae27      	add	r6, sp, #156	; 0x9c
 8012934:	7033      	strb	r3, [r6, #0]
 8012936:	2300      	movs	r3, #0
 8012938:	aa12      	add	r2, sp, #72	; 0x48
 801293a:	70d3      	strb	r3, [r2, #3]
 801293c:	9704      	str	r7, [sp, #16]
 801293e:	e576      	b.n	801242e <_vfiprintf_r+0x31a>
 8012940:	2010      	movs	r0, #16
 8012942:	1812      	adds	r2, r2, r0
 8012944:	6068      	str	r0, [r5, #4]
 8012946:	9216      	str	r2, [sp, #88]	; 0x58
 8012948:	9315      	str	r3, [sp, #84]	; 0x54
 801294a:	2b07      	cmp	r3, #7
 801294c:	dd07      	ble.n	801295e <_vfiprintf_r+0x84a>
 801294e:	9903      	ldr	r1, [sp, #12]
 8012950:	9806      	ldr	r0, [sp, #24]
 8012952:	aa14      	add	r2, sp, #80	; 0x50
 8012954:	f7ff fba9 	bl	80120aa <__sprint_r>
 8012958:	2800      	cmp	r0, #0
 801295a:	d144      	bne.n	80129e6 <_vfiprintf_r+0x8d2>
 801295c:	a917      	add	r1, sp, #92	; 0x5c
 801295e:	000d      	movs	r5, r1
 8012960:	3f10      	subs	r7, #16
 8012962:	e63b      	b.n	80125dc <_vfiprintf_r+0x4c8>
 8012964:	2010      	movs	r0, #16
 8012966:	1812      	adds	r2, r2, r0
 8012968:	6068      	str	r0, [r5, #4]
 801296a:	9216      	str	r2, [sp, #88]	; 0x58
 801296c:	9315      	str	r3, [sp, #84]	; 0x54
 801296e:	2b07      	cmp	r3, #7
 8012970:	dd07      	ble.n	8012982 <_vfiprintf_r+0x86e>
 8012972:	9903      	ldr	r1, [sp, #12]
 8012974:	9806      	ldr	r0, [sp, #24]
 8012976:	aa14      	add	r2, sp, #80	; 0x50
 8012978:	f7ff fb97 	bl	80120aa <__sprint_r>
 801297c:	2800      	cmp	r0, #0
 801297e:	d132      	bne.n	80129e6 <_vfiprintf_r+0x8d2>
 8012980:	a917      	add	r1, sp, #92	; 0x5c
 8012982:	000d      	movs	r5, r1
 8012984:	3f10      	subs	r7, #16
 8012986:	e67e      	b.n	8012686 <_vfiprintf_r+0x572>
 8012988:	2010      	movs	r0, #16
 801298a:	1812      	adds	r2, r2, r0
 801298c:	6068      	str	r0, [r5, #4]
 801298e:	9216      	str	r2, [sp, #88]	; 0x58
 8012990:	9315      	str	r3, [sp, #84]	; 0x54
 8012992:	2b07      	cmp	r3, #7
 8012994:	dd07      	ble.n	80129a6 <_vfiprintf_r+0x892>
 8012996:	9903      	ldr	r1, [sp, #12]
 8012998:	9806      	ldr	r0, [sp, #24]
 801299a:	aa14      	add	r2, sp, #80	; 0x50
 801299c:	f7ff fb85 	bl	80120aa <__sprint_r>
 80129a0:	2800      	cmp	r0, #0
 80129a2:	d120      	bne.n	80129e6 <_vfiprintf_r+0x8d2>
 80129a4:	a917      	add	r1, sp, #92	; 0x5c
 80129a6:	000d      	movs	r5, r1
 80129a8:	3f10      	subs	r7, #16
 80129aa:	e68b      	b.n	80126c4 <_vfiprintf_r+0x5b0>
 80129ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80129b0:	2610      	movs	r6, #16
 80129b2:	1a9c      	subs	r4, r3, r2
 80129b4:	2c00      	cmp	r4, #0
 80129b6:	dc00      	bgt.n	80129ba <_vfiprintf_r+0x8a6>
 80129b8:	e6b7      	b.n	801272a <_vfiprintf_r+0x616>
 80129ba:	9915      	ldr	r1, [sp, #84]	; 0x54
 80129bc:	4a3b      	ldr	r2, [pc, #236]	; (8012aac <_vfiprintf_r+0x998>)
 80129be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80129c0:	3101      	adds	r1, #1
 80129c2:	602a      	str	r2, [r5, #0]
 80129c4:	2c10      	cmp	r4, #16
 80129c6:	dc22      	bgt.n	8012a0e <_vfiprintf_r+0x8fa>
 80129c8:	606c      	str	r4, [r5, #4]
 80129ca:	18e4      	adds	r4, r4, r3
 80129cc:	9416      	str	r4, [sp, #88]	; 0x58
 80129ce:	9115      	str	r1, [sp, #84]	; 0x54
 80129d0:	2907      	cmp	r1, #7
 80129d2:	dc00      	bgt.n	80129d6 <_vfiprintf_r+0x8c2>
 80129d4:	e6a9      	b.n	801272a <_vfiprintf_r+0x616>
 80129d6:	9903      	ldr	r1, [sp, #12]
 80129d8:	9806      	ldr	r0, [sp, #24]
 80129da:	aa14      	add	r2, sp, #80	; 0x50
 80129dc:	f7ff fb65 	bl	80120aa <__sprint_r>
 80129e0:	2800      	cmp	r0, #0
 80129e2:	d100      	bne.n	80129e6 <_vfiprintf_r+0x8d2>
 80129e4:	e6a1      	b.n	801272a <_vfiprintf_r+0x616>
 80129e6:	9b03      	ldr	r3, [sp, #12]
 80129e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80129ea:	07db      	lsls	r3, r3, #31
 80129ec:	d407      	bmi.n	80129fe <_vfiprintf_r+0x8ea>
 80129ee:	9b03      	ldr	r3, [sp, #12]
 80129f0:	899b      	ldrh	r3, [r3, #12]
 80129f2:	059b      	lsls	r3, r3, #22
 80129f4:	d403      	bmi.n	80129fe <_vfiprintf_r+0x8ea>
 80129f6:	9b03      	ldr	r3, [sp, #12]
 80129f8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80129fa:	f7fa f808 	bl	800ca0e <__retarget_lock_release_recursive>
 80129fe:	9b03      	ldr	r3, [sp, #12]
 8012a00:	899b      	ldrh	r3, [r3, #12]
 8012a02:	065b      	lsls	r3, r3, #25
 8012a04:	d401      	bmi.n	8012a0a <_vfiprintf_r+0x8f6>
 8012a06:	f7ff fbc3 	bl	8012190 <_vfiprintf_r+0x7c>
 8012a0a:	f7ff fbbe 	bl	801218a <_vfiprintf_r+0x76>
 8012a0e:	3310      	adds	r3, #16
 8012a10:	606e      	str	r6, [r5, #4]
 8012a12:	9316      	str	r3, [sp, #88]	; 0x58
 8012a14:	9115      	str	r1, [sp, #84]	; 0x54
 8012a16:	3508      	adds	r5, #8
 8012a18:	2907      	cmp	r1, #7
 8012a1a:	dd07      	ble.n	8012a2c <_vfiprintf_r+0x918>
 8012a1c:	9903      	ldr	r1, [sp, #12]
 8012a1e:	9806      	ldr	r0, [sp, #24]
 8012a20:	aa14      	add	r2, sp, #80	; 0x50
 8012a22:	f7ff fb42 	bl	80120aa <__sprint_r>
 8012a26:	2800      	cmp	r0, #0
 8012a28:	d1dd      	bne.n	80129e6 <_vfiprintf_r+0x8d2>
 8012a2a:	ad17      	add	r5, sp, #92	; 0x5c
 8012a2c:	3c10      	subs	r4, #16
 8012a2e:	e7c4      	b.n	80129ba <_vfiprintf_r+0x8a6>
 8012a30:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d102      	bne.n	8012a3c <_vfiprintf_r+0x928>
 8012a36:	2300      	movs	r3, #0
 8012a38:	9315      	str	r3, [sp, #84]	; 0x54
 8012a3a:	e7d4      	b.n	80129e6 <_vfiprintf_r+0x8d2>
 8012a3c:	9903      	ldr	r1, [sp, #12]
 8012a3e:	9806      	ldr	r0, [sp, #24]
 8012a40:	aa14      	add	r2, sp, #80	; 0x50
 8012a42:	f7ff fb32 	bl	80120aa <__sprint_r>
 8012a46:	2800      	cmp	r0, #0
 8012a48:	d0f5      	beq.n	8012a36 <_vfiprintf_r+0x922>
 8012a4a:	e7cc      	b.n	80129e6 <_vfiprintf_r+0x8d2>
 8012a4c:	0027      	movs	r7, r4
 8012a4e:	2a00      	cmp	r2, #0
 8012a50:	d100      	bne.n	8012a54 <_vfiprintf_r+0x940>
 8012a52:	e51b      	b.n	801248c <_vfiprintf_r+0x378>
 8012a54:	2b01      	cmp	r3, #1
 8012a56:	d100      	bne.n	8012a5a <_vfiprintf_r+0x946>
 8012a58:	e6fe      	b.n	8012858 <_vfiprintf_r+0x744>
 8012a5a:	ae40      	add	r6, sp, #256	; 0x100
 8012a5c:	2b02      	cmp	r3, #2
 8012a5e:	d100      	bne.n	8012a62 <_vfiprintf_r+0x94e>
 8012a60:	e743      	b.n	80128ea <_vfiprintf_r+0x7d6>
 8012a62:	2307      	movs	r3, #7
 8012a64:	469c      	mov	ip, r3
 8012a66:	4663      	mov	r3, ip
 8012a68:	9900      	ldr	r1, [sp, #0]
 8012a6a:	0032      	movs	r2, r6
 8012a6c:	400b      	ands	r3, r1
 8012a6e:	9901      	ldr	r1, [sp, #4]
 8012a70:	3e01      	subs	r6, #1
 8012a72:	074c      	lsls	r4, r1, #29
 8012a74:	9900      	ldr	r1, [sp, #0]
 8012a76:	3330      	adds	r3, #48	; 0x30
 8012a78:	08c8      	lsrs	r0, r1, #3
 8012a7a:	9901      	ldr	r1, [sp, #4]
 8012a7c:	4304      	orrs	r4, r0
 8012a7e:	08c9      	lsrs	r1, r1, #3
 8012a80:	9101      	str	r1, [sp, #4]
 8012a82:	0021      	movs	r1, r4
 8012a84:	9801      	ldr	r0, [sp, #4]
 8012a86:	7033      	strb	r3, [r6, #0]
 8012a88:	9400      	str	r4, [sp, #0]
 8012a8a:	4301      	orrs	r1, r0
 8012a8c:	d1eb      	bne.n	8012a66 <_vfiprintf_r+0x952>
 8012a8e:	07f9      	lsls	r1, r7, #31
 8012a90:	d505      	bpl.n	8012a9e <_vfiprintf_r+0x98a>
 8012a92:	2b30      	cmp	r3, #48	; 0x30
 8012a94:	d003      	beq.n	8012a9e <_vfiprintf_r+0x98a>
 8012a96:	2330      	movs	r3, #48	; 0x30
 8012a98:	3e01      	subs	r6, #1
 8012a9a:	7033      	strb	r3, [r6, #0]
 8012a9c:	1e96      	subs	r6, r2, #2
 8012a9e:	9b05      	ldr	r3, [sp, #20]
 8012aa0:	003c      	movs	r4, r7
 8012aa2:	930b      	str	r3, [sp, #44]	; 0x2c
 8012aa4:	ab40      	add	r3, sp, #256	; 0x100
 8012aa6:	1b9b      	subs	r3, r3, r6
 8012aa8:	9305      	str	r3, [sp, #20]
 8012aaa:	e575      	b.n	8012598 <_vfiprintf_r+0x484>
 8012aac:	08015361 	.word	0x08015361

08012ab0 <__sbprintf>:
 8012ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ab2:	0015      	movs	r5, r2
 8012ab4:	2202      	movs	r2, #2
 8012ab6:	4c1e      	ldr	r4, [pc, #120]	; (8012b30 <__sbprintf+0x80>)
 8012ab8:	001f      	movs	r7, r3
 8012aba:	898b      	ldrh	r3, [r1, #12]
 8012abc:	44a5      	add	sp, r4
 8012abe:	4393      	bics	r3, r2
 8012ac0:	466a      	mov	r2, sp
 8012ac2:	8193      	strh	r3, [r2, #12]
 8012ac4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8012ac6:	0006      	movs	r6, r0
 8012ac8:	9319      	str	r3, [sp, #100]	; 0x64
 8012aca:	89cb      	ldrh	r3, [r1, #14]
 8012acc:	a816      	add	r0, sp, #88	; 0x58
 8012ace:	81d3      	strh	r3, [r2, #14]
 8012ad0:	69cb      	ldr	r3, [r1, #28]
 8012ad2:	000c      	movs	r4, r1
 8012ad4:	9307      	str	r3, [sp, #28]
 8012ad6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8012ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8012ada:	ab1a      	add	r3, sp, #104	; 0x68
 8012adc:	9300      	str	r3, [sp, #0]
 8012ade:	9304      	str	r3, [sp, #16]
 8012ae0:	2380      	movs	r3, #128	; 0x80
 8012ae2:	00db      	lsls	r3, r3, #3
 8012ae4:	9302      	str	r3, [sp, #8]
 8012ae6:	9305      	str	r3, [sp, #20]
 8012ae8:	2300      	movs	r3, #0
 8012aea:	9306      	str	r3, [sp, #24]
 8012aec:	f7f9 ff8c 	bl	800ca08 <__retarget_lock_init_recursive>
 8012af0:	002a      	movs	r2, r5
 8012af2:	003b      	movs	r3, r7
 8012af4:	4669      	mov	r1, sp
 8012af6:	0030      	movs	r0, r6
 8012af8:	f7ff fb0c 	bl	8012114 <_vfiprintf_r>
 8012afc:	1e05      	subs	r5, r0, #0
 8012afe:	db07      	blt.n	8012b10 <__sbprintf+0x60>
 8012b00:	4669      	mov	r1, sp
 8012b02:	0030      	movs	r0, r6
 8012b04:	f7fd fdf6 	bl	80106f4 <_fflush_r>
 8012b08:	2800      	cmp	r0, #0
 8012b0a:	d001      	beq.n	8012b10 <__sbprintf+0x60>
 8012b0c:	2501      	movs	r5, #1
 8012b0e:	426d      	negs	r5, r5
 8012b10:	466b      	mov	r3, sp
 8012b12:	899a      	ldrh	r2, [r3, #12]
 8012b14:	2340      	movs	r3, #64	; 0x40
 8012b16:	421a      	tst	r2, r3
 8012b18:	d002      	beq.n	8012b20 <__sbprintf+0x70>
 8012b1a:	89a2      	ldrh	r2, [r4, #12]
 8012b1c:	4313      	orrs	r3, r2
 8012b1e:	81a3      	strh	r3, [r4, #12]
 8012b20:	9816      	ldr	r0, [sp, #88]	; 0x58
 8012b22:	f7f9 ff72 	bl	800ca0a <__retarget_lock_close_recursive>
 8012b26:	0028      	movs	r0, r5
 8012b28:	4b02      	ldr	r3, [pc, #8]	; (8012b34 <__sbprintf+0x84>)
 8012b2a:	449d      	add	sp, r3
 8012b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b2e:	46c0      	nop			; (mov r8, r8)
 8012b30:	fffffb94 	.word	0xfffffb94
 8012b34:	0000046c 	.word	0x0000046c

08012b38 <__sfvwrite_r>:
 8012b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b3a:	6893      	ldr	r3, [r2, #8]
 8012b3c:	b087      	sub	sp, #28
 8012b3e:	000c      	movs	r4, r1
 8012b40:	9002      	str	r0, [sp, #8]
 8012b42:	9204      	str	r2, [sp, #16]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d102      	bne.n	8012b4e <__sfvwrite_r+0x16>
 8012b48:	2000      	movs	r0, #0
 8012b4a:	b007      	add	sp, #28
 8012b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b4e:	898b      	ldrh	r3, [r1, #12]
 8012b50:	071b      	lsls	r3, r3, #28
 8012b52:	d557      	bpl.n	8012c04 <__sfvwrite_r+0xcc>
 8012b54:	690b      	ldr	r3, [r1, #16]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d054      	beq.n	8012c04 <__sfvwrite_r+0xcc>
 8012b5a:	9b04      	ldr	r3, [sp, #16]
 8012b5c:	2202      	movs	r2, #2
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	9301      	str	r3, [sp, #4]
 8012b62:	89a3      	ldrh	r3, [r4, #12]
 8012b64:	001f      	movs	r7, r3
 8012b66:	4017      	ands	r7, r2
 8012b68:	4213      	tst	r3, r2
 8012b6a:	d171      	bne.n	8012c50 <__sfvwrite_r+0x118>
 8012b6c:	2201      	movs	r2, #1
 8012b6e:	2101      	movs	r1, #1
 8012b70:	401a      	ands	r2, r3
 8012b72:	420b      	tst	r3, r1
 8012b74:	d100      	bne.n	8012b78 <__sfvwrite_r+0x40>
 8012b76:	e0a5      	b.n	8012cc4 <__sfvwrite_r+0x18c>
 8012b78:	0038      	movs	r0, r7
 8012b7a:	003e      	movs	r6, r7
 8012b7c:	9703      	str	r7, [sp, #12]
 8012b7e:	9b03      	ldr	r3, [sp, #12]
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d100      	bne.n	8012b86 <__sfvwrite_r+0x4e>
 8012b84:	e10b      	b.n	8012d9e <__sfvwrite_r+0x266>
 8012b86:	2800      	cmp	r0, #0
 8012b88:	d10a      	bne.n	8012ba0 <__sfvwrite_r+0x68>
 8012b8a:	001a      	movs	r2, r3
 8012b8c:	210a      	movs	r1, #10
 8012b8e:	0030      	movs	r0, r6
 8012b90:	f7fd fe2a 	bl	80107e8 <memchr>
 8012b94:	9b03      	ldr	r3, [sp, #12]
 8012b96:	1c5f      	adds	r7, r3, #1
 8012b98:	2800      	cmp	r0, #0
 8012b9a:	d001      	beq.n	8012ba0 <__sfvwrite_r+0x68>
 8012b9c:	3001      	adds	r0, #1
 8012b9e:	1b87      	subs	r7, r0, r6
 8012ba0:	9b03      	ldr	r3, [sp, #12]
 8012ba2:	9705      	str	r7, [sp, #20]
 8012ba4:	429f      	cmp	r7, r3
 8012ba6:	d900      	bls.n	8012baa <__sfvwrite_r+0x72>
 8012ba8:	9305      	str	r3, [sp, #20]
 8012baa:	6820      	ldr	r0, [r4, #0]
 8012bac:	6922      	ldr	r2, [r4, #16]
 8012bae:	68a5      	ldr	r5, [r4, #8]
 8012bb0:	6963      	ldr	r3, [r4, #20]
 8012bb2:	4290      	cmp	r0, r2
 8012bb4:	d800      	bhi.n	8012bb8 <__sfvwrite_r+0x80>
 8012bb6:	e0fb      	b.n	8012db0 <__sfvwrite_r+0x278>
 8012bb8:	9a05      	ldr	r2, [sp, #20]
 8012bba:	18ed      	adds	r5, r5, r3
 8012bbc:	42aa      	cmp	r2, r5
 8012bbe:	dc00      	bgt.n	8012bc2 <__sfvwrite_r+0x8a>
 8012bc0:	e0f6      	b.n	8012db0 <__sfvwrite_r+0x278>
 8012bc2:	0031      	movs	r1, r6
 8012bc4:	002a      	movs	r2, r5
 8012bc6:	f000 fa1e 	bl	8013006 <memmove>
 8012bca:	6823      	ldr	r3, [r4, #0]
 8012bcc:	0021      	movs	r1, r4
 8012bce:	195b      	adds	r3, r3, r5
 8012bd0:	9802      	ldr	r0, [sp, #8]
 8012bd2:	6023      	str	r3, [r4, #0]
 8012bd4:	f7fd fd8e 	bl	80106f4 <_fflush_r>
 8012bd8:	2800      	cmp	r0, #0
 8012bda:	d16e      	bne.n	8012cba <__sfvwrite_r+0x182>
 8012bdc:	2001      	movs	r0, #1
 8012bde:	1b7f      	subs	r7, r7, r5
 8012be0:	d105      	bne.n	8012bee <__sfvwrite_r+0xb6>
 8012be2:	0021      	movs	r1, r4
 8012be4:	9802      	ldr	r0, [sp, #8]
 8012be6:	f7fd fd85 	bl	80106f4 <_fflush_r>
 8012bea:	2800      	cmp	r0, #0
 8012bec:	d165      	bne.n	8012cba <__sfvwrite_r+0x182>
 8012bee:	9b03      	ldr	r3, [sp, #12]
 8012bf0:	9a04      	ldr	r2, [sp, #16]
 8012bf2:	1b5b      	subs	r3, r3, r5
 8012bf4:	9303      	str	r3, [sp, #12]
 8012bf6:	9b04      	ldr	r3, [sp, #16]
 8012bf8:	1976      	adds	r6, r6, r5
 8012bfa:	689b      	ldr	r3, [r3, #8]
 8012bfc:	1b5b      	subs	r3, r3, r5
 8012bfe:	6093      	str	r3, [r2, #8]
 8012c00:	d1bd      	bne.n	8012b7e <__sfvwrite_r+0x46>
 8012c02:	e7a1      	b.n	8012b48 <__sfvwrite_r+0x10>
 8012c04:	0021      	movs	r1, r4
 8012c06:	9802      	ldr	r0, [sp, #8]
 8012c08:	f000 f932 	bl	8012e70 <__swsetup_r>
 8012c0c:	2800      	cmp	r0, #0
 8012c0e:	d0a4      	beq.n	8012b5a <__sfvwrite_r+0x22>
 8012c10:	2001      	movs	r0, #1
 8012c12:	4240      	negs	r0, r0
 8012c14:	e799      	b.n	8012b4a <__sfvwrite_r+0x12>
 8012c16:	9b01      	ldr	r3, [sp, #4]
 8012c18:	681e      	ldr	r6, [r3, #0]
 8012c1a:	685d      	ldr	r5, [r3, #4]
 8012c1c:	3308      	adds	r3, #8
 8012c1e:	9301      	str	r3, [sp, #4]
 8012c20:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8012c22:	69e1      	ldr	r1, [r4, #28]
 8012c24:	2d00      	cmp	r5, #0
 8012c26:	d0f6      	beq.n	8012c16 <__sfvwrite_r+0xde>
 8012c28:	4a6e      	ldr	r2, [pc, #440]	; (8012de4 <__sfvwrite_r+0x2ac>)
 8012c2a:	002b      	movs	r3, r5
 8012c2c:	4295      	cmp	r5, r2
 8012c2e:	d900      	bls.n	8012c32 <__sfvwrite_r+0xfa>
 8012c30:	0013      	movs	r3, r2
 8012c32:	0032      	movs	r2, r6
 8012c34:	9802      	ldr	r0, [sp, #8]
 8012c36:	47b8      	blx	r7
 8012c38:	2800      	cmp	r0, #0
 8012c3a:	dd3e      	ble.n	8012cba <__sfvwrite_r+0x182>
 8012c3c:	9b04      	ldr	r3, [sp, #16]
 8012c3e:	9a04      	ldr	r2, [sp, #16]
 8012c40:	689b      	ldr	r3, [r3, #8]
 8012c42:	1836      	adds	r6, r6, r0
 8012c44:	1a1b      	subs	r3, r3, r0
 8012c46:	1a2d      	subs	r5, r5, r0
 8012c48:	6093      	str	r3, [r2, #8]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d1e8      	bne.n	8012c20 <__sfvwrite_r+0xe8>
 8012c4e:	e77b      	b.n	8012b48 <__sfvwrite_r+0x10>
 8012c50:	2600      	movs	r6, #0
 8012c52:	0035      	movs	r5, r6
 8012c54:	e7e4      	b.n	8012c20 <__sfvwrite_r+0xe8>
 8012c56:	9b01      	ldr	r3, [sp, #4]
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	9303      	str	r3, [sp, #12]
 8012c5c:	9b01      	ldr	r3, [sp, #4]
 8012c5e:	685d      	ldr	r5, [r3, #4]
 8012c60:	3308      	adds	r3, #8
 8012c62:	9301      	str	r3, [sp, #4]
 8012c64:	220c      	movs	r2, #12
 8012c66:	5ea3      	ldrsh	r3, [r4, r2]
 8012c68:	6820      	ldr	r0, [r4, #0]
 8012c6a:	68a6      	ldr	r6, [r4, #8]
 8012c6c:	2d00      	cmp	r5, #0
 8012c6e:	d0f2      	beq.n	8012c56 <__sfvwrite_r+0x11e>
 8012c70:	2180      	movs	r1, #128	; 0x80
 8012c72:	0089      	lsls	r1, r1, #2
 8012c74:	b29a      	uxth	r2, r3
 8012c76:	420b      	tst	r3, r1
 8012c78:	d062      	beq.n	8012d40 <__sfvwrite_r+0x208>
 8012c7a:	42ae      	cmp	r6, r5
 8012c7c:	d837      	bhi.n	8012cee <__sfvwrite_r+0x1b6>
 8012c7e:	2390      	movs	r3, #144	; 0x90
 8012c80:	00db      	lsls	r3, r3, #3
 8012c82:	421a      	tst	r2, r3
 8012c84:	d033      	beq.n	8012cee <__sfvwrite_r+0x1b6>
 8012c86:	6921      	ldr	r1, [r4, #16]
 8012c88:	1a43      	subs	r3, r0, r1
 8012c8a:	2003      	movs	r0, #3
 8012c8c:	9305      	str	r3, [sp, #20]
 8012c8e:	6963      	ldr	r3, [r4, #20]
 8012c90:	4343      	muls	r3, r0
 8012c92:	0fdf      	lsrs	r7, r3, #31
 8012c94:	18ff      	adds	r7, r7, r3
 8012c96:	9b05      	ldr	r3, [sp, #20]
 8012c98:	107f      	asrs	r7, r7, #1
 8012c9a:	3301      	adds	r3, #1
 8012c9c:	195b      	adds	r3, r3, r5
 8012c9e:	42bb      	cmp	r3, r7
 8012ca0:	d900      	bls.n	8012ca4 <__sfvwrite_r+0x16c>
 8012ca2:	001f      	movs	r7, r3
 8012ca4:	0552      	lsls	r2, r2, #21
 8012ca6:	d53c      	bpl.n	8012d22 <__sfvwrite_r+0x1ea>
 8012ca8:	0039      	movs	r1, r7
 8012caa:	9802      	ldr	r0, [sp, #8]
 8012cac:	f7f8 fb56 	bl	800b35c <_malloc_r>
 8012cb0:	1e06      	subs	r6, r0, #0
 8012cb2:	d10a      	bne.n	8012cca <__sfvwrite_r+0x192>
 8012cb4:	230c      	movs	r3, #12
 8012cb6:	9a02      	ldr	r2, [sp, #8]
 8012cb8:	6013      	str	r3, [r2, #0]
 8012cba:	2340      	movs	r3, #64	; 0x40
 8012cbc:	89a2      	ldrh	r2, [r4, #12]
 8012cbe:	4313      	orrs	r3, r2
 8012cc0:	81a3      	strh	r3, [r4, #12]
 8012cc2:	e7a5      	b.n	8012c10 <__sfvwrite_r+0xd8>
 8012cc4:	0015      	movs	r5, r2
 8012cc6:	9203      	str	r2, [sp, #12]
 8012cc8:	e7cc      	b.n	8012c64 <__sfvwrite_r+0x12c>
 8012cca:	9a05      	ldr	r2, [sp, #20]
 8012ccc:	6921      	ldr	r1, [r4, #16]
 8012cce:	f7f9 feaa 	bl	800ca26 <memcpy>
 8012cd2:	89a2      	ldrh	r2, [r4, #12]
 8012cd4:	4b44      	ldr	r3, [pc, #272]	; (8012de8 <__sfvwrite_r+0x2b0>)
 8012cd6:	401a      	ands	r2, r3
 8012cd8:	2380      	movs	r3, #128	; 0x80
 8012cda:	4313      	orrs	r3, r2
 8012cdc:	81a3      	strh	r3, [r4, #12]
 8012cde:	9b05      	ldr	r3, [sp, #20]
 8012ce0:	6126      	str	r6, [r4, #16]
 8012ce2:	18f6      	adds	r6, r6, r3
 8012ce4:	6026      	str	r6, [r4, #0]
 8012ce6:	002e      	movs	r6, r5
 8012ce8:	6167      	str	r7, [r4, #20]
 8012cea:	1aff      	subs	r7, r7, r3
 8012cec:	60a7      	str	r7, [r4, #8]
 8012cee:	002f      	movs	r7, r5
 8012cf0:	42ae      	cmp	r6, r5
 8012cf2:	d900      	bls.n	8012cf6 <__sfvwrite_r+0x1be>
 8012cf4:	002e      	movs	r6, r5
 8012cf6:	0032      	movs	r2, r6
 8012cf8:	9903      	ldr	r1, [sp, #12]
 8012cfa:	6820      	ldr	r0, [r4, #0]
 8012cfc:	f000 f983 	bl	8013006 <memmove>
 8012d00:	68a3      	ldr	r3, [r4, #8]
 8012d02:	1b9b      	subs	r3, r3, r6
 8012d04:	60a3      	str	r3, [r4, #8]
 8012d06:	6823      	ldr	r3, [r4, #0]
 8012d08:	199b      	adds	r3, r3, r6
 8012d0a:	6023      	str	r3, [r4, #0]
 8012d0c:	9b03      	ldr	r3, [sp, #12]
 8012d0e:	9a04      	ldr	r2, [sp, #16]
 8012d10:	19db      	adds	r3, r3, r7
 8012d12:	9303      	str	r3, [sp, #12]
 8012d14:	9b04      	ldr	r3, [sp, #16]
 8012d16:	1bed      	subs	r5, r5, r7
 8012d18:	689b      	ldr	r3, [r3, #8]
 8012d1a:	1bdb      	subs	r3, r3, r7
 8012d1c:	6093      	str	r3, [r2, #8]
 8012d1e:	d1a1      	bne.n	8012c64 <__sfvwrite_r+0x12c>
 8012d20:	e712      	b.n	8012b48 <__sfvwrite_r+0x10>
 8012d22:	003a      	movs	r2, r7
 8012d24:	9802      	ldr	r0, [sp, #8]
 8012d26:	f7fe fcd7 	bl	80116d8 <_realloc_r>
 8012d2a:	1e06      	subs	r6, r0, #0
 8012d2c:	d1d7      	bne.n	8012cde <__sfvwrite_r+0x1a6>
 8012d2e:	6921      	ldr	r1, [r4, #16]
 8012d30:	9802      	ldr	r0, [sp, #8]
 8012d32:	f7f9 fef3 	bl	800cb1c <_free_r>
 8012d36:	2280      	movs	r2, #128	; 0x80
 8012d38:	89a3      	ldrh	r3, [r4, #12]
 8012d3a:	4393      	bics	r3, r2
 8012d3c:	81a3      	strh	r3, [r4, #12]
 8012d3e:	e7b9      	b.n	8012cb4 <__sfvwrite_r+0x17c>
 8012d40:	6923      	ldr	r3, [r4, #16]
 8012d42:	4283      	cmp	r3, r0
 8012d44:	d302      	bcc.n	8012d4c <__sfvwrite_r+0x214>
 8012d46:	6967      	ldr	r7, [r4, #20]
 8012d48:	42af      	cmp	r7, r5
 8012d4a:	d916      	bls.n	8012d7a <__sfvwrite_r+0x242>
 8012d4c:	42ae      	cmp	r6, r5
 8012d4e:	d900      	bls.n	8012d52 <__sfvwrite_r+0x21a>
 8012d50:	002e      	movs	r6, r5
 8012d52:	0032      	movs	r2, r6
 8012d54:	9903      	ldr	r1, [sp, #12]
 8012d56:	f000 f956 	bl	8013006 <memmove>
 8012d5a:	68a3      	ldr	r3, [r4, #8]
 8012d5c:	6822      	ldr	r2, [r4, #0]
 8012d5e:	1b9b      	subs	r3, r3, r6
 8012d60:	1992      	adds	r2, r2, r6
 8012d62:	0037      	movs	r7, r6
 8012d64:	60a3      	str	r3, [r4, #8]
 8012d66:	6022      	str	r2, [r4, #0]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d1cf      	bne.n	8012d0c <__sfvwrite_r+0x1d4>
 8012d6c:	0021      	movs	r1, r4
 8012d6e:	9802      	ldr	r0, [sp, #8]
 8012d70:	f7fd fcc0 	bl	80106f4 <_fflush_r>
 8012d74:	2800      	cmp	r0, #0
 8012d76:	d0c9      	beq.n	8012d0c <__sfvwrite_r+0x1d4>
 8012d78:	e79f      	b.n	8012cba <__sfvwrite_r+0x182>
 8012d7a:	4b1c      	ldr	r3, [pc, #112]	; (8012dec <__sfvwrite_r+0x2b4>)
 8012d7c:	0028      	movs	r0, r5
 8012d7e:	429d      	cmp	r5, r3
 8012d80:	d900      	bls.n	8012d84 <__sfvwrite_r+0x24c>
 8012d82:	481b      	ldr	r0, [pc, #108]	; (8012df0 <__sfvwrite_r+0x2b8>)
 8012d84:	0039      	movs	r1, r7
 8012d86:	f7ed fa63 	bl	8000250 <__divsi3>
 8012d8a:	003b      	movs	r3, r7
 8012d8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012d8e:	4343      	muls	r3, r0
 8012d90:	9a03      	ldr	r2, [sp, #12]
 8012d92:	69e1      	ldr	r1, [r4, #28]
 8012d94:	9802      	ldr	r0, [sp, #8]
 8012d96:	47b0      	blx	r6
 8012d98:	1e07      	subs	r7, r0, #0
 8012d9a:	dcb7      	bgt.n	8012d0c <__sfvwrite_r+0x1d4>
 8012d9c:	e78d      	b.n	8012cba <__sfvwrite_r+0x182>
 8012d9e:	9b01      	ldr	r3, [sp, #4]
 8012da0:	2000      	movs	r0, #0
 8012da2:	681e      	ldr	r6, [r3, #0]
 8012da4:	685b      	ldr	r3, [r3, #4]
 8012da6:	9303      	str	r3, [sp, #12]
 8012da8:	9b01      	ldr	r3, [sp, #4]
 8012daa:	3308      	adds	r3, #8
 8012dac:	9301      	str	r3, [sp, #4]
 8012dae:	e6e6      	b.n	8012b7e <__sfvwrite_r+0x46>
 8012db0:	9a05      	ldr	r2, [sp, #20]
 8012db2:	4293      	cmp	r3, r2
 8012db4:	dc08      	bgt.n	8012dc8 <__sfvwrite_r+0x290>
 8012db6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8012db8:	0032      	movs	r2, r6
 8012dba:	69e1      	ldr	r1, [r4, #28]
 8012dbc:	9802      	ldr	r0, [sp, #8]
 8012dbe:	47a8      	blx	r5
 8012dc0:	1e05      	subs	r5, r0, #0
 8012dc2:	dd00      	ble.n	8012dc6 <__sfvwrite_r+0x28e>
 8012dc4:	e70a      	b.n	8012bdc <__sfvwrite_r+0xa4>
 8012dc6:	e778      	b.n	8012cba <__sfvwrite_r+0x182>
 8012dc8:	9a05      	ldr	r2, [sp, #20]
 8012dca:	0031      	movs	r1, r6
 8012dcc:	f000 f91b 	bl	8013006 <memmove>
 8012dd0:	9a05      	ldr	r2, [sp, #20]
 8012dd2:	68a3      	ldr	r3, [r4, #8]
 8012dd4:	0015      	movs	r5, r2
 8012dd6:	1a9b      	subs	r3, r3, r2
 8012dd8:	60a3      	str	r3, [r4, #8]
 8012dda:	6823      	ldr	r3, [r4, #0]
 8012ddc:	189b      	adds	r3, r3, r2
 8012dde:	6023      	str	r3, [r4, #0]
 8012de0:	e6fc      	b.n	8012bdc <__sfvwrite_r+0xa4>
 8012de2:	46c0      	nop			; (mov r8, r8)
 8012de4:	7ffffc00 	.word	0x7ffffc00
 8012de8:	fffffb7f 	.word	0xfffffb7f
 8012dec:	7ffffffe 	.word	0x7ffffffe
 8012df0:	7fffffff 	.word	0x7fffffff

08012df4 <__submore>:
 8012df4:	000b      	movs	r3, r1
 8012df6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012df8:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8012dfa:	3340      	adds	r3, #64	; 0x40
 8012dfc:	000c      	movs	r4, r1
 8012dfe:	429d      	cmp	r5, r3
 8012e00:	d11c      	bne.n	8012e3c <__submore+0x48>
 8012e02:	2680      	movs	r6, #128	; 0x80
 8012e04:	00f6      	lsls	r6, r6, #3
 8012e06:	0031      	movs	r1, r6
 8012e08:	f7f8 faa8 	bl	800b35c <_malloc_r>
 8012e0c:	2800      	cmp	r0, #0
 8012e0e:	d102      	bne.n	8012e16 <__submore+0x22>
 8012e10:	2001      	movs	r0, #1
 8012e12:	4240      	negs	r0, r0
 8012e14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012e16:	0023      	movs	r3, r4
 8012e18:	6320      	str	r0, [r4, #48]	; 0x30
 8012e1a:	6366      	str	r6, [r4, #52]	; 0x34
 8012e1c:	3342      	adds	r3, #66	; 0x42
 8012e1e:	781a      	ldrb	r2, [r3, #0]
 8012e20:	4b10      	ldr	r3, [pc, #64]	; (8012e64 <__submore+0x70>)
 8012e22:	54c2      	strb	r2, [r0, r3]
 8012e24:	0023      	movs	r3, r4
 8012e26:	3341      	adds	r3, #65	; 0x41
 8012e28:	781a      	ldrb	r2, [r3, #0]
 8012e2a:	4b0f      	ldr	r3, [pc, #60]	; (8012e68 <__submore+0x74>)
 8012e2c:	54c2      	strb	r2, [r0, r3]
 8012e2e:	782a      	ldrb	r2, [r5, #0]
 8012e30:	4b0e      	ldr	r3, [pc, #56]	; (8012e6c <__submore+0x78>)
 8012e32:	54c2      	strb	r2, [r0, r3]
 8012e34:	18c0      	adds	r0, r0, r3
 8012e36:	6020      	str	r0, [r4, #0]
 8012e38:	2000      	movs	r0, #0
 8012e3a:	e7eb      	b.n	8012e14 <__submore+0x20>
 8012e3c:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8012e3e:	0029      	movs	r1, r5
 8012e40:	0073      	lsls	r3, r6, #1
 8012e42:	001a      	movs	r2, r3
 8012e44:	9301      	str	r3, [sp, #4]
 8012e46:	f7fe fc47 	bl	80116d8 <_realloc_r>
 8012e4a:	1e05      	subs	r5, r0, #0
 8012e4c:	d0e0      	beq.n	8012e10 <__submore+0x1c>
 8012e4e:	1987      	adds	r7, r0, r6
 8012e50:	0001      	movs	r1, r0
 8012e52:	0032      	movs	r2, r6
 8012e54:	0038      	movs	r0, r7
 8012e56:	f7f9 fde6 	bl	800ca26 <memcpy>
 8012e5a:	9b01      	ldr	r3, [sp, #4]
 8012e5c:	6027      	str	r7, [r4, #0]
 8012e5e:	6325      	str	r5, [r4, #48]	; 0x30
 8012e60:	6363      	str	r3, [r4, #52]	; 0x34
 8012e62:	e7e9      	b.n	8012e38 <__submore+0x44>
 8012e64:	000003ff 	.word	0x000003ff
 8012e68:	000003fe 	.word	0x000003fe
 8012e6c:	000003fd 	.word	0x000003fd

08012e70 <__swsetup_r>:
 8012e70:	4b30      	ldr	r3, [pc, #192]	; (8012f34 <__swsetup_r+0xc4>)
 8012e72:	b570      	push	{r4, r5, r6, lr}
 8012e74:	0005      	movs	r5, r0
 8012e76:	6818      	ldr	r0, [r3, #0]
 8012e78:	000c      	movs	r4, r1
 8012e7a:	2800      	cmp	r0, #0
 8012e7c:	d004      	beq.n	8012e88 <__swsetup_r+0x18>
 8012e7e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d101      	bne.n	8012e88 <__swsetup_r+0x18>
 8012e84:	f7f9 fbec 	bl	800c660 <__sinit>
 8012e88:	230c      	movs	r3, #12
 8012e8a:	5ee2      	ldrsh	r2, [r4, r3]
 8012e8c:	b293      	uxth	r3, r2
 8012e8e:	0711      	lsls	r1, r2, #28
 8012e90:	d423      	bmi.n	8012eda <__swsetup_r+0x6a>
 8012e92:	06d9      	lsls	r1, r3, #27
 8012e94:	d407      	bmi.n	8012ea6 <__swsetup_r+0x36>
 8012e96:	2309      	movs	r3, #9
 8012e98:	2001      	movs	r0, #1
 8012e9a:	602b      	str	r3, [r5, #0]
 8012e9c:	3337      	adds	r3, #55	; 0x37
 8012e9e:	4313      	orrs	r3, r2
 8012ea0:	81a3      	strh	r3, [r4, #12]
 8012ea2:	4240      	negs	r0, r0
 8012ea4:	bd70      	pop	{r4, r5, r6, pc}
 8012ea6:	075b      	lsls	r3, r3, #29
 8012ea8:	d513      	bpl.n	8012ed2 <__swsetup_r+0x62>
 8012eaa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012eac:	2900      	cmp	r1, #0
 8012eae:	d008      	beq.n	8012ec2 <__swsetup_r+0x52>
 8012eb0:	0023      	movs	r3, r4
 8012eb2:	3340      	adds	r3, #64	; 0x40
 8012eb4:	4299      	cmp	r1, r3
 8012eb6:	d002      	beq.n	8012ebe <__swsetup_r+0x4e>
 8012eb8:	0028      	movs	r0, r5
 8012eba:	f7f9 fe2f 	bl	800cb1c <_free_r>
 8012ebe:	2300      	movs	r3, #0
 8012ec0:	6323      	str	r3, [r4, #48]	; 0x30
 8012ec2:	2224      	movs	r2, #36	; 0x24
 8012ec4:	89a3      	ldrh	r3, [r4, #12]
 8012ec6:	4393      	bics	r3, r2
 8012ec8:	81a3      	strh	r3, [r4, #12]
 8012eca:	2300      	movs	r3, #0
 8012ecc:	6063      	str	r3, [r4, #4]
 8012ece:	6923      	ldr	r3, [r4, #16]
 8012ed0:	6023      	str	r3, [r4, #0]
 8012ed2:	2308      	movs	r3, #8
 8012ed4:	89a2      	ldrh	r2, [r4, #12]
 8012ed6:	4313      	orrs	r3, r2
 8012ed8:	81a3      	strh	r3, [r4, #12]
 8012eda:	6923      	ldr	r3, [r4, #16]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d10b      	bne.n	8012ef8 <__swsetup_r+0x88>
 8012ee0:	21a0      	movs	r1, #160	; 0xa0
 8012ee2:	2280      	movs	r2, #128	; 0x80
 8012ee4:	89a3      	ldrh	r3, [r4, #12]
 8012ee6:	0089      	lsls	r1, r1, #2
 8012ee8:	0092      	lsls	r2, r2, #2
 8012eea:	400b      	ands	r3, r1
 8012eec:	4293      	cmp	r3, r2
 8012eee:	d003      	beq.n	8012ef8 <__swsetup_r+0x88>
 8012ef0:	0021      	movs	r1, r4
 8012ef2:	0028      	movs	r0, r5
 8012ef4:	f000 f8e8 	bl	80130c8 <__smakebuf_r>
 8012ef8:	220c      	movs	r2, #12
 8012efa:	5ea3      	ldrsh	r3, [r4, r2]
 8012efc:	2001      	movs	r0, #1
 8012efe:	001a      	movs	r2, r3
 8012f00:	b299      	uxth	r1, r3
 8012f02:	4002      	ands	r2, r0
 8012f04:	4203      	tst	r3, r0
 8012f06:	d00f      	beq.n	8012f28 <__swsetup_r+0xb8>
 8012f08:	2200      	movs	r2, #0
 8012f0a:	60a2      	str	r2, [r4, #8]
 8012f0c:	6962      	ldr	r2, [r4, #20]
 8012f0e:	4252      	negs	r2, r2
 8012f10:	61a2      	str	r2, [r4, #24]
 8012f12:	2000      	movs	r0, #0
 8012f14:	6922      	ldr	r2, [r4, #16]
 8012f16:	4282      	cmp	r2, r0
 8012f18:	d1c4      	bne.n	8012ea4 <__swsetup_r+0x34>
 8012f1a:	0609      	lsls	r1, r1, #24
 8012f1c:	d5c2      	bpl.n	8012ea4 <__swsetup_r+0x34>
 8012f1e:	2240      	movs	r2, #64	; 0x40
 8012f20:	4313      	orrs	r3, r2
 8012f22:	81a3      	strh	r3, [r4, #12]
 8012f24:	3801      	subs	r0, #1
 8012f26:	e7bd      	b.n	8012ea4 <__swsetup_r+0x34>
 8012f28:	0788      	lsls	r0, r1, #30
 8012f2a:	d400      	bmi.n	8012f2e <__swsetup_r+0xbe>
 8012f2c:	6962      	ldr	r2, [r4, #20]
 8012f2e:	60a2      	str	r2, [r4, #8]
 8012f30:	e7ef      	b.n	8012f12 <__swsetup_r+0xa2>
 8012f32:	46c0      	nop			; (mov r8, r8)
 8012f34:	200006d8 	.word	0x200006d8

08012f38 <__fputwc>:
 8012f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f3a:	b085      	sub	sp, #20
 8012f3c:	000e      	movs	r6, r1
 8012f3e:	0015      	movs	r5, r2
 8012f40:	9001      	str	r0, [sp, #4]
 8012f42:	f7f9 fccf 	bl	800c8e4 <__locale_mb_cur_max>
 8012f46:	0004      	movs	r4, r0
 8012f48:	2801      	cmp	r0, #1
 8012f4a:	d119      	bne.n	8012f80 <__fputwc+0x48>
 8012f4c:	1e73      	subs	r3, r6, #1
 8012f4e:	2bfe      	cmp	r3, #254	; 0xfe
 8012f50:	d816      	bhi.n	8012f80 <__fputwc+0x48>
 8012f52:	ab02      	add	r3, sp, #8
 8012f54:	711e      	strb	r6, [r3, #4]
 8012f56:	2700      	movs	r7, #0
 8012f58:	42a7      	cmp	r7, r4
 8012f5a:	d020      	beq.n	8012f9e <__fputwc+0x66>
 8012f5c:	ab03      	add	r3, sp, #12
 8012f5e:	5dd9      	ldrb	r1, [r3, r7]
 8012f60:	68ab      	ldr	r3, [r5, #8]
 8012f62:	3b01      	subs	r3, #1
 8012f64:	60ab      	str	r3, [r5, #8]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	da04      	bge.n	8012f74 <__fputwc+0x3c>
 8012f6a:	69aa      	ldr	r2, [r5, #24]
 8012f6c:	4293      	cmp	r3, r2
 8012f6e:	db19      	blt.n	8012fa4 <__fputwc+0x6c>
 8012f70:	290a      	cmp	r1, #10
 8012f72:	d017      	beq.n	8012fa4 <__fputwc+0x6c>
 8012f74:	682b      	ldr	r3, [r5, #0]
 8012f76:	1c5a      	adds	r2, r3, #1
 8012f78:	602a      	str	r2, [r5, #0]
 8012f7a:	7019      	strb	r1, [r3, #0]
 8012f7c:	3701      	adds	r7, #1
 8012f7e:	e7eb      	b.n	8012f58 <__fputwc+0x20>
 8012f80:	002b      	movs	r3, r5
 8012f82:	0032      	movs	r2, r6
 8012f84:	9801      	ldr	r0, [sp, #4]
 8012f86:	335c      	adds	r3, #92	; 0x5c
 8012f88:	a903      	add	r1, sp, #12
 8012f8a:	f000 f857 	bl	801303c <_wcrtomb_r>
 8012f8e:	0004      	movs	r4, r0
 8012f90:	1c43      	adds	r3, r0, #1
 8012f92:	d1e0      	bne.n	8012f56 <__fputwc+0x1e>
 8012f94:	2340      	movs	r3, #64	; 0x40
 8012f96:	0006      	movs	r6, r0
 8012f98:	89aa      	ldrh	r2, [r5, #12]
 8012f9a:	4313      	orrs	r3, r2
 8012f9c:	81ab      	strh	r3, [r5, #12]
 8012f9e:	0030      	movs	r0, r6
 8012fa0:	b005      	add	sp, #20
 8012fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012fa4:	002a      	movs	r2, r5
 8012fa6:	9801      	ldr	r0, [sp, #4]
 8012fa8:	f000 f8cc 	bl	8013144 <__swbuf_r>
 8012fac:	1c43      	adds	r3, r0, #1
 8012fae:	d1e5      	bne.n	8012f7c <__fputwc+0x44>
 8012fb0:	0006      	movs	r6, r0
 8012fb2:	e7f4      	b.n	8012f9e <__fputwc+0x66>

08012fb4 <_fputwc_r>:
 8012fb4:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8012fb6:	b570      	push	{r4, r5, r6, lr}
 8012fb8:	0005      	movs	r5, r0
 8012fba:	000e      	movs	r6, r1
 8012fbc:	0014      	movs	r4, r2
 8012fbe:	07db      	lsls	r3, r3, #31
 8012fc0:	d405      	bmi.n	8012fce <_fputwc_r+0x1a>
 8012fc2:	8993      	ldrh	r3, [r2, #12]
 8012fc4:	059b      	lsls	r3, r3, #22
 8012fc6:	d402      	bmi.n	8012fce <_fputwc_r+0x1a>
 8012fc8:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8012fca:	f7f9 fd1f 	bl	800ca0c <__retarget_lock_acquire_recursive>
 8012fce:	230c      	movs	r3, #12
 8012fd0:	5ee2      	ldrsh	r2, [r4, r3]
 8012fd2:	2380      	movs	r3, #128	; 0x80
 8012fd4:	019b      	lsls	r3, r3, #6
 8012fd6:	421a      	tst	r2, r3
 8012fd8:	d104      	bne.n	8012fe4 <_fputwc_r+0x30>
 8012fda:	431a      	orrs	r2, r3
 8012fdc:	81a2      	strh	r2, [r4, #12]
 8012fde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012fe0:	4313      	orrs	r3, r2
 8012fe2:	6663      	str	r3, [r4, #100]	; 0x64
 8012fe4:	0028      	movs	r0, r5
 8012fe6:	0022      	movs	r2, r4
 8012fe8:	0031      	movs	r1, r6
 8012fea:	f7ff ffa5 	bl	8012f38 <__fputwc>
 8012fee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012ff0:	0005      	movs	r5, r0
 8012ff2:	07db      	lsls	r3, r3, #31
 8012ff4:	d405      	bmi.n	8013002 <_fputwc_r+0x4e>
 8012ff6:	89a3      	ldrh	r3, [r4, #12]
 8012ff8:	059b      	lsls	r3, r3, #22
 8012ffa:	d402      	bmi.n	8013002 <_fputwc_r+0x4e>
 8012ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012ffe:	f7f9 fd06 	bl	800ca0e <__retarget_lock_release_recursive>
 8013002:	0028      	movs	r0, r5
 8013004:	bd70      	pop	{r4, r5, r6, pc}

08013006 <memmove>:
 8013006:	b510      	push	{r4, lr}
 8013008:	4288      	cmp	r0, r1
 801300a:	d902      	bls.n	8013012 <memmove+0xc>
 801300c:	188b      	adds	r3, r1, r2
 801300e:	4298      	cmp	r0, r3
 8013010:	d303      	bcc.n	801301a <memmove+0x14>
 8013012:	2300      	movs	r3, #0
 8013014:	e007      	b.n	8013026 <memmove+0x20>
 8013016:	5c8b      	ldrb	r3, [r1, r2]
 8013018:	5483      	strb	r3, [r0, r2]
 801301a:	3a01      	subs	r2, #1
 801301c:	d2fb      	bcs.n	8013016 <memmove+0x10>
 801301e:	bd10      	pop	{r4, pc}
 8013020:	5ccc      	ldrb	r4, [r1, r3]
 8013022:	54c4      	strb	r4, [r0, r3]
 8013024:	3301      	adds	r3, #1
 8013026:	429a      	cmp	r2, r3
 8013028:	d1fa      	bne.n	8013020 <memmove+0x1a>
 801302a:	e7f8      	b.n	801301e <memmove+0x18>

0801302c <abort>:
 801302c:	2006      	movs	r0, #6
 801302e:	b510      	push	{r4, lr}
 8013030:	f000 f906 	bl	8013240 <raise>
 8013034:	2001      	movs	r0, #1
 8013036:	f7f0 fc5b 	bl	80038f0 <_exit>
	...

0801303c <_wcrtomb_r>:
 801303c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801303e:	001d      	movs	r5, r3
 8013040:	4b09      	ldr	r3, [pc, #36]	; (8013068 <_wcrtomb_r+0x2c>)
 8013042:	0004      	movs	r4, r0
 8013044:	33e0      	adds	r3, #224	; 0xe0
 8013046:	681e      	ldr	r6, [r3, #0]
 8013048:	002b      	movs	r3, r5
 801304a:	2900      	cmp	r1, #0
 801304c:	d101      	bne.n	8013052 <_wcrtomb_r+0x16>
 801304e:	000a      	movs	r2, r1
 8013050:	a901      	add	r1, sp, #4
 8013052:	0020      	movs	r0, r4
 8013054:	47b0      	blx	r6
 8013056:	1c43      	adds	r3, r0, #1
 8013058:	d103      	bne.n	8013062 <_wcrtomb_r+0x26>
 801305a:	2300      	movs	r3, #0
 801305c:	602b      	str	r3, [r5, #0]
 801305e:	338a      	adds	r3, #138	; 0x8a
 8013060:	6023      	str	r3, [r4, #0]
 8013062:	b004      	add	sp, #16
 8013064:	bd70      	pop	{r4, r5, r6, pc}
 8013066:	46c0      	nop			; (mov r8, r8)
 8013068:	2000044c 	.word	0x2000044c

0801306c <__swhatbuf_r>:
 801306c:	b570      	push	{r4, r5, r6, lr}
 801306e:	000e      	movs	r6, r1
 8013070:	001d      	movs	r5, r3
 8013072:	230e      	movs	r3, #14
 8013074:	5ec9      	ldrsh	r1, [r1, r3]
 8013076:	0014      	movs	r4, r2
 8013078:	b096      	sub	sp, #88	; 0x58
 801307a:	2900      	cmp	r1, #0
 801307c:	da09      	bge.n	8013092 <__swhatbuf_r+0x26>
 801307e:	89b2      	ldrh	r2, [r6, #12]
 8013080:	2380      	movs	r3, #128	; 0x80
 8013082:	0011      	movs	r1, r2
 8013084:	4019      	ands	r1, r3
 8013086:	421a      	tst	r2, r3
 8013088:	d018      	beq.n	80130bc <__swhatbuf_r+0x50>
 801308a:	2100      	movs	r1, #0
 801308c:	3b40      	subs	r3, #64	; 0x40
 801308e:	0008      	movs	r0, r1
 8013090:	e010      	b.n	80130b4 <__swhatbuf_r+0x48>
 8013092:	466a      	mov	r2, sp
 8013094:	f000 f8de 	bl	8013254 <_fstat_r>
 8013098:	2800      	cmp	r0, #0
 801309a:	dbf0      	blt.n	801307e <__swhatbuf_r+0x12>
 801309c:	23f0      	movs	r3, #240	; 0xf0
 801309e:	9901      	ldr	r1, [sp, #4]
 80130a0:	021b      	lsls	r3, r3, #8
 80130a2:	4019      	ands	r1, r3
 80130a4:	4b07      	ldr	r3, [pc, #28]	; (80130c4 <__swhatbuf_r+0x58>)
 80130a6:	2080      	movs	r0, #128	; 0x80
 80130a8:	18c9      	adds	r1, r1, r3
 80130aa:	424b      	negs	r3, r1
 80130ac:	4159      	adcs	r1, r3
 80130ae:	2380      	movs	r3, #128	; 0x80
 80130b0:	0100      	lsls	r0, r0, #4
 80130b2:	00db      	lsls	r3, r3, #3
 80130b4:	6029      	str	r1, [r5, #0]
 80130b6:	6023      	str	r3, [r4, #0]
 80130b8:	b016      	add	sp, #88	; 0x58
 80130ba:	bd70      	pop	{r4, r5, r6, pc}
 80130bc:	2380      	movs	r3, #128	; 0x80
 80130be:	00db      	lsls	r3, r3, #3
 80130c0:	e7e5      	b.n	801308e <__swhatbuf_r+0x22>
 80130c2:	46c0      	nop			; (mov r8, r8)
 80130c4:	ffffe000 	.word	0xffffe000

080130c8 <__smakebuf_r>:
 80130c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80130ca:	2602      	movs	r6, #2
 80130cc:	898b      	ldrh	r3, [r1, #12]
 80130ce:	0005      	movs	r5, r0
 80130d0:	000c      	movs	r4, r1
 80130d2:	4233      	tst	r3, r6
 80130d4:	d006      	beq.n	80130e4 <__smakebuf_r+0x1c>
 80130d6:	0023      	movs	r3, r4
 80130d8:	3343      	adds	r3, #67	; 0x43
 80130da:	6023      	str	r3, [r4, #0]
 80130dc:	6123      	str	r3, [r4, #16]
 80130de:	2301      	movs	r3, #1
 80130e0:	6163      	str	r3, [r4, #20]
 80130e2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80130e4:	466a      	mov	r2, sp
 80130e6:	ab01      	add	r3, sp, #4
 80130e8:	f7ff ffc0 	bl	801306c <__swhatbuf_r>
 80130ec:	9900      	ldr	r1, [sp, #0]
 80130ee:	0007      	movs	r7, r0
 80130f0:	0028      	movs	r0, r5
 80130f2:	f7f8 f933 	bl	800b35c <_malloc_r>
 80130f6:	2800      	cmp	r0, #0
 80130f8:	d108      	bne.n	801310c <__smakebuf_r+0x44>
 80130fa:	220c      	movs	r2, #12
 80130fc:	5ea3      	ldrsh	r3, [r4, r2]
 80130fe:	059a      	lsls	r2, r3, #22
 8013100:	d4ef      	bmi.n	80130e2 <__smakebuf_r+0x1a>
 8013102:	2203      	movs	r2, #3
 8013104:	4393      	bics	r3, r2
 8013106:	431e      	orrs	r6, r3
 8013108:	81a6      	strh	r6, [r4, #12]
 801310a:	e7e4      	b.n	80130d6 <__smakebuf_r+0xe>
 801310c:	2380      	movs	r3, #128	; 0x80
 801310e:	89a2      	ldrh	r2, [r4, #12]
 8013110:	6020      	str	r0, [r4, #0]
 8013112:	4313      	orrs	r3, r2
 8013114:	81a3      	strh	r3, [r4, #12]
 8013116:	9b00      	ldr	r3, [sp, #0]
 8013118:	6120      	str	r0, [r4, #16]
 801311a:	6163      	str	r3, [r4, #20]
 801311c:	9b01      	ldr	r3, [sp, #4]
 801311e:	2b00      	cmp	r3, #0
 8013120:	d00c      	beq.n	801313c <__smakebuf_r+0x74>
 8013122:	0028      	movs	r0, r5
 8013124:	230e      	movs	r3, #14
 8013126:	5ee1      	ldrsh	r1, [r4, r3]
 8013128:	f000 f8a6 	bl	8013278 <_isatty_r>
 801312c:	2800      	cmp	r0, #0
 801312e:	d005      	beq.n	801313c <__smakebuf_r+0x74>
 8013130:	2303      	movs	r3, #3
 8013132:	89a2      	ldrh	r2, [r4, #12]
 8013134:	439a      	bics	r2, r3
 8013136:	3b02      	subs	r3, #2
 8013138:	4313      	orrs	r3, r2
 801313a:	81a3      	strh	r3, [r4, #12]
 801313c:	89a3      	ldrh	r3, [r4, #12]
 801313e:	433b      	orrs	r3, r7
 8013140:	81a3      	strh	r3, [r4, #12]
 8013142:	e7ce      	b.n	80130e2 <__smakebuf_r+0x1a>

08013144 <__swbuf_r>:
 8013144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013146:	0006      	movs	r6, r0
 8013148:	000d      	movs	r5, r1
 801314a:	0014      	movs	r4, r2
 801314c:	2800      	cmp	r0, #0
 801314e:	d004      	beq.n	801315a <__swbuf_r+0x16>
 8013150:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013152:	2b00      	cmp	r3, #0
 8013154:	d101      	bne.n	801315a <__swbuf_r+0x16>
 8013156:	f7f9 fa83 	bl	800c660 <__sinit>
 801315a:	69a3      	ldr	r3, [r4, #24]
 801315c:	60a3      	str	r3, [r4, #8]
 801315e:	89a3      	ldrh	r3, [r4, #12]
 8013160:	071b      	lsls	r3, r3, #28
 8013162:	d52e      	bpl.n	80131c2 <__swbuf_r+0x7e>
 8013164:	6923      	ldr	r3, [r4, #16]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d02b      	beq.n	80131c2 <__swbuf_r+0x7e>
 801316a:	230c      	movs	r3, #12
 801316c:	5ee2      	ldrsh	r2, [r4, r3]
 801316e:	2380      	movs	r3, #128	; 0x80
 8013170:	019b      	lsls	r3, r3, #6
 8013172:	b2ef      	uxtb	r7, r5
 8013174:	b2ed      	uxtb	r5, r5
 8013176:	421a      	tst	r2, r3
 8013178:	d02c      	beq.n	80131d4 <__swbuf_r+0x90>
 801317a:	6923      	ldr	r3, [r4, #16]
 801317c:	6820      	ldr	r0, [r4, #0]
 801317e:	1ac0      	subs	r0, r0, r3
 8013180:	6963      	ldr	r3, [r4, #20]
 8013182:	4283      	cmp	r3, r0
 8013184:	dc05      	bgt.n	8013192 <__swbuf_r+0x4e>
 8013186:	0021      	movs	r1, r4
 8013188:	0030      	movs	r0, r6
 801318a:	f7fd fab3 	bl	80106f4 <_fflush_r>
 801318e:	2800      	cmp	r0, #0
 8013190:	d11d      	bne.n	80131ce <__swbuf_r+0x8a>
 8013192:	68a3      	ldr	r3, [r4, #8]
 8013194:	3001      	adds	r0, #1
 8013196:	3b01      	subs	r3, #1
 8013198:	60a3      	str	r3, [r4, #8]
 801319a:	6823      	ldr	r3, [r4, #0]
 801319c:	1c5a      	adds	r2, r3, #1
 801319e:	6022      	str	r2, [r4, #0]
 80131a0:	701f      	strb	r7, [r3, #0]
 80131a2:	6963      	ldr	r3, [r4, #20]
 80131a4:	4283      	cmp	r3, r0
 80131a6:	d004      	beq.n	80131b2 <__swbuf_r+0x6e>
 80131a8:	89a3      	ldrh	r3, [r4, #12]
 80131aa:	07db      	lsls	r3, r3, #31
 80131ac:	d507      	bpl.n	80131be <__swbuf_r+0x7a>
 80131ae:	2d0a      	cmp	r5, #10
 80131b0:	d105      	bne.n	80131be <__swbuf_r+0x7a>
 80131b2:	0021      	movs	r1, r4
 80131b4:	0030      	movs	r0, r6
 80131b6:	f7fd fa9d 	bl	80106f4 <_fflush_r>
 80131ba:	2800      	cmp	r0, #0
 80131bc:	d107      	bne.n	80131ce <__swbuf_r+0x8a>
 80131be:	0028      	movs	r0, r5
 80131c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131c2:	0021      	movs	r1, r4
 80131c4:	0030      	movs	r0, r6
 80131c6:	f7ff fe53 	bl	8012e70 <__swsetup_r>
 80131ca:	2800      	cmp	r0, #0
 80131cc:	d0cd      	beq.n	801316a <__swbuf_r+0x26>
 80131ce:	2501      	movs	r5, #1
 80131d0:	426d      	negs	r5, r5
 80131d2:	e7f4      	b.n	80131be <__swbuf_r+0x7a>
 80131d4:	4313      	orrs	r3, r2
 80131d6:	81a3      	strh	r3, [r4, #12]
 80131d8:	4a02      	ldr	r2, [pc, #8]	; (80131e4 <__swbuf_r+0xa0>)
 80131da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80131dc:	4013      	ands	r3, r2
 80131de:	6663      	str	r3, [r4, #100]	; 0x64
 80131e0:	e7cb      	b.n	801317a <__swbuf_r+0x36>
 80131e2:	46c0      	nop			; (mov r8, r8)
 80131e4:	ffffdfff 	.word	0xffffdfff

080131e8 <_raise_r>:
 80131e8:	b570      	push	{r4, r5, r6, lr}
 80131ea:	0004      	movs	r4, r0
 80131ec:	000d      	movs	r5, r1
 80131ee:	291f      	cmp	r1, #31
 80131f0:	d904      	bls.n	80131fc <_raise_r+0x14>
 80131f2:	2316      	movs	r3, #22
 80131f4:	6003      	str	r3, [r0, #0]
 80131f6:	2001      	movs	r0, #1
 80131f8:	4240      	negs	r0, r0
 80131fa:	bd70      	pop	{r4, r5, r6, pc}
 80131fc:	0003      	movs	r3, r0
 80131fe:	33fc      	adds	r3, #252	; 0xfc
 8013200:	69db      	ldr	r3, [r3, #28]
 8013202:	2b00      	cmp	r3, #0
 8013204:	d004      	beq.n	8013210 <_raise_r+0x28>
 8013206:	008a      	lsls	r2, r1, #2
 8013208:	189b      	adds	r3, r3, r2
 801320a:	681a      	ldr	r2, [r3, #0]
 801320c:	2a00      	cmp	r2, #0
 801320e:	d108      	bne.n	8013222 <_raise_r+0x3a>
 8013210:	0020      	movs	r0, r4
 8013212:	f000 f855 	bl	80132c0 <_getpid_r>
 8013216:	002a      	movs	r2, r5
 8013218:	0001      	movs	r1, r0
 801321a:	0020      	movs	r0, r4
 801321c:	f000 f83e 	bl	801329c <_kill_r>
 8013220:	e7eb      	b.n	80131fa <_raise_r+0x12>
 8013222:	2000      	movs	r0, #0
 8013224:	2a01      	cmp	r2, #1
 8013226:	d0e8      	beq.n	80131fa <_raise_r+0x12>
 8013228:	1c51      	adds	r1, r2, #1
 801322a:	d103      	bne.n	8013234 <_raise_r+0x4c>
 801322c:	2316      	movs	r3, #22
 801322e:	3001      	adds	r0, #1
 8013230:	6023      	str	r3, [r4, #0]
 8013232:	e7e2      	b.n	80131fa <_raise_r+0x12>
 8013234:	2400      	movs	r4, #0
 8013236:	0028      	movs	r0, r5
 8013238:	601c      	str	r4, [r3, #0]
 801323a:	4790      	blx	r2
 801323c:	0020      	movs	r0, r4
 801323e:	e7dc      	b.n	80131fa <_raise_r+0x12>

08013240 <raise>:
 8013240:	b510      	push	{r4, lr}
 8013242:	4b03      	ldr	r3, [pc, #12]	; (8013250 <raise+0x10>)
 8013244:	0001      	movs	r1, r0
 8013246:	6818      	ldr	r0, [r3, #0]
 8013248:	f7ff ffce 	bl	80131e8 <_raise_r>
 801324c:	bd10      	pop	{r4, pc}
 801324e:	46c0      	nop			; (mov r8, r8)
 8013250:	200006d8 	.word	0x200006d8

08013254 <_fstat_r>:
 8013254:	2300      	movs	r3, #0
 8013256:	b570      	push	{r4, r5, r6, lr}
 8013258:	4d06      	ldr	r5, [pc, #24]	; (8013274 <_fstat_r+0x20>)
 801325a:	0004      	movs	r4, r0
 801325c:	0008      	movs	r0, r1
 801325e:	0011      	movs	r1, r2
 8013260:	602b      	str	r3, [r5, #0]
 8013262:	f7f0 fb94 	bl	800398e <_fstat>
 8013266:	1c43      	adds	r3, r0, #1
 8013268:	d103      	bne.n	8013272 <_fstat_r+0x1e>
 801326a:	682b      	ldr	r3, [r5, #0]
 801326c:	2b00      	cmp	r3, #0
 801326e:	d000      	beq.n	8013272 <_fstat_r+0x1e>
 8013270:	6023      	str	r3, [r4, #0]
 8013272:	bd70      	pop	{r4, r5, r6, pc}
 8013274:	20000d30 	.word	0x20000d30

08013278 <_isatty_r>:
 8013278:	2300      	movs	r3, #0
 801327a:	b570      	push	{r4, r5, r6, lr}
 801327c:	4d06      	ldr	r5, [pc, #24]	; (8013298 <_isatty_r+0x20>)
 801327e:	0004      	movs	r4, r0
 8013280:	0008      	movs	r0, r1
 8013282:	602b      	str	r3, [r5, #0]
 8013284:	f7f0 fb91 	bl	80039aa <_isatty>
 8013288:	1c43      	adds	r3, r0, #1
 801328a:	d103      	bne.n	8013294 <_isatty_r+0x1c>
 801328c:	682b      	ldr	r3, [r5, #0]
 801328e:	2b00      	cmp	r3, #0
 8013290:	d000      	beq.n	8013294 <_isatty_r+0x1c>
 8013292:	6023      	str	r3, [r4, #0]
 8013294:	bd70      	pop	{r4, r5, r6, pc}
 8013296:	46c0      	nop			; (mov r8, r8)
 8013298:	20000d30 	.word	0x20000d30

0801329c <_kill_r>:
 801329c:	2300      	movs	r3, #0
 801329e:	b570      	push	{r4, r5, r6, lr}
 80132a0:	4d06      	ldr	r5, [pc, #24]	; (80132bc <_kill_r+0x20>)
 80132a2:	0004      	movs	r4, r0
 80132a4:	0008      	movs	r0, r1
 80132a6:	0011      	movs	r1, r2
 80132a8:	602b      	str	r3, [r5, #0]
 80132aa:	f7f0 fb11 	bl	80038d0 <_kill>
 80132ae:	1c43      	adds	r3, r0, #1
 80132b0:	d103      	bne.n	80132ba <_kill_r+0x1e>
 80132b2:	682b      	ldr	r3, [r5, #0]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d000      	beq.n	80132ba <_kill_r+0x1e>
 80132b8:	6023      	str	r3, [r4, #0]
 80132ba:	bd70      	pop	{r4, r5, r6, pc}
 80132bc:	20000d30 	.word	0x20000d30

080132c0 <_getpid_r>:
 80132c0:	b510      	push	{r4, lr}
 80132c2:	f7f0 faff 	bl	80038c4 <_getpid>
 80132c6:	bd10      	pop	{r4, pc}

080132c8 <round>:
 80132c8:	b570      	push	{r4, r5, r6, lr}
 80132ca:	004a      	lsls	r2, r1, #1
 80132cc:	000d      	movs	r5, r1
 80132ce:	4920      	ldr	r1, [pc, #128]	; (8013350 <round+0x88>)
 80132d0:	0d52      	lsrs	r2, r2, #21
 80132d2:	1851      	adds	r1, r2, r1
 80132d4:	0006      	movs	r6, r0
 80132d6:	2913      	cmp	r1, #19
 80132d8:	dc18      	bgt.n	801330c <round+0x44>
 80132da:	2900      	cmp	r1, #0
 80132dc:	da09      	bge.n	80132f2 <round+0x2a>
 80132de:	0feb      	lsrs	r3, r5, #31
 80132e0:	2200      	movs	r2, #0
 80132e2:	07db      	lsls	r3, r3, #31
 80132e4:	3101      	adds	r1, #1
 80132e6:	d101      	bne.n	80132ec <round+0x24>
 80132e8:	491a      	ldr	r1, [pc, #104]	; (8013354 <round+0x8c>)
 80132ea:	430b      	orrs	r3, r1
 80132ec:	0019      	movs	r1, r3
 80132ee:	0010      	movs	r0, r2
 80132f0:	e017      	b.n	8013322 <round+0x5a>
 80132f2:	4c19      	ldr	r4, [pc, #100]	; (8013358 <round+0x90>)
 80132f4:	410c      	asrs	r4, r1
 80132f6:	0022      	movs	r2, r4
 80132f8:	402a      	ands	r2, r5
 80132fa:	4302      	orrs	r2, r0
 80132fc:	d013      	beq.n	8013326 <round+0x5e>
 80132fe:	2280      	movs	r2, #128	; 0x80
 8013300:	0312      	lsls	r2, r2, #12
 8013302:	410a      	asrs	r2, r1
 8013304:	1953      	adds	r3, r2, r5
 8013306:	43a3      	bics	r3, r4
 8013308:	2200      	movs	r2, #0
 801330a:	e7ef      	b.n	80132ec <round+0x24>
 801330c:	2933      	cmp	r1, #51	; 0x33
 801330e:	dd0d      	ble.n	801332c <round+0x64>
 8013310:	2380      	movs	r3, #128	; 0x80
 8013312:	00db      	lsls	r3, r3, #3
 8013314:	4299      	cmp	r1, r3
 8013316:	d106      	bne.n	8013326 <round+0x5e>
 8013318:	0002      	movs	r2, r0
 801331a:	002b      	movs	r3, r5
 801331c:	0029      	movs	r1, r5
 801331e:	f7ed fa4b 	bl	80007b8 <__aeabi_dadd>
 8013322:	0006      	movs	r6, r0
 8013324:	000d      	movs	r5, r1
 8013326:	0030      	movs	r0, r6
 8013328:	0029      	movs	r1, r5
 801332a:	bd70      	pop	{r4, r5, r6, pc}
 801332c:	4c0b      	ldr	r4, [pc, #44]	; (801335c <round+0x94>)
 801332e:	1912      	adds	r2, r2, r4
 8013330:	2401      	movs	r4, #1
 8013332:	4264      	negs	r4, r4
 8013334:	40d4      	lsrs	r4, r2
 8013336:	4220      	tst	r0, r4
 8013338:	d0f5      	beq.n	8013326 <round+0x5e>
 801333a:	2233      	movs	r2, #51	; 0x33
 801333c:	1a51      	subs	r1, r2, r1
 801333e:	3a32      	subs	r2, #50	; 0x32
 8013340:	408a      	lsls	r2, r1
 8013342:	1812      	adds	r2, r2, r0
 8013344:	4282      	cmp	r2, r0
 8013346:	4180      	sbcs	r0, r0
 8013348:	4240      	negs	r0, r0
 801334a:	182b      	adds	r3, r5, r0
 801334c:	43a2      	bics	r2, r4
 801334e:	e7cd      	b.n	80132ec <round+0x24>
 8013350:	fffffc01 	.word	0xfffffc01
 8013354:	3ff00000 	.word	0x3ff00000
 8013358:	000fffff 	.word	0x000fffff
 801335c:	fffffbed 	.word	0xfffffbed

08013360 <_init>:
 8013360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013362:	46c0      	nop			; (mov r8, r8)
 8013364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013366:	bc08      	pop	{r3}
 8013368:	469e      	mov	lr, r3
 801336a:	4770      	bx	lr

0801336c <_fini>:
 801336c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801336e:	46c0      	nop			; (mov r8, r8)
 8013370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013372:	bc08      	pop	{r3}
 8013374:	469e      	mov	lr, r3
 8013376:	4770      	bx	lr
