
TSAT_P_P_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001121c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001cc4  080112d8  080112d8  000212d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012f9c  08012f9c  000306e8  2**0
                  CONTENTS
  4 .ARM          00000008  08012f9c  08012f9c  00022f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012fa4  08012fa4  000306e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08012fa4  08012fa4  00022fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012fac  08012fac  00022fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006e8  20000000  08012fb0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b8  200006e8  08013698  000306e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000fa0  08013698  00030fa0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000306e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030710  2**0
                  CONTENTS, READONLY
 13 .debug_info   000189f6  00000000  00000000  00030753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000358c  00000000  00000000  00049149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016d0  00000000  00000000  0004c6d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000120c  00000000  00000000  0004dda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ce3b  00000000  00000000  0004efb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c5b8  00000000  00000000  0006bdef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000afe33  00000000  00000000  000883a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006e4c  00000000  00000000  001381dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0013f028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006e8 	.word	0x200006e8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080112c0 	.word	0x080112c0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006ec 	.word	0x200006ec
 8000100:	080112c0 	.word	0x080112c0

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b3 	bl	80015a4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f803 	bl	8001454 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a5 	bl	80015a4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f89b 	bl	80015a4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f82b 	bl	80014d8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f821 	bl	80014d8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f8a4 	bl	8000620 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_d2uiz>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	2200      	movs	r2, #0
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__aeabi_d2uiz+0x38>)
 8000546:	0004      	movs	r4, r0
 8000548:	000d      	movs	r5, r1
 800054a:	f7ff ffa1 	bl	8000490 <__aeabi_dcmpge>
 800054e:	2800      	cmp	r0, #0
 8000550:	d104      	bne.n	800055c <__aeabi_d2uiz+0x1c>
 8000552:	0020      	movs	r0, r4
 8000554:	0029      	movs	r1, r5
 8000556:	f001 feeb 	bl	8002330 <__aeabi_d2iz>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__aeabi_d2uiz+0x38>)
 800055e:	2200      	movs	r2, #0
 8000560:	0020      	movs	r0, r4
 8000562:	0029      	movs	r1, r5
 8000564:	f001 fb44 	bl	8001bf0 <__aeabi_dsub>
 8000568:	f001 fee2 	bl	8002330 <__aeabi_d2iz>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	061b      	lsls	r3, r3, #24
 8000570:	469c      	mov	ip, r3
 8000572:	4460      	add	r0, ip
 8000574:	e7f1      	b.n	800055a <__aeabi_d2uiz+0x1a>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	41e00000 	.word	0x41e00000

0800057c <__aeabi_d2lz>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	0005      	movs	r5, r0
 8000580:	000c      	movs	r4, r1
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0028      	movs	r0, r5
 8000588:	0021      	movs	r1, r4
 800058a:	f7ff ff63 	bl	8000454 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x28>
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e1      	adds	r1, r4, r3
 80005aa:	0028      	movs	r0, r5
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x22>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 f853 	bl	800166c <__aeabi_dmul>
 80005c6:	f7ff ffbb 	bl	8000540 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f001 ff16 	bl	80023fc <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 f84a 	bl	800166c <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dsub>
 80005e4:	f7ff ffac 	bl	8000540 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f001 fecf 	bl	800239c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 f833 	bl	800166c <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f001 fef6 	bl	80023fc <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 f8d0 	bl	80007b8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f001 ffa6 	bl	8002590 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f001 ffa1 	bl	8002590 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_dadd>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0004      	movs	r4, r0
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	001f      	movs	r7, r3
 80007c6:	030b      	lsls	r3, r1, #12
 80007c8:	0010      	movs	r0, r2
 80007ca:	004e      	lsls	r6, r1, #1
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0fcd      	lsrs	r5, r1, #31
 80007d0:	0f61      	lsrs	r1, r4, #29
 80007d2:	007a      	lsls	r2, r7, #1
 80007d4:	4319      	orrs	r1, r3
 80007d6:	00e3      	lsls	r3, r4, #3
 80007d8:	033c      	lsls	r4, r7, #12
 80007da:	0fff      	lsrs	r7, r7, #31
 80007dc:	46bc      	mov	ip, r7
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0f47      	lsrs	r7, r0, #29
 80007e2:	4327      	orrs	r7, r4
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	0d52      	lsrs	r2, r2, #21
 80007e8:	00c0      	lsls	r0, r0, #3
 80007ea:	46b9      	mov	r9, r7
 80007ec:	4680      	mov	r8, r0
 80007ee:	1ab7      	subs	r7, r6, r2
 80007f0:	4565      	cmp	r5, ip
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x3e>
 80007f4:	e09b      	b.n	800092e <__aeabi_dadd+0x176>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x44>
 80007fa:	e084      	b.n	8000906 <__aeabi_dadd+0x14e>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x4a>
 8000800:	e0be      	b.n	8000980 <__aeabi_dadd+0x1c8>
 8000802:	4ac8      	ldr	r2, [pc, #800]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000804:	4296      	cmp	r6, r2
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x52>
 8000808:	e124      	b.n	8000a54 <__aeabi_dadd+0x29c>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	464c      	mov	r4, r9
 800080e:	0412      	lsls	r2, r2, #16
 8000810:	4314      	orrs	r4, r2
 8000812:	46a1      	mov	r9, r4
 8000814:	2f38      	cmp	r7, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x62>
 8000818:	e167      	b.n	8000aea <__aeabi_dadd+0x332>
 800081a:	2f1f      	cmp	r7, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x68>
 800081e:	e1d6      	b.n	8000bce <__aeabi_dadd+0x416>
 8000820:	2220      	movs	r2, #32
 8000822:	464c      	mov	r4, r9
 8000824:	1bd2      	subs	r2, r2, r7
 8000826:	4094      	lsls	r4, r2
 8000828:	46a2      	mov	sl, r4
 800082a:	4644      	mov	r4, r8
 800082c:	40fc      	lsrs	r4, r7
 800082e:	0020      	movs	r0, r4
 8000830:	4654      	mov	r4, sl
 8000832:	4304      	orrs	r4, r0
 8000834:	4640      	mov	r0, r8
 8000836:	4090      	lsls	r0, r2
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	464a      	mov	r2, r9
 800083e:	40fa      	lsrs	r2, r7
 8000840:	4304      	orrs	r4, r0
 8000842:	1a89      	subs	r1, r1, r2
 8000844:	1b1c      	subs	r4, r3, r4
 8000846:	42a3      	cmp	r3, r4
 8000848:	4192      	sbcs	r2, r2
 800084a:	4252      	negs	r2, r2
 800084c:	1a8b      	subs	r3, r1, r2
 800084e:	469a      	mov	sl, r3
 8000850:	4653      	mov	r3, sl
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dadd+0xa0>
 8000856:	e0d4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000858:	4653      	mov	r3, sl
 800085a:	025a      	lsls	r2, r3, #9
 800085c:	0a53      	lsrs	r3, r2, #9
 800085e:	469a      	mov	sl, r3
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0xb0>
 8000866:	e104      	b.n	8000a72 <__aeabi_dadd+0x2ba>
 8000868:	4650      	mov	r0, sl
 800086a:	f001 fe73 	bl	8002554 <__clzsi2>
 800086e:	0003      	movs	r3, r0
 8000870:	3b08      	subs	r3, #8
 8000872:	2220      	movs	r2, #32
 8000874:	0020      	movs	r0, r4
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	4651      	mov	r1, sl
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4099      	lsls	r1, r3
 800087e:	0002      	movs	r2, r0
 8000880:	409c      	lsls	r4, r3
 8000882:	430a      	orrs	r2, r1
 8000884:	42b3      	cmp	r3, r6
 8000886:	da00      	bge.n	800088a <__aeabi_dadd+0xd2>
 8000888:	e102      	b.n	8000a90 <__aeabi_dadd+0x2d8>
 800088a:	1b9b      	subs	r3, r3, r6
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	291f      	cmp	r1, #31
 8000890:	dd00      	ble.n	8000894 <__aeabi_dadd+0xdc>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_dadd+0x22c>
 8000894:	2320      	movs	r3, #32
 8000896:	0010      	movs	r0, r2
 8000898:	0026      	movs	r6, r4
 800089a:	1a5b      	subs	r3, r3, r1
 800089c:	409c      	lsls	r4, r3
 800089e:	4098      	lsls	r0, r3
 80008a0:	40ce      	lsrs	r6, r1
 80008a2:	40ca      	lsrs	r2, r1
 80008a4:	1e63      	subs	r3, r4, #1
 80008a6:	419c      	sbcs	r4, r3
 80008a8:	4330      	orrs	r0, r6
 80008aa:	4692      	mov	sl, r2
 80008ac:	2600      	movs	r6, #0
 80008ae:	4304      	orrs	r4, r0
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d009      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008bc:	1d23      	adds	r3, r4, #4
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41a4      	sbcs	r4, r4
 80008c2:	4264      	negs	r4, r4
 80008c4:	44a2      	add	sl, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	4653      	mov	r3, sl
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_dadd+0x118>
 80008ce:	e09b      	b.n	8000a08 <__aeabi_dadd+0x250>
 80008d0:	4b94      	ldr	r3, [pc, #592]	; (8000b24 <__aeabi_dadd+0x36c>)
 80008d2:	3601      	adds	r6, #1
 80008d4:	429e      	cmp	r6, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x122>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x294>
 80008da:	4653      	mov	r3, sl
 80008dc:	4992      	ldr	r1, [pc, #584]	; (8000b28 <__aeabi_dadd+0x370>)
 80008de:	08e4      	lsrs	r4, r4, #3
 80008e0:	400b      	ands	r3, r1
 80008e2:	0019      	movs	r1, r3
 80008e4:	075b      	lsls	r3, r3, #29
 80008e6:	4323      	orrs	r3, r4
 80008e8:	0572      	lsls	r2, r6, #21
 80008ea:	024c      	lsls	r4, r1, #9
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	0512      	lsls	r2, r2, #20
 80008f2:	07ed      	lsls	r5, r5, #31
 80008f4:	4322      	orrs	r2, r4
 80008f6:	432a      	orrs	r2, r5
 80008f8:	0018      	movs	r0, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	bce0      	pop	{r5, r6, r7}
 80008fe:	46ba      	mov	sl, r7
 8000900:	46b1      	mov	r9, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000906:	2f00      	cmp	r7, #0
 8000908:	d048      	beq.n	800099c <__aeabi_dadd+0x1e4>
 800090a:	1b97      	subs	r7, r2, r6
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x15a>
 8000910:	e10e      	b.n	8000b30 <__aeabi_dadd+0x378>
 8000912:	000c      	movs	r4, r1
 8000914:	431c      	orrs	r4, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x162>
 8000918:	e1b7      	b.n	8000c8a <__aeabi_dadd+0x4d2>
 800091a:	1e7c      	subs	r4, r7, #1
 800091c:	2f01      	cmp	r7, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x16a>
 8000920:	e226      	b.n	8000d70 <__aeabi_dadd+0x5b8>
 8000922:	4d80      	ldr	r5, [pc, #512]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000924:	42af      	cmp	r7, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x172>
 8000928:	e1d5      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 800092a:	0027      	movs	r7, r4
 800092c:	e107      	b.n	8000b3e <__aeabi_dadd+0x386>
 800092e:	2f00      	cmp	r7, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x17c>
 8000932:	e0b2      	b.n	8000a9a <__aeabi_dadd+0x2e2>
 8000934:	2a00      	cmp	r2, #0
 8000936:	d047      	beq.n	80009c8 <__aeabi_dadd+0x210>
 8000938:	4a7a      	ldr	r2, [pc, #488]	; (8000b24 <__aeabi_dadd+0x36c>)
 800093a:	4296      	cmp	r6, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x188>
 800093e:	e089      	b.n	8000a54 <__aeabi_dadd+0x29c>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	464c      	mov	r4, r9
 8000944:	0412      	lsls	r2, r2, #16
 8000946:	4314      	orrs	r4, r2
 8000948:	46a1      	mov	r9, r4
 800094a:	2f38      	cmp	r7, #56	; 0x38
 800094c:	dc6b      	bgt.n	8000a26 <__aeabi_dadd+0x26e>
 800094e:	2f1f      	cmp	r7, #31
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x19c>
 8000952:	e16e      	b.n	8000c32 <__aeabi_dadd+0x47a>
 8000954:	003a      	movs	r2, r7
 8000956:	4648      	mov	r0, r9
 8000958:	3a20      	subs	r2, #32
 800095a:	40d0      	lsrs	r0, r2
 800095c:	4684      	mov	ip, r0
 800095e:	2f20      	cmp	r7, #32
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x1ba>
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	4648      	mov	r0, r9
 8000966:	1bd2      	subs	r2, r2, r7
 8000968:	4090      	lsls	r0, r2
 800096a:	0002      	movs	r2, r0
 800096c:	4640      	mov	r0, r8
 800096e:	4310      	orrs	r0, r2
 8000970:	4680      	mov	r8, r0
 8000972:	4640      	mov	r0, r8
 8000974:	1e42      	subs	r2, r0, #1
 8000976:	4190      	sbcs	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	0004      	movs	r4, r0
 800097c:	4314      	orrs	r4, r2
 800097e:	e057      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000980:	464a      	mov	r2, r9
 8000982:	4302      	orrs	r2, r0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x1d0>
 8000986:	e103      	b.n	8000b90 <__aeabi_dadd+0x3d8>
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	2f01      	cmp	r7, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x1d8>
 800098e:	e193      	b.n	8000cb8 <__aeabi_dadd+0x500>
 8000990:	4c64      	ldr	r4, [pc, #400]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000992:	42a7      	cmp	r7, r4
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x1e0>
 8000996:	e18a      	b.n	8000cae <__aeabi_dadd+0x4f6>
 8000998:	0017      	movs	r7, r2
 800099a:	e73b      	b.n	8000814 <__aeabi_dadd+0x5c>
 800099c:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <__aeabi_dadd+0x374>)
 800099e:	1c72      	adds	r2, r6, #1
 80009a0:	4222      	tst	r2, r4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x1ee>
 80009a4:	e0e0      	b.n	8000b68 <__aeabi_dadd+0x3b0>
 80009a6:	000a      	movs	r2, r1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x1f8>
 80009ae:	e174      	b.n	8000c9a <__aeabi_dadd+0x4e2>
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x1fe>
 80009b4:	e1d0      	b.n	8000d58 <__aeabi_dadd+0x5a0>
 80009b6:	464a      	mov	r2, r9
 80009b8:	4302      	orrs	r2, r0
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x206>
 80009bc:	e1e3      	b.n	8000d86 <__aeabi_dadd+0x5ce>
 80009be:	074a      	lsls	r2, r1, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c9      	lsrs	r1, r1, #3
 80009c6:	e029      	b.n	8000a1c <__aeabi_dadd+0x264>
 80009c8:	464a      	mov	r2, r9
 80009ca:	4302      	orrs	r2, r0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x218>
 80009ce:	e17d      	b.n	8000ccc <__aeabi_dadd+0x514>
 80009d0:	1e7a      	subs	r2, r7, #1
 80009d2:	2f01      	cmp	r7, #1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x220>
 80009d6:	e0e0      	b.n	8000b9a <__aeabi_dadd+0x3e2>
 80009d8:	4c52      	ldr	r4, [pc, #328]	; (8000b24 <__aeabi_dadd+0x36c>)
 80009da:	42a7      	cmp	r7, r4
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x228>
 80009de:	e166      	b.n	8000cae <__aeabi_dadd+0x4f6>
 80009e0:	0017      	movs	r7, r2
 80009e2:	e7b2      	b.n	800094a <__aeabi_dadd+0x192>
 80009e4:	0010      	movs	r0, r2
 80009e6:	3b1f      	subs	r3, #31
 80009e8:	40d8      	lsrs	r0, r3
 80009ea:	2920      	cmp	r1, #32
 80009ec:	d003      	beq.n	80009f6 <__aeabi_dadd+0x23e>
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	409a      	lsls	r2, r3
 80009f4:	4314      	orrs	r4, r2
 80009f6:	1e63      	subs	r3, r4, #1
 80009f8:	419c      	sbcs	r4, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	2600      	movs	r6, #0
 80009fe:	469a      	mov	sl, r3
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0763      	lsls	r3, r4, #29
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x250>
 8000a06:	e755      	b.n	80008b4 <__aeabi_dadd+0xfc>
 8000a08:	4652      	mov	r2, sl
 8000a0a:	08e3      	lsrs	r3, r4, #3
 8000a0c:	0752      	lsls	r2, r2, #29
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4652      	mov	r2, sl
 8000a12:	0037      	movs	r7, r6
 8000a14:	08d1      	lsrs	r1, r2, #3
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a18:	4297      	cmp	r7, r2
 8000a1a:	d01f      	beq.n	8000a5c <__aeabi_dadd+0x2a4>
 8000a1c:	0309      	lsls	r1, r1, #12
 8000a1e:	057a      	lsls	r2, r7, #21
 8000a20:	0b0c      	lsrs	r4, r1, #12
 8000a22:	0d52      	lsrs	r2, r2, #21
 8000a24:	e764      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a26:	4642      	mov	r2, r8
 8000a28:	464c      	mov	r4, r9
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	18e4      	adds	r4, r4, r3
 8000a32:	429c      	cmp	r4, r3
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	448a      	add	sl, r1
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	d5df      	bpl.n	8000a02 <__aeabi_dadd+0x24a>
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a44:	3601      	adds	r6, #1
 8000a46:	429e      	cmp	r6, r3
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x294>
 8000a4a:	e0b3      	b.n	8000bb4 <__aeabi_dadd+0x3fc>
 8000a4c:	0032      	movs	r2, r6
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2300      	movs	r3, #0
 8000a52:	e74d      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x2ac>
 8000a62:	e200      	b.n	8000e66 <__aeabi_dadd+0x6ae>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	430c      	orrs	r4, r1
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a6e:	0b24      	lsrs	r4, r4, #12
 8000a70:	e73e      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a72:	0020      	movs	r0, r4
 8000a74:	f001 fd6e 	bl	8002554 <__clzsi2>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	dc00      	bgt.n	8000a82 <__aeabi_dadd+0x2ca>
 8000a80:	e6f7      	b.n	8000872 <__aeabi_dadd+0xba>
 8000a82:	0022      	movs	r2, r4
 8000a84:	3808      	subs	r0, #8
 8000a86:	4082      	lsls	r2, r0
 8000a88:	2400      	movs	r4, #0
 8000a8a:	42b3      	cmp	r3, r6
 8000a8c:	db00      	blt.n	8000a90 <__aeabi_dadd+0x2d8>
 8000a8e:	e6fc      	b.n	800088a <__aeabi_dadd+0xd2>
 8000a90:	1af6      	subs	r6, r6, r3
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <__aeabi_dadd+0x370>)
 8000a94:	401a      	ands	r2, r3
 8000a96:	4692      	mov	sl, r2
 8000a98:	e70a      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d02b      	beq.n	8000af6 <__aeabi_dadd+0x33e>
 8000a9e:	1b97      	subs	r7, r2, r6
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x2ee>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_dadd+0x460>
 8000aa6:	4c1f      	ldr	r4, [pc, #124]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x2f6>
 8000aac:	e11c      	b.n	8000ce8 <__aeabi_dadd+0x530>
 8000aae:	2480      	movs	r4, #128	; 0x80
 8000ab0:	0424      	lsls	r4, r4, #16
 8000ab2:	4321      	orrs	r1, r4
 8000ab4:	2f38      	cmp	r7, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x302>
 8000ab8:	e11e      	b.n	8000cf8 <__aeabi_dadd+0x540>
 8000aba:	2f1f      	cmp	r7, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x308>
 8000abe:	e19e      	b.n	8000dfe <__aeabi_dadd+0x646>
 8000ac0:	2620      	movs	r6, #32
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	1bf6      	subs	r6, r6, r7
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	40b3      	lsls	r3, r6
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	40f8      	lsrs	r0, r7
 8000ace:	1e5e      	subs	r6, r3, #1
 8000ad0:	41b3      	sbcs	r3, r6
 8000ad2:	40f9      	lsrs	r1, r7
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	4489      	add	r9, r1
 8000ada:	4444      	add	r4, r8
 8000adc:	4544      	cmp	r4, r8
 8000ade:	419b      	sbcs	r3, r3
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	444b      	add	r3, r9
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	0016      	movs	r6, r2
 8000ae8:	e7a8      	b.n	8000a3c <__aeabi_dadd+0x284>
 8000aea:	4642      	mov	r2, r8
 8000aec:	464c      	mov	r4, r9
 8000aee:	4314      	orrs	r4, r2
 8000af0:	1e62      	subs	r2, r4, #1
 8000af2:	4194      	sbcs	r4, r2
 8000af4:	e6a6      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__aeabi_dadd+0x374>)
 8000af8:	1c72      	adds	r2, r6, #1
 8000afa:	4222      	tst	r2, r4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dadd+0x348>
 8000afe:	e0a8      	b.n	8000c52 <__aeabi_dadd+0x49a>
 8000b00:	000a      	movs	r2, r1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x352>
 8000b08:	e10a      	b.n	8000d20 <__aeabi_dadd+0x568>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x358>
 8000b0e:	e15e      	b.n	8000dce <__aeabi_dadd+0x616>
 8000b10:	464a      	mov	r2, r9
 8000b12:	4302      	orrs	r2, r0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x360>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x624>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e77c      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	4ccf      	ldr	r4, [pc, #828]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x380>
 8000b36:	e0ce      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	0424      	lsls	r4, r4, #16
 8000b3c:	4321      	orrs	r1, r4
 8000b3e:	2f38      	cmp	r7, #56	; 0x38
 8000b40:	dc5b      	bgt.n	8000bfa <__aeabi_dadd+0x442>
 8000b42:	2f1f      	cmp	r7, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x390>
 8000b46:	e0dc      	b.n	8000d02 <__aeabi_dadd+0x54a>
 8000b48:	2520      	movs	r5, #32
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	1bed      	subs	r5, r5, r7
 8000b4e:	001e      	movs	r6, r3
 8000b50:	40ab      	lsls	r3, r5
 8000b52:	40ac      	lsls	r4, r5
 8000b54:	40fe      	lsrs	r6, r7
 8000b56:	1e5d      	subs	r5, r3, #1
 8000b58:	41ab      	sbcs	r3, r5
 8000b5a:	4334      	orrs	r4, r6
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	4699      	mov	r9, r3
 8000b66:	e04c      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1a1c      	subs	r4, r3, r0
 8000b6c:	1a88      	subs	r0, r1, r2
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	4252      	negs	r2, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	0002      	movs	r2, r0
 8000b78:	4650      	mov	r0, sl
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	d478      	bmi.n	8000c74 <__aeabi_dadd+0x4bc>
 8000b82:	4653      	mov	r3, sl
 8000b84:	4323      	orrs	r3, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x3d2>
 8000b88:	e66a      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	e745      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e73d      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000b9a:	181c      	adds	r4, r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	419b      	sbcs	r3, r3
 8000ba0:	4449      	add	r1, r9
 8000ba2:	468a      	mov	sl, r1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	449a      	add	sl, r3
 8000ba8:	4653      	mov	r3, sl
 8000baa:	2601      	movs	r6, #1
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_dadd+0x3fa>
 8000bb0:	e727      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000bb2:	2602      	movs	r6, #2
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	4baf      	ldr	r3, [pc, #700]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	4021      	ands	r1, r4
 8000bc0:	0862      	lsrs	r2, r4, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	07dc      	lsls	r4, r3, #31
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	469a      	mov	sl, r3
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	e670      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	464c      	mov	r4, r9
 8000bd2:	3a20      	subs	r2, #32
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	46a4      	mov	ip, r4
 8000bd8:	2f20      	cmp	r7, #32
 8000bda:	d007      	beq.n	8000bec <__aeabi_dadd+0x434>
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	4648      	mov	r0, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4090      	lsls	r0, r2
 8000be4:	0002      	movs	r2, r0
 8000be6:	4640      	mov	r0, r8
 8000be8:	4310      	orrs	r0, r2
 8000bea:	4680      	mov	r8, r0
 8000bec:	4640      	mov	r0, r8
 8000bee:	1e42      	subs	r2, r0, #1
 8000bf0:	4190      	sbcs	r0, r2
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	0004      	movs	r4, r0
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	e624      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000bfa:	4319      	orrs	r1, r3
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	4643      	mov	r3, r8
 8000c04:	1b1c      	subs	r4, r3, r4
 8000c06:	45a0      	cmp	r8, r4
 8000c08:	419b      	sbcs	r3, r3
 8000c0a:	4649      	mov	r1, r9
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	4665      	mov	r5, ip
 8000c14:	0016      	movs	r6, r2
 8000c16:	e61b      	b.n	8000850 <__aeabi_dadd+0x98>
 8000c18:	000c      	movs	r4, r1
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x468>
 8000c1e:	e0c7      	b.n	8000db0 <__aeabi_dadd+0x5f8>
 8000c20:	1e7c      	subs	r4, r7, #1
 8000c22:	2f01      	cmp	r7, #1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x470>
 8000c26:	e0f9      	b.n	8000e1c <__aeabi_dadd+0x664>
 8000c28:	4e91      	ldr	r6, [pc, #580]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c2a:	42b7      	cmp	r7, r6
 8000c2c:	d05c      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000c2e:	0027      	movs	r7, r4
 8000c30:	e740      	b.n	8000ab4 <__aeabi_dadd+0x2fc>
 8000c32:	2220      	movs	r2, #32
 8000c34:	464c      	mov	r4, r9
 8000c36:	4640      	mov	r0, r8
 8000c38:	1bd2      	subs	r2, r2, r7
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	40f8      	lsrs	r0, r7
 8000c3e:	4304      	orrs	r4, r0
 8000c40:	4640      	mov	r0, r8
 8000c42:	4090      	lsls	r0, r2
 8000c44:	1e42      	subs	r2, r0, #1
 8000c46:	4190      	sbcs	r0, r2
 8000c48:	464a      	mov	r2, r9
 8000c4a:	40fa      	lsrs	r2, r7
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	1889      	adds	r1, r1, r2
 8000c50:	e6ee      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000c52:	4c87      	ldr	r4, [pc, #540]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x4a2>
 8000c58:	e6f9      	b.n	8000a4e <__aeabi_dadd+0x296>
 8000c5a:	1818      	adds	r0, r3, r0
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	419b      	sbcs	r3, r3
 8000c60:	4449      	add	r1, r9
 8000c62:	425b      	negs	r3, r3
 8000c64:	18cb      	adds	r3, r1, r3
 8000c66:	07dc      	lsls	r4, r3, #31
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	0016      	movs	r6, r2
 8000c70:	4304      	orrs	r4, r0
 8000c72:	e6c6      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000c74:	4642      	mov	r2, r8
 8000c76:	1ad4      	subs	r4, r2, r3
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	4180      	sbcs	r0, r0
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4240      	negs	r0, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	1a0b      	subs	r3, r1, r0
 8000c84:	469a      	mov	sl, r3
 8000c86:	4665      	mov	r5, ip
 8000c88:	e5ea      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	075b      	lsls	r3, r3, #29
 8000c92:	4665      	mov	r5, ip
 8000c94:	4303      	orrs	r3, r0
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	e6bd      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x4e8>
 8000c9e:	e08e      	b.n	8000dbe <__aeabi_dadd+0x606>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	d117      	bne.n	8000cd6 <__aeabi_dadd+0x51e>
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	2500      	movs	r5, #0
 8000caa:	0309      	lsls	r1, r1, #12
 8000cac:	e6da      	b.n	8000a64 <__aeabi_dadd+0x2ac>
 8000cae:	074a      	lsls	r2, r1, #29
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	e6d1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	464a      	mov	r2, r9
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	1a89      	subs	r1, r1, r2
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	2601      	movs	r6, #1
 8000cca:	e5c1      	b.n	8000850 <__aeabi_dadd+0x98>
 8000ccc:	074a      	lsls	r2, r1, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	e69f      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	08d8      	lsrs	r0, r3, #3
 8000cda:	464b      	mov	r3, r9
 8000cdc:	464a      	mov	r2, r9
 8000cde:	075b      	lsls	r3, r3, #29
 8000ce0:	4665      	mov	r5, ip
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	08d1      	lsrs	r1, r2, #3
 8000ce6:	e6b9      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	08d8      	lsrs	r0, r3, #3
 8000cec:	464b      	mov	r3, r9
 8000cee:	464a      	mov	r2, r9
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	08d1      	lsrs	r1, r2, #3
 8000cf6:	e6b1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cf8:	4319      	orrs	r1, r3
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	e6eb      	b.n	8000ada <__aeabi_dadd+0x322>
 8000d02:	003c      	movs	r4, r7
 8000d04:	000d      	movs	r5, r1
 8000d06:	3c20      	subs	r4, #32
 8000d08:	40e5      	lsrs	r5, r4
 8000d0a:	2f20      	cmp	r7, #32
 8000d0c:	d003      	beq.n	8000d16 <__aeabi_dadd+0x55e>
 8000d0e:	2440      	movs	r4, #64	; 0x40
 8000d10:	1be4      	subs	r4, r4, r7
 8000d12:	40a1      	lsls	r1, r4
 8000d14:	430b      	orrs	r3, r1
 8000d16:	001c      	movs	r4, r3
 8000d18:	1e63      	subs	r3, r4, #1
 8000d1a:	419c      	sbcs	r4, r3
 8000d1c:	432c      	orrs	r4, r5
 8000d1e:	e770      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d0e1      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000d24:	464a      	mov	r2, r9
 8000d26:	4302      	orrs	r2, r0
 8000d28:	d0c1      	beq.n	8000cae <__aeabi_dadd+0x4f6>
 8000d2a:	074a      	lsls	r2, r1, #29
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	08c9      	lsrs	r1, r1, #3
 8000d34:	0312      	lsls	r2, r2, #12
 8000d36:	4211      	tst	r1, r2
 8000d38:	d008      	beq.n	8000d4c <__aeabi_dadd+0x594>
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	08c4      	lsrs	r4, r0, #3
 8000d3e:	4214      	tst	r4, r2
 8000d40:	d104      	bne.n	8000d4c <__aeabi_dadd+0x594>
 8000d42:	4643      	mov	r3, r8
 8000d44:	0021      	movs	r1, r4
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	0f5a      	lsrs	r2, r3, #29
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e681      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dadd+0x5a8>
 8000d5e:	e714      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000d60:	464b      	mov	r3, r9
 8000d62:	464a      	mov	r2, r9
 8000d64:	08c0      	lsrs	r0, r0, #3
 8000d66:	075b      	lsls	r3, r3, #29
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4303      	orrs	r3, r0
 8000d6c:	08d1      	lsrs	r1, r2, #3
 8000d6e:	e655      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000d70:	1ac4      	subs	r4, r0, r3
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	464b      	mov	r3, r9
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a59      	subs	r1, r3, r1
 8000d7c:	1a0b      	subs	r3, r1, r0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4665      	mov	r5, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	e564      	b.n	8000850 <__aeabi_dadd+0x98>
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	464a      	mov	r2, r9
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	1a8a      	subs	r2, r1, r2
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a12      	subs	r2, r2, r0
 8000d94:	4692      	mov	sl, r2
 8000d96:	0212      	lsls	r2, r2, #8
 8000d98:	d549      	bpl.n	8000e2e <__aeabi_dadd+0x676>
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	1ad4      	subs	r4, r2, r3
 8000d9e:	45a0      	cmp	r8, r4
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	464b      	mov	r3, r9
 8000da4:	4240      	negs	r0, r0
 8000da6:	1a59      	subs	r1, r3, r1
 8000da8:	1a0b      	subs	r3, r1, r0
 8000daa:	469a      	mov	sl, r3
 8000dac:	4665      	mov	r5, ip
 8000dae:	e57f      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000db0:	464b      	mov	r3, r9
 8000db2:	464a      	mov	r2, r9
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	4303      	orrs	r3, r0
 8000dba:	08d1      	lsrs	r1, r2, #3
 8000dbc:	e62b      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	d138      	bne.n	8000e38 <__aeabi_dadd+0x680>
 8000dc6:	074a      	lsls	r2, r1, #29
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	e646      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	08c0      	lsrs	r0, r0, #3
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	08d1      	lsrs	r1, r2, #3
 8000dda:	e61f      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000ddc:	181c      	adds	r4, r3, r0
 8000dde:	429c      	cmp	r4, r3
 8000de0:	419b      	sbcs	r3, r3
 8000de2:	4449      	add	r1, r9
 8000de4:	468a      	mov	sl, r1
 8000de6:	425b      	negs	r3, r3
 8000de8:	449a      	add	sl, r3
 8000dea:	4653      	mov	r3, sl
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	d400      	bmi.n	8000df2 <__aeabi_dadd+0x63a>
 8000df0:	e607      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000df2:	4652      	mov	r2, sl
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000df6:	2601      	movs	r6, #1
 8000df8:	401a      	ands	r2, r3
 8000dfa:	4692      	mov	sl, r2
 8000dfc:	e601      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000dfe:	003c      	movs	r4, r7
 8000e00:	000e      	movs	r6, r1
 8000e02:	3c20      	subs	r4, #32
 8000e04:	40e6      	lsrs	r6, r4
 8000e06:	2f20      	cmp	r7, #32
 8000e08:	d003      	beq.n	8000e12 <__aeabi_dadd+0x65a>
 8000e0a:	2440      	movs	r4, #64	; 0x40
 8000e0c:	1be4      	subs	r4, r4, r7
 8000e0e:	40a1      	lsls	r1, r4
 8000e10:	430b      	orrs	r3, r1
 8000e12:	001c      	movs	r4, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4334      	orrs	r4, r6
 8000e1a:	e65e      	b.n	8000ada <__aeabi_dadd+0x322>
 8000e1c:	4443      	add	r3, r8
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	4180      	sbcs	r0, r0
 8000e22:	4449      	add	r1, r9
 8000e24:	468a      	mov	sl, r1
 8000e26:	4240      	negs	r0, r0
 8000e28:	001c      	movs	r4, r3
 8000e2a:	4482      	add	sl, r0
 8000e2c:	e6bc      	b.n	8000ba8 <__aeabi_dadd+0x3f0>
 8000e2e:	4653      	mov	r3, sl
 8000e30:	4323      	orrs	r3, r4
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x67e>
 8000e34:	e6a9      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000e36:	e5e4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000e38:	074a      	lsls	r2, r1, #29
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	4211      	tst	r1, r2
 8000e44:	d009      	beq.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e46:	4648      	mov	r0, r9
 8000e48:	08c4      	lsrs	r4, r0, #3
 8000e4a:	4214      	tst	r4, r2
 8000e4c:	d105      	bne.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	4665      	mov	r5, ip
 8000e52:	0021      	movs	r1, r4
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	0f5a      	lsrs	r2, r3, #29
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	0752      	lsls	r2, r2, #29
 8000e62:	4313      	orrs	r3, r2
 8000e64:	e5fa      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4a01      	ldr	r2, [pc, #4]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	e540      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	ff7fffff 	.word	0xff7fffff

08000e78 <__aeabi_ddiv>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	4657      	mov	r7, sl
 8000e7c:	464e      	mov	r6, r9
 8000e7e:	4645      	mov	r5, r8
 8000e80:	46de      	mov	lr, fp
 8000e82:	b5e0      	push	{r5, r6, r7, lr}
 8000e84:	030c      	lsls	r4, r1, #12
 8000e86:	001f      	movs	r7, r3
 8000e88:	004b      	lsls	r3, r1, #1
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	0005      	movs	r5, r0
 8000e90:	b085      	sub	sp, #20
 8000e92:	0b24      	lsrs	r4, r4, #12
 8000e94:	0d5b      	lsrs	r3, r3, #21
 8000e96:	0fce      	lsrs	r6, r1, #31
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x26>
 8000e9c:	e152      	b.n	8001144 <__aeabi_ddiv+0x2cc>
 8000e9e:	4ad2      	ldr	r2, [pc, #840]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x2e>
 8000ea4:	e16e      	b.n	8001184 <__aeabi_ddiv+0x30c>
 8000ea6:	0f42      	lsrs	r2, r0, #29
 8000ea8:	00e4      	lsls	r4, r4, #3
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4acd      	ldr	r2, [pc, #820]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4693      	mov	fp, r2
 8000eba:	449b      	add	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	033c      	lsls	r4, r7, #12
 8000ec4:	007b      	lsls	r3, r7, #1
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	0d5b      	lsrs	r3, r3, #21
 8000ecc:	0fff      	lsrs	r7, r7, #31
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x5c>
 8000ed2:	e11a      	b.n	800110a <__aeabi_ddiv+0x292>
 8000ed4:	4ac4      	ldr	r2, [pc, #784]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x64>
 8000eda:	e15e      	b.n	800119a <__aeabi_ddiv+0x322>
 8000edc:	0f42      	lsrs	r2, r0, #29
 8000ede:	00e4      	lsls	r4, r4, #3
 8000ee0:	4322      	orrs	r2, r4
 8000ee2:	2480      	movs	r4, #128	; 0x80
 8000ee4:	0424      	lsls	r4, r4, #16
 8000ee6:	4314      	orrs	r4, r2
 8000ee8:	4ac0      	ldr	r2, [pc, #768]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eea:	00c1      	lsls	r1, r0, #3
 8000eec:	4694      	mov	ip, r2
 8000eee:	465a      	mov	r2, fp
 8000ef0:	4463      	add	r3, ip
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	0033      	movs	r3, r6
 8000efa:	407b      	eors	r3, r7
 8000efc:	469a      	mov	sl, r3
 8000efe:	464b      	mov	r3, r9
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d827      	bhi.n	8000f54 <__aeabi_ddiv+0xdc>
 8000f04:	4aba      	ldr	r2, [pc, #744]	; (80011f0 <__aeabi_ddiv+0x378>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	58d3      	ldr	r3, [r2, r3]
 8000f0a:	469f      	mov	pc, r3
 8000f0c:	46b2      	mov	sl, r6
 8000f0e:	9b00      	ldr	r3, [sp, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d016      	beq.n	8000f42 <__aeabi_ddiv+0xca>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xa2>
 8000f18:	e287      	b.n	800142a <__aeabi_ddiv+0x5b2>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_ddiv+0xa8>
 8000f1e:	e0d5      	b.n	80010cc <__aeabi_ddiv+0x254>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	2500      	movs	r5, #0
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	07d2      	lsls	r2, r2, #31
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	0028      	movs	r0, r5
 8000f32:	0019      	movs	r1, r3
 8000f34:	b005      	add	sp, #20
 8000f36:	bcf0      	pop	{r4, r5, r6, r7}
 8000f38:	46bb      	mov	fp, r7
 8000f3a:	46b2      	mov	sl, r6
 8000f3c:	46a9      	mov	r9, r5
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000f48:	e7ed      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8000f4a:	46ba      	mov	sl, r7
 8000f4c:	46a0      	mov	r8, r4
 8000f4e:	000d      	movs	r5, r1
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	e7dc      	b.n	8000f0e <__aeabi_ddiv+0x96>
 8000f54:	4544      	cmp	r4, r8
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0xe2>
 8000f58:	e1c4      	b.n	80012e4 <__aeabi_ddiv+0x46c>
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0xe6>
 8000f5c:	e1bf      	b.n	80012de <__aeabi_ddiv+0x466>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	469c      	mov	ip, r3
 8000f64:	002e      	movs	r6, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2500      	movs	r5, #0
 8000f6a:	44e3      	add	fp, ip
 8000f6c:	0223      	lsls	r3, r4, #8
 8000f6e:	0e0c      	lsrs	r4, r1, #24
 8000f70:	431c      	orrs	r4, r3
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	4699      	mov	r9, r3
 8000f76:	0423      	lsls	r3, r4, #16
 8000f78:	020a      	lsls	r2, r1, #8
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	9701      	str	r7, [sp, #4]
 8000f82:	f7ff f961 	bl	8000248 <__aeabi_uidivmod>
 8000f86:	0002      	movs	r2, r0
 8000f88:	437a      	muls	r2, r7
 8000f8a:	040b      	lsls	r3, r1, #16
 8000f8c:	0c31      	lsrs	r1, r6, #16
 8000f8e:	4680      	mov	r8, r0
 8000f90:	4319      	orrs	r1, r3
 8000f92:	428a      	cmp	r2, r1
 8000f94:	d907      	bls.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	1909      	adds	r1, r1, r4
 8000f9e:	44e0      	add	r8, ip
 8000fa0:	428c      	cmp	r4, r1
 8000fa2:	d800      	bhi.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000fa4:	e201      	b.n	80013aa <__aeabi_ddiv+0x532>
 8000fa6:	1a88      	subs	r0, r1, r2
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f7ff f94d 	bl	8000248 <__aeabi_uidivmod>
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0436      	lsls	r6, r6, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	0c36      	lsrs	r6, r6, #16
 8000fb8:	0003      	movs	r3, r0
 8000fba:	430e      	orrs	r6, r1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	d904      	bls.n	8000fca <__aeabi_ddiv+0x152>
 8000fc0:	1936      	adds	r6, r6, r4
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	42b4      	cmp	r4, r6
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x152>
 8000fc8:	e1e9      	b.n	800139e <__aeabi_ddiv+0x526>
 8000fca:	1ab0      	subs	r0, r6, r2
 8000fcc:	4642      	mov	r2, r8
 8000fce:	9e00      	ldr	r6, [sp, #0]
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	0c33      	lsrs	r3, r6, #16
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	4690      	mov	r8, r2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	0413      	lsls	r3, r2, #16
 8000fe0:	0432      	lsls	r2, r6, #16
 8000fe2:	0c16      	lsrs	r6, r2, #16
 8000fe4:	0032      	movs	r2, r6
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	9603      	str	r6, [sp, #12]
 8000fec:	437b      	muls	r3, r7
 8000fee:	434e      	muls	r6, r1
 8000ff0:	4379      	muls	r1, r7
 8000ff2:	0c17      	lsrs	r7, r2, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	199b      	adds	r3, r3, r6
 8000ff8:	4463      	add	r3, ip
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x18e>
 8000ffe:	2680      	movs	r6, #128	; 0x80
 8001000:	0276      	lsls	r6, r6, #9
 8001002:	46b4      	mov	ip, r6
 8001004:	4461      	add	r1, ip
 8001006:	0c1e      	lsrs	r6, r3, #16
 8001008:	1871      	adds	r1, r6, r1
 800100a:	0416      	lsls	r6, r2, #16
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	199e      	adds	r6, r3, r6
 8001012:	4288      	cmp	r0, r1
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1a4>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1c6>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1c6>
 800101c:	4643      	mov	r3, r8
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c0>
 8001036:	e19e      	b.n	8001376 <__aeabi_ddiv+0x4fe>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1c4>
 800103a:	e199      	b.n	8001370 <__aeabi_ddiv+0x4f8>
 800103c:	4690      	mov	r8, r2
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a40      	subs	r0, r0, r1
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1d8>
 800104e:	e1d2      	b.n	80013f6 <__aeabi_ddiv+0x57e>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8f9 	bl	8000248 <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f0>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4ca>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x20c>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4b4>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x23a>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	4286      	cmp	r6, r0
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x24c>
 80010c2:	e100      	b.n	80012c6 <__aeabi_ddiv+0x44e>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x250>
 80010c6:	e0fb      	b.n	80012c0 <__aeabi_ddiv+0x448>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x37c>)
 80010ce:	445b      	add	r3, fp
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x25e>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3b4>
 80010d6:	076a      	lsls	r2, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x264>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e0>
 80010dc:	08e9      	lsrs	r1, r5, #3
 80010de:	4642      	mov	r2, r8
 80010e0:	01d2      	lsls	r2, r2, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x27a>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x380>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4690      	mov	r8, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	445b      	add	r3, fp
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <__aeabi_ddiv+0x384>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x282>
 80010f8:	e723      	b.n	8000f42 <__aeabi_ddiv+0xca>
 80010fa:	4642      	mov	r2, r8
 80010fc:	055b      	lsls	r3, r3, #21
 80010fe:	0755      	lsls	r5, r2, #29
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	430d      	orrs	r5, r1
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	e70d      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800110a:	4651      	mov	r1, sl
 800110c:	4321      	orrs	r1, r4
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x29a>
 8001110:	e07c      	b.n	800120c <__aeabi_ddiv+0x394>
 8001112:	2c00      	cmp	r4, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x2a0>
 8001116:	e0fb      	b.n	8001310 <__aeabi_ddiv+0x498>
 8001118:	0020      	movs	r0, r4
 800111a:	f001 fa1b 	bl	8002554 <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	3a0b      	subs	r2, #11
 8001122:	231d      	movs	r3, #29
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	4652      	mov	r2, sl
 8001128:	0001      	movs	r1, r0
 800112a:	40da      	lsrs	r2, r3
 800112c:	4653      	mov	r3, sl
 800112e:	3908      	subs	r1, #8
 8001130:	408b      	lsls	r3, r1
 8001132:	408c      	lsls	r4, r1
 8001134:	0019      	movs	r1, r3
 8001136:	4314      	orrs	r4, r2
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x388>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 8001144:	0003      	movs	r3, r0
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x35e>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2da>
 8001150:	e0cf      	b.n	80012f2 <__aeabi_ddiv+0x47a>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 f9fe 	bl	8002554 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <__aeabi_ddiv+0x38c>)
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69e      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 8001184:	0002      	movs	r2, r0
 8001186:	4322      	orrs	r2, r4
 8001188:	4690      	mov	r8, r2
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x350>
 800118c:	2208      	movs	r2, #8
 800118e:	469b      	mov	fp, r3
 8001190:	2302      	movs	r3, #2
 8001192:	2500      	movs	r5, #0
 8001194:	4691      	mov	r9, r2
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e693      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 800119a:	4651      	mov	r1, sl
 800119c:	4321      	orrs	r1, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x33c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	464a      	mov	r2, r9
 80011a4:	431a      	orrs	r2, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x390>)
 80011a8:	4691      	mov	r9, r2
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e6a1      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x390>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4651      	mov	r1, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e697      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011c8:	220c      	movs	r2, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4691      	mov	r9, r2
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e675      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e66d      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	08012a58 	.word	0x08012a58
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	464a      	mov	r2, r9
 800120e:	2301      	movs	r3, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	4691      	mov	r9, r2
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66e      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001224:	0312      	lsls	r2, r2, #12
 8001226:	e67e      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2201      	movs	r2, #1
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	2a38      	cmp	r2, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3be>
 8001234:	e674      	b.n	8000f20 <__aeabi_ddiv+0xa8>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3c4>
 800123a:	e0bd      	b.n	80013b8 <__aeabi_ddiv+0x540>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	4641      	mov	r1, r8
 8001244:	40d9      	lsrs	r1, r3
 8001246:	000b      	movs	r3, r1
 8001248:	2a20      	cmp	r2, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3de>
 800124c:	4641      	mov	r1, r8
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <__aeabi_ddiv+0x5d0>)
 8001250:	445a      	add	r2, fp
 8001252:	4091      	lsls	r1, r2
 8001254:	430d      	orrs	r5, r1
 8001256:	0029      	movs	r1, r5
 8001258:	1e4a      	subs	r2, r1, #1
 800125a:	4191      	sbcs	r1, r2
 800125c:	4319      	orrs	r1, r3
 800125e:	2307      	movs	r3, #7
 8001260:	001d      	movs	r5, r3
 8001262:	2200      	movs	r2, #0
 8001264:	400d      	ands	r5, r1
 8001266:	420b      	tst	r3, r1
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x3f4>
 800126a:	e0d0      	b.n	800140e <__aeabi_ddiv+0x596>
 800126c:	220f      	movs	r2, #15
 800126e:	2300      	movs	r3, #0
 8001270:	400a      	ands	r2, r1
 8001272:	2a04      	cmp	r2, #4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x400>
 8001276:	e0c7      	b.n	8001408 <__aeabi_ddiv+0x590>
 8001278:	1d0a      	adds	r2, r1, #4
 800127a:	428a      	cmp	r2, r1
 800127c:	4189      	sbcs	r1, r1
 800127e:	4249      	negs	r1, r1
 8001280:	185b      	adds	r3, r3, r1
 8001282:	0011      	movs	r1, r2
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	d400      	bmi.n	800128a <__aeabi_ddiv+0x412>
 8001288:	e0be      	b.n	8001408 <__aeabi_ddiv+0x590>
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2500      	movs	r5, #0
 8001290:	e649      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4643      	mov	r3, r8
 8001296:	0312      	lsls	r2, r2, #12
 8001298:	4213      	tst	r3, r2
 800129a:	d008      	beq.n	80012ae <__aeabi_ddiv+0x436>
 800129c:	4214      	tst	r4, r2
 800129e:	d106      	bne.n	80012ae <__aeabi_ddiv+0x436>
 80012a0:	4322      	orrs	r2, r4
 80012a2:	0312      	lsls	r2, r2, #12
 80012a4:	46ba      	mov	sl, r7
 80012a6:	000d      	movs	r5, r1
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012aa:	0b12      	lsrs	r2, r2, #12
 80012ac:	e63b      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4643      	mov	r3, r8
 80012b2:	0312      	lsls	r2, r2, #12
 80012b4:	431a      	orrs	r2, r3
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	46b2      	mov	sl, r6
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	e632      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x44e>
 80012c4:	e702      	b.n	80010cc <__aeabi_ddiv+0x254>
 80012c6:	19a6      	adds	r6, r4, r6
 80012c8:	1e6a      	subs	r2, r5, #1
 80012ca:	42a6      	cmp	r6, r4
 80012cc:	d200      	bcs.n	80012d0 <__aeabi_ddiv+0x458>
 80012ce:	e089      	b.n	80013e4 <__aeabi_ddiv+0x56c>
 80012d0:	4286      	cmp	r6, r0
 80012d2:	d200      	bcs.n	80012d6 <__aeabi_ddiv+0x45e>
 80012d4:	e09f      	b.n	8001416 <__aeabi_ddiv+0x59e>
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x462>
 80012d8:	e0af      	b.n	800143a <__aeabi_ddiv+0x5c2>
 80012da:	0015      	movs	r5, r2
 80012dc:	e6f4      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d900      	bls.n	80012e4 <__aeabi_ddiv+0x46c>
 80012e2:	e63c      	b.n	8000f5e <__aeabi_ddiv+0xe6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	07de      	lsls	r6, r3, #31
 80012e8:	0858      	lsrs	r0, r3, #1
 80012ea:	086b      	lsrs	r3, r5, #1
 80012ec:	431e      	orrs	r6, r3
 80012ee:	07ed      	lsls	r5, r5, #31
 80012f0:	e63c      	b.n	8000f6c <__aeabi_ddiv+0xf4>
 80012f2:	f001 f92f 	bl	8002554 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x48c>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2e6>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x2fe>
 8001310:	f001 f920 	bl	8002554 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4aa>
 8001320:	e6ff      	b.n	8001122 <__aeabi_ddiv+0x2aa>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2100      	movs	r1, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c0>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4be>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4c4>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x20c>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4d4>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4da>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001358:	220f      	movs	r2, #15
 800135a:	402a      	ands	r2, r5
 800135c:	2a04      	cmp	r2, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4ea>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x264>
 8001362:	1d29      	adds	r1, r5, #4
 8001364:	42a9      	cmp	r1, r5
 8001366:	41ad      	sbcs	r5, r5
 8001368:	426d      	negs	r5, r5
 800136a:	08c9      	lsrs	r1, r1, #3
 800136c:	44a8      	add	r8, r5
 800136e:	e6b6      	b.n	80010de <__aeabi_ddiv+0x266>
 8001370:	42af      	cmp	r7, r5
 8001372:	d900      	bls.n	8001376 <__aeabi_ddiv+0x4fe>
 8001374:	e662      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001376:	4281      	cmp	r1, r0
 8001378:	d804      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x506>
 800137c:	e65e      	b.n	800103c <__aeabi_ddiv+0x1c4>
 800137e:	42ae      	cmp	r6, r5
 8001380:	d800      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 8001382:	e65b      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001384:	2302      	movs	r3, #2
 8001386:	425b      	negs	r3, r3
 8001388:	469c      	mov	ip, r3
 800138a:	9b00      	ldr	r3, [sp, #0]
 800138c:	44e0      	add	r8, ip
 800138e:	469c      	mov	ip, r3
 8001390:	4465      	add	r5, ip
 8001392:	429d      	cmp	r5, r3
 8001394:	419b      	sbcs	r3, r3
 8001396:	425b      	negs	r3, r3
 8001398:	191b      	adds	r3, r3, r4
 800139a:	18c0      	adds	r0, r0, r3
 800139c:	e64f      	b.n	800103e <__aeabi_ddiv+0x1c6>
 800139e:	42b2      	cmp	r2, r6
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x52c>
 80013a2:	e612      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013a4:	1e83      	subs	r3, r0, #2
 80013a6:	1936      	adds	r6, r6, r4
 80013a8:	e60f      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013aa:	428a      	cmp	r2, r1
 80013ac:	d800      	bhi.n	80013b0 <__aeabi_ddiv+0x538>
 80013ae:	e5fa      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	4698      	mov	r8, r3
 80013b4:	1909      	adds	r1, r1, r4
 80013b6:	e5f6      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <__aeabi_ddiv+0x5d4>)
 80013ba:	0028      	movs	r0, r5
 80013bc:	445b      	add	r3, fp
 80013be:	4641      	mov	r1, r8
 80013c0:	409d      	lsls	r5, r3
 80013c2:	4099      	lsls	r1, r3
 80013c4:	40d0      	lsrs	r0, r2
 80013c6:	1e6b      	subs	r3, r5, #1
 80013c8:	419d      	sbcs	r5, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	4301      	orrs	r1, r0
 80013ce:	4329      	orrs	r1, r5
 80013d0:	40d3      	lsrs	r3, r2
 80013d2:	074a      	lsls	r2, r1, #29
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x560>
 80013d6:	e755      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013d8:	220f      	movs	r2, #15
 80013da:	400a      	ands	r2, r1
 80013dc:	2a04      	cmp	r2, #4
 80013de:	d000      	beq.n	80013e2 <__aeabi_ddiv+0x56a>
 80013e0:	e74a      	b.n	8001278 <__aeabi_ddiv+0x400>
 80013e2:	e74f      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013e4:	0015      	movs	r5, r2
 80013e6:	4286      	cmp	r6, r0
 80013e8:	d000      	beq.n	80013ec <__aeabi_ddiv+0x574>
 80013ea:	e66d      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013ec:	9a00      	ldr	r2, [sp, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d000      	beq.n	80013f4 <__aeabi_ddiv+0x57c>
 80013f2:	e669      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013f4:	e66a      	b.n	80010cc <__aeabi_ddiv+0x254>
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <__aeabi_ddiv+0x5d8>)
 80013f8:	445b      	add	r3, fp
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc00      	bgt.n	8001400 <__aeabi_ddiv+0x588>
 80013fe:	e713      	b.n	8001228 <__aeabi_ddiv+0x3b0>
 8001400:	2501      	movs	r5, #1
 8001402:	2100      	movs	r1, #0
 8001404:	44a8      	add	r8, r5
 8001406:	e66a      	b.n	80010de <__aeabi_ddiv+0x266>
 8001408:	075d      	lsls	r5, r3, #29
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	0b1a      	lsrs	r2, r3, #12
 800140e:	08c9      	lsrs	r1, r1, #3
 8001410:	2300      	movs	r3, #0
 8001412:	430d      	orrs	r5, r1
 8001414:	e587      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	3d02      	subs	r5, #2
 800141a:	004a      	lsls	r2, r1, #1
 800141c:	428a      	cmp	r2, r1
 800141e:	41bf      	sbcs	r7, r7
 8001420:	427f      	negs	r7, r7
 8001422:	193f      	adds	r7, r7, r4
 8001424:	19f6      	adds	r6, r6, r7
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	e7dd      	b.n	80013e6 <__aeabi_ddiv+0x56e>
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4643      	mov	r3, r8
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	431a      	orrs	r2, r3
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001436:	0b12      	lsrs	r2, r2, #12
 8001438:	e575      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	4299      	cmp	r1, r3
 800143e:	d3ea      	bcc.n	8001416 <__aeabi_ddiv+0x59e>
 8001440:	0015      	movs	r5, r2
 8001442:	e7d3      	b.n	80013ec <__aeabi_ddiv+0x574>
 8001444:	000007ff 	.word	0x000007ff
 8001448:	0000043e 	.word	0x0000043e
 800144c:	0000041e 	.word	0x0000041e
 8001450:	000003ff 	.word	0x000003ff

08001454 <__eqdf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	46de      	mov	lr, fp
 800145c:	4657      	mov	r7, sl
 800145e:	4690      	mov	r8, r2
 8001460:	b5e0      	push	{r5, r6, r7, lr}
 8001462:	0017      	movs	r7, r2
 8001464:	031a      	lsls	r2, r3, #12
 8001466:	0b12      	lsrs	r2, r2, #12
 8001468:	0005      	movs	r5, r0
 800146a:	4684      	mov	ip, r0
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <__eqdf2+0x80>)
 800146e:	030e      	lsls	r6, r1, #12
 8001470:	004c      	lsls	r4, r1, #1
 8001472:	4691      	mov	r9, r2
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	0fdb      	lsrs	r3, r3, #31
 8001478:	469b      	mov	fp, r3
 800147a:	0b36      	lsrs	r6, r6, #12
 800147c:	0d64      	lsrs	r4, r4, #21
 800147e:	0fc9      	lsrs	r1, r1, #31
 8001480:	0d52      	lsrs	r2, r2, #21
 8001482:	4284      	cmp	r4, r0
 8001484:	d019      	beq.n	80014ba <__eqdf2+0x66>
 8001486:	4282      	cmp	r2, r0
 8001488:	d010      	beq.n	80014ac <__eqdf2+0x58>
 800148a:	2001      	movs	r0, #1
 800148c:	4294      	cmp	r4, r2
 800148e:	d10e      	bne.n	80014ae <__eqdf2+0x5a>
 8001490:	454e      	cmp	r6, r9
 8001492:	d10c      	bne.n	80014ae <__eqdf2+0x5a>
 8001494:	2001      	movs	r0, #1
 8001496:	45c4      	cmp	ip, r8
 8001498:	d109      	bne.n	80014ae <__eqdf2+0x5a>
 800149a:	4559      	cmp	r1, fp
 800149c:	d017      	beq.n	80014ce <__eqdf2+0x7a>
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d105      	bne.n	80014ae <__eqdf2+0x5a>
 80014a2:	0030      	movs	r0, r6
 80014a4:	4328      	orrs	r0, r5
 80014a6:	1e43      	subs	r3, r0, #1
 80014a8:	4198      	sbcs	r0, r3
 80014aa:	e000      	b.n	80014ae <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	bcf0      	pop	{r4, r5, r6, r7}
 80014b0:	46bb      	mov	fp, r7
 80014b2:	46b2      	mov	sl, r6
 80014b4:	46a9      	mov	r9, r5
 80014b6:	46a0      	mov	r8, r4
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	0033      	movs	r3, r6
 80014bc:	2001      	movs	r0, #1
 80014be:	432b      	orrs	r3, r5
 80014c0:	d1f5      	bne.n	80014ae <__eqdf2+0x5a>
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d1f3      	bne.n	80014ae <__eqdf2+0x5a>
 80014c6:	464b      	mov	r3, r9
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d1f0      	bne.n	80014ae <__eqdf2+0x5a>
 80014cc:	e7e2      	b.n	8001494 <__eqdf2+0x40>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7ed      	b.n	80014ae <__eqdf2+0x5a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	4647      	mov	r7, r8
 80014dc:	46ce      	mov	lr, r9
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	0016      	movs	r6, r2
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	0b1b      	lsrs	r3, r3, #12
 80014e8:	4d2d      	ldr	r5, [pc, #180]	; (80015a0 <__gedf2+0xc8>)
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	b580      	push	{r7, lr}
 80014f0:	0043      	lsls	r3, r0, #1
 80014f2:	030f      	lsls	r7, r1, #12
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d021      	beq.n	800154a <__gedf2+0x72>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d013      	beq.n	8001532 <__gedf2+0x5a>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d122      	bne.n	8001554 <__gedf2+0x7c>
 800150e:	433c      	orrs	r4, r7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <__gedf2+0x42>
 8001514:	464d      	mov	r5, r9
 8001516:	432e      	orrs	r6, r5
 8001518:	d022      	beq.n	8001560 <__gedf2+0x88>
 800151a:	2c00      	cmp	r4, #0
 800151c:	d010      	beq.n	8001540 <__gedf2+0x68>
 800151e:	4281      	cmp	r1, r0
 8001520:	d022      	beq.n	8001568 <__gedf2+0x90>
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bcc0      	pop	{r6, r7}
 800152c:	46b9      	mov	r9, r7
 800152e:	46b0      	mov	r8, r6
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	464d      	mov	r5, r9
 8001534:	432e      	orrs	r6, r5
 8001536:	d129      	bne.n	800158c <__gedf2+0xb4>
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f0      	bne.n	800151e <__gedf2+0x46>
 800153c:	433c      	orrs	r4, r7
 800153e:	d1ee      	bne.n	800151e <__gedf2+0x46>
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f2      	bne.n	800152a <__gedf2+0x52>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7ef      	b.n	800152a <__gedf2+0x52>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d11d      	bne.n	800158c <__gedf2+0xb4>
 8001550:	4293      	cmp	r3, r2
 8001552:	d0ee      	beq.n	8001532 <__gedf2+0x5a>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e2      	bne.n	800151e <__gedf2+0x46>
 8001558:	464c      	mov	r4, r9
 800155a:	4326      	orrs	r6, r4
 800155c:	d1df      	bne.n	800151e <__gedf2+0x46>
 800155e:	e7e0      	b.n	8001522 <__gedf2+0x4a>
 8001560:	2000      	movs	r0, #0
 8001562:	2c00      	cmp	r4, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7dc      	b.n	8001522 <__gedf2+0x4a>
 8001568:	429a      	cmp	r2, r3
 800156a:	dc0a      	bgt.n	8001582 <__gedf2+0xaa>
 800156c:	dbe8      	blt.n	8001540 <__gedf2+0x68>
 800156e:	454f      	cmp	r7, r9
 8001570:	d8d7      	bhi.n	8001522 <__gedf2+0x4a>
 8001572:	d00e      	beq.n	8001592 <__gedf2+0xba>
 8001574:	2000      	movs	r0, #0
 8001576:	454f      	cmp	r7, r9
 8001578:	d2d7      	bcs.n	800152a <__gedf2+0x52>
 800157a:	2900      	cmp	r1, #0
 800157c:	d0e2      	beq.n	8001544 <__gedf2+0x6c>
 800157e:	0008      	movs	r0, r1
 8001580:	e7d3      	b.n	800152a <__gedf2+0x52>
 8001582:	4243      	negs	r3, r0
 8001584:	4158      	adcs	r0, r3
 8001586:	0040      	lsls	r0, r0, #1
 8001588:	3801      	subs	r0, #1
 800158a:	e7ce      	b.n	800152a <__gedf2+0x52>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7cb      	b.n	800152a <__gedf2+0x52>
 8001592:	45c4      	cmp	ip, r8
 8001594:	d8c5      	bhi.n	8001522 <__gedf2+0x4a>
 8001596:	2000      	movs	r0, #0
 8001598:	45c4      	cmp	ip, r8
 800159a:	d2c6      	bcs.n	800152a <__gedf2+0x52>
 800159c:	e7ed      	b.n	800157a <__gedf2+0xa2>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4647      	mov	r7, r8
 80015a8:	46ce      	mov	lr, r9
 80015aa:	0004      	movs	r4, r0
 80015ac:	0018      	movs	r0, r3
 80015ae:	0016      	movs	r6, r2
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	0b1b      	lsrs	r3, r3, #12
 80015b4:	4d2c      	ldr	r5, [pc, #176]	; (8001668 <__ledf2+0xc4>)
 80015b6:	004a      	lsls	r2, r1, #1
 80015b8:	4699      	mov	r9, r3
 80015ba:	b580      	push	{r7, lr}
 80015bc:	0043      	lsls	r3, r0, #1
 80015be:	030f      	lsls	r7, r1, #12
 80015c0:	46a4      	mov	ip, r4
 80015c2:	46b0      	mov	r8, r6
 80015c4:	0b3f      	lsrs	r7, r7, #12
 80015c6:	0d52      	lsrs	r2, r2, #21
 80015c8:	0fc9      	lsrs	r1, r1, #31
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fc0      	lsrs	r0, r0, #31
 80015ce:	42aa      	cmp	r2, r5
 80015d0:	d00d      	beq.n	80015ee <__ledf2+0x4a>
 80015d2:	42ab      	cmp	r3, r5
 80015d4:	d010      	beq.n	80015f8 <__ledf2+0x54>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d127      	bne.n	800162a <__ledf2+0x86>
 80015da:	433c      	orrs	r4, r7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <__ledf2+0x60>
 80015e0:	464d      	mov	r5, r9
 80015e2:	432e      	orrs	r6, r5
 80015e4:	d10e      	bne.n	8001604 <__ledf2+0x60>
 80015e6:	2000      	movs	r0, #0
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d015      	beq.n	8001618 <__ledf2+0x74>
 80015ec:	e00e      	b.n	800160c <__ledf2+0x68>
 80015ee:	003d      	movs	r5, r7
 80015f0:	4325      	orrs	r5, r4
 80015f2:	d110      	bne.n	8001616 <__ledf2+0x72>
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d118      	bne.n	800162a <__ledf2+0x86>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10b      	bne.n	8001616 <__ledf2+0x72>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d102      	bne.n	8001608 <__ledf2+0x64>
 8001602:	433c      	orrs	r4, r7
 8001604:	2c00      	cmp	r4, #0
 8001606:	d00b      	beq.n	8001620 <__ledf2+0x7c>
 8001608:	4281      	cmp	r1, r0
 800160a:	d014      	beq.n	8001636 <__ledf2+0x92>
 800160c:	2002      	movs	r0, #2
 800160e:	3901      	subs	r1, #1
 8001610:	4008      	ands	r0, r1
 8001612:	3801      	subs	r0, #1
 8001614:	e000      	b.n	8001618 <__ledf2+0x74>
 8001616:	2002      	movs	r0, #2
 8001618:	bcc0      	pop	{r6, r7}
 800161a:	46b9      	mov	r9, r7
 800161c:	46b0      	mov	r8, r6
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001620:	2800      	cmp	r0, #0
 8001622:	d1f9      	bne.n	8001618 <__ledf2+0x74>
 8001624:	2001      	movs	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7f6      	b.n	8001618 <__ledf2+0x74>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ec      	bne.n	8001608 <__ledf2+0x64>
 800162e:	464c      	mov	r4, r9
 8001630:	4326      	orrs	r6, r4
 8001632:	d1e9      	bne.n	8001608 <__ledf2+0x64>
 8001634:	e7ea      	b.n	800160c <__ledf2+0x68>
 8001636:	429a      	cmp	r2, r3
 8001638:	dd04      	ble.n	8001644 <__ledf2+0xa0>
 800163a:	4243      	negs	r3, r0
 800163c:	4158      	adcs	r0, r3
 800163e:	0040      	lsls	r0, r0, #1
 8001640:	3801      	subs	r0, #1
 8001642:	e7e9      	b.n	8001618 <__ledf2+0x74>
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <__ledf2+0x7c>
 8001648:	454f      	cmp	r7, r9
 800164a:	d8df      	bhi.n	800160c <__ledf2+0x68>
 800164c:	d006      	beq.n	800165c <__ledf2+0xb8>
 800164e:	2000      	movs	r0, #0
 8001650:	454f      	cmp	r7, r9
 8001652:	d2e1      	bcs.n	8001618 <__ledf2+0x74>
 8001654:	2900      	cmp	r1, #0
 8001656:	d0e5      	beq.n	8001624 <__ledf2+0x80>
 8001658:	0008      	movs	r0, r1
 800165a:	e7dd      	b.n	8001618 <__ledf2+0x74>
 800165c:	45c4      	cmp	ip, r8
 800165e:	d8d5      	bhi.n	800160c <__ledf2+0x68>
 8001660:	2000      	movs	r0, #0
 8001662:	45c4      	cmp	ip, r8
 8001664:	d2d8      	bcs.n	8001618 <__ledf2+0x74>
 8001666:	e7f5      	b.n	8001654 <__ledf2+0xb0>
 8001668:	000007ff 	.word	0x000007ff

0800166c <__aeabi_dmul>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	4657      	mov	r7, sl
 8001674:	464e      	mov	r6, r9
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	001f      	movs	r7, r3
 800167a:	030b      	lsls	r3, r1, #12
 800167c:	0b1b      	lsrs	r3, r3, #12
 800167e:	469b      	mov	fp, r3
 8001680:	004d      	lsls	r5, r1, #1
 8001682:	0fcb      	lsrs	r3, r1, #31
 8001684:	0004      	movs	r4, r0
 8001686:	4691      	mov	r9, r2
 8001688:	4698      	mov	r8, r3
 800168a:	b087      	sub	sp, #28
 800168c:	0d6d      	lsrs	r5, r5, #21
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x26>
 8001690:	e1cd      	b.n	8001a2e <__aeabi_dmul+0x3c2>
 8001692:	4bce      	ldr	r3, [pc, #824]	; (80019cc <__aeabi_dmul+0x360>)
 8001694:	429d      	cmp	r5, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x2e>
 8001698:	e1e9      	b.n	8001a6e <__aeabi_dmul+0x402>
 800169a:	465a      	mov	r2, fp
 800169c:	0f43      	lsrs	r3, r0, #29
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	00c3      	lsls	r3, r0, #3
 80016aa:	469a      	mov	sl, r3
 80016ac:	4bc8      	ldr	r3, [pc, #800]	; (80019d0 <__aeabi_dmul+0x364>)
 80016ae:	4693      	mov	fp, r2
 80016b0:	469c      	mov	ip, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	2600      	movs	r6, #0
 80016b6:	4465      	add	r5, ip
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	033c      	lsls	r4, r7, #12
 80016bc:	007b      	lsls	r3, r7, #1
 80016be:	4648      	mov	r0, r9
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	0fff      	lsrs	r7, r7, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x60>
 80016ca:	e189      	b.n	80019e0 <__aeabi_dmul+0x374>
 80016cc:	4abf      	ldr	r2, [pc, #764]	; (80019cc <__aeabi_dmul+0x360>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <__aeabi_dmul+0x9a>
 80016d2:	0f42      	lsrs	r2, r0, #29
 80016d4:	00e4      	lsls	r4, r4, #3
 80016d6:	4322      	orrs	r2, r4
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0424      	lsls	r4, r4, #16
 80016dc:	4314      	orrs	r4, r2
 80016de:	4abc      	ldr	r2, [pc, #752]	; (80019d0 <__aeabi_dmul+0x364>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4694      	mov	ip, r2
 80016e4:	4642      	mov	r2, r8
 80016e6:	4463      	add	r3, ip
 80016e8:	195b      	adds	r3, r3, r5
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
 80016ee:	407a      	eors	r2, r7
 80016f0:	3301      	adds	r3, #1
 80016f2:	00c0      	lsls	r0, r0, #3
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2e0a      	cmp	r6, #10
 80016fa:	dd1c      	ble.n	8001736 <__aeabi_dmul+0xca>
 80016fc:	003a      	movs	r2, r7
 80016fe:	2e0b      	cmp	r6, #11
 8001700:	d05e      	beq.n	80017c0 <__aeabi_dmul+0x154>
 8001702:	4647      	mov	r7, r8
 8001704:	e056      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001706:	4649      	mov	r1, r9
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <__aeabi_dmul+0x360>)
 800170a:	4321      	orrs	r1, r4
 800170c:	18eb      	adds	r3, r5, r3
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2900      	cmp	r1, #0
 8001712:	d12a      	bne.n	800176a <__aeabi_dmul+0xfe>
 8001714:	2080      	movs	r0, #128	; 0x80
 8001716:	2202      	movs	r2, #2
 8001718:	0100      	lsls	r0, r0, #4
 800171a:	002b      	movs	r3, r5
 800171c:	4684      	mov	ip, r0
 800171e:	4316      	orrs	r6, r2
 8001720:	4642      	mov	r2, r8
 8001722:	4463      	add	r3, ip
 8001724:	407a      	eors	r2, r7
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2e0a      	cmp	r6, #10
 800172c:	dd00      	ble.n	8001730 <__aeabi_dmul+0xc4>
 800172e:	e231      	b.n	8001b94 <__aeabi_dmul+0x528>
 8001730:	2000      	movs	r0, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2e02      	cmp	r6, #2
 8001738:	dc26      	bgt.n	8001788 <__aeabi_dmul+0x11c>
 800173a:	3e01      	subs	r6, #1
 800173c:	2e01      	cmp	r6, #1
 800173e:	d852      	bhi.n	80017e6 <__aeabi_dmul+0x17a>
 8001740:	2902      	cmp	r1, #2
 8001742:	d04c      	beq.n	80017de <__aeabi_dmul+0x172>
 8001744:	2901      	cmp	r1, #1
 8001746:	d000      	beq.n	800174a <__aeabi_dmul+0xde>
 8001748:	e118      	b.n	800197c <__aeabi_dmul+0x310>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2500      	movs	r5, #0
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	4323      	orrs	r3, r4
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	4313      	orrs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	0019      	movs	r1, r3
 800175c:	b007      	add	sp, #28
 800175e:	bcf0      	pop	{r4, r5, r6, r7}
 8001760:	46bb      	mov	fp, r7
 8001762:	46b2      	mov	sl, r6
 8001764:	46a9      	mov	r9, r5
 8001766:	46a0      	mov	r8, r4
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	2203      	movs	r2, #3
 800176e:	0109      	lsls	r1, r1, #4
 8001770:	002b      	movs	r3, r5
 8001772:	468c      	mov	ip, r1
 8001774:	4316      	orrs	r6, r2
 8001776:	4642      	mov	r2, r8
 8001778:	4463      	add	r3, ip
 800177a:	407a      	eors	r2, r7
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2e0a      	cmp	r6, #10
 8001782:	dd00      	ble.n	8001786 <__aeabi_dmul+0x11a>
 8001784:	e228      	b.n	8001bd8 <__aeabi_dmul+0x56c>
 8001786:	2103      	movs	r1, #3
 8001788:	2501      	movs	r5, #1
 800178a:	40b5      	lsls	r5, r6
 800178c:	46ac      	mov	ip, r5
 800178e:	26a6      	movs	r6, #166	; 0xa6
 8001790:	4663      	mov	r3, ip
 8001792:	00f6      	lsls	r6, r6, #3
 8001794:	4035      	ands	r5, r6
 8001796:	4233      	tst	r3, r6
 8001798:	d10b      	bne.n	80017b2 <__aeabi_dmul+0x146>
 800179a:	2690      	movs	r6, #144	; 0x90
 800179c:	00b6      	lsls	r6, r6, #2
 800179e:	4233      	tst	r3, r6
 80017a0:	d118      	bne.n	80017d4 <__aeabi_dmul+0x168>
 80017a2:	3eb9      	subs	r6, #185	; 0xb9
 80017a4:	3eff      	subs	r6, #255	; 0xff
 80017a6:	421e      	tst	r6, r3
 80017a8:	d01d      	beq.n	80017e6 <__aeabi_dmul+0x17a>
 80017aa:	46a3      	mov	fp, r4
 80017ac:	4682      	mov	sl, r0
 80017ae:	9100      	str	r1, [sp, #0]
 80017b0:	e000      	b.n	80017b4 <__aeabi_dmul+0x148>
 80017b2:	0017      	movs	r7, r2
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	003a      	movs	r2, r7
 80017b8:	2902      	cmp	r1, #2
 80017ba:	d010      	beq.n	80017de <__aeabi_dmul+0x172>
 80017bc:	465c      	mov	r4, fp
 80017be:	4650      	mov	r0, sl
 80017c0:	2903      	cmp	r1, #3
 80017c2:	d1bf      	bne.n	8001744 <__aeabi_dmul+0xd8>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	431c      	orrs	r4, r3
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <__aeabi_dmul+0x360>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	e7bd      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017d4:	2480      	movs	r4, #128	; 0x80
 80017d6:	2200      	movs	r2, #0
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <__aeabi_dmul+0x360>)
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	e7b8      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017de:	2400      	movs	r4, #0
 80017e0:	2500      	movs	r5, #0
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <__aeabi_dmul+0x360>)
 80017e4:	e7b4      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017e6:	4653      	mov	r3, sl
 80017e8:	041e      	lsls	r6, r3, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	0c1f      	lsrs	r7, r3, #16
 80017ee:	0033      	movs	r3, r6
 80017f0:	0c01      	lsrs	r1, r0, #16
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c00      	lsrs	r0, r0, #16
 80017f6:	4343      	muls	r3, r0
 80017f8:	4698      	mov	r8, r3
 80017fa:	0003      	movs	r3, r0
 80017fc:	437b      	muls	r3, r7
 80017fe:	4699      	mov	r9, r3
 8001800:	0033      	movs	r3, r6
 8001802:	434b      	muls	r3, r1
 8001804:	469c      	mov	ip, r3
 8001806:	4643      	mov	r3, r8
 8001808:	000d      	movs	r5, r1
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	469a      	mov	sl, r3
 800180e:	437d      	muls	r5, r7
 8001810:	44cc      	add	ip, r9
 8001812:	44d4      	add	ip, sl
 8001814:	9500      	str	r5, [sp, #0]
 8001816:	45e1      	cmp	r9, ip
 8001818:	d904      	bls.n	8001824 <__aeabi_dmul+0x1b8>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4699      	mov	r9, r3
 8001820:	444d      	add	r5, r9
 8001822:	9500      	str	r5, [sp, #0]
 8001824:	4663      	mov	r3, ip
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	001d      	movs	r5, r3
 800182a:	4663      	mov	r3, ip
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	469c      	mov	ip, r3
 8001830:	4643      	mov	r3, r8
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	4663      	mov	r3, ip
 800183a:	4443      	add	r3, r8
 800183c:	9303      	str	r3, [sp, #12]
 800183e:	0c23      	lsrs	r3, r4, #16
 8001840:	4698      	mov	r8, r3
 8001842:	0033      	movs	r3, r6
 8001844:	0424      	lsls	r4, r4, #16
 8001846:	0c24      	lsrs	r4, r4, #16
 8001848:	4363      	muls	r3, r4
 800184a:	469c      	mov	ip, r3
 800184c:	0023      	movs	r3, r4
 800184e:	437b      	muls	r3, r7
 8001850:	4699      	mov	r9, r3
 8001852:	4643      	mov	r3, r8
 8001854:	435e      	muls	r6, r3
 8001856:	435f      	muls	r7, r3
 8001858:	444e      	add	r6, r9
 800185a:	4663      	mov	r3, ip
 800185c:	46b2      	mov	sl, r6
 800185e:	0c1e      	lsrs	r6, r3, #16
 8001860:	4456      	add	r6, sl
 8001862:	45b1      	cmp	r9, r6
 8001864:	d903      	bls.n	800186e <__aeabi_dmul+0x202>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4699      	mov	r9, r3
 800186c:	444f      	add	r7, r9
 800186e:	0c33      	lsrs	r3, r6, #16
 8001870:	4699      	mov	r9, r3
 8001872:	003b      	movs	r3, r7
 8001874:	444b      	add	r3, r9
 8001876:	9305      	str	r3, [sp, #20]
 8001878:	4663      	mov	r3, ip
 800187a:	46ac      	mov	ip, r5
 800187c:	041f      	lsls	r7, r3, #16
 800187e:	0c3f      	lsrs	r7, r7, #16
 8001880:	0436      	lsls	r6, r6, #16
 8001882:	19f6      	adds	r6, r6, r7
 8001884:	44b4      	add	ip, r6
 8001886:	4663      	mov	r3, ip
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	465b      	mov	r3, fp
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	469c      	mov	ip, r3
 8001890:	465b      	mov	r3, fp
 8001892:	041f      	lsls	r7, r3, #16
 8001894:	0c3f      	lsrs	r7, r7, #16
 8001896:	003b      	movs	r3, r7
 8001898:	4343      	muls	r3, r0
 800189a:	4699      	mov	r9, r3
 800189c:	4663      	mov	r3, ip
 800189e:	4343      	muls	r3, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	4660      	mov	r0, ip
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	469b      	mov	fp, r3
 80018aa:	4348      	muls	r0, r1
 80018ac:	4379      	muls	r1, r7
 80018ae:	4451      	add	r1, sl
 80018b0:	4459      	add	r1, fp
 80018b2:	458a      	cmp	sl, r1
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x252>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	469a      	mov	sl, r3
 80018bc:	4450      	add	r0, sl
 80018be:	0c0b      	lsrs	r3, r1, #16
 80018c0:	469a      	mov	sl, r3
 80018c2:	464b      	mov	r3, r9
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	4699      	mov	r9, r3
 80018ca:	003b      	movs	r3, r7
 80018cc:	4363      	muls	r3, r4
 80018ce:	0409      	lsls	r1, r1, #16
 80018d0:	4645      	mov	r5, r8
 80018d2:	4449      	add	r1, r9
 80018d4:	4699      	mov	r9, r3
 80018d6:	4663      	mov	r3, ip
 80018d8:	435c      	muls	r4, r3
 80018da:	436b      	muls	r3, r5
 80018dc:	469c      	mov	ip, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	4698      	mov	r8, r3
 80018e4:	436f      	muls	r7, r5
 80018e6:	193f      	adds	r7, r7, r4
 80018e8:	4447      	add	r7, r8
 80018ea:	4450      	add	r0, sl
 80018ec:	42bc      	cmp	r4, r7
 80018ee:	d903      	bls.n	80018f8 <__aeabi_dmul+0x28c>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	4698      	mov	r8, r3
 80018f6:	44c4      	add	ip, r8
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	9d00      	ldr	r5, [sp, #0]
 80018fc:	4698      	mov	r8, r3
 80018fe:	4445      	add	r5, r8
 8001900:	42b5      	cmp	r5, r6
 8001902:	41b6      	sbcs	r6, r6
 8001904:	4273      	negs	r3, r6
 8001906:	4698      	mov	r8, r3
 8001908:	464b      	mov	r3, r9
 800190a:	041e      	lsls	r6, r3, #16
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	043c      	lsls	r4, r7, #16
 8001910:	4699      	mov	r9, r3
 8001912:	0c36      	lsrs	r6, r6, #16
 8001914:	19a4      	adds	r4, r4, r6
 8001916:	444c      	add	r4, r9
 8001918:	46a1      	mov	r9, r4
 800191a:	4683      	mov	fp, r0
 800191c:	186e      	adds	r6, r5, r1
 800191e:	44c1      	add	r9, r8
 8001920:	428e      	cmp	r6, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	44cb      	add	fp, r9
 8001926:	465d      	mov	r5, fp
 8001928:	4249      	negs	r1, r1
 800192a:	186d      	adds	r5, r5, r1
 800192c:	429c      	cmp	r4, r3
 800192e:	41a4      	sbcs	r4, r4
 8001930:	45c1      	cmp	r9, r8
 8001932:	419b      	sbcs	r3, r3
 8001934:	4583      	cmp	fp, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	428d      	cmp	r5, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	425b      	negs	r3, r3
 800193e:	4264      	negs	r4, r4
 8001940:	431c      	orrs	r4, r3
 8001942:	4240      	negs	r0, r0
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	4249      	negs	r1, r1
 8001948:	4301      	orrs	r1, r0
 800194a:	0270      	lsls	r0, r6, #9
 800194c:	0c3f      	lsrs	r7, r7, #16
 800194e:	4318      	orrs	r0, r3
 8001950:	19e4      	adds	r4, r4, r7
 8001952:	1e47      	subs	r7, r0, #1
 8001954:	41b8      	sbcs	r0, r7
 8001956:	1864      	adds	r4, r4, r1
 8001958:	4464      	add	r4, ip
 800195a:	0df6      	lsrs	r6, r6, #23
 800195c:	0261      	lsls	r1, r4, #9
 800195e:	4330      	orrs	r0, r6
 8001960:	0dec      	lsrs	r4, r5, #23
 8001962:	026e      	lsls	r6, r5, #9
 8001964:	430c      	orrs	r4, r1
 8001966:	4330      	orrs	r0, r6
 8001968:	01c9      	lsls	r1, r1, #7
 800196a:	d400      	bmi.n	800196e <__aeabi_dmul+0x302>
 800196c:	e0f1      	b.n	8001b52 <__aeabi_dmul+0x4e6>
 800196e:	2101      	movs	r1, #1
 8001970:	0843      	lsrs	r3, r0, #1
 8001972:	4001      	ands	r1, r0
 8001974:	430b      	orrs	r3, r1
 8001976:	07e0      	lsls	r0, r4, #31
 8001978:	4318      	orrs	r0, r3
 800197a:	0864      	lsrs	r4, r4, #1
 800197c:	4915      	ldr	r1, [pc, #84]	; (80019d4 <__aeabi_dmul+0x368>)
 800197e:	9b02      	ldr	r3, [sp, #8]
 8001980:	468c      	mov	ip, r1
 8001982:	4463      	add	r3, ip
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_dmul+0x31e>
 8001988:	e097      	b.n	8001aba <__aeabi_dmul+0x44e>
 800198a:	0741      	lsls	r1, r0, #29
 800198c:	d009      	beq.n	80019a2 <__aeabi_dmul+0x336>
 800198e:	210f      	movs	r1, #15
 8001990:	4001      	ands	r1, r0
 8001992:	2904      	cmp	r1, #4
 8001994:	d005      	beq.n	80019a2 <__aeabi_dmul+0x336>
 8001996:	1d01      	adds	r1, r0, #4
 8001998:	4281      	cmp	r1, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	4240      	negs	r0, r0
 800199e:	1824      	adds	r4, r4, r0
 80019a0:	0008      	movs	r0, r1
 80019a2:	01e1      	lsls	r1, r4, #7
 80019a4:	d506      	bpl.n	80019b4 <__aeabi_dmul+0x348>
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	00c9      	lsls	r1, r1, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <__aeabi_dmul+0x36c>)
 80019ae:	401c      	ands	r4, r3
 80019b0:	9b02      	ldr	r3, [sp, #8]
 80019b2:	4463      	add	r3, ip
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <__aeabi_dmul+0x370>)
 80019b6:	428b      	cmp	r3, r1
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dmul+0x350>
 80019ba:	e710      	b.n	80017de <__aeabi_dmul+0x172>
 80019bc:	0761      	lsls	r1, r4, #29
 80019be:	08c5      	lsrs	r5, r0, #3
 80019c0:	0264      	lsls	r4, r4, #9
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	430d      	orrs	r5, r1
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	e6c1      	b.n	8001750 <__aeabi_dmul+0xe4>
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	fffffc01 	.word	0xfffffc01
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	464b      	mov	r3, r9
 80019e2:	4323      	orrs	r3, r4
 80019e4:	d059      	beq.n	8001a9a <__aeabi_dmul+0x42e>
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x380>
 80019ea:	e0a3      	b.n	8001b34 <__aeabi_dmul+0x4c8>
 80019ec:	0020      	movs	r0, r4
 80019ee:	f000 fdb1 	bl	8002554 <__clzsi2>
 80019f2:	0001      	movs	r1, r0
 80019f4:	0003      	movs	r3, r0
 80019f6:	390b      	subs	r1, #11
 80019f8:	221d      	movs	r2, #29
 80019fa:	1a52      	subs	r2, r2, r1
 80019fc:	4649      	mov	r1, r9
 80019fe:	0018      	movs	r0, r3
 8001a00:	40d1      	lsrs	r1, r2
 8001a02:	464a      	mov	r2, r9
 8001a04:	3808      	subs	r0, #8
 8001a06:	4082      	lsls	r2, r0
 8001a08:	4084      	lsls	r4, r0
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	430c      	orrs	r4, r1
 8001a0e:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a10:	1aeb      	subs	r3, r5, r3
 8001a12:	4694      	mov	ip, r2
 8001a14:	4642      	mov	r2, r8
 8001a16:	4463      	add	r3, ip
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	407a      	eors	r2, r7
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2e0a      	cmp	r6, #10
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dmul+0x3c0>
 8001a2a:	e667      	b.n	80016fc <__aeabi_dmul+0x90>
 8001a2c:	e683      	b.n	8001736 <__aeabi_dmul+0xca>
 8001a2e:	465b      	mov	r3, fp
 8001a30:	4303      	orrs	r3, r0
 8001a32:	469a      	mov	sl, r3
 8001a34:	d02a      	beq.n	8001a8c <__aeabi_dmul+0x420>
 8001a36:	465b      	mov	r3, fp
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06d      	beq.n	8001b18 <__aeabi_dmul+0x4ac>
 8001a3c:	4658      	mov	r0, fp
 8001a3e:	f000 fd89 	bl	8002554 <__clzsi2>
 8001a42:	0001      	movs	r1, r0
 8001a44:	0003      	movs	r3, r0
 8001a46:	390b      	subs	r1, #11
 8001a48:	221d      	movs	r2, #29
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	465d      	mov	r5, fp
 8001a52:	40d1      	lsrs	r1, r2
 8001a54:	3808      	subs	r0, #8
 8001a56:	4085      	lsls	r5, r0
 8001a58:	000a      	movs	r2, r1
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	432a      	orrs	r2, r5
 8001a5e:	4693      	mov	fp, r2
 8001a60:	46a2      	mov	sl, r4
 8001a62:	4d5f      	ldr	r5, [pc, #380]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a64:	2600      	movs	r6, #0
 8001a66:	1aed      	subs	r5, r5, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e625      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	4303      	orrs	r3, r0
 8001a72:	469a      	mov	sl, r3
 8001a74:	d105      	bne.n	8001a82 <__aeabi_dmul+0x416>
 8001a76:	2300      	movs	r3, #0
 8001a78:	469b      	mov	fp, r3
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	2608      	movs	r6, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	e61b      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a82:	2303      	movs	r3, #3
 8001a84:	4682      	mov	sl, r0
 8001a86:	260c      	movs	r6, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	e616      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	469b      	mov	fp, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	2604      	movs	r6, #4
 8001a94:	2500      	movs	r5, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e60f      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	9501      	str	r5, [sp, #4]
 8001aa0:	431e      	orrs	r6, r3
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	407a      	eors	r2, r7
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2e0a      	cmp	r6, #10
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dmul+0x44c>
 8001ab6:	e621      	b.n	80016fc <__aeabi_dmul+0x90>
 8001ab8:	e63d      	b.n	8001736 <__aeabi_dmul+0xca>
 8001aba:	2101      	movs	r1, #1
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	2938      	cmp	r1, #56	; 0x38
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dmul+0x458>
 8001ac2:	e642      	b.n	800174a <__aeabi_dmul+0xde>
 8001ac4:	291f      	cmp	r1, #31
 8001ac6:	dd47      	ble.n	8001b58 <__aeabi_dmul+0x4ec>
 8001ac8:	261f      	movs	r6, #31
 8001aca:	0025      	movs	r5, r4
 8001acc:	4276      	negs	r6, r6
 8001ace:	1af3      	subs	r3, r6, r3
 8001ad0:	40dd      	lsrs	r5, r3
 8001ad2:	002b      	movs	r3, r5
 8001ad4:	2920      	cmp	r1, #32
 8001ad6:	d005      	beq.n	8001ae4 <__aeabi_dmul+0x478>
 8001ad8:	4942      	ldr	r1, [pc, #264]	; (8001be4 <__aeabi_dmul+0x578>)
 8001ada:	9d02      	ldr	r5, [sp, #8]
 8001adc:	468c      	mov	ip, r1
 8001ade:	4465      	add	r5, ip
 8001ae0:	40ac      	lsls	r4, r5
 8001ae2:	4320      	orrs	r0, r4
 8001ae4:	1e41      	subs	r1, r0, #1
 8001ae6:	4188      	sbcs	r0, r1
 8001ae8:	4318      	orrs	r0, r3
 8001aea:	2307      	movs	r3, #7
 8001aec:	001d      	movs	r5, r3
 8001aee:	2400      	movs	r4, #0
 8001af0:	4005      	ands	r5, r0
 8001af2:	4203      	tst	r3, r0
 8001af4:	d04a      	beq.n	8001b8c <__aeabi_dmul+0x520>
 8001af6:	230f      	movs	r3, #15
 8001af8:	2400      	movs	r4, #0
 8001afa:	4003      	ands	r3, r0
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d042      	beq.n	8001b86 <__aeabi_dmul+0x51a>
 8001b00:	1d03      	adds	r3, r0, #4
 8001b02:	4283      	cmp	r3, r0
 8001b04:	4180      	sbcs	r0, r0
 8001b06:	4240      	negs	r0, r0
 8001b08:	1824      	adds	r4, r4, r0
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	0223      	lsls	r3, r4, #8
 8001b0e:	d53a      	bpl.n	8001b86 <__aeabi_dmul+0x51a>
 8001b10:	2301      	movs	r3, #1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e61b      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b18:	f000 fd1c 	bl	8002554 <__clzsi2>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	0003      	movs	r3, r0
 8001b20:	3115      	adds	r1, #21
 8001b22:	3320      	adds	r3, #32
 8001b24:	291c      	cmp	r1, #28
 8001b26:	dd8f      	ble.n	8001a48 <__aeabi_dmul+0x3dc>
 8001b28:	3808      	subs	r0, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4692      	mov	sl, r2
 8001b30:	46a3      	mov	fp, r4
 8001b32:	e796      	b.n	8001a62 <__aeabi_dmul+0x3f6>
 8001b34:	f000 fd0e 	bl	8002554 <__clzsi2>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	3115      	adds	r1, #21
 8001b3e:	3320      	adds	r3, #32
 8001b40:	291c      	cmp	r1, #28
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dmul+0x4da>
 8001b44:	e758      	b.n	80019f8 <__aeabi_dmul+0x38c>
 8001b46:	0002      	movs	r2, r0
 8001b48:	464c      	mov	r4, r9
 8001b4a:	3a08      	subs	r2, #8
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	4094      	lsls	r4, r2
 8001b50:	e75d      	b.n	8001a0e <__aeabi_dmul+0x3a2>
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	e711      	b.n	800197c <__aeabi_dmul+0x310>
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <__aeabi_dmul+0x57c>)
 8001b5a:	0026      	movs	r6, r4
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	0003      	movs	r3, r0
 8001b60:	9d02      	ldr	r5, [sp, #8]
 8001b62:	40cb      	lsrs	r3, r1
 8001b64:	4465      	add	r5, ip
 8001b66:	40ae      	lsls	r6, r5
 8001b68:	431e      	orrs	r6, r3
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	40ab      	lsls	r3, r5
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	4183      	sbcs	r3, r0
 8001b72:	0030      	movs	r0, r6
 8001b74:	4318      	orrs	r0, r3
 8001b76:	40cc      	lsrs	r4, r1
 8001b78:	0743      	lsls	r3, r0, #29
 8001b7a:	d0c7      	beq.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	4003      	ands	r3, r0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d1bd      	bne.n	8001b00 <__aeabi_dmul+0x494>
 8001b84:	e7c2      	b.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b86:	0765      	lsls	r5, r4, #29
 8001b88:	0264      	lsls	r4, r4, #9
 8001b8a:	0b24      	lsrs	r4, r4, #12
 8001b8c:	08c0      	lsrs	r0, r0, #3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4305      	orrs	r5, r0
 8001b92:	e5dd      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b94:	2500      	movs	r5, #0
 8001b96:	2302      	movs	r3, #2
 8001b98:	2e0f      	cmp	r6, #15
 8001b9a:	d10c      	bne.n	8001bb6 <__aeabi_dmul+0x54a>
 8001b9c:	2480      	movs	r4, #128	; 0x80
 8001b9e:	465b      	mov	r3, fp
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4223      	tst	r3, r4
 8001ba4:	d00e      	beq.n	8001bc4 <__aeabi_dmul+0x558>
 8001ba6:	4221      	tst	r1, r4
 8001ba8:	d10c      	bne.n	8001bc4 <__aeabi_dmul+0x558>
 8001baa:	430c      	orrs	r4, r1
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	003a      	movs	r2, r7
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <__aeabi_dmul+0x580>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e5cc      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bb6:	2e0b      	cmp	r6, #11
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dmul+0x550>
 8001bba:	e5a2      	b.n	8001702 <__aeabi_dmul+0x96>
 8001bbc:	468b      	mov	fp, r1
 8001bbe:	46aa      	mov	sl, r5
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	e5f7      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001bc4:	2480      	movs	r4, #128	; 0x80
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4655      	mov	r5, sl
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_dmul+0x580>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e5bb      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bd8:	464d      	mov	r5, r9
 8001bda:	0021      	movs	r1, r4
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e7db      	b.n	8001b98 <__aeabi_dmul+0x52c>
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	0000043e 	.word	0x0000043e
 8001be8:	0000041e 	.word	0x0000041e
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dsub>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	0004      	movs	r4, r0
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	032b      	lsls	r3, r5, #12
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	0f62      	lsrs	r2, r4, #29
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	00e3      	lsls	r3, r4, #3
 8001c0e:	030c      	lsls	r4, r1, #12
 8001c10:	0a64      	lsrs	r4, r4, #9
 8001c12:	0f47      	lsrs	r7, r0, #29
 8001c14:	4327      	orrs	r7, r4
 8001c16:	4cd0      	ldr	r4, [pc, #832]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c18:	006e      	lsls	r6, r5, #1
 8001c1a:	4691      	mov	r9, r2
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	004a      	lsls	r2, r1, #1
 8001c20:	00c0      	lsls	r0, r0, #3
 8001c22:	4698      	mov	r8, r3
 8001c24:	46a2      	mov	sl, r4
 8001c26:	0d76      	lsrs	r6, r6, #21
 8001c28:	0fed      	lsrs	r5, r5, #31
 8001c2a:	0d52      	lsrs	r2, r2, #21
 8001c2c:	0fc9      	lsrs	r1, r1, #31
 8001c2e:	9001      	str	r0, [sp, #4]
 8001c30:	42a2      	cmp	r2, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x46>
 8001c34:	e0b9      	b.n	8001daa <__aeabi_dsub+0x1ba>
 8001c36:	2401      	movs	r4, #1
 8001c38:	4061      	eors	r1, r4
 8001c3a:	468b      	mov	fp, r1
 8001c3c:	428d      	cmp	r5, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x52>
 8001c40:	e08d      	b.n	8001d5e <__aeabi_dsub+0x16e>
 8001c42:	1ab4      	subs	r4, r6, r2
 8001c44:	46a4      	mov	ip, r4
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x5c>
 8001c4a:	e0b7      	b.n	8001dbc <__aeabi_dsub+0x1cc>
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x62>
 8001c50:	e0cb      	b.n	8001dea <__aeabi_dsub+0x1fa>
 8001c52:	4ac1      	ldr	r2, [pc, #772]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c54:	4296      	cmp	r6, r2
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x6a>
 8001c58:	e186      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0412      	lsls	r2, r2, #16
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	2a38      	cmp	r2, #56	; 0x38
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0x78>
 8001c66:	e1a4      	b.n	8001fb2 <__aeabi_dsub+0x3c2>
 8001c68:	2a1f      	cmp	r2, #31
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x7e>
 8001c6c:	e21d      	b.n	80020aa <__aeabi_dsub+0x4ba>
 8001c6e:	4661      	mov	r1, ip
 8001c70:	2220      	movs	r2, #32
 8001c72:	003c      	movs	r4, r7
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	0001      	movs	r1, r0
 8001c78:	4090      	lsls	r0, r2
 8001c7a:	4094      	lsls	r4, r2
 8001c7c:	1e42      	subs	r2, r0, #1
 8001c7e:	4190      	sbcs	r0, r2
 8001c80:	4662      	mov	r2, ip
 8001c82:	46a0      	mov	r8, r4
 8001c84:	4664      	mov	r4, ip
 8001c86:	40d7      	lsrs	r7, r2
 8001c88:	464a      	mov	r2, r9
 8001c8a:	40e1      	lsrs	r1, r4
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	1bd2      	subs	r2, r2, r7
 8001c90:	4691      	mov	r9, r2
 8001c92:	430c      	orrs	r4, r1
 8001c94:	4304      	orrs	r4, r0
 8001c96:	1b1c      	subs	r4, r3, r4
 8001c98:	42a3      	cmp	r3, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0xbc>
 8001caa:	e12b      	b.n	8001f04 <__aeabi_dsub+0x314>
 8001cac:	4653      	mov	r3, sl
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	0a53      	lsrs	r3, r2, #9
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0xcc>
 8001cba:	e166      	b.n	8001f8a <__aeabi_dsub+0x39a>
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f000 fc49 	bl	8002554 <__clzsi2>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	3b08      	subs	r3, #8
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	0020      	movs	r0, r4
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	4651      	mov	r1, sl
 8001cce:	40d0      	lsrs	r0, r2
 8001cd0:	4099      	lsls	r1, r3
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	409c      	lsls	r4, r3
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	dd00      	ble.n	8001cde <__aeabi_dsub+0xee>
 8001cdc:	e164      	b.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001cde:	1b9b      	subs	r3, r3, r6
 8001ce0:	1c59      	adds	r1, r3, #1
 8001ce2:	291f      	cmp	r1, #31
 8001ce4:	dd00      	ble.n	8001ce8 <__aeabi_dsub+0xf8>
 8001ce6:	e0fe      	b.n	8001ee6 <__aeabi_dsub+0x2f6>
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0010      	movs	r0, r2
 8001cec:	0026      	movs	r6, r4
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	409c      	lsls	r4, r3
 8001cf2:	4098      	lsls	r0, r3
 8001cf4:	40ce      	lsrs	r6, r1
 8001cf6:	40ca      	lsrs	r2, r1
 8001cf8:	1e63      	subs	r3, r4, #1
 8001cfa:	419c      	sbcs	r4, r3
 8001cfc:	4330      	orrs	r0, r6
 8001cfe:	4692      	mov	sl, r2
 8001d00:	2600      	movs	r6, #0
 8001d02:	4304      	orrs	r4, r0
 8001d04:	0763      	lsls	r3, r4, #29
 8001d06:	d009      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d08:	230f      	movs	r3, #15
 8001d0a:	4023      	ands	r3, r4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d005      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d10:	1d23      	adds	r3, r4, #4
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	41a4      	sbcs	r4, r4
 8001d16:	4264      	negs	r4, r4
 8001d18:	44a2      	add	sl, r4
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	4653      	mov	r3, sl
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	d400      	bmi.n	8001d24 <__aeabi_dsub+0x134>
 8001d22:	e0f2      	b.n	8001f0a <__aeabi_dsub+0x31a>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <__aeabi_dsub+0x368>)
 8001d26:	3601      	adds	r6, #1
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x13e>
 8001d2c:	e10f      	b.n	8001f4e <__aeabi_dsub+0x35e>
 8001d2e:	4653      	mov	r3, sl
 8001d30:	498a      	ldr	r1, [pc, #552]	; (8001f5c <__aeabi_dsub+0x36c>)
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	400b      	ands	r3, r1
 8001d36:	0019      	movs	r1, r3
 8001d38:	075b      	lsls	r3, r3, #29
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	0572      	lsls	r2, r6, #21
 8001d3e:	024c      	lsls	r4, r1, #9
 8001d40:	0b24      	lsrs	r4, r4, #12
 8001d42:	0d52      	lsrs	r2, r2, #21
 8001d44:	0512      	lsls	r2, r2, #20
 8001d46:	4322      	orrs	r2, r4
 8001d48:	07ed      	lsls	r5, r5, #31
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	b003      	add	sp, #12
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	1ab4      	subs	r4, r6, r2
 8001d60:	46a4      	mov	ip, r4
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	dd59      	ble.n	8001e1a <__aeabi_dsub+0x22a>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x17c>
 8001d6a:	e0b0      	b.n	8001ece <__aeabi_dsub+0x2de>
 8001d6c:	4556      	cmp	r6, sl
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x182>
 8001d70:	e0fa      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	4317      	orrs	r7, r2
 8001d78:	4662      	mov	r2, ip
 8001d7a:	2a38      	cmp	r2, #56	; 0x38
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x190>
 8001d7e:	e0d4      	b.n	8001f2a <__aeabi_dsub+0x33a>
 8001d80:	2a1f      	cmp	r2, #31
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x196>
 8001d84:	e1c0      	b.n	8002108 <__aeabi_dsub+0x518>
 8001d86:	0039      	movs	r1, r7
 8001d88:	3a20      	subs	r2, #32
 8001d8a:	40d1      	lsrs	r1, r2
 8001d8c:	4662      	mov	r2, ip
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d006      	beq.n	8001da0 <__aeabi_dsub+0x1b0>
 8001d92:	4664      	mov	r4, ip
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	1b12      	subs	r2, r2, r4
 8001d98:	003c      	movs	r4, r7
 8001d9a:	4094      	lsls	r4, r2
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	9401      	str	r4, [sp, #4]
 8001da0:	9c01      	ldr	r4, [sp, #4]
 8001da2:	1e62      	subs	r2, r4, #1
 8001da4:	4194      	sbcs	r4, r2
 8001da6:	430c      	orrs	r4, r1
 8001da8:	e0c3      	b.n	8001f32 <__aeabi_dsub+0x342>
 8001daa:	003c      	movs	r4, r7
 8001dac:	4304      	orrs	r4, r0
 8001dae:	d02b      	beq.n	8001e08 <__aeabi_dsub+0x218>
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d02e      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001db6:	4c6a      	ldr	r4, [pc, #424]	; (8001f60 <__aeabi_dsub+0x370>)
 8001db8:	46a4      	mov	ip, r4
 8001dba:	44b4      	add	ip, r6
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d05f      	beq.n	8001e82 <__aeabi_dsub+0x292>
 8001dc2:	1b94      	subs	r4, r2, r6
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x1dc>
 8001dca:	e120      	b.n	800200e <__aeabi_dsub+0x41e>
 8001dcc:	464c      	mov	r4, r9
 8001dce:	431c      	orrs	r4, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1e4>
 8001dd2:	e1c7      	b.n	8002164 <__aeabi_dsub+0x574>
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	1e4c      	subs	r4, r1, #1
 8001dd8:	2901      	cmp	r1, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1ee>
 8001ddc:	e223      	b.n	8002226 <__aeabi_dsub+0x636>
 8001dde:	4d5e      	ldr	r5, [pc, #376]	; (8001f58 <__aeabi_dsub+0x368>)
 8001de0:	45ac      	cmp	ip, r5
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x1f6>
 8001de4:	e1d8      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8001de6:	46a4      	mov	ip, r4
 8001de8:	e11a      	b.n	8002020 <__aeabi_dsub+0x430>
 8001dea:	003a      	movs	r2, r7
 8001dec:	4302      	orrs	r2, r0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x202>
 8001df0:	e0e4      	b.n	8001fbc <__aeabi_dsub+0x3cc>
 8001df2:	0022      	movs	r2, r4
 8001df4:	3a01      	subs	r2, #1
 8001df6:	2c01      	cmp	r4, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x20c>
 8001dfa:	e1c3      	b.n	8002184 <__aeabi_dsub+0x594>
 8001dfc:	4956      	ldr	r1, [pc, #344]	; (8001f58 <__aeabi_dsub+0x368>)
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x214>
 8001e02:	e0b1      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001e04:	4694      	mov	ip, r2
 8001e06:	e72b      	b.n	8001c60 <__aeabi_dsub+0x70>
 8001e08:	2401      	movs	r4, #1
 8001e0a:	4061      	eors	r1, r4
 8001e0c:	468b      	mov	fp, r1
 8001e0e:	428d      	cmp	r5, r1
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001e12:	e716      	b.n	8001c42 <__aeabi_dsub+0x52>
 8001e14:	4952      	ldr	r1, [pc, #328]	; (8001f60 <__aeabi_dsub+0x370>)
 8001e16:	468c      	mov	ip, r1
 8001e18:	44b4      	add	ip, r6
 8001e1a:	4664      	mov	r4, ip
 8001e1c:	2c00      	cmp	r4, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x232>
 8001e20:	e0d3      	b.n	8001fca <__aeabi_dsub+0x3da>
 8001e22:	1b91      	subs	r1, r2, r6
 8001e24:	468c      	mov	ip, r1
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x23c>
 8001e2a:	e15e      	b.n	80020ea <__aeabi_dsub+0x4fa>
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <__aeabi_dsub+0x368>)
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x244>
 8001e32:	e1be      	b.n	80021b2 <__aeabi_dsub+0x5c2>
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	464c      	mov	r4, r9
 8001e38:	0409      	lsls	r1, r1, #16
 8001e3a:	430c      	orrs	r4, r1
 8001e3c:	46a1      	mov	r9, r4
 8001e3e:	4661      	mov	r1, ip
 8001e40:	2938      	cmp	r1, #56	; 0x38
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x256>
 8001e44:	e1ba      	b.n	80021bc <__aeabi_dsub+0x5cc>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x25c>
 8001e4a:	e227      	b.n	800229c <__aeabi_dsub+0x6ac>
 8001e4c:	2420      	movs	r4, #32
 8001e4e:	1a64      	subs	r4, r4, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	40a1      	lsls	r1, r4
 8001e54:	001e      	movs	r6, r3
 8001e56:	4688      	mov	r8, r1
 8001e58:	4661      	mov	r1, ip
 8001e5a:	40a3      	lsls	r3, r4
 8001e5c:	40ce      	lsrs	r6, r1
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1e5c      	subs	r4, r3, #1
 8001e62:	41a3      	sbcs	r3, r4
 8001e64:	4331      	orrs	r1, r6
 8001e66:	4319      	orrs	r1, r3
 8001e68:	000c      	movs	r4, r1
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	40d9      	lsrs	r1, r3
 8001e70:	187f      	adds	r7, r7, r1
 8001e72:	1824      	adds	r4, r4, r0
 8001e74:	4284      	cmp	r4, r0
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	425b      	negs	r3, r3
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	0016      	movs	r6, r2
 8001e7e:	44ba      	add	sl, r7
 8001e80:	e05d      	b.n	8001f3e <__aeabi_dsub+0x34e>
 8001e82:	4c38      	ldr	r4, [pc, #224]	; (8001f64 <__aeabi_dsub+0x374>)
 8001e84:	1c72      	adds	r2, r6, #1
 8001e86:	4222      	tst	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x29c>
 8001e8a:	e0df      	b.n	800204c <__aeabi_dsub+0x45c>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	d000      	beq.n	8001e96 <__aeabi_dsub+0x2a6>
 8001e94:	e15c      	b.n	8002150 <__aeabi_dsub+0x560>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x2ac>
 8001e9a:	e1cf      	b.n	800223c <__aeabi_dsub+0x64c>
 8001e9c:	003a      	movs	r2, r7
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x2b4>
 8001ea2:	e17f      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001ea4:	1a1c      	subs	r4, r3, r0
 8001ea6:	464a      	mov	r2, r9
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	4189      	sbcs	r1, r1
 8001eac:	1bd2      	subs	r2, r2, r7
 8001eae:	4249      	negs	r1, r1
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	4692      	mov	sl, r2
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x2ca>
 8001eb8:	e20a      	b.n	80022d0 <__aeabi_dsub+0x6e0>
 8001eba:	1ac4      	subs	r4, r0, r3
 8001ebc:	42a0      	cmp	r0, r4
 8001ebe:	4180      	sbcs	r0, r0
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1aff      	subs	r7, r7, r3
 8001ec6:	1a3b      	subs	r3, r7, r0
 8001ec8:	469a      	mov	sl, r3
 8001eca:	465d      	mov	r5, fp
 8001ecc:	e71a      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	d073      	beq.n	8001fbc <__aeabi_dsub+0x3cc>
 8001ed4:	0022      	movs	r2, r4
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	2c01      	cmp	r4, #1
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x2ee>
 8001edc:	e0cb      	b.n	8002076 <__aeabi_dsub+0x486>
 8001ede:	4554      	cmp	r4, sl
 8001ee0:	d042      	beq.n	8001f68 <__aeabi_dsub+0x378>
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	e748      	b.n	8001d78 <__aeabi_dsub+0x188>
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	3b1f      	subs	r3, #31
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	2920      	cmp	r1, #32
 8001eee:	d003      	beq.n	8001ef8 <__aeabi_dsub+0x308>
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4314      	orrs	r4, r2
 8001ef8:	1e63      	subs	r3, r4, #1
 8001efa:	419c      	sbcs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	2600      	movs	r6, #0
 8001f00:	469a      	mov	sl, r3
 8001f02:	4304      	orrs	r4, r0
 8001f04:	0763      	lsls	r3, r4, #29
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x31a>
 8001f08:	e6fe      	b.n	8001d08 <__aeabi_dsub+0x118>
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	08e3      	lsrs	r3, r4, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4652      	mov	r2, sl
 8001f14:	46b4      	mov	ip, r6
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f1a:	458c      	cmp	ip, r1
 8001f1c:	d02a      	beq.n	8001f74 <__aeabi_dsub+0x384>
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	0b14      	lsrs	r4, r2, #12
 8001f22:	4662      	mov	r2, ip
 8001f24:	0552      	lsls	r2, r2, #21
 8001f26:	0d52      	lsrs	r2, r2, #21
 8001f28:	e70c      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f2a:	003c      	movs	r4, r7
 8001f2c:	4304      	orrs	r4, r0
 8001f2e:	1e62      	subs	r2, r4, #1
 8001f30:	4194      	sbcs	r4, r2
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	429c      	cmp	r4, r3
 8001f36:	4192      	sbcs	r2, r2
 8001f38:	4252      	negs	r2, r2
 8001f3a:	444a      	add	r2, r9
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	4653      	mov	r3, sl
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	d5df      	bpl.n	8001f04 <__aeabi_dsub+0x314>
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f46:	3601      	adds	r6, #1
 8001f48:	429e      	cmp	r6, r3
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dsub+0x35e>
 8001f4c:	e0a0      	b.n	8002090 <__aeabi_dsub+0x4a0>
 8001f4e:	0032      	movs	r2, r6
 8001f50:	2400      	movs	r4, #0
 8001f52:	2300      	movs	r3, #0
 8001f54:	e6f6      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000007fe 	.word	0x000007fe
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	0752      	lsls	r2, r2, #29
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	464a      	mov	r2, r9
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	0019      	movs	r1, r3
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x38c>
 8001f7a:	e1b5      	b.n	80022e8 <__aeabi_dsub+0x6f8>
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	4314      	orrs	r4, r2
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4ad5      	ldr	r2, [pc, #852]	; (80022dc <__aeabi_dsub+0x6ec>)
 8001f86:	0b24      	lsrs	r4, r4, #12
 8001f88:	e6dc      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f000 fae2 	bl	8002554 <__clzsi2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	3318      	adds	r3, #24
 8001f94:	2b1f      	cmp	r3, #31
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_dsub+0x3aa>
 8001f98:	e695      	b.n	8001cc6 <__aeabi_dsub+0xd6>
 8001f9a:	0022      	movs	r2, r4
 8001f9c:	3808      	subs	r0, #8
 8001f9e:	4082      	lsls	r2, r0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	429e      	cmp	r6, r3
 8001fa4:	dc00      	bgt.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001fa6:	e69a      	b.n	8001cde <__aeabi_dsub+0xee>
 8001fa8:	1af6      	subs	r6, r6, r3
 8001faa:	4bcd      	ldr	r3, [pc, #820]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e6a8      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001fb2:	003c      	movs	r4, r7
 8001fb4:	4304      	orrs	r4, r0
 8001fb6:	1e62      	subs	r2, r4, #1
 8001fb8:	4194      	sbcs	r4, r2
 8001fba:	e66c      	b.n	8001c96 <__aeabi_dsub+0xa6>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	0752      	lsls	r2, r2, #29
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	e7a6      	b.n	8001f18 <__aeabi_dsub+0x328>
 8001fca:	4cc6      	ldr	r4, [pc, #792]	; (80022e4 <__aeabi_dsub+0x6f4>)
 8001fcc:	1c72      	adds	r2, r6, #1
 8001fce:	4222      	tst	r2, r4
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x3e4>
 8001fd2:	e0ac      	b.n	800212e <__aeabi_dsub+0x53e>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	2e00      	cmp	r6, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x3ee>
 8001fdc:	e105      	b.n	80021ea <__aeabi_dsub+0x5fa>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x3f4>
 8001fe2:	e156      	b.n	8002292 <__aeabi_dsub+0x6a2>
 8001fe4:	003a      	movs	r2, r7
 8001fe6:	4302      	orrs	r2, r0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x3fc>
 8001fea:	e0db      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001fec:	181c      	adds	r4, r3, r0
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	444f      	add	r7, r9
 8001ff4:	46ba      	mov	sl, r7
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	449a      	add	sl, r3
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	d400      	bmi.n	8002002 <__aeabi_dsub+0x412>
 8002000:	e780      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002002:	4652      	mov	r2, sl
 8002004:	4bb6      	ldr	r3, [pc, #728]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002006:	2601      	movs	r6, #1
 8002008:	401a      	ands	r2, r3
 800200a:	4692      	mov	sl, r2
 800200c:	e77a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800200e:	4cb3      	ldr	r4, [pc, #716]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002010:	42a2      	cmp	r2, r4
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x426>
 8002014:	e0c0      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8002016:	2480      	movs	r4, #128	; 0x80
 8002018:	464d      	mov	r5, r9
 800201a:	0424      	lsls	r4, r4, #16
 800201c:	4325      	orrs	r5, r4
 800201e:	46a9      	mov	r9, r5
 8002020:	4664      	mov	r4, ip
 8002022:	2c38      	cmp	r4, #56	; 0x38
 8002024:	dc53      	bgt.n	80020ce <__aeabi_dsub+0x4de>
 8002026:	4661      	mov	r1, ip
 8002028:	2c1f      	cmp	r4, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x43e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_dsub+0x5da>
 800202e:	2520      	movs	r5, #32
 8002030:	001e      	movs	r6, r3
 8002032:	1b2d      	subs	r5, r5, r4
 8002034:	464c      	mov	r4, r9
 8002036:	40ab      	lsls	r3, r5
 8002038:	40ac      	lsls	r4, r5
 800203a:	40ce      	lsrs	r6, r1
 800203c:	1e5d      	subs	r5, r3, #1
 800203e:	41ab      	sbcs	r3, r5
 8002040:	4334      	orrs	r4, r6
 8002042:	4323      	orrs	r3, r4
 8002044:	464c      	mov	r4, r9
 8002046:	40cc      	lsrs	r4, r1
 8002048:	1b3f      	subs	r7, r7, r4
 800204a:	e045      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 800204c:	464a      	mov	r2, r9
 800204e:	1a1c      	subs	r4, r3, r0
 8002050:	1bd1      	subs	r1, r2, r7
 8002052:	42a3      	cmp	r3, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	4252      	negs	r2, r2
 8002058:	4692      	mov	sl, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4651      	mov	r1, sl
 800205e:	1a52      	subs	r2, r2, r1
 8002060:	4692      	mov	sl, r2
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	d500      	bpl.n	8002068 <__aeabi_dsub+0x478>
 8002066:	e083      	b.n	8002170 <__aeabi_dsub+0x580>
 8002068:	4653      	mov	r3, sl
 800206a:	4323      	orrs	r3, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x480>
 800206e:	e621      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	e753      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002076:	181c      	adds	r4, r3, r0
 8002078:	429c      	cmp	r4, r3
 800207a:	419b      	sbcs	r3, r3
 800207c:	444f      	add	r7, r9
 800207e:	46ba      	mov	sl, r7
 8002080:	425b      	negs	r3, r3
 8002082:	449a      	add	sl, r3
 8002084:	4653      	mov	r3, sl
 8002086:	2601      	movs	r6, #1
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x49e>
 800208c:	e73a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800208e:	2602      	movs	r6, #2
 8002090:	4652      	mov	r2, sl
 8002092:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002094:	2101      	movs	r1, #1
 8002096:	401a      	ands	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	4021      	ands	r1, r4
 800209c:	0862      	lsrs	r2, r4, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	07dc      	lsls	r4, r3, #31
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	469a      	mov	sl, r3
 80020a6:	4314      	orrs	r4, r2
 80020a8:	e62c      	b.n	8001d04 <__aeabi_dsub+0x114>
 80020aa:	0039      	movs	r1, r7
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d1      	lsrs	r1, r2
 80020b0:	4662      	mov	r2, ip
 80020b2:	2a20      	cmp	r2, #32
 80020b4:	d006      	beq.n	80020c4 <__aeabi_dsub+0x4d4>
 80020b6:	4664      	mov	r4, ip
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	1b12      	subs	r2, r2, r4
 80020bc:	003c      	movs	r4, r7
 80020be:	4094      	lsls	r4, r2
 80020c0:	4304      	orrs	r4, r0
 80020c2:	9401      	str	r4, [sp, #4]
 80020c4:	9c01      	ldr	r4, [sp, #4]
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	e5e3      	b.n	8001c96 <__aeabi_dsub+0xa6>
 80020ce:	4649      	mov	r1, r9
 80020d0:	4319      	orrs	r1, r3
 80020d2:	000b      	movs	r3, r1
 80020d4:	1e5c      	subs	r4, r3, #1
 80020d6:	41a3      	sbcs	r3, r4
 80020d8:	1ac4      	subs	r4, r0, r3
 80020da:	42a0      	cmp	r0, r4
 80020dc:	419b      	sbcs	r3, r3
 80020de:	425b      	negs	r3, r3
 80020e0:	1afb      	subs	r3, r7, r3
 80020e2:	469a      	mov	sl, r3
 80020e4:	465d      	mov	r5, fp
 80020e6:	0016      	movs	r6, r2
 80020e8:	e5dc      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 80020ea:	4649      	mov	r1, r9
 80020ec:	4319      	orrs	r1, r3
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x502>
 80020f0:	e0ae      	b.n	8002250 <__aeabi_dsub+0x660>
 80020f2:	4661      	mov	r1, ip
 80020f4:	4664      	mov	r4, ip
 80020f6:	3901      	subs	r1, #1
 80020f8:	2c01      	cmp	r4, #1
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x50e>
 80020fc:	e0e0      	b.n	80022c0 <__aeabi_dsub+0x6d0>
 80020fe:	4c77      	ldr	r4, [pc, #476]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002100:	45a4      	cmp	ip, r4
 8002102:	d056      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 8002104:	468c      	mov	ip, r1
 8002106:	e69a      	b.n	8001e3e <__aeabi_dsub+0x24e>
 8002108:	4661      	mov	r1, ip
 800210a:	2220      	movs	r2, #32
 800210c:	003c      	movs	r4, r7
 800210e:	1a52      	subs	r2, r2, r1
 8002110:	4094      	lsls	r4, r2
 8002112:	0001      	movs	r1, r0
 8002114:	4090      	lsls	r0, r2
 8002116:	46a0      	mov	r8, r4
 8002118:	4664      	mov	r4, ip
 800211a:	1e42      	subs	r2, r0, #1
 800211c:	4190      	sbcs	r0, r2
 800211e:	4662      	mov	r2, ip
 8002120:	40e1      	lsrs	r1, r4
 8002122:	4644      	mov	r4, r8
 8002124:	40d7      	lsrs	r7, r2
 8002126:	430c      	orrs	r4, r1
 8002128:	4304      	orrs	r4, r0
 800212a:	44b9      	add	r9, r7
 800212c:	e701      	b.n	8001f32 <__aeabi_dsub+0x342>
 800212e:	496b      	ldr	r1, [pc, #428]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002130:	428a      	cmp	r2, r1
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x546>
 8002134:	e70c      	b.n	8001f50 <__aeabi_dsub+0x360>
 8002136:	1818      	adds	r0, r3, r0
 8002138:	4298      	cmp	r0, r3
 800213a:	419b      	sbcs	r3, r3
 800213c:	444f      	add	r7, r9
 800213e:	425b      	negs	r3, r3
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	07dc      	lsls	r4, r3, #31
 8002144:	0840      	lsrs	r0, r0, #1
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	469a      	mov	sl, r3
 800214a:	0016      	movs	r6, r2
 800214c:	4304      	orrs	r4, r0
 800214e:	e6d9      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d000      	beq.n	8002156 <__aeabi_dsub+0x566>
 8002154:	e081      	b.n	800225a <__aeabi_dsub+0x66a>
 8002156:	003b      	movs	r3, r7
 8002158:	4303      	orrs	r3, r0
 800215a:	d11d      	bne.n	8002198 <__aeabi_dsub+0x5a8>
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2500      	movs	r5, #0
 8002160:	0312      	lsls	r2, r2, #12
 8002162:	e70b      	b.n	8001f7c <__aeabi_dsub+0x38c>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	077b      	lsls	r3, r7, #29
 8002168:	465d      	mov	r5, fp
 800216a:	4303      	orrs	r3, r0
 800216c:	08fa      	lsrs	r2, r7, #3
 800216e:	e6d3      	b.n	8001f18 <__aeabi_dsub+0x328>
 8002170:	1ac4      	subs	r4, r0, r3
 8002172:	42a0      	cmp	r0, r4
 8002174:	4180      	sbcs	r0, r0
 8002176:	464b      	mov	r3, r9
 8002178:	4240      	negs	r0, r0
 800217a:	1aff      	subs	r7, r7, r3
 800217c:	1a3b      	subs	r3, r7, r0
 800217e:	469a      	mov	sl, r3
 8002180:	465d      	mov	r5, fp
 8002182:	e597      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002184:	1a1c      	subs	r4, r3, r0
 8002186:	464a      	mov	r2, r9
 8002188:	42a3      	cmp	r3, r4
 800218a:	419b      	sbcs	r3, r3
 800218c:	1bd7      	subs	r7, r2, r7
 800218e:	425b      	negs	r3, r3
 8002190:	1afb      	subs	r3, r7, r3
 8002192:	469a      	mov	sl, r3
 8002194:	2601      	movs	r6, #1
 8002196:	e585      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e6e7      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021a4:	464a      	mov	r2, r9
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	0752      	lsls	r2, r2, #29
 80021aa:	4313      	orrs	r3, r2
 80021ac:	464a      	mov	r2, r9
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	e6b5      	b.n	8001f1e <__aeabi_dsub+0x32e>
 80021b2:	08c0      	lsrs	r0, r0, #3
 80021b4:	077b      	lsls	r3, r7, #29
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6db      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021bc:	4649      	mov	r1, r9
 80021be:	4319      	orrs	r1, r3
 80021c0:	000b      	movs	r3, r1
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	418b      	sbcs	r3, r1
 80021c6:	001c      	movs	r4, r3
 80021c8:	e653      	b.n	8001e72 <__aeabi_dsub+0x282>
 80021ca:	464d      	mov	r5, r9
 80021cc:	3c20      	subs	r4, #32
 80021ce:	40e5      	lsrs	r5, r4
 80021d0:	2920      	cmp	r1, #32
 80021d2:	d005      	beq.n	80021e0 <__aeabi_dsub+0x5f0>
 80021d4:	2440      	movs	r4, #64	; 0x40
 80021d6:	1a64      	subs	r4, r4, r1
 80021d8:	4649      	mov	r1, r9
 80021da:	40a1      	lsls	r1, r4
 80021dc:	430b      	orrs	r3, r1
 80021de:	4698      	mov	r8, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	1e5c      	subs	r4, r3, #1
 80021e4:	41a3      	sbcs	r3, r4
 80021e6:	432b      	orrs	r3, r5
 80021e8:	e776      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d0e1      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 80021ee:	003a      	movs	r2, r7
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x608>
 80021f6:	e6b8      	b.n	8001f6a <__aeabi_dsub+0x37a>
 80021f8:	464a      	mov	r2, r9
 80021fa:	0752      	lsls	r2, r2, #29
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	4313      	orrs	r3, r2
 8002200:	464a      	mov	r2, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	08d2      	lsrs	r2, r2, #3
 8002206:	4222      	tst	r2, r4
 8002208:	d007      	beq.n	800221a <__aeabi_dsub+0x62a>
 800220a:	08fe      	lsrs	r6, r7, #3
 800220c:	4226      	tst	r6, r4
 800220e:	d104      	bne.n	800221a <__aeabi_dsub+0x62a>
 8002210:	465d      	mov	r5, fp
 8002212:	0032      	movs	r2, r6
 8002214:	08c3      	lsrs	r3, r0, #3
 8002216:	077f      	lsls	r7, r7, #29
 8002218:	433b      	orrs	r3, r7
 800221a:	0f59      	lsrs	r1, r3, #29
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	0749      	lsls	r1, r1, #29
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	430b      	orrs	r3, r1
 8002224:	e6a6      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002226:	1ac4      	subs	r4, r0, r3
 8002228:	42a0      	cmp	r0, r4
 800222a:	4180      	sbcs	r0, r0
 800222c:	464b      	mov	r3, r9
 800222e:	4240      	negs	r0, r0
 8002230:	1aff      	subs	r7, r7, r3
 8002232:	1a3b      	subs	r3, r7, r0
 8002234:	469a      	mov	sl, r3
 8002236:	465d      	mov	r5, fp
 8002238:	2601      	movs	r6, #1
 800223a:	e533      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 800223c:	003b      	movs	r3, r7
 800223e:	4303      	orrs	r3, r0
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x654>
 8002242:	e715      	b.n	8002070 <__aeabi_dsub+0x480>
 8002244:	08c0      	lsrs	r0, r0, #3
 8002246:	077b      	lsls	r3, r7, #29
 8002248:	465d      	mov	r5, fp
 800224a:	4303      	orrs	r3, r0
 800224c:	08fa      	lsrs	r2, r7, #3
 800224e:	e666      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	077b      	lsls	r3, r7, #29
 8002254:	4303      	orrs	r3, r0
 8002256:	08fa      	lsrs	r2, r7, #3
 8002258:	e65e      	b.n	8001f18 <__aeabi_dsub+0x328>
 800225a:	003a      	movs	r2, r7
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4302      	orrs	r2, r0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x674>
 8002262:	e682      	b.n	8001f6a <__aeabi_dsub+0x37a>
 8002264:	464a      	mov	r2, r9
 8002266:	0752      	lsls	r2, r2, #29
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	4313      	orrs	r3, r2
 800226c:	464a      	mov	r2, r9
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	4222      	tst	r2, r4
 8002274:	d007      	beq.n	8002286 <__aeabi_dsub+0x696>
 8002276:	08fe      	lsrs	r6, r7, #3
 8002278:	4226      	tst	r6, r4
 800227a:	d104      	bne.n	8002286 <__aeabi_dsub+0x696>
 800227c:	465d      	mov	r5, fp
 800227e:	0032      	movs	r2, r6
 8002280:	08c3      	lsrs	r3, r0, #3
 8002282:	077f      	lsls	r7, r7, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	0f59      	lsrs	r1, r3, #29
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	e670      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002292:	08c0      	lsrs	r0, r0, #3
 8002294:	077b      	lsls	r3, r7, #29
 8002296:	4303      	orrs	r3, r0
 8002298:	08fa      	lsrs	r2, r7, #3
 800229a:	e640      	b.n	8001f1e <__aeabi_dsub+0x32e>
 800229c:	464c      	mov	r4, r9
 800229e:	3920      	subs	r1, #32
 80022a0:	40cc      	lsrs	r4, r1
 80022a2:	4661      	mov	r1, ip
 80022a4:	2920      	cmp	r1, #32
 80022a6:	d006      	beq.n	80022b6 <__aeabi_dsub+0x6c6>
 80022a8:	4666      	mov	r6, ip
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	1b89      	subs	r1, r1, r6
 80022ae:	464e      	mov	r6, r9
 80022b0:	408e      	lsls	r6, r1
 80022b2:	4333      	orrs	r3, r6
 80022b4:	4698      	mov	r8, r3
 80022b6:	4643      	mov	r3, r8
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	418b      	sbcs	r3, r1
 80022bc:	431c      	orrs	r4, r3
 80022be:	e5d8      	b.n	8001e72 <__aeabi_dsub+0x282>
 80022c0:	181c      	adds	r4, r3, r0
 80022c2:	4284      	cmp	r4, r0
 80022c4:	4180      	sbcs	r0, r0
 80022c6:	444f      	add	r7, r9
 80022c8:	46ba      	mov	sl, r7
 80022ca:	4240      	negs	r0, r0
 80022cc:	4482      	add	sl, r0
 80022ce:	e6d9      	b.n	8002084 <__aeabi_dsub+0x494>
 80022d0:	4653      	mov	r3, sl
 80022d2:	4323      	orrs	r3, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x6e8>
 80022d6:	e6cb      	b.n	8002070 <__aeabi_dsub+0x480>
 80022d8:	e614      	b.n	8001f04 <__aeabi_dsub+0x314>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000007ff 	.word	0x000007ff
 80022e0:	ff7fffff 	.word	0xff7fffff
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	2300      	movs	r3, #0
 80022ea:	4a01      	ldr	r2, [pc, #4]	; (80022f0 <__aeabi_dsub+0x700>)
 80022ec:	001c      	movs	r4, r3
 80022ee:	e529      	b.n	8001d44 <__aeabi_dsub+0x154>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dcmpun>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0005      	movs	r5, r0
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <__aeabi_dcmpun+0x38>)
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	0016      	movs	r6, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	0d49      	lsrs	r1, r1, #21
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d5b      	lsrs	r3, r3, #21
 800230c:	4281      	cmp	r1, r0
 800230e:	d008      	beq.n	8002322 <__aeabi_dcmpun+0x2e>
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <__aeabi_dcmpun+0x38>)
 8002312:	2000      	movs	r0, #0
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002318:	0020      	movs	r0, r4
 800231a:	4330      	orrs	r0, r6
 800231c:	1e43      	subs	r3, r0, #1
 800231e:	4198      	sbcs	r0, r3
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	2001      	movs	r0, #1
 8002324:	432a      	orrs	r2, r5
 8002326:	d1fb      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002328:	e7f2      	b.n	8002310 <__aeabi_dcmpun+0x1c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff

08002330 <__aeabi_d2iz>:
 8002330:	000a      	movs	r2, r1
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	4c13      	ldr	r4, [pc, #76]	; (8002384 <__aeabi_d2iz+0x54>)
 8002336:	0053      	lsls	r3, r2, #1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	0005      	movs	r5, r0
 800233c:	0b09      	lsrs	r1, r1, #12
 800233e:	2000      	movs	r0, #0
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	0fd2      	lsrs	r2, r2, #31
 8002344:	42a3      	cmp	r3, r4
 8002346:	dd04      	ble.n	8002352 <__aeabi_d2iz+0x22>
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <__aeabi_d2iz+0x58>)
 800234a:	4283      	cmp	r3, r0
 800234c:	dd02      	ble.n	8002354 <__aeabi_d2iz+0x24>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_d2iz+0x5c>)
 8002350:	18d0      	adds	r0, r2, r3
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	0340      	lsls	r0, r0, #13
 8002358:	4301      	orrs	r1, r0
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <__aeabi_d2iz+0x60>)
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	281f      	cmp	r0, #31
 8002360:	dd08      	ble.n	8002374 <__aeabi_d2iz+0x44>
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <__aeabi_d2iz+0x64>)
 8002364:	1ac3      	subs	r3, r0, r3
 8002366:	40d9      	lsrs	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	4258      	negs	r0, r3
 800236c:	2a00      	cmp	r2, #0
 800236e:	d1f0      	bne.n	8002352 <__aeabi_d2iz+0x22>
 8002370:	0018      	movs	r0, r3
 8002372:	e7ee      	b.n	8002352 <__aeabi_d2iz+0x22>
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <__aeabi_d2iz+0x68>)
 8002376:	40c5      	lsrs	r5, r0
 8002378:	46a4      	mov	ip, r4
 800237a:	4463      	add	r3, ip
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	432b      	orrs	r3, r5
 8002382:	e7f2      	b.n	800236a <__aeabi_d2iz+0x3a>
 8002384:	000003fe 	.word	0x000003fe
 8002388:	0000041d 	.word	0x0000041d
 800238c:	7fffffff 	.word	0x7fffffff
 8002390:	00000433 	.word	0x00000433
 8002394:	00000413 	.word	0x00000413
 8002398:	fffffbed 	.word	0xfffffbed

0800239c <__aeabi_i2d>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2800      	cmp	r0, #0
 80023a0:	d016      	beq.n	80023d0 <__aeabi_i2d+0x34>
 80023a2:	17c3      	asrs	r3, r0, #31
 80023a4:	18c5      	adds	r5, r0, r3
 80023a6:	405d      	eors	r5, r3
 80023a8:	0fc4      	lsrs	r4, r0, #31
 80023aa:	0028      	movs	r0, r5
 80023ac:	f000 f8d2 	bl	8002554 <__clzsi2>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <__aeabi_i2d+0x5c>)
 80023b2:	1a1b      	subs	r3, r3, r0
 80023b4:	280a      	cmp	r0, #10
 80023b6:	dc16      	bgt.n	80023e6 <__aeabi_i2d+0x4a>
 80023b8:	0002      	movs	r2, r0
 80023ba:	002e      	movs	r6, r5
 80023bc:	3215      	adds	r2, #21
 80023be:	4096      	lsls	r6, r2
 80023c0:	220b      	movs	r2, #11
 80023c2:	1a12      	subs	r2, r2, r0
 80023c4:	40d5      	lsrs	r5, r2
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	e003      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023d0:	2400      	movs	r4, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	2500      	movs	r5, #0
 80023d6:	2600      	movs	r6, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	432b      	orrs	r3, r5
 80023dc:	07e4      	lsls	r4, r4, #31
 80023de:	4323      	orrs	r3, r4
 80023e0:	0030      	movs	r0, r6
 80023e2:	0019      	movs	r1, r3
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	380b      	subs	r0, #11
 80023e8:	4085      	lsls	r5, r0
 80023ea:	055b      	lsls	r3, r3, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	2600      	movs	r6, #0
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	e7f0      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0000041e 	.word	0x0000041e

080023fc <__aeabi_ui2d>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e04      	subs	r4, r0, #0
 8002400:	d010      	beq.n	8002424 <__aeabi_ui2d+0x28>
 8002402:	f000 f8a7 	bl	8002554 <__clzsi2>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <__aeabi_ui2d+0x48>)
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	280a      	cmp	r0, #10
 800240c:	dc11      	bgt.n	8002432 <__aeabi_ui2d+0x36>
 800240e:	220b      	movs	r2, #11
 8002410:	0021      	movs	r1, r4
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d1      	lsrs	r1, r2
 8002416:	3015      	adds	r0, #21
 8002418:	030a      	lsls	r2, r1, #12
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4084      	lsls	r4, r0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e001      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	4313      	orrs	r3, r2
 800242c:	0020      	movs	r0, r4
 800242e:	0019      	movs	r1, r3
 8002430:	bd10      	pop	{r4, pc}
 8002432:	0022      	movs	r2, r4
 8002434:	380b      	subs	r0, #11
 8002436:	4082      	lsls	r2, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	2400      	movs	r4, #0
 800243e:	0b12      	lsrs	r2, r2, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	e7f1      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_d2f>:
 8002448:	0002      	movs	r2, r0
 800244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244c:	004b      	lsls	r3, r1, #1
 800244e:	030d      	lsls	r5, r1, #12
 8002450:	0f40      	lsrs	r0, r0, #29
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	0fcc      	lsrs	r4, r1, #31
 8002456:	0a6d      	lsrs	r5, r5, #9
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <__aeabi_d2f+0xfc>)
 800245a:	4305      	orrs	r5, r0
 800245c:	1c58      	adds	r0, r3, #1
 800245e:	00d7      	lsls	r7, r2, #3
 8002460:	4208      	tst	r0, r1
 8002462:	d00a      	beq.n	800247a <__aeabi_d2f+0x32>
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <__aeabi_d2f+0x100>)
 8002466:	1859      	adds	r1, r3, r1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	dd16      	ble.n	800249a <__aeabi_d2f+0x52>
 800246c:	20ff      	movs	r0, #255	; 0xff
 800246e:	2200      	movs	r2, #0
 8002470:	05c0      	lsls	r0, r0, #23
 8002472:	4310      	orrs	r0, r2
 8002474:	07e4      	lsls	r4, r4, #31
 8002476:	4320      	orrs	r0, r4
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <__aeabi_d2f+0x44>
 800247e:	433d      	orrs	r5, r7
 8002480:	d026      	beq.n	80024d0 <__aeabi_d2f+0x88>
 8002482:	2205      	movs	r2, #5
 8002484:	0192      	lsls	r2, r2, #6
 8002486:	0a52      	lsrs	r2, r2, #9
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	e7f1      	b.n	8002470 <__aeabi_d2f+0x28>
 800248c:	432f      	orrs	r7, r5
 800248e:	d0ed      	beq.n	800246c <__aeabi_d2f+0x24>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	03d2      	lsls	r2, r2, #15
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	432a      	orrs	r2, r5
 8002498:	e7ea      	b.n	8002470 <__aeabi_d2f+0x28>
 800249a:	2900      	cmp	r1, #0
 800249c:	dd1b      	ble.n	80024d6 <__aeabi_d2f+0x8e>
 800249e:	0192      	lsls	r2, r2, #6
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	4182      	sbcs	r2, r0
 80024a4:	00ed      	lsls	r5, r5, #3
 80024a6:	0f7f      	lsrs	r7, r7, #29
 80024a8:	432a      	orrs	r2, r5
 80024aa:	433a      	orrs	r2, r7
 80024ac:	0753      	lsls	r3, r2, #29
 80024ae:	d047      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024b0:	230f      	movs	r3, #15
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d000      	beq.n	80024ba <__aeabi_d2f+0x72>
 80024b8:	3204      	adds	r2, #4
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	04db      	lsls	r3, r3, #19
 80024be:	4013      	ands	r3, r2
 80024c0:	d03e      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024c2:	1c48      	adds	r0, r1, #1
 80024c4:	29fe      	cmp	r1, #254	; 0xfe
 80024c6:	d0d1      	beq.n	800246c <__aeabi_d2f+0x24>
 80024c8:	0192      	lsls	r2, r2, #6
 80024ca:	0a52      	lsrs	r2, r2, #9
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	e7cf      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d0:	2000      	movs	r0, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	e7cc      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d6:	000a      	movs	r2, r1
 80024d8:	3217      	adds	r2, #23
 80024da:	db2f      	blt.n	800253c <__aeabi_d2f+0xf4>
 80024dc:	2680      	movs	r6, #128	; 0x80
 80024de:	0436      	lsls	r6, r6, #16
 80024e0:	432e      	orrs	r6, r5
 80024e2:	251e      	movs	r5, #30
 80024e4:	1a6d      	subs	r5, r5, r1
 80024e6:	2d1f      	cmp	r5, #31
 80024e8:	dd11      	ble.n	800250e <__aeabi_d2f+0xc6>
 80024ea:	2202      	movs	r2, #2
 80024ec:	4252      	negs	r2, r2
 80024ee:	1a52      	subs	r2, r2, r1
 80024f0:	0031      	movs	r1, r6
 80024f2:	40d1      	lsrs	r1, r2
 80024f4:	2d20      	cmp	r5, #32
 80024f6:	d004      	beq.n	8002502 <__aeabi_d2f+0xba>
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <__aeabi_d2f+0x104>)
 80024fa:	4694      	mov	ip, r2
 80024fc:	4463      	add	r3, ip
 80024fe:	409e      	lsls	r6, r3
 8002500:	4337      	orrs	r7, r6
 8002502:	003a      	movs	r2, r7
 8002504:	1e53      	subs	r3, r2, #1
 8002506:	419a      	sbcs	r2, r3
 8002508:	430a      	orrs	r2, r1
 800250a:	2100      	movs	r1, #0
 800250c:	e7ce      	b.n	80024ac <__aeabi_d2f+0x64>
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <__aeabi_d2f+0x108>)
 8002510:	0038      	movs	r0, r7
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	4098      	lsls	r0, r3
 8002518:	003a      	movs	r2, r7
 800251a:	1e41      	subs	r1, r0, #1
 800251c:	4188      	sbcs	r0, r1
 800251e:	409e      	lsls	r6, r3
 8002520:	40ea      	lsrs	r2, r5
 8002522:	4330      	orrs	r0, r6
 8002524:	4302      	orrs	r2, r0
 8002526:	2100      	movs	r1, #0
 8002528:	0753      	lsls	r3, r2, #29
 800252a:	d1c1      	bne.n	80024b0 <__aeabi_d2f+0x68>
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0013      	movs	r3, r2
 8002530:	04c9      	lsls	r1, r1, #19
 8002532:	2001      	movs	r0, #1
 8002534:	400b      	ands	r3, r1
 8002536:	420a      	tst	r2, r1
 8002538:	d1c6      	bne.n	80024c8 <__aeabi_d2f+0x80>
 800253a:	e7a3      	b.n	8002484 <__aeabi_d2f+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	e7a0      	b.n	8002482 <__aeabi_d2f+0x3a>
 8002540:	000b      	movs	r3, r1
 8002542:	e79f      	b.n	8002484 <__aeabi_d2f+0x3c>
 8002544:	000007fe 	.word	0x000007fe
 8002548:	fffffc80 	.word	0xfffffc80
 800254c:	fffffca2 	.word	0xfffffca2
 8002550:	fffffc82 	.word	0xfffffc82

08002554 <__clzsi2>:
 8002554:	211c      	movs	r1, #28
 8002556:	2301      	movs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	4298      	cmp	r0, r3
 800255c:	d301      	bcc.n	8002562 <__clzsi2+0xe>
 800255e:	0c00      	lsrs	r0, r0, #16
 8002560:	3910      	subs	r1, #16
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	4298      	cmp	r0, r3
 8002566:	d301      	bcc.n	800256c <__clzsi2+0x18>
 8002568:	0a00      	lsrs	r0, r0, #8
 800256a:	3908      	subs	r1, #8
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	4298      	cmp	r0, r3
 8002570:	d301      	bcc.n	8002576 <__clzsi2+0x22>
 8002572:	0900      	lsrs	r0, r0, #4
 8002574:	3904      	subs	r1, #4
 8002576:	a202      	add	r2, pc, #8	; (adr r2, 8002580 <__clzsi2+0x2c>)
 8002578:	5c10      	ldrb	r0, [r2, r0]
 800257a:	1840      	adds	r0, r0, r1
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	02020304 	.word	0x02020304
 8002584:	01010101 	.word	0x01010101
	...

08002590 <__clzdi2>:
 8002590:	b510      	push	{r4, lr}
 8002592:	2900      	cmp	r1, #0
 8002594:	d103      	bne.n	800259e <__clzdi2+0xe>
 8002596:	f7ff ffdd 	bl	8002554 <__clzsi2>
 800259a:	3020      	adds	r0, #32
 800259c:	e002      	b.n	80025a4 <__clzdi2+0x14>
 800259e:	0008      	movs	r0, r1
 80025a0:	f7ff ffd8 	bl	8002554 <__clzsi2>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b5b0      	push	{r4, r5, r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025ae:	f001 f915 	bl	80037dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b2:	f000 fa15 	bl	80029e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025b6:	f000 fc51 	bl	8002e5c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80025ba:	f000 fbcd 	bl	8002d58 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80025be:	f000 fb7d 	bl	8002cbc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80025c2:	f000 fc17 	bl	8002df4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80025c6:	f000 fa57 	bl	8002a78 <MX_I2C1_Init>
  MX_TIM6_Init();
 80025ca:	f000 fb39 	bl	8002c40 <MX_TIM6_Init>
  MX_RTC_Init();
 80025ce:	f000 fa93 	bl	8002af8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit ( &huart2 , (uint8_t*) hello , strlen (hello) , UART_TIMEOUT ) ;
 80025d2:	4bb0      	ldr	r3, [pc, #704]	; (8002894 <main+0x2ec>)
 80025d4:	681c      	ldr	r4, [r3, #0]
 80025d6:	4baf      	ldr	r3, [pc, #700]	; (8002894 <main+0x2ec>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	0018      	movs	r0, r3
 80025dc:	f7fd fd92 	bl	8000104 <strlen>
 80025e0:	0003      	movs	r3, r0
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	23fa      	movs	r3, #250	; 0xfa
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	48ab      	ldr	r0, [pc, #684]	; (8002898 <main+0x2f0>)
 80025ea:	0021      	movs	r1, r4
 80025ec:	f003 fdba 	bl	8006164 <HAL_UART_Transmit>
  __HAL_TIM_CLEAR_IT ( &htim6 , TIM_IT_UPDATE ) ;
 80025f0:	4baa      	ldr	r3, [pc, #680]	; (800289c <main+0x2f4>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2202      	movs	r2, #2
 80025f6:	4252      	negs	r2, r2
 80025f8:	611a      	str	r2, [r3, #16]
  my_astro_off () ;
 80025fa:	f000 fd77 	bl	80030ec <my_astro_off>
  HAL_Delay ( 1000 ) ; // TO JEST KONIECZNE! Chodzi o to, żeby po restarcie przed wgraniem firmware nie rozpoczęła siękomunikacja z Astro, co potem zawiesza komunikację z Astro się nie zawieszała po ponownym restarcie po wgraniu nowego firmware
 80025fe:	23fa      	movs	r3, #250	; 0xfa
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	0018      	movs	r0, r3
 8002604:	f001 f970 	bl	80038e8 <HAL_Delay>
  my_astro_on () ;
 8002608:	f000 fd62 	bl	80030d0 <my_astro_on>
  reset_astronode () ;
 800260c:	f000 fce4 	bl	8002fd8 <reset_astronode>
  print_housekeeping_timer = get_systick () ;
 8002610:	f000 fd40 	bl	8003094 <get_systick>
 8002614:	0002      	movs	r2, r0
 8002616:	4ba2      	ldr	r3, [pc, #648]	; (80028a0 <main+0x2f8>)
 8002618:	601a      	str	r2, [r3, #0]
  astronode_send_cfg_wr ( true , true , true , false , true , true , true , false ) ;
 800261a:	2300      	movs	r3, #0
 800261c:	9303      	str	r3, [sp, #12]
 800261e:	2301      	movs	r3, #1
 8002620:	9302      	str	r3, [sp, #8]
 8002622:	2301      	movs	r3, #1
 8002624:	9301      	str	r3, [sp, #4]
 8002626:	2301      	movs	r3, #1
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	2300      	movs	r3, #0
 800262c:	2201      	movs	r2, #1
 800262e:	2101      	movs	r1, #1
 8002630:	2001      	movs	r0, #1
 8002632:	f004 fcef 	bl	8007014 <astronode_send_cfg_wr>
  astronode_send_cfg_sr () ;
 8002636:	f004 fcb5 	bl	8006fa4 <astronode_send_cfg_sr>
  astronode_send_mpn_rr () ;
 800263a:	f005 fa49 	bl	8007ad0 <astronode_send_mpn_rr>
  astronode_send_msn_rr () ;
 800263e:	f004 fe3d 	bl	80072bc <astronode_send_msn_rr>
  astronode_send_mgi_rr () ;
 8002642:	f004 fd91 	bl	8007168 <astronode_send_mgi_rr>
  //my_astro_off () ;




  my_lx6_on () ;
 8002646:	f000 fd63 	bl	8003110 <my_lx6_on>
  astro_geo_wr_latitude = 0 ;
 800264a:	4b96      	ldr	r3, [pc, #600]	; (80028a4 <main+0x2fc>)
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
  astro_geo_wr_longitude = 0 ;
 8002650:	4b95      	ldr	r3, [pc, #596]	; (80028a8 <main+0x300>)
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
  nmea_latitude_s[0] = 0 ;
 8002656:	4b95      	ldr	r3, [pc, #596]	; (80028ac <main+0x304>)
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]
  nmea_longitude_s[0] = 0 ;
 800265c:	4b94      	ldr	r3, [pc, #592]	; (80028b0 <main+0x308>)
 800265e:	2200      	movs	r2, #0
 8002660:	701a      	strb	r2, [r3, #0]
  gngll_message[0] = 0 ;
 8002662:	4b94      	ldr	r3, [pc, #592]	; (80028b4 <main+0x30c>)
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]
  nmea_fixed_pdop_d = 1000.0 ;
 8002668:	4993      	ldr	r1, [pc, #588]	; (80028b8 <main+0x310>)
 800266a:	2200      	movs	r2, #0
 800266c:	4b93      	ldr	r3, [pc, #588]	; (80028bc <main+0x314>)
 800266e:	600a      	str	r2, [r1, #0]
 8002670:	604b      	str	r3, [r1, #4]
  received_nmea_rmc_flag = false ;
 8002672:	4b93      	ldr	r3, [pc, #588]	; (80028c0 <main+0x318>)
 8002674:	2200      	movs	r2, #0
 8002676:	701a      	strb	r2, [r3, #0]
  tim_seconds = 0 ;
 8002678:	4b92      	ldr	r3, [pc, #584]	; (80028c4 <main+0x31c>)
 800267a:	2200      	movs	r2, #0
 800267c:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start_IT ( &htim6 ) ;
 800267e:	4b87      	ldr	r3, [pc, #540]	; (800289c <main+0x2f4>)
 8002680:	0018      	movs	r0, r3
 8002682:	f003 f9f7 	bl	8005a74 <HAL_TIM_Base_Start_IT>
  while ( tim_seconds < nmea_max_active_time ) // 1200 = 10 min.
 8002686:	e09d      	b.n	80027c4 <main+0x21c>
  {
	  HAL_UART_Receive ( HUART_Lx6 , &rxd_byte , 1 , UART_TIMEOUT ) ;
 8002688:	23fa      	movs	r3, #250	; 0xfa
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	498e      	ldr	r1, [pc, #568]	; (80028c8 <main+0x320>)
 800268e:	488f      	ldr	r0, [pc, #572]	; (80028cc <main+0x324>)
 8002690:	2201      	movs	r2, #1
 8002692:	f003 fe03 	bl	800629c <HAL_UART_Receive>
	  //HAL_UART_Receive ( HUART_DBG , &rxd_byte , 1 , UART_TIMEOUT ) ; // Receive nmea from DBG "sim_nmea_uart" python script
	  HAL_UART_Transmit ( HUART_DBG , &rxd_byte , 1 , UART_TIMEOUT ) ; // Transmit all nmea to DBG
 8002696:	23fa      	movs	r3, #250	; 0xfa
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	498b      	ldr	r1, [pc, #556]	; (80028c8 <main+0x320>)
 800269c:	487e      	ldr	r0, [pc, #504]	; (8002898 <main+0x2f0>)
 800269e:	2201      	movs	r2, #1
 80026a0:	f003 fd60 	bl	8006164 <HAL_UART_Transmit>
	  if ( rxd_byte )
 80026a4:	4b88      	ldr	r3, [pc, #544]	; (80028c8 <main+0x320>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d064      	beq.n	8002776 <main+0x1ce>
	  {
		  if ( my_nmea_message ( &rxd_byte , nmea_message , &i_nmea ) == 2 )
 80026ac:	4a88      	ldr	r2, [pc, #544]	; (80028d0 <main+0x328>)
 80026ae:	4989      	ldr	r1, [pc, #548]	; (80028d4 <main+0x32c>)
 80026b0:	4b85      	ldr	r3, [pc, #532]	; (80028c8 <main+0x320>)
 80026b2:	0018      	movs	r0, r3
 80026b4:	f006 f9e1 	bl	8008a7a <my_nmea_message>
 80026b8:	0003      	movs	r3, r0
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d15b      	bne.n	8002776 <main+0x1ce>
		  {
			  if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 80026be:	4b85      	ldr	r3, [pc, #532]	; (80028d4 <main+0x32c>)
 80026c0:	0018      	movs	r0, r3
 80026c2:	f006 fa9a 	bl	8008bfa <is_my_nmea_checksum_ok>
 80026c6:	1e03      	subs	r3, r0, #0
 80026c8:	d055      	beq.n	8002776 <main+0x1ce>
			  {
				  if ( strstr ( (char*) nmea_message , nmea_rmc_label ) && !received_nmea_rmc_flag )
 80026ca:	4b83      	ldr	r3, [pc, #524]	; (80028d8 <main+0x330>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	4b81      	ldr	r3, [pc, #516]	; (80028d4 <main+0x32c>)
 80026d0:	0011      	movs	r1, r2
 80026d2:	0018      	movs	r0, r3
 80026d4:	f008 f89f 	bl	800a816 <strstr>
 80026d8:	1e03      	subs	r3, r0, #0
 80026da:	d00d      	beq.n	80026f8 <main+0x150>
 80026dc:	4b78      	ldr	r3, [pc, #480]	; (80028c0 <main+0x318>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2201      	movs	r2, #1
 80026e2:	4053      	eors	r3, r2
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d006      	beq.n	80026f8 <main+0x150>
				  {
					  set_my_rtc_from_nmea_rmc ( (char*) nmea_message ) ;
 80026ea:	4b7a      	ldr	r3, [pc, #488]	; (80028d4 <main+0x32c>)
 80026ec:	0018      	movs	r0, r3
 80026ee:	f006 f8df 	bl	80088b0 <set_my_rtc_from_nmea_rmc>
					  received_nmea_rmc_flag = true ;
 80026f2:	4b73      	ldr	r3, [pc, #460]	; (80028c0 <main+0x318>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	701a      	strb	r2, [r3, #0]
				  }
				  if ( strstr ( (char*) nmea_message , nmea_gngsa_label ) )
 80026f8:	4b78      	ldr	r3, [pc, #480]	; (80028dc <main+0x334>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	4b75      	ldr	r3, [pc, #468]	; (80028d4 <main+0x32c>)
 80026fe:	0011      	movs	r1, r2
 8002700:	0018      	movs	r0, r3
 8002702:	f008 f888 	bl	800a816 <strstr>
 8002706:	1e03      	subs	r3, r0, #0
 8002708:	d010      	beq.n	800272c <main+0x184>
				  {
					  nmea_fixed_mode_s = get_my_nmea_gngsa_fixed_mode_s ( (char*) nmea_message ) ;
 800270a:	4b72      	ldr	r3, [pc, #456]	; (80028d4 <main+0x32c>)
 800270c:	0018      	movs	r0, r3
 800270e:	f006 fa20 	bl	8008b52 <get_my_nmea_gngsa_fixed_mode_s>
 8002712:	0003      	movs	r3, r0
 8002714:	001a      	movs	r2, r3
 8002716:	4b72      	ldr	r3, [pc, #456]	; (80028e0 <main+0x338>)
 8002718:	701a      	strb	r2, [r3, #0]
					  nmea_fixed_pdop_d = get_my_nmea_gngsa_pdop_d ( (char*) nmea_message ) ;
 800271a:	4b6e      	ldr	r3, [pc, #440]	; (80028d4 <main+0x32c>)
 800271c:	0018      	movs	r0, r3
 800271e:	f006 fa23 	bl	8008b68 <get_my_nmea_gngsa_pdop_d>
 8002722:	0002      	movs	r2, r0
 8002724:	000b      	movs	r3, r1
 8002726:	4964      	ldr	r1, [pc, #400]	; (80028b8 <main+0x310>)
 8002728:	600a      	str	r2, [r1, #0]
 800272a:	604b      	str	r3, [r1, #4]
				  }
				  if ( strstr ( (char*) nmea_message , nmea_gngll_label ) /*&& nmea_fixed_pdop_d <= nmea_pdop_ths */)
 800272c:	4b6d      	ldr	r3, [pc, #436]	; (80028e4 <main+0x33c>)
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	4b68      	ldr	r3, [pc, #416]	; (80028d4 <main+0x32c>)
 8002732:	0011      	movs	r1, r2
 8002734:	0018      	movs	r0, r3
 8002736:	f008 f86e 	bl	800a816 <strstr>
 800273a:	1e03      	subs	r3, r0, #0
 800273c:	d01b      	beq.n	8002776 <main+0x1ce>
				  {
					  if ( nmea_fixed_pdop_d <= nmea_pdop_ths )
 800273e:	4b5e      	ldr	r3, [pc, #376]	; (80028b8 <main+0x310>)
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	6859      	ldr	r1, [r3, #4]
 8002744:	4b68      	ldr	r3, [pc, #416]	; (80028e8 <main+0x340>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f7fd fe8d 	bl	8000468 <__aeabi_dcmple>
 800274e:	1e03      	subs	r3, r0, #0
 8002750:	d009      	beq.n	8002766 <main+0x1be>
					  {
						  get_my_nmea_gngll_coordinates ( (char*) nmea_message , nmea_latitude_s , nmea_longitude_s , &astro_geo_wr_latitude , &astro_geo_wr_longitude ) ; // Nie musze nic kombinować z przenoszeniem tej operacji, bo po niej nie będzie już dalej odbierania wiadomości tylko wyjście
 8002752:	4c54      	ldr	r4, [pc, #336]	; (80028a4 <main+0x2fc>)
 8002754:	4a56      	ldr	r2, [pc, #344]	; (80028b0 <main+0x308>)
 8002756:	4955      	ldr	r1, [pc, #340]	; (80028ac <main+0x304>)
 8002758:	485e      	ldr	r0, [pc, #376]	; (80028d4 <main+0x32c>)
 800275a:	4b53      	ldr	r3, [pc, #332]	; (80028a8 <main+0x300>)
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	0023      	movs	r3, r4
 8002760:	f006 fb06 	bl	8008d70 <get_my_nmea_gngll_coordinates>
 8002764:	e007      	b.n	8002776 <main+0x1ce>
					  }
					  else
					  {
						  memcpy ( gngll_message , nmea_message , NMEA_MESSAGE_SIZE ) ; // Zapisuję, żeby potem, jak nie osiągnę jakości nmea_pdop_ths to wykorzystać coordinates do payload
 8002766:	4a53      	ldr	r2, [pc, #332]	; (80028b4 <main+0x30c>)
 8002768:	4b5a      	ldr	r3, [pc, #360]	; (80028d4 <main+0x32c>)
 800276a:	0010      	movs	r0, r2
 800276c:	0019      	movs	r1, r3
 800276e:	23fa      	movs	r3, #250	; 0xfa
 8002770:	001a      	movs	r2, r3
 8002772:	f008 f908 	bl	800a986 <memcpy>
					  }
				  }
			  }
		  }
	  }
	  rxd_byte = 0 ;
 8002776:	4b54      	ldr	r3, [pc, #336]	; (80028c8 <main+0x320>)
 8002778:	2200      	movs	r2, #0
 800277a:	701a      	strb	r2, [r3, #0]
	  if ( tim_seconds > nmea_max_rmc_time && !received_nmea_rmc_flag )
 800277c:	4b51      	ldr	r3, [pc, #324]	; (80028c4 <main+0x31c>)
 800277e:	881a      	ldrh	r2, [r3, #0]
 8002780:	4b5a      	ldr	r3, [pc, #360]	; (80028ec <main+0x344>)
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	d906      	bls.n	8002796 <main+0x1ee>
 8002788:	4b4d      	ldr	r3, [pc, #308]	; (80028c0 <main+0x318>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2201      	movs	r2, #1
 800278e:	4053      	eors	r3, r2
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d11e      	bne.n	80027d4 <main+0x22c>
	  {
		  break ;
	  }
	  if ( nmea_fixed_pdop_d <= nmea_pdop_ths )
 8002796:	4b48      	ldr	r3, [pc, #288]	; (80028b8 <main+0x310>)
 8002798:	6818      	ldr	r0, [r3, #0]
 800279a:	6859      	ldr	r1, [r3, #4]
 800279c:	4b52      	ldr	r3, [pc, #328]	; (80028e8 <main+0x340>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f7fd fe61 	bl	8000468 <__aeabi_dcmple>
 80027a6:	1e03      	subs	r3, r0, #0
 80027a8:	d100      	bne.n	80027ac <main+0x204>
 80027aa:	e00b      	b.n	80027c4 <main+0x21c>
	  {
		  if ( nmea_latitude_s[0] != 0 )
 80027ac:	4b3f      	ldr	r3, [pc, #252]	; (80028ac <main+0x304>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d007      	beq.n	80027c4 <main+0x21c>
		  {
			  if ( nmea_fixed_mode_s == NMEA_3D_FIX )
 80027b4:	4b4a      	ldr	r3, [pc, #296]	; (80028e0 <main+0x338>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b33      	cmp	r3, #51	; 0x33
 80027ba:	d103      	bne.n	80027c4 <main+0x21c>
			  {
				  if ( received_nmea_rmc_flag )
 80027bc:	4b40      	ldr	r3, [pc, #256]	; (80028c0 <main+0x318>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d109      	bne.n	80027d8 <main+0x230>
  while ( tim_seconds < nmea_max_active_time ) // 1200 = 10 min.
 80027c4:	4b3f      	ldr	r3, [pc, #252]	; (80028c4 <main+0x31c>)
 80027c6:	881a      	ldrh	r2, [r3, #0]
 80027c8:	4b49      	ldr	r3, [pc, #292]	; (80028f0 <main+0x348>)
 80027ca:	881b      	ldrh	r3, [r3, #0]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d200      	bcs.n	80027d2 <main+0x22a>
 80027d0:	e75a      	b.n	8002688 <main+0xe0>
 80027d2:	e002      	b.n	80027da <main+0x232>
		  break ;
 80027d4:	46c0      	nop			; (mov r8, r8)
 80027d6:	e000      	b.n	80027da <main+0x232>
				  {
					  break ;
 80027d8:	46c0      	nop			; (mov r8, r8)
				  }
			  }
		  }
	  }
  }
  HAL_TIM_Base_Stop_IT ( &htim6 ) ;
 80027da:	4b30      	ldr	r3, [pc, #192]	; (800289c <main+0x2f4>)
 80027dc:	0018      	movs	r0, r3
 80027de:	f003 f9a5 	bl	8005b2c <HAL_TIM_Base_Stop_IT>
  if ( nmea_latitude_s[0] == 0 && gngll_message[0] != 0 ) // Jeśli nie masz współrzędnych pdop to wykorzystaja gorsze i zrób ich backup
 80027e2:	4b32      	ldr	r3, [pc, #200]	; (80028ac <main+0x304>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10c      	bne.n	8002804 <main+0x25c>
 80027ea:	4b32      	ldr	r3, [pc, #200]	; (80028b4 <main+0x30c>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d008      	beq.n	8002804 <main+0x25c>
  {
	  get_my_nmea_gngll_coordinates ( (char*) gngll_message , nmea_latitude_s , nmea_longitude_s , &astro_geo_wr_latitude , &astro_geo_wr_longitude ) ;
 80027f2:	4c2c      	ldr	r4, [pc, #176]	; (80028a4 <main+0x2fc>)
 80027f4:	4a2e      	ldr	r2, [pc, #184]	; (80028b0 <main+0x308>)
 80027f6:	492d      	ldr	r1, [pc, #180]	; (80028ac <main+0x304>)
 80027f8:	482e      	ldr	r0, [pc, #184]	; (80028b4 <main+0x30c>)
 80027fa:	4b2b      	ldr	r3, [pc, #172]	; (80028a8 <main+0x300>)
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	0023      	movs	r3, r4
 8002800:	f006 fab6 	bl	8008d70 <get_my_nmea_gngll_coordinates>
  }
  get_my_rtc_time ( rtc_dt ) ;
 8002804:	4b3b      	ldr	r3, [pc, #236]	; (80028f4 <main+0x34c>)
 8002806:	0018      	movs	r0, r3
 8002808:	f006 f8a8 	bl	800895c <get_my_rtc_time>
  send_debug_logs ( rtc_dt ) ;
 800280c:	4b39      	ldr	r3, [pc, #228]	; (80028f4 <main+0x34c>)
 800280e:	0018      	movs	r0, r3
 8002810:	f000 fbb2 	bl	8002f78 <send_debug_logs>
  astronode_send_geo_wr ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 8002814:	4b23      	ldr	r3, [pc, #140]	; (80028a4 <main+0x2fc>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	4b23      	ldr	r3, [pc, #140]	; (80028a8 <main+0x300>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	0019      	movs	r1, r3
 800281e:	0010      	movs	r0, r2
 8002820:	f004 fed6 	bl	80075d0 <astronode_send_geo_wr>
  sprintf ( payload , "%.1f,%d,%lu" , nmea_fixed_pdop_d , tim_seconds , agg_tim_seconds ) ;
 8002824:	4b24      	ldr	r3, [pc, #144]	; (80028b8 <main+0x310>)
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	4926      	ldr	r1, [pc, #152]	; (80028c4 <main+0x31c>)
 800282c:	8809      	ldrh	r1, [r1, #0]
 800282e:	000d      	movs	r5, r1
 8002830:	4931      	ldr	r1, [pc, #196]	; (80028f8 <main+0x350>)
 8002832:	6809      	ldr	r1, [r1, #0]
 8002834:	4c31      	ldr	r4, [pc, #196]	; (80028fc <main+0x354>)
 8002836:	4832      	ldr	r0, [pc, #200]	; (8002900 <main+0x358>)
 8002838:	9101      	str	r1, [sp, #4]
 800283a:	9500      	str	r5, [sp, #0]
 800283c:	0021      	movs	r1, r4
 800283e:	f007 ff27 	bl	800a690 <sprintf>
  sprintf ( nmea_coordinates_s , "%s,%s" , nmea_latitude_s , nmea_longitude_s ) ;
 8002842:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <main+0x308>)
 8002844:	4a19      	ldr	r2, [pc, #100]	; (80028ac <main+0x304>)
 8002846:	492f      	ldr	r1, [pc, #188]	; (8002904 <main+0x35c>)
 8002848:	482f      	ldr	r0, [pc, #188]	; (8002908 <main+0x360>)
 800284a:	f007 ff21 	bl	800a690 <sprintf>
  send_debug_logs ( payload ) ;
 800284e:	4b2c      	ldr	r3, [pc, #176]	; (8002900 <main+0x358>)
 8002850:	0018      	movs	r0, r3
 8002852:	f000 fb91 	bl	8002f78 <send_debug_logs>
  send_debug_logs ( payload ) ;
 8002856:	4b2a      	ldr	r3, [pc, #168]	; (8002900 <main+0x358>)
 8002858:	0018      	movs	r0, r3
 800285a:	f000 fb8d 	bl	8002f78 <send_debug_logs>
  if ( strlen ( payload ) <= ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES )
 800285e:	4b28      	ldr	r3, [pc, #160]	; (8002900 <main+0x358>)
 8002860:	0018      	movs	r0, r3
 8002862:	f7fd fc4f 	bl	8000104 <strlen>
 8002866:	0003      	movs	r3, r0
 8002868:	2ba0      	cmp	r3, #160	; 0xa0
 800286a:	d851      	bhi.n	8002910 <main+0x368>
  {
	  g_payload_id_counter++ ;
 800286c:	4b27      	ldr	r3, [pc, #156]	; (800290c <main+0x364>)
 800286e:	881b      	ldrh	r3, [r3, #0]
 8002870:	3301      	adds	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	4b25      	ldr	r3, [pc, #148]	; (800290c <main+0x364>)
 8002876:	801a      	strh	r2, [r3, #0]
	  astronode_send_pld_er ( g_payload_id_counter , payload , strlen ( payload ) ) ;
 8002878:	4b24      	ldr	r3, [pc, #144]	; (800290c <main+0x364>)
 800287a:	881c      	ldrh	r4, [r3, #0]
 800287c:	4b20      	ldr	r3, [pc, #128]	; (8002900 <main+0x358>)
 800287e:	0018      	movs	r0, r3
 8002880:	f7fd fc40 	bl	8000104 <strlen>
 8002884:	0003      	movs	r3, r0
 8002886:	b29a      	uxth	r2, r3
 8002888:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <main+0x358>)
 800288a:	0019      	movs	r1, r3
 800288c:	0020      	movs	r0, r4
 800288e:	f004 ff5f 	bl	8007750 <astronode_send_pld_er>
 8002892:	e041      	b.n	8002918 <main+0x370>
 8002894:	20000000 	.word	0x20000000
 8002898:	20000864 	.word	0x20000864
 800289c:	20000784 	.word	0x20000784
 80028a0:	20000bdc 	.word	0x20000bdc
 80028a4:	20000bcc 	.word	0x20000bcc
 80028a8:	20000bd0 	.word	0x20000bd0
 80028ac:	20000bb4 	.word	0x20000bb4
 80028b0:	20000bc0 	.word	0x20000bc0
 80028b4:	20000aa0 	.word	0x20000aa0
 80028b8:	20000020 	.word	0x20000020
 80028bc:	408f4000 	.word	0x408f4000
 80028c0:	20000c84 	.word	0x20000c84
 80028c4:	20000bd6 	.word	0x20000bd6
 80028c8:	200009a0 	.word	0x200009a0
 80028cc:	200008f8 	.word	0x200008f8
 80028d0:	20000b9a 	.word	0x20000b9a
 80028d4:	200009a4 	.word	0x200009a4
 80028d8:	2000000c 	.word	0x2000000c
 80028dc:	20000004 	.word	0x20000004
 80028e0:	20000bd4 	.word	0x20000bd4
 80028e4:	20000008 	.word	0x20000008
 80028e8:	20000010 	.word	0x20000010
 80028ec:	20000018 	.word	0x20000018
 80028f0:	2000001a 	.word	0x2000001a
 80028f4:	2000098c 	.word	0x2000098c
 80028f8:	20000bd8 	.word	0x20000bd8
 80028fc:	08011300 	.word	0x08011300
 8002900:	20000be4 	.word	0x20000be4
 8002904:	0801130c 	.word	0x0801130c
 8002908:	20000b9c 	.word	0x20000b9c
 800290c:	20000be0 	.word	0x20000be0
  }
  else
  {
	  send_debug_logs ( "ERROR: Payload exceeded ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES value." ) ;
 8002910:	4b2a      	ldr	r3, [pc, #168]	; (80029bc <main+0x414>)
 8002912:	0018      	movs	r0, r3
 8002914:	f000 fb30 	bl	8002f78 <send_debug_logs>
  //HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  print_housekeeping_timer = get_systick () ;
 8002918:	f000 fbbc 	bl	8003094 <get_systick>
 800291c:	0002      	movs	r2, r0
 800291e:	4b28      	ldr	r3, [pc, #160]	; (80029c0 <main+0x418>)
 8002920:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  if ( is_evt_pin_high() )
 8002922:	f000 fba5 	bl	8003070 <is_evt_pin_high>
 8002926:	1e03      	subs	r3, r0, #0
 8002928:	d027      	beq.n	800297a <main+0x3d2>
	  {
		  send_debug_logs ( "Evt pin is high." ) ;
 800292a:	4b26      	ldr	r3, [pc, #152]	; (80029c4 <main+0x41c>)
 800292c:	0018      	movs	r0, r3
 800292e:	f000 fb23 	bl	8002f78 <send_debug_logs>
		  astronode_send_evt_rr () ;
 8002932:	f004 fdcd 	bl	80074d0 <astronode_send_evt_rr>
		  if (is_sak_available () )
 8002936:	f005 fb25 	bl	8007f84 <is_sak_available>
 800293a:	1e03      	subs	r3, r0, #0
 800293c:	d007      	beq.n	800294e <main+0x3a6>
		  {
			  astronode_send_sak_rr () ;
 800293e:	f005 f831 	bl	80079a4 <astronode_send_sak_rr>
			  astronode_send_sak_cr () ;
 8002942:	f005 f885 	bl	8007a50 <astronode_send_sak_cr>
			  send_debug_logs ( "Message has been acknowledged." ) ;
 8002946:	4b20      	ldr	r3, [pc, #128]	; (80029c8 <main+0x420>)
 8002948:	0018      	movs	r0, r3
 800294a:	f000 fb15 	bl	8002f78 <send_debug_logs>
			  //astronode_send_per_rr () ;
		  }
		  if ( is_astronode_reset () )
 800294e:	f005 fb23 	bl	8007f98 <is_astronode_reset>
 8002952:	1e03      	subs	r3, r0, #0
 8002954:	d005      	beq.n	8002962 <main+0x3ba>
		  {
			  send_debug_logs ( "Terminal has been reset." ) ;
 8002956:	4b1d      	ldr	r3, [pc, #116]	; (80029cc <main+0x424>)
 8002958:	0018      	movs	r0, r3
 800295a:	f000 fb0d 	bl	8002f78 <send_debug_logs>
			  astronode_send_res_cr () ;
 800295e:	f004 ff81 	bl	8007864 <astronode_send_res_cr>
		  }
		  if ( is_command_available () )
 8002962:	f005 fb23 	bl	8007fac <is_command_available>
 8002966:	1e03      	subs	r3, r0, #0
 8002968:	d007      	beq.n	800297a <main+0x3d2>
		  {
			  send_debug_logs ( "Unicast command is available" ) ;
 800296a:	4b19      	ldr	r3, [pc, #100]	; (80029d0 <main+0x428>)
 800296c:	0018      	movs	r0, r3
 800296e:	f000 fb03 	bl	8002f78 <send_debug_logs>
			  astronode_send_cmd_rr () ;
 8002972:	f005 f997 	bl	8007ca4 <astronode_send_cmd_rr>
			  astronode_send_cmd_cr () ;
 8002976:	f005 f955 	bl	8007c24 <astronode_send_cmd_cr>
		  }
	  }
	  if ( get_systick () - print_housekeeping_timer >  astro_message_timer )
 800297a:	f000 fb8b 	bl	8003094 <get_systick>
 800297e:	0002      	movs	r2, r0
 8002980:	4b0f      	ldr	r3, [pc, #60]	; (80029c0 <main+0x418>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	1ad2      	subs	r2, r2, r3
 8002986:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <main+0x42c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d9c9      	bls.n	8002922 <main+0x37a>
	  {
		  astronode_send_rtc_rr ();
 800298e:	f004 ffa9 	bl	80078e4 <astronode_send_rtc_rr>
		  astronode_send_nco_rr () ;
 8002992:	f004 fd3d 	bl	8007410 <astronode_send_nco_rr>
		  //astronode_send_lcd_rr () ;
		  //astronode_send_end_rr () ;
		  //astronode_send_per_rr () ;
		  print_housekeeping_timer = get_systick () ;
 8002996:	f000 fb7d 	bl	8003094 <get_systick>
 800299a:	0002      	movs	r2, r0
 800299c:	4b08      	ldr	r3, [pc, #32]	; (80029c0 <main+0x418>)
 800299e:	601a      	str	r2, [r3, #0]
		  astronode_send_pld_er ( g_payload_id_counter , payload , strlen ( payload ) ) ;
 80029a0:	4b0d      	ldr	r3, [pc, #52]	; (80029d8 <main+0x430>)
 80029a2:	881c      	ldrh	r4, [r3, #0]
 80029a4:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <main+0x434>)
 80029a6:	0018      	movs	r0, r3
 80029a8:	f7fd fbac 	bl	8000104 <strlen>
 80029ac:	0003      	movs	r3, r0
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <main+0x434>)
 80029b2:	0019      	movs	r1, r3
 80029b4:	0020      	movs	r0, r4
 80029b6:	f004 fecb 	bl	8007750 <astronode_send_pld_er>
	  if ( is_evt_pin_high() )
 80029ba:	e7b2      	b.n	8002922 <main+0x37a>
 80029bc:	08011314 	.word	0x08011314
 80029c0:	20000bdc 	.word	0x20000bdc
 80029c4:	08011358 	.word	0x08011358
 80029c8:	0801136c 	.word	0x0801136c
 80029cc:	0801138c 	.word	0x0801138c
 80029d0:	080113a8 	.word	0x080113a8
 80029d4:	20000028 	.word	0x20000028
 80029d8:	20000be0 	.word	0x20000be0
 80029dc:	20000be4 	.word	0x20000be4

080029e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029e0:	b590      	push	{r4, r7, lr}
 80029e2:	b093      	sub	sp, #76	; 0x4c
 80029e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029e6:	2410      	movs	r4, #16
 80029e8:	193b      	adds	r3, r7, r4
 80029ea:	0018      	movs	r0, r3
 80029ec:	2338      	movs	r3, #56	; 0x38
 80029ee:	001a      	movs	r2, r3
 80029f0:	2100      	movs	r1, #0
 80029f2:	f007 fee3 	bl	800a7bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029f6:	003b      	movs	r3, r7
 80029f8:	0018      	movs	r0, r3
 80029fa:	2310      	movs	r3, #16
 80029fc:	001a      	movs	r2, r3
 80029fe:	2100      	movs	r1, #0
 8002a00:	f007 fedc 	bl	800a7bc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a04:	2380      	movs	r3, #128	; 0x80
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f001 fc0b 	bl	8004224 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002a0e:	193b      	adds	r3, r7, r4
 8002a10:	220a      	movs	r2, #10
 8002a12:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a14:	193b      	adds	r3, r7, r4
 8002a16:	2280      	movs	r2, #128	; 0x80
 8002a18:	0052      	lsls	r2, r2, #1
 8002a1a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002a1c:	0021      	movs	r1, r4
 8002a1e:	187b      	adds	r3, r7, r1
 8002a20:	2200      	movs	r2, #0
 8002a22:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a24:	187b      	adds	r3, r7, r1
 8002a26:	2240      	movs	r2, #64	; 0x40
 8002a28:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002a2a:	187b      	adds	r3, r7, r1
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002a30:	187b      	adds	r3, r7, r1
 8002a32:	2200      	movs	r2, #0
 8002a34:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a36:	187b      	adds	r3, r7, r1
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f001 fc3f 	bl	80042bc <HAL_RCC_OscConfig>
 8002a3e:	1e03      	subs	r3, r0, #0
 8002a40:	d001      	beq.n	8002a46 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002a42:	f000 fb95 	bl	8003170 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a46:	003b      	movs	r3, r7
 8002a48:	2207      	movs	r2, #7
 8002a4a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002a4c:	003b      	movs	r3, r7
 8002a4e:	2200      	movs	r2, #0
 8002a50:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a52:	003b      	movs	r3, r7
 8002a54:	2200      	movs	r2, #0
 8002a56:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a58:	003b      	movs	r3, r7
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002a5e:	003b      	movs	r3, r7
 8002a60:	2100      	movs	r1, #0
 8002a62:	0018      	movs	r0, r3
 8002a64:	f001 ff44 	bl	80048f0 <HAL_RCC_ClockConfig>
 8002a68:	1e03      	subs	r3, r0, #0
 8002a6a:	d001      	beq.n	8002a70 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002a6c:	f000 fb80 	bl	8003170 <Error_Handler>
  }
}
 8002a70:	46c0      	nop			; (mov r8, r8)
 8002a72:	46bd      	mov	sp, r7
 8002a74:	b013      	add	sp, #76	; 0x4c
 8002a76:	bd90      	pop	{r4, r7, pc}

08002a78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a7c:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <MX_I2C1_Init+0x74>)
 8002a7e:	4a1c      	ldr	r2, [pc, #112]	; (8002af0 <MX_I2C1_Init+0x78>)
 8002a80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8002a82:	4b1a      	ldr	r3, [pc, #104]	; (8002aec <MX_I2C1_Init+0x74>)
 8002a84:	4a1b      	ldr	r2, [pc, #108]	; (8002af4 <MX_I2C1_Init+0x7c>)
 8002a86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002a88:	4b18      	ldr	r3, [pc, #96]	; (8002aec <MX_I2C1_Init+0x74>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a8e:	4b17      	ldr	r3, [pc, #92]	; (8002aec <MX_I2C1_Init+0x74>)
 8002a90:	2201      	movs	r2, #1
 8002a92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a94:	4b15      	ldr	r3, [pc, #84]	; (8002aec <MX_I2C1_Init+0x74>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002a9a:	4b14      	ldr	r3, [pc, #80]	; (8002aec <MX_I2C1_Init+0x74>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002aa0:	4b12      	ldr	r3, [pc, #72]	; (8002aec <MX_I2C1_Init+0x74>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002aa6:	4b11      	ldr	r3, [pc, #68]	; (8002aec <MX_I2C1_Init+0x74>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002aac:	4b0f      	ldr	r3, [pc, #60]	; (8002aec <MX_I2C1_Init+0x74>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ab2:	4b0e      	ldr	r3, [pc, #56]	; (8002aec <MX_I2C1_Init+0x74>)
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	f001 fa87 	bl	8003fc8 <HAL_I2C_Init>
 8002aba:	1e03      	subs	r3, r0, #0
 8002abc:	d001      	beq.n	8002ac2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002abe:	f000 fb57 	bl	8003170 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <MX_I2C1_Init+0x74>)
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f001 fb14 	bl	80040f4 <HAL_I2CEx_ConfigAnalogFilter>
 8002acc:	1e03      	subs	r3, r0, #0
 8002ace:	d001      	beq.n	8002ad4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002ad0:	f000 fb4e 	bl	8003170 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002ad4:	4b05      	ldr	r3, [pc, #20]	; (8002aec <MX_I2C1_Init+0x74>)
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	0018      	movs	r0, r3
 8002ada:	f001 fb57 	bl	800418c <HAL_I2CEx_ConfigDigitalFilter>
 8002ade:	1e03      	subs	r3, r0, #0
 8002ae0:	d001      	beq.n	8002ae6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002ae2:	f000 fb45 	bl	8003170 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20000704 	.word	0x20000704
 8002af0:	40005400 	.word	0x40005400
 8002af4:	00303d5b 	.word	0x00303d5b

08002af8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b090      	sub	sp, #64	; 0x40
 8002afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002afe:	232c      	movs	r3, #44	; 0x2c
 8002b00:	18fb      	adds	r3, r7, r3
 8002b02:	0018      	movs	r0, r3
 8002b04:	2314      	movs	r3, #20
 8002b06:	001a      	movs	r2, r3
 8002b08:	2100      	movs	r1, #0
 8002b0a:	f007 fe57 	bl	800a7bc <memset>
  RTC_DateTypeDef sDate = {0};
 8002b0e:	2328      	movs	r3, #40	; 0x28
 8002b10:	18fb      	adds	r3, r7, r3
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8002b16:	003b      	movs	r3, r7
 8002b18:	0018      	movs	r0, r3
 8002b1a:	2328      	movs	r3, #40	; 0x28
 8002b1c:	001a      	movs	r2, r3
 8002b1e:	2100      	movs	r1, #0
 8002b20:	f007 fe4c 	bl	800a7bc <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002b24:	4b44      	ldr	r3, [pc, #272]	; (8002c38 <MX_RTC_Init+0x140>)
 8002b26:	4a45      	ldr	r2, [pc, #276]	; (8002c3c <MX_RTC_Init+0x144>)
 8002b28:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002b2a:	4b43      	ldr	r3, [pc, #268]	; (8002c38 <MX_RTC_Init+0x140>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8002b30:	4b41      	ldr	r3, [pc, #260]	; (8002c38 <MX_RTC_Init+0x140>)
 8002b32:	227f      	movs	r2, #127	; 0x7f
 8002b34:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8002b36:	4b40      	ldr	r3, [pc, #256]	; (8002c38 <MX_RTC_Init+0x140>)
 8002b38:	22ff      	movs	r2, #255	; 0xff
 8002b3a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002b3c:	4b3e      	ldr	r3, [pc, #248]	; (8002c38 <MX_RTC_Init+0x140>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002b42:	4b3d      	ldr	r3, [pc, #244]	; (8002c38 <MX_RTC_Init+0x140>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002b48:	4b3b      	ldr	r3, [pc, #236]	; (8002c38 <MX_RTC_Init+0x140>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002b4e:	4b3a      	ldr	r3, [pc, #232]	; (8002c38 <MX_RTC_Init+0x140>)
 8002b50:	2280      	movs	r2, #128	; 0x80
 8002b52:	05d2      	lsls	r2, r2, #23
 8002b54:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002b56:	4b38      	ldr	r3, [pc, #224]	; (8002c38 <MX_RTC_Init+0x140>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002b5c:	4b36      	ldr	r3, [pc, #216]	; (8002c38 <MX_RTC_Init+0x140>)
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f002 fa28 	bl	8004fb4 <HAL_RTC_Init>
 8002b64:	1e03      	subs	r3, r0, #0
 8002b66:	d001      	beq.n	8002b6c <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8002b68:	f000 fb02 	bl	8003170 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002b6c:	212c      	movs	r1, #44	; 0x2c
 8002b6e:	187b      	adds	r3, r7, r1
 8002b70:	2200      	movs	r2, #0
 8002b72:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002b74:	187b      	adds	r3, r7, r1
 8002b76:	2200      	movs	r2, #0
 8002b78:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8002b7a:	187b      	adds	r3, r7, r1
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8002b80:	187b      	adds	r3, r7, r1
 8002b82:	2200      	movs	r2, #0
 8002b84:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002b86:	187b      	adds	r3, r7, r1
 8002b88:	2200      	movs	r2, #0
 8002b8a:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002b8c:	187b      	adds	r3, r7, r1
 8002b8e:	2200      	movs	r2, #0
 8002b90:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002b92:	1879      	adds	r1, r7, r1
 8002b94:	4b28      	ldr	r3, [pc, #160]	; (8002c38 <MX_RTC_Init+0x140>)
 8002b96:	2201      	movs	r2, #1
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f002 faad 	bl	80050f8 <HAL_RTC_SetTime>
 8002b9e:	1e03      	subs	r3, r0, #0
 8002ba0:	d001      	beq.n	8002ba6 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8002ba2:	f000 fae5 	bl	8003170 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002ba6:	2128      	movs	r1, #40	; 0x28
 8002ba8:	187b      	adds	r3, r7, r1
 8002baa:	2201      	movs	r2, #1
 8002bac:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002bae:	187b      	adds	r3, r7, r1
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002bb4:	187b      	adds	r3, r7, r1
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x24;
 8002bba:	187b      	adds	r3, r7, r1
 8002bbc:	2224      	movs	r2, #36	; 0x24
 8002bbe:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002bc0:	1879      	adds	r1, r7, r1
 8002bc2:	4b1d      	ldr	r3, [pc, #116]	; (8002c38 <MX_RTC_Init+0x140>)
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	f002 fb9a 	bl	8005300 <HAL_RTC_SetDate>
 8002bcc:	1e03      	subs	r3, r0, #0
 8002bce:	d001      	beq.n	8002bd4 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8002bd0:	f000 face 	bl	8003170 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002bd4:	003b      	movs	r3, r7
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002bda:	003b      	movs	r3, r7
 8002bdc:	2200      	movs	r2, #0
 8002bde:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002be0:	003b      	movs	r3, r7
 8002be2:	2200      	movs	r2, #0
 8002be4:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002be6:	003b      	movs	r3, r7
 8002be8:	2200      	movs	r2, #0
 8002bea:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002bec:	003b      	movs	r3, r7
 8002bee:	2200      	movs	r2, #0
 8002bf0:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002bf2:	003b      	movs	r3, r7
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002bf8:	003b      	movs	r3, r7
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002bfe:	003b      	movs	r3, r7
 8002c00:	2200      	movs	r2, #0
 8002c02:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002c04:	003b      	movs	r3, r7
 8002c06:	2200      	movs	r2, #0
 8002c08:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002c0a:	003b      	movs	r3, r7
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	2101      	movs	r1, #1
 8002c10:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002c12:	003b      	movs	r3, r7
 8002c14:	2280      	movs	r2, #128	; 0x80
 8002c16:	0052      	lsls	r2, r2, #1
 8002c18:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002c1a:	0039      	movs	r1, r7
 8002c1c:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <MX_RTC_Init+0x140>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	0018      	movs	r0, r3
 8002c22:	f002 fc4d 	bl	80054c0 <HAL_RTC_SetAlarm>
 8002c26:	1e03      	subs	r3, r0, #0
 8002c28:	d001      	beq.n	8002c2e <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8002c2a:	f000 faa1 	bl	8003170 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002c2e:	46c0      	nop			; (mov r8, r8)
 8002c30:	46bd      	mov	sp, r7
 8002c32:	b010      	add	sp, #64	; 0x40
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	46c0      	nop			; (mov r8, r8)
 8002c38:	20000758 	.word	0x20000758
 8002c3c:	40002800 	.word	0x40002800

08002c40 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c46:	1d3b      	adds	r3, r7, #4
 8002c48:	0018      	movs	r0, r3
 8002c4a:	230c      	movs	r3, #12
 8002c4c:	001a      	movs	r2, r3
 8002c4e:	2100      	movs	r1, #0
 8002c50:	f007 fdb4 	bl	800a7bc <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002c54:	4b15      	ldr	r3, [pc, #84]	; (8002cac <MX_TIM6_Init+0x6c>)
 8002c56:	4a16      	ldr	r2, [pc, #88]	; (8002cb0 <MX_TIM6_Init+0x70>)
 8002c58:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8002c5a:	4b14      	ldr	r3, [pc, #80]	; (8002cac <MX_TIM6_Init+0x6c>)
 8002c5c:	4a15      	ldr	r2, [pc, #84]	; (8002cb4 <MX_TIM6_Init+0x74>)
 8002c5e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c60:	4b12      	ldr	r3, [pc, #72]	; (8002cac <MX_TIM6_Init+0x6c>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002c66:	4b11      	ldr	r3, [pc, #68]	; (8002cac <MX_TIM6_Init+0x6c>)
 8002c68:	4a13      	ldr	r2, [pc, #76]	; (8002cb8 <MX_TIM6_Init+0x78>)
 8002c6a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c6c:	4b0f      	ldr	r3, [pc, #60]	; (8002cac <MX_TIM6_Init+0x6c>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002c72:	4b0e      	ldr	r3, [pc, #56]	; (8002cac <MX_TIM6_Init+0x6c>)
 8002c74:	0018      	movs	r0, r3
 8002c76:	f002 fea4 	bl	80059c2 <HAL_TIM_Base_Init>
 8002c7a:	1e03      	subs	r3, r0, #0
 8002c7c:	d001      	beq.n	8002c82 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002c7e:	f000 fa77 	bl	8003170 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c82:	1d3b      	adds	r3, r7, #4
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c88:	1d3b      	adds	r3, r7, #4
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002c8e:	1d3a      	adds	r2, r7, #4
 8002c90:	4b06      	ldr	r3, [pc, #24]	; (8002cac <MX_TIM6_Init+0x6c>)
 8002c92:	0011      	movs	r1, r2
 8002c94:	0018      	movs	r0, r3
 8002c96:	f003 f949 	bl	8005f2c <HAL_TIMEx_MasterConfigSynchronization>
 8002c9a:	1e03      	subs	r3, r0, #0
 8002c9c:	d001      	beq.n	8002ca2 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002c9e:	f000 fa67 	bl	8003170 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	b004      	add	sp, #16
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	20000784 	.word	0x20000784
 8002cb0:	40001000 	.word	0x40001000
 8002cb4:	00003e7f 	.word	0x00003e7f
 8002cb8:	000003e7 	.word	0x000003e7

08002cbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002cc0:	4b23      	ldr	r3, [pc, #140]	; (8002d50 <MX_USART1_UART_Init+0x94>)
 8002cc2:	4a24      	ldr	r2, [pc, #144]	; (8002d54 <MX_USART1_UART_Init+0x98>)
 8002cc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002cc6:	4b22      	ldr	r3, [pc, #136]	; (8002d50 <MX_USART1_UART_Init+0x94>)
 8002cc8:	2296      	movs	r2, #150	; 0x96
 8002cca:	0192      	lsls	r2, r2, #6
 8002ccc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cce:	4b20      	ldr	r3, [pc, #128]	; (8002d50 <MX_USART1_UART_Init+0x94>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002cd4:	4b1e      	ldr	r3, [pc, #120]	; (8002d50 <MX_USART1_UART_Init+0x94>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002cda:	4b1d      	ldr	r3, [pc, #116]	; (8002d50 <MX_USART1_UART_Init+0x94>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ce0:	4b1b      	ldr	r3, [pc, #108]	; (8002d50 <MX_USART1_UART_Init+0x94>)
 8002ce2:	220c      	movs	r2, #12
 8002ce4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ce6:	4b1a      	ldr	r3, [pc, #104]	; (8002d50 <MX_USART1_UART_Init+0x94>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cec:	4b18      	ldr	r3, [pc, #96]	; (8002d50 <MX_USART1_UART_Init+0x94>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cf2:	4b17      	ldr	r3, [pc, #92]	; (8002d50 <MX_USART1_UART_Init+0x94>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cf8:	4b15      	ldr	r3, [pc, #84]	; (8002d50 <MX_USART1_UART_Init+0x94>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cfe:	4b14      	ldr	r3, [pc, #80]	; (8002d50 <MX_USART1_UART_Init+0x94>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d04:	4b12      	ldr	r3, [pc, #72]	; (8002d50 <MX_USART1_UART_Init+0x94>)
 8002d06:	0018      	movs	r0, r3
 8002d08:	f003 f996 	bl	8006038 <HAL_UART_Init>
 8002d0c:	1e03      	subs	r3, r0, #0
 8002d0e:	d001      	beq.n	8002d14 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002d10:	f000 fa2e 	bl	8003170 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d14:	4b0e      	ldr	r3, [pc, #56]	; (8002d50 <MX_USART1_UART_Init+0x94>)
 8002d16:	2100      	movs	r1, #0
 8002d18:	0018      	movs	r0, r3
 8002d1a:	f004 f863 	bl	8006de4 <HAL_UARTEx_SetTxFifoThreshold>
 8002d1e:	1e03      	subs	r3, r0, #0
 8002d20:	d001      	beq.n	8002d26 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002d22:	f000 fa25 	bl	8003170 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d26:	4b0a      	ldr	r3, [pc, #40]	; (8002d50 <MX_USART1_UART_Init+0x94>)
 8002d28:	2100      	movs	r1, #0
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f004 f89a 	bl	8006e64 <HAL_UARTEx_SetRxFifoThreshold>
 8002d30:	1e03      	subs	r3, r0, #0
 8002d32:	d001      	beq.n	8002d38 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002d34:	f000 fa1c 	bl	8003170 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002d38:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <MX_USART1_UART_Init+0x94>)
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f004 f818 	bl	8006d70 <HAL_UARTEx_DisableFifoMode>
 8002d40:	1e03      	subs	r3, r0, #0
 8002d42:	d001      	beq.n	8002d48 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002d44:	f000 fa14 	bl	8003170 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d48:	46c0      	nop			; (mov r8, r8)
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	200007d0 	.word	0x200007d0
 8002d54:	40013800 	.word	0x40013800

08002d58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d5c:	4b23      	ldr	r3, [pc, #140]	; (8002dec <MX_USART2_UART_Init+0x94>)
 8002d5e:	4a24      	ldr	r2, [pc, #144]	; (8002df0 <MX_USART2_UART_Init+0x98>)
 8002d60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d62:	4b22      	ldr	r3, [pc, #136]	; (8002dec <MX_USART2_UART_Init+0x94>)
 8002d64:	22e1      	movs	r2, #225	; 0xe1
 8002d66:	0252      	lsls	r2, r2, #9
 8002d68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d6a:	4b20      	ldr	r3, [pc, #128]	; (8002dec <MX_USART2_UART_Init+0x94>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d70:	4b1e      	ldr	r3, [pc, #120]	; (8002dec <MX_USART2_UART_Init+0x94>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d76:	4b1d      	ldr	r3, [pc, #116]	; (8002dec <MX_USART2_UART_Init+0x94>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d7c:	4b1b      	ldr	r3, [pc, #108]	; (8002dec <MX_USART2_UART_Init+0x94>)
 8002d7e:	220c      	movs	r2, #12
 8002d80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d82:	4b1a      	ldr	r3, [pc, #104]	; (8002dec <MX_USART2_UART_Init+0x94>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d88:	4b18      	ldr	r3, [pc, #96]	; (8002dec <MX_USART2_UART_Init+0x94>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d8e:	4b17      	ldr	r3, [pc, #92]	; (8002dec <MX_USART2_UART_Init+0x94>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d94:	4b15      	ldr	r3, [pc, #84]	; (8002dec <MX_USART2_UART_Init+0x94>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d9a:	4b14      	ldr	r3, [pc, #80]	; (8002dec <MX_USART2_UART_Init+0x94>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002da0:	4b12      	ldr	r3, [pc, #72]	; (8002dec <MX_USART2_UART_Init+0x94>)
 8002da2:	0018      	movs	r0, r3
 8002da4:	f003 f948 	bl	8006038 <HAL_UART_Init>
 8002da8:	1e03      	subs	r3, r0, #0
 8002daa:	d001      	beq.n	8002db0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002dac:	f000 f9e0 	bl	8003170 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002db0:	4b0e      	ldr	r3, [pc, #56]	; (8002dec <MX_USART2_UART_Init+0x94>)
 8002db2:	2100      	movs	r1, #0
 8002db4:	0018      	movs	r0, r3
 8002db6:	f004 f815 	bl	8006de4 <HAL_UARTEx_SetTxFifoThreshold>
 8002dba:	1e03      	subs	r3, r0, #0
 8002dbc:	d001      	beq.n	8002dc2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002dbe:	f000 f9d7 	bl	8003170 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dc2:	4b0a      	ldr	r3, [pc, #40]	; (8002dec <MX_USART2_UART_Init+0x94>)
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f004 f84c 	bl	8006e64 <HAL_UARTEx_SetRxFifoThreshold>
 8002dcc:	1e03      	subs	r3, r0, #0
 8002dce:	d001      	beq.n	8002dd4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002dd0:	f000 f9ce 	bl	8003170 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002dd4:	4b05      	ldr	r3, [pc, #20]	; (8002dec <MX_USART2_UART_Init+0x94>)
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	f003 ffca 	bl	8006d70 <HAL_UARTEx_DisableFifoMode>
 8002ddc:	1e03      	subs	r3, r0, #0
 8002dde:	d001      	beq.n	8002de4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002de0:	f000 f9c6 	bl	8003170 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002de4:	46c0      	nop			; (mov r8, r8)
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	46c0      	nop			; (mov r8, r8)
 8002dec:	20000864 	.word	0x20000864
 8002df0:	40004400 	.word	0x40004400

08002df4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002df8:	4b16      	ldr	r3, [pc, #88]	; (8002e54 <MX_USART3_UART_Init+0x60>)
 8002dfa:	4a17      	ldr	r2, [pc, #92]	; (8002e58 <MX_USART3_UART_Init+0x64>)
 8002dfc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002dfe:	4b15      	ldr	r3, [pc, #84]	; (8002e54 <MX_USART3_UART_Init+0x60>)
 8002e00:	2296      	movs	r2, #150	; 0x96
 8002e02:	0192      	lsls	r2, r2, #6
 8002e04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e06:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <MX_USART3_UART_Init+0x60>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e0c:	4b11      	ldr	r3, [pc, #68]	; (8002e54 <MX_USART3_UART_Init+0x60>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e12:	4b10      	ldr	r3, [pc, #64]	; (8002e54 <MX_USART3_UART_Init+0x60>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e18:	4b0e      	ldr	r3, [pc, #56]	; (8002e54 <MX_USART3_UART_Init+0x60>)
 8002e1a:	220c      	movs	r2, #12
 8002e1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e1e:	4b0d      	ldr	r3, [pc, #52]	; (8002e54 <MX_USART3_UART_Init+0x60>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e24:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <MX_USART3_UART_Init+0x60>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <MX_USART3_UART_Init+0x60>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e30:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <MX_USART3_UART_Init+0x60>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e36:	4b07      	ldr	r3, [pc, #28]	; (8002e54 <MX_USART3_UART_Init+0x60>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e3c:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <MX_USART3_UART_Init+0x60>)
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f003 f8fa 	bl	8006038 <HAL_UART_Init>
 8002e44:	1e03      	subs	r3, r0, #0
 8002e46:	d001      	beq.n	8002e4c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002e48:	f000 f992 	bl	8003170 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002e4c:	46c0      	nop			; (mov r8, r8)
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	200008f8 	.word	0x200008f8
 8002e58:	40004800 	.word	0x40004800

08002e5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e5c:	b590      	push	{r4, r7, lr}
 8002e5e:	b08b      	sub	sp, #44	; 0x2c
 8002e60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e62:	2414      	movs	r4, #20
 8002e64:	193b      	adds	r3, r7, r4
 8002e66:	0018      	movs	r0, r3
 8002e68:	2314      	movs	r3, #20
 8002e6a:	001a      	movs	r2, r3
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	f007 fca5 	bl	800a7bc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e72:	4b3d      	ldr	r3, [pc, #244]	; (8002f68 <MX_GPIO_Init+0x10c>)
 8002e74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e76:	4b3c      	ldr	r3, [pc, #240]	; (8002f68 <MX_GPIO_Init+0x10c>)
 8002e78:	2104      	movs	r1, #4
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	635a      	str	r2, [r3, #52]	; 0x34
 8002e7e:	4b3a      	ldr	r3, [pc, #232]	; (8002f68 <MX_GPIO_Init+0x10c>)
 8002e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e82:	2204      	movs	r2, #4
 8002e84:	4013      	ands	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]
 8002e88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e8a:	4b37      	ldr	r3, [pc, #220]	; (8002f68 <MX_GPIO_Init+0x10c>)
 8002e8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e8e:	4b36      	ldr	r3, [pc, #216]	; (8002f68 <MX_GPIO_Init+0x10c>)
 8002e90:	2120      	movs	r1, #32
 8002e92:	430a      	orrs	r2, r1
 8002e94:	635a      	str	r2, [r3, #52]	; 0x34
 8002e96:	4b34      	ldr	r3, [pc, #208]	; (8002f68 <MX_GPIO_Init+0x10c>)
 8002e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ea2:	4b31      	ldr	r3, [pc, #196]	; (8002f68 <MX_GPIO_Init+0x10c>)
 8002ea4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ea6:	4b30      	ldr	r3, [pc, #192]	; (8002f68 <MX_GPIO_Init+0x10c>)
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	635a      	str	r2, [r3, #52]	; 0x34
 8002eae:	4b2e      	ldr	r3, [pc, #184]	; (8002f68 <MX_GPIO_Init+0x10c>)
 8002eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	60bb      	str	r3, [r7, #8]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eba:	4b2b      	ldr	r3, [pc, #172]	; (8002f68 <MX_GPIO_Init+0x10c>)
 8002ebc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ebe:	4b2a      	ldr	r3, [pc, #168]	; (8002f68 <MX_GPIO_Init+0x10c>)
 8002ec0:	2102      	movs	r1, #2
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ec6:	4b28      	ldr	r3, [pc, #160]	; (8002f68 <MX_GPIO_Init+0x10c>)
 8002ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eca:	2202      	movs	r2, #2
 8002ecc:	4013      	ands	r3, r2
 8002ece:	607b      	str	r3, [r7, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L86_RST_Pin|ASTRO_RST_Pin|L86_PWR_SW_Pin, GPIO_PIN_RESET);
 8002ed2:	238c      	movs	r3, #140	; 0x8c
 8002ed4:	015b      	lsls	r3, r3, #5
 8002ed6:	4825      	ldr	r0, [pc, #148]	; (8002f6c <MX_GPIO_Init+0x110>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	0019      	movs	r1, r3
 8002edc:	f001 f857 	bl	8003f8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RSTA11_Pin|ASTRO_EVENT_Pin
 8002ee0:	4923      	ldr	r1, [pc, #140]	; (8002f70 <MX_GPIO_Init+0x114>)
 8002ee2:	23a0      	movs	r3, #160	; 0xa0
 8002ee4:	05db      	lsls	r3, r3, #23
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	0018      	movs	r0, r3
 8002eea:	f001 f850 	bl	8003f8e <HAL_GPIO_WritePin>
                          |ASTRO_WAKEUP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : L86_RST_Pin ASTRO_RST_Pin L86_PWR_SW_Pin */
  GPIO_InitStruct.Pin = L86_RST_Pin|ASTRO_RST_Pin|L86_PWR_SW_Pin;
 8002eee:	193b      	adds	r3, r7, r4
 8002ef0:	228c      	movs	r2, #140	; 0x8c
 8002ef2:	0152      	lsls	r2, r2, #5
 8002ef4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ef6:	193b      	adds	r3, r7, r4
 8002ef8:	2201      	movs	r2, #1
 8002efa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efc:	193b      	adds	r3, r7, r4
 8002efe:	2200      	movs	r2, #0
 8002f00:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f02:	193b      	adds	r3, r7, r4
 8002f04:	2200      	movs	r2, #0
 8002f06:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f08:	193b      	adds	r3, r7, r4
 8002f0a:	4a18      	ldr	r2, [pc, #96]	; (8002f6c <MX_GPIO_Init+0x110>)
 8002f0c:	0019      	movs	r1, r3
 8002f0e:	0010      	movs	r0, r2
 8002f10:	f000 fdec 	bl	8003aec <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin ASTRO_PWR_SW_Pin ASTRO_RSTA11_Pin ASTRO_EVENT_Pin
                           ASTRO_WAKEUP_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RSTA11_Pin|ASTRO_EVENT_Pin
 8002f14:	193b      	adds	r3, r7, r4
 8002f16:	4a16      	ldr	r2, [pc, #88]	; (8002f70 <MX_GPIO_Init+0x114>)
 8002f18:	601a      	str	r2, [r3, #0]
                          |ASTRO_WAKEUP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f1a:	193b      	adds	r3, r7, r4
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f20:	193b      	adds	r3, r7, r4
 8002f22:	2200      	movs	r2, #0
 8002f24:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f26:	193b      	adds	r3, r7, r4
 8002f28:	2200      	movs	r2, #0
 8002f2a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f2c:	193a      	adds	r2, r7, r4
 8002f2e:	23a0      	movs	r3, #160	; 0xa0
 8002f30:	05db      	lsls	r3, r3, #23
 8002f32:	0011      	movs	r1, r2
 8002f34:	0018      	movs	r0, r3
 8002f36:	f000 fdd9 	bl	8003aec <HAL_GPIO_Init>

  /*Configure GPIO pins : LIS_INT1_EXTI8_Pin LIS_INT2_EXTI9_Pin */
  GPIO_InitStruct.Pin = LIS_INT1_EXTI8_Pin|LIS_INT2_EXTI9_Pin;
 8002f3a:	0021      	movs	r1, r4
 8002f3c:	187b      	adds	r3, r7, r1
 8002f3e:	22c0      	movs	r2, #192	; 0xc0
 8002f40:	0092      	lsls	r2, r2, #2
 8002f42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f44:	187b      	adds	r3, r7, r1
 8002f46:	2288      	movs	r2, #136	; 0x88
 8002f48:	0352      	lsls	r2, r2, #13
 8002f4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4c:	187b      	adds	r3, r7, r1
 8002f4e:	2200      	movs	r2, #0
 8002f50:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f52:	187b      	adds	r3, r7, r1
 8002f54:	4a07      	ldr	r2, [pc, #28]	; (8002f74 <MX_GPIO_Init+0x118>)
 8002f56:	0019      	movs	r1, r3
 8002f58:	0010      	movs	r0, r2
 8002f5a:	f000 fdc7 	bl	8003aec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	46bd      	mov	sp, r7
 8002f62:	b00b      	add	sp, #44	; 0x2c
 8002f64:	bd90      	pop	{r4, r7, pc}
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	50000800 	.word	0x50000800
 8002f70:	00009860 	.word	0x00009860
 8002f74:	50000400 	.word	0x50000400

08002f78 <send_debug_logs>:

/* USER CODE BEGIN 4 */
void send_debug_logs ( char* p_tx_buffer )
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	0018      	movs	r0, r3
 8002f84:	f7fd f8be 	bl	8000104 <strlen>
 8002f88:	0003      	movs	r3, r0
 8002f8a:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2bfa      	cmp	r3, #250	; 0xfa
 8002f90:	d908      	bls.n	8002fa4 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 8002f92:	23fa      	movs	r3, #250	; 0xfa
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	490d      	ldr	r1, [pc, #52]	; (8002fcc <send_debug_logs+0x54>)
 8002f98:	480d      	ldr	r0, [pc, #52]	; (8002fd0 <send_debug_logs+0x58>)
 8002f9a:	222a      	movs	r2, #42	; 0x2a
 8002f9c:	f003 f8e2 	bl	8006164 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 8002fa0:	23fa      	movs	r3, #250	; 0xfa
 8002fa2:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	23fa      	movs	r3, #250	; 0xfa
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	4808      	ldr	r0, [pc, #32]	; (8002fd0 <send_debug_logs+0x58>)
 8002fb0:	f003 f8d8 	bl	8006164 <HAL_UART_Transmit>
    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8002fb4:	23fa      	movs	r3, #250	; 0xfa
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4906      	ldr	r1, [pc, #24]	; (8002fd4 <send_debug_logs+0x5c>)
 8002fba:	4805      	ldr	r0, [pc, #20]	; (8002fd0 <send_debug_logs+0x58>)
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f003 f8d1 	bl	8006164 <HAL_UART_Transmit>
}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b004      	add	sp, #16
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	46c0      	nop			; (mov r8, r8)
 8002fcc:	080113c8 	.word	0x080113c8
 8002fd0:	20000864 	.word	0x20000864
 8002fd4:	080113f4 	.word	0x080113f4

08002fd8 <reset_astronode>:
void reset_astronode ( void )
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 8002fdc:	4b0a      	ldr	r3, [pc, #40]	; (8003008 <reset_astronode+0x30>)
 8002fde:	2201      	movs	r2, #1
 8002fe0:	2180      	movs	r1, #128	; 0x80
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f000 ffd3 	bl	8003f8e <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 8002fe8:	2001      	movs	r0, #1
 8002fea:	f000 fc7d 	bl	80038e8 <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 8002fee:	4b06      	ldr	r3, [pc, #24]	; (8003008 <reset_astronode+0x30>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2180      	movs	r1, #128	; 0x80
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	f000 ffca 	bl	8003f8e <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 8002ffa:	20fa      	movs	r0, #250	; 0xfa
 8002ffc:	f000 fc74 	bl	80038e8 <HAL_Delay>
}
 8003000:	46c0      	nop			; (mov r8, r8)
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	50000800 	.word	0x50000800

0800300c <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 8003016:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <send_astronode_request+0x34>)
 8003018:	0018      	movs	r0, r3
 800301a:	f7ff ffad 	bl	8002f78 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	0018      	movs	r0, r3
 8003022:	f7ff ffa9 	bl	8002f78 <send_debug_logs>

    HAL_UART_Transmit ( HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	b29a      	uxth	r2, r3
 800302a:	23fa      	movs	r3, #250	; 0xfa
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4804      	ldr	r0, [pc, #16]	; (8003044 <send_astronode_request+0x38>)
 8003032:	f003 f897 	bl	8006164 <HAL_UART_Transmit>
}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	46bd      	mov	sp, r7
 800303a:	b002      	add	sp, #8
 800303c:	bd80      	pop	{r7, pc}
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	080113f8 	.word	0x080113f8
 8003044:	200007d0 	.word	0x200007d0

08003048 <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	4806      	ldr	r0, [pc, #24]	; (800306c <is_astronode_character_received+0x24>)
 8003054:	2364      	movs	r3, #100	; 0x64
 8003056:	2201      	movs	r2, #1
 8003058:	f003 f920 	bl	800629c <HAL_UART_Receive>
 800305c:	0003      	movs	r3, r0
 800305e:	425a      	negs	r2, r3
 8003060:	4153      	adcs	r3, r2
 8003062:	b2db      	uxtb	r3, r3
}
 8003064:	0018      	movs	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	b002      	add	sp, #8
 800306a:	bd80      	pop	{r7, pc}
 800306c:	200007d0 	.word	0x200007d0

08003070 <is_evt_pin_high>:
bool is_evt_pin_high ( void )
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
	return ( HAL_GPIO_ReadPin ( GPIOA , ASTRO_EVENT_Pin ) == GPIO_PIN_SET ? true : false);
 8003074:	2380      	movs	r3, #128	; 0x80
 8003076:	015a      	lsls	r2, r3, #5
 8003078:	23a0      	movs	r3, #160	; 0xa0
 800307a:	05db      	lsls	r3, r3, #23
 800307c:	0011      	movs	r1, r2
 800307e:	0018      	movs	r0, r3
 8003080:	f000 ff68 	bl	8003f54 <HAL_GPIO_ReadPin>
 8003084:	0003      	movs	r3, r0
 8003086:	3b01      	subs	r3, #1
 8003088:	425a      	negs	r2, r3
 800308a:	4153      	adcs	r3, r2
 800308c:	b2db      	uxtb	r3, r3
}
 800308e:	0018      	movs	r0, r3
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <get_systick>:
		astronode_send_cmd_rr () ;
		astronode_send_cmd_cr () ;
	}
}
uint32_t get_systick ( void )
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 8003098:	f000 fc1c 	bl	80038d4 <HAL_GetTick>
 800309c:	0003      	movs	r3, r0
}
 800309e:	0018      	movs	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	000a      	movs	r2, r1
 80030ae:	1cbb      	adds	r3, r7, #2
 80030b0:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 80030b2:	f7ff ffef 	bl	8003094 <get_systick>
 80030b6:	0002      	movs	r2, r0
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	1cba      	adds	r2, r7, #2
 80030be:	8812      	ldrh	r2, [r2, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	419b      	sbcs	r3, r3
 80030c4:	425b      	negs	r3, r3
 80030c6:	b2db      	uxtb	r3, r3
}
 80030c8:	0018      	movs	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	b002      	add	sp, #8
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <my_astro_on>:
void my_ldg_off ( void )
{
	HAL_GPIO_WritePin ( GPIOA , LDG_Pin , GPIO_PIN_RESET ) ;
}
void my_astro_on ( void )
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOA , ASTRO_PWR_SW_Pin , GPIO_PIN_SET ) ;
 80030d4:	23a0      	movs	r3, #160	; 0xa0
 80030d6:	05db      	lsls	r3, r3, #23
 80030d8:	2201      	movs	r2, #1
 80030da:	2140      	movs	r1, #64	; 0x40
 80030dc:	0018      	movs	r0, r3
 80030de:	f000 ff56 	bl	8003f8e <HAL_GPIO_WritePin>
	MX_USART1_UART_Init () ;
 80030e2:	f7ff fdeb 	bl	8002cbc <MX_USART1_UART_Init>
}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <my_astro_off>:
void my_astro_off ( void )
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOA , ASTRO_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 80030f0:	23a0      	movs	r3, #160	; 0xa0
 80030f2:	05db      	lsls	r3, r3, #23
 80030f4:	2200      	movs	r2, #0
 80030f6:	2140      	movs	r1, #64	; 0x40
 80030f8:	0018      	movs	r0, r3
 80030fa:	f000 ff48 	bl	8003f8e <HAL_GPIO_WritePin>
	HAL_UART_DeInit ( HUART_ASTRO ) ;
 80030fe:	4b03      	ldr	r3, [pc, #12]	; (800310c <my_astro_off+0x20>)
 8003100:	0018      	movs	r0, r3
 8003102:	f002 ffef 	bl	80060e4 <HAL_UART_DeInit>
}
 8003106:	46c0      	nop			; (mov r8, r8)
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	200007d0 	.word	0x200007d0

08003110 <my_lx6_on>:
void my_lx6_on ( void )
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOC , L86_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8003114:	2380      	movs	r3, #128	; 0x80
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	4808      	ldr	r0, [pc, #32]	; (800313c <my_lx6_on+0x2c>)
 800311a:	2201      	movs	r2, #1
 800311c:	0019      	movs	r1, r3
 800311e:	f000 ff36 	bl	8003f8e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_SET ) ;
 8003122:	2380      	movs	r3, #128	; 0x80
 8003124:	015b      	lsls	r3, r3, #5
 8003126:	4805      	ldr	r0, [pc, #20]	; (800313c <my_lx6_on+0x2c>)
 8003128:	2201      	movs	r2, #1
 800312a:	0019      	movs	r1, r3
 800312c:	f000 ff2f 	bl	8003f8e <HAL_GPIO_WritePin>
	MX_USART3_UART_Init () ;
 8003130:	f7ff fe60 	bl	8002df4 <MX_USART3_UART_Init>
}
 8003134:	46c0      	nop			; (mov r8, r8)
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	50000800 	.word	0x50000800

08003140 <HAL_TIM_PeriodElapsedCallback>:
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_RESET ) ;
	HAL_UART_DeInit ( HUART_Lx6 ) ;
}

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a06      	ldr	r2, [pc, #24]	; (8003168 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d105      	bne.n	800315e <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		tim_seconds++ ;
 8003152:	4b06      	ldr	r3, [pc, #24]	; (800316c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003154:	881b      	ldrh	r3, [r3, #0]
 8003156:	3301      	adds	r3, #1
 8003158:	b29a      	uxth	r2, r3
 800315a:	4b04      	ldr	r3, [pc, #16]	; (800316c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800315c:	801a      	strh	r2, [r3, #0]
	}
}
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	46bd      	mov	sp, r7
 8003162:	b002      	add	sp, #8
 8003164:	bd80      	pop	{r7, pc}
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	40001000 	.word	0x40001000
 800316c:	20000bd6 	.word	0x20000bd6

08003170 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003174:	b672      	cpsid	i
}
 8003176:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003178:	e7fe      	b.n	8003178 <Error_Handler+0x8>
	...

0800317c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003182:	4b0f      	ldr	r3, [pc, #60]	; (80031c0 <HAL_MspInit+0x44>)
 8003184:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003186:	4b0e      	ldr	r3, [pc, #56]	; (80031c0 <HAL_MspInit+0x44>)
 8003188:	2101      	movs	r1, #1
 800318a:	430a      	orrs	r2, r1
 800318c:	641a      	str	r2, [r3, #64]	; 0x40
 800318e:	4b0c      	ldr	r3, [pc, #48]	; (80031c0 <HAL_MspInit+0x44>)
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	2201      	movs	r2, #1
 8003194:	4013      	ands	r3, r2
 8003196:	607b      	str	r3, [r7, #4]
 8003198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800319a:	4b09      	ldr	r3, [pc, #36]	; (80031c0 <HAL_MspInit+0x44>)
 800319c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800319e:	4b08      	ldr	r3, [pc, #32]	; (80031c0 <HAL_MspInit+0x44>)
 80031a0:	2180      	movs	r1, #128	; 0x80
 80031a2:	0549      	lsls	r1, r1, #21
 80031a4:	430a      	orrs	r2, r1
 80031a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80031a8:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <HAL_MspInit+0x44>)
 80031aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031ac:	2380      	movs	r3, #128	; 0x80
 80031ae:	055b      	lsls	r3, r3, #21
 80031b0:	4013      	ands	r3, r2
 80031b2:	603b      	str	r3, [r7, #0]
 80031b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	46bd      	mov	sp, r7
 80031ba:	b002      	add	sp, #8
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	40021000 	.word	0x40021000

080031c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80031c4:	b590      	push	{r4, r7, lr}
 80031c6:	b097      	sub	sp, #92	; 0x5c
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031cc:	2344      	movs	r3, #68	; 0x44
 80031ce:	18fb      	adds	r3, r7, r3
 80031d0:	0018      	movs	r0, r3
 80031d2:	2314      	movs	r3, #20
 80031d4:	001a      	movs	r2, r3
 80031d6:	2100      	movs	r1, #0
 80031d8:	f007 faf0 	bl	800a7bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031dc:	2410      	movs	r4, #16
 80031de:	193b      	adds	r3, r7, r4
 80031e0:	0018      	movs	r0, r3
 80031e2:	2334      	movs	r3, #52	; 0x34
 80031e4:	001a      	movs	r2, r3
 80031e6:	2100      	movs	r1, #0
 80031e8:	f007 fae8 	bl	800a7bc <memset>
  if(hi2c->Instance==I2C1)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a22      	ldr	r2, [pc, #136]	; (800327c <HAL_I2C_MspInit+0xb8>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d13d      	bne.n	8003272 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80031f6:	193b      	adds	r3, r7, r4
 80031f8:	2220      	movs	r2, #32
 80031fa:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80031fc:	193b      	adds	r3, r7, r4
 80031fe:	2200      	movs	r2, #0
 8003200:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003202:	193b      	adds	r3, r7, r4
 8003204:	0018      	movs	r0, r3
 8003206:	f001 fd1d 	bl	8004c44 <HAL_RCCEx_PeriphCLKConfig>
 800320a:	1e03      	subs	r3, r0, #0
 800320c:	d001      	beq.n	8003212 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800320e:	f7ff ffaf 	bl	8003170 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003212:	4b1b      	ldr	r3, [pc, #108]	; (8003280 <HAL_I2C_MspInit+0xbc>)
 8003214:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003216:	4b1a      	ldr	r3, [pc, #104]	; (8003280 <HAL_I2C_MspInit+0xbc>)
 8003218:	2102      	movs	r1, #2
 800321a:	430a      	orrs	r2, r1
 800321c:	635a      	str	r2, [r3, #52]	; 0x34
 800321e:	4b18      	ldr	r3, [pc, #96]	; (8003280 <HAL_I2C_MspInit+0xbc>)
 8003220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003222:	2202      	movs	r2, #2
 8003224:	4013      	ands	r3, r2
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LIS_SCL_Pin|LIS_SDA_Pin;
 800322a:	2144      	movs	r1, #68	; 0x44
 800322c:	187b      	adds	r3, r7, r1
 800322e:	22c0      	movs	r2, #192	; 0xc0
 8003230:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003232:	187b      	adds	r3, r7, r1
 8003234:	2212      	movs	r2, #18
 8003236:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003238:	187b      	adds	r3, r7, r1
 800323a:	2200      	movs	r2, #0
 800323c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800323e:	187b      	adds	r3, r7, r1
 8003240:	2200      	movs	r2, #0
 8003242:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003244:	187b      	adds	r3, r7, r1
 8003246:	2206      	movs	r2, #6
 8003248:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800324a:	187b      	adds	r3, r7, r1
 800324c:	4a0d      	ldr	r2, [pc, #52]	; (8003284 <HAL_I2C_MspInit+0xc0>)
 800324e:	0019      	movs	r1, r3
 8003250:	0010      	movs	r0, r2
 8003252:	f000 fc4b 	bl	8003aec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003256:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <HAL_I2C_MspInit+0xbc>)
 8003258:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800325a:	4b09      	ldr	r3, [pc, #36]	; (8003280 <HAL_I2C_MspInit+0xbc>)
 800325c:	2180      	movs	r1, #128	; 0x80
 800325e:	0389      	lsls	r1, r1, #14
 8003260:	430a      	orrs	r2, r1
 8003262:	63da      	str	r2, [r3, #60]	; 0x3c
 8003264:	4b06      	ldr	r3, [pc, #24]	; (8003280 <HAL_I2C_MspInit+0xbc>)
 8003266:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003268:	2380      	movs	r3, #128	; 0x80
 800326a:	039b      	lsls	r3, r3, #14
 800326c:	4013      	ands	r3, r2
 800326e:	60bb      	str	r3, [r7, #8]
 8003270:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	46bd      	mov	sp, r7
 8003276:	b017      	add	sp, #92	; 0x5c
 8003278:	bd90      	pop	{r4, r7, pc}
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	40005400 	.word	0x40005400
 8003280:	40021000 	.word	0x40021000
 8003284:	50000400 	.word	0x50000400

08003288 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003288:	b590      	push	{r4, r7, lr}
 800328a:	b091      	sub	sp, #68	; 0x44
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003290:	240c      	movs	r4, #12
 8003292:	193b      	adds	r3, r7, r4
 8003294:	0018      	movs	r0, r3
 8003296:	2334      	movs	r3, #52	; 0x34
 8003298:	001a      	movs	r2, r3
 800329a:	2100      	movs	r1, #0
 800329c:	f007 fa8e 	bl	800a7bc <memset>
  if(hrtc->Instance==RTC)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a15      	ldr	r2, [pc, #84]	; (80032fc <HAL_RTC_MspInit+0x74>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d124      	bne.n	80032f4 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80032aa:	193b      	adds	r3, r7, r4
 80032ac:	2280      	movs	r2, #128	; 0x80
 80032ae:	0292      	lsls	r2, r2, #10
 80032b0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80032b2:	193b      	adds	r3, r7, r4
 80032b4:	2280      	movs	r2, #128	; 0x80
 80032b6:	0092      	lsls	r2, r2, #2
 80032b8:	631a      	str	r2, [r3, #48]	; 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032ba:	193b      	adds	r3, r7, r4
 80032bc:	0018      	movs	r0, r3
 80032be:	f001 fcc1 	bl	8004c44 <HAL_RCCEx_PeriphCLKConfig>
 80032c2:	1e03      	subs	r3, r0, #0
 80032c4:	d001      	beq.n	80032ca <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80032c6:	f7ff ff53 	bl	8003170 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80032ca:	4b0d      	ldr	r3, [pc, #52]	; (8003300 <HAL_RTC_MspInit+0x78>)
 80032cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032ce:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <HAL_RTC_MspInit+0x78>)
 80032d0:	2180      	movs	r1, #128	; 0x80
 80032d2:	0209      	lsls	r1, r1, #8
 80032d4:	430a      	orrs	r2, r1
 80032d6:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80032d8:	4b09      	ldr	r3, [pc, #36]	; (8003300 <HAL_RTC_MspInit+0x78>)
 80032da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032dc:	4b08      	ldr	r3, [pc, #32]	; (8003300 <HAL_RTC_MspInit+0x78>)
 80032de:	2180      	movs	r1, #128	; 0x80
 80032e0:	00c9      	lsls	r1, r1, #3
 80032e2:	430a      	orrs	r2, r1
 80032e4:	63da      	str	r2, [r3, #60]	; 0x3c
 80032e6:	4b06      	ldr	r3, [pc, #24]	; (8003300 <HAL_RTC_MspInit+0x78>)
 80032e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032ea:	2380      	movs	r3, #128	; 0x80
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	4013      	ands	r3, r2
 80032f0:	60bb      	str	r3, [r7, #8]
 80032f2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80032f4:	46c0      	nop			; (mov r8, r8)
 80032f6:	46bd      	mov	sp, r7
 80032f8:	b011      	add	sp, #68	; 0x44
 80032fa:	bd90      	pop	{r4, r7, pc}
 80032fc:	40002800 	.word	0x40002800
 8003300:	40021000 	.word	0x40021000

08003304 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a0d      	ldr	r2, [pc, #52]	; (8003348 <HAL_TIM_Base_MspInit+0x44>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d113      	bne.n	800333e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003316:	4b0d      	ldr	r3, [pc, #52]	; (800334c <HAL_TIM_Base_MspInit+0x48>)
 8003318:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800331a:	4b0c      	ldr	r3, [pc, #48]	; (800334c <HAL_TIM_Base_MspInit+0x48>)
 800331c:	2110      	movs	r1, #16
 800331e:	430a      	orrs	r2, r1
 8003320:	63da      	str	r2, [r3, #60]	; 0x3c
 8003322:	4b0a      	ldr	r3, [pc, #40]	; (800334c <HAL_TIM_Base_MspInit+0x48>)
 8003324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003326:	2210      	movs	r2, #16
 8003328:	4013      	ands	r3, r2
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 800332e:	2200      	movs	r2, #0
 8003330:	2100      	movs	r1, #0
 8003332:	2011      	movs	r0, #17
 8003334:	f000 fba8 	bl	8003a88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8003338:	2011      	movs	r0, #17
 800333a:	f000 fbba 	bl	8003ab2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800333e:	46c0      	nop			; (mov r8, r8)
 8003340:	46bd      	mov	sp, r7
 8003342:	b004      	add	sp, #16
 8003344:	bd80      	pop	{r7, pc}
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	40001000 	.word	0x40001000
 800334c:	40021000 	.word	0x40021000

08003350 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003350:	b590      	push	{r4, r7, lr}
 8003352:	b09b      	sub	sp, #108	; 0x6c
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003358:	2354      	movs	r3, #84	; 0x54
 800335a:	18fb      	adds	r3, r7, r3
 800335c:	0018      	movs	r0, r3
 800335e:	2314      	movs	r3, #20
 8003360:	001a      	movs	r2, r3
 8003362:	2100      	movs	r1, #0
 8003364:	f007 fa2a 	bl	800a7bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003368:	2420      	movs	r4, #32
 800336a:	193b      	adds	r3, r7, r4
 800336c:	0018      	movs	r0, r3
 800336e:	2334      	movs	r3, #52	; 0x34
 8003370:	001a      	movs	r2, r3
 8003372:	2100      	movs	r1, #0
 8003374:	f007 fa22 	bl	800a7bc <memset>
  if(huart->Instance==USART1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a61      	ldr	r2, [pc, #388]	; (8003504 <HAL_UART_MspInit+0x1b4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d140      	bne.n	8003404 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003382:	193b      	adds	r3, r7, r4
 8003384:	2201      	movs	r2, #1
 8003386:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003388:	193b      	adds	r3, r7, r4
 800338a:	2200      	movs	r2, #0
 800338c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800338e:	193b      	adds	r3, r7, r4
 8003390:	0018      	movs	r0, r3
 8003392:	f001 fc57 	bl	8004c44 <HAL_RCCEx_PeriphCLKConfig>
 8003396:	1e03      	subs	r3, r0, #0
 8003398:	d001      	beq.n	800339e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800339a:	f7ff fee9 	bl	8003170 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800339e:	4b5a      	ldr	r3, [pc, #360]	; (8003508 <HAL_UART_MspInit+0x1b8>)
 80033a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033a2:	4b59      	ldr	r3, [pc, #356]	; (8003508 <HAL_UART_MspInit+0x1b8>)
 80033a4:	2180      	movs	r1, #128	; 0x80
 80033a6:	01c9      	lsls	r1, r1, #7
 80033a8:	430a      	orrs	r2, r1
 80033aa:	641a      	str	r2, [r3, #64]	; 0x40
 80033ac:	4b56      	ldr	r3, [pc, #344]	; (8003508 <HAL_UART_MspInit+0x1b8>)
 80033ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033b0:	2380      	movs	r3, #128	; 0x80
 80033b2:	01db      	lsls	r3, r3, #7
 80033b4:	4013      	ands	r3, r2
 80033b6:	61fb      	str	r3, [r7, #28]
 80033b8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ba:	4b53      	ldr	r3, [pc, #332]	; (8003508 <HAL_UART_MspInit+0x1b8>)
 80033bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033be:	4b52      	ldr	r3, [pc, #328]	; (8003508 <HAL_UART_MspInit+0x1b8>)
 80033c0:	2101      	movs	r1, #1
 80033c2:	430a      	orrs	r2, r1
 80033c4:	635a      	str	r2, [r3, #52]	; 0x34
 80033c6:	4b50      	ldr	r3, [pc, #320]	; (8003508 <HAL_UART_MspInit+0x1b8>)
 80033c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ca:	2201      	movs	r2, #1
 80033cc:	4013      	ands	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
 80033d0:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ASTRO_TXD_Pin|ASTRO_RXD_Pin;
 80033d2:	2154      	movs	r1, #84	; 0x54
 80033d4:	187b      	adds	r3, r7, r1
 80033d6:	22c0      	movs	r2, #192	; 0xc0
 80033d8:	00d2      	lsls	r2, r2, #3
 80033da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033dc:	187b      	adds	r3, r7, r1
 80033de:	2202      	movs	r2, #2
 80033e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e2:	187b      	adds	r3, r7, r1
 80033e4:	2200      	movs	r2, #0
 80033e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e8:	187b      	adds	r3, r7, r1
 80033ea:	2200      	movs	r2, #0
 80033ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80033ee:	187b      	adds	r3, r7, r1
 80033f0:	2201      	movs	r2, #1
 80033f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f4:	187a      	adds	r2, r7, r1
 80033f6:	23a0      	movs	r3, #160	; 0xa0
 80033f8:	05db      	lsls	r3, r3, #23
 80033fa:	0011      	movs	r1, r2
 80033fc:	0018      	movs	r0, r3
 80033fe:	f000 fb75 	bl	8003aec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003402:	e07b      	b.n	80034fc <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART2)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a40      	ldr	r2, [pc, #256]	; (800350c <HAL_UART_MspInit+0x1bc>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d140      	bne.n	8003490 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800340e:	2120      	movs	r1, #32
 8003410:	187b      	adds	r3, r7, r1
 8003412:	2202      	movs	r2, #2
 8003414:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003416:	187b      	adds	r3, r7, r1
 8003418:	2200      	movs	r2, #0
 800341a:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800341c:	187b      	adds	r3, r7, r1
 800341e:	0018      	movs	r0, r3
 8003420:	f001 fc10 	bl	8004c44 <HAL_RCCEx_PeriphCLKConfig>
 8003424:	1e03      	subs	r3, r0, #0
 8003426:	d001      	beq.n	800342c <HAL_UART_MspInit+0xdc>
      Error_Handler();
 8003428:	f7ff fea2 	bl	8003170 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800342c:	4b36      	ldr	r3, [pc, #216]	; (8003508 <HAL_UART_MspInit+0x1b8>)
 800342e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003430:	4b35      	ldr	r3, [pc, #212]	; (8003508 <HAL_UART_MspInit+0x1b8>)
 8003432:	2180      	movs	r1, #128	; 0x80
 8003434:	0289      	lsls	r1, r1, #10
 8003436:	430a      	orrs	r2, r1
 8003438:	63da      	str	r2, [r3, #60]	; 0x3c
 800343a:	4b33      	ldr	r3, [pc, #204]	; (8003508 <HAL_UART_MspInit+0x1b8>)
 800343c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800343e:	2380      	movs	r3, #128	; 0x80
 8003440:	029b      	lsls	r3, r3, #10
 8003442:	4013      	ands	r3, r2
 8003444:	617b      	str	r3, [r7, #20]
 8003446:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003448:	4b2f      	ldr	r3, [pc, #188]	; (8003508 <HAL_UART_MspInit+0x1b8>)
 800344a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800344c:	4b2e      	ldr	r3, [pc, #184]	; (8003508 <HAL_UART_MspInit+0x1b8>)
 800344e:	2101      	movs	r1, #1
 8003450:	430a      	orrs	r2, r1
 8003452:	635a      	str	r2, [r3, #52]	; 0x34
 8003454:	4b2c      	ldr	r3, [pc, #176]	; (8003508 <HAL_UART_MspInit+0x1b8>)
 8003456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003458:	2201      	movs	r2, #1
 800345a:	4013      	ands	r3, r2
 800345c:	613b      	str	r3, [r7, #16]
 800345e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DBG_TXD_Pin|DBG_RXD_Pin;
 8003460:	2154      	movs	r1, #84	; 0x54
 8003462:	187b      	adds	r3, r7, r1
 8003464:	220c      	movs	r2, #12
 8003466:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003468:	187b      	adds	r3, r7, r1
 800346a:	2202      	movs	r2, #2
 800346c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800346e:	187b      	adds	r3, r7, r1
 8003470:	2201      	movs	r2, #1
 8003472:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003474:	187b      	adds	r3, r7, r1
 8003476:	2200      	movs	r2, #0
 8003478:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800347a:	187b      	adds	r3, r7, r1
 800347c:	2201      	movs	r2, #1
 800347e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003480:	187a      	adds	r2, r7, r1
 8003482:	23a0      	movs	r3, #160	; 0xa0
 8003484:	05db      	lsls	r3, r3, #23
 8003486:	0011      	movs	r1, r2
 8003488:	0018      	movs	r0, r3
 800348a:	f000 fb2f 	bl	8003aec <HAL_GPIO_Init>
}
 800348e:	e035      	b.n	80034fc <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART3)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a1e      	ldr	r2, [pc, #120]	; (8003510 <HAL_UART_MspInit+0x1c0>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d130      	bne.n	80034fc <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART3_CLK_ENABLE();
 800349a:	4b1b      	ldr	r3, [pc, #108]	; (8003508 <HAL_UART_MspInit+0x1b8>)
 800349c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800349e:	4b1a      	ldr	r3, [pc, #104]	; (8003508 <HAL_UART_MspInit+0x1b8>)
 80034a0:	2180      	movs	r1, #128	; 0x80
 80034a2:	02c9      	lsls	r1, r1, #11
 80034a4:	430a      	orrs	r2, r1
 80034a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80034a8:	4b17      	ldr	r3, [pc, #92]	; (8003508 <HAL_UART_MspInit+0x1b8>)
 80034aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034ac:	2380      	movs	r3, #128	; 0x80
 80034ae:	02db      	lsls	r3, r3, #11
 80034b0:	4013      	ands	r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034b6:	4b14      	ldr	r3, [pc, #80]	; (8003508 <HAL_UART_MspInit+0x1b8>)
 80034b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034ba:	4b13      	ldr	r3, [pc, #76]	; (8003508 <HAL_UART_MspInit+0x1b8>)
 80034bc:	2104      	movs	r1, #4
 80034be:	430a      	orrs	r2, r1
 80034c0:	635a      	str	r2, [r3, #52]	; 0x34
 80034c2:	4b11      	ldr	r3, [pc, #68]	; (8003508 <HAL_UART_MspInit+0x1b8>)
 80034c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c6:	2204      	movs	r2, #4
 80034c8:	4013      	ands	r3, r2
 80034ca:	60bb      	str	r3, [r7, #8]
 80034cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = L86_RXD_Pin|L86_TXD_Pin;
 80034ce:	2154      	movs	r1, #84	; 0x54
 80034d0:	187b      	adds	r3, r7, r1
 80034d2:	22c0      	movs	r2, #192	; 0xc0
 80034d4:	0112      	lsls	r2, r2, #4
 80034d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d8:	187b      	adds	r3, r7, r1
 80034da:	2202      	movs	r2, #2
 80034dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034de:	187b      	adds	r3, r7, r1
 80034e0:	2200      	movs	r2, #0
 80034e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e4:	187b      	adds	r3, r7, r1
 80034e6:	2200      	movs	r2, #0
 80034e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 80034ea:	187b      	adds	r3, r7, r1
 80034ec:	2200      	movs	r2, #0
 80034ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034f0:	187b      	adds	r3, r7, r1
 80034f2:	4a08      	ldr	r2, [pc, #32]	; (8003514 <HAL_UART_MspInit+0x1c4>)
 80034f4:	0019      	movs	r1, r3
 80034f6:	0010      	movs	r0, r2
 80034f8:	f000 faf8 	bl	8003aec <HAL_GPIO_Init>
}
 80034fc:	46c0      	nop			; (mov r8, r8)
 80034fe:	46bd      	mov	sp, r7
 8003500:	b01b      	add	sp, #108	; 0x6c
 8003502:	bd90      	pop	{r4, r7, pc}
 8003504:	40013800 	.word	0x40013800
 8003508:	40021000 	.word	0x40021000
 800350c:	40004400 	.word	0x40004400
 8003510:	40004800 	.word	0x40004800
 8003514:	50000800 	.word	0x50000800

08003518 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a1c      	ldr	r2, [pc, #112]	; (8003598 <HAL_UART_MspDeInit+0x80>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d10e      	bne.n	8003548 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800352a:	4b1c      	ldr	r3, [pc, #112]	; (800359c <HAL_UART_MspDeInit+0x84>)
 800352c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800352e:	4b1b      	ldr	r3, [pc, #108]	; (800359c <HAL_UART_MspDeInit+0x84>)
 8003530:	491b      	ldr	r1, [pc, #108]	; (80035a0 <HAL_UART_MspDeInit+0x88>)
 8003532:	400a      	ands	r2, r1
 8003534:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, ASTRO_TXD_Pin|ASTRO_RXD_Pin);
 8003536:	23c0      	movs	r3, #192	; 0xc0
 8003538:	00da      	lsls	r2, r3, #3
 800353a:	23a0      	movs	r3, #160	; 0xa0
 800353c:	05db      	lsls	r3, r3, #23
 800353e:	0011      	movs	r1, r2
 8003540:	0018      	movs	r0, r3
 8003542:	f000 fc37 	bl	8003db4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8003546:	e023      	b.n	8003590 <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART2)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a15      	ldr	r2, [pc, #84]	; (80035a4 <HAL_UART_MspDeInit+0x8c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d10c      	bne.n	800356c <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003552:	4b12      	ldr	r3, [pc, #72]	; (800359c <HAL_UART_MspDeInit+0x84>)
 8003554:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003556:	4b11      	ldr	r3, [pc, #68]	; (800359c <HAL_UART_MspDeInit+0x84>)
 8003558:	4913      	ldr	r1, [pc, #76]	; (80035a8 <HAL_UART_MspDeInit+0x90>)
 800355a:	400a      	ands	r2, r1
 800355c:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TXD_Pin|DBG_RXD_Pin);
 800355e:	23a0      	movs	r3, #160	; 0xa0
 8003560:	05db      	lsls	r3, r3, #23
 8003562:	210c      	movs	r1, #12
 8003564:	0018      	movs	r0, r3
 8003566:	f000 fc25 	bl	8003db4 <HAL_GPIO_DeInit>
}
 800356a:	e011      	b.n	8003590 <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART3)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a0e      	ldr	r2, [pc, #56]	; (80035ac <HAL_UART_MspDeInit+0x94>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d10c      	bne.n	8003590 <HAL_UART_MspDeInit+0x78>
    __HAL_RCC_USART3_CLK_DISABLE();
 8003576:	4b09      	ldr	r3, [pc, #36]	; (800359c <HAL_UART_MspDeInit+0x84>)
 8003578:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800357a:	4b08      	ldr	r3, [pc, #32]	; (800359c <HAL_UART_MspDeInit+0x84>)
 800357c:	490c      	ldr	r1, [pc, #48]	; (80035b0 <HAL_UART_MspDeInit+0x98>)
 800357e:	400a      	ands	r2, r1
 8003580:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOC, L86_RXD_Pin|L86_TXD_Pin);
 8003582:	23c0      	movs	r3, #192	; 0xc0
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	4a0b      	ldr	r2, [pc, #44]	; (80035b4 <HAL_UART_MspDeInit+0x9c>)
 8003588:	0019      	movs	r1, r3
 800358a:	0010      	movs	r0, r2
 800358c:	f000 fc12 	bl	8003db4 <HAL_GPIO_DeInit>
}
 8003590:	46c0      	nop			; (mov r8, r8)
 8003592:	46bd      	mov	sp, r7
 8003594:	b002      	add	sp, #8
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40013800 	.word	0x40013800
 800359c:	40021000 	.word	0x40021000
 80035a0:	ffffbfff 	.word	0xffffbfff
 80035a4:	40004400 	.word	0x40004400
 80035a8:	fffdffff 	.word	0xfffdffff
 80035ac:	40004800 	.word	0x40004800
 80035b0:	fffbffff 	.word	0xfffbffff
 80035b4:	50000800 	.word	0x50000800

080035b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035bc:	e7fe      	b.n	80035bc <NMI_Handler+0x4>

080035be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035c2:	e7fe      	b.n	80035c2 <HardFault_Handler+0x4>

080035c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80035c8:	46c0      	nop			; (mov r8, r8)
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035dc:	f000 f968 	bl	80038b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035e0:	46c0      	nop			; (mov r8, r8)
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
	...

080035e8 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80035ec:	4b03      	ldr	r3, [pc, #12]	; (80035fc <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 80035ee:	0018      	movs	r0, r3
 80035f0:	f002 faca 	bl	8005b88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 80035f4:	46c0      	nop			; (mov r8, r8)
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	46c0      	nop			; (mov r8, r8)
 80035fc:	20000784 	.word	0x20000784

08003600 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  return 1;
 8003604:	2301      	movs	r3, #1
}
 8003606:	0018      	movs	r0, r3
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <_kill>:

int _kill(int pid, int sig)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003616:	f007 f97d 	bl	800a914 <__errno>
 800361a:	0003      	movs	r3, r0
 800361c:	2216      	movs	r2, #22
 800361e:	601a      	str	r2, [r3, #0]
  return -1;
 8003620:	2301      	movs	r3, #1
 8003622:	425b      	negs	r3, r3
}
 8003624:	0018      	movs	r0, r3
 8003626:	46bd      	mov	sp, r7
 8003628:	b002      	add	sp, #8
 800362a:	bd80      	pop	{r7, pc}

0800362c <_exit>:

void _exit (int status)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003634:	2301      	movs	r3, #1
 8003636:	425a      	negs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	0011      	movs	r1, r2
 800363c:	0018      	movs	r0, r3
 800363e:	f7ff ffe5 	bl	800360c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003642:	e7fe      	b.n	8003642 <_exit+0x16>

08003644 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003650:	2300      	movs	r3, #0
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	e00a      	b.n	800366c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003656:	e000      	b.n	800365a <_read+0x16>
 8003658:	bf00      	nop
 800365a:	0001      	movs	r1, r0
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	60ba      	str	r2, [r7, #8]
 8003662:	b2ca      	uxtb	r2, r1
 8003664:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	3301      	adds	r3, #1
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	429a      	cmp	r2, r3
 8003672:	dbf0      	blt.n	8003656 <_read+0x12>
  }

  return len;
 8003674:	687b      	ldr	r3, [r7, #4]
}
 8003676:	0018      	movs	r0, r3
 8003678:	46bd      	mov	sp, r7
 800367a:	b006      	add	sp, #24
 800367c:	bd80      	pop	{r7, pc}

0800367e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b086      	sub	sp, #24
 8003682:	af00      	add	r7, sp, #0
 8003684:	60f8      	str	r0, [r7, #12]
 8003686:	60b9      	str	r1, [r7, #8]
 8003688:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800368a:	2300      	movs	r3, #0
 800368c:	617b      	str	r3, [r7, #20]
 800368e:	e009      	b.n	80036a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	1c5a      	adds	r2, r3, #1
 8003694:	60ba      	str	r2, [r7, #8]
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	0018      	movs	r0, r3
 800369a:	e000      	b.n	800369e <_write+0x20>
 800369c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	3301      	adds	r3, #1
 80036a2:	617b      	str	r3, [r7, #20]
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	dbf1      	blt.n	8003690 <_write+0x12>
  }
  return len;
 80036ac:	687b      	ldr	r3, [r7, #4]
}
 80036ae:	0018      	movs	r0, r3
 80036b0:	46bd      	mov	sp, r7
 80036b2:	b006      	add	sp, #24
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <_close>:

int _close(int file)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b082      	sub	sp, #8
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80036be:	2301      	movs	r3, #1
 80036c0:	425b      	negs	r3, r3
}
 80036c2:	0018      	movs	r0, r3
 80036c4:	46bd      	mov	sp, r7
 80036c6:	b002      	add	sp, #8
 80036c8:	bd80      	pop	{r7, pc}

080036ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b082      	sub	sp, #8
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
 80036d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	2280      	movs	r2, #128	; 0x80
 80036d8:	0192      	lsls	r2, r2, #6
 80036da:	605a      	str	r2, [r3, #4]
  return 0;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	0018      	movs	r0, r3
 80036e0:	46bd      	mov	sp, r7
 80036e2:	b002      	add	sp, #8
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <_isatty>:

int _isatty(int file)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b082      	sub	sp, #8
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80036ee:	2301      	movs	r3, #1
}
 80036f0:	0018      	movs	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b002      	add	sp, #8
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003704:	2300      	movs	r3, #0
}
 8003706:	0018      	movs	r0, r3
 8003708:	46bd      	mov	sp, r7
 800370a:	b004      	add	sp, #16
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003718:	4a14      	ldr	r2, [pc, #80]	; (800376c <_sbrk+0x5c>)
 800371a:	4b15      	ldr	r3, [pc, #84]	; (8003770 <_sbrk+0x60>)
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003724:	4b13      	ldr	r3, [pc, #76]	; (8003774 <_sbrk+0x64>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d102      	bne.n	8003732 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800372c:	4b11      	ldr	r3, [pc, #68]	; (8003774 <_sbrk+0x64>)
 800372e:	4a12      	ldr	r2, [pc, #72]	; (8003778 <_sbrk+0x68>)
 8003730:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003732:	4b10      	ldr	r3, [pc, #64]	; (8003774 <_sbrk+0x64>)
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	18d3      	adds	r3, r2, r3
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	429a      	cmp	r2, r3
 800373e:	d207      	bcs.n	8003750 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003740:	f007 f8e8 	bl	800a914 <__errno>
 8003744:	0003      	movs	r3, r0
 8003746:	220c      	movs	r2, #12
 8003748:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800374a:	2301      	movs	r3, #1
 800374c:	425b      	negs	r3, r3
 800374e:	e009      	b.n	8003764 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003750:	4b08      	ldr	r3, [pc, #32]	; (8003774 <_sbrk+0x64>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003756:	4b07      	ldr	r3, [pc, #28]	; (8003774 <_sbrk+0x64>)
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	18d2      	adds	r2, r2, r3
 800375e:	4b05      	ldr	r3, [pc, #20]	; (8003774 <_sbrk+0x64>)
 8003760:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003762:	68fb      	ldr	r3, [r7, #12]
}
 8003764:	0018      	movs	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	b006      	add	sp, #24
 800376a:	bd80      	pop	{r7, pc}
 800376c:	20009000 	.word	0x20009000
 8003770:	00000400 	.word	0x00000400
 8003774:	20000c88 	.word	0x20000c88
 8003778:	20000fa0 	.word	0x20000fa0

0800377c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003780:	46c0      	nop			; (mov r8, r8)
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
	...

08003788 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003788:	480d      	ldr	r0, [pc, #52]	; (80037c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800378a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800378c:	f7ff fff6 	bl	800377c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003790:	480c      	ldr	r0, [pc, #48]	; (80037c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003792:	490d      	ldr	r1, [pc, #52]	; (80037c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003794:	4a0d      	ldr	r2, [pc, #52]	; (80037cc <LoopForever+0xe>)
  movs r3, #0
 8003796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003798:	e002      	b.n	80037a0 <LoopCopyDataInit>

0800379a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800379a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800379c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800379e:	3304      	adds	r3, #4

080037a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037a4:	d3f9      	bcc.n	800379a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037a6:	4a0a      	ldr	r2, [pc, #40]	; (80037d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80037a8:	4c0a      	ldr	r4, [pc, #40]	; (80037d4 <LoopForever+0x16>)
  movs r3, #0
 80037aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037ac:	e001      	b.n	80037b2 <LoopFillZerobss>

080037ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037b0:	3204      	adds	r2, #4

080037b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037b4:	d3fb      	bcc.n	80037ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80037b6:	f007 f8b3 	bl	800a920 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80037ba:	f7fe fef5 	bl	80025a8 <main>

080037be <LoopForever>:

LoopForever:
  b LoopForever
 80037be:	e7fe      	b.n	80037be <LoopForever>
  ldr   r0, =_estack
 80037c0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80037c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037c8:	200006e8 	.word	0x200006e8
  ldr r2, =_sidata
 80037cc:	08012fb0 	.word	0x08012fb0
  ldr r2, =_sbss
 80037d0:	200006e8 	.word	0x200006e8
  ldr r4, =_ebss
 80037d4:	20000fa0 	.word	0x20000fa0

080037d8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80037d8:	e7fe      	b.n	80037d8 <ADC1_COMP_IRQHandler>
	...

080037dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80037e2:	1dfb      	adds	r3, r7, #7
 80037e4:	2200      	movs	r2, #0
 80037e6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037e8:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <HAL_Init+0x3c>)
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	4b0a      	ldr	r3, [pc, #40]	; (8003818 <HAL_Init+0x3c>)
 80037ee:	2180      	movs	r1, #128	; 0x80
 80037f0:	0049      	lsls	r1, r1, #1
 80037f2:	430a      	orrs	r2, r1
 80037f4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037f6:	2000      	movs	r0, #0
 80037f8:	f000 f810 	bl	800381c <HAL_InitTick>
 80037fc:	1e03      	subs	r3, r0, #0
 80037fe:	d003      	beq.n	8003808 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003800:	1dfb      	adds	r3, r7, #7
 8003802:	2201      	movs	r2, #1
 8003804:	701a      	strb	r2, [r3, #0]
 8003806:	e001      	b.n	800380c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003808:	f7ff fcb8 	bl	800317c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800380c:	1dfb      	adds	r3, r7, #7
 800380e:	781b      	ldrb	r3, [r3, #0]
}
 8003810:	0018      	movs	r0, r3
 8003812:	46bd      	mov	sp, r7
 8003814:	b002      	add	sp, #8
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40022000 	.word	0x40022000

0800381c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800381c:	b590      	push	{r4, r7, lr}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003824:	230f      	movs	r3, #15
 8003826:	18fb      	adds	r3, r7, r3
 8003828:	2200      	movs	r2, #0
 800382a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800382c:	4b1d      	ldr	r3, [pc, #116]	; (80038a4 <HAL_InitTick+0x88>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d02b      	beq.n	800388c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003834:	4b1c      	ldr	r3, [pc, #112]	; (80038a8 <HAL_InitTick+0x8c>)
 8003836:	681c      	ldr	r4, [r3, #0]
 8003838:	4b1a      	ldr	r3, [pc, #104]	; (80038a4 <HAL_InitTick+0x88>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	0019      	movs	r1, r3
 800383e:	23fa      	movs	r3, #250	; 0xfa
 8003840:	0098      	lsls	r0, r3, #2
 8003842:	f7fc fc7b 	bl	800013c <__udivsi3>
 8003846:	0003      	movs	r3, r0
 8003848:	0019      	movs	r1, r3
 800384a:	0020      	movs	r0, r4
 800384c:	f7fc fc76 	bl	800013c <__udivsi3>
 8003850:	0003      	movs	r3, r0
 8003852:	0018      	movs	r0, r3
 8003854:	f000 f93d 	bl	8003ad2 <HAL_SYSTICK_Config>
 8003858:	1e03      	subs	r3, r0, #0
 800385a:	d112      	bne.n	8003882 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b03      	cmp	r3, #3
 8003860:	d80a      	bhi.n	8003878 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	2301      	movs	r3, #1
 8003866:	425b      	negs	r3, r3
 8003868:	2200      	movs	r2, #0
 800386a:	0018      	movs	r0, r3
 800386c:	f000 f90c 	bl	8003a88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003870:	4b0e      	ldr	r3, [pc, #56]	; (80038ac <HAL_InitTick+0x90>)
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	e00d      	b.n	8003894 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003878:	230f      	movs	r3, #15
 800387a:	18fb      	adds	r3, r7, r3
 800387c:	2201      	movs	r2, #1
 800387e:	701a      	strb	r2, [r3, #0]
 8003880:	e008      	b.n	8003894 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003882:	230f      	movs	r3, #15
 8003884:	18fb      	adds	r3, r7, r3
 8003886:	2201      	movs	r2, #1
 8003888:	701a      	strb	r2, [r3, #0]
 800388a:	e003      	b.n	8003894 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800388c:	230f      	movs	r3, #15
 800388e:	18fb      	adds	r3, r7, r3
 8003890:	2201      	movs	r2, #1
 8003892:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003894:	230f      	movs	r3, #15
 8003896:	18fb      	adds	r3, r7, r3
 8003898:	781b      	ldrb	r3, [r3, #0]
}
 800389a:	0018      	movs	r0, r3
 800389c:	46bd      	mov	sp, r7
 800389e:	b005      	add	sp, #20
 80038a0:	bd90      	pop	{r4, r7, pc}
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	20000034 	.word	0x20000034
 80038a8:	2000002c 	.word	0x2000002c
 80038ac:	20000030 	.word	0x20000030

080038b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80038b4:	4b05      	ldr	r3, [pc, #20]	; (80038cc <HAL_IncTick+0x1c>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	001a      	movs	r2, r3
 80038ba:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <HAL_IncTick+0x20>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	18d2      	adds	r2, r2, r3
 80038c0:	4b03      	ldr	r3, [pc, #12]	; (80038d0 <HAL_IncTick+0x20>)
 80038c2:	601a      	str	r2, [r3, #0]
}
 80038c4:	46c0      	nop			; (mov r8, r8)
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	20000034 	.word	0x20000034
 80038d0:	20000c8c 	.word	0x20000c8c

080038d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  return uwTick;
 80038d8:	4b02      	ldr	r3, [pc, #8]	; (80038e4 <HAL_GetTick+0x10>)
 80038da:	681b      	ldr	r3, [r3, #0]
}
 80038dc:	0018      	movs	r0, r3
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	46c0      	nop			; (mov r8, r8)
 80038e4:	20000c8c 	.word	0x20000c8c

080038e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038f0:	f7ff fff0 	bl	80038d4 <HAL_GetTick>
 80038f4:	0003      	movs	r3, r0
 80038f6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	3301      	adds	r3, #1
 8003900:	d005      	beq.n	800390e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003902:	4b0a      	ldr	r3, [pc, #40]	; (800392c <HAL_Delay+0x44>)
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	001a      	movs	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	189b      	adds	r3, r3, r2
 800390c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800390e:	46c0      	nop			; (mov r8, r8)
 8003910:	f7ff ffe0 	bl	80038d4 <HAL_GetTick>
 8003914:	0002      	movs	r2, r0
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	429a      	cmp	r2, r3
 800391e:	d8f7      	bhi.n	8003910 <HAL_Delay+0x28>
  {
  }
}
 8003920:	46c0      	nop			; (mov r8, r8)
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	46bd      	mov	sp, r7
 8003926:	b004      	add	sp, #16
 8003928:	bd80      	pop	{r7, pc}
 800392a:	46c0      	nop			; (mov r8, r8)
 800392c:	20000034 	.word	0x20000034

08003930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	0002      	movs	r2, r0
 8003938:	1dfb      	adds	r3, r7, #7
 800393a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800393c:	1dfb      	adds	r3, r7, #7
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	2b7f      	cmp	r3, #127	; 0x7f
 8003942:	d809      	bhi.n	8003958 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003944:	1dfb      	adds	r3, r7, #7
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	001a      	movs	r2, r3
 800394a:	231f      	movs	r3, #31
 800394c:	401a      	ands	r2, r3
 800394e:	4b04      	ldr	r3, [pc, #16]	; (8003960 <__NVIC_EnableIRQ+0x30>)
 8003950:	2101      	movs	r1, #1
 8003952:	4091      	lsls	r1, r2
 8003954:	000a      	movs	r2, r1
 8003956:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003958:	46c0      	nop			; (mov r8, r8)
 800395a:	46bd      	mov	sp, r7
 800395c:	b002      	add	sp, #8
 800395e:	bd80      	pop	{r7, pc}
 8003960:	e000e100 	.word	0xe000e100

08003964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003964:	b590      	push	{r4, r7, lr}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	0002      	movs	r2, r0
 800396c:	6039      	str	r1, [r7, #0]
 800396e:	1dfb      	adds	r3, r7, #7
 8003970:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003972:	1dfb      	adds	r3, r7, #7
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b7f      	cmp	r3, #127	; 0x7f
 8003978:	d828      	bhi.n	80039cc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800397a:	4a2f      	ldr	r2, [pc, #188]	; (8003a38 <__NVIC_SetPriority+0xd4>)
 800397c:	1dfb      	adds	r3, r7, #7
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	b25b      	sxtb	r3, r3
 8003982:	089b      	lsrs	r3, r3, #2
 8003984:	33c0      	adds	r3, #192	; 0xc0
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	589b      	ldr	r3, [r3, r2]
 800398a:	1dfa      	adds	r2, r7, #7
 800398c:	7812      	ldrb	r2, [r2, #0]
 800398e:	0011      	movs	r1, r2
 8003990:	2203      	movs	r2, #3
 8003992:	400a      	ands	r2, r1
 8003994:	00d2      	lsls	r2, r2, #3
 8003996:	21ff      	movs	r1, #255	; 0xff
 8003998:	4091      	lsls	r1, r2
 800399a:	000a      	movs	r2, r1
 800399c:	43d2      	mvns	r2, r2
 800399e:	401a      	ands	r2, r3
 80039a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	019b      	lsls	r3, r3, #6
 80039a6:	22ff      	movs	r2, #255	; 0xff
 80039a8:	401a      	ands	r2, r3
 80039aa:	1dfb      	adds	r3, r7, #7
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	0018      	movs	r0, r3
 80039b0:	2303      	movs	r3, #3
 80039b2:	4003      	ands	r3, r0
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039b8:	481f      	ldr	r0, [pc, #124]	; (8003a38 <__NVIC_SetPriority+0xd4>)
 80039ba:	1dfb      	adds	r3, r7, #7
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	b25b      	sxtb	r3, r3
 80039c0:	089b      	lsrs	r3, r3, #2
 80039c2:	430a      	orrs	r2, r1
 80039c4:	33c0      	adds	r3, #192	; 0xc0
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80039ca:	e031      	b.n	8003a30 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039cc:	4a1b      	ldr	r2, [pc, #108]	; (8003a3c <__NVIC_SetPriority+0xd8>)
 80039ce:	1dfb      	adds	r3, r7, #7
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	0019      	movs	r1, r3
 80039d4:	230f      	movs	r3, #15
 80039d6:	400b      	ands	r3, r1
 80039d8:	3b08      	subs	r3, #8
 80039da:	089b      	lsrs	r3, r3, #2
 80039dc:	3306      	adds	r3, #6
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	18d3      	adds	r3, r2, r3
 80039e2:	3304      	adds	r3, #4
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	1dfa      	adds	r2, r7, #7
 80039e8:	7812      	ldrb	r2, [r2, #0]
 80039ea:	0011      	movs	r1, r2
 80039ec:	2203      	movs	r2, #3
 80039ee:	400a      	ands	r2, r1
 80039f0:	00d2      	lsls	r2, r2, #3
 80039f2:	21ff      	movs	r1, #255	; 0xff
 80039f4:	4091      	lsls	r1, r2
 80039f6:	000a      	movs	r2, r1
 80039f8:	43d2      	mvns	r2, r2
 80039fa:	401a      	ands	r2, r3
 80039fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	019b      	lsls	r3, r3, #6
 8003a02:	22ff      	movs	r2, #255	; 0xff
 8003a04:	401a      	ands	r2, r3
 8003a06:	1dfb      	adds	r3, r7, #7
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	4003      	ands	r3, r0
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a14:	4809      	ldr	r0, [pc, #36]	; (8003a3c <__NVIC_SetPriority+0xd8>)
 8003a16:	1dfb      	adds	r3, r7, #7
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	001c      	movs	r4, r3
 8003a1c:	230f      	movs	r3, #15
 8003a1e:	4023      	ands	r3, r4
 8003a20:	3b08      	subs	r3, #8
 8003a22:	089b      	lsrs	r3, r3, #2
 8003a24:	430a      	orrs	r2, r1
 8003a26:	3306      	adds	r3, #6
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	18c3      	adds	r3, r0, r3
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	601a      	str	r2, [r3, #0]
}
 8003a30:	46c0      	nop			; (mov r8, r8)
 8003a32:	46bd      	mov	sp, r7
 8003a34:	b003      	add	sp, #12
 8003a36:	bd90      	pop	{r4, r7, pc}
 8003a38:	e000e100 	.word	0xe000e100
 8003a3c:	e000ed00 	.word	0xe000ed00

08003a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	1e5a      	subs	r2, r3, #1
 8003a4c:	2380      	movs	r3, #128	; 0x80
 8003a4e:	045b      	lsls	r3, r3, #17
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d301      	bcc.n	8003a58 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a54:	2301      	movs	r3, #1
 8003a56:	e010      	b.n	8003a7a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a58:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <SysTick_Config+0x44>)
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	3a01      	subs	r2, #1
 8003a5e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a60:	2301      	movs	r3, #1
 8003a62:	425b      	negs	r3, r3
 8003a64:	2103      	movs	r1, #3
 8003a66:	0018      	movs	r0, r3
 8003a68:	f7ff ff7c 	bl	8003964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a6c:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <SysTick_Config+0x44>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a72:	4b04      	ldr	r3, [pc, #16]	; (8003a84 <SysTick_Config+0x44>)
 8003a74:	2207      	movs	r2, #7
 8003a76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	b002      	add	sp, #8
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	46c0      	nop			; (mov r8, r8)
 8003a84:	e000e010 	.word	0xe000e010

08003a88 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	607a      	str	r2, [r7, #4]
 8003a92:	210f      	movs	r1, #15
 8003a94:	187b      	adds	r3, r7, r1
 8003a96:	1c02      	adds	r2, r0, #0
 8003a98:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	187b      	adds	r3, r7, r1
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	b25b      	sxtb	r3, r3
 8003aa2:	0011      	movs	r1, r2
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	f7ff ff5d 	bl	8003964 <__NVIC_SetPriority>
}
 8003aaa:	46c0      	nop			; (mov r8, r8)
 8003aac:	46bd      	mov	sp, r7
 8003aae:	b004      	add	sp, #16
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b082      	sub	sp, #8
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	0002      	movs	r2, r0
 8003aba:	1dfb      	adds	r3, r7, #7
 8003abc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003abe:	1dfb      	adds	r3, r7, #7
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	b25b      	sxtb	r3, r3
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	f7ff ff33 	bl	8003930 <__NVIC_EnableIRQ>
}
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	46bd      	mov	sp, r7
 8003ace:	b002      	add	sp, #8
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b082      	sub	sp, #8
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	0018      	movs	r0, r3
 8003ade:	f7ff ffaf 	bl	8003a40 <SysTick_Config>
 8003ae2:	0003      	movs	r3, r0
}
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	b002      	add	sp, #8
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003af6:	2300      	movs	r3, #0
 8003af8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003afa:	e147      	b.n	8003d8c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2101      	movs	r1, #1
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	4091      	lsls	r1, r2
 8003b06:	000a      	movs	r2, r1
 8003b08:	4013      	ands	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d100      	bne.n	8003b14 <HAL_GPIO_Init+0x28>
 8003b12:	e138      	b.n	8003d86 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2203      	movs	r2, #3
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d005      	beq.n	8003b2c <HAL_GPIO_Init+0x40>
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	2203      	movs	r2, #3
 8003b26:	4013      	ands	r3, r2
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d130      	bne.n	8003b8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	2203      	movs	r2, #3
 8003b38:	409a      	lsls	r2, r3
 8003b3a:	0013      	movs	r3, r2
 8003b3c:	43da      	mvns	r2, r3
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	4013      	ands	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	68da      	ldr	r2, [r3, #12]
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	409a      	lsls	r2, r3
 8003b4e:	0013      	movs	r3, r2
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b62:	2201      	movs	r2, #1
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	409a      	lsls	r2, r3
 8003b68:	0013      	movs	r3, r2
 8003b6a:	43da      	mvns	r2, r3
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	091b      	lsrs	r3, r3, #4
 8003b78:	2201      	movs	r2, #1
 8003b7a:	401a      	ands	r2, r3
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	409a      	lsls	r2, r3
 8003b80:	0013      	movs	r3, r2
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	2203      	movs	r2, #3
 8003b94:	4013      	ands	r3, r2
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	d017      	beq.n	8003bca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	2203      	movs	r2, #3
 8003ba6:	409a      	lsls	r2, r3
 8003ba8:	0013      	movs	r3, r2
 8003baa:	43da      	mvns	r2, r3
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	689a      	ldr	r2, [r3, #8]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	409a      	lsls	r2, r3
 8003bbc:	0013      	movs	r3, r2
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2203      	movs	r2, #3
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d123      	bne.n	8003c1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	08da      	lsrs	r2, r3, #3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	3208      	adds	r2, #8
 8003bde:	0092      	lsls	r2, r2, #2
 8003be0:	58d3      	ldr	r3, [r2, r3]
 8003be2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	2207      	movs	r2, #7
 8003be8:	4013      	ands	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	220f      	movs	r2, #15
 8003bee:	409a      	lsls	r2, r3
 8003bf0:	0013      	movs	r3, r2
 8003bf2:	43da      	mvns	r2, r3
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	691a      	ldr	r2, [r3, #16]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2107      	movs	r1, #7
 8003c02:	400b      	ands	r3, r1
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	409a      	lsls	r2, r3
 8003c08:	0013      	movs	r3, r2
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	08da      	lsrs	r2, r3, #3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	3208      	adds	r2, #8
 8003c18:	0092      	lsls	r2, r2, #2
 8003c1a:	6939      	ldr	r1, [r7, #16]
 8003c1c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	2203      	movs	r2, #3
 8003c2a:	409a      	lsls	r2, r3
 8003c2c:	0013      	movs	r3, r2
 8003c2e:	43da      	mvns	r2, r3
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	4013      	ands	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2203      	movs	r2, #3
 8003c3c:	401a      	ands	r2, r3
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	409a      	lsls	r2, r3
 8003c44:	0013      	movs	r3, r2
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	23c0      	movs	r3, #192	; 0xc0
 8003c58:	029b      	lsls	r3, r3, #10
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d100      	bne.n	8003c60 <HAL_GPIO_Init+0x174>
 8003c5e:	e092      	b.n	8003d86 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003c60:	4a50      	ldr	r2, [pc, #320]	; (8003da4 <HAL_GPIO_Init+0x2b8>)
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	089b      	lsrs	r3, r3, #2
 8003c66:	3318      	adds	r3, #24
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	589b      	ldr	r3, [r3, r2]
 8003c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	2203      	movs	r2, #3
 8003c72:	4013      	ands	r3, r2
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	220f      	movs	r2, #15
 8003c78:	409a      	lsls	r2, r3
 8003c7a:	0013      	movs	r3, r2
 8003c7c:	43da      	mvns	r2, r3
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	4013      	ands	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	23a0      	movs	r3, #160	; 0xa0
 8003c88:	05db      	lsls	r3, r3, #23
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d013      	beq.n	8003cb6 <HAL_GPIO_Init+0x1ca>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a45      	ldr	r2, [pc, #276]	; (8003da8 <HAL_GPIO_Init+0x2bc>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d00d      	beq.n	8003cb2 <HAL_GPIO_Init+0x1c6>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a44      	ldr	r2, [pc, #272]	; (8003dac <HAL_GPIO_Init+0x2c0>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d007      	beq.n	8003cae <HAL_GPIO_Init+0x1c2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a43      	ldr	r2, [pc, #268]	; (8003db0 <HAL_GPIO_Init+0x2c4>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d101      	bne.n	8003caa <HAL_GPIO_Init+0x1be>
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e006      	b.n	8003cb8 <HAL_GPIO_Init+0x1cc>
 8003caa:	2305      	movs	r3, #5
 8003cac:	e004      	b.n	8003cb8 <HAL_GPIO_Init+0x1cc>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	e002      	b.n	8003cb8 <HAL_GPIO_Init+0x1cc>
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e000      	b.n	8003cb8 <HAL_GPIO_Init+0x1cc>
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	2103      	movs	r1, #3
 8003cbc:	400a      	ands	r2, r1
 8003cbe:	00d2      	lsls	r2, r2, #3
 8003cc0:	4093      	lsls	r3, r2
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003cc8:	4936      	ldr	r1, [pc, #216]	; (8003da4 <HAL_GPIO_Init+0x2b8>)
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	089b      	lsrs	r3, r3, #2
 8003cce:	3318      	adds	r3, #24
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cd6:	4b33      	ldr	r3, [pc, #204]	; (8003da4 <HAL_GPIO_Init+0x2b8>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	43da      	mvns	r2, r3
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	2380      	movs	r3, #128	; 0x80
 8003cec:	035b      	lsls	r3, r3, #13
 8003cee:	4013      	ands	r3, r2
 8003cf0:	d003      	beq.n	8003cfa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003cfa:	4b2a      	ldr	r3, [pc, #168]	; (8003da4 <HAL_GPIO_Init+0x2b8>)
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003d00:	4b28      	ldr	r3, [pc, #160]	; (8003da4 <HAL_GPIO_Init+0x2b8>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	43da      	mvns	r2, r3
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	2380      	movs	r3, #128	; 0x80
 8003d16:	039b      	lsls	r3, r3, #14
 8003d18:	4013      	ands	r3, r2
 8003d1a:	d003      	beq.n	8003d24 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d24:	4b1f      	ldr	r3, [pc, #124]	; (8003da4 <HAL_GPIO_Init+0x2b8>)
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003d2a:	4a1e      	ldr	r2, [pc, #120]	; (8003da4 <HAL_GPIO_Init+0x2b8>)
 8003d2c:	2384      	movs	r3, #132	; 0x84
 8003d2e:	58d3      	ldr	r3, [r2, r3]
 8003d30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	43da      	mvns	r2, r3
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	2380      	movs	r3, #128	; 0x80
 8003d42:	029b      	lsls	r3, r3, #10
 8003d44:	4013      	ands	r3, r2
 8003d46:	d003      	beq.n	8003d50 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d50:	4914      	ldr	r1, [pc, #80]	; (8003da4 <HAL_GPIO_Init+0x2b8>)
 8003d52:	2284      	movs	r2, #132	; 0x84
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003d58:	4a12      	ldr	r2, [pc, #72]	; (8003da4 <HAL_GPIO_Init+0x2b8>)
 8003d5a:	2380      	movs	r3, #128	; 0x80
 8003d5c:	58d3      	ldr	r3, [r2, r3]
 8003d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	43da      	mvns	r2, r3
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	4013      	ands	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	2380      	movs	r3, #128	; 0x80
 8003d70:	025b      	lsls	r3, r3, #9
 8003d72:	4013      	ands	r3, r2
 8003d74:	d003      	beq.n	8003d7e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d7e:	4909      	ldr	r1, [pc, #36]	; (8003da4 <HAL_GPIO_Init+0x2b8>)
 8003d80:	2280      	movs	r2, #128	; 0x80
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	40da      	lsrs	r2, r3
 8003d94:	1e13      	subs	r3, r2, #0
 8003d96:	d000      	beq.n	8003d9a <HAL_GPIO_Init+0x2ae>
 8003d98:	e6b0      	b.n	8003afc <HAL_GPIO_Init+0x10>
  }
}
 8003d9a:	46c0      	nop			; (mov r8, r8)
 8003d9c:	46c0      	nop			; (mov r8, r8)
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	b006      	add	sp, #24
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40021800 	.word	0x40021800
 8003da8:	50000400 	.word	0x50000400
 8003dac:	50000800 	.word	0x50000800
 8003db0:	50000c00 	.word	0x50000c00

08003db4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003dc2:	e0b4      	b.n	8003f2e <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	409a      	lsls	r2, r3
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d100      	bne.n	8003dd8 <HAL_GPIO_DeInit+0x24>
 8003dd6:	e0a7      	b.n	8003f28 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8003dd8:	4a5a      	ldr	r2, [pc, #360]	; (8003f44 <HAL_GPIO_DeInit+0x190>)
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	089b      	lsrs	r3, r3, #2
 8003dde:	3318      	adds	r3, #24
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	589b      	ldr	r3, [r3, r2]
 8003de4:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2203      	movs	r2, #3
 8003dea:	4013      	ands	r3, r2
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	220f      	movs	r2, #15
 8003df0:	409a      	lsls	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	4013      	ands	r3, r2
 8003df6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	23a0      	movs	r3, #160	; 0xa0
 8003dfc:	05db      	lsls	r3, r3, #23
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d013      	beq.n	8003e2a <HAL_GPIO_DeInit+0x76>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a50      	ldr	r2, [pc, #320]	; (8003f48 <HAL_GPIO_DeInit+0x194>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d00d      	beq.n	8003e26 <HAL_GPIO_DeInit+0x72>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a4f      	ldr	r2, [pc, #316]	; (8003f4c <HAL_GPIO_DeInit+0x198>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d007      	beq.n	8003e22 <HAL_GPIO_DeInit+0x6e>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a4e      	ldr	r2, [pc, #312]	; (8003f50 <HAL_GPIO_DeInit+0x19c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d101      	bne.n	8003e1e <HAL_GPIO_DeInit+0x6a>
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e006      	b.n	8003e2c <HAL_GPIO_DeInit+0x78>
 8003e1e:	2305      	movs	r3, #5
 8003e20:	e004      	b.n	8003e2c <HAL_GPIO_DeInit+0x78>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e002      	b.n	8003e2c <HAL_GPIO_DeInit+0x78>
 8003e26:	2301      	movs	r3, #1
 8003e28:	e000      	b.n	8003e2c <HAL_GPIO_DeInit+0x78>
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	2103      	movs	r1, #3
 8003e30:	400a      	ands	r2, r1
 8003e32:	00d2      	lsls	r2, r2, #3
 8003e34:	4093      	lsls	r3, r2
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d136      	bne.n	8003eaa <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003e3c:	4a41      	ldr	r2, [pc, #260]	; (8003f44 <HAL_GPIO_DeInit+0x190>)
 8003e3e:	2380      	movs	r3, #128	; 0x80
 8003e40:	58d3      	ldr	r3, [r2, r3]
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	43d2      	mvns	r2, r2
 8003e46:	493f      	ldr	r1, [pc, #252]	; (8003f44 <HAL_GPIO_DeInit+0x190>)
 8003e48:	4013      	ands	r3, r2
 8003e4a:	2280      	movs	r2, #128	; 0x80
 8003e4c:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8003e4e:	4a3d      	ldr	r2, [pc, #244]	; (8003f44 <HAL_GPIO_DeInit+0x190>)
 8003e50:	2384      	movs	r3, #132	; 0x84
 8003e52:	58d3      	ldr	r3, [r2, r3]
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	43d2      	mvns	r2, r2
 8003e58:	493a      	ldr	r1, [pc, #232]	; (8003f44 <HAL_GPIO_DeInit+0x190>)
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	2284      	movs	r2, #132	; 0x84
 8003e5e:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003e60:	4b38      	ldr	r3, [pc, #224]	; (8003f44 <HAL_GPIO_DeInit+0x190>)
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	43d9      	mvns	r1, r3
 8003e68:	4b36      	ldr	r3, [pc, #216]	; (8003f44 <HAL_GPIO_DeInit+0x190>)
 8003e6a:	400a      	ands	r2, r1
 8003e6c:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003e6e:	4b35      	ldr	r3, [pc, #212]	; (8003f44 <HAL_GPIO_DeInit+0x190>)
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	43d9      	mvns	r1, r3
 8003e76:	4b33      	ldr	r3, [pc, #204]	; (8003f44 <HAL_GPIO_DeInit+0x190>)
 8003e78:	400a      	ands	r2, r1
 8003e7a:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	2203      	movs	r2, #3
 8003e80:	4013      	ands	r3, r2
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	220f      	movs	r2, #15
 8003e86:	409a      	lsls	r2, r3
 8003e88:	0013      	movs	r3, r2
 8003e8a:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8003e8c:	4a2d      	ldr	r2, [pc, #180]	; (8003f44 <HAL_GPIO_DeInit+0x190>)
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	089b      	lsrs	r3, r3, #2
 8003e92:	3318      	adds	r3, #24
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	589a      	ldr	r2, [r3, r2]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	43d9      	mvns	r1, r3
 8003e9c:	4829      	ldr	r0, [pc, #164]	; (8003f44 <HAL_GPIO_DeInit+0x190>)
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	089b      	lsrs	r3, r3, #2
 8003ea2:	400a      	ands	r2, r1
 8003ea4:	3318      	adds	r3, #24
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	2103      	movs	r1, #3
 8003eb4:	4099      	lsls	r1, r3
 8003eb6:	000b      	movs	r3, r1
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	08da      	lsrs	r2, r3, #3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3208      	adds	r2, #8
 8003ec6:	0092      	lsls	r2, r2, #2
 8003ec8:	58d3      	ldr	r3, [r2, r3]
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	2107      	movs	r1, #7
 8003ece:	400a      	ands	r2, r1
 8003ed0:	0092      	lsls	r2, r2, #2
 8003ed2:	210f      	movs	r1, #15
 8003ed4:	4091      	lsls	r1, r2
 8003ed6:	000a      	movs	r2, r1
 8003ed8:	43d1      	mvns	r1, r2
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	08d2      	lsrs	r2, r2, #3
 8003ede:	4019      	ands	r1, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3208      	adds	r2, #8
 8003ee4:	0092      	lsls	r2, r2, #2
 8003ee6:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	0052      	lsls	r2, r2, #1
 8003ef0:	2103      	movs	r1, #3
 8003ef2:	4091      	lsls	r1, r2
 8003ef4:	000a      	movs	r2, r1
 8003ef6:	43d2      	mvns	r2, r2
 8003ef8:	401a      	ands	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2101      	movs	r1, #1
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	4091      	lsls	r1, r2
 8003f08:	000a      	movs	r2, r1
 8003f0a:	43d2      	mvns	r2, r2
 8003f0c:	401a      	ands	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	0052      	lsls	r2, r2, #1
 8003f1a:	2103      	movs	r1, #3
 8003f1c:	4091      	lsls	r1, r2
 8003f1e:	000a      	movs	r2, r1
 8003f20:	43d2      	mvns	r2, r2
 8003f22:	401a      	ands	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	40da      	lsrs	r2, r3
 8003f34:	1e13      	subs	r3, r2, #0
 8003f36:	d000      	beq.n	8003f3a <HAL_GPIO_DeInit+0x186>
 8003f38:	e744      	b.n	8003dc4 <HAL_GPIO_DeInit+0x10>
  }
}
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	46c0      	nop			; (mov r8, r8)
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	b006      	add	sp, #24
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40021800 	.word	0x40021800
 8003f48:	50000400 	.word	0x50000400
 8003f4c:	50000800 	.word	0x50000800
 8003f50:	50000c00 	.word	0x50000c00

08003f54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	000a      	movs	r2, r1
 8003f5e:	1cbb      	adds	r3, r7, #2
 8003f60:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	1cba      	adds	r2, r7, #2
 8003f68:	8812      	ldrh	r2, [r2, #0]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	d004      	beq.n	8003f78 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003f6e:	230f      	movs	r3, #15
 8003f70:	18fb      	adds	r3, r7, r3
 8003f72:	2201      	movs	r2, #1
 8003f74:	701a      	strb	r2, [r3, #0]
 8003f76:	e003      	b.n	8003f80 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f78:	230f      	movs	r3, #15
 8003f7a:	18fb      	adds	r3, r7, r3
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003f80:	230f      	movs	r3, #15
 8003f82:	18fb      	adds	r3, r7, r3
 8003f84:	781b      	ldrb	r3, [r3, #0]
}
 8003f86:	0018      	movs	r0, r3
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	b004      	add	sp, #16
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b082      	sub	sp, #8
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
 8003f96:	0008      	movs	r0, r1
 8003f98:	0011      	movs	r1, r2
 8003f9a:	1cbb      	adds	r3, r7, #2
 8003f9c:	1c02      	adds	r2, r0, #0
 8003f9e:	801a      	strh	r2, [r3, #0]
 8003fa0:	1c7b      	adds	r3, r7, #1
 8003fa2:	1c0a      	adds	r2, r1, #0
 8003fa4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fa6:	1c7b      	adds	r3, r7, #1
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d004      	beq.n	8003fb8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fae:	1cbb      	adds	r3, r7, #2
 8003fb0:	881a      	ldrh	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003fb6:	e003      	b.n	8003fc0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fb8:	1cbb      	adds	r3, r7, #2
 8003fba:	881a      	ldrh	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003fc0:	46c0      	nop			; (mov r8, r8)
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	b002      	add	sp, #8
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e082      	b.n	80040e0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2241      	movs	r2, #65	; 0x41
 8003fde:	5c9b      	ldrb	r3, [r3, r2]
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d107      	bne.n	8003ff6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2240      	movs	r2, #64	; 0x40
 8003fea:	2100      	movs	r1, #0
 8003fec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	f7ff f8e7 	bl	80031c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2241      	movs	r2, #65	; 0x41
 8003ffa:	2124      	movs	r1, #36	; 0x24
 8003ffc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2101      	movs	r1, #1
 800400a:	438a      	bics	r2, r1
 800400c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4934      	ldr	r1, [pc, #208]	; (80040e8 <HAL_I2C_Init+0x120>)
 8004018:	400a      	ands	r2, r1
 800401a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689a      	ldr	r2, [r3, #8]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4931      	ldr	r1, [pc, #196]	; (80040ec <HAL_I2C_Init+0x124>)
 8004028:	400a      	ands	r2, r1
 800402a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d108      	bne.n	8004046 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2180      	movs	r1, #128	; 0x80
 800403e:	0209      	lsls	r1, r1, #8
 8004040:	430a      	orrs	r2, r1
 8004042:	609a      	str	r2, [r3, #8]
 8004044:	e007      	b.n	8004056 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689a      	ldr	r2, [r3, #8]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2184      	movs	r1, #132	; 0x84
 8004050:	0209      	lsls	r1, r1, #8
 8004052:	430a      	orrs	r2, r1
 8004054:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	2b02      	cmp	r3, #2
 800405c:	d104      	bne.n	8004068 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2280      	movs	r2, #128	; 0x80
 8004064:	0112      	lsls	r2, r2, #4
 8004066:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	491f      	ldr	r1, [pc, #124]	; (80040f0 <HAL_I2C_Init+0x128>)
 8004074:	430a      	orrs	r2, r1
 8004076:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	491a      	ldr	r1, [pc, #104]	; (80040ec <HAL_I2C_Init+0x124>)
 8004084:	400a      	ands	r2, r1
 8004086:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691a      	ldr	r2, [r3, #16]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	431a      	orrs	r2, r3
 8004092:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	430a      	orrs	r2, r1
 80040a0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69d9      	ldr	r1, [r3, #28]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1a      	ldr	r2, [r3, #32]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2101      	movs	r1, #1
 80040be:	430a      	orrs	r2, r1
 80040c0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2241      	movs	r2, #65	; 0x41
 80040cc:	2120      	movs	r1, #32
 80040ce:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2242      	movs	r2, #66	; 0x42
 80040da:	2100      	movs	r1, #0
 80040dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	0018      	movs	r0, r3
 80040e2:	46bd      	mov	sp, r7
 80040e4:	b002      	add	sp, #8
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	f0ffffff 	.word	0xf0ffffff
 80040ec:	ffff7fff 	.word	0xffff7fff
 80040f0:	02008000 	.word	0x02008000

080040f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2241      	movs	r2, #65	; 0x41
 8004102:	5c9b      	ldrb	r3, [r3, r2]
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b20      	cmp	r3, #32
 8004108:	d138      	bne.n	800417c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2240      	movs	r2, #64	; 0x40
 800410e:	5c9b      	ldrb	r3, [r3, r2]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d101      	bne.n	8004118 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004114:	2302      	movs	r3, #2
 8004116:	e032      	b.n	800417e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2240      	movs	r2, #64	; 0x40
 800411c:	2101      	movs	r1, #1
 800411e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2241      	movs	r2, #65	; 0x41
 8004124:	2124      	movs	r1, #36	; 0x24
 8004126:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2101      	movs	r1, #1
 8004134:	438a      	bics	r2, r1
 8004136:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4911      	ldr	r1, [pc, #68]	; (8004188 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004144:	400a      	ands	r2, r1
 8004146:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6819      	ldr	r1, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2101      	movs	r1, #1
 8004164:	430a      	orrs	r2, r1
 8004166:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2241      	movs	r2, #65	; 0x41
 800416c:	2120      	movs	r1, #32
 800416e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2240      	movs	r2, #64	; 0x40
 8004174:	2100      	movs	r1, #0
 8004176:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004178:	2300      	movs	r3, #0
 800417a:	e000      	b.n	800417e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800417c:	2302      	movs	r3, #2
  }
}
 800417e:	0018      	movs	r0, r3
 8004180:	46bd      	mov	sp, r7
 8004182:	b002      	add	sp, #8
 8004184:	bd80      	pop	{r7, pc}
 8004186:	46c0      	nop			; (mov r8, r8)
 8004188:	ffffefff 	.word	0xffffefff

0800418c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2241      	movs	r2, #65	; 0x41
 800419a:	5c9b      	ldrb	r3, [r3, r2]
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b20      	cmp	r3, #32
 80041a0:	d139      	bne.n	8004216 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2240      	movs	r2, #64	; 0x40
 80041a6:	5c9b      	ldrb	r3, [r3, r2]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d101      	bne.n	80041b0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80041ac:	2302      	movs	r3, #2
 80041ae:	e033      	b.n	8004218 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2240      	movs	r2, #64	; 0x40
 80041b4:	2101      	movs	r1, #1
 80041b6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2241      	movs	r2, #65	; 0x41
 80041bc:	2124      	movs	r1, #36	; 0x24
 80041be:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2101      	movs	r1, #1
 80041cc:	438a      	bics	r2, r1
 80041ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4a11      	ldr	r2, [pc, #68]	; (8004220 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80041dc:	4013      	ands	r3, r2
 80041de:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	021b      	lsls	r3, r3, #8
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2101      	movs	r1, #1
 80041fe:	430a      	orrs	r2, r1
 8004200:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2241      	movs	r2, #65	; 0x41
 8004206:	2120      	movs	r1, #32
 8004208:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2240      	movs	r2, #64	; 0x40
 800420e:	2100      	movs	r1, #0
 8004210:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	e000      	b.n	8004218 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004216:	2302      	movs	r3, #2
  }
}
 8004218:	0018      	movs	r0, r3
 800421a:	46bd      	mov	sp, r7
 800421c:	b004      	add	sp, #16
 800421e:	bd80      	pop	{r7, pc}
 8004220:	fffff0ff 	.word	0xfffff0ff

08004224 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800422c:	4b19      	ldr	r3, [pc, #100]	; (8004294 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a19      	ldr	r2, [pc, #100]	; (8004298 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004232:	4013      	ands	r3, r2
 8004234:	0019      	movs	r1, r3
 8004236:	4b17      	ldr	r3, [pc, #92]	; (8004294 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	430a      	orrs	r2, r1
 800423c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	2380      	movs	r3, #128	; 0x80
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	429a      	cmp	r2, r3
 8004246:	d11f      	bne.n	8004288 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004248:	4b14      	ldr	r3, [pc, #80]	; (800429c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	0013      	movs	r3, r2
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	189b      	adds	r3, r3, r2
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	4912      	ldr	r1, [pc, #72]	; (80042a0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004256:	0018      	movs	r0, r3
 8004258:	f7fb ff70 	bl	800013c <__udivsi3>
 800425c:	0003      	movs	r3, r0
 800425e:	3301      	adds	r3, #1
 8004260:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004262:	e008      	b.n	8004276 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	3b01      	subs	r3, #1
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	e001      	b.n	8004276 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e009      	b.n	800428a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004276:	4b07      	ldr	r3, [pc, #28]	; (8004294 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004278:	695a      	ldr	r2, [r3, #20]
 800427a:	2380      	movs	r3, #128	; 0x80
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	401a      	ands	r2, r3
 8004280:	2380      	movs	r3, #128	; 0x80
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	429a      	cmp	r2, r3
 8004286:	d0ed      	beq.n	8004264 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	0018      	movs	r0, r3
 800428c:	46bd      	mov	sp, r7
 800428e:	b004      	add	sp, #16
 8004290:	bd80      	pop	{r7, pc}
 8004292:	46c0      	nop			; (mov r8, r8)
 8004294:	40007000 	.word	0x40007000
 8004298:	fffff9ff 	.word	0xfffff9ff
 800429c:	2000002c 	.word	0x2000002c
 80042a0:	000f4240 	.word	0x000f4240

080042a4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80042a8:	4b03      	ldr	r3, [pc, #12]	; (80042b8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	23e0      	movs	r3, #224	; 0xe0
 80042ae:	01db      	lsls	r3, r3, #7
 80042b0:	4013      	ands	r3, r2
}
 80042b2:	0018      	movs	r0, r3
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40021000 	.word	0x40021000

080042bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e2fe      	b.n	80048cc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2201      	movs	r2, #1
 80042d4:	4013      	ands	r3, r2
 80042d6:	d100      	bne.n	80042da <HAL_RCC_OscConfig+0x1e>
 80042d8:	e07c      	b.n	80043d4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042da:	4bc3      	ldr	r3, [pc, #780]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	2238      	movs	r2, #56	; 0x38
 80042e0:	4013      	ands	r3, r2
 80042e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042e4:	4bc0      	ldr	r3, [pc, #768]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	2203      	movs	r2, #3
 80042ea:	4013      	ands	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	2b10      	cmp	r3, #16
 80042f2:	d102      	bne.n	80042fa <HAL_RCC_OscConfig+0x3e>
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	2b03      	cmp	r3, #3
 80042f8:	d002      	beq.n	8004300 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	2b08      	cmp	r3, #8
 80042fe:	d10b      	bne.n	8004318 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004300:	4bb9      	ldr	r3, [pc, #740]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	2380      	movs	r3, #128	; 0x80
 8004306:	029b      	lsls	r3, r3, #10
 8004308:	4013      	ands	r3, r2
 800430a:	d062      	beq.n	80043d2 <HAL_RCC_OscConfig+0x116>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d15e      	bne.n	80043d2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e2d9      	b.n	80048cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	2380      	movs	r3, #128	; 0x80
 800431e:	025b      	lsls	r3, r3, #9
 8004320:	429a      	cmp	r2, r3
 8004322:	d107      	bne.n	8004334 <HAL_RCC_OscConfig+0x78>
 8004324:	4bb0      	ldr	r3, [pc, #704]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	4baf      	ldr	r3, [pc, #700]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 800432a:	2180      	movs	r1, #128	; 0x80
 800432c:	0249      	lsls	r1, r1, #9
 800432e:	430a      	orrs	r2, r1
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	e020      	b.n	8004376 <HAL_RCC_OscConfig+0xba>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	23a0      	movs	r3, #160	; 0xa0
 800433a:	02db      	lsls	r3, r3, #11
 800433c:	429a      	cmp	r2, r3
 800433e:	d10e      	bne.n	800435e <HAL_RCC_OscConfig+0xa2>
 8004340:	4ba9      	ldr	r3, [pc, #676]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	4ba8      	ldr	r3, [pc, #672]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 8004346:	2180      	movs	r1, #128	; 0x80
 8004348:	02c9      	lsls	r1, r1, #11
 800434a:	430a      	orrs	r2, r1
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	4ba6      	ldr	r3, [pc, #664]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	4ba5      	ldr	r3, [pc, #660]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 8004354:	2180      	movs	r1, #128	; 0x80
 8004356:	0249      	lsls	r1, r1, #9
 8004358:	430a      	orrs	r2, r1
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	e00b      	b.n	8004376 <HAL_RCC_OscConfig+0xba>
 800435e:	4ba2      	ldr	r3, [pc, #648]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	4ba1      	ldr	r3, [pc, #644]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 8004364:	49a1      	ldr	r1, [pc, #644]	; (80045ec <HAL_RCC_OscConfig+0x330>)
 8004366:	400a      	ands	r2, r1
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	4b9f      	ldr	r3, [pc, #636]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	4b9e      	ldr	r3, [pc, #632]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 8004370:	499f      	ldr	r1, [pc, #636]	; (80045f0 <HAL_RCC_OscConfig+0x334>)
 8004372:	400a      	ands	r2, r1
 8004374:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d014      	beq.n	80043a8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437e:	f7ff faa9 	bl	80038d4 <HAL_GetTick>
 8004382:	0003      	movs	r3, r0
 8004384:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004386:	e008      	b.n	800439a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004388:	f7ff faa4 	bl	80038d4 <HAL_GetTick>
 800438c:	0002      	movs	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b64      	cmp	r3, #100	; 0x64
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e298      	b.n	80048cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800439a:	4b93      	ldr	r3, [pc, #588]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	2380      	movs	r3, #128	; 0x80
 80043a0:	029b      	lsls	r3, r3, #10
 80043a2:	4013      	ands	r3, r2
 80043a4:	d0f0      	beq.n	8004388 <HAL_RCC_OscConfig+0xcc>
 80043a6:	e015      	b.n	80043d4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a8:	f7ff fa94 	bl	80038d4 <HAL_GetTick>
 80043ac:	0003      	movs	r3, r0
 80043ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043b0:	e008      	b.n	80043c4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043b2:	f7ff fa8f 	bl	80038d4 <HAL_GetTick>
 80043b6:	0002      	movs	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b64      	cmp	r3, #100	; 0x64
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e283      	b.n	80048cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043c4:	4b88      	ldr	r3, [pc, #544]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	2380      	movs	r3, #128	; 0x80
 80043ca:	029b      	lsls	r3, r3, #10
 80043cc:	4013      	ands	r3, r2
 80043ce:	d1f0      	bne.n	80043b2 <HAL_RCC_OscConfig+0xf6>
 80043d0:	e000      	b.n	80043d4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2202      	movs	r2, #2
 80043da:	4013      	ands	r3, r2
 80043dc:	d100      	bne.n	80043e0 <HAL_RCC_OscConfig+0x124>
 80043de:	e099      	b.n	8004514 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043e0:	4b81      	ldr	r3, [pc, #516]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	2238      	movs	r2, #56	; 0x38
 80043e6:	4013      	ands	r3, r2
 80043e8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043ea:	4b7f      	ldr	r3, [pc, #508]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	2203      	movs	r2, #3
 80043f0:	4013      	ands	r3, r2
 80043f2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	2b10      	cmp	r3, #16
 80043f8:	d102      	bne.n	8004400 <HAL_RCC_OscConfig+0x144>
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d002      	beq.n	8004406 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d135      	bne.n	8004472 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004406:	4b78      	ldr	r3, [pc, #480]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	2380      	movs	r3, #128	; 0x80
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	4013      	ands	r3, r2
 8004410:	d005      	beq.n	800441e <HAL_RCC_OscConfig+0x162>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e256      	b.n	80048cc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800441e:	4b72      	ldr	r3, [pc, #456]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	4a74      	ldr	r2, [pc, #464]	; (80045f4 <HAL_RCC_OscConfig+0x338>)
 8004424:	4013      	ands	r3, r2
 8004426:	0019      	movs	r1, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	021a      	lsls	r2, r3, #8
 800442e:	4b6e      	ldr	r3, [pc, #440]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 8004430:	430a      	orrs	r2, r1
 8004432:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d112      	bne.n	8004460 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800443a:	4b6b      	ldr	r3, [pc, #428]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a6e      	ldr	r2, [pc, #440]	; (80045f8 <HAL_RCC_OscConfig+0x33c>)
 8004440:	4013      	ands	r3, r2
 8004442:	0019      	movs	r1, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691a      	ldr	r2, [r3, #16]
 8004448:	4b67      	ldr	r3, [pc, #412]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 800444a:	430a      	orrs	r2, r1
 800444c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800444e:	4b66      	ldr	r3, [pc, #408]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	0adb      	lsrs	r3, r3, #11
 8004454:	2207      	movs	r2, #7
 8004456:	4013      	ands	r3, r2
 8004458:	4a68      	ldr	r2, [pc, #416]	; (80045fc <HAL_RCC_OscConfig+0x340>)
 800445a:	40da      	lsrs	r2, r3
 800445c:	4b68      	ldr	r3, [pc, #416]	; (8004600 <HAL_RCC_OscConfig+0x344>)
 800445e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004460:	4b68      	ldr	r3, [pc, #416]	; (8004604 <HAL_RCC_OscConfig+0x348>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	0018      	movs	r0, r3
 8004466:	f7ff f9d9 	bl	800381c <HAL_InitTick>
 800446a:	1e03      	subs	r3, r0, #0
 800446c:	d051      	beq.n	8004512 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e22c      	b.n	80048cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d030      	beq.n	80044dc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800447a:	4b5b      	ldr	r3, [pc, #364]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a5e      	ldr	r2, [pc, #376]	; (80045f8 <HAL_RCC_OscConfig+0x33c>)
 8004480:	4013      	ands	r3, r2
 8004482:	0019      	movs	r1, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	691a      	ldr	r2, [r3, #16]
 8004488:	4b57      	ldr	r3, [pc, #348]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 800448a:	430a      	orrs	r2, r1
 800448c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800448e:	4b56      	ldr	r3, [pc, #344]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	4b55      	ldr	r3, [pc, #340]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 8004494:	2180      	movs	r1, #128	; 0x80
 8004496:	0049      	lsls	r1, r1, #1
 8004498:	430a      	orrs	r2, r1
 800449a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449c:	f7ff fa1a 	bl	80038d4 <HAL_GetTick>
 80044a0:	0003      	movs	r3, r0
 80044a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044a4:	e008      	b.n	80044b8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044a6:	f7ff fa15 	bl	80038d4 <HAL_GetTick>
 80044aa:	0002      	movs	r2, r0
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e209      	b.n	80048cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044b8:	4b4b      	ldr	r3, [pc, #300]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	2380      	movs	r3, #128	; 0x80
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	4013      	ands	r3, r2
 80044c2:	d0f0      	beq.n	80044a6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c4:	4b48      	ldr	r3, [pc, #288]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	4a4a      	ldr	r2, [pc, #296]	; (80045f4 <HAL_RCC_OscConfig+0x338>)
 80044ca:	4013      	ands	r3, r2
 80044cc:	0019      	movs	r1, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	021a      	lsls	r2, r3, #8
 80044d4:	4b44      	ldr	r3, [pc, #272]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 80044d6:	430a      	orrs	r2, r1
 80044d8:	605a      	str	r2, [r3, #4]
 80044da:	e01b      	b.n	8004514 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80044dc:	4b42      	ldr	r3, [pc, #264]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	4b41      	ldr	r3, [pc, #260]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 80044e2:	4949      	ldr	r1, [pc, #292]	; (8004608 <HAL_RCC_OscConfig+0x34c>)
 80044e4:	400a      	ands	r2, r1
 80044e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e8:	f7ff f9f4 	bl	80038d4 <HAL_GetTick>
 80044ec:	0003      	movs	r3, r0
 80044ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044f0:	e008      	b.n	8004504 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044f2:	f7ff f9ef 	bl	80038d4 <HAL_GetTick>
 80044f6:	0002      	movs	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d901      	bls.n	8004504 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e1e3      	b.n	80048cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004504:	4b38      	ldr	r3, [pc, #224]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	2380      	movs	r3, #128	; 0x80
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	4013      	ands	r3, r2
 800450e:	d1f0      	bne.n	80044f2 <HAL_RCC_OscConfig+0x236>
 8004510:	e000      	b.n	8004514 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004512:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2208      	movs	r2, #8
 800451a:	4013      	ands	r3, r2
 800451c:	d047      	beq.n	80045ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800451e:	4b32      	ldr	r3, [pc, #200]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	2238      	movs	r2, #56	; 0x38
 8004524:	4013      	ands	r3, r2
 8004526:	2b18      	cmp	r3, #24
 8004528:	d10a      	bne.n	8004540 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800452a:	4b2f      	ldr	r3, [pc, #188]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 800452c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800452e:	2202      	movs	r2, #2
 8004530:	4013      	ands	r3, r2
 8004532:	d03c      	beq.n	80045ae <HAL_RCC_OscConfig+0x2f2>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d138      	bne.n	80045ae <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e1c5      	b.n	80048cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d019      	beq.n	800457c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004548:	4b27      	ldr	r3, [pc, #156]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 800454a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800454c:	4b26      	ldr	r3, [pc, #152]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 800454e:	2101      	movs	r1, #1
 8004550:	430a      	orrs	r2, r1
 8004552:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004554:	f7ff f9be 	bl	80038d4 <HAL_GetTick>
 8004558:	0003      	movs	r3, r0
 800455a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800455c:	e008      	b.n	8004570 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800455e:	f7ff f9b9 	bl	80038d4 <HAL_GetTick>
 8004562:	0002      	movs	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e1ad      	b.n	80048cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004570:	4b1d      	ldr	r3, [pc, #116]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 8004572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004574:	2202      	movs	r2, #2
 8004576:	4013      	ands	r3, r2
 8004578:	d0f1      	beq.n	800455e <HAL_RCC_OscConfig+0x2a2>
 800457a:	e018      	b.n	80045ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800457c:	4b1a      	ldr	r3, [pc, #104]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 800457e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004580:	4b19      	ldr	r3, [pc, #100]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 8004582:	2101      	movs	r1, #1
 8004584:	438a      	bics	r2, r1
 8004586:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004588:	f7ff f9a4 	bl	80038d4 <HAL_GetTick>
 800458c:	0003      	movs	r3, r0
 800458e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004590:	e008      	b.n	80045a4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004592:	f7ff f99f 	bl	80038d4 <HAL_GetTick>
 8004596:	0002      	movs	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d901      	bls.n	80045a4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e193      	b.n	80048cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045a4:	4b10      	ldr	r3, [pc, #64]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 80045a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a8:	2202      	movs	r2, #2
 80045aa:	4013      	ands	r3, r2
 80045ac:	d1f1      	bne.n	8004592 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2204      	movs	r2, #4
 80045b4:	4013      	ands	r3, r2
 80045b6:	d100      	bne.n	80045ba <HAL_RCC_OscConfig+0x2fe>
 80045b8:	e0c6      	b.n	8004748 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ba:	231f      	movs	r3, #31
 80045bc:	18fb      	adds	r3, r7, r3
 80045be:	2200      	movs	r2, #0
 80045c0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80045c2:	4b09      	ldr	r3, [pc, #36]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	2238      	movs	r2, #56	; 0x38
 80045c8:	4013      	ands	r3, r2
 80045ca:	2b20      	cmp	r3, #32
 80045cc:	d11e      	bne.n	800460c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80045ce:	4b06      	ldr	r3, [pc, #24]	; (80045e8 <HAL_RCC_OscConfig+0x32c>)
 80045d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d2:	2202      	movs	r2, #2
 80045d4:	4013      	ands	r3, r2
 80045d6:	d100      	bne.n	80045da <HAL_RCC_OscConfig+0x31e>
 80045d8:	e0b6      	b.n	8004748 <HAL_RCC_OscConfig+0x48c>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d000      	beq.n	80045e4 <HAL_RCC_OscConfig+0x328>
 80045e2:	e0b1      	b.n	8004748 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e171      	b.n	80048cc <HAL_RCC_OscConfig+0x610>
 80045e8:	40021000 	.word	0x40021000
 80045ec:	fffeffff 	.word	0xfffeffff
 80045f0:	fffbffff 	.word	0xfffbffff
 80045f4:	ffff80ff 	.word	0xffff80ff
 80045f8:	ffffc7ff 	.word	0xffffc7ff
 80045fc:	00f42400 	.word	0x00f42400
 8004600:	2000002c 	.word	0x2000002c
 8004604:	20000030 	.word	0x20000030
 8004608:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800460c:	4bb1      	ldr	r3, [pc, #708]	; (80048d4 <HAL_RCC_OscConfig+0x618>)
 800460e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004610:	2380      	movs	r3, #128	; 0x80
 8004612:	055b      	lsls	r3, r3, #21
 8004614:	4013      	ands	r3, r2
 8004616:	d101      	bne.n	800461c <HAL_RCC_OscConfig+0x360>
 8004618:	2301      	movs	r3, #1
 800461a:	e000      	b.n	800461e <HAL_RCC_OscConfig+0x362>
 800461c:	2300      	movs	r3, #0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d011      	beq.n	8004646 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004622:	4bac      	ldr	r3, [pc, #688]	; (80048d4 <HAL_RCC_OscConfig+0x618>)
 8004624:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004626:	4bab      	ldr	r3, [pc, #684]	; (80048d4 <HAL_RCC_OscConfig+0x618>)
 8004628:	2180      	movs	r1, #128	; 0x80
 800462a:	0549      	lsls	r1, r1, #21
 800462c:	430a      	orrs	r2, r1
 800462e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004630:	4ba8      	ldr	r3, [pc, #672]	; (80048d4 <HAL_RCC_OscConfig+0x618>)
 8004632:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004634:	2380      	movs	r3, #128	; 0x80
 8004636:	055b      	lsls	r3, r3, #21
 8004638:	4013      	ands	r3, r2
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800463e:	231f      	movs	r3, #31
 8004640:	18fb      	adds	r3, r7, r3
 8004642:	2201      	movs	r2, #1
 8004644:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004646:	4ba4      	ldr	r3, [pc, #656]	; (80048d8 <HAL_RCC_OscConfig+0x61c>)
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	2380      	movs	r3, #128	; 0x80
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	4013      	ands	r3, r2
 8004650:	d11a      	bne.n	8004688 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004652:	4ba1      	ldr	r3, [pc, #644]	; (80048d8 <HAL_RCC_OscConfig+0x61c>)
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	4ba0      	ldr	r3, [pc, #640]	; (80048d8 <HAL_RCC_OscConfig+0x61c>)
 8004658:	2180      	movs	r1, #128	; 0x80
 800465a:	0049      	lsls	r1, r1, #1
 800465c:	430a      	orrs	r2, r1
 800465e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004660:	f7ff f938 	bl	80038d4 <HAL_GetTick>
 8004664:	0003      	movs	r3, r0
 8004666:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004668:	e008      	b.n	800467c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800466a:	f7ff f933 	bl	80038d4 <HAL_GetTick>
 800466e:	0002      	movs	r2, r0
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d901      	bls.n	800467c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e127      	b.n	80048cc <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800467c:	4b96      	ldr	r3, [pc, #600]	; (80048d8 <HAL_RCC_OscConfig+0x61c>)
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	2380      	movs	r3, #128	; 0x80
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	4013      	ands	r3, r2
 8004686:	d0f0      	beq.n	800466a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d106      	bne.n	800469e <HAL_RCC_OscConfig+0x3e2>
 8004690:	4b90      	ldr	r3, [pc, #576]	; (80048d4 <HAL_RCC_OscConfig+0x618>)
 8004692:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004694:	4b8f      	ldr	r3, [pc, #572]	; (80048d4 <HAL_RCC_OscConfig+0x618>)
 8004696:	2101      	movs	r1, #1
 8004698:	430a      	orrs	r2, r1
 800469a:	65da      	str	r2, [r3, #92]	; 0x5c
 800469c:	e01c      	b.n	80046d8 <HAL_RCC_OscConfig+0x41c>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	2b05      	cmp	r3, #5
 80046a4:	d10c      	bne.n	80046c0 <HAL_RCC_OscConfig+0x404>
 80046a6:	4b8b      	ldr	r3, [pc, #556]	; (80048d4 <HAL_RCC_OscConfig+0x618>)
 80046a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046aa:	4b8a      	ldr	r3, [pc, #552]	; (80048d4 <HAL_RCC_OscConfig+0x618>)
 80046ac:	2104      	movs	r1, #4
 80046ae:	430a      	orrs	r2, r1
 80046b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80046b2:	4b88      	ldr	r3, [pc, #544]	; (80048d4 <HAL_RCC_OscConfig+0x618>)
 80046b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046b6:	4b87      	ldr	r3, [pc, #540]	; (80048d4 <HAL_RCC_OscConfig+0x618>)
 80046b8:	2101      	movs	r1, #1
 80046ba:	430a      	orrs	r2, r1
 80046bc:	65da      	str	r2, [r3, #92]	; 0x5c
 80046be:	e00b      	b.n	80046d8 <HAL_RCC_OscConfig+0x41c>
 80046c0:	4b84      	ldr	r3, [pc, #528]	; (80048d4 <HAL_RCC_OscConfig+0x618>)
 80046c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046c4:	4b83      	ldr	r3, [pc, #524]	; (80048d4 <HAL_RCC_OscConfig+0x618>)
 80046c6:	2101      	movs	r1, #1
 80046c8:	438a      	bics	r2, r1
 80046ca:	65da      	str	r2, [r3, #92]	; 0x5c
 80046cc:	4b81      	ldr	r3, [pc, #516]	; (80048d4 <HAL_RCC_OscConfig+0x618>)
 80046ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046d0:	4b80      	ldr	r3, [pc, #512]	; (80048d4 <HAL_RCC_OscConfig+0x618>)
 80046d2:	2104      	movs	r1, #4
 80046d4:	438a      	bics	r2, r1
 80046d6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d014      	beq.n	800470a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e0:	f7ff f8f8 	bl	80038d4 <HAL_GetTick>
 80046e4:	0003      	movs	r3, r0
 80046e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046e8:	e009      	b.n	80046fe <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ea:	f7ff f8f3 	bl	80038d4 <HAL_GetTick>
 80046ee:	0002      	movs	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	4a79      	ldr	r2, [pc, #484]	; (80048dc <HAL_RCC_OscConfig+0x620>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e0e6      	b.n	80048cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046fe:	4b75      	ldr	r3, [pc, #468]	; (80048d4 <HAL_RCC_OscConfig+0x618>)
 8004700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004702:	2202      	movs	r2, #2
 8004704:	4013      	ands	r3, r2
 8004706:	d0f0      	beq.n	80046ea <HAL_RCC_OscConfig+0x42e>
 8004708:	e013      	b.n	8004732 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470a:	f7ff f8e3 	bl	80038d4 <HAL_GetTick>
 800470e:	0003      	movs	r3, r0
 8004710:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004712:	e009      	b.n	8004728 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004714:	f7ff f8de 	bl	80038d4 <HAL_GetTick>
 8004718:	0002      	movs	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	4a6f      	ldr	r2, [pc, #444]	; (80048dc <HAL_RCC_OscConfig+0x620>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d901      	bls.n	8004728 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e0d1      	b.n	80048cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004728:	4b6a      	ldr	r3, [pc, #424]	; (80048d4 <HAL_RCC_OscConfig+0x618>)
 800472a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800472c:	2202      	movs	r2, #2
 800472e:	4013      	ands	r3, r2
 8004730:	d1f0      	bne.n	8004714 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004732:	231f      	movs	r3, #31
 8004734:	18fb      	adds	r3, r7, r3
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d105      	bne.n	8004748 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800473c:	4b65      	ldr	r3, [pc, #404]	; (80048d4 <HAL_RCC_OscConfig+0x618>)
 800473e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004740:	4b64      	ldr	r3, [pc, #400]	; (80048d4 <HAL_RCC_OscConfig+0x618>)
 8004742:	4967      	ldr	r1, [pc, #412]	; (80048e0 <HAL_RCC_OscConfig+0x624>)
 8004744:	400a      	ands	r2, r1
 8004746:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	69db      	ldr	r3, [r3, #28]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d100      	bne.n	8004752 <HAL_RCC_OscConfig+0x496>
 8004750:	e0bb      	b.n	80048ca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004752:	4b60      	ldr	r3, [pc, #384]	; (80048d4 <HAL_RCC_OscConfig+0x618>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	2238      	movs	r2, #56	; 0x38
 8004758:	4013      	ands	r3, r2
 800475a:	2b10      	cmp	r3, #16
 800475c:	d100      	bne.n	8004760 <HAL_RCC_OscConfig+0x4a4>
 800475e:	e07b      	b.n	8004858 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	2b02      	cmp	r3, #2
 8004766:	d156      	bne.n	8004816 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004768:	4b5a      	ldr	r3, [pc, #360]	; (80048d4 <HAL_RCC_OscConfig+0x618>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	4b59      	ldr	r3, [pc, #356]	; (80048d4 <HAL_RCC_OscConfig+0x618>)
 800476e:	495d      	ldr	r1, [pc, #372]	; (80048e4 <HAL_RCC_OscConfig+0x628>)
 8004770:	400a      	ands	r2, r1
 8004772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004774:	f7ff f8ae 	bl	80038d4 <HAL_GetTick>
 8004778:	0003      	movs	r3, r0
 800477a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800477c:	e008      	b.n	8004790 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800477e:	f7ff f8a9 	bl	80038d4 <HAL_GetTick>
 8004782:	0002      	movs	r2, r0
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d901      	bls.n	8004790 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e09d      	b.n	80048cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004790:	4b50      	ldr	r3, [pc, #320]	; (80048d4 <HAL_RCC_OscConfig+0x618>)
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	2380      	movs	r3, #128	; 0x80
 8004796:	049b      	lsls	r3, r3, #18
 8004798:	4013      	ands	r3, r2
 800479a:	d1f0      	bne.n	800477e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800479c:	4b4d      	ldr	r3, [pc, #308]	; (80048d4 <HAL_RCC_OscConfig+0x618>)
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	4a51      	ldr	r2, [pc, #324]	; (80048e8 <HAL_RCC_OscConfig+0x62c>)
 80047a2:	4013      	ands	r3, r2
 80047a4:	0019      	movs	r1, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1a      	ldr	r2, [r3, #32]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b4:	021b      	lsls	r3, r3, #8
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047bc:	431a      	orrs	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c2:	431a      	orrs	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c8:	431a      	orrs	r2, r3
 80047ca:	4b42      	ldr	r3, [pc, #264]	; (80048d4 <HAL_RCC_OscConfig+0x618>)
 80047cc:	430a      	orrs	r2, r1
 80047ce:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047d0:	4b40      	ldr	r3, [pc, #256]	; (80048d4 <HAL_RCC_OscConfig+0x618>)
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	4b3f      	ldr	r3, [pc, #252]	; (80048d4 <HAL_RCC_OscConfig+0x618>)
 80047d6:	2180      	movs	r1, #128	; 0x80
 80047d8:	0449      	lsls	r1, r1, #17
 80047da:	430a      	orrs	r2, r1
 80047dc:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80047de:	4b3d      	ldr	r3, [pc, #244]	; (80048d4 <HAL_RCC_OscConfig+0x618>)
 80047e0:	68da      	ldr	r2, [r3, #12]
 80047e2:	4b3c      	ldr	r3, [pc, #240]	; (80048d4 <HAL_RCC_OscConfig+0x618>)
 80047e4:	2180      	movs	r1, #128	; 0x80
 80047e6:	0549      	lsls	r1, r1, #21
 80047e8:	430a      	orrs	r2, r1
 80047ea:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ec:	f7ff f872 	bl	80038d4 <HAL_GetTick>
 80047f0:	0003      	movs	r3, r0
 80047f2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047f4:	e008      	b.n	8004808 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047f6:	f7ff f86d 	bl	80038d4 <HAL_GetTick>
 80047fa:	0002      	movs	r2, r0
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d901      	bls.n	8004808 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e061      	b.n	80048cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004808:	4b32      	ldr	r3, [pc, #200]	; (80048d4 <HAL_RCC_OscConfig+0x618>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	2380      	movs	r3, #128	; 0x80
 800480e:	049b      	lsls	r3, r3, #18
 8004810:	4013      	ands	r3, r2
 8004812:	d0f0      	beq.n	80047f6 <HAL_RCC_OscConfig+0x53a>
 8004814:	e059      	b.n	80048ca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004816:	4b2f      	ldr	r3, [pc, #188]	; (80048d4 <HAL_RCC_OscConfig+0x618>)
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	4b2e      	ldr	r3, [pc, #184]	; (80048d4 <HAL_RCC_OscConfig+0x618>)
 800481c:	4931      	ldr	r1, [pc, #196]	; (80048e4 <HAL_RCC_OscConfig+0x628>)
 800481e:	400a      	ands	r2, r1
 8004820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004822:	f7ff f857 	bl	80038d4 <HAL_GetTick>
 8004826:	0003      	movs	r3, r0
 8004828:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800482c:	f7ff f852 	bl	80038d4 <HAL_GetTick>
 8004830:	0002      	movs	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e046      	b.n	80048cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800483e:	4b25      	ldr	r3, [pc, #148]	; (80048d4 <HAL_RCC_OscConfig+0x618>)
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	2380      	movs	r3, #128	; 0x80
 8004844:	049b      	lsls	r3, r3, #18
 8004846:	4013      	ands	r3, r2
 8004848:	d1f0      	bne.n	800482c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800484a:	4b22      	ldr	r3, [pc, #136]	; (80048d4 <HAL_RCC_OscConfig+0x618>)
 800484c:	68da      	ldr	r2, [r3, #12]
 800484e:	4b21      	ldr	r3, [pc, #132]	; (80048d4 <HAL_RCC_OscConfig+0x618>)
 8004850:	4926      	ldr	r1, [pc, #152]	; (80048ec <HAL_RCC_OscConfig+0x630>)
 8004852:	400a      	ands	r2, r1
 8004854:	60da      	str	r2, [r3, #12]
 8004856:	e038      	b.n	80048ca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	69db      	ldr	r3, [r3, #28]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d101      	bne.n	8004864 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e033      	b.n	80048cc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004864:	4b1b      	ldr	r3, [pc, #108]	; (80048d4 <HAL_RCC_OscConfig+0x618>)
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2203      	movs	r2, #3
 800486e:	401a      	ands	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a1b      	ldr	r3, [r3, #32]
 8004874:	429a      	cmp	r2, r3
 8004876:	d126      	bne.n	80048c6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	2270      	movs	r2, #112	; 0x70
 800487c:	401a      	ands	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004882:	429a      	cmp	r2, r3
 8004884:	d11f      	bne.n	80048c6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	23fe      	movs	r3, #254	; 0xfe
 800488a:	01db      	lsls	r3, r3, #7
 800488c:	401a      	ands	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004892:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004894:	429a      	cmp	r2, r3
 8004896:	d116      	bne.n	80048c6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	23f8      	movs	r3, #248	; 0xf8
 800489c:	039b      	lsls	r3, r3, #14
 800489e:	401a      	ands	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d10e      	bne.n	80048c6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	23e0      	movs	r3, #224	; 0xe0
 80048ac:	051b      	lsls	r3, r3, #20
 80048ae:	401a      	ands	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d106      	bne.n	80048c6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	0f5b      	lsrs	r3, r3, #29
 80048bc:	075a      	lsls	r2, r3, #29
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d001      	beq.n	80048ca <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e000      	b.n	80048cc <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	0018      	movs	r0, r3
 80048ce:	46bd      	mov	sp, r7
 80048d0:	b008      	add	sp, #32
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	40021000 	.word	0x40021000
 80048d8:	40007000 	.word	0x40007000
 80048dc:	00001388 	.word	0x00001388
 80048e0:	efffffff 	.word	0xefffffff
 80048e4:	feffffff 	.word	0xfeffffff
 80048e8:	11c1808c 	.word	0x11c1808c
 80048ec:	eefefffc 	.word	0xeefefffc

080048f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d101      	bne.n	8004904 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e0e9      	b.n	8004ad8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004904:	4b76      	ldr	r3, [pc, #472]	; (8004ae0 <HAL_RCC_ClockConfig+0x1f0>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2207      	movs	r2, #7
 800490a:	4013      	ands	r3, r2
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	429a      	cmp	r2, r3
 8004910:	d91e      	bls.n	8004950 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004912:	4b73      	ldr	r3, [pc, #460]	; (8004ae0 <HAL_RCC_ClockConfig+0x1f0>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2207      	movs	r2, #7
 8004918:	4393      	bics	r3, r2
 800491a:	0019      	movs	r1, r3
 800491c:	4b70      	ldr	r3, [pc, #448]	; (8004ae0 <HAL_RCC_ClockConfig+0x1f0>)
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004924:	f7fe ffd6 	bl	80038d4 <HAL_GetTick>
 8004928:	0003      	movs	r3, r0
 800492a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800492c:	e009      	b.n	8004942 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800492e:	f7fe ffd1 	bl	80038d4 <HAL_GetTick>
 8004932:	0002      	movs	r2, r0
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	4a6a      	ldr	r2, [pc, #424]	; (8004ae4 <HAL_RCC_ClockConfig+0x1f4>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e0ca      	b.n	8004ad8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004942:	4b67      	ldr	r3, [pc, #412]	; (8004ae0 <HAL_RCC_ClockConfig+0x1f0>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2207      	movs	r2, #7
 8004948:	4013      	ands	r3, r2
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	429a      	cmp	r2, r3
 800494e:	d1ee      	bne.n	800492e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2202      	movs	r2, #2
 8004956:	4013      	ands	r3, r2
 8004958:	d015      	beq.n	8004986 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2204      	movs	r2, #4
 8004960:	4013      	ands	r3, r2
 8004962:	d006      	beq.n	8004972 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004964:	4b60      	ldr	r3, [pc, #384]	; (8004ae8 <HAL_RCC_ClockConfig+0x1f8>)
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	4b5f      	ldr	r3, [pc, #380]	; (8004ae8 <HAL_RCC_ClockConfig+0x1f8>)
 800496a:	21e0      	movs	r1, #224	; 0xe0
 800496c:	01c9      	lsls	r1, r1, #7
 800496e:	430a      	orrs	r2, r1
 8004970:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004972:	4b5d      	ldr	r3, [pc, #372]	; (8004ae8 <HAL_RCC_ClockConfig+0x1f8>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	4a5d      	ldr	r2, [pc, #372]	; (8004aec <HAL_RCC_ClockConfig+0x1fc>)
 8004978:	4013      	ands	r3, r2
 800497a:	0019      	movs	r1, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689a      	ldr	r2, [r3, #8]
 8004980:	4b59      	ldr	r3, [pc, #356]	; (8004ae8 <HAL_RCC_ClockConfig+0x1f8>)
 8004982:	430a      	orrs	r2, r1
 8004984:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2201      	movs	r2, #1
 800498c:	4013      	ands	r3, r2
 800498e:	d057      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d107      	bne.n	80049a8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004998:	4b53      	ldr	r3, [pc, #332]	; (8004ae8 <HAL_RCC_ClockConfig+0x1f8>)
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	2380      	movs	r3, #128	; 0x80
 800499e:	029b      	lsls	r3, r3, #10
 80049a0:	4013      	ands	r3, r2
 80049a2:	d12b      	bne.n	80049fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e097      	b.n	8004ad8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d107      	bne.n	80049c0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049b0:	4b4d      	ldr	r3, [pc, #308]	; (8004ae8 <HAL_RCC_ClockConfig+0x1f8>)
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	2380      	movs	r3, #128	; 0x80
 80049b6:	049b      	lsls	r3, r3, #18
 80049b8:	4013      	ands	r3, r2
 80049ba:	d11f      	bne.n	80049fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e08b      	b.n	8004ad8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d107      	bne.n	80049d8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049c8:	4b47      	ldr	r3, [pc, #284]	; (8004ae8 <HAL_RCC_ClockConfig+0x1f8>)
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	2380      	movs	r3, #128	; 0x80
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	4013      	ands	r3, r2
 80049d2:	d113      	bne.n	80049fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e07f      	b.n	8004ad8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	2b03      	cmp	r3, #3
 80049de:	d106      	bne.n	80049ee <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049e0:	4b41      	ldr	r3, [pc, #260]	; (8004ae8 <HAL_RCC_ClockConfig+0x1f8>)
 80049e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049e4:	2202      	movs	r2, #2
 80049e6:	4013      	ands	r3, r2
 80049e8:	d108      	bne.n	80049fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e074      	b.n	8004ad8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049ee:	4b3e      	ldr	r3, [pc, #248]	; (8004ae8 <HAL_RCC_ClockConfig+0x1f8>)
 80049f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f2:	2202      	movs	r2, #2
 80049f4:	4013      	ands	r3, r2
 80049f6:	d101      	bne.n	80049fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e06d      	b.n	8004ad8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049fc:	4b3a      	ldr	r3, [pc, #232]	; (8004ae8 <HAL_RCC_ClockConfig+0x1f8>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	2207      	movs	r2, #7
 8004a02:	4393      	bics	r3, r2
 8004a04:	0019      	movs	r1, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	4b37      	ldr	r3, [pc, #220]	; (8004ae8 <HAL_RCC_ClockConfig+0x1f8>)
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a10:	f7fe ff60 	bl	80038d4 <HAL_GetTick>
 8004a14:	0003      	movs	r3, r0
 8004a16:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a18:	e009      	b.n	8004a2e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a1a:	f7fe ff5b 	bl	80038d4 <HAL_GetTick>
 8004a1e:	0002      	movs	r2, r0
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	4a2f      	ldr	r2, [pc, #188]	; (8004ae4 <HAL_RCC_ClockConfig+0x1f4>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e054      	b.n	8004ad8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a2e:	4b2e      	ldr	r3, [pc, #184]	; (8004ae8 <HAL_RCC_ClockConfig+0x1f8>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	2238      	movs	r2, #56	; 0x38
 8004a34:	401a      	ands	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d1ec      	bne.n	8004a1a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a40:	4b27      	ldr	r3, [pc, #156]	; (8004ae0 <HAL_RCC_ClockConfig+0x1f0>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2207      	movs	r2, #7
 8004a46:	4013      	ands	r3, r2
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d21e      	bcs.n	8004a8c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a4e:	4b24      	ldr	r3, [pc, #144]	; (8004ae0 <HAL_RCC_ClockConfig+0x1f0>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2207      	movs	r2, #7
 8004a54:	4393      	bics	r3, r2
 8004a56:	0019      	movs	r1, r3
 8004a58:	4b21      	ldr	r3, [pc, #132]	; (8004ae0 <HAL_RCC_ClockConfig+0x1f0>)
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a60:	f7fe ff38 	bl	80038d4 <HAL_GetTick>
 8004a64:	0003      	movs	r3, r0
 8004a66:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004a68:	e009      	b.n	8004a7e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a6a:	f7fe ff33 	bl	80038d4 <HAL_GetTick>
 8004a6e:	0002      	movs	r2, r0
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	4a1b      	ldr	r2, [pc, #108]	; (8004ae4 <HAL_RCC_ClockConfig+0x1f4>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e02c      	b.n	8004ad8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004a7e:	4b18      	ldr	r3, [pc, #96]	; (8004ae0 <HAL_RCC_ClockConfig+0x1f0>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2207      	movs	r2, #7
 8004a84:	4013      	ands	r3, r2
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d1ee      	bne.n	8004a6a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2204      	movs	r2, #4
 8004a92:	4013      	ands	r3, r2
 8004a94:	d009      	beq.n	8004aaa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004a96:	4b14      	ldr	r3, [pc, #80]	; (8004ae8 <HAL_RCC_ClockConfig+0x1f8>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	4a15      	ldr	r2, [pc, #84]	; (8004af0 <HAL_RCC_ClockConfig+0x200>)
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	0019      	movs	r1, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68da      	ldr	r2, [r3, #12]
 8004aa4:	4b10      	ldr	r3, [pc, #64]	; (8004ae8 <HAL_RCC_ClockConfig+0x1f8>)
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004aaa:	f000 f829 	bl	8004b00 <HAL_RCC_GetSysClockFreq>
 8004aae:	0001      	movs	r1, r0
 8004ab0:	4b0d      	ldr	r3, [pc, #52]	; (8004ae8 <HAL_RCC_ClockConfig+0x1f8>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	0a1b      	lsrs	r3, r3, #8
 8004ab6:	220f      	movs	r2, #15
 8004ab8:	401a      	ands	r2, r3
 8004aba:	4b0e      	ldr	r3, [pc, #56]	; (8004af4 <HAL_RCC_ClockConfig+0x204>)
 8004abc:	0092      	lsls	r2, r2, #2
 8004abe:	58d3      	ldr	r3, [r2, r3]
 8004ac0:	221f      	movs	r2, #31
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	000a      	movs	r2, r1
 8004ac6:	40da      	lsrs	r2, r3
 8004ac8:	4b0b      	ldr	r3, [pc, #44]	; (8004af8 <HAL_RCC_ClockConfig+0x208>)
 8004aca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004acc:	4b0b      	ldr	r3, [pc, #44]	; (8004afc <HAL_RCC_ClockConfig+0x20c>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	f7fe fea3 	bl	800381c <HAL_InitTick>
 8004ad6:	0003      	movs	r3, r0
}
 8004ad8:	0018      	movs	r0, r3
 8004ada:	46bd      	mov	sp, r7
 8004adc:	b004      	add	sp, #16
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	40022000 	.word	0x40022000
 8004ae4:	00001388 	.word	0x00001388
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	fffff0ff 	.word	0xfffff0ff
 8004af0:	ffff8fff 	.word	0xffff8fff
 8004af4:	08012a98 	.word	0x08012a98
 8004af8:	2000002c 	.word	0x2000002c
 8004afc:	20000030 	.word	0x20000030

08004b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b06:	4b3c      	ldr	r3, [pc, #240]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	2238      	movs	r2, #56	; 0x38
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	d10f      	bne.n	8004b30 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004b10:	4b39      	ldr	r3, [pc, #228]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	0adb      	lsrs	r3, r3, #11
 8004b16:	2207      	movs	r2, #7
 8004b18:	4013      	ands	r3, r2
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	409a      	lsls	r2, r3
 8004b1e:	0013      	movs	r3, r2
 8004b20:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004b22:	6839      	ldr	r1, [r7, #0]
 8004b24:	4835      	ldr	r0, [pc, #212]	; (8004bfc <HAL_RCC_GetSysClockFreq+0xfc>)
 8004b26:	f7fb fb09 	bl	800013c <__udivsi3>
 8004b2a:	0003      	movs	r3, r0
 8004b2c:	613b      	str	r3, [r7, #16]
 8004b2e:	e05d      	b.n	8004bec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b30:	4b31      	ldr	r3, [pc, #196]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	2238      	movs	r2, #56	; 0x38
 8004b36:	4013      	ands	r3, r2
 8004b38:	2b08      	cmp	r3, #8
 8004b3a:	d102      	bne.n	8004b42 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b3c:	4b30      	ldr	r3, [pc, #192]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x100>)
 8004b3e:	613b      	str	r3, [r7, #16]
 8004b40:	e054      	b.n	8004bec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b42:	4b2d      	ldr	r3, [pc, #180]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	2238      	movs	r2, #56	; 0x38
 8004b48:	4013      	ands	r3, r2
 8004b4a:	2b10      	cmp	r3, #16
 8004b4c:	d138      	bne.n	8004bc0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004b4e:	4b2a      	ldr	r3, [pc, #168]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	2203      	movs	r2, #3
 8004b54:	4013      	ands	r3, r2
 8004b56:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b58:	4b27      	ldr	r3, [pc, #156]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	091b      	lsrs	r3, r3, #4
 8004b5e:	2207      	movs	r2, #7
 8004b60:	4013      	ands	r3, r2
 8004b62:	3301      	adds	r3, #1
 8004b64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2b03      	cmp	r3, #3
 8004b6a:	d10d      	bne.n	8004b88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b6c:	68b9      	ldr	r1, [r7, #8]
 8004b6e:	4824      	ldr	r0, [pc, #144]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x100>)
 8004b70:	f7fb fae4 	bl	800013c <__udivsi3>
 8004b74:	0003      	movs	r3, r0
 8004b76:	0019      	movs	r1, r3
 8004b78:	4b1f      	ldr	r3, [pc, #124]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	0a1b      	lsrs	r3, r3, #8
 8004b7e:	227f      	movs	r2, #127	; 0x7f
 8004b80:	4013      	ands	r3, r2
 8004b82:	434b      	muls	r3, r1
 8004b84:	617b      	str	r3, [r7, #20]
        break;
 8004b86:	e00d      	b.n	8004ba4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004b88:	68b9      	ldr	r1, [r7, #8]
 8004b8a:	481c      	ldr	r0, [pc, #112]	; (8004bfc <HAL_RCC_GetSysClockFreq+0xfc>)
 8004b8c:	f7fb fad6 	bl	800013c <__udivsi3>
 8004b90:	0003      	movs	r3, r0
 8004b92:	0019      	movs	r1, r3
 8004b94:	4b18      	ldr	r3, [pc, #96]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	0a1b      	lsrs	r3, r3, #8
 8004b9a:	227f      	movs	r2, #127	; 0x7f
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	434b      	muls	r3, r1
 8004ba0:	617b      	str	r3, [r7, #20]
        break;
 8004ba2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004ba4:	4b14      	ldr	r3, [pc, #80]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	0f5b      	lsrs	r3, r3, #29
 8004baa:	2207      	movs	r2, #7
 8004bac:	4013      	ands	r3, r2
 8004bae:	3301      	adds	r3, #1
 8004bb0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004bb2:	6879      	ldr	r1, [r7, #4]
 8004bb4:	6978      	ldr	r0, [r7, #20]
 8004bb6:	f7fb fac1 	bl	800013c <__udivsi3>
 8004bba:	0003      	movs	r3, r0
 8004bbc:	613b      	str	r3, [r7, #16]
 8004bbe:	e015      	b.n	8004bec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004bc0:	4b0d      	ldr	r3, [pc, #52]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	2238      	movs	r2, #56	; 0x38
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	2b20      	cmp	r3, #32
 8004bca:	d103      	bne.n	8004bd4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004bcc:	2380      	movs	r3, #128	; 0x80
 8004bce:	021b      	lsls	r3, r3, #8
 8004bd0:	613b      	str	r3, [r7, #16]
 8004bd2:	e00b      	b.n	8004bec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004bd4:	4b08      	ldr	r3, [pc, #32]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	2238      	movs	r2, #56	; 0x38
 8004bda:	4013      	ands	r3, r2
 8004bdc:	2b18      	cmp	r3, #24
 8004bde:	d103      	bne.n	8004be8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004be0:	23fa      	movs	r3, #250	; 0xfa
 8004be2:	01db      	lsls	r3, r3, #7
 8004be4:	613b      	str	r3, [r7, #16]
 8004be6:	e001      	b.n	8004bec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004bec:	693b      	ldr	r3, [r7, #16]
}
 8004bee:	0018      	movs	r0, r3
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	b006      	add	sp, #24
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	46c0      	nop			; (mov r8, r8)
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	00f42400 	.word	0x00f42400
 8004c00:	007a1200 	.word	0x007a1200

08004c04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c08:	4b02      	ldr	r3, [pc, #8]	; (8004c14 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
}
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	46c0      	nop			; (mov r8, r8)
 8004c14:	2000002c 	.word	0x2000002c

08004c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c18:	b5b0      	push	{r4, r5, r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004c1c:	f7ff fff2 	bl	8004c04 <HAL_RCC_GetHCLKFreq>
 8004c20:	0004      	movs	r4, r0
 8004c22:	f7ff fb3f 	bl	80042a4 <LL_RCC_GetAPB1Prescaler>
 8004c26:	0003      	movs	r3, r0
 8004c28:	0b1a      	lsrs	r2, r3, #12
 8004c2a:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c2c:	0092      	lsls	r2, r2, #2
 8004c2e:	58d3      	ldr	r3, [r2, r3]
 8004c30:	221f      	movs	r2, #31
 8004c32:	4013      	ands	r3, r2
 8004c34:	40dc      	lsrs	r4, r3
 8004c36:	0023      	movs	r3, r4
}
 8004c38:	0018      	movs	r0, r3
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bdb0      	pop	{r4, r5, r7, pc}
 8004c3e:	46c0      	nop			; (mov r8, r8)
 8004c40:	08012ad8 	.word	0x08012ad8

08004c44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004c4c:	2313      	movs	r3, #19
 8004c4e:	18fb      	adds	r3, r7, r3
 8004c50:	2200      	movs	r2, #0
 8004c52:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c54:	2312      	movs	r3, #18
 8004c56:	18fb      	adds	r3, r7, r3
 8004c58:	2200      	movs	r2, #0
 8004c5a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	2380      	movs	r3, #128	; 0x80
 8004c62:	029b      	lsls	r3, r3, #10
 8004c64:	4013      	ands	r3, r2
 8004c66:	d100      	bne.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004c68:	e0a3      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c6a:	2011      	movs	r0, #17
 8004c6c:	183b      	adds	r3, r7, r0
 8004c6e:	2200      	movs	r2, #0
 8004c70:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c72:	4bc3      	ldr	r3, [pc, #780]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c76:	2380      	movs	r3, #128	; 0x80
 8004c78:	055b      	lsls	r3, r3, #21
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	d110      	bne.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c7e:	4bc0      	ldr	r3, [pc, #768]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c82:	4bbf      	ldr	r3, [pc, #764]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c84:	2180      	movs	r1, #128	; 0x80
 8004c86:	0549      	lsls	r1, r1, #21
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004c8c:	4bbc      	ldr	r3, [pc, #752]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c90:	2380      	movs	r3, #128	; 0x80
 8004c92:	055b      	lsls	r3, r3, #21
 8004c94:	4013      	ands	r3, r2
 8004c96:	60bb      	str	r3, [r7, #8]
 8004c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c9a:	183b      	adds	r3, r7, r0
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ca0:	4bb8      	ldr	r3, [pc, #736]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	4bb7      	ldr	r3, [pc, #732]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004ca6:	2180      	movs	r1, #128	; 0x80
 8004ca8:	0049      	lsls	r1, r1, #1
 8004caa:	430a      	orrs	r2, r1
 8004cac:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cae:	f7fe fe11 	bl	80038d4 <HAL_GetTick>
 8004cb2:	0003      	movs	r3, r0
 8004cb4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cb6:	e00b      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cb8:	f7fe fe0c 	bl	80038d4 <HAL_GetTick>
 8004cbc:	0002      	movs	r2, r0
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d904      	bls.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004cc6:	2313      	movs	r3, #19
 8004cc8:	18fb      	adds	r3, r7, r3
 8004cca:	2203      	movs	r2, #3
 8004ccc:	701a      	strb	r2, [r3, #0]
        break;
 8004cce:	e005      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cd0:	4bac      	ldr	r3, [pc, #688]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	2380      	movs	r3, #128	; 0x80
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	4013      	ands	r3, r2
 8004cda:	d0ed      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004cdc:	2313      	movs	r3, #19
 8004cde:	18fb      	adds	r3, r7, r3
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d154      	bne.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ce6:	4ba6      	ldr	r3, [pc, #664]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ce8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cea:	23c0      	movs	r3, #192	; 0xc0
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4013      	ands	r3, r2
 8004cf0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d019      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d014      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d02:	4b9f      	ldr	r3, [pc, #636]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d06:	4aa0      	ldr	r2, [pc, #640]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004d08:	4013      	ands	r3, r2
 8004d0a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d0c:	4b9c      	ldr	r3, [pc, #624]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d10:	4b9b      	ldr	r3, [pc, #620]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d12:	2180      	movs	r1, #128	; 0x80
 8004d14:	0249      	lsls	r1, r1, #9
 8004d16:	430a      	orrs	r2, r1
 8004d18:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d1a:	4b99      	ldr	r3, [pc, #612]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d1e:	4b98      	ldr	r3, [pc, #608]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d20:	499a      	ldr	r1, [pc, #616]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004d22:	400a      	ands	r2, r1
 8004d24:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d26:	4b96      	ldr	r3, [pc, #600]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	4013      	ands	r3, r2
 8004d32:	d016      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d34:	f7fe fdce 	bl	80038d4 <HAL_GetTick>
 8004d38:	0003      	movs	r3, r0
 8004d3a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d3c:	e00c      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d3e:	f7fe fdc9 	bl	80038d4 <HAL_GetTick>
 8004d42:	0002      	movs	r2, r0
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	4a91      	ldr	r2, [pc, #580]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d904      	bls.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004d4e:	2313      	movs	r3, #19
 8004d50:	18fb      	adds	r3, r7, r3
 8004d52:	2203      	movs	r2, #3
 8004d54:	701a      	strb	r2, [r3, #0]
            break;
 8004d56:	e004      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d58:	4b89      	ldr	r3, [pc, #548]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d5c:	2202      	movs	r2, #2
 8004d5e:	4013      	ands	r3, r2
 8004d60:	d0ed      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004d62:	2313      	movs	r3, #19
 8004d64:	18fb      	adds	r3, r7, r3
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d10a      	bne.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d6c:	4b84      	ldr	r3, [pc, #528]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d70:	4a85      	ldr	r2, [pc, #532]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004d72:	4013      	ands	r3, r2
 8004d74:	0019      	movs	r1, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d7a:	4b81      	ldr	r3, [pc, #516]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d80:	e00c      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d82:	2312      	movs	r3, #18
 8004d84:	18fb      	adds	r3, r7, r3
 8004d86:	2213      	movs	r2, #19
 8004d88:	18ba      	adds	r2, r7, r2
 8004d8a:	7812      	ldrb	r2, [r2, #0]
 8004d8c:	701a      	strb	r2, [r3, #0]
 8004d8e:	e005      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d90:	2312      	movs	r3, #18
 8004d92:	18fb      	adds	r3, r7, r3
 8004d94:	2213      	movs	r2, #19
 8004d96:	18ba      	adds	r2, r7, r2
 8004d98:	7812      	ldrb	r2, [r2, #0]
 8004d9a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d9c:	2311      	movs	r3, #17
 8004d9e:	18fb      	adds	r3, r7, r3
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d105      	bne.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004da6:	4b76      	ldr	r3, [pc, #472]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004da8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004daa:	4b75      	ldr	r3, [pc, #468]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004dac:	4979      	ldr	r1, [pc, #484]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004dae:	400a      	ands	r2, r1
 8004db0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2201      	movs	r2, #1
 8004db8:	4013      	ands	r3, r2
 8004dba:	d009      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dbc:	4b70      	ldr	r3, [pc, #448]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc0:	2203      	movs	r2, #3
 8004dc2:	4393      	bics	r3, r2
 8004dc4:	0019      	movs	r1, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	4b6d      	ldr	r3, [pc, #436]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	d009      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004dda:	4b69      	ldr	r3, [pc, #420]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dde:	220c      	movs	r2, #12
 8004de0:	4393      	bics	r3, r2
 8004de2:	0019      	movs	r1, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	4b65      	ldr	r3, [pc, #404]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004dea:	430a      	orrs	r2, r1
 8004dec:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2210      	movs	r2, #16
 8004df4:	4013      	ands	r3, r2
 8004df6:	d009      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004df8:	4b61      	ldr	r3, [pc, #388]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfc:	4a66      	ldr	r2, [pc, #408]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004dfe:	4013      	ands	r3, r2
 8004e00:	0019      	movs	r1, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68da      	ldr	r2, [r3, #12]
 8004e06:	4b5e      	ldr	r3, [pc, #376]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	2380      	movs	r3, #128	; 0x80
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4013      	ands	r3, r2
 8004e16:	d009      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e18:	4b59      	ldr	r3, [pc, #356]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1c:	4a5f      	ldr	r2, [pc, #380]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e1e:	4013      	ands	r3, r2
 8004e20:	0019      	movs	r1, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	699a      	ldr	r2, [r3, #24]
 8004e26:	4b56      	ldr	r3, [pc, #344]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	2380      	movs	r3, #128	; 0x80
 8004e32:	00db      	lsls	r3, r3, #3
 8004e34:	4013      	ands	r3, r2
 8004e36:	d009      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e38:	4b51      	ldr	r3, [pc, #324]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e3c:	4a58      	ldr	r2, [pc, #352]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e3e:	4013      	ands	r3, r2
 8004e40:	0019      	movs	r1, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	69da      	ldr	r2, [r3, #28]
 8004e46:	4b4e      	ldr	r3, [pc, #312]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2220      	movs	r2, #32
 8004e52:	4013      	ands	r3, r2
 8004e54:	d009      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e56:	4b4a      	ldr	r3, [pc, #296]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5a:	4a52      	ldr	r2, [pc, #328]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	0019      	movs	r1, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	691a      	ldr	r2, [r3, #16]
 8004e64:	4b46      	ldr	r3, [pc, #280]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e66:	430a      	orrs	r2, r1
 8004e68:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	2380      	movs	r3, #128	; 0x80
 8004e70:	01db      	lsls	r3, r3, #7
 8004e72:	4013      	ands	r3, r2
 8004e74:	d015      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e76:	4b42      	ldr	r3, [pc, #264]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	0899      	lsrs	r1, r3, #2
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1a      	ldr	r2, [r3, #32]
 8004e82:	4b3f      	ldr	r3, [pc, #252]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e84:	430a      	orrs	r2, r1
 8004e86:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a1a      	ldr	r2, [r3, #32]
 8004e8c:	2380      	movs	r3, #128	; 0x80
 8004e8e:	05db      	lsls	r3, r3, #23
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d106      	bne.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004e94:	4b3a      	ldr	r3, [pc, #232]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e96:	68da      	ldr	r2, [r3, #12]
 8004e98:	4b39      	ldr	r3, [pc, #228]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004e9a:	2180      	movs	r1, #128	; 0x80
 8004e9c:	0249      	lsls	r1, r1, #9
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	2380      	movs	r3, #128	; 0x80
 8004ea8:	031b      	lsls	r3, r3, #12
 8004eaa:	4013      	ands	r3, r2
 8004eac:	d009      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004eae:	4b34      	ldr	r3, [pc, #208]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb2:	2240      	movs	r2, #64	; 0x40
 8004eb4:	4393      	bics	r3, r2
 8004eb6:	0019      	movs	r1, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ebc:	4b30      	ldr	r3, [pc, #192]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	2380      	movs	r3, #128	; 0x80
 8004ec8:	039b      	lsls	r3, r3, #14
 8004eca:	4013      	ands	r3, r2
 8004ecc:	d016      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004ece:	4b2c      	ldr	r3, [pc, #176]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed2:	4a35      	ldr	r2, [pc, #212]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	0019      	movs	r1, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004edc:	4b28      	ldr	r3, [pc, #160]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ee6:	2380      	movs	r3, #128	; 0x80
 8004ee8:	03db      	lsls	r3, r3, #15
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d106      	bne.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004eee:	4b24      	ldr	r3, [pc, #144]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ef0:	68da      	ldr	r2, [r3, #12]
 8004ef2:	4b23      	ldr	r3, [pc, #140]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ef4:	2180      	movs	r1, #128	; 0x80
 8004ef6:	0449      	lsls	r1, r1, #17
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	2380      	movs	r3, #128	; 0x80
 8004f02:	03db      	lsls	r3, r3, #15
 8004f04:	4013      	ands	r3, r2
 8004f06:	d016      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004f08:	4b1d      	ldr	r3, [pc, #116]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f0c:	4a27      	ldr	r2, [pc, #156]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004f0e:	4013      	ands	r3, r2
 8004f10:	0019      	movs	r1, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f16:	4b1a      	ldr	r3, [pc, #104]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f20:	2380      	movs	r3, #128	; 0x80
 8004f22:	045b      	lsls	r3, r3, #17
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d106      	bne.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004f28:	4b15      	ldr	r3, [pc, #84]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f2a:	68da      	ldr	r2, [r3, #12]
 8004f2c:	4b14      	ldr	r3, [pc, #80]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f2e:	2180      	movs	r1, #128	; 0x80
 8004f30:	0449      	lsls	r1, r1, #17
 8004f32:	430a      	orrs	r2, r1
 8004f34:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	2380      	movs	r3, #128	; 0x80
 8004f3c:	011b      	lsls	r3, r3, #4
 8004f3e:	4013      	ands	r3, r2
 8004f40:	d016      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004f42:	4b0f      	ldr	r3, [pc, #60]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f46:	4a1a      	ldr	r2, [pc, #104]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004f48:	4013      	ands	r3, r2
 8004f4a:	0019      	movs	r1, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	695a      	ldr	r2, [r3, #20]
 8004f50:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f52:	430a      	orrs	r2, r1
 8004f54:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	695a      	ldr	r2, [r3, #20]
 8004f5a:	2380      	movs	r3, #128	; 0x80
 8004f5c:	01db      	lsls	r3, r3, #7
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d106      	bne.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004f62:	4b07      	ldr	r3, [pc, #28]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f64:	68da      	ldr	r2, [r3, #12]
 8004f66:	4b06      	ldr	r3, [pc, #24]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f68:	2180      	movs	r1, #128	; 0x80
 8004f6a:	0249      	lsls	r1, r1, #9
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004f70:	2312      	movs	r3, #18
 8004f72:	18fb      	adds	r3, r7, r3
 8004f74:	781b      	ldrb	r3, [r3, #0]
}
 8004f76:	0018      	movs	r0, r3
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	b006      	add	sp, #24
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	46c0      	nop			; (mov r8, r8)
 8004f80:	40021000 	.word	0x40021000
 8004f84:	40007000 	.word	0x40007000
 8004f88:	fffffcff 	.word	0xfffffcff
 8004f8c:	fffeffff 	.word	0xfffeffff
 8004f90:	00001388 	.word	0x00001388
 8004f94:	efffffff 	.word	0xefffffff
 8004f98:	fffff3ff 	.word	0xfffff3ff
 8004f9c:	fff3ffff 	.word	0xfff3ffff
 8004fa0:	ffcfffff 	.word	0xffcfffff
 8004fa4:	ffffcfff 	.word	0xffffcfff
 8004fa8:	ffbfffff 	.word	0xffbfffff
 8004fac:	feffffff 	.word	0xfeffffff
 8004fb0:	ffff3fff 	.word	0xffff3fff

08004fb4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004fb4:	b5b0      	push	{r4, r5, r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004fbc:	230f      	movs	r3, #15
 8004fbe:	18fb      	adds	r3, r7, r3
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d100      	bne.n	8004fcc <HAL_RTC_Init+0x18>
 8004fca:	e08c      	b.n	80050e6 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2229      	movs	r2, #41	; 0x29
 8004fd0:	5c9b      	ldrb	r3, [r3, r2]
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10b      	bne.n	8004ff0 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2228      	movs	r2, #40	; 0x28
 8004fdc:	2100      	movs	r1, #0
 8004fde:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2288      	movs	r2, #136	; 0x88
 8004fe4:	0212      	lsls	r2, r2, #8
 8004fe6:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	0018      	movs	r0, r3
 8004fec:	f7fe f94c 	bl	8003288 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2229      	movs	r2, #41	; 0x29
 8004ff4:	2102      	movs	r1, #2
 8004ff6:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	2210      	movs	r2, #16
 8005000:	4013      	ands	r3, r2
 8005002:	2b10      	cmp	r3, #16
 8005004:	d062      	beq.n	80050cc <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	22ca      	movs	r2, #202	; 0xca
 800500c:	625a      	str	r2, [r3, #36]	; 0x24
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2253      	movs	r2, #83	; 0x53
 8005014:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005016:	250f      	movs	r5, #15
 8005018:	197c      	adds	r4, r7, r5
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	0018      	movs	r0, r3
 800501e:	f000 fb9c 	bl	800575a <RTC_EnterInitMode>
 8005022:	0003      	movs	r3, r0
 8005024:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8005026:	0028      	movs	r0, r5
 8005028:	183b      	adds	r3, r7, r0
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d12c      	bne.n	800508a <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	699a      	ldr	r2, [r3, #24]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	492e      	ldr	r1, [pc, #184]	; (80050f4 <HAL_RTC_Init+0x140>)
 800503c:	400a      	ands	r2, r1
 800503e:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6999      	ldr	r1, [r3, #24]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689a      	ldr	r2, [r3, #8]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	431a      	orrs	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	430a      	orrs	r2, r1
 800505c:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	6912      	ldr	r2, [r2, #16]
 8005066:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6919      	ldr	r1, [r3, #16]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	041a      	lsls	r2, r3, #16
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800507c:	183c      	adds	r4, r7, r0
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	0018      	movs	r0, r3
 8005082:	f000 fbad 	bl	80057e0 <RTC_ExitInitMode>
 8005086:	0003      	movs	r3, r0
 8005088:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800508a:	230f      	movs	r3, #15
 800508c:	18fb      	adds	r3, r7, r3
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d116      	bne.n	80050c2 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699a      	ldr	r2, [r3, #24]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	00d2      	lsls	r2, r2, #3
 80050a0:	08d2      	lsrs	r2, r2, #3
 80050a2:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6999      	ldr	r1, [r3, #24]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	431a      	orrs	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	431a      	orrs	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	430a      	orrs	r2, r1
 80050c0:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	22ff      	movs	r2, #255	; 0xff
 80050c8:	625a      	str	r2, [r3, #36]	; 0x24
 80050ca:	e003      	b.n	80050d4 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80050cc:	230f      	movs	r3, #15
 80050ce:	18fb      	adds	r3, r7, r3
 80050d0:	2200      	movs	r2, #0
 80050d2:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80050d4:	230f      	movs	r3, #15
 80050d6:	18fb      	adds	r3, r7, r3
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d103      	bne.n	80050e6 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2229      	movs	r2, #41	; 0x29
 80050e2:	2101      	movs	r1, #1
 80050e4:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80050e6:	230f      	movs	r3, #15
 80050e8:	18fb      	adds	r3, r7, r3
 80050ea:	781b      	ldrb	r3, [r3, #0]
}
 80050ec:	0018      	movs	r0, r3
 80050ee:	46bd      	mov	sp, r7
 80050f0:	b004      	add	sp, #16
 80050f2:	bdb0      	pop	{r4, r5, r7, pc}
 80050f4:	fb8fffbf 	.word	0xfb8fffbf

080050f8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80050f8:	b5b0      	push	{r4, r5, r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2228      	movs	r2, #40	; 0x28
 8005108:	5c9b      	ldrb	r3, [r3, r2]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d101      	bne.n	8005112 <HAL_RTC_SetTime+0x1a>
 800510e:	2302      	movs	r3, #2
 8005110:	e092      	b.n	8005238 <HAL_RTC_SetTime+0x140>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2228      	movs	r2, #40	; 0x28
 8005116:	2101      	movs	r1, #1
 8005118:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2229      	movs	r2, #41	; 0x29
 800511e:	2102      	movs	r1, #2
 8005120:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	22ca      	movs	r2, #202	; 0xca
 8005128:	625a      	str	r2, [r3, #36]	; 0x24
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2253      	movs	r2, #83	; 0x53
 8005130:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005132:	2513      	movs	r5, #19
 8005134:	197c      	adds	r4, r7, r5
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	0018      	movs	r0, r3
 800513a:	f000 fb0e 	bl	800575a <RTC_EnterInitMode>
 800513e:	0003      	movs	r3, r0
 8005140:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005142:	197b      	adds	r3, r7, r5
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d162      	bne.n	8005210 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d125      	bne.n	800519c <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	2240      	movs	r2, #64	; 0x40
 8005158:	4013      	ands	r3, r2
 800515a:	d102      	bne.n	8005162 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	2200      	movs	r2, #0
 8005160:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	0018      	movs	r0, r3
 8005168:	f000 fb7e 	bl	8005868 <RTC_ByteToBcd2>
 800516c:	0003      	movs	r3, r0
 800516e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	785b      	ldrb	r3, [r3, #1]
 8005174:	0018      	movs	r0, r3
 8005176:	f000 fb77 	bl	8005868 <RTC_ByteToBcd2>
 800517a:	0003      	movs	r3, r0
 800517c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800517e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	789b      	ldrb	r3, [r3, #2]
 8005184:	0018      	movs	r0, r3
 8005186:	f000 fb6f 	bl	8005868 <RTC_ByteToBcd2>
 800518a:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800518c:	0022      	movs	r2, r4
 800518e:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	78db      	ldrb	r3, [r3, #3]
 8005194:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005196:	4313      	orrs	r3, r2
 8005198:	617b      	str	r3, [r7, #20]
 800519a:	e017      	b.n	80051cc <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	2240      	movs	r2, #64	; 0x40
 80051a4:	4013      	ands	r3, r2
 80051a6:	d102      	bne.n	80051ae <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2200      	movs	r2, #0
 80051ac:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	785b      	ldrb	r3, [r3, #1]
 80051b8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80051ba:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80051c0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	78db      	ldrb	r3, [r3, #3]
 80051c6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80051c8:	4313      	orrs	r3, r2
 80051ca:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	491b      	ldr	r1, [pc, #108]	; (8005240 <HAL_RTC_SetTime+0x148>)
 80051d4:	400a      	ands	r2, r1
 80051d6:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699a      	ldr	r2, [r3, #24]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4918      	ldr	r1, [pc, #96]	; (8005244 <HAL_RTC_SetTime+0x14c>)
 80051e4:	400a      	ands	r2, r1
 80051e6:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6999      	ldr	r1, [r3, #24]
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	68da      	ldr	r2, [r3, #12]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	431a      	orrs	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005200:	2313      	movs	r3, #19
 8005202:	18fc      	adds	r4, r7, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	0018      	movs	r0, r3
 8005208:	f000 faea 	bl	80057e0 <RTC_ExitInitMode>
 800520c:	0003      	movs	r3, r0
 800520e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	22ff      	movs	r2, #255	; 0xff
 8005216:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8005218:	2313      	movs	r3, #19
 800521a:	18fb      	adds	r3, r7, r3
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d103      	bne.n	800522a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2229      	movs	r2, #41	; 0x29
 8005226:	2101      	movs	r1, #1
 8005228:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2228      	movs	r2, #40	; 0x28
 800522e:	2100      	movs	r1, #0
 8005230:	5499      	strb	r1, [r3, r2]

  return status;
 8005232:	2313      	movs	r3, #19
 8005234:	18fb      	adds	r3, r7, r3
 8005236:	781b      	ldrb	r3, [r3, #0]
}
 8005238:	0018      	movs	r0, r3
 800523a:	46bd      	mov	sp, r7
 800523c:	b006      	add	sp, #24
 800523e:	bdb0      	pop	{r4, r5, r7, pc}
 8005240:	007f7f7f 	.word	0x007f7f7f
 8005244:	fffbffff 	.word	0xfffbffff

08005248 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689a      	ldr	r2, [r3, #8]
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	045b      	lsls	r3, r3, #17
 8005266:	0c5a      	lsrs	r2, r3, #17
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a22      	ldr	r2, [pc, #136]	; (80052fc <HAL_RTC_GetTime+0xb4>)
 8005274:	4013      	ands	r3, r2
 8005276:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	0c1b      	lsrs	r3, r3, #16
 800527c:	b2db      	uxtb	r3, r3
 800527e:	223f      	movs	r2, #63	; 0x3f
 8005280:	4013      	ands	r3, r2
 8005282:	b2da      	uxtb	r2, r3
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	0a1b      	lsrs	r3, r3, #8
 800528c:	b2db      	uxtb	r3, r3
 800528e:	227f      	movs	r2, #127	; 0x7f
 8005290:	4013      	ands	r3, r2
 8005292:	b2da      	uxtb	r2, r3
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	b2db      	uxtb	r3, r3
 800529c:	227f      	movs	r2, #127	; 0x7f
 800529e:	4013      	ands	r3, r2
 80052a0:	b2da      	uxtb	r2, r3
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	0d9b      	lsrs	r3, r3, #22
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2201      	movs	r2, #1
 80052ae:	4013      	ands	r3, r2
 80052b0:	b2da      	uxtb	r2, r3
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d11a      	bne.n	80052f2 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	0018      	movs	r0, r3
 80052c2:	f000 faf9 	bl	80058b8 <RTC_Bcd2ToByte>
 80052c6:	0003      	movs	r3, r0
 80052c8:	001a      	movs	r2, r3
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	785b      	ldrb	r3, [r3, #1]
 80052d2:	0018      	movs	r0, r3
 80052d4:	f000 faf0 	bl	80058b8 <RTC_Bcd2ToByte>
 80052d8:	0003      	movs	r3, r0
 80052da:	001a      	movs	r2, r3
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	789b      	ldrb	r3, [r3, #2]
 80052e4:	0018      	movs	r0, r3
 80052e6:	f000 fae7 	bl	80058b8 <RTC_Bcd2ToByte>
 80052ea:	0003      	movs	r3, r0
 80052ec:	001a      	movs	r2, r3
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	0018      	movs	r0, r3
 80052f6:	46bd      	mov	sp, r7
 80052f8:	b006      	add	sp, #24
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	007f7f7f 	.word	0x007f7f7f

08005300 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005300:	b5b0      	push	{r4, r5, r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2228      	movs	r2, #40	; 0x28
 8005310:	5c9b      	ldrb	r3, [r3, r2]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d101      	bne.n	800531a <HAL_RTC_SetDate+0x1a>
 8005316:	2302      	movs	r3, #2
 8005318:	e07e      	b.n	8005418 <HAL_RTC_SetDate+0x118>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2228      	movs	r2, #40	; 0x28
 800531e:	2101      	movs	r1, #1
 8005320:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2229      	movs	r2, #41	; 0x29
 8005326:	2102      	movs	r1, #2
 8005328:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10e      	bne.n	800534e <HAL_RTC_SetDate+0x4e>
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	785b      	ldrb	r3, [r3, #1]
 8005334:	001a      	movs	r2, r3
 8005336:	2310      	movs	r3, #16
 8005338:	4013      	ands	r3, r2
 800533a:	d008      	beq.n	800534e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	785b      	ldrb	r3, [r3, #1]
 8005340:	2210      	movs	r2, #16
 8005342:	4393      	bics	r3, r2
 8005344:	b2db      	uxtb	r3, r3
 8005346:	330a      	adds	r3, #10
 8005348:	b2da      	uxtb	r2, r3
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d11c      	bne.n	800538e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	78db      	ldrb	r3, [r3, #3]
 8005358:	0018      	movs	r0, r3
 800535a:	f000 fa85 	bl	8005868 <RTC_ByteToBcd2>
 800535e:	0003      	movs	r3, r0
 8005360:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	785b      	ldrb	r3, [r3, #1]
 8005366:	0018      	movs	r0, r3
 8005368:	f000 fa7e 	bl	8005868 <RTC_ByteToBcd2>
 800536c:	0003      	movs	r3, r0
 800536e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005370:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	789b      	ldrb	r3, [r3, #2]
 8005376:	0018      	movs	r0, r3
 8005378:	f000 fa76 	bl	8005868 <RTC_ByteToBcd2>
 800537c:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800537e:	0022      	movs	r2, r4
 8005380:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005388:	4313      	orrs	r3, r2
 800538a:	617b      	str	r3, [r7, #20]
 800538c:	e00e      	b.n	80053ac <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	78db      	ldrb	r3, [r3, #3]
 8005392:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	785b      	ldrb	r3, [r3, #1]
 8005398:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800539a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80053a0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80053a8:	4313      	orrs	r3, r2
 80053aa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	22ca      	movs	r2, #202	; 0xca
 80053b2:	625a      	str	r2, [r3, #36]	; 0x24
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2253      	movs	r2, #83	; 0x53
 80053ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80053bc:	2513      	movs	r5, #19
 80053be:	197c      	adds	r4, r7, r5
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	0018      	movs	r0, r3
 80053c4:	f000 f9c9 	bl	800575a <RTC_EnterInitMode>
 80053c8:	0003      	movs	r3, r0
 80053ca:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80053cc:	0028      	movs	r0, r5
 80053ce:	183b      	adds	r3, r7, r0
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10c      	bne.n	80053f0 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	4910      	ldr	r1, [pc, #64]	; (8005420 <HAL_RTC_SetDate+0x120>)
 80053de:	400a      	ands	r2, r1
 80053e0:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80053e2:	183c      	adds	r4, r7, r0
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	0018      	movs	r0, r3
 80053e8:	f000 f9fa 	bl	80057e0 <RTC_ExitInitMode>
 80053ec:	0003      	movs	r3, r0
 80053ee:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	22ff      	movs	r2, #255	; 0xff
 80053f6:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80053f8:	2313      	movs	r3, #19
 80053fa:	18fb      	adds	r3, r7, r3
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d103      	bne.n	800540a <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2229      	movs	r2, #41	; 0x29
 8005406:	2101      	movs	r1, #1
 8005408:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2228      	movs	r2, #40	; 0x28
 800540e:	2100      	movs	r1, #0
 8005410:	5499      	strb	r1, [r3, r2]

  return status;
 8005412:	2313      	movs	r3, #19
 8005414:	18fb      	adds	r3, r7, r3
 8005416:	781b      	ldrb	r3, [r3, #0]
}
 8005418:	0018      	movs	r0, r3
 800541a:	46bd      	mov	sp, r7
 800541c:	b006      	add	sp, #24
 800541e:	bdb0      	pop	{r4, r5, r7, pc}
 8005420:	00ffff3f 	.word	0x00ffff3f

08005424 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	4a21      	ldr	r2, [pc, #132]	; (80054bc <HAL_RTC_GetDate+0x98>)
 8005438:	4013      	ands	r3, r2
 800543a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	0c1b      	lsrs	r3, r3, #16
 8005440:	b2da      	uxtb	r2, r3
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	0a1b      	lsrs	r3, r3, #8
 800544a:	b2db      	uxtb	r3, r3
 800544c:	221f      	movs	r2, #31
 800544e:	4013      	ands	r3, r2
 8005450:	b2da      	uxtb	r2, r3
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	b2db      	uxtb	r3, r3
 800545a:	223f      	movs	r2, #63	; 0x3f
 800545c:	4013      	ands	r3, r2
 800545e:	b2da      	uxtb	r2, r3
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	0b5b      	lsrs	r3, r3, #13
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2207      	movs	r2, #7
 800546c:	4013      	ands	r3, r2
 800546e:	b2da      	uxtb	r2, r3
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d11a      	bne.n	80054b0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	78db      	ldrb	r3, [r3, #3]
 800547e:	0018      	movs	r0, r3
 8005480:	f000 fa1a 	bl	80058b8 <RTC_Bcd2ToByte>
 8005484:	0003      	movs	r3, r0
 8005486:	001a      	movs	r2, r3
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	785b      	ldrb	r3, [r3, #1]
 8005490:	0018      	movs	r0, r3
 8005492:	f000 fa11 	bl	80058b8 <RTC_Bcd2ToByte>
 8005496:	0003      	movs	r3, r0
 8005498:	001a      	movs	r2, r3
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	789b      	ldrb	r3, [r3, #2]
 80054a2:	0018      	movs	r0, r3
 80054a4:	f000 fa08 	bl	80058b8 <RTC_Bcd2ToByte>
 80054a8:	0003      	movs	r3, r0
 80054aa:	001a      	movs	r2, r3
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	0018      	movs	r0, r3
 80054b4:	46bd      	mov	sp, r7
 80054b6:	b006      	add	sp, #24
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	46c0      	nop			; (mov r8, r8)
 80054bc:	00ffff3f 	.word	0x00ffff3f

080054c0 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80054c0:	b590      	push	{r4, r7, lr}
 80054c2:	b089      	sub	sp, #36	; 0x24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2228      	movs	r2, #40	; 0x28
 80054d0:	5c9b      	ldrb	r3, [r3, r2]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d101      	bne.n	80054da <HAL_RTC_SetAlarm+0x1a>
 80054d6:	2302      	movs	r3, #2
 80054d8:	e10c      	b.n	80056f4 <HAL_RTC_SetAlarm+0x234>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2228      	movs	r2, #40	; 0x28
 80054de:	2101      	movs	r1, #1
 80054e0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2229      	movs	r2, #41	; 0x29
 80054e6:	2102      	movs	r1, #2
 80054e8:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d136      	bne.n	800555e <HAL_RTC_SetAlarm+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	2240      	movs	r2, #64	; 0x40
 80054f8:	4013      	ands	r3, r2
 80054fa:	d102      	bne.n	8005502 <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2200      	movs	r2, #0
 8005500:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	0018      	movs	r0, r3
 8005508:	f000 f9ae 	bl	8005868 <RTC_ByteToBcd2>
 800550c:	0003      	movs	r3, r0
 800550e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	785b      	ldrb	r3, [r3, #1]
 8005514:	0018      	movs	r0, r3
 8005516:	f000 f9a7 	bl	8005868 <RTC_ByteToBcd2>
 800551a:	0003      	movs	r3, r0
 800551c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800551e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	789b      	ldrb	r3, [r3, #2]
 8005524:	0018      	movs	r0, r3
 8005526:	f000 f99f 	bl	8005868 <RTC_ByteToBcd2>
 800552a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800552c:	0022      	movs	r2, r4
 800552e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	78db      	ldrb	r3, [r3, #3]
 8005534:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005536:	431a      	orrs	r2, r3
 8005538:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	2220      	movs	r2, #32
 800553e:	5c9b      	ldrb	r3, [r3, r2]
 8005540:	0018      	movs	r0, r3
 8005542:	f000 f991 	bl	8005868 <RTC_ByteToBcd2>
 8005546:	0003      	movs	r3, r0
 8005548:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800554a:	0022      	movs	r2, r4
 800554c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005552:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005558:	4313      	orrs	r3, r2
 800555a:	61fb      	str	r3, [r7, #28]
 800555c:	e022      	b.n	80055a4 <HAL_RTC_SetAlarm+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	2240      	movs	r2, #64	; 0x40
 8005566:	4013      	ands	r3, r2
 8005568:	d102      	bne.n	8005570 <HAL_RTC_SetAlarm+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	2200      	movs	r2, #0
 800556e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	785b      	ldrb	r3, [r3, #1]
 800557a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800557c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005582:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	78db      	ldrb	r3, [r3, #3]
 8005588:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800558a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	2120      	movs	r1, #32
 8005590:	5c5b      	ldrb	r3, [r3, r1]
 8005592:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005594:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800559a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80055a0:	4313      	orrs	r3, r2
 80055a2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	22ca      	movs	r2, #202	; 0xca
 80055b6:	625a      	str	r2, [r3, #36]	; 0x24
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2253      	movs	r2, #83	; 0x53
 80055be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055c4:	2380      	movs	r3, #128	; 0x80
 80055c6:	005b      	lsls	r3, r3, #1
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d143      	bne.n	8005654 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	699a      	ldr	r2, [r3, #24]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4949      	ldr	r1, [pc, #292]	; (80056fc <HAL_RTC_SetAlarm+0x23c>)
 80055d8:	400a      	ands	r2, r1
 80055da:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	699a      	ldr	r2, [r3, #24]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4946      	ldr	r1, [pc, #280]	; (8005700 <HAL_RTC_SetAlarm+0x240>)
 80055e8:	400a      	ands	r2, r1
 80055ea:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 80055ec:	f7fe f972 	bl	80038d4 <HAL_GetTick>
 80055f0:	0003      	movs	r3, r0
 80055f2:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80055f4:	e016      	b.n	8005624 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80055f6:	f7fe f96d 	bl	80038d4 <HAL_GetTick>
 80055fa:	0002      	movs	r2, r0
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	1ad2      	subs	r2, r2, r3
 8005600:	23fa      	movs	r3, #250	; 0xfa
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	429a      	cmp	r2, r3
 8005606:	d90d      	bls.n	8005624 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	22ff      	movs	r2, #255	; 0xff
 800560e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2229      	movs	r2, #41	; 0x29
 8005614:	2103      	movs	r1, #3
 8005616:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2228      	movs	r2, #40	; 0x28
 800561c:	2100      	movs	r1, #0
 800561e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e067      	b.n	80056f4 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	2201      	movs	r2, #1
 800562c:	4013      	ands	r3, r2
 800562e:	d0e2      	beq.n	80055f6 <HAL_RTC_SetAlarm+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	69fa      	ldr	r2, [r7, #28]
 8005636:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	69ba      	ldr	r2, [r7, #24]
 800563e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	699a      	ldr	r2, [r3, #24]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2180      	movs	r1, #128	; 0x80
 800564c:	0049      	lsls	r1, r1, #1
 800564e:	430a      	orrs	r2, r1
 8005650:	619a      	str	r2, [r3, #24]
 8005652:	e042      	b.n	80056da <HAL_RTC_SetAlarm+0x21a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	699a      	ldr	r2, [r3, #24]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4929      	ldr	r1, [pc, #164]	; (8005704 <HAL_RTC_SetAlarm+0x244>)
 8005660:	400a      	ands	r2, r1
 8005662:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	699a      	ldr	r2, [r3, #24]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4926      	ldr	r1, [pc, #152]	; (8005708 <HAL_RTC_SetAlarm+0x248>)
 8005670:	400a      	ands	r2, r1
 8005672:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8005674:	f7fe f92e 	bl	80038d4 <HAL_GetTick>
 8005678:	0003      	movs	r3, r0
 800567a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800567c:	e016      	b.n	80056ac <HAL_RTC_SetAlarm+0x1ec>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800567e:	f7fe f929 	bl	80038d4 <HAL_GetTick>
 8005682:	0002      	movs	r2, r0
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	1ad2      	subs	r2, r2, r3
 8005688:	23fa      	movs	r3, #250	; 0xfa
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	429a      	cmp	r2, r3
 800568e:	d90d      	bls.n	80056ac <HAL_RTC_SetAlarm+0x1ec>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	22ff      	movs	r2, #255	; 0xff
 8005696:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2229      	movs	r2, #41	; 0x29
 800569c:	2103      	movs	r1, #3
 800569e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2228      	movs	r2, #40	; 0x28
 80056a4:	2100      	movs	r1, #0
 80056a6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e023      	b.n	80056f4 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	2202      	movs	r2, #2
 80056b4:	4013      	ands	r3, r2
 80056b6:	d0e2      	beq.n	800567e <HAL_RTC_SetAlarm+0x1be>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	69fa      	ldr	r2, [r7, #28]
 80056be:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	699a      	ldr	r2, [r3, #24]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2180      	movs	r1, #128	; 0x80
 80056d4:	0089      	lsls	r1, r1, #2
 80056d6:	430a      	orrs	r2, r1
 80056d8:	619a      	str	r2, [r3, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	22ff      	movs	r2, #255	; 0xff
 80056e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2229      	movs	r2, #41	; 0x29
 80056e6:	2101      	movs	r1, #1
 80056e8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2228      	movs	r2, #40	; 0x28
 80056ee:	2100      	movs	r1, #0
 80056f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	0018      	movs	r0, r3
 80056f6:	46bd      	mov	sp, r7
 80056f8:	b009      	add	sp, #36	; 0x24
 80056fa:	bd90      	pop	{r4, r7, pc}
 80056fc:	fffffeff 	.word	0xfffffeff
 8005700:	ffffefff 	.word	0xffffefff
 8005704:	fffffdff 	.word	0xfffffdff
 8005708:	ffffdfff 	.word	0xffffdfff

0800570c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68da      	ldr	r2, [r3, #12]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	21a0      	movs	r1, #160	; 0xa0
 8005720:	438a      	bics	r2, r1
 8005722:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005724:	f7fe f8d6 	bl	80038d4 <HAL_GetTick>
 8005728:	0003      	movs	r3, r0
 800572a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800572c:	e00a      	b.n	8005744 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800572e:	f7fe f8d1 	bl	80038d4 <HAL_GetTick>
 8005732:	0002      	movs	r2, r0
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	1ad2      	subs	r2, r2, r3
 8005738:	23fa      	movs	r3, #250	; 0xfa
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	429a      	cmp	r2, r3
 800573e:	d901      	bls.n	8005744 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e006      	b.n	8005752 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	2220      	movs	r2, #32
 800574c:	4013      	ands	r3, r2
 800574e:	d0ee      	beq.n	800572e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	0018      	movs	r0, r3
 8005754:	46bd      	mov	sp, r7
 8005756:	b004      	add	sp, #16
 8005758:	bd80      	pop	{r7, pc}

0800575a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b084      	sub	sp, #16
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8005762:	230f      	movs	r3, #15
 8005764:	18fb      	adds	r3, r7, r3
 8005766:	2200      	movs	r2, #0
 8005768:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	2240      	movs	r2, #64	; 0x40
 8005772:	4013      	ands	r3, r2
 8005774:	d12c      	bne.n	80057d0 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68da      	ldr	r2, [r3, #12]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2180      	movs	r1, #128	; 0x80
 8005782:	430a      	orrs	r2, r1
 8005784:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005786:	f7fe f8a5 	bl	80038d4 <HAL_GetTick>
 800578a:	0003      	movs	r3, r0
 800578c:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800578e:	e014      	b.n	80057ba <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005790:	f7fe f8a0 	bl	80038d4 <HAL_GetTick>
 8005794:	0002      	movs	r2, r0
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	1ad2      	subs	r2, r2, r3
 800579a:	200f      	movs	r0, #15
 800579c:	183b      	adds	r3, r7, r0
 800579e:	1839      	adds	r1, r7, r0
 80057a0:	7809      	ldrb	r1, [r1, #0]
 80057a2:	7019      	strb	r1, [r3, #0]
 80057a4:	23fa      	movs	r3, #250	; 0xfa
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d906      	bls.n	80057ba <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80057ac:	183b      	adds	r3, r7, r0
 80057ae:	2203      	movs	r2, #3
 80057b0:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2229      	movs	r2, #41	; 0x29
 80057b6:	2103      	movs	r1, #3
 80057b8:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	2240      	movs	r2, #64	; 0x40
 80057c2:	4013      	ands	r3, r2
 80057c4:	d104      	bne.n	80057d0 <RTC_EnterInitMode+0x76>
 80057c6:	230f      	movs	r3, #15
 80057c8:	18fb      	adds	r3, r7, r3
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	2b03      	cmp	r3, #3
 80057ce:	d1df      	bne.n	8005790 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80057d0:	230f      	movs	r3, #15
 80057d2:	18fb      	adds	r3, r7, r3
 80057d4:	781b      	ldrb	r3, [r3, #0]
}
 80057d6:	0018      	movs	r0, r3
 80057d8:	46bd      	mov	sp, r7
 80057da:	b004      	add	sp, #16
 80057dc:	bd80      	pop	{r7, pc}
	...

080057e0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80057e0:	b590      	push	{r4, r7, lr}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057e8:	240f      	movs	r4, #15
 80057ea:	193b      	adds	r3, r7, r4
 80057ec:	2200      	movs	r2, #0
 80057ee:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80057f0:	4b1c      	ldr	r3, [pc, #112]	; (8005864 <RTC_ExitInitMode+0x84>)
 80057f2:	68da      	ldr	r2, [r3, #12]
 80057f4:	4b1b      	ldr	r3, [pc, #108]	; (8005864 <RTC_ExitInitMode+0x84>)
 80057f6:	2180      	movs	r1, #128	; 0x80
 80057f8:	438a      	bics	r2, r1
 80057fa:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80057fc:	4b19      	ldr	r3, [pc, #100]	; (8005864 <RTC_ExitInitMode+0x84>)
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	2220      	movs	r2, #32
 8005802:	4013      	ands	r3, r2
 8005804:	d10d      	bne.n	8005822 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	0018      	movs	r0, r3
 800580a:	f7ff ff7f 	bl	800570c <HAL_RTC_WaitForSynchro>
 800580e:	1e03      	subs	r3, r0, #0
 8005810:	d021      	beq.n	8005856 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2229      	movs	r2, #41	; 0x29
 8005816:	2103      	movs	r1, #3
 8005818:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800581a:	193b      	adds	r3, r7, r4
 800581c:	2203      	movs	r2, #3
 800581e:	701a      	strb	r2, [r3, #0]
 8005820:	e019      	b.n	8005856 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005822:	4b10      	ldr	r3, [pc, #64]	; (8005864 <RTC_ExitInitMode+0x84>)
 8005824:	699a      	ldr	r2, [r3, #24]
 8005826:	4b0f      	ldr	r3, [pc, #60]	; (8005864 <RTC_ExitInitMode+0x84>)
 8005828:	2120      	movs	r1, #32
 800582a:	438a      	bics	r2, r1
 800582c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	0018      	movs	r0, r3
 8005832:	f7ff ff6b 	bl	800570c <HAL_RTC_WaitForSynchro>
 8005836:	1e03      	subs	r3, r0, #0
 8005838:	d007      	beq.n	800584a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2229      	movs	r2, #41	; 0x29
 800583e:	2103      	movs	r1, #3
 8005840:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005842:	230f      	movs	r3, #15
 8005844:	18fb      	adds	r3, r7, r3
 8005846:	2203      	movs	r2, #3
 8005848:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800584a:	4b06      	ldr	r3, [pc, #24]	; (8005864 <RTC_ExitInitMode+0x84>)
 800584c:	699a      	ldr	r2, [r3, #24]
 800584e:	4b05      	ldr	r3, [pc, #20]	; (8005864 <RTC_ExitInitMode+0x84>)
 8005850:	2120      	movs	r1, #32
 8005852:	430a      	orrs	r2, r1
 8005854:	619a      	str	r2, [r3, #24]
  }

  return status;
 8005856:	230f      	movs	r3, #15
 8005858:	18fb      	adds	r3, r7, r3
 800585a:	781b      	ldrb	r3, [r3, #0]
}
 800585c:	0018      	movs	r0, r3
 800585e:	46bd      	mov	sp, r7
 8005860:	b005      	add	sp, #20
 8005862:	bd90      	pop	{r4, r7, pc}
 8005864:	40002800 	.word	0x40002800

08005868 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	0002      	movs	r2, r0
 8005870:	1dfb      	adds	r3, r7, #7
 8005872:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005874:	2300      	movs	r3, #0
 8005876:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005878:	230b      	movs	r3, #11
 800587a:	18fb      	adds	r3, r7, r3
 800587c:	1dfa      	adds	r2, r7, #7
 800587e:	7812      	ldrb	r2, [r2, #0]
 8005880:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8005882:	e008      	b.n	8005896 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	3301      	adds	r3, #1
 8005888:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800588a:	220b      	movs	r2, #11
 800588c:	18bb      	adds	r3, r7, r2
 800588e:	18ba      	adds	r2, r7, r2
 8005890:	7812      	ldrb	r2, [r2, #0]
 8005892:	3a0a      	subs	r2, #10
 8005894:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8005896:	210b      	movs	r1, #11
 8005898:	187b      	adds	r3, r7, r1
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	2b09      	cmp	r3, #9
 800589e:	d8f1      	bhi.n	8005884 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	011b      	lsls	r3, r3, #4
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	187b      	adds	r3, r7, r1
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	b2db      	uxtb	r3, r3
}
 80058b0:	0018      	movs	r0, r3
 80058b2:	46bd      	mov	sp, r7
 80058b4:	b004      	add	sp, #16
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	0002      	movs	r2, r0
 80058c0:	1dfb      	adds	r3, r7, #7
 80058c2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80058c4:	1dfb      	adds	r3, r7, #7
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	091b      	lsrs	r3, r3, #4
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	001a      	movs	r2, r3
 80058ce:	0013      	movs	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	189b      	adds	r3, r3, r2
 80058d4:	005b      	lsls	r3, r3, #1
 80058d6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	b2da      	uxtb	r2, r3
 80058dc:	1dfb      	adds	r3, r7, #7
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	210f      	movs	r1, #15
 80058e2:	400b      	ands	r3, r1
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	18d3      	adds	r3, r2, r3
 80058e8:	b2db      	uxtb	r3, r3
}
 80058ea:	0018      	movs	r0, r3
 80058ec:	46bd      	mov	sp, r7
 80058ee:	b004      	add	sp, #16
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b082      	sub	sp, #8
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2228      	movs	r2, #40	; 0x28
 80058fe:	5c9b      	ldrb	r3, [r3, r2]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d101      	bne.n	8005908 <HAL_RTCEx_EnableBypassShadow+0x16>
 8005904:	2302      	movs	r3, #2
 8005906:	e024      	b.n	8005952 <HAL_RTCEx_EnableBypassShadow+0x60>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2228      	movs	r2, #40	; 0x28
 800590c:	2101      	movs	r1, #1
 800590e:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2229      	movs	r2, #41	; 0x29
 8005914:	2102      	movs	r1, #2
 8005916:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	22ca      	movs	r2, #202	; 0xca
 800591e:	625a      	str	r2, [r3, #36]	; 0x24
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2253      	movs	r2, #83	; 0x53
 8005926:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	699a      	ldr	r2, [r3, #24]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2120      	movs	r1, #32
 8005934:	430a      	orrs	r2, r1
 8005936:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	22ff      	movs	r2, #255	; 0xff
 800593e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2229      	movs	r2, #41	; 0x29
 8005944:	2101      	movs	r1, #1
 8005946:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2228      	movs	r2, #40	; 0x28
 800594c:	2100      	movs	r1, #0
 800594e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	0018      	movs	r0, r3
 8005954:	46bd      	mov	sp, r7
 8005956:	b002      	add	sp, #8
 8005958:	bd80      	pop	{r7, pc}

0800595a <HAL_RTCEx_DisableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b082      	sub	sp, #8
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2228      	movs	r2, #40	; 0x28
 8005966:	5c9b      	ldrb	r3, [r3, r2]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d101      	bne.n	8005970 <HAL_RTCEx_DisableBypassShadow+0x16>
 800596c:	2302      	movs	r3, #2
 800596e:	e024      	b.n	80059ba <HAL_RTCEx_DisableBypassShadow+0x60>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2228      	movs	r2, #40	; 0x28
 8005974:	2101      	movs	r1, #1
 8005976:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2229      	movs	r2, #41	; 0x29
 800597c:	2102      	movs	r1, #2
 800597e:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	22ca      	movs	r2, #202	; 0xca
 8005986:	625a      	str	r2, [r3, #36]	; 0x24
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2253      	movs	r2, #83	; 0x53
 800598e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset the BYPSHAD bit */
  hrtc->Instance->CR &= ((uint8_t)~RTC_CR_BYPSHAD);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	699a      	ldr	r2, [r3, #24]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	21df      	movs	r1, #223	; 0xdf
 800599c:	400a      	ands	r2, r1
 800599e:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	22ff      	movs	r2, #255	; 0xff
 80059a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2229      	movs	r2, #41	; 0x29
 80059ac:	2101      	movs	r1, #1
 80059ae:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2228      	movs	r2, #40	; 0x28
 80059b4:	2100      	movs	r1, #0
 80059b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	0018      	movs	r0, r3
 80059bc:	46bd      	mov	sp, r7
 80059be:	b002      	add	sp, #8
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b082      	sub	sp, #8
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d101      	bne.n	80059d4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e04a      	b.n	8005a6a <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	223d      	movs	r2, #61	; 0x3d
 80059d8:	5c9b      	ldrb	r3, [r3, r2]
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d107      	bne.n	80059f0 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	223c      	movs	r2, #60	; 0x3c
 80059e4:	2100      	movs	r1, #0
 80059e6:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	0018      	movs	r0, r3
 80059ec:	f7fd fc8a 	bl	8003304 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	223d      	movs	r2, #61	; 0x3d
 80059f4:	2102      	movs	r1, #2
 80059f6:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	3304      	adds	r3, #4
 8005a00:	0019      	movs	r1, r3
 8005a02:	0010      	movs	r0, r2
 8005a04:	f000 fa12 	bl	8005e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2248      	movs	r2, #72	; 0x48
 8005a0c:	2101      	movs	r1, #1
 8005a0e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	223e      	movs	r2, #62	; 0x3e
 8005a14:	2101      	movs	r1, #1
 8005a16:	5499      	strb	r1, [r3, r2]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	223f      	movs	r2, #63	; 0x3f
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	5499      	strb	r1, [r3, r2]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2240      	movs	r2, #64	; 0x40
 8005a24:	2101      	movs	r1, #1
 8005a26:	5499      	strb	r1, [r3, r2]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2241      	movs	r2, #65	; 0x41
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	5499      	strb	r1, [r3, r2]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2242      	movs	r2, #66	; 0x42
 8005a34:	2101      	movs	r1, #1
 8005a36:	5499      	strb	r1, [r3, r2]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2243      	movs	r2, #67	; 0x43
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2244      	movs	r2, #68	; 0x44
 8005a44:	2101      	movs	r1, #1
 8005a46:	5499      	strb	r1, [r3, r2]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2245      	movs	r2, #69	; 0x45
 8005a4c:	2101      	movs	r1, #1
 8005a4e:	5499      	strb	r1, [r3, r2]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2246      	movs	r2, #70	; 0x46
 8005a54:	2101      	movs	r1, #1
 8005a56:	5499      	strb	r1, [r3, r2]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2247      	movs	r2, #71	; 0x47
 8005a5c:	2101      	movs	r1, #1
 8005a5e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	223d      	movs	r2, #61	; 0x3d
 8005a64:	2101      	movs	r1, #1
 8005a66:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	0018      	movs	r0, r3
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	b002      	add	sp, #8
 8005a70:	bd80      	pop	{r7, pc}
	...

08005a74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	223d      	movs	r2, #61	; 0x3d
 8005a80:	5c9b      	ldrb	r3, [r3, r2]
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d001      	beq.n	8005a8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e042      	b.n	8005b12 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	223d      	movs	r2, #61	; 0x3d
 8005a90:	2102      	movs	r1, #2
 8005a92:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68da      	ldr	r2, [r3, #12]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2101      	movs	r1, #1
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a1c      	ldr	r2, [pc, #112]	; (8005b1c <HAL_TIM_Base_Start_IT+0xa8>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d00f      	beq.n	8005ace <HAL_TIM_Base_Start_IT+0x5a>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	2380      	movs	r3, #128	; 0x80
 8005ab4:	05db      	lsls	r3, r3, #23
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d009      	beq.n	8005ace <HAL_TIM_Base_Start_IT+0x5a>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a18      	ldr	r2, [pc, #96]	; (8005b20 <HAL_TIM_Base_Start_IT+0xac>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d004      	beq.n	8005ace <HAL_TIM_Base_Start_IT+0x5a>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a16      	ldr	r2, [pc, #88]	; (8005b24 <HAL_TIM_Base_Start_IT+0xb0>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d116      	bne.n	8005afc <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	4a14      	ldr	r2, [pc, #80]	; (8005b28 <HAL_TIM_Base_Start_IT+0xb4>)
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2b06      	cmp	r3, #6
 8005ade:	d016      	beq.n	8005b0e <HAL_TIM_Base_Start_IT+0x9a>
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	2380      	movs	r3, #128	; 0x80
 8005ae4:	025b      	lsls	r3, r3, #9
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d011      	beq.n	8005b0e <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2101      	movs	r1, #1
 8005af6:	430a      	orrs	r2, r1
 8005af8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005afa:	e008      	b.n	8005b0e <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2101      	movs	r1, #1
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	e000      	b.n	8005b10 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b0e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	0018      	movs	r0, r3
 8005b14:	46bd      	mov	sp, r7
 8005b16:	b004      	add	sp, #16
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	46c0      	nop			; (mov r8, r8)
 8005b1c:	40012c00 	.word	0x40012c00
 8005b20:	40000400 	.word	0x40000400
 8005b24:	40014000 	.word	0x40014000
 8005b28:	00010007 	.word	0x00010007

08005b2c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68da      	ldr	r2, [r3, #12]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2101      	movs	r1, #1
 8005b40:	438a      	bics	r2, r1
 8005b42:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	4a0d      	ldr	r2, [pc, #52]	; (8005b80 <HAL_TIM_Base_Stop_IT+0x54>)
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	d10d      	bne.n	8005b6c <HAL_TIM_Base_Stop_IT+0x40>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	4a0b      	ldr	r2, [pc, #44]	; (8005b84 <HAL_TIM_Base_Stop_IT+0x58>)
 8005b58:	4013      	ands	r3, r2
 8005b5a:	d107      	bne.n	8005b6c <HAL_TIM_Base_Stop_IT+0x40>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2101      	movs	r1, #1
 8005b68:	438a      	bics	r2, r1
 8005b6a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	223d      	movs	r2, #61	; 0x3d
 8005b70:	2101      	movs	r1, #1
 8005b72:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	0018      	movs	r0, r3
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	b002      	add	sp, #8
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	46c0      	nop			; (mov r8, r8)
 8005b80:	00001111 	.word	0x00001111
 8005b84:	00000444 	.word	0x00000444

08005b88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	2202      	movs	r2, #2
 8005b98:	4013      	ands	r3, r2
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d124      	bne.n	8005be8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	2202      	movs	r2, #2
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d11d      	bne.n	8005be8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2203      	movs	r2, #3
 8005bb2:	4252      	negs	r2, r2
 8005bb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	2203      	movs	r2, #3
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	d004      	beq.n	8005bd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	0018      	movs	r0, r3
 8005bcc:	f000 f916 	bl	8005dfc <HAL_TIM_IC_CaptureCallback>
 8005bd0:	e007      	b.n	8005be2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	0018      	movs	r0, r3
 8005bd6:	f000 f909 	bl	8005dec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	0018      	movs	r0, r3
 8005bde:	f000 f915 	bl	8005e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	2204      	movs	r2, #4
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	2b04      	cmp	r3, #4
 8005bf4:	d125      	bne.n	8005c42 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	2204      	movs	r2, #4
 8005bfe:	4013      	ands	r3, r2
 8005c00:	2b04      	cmp	r3, #4
 8005c02:	d11e      	bne.n	8005c42 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2205      	movs	r2, #5
 8005c0a:	4252      	negs	r2, r2
 8005c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2202      	movs	r2, #2
 8005c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	699a      	ldr	r2, [r3, #24]
 8005c1a:	23c0      	movs	r3, #192	; 0xc0
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4013      	ands	r3, r2
 8005c20:	d004      	beq.n	8005c2c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	0018      	movs	r0, r3
 8005c26:	f000 f8e9 	bl	8005dfc <HAL_TIM_IC_CaptureCallback>
 8005c2a:	e007      	b.n	8005c3c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	0018      	movs	r0, r3
 8005c30:	f000 f8dc 	bl	8005dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	0018      	movs	r0, r3
 8005c38:	f000 f8e8 	bl	8005e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	2208      	movs	r2, #8
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	2b08      	cmp	r3, #8
 8005c4e:	d124      	bne.n	8005c9a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	2208      	movs	r2, #8
 8005c58:	4013      	ands	r3, r2
 8005c5a:	2b08      	cmp	r3, #8
 8005c5c:	d11d      	bne.n	8005c9a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2209      	movs	r2, #9
 8005c64:	4252      	negs	r2, r2
 8005c66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2204      	movs	r2, #4
 8005c6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	69db      	ldr	r3, [r3, #28]
 8005c74:	2203      	movs	r2, #3
 8005c76:	4013      	ands	r3, r2
 8005c78:	d004      	beq.n	8005c84 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	0018      	movs	r0, r3
 8005c7e:	f000 f8bd 	bl	8005dfc <HAL_TIM_IC_CaptureCallback>
 8005c82:	e007      	b.n	8005c94 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	0018      	movs	r0, r3
 8005c88:	f000 f8b0 	bl	8005dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	0018      	movs	r0, r3
 8005c90:	f000 f8bc 	bl	8005e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	2210      	movs	r2, #16
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	2b10      	cmp	r3, #16
 8005ca6:	d125      	bne.n	8005cf4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	2210      	movs	r2, #16
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	2b10      	cmp	r3, #16
 8005cb4:	d11e      	bne.n	8005cf4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2211      	movs	r2, #17
 8005cbc:	4252      	negs	r2, r2
 8005cbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2208      	movs	r2, #8
 8005cc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	69da      	ldr	r2, [r3, #28]
 8005ccc:	23c0      	movs	r3, #192	; 0xc0
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	d004      	beq.n	8005cde <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	0018      	movs	r0, r3
 8005cd8:	f000 f890 	bl	8005dfc <HAL_TIM_IC_CaptureCallback>
 8005cdc:	e007      	b.n	8005cee <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	0018      	movs	r0, r3
 8005ce2:	f000 f883 	bl	8005dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	0018      	movs	r0, r3
 8005cea:	f000 f88f 	bl	8005e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d10f      	bne.n	8005d22 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d108      	bne.n	8005d22 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2202      	movs	r2, #2
 8005d16:	4252      	negs	r2, r2
 8005d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	0018      	movs	r0, r3
 8005d1e:	f7fd fa0f 	bl	8003140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	2280      	movs	r2, #128	; 0x80
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	2b80      	cmp	r3, #128	; 0x80
 8005d2e:	d10f      	bne.n	8005d50 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	2280      	movs	r2, #128	; 0x80
 8005d38:	4013      	ands	r3, r2
 8005d3a:	2b80      	cmp	r3, #128	; 0x80
 8005d3c:	d108      	bne.n	8005d50 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2281      	movs	r2, #129	; 0x81
 8005d44:	4252      	negs	r2, r2
 8005d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	0018      	movs	r0, r3
 8005d4c:	f000 f964 	bl	8006018 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	691a      	ldr	r2, [r3, #16]
 8005d56:	2380      	movs	r3, #128	; 0x80
 8005d58:	005b      	lsls	r3, r3, #1
 8005d5a:	401a      	ands	r2, r3
 8005d5c:	2380      	movs	r3, #128	; 0x80
 8005d5e:	005b      	lsls	r3, r3, #1
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d10e      	bne.n	8005d82 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	2280      	movs	r2, #128	; 0x80
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	2b80      	cmp	r3, #128	; 0x80
 8005d70:	d107      	bne.n	8005d82 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a1c      	ldr	r2, [pc, #112]	; (8005de8 <HAL_TIM_IRQHandler+0x260>)
 8005d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	0018      	movs	r0, r3
 8005d7e:	f000 f953 	bl	8006028 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	2240      	movs	r2, #64	; 0x40
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	2b40      	cmp	r3, #64	; 0x40
 8005d8e:	d10f      	bne.n	8005db0 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	2240      	movs	r2, #64	; 0x40
 8005d98:	4013      	ands	r3, r2
 8005d9a:	2b40      	cmp	r3, #64	; 0x40
 8005d9c:	d108      	bne.n	8005db0 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2241      	movs	r2, #65	; 0x41
 8005da4:	4252      	negs	r2, r2
 8005da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	0018      	movs	r0, r3
 8005dac:	f000 f836 	bl	8005e1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	2220      	movs	r2, #32
 8005db8:	4013      	ands	r3, r2
 8005dba:	2b20      	cmp	r3, #32
 8005dbc:	d10f      	bne.n	8005dde <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	2b20      	cmp	r3, #32
 8005dca:	d108      	bne.n	8005dde <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2221      	movs	r2, #33	; 0x21
 8005dd2:	4252      	negs	r2, r2
 8005dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	0018      	movs	r0, r3
 8005dda:	f000 f915 	bl	8006008 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dde:	46c0      	nop			; (mov r8, r8)
 8005de0:	46bd      	mov	sp, r7
 8005de2:	b002      	add	sp, #8
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	46c0      	nop			; (mov r8, r8)
 8005de8:	fffffeff 	.word	0xfffffeff

08005dec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005df4:	46c0      	nop			; (mov r8, r8)
 8005df6:	46bd      	mov	sp, r7
 8005df8:	b002      	add	sp, #8
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e04:	46c0      	nop			; (mov r8, r8)
 8005e06:	46bd      	mov	sp, r7
 8005e08:	b002      	add	sp, #8
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e14:	46c0      	nop			; (mov r8, r8)
 8005e16:	46bd      	mov	sp, r7
 8005e18:	b002      	add	sp, #8
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e24:	46c0      	nop			; (mov r8, r8)
 8005e26:	46bd      	mov	sp, r7
 8005e28:	b002      	add	sp, #8
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a34      	ldr	r2, [pc, #208]	; (8005f10 <TIM_Base_SetConfig+0xe4>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d008      	beq.n	8005e56 <TIM_Base_SetConfig+0x2a>
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	2380      	movs	r3, #128	; 0x80
 8005e48:	05db      	lsls	r3, r3, #23
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d003      	beq.n	8005e56 <TIM_Base_SetConfig+0x2a>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a30      	ldr	r2, [pc, #192]	; (8005f14 <TIM_Base_SetConfig+0xe8>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d108      	bne.n	8005e68 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2270      	movs	r2, #112	; 0x70
 8005e5a:	4393      	bics	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a29      	ldr	r2, [pc, #164]	; (8005f10 <TIM_Base_SetConfig+0xe4>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d018      	beq.n	8005ea2 <TIM_Base_SetConfig+0x76>
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	2380      	movs	r3, #128	; 0x80
 8005e74:	05db      	lsls	r3, r3, #23
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d013      	beq.n	8005ea2 <TIM_Base_SetConfig+0x76>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a25      	ldr	r2, [pc, #148]	; (8005f14 <TIM_Base_SetConfig+0xe8>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d00f      	beq.n	8005ea2 <TIM_Base_SetConfig+0x76>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a24      	ldr	r2, [pc, #144]	; (8005f18 <TIM_Base_SetConfig+0xec>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d00b      	beq.n	8005ea2 <TIM_Base_SetConfig+0x76>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a23      	ldr	r2, [pc, #140]	; (8005f1c <TIM_Base_SetConfig+0xf0>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d007      	beq.n	8005ea2 <TIM_Base_SetConfig+0x76>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a22      	ldr	r2, [pc, #136]	; (8005f20 <TIM_Base_SetConfig+0xf4>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d003      	beq.n	8005ea2 <TIM_Base_SetConfig+0x76>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a21      	ldr	r2, [pc, #132]	; (8005f24 <TIM_Base_SetConfig+0xf8>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d108      	bne.n	8005eb4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	4a20      	ldr	r2, [pc, #128]	; (8005f28 <TIM_Base_SetConfig+0xfc>)
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2280      	movs	r2, #128	; 0x80
 8005eb8:	4393      	bics	r3, r2
 8005eba:	001a      	movs	r2, r3
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	689a      	ldr	r2, [r3, #8]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a0c      	ldr	r2, [pc, #48]	; (8005f10 <TIM_Base_SetConfig+0xe4>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d00b      	beq.n	8005efa <TIM_Base_SetConfig+0xce>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a0d      	ldr	r2, [pc, #52]	; (8005f1c <TIM_Base_SetConfig+0xf0>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d007      	beq.n	8005efa <TIM_Base_SetConfig+0xce>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a0c      	ldr	r2, [pc, #48]	; (8005f20 <TIM_Base_SetConfig+0xf4>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d003      	beq.n	8005efa <TIM_Base_SetConfig+0xce>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a0b      	ldr	r2, [pc, #44]	; (8005f24 <TIM_Base_SetConfig+0xf8>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d103      	bne.n	8005f02 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	691a      	ldr	r2, [r3, #16]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2201      	movs	r2, #1
 8005f06:	615a      	str	r2, [r3, #20]
}
 8005f08:	46c0      	nop			; (mov r8, r8)
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	b004      	add	sp, #16
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	40012c00 	.word	0x40012c00
 8005f14:	40000400 	.word	0x40000400
 8005f18:	40002000 	.word	0x40002000
 8005f1c:	40014000 	.word	0x40014000
 8005f20:	40014400 	.word	0x40014400
 8005f24:	40014800 	.word	0x40014800
 8005f28:	fffffcff 	.word	0xfffffcff

08005f2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	223c      	movs	r2, #60	; 0x3c
 8005f3a:	5c9b      	ldrb	r3, [r3, r2]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d101      	bne.n	8005f44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f40:	2302      	movs	r3, #2
 8005f42:	e055      	b.n	8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	223c      	movs	r2, #60	; 0x3c
 8005f48:	2101      	movs	r1, #1
 8005f4a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	223d      	movs	r2, #61	; 0x3d
 8005f50:	2102      	movs	r1, #2
 8005f52:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a23      	ldr	r2, [pc, #140]	; (8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d108      	bne.n	8005f80 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	4a22      	ldr	r2, [pc, #136]	; (8005ffc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005f72:	4013      	ands	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2270      	movs	r2, #112	; 0x70
 8005f84:	4393      	bics	r3, r2
 8005f86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a16      	ldr	r2, [pc, #88]	; (8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d00f      	beq.n	8005fc4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	2380      	movs	r3, #128	; 0x80
 8005faa:	05db      	lsls	r3, r3, #23
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d009      	beq.n	8005fc4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a12      	ldr	r2, [pc, #72]	; (8006000 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d004      	beq.n	8005fc4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a11      	ldr	r2, [pc, #68]	; (8006004 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d10c      	bne.n	8005fde <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	2280      	movs	r2, #128	; 0x80
 8005fc8:	4393      	bics	r3, r2
 8005fca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	223d      	movs	r2, #61	; 0x3d
 8005fe2:	2101      	movs	r1, #1
 8005fe4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	223c      	movs	r2, #60	; 0x3c
 8005fea:	2100      	movs	r1, #0
 8005fec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	0018      	movs	r0, r3
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	b004      	add	sp, #16
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	40012c00 	.word	0x40012c00
 8005ffc:	ff0fffff 	.word	0xff0fffff
 8006000:	40000400 	.word	0x40000400
 8006004:	40014000 	.word	0x40014000

08006008 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006010:	46c0      	nop			; (mov r8, r8)
 8006012:	46bd      	mov	sp, r7
 8006014:	b002      	add	sp, #8
 8006016:	bd80      	pop	{r7, pc}

08006018 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006020:	46c0      	nop			; (mov r8, r8)
 8006022:	46bd      	mov	sp, r7
 8006024:	b002      	add	sp, #8
 8006026:	bd80      	pop	{r7, pc}

08006028 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006030:	46c0      	nop			; (mov r8, r8)
 8006032:	46bd      	mov	sp, r7
 8006034:	b002      	add	sp, #8
 8006036:	bd80      	pop	{r7, pc}

08006038 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e046      	b.n	80060d8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2288      	movs	r2, #136	; 0x88
 800604e:	589b      	ldr	r3, [r3, r2]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d107      	bne.n	8006064 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2284      	movs	r2, #132	; 0x84
 8006058:	2100      	movs	r1, #0
 800605a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	0018      	movs	r0, r3
 8006060:	f7fd f976 	bl	8003350 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2288      	movs	r2, #136	; 0x88
 8006068:	2124      	movs	r1, #36	; 0x24
 800606a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2101      	movs	r1, #1
 8006078:	438a      	bics	r2, r1
 800607a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	0018      	movs	r0, r3
 8006080:	f000 f9ee 	bl	8006460 <UART_SetConfig>
 8006084:	0003      	movs	r3, r0
 8006086:	2b01      	cmp	r3, #1
 8006088:	d101      	bne.n	800608e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e024      	b.n	80060d8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006092:	2b00      	cmp	r3, #0
 8006094:	d003      	beq.n	800609e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	0018      	movs	r0, r3
 800609a:	f000 fc9f 	bl	80069dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	685a      	ldr	r2, [r3, #4]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	490d      	ldr	r1, [pc, #52]	; (80060e0 <HAL_UART_Init+0xa8>)
 80060aa:	400a      	ands	r2, r1
 80060ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	689a      	ldr	r2, [r3, #8]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	212a      	movs	r1, #42	; 0x2a
 80060ba:	438a      	bics	r2, r1
 80060bc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2101      	movs	r1, #1
 80060ca:	430a      	orrs	r2, r1
 80060cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	0018      	movs	r0, r3
 80060d2:	f000 fd37 	bl	8006b44 <UART_CheckIdleState>
 80060d6:	0003      	movs	r3, r0
}
 80060d8:	0018      	movs	r0, r3
 80060da:	46bd      	mov	sp, r7
 80060dc:	b002      	add	sp, #8
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	ffffb7ff 	.word	0xffffb7ff

080060e4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e032      	b.n	800615c <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2288      	movs	r2, #136	; 0x88
 80060fa:	2124      	movs	r1, #36	; 0x24
 80060fc:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2101      	movs	r1, #1
 800610a:	438a      	bics	r2, r1
 800610c:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2200      	movs	r2, #0
 8006114:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2200      	movs	r2, #0
 800611c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2200      	movs	r2, #0
 8006124:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	0018      	movs	r0, r3
 800612a:	f7fd f9f5 	bl	8003518 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2290      	movs	r2, #144	; 0x90
 8006132:	2100      	movs	r1, #0
 8006134:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2288      	movs	r2, #136	; 0x88
 800613a:	2100      	movs	r1, #0
 800613c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	228c      	movs	r2, #140	; 0x8c
 8006142:	2100      	movs	r1, #0
 8006144:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2284      	movs	r2, #132	; 0x84
 8006156:	2100      	movs	r1, #0
 8006158:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	0018      	movs	r0, r3
 800615e:	46bd      	mov	sp, r7
 8006160:	b002      	add	sp, #8
 8006162:	bd80      	pop	{r7, pc}

08006164 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b08a      	sub	sp, #40	; 0x28
 8006168:	af02      	add	r7, sp, #8
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	603b      	str	r3, [r7, #0]
 8006170:	1dbb      	adds	r3, r7, #6
 8006172:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2288      	movs	r2, #136	; 0x88
 8006178:	589b      	ldr	r3, [r3, r2]
 800617a:	2b20      	cmp	r3, #32
 800617c:	d000      	beq.n	8006180 <HAL_UART_Transmit+0x1c>
 800617e:	e088      	b.n	8006292 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d003      	beq.n	800618e <HAL_UART_Transmit+0x2a>
 8006186:	1dbb      	adds	r3, r7, #6
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e080      	b.n	8006294 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	689a      	ldr	r2, [r3, #8]
 8006196:	2380      	movs	r3, #128	; 0x80
 8006198:	015b      	lsls	r3, r3, #5
 800619a:	429a      	cmp	r2, r3
 800619c:	d109      	bne.n	80061b2 <HAL_UART_Transmit+0x4e>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d105      	bne.n	80061b2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	2201      	movs	r2, #1
 80061aa:	4013      	ands	r3, r2
 80061ac:	d001      	beq.n	80061b2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e070      	b.n	8006294 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2290      	movs	r2, #144	; 0x90
 80061b6:	2100      	movs	r1, #0
 80061b8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2288      	movs	r2, #136	; 0x88
 80061be:	2121      	movs	r1, #33	; 0x21
 80061c0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061c2:	f7fd fb87 	bl	80038d4 <HAL_GetTick>
 80061c6:	0003      	movs	r3, r0
 80061c8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	1dba      	adds	r2, r7, #6
 80061ce:	2154      	movs	r1, #84	; 0x54
 80061d0:	8812      	ldrh	r2, [r2, #0]
 80061d2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	1dba      	adds	r2, r7, #6
 80061d8:	2156      	movs	r1, #86	; 0x56
 80061da:	8812      	ldrh	r2, [r2, #0]
 80061dc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	689a      	ldr	r2, [r3, #8]
 80061e2:	2380      	movs	r3, #128	; 0x80
 80061e4:	015b      	lsls	r3, r3, #5
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d108      	bne.n	80061fc <HAL_UART_Transmit+0x98>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d104      	bne.n	80061fc <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80061f2:	2300      	movs	r3, #0
 80061f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	61bb      	str	r3, [r7, #24]
 80061fa:	e003      	b.n	8006204 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006200:	2300      	movs	r3, #0
 8006202:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006204:	e02c      	b.n	8006260 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	0013      	movs	r3, r2
 8006210:	2200      	movs	r2, #0
 8006212:	2180      	movs	r1, #128	; 0x80
 8006214:	f000 fce4 	bl	8006be0 <UART_WaitOnFlagUntilTimeout>
 8006218:	1e03      	subs	r3, r0, #0
 800621a:	d001      	beq.n	8006220 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e039      	b.n	8006294 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10b      	bne.n	800623e <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	881b      	ldrh	r3, [r3, #0]
 800622a:	001a      	movs	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	05d2      	lsls	r2, r2, #23
 8006232:	0dd2      	lsrs	r2, r2, #23
 8006234:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	3302      	adds	r3, #2
 800623a:	61bb      	str	r3, [r7, #24]
 800623c:	e007      	b.n	800624e <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	781a      	ldrb	r2, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	3301      	adds	r3, #1
 800624c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2256      	movs	r2, #86	; 0x56
 8006252:	5a9b      	ldrh	r3, [r3, r2]
 8006254:	b29b      	uxth	r3, r3
 8006256:	3b01      	subs	r3, #1
 8006258:	b299      	uxth	r1, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2256      	movs	r2, #86	; 0x56
 800625e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2256      	movs	r2, #86	; 0x56
 8006264:	5a9b      	ldrh	r3, [r3, r2]
 8006266:	b29b      	uxth	r3, r3
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1cc      	bne.n	8006206 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	0013      	movs	r3, r2
 8006276:	2200      	movs	r2, #0
 8006278:	2140      	movs	r1, #64	; 0x40
 800627a:	f000 fcb1 	bl	8006be0 <UART_WaitOnFlagUntilTimeout>
 800627e:	1e03      	subs	r3, r0, #0
 8006280:	d001      	beq.n	8006286 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e006      	b.n	8006294 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2288      	movs	r2, #136	; 0x88
 800628a:	2120      	movs	r1, #32
 800628c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800628e:	2300      	movs	r3, #0
 8006290:	e000      	b.n	8006294 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8006292:	2302      	movs	r3, #2
  }
}
 8006294:	0018      	movs	r0, r3
 8006296:	46bd      	mov	sp, r7
 8006298:	b008      	add	sp, #32
 800629a:	bd80      	pop	{r7, pc}

0800629c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b08a      	sub	sp, #40	; 0x28
 80062a0:	af02      	add	r7, sp, #8
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	603b      	str	r3, [r7, #0]
 80062a8:	1dbb      	adds	r3, r7, #6
 80062aa:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	228c      	movs	r2, #140	; 0x8c
 80062b0:	589b      	ldr	r3, [r3, r2]
 80062b2:	2b20      	cmp	r3, #32
 80062b4:	d000      	beq.n	80062b8 <HAL_UART_Receive+0x1c>
 80062b6:	e0cc      	b.n	8006452 <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d003      	beq.n	80062c6 <HAL_UART_Receive+0x2a>
 80062be:	1dbb      	adds	r3, r7, #6
 80062c0:	881b      	ldrh	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e0c4      	b.n	8006454 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	689a      	ldr	r2, [r3, #8]
 80062ce:	2380      	movs	r3, #128	; 0x80
 80062d0:	015b      	lsls	r3, r3, #5
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d109      	bne.n	80062ea <HAL_UART_Receive+0x4e>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d105      	bne.n	80062ea <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	2201      	movs	r2, #1
 80062e2:	4013      	ands	r3, r2
 80062e4:	d001      	beq.n	80062ea <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e0b4      	b.n	8006454 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2290      	movs	r2, #144	; 0x90
 80062ee:	2100      	movs	r1, #0
 80062f0:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	228c      	movs	r2, #140	; 0x8c
 80062f6:	2122      	movs	r1, #34	; 0x22
 80062f8:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006300:	f7fd fae8 	bl	80038d4 <HAL_GetTick>
 8006304:	0003      	movs	r3, r0
 8006306:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	1dba      	adds	r2, r7, #6
 800630c:	215c      	movs	r1, #92	; 0x5c
 800630e:	8812      	ldrh	r2, [r2, #0]
 8006310:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	1dba      	adds	r2, r7, #6
 8006316:	215e      	movs	r1, #94	; 0x5e
 8006318:	8812      	ldrh	r2, [r2, #0]
 800631a:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	2380      	movs	r3, #128	; 0x80
 8006322:	015b      	lsls	r3, r3, #5
 8006324:	429a      	cmp	r2, r3
 8006326:	d10d      	bne.n	8006344 <HAL_UART_Receive+0xa8>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d104      	bne.n	800633a <HAL_UART_Receive+0x9e>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2260      	movs	r2, #96	; 0x60
 8006334:	4949      	ldr	r1, [pc, #292]	; (800645c <HAL_UART_Receive+0x1c0>)
 8006336:	5299      	strh	r1, [r3, r2]
 8006338:	e02e      	b.n	8006398 <HAL_UART_Receive+0xfc>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2260      	movs	r2, #96	; 0x60
 800633e:	21ff      	movs	r1, #255	; 0xff
 8006340:	5299      	strh	r1, [r3, r2]
 8006342:	e029      	b.n	8006398 <HAL_UART_Receive+0xfc>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10d      	bne.n	8006368 <HAL_UART_Receive+0xcc>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d104      	bne.n	800635e <HAL_UART_Receive+0xc2>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2260      	movs	r2, #96	; 0x60
 8006358:	21ff      	movs	r1, #255	; 0xff
 800635a:	5299      	strh	r1, [r3, r2]
 800635c:	e01c      	b.n	8006398 <HAL_UART_Receive+0xfc>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2260      	movs	r2, #96	; 0x60
 8006362:	217f      	movs	r1, #127	; 0x7f
 8006364:	5299      	strh	r1, [r3, r2]
 8006366:	e017      	b.n	8006398 <HAL_UART_Receive+0xfc>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	689a      	ldr	r2, [r3, #8]
 800636c:	2380      	movs	r3, #128	; 0x80
 800636e:	055b      	lsls	r3, r3, #21
 8006370:	429a      	cmp	r2, r3
 8006372:	d10d      	bne.n	8006390 <HAL_UART_Receive+0xf4>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d104      	bne.n	8006386 <HAL_UART_Receive+0xea>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2260      	movs	r2, #96	; 0x60
 8006380:	217f      	movs	r1, #127	; 0x7f
 8006382:	5299      	strh	r1, [r3, r2]
 8006384:	e008      	b.n	8006398 <HAL_UART_Receive+0xfc>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2260      	movs	r2, #96	; 0x60
 800638a:	213f      	movs	r1, #63	; 0x3f
 800638c:	5299      	strh	r1, [r3, r2]
 800638e:	e003      	b.n	8006398 <HAL_UART_Receive+0xfc>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2260      	movs	r2, #96	; 0x60
 8006394:	2100      	movs	r1, #0
 8006396:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8006398:	2312      	movs	r3, #18
 800639a:	18fb      	adds	r3, r7, r3
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	2160      	movs	r1, #96	; 0x60
 80063a0:	5a52      	ldrh	r2, [r2, r1]
 80063a2:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	689a      	ldr	r2, [r3, #8]
 80063a8:	2380      	movs	r3, #128	; 0x80
 80063aa:	015b      	lsls	r3, r3, #5
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d108      	bne.n	80063c2 <HAL_UART_Receive+0x126>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d104      	bne.n	80063c2 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80063b8:	2300      	movs	r3, #0
 80063ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	61bb      	str	r3, [r7, #24]
 80063c0:	e003      	b.n	80063ca <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063c6:	2300      	movs	r3, #0
 80063c8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80063ca:	e036      	b.n	800643a <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	0013      	movs	r3, r2
 80063d6:	2200      	movs	r2, #0
 80063d8:	2120      	movs	r1, #32
 80063da:	f000 fc01 	bl	8006be0 <UART_WaitOnFlagUntilTimeout>
 80063de:	1e03      	subs	r3, r0, #0
 80063e0:	d001      	beq.n	80063e6 <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e036      	b.n	8006454 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d10e      	bne.n	800640a <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	2212      	movs	r2, #18
 80063f6:	18ba      	adds	r2, r7, r2
 80063f8:	8812      	ldrh	r2, [r2, #0]
 80063fa:	4013      	ands	r3, r2
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	3302      	adds	r3, #2
 8006406:	61bb      	str	r3, [r7, #24]
 8006408:	e00e      	b.n	8006428 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2212      	movs	r2, #18
 8006414:	18ba      	adds	r2, r7, r2
 8006416:	8812      	ldrh	r2, [r2, #0]
 8006418:	b2d2      	uxtb	r2, r2
 800641a:	4013      	ands	r3, r2
 800641c:	b2da      	uxtb	r2, r3
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	3301      	adds	r3, #1
 8006426:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	225e      	movs	r2, #94	; 0x5e
 800642c:	5a9b      	ldrh	r3, [r3, r2]
 800642e:	b29b      	uxth	r3, r3
 8006430:	3b01      	subs	r3, #1
 8006432:	b299      	uxth	r1, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	225e      	movs	r2, #94	; 0x5e
 8006438:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	225e      	movs	r2, #94	; 0x5e
 800643e:	5a9b      	ldrh	r3, [r3, r2]
 8006440:	b29b      	uxth	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1c2      	bne.n	80063cc <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	228c      	movs	r2, #140	; 0x8c
 800644a:	2120      	movs	r1, #32
 800644c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800644e:	2300      	movs	r3, #0
 8006450:	e000      	b.n	8006454 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 8006452:	2302      	movs	r3, #2
  }
}
 8006454:	0018      	movs	r0, r3
 8006456:	46bd      	mov	sp, r7
 8006458:	b008      	add	sp, #32
 800645a:	bd80      	pop	{r7, pc}
 800645c:	000001ff 	.word	0x000001ff

08006460 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006460:	b5b0      	push	{r4, r5, r7, lr}
 8006462:	b090      	sub	sp, #64	; 0x40
 8006464:	af00      	add	r7, sp, #0
 8006466:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006468:	231a      	movs	r3, #26
 800646a:	2220      	movs	r2, #32
 800646c:	189b      	adds	r3, r3, r2
 800646e:	19db      	adds	r3, r3, r7
 8006470:	2200      	movs	r2, #0
 8006472:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	689a      	ldr	r2, [r3, #8]
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	431a      	orrs	r2, r3
 800647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	431a      	orrs	r2, r3
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	4313      	orrs	r3, r2
 800648a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4aaf      	ldr	r2, [pc, #700]	; (8006750 <UART_SetConfig+0x2f0>)
 8006494:	4013      	ands	r3, r2
 8006496:	0019      	movs	r1, r3
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800649e:	430b      	orrs	r3, r1
 80064a0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	4aaa      	ldr	r2, [pc, #680]	; (8006754 <UART_SetConfig+0x2f4>)
 80064aa:	4013      	ands	r3, r2
 80064ac:	0018      	movs	r0, r3
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	68d9      	ldr	r1, [r3, #12]
 80064b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	0003      	movs	r3, r0
 80064b8:	430b      	orrs	r3, r1
 80064ba:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4aa4      	ldr	r2, [pc, #656]	; (8006758 <UART_SetConfig+0x2f8>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d004      	beq.n	80064d6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	6a1b      	ldr	r3, [r3, #32]
 80064d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064d2:	4313      	orrs	r3, r2
 80064d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	4a9f      	ldr	r2, [pc, #636]	; (800675c <UART_SetConfig+0x2fc>)
 80064de:	4013      	ands	r3, r2
 80064e0:	0019      	movs	r1, r3
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064e8:	430b      	orrs	r3, r1
 80064ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80064ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f2:	220f      	movs	r2, #15
 80064f4:	4393      	bics	r3, r2
 80064f6:	0018      	movs	r0, r3
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80064fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	0003      	movs	r3, r0
 8006502:	430b      	orrs	r3, r1
 8006504:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a95      	ldr	r2, [pc, #596]	; (8006760 <UART_SetConfig+0x300>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d131      	bne.n	8006574 <UART_SetConfig+0x114>
 8006510:	4b94      	ldr	r3, [pc, #592]	; (8006764 <UART_SetConfig+0x304>)
 8006512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006514:	2203      	movs	r2, #3
 8006516:	4013      	ands	r3, r2
 8006518:	2b03      	cmp	r3, #3
 800651a:	d01d      	beq.n	8006558 <UART_SetConfig+0xf8>
 800651c:	d823      	bhi.n	8006566 <UART_SetConfig+0x106>
 800651e:	2b02      	cmp	r3, #2
 8006520:	d00c      	beq.n	800653c <UART_SetConfig+0xdc>
 8006522:	d820      	bhi.n	8006566 <UART_SetConfig+0x106>
 8006524:	2b00      	cmp	r3, #0
 8006526:	d002      	beq.n	800652e <UART_SetConfig+0xce>
 8006528:	2b01      	cmp	r3, #1
 800652a:	d00e      	beq.n	800654a <UART_SetConfig+0xea>
 800652c:	e01b      	b.n	8006566 <UART_SetConfig+0x106>
 800652e:	231b      	movs	r3, #27
 8006530:	2220      	movs	r2, #32
 8006532:	189b      	adds	r3, r3, r2
 8006534:	19db      	adds	r3, r3, r7
 8006536:	2200      	movs	r2, #0
 8006538:	701a      	strb	r2, [r3, #0]
 800653a:	e0b4      	b.n	80066a6 <UART_SetConfig+0x246>
 800653c:	231b      	movs	r3, #27
 800653e:	2220      	movs	r2, #32
 8006540:	189b      	adds	r3, r3, r2
 8006542:	19db      	adds	r3, r3, r7
 8006544:	2202      	movs	r2, #2
 8006546:	701a      	strb	r2, [r3, #0]
 8006548:	e0ad      	b.n	80066a6 <UART_SetConfig+0x246>
 800654a:	231b      	movs	r3, #27
 800654c:	2220      	movs	r2, #32
 800654e:	189b      	adds	r3, r3, r2
 8006550:	19db      	adds	r3, r3, r7
 8006552:	2204      	movs	r2, #4
 8006554:	701a      	strb	r2, [r3, #0]
 8006556:	e0a6      	b.n	80066a6 <UART_SetConfig+0x246>
 8006558:	231b      	movs	r3, #27
 800655a:	2220      	movs	r2, #32
 800655c:	189b      	adds	r3, r3, r2
 800655e:	19db      	adds	r3, r3, r7
 8006560:	2208      	movs	r2, #8
 8006562:	701a      	strb	r2, [r3, #0]
 8006564:	e09f      	b.n	80066a6 <UART_SetConfig+0x246>
 8006566:	231b      	movs	r3, #27
 8006568:	2220      	movs	r2, #32
 800656a:	189b      	adds	r3, r3, r2
 800656c:	19db      	adds	r3, r3, r7
 800656e:	2210      	movs	r2, #16
 8006570:	701a      	strb	r2, [r3, #0]
 8006572:	e098      	b.n	80066a6 <UART_SetConfig+0x246>
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a7b      	ldr	r2, [pc, #492]	; (8006768 <UART_SetConfig+0x308>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d131      	bne.n	80065e2 <UART_SetConfig+0x182>
 800657e:	4b79      	ldr	r3, [pc, #484]	; (8006764 <UART_SetConfig+0x304>)
 8006580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006582:	220c      	movs	r2, #12
 8006584:	4013      	ands	r3, r2
 8006586:	2b0c      	cmp	r3, #12
 8006588:	d01d      	beq.n	80065c6 <UART_SetConfig+0x166>
 800658a:	d823      	bhi.n	80065d4 <UART_SetConfig+0x174>
 800658c:	2b08      	cmp	r3, #8
 800658e:	d00c      	beq.n	80065aa <UART_SetConfig+0x14a>
 8006590:	d820      	bhi.n	80065d4 <UART_SetConfig+0x174>
 8006592:	2b00      	cmp	r3, #0
 8006594:	d002      	beq.n	800659c <UART_SetConfig+0x13c>
 8006596:	2b04      	cmp	r3, #4
 8006598:	d00e      	beq.n	80065b8 <UART_SetConfig+0x158>
 800659a:	e01b      	b.n	80065d4 <UART_SetConfig+0x174>
 800659c:	231b      	movs	r3, #27
 800659e:	2220      	movs	r2, #32
 80065a0:	189b      	adds	r3, r3, r2
 80065a2:	19db      	adds	r3, r3, r7
 80065a4:	2200      	movs	r2, #0
 80065a6:	701a      	strb	r2, [r3, #0]
 80065a8:	e07d      	b.n	80066a6 <UART_SetConfig+0x246>
 80065aa:	231b      	movs	r3, #27
 80065ac:	2220      	movs	r2, #32
 80065ae:	189b      	adds	r3, r3, r2
 80065b0:	19db      	adds	r3, r3, r7
 80065b2:	2202      	movs	r2, #2
 80065b4:	701a      	strb	r2, [r3, #0]
 80065b6:	e076      	b.n	80066a6 <UART_SetConfig+0x246>
 80065b8:	231b      	movs	r3, #27
 80065ba:	2220      	movs	r2, #32
 80065bc:	189b      	adds	r3, r3, r2
 80065be:	19db      	adds	r3, r3, r7
 80065c0:	2204      	movs	r2, #4
 80065c2:	701a      	strb	r2, [r3, #0]
 80065c4:	e06f      	b.n	80066a6 <UART_SetConfig+0x246>
 80065c6:	231b      	movs	r3, #27
 80065c8:	2220      	movs	r2, #32
 80065ca:	189b      	adds	r3, r3, r2
 80065cc:	19db      	adds	r3, r3, r7
 80065ce:	2208      	movs	r2, #8
 80065d0:	701a      	strb	r2, [r3, #0]
 80065d2:	e068      	b.n	80066a6 <UART_SetConfig+0x246>
 80065d4:	231b      	movs	r3, #27
 80065d6:	2220      	movs	r2, #32
 80065d8:	189b      	adds	r3, r3, r2
 80065da:	19db      	adds	r3, r3, r7
 80065dc:	2210      	movs	r2, #16
 80065de:	701a      	strb	r2, [r3, #0]
 80065e0:	e061      	b.n	80066a6 <UART_SetConfig+0x246>
 80065e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a61      	ldr	r2, [pc, #388]	; (800676c <UART_SetConfig+0x30c>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d106      	bne.n	80065fa <UART_SetConfig+0x19a>
 80065ec:	231b      	movs	r3, #27
 80065ee:	2220      	movs	r2, #32
 80065f0:	189b      	adds	r3, r3, r2
 80065f2:	19db      	adds	r3, r3, r7
 80065f4:	2200      	movs	r2, #0
 80065f6:	701a      	strb	r2, [r3, #0]
 80065f8:	e055      	b.n	80066a6 <UART_SetConfig+0x246>
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a5c      	ldr	r2, [pc, #368]	; (8006770 <UART_SetConfig+0x310>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d106      	bne.n	8006612 <UART_SetConfig+0x1b2>
 8006604:	231b      	movs	r3, #27
 8006606:	2220      	movs	r2, #32
 8006608:	189b      	adds	r3, r3, r2
 800660a:	19db      	adds	r3, r3, r7
 800660c:	2200      	movs	r2, #0
 800660e:	701a      	strb	r2, [r3, #0]
 8006610:	e049      	b.n	80066a6 <UART_SetConfig+0x246>
 8006612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a50      	ldr	r2, [pc, #320]	; (8006758 <UART_SetConfig+0x2f8>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d13e      	bne.n	800669a <UART_SetConfig+0x23a>
 800661c:	4b51      	ldr	r3, [pc, #324]	; (8006764 <UART_SetConfig+0x304>)
 800661e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006620:	23c0      	movs	r3, #192	; 0xc0
 8006622:	011b      	lsls	r3, r3, #4
 8006624:	4013      	ands	r3, r2
 8006626:	22c0      	movs	r2, #192	; 0xc0
 8006628:	0112      	lsls	r2, r2, #4
 800662a:	4293      	cmp	r3, r2
 800662c:	d027      	beq.n	800667e <UART_SetConfig+0x21e>
 800662e:	22c0      	movs	r2, #192	; 0xc0
 8006630:	0112      	lsls	r2, r2, #4
 8006632:	4293      	cmp	r3, r2
 8006634:	d82a      	bhi.n	800668c <UART_SetConfig+0x22c>
 8006636:	2280      	movs	r2, #128	; 0x80
 8006638:	0112      	lsls	r2, r2, #4
 800663a:	4293      	cmp	r3, r2
 800663c:	d011      	beq.n	8006662 <UART_SetConfig+0x202>
 800663e:	2280      	movs	r2, #128	; 0x80
 8006640:	0112      	lsls	r2, r2, #4
 8006642:	4293      	cmp	r3, r2
 8006644:	d822      	bhi.n	800668c <UART_SetConfig+0x22c>
 8006646:	2b00      	cmp	r3, #0
 8006648:	d004      	beq.n	8006654 <UART_SetConfig+0x1f4>
 800664a:	2280      	movs	r2, #128	; 0x80
 800664c:	00d2      	lsls	r2, r2, #3
 800664e:	4293      	cmp	r3, r2
 8006650:	d00e      	beq.n	8006670 <UART_SetConfig+0x210>
 8006652:	e01b      	b.n	800668c <UART_SetConfig+0x22c>
 8006654:	231b      	movs	r3, #27
 8006656:	2220      	movs	r2, #32
 8006658:	189b      	adds	r3, r3, r2
 800665a:	19db      	adds	r3, r3, r7
 800665c:	2200      	movs	r2, #0
 800665e:	701a      	strb	r2, [r3, #0]
 8006660:	e021      	b.n	80066a6 <UART_SetConfig+0x246>
 8006662:	231b      	movs	r3, #27
 8006664:	2220      	movs	r2, #32
 8006666:	189b      	adds	r3, r3, r2
 8006668:	19db      	adds	r3, r3, r7
 800666a:	2202      	movs	r2, #2
 800666c:	701a      	strb	r2, [r3, #0]
 800666e:	e01a      	b.n	80066a6 <UART_SetConfig+0x246>
 8006670:	231b      	movs	r3, #27
 8006672:	2220      	movs	r2, #32
 8006674:	189b      	adds	r3, r3, r2
 8006676:	19db      	adds	r3, r3, r7
 8006678:	2204      	movs	r2, #4
 800667a:	701a      	strb	r2, [r3, #0]
 800667c:	e013      	b.n	80066a6 <UART_SetConfig+0x246>
 800667e:	231b      	movs	r3, #27
 8006680:	2220      	movs	r2, #32
 8006682:	189b      	adds	r3, r3, r2
 8006684:	19db      	adds	r3, r3, r7
 8006686:	2208      	movs	r2, #8
 8006688:	701a      	strb	r2, [r3, #0]
 800668a:	e00c      	b.n	80066a6 <UART_SetConfig+0x246>
 800668c:	231b      	movs	r3, #27
 800668e:	2220      	movs	r2, #32
 8006690:	189b      	adds	r3, r3, r2
 8006692:	19db      	adds	r3, r3, r7
 8006694:	2210      	movs	r2, #16
 8006696:	701a      	strb	r2, [r3, #0]
 8006698:	e005      	b.n	80066a6 <UART_SetConfig+0x246>
 800669a:	231b      	movs	r3, #27
 800669c:	2220      	movs	r2, #32
 800669e:	189b      	adds	r3, r3, r2
 80066a0:	19db      	adds	r3, r3, r7
 80066a2:	2210      	movs	r2, #16
 80066a4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a2b      	ldr	r2, [pc, #172]	; (8006758 <UART_SetConfig+0x2f8>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d000      	beq.n	80066b2 <UART_SetConfig+0x252>
 80066b0:	e0a9      	b.n	8006806 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066b2:	231b      	movs	r3, #27
 80066b4:	2220      	movs	r2, #32
 80066b6:	189b      	adds	r3, r3, r2
 80066b8:	19db      	adds	r3, r3, r7
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	2b08      	cmp	r3, #8
 80066be:	d015      	beq.n	80066ec <UART_SetConfig+0x28c>
 80066c0:	dc18      	bgt.n	80066f4 <UART_SetConfig+0x294>
 80066c2:	2b04      	cmp	r3, #4
 80066c4:	d00d      	beq.n	80066e2 <UART_SetConfig+0x282>
 80066c6:	dc15      	bgt.n	80066f4 <UART_SetConfig+0x294>
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <UART_SetConfig+0x272>
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d005      	beq.n	80066dc <UART_SetConfig+0x27c>
 80066d0:	e010      	b.n	80066f4 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066d2:	f7fe faa1 	bl	8004c18 <HAL_RCC_GetPCLK1Freq>
 80066d6:	0003      	movs	r3, r0
 80066d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066da:	e014      	b.n	8006706 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066dc:	4b25      	ldr	r3, [pc, #148]	; (8006774 <UART_SetConfig+0x314>)
 80066de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066e0:	e011      	b.n	8006706 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066e2:	f7fe fa0d 	bl	8004b00 <HAL_RCC_GetSysClockFreq>
 80066e6:	0003      	movs	r3, r0
 80066e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066ea:	e00c      	b.n	8006706 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066ec:	2380      	movs	r3, #128	; 0x80
 80066ee:	021b      	lsls	r3, r3, #8
 80066f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066f2:	e008      	b.n	8006706 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80066f4:	2300      	movs	r3, #0
 80066f6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80066f8:	231a      	movs	r3, #26
 80066fa:	2220      	movs	r2, #32
 80066fc:	189b      	adds	r3, r3, r2
 80066fe:	19db      	adds	r3, r3, r7
 8006700:	2201      	movs	r2, #1
 8006702:	701a      	strb	r2, [r3, #0]
        break;
 8006704:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006708:	2b00      	cmp	r3, #0
 800670a:	d100      	bne.n	800670e <UART_SetConfig+0x2ae>
 800670c:	e14b      	b.n	80069a6 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800670e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006710:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006712:	4b19      	ldr	r3, [pc, #100]	; (8006778 <UART_SetConfig+0x318>)
 8006714:	0052      	lsls	r2, r2, #1
 8006716:	5ad3      	ldrh	r3, [r2, r3]
 8006718:	0019      	movs	r1, r3
 800671a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800671c:	f7f9 fd0e 	bl	800013c <__udivsi3>
 8006720:	0003      	movs	r3, r0
 8006722:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006726:	685a      	ldr	r2, [r3, #4]
 8006728:	0013      	movs	r3, r2
 800672a:	005b      	lsls	r3, r3, #1
 800672c:	189b      	adds	r3, r3, r2
 800672e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006730:	429a      	cmp	r2, r3
 8006732:	d305      	bcc.n	8006740 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800673a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800673c:	429a      	cmp	r2, r3
 800673e:	d91d      	bls.n	800677c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8006740:	231a      	movs	r3, #26
 8006742:	2220      	movs	r2, #32
 8006744:	189b      	adds	r3, r3, r2
 8006746:	19db      	adds	r3, r3, r7
 8006748:	2201      	movs	r2, #1
 800674a:	701a      	strb	r2, [r3, #0]
 800674c:	e12b      	b.n	80069a6 <UART_SetConfig+0x546>
 800674e:	46c0      	nop			; (mov r8, r8)
 8006750:	cfff69f3 	.word	0xcfff69f3
 8006754:	ffffcfff 	.word	0xffffcfff
 8006758:	40008000 	.word	0x40008000
 800675c:	11fff4ff 	.word	0x11fff4ff
 8006760:	40013800 	.word	0x40013800
 8006764:	40021000 	.word	0x40021000
 8006768:	40004400 	.word	0x40004400
 800676c:	40004800 	.word	0x40004800
 8006770:	40004c00 	.word	0x40004c00
 8006774:	00f42400 	.word	0x00f42400
 8006778:	08012af8 	.word	0x08012af8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800677c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800677e:	61bb      	str	r3, [r7, #24]
 8006780:	2300      	movs	r3, #0
 8006782:	61fb      	str	r3, [r7, #28]
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006788:	4b92      	ldr	r3, [pc, #584]	; (80069d4 <UART_SetConfig+0x574>)
 800678a:	0052      	lsls	r2, r2, #1
 800678c:	5ad3      	ldrh	r3, [r2, r3]
 800678e:	613b      	str	r3, [r7, #16]
 8006790:	2300      	movs	r3, #0
 8006792:	617b      	str	r3, [r7, #20]
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	69b8      	ldr	r0, [r7, #24]
 800679a:	69f9      	ldr	r1, [r7, #28]
 800679c:	f7f9 fe82 	bl	80004a4 <__aeabi_uldivmod>
 80067a0:	0002      	movs	r2, r0
 80067a2:	000b      	movs	r3, r1
 80067a4:	0e11      	lsrs	r1, r2, #24
 80067a6:	021d      	lsls	r5, r3, #8
 80067a8:	430d      	orrs	r5, r1
 80067aa:	0214      	lsls	r4, r2, #8
 80067ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	085b      	lsrs	r3, r3, #1
 80067b2:	60bb      	str	r3, [r7, #8]
 80067b4:	2300      	movs	r3, #0
 80067b6:	60fb      	str	r3, [r7, #12]
 80067b8:	68b8      	ldr	r0, [r7, #8]
 80067ba:	68f9      	ldr	r1, [r7, #12]
 80067bc:	1900      	adds	r0, r0, r4
 80067be:	4169      	adcs	r1, r5
 80067c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	603b      	str	r3, [r7, #0]
 80067c6:	2300      	movs	r3, #0
 80067c8:	607b      	str	r3, [r7, #4]
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f7f9 fe69 	bl	80004a4 <__aeabi_uldivmod>
 80067d2:	0002      	movs	r2, r0
 80067d4:	000b      	movs	r3, r1
 80067d6:	0013      	movs	r3, r2
 80067d8:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067dc:	23c0      	movs	r3, #192	; 0xc0
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d309      	bcc.n	80067f8 <UART_SetConfig+0x398>
 80067e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067e6:	2380      	movs	r3, #128	; 0x80
 80067e8:	035b      	lsls	r3, r3, #13
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d204      	bcs.n	80067f8 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067f4:	60da      	str	r2, [r3, #12]
 80067f6:	e0d6      	b.n	80069a6 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80067f8:	231a      	movs	r3, #26
 80067fa:	2220      	movs	r2, #32
 80067fc:	189b      	adds	r3, r3, r2
 80067fe:	19db      	adds	r3, r3, r7
 8006800:	2201      	movs	r2, #1
 8006802:	701a      	strb	r2, [r3, #0]
 8006804:	e0cf      	b.n	80069a6 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006808:	69da      	ldr	r2, [r3, #28]
 800680a:	2380      	movs	r3, #128	; 0x80
 800680c:	021b      	lsls	r3, r3, #8
 800680e:	429a      	cmp	r2, r3
 8006810:	d000      	beq.n	8006814 <UART_SetConfig+0x3b4>
 8006812:	e070      	b.n	80068f6 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8006814:	231b      	movs	r3, #27
 8006816:	2220      	movs	r2, #32
 8006818:	189b      	adds	r3, r3, r2
 800681a:	19db      	adds	r3, r3, r7
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	2b08      	cmp	r3, #8
 8006820:	d015      	beq.n	800684e <UART_SetConfig+0x3ee>
 8006822:	dc18      	bgt.n	8006856 <UART_SetConfig+0x3f6>
 8006824:	2b04      	cmp	r3, #4
 8006826:	d00d      	beq.n	8006844 <UART_SetConfig+0x3e4>
 8006828:	dc15      	bgt.n	8006856 <UART_SetConfig+0x3f6>
 800682a:	2b00      	cmp	r3, #0
 800682c:	d002      	beq.n	8006834 <UART_SetConfig+0x3d4>
 800682e:	2b02      	cmp	r3, #2
 8006830:	d005      	beq.n	800683e <UART_SetConfig+0x3de>
 8006832:	e010      	b.n	8006856 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006834:	f7fe f9f0 	bl	8004c18 <HAL_RCC_GetPCLK1Freq>
 8006838:	0003      	movs	r3, r0
 800683a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800683c:	e014      	b.n	8006868 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800683e:	4b66      	ldr	r3, [pc, #408]	; (80069d8 <UART_SetConfig+0x578>)
 8006840:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006842:	e011      	b.n	8006868 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006844:	f7fe f95c 	bl	8004b00 <HAL_RCC_GetSysClockFreq>
 8006848:	0003      	movs	r3, r0
 800684a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800684c:	e00c      	b.n	8006868 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800684e:	2380      	movs	r3, #128	; 0x80
 8006850:	021b      	lsls	r3, r3, #8
 8006852:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006854:	e008      	b.n	8006868 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006856:	2300      	movs	r3, #0
 8006858:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800685a:	231a      	movs	r3, #26
 800685c:	2220      	movs	r2, #32
 800685e:	189b      	adds	r3, r3, r2
 8006860:	19db      	adds	r3, r3, r7
 8006862:	2201      	movs	r2, #1
 8006864:	701a      	strb	r2, [r3, #0]
        break;
 8006866:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800686a:	2b00      	cmp	r3, #0
 800686c:	d100      	bne.n	8006870 <UART_SetConfig+0x410>
 800686e:	e09a      	b.n	80069a6 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006874:	4b57      	ldr	r3, [pc, #348]	; (80069d4 <UART_SetConfig+0x574>)
 8006876:	0052      	lsls	r2, r2, #1
 8006878:	5ad3      	ldrh	r3, [r2, r3]
 800687a:	0019      	movs	r1, r3
 800687c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800687e:	f7f9 fc5d 	bl	800013c <__udivsi3>
 8006882:	0003      	movs	r3, r0
 8006884:	005a      	lsls	r2, r3, #1
 8006886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	085b      	lsrs	r3, r3, #1
 800688c:	18d2      	adds	r2, r2, r3
 800688e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	0019      	movs	r1, r3
 8006894:	0010      	movs	r0, r2
 8006896:	f7f9 fc51 	bl	800013c <__udivsi3>
 800689a:	0003      	movs	r3, r0
 800689c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800689e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a0:	2b0f      	cmp	r3, #15
 80068a2:	d921      	bls.n	80068e8 <UART_SetConfig+0x488>
 80068a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068a6:	2380      	movs	r3, #128	; 0x80
 80068a8:	025b      	lsls	r3, r3, #9
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d21c      	bcs.n	80068e8 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	200e      	movs	r0, #14
 80068b4:	2420      	movs	r4, #32
 80068b6:	1903      	adds	r3, r0, r4
 80068b8:	19db      	adds	r3, r3, r7
 80068ba:	210f      	movs	r1, #15
 80068bc:	438a      	bics	r2, r1
 80068be:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c2:	085b      	lsrs	r3, r3, #1
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	2207      	movs	r2, #7
 80068c8:	4013      	ands	r3, r2
 80068ca:	b299      	uxth	r1, r3
 80068cc:	1903      	adds	r3, r0, r4
 80068ce:	19db      	adds	r3, r3, r7
 80068d0:	1902      	adds	r2, r0, r4
 80068d2:	19d2      	adds	r2, r2, r7
 80068d4:	8812      	ldrh	r2, [r2, #0]
 80068d6:	430a      	orrs	r2, r1
 80068d8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80068da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	1902      	adds	r2, r0, r4
 80068e0:	19d2      	adds	r2, r2, r7
 80068e2:	8812      	ldrh	r2, [r2, #0]
 80068e4:	60da      	str	r2, [r3, #12]
 80068e6:	e05e      	b.n	80069a6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80068e8:	231a      	movs	r3, #26
 80068ea:	2220      	movs	r2, #32
 80068ec:	189b      	adds	r3, r3, r2
 80068ee:	19db      	adds	r3, r3, r7
 80068f0:	2201      	movs	r2, #1
 80068f2:	701a      	strb	r2, [r3, #0]
 80068f4:	e057      	b.n	80069a6 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068f6:	231b      	movs	r3, #27
 80068f8:	2220      	movs	r2, #32
 80068fa:	189b      	adds	r3, r3, r2
 80068fc:	19db      	adds	r3, r3, r7
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	2b08      	cmp	r3, #8
 8006902:	d015      	beq.n	8006930 <UART_SetConfig+0x4d0>
 8006904:	dc18      	bgt.n	8006938 <UART_SetConfig+0x4d8>
 8006906:	2b04      	cmp	r3, #4
 8006908:	d00d      	beq.n	8006926 <UART_SetConfig+0x4c6>
 800690a:	dc15      	bgt.n	8006938 <UART_SetConfig+0x4d8>
 800690c:	2b00      	cmp	r3, #0
 800690e:	d002      	beq.n	8006916 <UART_SetConfig+0x4b6>
 8006910:	2b02      	cmp	r3, #2
 8006912:	d005      	beq.n	8006920 <UART_SetConfig+0x4c0>
 8006914:	e010      	b.n	8006938 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006916:	f7fe f97f 	bl	8004c18 <HAL_RCC_GetPCLK1Freq>
 800691a:	0003      	movs	r3, r0
 800691c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800691e:	e014      	b.n	800694a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006920:	4b2d      	ldr	r3, [pc, #180]	; (80069d8 <UART_SetConfig+0x578>)
 8006922:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006924:	e011      	b.n	800694a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006926:	f7fe f8eb 	bl	8004b00 <HAL_RCC_GetSysClockFreq>
 800692a:	0003      	movs	r3, r0
 800692c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800692e:	e00c      	b.n	800694a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006930:	2380      	movs	r3, #128	; 0x80
 8006932:	021b      	lsls	r3, r3, #8
 8006934:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006936:	e008      	b.n	800694a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8006938:	2300      	movs	r3, #0
 800693a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800693c:	231a      	movs	r3, #26
 800693e:	2220      	movs	r2, #32
 8006940:	189b      	adds	r3, r3, r2
 8006942:	19db      	adds	r3, r3, r7
 8006944:	2201      	movs	r2, #1
 8006946:	701a      	strb	r2, [r3, #0]
        break;
 8006948:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800694a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800694c:	2b00      	cmp	r3, #0
 800694e:	d02a      	beq.n	80069a6 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006952:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006954:	4b1f      	ldr	r3, [pc, #124]	; (80069d4 <UART_SetConfig+0x574>)
 8006956:	0052      	lsls	r2, r2, #1
 8006958:	5ad3      	ldrh	r3, [r2, r3]
 800695a:	0019      	movs	r1, r3
 800695c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800695e:	f7f9 fbed 	bl	800013c <__udivsi3>
 8006962:	0003      	movs	r3, r0
 8006964:	001a      	movs	r2, r3
 8006966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	085b      	lsrs	r3, r3, #1
 800696c:	18d2      	adds	r2, r2, r3
 800696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	0019      	movs	r1, r3
 8006974:	0010      	movs	r0, r2
 8006976:	f7f9 fbe1 	bl	800013c <__udivsi3>
 800697a:	0003      	movs	r3, r0
 800697c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800697e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006980:	2b0f      	cmp	r3, #15
 8006982:	d90a      	bls.n	800699a <UART_SetConfig+0x53a>
 8006984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006986:	2380      	movs	r3, #128	; 0x80
 8006988:	025b      	lsls	r3, r3, #9
 800698a:	429a      	cmp	r2, r3
 800698c:	d205      	bcs.n	800699a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800698e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006990:	b29a      	uxth	r2, r3
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	60da      	str	r2, [r3, #12]
 8006998:	e005      	b.n	80069a6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800699a:	231a      	movs	r3, #26
 800699c:	2220      	movs	r2, #32
 800699e:	189b      	adds	r3, r3, r2
 80069a0:	19db      	adds	r3, r3, r7
 80069a2:	2201      	movs	r2, #1
 80069a4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80069a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a8:	226a      	movs	r2, #106	; 0x6a
 80069aa:	2101      	movs	r1, #1
 80069ac:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80069ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b0:	2268      	movs	r2, #104	; 0x68
 80069b2:	2101      	movs	r1, #1
 80069b4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b8:	2200      	movs	r2, #0
 80069ba:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80069bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069be:	2200      	movs	r2, #0
 80069c0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80069c2:	231a      	movs	r3, #26
 80069c4:	2220      	movs	r2, #32
 80069c6:	189b      	adds	r3, r3, r2
 80069c8:	19db      	adds	r3, r3, r7
 80069ca:	781b      	ldrb	r3, [r3, #0]
}
 80069cc:	0018      	movs	r0, r3
 80069ce:	46bd      	mov	sp, r7
 80069d0:	b010      	add	sp, #64	; 0x40
 80069d2:	bdb0      	pop	{r4, r5, r7, pc}
 80069d4:	08012af8 	.word	0x08012af8
 80069d8:	00f42400 	.word	0x00f42400

080069dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e8:	2201      	movs	r2, #1
 80069ea:	4013      	ands	r3, r2
 80069ec:	d00b      	beq.n	8006a06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	4a4a      	ldr	r2, [pc, #296]	; (8006b20 <UART_AdvFeatureConfig+0x144>)
 80069f6:	4013      	ands	r3, r2
 80069f8:	0019      	movs	r1, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	430a      	orrs	r2, r1
 8006a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	d00b      	beq.n	8006a28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	4a43      	ldr	r2, [pc, #268]	; (8006b24 <UART_AdvFeatureConfig+0x148>)
 8006a18:	4013      	ands	r3, r2
 8006a1a:	0019      	movs	r1, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	430a      	orrs	r2, r1
 8006a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2c:	2204      	movs	r2, #4
 8006a2e:	4013      	ands	r3, r2
 8006a30:	d00b      	beq.n	8006a4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	4a3b      	ldr	r2, [pc, #236]	; (8006b28 <UART_AdvFeatureConfig+0x14c>)
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	0019      	movs	r1, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	430a      	orrs	r2, r1
 8006a48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4e:	2208      	movs	r2, #8
 8006a50:	4013      	ands	r3, r2
 8006a52:	d00b      	beq.n	8006a6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	4a34      	ldr	r2, [pc, #208]	; (8006b2c <UART_AdvFeatureConfig+0x150>)
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	0019      	movs	r1, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a70:	2210      	movs	r2, #16
 8006a72:	4013      	ands	r3, r2
 8006a74:	d00b      	beq.n	8006a8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	4a2c      	ldr	r2, [pc, #176]	; (8006b30 <UART_AdvFeatureConfig+0x154>)
 8006a7e:	4013      	ands	r3, r2
 8006a80:	0019      	movs	r1, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a92:	2220      	movs	r2, #32
 8006a94:	4013      	ands	r3, r2
 8006a96:	d00b      	beq.n	8006ab0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	4a25      	ldr	r2, [pc, #148]	; (8006b34 <UART_AdvFeatureConfig+0x158>)
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	0019      	movs	r1, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	430a      	orrs	r2, r1
 8006aae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab4:	2240      	movs	r2, #64	; 0x40
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	d01d      	beq.n	8006af6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	4a1d      	ldr	r2, [pc, #116]	; (8006b38 <UART_AdvFeatureConfig+0x15c>)
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	0019      	movs	r1, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ad6:	2380      	movs	r3, #128	; 0x80
 8006ad8:	035b      	lsls	r3, r3, #13
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d10b      	bne.n	8006af6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	4a15      	ldr	r2, [pc, #84]	; (8006b3c <UART_AdvFeatureConfig+0x160>)
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	0019      	movs	r1, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006afa:	2280      	movs	r2, #128	; 0x80
 8006afc:	4013      	ands	r3, r2
 8006afe:	d00b      	beq.n	8006b18 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	4a0e      	ldr	r2, [pc, #56]	; (8006b40 <UART_AdvFeatureConfig+0x164>)
 8006b08:	4013      	ands	r3, r2
 8006b0a:	0019      	movs	r1, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	430a      	orrs	r2, r1
 8006b16:	605a      	str	r2, [r3, #4]
  }
}
 8006b18:	46c0      	nop			; (mov r8, r8)
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	b002      	add	sp, #8
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	fffdffff 	.word	0xfffdffff
 8006b24:	fffeffff 	.word	0xfffeffff
 8006b28:	fffbffff 	.word	0xfffbffff
 8006b2c:	ffff7fff 	.word	0xffff7fff
 8006b30:	ffffefff 	.word	0xffffefff
 8006b34:	ffffdfff 	.word	0xffffdfff
 8006b38:	ffefffff 	.word	0xffefffff
 8006b3c:	ff9fffff 	.word	0xff9fffff
 8006b40:	fff7ffff 	.word	0xfff7ffff

08006b44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af02      	add	r7, sp, #8
 8006b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2290      	movs	r2, #144	; 0x90
 8006b50:	2100      	movs	r1, #0
 8006b52:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b54:	f7fc febe 	bl	80038d4 <HAL_GetTick>
 8006b58:	0003      	movs	r3, r0
 8006b5a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2208      	movs	r2, #8
 8006b64:	4013      	ands	r3, r2
 8006b66:	2b08      	cmp	r3, #8
 8006b68:	d10c      	bne.n	8006b84 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2280      	movs	r2, #128	; 0x80
 8006b6e:	0391      	lsls	r1, r2, #14
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	4a1a      	ldr	r2, [pc, #104]	; (8006bdc <UART_CheckIdleState+0x98>)
 8006b74:	9200      	str	r2, [sp, #0]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f000 f832 	bl	8006be0 <UART_WaitOnFlagUntilTimeout>
 8006b7c:	1e03      	subs	r3, r0, #0
 8006b7e:	d001      	beq.n	8006b84 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e026      	b.n	8006bd2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2204      	movs	r2, #4
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	2b04      	cmp	r3, #4
 8006b90:	d10c      	bne.n	8006bac <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2280      	movs	r2, #128	; 0x80
 8006b96:	03d1      	lsls	r1, r2, #15
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	4a10      	ldr	r2, [pc, #64]	; (8006bdc <UART_CheckIdleState+0x98>)
 8006b9c:	9200      	str	r2, [sp, #0]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f000 f81e 	bl	8006be0 <UART_WaitOnFlagUntilTimeout>
 8006ba4:	1e03      	subs	r3, r0, #0
 8006ba6:	d001      	beq.n	8006bac <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e012      	b.n	8006bd2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2288      	movs	r2, #136	; 0x88
 8006bb0:	2120      	movs	r1, #32
 8006bb2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	228c      	movs	r2, #140	; 0x8c
 8006bb8:	2120      	movs	r1, #32
 8006bba:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2284      	movs	r2, #132	; 0x84
 8006bcc:	2100      	movs	r1, #0
 8006bce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	0018      	movs	r0, r3
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	b004      	add	sp, #16
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	46c0      	nop			; (mov r8, r8)
 8006bdc:	01ffffff 	.word	0x01ffffff

08006be0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b094      	sub	sp, #80	; 0x50
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	603b      	str	r3, [r7, #0]
 8006bec:	1dfb      	adds	r3, r7, #7
 8006bee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bf0:	e0a7      	b.n	8006d42 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	d100      	bne.n	8006bfa <UART_WaitOnFlagUntilTimeout+0x1a>
 8006bf8:	e0a3      	b.n	8006d42 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bfa:	f7fc fe6b 	bl	80038d4 <HAL_GetTick>
 8006bfe:	0002      	movs	r2, r0
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d302      	bcc.n	8006c10 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d13f      	bne.n	8006c90 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c10:	f3ef 8310 	mrs	r3, PRIMASK
 8006c14:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006c18:	647b      	str	r3, [r7, #68]	; 0x44
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c20:	f383 8810 	msr	PRIMASK, r3
}
 8006c24:	46c0      	nop			; (mov r8, r8)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	494e      	ldr	r1, [pc, #312]	; (8006d6c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006c32:	400a      	ands	r2, r1
 8006c34:	601a      	str	r2, [r3, #0]
 8006c36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c38:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3c:	f383 8810 	msr	PRIMASK, r3
}
 8006c40:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c42:	f3ef 8310 	mrs	r3, PRIMASK
 8006c46:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c4a:	643b      	str	r3, [r7, #64]	; 0x40
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c52:	f383 8810 	msr	PRIMASK, r3
}
 8006c56:	46c0      	nop			; (mov r8, r8)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	689a      	ldr	r2, [r3, #8]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2101      	movs	r1, #1
 8006c64:	438a      	bics	r2, r1
 8006c66:	609a      	str	r2, [r3, #8]
 8006c68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c6e:	f383 8810 	msr	PRIMASK, r3
}
 8006c72:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2288      	movs	r2, #136	; 0x88
 8006c78:	2120      	movs	r1, #32
 8006c7a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	228c      	movs	r2, #140	; 0x8c
 8006c80:	2120      	movs	r1, #32
 8006c82:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2284      	movs	r2, #132	; 0x84
 8006c88:	2100      	movs	r1, #0
 8006c8a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e069      	b.n	8006d64 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2204      	movs	r2, #4
 8006c98:	4013      	ands	r3, r2
 8006c9a:	d052      	beq.n	8006d42 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	69da      	ldr	r2, [r3, #28]
 8006ca2:	2380      	movs	r3, #128	; 0x80
 8006ca4:	011b      	lsls	r3, r3, #4
 8006ca6:	401a      	ands	r2, r3
 8006ca8:	2380      	movs	r3, #128	; 0x80
 8006caa:	011b      	lsls	r3, r3, #4
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d148      	bne.n	8006d42 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2280      	movs	r2, #128	; 0x80
 8006cb6:	0112      	lsls	r2, r2, #4
 8006cb8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cba:	f3ef 8310 	mrs	r3, PRIMASK
 8006cbe:	613b      	str	r3, [r7, #16]
  return(result);
 8006cc0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	f383 8810 	msr	PRIMASK, r3
}
 8006cce:	46c0      	nop			; (mov r8, r8)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4924      	ldr	r1, [pc, #144]	; (8006d6c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006cdc:	400a      	ands	r2, r1
 8006cde:	601a      	str	r2, [r3, #0]
 8006ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ce2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	f383 8810 	msr	PRIMASK, r3
}
 8006cea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cec:	f3ef 8310 	mrs	r3, PRIMASK
 8006cf0:	61fb      	str	r3, [r7, #28]
  return(result);
 8006cf2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cf4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cfa:	6a3b      	ldr	r3, [r7, #32]
 8006cfc:	f383 8810 	msr	PRIMASK, r3
}
 8006d00:	46c0      	nop			; (mov r8, r8)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	689a      	ldr	r2, [r3, #8]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2101      	movs	r1, #1
 8006d0e:	438a      	bics	r2, r1
 8006d10:	609a      	str	r2, [r3, #8]
 8006d12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d14:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d18:	f383 8810 	msr	PRIMASK, r3
}
 8006d1c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2288      	movs	r2, #136	; 0x88
 8006d22:	2120      	movs	r1, #32
 8006d24:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	228c      	movs	r2, #140	; 0x8c
 8006d2a:	2120      	movs	r1, #32
 8006d2c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2290      	movs	r2, #144	; 0x90
 8006d32:	2120      	movs	r1, #32
 8006d34:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2284      	movs	r2, #132	; 0x84
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e010      	b.n	8006d64 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	69db      	ldr	r3, [r3, #28]
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	68ba      	ldr	r2, [r7, #8]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	425a      	negs	r2, r3
 8006d52:	4153      	adcs	r3, r2
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	001a      	movs	r2, r3
 8006d58:	1dfb      	adds	r3, r7, #7
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d100      	bne.n	8006d62 <UART_WaitOnFlagUntilTimeout+0x182>
 8006d60:	e747      	b.n	8006bf2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	0018      	movs	r0, r3
 8006d66:	46bd      	mov	sp, r7
 8006d68:	b014      	add	sp, #80	; 0x50
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	fffffe5f 	.word	0xfffffe5f

08006d70 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2284      	movs	r2, #132	; 0x84
 8006d7c:	5c9b      	ldrb	r3, [r3, r2]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d101      	bne.n	8006d86 <HAL_UARTEx_DisableFifoMode+0x16>
 8006d82:	2302      	movs	r3, #2
 8006d84:	e027      	b.n	8006dd6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2284      	movs	r2, #132	; 0x84
 8006d8a:	2101      	movs	r1, #1
 8006d8c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2288      	movs	r2, #136	; 0x88
 8006d92:	2124      	movs	r1, #36	; 0x24
 8006d94:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2101      	movs	r1, #1
 8006daa:	438a      	bics	r2, r1
 8006dac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	4a0b      	ldr	r2, [pc, #44]	; (8006de0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006db2:	4013      	ands	r3, r2
 8006db4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2288      	movs	r2, #136	; 0x88
 8006dc8:	2120      	movs	r1, #32
 8006dca:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2284      	movs	r2, #132	; 0x84
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	0018      	movs	r0, r3
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	b004      	add	sp, #16
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	46c0      	nop			; (mov r8, r8)
 8006de0:	dfffffff 	.word	0xdfffffff

08006de4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2284      	movs	r2, #132	; 0x84
 8006df2:	5c9b      	ldrb	r3, [r3, r2]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d101      	bne.n	8006dfc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006df8:	2302      	movs	r3, #2
 8006dfa:	e02e      	b.n	8006e5a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2284      	movs	r2, #132	; 0x84
 8006e00:	2101      	movs	r1, #1
 8006e02:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2288      	movs	r2, #136	; 0x88
 8006e08:	2124      	movs	r1, #36	; 0x24
 8006e0a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2101      	movs	r1, #1
 8006e20:	438a      	bics	r2, r1
 8006e22:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	00db      	lsls	r3, r3, #3
 8006e2c:	08d9      	lsrs	r1, r3, #3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	683a      	ldr	r2, [r7, #0]
 8006e34:	430a      	orrs	r2, r1
 8006e36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	0018      	movs	r0, r3
 8006e3c:	f000 f854 	bl	8006ee8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2288      	movs	r2, #136	; 0x88
 8006e4c:	2120      	movs	r1, #32
 8006e4e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2284      	movs	r2, #132	; 0x84
 8006e54:	2100      	movs	r1, #0
 8006e56:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	0018      	movs	r0, r3
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	b004      	add	sp, #16
 8006e60:	bd80      	pop	{r7, pc}
	...

08006e64 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2284      	movs	r2, #132	; 0x84
 8006e72:	5c9b      	ldrb	r3, [r3, r2]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d101      	bne.n	8006e7c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006e78:	2302      	movs	r3, #2
 8006e7a:	e02f      	b.n	8006edc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2284      	movs	r2, #132	; 0x84
 8006e80:	2101      	movs	r1, #1
 8006e82:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2288      	movs	r2, #136	; 0x88
 8006e88:	2124      	movs	r1, #36	; 0x24
 8006e8a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2101      	movs	r1, #1
 8006ea0:	438a      	bics	r2, r1
 8006ea2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	4a0e      	ldr	r2, [pc, #56]	; (8006ee4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006eac:	4013      	ands	r3, r2
 8006eae:	0019      	movs	r1, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	683a      	ldr	r2, [r7, #0]
 8006eb6:	430a      	orrs	r2, r1
 8006eb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	0018      	movs	r0, r3
 8006ebe:	f000 f813 	bl	8006ee8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2288      	movs	r2, #136	; 0x88
 8006ece:	2120      	movs	r1, #32
 8006ed0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2284      	movs	r2, #132	; 0x84
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	0018      	movs	r0, r3
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	b004      	add	sp, #16
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	f1ffffff 	.word	0xf1ffffff

08006ee8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d108      	bne.n	8006f0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	226a      	movs	r2, #106	; 0x6a
 8006efc:	2101      	movs	r1, #1
 8006efe:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2268      	movs	r2, #104	; 0x68
 8006f04:	2101      	movs	r1, #1
 8006f06:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006f08:	e043      	b.n	8006f92 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006f0a:	260f      	movs	r6, #15
 8006f0c:	19bb      	adds	r3, r7, r6
 8006f0e:	2208      	movs	r2, #8
 8006f10:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006f12:	200e      	movs	r0, #14
 8006f14:	183b      	adds	r3, r7, r0
 8006f16:	2208      	movs	r2, #8
 8006f18:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	0e5b      	lsrs	r3, r3, #25
 8006f22:	b2da      	uxtb	r2, r3
 8006f24:	240d      	movs	r4, #13
 8006f26:	193b      	adds	r3, r7, r4
 8006f28:	2107      	movs	r1, #7
 8006f2a:	400a      	ands	r2, r1
 8006f2c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	0f5b      	lsrs	r3, r3, #29
 8006f36:	b2da      	uxtb	r2, r3
 8006f38:	250c      	movs	r5, #12
 8006f3a:	197b      	adds	r3, r7, r5
 8006f3c:	2107      	movs	r1, #7
 8006f3e:	400a      	ands	r2, r1
 8006f40:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f42:	183b      	adds	r3, r7, r0
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	197a      	adds	r2, r7, r5
 8006f48:	7812      	ldrb	r2, [r2, #0]
 8006f4a:	4914      	ldr	r1, [pc, #80]	; (8006f9c <UARTEx_SetNbDataToProcess+0xb4>)
 8006f4c:	5c8a      	ldrb	r2, [r1, r2]
 8006f4e:	435a      	muls	r2, r3
 8006f50:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006f52:	197b      	adds	r3, r7, r5
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	4a12      	ldr	r2, [pc, #72]	; (8006fa0 <UARTEx_SetNbDataToProcess+0xb8>)
 8006f58:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f5a:	0019      	movs	r1, r3
 8006f5c:	f7f9 f978 	bl	8000250 <__divsi3>
 8006f60:	0003      	movs	r3, r0
 8006f62:	b299      	uxth	r1, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	226a      	movs	r2, #106	; 0x6a
 8006f68:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f6a:	19bb      	adds	r3, r7, r6
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	193a      	adds	r2, r7, r4
 8006f70:	7812      	ldrb	r2, [r2, #0]
 8006f72:	490a      	ldr	r1, [pc, #40]	; (8006f9c <UARTEx_SetNbDataToProcess+0xb4>)
 8006f74:	5c8a      	ldrb	r2, [r1, r2]
 8006f76:	435a      	muls	r2, r3
 8006f78:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006f7a:	193b      	adds	r3, r7, r4
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	4a08      	ldr	r2, [pc, #32]	; (8006fa0 <UARTEx_SetNbDataToProcess+0xb8>)
 8006f80:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f82:	0019      	movs	r1, r3
 8006f84:	f7f9 f964 	bl	8000250 <__divsi3>
 8006f88:	0003      	movs	r3, r0
 8006f8a:	b299      	uxth	r1, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2268      	movs	r2, #104	; 0x68
 8006f90:	5299      	strh	r1, [r3, r2]
}
 8006f92:	46c0      	nop			; (mov r8, r8)
 8006f94:	46bd      	mov	sp, r7
 8006f96:	b005      	add	sp, #20
 8006f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f9a:	46c0      	nop			; (mov r8, r8)
 8006f9c:	08012b10 	.word	0x08012b10
 8006fa0:	08012b18 	.word	0x08012b18

08006fa4 <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8006fa4:	b5b0      	push	{r4, r5, r7, lr}
 8006fa6:	b0e4      	sub	sp, #400	; 0x190
 8006fa8:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8006faa:	24c8      	movs	r4, #200	; 0xc8
 8006fac:	193b      	adds	r3, r7, r4
 8006fae:	0018      	movs	r0, r3
 8006fb0:	23c6      	movs	r3, #198	; 0xc6
 8006fb2:	001a      	movs	r2, r3
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	f003 fc01 	bl	800a7bc <memset>
    astronode_app_msg_t answer = {0};
 8006fba:	4b13      	ldr	r3, [pc, #76]	; (8007008 <astronode_send_cfg_sr+0x64>)
 8006fbc:	25c8      	movs	r5, #200	; 0xc8
 8006fbe:	006d      	lsls	r5, r5, #1
 8006fc0:	195b      	adds	r3, r3, r5
 8006fc2:	19db      	adds	r3, r3, r7
 8006fc4:	0018      	movs	r0, r3
 8006fc6:	23c6      	movs	r3, #198	; 0xc6
 8006fc8:	001a      	movs	r2, r3
 8006fca:	2100      	movs	r1, #0
 8006fcc:	f003 fbf6 	bl	800a7bc <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 8006fd0:	193b      	adds	r3, r7, r4
 8006fd2:	2210      	movs	r2, #16
 8006fd4:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 8006fd6:	003a      	movs	r2, r7
 8006fd8:	193b      	adds	r3, r7, r4
 8006fda:	0011      	movs	r1, r2
 8006fdc:	0018      	movs	r0, r3
 8006fde:	f001 fa51 	bl	8008484 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 8006fe2:	4b09      	ldr	r3, [pc, #36]	; (8007008 <astronode_send_cfg_sr+0x64>)
 8006fe4:	195b      	adds	r3, r3, r5
 8006fe6:	19db      	adds	r3, r3, r7
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	2b90      	cmp	r3, #144	; 0x90
 8006fec:	d104      	bne.n	8006ff8 <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 8006fee:	4b07      	ldr	r3, [pc, #28]	; (800700c <astronode_send_cfg_sr+0x68>)
 8006ff0:	0018      	movs	r0, r3
 8006ff2:	f7fb ffc1 	bl	8002f78 <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8006ff6:	e003      	b.n	8007000 <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8006ff8:	4b05      	ldr	r3, [pc, #20]	; (8007010 <astronode_send_cfg_sr+0x6c>)
 8006ffa:	0018      	movs	r0, r3
 8006ffc:	f7fb ffbc 	bl	8002f78 <send_debug_logs>
}
 8007000:	46c0      	nop			; (mov r8, r8)
 8007002:	46bd      	mov	sp, r7
 8007004:	b064      	add	sp, #400	; 0x190
 8007006:	bdb0      	pop	{r4, r5, r7, pc}
 8007008:	fffffe70 	.word	0xfffffe70
 800700c:	0801182c 	.word	0x0801182c
 8007010:	08011860 	.word	0x08011860

08007014 <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 8007014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007016:	b0e7      	sub	sp, #412	; 0x19c
 8007018:	af00      	add	r7, sp, #0
 800701a:	0005      	movs	r5, r0
 800701c:	000c      	movs	r4, r1
 800701e:	0010      	movs	r0, r2
 8007020:	0019      	movs	r1, r3
 8007022:	4b4a      	ldr	r3, [pc, #296]	; (800714c <astronode_send_cfg_wr+0x138>)
 8007024:	26cc      	movs	r6, #204	; 0xcc
 8007026:	0076      	lsls	r6, r6, #1
 8007028:	199b      	adds	r3, r3, r6
 800702a:	19db      	adds	r3, r3, r7
 800702c:	1c2a      	adds	r2, r5, #0
 800702e:	701a      	strb	r2, [r3, #0]
 8007030:	4b47      	ldr	r3, [pc, #284]	; (8007150 <astronode_send_cfg_wr+0x13c>)
 8007032:	0035      	movs	r5, r6
 8007034:	195b      	adds	r3, r3, r5
 8007036:	19db      	adds	r3, r3, r7
 8007038:	1c22      	adds	r2, r4, #0
 800703a:	701a      	strb	r2, [r3, #0]
 800703c:	4b45      	ldr	r3, [pc, #276]	; (8007154 <astronode_send_cfg_wr+0x140>)
 800703e:	002c      	movs	r4, r5
 8007040:	191b      	adds	r3, r3, r4
 8007042:	19db      	adds	r3, r3, r7
 8007044:	1c02      	adds	r2, r0, #0
 8007046:	701a      	strb	r2, [r3, #0]
 8007048:	4b43      	ldr	r3, [pc, #268]	; (8007158 <astronode_send_cfg_wr+0x144>)
 800704a:	191b      	adds	r3, r3, r4
 800704c:	19db      	adds	r3, r3, r7
 800704e:	1c0a      	adds	r2, r1, #0
 8007050:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8007052:	25d0      	movs	r5, #208	; 0xd0
 8007054:	197b      	adds	r3, r7, r5
 8007056:	0018      	movs	r0, r3
 8007058:	23c6      	movs	r3, #198	; 0xc6
 800705a:	001a      	movs	r2, r3
 800705c:	2100      	movs	r1, #0
 800705e:	f003 fbad 	bl	800a7bc <memset>
    astronode_app_msg_t answer = {0};
 8007062:	4b3e      	ldr	r3, [pc, #248]	; (800715c <astronode_send_cfg_wr+0x148>)
 8007064:	191b      	adds	r3, r3, r4
 8007066:	19db      	adds	r3, r3, r7
 8007068:	0018      	movs	r0, r3
 800706a:	23c6      	movs	r3, #198	; 0xc6
 800706c:	001a      	movs	r2, r3
 800706e:	2100      	movs	r1, #0
 8007070:	f003 fba4 	bl	800a7bc <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8007074:	0029      	movs	r1, r5
 8007076:	187b      	adds	r3, r7, r1
 8007078:	2205      	movs	r2, #5
 800707a:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 800707c:	4b33      	ldr	r3, [pc, #204]	; (800714c <astronode_send_cfg_wr+0x138>)
 800707e:	191b      	adds	r3, r3, r4
 8007080:	19db      	adds	r3, r3, r7
 8007082:	2200      	movs	r2, #0
 8007084:	569a      	ldrsb	r2, [r3, r2]
 8007086:	4b32      	ldr	r3, [pc, #200]	; (8007150 <astronode_send_cfg_wr+0x13c>)
 8007088:	191b      	adds	r3, r3, r4
 800708a:	19db      	adds	r3, r3, r7
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	005b      	lsls	r3, r3, #1
 8007090:	b25b      	sxtb	r3, r3
 8007092:	4313      	orrs	r3, r2
 8007094:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 8007096:	4b2f      	ldr	r3, [pc, #188]	; (8007154 <astronode_send_cfg_wr+0x140>)
 8007098:	191b      	adds	r3, r3, r4
 800709a:	19db      	adds	r3, r3, r7
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	b25b      	sxtb	r3, r3
 80070a2:	4313      	orrs	r3, r2
 80070a4:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 80070a6:	4b2c      	ldr	r3, [pc, #176]	; (8007158 <astronode_send_cfg_wr+0x144>)
 80070a8:	191b      	adds	r3, r3, r4
 80070aa:	19db      	adds	r3, r3, r7
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	00db      	lsls	r3, r3, #3
 80070b0:	b25b      	sxtb	r3, r3
 80070b2:	4313      	orrs	r3, r2
 80070b4:	b25b      	sxtb	r3, r3
 80070b6:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 80070b8:	187b      	adds	r3, r7, r1
 80070ba:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 80070bc:	23d4      	movs	r3, #212	; 0xd4
 80070be:	005b      	lsls	r3, r3, #1
 80070c0:	2508      	movs	r5, #8
 80070c2:	195b      	adds	r3, r3, r5
 80070c4:	19db      	adds	r3, r3, r7
 80070c6:	2200      	movs	r2, #0
 80070c8:	569a      	ldrsb	r2, [r3, r2]
 80070ca:	23d6      	movs	r3, #214	; 0xd6
 80070cc:	005b      	lsls	r3, r3, #1
 80070ce:	195b      	adds	r3, r3, r5
 80070d0:	19db      	adds	r3, r3, r7
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	005b      	lsls	r3, r3, #1
 80070d6:	b25b      	sxtb	r3, r3
 80070d8:	4313      	orrs	r3, r2
 80070da:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 80070dc:	23d8      	movs	r3, #216	; 0xd8
 80070de:	005b      	lsls	r3, r3, #1
 80070e0:	195b      	adds	r3, r3, r5
 80070e2:	19db      	adds	r3, r3, r7
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	b25b      	sxtb	r3, r3
 80070ea:	4313      	orrs	r3, r2
 80070ec:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 80070ee:	23da      	movs	r3, #218	; 0xda
 80070f0:	005b      	lsls	r3, r3, #1
 80070f2:	195b      	adds	r3, r3, r5
 80070f4:	19db      	adds	r3, r3, r7
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	00db      	lsls	r3, r3, #3
 80070fa:	b25b      	sxtb	r3, r3
 80070fc:	4313      	orrs	r3, r2
 80070fe:	b25b      	sxtb	r3, r3
 8007100:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 8007102:	187b      	adds	r3, r7, r1
 8007104:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 8007106:	0008      	movs	r0, r1
 8007108:	187b      	adds	r3, r7, r1
 800710a:	22c4      	movs	r2, #196	; 0xc4
 800710c:	2103      	movs	r1, #3
 800710e:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007110:	002b      	movs	r3, r5
 8007112:	18fa      	adds	r2, r7, r3
 8007114:	183b      	adds	r3, r7, r0
 8007116:	0011      	movs	r1, r2
 8007118:	0018      	movs	r0, r3
 800711a:	f001 f9b3 	bl	8008484 <astronode_transport_send_receive>
 800711e:	0003      	movs	r3, r0
 8007120:	2b01      	cmp	r3, #1
 8007122:	d10e      	bne.n	8007142 <astronode_send_cfg_wr+0x12e>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 8007124:	4b0d      	ldr	r3, [pc, #52]	; (800715c <astronode_send_cfg_wr+0x148>)
 8007126:	191b      	adds	r3, r3, r4
 8007128:	19db      	adds	r3, r3, r7
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	2b85      	cmp	r3, #133	; 0x85
 800712e:	d104      	bne.n	800713a <astronode_send_cfg_wr+0x126>
        {
            send_debug_logs("Astronode configuration successfully set.");
 8007130:	4b0b      	ldr	r3, [pc, #44]	; (8007160 <astronode_send_cfg_wr+0x14c>)
 8007132:	0018      	movs	r0, r3
 8007134:	f7fb ff20 	bl	8002f78 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
        }
    }
}
 8007138:	e003      	b.n	8007142 <astronode_send_cfg_wr+0x12e>
            send_debug_logs("Failed to set the Astronode configuration.");
 800713a:	4b0a      	ldr	r3, [pc, #40]	; (8007164 <astronode_send_cfg_wr+0x150>)
 800713c:	0018      	movs	r0, r3
 800713e:	f7fb ff1b 	bl	8002f78 <send_debug_logs>
}
 8007142:	46c0      	nop			; (mov r8, r8)
 8007144:	46bd      	mov	sp, r7
 8007146:	b067      	add	sp, #412	; 0x19c
 8007148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800714a:	46c0      	nop			; (mov r8, r8)
 800714c:	fffffe6f 	.word	0xfffffe6f
 8007150:	fffffe6e 	.word	0xfffffe6e
 8007154:	fffffe6d 	.word	0xfffffe6d
 8007158:	fffffe6c 	.word	0xfffffe6c
 800715c:	fffffe70 	.word	0xfffffe70
 8007160:	08011894 	.word	0x08011894
 8007164:	080118c0 	.word	0x080118c0

08007168 <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 8007168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800716a:	b0ed      	sub	sp, #436	; 0x1b4
 800716c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800716e:	21c8      	movs	r1, #200	; 0xc8
 8007170:	2318      	movs	r3, #24
 8007172:	18cb      	adds	r3, r1, r3
 8007174:	19db      	adds	r3, r3, r7
 8007176:	0018      	movs	r0, r3
 8007178:	23c6      	movs	r3, #198	; 0xc6
 800717a:	001a      	movs	r2, r3
 800717c:	2100      	movs	r1, #0
 800717e:	f003 fb1d 	bl	800a7bc <memset>
    astronode_app_msg_t answer = {0};
 8007182:	4b4a      	ldr	r3, [pc, #296]	; (80072ac <astronode_send_mgi_rr+0x144>)
 8007184:	26cc      	movs	r6, #204	; 0xcc
 8007186:	0076      	lsls	r6, r6, #1
 8007188:	199b      	adds	r3, r3, r6
 800718a:	2218      	movs	r2, #24
 800718c:	4694      	mov	ip, r2
 800718e:	44bc      	add	ip, r7
 8007190:	4463      	add	r3, ip
 8007192:	0018      	movs	r0, r3
 8007194:	23c6      	movs	r3, #198	; 0xc6
 8007196:	001a      	movs	r2, r3
 8007198:	2100      	movs	r1, #0
 800719a:	f003 fb0f 	bl	800a7bc <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 800719e:	21c8      	movs	r1, #200	; 0xc8
 80071a0:	2318      	movs	r3, #24
 80071a2:	18cb      	adds	r3, r1, r3
 80071a4:	19db      	adds	r3, r3, r7
 80071a6:	2219      	movs	r2, #25
 80071a8:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80071aa:	2318      	movs	r3, #24
 80071ac:	18fa      	adds	r2, r7, r3
 80071ae:	2318      	movs	r3, #24
 80071b0:	18cb      	adds	r3, r1, r3
 80071b2:	19db      	adds	r3, r3, r7
 80071b4:	0011      	movs	r1, r2
 80071b6:	0018      	movs	r0, r3
 80071b8:	f001 f964 	bl	8008484 <astronode_transport_send_receive>
 80071bc:	0003      	movs	r3, r0
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d16f      	bne.n	80072a2 <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 80071c2:	4b3a      	ldr	r3, [pc, #232]	; (80072ac <astronode_send_mgi_rr+0x144>)
 80071c4:	0032      	movs	r2, r6
 80071c6:	189b      	adds	r3, r3, r2
 80071c8:	2118      	movs	r1, #24
 80071ca:	468c      	mov	ip, r1
 80071cc:	44bc      	add	ip, r7
 80071ce:	4463      	add	r3, ip
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	2b99      	cmp	r3, #153	; 0x99
 80071d4:	d161      	bne.n	800729a <astronode_send_mgi_rr+0x132>
        {
 80071d6:	466b      	mov	r3, sp
 80071d8:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 80071da:	4b34      	ldr	r3, [pc, #208]	; (80072ac <astronode_send_mgi_rr+0x144>)
 80071dc:	189b      	adds	r3, r3, r2
 80071de:	2218      	movs	r2, #24
 80071e0:	4694      	mov	ip, r2
 80071e2:	44bc      	add	ip, r7
 80071e4:	4463      	add	r3, ip
 80071e6:	22c4      	movs	r2, #196	; 0xc4
 80071e8:	5a9b      	ldrh	r3, [r3, r2]
 80071ea:	001a      	movs	r2, r3
 80071ec:	3a01      	subs	r2, #1
 80071ee:	21ca      	movs	r1, #202	; 0xca
 80071f0:	0049      	lsls	r1, r1, #1
 80071f2:	2018      	movs	r0, #24
 80071f4:	1809      	adds	r1, r1, r0
 80071f6:	19c9      	adds	r1, r1, r7
 80071f8:	600a      	str	r2, [r1, #0]
 80071fa:	001c      	movs	r4, r3
 80071fc:	2200      	movs	r2, #0
 80071fe:	0015      	movs	r5, r2
 8007200:	0020      	movs	r0, r4
 8007202:	0029      	movs	r1, r5
 8007204:	0004      	movs	r4, r0
 8007206:	0f62      	lsrs	r2, r4, #29
 8007208:	000c      	movs	r4, r1
 800720a:	00e4      	lsls	r4, r4, #3
 800720c:	617c      	str	r4, [r7, #20]
 800720e:	697c      	ldr	r4, [r7, #20]
 8007210:	4314      	orrs	r4, r2
 8007212:	617c      	str	r4, [r7, #20]
 8007214:	0001      	movs	r1, r0
 8007216:	00c9      	lsls	r1, r1, #3
 8007218:	6139      	str	r1, [r7, #16]
 800721a:	603b      	str	r3, [r7, #0]
 800721c:	2200      	movs	r2, #0
 800721e:	607a      	str	r2, [r7, #4]
 8007220:	6838      	ldr	r0, [r7, #0]
 8007222:	6879      	ldr	r1, [r7, #4]
 8007224:	0004      	movs	r4, r0
 8007226:	0f62      	lsrs	r2, r4, #29
 8007228:	000c      	movs	r4, r1
 800722a:	00e4      	lsls	r4, r4, #3
 800722c:	60fc      	str	r4, [r7, #12]
 800722e:	68fc      	ldr	r4, [r7, #12]
 8007230:	4314      	orrs	r4, r2
 8007232:	60fc      	str	r4, [r7, #12]
 8007234:	0001      	movs	r1, r0
 8007236:	00ca      	lsls	r2, r1, #3
 8007238:	60ba      	str	r2, [r7, #8]
 800723a:	3307      	adds	r3, #7
 800723c:	08db      	lsrs	r3, r3, #3
 800723e:	00db      	lsls	r3, r3, #3
 8007240:	4669      	mov	r1, sp
 8007242:	1acb      	subs	r3, r1, r3
 8007244:	469d      	mov	sp, r3
 8007246:	466b      	mov	r3, sp
 8007248:	3300      	adds	r3, #0
 800724a:	24c8      	movs	r4, #200	; 0xc8
 800724c:	0064      	lsls	r4, r4, #1
 800724e:	2218      	movs	r2, #24
 8007250:	18a2      	adds	r2, r4, r2
 8007252:	19d1      	adds	r1, r2, r7
 8007254:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 8007256:	4b16      	ldr	r3, [pc, #88]	; (80072b0 <astronode_send_mgi_rr+0x148>)
 8007258:	0018      	movs	r0, r3
 800725a:	f7fb fe8d 	bl	8002f78 <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 800725e:	4b13      	ldr	r3, [pc, #76]	; (80072ac <astronode_send_mgi_rr+0x144>)
 8007260:	22cc      	movs	r2, #204	; 0xcc
 8007262:	0052      	lsls	r2, r2, #1
 8007264:	189b      	adds	r3, r3, r2
 8007266:	2218      	movs	r2, #24
 8007268:	4694      	mov	ip, r2
 800726a:	44bc      	add	ip, r7
 800726c:	4463      	add	r3, ip
 800726e:	22c4      	movs	r2, #196	; 0xc4
 8007270:	5a9b      	ldrh	r3, [r3, r2]
 8007272:	0019      	movs	r1, r3
 8007274:	2318      	movs	r3, #24
 8007276:	18fb      	adds	r3, r7, r3
 8007278:	3301      	adds	r3, #1
 800727a:	4a0e      	ldr	r2, [pc, #56]	; (80072b4 <astronode_send_mgi_rr+0x14c>)
 800727c:	2018      	movs	r0, #24
 800727e:	1820      	adds	r0, r4, r0
 8007280:	19c0      	adds	r0, r0, r7
 8007282:	6800      	ldr	r0, [r0, #0]
 8007284:	f003 f9d0 	bl	800a628 <snprintf>
            send_debug_logs(guid);
 8007288:	2318      	movs	r3, #24
 800728a:	18e3      	adds	r3, r4, r3
 800728c:	19db      	adds	r3, r3, r7
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	0018      	movs	r0, r3
 8007292:	f7fb fe71 	bl	8002f78 <send_debug_logs>
 8007296:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 8007298:	e003      	b.n	80072a2 <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 800729a:	4b07      	ldr	r3, [pc, #28]	; (80072b8 <astronode_send_mgi_rr+0x150>)
 800729c:	0018      	movs	r0, r3
 800729e:	f7fb fe6b 	bl	8002f78 <send_debug_logs>
}
 80072a2:	46c0      	nop			; (mov r8, r8)
 80072a4:	46bd      	mov	sp, r7
 80072a6:	b06d      	add	sp, #436	; 0x1b4
 80072a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072aa:	46c0      	nop			; (mov r8, r8)
 80072ac:	fffffe68 	.word	0xfffffe68
 80072b0:	0801194c 	.word	0x0801194c
 80072b4:	0801195c 	.word	0x0801195c
 80072b8:	08011960 	.word	0x08011960

080072bc <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 80072bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072be:	b0ed      	sub	sp, #436	; 0x1b4
 80072c0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80072c2:	21c8      	movs	r1, #200	; 0xc8
 80072c4:	2318      	movs	r3, #24
 80072c6:	18cb      	adds	r3, r1, r3
 80072c8:	19db      	adds	r3, r3, r7
 80072ca:	0018      	movs	r0, r3
 80072cc:	23c6      	movs	r3, #198	; 0xc6
 80072ce:	001a      	movs	r2, r3
 80072d0:	2100      	movs	r1, #0
 80072d2:	f003 fa73 	bl	800a7bc <memset>
    astronode_app_msg_t answer = {0};
 80072d6:	4b4a      	ldr	r3, [pc, #296]	; (8007400 <astronode_send_msn_rr+0x144>)
 80072d8:	26cc      	movs	r6, #204	; 0xcc
 80072da:	0076      	lsls	r6, r6, #1
 80072dc:	199b      	adds	r3, r3, r6
 80072de:	2218      	movs	r2, #24
 80072e0:	4694      	mov	ip, r2
 80072e2:	44bc      	add	ip, r7
 80072e4:	4463      	add	r3, ip
 80072e6:	0018      	movs	r0, r3
 80072e8:	23c6      	movs	r3, #198	; 0xc6
 80072ea:	001a      	movs	r2, r3
 80072ec:	2100      	movs	r1, #0
 80072ee:	f003 fa65 	bl	800a7bc <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 80072f2:	21c8      	movs	r1, #200	; 0xc8
 80072f4:	2318      	movs	r3, #24
 80072f6:	18cb      	adds	r3, r1, r3
 80072f8:	19db      	adds	r3, r3, r7
 80072fa:	221a      	movs	r2, #26
 80072fc:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80072fe:	2318      	movs	r3, #24
 8007300:	18fa      	adds	r2, r7, r3
 8007302:	2318      	movs	r3, #24
 8007304:	18cb      	adds	r3, r1, r3
 8007306:	19db      	adds	r3, r3, r7
 8007308:	0011      	movs	r1, r2
 800730a:	0018      	movs	r0, r3
 800730c:	f001 f8ba 	bl	8008484 <astronode_transport_send_receive>
 8007310:	0003      	movs	r3, r0
 8007312:	2b01      	cmp	r3, #1
 8007314:	d16f      	bne.n	80073f6 <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 8007316:	4b3a      	ldr	r3, [pc, #232]	; (8007400 <astronode_send_msn_rr+0x144>)
 8007318:	0032      	movs	r2, r6
 800731a:	189b      	adds	r3, r3, r2
 800731c:	2118      	movs	r1, #24
 800731e:	468c      	mov	ip, r1
 8007320:	44bc      	add	ip, r7
 8007322:	4463      	add	r3, ip
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	2b9a      	cmp	r3, #154	; 0x9a
 8007328:	d161      	bne.n	80073ee <astronode_send_msn_rr+0x132>
        {
 800732a:	466b      	mov	r3, sp
 800732c:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 800732e:	4b34      	ldr	r3, [pc, #208]	; (8007400 <astronode_send_msn_rr+0x144>)
 8007330:	189b      	adds	r3, r3, r2
 8007332:	2218      	movs	r2, #24
 8007334:	4694      	mov	ip, r2
 8007336:	44bc      	add	ip, r7
 8007338:	4463      	add	r3, ip
 800733a:	22c4      	movs	r2, #196	; 0xc4
 800733c:	5a9b      	ldrh	r3, [r3, r2]
 800733e:	001a      	movs	r2, r3
 8007340:	3a01      	subs	r2, #1
 8007342:	21ca      	movs	r1, #202	; 0xca
 8007344:	0049      	lsls	r1, r1, #1
 8007346:	2018      	movs	r0, #24
 8007348:	1809      	adds	r1, r1, r0
 800734a:	19c9      	adds	r1, r1, r7
 800734c:	600a      	str	r2, [r1, #0]
 800734e:	001c      	movs	r4, r3
 8007350:	2200      	movs	r2, #0
 8007352:	0015      	movs	r5, r2
 8007354:	0020      	movs	r0, r4
 8007356:	0029      	movs	r1, r5
 8007358:	0004      	movs	r4, r0
 800735a:	0f62      	lsrs	r2, r4, #29
 800735c:	000c      	movs	r4, r1
 800735e:	00e4      	lsls	r4, r4, #3
 8007360:	617c      	str	r4, [r7, #20]
 8007362:	697c      	ldr	r4, [r7, #20]
 8007364:	4314      	orrs	r4, r2
 8007366:	617c      	str	r4, [r7, #20]
 8007368:	0001      	movs	r1, r0
 800736a:	00c9      	lsls	r1, r1, #3
 800736c:	6139      	str	r1, [r7, #16]
 800736e:	603b      	str	r3, [r7, #0]
 8007370:	2200      	movs	r2, #0
 8007372:	607a      	str	r2, [r7, #4]
 8007374:	6838      	ldr	r0, [r7, #0]
 8007376:	6879      	ldr	r1, [r7, #4]
 8007378:	0004      	movs	r4, r0
 800737a:	0f62      	lsrs	r2, r4, #29
 800737c:	000c      	movs	r4, r1
 800737e:	00e4      	lsls	r4, r4, #3
 8007380:	60fc      	str	r4, [r7, #12]
 8007382:	68fc      	ldr	r4, [r7, #12]
 8007384:	4314      	orrs	r4, r2
 8007386:	60fc      	str	r4, [r7, #12]
 8007388:	0001      	movs	r1, r0
 800738a:	00ca      	lsls	r2, r1, #3
 800738c:	60ba      	str	r2, [r7, #8]
 800738e:	3307      	adds	r3, #7
 8007390:	08db      	lsrs	r3, r3, #3
 8007392:	00db      	lsls	r3, r3, #3
 8007394:	4669      	mov	r1, sp
 8007396:	1acb      	subs	r3, r1, r3
 8007398:	469d      	mov	sp, r3
 800739a:	466b      	mov	r3, sp
 800739c:	3300      	adds	r3, #0
 800739e:	24c8      	movs	r4, #200	; 0xc8
 80073a0:	0064      	lsls	r4, r4, #1
 80073a2:	2218      	movs	r2, #24
 80073a4:	18a2      	adds	r2, r4, r2
 80073a6:	19d1      	adds	r1, r2, r7
 80073a8:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 80073aa:	4b16      	ldr	r3, [pc, #88]	; (8007404 <astronode_send_msn_rr+0x148>)
 80073ac:	0018      	movs	r0, r3
 80073ae:	f7fb fde3 	bl	8002f78 <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 80073b2:	4b13      	ldr	r3, [pc, #76]	; (8007400 <astronode_send_msn_rr+0x144>)
 80073b4:	22cc      	movs	r2, #204	; 0xcc
 80073b6:	0052      	lsls	r2, r2, #1
 80073b8:	189b      	adds	r3, r3, r2
 80073ba:	2218      	movs	r2, #24
 80073bc:	4694      	mov	ip, r2
 80073be:	44bc      	add	ip, r7
 80073c0:	4463      	add	r3, ip
 80073c2:	22c4      	movs	r2, #196	; 0xc4
 80073c4:	5a9b      	ldrh	r3, [r3, r2]
 80073c6:	0019      	movs	r1, r3
 80073c8:	2318      	movs	r3, #24
 80073ca:	18fb      	adds	r3, r7, r3
 80073cc:	3301      	adds	r3, #1
 80073ce:	4a0e      	ldr	r2, [pc, #56]	; (8007408 <astronode_send_msn_rr+0x14c>)
 80073d0:	2018      	movs	r0, #24
 80073d2:	1820      	adds	r0, r4, r0
 80073d4:	19c0      	adds	r0, r0, r7
 80073d6:	6800      	ldr	r0, [r0, #0]
 80073d8:	f003 f926 	bl	800a628 <snprintf>
            send_debug_logs(serial_number);
 80073dc:	2318      	movs	r3, #24
 80073de:	18e3      	adds	r3, r4, r3
 80073e0:	19db      	adds	r3, r3, r7
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	0018      	movs	r0, r3
 80073e6:	f7fb fdc7 	bl	8002f78 <send_debug_logs>
 80073ea:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 80073ec:	e003      	b.n	80073f6 <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 80073ee:	4b07      	ldr	r3, [pc, #28]	; (800740c <astronode_send_msn_rr+0x150>)
 80073f0:	0018      	movs	r0, r3
 80073f2:	f7fb fdc1 	bl	8002f78 <send_debug_logs>
}
 80073f6:	46c0      	nop			; (mov r8, r8)
 80073f8:	46bd      	mov	sp, r7
 80073fa:	b06d      	add	sp, #436	; 0x1b4
 80073fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073fe:	46c0      	nop			; (mov r8, r8)
 8007400:	fffffe68 	.word	0xfffffe68
 8007404:	0801197c 	.word	0x0801197c
 8007408:	0801195c 	.word	0x0801195c
 800740c:	08011998 	.word	0x08011998

08007410 <astronode_send_nco_rr>:

void astronode_send_nco_rr(void)
{
 8007410:	b5b0      	push	{r4, r5, r7, lr}
 8007412:	b0fa      	sub	sp, #488	; 0x1e8
 8007414:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007416:	258e      	movs	r5, #142	; 0x8e
 8007418:	006d      	lsls	r5, r5, #1
 800741a:	197b      	adds	r3, r7, r5
 800741c:	0018      	movs	r0, r3
 800741e:	23c6      	movs	r3, #198	; 0xc6
 8007420:	001a      	movs	r2, r3
 8007422:	2100      	movs	r1, #0
 8007424:	f003 f9ca 	bl	800a7bc <memset>
    astronode_app_msg_t answer = {0};
 8007428:	4b26      	ldr	r3, [pc, #152]	; (80074c4 <astronode_send_nco_rr+0xb4>)
 800742a:	24f4      	movs	r4, #244	; 0xf4
 800742c:	0064      	lsls	r4, r4, #1
 800742e:	191b      	adds	r3, r3, r4
 8007430:	19db      	adds	r3, r3, r7
 8007432:	0018      	movs	r0, r3
 8007434:	23c6      	movs	r3, #198	; 0xc6
 8007436:	001a      	movs	r2, r3
 8007438:	2100      	movs	r1, #0
 800743a:	f003 f9bf 	bl	800a7bc <memset>

    request.op_code = ASTRONODE_OP_CODE_NCO_RR;
 800743e:	197b      	adds	r3, r7, r5
 8007440:	2218      	movs	r2, #24
 8007442:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007444:	2354      	movs	r3, #84	; 0x54
 8007446:	18fa      	adds	r2, r7, r3
 8007448:	197b      	adds	r3, r7, r5
 800744a:	0011      	movs	r1, r2
 800744c:	0018      	movs	r0, r3
 800744e:	f001 f819 	bl	8008484 <astronode_transport_send_receive>
 8007452:	0003      	movs	r3, r0
 8007454:	2b01      	cmp	r3, #1
 8007456:	d131      	bne.n	80074bc <astronode_send_nco_rr+0xac>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_NCO_RA)
 8007458:	4b1a      	ldr	r3, [pc, #104]	; (80074c4 <astronode_send_nco_rr+0xb4>)
 800745a:	0021      	movs	r1, r4
 800745c:	185b      	adds	r3, r3, r1
 800745e:	19db      	adds	r3, r3, r7
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	2b98      	cmp	r3, #152	; 0x98
 8007464:	d126      	bne.n	80074b4 <astronode_send_nco_rr+0xa4>
        {
            uint32_t time_to_next_pass = answer.p_payload[0]
 8007466:	4b17      	ldr	r3, [pc, #92]	; (80074c4 <astronode_send_nco_rr+0xb4>)
 8007468:	185b      	adds	r3, r3, r1
 800746a:	19db      	adds	r3, r3, r7
 800746c:	785b      	ldrb	r3, [r3, #1]
 800746e:	001a      	movs	r2, r3
                                        + (answer.p_payload[1] << 8)
 8007470:	4b14      	ldr	r3, [pc, #80]	; (80074c4 <astronode_send_nco_rr+0xb4>)
 8007472:	185b      	adds	r3, r3, r1
 8007474:	19db      	adds	r3, r3, r7
 8007476:	789b      	ldrb	r3, [r3, #2]
 8007478:	021b      	lsls	r3, r3, #8
 800747a:	18d2      	adds	r2, r2, r3
                                        + (answer.p_payload[2] << 16)
 800747c:	4b11      	ldr	r3, [pc, #68]	; (80074c4 <astronode_send_nco_rr+0xb4>)
 800747e:	185b      	adds	r3, r3, r1
 8007480:	19db      	adds	r3, r3, r7
 8007482:	78db      	ldrb	r3, [r3, #3]
 8007484:	041b      	lsls	r3, r3, #16
 8007486:	18d2      	adds	r2, r2, r3
                                        + (answer.p_payload[3] << 24);
 8007488:	4b0e      	ldr	r3, [pc, #56]	; (80074c4 <astronode_send_nco_rr+0xb4>)
 800748a:	185b      	adds	r3, r3, r1
 800748c:	19db      	adds	r3, r3, r7
 800748e:	791b      	ldrb	r3, [r3, #4]
 8007490:	061b      	lsls	r3, r3, #24
 8007492:	18d3      	adds	r3, r2, r3
            uint32_t time_to_next_pass = answer.p_payload[0]
 8007494:	22f2      	movs	r2, #242	; 0xf2
 8007496:	0052      	lsls	r2, r2, #1
 8007498:	18b9      	adds	r1, r7, r2
 800749a:	600b      	str	r3, [r1, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Next opportunity for communication with the Astrocast Network: %lds.", time_to_next_pass);
 800749c:	18bb      	adds	r3, r7, r2
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	4909      	ldr	r1, [pc, #36]	; (80074c8 <astronode_send_nco_rr+0xb8>)
 80074a2:	1d3b      	adds	r3, r7, #4
 80074a4:	0018      	movs	r0, r3
 80074a6:	f003 f8f3 	bl	800a690 <sprintf>
            send_debug_logs(str);
 80074aa:	1d3b      	adds	r3, r7, #4
 80074ac:	0018      	movs	r0, r3
 80074ae:	f7fb fd63 	bl	8002f78 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to read satellite constellation ephemeris data.");
        }
    }
}
 80074b2:	e003      	b.n	80074bc <astronode_send_nco_rr+0xac>
            send_debug_logs("Failed to read satellite constellation ephemeris data.");
 80074b4:	4b05      	ldr	r3, [pc, #20]	; (80074cc <astronode_send_nco_rr+0xbc>)
 80074b6:	0018      	movs	r0, r3
 80074b8:	f7fb fd5e 	bl	8002f78 <send_debug_logs>
}
 80074bc:	46c0      	nop			; (mov r8, r8)
 80074be:	46bd      	mov	sp, r7
 80074c0:	b07a      	add	sp, #488	; 0x1e8
 80074c2:	bdb0      	pop	{r4, r5, r7, pc}
 80074c4:	fffffe6c 	.word	0xfffffe6c
 80074c8:	080119c0 	.word	0x080119c0
 80074cc:	08011a08 	.word	0x08011a08

080074d0 <astronode_send_evt_rr>:

void astronode_send_evt_rr(void)
{
 80074d0:	b5b0      	push	{r4, r5, r7, lr}
 80074d2:	b0e4      	sub	sp, #400	; 0x190
 80074d4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80074d6:	24c8      	movs	r4, #200	; 0xc8
 80074d8:	193b      	adds	r3, r7, r4
 80074da:	0018      	movs	r0, r3
 80074dc:	23c6      	movs	r3, #198	; 0xc6
 80074de:	001a      	movs	r2, r3
 80074e0:	2100      	movs	r1, #0
 80074e2:	f003 f96b 	bl	800a7bc <memset>
    astronode_app_msg_t answer = {0};
 80074e6:	4b31      	ldr	r3, [pc, #196]	; (80075ac <astronode_send_evt_rr+0xdc>)
 80074e8:	25c8      	movs	r5, #200	; 0xc8
 80074ea:	006d      	lsls	r5, r5, #1
 80074ec:	195b      	adds	r3, r3, r5
 80074ee:	19db      	adds	r3, r3, r7
 80074f0:	0018      	movs	r0, r3
 80074f2:	23c6      	movs	r3, #198	; 0xc6
 80074f4:	001a      	movs	r2, r3
 80074f6:	2100      	movs	r1, #0
 80074f8:	f003 f960 	bl	800a7bc <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 80074fc:	193b      	adds	r3, r7, r4
 80074fe:	2265      	movs	r2, #101	; 0x65
 8007500:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007502:	003a      	movs	r2, r7
 8007504:	193b      	adds	r3, r7, r4
 8007506:	0011      	movs	r1, r2
 8007508:	0018      	movs	r0, r3
 800750a:	f000 ffbb 	bl	8008484 <astronode_transport_send_receive>
 800750e:	0003      	movs	r3, r0
 8007510:	2b01      	cmp	r3, #1
 8007512:	d147      	bne.n	80075a4 <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 8007514:	4b25      	ldr	r3, [pc, #148]	; (80075ac <astronode_send_evt_rr+0xdc>)
 8007516:	195b      	adds	r3, r3, r5
 8007518:	19db      	adds	r3, r3, r7
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	2be5      	cmp	r3, #229	; 0xe5
 800751e:	d141      	bne.n	80075a4 <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 8007520:	4b22      	ldr	r3, [pc, #136]	; (80075ac <astronode_send_evt_rr+0xdc>)
 8007522:	195b      	adds	r3, r3, r5
 8007524:	19db      	adds	r3, r3, r7
 8007526:	785b      	ldrb	r3, [r3, #1]
 8007528:	001a      	movs	r2, r3
 800752a:	2301      	movs	r3, #1
 800752c:	4013      	ands	r3, r2
 800752e:	d006      	beq.n	800753e <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 8007530:	4b1f      	ldr	r3, [pc, #124]	; (80075b0 <astronode_send_evt_rr+0xe0>)
 8007532:	2201      	movs	r2, #1
 8007534:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 8007536:	4b1f      	ldr	r3, [pc, #124]	; (80075b4 <astronode_send_evt_rr+0xe4>)
 8007538:	0018      	movs	r0, r3
 800753a:	f7fb fd1d 	bl	8002f78 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 800753e:	4b1b      	ldr	r3, [pc, #108]	; (80075ac <astronode_send_evt_rr+0xdc>)
 8007540:	22c8      	movs	r2, #200	; 0xc8
 8007542:	0052      	lsls	r2, r2, #1
 8007544:	189b      	adds	r3, r3, r2
 8007546:	19db      	adds	r3, r3, r7
 8007548:	785b      	ldrb	r3, [r3, #1]
 800754a:	001a      	movs	r2, r3
 800754c:	2302      	movs	r3, #2
 800754e:	4013      	ands	r3, r2
 8007550:	d006      	beq.n	8007560 <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 8007552:	4b19      	ldr	r3, [pc, #100]	; (80075b8 <astronode_send_evt_rr+0xe8>)
 8007554:	2201      	movs	r2, #1
 8007556:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 8007558:	4b18      	ldr	r3, [pc, #96]	; (80075bc <astronode_send_evt_rr+0xec>)
 800755a:	0018      	movs	r0, r3
 800755c:	f7fb fd0c 	bl	8002f78 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 8007560:	4b12      	ldr	r3, [pc, #72]	; (80075ac <astronode_send_evt_rr+0xdc>)
 8007562:	22c8      	movs	r2, #200	; 0xc8
 8007564:	0052      	lsls	r2, r2, #1
 8007566:	189b      	adds	r3, r3, r2
 8007568:	19db      	adds	r3, r3, r7
 800756a:	785b      	ldrb	r3, [r3, #1]
 800756c:	001a      	movs	r2, r3
 800756e:	2304      	movs	r3, #4
 8007570:	4013      	ands	r3, r2
 8007572:	d006      	beq.n	8007582 <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 8007574:	4b12      	ldr	r3, [pc, #72]	; (80075c0 <astronode_send_evt_rr+0xf0>)
 8007576:	2201      	movs	r2, #1
 8007578:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 800757a:	4b12      	ldr	r3, [pc, #72]	; (80075c4 <astronode_send_evt_rr+0xf4>)
 800757c:	0018      	movs	r0, r3
 800757e:	f7fb fcfb 	bl	8002f78 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 8007582:	4b0a      	ldr	r3, [pc, #40]	; (80075ac <astronode_send_evt_rr+0xdc>)
 8007584:	22c8      	movs	r2, #200	; 0xc8
 8007586:	0052      	lsls	r2, r2, #1
 8007588:	189b      	adds	r3, r3, r2
 800758a:	19db      	adds	r3, r3, r7
 800758c:	785b      	ldrb	r3, [r3, #1]
 800758e:	001a      	movs	r2, r3
 8007590:	2308      	movs	r3, #8
 8007592:	4013      	ands	r3, r2
 8007594:	d006      	beq.n	80075a4 <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 8007596:	4b0c      	ldr	r3, [pc, #48]	; (80075c8 <astronode_send_evt_rr+0xf8>)
 8007598:	2201      	movs	r2, #1
 800759a:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 800759c:	4b0b      	ldr	r3, [pc, #44]	; (80075cc <astronode_send_evt_rr+0xfc>)
 800759e:	0018      	movs	r0, r3
 80075a0:	f7fb fcea 	bl	8002f78 <send_debug_logs>
            }

        }
    }
}
 80075a4:	46c0      	nop			; (mov r8, r8)
 80075a6:	46bd      	mov	sp, r7
 80075a8:	b064      	add	sp, #400	; 0x190
 80075aa:	bdb0      	pop	{r4, r5, r7, pc}
 80075ac:	fffffe70 	.word	0xfffffe70
 80075b0:	20000c90 	.word	0x20000c90
 80075b4:	08011a40 	.word	0x08011a40
 80075b8:	20000c91 	.word	0x20000c91
 80075bc:	08011a64 	.word	0x08011a64
 80075c0:	20000c92 	.word	0x20000c92
 80075c4:	08011a7c 	.word	0x08011a7c
 80075c8:	20000c93 	.word	0x20000c93
 80075cc:	08011a90 	.word	0x08011a90

080075d0 <astronode_send_geo_wr>:

void astronode_send_geo_wr(int32_t latitude, int32_t longitude)
{
 80075d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075d2:	b0e7      	sub	sp, #412	; 0x19c
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
    astronode_app_msg_t request = {0};
 80075da:	24d0      	movs	r4, #208	; 0xd0
 80075dc:	193b      	adds	r3, r7, r4
 80075de:	0018      	movs	r0, r3
 80075e0:	23c6      	movs	r3, #198	; 0xc6
 80075e2:	001a      	movs	r2, r3
 80075e4:	2100      	movs	r1, #0
 80075e6:	f003 f8e9 	bl	800a7bc <memset>
    astronode_app_msg_t answer = {0};
 80075ea:	4b56      	ldr	r3, [pc, #344]	; (8007744 <astronode_send_geo_wr+0x174>)
 80075ec:	26cc      	movs	r6, #204	; 0xcc
 80075ee:	0076      	lsls	r6, r6, #1
 80075f0:	199b      	adds	r3, r3, r6
 80075f2:	19db      	adds	r3, r3, r7
 80075f4:	0018      	movs	r0, r3
 80075f6:	23c6      	movs	r3, #198	; 0xc6
 80075f8:	001a      	movs	r2, r3
 80075fa:	2100      	movs	r1, #0
 80075fc:	f003 f8de 	bl	800a7bc <memset>

    request.op_code = ASTRONODE_OP_CODE_GEO_WR;
 8007600:	193b      	adds	r3, r7, r4
 8007602:	2235      	movs	r2, #53	; 0x35
 8007604:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) latitude;
 8007606:	193b      	adds	r3, r7, r4
 8007608:	22c4      	movs	r2, #196	; 0xc4
 800760a:	5a9b      	ldrh	r3, [r3, r2]
 800760c:	1c5a      	adds	r2, r3, #1
 800760e:	b290      	uxth	r0, r2
 8007610:	193a      	adds	r2, r7, r4
 8007612:	21c4      	movs	r1, #196	; 0xc4
 8007614:	5250      	strh	r0, [r2, r1]
 8007616:	0019      	movs	r1, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	b2da      	uxtb	r2, r3
 800761c:	193b      	adds	r3, r7, r4
 800761e:	185b      	adds	r3, r3, r1
 8007620:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 8);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	1218      	asrs	r0, r3, #8
 8007626:	0025      	movs	r5, r4
 8007628:	197b      	adds	r3, r7, r5
 800762a:	22c4      	movs	r2, #196	; 0xc4
 800762c:	5a9b      	ldrh	r3, [r3, r2]
 800762e:	1c5a      	adds	r2, r3, #1
 8007630:	b294      	uxth	r4, r2
 8007632:	197a      	adds	r2, r7, r5
 8007634:	21c4      	movs	r1, #196	; 0xc4
 8007636:	5254      	strh	r4, [r2, r1]
 8007638:	0019      	movs	r1, r3
 800763a:	b2c2      	uxtb	r2, r0
 800763c:	002c      	movs	r4, r5
 800763e:	193b      	adds	r3, r7, r4
 8007640:	185b      	adds	r3, r3, r1
 8007642:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 16);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	1418      	asrs	r0, r3, #16
 8007648:	0025      	movs	r5, r4
 800764a:	197b      	adds	r3, r7, r5
 800764c:	22c4      	movs	r2, #196	; 0xc4
 800764e:	5a9b      	ldrh	r3, [r3, r2]
 8007650:	1c5a      	adds	r2, r3, #1
 8007652:	b294      	uxth	r4, r2
 8007654:	197a      	adds	r2, r7, r5
 8007656:	21c4      	movs	r1, #196	; 0xc4
 8007658:	5254      	strh	r4, [r2, r1]
 800765a:	0019      	movs	r1, r3
 800765c:	b2c2      	uxtb	r2, r0
 800765e:	002c      	movs	r4, r5
 8007660:	193b      	adds	r3, r7, r4
 8007662:	185b      	adds	r3, r3, r1
 8007664:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 24);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	1618      	asrs	r0, r3, #24
 800766a:	0025      	movs	r5, r4
 800766c:	197b      	adds	r3, r7, r5
 800766e:	22c4      	movs	r2, #196	; 0xc4
 8007670:	5a9b      	ldrh	r3, [r3, r2]
 8007672:	1c5a      	adds	r2, r3, #1
 8007674:	b294      	uxth	r4, r2
 8007676:	197a      	adds	r2, r7, r5
 8007678:	21c4      	movs	r1, #196	; 0xc4
 800767a:	5254      	strh	r4, [r2, r1]
 800767c:	0019      	movs	r1, r3
 800767e:	b2c2      	uxtb	r2, r0
 8007680:	002c      	movs	r4, r5
 8007682:	193b      	adds	r3, r7, r4
 8007684:	185b      	adds	r3, r3, r1
 8007686:	705a      	strb	r2, [r3, #1]

    request.p_payload[request.payload_len++] = (uint8_t) longitude;
 8007688:	193b      	adds	r3, r7, r4
 800768a:	22c4      	movs	r2, #196	; 0xc4
 800768c:	5a9b      	ldrh	r3, [r3, r2]
 800768e:	1c5a      	adds	r2, r3, #1
 8007690:	b290      	uxth	r0, r2
 8007692:	193a      	adds	r2, r7, r4
 8007694:	21c4      	movs	r1, #196	; 0xc4
 8007696:	5250      	strh	r0, [r2, r1]
 8007698:	0019      	movs	r1, r3
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	b2da      	uxtb	r2, r3
 800769e:	193b      	adds	r3, r7, r4
 80076a0:	185b      	adds	r3, r3, r1
 80076a2:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 8);
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	1218      	asrs	r0, r3, #8
 80076a8:	0025      	movs	r5, r4
 80076aa:	197b      	adds	r3, r7, r5
 80076ac:	22c4      	movs	r2, #196	; 0xc4
 80076ae:	5a9b      	ldrh	r3, [r3, r2]
 80076b0:	1c5a      	adds	r2, r3, #1
 80076b2:	b294      	uxth	r4, r2
 80076b4:	197a      	adds	r2, r7, r5
 80076b6:	21c4      	movs	r1, #196	; 0xc4
 80076b8:	5254      	strh	r4, [r2, r1]
 80076ba:	0019      	movs	r1, r3
 80076bc:	b2c2      	uxtb	r2, r0
 80076be:	002c      	movs	r4, r5
 80076c0:	193b      	adds	r3, r7, r4
 80076c2:	185b      	adds	r3, r3, r1
 80076c4:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 16);
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	1418      	asrs	r0, r3, #16
 80076ca:	0025      	movs	r5, r4
 80076cc:	197b      	adds	r3, r7, r5
 80076ce:	22c4      	movs	r2, #196	; 0xc4
 80076d0:	5a9b      	ldrh	r3, [r3, r2]
 80076d2:	1c5a      	adds	r2, r3, #1
 80076d4:	b294      	uxth	r4, r2
 80076d6:	197a      	adds	r2, r7, r5
 80076d8:	21c4      	movs	r1, #196	; 0xc4
 80076da:	5254      	strh	r4, [r2, r1]
 80076dc:	0019      	movs	r1, r3
 80076de:	b2c2      	uxtb	r2, r0
 80076e0:	002c      	movs	r4, r5
 80076e2:	193b      	adds	r3, r7, r4
 80076e4:	185b      	adds	r3, r3, r1
 80076e6:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 24);
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	1618      	asrs	r0, r3, #24
 80076ec:	0025      	movs	r5, r4
 80076ee:	197b      	adds	r3, r7, r5
 80076f0:	22c4      	movs	r2, #196	; 0xc4
 80076f2:	5a9b      	ldrh	r3, [r3, r2]
 80076f4:	1c5a      	adds	r2, r3, #1
 80076f6:	b294      	uxth	r4, r2
 80076f8:	197a      	adds	r2, r7, r5
 80076fa:	21c4      	movs	r1, #196	; 0xc4
 80076fc:	5254      	strh	r4, [r2, r1]
 80076fe:	0019      	movs	r1, r3
 8007700:	b2c2      	uxtb	r2, r0
 8007702:	0028      	movs	r0, r5
 8007704:	183b      	adds	r3, r7, r0
 8007706:	185b      	adds	r3, r3, r1
 8007708:	705a      	strb	r2, [r3, #1]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800770a:	2308      	movs	r3, #8
 800770c:	18fa      	adds	r2, r7, r3
 800770e:	183b      	adds	r3, r7, r0
 8007710:	0011      	movs	r1, r2
 8007712:	0018      	movs	r0, r3
 8007714:	f000 feb6 	bl	8008484 <astronode_transport_send_receive>
 8007718:	0003      	movs	r3, r0
 800771a:	2b01      	cmp	r3, #1
 800771c:	d10e      	bne.n	800773c <astronode_send_geo_wr+0x16c>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_GEO_WA)
 800771e:	4b09      	ldr	r3, [pc, #36]	; (8007744 <astronode_send_geo_wr+0x174>)
 8007720:	199b      	adds	r3, r3, r6
 8007722:	19db      	adds	r3, r3, r7
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	2bb5      	cmp	r3, #181	; 0xb5
 8007728:	d104      	bne.n	8007734 <astronode_send_geo_wr+0x164>
        {
            send_debug_logs("Geolocation values were set successfully.");
 800772a:	4b07      	ldr	r3, [pc, #28]	; (8007748 <astronode_send_geo_wr+0x178>)
 800772c:	0018      	movs	r0, r3
 800772e:	f7fb fc23 	bl	8002f78 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the geolocation information.");
        }
    }
}
 8007732:	e003      	b.n	800773c <astronode_send_geo_wr+0x16c>
            send_debug_logs("Failed to set the geolocation information.");
 8007734:	4b05      	ldr	r3, [pc, #20]	; (800774c <astronode_send_geo_wr+0x17c>)
 8007736:	0018      	movs	r0, r3
 8007738:	f7fb fc1e 	bl	8002f78 <send_debug_logs>
}
 800773c:	46c0      	nop			; (mov r8, r8)
 800773e:	46bd      	mov	sp, r7
 8007740:	b067      	add	sp, #412	; 0x19c
 8007742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007744:	fffffe70 	.word	0xfffffe70
 8007748:	08011aa4 	.word	0x08011aa4
 800774c:	08011ad0 	.word	0x08011ad0

08007750 <astronode_send_pld_er>:
        }
    }
}

void astronode_send_pld_er(uint16_t payload_id, char *p_payload, uint16_t payload_length)
{
 8007750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007752:	b0e7      	sub	sp, #412	; 0x19c
 8007754:	af00      	add	r7, sp, #0
 8007756:	6039      	str	r1, [r7, #0]
 8007758:	0011      	movs	r1, r2
 800775a:	4b3d      	ldr	r3, [pc, #244]	; (8007850 <astronode_send_pld_er+0x100>)
 800775c:	26cc      	movs	r6, #204	; 0xcc
 800775e:	0076      	lsls	r6, r6, #1
 8007760:	199b      	adds	r3, r3, r6
 8007762:	19db      	adds	r3, r3, r7
 8007764:	1c02      	adds	r2, r0, #0
 8007766:	801a      	strh	r2, [r3, #0]
 8007768:	4b3a      	ldr	r3, [pc, #232]	; (8007854 <astronode_send_pld_er+0x104>)
 800776a:	199b      	adds	r3, r3, r6
 800776c:	19db      	adds	r3, r3, r7
 800776e:	1c0a      	adds	r2, r1, #0
 8007770:	801a      	strh	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8007772:	24d0      	movs	r4, #208	; 0xd0
 8007774:	193b      	adds	r3, r7, r4
 8007776:	0018      	movs	r0, r3
 8007778:	23c6      	movs	r3, #198	; 0xc6
 800777a:	001a      	movs	r2, r3
 800777c:	2100      	movs	r1, #0
 800777e:	f003 f81d 	bl	800a7bc <memset>
    astronode_app_msg_t answer = {0};
 8007782:	4b35      	ldr	r3, [pc, #212]	; (8007858 <astronode_send_pld_er+0x108>)
 8007784:	199b      	adds	r3, r3, r6
 8007786:	19db      	adds	r3, r3, r7
 8007788:	0018      	movs	r0, r3
 800778a:	23c6      	movs	r3, #198	; 0xc6
 800778c:	001a      	movs	r2, r3
 800778e:	2100      	movs	r1, #0
 8007790:	f003 f814 	bl	800a7bc <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_ER;
 8007794:	193b      	adds	r3, r7, r4
 8007796:	2225      	movs	r2, #37	; 0x25
 8007798:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) payload_id;
 800779a:	193b      	adds	r3, r7, r4
 800779c:	22c4      	movs	r2, #196	; 0xc4
 800779e:	5a9b      	ldrh	r3, [r3, r2]
 80077a0:	1c5a      	adds	r2, r3, #1
 80077a2:	b290      	uxth	r0, r2
 80077a4:	193a      	adds	r2, r7, r4
 80077a6:	21c4      	movs	r1, #196	; 0xc4
 80077a8:	5250      	strh	r0, [r2, r1]
 80077aa:	0019      	movs	r1, r3
 80077ac:	4b28      	ldr	r3, [pc, #160]	; (8007850 <astronode_send_pld_er+0x100>)
 80077ae:	199b      	adds	r3, r3, r6
 80077b0:	19db      	adds	r3, r3, r7
 80077b2:	881b      	ldrh	r3, [r3, #0]
 80077b4:	b2da      	uxtb	r2, r3
 80077b6:	193b      	adds	r3, r7, r4
 80077b8:	185b      	adds	r3, r3, r1
 80077ba:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (payload_id >> 8);
 80077bc:	4b24      	ldr	r3, [pc, #144]	; (8007850 <astronode_send_pld_er+0x100>)
 80077be:	199b      	adds	r3, r3, r6
 80077c0:	19db      	adds	r3, r3, r7
 80077c2:	881b      	ldrh	r3, [r3, #0]
 80077c4:	0a1b      	lsrs	r3, r3, #8
 80077c6:	b298      	uxth	r0, r3
 80077c8:	0025      	movs	r5, r4
 80077ca:	197b      	adds	r3, r7, r5
 80077cc:	22c4      	movs	r2, #196	; 0xc4
 80077ce:	5a9b      	ldrh	r3, [r3, r2]
 80077d0:	1c5a      	adds	r2, r3, #1
 80077d2:	b294      	uxth	r4, r2
 80077d4:	197a      	adds	r2, r7, r5
 80077d6:	21c4      	movs	r1, #196	; 0xc4
 80077d8:	5254      	strh	r4, [r2, r1]
 80077da:	0019      	movs	r1, r3
 80077dc:	b2c2      	uxtb	r2, r0
 80077de:	002c      	movs	r4, r5
 80077e0:	193b      	adds	r3, r7, r4
 80077e2:	185b      	adds	r3, r3, r1
 80077e4:	705a      	strb	r2, [r3, #1]

    memcpy(&request.p_payload[request.payload_len], p_payload, payload_length);
 80077e6:	193b      	adds	r3, r7, r4
 80077e8:	22c4      	movs	r2, #196	; 0xc4
 80077ea:	5a9b      	ldrh	r3, [r3, r2]
 80077ec:	001a      	movs	r2, r3
 80077ee:	193b      	adds	r3, r7, r4
 80077f0:	189b      	adds	r3, r3, r2
 80077f2:	1c58      	adds	r0, r3, #1
 80077f4:	4b17      	ldr	r3, [pc, #92]	; (8007854 <astronode_send_pld_er+0x104>)
 80077f6:	199b      	adds	r3, r3, r6
 80077f8:	19db      	adds	r3, r3, r7
 80077fa:	881a      	ldrh	r2, [r3, #0]
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	0019      	movs	r1, r3
 8007800:	f003 f8c1 	bl	800a986 <memcpy>
    request.payload_len = 2 + payload_length;
 8007804:	4b13      	ldr	r3, [pc, #76]	; (8007854 <astronode_send_pld_er+0x104>)
 8007806:	199b      	adds	r3, r3, r6
 8007808:	19db      	adds	r3, r3, r7
 800780a:	881b      	ldrh	r3, [r3, #0]
 800780c:	3302      	adds	r3, #2
 800780e:	b299      	uxth	r1, r3
 8007810:	193b      	adds	r3, r7, r4
 8007812:	22c4      	movs	r2, #196	; 0xc4
 8007814:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007816:	2308      	movs	r3, #8
 8007818:	18fa      	adds	r2, r7, r3
 800781a:	193b      	adds	r3, r7, r4
 800781c:	0011      	movs	r1, r2
 800781e:	0018      	movs	r0, r3
 8007820:	f000 fe30 	bl	8008484 <astronode_transport_send_receive>
 8007824:	0003      	movs	r3, r0
 8007826:	2b01      	cmp	r3, #1
 8007828:	d10e      	bne.n	8007848 <astronode_send_pld_er+0xf8>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_EA)
 800782a:	4b0b      	ldr	r3, [pc, #44]	; (8007858 <astronode_send_pld_er+0x108>)
 800782c:	199b      	adds	r3, r3, r6
 800782e:	19db      	adds	r3, r3, r7
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	2ba5      	cmp	r3, #165	; 0xa5
 8007834:	d104      	bne.n	8007840 <astronode_send_pld_er+0xf0>
        {
            send_debug_logs("Payload was successfully queued.");
 8007836:	4b09      	ldr	r3, [pc, #36]	; (800785c <astronode_send_pld_er+0x10c>)
 8007838:	0018      	movs	r0, r3
 800783a:	f7fb fb9d 	bl	8002f78 <send_debug_logs>
        else
        {
            send_debug_logs("Payload failed to be queued.");
        }
    }
}
 800783e:	e003      	b.n	8007848 <astronode_send_pld_er+0xf8>
            send_debug_logs("Payload failed to be queued.");
 8007840:	4b07      	ldr	r3, [pc, #28]	; (8007860 <astronode_send_pld_er+0x110>)
 8007842:	0018      	movs	r0, r3
 8007844:	f7fb fb98 	bl	8002f78 <send_debug_logs>
}
 8007848:	46c0      	nop			; (mov r8, r8)
 800784a:	46bd      	mov	sp, r7
 800784c:	b067      	add	sp, #412	; 0x19c
 800784e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007850:	fffffe6e 	.word	0xfffffe6e
 8007854:	fffffe6c 	.word	0xfffffe6c
 8007858:	fffffe70 	.word	0xfffffe70
 800785c:	08011b48 	.word	0x08011b48
 8007860:	08011b6c 	.word	0x08011b6c

08007864 <astronode_send_res_cr>:
        }
    }
}

void astronode_send_res_cr(void)
{
 8007864:	b5b0      	push	{r4, r5, r7, lr}
 8007866:	b0e4      	sub	sp, #400	; 0x190
 8007868:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800786a:	24c8      	movs	r4, #200	; 0xc8
 800786c:	193b      	adds	r3, r7, r4
 800786e:	0018      	movs	r0, r3
 8007870:	23c6      	movs	r3, #198	; 0xc6
 8007872:	001a      	movs	r2, r3
 8007874:	2100      	movs	r1, #0
 8007876:	f002 ffa1 	bl	800a7bc <memset>
    astronode_app_msg_t answer = {0};
 800787a:	4b16      	ldr	r3, [pc, #88]	; (80078d4 <astronode_send_res_cr+0x70>)
 800787c:	25c8      	movs	r5, #200	; 0xc8
 800787e:	006d      	lsls	r5, r5, #1
 8007880:	195b      	adds	r3, r3, r5
 8007882:	19db      	adds	r3, r3, r7
 8007884:	0018      	movs	r0, r3
 8007886:	23c6      	movs	r3, #198	; 0xc6
 8007888:	001a      	movs	r2, r3
 800788a:	2100      	movs	r1, #0
 800788c:	f002 ff96 	bl	800a7bc <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 8007890:	193b      	adds	r3, r7, r4
 8007892:	2255      	movs	r2, #85	; 0x55
 8007894:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007896:	003a      	movs	r2, r7
 8007898:	193b      	adds	r3, r7, r4
 800789a:	0011      	movs	r1, r2
 800789c:	0018      	movs	r0, r3
 800789e:	f000 fdf1 	bl	8008484 <astronode_transport_send_receive>
 80078a2:	0003      	movs	r3, r0
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d111      	bne.n	80078cc <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 80078a8:	4b0a      	ldr	r3, [pc, #40]	; (80078d4 <astronode_send_res_cr+0x70>)
 80078aa:	195b      	adds	r3, r3, r5
 80078ac:	19db      	adds	r3, r3, r7
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	2bd5      	cmp	r3, #213	; 0xd5
 80078b2:	d107      	bne.n	80078c4 <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 80078b4:	4b08      	ldr	r3, [pc, #32]	; (80078d8 <astronode_send_res_cr+0x74>)
 80078b6:	2200      	movs	r2, #0
 80078b8:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The reset has been cleared.");
 80078ba:	4b08      	ldr	r3, [pc, #32]	; (80078dc <astronode_send_res_cr+0x78>)
 80078bc:	0018      	movs	r0, r3
 80078be:	f7fb fb5b 	bl	8002f78 <send_debug_logs>
        else
        {
            send_debug_logs("No reset to clear.");
        }
    }
}
 80078c2:	e003      	b.n	80078cc <astronode_send_res_cr+0x68>
            send_debug_logs("No reset to clear.");
 80078c4:	4b06      	ldr	r3, [pc, #24]	; (80078e0 <astronode_send_res_cr+0x7c>)
 80078c6:	0018      	movs	r0, r3
 80078c8:	f7fb fb56 	bl	8002f78 <send_debug_logs>
}
 80078cc:	46c0      	nop			; (mov r8, r8)
 80078ce:	46bd      	mov	sp, r7
 80078d0:	b064      	add	sp, #400	; 0x190
 80078d2:	bdb0      	pop	{r4, r5, r7, pc}
 80078d4:	fffffe70 	.word	0xfffffe70
 80078d8:	20000c91 	.word	0x20000c91
 80078dc:	08011bd8 	.word	0x08011bd8
 80078e0:	08011bf4 	.word	0x08011bf4

080078e4 <astronode_send_rtc_rr>:

void astronode_send_rtc_rr(void)
{
 80078e4:	b5b0      	push	{r4, r5, r7, lr}
 80078e6:	b0fa      	sub	sp, #488	; 0x1e8
 80078e8:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80078ea:	258e      	movs	r5, #142	; 0x8e
 80078ec:	006d      	lsls	r5, r5, #1
 80078ee:	197b      	adds	r3, r7, r5
 80078f0:	0018      	movs	r0, r3
 80078f2:	23c6      	movs	r3, #198	; 0xc6
 80078f4:	001a      	movs	r2, r3
 80078f6:	2100      	movs	r1, #0
 80078f8:	f002 ff60 	bl	800a7bc <memset>
    astronode_app_msg_t answer = {0};
 80078fc:	4b26      	ldr	r3, [pc, #152]	; (8007998 <astronode_send_rtc_rr+0xb4>)
 80078fe:	24f4      	movs	r4, #244	; 0xf4
 8007900:	0064      	lsls	r4, r4, #1
 8007902:	191b      	adds	r3, r3, r4
 8007904:	19db      	adds	r3, r3, r7
 8007906:	0018      	movs	r0, r3
 8007908:	23c6      	movs	r3, #198	; 0xc6
 800790a:	001a      	movs	r2, r3
 800790c:	2100      	movs	r1, #0
 800790e:	f002 ff55 	bl	800a7bc <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR;
 8007912:	197b      	adds	r3, r7, r5
 8007914:	2217      	movs	r2, #23
 8007916:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007918:	2354      	movs	r3, #84	; 0x54
 800791a:	18fa      	adds	r2, r7, r3
 800791c:	197b      	adds	r3, r7, r5
 800791e:	0011      	movs	r1, r2
 8007920:	0018      	movs	r0, r3
 8007922:	f000 fdaf 	bl	8008484 <astronode_transport_send_receive>
 8007926:	0003      	movs	r3, r0
 8007928:	2b01      	cmp	r3, #1
 800792a:	d131      	bne.n	8007990 <astronode_send_rtc_rr+0xac>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RTC_RA)
 800792c:	4b1a      	ldr	r3, [pc, #104]	; (8007998 <astronode_send_rtc_rr+0xb4>)
 800792e:	0021      	movs	r1, r4
 8007930:	185b      	adds	r3, r3, r1
 8007932:	19db      	adds	r3, r3, r7
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	2b97      	cmp	r3, #151	; 0x97
 8007938:	d126      	bne.n	8007988 <astronode_send_rtc_rr+0xa4>
        {
            uint32_t rtc_time = answer.p_payload[0]
 800793a:	4b17      	ldr	r3, [pc, #92]	; (8007998 <astronode_send_rtc_rr+0xb4>)
 800793c:	185b      	adds	r3, r3, r1
 800793e:	19db      	adds	r3, r3, r7
 8007940:	785b      	ldrb	r3, [r3, #1]
 8007942:	001a      	movs	r2, r3
                                        + (answer.p_payload[1] << 8)
 8007944:	4b14      	ldr	r3, [pc, #80]	; (8007998 <astronode_send_rtc_rr+0xb4>)
 8007946:	185b      	adds	r3, r3, r1
 8007948:	19db      	adds	r3, r3, r7
 800794a:	789b      	ldrb	r3, [r3, #2]
 800794c:	021b      	lsls	r3, r3, #8
 800794e:	18d2      	adds	r2, r2, r3
                                        + (answer.p_payload[2] << 16)
 8007950:	4b11      	ldr	r3, [pc, #68]	; (8007998 <astronode_send_rtc_rr+0xb4>)
 8007952:	185b      	adds	r3, r3, r1
 8007954:	19db      	adds	r3, r3, r7
 8007956:	78db      	ldrb	r3, [r3, #3]
 8007958:	041b      	lsls	r3, r3, #16
 800795a:	18d2      	adds	r2, r2, r3
                                        + (answer.p_payload[3] << 24);
 800795c:	4b0e      	ldr	r3, [pc, #56]	; (8007998 <astronode_send_rtc_rr+0xb4>)
 800795e:	185b      	adds	r3, r3, r1
 8007960:	19db      	adds	r3, r3, r7
 8007962:	791b      	ldrb	r3, [r3, #4]
 8007964:	061b      	lsls	r3, r3, #24
 8007966:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8007968:	22f2      	movs	r2, #242	; 0xf2
 800796a:	0052      	lsls	r2, r2, #1
 800796c:	18b9      	adds	r1, r7, r2
 800796e:	600b      	str	r3, [r1, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 8007970:	18bb      	adds	r3, r7, r2
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	4909      	ldr	r1, [pc, #36]	; (800799c <astronode_send_rtc_rr+0xb8>)
 8007976:	1d3b      	adds	r3, r7, #4
 8007978:	0018      	movs	r0, r3
 800797a:	f002 fe89 	bl	800a690 <sprintf>
            send_debug_logs(str);
 800797e:	1d3b      	adds	r3, r7, #4
 8007980:	0018      	movs	r0, r3
 8007982:	f7fb faf9 	bl	8002f78 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to read rtc time.");
        }
    }
}
 8007986:	e003      	b.n	8007990 <astronode_send_rtc_rr+0xac>
            send_debug_logs("Failed to read rtc time.");
 8007988:	4b05      	ldr	r3, [pc, #20]	; (80079a0 <astronode_send_rtc_rr+0xbc>)
 800798a:	0018      	movs	r0, r3
 800798c:	f7fb faf4 	bl	8002f78 <send_debug_logs>
}
 8007990:	46c0      	nop			; (mov r8, r8)
 8007992:	46bd      	mov	sp, r7
 8007994:	b07a      	add	sp, #488	; 0x1e8
 8007996:	bdb0      	pop	{r4, r5, r7, pc}
 8007998:	fffffe6c 	.word	0xfffffe6c
 800799c:	08011c08 	.word	0x08011c08
 80079a0:	08011c48 	.word	0x08011c48

080079a4 <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 80079a4:	b5b0      	push	{r4, r5, r7, lr}
 80079a6:	b0f8      	sub	sp, #480	; 0x1e0
 80079a8:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80079aa:	258c      	movs	r5, #140	; 0x8c
 80079ac:	006d      	lsls	r5, r5, #1
 80079ae:	197b      	adds	r3, r7, r5
 80079b0:	0018      	movs	r0, r3
 80079b2:	23c6      	movs	r3, #198	; 0xc6
 80079b4:	001a      	movs	r2, r3
 80079b6:	2100      	movs	r1, #0
 80079b8:	f002 ff00 	bl	800a7bc <memset>
    astronode_app_msg_t answer = {0};
 80079bc:	4b21      	ldr	r3, [pc, #132]	; (8007a44 <astronode_send_sak_rr+0xa0>)
 80079be:	24f0      	movs	r4, #240	; 0xf0
 80079c0:	0064      	lsls	r4, r4, #1
 80079c2:	191b      	adds	r3, r3, r4
 80079c4:	19db      	adds	r3, r3, r7
 80079c6:	0018      	movs	r0, r3
 80079c8:	23c6      	movs	r3, #198	; 0xc6
 80079ca:	001a      	movs	r2, r3
 80079cc:	2100      	movs	r1, #0
 80079ce:	f002 fef5 	bl	800a7bc <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 80079d2:	197b      	adds	r3, r7, r5
 80079d4:	2245      	movs	r2, #69	; 0x45
 80079d6:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80079d8:	2350      	movs	r3, #80	; 0x50
 80079da:	18fa      	adds	r2, r7, r3
 80079dc:	197b      	adds	r3, r7, r5
 80079de:	0011      	movs	r1, r2
 80079e0:	0018      	movs	r0, r3
 80079e2:	f000 fd4f 	bl	8008484 <astronode_transport_send_receive>
 80079e6:	0003      	movs	r3, r0
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d126      	bne.n	8007a3a <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 80079ec:	4b15      	ldr	r3, [pc, #84]	; (8007a44 <astronode_send_sak_rr+0xa0>)
 80079ee:	191b      	adds	r3, r3, r4
 80079f0:	19db      	adds	r3, r3, r7
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	2bc5      	cmp	r3, #197	; 0xc5
 80079f6:	d11c      	bne.n	8007a32 <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 80079f8:	4b12      	ldr	r3, [pc, #72]	; (8007a44 <astronode_send_sak_rr+0xa0>)
 80079fa:	191b      	adds	r3, r3, r4
 80079fc:	19db      	adds	r3, r3, r7
 80079fe:	785b      	ldrb	r3, [r3, #1]
 8007a00:	b299      	uxth	r1, r3
 8007a02:	4b10      	ldr	r3, [pc, #64]	; (8007a44 <astronode_send_sak_rr+0xa0>)
 8007a04:	191b      	adds	r3, r3, r4
 8007a06:	19db      	adds	r3, r3, r7
 8007a08:	789b      	ldrb	r3, [r3, #2]
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	021b      	lsls	r3, r3, #8
 8007a0e:	b29a      	uxth	r2, r3
 8007a10:	20ef      	movs	r0, #239	; 0xef
 8007a12:	0040      	lsls	r0, r0, #1
 8007a14:	183b      	adds	r3, r7, r0
 8007a16:	188a      	adds	r2, r1, r2
 8007a18:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 8007a1a:	183b      	adds	r3, r7, r0
 8007a1c:	881a      	ldrh	r2, [r3, #0]
 8007a1e:	490a      	ldr	r1, [pc, #40]	; (8007a48 <astronode_send_sak_rr+0xa4>)
 8007a20:	003b      	movs	r3, r7
 8007a22:	0018      	movs	r0, r3
 8007a24:	f002 fe34 	bl	800a690 <sprintf>
            send_debug_logs(str);
 8007a28:	003b      	movs	r3, r7
 8007a2a:	0018      	movs	r0, r3
 8007a2c:	f7fb faa4 	bl	8002f78 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 8007a30:	e003      	b.n	8007a3a <astronode_send_sak_rr+0x96>
            send_debug_logs("No acknowledgment available.");
 8007a32:	4b06      	ldr	r3, [pc, #24]	; (8007a4c <astronode_send_sak_rr+0xa8>)
 8007a34:	0018      	movs	r0, r3
 8007a36:	f7fb fa9f 	bl	8002f78 <send_debug_logs>
}
 8007a3a:	46c0      	nop			; (mov r8, r8)
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	b078      	add	sp, #480	; 0x1e0
 8007a40:	bdb0      	pop	{r4, r5, r7, pc}
 8007a42:	46c0      	nop			; (mov r8, r8)
 8007a44:	fffffe70 	.word	0xfffffe70
 8007a48:	08011c64 	.word	0x08011c64
 8007a4c:	08011c90 	.word	0x08011c90

08007a50 <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 8007a50:	b5b0      	push	{r4, r5, r7, lr}
 8007a52:	b0e4      	sub	sp, #400	; 0x190
 8007a54:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007a56:	24c8      	movs	r4, #200	; 0xc8
 8007a58:	193b      	adds	r3, r7, r4
 8007a5a:	0018      	movs	r0, r3
 8007a5c:	23c6      	movs	r3, #198	; 0xc6
 8007a5e:	001a      	movs	r2, r3
 8007a60:	2100      	movs	r1, #0
 8007a62:	f002 feab 	bl	800a7bc <memset>
    astronode_app_msg_t answer = {0};
 8007a66:	4b16      	ldr	r3, [pc, #88]	; (8007ac0 <astronode_send_sak_cr+0x70>)
 8007a68:	25c8      	movs	r5, #200	; 0xc8
 8007a6a:	006d      	lsls	r5, r5, #1
 8007a6c:	195b      	adds	r3, r3, r5
 8007a6e:	19db      	adds	r3, r3, r7
 8007a70:	0018      	movs	r0, r3
 8007a72:	23c6      	movs	r3, #198	; 0xc6
 8007a74:	001a      	movs	r2, r3
 8007a76:	2100      	movs	r1, #0
 8007a78:	f002 fea0 	bl	800a7bc <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 8007a7c:	193b      	adds	r3, r7, r4
 8007a7e:	2246      	movs	r2, #70	; 0x46
 8007a80:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007a82:	003a      	movs	r2, r7
 8007a84:	193b      	adds	r3, r7, r4
 8007a86:	0011      	movs	r1, r2
 8007a88:	0018      	movs	r0, r3
 8007a8a:	f000 fcfb 	bl	8008484 <astronode_transport_send_receive>
 8007a8e:	0003      	movs	r3, r0
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d111      	bne.n	8007ab8 <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 8007a94:	4b0a      	ldr	r3, [pc, #40]	; (8007ac0 <astronode_send_sak_cr+0x70>)
 8007a96:	195b      	adds	r3, r3, r5
 8007a98:	19db      	adds	r3, r3, r7
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	2bc6      	cmp	r3, #198	; 0xc6
 8007a9e:	d107      	bne.n	8007ab0 <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 8007aa0:	4b08      	ldr	r3, [pc, #32]	; (8007ac4 <astronode_send_sak_cr+0x74>)
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 8007aa6:	4b08      	ldr	r3, [pc, #32]	; (8007ac8 <astronode_send_sak_cr+0x78>)
 8007aa8:	0018      	movs	r0, r3
 8007aaa:	f7fb fa65 	bl	8002f78 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 8007aae:	e003      	b.n	8007ab8 <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 8007ab0:	4b06      	ldr	r3, [pc, #24]	; (8007acc <astronode_send_sak_cr+0x7c>)
 8007ab2:	0018      	movs	r0, r3
 8007ab4:	f7fb fa60 	bl	8002f78 <send_debug_logs>
}
 8007ab8:	46c0      	nop			; (mov r8, r8)
 8007aba:	46bd      	mov	sp, r7
 8007abc:	b064      	add	sp, #400	; 0x190
 8007abe:	bdb0      	pop	{r4, r5, r7, pc}
 8007ac0:	fffffe70 	.word	0xfffffe70
 8007ac4:	20000c90 	.word	0x20000c90
 8007ac8:	08011cb0 	.word	0x08011cb0
 8007acc:	08011c90 	.word	0x08011c90

08007ad0 <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 8007ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ad2:	b0ed      	sub	sp, #436	; 0x1b4
 8007ad4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007ad6:	21c8      	movs	r1, #200	; 0xc8
 8007ad8:	2318      	movs	r3, #24
 8007ada:	18cb      	adds	r3, r1, r3
 8007adc:	19db      	adds	r3, r3, r7
 8007ade:	0018      	movs	r0, r3
 8007ae0:	23c6      	movs	r3, #198	; 0xc6
 8007ae2:	001a      	movs	r2, r3
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	f002 fe69 	bl	800a7bc <memset>
    astronode_app_msg_t answer = {0};
 8007aea:	4b4a      	ldr	r3, [pc, #296]	; (8007c14 <astronode_send_mpn_rr+0x144>)
 8007aec:	26cc      	movs	r6, #204	; 0xcc
 8007aee:	0076      	lsls	r6, r6, #1
 8007af0:	199b      	adds	r3, r3, r6
 8007af2:	2218      	movs	r2, #24
 8007af4:	4694      	mov	ip, r2
 8007af6:	44bc      	add	ip, r7
 8007af8:	4463      	add	r3, ip
 8007afa:	0018      	movs	r0, r3
 8007afc:	23c6      	movs	r3, #198	; 0xc6
 8007afe:	001a      	movs	r2, r3
 8007b00:	2100      	movs	r1, #0
 8007b02:	f002 fe5b 	bl	800a7bc <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 8007b06:	21c8      	movs	r1, #200	; 0xc8
 8007b08:	2318      	movs	r3, #24
 8007b0a:	18cb      	adds	r3, r1, r3
 8007b0c:	19db      	adds	r3, r3, r7
 8007b0e:	221b      	movs	r2, #27
 8007b10:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007b12:	2318      	movs	r3, #24
 8007b14:	18fa      	adds	r2, r7, r3
 8007b16:	2318      	movs	r3, #24
 8007b18:	18cb      	adds	r3, r1, r3
 8007b1a:	19db      	adds	r3, r3, r7
 8007b1c:	0011      	movs	r1, r2
 8007b1e:	0018      	movs	r0, r3
 8007b20:	f000 fcb0 	bl	8008484 <astronode_transport_send_receive>
 8007b24:	0003      	movs	r3, r0
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d16f      	bne.n	8007c0a <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 8007b2a:	4b3a      	ldr	r3, [pc, #232]	; (8007c14 <astronode_send_mpn_rr+0x144>)
 8007b2c:	0032      	movs	r2, r6
 8007b2e:	189b      	adds	r3, r3, r2
 8007b30:	2118      	movs	r1, #24
 8007b32:	468c      	mov	ip, r1
 8007b34:	44bc      	add	ip, r7
 8007b36:	4463      	add	r3, ip
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	2b9b      	cmp	r3, #155	; 0x9b
 8007b3c:	d161      	bne.n	8007c02 <astronode_send_mpn_rr+0x132>
        {
 8007b3e:	466b      	mov	r3, sp
 8007b40:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 8007b42:	4b34      	ldr	r3, [pc, #208]	; (8007c14 <astronode_send_mpn_rr+0x144>)
 8007b44:	189b      	adds	r3, r3, r2
 8007b46:	2218      	movs	r2, #24
 8007b48:	4694      	mov	ip, r2
 8007b4a:	44bc      	add	ip, r7
 8007b4c:	4463      	add	r3, ip
 8007b4e:	22c4      	movs	r2, #196	; 0xc4
 8007b50:	5a9b      	ldrh	r3, [r3, r2]
 8007b52:	001a      	movs	r2, r3
 8007b54:	3a01      	subs	r2, #1
 8007b56:	21ca      	movs	r1, #202	; 0xca
 8007b58:	0049      	lsls	r1, r1, #1
 8007b5a:	2018      	movs	r0, #24
 8007b5c:	1809      	adds	r1, r1, r0
 8007b5e:	19c9      	adds	r1, r1, r7
 8007b60:	600a      	str	r2, [r1, #0]
 8007b62:	001c      	movs	r4, r3
 8007b64:	2200      	movs	r2, #0
 8007b66:	0015      	movs	r5, r2
 8007b68:	0020      	movs	r0, r4
 8007b6a:	0029      	movs	r1, r5
 8007b6c:	0004      	movs	r4, r0
 8007b6e:	0f62      	lsrs	r2, r4, #29
 8007b70:	000c      	movs	r4, r1
 8007b72:	00e4      	lsls	r4, r4, #3
 8007b74:	617c      	str	r4, [r7, #20]
 8007b76:	697c      	ldr	r4, [r7, #20]
 8007b78:	4314      	orrs	r4, r2
 8007b7a:	617c      	str	r4, [r7, #20]
 8007b7c:	0001      	movs	r1, r0
 8007b7e:	00c9      	lsls	r1, r1, #3
 8007b80:	6139      	str	r1, [r7, #16]
 8007b82:	603b      	str	r3, [r7, #0]
 8007b84:	2200      	movs	r2, #0
 8007b86:	607a      	str	r2, [r7, #4]
 8007b88:	6838      	ldr	r0, [r7, #0]
 8007b8a:	6879      	ldr	r1, [r7, #4]
 8007b8c:	0004      	movs	r4, r0
 8007b8e:	0f62      	lsrs	r2, r4, #29
 8007b90:	000c      	movs	r4, r1
 8007b92:	00e4      	lsls	r4, r4, #3
 8007b94:	60fc      	str	r4, [r7, #12]
 8007b96:	68fc      	ldr	r4, [r7, #12]
 8007b98:	4314      	orrs	r4, r2
 8007b9a:	60fc      	str	r4, [r7, #12]
 8007b9c:	0001      	movs	r1, r0
 8007b9e:	00ca      	lsls	r2, r1, #3
 8007ba0:	60ba      	str	r2, [r7, #8]
 8007ba2:	3307      	adds	r3, #7
 8007ba4:	08db      	lsrs	r3, r3, #3
 8007ba6:	00db      	lsls	r3, r3, #3
 8007ba8:	4669      	mov	r1, sp
 8007baa:	1acb      	subs	r3, r1, r3
 8007bac:	469d      	mov	sp, r3
 8007bae:	466b      	mov	r3, sp
 8007bb0:	3300      	adds	r3, #0
 8007bb2:	24c8      	movs	r4, #200	; 0xc8
 8007bb4:	0064      	lsls	r4, r4, #1
 8007bb6:	2218      	movs	r2, #24
 8007bb8:	18a2      	adds	r2, r4, r2
 8007bba:	19d1      	adds	r1, r2, r7
 8007bbc:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 8007bbe:	4b16      	ldr	r3, [pc, #88]	; (8007c18 <astronode_send_mpn_rr+0x148>)
 8007bc0:	0018      	movs	r0, r3
 8007bc2:	f7fb f9d9 	bl	8002f78 <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 8007bc6:	4b13      	ldr	r3, [pc, #76]	; (8007c14 <astronode_send_mpn_rr+0x144>)
 8007bc8:	22cc      	movs	r2, #204	; 0xcc
 8007bca:	0052      	lsls	r2, r2, #1
 8007bcc:	189b      	adds	r3, r3, r2
 8007bce:	2218      	movs	r2, #24
 8007bd0:	4694      	mov	ip, r2
 8007bd2:	44bc      	add	ip, r7
 8007bd4:	4463      	add	r3, ip
 8007bd6:	22c4      	movs	r2, #196	; 0xc4
 8007bd8:	5a9b      	ldrh	r3, [r3, r2]
 8007bda:	0019      	movs	r1, r3
 8007bdc:	2318      	movs	r3, #24
 8007bde:	18fb      	adds	r3, r7, r3
 8007be0:	3301      	adds	r3, #1
 8007be2:	4a0e      	ldr	r2, [pc, #56]	; (8007c1c <astronode_send_mpn_rr+0x14c>)
 8007be4:	2018      	movs	r0, #24
 8007be6:	1820      	adds	r0, r4, r0
 8007be8:	19c0      	adds	r0, r0, r7
 8007bea:	6800      	ldr	r0, [r0, #0]
 8007bec:	f002 fd1c 	bl	800a628 <snprintf>
            send_debug_logs(product_number);
 8007bf0:	2318      	movs	r3, #24
 8007bf2:	18e3      	adds	r3, r4, r3
 8007bf4:	19db      	adds	r3, r3, r7
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	0018      	movs	r0, r3
 8007bfa:	f7fb f9bd 	bl	8002f78 <send_debug_logs>
 8007bfe:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8007c00:	e003      	b.n	8007c0a <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8007c02:	4b07      	ldr	r3, [pc, #28]	; (8007c20 <astronode_send_mpn_rr+0x150>)
 8007c04:	0018      	movs	r0, r3
 8007c06:	f7fb f9b7 	bl	8002f78 <send_debug_logs>
}
 8007c0a:	46c0      	nop			; (mov r8, r8)
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	b06d      	add	sp, #436	; 0x1b4
 8007c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c12:	46c0      	nop			; (mov r8, r8)
 8007c14:	fffffe68 	.word	0xfffffe68
 8007c18:	08011d80 	.word	0x08011d80
 8007c1c:	0801195c 	.word	0x0801195c
 8007c20:	08011998 	.word	0x08011998

08007c24 <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 8007c24:	b5b0      	push	{r4, r5, r7, lr}
 8007c26:	b0e4      	sub	sp, #400	; 0x190
 8007c28:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007c2a:	24c8      	movs	r4, #200	; 0xc8
 8007c2c:	193b      	adds	r3, r7, r4
 8007c2e:	0018      	movs	r0, r3
 8007c30:	23c6      	movs	r3, #198	; 0xc6
 8007c32:	001a      	movs	r2, r3
 8007c34:	2100      	movs	r1, #0
 8007c36:	f002 fdc1 	bl	800a7bc <memset>
    astronode_app_msg_t answer = {0};
 8007c3a:	4b16      	ldr	r3, [pc, #88]	; (8007c94 <astronode_send_cmd_cr+0x70>)
 8007c3c:	25c8      	movs	r5, #200	; 0xc8
 8007c3e:	006d      	lsls	r5, r5, #1
 8007c40:	195b      	adds	r3, r3, r5
 8007c42:	19db      	adds	r3, r3, r7
 8007c44:	0018      	movs	r0, r3
 8007c46:	23c6      	movs	r3, #198	; 0xc6
 8007c48:	001a      	movs	r2, r3
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	f002 fdb6 	bl	800a7bc <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 8007c50:	193b      	adds	r3, r7, r4
 8007c52:	2248      	movs	r2, #72	; 0x48
 8007c54:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007c56:	003a      	movs	r2, r7
 8007c58:	193b      	adds	r3, r7, r4
 8007c5a:	0011      	movs	r1, r2
 8007c5c:	0018      	movs	r0, r3
 8007c5e:	f000 fc11 	bl	8008484 <astronode_transport_send_receive>
 8007c62:	0003      	movs	r3, r0
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d111      	bne.n	8007c8c <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 8007c68:	4b0a      	ldr	r3, [pc, #40]	; (8007c94 <astronode_send_cmd_cr+0x70>)
 8007c6a:	195b      	adds	r3, r3, r5
 8007c6c:	19db      	adds	r3, r3, r7
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	2bc8      	cmp	r3, #200	; 0xc8
 8007c72:	d107      	bne.n	8007c84 <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 8007c74:	4b08      	ldr	r3, [pc, #32]	; (8007c98 <astronode_send_cmd_cr+0x74>)
 8007c76:	2200      	movs	r2, #0
 8007c78:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 8007c7a:	4b08      	ldr	r3, [pc, #32]	; (8007c9c <astronode_send_cmd_cr+0x78>)
 8007c7c:	0018      	movs	r0, r3
 8007c7e:	f7fb f97b 	bl	8002f78 <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 8007c82:	e003      	b.n	8007c8c <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 8007c84:	4b06      	ldr	r3, [pc, #24]	; (8007ca0 <astronode_send_cmd_cr+0x7c>)
 8007c86:	0018      	movs	r0, r3
 8007c88:	f7fb f976 	bl	8002f78 <send_debug_logs>
}
 8007c8c:	46c0      	nop			; (mov r8, r8)
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	b064      	add	sp, #400	; 0x190
 8007c92:	bdb0      	pop	{r4, r5, r7, pc}
 8007c94:	fffffe70 	.word	0xfffffe70
 8007c98:	20000c92 	.word	0x20000c92
 8007c9c:	080121d0 	.word	0x080121d0
 8007ca0:	080121f4 	.word	0x080121f4

08007ca4 <astronode_send_cmd_rr>:

void astronode_send_cmd_rr(void)
{
 8007ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ca6:	4cac      	ldr	r4, [pc, #688]	; (8007f58 <astronode_send_cmd_rr+0x2b4>)
 8007ca8:	44a5      	add	sp, r4
 8007caa:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007cac:	218c      	movs	r1, #140	; 0x8c
 8007cae:	0049      	lsls	r1, r1, #1
 8007cb0:	2318      	movs	r3, #24
 8007cb2:	18cb      	adds	r3, r1, r3
 8007cb4:	19db      	adds	r3, r3, r7
 8007cb6:	0018      	movs	r0, r3
 8007cb8:	23c6      	movs	r3, #198	; 0xc6
 8007cba:	001a      	movs	r2, r3
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	f002 fd7d 	bl	800a7bc <memset>
    astronode_app_msg_t answer = {0};
 8007cc2:	4ba6      	ldr	r3, [pc, #664]	; (8007f5c <astronode_send_cmd_rr+0x2b8>)
 8007cc4:	26f8      	movs	r6, #248	; 0xf8
 8007cc6:	0076      	lsls	r6, r6, #1
 8007cc8:	199b      	adds	r3, r3, r6
 8007cca:	2218      	movs	r2, #24
 8007ccc:	4694      	mov	ip, r2
 8007cce:	44bc      	add	ip, r7
 8007cd0:	4463      	add	r3, ip
 8007cd2:	0018      	movs	r0, r3
 8007cd4:	23c6      	movs	r3, #198	; 0xc6
 8007cd6:	001a      	movs	r2, r3
 8007cd8:	2100      	movs	r1, #0
 8007cda:	f002 fd6f 	bl	800a7bc <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 8007cde:	218c      	movs	r1, #140	; 0x8c
 8007ce0:	0049      	lsls	r1, r1, #1
 8007ce2:	2318      	movs	r3, #24
 8007ce4:	18cb      	adds	r3, r1, r3
 8007ce6:	19db      	adds	r3, r3, r7
 8007ce8:	2247      	movs	r2, #71	; 0x47
 8007cea:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007cec:	2350      	movs	r3, #80	; 0x50
 8007cee:	2218      	movs	r2, #24
 8007cf0:	189b      	adds	r3, r3, r2
 8007cf2:	19da      	adds	r2, r3, r7
 8007cf4:	2318      	movs	r3, #24
 8007cf6:	18cb      	adds	r3, r1, r3
 8007cf8:	19db      	adds	r3, r3, r7
 8007cfa:	0011      	movs	r1, r2
 8007cfc:	0018      	movs	r0, r3
 8007cfe:	f000 fbc1 	bl	8008484 <astronode_transport_send_receive>
 8007d02:	0003      	movs	r3, r0
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d000      	beq.n	8007d0a <astronode_send_cmd_rr+0x66>
 8007d08:	e121      	b.n	8007f4e <astronode_send_cmd_rr+0x2aa>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 8007d0a:	4b94      	ldr	r3, [pc, #592]	; (8007f5c <astronode_send_cmd_rr+0x2b8>)
 8007d0c:	199b      	adds	r3, r3, r6
 8007d0e:	2218      	movs	r2, #24
 8007d10:	4694      	mov	ip, r2
 8007d12:	44bc      	add	ip, r7
 8007d14:	4463      	add	r3, ip
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	2bc7      	cmp	r3, #199	; 0xc7
 8007d1a:	d000      	beq.n	8007d1e <astronode_send_cmd_rr+0x7a>
 8007d1c:	e113      	b.n	8007f46 <astronode_send_cmd_rr+0x2a2>
        {
 8007d1e:	466b      	mov	r3, sp
 8007d20:	001e      	movs	r6, r3
            send_debug_logs("Received downlink command");
 8007d22:	4b8f      	ldr	r3, [pc, #572]	; (8007f60 <astronode_send_cmd_rr+0x2bc>)
 8007d24:	0018      	movs	r0, r3
 8007d26:	f7fb f927 	bl	8002f78 <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 8007d2a:	4b8c      	ldr	r3, [pc, #560]	; (8007f5c <astronode_send_cmd_rr+0x2b8>)
 8007d2c:	21f8      	movs	r1, #248	; 0xf8
 8007d2e:	0049      	lsls	r1, r1, #1
 8007d30:	185b      	adds	r3, r3, r1
 8007d32:	2218      	movs	r2, #24
 8007d34:	4694      	mov	ip, r2
 8007d36:	44bc      	add	ip, r7
 8007d38:	4463      	add	r3, ip
 8007d3a:	785b      	ldrb	r3, [r3, #1]
 8007d3c:	001a      	movs	r2, r3
                                + (answer.p_payload[1] << 8)
 8007d3e:	4b87      	ldr	r3, [pc, #540]	; (8007f5c <astronode_send_cmd_rr+0x2b8>)
 8007d40:	185b      	adds	r3, r3, r1
 8007d42:	2018      	movs	r0, #24
 8007d44:	4684      	mov	ip, r0
 8007d46:	44bc      	add	ip, r7
 8007d48:	4463      	add	r3, ip
 8007d4a:	789b      	ldrb	r3, [r3, #2]
 8007d4c:	021b      	lsls	r3, r3, #8
 8007d4e:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[2] << 16)
 8007d50:	4b82      	ldr	r3, [pc, #520]	; (8007f5c <astronode_send_cmd_rr+0x2b8>)
 8007d52:	185b      	adds	r3, r3, r1
 8007d54:	2018      	movs	r0, #24
 8007d56:	4684      	mov	ip, r0
 8007d58:	44bc      	add	ip, r7
 8007d5a:	4463      	add	r3, ip
 8007d5c:	78db      	ldrb	r3, [r3, #3]
 8007d5e:	041b      	lsls	r3, r3, #16
 8007d60:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[3] << 24);
 8007d62:	4b7e      	ldr	r3, [pc, #504]	; (8007f5c <astronode_send_cmd_rr+0x2b8>)
 8007d64:	185b      	adds	r3, r3, r1
 8007d66:	2118      	movs	r1, #24
 8007d68:	468c      	mov	ip, r1
 8007d6a:	44bc      	add	ip, r7
 8007d6c:	4463      	add	r3, ip
 8007d6e:	791b      	ldrb	r3, [r3, #4]
 8007d70:	061b      	lsls	r3, r3, #24
 8007d72:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8007d74:	22f4      	movs	r2, #244	; 0xf4
 8007d76:	0052      	lsls	r2, r2, #1
 8007d78:	2118      	movs	r1, #24
 8007d7a:	1851      	adds	r1, r2, r1
 8007d7c:	19c8      	adds	r0, r1, r7
 8007d7e:	6003      	str	r3, [r0, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 8007d80:	2318      	movs	r3, #24
 8007d82:	18d3      	adds	r3, r2, r3
 8007d84:	19db      	adds	r3, r3, r7
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	4976      	ldr	r1, [pc, #472]	; (8007f64 <astronode_send_cmd_rr+0x2c0>)
 8007d8a:	2318      	movs	r3, #24
 8007d8c:	18fb      	adds	r3, r7, r3
 8007d8e:	0018      	movs	r0, r3
 8007d90:	f002 fc7e 	bl	800a690 <sprintf>
            send_debug_logs(str);
 8007d94:	2318      	movs	r3, #24
 8007d96:	18fb      	adds	r3, r7, r3
 8007d98:	0018      	movs	r0, r3
 8007d9a:	f7fb f8ed 	bl	8002f78 <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 8007d9e:	4b6f      	ldr	r3, [pc, #444]	; (8007f5c <astronode_send_cmd_rr+0x2b8>)
 8007da0:	21f8      	movs	r1, #248	; 0xf8
 8007da2:	0049      	lsls	r1, r1, #1
 8007da4:	185b      	adds	r3, r3, r1
 8007da6:	2218      	movs	r2, #24
 8007da8:	4694      	mov	ip, r2
 8007daa:	44bc      	add	ip, r7
 8007dac:	4463      	add	r3, ip
 8007dae:	22c4      	movs	r2, #196	; 0xc4
 8007db0:	5a9b      	ldrh	r3, [r3, r2]
 8007db2:	2b2c      	cmp	r3, #44	; 0x2c
 8007db4:	d00e      	beq.n	8007dd4 <astronode_send_cmd_rr+0x130>
 8007db6:	4b69      	ldr	r3, [pc, #420]	; (8007f5c <astronode_send_cmd_rr+0x2b8>)
 8007db8:	185b      	adds	r3, r3, r1
 8007dba:	2218      	movs	r2, #24
 8007dbc:	4694      	mov	ip, r2
 8007dbe:	44bc      	add	ip, r7
 8007dc0:	4463      	add	r3, ip
 8007dc2:	22c4      	movs	r2, #196	; 0xc4
 8007dc4:	5a9b      	ldrh	r3, [r3, r2]
 8007dc6:	2b0c      	cmp	r3, #12
 8007dc8:	d004      	beq.n	8007dd4 <astronode_send_cmd_rr+0x130>
            {
                send_debug_logs("Command size error");
 8007dca:	4b67      	ldr	r3, [pc, #412]	; (8007f68 <astronode_send_cmd_rr+0x2c4>)
 8007dcc:	0018      	movs	r0, r3
 8007dce:	f7fb f8d3 	bl	8002f78 <send_debug_logs>
                return;
 8007dd2:	e0b6      	b.n	8007f42 <astronode_send_cmd_rr+0x29e>
            }

            char command_content[answer.payload_len];
 8007dd4:	4b61      	ldr	r3, [pc, #388]	; (8007f5c <astronode_send_cmd_rr+0x2b8>)
 8007dd6:	22f8      	movs	r2, #248	; 0xf8
 8007dd8:	0052      	lsls	r2, r2, #1
 8007dda:	189b      	adds	r3, r3, r2
 8007ddc:	2218      	movs	r2, #24
 8007dde:	4694      	mov	ip, r2
 8007de0:	44bc      	add	ip, r7
 8007de2:	4463      	add	r3, ip
 8007de4:	22c4      	movs	r2, #196	; 0xc4
 8007de6:	5a9b      	ldrh	r3, [r3, r2]
 8007de8:	001a      	movs	r2, r3
 8007dea:	3a01      	subs	r2, #1
 8007dec:	21f2      	movs	r1, #242	; 0xf2
 8007dee:	0049      	lsls	r1, r1, #1
 8007df0:	2018      	movs	r0, #24
 8007df2:	1809      	adds	r1, r1, r0
 8007df4:	19c9      	adds	r1, r1, r7
 8007df6:	600a      	str	r2, [r1, #0]
 8007df8:	001c      	movs	r4, r3
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	0015      	movs	r5, r2
 8007dfe:	0020      	movs	r0, r4
 8007e00:	0029      	movs	r1, r5
 8007e02:	0004      	movs	r4, r0
 8007e04:	0f62      	lsrs	r2, r4, #29
 8007e06:	000c      	movs	r4, r1
 8007e08:	00e4      	lsls	r4, r4, #3
 8007e0a:	617c      	str	r4, [r7, #20]
 8007e0c:	697c      	ldr	r4, [r7, #20]
 8007e0e:	4314      	orrs	r4, r2
 8007e10:	617c      	str	r4, [r7, #20]
 8007e12:	0001      	movs	r1, r0
 8007e14:	00c9      	lsls	r1, r1, #3
 8007e16:	6139      	str	r1, [r7, #16]
 8007e18:	603b      	str	r3, [r7, #0]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	607a      	str	r2, [r7, #4]
 8007e1e:	6838      	ldr	r0, [r7, #0]
 8007e20:	6879      	ldr	r1, [r7, #4]
 8007e22:	0004      	movs	r4, r0
 8007e24:	0f62      	lsrs	r2, r4, #29
 8007e26:	000c      	movs	r4, r1
 8007e28:	00e4      	lsls	r4, r4, #3
 8007e2a:	60fc      	str	r4, [r7, #12]
 8007e2c:	68fc      	ldr	r4, [r7, #12]
 8007e2e:	4314      	orrs	r4, r2
 8007e30:	60fc      	str	r4, [r7, #12]
 8007e32:	0001      	movs	r1, r0
 8007e34:	00ca      	lsls	r2, r1, #3
 8007e36:	60ba      	str	r2, [r7, #8]
 8007e38:	3307      	adds	r3, #7
 8007e3a:	08db      	lsrs	r3, r3, #3
 8007e3c:	00db      	lsls	r3, r3, #3
 8007e3e:	4669      	mov	r1, sp
 8007e40:	1acb      	subs	r3, r1, r3
 8007e42:	469d      	mov	sp, r3
 8007e44:	466b      	mov	r3, sp
 8007e46:	3300      	adds	r3, #0
 8007e48:	20f0      	movs	r0, #240	; 0xf0
 8007e4a:	0040      	lsls	r0, r0, #1
 8007e4c:	2218      	movs	r2, #24
 8007e4e:	1882      	adds	r2, r0, r2
 8007e50:	19d1      	adds	r1, r2, r7
 8007e52:	600b      	str	r3, [r1, #0]
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 8007e54:	4b41      	ldr	r3, [pc, #260]	; (8007f5c <astronode_send_cmd_rr+0x2b8>)
 8007e56:	22f8      	movs	r2, #248	; 0xf8
 8007e58:	0052      	lsls	r2, r2, #1
 8007e5a:	189b      	adds	r3, r3, r2
 8007e5c:	2218      	movs	r2, #24
 8007e5e:	4694      	mov	ip, r2
 8007e60:	44bc      	add	ip, r7
 8007e62:	4463      	add	r3, ip
 8007e64:	22c4      	movs	r2, #196	; 0xc4
 8007e66:	5a9b      	ldrh	r3, [r3, r2]
 8007e68:	3b03      	subs	r3, #3
 8007e6a:	0019      	movs	r1, r3
 8007e6c:	2350      	movs	r3, #80	; 0x50
 8007e6e:	2218      	movs	r2, #24
 8007e70:	189b      	adds	r3, r3, r2
 8007e72:	19db      	adds	r3, r3, r7
 8007e74:	3305      	adds	r3, #5
 8007e76:	4a3d      	ldr	r2, [pc, #244]	; (8007f6c <astronode_send_cmd_rr+0x2c8>)
 8007e78:	2418      	movs	r4, #24
 8007e7a:	1900      	adds	r0, r0, r4
 8007e7c:	19c0      	adds	r0, r0, r7
 8007e7e:	6800      	ldr	r0, [r0, #0]
 8007e80:	f002 fbd2 	bl	800a628 <snprintf>
 8007e84:	0002      	movs	r2, r0
 8007e86:	23ef      	movs	r3, #239	; 0xef
 8007e88:	005b      	lsls	r3, r3, #1
 8007e8a:	2118      	movs	r1, #24
 8007e8c:	185b      	adds	r3, r3, r1
 8007e8e:	19db      	adds	r3, r3, r7
 8007e90:	801a      	strh	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8007e92:	23f0      	movs	r3, #240	; 0xf0
 8007e94:	33ff      	adds	r3, #255	; 0xff
 8007e96:	2218      	movs	r2, #24
 8007e98:	189b      	adds	r3, r3, r2
 8007e9a:	19db      	adds	r3, r3, r7
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	701a      	strb	r2, [r3, #0]
 8007ea0:	e024      	b.n	8007eec <astronode_send_cmd_rr+0x248>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 8007ea2:	23f0      	movs	r3, #240	; 0xf0
 8007ea4:	33ff      	adds	r3, #255	; 0xff
 8007ea6:	2218      	movs	r2, #24
 8007ea8:	189b      	adds	r3, r3, r2
 8007eaa:	19db      	adds	r3, r3, r7
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	22f0      	movs	r2, #240	; 0xf0
 8007eb0:	0052      	lsls	r2, r2, #1
 8007eb2:	2118      	movs	r1, #24
 8007eb4:	1852      	adds	r2, r2, r1
 8007eb6:	19d2      	adds	r2, r2, r7
 8007eb8:	6812      	ldr	r2, [r2, #0]
 8007eba:	5cd3      	ldrb	r3, [r2, r3]
 8007ebc:	1c5a      	adds	r2, r3, #1
 8007ebe:	4b2c      	ldr	r3, [pc, #176]	; (8007f70 <astronode_send_cmd_rr+0x2cc>)
 8007ec0:	18d3      	adds	r3, r2, r3
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	001a      	movs	r2, r3
 8007ec6:	2397      	movs	r3, #151	; 0x97
 8007ec8:	4013      	ands	r3, r2
 8007eca:	d104      	bne.n	8007ed6 <astronode_send_cmd_rr+0x232>
                {
                    send_debug_logs("Command contains non printable characters");
 8007ecc:	4b29      	ldr	r3, [pc, #164]	; (8007f74 <astronode_send_cmd_rr+0x2d0>)
 8007ece:	0018      	movs	r0, r3
 8007ed0:	f7fb f852 	bl	8002f78 <send_debug_logs>
                    return;
 8007ed4:	e035      	b.n	8007f42 <astronode_send_cmd_rr+0x29e>
            for (uint8_t index = 0; index < command_content_size; index++)
 8007ed6:	21f0      	movs	r1, #240	; 0xf0
 8007ed8:	31ff      	adds	r1, #255	; 0xff
 8007eda:	2318      	movs	r3, #24
 8007edc:	18cb      	adds	r3, r1, r3
 8007ede:	19db      	adds	r3, r3, r7
 8007ee0:	781a      	ldrb	r2, [r3, #0]
 8007ee2:	2318      	movs	r3, #24
 8007ee4:	18cb      	adds	r3, r1, r3
 8007ee6:	19db      	adds	r3, r3, r7
 8007ee8:	3201      	adds	r2, #1
 8007eea:	701a      	strb	r2, [r3, #0]
 8007eec:	23f0      	movs	r3, #240	; 0xf0
 8007eee:	33ff      	adds	r3, #255	; 0xff
 8007ef0:	2218      	movs	r2, #24
 8007ef2:	189b      	adds	r3, r3, r2
 8007ef4:	19db      	adds	r3, r3, r7
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	22ef      	movs	r2, #239	; 0xef
 8007efc:	0052      	lsls	r2, r2, #1
 8007efe:	2118      	movs	r1, #24
 8007f00:	1852      	adds	r2, r2, r1
 8007f02:	19d2      	adds	r2, r2, r7
 8007f04:	8812      	ldrh	r2, [r2, #0]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d8cb      	bhi.n	8007ea2 <astronode_send_cmd_rr+0x1fe>
                }
            }
            send_debug_logs("Command content is: ");
 8007f0a:	4b1b      	ldr	r3, [pc, #108]	; (8007f78 <astronode_send_cmd_rr+0x2d4>)
 8007f0c:	0018      	movs	r0, r3
 8007f0e:	f7fb f833 	bl	8002f78 <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 8007f12:	2350      	movs	r3, #80	; 0x50
 8007f14:	2218      	movs	r2, #24
 8007f16:	189b      	adds	r3, r3, r2
 8007f18:	19db      	adds	r3, r3, r7
 8007f1a:	1d5a      	adds	r2, r3, #5
 8007f1c:	4917      	ldr	r1, [pc, #92]	; (8007f7c <astronode_send_cmd_rr+0x2d8>)
 8007f1e:	24f0      	movs	r4, #240	; 0xf0
 8007f20:	0064      	lsls	r4, r4, #1
 8007f22:	2318      	movs	r3, #24
 8007f24:	18e3      	adds	r3, r4, r3
 8007f26:	19db      	adds	r3, r3, r7
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	0018      	movs	r0, r3
 8007f2c:	f002 fbb0 	bl	800a690 <sprintf>
            send_debug_logs(command_content);
 8007f30:	2318      	movs	r3, #24
 8007f32:	18e3      	adds	r3, r4, r3
 8007f34:	19db      	adds	r3, r3, r7
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	0018      	movs	r0, r3
 8007f3a:	f7fb f81d 	bl	8002f78 <send_debug_logs>
 8007f3e:	46b5      	mov	sp, r6
 8007f40:	e005      	b.n	8007f4e <astronode_send_cmd_rr+0x2aa>
                return;
 8007f42:	46b5      	mov	sp, r6
 8007f44:	e003      	b.n	8007f4e <astronode_send_cmd_rr+0x2aa>
        }
        else
        {
            send_debug_logs("No command available.");
 8007f46:	4b0e      	ldr	r3, [pc, #56]	; (8007f80 <astronode_send_cmd_rr+0x2dc>)
 8007f48:	0018      	movs	r0, r3
 8007f4a:	f7fb f815 	bl	8002f78 <send_debug_logs>
        }
    }
}
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	2383      	movs	r3, #131	; 0x83
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	449d      	add	sp, r3
 8007f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f58:	fffffdf4 	.word	0xfffffdf4
 8007f5c:	fffffe60 	.word	0xfffffe60
 8007f60:	0801220c 	.word	0x0801220c
 8007f64:	08012228 	.word	0x08012228
 8007f68:	08012278 	.word	0x08012278
 8007f6c:	0801195c 	.word	0x0801195c
 8007f70:	08012b88 	.word	0x08012b88
 8007f74:	0801228c 	.word	0x0801228c
 8007f78:	080122b8 	.word	0x080122b8
 8007f7c:	080122d0 	.word	0x080122d0
 8007f80:	080122d4 	.word	0x080122d4

08007f84 <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 8007f88:	4b02      	ldr	r3, [pc, #8]	; (8007f94 <is_sak_available+0x10>)
 8007f8a:	781b      	ldrb	r3, [r3, #0]
}
 8007f8c:	0018      	movs	r0, r3
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	46c0      	nop			; (mov r8, r8)
 8007f94:	20000c90 	.word	0x20000c90

08007f98 <is_astronode_reset>:

bool is_astronode_reset()
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8007f9c:	4b02      	ldr	r3, [pc, #8]	; (8007fa8 <is_astronode_reset+0x10>)
 8007f9e:	781b      	ldrb	r3, [r3, #0]
}
 8007fa0:	0018      	movs	r0, r3
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	46c0      	nop			; (mov r8, r8)
 8007fa8:	20000c91 	.word	0x20000c91

08007fac <is_command_available>:

bool is_command_available()
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	af00      	add	r7, sp, #0
    return g_is_command_available;
 8007fb0:	4b02      	ldr	r3, [pc, #8]	; (8007fbc <is_command_available+0x10>)
 8007fb2:	781b      	ldrb	r3, [r3, #0]
}
 8007fb4:	0018      	movs	r0, r3
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	46c0      	nop			; (mov r8, r8)
 8007fbc:	20000c92 	.word	0x20000c92

08007fc0 <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	0002      	movs	r2, r0
 8007fc8:	6039      	str	r1, [r7, #0]
 8007fca:	1dfb      	adds	r3, r7, #7
 8007fcc:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 8007fce:	1dfb      	adds	r3, r7, #7
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	2b2f      	cmp	r3, #47	; 0x2f
 8007fd4:	d90b      	bls.n	8007fee <ascii_to_value+0x2e>
 8007fd6:	1dfb      	adds	r3, r7, #7
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	2b39      	cmp	r3, #57	; 0x39
 8007fdc:	d807      	bhi.n	8007fee <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 8007fde:	1dfb      	adds	r3, r7, #7
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	3b30      	subs	r3, #48	; 0x30
 8007fe4:	b2da      	uxtb	r2, r3
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	701a      	strb	r2, [r3, #0]
        return true;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e010      	b.n	8008010 <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 8007fee:	1dfb      	adds	r3, r7, #7
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	2b40      	cmp	r3, #64	; 0x40
 8007ff4:	d90b      	bls.n	800800e <ascii_to_value+0x4e>
 8007ff6:	1dfb      	adds	r3, r7, #7
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	2b46      	cmp	r3, #70	; 0x46
 8007ffc:	d807      	bhi.n	800800e <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 8007ffe:	1dfb      	adds	r3, r7, #7
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	3b37      	subs	r3, #55	; 0x37
 8008004:	b2da      	uxtb	r2, r3
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	701a      	strb	r2, [r3, #0]
        return true;
 800800a:	2301      	movs	r3, #1
 800800c:	e000      	b.n	8008010 <ascii_to_value+0x50>
    }
    else
    {
        return false;
 800800e:	2300      	movs	r3, #0
    }
}
 8008010:	0018      	movs	r0, r3
 8008012:	46bd      	mov	sp, r7
 8008014:	b002      	add	sp, #8
 8008016:	bd80      	pop	{r7, pc}

08008018 <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8008018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 8008022:	250e      	movs	r5, #14
 8008024:	197b      	adds	r3, r7, r5
 8008026:	2200      	movs	r2, #0
 8008028:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 800802a:	197b      	adds	r3, r7, r5
 800802c:	881b      	ldrh	r3, [r3, #0]
 800802e:	197a      	adds	r2, r7, r5
 8008030:	1c59      	adds	r1, r3, #1
 8008032:	8011      	strh	r1, [r2, #0]
 8008034:	001a      	movs	r2, r3
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	189b      	adds	r3, r3, r2
 800803a:	2202      	movs	r2, #2
 800803c:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	260a      	movs	r6, #10
 8008042:	19bc      	adds	r4, r7, r6
 8008044:	4a44      	ldr	r2, [pc, #272]	; (8008158 <astronode_create_request_transport+0x140>)
 8008046:	2101      	movs	r1, #1
 8008048:	0018      	movs	r0, r3
 800804a:	f000 fa7d 	bl	8008548 <calculate_crc>
 800804e:	0003      	movs	r3, r0
 8008050:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	1c58      	adds	r0, r3, #1
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	22c4      	movs	r2, #196	; 0xc4
 800805a:	5a99      	ldrh	r1, [r3, r2]
 800805c:	19bc      	adds	r4, r7, r6
 800805e:	19bb      	adds	r3, r7, r6
 8008060:	881b      	ldrh	r3, [r3, #0]
 8008062:	001a      	movs	r2, r3
 8008064:	f000 fa70 	bl	8008548 <calculate_crc>
 8008068:	0003      	movs	r3, r0
 800806a:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 800806c:	19bb      	adds	r3, r7, r6
 800806e:	881b      	ldrh	r3, [r3, #0]
 8008070:	021b      	lsls	r3, r3, #8
 8008072:	b21a      	sxth	r2, r3
 8008074:	0031      	movs	r1, r6
 8008076:	19bb      	adds	r3, r7, r6
 8008078:	881b      	ldrh	r3, [r3, #0]
 800807a:	0a1b      	lsrs	r3, r3, #8
 800807c:	b29b      	uxth	r3, r3
 800807e:	b21b      	sxth	r3, r3
 8008080:	4313      	orrs	r3, r2
 8008082:	b21a      	sxth	r2, r3
 8008084:	187b      	adds	r3, r7, r1
 8008086:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	7818      	ldrb	r0, [r3, #0]
 800808c:	197b      	adds	r3, r7, r5
 800808e:	881b      	ldrh	r3, [r3, #0]
 8008090:	683a      	ldr	r2, [r7, #0]
 8008092:	18d3      	adds	r3, r2, r3
 8008094:	0019      	movs	r1, r3
 8008096:	f000 fbeb 	bl	8008870 <uint8_to_ascii_buffer>
    index += 2;
 800809a:	197b      	adds	r3, r7, r5
 800809c:	197a      	adds	r2, r7, r5
 800809e:	8812      	ldrh	r2, [r2, #0]
 80080a0:	3202      	adds	r2, #2
 80080a2:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 80080a4:	230c      	movs	r3, #12
 80080a6:	18fb      	adds	r3, r7, r3
 80080a8:	2200      	movs	r2, #0
 80080aa:	801a      	strh	r2, [r3, #0]
 80080ac:	e017      	b.n	80080de <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 80080ae:	240c      	movs	r4, #12
 80080b0:	193b      	adds	r3, r7, r4
 80080b2:	881b      	ldrh	r3, [r3, #0]
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	18d3      	adds	r3, r2, r3
 80080b8:	7858      	ldrb	r0, [r3, #1]
 80080ba:	250e      	movs	r5, #14
 80080bc:	197b      	adds	r3, r7, r5
 80080be:	881b      	ldrh	r3, [r3, #0]
 80080c0:	683a      	ldr	r2, [r7, #0]
 80080c2:	18d3      	adds	r3, r2, r3
 80080c4:	0019      	movs	r1, r3
 80080c6:	f000 fbd3 	bl	8008870 <uint8_to_ascii_buffer>
        index += 2;
 80080ca:	197b      	adds	r3, r7, r5
 80080cc:	197a      	adds	r2, r7, r5
 80080ce:	8812      	ldrh	r2, [r2, #0]
 80080d0:	3202      	adds	r2, #2
 80080d2:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 80080d4:	193b      	adds	r3, r7, r4
 80080d6:	881a      	ldrh	r2, [r3, #0]
 80080d8:	193b      	adds	r3, r7, r4
 80080da:	3201      	adds	r2, #1
 80080dc:	801a      	strh	r2, [r3, #0]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	22c4      	movs	r2, #196	; 0xc4
 80080e2:	5a9b      	ldrh	r3, [r3, r2]
 80080e4:	220c      	movs	r2, #12
 80080e6:	18ba      	adds	r2, r7, r2
 80080e8:	8812      	ldrh	r2, [r2, #0]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d3df      	bcc.n	80080ae <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 80080ee:	250a      	movs	r5, #10
 80080f0:	197b      	adds	r3, r7, r5
 80080f2:	881b      	ldrh	r3, [r3, #0]
 80080f4:	0a1b      	lsrs	r3, r3, #8
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	b2d8      	uxtb	r0, r3
 80080fa:	240e      	movs	r4, #14
 80080fc:	193b      	adds	r3, r7, r4
 80080fe:	881b      	ldrh	r3, [r3, #0]
 8008100:	683a      	ldr	r2, [r7, #0]
 8008102:	18d3      	adds	r3, r2, r3
 8008104:	0019      	movs	r1, r3
 8008106:	f000 fbb3 	bl	8008870 <uint8_to_ascii_buffer>
    index += 2;
 800810a:	0021      	movs	r1, r4
 800810c:	187b      	adds	r3, r7, r1
 800810e:	187a      	adds	r2, r7, r1
 8008110:	8812      	ldrh	r2, [r2, #0]
 8008112:	3202      	adds	r2, #2
 8008114:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 8008116:	197b      	adds	r3, r7, r5
 8008118:	881b      	ldrh	r3, [r3, #0]
 800811a:	b2d8      	uxtb	r0, r3
 800811c:	000c      	movs	r4, r1
 800811e:	187b      	adds	r3, r7, r1
 8008120:	881b      	ldrh	r3, [r3, #0]
 8008122:	683a      	ldr	r2, [r7, #0]
 8008124:	18d3      	adds	r3, r2, r3
 8008126:	0019      	movs	r1, r3
 8008128:	f000 fba2 	bl	8008870 <uint8_to_ascii_buffer>
    index += 2;
 800812c:	0020      	movs	r0, r4
 800812e:	183b      	adds	r3, r7, r0
 8008130:	183a      	adds	r2, r7, r0
 8008132:	8812      	ldrh	r2, [r2, #0]
 8008134:	3202      	adds	r2, #2
 8008136:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 8008138:	183b      	adds	r3, r7, r0
 800813a:	881b      	ldrh	r3, [r3, #0]
 800813c:	183a      	adds	r2, r7, r0
 800813e:	1c59      	adds	r1, r3, #1
 8008140:	8011      	strh	r1, [r2, #0]
 8008142:	001a      	movs	r2, r3
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	189b      	adds	r3, r3, r2
 8008148:	2203      	movs	r2, #3
 800814a:	701a      	strb	r2, [r3, #0]

    return index;
 800814c:	183b      	adds	r3, r7, r0
 800814e:	881b      	ldrh	r3, [r3, #0]
}
 8008150:	0018      	movs	r0, r3
 8008152:	46bd      	mov	sp, r7
 8008154:	b005      	add	sp, #20
 8008156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008158:	0000ffff 	.word	0x0000ffff

0800815c <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 800815c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800815e:	b089      	sub	sp, #36	; 0x24
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	607a      	str	r2, [r7, #4]
 8008166:	230a      	movs	r3, #10
 8008168:	18fb      	adds	r3, r7, r3
 800816a:	1c0a      	adds	r2, r1, #0
 800816c:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	2b02      	cmp	r3, #2
 8008174:	d005      	beq.n	8008182 <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 8008176:	4bbd      	ldr	r3, [pc, #756]	; (800846c <astronode_decode_answer_transport+0x310>)
 8008178:	0018      	movs	r0, r3
 800817a:	f7fa fefd 	bl	8002f78 <send_debug_logs>
        return RS_FAILURE;
 800817e:	2300      	movs	r3, #0
 8008180:	e170      	b.n	8008464 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 8008182:	210a      	movs	r1, #10
 8008184:	187b      	adds	r3, r7, r1
 8008186:	881b      	ldrh	r3, [r3, #0]
 8008188:	2201      	movs	r2, #1
 800818a:	4013      	ands	r3, r2
 800818c:	b29b      	uxth	r3, r3
 800818e:	2b00      	cmp	r3, #0
 8008190:	d103      	bne.n	800819a <astronode_decode_answer_transport+0x3e>
 8008192:	187b      	adds	r3, r7, r1
 8008194:	881b      	ldrh	r3, [r3, #0]
 8008196:	2b07      	cmp	r3, #7
 8008198:	d805      	bhi.n	80081a6 <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 800819a:	4bb5      	ldr	r3, [pc, #724]	; (8008470 <astronode_decode_answer_transport+0x314>)
 800819c:	0018      	movs	r0, r3
 800819e:	f7fa feeb 	bl	8002f78 <send_debug_logs>
        return RS_FAILURE;
 80081a2:	2300      	movs	r3, #0
 80081a4:	e15e      	b.n	8008464 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 80081a6:	230a      	movs	r3, #10
 80081a8:	18fb      	adds	r3, r7, r3
 80081aa:	881b      	ldrh	r3, [r3, #0]
 80081ac:	3b08      	subs	r3, #8
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	da00      	bge.n	80081b4 <astronode_decode_answer_transport+0x58>
 80081b2:	3301      	adds	r3, #1
 80081b4:	105b      	asrs	r3, r3, #1
 80081b6:	b299      	uxth	r1, r3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	22c4      	movs	r2, #196	; 0xc4
 80081bc:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 80081be:	230a      	movs	r3, #10
 80081c0:	18fb      	adds	r3, r7, r3
 80081c2:	881b      	ldrh	r3, [r3, #0]
 80081c4:	3b01      	subs	r3, #1
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	18d3      	adds	r3, r2, r3
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	2b03      	cmp	r3, #3
 80081ce:	d005      	beq.n	80081dc <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 80081d0:	4ba8      	ldr	r3, [pc, #672]	; (8008474 <astronode_decode_answer_transport+0x318>)
 80081d2:	0018      	movs	r0, r3
 80081d4:	f7fa fed0 	bl	8002f78 <send_debug_logs>
        return RS_FAILURE;
 80081d8:	2300      	movs	r3, #0
 80081da:	e143      	b.n	8008464 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 80081dc:	2117      	movs	r1, #23
 80081de:	187b      	adds	r3, r7, r1
 80081e0:	2200      	movs	r2, #0
 80081e2:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 80081e4:	2416      	movs	r4, #22
 80081e6:	193b      	adds	r3, r7, r4
 80081e8:	2200      	movs	r2, #0
 80081ea:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	3301      	adds	r3, #1
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	187a      	adds	r2, r7, r1
 80081f4:	0011      	movs	r1, r2
 80081f6:	0018      	movs	r0, r3
 80081f8:	f7ff fee2 	bl	8007fc0 <ascii_to_value>
 80081fc:	0003      	movs	r3, r0
 80081fe:	001a      	movs	r2, r3
 8008200:	2301      	movs	r3, #1
 8008202:	4053      	eors	r3, r2
 8008204:	b2db      	uxtb	r3, r3
 8008206:	2b00      	cmp	r3, #0
 8008208:	d10e      	bne.n	8008228 <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	3302      	adds	r3, #2
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	193a      	adds	r2, r7, r4
 8008212:	0011      	movs	r1, r2
 8008214:	0018      	movs	r0, r3
 8008216:	f7ff fed3 	bl	8007fc0 <ascii_to_value>
 800821a:	0003      	movs	r3, r0
 800821c:	001a      	movs	r2, r3
 800821e:	2301      	movs	r3, #1
 8008220:	4053      	eors	r3, r2
 8008222:	b2db      	uxtb	r3, r3
 8008224:	2b00      	cmp	r3, #0
 8008226:	d005      	beq.n	8008234 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008228:	4b93      	ldr	r3, [pc, #588]	; (8008478 <astronode_decode_answer_transport+0x31c>)
 800822a:	0018      	movs	r0, r3
 800822c:	f7fa fea4 	bl	8002f78 <send_debug_logs>
        return RS_FAILURE;
 8008230:	2300      	movs	r3, #0
 8008232:	e117      	b.n	8008464 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 8008234:	2317      	movs	r3, #23
 8008236:	18fb      	adds	r3, r7, r3
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	011b      	lsls	r3, r3, #4
 800823c:	b2da      	uxtb	r2, r3
 800823e:	2316      	movs	r3, #22
 8008240:	18fb      	adds	r3, r7, r3
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	18d3      	adds	r3, r2, r3
 8008246:	b2da      	uxtb	r2, r3
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 800824c:	231e      	movs	r3, #30
 800824e:	18fb      	adds	r3, r7, r3
 8008250:	2203      	movs	r2, #3
 8008252:	801a      	strh	r2, [r3, #0]
 8008254:	231c      	movs	r3, #28
 8008256:	18fb      	adds	r3, r7, r3
 8008258:	2200      	movs	r2, #0
 800825a:	801a      	strh	r2, [r3, #0]
 800825c:	e045      	b.n	80082ea <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 800825e:	241e      	movs	r4, #30
 8008260:	193b      	adds	r3, r7, r4
 8008262:	881b      	ldrh	r3, [r3, #0]
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	18d3      	adds	r3, r2, r3
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	2217      	movs	r2, #23
 800826c:	18ba      	adds	r2, r7, r2
 800826e:	0011      	movs	r1, r2
 8008270:	0018      	movs	r0, r3
 8008272:	f7ff fea5 	bl	8007fc0 <ascii_to_value>
 8008276:	0003      	movs	r3, r0
 8008278:	001a      	movs	r2, r3
 800827a:	2301      	movs	r3, #1
 800827c:	4053      	eors	r3, r2
 800827e:	b2db      	uxtb	r3, r3
 8008280:	2b00      	cmp	r3, #0
 8008282:	d112      	bne.n	80082aa <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 8008284:	193b      	adds	r3, r7, r4
 8008286:	881b      	ldrh	r3, [r3, #0]
 8008288:	3301      	adds	r3, #1
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	18d3      	adds	r3, r2, r3
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	2216      	movs	r2, #22
 8008292:	18ba      	adds	r2, r7, r2
 8008294:	0011      	movs	r1, r2
 8008296:	0018      	movs	r0, r3
 8008298:	f7ff fe92 	bl	8007fc0 <ascii_to_value>
 800829c:	0003      	movs	r3, r0
 800829e:	001a      	movs	r2, r3
 80082a0:	2301      	movs	r3, #1
 80082a2:	4053      	eors	r3, r2
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d005      	beq.n	80082b6 <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 80082aa:	4b73      	ldr	r3, [pc, #460]	; (8008478 <astronode_decode_answer_transport+0x31c>)
 80082ac:	0018      	movs	r0, r3
 80082ae:	f7fa fe63 	bl	8002f78 <send_debug_logs>
            return RS_FAILURE;
 80082b2:	2300      	movs	r3, #0
 80082b4:	e0d6      	b.n	8008464 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 80082b6:	2317      	movs	r3, #23
 80082b8:	18fb      	adds	r3, r7, r3
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	011b      	lsls	r3, r3, #4
 80082be:	b2d9      	uxtb	r1, r3
 80082c0:	2316      	movs	r3, #22
 80082c2:	18fb      	adds	r3, r7, r3
 80082c4:	781a      	ldrb	r2, [r3, #0]
 80082c6:	201c      	movs	r0, #28
 80082c8:	183b      	adds	r3, r7, r0
 80082ca:	881b      	ldrh	r3, [r3, #0]
 80082cc:	1838      	adds	r0, r7, r0
 80082ce:	1c5c      	adds	r4, r3, #1
 80082d0:	8004      	strh	r4, [r0, #0]
 80082d2:	0018      	movs	r0, r3
 80082d4:	188b      	adds	r3, r1, r2
 80082d6:	b2da      	uxtb	r2, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	181b      	adds	r3, r3, r0
 80082dc:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 80082de:	221e      	movs	r2, #30
 80082e0:	18bb      	adds	r3, r7, r2
 80082e2:	18ba      	adds	r2, r7, r2
 80082e4:	8812      	ldrh	r2, [r2, #0]
 80082e6:	3202      	adds	r2, #2
 80082e8:	801a      	strh	r2, [r3, #0]
 80082ea:	231e      	movs	r3, #30
 80082ec:	18fb      	adds	r3, r7, r3
 80082ee:	881a      	ldrh	r2, [r3, #0]
 80082f0:	260a      	movs	r6, #10
 80082f2:	19bb      	adds	r3, r7, r6
 80082f4:	881b      	ldrh	r3, [r3, #0]
 80082f6:	3b05      	subs	r3, #5
 80082f8:	429a      	cmp	r2, r3
 80082fa:	dbb0      	blt.n	800825e <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	251a      	movs	r5, #26
 8008300:	197c      	adds	r4, r7, r5
 8008302:	4a5e      	ldr	r2, [pc, #376]	; (800847c <astronode_decode_answer_transport+0x320>)
 8008304:	2101      	movs	r1, #1
 8008306:	0018      	movs	r0, r3
 8008308:	f000 f91e 	bl	8008548 <calculate_crc>
 800830c:	0003      	movs	r3, r0
 800830e:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	1c58      	adds	r0, r3, #1
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	22c4      	movs	r2, #196	; 0xc4
 8008318:	5a99      	ldrh	r1, [r3, r2]
 800831a:	197c      	adds	r4, r7, r5
 800831c:	197b      	adds	r3, r7, r5
 800831e:	881b      	ldrh	r3, [r3, #0]
 8008320:	001a      	movs	r2, r3
 8008322:	f000 f911 	bl	8008548 <calculate_crc>
 8008326:	0003      	movs	r3, r0
 8008328:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 800832a:	197b      	adds	r3, r7, r5
 800832c:	881b      	ldrh	r3, [r3, #0]
 800832e:	021b      	lsls	r3, r3, #8
 8008330:	b21a      	sxth	r2, r3
 8008332:	0029      	movs	r1, r5
 8008334:	197b      	adds	r3, r7, r5
 8008336:	881b      	ldrh	r3, [r3, #0]
 8008338:	0a1b      	lsrs	r3, r3, #8
 800833a:	b29b      	uxth	r3, r3
 800833c:	b21b      	sxth	r3, r3
 800833e:	4313      	orrs	r3, r2
 8008340:	b21a      	sxth	r2, r3
 8008342:	187b      	adds	r3, r7, r1
 8008344:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 8008346:	19bb      	adds	r3, r7, r6
 8008348:	881b      	ldrh	r3, [r3, #0]
 800834a:	3b05      	subs	r3, #5
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	18d3      	adds	r3, r2, r3
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	2217      	movs	r2, #23
 8008354:	18ba      	adds	r2, r7, r2
 8008356:	0011      	movs	r1, r2
 8008358:	0018      	movs	r0, r3
 800835a:	f7ff fe31 	bl	8007fc0 <ascii_to_value>
 800835e:	0003      	movs	r3, r0
 8008360:	001a      	movs	r2, r3
 8008362:	2301      	movs	r3, #1
 8008364:	4053      	eors	r3, r2
 8008366:	b2db      	uxtb	r3, r3
 8008368:	2b00      	cmp	r3, #0
 800836a:	d112      	bne.n	8008392 <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 800836c:	19bb      	adds	r3, r7, r6
 800836e:	881b      	ldrh	r3, [r3, #0]
 8008370:	3b04      	subs	r3, #4
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	18d3      	adds	r3, r2, r3
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	2216      	movs	r2, #22
 800837a:	18ba      	adds	r2, r7, r2
 800837c:	0011      	movs	r1, r2
 800837e:	0018      	movs	r0, r3
 8008380:	f7ff fe1e 	bl	8007fc0 <ascii_to_value>
 8008384:	0003      	movs	r3, r0
 8008386:	001a      	movs	r2, r3
 8008388:	2301      	movs	r3, #1
 800838a:	4053      	eors	r3, r2
 800838c:	b2db      	uxtb	r3, r3
 800838e:	2b00      	cmp	r3, #0
 8008390:	d005      	beq.n	800839e <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008392:	4b39      	ldr	r3, [pc, #228]	; (8008478 <astronode_decode_answer_transport+0x31c>)
 8008394:	0018      	movs	r0, r3
 8008396:	f7fa fdef 	bl	8002f78 <send_debug_logs>
        return RS_FAILURE;
 800839a:	2300      	movs	r3, #0
 800839c:	e062      	b.n	8008464 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 800839e:	2017      	movs	r0, #23
 80083a0:	183b      	adds	r3, r7, r0
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	031b      	lsls	r3, r3, #12
 80083a8:	b299      	uxth	r1, r3
 80083aa:	2416      	movs	r4, #22
 80083ac:	193b      	adds	r3, r7, r4
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	021b      	lsls	r3, r3, #8
 80083b4:	b29a      	uxth	r2, r3
 80083b6:	2318      	movs	r3, #24
 80083b8:	18fb      	adds	r3, r7, r3
 80083ba:	188a      	adds	r2, r1, r2
 80083bc:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 80083be:	250a      	movs	r5, #10
 80083c0:	197b      	adds	r3, r7, r5
 80083c2:	881b      	ldrh	r3, [r3, #0]
 80083c4:	3b03      	subs	r3, #3
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	18d3      	adds	r3, r2, r3
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	183a      	adds	r2, r7, r0
 80083ce:	0011      	movs	r1, r2
 80083d0:	0018      	movs	r0, r3
 80083d2:	f7ff fdf5 	bl	8007fc0 <ascii_to_value>
 80083d6:	0003      	movs	r3, r0
 80083d8:	001a      	movs	r2, r3
 80083da:	2301      	movs	r3, #1
 80083dc:	4053      	eors	r3, r2
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d111      	bne.n	8008408 <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 80083e4:	197b      	adds	r3, r7, r5
 80083e6:	881b      	ldrh	r3, [r3, #0]
 80083e8:	3b02      	subs	r3, #2
 80083ea:	68fa      	ldr	r2, [r7, #12]
 80083ec:	18d3      	adds	r3, r2, r3
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	193a      	adds	r2, r7, r4
 80083f2:	0011      	movs	r1, r2
 80083f4:	0018      	movs	r0, r3
 80083f6:	f7ff fde3 	bl	8007fc0 <ascii_to_value>
 80083fa:	0003      	movs	r3, r0
 80083fc:	001a      	movs	r2, r3
 80083fe:	2301      	movs	r3, #1
 8008400:	4053      	eors	r3, r2
 8008402:	b2db      	uxtb	r3, r3
 8008404:	2b00      	cmp	r3, #0
 8008406:	d005      	beq.n	8008414 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008408:	4b1b      	ldr	r3, [pc, #108]	; (8008478 <astronode_decode_answer_transport+0x31c>)
 800840a:	0018      	movs	r0, r3
 800840c:	f7fa fdb4 	bl	8002f78 <send_debug_logs>
        return RS_FAILURE;
 8008410:	2300      	movs	r3, #0
 8008412:	e027      	b.n	8008464 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 8008414:	2317      	movs	r3, #23
 8008416:	18fb      	adds	r3, r7, r3
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	b29b      	uxth	r3, r3
 800841c:	011b      	lsls	r3, r3, #4
 800841e:	b29a      	uxth	r2, r3
 8008420:	2316      	movs	r3, #22
 8008422:	18fb      	adds	r3, r7, r3
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	b29b      	uxth	r3, r3
 8008428:	18d3      	adds	r3, r2, r3
 800842a:	b299      	uxth	r1, r3
 800842c:	2018      	movs	r0, #24
 800842e:	183b      	adds	r3, r7, r0
 8008430:	183a      	adds	r2, r7, r0
 8008432:	8812      	ldrh	r2, [r2, #0]
 8008434:	188a      	adds	r2, r1, r2
 8008436:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 8008438:	183a      	adds	r2, r7, r0
 800843a:	231a      	movs	r3, #26
 800843c:	18fb      	adds	r3, r7, r3
 800843e:	8812      	ldrh	r2, [r2, #0]
 8008440:	881b      	ldrh	r3, [r3, #0]
 8008442:	429a      	cmp	r2, r3
 8008444:	d005      	beq.n	8008452 <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 8008446:	4b0e      	ldr	r3, [pc, #56]	; (8008480 <astronode_decode_answer_transport+0x324>)
 8008448:	0018      	movs	r0, r3
 800844a:	f7fa fd95 	bl	8002f78 <send_debug_logs>
        return RS_FAILURE;
 800844e:	2300      	movs	r3, #0
 8008450:	e008      	b.n	8008464 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	2bff      	cmp	r3, #255	; 0xff
 8008458:	d103      	bne.n	8008462 <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	0018      	movs	r0, r3
 800845e:	f000 f8c3 	bl	80085e8 <check_for_error>
    }

    return RS_SUCCESS;
 8008462:	2301      	movs	r3, #1
}
 8008464:	0018      	movs	r0, r3
 8008466:	46bd      	mov	sp, r7
 8008468:	b009      	add	sp, #36	; 0x24
 800846a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800846c:	08012364 	.word	0x08012364
 8008470:	080123b4 	.word	0x080123b4
 8008474:	08012404 	.word	0x08012404
 8008478:	08012454 	.word	0x08012454
 800847c:	0000ffff 	.word	0x0000ffff
 8008480:	080124a0 	.word	0x080124a0

08008484 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 8008484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008486:	4c2b      	ldr	r4, [pc, #172]	; (8008534 <astronode_transport_send_receive+0xb0>)
 8008488:	44a5      	add	sp, r4
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
 800848e:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8008490:	4b29      	ldr	r3, [pc, #164]	; (8008538 <astronode_transport_send_receive+0xb4>)
 8008492:	25ca      	movs	r5, #202	; 0xca
 8008494:	00ad      	lsls	r5, r5, #2
 8008496:	195b      	adds	r3, r3, r5
 8008498:	19db      	adds	r3, r3, r7
 800849a:	2200      	movs	r2, #0
 800849c:	601a      	str	r2, [r3, #0]
 800849e:	3304      	adds	r3, #4
 80084a0:	22c4      	movs	r2, #196	; 0xc4
 80084a2:	0052      	lsls	r2, r2, #1
 80084a4:	2100      	movs	r1, #0
 80084a6:	0018      	movs	r0, r3
 80084a8:	f002 f988 	bl	800a7bc <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 80084ac:	4b23      	ldr	r3, [pc, #140]	; (800853c <astronode_transport_send_receive+0xb8>)
 80084ae:	195b      	adds	r3, r3, r5
 80084b0:	19db      	adds	r3, r3, r7
 80084b2:	2200      	movs	r2, #0
 80084b4:	601a      	str	r2, [r3, #0]
 80084b6:	3304      	adds	r3, #4
 80084b8:	22c4      	movs	r2, #196	; 0xc4
 80084ba:	0052      	lsls	r2, r2, #1
 80084bc:	2100      	movs	r1, #0
 80084be:	0018      	movs	r0, r3
 80084c0:	f002 f97c 	bl	800a7bc <memset>
    uint16_t answer_length =  0;
 80084c4:	4b1e      	ldr	r3, [pc, #120]	; (8008540 <astronode_transport_send_receive+0xbc>)
 80084c6:	195b      	adds	r3, r3, r5
 80084c8:	19db      	adds	r3, r3, r7
 80084ca:	2200      	movs	r2, #0
 80084cc:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 80084ce:	4e1d      	ldr	r6, [pc, #116]	; (8008544 <astronode_transport_send_receive+0xc0>)
 80084d0:	19bc      	adds	r4, r7, r6
 80084d2:	23cc      	movs	r3, #204	; 0xcc
 80084d4:	005b      	lsls	r3, r3, #1
 80084d6:	18fa      	adds	r2, r7, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	0011      	movs	r1, r2
 80084dc:	0018      	movs	r0, r3
 80084de:	f7ff fd9b 	bl	8008018 <astronode_create_request_transport>
 80084e2:	0003      	movs	r3, r0
 80084e4:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 80084e6:	19bb      	adds	r3, r7, r6
 80084e8:	881a      	ldrh	r2, [r3, #0]
 80084ea:	23cc      	movs	r3, #204	; 0xcc
 80084ec:	005b      	lsls	r3, r3, #1
 80084ee:	18fb      	adds	r3, r7, r3
 80084f0:	0011      	movs	r1, r2
 80084f2:	0018      	movs	r0, r3
 80084f4:	f7fa fd8a 	bl	800300c <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 80084f8:	230a      	movs	r3, #10
 80084fa:	18fa      	adds	r2, r7, r3
 80084fc:	240c      	movs	r4, #12
 80084fe:	193b      	adds	r3, r7, r4
 8008500:	0011      	movs	r1, r2
 8008502:	0018      	movs	r0, r3
 8008504:	f000 f92c 	bl	8008760 <receive_astronode_answer>
 8008508:	0003      	movs	r3, r0
 800850a:	2b01      	cmp	r3, #1
 800850c:	d10a      	bne.n	8008524 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 800850e:	4b0c      	ldr	r3, [pc, #48]	; (8008540 <astronode_transport_send_receive+0xbc>)
 8008510:	195b      	adds	r3, r3, r5
 8008512:	19db      	adds	r3, r3, r7
 8008514:	8819      	ldrh	r1, [r3, #0]
 8008516:	683a      	ldr	r2, [r7, #0]
 8008518:	193b      	adds	r3, r7, r4
 800851a:	0018      	movs	r0, r3
 800851c:	f7ff fe1e 	bl	800815c <astronode_decode_answer_transport>
 8008520:	0003      	movs	r3, r0
 8008522:	e000      	b.n	8008526 <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 8008524:	2300      	movs	r3, #0
    }
}
 8008526:	0018      	movs	r0, r3
 8008528:	46bd      	mov	sp, r7
 800852a:	23cb      	movs	r3, #203	; 0xcb
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	449d      	add	sp, r3
 8008530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008532:	46c0      	nop			; (mov r8, r8)
 8008534:	fffffcd4 	.word	0xfffffcd4
 8008538:	fffffe70 	.word	0xfffffe70
 800853c:	fffffce4 	.word	0xfffffce4
 8008540:	fffffce2 	.word	0xfffffce2
 8008544:	00000326 	.word	0x00000326

08008548 <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 8008548:	b590      	push	{r4, r7, lr}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	0008      	movs	r0, r1
 8008552:	0011      	movs	r1, r2
 8008554:	1cbb      	adds	r3, r7, #2
 8008556:	1c02      	adds	r2, r0, #0
 8008558:	801a      	strh	r2, [r3, #0]
 800855a:	003b      	movs	r3, r7
 800855c:	1c0a      	adds	r2, r1, #0
 800855e:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 8008560:	230e      	movs	r3, #14
 8008562:	18fb      	adds	r3, r7, r3
 8008564:	003a      	movs	r2, r7
 8008566:	8812      	ldrh	r2, [r2, #0]
 8008568:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 800856a:	e02e      	b.n	80085ca <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 800856c:	240e      	movs	r4, #14
 800856e:	193b      	adds	r3, r7, r4
 8008570:	881b      	ldrh	r3, [r3, #0]
 8008572:	0a1b      	lsrs	r3, r3, #8
 8008574:	b299      	uxth	r1, r3
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	1c5a      	adds	r2, r3, #1
 800857a:	607a      	str	r2, [r7, #4]
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	b29a      	uxth	r2, r3
 8008580:	200c      	movs	r0, #12
 8008582:	183b      	adds	r3, r7, r0
 8008584:	404a      	eors	r2, r1
 8008586:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 8008588:	183b      	adds	r3, r7, r0
 800858a:	881b      	ldrh	r3, [r3, #0]
 800858c:	091b      	lsrs	r3, r3, #4
 800858e:	b299      	uxth	r1, r3
 8008590:	183b      	adds	r3, r7, r0
 8008592:	183a      	adds	r2, r7, r0
 8008594:	8812      	ldrh	r2, [r2, #0]
 8008596:	404a      	eors	r2, r1
 8008598:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 800859a:	0021      	movs	r1, r4
 800859c:	187b      	adds	r3, r7, r1
 800859e:	881b      	ldrh	r3, [r3, #0]
 80085a0:	021b      	lsls	r3, r3, #8
 80085a2:	b21a      	sxth	r2, r3
 80085a4:	183b      	adds	r3, r7, r0
 80085a6:	881b      	ldrh	r3, [r3, #0]
 80085a8:	031b      	lsls	r3, r3, #12
 80085aa:	b21b      	sxth	r3, r3
 80085ac:	4053      	eors	r3, r2
 80085ae:	b21a      	sxth	r2, r3
 80085b0:	183b      	adds	r3, r7, r0
 80085b2:	881b      	ldrh	r3, [r3, #0]
 80085b4:	015b      	lsls	r3, r3, #5
 80085b6:	b21b      	sxth	r3, r3
 80085b8:	4053      	eors	r3, r2
 80085ba:	b21a      	sxth	r2, r3
 80085bc:	183b      	adds	r3, r7, r0
 80085be:	2000      	movs	r0, #0
 80085c0:	5e1b      	ldrsh	r3, [r3, r0]
 80085c2:	4053      	eors	r3, r2
 80085c4:	b21a      	sxth	r2, r3
 80085c6:	187b      	adds	r3, r7, r1
 80085c8:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 80085ca:	1cbb      	adds	r3, r7, #2
 80085cc:	881b      	ldrh	r3, [r3, #0]
 80085ce:	1cba      	adds	r2, r7, #2
 80085d0:	1e59      	subs	r1, r3, #1
 80085d2:	8011      	strh	r1, [r2, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d1c9      	bne.n	800856c <calculate_crc+0x24>
    }
    return crc;
 80085d8:	230e      	movs	r3, #14
 80085da:	18fb      	adds	r3, r7, r3
 80085dc:	881b      	ldrh	r3, [r3, #0]
}
 80085de:	0018      	movs	r0, r3
 80085e0:	46bd      	mov	sp, r7
 80085e2:	b005      	add	sp, #20
 80085e4:	bd90      	pop	{r4, r7, pc}
	...

080085e8 <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	785b      	ldrb	r3, [r3, #1]
 80085f4:	b299      	uxth	r1, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	789b      	ldrb	r3, [r3, #2]
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	021b      	lsls	r3, r3, #8
 80085fe:	b29a      	uxth	r2, r3
 8008600:	200e      	movs	r0, #14
 8008602:	183b      	adds	r3, r7, r0
 8008604:	188a      	adds	r2, r1, r2
 8008606:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 8008608:	183b      	adds	r3, r7, r0
 800860a:	881b      	ldrh	r3, [r3, #0]
 800860c:	4a40      	ldr	r2, [pc, #256]	; (8008710 <check_for_error+0x128>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d100      	bne.n	8008614 <check_for_error+0x2c>
 8008612:	e06f      	b.n	80086f4 <check_for_error+0x10c>
 8008614:	4a3e      	ldr	r2, [pc, #248]	; (8008710 <check_for_error+0x128>)
 8008616:	4293      	cmp	r3, r2
 8008618:	dd00      	ble.n	800861c <check_for_error+0x34>
 800861a:	e070      	b.n	80086fe <check_for_error+0x116>
 800861c:	4a3d      	ldr	r2, [pc, #244]	; (8008714 <check_for_error+0x12c>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d100      	bne.n	8008624 <check_for_error+0x3c>
 8008622:	e062      	b.n	80086ea <check_for_error+0x102>
 8008624:	4a3b      	ldr	r2, [pc, #236]	; (8008714 <check_for_error+0x12c>)
 8008626:	4293      	cmp	r3, r2
 8008628:	dd00      	ble.n	800862c <check_for_error+0x44>
 800862a:	e068      	b.n	80086fe <check_for_error+0x116>
 800862c:	4a3a      	ldr	r2, [pc, #232]	; (8008718 <check_for_error+0x130>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d056      	beq.n	80086e0 <check_for_error+0xf8>
 8008632:	4a39      	ldr	r2, [pc, #228]	; (8008718 <check_for_error+0x130>)
 8008634:	4293      	cmp	r3, r2
 8008636:	dd00      	ble.n	800863a <check_for_error+0x52>
 8008638:	e061      	b.n	80086fe <check_for_error+0x116>
 800863a:	4a38      	ldr	r2, [pc, #224]	; (800871c <check_for_error+0x134>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d04a      	beq.n	80086d6 <check_for_error+0xee>
 8008640:	4a36      	ldr	r2, [pc, #216]	; (800871c <check_for_error+0x134>)
 8008642:	4293      	cmp	r3, r2
 8008644:	dc5b      	bgt.n	80086fe <check_for_error+0x116>
 8008646:	4a36      	ldr	r2, [pc, #216]	; (8008720 <check_for_error+0x138>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d03f      	beq.n	80086cc <check_for_error+0xe4>
 800864c:	4a34      	ldr	r2, [pc, #208]	; (8008720 <check_for_error+0x138>)
 800864e:	4293      	cmp	r3, r2
 8008650:	dc55      	bgt.n	80086fe <check_for_error+0x116>
 8008652:	4a34      	ldr	r2, [pc, #208]	; (8008724 <check_for_error+0x13c>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d034      	beq.n	80086c2 <check_for_error+0xda>
 8008658:	4a32      	ldr	r2, [pc, #200]	; (8008724 <check_for_error+0x13c>)
 800865a:	4293      	cmp	r3, r2
 800865c:	dc4f      	bgt.n	80086fe <check_for_error+0x116>
 800865e:	4a32      	ldr	r2, [pc, #200]	; (8008728 <check_for_error+0x140>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d029      	beq.n	80086b8 <check_for_error+0xd0>
 8008664:	4a30      	ldr	r2, [pc, #192]	; (8008728 <check_for_error+0x140>)
 8008666:	4293      	cmp	r3, r2
 8008668:	dc49      	bgt.n	80086fe <check_for_error+0x116>
 800866a:	4a30      	ldr	r2, [pc, #192]	; (800872c <check_for_error+0x144>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d01e      	beq.n	80086ae <check_for_error+0xc6>
 8008670:	4a2e      	ldr	r2, [pc, #184]	; (800872c <check_for_error+0x144>)
 8008672:	4293      	cmp	r3, r2
 8008674:	dc43      	bgt.n	80086fe <check_for_error+0x116>
 8008676:	2222      	movs	r2, #34	; 0x22
 8008678:	32ff      	adds	r2, #255	; 0xff
 800867a:	4293      	cmp	r3, r2
 800867c:	d012      	beq.n	80086a4 <check_for_error+0xbc>
 800867e:	2291      	movs	r2, #145	; 0x91
 8008680:	0052      	lsls	r2, r2, #1
 8008682:	4293      	cmp	r3, r2
 8008684:	da3b      	bge.n	80086fe <check_for_error+0x116>
 8008686:	2b01      	cmp	r3, #1
 8008688:	d002      	beq.n	8008690 <check_for_error+0xa8>
 800868a:	2b11      	cmp	r3, #17
 800868c:	d005      	beq.n	800869a <check_for_error+0xb2>
 800868e:	e036      	b.n	80086fe <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 8008690:	4b27      	ldr	r3, [pc, #156]	; (8008730 <check_for_error+0x148>)
 8008692:	0018      	movs	r0, r3
 8008694:	f7fa fc70 	bl	8002f78 <send_debug_logs>
            break;
 8008698:	e036      	b.n	8008708 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 800869a:	4b26      	ldr	r3, [pc, #152]	; (8008734 <check_for_error+0x14c>)
 800869c:	0018      	movs	r0, r3
 800869e:	f7fa fc6b 	bl	8002f78 <send_debug_logs>
            break;
 80086a2:	e031      	b.n	8008708 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 80086a4:	4b24      	ldr	r3, [pc, #144]	; (8008738 <check_for_error+0x150>)
 80086a6:	0018      	movs	r0, r3
 80086a8:	f7fa fc66 	bl	8002f78 <send_debug_logs>
            break;
 80086ac:	e02c      	b.n	8008708 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 80086ae:	4b23      	ldr	r3, [pc, #140]	; (800873c <check_for_error+0x154>)
 80086b0:	0018      	movs	r0, r3
 80086b2:	f7fa fc61 	bl	8002f78 <send_debug_logs>
            break;
 80086b6:	e027      	b.n	8008708 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 80086b8:	4b21      	ldr	r3, [pc, #132]	; (8008740 <check_for_error+0x158>)
 80086ba:	0018      	movs	r0, r3
 80086bc:	f7fa fc5c 	bl	8002f78 <send_debug_logs>
            break;
 80086c0:	e022      	b.n	8008708 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 80086c2:	4b20      	ldr	r3, [pc, #128]	; (8008744 <check_for_error+0x15c>)
 80086c4:	0018      	movs	r0, r3
 80086c6:	f7fa fc57 	bl	8002f78 <send_debug_logs>
            break;
 80086ca:	e01d      	b.n	8008708 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 80086cc:	4b1e      	ldr	r3, [pc, #120]	; (8008748 <check_for_error+0x160>)
 80086ce:	0018      	movs	r0, r3
 80086d0:	f7fa fc52 	bl	8002f78 <send_debug_logs>
            break;
 80086d4:	e018      	b.n	8008708 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 80086d6:	4b1d      	ldr	r3, [pc, #116]	; (800874c <check_for_error+0x164>)
 80086d8:	0018      	movs	r0, r3
 80086da:	f7fa fc4d 	bl	8002f78 <send_debug_logs>
            break;
 80086de:	e013      	b.n	8008708 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 80086e0:	4b1b      	ldr	r3, [pc, #108]	; (8008750 <check_for_error+0x168>)
 80086e2:	0018      	movs	r0, r3
 80086e4:	f7fa fc48 	bl	8002f78 <send_debug_logs>
            break;
 80086e8:	e00e      	b.n	8008708 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 80086ea:	4b1a      	ldr	r3, [pc, #104]	; (8008754 <check_for_error+0x16c>)
 80086ec:	0018      	movs	r0, r3
 80086ee:	f7fa fc43 	bl	8002f78 <send_debug_logs>
            break;
 80086f2:	e009      	b.n	8008708 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 80086f4:	4b18      	ldr	r3, [pc, #96]	; (8008758 <check_for_error+0x170>)
 80086f6:	0018      	movs	r0, r3
 80086f8:	f7fa fc3e 	bl	8002f78 <send_debug_logs>
            break;
 80086fc:	e004      	b.n	8008708 <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 80086fe:	4b17      	ldr	r3, [pc, #92]	; (800875c <check_for_error+0x174>)
 8008700:	0018      	movs	r0, r3
 8008702:	f7fa fc39 	bl	8002f78 <send_debug_logs>
            break;
 8008706:	46c0      	nop			; (mov r8, r8)
    }
}
 8008708:	46c0      	nop			; (mov r8, r8)
 800870a:	46bd      	mov	sp, r7
 800870c:	b004      	add	sp, #16
 800870e:	bd80      	pop	{r7, pc}
 8008710:	00004601 	.word	0x00004601
 8008714:	00004501 	.word	0x00004501
 8008718:	00003501 	.word	0x00003501
 800871c:	00002601 	.word	0x00002601
 8008720:	00002511 	.word	0x00002511
 8008724:	00002501 	.word	0x00002501
 8008728:	00000611 	.word	0x00000611
 800872c:	00000601 	.word	0x00000601
 8008730:	080124e4 	.word	0x080124e4
 8008734:	08012530 	.word	0x08012530
 8008738:	08012594 	.word	0x08012594
 800873c:	080125cc 	.word	0x080125cc
 8008740:	08012670 	.word	0x08012670
 8008744:	080126d8 	.word	0x080126d8
 8008748:	08012738 	.word	0x08012738
 800874c:	080127c4 	.word	0x080127c4
 8008750:	08012824 	.word	0x08012824
 8008754:	080128d0 	.word	0x080128d0
 8008758:	0801291c 	.word	0x0801291c
 800875c:	08012964 	.word	0x08012964

08008760 <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 8008760:	b5b0      	push	{r4, r5, r7, lr}
 8008762:	b086      	sub	sp, #24
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 800876a:	230f      	movs	r3, #15
 800876c:	18fb      	adds	r3, r7, r3
 800876e:	2200      	movs	r2, #0
 8008770:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 8008772:	2316      	movs	r3, #22
 8008774:	18fb      	adds	r3, r7, r3
 8008776:	2200      	movs	r2, #0
 8008778:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 800877a:	f7fa fc8b 	bl	8003094 <get_systick>
 800877e:	0003      	movs	r3, r0
 8008780:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 8008782:	2315      	movs	r3, #21
 8008784:	18fb      	adds	r3, r7, r3
 8008786:	2200      	movs	r2, #0
 8008788:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 800878a:	e054      	b.n	8008836 <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 800878c:	4a34      	ldr	r2, [pc, #208]	; (8008860 <receive_astronode_answer+0x100>)
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	0011      	movs	r1, r2
 8008792:	0018      	movs	r0, r3
 8008794:	f7fa fc86 	bl	80030a4 <is_systick_timeout_over>
 8008798:	1e03      	subs	r3, r0, #0
 800879a:	d005      	beq.n	80087a8 <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 800879c:	4b31      	ldr	r3, [pc, #196]	; (8008864 <receive_astronode_answer+0x104>)
 800879e:	0018      	movs	r0, r3
 80087a0:	f7fa fbea 	bl	8002f78 <send_debug_logs>
            return RS_FAILURE;
 80087a4:	2300      	movs	r3, #0
 80087a6:	e057      	b.n	8008858 <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 80087a8:	250f      	movs	r5, #15
 80087aa:	197b      	adds	r3, r7, r5
 80087ac:	0018      	movs	r0, r3
 80087ae:	f7fa fc4b 	bl	8003048 <is_astronode_character_received>
 80087b2:	0003      	movs	r3, r0
 80087b4:	0019      	movs	r1, r3
 80087b6:	2016      	movs	r0, #22
 80087b8:	183b      	adds	r3, r7, r0
 80087ba:	183a      	adds	r2, r7, r0
 80087bc:	8812      	ldrh	r2, [r2, #0]
 80087be:	801a      	strh	r2, [r3, #0]
 80087c0:	2415      	movs	r4, #21
 80087c2:	193b      	adds	r3, r7, r4
 80087c4:	193a      	adds	r2, r7, r4
 80087c6:	7812      	ldrb	r2, [r2, #0]
 80087c8:	701a      	strb	r2, [r3, #0]
 80087ca:	2900      	cmp	r1, #0
 80087cc:	d033      	beq.n	8008836 <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 80087ce:	197b      	adds	r3, r7, r5
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	2b02      	cmp	r3, #2
 80087d4:	d105      	bne.n	80087e2 <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 80087d6:	193b      	adds	r3, r7, r4
 80087d8:	2200      	movs	r2, #0
 80087da:	701a      	strb	r2, [r3, #0]
                length = 0;
 80087dc:	183b      	adds	r3, r7, r0
 80087de:	2200      	movs	r2, #0
 80087e0:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 80087e2:	2116      	movs	r1, #22
 80087e4:	187b      	adds	r3, r7, r1
 80087e6:	881b      	ldrh	r3, [r3, #0]
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	18d3      	adds	r3, r2, r3
 80087ec:	220f      	movs	r2, #15
 80087ee:	18ba      	adds	r2, r7, r2
 80087f0:	7812      	ldrb	r2, [r2, #0]
 80087f2:	701a      	strb	r2, [r3, #0]
            length++;
 80087f4:	187b      	adds	r3, r7, r1
 80087f6:	881a      	ldrh	r2, [r3, #0]
 80087f8:	187b      	adds	r3, r7, r1
 80087fa:	3201      	adds	r2, #1
 80087fc:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 80087fe:	187b      	adds	r3, r7, r1
 8008800:	881b      	ldrh	r3, [r3, #0]
 8008802:	2bb2      	cmp	r3, #178	; 0xb2
 8008804:	d905      	bls.n	8008812 <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 8008806:	4b18      	ldr	r3, [pc, #96]	; (8008868 <receive_astronode_answer+0x108>)
 8008808:	0018      	movs	r0, r3
 800880a:	f7fa fbb5 	bl	8002f78 <send_debug_logs>
                return RS_FAILURE;
 800880e:	2300      	movs	r3, #0
 8008810:	e022      	b.n	8008858 <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 8008812:	230f      	movs	r3, #15
 8008814:	18fb      	adds	r3, r7, r3
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	2b03      	cmp	r3, #3
 800881a:	d10c      	bne.n	8008836 <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 800881c:	2216      	movs	r2, #22
 800881e:	18bb      	adds	r3, r7, r2
 8008820:	881b      	ldrh	r3, [r3, #0]
 8008822:	2b01      	cmp	r3, #1
 8008824:	d907      	bls.n	8008836 <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	18ba      	adds	r2, r7, r2
 800882a:	8812      	ldrh	r2, [r2, #0]
 800882c:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 800882e:	2315      	movs	r3, #21
 8008830:	18fb      	adds	r3, r7, r3
 8008832:	2201      	movs	r2, #1
 8008834:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 8008836:	2315      	movs	r3, #21
 8008838:	18fb      	adds	r3, r7, r3
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	2201      	movs	r2, #1
 800883e:	4053      	eors	r3, r2
 8008840:	b2db      	uxtb	r3, r3
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1a2      	bne.n	800878c <receive_astronode_answer+0x2c>
                }
            }
        }
    }

    send_debug_logs("Message received from the Astronode <-- ");
 8008846:	4b09      	ldr	r3, [pc, #36]	; (800886c <receive_astronode_answer+0x10c>)
 8008848:	0018      	movs	r0, r3
 800884a:	f7fa fb95 	bl	8002f78 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	0018      	movs	r0, r3
 8008852:	f7fa fb91 	bl	8002f78 <send_debug_logs>

    return RS_SUCCESS;
 8008856:	2301      	movs	r3, #1
}
 8008858:	0018      	movs	r0, r3
 800885a:	46bd      	mov	sp, r7
 800885c:	b006      	add	sp, #24
 800885e:	bdb0      	pop	{r4, r5, r7, pc}
 8008860:	000005dc 	.word	0x000005dc
 8008864:	08012988 	.word	0x08012988
 8008868:	080129ac 	.word	0x080129ac
 800886c:	080129f8 	.word	0x080129f8

08008870 <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	0002      	movs	r2, r0
 8008878:	6039      	str	r1, [r7, #0]
 800887a:	1dfb      	adds	r3, r7, #7
 800887c:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 800887e:	1dfb      	adds	r3, r7, #7
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	091b      	lsrs	r3, r3, #4
 8008884:	b2db      	uxtb	r3, r3
 8008886:	001a      	movs	r2, r3
 8008888:	4b08      	ldr	r3, [pc, #32]	; (80088ac <uint8_to_ascii_buffer+0x3c>)
 800888a:	5c9a      	ldrb	r2, [r3, r2]
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 8008890:	1dfb      	adds	r3, r7, #7
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	220f      	movs	r2, #15
 8008896:	401a      	ands	r2, r3
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	3301      	adds	r3, #1
 800889c:	4903      	ldr	r1, [pc, #12]	; (80088ac <uint8_to_ascii_buffer+0x3c>)
 800889e:	5c8a      	ldrb	r2, [r1, r2]
 80088a0:	701a      	strb	r2, [r3, #0]
}
 80088a2:	46c0      	nop			; (mov r8, r8)
 80088a4:	46bd      	mov	sp, r7
 80088a6:	b002      	add	sp, #8
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	46c0      	nop			; (mov r8, r8)
 80088ac:	08012b20 	.word	0x08012b20

080088b0 <set_my_rtc_from_nmea_rmc>:
*/

extern RTC_HandleTypeDef hrtc ;

void set_my_rtc_from_nmea_rmc ( const char* m )
{
 80088b0:	b5b0      	push	{r4, r5, r7, lr}
 80088b2:	b088      	sub	sp, #32
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
	  RTC_TimeTypeDef sTime;
	  RTC_DateTypeDef sDate;

	  get_my_nmea_rmc_date_yy ( m , &sDate.Year ) ;
 80088b8:	2508      	movs	r5, #8
 80088ba:	197b      	adds	r3, r7, r5
 80088bc:	1cda      	adds	r2, r3, #3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	0011      	movs	r1, r2
 80088c2:	0018      	movs	r0, r3
 80088c4:	f000 fb56 	bl	8008f74 <get_my_nmea_rmc_date_yy>
	  get_my_nmea_rmc_date_mm ( m , &sDate.Month ) ;
 80088c8:	197b      	adds	r3, r7, r5
 80088ca:	1c5a      	adds	r2, r3, #1
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	0011      	movs	r1, r2
 80088d0:	0018      	movs	r0, r3
 80088d2:	f000 fb89 	bl	8008fe8 <get_my_nmea_rmc_date_mm>
	  get_my_nmea_rmc_date_dd ( m , &sDate.Date ) ;
 80088d6:	197b      	adds	r3, r7, r5
 80088d8:	1c9a      	adds	r2, r3, #2
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	0011      	movs	r1, r2
 80088de:	0018      	movs	r0, r3
 80088e0:	f000 fbbc 	bl	800905c <get_my_nmea_rmc_date_dd>
	  get_my_nmea_rmc_utc_hh ( m , &sTime.Hours ) ;
 80088e4:	240c      	movs	r4, #12
 80088e6:	193a      	adds	r2, r7, r4
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	0011      	movs	r1, r2
 80088ec:	0018      	movs	r0, r3
 80088ee:	f000 fbef 	bl	80090d0 <get_my_nmea_rmc_utc_hh>
	  get_my_nmea_rmc_utc_mm ( m , &sTime.Minutes ) ;
 80088f2:	193b      	adds	r3, r7, r4
 80088f4:	1c5a      	adds	r2, r3, #1
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	0011      	movs	r1, r2
 80088fa:	0018      	movs	r0, r3
 80088fc:	f000 fc22 	bl	8009144 <get_my_nmea_rmc_utc_mm>
	  get_my_nmea_rmc_utc_ss ( m , &sTime.Seconds ) ;
 8008900:	193b      	adds	r3, r7, r4
 8008902:	1c9a      	adds	r2, r3, #2
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	0011      	movs	r1, r2
 8008908:	0018      	movs	r0, r3
 800890a:	f000 fc55 	bl	80091b8 <get_my_nmea_rmc_utc_ss>
	  get_my_nmea_rmc_utc_sss ( m , &sTime.SubSeconds ) ;
 800890e:	193b      	adds	r3, r7, r4
 8008910:	1d1a      	adds	r2, r3, #4
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	0011      	movs	r1, r2
 8008916:	0018      	movs	r0, r3
 8008918:	f000 fc88 	bl	800922c <get_my_nmea_rmc_utc_sss>
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800891c:	193b      	adds	r3, r7, r4
 800891e:	2200      	movs	r2, #0
 8008920:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008922:	193b      	adds	r3, r7, r4
 8008924:	2200      	movs	r2, #0
 8008926:	611a      	str	r2, [r3, #16]

	  HAL_RTCEx_EnableBypassShadow ( &hrtc ) ;
 8008928:	4b0b      	ldr	r3, [pc, #44]	; (8008958 <set_my_rtc_from_nmea_rmc+0xa8>)
 800892a:	0018      	movs	r0, r3
 800892c:	f7fc ffe1 	bl	80058f2 <HAL_RTCEx_EnableBypassShadow>
	  HAL_RTC_SetTime ( &hrtc , &sTime , RTC_FORMAT_BIN ) ;
 8008930:	1939      	adds	r1, r7, r4
 8008932:	4b09      	ldr	r3, [pc, #36]	; (8008958 <set_my_rtc_from_nmea_rmc+0xa8>)
 8008934:	2200      	movs	r2, #0
 8008936:	0018      	movs	r0, r3
 8008938:	f7fc fbde 	bl	80050f8 <HAL_RTC_SetTime>
	  HAL_RTC_SetDate ( &hrtc , &sDate , RTC_FORMAT_BIN ) ;
 800893c:	1979      	adds	r1, r7, r5
 800893e:	4b06      	ldr	r3, [pc, #24]	; (8008958 <set_my_rtc_from_nmea_rmc+0xa8>)
 8008940:	2200      	movs	r2, #0
 8008942:	0018      	movs	r0, r3
 8008944:	f7fc fcdc 	bl	8005300 <HAL_RTC_SetDate>
	  HAL_RTCEx_DisableBypassShadow ( &hrtc ) ;
 8008948:	4b03      	ldr	r3, [pc, #12]	; (8008958 <set_my_rtc_from_nmea_rmc+0xa8>)
 800894a:	0018      	movs	r0, r3
 800894c:	f7fd f805 	bl	800595a <HAL_RTCEx_DisableBypassShadow>
}
 8008950:	46c0      	nop			; (mov r8, r8)
 8008952:	46bd      	mov	sp, r7
 8008954:	b008      	add	sp, #32
 8008956:	bdb0      	pop	{r4, r5, r7, pc}
 8008958:	20000758 	.word	0x20000758

0800895c <get_my_rtc_time>:
void get_my_rtc_time ( char* dt )
{
 800895c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800895e:	b08d      	sub	sp, #52	; 0x34
 8008960:	af04      	add	r7, sp, #16
 8008962:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 8008964:	2508      	movs	r5, #8
 8008966:	1979      	adds	r1, r7, r5
 8008968:	4b16      	ldr	r3, [pc, #88]	; (80089c4 <get_my_rtc_time+0x68>)
 800896a:	2200      	movs	r2, #0
 800896c:	0018      	movs	r0, r3
 800896e:	f7fc fc6b 	bl	8005248 <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 8008972:	241c      	movs	r4, #28
 8008974:	1939      	adds	r1, r7, r4
 8008976:	4b13      	ldr	r3, [pc, #76]	; (80089c4 <get_my_rtc_time+0x68>)
 8008978:	2200      	movs	r2, #0
 800897a:	0018      	movs	r0, r3
 800897c:	f7fc fd52 	bl	8005424 <HAL_RTC_GetDate>

	sprintf ( dt , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds) ;
 8008980:	0021      	movs	r1, r4
 8008982:	187b      	adds	r3, r7, r1
 8008984:	78db      	ldrb	r3, [r3, #3]
 8008986:	22fa      	movs	r2, #250	; 0xfa
 8008988:	00d2      	lsls	r2, r2, #3
 800898a:	189a      	adds	r2, r3, r2
 800898c:	187b      	adds	r3, r7, r1
 800898e:	785b      	ldrb	r3, [r3, #1]
 8008990:	469c      	mov	ip, r3
 8008992:	187b      	adds	r3, r7, r1
 8008994:	789b      	ldrb	r3, [r3, #2]
 8008996:	001c      	movs	r4, r3
 8008998:	0029      	movs	r1, r5
 800899a:	187b      	adds	r3, r7, r1
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	001d      	movs	r5, r3
 80089a0:	187b      	adds	r3, r7, r1
 80089a2:	785b      	ldrb	r3, [r3, #1]
 80089a4:	001e      	movs	r6, r3
 80089a6:	187b      	adds	r3, r7, r1
 80089a8:	789b      	ldrb	r3, [r3, #2]
 80089aa:	4907      	ldr	r1, [pc, #28]	; (80089c8 <get_my_rtc_time+0x6c>)
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	9303      	str	r3, [sp, #12]
 80089b0:	9602      	str	r6, [sp, #8]
 80089b2:	9501      	str	r5, [sp, #4]
 80089b4:	9400      	str	r4, [sp, #0]
 80089b6:	4663      	mov	r3, ip
 80089b8:	f001 fe6a 	bl	800a690 <sprintf>
}
 80089bc:	46c0      	nop			; (mov r8, r8)
 80089be:	46bd      	mov	sp, r7
 80089c0:	b009      	add	sp, #36	; 0x24
 80089c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089c4:	20000758 	.word	0x20000758
 80089c8:	08012a24 	.word	0x08012a24

080089cc <my_string2double_conv>:
 */

#include "my_conversions.h"

double my_string2double_conv ( const char* s )
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
    double d = strtod ( s , NULL ) ;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2100      	movs	r1, #0
 80089d8:	0018      	movs	r0, r3
 80089da:	f001 fcbd 	bl	800a358 <strtod>
 80089de:	0002      	movs	r2, r0
 80089e0:	000b      	movs	r3, r1
 80089e2:	60ba      	str	r2, [r7, #8]
 80089e4:	60fb      	str	r3, [r7, #12]
    return d ;
 80089e6:	68ba      	ldr	r2, [r7, #8]
 80089e8:	68fb      	ldr	r3, [r7, #12]
}
 80089ea:	0010      	movs	r0, r2
 80089ec:	0019      	movs	r1, r3
 80089ee:	46bd      	mov	sp, r7
 80089f0:	b004      	add	sp, #16
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	0008      	movs	r0, r1
 80089fe:	0011      	movs	r1, r2
 8008a00:	1cfb      	adds	r3, r7, #3
 8008a02:	1c02      	adds	r2, r0, #0
 8008a04:	701a      	strb	r2, [r3, #0]
 8008a06:	1cbb      	adds	r3, r7, #2
 8008a08:	1c0a      	adds	r2, r1, #0
 8008a0a:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 8008a0c:	230f      	movs	r3, #15
 8008a0e:	18fb      	adds	r3, r7, r3
 8008a10:	2200      	movs	r2, #0
 8008a12:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 8008a14:	230e      	movs	r3, #14
 8008a16:	18fb      	adds	r3, r7, r3
 8008a18:	2200      	movs	r2, #0
 8008a1a:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 8008a1c:	e01c      	b.n	8008a58 <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 8008a1e:	230f      	movs	r3, #15
 8008a20:	18fb      	adds	r3, r7, r3
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	18d3      	adds	r3, r2, r3
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	1cfa      	adds	r2, r7, #3
 8008a2c:	7812      	ldrb	r2, [r2, #0]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d105      	bne.n	8008a3e <my_find_char_position+0x4a>
			p++ ;
 8008a32:	210e      	movs	r1, #14
 8008a34:	187b      	adds	r3, r7, r1
 8008a36:	781a      	ldrb	r2, [r3, #0]
 8008a38:	187b      	adds	r3, r7, r1
 8008a3a:	3201      	adds	r2, #1
 8008a3c:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 8008a3e:	230e      	movs	r3, #14
 8008a40:	18fa      	adds	r2, r7, r3
 8008a42:	1cbb      	adds	r3, r7, #2
 8008a44:	7812      	ldrb	r2, [r2, #0]
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d00e      	beq.n	8008a6a <my_find_char_position+0x76>
			break ;
		i++ ;
 8008a4c:	210f      	movs	r1, #15
 8008a4e:	187b      	adds	r3, r7, r1
 8008a50:	781a      	ldrb	r2, [r3, #0]
 8008a52:	187b      	adds	r3, r7, r1
 8008a54:	3201      	adds	r2, #1
 8008a56:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 8008a58:	230f      	movs	r3, #15
 8008a5a:	18fb      	adds	r3, r7, r3
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	18d3      	adds	r3, r2, r3
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d1da      	bne.n	8008a1e <my_find_char_position+0x2a>
 8008a68:	e000      	b.n	8008a6c <my_find_char_position+0x78>
			break ;
 8008a6a:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 8008a6c:	230f      	movs	r3, #15
 8008a6e:	18fb      	adds	r3, r7, r3
 8008a70:	781b      	ldrb	r3, [r3, #0]
}
 8008a72:	0018      	movs	r0, r3
 8008a74:	46bd      	mov	sp, r7
 8008a76:	b004      	add	sp, #16
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <my_nmea_message>:
#include <inttypes.h>
#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b084      	sub	sp, #16
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	60f8      	str	r0, [r7, #12]
 8008a82:	60b9      	str	r1, [r7, #8]
 8008a84:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	2b24      	cmp	r3, #36	; 0x24
 8008a8c:	d117      	bne.n	8008abe <my_nmea_message+0x44>
    {
        *i = 0 ;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	1c5a      	adds	r2, r3, #1
 8008a9a:	b2d1      	uxtb	r1, r2
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	7011      	strb	r1, [r2, #0]
 8008aa0:	001a      	movs	r2, r3
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	189b      	adds	r3, r3, r2
 8008aa6:	68fa      	ldr	r2, [r7, #12]
 8008aa8:	7812      	ldrb	r2, [r2, #0]
 8008aaa:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	001a      	movs	r2, r3
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	189b      	adds	r3, r3, r2
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	701a      	strb	r2, [r3, #0]
        return 0 ;
 8008aba:	2300      	movs	r3, #0
 8008abc:	e045      	b.n	8008b4a <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	2b1f      	cmp	r3, #31
 8008ac4:	d907      	bls.n	8008ad6 <my_nmea_message+0x5c>
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	2b7e      	cmp	r3, #126	; 0x7e
 8008acc:	d803      	bhi.n	8008ad6 <my_nmea_message+0x5c>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d103      	bne.n	8008ade <my_nmea_message+0x64>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	2b0d      	cmp	r3, #13
 8008adc:	d114      	bne.n	8008b08 <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	1c5a      	adds	r2, r3, #1
 8008ae4:	b2d1      	uxtb	r1, r2
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	7011      	strb	r1, [r2, #0]
 8008aea:	001a      	movs	r2, r3
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	189b      	adds	r3, r3, r2
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	7812      	ldrb	r2, [r2, #0]
 8008af4:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	001a      	movs	r2, r3
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	189b      	adds	r3, r3, r2
 8008b00:	2200      	movs	r2, #0
 8008b02:	701a      	strb	r2, [r3, #0]
        return 1 ;
 8008b04:	2301      	movs	r3, #1
 8008b06:	e020      	b.n	8008b4a <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	2b0a      	cmp	r3, #10
 8008b0e:	d11a      	bne.n	8008b46 <my_nmea_message+0xcc>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d916      	bls.n	8008b46 <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	b2da      	uxtb	r2, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	701a      	strb	r2, [r3, #0]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	001a      	movs	r2, r3
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	189b      	adds	r3, r3, r2
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	2b0d      	cmp	r3, #13
 8008b32:	d108      	bne.n	8008b46 <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	001a      	movs	r2, r3
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	189b      	adds	r3, r3, r2
 8008b3e:	2200      	movs	r2, #0
 8008b40:	701a      	strb	r2, [r3, #0]
            return 2 ;
 8008b42:	2302      	movs	r3, #2
 8008b44:	e001      	b.n	8008b4a <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 8008b46:	2301      	movs	r3, #1
 8008b48:	425b      	negs	r3, r3
}
 8008b4a:	0018      	movs	r0, r3
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	b004      	add	sp, #16
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <get_my_nmea_gngsa_fixed_mode_s>:

const char get_my_nmea_gngsa_fixed_mode_s ( const char* m )
{
 8008b52:	b580      	push	{r7, lr}
 8008b54:	b082      	sub	sp, #8
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
	return m[9] ;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	3309      	adds	r3, #9
 8008b5e:	781b      	ldrb	r3, [r3, #0]
}
 8008b60:	0018      	movs	r0, r3
 8008b62:	46bd      	mov	sp, r7
 8008b64:	b002      	add	sp, #8
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <get_my_nmea_gngsa_pdop_d>:

double get_my_nmea_gngsa_pdop_d ( const char* m )
{
 8008b68:	b5b0      	push	{r4, r5, r7, lr}
 8008b6a:	b086      	sub	sp, #24
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
	uint8_t pdop_position = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION ) + 1 ;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	220f      	movs	r2, #15
 8008b74:	212c      	movs	r1, #44	; 0x2c
 8008b76:	0018      	movs	r0, r3
 8008b78:	f7ff ff3c 	bl	80089f4 <my_find_char_position>
 8008b7c:	0003      	movs	r3, r0
 8008b7e:	001a      	movs	r2, r3
 8008b80:	2517      	movs	r5, #23
 8008b82:	197b      	adds	r3, r7, r5
 8008b84:	3201      	adds	r2, #1
 8008b86:	701a      	strb	r2, [r3, #0]
	uint8_t pdop_length = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION + 1 ) - pdop_position ;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2210      	movs	r2, #16
 8008b8c:	212c      	movs	r1, #44	; 0x2c
 8008b8e:	0018      	movs	r0, r3
 8008b90:	f7ff ff30 	bl	80089f4 <my_find_char_position>
 8008b94:	0003      	movs	r3, r0
 8008b96:	0019      	movs	r1, r3
 8008b98:	2416      	movs	r4, #22
 8008b9a:	193b      	adds	r3, r7, r4
 8008b9c:	197a      	adds	r2, r7, r5
 8008b9e:	7812      	ldrb	r2, [r2, #0]
 8008ba0:	1a8a      	subs	r2, r1, r2
 8008ba2:	701a      	strb	r2, [r3, #0]

	char* pdop_s = (char*) malloc ( ( pdop_length +1 ) * sizeof ( char ) ) ;
 8008ba4:	193b      	adds	r3, r7, r4
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	3301      	adds	r3, #1
 8008baa:	0018      	movs	r0, r3
 8008bac:	f000 fb72 	bl	8009294 <malloc>
 8008bb0:	0003      	movs	r3, r0
 8008bb2:	613b      	str	r3, [r7, #16]
	strncpy ( pdop_s , m + pdop_position , pdop_length ) ; // Kopiowanie fragmentu łańcucha
 8008bb4:	197b      	adds	r3, r7, r5
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	18d1      	adds	r1, r2, r3
 8008bbc:	193b      	adds	r3, r7, r4
 8008bbe:	781a      	ldrb	r2, [r3, #0]
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	0018      	movs	r0, r3
 8008bc4:	f001 fe13 	bl	800a7ee <strncpy>
	pdop_s[pdop_length] = '\0';
 8008bc8:	193b      	adds	r3, r7, r4
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	693a      	ldr	r2, [r7, #16]
 8008bce:	18d3      	adds	r3, r2, r3
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	701a      	strb	r2, [r3, #0]
	double pdop = my_string2double_conv ( pdop_s ) ;
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	0018      	movs	r0, r3
 8008bd8:	f7ff fef8 	bl	80089cc <my_string2double_conv>
 8008bdc:	0002      	movs	r2, r0
 8008bde:	000b      	movs	r3, r1
 8008be0:	60ba      	str	r2, [r7, #8]
 8008be2:	60fb      	str	r3, [r7, #12]
	free ( pdop_s ) ;
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	0018      	movs	r0, r3
 8008be8:	f000 fb5e 	bl	80092a8 <free>
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
 8008bec:	68ba      	ldr	r2, [r7, #8]
 8008bee:	68fb      	ldr	r3, [r7, #12]
}
 8008bf0:	0010      	movs	r0, r2
 8008bf2:	0019      	movs	r1, r3
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	b006      	add	sp, #24
 8008bf8:	bdb0      	pop	{r4, r5, r7, pc}

08008bfa <is_my_nmea_checksum_ok>:


bool is_my_nmea_checksum_ok ( const char* s )
{
 8008bfa:	b590      	push	{r4, r7, lr}
 8008bfc:	b085      	sub	sp, #20
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 8008c02:	230f      	movs	r3, #15
 8008c04:	18fb      	adds	r3, r7, r3
 8008c06:	2200      	movs	r2, #0
 8008c08:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 8008c0a:	230e      	movs	r3, #14
 8008c0c:	18fb      	adds	r3, r7, r3
 8008c0e:	2201      	movs	r2, #1
 8008c10:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8008c12:	e00f      	b.n	8008c34 <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 8008c14:	220e      	movs	r2, #14
 8008c16:	18bb      	adds	r3, r7, r2
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	18ba      	adds	r2, r7, r2
 8008c1c:	1c59      	adds	r1, r3, #1
 8008c1e:	7011      	strb	r1, [r2, #0]
 8008c20:	001a      	movs	r2, r3
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	189b      	adds	r3, r3, r2
 8008c26:	7819      	ldrb	r1, [r3, #0]
 8008c28:	220f      	movs	r2, #15
 8008c2a:	18bb      	adds	r3, r7, r2
 8008c2c:	18ba      	adds	r2, r7, r2
 8008c2e:	7812      	ldrb	r2, [r2, #0]
 8008c30:	404a      	eors	r2, r1
 8008c32:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8008c34:	210e      	movs	r1, #14
 8008c36:	187b      	adds	r3, r7, r1
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	18d3      	adds	r3, r2, r3
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	2b2a      	cmp	r3, #42	; 0x2a
 8008c42:	d00a      	beq.n	8008c5a <is_my_nmea_checksum_ok+0x60>
 8008c44:	187b      	adds	r3, r7, r1
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	18d3      	adds	r3, r2, r3
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d003      	beq.n	8008c5a <is_my_nmea_checksum_ok+0x60>
 8008c52:	187b      	adds	r3, r7, r1
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d1dc      	bne.n	8008c14 <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 8008c5a:	230f      	movs	r3, #15
 8008c5c:	18fb      	adds	r3, r7, r3
 8008c5e:	781c      	ldrb	r4, [r3, #0]
 8008c60:	210e      	movs	r1, #14
 8008c62:	187b      	adds	r3, r7, r1
 8008c64:	187a      	adds	r2, r7, r1
 8008c66:	7812      	ldrb	r2, [r2, #0]
 8008c68:	3201      	adds	r2, #1
 8008c6a:	701a      	strb	r2, [r3, #0]
 8008c6c:	187b      	adds	r3, r7, r1
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	18d3      	adds	r3, r2, r3
 8008c74:	2210      	movs	r2, #16
 8008c76:	2100      	movs	r1, #0
 8008c78:	0018      	movs	r0, r3
 8008c7a:	f001 fc05 	bl	800a488 <strtol>
 8008c7e:	0003      	movs	r3, r0
 8008c80:	1ae3      	subs	r3, r4, r3
 8008c82:	425a      	negs	r2, r3
 8008c84:	4153      	adcs	r3, r2
 8008c86:	b2db      	uxtb	r3, r3
}
 8008c88:	0018      	movs	r0, r3
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	b005      	add	sp, #20
 8008c8e:	bd90      	pop	{r4, r7, pc}

08008c90 <nmea2decimal>:
double nmea2decimal ( const char *coord , char dir )
{
 8008c90:	b5b0      	push	{r4, r5, r7, lr}
 8008c92:	b086      	sub	sp, #24
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	000a      	movs	r2, r1
 8008c9a:	1cfb      	adds	r3, r7, #3
 8008c9c:	701a      	strb	r2, [r3, #0]
    double deg , min ;
    sscanf ( coord , "%lf" , &deg ) ;
 8008c9e:	2308      	movs	r3, #8
 8008ca0:	18fa      	adds	r2, r7, r3
 8008ca2:	492f      	ldr	r1, [pc, #188]	; (8008d60 <nmea2decimal+0xd0>)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	0018      	movs	r0, r3
 8008ca8:	f001 fd12 	bl	800a6d0 <sscanf>
    min = deg / 100 ;
 8008cac:	68b8      	ldr	r0, [r7, #8]
 8008cae:	68f9      	ldr	r1, [r7, #12]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	4b2c      	ldr	r3, [pc, #176]	; (8008d64 <nmea2decimal+0xd4>)
 8008cb4:	f7f8 f8e0 	bl	8000e78 <__aeabi_ddiv>
 8008cb8:	0002      	movs	r2, r0
 8008cba:	000b      	movs	r3, r1
 8008cbc:	613a      	str	r2, [r7, #16]
 8008cbe:	617b      	str	r3, [r7, #20]
    deg = (int) min ;
 8008cc0:	6938      	ldr	r0, [r7, #16]
 8008cc2:	6979      	ldr	r1, [r7, #20]
 8008cc4:	f7f9 fb34 	bl	8002330 <__aeabi_d2iz>
 8008cc8:	0003      	movs	r3, r0
 8008cca:	0018      	movs	r0, r3
 8008ccc:	f7f9 fb66 	bl	800239c <__aeabi_i2d>
 8008cd0:	0002      	movs	r2, r0
 8008cd2:	000b      	movs	r3, r1
 8008cd4:	60ba      	str	r2, [r7, #8]
 8008cd6:	60fb      	str	r3, [r7, #12]
    min = ( min - deg ) * 10 ;
 8008cd8:	68ba      	ldr	r2, [r7, #8]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6938      	ldr	r0, [r7, #16]
 8008cde:	6979      	ldr	r1, [r7, #20]
 8008ce0:	f7f8 ff86 	bl	8001bf0 <__aeabi_dsub>
 8008ce4:	0002      	movs	r2, r0
 8008ce6:	000b      	movs	r3, r1
 8008ce8:	0010      	movs	r0, r2
 8008cea:	0019      	movs	r1, r3
 8008cec:	2200      	movs	r2, #0
 8008cee:	4b1e      	ldr	r3, [pc, #120]	; (8008d68 <nmea2decimal+0xd8>)
 8008cf0:	f7f8 fcbc 	bl	800166c <__aeabi_dmul>
 8008cf4:	0002      	movs	r2, r0
 8008cf6:	000b      	movs	r3, r1
 8008cf8:	613a      	str	r2, [r7, #16]
 8008cfa:	617b      	str	r3, [r7, #20]
    min = min / 6 ;
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	4b1b      	ldr	r3, [pc, #108]	; (8008d6c <nmea2decimal+0xdc>)
 8008d00:	6938      	ldr	r0, [r7, #16]
 8008d02:	6979      	ldr	r1, [r7, #20]
 8008d04:	f7f8 f8b8 	bl	8000e78 <__aeabi_ddiv>
 8008d08:	0002      	movs	r2, r0
 8008d0a:	000b      	movs	r3, r1
 8008d0c:	613a      	str	r2, [r7, #16]
 8008d0e:	617b      	str	r3, [r7, #20]
    //double c = deg + min ;
    if ( dir == 'S' || dir == 'W' )
 8008d10:	1cfb      	adds	r3, r7, #3
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	2b53      	cmp	r3, #83	; 0x53
 8008d16:	d003      	beq.n	8008d20 <nmea2decimal+0x90>
 8008d18:	1cfb      	adds	r3, r7, #3
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	2b57      	cmp	r3, #87	; 0x57
 8008d1e:	d10e      	bne.n	8008d3e <nmea2decimal+0xae>
    	return ( deg + min ) * -1 ;
 8008d20:	68b8      	ldr	r0, [r7, #8]
 8008d22:	68f9      	ldr	r1, [r7, #12]
 8008d24:	693a      	ldr	r2, [r7, #16]
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	f7f7 fd46 	bl	80007b8 <__aeabi_dadd>
 8008d2c:	0002      	movs	r2, r0
 8008d2e:	000b      	movs	r3, r1
 8008d30:	0011      	movs	r1, r2
 8008d32:	000c      	movs	r4, r1
 8008d34:	2180      	movs	r1, #128	; 0x80
 8008d36:	0609      	lsls	r1, r1, #24
 8008d38:	4059      	eors	r1, r3
 8008d3a:	000d      	movs	r5, r1
 8008d3c:	e009      	b.n	8008d52 <nmea2decimal+0xc2>
    else
    	return deg + min ;
 8008d3e:	68b8      	ldr	r0, [r7, #8]
 8008d40:	68f9      	ldr	r1, [r7, #12]
 8008d42:	693a      	ldr	r2, [r7, #16]
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	f7f7 fd37 	bl	80007b8 <__aeabi_dadd>
 8008d4a:	0002      	movs	r2, r0
 8008d4c:	000b      	movs	r3, r1
 8008d4e:	0014      	movs	r4, r2
 8008d50:	001d      	movs	r5, r3
}
 8008d52:	0022      	movs	r2, r4
 8008d54:	002b      	movs	r3, r5
 8008d56:	0010      	movs	r0, r2
 8008d58:	0019      	movs	r1, r3
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	b006      	add	sp, #24
 8008d5e:	bdb0      	pop	{r4, r5, r7, pc}
 8008d60:	08012a44 	.word	0x08012a44
 8008d64:	40590000 	.word	0x40590000
 8008d68:	40240000 	.word	0x40240000
 8008d6c:	40180000 	.word	0x40180000

08008d70 <get_my_nmea_gngll_coordinates>:

void get_my_nmea_gngll_coordinates ( const char* m , char* latitude_s , char* longitude_s , int32_t* latitude_astro_geo_wr , int32_t* longitude_astro_geo_wr )
{
 8008d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d72:	b091      	sub	sp, #68	; 0x44
 8008d74:	af02      	add	r7, sp, #8
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	607a      	str	r2, [r7, #4]
 8008d7c:	603b      	str	r3, [r7, #0]
	char direction ;

	//Latitude part
	uint8_t coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION ) + 1 ;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2201      	movs	r2, #1
 8008d82:	212c      	movs	r1, #44	; 0x2c
 8008d84:	0018      	movs	r0, r3
 8008d86:	f7ff fe35 	bl	80089f4 <my_find_char_position>
 8008d8a:	0003      	movs	r3, r0
 8008d8c:	001a      	movs	r2, r3
 8008d8e:	2537      	movs	r5, #55	; 0x37
 8008d90:	197b      	adds	r3, r7, r5
 8008d92:	3201      	adds	r2, #1
 8008d94:	701a      	strb	r2, [r3, #0]
	uint8_t coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2202      	movs	r2, #2
 8008d9a:	212c      	movs	r1, #44	; 0x2c
 8008d9c:	0018      	movs	r0, r3
 8008d9e:	f7ff fe29 	bl	80089f4 <my_find_char_position>
 8008da2:	0003      	movs	r3, r0
 8008da4:	0019      	movs	r1, r3
 8008da6:	2436      	movs	r4, #54	; 0x36
 8008da8:	193b      	adds	r3, r7, r4
 8008daa:	197a      	adds	r2, r7, r5
 8008dac:	7812      	ldrb	r2, [r2, #0]
 8008dae:	1a8a      	subs	r2, r1, r2
 8008db0:	701a      	strb	r2, [r3, #0]

	char* latitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 8008db2:	193b      	adds	r3, r7, r4
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	3301      	adds	r3, #1
 8008db8:	0018      	movs	r0, r3
 8008dba:	f000 fa6b 	bl	8009294 <malloc>
 8008dbe:	0003      	movs	r3, r0
 8008dc0:	633b      	str	r3, [r7, #48]	; 0x30
	strncpy ( latitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 8008dc2:	197b      	adds	r3, r7, r5
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	18d1      	adds	r1, r2, r3
 8008dca:	193b      	adds	r3, r7, r4
 8008dcc:	781a      	ldrb	r2, [r3, #0]
 8008dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd0:	0018      	movs	r0, r3
 8008dd2:	f001 fd0c 	bl	800a7ee <strncpy>
	latitude_s_temp[coordinate_length] = '\0';
 8008dd6:	193b      	adds	r3, r7, r4
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ddc:	18d3      	adds	r3, r2, r3
 8008dde:	2200      	movs	r2, #0
 8008de0:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 8008de2:	197b      	adds	r3, r7, r5
 8008de4:	781a      	ldrb	r2, [r3, #0]
 8008de6:	193b      	adds	r3, r7, r4
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	18d3      	adds	r3, r2, r3
 8008dec:	3301      	adds	r3, #1
 8008dee:	68fa      	ldr	r2, [r7, #12]
 8008df0:	18d2      	adds	r2, r2, r3
 8008df2:	262f      	movs	r6, #47	; 0x2f
 8008df4:	19bb      	adds	r3, r7, r6
 8008df6:	7812      	ldrb	r2, [r2, #0]
 8008df8:	701a      	strb	r2, [r3, #0]
	double latitude_d = nmea2decimal ( latitude_s_temp , direction ) ;
 8008dfa:	19bb      	adds	r3, r7, r6
 8008dfc:	781a      	ldrb	r2, [r3, #0]
 8008dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e00:	0011      	movs	r1, r2
 8008e02:	0018      	movs	r0, r3
 8008e04:	f7ff ff44 	bl	8008c90 <nmea2decimal>
 8008e08:	0002      	movs	r2, r0
 8008e0a:	000b      	movs	r3, r1
 8008e0c:	623a      	str	r2, [r7, #32]
 8008e0e:	627b      	str	r3, [r7, #36]	; 0x24
	free ( latitude_s_temp ) ;
 8008e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e12:	0018      	movs	r0, r3
 8008e14:	f000 fa48 	bl	80092a8 <free>
	latitude_d = round ( latitude_d * 1e6 ) / 1e6 ;
 8008e18:	2200      	movs	r2, #0
 8008e1a:	4b53      	ldr	r3, [pc, #332]	; (8008f68 <get_my_nmea_gngll_coordinates+0x1f8>)
 8008e1c:	6a38      	ldr	r0, [r7, #32]
 8008e1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e20:	f7f8 fc24 	bl	800166c <__aeabi_dmul>
 8008e24:	0002      	movs	r2, r0
 8008e26:	000b      	movs	r3, r1
 8008e28:	0010      	movs	r0, r2
 8008e2a:	0019      	movs	r1, r3
 8008e2c:	f008 f9fc 	bl	8011228 <round>
 8008e30:	2200      	movs	r2, #0
 8008e32:	4b4d      	ldr	r3, [pc, #308]	; (8008f68 <get_my_nmea_gngll_coordinates+0x1f8>)
 8008e34:	f7f8 f820 	bl	8000e78 <__aeabi_ddiv>
 8008e38:	0002      	movs	r2, r0
 8008e3a:	000b      	movs	r3, r1
 8008e3c:	623a      	str	r2, [r7, #32]
 8008e3e:	627b      	str	r3, [r7, #36]	; 0x24
	snprintf ( latitude_s , 12 , "%.6lf" , latitude_d ) ;
 8008e40:	494a      	ldr	r1, [pc, #296]	; (8008f6c <get_my_nmea_gngll_coordinates+0x1fc>)
 8008e42:	68b8      	ldr	r0, [r7, #8]
 8008e44:	6a3a      	ldr	r2, [r7, #32]
 8008e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e48:	9200      	str	r2, [sp, #0]
 8008e4a:	9301      	str	r3, [sp, #4]
 8008e4c:	000a      	movs	r2, r1
 8008e4e:	210c      	movs	r1, #12
 8008e50:	f001 fbea 	bl	800a628 <snprintf>
	*latitude_astro_geo_wr = (int32_t) ( latitude_d * 10000000 ) ;
 8008e54:	2200      	movs	r2, #0
 8008e56:	4b46      	ldr	r3, [pc, #280]	; (8008f70 <get_my_nmea_gngll_coordinates+0x200>)
 8008e58:	6a38      	ldr	r0, [r7, #32]
 8008e5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e5c:	f7f8 fc06 	bl	800166c <__aeabi_dmul>
 8008e60:	0002      	movs	r2, r0
 8008e62:	000b      	movs	r3, r1
 8008e64:	0010      	movs	r0, r2
 8008e66:	0019      	movs	r1, r3
 8008e68:	f7f9 fa62 	bl	8002330 <__aeabi_d2iz>
 8008e6c:	0002      	movs	r2, r0
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	601a      	str	r2, [r3, #0]

	//Longitude part
	coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2) + 1 ;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2203      	movs	r2, #3
 8008e76:	212c      	movs	r1, #44	; 0x2c
 8008e78:	0018      	movs	r0, r3
 8008e7a:	f7ff fdbb 	bl	80089f4 <my_find_char_position>
 8008e7e:	0003      	movs	r3, r0
 8008e80:	001a      	movs	r2, r3
 8008e82:	197b      	adds	r3, r7, r5
 8008e84:	3201      	adds	r2, #1
 8008e86:	701a      	strb	r2, [r3, #0]
	coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2 + 1 ) - coordinate_position ;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2204      	movs	r2, #4
 8008e8c:	212c      	movs	r1, #44	; 0x2c
 8008e8e:	0018      	movs	r0, r3
 8008e90:	f7ff fdb0 	bl	80089f4 <my_find_char_position>
 8008e94:	0003      	movs	r3, r0
 8008e96:	0019      	movs	r1, r3
 8008e98:	193b      	adds	r3, r7, r4
 8008e9a:	197a      	adds	r2, r7, r5
 8008e9c:	7812      	ldrb	r2, [r2, #0]
 8008e9e:	1a8a      	subs	r2, r1, r2
 8008ea0:	701a      	strb	r2, [r3, #0]

	char* longitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 8008ea2:	193b      	adds	r3, r7, r4
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	0018      	movs	r0, r3
 8008eaa:	f000 f9f3 	bl	8009294 <malloc>
 8008eae:	0003      	movs	r3, r0
 8008eb0:	61fb      	str	r3, [r7, #28]
	strncpy ( longitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 8008eb2:	197b      	adds	r3, r7, r5
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	68fa      	ldr	r2, [r7, #12]
 8008eb8:	18d1      	adds	r1, r2, r3
 8008eba:	193b      	adds	r3, r7, r4
 8008ebc:	781a      	ldrb	r2, [r3, #0]
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	0018      	movs	r0, r3
 8008ec2:	f001 fc94 	bl	800a7ee <strncpy>
	longitude_s_temp[coordinate_length] = '\0';
 8008ec6:	193b      	adds	r3, r7, r4
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	69fa      	ldr	r2, [r7, #28]
 8008ecc:	18d3      	adds	r3, r2, r3
 8008ece:	2200      	movs	r2, #0
 8008ed0:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 8008ed2:	197b      	adds	r3, r7, r5
 8008ed4:	781a      	ldrb	r2, [r3, #0]
 8008ed6:	193b      	adds	r3, r7, r4
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	18d3      	adds	r3, r2, r3
 8008edc:	3301      	adds	r3, #1
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	18d2      	adds	r2, r2, r3
 8008ee2:	19bb      	adds	r3, r7, r6
 8008ee4:	7812      	ldrb	r2, [r2, #0]
 8008ee6:	701a      	strb	r2, [r3, #0]
	double longitude_d = nmea2decimal ( longitude_s_temp , direction ) ;
 8008ee8:	19bb      	adds	r3, r7, r6
 8008eea:	781a      	ldrb	r2, [r3, #0]
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	0011      	movs	r1, r2
 8008ef0:	0018      	movs	r0, r3
 8008ef2:	f7ff fecd 	bl	8008c90 <nmea2decimal>
 8008ef6:	0002      	movs	r2, r0
 8008ef8:	000b      	movs	r3, r1
 8008efa:	613a      	str	r2, [r7, #16]
 8008efc:	617b      	str	r3, [r7, #20]
	free ( longitude_s_temp ) ;
 8008efe:	69fb      	ldr	r3, [r7, #28]
 8008f00:	0018      	movs	r0, r3
 8008f02:	f000 f9d1 	bl	80092a8 <free>
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
 8008f06:	2200      	movs	r2, #0
 8008f08:	4b17      	ldr	r3, [pc, #92]	; (8008f68 <get_my_nmea_gngll_coordinates+0x1f8>)
 8008f0a:	6938      	ldr	r0, [r7, #16]
 8008f0c:	6979      	ldr	r1, [r7, #20]
 8008f0e:	f7f8 fbad 	bl	800166c <__aeabi_dmul>
 8008f12:	0002      	movs	r2, r0
 8008f14:	000b      	movs	r3, r1
 8008f16:	0010      	movs	r0, r2
 8008f18:	0019      	movs	r1, r3
 8008f1a:	f008 f985 	bl	8011228 <round>
 8008f1e:	2200      	movs	r2, #0
 8008f20:	4b11      	ldr	r3, [pc, #68]	; (8008f68 <get_my_nmea_gngll_coordinates+0x1f8>)
 8008f22:	f7f7 ffa9 	bl	8000e78 <__aeabi_ddiv>
 8008f26:	0002      	movs	r2, r0
 8008f28:	000b      	movs	r3, r1
 8008f2a:	613a      	str	r2, [r7, #16]
 8008f2c:	617b      	str	r3, [r7, #20]
	snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
 8008f2e:	490f      	ldr	r1, [pc, #60]	; (8008f6c <get_my_nmea_gngll_coordinates+0x1fc>)
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	693a      	ldr	r2, [r7, #16]
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	9200      	str	r2, [sp, #0]
 8008f38:	9301      	str	r3, [sp, #4]
 8008f3a:	000a      	movs	r2, r1
 8008f3c:	210c      	movs	r1, #12
 8008f3e:	f001 fb73 	bl	800a628 <snprintf>
	*longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
 8008f42:	2200      	movs	r2, #0
 8008f44:	4b0a      	ldr	r3, [pc, #40]	; (8008f70 <get_my_nmea_gngll_coordinates+0x200>)
 8008f46:	6938      	ldr	r0, [r7, #16]
 8008f48:	6979      	ldr	r1, [r7, #20]
 8008f4a:	f7f8 fb8f 	bl	800166c <__aeabi_dmul>
 8008f4e:	0002      	movs	r2, r0
 8008f50:	000b      	movs	r3, r1
 8008f52:	0010      	movs	r0, r2
 8008f54:	0019      	movs	r1, r3
 8008f56:	f7f9 f9eb 	bl	8002330 <__aeabi_d2iz>
 8008f5a:	0002      	movs	r2, r0
 8008f5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f5e:	601a      	str	r2, [r3, #0]
}
 8008f60:	46c0      	nop			; (mov r8, r8)
 8008f62:	46bd      	mov	sp, r7
 8008f64:	b00f      	add	sp, #60	; 0x3c
 8008f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f68:	412e8480 	.word	0x412e8480
 8008f6c:	08012a48 	.word	0x08012a48
 8008f70:	416312d0 	.word	0x416312d0

08008f74 <get_my_nmea_rmc_date_yy>:

void get_my_nmea_rmc_date_yy ( const char* m , uint8_t* yy )
{
 8008f74:	b590      	push	{r4, r7, lr}
 8008f76:	b087      	sub	sp, #28
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_YY_OFFSET ;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2209      	movs	r2, #9
 8008f82:	212c      	movs	r1, #44	; 0x2c
 8008f84:	0018      	movs	r0, r3
 8008f86:	f7ff fd35 	bl	80089f4 <my_find_char_position>
 8008f8a:	0003      	movs	r3, r0
 8008f8c:	001a      	movs	r2, r3
 8008f8e:	2417      	movs	r4, #23
 8008f90:	193b      	adds	r3, r7, r4
 8008f92:	3205      	adds	r2, #5
 8008f94:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 8008f96:	2003      	movs	r0, #3
 8008f98:	f000 f97c 	bl	8009294 <malloc>
 8008f9c:	0003      	movs	r3, r0
 8008f9e:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8008fa0:	193b      	adds	r3, r7, r4
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	18d1      	adds	r1, r2, r3
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	2202      	movs	r2, #2
 8008fac:	0018      	movs	r0, r3
 8008fae:	f001 fc1e 	bl	800a7ee <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	3302      	adds	r3, #2
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , yy ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 8008fba:	240e      	movs	r4, #14
 8008fbc:	193a      	adds	r2, r7, r4
 8008fbe:	4909      	ldr	r1, [pc, #36]	; (8008fe4 <get_my_nmea_rmc_date_yy+0x70>)
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	0018      	movs	r0, r3
 8008fc4:	f001 fb84 	bl	800a6d0 <sscanf>
	free ( s ) ;
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	0018      	movs	r0, r3
 8008fcc:	f000 f96c 	bl	80092a8 <free>
	*yy = (uint8_t) temp ;
 8008fd0:	193b      	adds	r3, r7, r4
 8008fd2:	881b      	ldrh	r3, [r3, #0]
 8008fd4:	b2da      	uxtb	r2, r3
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	701a      	strb	r2, [r3, #0]

}
 8008fda:	46c0      	nop			; (mov r8, r8)
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	b007      	add	sp, #28
 8008fe0:	bd90      	pop	{r4, r7, pc}
 8008fe2:	46c0      	nop			; (mov r8, r8)
 8008fe4:	08012a50 	.word	0x08012a50

08008fe8 <get_my_nmea_rmc_date_mm>:
void get_my_nmea_rmc_date_mm ( const char* m , uint8_t* mm )
{
 8008fe8:	b590      	push	{r4, r7, lr}
 8008fea:	b087      	sub	sp, #28
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_MM_OFFSET ;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2209      	movs	r2, #9
 8008ff6:	212c      	movs	r1, #44	; 0x2c
 8008ff8:	0018      	movs	r0, r3
 8008ffa:	f7ff fcfb 	bl	80089f4 <my_find_char_position>
 8008ffe:	0003      	movs	r3, r0
 8009000:	001a      	movs	r2, r3
 8009002:	2417      	movs	r4, #23
 8009004:	193b      	adds	r3, r7, r4
 8009006:	3203      	adds	r2, #3
 8009008:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800900a:	2003      	movs	r0, #3
 800900c:	f000 f942 	bl	8009294 <malloc>
 8009010:	0003      	movs	r3, r0
 8009012:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8009014:	193b      	adds	r3, r7, r4
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	18d1      	adds	r1, r2, r3
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	2202      	movs	r2, #2
 8009020:	0018      	movs	r0, r3
 8009022:	f001 fbe4 	bl	800a7ee <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	3302      	adds	r3, #2
 800902a:	2200      	movs	r2, #0
 800902c:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800902e:	240e      	movs	r4, #14
 8009030:	193a      	adds	r2, r7, r4
 8009032:	4909      	ldr	r1, [pc, #36]	; (8009058 <get_my_nmea_rmc_date_mm+0x70>)
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	0018      	movs	r0, r3
 8009038:	f001 fb4a 	bl	800a6d0 <sscanf>
	free ( s ) ;
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	0018      	movs	r0, r3
 8009040:	f000 f932 	bl	80092a8 <free>
	*mm = (uint8_t) temp ;
 8009044:	193b      	adds	r3, r7, r4
 8009046:	881b      	ldrh	r3, [r3, #0]
 8009048:	b2da      	uxtb	r2, r3
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	701a      	strb	r2, [r3, #0]

}
 800904e:	46c0      	nop			; (mov r8, r8)
 8009050:	46bd      	mov	sp, r7
 8009052:	b007      	add	sp, #28
 8009054:	bd90      	pop	{r4, r7, pc}
 8009056:	46c0      	nop			; (mov r8, r8)
 8009058:	08012a50 	.word	0x08012a50

0800905c <get_my_nmea_rmc_date_dd>:
void get_my_nmea_rmc_date_dd ( const char* m , uint8_t* dd )
{
 800905c:	b590      	push	{r4, r7, lr}
 800905e:	b087      	sub	sp, #28
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_DD_OFFSET ;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2209      	movs	r2, #9
 800906a:	212c      	movs	r1, #44	; 0x2c
 800906c:	0018      	movs	r0, r3
 800906e:	f7ff fcc1 	bl	80089f4 <my_find_char_position>
 8009072:	0003      	movs	r3, r0
 8009074:	001a      	movs	r2, r3
 8009076:	2417      	movs	r4, #23
 8009078:	193b      	adds	r3, r7, r4
 800907a:	3201      	adds	r2, #1
 800907c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800907e:	2003      	movs	r0, #3
 8009080:	f000 f908 	bl	8009294 <malloc>
 8009084:	0003      	movs	r3, r0
 8009086:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8009088:	193b      	adds	r3, r7, r4
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	18d1      	adds	r1, r2, r3
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	2202      	movs	r2, #2
 8009094:	0018      	movs	r0, r3
 8009096:	f001 fbaa 	bl	800a7ee <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	3302      	adds	r3, #2
 800909e:	2200      	movs	r2, #0
 80090a0:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , dd ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 80090a2:	240e      	movs	r4, #14
 80090a4:	193a      	adds	r2, r7, r4
 80090a6:	4909      	ldr	r1, [pc, #36]	; (80090cc <get_my_nmea_rmc_date_dd+0x70>)
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	0018      	movs	r0, r3
 80090ac:	f001 fb10 	bl	800a6d0 <sscanf>
	free ( s ) ;
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	0018      	movs	r0, r3
 80090b4:	f000 f8f8 	bl	80092a8 <free>
	*dd = (uint8_t) temp ;
 80090b8:	193b      	adds	r3, r7, r4
 80090ba:	881b      	ldrh	r3, [r3, #0]
 80090bc:	b2da      	uxtb	r2, r3
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	701a      	strb	r2, [r3, #0]

}
 80090c2:	46c0      	nop			; (mov r8, r8)
 80090c4:	46bd      	mov	sp, r7
 80090c6:	b007      	add	sp, #28
 80090c8:	bd90      	pop	{r4, r7, pc}
 80090ca:	46c0      	nop			; (mov r8, r8)
 80090cc:	08012a50 	.word	0x08012a50

080090d0 <get_my_nmea_rmc_utc_hh>:
void get_my_nmea_rmc_utc_hh ( const char* m , uint8_t* hh )
{
 80090d0:	b590      	push	{r4, r7, lr}
 80090d2:	b087      	sub	sp, #28
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_HH_OFFSET ;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2201      	movs	r2, #1
 80090de:	212c      	movs	r1, #44	; 0x2c
 80090e0:	0018      	movs	r0, r3
 80090e2:	f7ff fc87 	bl	80089f4 <my_find_char_position>
 80090e6:	0003      	movs	r3, r0
 80090e8:	001a      	movs	r2, r3
 80090ea:	2417      	movs	r4, #23
 80090ec:	193b      	adds	r3, r7, r4
 80090ee:	3201      	adds	r2, #1
 80090f0:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 80090f2:	2003      	movs	r0, #3
 80090f4:	f000 f8ce 	bl	8009294 <malloc>
 80090f8:	0003      	movs	r3, r0
 80090fa:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 80090fc:	193b      	adds	r3, r7, r4
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	18d1      	adds	r1, r2, r3
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	2202      	movs	r2, #2
 8009108:	0018      	movs	r0, r3
 800910a:	f001 fb70 	bl	800a7ee <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	3302      	adds	r3, #2
 8009112:	2200      	movs	r2, #0
 8009114:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , hh ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 8009116:	240e      	movs	r4, #14
 8009118:	193a      	adds	r2, r7, r4
 800911a:	4909      	ldr	r1, [pc, #36]	; (8009140 <get_my_nmea_rmc_utc_hh+0x70>)
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	0018      	movs	r0, r3
 8009120:	f001 fad6 	bl	800a6d0 <sscanf>
	free ( s ) ;
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	0018      	movs	r0, r3
 8009128:	f000 f8be 	bl	80092a8 <free>
	*hh = (uint8_t) temp ;
 800912c:	193b      	adds	r3, r7, r4
 800912e:	881b      	ldrh	r3, [r3, #0]
 8009130:	b2da      	uxtb	r2, r3
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	701a      	strb	r2, [r3, #0]

}
 8009136:	46c0      	nop			; (mov r8, r8)
 8009138:	46bd      	mov	sp, r7
 800913a:	b007      	add	sp, #28
 800913c:	bd90      	pop	{r4, r7, pc}
 800913e:	46c0      	nop			; (mov r8, r8)
 8009140:	08012a50 	.word	0x08012a50

08009144 <get_my_nmea_rmc_utc_mm>:
void get_my_nmea_rmc_utc_mm ( const char* m , uint8_t* mm )
{
 8009144:	b590      	push	{r4, r7, lr}
 8009146:	b087      	sub	sp, #28
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_MM_OFFSET ;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2201      	movs	r2, #1
 8009152:	212c      	movs	r1, #44	; 0x2c
 8009154:	0018      	movs	r0, r3
 8009156:	f7ff fc4d 	bl	80089f4 <my_find_char_position>
 800915a:	0003      	movs	r3, r0
 800915c:	001a      	movs	r2, r3
 800915e:	2417      	movs	r4, #23
 8009160:	193b      	adds	r3, r7, r4
 8009162:	3203      	adds	r2, #3
 8009164:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 8009166:	2003      	movs	r0, #3
 8009168:	f000 f894 	bl	8009294 <malloc>
 800916c:	0003      	movs	r3, r0
 800916e:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8009170:	193b      	adds	r3, r7, r4
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	18d1      	adds	r1, r2, r3
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	2202      	movs	r2, #2
 800917c:	0018      	movs	r0, r3
 800917e:	f001 fb36 	bl	800a7ee <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	3302      	adds	r3, #2
 8009186:	2200      	movs	r2, #0
 8009188:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800918a:	240e      	movs	r4, #14
 800918c:	193a      	adds	r2, r7, r4
 800918e:	4909      	ldr	r1, [pc, #36]	; (80091b4 <get_my_nmea_rmc_utc_mm+0x70>)
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	0018      	movs	r0, r3
 8009194:	f001 fa9c 	bl	800a6d0 <sscanf>
	free ( s ) ;
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	0018      	movs	r0, r3
 800919c:	f000 f884 	bl	80092a8 <free>
	*mm = (uint8_t) temp ;
 80091a0:	193b      	adds	r3, r7, r4
 80091a2:	881b      	ldrh	r3, [r3, #0]
 80091a4:	b2da      	uxtb	r2, r3
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	701a      	strb	r2, [r3, #0]

}
 80091aa:	46c0      	nop			; (mov r8, r8)
 80091ac:	46bd      	mov	sp, r7
 80091ae:	b007      	add	sp, #28
 80091b0:	bd90      	pop	{r4, r7, pc}
 80091b2:	46c0      	nop			; (mov r8, r8)
 80091b4:	08012a50 	.word	0x08012a50

080091b8 <get_my_nmea_rmc_utc_ss>:
void get_my_nmea_rmc_utc_ss ( const char* m , uint8_t* ss )
{
 80091b8:	b590      	push	{r4, r7, lr}
 80091ba:	b087      	sub	sp, #28
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SS_OFFSET ;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2201      	movs	r2, #1
 80091c6:	212c      	movs	r1, #44	; 0x2c
 80091c8:	0018      	movs	r0, r3
 80091ca:	f7ff fc13 	bl	80089f4 <my_find_char_position>
 80091ce:	0003      	movs	r3, r0
 80091d0:	001a      	movs	r2, r3
 80091d2:	2417      	movs	r4, #23
 80091d4:	193b      	adds	r3, r7, r4
 80091d6:	3205      	adds	r2, #5
 80091d8:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 80091da:	2003      	movs	r0, #3
 80091dc:	f000 f85a 	bl	8009294 <malloc>
 80091e0:	0003      	movs	r3, r0
 80091e2:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 80091e4:	193b      	adds	r3, r7, r4
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	18d1      	adds	r1, r2, r3
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	2202      	movs	r2, #2
 80091f0:	0018      	movs	r0, r3
 80091f2:	f001 fafc 	bl	800a7ee <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	3302      	adds	r3, #2
 80091fa:	2200      	movs	r2, #0
 80091fc:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , ss ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 80091fe:	240e      	movs	r4, #14
 8009200:	193a      	adds	r2, r7, r4
 8009202:	4909      	ldr	r1, [pc, #36]	; (8009228 <get_my_nmea_rmc_utc_ss+0x70>)
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	0018      	movs	r0, r3
 8009208:	f001 fa62 	bl	800a6d0 <sscanf>
	free ( s ) ;
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	0018      	movs	r0, r3
 8009210:	f000 f84a 	bl	80092a8 <free>
	*ss = (uint8_t) temp ;
 8009214:	193b      	adds	r3, r7, r4
 8009216:	881b      	ldrh	r3, [r3, #0]
 8009218:	b2da      	uxtb	r2, r3
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	701a      	strb	r2, [r3, #0]

}
 800921e:	46c0      	nop			; (mov r8, r8)
 8009220:	46bd      	mov	sp, r7
 8009222:	b007      	add	sp, #28
 8009224:	bd90      	pop	{r4, r7, pc}
 8009226:	46c0      	nop			; (mov r8, r8)
 8009228:	08012a50 	.word	0x08012a50

0800922c <get_my_nmea_rmc_utc_sss>:
void get_my_nmea_rmc_utc_sss ( const char* m , uint32_t* sss )
{
 800922c:	b590      	push	{r4, r7, lr}
 800922e:	b085      	sub	sp, #20
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SSS_OFFSET ;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2201      	movs	r2, #1
 800923a:	212c      	movs	r1, #44	; 0x2c
 800923c:	0018      	movs	r0, r3
 800923e:	f7ff fbd9 	bl	80089f4 <my_find_char_position>
 8009242:	0003      	movs	r3, r0
 8009244:	001a      	movs	r2, r3
 8009246:	240f      	movs	r4, #15
 8009248:	193b      	adds	r3, r7, r4
 800924a:	3208      	adds	r2, #8
 800924c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_SSS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800924e:	2004      	movs	r0, #4
 8009250:	f000 f820 	bl	8009294 <malloc>
 8009254:	0003      	movs	r3, r0
 8009256:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_UTC_SSS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8009258:	193b      	adds	r3, r7, r4
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	18d1      	adds	r1, r2, r3
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	2203      	movs	r2, #3
 8009264:	0018      	movs	r0, r3
 8009266:	f001 fac2 	bl	800a7ee <strncpy>
	s[RMC_UTC_SSS_LENGTH] = '\0';
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	3303      	adds	r3, #3
 800926e:	2200      	movs	r2, #0
 8009270:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%lu" , sss ) ;
 8009272:	683a      	ldr	r2, [r7, #0]
 8009274:	4906      	ldr	r1, [pc, #24]	; (8009290 <get_my_nmea_rmc_utc_sss+0x64>)
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	0018      	movs	r0, r3
 800927a:	f001 fa29 	bl	800a6d0 <sscanf>
	free ( s ) ;
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	0018      	movs	r0, r3
 8009282:	f000 f811 	bl	80092a8 <free>
}
 8009286:	46c0      	nop			; (mov r8, r8)
 8009288:	46bd      	mov	sp, r7
 800928a:	b005      	add	sp, #20
 800928c:	bd90      	pop	{r4, r7, pc}
 800928e:	46c0      	nop			; (mov r8, r8)
 8009290:	08012a54 	.word	0x08012a54

08009294 <malloc>:
 8009294:	b510      	push	{r4, lr}
 8009296:	4b03      	ldr	r3, [pc, #12]	; (80092a4 <malloc+0x10>)
 8009298:	0001      	movs	r1, r0
 800929a:	6818      	ldr	r0, [r3, #0]
 800929c:	f000 f80e 	bl	80092bc <_malloc_r>
 80092a0:	bd10      	pop	{r4, pc}
 80092a2:	46c0      	nop			; (mov r8, r8)
 80092a4:	200006e0 	.word	0x200006e0

080092a8 <free>:
 80092a8:	b510      	push	{r4, lr}
 80092aa:	4b03      	ldr	r3, [pc, #12]	; (80092b8 <free+0x10>)
 80092ac:	0001      	movs	r1, r0
 80092ae:	6818      	ldr	r0, [r3, #0]
 80092b0:	f001 fbe4 	bl	800aa7c <_free_r>
 80092b4:	bd10      	pop	{r4, pc}
 80092b6:	46c0      	nop			; (mov r8, r8)
 80092b8:	200006e0 	.word	0x200006e0

080092bc <_malloc_r>:
 80092bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092be:	000d      	movs	r5, r1
 80092c0:	b087      	sub	sp, #28
 80092c2:	350b      	adds	r5, #11
 80092c4:	9001      	str	r0, [sp, #4]
 80092c6:	2d16      	cmp	r5, #22
 80092c8:	d908      	bls.n	80092dc <_malloc_r+0x20>
 80092ca:	2207      	movs	r2, #7
 80092cc:	4395      	bics	r5, r2
 80092ce:	d506      	bpl.n	80092de <_malloc_r+0x22>
 80092d0:	230c      	movs	r3, #12
 80092d2:	9a01      	ldr	r2, [sp, #4]
 80092d4:	6013      	str	r3, [r2, #0]
 80092d6:	2000      	movs	r0, #0
 80092d8:	b007      	add	sp, #28
 80092da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092dc:	2510      	movs	r5, #16
 80092de:	42a9      	cmp	r1, r5
 80092e0:	d8f6      	bhi.n	80092d0 <_malloc_r+0x14>
 80092e2:	9801      	ldr	r0, [sp, #4]
 80092e4:	f000 f9fe 	bl	80096e4 <__malloc_lock>
 80092e8:	23fc      	movs	r3, #252	; 0xfc
 80092ea:	4ebe      	ldr	r6, [pc, #760]	; (80095e4 <_malloc_r+0x328>)
 80092ec:	005b      	lsls	r3, r3, #1
 80092ee:	429d      	cmp	r5, r3
 80092f0:	d219      	bcs.n	8009326 <_malloc_r+0x6a>
 80092f2:	002a      	movs	r2, r5
 80092f4:	3208      	adds	r2, #8
 80092f6:	18b2      	adds	r2, r6, r2
 80092f8:	0011      	movs	r1, r2
 80092fa:	6854      	ldr	r4, [r2, #4]
 80092fc:	3908      	subs	r1, #8
 80092fe:	08eb      	lsrs	r3, r5, #3
 8009300:	428c      	cmp	r4, r1
 8009302:	d103      	bne.n	800930c <_malloc_r+0x50>
 8009304:	68d4      	ldr	r4, [r2, #12]
 8009306:	3302      	adds	r3, #2
 8009308:	42a2      	cmp	r2, r4
 800930a:	d022      	beq.n	8009352 <_malloc_r+0x96>
 800930c:	2203      	movs	r2, #3
 800930e:	6863      	ldr	r3, [r4, #4]
 8009310:	68a1      	ldr	r1, [r4, #8]
 8009312:	4393      	bics	r3, r2
 8009314:	68e2      	ldr	r2, [r4, #12]
 8009316:	18e3      	adds	r3, r4, r3
 8009318:	60ca      	str	r2, [r1, #12]
 800931a:	6091      	str	r1, [r2, #8]
 800931c:	2201      	movs	r2, #1
 800931e:	6859      	ldr	r1, [r3, #4]
 8009320:	430a      	orrs	r2, r1
 8009322:	605a      	str	r2, [r3, #4]
 8009324:	e02a      	b.n	800937c <_malloc_r+0xc0>
 8009326:	233f      	movs	r3, #63	; 0x3f
 8009328:	0a6a      	lsrs	r2, r5, #9
 800932a:	d003      	beq.n	8009334 <_malloc_r+0x78>
 800932c:	2a04      	cmp	r2, #4
 800932e:	d82b      	bhi.n	8009388 <_malloc_r+0xcc>
 8009330:	09ab      	lsrs	r3, r5, #6
 8009332:	3338      	adds	r3, #56	; 0x38
 8009334:	2203      	movs	r2, #3
 8009336:	4694      	mov	ip, r2
 8009338:	00d9      	lsls	r1, r3, #3
 800933a:	1989      	adds	r1, r1, r6
 800933c:	68cc      	ldr	r4, [r1, #12]
 800933e:	428c      	cmp	r4, r1
 8009340:	d006      	beq.n	8009350 <_malloc_r+0x94>
 8009342:	4660      	mov	r0, ip
 8009344:	6862      	ldr	r2, [r4, #4]
 8009346:	4382      	bics	r2, r0
 8009348:	1b57      	subs	r7, r2, r5
 800934a:	2f0f      	cmp	r7, #15
 800934c:	dd34      	ble.n	80093b8 <_malloc_r+0xfc>
 800934e:	3b01      	subs	r3, #1
 8009350:	3301      	adds	r3, #1
 8009352:	6934      	ldr	r4, [r6, #16]
 8009354:	49a4      	ldr	r1, [pc, #656]	; (80095e8 <_malloc_r+0x32c>)
 8009356:	428c      	cmp	r4, r1
 8009358:	d055      	beq.n	8009406 <_malloc_r+0x14a>
 800935a:	2003      	movs	r0, #3
 800935c:	6862      	ldr	r2, [r4, #4]
 800935e:	4382      	bics	r2, r0
 8009360:	1b50      	subs	r0, r2, r5
 8009362:	280f      	cmp	r0, #15
 8009364:	dd36      	ble.n	80093d4 <_malloc_r+0x118>
 8009366:	2301      	movs	r3, #1
 8009368:	1967      	adds	r7, r4, r5
 800936a:	431d      	orrs	r5, r3
 800936c:	4303      	orrs	r3, r0
 800936e:	6065      	str	r5, [r4, #4]
 8009370:	6177      	str	r7, [r6, #20]
 8009372:	6137      	str	r7, [r6, #16]
 8009374:	60f9      	str	r1, [r7, #12]
 8009376:	60b9      	str	r1, [r7, #8]
 8009378:	607b      	str	r3, [r7, #4]
 800937a:	50a0      	str	r0, [r4, r2]
 800937c:	9801      	ldr	r0, [sp, #4]
 800937e:	f000 f9b9 	bl	80096f4 <__malloc_unlock>
 8009382:	0020      	movs	r0, r4
 8009384:	3008      	adds	r0, #8
 8009386:	e7a7      	b.n	80092d8 <_malloc_r+0x1c>
 8009388:	2a14      	cmp	r2, #20
 800938a:	d802      	bhi.n	8009392 <_malloc_r+0xd6>
 800938c:	0013      	movs	r3, r2
 800938e:	335b      	adds	r3, #91	; 0x5b
 8009390:	e7d0      	b.n	8009334 <_malloc_r+0x78>
 8009392:	2a54      	cmp	r2, #84	; 0x54
 8009394:	d802      	bhi.n	800939c <_malloc_r+0xe0>
 8009396:	0b2b      	lsrs	r3, r5, #12
 8009398:	336e      	adds	r3, #110	; 0x6e
 800939a:	e7cb      	b.n	8009334 <_malloc_r+0x78>
 800939c:	23aa      	movs	r3, #170	; 0xaa
 800939e:	005b      	lsls	r3, r3, #1
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d802      	bhi.n	80093aa <_malloc_r+0xee>
 80093a4:	0beb      	lsrs	r3, r5, #15
 80093a6:	3377      	adds	r3, #119	; 0x77
 80093a8:	e7c4      	b.n	8009334 <_malloc_r+0x78>
 80093aa:	4990      	ldr	r1, [pc, #576]	; (80095ec <_malloc_r+0x330>)
 80093ac:	237e      	movs	r3, #126	; 0x7e
 80093ae:	428a      	cmp	r2, r1
 80093b0:	d8c0      	bhi.n	8009334 <_malloc_r+0x78>
 80093b2:	0cab      	lsrs	r3, r5, #18
 80093b4:	337c      	adds	r3, #124	; 0x7c
 80093b6:	e7bd      	b.n	8009334 <_malloc_r+0x78>
 80093b8:	68e0      	ldr	r0, [r4, #12]
 80093ba:	2f00      	cmp	r7, #0
 80093bc:	db08      	blt.n	80093d0 <_malloc_r+0x114>
 80093be:	68a3      	ldr	r3, [r4, #8]
 80093c0:	60d8      	str	r0, [r3, #12]
 80093c2:	6083      	str	r3, [r0, #8]
 80093c4:	2301      	movs	r3, #1
 80093c6:	18a2      	adds	r2, r4, r2
 80093c8:	6851      	ldr	r1, [r2, #4]
 80093ca:	430b      	orrs	r3, r1
 80093cc:	6053      	str	r3, [r2, #4]
 80093ce:	e7d5      	b.n	800937c <_malloc_r+0xc0>
 80093d0:	0004      	movs	r4, r0
 80093d2:	e7b4      	b.n	800933e <_malloc_r+0x82>
 80093d4:	6171      	str	r1, [r6, #20]
 80093d6:	6131      	str	r1, [r6, #16]
 80093d8:	2800      	cmp	r0, #0
 80093da:	daf3      	bge.n	80093c4 <_malloc_r+0x108>
 80093dc:	6871      	ldr	r1, [r6, #4]
 80093de:	468c      	mov	ip, r1
 80093e0:	2180      	movs	r1, #128	; 0x80
 80093e2:	0089      	lsls	r1, r1, #2
 80093e4:	428a      	cmp	r2, r1
 80093e6:	d300      	bcc.n	80093ea <_malloc_r+0x12e>
 80093e8:	e08c      	b.n	8009504 <_malloc_r+0x248>
 80093ea:	08d1      	lsrs	r1, r2, #3
 80093ec:	0950      	lsrs	r0, r2, #5
 80093ee:	2201      	movs	r2, #1
 80093f0:	4082      	lsls	r2, r0
 80093f2:	4660      	mov	r0, ip
 80093f4:	4302      	orrs	r2, r0
 80093f6:	6072      	str	r2, [r6, #4]
 80093f8:	00ca      	lsls	r2, r1, #3
 80093fa:	1992      	adds	r2, r2, r6
 80093fc:	6891      	ldr	r1, [r2, #8]
 80093fe:	60e2      	str	r2, [r4, #12]
 8009400:	60a1      	str	r1, [r4, #8]
 8009402:	6094      	str	r4, [r2, #8]
 8009404:	60cc      	str	r4, [r1, #12]
 8009406:	2201      	movs	r2, #1
 8009408:	4876      	ldr	r0, [pc, #472]	; (80095e4 <_malloc_r+0x328>)
 800940a:	1099      	asrs	r1, r3, #2
 800940c:	408a      	lsls	r2, r1
 800940e:	6841      	ldr	r1, [r0, #4]
 8009410:	4291      	cmp	r1, r2
 8009412:	d328      	bcc.n	8009466 <_malloc_r+0x1aa>
 8009414:	420a      	tst	r2, r1
 8009416:	d105      	bne.n	8009424 <_malloc_r+0x168>
 8009418:	2403      	movs	r4, #3
 800941a:	43a3      	bics	r3, r4
 800941c:	0052      	lsls	r2, r2, #1
 800941e:	3304      	adds	r3, #4
 8009420:	420a      	tst	r2, r1
 8009422:	d0fb      	beq.n	800941c <_malloc_r+0x160>
 8009424:	496f      	ldr	r1, [pc, #444]	; (80095e4 <_malloc_r+0x328>)
 8009426:	9104      	str	r1, [sp, #16]
 8009428:	00d9      	lsls	r1, r3, #3
 800942a:	1841      	adds	r1, r0, r1
 800942c:	468c      	mov	ip, r1
 800942e:	000f      	movs	r7, r1
 8009430:	9302      	str	r3, [sp, #8]
 8009432:	68fc      	ldr	r4, [r7, #12]
 8009434:	42bc      	cmp	r4, r7
 8009436:	d000      	beq.n	800943a <_malloc_r+0x17e>
 8009438:	e09b      	b.n	8009572 <_malloc_r+0x2b6>
 800943a:	2403      	movs	r4, #3
 800943c:	9902      	ldr	r1, [sp, #8]
 800943e:	3708      	adds	r7, #8
 8009440:	3101      	adds	r1, #1
 8009442:	9102      	str	r1, [sp, #8]
 8009444:	4221      	tst	r1, r4
 8009446:	d1f4      	bne.n	8009432 <_malloc_r+0x176>
 8009448:	2103      	movs	r1, #3
 800944a:	420b      	tst	r3, r1
 800944c:	d000      	beq.n	8009450 <_malloc_r+0x194>
 800944e:	e0b7      	b.n	80095c0 <_malloc_r+0x304>
 8009450:	6843      	ldr	r3, [r0, #4]
 8009452:	4393      	bics	r3, r2
 8009454:	6043      	str	r3, [r0, #4]
 8009456:	9b04      	ldr	r3, [sp, #16]
 8009458:	0052      	lsls	r2, r2, #1
 800945a:	6859      	ldr	r1, [r3, #4]
 800945c:	4291      	cmp	r1, r2
 800945e:	d302      	bcc.n	8009466 <_malloc_r+0x1aa>
 8009460:	2a00      	cmp	r2, #0
 8009462:	d000      	beq.n	8009466 <_malloc_r+0x1aa>
 8009464:	e0bb      	b.n	80095de <_malloc_r+0x322>
 8009466:	2203      	movs	r2, #3
 8009468:	6883      	ldr	r3, [r0, #8]
 800946a:	9302      	str	r3, [sp, #8]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	4393      	bics	r3, r2
 8009470:	9303      	str	r3, [sp, #12]
 8009472:	42ab      	cmp	r3, r5
 8009474:	d303      	bcc.n	800947e <_malloc_r+0x1c2>
 8009476:	1b59      	subs	r1, r3, r5
 8009478:	290f      	cmp	r1, #15
 800947a:	dd00      	ble.n	800947e <_malloc_r+0x1c2>
 800947c:	e123      	b.n	80096c6 <_malloc_r+0x40a>
 800947e:	9b02      	ldr	r3, [sp, #8]
 8009480:	9a03      	ldr	r2, [sp, #12]
 8009482:	2008      	movs	r0, #8
 8009484:	189e      	adds	r6, r3, r2
 8009486:	4b5a      	ldr	r3, [pc, #360]	; (80095f0 <_malloc_r+0x334>)
 8009488:	681f      	ldr	r7, [r3, #0]
 800948a:	f001 fa71 	bl	800a970 <sysconf>
 800948e:	4b59      	ldr	r3, [pc, #356]	; (80095f4 <_malloc_r+0x338>)
 8009490:	3710      	adds	r7, #16
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	197f      	adds	r7, r7, r5
 8009496:	9004      	str	r0, [sp, #16]
 8009498:	3301      	adds	r3, #1
 800949a:	d003      	beq.n	80094a4 <_malloc_r+0x1e8>
 800949c:	1e7b      	subs	r3, r7, #1
 800949e:	181b      	adds	r3, r3, r0
 80094a0:	4247      	negs	r7, r0
 80094a2:	401f      	ands	r7, r3
 80094a4:	0039      	movs	r1, r7
 80094a6:	9801      	ldr	r0, [sp, #4]
 80094a8:	f001 fa0e 	bl	800a8c8 <_sbrk_r>
 80094ac:	0004      	movs	r4, r0
 80094ae:	1c43      	adds	r3, r0, #1
 80094b0:	d100      	bne.n	80094b4 <_malloc_r+0x1f8>
 80094b2:	e0de      	b.n	8009672 <_malloc_r+0x3b6>
 80094b4:	4286      	cmp	r6, r0
 80094b6:	d904      	bls.n	80094c2 <_malloc_r+0x206>
 80094b8:	4b4a      	ldr	r3, [pc, #296]	; (80095e4 <_malloc_r+0x328>)
 80094ba:	9a02      	ldr	r2, [sp, #8]
 80094bc:	429a      	cmp	r2, r3
 80094be:	d000      	beq.n	80094c2 <_malloc_r+0x206>
 80094c0:	e0d7      	b.n	8009672 <_malloc_r+0x3b6>
 80094c2:	4a4d      	ldr	r2, [pc, #308]	; (80095f8 <_malloc_r+0x33c>)
 80094c4:	6813      	ldr	r3, [r2, #0]
 80094c6:	18fb      	adds	r3, r7, r3
 80094c8:	6013      	str	r3, [r2, #0]
 80094ca:	9a04      	ldr	r2, [sp, #16]
 80094cc:	3a01      	subs	r2, #1
 80094ce:	42a6      	cmp	r6, r4
 80094d0:	d000      	beq.n	80094d4 <_malloc_r+0x218>
 80094d2:	e097      	b.n	8009604 <_malloc_r+0x348>
 80094d4:	4216      	tst	r6, r2
 80094d6:	d000      	beq.n	80094da <_malloc_r+0x21e>
 80094d8:	e094      	b.n	8009604 <_malloc_r+0x348>
 80094da:	4b42      	ldr	r3, [pc, #264]	; (80095e4 <_malloc_r+0x328>)
 80094dc:	689a      	ldr	r2, [r3, #8]
 80094de:	9b03      	ldr	r3, [sp, #12]
 80094e0:	19df      	adds	r7, r3, r7
 80094e2:	2301      	movs	r3, #1
 80094e4:	433b      	orrs	r3, r7
 80094e6:	6053      	str	r3, [r2, #4]
 80094e8:	4b43      	ldr	r3, [pc, #268]	; (80095f8 <_malloc_r+0x33c>)
 80094ea:	4a44      	ldr	r2, [pc, #272]	; (80095fc <_malloc_r+0x340>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	6811      	ldr	r1, [r2, #0]
 80094f0:	428b      	cmp	r3, r1
 80094f2:	d900      	bls.n	80094f6 <_malloc_r+0x23a>
 80094f4:	6013      	str	r3, [r2, #0]
 80094f6:	4a42      	ldr	r2, [pc, #264]	; (8009600 <_malloc_r+0x344>)
 80094f8:	6811      	ldr	r1, [r2, #0]
 80094fa:	428b      	cmp	r3, r1
 80094fc:	d800      	bhi.n	8009500 <_malloc_r+0x244>
 80094fe:	e0b8      	b.n	8009672 <_malloc_r+0x3b6>
 8009500:	6013      	str	r3, [r2, #0]
 8009502:	e0b6      	b.n	8009672 <_malloc_r+0x3b6>
 8009504:	0a50      	lsrs	r0, r2, #9
 8009506:	2804      	cmp	r0, #4
 8009508:	d811      	bhi.n	800952e <_malloc_r+0x272>
 800950a:	0991      	lsrs	r1, r2, #6
 800950c:	3138      	adds	r1, #56	; 0x38
 800950e:	00cf      	lsls	r7, r1, #3
 8009510:	19bf      	adds	r7, r7, r6
 8009512:	68b8      	ldr	r0, [r7, #8]
 8009514:	4287      	cmp	r7, r0
 8009516:	d125      	bne.n	8009564 <_malloc_r+0x2a8>
 8009518:	2201      	movs	r2, #1
 800951a:	1089      	asrs	r1, r1, #2
 800951c:	408a      	lsls	r2, r1
 800951e:	4661      	mov	r1, ip
 8009520:	430a      	orrs	r2, r1
 8009522:	6072      	str	r2, [r6, #4]
 8009524:	60e7      	str	r7, [r4, #12]
 8009526:	60a0      	str	r0, [r4, #8]
 8009528:	60bc      	str	r4, [r7, #8]
 800952a:	60c4      	str	r4, [r0, #12]
 800952c:	e76b      	b.n	8009406 <_malloc_r+0x14a>
 800952e:	2814      	cmp	r0, #20
 8009530:	d802      	bhi.n	8009538 <_malloc_r+0x27c>
 8009532:	0001      	movs	r1, r0
 8009534:	315b      	adds	r1, #91	; 0x5b
 8009536:	e7ea      	b.n	800950e <_malloc_r+0x252>
 8009538:	2854      	cmp	r0, #84	; 0x54
 800953a:	d802      	bhi.n	8009542 <_malloc_r+0x286>
 800953c:	0b11      	lsrs	r1, r2, #12
 800953e:	316e      	adds	r1, #110	; 0x6e
 8009540:	e7e5      	b.n	800950e <_malloc_r+0x252>
 8009542:	21aa      	movs	r1, #170	; 0xaa
 8009544:	0049      	lsls	r1, r1, #1
 8009546:	4288      	cmp	r0, r1
 8009548:	d802      	bhi.n	8009550 <_malloc_r+0x294>
 800954a:	0bd1      	lsrs	r1, r2, #15
 800954c:	3177      	adds	r1, #119	; 0x77
 800954e:	e7de      	b.n	800950e <_malloc_r+0x252>
 8009550:	4f26      	ldr	r7, [pc, #152]	; (80095ec <_malloc_r+0x330>)
 8009552:	217e      	movs	r1, #126	; 0x7e
 8009554:	42b8      	cmp	r0, r7
 8009556:	d8da      	bhi.n	800950e <_malloc_r+0x252>
 8009558:	0c91      	lsrs	r1, r2, #18
 800955a:	317c      	adds	r1, #124	; 0x7c
 800955c:	e7d7      	b.n	800950e <_malloc_r+0x252>
 800955e:	6880      	ldr	r0, [r0, #8]
 8009560:	4287      	cmp	r7, r0
 8009562:	d004      	beq.n	800956e <_malloc_r+0x2b2>
 8009564:	2603      	movs	r6, #3
 8009566:	6841      	ldr	r1, [r0, #4]
 8009568:	43b1      	bics	r1, r6
 800956a:	4291      	cmp	r1, r2
 800956c:	d8f7      	bhi.n	800955e <_malloc_r+0x2a2>
 800956e:	68c7      	ldr	r7, [r0, #12]
 8009570:	e7d8      	b.n	8009524 <_malloc_r+0x268>
 8009572:	2603      	movs	r6, #3
 8009574:	6861      	ldr	r1, [r4, #4]
 8009576:	43b1      	bics	r1, r6
 8009578:	9103      	str	r1, [sp, #12]
 800957a:	68e6      	ldr	r6, [r4, #12]
 800957c:	1b49      	subs	r1, r1, r5
 800957e:	290f      	cmp	r1, #15
 8009580:	dd10      	ble.n	80095a4 <_malloc_r+0x2e8>
 8009582:	2201      	movs	r2, #1
 8009584:	1963      	adds	r3, r4, r5
 8009586:	4315      	orrs	r5, r2
 8009588:	6065      	str	r5, [r4, #4]
 800958a:	68a5      	ldr	r5, [r4, #8]
 800958c:	430a      	orrs	r2, r1
 800958e:	60ee      	str	r6, [r5, #12]
 8009590:	60b5      	str	r5, [r6, #8]
 8009592:	6143      	str	r3, [r0, #20]
 8009594:	6103      	str	r3, [r0, #16]
 8009596:	4814      	ldr	r0, [pc, #80]	; (80095e8 <_malloc_r+0x32c>)
 8009598:	605a      	str	r2, [r3, #4]
 800959a:	60d8      	str	r0, [r3, #12]
 800959c:	6098      	str	r0, [r3, #8]
 800959e:	9b03      	ldr	r3, [sp, #12]
 80095a0:	50e1      	str	r1, [r4, r3]
 80095a2:	e6eb      	b.n	800937c <_malloc_r+0xc0>
 80095a4:	2900      	cmp	r1, #0
 80095a6:	db09      	blt.n	80095bc <_malloc_r+0x300>
 80095a8:	9b03      	ldr	r3, [sp, #12]
 80095aa:	18e1      	adds	r1, r4, r3
 80095ac:	2301      	movs	r3, #1
 80095ae:	684a      	ldr	r2, [r1, #4]
 80095b0:	4313      	orrs	r3, r2
 80095b2:	604b      	str	r3, [r1, #4]
 80095b4:	68a3      	ldr	r3, [r4, #8]
 80095b6:	60de      	str	r6, [r3, #12]
 80095b8:	60b3      	str	r3, [r6, #8]
 80095ba:	e6df      	b.n	800937c <_malloc_r+0xc0>
 80095bc:	0034      	movs	r4, r6
 80095be:	e739      	b.n	8009434 <_malloc_r+0x178>
 80095c0:	2108      	movs	r1, #8
 80095c2:	4249      	negs	r1, r1
 80095c4:	448c      	add	ip, r1
 80095c6:	4661      	mov	r1, ip
 80095c8:	6889      	ldr	r1, [r1, #8]
 80095ca:	3b01      	subs	r3, #1
 80095cc:	4561      	cmp	r1, ip
 80095ce:	d100      	bne.n	80095d2 <_malloc_r+0x316>
 80095d0:	e73a      	b.n	8009448 <_malloc_r+0x18c>
 80095d2:	e740      	b.n	8009456 <_malloc_r+0x19a>
 80095d4:	3304      	adds	r3, #4
 80095d6:	0052      	lsls	r2, r2, #1
 80095d8:	420a      	tst	r2, r1
 80095da:	d0fb      	beq.n	80095d4 <_malloc_r+0x318>
 80095dc:	e724      	b.n	8009428 <_malloc_r+0x16c>
 80095de:	9b02      	ldr	r3, [sp, #8]
 80095e0:	e7fa      	b.n	80095d8 <_malloc_r+0x31c>
 80095e2:	46c0      	nop			; (mov r8, r8)
 80095e4:	20000038 	.word	0x20000038
 80095e8:	20000040 	.word	0x20000040
 80095ec:	00000554 	.word	0x00000554
 80095f0:	20000cc4 	.word	0x20000cc4
 80095f4:	20000440 	.word	0x20000440
 80095f8:	20000c94 	.word	0x20000c94
 80095fc:	20000cbc 	.word	0x20000cbc
 8009600:	20000cc0 	.word	0x20000cc0
 8009604:	4934      	ldr	r1, [pc, #208]	; (80096d8 <_malloc_r+0x41c>)
 8009606:	6808      	ldr	r0, [r1, #0]
 8009608:	3001      	adds	r0, #1
 800960a:	d140      	bne.n	800968e <_malloc_r+0x3d2>
 800960c:	600c      	str	r4, [r1, #0]
 800960e:	2107      	movs	r1, #7
 8009610:	0026      	movs	r6, r4
 8009612:	2300      	movs	r3, #0
 8009614:	400e      	ands	r6, r1
 8009616:	420c      	tst	r4, r1
 8009618:	d002      	beq.n	8009620 <_malloc_r+0x364>
 800961a:	3308      	adds	r3, #8
 800961c:	1b9b      	subs	r3, r3, r6
 800961e:	18e4      	adds	r4, r4, r3
 8009620:	19e1      	adds	r1, r4, r7
 8009622:	9105      	str	r1, [sp, #20]
 8009624:	9f05      	ldr	r7, [sp, #20]
 8009626:	9904      	ldr	r1, [sp, #16]
 8009628:	4017      	ands	r7, r2
 800962a:	18cb      	adds	r3, r1, r3
 800962c:	1bdf      	subs	r7, r3, r7
 800962e:	4017      	ands	r7, r2
 8009630:	0039      	movs	r1, r7
 8009632:	9801      	ldr	r0, [sp, #4]
 8009634:	f001 f948 	bl	800a8c8 <_sbrk_r>
 8009638:	1c43      	adds	r3, r0, #1
 800963a:	d107      	bne.n	800964c <_malloc_r+0x390>
 800963c:	1e37      	subs	r7, r6, #0
 800963e:	9805      	ldr	r0, [sp, #20]
 8009640:	d004      	beq.n	800964c <_malloc_r+0x390>
 8009642:	0030      	movs	r0, r6
 8009644:	2700      	movs	r7, #0
 8009646:	9b05      	ldr	r3, [sp, #20]
 8009648:	3808      	subs	r0, #8
 800964a:	1818      	adds	r0, r3, r0
 800964c:	4a23      	ldr	r2, [pc, #140]	; (80096dc <_malloc_r+0x420>)
 800964e:	1b00      	subs	r0, r0, r4
 8009650:	6813      	ldr	r3, [r2, #0]
 8009652:	19c0      	adds	r0, r0, r7
 8009654:	19db      	adds	r3, r3, r7
 8009656:	6013      	str	r3, [r2, #0]
 8009658:	2201      	movs	r2, #1
 800965a:	4b21      	ldr	r3, [pc, #132]	; (80096e0 <_malloc_r+0x424>)
 800965c:	9902      	ldr	r1, [sp, #8]
 800965e:	4310      	orrs	r0, r2
 8009660:	609c      	str	r4, [r3, #8]
 8009662:	6060      	str	r0, [r4, #4]
 8009664:	4299      	cmp	r1, r3
 8009666:	d100      	bne.n	800966a <_malloc_r+0x3ae>
 8009668:	e73e      	b.n	80094e8 <_malloc_r+0x22c>
 800966a:	9b03      	ldr	r3, [sp, #12]
 800966c:	2b0f      	cmp	r3, #15
 800966e:	d813      	bhi.n	8009698 <_malloc_r+0x3dc>
 8009670:	6062      	str	r2, [r4, #4]
 8009672:	2203      	movs	r2, #3
 8009674:	4b1a      	ldr	r3, [pc, #104]	; (80096e0 <_malloc_r+0x424>)
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	4393      	bics	r3, r2
 800967c:	1b59      	subs	r1, r3, r5
 800967e:	42ab      	cmp	r3, r5
 8009680:	d301      	bcc.n	8009686 <_malloc_r+0x3ca>
 8009682:	290f      	cmp	r1, #15
 8009684:	dc1f      	bgt.n	80096c6 <_malloc_r+0x40a>
 8009686:	9801      	ldr	r0, [sp, #4]
 8009688:	f000 f834 	bl	80096f4 <__malloc_unlock>
 800968c:	e623      	b.n	80092d6 <_malloc_r+0x1a>
 800968e:	4913      	ldr	r1, [pc, #76]	; (80096dc <_malloc_r+0x420>)
 8009690:	1ba6      	subs	r6, r4, r6
 8009692:	18f6      	adds	r6, r6, r3
 8009694:	600e      	str	r6, [r1, #0]
 8009696:	e7ba      	b.n	800960e <_malloc_r+0x352>
 8009698:	2107      	movs	r1, #7
 800969a:	9b03      	ldr	r3, [sp, #12]
 800969c:	3b0c      	subs	r3, #12
 800969e:	438b      	bics	r3, r1
 80096a0:	9902      	ldr	r1, [sp, #8]
 80096a2:	6849      	ldr	r1, [r1, #4]
 80096a4:	400a      	ands	r2, r1
 80096a6:	9902      	ldr	r1, [sp, #8]
 80096a8:	431a      	orrs	r2, r3
 80096aa:	604a      	str	r2, [r1, #4]
 80096ac:	18ca      	adds	r2, r1, r3
 80096ae:	2105      	movs	r1, #5
 80096b0:	6051      	str	r1, [r2, #4]
 80096b2:	6091      	str	r1, [r2, #8]
 80096b4:	2b0f      	cmp	r3, #15
 80096b6:	d800      	bhi.n	80096ba <_malloc_r+0x3fe>
 80096b8:	e716      	b.n	80094e8 <_malloc_r+0x22c>
 80096ba:	9902      	ldr	r1, [sp, #8]
 80096bc:	9801      	ldr	r0, [sp, #4]
 80096be:	3108      	adds	r1, #8
 80096c0:	f001 f9dc 	bl	800aa7c <_free_r>
 80096c4:	e710      	b.n	80094e8 <_malloc_r+0x22c>
 80096c6:	2201      	movs	r2, #1
 80096c8:	0013      	movs	r3, r2
 80096ca:	4805      	ldr	r0, [pc, #20]	; (80096e0 <_malloc_r+0x424>)
 80096cc:	432b      	orrs	r3, r5
 80096ce:	6884      	ldr	r4, [r0, #8]
 80096d0:	6063      	str	r3, [r4, #4]
 80096d2:	1963      	adds	r3, r4, r5
 80096d4:	6083      	str	r3, [r0, #8]
 80096d6:	e623      	b.n	8009320 <_malloc_r+0x64>
 80096d8:	20000440 	.word	0x20000440
 80096dc:	20000c94 	.word	0x20000c94
 80096e0:	20000038 	.word	0x20000038

080096e4 <__malloc_lock>:
 80096e4:	b510      	push	{r4, lr}
 80096e6:	4802      	ldr	r0, [pc, #8]	; (80096f0 <__malloc_lock+0xc>)
 80096e8:	f001 f940 	bl	800a96c <__retarget_lock_acquire_recursive>
 80096ec:	bd10      	pop	{r4, pc}
 80096ee:	46c0      	nop			; (mov r8, r8)
 80096f0:	20000e09 	.word	0x20000e09

080096f4 <__malloc_unlock>:
 80096f4:	b510      	push	{r4, lr}
 80096f6:	4802      	ldr	r0, [pc, #8]	; (8009700 <__malloc_unlock+0xc>)
 80096f8:	f001 f939 	bl	800a96e <__retarget_lock_release_recursive>
 80096fc:	bd10      	pop	{r4, pc}
 80096fe:	46c0      	nop			; (mov r8, r8)
 8009700:	20000e09 	.word	0x20000e09

08009704 <sulp>:
 8009704:	b570      	push	{r4, r5, r6, lr}
 8009706:	0016      	movs	r6, r2
 8009708:	000d      	movs	r5, r1
 800970a:	f002 f90d 	bl	800b928 <__ulp>
 800970e:	2e00      	cmp	r6, #0
 8009710:	d00d      	beq.n	800972e <sulp+0x2a>
 8009712:	236b      	movs	r3, #107	; 0x6b
 8009714:	006a      	lsls	r2, r5, #1
 8009716:	0d52      	lsrs	r2, r2, #21
 8009718:	1a9b      	subs	r3, r3, r2
 800971a:	2b00      	cmp	r3, #0
 800971c:	dd07      	ble.n	800972e <sulp+0x2a>
 800971e:	2400      	movs	r4, #0
 8009720:	4a03      	ldr	r2, [pc, #12]	; (8009730 <sulp+0x2c>)
 8009722:	051b      	lsls	r3, r3, #20
 8009724:	189d      	adds	r5, r3, r2
 8009726:	002b      	movs	r3, r5
 8009728:	0022      	movs	r2, r4
 800972a:	f7f7 ff9f 	bl	800166c <__aeabi_dmul>
 800972e:	bd70      	pop	{r4, r5, r6, pc}
 8009730:	3ff00000 	.word	0x3ff00000

08009734 <_strtod_l>:
 8009734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009736:	b0a1      	sub	sp, #132	; 0x84
 8009738:	9219      	str	r2, [sp, #100]	; 0x64
 800973a:	2200      	movs	r2, #0
 800973c:	2600      	movs	r6, #0
 800973e:	2700      	movs	r7, #0
 8009740:	9004      	str	r0, [sp, #16]
 8009742:	9107      	str	r1, [sp, #28]
 8009744:	921c      	str	r2, [sp, #112]	; 0x70
 8009746:	911b      	str	r1, [sp, #108]	; 0x6c
 8009748:	780a      	ldrb	r2, [r1, #0]
 800974a:	2a2b      	cmp	r2, #43	; 0x2b
 800974c:	d055      	beq.n	80097fa <_strtod_l+0xc6>
 800974e:	d841      	bhi.n	80097d4 <_strtod_l+0xa0>
 8009750:	2a0d      	cmp	r2, #13
 8009752:	d83b      	bhi.n	80097cc <_strtod_l+0x98>
 8009754:	2a08      	cmp	r2, #8
 8009756:	d83b      	bhi.n	80097d0 <_strtod_l+0x9c>
 8009758:	2a00      	cmp	r2, #0
 800975a:	d044      	beq.n	80097e6 <_strtod_l+0xb2>
 800975c:	2200      	movs	r2, #0
 800975e:	920f      	str	r2, [sp, #60]	; 0x3c
 8009760:	2100      	movs	r1, #0
 8009762:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009764:	9109      	str	r1, [sp, #36]	; 0x24
 8009766:	782a      	ldrb	r2, [r5, #0]
 8009768:	2a30      	cmp	r2, #48	; 0x30
 800976a:	d000      	beq.n	800976e <_strtod_l+0x3a>
 800976c:	e085      	b.n	800987a <_strtod_l+0x146>
 800976e:	786a      	ldrb	r2, [r5, #1]
 8009770:	3120      	adds	r1, #32
 8009772:	438a      	bics	r2, r1
 8009774:	2a58      	cmp	r2, #88	; 0x58
 8009776:	d000      	beq.n	800977a <_strtod_l+0x46>
 8009778:	e075      	b.n	8009866 <_strtod_l+0x132>
 800977a:	9302      	str	r3, [sp, #8]
 800977c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800977e:	4a97      	ldr	r2, [pc, #604]	; (80099dc <_strtod_l+0x2a8>)
 8009780:	9301      	str	r3, [sp, #4]
 8009782:	ab1c      	add	r3, sp, #112	; 0x70
 8009784:	9300      	str	r3, [sp, #0]
 8009786:	9804      	ldr	r0, [sp, #16]
 8009788:	ab1d      	add	r3, sp, #116	; 0x74
 800978a:	a91b      	add	r1, sp, #108	; 0x6c
 800978c:	f001 fa92 	bl	800acb4 <__gethex>
 8009790:	230f      	movs	r3, #15
 8009792:	0002      	movs	r2, r0
 8009794:	401a      	ands	r2, r3
 8009796:	0004      	movs	r4, r0
 8009798:	9205      	str	r2, [sp, #20]
 800979a:	4218      	tst	r0, r3
 800979c:	d005      	beq.n	80097aa <_strtod_l+0x76>
 800979e:	2a06      	cmp	r2, #6
 80097a0:	d12d      	bne.n	80097fe <_strtod_l+0xca>
 80097a2:	1c6b      	adds	r3, r5, #1
 80097a4:	931b      	str	r3, [sp, #108]	; 0x6c
 80097a6:	2300      	movs	r3, #0
 80097a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80097aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d002      	beq.n	80097b6 <_strtod_l+0x82>
 80097b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80097b2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80097b4:	6013      	str	r3, [r2, #0]
 80097b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d01b      	beq.n	80097f4 <_strtod_l+0xc0>
 80097bc:	2380      	movs	r3, #128	; 0x80
 80097be:	0032      	movs	r2, r6
 80097c0:	061b      	lsls	r3, r3, #24
 80097c2:	18fb      	adds	r3, r7, r3
 80097c4:	0010      	movs	r0, r2
 80097c6:	0019      	movs	r1, r3
 80097c8:	b021      	add	sp, #132	; 0x84
 80097ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097cc:	2a20      	cmp	r2, #32
 80097ce:	d1c5      	bne.n	800975c <_strtod_l+0x28>
 80097d0:	3101      	adds	r1, #1
 80097d2:	e7b8      	b.n	8009746 <_strtod_l+0x12>
 80097d4:	2a2d      	cmp	r2, #45	; 0x2d
 80097d6:	d1c1      	bne.n	800975c <_strtod_l+0x28>
 80097d8:	3a2c      	subs	r2, #44	; 0x2c
 80097da:	920f      	str	r2, [sp, #60]	; 0x3c
 80097dc:	1c4a      	adds	r2, r1, #1
 80097de:	921b      	str	r2, [sp, #108]	; 0x6c
 80097e0:	784a      	ldrb	r2, [r1, #1]
 80097e2:	2a00      	cmp	r2, #0
 80097e4:	d1bc      	bne.n	8009760 <_strtod_l+0x2c>
 80097e6:	9b07      	ldr	r3, [sp, #28]
 80097e8:	931b      	str	r3, [sp, #108]	; 0x6c
 80097ea:	2300      	movs	r3, #0
 80097ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80097ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1dd      	bne.n	80097b0 <_strtod_l+0x7c>
 80097f4:	0032      	movs	r2, r6
 80097f6:	003b      	movs	r3, r7
 80097f8:	e7e4      	b.n	80097c4 <_strtod_l+0x90>
 80097fa:	2200      	movs	r2, #0
 80097fc:	e7ed      	b.n	80097da <_strtod_l+0xa6>
 80097fe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009800:	2a00      	cmp	r2, #0
 8009802:	d007      	beq.n	8009814 <_strtod_l+0xe0>
 8009804:	2135      	movs	r1, #53	; 0x35
 8009806:	a81e      	add	r0, sp, #120	; 0x78
 8009808:	f002 f97f 	bl	800bb0a <__copybits>
 800980c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800980e:	9804      	ldr	r0, [sp, #16]
 8009810:	f001 fd7c 	bl	800b30c <_Bfree>
 8009814:	9805      	ldr	r0, [sp, #20]
 8009816:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009818:	3801      	subs	r0, #1
 800981a:	2804      	cmp	r0, #4
 800981c:	d806      	bhi.n	800982c <_strtod_l+0xf8>
 800981e:	f7f6 fc79 	bl	8000114 <__gnu_thumb1_case_uqi>
 8009822:	0312      	.short	0x0312
 8009824:	1e1c      	.short	0x1e1c
 8009826:	12          	.byte	0x12
 8009827:	00          	.byte	0x00
 8009828:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800982a:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800982c:	05e4      	lsls	r4, r4, #23
 800982e:	d502      	bpl.n	8009836 <_strtod_l+0x102>
 8009830:	2380      	movs	r3, #128	; 0x80
 8009832:	061b      	lsls	r3, r3, #24
 8009834:	431f      	orrs	r7, r3
 8009836:	4b6a      	ldr	r3, [pc, #424]	; (80099e0 <_strtod_l+0x2ac>)
 8009838:	423b      	tst	r3, r7
 800983a:	d1b6      	bne.n	80097aa <_strtod_l+0x76>
 800983c:	f001 f86a 	bl	800a914 <__errno>
 8009840:	2322      	movs	r3, #34	; 0x22
 8009842:	6003      	str	r3, [r0, #0]
 8009844:	e7b1      	b.n	80097aa <_strtod_l+0x76>
 8009846:	4967      	ldr	r1, [pc, #412]	; (80099e4 <_strtod_l+0x2b0>)
 8009848:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800984a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800984c:	400a      	ands	r2, r1
 800984e:	4966      	ldr	r1, [pc, #408]	; (80099e8 <_strtod_l+0x2b4>)
 8009850:	185b      	adds	r3, r3, r1
 8009852:	051b      	lsls	r3, r3, #20
 8009854:	431a      	orrs	r2, r3
 8009856:	0017      	movs	r7, r2
 8009858:	e7e8      	b.n	800982c <_strtod_l+0xf8>
 800985a:	4f61      	ldr	r7, [pc, #388]	; (80099e0 <_strtod_l+0x2ac>)
 800985c:	e7e6      	b.n	800982c <_strtod_l+0xf8>
 800985e:	2601      	movs	r6, #1
 8009860:	4f62      	ldr	r7, [pc, #392]	; (80099ec <_strtod_l+0x2b8>)
 8009862:	4276      	negs	r6, r6
 8009864:	e7e2      	b.n	800982c <_strtod_l+0xf8>
 8009866:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009868:	1c5a      	adds	r2, r3, #1
 800986a:	921b      	str	r2, [sp, #108]	; 0x6c
 800986c:	785b      	ldrb	r3, [r3, #1]
 800986e:	2b30      	cmp	r3, #48	; 0x30
 8009870:	d0f9      	beq.n	8009866 <_strtod_l+0x132>
 8009872:	2b00      	cmp	r3, #0
 8009874:	d099      	beq.n	80097aa <_strtod_l+0x76>
 8009876:	2301      	movs	r3, #1
 8009878:	9309      	str	r3, [sp, #36]	; 0x24
 800987a:	2500      	movs	r5, #0
 800987c:	220a      	movs	r2, #10
 800987e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009880:	950d      	str	r5, [sp, #52]	; 0x34
 8009882:	9310      	str	r3, [sp, #64]	; 0x40
 8009884:	9508      	str	r5, [sp, #32]
 8009886:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8009888:	7804      	ldrb	r4, [r0, #0]
 800988a:	0023      	movs	r3, r4
 800988c:	3b30      	subs	r3, #48	; 0x30
 800988e:	b2d9      	uxtb	r1, r3
 8009890:	2909      	cmp	r1, #9
 8009892:	d927      	bls.n	80098e4 <_strtod_l+0x1b0>
 8009894:	2201      	movs	r2, #1
 8009896:	4956      	ldr	r1, [pc, #344]	; (80099f0 <_strtod_l+0x2bc>)
 8009898:	f000 ff98 	bl	800a7cc <strncmp>
 800989c:	2800      	cmp	r0, #0
 800989e:	d031      	beq.n	8009904 <_strtod_l+0x1d0>
 80098a0:	2000      	movs	r0, #0
 80098a2:	0023      	movs	r3, r4
 80098a4:	4684      	mov	ip, r0
 80098a6:	9a08      	ldr	r2, [sp, #32]
 80098a8:	900c      	str	r0, [sp, #48]	; 0x30
 80098aa:	9205      	str	r2, [sp, #20]
 80098ac:	2220      	movs	r2, #32
 80098ae:	0019      	movs	r1, r3
 80098b0:	4391      	bics	r1, r2
 80098b2:	000a      	movs	r2, r1
 80098b4:	2100      	movs	r1, #0
 80098b6:	9106      	str	r1, [sp, #24]
 80098b8:	2a45      	cmp	r2, #69	; 0x45
 80098ba:	d000      	beq.n	80098be <_strtod_l+0x18a>
 80098bc:	e0c2      	b.n	8009a44 <_strtod_l+0x310>
 80098be:	9b05      	ldr	r3, [sp, #20]
 80098c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098c2:	4303      	orrs	r3, r0
 80098c4:	4313      	orrs	r3, r2
 80098c6:	428b      	cmp	r3, r1
 80098c8:	d08d      	beq.n	80097e6 <_strtod_l+0xb2>
 80098ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80098cc:	9307      	str	r3, [sp, #28]
 80098ce:	3301      	adds	r3, #1
 80098d0:	931b      	str	r3, [sp, #108]	; 0x6c
 80098d2:	9b07      	ldr	r3, [sp, #28]
 80098d4:	785b      	ldrb	r3, [r3, #1]
 80098d6:	2b2b      	cmp	r3, #43	; 0x2b
 80098d8:	d071      	beq.n	80099be <_strtod_l+0x28a>
 80098da:	000c      	movs	r4, r1
 80098dc:	2b2d      	cmp	r3, #45	; 0x2d
 80098de:	d174      	bne.n	80099ca <_strtod_l+0x296>
 80098e0:	2401      	movs	r4, #1
 80098e2:	e06d      	b.n	80099c0 <_strtod_l+0x28c>
 80098e4:	9908      	ldr	r1, [sp, #32]
 80098e6:	2908      	cmp	r1, #8
 80098e8:	dc09      	bgt.n	80098fe <_strtod_l+0x1ca>
 80098ea:	990d      	ldr	r1, [sp, #52]	; 0x34
 80098ec:	4351      	muls	r1, r2
 80098ee:	185b      	adds	r3, r3, r1
 80098f0:	930d      	str	r3, [sp, #52]	; 0x34
 80098f2:	9b08      	ldr	r3, [sp, #32]
 80098f4:	3001      	adds	r0, #1
 80098f6:	3301      	adds	r3, #1
 80098f8:	9308      	str	r3, [sp, #32]
 80098fa:	901b      	str	r0, [sp, #108]	; 0x6c
 80098fc:	e7c3      	b.n	8009886 <_strtod_l+0x152>
 80098fe:	4355      	muls	r5, r2
 8009900:	195d      	adds	r5, r3, r5
 8009902:	e7f6      	b.n	80098f2 <_strtod_l+0x1be>
 8009904:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009906:	1c5a      	adds	r2, r3, #1
 8009908:	921b      	str	r2, [sp, #108]	; 0x6c
 800990a:	9a08      	ldr	r2, [sp, #32]
 800990c:	785b      	ldrb	r3, [r3, #1]
 800990e:	2a00      	cmp	r2, #0
 8009910:	d03a      	beq.n	8009988 <_strtod_l+0x254>
 8009912:	900c      	str	r0, [sp, #48]	; 0x30
 8009914:	9205      	str	r2, [sp, #20]
 8009916:	001a      	movs	r2, r3
 8009918:	3a30      	subs	r2, #48	; 0x30
 800991a:	2a09      	cmp	r2, #9
 800991c:	d912      	bls.n	8009944 <_strtod_l+0x210>
 800991e:	2201      	movs	r2, #1
 8009920:	4694      	mov	ip, r2
 8009922:	e7c3      	b.n	80098ac <_strtod_l+0x178>
 8009924:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009926:	3001      	adds	r0, #1
 8009928:	1c5a      	adds	r2, r3, #1
 800992a:	921b      	str	r2, [sp, #108]	; 0x6c
 800992c:	785b      	ldrb	r3, [r3, #1]
 800992e:	2b30      	cmp	r3, #48	; 0x30
 8009930:	d0f8      	beq.n	8009924 <_strtod_l+0x1f0>
 8009932:	001a      	movs	r2, r3
 8009934:	3a31      	subs	r2, #49	; 0x31
 8009936:	2a08      	cmp	r2, #8
 8009938:	d83c      	bhi.n	80099b4 <_strtod_l+0x280>
 800993a:	900c      	str	r0, [sp, #48]	; 0x30
 800993c:	2000      	movs	r0, #0
 800993e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009940:	9005      	str	r0, [sp, #20]
 8009942:	9210      	str	r2, [sp, #64]	; 0x40
 8009944:	001a      	movs	r2, r3
 8009946:	1c41      	adds	r1, r0, #1
 8009948:	3a30      	subs	r2, #48	; 0x30
 800994a:	2b30      	cmp	r3, #48	; 0x30
 800994c:	d016      	beq.n	800997c <_strtod_l+0x248>
 800994e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009950:	185b      	adds	r3, r3, r1
 8009952:	930c      	str	r3, [sp, #48]	; 0x30
 8009954:	9b05      	ldr	r3, [sp, #20]
 8009956:	210a      	movs	r1, #10
 8009958:	469c      	mov	ip, r3
 800995a:	4484      	add	ip, r0
 800995c:	4563      	cmp	r3, ip
 800995e:	d115      	bne.n	800998c <_strtod_l+0x258>
 8009960:	9905      	ldr	r1, [sp, #20]
 8009962:	9b05      	ldr	r3, [sp, #20]
 8009964:	3101      	adds	r1, #1
 8009966:	1809      	adds	r1, r1, r0
 8009968:	181b      	adds	r3, r3, r0
 800996a:	9105      	str	r1, [sp, #20]
 800996c:	2b08      	cmp	r3, #8
 800996e:	dc19      	bgt.n	80099a4 <_strtod_l+0x270>
 8009970:	230a      	movs	r3, #10
 8009972:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009974:	434b      	muls	r3, r1
 8009976:	2100      	movs	r1, #0
 8009978:	18d3      	adds	r3, r2, r3
 800997a:	930d      	str	r3, [sp, #52]	; 0x34
 800997c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800997e:	0008      	movs	r0, r1
 8009980:	1c5a      	adds	r2, r3, #1
 8009982:	921b      	str	r2, [sp, #108]	; 0x6c
 8009984:	785b      	ldrb	r3, [r3, #1]
 8009986:	e7c6      	b.n	8009916 <_strtod_l+0x1e2>
 8009988:	9808      	ldr	r0, [sp, #32]
 800998a:	e7d0      	b.n	800992e <_strtod_l+0x1fa>
 800998c:	1c5c      	adds	r4, r3, #1
 800998e:	2b08      	cmp	r3, #8
 8009990:	dc04      	bgt.n	800999c <_strtod_l+0x268>
 8009992:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009994:	434b      	muls	r3, r1
 8009996:	930d      	str	r3, [sp, #52]	; 0x34
 8009998:	0023      	movs	r3, r4
 800999a:	e7df      	b.n	800995c <_strtod_l+0x228>
 800999c:	2c10      	cmp	r4, #16
 800999e:	dcfb      	bgt.n	8009998 <_strtod_l+0x264>
 80099a0:	434d      	muls	r5, r1
 80099a2:	e7f9      	b.n	8009998 <_strtod_l+0x264>
 80099a4:	9b05      	ldr	r3, [sp, #20]
 80099a6:	2100      	movs	r1, #0
 80099a8:	2b10      	cmp	r3, #16
 80099aa:	dce7      	bgt.n	800997c <_strtod_l+0x248>
 80099ac:	230a      	movs	r3, #10
 80099ae:	435d      	muls	r5, r3
 80099b0:	1955      	adds	r5, r2, r5
 80099b2:	e7e3      	b.n	800997c <_strtod_l+0x248>
 80099b4:	2200      	movs	r2, #0
 80099b6:	920c      	str	r2, [sp, #48]	; 0x30
 80099b8:	9205      	str	r2, [sp, #20]
 80099ba:	3201      	adds	r2, #1
 80099bc:	e7b0      	b.n	8009920 <_strtod_l+0x1ec>
 80099be:	2400      	movs	r4, #0
 80099c0:	9b07      	ldr	r3, [sp, #28]
 80099c2:	3302      	adds	r3, #2
 80099c4:	931b      	str	r3, [sp, #108]	; 0x6c
 80099c6:	9b07      	ldr	r3, [sp, #28]
 80099c8:	789b      	ldrb	r3, [r3, #2]
 80099ca:	001a      	movs	r2, r3
 80099cc:	3a30      	subs	r2, #48	; 0x30
 80099ce:	2a09      	cmp	r2, #9
 80099d0:	d914      	bls.n	80099fc <_strtod_l+0x2c8>
 80099d2:	9a07      	ldr	r2, [sp, #28]
 80099d4:	921b      	str	r2, [sp, #108]	; 0x6c
 80099d6:	2200      	movs	r2, #0
 80099d8:	e033      	b.n	8009a42 <_strtod_l+0x30e>
 80099da:	46c0      	nop			; (mov r8, r8)
 80099dc:	08012b34 	.word	0x08012b34
 80099e0:	7ff00000 	.word	0x7ff00000
 80099e4:	ffefffff 	.word	0xffefffff
 80099e8:	00000433 	.word	0x00000433
 80099ec:	7fffffff 	.word	0x7fffffff
 80099f0:	08012b30 	.word	0x08012b30
 80099f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80099f6:	1c5a      	adds	r2, r3, #1
 80099f8:	921b      	str	r2, [sp, #108]	; 0x6c
 80099fa:	785b      	ldrb	r3, [r3, #1]
 80099fc:	2b30      	cmp	r3, #48	; 0x30
 80099fe:	d0f9      	beq.n	80099f4 <_strtod_l+0x2c0>
 8009a00:	2200      	movs	r2, #0
 8009a02:	9206      	str	r2, [sp, #24]
 8009a04:	001a      	movs	r2, r3
 8009a06:	3a31      	subs	r2, #49	; 0x31
 8009a08:	2a08      	cmp	r2, #8
 8009a0a:	d81b      	bhi.n	8009a44 <_strtod_l+0x310>
 8009a0c:	3b30      	subs	r3, #48	; 0x30
 8009a0e:	930e      	str	r3, [sp, #56]	; 0x38
 8009a10:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009a12:	9306      	str	r3, [sp, #24]
 8009a14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009a16:	1c59      	adds	r1, r3, #1
 8009a18:	911b      	str	r1, [sp, #108]	; 0x6c
 8009a1a:	785b      	ldrb	r3, [r3, #1]
 8009a1c:	001a      	movs	r2, r3
 8009a1e:	3a30      	subs	r2, #48	; 0x30
 8009a20:	2a09      	cmp	r2, #9
 8009a22:	d93a      	bls.n	8009a9a <_strtod_l+0x366>
 8009a24:	9a06      	ldr	r2, [sp, #24]
 8009a26:	1a8a      	subs	r2, r1, r2
 8009a28:	49b2      	ldr	r1, [pc, #712]	; (8009cf4 <_strtod_l+0x5c0>)
 8009a2a:	9106      	str	r1, [sp, #24]
 8009a2c:	2a08      	cmp	r2, #8
 8009a2e:	dc04      	bgt.n	8009a3a <_strtod_l+0x306>
 8009a30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a32:	9206      	str	r2, [sp, #24]
 8009a34:	428a      	cmp	r2, r1
 8009a36:	dd00      	ble.n	8009a3a <_strtod_l+0x306>
 8009a38:	9106      	str	r1, [sp, #24]
 8009a3a:	2c00      	cmp	r4, #0
 8009a3c:	d002      	beq.n	8009a44 <_strtod_l+0x310>
 8009a3e:	9a06      	ldr	r2, [sp, #24]
 8009a40:	4252      	negs	r2, r2
 8009a42:	9206      	str	r2, [sp, #24]
 8009a44:	9a05      	ldr	r2, [sp, #20]
 8009a46:	2a00      	cmp	r2, #0
 8009a48:	d14d      	bne.n	8009ae6 <_strtod_l+0x3b2>
 8009a4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a4c:	4310      	orrs	r0, r2
 8009a4e:	d000      	beq.n	8009a52 <_strtod_l+0x31e>
 8009a50:	e6ab      	b.n	80097aa <_strtod_l+0x76>
 8009a52:	4662      	mov	r2, ip
 8009a54:	2a00      	cmp	r2, #0
 8009a56:	d000      	beq.n	8009a5a <_strtod_l+0x326>
 8009a58:	e6c5      	b.n	80097e6 <_strtod_l+0xb2>
 8009a5a:	2b69      	cmp	r3, #105	; 0x69
 8009a5c:	d027      	beq.n	8009aae <_strtod_l+0x37a>
 8009a5e:	dc23      	bgt.n	8009aa8 <_strtod_l+0x374>
 8009a60:	2b49      	cmp	r3, #73	; 0x49
 8009a62:	d024      	beq.n	8009aae <_strtod_l+0x37a>
 8009a64:	2b4e      	cmp	r3, #78	; 0x4e
 8009a66:	d000      	beq.n	8009a6a <_strtod_l+0x336>
 8009a68:	e6bd      	b.n	80097e6 <_strtod_l+0xb2>
 8009a6a:	49a3      	ldr	r1, [pc, #652]	; (8009cf8 <_strtod_l+0x5c4>)
 8009a6c:	a81b      	add	r0, sp, #108	; 0x6c
 8009a6e:	f001 fb57 	bl	800b120 <__match>
 8009a72:	2800      	cmp	r0, #0
 8009a74:	d100      	bne.n	8009a78 <_strtod_l+0x344>
 8009a76:	e6b6      	b.n	80097e6 <_strtod_l+0xb2>
 8009a78:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	2b28      	cmp	r3, #40	; 0x28
 8009a7e:	d12c      	bne.n	8009ada <_strtod_l+0x3a6>
 8009a80:	499e      	ldr	r1, [pc, #632]	; (8009cfc <_strtod_l+0x5c8>)
 8009a82:	aa1e      	add	r2, sp, #120	; 0x78
 8009a84:	a81b      	add	r0, sp, #108	; 0x6c
 8009a86:	f001 fb5f 	bl	800b148 <__hexnan>
 8009a8a:	2805      	cmp	r0, #5
 8009a8c:	d125      	bne.n	8009ada <_strtod_l+0x3a6>
 8009a8e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009a90:	4a9b      	ldr	r2, [pc, #620]	; (8009d00 <_strtod_l+0x5cc>)
 8009a92:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8009a94:	431a      	orrs	r2, r3
 8009a96:	0017      	movs	r7, r2
 8009a98:	e687      	b.n	80097aa <_strtod_l+0x76>
 8009a9a:	220a      	movs	r2, #10
 8009a9c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009a9e:	434a      	muls	r2, r1
 8009aa0:	18d2      	adds	r2, r2, r3
 8009aa2:	3a30      	subs	r2, #48	; 0x30
 8009aa4:	920e      	str	r2, [sp, #56]	; 0x38
 8009aa6:	e7b5      	b.n	8009a14 <_strtod_l+0x2e0>
 8009aa8:	2b6e      	cmp	r3, #110	; 0x6e
 8009aaa:	d0de      	beq.n	8009a6a <_strtod_l+0x336>
 8009aac:	e69b      	b.n	80097e6 <_strtod_l+0xb2>
 8009aae:	4995      	ldr	r1, [pc, #596]	; (8009d04 <_strtod_l+0x5d0>)
 8009ab0:	a81b      	add	r0, sp, #108	; 0x6c
 8009ab2:	f001 fb35 	bl	800b120 <__match>
 8009ab6:	2800      	cmp	r0, #0
 8009ab8:	d100      	bne.n	8009abc <_strtod_l+0x388>
 8009aba:	e694      	b.n	80097e6 <_strtod_l+0xb2>
 8009abc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009abe:	4992      	ldr	r1, [pc, #584]	; (8009d08 <_strtod_l+0x5d4>)
 8009ac0:	3b01      	subs	r3, #1
 8009ac2:	a81b      	add	r0, sp, #108	; 0x6c
 8009ac4:	931b      	str	r3, [sp, #108]	; 0x6c
 8009ac6:	f001 fb2b 	bl	800b120 <__match>
 8009aca:	2800      	cmp	r0, #0
 8009acc:	d102      	bne.n	8009ad4 <_strtod_l+0x3a0>
 8009ace:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	931b      	str	r3, [sp, #108]	; 0x6c
 8009ad4:	2600      	movs	r6, #0
 8009ad6:	4f8a      	ldr	r7, [pc, #552]	; (8009d00 <_strtod_l+0x5cc>)
 8009ad8:	e667      	b.n	80097aa <_strtod_l+0x76>
 8009ada:	488c      	ldr	r0, [pc, #560]	; (8009d0c <_strtod_l+0x5d8>)
 8009adc:	f000 ff5c 	bl	800a998 <nan>
 8009ae0:	0006      	movs	r6, r0
 8009ae2:	000f      	movs	r7, r1
 8009ae4:	e661      	b.n	80097aa <_strtod_l+0x76>
 8009ae6:	9b06      	ldr	r3, [sp, #24]
 8009ae8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009aea:	1a9b      	subs	r3, r3, r2
 8009aec:	9309      	str	r3, [sp, #36]	; 0x24
 8009aee:	9b08      	ldr	r3, [sp, #32]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d101      	bne.n	8009af8 <_strtod_l+0x3c4>
 8009af4:	9b05      	ldr	r3, [sp, #20]
 8009af6:	9308      	str	r3, [sp, #32]
 8009af8:	9c05      	ldr	r4, [sp, #20]
 8009afa:	2c10      	cmp	r4, #16
 8009afc:	dd00      	ble.n	8009b00 <_strtod_l+0x3cc>
 8009afe:	2410      	movs	r4, #16
 8009b00:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009b02:	f7f8 fc7b 	bl	80023fc <__aeabi_ui2d>
 8009b06:	9b05      	ldr	r3, [sp, #20]
 8009b08:	0006      	movs	r6, r0
 8009b0a:	000f      	movs	r7, r1
 8009b0c:	2b09      	cmp	r3, #9
 8009b0e:	dd15      	ble.n	8009b3c <_strtod_l+0x408>
 8009b10:	0022      	movs	r2, r4
 8009b12:	4b7f      	ldr	r3, [pc, #508]	; (8009d10 <_strtod_l+0x5dc>)
 8009b14:	3a09      	subs	r2, #9
 8009b16:	00d2      	lsls	r2, r2, #3
 8009b18:	189b      	adds	r3, r3, r2
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	f7f7 fda5 	bl	800166c <__aeabi_dmul>
 8009b22:	0006      	movs	r6, r0
 8009b24:	0028      	movs	r0, r5
 8009b26:	000f      	movs	r7, r1
 8009b28:	f7f8 fc68 	bl	80023fc <__aeabi_ui2d>
 8009b2c:	0002      	movs	r2, r0
 8009b2e:	000b      	movs	r3, r1
 8009b30:	0030      	movs	r0, r6
 8009b32:	0039      	movs	r1, r7
 8009b34:	f7f6 fe40 	bl	80007b8 <__aeabi_dadd>
 8009b38:	0006      	movs	r6, r0
 8009b3a:	000f      	movs	r7, r1
 8009b3c:	9b05      	ldr	r3, [sp, #20]
 8009b3e:	2b0f      	cmp	r3, #15
 8009b40:	dc39      	bgt.n	8009bb6 <_strtod_l+0x482>
 8009b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d100      	bne.n	8009b4a <_strtod_l+0x416>
 8009b48:	e62f      	b.n	80097aa <_strtod_l+0x76>
 8009b4a:	dd24      	ble.n	8009b96 <_strtod_l+0x462>
 8009b4c:	2b16      	cmp	r3, #22
 8009b4e:	dc09      	bgt.n	8009b64 <_strtod_l+0x430>
 8009b50:	496f      	ldr	r1, [pc, #444]	; (8009d10 <_strtod_l+0x5dc>)
 8009b52:	00db      	lsls	r3, r3, #3
 8009b54:	18c9      	adds	r1, r1, r3
 8009b56:	0032      	movs	r2, r6
 8009b58:	6808      	ldr	r0, [r1, #0]
 8009b5a:	6849      	ldr	r1, [r1, #4]
 8009b5c:	003b      	movs	r3, r7
 8009b5e:	f7f7 fd85 	bl	800166c <__aeabi_dmul>
 8009b62:	e7bd      	b.n	8009ae0 <_strtod_l+0x3ac>
 8009b64:	2325      	movs	r3, #37	; 0x25
 8009b66:	9a05      	ldr	r2, [sp, #20]
 8009b68:	1a9b      	subs	r3, r3, r2
 8009b6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	db22      	blt.n	8009bb6 <_strtod_l+0x482>
 8009b70:	240f      	movs	r4, #15
 8009b72:	9b05      	ldr	r3, [sp, #20]
 8009b74:	4d66      	ldr	r5, [pc, #408]	; (8009d10 <_strtod_l+0x5dc>)
 8009b76:	1ae4      	subs	r4, r4, r3
 8009b78:	00e1      	lsls	r1, r4, #3
 8009b7a:	1869      	adds	r1, r5, r1
 8009b7c:	0032      	movs	r2, r6
 8009b7e:	6808      	ldr	r0, [r1, #0]
 8009b80:	6849      	ldr	r1, [r1, #4]
 8009b82:	003b      	movs	r3, r7
 8009b84:	f7f7 fd72 	bl	800166c <__aeabi_dmul>
 8009b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b8a:	1b1c      	subs	r4, r3, r4
 8009b8c:	00e4      	lsls	r4, r4, #3
 8009b8e:	192d      	adds	r5, r5, r4
 8009b90:	682a      	ldr	r2, [r5, #0]
 8009b92:	686b      	ldr	r3, [r5, #4]
 8009b94:	e7e3      	b.n	8009b5e <_strtod_l+0x42a>
 8009b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b98:	3316      	adds	r3, #22
 8009b9a:	db0c      	blt.n	8009bb6 <_strtod_l+0x482>
 8009b9c:	9906      	ldr	r1, [sp, #24]
 8009b9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ba0:	4b5b      	ldr	r3, [pc, #364]	; (8009d10 <_strtod_l+0x5dc>)
 8009ba2:	1a52      	subs	r2, r2, r1
 8009ba4:	00d2      	lsls	r2, r2, #3
 8009ba6:	189b      	adds	r3, r3, r2
 8009ba8:	0030      	movs	r0, r6
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	0039      	movs	r1, r7
 8009bb0:	f7f7 f962 	bl	8000e78 <__aeabi_ddiv>
 8009bb4:	e794      	b.n	8009ae0 <_strtod_l+0x3ac>
 8009bb6:	9b05      	ldr	r3, [sp, #20]
 8009bb8:	1b1c      	subs	r4, r3, r4
 8009bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bbc:	18e4      	adds	r4, r4, r3
 8009bbe:	2c00      	cmp	r4, #0
 8009bc0:	dd72      	ble.n	8009ca8 <_strtod_l+0x574>
 8009bc2:	220f      	movs	r2, #15
 8009bc4:	0023      	movs	r3, r4
 8009bc6:	4013      	ands	r3, r2
 8009bc8:	4214      	tst	r4, r2
 8009bca:	d00a      	beq.n	8009be2 <_strtod_l+0x4ae>
 8009bcc:	4950      	ldr	r1, [pc, #320]	; (8009d10 <_strtod_l+0x5dc>)
 8009bce:	00db      	lsls	r3, r3, #3
 8009bd0:	18c9      	adds	r1, r1, r3
 8009bd2:	0032      	movs	r2, r6
 8009bd4:	6808      	ldr	r0, [r1, #0]
 8009bd6:	6849      	ldr	r1, [r1, #4]
 8009bd8:	003b      	movs	r3, r7
 8009bda:	f7f7 fd47 	bl	800166c <__aeabi_dmul>
 8009bde:	0006      	movs	r6, r0
 8009be0:	000f      	movs	r7, r1
 8009be2:	230f      	movs	r3, #15
 8009be4:	439c      	bics	r4, r3
 8009be6:	d04a      	beq.n	8009c7e <_strtod_l+0x54a>
 8009be8:	3326      	adds	r3, #38	; 0x26
 8009bea:	33ff      	adds	r3, #255	; 0xff
 8009bec:	429c      	cmp	r4, r3
 8009bee:	dd22      	ble.n	8009c36 <_strtod_l+0x502>
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	9305      	str	r3, [sp, #20]
 8009bf4:	9306      	str	r3, [sp, #24]
 8009bf6:	930d      	str	r3, [sp, #52]	; 0x34
 8009bf8:	9308      	str	r3, [sp, #32]
 8009bfa:	2322      	movs	r3, #34	; 0x22
 8009bfc:	2600      	movs	r6, #0
 8009bfe:	9a04      	ldr	r2, [sp, #16]
 8009c00:	4f3f      	ldr	r7, [pc, #252]	; (8009d00 <_strtod_l+0x5cc>)
 8009c02:	6013      	str	r3, [r2, #0]
 8009c04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c06:	42b3      	cmp	r3, r6
 8009c08:	d100      	bne.n	8009c0c <_strtod_l+0x4d8>
 8009c0a:	e5ce      	b.n	80097aa <_strtod_l+0x76>
 8009c0c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009c0e:	9804      	ldr	r0, [sp, #16]
 8009c10:	f001 fb7c 	bl	800b30c <_Bfree>
 8009c14:	9908      	ldr	r1, [sp, #32]
 8009c16:	9804      	ldr	r0, [sp, #16]
 8009c18:	f001 fb78 	bl	800b30c <_Bfree>
 8009c1c:	9906      	ldr	r1, [sp, #24]
 8009c1e:	9804      	ldr	r0, [sp, #16]
 8009c20:	f001 fb74 	bl	800b30c <_Bfree>
 8009c24:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009c26:	9804      	ldr	r0, [sp, #16]
 8009c28:	f001 fb70 	bl	800b30c <_Bfree>
 8009c2c:	9905      	ldr	r1, [sp, #20]
 8009c2e:	9804      	ldr	r0, [sp, #16]
 8009c30:	f001 fb6c 	bl	800b30c <_Bfree>
 8009c34:	e5b9      	b.n	80097aa <_strtod_l+0x76>
 8009c36:	2300      	movs	r3, #0
 8009c38:	0030      	movs	r0, r6
 8009c3a:	0039      	movs	r1, r7
 8009c3c:	4d35      	ldr	r5, [pc, #212]	; (8009d14 <_strtod_l+0x5e0>)
 8009c3e:	1124      	asrs	r4, r4, #4
 8009c40:	9307      	str	r3, [sp, #28]
 8009c42:	2c01      	cmp	r4, #1
 8009c44:	dc1e      	bgt.n	8009c84 <_strtod_l+0x550>
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d001      	beq.n	8009c4e <_strtod_l+0x51a>
 8009c4a:	0006      	movs	r6, r0
 8009c4c:	000f      	movs	r7, r1
 8009c4e:	4b32      	ldr	r3, [pc, #200]	; (8009d18 <_strtod_l+0x5e4>)
 8009c50:	9a07      	ldr	r2, [sp, #28]
 8009c52:	18ff      	adds	r7, r7, r3
 8009c54:	4b2f      	ldr	r3, [pc, #188]	; (8009d14 <_strtod_l+0x5e0>)
 8009c56:	00d2      	lsls	r2, r2, #3
 8009c58:	189d      	adds	r5, r3, r2
 8009c5a:	6828      	ldr	r0, [r5, #0]
 8009c5c:	6869      	ldr	r1, [r5, #4]
 8009c5e:	0032      	movs	r2, r6
 8009c60:	003b      	movs	r3, r7
 8009c62:	f7f7 fd03 	bl	800166c <__aeabi_dmul>
 8009c66:	4b26      	ldr	r3, [pc, #152]	; (8009d00 <_strtod_l+0x5cc>)
 8009c68:	4a2c      	ldr	r2, [pc, #176]	; (8009d1c <_strtod_l+0x5e8>)
 8009c6a:	0006      	movs	r6, r0
 8009c6c:	400b      	ands	r3, r1
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d8be      	bhi.n	8009bf0 <_strtod_l+0x4bc>
 8009c72:	4a2b      	ldr	r2, [pc, #172]	; (8009d20 <_strtod_l+0x5ec>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d913      	bls.n	8009ca0 <_strtod_l+0x56c>
 8009c78:	2601      	movs	r6, #1
 8009c7a:	4f2a      	ldr	r7, [pc, #168]	; (8009d24 <_strtod_l+0x5f0>)
 8009c7c:	4276      	negs	r6, r6
 8009c7e:	2300      	movs	r3, #0
 8009c80:	9307      	str	r3, [sp, #28]
 8009c82:	e088      	b.n	8009d96 <_strtod_l+0x662>
 8009c84:	2201      	movs	r2, #1
 8009c86:	4214      	tst	r4, r2
 8009c88:	d004      	beq.n	8009c94 <_strtod_l+0x560>
 8009c8a:	682a      	ldr	r2, [r5, #0]
 8009c8c:	686b      	ldr	r3, [r5, #4]
 8009c8e:	f7f7 fced 	bl	800166c <__aeabi_dmul>
 8009c92:	2301      	movs	r3, #1
 8009c94:	9a07      	ldr	r2, [sp, #28]
 8009c96:	1064      	asrs	r4, r4, #1
 8009c98:	3201      	adds	r2, #1
 8009c9a:	9207      	str	r2, [sp, #28]
 8009c9c:	3508      	adds	r5, #8
 8009c9e:	e7d0      	b.n	8009c42 <_strtod_l+0x50e>
 8009ca0:	23d4      	movs	r3, #212	; 0xd4
 8009ca2:	049b      	lsls	r3, r3, #18
 8009ca4:	18cf      	adds	r7, r1, r3
 8009ca6:	e7ea      	b.n	8009c7e <_strtod_l+0x54a>
 8009ca8:	2c00      	cmp	r4, #0
 8009caa:	d0e8      	beq.n	8009c7e <_strtod_l+0x54a>
 8009cac:	4264      	negs	r4, r4
 8009cae:	230f      	movs	r3, #15
 8009cb0:	0022      	movs	r2, r4
 8009cb2:	401a      	ands	r2, r3
 8009cb4:	421c      	tst	r4, r3
 8009cb6:	d00a      	beq.n	8009cce <_strtod_l+0x59a>
 8009cb8:	4b15      	ldr	r3, [pc, #84]	; (8009d10 <_strtod_l+0x5dc>)
 8009cba:	00d2      	lsls	r2, r2, #3
 8009cbc:	189b      	adds	r3, r3, r2
 8009cbe:	0030      	movs	r0, r6
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	0039      	movs	r1, r7
 8009cc6:	f7f7 f8d7 	bl	8000e78 <__aeabi_ddiv>
 8009cca:	0006      	movs	r6, r0
 8009ccc:	000f      	movs	r7, r1
 8009cce:	1124      	asrs	r4, r4, #4
 8009cd0:	d0d5      	beq.n	8009c7e <_strtod_l+0x54a>
 8009cd2:	2c1f      	cmp	r4, #31
 8009cd4:	dd28      	ble.n	8009d28 <_strtod_l+0x5f4>
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	9305      	str	r3, [sp, #20]
 8009cda:	9306      	str	r3, [sp, #24]
 8009cdc:	930d      	str	r3, [sp, #52]	; 0x34
 8009cde:	9308      	str	r3, [sp, #32]
 8009ce0:	2322      	movs	r3, #34	; 0x22
 8009ce2:	9a04      	ldr	r2, [sp, #16]
 8009ce4:	2600      	movs	r6, #0
 8009ce6:	6013      	str	r3, [r2, #0]
 8009ce8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cea:	2700      	movs	r7, #0
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d18d      	bne.n	8009c0c <_strtod_l+0x4d8>
 8009cf0:	e55b      	b.n	80097aa <_strtod_l+0x76>
 8009cf2:	46c0      	nop			; (mov r8, r8)
 8009cf4:	00004e1f 	.word	0x00004e1f
 8009cf8:	08012e69 	.word	0x08012e69
 8009cfc:	08012b48 	.word	0x08012b48
 8009d00:	7ff00000 	.word	0x7ff00000
 8009d04:	08012e61 	.word	0x08012e61
 8009d08:	08012f17 	.word	0x08012f17
 8009d0c:	08012f13 	.word	0x08012f13
 8009d10:	08012d88 	.word	0x08012d88
 8009d14:	08012d60 	.word	0x08012d60
 8009d18:	fcb00000 	.word	0xfcb00000
 8009d1c:	7ca00000 	.word	0x7ca00000
 8009d20:	7c900000 	.word	0x7c900000
 8009d24:	7fefffff 	.word	0x7fefffff
 8009d28:	2310      	movs	r3, #16
 8009d2a:	0022      	movs	r2, r4
 8009d2c:	401a      	ands	r2, r3
 8009d2e:	9207      	str	r2, [sp, #28]
 8009d30:	421c      	tst	r4, r3
 8009d32:	d001      	beq.n	8009d38 <_strtod_l+0x604>
 8009d34:	335a      	adds	r3, #90	; 0x5a
 8009d36:	9307      	str	r3, [sp, #28]
 8009d38:	0030      	movs	r0, r6
 8009d3a:	0039      	movs	r1, r7
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	4dc4      	ldr	r5, [pc, #784]	; (800a050 <_strtod_l+0x91c>)
 8009d40:	2201      	movs	r2, #1
 8009d42:	4214      	tst	r4, r2
 8009d44:	d004      	beq.n	8009d50 <_strtod_l+0x61c>
 8009d46:	682a      	ldr	r2, [r5, #0]
 8009d48:	686b      	ldr	r3, [r5, #4]
 8009d4a:	f7f7 fc8f 	bl	800166c <__aeabi_dmul>
 8009d4e:	2301      	movs	r3, #1
 8009d50:	1064      	asrs	r4, r4, #1
 8009d52:	3508      	adds	r5, #8
 8009d54:	2c00      	cmp	r4, #0
 8009d56:	d1f3      	bne.n	8009d40 <_strtod_l+0x60c>
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d001      	beq.n	8009d60 <_strtod_l+0x62c>
 8009d5c:	0006      	movs	r6, r0
 8009d5e:	000f      	movs	r7, r1
 8009d60:	9b07      	ldr	r3, [sp, #28]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d00f      	beq.n	8009d86 <_strtod_l+0x652>
 8009d66:	236b      	movs	r3, #107	; 0x6b
 8009d68:	007a      	lsls	r2, r7, #1
 8009d6a:	0d52      	lsrs	r2, r2, #21
 8009d6c:	0039      	movs	r1, r7
 8009d6e:	1a9b      	subs	r3, r3, r2
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	dd08      	ble.n	8009d86 <_strtod_l+0x652>
 8009d74:	2b1f      	cmp	r3, #31
 8009d76:	dc00      	bgt.n	8009d7a <_strtod_l+0x646>
 8009d78:	e121      	b.n	8009fbe <_strtod_l+0x88a>
 8009d7a:	2600      	movs	r6, #0
 8009d7c:	2b34      	cmp	r3, #52	; 0x34
 8009d7e:	dc00      	bgt.n	8009d82 <_strtod_l+0x64e>
 8009d80:	e116      	b.n	8009fb0 <_strtod_l+0x87c>
 8009d82:	27dc      	movs	r7, #220	; 0xdc
 8009d84:	04bf      	lsls	r7, r7, #18
 8009d86:	2200      	movs	r2, #0
 8009d88:	2300      	movs	r3, #0
 8009d8a:	0030      	movs	r0, r6
 8009d8c:	0039      	movs	r1, r7
 8009d8e:	f7f6 fb5b 	bl	8000448 <__aeabi_dcmpeq>
 8009d92:	2800      	cmp	r0, #0
 8009d94:	d19f      	bne.n	8009cd6 <_strtod_l+0x5a2>
 8009d96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d98:	9a08      	ldr	r2, [sp, #32]
 8009d9a:	9300      	str	r3, [sp, #0]
 8009d9c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009d9e:	9b05      	ldr	r3, [sp, #20]
 8009da0:	9804      	ldr	r0, [sp, #16]
 8009da2:	f001 fb01 	bl	800b3a8 <__s2b>
 8009da6:	900d      	str	r0, [sp, #52]	; 0x34
 8009da8:	2800      	cmp	r0, #0
 8009daa:	d100      	bne.n	8009dae <_strtod_l+0x67a>
 8009dac:	e720      	b.n	8009bf0 <_strtod_l+0x4bc>
 8009dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009db0:	9906      	ldr	r1, [sp, #24]
 8009db2:	17da      	asrs	r2, r3, #31
 8009db4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009db6:	1a5b      	subs	r3, r3, r1
 8009db8:	401a      	ands	r2, r3
 8009dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dbc:	9215      	str	r2, [sp, #84]	; 0x54
 8009dbe:	43db      	mvns	r3, r3
 8009dc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009dc2:	17db      	asrs	r3, r3, #31
 8009dc4:	401a      	ands	r2, r3
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	9218      	str	r2, [sp, #96]	; 0x60
 8009dca:	9305      	str	r3, [sp, #20]
 8009dcc:	9306      	str	r3, [sp, #24]
 8009dce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dd0:	9804      	ldr	r0, [sp, #16]
 8009dd2:	6859      	ldr	r1, [r3, #4]
 8009dd4:	f001 fa72 	bl	800b2bc <_Balloc>
 8009dd8:	9008      	str	r0, [sp, #32]
 8009dda:	2800      	cmp	r0, #0
 8009ddc:	d100      	bne.n	8009de0 <_strtod_l+0x6ac>
 8009dde:	e70c      	b.n	8009bfa <_strtod_l+0x4c6>
 8009de0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009de2:	300c      	adds	r0, #12
 8009de4:	0019      	movs	r1, r3
 8009de6:	691a      	ldr	r2, [r3, #16]
 8009de8:	310c      	adds	r1, #12
 8009dea:	3202      	adds	r2, #2
 8009dec:	0092      	lsls	r2, r2, #2
 8009dee:	f000 fdca 	bl	800a986 <memcpy>
 8009df2:	ab1e      	add	r3, sp, #120	; 0x78
 8009df4:	9301      	str	r3, [sp, #4]
 8009df6:	ab1d      	add	r3, sp, #116	; 0x74
 8009df8:	9300      	str	r3, [sp, #0]
 8009dfa:	0032      	movs	r2, r6
 8009dfc:	003b      	movs	r3, r7
 8009dfe:	9804      	ldr	r0, [sp, #16]
 8009e00:	9610      	str	r6, [sp, #64]	; 0x40
 8009e02:	9711      	str	r7, [sp, #68]	; 0x44
 8009e04:	f001 fdf8 	bl	800b9f8 <__d2b>
 8009e08:	901c      	str	r0, [sp, #112]	; 0x70
 8009e0a:	2800      	cmp	r0, #0
 8009e0c:	d100      	bne.n	8009e10 <_strtod_l+0x6dc>
 8009e0e:	e6f4      	b.n	8009bfa <_strtod_l+0x4c6>
 8009e10:	2101      	movs	r1, #1
 8009e12:	9804      	ldr	r0, [sp, #16]
 8009e14:	f001 fb5c 	bl	800b4d0 <__i2b>
 8009e18:	9006      	str	r0, [sp, #24]
 8009e1a:	2800      	cmp	r0, #0
 8009e1c:	d100      	bne.n	8009e20 <_strtod_l+0x6ec>
 8009e1e:	e6ec      	b.n	8009bfa <_strtod_l+0x4c6>
 8009e20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e22:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009e24:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009e26:	1ad4      	subs	r4, r2, r3
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	db01      	blt.n	8009e30 <_strtod_l+0x6fc>
 8009e2c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8009e2e:	195d      	adds	r5, r3, r5
 8009e30:	9907      	ldr	r1, [sp, #28]
 8009e32:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009e34:	1a5b      	subs	r3, r3, r1
 8009e36:	2136      	movs	r1, #54	; 0x36
 8009e38:	189b      	adds	r3, r3, r2
 8009e3a:	1a8a      	subs	r2, r1, r2
 8009e3c:	4985      	ldr	r1, [pc, #532]	; (800a054 <_strtod_l+0x920>)
 8009e3e:	2001      	movs	r0, #1
 8009e40:	468c      	mov	ip, r1
 8009e42:	2100      	movs	r1, #0
 8009e44:	3b01      	subs	r3, #1
 8009e46:	9114      	str	r1, [sp, #80]	; 0x50
 8009e48:	9012      	str	r0, [sp, #72]	; 0x48
 8009e4a:	4563      	cmp	r3, ip
 8009e4c:	da07      	bge.n	8009e5e <_strtod_l+0x72a>
 8009e4e:	4661      	mov	r1, ip
 8009e50:	1ac9      	subs	r1, r1, r3
 8009e52:	1a52      	subs	r2, r2, r1
 8009e54:	291f      	cmp	r1, #31
 8009e56:	dd00      	ble.n	8009e5a <_strtod_l+0x726>
 8009e58:	e0b6      	b.n	8009fc8 <_strtod_l+0x894>
 8009e5a:	4088      	lsls	r0, r1
 8009e5c:	9012      	str	r0, [sp, #72]	; 0x48
 8009e5e:	18ab      	adds	r3, r5, r2
 8009e60:	930c      	str	r3, [sp, #48]	; 0x30
 8009e62:	18a4      	adds	r4, r4, r2
 8009e64:	9b07      	ldr	r3, [sp, #28]
 8009e66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e68:	191c      	adds	r4, r3, r4
 8009e6a:	002b      	movs	r3, r5
 8009e6c:	4295      	cmp	r5, r2
 8009e6e:	dd00      	ble.n	8009e72 <_strtod_l+0x73e>
 8009e70:	0013      	movs	r3, r2
 8009e72:	42a3      	cmp	r3, r4
 8009e74:	dd00      	ble.n	8009e78 <_strtod_l+0x744>
 8009e76:	0023      	movs	r3, r4
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	dd04      	ble.n	8009e86 <_strtod_l+0x752>
 8009e7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e7e:	1ae4      	subs	r4, r4, r3
 8009e80:	1ad2      	subs	r2, r2, r3
 8009e82:	920c      	str	r2, [sp, #48]	; 0x30
 8009e84:	1aed      	subs	r5, r5, r3
 8009e86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	dd17      	ble.n	8009ebc <_strtod_l+0x788>
 8009e8c:	001a      	movs	r2, r3
 8009e8e:	9906      	ldr	r1, [sp, #24]
 8009e90:	9804      	ldr	r0, [sp, #16]
 8009e92:	f001 fbe5 	bl	800b660 <__pow5mult>
 8009e96:	9006      	str	r0, [sp, #24]
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	d100      	bne.n	8009e9e <_strtod_l+0x76a>
 8009e9c:	e6ad      	b.n	8009bfa <_strtod_l+0x4c6>
 8009e9e:	0001      	movs	r1, r0
 8009ea0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009ea2:	9804      	ldr	r0, [sp, #16]
 8009ea4:	f001 fb2c 	bl	800b500 <__multiply>
 8009ea8:	900e      	str	r0, [sp, #56]	; 0x38
 8009eaa:	2800      	cmp	r0, #0
 8009eac:	d100      	bne.n	8009eb0 <_strtod_l+0x77c>
 8009eae:	e6a4      	b.n	8009bfa <_strtod_l+0x4c6>
 8009eb0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009eb2:	9804      	ldr	r0, [sp, #16]
 8009eb4:	f001 fa2a 	bl	800b30c <_Bfree>
 8009eb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009eba:	931c      	str	r3, [sp, #112]	; 0x70
 8009ebc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	dd00      	ble.n	8009ec4 <_strtod_l+0x790>
 8009ec2:	e087      	b.n	8009fd4 <_strtod_l+0x8a0>
 8009ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	dd08      	ble.n	8009edc <_strtod_l+0x7a8>
 8009eca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009ecc:	9908      	ldr	r1, [sp, #32]
 8009ece:	9804      	ldr	r0, [sp, #16]
 8009ed0:	f001 fbc6 	bl	800b660 <__pow5mult>
 8009ed4:	9008      	str	r0, [sp, #32]
 8009ed6:	2800      	cmp	r0, #0
 8009ed8:	d100      	bne.n	8009edc <_strtod_l+0x7a8>
 8009eda:	e68e      	b.n	8009bfa <_strtod_l+0x4c6>
 8009edc:	2c00      	cmp	r4, #0
 8009ede:	dd08      	ble.n	8009ef2 <_strtod_l+0x7be>
 8009ee0:	0022      	movs	r2, r4
 8009ee2:	9908      	ldr	r1, [sp, #32]
 8009ee4:	9804      	ldr	r0, [sp, #16]
 8009ee6:	f001 fbfd 	bl	800b6e4 <__lshift>
 8009eea:	9008      	str	r0, [sp, #32]
 8009eec:	2800      	cmp	r0, #0
 8009eee:	d100      	bne.n	8009ef2 <_strtod_l+0x7be>
 8009ef0:	e683      	b.n	8009bfa <_strtod_l+0x4c6>
 8009ef2:	2d00      	cmp	r5, #0
 8009ef4:	dd08      	ble.n	8009f08 <_strtod_l+0x7d4>
 8009ef6:	002a      	movs	r2, r5
 8009ef8:	9906      	ldr	r1, [sp, #24]
 8009efa:	9804      	ldr	r0, [sp, #16]
 8009efc:	f001 fbf2 	bl	800b6e4 <__lshift>
 8009f00:	9006      	str	r0, [sp, #24]
 8009f02:	2800      	cmp	r0, #0
 8009f04:	d100      	bne.n	8009f08 <_strtod_l+0x7d4>
 8009f06:	e678      	b.n	8009bfa <_strtod_l+0x4c6>
 8009f08:	9a08      	ldr	r2, [sp, #32]
 8009f0a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009f0c:	9804      	ldr	r0, [sp, #16]
 8009f0e:	f001 fc73 	bl	800b7f8 <__mdiff>
 8009f12:	9005      	str	r0, [sp, #20]
 8009f14:	2800      	cmp	r0, #0
 8009f16:	d100      	bne.n	8009f1a <_strtod_l+0x7e6>
 8009f18:	e66f      	b.n	8009bfa <_strtod_l+0x4c6>
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	68c3      	ldr	r3, [r0, #12]
 8009f1e:	9906      	ldr	r1, [sp, #24]
 8009f20:	60c2      	str	r2, [r0, #12]
 8009f22:	930c      	str	r3, [sp, #48]	; 0x30
 8009f24:	f001 fc4c 	bl	800b7c0 <__mcmp>
 8009f28:	2800      	cmp	r0, #0
 8009f2a:	da5d      	bge.n	8009fe8 <_strtod_l+0x8b4>
 8009f2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f2e:	4333      	orrs	r3, r6
 8009f30:	d000      	beq.n	8009f34 <_strtod_l+0x800>
 8009f32:	e088      	b.n	800a046 <_strtod_l+0x912>
 8009f34:	033b      	lsls	r3, r7, #12
 8009f36:	d000      	beq.n	8009f3a <_strtod_l+0x806>
 8009f38:	e085      	b.n	800a046 <_strtod_l+0x912>
 8009f3a:	22d6      	movs	r2, #214	; 0xd6
 8009f3c:	4b46      	ldr	r3, [pc, #280]	; (800a058 <_strtod_l+0x924>)
 8009f3e:	04d2      	lsls	r2, r2, #19
 8009f40:	403b      	ands	r3, r7
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d97f      	bls.n	800a046 <_strtod_l+0x912>
 8009f46:	9b05      	ldr	r3, [sp, #20]
 8009f48:	695b      	ldr	r3, [r3, #20]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d103      	bne.n	8009f56 <_strtod_l+0x822>
 8009f4e:	9b05      	ldr	r3, [sp, #20]
 8009f50:	691b      	ldr	r3, [r3, #16]
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	dd77      	ble.n	800a046 <_strtod_l+0x912>
 8009f56:	9905      	ldr	r1, [sp, #20]
 8009f58:	2201      	movs	r2, #1
 8009f5a:	9804      	ldr	r0, [sp, #16]
 8009f5c:	f001 fbc2 	bl	800b6e4 <__lshift>
 8009f60:	9906      	ldr	r1, [sp, #24]
 8009f62:	9005      	str	r0, [sp, #20]
 8009f64:	f001 fc2c 	bl	800b7c0 <__mcmp>
 8009f68:	2800      	cmp	r0, #0
 8009f6a:	dd6c      	ble.n	800a046 <_strtod_l+0x912>
 8009f6c:	9907      	ldr	r1, [sp, #28]
 8009f6e:	003b      	movs	r3, r7
 8009f70:	4a39      	ldr	r2, [pc, #228]	; (800a058 <_strtod_l+0x924>)
 8009f72:	2900      	cmp	r1, #0
 8009f74:	d100      	bne.n	8009f78 <_strtod_l+0x844>
 8009f76:	e094      	b.n	800a0a2 <_strtod_l+0x96e>
 8009f78:	0011      	movs	r1, r2
 8009f7a:	20d6      	movs	r0, #214	; 0xd6
 8009f7c:	4039      	ands	r1, r7
 8009f7e:	04c0      	lsls	r0, r0, #19
 8009f80:	4281      	cmp	r1, r0
 8009f82:	dd00      	ble.n	8009f86 <_strtod_l+0x852>
 8009f84:	e08d      	b.n	800a0a2 <_strtod_l+0x96e>
 8009f86:	23dc      	movs	r3, #220	; 0xdc
 8009f88:	049b      	lsls	r3, r3, #18
 8009f8a:	4299      	cmp	r1, r3
 8009f8c:	dc00      	bgt.n	8009f90 <_strtod_l+0x85c>
 8009f8e:	e6a7      	b.n	8009ce0 <_strtod_l+0x5ac>
 8009f90:	0030      	movs	r0, r6
 8009f92:	0039      	movs	r1, r7
 8009f94:	4b31      	ldr	r3, [pc, #196]	; (800a05c <_strtod_l+0x928>)
 8009f96:	2200      	movs	r2, #0
 8009f98:	f7f7 fb68 	bl	800166c <__aeabi_dmul>
 8009f9c:	4b2e      	ldr	r3, [pc, #184]	; (800a058 <_strtod_l+0x924>)
 8009f9e:	0006      	movs	r6, r0
 8009fa0:	000f      	movs	r7, r1
 8009fa2:	420b      	tst	r3, r1
 8009fa4:	d000      	beq.n	8009fa8 <_strtod_l+0x874>
 8009fa6:	e631      	b.n	8009c0c <_strtod_l+0x4d8>
 8009fa8:	2322      	movs	r3, #34	; 0x22
 8009faa:	9a04      	ldr	r2, [sp, #16]
 8009fac:	6013      	str	r3, [r2, #0]
 8009fae:	e62d      	b.n	8009c0c <_strtod_l+0x4d8>
 8009fb0:	234b      	movs	r3, #75	; 0x4b
 8009fb2:	1a9a      	subs	r2, r3, r2
 8009fb4:	3b4c      	subs	r3, #76	; 0x4c
 8009fb6:	4093      	lsls	r3, r2
 8009fb8:	4019      	ands	r1, r3
 8009fba:	000f      	movs	r7, r1
 8009fbc:	e6e3      	b.n	8009d86 <_strtod_l+0x652>
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	4252      	negs	r2, r2
 8009fc2:	409a      	lsls	r2, r3
 8009fc4:	4016      	ands	r6, r2
 8009fc6:	e6de      	b.n	8009d86 <_strtod_l+0x652>
 8009fc8:	4925      	ldr	r1, [pc, #148]	; (800a060 <_strtod_l+0x92c>)
 8009fca:	1acb      	subs	r3, r1, r3
 8009fcc:	0001      	movs	r1, r0
 8009fce:	4099      	lsls	r1, r3
 8009fd0:	9114      	str	r1, [sp, #80]	; 0x50
 8009fd2:	e743      	b.n	8009e5c <_strtod_l+0x728>
 8009fd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fd6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009fd8:	9804      	ldr	r0, [sp, #16]
 8009fda:	f001 fb83 	bl	800b6e4 <__lshift>
 8009fde:	901c      	str	r0, [sp, #112]	; 0x70
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	d000      	beq.n	8009fe6 <_strtod_l+0x8b2>
 8009fe4:	e76e      	b.n	8009ec4 <_strtod_l+0x790>
 8009fe6:	e608      	b.n	8009bfa <_strtod_l+0x4c6>
 8009fe8:	970e      	str	r7, [sp, #56]	; 0x38
 8009fea:	2800      	cmp	r0, #0
 8009fec:	d177      	bne.n	800a0de <_strtod_l+0x9aa>
 8009fee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ff0:	033b      	lsls	r3, r7, #12
 8009ff2:	0b1b      	lsrs	r3, r3, #12
 8009ff4:	2a00      	cmp	r2, #0
 8009ff6:	d039      	beq.n	800a06c <_strtod_l+0x938>
 8009ff8:	4a1a      	ldr	r2, [pc, #104]	; (800a064 <_strtod_l+0x930>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d139      	bne.n	800a072 <_strtod_l+0x93e>
 8009ffe:	2101      	movs	r1, #1
 800a000:	9b07      	ldr	r3, [sp, #28]
 800a002:	4249      	negs	r1, r1
 800a004:	0032      	movs	r2, r6
 800a006:	0008      	movs	r0, r1
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d00b      	beq.n	800a024 <_strtod_l+0x8f0>
 800a00c:	24d4      	movs	r4, #212	; 0xd4
 800a00e:	4b12      	ldr	r3, [pc, #72]	; (800a058 <_strtod_l+0x924>)
 800a010:	0008      	movs	r0, r1
 800a012:	403b      	ands	r3, r7
 800a014:	04e4      	lsls	r4, r4, #19
 800a016:	42a3      	cmp	r3, r4
 800a018:	d804      	bhi.n	800a024 <_strtod_l+0x8f0>
 800a01a:	306c      	adds	r0, #108	; 0x6c
 800a01c:	0d1b      	lsrs	r3, r3, #20
 800a01e:	1ac3      	subs	r3, r0, r3
 800a020:	4099      	lsls	r1, r3
 800a022:	0008      	movs	r0, r1
 800a024:	4282      	cmp	r2, r0
 800a026:	d124      	bne.n	800a072 <_strtod_l+0x93e>
 800a028:	4b0f      	ldr	r3, [pc, #60]	; (800a068 <_strtod_l+0x934>)
 800a02a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a02c:	4299      	cmp	r1, r3
 800a02e:	d102      	bne.n	800a036 <_strtod_l+0x902>
 800a030:	3201      	adds	r2, #1
 800a032:	d100      	bne.n	800a036 <_strtod_l+0x902>
 800a034:	e5e1      	b.n	8009bfa <_strtod_l+0x4c6>
 800a036:	4b08      	ldr	r3, [pc, #32]	; (800a058 <_strtod_l+0x924>)
 800a038:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a03a:	2600      	movs	r6, #0
 800a03c:	401a      	ands	r2, r3
 800a03e:	0013      	movs	r3, r2
 800a040:	2280      	movs	r2, #128	; 0x80
 800a042:	0352      	lsls	r2, r2, #13
 800a044:	189f      	adds	r7, r3, r2
 800a046:	9b07      	ldr	r3, [sp, #28]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d1a1      	bne.n	8009f90 <_strtod_l+0x85c>
 800a04c:	e5de      	b.n	8009c0c <_strtod_l+0x4d8>
 800a04e:	46c0      	nop			; (mov r8, r8)
 800a050:	08012b60 	.word	0x08012b60
 800a054:	fffffc02 	.word	0xfffffc02
 800a058:	7ff00000 	.word	0x7ff00000
 800a05c:	39500000 	.word	0x39500000
 800a060:	fffffbe2 	.word	0xfffffbe2
 800a064:	000fffff 	.word	0x000fffff
 800a068:	7fefffff 	.word	0x7fefffff
 800a06c:	4333      	orrs	r3, r6
 800a06e:	d100      	bne.n	800a072 <_strtod_l+0x93e>
 800a070:	e77c      	b.n	8009f6c <_strtod_l+0x838>
 800a072:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a074:	2b00      	cmp	r3, #0
 800a076:	d01d      	beq.n	800a0b4 <_strtod_l+0x980>
 800a078:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a07a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a07c:	4213      	tst	r3, r2
 800a07e:	d0e2      	beq.n	800a046 <_strtod_l+0x912>
 800a080:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a082:	0030      	movs	r0, r6
 800a084:	0039      	movs	r1, r7
 800a086:	9a07      	ldr	r2, [sp, #28]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d017      	beq.n	800a0bc <_strtod_l+0x988>
 800a08c:	f7ff fb3a 	bl	8009704 <sulp>
 800a090:	0002      	movs	r2, r0
 800a092:	000b      	movs	r3, r1
 800a094:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a096:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a098:	f7f6 fb8e 	bl	80007b8 <__aeabi_dadd>
 800a09c:	0006      	movs	r6, r0
 800a09e:	000f      	movs	r7, r1
 800a0a0:	e7d1      	b.n	800a046 <_strtod_l+0x912>
 800a0a2:	2601      	movs	r6, #1
 800a0a4:	4013      	ands	r3, r2
 800a0a6:	4a98      	ldr	r2, [pc, #608]	; (800a308 <_strtod_l+0xbd4>)
 800a0a8:	4276      	negs	r6, r6
 800a0aa:	189b      	adds	r3, r3, r2
 800a0ac:	4a97      	ldr	r2, [pc, #604]	; (800a30c <_strtod_l+0xbd8>)
 800a0ae:	431a      	orrs	r2, r3
 800a0b0:	0017      	movs	r7, r2
 800a0b2:	e7c8      	b.n	800a046 <_strtod_l+0x912>
 800a0b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a0b6:	4233      	tst	r3, r6
 800a0b8:	d0c5      	beq.n	800a046 <_strtod_l+0x912>
 800a0ba:	e7e1      	b.n	800a080 <_strtod_l+0x94c>
 800a0bc:	f7ff fb22 	bl	8009704 <sulp>
 800a0c0:	0002      	movs	r2, r0
 800a0c2:	000b      	movs	r3, r1
 800a0c4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a0c6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a0c8:	f7f7 fd92 	bl	8001bf0 <__aeabi_dsub>
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	0006      	movs	r6, r0
 800a0d2:	000f      	movs	r7, r1
 800a0d4:	f7f6 f9b8 	bl	8000448 <__aeabi_dcmpeq>
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	d0b4      	beq.n	800a046 <_strtod_l+0x912>
 800a0dc:	e600      	b.n	8009ce0 <_strtod_l+0x5ac>
 800a0de:	9906      	ldr	r1, [sp, #24]
 800a0e0:	9805      	ldr	r0, [sp, #20]
 800a0e2:	f001 fce9 	bl	800bab8 <__ratio>
 800a0e6:	2380      	movs	r3, #128	; 0x80
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	05db      	lsls	r3, r3, #23
 800a0ec:	0004      	movs	r4, r0
 800a0ee:	000d      	movs	r5, r1
 800a0f0:	f7f6 f9ba 	bl	8000468 <__aeabi_dcmple>
 800a0f4:	2800      	cmp	r0, #0
 800a0f6:	d06d      	beq.n	800a1d4 <_strtod_l+0xaa0>
 800a0f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d000      	beq.n	800a100 <_strtod_l+0x9cc>
 800a0fe:	e07e      	b.n	800a1fe <_strtod_l+0xaca>
 800a100:	2e00      	cmp	r6, #0
 800a102:	d158      	bne.n	800a1b6 <_strtod_l+0xa82>
 800a104:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a106:	031b      	lsls	r3, r3, #12
 800a108:	d000      	beq.n	800a10c <_strtod_l+0x9d8>
 800a10a:	e07f      	b.n	800a20c <_strtod_l+0xad8>
 800a10c:	2200      	movs	r2, #0
 800a10e:	0020      	movs	r0, r4
 800a110:	0029      	movs	r1, r5
 800a112:	4b7f      	ldr	r3, [pc, #508]	; (800a310 <_strtod_l+0xbdc>)
 800a114:	f7f6 f99e 	bl	8000454 <__aeabi_dcmplt>
 800a118:	2800      	cmp	r0, #0
 800a11a:	d158      	bne.n	800a1ce <_strtod_l+0xa9a>
 800a11c:	0020      	movs	r0, r4
 800a11e:	0029      	movs	r1, r5
 800a120:	2200      	movs	r2, #0
 800a122:	4b7c      	ldr	r3, [pc, #496]	; (800a314 <_strtod_l+0xbe0>)
 800a124:	f7f7 faa2 	bl	800166c <__aeabi_dmul>
 800a128:	0004      	movs	r4, r0
 800a12a:	000d      	movs	r5, r1
 800a12c:	2380      	movs	r3, #128	; 0x80
 800a12e:	061b      	lsls	r3, r3, #24
 800a130:	940a      	str	r4, [sp, #40]	; 0x28
 800a132:	18eb      	adds	r3, r5, r3
 800a134:	930b      	str	r3, [sp, #44]	; 0x2c
 800a136:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a13a:	9212      	str	r2, [sp, #72]	; 0x48
 800a13c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a13e:	4a76      	ldr	r2, [pc, #472]	; (800a318 <_strtod_l+0xbe4>)
 800a140:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a142:	4013      	ands	r3, r2
 800a144:	9314      	str	r3, [sp, #80]	; 0x50
 800a146:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a148:	4b74      	ldr	r3, [pc, #464]	; (800a31c <_strtod_l+0xbe8>)
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d000      	beq.n	800a150 <_strtod_l+0xa1c>
 800a14e:	e091      	b.n	800a274 <_strtod_l+0xb40>
 800a150:	4a73      	ldr	r2, [pc, #460]	; (800a320 <_strtod_l+0xbec>)
 800a152:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a154:	4694      	mov	ip, r2
 800a156:	4463      	add	r3, ip
 800a158:	001f      	movs	r7, r3
 800a15a:	0030      	movs	r0, r6
 800a15c:	0019      	movs	r1, r3
 800a15e:	f001 fbe3 	bl	800b928 <__ulp>
 800a162:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a164:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a166:	f7f7 fa81 	bl	800166c <__aeabi_dmul>
 800a16a:	0032      	movs	r2, r6
 800a16c:	003b      	movs	r3, r7
 800a16e:	f7f6 fb23 	bl	80007b8 <__aeabi_dadd>
 800a172:	4a69      	ldr	r2, [pc, #420]	; (800a318 <_strtod_l+0xbe4>)
 800a174:	4b6b      	ldr	r3, [pc, #428]	; (800a324 <_strtod_l+0xbf0>)
 800a176:	0006      	movs	r6, r0
 800a178:	400a      	ands	r2, r1
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d949      	bls.n	800a212 <_strtod_l+0xade>
 800a17e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a180:	4b69      	ldr	r3, [pc, #420]	; (800a328 <_strtod_l+0xbf4>)
 800a182:	429a      	cmp	r2, r3
 800a184:	d103      	bne.n	800a18e <_strtod_l+0xa5a>
 800a186:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a188:	3301      	adds	r3, #1
 800a18a:	d100      	bne.n	800a18e <_strtod_l+0xa5a>
 800a18c:	e535      	b.n	8009bfa <_strtod_l+0x4c6>
 800a18e:	2601      	movs	r6, #1
 800a190:	4f65      	ldr	r7, [pc, #404]	; (800a328 <_strtod_l+0xbf4>)
 800a192:	4276      	negs	r6, r6
 800a194:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a196:	9804      	ldr	r0, [sp, #16]
 800a198:	f001 f8b8 	bl	800b30c <_Bfree>
 800a19c:	9908      	ldr	r1, [sp, #32]
 800a19e:	9804      	ldr	r0, [sp, #16]
 800a1a0:	f001 f8b4 	bl	800b30c <_Bfree>
 800a1a4:	9906      	ldr	r1, [sp, #24]
 800a1a6:	9804      	ldr	r0, [sp, #16]
 800a1a8:	f001 f8b0 	bl	800b30c <_Bfree>
 800a1ac:	9905      	ldr	r1, [sp, #20]
 800a1ae:	9804      	ldr	r0, [sp, #16]
 800a1b0:	f001 f8ac 	bl	800b30c <_Bfree>
 800a1b4:	e60b      	b.n	8009dce <_strtod_l+0x69a>
 800a1b6:	2e01      	cmp	r6, #1
 800a1b8:	d103      	bne.n	800a1c2 <_strtod_l+0xa8e>
 800a1ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d100      	bne.n	800a1c2 <_strtod_l+0xa8e>
 800a1c0:	e58e      	b.n	8009ce0 <_strtod_l+0x5ac>
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	4c59      	ldr	r4, [pc, #356]	; (800a32c <_strtod_l+0xbf8>)
 800a1c6:	930a      	str	r3, [sp, #40]	; 0x28
 800a1c8:	940b      	str	r4, [sp, #44]	; 0x2c
 800a1ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a1cc:	e01c      	b.n	800a208 <_strtod_l+0xad4>
 800a1ce:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a1d0:	4d50      	ldr	r5, [pc, #320]	; (800a314 <_strtod_l+0xbe0>)
 800a1d2:	e7ab      	b.n	800a12c <_strtod_l+0x9f8>
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	0020      	movs	r0, r4
 800a1d8:	0029      	movs	r1, r5
 800a1da:	4b4e      	ldr	r3, [pc, #312]	; (800a314 <_strtod_l+0xbe0>)
 800a1dc:	f7f7 fa46 	bl	800166c <__aeabi_dmul>
 800a1e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a1e2:	0004      	movs	r4, r0
 800a1e4:	000b      	movs	r3, r1
 800a1e6:	000d      	movs	r5, r1
 800a1e8:	2a00      	cmp	r2, #0
 800a1ea:	d104      	bne.n	800a1f6 <_strtod_l+0xac2>
 800a1ec:	2280      	movs	r2, #128	; 0x80
 800a1ee:	0612      	lsls	r2, r2, #24
 800a1f0:	900a      	str	r0, [sp, #40]	; 0x28
 800a1f2:	188b      	adds	r3, r1, r2
 800a1f4:	e79e      	b.n	800a134 <_strtod_l+0xa00>
 800a1f6:	0002      	movs	r2, r0
 800a1f8:	920a      	str	r2, [sp, #40]	; 0x28
 800a1fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1fc:	e79b      	b.n	800a136 <_strtod_l+0xa02>
 800a1fe:	2300      	movs	r3, #0
 800a200:	4c43      	ldr	r4, [pc, #268]	; (800a310 <_strtod_l+0xbdc>)
 800a202:	930a      	str	r3, [sp, #40]	; 0x28
 800a204:	940b      	str	r4, [sp, #44]	; 0x2c
 800a206:	2400      	movs	r4, #0
 800a208:	4d41      	ldr	r5, [pc, #260]	; (800a310 <_strtod_l+0xbdc>)
 800a20a:	e794      	b.n	800a136 <_strtod_l+0xa02>
 800a20c:	2300      	movs	r3, #0
 800a20e:	4c47      	ldr	r4, [pc, #284]	; (800a32c <_strtod_l+0xbf8>)
 800a210:	e7f7      	b.n	800a202 <_strtod_l+0xace>
 800a212:	23d4      	movs	r3, #212	; 0xd4
 800a214:	049b      	lsls	r3, r3, #18
 800a216:	18cf      	adds	r7, r1, r3
 800a218:	9b07      	ldr	r3, [sp, #28]
 800a21a:	970e      	str	r7, [sp, #56]	; 0x38
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d1b9      	bne.n	800a194 <_strtod_l+0xa60>
 800a220:	4b3d      	ldr	r3, [pc, #244]	; (800a318 <_strtod_l+0xbe4>)
 800a222:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a224:	403b      	ands	r3, r7
 800a226:	429a      	cmp	r2, r3
 800a228:	d1b4      	bne.n	800a194 <_strtod_l+0xa60>
 800a22a:	0020      	movs	r0, r4
 800a22c:	0029      	movs	r1, r5
 800a22e:	f7f6 f9a5 	bl	800057c <__aeabi_d2lz>
 800a232:	f7f6 f9df 	bl	80005f4 <__aeabi_l2d>
 800a236:	0002      	movs	r2, r0
 800a238:	000b      	movs	r3, r1
 800a23a:	0020      	movs	r0, r4
 800a23c:	0029      	movs	r1, r5
 800a23e:	f7f7 fcd7 	bl	8001bf0 <__aeabi_dsub>
 800a242:	033b      	lsls	r3, r7, #12
 800a244:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a246:	0b1b      	lsrs	r3, r3, #12
 800a248:	4333      	orrs	r3, r6
 800a24a:	4313      	orrs	r3, r2
 800a24c:	0004      	movs	r4, r0
 800a24e:	000d      	movs	r5, r1
 800a250:	4a37      	ldr	r2, [pc, #220]	; (800a330 <_strtod_l+0xbfc>)
 800a252:	2b00      	cmp	r3, #0
 800a254:	d054      	beq.n	800a300 <_strtod_l+0xbcc>
 800a256:	4b37      	ldr	r3, [pc, #220]	; (800a334 <_strtod_l+0xc00>)
 800a258:	f7f6 f8fc 	bl	8000454 <__aeabi_dcmplt>
 800a25c:	2800      	cmp	r0, #0
 800a25e:	d000      	beq.n	800a262 <_strtod_l+0xb2e>
 800a260:	e4d4      	b.n	8009c0c <_strtod_l+0x4d8>
 800a262:	0020      	movs	r0, r4
 800a264:	0029      	movs	r1, r5
 800a266:	4a34      	ldr	r2, [pc, #208]	; (800a338 <_strtod_l+0xc04>)
 800a268:	4b2a      	ldr	r3, [pc, #168]	; (800a314 <_strtod_l+0xbe0>)
 800a26a:	f7f6 f907 	bl	800047c <__aeabi_dcmpgt>
 800a26e:	2800      	cmp	r0, #0
 800a270:	d090      	beq.n	800a194 <_strtod_l+0xa60>
 800a272:	e4cb      	b.n	8009c0c <_strtod_l+0x4d8>
 800a274:	9b07      	ldr	r3, [sp, #28]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d02b      	beq.n	800a2d2 <_strtod_l+0xb9e>
 800a27a:	23d4      	movs	r3, #212	; 0xd4
 800a27c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a27e:	04db      	lsls	r3, r3, #19
 800a280:	429a      	cmp	r2, r3
 800a282:	d826      	bhi.n	800a2d2 <_strtod_l+0xb9e>
 800a284:	0020      	movs	r0, r4
 800a286:	0029      	movs	r1, r5
 800a288:	4a2c      	ldr	r2, [pc, #176]	; (800a33c <_strtod_l+0xc08>)
 800a28a:	4b2d      	ldr	r3, [pc, #180]	; (800a340 <_strtod_l+0xc0c>)
 800a28c:	f7f6 f8ec 	bl	8000468 <__aeabi_dcmple>
 800a290:	2800      	cmp	r0, #0
 800a292:	d017      	beq.n	800a2c4 <_strtod_l+0xb90>
 800a294:	0020      	movs	r0, r4
 800a296:	0029      	movs	r1, r5
 800a298:	f7f6 f952 	bl	8000540 <__aeabi_d2uiz>
 800a29c:	2800      	cmp	r0, #0
 800a29e:	d100      	bne.n	800a2a2 <_strtod_l+0xb6e>
 800a2a0:	3001      	adds	r0, #1
 800a2a2:	f7f8 f8ab 	bl	80023fc <__aeabi_ui2d>
 800a2a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2a8:	0004      	movs	r4, r0
 800a2aa:	000b      	movs	r3, r1
 800a2ac:	000d      	movs	r5, r1
 800a2ae:	2a00      	cmp	r2, #0
 800a2b0:	d122      	bne.n	800a2f8 <_strtod_l+0xbc4>
 800a2b2:	2280      	movs	r2, #128	; 0x80
 800a2b4:	0612      	lsls	r2, r2, #24
 800a2b6:	188b      	adds	r3, r1, r2
 800a2b8:	9016      	str	r0, [sp, #88]	; 0x58
 800a2ba:	9317      	str	r3, [sp, #92]	; 0x5c
 800a2bc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a2be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a2c0:	9212      	str	r2, [sp, #72]	; 0x48
 800a2c2:	9313      	str	r3, [sp, #76]	; 0x4c
 800a2c4:	22d6      	movs	r2, #214	; 0xd6
 800a2c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a2c8:	04d2      	lsls	r2, r2, #19
 800a2ca:	189b      	adds	r3, r3, r2
 800a2cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a2ce:	1a9b      	subs	r3, r3, r2
 800a2d0:	9313      	str	r3, [sp, #76]	; 0x4c
 800a2d2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a2d4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a2d6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800a2d8:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800a2da:	f001 fb25 	bl	800b928 <__ulp>
 800a2de:	0002      	movs	r2, r0
 800a2e0:	000b      	movs	r3, r1
 800a2e2:	0030      	movs	r0, r6
 800a2e4:	0039      	movs	r1, r7
 800a2e6:	f7f7 f9c1 	bl	800166c <__aeabi_dmul>
 800a2ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a2ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a2ee:	f7f6 fa63 	bl	80007b8 <__aeabi_dadd>
 800a2f2:	0006      	movs	r6, r0
 800a2f4:	000f      	movs	r7, r1
 800a2f6:	e78f      	b.n	800a218 <_strtod_l+0xae4>
 800a2f8:	0002      	movs	r2, r0
 800a2fa:	9216      	str	r2, [sp, #88]	; 0x58
 800a2fc:	9317      	str	r3, [sp, #92]	; 0x5c
 800a2fe:	e7dd      	b.n	800a2bc <_strtod_l+0xb88>
 800a300:	4b10      	ldr	r3, [pc, #64]	; (800a344 <_strtod_l+0xc10>)
 800a302:	f7f6 f8a7 	bl	8000454 <__aeabi_dcmplt>
 800a306:	e7b2      	b.n	800a26e <_strtod_l+0xb3a>
 800a308:	fff00000 	.word	0xfff00000
 800a30c:	000fffff 	.word	0x000fffff
 800a310:	3ff00000 	.word	0x3ff00000
 800a314:	3fe00000 	.word	0x3fe00000
 800a318:	7ff00000 	.word	0x7ff00000
 800a31c:	7fe00000 	.word	0x7fe00000
 800a320:	fcb00000 	.word	0xfcb00000
 800a324:	7c9fffff 	.word	0x7c9fffff
 800a328:	7fefffff 	.word	0x7fefffff
 800a32c:	bff00000 	.word	0xbff00000
 800a330:	94a03595 	.word	0x94a03595
 800a334:	3fdfffff 	.word	0x3fdfffff
 800a338:	35afe535 	.word	0x35afe535
 800a33c:	ffc00000 	.word	0xffc00000
 800a340:	41dfffff 	.word	0x41dfffff
 800a344:	3fcfffff 	.word	0x3fcfffff

0800a348 <_strtod_r>:
 800a348:	b510      	push	{r4, lr}
 800a34a:	4b02      	ldr	r3, [pc, #8]	; (800a354 <_strtod_r+0xc>)
 800a34c:	f7ff f9f2 	bl	8009734 <_strtod_l>
 800a350:	bd10      	pop	{r4, pc}
 800a352:	46c0      	nop			; (mov r8, r8)
 800a354:	20000454 	.word	0x20000454

0800a358 <strtod>:
 800a358:	b510      	push	{r4, lr}
 800a35a:	4c04      	ldr	r4, [pc, #16]	; (800a36c <strtod+0x14>)
 800a35c:	000a      	movs	r2, r1
 800a35e:	0001      	movs	r1, r0
 800a360:	4b03      	ldr	r3, [pc, #12]	; (800a370 <strtod+0x18>)
 800a362:	6820      	ldr	r0, [r4, #0]
 800a364:	f7ff f9e6 	bl	8009734 <_strtod_l>
 800a368:	bd10      	pop	{r4, pc}
 800a36a:	46c0      	nop			; (mov r8, r8)
 800a36c:	200006e0 	.word	0x200006e0
 800a370:	20000454 	.word	0x20000454

0800a374 <_strtol_l.constprop.0>:
 800a374:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a376:	b087      	sub	sp, #28
 800a378:	001e      	movs	r6, r3
 800a37a:	9005      	str	r0, [sp, #20]
 800a37c:	9101      	str	r1, [sp, #4]
 800a37e:	9202      	str	r2, [sp, #8]
 800a380:	2b01      	cmp	r3, #1
 800a382:	d048      	beq.n	800a416 <_strtol_l.constprop.0+0xa2>
 800a384:	000b      	movs	r3, r1
 800a386:	2e24      	cmp	r6, #36	; 0x24
 800a388:	d845      	bhi.n	800a416 <_strtol_l.constprop.0+0xa2>
 800a38a:	4a3b      	ldr	r2, [pc, #236]	; (800a478 <_strtol_l.constprop.0+0x104>)
 800a38c:	2108      	movs	r1, #8
 800a38e:	4694      	mov	ip, r2
 800a390:	001a      	movs	r2, r3
 800a392:	4660      	mov	r0, ip
 800a394:	7814      	ldrb	r4, [r2, #0]
 800a396:	3301      	adds	r3, #1
 800a398:	5d00      	ldrb	r0, [r0, r4]
 800a39a:	001d      	movs	r5, r3
 800a39c:	0007      	movs	r7, r0
 800a39e:	400f      	ands	r7, r1
 800a3a0:	4208      	tst	r0, r1
 800a3a2:	d1f5      	bne.n	800a390 <_strtol_l.constprop.0+0x1c>
 800a3a4:	2c2d      	cmp	r4, #45	; 0x2d
 800a3a6:	d13d      	bne.n	800a424 <_strtol_l.constprop.0+0xb0>
 800a3a8:	2701      	movs	r7, #1
 800a3aa:	781c      	ldrb	r4, [r3, #0]
 800a3ac:	1c95      	adds	r5, r2, #2
 800a3ae:	2e00      	cmp	r6, #0
 800a3b0:	d05e      	beq.n	800a470 <_strtol_l.constprop.0+0xfc>
 800a3b2:	2e10      	cmp	r6, #16
 800a3b4:	d109      	bne.n	800a3ca <_strtol_l.constprop.0+0x56>
 800a3b6:	2c30      	cmp	r4, #48	; 0x30
 800a3b8:	d107      	bne.n	800a3ca <_strtol_l.constprop.0+0x56>
 800a3ba:	2220      	movs	r2, #32
 800a3bc:	782b      	ldrb	r3, [r5, #0]
 800a3be:	4393      	bics	r3, r2
 800a3c0:	2b58      	cmp	r3, #88	; 0x58
 800a3c2:	d150      	bne.n	800a466 <_strtol_l.constprop.0+0xf2>
 800a3c4:	2610      	movs	r6, #16
 800a3c6:	786c      	ldrb	r4, [r5, #1]
 800a3c8:	3502      	adds	r5, #2
 800a3ca:	4b2c      	ldr	r3, [pc, #176]	; (800a47c <_strtol_l.constprop.0+0x108>)
 800a3cc:	0031      	movs	r1, r6
 800a3ce:	18fb      	adds	r3, r7, r3
 800a3d0:	0018      	movs	r0, r3
 800a3d2:	9303      	str	r3, [sp, #12]
 800a3d4:	f7f5 ff38 	bl	8000248 <__aeabi_uidivmod>
 800a3d8:	2200      	movs	r2, #0
 800a3da:	9104      	str	r1, [sp, #16]
 800a3dc:	2101      	movs	r1, #1
 800a3de:	4684      	mov	ip, r0
 800a3e0:	0010      	movs	r0, r2
 800a3e2:	4249      	negs	r1, r1
 800a3e4:	0023      	movs	r3, r4
 800a3e6:	3b30      	subs	r3, #48	; 0x30
 800a3e8:	2b09      	cmp	r3, #9
 800a3ea:	d903      	bls.n	800a3f4 <_strtol_l.constprop.0+0x80>
 800a3ec:	3b11      	subs	r3, #17
 800a3ee:	2b19      	cmp	r3, #25
 800a3f0:	d81d      	bhi.n	800a42e <_strtol_l.constprop.0+0xba>
 800a3f2:	330a      	adds	r3, #10
 800a3f4:	429e      	cmp	r6, r3
 800a3f6:	dd1e      	ble.n	800a436 <_strtol_l.constprop.0+0xc2>
 800a3f8:	1c54      	adds	r4, r2, #1
 800a3fa:	d009      	beq.n	800a410 <_strtol_l.constprop.0+0x9c>
 800a3fc:	000a      	movs	r2, r1
 800a3fe:	4584      	cmp	ip, r0
 800a400:	d306      	bcc.n	800a410 <_strtol_l.constprop.0+0x9c>
 800a402:	d102      	bne.n	800a40a <_strtol_l.constprop.0+0x96>
 800a404:	9c04      	ldr	r4, [sp, #16]
 800a406:	429c      	cmp	r4, r3
 800a408:	db02      	blt.n	800a410 <_strtol_l.constprop.0+0x9c>
 800a40a:	2201      	movs	r2, #1
 800a40c:	4370      	muls	r0, r6
 800a40e:	1818      	adds	r0, r3, r0
 800a410:	782c      	ldrb	r4, [r5, #0]
 800a412:	3501      	adds	r5, #1
 800a414:	e7e6      	b.n	800a3e4 <_strtol_l.constprop.0+0x70>
 800a416:	f000 fa7d 	bl	800a914 <__errno>
 800a41a:	2316      	movs	r3, #22
 800a41c:	6003      	str	r3, [r0, #0]
 800a41e:	2000      	movs	r0, #0
 800a420:	b007      	add	sp, #28
 800a422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a424:	2c2b      	cmp	r4, #43	; 0x2b
 800a426:	d1c2      	bne.n	800a3ae <_strtol_l.constprop.0+0x3a>
 800a428:	781c      	ldrb	r4, [r3, #0]
 800a42a:	1c95      	adds	r5, r2, #2
 800a42c:	e7bf      	b.n	800a3ae <_strtol_l.constprop.0+0x3a>
 800a42e:	0023      	movs	r3, r4
 800a430:	3b61      	subs	r3, #97	; 0x61
 800a432:	2b19      	cmp	r3, #25
 800a434:	d9dd      	bls.n	800a3f2 <_strtol_l.constprop.0+0x7e>
 800a436:	1c53      	adds	r3, r2, #1
 800a438:	d109      	bne.n	800a44e <_strtol_l.constprop.0+0xda>
 800a43a:	2322      	movs	r3, #34	; 0x22
 800a43c:	9a05      	ldr	r2, [sp, #20]
 800a43e:	9803      	ldr	r0, [sp, #12]
 800a440:	6013      	str	r3, [r2, #0]
 800a442:	9b02      	ldr	r3, [sp, #8]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d0eb      	beq.n	800a420 <_strtol_l.constprop.0+0xac>
 800a448:	1e6b      	subs	r3, r5, #1
 800a44a:	9301      	str	r3, [sp, #4]
 800a44c:	e007      	b.n	800a45e <_strtol_l.constprop.0+0xea>
 800a44e:	2f00      	cmp	r7, #0
 800a450:	d000      	beq.n	800a454 <_strtol_l.constprop.0+0xe0>
 800a452:	4240      	negs	r0, r0
 800a454:	9b02      	ldr	r3, [sp, #8]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d0e2      	beq.n	800a420 <_strtol_l.constprop.0+0xac>
 800a45a:	2a00      	cmp	r2, #0
 800a45c:	d1f4      	bne.n	800a448 <_strtol_l.constprop.0+0xd4>
 800a45e:	9b02      	ldr	r3, [sp, #8]
 800a460:	9a01      	ldr	r2, [sp, #4]
 800a462:	601a      	str	r2, [r3, #0]
 800a464:	e7dc      	b.n	800a420 <_strtol_l.constprop.0+0xac>
 800a466:	2430      	movs	r4, #48	; 0x30
 800a468:	2e00      	cmp	r6, #0
 800a46a:	d1ae      	bne.n	800a3ca <_strtol_l.constprop.0+0x56>
 800a46c:	3608      	adds	r6, #8
 800a46e:	e7ac      	b.n	800a3ca <_strtol_l.constprop.0+0x56>
 800a470:	2c30      	cmp	r4, #48	; 0x30
 800a472:	d0a2      	beq.n	800a3ba <_strtol_l.constprop.0+0x46>
 800a474:	260a      	movs	r6, #10
 800a476:	e7a8      	b.n	800a3ca <_strtol_l.constprop.0+0x56>
 800a478:	08012b89 	.word	0x08012b89
 800a47c:	7fffffff 	.word	0x7fffffff

0800a480 <_strtol_r>:
 800a480:	b510      	push	{r4, lr}
 800a482:	f7ff ff77 	bl	800a374 <_strtol_l.constprop.0>
 800a486:	bd10      	pop	{r4, pc}

0800a488 <strtol>:
 800a488:	b510      	push	{r4, lr}
 800a48a:	4c04      	ldr	r4, [pc, #16]	; (800a49c <strtol+0x14>)
 800a48c:	0013      	movs	r3, r2
 800a48e:	000a      	movs	r2, r1
 800a490:	0001      	movs	r1, r0
 800a492:	6820      	ldr	r0, [r4, #0]
 800a494:	f7ff ff6e 	bl	800a374 <_strtol_l.constprop.0>
 800a498:	bd10      	pop	{r4, pc}
 800a49a:	46c0      	nop			; (mov r8, r8)
 800a49c:	200006e0 	.word	0x200006e0

0800a4a0 <std>:
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	b510      	push	{r4, lr}
 800a4a4:	0004      	movs	r4, r0
 800a4a6:	6003      	str	r3, [r0, #0]
 800a4a8:	6043      	str	r3, [r0, #4]
 800a4aa:	6083      	str	r3, [r0, #8]
 800a4ac:	8181      	strh	r1, [r0, #12]
 800a4ae:	6643      	str	r3, [r0, #100]	; 0x64
 800a4b0:	81c2      	strh	r2, [r0, #14]
 800a4b2:	6103      	str	r3, [r0, #16]
 800a4b4:	6143      	str	r3, [r0, #20]
 800a4b6:	6183      	str	r3, [r0, #24]
 800a4b8:	0019      	movs	r1, r3
 800a4ba:	2208      	movs	r2, #8
 800a4bc:	305c      	adds	r0, #92	; 0x5c
 800a4be:	f000 f97d 	bl	800a7bc <memset>
 800a4c2:	4b0b      	ldr	r3, [pc, #44]	; (800a4f0 <std+0x50>)
 800a4c4:	61e4      	str	r4, [r4, #28]
 800a4c6:	6223      	str	r3, [r4, #32]
 800a4c8:	4b0a      	ldr	r3, [pc, #40]	; (800a4f4 <std+0x54>)
 800a4ca:	6263      	str	r3, [r4, #36]	; 0x24
 800a4cc:	4b0a      	ldr	r3, [pc, #40]	; (800a4f8 <std+0x58>)
 800a4ce:	62a3      	str	r3, [r4, #40]	; 0x28
 800a4d0:	4b0a      	ldr	r3, [pc, #40]	; (800a4fc <std+0x5c>)
 800a4d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a4d4:	4b0a      	ldr	r3, [pc, #40]	; (800a500 <std+0x60>)
 800a4d6:	429c      	cmp	r4, r3
 800a4d8:	d005      	beq.n	800a4e6 <std+0x46>
 800a4da:	4b0a      	ldr	r3, [pc, #40]	; (800a504 <std+0x64>)
 800a4dc:	429c      	cmp	r4, r3
 800a4de:	d002      	beq.n	800a4e6 <std+0x46>
 800a4e0:	4b09      	ldr	r3, [pc, #36]	; (800a508 <std+0x68>)
 800a4e2:	429c      	cmp	r4, r3
 800a4e4:	d103      	bne.n	800a4ee <std+0x4e>
 800a4e6:	0020      	movs	r0, r4
 800a4e8:	3058      	adds	r0, #88	; 0x58
 800a4ea:	f000 fa3d 	bl	800a968 <__retarget_lock_init_recursive>
 800a4ee:	bd10      	pop	{r4, pc}
 800a4f0:	0800a721 	.word	0x0800a721
 800a4f4:	0800a74d 	.word	0x0800a74d
 800a4f8:	0800a785 	.word	0x0800a785
 800a4fc:	0800a7b1 	.word	0x0800a7b1
 800a500:	20000cc8 	.word	0x20000cc8
 800a504:	20000d30 	.word	0x20000d30
 800a508:	20000d98 	.word	0x20000d98

0800a50c <stdio_exit_handler>:
 800a50c:	b510      	push	{r4, lr}
 800a50e:	4a03      	ldr	r2, [pc, #12]	; (800a51c <stdio_exit_handler+0x10>)
 800a510:	4903      	ldr	r1, [pc, #12]	; (800a520 <stdio_exit_handler+0x14>)
 800a512:	4804      	ldr	r0, [pc, #16]	; (800a524 <stdio_exit_handler+0x18>)
 800a514:	f000 f86c 	bl	800a5f0 <_fwalk_sglue>
 800a518:	bd10      	pop	{r4, pc}
 800a51a:	46c0      	nop			; (mov r8, r8)
 800a51c:	20000448 	.word	0x20000448
 800a520:	0800e469 	.word	0x0800e469
 800a524:	200005c0 	.word	0x200005c0

0800a528 <cleanup_stdio>:
 800a528:	6841      	ldr	r1, [r0, #4]
 800a52a:	4b0b      	ldr	r3, [pc, #44]	; (800a558 <cleanup_stdio+0x30>)
 800a52c:	b510      	push	{r4, lr}
 800a52e:	0004      	movs	r4, r0
 800a530:	4299      	cmp	r1, r3
 800a532:	d001      	beq.n	800a538 <cleanup_stdio+0x10>
 800a534:	f003 ff98 	bl	800e468 <_fclose_r>
 800a538:	68a1      	ldr	r1, [r4, #8]
 800a53a:	4b08      	ldr	r3, [pc, #32]	; (800a55c <cleanup_stdio+0x34>)
 800a53c:	4299      	cmp	r1, r3
 800a53e:	d002      	beq.n	800a546 <cleanup_stdio+0x1e>
 800a540:	0020      	movs	r0, r4
 800a542:	f003 ff91 	bl	800e468 <_fclose_r>
 800a546:	68e1      	ldr	r1, [r4, #12]
 800a548:	4b05      	ldr	r3, [pc, #20]	; (800a560 <cleanup_stdio+0x38>)
 800a54a:	4299      	cmp	r1, r3
 800a54c:	d002      	beq.n	800a554 <cleanup_stdio+0x2c>
 800a54e:	0020      	movs	r0, r4
 800a550:	f003 ff8a 	bl	800e468 <_fclose_r>
 800a554:	bd10      	pop	{r4, pc}
 800a556:	46c0      	nop			; (mov r8, r8)
 800a558:	20000cc8 	.word	0x20000cc8
 800a55c:	20000d30 	.word	0x20000d30
 800a560:	20000d98 	.word	0x20000d98

0800a564 <global_stdio_init.part.0>:
 800a564:	b510      	push	{r4, lr}
 800a566:	4b09      	ldr	r3, [pc, #36]	; (800a58c <global_stdio_init.part.0+0x28>)
 800a568:	4a09      	ldr	r2, [pc, #36]	; (800a590 <global_stdio_init.part.0+0x2c>)
 800a56a:	2104      	movs	r1, #4
 800a56c:	601a      	str	r2, [r3, #0]
 800a56e:	4809      	ldr	r0, [pc, #36]	; (800a594 <global_stdio_init.part.0+0x30>)
 800a570:	2200      	movs	r2, #0
 800a572:	f7ff ff95 	bl	800a4a0 <std>
 800a576:	2201      	movs	r2, #1
 800a578:	2109      	movs	r1, #9
 800a57a:	4807      	ldr	r0, [pc, #28]	; (800a598 <global_stdio_init.part.0+0x34>)
 800a57c:	f7ff ff90 	bl	800a4a0 <std>
 800a580:	2202      	movs	r2, #2
 800a582:	2112      	movs	r1, #18
 800a584:	4805      	ldr	r0, [pc, #20]	; (800a59c <global_stdio_init.part.0+0x38>)
 800a586:	f7ff ff8b 	bl	800a4a0 <std>
 800a58a:	bd10      	pop	{r4, pc}
 800a58c:	20000e00 	.word	0x20000e00
 800a590:	0800a50d 	.word	0x0800a50d
 800a594:	20000cc8 	.word	0x20000cc8
 800a598:	20000d30 	.word	0x20000d30
 800a59c:	20000d98 	.word	0x20000d98

0800a5a0 <__sfp_lock_acquire>:
 800a5a0:	b510      	push	{r4, lr}
 800a5a2:	4802      	ldr	r0, [pc, #8]	; (800a5ac <__sfp_lock_acquire+0xc>)
 800a5a4:	f000 f9e2 	bl	800a96c <__retarget_lock_acquire_recursive>
 800a5a8:	bd10      	pop	{r4, pc}
 800a5aa:	46c0      	nop			; (mov r8, r8)
 800a5ac:	20000e0a 	.word	0x20000e0a

0800a5b0 <__sfp_lock_release>:
 800a5b0:	b510      	push	{r4, lr}
 800a5b2:	4802      	ldr	r0, [pc, #8]	; (800a5bc <__sfp_lock_release+0xc>)
 800a5b4:	f000 f9db 	bl	800a96e <__retarget_lock_release_recursive>
 800a5b8:	bd10      	pop	{r4, pc}
 800a5ba:	46c0      	nop			; (mov r8, r8)
 800a5bc:	20000e0a 	.word	0x20000e0a

0800a5c0 <__sinit>:
 800a5c0:	b510      	push	{r4, lr}
 800a5c2:	0004      	movs	r4, r0
 800a5c4:	f7ff ffec 	bl	800a5a0 <__sfp_lock_acquire>
 800a5c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d002      	beq.n	800a5d4 <__sinit+0x14>
 800a5ce:	f7ff ffef 	bl	800a5b0 <__sfp_lock_release>
 800a5d2:	bd10      	pop	{r4, pc}
 800a5d4:	4b04      	ldr	r3, [pc, #16]	; (800a5e8 <__sinit+0x28>)
 800a5d6:	6363      	str	r3, [r4, #52]	; 0x34
 800a5d8:	4b04      	ldr	r3, [pc, #16]	; (800a5ec <__sinit+0x2c>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d1f6      	bne.n	800a5ce <__sinit+0xe>
 800a5e0:	f7ff ffc0 	bl	800a564 <global_stdio_init.part.0>
 800a5e4:	e7f3      	b.n	800a5ce <__sinit+0xe>
 800a5e6:	46c0      	nop			; (mov r8, r8)
 800a5e8:	0800a529 	.word	0x0800a529
 800a5ec:	20000e00 	.word	0x20000e00

0800a5f0 <_fwalk_sglue>:
 800a5f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5f2:	0014      	movs	r4, r2
 800a5f4:	2600      	movs	r6, #0
 800a5f6:	9000      	str	r0, [sp, #0]
 800a5f8:	9101      	str	r1, [sp, #4]
 800a5fa:	68a5      	ldr	r5, [r4, #8]
 800a5fc:	6867      	ldr	r7, [r4, #4]
 800a5fe:	3f01      	subs	r7, #1
 800a600:	d504      	bpl.n	800a60c <_fwalk_sglue+0x1c>
 800a602:	6824      	ldr	r4, [r4, #0]
 800a604:	2c00      	cmp	r4, #0
 800a606:	d1f8      	bne.n	800a5fa <_fwalk_sglue+0xa>
 800a608:	0030      	movs	r0, r6
 800a60a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a60c:	89ab      	ldrh	r3, [r5, #12]
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d908      	bls.n	800a624 <_fwalk_sglue+0x34>
 800a612:	220e      	movs	r2, #14
 800a614:	5eab      	ldrsh	r3, [r5, r2]
 800a616:	3301      	adds	r3, #1
 800a618:	d004      	beq.n	800a624 <_fwalk_sglue+0x34>
 800a61a:	0029      	movs	r1, r5
 800a61c:	9800      	ldr	r0, [sp, #0]
 800a61e:	9b01      	ldr	r3, [sp, #4]
 800a620:	4798      	blx	r3
 800a622:	4306      	orrs	r6, r0
 800a624:	3568      	adds	r5, #104	; 0x68
 800a626:	e7ea      	b.n	800a5fe <_fwalk_sglue+0xe>

0800a628 <snprintf>:
 800a628:	b40c      	push	{r2, r3}
 800a62a:	b530      	push	{r4, r5, lr}
 800a62c:	4b17      	ldr	r3, [pc, #92]	; (800a68c <snprintf+0x64>)
 800a62e:	000c      	movs	r4, r1
 800a630:	681d      	ldr	r5, [r3, #0]
 800a632:	b09d      	sub	sp, #116	; 0x74
 800a634:	2900      	cmp	r1, #0
 800a636:	da08      	bge.n	800a64a <snprintf+0x22>
 800a638:	238b      	movs	r3, #139	; 0x8b
 800a63a:	2001      	movs	r0, #1
 800a63c:	602b      	str	r3, [r5, #0]
 800a63e:	4240      	negs	r0, r0
 800a640:	b01d      	add	sp, #116	; 0x74
 800a642:	bc30      	pop	{r4, r5}
 800a644:	bc08      	pop	{r3}
 800a646:	b002      	add	sp, #8
 800a648:	4718      	bx	r3
 800a64a:	2382      	movs	r3, #130	; 0x82
 800a64c:	466a      	mov	r2, sp
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	8293      	strh	r3, [r2, #20]
 800a652:	2300      	movs	r3, #0
 800a654:	9002      	str	r0, [sp, #8]
 800a656:	9006      	str	r0, [sp, #24]
 800a658:	4299      	cmp	r1, r3
 800a65a:	d000      	beq.n	800a65e <snprintf+0x36>
 800a65c:	1e4b      	subs	r3, r1, #1
 800a65e:	9304      	str	r3, [sp, #16]
 800a660:	9307      	str	r3, [sp, #28]
 800a662:	2301      	movs	r3, #1
 800a664:	466a      	mov	r2, sp
 800a666:	425b      	negs	r3, r3
 800a668:	82d3      	strh	r3, [r2, #22]
 800a66a:	0028      	movs	r0, r5
 800a66c:	ab21      	add	r3, sp, #132	; 0x84
 800a66e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a670:	a902      	add	r1, sp, #8
 800a672:	9301      	str	r3, [sp, #4]
 800a674:	f001 fa9a 	bl	800bbac <_svfprintf_r>
 800a678:	1c43      	adds	r3, r0, #1
 800a67a:	da01      	bge.n	800a680 <snprintf+0x58>
 800a67c:	238b      	movs	r3, #139	; 0x8b
 800a67e:	602b      	str	r3, [r5, #0]
 800a680:	2c00      	cmp	r4, #0
 800a682:	d0dd      	beq.n	800a640 <snprintf+0x18>
 800a684:	2200      	movs	r2, #0
 800a686:	9b02      	ldr	r3, [sp, #8]
 800a688:	701a      	strb	r2, [r3, #0]
 800a68a:	e7d9      	b.n	800a640 <snprintf+0x18>
 800a68c:	200006e0 	.word	0x200006e0

0800a690 <sprintf>:
 800a690:	b40e      	push	{r1, r2, r3}
 800a692:	b500      	push	{lr}
 800a694:	490b      	ldr	r1, [pc, #44]	; (800a6c4 <sprintf+0x34>)
 800a696:	b09c      	sub	sp, #112	; 0x70
 800a698:	ab1d      	add	r3, sp, #116	; 0x74
 800a69a:	9002      	str	r0, [sp, #8]
 800a69c:	9006      	str	r0, [sp, #24]
 800a69e:	9107      	str	r1, [sp, #28]
 800a6a0:	9104      	str	r1, [sp, #16]
 800a6a2:	4809      	ldr	r0, [pc, #36]	; (800a6c8 <sprintf+0x38>)
 800a6a4:	4909      	ldr	r1, [pc, #36]	; (800a6cc <sprintf+0x3c>)
 800a6a6:	cb04      	ldmia	r3!, {r2}
 800a6a8:	9105      	str	r1, [sp, #20]
 800a6aa:	6800      	ldr	r0, [r0, #0]
 800a6ac:	a902      	add	r1, sp, #8
 800a6ae:	9301      	str	r3, [sp, #4]
 800a6b0:	f001 fa7c 	bl	800bbac <_svfprintf_r>
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	9b02      	ldr	r3, [sp, #8]
 800a6b8:	701a      	strb	r2, [r3, #0]
 800a6ba:	b01c      	add	sp, #112	; 0x70
 800a6bc:	bc08      	pop	{r3}
 800a6be:	b003      	add	sp, #12
 800a6c0:	4718      	bx	r3
 800a6c2:	46c0      	nop			; (mov r8, r8)
 800a6c4:	7fffffff 	.word	0x7fffffff
 800a6c8:	200006e0 	.word	0x200006e0
 800a6cc:	ffff0208 	.word	0xffff0208

0800a6d0 <sscanf>:
 800a6d0:	b40e      	push	{r1, r2, r3}
 800a6d2:	b530      	push	{r4, r5, lr}
 800a6d4:	2381      	movs	r3, #129	; 0x81
 800a6d6:	b09c      	sub	sp, #112	; 0x70
 800a6d8:	466a      	mov	r2, sp
 800a6da:	ac1f      	add	r4, sp, #124	; 0x7c
 800a6dc:	009b      	lsls	r3, r3, #2
 800a6de:	cc20      	ldmia	r4!, {r5}
 800a6e0:	8293      	strh	r3, [r2, #20]
 800a6e2:	9002      	str	r0, [sp, #8]
 800a6e4:	9006      	str	r0, [sp, #24]
 800a6e6:	f7f5 fd0d 	bl	8000104 <strlen>
 800a6ea:	4b0b      	ldr	r3, [pc, #44]	; (800a718 <sscanf+0x48>)
 800a6ec:	466a      	mov	r2, sp
 800a6ee:	930a      	str	r3, [sp, #40]	; 0x28
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	9003      	str	r0, [sp, #12]
 800a6f4:	9007      	str	r0, [sp, #28]
 800a6f6:	4809      	ldr	r0, [pc, #36]	; (800a71c <sscanf+0x4c>)
 800a6f8:	930e      	str	r3, [sp, #56]	; 0x38
 800a6fa:	9313      	str	r3, [sp, #76]	; 0x4c
 800a6fc:	3b01      	subs	r3, #1
 800a6fe:	82d3      	strh	r3, [r2, #22]
 800a700:	a902      	add	r1, sp, #8
 800a702:	0023      	movs	r3, r4
 800a704:	002a      	movs	r2, r5
 800a706:	6800      	ldr	r0, [r0, #0]
 800a708:	9401      	str	r4, [sp, #4]
 800a70a:	f002 fc91 	bl	800d030 <__ssvfscanf_r>
 800a70e:	b01c      	add	sp, #112	; 0x70
 800a710:	bc30      	pop	{r4, r5}
 800a712:	bc08      	pop	{r3}
 800a714:	b003      	add	sp, #12
 800a716:	4718      	bx	r3
 800a718:	0800a749 	.word	0x0800a749
 800a71c:	200006e0 	.word	0x200006e0

0800a720 <__sread>:
 800a720:	b570      	push	{r4, r5, r6, lr}
 800a722:	000c      	movs	r4, r1
 800a724:	250e      	movs	r5, #14
 800a726:	5f49      	ldrsh	r1, [r1, r5]
 800a728:	f000 f8ba 	bl	800a8a0 <_read_r>
 800a72c:	2800      	cmp	r0, #0
 800a72e:	db03      	blt.n	800a738 <__sread+0x18>
 800a730:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a732:	181b      	adds	r3, r3, r0
 800a734:	6523      	str	r3, [r4, #80]	; 0x50
 800a736:	bd70      	pop	{r4, r5, r6, pc}
 800a738:	89a3      	ldrh	r3, [r4, #12]
 800a73a:	4a02      	ldr	r2, [pc, #8]	; (800a744 <__sread+0x24>)
 800a73c:	4013      	ands	r3, r2
 800a73e:	81a3      	strh	r3, [r4, #12]
 800a740:	e7f9      	b.n	800a736 <__sread+0x16>
 800a742:	46c0      	nop			; (mov r8, r8)
 800a744:	ffffefff 	.word	0xffffefff

0800a748 <__seofread>:
 800a748:	2000      	movs	r0, #0
 800a74a:	4770      	bx	lr

0800a74c <__swrite>:
 800a74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a74e:	001f      	movs	r7, r3
 800a750:	898b      	ldrh	r3, [r1, #12]
 800a752:	0005      	movs	r5, r0
 800a754:	000c      	movs	r4, r1
 800a756:	0016      	movs	r6, r2
 800a758:	05db      	lsls	r3, r3, #23
 800a75a:	d505      	bpl.n	800a768 <__swrite+0x1c>
 800a75c:	230e      	movs	r3, #14
 800a75e:	5ec9      	ldrsh	r1, [r1, r3]
 800a760:	2200      	movs	r2, #0
 800a762:	2302      	movs	r3, #2
 800a764:	f000 f888 	bl	800a878 <_lseek_r>
 800a768:	89a3      	ldrh	r3, [r4, #12]
 800a76a:	4a05      	ldr	r2, [pc, #20]	; (800a780 <__swrite+0x34>)
 800a76c:	0028      	movs	r0, r5
 800a76e:	4013      	ands	r3, r2
 800a770:	81a3      	strh	r3, [r4, #12]
 800a772:	0032      	movs	r2, r6
 800a774:	230e      	movs	r3, #14
 800a776:	5ee1      	ldrsh	r1, [r4, r3]
 800a778:	003b      	movs	r3, r7
 800a77a:	f000 f8b7 	bl	800a8ec <_write_r>
 800a77e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a780:	ffffefff 	.word	0xffffefff

0800a784 <__sseek>:
 800a784:	b570      	push	{r4, r5, r6, lr}
 800a786:	000c      	movs	r4, r1
 800a788:	250e      	movs	r5, #14
 800a78a:	5f49      	ldrsh	r1, [r1, r5]
 800a78c:	f000 f874 	bl	800a878 <_lseek_r>
 800a790:	89a3      	ldrh	r3, [r4, #12]
 800a792:	1c42      	adds	r2, r0, #1
 800a794:	d103      	bne.n	800a79e <__sseek+0x1a>
 800a796:	4a05      	ldr	r2, [pc, #20]	; (800a7ac <__sseek+0x28>)
 800a798:	4013      	ands	r3, r2
 800a79a:	81a3      	strh	r3, [r4, #12]
 800a79c:	bd70      	pop	{r4, r5, r6, pc}
 800a79e:	2280      	movs	r2, #128	; 0x80
 800a7a0:	0152      	lsls	r2, r2, #5
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	81a3      	strh	r3, [r4, #12]
 800a7a6:	6520      	str	r0, [r4, #80]	; 0x50
 800a7a8:	e7f8      	b.n	800a79c <__sseek+0x18>
 800a7aa:	46c0      	nop			; (mov r8, r8)
 800a7ac:	ffffefff 	.word	0xffffefff

0800a7b0 <__sclose>:
 800a7b0:	b510      	push	{r4, lr}
 800a7b2:	230e      	movs	r3, #14
 800a7b4:	5ec9      	ldrsh	r1, [r1, r3]
 800a7b6:	f000 f84d 	bl	800a854 <_close_r>
 800a7ba:	bd10      	pop	{r4, pc}

0800a7bc <memset>:
 800a7bc:	0003      	movs	r3, r0
 800a7be:	1882      	adds	r2, r0, r2
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d100      	bne.n	800a7c6 <memset+0xa>
 800a7c4:	4770      	bx	lr
 800a7c6:	7019      	strb	r1, [r3, #0]
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	e7f9      	b.n	800a7c0 <memset+0x4>

0800a7cc <strncmp>:
 800a7cc:	b530      	push	{r4, r5, lr}
 800a7ce:	0005      	movs	r5, r0
 800a7d0:	1e10      	subs	r0, r2, #0
 800a7d2:	d00b      	beq.n	800a7ec <strncmp+0x20>
 800a7d4:	2400      	movs	r4, #0
 800a7d6:	3a01      	subs	r2, #1
 800a7d8:	5d2b      	ldrb	r3, [r5, r4]
 800a7da:	5d08      	ldrb	r0, [r1, r4]
 800a7dc:	4283      	cmp	r3, r0
 800a7de:	d104      	bne.n	800a7ea <strncmp+0x1e>
 800a7e0:	42a2      	cmp	r2, r4
 800a7e2:	d002      	beq.n	800a7ea <strncmp+0x1e>
 800a7e4:	3401      	adds	r4, #1
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d1f6      	bne.n	800a7d8 <strncmp+0xc>
 800a7ea:	1a18      	subs	r0, r3, r0
 800a7ec:	bd30      	pop	{r4, r5, pc}

0800a7ee <strncpy>:
 800a7ee:	0003      	movs	r3, r0
 800a7f0:	b530      	push	{r4, r5, lr}
 800a7f2:	001d      	movs	r5, r3
 800a7f4:	2a00      	cmp	r2, #0
 800a7f6:	d006      	beq.n	800a806 <strncpy+0x18>
 800a7f8:	780c      	ldrb	r4, [r1, #0]
 800a7fa:	3a01      	subs	r2, #1
 800a7fc:	3301      	adds	r3, #1
 800a7fe:	702c      	strb	r4, [r5, #0]
 800a800:	3101      	adds	r1, #1
 800a802:	2c00      	cmp	r4, #0
 800a804:	d1f5      	bne.n	800a7f2 <strncpy+0x4>
 800a806:	2100      	movs	r1, #0
 800a808:	189a      	adds	r2, r3, r2
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d100      	bne.n	800a810 <strncpy+0x22>
 800a80e:	bd30      	pop	{r4, r5, pc}
 800a810:	7019      	strb	r1, [r3, #0]
 800a812:	3301      	adds	r3, #1
 800a814:	e7f9      	b.n	800a80a <strncpy+0x1c>

0800a816 <strstr>:
 800a816:	780a      	ldrb	r2, [r1, #0]
 800a818:	b530      	push	{r4, r5, lr}
 800a81a:	2a00      	cmp	r2, #0
 800a81c:	d10c      	bne.n	800a838 <strstr+0x22>
 800a81e:	bd30      	pop	{r4, r5, pc}
 800a820:	429a      	cmp	r2, r3
 800a822:	d108      	bne.n	800a836 <strstr+0x20>
 800a824:	2301      	movs	r3, #1
 800a826:	5ccc      	ldrb	r4, [r1, r3]
 800a828:	2c00      	cmp	r4, #0
 800a82a:	d0f8      	beq.n	800a81e <strstr+0x8>
 800a82c:	5cc5      	ldrb	r5, [r0, r3]
 800a82e:	42a5      	cmp	r5, r4
 800a830:	d101      	bne.n	800a836 <strstr+0x20>
 800a832:	3301      	adds	r3, #1
 800a834:	e7f7      	b.n	800a826 <strstr+0x10>
 800a836:	3001      	adds	r0, #1
 800a838:	7803      	ldrb	r3, [r0, #0]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d1f0      	bne.n	800a820 <strstr+0xa>
 800a83e:	0018      	movs	r0, r3
 800a840:	e7ed      	b.n	800a81e <strstr+0x8>
	...

0800a844 <__locale_mb_cur_max>:
 800a844:	2294      	movs	r2, #148	; 0x94
 800a846:	4b02      	ldr	r3, [pc, #8]	; (800a850 <__locale_mb_cur_max+0xc>)
 800a848:	0052      	lsls	r2, r2, #1
 800a84a:	5c98      	ldrb	r0, [r3, r2]
 800a84c:	4770      	bx	lr
 800a84e:	46c0      	nop			; (mov r8, r8)
 800a850:	20000454 	.word	0x20000454

0800a854 <_close_r>:
 800a854:	2300      	movs	r3, #0
 800a856:	b570      	push	{r4, r5, r6, lr}
 800a858:	4d06      	ldr	r5, [pc, #24]	; (800a874 <_close_r+0x20>)
 800a85a:	0004      	movs	r4, r0
 800a85c:	0008      	movs	r0, r1
 800a85e:	602b      	str	r3, [r5, #0]
 800a860:	f7f8 ff29 	bl	80036b6 <_close>
 800a864:	1c43      	adds	r3, r0, #1
 800a866:	d103      	bne.n	800a870 <_close_r+0x1c>
 800a868:	682b      	ldr	r3, [r5, #0]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d000      	beq.n	800a870 <_close_r+0x1c>
 800a86e:	6023      	str	r3, [r4, #0]
 800a870:	bd70      	pop	{r4, r5, r6, pc}
 800a872:	46c0      	nop			; (mov r8, r8)
 800a874:	20000e04 	.word	0x20000e04

0800a878 <_lseek_r>:
 800a878:	b570      	push	{r4, r5, r6, lr}
 800a87a:	0004      	movs	r4, r0
 800a87c:	0008      	movs	r0, r1
 800a87e:	0011      	movs	r1, r2
 800a880:	001a      	movs	r2, r3
 800a882:	2300      	movs	r3, #0
 800a884:	4d05      	ldr	r5, [pc, #20]	; (800a89c <_lseek_r+0x24>)
 800a886:	602b      	str	r3, [r5, #0]
 800a888:	f7f8 ff36 	bl	80036f8 <_lseek>
 800a88c:	1c43      	adds	r3, r0, #1
 800a88e:	d103      	bne.n	800a898 <_lseek_r+0x20>
 800a890:	682b      	ldr	r3, [r5, #0]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d000      	beq.n	800a898 <_lseek_r+0x20>
 800a896:	6023      	str	r3, [r4, #0]
 800a898:	bd70      	pop	{r4, r5, r6, pc}
 800a89a:	46c0      	nop			; (mov r8, r8)
 800a89c:	20000e04 	.word	0x20000e04

0800a8a0 <_read_r>:
 800a8a0:	b570      	push	{r4, r5, r6, lr}
 800a8a2:	0004      	movs	r4, r0
 800a8a4:	0008      	movs	r0, r1
 800a8a6:	0011      	movs	r1, r2
 800a8a8:	001a      	movs	r2, r3
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	4d05      	ldr	r5, [pc, #20]	; (800a8c4 <_read_r+0x24>)
 800a8ae:	602b      	str	r3, [r5, #0]
 800a8b0:	f7f8 fec8 	bl	8003644 <_read>
 800a8b4:	1c43      	adds	r3, r0, #1
 800a8b6:	d103      	bne.n	800a8c0 <_read_r+0x20>
 800a8b8:	682b      	ldr	r3, [r5, #0]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d000      	beq.n	800a8c0 <_read_r+0x20>
 800a8be:	6023      	str	r3, [r4, #0]
 800a8c0:	bd70      	pop	{r4, r5, r6, pc}
 800a8c2:	46c0      	nop			; (mov r8, r8)
 800a8c4:	20000e04 	.word	0x20000e04

0800a8c8 <_sbrk_r>:
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	b570      	push	{r4, r5, r6, lr}
 800a8cc:	4d06      	ldr	r5, [pc, #24]	; (800a8e8 <_sbrk_r+0x20>)
 800a8ce:	0004      	movs	r4, r0
 800a8d0:	0008      	movs	r0, r1
 800a8d2:	602b      	str	r3, [r5, #0]
 800a8d4:	f7f8 ff1c 	bl	8003710 <_sbrk>
 800a8d8:	1c43      	adds	r3, r0, #1
 800a8da:	d103      	bne.n	800a8e4 <_sbrk_r+0x1c>
 800a8dc:	682b      	ldr	r3, [r5, #0]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d000      	beq.n	800a8e4 <_sbrk_r+0x1c>
 800a8e2:	6023      	str	r3, [r4, #0]
 800a8e4:	bd70      	pop	{r4, r5, r6, pc}
 800a8e6:	46c0      	nop			; (mov r8, r8)
 800a8e8:	20000e04 	.word	0x20000e04

0800a8ec <_write_r>:
 800a8ec:	b570      	push	{r4, r5, r6, lr}
 800a8ee:	0004      	movs	r4, r0
 800a8f0:	0008      	movs	r0, r1
 800a8f2:	0011      	movs	r1, r2
 800a8f4:	001a      	movs	r2, r3
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	4d05      	ldr	r5, [pc, #20]	; (800a910 <_write_r+0x24>)
 800a8fa:	602b      	str	r3, [r5, #0]
 800a8fc:	f7f8 febf 	bl	800367e <_write>
 800a900:	1c43      	adds	r3, r0, #1
 800a902:	d103      	bne.n	800a90c <_write_r+0x20>
 800a904:	682b      	ldr	r3, [r5, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d000      	beq.n	800a90c <_write_r+0x20>
 800a90a:	6023      	str	r3, [r4, #0]
 800a90c:	bd70      	pop	{r4, r5, r6, pc}
 800a90e:	46c0      	nop			; (mov r8, r8)
 800a910:	20000e04 	.word	0x20000e04

0800a914 <__errno>:
 800a914:	4b01      	ldr	r3, [pc, #4]	; (800a91c <__errno+0x8>)
 800a916:	6818      	ldr	r0, [r3, #0]
 800a918:	4770      	bx	lr
 800a91a:	46c0      	nop			; (mov r8, r8)
 800a91c:	200006e0 	.word	0x200006e0

0800a920 <__libc_init_array>:
 800a920:	b570      	push	{r4, r5, r6, lr}
 800a922:	2600      	movs	r6, #0
 800a924:	4c0c      	ldr	r4, [pc, #48]	; (800a958 <__libc_init_array+0x38>)
 800a926:	4d0d      	ldr	r5, [pc, #52]	; (800a95c <__libc_init_array+0x3c>)
 800a928:	1b64      	subs	r4, r4, r5
 800a92a:	10a4      	asrs	r4, r4, #2
 800a92c:	42a6      	cmp	r6, r4
 800a92e:	d109      	bne.n	800a944 <__libc_init_array+0x24>
 800a930:	2600      	movs	r6, #0
 800a932:	f006 fcc5 	bl	80112c0 <_init>
 800a936:	4c0a      	ldr	r4, [pc, #40]	; (800a960 <__libc_init_array+0x40>)
 800a938:	4d0a      	ldr	r5, [pc, #40]	; (800a964 <__libc_init_array+0x44>)
 800a93a:	1b64      	subs	r4, r4, r5
 800a93c:	10a4      	asrs	r4, r4, #2
 800a93e:	42a6      	cmp	r6, r4
 800a940:	d105      	bne.n	800a94e <__libc_init_array+0x2e>
 800a942:	bd70      	pop	{r4, r5, r6, pc}
 800a944:	00b3      	lsls	r3, r6, #2
 800a946:	58eb      	ldr	r3, [r5, r3]
 800a948:	4798      	blx	r3
 800a94a:	3601      	adds	r6, #1
 800a94c:	e7ee      	b.n	800a92c <__libc_init_array+0xc>
 800a94e:	00b3      	lsls	r3, r6, #2
 800a950:	58eb      	ldr	r3, [r5, r3]
 800a952:	4798      	blx	r3
 800a954:	3601      	adds	r6, #1
 800a956:	e7f2      	b.n	800a93e <__libc_init_array+0x1e>
 800a958:	08012fa4 	.word	0x08012fa4
 800a95c:	08012fa4 	.word	0x08012fa4
 800a960:	08012fac 	.word	0x08012fac
 800a964:	08012fa4 	.word	0x08012fa4

0800a968 <__retarget_lock_init_recursive>:
 800a968:	4770      	bx	lr

0800a96a <__retarget_lock_close_recursive>:
 800a96a:	4770      	bx	lr

0800a96c <__retarget_lock_acquire_recursive>:
 800a96c:	4770      	bx	lr

0800a96e <__retarget_lock_release_recursive>:
 800a96e:	4770      	bx	lr

0800a970 <sysconf>:
 800a970:	2380      	movs	r3, #128	; 0x80
 800a972:	b510      	push	{r4, lr}
 800a974:	2808      	cmp	r0, #8
 800a976:	d004      	beq.n	800a982 <sysconf+0x12>
 800a978:	f7ff ffcc 	bl	800a914 <__errno>
 800a97c:	2316      	movs	r3, #22
 800a97e:	6003      	str	r3, [r0, #0]
 800a980:	3b17      	subs	r3, #23
 800a982:	0018      	movs	r0, r3
 800a984:	bd10      	pop	{r4, pc}

0800a986 <memcpy>:
 800a986:	2300      	movs	r3, #0
 800a988:	b510      	push	{r4, lr}
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d100      	bne.n	800a990 <memcpy+0xa>
 800a98e:	bd10      	pop	{r4, pc}
 800a990:	5ccc      	ldrb	r4, [r1, r3]
 800a992:	54c4      	strb	r4, [r0, r3]
 800a994:	3301      	adds	r3, #1
 800a996:	e7f8      	b.n	800a98a <memcpy+0x4>

0800a998 <nan>:
 800a998:	2000      	movs	r0, #0
 800a99a:	4901      	ldr	r1, [pc, #4]	; (800a9a0 <nan+0x8>)
 800a99c:	4770      	bx	lr
 800a99e:	46c0      	nop			; (mov r8, r8)
 800a9a0:	7ff80000 	.word	0x7ff80000

0800a9a4 <nanf>:
 800a9a4:	4800      	ldr	r0, [pc, #0]	; (800a9a8 <nanf+0x4>)
 800a9a6:	4770      	bx	lr
 800a9a8:	7fc00000 	.word	0x7fc00000

0800a9ac <register_fini>:
 800a9ac:	4b03      	ldr	r3, [pc, #12]	; (800a9bc <register_fini+0x10>)
 800a9ae:	b510      	push	{r4, lr}
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d002      	beq.n	800a9ba <register_fini+0xe>
 800a9b4:	4802      	ldr	r0, [pc, #8]	; (800a9c0 <register_fini+0x14>)
 800a9b6:	f000 f805 	bl	800a9c4 <atexit>
 800a9ba:	bd10      	pop	{r4, pc}
 800a9bc:	00000000 	.word	0x00000000
 800a9c0:	0800e721 	.word	0x0800e721

0800a9c4 <atexit>:
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	b510      	push	{r4, lr}
 800a9c8:	0001      	movs	r1, r0
 800a9ca:	001a      	movs	r2, r3
 800a9cc:	0018      	movs	r0, r3
 800a9ce:	f003 fef9 	bl	800e7c4 <__register_exitproc>
 800a9d2:	bd10      	pop	{r4, pc}

0800a9d4 <_malloc_trim_r>:
 800a9d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9d6:	0004      	movs	r4, r0
 800a9d8:	2008      	movs	r0, #8
 800a9da:	000d      	movs	r5, r1
 800a9dc:	f7ff ffc8 	bl	800a970 <sysconf>
 800a9e0:	0006      	movs	r6, r0
 800a9e2:	0020      	movs	r0, r4
 800a9e4:	f7fe fe7e 	bl	80096e4 <__malloc_lock>
 800a9e8:	2203      	movs	r2, #3
 800a9ea:	4f21      	ldr	r7, [pc, #132]	; (800aa70 <_malloc_trim_r+0x9c>)
 800a9ec:	0031      	movs	r1, r6
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	4393      	bics	r3, r2
 800a9f4:	1b58      	subs	r0, r3, r5
 800a9f6:	3811      	subs	r0, #17
 800a9f8:	1980      	adds	r0, r0, r6
 800a9fa:	9301      	str	r3, [sp, #4]
 800a9fc:	f7f5 fb9e 	bl	800013c <__udivsi3>
 800aa00:	1e45      	subs	r5, r0, #1
 800aa02:	4375      	muls	r5, r6
 800aa04:	42ae      	cmp	r6, r5
 800aa06:	dd04      	ble.n	800aa12 <_malloc_trim_r+0x3e>
 800aa08:	0020      	movs	r0, r4
 800aa0a:	f7fe fe73 	bl	80096f4 <__malloc_unlock>
 800aa0e:	2000      	movs	r0, #0
 800aa10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aa12:	2100      	movs	r1, #0
 800aa14:	0020      	movs	r0, r4
 800aa16:	f7ff ff57 	bl	800a8c8 <_sbrk_r>
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	9a01      	ldr	r2, [sp, #4]
 800aa1e:	189b      	adds	r3, r3, r2
 800aa20:	4298      	cmp	r0, r3
 800aa22:	d1f1      	bne.n	800aa08 <_malloc_trim_r+0x34>
 800aa24:	0020      	movs	r0, r4
 800aa26:	4269      	negs	r1, r5
 800aa28:	f7ff ff4e 	bl	800a8c8 <_sbrk_r>
 800aa2c:	3001      	adds	r0, #1
 800aa2e:	d110      	bne.n	800aa52 <_malloc_trim_r+0x7e>
 800aa30:	2100      	movs	r1, #0
 800aa32:	0020      	movs	r0, r4
 800aa34:	f7ff ff48 	bl	800a8c8 <_sbrk_r>
 800aa38:	68ba      	ldr	r2, [r7, #8]
 800aa3a:	1a81      	subs	r1, r0, r2
 800aa3c:	290f      	cmp	r1, #15
 800aa3e:	dde3      	ble.n	800aa08 <_malloc_trim_r+0x34>
 800aa40:	4d0c      	ldr	r5, [pc, #48]	; (800aa74 <_malloc_trim_r+0xa0>)
 800aa42:	4b0d      	ldr	r3, [pc, #52]	; (800aa78 <_malloc_trim_r+0xa4>)
 800aa44:	682d      	ldr	r5, [r5, #0]
 800aa46:	1b40      	subs	r0, r0, r5
 800aa48:	6018      	str	r0, [r3, #0]
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	430b      	orrs	r3, r1
 800aa4e:	6053      	str	r3, [r2, #4]
 800aa50:	e7da      	b.n	800aa08 <_malloc_trim_r+0x34>
 800aa52:	2601      	movs	r6, #1
 800aa54:	9b01      	ldr	r3, [sp, #4]
 800aa56:	68ba      	ldr	r2, [r7, #8]
 800aa58:	1b5b      	subs	r3, r3, r5
 800aa5a:	4333      	orrs	r3, r6
 800aa5c:	6053      	str	r3, [r2, #4]
 800aa5e:	4a06      	ldr	r2, [pc, #24]	; (800aa78 <_malloc_trim_r+0xa4>)
 800aa60:	0020      	movs	r0, r4
 800aa62:	6813      	ldr	r3, [r2, #0]
 800aa64:	1b5b      	subs	r3, r3, r5
 800aa66:	6013      	str	r3, [r2, #0]
 800aa68:	f7fe fe44 	bl	80096f4 <__malloc_unlock>
 800aa6c:	0030      	movs	r0, r6
 800aa6e:	e7cf      	b.n	800aa10 <_malloc_trim_r+0x3c>
 800aa70:	20000038 	.word	0x20000038
 800aa74:	20000440 	.word	0x20000440
 800aa78:	20000c94 	.word	0x20000c94

0800aa7c <_free_r>:
 800aa7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa7e:	1e0d      	subs	r5, r1, #0
 800aa80:	9001      	str	r0, [sp, #4]
 800aa82:	d02d      	beq.n	800aae0 <_free_r+0x64>
 800aa84:	f7fe fe2e 	bl	80096e4 <__malloc_lock>
 800aa88:	2301      	movs	r3, #1
 800aa8a:	0029      	movs	r1, r5
 800aa8c:	469c      	mov	ip, r3
 800aa8e:	3908      	subs	r1, #8
 800aa90:	684f      	ldr	r7, [r1, #4]
 800aa92:	4662      	mov	r2, ip
 800aa94:	003b      	movs	r3, r7
 800aa96:	4664      	mov	r4, ip
 800aa98:	4393      	bics	r3, r2
 800aa9a:	18c8      	adds	r0, r1, r3
 800aa9c:	6845      	ldr	r5, [r0, #4]
 800aa9e:	3202      	adds	r2, #2
 800aaa0:	4395      	bics	r5, r2
 800aaa2:	4a4a      	ldr	r2, [pc, #296]	; (800abcc <_free_r+0x150>)
 800aaa4:	4027      	ands	r7, r4
 800aaa6:	6896      	ldr	r6, [r2, #8]
 800aaa8:	4286      	cmp	r6, r0
 800aaaa:	d11a      	bne.n	800aae2 <_free_r+0x66>
 800aaac:	195b      	adds	r3, r3, r5
 800aaae:	2f00      	cmp	r7, #0
 800aab0:	d106      	bne.n	800aac0 <_free_r+0x44>
 800aab2:	6808      	ldr	r0, [r1, #0]
 800aab4:	1a09      	subs	r1, r1, r0
 800aab6:	688d      	ldr	r5, [r1, #8]
 800aab8:	181b      	adds	r3, r3, r0
 800aaba:	68c8      	ldr	r0, [r1, #12]
 800aabc:	60e8      	str	r0, [r5, #12]
 800aabe:	6085      	str	r5, [r0, #8]
 800aac0:	2001      	movs	r0, #1
 800aac2:	4318      	orrs	r0, r3
 800aac4:	6048      	str	r0, [r1, #4]
 800aac6:	6091      	str	r1, [r2, #8]
 800aac8:	4a41      	ldr	r2, [pc, #260]	; (800abd0 <_free_r+0x154>)
 800aaca:	6812      	ldr	r2, [r2, #0]
 800aacc:	429a      	cmp	r2, r3
 800aace:	d804      	bhi.n	800aada <_free_r+0x5e>
 800aad0:	4b40      	ldr	r3, [pc, #256]	; (800abd4 <_free_r+0x158>)
 800aad2:	9801      	ldr	r0, [sp, #4]
 800aad4:	6819      	ldr	r1, [r3, #0]
 800aad6:	f7ff ff7d 	bl	800a9d4 <_malloc_trim_r>
 800aada:	9801      	ldr	r0, [sp, #4]
 800aadc:	f7fe fe0a 	bl	80096f4 <__malloc_unlock>
 800aae0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800aae2:	2600      	movs	r6, #0
 800aae4:	6045      	str	r5, [r0, #4]
 800aae6:	42b7      	cmp	r7, r6
 800aae8:	d109      	bne.n	800aafe <_free_r+0x82>
 800aaea:	680f      	ldr	r7, [r1, #0]
 800aaec:	4c3a      	ldr	r4, [pc, #232]	; (800abd8 <_free_r+0x15c>)
 800aaee:	1bc9      	subs	r1, r1, r7
 800aaf0:	19db      	adds	r3, r3, r7
 800aaf2:	688f      	ldr	r7, [r1, #8]
 800aaf4:	42a7      	cmp	r7, r4
 800aaf6:	d02c      	beq.n	800ab52 <_free_r+0xd6>
 800aaf8:	68cc      	ldr	r4, [r1, #12]
 800aafa:	60fc      	str	r4, [r7, #12]
 800aafc:	60a7      	str	r7, [r4, #8]
 800aafe:	1947      	adds	r7, r0, r5
 800ab00:	687c      	ldr	r4, [r7, #4]
 800ab02:	2701      	movs	r7, #1
 800ab04:	423c      	tst	r4, r7
 800ab06:	d10b      	bne.n	800ab20 <_free_r+0xa4>
 800ab08:	195b      	adds	r3, r3, r5
 800ab0a:	6885      	ldr	r5, [r0, #8]
 800ab0c:	2e00      	cmp	r6, #0
 800ab0e:	d122      	bne.n	800ab56 <_free_r+0xda>
 800ab10:	4c31      	ldr	r4, [pc, #196]	; (800abd8 <_free_r+0x15c>)
 800ab12:	42a5      	cmp	r5, r4
 800ab14:	d11f      	bne.n	800ab56 <_free_r+0xda>
 800ab16:	003e      	movs	r6, r7
 800ab18:	6151      	str	r1, [r2, #20]
 800ab1a:	6111      	str	r1, [r2, #16]
 800ab1c:	60cd      	str	r5, [r1, #12]
 800ab1e:	608d      	str	r5, [r1, #8]
 800ab20:	2501      	movs	r5, #1
 800ab22:	0028      	movs	r0, r5
 800ab24:	4318      	orrs	r0, r3
 800ab26:	6048      	str	r0, [r1, #4]
 800ab28:	50cb      	str	r3, [r1, r3]
 800ab2a:	2e00      	cmp	r6, #0
 800ab2c:	d1d5      	bne.n	800aada <_free_r+0x5e>
 800ab2e:	2080      	movs	r0, #128	; 0x80
 800ab30:	0080      	lsls	r0, r0, #2
 800ab32:	4283      	cmp	r3, r0
 800ab34:	d213      	bcs.n	800ab5e <_free_r+0xe2>
 800ab36:	08d8      	lsrs	r0, r3, #3
 800ab38:	095b      	lsrs	r3, r3, #5
 800ab3a:	409d      	lsls	r5, r3
 800ab3c:	6853      	ldr	r3, [r2, #4]
 800ab3e:	431d      	orrs	r5, r3
 800ab40:	00c3      	lsls	r3, r0, #3
 800ab42:	189b      	adds	r3, r3, r2
 800ab44:	6055      	str	r5, [r2, #4]
 800ab46:	689a      	ldr	r2, [r3, #8]
 800ab48:	60cb      	str	r3, [r1, #12]
 800ab4a:	608a      	str	r2, [r1, #8]
 800ab4c:	6099      	str	r1, [r3, #8]
 800ab4e:	60d1      	str	r1, [r2, #12]
 800ab50:	e7c3      	b.n	800aada <_free_r+0x5e>
 800ab52:	4666      	mov	r6, ip
 800ab54:	e7d3      	b.n	800aafe <_free_r+0x82>
 800ab56:	68c0      	ldr	r0, [r0, #12]
 800ab58:	60e8      	str	r0, [r5, #12]
 800ab5a:	6085      	str	r5, [r0, #8]
 800ab5c:	e7e0      	b.n	800ab20 <_free_r+0xa4>
 800ab5e:	0a5d      	lsrs	r5, r3, #9
 800ab60:	2d04      	cmp	r5, #4
 800ab62:	d812      	bhi.n	800ab8a <_free_r+0x10e>
 800ab64:	0998      	lsrs	r0, r3, #6
 800ab66:	3038      	adds	r0, #56	; 0x38
 800ab68:	00c6      	lsls	r6, r0, #3
 800ab6a:	18b6      	adds	r6, r6, r2
 800ab6c:	68b5      	ldr	r5, [r6, #8]
 800ab6e:	2703      	movs	r7, #3
 800ab70:	42ae      	cmp	r6, r5
 800ab72:	d125      	bne.n	800abc0 <_free_r+0x144>
 800ab74:	2301      	movs	r3, #1
 800ab76:	1080      	asrs	r0, r0, #2
 800ab78:	4083      	lsls	r3, r0
 800ab7a:	6850      	ldr	r0, [r2, #4]
 800ab7c:	4303      	orrs	r3, r0
 800ab7e:	6053      	str	r3, [r2, #4]
 800ab80:	60ce      	str	r6, [r1, #12]
 800ab82:	608d      	str	r5, [r1, #8]
 800ab84:	60b1      	str	r1, [r6, #8]
 800ab86:	60e9      	str	r1, [r5, #12]
 800ab88:	e7a7      	b.n	800aada <_free_r+0x5e>
 800ab8a:	2d14      	cmp	r5, #20
 800ab8c:	d802      	bhi.n	800ab94 <_free_r+0x118>
 800ab8e:	0028      	movs	r0, r5
 800ab90:	305b      	adds	r0, #91	; 0x5b
 800ab92:	e7e9      	b.n	800ab68 <_free_r+0xec>
 800ab94:	2d54      	cmp	r5, #84	; 0x54
 800ab96:	d802      	bhi.n	800ab9e <_free_r+0x122>
 800ab98:	0b18      	lsrs	r0, r3, #12
 800ab9a:	306e      	adds	r0, #110	; 0x6e
 800ab9c:	e7e4      	b.n	800ab68 <_free_r+0xec>
 800ab9e:	20aa      	movs	r0, #170	; 0xaa
 800aba0:	0040      	lsls	r0, r0, #1
 800aba2:	4285      	cmp	r5, r0
 800aba4:	d802      	bhi.n	800abac <_free_r+0x130>
 800aba6:	0bd8      	lsrs	r0, r3, #15
 800aba8:	3077      	adds	r0, #119	; 0x77
 800abaa:	e7dd      	b.n	800ab68 <_free_r+0xec>
 800abac:	4e0b      	ldr	r6, [pc, #44]	; (800abdc <_free_r+0x160>)
 800abae:	207e      	movs	r0, #126	; 0x7e
 800abb0:	42b5      	cmp	r5, r6
 800abb2:	d8d9      	bhi.n	800ab68 <_free_r+0xec>
 800abb4:	0c98      	lsrs	r0, r3, #18
 800abb6:	307c      	adds	r0, #124	; 0x7c
 800abb8:	e7d6      	b.n	800ab68 <_free_r+0xec>
 800abba:	68ad      	ldr	r5, [r5, #8]
 800abbc:	42ae      	cmp	r6, r5
 800abbe:	d003      	beq.n	800abc8 <_free_r+0x14c>
 800abc0:	686a      	ldr	r2, [r5, #4]
 800abc2:	43ba      	bics	r2, r7
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d8f8      	bhi.n	800abba <_free_r+0x13e>
 800abc8:	68ee      	ldr	r6, [r5, #12]
 800abca:	e7d9      	b.n	800ab80 <_free_r+0x104>
 800abcc:	20000038 	.word	0x20000038
 800abd0:	20000444 	.word	0x20000444
 800abd4:	20000cc4 	.word	0x20000cc4
 800abd8:	20000040 	.word	0x20000040
 800abdc:	00000554 	.word	0x00000554

0800abe0 <rshift>:
 800abe0:	0002      	movs	r2, r0
 800abe2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abe4:	6904      	ldr	r4, [r0, #16]
 800abe6:	114b      	asrs	r3, r1, #5
 800abe8:	b085      	sub	sp, #20
 800abea:	3214      	adds	r2, #20
 800abec:	9302      	str	r3, [sp, #8]
 800abee:	114d      	asrs	r5, r1, #5
 800abf0:	0013      	movs	r3, r2
 800abf2:	42ac      	cmp	r4, r5
 800abf4:	dd32      	ble.n	800ac5c <rshift+0x7c>
 800abf6:	261f      	movs	r6, #31
 800abf8:	000f      	movs	r7, r1
 800abfa:	114b      	asrs	r3, r1, #5
 800abfc:	009b      	lsls	r3, r3, #2
 800abfe:	00a5      	lsls	r5, r4, #2
 800ac00:	18d3      	adds	r3, r2, r3
 800ac02:	4037      	ands	r7, r6
 800ac04:	1955      	adds	r5, r2, r5
 800ac06:	9300      	str	r3, [sp, #0]
 800ac08:	9701      	str	r7, [sp, #4]
 800ac0a:	4231      	tst	r1, r6
 800ac0c:	d10d      	bne.n	800ac2a <rshift+0x4a>
 800ac0e:	0016      	movs	r6, r2
 800ac10:	0019      	movs	r1, r3
 800ac12:	428d      	cmp	r5, r1
 800ac14:	d836      	bhi.n	800ac84 <rshift+0xa4>
 800ac16:	9900      	ldr	r1, [sp, #0]
 800ac18:	2300      	movs	r3, #0
 800ac1a:	3903      	subs	r1, #3
 800ac1c:	428d      	cmp	r5, r1
 800ac1e:	d302      	bcc.n	800ac26 <rshift+0x46>
 800ac20:	9b02      	ldr	r3, [sp, #8]
 800ac22:	1ae4      	subs	r4, r4, r3
 800ac24:	00a3      	lsls	r3, r4, #2
 800ac26:	18d3      	adds	r3, r2, r3
 800ac28:	e018      	b.n	800ac5c <rshift+0x7c>
 800ac2a:	2120      	movs	r1, #32
 800ac2c:	9e01      	ldr	r6, [sp, #4]
 800ac2e:	9f01      	ldr	r7, [sp, #4]
 800ac30:	1b89      	subs	r1, r1, r6
 800ac32:	9e00      	ldr	r6, [sp, #0]
 800ac34:	9103      	str	r1, [sp, #12]
 800ac36:	ce02      	ldmia	r6!, {r1}
 800ac38:	4694      	mov	ip, r2
 800ac3a:	40f9      	lsrs	r1, r7
 800ac3c:	42b5      	cmp	r5, r6
 800ac3e:	d816      	bhi.n	800ac6e <rshift+0x8e>
 800ac40:	9e00      	ldr	r6, [sp, #0]
 800ac42:	2300      	movs	r3, #0
 800ac44:	3601      	adds	r6, #1
 800ac46:	42b5      	cmp	r5, r6
 800ac48:	d303      	bcc.n	800ac52 <rshift+0x72>
 800ac4a:	9b02      	ldr	r3, [sp, #8]
 800ac4c:	1ae3      	subs	r3, r4, r3
 800ac4e:	009b      	lsls	r3, r3, #2
 800ac50:	3b04      	subs	r3, #4
 800ac52:	18d3      	adds	r3, r2, r3
 800ac54:	6019      	str	r1, [r3, #0]
 800ac56:	2900      	cmp	r1, #0
 800ac58:	d000      	beq.n	800ac5c <rshift+0x7c>
 800ac5a:	3304      	adds	r3, #4
 800ac5c:	1a99      	subs	r1, r3, r2
 800ac5e:	1089      	asrs	r1, r1, #2
 800ac60:	6101      	str	r1, [r0, #16]
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d101      	bne.n	800ac6a <rshift+0x8a>
 800ac66:	2300      	movs	r3, #0
 800ac68:	6143      	str	r3, [r0, #20]
 800ac6a:	b005      	add	sp, #20
 800ac6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac6e:	6837      	ldr	r7, [r6, #0]
 800ac70:	9b03      	ldr	r3, [sp, #12]
 800ac72:	409f      	lsls	r7, r3
 800ac74:	430f      	orrs	r7, r1
 800ac76:	4661      	mov	r1, ip
 800ac78:	c180      	stmia	r1!, {r7}
 800ac7a:	468c      	mov	ip, r1
 800ac7c:	9b01      	ldr	r3, [sp, #4]
 800ac7e:	ce02      	ldmia	r6!, {r1}
 800ac80:	40d9      	lsrs	r1, r3
 800ac82:	e7db      	b.n	800ac3c <rshift+0x5c>
 800ac84:	c980      	ldmia	r1!, {r7}
 800ac86:	c680      	stmia	r6!, {r7}
 800ac88:	e7c3      	b.n	800ac12 <rshift+0x32>

0800ac8a <__hexdig_fun>:
 800ac8a:	0002      	movs	r2, r0
 800ac8c:	3a30      	subs	r2, #48	; 0x30
 800ac8e:	0003      	movs	r3, r0
 800ac90:	2a09      	cmp	r2, #9
 800ac92:	d802      	bhi.n	800ac9a <__hexdig_fun+0x10>
 800ac94:	3b20      	subs	r3, #32
 800ac96:	b2d8      	uxtb	r0, r3
 800ac98:	4770      	bx	lr
 800ac9a:	0002      	movs	r2, r0
 800ac9c:	3a61      	subs	r2, #97	; 0x61
 800ac9e:	2a05      	cmp	r2, #5
 800aca0:	d801      	bhi.n	800aca6 <__hexdig_fun+0x1c>
 800aca2:	3b47      	subs	r3, #71	; 0x47
 800aca4:	e7f7      	b.n	800ac96 <__hexdig_fun+0xc>
 800aca6:	001a      	movs	r2, r3
 800aca8:	3a41      	subs	r2, #65	; 0x41
 800acaa:	2000      	movs	r0, #0
 800acac:	2a05      	cmp	r2, #5
 800acae:	d8f3      	bhi.n	800ac98 <__hexdig_fun+0xe>
 800acb0:	3b27      	subs	r3, #39	; 0x27
 800acb2:	e7f0      	b.n	800ac96 <__hexdig_fun+0xc>

0800acb4 <__gethex>:
 800acb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acb6:	b089      	sub	sp, #36	; 0x24
 800acb8:	9307      	str	r3, [sp, #28]
 800acba:	2302      	movs	r3, #2
 800acbc:	9201      	str	r2, [sp, #4]
 800acbe:	680a      	ldr	r2, [r1, #0]
 800acc0:	425b      	negs	r3, r3
 800acc2:	9003      	str	r0, [sp, #12]
 800acc4:	9106      	str	r1, [sp, #24]
 800acc6:	1c96      	adds	r6, r2, #2
 800acc8:	1a9b      	subs	r3, r3, r2
 800acca:	199a      	adds	r2, r3, r6
 800accc:	9600      	str	r6, [sp, #0]
 800acce:	9205      	str	r2, [sp, #20]
 800acd0:	9a00      	ldr	r2, [sp, #0]
 800acd2:	3601      	adds	r6, #1
 800acd4:	7810      	ldrb	r0, [r2, #0]
 800acd6:	2830      	cmp	r0, #48	; 0x30
 800acd8:	d0f7      	beq.n	800acca <__gethex+0x16>
 800acda:	f7ff ffd6 	bl	800ac8a <__hexdig_fun>
 800acde:	2300      	movs	r3, #0
 800ace0:	001d      	movs	r5, r3
 800ace2:	9302      	str	r3, [sp, #8]
 800ace4:	4298      	cmp	r0, r3
 800ace6:	d11d      	bne.n	800ad24 <__gethex+0x70>
 800ace8:	2201      	movs	r2, #1
 800acea:	49a6      	ldr	r1, [pc, #664]	; (800af84 <__gethex+0x2d0>)
 800acec:	9800      	ldr	r0, [sp, #0]
 800acee:	f7ff fd6d 	bl	800a7cc <strncmp>
 800acf2:	0007      	movs	r7, r0
 800acf4:	42a8      	cmp	r0, r5
 800acf6:	d169      	bne.n	800adcc <__gethex+0x118>
 800acf8:	9b00      	ldr	r3, [sp, #0]
 800acfa:	0034      	movs	r4, r6
 800acfc:	7858      	ldrb	r0, [r3, #1]
 800acfe:	f7ff ffc4 	bl	800ac8a <__hexdig_fun>
 800ad02:	2301      	movs	r3, #1
 800ad04:	9302      	str	r3, [sp, #8]
 800ad06:	42a8      	cmp	r0, r5
 800ad08:	d02f      	beq.n	800ad6a <__gethex+0xb6>
 800ad0a:	9600      	str	r6, [sp, #0]
 800ad0c:	9b00      	ldr	r3, [sp, #0]
 800ad0e:	7818      	ldrb	r0, [r3, #0]
 800ad10:	2830      	cmp	r0, #48	; 0x30
 800ad12:	d009      	beq.n	800ad28 <__gethex+0x74>
 800ad14:	f7ff ffb9 	bl	800ac8a <__hexdig_fun>
 800ad18:	4242      	negs	r2, r0
 800ad1a:	4142      	adcs	r2, r0
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	0035      	movs	r5, r6
 800ad20:	9202      	str	r2, [sp, #8]
 800ad22:	9305      	str	r3, [sp, #20]
 800ad24:	9c00      	ldr	r4, [sp, #0]
 800ad26:	e004      	b.n	800ad32 <__gethex+0x7e>
 800ad28:	9b00      	ldr	r3, [sp, #0]
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	9300      	str	r3, [sp, #0]
 800ad2e:	e7ed      	b.n	800ad0c <__gethex+0x58>
 800ad30:	3401      	adds	r4, #1
 800ad32:	7820      	ldrb	r0, [r4, #0]
 800ad34:	f7ff ffa9 	bl	800ac8a <__hexdig_fun>
 800ad38:	1e07      	subs	r7, r0, #0
 800ad3a:	d1f9      	bne.n	800ad30 <__gethex+0x7c>
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	0020      	movs	r0, r4
 800ad40:	4990      	ldr	r1, [pc, #576]	; (800af84 <__gethex+0x2d0>)
 800ad42:	f7ff fd43 	bl	800a7cc <strncmp>
 800ad46:	2800      	cmp	r0, #0
 800ad48:	d10d      	bne.n	800ad66 <__gethex+0xb2>
 800ad4a:	2d00      	cmp	r5, #0
 800ad4c:	d106      	bne.n	800ad5c <__gethex+0xa8>
 800ad4e:	3401      	adds	r4, #1
 800ad50:	0025      	movs	r5, r4
 800ad52:	7820      	ldrb	r0, [r4, #0]
 800ad54:	f7ff ff99 	bl	800ac8a <__hexdig_fun>
 800ad58:	2800      	cmp	r0, #0
 800ad5a:	d102      	bne.n	800ad62 <__gethex+0xae>
 800ad5c:	1b2d      	subs	r5, r5, r4
 800ad5e:	00af      	lsls	r7, r5, #2
 800ad60:	e003      	b.n	800ad6a <__gethex+0xb6>
 800ad62:	3401      	adds	r4, #1
 800ad64:	e7f5      	b.n	800ad52 <__gethex+0x9e>
 800ad66:	2d00      	cmp	r5, #0
 800ad68:	d1f8      	bne.n	800ad5c <__gethex+0xa8>
 800ad6a:	2220      	movs	r2, #32
 800ad6c:	7823      	ldrb	r3, [r4, #0]
 800ad6e:	0026      	movs	r6, r4
 800ad70:	4393      	bics	r3, r2
 800ad72:	2b50      	cmp	r3, #80	; 0x50
 800ad74:	d11d      	bne.n	800adb2 <__gethex+0xfe>
 800ad76:	7863      	ldrb	r3, [r4, #1]
 800ad78:	2b2b      	cmp	r3, #43	; 0x2b
 800ad7a:	d02c      	beq.n	800add6 <__gethex+0x122>
 800ad7c:	2b2d      	cmp	r3, #45	; 0x2d
 800ad7e:	d02e      	beq.n	800adde <__gethex+0x12a>
 800ad80:	2300      	movs	r3, #0
 800ad82:	1c66      	adds	r6, r4, #1
 800ad84:	9304      	str	r3, [sp, #16]
 800ad86:	7830      	ldrb	r0, [r6, #0]
 800ad88:	f7ff ff7f 	bl	800ac8a <__hexdig_fun>
 800ad8c:	1e43      	subs	r3, r0, #1
 800ad8e:	b2db      	uxtb	r3, r3
 800ad90:	2b18      	cmp	r3, #24
 800ad92:	d82b      	bhi.n	800adec <__gethex+0x138>
 800ad94:	3810      	subs	r0, #16
 800ad96:	0005      	movs	r5, r0
 800ad98:	7870      	ldrb	r0, [r6, #1]
 800ad9a:	f7ff ff76 	bl	800ac8a <__hexdig_fun>
 800ad9e:	1e43      	subs	r3, r0, #1
 800ada0:	b2db      	uxtb	r3, r3
 800ada2:	3601      	adds	r6, #1
 800ada4:	2b18      	cmp	r3, #24
 800ada6:	d91c      	bls.n	800ade2 <__gethex+0x12e>
 800ada8:	9b04      	ldr	r3, [sp, #16]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d000      	beq.n	800adb0 <__gethex+0xfc>
 800adae:	426d      	negs	r5, r5
 800adb0:	197f      	adds	r7, r7, r5
 800adb2:	9b06      	ldr	r3, [sp, #24]
 800adb4:	601e      	str	r6, [r3, #0]
 800adb6:	9b02      	ldr	r3, [sp, #8]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d019      	beq.n	800adf0 <__gethex+0x13c>
 800adbc:	2600      	movs	r6, #0
 800adbe:	9b05      	ldr	r3, [sp, #20]
 800adc0:	42b3      	cmp	r3, r6
 800adc2:	d100      	bne.n	800adc6 <__gethex+0x112>
 800adc4:	3606      	adds	r6, #6
 800adc6:	0030      	movs	r0, r6
 800adc8:	b009      	add	sp, #36	; 0x24
 800adca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adcc:	2301      	movs	r3, #1
 800adce:	2700      	movs	r7, #0
 800add0:	9c00      	ldr	r4, [sp, #0]
 800add2:	9302      	str	r3, [sp, #8]
 800add4:	e7c9      	b.n	800ad6a <__gethex+0xb6>
 800add6:	2300      	movs	r3, #0
 800add8:	9304      	str	r3, [sp, #16]
 800adda:	1ca6      	adds	r6, r4, #2
 800addc:	e7d3      	b.n	800ad86 <__gethex+0xd2>
 800adde:	2301      	movs	r3, #1
 800ade0:	e7fa      	b.n	800add8 <__gethex+0x124>
 800ade2:	230a      	movs	r3, #10
 800ade4:	435d      	muls	r5, r3
 800ade6:	182d      	adds	r5, r5, r0
 800ade8:	3d10      	subs	r5, #16
 800adea:	e7d5      	b.n	800ad98 <__gethex+0xe4>
 800adec:	0026      	movs	r6, r4
 800adee:	e7e0      	b.n	800adb2 <__gethex+0xfe>
 800adf0:	9b00      	ldr	r3, [sp, #0]
 800adf2:	9902      	ldr	r1, [sp, #8]
 800adf4:	1ae3      	subs	r3, r4, r3
 800adf6:	3b01      	subs	r3, #1
 800adf8:	2b07      	cmp	r3, #7
 800adfa:	dc0a      	bgt.n	800ae12 <__gethex+0x15e>
 800adfc:	9803      	ldr	r0, [sp, #12]
 800adfe:	f000 fa5d 	bl	800b2bc <_Balloc>
 800ae02:	1e05      	subs	r5, r0, #0
 800ae04:	d108      	bne.n	800ae18 <__gethex+0x164>
 800ae06:	002a      	movs	r2, r5
 800ae08:	21e4      	movs	r1, #228	; 0xe4
 800ae0a:	4b5f      	ldr	r3, [pc, #380]	; (800af88 <__gethex+0x2d4>)
 800ae0c:	485f      	ldr	r0, [pc, #380]	; (800af8c <__gethex+0x2d8>)
 800ae0e:	f003 fd19 	bl	800e844 <__assert_func>
 800ae12:	3101      	adds	r1, #1
 800ae14:	105b      	asrs	r3, r3, #1
 800ae16:	e7ef      	b.n	800adf8 <__gethex+0x144>
 800ae18:	0003      	movs	r3, r0
 800ae1a:	3314      	adds	r3, #20
 800ae1c:	9302      	str	r3, [sp, #8]
 800ae1e:	9305      	str	r3, [sp, #20]
 800ae20:	2300      	movs	r3, #0
 800ae22:	001e      	movs	r6, r3
 800ae24:	9304      	str	r3, [sp, #16]
 800ae26:	9b00      	ldr	r3, [sp, #0]
 800ae28:	42a3      	cmp	r3, r4
 800ae2a:	d33f      	bcc.n	800aeac <__gethex+0x1f8>
 800ae2c:	9c05      	ldr	r4, [sp, #20]
 800ae2e:	9b02      	ldr	r3, [sp, #8]
 800ae30:	c440      	stmia	r4!, {r6}
 800ae32:	1ae4      	subs	r4, r4, r3
 800ae34:	10a4      	asrs	r4, r4, #2
 800ae36:	0030      	movs	r0, r6
 800ae38:	612c      	str	r4, [r5, #16]
 800ae3a:	f000 fb01 	bl	800b440 <__hi0bits>
 800ae3e:	9b01      	ldr	r3, [sp, #4]
 800ae40:	0164      	lsls	r4, r4, #5
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	1a26      	subs	r6, r4, r0
 800ae46:	9300      	str	r3, [sp, #0]
 800ae48:	429e      	cmp	r6, r3
 800ae4a:	dd51      	ble.n	800aef0 <__gethex+0x23c>
 800ae4c:	1af6      	subs	r6, r6, r3
 800ae4e:	0031      	movs	r1, r6
 800ae50:	0028      	movs	r0, r5
 800ae52:	f000 fe7b 	bl	800bb4c <__any_on>
 800ae56:	1e04      	subs	r4, r0, #0
 800ae58:	d016      	beq.n	800ae88 <__gethex+0x1d4>
 800ae5a:	2401      	movs	r4, #1
 800ae5c:	231f      	movs	r3, #31
 800ae5e:	0020      	movs	r0, r4
 800ae60:	1e72      	subs	r2, r6, #1
 800ae62:	4013      	ands	r3, r2
 800ae64:	4098      	lsls	r0, r3
 800ae66:	0003      	movs	r3, r0
 800ae68:	1151      	asrs	r1, r2, #5
 800ae6a:	9802      	ldr	r0, [sp, #8]
 800ae6c:	0089      	lsls	r1, r1, #2
 800ae6e:	5809      	ldr	r1, [r1, r0]
 800ae70:	4219      	tst	r1, r3
 800ae72:	d009      	beq.n	800ae88 <__gethex+0x1d4>
 800ae74:	42a2      	cmp	r2, r4
 800ae76:	dd06      	ble.n	800ae86 <__gethex+0x1d2>
 800ae78:	0028      	movs	r0, r5
 800ae7a:	1eb1      	subs	r1, r6, #2
 800ae7c:	f000 fe66 	bl	800bb4c <__any_on>
 800ae80:	3402      	adds	r4, #2
 800ae82:	2800      	cmp	r0, #0
 800ae84:	d100      	bne.n	800ae88 <__gethex+0x1d4>
 800ae86:	2402      	movs	r4, #2
 800ae88:	0031      	movs	r1, r6
 800ae8a:	0028      	movs	r0, r5
 800ae8c:	f7ff fea8 	bl	800abe0 <rshift>
 800ae90:	19bf      	adds	r7, r7, r6
 800ae92:	9b01      	ldr	r3, [sp, #4]
 800ae94:	689b      	ldr	r3, [r3, #8]
 800ae96:	42bb      	cmp	r3, r7
 800ae98:	da3a      	bge.n	800af10 <__gethex+0x25c>
 800ae9a:	0029      	movs	r1, r5
 800ae9c:	9803      	ldr	r0, [sp, #12]
 800ae9e:	f000 fa35 	bl	800b30c <_Bfree>
 800aea2:	2300      	movs	r3, #0
 800aea4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aea6:	26a3      	movs	r6, #163	; 0xa3
 800aea8:	6013      	str	r3, [r2, #0]
 800aeaa:	e78c      	b.n	800adc6 <__gethex+0x112>
 800aeac:	3c01      	subs	r4, #1
 800aeae:	7823      	ldrb	r3, [r4, #0]
 800aeb0:	2b2e      	cmp	r3, #46	; 0x2e
 800aeb2:	d012      	beq.n	800aeda <__gethex+0x226>
 800aeb4:	9b04      	ldr	r3, [sp, #16]
 800aeb6:	2b20      	cmp	r3, #32
 800aeb8:	d104      	bne.n	800aec4 <__gethex+0x210>
 800aeba:	9b05      	ldr	r3, [sp, #20]
 800aebc:	c340      	stmia	r3!, {r6}
 800aebe:	2600      	movs	r6, #0
 800aec0:	9305      	str	r3, [sp, #20]
 800aec2:	9604      	str	r6, [sp, #16]
 800aec4:	7820      	ldrb	r0, [r4, #0]
 800aec6:	f7ff fee0 	bl	800ac8a <__hexdig_fun>
 800aeca:	230f      	movs	r3, #15
 800aecc:	4018      	ands	r0, r3
 800aece:	9b04      	ldr	r3, [sp, #16]
 800aed0:	4098      	lsls	r0, r3
 800aed2:	3304      	adds	r3, #4
 800aed4:	4306      	orrs	r6, r0
 800aed6:	9304      	str	r3, [sp, #16]
 800aed8:	e7a5      	b.n	800ae26 <__gethex+0x172>
 800aeda:	9b00      	ldr	r3, [sp, #0]
 800aedc:	42a3      	cmp	r3, r4
 800aede:	d8e9      	bhi.n	800aeb4 <__gethex+0x200>
 800aee0:	2201      	movs	r2, #1
 800aee2:	0020      	movs	r0, r4
 800aee4:	4927      	ldr	r1, [pc, #156]	; (800af84 <__gethex+0x2d0>)
 800aee6:	f7ff fc71 	bl	800a7cc <strncmp>
 800aeea:	2800      	cmp	r0, #0
 800aeec:	d1e2      	bne.n	800aeb4 <__gethex+0x200>
 800aeee:	e79a      	b.n	800ae26 <__gethex+0x172>
 800aef0:	9b00      	ldr	r3, [sp, #0]
 800aef2:	2400      	movs	r4, #0
 800aef4:	429e      	cmp	r6, r3
 800aef6:	dacc      	bge.n	800ae92 <__gethex+0x1de>
 800aef8:	1b9e      	subs	r6, r3, r6
 800aefa:	0029      	movs	r1, r5
 800aefc:	0032      	movs	r2, r6
 800aefe:	9803      	ldr	r0, [sp, #12]
 800af00:	f000 fbf0 	bl	800b6e4 <__lshift>
 800af04:	0003      	movs	r3, r0
 800af06:	3314      	adds	r3, #20
 800af08:	0005      	movs	r5, r0
 800af0a:	1bbf      	subs	r7, r7, r6
 800af0c:	9302      	str	r3, [sp, #8]
 800af0e:	e7c0      	b.n	800ae92 <__gethex+0x1de>
 800af10:	9b01      	ldr	r3, [sp, #4]
 800af12:	685e      	ldr	r6, [r3, #4]
 800af14:	42be      	cmp	r6, r7
 800af16:	dd70      	ble.n	800affa <__gethex+0x346>
 800af18:	9b00      	ldr	r3, [sp, #0]
 800af1a:	1bf6      	subs	r6, r6, r7
 800af1c:	42b3      	cmp	r3, r6
 800af1e:	dc37      	bgt.n	800af90 <__gethex+0x2dc>
 800af20:	9b01      	ldr	r3, [sp, #4]
 800af22:	68db      	ldr	r3, [r3, #12]
 800af24:	2b02      	cmp	r3, #2
 800af26:	d024      	beq.n	800af72 <__gethex+0x2be>
 800af28:	2b03      	cmp	r3, #3
 800af2a:	d026      	beq.n	800af7a <__gethex+0x2c6>
 800af2c:	2b01      	cmp	r3, #1
 800af2e:	d117      	bne.n	800af60 <__gethex+0x2ac>
 800af30:	9b00      	ldr	r3, [sp, #0]
 800af32:	42b3      	cmp	r3, r6
 800af34:	d114      	bne.n	800af60 <__gethex+0x2ac>
 800af36:	2b01      	cmp	r3, #1
 800af38:	d10b      	bne.n	800af52 <__gethex+0x29e>
 800af3a:	9b01      	ldr	r3, [sp, #4]
 800af3c:	9a07      	ldr	r2, [sp, #28]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	2662      	movs	r6, #98	; 0x62
 800af42:	6013      	str	r3, [r2, #0]
 800af44:	2301      	movs	r3, #1
 800af46:	9a02      	ldr	r2, [sp, #8]
 800af48:	612b      	str	r3, [r5, #16]
 800af4a:	6013      	str	r3, [r2, #0]
 800af4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af4e:	601d      	str	r5, [r3, #0]
 800af50:	e739      	b.n	800adc6 <__gethex+0x112>
 800af52:	9900      	ldr	r1, [sp, #0]
 800af54:	0028      	movs	r0, r5
 800af56:	3901      	subs	r1, #1
 800af58:	f000 fdf8 	bl	800bb4c <__any_on>
 800af5c:	2800      	cmp	r0, #0
 800af5e:	d1ec      	bne.n	800af3a <__gethex+0x286>
 800af60:	0029      	movs	r1, r5
 800af62:	9803      	ldr	r0, [sp, #12]
 800af64:	f000 f9d2 	bl	800b30c <_Bfree>
 800af68:	2300      	movs	r3, #0
 800af6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af6c:	2650      	movs	r6, #80	; 0x50
 800af6e:	6013      	str	r3, [r2, #0]
 800af70:	e729      	b.n	800adc6 <__gethex+0x112>
 800af72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af74:	2b00      	cmp	r3, #0
 800af76:	d1f3      	bne.n	800af60 <__gethex+0x2ac>
 800af78:	e7df      	b.n	800af3a <__gethex+0x286>
 800af7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d1dc      	bne.n	800af3a <__gethex+0x286>
 800af80:	e7ee      	b.n	800af60 <__gethex+0x2ac>
 800af82:	46c0      	nop			; (mov r8, r8)
 800af84:	08012b30 	.word	0x08012b30
 800af88:	08012c91 	.word	0x08012c91
 800af8c:	08012ca2 	.word	0x08012ca2
 800af90:	1e77      	subs	r7, r6, #1
 800af92:	2c00      	cmp	r4, #0
 800af94:	d12f      	bne.n	800aff6 <__gethex+0x342>
 800af96:	2f00      	cmp	r7, #0
 800af98:	d004      	beq.n	800afa4 <__gethex+0x2f0>
 800af9a:	0039      	movs	r1, r7
 800af9c:	0028      	movs	r0, r5
 800af9e:	f000 fdd5 	bl	800bb4c <__any_on>
 800afa2:	0004      	movs	r4, r0
 800afa4:	231f      	movs	r3, #31
 800afa6:	117a      	asrs	r2, r7, #5
 800afa8:	401f      	ands	r7, r3
 800afaa:	3b1e      	subs	r3, #30
 800afac:	40bb      	lsls	r3, r7
 800afae:	9902      	ldr	r1, [sp, #8]
 800afb0:	0092      	lsls	r2, r2, #2
 800afb2:	5852      	ldr	r2, [r2, r1]
 800afb4:	421a      	tst	r2, r3
 800afb6:	d001      	beq.n	800afbc <__gethex+0x308>
 800afb8:	2302      	movs	r3, #2
 800afba:	431c      	orrs	r4, r3
 800afbc:	9b00      	ldr	r3, [sp, #0]
 800afbe:	0031      	movs	r1, r6
 800afc0:	1b9b      	subs	r3, r3, r6
 800afc2:	2602      	movs	r6, #2
 800afc4:	0028      	movs	r0, r5
 800afc6:	9300      	str	r3, [sp, #0]
 800afc8:	f7ff fe0a 	bl	800abe0 <rshift>
 800afcc:	9b01      	ldr	r3, [sp, #4]
 800afce:	685f      	ldr	r7, [r3, #4]
 800afd0:	2c00      	cmp	r4, #0
 800afd2:	d041      	beq.n	800b058 <__gethex+0x3a4>
 800afd4:	9b01      	ldr	r3, [sp, #4]
 800afd6:	68db      	ldr	r3, [r3, #12]
 800afd8:	2b02      	cmp	r3, #2
 800afda:	d010      	beq.n	800affe <__gethex+0x34a>
 800afdc:	2b03      	cmp	r3, #3
 800afde:	d012      	beq.n	800b006 <__gethex+0x352>
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	d106      	bne.n	800aff2 <__gethex+0x33e>
 800afe4:	07a2      	lsls	r2, r4, #30
 800afe6:	d504      	bpl.n	800aff2 <__gethex+0x33e>
 800afe8:	9a02      	ldr	r2, [sp, #8]
 800afea:	6812      	ldr	r2, [r2, #0]
 800afec:	4314      	orrs	r4, r2
 800afee:	421c      	tst	r4, r3
 800aff0:	d10c      	bne.n	800b00c <__gethex+0x358>
 800aff2:	2310      	movs	r3, #16
 800aff4:	e02f      	b.n	800b056 <__gethex+0x3a2>
 800aff6:	2401      	movs	r4, #1
 800aff8:	e7d4      	b.n	800afa4 <__gethex+0x2f0>
 800affa:	2601      	movs	r6, #1
 800affc:	e7e8      	b.n	800afd0 <__gethex+0x31c>
 800affe:	2301      	movs	r3, #1
 800b000:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b002:	1a9b      	subs	r3, r3, r2
 800b004:	930f      	str	r3, [sp, #60]	; 0x3c
 800b006:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d0f2      	beq.n	800aff2 <__gethex+0x33e>
 800b00c:	692b      	ldr	r3, [r5, #16]
 800b00e:	2000      	movs	r0, #0
 800b010:	9302      	str	r3, [sp, #8]
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	9304      	str	r3, [sp, #16]
 800b016:	002b      	movs	r3, r5
 800b018:	9a04      	ldr	r2, [sp, #16]
 800b01a:	3314      	adds	r3, #20
 800b01c:	1899      	adds	r1, r3, r2
 800b01e:	681a      	ldr	r2, [r3, #0]
 800b020:	1c54      	adds	r4, r2, #1
 800b022:	d01e      	beq.n	800b062 <__gethex+0x3ae>
 800b024:	3201      	adds	r2, #1
 800b026:	601a      	str	r2, [r3, #0]
 800b028:	002b      	movs	r3, r5
 800b02a:	3314      	adds	r3, #20
 800b02c:	2e02      	cmp	r6, #2
 800b02e:	d141      	bne.n	800b0b4 <__gethex+0x400>
 800b030:	9a01      	ldr	r2, [sp, #4]
 800b032:	9900      	ldr	r1, [sp, #0]
 800b034:	6812      	ldr	r2, [r2, #0]
 800b036:	3a01      	subs	r2, #1
 800b038:	428a      	cmp	r2, r1
 800b03a:	d10b      	bne.n	800b054 <__gethex+0x3a0>
 800b03c:	221f      	movs	r2, #31
 800b03e:	9800      	ldr	r0, [sp, #0]
 800b040:	1149      	asrs	r1, r1, #5
 800b042:	4002      	ands	r2, r0
 800b044:	2001      	movs	r0, #1
 800b046:	0004      	movs	r4, r0
 800b048:	4094      	lsls	r4, r2
 800b04a:	0089      	lsls	r1, r1, #2
 800b04c:	58cb      	ldr	r3, [r1, r3]
 800b04e:	4223      	tst	r3, r4
 800b050:	d000      	beq.n	800b054 <__gethex+0x3a0>
 800b052:	2601      	movs	r6, #1
 800b054:	2320      	movs	r3, #32
 800b056:	431e      	orrs	r6, r3
 800b058:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b05a:	601d      	str	r5, [r3, #0]
 800b05c:	9b07      	ldr	r3, [sp, #28]
 800b05e:	601f      	str	r7, [r3, #0]
 800b060:	e6b1      	b.n	800adc6 <__gethex+0x112>
 800b062:	c301      	stmia	r3!, {r0}
 800b064:	4299      	cmp	r1, r3
 800b066:	d8da      	bhi.n	800b01e <__gethex+0x36a>
 800b068:	68ab      	ldr	r3, [r5, #8]
 800b06a:	9a02      	ldr	r2, [sp, #8]
 800b06c:	429a      	cmp	r2, r3
 800b06e:	db18      	blt.n	800b0a2 <__gethex+0x3ee>
 800b070:	6869      	ldr	r1, [r5, #4]
 800b072:	9803      	ldr	r0, [sp, #12]
 800b074:	3101      	adds	r1, #1
 800b076:	f000 f921 	bl	800b2bc <_Balloc>
 800b07a:	1e04      	subs	r4, r0, #0
 800b07c:	d104      	bne.n	800b088 <__gethex+0x3d4>
 800b07e:	0022      	movs	r2, r4
 800b080:	2184      	movs	r1, #132	; 0x84
 800b082:	4b1c      	ldr	r3, [pc, #112]	; (800b0f4 <__gethex+0x440>)
 800b084:	481c      	ldr	r0, [pc, #112]	; (800b0f8 <__gethex+0x444>)
 800b086:	e6c2      	b.n	800ae0e <__gethex+0x15a>
 800b088:	0029      	movs	r1, r5
 800b08a:	692a      	ldr	r2, [r5, #16]
 800b08c:	310c      	adds	r1, #12
 800b08e:	3202      	adds	r2, #2
 800b090:	0092      	lsls	r2, r2, #2
 800b092:	300c      	adds	r0, #12
 800b094:	f7ff fc77 	bl	800a986 <memcpy>
 800b098:	0029      	movs	r1, r5
 800b09a:	9803      	ldr	r0, [sp, #12]
 800b09c:	f000 f936 	bl	800b30c <_Bfree>
 800b0a0:	0025      	movs	r5, r4
 800b0a2:	692b      	ldr	r3, [r5, #16]
 800b0a4:	1c5a      	adds	r2, r3, #1
 800b0a6:	612a      	str	r2, [r5, #16]
 800b0a8:	2201      	movs	r2, #1
 800b0aa:	3304      	adds	r3, #4
 800b0ac:	009b      	lsls	r3, r3, #2
 800b0ae:	18eb      	adds	r3, r5, r3
 800b0b0:	605a      	str	r2, [r3, #4]
 800b0b2:	e7b9      	b.n	800b028 <__gethex+0x374>
 800b0b4:	692a      	ldr	r2, [r5, #16]
 800b0b6:	9902      	ldr	r1, [sp, #8]
 800b0b8:	428a      	cmp	r2, r1
 800b0ba:	dd09      	ble.n	800b0d0 <__gethex+0x41c>
 800b0bc:	2101      	movs	r1, #1
 800b0be:	0028      	movs	r0, r5
 800b0c0:	f7ff fd8e 	bl	800abe0 <rshift>
 800b0c4:	9b01      	ldr	r3, [sp, #4]
 800b0c6:	3701      	adds	r7, #1
 800b0c8:	689b      	ldr	r3, [r3, #8]
 800b0ca:	42bb      	cmp	r3, r7
 800b0cc:	dac1      	bge.n	800b052 <__gethex+0x39e>
 800b0ce:	e6e4      	b.n	800ae9a <__gethex+0x1e6>
 800b0d0:	221f      	movs	r2, #31
 800b0d2:	9c00      	ldr	r4, [sp, #0]
 800b0d4:	9900      	ldr	r1, [sp, #0]
 800b0d6:	2601      	movs	r6, #1
 800b0d8:	4014      	ands	r4, r2
 800b0da:	4211      	tst	r1, r2
 800b0dc:	d0ba      	beq.n	800b054 <__gethex+0x3a0>
 800b0de:	9a04      	ldr	r2, [sp, #16]
 800b0e0:	189b      	adds	r3, r3, r2
 800b0e2:	3b04      	subs	r3, #4
 800b0e4:	6818      	ldr	r0, [r3, #0]
 800b0e6:	f000 f9ab 	bl	800b440 <__hi0bits>
 800b0ea:	2320      	movs	r3, #32
 800b0ec:	1b1b      	subs	r3, r3, r4
 800b0ee:	4298      	cmp	r0, r3
 800b0f0:	dbe4      	blt.n	800b0bc <__gethex+0x408>
 800b0f2:	e7af      	b.n	800b054 <__gethex+0x3a0>
 800b0f4:	08012c91 	.word	0x08012c91
 800b0f8:	08012ca2 	.word	0x08012ca2

0800b0fc <L_shift>:
 800b0fc:	2308      	movs	r3, #8
 800b0fe:	b570      	push	{r4, r5, r6, lr}
 800b100:	2520      	movs	r5, #32
 800b102:	1a9a      	subs	r2, r3, r2
 800b104:	0092      	lsls	r2, r2, #2
 800b106:	1aad      	subs	r5, r5, r2
 800b108:	6843      	ldr	r3, [r0, #4]
 800b10a:	6804      	ldr	r4, [r0, #0]
 800b10c:	001e      	movs	r6, r3
 800b10e:	40ae      	lsls	r6, r5
 800b110:	40d3      	lsrs	r3, r2
 800b112:	4334      	orrs	r4, r6
 800b114:	6004      	str	r4, [r0, #0]
 800b116:	6043      	str	r3, [r0, #4]
 800b118:	3004      	adds	r0, #4
 800b11a:	4288      	cmp	r0, r1
 800b11c:	d3f4      	bcc.n	800b108 <L_shift+0xc>
 800b11e:	bd70      	pop	{r4, r5, r6, pc}

0800b120 <__match>:
 800b120:	b530      	push	{r4, r5, lr}
 800b122:	6803      	ldr	r3, [r0, #0]
 800b124:	780c      	ldrb	r4, [r1, #0]
 800b126:	3301      	adds	r3, #1
 800b128:	2c00      	cmp	r4, #0
 800b12a:	d102      	bne.n	800b132 <__match+0x12>
 800b12c:	6003      	str	r3, [r0, #0]
 800b12e:	2001      	movs	r0, #1
 800b130:	bd30      	pop	{r4, r5, pc}
 800b132:	781a      	ldrb	r2, [r3, #0]
 800b134:	0015      	movs	r5, r2
 800b136:	3d41      	subs	r5, #65	; 0x41
 800b138:	2d19      	cmp	r5, #25
 800b13a:	d800      	bhi.n	800b13e <__match+0x1e>
 800b13c:	3220      	adds	r2, #32
 800b13e:	3101      	adds	r1, #1
 800b140:	42a2      	cmp	r2, r4
 800b142:	d0ef      	beq.n	800b124 <__match+0x4>
 800b144:	2000      	movs	r0, #0
 800b146:	e7f3      	b.n	800b130 <__match+0x10>

0800b148 <__hexnan>:
 800b148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b14a:	680b      	ldr	r3, [r1, #0]
 800b14c:	b08b      	sub	sp, #44	; 0x2c
 800b14e:	9201      	str	r2, [sp, #4]
 800b150:	9901      	ldr	r1, [sp, #4]
 800b152:	115a      	asrs	r2, r3, #5
 800b154:	0092      	lsls	r2, r2, #2
 800b156:	188a      	adds	r2, r1, r2
 800b158:	9202      	str	r2, [sp, #8]
 800b15a:	0019      	movs	r1, r3
 800b15c:	221f      	movs	r2, #31
 800b15e:	4011      	ands	r1, r2
 800b160:	9008      	str	r0, [sp, #32]
 800b162:	9106      	str	r1, [sp, #24]
 800b164:	4213      	tst	r3, r2
 800b166:	d002      	beq.n	800b16e <__hexnan+0x26>
 800b168:	9b02      	ldr	r3, [sp, #8]
 800b16a:	3304      	adds	r3, #4
 800b16c:	9302      	str	r3, [sp, #8]
 800b16e:	9b02      	ldr	r3, [sp, #8]
 800b170:	2500      	movs	r5, #0
 800b172:	1f1f      	subs	r7, r3, #4
 800b174:	003e      	movs	r6, r7
 800b176:	003c      	movs	r4, r7
 800b178:	9b08      	ldr	r3, [sp, #32]
 800b17a:	603d      	str	r5, [r7, #0]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	9507      	str	r5, [sp, #28]
 800b180:	9305      	str	r3, [sp, #20]
 800b182:	9503      	str	r5, [sp, #12]
 800b184:	9b05      	ldr	r3, [sp, #20]
 800b186:	3301      	adds	r3, #1
 800b188:	9309      	str	r3, [sp, #36]	; 0x24
 800b18a:	9b05      	ldr	r3, [sp, #20]
 800b18c:	785b      	ldrb	r3, [r3, #1]
 800b18e:	9304      	str	r3, [sp, #16]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d028      	beq.n	800b1e6 <__hexnan+0x9e>
 800b194:	9804      	ldr	r0, [sp, #16]
 800b196:	f7ff fd78 	bl	800ac8a <__hexdig_fun>
 800b19a:	2800      	cmp	r0, #0
 800b19c:	d154      	bne.n	800b248 <__hexnan+0x100>
 800b19e:	9b04      	ldr	r3, [sp, #16]
 800b1a0:	2b20      	cmp	r3, #32
 800b1a2:	d819      	bhi.n	800b1d8 <__hexnan+0x90>
 800b1a4:	9b03      	ldr	r3, [sp, #12]
 800b1a6:	9a07      	ldr	r2, [sp, #28]
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	dd12      	ble.n	800b1d2 <__hexnan+0x8a>
 800b1ac:	42b4      	cmp	r4, r6
 800b1ae:	d206      	bcs.n	800b1be <__hexnan+0x76>
 800b1b0:	2d07      	cmp	r5, #7
 800b1b2:	dc04      	bgt.n	800b1be <__hexnan+0x76>
 800b1b4:	002a      	movs	r2, r5
 800b1b6:	0031      	movs	r1, r6
 800b1b8:	0020      	movs	r0, r4
 800b1ba:	f7ff ff9f 	bl	800b0fc <L_shift>
 800b1be:	9b01      	ldr	r3, [sp, #4]
 800b1c0:	2508      	movs	r5, #8
 800b1c2:	429c      	cmp	r4, r3
 800b1c4:	d905      	bls.n	800b1d2 <__hexnan+0x8a>
 800b1c6:	1f26      	subs	r6, r4, #4
 800b1c8:	2500      	movs	r5, #0
 800b1ca:	0034      	movs	r4, r6
 800b1cc:	9b03      	ldr	r3, [sp, #12]
 800b1ce:	6035      	str	r5, [r6, #0]
 800b1d0:	9307      	str	r3, [sp, #28]
 800b1d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1d4:	9305      	str	r3, [sp, #20]
 800b1d6:	e7d5      	b.n	800b184 <__hexnan+0x3c>
 800b1d8:	9b04      	ldr	r3, [sp, #16]
 800b1da:	2b29      	cmp	r3, #41	; 0x29
 800b1dc:	d159      	bne.n	800b292 <__hexnan+0x14a>
 800b1de:	9b05      	ldr	r3, [sp, #20]
 800b1e0:	9a08      	ldr	r2, [sp, #32]
 800b1e2:	3302      	adds	r3, #2
 800b1e4:	6013      	str	r3, [r2, #0]
 800b1e6:	9b03      	ldr	r3, [sp, #12]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d052      	beq.n	800b292 <__hexnan+0x14a>
 800b1ec:	42b4      	cmp	r4, r6
 800b1ee:	d206      	bcs.n	800b1fe <__hexnan+0xb6>
 800b1f0:	2d07      	cmp	r5, #7
 800b1f2:	dc04      	bgt.n	800b1fe <__hexnan+0xb6>
 800b1f4:	002a      	movs	r2, r5
 800b1f6:	0031      	movs	r1, r6
 800b1f8:	0020      	movs	r0, r4
 800b1fa:	f7ff ff7f 	bl	800b0fc <L_shift>
 800b1fe:	9b01      	ldr	r3, [sp, #4]
 800b200:	429c      	cmp	r4, r3
 800b202:	d935      	bls.n	800b270 <__hexnan+0x128>
 800b204:	001a      	movs	r2, r3
 800b206:	0023      	movs	r3, r4
 800b208:	cb02      	ldmia	r3!, {r1}
 800b20a:	c202      	stmia	r2!, {r1}
 800b20c:	429f      	cmp	r7, r3
 800b20e:	d2fb      	bcs.n	800b208 <__hexnan+0xc0>
 800b210:	9b02      	ldr	r3, [sp, #8]
 800b212:	1c62      	adds	r2, r4, #1
 800b214:	1ed9      	subs	r1, r3, #3
 800b216:	2304      	movs	r3, #4
 800b218:	4291      	cmp	r1, r2
 800b21a:	d305      	bcc.n	800b228 <__hexnan+0xe0>
 800b21c:	9b02      	ldr	r3, [sp, #8]
 800b21e:	3b04      	subs	r3, #4
 800b220:	1b1b      	subs	r3, r3, r4
 800b222:	089b      	lsrs	r3, r3, #2
 800b224:	3301      	adds	r3, #1
 800b226:	009b      	lsls	r3, r3, #2
 800b228:	9a01      	ldr	r2, [sp, #4]
 800b22a:	18d3      	adds	r3, r2, r3
 800b22c:	2200      	movs	r2, #0
 800b22e:	c304      	stmia	r3!, {r2}
 800b230:	429f      	cmp	r7, r3
 800b232:	d2fc      	bcs.n	800b22e <__hexnan+0xe6>
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d104      	bne.n	800b244 <__hexnan+0xfc>
 800b23a:	9b01      	ldr	r3, [sp, #4]
 800b23c:	429f      	cmp	r7, r3
 800b23e:	d126      	bne.n	800b28e <__hexnan+0x146>
 800b240:	2301      	movs	r3, #1
 800b242:	603b      	str	r3, [r7, #0]
 800b244:	2005      	movs	r0, #5
 800b246:	e025      	b.n	800b294 <__hexnan+0x14c>
 800b248:	9b03      	ldr	r3, [sp, #12]
 800b24a:	3501      	adds	r5, #1
 800b24c:	3301      	adds	r3, #1
 800b24e:	9303      	str	r3, [sp, #12]
 800b250:	2d08      	cmp	r5, #8
 800b252:	dd06      	ble.n	800b262 <__hexnan+0x11a>
 800b254:	9b01      	ldr	r3, [sp, #4]
 800b256:	429c      	cmp	r4, r3
 800b258:	d9bb      	bls.n	800b1d2 <__hexnan+0x8a>
 800b25a:	2300      	movs	r3, #0
 800b25c:	2501      	movs	r5, #1
 800b25e:	3c04      	subs	r4, #4
 800b260:	6023      	str	r3, [r4, #0]
 800b262:	220f      	movs	r2, #15
 800b264:	6823      	ldr	r3, [r4, #0]
 800b266:	4010      	ands	r0, r2
 800b268:	011b      	lsls	r3, r3, #4
 800b26a:	4303      	orrs	r3, r0
 800b26c:	6023      	str	r3, [r4, #0]
 800b26e:	e7b0      	b.n	800b1d2 <__hexnan+0x8a>
 800b270:	9b06      	ldr	r3, [sp, #24]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d0de      	beq.n	800b234 <__hexnan+0xec>
 800b276:	2320      	movs	r3, #32
 800b278:	9a06      	ldr	r2, [sp, #24]
 800b27a:	9902      	ldr	r1, [sp, #8]
 800b27c:	1a9b      	subs	r3, r3, r2
 800b27e:	2201      	movs	r2, #1
 800b280:	4252      	negs	r2, r2
 800b282:	40da      	lsrs	r2, r3
 800b284:	3904      	subs	r1, #4
 800b286:	680b      	ldr	r3, [r1, #0]
 800b288:	4013      	ands	r3, r2
 800b28a:	600b      	str	r3, [r1, #0]
 800b28c:	e7d2      	b.n	800b234 <__hexnan+0xec>
 800b28e:	3f04      	subs	r7, #4
 800b290:	e7d0      	b.n	800b234 <__hexnan+0xec>
 800b292:	2004      	movs	r0, #4
 800b294:	b00b      	add	sp, #44	; 0x2c
 800b296:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b298 <__ascii_mbtowc>:
 800b298:	b082      	sub	sp, #8
 800b29a:	2900      	cmp	r1, #0
 800b29c:	d100      	bne.n	800b2a0 <__ascii_mbtowc+0x8>
 800b29e:	a901      	add	r1, sp, #4
 800b2a0:	1e10      	subs	r0, r2, #0
 800b2a2:	d006      	beq.n	800b2b2 <__ascii_mbtowc+0x1a>
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d006      	beq.n	800b2b6 <__ascii_mbtowc+0x1e>
 800b2a8:	7813      	ldrb	r3, [r2, #0]
 800b2aa:	600b      	str	r3, [r1, #0]
 800b2ac:	7810      	ldrb	r0, [r2, #0]
 800b2ae:	1e43      	subs	r3, r0, #1
 800b2b0:	4198      	sbcs	r0, r3
 800b2b2:	b002      	add	sp, #8
 800b2b4:	4770      	bx	lr
 800b2b6:	2002      	movs	r0, #2
 800b2b8:	4240      	negs	r0, r0
 800b2ba:	e7fa      	b.n	800b2b2 <__ascii_mbtowc+0x1a>

0800b2bc <_Balloc>:
 800b2bc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b2be:	b570      	push	{r4, r5, r6, lr}
 800b2c0:	0006      	movs	r6, r0
 800b2c2:	000c      	movs	r4, r1
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d012      	beq.n	800b2ee <_Balloc+0x32>
 800b2c8:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800b2ca:	00a2      	lsls	r2, r4, #2
 800b2cc:	189b      	adds	r3, r3, r2
 800b2ce:	6818      	ldr	r0, [r3, #0]
 800b2d0:	2800      	cmp	r0, #0
 800b2d2:	d115      	bne.n	800b300 <_Balloc+0x44>
 800b2d4:	2101      	movs	r1, #1
 800b2d6:	000d      	movs	r5, r1
 800b2d8:	40a5      	lsls	r5, r4
 800b2da:	1d6a      	adds	r2, r5, #5
 800b2dc:	0030      	movs	r0, r6
 800b2de:	0092      	lsls	r2, r2, #2
 800b2e0:	f003 face 	bl	800e880 <_calloc_r>
 800b2e4:	2800      	cmp	r0, #0
 800b2e6:	d009      	beq.n	800b2fc <_Balloc+0x40>
 800b2e8:	6044      	str	r4, [r0, #4]
 800b2ea:	6085      	str	r5, [r0, #8]
 800b2ec:	e00a      	b.n	800b304 <_Balloc+0x48>
 800b2ee:	2221      	movs	r2, #33	; 0x21
 800b2f0:	2104      	movs	r1, #4
 800b2f2:	f003 fac5 	bl	800e880 <_calloc_r>
 800b2f6:	6470      	str	r0, [r6, #68]	; 0x44
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	d1e5      	bne.n	800b2c8 <_Balloc+0xc>
 800b2fc:	2000      	movs	r0, #0
 800b2fe:	bd70      	pop	{r4, r5, r6, pc}
 800b300:	6802      	ldr	r2, [r0, #0]
 800b302:	601a      	str	r2, [r3, #0]
 800b304:	2300      	movs	r3, #0
 800b306:	6103      	str	r3, [r0, #16]
 800b308:	60c3      	str	r3, [r0, #12]
 800b30a:	e7f8      	b.n	800b2fe <_Balloc+0x42>

0800b30c <_Bfree>:
 800b30c:	2900      	cmp	r1, #0
 800b30e:	d006      	beq.n	800b31e <_Bfree+0x12>
 800b310:	684a      	ldr	r2, [r1, #4]
 800b312:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b314:	0092      	lsls	r2, r2, #2
 800b316:	189b      	adds	r3, r3, r2
 800b318:	681a      	ldr	r2, [r3, #0]
 800b31a:	600a      	str	r2, [r1, #0]
 800b31c:	6019      	str	r1, [r3, #0]
 800b31e:	4770      	bx	lr

0800b320 <__multadd>:
 800b320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b322:	000e      	movs	r6, r1
 800b324:	9001      	str	r0, [sp, #4]
 800b326:	000c      	movs	r4, r1
 800b328:	001d      	movs	r5, r3
 800b32a:	2000      	movs	r0, #0
 800b32c:	690f      	ldr	r7, [r1, #16]
 800b32e:	3614      	adds	r6, #20
 800b330:	6833      	ldr	r3, [r6, #0]
 800b332:	3001      	adds	r0, #1
 800b334:	b299      	uxth	r1, r3
 800b336:	4351      	muls	r1, r2
 800b338:	0c1b      	lsrs	r3, r3, #16
 800b33a:	4353      	muls	r3, r2
 800b33c:	1949      	adds	r1, r1, r5
 800b33e:	0c0d      	lsrs	r5, r1, #16
 800b340:	195b      	adds	r3, r3, r5
 800b342:	0c1d      	lsrs	r5, r3, #16
 800b344:	b289      	uxth	r1, r1
 800b346:	041b      	lsls	r3, r3, #16
 800b348:	185b      	adds	r3, r3, r1
 800b34a:	c608      	stmia	r6!, {r3}
 800b34c:	4287      	cmp	r7, r0
 800b34e:	dcef      	bgt.n	800b330 <__multadd+0x10>
 800b350:	2d00      	cmp	r5, #0
 800b352:	d022      	beq.n	800b39a <__multadd+0x7a>
 800b354:	68a3      	ldr	r3, [r4, #8]
 800b356:	42bb      	cmp	r3, r7
 800b358:	dc19      	bgt.n	800b38e <__multadd+0x6e>
 800b35a:	6861      	ldr	r1, [r4, #4]
 800b35c:	9801      	ldr	r0, [sp, #4]
 800b35e:	3101      	adds	r1, #1
 800b360:	f7ff ffac 	bl	800b2bc <_Balloc>
 800b364:	1e06      	subs	r6, r0, #0
 800b366:	d105      	bne.n	800b374 <__multadd+0x54>
 800b368:	0032      	movs	r2, r6
 800b36a:	21ba      	movs	r1, #186	; 0xba
 800b36c:	4b0c      	ldr	r3, [pc, #48]	; (800b3a0 <__multadd+0x80>)
 800b36e:	480d      	ldr	r0, [pc, #52]	; (800b3a4 <__multadd+0x84>)
 800b370:	f003 fa68 	bl	800e844 <__assert_func>
 800b374:	0021      	movs	r1, r4
 800b376:	6922      	ldr	r2, [r4, #16]
 800b378:	310c      	adds	r1, #12
 800b37a:	3202      	adds	r2, #2
 800b37c:	0092      	lsls	r2, r2, #2
 800b37e:	300c      	adds	r0, #12
 800b380:	f7ff fb01 	bl	800a986 <memcpy>
 800b384:	0021      	movs	r1, r4
 800b386:	9801      	ldr	r0, [sp, #4]
 800b388:	f7ff ffc0 	bl	800b30c <_Bfree>
 800b38c:	0034      	movs	r4, r6
 800b38e:	1d3b      	adds	r3, r7, #4
 800b390:	009b      	lsls	r3, r3, #2
 800b392:	18e3      	adds	r3, r4, r3
 800b394:	605d      	str	r5, [r3, #4]
 800b396:	1c7b      	adds	r3, r7, #1
 800b398:	6123      	str	r3, [r4, #16]
 800b39a:	0020      	movs	r0, r4
 800b39c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b39e:	46c0      	nop			; (mov r8, r8)
 800b3a0:	08012c91 	.word	0x08012c91
 800b3a4:	08012d02 	.word	0x08012d02

0800b3a8 <__s2b>:
 800b3a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b3aa:	0006      	movs	r6, r0
 800b3ac:	0018      	movs	r0, r3
 800b3ae:	000c      	movs	r4, r1
 800b3b0:	3008      	adds	r0, #8
 800b3b2:	2109      	movs	r1, #9
 800b3b4:	9301      	str	r3, [sp, #4]
 800b3b6:	0015      	movs	r5, r2
 800b3b8:	f7f4 ff4a 	bl	8000250 <__divsi3>
 800b3bc:	2301      	movs	r3, #1
 800b3be:	2100      	movs	r1, #0
 800b3c0:	4283      	cmp	r3, r0
 800b3c2:	db0a      	blt.n	800b3da <__s2b+0x32>
 800b3c4:	0030      	movs	r0, r6
 800b3c6:	f7ff ff79 	bl	800b2bc <_Balloc>
 800b3ca:	1e01      	subs	r1, r0, #0
 800b3cc:	d108      	bne.n	800b3e0 <__s2b+0x38>
 800b3ce:	000a      	movs	r2, r1
 800b3d0:	4b19      	ldr	r3, [pc, #100]	; (800b438 <__s2b+0x90>)
 800b3d2:	481a      	ldr	r0, [pc, #104]	; (800b43c <__s2b+0x94>)
 800b3d4:	31d3      	adds	r1, #211	; 0xd3
 800b3d6:	f003 fa35 	bl	800e844 <__assert_func>
 800b3da:	005b      	lsls	r3, r3, #1
 800b3dc:	3101      	adds	r1, #1
 800b3de:	e7ef      	b.n	800b3c0 <__s2b+0x18>
 800b3e0:	9b08      	ldr	r3, [sp, #32]
 800b3e2:	6143      	str	r3, [r0, #20]
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	6103      	str	r3, [r0, #16]
 800b3e8:	2d09      	cmp	r5, #9
 800b3ea:	dd18      	ble.n	800b41e <__s2b+0x76>
 800b3ec:	0023      	movs	r3, r4
 800b3ee:	3309      	adds	r3, #9
 800b3f0:	001f      	movs	r7, r3
 800b3f2:	9300      	str	r3, [sp, #0]
 800b3f4:	1964      	adds	r4, r4, r5
 800b3f6:	783b      	ldrb	r3, [r7, #0]
 800b3f8:	220a      	movs	r2, #10
 800b3fa:	0030      	movs	r0, r6
 800b3fc:	3b30      	subs	r3, #48	; 0x30
 800b3fe:	f7ff ff8f 	bl	800b320 <__multadd>
 800b402:	3701      	adds	r7, #1
 800b404:	0001      	movs	r1, r0
 800b406:	42a7      	cmp	r7, r4
 800b408:	d1f5      	bne.n	800b3f6 <__s2b+0x4e>
 800b40a:	002c      	movs	r4, r5
 800b40c:	9b00      	ldr	r3, [sp, #0]
 800b40e:	3c08      	subs	r4, #8
 800b410:	191c      	adds	r4, r3, r4
 800b412:	002f      	movs	r7, r5
 800b414:	9b01      	ldr	r3, [sp, #4]
 800b416:	429f      	cmp	r7, r3
 800b418:	db04      	blt.n	800b424 <__s2b+0x7c>
 800b41a:	0008      	movs	r0, r1
 800b41c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b41e:	2509      	movs	r5, #9
 800b420:	340a      	adds	r4, #10
 800b422:	e7f6      	b.n	800b412 <__s2b+0x6a>
 800b424:	1b63      	subs	r3, r4, r5
 800b426:	5ddb      	ldrb	r3, [r3, r7]
 800b428:	220a      	movs	r2, #10
 800b42a:	0030      	movs	r0, r6
 800b42c:	3b30      	subs	r3, #48	; 0x30
 800b42e:	f7ff ff77 	bl	800b320 <__multadd>
 800b432:	3701      	adds	r7, #1
 800b434:	0001      	movs	r1, r0
 800b436:	e7ed      	b.n	800b414 <__s2b+0x6c>
 800b438:	08012c91 	.word	0x08012c91
 800b43c:	08012d02 	.word	0x08012d02

0800b440 <__hi0bits>:
 800b440:	0003      	movs	r3, r0
 800b442:	0c02      	lsrs	r2, r0, #16
 800b444:	2000      	movs	r0, #0
 800b446:	4282      	cmp	r2, r0
 800b448:	d101      	bne.n	800b44e <__hi0bits+0xe>
 800b44a:	041b      	lsls	r3, r3, #16
 800b44c:	3010      	adds	r0, #16
 800b44e:	0e1a      	lsrs	r2, r3, #24
 800b450:	d101      	bne.n	800b456 <__hi0bits+0x16>
 800b452:	3008      	adds	r0, #8
 800b454:	021b      	lsls	r3, r3, #8
 800b456:	0f1a      	lsrs	r2, r3, #28
 800b458:	d101      	bne.n	800b45e <__hi0bits+0x1e>
 800b45a:	3004      	adds	r0, #4
 800b45c:	011b      	lsls	r3, r3, #4
 800b45e:	0f9a      	lsrs	r2, r3, #30
 800b460:	d101      	bne.n	800b466 <__hi0bits+0x26>
 800b462:	3002      	adds	r0, #2
 800b464:	009b      	lsls	r3, r3, #2
 800b466:	2b00      	cmp	r3, #0
 800b468:	db03      	blt.n	800b472 <__hi0bits+0x32>
 800b46a:	3001      	adds	r0, #1
 800b46c:	005b      	lsls	r3, r3, #1
 800b46e:	d400      	bmi.n	800b472 <__hi0bits+0x32>
 800b470:	2020      	movs	r0, #32
 800b472:	4770      	bx	lr

0800b474 <__lo0bits>:
 800b474:	6803      	ldr	r3, [r0, #0]
 800b476:	0001      	movs	r1, r0
 800b478:	2207      	movs	r2, #7
 800b47a:	0018      	movs	r0, r3
 800b47c:	4010      	ands	r0, r2
 800b47e:	4213      	tst	r3, r2
 800b480:	d00d      	beq.n	800b49e <__lo0bits+0x2a>
 800b482:	3a06      	subs	r2, #6
 800b484:	2000      	movs	r0, #0
 800b486:	4213      	tst	r3, r2
 800b488:	d105      	bne.n	800b496 <__lo0bits+0x22>
 800b48a:	3002      	adds	r0, #2
 800b48c:	4203      	tst	r3, r0
 800b48e:	d003      	beq.n	800b498 <__lo0bits+0x24>
 800b490:	40d3      	lsrs	r3, r2
 800b492:	0010      	movs	r0, r2
 800b494:	600b      	str	r3, [r1, #0]
 800b496:	4770      	bx	lr
 800b498:	089b      	lsrs	r3, r3, #2
 800b49a:	600b      	str	r3, [r1, #0]
 800b49c:	e7fb      	b.n	800b496 <__lo0bits+0x22>
 800b49e:	b29a      	uxth	r2, r3
 800b4a0:	2a00      	cmp	r2, #0
 800b4a2:	d101      	bne.n	800b4a8 <__lo0bits+0x34>
 800b4a4:	2010      	movs	r0, #16
 800b4a6:	0c1b      	lsrs	r3, r3, #16
 800b4a8:	b2da      	uxtb	r2, r3
 800b4aa:	2a00      	cmp	r2, #0
 800b4ac:	d101      	bne.n	800b4b2 <__lo0bits+0x3e>
 800b4ae:	3008      	adds	r0, #8
 800b4b0:	0a1b      	lsrs	r3, r3, #8
 800b4b2:	071a      	lsls	r2, r3, #28
 800b4b4:	d101      	bne.n	800b4ba <__lo0bits+0x46>
 800b4b6:	3004      	adds	r0, #4
 800b4b8:	091b      	lsrs	r3, r3, #4
 800b4ba:	079a      	lsls	r2, r3, #30
 800b4bc:	d101      	bne.n	800b4c2 <__lo0bits+0x4e>
 800b4be:	3002      	adds	r0, #2
 800b4c0:	089b      	lsrs	r3, r3, #2
 800b4c2:	07da      	lsls	r2, r3, #31
 800b4c4:	d4e9      	bmi.n	800b49a <__lo0bits+0x26>
 800b4c6:	3001      	adds	r0, #1
 800b4c8:	085b      	lsrs	r3, r3, #1
 800b4ca:	d1e6      	bne.n	800b49a <__lo0bits+0x26>
 800b4cc:	2020      	movs	r0, #32
 800b4ce:	e7e2      	b.n	800b496 <__lo0bits+0x22>

0800b4d0 <__i2b>:
 800b4d0:	b510      	push	{r4, lr}
 800b4d2:	000c      	movs	r4, r1
 800b4d4:	2101      	movs	r1, #1
 800b4d6:	f7ff fef1 	bl	800b2bc <_Balloc>
 800b4da:	2800      	cmp	r0, #0
 800b4dc:	d107      	bne.n	800b4ee <__i2b+0x1e>
 800b4de:	2146      	movs	r1, #70	; 0x46
 800b4e0:	4c05      	ldr	r4, [pc, #20]	; (800b4f8 <__i2b+0x28>)
 800b4e2:	0002      	movs	r2, r0
 800b4e4:	4b05      	ldr	r3, [pc, #20]	; (800b4fc <__i2b+0x2c>)
 800b4e6:	0020      	movs	r0, r4
 800b4e8:	31ff      	adds	r1, #255	; 0xff
 800b4ea:	f003 f9ab 	bl	800e844 <__assert_func>
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	6144      	str	r4, [r0, #20]
 800b4f2:	6103      	str	r3, [r0, #16]
 800b4f4:	bd10      	pop	{r4, pc}
 800b4f6:	46c0      	nop			; (mov r8, r8)
 800b4f8:	08012d02 	.word	0x08012d02
 800b4fc:	08012c91 	.word	0x08012c91

0800b500 <__multiply>:
 800b500:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b502:	0015      	movs	r5, r2
 800b504:	690a      	ldr	r2, [r1, #16]
 800b506:	692b      	ldr	r3, [r5, #16]
 800b508:	000c      	movs	r4, r1
 800b50a:	b08b      	sub	sp, #44	; 0x2c
 800b50c:	429a      	cmp	r2, r3
 800b50e:	da01      	bge.n	800b514 <__multiply+0x14>
 800b510:	002c      	movs	r4, r5
 800b512:	000d      	movs	r5, r1
 800b514:	6927      	ldr	r7, [r4, #16]
 800b516:	692e      	ldr	r6, [r5, #16]
 800b518:	6861      	ldr	r1, [r4, #4]
 800b51a:	19bb      	adds	r3, r7, r6
 800b51c:	9303      	str	r3, [sp, #12]
 800b51e:	68a3      	ldr	r3, [r4, #8]
 800b520:	19ba      	adds	r2, r7, r6
 800b522:	4293      	cmp	r3, r2
 800b524:	da00      	bge.n	800b528 <__multiply+0x28>
 800b526:	3101      	adds	r1, #1
 800b528:	f7ff fec8 	bl	800b2bc <_Balloc>
 800b52c:	9002      	str	r0, [sp, #8]
 800b52e:	2800      	cmp	r0, #0
 800b530:	d106      	bne.n	800b540 <__multiply+0x40>
 800b532:	21b1      	movs	r1, #177	; 0xb1
 800b534:	4b48      	ldr	r3, [pc, #288]	; (800b658 <__multiply+0x158>)
 800b536:	4849      	ldr	r0, [pc, #292]	; (800b65c <__multiply+0x15c>)
 800b538:	9a02      	ldr	r2, [sp, #8]
 800b53a:	0049      	lsls	r1, r1, #1
 800b53c:	f003 f982 	bl	800e844 <__assert_func>
 800b540:	9b02      	ldr	r3, [sp, #8]
 800b542:	2200      	movs	r2, #0
 800b544:	3314      	adds	r3, #20
 800b546:	469c      	mov	ip, r3
 800b548:	19bb      	adds	r3, r7, r6
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	4463      	add	r3, ip
 800b54e:	9304      	str	r3, [sp, #16]
 800b550:	4663      	mov	r3, ip
 800b552:	9904      	ldr	r1, [sp, #16]
 800b554:	428b      	cmp	r3, r1
 800b556:	d32a      	bcc.n	800b5ae <__multiply+0xae>
 800b558:	0023      	movs	r3, r4
 800b55a:	00bf      	lsls	r7, r7, #2
 800b55c:	3314      	adds	r3, #20
 800b55e:	3514      	adds	r5, #20
 800b560:	9308      	str	r3, [sp, #32]
 800b562:	00b6      	lsls	r6, r6, #2
 800b564:	19db      	adds	r3, r3, r7
 800b566:	9305      	str	r3, [sp, #20]
 800b568:	19ab      	adds	r3, r5, r6
 800b56a:	9309      	str	r3, [sp, #36]	; 0x24
 800b56c:	2304      	movs	r3, #4
 800b56e:	9306      	str	r3, [sp, #24]
 800b570:	0023      	movs	r3, r4
 800b572:	9a05      	ldr	r2, [sp, #20]
 800b574:	3315      	adds	r3, #21
 800b576:	9501      	str	r5, [sp, #4]
 800b578:	429a      	cmp	r2, r3
 800b57a:	d305      	bcc.n	800b588 <__multiply+0x88>
 800b57c:	1b13      	subs	r3, r2, r4
 800b57e:	3b15      	subs	r3, #21
 800b580:	089b      	lsrs	r3, r3, #2
 800b582:	3301      	adds	r3, #1
 800b584:	009b      	lsls	r3, r3, #2
 800b586:	9306      	str	r3, [sp, #24]
 800b588:	9b01      	ldr	r3, [sp, #4]
 800b58a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d310      	bcc.n	800b5b2 <__multiply+0xb2>
 800b590:	9b03      	ldr	r3, [sp, #12]
 800b592:	2b00      	cmp	r3, #0
 800b594:	dd05      	ble.n	800b5a2 <__multiply+0xa2>
 800b596:	9b04      	ldr	r3, [sp, #16]
 800b598:	3b04      	subs	r3, #4
 800b59a:	9304      	str	r3, [sp, #16]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d056      	beq.n	800b650 <__multiply+0x150>
 800b5a2:	9b02      	ldr	r3, [sp, #8]
 800b5a4:	9a03      	ldr	r2, [sp, #12]
 800b5a6:	0018      	movs	r0, r3
 800b5a8:	611a      	str	r2, [r3, #16]
 800b5aa:	b00b      	add	sp, #44	; 0x2c
 800b5ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5ae:	c304      	stmia	r3!, {r2}
 800b5b0:	e7cf      	b.n	800b552 <__multiply+0x52>
 800b5b2:	9b01      	ldr	r3, [sp, #4]
 800b5b4:	6818      	ldr	r0, [r3, #0]
 800b5b6:	b280      	uxth	r0, r0
 800b5b8:	2800      	cmp	r0, #0
 800b5ba:	d01e      	beq.n	800b5fa <__multiply+0xfa>
 800b5bc:	4667      	mov	r7, ip
 800b5be:	2500      	movs	r5, #0
 800b5c0:	9e08      	ldr	r6, [sp, #32]
 800b5c2:	ce02      	ldmia	r6!, {r1}
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	9307      	str	r3, [sp, #28]
 800b5c8:	b28b      	uxth	r3, r1
 800b5ca:	4343      	muls	r3, r0
 800b5cc:	001a      	movs	r2, r3
 800b5ce:	466b      	mov	r3, sp
 800b5d0:	8b9b      	ldrh	r3, [r3, #28]
 800b5d2:	18d3      	adds	r3, r2, r3
 800b5d4:	195b      	adds	r3, r3, r5
 800b5d6:	0c0d      	lsrs	r5, r1, #16
 800b5d8:	4345      	muls	r5, r0
 800b5da:	9a07      	ldr	r2, [sp, #28]
 800b5dc:	0c11      	lsrs	r1, r2, #16
 800b5de:	1869      	adds	r1, r5, r1
 800b5e0:	0c1a      	lsrs	r2, r3, #16
 800b5e2:	188a      	adds	r2, r1, r2
 800b5e4:	b29b      	uxth	r3, r3
 800b5e6:	0c15      	lsrs	r5, r2, #16
 800b5e8:	0412      	lsls	r2, r2, #16
 800b5ea:	431a      	orrs	r2, r3
 800b5ec:	9b05      	ldr	r3, [sp, #20]
 800b5ee:	c704      	stmia	r7!, {r2}
 800b5f0:	42b3      	cmp	r3, r6
 800b5f2:	d8e6      	bhi.n	800b5c2 <__multiply+0xc2>
 800b5f4:	4663      	mov	r3, ip
 800b5f6:	9a06      	ldr	r2, [sp, #24]
 800b5f8:	509d      	str	r5, [r3, r2]
 800b5fa:	9b01      	ldr	r3, [sp, #4]
 800b5fc:	6818      	ldr	r0, [r3, #0]
 800b5fe:	0c00      	lsrs	r0, r0, #16
 800b600:	d020      	beq.n	800b644 <__multiply+0x144>
 800b602:	4663      	mov	r3, ip
 800b604:	0025      	movs	r5, r4
 800b606:	4661      	mov	r1, ip
 800b608:	2700      	movs	r7, #0
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	3514      	adds	r5, #20
 800b60e:	682a      	ldr	r2, [r5, #0]
 800b610:	680e      	ldr	r6, [r1, #0]
 800b612:	b292      	uxth	r2, r2
 800b614:	4342      	muls	r2, r0
 800b616:	0c36      	lsrs	r6, r6, #16
 800b618:	1992      	adds	r2, r2, r6
 800b61a:	19d2      	adds	r2, r2, r7
 800b61c:	0416      	lsls	r6, r2, #16
 800b61e:	b29b      	uxth	r3, r3
 800b620:	431e      	orrs	r6, r3
 800b622:	600e      	str	r6, [r1, #0]
 800b624:	cd40      	ldmia	r5!, {r6}
 800b626:	684b      	ldr	r3, [r1, #4]
 800b628:	0c36      	lsrs	r6, r6, #16
 800b62a:	4346      	muls	r6, r0
 800b62c:	b29b      	uxth	r3, r3
 800b62e:	0c12      	lsrs	r2, r2, #16
 800b630:	18f3      	adds	r3, r6, r3
 800b632:	189b      	adds	r3, r3, r2
 800b634:	9a05      	ldr	r2, [sp, #20]
 800b636:	0c1f      	lsrs	r7, r3, #16
 800b638:	3104      	adds	r1, #4
 800b63a:	42aa      	cmp	r2, r5
 800b63c:	d8e7      	bhi.n	800b60e <__multiply+0x10e>
 800b63e:	4662      	mov	r2, ip
 800b640:	9906      	ldr	r1, [sp, #24]
 800b642:	5053      	str	r3, [r2, r1]
 800b644:	9b01      	ldr	r3, [sp, #4]
 800b646:	3304      	adds	r3, #4
 800b648:	9301      	str	r3, [sp, #4]
 800b64a:	2304      	movs	r3, #4
 800b64c:	449c      	add	ip, r3
 800b64e:	e79b      	b.n	800b588 <__multiply+0x88>
 800b650:	9b03      	ldr	r3, [sp, #12]
 800b652:	3b01      	subs	r3, #1
 800b654:	9303      	str	r3, [sp, #12]
 800b656:	e79b      	b.n	800b590 <__multiply+0x90>
 800b658:	08012c91 	.word	0x08012c91
 800b65c:	08012d02 	.word	0x08012d02

0800b660 <__pow5mult>:
 800b660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b662:	2303      	movs	r3, #3
 800b664:	0015      	movs	r5, r2
 800b666:	0007      	movs	r7, r0
 800b668:	000e      	movs	r6, r1
 800b66a:	401a      	ands	r2, r3
 800b66c:	421d      	tst	r5, r3
 800b66e:	d008      	beq.n	800b682 <__pow5mult+0x22>
 800b670:	491a      	ldr	r1, [pc, #104]	; (800b6dc <__pow5mult+0x7c>)
 800b672:	3a01      	subs	r2, #1
 800b674:	0092      	lsls	r2, r2, #2
 800b676:	5852      	ldr	r2, [r2, r1]
 800b678:	2300      	movs	r3, #0
 800b67a:	0031      	movs	r1, r6
 800b67c:	f7ff fe50 	bl	800b320 <__multadd>
 800b680:	0006      	movs	r6, r0
 800b682:	10ad      	asrs	r5, r5, #2
 800b684:	d027      	beq.n	800b6d6 <__pow5mult+0x76>
 800b686:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800b688:	2c00      	cmp	r4, #0
 800b68a:	d107      	bne.n	800b69c <__pow5mult+0x3c>
 800b68c:	0038      	movs	r0, r7
 800b68e:	4914      	ldr	r1, [pc, #80]	; (800b6e0 <__pow5mult+0x80>)
 800b690:	f7ff ff1e 	bl	800b4d0 <__i2b>
 800b694:	2300      	movs	r3, #0
 800b696:	0004      	movs	r4, r0
 800b698:	6438      	str	r0, [r7, #64]	; 0x40
 800b69a:	6003      	str	r3, [r0, #0]
 800b69c:	2301      	movs	r3, #1
 800b69e:	421d      	tst	r5, r3
 800b6a0:	d00a      	beq.n	800b6b8 <__pow5mult+0x58>
 800b6a2:	0031      	movs	r1, r6
 800b6a4:	0022      	movs	r2, r4
 800b6a6:	0038      	movs	r0, r7
 800b6a8:	f7ff ff2a 	bl	800b500 <__multiply>
 800b6ac:	0031      	movs	r1, r6
 800b6ae:	9001      	str	r0, [sp, #4]
 800b6b0:	0038      	movs	r0, r7
 800b6b2:	f7ff fe2b 	bl	800b30c <_Bfree>
 800b6b6:	9e01      	ldr	r6, [sp, #4]
 800b6b8:	106d      	asrs	r5, r5, #1
 800b6ba:	d00c      	beq.n	800b6d6 <__pow5mult+0x76>
 800b6bc:	6820      	ldr	r0, [r4, #0]
 800b6be:	2800      	cmp	r0, #0
 800b6c0:	d107      	bne.n	800b6d2 <__pow5mult+0x72>
 800b6c2:	0022      	movs	r2, r4
 800b6c4:	0021      	movs	r1, r4
 800b6c6:	0038      	movs	r0, r7
 800b6c8:	f7ff ff1a 	bl	800b500 <__multiply>
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	6020      	str	r0, [r4, #0]
 800b6d0:	6003      	str	r3, [r0, #0]
 800b6d2:	0004      	movs	r4, r0
 800b6d4:	e7e2      	b.n	800b69c <__pow5mult+0x3c>
 800b6d6:	0030      	movs	r0, r6
 800b6d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b6da:	46c0      	nop			; (mov r8, r8)
 800b6dc:	08012e50 	.word	0x08012e50
 800b6e0:	00000271 	.word	0x00000271

0800b6e4 <__lshift>:
 800b6e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6e6:	000c      	movs	r4, r1
 800b6e8:	0017      	movs	r7, r2
 800b6ea:	6923      	ldr	r3, [r4, #16]
 800b6ec:	1155      	asrs	r5, r2, #5
 800b6ee:	b087      	sub	sp, #28
 800b6f0:	18eb      	adds	r3, r5, r3
 800b6f2:	9302      	str	r3, [sp, #8]
 800b6f4:	3301      	adds	r3, #1
 800b6f6:	9301      	str	r3, [sp, #4]
 800b6f8:	6849      	ldr	r1, [r1, #4]
 800b6fa:	68a3      	ldr	r3, [r4, #8]
 800b6fc:	9004      	str	r0, [sp, #16]
 800b6fe:	9a01      	ldr	r2, [sp, #4]
 800b700:	4293      	cmp	r3, r2
 800b702:	db10      	blt.n	800b726 <__lshift+0x42>
 800b704:	9804      	ldr	r0, [sp, #16]
 800b706:	f7ff fdd9 	bl	800b2bc <_Balloc>
 800b70a:	2300      	movs	r3, #0
 800b70c:	0002      	movs	r2, r0
 800b70e:	0006      	movs	r6, r0
 800b710:	0019      	movs	r1, r3
 800b712:	3214      	adds	r2, #20
 800b714:	4298      	cmp	r0, r3
 800b716:	d10c      	bne.n	800b732 <__lshift+0x4e>
 800b718:	31df      	adds	r1, #223	; 0xdf
 800b71a:	0032      	movs	r2, r6
 800b71c:	4b26      	ldr	r3, [pc, #152]	; (800b7b8 <__lshift+0xd4>)
 800b71e:	4827      	ldr	r0, [pc, #156]	; (800b7bc <__lshift+0xd8>)
 800b720:	31ff      	adds	r1, #255	; 0xff
 800b722:	f003 f88f 	bl	800e844 <__assert_func>
 800b726:	3101      	adds	r1, #1
 800b728:	005b      	lsls	r3, r3, #1
 800b72a:	e7e8      	b.n	800b6fe <__lshift+0x1a>
 800b72c:	0098      	lsls	r0, r3, #2
 800b72e:	5011      	str	r1, [r2, r0]
 800b730:	3301      	adds	r3, #1
 800b732:	42ab      	cmp	r3, r5
 800b734:	dbfa      	blt.n	800b72c <__lshift+0x48>
 800b736:	43eb      	mvns	r3, r5
 800b738:	17db      	asrs	r3, r3, #31
 800b73a:	401d      	ands	r5, r3
 800b73c:	211f      	movs	r1, #31
 800b73e:	0023      	movs	r3, r4
 800b740:	0038      	movs	r0, r7
 800b742:	00ad      	lsls	r5, r5, #2
 800b744:	1955      	adds	r5, r2, r5
 800b746:	6922      	ldr	r2, [r4, #16]
 800b748:	3314      	adds	r3, #20
 800b74a:	0092      	lsls	r2, r2, #2
 800b74c:	4008      	ands	r0, r1
 800b74e:	4684      	mov	ip, r0
 800b750:	189a      	adds	r2, r3, r2
 800b752:	420f      	tst	r7, r1
 800b754:	d02a      	beq.n	800b7ac <__lshift+0xc8>
 800b756:	3101      	adds	r1, #1
 800b758:	1a09      	subs	r1, r1, r0
 800b75a:	9105      	str	r1, [sp, #20]
 800b75c:	2100      	movs	r1, #0
 800b75e:	9503      	str	r5, [sp, #12]
 800b760:	4667      	mov	r7, ip
 800b762:	6818      	ldr	r0, [r3, #0]
 800b764:	40b8      	lsls	r0, r7
 800b766:	4308      	orrs	r0, r1
 800b768:	9903      	ldr	r1, [sp, #12]
 800b76a:	c101      	stmia	r1!, {r0}
 800b76c:	9103      	str	r1, [sp, #12]
 800b76e:	9805      	ldr	r0, [sp, #20]
 800b770:	cb02      	ldmia	r3!, {r1}
 800b772:	40c1      	lsrs	r1, r0
 800b774:	429a      	cmp	r2, r3
 800b776:	d8f3      	bhi.n	800b760 <__lshift+0x7c>
 800b778:	0020      	movs	r0, r4
 800b77a:	3015      	adds	r0, #21
 800b77c:	2304      	movs	r3, #4
 800b77e:	4282      	cmp	r2, r0
 800b780:	d304      	bcc.n	800b78c <__lshift+0xa8>
 800b782:	1b13      	subs	r3, r2, r4
 800b784:	3b15      	subs	r3, #21
 800b786:	089b      	lsrs	r3, r3, #2
 800b788:	3301      	adds	r3, #1
 800b78a:	009b      	lsls	r3, r3, #2
 800b78c:	50e9      	str	r1, [r5, r3]
 800b78e:	2900      	cmp	r1, #0
 800b790:	d002      	beq.n	800b798 <__lshift+0xb4>
 800b792:	9b02      	ldr	r3, [sp, #8]
 800b794:	3302      	adds	r3, #2
 800b796:	9301      	str	r3, [sp, #4]
 800b798:	9b01      	ldr	r3, [sp, #4]
 800b79a:	9804      	ldr	r0, [sp, #16]
 800b79c:	3b01      	subs	r3, #1
 800b79e:	0021      	movs	r1, r4
 800b7a0:	6133      	str	r3, [r6, #16]
 800b7a2:	f7ff fdb3 	bl	800b30c <_Bfree>
 800b7a6:	0030      	movs	r0, r6
 800b7a8:	b007      	add	sp, #28
 800b7aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7ac:	cb02      	ldmia	r3!, {r1}
 800b7ae:	c502      	stmia	r5!, {r1}
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d8fb      	bhi.n	800b7ac <__lshift+0xc8>
 800b7b4:	e7f0      	b.n	800b798 <__lshift+0xb4>
 800b7b6:	46c0      	nop			; (mov r8, r8)
 800b7b8:	08012c91 	.word	0x08012c91
 800b7bc:	08012d02 	.word	0x08012d02

0800b7c0 <__mcmp>:
 800b7c0:	b530      	push	{r4, r5, lr}
 800b7c2:	690b      	ldr	r3, [r1, #16]
 800b7c4:	6904      	ldr	r4, [r0, #16]
 800b7c6:	0002      	movs	r2, r0
 800b7c8:	1ae0      	subs	r0, r4, r3
 800b7ca:	429c      	cmp	r4, r3
 800b7cc:	d10e      	bne.n	800b7ec <__mcmp+0x2c>
 800b7ce:	3214      	adds	r2, #20
 800b7d0:	009b      	lsls	r3, r3, #2
 800b7d2:	3114      	adds	r1, #20
 800b7d4:	0014      	movs	r4, r2
 800b7d6:	18c9      	adds	r1, r1, r3
 800b7d8:	18d2      	adds	r2, r2, r3
 800b7da:	3a04      	subs	r2, #4
 800b7dc:	3904      	subs	r1, #4
 800b7de:	6815      	ldr	r5, [r2, #0]
 800b7e0:	680b      	ldr	r3, [r1, #0]
 800b7e2:	429d      	cmp	r5, r3
 800b7e4:	d003      	beq.n	800b7ee <__mcmp+0x2e>
 800b7e6:	2001      	movs	r0, #1
 800b7e8:	429d      	cmp	r5, r3
 800b7ea:	d303      	bcc.n	800b7f4 <__mcmp+0x34>
 800b7ec:	bd30      	pop	{r4, r5, pc}
 800b7ee:	4294      	cmp	r4, r2
 800b7f0:	d3f3      	bcc.n	800b7da <__mcmp+0x1a>
 800b7f2:	e7fb      	b.n	800b7ec <__mcmp+0x2c>
 800b7f4:	4240      	negs	r0, r0
 800b7f6:	e7f9      	b.n	800b7ec <__mcmp+0x2c>

0800b7f8 <__mdiff>:
 800b7f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7fa:	000e      	movs	r6, r1
 800b7fc:	0007      	movs	r7, r0
 800b7fe:	0011      	movs	r1, r2
 800b800:	0030      	movs	r0, r6
 800b802:	b087      	sub	sp, #28
 800b804:	0014      	movs	r4, r2
 800b806:	f7ff ffdb 	bl	800b7c0 <__mcmp>
 800b80a:	1e05      	subs	r5, r0, #0
 800b80c:	d110      	bne.n	800b830 <__mdiff+0x38>
 800b80e:	0001      	movs	r1, r0
 800b810:	0038      	movs	r0, r7
 800b812:	f7ff fd53 	bl	800b2bc <_Balloc>
 800b816:	1e02      	subs	r2, r0, #0
 800b818:	d104      	bne.n	800b824 <__mdiff+0x2c>
 800b81a:	4b3f      	ldr	r3, [pc, #252]	; (800b918 <__mdiff+0x120>)
 800b81c:	483f      	ldr	r0, [pc, #252]	; (800b91c <__mdiff+0x124>)
 800b81e:	4940      	ldr	r1, [pc, #256]	; (800b920 <__mdiff+0x128>)
 800b820:	f003 f810 	bl	800e844 <__assert_func>
 800b824:	2301      	movs	r3, #1
 800b826:	6145      	str	r5, [r0, #20]
 800b828:	6103      	str	r3, [r0, #16]
 800b82a:	0010      	movs	r0, r2
 800b82c:	b007      	add	sp, #28
 800b82e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b830:	2301      	movs	r3, #1
 800b832:	9301      	str	r3, [sp, #4]
 800b834:	2800      	cmp	r0, #0
 800b836:	db04      	blt.n	800b842 <__mdiff+0x4a>
 800b838:	0023      	movs	r3, r4
 800b83a:	0034      	movs	r4, r6
 800b83c:	001e      	movs	r6, r3
 800b83e:	2300      	movs	r3, #0
 800b840:	9301      	str	r3, [sp, #4]
 800b842:	0038      	movs	r0, r7
 800b844:	6861      	ldr	r1, [r4, #4]
 800b846:	f7ff fd39 	bl	800b2bc <_Balloc>
 800b84a:	1e02      	subs	r2, r0, #0
 800b84c:	d103      	bne.n	800b856 <__mdiff+0x5e>
 800b84e:	4b32      	ldr	r3, [pc, #200]	; (800b918 <__mdiff+0x120>)
 800b850:	4832      	ldr	r0, [pc, #200]	; (800b91c <__mdiff+0x124>)
 800b852:	4934      	ldr	r1, [pc, #208]	; (800b924 <__mdiff+0x12c>)
 800b854:	e7e4      	b.n	800b820 <__mdiff+0x28>
 800b856:	9b01      	ldr	r3, [sp, #4]
 800b858:	2700      	movs	r7, #0
 800b85a:	60c3      	str	r3, [r0, #12]
 800b85c:	6920      	ldr	r0, [r4, #16]
 800b85e:	3414      	adds	r4, #20
 800b860:	0083      	lsls	r3, r0, #2
 800b862:	18e3      	adds	r3, r4, r3
 800b864:	0021      	movs	r1, r4
 800b866:	9401      	str	r4, [sp, #4]
 800b868:	0034      	movs	r4, r6
 800b86a:	9302      	str	r3, [sp, #8]
 800b86c:	6933      	ldr	r3, [r6, #16]
 800b86e:	3414      	adds	r4, #20
 800b870:	009b      	lsls	r3, r3, #2
 800b872:	18e3      	adds	r3, r4, r3
 800b874:	9303      	str	r3, [sp, #12]
 800b876:	0013      	movs	r3, r2
 800b878:	3314      	adds	r3, #20
 800b87a:	469c      	mov	ip, r3
 800b87c:	9305      	str	r3, [sp, #20]
 800b87e:	9104      	str	r1, [sp, #16]
 800b880:	9b04      	ldr	r3, [sp, #16]
 800b882:	cc02      	ldmia	r4!, {r1}
 800b884:	cb20      	ldmia	r3!, {r5}
 800b886:	9304      	str	r3, [sp, #16]
 800b888:	b2ab      	uxth	r3, r5
 800b88a:	19df      	adds	r7, r3, r7
 800b88c:	b28b      	uxth	r3, r1
 800b88e:	1afb      	subs	r3, r7, r3
 800b890:	0c09      	lsrs	r1, r1, #16
 800b892:	0c2d      	lsrs	r5, r5, #16
 800b894:	1a6d      	subs	r5, r5, r1
 800b896:	1419      	asrs	r1, r3, #16
 800b898:	1869      	adds	r1, r5, r1
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	140f      	asrs	r7, r1, #16
 800b89e:	0409      	lsls	r1, r1, #16
 800b8a0:	4319      	orrs	r1, r3
 800b8a2:	4663      	mov	r3, ip
 800b8a4:	c302      	stmia	r3!, {r1}
 800b8a6:	469c      	mov	ip, r3
 800b8a8:	9b03      	ldr	r3, [sp, #12]
 800b8aa:	42a3      	cmp	r3, r4
 800b8ac:	d8e8      	bhi.n	800b880 <__mdiff+0x88>
 800b8ae:	0031      	movs	r1, r6
 800b8b0:	9c03      	ldr	r4, [sp, #12]
 800b8b2:	3115      	adds	r1, #21
 800b8b4:	2304      	movs	r3, #4
 800b8b6:	428c      	cmp	r4, r1
 800b8b8:	d304      	bcc.n	800b8c4 <__mdiff+0xcc>
 800b8ba:	1ba3      	subs	r3, r4, r6
 800b8bc:	3b15      	subs	r3, #21
 800b8be:	089b      	lsrs	r3, r3, #2
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	009b      	lsls	r3, r3, #2
 800b8c4:	9901      	ldr	r1, [sp, #4]
 800b8c6:	18cd      	adds	r5, r1, r3
 800b8c8:	9905      	ldr	r1, [sp, #20]
 800b8ca:	002e      	movs	r6, r5
 800b8cc:	18cb      	adds	r3, r1, r3
 800b8ce:	469c      	mov	ip, r3
 800b8d0:	9902      	ldr	r1, [sp, #8]
 800b8d2:	428e      	cmp	r6, r1
 800b8d4:	d310      	bcc.n	800b8f8 <__mdiff+0x100>
 800b8d6:	9e02      	ldr	r6, [sp, #8]
 800b8d8:	1ee9      	subs	r1, r5, #3
 800b8da:	2400      	movs	r4, #0
 800b8dc:	428e      	cmp	r6, r1
 800b8de:	d304      	bcc.n	800b8ea <__mdiff+0xf2>
 800b8e0:	0031      	movs	r1, r6
 800b8e2:	3103      	adds	r1, #3
 800b8e4:	1b49      	subs	r1, r1, r5
 800b8e6:	0889      	lsrs	r1, r1, #2
 800b8e8:	008c      	lsls	r4, r1, #2
 800b8ea:	191b      	adds	r3, r3, r4
 800b8ec:	3b04      	subs	r3, #4
 800b8ee:	6819      	ldr	r1, [r3, #0]
 800b8f0:	2900      	cmp	r1, #0
 800b8f2:	d00f      	beq.n	800b914 <__mdiff+0x11c>
 800b8f4:	6110      	str	r0, [r2, #16]
 800b8f6:	e798      	b.n	800b82a <__mdiff+0x32>
 800b8f8:	ce02      	ldmia	r6!, {r1}
 800b8fa:	b28c      	uxth	r4, r1
 800b8fc:	19e4      	adds	r4, r4, r7
 800b8fe:	0c0f      	lsrs	r7, r1, #16
 800b900:	1421      	asrs	r1, r4, #16
 800b902:	1879      	adds	r1, r7, r1
 800b904:	b2a4      	uxth	r4, r4
 800b906:	140f      	asrs	r7, r1, #16
 800b908:	0409      	lsls	r1, r1, #16
 800b90a:	4321      	orrs	r1, r4
 800b90c:	4664      	mov	r4, ip
 800b90e:	c402      	stmia	r4!, {r1}
 800b910:	46a4      	mov	ip, r4
 800b912:	e7dd      	b.n	800b8d0 <__mdiff+0xd8>
 800b914:	3801      	subs	r0, #1
 800b916:	e7e9      	b.n	800b8ec <__mdiff+0xf4>
 800b918:	08012c91 	.word	0x08012c91
 800b91c:	08012d02 	.word	0x08012d02
 800b920:	00000237 	.word	0x00000237
 800b924:	00000245 	.word	0x00000245

0800b928 <__ulp>:
 800b928:	2000      	movs	r0, #0
 800b92a:	4b0b      	ldr	r3, [pc, #44]	; (800b958 <__ulp+0x30>)
 800b92c:	4019      	ands	r1, r3
 800b92e:	4b0b      	ldr	r3, [pc, #44]	; (800b95c <__ulp+0x34>)
 800b930:	18c9      	adds	r1, r1, r3
 800b932:	4281      	cmp	r1, r0
 800b934:	dc06      	bgt.n	800b944 <__ulp+0x1c>
 800b936:	4249      	negs	r1, r1
 800b938:	150b      	asrs	r3, r1, #20
 800b93a:	2b13      	cmp	r3, #19
 800b93c:	dc03      	bgt.n	800b946 <__ulp+0x1e>
 800b93e:	2180      	movs	r1, #128	; 0x80
 800b940:	0309      	lsls	r1, r1, #12
 800b942:	4119      	asrs	r1, r3
 800b944:	4770      	bx	lr
 800b946:	3b14      	subs	r3, #20
 800b948:	2001      	movs	r0, #1
 800b94a:	2b1e      	cmp	r3, #30
 800b94c:	dc02      	bgt.n	800b954 <__ulp+0x2c>
 800b94e:	2080      	movs	r0, #128	; 0x80
 800b950:	0600      	lsls	r0, r0, #24
 800b952:	40d8      	lsrs	r0, r3
 800b954:	2100      	movs	r1, #0
 800b956:	e7f5      	b.n	800b944 <__ulp+0x1c>
 800b958:	7ff00000 	.word	0x7ff00000
 800b95c:	fcc00000 	.word	0xfcc00000

0800b960 <__b2d>:
 800b960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b962:	0006      	movs	r6, r0
 800b964:	6903      	ldr	r3, [r0, #16]
 800b966:	3614      	adds	r6, #20
 800b968:	009b      	lsls	r3, r3, #2
 800b96a:	18f3      	adds	r3, r6, r3
 800b96c:	1f1d      	subs	r5, r3, #4
 800b96e:	682c      	ldr	r4, [r5, #0]
 800b970:	000f      	movs	r7, r1
 800b972:	0020      	movs	r0, r4
 800b974:	9301      	str	r3, [sp, #4]
 800b976:	f7ff fd63 	bl	800b440 <__hi0bits>
 800b97a:	2220      	movs	r2, #32
 800b97c:	1a12      	subs	r2, r2, r0
 800b97e:	603a      	str	r2, [r7, #0]
 800b980:	0003      	movs	r3, r0
 800b982:	4a1c      	ldr	r2, [pc, #112]	; (800b9f4 <__b2d+0x94>)
 800b984:	280a      	cmp	r0, #10
 800b986:	dc15      	bgt.n	800b9b4 <__b2d+0x54>
 800b988:	210b      	movs	r1, #11
 800b98a:	0027      	movs	r7, r4
 800b98c:	1a09      	subs	r1, r1, r0
 800b98e:	40cf      	lsrs	r7, r1
 800b990:	433a      	orrs	r2, r7
 800b992:	468c      	mov	ip, r1
 800b994:	0011      	movs	r1, r2
 800b996:	2200      	movs	r2, #0
 800b998:	42ae      	cmp	r6, r5
 800b99a:	d202      	bcs.n	800b9a2 <__b2d+0x42>
 800b99c:	9a01      	ldr	r2, [sp, #4]
 800b99e:	3a08      	subs	r2, #8
 800b9a0:	6812      	ldr	r2, [r2, #0]
 800b9a2:	3315      	adds	r3, #21
 800b9a4:	409c      	lsls	r4, r3
 800b9a6:	4663      	mov	r3, ip
 800b9a8:	0027      	movs	r7, r4
 800b9aa:	40da      	lsrs	r2, r3
 800b9ac:	4317      	orrs	r7, r2
 800b9ae:	0038      	movs	r0, r7
 800b9b0:	b003      	add	sp, #12
 800b9b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9b4:	2700      	movs	r7, #0
 800b9b6:	42ae      	cmp	r6, r5
 800b9b8:	d202      	bcs.n	800b9c0 <__b2d+0x60>
 800b9ba:	9d01      	ldr	r5, [sp, #4]
 800b9bc:	3d08      	subs	r5, #8
 800b9be:	682f      	ldr	r7, [r5, #0]
 800b9c0:	210b      	movs	r1, #11
 800b9c2:	4249      	negs	r1, r1
 800b9c4:	468c      	mov	ip, r1
 800b9c6:	449c      	add	ip, r3
 800b9c8:	2b0b      	cmp	r3, #11
 800b9ca:	d010      	beq.n	800b9ee <__b2d+0x8e>
 800b9cc:	4661      	mov	r1, ip
 800b9ce:	2320      	movs	r3, #32
 800b9d0:	408c      	lsls	r4, r1
 800b9d2:	1a5b      	subs	r3, r3, r1
 800b9d4:	0039      	movs	r1, r7
 800b9d6:	40d9      	lsrs	r1, r3
 800b9d8:	430c      	orrs	r4, r1
 800b9da:	4322      	orrs	r2, r4
 800b9dc:	0011      	movs	r1, r2
 800b9de:	2200      	movs	r2, #0
 800b9e0:	42b5      	cmp	r5, r6
 800b9e2:	d901      	bls.n	800b9e8 <__b2d+0x88>
 800b9e4:	3d04      	subs	r5, #4
 800b9e6:	682a      	ldr	r2, [r5, #0]
 800b9e8:	4664      	mov	r4, ip
 800b9ea:	40a7      	lsls	r7, r4
 800b9ec:	e7dd      	b.n	800b9aa <__b2d+0x4a>
 800b9ee:	4322      	orrs	r2, r4
 800b9f0:	0011      	movs	r1, r2
 800b9f2:	e7dc      	b.n	800b9ae <__b2d+0x4e>
 800b9f4:	3ff00000 	.word	0x3ff00000

0800b9f8 <__d2b>:
 800b9f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9fa:	2101      	movs	r1, #1
 800b9fc:	0014      	movs	r4, r2
 800b9fe:	001d      	movs	r5, r3
 800ba00:	9f08      	ldr	r7, [sp, #32]
 800ba02:	f7ff fc5b 	bl	800b2bc <_Balloc>
 800ba06:	1e06      	subs	r6, r0, #0
 800ba08:	d105      	bne.n	800ba16 <__d2b+0x1e>
 800ba0a:	0032      	movs	r2, r6
 800ba0c:	4b24      	ldr	r3, [pc, #144]	; (800baa0 <__d2b+0xa8>)
 800ba0e:	4825      	ldr	r0, [pc, #148]	; (800baa4 <__d2b+0xac>)
 800ba10:	4925      	ldr	r1, [pc, #148]	; (800baa8 <__d2b+0xb0>)
 800ba12:	f002 ff17 	bl	800e844 <__assert_func>
 800ba16:	032b      	lsls	r3, r5, #12
 800ba18:	006d      	lsls	r5, r5, #1
 800ba1a:	0b1b      	lsrs	r3, r3, #12
 800ba1c:	0d6d      	lsrs	r5, r5, #21
 800ba1e:	d125      	bne.n	800ba6c <__d2b+0x74>
 800ba20:	9301      	str	r3, [sp, #4]
 800ba22:	2c00      	cmp	r4, #0
 800ba24:	d028      	beq.n	800ba78 <__d2b+0x80>
 800ba26:	4668      	mov	r0, sp
 800ba28:	9400      	str	r4, [sp, #0]
 800ba2a:	f7ff fd23 	bl	800b474 <__lo0bits>
 800ba2e:	9b01      	ldr	r3, [sp, #4]
 800ba30:	9900      	ldr	r1, [sp, #0]
 800ba32:	2800      	cmp	r0, #0
 800ba34:	d01e      	beq.n	800ba74 <__d2b+0x7c>
 800ba36:	2220      	movs	r2, #32
 800ba38:	001c      	movs	r4, r3
 800ba3a:	1a12      	subs	r2, r2, r0
 800ba3c:	4094      	lsls	r4, r2
 800ba3e:	0022      	movs	r2, r4
 800ba40:	40c3      	lsrs	r3, r0
 800ba42:	430a      	orrs	r2, r1
 800ba44:	6172      	str	r2, [r6, #20]
 800ba46:	9301      	str	r3, [sp, #4]
 800ba48:	9c01      	ldr	r4, [sp, #4]
 800ba4a:	61b4      	str	r4, [r6, #24]
 800ba4c:	1e63      	subs	r3, r4, #1
 800ba4e:	419c      	sbcs	r4, r3
 800ba50:	3401      	adds	r4, #1
 800ba52:	6134      	str	r4, [r6, #16]
 800ba54:	2d00      	cmp	r5, #0
 800ba56:	d017      	beq.n	800ba88 <__d2b+0x90>
 800ba58:	2435      	movs	r4, #53	; 0x35
 800ba5a:	4b14      	ldr	r3, [pc, #80]	; (800baac <__d2b+0xb4>)
 800ba5c:	18ed      	adds	r5, r5, r3
 800ba5e:	182d      	adds	r5, r5, r0
 800ba60:	603d      	str	r5, [r7, #0]
 800ba62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba64:	1a24      	subs	r4, r4, r0
 800ba66:	601c      	str	r4, [r3, #0]
 800ba68:	0030      	movs	r0, r6
 800ba6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ba6c:	2280      	movs	r2, #128	; 0x80
 800ba6e:	0352      	lsls	r2, r2, #13
 800ba70:	4313      	orrs	r3, r2
 800ba72:	e7d5      	b.n	800ba20 <__d2b+0x28>
 800ba74:	6171      	str	r1, [r6, #20]
 800ba76:	e7e7      	b.n	800ba48 <__d2b+0x50>
 800ba78:	a801      	add	r0, sp, #4
 800ba7a:	f7ff fcfb 	bl	800b474 <__lo0bits>
 800ba7e:	9b01      	ldr	r3, [sp, #4]
 800ba80:	2401      	movs	r4, #1
 800ba82:	6173      	str	r3, [r6, #20]
 800ba84:	3020      	adds	r0, #32
 800ba86:	e7e4      	b.n	800ba52 <__d2b+0x5a>
 800ba88:	4b09      	ldr	r3, [pc, #36]	; (800bab0 <__d2b+0xb8>)
 800ba8a:	18c0      	adds	r0, r0, r3
 800ba8c:	4b09      	ldr	r3, [pc, #36]	; (800bab4 <__d2b+0xbc>)
 800ba8e:	6038      	str	r0, [r7, #0]
 800ba90:	18e3      	adds	r3, r4, r3
 800ba92:	009b      	lsls	r3, r3, #2
 800ba94:	18f3      	adds	r3, r6, r3
 800ba96:	6958      	ldr	r0, [r3, #20]
 800ba98:	f7ff fcd2 	bl	800b440 <__hi0bits>
 800ba9c:	0164      	lsls	r4, r4, #5
 800ba9e:	e7e0      	b.n	800ba62 <__d2b+0x6a>
 800baa0:	08012c91 	.word	0x08012c91
 800baa4:	08012d02 	.word	0x08012d02
 800baa8:	0000030f 	.word	0x0000030f
 800baac:	fffffbcd 	.word	0xfffffbcd
 800bab0:	fffffbce 	.word	0xfffffbce
 800bab4:	3fffffff 	.word	0x3fffffff

0800bab8 <__ratio>:
 800bab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800baba:	b087      	sub	sp, #28
 800babc:	000f      	movs	r7, r1
 800babe:	a904      	add	r1, sp, #16
 800bac0:	0006      	movs	r6, r0
 800bac2:	f7ff ff4d 	bl	800b960 <__b2d>
 800bac6:	9000      	str	r0, [sp, #0]
 800bac8:	9101      	str	r1, [sp, #4]
 800baca:	9c00      	ldr	r4, [sp, #0]
 800bacc:	9d01      	ldr	r5, [sp, #4]
 800bace:	0038      	movs	r0, r7
 800bad0:	a905      	add	r1, sp, #20
 800bad2:	f7ff ff45 	bl	800b960 <__b2d>
 800bad6:	9002      	str	r0, [sp, #8]
 800bad8:	9103      	str	r1, [sp, #12]
 800bada:	9a02      	ldr	r2, [sp, #8]
 800badc:	9b03      	ldr	r3, [sp, #12]
 800bade:	6930      	ldr	r0, [r6, #16]
 800bae0:	6939      	ldr	r1, [r7, #16]
 800bae2:	9e04      	ldr	r6, [sp, #16]
 800bae4:	1a40      	subs	r0, r0, r1
 800bae6:	9905      	ldr	r1, [sp, #20]
 800bae8:	0140      	lsls	r0, r0, #5
 800baea:	1a71      	subs	r1, r6, r1
 800baec:	1841      	adds	r1, r0, r1
 800baee:	0508      	lsls	r0, r1, #20
 800baf0:	2900      	cmp	r1, #0
 800baf2:	dd07      	ble.n	800bb04 <__ratio+0x4c>
 800baf4:	9901      	ldr	r1, [sp, #4]
 800baf6:	1845      	adds	r5, r0, r1
 800baf8:	0020      	movs	r0, r4
 800bafa:	0029      	movs	r1, r5
 800bafc:	f7f5 f9bc 	bl	8000e78 <__aeabi_ddiv>
 800bb00:	b007      	add	sp, #28
 800bb02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb04:	9903      	ldr	r1, [sp, #12]
 800bb06:	1a0b      	subs	r3, r1, r0
 800bb08:	e7f6      	b.n	800baf8 <__ratio+0x40>

0800bb0a <__copybits>:
 800bb0a:	b570      	push	{r4, r5, r6, lr}
 800bb0c:	0014      	movs	r4, r2
 800bb0e:	0005      	movs	r5, r0
 800bb10:	3901      	subs	r1, #1
 800bb12:	6913      	ldr	r3, [r2, #16]
 800bb14:	1149      	asrs	r1, r1, #5
 800bb16:	3101      	adds	r1, #1
 800bb18:	0089      	lsls	r1, r1, #2
 800bb1a:	3414      	adds	r4, #20
 800bb1c:	009b      	lsls	r3, r3, #2
 800bb1e:	1841      	adds	r1, r0, r1
 800bb20:	18e3      	adds	r3, r4, r3
 800bb22:	42a3      	cmp	r3, r4
 800bb24:	d80d      	bhi.n	800bb42 <__copybits+0x38>
 800bb26:	0014      	movs	r4, r2
 800bb28:	3411      	adds	r4, #17
 800bb2a:	2500      	movs	r5, #0
 800bb2c:	429c      	cmp	r4, r3
 800bb2e:	d803      	bhi.n	800bb38 <__copybits+0x2e>
 800bb30:	1a9b      	subs	r3, r3, r2
 800bb32:	3b11      	subs	r3, #17
 800bb34:	089b      	lsrs	r3, r3, #2
 800bb36:	009d      	lsls	r5, r3, #2
 800bb38:	2300      	movs	r3, #0
 800bb3a:	1940      	adds	r0, r0, r5
 800bb3c:	4281      	cmp	r1, r0
 800bb3e:	d803      	bhi.n	800bb48 <__copybits+0x3e>
 800bb40:	bd70      	pop	{r4, r5, r6, pc}
 800bb42:	cc40      	ldmia	r4!, {r6}
 800bb44:	c540      	stmia	r5!, {r6}
 800bb46:	e7ec      	b.n	800bb22 <__copybits+0x18>
 800bb48:	c008      	stmia	r0!, {r3}
 800bb4a:	e7f7      	b.n	800bb3c <__copybits+0x32>

0800bb4c <__any_on>:
 800bb4c:	0002      	movs	r2, r0
 800bb4e:	6900      	ldr	r0, [r0, #16]
 800bb50:	b510      	push	{r4, lr}
 800bb52:	3214      	adds	r2, #20
 800bb54:	114b      	asrs	r3, r1, #5
 800bb56:	4298      	cmp	r0, r3
 800bb58:	db13      	blt.n	800bb82 <__any_on+0x36>
 800bb5a:	dd0c      	ble.n	800bb76 <__any_on+0x2a>
 800bb5c:	241f      	movs	r4, #31
 800bb5e:	0008      	movs	r0, r1
 800bb60:	4020      	ands	r0, r4
 800bb62:	4221      	tst	r1, r4
 800bb64:	d007      	beq.n	800bb76 <__any_on+0x2a>
 800bb66:	0099      	lsls	r1, r3, #2
 800bb68:	588c      	ldr	r4, [r1, r2]
 800bb6a:	0021      	movs	r1, r4
 800bb6c:	40c1      	lsrs	r1, r0
 800bb6e:	4081      	lsls	r1, r0
 800bb70:	2001      	movs	r0, #1
 800bb72:	428c      	cmp	r4, r1
 800bb74:	d104      	bne.n	800bb80 <__any_on+0x34>
 800bb76:	009b      	lsls	r3, r3, #2
 800bb78:	18d3      	adds	r3, r2, r3
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d803      	bhi.n	800bb86 <__any_on+0x3a>
 800bb7e:	2000      	movs	r0, #0
 800bb80:	bd10      	pop	{r4, pc}
 800bb82:	0003      	movs	r3, r0
 800bb84:	e7f7      	b.n	800bb76 <__any_on+0x2a>
 800bb86:	3b04      	subs	r3, #4
 800bb88:	6819      	ldr	r1, [r3, #0]
 800bb8a:	2900      	cmp	r1, #0
 800bb8c:	d0f5      	beq.n	800bb7a <__any_on+0x2e>
 800bb8e:	2001      	movs	r0, #1
 800bb90:	e7f6      	b.n	800bb80 <__any_on+0x34>

0800bb92 <__ascii_wctomb>:
 800bb92:	0003      	movs	r3, r0
 800bb94:	1e08      	subs	r0, r1, #0
 800bb96:	d005      	beq.n	800bba4 <__ascii_wctomb+0x12>
 800bb98:	2aff      	cmp	r2, #255	; 0xff
 800bb9a:	d904      	bls.n	800bba6 <__ascii_wctomb+0x14>
 800bb9c:	228a      	movs	r2, #138	; 0x8a
 800bb9e:	2001      	movs	r0, #1
 800bba0:	601a      	str	r2, [r3, #0]
 800bba2:	4240      	negs	r0, r0
 800bba4:	4770      	bx	lr
 800bba6:	2001      	movs	r0, #1
 800bba8:	700a      	strb	r2, [r1, #0]
 800bbaa:	e7fb      	b.n	800bba4 <__ascii_wctomb+0x12>

0800bbac <_svfprintf_r>:
 800bbac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbae:	b0d9      	sub	sp, #356	; 0x164
 800bbb0:	001c      	movs	r4, r3
 800bbb2:	910b      	str	r1, [sp, #44]	; 0x2c
 800bbb4:	9208      	str	r2, [sp, #32]
 800bbb6:	900a      	str	r0, [sp, #40]	; 0x28
 800bbb8:	f002 fdae 	bl	800e718 <_localeconv_r>
 800bbbc:	6803      	ldr	r3, [r0, #0]
 800bbbe:	0018      	movs	r0, r3
 800bbc0:	931c      	str	r3, [sp, #112]	; 0x70
 800bbc2:	f7f4 fa9f 	bl	8000104 <strlen>
 800bbc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbc8:	9016      	str	r0, [sp, #88]	; 0x58
 800bbca:	899b      	ldrh	r3, [r3, #12]
 800bbcc:	061b      	lsls	r3, r3, #24
 800bbce:	d517      	bpl.n	800bc00 <_svfprintf_r+0x54>
 800bbd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbd2:	691b      	ldr	r3, [r3, #16]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d113      	bne.n	800bc00 <_svfprintf_r+0x54>
 800bbd8:	2140      	movs	r1, #64	; 0x40
 800bbda:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bbdc:	f7fd fb6e 	bl	80092bc <_malloc_r>
 800bbe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbe2:	6018      	str	r0, [r3, #0]
 800bbe4:	6118      	str	r0, [r3, #16]
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	d107      	bne.n	800bbfa <_svfprintf_r+0x4e>
 800bbea:	230c      	movs	r3, #12
 800bbec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbee:	6013      	str	r3, [r2, #0]
 800bbf0:	3b0d      	subs	r3, #13
 800bbf2:	9317      	str	r3, [sp, #92]	; 0x5c
 800bbf4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800bbf6:	b059      	add	sp, #356	; 0x164
 800bbf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbfa:	2340      	movs	r3, #64	; 0x40
 800bbfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bbfe:	6153      	str	r3, [r2, #20]
 800bc00:	2300      	movs	r3, #0
 800bc02:	2200      	movs	r2, #0
 800bc04:	932e      	str	r3, [sp, #184]	; 0xb8
 800bc06:	932d      	str	r3, [sp, #180]	; 0xb4
 800bc08:	930e      	str	r3, [sp, #56]	; 0x38
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	9214      	str	r2, [sp, #80]	; 0x50
 800bc0e:	9315      	str	r3, [sp, #84]	; 0x54
 800bc10:	2300      	movs	r3, #0
 800bc12:	af2f      	add	r7, sp, #188	; 0xbc
 800bc14:	972c      	str	r7, [sp, #176]	; 0xb0
 800bc16:	931f      	str	r3, [sp, #124]	; 0x7c
 800bc18:	931e      	str	r3, [sp, #120]	; 0x78
 800bc1a:	9312      	str	r3, [sp, #72]	; 0x48
 800bc1c:	931b      	str	r3, [sp, #108]	; 0x6c
 800bc1e:	931d      	str	r3, [sp, #116]	; 0x74
 800bc20:	9317      	str	r3, [sp, #92]	; 0x5c
 800bc22:	9d08      	ldr	r5, [sp, #32]
 800bc24:	782b      	ldrb	r3, [r5, #0]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d002      	beq.n	800bc30 <_svfprintf_r+0x84>
 800bc2a:	2b25      	cmp	r3, #37	; 0x25
 800bc2c:	d000      	beq.n	800bc30 <_svfprintf_r+0x84>
 800bc2e:	e091      	b.n	800bd54 <_svfprintf_r+0x1a8>
 800bc30:	9b08      	ldr	r3, [sp, #32]
 800bc32:	1aee      	subs	r6, r5, r3
 800bc34:	429d      	cmp	r5, r3
 800bc36:	d016      	beq.n	800bc66 <_svfprintf_r+0xba>
 800bc38:	603b      	str	r3, [r7, #0]
 800bc3a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800bc3c:	607e      	str	r6, [r7, #4]
 800bc3e:	199b      	adds	r3, r3, r6
 800bc40:	932e      	str	r3, [sp, #184]	; 0xb8
 800bc42:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800bc44:	3708      	adds	r7, #8
 800bc46:	3301      	adds	r3, #1
 800bc48:	932d      	str	r3, [sp, #180]	; 0xb4
 800bc4a:	2b07      	cmp	r3, #7
 800bc4c:	dd08      	ble.n	800bc60 <_svfprintf_r+0xb4>
 800bc4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bc50:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bc52:	aa2c      	add	r2, sp, #176	; 0xb0
 800bc54:	f004 f8c0 	bl	800fdd8 <__ssprint_r>
 800bc58:	2800      	cmp	r0, #0
 800bc5a:	d000      	beq.n	800bc5e <_svfprintf_r+0xb2>
 800bc5c:	e1cf      	b.n	800bffe <_svfprintf_r+0x452>
 800bc5e:	af2f      	add	r7, sp, #188	; 0xbc
 800bc60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bc62:	199b      	adds	r3, r3, r6
 800bc64:	9317      	str	r3, [sp, #92]	; 0x5c
 800bc66:	782b      	ldrb	r3, [r5, #0]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d101      	bne.n	800bc70 <_svfprintf_r+0xc4>
 800bc6c:	f001 f99e 	bl	800cfac <_svfprintf_r+0x1400>
 800bc70:	221b      	movs	r2, #27
 800bc72:	2300      	movs	r3, #0
 800bc74:	a91e      	add	r1, sp, #120	; 0x78
 800bc76:	1852      	adds	r2, r2, r1
 800bc78:	7013      	strb	r3, [r2, #0]
 800bc7a:	2201      	movs	r2, #1
 800bc7c:	001e      	movs	r6, r3
 800bc7e:	4252      	negs	r2, r2
 800bc80:	3501      	adds	r5, #1
 800bc82:	9209      	str	r2, [sp, #36]	; 0x24
 800bc84:	9318      	str	r3, [sp, #96]	; 0x60
 800bc86:	1c6b      	adds	r3, r5, #1
 800bc88:	9313      	str	r3, [sp, #76]	; 0x4c
 800bc8a:	782b      	ldrb	r3, [r5, #0]
 800bc8c:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc8e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800bc90:	3820      	subs	r0, #32
 800bc92:	285a      	cmp	r0, #90	; 0x5a
 800bc94:	d901      	bls.n	800bc9a <_svfprintf_r+0xee>
 800bc96:	f000 fe20 	bl	800c8da <_svfprintf_r+0xd2e>
 800bc9a:	f7f4 fa45 	bl	8000128 <__gnu_thumb1_case_uhi>
 800bc9e:	0078      	.short	0x0078
 800bca0:	061e061e 	.word	0x061e061e
 800bca4:	061e0082 	.word	0x061e0082
 800bca8:	061e061e 	.word	0x061e061e
 800bcac:	061e005d 	.word	0x061e005d
 800bcb0:	0084061e 	.word	0x0084061e
 800bcb4:	061e008c 	.word	0x061e008c
 800bcb8:	0091008a 	.word	0x0091008a
 800bcbc:	00b2061e 	.word	0x00b2061e
 800bcc0:	00b400b4 	.word	0x00b400b4
 800bcc4:	00b400b4 	.word	0x00b400b4
 800bcc8:	00b400b4 	.word	0x00b400b4
 800bccc:	00b400b4 	.word	0x00b400b4
 800bcd0:	061e00b4 	.word	0x061e00b4
 800bcd4:	061e061e 	.word	0x061e061e
 800bcd8:	061e061e 	.word	0x061e061e
 800bcdc:	061e061e 	.word	0x061e061e
 800bce0:	061e013b 	.word	0x061e013b
 800bce4:	00f400e0 	.word	0x00f400e0
 800bce8:	013b013b 	.word	0x013b013b
 800bcec:	061e013b 	.word	0x061e013b
 800bcf0:	061e061e 	.word	0x061e061e
 800bcf4:	00c7061e 	.word	0x00c7061e
 800bcf8:	061e061e 	.word	0x061e061e
 800bcfc:	061e04c7 	.word	0x061e04c7
 800bd00:	061e061e 	.word	0x061e061e
 800bd04:	061e050a 	.word	0x061e050a
 800bd08:	061e052a 	.word	0x061e052a
 800bd0c:	055c061e 	.word	0x055c061e
 800bd10:	061e061e 	.word	0x061e061e
 800bd14:	061e061e 	.word	0x061e061e
 800bd18:	061e061e 	.word	0x061e061e
 800bd1c:	061e061e 	.word	0x061e061e
 800bd20:	061e013b 	.word	0x061e013b
 800bd24:	00f600e0 	.word	0x00f600e0
 800bd28:	013b013b 	.word	0x013b013b
 800bd2c:	00c9013b 	.word	0x00c9013b
 800bd30:	00dc00f6 	.word	0x00dc00f6
 800bd34:	00d5061e 	.word	0x00d5061e
 800bd38:	04a7061e 	.word	0x04a7061e
 800bd3c:	04fa04c9 	.word	0x04fa04c9
 800bd40:	061e00dc 	.word	0x061e00dc
 800bd44:	0080050a 	.word	0x0080050a
 800bd48:	061e052c 	.word	0x061e052c
 800bd4c:	057c061e 	.word	0x057c061e
 800bd50:	0080061e 	.word	0x0080061e
 800bd54:	3501      	adds	r5, #1
 800bd56:	e765      	b.n	800bc24 <_svfprintf_r+0x78>
 800bd58:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bd5a:	f002 fcdd 	bl	800e718 <_localeconv_r>
 800bd5e:	6843      	ldr	r3, [r0, #4]
 800bd60:	0018      	movs	r0, r3
 800bd62:	931d      	str	r3, [sp, #116]	; 0x74
 800bd64:	f7f4 f9ce 	bl	8000104 <strlen>
 800bd68:	901b      	str	r0, [sp, #108]	; 0x6c
 800bd6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bd6c:	f002 fcd4 	bl	800e718 <_localeconv_r>
 800bd70:	6883      	ldr	r3, [r0, #8]
 800bd72:	9312      	str	r3, [sp, #72]	; 0x48
 800bd74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d011      	beq.n	800bd9e <_svfprintf_r+0x1f2>
 800bd7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d00e      	beq.n	800bd9e <_svfprintf_r+0x1f2>
 800bd80:	781b      	ldrb	r3, [r3, #0]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d00b      	beq.n	800bd9e <_svfprintf_r+0x1f2>
 800bd86:	2380      	movs	r3, #128	; 0x80
 800bd88:	00db      	lsls	r3, r3, #3
 800bd8a:	431e      	orrs	r6, r3
 800bd8c:	e007      	b.n	800bd9e <_svfprintf_r+0x1f2>
 800bd8e:	231b      	movs	r3, #27
 800bd90:	aa1e      	add	r2, sp, #120	; 0x78
 800bd92:	189b      	adds	r3, r3, r2
 800bd94:	781a      	ldrb	r2, [r3, #0]
 800bd96:	2a00      	cmp	r2, #0
 800bd98:	d101      	bne.n	800bd9e <_svfprintf_r+0x1f2>
 800bd9a:	3220      	adds	r2, #32
 800bd9c:	701a      	strb	r2, [r3, #0]
 800bd9e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800bda0:	e771      	b.n	800bc86 <_svfprintf_r+0xda>
 800bda2:	2301      	movs	r3, #1
 800bda4:	e7f1      	b.n	800bd8a <_svfprintf_r+0x1de>
 800bda6:	cc08      	ldmia	r4!, {r3}
 800bda8:	9318      	str	r3, [sp, #96]	; 0x60
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	daf7      	bge.n	800bd9e <_svfprintf_r+0x1f2>
 800bdae:	425b      	negs	r3, r3
 800bdb0:	9318      	str	r3, [sp, #96]	; 0x60
 800bdb2:	2304      	movs	r3, #4
 800bdb4:	e7e9      	b.n	800bd8a <_svfprintf_r+0x1de>
 800bdb6:	231b      	movs	r3, #27
 800bdb8:	aa1e      	add	r2, sp, #120	; 0x78
 800bdba:	189b      	adds	r3, r3, r2
 800bdbc:	222b      	movs	r2, #43	; 0x2b
 800bdbe:	e7ed      	b.n	800bd9c <_svfprintf_r+0x1f0>
 800bdc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bdc2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bdc4:	7812      	ldrb	r2, [r2, #0]
 800bdc6:	3301      	adds	r3, #1
 800bdc8:	920f      	str	r2, [sp, #60]	; 0x3c
 800bdca:	2a2a      	cmp	r2, #42	; 0x2a
 800bdcc:	d010      	beq.n	800bdf0 <_svfprintf_r+0x244>
 800bdce:	2200      	movs	r2, #0
 800bdd0:	9209      	str	r2, [sp, #36]	; 0x24
 800bdd2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bdd4:	9313      	str	r3, [sp, #76]	; 0x4c
 800bdd6:	3a30      	subs	r2, #48	; 0x30
 800bdd8:	2a09      	cmp	r2, #9
 800bdda:	d900      	bls.n	800bdde <_svfprintf_r+0x232>
 800bddc:	e757      	b.n	800bc8e <_svfprintf_r+0xe2>
 800bdde:	200a      	movs	r0, #10
 800bde0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bde2:	4341      	muls	r1, r0
 800bde4:	188a      	adds	r2, r1, r2
 800bde6:	9209      	str	r2, [sp, #36]	; 0x24
 800bde8:	781a      	ldrb	r2, [r3, #0]
 800bdea:	3301      	adds	r3, #1
 800bdec:	920f      	str	r2, [sp, #60]	; 0x3c
 800bdee:	e7f0      	b.n	800bdd2 <_svfprintf_r+0x226>
 800bdf0:	cc04      	ldmia	r4!, {r2}
 800bdf2:	9209      	str	r2, [sp, #36]	; 0x24
 800bdf4:	2a00      	cmp	r2, #0
 800bdf6:	da02      	bge.n	800bdfe <_svfprintf_r+0x252>
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	4252      	negs	r2, r2
 800bdfc:	9209      	str	r2, [sp, #36]	; 0x24
 800bdfe:	9313      	str	r3, [sp, #76]	; 0x4c
 800be00:	e7cd      	b.n	800bd9e <_svfprintf_r+0x1f2>
 800be02:	2380      	movs	r3, #128	; 0x80
 800be04:	e7c1      	b.n	800bd8a <_svfprintf_r+0x1de>
 800be06:	2200      	movs	r2, #0
 800be08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800be0a:	9218      	str	r2, [sp, #96]	; 0x60
 800be0c:	210a      	movs	r1, #10
 800be0e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800be10:	434a      	muls	r2, r1
 800be12:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800be14:	3930      	subs	r1, #48	; 0x30
 800be16:	188a      	adds	r2, r1, r2
 800be18:	9218      	str	r2, [sp, #96]	; 0x60
 800be1a:	001a      	movs	r2, r3
 800be1c:	7812      	ldrb	r2, [r2, #0]
 800be1e:	3301      	adds	r3, #1
 800be20:	920f      	str	r2, [sp, #60]	; 0x3c
 800be22:	3a30      	subs	r2, #48	; 0x30
 800be24:	9313      	str	r3, [sp, #76]	; 0x4c
 800be26:	2a09      	cmp	r2, #9
 800be28:	d9f0      	bls.n	800be0c <_svfprintf_r+0x260>
 800be2a:	e730      	b.n	800bc8e <_svfprintf_r+0xe2>
 800be2c:	2308      	movs	r3, #8
 800be2e:	e7ac      	b.n	800bd8a <_svfprintf_r+0x1de>
 800be30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800be32:	781b      	ldrb	r3, [r3, #0]
 800be34:	2b68      	cmp	r3, #104	; 0x68
 800be36:	d105      	bne.n	800be44 <_svfprintf_r+0x298>
 800be38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800be3a:	3301      	adds	r3, #1
 800be3c:	9313      	str	r3, [sp, #76]	; 0x4c
 800be3e:	2380      	movs	r3, #128	; 0x80
 800be40:	009b      	lsls	r3, r3, #2
 800be42:	e7a2      	b.n	800bd8a <_svfprintf_r+0x1de>
 800be44:	2340      	movs	r3, #64	; 0x40
 800be46:	e7a0      	b.n	800bd8a <_svfprintf_r+0x1de>
 800be48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	2b6c      	cmp	r3, #108	; 0x6c
 800be4e:	d104      	bne.n	800be5a <_svfprintf_r+0x2ae>
 800be50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800be52:	3301      	adds	r3, #1
 800be54:	9313      	str	r3, [sp, #76]	; 0x4c
 800be56:	2320      	movs	r3, #32
 800be58:	e797      	b.n	800bd8a <_svfprintf_r+0x1de>
 800be5a:	2310      	movs	r3, #16
 800be5c:	e795      	b.n	800bd8a <_svfprintf_r+0x1de>
 800be5e:	0021      	movs	r1, r4
 800be60:	c904      	ldmia	r1!, {r2}
 800be62:	ab3f      	add	r3, sp, #252	; 0xfc
 800be64:	910d      	str	r1, [sp, #52]	; 0x34
 800be66:	211b      	movs	r1, #27
 800be68:	701a      	strb	r2, [r3, #0]
 800be6a:	2200      	movs	r2, #0
 800be6c:	a81e      	add	r0, sp, #120	; 0x78
 800be6e:	1809      	adds	r1, r1, r0
 800be70:	700a      	strb	r2, [r1, #0]
 800be72:	920c      	str	r2, [sp, #48]	; 0x30
 800be74:	3201      	adds	r2, #1
 800be76:	9209      	str	r2, [sp, #36]	; 0x24
 800be78:	2200      	movs	r2, #0
 800be7a:	9308      	str	r3, [sp, #32]
 800be7c:	0015      	movs	r5, r2
 800be7e:	9219      	str	r2, [sp, #100]	; 0x64
 800be80:	9210      	str	r2, [sp, #64]	; 0x40
 800be82:	9211      	str	r2, [sp, #68]	; 0x44
 800be84:	e1f1      	b.n	800c26a <_svfprintf_r+0x6be>
 800be86:	2310      	movs	r3, #16
 800be88:	431e      	orrs	r6, r3
 800be8a:	06b3      	lsls	r3, r6, #26
 800be8c:	d531      	bpl.n	800bef2 <_svfprintf_r+0x346>
 800be8e:	2307      	movs	r3, #7
 800be90:	3407      	adds	r4, #7
 800be92:	439c      	bics	r4, r3
 800be94:	0022      	movs	r2, r4
 800be96:	ca18      	ldmia	r2!, {r3, r4}
 800be98:	9306      	str	r3, [sp, #24]
 800be9a:	9407      	str	r4, [sp, #28]
 800be9c:	920d      	str	r2, [sp, #52]	; 0x34
 800be9e:	9a07      	ldr	r2, [sp, #28]
 800bea0:	2301      	movs	r3, #1
 800bea2:	2a00      	cmp	r2, #0
 800bea4:	da0b      	bge.n	800bebe <_svfprintf_r+0x312>
 800bea6:	9c06      	ldr	r4, [sp, #24]
 800bea8:	9d07      	ldr	r5, [sp, #28]
 800beaa:	2200      	movs	r2, #0
 800beac:	4261      	negs	r1, r4
 800beae:	41aa      	sbcs	r2, r5
 800beb0:	9106      	str	r1, [sp, #24]
 800beb2:	9207      	str	r2, [sp, #28]
 800beb4:	221b      	movs	r2, #27
 800beb6:	a91e      	add	r1, sp, #120	; 0x78
 800beb8:	1852      	adds	r2, r2, r1
 800beba:	212d      	movs	r1, #45	; 0x2d
 800bebc:	7011      	strb	r1, [r2, #0]
 800bebe:	9907      	ldr	r1, [sp, #28]
 800bec0:	9a06      	ldr	r2, [sp, #24]
 800bec2:	430a      	orrs	r2, r1
 800bec4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bec6:	3101      	adds	r1, #1
 800bec8:	d101      	bne.n	800bece <_svfprintf_r+0x322>
 800beca:	f001 f87b 	bl	800cfc4 <_svfprintf_r+0x1418>
 800bece:	2180      	movs	r1, #128	; 0x80
 800bed0:	0034      	movs	r4, r6
 800bed2:	438c      	bics	r4, r1
 800bed4:	2a00      	cmp	r2, #0
 800bed6:	d001      	beq.n	800bedc <_svfprintf_r+0x330>
 800bed8:	f001 f879 	bl	800cfce <_svfprintf_r+0x1422>
 800bedc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bede:	2a00      	cmp	r2, #0
 800bee0:	d101      	bne.n	800bee6 <_svfprintf_r+0x33a>
 800bee2:	f000 fcef 	bl	800c8c4 <_svfprintf_r+0xd18>
 800bee6:	2b01      	cmp	r3, #1
 800bee8:	d001      	beq.n	800beee <_svfprintf_r+0x342>
 800beea:	f001 f874 	bl	800cfd6 <_svfprintf_r+0x142a>
 800beee:	f000 fc79 	bl	800c7e4 <_svfprintf_r+0xc38>
 800bef2:	0022      	movs	r2, r4
 800bef4:	ca08      	ldmia	r2!, {r3}
 800bef6:	920d      	str	r2, [sp, #52]	; 0x34
 800bef8:	06f2      	lsls	r2, r6, #27
 800befa:	d503      	bpl.n	800bf04 <_svfprintf_r+0x358>
 800befc:	9306      	str	r3, [sp, #24]
 800befe:	17db      	asrs	r3, r3, #31
 800bf00:	9307      	str	r3, [sp, #28]
 800bf02:	e7cc      	b.n	800be9e <_svfprintf_r+0x2f2>
 800bf04:	0672      	lsls	r2, r6, #25
 800bf06:	d501      	bpl.n	800bf0c <_svfprintf_r+0x360>
 800bf08:	b21b      	sxth	r3, r3
 800bf0a:	e7f7      	b.n	800befc <_svfprintf_r+0x350>
 800bf0c:	05b2      	lsls	r2, r6, #22
 800bf0e:	d5f5      	bpl.n	800befc <_svfprintf_r+0x350>
 800bf10:	b25b      	sxtb	r3, r3
 800bf12:	e7f3      	b.n	800befc <_svfprintf_r+0x350>
 800bf14:	2307      	movs	r3, #7
 800bf16:	3407      	adds	r4, #7
 800bf18:	439c      	bics	r4, r3
 800bf1a:	0022      	movs	r2, r4
 800bf1c:	ca18      	ldmia	r2!, {r3, r4}
 800bf1e:	920d      	str	r2, [sp, #52]	; 0x34
 800bf20:	2201      	movs	r2, #1
 800bf22:	9314      	str	r3, [sp, #80]	; 0x50
 800bf24:	9415      	str	r4, [sp, #84]	; 0x54
 800bf26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf28:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800bf2a:	005c      	lsls	r4, r3, #1
 800bf2c:	0864      	lsrs	r4, r4, #1
 800bf2e:	0028      	movs	r0, r5
 800bf30:	0021      	movs	r1, r4
 800bf32:	4b3e      	ldr	r3, [pc, #248]	; (800c02c <_svfprintf_r+0x480>)
 800bf34:	4252      	negs	r2, r2
 800bf36:	f7f6 f9dd 	bl	80022f4 <__aeabi_dcmpun>
 800bf3a:	2800      	cmp	r0, #0
 800bf3c:	d126      	bne.n	800bf8c <_svfprintf_r+0x3e0>
 800bf3e:	2201      	movs	r2, #1
 800bf40:	0028      	movs	r0, r5
 800bf42:	0021      	movs	r1, r4
 800bf44:	4b39      	ldr	r3, [pc, #228]	; (800c02c <_svfprintf_r+0x480>)
 800bf46:	4252      	negs	r2, r2
 800bf48:	f7f4 fa8e 	bl	8000468 <__aeabi_dcmple>
 800bf4c:	2800      	cmp	r0, #0
 800bf4e:	d11d      	bne.n	800bf8c <_svfprintf_r+0x3e0>
 800bf50:	9814      	ldr	r0, [sp, #80]	; 0x50
 800bf52:	9915      	ldr	r1, [sp, #84]	; 0x54
 800bf54:	2200      	movs	r2, #0
 800bf56:	2300      	movs	r3, #0
 800bf58:	f7f4 fa7c 	bl	8000454 <__aeabi_dcmplt>
 800bf5c:	2800      	cmp	r0, #0
 800bf5e:	d004      	beq.n	800bf6a <_svfprintf_r+0x3be>
 800bf60:	231b      	movs	r3, #27
 800bf62:	aa1e      	add	r2, sp, #120	; 0x78
 800bf64:	189b      	adds	r3, r3, r2
 800bf66:	222d      	movs	r2, #45	; 0x2d
 800bf68:	701a      	strb	r2, [r3, #0]
 800bf6a:	4b31      	ldr	r3, [pc, #196]	; (800c030 <_svfprintf_r+0x484>)
 800bf6c:	9308      	str	r3, [sp, #32]
 800bf6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf70:	2b47      	cmp	r3, #71	; 0x47
 800bf72:	dd01      	ble.n	800bf78 <_svfprintf_r+0x3cc>
 800bf74:	4b2f      	ldr	r3, [pc, #188]	; (800c034 <_svfprintf_r+0x488>)
 800bf76:	9308      	str	r3, [sp, #32]
 800bf78:	2380      	movs	r3, #128	; 0x80
 800bf7a:	439e      	bics	r6, r3
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	930c      	str	r3, [sp, #48]	; 0x30
 800bf80:	3303      	adds	r3, #3
 800bf82:	9309      	str	r3, [sp, #36]	; 0x24
 800bf84:	2300      	movs	r3, #0
 800bf86:	9319      	str	r3, [sp, #100]	; 0x64
 800bf88:	f000 fc78 	bl	800c87c <_svfprintf_r+0xcd0>
 800bf8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bf8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf90:	0010      	movs	r0, r2
 800bf92:	0019      	movs	r1, r3
 800bf94:	f7f6 f9ae 	bl	80022f4 <__aeabi_dcmpun>
 800bf98:	2800      	cmp	r0, #0
 800bf9a:	d00e      	beq.n	800bfba <_svfprintf_r+0x40e>
 800bf9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	da04      	bge.n	800bfac <_svfprintf_r+0x400>
 800bfa2:	231b      	movs	r3, #27
 800bfa4:	aa1e      	add	r2, sp, #120	; 0x78
 800bfa6:	189b      	adds	r3, r3, r2
 800bfa8:	222d      	movs	r2, #45	; 0x2d
 800bfaa:	701a      	strb	r2, [r3, #0]
 800bfac:	4b22      	ldr	r3, [pc, #136]	; (800c038 <_svfprintf_r+0x48c>)
 800bfae:	9308      	str	r3, [sp, #32]
 800bfb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bfb2:	2b47      	cmp	r3, #71	; 0x47
 800bfb4:	dde0      	ble.n	800bf78 <_svfprintf_r+0x3cc>
 800bfb6:	4b21      	ldr	r3, [pc, #132]	; (800c03c <_svfprintf_r+0x490>)
 800bfb8:	e7dd      	b.n	800bf76 <_svfprintf_r+0x3ca>
 800bfba:	2320      	movs	r3, #32
 800bfbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bfbe:	439a      	bics	r2, r3
 800bfc0:	9210      	str	r2, [sp, #64]	; 0x40
 800bfc2:	2a41      	cmp	r2, #65	; 0x41
 800bfc4:	d123      	bne.n	800c00e <_svfprintf_r+0x462>
 800bfc6:	2230      	movs	r2, #48	; 0x30
 800bfc8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bfca:	ab25      	add	r3, sp, #148	; 0x94
 800bfcc:	701a      	strb	r2, [r3, #0]
 800bfce:	3248      	adds	r2, #72	; 0x48
 800bfd0:	2961      	cmp	r1, #97	; 0x61
 800bfd2:	d000      	beq.n	800bfd6 <_svfprintf_r+0x42a>
 800bfd4:	3a20      	subs	r2, #32
 800bfd6:	705a      	strb	r2, [r3, #1]
 800bfd8:	2302      	movs	r3, #2
 800bfda:	431e      	orrs	r6, r3
 800bfdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfde:	2b63      	cmp	r3, #99	; 0x63
 800bfe0:	dd2e      	ble.n	800c040 <_svfprintf_r+0x494>
 800bfe2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bfe4:	1c59      	adds	r1, r3, #1
 800bfe6:	f7fd f969 	bl	80092bc <_malloc_r>
 800bfea:	9008      	str	r0, [sp, #32]
 800bfec:	2800      	cmp	r0, #0
 800bfee:	d000      	beq.n	800bff2 <_svfprintf_r+0x446>
 800bff0:	e216      	b.n	800c420 <_svfprintf_r+0x874>
 800bff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bff4:	899a      	ldrh	r2, [r3, #12]
 800bff6:	2340      	movs	r3, #64	; 0x40
 800bff8:	4313      	orrs	r3, r2
 800bffa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bffc:	8193      	strh	r3, [r2, #12]
 800bffe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c000:	899b      	ldrh	r3, [r3, #12]
 800c002:	065b      	lsls	r3, r3, #25
 800c004:	d400      	bmi.n	800c008 <_svfprintf_r+0x45c>
 800c006:	e5f5      	b.n	800bbf4 <_svfprintf_r+0x48>
 800c008:	2301      	movs	r3, #1
 800c00a:	425b      	negs	r3, r3
 800c00c:	e5f1      	b.n	800bbf2 <_svfprintf_r+0x46>
 800c00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c010:	900c      	str	r0, [sp, #48]	; 0x30
 800c012:	3301      	adds	r3, #1
 800c014:	d100      	bne.n	800c018 <_svfprintf_r+0x46c>
 800c016:	e206      	b.n	800c426 <_svfprintf_r+0x87a>
 800c018:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c01a:	2b47      	cmp	r3, #71	; 0x47
 800c01c:	d114      	bne.n	800c048 <_svfprintf_r+0x49c>
 800c01e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c020:	2b00      	cmp	r3, #0
 800c022:	d111      	bne.n	800c048 <_svfprintf_r+0x49c>
 800c024:	3301      	adds	r3, #1
 800c026:	9309      	str	r3, [sp, #36]	; 0x24
 800c028:	e00e      	b.n	800c048 <_svfprintf_r+0x49c>
 800c02a:	46c0      	nop			; (mov r8, r8)
 800c02c:	7fefffff 	.word	0x7fefffff
 800c030:	08012e5c 	.word	0x08012e5c
 800c034:	08012e60 	.word	0x08012e60
 800c038:	08012e64 	.word	0x08012e64
 800c03c:	08012e68 	.word	0x08012e68
 800c040:	2300      	movs	r3, #0
 800c042:	930c      	str	r3, [sp, #48]	; 0x30
 800c044:	ab3f      	add	r3, sp, #252	; 0xfc
 800c046:	9308      	str	r3, [sp, #32]
 800c048:	2380      	movs	r3, #128	; 0x80
 800c04a:	005b      	lsls	r3, r3, #1
 800c04c:	4333      	orrs	r3, r6
 800c04e:	931a      	str	r3, [sp, #104]	; 0x68
 800c050:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c052:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800c054:	2b00      	cmp	r3, #0
 800c056:	db00      	blt.n	800c05a <_svfprintf_r+0x4ae>
 800c058:	e1e7      	b.n	800c42a <_svfprintf_r+0x87e>
 800c05a:	2280      	movs	r2, #128	; 0x80
 800c05c:	0612      	lsls	r2, r2, #24
 800c05e:	4694      	mov	ip, r2
 800c060:	4463      	add	r3, ip
 800c062:	930e      	str	r3, [sp, #56]	; 0x38
 800c064:	232d      	movs	r3, #45	; 0x2d
 800c066:	9322      	str	r3, [sp, #136]	; 0x88
 800c068:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c06a:	2b41      	cmp	r3, #65	; 0x41
 800c06c:	d000      	beq.n	800c070 <_svfprintf_r+0x4c4>
 800c06e:	e1f5      	b.n	800c45c <_svfprintf_r+0x8b0>
 800c070:	0028      	movs	r0, r5
 800c072:	aa26      	add	r2, sp, #152	; 0x98
 800c074:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c076:	f002 fb73 	bl	800e760 <frexp>
 800c07a:	23ff      	movs	r3, #255	; 0xff
 800c07c:	2200      	movs	r2, #0
 800c07e:	059b      	lsls	r3, r3, #22
 800c080:	f7f5 faf4 	bl	800166c <__aeabi_dmul>
 800c084:	2200      	movs	r2, #0
 800c086:	2300      	movs	r3, #0
 800c088:	0004      	movs	r4, r0
 800c08a:	000d      	movs	r5, r1
 800c08c:	f7f4 f9dc 	bl	8000448 <__aeabi_dcmpeq>
 800c090:	2800      	cmp	r0, #0
 800c092:	d001      	beq.n	800c098 <_svfprintf_r+0x4ec>
 800c094:	2301      	movs	r3, #1
 800c096:	9326      	str	r3, [sp, #152]	; 0x98
 800c098:	4bda      	ldr	r3, [pc, #872]	; (800c404 <_svfprintf_r+0x858>)
 800c09a:	9319      	str	r3, [sp, #100]	; 0x64
 800c09c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c09e:	2b61      	cmp	r3, #97	; 0x61
 800c0a0:	d001      	beq.n	800c0a6 <_svfprintf_r+0x4fa>
 800c0a2:	4bd9      	ldr	r3, [pc, #868]	; (800c408 <_svfprintf_r+0x85c>)
 800c0a4:	9319      	str	r3, [sp, #100]	; 0x64
 800c0a6:	9b08      	ldr	r3, [sp, #32]
 800c0a8:	930e      	str	r3, [sp, #56]	; 0x38
 800c0aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0ac:	3b01      	subs	r3, #1
 800c0ae:	9311      	str	r3, [sp, #68]	; 0x44
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	4bd6      	ldr	r3, [pc, #856]	; (800c40c <_svfprintf_r+0x860>)
 800c0b4:	0020      	movs	r0, r4
 800c0b6:	0029      	movs	r1, r5
 800c0b8:	f7f5 fad8 	bl	800166c <__aeabi_dmul>
 800c0bc:	000d      	movs	r5, r1
 800c0be:	0004      	movs	r4, r0
 800c0c0:	f7f6 f936 	bl	8002330 <__aeabi_d2iz>
 800c0c4:	9021      	str	r0, [sp, #132]	; 0x84
 800c0c6:	f7f6 f969 	bl	800239c <__aeabi_i2d>
 800c0ca:	0002      	movs	r2, r0
 800c0cc:	000b      	movs	r3, r1
 800c0ce:	0020      	movs	r0, r4
 800c0d0:	0029      	movs	r1, r5
 800c0d2:	f7f5 fd8d 	bl	8001bf0 <__aeabi_dsub>
 800c0d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c0d8:	000d      	movs	r5, r1
 800c0da:	001a      	movs	r2, r3
 800c0dc:	3201      	adds	r2, #1
 800c0de:	9921      	ldr	r1, [sp, #132]	; 0x84
 800c0e0:	920e      	str	r2, [sp, #56]	; 0x38
 800c0e2:	9223      	str	r2, [sp, #140]	; 0x8c
 800c0e4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c0e6:	0004      	movs	r4, r0
 800c0e8:	5c52      	ldrb	r2, [r2, r1]
 800c0ea:	701a      	strb	r2, [r3, #0]
 800c0ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c0ee:	9320      	str	r3, [sp, #128]	; 0x80
 800c0f0:	3301      	adds	r3, #1
 800c0f2:	d00a      	beq.n	800c10a <_svfprintf_r+0x55e>
 800c0f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	3b01      	subs	r3, #1
 800c0fa:	9311      	str	r3, [sp, #68]	; 0x44
 800c0fc:	0020      	movs	r0, r4
 800c0fe:	2300      	movs	r3, #0
 800c100:	0029      	movs	r1, r5
 800c102:	f7f4 f9a1 	bl	8000448 <__aeabi_dcmpeq>
 800c106:	2800      	cmp	r0, #0
 800c108:	d0d2      	beq.n	800c0b0 <_svfprintf_r+0x504>
 800c10a:	2200      	movs	r2, #0
 800c10c:	0020      	movs	r0, r4
 800c10e:	0029      	movs	r1, r5
 800c110:	4bbf      	ldr	r3, [pc, #764]	; (800c410 <_svfprintf_r+0x864>)
 800c112:	f7f4 f9b3 	bl	800047c <__aeabi_dcmpgt>
 800c116:	2800      	cmp	r0, #0
 800c118:	d10c      	bne.n	800c134 <_svfprintf_r+0x588>
 800c11a:	2200      	movs	r2, #0
 800c11c:	0020      	movs	r0, r4
 800c11e:	0029      	movs	r1, r5
 800c120:	4bbb      	ldr	r3, [pc, #748]	; (800c410 <_svfprintf_r+0x864>)
 800c122:	f7f4 f991 	bl	8000448 <__aeabi_dcmpeq>
 800c126:	2800      	cmp	r0, #0
 800c128:	d100      	bne.n	800c12c <_svfprintf_r+0x580>
 800c12a:	e191      	b.n	800c450 <_svfprintf_r+0x8a4>
 800c12c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c12e:	07db      	lsls	r3, r3, #31
 800c130:	d400      	bmi.n	800c134 <_svfprintf_r+0x588>
 800c132:	e18d      	b.n	800c450 <_svfprintf_r+0x8a4>
 800c134:	2030      	movs	r0, #48	; 0x30
 800c136:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c138:	932a      	str	r3, [sp, #168]	; 0xa8
 800c13a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c13c:	7bdb      	ldrb	r3, [r3, #15]
 800c13e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800c140:	3a01      	subs	r2, #1
 800c142:	922a      	str	r2, [sp, #168]	; 0xa8
 800c144:	7811      	ldrb	r1, [r2, #0]
 800c146:	4299      	cmp	r1, r3
 800c148:	d100      	bne.n	800c14c <_svfprintf_r+0x5a0>
 800c14a:	e171      	b.n	800c430 <_svfprintf_r+0x884>
 800c14c:	1c4b      	adds	r3, r1, #1
 800c14e:	b2db      	uxtb	r3, r3
 800c150:	2939      	cmp	r1, #57	; 0x39
 800c152:	d101      	bne.n	800c158 <_svfprintf_r+0x5ac>
 800c154:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c156:	7a9b      	ldrb	r3, [r3, #10]
 800c158:	7013      	strb	r3, [r2, #0]
 800c15a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c15c:	9a08      	ldr	r2, [sp, #32]
 800c15e:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800c160:	1a9b      	subs	r3, r3, r2
 800c162:	930e      	str	r3, [sp, #56]	; 0x38
 800c164:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c166:	2b47      	cmp	r3, #71	; 0x47
 800c168:	d000      	beq.n	800c16c <_svfprintf_r+0x5c0>
 800c16a:	e1c4      	b.n	800c4f6 <_svfprintf_r+0x94a>
 800c16c:	1ceb      	adds	r3, r5, #3
 800c16e:	db03      	blt.n	800c178 <_svfprintf_r+0x5cc>
 800c170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c172:	42ab      	cmp	r3, r5
 800c174:	db00      	blt.n	800c178 <_svfprintf_r+0x5cc>
 800c176:	e1e6      	b.n	800c546 <_svfprintf_r+0x99a>
 800c178:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c17a:	3b02      	subs	r3, #2
 800c17c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c17e:	223c      	movs	r2, #60	; 0x3c
 800c180:	466b      	mov	r3, sp
 800c182:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c184:	189b      	adds	r3, r3, r2
 800c186:	1e6c      	subs	r4, r5, #1
 800c188:	3a1c      	subs	r2, #28
 800c18a:	2000      	movs	r0, #0
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	9426      	str	r4, [sp, #152]	; 0x98
 800c190:	4391      	bics	r1, r2
 800c192:	2941      	cmp	r1, #65	; 0x41
 800c194:	d102      	bne.n	800c19c <_svfprintf_r+0x5f0>
 800c196:	330f      	adds	r3, #15
 800c198:	b2db      	uxtb	r3, r3
 800c19a:	3001      	adds	r0, #1
 800c19c:	a928      	add	r1, sp, #160	; 0xa0
 800c19e:	700b      	strb	r3, [r1, #0]
 800c1a0:	232b      	movs	r3, #43	; 0x2b
 800c1a2:	2c00      	cmp	r4, #0
 800c1a4:	da02      	bge.n	800c1ac <_svfprintf_r+0x600>
 800c1a6:	2401      	movs	r4, #1
 800c1a8:	3302      	adds	r3, #2
 800c1aa:	1b64      	subs	r4, r4, r5
 800c1ac:	704b      	strb	r3, [r1, #1]
 800c1ae:	2c09      	cmp	r4, #9
 800c1b0:	dc00      	bgt.n	800c1b4 <_svfprintf_r+0x608>
 800c1b2:	e1ba      	b.n	800c52a <_svfprintf_r+0x97e>
 800c1b4:	2337      	movs	r3, #55	; 0x37
 800c1b6:	250a      	movs	r5, #10
 800c1b8:	aa1e      	add	r2, sp, #120	; 0x78
 800c1ba:	189b      	adds	r3, r3, r2
 800c1bc:	9310      	str	r3, [sp, #64]	; 0x40
 800c1be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c1c0:	0020      	movs	r0, r4
 800c1c2:	9309      	str	r3, [sp, #36]	; 0x24
 800c1c4:	0029      	movs	r1, r5
 800c1c6:	3b01      	subs	r3, #1
 800c1c8:	9310      	str	r3, [sp, #64]	; 0x40
 800c1ca:	f7f4 f927 	bl	800041c <__aeabi_idivmod>
 800c1ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c1d0:	3130      	adds	r1, #48	; 0x30
 800c1d2:	7019      	strb	r1, [r3, #0]
 800c1d4:	0020      	movs	r0, r4
 800c1d6:	0029      	movs	r1, r5
 800c1d8:	9411      	str	r4, [sp, #68]	; 0x44
 800c1da:	f7f4 f839 	bl	8000250 <__divsi3>
 800c1de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c1e0:	0004      	movs	r4, r0
 800c1e2:	2b63      	cmp	r3, #99	; 0x63
 800c1e4:	dceb      	bgt.n	800c1be <_svfprintf_r+0x612>
 800c1e6:	222a      	movs	r2, #42	; 0x2a
 800c1e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1ea:	a81e      	add	r0, sp, #120	; 0x78
 800c1ec:	1e99      	subs	r1, r3, #2
 800c1ee:	1812      	adds	r2, r2, r0
 800c1f0:	2037      	movs	r0, #55	; 0x37
 800c1f2:	000b      	movs	r3, r1
 800c1f4:	3430      	adds	r4, #48	; 0x30
 800c1f6:	700c      	strb	r4, [r1, #0]
 800c1f8:	ac1e      	add	r4, sp, #120	; 0x78
 800c1fa:	1900      	adds	r0, r0, r4
 800c1fc:	4283      	cmp	r3, r0
 800c1fe:	d200      	bcs.n	800c202 <_svfprintf_r+0x656>
 800c200:	e18e      	b.n	800c520 <_svfprintf_r+0x974>
 800c202:	2300      	movs	r3, #0
 800c204:	4281      	cmp	r1, r0
 800c206:	d804      	bhi.n	800c212 <_svfprintf_r+0x666>
 800c208:	aa1e      	add	r2, sp, #120	; 0x78
 800c20a:	3339      	adds	r3, #57	; 0x39
 800c20c:	189b      	adds	r3, r3, r2
 800c20e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c210:	1a9b      	subs	r3, r3, r2
 800c212:	222a      	movs	r2, #42	; 0x2a
 800c214:	a91e      	add	r1, sp, #120	; 0x78
 800c216:	1852      	adds	r2, r2, r1
 800c218:	18d3      	adds	r3, r2, r3
 800c21a:	aa28      	add	r2, sp, #160	; 0xa0
 800c21c:	1a9b      	subs	r3, r3, r2
 800c21e:	931e      	str	r3, [sp, #120]	; 0x78
 800c220:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c222:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c224:	4694      	mov	ip, r2
 800c226:	4463      	add	r3, ip
 800c228:	9309      	str	r3, [sp, #36]	; 0x24
 800c22a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c22c:	2b01      	cmp	r3, #1
 800c22e:	dc01      	bgt.n	800c234 <_svfprintf_r+0x688>
 800c230:	07f3      	lsls	r3, r6, #31
 800c232:	d504      	bpl.n	800c23e <_svfprintf_r+0x692>
 800c234:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c238:	4694      	mov	ip, r2
 800c23a:	4463      	add	r3, ip
 800c23c:	9309      	str	r3, [sp, #36]	; 0x24
 800c23e:	2280      	movs	r2, #128	; 0x80
 800c240:	4b74      	ldr	r3, [pc, #464]	; (800c414 <_svfprintf_r+0x868>)
 800c242:	0052      	lsls	r2, r2, #1
 800c244:	4033      	ands	r3, r6
 800c246:	431a      	orrs	r2, r3
 800c248:	2300      	movs	r3, #0
 800c24a:	001d      	movs	r5, r3
 800c24c:	921a      	str	r2, [sp, #104]	; 0x68
 800c24e:	9310      	str	r3, [sp, #64]	; 0x40
 800c250:	9311      	str	r3, [sp, #68]	; 0x44
 800c252:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c254:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800c256:	9319      	str	r3, [sp, #100]	; 0x64
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d006      	beq.n	800c26a <_svfprintf_r+0x6be>
 800c25c:	231b      	movs	r3, #27
 800c25e:	aa1e      	add	r2, sp, #120	; 0x78
 800c260:	189b      	adds	r3, r3, r2
 800c262:	222d      	movs	r2, #45	; 0x2d
 800c264:	701a      	strb	r2, [r3, #0]
 800c266:	2300      	movs	r3, #0
 800c268:	9319      	str	r3, [sp, #100]	; 0x64
 800c26a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c26c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c26e:	931a      	str	r3, [sp, #104]	; 0x68
 800c270:	4293      	cmp	r3, r2
 800c272:	da00      	bge.n	800c276 <_svfprintf_r+0x6ca>
 800c274:	921a      	str	r2, [sp, #104]	; 0x68
 800c276:	231b      	movs	r3, #27
 800c278:	aa1e      	add	r2, sp, #120	; 0x78
 800c27a:	189b      	adds	r3, r3, r2
 800c27c:	781b      	ldrb	r3, [r3, #0]
 800c27e:	1e5a      	subs	r2, r3, #1
 800c280:	4193      	sbcs	r3, r2
 800c282:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c284:	18d3      	adds	r3, r2, r3
 800c286:	931a      	str	r3, [sp, #104]	; 0x68
 800c288:	0032      	movs	r2, r6
 800c28a:	2302      	movs	r3, #2
 800c28c:	401a      	ands	r2, r3
 800c28e:	9220      	str	r2, [sp, #128]	; 0x80
 800c290:	421e      	tst	r6, r3
 800c292:	d002      	beq.n	800c29a <_svfprintf_r+0x6ee>
 800c294:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c296:	3302      	adds	r3, #2
 800c298:	931a      	str	r3, [sp, #104]	; 0x68
 800c29a:	2384      	movs	r3, #132	; 0x84
 800c29c:	0032      	movs	r2, r6
 800c29e:	401a      	ands	r2, r3
 800c2a0:	9221      	str	r2, [sp, #132]	; 0x84
 800c2a2:	421e      	tst	r6, r3
 800c2a4:	d11f      	bne.n	800c2e6 <_svfprintf_r+0x73a>
 800c2a6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c2a8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c2aa:	1a9c      	subs	r4, r3, r2
 800c2ac:	2c00      	cmp	r4, #0
 800c2ae:	dd1a      	ble.n	800c2e6 <_svfprintf_r+0x73a>
 800c2b0:	0039      	movs	r1, r7
 800c2b2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c2b4:	4858      	ldr	r0, [pc, #352]	; (800c418 <_svfprintf_r+0x86c>)
 800c2b6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800c2b8:	3301      	adds	r3, #1
 800c2ba:	3108      	adds	r1, #8
 800c2bc:	6038      	str	r0, [r7, #0]
 800c2be:	2c10      	cmp	r4, #16
 800c2c0:	dd00      	ble.n	800c2c4 <_svfprintf_r+0x718>
 800c2c2:	e31c      	b.n	800c8fe <_svfprintf_r+0xd52>
 800c2c4:	607c      	str	r4, [r7, #4]
 800c2c6:	18a4      	adds	r4, r4, r2
 800c2c8:	000f      	movs	r7, r1
 800c2ca:	942e      	str	r4, [sp, #184]	; 0xb8
 800c2cc:	932d      	str	r3, [sp, #180]	; 0xb4
 800c2ce:	2b07      	cmp	r3, #7
 800c2d0:	dd09      	ble.n	800c2e6 <_svfprintf_r+0x73a>
 800c2d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c2d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c2d6:	aa2c      	add	r2, sp, #176	; 0xb0
 800c2d8:	f003 fd7e 	bl	800fdd8 <__ssprint_r>
 800c2dc:	2800      	cmp	r0, #0
 800c2de:	d001      	beq.n	800c2e4 <_svfprintf_r+0x738>
 800c2e0:	f000 fe43 	bl	800cf6a <_svfprintf_r+0x13be>
 800c2e4:	af2f      	add	r7, sp, #188	; 0xbc
 800c2e6:	221b      	movs	r2, #27
 800c2e8:	a91e      	add	r1, sp, #120	; 0x78
 800c2ea:	1852      	adds	r2, r2, r1
 800c2ec:	7811      	ldrb	r1, [r2, #0]
 800c2ee:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800c2f0:	2900      	cmp	r1, #0
 800c2f2:	d014      	beq.n	800c31e <_svfprintf_r+0x772>
 800c2f4:	603a      	str	r2, [r7, #0]
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	189b      	adds	r3, r3, r2
 800c2fa:	932e      	str	r3, [sp, #184]	; 0xb8
 800c2fc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c2fe:	607a      	str	r2, [r7, #4]
 800c300:	189b      	adds	r3, r3, r2
 800c302:	932d      	str	r3, [sp, #180]	; 0xb4
 800c304:	3708      	adds	r7, #8
 800c306:	2b07      	cmp	r3, #7
 800c308:	dd09      	ble.n	800c31e <_svfprintf_r+0x772>
 800c30a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c30c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c30e:	aa2c      	add	r2, sp, #176	; 0xb0
 800c310:	f003 fd62 	bl	800fdd8 <__ssprint_r>
 800c314:	2800      	cmp	r0, #0
 800c316:	d001      	beq.n	800c31c <_svfprintf_r+0x770>
 800c318:	f000 fe27 	bl	800cf6a <_svfprintf_r+0x13be>
 800c31c:	af2f      	add	r7, sp, #188	; 0xbc
 800c31e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c320:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800c322:	2a00      	cmp	r2, #0
 800c324:	d015      	beq.n	800c352 <_svfprintf_r+0x7a6>
 800c326:	aa25      	add	r2, sp, #148	; 0x94
 800c328:	603a      	str	r2, [r7, #0]
 800c32a:	2202      	movs	r2, #2
 800c32c:	189b      	adds	r3, r3, r2
 800c32e:	932e      	str	r3, [sp, #184]	; 0xb8
 800c330:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c332:	607a      	str	r2, [r7, #4]
 800c334:	3301      	adds	r3, #1
 800c336:	932d      	str	r3, [sp, #180]	; 0xb4
 800c338:	3708      	adds	r7, #8
 800c33a:	2b07      	cmp	r3, #7
 800c33c:	dd09      	ble.n	800c352 <_svfprintf_r+0x7a6>
 800c33e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c340:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c342:	aa2c      	add	r2, sp, #176	; 0xb0
 800c344:	f003 fd48 	bl	800fdd8 <__ssprint_r>
 800c348:	2800      	cmp	r0, #0
 800c34a:	d001      	beq.n	800c350 <_svfprintf_r+0x7a4>
 800c34c:	f000 fe0d 	bl	800cf6a <_svfprintf_r+0x13be>
 800c350:	af2f      	add	r7, sp, #188	; 0xbc
 800c352:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c354:	2b80      	cmp	r3, #128	; 0x80
 800c356:	d11f      	bne.n	800c398 <_svfprintf_r+0x7ec>
 800c358:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c35a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c35c:	1a9c      	subs	r4, r3, r2
 800c35e:	2c00      	cmp	r4, #0
 800c360:	dd1a      	ble.n	800c398 <_svfprintf_r+0x7ec>
 800c362:	0039      	movs	r1, r7
 800c364:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c366:	482d      	ldr	r0, [pc, #180]	; (800c41c <_svfprintf_r+0x870>)
 800c368:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800c36a:	3301      	adds	r3, #1
 800c36c:	3108      	adds	r1, #8
 800c36e:	6038      	str	r0, [r7, #0]
 800c370:	2c10      	cmp	r4, #16
 800c372:	dd00      	ble.n	800c376 <_svfprintf_r+0x7ca>
 800c374:	e2d6      	b.n	800c924 <_svfprintf_r+0xd78>
 800c376:	607c      	str	r4, [r7, #4]
 800c378:	18a4      	adds	r4, r4, r2
 800c37a:	000f      	movs	r7, r1
 800c37c:	942e      	str	r4, [sp, #184]	; 0xb8
 800c37e:	932d      	str	r3, [sp, #180]	; 0xb4
 800c380:	2b07      	cmp	r3, #7
 800c382:	dd09      	ble.n	800c398 <_svfprintf_r+0x7ec>
 800c384:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c386:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c388:	aa2c      	add	r2, sp, #176	; 0xb0
 800c38a:	f003 fd25 	bl	800fdd8 <__ssprint_r>
 800c38e:	2800      	cmp	r0, #0
 800c390:	d001      	beq.n	800c396 <_svfprintf_r+0x7ea>
 800c392:	f000 fdea 	bl	800cf6a <_svfprintf_r+0x13be>
 800c396:	af2f      	add	r7, sp, #188	; 0xbc
 800c398:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c39a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c39c:	1a9c      	subs	r4, r3, r2
 800c39e:	2c00      	cmp	r4, #0
 800c3a0:	dd1a      	ble.n	800c3d8 <_svfprintf_r+0x82c>
 800c3a2:	0039      	movs	r1, r7
 800c3a4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c3a6:	481d      	ldr	r0, [pc, #116]	; (800c41c <_svfprintf_r+0x870>)
 800c3a8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	3108      	adds	r1, #8
 800c3ae:	6038      	str	r0, [r7, #0]
 800c3b0:	2c10      	cmp	r4, #16
 800c3b2:	dd00      	ble.n	800c3b6 <_svfprintf_r+0x80a>
 800c3b4:	e2c9      	b.n	800c94a <_svfprintf_r+0xd9e>
 800c3b6:	18a2      	adds	r2, r4, r2
 800c3b8:	607c      	str	r4, [r7, #4]
 800c3ba:	922e      	str	r2, [sp, #184]	; 0xb8
 800c3bc:	000f      	movs	r7, r1
 800c3be:	932d      	str	r3, [sp, #180]	; 0xb4
 800c3c0:	2b07      	cmp	r3, #7
 800c3c2:	dd09      	ble.n	800c3d8 <_svfprintf_r+0x82c>
 800c3c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c3c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c3c8:	aa2c      	add	r2, sp, #176	; 0xb0
 800c3ca:	f003 fd05 	bl	800fdd8 <__ssprint_r>
 800c3ce:	2800      	cmp	r0, #0
 800c3d0:	d001      	beq.n	800c3d6 <_svfprintf_r+0x82a>
 800c3d2:	f000 fdca 	bl	800cf6a <_svfprintf_r+0x13be>
 800c3d6:	af2f      	add	r7, sp, #188	; 0xbc
 800c3d8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800c3da:	9319      	str	r3, [sp, #100]	; 0x64
 800c3dc:	05f3      	lsls	r3, r6, #23
 800c3de:	d500      	bpl.n	800c3e2 <_svfprintf_r+0x836>
 800c3e0:	e2ce      	b.n	800c980 <_svfprintf_r+0xdd4>
 800c3e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3e4:	9b08      	ldr	r3, [sp, #32]
 800c3e6:	4694      	mov	ip, r2
 800c3e8:	603b      	str	r3, [r7, #0]
 800c3ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3ec:	607b      	str	r3, [r7, #4]
 800c3ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c3f0:	4463      	add	r3, ip
 800c3f2:	932e      	str	r3, [sp, #184]	; 0xb8
 800c3f4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	932d      	str	r3, [sp, #180]	; 0xb4
 800c3fa:	2b07      	cmp	r3, #7
 800c3fc:	dd00      	ble.n	800c400 <_svfprintf_r+0x854>
 800c3fe:	e3a3      	b.n	800cb48 <_svfprintf_r+0xf9c>
 800c400:	3708      	adds	r7, #8
 800c402:	e301      	b.n	800ca08 <_svfprintf_r+0xe5c>
 800c404:	08012e6c 	.word	0x08012e6c
 800c408:	08012e7d 	.word	0x08012e7d
 800c40c:	40300000 	.word	0x40300000
 800c410:	3fe00000 	.word	0x3fe00000
 800c414:	fffffbff 	.word	0xfffffbff
 800c418:	08012e90 	.word	0x08012e90
 800c41c:	08012ea0 	.word	0x08012ea0
 800c420:	9b08      	ldr	r3, [sp, #32]
 800c422:	930c      	str	r3, [sp, #48]	; 0x30
 800c424:	e610      	b.n	800c048 <_svfprintf_r+0x49c>
 800c426:	2306      	movs	r3, #6
 800c428:	e5fd      	b.n	800c026 <_svfprintf_r+0x47a>
 800c42a:	930e      	str	r3, [sp, #56]	; 0x38
 800c42c:	2300      	movs	r3, #0
 800c42e:	e61a      	b.n	800c066 <_svfprintf_r+0x4ba>
 800c430:	7010      	strb	r0, [r2, #0]
 800c432:	e684      	b.n	800c13e <_svfprintf_r+0x592>
 800c434:	7018      	strb	r0, [r3, #0]
 800c436:	3301      	adds	r3, #1
 800c438:	1aca      	subs	r2, r1, r3
 800c43a:	d5fb      	bpl.n	800c434 <_svfprintf_r+0x888>
 800c43c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c43e:	2300      	movs	r3, #0
 800c440:	3201      	adds	r2, #1
 800c442:	db01      	blt.n	800c448 <_svfprintf_r+0x89c>
 800c444:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c446:	3301      	adds	r3, #1
 800c448:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c44a:	18d3      	adds	r3, r2, r3
 800c44c:	9323      	str	r3, [sp, #140]	; 0x8c
 800c44e:	e684      	b.n	800c15a <_svfprintf_r+0x5ae>
 800c450:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c452:	9920      	ldr	r1, [sp, #128]	; 0x80
 800c454:	2030      	movs	r0, #48	; 0x30
 800c456:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c458:	1851      	adds	r1, r2, r1
 800c45a:	e7ed      	b.n	800c438 <_svfprintf_r+0x88c>
 800c45c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c45e:	2303      	movs	r3, #3
 800c460:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c462:	2a46      	cmp	r2, #70	; 0x46
 800c464:	d006      	beq.n	800c474 <_svfprintf_r+0x8c8>
 800c466:	0014      	movs	r4, r2
 800c468:	3c45      	subs	r4, #69	; 0x45
 800c46a:	4262      	negs	r2, r4
 800c46c:	4154      	adcs	r4, r2
 800c46e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c470:	3b01      	subs	r3, #1
 800c472:	1914      	adds	r4, r2, r4
 800c474:	aa2a      	add	r2, sp, #168	; 0xa8
 800c476:	9204      	str	r2, [sp, #16]
 800c478:	aa27      	add	r2, sp, #156	; 0x9c
 800c47a:	9203      	str	r2, [sp, #12]
 800c47c:	aa26      	add	r2, sp, #152	; 0x98
 800c47e:	9202      	str	r2, [sp, #8]
 800c480:	9300      	str	r3, [sp, #0]
 800c482:	002a      	movs	r2, r5
 800c484:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c486:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c488:	9401      	str	r4, [sp, #4]
 800c48a:	f002 fad7 	bl	800ea3c <_dtoa_r>
 800c48e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c490:	9008      	str	r0, [sp, #32]
 800c492:	2b47      	cmp	r3, #71	; 0x47
 800c494:	d103      	bne.n	800c49e <_svfprintf_r+0x8f2>
 800c496:	07f3      	lsls	r3, r6, #31
 800c498:	d401      	bmi.n	800c49e <_svfprintf_r+0x8f2>
 800c49a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800c49c:	e65e      	b.n	800c15c <_svfprintf_r+0x5b0>
 800c49e:	9b08      	ldr	r3, [sp, #32]
 800c4a0:	191b      	adds	r3, r3, r4
 800c4a2:	9311      	str	r3, [sp, #68]	; 0x44
 800c4a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c4a6:	2b46      	cmp	r3, #70	; 0x46
 800c4a8:	d112      	bne.n	800c4d0 <_svfprintf_r+0x924>
 800c4aa:	9b08      	ldr	r3, [sp, #32]
 800c4ac:	781b      	ldrb	r3, [r3, #0]
 800c4ae:	2b30      	cmp	r3, #48	; 0x30
 800c4b0:	d10a      	bne.n	800c4c8 <_svfprintf_r+0x91c>
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	0028      	movs	r0, r5
 800c4b8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c4ba:	f7f3 ffc5 	bl	8000448 <__aeabi_dcmpeq>
 800c4be:	2800      	cmp	r0, #0
 800c4c0:	d102      	bne.n	800c4c8 <_svfprintf_r+0x91c>
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	1b1b      	subs	r3, r3, r4
 800c4c6:	9326      	str	r3, [sp, #152]	; 0x98
 800c4c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c4ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c4cc:	18d3      	adds	r3, r2, r3
 800c4ce:	9311      	str	r3, [sp, #68]	; 0x44
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	0028      	movs	r0, r5
 800c4d6:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c4d8:	f7f3 ffb6 	bl	8000448 <__aeabi_dcmpeq>
 800c4dc:	2800      	cmp	r0, #0
 800c4de:	d001      	beq.n	800c4e4 <_svfprintf_r+0x938>
 800c4e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c4e2:	932a      	str	r3, [sp, #168]	; 0xa8
 800c4e4:	2230      	movs	r2, #48	; 0x30
 800c4e6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800c4e8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c4ea:	4299      	cmp	r1, r3
 800c4ec:	d9d5      	bls.n	800c49a <_svfprintf_r+0x8ee>
 800c4ee:	1c59      	adds	r1, r3, #1
 800c4f0:	912a      	str	r1, [sp, #168]	; 0xa8
 800c4f2:	701a      	strb	r2, [r3, #0]
 800c4f4:	e7f7      	b.n	800c4e6 <_svfprintf_r+0x93a>
 800c4f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c4f8:	2b46      	cmp	r3, #70	; 0x46
 800c4fa:	d000      	beq.n	800c4fe <_svfprintf_r+0x952>
 800c4fc:	e63f      	b.n	800c17e <_svfprintf_r+0x5d2>
 800c4fe:	2201      	movs	r2, #1
 800c500:	0033      	movs	r3, r6
 800c502:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c504:	4013      	ands	r3, r2
 800c506:	430b      	orrs	r3, r1
 800c508:	2d00      	cmp	r5, #0
 800c50a:	dd2c      	ble.n	800c566 <_svfprintf_r+0x9ba>
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d046      	beq.n	800c59e <_svfprintf_r+0x9f2>
 800c510:	000a      	movs	r2, r1
 800c512:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c514:	18eb      	adds	r3, r5, r3
 800c516:	18d3      	adds	r3, r2, r3
 800c518:	9309      	str	r3, [sp, #36]	; 0x24
 800c51a:	2366      	movs	r3, #102	; 0x66
 800c51c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c51e:	e030      	b.n	800c582 <_svfprintf_r+0x9d6>
 800c520:	781c      	ldrb	r4, [r3, #0]
 800c522:	3301      	adds	r3, #1
 800c524:	7014      	strb	r4, [r2, #0]
 800c526:	3201      	adds	r2, #1
 800c528:	e668      	b.n	800c1fc <_svfprintf_r+0x650>
 800c52a:	222a      	movs	r2, #42	; 0x2a
 800c52c:	ab1e      	add	r3, sp, #120	; 0x78
 800c52e:	18d2      	adds	r2, r2, r3
 800c530:	2800      	cmp	r0, #0
 800c532:	d104      	bne.n	800c53e <_svfprintf_r+0x992>
 800c534:	2330      	movs	r3, #48	; 0x30
 800c536:	222b      	movs	r2, #43	; 0x2b
 800c538:	708b      	strb	r3, [r1, #2]
 800c53a:	ab1e      	add	r3, sp, #120	; 0x78
 800c53c:	18d2      	adds	r2, r2, r3
 800c53e:	3430      	adds	r4, #48	; 0x30
 800c540:	1c53      	adds	r3, r2, #1
 800c542:	7014      	strb	r4, [r2, #0]
 800c544:	e669      	b.n	800c21a <_svfprintf_r+0x66e>
 800c546:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c548:	42ab      	cmp	r3, r5
 800c54a:	dd12      	ble.n	800c572 <_svfprintf_r+0x9c6>
 800c54c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c54e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c550:	4694      	mov	ip, r2
 800c552:	4463      	add	r3, ip
 800c554:	9309      	str	r3, [sp, #36]	; 0x24
 800c556:	2367      	movs	r3, #103	; 0x67
 800c558:	930f      	str	r3, [sp, #60]	; 0x3c
 800c55a:	2d00      	cmp	r5, #0
 800c55c:	dc11      	bgt.n	800c582 <_svfprintf_r+0x9d6>
 800c55e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c560:	1b5b      	subs	r3, r3, r5
 800c562:	3301      	adds	r3, #1
 800c564:	e00c      	b.n	800c580 <_svfprintf_r+0x9d4>
 800c566:	2b00      	cmp	r3, #0
 800c568:	d01b      	beq.n	800c5a2 <_svfprintf_r+0x9f6>
 800c56a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c56c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c56e:	3301      	adds	r3, #1
 800c570:	e7d1      	b.n	800c516 <_svfprintf_r+0x96a>
 800c572:	2367      	movs	r3, #103	; 0x67
 800c574:	9509      	str	r5, [sp, #36]	; 0x24
 800c576:	930f      	str	r3, [sp, #60]	; 0x3c
 800c578:	07f3      	lsls	r3, r6, #31
 800c57a:	d502      	bpl.n	800c582 <_svfprintf_r+0x9d6>
 800c57c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c57e:	18eb      	adds	r3, r5, r3
 800c580:	9309      	str	r3, [sp, #36]	; 0x24
 800c582:	2380      	movs	r3, #128	; 0x80
 800c584:	0032      	movs	r2, r6
 800c586:	00db      	lsls	r3, r3, #3
 800c588:	401a      	ands	r2, r3
 800c58a:	9211      	str	r2, [sp, #68]	; 0x44
 800c58c:	2200      	movs	r2, #0
 800c58e:	9210      	str	r2, [sp, #64]	; 0x40
 800c590:	421e      	tst	r6, r3
 800c592:	d100      	bne.n	800c596 <_svfprintf_r+0x9ea>
 800c594:	e65d      	b.n	800c252 <_svfprintf_r+0x6a6>
 800c596:	4295      	cmp	r5, r2
 800c598:	dc25      	bgt.n	800c5e6 <_svfprintf_r+0xa3a>
 800c59a:	9211      	str	r2, [sp, #68]	; 0x44
 800c59c:	e659      	b.n	800c252 <_svfprintf_r+0x6a6>
 800c59e:	9509      	str	r5, [sp, #36]	; 0x24
 800c5a0:	e7bb      	b.n	800c51a <_svfprintf_r+0x96e>
 800c5a2:	2366      	movs	r3, #102	; 0x66
 800c5a4:	9209      	str	r2, [sp, #36]	; 0x24
 800c5a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c5a8:	e7eb      	b.n	800c582 <_svfprintf_r+0x9d6>
 800c5aa:	42ab      	cmp	r3, r5
 800c5ac:	da0e      	bge.n	800c5cc <_svfprintf_r+0xa20>
 800c5ae:	1aed      	subs	r5, r5, r3
 800c5b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c5b2:	785b      	ldrb	r3, [r3, #1]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d012      	beq.n	800c5de <_svfprintf_r+0xa32>
 800c5b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	9311      	str	r3, [sp, #68]	; 0x44
 800c5be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c5c0:	3301      	adds	r3, #1
 800c5c2:	9312      	str	r3, [sp, #72]	; 0x48
 800c5c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c5c6:	781b      	ldrb	r3, [r3, #0]
 800c5c8:	2bff      	cmp	r3, #255	; 0xff
 800c5ca:	d1ee      	bne.n	800c5aa <_svfprintf_r+0x9fe>
 800c5cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c5ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c5d0:	189b      	adds	r3, r3, r2
 800c5d2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c5d4:	4353      	muls	r3, r2
 800c5d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5d8:	189b      	adds	r3, r3, r2
 800c5da:	9309      	str	r3, [sp, #36]	; 0x24
 800c5dc:	e639      	b.n	800c252 <_svfprintf_r+0x6a6>
 800c5de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c5e0:	3301      	adds	r3, #1
 800c5e2:	9310      	str	r3, [sp, #64]	; 0x40
 800c5e4:	e7ee      	b.n	800c5c4 <_svfprintf_r+0xa18>
 800c5e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c5e8:	9311      	str	r3, [sp, #68]	; 0x44
 800c5ea:	e7eb      	b.n	800c5c4 <_svfprintf_r+0xa18>
 800c5ec:	1d23      	adds	r3, r4, #4
 800c5ee:	930d      	str	r3, [sp, #52]	; 0x34
 800c5f0:	06b3      	lsls	r3, r6, #26
 800c5f2:	d509      	bpl.n	800c608 <_svfprintf_r+0xa5c>
 800c5f4:	6823      	ldr	r3, [r4, #0]
 800c5f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c5f8:	601a      	str	r2, [r3, #0]
 800c5fa:	17d2      	asrs	r2, r2, #31
 800c5fc:	605a      	str	r2, [r3, #4]
 800c5fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c600:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800c602:	9308      	str	r3, [sp, #32]
 800c604:	f7ff fb0d 	bl	800bc22 <_svfprintf_r+0x76>
 800c608:	06f3      	lsls	r3, r6, #27
 800c60a:	d503      	bpl.n	800c614 <_svfprintf_r+0xa68>
 800c60c:	6823      	ldr	r3, [r4, #0]
 800c60e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c610:	601a      	str	r2, [r3, #0]
 800c612:	e7f4      	b.n	800c5fe <_svfprintf_r+0xa52>
 800c614:	0673      	lsls	r3, r6, #25
 800c616:	d503      	bpl.n	800c620 <_svfprintf_r+0xa74>
 800c618:	6823      	ldr	r3, [r4, #0]
 800c61a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c61c:	801a      	strh	r2, [r3, #0]
 800c61e:	e7ee      	b.n	800c5fe <_svfprintf_r+0xa52>
 800c620:	05b6      	lsls	r6, r6, #22
 800c622:	d5f3      	bpl.n	800c60c <_svfprintf_r+0xa60>
 800c624:	6823      	ldr	r3, [r4, #0]
 800c626:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c628:	701a      	strb	r2, [r3, #0]
 800c62a:	e7e8      	b.n	800c5fe <_svfprintf_r+0xa52>
 800c62c:	2310      	movs	r3, #16
 800c62e:	431e      	orrs	r6, r3
 800c630:	2320      	movs	r3, #32
 800c632:	0030      	movs	r0, r6
 800c634:	4018      	ands	r0, r3
 800c636:	421e      	tst	r6, r3
 800c638:	d00f      	beq.n	800c65a <_svfprintf_r+0xaae>
 800c63a:	3b19      	subs	r3, #25
 800c63c:	3407      	adds	r4, #7
 800c63e:	439c      	bics	r4, r3
 800c640:	0022      	movs	r2, r4
 800c642:	ca18      	ldmia	r2!, {r3, r4}
 800c644:	9306      	str	r3, [sp, #24]
 800c646:	9407      	str	r4, [sp, #28]
 800c648:	920d      	str	r2, [sp, #52]	; 0x34
 800c64a:	4bc9      	ldr	r3, [pc, #804]	; (800c970 <_svfprintf_r+0xdc4>)
 800c64c:	401e      	ands	r6, r3
 800c64e:	2300      	movs	r3, #0
 800c650:	221b      	movs	r2, #27
 800c652:	a91e      	add	r1, sp, #120	; 0x78
 800c654:	1852      	adds	r2, r2, r1
 800c656:	2100      	movs	r1, #0
 800c658:	e430      	b.n	800bebc <_svfprintf_r+0x310>
 800c65a:	0022      	movs	r2, r4
 800c65c:	ca08      	ldmia	r2!, {r3}
 800c65e:	0031      	movs	r1, r6
 800c660:	920d      	str	r2, [sp, #52]	; 0x34
 800c662:	2210      	movs	r2, #16
 800c664:	4011      	ands	r1, r2
 800c666:	4216      	tst	r6, r2
 800c668:	d002      	beq.n	800c670 <_svfprintf_r+0xac4>
 800c66a:	9306      	str	r3, [sp, #24]
 800c66c:	9007      	str	r0, [sp, #28]
 800c66e:	e7ec      	b.n	800c64a <_svfprintf_r+0xa9e>
 800c670:	2240      	movs	r2, #64	; 0x40
 800c672:	0030      	movs	r0, r6
 800c674:	4010      	ands	r0, r2
 800c676:	4216      	tst	r6, r2
 800c678:	d003      	beq.n	800c682 <_svfprintf_r+0xad6>
 800c67a:	b29b      	uxth	r3, r3
 800c67c:	9306      	str	r3, [sp, #24]
 800c67e:	9107      	str	r1, [sp, #28]
 800c680:	e7e3      	b.n	800c64a <_svfprintf_r+0xa9e>
 800c682:	2280      	movs	r2, #128	; 0x80
 800c684:	0031      	movs	r1, r6
 800c686:	0092      	lsls	r2, r2, #2
 800c688:	4011      	ands	r1, r2
 800c68a:	4216      	tst	r6, r2
 800c68c:	d0f6      	beq.n	800c67c <_svfprintf_r+0xad0>
 800c68e:	b2db      	uxtb	r3, r3
 800c690:	e7eb      	b.n	800c66a <_svfprintf_r+0xabe>
 800c692:	0023      	movs	r3, r4
 800c694:	cb04      	ldmia	r3!, {r2}
 800c696:	49b7      	ldr	r1, [pc, #732]	; (800c974 <_svfprintf_r+0xdc8>)
 800c698:	9206      	str	r2, [sp, #24]
 800c69a:	aa25      	add	r2, sp, #148	; 0x94
 800c69c:	8011      	strh	r1, [r2, #0]
 800c69e:	4ab6      	ldr	r2, [pc, #728]	; (800c978 <_svfprintf_r+0xdcc>)
 800c6a0:	930d      	str	r3, [sp, #52]	; 0x34
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	921f      	str	r2, [sp, #124]	; 0x7c
 800c6a6:	2278      	movs	r2, #120	; 0x78
 800c6a8:	9307      	str	r3, [sp, #28]
 800c6aa:	3302      	adds	r3, #2
 800c6ac:	431e      	orrs	r6, r3
 800c6ae:	920f      	str	r2, [sp, #60]	; 0x3c
 800c6b0:	e7ce      	b.n	800c650 <_svfprintf_r+0xaa4>
 800c6b2:	0023      	movs	r3, r4
 800c6b4:	cb04      	ldmia	r3!, {r2}
 800c6b6:	2400      	movs	r4, #0
 800c6b8:	930d      	str	r3, [sp, #52]	; 0x34
 800c6ba:	231b      	movs	r3, #27
 800c6bc:	9208      	str	r2, [sp, #32]
 800c6be:	aa1e      	add	r2, sp, #120	; 0x78
 800c6c0:	189b      	adds	r3, r3, r2
 800c6c2:	701c      	strb	r4, [r3, #0]
 800c6c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	d00e      	beq.n	800c6e8 <_svfprintf_r+0xb3c>
 800c6ca:	0021      	movs	r1, r4
 800c6cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6ce:	9808      	ldr	r0, [sp, #32]
 800c6d0:	f002 f83a 	bl	800e748 <memchr>
 800c6d4:	900c      	str	r0, [sp, #48]	; 0x30
 800c6d6:	42a0      	cmp	r0, r4
 800c6d8:	d100      	bne.n	800c6dc <_svfprintf_r+0xb30>
 800c6da:	e10d      	b.n	800c8f8 <_svfprintf_r+0xd4c>
 800c6dc:	9a08      	ldr	r2, [sp, #32]
 800c6de:	1a83      	subs	r3, r0, r2
 800c6e0:	9309      	str	r3, [sp, #36]	; 0x24
 800c6e2:	0023      	movs	r3, r4
 800c6e4:	940c      	str	r4, [sp, #48]	; 0x30
 800c6e6:	e44e      	b.n	800bf86 <_svfprintf_r+0x3da>
 800c6e8:	9808      	ldr	r0, [sp, #32]
 800c6ea:	f7f3 fd0b 	bl	8000104 <strlen>
 800c6ee:	9009      	str	r0, [sp, #36]	; 0x24
 800c6f0:	e7f7      	b.n	800c6e2 <_svfprintf_r+0xb36>
 800c6f2:	2310      	movs	r3, #16
 800c6f4:	431e      	orrs	r6, r3
 800c6f6:	2320      	movs	r3, #32
 800c6f8:	0030      	movs	r0, r6
 800c6fa:	4018      	ands	r0, r3
 800c6fc:	421e      	tst	r6, r3
 800c6fe:	d009      	beq.n	800c714 <_svfprintf_r+0xb68>
 800c700:	3b19      	subs	r3, #25
 800c702:	3407      	adds	r4, #7
 800c704:	439c      	bics	r4, r3
 800c706:	0022      	movs	r2, r4
 800c708:	ca18      	ldmia	r2!, {r3, r4}
 800c70a:	9306      	str	r3, [sp, #24]
 800c70c:	9407      	str	r4, [sp, #28]
 800c70e:	920d      	str	r2, [sp, #52]	; 0x34
 800c710:	2301      	movs	r3, #1
 800c712:	e79d      	b.n	800c650 <_svfprintf_r+0xaa4>
 800c714:	0023      	movs	r3, r4
 800c716:	cb04      	ldmia	r3!, {r2}
 800c718:	0031      	movs	r1, r6
 800c71a:	930d      	str	r3, [sp, #52]	; 0x34
 800c71c:	2310      	movs	r3, #16
 800c71e:	4019      	ands	r1, r3
 800c720:	421e      	tst	r6, r3
 800c722:	d003      	beq.n	800c72c <_svfprintf_r+0xb80>
 800c724:	9206      	str	r2, [sp, #24]
 800c726:	9007      	str	r0, [sp, #28]
 800c728:	3b0f      	subs	r3, #15
 800c72a:	e791      	b.n	800c650 <_svfprintf_r+0xaa4>
 800c72c:	2340      	movs	r3, #64	; 0x40
 800c72e:	0030      	movs	r0, r6
 800c730:	4018      	ands	r0, r3
 800c732:	421e      	tst	r6, r3
 800c734:	d003      	beq.n	800c73e <_svfprintf_r+0xb92>
 800c736:	b293      	uxth	r3, r2
 800c738:	9306      	str	r3, [sp, #24]
 800c73a:	9107      	str	r1, [sp, #28]
 800c73c:	e7e8      	b.n	800c710 <_svfprintf_r+0xb64>
 800c73e:	2380      	movs	r3, #128	; 0x80
 800c740:	0031      	movs	r1, r6
 800c742:	009b      	lsls	r3, r3, #2
 800c744:	4019      	ands	r1, r3
 800c746:	421e      	tst	r6, r3
 800c748:	d003      	beq.n	800c752 <_svfprintf_r+0xba6>
 800c74a:	b2d3      	uxtb	r3, r2
 800c74c:	9306      	str	r3, [sp, #24]
 800c74e:	9007      	str	r0, [sp, #28]
 800c750:	e7de      	b.n	800c710 <_svfprintf_r+0xb64>
 800c752:	9206      	str	r2, [sp, #24]
 800c754:	e7f1      	b.n	800c73a <_svfprintf_r+0xb8e>
 800c756:	4b89      	ldr	r3, [pc, #548]	; (800c97c <_svfprintf_r+0xdd0>)
 800c758:	0030      	movs	r0, r6
 800c75a:	931f      	str	r3, [sp, #124]	; 0x7c
 800c75c:	2320      	movs	r3, #32
 800c75e:	4018      	ands	r0, r3
 800c760:	421e      	tst	r6, r3
 800c762:	d01a      	beq.n	800c79a <_svfprintf_r+0xbee>
 800c764:	3b19      	subs	r3, #25
 800c766:	3407      	adds	r4, #7
 800c768:	439c      	bics	r4, r3
 800c76a:	0022      	movs	r2, r4
 800c76c:	ca18      	ldmia	r2!, {r3, r4}
 800c76e:	9306      	str	r3, [sp, #24]
 800c770:	9407      	str	r4, [sp, #28]
 800c772:	920d      	str	r2, [sp, #52]	; 0x34
 800c774:	07f3      	lsls	r3, r6, #31
 800c776:	d50a      	bpl.n	800c78e <_svfprintf_r+0xbe2>
 800c778:	9b06      	ldr	r3, [sp, #24]
 800c77a:	9a07      	ldr	r2, [sp, #28]
 800c77c:	4313      	orrs	r3, r2
 800c77e:	d006      	beq.n	800c78e <_svfprintf_r+0xbe2>
 800c780:	2230      	movs	r2, #48	; 0x30
 800c782:	ab25      	add	r3, sp, #148	; 0x94
 800c784:	701a      	strb	r2, [r3, #0]
 800c786:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c788:	705a      	strb	r2, [r3, #1]
 800c78a:	2302      	movs	r3, #2
 800c78c:	431e      	orrs	r6, r3
 800c78e:	4b78      	ldr	r3, [pc, #480]	; (800c970 <_svfprintf_r+0xdc4>)
 800c790:	401e      	ands	r6, r3
 800c792:	2302      	movs	r3, #2
 800c794:	e75c      	b.n	800c650 <_svfprintf_r+0xaa4>
 800c796:	4b78      	ldr	r3, [pc, #480]	; (800c978 <_svfprintf_r+0xdcc>)
 800c798:	e7de      	b.n	800c758 <_svfprintf_r+0xbac>
 800c79a:	0023      	movs	r3, r4
 800c79c:	cb04      	ldmia	r3!, {r2}
 800c79e:	0031      	movs	r1, r6
 800c7a0:	930d      	str	r3, [sp, #52]	; 0x34
 800c7a2:	2310      	movs	r3, #16
 800c7a4:	4019      	ands	r1, r3
 800c7a6:	421e      	tst	r6, r3
 800c7a8:	d002      	beq.n	800c7b0 <_svfprintf_r+0xc04>
 800c7aa:	9206      	str	r2, [sp, #24]
 800c7ac:	9007      	str	r0, [sp, #28]
 800c7ae:	e7e1      	b.n	800c774 <_svfprintf_r+0xbc8>
 800c7b0:	2340      	movs	r3, #64	; 0x40
 800c7b2:	0030      	movs	r0, r6
 800c7b4:	4018      	ands	r0, r3
 800c7b6:	421e      	tst	r6, r3
 800c7b8:	d003      	beq.n	800c7c2 <_svfprintf_r+0xc16>
 800c7ba:	b293      	uxth	r3, r2
 800c7bc:	9306      	str	r3, [sp, #24]
 800c7be:	9107      	str	r1, [sp, #28]
 800c7c0:	e7d8      	b.n	800c774 <_svfprintf_r+0xbc8>
 800c7c2:	2380      	movs	r3, #128	; 0x80
 800c7c4:	0031      	movs	r1, r6
 800c7c6:	009b      	lsls	r3, r3, #2
 800c7c8:	4019      	ands	r1, r3
 800c7ca:	421e      	tst	r6, r3
 800c7cc:	d002      	beq.n	800c7d4 <_svfprintf_r+0xc28>
 800c7ce:	b2d3      	uxtb	r3, r2
 800c7d0:	9306      	str	r3, [sp, #24]
 800c7d2:	e7eb      	b.n	800c7ac <_svfprintf_r+0xc00>
 800c7d4:	9206      	str	r2, [sp, #24]
 800c7d6:	e7f2      	b.n	800c7be <_svfprintf_r+0xc12>
 800c7d8:	9b07      	ldr	r3, [sp, #28]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d10a      	bne.n	800c7f4 <_svfprintf_r+0xc48>
 800c7de:	9b06      	ldr	r3, [sp, #24]
 800c7e0:	2b09      	cmp	r3, #9
 800c7e2:	d807      	bhi.n	800c7f4 <_svfprintf_r+0xc48>
 800c7e4:	23e7      	movs	r3, #231	; 0xe7
 800c7e6:	aa1e      	add	r2, sp, #120	; 0x78
 800c7e8:	189b      	adds	r3, r3, r2
 800c7ea:	9a06      	ldr	r2, [sp, #24]
 800c7ec:	3230      	adds	r2, #48	; 0x30
 800c7ee:	701a      	strb	r2, [r3, #0]
 800c7f0:	f000 fc18 	bl	800d024 <_svfprintf_r+0x1478>
 800c7f4:	2680      	movs	r6, #128	; 0x80
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	00f6      	lsls	r6, r6, #3
 800c7fa:	930e      	str	r3, [sp, #56]	; 0x38
 800c7fc:	ad58      	add	r5, sp, #352	; 0x160
 800c7fe:	4026      	ands	r6, r4
 800c800:	220a      	movs	r2, #10
 800c802:	9806      	ldr	r0, [sp, #24]
 800c804:	9907      	ldr	r1, [sp, #28]
 800c806:	2300      	movs	r3, #0
 800c808:	f7f3 fe4c 	bl	80004a4 <__aeabi_uldivmod>
 800c80c:	1e6b      	subs	r3, r5, #1
 800c80e:	3230      	adds	r2, #48	; 0x30
 800c810:	9308      	str	r3, [sp, #32]
 800c812:	701a      	strb	r2, [r3, #0]
 800c814:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c816:	900c      	str	r0, [sp, #48]	; 0x30
 800c818:	3301      	adds	r3, #1
 800c81a:	9110      	str	r1, [sp, #64]	; 0x40
 800c81c:	930e      	str	r3, [sp, #56]	; 0x38
 800c81e:	2e00      	cmp	r6, #0
 800c820:	d01d      	beq.n	800c85e <_svfprintf_r+0xcb2>
 800c822:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c824:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c826:	781b      	ldrb	r3, [r3, #0]
 800c828:	429a      	cmp	r2, r3
 800c82a:	d118      	bne.n	800c85e <_svfprintf_r+0xcb2>
 800c82c:	2aff      	cmp	r2, #255	; 0xff
 800c82e:	d016      	beq.n	800c85e <_svfprintf_r+0xcb2>
 800c830:	9b07      	ldr	r3, [sp, #28]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d102      	bne.n	800c83c <_svfprintf_r+0xc90>
 800c836:	9b06      	ldr	r3, [sp, #24]
 800c838:	2b09      	cmp	r3, #9
 800c83a:	d910      	bls.n	800c85e <_svfprintf_r+0xcb2>
 800c83c:	9b08      	ldr	r3, [sp, #32]
 800c83e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c840:	991d      	ldr	r1, [sp, #116]	; 0x74
 800c842:	1a9b      	subs	r3, r3, r2
 800c844:	0018      	movs	r0, r3
 800c846:	9308      	str	r3, [sp, #32]
 800c848:	f7fd ffd1 	bl	800a7ee <strncpy>
 800c84c:	2200      	movs	r2, #0
 800c84e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c850:	920e      	str	r2, [sp, #56]	; 0x38
 800c852:	785b      	ldrb	r3, [r3, #1]
 800c854:	1e5a      	subs	r2, r3, #1
 800c856:	4193      	sbcs	r3, r2
 800c858:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c85a:	18d3      	adds	r3, r2, r3
 800c85c:	9312      	str	r3, [sp, #72]	; 0x48
 800c85e:	9b07      	ldr	r3, [sp, #28]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d10f      	bne.n	800c884 <_svfprintf_r+0xcd8>
 800c864:	9b06      	ldr	r3, [sp, #24]
 800c866:	2b09      	cmp	r3, #9
 800c868:	d80c      	bhi.n	800c884 <_svfprintf_r+0xcd8>
 800c86a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c86c:	9a08      	ldr	r2, [sp, #32]
 800c86e:	9319      	str	r3, [sp, #100]	; 0x64
 800c870:	ab58      	add	r3, sp, #352	; 0x160
 800c872:	1a9b      	subs	r3, r3, r2
 800c874:	9309      	str	r3, [sp, #36]	; 0x24
 800c876:	2300      	movs	r3, #0
 800c878:	0026      	movs	r6, r4
 800c87a:	930c      	str	r3, [sp, #48]	; 0x30
 800c87c:	001d      	movs	r5, r3
 800c87e:	9310      	str	r3, [sp, #64]	; 0x40
 800c880:	9311      	str	r3, [sp, #68]	; 0x44
 800c882:	e4f2      	b.n	800c26a <_svfprintf_r+0x6be>
 800c884:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c886:	9d08      	ldr	r5, [sp, #32]
 800c888:	9306      	str	r3, [sp, #24]
 800c88a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c88c:	9307      	str	r3, [sp, #28]
 800c88e:	e7b7      	b.n	800c800 <_svfprintf_r+0xc54>
 800c890:	200f      	movs	r0, #15
 800c892:	ab58      	add	r3, sp, #352	; 0x160
 800c894:	9308      	str	r3, [sp, #32]
 800c896:	9b08      	ldr	r3, [sp, #32]
 800c898:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c89a:	3b01      	subs	r3, #1
 800c89c:	9308      	str	r3, [sp, #32]
 800c89e:	9b06      	ldr	r3, [sp, #24]
 800c8a0:	4003      	ands	r3, r0
 800c8a2:	5cd3      	ldrb	r3, [r2, r3]
 800c8a4:	9a08      	ldr	r2, [sp, #32]
 800c8a6:	7013      	strb	r3, [r2, #0]
 800c8a8:	9b07      	ldr	r3, [sp, #28]
 800c8aa:	0719      	lsls	r1, r3, #28
 800c8ac:	9b06      	ldr	r3, [sp, #24]
 800c8ae:	091a      	lsrs	r2, r3, #4
 800c8b0:	9b07      	ldr	r3, [sp, #28]
 800c8b2:	4311      	orrs	r1, r2
 800c8b4:	091b      	lsrs	r3, r3, #4
 800c8b6:	9307      	str	r3, [sp, #28]
 800c8b8:	000b      	movs	r3, r1
 800c8ba:	9a07      	ldr	r2, [sp, #28]
 800c8bc:	9106      	str	r1, [sp, #24]
 800c8be:	4313      	orrs	r3, r2
 800c8c0:	d1e9      	bne.n	800c896 <_svfprintf_r+0xcea>
 800c8c2:	e7d2      	b.n	800c86a <_svfprintf_r+0xcbe>
 800c8c4:	aa58      	add	r2, sp, #352	; 0x160
 800c8c6:	9208      	str	r2, [sp, #32]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d1ce      	bne.n	800c86a <_svfprintf_r+0xcbe>
 800c8cc:	07f6      	lsls	r6, r6, #31
 800c8ce:	d5cc      	bpl.n	800c86a <_svfprintf_r+0xcbe>
 800c8d0:	aa1e      	add	r2, sp, #120	; 0x78
 800c8d2:	33e7      	adds	r3, #231	; 0xe7
 800c8d4:	189b      	adds	r3, r3, r2
 800c8d6:	2230      	movs	r2, #48	; 0x30
 800c8d8:	e789      	b.n	800c7ee <_svfprintf_r+0xc42>
 800c8da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d100      	bne.n	800c8e2 <_svfprintf_r+0xd36>
 800c8e0:	e364      	b.n	800cfac <_svfprintf_r+0x1400>
 800c8e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c8e4:	211b      	movs	r1, #27
 800c8e6:	ab3f      	add	r3, sp, #252	; 0xfc
 800c8e8:	701a      	strb	r2, [r3, #0]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	a81e      	add	r0, sp, #120	; 0x78
 800c8ee:	1809      	adds	r1, r1, r0
 800c8f0:	700a      	strb	r2, [r1, #0]
 800c8f2:	940d      	str	r4, [sp, #52]	; 0x34
 800c8f4:	f7ff fabd 	bl	800be72 <_svfprintf_r+0x2c6>
 800c8f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8fa:	f7ff fb44 	bl	800bf86 <_svfprintf_r+0x3da>
 800c8fe:	2010      	movs	r0, #16
 800c900:	1812      	adds	r2, r2, r0
 800c902:	6078      	str	r0, [r7, #4]
 800c904:	922e      	str	r2, [sp, #184]	; 0xb8
 800c906:	932d      	str	r3, [sp, #180]	; 0xb4
 800c908:	2b07      	cmp	r3, #7
 800c90a:	dd08      	ble.n	800c91e <_svfprintf_r+0xd72>
 800c90c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c90e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c910:	aa2c      	add	r2, sp, #176	; 0xb0
 800c912:	f003 fa61 	bl	800fdd8 <__ssprint_r>
 800c916:	2800      	cmp	r0, #0
 800c918:	d000      	beq.n	800c91c <_svfprintf_r+0xd70>
 800c91a:	e326      	b.n	800cf6a <_svfprintf_r+0x13be>
 800c91c:	a92f      	add	r1, sp, #188	; 0xbc
 800c91e:	000f      	movs	r7, r1
 800c920:	3c10      	subs	r4, #16
 800c922:	e4c5      	b.n	800c2b0 <_svfprintf_r+0x704>
 800c924:	2010      	movs	r0, #16
 800c926:	1812      	adds	r2, r2, r0
 800c928:	6078      	str	r0, [r7, #4]
 800c92a:	922e      	str	r2, [sp, #184]	; 0xb8
 800c92c:	932d      	str	r3, [sp, #180]	; 0xb4
 800c92e:	2b07      	cmp	r3, #7
 800c930:	dd08      	ble.n	800c944 <_svfprintf_r+0xd98>
 800c932:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c934:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c936:	aa2c      	add	r2, sp, #176	; 0xb0
 800c938:	f003 fa4e 	bl	800fdd8 <__ssprint_r>
 800c93c:	2800      	cmp	r0, #0
 800c93e:	d000      	beq.n	800c942 <_svfprintf_r+0xd96>
 800c940:	e313      	b.n	800cf6a <_svfprintf_r+0x13be>
 800c942:	a92f      	add	r1, sp, #188	; 0xbc
 800c944:	000f      	movs	r7, r1
 800c946:	3c10      	subs	r4, #16
 800c948:	e50b      	b.n	800c362 <_svfprintf_r+0x7b6>
 800c94a:	2010      	movs	r0, #16
 800c94c:	1812      	adds	r2, r2, r0
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	922e      	str	r2, [sp, #184]	; 0xb8
 800c952:	932d      	str	r3, [sp, #180]	; 0xb4
 800c954:	2b07      	cmp	r3, #7
 800c956:	dd08      	ble.n	800c96a <_svfprintf_r+0xdbe>
 800c958:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c95a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c95c:	aa2c      	add	r2, sp, #176	; 0xb0
 800c95e:	f003 fa3b 	bl	800fdd8 <__ssprint_r>
 800c962:	2800      	cmp	r0, #0
 800c964:	d000      	beq.n	800c968 <_svfprintf_r+0xdbc>
 800c966:	e300      	b.n	800cf6a <_svfprintf_r+0x13be>
 800c968:	a92f      	add	r1, sp, #188	; 0xbc
 800c96a:	000f      	movs	r7, r1
 800c96c:	3c10      	subs	r4, #16
 800c96e:	e518      	b.n	800c3a2 <_svfprintf_r+0x7f6>
 800c970:	fffffbff 	.word	0xfffffbff
 800c974:	00007830 	.word	0x00007830
 800c978:	08012e6c 	.word	0x08012e6c
 800c97c:	08012e7d 	.word	0x08012e7d
 800c980:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c982:	2b65      	cmp	r3, #101	; 0x65
 800c984:	dc00      	bgt.n	800c988 <_svfprintf_r+0xddc>
 800c986:	e241      	b.n	800ce0c <_svfprintf_r+0x1260>
 800c988:	9814      	ldr	r0, [sp, #80]	; 0x50
 800c98a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800c98c:	2200      	movs	r2, #0
 800c98e:	2300      	movs	r3, #0
 800c990:	f7f3 fd5a 	bl	8000448 <__aeabi_dcmpeq>
 800c994:	2800      	cmp	r0, #0
 800c996:	d077      	beq.n	800ca88 <_svfprintf_r+0xedc>
 800c998:	4bca      	ldr	r3, [pc, #808]	; (800ccc4 <_svfprintf_r+0x1118>)
 800c99a:	603b      	str	r3, [r7, #0]
 800c99c:	2301      	movs	r3, #1
 800c99e:	607b      	str	r3, [r7, #4]
 800c9a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c9a2:	3708      	adds	r7, #8
 800c9a4:	3301      	adds	r3, #1
 800c9a6:	932e      	str	r3, [sp, #184]	; 0xb8
 800c9a8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c9aa:	3301      	adds	r3, #1
 800c9ac:	932d      	str	r3, [sp, #180]	; 0xb4
 800c9ae:	2b07      	cmp	r3, #7
 800c9b0:	dd08      	ble.n	800c9c4 <_svfprintf_r+0xe18>
 800c9b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c9b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c9b6:	aa2c      	add	r2, sp, #176	; 0xb0
 800c9b8:	f003 fa0e 	bl	800fdd8 <__ssprint_r>
 800c9bc:	2800      	cmp	r0, #0
 800c9be:	d000      	beq.n	800c9c2 <_svfprintf_r+0xe16>
 800c9c0:	e2d3      	b.n	800cf6a <_svfprintf_r+0x13be>
 800c9c2:	af2f      	add	r7, sp, #188	; 0xbc
 800c9c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c9c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	db01      	blt.n	800c9d0 <_svfprintf_r+0xe24>
 800c9cc:	07f3      	lsls	r3, r6, #31
 800c9ce:	d51b      	bpl.n	800ca08 <_svfprintf_r+0xe5c>
 800c9d0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c9d2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c9d4:	603b      	str	r3, [r7, #0]
 800c9d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c9d8:	607b      	str	r3, [r7, #4]
 800c9da:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800c9dc:	3708      	adds	r7, #8
 800c9de:	189b      	adds	r3, r3, r2
 800c9e0:	932e      	str	r3, [sp, #184]	; 0xb8
 800c9e2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c9e4:	3301      	adds	r3, #1
 800c9e6:	932d      	str	r3, [sp, #180]	; 0xb4
 800c9e8:	2b07      	cmp	r3, #7
 800c9ea:	dd08      	ble.n	800c9fe <_svfprintf_r+0xe52>
 800c9ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c9ee:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c9f0:	aa2c      	add	r2, sp, #176	; 0xb0
 800c9f2:	f003 f9f1 	bl	800fdd8 <__ssprint_r>
 800c9f6:	2800      	cmp	r0, #0
 800c9f8:	d000      	beq.n	800c9fc <_svfprintf_r+0xe50>
 800c9fa:	e2b6      	b.n	800cf6a <_svfprintf_r+0x13be>
 800c9fc:	af2f      	add	r7, sp, #188	; 0xbc
 800c9fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca00:	2510      	movs	r5, #16
 800ca02:	1e5c      	subs	r4, r3, #1
 800ca04:	2c00      	cmp	r4, #0
 800ca06:	dc2e      	bgt.n	800ca66 <_svfprintf_r+0xeba>
 800ca08:	0776      	lsls	r6, r6, #29
 800ca0a:	d500      	bpl.n	800ca0e <_svfprintf_r+0xe62>
 800ca0c:	e290      	b.n	800cf30 <_svfprintf_r+0x1384>
 800ca0e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ca10:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ca12:	4293      	cmp	r3, r2
 800ca14:	da00      	bge.n	800ca18 <_svfprintf_r+0xe6c>
 800ca16:	0013      	movs	r3, r2
 800ca18:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ca1a:	18d3      	adds	r3, r2, r3
 800ca1c:	9317      	str	r3, [sp, #92]	; 0x5c
 800ca1e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d007      	beq.n	800ca34 <_svfprintf_r+0xe88>
 800ca24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ca26:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ca28:	aa2c      	add	r2, sp, #176	; 0xb0
 800ca2a:	f003 f9d5 	bl	800fdd8 <__ssprint_r>
 800ca2e:	2800      	cmp	r0, #0
 800ca30:	d000      	beq.n	800ca34 <_svfprintf_r+0xe88>
 800ca32:	e29a      	b.n	800cf6a <_svfprintf_r+0x13be>
 800ca34:	2300      	movs	r3, #0
 800ca36:	932d      	str	r3, [sp, #180]	; 0xb4
 800ca38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d000      	beq.n	800ca40 <_svfprintf_r+0xe94>
 800ca3e:	e2b0      	b.n	800cfa2 <_svfprintf_r+0x13f6>
 800ca40:	af2f      	add	r7, sp, #188	; 0xbc
 800ca42:	e5dc      	b.n	800c5fe <_svfprintf_r+0xa52>
 800ca44:	3210      	adds	r2, #16
 800ca46:	607d      	str	r5, [r7, #4]
 800ca48:	922e      	str	r2, [sp, #184]	; 0xb8
 800ca4a:	932d      	str	r3, [sp, #180]	; 0xb4
 800ca4c:	2b07      	cmp	r3, #7
 800ca4e:	dd08      	ble.n	800ca62 <_svfprintf_r+0xeb6>
 800ca50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ca52:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ca54:	aa2c      	add	r2, sp, #176	; 0xb0
 800ca56:	f003 f9bf 	bl	800fdd8 <__ssprint_r>
 800ca5a:	2800      	cmp	r0, #0
 800ca5c:	d000      	beq.n	800ca60 <_svfprintf_r+0xeb4>
 800ca5e:	e284      	b.n	800cf6a <_svfprintf_r+0x13be>
 800ca60:	a92f      	add	r1, sp, #188	; 0xbc
 800ca62:	000f      	movs	r7, r1
 800ca64:	3c10      	subs	r4, #16
 800ca66:	0039      	movs	r1, r7
 800ca68:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ca6a:	4897      	ldr	r0, [pc, #604]	; (800ccc8 <_svfprintf_r+0x111c>)
 800ca6c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ca6e:	3301      	adds	r3, #1
 800ca70:	3108      	adds	r1, #8
 800ca72:	6038      	str	r0, [r7, #0]
 800ca74:	2c10      	cmp	r4, #16
 800ca76:	dce5      	bgt.n	800ca44 <_svfprintf_r+0xe98>
 800ca78:	607c      	str	r4, [r7, #4]
 800ca7a:	18a4      	adds	r4, r4, r2
 800ca7c:	942e      	str	r4, [sp, #184]	; 0xb8
 800ca7e:	000f      	movs	r7, r1
 800ca80:	932d      	str	r3, [sp, #180]	; 0xb4
 800ca82:	2b07      	cmp	r3, #7
 800ca84:	ddc0      	ble.n	800ca08 <_svfprintf_r+0xe5c>
 800ca86:	e05f      	b.n	800cb48 <_svfprintf_r+0xf9c>
 800ca88:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	dc78      	bgt.n	800cb80 <_svfprintf_r+0xfd4>
 800ca8e:	4b8d      	ldr	r3, [pc, #564]	; (800ccc4 <_svfprintf_r+0x1118>)
 800ca90:	603b      	str	r3, [r7, #0]
 800ca92:	2301      	movs	r3, #1
 800ca94:	607b      	str	r3, [r7, #4]
 800ca96:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ca98:	3708      	adds	r7, #8
 800ca9a:	3301      	adds	r3, #1
 800ca9c:	932e      	str	r3, [sp, #184]	; 0xb8
 800ca9e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800caa0:	3301      	adds	r3, #1
 800caa2:	932d      	str	r3, [sp, #180]	; 0xb4
 800caa4:	2b07      	cmp	r3, #7
 800caa6:	dd08      	ble.n	800caba <_svfprintf_r+0xf0e>
 800caa8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800caaa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800caac:	aa2c      	add	r2, sp, #176	; 0xb0
 800caae:	f003 f993 	bl	800fdd8 <__ssprint_r>
 800cab2:	2800      	cmp	r0, #0
 800cab4:	d000      	beq.n	800cab8 <_svfprintf_r+0xf0c>
 800cab6:	e258      	b.n	800cf6a <_svfprintf_r+0x13be>
 800cab8:	af2f      	add	r7, sp, #188	; 0xbc
 800caba:	990e      	ldr	r1, [sp, #56]	; 0x38
 800cabc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cabe:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800cac0:	430b      	orrs	r3, r1
 800cac2:	2101      	movs	r1, #1
 800cac4:	4031      	ands	r1, r6
 800cac6:	430b      	orrs	r3, r1
 800cac8:	d09e      	beq.n	800ca08 <_svfprintf_r+0xe5c>
 800caca:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800cacc:	603b      	str	r3, [r7, #0]
 800cace:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cad0:	607b      	str	r3, [r7, #4]
 800cad2:	189a      	adds	r2, r3, r2
 800cad4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cad6:	922e      	str	r2, [sp, #184]	; 0xb8
 800cad8:	3301      	adds	r3, #1
 800cada:	932d      	str	r3, [sp, #180]	; 0xb4
 800cadc:	3708      	adds	r7, #8
 800cade:	2b07      	cmp	r3, #7
 800cae0:	dd08      	ble.n	800caf4 <_svfprintf_r+0xf48>
 800cae2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cae4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cae6:	aa2c      	add	r2, sp, #176	; 0xb0
 800cae8:	f003 f976 	bl	800fdd8 <__ssprint_r>
 800caec:	2800      	cmp	r0, #0
 800caee:	d000      	beq.n	800caf2 <_svfprintf_r+0xf46>
 800caf0:	e23b      	b.n	800cf6a <_svfprintf_r+0x13be>
 800caf2:	af2f      	add	r7, sp, #188	; 0xbc
 800caf4:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800caf6:	2c00      	cmp	r4, #0
 800caf8:	da19      	bge.n	800cb2e <_svfprintf_r+0xf82>
 800cafa:	0038      	movs	r0, r7
 800cafc:	2510      	movs	r5, #16
 800cafe:	4264      	negs	r4, r4
 800cb00:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800cb02:	4a71      	ldr	r2, [pc, #452]	; (800ccc8 <_svfprintf_r+0x111c>)
 800cb04:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800cb06:	3101      	adds	r1, #1
 800cb08:	3708      	adds	r7, #8
 800cb0a:	6002      	str	r2, [r0, #0]
 800cb0c:	2c10      	cmp	r4, #16
 800cb0e:	dc25      	bgt.n	800cb5c <_svfprintf_r+0xfb0>
 800cb10:	6044      	str	r4, [r0, #4]
 800cb12:	18e4      	adds	r4, r4, r3
 800cb14:	942e      	str	r4, [sp, #184]	; 0xb8
 800cb16:	912d      	str	r1, [sp, #180]	; 0xb4
 800cb18:	2907      	cmp	r1, #7
 800cb1a:	dd08      	ble.n	800cb2e <_svfprintf_r+0xf82>
 800cb1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cb1e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cb20:	aa2c      	add	r2, sp, #176	; 0xb0
 800cb22:	f003 f959 	bl	800fdd8 <__ssprint_r>
 800cb26:	2800      	cmp	r0, #0
 800cb28:	d000      	beq.n	800cb2c <_svfprintf_r+0xf80>
 800cb2a:	e21e      	b.n	800cf6a <_svfprintf_r+0x13be>
 800cb2c:	af2f      	add	r7, sp, #188	; 0xbc
 800cb2e:	9b08      	ldr	r3, [sp, #32]
 800cb30:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800cb32:	603b      	str	r3, [r7, #0]
 800cb34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb36:	18d2      	adds	r2, r2, r3
 800cb38:	922e      	str	r2, [sp, #184]	; 0xb8
 800cb3a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800cb3c:	607b      	str	r3, [r7, #4]
 800cb3e:	3201      	adds	r2, #1
 800cb40:	922d      	str	r2, [sp, #180]	; 0xb4
 800cb42:	2a07      	cmp	r2, #7
 800cb44:	dc00      	bgt.n	800cb48 <_svfprintf_r+0xf9c>
 800cb46:	e45b      	b.n	800c400 <_svfprintf_r+0x854>
 800cb48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cb4a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cb4c:	aa2c      	add	r2, sp, #176	; 0xb0
 800cb4e:	f003 f943 	bl	800fdd8 <__ssprint_r>
 800cb52:	2800      	cmp	r0, #0
 800cb54:	d000      	beq.n	800cb58 <_svfprintf_r+0xfac>
 800cb56:	e208      	b.n	800cf6a <_svfprintf_r+0x13be>
 800cb58:	af2f      	add	r7, sp, #188	; 0xbc
 800cb5a:	e755      	b.n	800ca08 <_svfprintf_r+0xe5c>
 800cb5c:	3310      	adds	r3, #16
 800cb5e:	6045      	str	r5, [r0, #4]
 800cb60:	932e      	str	r3, [sp, #184]	; 0xb8
 800cb62:	912d      	str	r1, [sp, #180]	; 0xb4
 800cb64:	2907      	cmp	r1, #7
 800cb66:	dd08      	ble.n	800cb7a <_svfprintf_r+0xfce>
 800cb68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cb6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cb6c:	aa2c      	add	r2, sp, #176	; 0xb0
 800cb6e:	f003 f933 	bl	800fdd8 <__ssprint_r>
 800cb72:	2800      	cmp	r0, #0
 800cb74:	d000      	beq.n	800cb78 <_svfprintf_r+0xfcc>
 800cb76:	e1f8      	b.n	800cf6a <_svfprintf_r+0x13be>
 800cb78:	af2f      	add	r7, sp, #188	; 0xbc
 800cb7a:	0038      	movs	r0, r7
 800cb7c:	3c10      	subs	r4, #16
 800cb7e:	e7bf      	b.n	800cb00 <_svfprintf_r+0xf54>
 800cb80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb82:	002c      	movs	r4, r5
 800cb84:	429d      	cmp	r5, r3
 800cb86:	dd00      	ble.n	800cb8a <_svfprintf_r+0xfde>
 800cb88:	001c      	movs	r4, r3
 800cb8a:	2c00      	cmp	r4, #0
 800cb8c:	dd14      	ble.n	800cbb8 <_svfprintf_r+0x100c>
 800cb8e:	9b08      	ldr	r3, [sp, #32]
 800cb90:	607c      	str	r4, [r7, #4]
 800cb92:	603b      	str	r3, [r7, #0]
 800cb94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cb96:	3708      	adds	r7, #8
 800cb98:	18e3      	adds	r3, r4, r3
 800cb9a:	932e      	str	r3, [sp, #184]	; 0xb8
 800cb9c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cb9e:	3301      	adds	r3, #1
 800cba0:	932d      	str	r3, [sp, #180]	; 0xb4
 800cba2:	2b07      	cmp	r3, #7
 800cba4:	dd08      	ble.n	800cbb8 <_svfprintf_r+0x100c>
 800cba6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cba8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cbaa:	aa2c      	add	r2, sp, #176	; 0xb0
 800cbac:	f003 f914 	bl	800fdd8 <__ssprint_r>
 800cbb0:	2800      	cmp	r0, #0
 800cbb2:	d000      	beq.n	800cbb6 <_svfprintf_r+0x100a>
 800cbb4:	e1d9      	b.n	800cf6a <_svfprintf_r+0x13be>
 800cbb6:	af2f      	add	r7, sp, #188	; 0xbc
 800cbb8:	43e3      	mvns	r3, r4
 800cbba:	17db      	asrs	r3, r3, #31
 800cbbc:	401c      	ands	r4, r3
 800cbbe:	1b2c      	subs	r4, r5, r4
 800cbc0:	2c00      	cmp	r4, #0
 800cbc2:	dd18      	ble.n	800cbf6 <_svfprintf_r+0x104a>
 800cbc4:	0039      	movs	r1, r7
 800cbc6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cbc8:	483f      	ldr	r0, [pc, #252]	; (800ccc8 <_svfprintf_r+0x111c>)
 800cbca:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800cbcc:	3301      	adds	r3, #1
 800cbce:	3108      	adds	r1, #8
 800cbd0:	6038      	str	r0, [r7, #0]
 800cbd2:	2c10      	cmp	r4, #16
 800cbd4:	dc7a      	bgt.n	800cccc <_svfprintf_r+0x1120>
 800cbd6:	607c      	str	r4, [r7, #4]
 800cbd8:	18a4      	adds	r4, r4, r2
 800cbda:	000f      	movs	r7, r1
 800cbdc:	942e      	str	r4, [sp, #184]	; 0xb8
 800cbde:	932d      	str	r3, [sp, #180]	; 0xb4
 800cbe0:	2b07      	cmp	r3, #7
 800cbe2:	dd08      	ble.n	800cbf6 <_svfprintf_r+0x104a>
 800cbe4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cbe6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cbe8:	aa2c      	add	r2, sp, #176	; 0xb0
 800cbea:	f003 f8f5 	bl	800fdd8 <__ssprint_r>
 800cbee:	2800      	cmp	r0, #0
 800cbf0:	d000      	beq.n	800cbf4 <_svfprintf_r+0x1048>
 800cbf2:	e1ba      	b.n	800cf6a <_svfprintf_r+0x13be>
 800cbf4:	af2f      	add	r7, sp, #188	; 0xbc
 800cbf6:	9b08      	ldr	r3, [sp, #32]
 800cbf8:	195d      	adds	r5, r3, r5
 800cbfa:	0573      	lsls	r3, r6, #21
 800cbfc:	d50b      	bpl.n	800cc16 <_svfprintf_r+0x106a>
 800cbfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d176      	bne.n	800ccf2 <_svfprintf_r+0x1146>
 800cc04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d176      	bne.n	800ccf8 <_svfprintf_r+0x114c>
 800cc0a:	9b08      	ldr	r3, [sp, #32]
 800cc0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc0e:	189b      	adds	r3, r3, r2
 800cc10:	429d      	cmp	r5, r3
 800cc12:	d900      	bls.n	800cc16 <_svfprintf_r+0x106a>
 800cc14:	001d      	movs	r5, r3
 800cc16:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cc18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	db01      	blt.n	800cc22 <_svfprintf_r+0x1076>
 800cc1e:	07f3      	lsls	r3, r6, #31
 800cc20:	d516      	bpl.n	800cc50 <_svfprintf_r+0x10a4>
 800cc22:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800cc24:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800cc26:	603b      	str	r3, [r7, #0]
 800cc28:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cc2a:	607b      	str	r3, [r7, #4]
 800cc2c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800cc2e:	3708      	adds	r7, #8
 800cc30:	189b      	adds	r3, r3, r2
 800cc32:	932e      	str	r3, [sp, #184]	; 0xb8
 800cc34:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cc36:	3301      	adds	r3, #1
 800cc38:	932d      	str	r3, [sp, #180]	; 0xb4
 800cc3a:	2b07      	cmp	r3, #7
 800cc3c:	dd08      	ble.n	800cc50 <_svfprintf_r+0x10a4>
 800cc3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cc40:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cc42:	aa2c      	add	r2, sp, #176	; 0xb0
 800cc44:	f003 f8c8 	bl	800fdd8 <__ssprint_r>
 800cc48:	2800      	cmp	r0, #0
 800cc4a:	d000      	beq.n	800cc4e <_svfprintf_r+0x10a2>
 800cc4c:	e18d      	b.n	800cf6a <_svfprintf_r+0x13be>
 800cc4e:	af2f      	add	r7, sp, #188	; 0xbc
 800cc50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc52:	9b08      	ldr	r3, [sp, #32]
 800cc54:	4694      	mov	ip, r2
 800cc56:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800cc58:	4463      	add	r3, ip
 800cc5a:	1b5b      	subs	r3, r3, r5
 800cc5c:	1b14      	subs	r4, r2, r4
 800cc5e:	429c      	cmp	r4, r3
 800cc60:	dd00      	ble.n	800cc64 <_svfprintf_r+0x10b8>
 800cc62:	001c      	movs	r4, r3
 800cc64:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800cc66:	2c00      	cmp	r4, #0
 800cc68:	dd12      	ble.n	800cc90 <_svfprintf_r+0x10e4>
 800cc6a:	18e3      	adds	r3, r4, r3
 800cc6c:	932e      	str	r3, [sp, #184]	; 0xb8
 800cc6e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cc70:	603d      	str	r5, [r7, #0]
 800cc72:	3301      	adds	r3, #1
 800cc74:	607c      	str	r4, [r7, #4]
 800cc76:	932d      	str	r3, [sp, #180]	; 0xb4
 800cc78:	3708      	adds	r7, #8
 800cc7a:	2b07      	cmp	r3, #7
 800cc7c:	dd08      	ble.n	800cc90 <_svfprintf_r+0x10e4>
 800cc7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cc80:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cc82:	aa2c      	add	r2, sp, #176	; 0xb0
 800cc84:	f003 f8a8 	bl	800fdd8 <__ssprint_r>
 800cc88:	2800      	cmp	r0, #0
 800cc8a:	d000      	beq.n	800cc8e <_svfprintf_r+0x10e2>
 800cc8c:	e16d      	b.n	800cf6a <_svfprintf_r+0x13be>
 800cc8e:	af2f      	add	r7, sp, #188	; 0xbc
 800cc90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cc94:	2510      	movs	r5, #16
 800cc96:	1ad3      	subs	r3, r2, r3
 800cc98:	43e2      	mvns	r2, r4
 800cc9a:	17d2      	asrs	r2, r2, #31
 800cc9c:	4014      	ands	r4, r2
 800cc9e:	1b1c      	subs	r4, r3, r4
 800cca0:	2c00      	cmp	r4, #0
 800cca2:	dc00      	bgt.n	800cca6 <_svfprintf_r+0x10fa>
 800cca4:	e6b0      	b.n	800ca08 <_svfprintf_r+0xe5c>
 800cca6:	0039      	movs	r1, r7
 800cca8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ccaa:	4807      	ldr	r0, [pc, #28]	; (800ccc8 <_svfprintf_r+0x111c>)
 800ccac:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ccae:	3301      	adds	r3, #1
 800ccb0:	3108      	adds	r1, #8
 800ccb2:	6038      	str	r0, [r7, #0]
 800ccb4:	2c10      	cmp	r4, #16
 800ccb6:	dd00      	ble.n	800ccba <_svfprintf_r+0x110e>
 800ccb8:	e096      	b.n	800cde8 <_svfprintf_r+0x123c>
 800ccba:	1912      	adds	r2, r2, r4
 800ccbc:	607c      	str	r4, [r7, #4]
 800ccbe:	922e      	str	r2, [sp, #184]	; 0xb8
 800ccc0:	e6dd      	b.n	800ca7e <_svfprintf_r+0xed2>
 800ccc2:	46c0      	nop			; (mov r8, r8)
 800ccc4:	08012e8e 	.word	0x08012e8e
 800ccc8:	08012ea0 	.word	0x08012ea0
 800cccc:	2010      	movs	r0, #16
 800ccce:	1812      	adds	r2, r2, r0
 800ccd0:	6078      	str	r0, [r7, #4]
 800ccd2:	922e      	str	r2, [sp, #184]	; 0xb8
 800ccd4:	932d      	str	r3, [sp, #180]	; 0xb4
 800ccd6:	2b07      	cmp	r3, #7
 800ccd8:	dd08      	ble.n	800ccec <_svfprintf_r+0x1140>
 800ccda:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ccdc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ccde:	aa2c      	add	r2, sp, #176	; 0xb0
 800cce0:	f003 f87a 	bl	800fdd8 <__ssprint_r>
 800cce4:	2800      	cmp	r0, #0
 800cce6:	d000      	beq.n	800ccea <_svfprintf_r+0x113e>
 800cce8:	e13f      	b.n	800cf6a <_svfprintf_r+0x13be>
 800ccea:	a92f      	add	r1, sp, #188	; 0xbc
 800ccec:	000f      	movs	r7, r1
 800ccee:	3c10      	subs	r4, #16
 800ccf0:	e768      	b.n	800cbc4 <_svfprintf_r+0x1018>
 800ccf2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d05d      	beq.n	800cdb4 <_svfprintf_r+0x1208>
 800ccf8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ccfa:	3b01      	subs	r3, #1
 800ccfc:	9310      	str	r3, [sp, #64]	; 0x40
 800ccfe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cd00:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800cd02:	603b      	str	r3, [r7, #0]
 800cd04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cd06:	607b      	str	r3, [r7, #4]
 800cd08:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800cd0a:	3708      	adds	r7, #8
 800cd0c:	189b      	adds	r3, r3, r2
 800cd0e:	932e      	str	r3, [sp, #184]	; 0xb8
 800cd10:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cd12:	3301      	adds	r3, #1
 800cd14:	932d      	str	r3, [sp, #180]	; 0xb4
 800cd16:	2b07      	cmp	r3, #7
 800cd18:	dd08      	ble.n	800cd2c <_svfprintf_r+0x1180>
 800cd1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cd1c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cd1e:	aa2c      	add	r2, sp, #176	; 0xb0
 800cd20:	f003 f85a 	bl	800fdd8 <__ssprint_r>
 800cd24:	2800      	cmp	r0, #0
 800cd26:	d000      	beq.n	800cd2a <_svfprintf_r+0x117e>
 800cd28:	e11f      	b.n	800cf6a <_svfprintf_r+0x13be>
 800cd2a:	af2f      	add	r7, sp, #188	; 0xbc
 800cd2c:	9b08      	ldr	r3, [sp, #32]
 800cd2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cd30:	189c      	adds	r4, r3, r2
 800cd32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cd34:	1b64      	subs	r4, r4, r5
 800cd36:	781b      	ldrb	r3, [r3, #0]
 800cd38:	429c      	cmp	r4, r3
 800cd3a:	dd00      	ble.n	800cd3e <_svfprintf_r+0x1192>
 800cd3c:	001c      	movs	r4, r3
 800cd3e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800cd40:	2c00      	cmp	r4, #0
 800cd42:	dd12      	ble.n	800cd6a <_svfprintf_r+0x11be>
 800cd44:	18e3      	adds	r3, r4, r3
 800cd46:	932e      	str	r3, [sp, #184]	; 0xb8
 800cd48:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cd4a:	603d      	str	r5, [r7, #0]
 800cd4c:	3301      	adds	r3, #1
 800cd4e:	607c      	str	r4, [r7, #4]
 800cd50:	932d      	str	r3, [sp, #180]	; 0xb4
 800cd52:	3708      	adds	r7, #8
 800cd54:	2b07      	cmp	r3, #7
 800cd56:	dd08      	ble.n	800cd6a <_svfprintf_r+0x11be>
 800cd58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cd5a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cd5c:	aa2c      	add	r2, sp, #176	; 0xb0
 800cd5e:	f003 f83b 	bl	800fdd8 <__ssprint_r>
 800cd62:	2800      	cmp	r0, #0
 800cd64:	d000      	beq.n	800cd68 <_svfprintf_r+0x11bc>
 800cd66:	e100      	b.n	800cf6a <_svfprintf_r+0x13be>
 800cd68:	af2f      	add	r7, sp, #188	; 0xbc
 800cd6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cd6c:	781a      	ldrb	r2, [r3, #0]
 800cd6e:	43e3      	mvns	r3, r4
 800cd70:	17db      	asrs	r3, r3, #31
 800cd72:	401c      	ands	r4, r3
 800cd74:	1b14      	subs	r4, r2, r4
 800cd76:	2c00      	cmp	r4, #0
 800cd78:	dd18      	ble.n	800cdac <_svfprintf_r+0x1200>
 800cd7a:	0039      	movs	r1, r7
 800cd7c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cd7e:	48aa      	ldr	r0, [pc, #680]	; (800d028 <_svfprintf_r+0x147c>)
 800cd80:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800cd82:	3301      	adds	r3, #1
 800cd84:	3108      	adds	r1, #8
 800cd86:	6038      	str	r0, [r7, #0]
 800cd88:	2c10      	cmp	r4, #16
 800cd8a:	dc1a      	bgt.n	800cdc2 <_svfprintf_r+0x1216>
 800cd8c:	1912      	adds	r2, r2, r4
 800cd8e:	607c      	str	r4, [r7, #4]
 800cd90:	922e      	str	r2, [sp, #184]	; 0xb8
 800cd92:	000f      	movs	r7, r1
 800cd94:	932d      	str	r3, [sp, #180]	; 0xb4
 800cd96:	2b07      	cmp	r3, #7
 800cd98:	dd08      	ble.n	800cdac <_svfprintf_r+0x1200>
 800cd9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cd9c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cd9e:	aa2c      	add	r2, sp, #176	; 0xb0
 800cda0:	f003 f81a 	bl	800fdd8 <__ssprint_r>
 800cda4:	2800      	cmp	r0, #0
 800cda6:	d000      	beq.n	800cdaa <_svfprintf_r+0x11fe>
 800cda8:	e0df      	b.n	800cf6a <_svfprintf_r+0x13be>
 800cdaa:	af2f      	add	r7, sp, #188	; 0xbc
 800cdac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cdae:	781b      	ldrb	r3, [r3, #0]
 800cdb0:	18ed      	adds	r5, r5, r3
 800cdb2:	e724      	b.n	800cbfe <_svfprintf_r+0x1052>
 800cdb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cdb6:	3b01      	subs	r3, #1
 800cdb8:	9312      	str	r3, [sp, #72]	; 0x48
 800cdba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cdbc:	3b01      	subs	r3, #1
 800cdbe:	9311      	str	r3, [sp, #68]	; 0x44
 800cdc0:	e79d      	b.n	800ccfe <_svfprintf_r+0x1152>
 800cdc2:	2010      	movs	r0, #16
 800cdc4:	1812      	adds	r2, r2, r0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	922e      	str	r2, [sp, #184]	; 0xb8
 800cdca:	932d      	str	r3, [sp, #180]	; 0xb4
 800cdcc:	2b07      	cmp	r3, #7
 800cdce:	dd08      	ble.n	800cde2 <_svfprintf_r+0x1236>
 800cdd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cdd2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cdd4:	aa2c      	add	r2, sp, #176	; 0xb0
 800cdd6:	f002 ffff 	bl	800fdd8 <__ssprint_r>
 800cdda:	2800      	cmp	r0, #0
 800cddc:	d000      	beq.n	800cde0 <_svfprintf_r+0x1234>
 800cdde:	e0c4      	b.n	800cf6a <_svfprintf_r+0x13be>
 800cde0:	a92f      	add	r1, sp, #188	; 0xbc
 800cde2:	000f      	movs	r7, r1
 800cde4:	3c10      	subs	r4, #16
 800cde6:	e7c8      	b.n	800cd7a <_svfprintf_r+0x11ce>
 800cde8:	3210      	adds	r2, #16
 800cdea:	607d      	str	r5, [r7, #4]
 800cdec:	922e      	str	r2, [sp, #184]	; 0xb8
 800cdee:	932d      	str	r3, [sp, #180]	; 0xb4
 800cdf0:	2b07      	cmp	r3, #7
 800cdf2:	dd08      	ble.n	800ce06 <_svfprintf_r+0x125a>
 800cdf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cdf6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cdf8:	aa2c      	add	r2, sp, #176	; 0xb0
 800cdfa:	f002 ffed 	bl	800fdd8 <__ssprint_r>
 800cdfe:	2800      	cmp	r0, #0
 800ce00:	d000      	beq.n	800ce04 <_svfprintf_r+0x1258>
 800ce02:	e0b2      	b.n	800cf6a <_svfprintf_r+0x13be>
 800ce04:	a92f      	add	r1, sp, #188	; 0xbc
 800ce06:	000f      	movs	r7, r1
 800ce08:	3c10      	subs	r4, #16
 800ce0a:	e74c      	b.n	800cca6 <_svfprintf_r+0x10fa>
 800ce0c:	003c      	movs	r4, r7
 800ce0e:	9919      	ldr	r1, [sp, #100]	; 0x64
 800ce10:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ce12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ce14:	3101      	adds	r1, #1
 800ce16:	3301      	adds	r3, #1
 800ce18:	3408      	adds	r4, #8
 800ce1a:	2a01      	cmp	r2, #1
 800ce1c:	dc03      	bgt.n	800ce26 <_svfprintf_r+0x127a>
 800ce1e:	2201      	movs	r2, #1
 800ce20:	4216      	tst	r6, r2
 800ce22:	d100      	bne.n	800ce26 <_svfprintf_r+0x127a>
 800ce24:	e07f      	b.n	800cf26 <_svfprintf_r+0x137a>
 800ce26:	9a08      	ldr	r2, [sp, #32]
 800ce28:	912e      	str	r1, [sp, #184]	; 0xb8
 800ce2a:	603a      	str	r2, [r7, #0]
 800ce2c:	2201      	movs	r2, #1
 800ce2e:	932d      	str	r3, [sp, #180]	; 0xb4
 800ce30:	607a      	str	r2, [r7, #4]
 800ce32:	2b07      	cmp	r3, #7
 800ce34:	dd08      	ble.n	800ce48 <_svfprintf_r+0x129c>
 800ce36:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ce38:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ce3a:	aa2c      	add	r2, sp, #176	; 0xb0
 800ce3c:	f002 ffcc 	bl	800fdd8 <__ssprint_r>
 800ce40:	2800      	cmp	r0, #0
 800ce42:	d000      	beq.n	800ce46 <_svfprintf_r+0x129a>
 800ce44:	e091      	b.n	800cf6a <_svfprintf_r+0x13be>
 800ce46:	ac2f      	add	r4, sp, #188	; 0xbc
 800ce48:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ce4a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ce4c:	6023      	str	r3, [r4, #0]
 800ce4e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ce50:	6063      	str	r3, [r4, #4]
 800ce52:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ce54:	3408      	adds	r4, #8
 800ce56:	189b      	adds	r3, r3, r2
 800ce58:	932e      	str	r3, [sp, #184]	; 0xb8
 800ce5a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ce5c:	3301      	adds	r3, #1
 800ce5e:	932d      	str	r3, [sp, #180]	; 0xb4
 800ce60:	2b07      	cmp	r3, #7
 800ce62:	dd07      	ble.n	800ce74 <_svfprintf_r+0x12c8>
 800ce64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ce66:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ce68:	aa2c      	add	r2, sp, #176	; 0xb0
 800ce6a:	f002 ffb5 	bl	800fdd8 <__ssprint_r>
 800ce6e:	2800      	cmp	r0, #0
 800ce70:	d17b      	bne.n	800cf6a <_svfprintf_r+0x13be>
 800ce72:	ac2f      	add	r4, sp, #188	; 0xbc
 800ce74:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ce76:	2200      	movs	r2, #0
 800ce78:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ce7a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ce7c:	9309      	str	r3, [sp, #36]	; 0x24
 800ce7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce80:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800ce82:	1e5d      	subs	r5, r3, #1
 800ce84:	2300      	movs	r3, #0
 800ce86:	f7f3 fadf 	bl	8000448 <__aeabi_dcmpeq>
 800ce8a:	2800      	cmp	r0, #0
 800ce8c:	d126      	bne.n	800cedc <_svfprintf_r+0x1330>
 800ce8e:	9b08      	ldr	r3, [sp, #32]
 800ce90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce92:	3301      	adds	r3, #1
 800ce94:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ce96:	6023      	str	r3, [r4, #0]
 800ce98:	1e7b      	subs	r3, r7, #1
 800ce9a:	3201      	adds	r2, #1
 800ce9c:	185b      	adds	r3, r3, r1
 800ce9e:	6065      	str	r5, [r4, #4]
 800cea0:	932e      	str	r3, [sp, #184]	; 0xb8
 800cea2:	922d      	str	r2, [sp, #180]	; 0xb4
 800cea4:	3408      	adds	r4, #8
 800cea6:	2a07      	cmp	r2, #7
 800cea8:	dd07      	ble.n	800ceba <_svfprintf_r+0x130e>
 800ceaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ceac:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ceae:	aa2c      	add	r2, sp, #176	; 0xb0
 800ceb0:	f002 ff92 	bl	800fdd8 <__ssprint_r>
 800ceb4:	2800      	cmp	r0, #0
 800ceb6:	d158      	bne.n	800cf6a <_svfprintf_r+0x13be>
 800ceb8:	ac2f      	add	r4, sp, #188	; 0xbc
 800ceba:	ab28      	add	r3, sp, #160	; 0xa0
 800cebc:	6023      	str	r3, [r4, #0]
 800cebe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cec0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cec2:	6063      	str	r3, [r4, #4]
 800cec4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800cec6:	189b      	adds	r3, r3, r2
 800cec8:	932e      	str	r3, [sp, #184]	; 0xb8
 800ceca:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cecc:	3301      	adds	r3, #1
 800cece:	932d      	str	r3, [sp, #180]	; 0xb4
 800ced0:	2b07      	cmp	r3, #7
 800ced2:	dd00      	ble.n	800ced6 <_svfprintf_r+0x132a>
 800ced4:	e638      	b.n	800cb48 <_svfprintf_r+0xf9c>
 800ced6:	3408      	adds	r4, #8
 800ced8:	0027      	movs	r7, r4
 800ceda:	e595      	b.n	800ca08 <_svfprintf_r+0xe5c>
 800cedc:	2710      	movs	r7, #16
 800cede:	2d00      	cmp	r5, #0
 800cee0:	ddeb      	ble.n	800ceba <_svfprintf_r+0x130e>
 800cee2:	0021      	movs	r1, r4
 800cee4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cee6:	4850      	ldr	r0, [pc, #320]	; (800d028 <_svfprintf_r+0x147c>)
 800cee8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ceea:	3301      	adds	r3, #1
 800ceec:	3108      	adds	r1, #8
 800ceee:	6020      	str	r0, [r4, #0]
 800cef0:	2d10      	cmp	r5, #16
 800cef2:	dc07      	bgt.n	800cf04 <_svfprintf_r+0x1358>
 800cef4:	6065      	str	r5, [r4, #4]
 800cef6:	000c      	movs	r4, r1
 800cef8:	18ad      	adds	r5, r5, r2
 800cefa:	952e      	str	r5, [sp, #184]	; 0xb8
 800cefc:	932d      	str	r3, [sp, #180]	; 0xb4
 800cefe:	2b07      	cmp	r3, #7
 800cf00:	dddb      	ble.n	800ceba <_svfprintf_r+0x130e>
 800cf02:	e7d2      	b.n	800ceaa <_svfprintf_r+0x12fe>
 800cf04:	3210      	adds	r2, #16
 800cf06:	6067      	str	r7, [r4, #4]
 800cf08:	922e      	str	r2, [sp, #184]	; 0xb8
 800cf0a:	932d      	str	r3, [sp, #180]	; 0xb4
 800cf0c:	2b07      	cmp	r3, #7
 800cf0e:	dd07      	ble.n	800cf20 <_svfprintf_r+0x1374>
 800cf10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cf12:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cf14:	aa2c      	add	r2, sp, #176	; 0xb0
 800cf16:	f002 ff5f 	bl	800fdd8 <__ssprint_r>
 800cf1a:	2800      	cmp	r0, #0
 800cf1c:	d125      	bne.n	800cf6a <_svfprintf_r+0x13be>
 800cf1e:	a92f      	add	r1, sp, #188	; 0xbc
 800cf20:	000c      	movs	r4, r1
 800cf22:	3d10      	subs	r5, #16
 800cf24:	e7dd      	b.n	800cee2 <_svfprintf_r+0x1336>
 800cf26:	9808      	ldr	r0, [sp, #32]
 800cf28:	912e      	str	r1, [sp, #184]	; 0xb8
 800cf2a:	c705      	stmia	r7!, {r0, r2}
 800cf2c:	932d      	str	r3, [sp, #180]	; 0xb4
 800cf2e:	e7e6      	b.n	800cefe <_svfprintf_r+0x1352>
 800cf30:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800cf32:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800cf34:	2510      	movs	r5, #16
 800cf36:	1a9c      	subs	r4, r3, r2
 800cf38:	2c00      	cmp	r4, #0
 800cf3a:	dc00      	bgt.n	800cf3e <_svfprintf_r+0x1392>
 800cf3c:	e567      	b.n	800ca0e <_svfprintf_r+0xe62>
 800cf3e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cf40:	493a      	ldr	r1, [pc, #232]	; (800d02c <_svfprintf_r+0x1480>)
 800cf42:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800cf44:	3301      	adds	r3, #1
 800cf46:	6039      	str	r1, [r7, #0]
 800cf48:	2c10      	cmp	r4, #16
 800cf4a:	dc19      	bgt.n	800cf80 <_svfprintf_r+0x13d4>
 800cf4c:	607c      	str	r4, [r7, #4]
 800cf4e:	18a4      	adds	r4, r4, r2
 800cf50:	942e      	str	r4, [sp, #184]	; 0xb8
 800cf52:	932d      	str	r3, [sp, #180]	; 0xb4
 800cf54:	2b07      	cmp	r3, #7
 800cf56:	dc00      	bgt.n	800cf5a <_svfprintf_r+0x13ae>
 800cf58:	e559      	b.n	800ca0e <_svfprintf_r+0xe62>
 800cf5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cf5c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cf5e:	aa2c      	add	r2, sp, #176	; 0xb0
 800cf60:	f002 ff3a 	bl	800fdd8 <__ssprint_r>
 800cf64:	2800      	cmp	r0, #0
 800cf66:	d100      	bne.n	800cf6a <_svfprintf_r+0x13be>
 800cf68:	e551      	b.n	800ca0e <_svfprintf_r+0xe62>
 800cf6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d101      	bne.n	800cf74 <_svfprintf_r+0x13c8>
 800cf70:	f7ff f845 	bl	800bffe <_svfprintf_r+0x452>
 800cf74:	0019      	movs	r1, r3
 800cf76:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cf78:	f7fd fd80 	bl	800aa7c <_free_r>
 800cf7c:	f7ff f83f 	bl	800bffe <_svfprintf_r+0x452>
 800cf80:	3210      	adds	r2, #16
 800cf82:	607d      	str	r5, [r7, #4]
 800cf84:	922e      	str	r2, [sp, #184]	; 0xb8
 800cf86:	932d      	str	r3, [sp, #180]	; 0xb4
 800cf88:	3708      	adds	r7, #8
 800cf8a:	2b07      	cmp	r3, #7
 800cf8c:	dd07      	ble.n	800cf9e <_svfprintf_r+0x13f2>
 800cf8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cf90:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cf92:	aa2c      	add	r2, sp, #176	; 0xb0
 800cf94:	f002 ff20 	bl	800fdd8 <__ssprint_r>
 800cf98:	2800      	cmp	r0, #0
 800cf9a:	d1e6      	bne.n	800cf6a <_svfprintf_r+0x13be>
 800cf9c:	af2f      	add	r7, sp, #188	; 0xbc
 800cf9e:	3c10      	subs	r4, #16
 800cfa0:	e7cd      	b.n	800cf3e <_svfprintf_r+0x1392>
 800cfa2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cfa4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cfa6:	f7fd fd69 	bl	800aa7c <_free_r>
 800cfaa:	e549      	b.n	800ca40 <_svfprintf_r+0xe94>
 800cfac:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d101      	bne.n	800cfb6 <_svfprintf_r+0x140a>
 800cfb2:	f7ff f824 	bl	800bffe <_svfprintf_r+0x452>
 800cfb6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cfb8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cfba:	aa2c      	add	r2, sp, #176	; 0xb0
 800cfbc:	f002 ff0c 	bl	800fdd8 <__ssprint_r>
 800cfc0:	f7ff f81d 	bl	800bffe <_svfprintf_r+0x452>
 800cfc4:	0034      	movs	r4, r6
 800cfc6:	2a00      	cmp	r2, #0
 800cfc8:	d101      	bne.n	800cfce <_svfprintf_r+0x1422>
 800cfca:	f7fe ff8c 	bl	800bee6 <_svfprintf_r+0x33a>
 800cfce:	2b01      	cmp	r3, #1
 800cfd0:	d101      	bne.n	800cfd6 <_svfprintf_r+0x142a>
 800cfd2:	f7ff fc01 	bl	800c7d8 <_svfprintf_r+0xc2c>
 800cfd6:	2b02      	cmp	r3, #2
 800cfd8:	d100      	bne.n	800cfdc <_svfprintf_r+0x1430>
 800cfda:	e459      	b.n	800c890 <_svfprintf_r+0xce4>
 800cfdc:	2507      	movs	r5, #7
 800cfde:	ab58      	add	r3, sp, #352	; 0x160
 800cfe0:	9308      	str	r3, [sp, #32]
 800cfe2:	9a08      	ldr	r2, [sp, #32]
 800cfe4:	0013      	movs	r3, r2
 800cfe6:	3b01      	subs	r3, #1
 800cfe8:	9308      	str	r3, [sp, #32]
 800cfea:	9b06      	ldr	r3, [sp, #24]
 800cfec:	9908      	ldr	r1, [sp, #32]
 800cfee:	402b      	ands	r3, r5
 800cff0:	3330      	adds	r3, #48	; 0x30
 800cff2:	700b      	strb	r3, [r1, #0]
 800cff4:	9907      	ldr	r1, [sp, #28]
 800cff6:	074e      	lsls	r6, r1, #29
 800cff8:	9906      	ldr	r1, [sp, #24]
 800cffa:	08c8      	lsrs	r0, r1, #3
 800cffc:	9907      	ldr	r1, [sp, #28]
 800cffe:	4306      	orrs	r6, r0
 800d000:	08c9      	lsrs	r1, r1, #3
 800d002:	9107      	str	r1, [sp, #28]
 800d004:	0031      	movs	r1, r6
 800d006:	9807      	ldr	r0, [sp, #28]
 800d008:	9606      	str	r6, [sp, #24]
 800d00a:	4301      	orrs	r1, r0
 800d00c:	d1e9      	bne.n	800cfe2 <_svfprintf_r+0x1436>
 800d00e:	07e1      	lsls	r1, r4, #31
 800d010:	d400      	bmi.n	800d014 <_svfprintf_r+0x1468>
 800d012:	e42a      	b.n	800c86a <_svfprintf_r+0xcbe>
 800d014:	2b30      	cmp	r3, #48	; 0x30
 800d016:	d100      	bne.n	800d01a <_svfprintf_r+0x146e>
 800d018:	e427      	b.n	800c86a <_svfprintf_r+0xcbe>
 800d01a:	2130      	movs	r1, #48	; 0x30
 800d01c:	9b08      	ldr	r3, [sp, #32]
 800d01e:	3b01      	subs	r3, #1
 800d020:	7019      	strb	r1, [r3, #0]
 800d022:	1e93      	subs	r3, r2, #2
 800d024:	9308      	str	r3, [sp, #32]
 800d026:	e420      	b.n	800c86a <_svfprintf_r+0xcbe>
 800d028:	08012ea0 	.word	0x08012ea0
 800d02c:	08012e90 	.word	0x08012e90

0800d030 <__ssvfscanf_r>:
 800d030:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d032:	4ca7      	ldr	r4, [pc, #668]	; (800d2d0 <__ssvfscanf_r+0x2a0>)
 800d034:	44a5      	add	sp, r4
 800d036:	af02      	add	r7, sp, #8
 800d038:	633b      	str	r3, [r7, #48]	; 0x30
 800d03a:	000b      	movs	r3, r1
 800d03c:	6378      	str	r0, [r7, #52]	; 0x34
 800d03e:	6479      	str	r1, [r7, #68]	; 0x44
 800d040:	61ba      	str	r2, [r7, #24]
 800d042:	220c      	movs	r2, #12
 800d044:	5e9a      	ldrsh	r2, [r3, r2]
 800d046:	2380      	movs	r3, #128	; 0x80
 800d048:	019b      	lsls	r3, r3, #6
 800d04a:	421a      	tst	r2, r3
 800d04c:	d105      	bne.n	800d05a <__ssvfscanf_r+0x2a>
 800d04e:	4313      	orrs	r3, r2
 800d050:	818b      	strh	r3, [r1, #12]
 800d052:	4aa0      	ldr	r2, [pc, #640]	; (800d2d4 <__ssvfscanf_r+0x2a4>)
 800d054:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800d056:	4013      	ands	r3, r2
 800d058:	664b      	str	r3, [r1, #100]	; 0x64
 800d05a:	2300      	movs	r3, #0
 800d05c:	617b      	str	r3, [r7, #20]
 800d05e:	643b      	str	r3, [r7, #64]	; 0x40
 800d060:	62bb      	str	r3, [r7, #40]	; 0x28
 800d062:	627b      	str	r3, [r7, #36]	; 0x24
 800d064:	63bb      	str	r3, [r7, #56]	; 0x38
 800d066:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d068:	69bb      	ldr	r3, [r7, #24]
 800d06a:	69ba      	ldr	r2, [r7, #24]
 800d06c:	781b      	ldrb	r3, [r3, #0]
 800d06e:	3201      	adds	r2, #1
 800d070:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d072:	61ba      	str	r2, [r7, #24]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d100      	bne.n	800d07a <__ssvfscanf_r+0x4a>
 800d078:	e0d7      	b.n	800d22a <__ssvfscanf_r+0x1fa>
 800d07a:	2608      	movs	r6, #8
 800d07c:	2108      	movs	r1, #8
 800d07e:	4a96      	ldr	r2, [pc, #600]	; (800d2d8 <__ssvfscanf_r+0x2a8>)
 800d080:	5cd2      	ldrb	r2, [r2, r3]
 800d082:	4016      	ands	r6, r2
 800d084:	420a      	tst	r2, r1
 800d086:	d01d      	beq.n	800d0c4 <__ssvfscanf_r+0x94>
 800d088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d08a:	685b      	ldr	r3, [r3, #4]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	dd12      	ble.n	800d0b6 <__ssvfscanf_r+0x86>
 800d090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d092:	4991      	ldr	r1, [pc, #580]	; (800d2d8 <__ssvfscanf_r+0x2a8>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	781a      	ldrb	r2, [r3, #0]
 800d098:	5c8a      	ldrb	r2, [r1, r2]
 800d09a:	2108      	movs	r1, #8
 800d09c:	420a      	tst	r2, r1
 800d09e:	d0e3      	beq.n	800d068 <__ssvfscanf_r+0x38>
 800d0a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d0a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d0a4:	3201      	adds	r2, #1
 800d0a6:	63ba      	str	r2, [r7, #56]	; 0x38
 800d0a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d0aa:	3301      	adds	r3, #1
 800d0ac:	6852      	ldr	r2, [r2, #4]
 800d0ae:	600b      	str	r3, [r1, #0]
 800d0b0:	3a01      	subs	r2, #1
 800d0b2:	604a      	str	r2, [r1, #4]
 800d0b4:	e7e8      	b.n	800d088 <__ssvfscanf_r+0x58>
 800d0b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d0b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d0ba:	f002 ff4d 	bl	800ff58 <__ssrefill_r>
 800d0be:	2800      	cmp	r0, #0
 800d0c0:	d0e6      	beq.n	800d090 <__ssvfscanf_r+0x60>
 800d0c2:	e7d1      	b.n	800d068 <__ssvfscanf_r+0x38>
 800d0c4:	2b25      	cmp	r3, #37	; 0x25
 800d0c6:	d165      	bne.n	800d194 <__ssvfscanf_r+0x164>
 800d0c8:	250a      	movs	r5, #10
 800d0ca:	2480      	movs	r4, #128	; 0x80
 800d0cc:	69ba      	ldr	r2, [r7, #24]
 800d0ce:	63fe      	str	r6, [r7, #60]	; 0x3c
 800d0d0:	3b16      	subs	r3, #22
 800d0d2:	69b9      	ldr	r1, [r7, #24]
 800d0d4:	3101      	adds	r1, #1
 800d0d6:	61b9      	str	r1, [r7, #24]
 800d0d8:	7811      	ldrb	r1, [r2, #0]
 800d0da:	0008      	movs	r0, r1
 800d0dc:	3825      	subs	r0, #37	; 0x25
 800d0de:	2855      	cmp	r0, #85	; 0x55
 800d0e0:	d900      	bls.n	800d0e4 <__ssvfscanf_r+0xb4>
 800d0e2:	e170      	b.n	800d3c6 <__ssvfscanf_r+0x396>
 800d0e4:	f7f3 f820 	bl	8000128 <__gnu_thumb1_case_uhi>
 800d0e8:	016f0056 	.word	0x016f0056
 800d0ec:	016f016f 	.word	0x016f016f
 800d0f0:	0081016f 	.word	0x0081016f
 800d0f4:	016f016f 	.word	0x016f016f
 800d0f8:	016f016f 	.word	0x016f016f
 800d0fc:	00b8016f 	.word	0x00b8016f
 800d100:	00b800b8 	.word	0x00b800b8
 800d104:	00b800b8 	.word	0x00b800b8
 800d108:	00b800b8 	.word	0x00b800b8
 800d10c:	00b800b8 	.word	0x00b800b8
 800d110:	016f00b8 	.word	0x016f00b8
 800d114:	016f016f 	.word	0x016f016f
 800d118:	016f016f 	.word	0x016f016f
 800d11c:	016f016f 	.word	0x016f016f
 800d120:	016f00d8 	.word	0x016f00d8
 800d124:	00c1010a 	.word	0x00c1010a
 800d128:	00d800d8 	.word	0x00d800d8
 800d12c:	016f00d8 	.word	0x016f00d8
 800d130:	016f016f 	.word	0x016f016f
 800d134:	009f016f 	.word	0x009f016f
 800d138:	016f016f 	.word	0x016f016f
 800d13c:	016f00c9 	.word	0x016f00c9
 800d140:	016f016f 	.word	0x016f016f
 800d144:	016f00f0 	.word	0x016f00f0
 800d148:	016f016f 	.word	0x016f016f
 800d14c:	00d1016f 	.word	0x00d1016f
 800d150:	016f016f 	.word	0x016f016f
 800d154:	016f00fe 	.word	0x016f00fe
 800d158:	016f016f 	.word	0x016f016f
 800d15c:	016f016f 	.word	0x016f016f
 800d160:	016f00d8 	.word	0x016f00d8
 800d164:	00c3010c 	.word	0x00c3010c
 800d168:	00d800d8 	.word	0x00d800d8
 800d16c:	009400d8 	.word	0x009400d8
 800d170:	009f012f 	.word	0x009f012f
 800d174:	0088016f 	.word	0x0088016f
 800d178:	011200a9 	.word	0x011200a9
 800d17c:	011000cb 	.word	0x011000cb
 800d180:	016f016f 	.word	0x016f016f
 800d184:	00a600f2 	.word	0x00a600f2
 800d188:	016f00cf 	.word	0x016f00cf
 800d18c:	00d1016f 	.word	0x00d1016f
 800d190:	00a6016f 	.word	0x00a6016f
 800d194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d196:	685b      	ldr	r3, [r3, #4]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	dd12      	ble.n	800d1c2 <__ssvfscanf_r+0x192>
 800d19c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d19e:	69ba      	ldr	r2, [r7, #24]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	3a01      	subs	r2, #1
 800d1a4:	7819      	ldrb	r1, [r3, #0]
 800d1a6:	7812      	ldrb	r2, [r2, #0]
 800d1a8:	4291      	cmp	r1, r2
 800d1aa:	d13e      	bne.n	800d22a <__ssvfscanf_r+0x1fa>
 800d1ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d1ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d1b0:	6852      	ldr	r2, [r2, #4]
 800d1b2:	3301      	adds	r3, #1
 800d1b4:	600b      	str	r3, [r1, #0]
 800d1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b8:	3a01      	subs	r2, #1
 800d1ba:	604a      	str	r2, [r1, #4]
 800d1bc:	3301      	adds	r3, #1
 800d1be:	63bb      	str	r3, [r7, #56]	; 0x38
 800d1c0:	e752      	b.n	800d068 <__ssvfscanf_r+0x38>
 800d1c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d1c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d1c6:	f002 fec7 	bl	800ff58 <__ssrefill_r>
 800d1ca:	2800      	cmp	r0, #0
 800d1cc:	d0e6      	beq.n	800d19c <__ssvfscanf_r+0x16c>
 800d1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d003      	beq.n	800d1dc <__ssvfscanf_r+0x1ac>
 800d1d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1d6:	899b      	ldrh	r3, [r3, #12]
 800d1d8:	065b      	lsls	r3, r3, #25
 800d1da:	d526      	bpl.n	800d22a <__ssvfscanf_r+0x1fa>
 800d1dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d000      	beq.n	800d1e4 <__ssvfscanf_r+0x1b4>
 800d1e2:	e0f6      	b.n	800d3d2 <__ssvfscanf_r+0x3a2>
 800d1e4:	3b01      	subs	r3, #1
 800d1e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d1e8:	e104      	b.n	800d3f4 <__ssvfscanf_r+0x3c4>
 800d1ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d1ec:	4332      	orrs	r2, r6
 800d1ee:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d1f0:	d11b      	bne.n	800d22a <__ssvfscanf_r+0x1fa>
 800d1f2:	2610      	movs	r6, #16
 800d1f4:	69ba      	ldr	r2, [r7, #24]
 800d1f6:	e76c      	b.n	800d0d2 <__ssvfscanf_r+0xa2>
 800d1f8:	421e      	tst	r6, r3
 800d1fa:	d116      	bne.n	800d22a <__ssvfscanf_r+0x1fa>
 800d1fc:	7851      	ldrb	r1, [r2, #1]
 800d1fe:	296c      	cmp	r1, #108	; 0x6c
 800d200:	d103      	bne.n	800d20a <__ssvfscanf_r+0x1da>
 800d202:	3202      	adds	r2, #2
 800d204:	61ba      	str	r2, [r7, #24]
 800d206:	2202      	movs	r2, #2
 800d208:	e000      	b.n	800d20c <__ssvfscanf_r+0x1dc>
 800d20a:	2201      	movs	r2, #1
 800d20c:	4316      	orrs	r6, r2
 800d20e:	e7f1      	b.n	800d1f4 <__ssvfscanf_r+0x1c4>
 800d210:	421e      	tst	r6, r3
 800d212:	d10a      	bne.n	800d22a <__ssvfscanf_r+0x1fa>
 800d214:	7851      	ldrb	r1, [r2, #1]
 800d216:	2968      	cmp	r1, #104	; 0x68
 800d218:	d103      	bne.n	800d222 <__ssvfscanf_r+0x1f2>
 800d21a:	3202      	adds	r2, #2
 800d21c:	61ba      	str	r2, [r7, #24]
 800d21e:	2208      	movs	r2, #8
 800d220:	e7f4      	b.n	800d20c <__ssvfscanf_r+0x1dc>
 800d222:	2204      	movs	r2, #4
 800d224:	e7f2      	b.n	800d20c <__ssvfscanf_r+0x1dc>
 800d226:	421e      	tst	r6, r3
 800d228:	d0ed      	beq.n	800d206 <__ssvfscanf_r+0x1d6>
 800d22a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d000      	beq.n	800d232 <__ssvfscanf_r+0x202>
 800d230:	e0da      	b.n	800d3e8 <__ssvfscanf_r+0x3b8>
 800d232:	e0df      	b.n	800d3f4 <__ssvfscanf_r+0x3c4>
 800d234:	421e      	tst	r6, r3
 800d236:	d0dd      	beq.n	800d1f4 <__ssvfscanf_r+0x1c4>
 800d238:	e7f7      	b.n	800d22a <__ssvfscanf_r+0x1fa>
 800d23a:	228f      	movs	r2, #143	; 0x8f
 800d23c:	218f      	movs	r1, #143	; 0x8f
 800d23e:	4032      	ands	r2, r6
 800d240:	420e      	tst	r6, r1
 800d242:	d1f2      	bne.n	800d22a <__ssvfscanf_r+0x1fa>
 800d244:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d246:	2900      	cmp	r1, #0
 800d248:	d104      	bne.n	800d254 <__ssvfscanf_r+0x224>
 800d24a:	b082      	sub	sp, #8
 800d24c:	a902      	add	r1, sp, #8
 800d24e:	6439      	str	r1, [r7, #64]	; 0x40
 800d250:	600a      	str	r2, [r1, #0]
 800d252:	604a      	str	r2, [r1, #4]
 800d254:	4326      	orrs	r6, r4
 800d256:	e7cd      	b.n	800d1f4 <__ssvfscanf_r+0x1c4>
 800d258:	228f      	movs	r2, #143	; 0x8f
 800d25a:	4216      	tst	r6, r2
 800d25c:	d1e5      	bne.n	800d22a <__ssvfscanf_r+0x1fa>
 800d25e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d260:	436a      	muls	r2, r5
 800d262:	3a30      	subs	r2, #48	; 0x30
 800d264:	188a      	adds	r2, r1, r2
 800d266:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d268:	e7c4      	b.n	800d1f4 <__ssvfscanf_r+0x1c4>
 800d26a:	2301      	movs	r3, #1
 800d26c:	431e      	orrs	r6, r3
 800d26e:	4b1b      	ldr	r3, [pc, #108]	; (800d2dc <__ssvfscanf_r+0x2ac>)
 800d270:	617b      	str	r3, [r7, #20]
 800d272:	230a      	movs	r3, #10
 800d274:	2403      	movs	r4, #3
 800d276:	627b      	str	r3, [r7, #36]	; 0x24
 800d278:	e00f      	b.n	800d29a <__ssvfscanf_r+0x26a>
 800d27a:	2301      	movs	r3, #1
 800d27c:	431e      	orrs	r6, r3
 800d27e:	4b18      	ldr	r3, [pc, #96]	; (800d2e0 <__ssvfscanf_r+0x2b0>)
 800d280:	617b      	str	r3, [r7, #20]
 800d282:	2308      	movs	r3, #8
 800d284:	e7f6      	b.n	800d274 <__ssvfscanf_r+0x244>
 800d286:	4b16      	ldr	r3, [pc, #88]	; (800d2e0 <__ssvfscanf_r+0x2b0>)
 800d288:	e7f2      	b.n	800d270 <__ssvfscanf_r+0x240>
 800d28a:	2380      	movs	r3, #128	; 0x80
 800d28c:	009b      	lsls	r3, r3, #2
 800d28e:	431e      	orrs	r6, r3
 800d290:	4b13      	ldr	r3, [pc, #76]	; (800d2e0 <__ssvfscanf_r+0x2b0>)
 800d292:	617b      	str	r3, [r7, #20]
 800d294:	2310      	movs	r3, #16
 800d296:	e7ed      	b.n	800d274 <__ssvfscanf_r+0x244>
 800d298:	2404      	movs	r4, #4
 800d29a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d29c:	685b      	ldr	r3, [r3, #4]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	dd55      	ble.n	800d34e <__ssvfscanf_r+0x31e>
 800d2a2:	0673      	lsls	r3, r6, #25
 800d2a4:	d407      	bmi.n	800d2b6 <__ssvfscanf_r+0x286>
 800d2a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2a8:	490b      	ldr	r1, [pc, #44]	; (800d2d8 <__ssvfscanf_r+0x2a8>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	781a      	ldrb	r2, [r3, #0]
 800d2ae:	5c8a      	ldrb	r2, [r1, r2]
 800d2b0:	2108      	movs	r1, #8
 800d2b2:	420a      	tst	r2, r1
 800d2b4:	d152      	bne.n	800d35c <__ssvfscanf_r+0x32c>
 800d2b6:	1e60      	subs	r0, r4, #1
 800d2b8:	2803      	cmp	r0, #3
 800d2ba:	d863      	bhi.n	800d384 <__ssvfscanf_r+0x354>
 800d2bc:	f7f2 ff34 	bl	8000128 <__gnu_thumb1_case_uhi>
 800d2c0:	03bd01da 	.word	0x03bd01da
 800d2c4:	068a0579 	.word	0x068a0579
 800d2c8:	2301      	movs	r3, #1
 800d2ca:	431e      	orrs	r6, r3
 800d2cc:	2402      	movs	r4, #2
 800d2ce:	e7e4      	b.n	800d29a <__ssvfscanf_r+0x26a>
 800d2d0:	fffffd34 	.word	0xfffffd34
 800d2d4:	ffffdfff 	.word	0xffffdfff
 800d2d8:	08012b89 	.word	0x08012b89
 800d2dc:	0800a481 	.word	0x0800a481
 800d2e0:	0800fa89 	.word	0x0800fa89
 800d2e4:	2248      	movs	r2, #72	; 0x48
 800d2e6:	2318      	movs	r3, #24
 800d2e8:	189b      	adds	r3, r3, r2
 800d2ea:	19d8      	adds	r0, r3, r7
 800d2ec:	69b9      	ldr	r1, [r7, #24]
 800d2ee:	f001 f9d7 	bl	800e6a0 <__sccl>
 800d2f2:	2340      	movs	r3, #64	; 0x40
 800d2f4:	2401      	movs	r4, #1
 800d2f6:	61b8      	str	r0, [r7, #24]
 800d2f8:	431e      	orrs	r6, r3
 800d2fa:	e7ce      	b.n	800d29a <__ssvfscanf_r+0x26a>
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	431e      	orrs	r6, r3
 800d300:	2340      	movs	r3, #64	; 0x40
 800d302:	2400      	movs	r4, #0
 800d304:	431e      	orrs	r6, r3
 800d306:	e7c8      	b.n	800d29a <__ssvfscanf_r+0x26a>
 800d308:	2388      	movs	r3, #136	; 0x88
 800d30a:	e7bf      	b.n	800d28c <__ssvfscanf_r+0x25c>
 800d30c:	06f3      	lsls	r3, r6, #27
 800d30e:	d500      	bpl.n	800d312 <__ssvfscanf_r+0x2e2>
 800d310:	e6aa      	b.n	800d068 <__ssvfscanf_r+0x38>
 800d312:	2108      	movs	r1, #8
 800d314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d316:	cb04      	ldmia	r3!, {r2}
 800d318:	420e      	tst	r6, r1
 800d31a:	d003      	beq.n	800d324 <__ssvfscanf_r+0x2f4>
 800d31c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d31e:	7011      	strb	r1, [r2, #0]
 800d320:	633b      	str	r3, [r7, #48]	; 0x30
 800d322:	e6a1      	b.n	800d068 <__ssvfscanf_r+0x38>
 800d324:	0771      	lsls	r1, r6, #29
 800d326:	d502      	bpl.n	800d32e <__ssvfscanf_r+0x2fe>
 800d328:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d32a:	8011      	strh	r1, [r2, #0]
 800d32c:	e7f8      	b.n	800d320 <__ssvfscanf_r+0x2f0>
 800d32e:	07f1      	lsls	r1, r6, #31
 800d330:	d502      	bpl.n	800d338 <__ssvfscanf_r+0x308>
 800d332:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d334:	6011      	str	r1, [r2, #0]
 800d336:	e7f3      	b.n	800d320 <__ssvfscanf_r+0x2f0>
 800d338:	07b6      	lsls	r6, r6, #30
 800d33a:	d5fa      	bpl.n	800d332 <__ssvfscanf_r+0x302>
 800d33c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d33e:	6011      	str	r1, [r2, #0]
 800d340:	17c9      	asrs	r1, r1, #31
 800d342:	6051      	str	r1, [r2, #4]
 800d344:	e7ec      	b.n	800d320 <__ssvfscanf_r+0x2f0>
 800d346:	4ba2      	ldr	r3, [pc, #648]	; (800d5d0 <__ssvfscanf_r+0x5a0>)
 800d348:	617b      	str	r3, [r7, #20]
 800d34a:	2300      	movs	r3, #0
 800d34c:	e792      	b.n	800d274 <__ssvfscanf_r+0x244>
 800d34e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d350:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d352:	f002 fe01 	bl	800ff58 <__ssrefill_r>
 800d356:	2800      	cmp	r0, #0
 800d358:	d0a3      	beq.n	800d2a2 <__ssvfscanf_r+0x272>
 800d35a:	e738      	b.n	800d1ce <__ssvfscanf_r+0x19e>
 800d35c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d35e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d360:	3201      	adds	r2, #1
 800d362:	63ba      	str	r2, [r7, #56]	; 0x38
 800d364:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d366:	6852      	ldr	r2, [r2, #4]
 800d368:	3a01      	subs	r2, #1
 800d36a:	604a      	str	r2, [r1, #4]
 800d36c:	2a00      	cmp	r2, #0
 800d36e:	dd02      	ble.n	800d376 <__ssvfscanf_r+0x346>
 800d370:	3301      	adds	r3, #1
 800d372:	600b      	str	r3, [r1, #0]
 800d374:	e797      	b.n	800d2a6 <__ssvfscanf_r+0x276>
 800d376:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d378:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d37a:	f002 fded 	bl	800ff58 <__ssrefill_r>
 800d37e:	2800      	cmp	r0, #0
 800d380:	d091      	beq.n	800d2a6 <__ssvfscanf_r+0x276>
 800d382:	e724      	b.n	800d1ce <__ssvfscanf_r+0x19e>
 800d384:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d386:	2301      	movs	r3, #1
 800d388:	2a00      	cmp	r2, #0
 800d38a:	d100      	bne.n	800d38e <__ssvfscanf_r+0x35e>
 800d38c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d38e:	2210      	movs	r2, #16
 800d390:	0034      	movs	r4, r6
 800d392:	4032      	ands	r2, r6
 800d394:	623a      	str	r2, [r7, #32]
 800d396:	401c      	ands	r4, r3
 800d398:	421e      	tst	r6, r3
 800d39a:	d100      	bne.n	800d39e <__ssvfscanf_r+0x36e>
 800d39c:	e0f3      	b.n	800d586 <__ssvfscanf_r+0x556>
 800d39e:	2a00      	cmp	r2, #0
 800d3a0:	d000      	beq.n	800d3a4 <__ssvfscanf_r+0x374>
 800d3a2:	e0b6      	b.n	800d512 <__ssvfscanf_r+0x4e2>
 800d3a4:	2080      	movs	r0, #128	; 0x80
 800d3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a8:	cb10      	ldmia	r3!, {r4}
 800d3aa:	613b      	str	r3, [r7, #16]
 800d3ac:	4206      	tst	r6, r0
 800d3ae:	d100      	bne.n	800d3b2 <__ssvfscanf_r+0x382>
 800d3b0:	e0b7      	b.n	800d522 <__ssvfscanf_r+0x4f2>
 800d3b2:	2c00      	cmp	r4, #0
 800d3b4:	d007      	beq.n	800d3c6 <__ssvfscanf_r+0x396>
 800d3b6:	f7fb ff6d 	bl	8009294 <malloc>
 800d3ba:	6338      	str	r0, [r7, #48]	; 0x30
 800d3bc:	2800      	cmp	r0, #0
 800d3be:	d11f      	bne.n	800d400 <__ssvfscanf_r+0x3d0>
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	425b      	negs	r3, r3
 800d3c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d3c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d013      	beq.n	800d3f4 <__ssvfscanf_r+0x3c4>
 800d3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ce:	3301      	adds	r3, #1
 800d3d0:	d10a      	bne.n	800d3e8 <__ssvfscanf_r+0x3b8>
 800d3d2:	2400      	movs	r4, #0
 800d3d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3d6:	681d      	ldr	r5, [r3, #0]
 800d3d8:	88db      	ldrh	r3, [r3, #6]
 800d3da:	42a3      	cmp	r3, r4
 800d3dc:	dd01      	ble.n	800d3e2 <__ssvfscanf_r+0x3b2>
 800d3de:	f001 f82a 	bl	800e436 <__ssvfscanf_r+0x1406>
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	425b      	negs	r3, r3
 800d3e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d3e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3ea:	6818      	ldr	r0, [r3, #0]
 800d3ec:	2800      	cmp	r0, #0
 800d3ee:	d001      	beq.n	800d3f4 <__ssvfscanf_r+0x3c4>
 800d3f0:	f7fb ff5a 	bl	80092a8 <free>
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3f8:	23b1      	movs	r3, #177	; 0xb1
 800d3fa:	009b      	lsls	r3, r3, #2
 800d3fc:	449d      	add	sp, r3
 800d3fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d402:	6023      	str	r3, [r4, #0]
 800d404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d406:	88de      	ldrh	r6, [r3, #6]
 800d408:	889d      	ldrh	r5, [r3, #4]
 800d40a:	42ae      	cmp	r6, r5
 800d40c:	d30e      	bcc.n	800d42c <__ssvfscanf_r+0x3fc>
 800d40e:	4b71      	ldr	r3, [pc, #452]	; (800d5d4 <__ssvfscanf_r+0x5a4>)
 800d410:	429d      	cmp	r5, r3
 800d412:	d8d5      	bhi.n	800d3c0 <__ssvfscanf_r+0x390>
 800d414:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d416:	3508      	adds	r5, #8
 800d418:	b2ad      	uxth	r5, r5
 800d41a:	6818      	ldr	r0, [r3, #0]
 800d41c:	00a9      	lsls	r1, r5, #2
 800d41e:	f002 f901 	bl	800f624 <realloc>
 800d422:	2800      	cmp	r0, #0
 800d424:	d0cc      	beq.n	800d3c0 <__ssvfscanf_r+0x390>
 800d426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d428:	6018      	str	r0, [r3, #0]
 800d42a:	809d      	strh	r5, [r3, #4]
 800d42c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d42e:	1c72      	adds	r2, r6, #1
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	00b6      	lsls	r6, r6, #2
 800d434:	50f4      	str	r4, [r6, r3]
 800d436:	2320      	movs	r3, #32
 800d438:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d43a:	0026      	movs	r6, r4
 800d43c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800d43e:	80ca      	strh	r2, [r1, #6]
 800d440:	61fb      	str	r3, [r7, #28]
 800d442:	2500      	movs	r5, #0
 800d444:	f7fd f9fe 	bl	800a844 <__locale_mb_cur_max>
 800d448:	42a8      	cmp	r0, r5
 800d44a:	d100      	bne.n	800d44e <__ssvfscanf_r+0x41e>
 800d44c:	e6bf      	b.n	800d1ce <__ssvfscanf_r+0x19e>
 800d44e:	1c6a      	adds	r2, r5, #1
 800d450:	60fa      	str	r2, [r7, #12]
 800d452:	228c      	movs	r2, #140	; 0x8c
 800d454:	2048      	movs	r0, #72	; 0x48
 800d456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d458:	0052      	lsls	r2, r2, #1
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	1812      	adds	r2, r2, r0
 800d45e:	7819      	ldrb	r1, [r3, #0]
 800d460:	19d2      	adds	r2, r2, r7
 800d462:	5551      	strb	r1, [r2, r5]
 800d464:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d466:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d468:	6852      	ldr	r2, [r2, #4]
 800d46a:	3301      	adds	r3, #1
 800d46c:	600b      	str	r3, [r1, #0]
 800d46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d470:	3a01      	subs	r2, #1
 800d472:	604a      	str	r2, [r1, #4]
 800d474:	2b03      	cmp	r3, #3
 800d476:	d102      	bne.n	800d47e <__ssvfscanf_r+0x44e>
 800d478:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d47a:	2b04      	cmp	r3, #4
 800d47c:	d007      	beq.n	800d48e <__ssvfscanf_r+0x45e>
 800d47e:	2048      	movs	r0, #72	; 0x48
 800d480:	2310      	movs	r3, #16
 800d482:	181b      	adds	r3, r3, r0
 800d484:	2208      	movs	r2, #8
 800d486:	2100      	movs	r1, #0
 800d488:	19d8      	adds	r0, r3, r7
 800d48a:	f7fd f997 	bl	800a7bc <memset>
 800d48e:	2148      	movs	r1, #72	; 0x48
 800d490:	2310      	movs	r3, #16
 800d492:	228c      	movs	r2, #140	; 0x8c
 800d494:	185b      	adds	r3, r3, r1
 800d496:	0052      	lsls	r2, r2, #1
 800d498:	19db      	adds	r3, r3, r7
 800d49a:	1852      	adds	r2, r2, r1
 800d49c:	9300      	str	r3, [sp, #0]
 800d49e:	0021      	movs	r1, r4
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d4a4:	19d2      	adds	r2, r2, r7
 800d4a6:	f002 fc57 	bl	800fd58 <_mbrtowc_r>
 800d4aa:	0003      	movs	r3, r0
 800d4ac:	62b8      	str	r0, [r7, #40]	; 0x28
 800d4ae:	3301      	adds	r3, #1
 800d4b0:	d100      	bne.n	800d4b4 <__ssvfscanf_r+0x484>
 800d4b2:	e68c      	b.n	800d1ce <__ssvfscanf_r+0x19e>
 800d4b4:	2800      	cmp	r0, #0
 800d4b6:	d139      	bne.n	800d52c <__ssvfscanf_r+0x4fc>
 800d4b8:	6a3b      	ldr	r3, [r7, #32]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d100      	bne.n	800d4c0 <__ssvfscanf_r+0x490>
 800d4be:	6023      	str	r3, [r4, #0]
 800d4c0:	68fa      	ldr	r2, [r7, #12]
 800d4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4c4:	4694      	mov	ip, r2
 800d4c6:	4463      	add	r3, ip
 800d4c8:	63bb      	str	r3, [r7, #56]	; 0x38
 800d4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4cc:	2b03      	cmp	r3, #3
 800d4ce:	d102      	bne.n	800d4d6 <__ssvfscanf_r+0x4a6>
 800d4d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d4d2:	2b04      	cmp	r3, #4
 800d4d4:	d002      	beq.n	800d4dc <__ssvfscanf_r+0x4ac>
 800d4d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4d8:	3b01      	subs	r3, #1
 800d4da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d4dc:	6a3b      	ldr	r3, [r7, #32]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d115      	bne.n	800d50e <__ssvfscanf_r+0x4de>
 800d4e2:	2e00      	cmp	r6, #0
 800d4e4:	d012      	beq.n	800d50c <__ssvfscanf_r+0x4dc>
 800d4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e8:	69fa      	ldr	r2, [r7, #28]
 800d4ea:	1ae5      	subs	r5, r4, r3
 800d4ec:	10ab      	asrs	r3, r5, #2
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	d30c      	bcc.n	800d50c <__ssvfscanf_r+0x4dc>
 800d4f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d4f4:	00d1      	lsls	r1, r2, #3
 800d4f6:	f002 f895 	bl	800f624 <realloc>
 800d4fa:	6338      	str	r0, [r7, #48]	; 0x30
 800d4fc:	2800      	cmp	r0, #0
 800d4fe:	d100      	bne.n	800d502 <__ssvfscanf_r+0x4d2>
 800d500:	e75e      	b.n	800d3c0 <__ssvfscanf_r+0x390>
 800d502:	69fb      	ldr	r3, [r7, #28]
 800d504:	1944      	adds	r4, r0, r5
 800d506:	005b      	lsls	r3, r3, #1
 800d508:	6030      	str	r0, [r6, #0]
 800d50a:	61fb      	str	r3, [r7, #28]
 800d50c:	3404      	adds	r4, #4
 800d50e:	2500      	movs	r5, #0
 800d510:	e010      	b.n	800d534 <__ssvfscanf_r+0x504>
 800d512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d514:	613b      	str	r3, [r7, #16]
 800d516:	2300      	movs	r3, #0
 800d518:	001e      	movs	r6, r3
 800d51a:	001c      	movs	r4, r3
 800d51c:	61fb      	str	r3, [r7, #28]
 800d51e:	633b      	str	r3, [r7, #48]	; 0x30
 800d520:	e78f      	b.n	800d442 <__ssvfscanf_r+0x412>
 800d522:	6a3b      	ldr	r3, [r7, #32]
 800d524:	001e      	movs	r6, r3
 800d526:	61fb      	str	r3, [r7, #28]
 800d528:	633b      	str	r3, [r7, #48]	; 0x30
 800d52a:	e78a      	b.n	800d442 <__ssvfscanf_r+0x412>
 800d52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d52e:	68fd      	ldr	r5, [r7, #12]
 800d530:	3302      	adds	r3, #2
 800d532:	d1c5      	bne.n	800d4c0 <__ssvfscanf_r+0x490>
 800d534:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d536:	685b      	ldr	r3, [r3, #4]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	dc12      	bgt.n	800d562 <__ssvfscanf_r+0x532>
 800d53c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d53e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d540:	f002 fd0a 	bl	800ff58 <__ssrefill_r>
 800d544:	2800      	cmp	r0, #0
 800d546:	d00c      	beq.n	800d562 <__ssvfscanf_r+0x532>
 800d548:	2d00      	cmp	r5, #0
 800d54a:	d000      	beq.n	800d54e <__ssvfscanf_r+0x51e>
 800d54c:	e63f      	b.n	800d1ce <__ssvfscanf_r+0x19e>
 800d54e:	2e00      	cmp	r6, #0
 800d550:	d10c      	bne.n	800d56c <__ssvfscanf_r+0x53c>
 800d552:	6a3b      	ldr	r3, [r7, #32]
 800d554:	425a      	negs	r2, r3
 800d556:	4153      	adcs	r3, r2
 800d558:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d55a:	18d3      	adds	r3, r2, r3
 800d55c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d55e:	693b      	ldr	r3, [r7, #16]
 800d560:	e6de      	b.n	800d320 <__ssvfscanf_r+0x2f0>
 800d562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d564:	2b00      	cmp	r3, #0
 800d566:	d000      	beq.n	800d56a <__ssvfscanf_r+0x53a>
 800d568:	e76c      	b.n	800d444 <__ssvfscanf_r+0x414>
 800d56a:	e7f0      	b.n	800d54e <__ssvfscanf_r+0x51e>
 800d56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d56e:	69fa      	ldr	r2, [r7, #28]
 800d570:	1ae1      	subs	r1, r4, r3
 800d572:	108b      	asrs	r3, r1, #2
 800d574:	429a      	cmp	r2, r3
 800d576:	d9ec      	bls.n	800d552 <__ssvfscanf_r+0x522>
 800d578:	6830      	ldr	r0, [r6, #0]
 800d57a:	f002 f853 	bl	800f624 <realloc>
 800d57e:	2800      	cmp	r0, #0
 800d580:	d0e7      	beq.n	800d552 <__ssvfscanf_r+0x522>
 800d582:	6030      	str	r0, [r6, #0]
 800d584:	e7e5      	b.n	800d552 <__ssvfscanf_r+0x522>
 800d586:	6a3b      	ldr	r3, [r7, #32]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d025      	beq.n	800d5d8 <__ssvfscanf_r+0x5a8>
 800d58c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d58e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d590:	685b      	ldr	r3, [r3, #4]
 800d592:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d594:	6812      	ldr	r2, [r2, #0]
 800d596:	4299      	cmp	r1, r3
 800d598:	dd11      	ble.n	800d5be <__ssvfscanf_r+0x58e>
 800d59a:	1ac9      	subs	r1, r1, r3
 800d59c:	18d2      	adds	r2, r2, r3
 800d59e:	18e4      	adds	r4, r4, r3
 800d5a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5a2:	63f9      	str	r1, [r7, #60]	; 0x3c
 800d5a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d5a6:	0019      	movs	r1, r3
 800d5a8:	601a      	str	r2, [r3, #0]
 800d5aa:	f002 fcd5 	bl	800ff58 <__ssrefill_r>
 800d5ae:	2800      	cmp	r0, #0
 800d5b0:	d0ec      	beq.n	800d58c <__ssvfscanf_r+0x55c>
 800d5b2:	2c00      	cmp	r4, #0
 800d5b4:	d100      	bne.n	800d5b8 <__ssvfscanf_r+0x588>
 800d5b6:	e60a      	b.n	800d1ce <__ssvfscanf_r+0x19e>
 800d5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ba:	191b      	adds	r3, r3, r4
 800d5bc:	e5ff      	b.n	800d1be <__ssvfscanf_r+0x18e>
 800d5be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d5c0:	1a5b      	subs	r3, r3, r1
 800d5c2:	1864      	adds	r4, r4, r1
 800d5c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d5c6:	604b      	str	r3, [r1, #4]
 800d5c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5ca:	18d2      	adds	r2, r2, r3
 800d5cc:	600a      	str	r2, [r1, #0]
 800d5ce:	e7f3      	b.n	800d5b8 <__ssvfscanf_r+0x588>
 800d5d0:	0800a481 	.word	0x0800a481
 800d5d4:	0000fff6 	.word	0x0000fff6
 800d5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5da:	0034      	movs	r4, r6
 800d5dc:	cb20      	ldmia	r3!, {r5}
 800d5de:	633b      	str	r3, [r7, #48]	; 0x30
 800d5e0:	2380      	movs	r3, #128	; 0x80
 800d5e2:	401c      	ands	r4, r3
 800d5e4:	421e      	tst	r6, r3
 800d5e6:	d028      	beq.n	800d63a <__ssvfscanf_r+0x60a>
 800d5e8:	2d00      	cmp	r5, #0
 800d5ea:	d100      	bne.n	800d5ee <__ssvfscanf_r+0x5be>
 800d5ec:	e61d      	b.n	800d22a <__ssvfscanf_r+0x1fa>
 800d5ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d5f0:	f7fb fe50 	bl	8009294 <malloc>
 800d5f4:	6238      	str	r0, [r7, #32]
 800d5f6:	2800      	cmp	r0, #0
 800d5f8:	d100      	bne.n	800d5fc <__ssvfscanf_r+0x5cc>
 800d5fa:	e5ef      	b.n	800d1dc <__ssvfscanf_r+0x1ac>
 800d5fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5fe:	6028      	str	r0, [r5, #0]
 800d600:	88de      	ldrh	r6, [r3, #6]
 800d602:	889c      	ldrh	r4, [r3, #4]
 800d604:	6818      	ldr	r0, [r3, #0]
 800d606:	42a6      	cmp	r6, r4
 800d608:	d30e      	bcc.n	800d628 <__ssvfscanf_r+0x5f8>
 800d60a:	4bbf      	ldr	r3, [pc, #764]	; (800d908 <__ssvfscanf_r+0x8d8>)
 800d60c:	429c      	cmp	r4, r3
 800d60e:	d900      	bls.n	800d612 <__ssvfscanf_r+0x5e2>
 800d610:	e6df      	b.n	800d3d2 <__ssvfscanf_r+0x3a2>
 800d612:	3408      	adds	r4, #8
 800d614:	b2a4      	uxth	r4, r4
 800d616:	00a1      	lsls	r1, r4, #2
 800d618:	f002 f804 	bl	800f624 <realloc>
 800d61c:	2800      	cmp	r0, #0
 800d61e:	d100      	bne.n	800d622 <__ssvfscanf_r+0x5f2>
 800d620:	e6d7      	b.n	800d3d2 <__ssvfscanf_r+0x3a2>
 800d622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d624:	6018      	str	r0, [r3, #0]
 800d626:	809c      	strh	r4, [r3, #4]
 800d628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d62a:	1c72      	adds	r2, r6, #1
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d630:	00b6      	lsls	r6, r6, #2
 800d632:	002c      	movs	r4, r5
 800d634:	50f5      	str	r5, [r6, r3]
 800d636:	6a3d      	ldr	r5, [r7, #32]
 800d638:	80ca      	strh	r2, [r1, #6]
 800d63a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d63c:	0029      	movs	r1, r5
 800d63e:	9300      	str	r3, [sp, #0]
 800d640:	2201      	movs	r2, #1
 800d642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d644:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d646:	f002 fca6 	bl	800ff96 <_sfread_r>
 800d64a:	1e05      	subs	r5, r0, #0
 800d64c:	d100      	bne.n	800d650 <__ssvfscanf_r+0x620>
 800d64e:	e5be      	b.n	800d1ce <__ssvfscanf_r+0x19e>
 800d650:	2c00      	cmp	r4, #0
 800d652:	d009      	beq.n	800d668 <__ssvfscanf_r+0x638>
 800d654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d656:	4283      	cmp	r3, r0
 800d658:	d906      	bls.n	800d668 <__ssvfscanf_r+0x638>
 800d65a:	0001      	movs	r1, r0
 800d65c:	6820      	ldr	r0, [r4, #0]
 800d65e:	f001 ffe1 	bl	800f624 <realloc>
 800d662:	2800      	cmp	r0, #0
 800d664:	d000      	beq.n	800d668 <__ssvfscanf_r+0x638>
 800d666:	6020      	str	r0, [r4, #0]
 800d668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d66a:	195b      	adds	r3, r3, r5
 800d66c:	63bb      	str	r3, [r7, #56]	; 0x38
 800d66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d670:	3301      	adds	r3, #1
 800d672:	e4f8      	b.n	800d066 <__ssvfscanf_r+0x36>
 800d674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d676:	2b00      	cmp	r3, #0
 800d678:	d101      	bne.n	800d67e <__ssvfscanf_r+0x64e>
 800d67a:	3b01      	subs	r3, #1
 800d67c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d67e:	2210      	movs	r2, #16
 800d680:	2301      	movs	r3, #1
 800d682:	0034      	movs	r4, r6
 800d684:	4032      	ands	r2, r6
 800d686:	401c      	ands	r4, r3
 800d688:	623a      	str	r2, [r7, #32]
 800d68a:	421e      	tst	r6, r3
 800d68c:	d100      	bne.n	800d690 <__ssvfscanf_r+0x660>
 800d68e:	e116      	b.n	800d8be <__ssvfscanf_r+0x88e>
 800d690:	2a00      	cmp	r2, #0
 800d692:	d000      	beq.n	800d696 <__ssvfscanf_r+0x666>
 800d694:	e0b0      	b.n	800d7f8 <__ssvfscanf_r+0x7c8>
 800d696:	2080      	movs	r0, #128	; 0x80
 800d698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d69a:	cb10      	ldmia	r3!, {r4}
 800d69c:	60fb      	str	r3, [r7, #12]
 800d69e:	4206      	tst	r6, r0
 800d6a0:	d100      	bne.n	800d6a4 <__ssvfscanf_r+0x674>
 800d6a2:	e0b2      	b.n	800d80a <__ssvfscanf_r+0x7da>
 800d6a4:	2c00      	cmp	r4, #0
 800d6a6:	d100      	bne.n	800d6aa <__ssvfscanf_r+0x67a>
 800d6a8:	e68d      	b.n	800d3c6 <__ssvfscanf_r+0x396>
 800d6aa:	f7fb fdf3 	bl	8009294 <malloc>
 800d6ae:	6338      	str	r0, [r7, #48]	; 0x30
 800d6b0:	2800      	cmp	r0, #0
 800d6b2:	d100      	bne.n	800d6b6 <__ssvfscanf_r+0x686>
 800d6b4:	e684      	b.n	800d3c0 <__ssvfscanf_r+0x390>
 800d6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6b8:	6023      	str	r3, [r4, #0]
 800d6ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6bc:	88de      	ldrh	r6, [r3, #6]
 800d6be:	889d      	ldrh	r5, [r3, #4]
 800d6c0:	42ae      	cmp	r6, r5
 800d6c2:	d310      	bcc.n	800d6e6 <__ssvfscanf_r+0x6b6>
 800d6c4:	4b90      	ldr	r3, [pc, #576]	; (800d908 <__ssvfscanf_r+0x8d8>)
 800d6c6:	429d      	cmp	r5, r3
 800d6c8:	d900      	bls.n	800d6cc <__ssvfscanf_r+0x69c>
 800d6ca:	e679      	b.n	800d3c0 <__ssvfscanf_r+0x390>
 800d6cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6ce:	3508      	adds	r5, #8
 800d6d0:	b2ad      	uxth	r5, r5
 800d6d2:	6818      	ldr	r0, [r3, #0]
 800d6d4:	00a9      	lsls	r1, r5, #2
 800d6d6:	f001 ffa5 	bl	800f624 <realloc>
 800d6da:	2800      	cmp	r0, #0
 800d6dc:	d100      	bne.n	800d6e0 <__ssvfscanf_r+0x6b0>
 800d6de:	e66f      	b.n	800d3c0 <__ssvfscanf_r+0x390>
 800d6e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6e2:	6018      	str	r0, [r3, #0]
 800d6e4:	809d      	strh	r5, [r3, #4]
 800d6e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6e8:	1c72      	adds	r2, r6, #1
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	00b6      	lsls	r6, r6, #2
 800d6ee:	50f4      	str	r4, [r6, r3]
 800d6f0:	2320      	movs	r3, #32
 800d6f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d6f4:	0026      	movs	r6, r4
 800d6f6:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800d6f8:	80ca      	strh	r2, [r1, #6]
 800d6fa:	613b      	str	r3, [r7, #16]
 800d6fc:	2500      	movs	r5, #0
 800d6fe:	f7fd f8a1 	bl	800a844 <__locale_mb_cur_max>
 800d702:	42a8      	cmp	r0, r5
 800d704:	d100      	bne.n	800d708 <__ssvfscanf_r+0x6d8>
 800d706:	e562      	b.n	800d1ce <__ssvfscanf_r+0x19e>
 800d708:	1c6a      	adds	r2, r5, #1
 800d70a:	61fa      	str	r2, [r7, #28]
 800d70c:	228c      	movs	r2, #140	; 0x8c
 800d70e:	2048      	movs	r0, #72	; 0x48
 800d710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d712:	0052      	lsls	r2, r2, #1
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	1812      	adds	r2, r2, r0
 800d718:	7819      	ldrb	r1, [r3, #0]
 800d71a:	19d2      	adds	r2, r2, r7
 800d71c:	5551      	strb	r1, [r2, r5]
 800d71e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d720:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d722:	6852      	ldr	r2, [r2, #4]
 800d724:	3301      	adds	r3, #1
 800d726:	600b      	str	r3, [r1, #0]
 800d728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d72a:	3a01      	subs	r2, #1
 800d72c:	604a      	str	r2, [r1, #4]
 800d72e:	2b03      	cmp	r3, #3
 800d730:	d102      	bne.n	800d738 <__ssvfscanf_r+0x708>
 800d732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d734:	2b04      	cmp	r3, #4
 800d736:	d006      	beq.n	800d746 <__ssvfscanf_r+0x716>
 800d738:	2048      	movs	r0, #72	; 0x48
 800d73a:	2208      	movs	r2, #8
 800d73c:	1813      	adds	r3, r2, r0
 800d73e:	2100      	movs	r1, #0
 800d740:	19d8      	adds	r0, r3, r7
 800d742:	f7fd f83b 	bl	800a7bc <memset>
 800d746:	2148      	movs	r1, #72	; 0x48
 800d748:	2308      	movs	r3, #8
 800d74a:	228c      	movs	r2, #140	; 0x8c
 800d74c:	185b      	adds	r3, r3, r1
 800d74e:	0052      	lsls	r2, r2, #1
 800d750:	19db      	adds	r3, r3, r7
 800d752:	1852      	adds	r2, r2, r1
 800d754:	9300      	str	r3, [sp, #0]
 800d756:	0021      	movs	r1, r4
 800d758:	69fb      	ldr	r3, [r7, #28]
 800d75a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d75c:	19d2      	adds	r2, r2, r7
 800d75e:	f002 fafb 	bl	800fd58 <_mbrtowc_r>
 800d762:	0003      	movs	r3, r0
 800d764:	62b8      	str	r0, [r7, #40]	; 0x28
 800d766:	3301      	adds	r3, #1
 800d768:	d100      	bne.n	800d76c <__ssvfscanf_r+0x73c>
 800d76a:	e530      	b.n	800d1ce <__ssvfscanf_r+0x19e>
 800d76c:	2800      	cmp	r0, #0
 800d76e:	d151      	bne.n	800d814 <__ssvfscanf_r+0x7e4>
 800d770:	6020      	str	r0, [r4, #0]
 800d772:	2301      	movs	r3, #1
 800d774:	6825      	ldr	r5, [r4, #0]
 800d776:	425b      	negs	r3, r3
 800d778:	1c6a      	adds	r2, r5, #1
 800d77a:	d01a      	beq.n	800d7b2 <__ssvfscanf_r+0x782>
 800d77c:	2048      	movs	r0, #72	; 0x48
 800d77e:	3311      	adds	r3, #17
 800d780:	181b      	adds	r3, r3, r0
 800d782:	2208      	movs	r2, #8
 800d784:	2100      	movs	r1, #0
 800d786:	19d8      	adds	r0, r3, r7
 800d788:	f7fd f818 	bl	800a7bc <memset>
 800d78c:	4b5f      	ldr	r3, [pc, #380]	; (800d90c <__ssvfscanf_r+0x8dc>)
 800d78e:	2148      	movs	r1, #72	; 0x48
 800d790:	33e0      	adds	r3, #224	; 0xe0
 800d792:	681a      	ldr	r2, [r3, #0]
 800d794:	2310      	movs	r3, #16
 800d796:	4694      	mov	ip, r2
 800d798:	185b      	adds	r3, r3, r1
 800d79a:	002a      	movs	r2, r5
 800d79c:	19db      	adds	r3, r3, r7
 800d79e:	4665      	mov	r5, ip
 800d7a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d7a2:	1879      	adds	r1, r7, r1
 800d7a4:	47a8      	blx	r5
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	2801      	cmp	r0, #1
 800d7aa:	d102      	bne.n	800d7b2 <__ssvfscanf_r+0x782>
 800d7ac:	3348      	adds	r3, #72	; 0x48
 800d7ae:	18fb      	adds	r3, r7, r3
 800d7b0:	781b      	ldrb	r3, [r3, #0]
 800d7b2:	2218      	movs	r2, #24
 800d7b4:	2148      	movs	r1, #72	; 0x48
 800d7b6:	1852      	adds	r2, r2, r1
 800d7b8:	19d2      	adds	r2, r2, r7
 800d7ba:	5cd3      	ldrb	r3, [r2, r3]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d149      	bne.n	800d854 <__ssvfscanf_r+0x824>
 800d7c0:	69fb      	ldr	r3, [r7, #28]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d137      	bne.n	800d836 <__ssvfscanf_r+0x806>
 800d7c6:	6a3b      	ldr	r3, [r7, #32]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d113      	bne.n	800d7f4 <__ssvfscanf_r+0x7c4>
 800d7cc:	6023      	str	r3, [r4, #0]
 800d7ce:	2e00      	cmp	r6, #0
 800d7d0:	d00d      	beq.n	800d7ee <__ssvfscanf_r+0x7be>
 800d7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d4:	693a      	ldr	r2, [r7, #16]
 800d7d6:	1ae4      	subs	r4, r4, r3
 800d7d8:	10a3      	asrs	r3, r4, #2
 800d7da:	3301      	adds	r3, #1
 800d7dc:	429a      	cmp	r2, r3
 800d7de:	d906      	bls.n	800d7ee <__ssvfscanf_r+0x7be>
 800d7e0:	6830      	ldr	r0, [r6, #0]
 800d7e2:	1d21      	adds	r1, r4, #4
 800d7e4:	f001 ff1e 	bl	800f624 <realloc>
 800d7e8:	2800      	cmp	r0, #0
 800d7ea:	d000      	beq.n	800d7ee <__ssvfscanf_r+0x7be>
 800d7ec:	6030      	str	r0, [r6, #0]
 800d7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7f0:	3301      	adds	r3, #1
 800d7f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	e593      	b.n	800d320 <__ssvfscanf_r+0x2f0>
 800d7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7fa:	60fb      	str	r3, [r7, #12]
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	001e      	movs	r6, r3
 800d800:	613b      	str	r3, [r7, #16]
 800d802:	633b      	str	r3, [r7, #48]	; 0x30
 800d804:	334c      	adds	r3, #76	; 0x4c
 800d806:	18fc      	adds	r4, r7, r3
 800d808:	e778      	b.n	800d6fc <__ssvfscanf_r+0x6cc>
 800d80a:	6a3b      	ldr	r3, [r7, #32]
 800d80c:	001e      	movs	r6, r3
 800d80e:	613b      	str	r3, [r7, #16]
 800d810:	633b      	str	r3, [r7, #48]	; 0x30
 800d812:	e773      	b.n	800d6fc <__ssvfscanf_r+0x6cc>
 800d814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d816:	69fd      	ldr	r5, [r7, #28]
 800d818:	3302      	adds	r3, #2
 800d81a:	d1aa      	bne.n	800d772 <__ssvfscanf_r+0x742>
 800d81c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d81e:	685b      	ldr	r3, [r3, #4]
 800d820:	2b00      	cmp	r3, #0
 800d822:	dc47      	bgt.n	800d8b4 <__ssvfscanf_r+0x884>
 800d824:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d826:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d828:	f002 fb96 	bl	800ff58 <__ssrefill_r>
 800d82c:	2800      	cmp	r0, #0
 800d82e:	d041      	beq.n	800d8b4 <__ssvfscanf_r+0x884>
 800d830:	2d00      	cmp	r5, #0
 800d832:	d0c8      	beq.n	800d7c6 <__ssvfscanf_r+0x796>
 800d834:	e4cb      	b.n	800d1ce <__ssvfscanf_r+0x19e>
 800d836:	69fb      	ldr	r3, [r7, #28]
 800d838:	2248      	movs	r2, #72	; 0x48
 800d83a:	3b01      	subs	r3, #1
 800d83c:	61fb      	str	r3, [r7, #28]
 800d83e:	238c      	movs	r3, #140	; 0x8c
 800d840:	005b      	lsls	r3, r3, #1
 800d842:	189b      	adds	r3, r3, r2
 800d844:	69fa      	ldr	r2, [r7, #28]
 800d846:	19db      	adds	r3, r3, r7
 800d848:	5cd1      	ldrb	r1, [r2, r3]
 800d84a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d84c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d84e:	f002 fb47 	bl	800fee0 <_sungetc_r>
 800d852:	e7b5      	b.n	800d7c0 <__ssvfscanf_r+0x790>
 800d854:	69fa      	ldr	r2, [r7, #28]
 800d856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d858:	4694      	mov	ip, r2
 800d85a:	4463      	add	r3, ip
 800d85c:	63bb      	str	r3, [r7, #56]	; 0x38
 800d85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d860:	2b03      	cmp	r3, #3
 800d862:	d102      	bne.n	800d86a <__ssvfscanf_r+0x83a>
 800d864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d866:	2b04      	cmp	r3, #4
 800d868:	d002      	beq.n	800d870 <__ssvfscanf_r+0x840>
 800d86a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d86c:	3b01      	subs	r3, #1
 800d86e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d870:	6a3b      	ldr	r3, [r7, #32]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d11a      	bne.n	800d8ac <__ssvfscanf_r+0x87c>
 800d876:	3404      	adds	r4, #4
 800d878:	2e00      	cmp	r6, #0
 800d87a:	d019      	beq.n	800d8b0 <__ssvfscanf_r+0x880>
 800d87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d87e:	693a      	ldr	r2, [r7, #16]
 800d880:	1ae3      	subs	r3, r4, r3
 800d882:	61fb      	str	r3, [r7, #28]
 800d884:	6a3d      	ldr	r5, [r7, #32]
 800d886:	109b      	asrs	r3, r3, #2
 800d888:	4293      	cmp	r3, r2
 800d88a:	d3c7      	bcc.n	800d81c <__ssvfscanf_r+0x7ec>
 800d88c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d88e:	00d1      	lsls	r1, r2, #3
 800d890:	f001 fec8 	bl	800f624 <realloc>
 800d894:	6338      	str	r0, [r7, #48]	; 0x30
 800d896:	2800      	cmp	r0, #0
 800d898:	d100      	bne.n	800d89c <__ssvfscanf_r+0x86c>
 800d89a:	e591      	b.n	800d3c0 <__ssvfscanf_r+0x390>
 800d89c:	4684      	mov	ip, r0
 800d89e:	693b      	ldr	r3, [r7, #16]
 800d8a0:	69fc      	ldr	r4, [r7, #28]
 800d8a2:	005b      	lsls	r3, r3, #1
 800d8a4:	4464      	add	r4, ip
 800d8a6:	6030      	str	r0, [r6, #0]
 800d8a8:	613b      	str	r3, [r7, #16]
 800d8aa:	e7b7      	b.n	800d81c <__ssvfscanf_r+0x7ec>
 800d8ac:	2500      	movs	r5, #0
 800d8ae:	e7b5      	b.n	800d81c <__ssvfscanf_r+0x7ec>
 800d8b0:	0035      	movs	r5, r6
 800d8b2:	e7b3      	b.n	800d81c <__ssvfscanf_r+0x7ec>
 800d8b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d000      	beq.n	800d8bc <__ssvfscanf_r+0x88c>
 800d8ba:	e720      	b.n	800d6fe <__ssvfscanf_r+0x6ce>
 800d8bc:	e783      	b.n	800d7c6 <__ssvfscanf_r+0x796>
 800d8be:	6a3b      	ldr	r3, [r7, #32]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d025      	beq.n	800d910 <__ssvfscanf_r+0x8e0>
 800d8c4:	2118      	movs	r1, #24
 800d8c6:	2048      	movs	r0, #72	; 0x48
 800d8c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8ca:	1809      	adds	r1, r1, r0
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	19c9      	adds	r1, r1, r7
 800d8d0:	781a      	ldrb	r2, [r3, #0]
 800d8d2:	5c8a      	ldrb	r2, [r1, r2]
 800d8d4:	2a00      	cmp	r2, #0
 800d8d6:	d103      	bne.n	800d8e0 <__ssvfscanf_r+0x8b0>
 800d8d8:	2c00      	cmp	r4, #0
 800d8da:	d000      	beq.n	800d8de <__ssvfscanf_r+0x8ae>
 800d8dc:	e66c      	b.n	800d5b8 <__ssvfscanf_r+0x588>
 800d8de:	e4a4      	b.n	800d22a <__ssvfscanf_r+0x1fa>
 800d8e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d8e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d8e4:	6852      	ldr	r2, [r2, #4]
 800d8e6:	3301      	adds	r3, #1
 800d8e8:	600b      	str	r3, [r1, #0]
 800d8ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8ec:	3a01      	subs	r2, #1
 800d8ee:	3401      	adds	r4, #1
 800d8f0:	604a      	str	r2, [r1, #4]
 800d8f2:	429c      	cmp	r4, r3
 800d8f4:	d100      	bne.n	800d8f8 <__ssvfscanf_r+0x8c8>
 800d8f6:	e65f      	b.n	800d5b8 <__ssvfscanf_r+0x588>
 800d8f8:	2a00      	cmp	r2, #0
 800d8fa:	dce3      	bgt.n	800d8c4 <__ssvfscanf_r+0x894>
 800d8fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d8fe:	f002 fb2b 	bl	800ff58 <__ssrefill_r>
 800d902:	2800      	cmp	r0, #0
 800d904:	d0de      	beq.n	800d8c4 <__ssvfscanf_r+0x894>
 800d906:	e657      	b.n	800d5b8 <__ssvfscanf_r+0x588>
 800d908:	0000fff6 	.word	0x0000fff6
 800d90c:	20000454 	.word	0x20000454
 800d910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d912:	0032      	movs	r2, r6
 800d914:	cb20      	ldmia	r3!, {r5}
 800d916:	61fb      	str	r3, [r7, #28]
 800d918:	2380      	movs	r3, #128	; 0x80
 800d91a:	401a      	ands	r2, r3
 800d91c:	421e      	tst	r6, r3
 800d91e:	d100      	bne.n	800d922 <__ssvfscanf_r+0x8f2>
 800d920:	e086      	b.n	800da30 <__ssvfscanf_r+0xa00>
 800d922:	2d00      	cmp	r5, #0
 800d924:	d100      	bne.n	800d928 <__ssvfscanf_r+0x8f8>
 800d926:	e480      	b.n	800d22a <__ssvfscanf_r+0x1fa>
 800d928:	2020      	movs	r0, #32
 800d92a:	f7fb fcb3 	bl	8009294 <malloc>
 800d92e:	6338      	str	r0, [r7, #48]	; 0x30
 800d930:	2800      	cmp	r0, #0
 800d932:	d100      	bne.n	800d936 <__ssvfscanf_r+0x906>
 800d934:	e452      	b.n	800d1dc <__ssvfscanf_r+0x1ac>
 800d936:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d938:	6028      	str	r0, [r5, #0]
 800d93a:	88de      	ldrh	r6, [r3, #6]
 800d93c:	889c      	ldrh	r4, [r3, #4]
 800d93e:	6818      	ldr	r0, [r3, #0]
 800d940:	42a6      	cmp	r6, r4
 800d942:	d30e      	bcc.n	800d962 <__ssvfscanf_r+0x932>
 800d944:	4bc3      	ldr	r3, [pc, #780]	; (800dc54 <__ssvfscanf_r+0xc24>)
 800d946:	429c      	cmp	r4, r3
 800d948:	d900      	bls.n	800d94c <__ssvfscanf_r+0x91c>
 800d94a:	e542      	b.n	800d3d2 <__ssvfscanf_r+0x3a2>
 800d94c:	3408      	adds	r4, #8
 800d94e:	b2a4      	uxth	r4, r4
 800d950:	00a1      	lsls	r1, r4, #2
 800d952:	f001 fe67 	bl	800f624 <realloc>
 800d956:	2800      	cmp	r0, #0
 800d958:	d100      	bne.n	800d95c <__ssvfscanf_r+0x92c>
 800d95a:	e53a      	b.n	800d3d2 <__ssvfscanf_r+0x3a2>
 800d95c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d95e:	6018      	str	r0, [r3, #0]
 800d960:	809c      	strh	r4, [r3, #4]
 800d962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d964:	1c72      	adds	r2, r6, #1
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	00b6      	lsls	r6, r6, #2
 800d96a:	50f5      	str	r5, [r6, r3]
 800d96c:	2320      	movs	r3, #32
 800d96e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d970:	002e      	movs	r6, r5
 800d972:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800d974:	80ca      	strh	r2, [r1, #6]
 800d976:	623b      	str	r3, [r7, #32]
 800d978:	002c      	movs	r4, r5
 800d97a:	2118      	movs	r1, #24
 800d97c:	2048      	movs	r0, #72	; 0x48
 800d97e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d980:	1809      	adds	r1, r1, r0
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	19c9      	adds	r1, r1, r7
 800d986:	781a      	ldrb	r2, [r3, #0]
 800d988:	5c8a      	ldrb	r2, [r1, r2]
 800d98a:	2a00      	cmp	r2, #0
 800d98c:	d101      	bne.n	800d992 <__ssvfscanf_r+0x962>
 800d98e:	633d      	str	r5, [r7, #48]	; 0x30
 800d990:	e031      	b.n	800d9f6 <__ssvfscanf_r+0x9c6>
 800d992:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d994:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d996:	6852      	ldr	r2, [r2, #4]
 800d998:	3a01      	subs	r2, #1
 800d99a:	604a      	str	r2, [r1, #4]
 800d99c:	1c5a      	adds	r2, r3, #1
 800d99e:	600a      	str	r2, [r1, #0]
 800d9a0:	781b      	ldrb	r3, [r3, #0]
 800d9a2:	1c6a      	adds	r2, r5, #1
 800d9a4:	633a      	str	r2, [r7, #48]	; 0x30
 800d9a6:	702b      	strb	r3, [r5, #0]
 800d9a8:	2e00      	cmp	r6, #0
 800d9aa:	d010      	beq.n	800d9ce <__ssvfscanf_r+0x99e>
 800d9ac:	6a3b      	ldr	r3, [r7, #32]
 800d9ae:	1b15      	subs	r5, r2, r4
 800d9b0:	429d      	cmp	r5, r3
 800d9b2:	d30c      	bcc.n	800d9ce <__ssvfscanf_r+0x99e>
 800d9b4:	005b      	lsls	r3, r3, #1
 800d9b6:	0020      	movs	r0, r4
 800d9b8:	0019      	movs	r1, r3
 800d9ba:	623b      	str	r3, [r7, #32]
 800d9bc:	f001 fe32 	bl	800f624 <realloc>
 800d9c0:	1e04      	subs	r4, r0, #0
 800d9c2:	d101      	bne.n	800d9c8 <__ssvfscanf_r+0x998>
 800d9c4:	f7ff fc0a 	bl	800d1dc <__ssvfscanf_r+0x1ac>
 800d9c8:	1943      	adds	r3, r0, r5
 800d9ca:	633b      	str	r3, [r7, #48]	; 0x30
 800d9cc:	6030      	str	r0, [r6, #0]
 800d9ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9d0:	3b01      	subs	r3, #1
 800d9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d00e      	beq.n	800d9f6 <__ssvfscanf_r+0x9c6>
 800d9d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9da:	685b      	ldr	r3, [r3, #4]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	dc2a      	bgt.n	800da36 <__ssvfscanf_r+0xa06>
 800d9e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d9e2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d9e4:	f002 fab8 	bl	800ff58 <__ssrefill_r>
 800d9e8:	2800      	cmp	r0, #0
 800d9ea:	d024      	beq.n	800da36 <__ssvfscanf_r+0xa06>
 800d9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ee:	42a3      	cmp	r3, r4
 800d9f0:	d101      	bne.n	800d9f6 <__ssvfscanf_r+0x9c6>
 800d9f2:	f7ff fbec 	bl	800d1ce <__ssvfscanf_r+0x19e>
 800d9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f8:	1b1d      	subs	r5, r3, r4
 800d9fa:	42a3      	cmp	r3, r4
 800d9fc:	d101      	bne.n	800da02 <__ssvfscanf_r+0x9d2>
 800d9fe:	f7ff fc14 	bl	800d22a <__ssvfscanf_r+0x1fa>
 800da02:	2300      	movs	r3, #0
 800da04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da06:	7013      	strb	r3, [r2, #0]
 800da08:	429e      	cmp	r6, r3
 800da0a:	d009      	beq.n	800da20 <__ssvfscanf_r+0x9f0>
 800da0c:	6a3b      	ldr	r3, [r7, #32]
 800da0e:	1c69      	adds	r1, r5, #1
 800da10:	428b      	cmp	r3, r1
 800da12:	d905      	bls.n	800da20 <__ssvfscanf_r+0x9f0>
 800da14:	6830      	ldr	r0, [r6, #0]
 800da16:	f001 fe05 	bl	800f624 <realloc>
 800da1a:	2800      	cmp	r0, #0
 800da1c:	d000      	beq.n	800da20 <__ssvfscanf_r+0x9f0>
 800da1e:	6030      	str	r0, [r6, #0]
 800da20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da22:	3301      	adds	r3, #1
 800da24:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da28:	195b      	adds	r3, r3, r5
 800da2a:	63bb      	str	r3, [r7, #56]	; 0x38
 800da2c:	69fb      	ldr	r3, [r7, #28]
 800da2e:	e477      	b.n	800d320 <__ssvfscanf_r+0x2f0>
 800da30:	0016      	movs	r6, r2
 800da32:	623a      	str	r2, [r7, #32]
 800da34:	e7a0      	b.n	800d978 <__ssvfscanf_r+0x948>
 800da36:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800da38:	e79f      	b.n	800d97a <__ssvfscanf_r+0x94a>
 800da3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d101      	bne.n	800da44 <__ssvfscanf_r+0xa14>
 800da40:	3b01      	subs	r3, #1
 800da42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da44:	2210      	movs	r2, #16
 800da46:	2301      	movs	r3, #1
 800da48:	0034      	movs	r4, r6
 800da4a:	4032      	ands	r2, r6
 800da4c:	401c      	ands	r4, r3
 800da4e:	61fa      	str	r2, [r7, #28]
 800da50:	421e      	tst	r6, r3
 800da52:	d100      	bne.n	800da56 <__ssvfscanf_r+0xa26>
 800da54:	e102      	b.n	800dc5c <__ssvfscanf_r+0xc2c>
 800da56:	2a00      	cmp	r2, #0
 800da58:	d000      	beq.n	800da5c <__ssvfscanf_r+0xa2c>
 800da5a:	e09f      	b.n	800db9c <__ssvfscanf_r+0xb6c>
 800da5c:	2080      	movs	r0, #128	; 0x80
 800da5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da60:	cb10      	ldmia	r3!, {r4}
 800da62:	60fb      	str	r3, [r7, #12]
 800da64:	4206      	tst	r6, r0
 800da66:	d100      	bne.n	800da6a <__ssvfscanf_r+0xa3a>
 800da68:	e0a1      	b.n	800dbae <__ssvfscanf_r+0xb7e>
 800da6a:	2c00      	cmp	r4, #0
 800da6c:	d100      	bne.n	800da70 <__ssvfscanf_r+0xa40>
 800da6e:	e4aa      	b.n	800d3c6 <__ssvfscanf_r+0x396>
 800da70:	f7fb fc10 	bl	8009294 <malloc>
 800da74:	6338      	str	r0, [r7, #48]	; 0x30
 800da76:	2800      	cmp	r0, #0
 800da78:	d100      	bne.n	800da7c <__ssvfscanf_r+0xa4c>
 800da7a:	e4a1      	b.n	800d3c0 <__ssvfscanf_r+0x390>
 800da7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da7e:	6023      	str	r3, [r4, #0]
 800da80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da82:	88de      	ldrh	r6, [r3, #6]
 800da84:	889d      	ldrh	r5, [r3, #4]
 800da86:	42ae      	cmp	r6, r5
 800da88:	d310      	bcc.n	800daac <__ssvfscanf_r+0xa7c>
 800da8a:	4b72      	ldr	r3, [pc, #456]	; (800dc54 <__ssvfscanf_r+0xc24>)
 800da8c:	429d      	cmp	r5, r3
 800da8e:	d900      	bls.n	800da92 <__ssvfscanf_r+0xa62>
 800da90:	e496      	b.n	800d3c0 <__ssvfscanf_r+0x390>
 800da92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da94:	3508      	adds	r5, #8
 800da96:	b2ad      	uxth	r5, r5
 800da98:	6818      	ldr	r0, [r3, #0]
 800da9a:	00a9      	lsls	r1, r5, #2
 800da9c:	f001 fdc2 	bl	800f624 <realloc>
 800daa0:	2800      	cmp	r0, #0
 800daa2:	d100      	bne.n	800daa6 <__ssvfscanf_r+0xa76>
 800daa4:	e48c      	b.n	800d3c0 <__ssvfscanf_r+0x390>
 800daa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800daa8:	6018      	str	r0, [r3, #0]
 800daaa:	809d      	strh	r5, [r3, #4]
 800daac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800daae:	1c72      	adds	r2, r6, #1
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	00b6      	lsls	r6, r6, #2
 800dab4:	50f4      	str	r4, [r6, r3]
 800dab6:	2320      	movs	r3, #32
 800dab8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800daba:	0025      	movs	r5, r4
 800dabc:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800dabe:	80ca      	strh	r2, [r1, #6]
 800dac0:	613b      	str	r3, [r7, #16]
 800dac2:	2300      	movs	r3, #0
 800dac4:	623b      	str	r3, [r7, #32]
 800dac6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dac8:	4a63      	ldr	r2, [pc, #396]	; (800dc58 <__ssvfscanf_r+0xc28>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	781b      	ldrb	r3, [r3, #0]
 800dace:	5cd3      	ldrb	r3, [r2, r3]
 800dad0:	2208      	movs	r2, #8
 800dad2:	4213      	tst	r3, r2
 800dad4:	d149      	bne.n	800db6a <__ssvfscanf_r+0xb3a>
 800dad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d046      	beq.n	800db6a <__ssvfscanf_r+0xb3a>
 800dadc:	f7fc feb2 	bl	800a844 <__locale_mb_cur_max>
 800dae0:	6a3b      	ldr	r3, [r7, #32]
 800dae2:	4298      	cmp	r0, r3
 800dae4:	d101      	bne.n	800daea <__ssvfscanf_r+0xaba>
 800dae6:	f7ff fb72 	bl	800d1ce <__ssvfscanf_r+0x19e>
 800daea:	6a3a      	ldr	r2, [r7, #32]
 800daec:	2048      	movs	r0, #72	; 0x48
 800daee:	1c56      	adds	r6, r2, #1
 800daf0:	228c      	movs	r2, #140	; 0x8c
 800daf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800daf4:	0052      	lsls	r2, r2, #1
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	1812      	adds	r2, r2, r0
 800dafa:	7819      	ldrb	r1, [r3, #0]
 800dafc:	6a38      	ldr	r0, [r7, #32]
 800dafe:	19d2      	adds	r2, r2, r7
 800db00:	5411      	strb	r1, [r2, r0]
 800db02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db04:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800db06:	6852      	ldr	r2, [r2, #4]
 800db08:	3301      	adds	r3, #1
 800db0a:	600b      	str	r3, [r1, #0]
 800db0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db0e:	3a01      	subs	r2, #1
 800db10:	604a      	str	r2, [r1, #4]
 800db12:	2b03      	cmp	r3, #3
 800db14:	d102      	bne.n	800db1c <__ssvfscanf_r+0xaec>
 800db16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800db18:	2b04      	cmp	r3, #4
 800db1a:	d007      	beq.n	800db2c <__ssvfscanf_r+0xafc>
 800db1c:	2048      	movs	r0, #72	; 0x48
 800db1e:	2310      	movs	r3, #16
 800db20:	181b      	adds	r3, r3, r0
 800db22:	2208      	movs	r2, #8
 800db24:	2100      	movs	r1, #0
 800db26:	19d8      	adds	r0, r3, r7
 800db28:	f7fc fe48 	bl	800a7bc <memset>
 800db2c:	2148      	movs	r1, #72	; 0x48
 800db2e:	2310      	movs	r3, #16
 800db30:	228c      	movs	r2, #140	; 0x8c
 800db32:	185b      	adds	r3, r3, r1
 800db34:	0052      	lsls	r2, r2, #1
 800db36:	19db      	adds	r3, r3, r7
 800db38:	1852      	adds	r2, r2, r1
 800db3a:	9300      	str	r3, [sp, #0]
 800db3c:	0021      	movs	r1, r4
 800db3e:	0033      	movs	r3, r6
 800db40:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800db42:	19d2      	adds	r2, r2, r7
 800db44:	f002 f908 	bl	800fd58 <_mbrtowc_r>
 800db48:	0003      	movs	r3, r0
 800db4a:	62b8      	str	r0, [r7, #40]	; 0x28
 800db4c:	3301      	adds	r3, #1
 800db4e:	d101      	bne.n	800db54 <__ssvfscanf_r+0xb24>
 800db50:	f7ff fb3d 	bl	800d1ce <__ssvfscanf_r+0x19e>
 800db54:	2800      	cmp	r0, #0
 800db56:	d12f      	bne.n	800dbb8 <__ssvfscanf_r+0xb88>
 800db58:	6020      	str	r0, [r4, #0]
 800db5a:	6820      	ldr	r0, [r4, #0]
 800db5c:	f002 f91a 	bl	800fd94 <iswspace>
 800db60:	6238      	str	r0, [r7, #32]
 800db62:	2800      	cmp	r0, #0
 800db64:	d04a      	beq.n	800dbfc <__ssvfscanf_r+0xbcc>
 800db66:	2e00      	cmp	r6, #0
 800db68:	d13c      	bne.n	800dbe4 <__ssvfscanf_r+0xbb4>
 800db6a:	69fb      	ldr	r3, [r7, #28]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d000      	beq.n	800db72 <__ssvfscanf_r+0xb42>
 800db70:	e640      	b.n	800d7f4 <__ssvfscanf_r+0x7c4>
 800db72:	6023      	str	r3, [r4, #0]
 800db74:	2d00      	cmp	r5, #0
 800db76:	d100      	bne.n	800db7a <__ssvfscanf_r+0xb4a>
 800db78:	e639      	b.n	800d7ee <__ssvfscanf_r+0x7be>
 800db7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db7c:	693a      	ldr	r2, [r7, #16]
 800db7e:	1ae4      	subs	r4, r4, r3
 800db80:	10a3      	asrs	r3, r4, #2
 800db82:	3301      	adds	r3, #1
 800db84:	429a      	cmp	r2, r3
 800db86:	d800      	bhi.n	800db8a <__ssvfscanf_r+0xb5a>
 800db88:	e631      	b.n	800d7ee <__ssvfscanf_r+0x7be>
 800db8a:	6828      	ldr	r0, [r5, #0]
 800db8c:	1d21      	adds	r1, r4, #4
 800db8e:	f001 fd49 	bl	800f624 <realloc>
 800db92:	2800      	cmp	r0, #0
 800db94:	d100      	bne.n	800db98 <__ssvfscanf_r+0xb68>
 800db96:	e62a      	b.n	800d7ee <__ssvfscanf_r+0x7be>
 800db98:	6028      	str	r0, [r5, #0]
 800db9a:	e628      	b.n	800d7ee <__ssvfscanf_r+0x7be>
 800db9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db9e:	60fb      	str	r3, [r7, #12]
 800dba0:	2300      	movs	r3, #0
 800dba2:	001d      	movs	r5, r3
 800dba4:	613b      	str	r3, [r7, #16]
 800dba6:	633b      	str	r3, [r7, #48]	; 0x30
 800dba8:	334c      	adds	r3, #76	; 0x4c
 800dbaa:	18fc      	adds	r4, r7, r3
 800dbac:	e789      	b.n	800dac2 <__ssvfscanf_r+0xa92>
 800dbae:	69fb      	ldr	r3, [r7, #28]
 800dbb0:	001d      	movs	r5, r3
 800dbb2:	613b      	str	r3, [r7, #16]
 800dbb4:	633b      	str	r3, [r7, #48]	; 0x30
 800dbb6:	e784      	b.n	800dac2 <__ssvfscanf_r+0xa92>
 800dbb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbba:	623e      	str	r6, [r7, #32]
 800dbbc:	3302      	adds	r3, #2
 800dbbe:	d1cc      	bne.n	800db5a <__ssvfscanf_r+0xb2a>
 800dbc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbc2:	685b      	ldr	r3, [r3, #4]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	dd00      	ble.n	800dbca <__ssvfscanf_r+0xb9a>
 800dbc8:	e77d      	b.n	800dac6 <__ssvfscanf_r+0xa96>
 800dbca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dbcc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dbce:	f002 f9c3 	bl	800ff58 <__ssrefill_r>
 800dbd2:	2800      	cmp	r0, #0
 800dbd4:	d100      	bne.n	800dbd8 <__ssvfscanf_r+0xba8>
 800dbd6:	e776      	b.n	800dac6 <__ssvfscanf_r+0xa96>
 800dbd8:	6a3b      	ldr	r3, [r7, #32]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d001      	beq.n	800dbe2 <__ssvfscanf_r+0xbb2>
 800dbde:	f7ff faf6 	bl	800d1ce <__ssvfscanf_r+0x19e>
 800dbe2:	e7c2      	b.n	800db6a <__ssvfscanf_r+0xb3a>
 800dbe4:	238c      	movs	r3, #140	; 0x8c
 800dbe6:	2248      	movs	r2, #72	; 0x48
 800dbe8:	005b      	lsls	r3, r3, #1
 800dbea:	189b      	adds	r3, r3, r2
 800dbec:	3e01      	subs	r6, #1
 800dbee:	19db      	adds	r3, r3, r7
 800dbf0:	5cf1      	ldrb	r1, [r6, r3]
 800dbf2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dbf4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dbf6:	f002 f973 	bl	800fee0 <_sungetc_r>
 800dbfa:	e7b4      	b.n	800db66 <__ssvfscanf_r+0xb36>
 800dbfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbfe:	199b      	adds	r3, r3, r6
 800dc00:	63bb      	str	r3, [r7, #56]	; 0x38
 800dc02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc04:	2b03      	cmp	r3, #3
 800dc06:	d102      	bne.n	800dc0e <__ssvfscanf_r+0xbde>
 800dc08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dc0a:	2b04      	cmp	r3, #4
 800dc0c:	d002      	beq.n	800dc14 <__ssvfscanf_r+0xbe4>
 800dc0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc10:	3b01      	subs	r3, #1
 800dc12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc14:	69fb      	ldr	r3, [r7, #28]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d1d2      	bne.n	800dbc0 <__ssvfscanf_r+0xb90>
 800dc1a:	3404      	adds	r4, #4
 800dc1c:	2d00      	cmp	r5, #0
 800dc1e:	d016      	beq.n	800dc4e <__ssvfscanf_r+0xc1e>
 800dc20:	69fa      	ldr	r2, [r7, #28]
 800dc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc24:	623a      	str	r2, [r7, #32]
 800dc26:	693a      	ldr	r2, [r7, #16]
 800dc28:	1ae6      	subs	r6, r4, r3
 800dc2a:	10b3      	asrs	r3, r6, #2
 800dc2c:	4293      	cmp	r3, r2
 800dc2e:	d3c7      	bcc.n	800dbc0 <__ssvfscanf_r+0xb90>
 800dc30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc32:	00d1      	lsls	r1, r2, #3
 800dc34:	f001 fcf6 	bl	800f624 <realloc>
 800dc38:	6338      	str	r0, [r7, #48]	; 0x30
 800dc3a:	2800      	cmp	r0, #0
 800dc3c:	d101      	bne.n	800dc42 <__ssvfscanf_r+0xc12>
 800dc3e:	f7ff fbbf 	bl	800d3c0 <__ssvfscanf_r+0x390>
 800dc42:	693b      	ldr	r3, [r7, #16]
 800dc44:	1984      	adds	r4, r0, r6
 800dc46:	005b      	lsls	r3, r3, #1
 800dc48:	6028      	str	r0, [r5, #0]
 800dc4a:	613b      	str	r3, [r7, #16]
 800dc4c:	e7b8      	b.n	800dbc0 <__ssvfscanf_r+0xb90>
 800dc4e:	623d      	str	r5, [r7, #32]
 800dc50:	e7b6      	b.n	800dbc0 <__ssvfscanf_r+0xb90>
 800dc52:	46c0      	nop			; (mov r8, r8)
 800dc54:	0000fff6 	.word	0x0000fff6
 800dc58:	08012b89 	.word	0x08012b89
 800dc5c:	69fb      	ldr	r3, [r7, #28]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d01c      	beq.n	800dc9c <__ssvfscanf_r+0xc6c>
 800dc62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc64:	49bf      	ldr	r1, [pc, #764]	; (800df64 <__ssvfscanf_r+0xf34>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	781a      	ldrb	r2, [r3, #0]
 800dc6a:	5c8a      	ldrb	r2, [r1, r2]
 800dc6c:	2108      	movs	r1, #8
 800dc6e:	420a      	tst	r2, r1
 800dc70:	d000      	beq.n	800dc74 <__ssvfscanf_r+0xc44>
 800dc72:	e4a1      	b.n	800d5b8 <__ssvfscanf_r+0x588>
 800dc74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dc76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dc78:	6852      	ldr	r2, [r2, #4]
 800dc7a:	3301      	adds	r3, #1
 800dc7c:	600b      	str	r3, [r1, #0]
 800dc7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc80:	3a01      	subs	r2, #1
 800dc82:	3401      	adds	r4, #1
 800dc84:	604a      	str	r2, [r1, #4]
 800dc86:	429c      	cmp	r4, r3
 800dc88:	d100      	bne.n	800dc8c <__ssvfscanf_r+0xc5c>
 800dc8a:	e495      	b.n	800d5b8 <__ssvfscanf_r+0x588>
 800dc8c:	2a00      	cmp	r2, #0
 800dc8e:	dce8      	bgt.n	800dc62 <__ssvfscanf_r+0xc32>
 800dc90:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dc92:	f002 f961 	bl	800ff58 <__ssrefill_r>
 800dc96:	2800      	cmp	r0, #0
 800dc98:	d0e3      	beq.n	800dc62 <__ssvfscanf_r+0xc32>
 800dc9a:	e48d      	b.n	800d5b8 <__ssvfscanf_r+0x588>
 800dc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc9e:	0032      	movs	r2, r6
 800dca0:	cb10      	ldmia	r3!, {r4}
 800dca2:	61fb      	str	r3, [r7, #28]
 800dca4:	2380      	movs	r3, #128	; 0x80
 800dca6:	401a      	ands	r2, r3
 800dca8:	421e      	tst	r6, r3
 800dcaa:	d039      	beq.n	800dd20 <__ssvfscanf_r+0xcf0>
 800dcac:	2c00      	cmp	r4, #0
 800dcae:	d101      	bne.n	800dcb4 <__ssvfscanf_r+0xc84>
 800dcb0:	f7ff fabb 	bl	800d22a <__ssvfscanf_r+0x1fa>
 800dcb4:	2020      	movs	r0, #32
 800dcb6:	f7fb faed 	bl	8009294 <malloc>
 800dcba:	6338      	str	r0, [r7, #48]	; 0x30
 800dcbc:	2800      	cmp	r0, #0
 800dcbe:	d101      	bne.n	800dcc4 <__ssvfscanf_r+0xc94>
 800dcc0:	f7ff fa8c 	bl	800d1dc <__ssvfscanf_r+0x1ac>
 800dcc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcc6:	6020      	str	r0, [r4, #0]
 800dcc8:	88de      	ldrh	r6, [r3, #6]
 800dcca:	889d      	ldrh	r5, [r3, #4]
 800dccc:	6818      	ldr	r0, [r3, #0]
 800dcce:	42ae      	cmp	r6, r5
 800dcd0:	d310      	bcc.n	800dcf4 <__ssvfscanf_r+0xcc4>
 800dcd2:	4ba5      	ldr	r3, [pc, #660]	; (800df68 <__ssvfscanf_r+0xf38>)
 800dcd4:	429d      	cmp	r5, r3
 800dcd6:	d901      	bls.n	800dcdc <__ssvfscanf_r+0xcac>
 800dcd8:	f7ff fb7b 	bl	800d3d2 <__ssvfscanf_r+0x3a2>
 800dcdc:	3508      	adds	r5, #8
 800dcde:	b2ad      	uxth	r5, r5
 800dce0:	00a9      	lsls	r1, r5, #2
 800dce2:	f001 fc9f 	bl	800f624 <realloc>
 800dce6:	2800      	cmp	r0, #0
 800dce8:	d101      	bne.n	800dcee <__ssvfscanf_r+0xcbe>
 800dcea:	f7ff fb72 	bl	800d3d2 <__ssvfscanf_r+0x3a2>
 800dcee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcf0:	6018      	str	r0, [r3, #0]
 800dcf2:	809d      	strh	r5, [r3, #4]
 800dcf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcf6:	1c72      	adds	r2, r6, #1
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	00b6      	lsls	r6, r6, #2
 800dcfc:	50f4      	str	r4, [r6, r3]
 800dcfe:	2320      	movs	r3, #32
 800dd00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dd02:	0026      	movs	r6, r4
 800dd04:	80ca      	strh	r2, [r1, #6]
 800dd06:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800dd08:	633b      	str	r3, [r7, #48]	; 0x30
 800dd0a:	0025      	movs	r5, r4
 800dd0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd0e:	4995      	ldr	r1, [pc, #596]	; (800df64 <__ssvfscanf_r+0xf34>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	781a      	ldrb	r2, [r3, #0]
 800dd14:	5c8a      	ldrb	r2, [r1, r2]
 800dd16:	2108      	movs	r1, #8
 800dd18:	420a      	tst	r2, r1
 800dd1a:	d004      	beq.n	800dd26 <__ssvfscanf_r+0xcf6>
 800dd1c:	623c      	str	r4, [r7, #32]
 800dd1e:	e031      	b.n	800dd84 <__ssvfscanf_r+0xd54>
 800dd20:	0016      	movs	r6, r2
 800dd22:	633a      	str	r2, [r7, #48]	; 0x30
 800dd24:	e7f1      	b.n	800dd0a <__ssvfscanf_r+0xcda>
 800dd26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd28:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dd2a:	6852      	ldr	r2, [r2, #4]
 800dd2c:	3a01      	subs	r2, #1
 800dd2e:	604a      	str	r2, [r1, #4]
 800dd30:	1c5a      	adds	r2, r3, #1
 800dd32:	600a      	str	r2, [r1, #0]
 800dd34:	781b      	ldrb	r3, [r3, #0]
 800dd36:	1c62      	adds	r2, r4, #1
 800dd38:	623a      	str	r2, [r7, #32]
 800dd3a:	7023      	strb	r3, [r4, #0]
 800dd3c:	2e00      	cmp	r6, #0
 800dd3e:	d010      	beq.n	800dd62 <__ssvfscanf_r+0xd32>
 800dd40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd42:	1b54      	subs	r4, r2, r5
 800dd44:	429c      	cmp	r4, r3
 800dd46:	d30c      	bcc.n	800dd62 <__ssvfscanf_r+0xd32>
 800dd48:	005b      	lsls	r3, r3, #1
 800dd4a:	0028      	movs	r0, r5
 800dd4c:	0019      	movs	r1, r3
 800dd4e:	633b      	str	r3, [r7, #48]	; 0x30
 800dd50:	f001 fc68 	bl	800f624 <realloc>
 800dd54:	1e05      	subs	r5, r0, #0
 800dd56:	d101      	bne.n	800dd5c <__ssvfscanf_r+0xd2c>
 800dd58:	f7ff fa40 	bl	800d1dc <__ssvfscanf_r+0x1ac>
 800dd5c:	1903      	adds	r3, r0, r4
 800dd5e:	623b      	str	r3, [r7, #32]
 800dd60:	6030      	str	r0, [r6, #0]
 800dd62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd64:	3b01      	subs	r3, #1
 800dd66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d00b      	beq.n	800dd84 <__ssvfscanf_r+0xd54>
 800dd6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd6e:	685b      	ldr	r3, [r3, #4]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	dd01      	ble.n	800dd78 <__ssvfscanf_r+0xd48>
 800dd74:	6a3c      	ldr	r4, [r7, #32]
 800dd76:	e7c9      	b.n	800dd0c <__ssvfscanf_r+0xcdc>
 800dd78:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dd7a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dd7c:	f002 f8ec 	bl	800ff58 <__ssrefill_r>
 800dd80:	2800      	cmp	r0, #0
 800dd82:	d0f7      	beq.n	800dd74 <__ssvfscanf_r+0xd44>
 800dd84:	2300      	movs	r3, #0
 800dd86:	6a3a      	ldr	r2, [r7, #32]
 800dd88:	7013      	strb	r3, [r2, #0]
 800dd8a:	1b55      	subs	r5, r2, r5
 800dd8c:	2e00      	cmp	r6, #0
 800dd8e:	d009      	beq.n	800dda4 <__ssvfscanf_r+0xd74>
 800dd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd92:	1c69      	adds	r1, r5, #1
 800dd94:	428b      	cmp	r3, r1
 800dd96:	d905      	bls.n	800dda4 <__ssvfscanf_r+0xd74>
 800dd98:	6830      	ldr	r0, [r6, #0]
 800dd9a:	f001 fc43 	bl	800f624 <realloc>
 800dd9e:	2800      	cmp	r0, #0
 800dda0:	d000      	beq.n	800dda4 <__ssvfscanf_r+0xd74>
 800dda2:	6030      	str	r0, [r6, #0]
 800dda4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dda6:	195b      	adds	r3, r3, r5
 800dda8:	63bb      	str	r3, [r7, #56]	; 0x38
 800ddaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddac:	3301      	adds	r3, #1
 800ddae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ddb0:	e63c      	b.n	800da2c <__ssvfscanf_r+0x9fc>
 800ddb2:	22ae      	movs	r2, #174	; 0xae
 800ddb4:	2100      	movs	r1, #0
 800ddb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddb8:	0052      	lsls	r2, r2, #1
 800ddba:	3b01      	subs	r3, #1
 800ddbc:	6239      	str	r1, [r7, #32]
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	d906      	bls.n	800ddd0 <__ssvfscanf_r+0xda0>
 800ddc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddc4:	3b5e      	subs	r3, #94	; 0x5e
 800ddc6:	3bff      	subs	r3, #255	; 0xff
 800ddc8:	623b      	str	r3, [r7, #32]
 800ddca:	235e      	movs	r3, #94	; 0x5e
 800ddcc:	33ff      	adds	r3, #255	; 0xff
 800ddce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ddd0:	24d8      	movs	r4, #216	; 0xd8
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	2248      	movs	r2, #72	; 0x48
 800ddd6:	0124      	lsls	r4, r4, #4
 800ddd8:	4334      	orrs	r4, r6
 800ddda:	2680      	movs	r6, #128	; 0x80
 800dddc:	61fb      	str	r3, [r7, #28]
 800ddde:	3319      	adds	r3, #25
 800dde0:	33ff      	adds	r3, #255	; 0xff
 800dde2:	189b      	adds	r3, r3, r2
 800dde4:	19dd      	adds	r5, r3, r7
 800dde6:	00b6      	lsls	r6, r6, #2
 800dde8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddea:	681a      	ldr	r2, [r3, #0]
 800ddec:	7813      	ldrb	r3, [r2, #0]
 800ddee:	2b39      	cmp	r3, #57	; 0x39
 800ddf0:	d80f      	bhi.n	800de12 <__ssvfscanf_r+0xde2>
 800ddf2:	2b2a      	cmp	r3, #42	; 0x2a
 800ddf4:	d91b      	bls.n	800de2e <__ssvfscanf_r+0xdfe>
 800ddf6:	0018      	movs	r0, r3
 800ddf8:	382b      	subs	r0, #43	; 0x2b
 800ddfa:	280e      	cmp	r0, #14
 800ddfc:	d817      	bhi.n	800de2e <__ssvfscanf_r+0xdfe>
 800ddfe:	f7f2 f989 	bl	8000114 <__gnu_thumb1_case_uqi>
 800de02:	168f      	.short	0x168f
 800de04:	5416168f 	.word	0x5416168f
 800de08:	80808080 	.word	0x80808080
 800de0c:	87808080 	.word	0x87808080
 800de10:	87          	.byte	0x87
 800de11:	00          	.byte	0x00
 800de12:	2b66      	cmp	r3, #102	; 0x66
 800de14:	d83a      	bhi.n	800de8c <__ssvfscanf_r+0xe5c>
 800de16:	2b60      	cmp	r3, #96	; 0x60
 800de18:	d803      	bhi.n	800de22 <__ssvfscanf_r+0xdf2>
 800de1a:	2b46      	cmp	r3, #70	; 0x46
 800de1c:	d805      	bhi.n	800de2a <__ssvfscanf_r+0xdfa>
 800de1e:	2b40      	cmp	r3, #64	; 0x40
 800de20:	d905      	bls.n	800de2e <__ssvfscanf_r+0xdfe>
 800de22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800de24:	290a      	cmp	r1, #10
 800de26:	dc71      	bgt.n	800df0c <__ssvfscanf_r+0xedc>
 800de28:	e001      	b.n	800de2e <__ssvfscanf_r+0xdfe>
 800de2a:	2b58      	cmp	r3, #88	; 0x58
 800de2c:	d030      	beq.n	800de90 <__ssvfscanf_r+0xe60>
 800de2e:	05e3      	lsls	r3, r4, #23
 800de30:	d515      	bpl.n	800de5e <__ssvfscanf_r+0xe2e>
 800de32:	238c      	movs	r3, #140	; 0x8c
 800de34:	2248      	movs	r2, #72	; 0x48
 800de36:	005b      	lsls	r3, r3, #1
 800de38:	189b      	adds	r3, r3, r2
 800de3a:	19db      	adds	r3, r3, r7
 800de3c:	429d      	cmp	r5, r3
 800de3e:	d905      	bls.n	800de4c <__ssvfscanf_r+0xe1c>
 800de40:	3d01      	subs	r5, #1
 800de42:	7829      	ldrb	r1, [r5, #0]
 800de44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800de46:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800de48:	f002 f84a 	bl	800fee0 <_sungetc_r>
 800de4c:	238c      	movs	r3, #140	; 0x8c
 800de4e:	2248      	movs	r2, #72	; 0x48
 800de50:	005b      	lsls	r3, r3, #1
 800de52:	189b      	adds	r3, r3, r2
 800de54:	19db      	adds	r3, r3, r7
 800de56:	429d      	cmp	r5, r3
 800de58:	d101      	bne.n	800de5e <__ssvfscanf_r+0xe2e>
 800de5a:	f7ff f9e6 	bl	800d22a <__ssvfscanf_r+0x1fa>
 800de5e:	2310      	movs	r3, #16
 800de60:	0022      	movs	r2, r4
 800de62:	401a      	ands	r2, r3
 800de64:	421c      	tst	r4, r3
 800de66:	d171      	bne.n	800df4c <__ssvfscanf_r+0xf1c>
 800de68:	218c      	movs	r1, #140	; 0x8c
 800de6a:	2048      	movs	r0, #72	; 0x48
 800de6c:	0049      	lsls	r1, r1, #1
 800de6e:	1809      	adds	r1, r1, r0
 800de70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de72:	697e      	ldr	r6, [r7, #20]
 800de74:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800de76:	19c9      	adds	r1, r1, r7
 800de78:	702a      	strb	r2, [r5, #0]
 800de7a:	47b0      	blx	r6
 800de7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de7e:	1d1e      	adds	r6, r3, #4
 800de80:	06a3      	lsls	r3, r4, #26
 800de82:	d559      	bpl.n	800df38 <__ssvfscanf_r+0xf08>
 800de84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	6018      	str	r0, [r3, #0]
 800de8a:	e05b      	b.n	800df44 <__ssvfscanf_r+0xf14>
 800de8c:	2b78      	cmp	r3, #120	; 0x78
 800de8e:	d1ce      	bne.n	800de2e <__ssvfscanf_r+0xdfe>
 800de90:	21c0      	movs	r1, #192	; 0xc0
 800de92:	00c9      	lsls	r1, r1, #3
 800de94:	4021      	ands	r1, r4
 800de96:	42b1      	cmp	r1, r6
 800de98:	d1c9      	bne.n	800de2e <__ssvfscanf_r+0xdfe>
 800de9a:	4934      	ldr	r1, [pc, #208]	; (800df6c <__ssvfscanf_r+0xf3c>)
 800de9c:	4021      	ands	r1, r4
 800de9e:	24a0      	movs	r4, #160	; 0xa0
 800dea0:	00e4      	lsls	r4, r4, #3
 800dea2:	430c      	orrs	r4, r1
 800dea4:	2110      	movs	r1, #16
 800dea6:	6279      	str	r1, [r7, #36]	; 0x24
 800dea8:	e00b      	b.n	800dec2 <__ssvfscanf_r+0xe92>
 800deaa:	0521      	lsls	r1, r4, #20
 800deac:	d509      	bpl.n	800dec2 <__ssvfscanf_r+0xe92>
 800deae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800deb0:	2900      	cmp	r1, #0
 800deb2:	d102      	bne.n	800deba <__ssvfscanf_r+0xe8a>
 800deb4:	3108      	adds	r1, #8
 800deb6:	4334      	orrs	r4, r6
 800deb8:	6279      	str	r1, [r7, #36]	; 0x24
 800deba:	0561      	lsls	r1, r4, #21
 800debc:	d504      	bpl.n	800dec8 <__ssvfscanf_r+0xe98>
 800debe:	492c      	ldr	r1, [pc, #176]	; (800df70 <__ssvfscanf_r+0xf40>)
 800dec0:	400c      	ands	r4, r1
 800dec2:	702b      	strb	r3, [r5, #0]
 800dec4:	3501      	adds	r5, #1
 800dec6:	e00c      	b.n	800dee2 <__ssvfscanf_r+0xeb2>
 800dec8:	4b2a      	ldr	r3, [pc, #168]	; (800df74 <__ssvfscanf_r+0xf44>)
 800deca:	401c      	ands	r4, r3
 800decc:	6a3b      	ldr	r3, [r7, #32]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d004      	beq.n	800dedc <__ssvfscanf_r+0xeac>
 800ded2:	3b01      	subs	r3, #1
 800ded4:	623b      	str	r3, [r7, #32]
 800ded6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ded8:	3301      	adds	r3, #1
 800deda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dedc:	69fb      	ldr	r3, [r7, #28]
 800dede:	3301      	adds	r3, #1
 800dee0:	61fb      	str	r3, [r7, #28]
 800dee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dee4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dee6:	685b      	ldr	r3, [r3, #4]
 800dee8:	3b01      	subs	r3, #1
 800deea:	604b      	str	r3, [r1, #4]
 800deec:	2b00      	cmp	r3, #0
 800deee:	dd1c      	ble.n	800df2a <__ssvfscanf_r+0xefa>
 800def0:	3201      	adds	r2, #1
 800def2:	600a      	str	r2, [r1, #0]
 800def4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800def6:	3b01      	subs	r3, #1
 800def8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800defa:	2b00      	cmp	r3, #0
 800defc:	d000      	beq.n	800df00 <__ssvfscanf_r+0xed0>
 800defe:	e773      	b.n	800dde8 <__ssvfscanf_r+0xdb8>
 800df00:	e795      	b.n	800de2e <__ssvfscanf_r+0xdfe>
 800df02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df04:	491c      	ldr	r1, [pc, #112]	; (800df78 <__ssvfscanf_r+0xf48>)
 800df06:	0040      	lsls	r0, r0, #1
 800df08:	5e41      	ldrsh	r1, [r0, r1]
 800df0a:	6279      	str	r1, [r7, #36]	; 0x24
 800df0c:	491b      	ldr	r1, [pc, #108]	; (800df7c <__ssvfscanf_r+0xf4c>)
 800df0e:	e7d7      	b.n	800dec0 <__ssvfscanf_r+0xe90>
 800df10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df12:	4919      	ldr	r1, [pc, #100]	; (800df78 <__ssvfscanf_r+0xf48>)
 800df14:	0040      	lsls	r0, r0, #1
 800df16:	5e41      	ldrsh	r1, [r0, r1]
 800df18:	6279      	str	r1, [r7, #36]	; 0x24
 800df1a:	2908      	cmp	r1, #8
 800df1c:	dcf6      	bgt.n	800df0c <__ssvfscanf_r+0xedc>
 800df1e:	e786      	b.n	800de2e <__ssvfscanf_r+0xdfe>
 800df20:	2180      	movs	r1, #128	; 0x80
 800df22:	420c      	tst	r4, r1
 800df24:	d083      	beq.n	800de2e <__ssvfscanf_r+0xdfe>
 800df26:	438c      	bics	r4, r1
 800df28:	e7cb      	b.n	800dec2 <__ssvfscanf_r+0xe92>
 800df2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800df2c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800df2e:	f002 f813 	bl	800ff58 <__ssrefill_r>
 800df32:	2800      	cmp	r0, #0
 800df34:	d0de      	beq.n	800def4 <__ssvfscanf_r+0xec4>
 800df36:	e77a      	b.n	800de2e <__ssvfscanf_r+0xdfe>
 800df38:	2308      	movs	r3, #8
 800df3a:	421c      	tst	r4, r3
 800df3c:	d020      	beq.n	800df80 <__ssvfscanf_r+0xf50>
 800df3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	7018      	strb	r0, [r3, #0]
 800df44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df46:	633e      	str	r6, [r7, #48]	; 0x30
 800df48:	3301      	adds	r3, #1
 800df4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df4c:	238c      	movs	r3, #140	; 0x8c
 800df4e:	2248      	movs	r2, #72	; 0x48
 800df50:	005b      	lsls	r3, r3, #1
 800df52:	189b      	adds	r3, r3, r2
 800df54:	19db      	adds	r3, r3, r7
 800df56:	1aed      	subs	r5, r5, r3
 800df58:	69fb      	ldr	r3, [r7, #28]
 800df5a:	18ed      	adds	r5, r5, r3
 800df5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df5e:	195b      	adds	r3, r3, r5
 800df60:	f7ff f92d 	bl	800d1be <__ssvfscanf_r+0x18e>
 800df64:	08012b89 	.word	0x08012b89
 800df68:	0000fff6 	.word	0x0000fff6
 800df6c:	fffffdff 	.word	0xfffffdff
 800df70:	fffffa7f 	.word	0xfffffa7f
 800df74:	fffffc7f 	.word	0xfffffc7f
 800df78:	08012eb6 	.word	0x08012eb6
 800df7c:	fffff47f 	.word	0xfffff47f
 800df80:	0763      	lsls	r3, r4, #29
 800df82:	d503      	bpl.n	800df8c <__ssvfscanf_r+0xf5c>
 800df84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	8018      	strh	r0, [r3, #0]
 800df8a:	e7db      	b.n	800df44 <__ssvfscanf_r+0xf14>
 800df8c:	2301      	movs	r3, #1
 800df8e:	0022      	movs	r2, r4
 800df90:	401a      	ands	r2, r3
 800df92:	421c      	tst	r4, r3
 800df94:	d000      	beq.n	800df98 <__ssvfscanf_r+0xf68>
 800df96:	e775      	b.n	800de84 <__ssvfscanf_r+0xe54>
 800df98:	07a4      	lsls	r4, r4, #30
 800df9a:	d400      	bmi.n	800df9e <__ssvfscanf_r+0xf6e>
 800df9c:	e772      	b.n	800de84 <__ssvfscanf_r+0xe54>
 800df9e:	4ba8      	ldr	r3, [pc, #672]	; (800e240 <__ssvfscanf_r+0x1210>)
 800dfa0:	6979      	ldr	r1, [r7, #20]
 800dfa2:	4299      	cmp	r1, r3
 800dfa4:	d10c      	bne.n	800dfc0 <__ssvfscanf_r+0xf90>
 800dfa6:	218c      	movs	r1, #140	; 0x8c
 800dfa8:	2048      	movs	r0, #72	; 0x48
 800dfaa:	0049      	lsls	r1, r1, #1
 800dfac:	1809      	adds	r1, r1, r0
 800dfae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dfb2:	19c9      	adds	r1, r1, r7
 800dfb4:	f001 fecc 	bl	800fd50 <_strtoull_r>
 800dfb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	c303      	stmia	r3!, {r0, r1}
 800dfbe:	e7c1      	b.n	800df44 <__ssvfscanf_r+0xf14>
 800dfc0:	218c      	movs	r1, #140	; 0x8c
 800dfc2:	2048      	movs	r0, #72	; 0x48
 800dfc4:	0049      	lsls	r1, r1, #1
 800dfc6:	1809      	adds	r1, r1, r0
 800dfc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dfcc:	19c9      	adds	r1, r1, r7
 800dfce:	f001 fe0d 	bl	800fbec <_strtoll_r>
 800dfd2:	e7f1      	b.n	800dfb8 <__ssvfscanf_r+0xf88>
 800dfd4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dfd6:	f000 fb9f 	bl	800e718 <_localeconv_r>
 800dfda:	22ae      	movs	r2, #174	; 0xae
 800dfdc:	2100      	movs	r1, #0
 800dfde:	6803      	ldr	r3, [r0, #0]
 800dfe0:	0052      	lsls	r2, r2, #1
 800dfe2:	603b      	str	r3, [r7, #0]
 800dfe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfe6:	60f9      	str	r1, [r7, #12]
 800dfe8:	3b01      	subs	r3, #1
 800dfea:	4293      	cmp	r3, r2
 800dfec:	d906      	bls.n	800dffc <__ssvfscanf_r+0xfcc>
 800dfee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dff0:	3b5e      	subs	r3, #94	; 0x5e
 800dff2:	3bff      	subs	r3, #255	; 0xff
 800dff4:	60fb      	str	r3, [r7, #12]
 800dff6:	235e      	movs	r3, #94	; 0x5e
 800dff8:	33ff      	adds	r3, #255	; 0xff
 800dffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dffc:	23f0      	movs	r3, #240	; 0xf0
 800dffe:	00db      	lsls	r3, r3, #3
 800e000:	431e      	orrs	r6, r3
 800e002:	238c      	movs	r3, #140	; 0x8c
 800e004:	2248      	movs	r2, #72	; 0x48
 800e006:	2400      	movs	r4, #0
 800e008:	005b      	lsls	r3, r3, #1
 800e00a:	189b      	adds	r3, r3, r2
 800e00c:	623c      	str	r4, [r7, #32]
 800e00e:	607c      	str	r4, [r7, #4]
 800e010:	60bc      	str	r4, [r7, #8]
 800e012:	61fc      	str	r4, [r7, #28]
 800e014:	613c      	str	r4, [r7, #16]
 800e016:	19dd      	adds	r5, r3, r7
 800e018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	781a      	ldrb	r2, [r3, #0]
 800e01e:	0010      	movs	r0, r2
 800e020:	382b      	subs	r0, #43	; 0x2b
 800e022:	284e      	cmp	r0, #78	; 0x4e
 800e024:	d900      	bls.n	800e028 <__ssvfscanf_r+0xff8>
 800e026:	e133      	b.n	800e290 <__ssvfscanf_r+0x1260>
 800e028:	f7f2 f87e 	bl	8000128 <__gnu_thumb1_case_uhi>
 800e02c:	0132009b 	.word	0x0132009b
 800e030:	0132009b 	.word	0x0132009b
 800e034:	004f0132 	.word	0x004f0132
 800e038:	00720072 	.word	0x00720072
 800e03c:	00720072 	.word	0x00720072
 800e040:	00720072 	.word	0x00720072
 800e044:	00720072 	.word	0x00720072
 800e048:	01320072 	.word	0x01320072
 800e04c:	01320132 	.word	0x01320132
 800e050:	01320132 	.word	0x01320132
 800e054:	01320132 	.word	0x01320132
 800e058:	007b00bc 	.word	0x007b00bc
 800e05c:	007b007b 	.word	0x007b007b
 800e060:	00f7012f 	.word	0x00f7012f
 800e064:	01320132 	.word	0x01320132
 800e068:	013200e3 	.word	0x013200e3
 800e06c:	01320132 	.word	0x01320132
 800e070:	00a00132 	.word	0x00a00132
 800e074:	01120132 	.word	0x01120132
 800e078:	01320132 	.word	0x01320132
 800e07c:	01010132 	.word	0x01010132
 800e080:	01320132 	.word	0x01320132
 800e084:	00820132 	.word	0x00820132
 800e088:	01320105 	.word	0x01320105
 800e08c:	01320132 	.word	0x01320132
 800e090:	01320132 	.word	0x01320132
 800e094:	01320132 	.word	0x01320132
 800e098:	007b00bc 	.word	0x007b00bc
 800e09c:	007b007b 	.word	0x007b007b
 800e0a0:	00f7012f 	.word	0x00f7012f
 800e0a4:	01320132 	.word	0x01320132
 800e0a8:	013200e3 	.word	0x013200e3
 800e0ac:	01320132 	.word	0x01320132
 800e0b0:	00a00132 	.word	0x00a00132
 800e0b4:	01120132 	.word	0x01120132
 800e0b8:	01320132 	.word	0x01320132
 800e0bc:	01010132 	.word	0x01010132
 800e0c0:	01320132 	.word	0x01320132
 800e0c4:	00820132 	.word	0x00820132
 800e0c8:	0105      	.short	0x0105
 800e0ca:	05f1      	lsls	r1, r6, #23
 800e0cc:	d520      	bpl.n	800e110 <__ssvfscanf_r+0x10e0>
 800e0ce:	2280      	movs	r2, #128	; 0x80
 800e0d0:	4396      	bics	r6, r2
 800e0d2:	69fa      	ldr	r2, [r7, #28]
 800e0d4:	3201      	adds	r2, #1
 800e0d6:	61fa      	str	r2, [r7, #28]
 800e0d8:	68fa      	ldr	r2, [r7, #12]
 800e0da:	2a00      	cmp	r2, #0
 800e0dc:	d004      	beq.n	800e0e8 <__ssvfscanf_r+0x10b8>
 800e0de:	3a01      	subs	r2, #1
 800e0e0:	60fa      	str	r2, [r7, #12]
 800e0e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e0e4:	3201      	adds	r2, #1
 800e0e6:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e0e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e0ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e0ec:	3a01      	subs	r2, #1
 800e0ee:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e0f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e0f2:	3201      	adds	r2, #1
 800e0f4:	63ba      	str	r2, [r7, #56]	; 0x38
 800e0f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e0f8:	6852      	ldr	r2, [r2, #4]
 800e0fa:	3a01      	subs	r2, #1
 800e0fc:	604a      	str	r2, [r1, #4]
 800e0fe:	2a00      	cmp	r2, #0
 800e100:	dc00      	bgt.n	800e104 <__ssvfscanf_r+0x10d4>
 800e102:	e0d6      	b.n	800e2b2 <__ssvfscanf_r+0x1282>
 800e104:	3301      	adds	r3, #1
 800e106:	600b      	str	r3, [r1, #0]
 800e108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d184      	bne.n	800e018 <__ssvfscanf_r+0xfe8>
 800e10e:	e057      	b.n	800e1c0 <__ssvfscanf_r+0x1190>
 800e110:	6a39      	ldr	r1, [r7, #32]
 800e112:	1909      	adds	r1, r1, r4
 800e114:	2900      	cmp	r1, #0
 800e116:	d153      	bne.n	800e1c0 <__ssvfscanf_r+0x1190>
 800e118:	494a      	ldr	r1, [pc, #296]	; (800e244 <__ssvfscanf_r+0x1214>)
 800e11a:	400e      	ands	r6, r1
 800e11c:	702a      	strb	r2, [r5, #0]
 800e11e:	3501      	adds	r5, #1
 800e120:	e7e2      	b.n	800e0e8 <__ssvfscanf_r+0x10b8>
 800e122:	0531      	lsls	r1, r6, #20
 800e124:	d54c      	bpl.n	800e1c0 <__ssvfscanf_r+0x1190>
 800e126:	6a39      	ldr	r1, [r7, #32]
 800e128:	1909      	adds	r1, r1, r4
 800e12a:	2900      	cmp	r1, #0
 800e12c:	d040      	beq.n	800e1b0 <__ssvfscanf_r+0x1180>
 800e12e:	e047      	b.n	800e1c0 <__ssvfscanf_r+0x1190>
 800e130:	2198      	movs	r1, #152	; 0x98
 800e132:	2080      	movs	r0, #128	; 0x80
 800e134:	0109      	lsls	r1, r1, #4
 800e136:	4031      	ands	r1, r6
 800e138:	0040      	lsls	r0, r0, #1
 800e13a:	4281      	cmp	r1, r0
 800e13c:	d140      	bne.n	800e1c0 <__ssvfscanf_r+0x1190>
 800e13e:	69f9      	ldr	r1, [r7, #28]
 800e140:	2901      	cmp	r1, #1
 800e142:	d13d      	bne.n	800e1c0 <__ssvfscanf_r+0x1190>
 800e144:	2080      	movs	r0, #128	; 0x80
 800e146:	4940      	ldr	r1, [pc, #256]	; (800e248 <__ssvfscanf_r+0x1218>)
 800e148:	0100      	lsls	r0, r0, #4
 800e14a:	400e      	ands	r6, r1
 800e14c:	3132      	adds	r1, #50	; 0x32
 800e14e:	31ff      	adds	r1, #255	; 0xff
 800e150:	7029      	strb	r1, [r5, #0]
 800e152:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e154:	4306      	orrs	r6, r0
 800e156:	3901      	subs	r1, #1
 800e158:	63f9      	str	r1, [r7, #60]	; 0x3c
 800e15a:	3501      	adds	r5, #1
 800e15c:	2100      	movs	r1, #0
 800e15e:	61f9      	str	r1, [r7, #28]
 800e160:	e7dc      	b.n	800e11c <__ssvfscanf_r+0x10ec>
 800e162:	2180      	movs	r1, #128	; 0x80
 800e164:	420e      	tst	r6, r1
 800e166:	d02b      	beq.n	800e1c0 <__ssvfscanf_r+0x1190>
 800e168:	438e      	bics	r6, r1
 800e16a:	e7d7      	b.n	800e11c <__ssvfscanf_r+0x10ec>
 800e16c:	6a39      	ldr	r1, [r7, #32]
 800e16e:	2900      	cmp	r1, #0
 800e170:	d10d      	bne.n	800e18e <__ssvfscanf_r+0x115e>
 800e172:	69f9      	ldr	r1, [r7, #28]
 800e174:	2900      	cmp	r1, #0
 800e176:	d10e      	bne.n	800e196 <__ssvfscanf_r+0x1166>
 800e178:	21e0      	movs	r1, #224	; 0xe0
 800e17a:	0030      	movs	r0, r6
 800e17c:	00c9      	lsls	r1, r1, #3
 800e17e:	4008      	ands	r0, r1
 800e180:	4288      	cmp	r0, r1
 800e182:	d108      	bne.n	800e196 <__ssvfscanf_r+0x1166>
 800e184:	4931      	ldr	r1, [pc, #196]	; (800e24c <__ssvfscanf_r+0x121c>)
 800e186:	400e      	ands	r6, r1
 800e188:	2101      	movs	r1, #1
 800e18a:	6239      	str	r1, [r7, #32]
 800e18c:	e7c6      	b.n	800e11c <__ssvfscanf_r+0x10ec>
 800e18e:	6a39      	ldr	r1, [r7, #32]
 800e190:	2902      	cmp	r1, #2
 800e192:	d100      	bne.n	800e196 <__ssvfscanf_r+0x1166>
 800e194:	e089      	b.n	800e2aa <__ssvfscanf_r+0x127a>
 800e196:	2c01      	cmp	r4, #1
 800e198:	d001      	beq.n	800e19e <__ssvfscanf_r+0x116e>
 800e19a:	2c04      	cmp	r4, #4
 800e19c:	d110      	bne.n	800e1c0 <__ssvfscanf_r+0x1190>
 800e19e:	3401      	adds	r4, #1
 800e1a0:	b2e4      	uxtb	r4, r4
 800e1a2:	e7bb      	b.n	800e11c <__ssvfscanf_r+0x10ec>
 800e1a4:	0531      	lsls	r1, r6, #20
 800e1a6:	d508      	bpl.n	800e1ba <__ssvfscanf_r+0x118a>
 800e1a8:	6a39      	ldr	r1, [r7, #32]
 800e1aa:	1909      	adds	r1, r1, r4
 800e1ac:	2900      	cmp	r1, #0
 800e1ae:	d104      	bne.n	800e1ba <__ssvfscanf_r+0x118a>
 800e1b0:	4824      	ldr	r0, [pc, #144]	; (800e244 <__ssvfscanf_r+0x1214>)
 800e1b2:	000c      	movs	r4, r1
 800e1b4:	4006      	ands	r6, r0
 800e1b6:	6239      	str	r1, [r7, #32]
 800e1b8:	e7b0      	b.n	800e11c <__ssvfscanf_r+0x10ec>
 800e1ba:	6a39      	ldr	r1, [r7, #32]
 800e1bc:	2901      	cmp	r1, #1
 800e1be:	d076      	beq.n	800e2ae <__ssvfscanf_r+0x127e>
 800e1c0:	69fb      	ldr	r3, [r7, #28]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d001      	beq.n	800e1ca <__ssvfscanf_r+0x119a>
 800e1c6:	4b20      	ldr	r3, [pc, #128]	; (800e248 <__ssvfscanf_r+0x1218>)
 800e1c8:	401e      	ands	r6, r3
 800e1ca:	6a3b      	ldr	r3, [r7, #32]
 800e1cc:	3b01      	subs	r3, #1
 800e1ce:	2b01      	cmp	r3, #1
 800e1d0:	d877      	bhi.n	800e2c2 <__ssvfscanf_r+0x1292>
 800e1d2:	238c      	movs	r3, #140	; 0x8c
 800e1d4:	2248      	movs	r2, #72	; 0x48
 800e1d6:	005b      	lsls	r3, r3, #1
 800e1d8:	189b      	adds	r3, r3, r2
 800e1da:	19db      	adds	r3, r3, r7
 800e1dc:	429d      	cmp	r5, r3
 800e1de:	d801      	bhi.n	800e1e4 <__ssvfscanf_r+0x11b4>
 800e1e0:	f7ff f823 	bl	800d22a <__ssvfscanf_r+0x1fa>
 800e1e4:	3d01      	subs	r5, #1
 800e1e6:	7829      	ldrb	r1, [r5, #0]
 800e1e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e1ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e1ec:	f001 fe78 	bl	800fee0 <_sungetc_r>
 800e1f0:	e7ef      	b.n	800e1d2 <__ssvfscanf_r+0x11a2>
 800e1f2:	2c00      	cmp	r4, #0
 800e1f4:	d10c      	bne.n	800e210 <__ssvfscanf_r+0x11e0>
 800e1f6:	69f9      	ldr	r1, [r7, #28]
 800e1f8:	2900      	cmp	r1, #0
 800e1fa:	d1e4      	bne.n	800e1c6 <__ssvfscanf_r+0x1196>
 800e1fc:	21e0      	movs	r1, #224	; 0xe0
 800e1fe:	0030      	movs	r0, r6
 800e200:	00c9      	lsls	r1, r1, #3
 800e202:	4008      	ands	r0, r1
 800e204:	4288      	cmp	r0, r1
 800e206:	d1e0      	bne.n	800e1ca <__ssvfscanf_r+0x119a>
 800e208:	4910      	ldr	r1, [pc, #64]	; (800e24c <__ssvfscanf_r+0x121c>)
 800e20a:	3401      	adds	r4, #1
 800e20c:	400e      	ands	r6, r1
 800e20e:	e785      	b.n	800e11c <__ssvfscanf_r+0x10ec>
 800e210:	20fd      	movs	r0, #253	; 0xfd
 800e212:	1ee1      	subs	r1, r4, #3
 800e214:	4201      	tst	r1, r0
 800e216:	d1d3      	bne.n	800e1c0 <__ssvfscanf_r+0x1190>
 800e218:	e7c1      	b.n	800e19e <__ssvfscanf_r+0x116e>
 800e21a:	0531      	lsls	r1, r6, #20
 800e21c:	d503      	bpl.n	800e226 <__ssvfscanf_r+0x11f6>
 800e21e:	6a39      	ldr	r1, [r7, #32]
 800e220:	1909      	adds	r1, r1, r4
 800e222:	2900      	cmp	r1, #0
 800e224:	d0c4      	beq.n	800e1b0 <__ssvfscanf_r+0x1180>
 800e226:	2c02      	cmp	r4, #2
 800e228:	d1ca      	bne.n	800e1c0 <__ssvfscanf_r+0x1190>
 800e22a:	2403      	movs	r4, #3
 800e22c:	e776      	b.n	800e11c <__ssvfscanf_r+0x10ec>
 800e22e:	2c06      	cmp	r4, #6
 800e230:	d1c6      	bne.n	800e1c0 <__ssvfscanf_r+0x1190>
 800e232:	2407      	movs	r4, #7
 800e234:	e772      	b.n	800e11c <__ssvfscanf_r+0x10ec>
 800e236:	2c07      	cmp	r4, #7
 800e238:	d1c2      	bne.n	800e1c0 <__ssvfscanf_r+0x1190>
 800e23a:	2408      	movs	r4, #8
 800e23c:	e76e      	b.n	800e11c <__ssvfscanf_r+0x10ec>
 800e23e:	46c0      	nop			; (mov r8, r8)
 800e240:	0800fa89 	.word	0x0800fa89
 800e244:	fffffe7f 	.word	0xfffffe7f
 800e248:	fffffeff 	.word	0xfffffeff
 800e24c:	fffff87f 	.word	0xfffff87f
 800e250:	0531      	lsls	r1, r6, #20
 800e252:	d5b5      	bpl.n	800e1c0 <__ssvfscanf_r+0x1190>
 800e254:	21a0      	movs	r1, #160	; 0xa0
 800e256:	2080      	movs	r0, #128	; 0x80
 800e258:	00c9      	lsls	r1, r1, #3
 800e25a:	00c0      	lsls	r0, r0, #3
 800e25c:	4031      	ands	r1, r6
 800e25e:	4281      	cmp	r1, r0
 800e260:	d004      	beq.n	800e26c <__ssvfscanf_r+0x123c>
 800e262:	4206      	tst	r6, r0
 800e264:	d0ac      	beq.n	800e1c0 <__ssvfscanf_r+0x1190>
 800e266:	69f9      	ldr	r1, [r7, #28]
 800e268:	2900      	cmp	r1, #0
 800e26a:	d0ae      	beq.n	800e1ca <__ssvfscanf_r+0x119a>
 800e26c:	2180      	movs	r1, #128	; 0x80
 800e26e:	0089      	lsls	r1, r1, #2
 800e270:	420e      	tst	r6, r1
 800e272:	d104      	bne.n	800e27e <__ssvfscanf_r+0x124e>
 800e274:	69f9      	ldr	r1, [r7, #28]
 800e276:	6938      	ldr	r0, [r7, #16]
 800e278:	607d      	str	r5, [r7, #4]
 800e27a:	1a09      	subs	r1, r1, r0
 800e27c:	60b9      	str	r1, [r7, #8]
 800e27e:	20c0      	movs	r0, #192	; 0xc0
 800e280:	4973      	ldr	r1, [pc, #460]	; (800e450 <__ssvfscanf_r+0x1420>)
 800e282:	0040      	lsls	r0, r0, #1
 800e284:	400e      	ands	r6, r1
 800e286:	4306      	orrs	r6, r0
 800e288:	e768      	b.n	800e15c <__ssvfscanf_r+0x112c>
 800e28a:	0531      	lsls	r1, r6, #20
 800e28c:	d5e2      	bpl.n	800e254 <__ssvfscanf_r+0x1224>
 800e28e:	e74a      	b.n	800e126 <__ssvfscanf_r+0x10f6>
 800e290:	6839      	ldr	r1, [r7, #0]
 800e292:	7809      	ldrb	r1, [r1, #0]
 800e294:	4291      	cmp	r1, r2
 800e296:	d193      	bne.n	800e1c0 <__ssvfscanf_r+0x1190>
 800e298:	2180      	movs	r1, #128	; 0x80
 800e29a:	0089      	lsls	r1, r1, #2
 800e29c:	420e      	tst	r6, r1
 800e29e:	d08f      	beq.n	800e1c0 <__ssvfscanf_r+0x1190>
 800e2a0:	496c      	ldr	r1, [pc, #432]	; (800e454 <__ssvfscanf_r+0x1424>)
 800e2a2:	400e      	ands	r6, r1
 800e2a4:	69f9      	ldr	r1, [r7, #28]
 800e2a6:	6139      	str	r1, [r7, #16]
 800e2a8:	e738      	b.n	800e11c <__ssvfscanf_r+0x10ec>
 800e2aa:	2103      	movs	r1, #3
 800e2ac:	e76d      	b.n	800e18a <__ssvfscanf_r+0x115a>
 800e2ae:	2102      	movs	r1, #2
 800e2b0:	e76b      	b.n	800e18a <__ssvfscanf_r+0x115a>
 800e2b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e2b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e2b6:	f001 fe4f 	bl	800ff58 <__ssrefill_r>
 800e2ba:	2800      	cmp	r0, #0
 800e2bc:	d100      	bne.n	800e2c0 <__ssvfscanf_r+0x1290>
 800e2be:	e723      	b.n	800e108 <__ssvfscanf_r+0x10d8>
 800e2c0:	e77e      	b.n	800e1c0 <__ssvfscanf_r+0x1190>
 800e2c2:	1e63      	subs	r3, r4, #1
 800e2c4:	2b06      	cmp	r3, #6
 800e2c6:	d825      	bhi.n	800e314 <__ssvfscanf_r+0x12e4>
 800e2c8:	2c02      	cmp	r4, #2
 800e2ca:	d837      	bhi.n	800e33c <__ssvfscanf_r+0x130c>
 800e2cc:	238c      	movs	r3, #140	; 0x8c
 800e2ce:	2248      	movs	r2, #72	; 0x48
 800e2d0:	005b      	lsls	r3, r3, #1
 800e2d2:	189b      	adds	r3, r3, r2
 800e2d4:	19db      	adds	r3, r3, r7
 800e2d6:	429d      	cmp	r5, r3
 800e2d8:	d801      	bhi.n	800e2de <__ssvfscanf_r+0x12ae>
 800e2da:	f7fe ffa6 	bl	800d22a <__ssvfscanf_r+0x1fa>
 800e2de:	3d01      	subs	r5, #1
 800e2e0:	7829      	ldrb	r1, [r5, #0]
 800e2e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e2e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e2e6:	f001 fdfb 	bl	800fee0 <_sungetc_r>
 800e2ea:	e7ef      	b.n	800e2cc <__ssvfscanf_r+0x129c>
 800e2ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e2f0:	3b01      	subs	r3, #1
 800e2f2:	7819      	ldrb	r1, [r3, #0]
 800e2f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e2f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e2f8:	f001 fdf2 	bl	800fee0 <_sungetc_r>
 800e2fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2fe:	6a3a      	ldr	r2, [r7, #32]
 800e300:	189b      	adds	r3, r3, r2
 800e302:	b2db      	uxtb	r3, r3
 800e304:	2b03      	cmp	r3, #3
 800e306:	d8f1      	bhi.n	800e2ec <__ssvfscanf_r+0x12bc>
 800e308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e30a:	3c03      	subs	r4, #3
 800e30c:	b2e4      	uxtb	r4, r4
 800e30e:	1b1b      	subs	r3, r3, r4
 800e310:	1b2d      	subs	r5, r5, r4
 800e312:	63bb      	str	r3, [r7, #56]	; 0x38
 800e314:	05f3      	lsls	r3, r6, #23
 800e316:	d52f      	bpl.n	800e378 <__ssvfscanf_r+0x1348>
 800e318:	0573      	lsls	r3, r6, #21
 800e31a:	d514      	bpl.n	800e346 <__ssvfscanf_r+0x1316>
 800e31c:	238c      	movs	r3, #140	; 0x8c
 800e31e:	2248      	movs	r2, #72	; 0x48
 800e320:	005b      	lsls	r3, r3, #1
 800e322:	189b      	adds	r3, r3, r2
 800e324:	19db      	adds	r3, r3, r7
 800e326:	429d      	cmp	r5, r3
 800e328:	d801      	bhi.n	800e32e <__ssvfscanf_r+0x12fe>
 800e32a:	f7fe ff7e 	bl	800d22a <__ssvfscanf_r+0x1fa>
 800e32e:	3d01      	subs	r5, #1
 800e330:	7829      	ldrb	r1, [r5, #0]
 800e332:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e334:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e336:	f001 fdd3 	bl	800fee0 <_sungetc_r>
 800e33a:	e7ef      	b.n	800e31c <__ssvfscanf_r+0x12ec>
 800e33c:	1b63      	subs	r3, r4, r5
 800e33e:	b2db      	uxtb	r3, r3
 800e340:	63fd      	str	r5, [r7, #60]	; 0x3c
 800e342:	623b      	str	r3, [r7, #32]
 800e344:	e7da      	b.n	800e2fc <__ssvfscanf_r+0x12cc>
 800e346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e348:	1e6c      	subs	r4, r5, #1
 800e34a:	7821      	ldrb	r1, [r4, #0]
 800e34c:	3b01      	subs	r3, #1
 800e34e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e350:	2965      	cmp	r1, #101	; 0x65
 800e352:	d00a      	beq.n	800e36a <__ssvfscanf_r+0x133a>
 800e354:	2945      	cmp	r1, #69	; 0x45
 800e356:	d008      	beq.n	800e36a <__ssvfscanf_r+0x133a>
 800e358:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e35a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e35c:	f001 fdc0 	bl	800fee0 <_sungetc_r>
 800e360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e362:	1eac      	subs	r4, r5, #2
 800e364:	3b02      	subs	r3, #2
 800e366:	7821      	ldrb	r1, [r4, #0]
 800e368:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e36a:	0025      	movs	r5, r4
 800e36c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e36e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e370:	f001 fdb6 	bl	800fee0 <_sungetc_r>
 800e374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e376:	63bb      	str	r3, [r7, #56]	; 0x38
 800e378:	2310      	movs	r3, #16
 800e37a:	0032      	movs	r2, r6
 800e37c:	401a      	ands	r2, r3
 800e37e:	421e      	tst	r6, r3
 800e380:	d001      	beq.n	800e386 <__ssvfscanf_r+0x1356>
 800e382:	f7fe fe71 	bl	800d068 <__ssvfscanf_r+0x38>
 800e386:	23c0      	movs	r3, #192	; 0xc0
 800e388:	2180      	movs	r1, #128	; 0x80
 800e38a:	00db      	lsls	r3, r3, #3
 800e38c:	702a      	strb	r2, [r5, #0]
 800e38e:	4033      	ands	r3, r6
 800e390:	00c9      	lsls	r1, r1, #3
 800e392:	428b      	cmp	r3, r1
 800e394:	d11f      	bne.n	800e3d6 <__ssvfscanf_r+0x13a6>
 800e396:	693b      	ldr	r3, [r7, #16]
 800e398:	69fa      	ldr	r2, [r7, #28]
 800e39a:	69f9      	ldr	r1, [r7, #28]
 800e39c:	1a9a      	subs	r2, r3, r2
 800e39e:	428b      	cmp	r3, r1
 800e3a0:	d125      	bne.n	800e3ee <__ssvfscanf_r+0x13be>
 800e3a2:	238c      	movs	r3, #140	; 0x8c
 800e3a4:	2148      	movs	r1, #72	; 0x48
 800e3a6:	005b      	lsls	r3, r3, #1
 800e3a8:	185b      	adds	r3, r3, r1
 800e3aa:	19d9      	adds	r1, r3, r7
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e3b0:	f7fb ffca 	bl	800a348 <_strtod_r>
 800e3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3b6:	0004      	movs	r4, r0
 800e3b8:	3304      	adds	r3, #4
 800e3ba:	000d      	movs	r5, r1
 800e3bc:	623b      	str	r3, [r7, #32]
 800e3be:	07f3      	lsls	r3, r6, #31
 800e3c0:	d523      	bpl.n	800e40a <__ssvfscanf_r+0x13da>
 800e3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	601c      	str	r4, [r3, #0]
 800e3c8:	605d      	str	r5, [r3, #4]
 800e3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3cc:	3301      	adds	r3, #1
 800e3ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e3d0:	6a3b      	ldr	r3, [r7, #32]
 800e3d2:	f7fe ffa5 	bl	800d320 <__ssvfscanf_r+0x2f0>
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d0e2      	beq.n	800e3a2 <__ssvfscanf_r+0x1372>
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e3e0:	1c59      	adds	r1, r3, #1
 800e3e2:	230a      	movs	r3, #10
 800e3e4:	f7fc f84c 	bl	800a480 <_strtol_r>
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	687d      	ldr	r5, [r7, #4]
 800e3ec:	1ac2      	subs	r2, r0, r3
 800e3ee:	2148      	movs	r1, #72	; 0x48
 800e3f0:	4b19      	ldr	r3, [pc, #100]	; (800e458 <__ssvfscanf_r+0x1428>)
 800e3f2:	185b      	adds	r3, r3, r1
 800e3f4:	19db      	adds	r3, r3, r7
 800e3f6:	429d      	cmp	r5, r3
 800e3f8:	d302      	bcc.n	800e400 <__ssvfscanf_r+0x13d0>
 800e3fa:	4b18      	ldr	r3, [pc, #96]	; (800e45c <__ssvfscanf_r+0x142c>)
 800e3fc:	185b      	adds	r3, r3, r1
 800e3fe:	19dd      	adds	r5, r3, r7
 800e400:	0028      	movs	r0, r5
 800e402:	4917      	ldr	r1, [pc, #92]	; (800e460 <__ssvfscanf_r+0x1430>)
 800e404:	f7fc f944 	bl	800a690 <sprintf>
 800e408:	e7cb      	b.n	800e3a2 <__ssvfscanf_r+0x1372>
 800e40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e410:	07b6      	lsls	r6, r6, #30
 800e412:	d4d8      	bmi.n	800e3c6 <__ssvfscanf_r+0x1396>
 800e414:	0002      	movs	r2, r0
 800e416:	000b      	movs	r3, r1
 800e418:	f7f3 ff6c 	bl	80022f4 <__aeabi_dcmpun>
 800e41c:	2800      	cmp	r0, #0
 800e41e:	d005      	beq.n	800e42c <__ssvfscanf_r+0x13fc>
 800e420:	4810      	ldr	r0, [pc, #64]	; (800e464 <__ssvfscanf_r+0x1434>)
 800e422:	f7fc fabf 	bl	800a9a4 <nanf>
 800e426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e428:	6018      	str	r0, [r3, #0]
 800e42a:	e7ce      	b.n	800e3ca <__ssvfscanf_r+0x139a>
 800e42c:	0020      	movs	r0, r4
 800e42e:	0029      	movs	r1, r5
 800e430:	f7f4 f80a 	bl	8002448 <__aeabi_d2f>
 800e434:	e7f7      	b.n	800e426 <__ssvfscanf_r+0x13f6>
 800e436:	00a3      	lsls	r3, r4, #2
 800e438:	18ed      	adds	r5, r5, r3
 800e43a:	682b      	ldr	r3, [r5, #0]
 800e43c:	3401      	adds	r4, #1
 800e43e:	6818      	ldr	r0, [r3, #0]
 800e440:	f7fa ff32 	bl	80092a8 <free>
 800e444:	2200      	movs	r2, #0
 800e446:	682b      	ldr	r3, [r5, #0]
 800e448:	601a      	str	r2, [r3, #0]
 800e44a:	f7fe ffc3 	bl	800d3d4 <__ssvfscanf_r+0x3a4>
 800e44e:	46c0      	nop			; (mov r8, r8)
 800e450:	fffff07f 	.word	0xfffff07f
 800e454:	fffffd7f 	.word	0xfffffd7f
 800e458:	0000026b 	.word	0x0000026b
 800e45c:	0000026a 	.word	0x0000026a
 800e460:	08012eb0 	.word	0x08012eb0
 800e464:	08012f13 	.word	0x08012f13

0800e468 <_fclose_r>:
 800e468:	b570      	push	{r4, r5, r6, lr}
 800e46a:	0005      	movs	r5, r0
 800e46c:	1e0c      	subs	r4, r1, #0
 800e46e:	d102      	bne.n	800e476 <_fclose_r+0xe>
 800e470:	2600      	movs	r6, #0
 800e472:	0030      	movs	r0, r6
 800e474:	bd70      	pop	{r4, r5, r6, pc}
 800e476:	2800      	cmp	r0, #0
 800e478:	d004      	beq.n	800e484 <_fclose_r+0x1c>
 800e47a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d101      	bne.n	800e484 <_fclose_r+0x1c>
 800e480:	f7fc f89e 	bl	800a5c0 <__sinit>
 800e484:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e486:	07db      	lsls	r3, r3, #31
 800e488:	d405      	bmi.n	800e496 <_fclose_r+0x2e>
 800e48a:	89a3      	ldrh	r3, [r4, #12]
 800e48c:	059b      	lsls	r3, r3, #22
 800e48e:	d402      	bmi.n	800e496 <_fclose_r+0x2e>
 800e490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e492:	f7fc fa6b 	bl	800a96c <__retarget_lock_acquire_recursive>
 800e496:	220c      	movs	r2, #12
 800e498:	5ea3      	ldrsh	r3, [r4, r2]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d109      	bne.n	800e4b2 <_fclose_r+0x4a>
 800e49e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e4a0:	3301      	adds	r3, #1
 800e4a2:	0016      	movs	r6, r2
 800e4a4:	401e      	ands	r6, r3
 800e4a6:	421a      	tst	r2, r3
 800e4a8:	d1e2      	bne.n	800e470 <_fclose_r+0x8>
 800e4aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e4ac:	f7fc fa5f 	bl	800a96e <__retarget_lock_release_recursive>
 800e4b0:	e7df      	b.n	800e472 <_fclose_r+0xa>
 800e4b2:	0021      	movs	r1, r4
 800e4b4:	0028      	movs	r0, r5
 800e4b6:	f000 f837 	bl	800e528 <__sflush_r>
 800e4ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e4bc:	0006      	movs	r6, r0
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d006      	beq.n	800e4d0 <_fclose_r+0x68>
 800e4c2:	0028      	movs	r0, r5
 800e4c4:	69e1      	ldr	r1, [r4, #28]
 800e4c6:	4798      	blx	r3
 800e4c8:	2800      	cmp	r0, #0
 800e4ca:	da01      	bge.n	800e4d0 <_fclose_r+0x68>
 800e4cc:	2601      	movs	r6, #1
 800e4ce:	4276      	negs	r6, r6
 800e4d0:	89a3      	ldrh	r3, [r4, #12]
 800e4d2:	061b      	lsls	r3, r3, #24
 800e4d4:	d503      	bpl.n	800e4de <_fclose_r+0x76>
 800e4d6:	0028      	movs	r0, r5
 800e4d8:	6921      	ldr	r1, [r4, #16]
 800e4da:	f7fc facf 	bl	800aa7c <_free_r>
 800e4de:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e4e0:	2900      	cmp	r1, #0
 800e4e2:	d008      	beq.n	800e4f6 <_fclose_r+0x8e>
 800e4e4:	0023      	movs	r3, r4
 800e4e6:	3340      	adds	r3, #64	; 0x40
 800e4e8:	4299      	cmp	r1, r3
 800e4ea:	d002      	beq.n	800e4f2 <_fclose_r+0x8a>
 800e4ec:	0028      	movs	r0, r5
 800e4ee:	f7fc fac5 	bl	800aa7c <_free_r>
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	6323      	str	r3, [r4, #48]	; 0x30
 800e4f6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e4f8:	2900      	cmp	r1, #0
 800e4fa:	d004      	beq.n	800e506 <_fclose_r+0x9e>
 800e4fc:	0028      	movs	r0, r5
 800e4fe:	f7fc fabd 	bl	800aa7c <_free_r>
 800e502:	2300      	movs	r3, #0
 800e504:	6463      	str	r3, [r4, #68]	; 0x44
 800e506:	f7fc f84b 	bl	800a5a0 <__sfp_lock_acquire>
 800e50a:	2300      	movs	r3, #0
 800e50c:	81a3      	strh	r3, [r4, #12]
 800e50e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e510:	07db      	lsls	r3, r3, #31
 800e512:	d402      	bmi.n	800e51a <_fclose_r+0xb2>
 800e514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e516:	f7fc fa2a 	bl	800a96e <__retarget_lock_release_recursive>
 800e51a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e51c:	f7fc fa25 	bl	800a96a <__retarget_lock_close_recursive>
 800e520:	f7fc f846 	bl	800a5b0 <__sfp_lock_release>
 800e524:	e7a5      	b.n	800e472 <_fclose_r+0xa>
	...

0800e528 <__sflush_r>:
 800e528:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e52a:	230c      	movs	r3, #12
 800e52c:	5eca      	ldrsh	r2, [r1, r3]
 800e52e:	000c      	movs	r4, r1
 800e530:	0005      	movs	r5, r0
 800e532:	b291      	uxth	r1, r2
 800e534:	0713      	lsls	r3, r2, #28
 800e536:	d464      	bmi.n	800e602 <__sflush_r+0xda>
 800e538:	2380      	movs	r3, #128	; 0x80
 800e53a:	011b      	lsls	r3, r3, #4
 800e53c:	4313      	orrs	r3, r2
 800e53e:	6862      	ldr	r2, [r4, #4]
 800e540:	81a3      	strh	r3, [r4, #12]
 800e542:	2a00      	cmp	r2, #0
 800e544:	dc04      	bgt.n	800e550 <__sflush_r+0x28>
 800e546:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e548:	2a00      	cmp	r2, #0
 800e54a:	dc01      	bgt.n	800e550 <__sflush_r+0x28>
 800e54c:	2000      	movs	r0, #0
 800e54e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e550:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800e552:	2f00      	cmp	r7, #0
 800e554:	d0fa      	beq.n	800e54c <__sflush_r+0x24>
 800e556:	2200      	movs	r2, #0
 800e558:	2080      	movs	r0, #128	; 0x80
 800e55a:	682e      	ldr	r6, [r5, #0]
 800e55c:	602a      	str	r2, [r5, #0]
 800e55e:	001a      	movs	r2, r3
 800e560:	0140      	lsls	r0, r0, #5
 800e562:	69e1      	ldr	r1, [r4, #28]
 800e564:	4002      	ands	r2, r0
 800e566:	4203      	tst	r3, r0
 800e568:	d038      	beq.n	800e5dc <__sflush_r+0xb4>
 800e56a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e56c:	89a3      	ldrh	r3, [r4, #12]
 800e56e:	075b      	lsls	r3, r3, #29
 800e570:	d506      	bpl.n	800e580 <__sflush_r+0x58>
 800e572:	6863      	ldr	r3, [r4, #4]
 800e574:	1ac0      	subs	r0, r0, r3
 800e576:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d001      	beq.n	800e580 <__sflush_r+0x58>
 800e57c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e57e:	1ac0      	subs	r0, r0, r3
 800e580:	0002      	movs	r2, r0
 800e582:	2300      	movs	r3, #0
 800e584:	0028      	movs	r0, r5
 800e586:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800e588:	69e1      	ldr	r1, [r4, #28]
 800e58a:	47b8      	blx	r7
 800e58c:	89a2      	ldrh	r2, [r4, #12]
 800e58e:	1c43      	adds	r3, r0, #1
 800e590:	d106      	bne.n	800e5a0 <__sflush_r+0x78>
 800e592:	6829      	ldr	r1, [r5, #0]
 800e594:	291d      	cmp	r1, #29
 800e596:	d830      	bhi.n	800e5fa <__sflush_r+0xd2>
 800e598:	4b2c      	ldr	r3, [pc, #176]	; (800e64c <__sflush_r+0x124>)
 800e59a:	410b      	asrs	r3, r1
 800e59c:	07db      	lsls	r3, r3, #31
 800e59e:	d42c      	bmi.n	800e5fa <__sflush_r+0xd2>
 800e5a0:	4b2b      	ldr	r3, [pc, #172]	; (800e650 <__sflush_r+0x128>)
 800e5a2:	4013      	ands	r3, r2
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	6062      	str	r2, [r4, #4]
 800e5a8:	6922      	ldr	r2, [r4, #16]
 800e5aa:	b21b      	sxth	r3, r3
 800e5ac:	81a3      	strh	r3, [r4, #12]
 800e5ae:	6022      	str	r2, [r4, #0]
 800e5b0:	04db      	lsls	r3, r3, #19
 800e5b2:	d505      	bpl.n	800e5c0 <__sflush_r+0x98>
 800e5b4:	1c43      	adds	r3, r0, #1
 800e5b6:	d102      	bne.n	800e5be <__sflush_r+0x96>
 800e5b8:	682b      	ldr	r3, [r5, #0]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d100      	bne.n	800e5c0 <__sflush_r+0x98>
 800e5be:	6520      	str	r0, [r4, #80]	; 0x50
 800e5c0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e5c2:	602e      	str	r6, [r5, #0]
 800e5c4:	2900      	cmp	r1, #0
 800e5c6:	d0c1      	beq.n	800e54c <__sflush_r+0x24>
 800e5c8:	0023      	movs	r3, r4
 800e5ca:	3340      	adds	r3, #64	; 0x40
 800e5cc:	4299      	cmp	r1, r3
 800e5ce:	d002      	beq.n	800e5d6 <__sflush_r+0xae>
 800e5d0:	0028      	movs	r0, r5
 800e5d2:	f7fc fa53 	bl	800aa7c <_free_r>
 800e5d6:	2000      	movs	r0, #0
 800e5d8:	6320      	str	r0, [r4, #48]	; 0x30
 800e5da:	e7b8      	b.n	800e54e <__sflush_r+0x26>
 800e5dc:	2301      	movs	r3, #1
 800e5de:	0028      	movs	r0, r5
 800e5e0:	47b8      	blx	r7
 800e5e2:	1c43      	adds	r3, r0, #1
 800e5e4:	d1c2      	bne.n	800e56c <__sflush_r+0x44>
 800e5e6:	682b      	ldr	r3, [r5, #0]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d0bf      	beq.n	800e56c <__sflush_r+0x44>
 800e5ec:	2b1d      	cmp	r3, #29
 800e5ee:	d001      	beq.n	800e5f4 <__sflush_r+0xcc>
 800e5f0:	2b16      	cmp	r3, #22
 800e5f2:	d101      	bne.n	800e5f8 <__sflush_r+0xd0>
 800e5f4:	602e      	str	r6, [r5, #0]
 800e5f6:	e7a9      	b.n	800e54c <__sflush_r+0x24>
 800e5f8:	89a2      	ldrh	r2, [r4, #12]
 800e5fa:	2340      	movs	r3, #64	; 0x40
 800e5fc:	4313      	orrs	r3, r2
 800e5fe:	81a3      	strh	r3, [r4, #12]
 800e600:	e7a5      	b.n	800e54e <__sflush_r+0x26>
 800e602:	6926      	ldr	r6, [r4, #16]
 800e604:	2e00      	cmp	r6, #0
 800e606:	d0a1      	beq.n	800e54c <__sflush_r+0x24>
 800e608:	6827      	ldr	r7, [r4, #0]
 800e60a:	6026      	str	r6, [r4, #0]
 800e60c:	1bbb      	subs	r3, r7, r6
 800e60e:	9301      	str	r3, [sp, #4]
 800e610:	2300      	movs	r3, #0
 800e612:	0789      	lsls	r1, r1, #30
 800e614:	d100      	bne.n	800e618 <__sflush_r+0xf0>
 800e616:	6963      	ldr	r3, [r4, #20]
 800e618:	60a3      	str	r3, [r4, #8]
 800e61a:	9b01      	ldr	r3, [sp, #4]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	dc00      	bgt.n	800e622 <__sflush_r+0xfa>
 800e620:	e794      	b.n	800e54c <__sflush_r+0x24>
 800e622:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e624:	0032      	movs	r2, r6
 800e626:	001f      	movs	r7, r3
 800e628:	0028      	movs	r0, r5
 800e62a:	9b01      	ldr	r3, [sp, #4]
 800e62c:	69e1      	ldr	r1, [r4, #28]
 800e62e:	47b8      	blx	r7
 800e630:	2800      	cmp	r0, #0
 800e632:	dc06      	bgt.n	800e642 <__sflush_r+0x11a>
 800e634:	2340      	movs	r3, #64	; 0x40
 800e636:	2001      	movs	r0, #1
 800e638:	89a2      	ldrh	r2, [r4, #12]
 800e63a:	4240      	negs	r0, r0
 800e63c:	4313      	orrs	r3, r2
 800e63e:	81a3      	strh	r3, [r4, #12]
 800e640:	e785      	b.n	800e54e <__sflush_r+0x26>
 800e642:	9b01      	ldr	r3, [sp, #4]
 800e644:	1836      	adds	r6, r6, r0
 800e646:	1a1b      	subs	r3, r3, r0
 800e648:	9301      	str	r3, [sp, #4]
 800e64a:	e7e6      	b.n	800e61a <__sflush_r+0xf2>
 800e64c:	dfbffffe 	.word	0xdfbffffe
 800e650:	fffff7ff 	.word	0xfffff7ff

0800e654 <_fflush_r>:
 800e654:	b570      	push	{r4, r5, r6, lr}
 800e656:	0005      	movs	r5, r0
 800e658:	000c      	movs	r4, r1
 800e65a:	2800      	cmp	r0, #0
 800e65c:	d004      	beq.n	800e668 <_fflush_r+0x14>
 800e65e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e660:	2b00      	cmp	r3, #0
 800e662:	d101      	bne.n	800e668 <_fflush_r+0x14>
 800e664:	f7fb ffac 	bl	800a5c0 <__sinit>
 800e668:	220c      	movs	r2, #12
 800e66a:	5ea3      	ldrsh	r3, [r4, r2]
 800e66c:	1e1e      	subs	r6, r3, #0
 800e66e:	d015      	beq.n	800e69c <_fflush_r+0x48>
 800e670:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e672:	07d2      	lsls	r2, r2, #31
 800e674:	d404      	bmi.n	800e680 <_fflush_r+0x2c>
 800e676:	059b      	lsls	r3, r3, #22
 800e678:	d402      	bmi.n	800e680 <_fflush_r+0x2c>
 800e67a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e67c:	f7fc f976 	bl	800a96c <__retarget_lock_acquire_recursive>
 800e680:	0021      	movs	r1, r4
 800e682:	0028      	movs	r0, r5
 800e684:	f7ff ff50 	bl	800e528 <__sflush_r>
 800e688:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e68a:	0006      	movs	r6, r0
 800e68c:	07db      	lsls	r3, r3, #31
 800e68e:	d405      	bmi.n	800e69c <_fflush_r+0x48>
 800e690:	89a3      	ldrh	r3, [r4, #12]
 800e692:	059b      	lsls	r3, r3, #22
 800e694:	d402      	bmi.n	800e69c <_fflush_r+0x48>
 800e696:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e698:	f7fc f969 	bl	800a96e <__retarget_lock_release_recursive>
 800e69c:	0030      	movs	r0, r6
 800e69e:	bd70      	pop	{r4, r5, r6, pc}

0800e6a0 <__sccl>:
 800e6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6a2:	780b      	ldrb	r3, [r1, #0]
 800e6a4:	0004      	movs	r4, r0
 800e6a6:	2b5e      	cmp	r3, #94	; 0x5e
 800e6a8:	d019      	beq.n	800e6de <__sccl+0x3e>
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	1c4d      	adds	r5, r1, #1
 800e6ae:	0021      	movs	r1, r4
 800e6b0:	1c60      	adds	r0, r4, #1
 800e6b2:	30ff      	adds	r0, #255	; 0xff
 800e6b4:	700a      	strb	r2, [r1, #0]
 800e6b6:	3101      	adds	r1, #1
 800e6b8:	4281      	cmp	r1, r0
 800e6ba:	d1fb      	bne.n	800e6b4 <__sccl+0x14>
 800e6bc:	1e68      	subs	r0, r5, #1
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d00c      	beq.n	800e6dc <__sccl+0x3c>
 800e6c2:	2101      	movs	r1, #1
 800e6c4:	262d      	movs	r6, #45	; 0x2d
 800e6c6:	404a      	eors	r2, r1
 800e6c8:	0028      	movs	r0, r5
 800e6ca:	54e2      	strb	r2, [r4, r3]
 800e6cc:	7801      	ldrb	r1, [r0, #0]
 800e6ce:	1c45      	adds	r5, r0, #1
 800e6d0:	292d      	cmp	r1, #45	; 0x2d
 800e6d2:	d00c      	beq.n	800e6ee <__sccl+0x4e>
 800e6d4:	295d      	cmp	r1, #93	; 0x5d
 800e6d6:	d01d      	beq.n	800e714 <__sccl+0x74>
 800e6d8:	2900      	cmp	r1, #0
 800e6da:	d104      	bne.n	800e6e6 <__sccl+0x46>
 800e6dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6de:	2201      	movs	r2, #1
 800e6e0:	784b      	ldrb	r3, [r1, #1]
 800e6e2:	1c8d      	adds	r5, r1, #2
 800e6e4:	e7e3      	b.n	800e6ae <__sccl+0xe>
 800e6e6:	000b      	movs	r3, r1
 800e6e8:	e7ee      	b.n	800e6c8 <__sccl+0x28>
 800e6ea:	0033      	movs	r3, r6
 800e6ec:	e7ec      	b.n	800e6c8 <__sccl+0x28>
 800e6ee:	7841      	ldrb	r1, [r0, #1]
 800e6f0:	295d      	cmp	r1, #93	; 0x5d
 800e6f2:	d0fa      	beq.n	800e6ea <__sccl+0x4a>
 800e6f4:	428b      	cmp	r3, r1
 800e6f6:	dcf8      	bgt.n	800e6ea <__sccl+0x4a>
 800e6f8:	001d      	movs	r5, r3
 800e6fa:	3002      	adds	r0, #2
 800e6fc:	3501      	adds	r5, #1
 800e6fe:	5562      	strb	r2, [r4, r5]
 800e700:	42a9      	cmp	r1, r5
 800e702:	dcfb      	bgt.n	800e6fc <__sccl+0x5c>
 800e704:	2500      	movs	r5, #0
 800e706:	1c5f      	adds	r7, r3, #1
 800e708:	428b      	cmp	r3, r1
 800e70a:	da01      	bge.n	800e710 <__sccl+0x70>
 800e70c:	1acd      	subs	r5, r1, r3
 800e70e:	3d01      	subs	r5, #1
 800e710:	197b      	adds	r3, r7, r5
 800e712:	e7db      	b.n	800e6cc <__sccl+0x2c>
 800e714:	0028      	movs	r0, r5
 800e716:	e7e1      	b.n	800e6dc <__sccl+0x3c>

0800e718 <_localeconv_r>:
 800e718:	4800      	ldr	r0, [pc, #0]	; (800e71c <_localeconv_r+0x4>)
 800e71a:	4770      	bx	lr
 800e71c:	20000544 	.word	0x20000544

0800e720 <__libc_fini_array>:
 800e720:	b570      	push	{r4, r5, r6, lr}
 800e722:	4c07      	ldr	r4, [pc, #28]	; (800e740 <__libc_fini_array+0x20>)
 800e724:	4d07      	ldr	r5, [pc, #28]	; (800e744 <__libc_fini_array+0x24>)
 800e726:	1b64      	subs	r4, r4, r5
 800e728:	10a4      	asrs	r4, r4, #2
 800e72a:	2c00      	cmp	r4, #0
 800e72c:	d102      	bne.n	800e734 <__libc_fini_array+0x14>
 800e72e:	f002 fdcd 	bl	80112cc <_fini>
 800e732:	bd70      	pop	{r4, r5, r6, pc}
 800e734:	3c01      	subs	r4, #1
 800e736:	00a3      	lsls	r3, r4, #2
 800e738:	58eb      	ldr	r3, [r5, r3]
 800e73a:	4798      	blx	r3
 800e73c:	e7f5      	b.n	800e72a <__libc_fini_array+0xa>
 800e73e:	46c0      	nop			; (mov r8, r8)
 800e740:	08012fb0 	.word	0x08012fb0
 800e744:	08012fac 	.word	0x08012fac

0800e748 <memchr>:
 800e748:	b2c9      	uxtb	r1, r1
 800e74a:	1882      	adds	r2, r0, r2
 800e74c:	4290      	cmp	r0, r2
 800e74e:	d101      	bne.n	800e754 <memchr+0xc>
 800e750:	2000      	movs	r0, #0
 800e752:	4770      	bx	lr
 800e754:	7803      	ldrb	r3, [r0, #0]
 800e756:	428b      	cmp	r3, r1
 800e758:	d0fb      	beq.n	800e752 <memchr+0xa>
 800e75a:	3001      	adds	r0, #1
 800e75c:	e7f6      	b.n	800e74c <memchr+0x4>
	...

0800e760 <frexp>:
 800e760:	b570      	push	{r4, r5, r6, lr}
 800e762:	0014      	movs	r4, r2
 800e764:	2500      	movs	r5, #0
 800e766:	6025      	str	r5, [r4, #0]
 800e768:	4d10      	ldr	r5, [pc, #64]	; (800e7ac <frexp+0x4c>)
 800e76a:	004b      	lsls	r3, r1, #1
 800e76c:	000a      	movs	r2, r1
 800e76e:	085b      	lsrs	r3, r3, #1
 800e770:	42ab      	cmp	r3, r5
 800e772:	dc1a      	bgt.n	800e7aa <frexp+0x4a>
 800e774:	001d      	movs	r5, r3
 800e776:	4305      	orrs	r5, r0
 800e778:	d017      	beq.n	800e7aa <frexp+0x4a>
 800e77a:	4d0d      	ldr	r5, [pc, #52]	; (800e7b0 <frexp+0x50>)
 800e77c:	4229      	tst	r1, r5
 800e77e:	d109      	bne.n	800e794 <frexp+0x34>
 800e780:	2200      	movs	r2, #0
 800e782:	4b0c      	ldr	r3, [pc, #48]	; (800e7b4 <frexp+0x54>)
 800e784:	f7f2 ff72 	bl	800166c <__aeabi_dmul>
 800e788:	2536      	movs	r5, #54	; 0x36
 800e78a:	000a      	movs	r2, r1
 800e78c:	004b      	lsls	r3, r1, #1
 800e78e:	426d      	negs	r5, r5
 800e790:	085b      	lsrs	r3, r3, #1
 800e792:	6025      	str	r5, [r4, #0]
 800e794:	4d08      	ldr	r5, [pc, #32]	; (800e7b8 <frexp+0x58>)
 800e796:	151b      	asrs	r3, r3, #20
 800e798:	195b      	adds	r3, r3, r5
 800e79a:	6825      	ldr	r5, [r4, #0]
 800e79c:	18eb      	adds	r3, r5, r3
 800e79e:	6023      	str	r3, [r4, #0]
 800e7a0:	4b06      	ldr	r3, [pc, #24]	; (800e7bc <frexp+0x5c>)
 800e7a2:	401a      	ands	r2, r3
 800e7a4:	4b06      	ldr	r3, [pc, #24]	; (800e7c0 <frexp+0x60>)
 800e7a6:	4313      	orrs	r3, r2
 800e7a8:	0019      	movs	r1, r3
 800e7aa:	bd70      	pop	{r4, r5, r6, pc}
 800e7ac:	7fefffff 	.word	0x7fefffff
 800e7b0:	7ff00000 	.word	0x7ff00000
 800e7b4:	43500000 	.word	0x43500000
 800e7b8:	fffffc02 	.word	0xfffffc02
 800e7bc:	800fffff 	.word	0x800fffff
 800e7c0:	3fe00000 	.word	0x3fe00000

0800e7c4 <__register_exitproc>:
 800e7c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7c6:	4f1c      	ldr	r7, [pc, #112]	; (800e838 <__register_exitproc+0x74>)
 800e7c8:	0004      	movs	r4, r0
 800e7ca:	6838      	ldr	r0, [r7, #0]
 800e7cc:	0016      	movs	r6, r2
 800e7ce:	9301      	str	r3, [sp, #4]
 800e7d0:	9100      	str	r1, [sp, #0]
 800e7d2:	f7fc f8cb 	bl	800a96c <__retarget_lock_acquire_recursive>
 800e7d6:	4a19      	ldr	r2, [pc, #100]	; (800e83c <__register_exitproc+0x78>)
 800e7d8:	6813      	ldr	r3, [r2, #0]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d101      	bne.n	800e7e2 <__register_exitproc+0x1e>
 800e7de:	4b18      	ldr	r3, [pc, #96]	; (800e840 <__register_exitproc+0x7c>)
 800e7e0:	6013      	str	r3, [r2, #0]
 800e7e2:	685a      	ldr	r2, [r3, #4]
 800e7e4:	6838      	ldr	r0, [r7, #0]
 800e7e6:	2a1f      	cmp	r2, #31
 800e7e8:	dd04      	ble.n	800e7f4 <__register_exitproc+0x30>
 800e7ea:	f7fc f8c0 	bl	800a96e <__retarget_lock_release_recursive>
 800e7ee:	2001      	movs	r0, #1
 800e7f0:	4240      	negs	r0, r0
 800e7f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e7f4:	2c00      	cmp	r4, #0
 800e7f6:	d014      	beq.n	800e822 <__register_exitproc+0x5e>
 800e7f8:	0091      	lsls	r1, r2, #2
 800e7fa:	1859      	adds	r1, r3, r1
 800e7fc:	000f      	movs	r7, r1
 800e7fe:	3788      	adds	r7, #136	; 0x88
 800e800:	603e      	str	r6, [r7, #0]
 800e802:	2701      	movs	r7, #1
 800e804:	001e      	movs	r6, r3
 800e806:	4097      	lsls	r7, r2
 800e808:	3685      	adds	r6, #133	; 0x85
 800e80a:	36ff      	adds	r6, #255	; 0xff
 800e80c:	6875      	ldr	r5, [r6, #4]
 800e80e:	31fc      	adds	r1, #252	; 0xfc
 800e810:	433d      	orrs	r5, r7
 800e812:	6075      	str	r5, [r6, #4]
 800e814:	9d01      	ldr	r5, [sp, #4]
 800e816:	60cd      	str	r5, [r1, #12]
 800e818:	2c02      	cmp	r4, #2
 800e81a:	d102      	bne.n	800e822 <__register_exitproc+0x5e>
 800e81c:	68b1      	ldr	r1, [r6, #8]
 800e81e:	4339      	orrs	r1, r7
 800e820:	60b1      	str	r1, [r6, #8]
 800e822:	1c51      	adds	r1, r2, #1
 800e824:	6059      	str	r1, [r3, #4]
 800e826:	3202      	adds	r2, #2
 800e828:	9900      	ldr	r1, [sp, #0]
 800e82a:	0092      	lsls	r2, r2, #2
 800e82c:	50d1      	str	r1, [r2, r3]
 800e82e:	f7fc f89e 	bl	800a96e <__retarget_lock_release_recursive>
 800e832:	2000      	movs	r0, #0
 800e834:	e7dd      	b.n	800e7f2 <__register_exitproc+0x2e>
 800e836:	46c0      	nop			; (mov r8, r8)
 800e838:	200006e4 	.word	0x200006e4
 800e83c:	20000e0c 	.word	0x20000e0c
 800e840:	20000e10 	.word	0x20000e10

0800e844 <__assert_func>:
 800e844:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e846:	0014      	movs	r4, r2
 800e848:	001a      	movs	r2, r3
 800e84a:	4b09      	ldr	r3, [pc, #36]	; (800e870 <__assert_func+0x2c>)
 800e84c:	0005      	movs	r5, r0
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	000e      	movs	r6, r1
 800e852:	68d8      	ldr	r0, [r3, #12]
 800e854:	4b07      	ldr	r3, [pc, #28]	; (800e874 <__assert_func+0x30>)
 800e856:	2c00      	cmp	r4, #0
 800e858:	d101      	bne.n	800e85e <__assert_func+0x1a>
 800e85a:	4b07      	ldr	r3, [pc, #28]	; (800e878 <__assert_func+0x34>)
 800e85c:	001c      	movs	r4, r3
 800e85e:	4907      	ldr	r1, [pc, #28]	; (800e87c <__assert_func+0x38>)
 800e860:	9301      	str	r3, [sp, #4]
 800e862:	9402      	str	r4, [sp, #8]
 800e864:	002b      	movs	r3, r5
 800e866:	9600      	str	r6, [sp, #0]
 800e868:	f001 faa6 	bl	800fdb8 <fiprintf>
 800e86c:	f002 fb8e 	bl	8010f8c <abort>
 800e870:	200006e0 	.word	0x200006e0
 800e874:	08012ed8 	.word	0x08012ed8
 800e878:	08012f13 	.word	0x08012f13
 800e87c:	08012ee5 	.word	0x08012ee5

0800e880 <_calloc_r>:
 800e880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e882:	2400      	movs	r4, #0
 800e884:	0c0b      	lsrs	r3, r1, #16
 800e886:	0c16      	lsrs	r6, r2, #16
 800e888:	42a3      	cmp	r3, r4
 800e88a:	d133      	bne.n	800e8f4 <_calloc_r+0x74>
 800e88c:	42a6      	cmp	r6, r4
 800e88e:	d121      	bne.n	800e8d4 <_calloc_r+0x54>
 800e890:	b28b      	uxth	r3, r1
 800e892:	b291      	uxth	r1, r2
 800e894:	4359      	muls	r1, r3
 800e896:	f7fa fd11 	bl	80092bc <_malloc_r>
 800e89a:	1e05      	subs	r5, r0, #0
 800e89c:	d033      	beq.n	800e906 <_calloc_r+0x86>
 800e89e:	0003      	movs	r3, r0
 800e8a0:	3b08      	subs	r3, #8
 800e8a2:	685a      	ldr	r2, [r3, #4]
 800e8a4:	2303      	movs	r3, #3
 800e8a6:	439a      	bics	r2, r3
 800e8a8:	3a04      	subs	r2, #4
 800e8aa:	2a24      	cmp	r2, #36	; 0x24
 800e8ac:	d832      	bhi.n	800e914 <_calloc_r+0x94>
 800e8ae:	0003      	movs	r3, r0
 800e8b0:	2a13      	cmp	r2, #19
 800e8b2:	d90a      	bls.n	800e8ca <_calloc_r+0x4a>
 800e8b4:	6004      	str	r4, [r0, #0]
 800e8b6:	6044      	str	r4, [r0, #4]
 800e8b8:	3308      	adds	r3, #8
 800e8ba:	2a1b      	cmp	r2, #27
 800e8bc:	d905      	bls.n	800e8ca <_calloc_r+0x4a>
 800e8be:	6084      	str	r4, [r0, #8]
 800e8c0:	60c4      	str	r4, [r0, #12]
 800e8c2:	2a24      	cmp	r2, #36	; 0x24
 800e8c4:	d021      	beq.n	800e90a <_calloc_r+0x8a>
 800e8c6:	0003      	movs	r3, r0
 800e8c8:	3310      	adds	r3, #16
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	601a      	str	r2, [r3, #0]
 800e8ce:	605a      	str	r2, [r3, #4]
 800e8d0:	609a      	str	r2, [r3, #8]
 800e8d2:	e018      	b.n	800e906 <_calloc_r+0x86>
 800e8d4:	1c33      	adds	r3, r6, #0
 800e8d6:	1c0d      	adds	r5, r1, #0
 800e8d8:	b289      	uxth	r1, r1
 800e8da:	b292      	uxth	r2, r2
 800e8dc:	434a      	muls	r2, r1
 800e8de:	b2ad      	uxth	r5, r5
 800e8e0:	b299      	uxth	r1, r3
 800e8e2:	4369      	muls	r1, r5
 800e8e4:	0c13      	lsrs	r3, r2, #16
 800e8e6:	18c9      	adds	r1, r1, r3
 800e8e8:	0c0b      	lsrs	r3, r1, #16
 800e8ea:	d107      	bne.n	800e8fc <_calloc_r+0x7c>
 800e8ec:	0409      	lsls	r1, r1, #16
 800e8ee:	b292      	uxth	r2, r2
 800e8f0:	4311      	orrs	r1, r2
 800e8f2:	e7d0      	b.n	800e896 <_calloc_r+0x16>
 800e8f4:	2e00      	cmp	r6, #0
 800e8f6:	d101      	bne.n	800e8fc <_calloc_r+0x7c>
 800e8f8:	1c15      	adds	r5, r2, #0
 800e8fa:	e7ed      	b.n	800e8d8 <_calloc_r+0x58>
 800e8fc:	f7fc f80a 	bl	800a914 <__errno>
 800e900:	230c      	movs	r3, #12
 800e902:	2500      	movs	r5, #0
 800e904:	6003      	str	r3, [r0, #0]
 800e906:	0028      	movs	r0, r5
 800e908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e90a:	0003      	movs	r3, r0
 800e90c:	6104      	str	r4, [r0, #16]
 800e90e:	3318      	adds	r3, #24
 800e910:	6144      	str	r4, [r0, #20]
 800e912:	e7da      	b.n	800e8ca <_calloc_r+0x4a>
 800e914:	2100      	movs	r1, #0
 800e916:	f7fb ff51 	bl	800a7bc <memset>
 800e91a:	e7f4      	b.n	800e906 <_calloc_r+0x86>

0800e91c <quorem>:
 800e91c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e91e:	6902      	ldr	r2, [r0, #16]
 800e920:	690b      	ldr	r3, [r1, #16]
 800e922:	b089      	sub	sp, #36	; 0x24
 800e924:	0007      	movs	r7, r0
 800e926:	9104      	str	r1, [sp, #16]
 800e928:	2000      	movs	r0, #0
 800e92a:	429a      	cmp	r2, r3
 800e92c:	db69      	blt.n	800ea02 <quorem+0xe6>
 800e92e:	3b01      	subs	r3, #1
 800e930:	009c      	lsls	r4, r3, #2
 800e932:	9301      	str	r3, [sp, #4]
 800e934:	000b      	movs	r3, r1
 800e936:	3314      	adds	r3, #20
 800e938:	9306      	str	r3, [sp, #24]
 800e93a:	191b      	adds	r3, r3, r4
 800e93c:	9305      	str	r3, [sp, #20]
 800e93e:	003b      	movs	r3, r7
 800e940:	3314      	adds	r3, #20
 800e942:	9303      	str	r3, [sp, #12]
 800e944:	191c      	adds	r4, r3, r4
 800e946:	9b05      	ldr	r3, [sp, #20]
 800e948:	6826      	ldr	r6, [r4, #0]
 800e94a:	681d      	ldr	r5, [r3, #0]
 800e94c:	0030      	movs	r0, r6
 800e94e:	3501      	adds	r5, #1
 800e950:	0029      	movs	r1, r5
 800e952:	f7f1 fbf3 	bl	800013c <__udivsi3>
 800e956:	9002      	str	r0, [sp, #8]
 800e958:	42ae      	cmp	r6, r5
 800e95a:	d329      	bcc.n	800e9b0 <quorem+0x94>
 800e95c:	9b06      	ldr	r3, [sp, #24]
 800e95e:	2600      	movs	r6, #0
 800e960:	469c      	mov	ip, r3
 800e962:	9d03      	ldr	r5, [sp, #12]
 800e964:	9606      	str	r6, [sp, #24]
 800e966:	4662      	mov	r2, ip
 800e968:	ca08      	ldmia	r2!, {r3}
 800e96a:	6828      	ldr	r0, [r5, #0]
 800e96c:	4694      	mov	ip, r2
 800e96e:	9a02      	ldr	r2, [sp, #8]
 800e970:	b299      	uxth	r1, r3
 800e972:	4351      	muls	r1, r2
 800e974:	0c1b      	lsrs	r3, r3, #16
 800e976:	4353      	muls	r3, r2
 800e978:	1989      	adds	r1, r1, r6
 800e97a:	0c0a      	lsrs	r2, r1, #16
 800e97c:	189b      	adds	r3, r3, r2
 800e97e:	9307      	str	r3, [sp, #28]
 800e980:	0c1e      	lsrs	r6, r3, #16
 800e982:	9b06      	ldr	r3, [sp, #24]
 800e984:	b282      	uxth	r2, r0
 800e986:	18d2      	adds	r2, r2, r3
 800e988:	466b      	mov	r3, sp
 800e98a:	b289      	uxth	r1, r1
 800e98c:	8b9b      	ldrh	r3, [r3, #28]
 800e98e:	1a52      	subs	r2, r2, r1
 800e990:	0c01      	lsrs	r1, r0, #16
 800e992:	1ac9      	subs	r1, r1, r3
 800e994:	1413      	asrs	r3, r2, #16
 800e996:	18cb      	adds	r3, r1, r3
 800e998:	1419      	asrs	r1, r3, #16
 800e99a:	b292      	uxth	r2, r2
 800e99c:	041b      	lsls	r3, r3, #16
 800e99e:	4313      	orrs	r3, r2
 800e9a0:	c508      	stmia	r5!, {r3}
 800e9a2:	9b05      	ldr	r3, [sp, #20]
 800e9a4:	9106      	str	r1, [sp, #24]
 800e9a6:	4563      	cmp	r3, ip
 800e9a8:	d2dd      	bcs.n	800e966 <quorem+0x4a>
 800e9aa:	6823      	ldr	r3, [r4, #0]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d030      	beq.n	800ea12 <quorem+0xf6>
 800e9b0:	0038      	movs	r0, r7
 800e9b2:	9904      	ldr	r1, [sp, #16]
 800e9b4:	f7fc ff04 	bl	800b7c0 <__mcmp>
 800e9b8:	2800      	cmp	r0, #0
 800e9ba:	db21      	blt.n	800ea00 <quorem+0xe4>
 800e9bc:	0038      	movs	r0, r7
 800e9be:	2600      	movs	r6, #0
 800e9c0:	9b02      	ldr	r3, [sp, #8]
 800e9c2:	9c04      	ldr	r4, [sp, #16]
 800e9c4:	3301      	adds	r3, #1
 800e9c6:	9302      	str	r3, [sp, #8]
 800e9c8:	3014      	adds	r0, #20
 800e9ca:	3414      	adds	r4, #20
 800e9cc:	6803      	ldr	r3, [r0, #0]
 800e9ce:	cc02      	ldmia	r4!, {r1}
 800e9d0:	b29d      	uxth	r5, r3
 800e9d2:	19ad      	adds	r5, r5, r6
 800e9d4:	b28a      	uxth	r2, r1
 800e9d6:	1aaa      	subs	r2, r5, r2
 800e9d8:	0c09      	lsrs	r1, r1, #16
 800e9da:	0c1b      	lsrs	r3, r3, #16
 800e9dc:	1a5b      	subs	r3, r3, r1
 800e9de:	1411      	asrs	r1, r2, #16
 800e9e0:	185b      	adds	r3, r3, r1
 800e9e2:	141e      	asrs	r6, r3, #16
 800e9e4:	b292      	uxth	r2, r2
 800e9e6:	041b      	lsls	r3, r3, #16
 800e9e8:	4313      	orrs	r3, r2
 800e9ea:	c008      	stmia	r0!, {r3}
 800e9ec:	9b05      	ldr	r3, [sp, #20]
 800e9ee:	42a3      	cmp	r3, r4
 800e9f0:	d2ec      	bcs.n	800e9cc <quorem+0xb0>
 800e9f2:	9b01      	ldr	r3, [sp, #4]
 800e9f4:	9a03      	ldr	r2, [sp, #12]
 800e9f6:	009b      	lsls	r3, r3, #2
 800e9f8:	18d3      	adds	r3, r2, r3
 800e9fa:	681a      	ldr	r2, [r3, #0]
 800e9fc:	2a00      	cmp	r2, #0
 800e9fe:	d015      	beq.n	800ea2c <quorem+0x110>
 800ea00:	9802      	ldr	r0, [sp, #8]
 800ea02:	b009      	add	sp, #36	; 0x24
 800ea04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea06:	6823      	ldr	r3, [r4, #0]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d106      	bne.n	800ea1a <quorem+0xfe>
 800ea0c:	9b01      	ldr	r3, [sp, #4]
 800ea0e:	3b01      	subs	r3, #1
 800ea10:	9301      	str	r3, [sp, #4]
 800ea12:	9b03      	ldr	r3, [sp, #12]
 800ea14:	3c04      	subs	r4, #4
 800ea16:	42a3      	cmp	r3, r4
 800ea18:	d3f5      	bcc.n	800ea06 <quorem+0xea>
 800ea1a:	9b01      	ldr	r3, [sp, #4]
 800ea1c:	613b      	str	r3, [r7, #16]
 800ea1e:	e7c7      	b.n	800e9b0 <quorem+0x94>
 800ea20:	681a      	ldr	r2, [r3, #0]
 800ea22:	2a00      	cmp	r2, #0
 800ea24:	d106      	bne.n	800ea34 <quorem+0x118>
 800ea26:	9a01      	ldr	r2, [sp, #4]
 800ea28:	3a01      	subs	r2, #1
 800ea2a:	9201      	str	r2, [sp, #4]
 800ea2c:	9a03      	ldr	r2, [sp, #12]
 800ea2e:	3b04      	subs	r3, #4
 800ea30:	429a      	cmp	r2, r3
 800ea32:	d3f5      	bcc.n	800ea20 <quorem+0x104>
 800ea34:	9b01      	ldr	r3, [sp, #4]
 800ea36:	613b      	str	r3, [r7, #16]
 800ea38:	e7e2      	b.n	800ea00 <quorem+0xe4>
	...

0800ea3c <_dtoa_r>:
 800ea3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea3e:	0014      	movs	r4, r2
 800ea40:	001d      	movs	r5, r3
 800ea42:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800ea44:	b09d      	sub	sp, #116	; 0x74
 800ea46:	9408      	str	r4, [sp, #32]
 800ea48:	9509      	str	r5, [sp, #36]	; 0x24
 800ea4a:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800ea4c:	9004      	str	r0, [sp, #16]
 800ea4e:	2900      	cmp	r1, #0
 800ea50:	d009      	beq.n	800ea66 <_dtoa_r+0x2a>
 800ea52:	2301      	movs	r3, #1
 800ea54:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ea56:	4093      	lsls	r3, r2
 800ea58:	604a      	str	r2, [r1, #4]
 800ea5a:	608b      	str	r3, [r1, #8]
 800ea5c:	f7fc fc56 	bl	800b30c <_Bfree>
 800ea60:	2300      	movs	r3, #0
 800ea62:	9a04      	ldr	r2, [sp, #16]
 800ea64:	6393      	str	r3, [r2, #56]	; 0x38
 800ea66:	2d00      	cmp	r5, #0
 800ea68:	da1e      	bge.n	800eaa8 <_dtoa_r+0x6c>
 800ea6a:	2301      	movs	r3, #1
 800ea6c:	6033      	str	r3, [r6, #0]
 800ea6e:	006b      	lsls	r3, r5, #1
 800ea70:	085b      	lsrs	r3, r3, #1
 800ea72:	9309      	str	r3, [sp, #36]	; 0x24
 800ea74:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ea76:	4bb5      	ldr	r3, [pc, #724]	; (800ed4c <_dtoa_r+0x310>)
 800ea78:	4ab4      	ldr	r2, [pc, #720]	; (800ed4c <_dtoa_r+0x310>)
 800ea7a:	403b      	ands	r3, r7
 800ea7c:	4293      	cmp	r3, r2
 800ea7e:	d116      	bne.n	800eaae <_dtoa_r+0x72>
 800ea80:	4bb3      	ldr	r3, [pc, #716]	; (800ed50 <_dtoa_r+0x314>)
 800ea82:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ea84:	6013      	str	r3, [r2, #0]
 800ea86:	033b      	lsls	r3, r7, #12
 800ea88:	0b1b      	lsrs	r3, r3, #12
 800ea8a:	4323      	orrs	r3, r4
 800ea8c:	d101      	bne.n	800ea92 <_dtoa_r+0x56>
 800ea8e:	f000 fdb2 	bl	800f5f6 <_dtoa_r+0xbba>
 800ea92:	4bb0      	ldr	r3, [pc, #704]	; (800ed54 <_dtoa_r+0x318>)
 800ea94:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ea96:	9306      	str	r3, [sp, #24]
 800ea98:	2a00      	cmp	r2, #0
 800ea9a:	d002      	beq.n	800eaa2 <_dtoa_r+0x66>
 800ea9c:	4bae      	ldr	r3, [pc, #696]	; (800ed58 <_dtoa_r+0x31c>)
 800ea9e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800eaa0:	6013      	str	r3, [r2, #0]
 800eaa2:	9806      	ldr	r0, [sp, #24]
 800eaa4:	b01d      	add	sp, #116	; 0x74
 800eaa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	6033      	str	r3, [r6, #0]
 800eaac:	e7e2      	b.n	800ea74 <_dtoa_r+0x38>
 800eaae:	9a08      	ldr	r2, [sp, #32]
 800eab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eab2:	9210      	str	r2, [sp, #64]	; 0x40
 800eab4:	9311      	str	r3, [sp, #68]	; 0x44
 800eab6:	9810      	ldr	r0, [sp, #64]	; 0x40
 800eab8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800eaba:	2200      	movs	r2, #0
 800eabc:	2300      	movs	r3, #0
 800eabe:	f7f1 fcc3 	bl	8000448 <__aeabi_dcmpeq>
 800eac2:	1e06      	subs	r6, r0, #0
 800eac4:	d009      	beq.n	800eada <_dtoa_r+0x9e>
 800eac6:	2301      	movs	r3, #1
 800eac8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800eaca:	6013      	str	r3, [r2, #0]
 800eacc:	4ba3      	ldr	r3, [pc, #652]	; (800ed5c <_dtoa_r+0x320>)
 800eace:	9306      	str	r3, [sp, #24]
 800ead0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d0e5      	beq.n	800eaa2 <_dtoa_r+0x66>
 800ead6:	4ba2      	ldr	r3, [pc, #648]	; (800ed60 <_dtoa_r+0x324>)
 800ead8:	e7e1      	b.n	800ea9e <_dtoa_r+0x62>
 800eada:	ab1a      	add	r3, sp, #104	; 0x68
 800eadc:	9301      	str	r3, [sp, #4]
 800eade:	ab1b      	add	r3, sp, #108	; 0x6c
 800eae0:	9300      	str	r3, [sp, #0]
 800eae2:	9804      	ldr	r0, [sp, #16]
 800eae4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800eae6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eae8:	f7fc ff86 	bl	800b9f8 <__d2b>
 800eaec:	007a      	lsls	r2, r7, #1
 800eaee:	9005      	str	r0, [sp, #20]
 800eaf0:	0d52      	lsrs	r2, r2, #21
 800eaf2:	d100      	bne.n	800eaf6 <_dtoa_r+0xba>
 800eaf4:	e07b      	b.n	800ebee <_dtoa_r+0x1b2>
 800eaf6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eaf8:	9617      	str	r6, [sp, #92]	; 0x5c
 800eafa:	0319      	lsls	r1, r3, #12
 800eafc:	4b99      	ldr	r3, [pc, #612]	; (800ed64 <_dtoa_r+0x328>)
 800eafe:	0b09      	lsrs	r1, r1, #12
 800eb00:	430b      	orrs	r3, r1
 800eb02:	4999      	ldr	r1, [pc, #612]	; (800ed68 <_dtoa_r+0x32c>)
 800eb04:	1857      	adds	r7, r2, r1
 800eb06:	9810      	ldr	r0, [sp, #64]	; 0x40
 800eb08:	9911      	ldr	r1, [sp, #68]	; 0x44
 800eb0a:	0019      	movs	r1, r3
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	4b97      	ldr	r3, [pc, #604]	; (800ed6c <_dtoa_r+0x330>)
 800eb10:	f7f3 f86e 	bl	8001bf0 <__aeabi_dsub>
 800eb14:	4a96      	ldr	r2, [pc, #600]	; (800ed70 <_dtoa_r+0x334>)
 800eb16:	4b97      	ldr	r3, [pc, #604]	; (800ed74 <_dtoa_r+0x338>)
 800eb18:	f7f2 fda8 	bl	800166c <__aeabi_dmul>
 800eb1c:	4a96      	ldr	r2, [pc, #600]	; (800ed78 <_dtoa_r+0x33c>)
 800eb1e:	4b97      	ldr	r3, [pc, #604]	; (800ed7c <_dtoa_r+0x340>)
 800eb20:	f7f1 fe4a 	bl	80007b8 <__aeabi_dadd>
 800eb24:	0004      	movs	r4, r0
 800eb26:	0038      	movs	r0, r7
 800eb28:	000d      	movs	r5, r1
 800eb2a:	f7f3 fc37 	bl	800239c <__aeabi_i2d>
 800eb2e:	4a94      	ldr	r2, [pc, #592]	; (800ed80 <_dtoa_r+0x344>)
 800eb30:	4b94      	ldr	r3, [pc, #592]	; (800ed84 <_dtoa_r+0x348>)
 800eb32:	f7f2 fd9b 	bl	800166c <__aeabi_dmul>
 800eb36:	0002      	movs	r2, r0
 800eb38:	000b      	movs	r3, r1
 800eb3a:	0020      	movs	r0, r4
 800eb3c:	0029      	movs	r1, r5
 800eb3e:	f7f1 fe3b 	bl	80007b8 <__aeabi_dadd>
 800eb42:	0004      	movs	r4, r0
 800eb44:	000d      	movs	r5, r1
 800eb46:	f7f3 fbf3 	bl	8002330 <__aeabi_d2iz>
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	9003      	str	r0, [sp, #12]
 800eb4e:	2300      	movs	r3, #0
 800eb50:	0020      	movs	r0, r4
 800eb52:	0029      	movs	r1, r5
 800eb54:	f7f1 fc7e 	bl	8000454 <__aeabi_dcmplt>
 800eb58:	2800      	cmp	r0, #0
 800eb5a:	d00b      	beq.n	800eb74 <_dtoa_r+0x138>
 800eb5c:	9803      	ldr	r0, [sp, #12]
 800eb5e:	f7f3 fc1d 	bl	800239c <__aeabi_i2d>
 800eb62:	002b      	movs	r3, r5
 800eb64:	0022      	movs	r2, r4
 800eb66:	f7f1 fc6f 	bl	8000448 <__aeabi_dcmpeq>
 800eb6a:	4243      	negs	r3, r0
 800eb6c:	4158      	adcs	r0, r3
 800eb6e:	9b03      	ldr	r3, [sp, #12]
 800eb70:	1a1b      	subs	r3, r3, r0
 800eb72:	9303      	str	r3, [sp, #12]
 800eb74:	2301      	movs	r3, #1
 800eb76:	9316      	str	r3, [sp, #88]	; 0x58
 800eb78:	9b03      	ldr	r3, [sp, #12]
 800eb7a:	2b16      	cmp	r3, #22
 800eb7c:	d810      	bhi.n	800eba0 <_dtoa_r+0x164>
 800eb7e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800eb80:	9911      	ldr	r1, [sp, #68]	; 0x44
 800eb82:	9a03      	ldr	r2, [sp, #12]
 800eb84:	4b80      	ldr	r3, [pc, #512]	; (800ed88 <_dtoa_r+0x34c>)
 800eb86:	00d2      	lsls	r2, r2, #3
 800eb88:	189b      	adds	r3, r3, r2
 800eb8a:	681a      	ldr	r2, [r3, #0]
 800eb8c:	685b      	ldr	r3, [r3, #4]
 800eb8e:	f7f1 fc61 	bl	8000454 <__aeabi_dcmplt>
 800eb92:	2800      	cmp	r0, #0
 800eb94:	d047      	beq.n	800ec26 <_dtoa_r+0x1ea>
 800eb96:	9b03      	ldr	r3, [sp, #12]
 800eb98:	3b01      	subs	r3, #1
 800eb9a:	9303      	str	r3, [sp, #12]
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	9316      	str	r3, [sp, #88]	; 0x58
 800eba0:	2200      	movs	r2, #0
 800eba2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800eba4:	920a      	str	r2, [sp, #40]	; 0x28
 800eba6:	1bdb      	subs	r3, r3, r7
 800eba8:	1e5a      	subs	r2, r3, #1
 800ebaa:	d53e      	bpl.n	800ec2a <_dtoa_r+0x1ee>
 800ebac:	2201      	movs	r2, #1
 800ebae:	1ad3      	subs	r3, r2, r3
 800ebb0:	930a      	str	r3, [sp, #40]	; 0x28
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	930c      	str	r3, [sp, #48]	; 0x30
 800ebb6:	9b03      	ldr	r3, [sp, #12]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	db38      	blt.n	800ec2e <_dtoa_r+0x1f2>
 800ebbc:	9a03      	ldr	r2, [sp, #12]
 800ebbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ebc0:	4694      	mov	ip, r2
 800ebc2:	4463      	add	r3, ip
 800ebc4:	930c      	str	r3, [sp, #48]	; 0x30
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	9213      	str	r2, [sp, #76]	; 0x4c
 800ebca:	930d      	str	r3, [sp, #52]	; 0x34
 800ebcc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ebce:	2401      	movs	r4, #1
 800ebd0:	2b09      	cmp	r3, #9
 800ebd2:	d867      	bhi.n	800eca4 <_dtoa_r+0x268>
 800ebd4:	2b05      	cmp	r3, #5
 800ebd6:	dd02      	ble.n	800ebde <_dtoa_r+0x1a2>
 800ebd8:	2400      	movs	r4, #0
 800ebda:	3b04      	subs	r3, #4
 800ebdc:	9322      	str	r3, [sp, #136]	; 0x88
 800ebde:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ebe0:	1e98      	subs	r0, r3, #2
 800ebe2:	2803      	cmp	r0, #3
 800ebe4:	d867      	bhi.n	800ecb6 <_dtoa_r+0x27a>
 800ebe6:	f7f1 fa95 	bl	8000114 <__gnu_thumb1_case_uqi>
 800ebea:	3a2b      	.short	0x3a2b
 800ebec:	5b38      	.short	0x5b38
 800ebee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ebf0:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800ebf2:	18f6      	adds	r6, r6, r3
 800ebf4:	4b65      	ldr	r3, [pc, #404]	; (800ed8c <_dtoa_r+0x350>)
 800ebf6:	18f2      	adds	r2, r6, r3
 800ebf8:	2a20      	cmp	r2, #32
 800ebfa:	dd0f      	ble.n	800ec1c <_dtoa_r+0x1e0>
 800ebfc:	2340      	movs	r3, #64	; 0x40
 800ebfe:	1a9b      	subs	r3, r3, r2
 800ec00:	409f      	lsls	r7, r3
 800ec02:	4b63      	ldr	r3, [pc, #396]	; (800ed90 <_dtoa_r+0x354>)
 800ec04:	0038      	movs	r0, r7
 800ec06:	18f3      	adds	r3, r6, r3
 800ec08:	40dc      	lsrs	r4, r3
 800ec0a:	4320      	orrs	r0, r4
 800ec0c:	f7f3 fbf6 	bl	80023fc <__aeabi_ui2d>
 800ec10:	2201      	movs	r2, #1
 800ec12:	4b60      	ldr	r3, [pc, #384]	; (800ed94 <_dtoa_r+0x358>)
 800ec14:	1e77      	subs	r7, r6, #1
 800ec16:	18cb      	adds	r3, r1, r3
 800ec18:	9217      	str	r2, [sp, #92]	; 0x5c
 800ec1a:	e776      	b.n	800eb0a <_dtoa_r+0xce>
 800ec1c:	2320      	movs	r3, #32
 800ec1e:	0020      	movs	r0, r4
 800ec20:	1a9b      	subs	r3, r3, r2
 800ec22:	4098      	lsls	r0, r3
 800ec24:	e7f2      	b.n	800ec0c <_dtoa_r+0x1d0>
 800ec26:	9016      	str	r0, [sp, #88]	; 0x58
 800ec28:	e7ba      	b.n	800eba0 <_dtoa_r+0x164>
 800ec2a:	920c      	str	r2, [sp, #48]	; 0x30
 800ec2c:	e7c3      	b.n	800ebb6 <_dtoa_r+0x17a>
 800ec2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec30:	9a03      	ldr	r2, [sp, #12]
 800ec32:	1a9b      	subs	r3, r3, r2
 800ec34:	930a      	str	r3, [sp, #40]	; 0x28
 800ec36:	4253      	negs	r3, r2
 800ec38:	930d      	str	r3, [sp, #52]	; 0x34
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	9313      	str	r3, [sp, #76]	; 0x4c
 800ec3e:	e7c5      	b.n	800ebcc <_dtoa_r+0x190>
 800ec40:	2300      	movs	r3, #0
 800ec42:	930f      	str	r3, [sp, #60]	; 0x3c
 800ec44:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ec46:	930b      	str	r3, [sp, #44]	; 0x2c
 800ec48:	9307      	str	r3, [sp, #28]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	dc13      	bgt.n	800ec76 <_dtoa_r+0x23a>
 800ec4e:	2301      	movs	r3, #1
 800ec50:	001a      	movs	r2, r3
 800ec52:	930b      	str	r3, [sp, #44]	; 0x2c
 800ec54:	9307      	str	r3, [sp, #28]
 800ec56:	9223      	str	r2, [sp, #140]	; 0x8c
 800ec58:	e00d      	b.n	800ec76 <_dtoa_r+0x23a>
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	e7f1      	b.n	800ec42 <_dtoa_r+0x206>
 800ec5e:	2300      	movs	r3, #0
 800ec60:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800ec62:	930f      	str	r3, [sp, #60]	; 0x3c
 800ec64:	4694      	mov	ip, r2
 800ec66:	9b03      	ldr	r3, [sp, #12]
 800ec68:	4463      	add	r3, ip
 800ec6a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ec6c:	3301      	adds	r3, #1
 800ec6e:	9307      	str	r3, [sp, #28]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	dc00      	bgt.n	800ec76 <_dtoa_r+0x23a>
 800ec74:	2301      	movs	r3, #1
 800ec76:	2100      	movs	r1, #0
 800ec78:	2204      	movs	r2, #4
 800ec7a:	0010      	movs	r0, r2
 800ec7c:	3014      	adds	r0, #20
 800ec7e:	4298      	cmp	r0, r3
 800ec80:	d91d      	bls.n	800ecbe <_dtoa_r+0x282>
 800ec82:	9b04      	ldr	r3, [sp, #16]
 800ec84:	0018      	movs	r0, r3
 800ec86:	63d9      	str	r1, [r3, #60]	; 0x3c
 800ec88:	f7fc fb18 	bl	800b2bc <_Balloc>
 800ec8c:	9006      	str	r0, [sp, #24]
 800ec8e:	2800      	cmp	r0, #0
 800ec90:	d118      	bne.n	800ecc4 <_dtoa_r+0x288>
 800ec92:	21b0      	movs	r1, #176	; 0xb0
 800ec94:	4b40      	ldr	r3, [pc, #256]	; (800ed98 <_dtoa_r+0x35c>)
 800ec96:	4841      	ldr	r0, [pc, #260]	; (800ed9c <_dtoa_r+0x360>)
 800ec98:	9a06      	ldr	r2, [sp, #24]
 800ec9a:	31ff      	adds	r1, #255	; 0xff
 800ec9c:	f7ff fdd2 	bl	800e844 <__assert_func>
 800eca0:	2301      	movs	r3, #1
 800eca2:	e7dd      	b.n	800ec60 <_dtoa_r+0x224>
 800eca4:	2300      	movs	r3, #0
 800eca6:	940f      	str	r4, [sp, #60]	; 0x3c
 800eca8:	9322      	str	r3, [sp, #136]	; 0x88
 800ecaa:	3b01      	subs	r3, #1
 800ecac:	930b      	str	r3, [sp, #44]	; 0x2c
 800ecae:	9307      	str	r3, [sp, #28]
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	3313      	adds	r3, #19
 800ecb4:	e7cf      	b.n	800ec56 <_dtoa_r+0x21a>
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	930f      	str	r3, [sp, #60]	; 0x3c
 800ecba:	3b02      	subs	r3, #2
 800ecbc:	e7f6      	b.n	800ecac <_dtoa_r+0x270>
 800ecbe:	3101      	adds	r1, #1
 800ecc0:	0052      	lsls	r2, r2, #1
 800ecc2:	e7da      	b.n	800ec7a <_dtoa_r+0x23e>
 800ecc4:	9b04      	ldr	r3, [sp, #16]
 800ecc6:	9a06      	ldr	r2, [sp, #24]
 800ecc8:	639a      	str	r2, [r3, #56]	; 0x38
 800ecca:	9b07      	ldr	r3, [sp, #28]
 800eccc:	2b0e      	cmp	r3, #14
 800ecce:	d900      	bls.n	800ecd2 <_dtoa_r+0x296>
 800ecd0:	e0e3      	b.n	800ee9a <_dtoa_r+0x45e>
 800ecd2:	2c00      	cmp	r4, #0
 800ecd4:	d100      	bne.n	800ecd8 <_dtoa_r+0x29c>
 800ecd6:	e0e0      	b.n	800ee9a <_dtoa_r+0x45e>
 800ecd8:	9b03      	ldr	r3, [sp, #12]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	dd62      	ble.n	800eda4 <_dtoa_r+0x368>
 800ecde:	210f      	movs	r1, #15
 800ece0:	9a03      	ldr	r2, [sp, #12]
 800ece2:	4b29      	ldr	r3, [pc, #164]	; (800ed88 <_dtoa_r+0x34c>)
 800ece4:	400a      	ands	r2, r1
 800ece6:	00d2      	lsls	r2, r2, #3
 800ece8:	189b      	adds	r3, r3, r2
 800ecea:	681e      	ldr	r6, [r3, #0]
 800ecec:	685f      	ldr	r7, [r3, #4]
 800ecee:	9b03      	ldr	r3, [sp, #12]
 800ecf0:	2402      	movs	r4, #2
 800ecf2:	111d      	asrs	r5, r3, #4
 800ecf4:	05db      	lsls	r3, r3, #23
 800ecf6:	d50a      	bpl.n	800ed0e <_dtoa_r+0x2d2>
 800ecf8:	4b29      	ldr	r3, [pc, #164]	; (800eda0 <_dtoa_r+0x364>)
 800ecfa:	400d      	ands	r5, r1
 800ecfc:	6a1a      	ldr	r2, [r3, #32]
 800ecfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed00:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ed02:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ed04:	f7f2 f8b8 	bl	8000e78 <__aeabi_ddiv>
 800ed08:	9008      	str	r0, [sp, #32]
 800ed0a:	9109      	str	r1, [sp, #36]	; 0x24
 800ed0c:	3401      	adds	r4, #1
 800ed0e:	4b24      	ldr	r3, [pc, #144]	; (800eda0 <_dtoa_r+0x364>)
 800ed10:	930e      	str	r3, [sp, #56]	; 0x38
 800ed12:	2d00      	cmp	r5, #0
 800ed14:	d108      	bne.n	800ed28 <_dtoa_r+0x2ec>
 800ed16:	9808      	ldr	r0, [sp, #32]
 800ed18:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ed1a:	0032      	movs	r2, r6
 800ed1c:	003b      	movs	r3, r7
 800ed1e:	f7f2 f8ab 	bl	8000e78 <__aeabi_ddiv>
 800ed22:	9008      	str	r0, [sp, #32]
 800ed24:	9109      	str	r1, [sp, #36]	; 0x24
 800ed26:	e058      	b.n	800edda <_dtoa_r+0x39e>
 800ed28:	2301      	movs	r3, #1
 800ed2a:	421d      	tst	r5, r3
 800ed2c:	d009      	beq.n	800ed42 <_dtoa_r+0x306>
 800ed2e:	18e4      	adds	r4, r4, r3
 800ed30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed32:	0030      	movs	r0, r6
 800ed34:	681a      	ldr	r2, [r3, #0]
 800ed36:	685b      	ldr	r3, [r3, #4]
 800ed38:	0039      	movs	r1, r7
 800ed3a:	f7f2 fc97 	bl	800166c <__aeabi_dmul>
 800ed3e:	0006      	movs	r6, r0
 800ed40:	000f      	movs	r7, r1
 800ed42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed44:	106d      	asrs	r5, r5, #1
 800ed46:	3308      	adds	r3, #8
 800ed48:	e7e2      	b.n	800ed10 <_dtoa_r+0x2d4>
 800ed4a:	46c0      	nop			; (mov r8, r8)
 800ed4c:	7ff00000 	.word	0x7ff00000
 800ed50:	0000270f 	.word	0x0000270f
 800ed54:	08012f1d 	.word	0x08012f1d
 800ed58:	08012f20 	.word	0x08012f20
 800ed5c:	08012e8e 	.word	0x08012e8e
 800ed60:	08012e8f 	.word	0x08012e8f
 800ed64:	3ff00000 	.word	0x3ff00000
 800ed68:	fffffc01 	.word	0xfffffc01
 800ed6c:	3ff80000 	.word	0x3ff80000
 800ed70:	636f4361 	.word	0x636f4361
 800ed74:	3fd287a7 	.word	0x3fd287a7
 800ed78:	8b60c8b3 	.word	0x8b60c8b3
 800ed7c:	3fc68a28 	.word	0x3fc68a28
 800ed80:	509f79fb 	.word	0x509f79fb
 800ed84:	3fd34413 	.word	0x3fd34413
 800ed88:	08012d88 	.word	0x08012d88
 800ed8c:	00000432 	.word	0x00000432
 800ed90:	00000412 	.word	0x00000412
 800ed94:	fe100000 	.word	0xfe100000
 800ed98:	08012c91 	.word	0x08012c91
 800ed9c:	08012f21 	.word	0x08012f21
 800eda0:	08012d60 	.word	0x08012d60
 800eda4:	9b03      	ldr	r3, [sp, #12]
 800eda6:	2402      	movs	r4, #2
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d016      	beq.n	800edda <_dtoa_r+0x39e>
 800edac:	9810      	ldr	r0, [sp, #64]	; 0x40
 800edae:	9911      	ldr	r1, [sp, #68]	; 0x44
 800edb0:	220f      	movs	r2, #15
 800edb2:	425d      	negs	r5, r3
 800edb4:	402a      	ands	r2, r5
 800edb6:	4bdd      	ldr	r3, [pc, #884]	; (800f12c <_dtoa_r+0x6f0>)
 800edb8:	00d2      	lsls	r2, r2, #3
 800edba:	189b      	adds	r3, r3, r2
 800edbc:	681a      	ldr	r2, [r3, #0]
 800edbe:	685b      	ldr	r3, [r3, #4]
 800edc0:	f7f2 fc54 	bl	800166c <__aeabi_dmul>
 800edc4:	2701      	movs	r7, #1
 800edc6:	2300      	movs	r3, #0
 800edc8:	9008      	str	r0, [sp, #32]
 800edca:	9109      	str	r1, [sp, #36]	; 0x24
 800edcc:	4ed8      	ldr	r6, [pc, #864]	; (800f130 <_dtoa_r+0x6f4>)
 800edce:	112d      	asrs	r5, r5, #4
 800edd0:	2d00      	cmp	r5, #0
 800edd2:	d000      	beq.n	800edd6 <_dtoa_r+0x39a>
 800edd4:	e091      	b.n	800eefa <_dtoa_r+0x4be>
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d1a3      	bne.n	800ed22 <_dtoa_r+0x2e6>
 800edda:	9e08      	ldr	r6, [sp, #32]
 800eddc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800edde:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d100      	bne.n	800ede6 <_dtoa_r+0x3aa>
 800ede4:	e094      	b.n	800ef10 <_dtoa_r+0x4d4>
 800ede6:	2200      	movs	r2, #0
 800ede8:	0030      	movs	r0, r6
 800edea:	0039      	movs	r1, r7
 800edec:	4bd1      	ldr	r3, [pc, #836]	; (800f134 <_dtoa_r+0x6f8>)
 800edee:	f7f1 fb31 	bl	8000454 <__aeabi_dcmplt>
 800edf2:	2800      	cmp	r0, #0
 800edf4:	d100      	bne.n	800edf8 <_dtoa_r+0x3bc>
 800edf6:	e08b      	b.n	800ef10 <_dtoa_r+0x4d4>
 800edf8:	9b07      	ldr	r3, [sp, #28]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d100      	bne.n	800ee00 <_dtoa_r+0x3c4>
 800edfe:	e087      	b.n	800ef10 <_dtoa_r+0x4d4>
 800ee00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	dd45      	ble.n	800ee92 <_dtoa_r+0x456>
 800ee06:	9b03      	ldr	r3, [sp, #12]
 800ee08:	2200      	movs	r2, #0
 800ee0a:	3b01      	subs	r3, #1
 800ee0c:	930e      	str	r3, [sp, #56]	; 0x38
 800ee0e:	0030      	movs	r0, r6
 800ee10:	4bc9      	ldr	r3, [pc, #804]	; (800f138 <_dtoa_r+0x6fc>)
 800ee12:	0039      	movs	r1, r7
 800ee14:	f7f2 fc2a 	bl	800166c <__aeabi_dmul>
 800ee18:	9008      	str	r0, [sp, #32]
 800ee1a:	9109      	str	r1, [sp, #36]	; 0x24
 800ee1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee1e:	3401      	adds	r4, #1
 800ee20:	0020      	movs	r0, r4
 800ee22:	9e08      	ldr	r6, [sp, #32]
 800ee24:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ee26:	9312      	str	r3, [sp, #72]	; 0x48
 800ee28:	f7f3 fab8 	bl	800239c <__aeabi_i2d>
 800ee2c:	0032      	movs	r2, r6
 800ee2e:	003b      	movs	r3, r7
 800ee30:	f7f2 fc1c 	bl	800166c <__aeabi_dmul>
 800ee34:	2200      	movs	r2, #0
 800ee36:	4bc1      	ldr	r3, [pc, #772]	; (800f13c <_dtoa_r+0x700>)
 800ee38:	f7f1 fcbe 	bl	80007b8 <__aeabi_dadd>
 800ee3c:	4ac0      	ldr	r2, [pc, #768]	; (800f140 <_dtoa_r+0x704>)
 800ee3e:	9014      	str	r0, [sp, #80]	; 0x50
 800ee40:	9115      	str	r1, [sp, #84]	; 0x54
 800ee42:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ee44:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800ee46:	4694      	mov	ip, r2
 800ee48:	9308      	str	r3, [sp, #32]
 800ee4a:	9409      	str	r4, [sp, #36]	; 0x24
 800ee4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ee4e:	4463      	add	r3, ip
 800ee50:	9318      	str	r3, [sp, #96]	; 0x60
 800ee52:	9309      	str	r3, [sp, #36]	; 0x24
 800ee54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d15e      	bne.n	800ef18 <_dtoa_r+0x4dc>
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	4bb9      	ldr	r3, [pc, #740]	; (800f144 <_dtoa_r+0x708>)
 800ee5e:	0030      	movs	r0, r6
 800ee60:	0039      	movs	r1, r7
 800ee62:	f7f2 fec5 	bl	8001bf0 <__aeabi_dsub>
 800ee66:	9a08      	ldr	r2, [sp, #32]
 800ee68:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ee6a:	0004      	movs	r4, r0
 800ee6c:	000d      	movs	r5, r1
 800ee6e:	f7f1 fb05 	bl	800047c <__aeabi_dcmpgt>
 800ee72:	2800      	cmp	r0, #0
 800ee74:	d000      	beq.n	800ee78 <_dtoa_r+0x43c>
 800ee76:	e2b3      	b.n	800f3e0 <_dtoa_r+0x9a4>
 800ee78:	48b3      	ldr	r0, [pc, #716]	; (800f148 <_dtoa_r+0x70c>)
 800ee7a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ee7c:	4684      	mov	ip, r0
 800ee7e:	4461      	add	r1, ip
 800ee80:	000b      	movs	r3, r1
 800ee82:	0020      	movs	r0, r4
 800ee84:	0029      	movs	r1, r5
 800ee86:	9a08      	ldr	r2, [sp, #32]
 800ee88:	f7f1 fae4 	bl	8000454 <__aeabi_dcmplt>
 800ee8c:	2800      	cmp	r0, #0
 800ee8e:	d000      	beq.n	800ee92 <_dtoa_r+0x456>
 800ee90:	e2a3      	b.n	800f3da <_dtoa_r+0x99e>
 800ee92:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ee94:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800ee96:	9308      	str	r3, [sp, #32]
 800ee98:	9409      	str	r4, [sp, #36]	; 0x24
 800ee9a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	da00      	bge.n	800eea2 <_dtoa_r+0x466>
 800eea0:	e179      	b.n	800f196 <_dtoa_r+0x75a>
 800eea2:	9a03      	ldr	r2, [sp, #12]
 800eea4:	2a0e      	cmp	r2, #14
 800eea6:	dd00      	ble.n	800eeaa <_dtoa_r+0x46e>
 800eea8:	e175      	b.n	800f196 <_dtoa_r+0x75a>
 800eeaa:	4ba0      	ldr	r3, [pc, #640]	; (800f12c <_dtoa_r+0x6f0>)
 800eeac:	00d2      	lsls	r2, r2, #3
 800eeae:	189b      	adds	r3, r3, r2
 800eeb0:	681e      	ldr	r6, [r3, #0]
 800eeb2:	685f      	ldr	r7, [r3, #4]
 800eeb4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	db00      	blt.n	800eebc <_dtoa_r+0x480>
 800eeba:	e0e5      	b.n	800f088 <_dtoa_r+0x64c>
 800eebc:	9b07      	ldr	r3, [sp, #28]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	dd00      	ble.n	800eec4 <_dtoa_r+0x488>
 800eec2:	e0e1      	b.n	800f088 <_dtoa_r+0x64c>
 800eec4:	d000      	beq.n	800eec8 <_dtoa_r+0x48c>
 800eec6:	e288      	b.n	800f3da <_dtoa_r+0x99e>
 800eec8:	2200      	movs	r2, #0
 800eeca:	0030      	movs	r0, r6
 800eecc:	0039      	movs	r1, r7
 800eece:	4b9d      	ldr	r3, [pc, #628]	; (800f144 <_dtoa_r+0x708>)
 800eed0:	f7f2 fbcc 	bl	800166c <__aeabi_dmul>
 800eed4:	9a08      	ldr	r2, [sp, #32]
 800eed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eed8:	f7f1 fada 	bl	8000490 <__aeabi_dcmpge>
 800eedc:	9e07      	ldr	r6, [sp, #28]
 800eede:	0037      	movs	r7, r6
 800eee0:	2800      	cmp	r0, #0
 800eee2:	d000      	beq.n	800eee6 <_dtoa_r+0x4aa>
 800eee4:	e25f      	b.n	800f3a6 <_dtoa_r+0x96a>
 800eee6:	9b06      	ldr	r3, [sp, #24]
 800eee8:	9a06      	ldr	r2, [sp, #24]
 800eeea:	3301      	adds	r3, #1
 800eeec:	9308      	str	r3, [sp, #32]
 800eeee:	2331      	movs	r3, #49	; 0x31
 800eef0:	7013      	strb	r3, [r2, #0]
 800eef2:	9b03      	ldr	r3, [sp, #12]
 800eef4:	3301      	adds	r3, #1
 800eef6:	9303      	str	r3, [sp, #12]
 800eef8:	e25a      	b.n	800f3b0 <_dtoa_r+0x974>
 800eefa:	423d      	tst	r5, r7
 800eefc:	d005      	beq.n	800ef0a <_dtoa_r+0x4ce>
 800eefe:	6832      	ldr	r2, [r6, #0]
 800ef00:	6873      	ldr	r3, [r6, #4]
 800ef02:	f7f2 fbb3 	bl	800166c <__aeabi_dmul>
 800ef06:	003b      	movs	r3, r7
 800ef08:	3401      	adds	r4, #1
 800ef0a:	106d      	asrs	r5, r5, #1
 800ef0c:	3608      	adds	r6, #8
 800ef0e:	e75f      	b.n	800edd0 <_dtoa_r+0x394>
 800ef10:	9b03      	ldr	r3, [sp, #12]
 800ef12:	930e      	str	r3, [sp, #56]	; 0x38
 800ef14:	9b07      	ldr	r3, [sp, #28]
 800ef16:	e783      	b.n	800ee20 <_dtoa_r+0x3e4>
 800ef18:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ef1a:	4b84      	ldr	r3, [pc, #528]	; (800f12c <_dtoa_r+0x6f0>)
 800ef1c:	3a01      	subs	r2, #1
 800ef1e:	00d2      	lsls	r2, r2, #3
 800ef20:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ef22:	189b      	adds	r3, r3, r2
 800ef24:	9c08      	ldr	r4, [sp, #32]
 800ef26:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ef28:	681a      	ldr	r2, [r3, #0]
 800ef2a:	685b      	ldr	r3, [r3, #4]
 800ef2c:	2900      	cmp	r1, #0
 800ef2e:	d051      	beq.n	800efd4 <_dtoa_r+0x598>
 800ef30:	2000      	movs	r0, #0
 800ef32:	4986      	ldr	r1, [pc, #536]	; (800f14c <_dtoa_r+0x710>)
 800ef34:	f7f1 ffa0 	bl	8000e78 <__aeabi_ddiv>
 800ef38:	0022      	movs	r2, r4
 800ef3a:	002b      	movs	r3, r5
 800ef3c:	f7f2 fe58 	bl	8001bf0 <__aeabi_dsub>
 800ef40:	9a06      	ldr	r2, [sp, #24]
 800ef42:	0004      	movs	r4, r0
 800ef44:	4694      	mov	ip, r2
 800ef46:	000d      	movs	r5, r1
 800ef48:	9b06      	ldr	r3, [sp, #24]
 800ef4a:	9314      	str	r3, [sp, #80]	; 0x50
 800ef4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ef4e:	4463      	add	r3, ip
 800ef50:	9318      	str	r3, [sp, #96]	; 0x60
 800ef52:	0039      	movs	r1, r7
 800ef54:	0030      	movs	r0, r6
 800ef56:	f7f3 f9eb 	bl	8002330 <__aeabi_d2iz>
 800ef5a:	9012      	str	r0, [sp, #72]	; 0x48
 800ef5c:	f7f3 fa1e 	bl	800239c <__aeabi_i2d>
 800ef60:	0002      	movs	r2, r0
 800ef62:	000b      	movs	r3, r1
 800ef64:	0030      	movs	r0, r6
 800ef66:	0039      	movs	r1, r7
 800ef68:	f7f2 fe42 	bl	8001bf0 <__aeabi_dsub>
 800ef6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ef6e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ef70:	3301      	adds	r3, #1
 800ef72:	9308      	str	r3, [sp, #32]
 800ef74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ef76:	0006      	movs	r6, r0
 800ef78:	3330      	adds	r3, #48	; 0x30
 800ef7a:	7013      	strb	r3, [r2, #0]
 800ef7c:	0022      	movs	r2, r4
 800ef7e:	002b      	movs	r3, r5
 800ef80:	000f      	movs	r7, r1
 800ef82:	f7f1 fa67 	bl	8000454 <__aeabi_dcmplt>
 800ef86:	2800      	cmp	r0, #0
 800ef88:	d174      	bne.n	800f074 <_dtoa_r+0x638>
 800ef8a:	0032      	movs	r2, r6
 800ef8c:	003b      	movs	r3, r7
 800ef8e:	2000      	movs	r0, #0
 800ef90:	4968      	ldr	r1, [pc, #416]	; (800f134 <_dtoa_r+0x6f8>)
 800ef92:	f7f2 fe2d 	bl	8001bf0 <__aeabi_dsub>
 800ef96:	0022      	movs	r2, r4
 800ef98:	002b      	movs	r3, r5
 800ef9a:	f7f1 fa5b 	bl	8000454 <__aeabi_dcmplt>
 800ef9e:	2800      	cmp	r0, #0
 800efa0:	d000      	beq.n	800efa4 <_dtoa_r+0x568>
 800efa2:	e0d7      	b.n	800f154 <_dtoa_r+0x718>
 800efa4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800efa6:	9a08      	ldr	r2, [sp, #32]
 800efa8:	4293      	cmp	r3, r2
 800efaa:	d100      	bne.n	800efae <_dtoa_r+0x572>
 800efac:	e771      	b.n	800ee92 <_dtoa_r+0x456>
 800efae:	2200      	movs	r2, #0
 800efb0:	0020      	movs	r0, r4
 800efb2:	0029      	movs	r1, r5
 800efb4:	4b60      	ldr	r3, [pc, #384]	; (800f138 <_dtoa_r+0x6fc>)
 800efb6:	f7f2 fb59 	bl	800166c <__aeabi_dmul>
 800efba:	4b5f      	ldr	r3, [pc, #380]	; (800f138 <_dtoa_r+0x6fc>)
 800efbc:	0004      	movs	r4, r0
 800efbe:	000d      	movs	r5, r1
 800efc0:	0030      	movs	r0, r6
 800efc2:	0039      	movs	r1, r7
 800efc4:	2200      	movs	r2, #0
 800efc6:	f7f2 fb51 	bl	800166c <__aeabi_dmul>
 800efca:	9b08      	ldr	r3, [sp, #32]
 800efcc:	0006      	movs	r6, r0
 800efce:	000f      	movs	r7, r1
 800efd0:	9314      	str	r3, [sp, #80]	; 0x50
 800efd2:	e7be      	b.n	800ef52 <_dtoa_r+0x516>
 800efd4:	0020      	movs	r0, r4
 800efd6:	0029      	movs	r1, r5
 800efd8:	f7f2 fb48 	bl	800166c <__aeabi_dmul>
 800efdc:	9a06      	ldr	r2, [sp, #24]
 800efde:	9b06      	ldr	r3, [sp, #24]
 800efe0:	4694      	mov	ip, r2
 800efe2:	9308      	str	r3, [sp, #32]
 800efe4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800efe6:	9014      	str	r0, [sp, #80]	; 0x50
 800efe8:	9115      	str	r1, [sp, #84]	; 0x54
 800efea:	4463      	add	r3, ip
 800efec:	9319      	str	r3, [sp, #100]	; 0x64
 800efee:	0030      	movs	r0, r6
 800eff0:	0039      	movs	r1, r7
 800eff2:	f7f3 f99d 	bl	8002330 <__aeabi_d2iz>
 800eff6:	9018      	str	r0, [sp, #96]	; 0x60
 800eff8:	f7f3 f9d0 	bl	800239c <__aeabi_i2d>
 800effc:	0002      	movs	r2, r0
 800effe:	000b      	movs	r3, r1
 800f000:	0030      	movs	r0, r6
 800f002:	0039      	movs	r1, r7
 800f004:	f7f2 fdf4 	bl	8001bf0 <__aeabi_dsub>
 800f008:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800f00a:	9b08      	ldr	r3, [sp, #32]
 800f00c:	3630      	adds	r6, #48	; 0x30
 800f00e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f010:	701e      	strb	r6, [r3, #0]
 800f012:	3301      	adds	r3, #1
 800f014:	0004      	movs	r4, r0
 800f016:	000d      	movs	r5, r1
 800f018:	9308      	str	r3, [sp, #32]
 800f01a:	4293      	cmp	r3, r2
 800f01c:	d12d      	bne.n	800f07a <_dtoa_r+0x63e>
 800f01e:	9814      	ldr	r0, [sp, #80]	; 0x50
 800f020:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f022:	9a06      	ldr	r2, [sp, #24]
 800f024:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f026:	4694      	mov	ip, r2
 800f028:	4463      	add	r3, ip
 800f02a:	2200      	movs	r2, #0
 800f02c:	9308      	str	r3, [sp, #32]
 800f02e:	4b47      	ldr	r3, [pc, #284]	; (800f14c <_dtoa_r+0x710>)
 800f030:	f7f1 fbc2 	bl	80007b8 <__aeabi_dadd>
 800f034:	0002      	movs	r2, r0
 800f036:	000b      	movs	r3, r1
 800f038:	0020      	movs	r0, r4
 800f03a:	0029      	movs	r1, r5
 800f03c:	f7f1 fa1e 	bl	800047c <__aeabi_dcmpgt>
 800f040:	2800      	cmp	r0, #0
 800f042:	d000      	beq.n	800f046 <_dtoa_r+0x60a>
 800f044:	e086      	b.n	800f154 <_dtoa_r+0x718>
 800f046:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f048:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f04a:	2000      	movs	r0, #0
 800f04c:	493f      	ldr	r1, [pc, #252]	; (800f14c <_dtoa_r+0x710>)
 800f04e:	f7f2 fdcf 	bl	8001bf0 <__aeabi_dsub>
 800f052:	0002      	movs	r2, r0
 800f054:	000b      	movs	r3, r1
 800f056:	0020      	movs	r0, r4
 800f058:	0029      	movs	r1, r5
 800f05a:	f7f1 f9fb 	bl	8000454 <__aeabi_dcmplt>
 800f05e:	2800      	cmp	r0, #0
 800f060:	d100      	bne.n	800f064 <_dtoa_r+0x628>
 800f062:	e716      	b.n	800ee92 <_dtoa_r+0x456>
 800f064:	9b08      	ldr	r3, [sp, #32]
 800f066:	001a      	movs	r2, r3
 800f068:	3a01      	subs	r2, #1
 800f06a:	9208      	str	r2, [sp, #32]
 800f06c:	7812      	ldrb	r2, [r2, #0]
 800f06e:	2a30      	cmp	r2, #48	; 0x30
 800f070:	d0f8      	beq.n	800f064 <_dtoa_r+0x628>
 800f072:	9308      	str	r3, [sp, #32]
 800f074:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f076:	9303      	str	r3, [sp, #12]
 800f078:	e046      	b.n	800f108 <_dtoa_r+0x6cc>
 800f07a:	2200      	movs	r2, #0
 800f07c:	4b2e      	ldr	r3, [pc, #184]	; (800f138 <_dtoa_r+0x6fc>)
 800f07e:	f7f2 faf5 	bl	800166c <__aeabi_dmul>
 800f082:	0006      	movs	r6, r0
 800f084:	000f      	movs	r7, r1
 800f086:	e7b2      	b.n	800efee <_dtoa_r+0x5b2>
 800f088:	9b06      	ldr	r3, [sp, #24]
 800f08a:	9a06      	ldr	r2, [sp, #24]
 800f08c:	930a      	str	r3, [sp, #40]	; 0x28
 800f08e:	9b07      	ldr	r3, [sp, #28]
 800f090:	9c08      	ldr	r4, [sp, #32]
 800f092:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f094:	3b01      	subs	r3, #1
 800f096:	189b      	adds	r3, r3, r2
 800f098:	930b      	str	r3, [sp, #44]	; 0x2c
 800f09a:	0032      	movs	r2, r6
 800f09c:	003b      	movs	r3, r7
 800f09e:	0020      	movs	r0, r4
 800f0a0:	0029      	movs	r1, r5
 800f0a2:	f7f1 fee9 	bl	8000e78 <__aeabi_ddiv>
 800f0a6:	f7f3 f943 	bl	8002330 <__aeabi_d2iz>
 800f0aa:	9007      	str	r0, [sp, #28]
 800f0ac:	f7f3 f976 	bl	800239c <__aeabi_i2d>
 800f0b0:	0032      	movs	r2, r6
 800f0b2:	003b      	movs	r3, r7
 800f0b4:	f7f2 fada 	bl	800166c <__aeabi_dmul>
 800f0b8:	0002      	movs	r2, r0
 800f0ba:	000b      	movs	r3, r1
 800f0bc:	0020      	movs	r0, r4
 800f0be:	0029      	movs	r1, r5
 800f0c0:	f7f2 fd96 	bl	8001bf0 <__aeabi_dsub>
 800f0c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0c6:	001a      	movs	r2, r3
 800f0c8:	3201      	adds	r2, #1
 800f0ca:	920a      	str	r2, [sp, #40]	; 0x28
 800f0cc:	9208      	str	r2, [sp, #32]
 800f0ce:	9a07      	ldr	r2, [sp, #28]
 800f0d0:	3230      	adds	r2, #48	; 0x30
 800f0d2:	701a      	strb	r2, [r3, #0]
 800f0d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	d14f      	bne.n	800f17a <_dtoa_r+0x73e>
 800f0da:	0002      	movs	r2, r0
 800f0dc:	000b      	movs	r3, r1
 800f0de:	f7f1 fb6b 	bl	80007b8 <__aeabi_dadd>
 800f0e2:	0032      	movs	r2, r6
 800f0e4:	003b      	movs	r3, r7
 800f0e6:	0004      	movs	r4, r0
 800f0e8:	000d      	movs	r5, r1
 800f0ea:	f7f1 f9c7 	bl	800047c <__aeabi_dcmpgt>
 800f0ee:	2800      	cmp	r0, #0
 800f0f0:	d12e      	bne.n	800f150 <_dtoa_r+0x714>
 800f0f2:	0032      	movs	r2, r6
 800f0f4:	003b      	movs	r3, r7
 800f0f6:	0020      	movs	r0, r4
 800f0f8:	0029      	movs	r1, r5
 800f0fa:	f7f1 f9a5 	bl	8000448 <__aeabi_dcmpeq>
 800f0fe:	2800      	cmp	r0, #0
 800f100:	d002      	beq.n	800f108 <_dtoa_r+0x6cc>
 800f102:	9b07      	ldr	r3, [sp, #28]
 800f104:	07de      	lsls	r6, r3, #31
 800f106:	d423      	bmi.n	800f150 <_dtoa_r+0x714>
 800f108:	9905      	ldr	r1, [sp, #20]
 800f10a:	9804      	ldr	r0, [sp, #16]
 800f10c:	f7fc f8fe 	bl	800b30c <_Bfree>
 800f110:	2300      	movs	r3, #0
 800f112:	9a08      	ldr	r2, [sp, #32]
 800f114:	7013      	strb	r3, [r2, #0]
 800f116:	9b03      	ldr	r3, [sp, #12]
 800f118:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f11a:	3301      	adds	r3, #1
 800f11c:	6013      	str	r3, [r2, #0]
 800f11e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f120:	2b00      	cmp	r3, #0
 800f122:	d100      	bne.n	800f126 <_dtoa_r+0x6ea>
 800f124:	e4bd      	b.n	800eaa2 <_dtoa_r+0x66>
 800f126:	9a08      	ldr	r2, [sp, #32]
 800f128:	601a      	str	r2, [r3, #0]
 800f12a:	e4ba      	b.n	800eaa2 <_dtoa_r+0x66>
 800f12c:	08012d88 	.word	0x08012d88
 800f130:	08012d60 	.word	0x08012d60
 800f134:	3ff00000 	.word	0x3ff00000
 800f138:	40240000 	.word	0x40240000
 800f13c:	401c0000 	.word	0x401c0000
 800f140:	fcc00000 	.word	0xfcc00000
 800f144:	40140000 	.word	0x40140000
 800f148:	7cc00000 	.word	0x7cc00000
 800f14c:	3fe00000 	.word	0x3fe00000
 800f150:	9b03      	ldr	r3, [sp, #12]
 800f152:	930e      	str	r3, [sp, #56]	; 0x38
 800f154:	9b08      	ldr	r3, [sp, #32]
 800f156:	9308      	str	r3, [sp, #32]
 800f158:	3b01      	subs	r3, #1
 800f15a:	781a      	ldrb	r2, [r3, #0]
 800f15c:	2a39      	cmp	r2, #57	; 0x39
 800f15e:	d108      	bne.n	800f172 <_dtoa_r+0x736>
 800f160:	9a06      	ldr	r2, [sp, #24]
 800f162:	429a      	cmp	r2, r3
 800f164:	d1f7      	bne.n	800f156 <_dtoa_r+0x71a>
 800f166:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f168:	9906      	ldr	r1, [sp, #24]
 800f16a:	3201      	adds	r2, #1
 800f16c:	920e      	str	r2, [sp, #56]	; 0x38
 800f16e:	2230      	movs	r2, #48	; 0x30
 800f170:	700a      	strb	r2, [r1, #0]
 800f172:	781a      	ldrb	r2, [r3, #0]
 800f174:	3201      	adds	r2, #1
 800f176:	701a      	strb	r2, [r3, #0]
 800f178:	e77c      	b.n	800f074 <_dtoa_r+0x638>
 800f17a:	2200      	movs	r2, #0
 800f17c:	4ba9      	ldr	r3, [pc, #676]	; (800f424 <_dtoa_r+0x9e8>)
 800f17e:	f7f2 fa75 	bl	800166c <__aeabi_dmul>
 800f182:	2200      	movs	r2, #0
 800f184:	2300      	movs	r3, #0
 800f186:	0004      	movs	r4, r0
 800f188:	000d      	movs	r5, r1
 800f18a:	f7f1 f95d 	bl	8000448 <__aeabi_dcmpeq>
 800f18e:	2800      	cmp	r0, #0
 800f190:	d100      	bne.n	800f194 <_dtoa_r+0x758>
 800f192:	e782      	b.n	800f09a <_dtoa_r+0x65e>
 800f194:	e7b8      	b.n	800f108 <_dtoa_r+0x6cc>
 800f196:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800f198:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f19a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f19c:	2f00      	cmp	r7, #0
 800f19e:	d012      	beq.n	800f1c6 <_dtoa_r+0x78a>
 800f1a0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f1a2:	2a01      	cmp	r2, #1
 800f1a4:	dc6e      	bgt.n	800f284 <_dtoa_r+0x848>
 800f1a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f1a8:	2a00      	cmp	r2, #0
 800f1aa:	d065      	beq.n	800f278 <_dtoa_r+0x83c>
 800f1ac:	4a9e      	ldr	r2, [pc, #632]	; (800f428 <_dtoa_r+0x9ec>)
 800f1ae:	189b      	adds	r3, r3, r2
 800f1b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f1b2:	2101      	movs	r1, #1
 800f1b4:	18d2      	adds	r2, r2, r3
 800f1b6:	920a      	str	r2, [sp, #40]	; 0x28
 800f1b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f1ba:	9804      	ldr	r0, [sp, #16]
 800f1bc:	18d3      	adds	r3, r2, r3
 800f1be:	930c      	str	r3, [sp, #48]	; 0x30
 800f1c0:	f7fc f986 	bl	800b4d0 <__i2b>
 800f1c4:	0007      	movs	r7, r0
 800f1c6:	2c00      	cmp	r4, #0
 800f1c8:	d00e      	beq.n	800f1e8 <_dtoa_r+0x7ac>
 800f1ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	dd0b      	ble.n	800f1e8 <_dtoa_r+0x7ac>
 800f1d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f1d2:	0023      	movs	r3, r4
 800f1d4:	4294      	cmp	r4, r2
 800f1d6:	dd00      	ble.n	800f1da <_dtoa_r+0x79e>
 800f1d8:	0013      	movs	r3, r2
 800f1da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f1dc:	1ae4      	subs	r4, r4, r3
 800f1de:	1ad2      	subs	r2, r2, r3
 800f1e0:	920a      	str	r2, [sp, #40]	; 0x28
 800f1e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f1e4:	1ad3      	subs	r3, r2, r3
 800f1e6:	930c      	str	r3, [sp, #48]	; 0x30
 800f1e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d01e      	beq.n	800f22c <_dtoa_r+0x7f0>
 800f1ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d05c      	beq.n	800f2ae <_dtoa_r+0x872>
 800f1f4:	2d00      	cmp	r5, #0
 800f1f6:	dd10      	ble.n	800f21a <_dtoa_r+0x7de>
 800f1f8:	0039      	movs	r1, r7
 800f1fa:	002a      	movs	r2, r5
 800f1fc:	9804      	ldr	r0, [sp, #16]
 800f1fe:	f7fc fa2f 	bl	800b660 <__pow5mult>
 800f202:	9a05      	ldr	r2, [sp, #20]
 800f204:	0001      	movs	r1, r0
 800f206:	0007      	movs	r7, r0
 800f208:	9804      	ldr	r0, [sp, #16]
 800f20a:	f7fc f979 	bl	800b500 <__multiply>
 800f20e:	0006      	movs	r6, r0
 800f210:	9905      	ldr	r1, [sp, #20]
 800f212:	9804      	ldr	r0, [sp, #16]
 800f214:	f7fc f87a 	bl	800b30c <_Bfree>
 800f218:	9605      	str	r6, [sp, #20]
 800f21a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f21c:	1b5a      	subs	r2, r3, r5
 800f21e:	42ab      	cmp	r3, r5
 800f220:	d004      	beq.n	800f22c <_dtoa_r+0x7f0>
 800f222:	9905      	ldr	r1, [sp, #20]
 800f224:	9804      	ldr	r0, [sp, #16]
 800f226:	f7fc fa1b 	bl	800b660 <__pow5mult>
 800f22a:	9005      	str	r0, [sp, #20]
 800f22c:	2101      	movs	r1, #1
 800f22e:	9804      	ldr	r0, [sp, #16]
 800f230:	f7fc f94e 	bl	800b4d0 <__i2b>
 800f234:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f236:	0006      	movs	r6, r0
 800f238:	2b00      	cmp	r3, #0
 800f23a:	dd3a      	ble.n	800f2b2 <_dtoa_r+0x876>
 800f23c:	001a      	movs	r2, r3
 800f23e:	0001      	movs	r1, r0
 800f240:	9804      	ldr	r0, [sp, #16]
 800f242:	f7fc fa0d 	bl	800b660 <__pow5mult>
 800f246:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f248:	0006      	movs	r6, r0
 800f24a:	2500      	movs	r5, #0
 800f24c:	2b01      	cmp	r3, #1
 800f24e:	dc38      	bgt.n	800f2c2 <_dtoa_r+0x886>
 800f250:	2500      	movs	r5, #0
 800f252:	9b08      	ldr	r3, [sp, #32]
 800f254:	42ab      	cmp	r3, r5
 800f256:	d130      	bne.n	800f2ba <_dtoa_r+0x87e>
 800f258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f25a:	031b      	lsls	r3, r3, #12
 800f25c:	42ab      	cmp	r3, r5
 800f25e:	d12c      	bne.n	800f2ba <_dtoa_r+0x87e>
 800f260:	4b72      	ldr	r3, [pc, #456]	; (800f42c <_dtoa_r+0x9f0>)
 800f262:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f264:	4213      	tst	r3, r2
 800f266:	d028      	beq.n	800f2ba <_dtoa_r+0x87e>
 800f268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f26a:	3501      	adds	r5, #1
 800f26c:	3301      	adds	r3, #1
 800f26e:	930a      	str	r3, [sp, #40]	; 0x28
 800f270:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f272:	3301      	adds	r3, #1
 800f274:	930c      	str	r3, [sp, #48]	; 0x30
 800f276:	e020      	b.n	800f2ba <_dtoa_r+0x87e>
 800f278:	2336      	movs	r3, #54	; 0x36
 800f27a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f27c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f27e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f280:	1a9b      	subs	r3, r3, r2
 800f282:	e795      	b.n	800f1b0 <_dtoa_r+0x774>
 800f284:	9b07      	ldr	r3, [sp, #28]
 800f286:	1e5d      	subs	r5, r3, #1
 800f288:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f28a:	42ab      	cmp	r3, r5
 800f28c:	db07      	blt.n	800f29e <_dtoa_r+0x862>
 800f28e:	1b5d      	subs	r5, r3, r5
 800f290:	9b07      	ldr	r3, [sp, #28]
 800f292:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f294:	2b00      	cmp	r3, #0
 800f296:	da8b      	bge.n	800f1b0 <_dtoa_r+0x774>
 800f298:	1ae4      	subs	r4, r4, r3
 800f29a:	2300      	movs	r3, #0
 800f29c:	e788      	b.n	800f1b0 <_dtoa_r+0x774>
 800f29e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f2a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f2a2:	1aeb      	subs	r3, r5, r3
 800f2a4:	18d3      	adds	r3, r2, r3
 800f2a6:	950d      	str	r5, [sp, #52]	; 0x34
 800f2a8:	9313      	str	r3, [sp, #76]	; 0x4c
 800f2aa:	2500      	movs	r5, #0
 800f2ac:	e7f0      	b.n	800f290 <_dtoa_r+0x854>
 800f2ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f2b0:	e7b7      	b.n	800f222 <_dtoa_r+0x7e6>
 800f2b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f2b4:	2500      	movs	r5, #0
 800f2b6:	2b01      	cmp	r3, #1
 800f2b8:	ddca      	ble.n	800f250 <_dtoa_r+0x814>
 800f2ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f2bc:	2001      	movs	r0, #1
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d008      	beq.n	800f2d4 <_dtoa_r+0x898>
 800f2c2:	6933      	ldr	r3, [r6, #16]
 800f2c4:	3303      	adds	r3, #3
 800f2c6:	009b      	lsls	r3, r3, #2
 800f2c8:	18f3      	adds	r3, r6, r3
 800f2ca:	6858      	ldr	r0, [r3, #4]
 800f2cc:	f7fc f8b8 	bl	800b440 <__hi0bits>
 800f2d0:	2320      	movs	r3, #32
 800f2d2:	1a18      	subs	r0, r3, r0
 800f2d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f2d6:	1818      	adds	r0, r3, r0
 800f2d8:	0002      	movs	r2, r0
 800f2da:	231f      	movs	r3, #31
 800f2dc:	401a      	ands	r2, r3
 800f2de:	4218      	tst	r0, r3
 800f2e0:	d047      	beq.n	800f372 <_dtoa_r+0x936>
 800f2e2:	3301      	adds	r3, #1
 800f2e4:	1a9b      	subs	r3, r3, r2
 800f2e6:	2b04      	cmp	r3, #4
 800f2e8:	dd3f      	ble.n	800f36a <_dtoa_r+0x92e>
 800f2ea:	231c      	movs	r3, #28
 800f2ec:	1a9b      	subs	r3, r3, r2
 800f2ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f2f0:	18e4      	adds	r4, r4, r3
 800f2f2:	18d2      	adds	r2, r2, r3
 800f2f4:	920a      	str	r2, [sp, #40]	; 0x28
 800f2f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f2f8:	18d3      	adds	r3, r2, r3
 800f2fa:	930c      	str	r3, [sp, #48]	; 0x30
 800f2fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	dd05      	ble.n	800f30e <_dtoa_r+0x8d2>
 800f302:	001a      	movs	r2, r3
 800f304:	9905      	ldr	r1, [sp, #20]
 800f306:	9804      	ldr	r0, [sp, #16]
 800f308:	f7fc f9ec 	bl	800b6e4 <__lshift>
 800f30c:	9005      	str	r0, [sp, #20]
 800f30e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f310:	2b00      	cmp	r3, #0
 800f312:	dd05      	ble.n	800f320 <_dtoa_r+0x8e4>
 800f314:	0031      	movs	r1, r6
 800f316:	001a      	movs	r2, r3
 800f318:	9804      	ldr	r0, [sp, #16]
 800f31a:	f7fc f9e3 	bl	800b6e4 <__lshift>
 800f31e:	0006      	movs	r6, r0
 800f320:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f322:	2b00      	cmp	r3, #0
 800f324:	d027      	beq.n	800f376 <_dtoa_r+0x93a>
 800f326:	0031      	movs	r1, r6
 800f328:	9805      	ldr	r0, [sp, #20]
 800f32a:	f7fc fa49 	bl	800b7c0 <__mcmp>
 800f32e:	2800      	cmp	r0, #0
 800f330:	da21      	bge.n	800f376 <_dtoa_r+0x93a>
 800f332:	9b03      	ldr	r3, [sp, #12]
 800f334:	220a      	movs	r2, #10
 800f336:	3b01      	subs	r3, #1
 800f338:	9303      	str	r3, [sp, #12]
 800f33a:	9905      	ldr	r1, [sp, #20]
 800f33c:	2300      	movs	r3, #0
 800f33e:	9804      	ldr	r0, [sp, #16]
 800f340:	f7fb ffee 	bl	800b320 <__multadd>
 800f344:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f346:	9005      	str	r0, [sp, #20]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d100      	bne.n	800f34e <_dtoa_r+0x912>
 800f34c:	e15d      	b.n	800f60a <_dtoa_r+0xbce>
 800f34e:	2300      	movs	r3, #0
 800f350:	0039      	movs	r1, r7
 800f352:	220a      	movs	r2, #10
 800f354:	9804      	ldr	r0, [sp, #16]
 800f356:	f7fb ffe3 	bl	800b320 <__multadd>
 800f35a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f35c:	0007      	movs	r7, r0
 800f35e:	2b00      	cmp	r3, #0
 800f360:	dc49      	bgt.n	800f3f6 <_dtoa_r+0x9ba>
 800f362:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f364:	2b02      	cmp	r3, #2
 800f366:	dc0e      	bgt.n	800f386 <_dtoa_r+0x94a>
 800f368:	e045      	b.n	800f3f6 <_dtoa_r+0x9ba>
 800f36a:	2b04      	cmp	r3, #4
 800f36c:	d0c6      	beq.n	800f2fc <_dtoa_r+0x8c0>
 800f36e:	331c      	adds	r3, #28
 800f370:	e7bd      	b.n	800f2ee <_dtoa_r+0x8b2>
 800f372:	0013      	movs	r3, r2
 800f374:	e7fb      	b.n	800f36e <_dtoa_r+0x932>
 800f376:	9b07      	ldr	r3, [sp, #28]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	dc36      	bgt.n	800f3ea <_dtoa_r+0x9ae>
 800f37c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f37e:	2b02      	cmp	r3, #2
 800f380:	dd33      	ble.n	800f3ea <_dtoa_r+0x9ae>
 800f382:	9b07      	ldr	r3, [sp, #28]
 800f384:	930b      	str	r3, [sp, #44]	; 0x2c
 800f386:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d10c      	bne.n	800f3a6 <_dtoa_r+0x96a>
 800f38c:	0031      	movs	r1, r6
 800f38e:	2205      	movs	r2, #5
 800f390:	9804      	ldr	r0, [sp, #16]
 800f392:	f7fb ffc5 	bl	800b320 <__multadd>
 800f396:	0006      	movs	r6, r0
 800f398:	0001      	movs	r1, r0
 800f39a:	9805      	ldr	r0, [sp, #20]
 800f39c:	f7fc fa10 	bl	800b7c0 <__mcmp>
 800f3a0:	2800      	cmp	r0, #0
 800f3a2:	dd00      	ble.n	800f3a6 <_dtoa_r+0x96a>
 800f3a4:	e59f      	b.n	800eee6 <_dtoa_r+0x4aa>
 800f3a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f3a8:	43db      	mvns	r3, r3
 800f3aa:	9303      	str	r3, [sp, #12]
 800f3ac:	9b06      	ldr	r3, [sp, #24]
 800f3ae:	9308      	str	r3, [sp, #32]
 800f3b0:	2500      	movs	r5, #0
 800f3b2:	0031      	movs	r1, r6
 800f3b4:	9804      	ldr	r0, [sp, #16]
 800f3b6:	f7fb ffa9 	bl	800b30c <_Bfree>
 800f3ba:	2f00      	cmp	r7, #0
 800f3bc:	d100      	bne.n	800f3c0 <_dtoa_r+0x984>
 800f3be:	e6a3      	b.n	800f108 <_dtoa_r+0x6cc>
 800f3c0:	2d00      	cmp	r5, #0
 800f3c2:	d005      	beq.n	800f3d0 <_dtoa_r+0x994>
 800f3c4:	42bd      	cmp	r5, r7
 800f3c6:	d003      	beq.n	800f3d0 <_dtoa_r+0x994>
 800f3c8:	0029      	movs	r1, r5
 800f3ca:	9804      	ldr	r0, [sp, #16]
 800f3cc:	f7fb ff9e 	bl	800b30c <_Bfree>
 800f3d0:	0039      	movs	r1, r7
 800f3d2:	9804      	ldr	r0, [sp, #16]
 800f3d4:	f7fb ff9a 	bl	800b30c <_Bfree>
 800f3d8:	e696      	b.n	800f108 <_dtoa_r+0x6cc>
 800f3da:	2600      	movs	r6, #0
 800f3dc:	0037      	movs	r7, r6
 800f3de:	e7e2      	b.n	800f3a6 <_dtoa_r+0x96a>
 800f3e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f3e2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800f3e4:	9303      	str	r3, [sp, #12]
 800f3e6:	0037      	movs	r7, r6
 800f3e8:	e57d      	b.n	800eee6 <_dtoa_r+0x4aa>
 800f3ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d100      	bne.n	800f3f2 <_dtoa_r+0x9b6>
 800f3f0:	e0c3      	b.n	800f57a <_dtoa_r+0xb3e>
 800f3f2:	9b07      	ldr	r3, [sp, #28]
 800f3f4:	930b      	str	r3, [sp, #44]	; 0x2c
 800f3f6:	2c00      	cmp	r4, #0
 800f3f8:	dd05      	ble.n	800f406 <_dtoa_r+0x9ca>
 800f3fa:	0039      	movs	r1, r7
 800f3fc:	0022      	movs	r2, r4
 800f3fe:	9804      	ldr	r0, [sp, #16]
 800f400:	f7fc f970 	bl	800b6e4 <__lshift>
 800f404:	0007      	movs	r7, r0
 800f406:	0038      	movs	r0, r7
 800f408:	2d00      	cmp	r5, #0
 800f40a:	d024      	beq.n	800f456 <_dtoa_r+0xa1a>
 800f40c:	6879      	ldr	r1, [r7, #4]
 800f40e:	9804      	ldr	r0, [sp, #16]
 800f410:	f7fb ff54 	bl	800b2bc <_Balloc>
 800f414:	1e04      	subs	r4, r0, #0
 800f416:	d111      	bne.n	800f43c <_dtoa_r+0xa00>
 800f418:	0022      	movs	r2, r4
 800f41a:	4b05      	ldr	r3, [pc, #20]	; (800f430 <_dtoa_r+0x9f4>)
 800f41c:	4805      	ldr	r0, [pc, #20]	; (800f434 <_dtoa_r+0x9f8>)
 800f41e:	4906      	ldr	r1, [pc, #24]	; (800f438 <_dtoa_r+0x9fc>)
 800f420:	e43c      	b.n	800ec9c <_dtoa_r+0x260>
 800f422:	46c0      	nop			; (mov r8, r8)
 800f424:	40240000 	.word	0x40240000
 800f428:	00000433 	.word	0x00000433
 800f42c:	7ff00000 	.word	0x7ff00000
 800f430:	08012c91 	.word	0x08012c91
 800f434:	08012f21 	.word	0x08012f21
 800f438:	000002ef 	.word	0x000002ef
 800f43c:	0039      	movs	r1, r7
 800f43e:	693a      	ldr	r2, [r7, #16]
 800f440:	310c      	adds	r1, #12
 800f442:	3202      	adds	r2, #2
 800f444:	0092      	lsls	r2, r2, #2
 800f446:	300c      	adds	r0, #12
 800f448:	f7fb fa9d 	bl	800a986 <memcpy>
 800f44c:	2201      	movs	r2, #1
 800f44e:	0021      	movs	r1, r4
 800f450:	9804      	ldr	r0, [sp, #16]
 800f452:	f7fc f947 	bl	800b6e4 <__lshift>
 800f456:	9b06      	ldr	r3, [sp, #24]
 800f458:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f45a:	9307      	str	r3, [sp, #28]
 800f45c:	3b01      	subs	r3, #1
 800f45e:	189b      	adds	r3, r3, r2
 800f460:	2201      	movs	r2, #1
 800f462:	003d      	movs	r5, r7
 800f464:	0007      	movs	r7, r0
 800f466:	930e      	str	r3, [sp, #56]	; 0x38
 800f468:	9b08      	ldr	r3, [sp, #32]
 800f46a:	4013      	ands	r3, r2
 800f46c:	930d      	str	r3, [sp, #52]	; 0x34
 800f46e:	0031      	movs	r1, r6
 800f470:	9805      	ldr	r0, [sp, #20]
 800f472:	f7ff fa53 	bl	800e91c <quorem>
 800f476:	0029      	movs	r1, r5
 800f478:	0004      	movs	r4, r0
 800f47a:	900b      	str	r0, [sp, #44]	; 0x2c
 800f47c:	9805      	ldr	r0, [sp, #20]
 800f47e:	f7fc f99f 	bl	800b7c0 <__mcmp>
 800f482:	003a      	movs	r2, r7
 800f484:	900c      	str	r0, [sp, #48]	; 0x30
 800f486:	0031      	movs	r1, r6
 800f488:	9804      	ldr	r0, [sp, #16]
 800f48a:	f7fc f9b5 	bl	800b7f8 <__mdiff>
 800f48e:	2201      	movs	r2, #1
 800f490:	68c3      	ldr	r3, [r0, #12]
 800f492:	3430      	adds	r4, #48	; 0x30
 800f494:	9008      	str	r0, [sp, #32]
 800f496:	920a      	str	r2, [sp, #40]	; 0x28
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d104      	bne.n	800f4a6 <_dtoa_r+0xa6a>
 800f49c:	0001      	movs	r1, r0
 800f49e:	9805      	ldr	r0, [sp, #20]
 800f4a0:	f7fc f98e 	bl	800b7c0 <__mcmp>
 800f4a4:	900a      	str	r0, [sp, #40]	; 0x28
 800f4a6:	9908      	ldr	r1, [sp, #32]
 800f4a8:	9804      	ldr	r0, [sp, #16]
 800f4aa:	f7fb ff2f 	bl	800b30c <_Bfree>
 800f4ae:	9b07      	ldr	r3, [sp, #28]
 800f4b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f4b2:	3301      	adds	r3, #1
 800f4b4:	9308      	str	r3, [sp, #32]
 800f4b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f4b8:	4313      	orrs	r3, r2
 800f4ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f4bc:	4313      	orrs	r3, r2
 800f4be:	d109      	bne.n	800f4d4 <_dtoa_r+0xa98>
 800f4c0:	2c39      	cmp	r4, #57	; 0x39
 800f4c2:	d022      	beq.n	800f50a <_dtoa_r+0xace>
 800f4c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	dd01      	ble.n	800f4ce <_dtoa_r+0xa92>
 800f4ca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800f4cc:	3431      	adds	r4, #49	; 0x31
 800f4ce:	9b07      	ldr	r3, [sp, #28]
 800f4d0:	701c      	strb	r4, [r3, #0]
 800f4d2:	e76e      	b.n	800f3b2 <_dtoa_r+0x976>
 800f4d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	db04      	blt.n	800f4e4 <_dtoa_r+0xaa8>
 800f4da:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f4dc:	4313      	orrs	r3, r2
 800f4de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f4e0:	4313      	orrs	r3, r2
 800f4e2:	d11e      	bne.n	800f522 <_dtoa_r+0xae6>
 800f4e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	ddf1      	ble.n	800f4ce <_dtoa_r+0xa92>
 800f4ea:	9905      	ldr	r1, [sp, #20]
 800f4ec:	2201      	movs	r2, #1
 800f4ee:	9804      	ldr	r0, [sp, #16]
 800f4f0:	f7fc f8f8 	bl	800b6e4 <__lshift>
 800f4f4:	0031      	movs	r1, r6
 800f4f6:	9005      	str	r0, [sp, #20]
 800f4f8:	f7fc f962 	bl	800b7c0 <__mcmp>
 800f4fc:	2800      	cmp	r0, #0
 800f4fe:	dc02      	bgt.n	800f506 <_dtoa_r+0xaca>
 800f500:	d1e5      	bne.n	800f4ce <_dtoa_r+0xa92>
 800f502:	07e3      	lsls	r3, r4, #31
 800f504:	d5e3      	bpl.n	800f4ce <_dtoa_r+0xa92>
 800f506:	2c39      	cmp	r4, #57	; 0x39
 800f508:	d1df      	bne.n	800f4ca <_dtoa_r+0xa8e>
 800f50a:	2339      	movs	r3, #57	; 0x39
 800f50c:	9a07      	ldr	r2, [sp, #28]
 800f50e:	7013      	strb	r3, [r2, #0]
 800f510:	9b08      	ldr	r3, [sp, #32]
 800f512:	9308      	str	r3, [sp, #32]
 800f514:	3b01      	subs	r3, #1
 800f516:	781a      	ldrb	r2, [r3, #0]
 800f518:	2a39      	cmp	r2, #57	; 0x39
 800f51a:	d063      	beq.n	800f5e4 <_dtoa_r+0xba8>
 800f51c:	3201      	adds	r2, #1
 800f51e:	701a      	strb	r2, [r3, #0]
 800f520:	e747      	b.n	800f3b2 <_dtoa_r+0x976>
 800f522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f524:	2b00      	cmp	r3, #0
 800f526:	dd03      	ble.n	800f530 <_dtoa_r+0xaf4>
 800f528:	2c39      	cmp	r4, #57	; 0x39
 800f52a:	d0ee      	beq.n	800f50a <_dtoa_r+0xace>
 800f52c:	3401      	adds	r4, #1
 800f52e:	e7ce      	b.n	800f4ce <_dtoa_r+0xa92>
 800f530:	9b07      	ldr	r3, [sp, #28]
 800f532:	9a07      	ldr	r2, [sp, #28]
 800f534:	701c      	strb	r4, [r3, #0]
 800f536:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f538:	4293      	cmp	r3, r2
 800f53a:	d03e      	beq.n	800f5ba <_dtoa_r+0xb7e>
 800f53c:	2300      	movs	r3, #0
 800f53e:	220a      	movs	r2, #10
 800f540:	9905      	ldr	r1, [sp, #20]
 800f542:	9804      	ldr	r0, [sp, #16]
 800f544:	f7fb feec 	bl	800b320 <__multadd>
 800f548:	2300      	movs	r3, #0
 800f54a:	9005      	str	r0, [sp, #20]
 800f54c:	220a      	movs	r2, #10
 800f54e:	0029      	movs	r1, r5
 800f550:	9804      	ldr	r0, [sp, #16]
 800f552:	42bd      	cmp	r5, r7
 800f554:	d106      	bne.n	800f564 <_dtoa_r+0xb28>
 800f556:	f7fb fee3 	bl	800b320 <__multadd>
 800f55a:	0005      	movs	r5, r0
 800f55c:	0007      	movs	r7, r0
 800f55e:	9b08      	ldr	r3, [sp, #32]
 800f560:	9307      	str	r3, [sp, #28]
 800f562:	e784      	b.n	800f46e <_dtoa_r+0xa32>
 800f564:	f7fb fedc 	bl	800b320 <__multadd>
 800f568:	0039      	movs	r1, r7
 800f56a:	0005      	movs	r5, r0
 800f56c:	2300      	movs	r3, #0
 800f56e:	220a      	movs	r2, #10
 800f570:	9804      	ldr	r0, [sp, #16]
 800f572:	f7fb fed5 	bl	800b320 <__multadd>
 800f576:	0007      	movs	r7, r0
 800f578:	e7f1      	b.n	800f55e <_dtoa_r+0xb22>
 800f57a:	9b07      	ldr	r3, [sp, #28]
 800f57c:	930b      	str	r3, [sp, #44]	; 0x2c
 800f57e:	2500      	movs	r5, #0
 800f580:	0031      	movs	r1, r6
 800f582:	9805      	ldr	r0, [sp, #20]
 800f584:	f7ff f9ca 	bl	800e91c <quorem>
 800f588:	9b06      	ldr	r3, [sp, #24]
 800f58a:	3030      	adds	r0, #48	; 0x30
 800f58c:	5558      	strb	r0, [r3, r5]
 800f58e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f590:	3501      	adds	r5, #1
 800f592:	0004      	movs	r4, r0
 800f594:	42ab      	cmp	r3, r5
 800f596:	dd07      	ble.n	800f5a8 <_dtoa_r+0xb6c>
 800f598:	2300      	movs	r3, #0
 800f59a:	220a      	movs	r2, #10
 800f59c:	9905      	ldr	r1, [sp, #20]
 800f59e:	9804      	ldr	r0, [sp, #16]
 800f5a0:	f7fb febe 	bl	800b320 <__multadd>
 800f5a4:	9005      	str	r0, [sp, #20]
 800f5a6:	e7eb      	b.n	800f580 <_dtoa_r+0xb44>
 800f5a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f5aa:	2301      	movs	r3, #1
 800f5ac:	2a00      	cmp	r2, #0
 800f5ae:	dd00      	ble.n	800f5b2 <_dtoa_r+0xb76>
 800f5b0:	0013      	movs	r3, r2
 800f5b2:	2500      	movs	r5, #0
 800f5b4:	9a06      	ldr	r2, [sp, #24]
 800f5b6:	18d3      	adds	r3, r2, r3
 800f5b8:	9308      	str	r3, [sp, #32]
 800f5ba:	9905      	ldr	r1, [sp, #20]
 800f5bc:	2201      	movs	r2, #1
 800f5be:	9804      	ldr	r0, [sp, #16]
 800f5c0:	f7fc f890 	bl	800b6e4 <__lshift>
 800f5c4:	0031      	movs	r1, r6
 800f5c6:	9005      	str	r0, [sp, #20]
 800f5c8:	f7fc f8fa 	bl	800b7c0 <__mcmp>
 800f5cc:	2800      	cmp	r0, #0
 800f5ce:	dc9f      	bgt.n	800f510 <_dtoa_r+0xad4>
 800f5d0:	d101      	bne.n	800f5d6 <_dtoa_r+0xb9a>
 800f5d2:	07e4      	lsls	r4, r4, #31
 800f5d4:	d49c      	bmi.n	800f510 <_dtoa_r+0xad4>
 800f5d6:	9b08      	ldr	r3, [sp, #32]
 800f5d8:	9308      	str	r3, [sp, #32]
 800f5da:	3b01      	subs	r3, #1
 800f5dc:	781a      	ldrb	r2, [r3, #0]
 800f5de:	2a30      	cmp	r2, #48	; 0x30
 800f5e0:	d0fa      	beq.n	800f5d8 <_dtoa_r+0xb9c>
 800f5e2:	e6e6      	b.n	800f3b2 <_dtoa_r+0x976>
 800f5e4:	9a06      	ldr	r2, [sp, #24]
 800f5e6:	429a      	cmp	r2, r3
 800f5e8:	d193      	bne.n	800f512 <_dtoa_r+0xad6>
 800f5ea:	9b03      	ldr	r3, [sp, #12]
 800f5ec:	3301      	adds	r3, #1
 800f5ee:	9303      	str	r3, [sp, #12]
 800f5f0:	2331      	movs	r3, #49	; 0x31
 800f5f2:	7013      	strb	r3, [r2, #0]
 800f5f4:	e6dd      	b.n	800f3b2 <_dtoa_r+0x976>
 800f5f6:	4b09      	ldr	r3, [pc, #36]	; (800f61c <_dtoa_r+0xbe0>)
 800f5f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800f5fa:	9306      	str	r3, [sp, #24]
 800f5fc:	4b08      	ldr	r3, [pc, #32]	; (800f620 <_dtoa_r+0xbe4>)
 800f5fe:	2a00      	cmp	r2, #0
 800f600:	d001      	beq.n	800f606 <_dtoa_r+0xbca>
 800f602:	f7ff fa4c 	bl	800ea9e <_dtoa_r+0x62>
 800f606:	f7ff fa4c 	bl	800eaa2 <_dtoa_r+0x66>
 800f60a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	dcb6      	bgt.n	800f57e <_dtoa_r+0xb42>
 800f610:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f612:	2b02      	cmp	r3, #2
 800f614:	dd00      	ble.n	800f618 <_dtoa_r+0xbdc>
 800f616:	e6b6      	b.n	800f386 <_dtoa_r+0x94a>
 800f618:	e7b1      	b.n	800f57e <_dtoa_r+0xb42>
 800f61a:	46c0      	nop			; (mov r8, r8)
 800f61c:	08012f14 	.word	0x08012f14
 800f620:	08012f1c 	.word	0x08012f1c

0800f624 <realloc>:
 800f624:	b510      	push	{r4, lr}
 800f626:	4b03      	ldr	r3, [pc, #12]	; (800f634 <realloc+0x10>)
 800f628:	000a      	movs	r2, r1
 800f62a:	0001      	movs	r1, r0
 800f62c:	6818      	ldr	r0, [r3, #0]
 800f62e:	f000 f803 	bl	800f638 <_realloc_r>
 800f632:	bd10      	pop	{r4, pc}
 800f634:	200006e0 	.word	0x200006e0

0800f638 <_realloc_r>:
 800f638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f63a:	b087      	sub	sp, #28
 800f63c:	1e0c      	subs	r4, r1, #0
 800f63e:	9001      	str	r0, [sp, #4]
 800f640:	9205      	str	r2, [sp, #20]
 800f642:	d106      	bne.n	800f652 <_realloc_r+0x1a>
 800f644:	0011      	movs	r1, r2
 800f646:	f7f9 fe39 	bl	80092bc <_malloc_r>
 800f64a:	0007      	movs	r7, r0
 800f64c:	0038      	movs	r0, r7
 800f64e:	b007      	add	sp, #28
 800f650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f652:	9801      	ldr	r0, [sp, #4]
 800f654:	f7fa f846 	bl	80096e4 <__malloc_lock>
 800f658:	0023      	movs	r3, r4
 800f65a:	3b08      	subs	r3, #8
 800f65c:	685f      	ldr	r7, [r3, #4]
 800f65e:	9304      	str	r3, [sp, #16]
 800f660:	9b05      	ldr	r3, [sp, #20]
 800f662:	330b      	adds	r3, #11
 800f664:	2b16      	cmp	r3, #22
 800f666:	d908      	bls.n	800f67a <_realloc_r+0x42>
 800f668:	2207      	movs	r2, #7
 800f66a:	4393      	bics	r3, r2
 800f66c:	9300      	str	r3, [sp, #0]
 800f66e:	d506      	bpl.n	800f67e <_realloc_r+0x46>
 800f670:	230c      	movs	r3, #12
 800f672:	9a01      	ldr	r2, [sp, #4]
 800f674:	2700      	movs	r7, #0
 800f676:	6013      	str	r3, [r2, #0]
 800f678:	e7e8      	b.n	800f64c <_realloc_r+0x14>
 800f67a:	2310      	movs	r3, #16
 800f67c:	9300      	str	r3, [sp, #0]
 800f67e:	9b00      	ldr	r3, [sp, #0]
 800f680:	9a05      	ldr	r2, [sp, #20]
 800f682:	4293      	cmp	r3, r2
 800f684:	d3f4      	bcc.n	800f670 <_realloc_r+0x38>
 800f686:	9b04      	ldr	r3, [sp, #16]
 800f688:	003a      	movs	r2, r7
 800f68a:	9302      	str	r3, [sp, #8]
 800f68c:	2303      	movs	r3, #3
 800f68e:	439a      	bics	r2, r3
 800f690:	9b00      	ldr	r3, [sp, #0]
 800f692:	9203      	str	r2, [sp, #12]
 800f694:	4293      	cmp	r3, r2
 800f696:	dc00      	bgt.n	800f69a <_realloc_r+0x62>
 800f698:	e169      	b.n	800f96e <_realloc_r+0x336>
 800f69a:	9b04      	ldr	r3, [sp, #16]
 800f69c:	48b8      	ldr	r0, [pc, #736]	; (800f980 <_realloc_r+0x348>)
 800f69e:	189b      	adds	r3, r3, r2
 800f6a0:	6882      	ldr	r2, [r0, #8]
 800f6a2:	4694      	mov	ip, r2
 800f6a4:	685a      	ldr	r2, [r3, #4]
 800f6a6:	459c      	cmp	ip, r3
 800f6a8:	d006      	beq.n	800f6b8 <_realloc_r+0x80>
 800f6aa:	2501      	movs	r5, #1
 800f6ac:	0011      	movs	r1, r2
 800f6ae:	43a9      	bics	r1, r5
 800f6b0:	1859      	adds	r1, r3, r1
 800f6b2:	6849      	ldr	r1, [r1, #4]
 800f6b4:	4229      	tst	r1, r5
 800f6b6:	d144      	bne.n	800f742 <_realloc_r+0x10a>
 800f6b8:	2103      	movs	r1, #3
 800f6ba:	438a      	bics	r2, r1
 800f6bc:	9903      	ldr	r1, [sp, #12]
 800f6be:	188e      	adds	r6, r1, r2
 800f6c0:	9900      	ldr	r1, [sp, #0]
 800f6c2:	459c      	cmp	ip, r3
 800f6c4:	d117      	bne.n	800f6f6 <_realloc_r+0xbe>
 800f6c6:	3110      	adds	r1, #16
 800f6c8:	42b1      	cmp	r1, r6
 800f6ca:	dc3c      	bgt.n	800f746 <_realloc_r+0x10e>
 800f6cc:	9a00      	ldr	r2, [sp, #0]
 800f6ce:	2101      	movs	r1, #1
 800f6d0:	4694      	mov	ip, r2
 800f6d2:	1ab6      	subs	r6, r6, r2
 800f6d4:	0022      	movs	r2, r4
 800f6d6:	9b04      	ldr	r3, [sp, #16]
 800f6d8:	430e      	orrs	r6, r1
 800f6da:	4463      	add	r3, ip
 800f6dc:	6083      	str	r3, [r0, #8]
 800f6de:	3a08      	subs	r2, #8
 800f6e0:	605e      	str	r6, [r3, #4]
 800f6e2:	6853      	ldr	r3, [r2, #4]
 800f6e4:	9801      	ldr	r0, [sp, #4]
 800f6e6:	400b      	ands	r3, r1
 800f6e8:	4661      	mov	r1, ip
 800f6ea:	430b      	orrs	r3, r1
 800f6ec:	6053      	str	r3, [r2, #4]
 800f6ee:	f7fa f801 	bl	80096f4 <__malloc_unlock>
 800f6f2:	0027      	movs	r7, r4
 800f6f4:	e7aa      	b.n	800f64c <_realloc_r+0x14>
 800f6f6:	42b1      	cmp	r1, r6
 800f6f8:	dc25      	bgt.n	800f746 <_realloc_r+0x10e>
 800f6fa:	68da      	ldr	r2, [r3, #12]
 800f6fc:	689b      	ldr	r3, [r3, #8]
 800f6fe:	60da      	str	r2, [r3, #12]
 800f700:	6093      	str	r3, [r2, #8]
 800f702:	9b00      	ldr	r3, [sp, #0]
 800f704:	9a02      	ldr	r2, [sp, #8]
 800f706:	1af4      	subs	r4, r6, r3
 800f708:	9b02      	ldr	r3, [sp, #8]
 800f70a:	1992      	adds	r2, r2, r6
 800f70c:	6858      	ldr	r0, [r3, #4]
 800f70e:	2301      	movs	r3, #1
 800f710:	4018      	ands	r0, r3
 800f712:	2c0f      	cmp	r4, #15
 800f714:	d800      	bhi.n	800f718 <_realloc_r+0xe0>
 800f716:	e12c      	b.n	800f972 <_realloc_r+0x33a>
 800f718:	9d00      	ldr	r5, [sp, #0]
 800f71a:	9902      	ldr	r1, [sp, #8]
 800f71c:	4328      	orrs	r0, r5
 800f71e:	1949      	adds	r1, r1, r5
 800f720:	9d02      	ldr	r5, [sp, #8]
 800f722:	431c      	orrs	r4, r3
 800f724:	6068      	str	r0, [r5, #4]
 800f726:	604c      	str	r4, [r1, #4]
 800f728:	6850      	ldr	r0, [r2, #4]
 800f72a:	3108      	adds	r1, #8
 800f72c:	4303      	orrs	r3, r0
 800f72e:	6053      	str	r3, [r2, #4]
 800f730:	9801      	ldr	r0, [sp, #4]
 800f732:	f7fb f9a3 	bl	800aa7c <_free_r>
 800f736:	9801      	ldr	r0, [sp, #4]
 800f738:	f7f9 ffdc 	bl	80096f4 <__malloc_unlock>
 800f73c:	9f02      	ldr	r7, [sp, #8]
 800f73e:	3708      	adds	r7, #8
 800f740:	e784      	b.n	800f64c <_realloc_r+0x14>
 800f742:	2200      	movs	r2, #0
 800f744:	0013      	movs	r3, r2
 800f746:	07ff      	lsls	r7, r7, #31
 800f748:	d500      	bpl.n	800f74c <_realloc_r+0x114>
 800f74a:	e0c6      	b.n	800f8da <_realloc_r+0x2a2>
 800f74c:	0021      	movs	r1, r4
 800f74e:	2003      	movs	r0, #3
 800f750:	3908      	subs	r1, #8
 800f752:	680d      	ldr	r5, [r1, #0]
 800f754:	9904      	ldr	r1, [sp, #16]
 800f756:	1b4d      	subs	r5, r1, r5
 800f758:	6869      	ldr	r1, [r5, #4]
 800f75a:	4381      	bics	r1, r0
 800f75c:	9803      	ldr	r0, [sp, #12]
 800f75e:	180f      	adds	r7, r1, r0
 800f760:	2b00      	cmp	r3, #0
 800f762:	d100      	bne.n	800f766 <_realloc_r+0x12e>
 800f764:	e084      	b.n	800f870 <_realloc_r+0x238>
 800f766:	19d6      	adds	r6, r2, r7
 800f768:	459c      	cmp	ip, r3
 800f76a:	d148      	bne.n	800f7fe <_realloc_r+0x1c6>
 800f76c:	9b00      	ldr	r3, [sp, #0]
 800f76e:	3310      	adds	r3, #16
 800f770:	42b3      	cmp	r3, r6
 800f772:	dc7d      	bgt.n	800f870 <_realloc_r+0x238>
 800f774:	68aa      	ldr	r2, [r5, #8]
 800f776:	68eb      	ldr	r3, [r5, #12]
 800f778:	002f      	movs	r7, r5
 800f77a:	60d3      	str	r3, [r2, #12]
 800f77c:	609a      	str	r2, [r3, #8]
 800f77e:	0002      	movs	r2, r0
 800f780:	3a04      	subs	r2, #4
 800f782:	3708      	adds	r7, #8
 800f784:	2a24      	cmp	r2, #36	; 0x24
 800f786:	d835      	bhi.n	800f7f4 <_realloc_r+0x1bc>
 800f788:	003b      	movs	r3, r7
 800f78a:	2a13      	cmp	r2, #19
 800f78c:	d908      	bls.n	800f7a0 <_realloc_r+0x168>
 800f78e:	6823      	ldr	r3, [r4, #0]
 800f790:	60ab      	str	r3, [r5, #8]
 800f792:	6863      	ldr	r3, [r4, #4]
 800f794:	60eb      	str	r3, [r5, #12]
 800f796:	2a1b      	cmp	r2, #27
 800f798:	d81a      	bhi.n	800f7d0 <_realloc_r+0x198>
 800f79a:	002b      	movs	r3, r5
 800f79c:	3408      	adds	r4, #8
 800f79e:	3310      	adds	r3, #16
 800f7a0:	6822      	ldr	r2, [r4, #0]
 800f7a2:	601a      	str	r2, [r3, #0]
 800f7a4:	6862      	ldr	r2, [r4, #4]
 800f7a6:	605a      	str	r2, [r3, #4]
 800f7a8:	68a2      	ldr	r2, [r4, #8]
 800f7aa:	609a      	str	r2, [r3, #8]
 800f7ac:	9b00      	ldr	r3, [sp, #0]
 800f7ae:	4a74      	ldr	r2, [pc, #464]	; (800f980 <_realloc_r+0x348>)
 800f7b0:	18eb      	adds	r3, r5, r3
 800f7b2:	6093      	str	r3, [r2, #8]
 800f7b4:	9a00      	ldr	r2, [sp, #0]
 800f7b6:	1ab6      	subs	r6, r6, r2
 800f7b8:	2201      	movs	r2, #1
 800f7ba:	4316      	orrs	r6, r2
 800f7bc:	605e      	str	r6, [r3, #4]
 800f7be:	686b      	ldr	r3, [r5, #4]
 800f7c0:	4013      	ands	r3, r2
 800f7c2:	9a00      	ldr	r2, [sp, #0]
 800f7c4:	4313      	orrs	r3, r2
 800f7c6:	606b      	str	r3, [r5, #4]
 800f7c8:	9801      	ldr	r0, [sp, #4]
 800f7ca:	f7f9 ff93 	bl	80096f4 <__malloc_unlock>
 800f7ce:	e73d      	b.n	800f64c <_realloc_r+0x14>
 800f7d0:	68a3      	ldr	r3, [r4, #8]
 800f7d2:	612b      	str	r3, [r5, #16]
 800f7d4:	68e3      	ldr	r3, [r4, #12]
 800f7d6:	616b      	str	r3, [r5, #20]
 800f7d8:	2a24      	cmp	r2, #36	; 0x24
 800f7da:	d003      	beq.n	800f7e4 <_realloc_r+0x1ac>
 800f7dc:	002b      	movs	r3, r5
 800f7de:	3410      	adds	r4, #16
 800f7e0:	3318      	adds	r3, #24
 800f7e2:	e7dd      	b.n	800f7a0 <_realloc_r+0x168>
 800f7e4:	6923      	ldr	r3, [r4, #16]
 800f7e6:	61ab      	str	r3, [r5, #24]
 800f7e8:	002b      	movs	r3, r5
 800f7ea:	6962      	ldr	r2, [r4, #20]
 800f7ec:	3320      	adds	r3, #32
 800f7ee:	61ea      	str	r2, [r5, #28]
 800f7f0:	3418      	adds	r4, #24
 800f7f2:	e7d5      	b.n	800f7a0 <_realloc_r+0x168>
 800f7f4:	0021      	movs	r1, r4
 800f7f6:	0038      	movs	r0, r7
 800f7f8:	f001 fbb5 	bl	8010f66 <memmove>
 800f7fc:	e7d6      	b.n	800f7ac <_realloc_r+0x174>
 800f7fe:	9a00      	ldr	r2, [sp, #0]
 800f800:	42b2      	cmp	r2, r6
 800f802:	dc35      	bgt.n	800f870 <_realloc_r+0x238>
 800f804:	0028      	movs	r0, r5
 800f806:	68da      	ldr	r2, [r3, #12]
 800f808:	689b      	ldr	r3, [r3, #8]
 800f80a:	3008      	adds	r0, #8
 800f80c:	60da      	str	r2, [r3, #12]
 800f80e:	6093      	str	r3, [r2, #8]
 800f810:	68aa      	ldr	r2, [r5, #8]
 800f812:	68eb      	ldr	r3, [r5, #12]
 800f814:	60d3      	str	r3, [r2, #12]
 800f816:	609a      	str	r2, [r3, #8]
 800f818:	9a03      	ldr	r2, [sp, #12]
 800f81a:	3a04      	subs	r2, #4
 800f81c:	2a24      	cmp	r2, #36	; 0x24
 800f81e:	d823      	bhi.n	800f868 <_realloc_r+0x230>
 800f820:	2a13      	cmp	r2, #19
 800f822:	d907      	bls.n	800f834 <_realloc_r+0x1fc>
 800f824:	6823      	ldr	r3, [r4, #0]
 800f826:	60ab      	str	r3, [r5, #8]
 800f828:	6863      	ldr	r3, [r4, #4]
 800f82a:	60eb      	str	r3, [r5, #12]
 800f82c:	2a1b      	cmp	r2, #27
 800f82e:	d809      	bhi.n	800f844 <_realloc_r+0x20c>
 800f830:	3408      	adds	r4, #8
 800f832:	3008      	adds	r0, #8
 800f834:	6823      	ldr	r3, [r4, #0]
 800f836:	6003      	str	r3, [r0, #0]
 800f838:	6863      	ldr	r3, [r4, #4]
 800f83a:	6043      	str	r3, [r0, #4]
 800f83c:	68a3      	ldr	r3, [r4, #8]
 800f83e:	6083      	str	r3, [r0, #8]
 800f840:	9502      	str	r5, [sp, #8]
 800f842:	e75e      	b.n	800f702 <_realloc_r+0xca>
 800f844:	68a3      	ldr	r3, [r4, #8]
 800f846:	612b      	str	r3, [r5, #16]
 800f848:	68e3      	ldr	r3, [r4, #12]
 800f84a:	616b      	str	r3, [r5, #20]
 800f84c:	2a24      	cmp	r2, #36	; 0x24
 800f84e:	d003      	beq.n	800f858 <_realloc_r+0x220>
 800f850:	0028      	movs	r0, r5
 800f852:	3410      	adds	r4, #16
 800f854:	3018      	adds	r0, #24
 800f856:	e7ed      	b.n	800f834 <_realloc_r+0x1fc>
 800f858:	0028      	movs	r0, r5
 800f85a:	6923      	ldr	r3, [r4, #16]
 800f85c:	3020      	adds	r0, #32
 800f85e:	61ab      	str	r3, [r5, #24]
 800f860:	6963      	ldr	r3, [r4, #20]
 800f862:	3418      	adds	r4, #24
 800f864:	61eb      	str	r3, [r5, #28]
 800f866:	e7e5      	b.n	800f834 <_realloc_r+0x1fc>
 800f868:	0021      	movs	r1, r4
 800f86a:	f001 fb7c 	bl	8010f66 <memmove>
 800f86e:	e7e7      	b.n	800f840 <_realloc_r+0x208>
 800f870:	9b00      	ldr	r3, [sp, #0]
 800f872:	42bb      	cmp	r3, r7
 800f874:	dc31      	bgt.n	800f8da <_realloc_r+0x2a2>
 800f876:	0028      	movs	r0, r5
 800f878:	68aa      	ldr	r2, [r5, #8]
 800f87a:	68eb      	ldr	r3, [r5, #12]
 800f87c:	3008      	adds	r0, #8
 800f87e:	60d3      	str	r3, [r2, #12]
 800f880:	609a      	str	r2, [r3, #8]
 800f882:	9a03      	ldr	r2, [sp, #12]
 800f884:	3a04      	subs	r2, #4
 800f886:	2a24      	cmp	r2, #36	; 0x24
 800f888:	d823      	bhi.n	800f8d2 <_realloc_r+0x29a>
 800f88a:	2a13      	cmp	r2, #19
 800f88c:	d907      	bls.n	800f89e <_realloc_r+0x266>
 800f88e:	6823      	ldr	r3, [r4, #0]
 800f890:	60ab      	str	r3, [r5, #8]
 800f892:	6863      	ldr	r3, [r4, #4]
 800f894:	60eb      	str	r3, [r5, #12]
 800f896:	2a1b      	cmp	r2, #27
 800f898:	d809      	bhi.n	800f8ae <_realloc_r+0x276>
 800f89a:	3408      	adds	r4, #8
 800f89c:	3008      	adds	r0, #8
 800f89e:	6823      	ldr	r3, [r4, #0]
 800f8a0:	6003      	str	r3, [r0, #0]
 800f8a2:	6863      	ldr	r3, [r4, #4]
 800f8a4:	6043      	str	r3, [r0, #4]
 800f8a6:	68a3      	ldr	r3, [r4, #8]
 800f8a8:	6083      	str	r3, [r0, #8]
 800f8aa:	003e      	movs	r6, r7
 800f8ac:	e7c8      	b.n	800f840 <_realloc_r+0x208>
 800f8ae:	68a3      	ldr	r3, [r4, #8]
 800f8b0:	612b      	str	r3, [r5, #16]
 800f8b2:	68e3      	ldr	r3, [r4, #12]
 800f8b4:	616b      	str	r3, [r5, #20]
 800f8b6:	2a24      	cmp	r2, #36	; 0x24
 800f8b8:	d003      	beq.n	800f8c2 <_realloc_r+0x28a>
 800f8ba:	0028      	movs	r0, r5
 800f8bc:	3410      	adds	r4, #16
 800f8be:	3018      	adds	r0, #24
 800f8c0:	e7ed      	b.n	800f89e <_realloc_r+0x266>
 800f8c2:	0028      	movs	r0, r5
 800f8c4:	6923      	ldr	r3, [r4, #16]
 800f8c6:	3020      	adds	r0, #32
 800f8c8:	61ab      	str	r3, [r5, #24]
 800f8ca:	6963      	ldr	r3, [r4, #20]
 800f8cc:	3418      	adds	r4, #24
 800f8ce:	61eb      	str	r3, [r5, #28]
 800f8d0:	e7e5      	b.n	800f89e <_realloc_r+0x266>
 800f8d2:	0021      	movs	r1, r4
 800f8d4:	f001 fb47 	bl	8010f66 <memmove>
 800f8d8:	e7e7      	b.n	800f8aa <_realloc_r+0x272>
 800f8da:	9905      	ldr	r1, [sp, #20]
 800f8dc:	9801      	ldr	r0, [sp, #4]
 800f8de:	f7f9 fced 	bl	80092bc <_malloc_r>
 800f8e2:	1e07      	subs	r7, r0, #0
 800f8e4:	d100      	bne.n	800f8e8 <_realloc_r+0x2b0>
 800f8e6:	e76f      	b.n	800f7c8 <_realloc_r+0x190>
 800f8e8:	0023      	movs	r3, r4
 800f8ea:	2201      	movs	r2, #1
 800f8ec:	3b08      	subs	r3, #8
 800f8ee:	685b      	ldr	r3, [r3, #4]
 800f8f0:	4393      	bics	r3, r2
 800f8f2:	9a04      	ldr	r2, [sp, #16]
 800f8f4:	18d3      	adds	r3, r2, r3
 800f8f6:	0002      	movs	r2, r0
 800f8f8:	3a08      	subs	r2, #8
 800f8fa:	4293      	cmp	r3, r2
 800f8fc:	d105      	bne.n	800f90a <_realloc_r+0x2d2>
 800f8fe:	685e      	ldr	r6, [r3, #4]
 800f900:	2303      	movs	r3, #3
 800f902:	439e      	bics	r6, r3
 800f904:	9b03      	ldr	r3, [sp, #12]
 800f906:	18f6      	adds	r6, r6, r3
 800f908:	e6fb      	b.n	800f702 <_realloc_r+0xca>
 800f90a:	9a03      	ldr	r2, [sp, #12]
 800f90c:	3a04      	subs	r2, #4
 800f90e:	2a24      	cmp	r2, #36	; 0x24
 800f910:	d829      	bhi.n	800f966 <_realloc_r+0x32e>
 800f912:	0003      	movs	r3, r0
 800f914:	0021      	movs	r1, r4
 800f916:	2a13      	cmp	r2, #19
 800f918:	d908      	bls.n	800f92c <_realloc_r+0x2f4>
 800f91a:	6823      	ldr	r3, [r4, #0]
 800f91c:	6003      	str	r3, [r0, #0]
 800f91e:	6863      	ldr	r3, [r4, #4]
 800f920:	6043      	str	r3, [r0, #4]
 800f922:	2a1b      	cmp	r2, #27
 800f924:	d80d      	bhi.n	800f942 <_realloc_r+0x30a>
 800f926:	0003      	movs	r3, r0
 800f928:	3108      	adds	r1, #8
 800f92a:	3308      	adds	r3, #8
 800f92c:	680a      	ldr	r2, [r1, #0]
 800f92e:	601a      	str	r2, [r3, #0]
 800f930:	684a      	ldr	r2, [r1, #4]
 800f932:	605a      	str	r2, [r3, #4]
 800f934:	688a      	ldr	r2, [r1, #8]
 800f936:	609a      	str	r2, [r3, #8]
 800f938:	0021      	movs	r1, r4
 800f93a:	9801      	ldr	r0, [sp, #4]
 800f93c:	f7fb f89e 	bl	800aa7c <_free_r>
 800f940:	e742      	b.n	800f7c8 <_realloc_r+0x190>
 800f942:	68a3      	ldr	r3, [r4, #8]
 800f944:	6083      	str	r3, [r0, #8]
 800f946:	68e3      	ldr	r3, [r4, #12]
 800f948:	60c3      	str	r3, [r0, #12]
 800f94a:	2a24      	cmp	r2, #36	; 0x24
 800f94c:	d003      	beq.n	800f956 <_realloc_r+0x31e>
 800f94e:	0003      	movs	r3, r0
 800f950:	3110      	adds	r1, #16
 800f952:	3310      	adds	r3, #16
 800f954:	e7ea      	b.n	800f92c <_realloc_r+0x2f4>
 800f956:	6923      	ldr	r3, [r4, #16]
 800f958:	3118      	adds	r1, #24
 800f95a:	6103      	str	r3, [r0, #16]
 800f95c:	0003      	movs	r3, r0
 800f95e:	6962      	ldr	r2, [r4, #20]
 800f960:	3318      	adds	r3, #24
 800f962:	6142      	str	r2, [r0, #20]
 800f964:	e7e2      	b.n	800f92c <_realloc_r+0x2f4>
 800f966:	0021      	movs	r1, r4
 800f968:	f001 fafd 	bl	8010f66 <memmove>
 800f96c:	e7e4      	b.n	800f938 <_realloc_r+0x300>
 800f96e:	9e03      	ldr	r6, [sp, #12]
 800f970:	e6c7      	b.n	800f702 <_realloc_r+0xca>
 800f972:	9902      	ldr	r1, [sp, #8]
 800f974:	4306      	orrs	r6, r0
 800f976:	604e      	str	r6, [r1, #4]
 800f978:	6851      	ldr	r1, [r2, #4]
 800f97a:	430b      	orrs	r3, r1
 800f97c:	6053      	str	r3, [r2, #4]
 800f97e:	e6da      	b.n	800f736 <_realloc_r+0xfe>
 800f980:	20000038 	.word	0x20000038

0800f984 <_strtoul_l.constprop.0>:
 800f984:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f986:	b087      	sub	sp, #28
 800f988:	9202      	str	r2, [sp, #8]
 800f98a:	4a3e      	ldr	r2, [pc, #248]	; (800fa84 <_strtoul_l.constprop.0+0x100>)
 800f98c:	001e      	movs	r6, r3
 800f98e:	9101      	str	r1, [sp, #4]
 800f990:	000b      	movs	r3, r1
 800f992:	4694      	mov	ip, r2
 800f994:	2108      	movs	r1, #8
 800f996:	9005      	str	r0, [sp, #20]
 800f998:	001a      	movs	r2, r3
 800f99a:	4660      	mov	r0, ip
 800f99c:	7814      	ldrb	r4, [r2, #0]
 800f99e:	3301      	adds	r3, #1
 800f9a0:	5d00      	ldrb	r0, [r0, r4]
 800f9a2:	001d      	movs	r5, r3
 800f9a4:	0007      	movs	r7, r0
 800f9a6:	400f      	ands	r7, r1
 800f9a8:	4208      	tst	r0, r1
 800f9aa:	d1f5      	bne.n	800f998 <_strtoul_l.constprop.0+0x14>
 800f9ac:	2c2d      	cmp	r4, #45	; 0x2d
 800f9ae:	d13d      	bne.n	800fa2c <_strtoul_l.constprop.0+0xa8>
 800f9b0:	2701      	movs	r7, #1
 800f9b2:	781c      	ldrb	r4, [r3, #0]
 800f9b4:	1c95      	adds	r5, r2, #2
 800f9b6:	2e00      	cmp	r6, #0
 800f9b8:	d05f      	beq.n	800fa7a <_strtoul_l.constprop.0+0xf6>
 800f9ba:	2e10      	cmp	r6, #16
 800f9bc:	d109      	bne.n	800f9d2 <_strtoul_l.constprop.0+0x4e>
 800f9be:	2c30      	cmp	r4, #48	; 0x30
 800f9c0:	d107      	bne.n	800f9d2 <_strtoul_l.constprop.0+0x4e>
 800f9c2:	2220      	movs	r2, #32
 800f9c4:	782b      	ldrb	r3, [r5, #0]
 800f9c6:	4393      	bics	r3, r2
 800f9c8:	2b58      	cmp	r3, #88	; 0x58
 800f9ca:	d151      	bne.n	800fa70 <_strtoul_l.constprop.0+0xec>
 800f9cc:	2610      	movs	r6, #16
 800f9ce:	786c      	ldrb	r4, [r5, #1]
 800f9d0:	3502      	adds	r5, #2
 800f9d2:	2001      	movs	r0, #1
 800f9d4:	0031      	movs	r1, r6
 800f9d6:	4240      	negs	r0, r0
 800f9d8:	f7f0 fbb0 	bl	800013c <__udivsi3>
 800f9dc:	9003      	str	r0, [sp, #12]
 800f9de:	2001      	movs	r0, #1
 800f9e0:	0031      	movs	r1, r6
 800f9e2:	4240      	negs	r0, r0
 800f9e4:	f7f0 fc30 	bl	8000248 <__aeabi_uidivmod>
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	2201      	movs	r2, #1
 800f9ec:	9104      	str	r1, [sp, #16]
 800f9ee:	2101      	movs	r1, #1
 800f9f0:	0018      	movs	r0, r3
 800f9f2:	4694      	mov	ip, r2
 800f9f4:	4249      	negs	r1, r1
 800f9f6:	0022      	movs	r2, r4
 800f9f8:	3a30      	subs	r2, #48	; 0x30
 800f9fa:	2a09      	cmp	r2, #9
 800f9fc:	d903      	bls.n	800fa06 <_strtoul_l.constprop.0+0x82>
 800f9fe:	3a11      	subs	r2, #17
 800fa00:	2a19      	cmp	r2, #25
 800fa02:	d818      	bhi.n	800fa36 <_strtoul_l.constprop.0+0xb2>
 800fa04:	320a      	adds	r2, #10
 800fa06:	4296      	cmp	r6, r2
 800fa08:	dd19      	ble.n	800fa3e <_strtoul_l.constprop.0+0xba>
 800fa0a:	1c5c      	adds	r4, r3, #1
 800fa0c:	d00b      	beq.n	800fa26 <_strtoul_l.constprop.0+0xa2>
 800fa0e:	9c03      	ldr	r4, [sp, #12]
 800fa10:	000b      	movs	r3, r1
 800fa12:	4284      	cmp	r4, r0
 800fa14:	d307      	bcc.n	800fa26 <_strtoul_l.constprop.0+0xa2>
 800fa16:	d103      	bne.n	800fa20 <_strtoul_l.constprop.0+0x9c>
 800fa18:	9c04      	ldr	r4, [sp, #16]
 800fa1a:	000b      	movs	r3, r1
 800fa1c:	4294      	cmp	r4, r2
 800fa1e:	db02      	blt.n	800fa26 <_strtoul_l.constprop.0+0xa2>
 800fa20:	4663      	mov	r3, ip
 800fa22:	4370      	muls	r0, r6
 800fa24:	1810      	adds	r0, r2, r0
 800fa26:	782c      	ldrb	r4, [r5, #0]
 800fa28:	3501      	adds	r5, #1
 800fa2a:	e7e4      	b.n	800f9f6 <_strtoul_l.constprop.0+0x72>
 800fa2c:	2c2b      	cmp	r4, #43	; 0x2b
 800fa2e:	d1c2      	bne.n	800f9b6 <_strtoul_l.constprop.0+0x32>
 800fa30:	781c      	ldrb	r4, [r3, #0]
 800fa32:	1c95      	adds	r5, r2, #2
 800fa34:	e7bf      	b.n	800f9b6 <_strtoul_l.constprop.0+0x32>
 800fa36:	0022      	movs	r2, r4
 800fa38:	3a61      	subs	r2, #97	; 0x61
 800fa3a:	2a19      	cmp	r2, #25
 800fa3c:	d9e2      	bls.n	800fa04 <_strtoul_l.constprop.0+0x80>
 800fa3e:	1c5a      	adds	r2, r3, #1
 800fa40:	d108      	bne.n	800fa54 <_strtoul_l.constprop.0+0xd0>
 800fa42:	2222      	movs	r2, #34	; 0x22
 800fa44:	9905      	ldr	r1, [sp, #20]
 800fa46:	0018      	movs	r0, r3
 800fa48:	600a      	str	r2, [r1, #0]
 800fa4a:	9a02      	ldr	r2, [sp, #8]
 800fa4c:	2a00      	cmp	r2, #0
 800fa4e:	d109      	bne.n	800fa64 <_strtoul_l.constprop.0+0xe0>
 800fa50:	b007      	add	sp, #28
 800fa52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa54:	2f00      	cmp	r7, #0
 800fa56:	d000      	beq.n	800fa5a <_strtoul_l.constprop.0+0xd6>
 800fa58:	4240      	negs	r0, r0
 800fa5a:	9a02      	ldr	r2, [sp, #8]
 800fa5c:	2a00      	cmp	r2, #0
 800fa5e:	d0f7      	beq.n	800fa50 <_strtoul_l.constprop.0+0xcc>
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d001      	beq.n	800fa68 <_strtoul_l.constprop.0+0xe4>
 800fa64:	1e6b      	subs	r3, r5, #1
 800fa66:	9301      	str	r3, [sp, #4]
 800fa68:	9b02      	ldr	r3, [sp, #8]
 800fa6a:	9a01      	ldr	r2, [sp, #4]
 800fa6c:	601a      	str	r2, [r3, #0]
 800fa6e:	e7ef      	b.n	800fa50 <_strtoul_l.constprop.0+0xcc>
 800fa70:	2430      	movs	r4, #48	; 0x30
 800fa72:	2e00      	cmp	r6, #0
 800fa74:	d1ad      	bne.n	800f9d2 <_strtoul_l.constprop.0+0x4e>
 800fa76:	3608      	adds	r6, #8
 800fa78:	e7ab      	b.n	800f9d2 <_strtoul_l.constprop.0+0x4e>
 800fa7a:	2c30      	cmp	r4, #48	; 0x30
 800fa7c:	d0a1      	beq.n	800f9c2 <_strtoul_l.constprop.0+0x3e>
 800fa7e:	260a      	movs	r6, #10
 800fa80:	e7a7      	b.n	800f9d2 <_strtoul_l.constprop.0+0x4e>
 800fa82:	46c0      	nop			; (mov r8, r8)
 800fa84:	08012b89 	.word	0x08012b89

0800fa88 <_strtoul_r>:
 800fa88:	b510      	push	{r4, lr}
 800fa8a:	f7ff ff7b 	bl	800f984 <_strtoul_l.constprop.0>
 800fa8e:	bd10      	pop	{r4, pc}

0800fa90 <_strtoll_l.constprop.0>:
 800fa90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa92:	b08d      	sub	sp, #52	; 0x34
 800fa94:	9203      	str	r2, [sp, #12]
 800fa96:	4a53      	ldr	r2, [pc, #332]	; (800fbe4 <_strtoll_l.constprop.0+0x154>)
 800fa98:	001e      	movs	r6, r3
 800fa9a:	9102      	str	r1, [sp, #8]
 800fa9c:	000b      	movs	r3, r1
 800fa9e:	4694      	mov	ip, r2
 800faa0:	2108      	movs	r1, #8
 800faa2:	900a      	str	r0, [sp, #40]	; 0x28
 800faa4:	001a      	movs	r2, r3
 800faa6:	4660      	mov	r0, ip
 800faa8:	7814      	ldrb	r4, [r2, #0]
 800faaa:	3301      	adds	r3, #1
 800faac:	5d00      	ldrb	r0, [r0, r4]
 800faae:	001d      	movs	r5, r3
 800fab0:	0007      	movs	r7, r0
 800fab2:	400f      	ands	r7, r1
 800fab4:	4208      	tst	r0, r1
 800fab6:	d1f5      	bne.n	800faa4 <_strtoll_l.constprop.0+0x14>
 800fab8:	2c2d      	cmp	r4, #45	; 0x2d
 800faba:	d153      	bne.n	800fb64 <_strtoll_l.constprop.0+0xd4>
 800fabc:	781c      	ldrb	r4, [r3, #0]
 800fabe:	2301      	movs	r3, #1
 800fac0:	1c95      	adds	r5, r2, #2
 800fac2:	9301      	str	r3, [sp, #4]
 800fac4:	2e00      	cmp	r6, #0
 800fac6:	d100      	bne.n	800faca <_strtoll_l.constprop.0+0x3a>
 800fac8:	e086      	b.n	800fbd8 <_strtoll_l.constprop.0+0x148>
 800faca:	2e10      	cmp	r6, #16
 800facc:	d10a      	bne.n	800fae4 <_strtoll_l.constprop.0+0x54>
 800face:	2c30      	cmp	r4, #48	; 0x30
 800fad0:	d108      	bne.n	800fae4 <_strtoll_l.constprop.0+0x54>
 800fad2:	2220      	movs	r2, #32
 800fad4:	782b      	ldrb	r3, [r5, #0]
 800fad6:	4393      	bics	r3, r2
 800fad8:	2b58      	cmp	r3, #88	; 0x58
 800fada:	d000      	beq.n	800fade <_strtoll_l.constprop.0+0x4e>
 800fadc:	e076      	b.n	800fbcc <_strtoll_l.constprop.0+0x13c>
 800fade:	2610      	movs	r6, #16
 800fae0:	786c      	ldrb	r4, [r5, #1]
 800fae2:	3502      	adds	r5, #2
 800fae4:	2001      	movs	r0, #1
 800fae6:	2300      	movs	r3, #0
 800fae8:	493f      	ldr	r1, [pc, #252]	; (800fbe8 <_strtoll_l.constprop.0+0x158>)
 800faea:	9a01      	ldr	r2, [sp, #4]
 800faec:	4240      	negs	r0, r0
 800faee:	1812      	adds	r2, r2, r0
 800faf0:	414b      	adcs	r3, r1
 800faf2:	9204      	str	r2, [sp, #16]
 800faf4:	9305      	str	r3, [sp, #20]
 800faf6:	9804      	ldr	r0, [sp, #16]
 800faf8:	9905      	ldr	r1, [sp, #20]
 800fafa:	17f3      	asrs	r3, r6, #31
 800fafc:	0032      	movs	r2, r6
 800fafe:	930b      	str	r3, [sp, #44]	; 0x2c
 800fb00:	f7f0 fcd0 	bl	80004a4 <__aeabi_uldivmod>
 800fb04:	2300      	movs	r3, #0
 800fb06:	000f      	movs	r7, r1
 800fb08:	9008      	str	r0, [sp, #32]
 800fb0a:	2100      	movs	r1, #0
 800fb0c:	2000      	movs	r0, #0
 800fb0e:	9209      	str	r2, [sp, #36]	; 0x24
 800fb10:	0022      	movs	r2, r4
 800fb12:	3a30      	subs	r2, #48	; 0x30
 800fb14:	2a09      	cmp	r2, #9
 800fb16:	d82b      	bhi.n	800fb70 <_strtoll_l.constprop.0+0xe0>
 800fb18:	0014      	movs	r4, r2
 800fb1a:	42a6      	cmp	r6, r4
 800fb1c:	dd37      	ble.n	800fb8e <_strtoll_l.constprop.0+0xfe>
 800fb1e:	1c5a      	adds	r2, r3, #1
 800fb20:	d01d      	beq.n	800fb5e <_strtoll_l.constprop.0+0xce>
 800fb22:	42b9      	cmp	r1, r7
 800fb24:	d830      	bhi.n	800fb88 <_strtoll_l.constprop.0+0xf8>
 800fb26:	d102      	bne.n	800fb2e <_strtoll_l.constprop.0+0x9e>
 800fb28:	9b08      	ldr	r3, [sp, #32]
 800fb2a:	4298      	cmp	r0, r3
 800fb2c:	d82c      	bhi.n	800fb88 <_strtoll_l.constprop.0+0xf8>
 800fb2e:	9b08      	ldr	r3, [sp, #32]
 800fb30:	4283      	cmp	r3, r0
 800fb32:	d106      	bne.n	800fb42 <_strtoll_l.constprop.0+0xb2>
 800fb34:	428f      	cmp	r7, r1
 800fb36:	d104      	bne.n	800fb42 <_strtoll_l.constprop.0+0xb2>
 800fb38:	2301      	movs	r3, #1
 800fb3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb3c:	425b      	negs	r3, r3
 800fb3e:	42a2      	cmp	r2, r4
 800fb40:	db0d      	blt.n	800fb5e <_strtoll_l.constprop.0+0xce>
 800fb42:	000b      	movs	r3, r1
 800fb44:	0002      	movs	r2, r0
 800fb46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fb48:	0030      	movs	r0, r6
 800fb4a:	f7f0 fccb 	bl	80004e4 <__aeabi_lmul>
 800fb4e:	17e3      	asrs	r3, r4, #31
 800fb50:	9406      	str	r4, [sp, #24]
 800fb52:	9307      	str	r3, [sp, #28]
 800fb54:	9b06      	ldr	r3, [sp, #24]
 800fb56:	9c07      	ldr	r4, [sp, #28]
 800fb58:	18c0      	adds	r0, r0, r3
 800fb5a:	4161      	adcs	r1, r4
 800fb5c:	2301      	movs	r3, #1
 800fb5e:	782c      	ldrb	r4, [r5, #0]
 800fb60:	3501      	adds	r5, #1
 800fb62:	e7d5      	b.n	800fb10 <_strtoll_l.constprop.0+0x80>
 800fb64:	9701      	str	r7, [sp, #4]
 800fb66:	2c2b      	cmp	r4, #43	; 0x2b
 800fb68:	d1ac      	bne.n	800fac4 <_strtoll_l.constprop.0+0x34>
 800fb6a:	781c      	ldrb	r4, [r3, #0]
 800fb6c:	1c95      	adds	r5, r2, #2
 800fb6e:	e7a9      	b.n	800fac4 <_strtoll_l.constprop.0+0x34>
 800fb70:	0022      	movs	r2, r4
 800fb72:	3a41      	subs	r2, #65	; 0x41
 800fb74:	2a19      	cmp	r2, #25
 800fb76:	d801      	bhi.n	800fb7c <_strtoll_l.constprop.0+0xec>
 800fb78:	3c37      	subs	r4, #55	; 0x37
 800fb7a:	e7ce      	b.n	800fb1a <_strtoll_l.constprop.0+0x8a>
 800fb7c:	0022      	movs	r2, r4
 800fb7e:	3a61      	subs	r2, #97	; 0x61
 800fb80:	2a19      	cmp	r2, #25
 800fb82:	d804      	bhi.n	800fb8e <_strtoll_l.constprop.0+0xfe>
 800fb84:	3c57      	subs	r4, #87	; 0x57
 800fb86:	e7c8      	b.n	800fb1a <_strtoll_l.constprop.0+0x8a>
 800fb88:	2301      	movs	r3, #1
 800fb8a:	425b      	negs	r3, r3
 800fb8c:	e7e7      	b.n	800fb5e <_strtoll_l.constprop.0+0xce>
 800fb8e:	1c5a      	adds	r2, r3, #1
 800fb90:	d109      	bne.n	800fba6 <_strtoll_l.constprop.0+0x116>
 800fb92:	9804      	ldr	r0, [sp, #16]
 800fb94:	9905      	ldr	r1, [sp, #20]
 800fb96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fb98:	3323      	adds	r3, #35	; 0x23
 800fb9a:	6013      	str	r3, [r2, #0]
 800fb9c:	9b03      	ldr	r3, [sp, #12]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d10e      	bne.n	800fbc0 <_strtoll_l.constprop.0+0x130>
 800fba2:	b00d      	add	sp, #52	; 0x34
 800fba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fba6:	9a01      	ldr	r2, [sp, #4]
 800fba8:	2a00      	cmp	r2, #0
 800fbaa:	d004      	beq.n	800fbb6 <_strtoll_l.constprop.0+0x126>
 800fbac:	0006      	movs	r6, r0
 800fbae:	000f      	movs	r7, r1
 800fbb0:	2100      	movs	r1, #0
 800fbb2:	4270      	negs	r0, r6
 800fbb4:	41b9      	sbcs	r1, r7
 800fbb6:	9a03      	ldr	r2, [sp, #12]
 800fbb8:	2a00      	cmp	r2, #0
 800fbba:	d0f2      	beq.n	800fba2 <_strtoll_l.constprop.0+0x112>
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d001      	beq.n	800fbc4 <_strtoll_l.constprop.0+0x134>
 800fbc0:	1e6b      	subs	r3, r5, #1
 800fbc2:	9302      	str	r3, [sp, #8]
 800fbc4:	9b03      	ldr	r3, [sp, #12]
 800fbc6:	9a02      	ldr	r2, [sp, #8]
 800fbc8:	601a      	str	r2, [r3, #0]
 800fbca:	e7ea      	b.n	800fba2 <_strtoll_l.constprop.0+0x112>
 800fbcc:	2430      	movs	r4, #48	; 0x30
 800fbce:	2e00      	cmp	r6, #0
 800fbd0:	d000      	beq.n	800fbd4 <_strtoll_l.constprop.0+0x144>
 800fbd2:	e787      	b.n	800fae4 <_strtoll_l.constprop.0+0x54>
 800fbd4:	3608      	adds	r6, #8
 800fbd6:	e785      	b.n	800fae4 <_strtoll_l.constprop.0+0x54>
 800fbd8:	2c30      	cmp	r4, #48	; 0x30
 800fbda:	d100      	bne.n	800fbde <_strtoll_l.constprop.0+0x14e>
 800fbdc:	e779      	b.n	800fad2 <_strtoll_l.constprop.0+0x42>
 800fbde:	260a      	movs	r6, #10
 800fbe0:	e780      	b.n	800fae4 <_strtoll_l.constprop.0+0x54>
 800fbe2:	46c0      	nop			; (mov r8, r8)
 800fbe4:	08012b89 	.word	0x08012b89
 800fbe8:	7fffffff 	.word	0x7fffffff

0800fbec <_strtoll_r>:
 800fbec:	b510      	push	{r4, lr}
 800fbee:	f7ff ff4f 	bl	800fa90 <_strtoll_l.constprop.0>
 800fbf2:	bd10      	pop	{r4, pc}

0800fbf4 <_strtoull_l.constprop.0>:
 800fbf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbf6:	b08b      	sub	sp, #44	; 0x2c
 800fbf8:	9202      	str	r2, [sp, #8]
 800fbfa:	4a54      	ldr	r2, [pc, #336]	; (800fd4c <_strtoull_l.constprop.0+0x158>)
 800fbfc:	001e      	movs	r6, r3
 800fbfe:	9101      	str	r1, [sp, #4]
 800fc00:	000b      	movs	r3, r1
 800fc02:	4694      	mov	ip, r2
 800fc04:	2108      	movs	r1, #8
 800fc06:	9009      	str	r0, [sp, #36]	; 0x24
 800fc08:	001a      	movs	r2, r3
 800fc0a:	4660      	mov	r0, ip
 800fc0c:	7814      	ldrb	r4, [r2, #0]
 800fc0e:	3301      	adds	r3, #1
 800fc10:	5d00      	ldrb	r0, [r0, r4]
 800fc12:	001d      	movs	r5, r3
 800fc14:	0007      	movs	r7, r0
 800fc16:	400f      	ands	r7, r1
 800fc18:	4208      	tst	r0, r1
 800fc1a:	d1f5      	bne.n	800fc08 <_strtoull_l.constprop.0+0x14>
 800fc1c:	2c2d      	cmp	r4, #45	; 0x2d
 800fc1e:	d154      	bne.n	800fcca <_strtoull_l.constprop.0+0xd6>
 800fc20:	781c      	ldrb	r4, [r3, #0]
 800fc22:	2301      	movs	r3, #1
 800fc24:	1c95      	adds	r5, r2, #2
 800fc26:	9306      	str	r3, [sp, #24]
 800fc28:	2e00      	cmp	r6, #0
 800fc2a:	d100      	bne.n	800fc2e <_strtoull_l.constprop.0+0x3a>
 800fc2c:	e088      	b.n	800fd40 <_strtoull_l.constprop.0+0x14c>
 800fc2e:	2e10      	cmp	r6, #16
 800fc30:	d10a      	bne.n	800fc48 <_strtoull_l.constprop.0+0x54>
 800fc32:	2c30      	cmp	r4, #48	; 0x30
 800fc34:	d108      	bne.n	800fc48 <_strtoull_l.constprop.0+0x54>
 800fc36:	2220      	movs	r2, #32
 800fc38:	782b      	ldrb	r3, [r5, #0]
 800fc3a:	4393      	bics	r3, r2
 800fc3c:	2b58      	cmp	r3, #88	; 0x58
 800fc3e:	d000      	beq.n	800fc42 <_strtoull_l.constprop.0+0x4e>
 800fc40:	e078      	b.n	800fd34 <_strtoull_l.constprop.0+0x140>
 800fc42:	2610      	movs	r6, #16
 800fc44:	786c      	ldrb	r4, [r5, #1]
 800fc46:	3502      	adds	r5, #2
 800fc48:	17f7      	asrs	r7, r6, #31
 800fc4a:	0032      	movs	r2, r6
 800fc4c:	003b      	movs	r3, r7
 800fc4e:	2001      	movs	r0, #1
 800fc50:	4240      	negs	r0, r0
 800fc52:	17c1      	asrs	r1, r0, #31
 800fc54:	f7f0 fc26 	bl	80004a4 <__aeabi_uldivmod>
 800fc58:	0032      	movs	r2, r6
 800fc5a:	9007      	str	r0, [sp, #28]
 800fc5c:	9103      	str	r1, [sp, #12]
 800fc5e:	003b      	movs	r3, r7
 800fc60:	2001      	movs	r0, #1
 800fc62:	4240      	negs	r0, r0
 800fc64:	17c1      	asrs	r1, r0, #31
 800fc66:	f7f0 fc1d 	bl	80004a4 <__aeabi_uldivmod>
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	2000      	movs	r0, #0
 800fc6e:	2100      	movs	r1, #0
 800fc70:	9208      	str	r2, [sp, #32]
 800fc72:	0022      	movs	r2, r4
 800fc74:	3a30      	subs	r2, #48	; 0x30
 800fc76:	2a09      	cmp	r2, #9
 800fc78:	d82d      	bhi.n	800fcd6 <_strtoull_l.constprop.0+0xe2>
 800fc7a:	0014      	movs	r4, r2
 800fc7c:	42a6      	cmp	r6, r4
 800fc7e:	dd39      	ble.n	800fcf4 <_strtoull_l.constprop.0+0x100>
 800fc80:	1c5a      	adds	r2, r3, #1
 800fc82:	d01f      	beq.n	800fcc4 <_strtoull_l.constprop.0+0xd0>
 800fc84:	9b03      	ldr	r3, [sp, #12]
 800fc86:	4299      	cmp	r1, r3
 800fc88:	d831      	bhi.n	800fcee <_strtoull_l.constprop.0+0xfa>
 800fc8a:	d102      	bne.n	800fc92 <_strtoull_l.constprop.0+0x9e>
 800fc8c:	9b07      	ldr	r3, [sp, #28]
 800fc8e:	4298      	cmp	r0, r3
 800fc90:	d82d      	bhi.n	800fcee <_strtoull_l.constprop.0+0xfa>
 800fc92:	9b07      	ldr	r3, [sp, #28]
 800fc94:	4283      	cmp	r3, r0
 800fc96:	d107      	bne.n	800fca8 <_strtoull_l.constprop.0+0xb4>
 800fc98:	9b03      	ldr	r3, [sp, #12]
 800fc9a:	428b      	cmp	r3, r1
 800fc9c:	d104      	bne.n	800fca8 <_strtoull_l.constprop.0+0xb4>
 800fc9e:	2301      	movs	r3, #1
 800fca0:	9a08      	ldr	r2, [sp, #32]
 800fca2:	425b      	negs	r3, r3
 800fca4:	42a2      	cmp	r2, r4
 800fca6:	db0d      	blt.n	800fcc4 <_strtoull_l.constprop.0+0xd0>
 800fca8:	000b      	movs	r3, r1
 800fcaa:	0002      	movs	r2, r0
 800fcac:	0039      	movs	r1, r7
 800fcae:	0030      	movs	r0, r6
 800fcb0:	f7f0 fc18 	bl	80004e4 <__aeabi_lmul>
 800fcb4:	17e3      	asrs	r3, r4, #31
 800fcb6:	9404      	str	r4, [sp, #16]
 800fcb8:	9305      	str	r3, [sp, #20]
 800fcba:	9b04      	ldr	r3, [sp, #16]
 800fcbc:	9c05      	ldr	r4, [sp, #20]
 800fcbe:	18c0      	adds	r0, r0, r3
 800fcc0:	4161      	adcs	r1, r4
 800fcc2:	2301      	movs	r3, #1
 800fcc4:	782c      	ldrb	r4, [r5, #0]
 800fcc6:	3501      	adds	r5, #1
 800fcc8:	e7d3      	b.n	800fc72 <_strtoull_l.constprop.0+0x7e>
 800fcca:	9706      	str	r7, [sp, #24]
 800fccc:	2c2b      	cmp	r4, #43	; 0x2b
 800fcce:	d1ab      	bne.n	800fc28 <_strtoull_l.constprop.0+0x34>
 800fcd0:	781c      	ldrb	r4, [r3, #0]
 800fcd2:	1c95      	adds	r5, r2, #2
 800fcd4:	e7a8      	b.n	800fc28 <_strtoull_l.constprop.0+0x34>
 800fcd6:	0022      	movs	r2, r4
 800fcd8:	3a41      	subs	r2, #65	; 0x41
 800fcda:	2a19      	cmp	r2, #25
 800fcdc:	d801      	bhi.n	800fce2 <_strtoull_l.constprop.0+0xee>
 800fcde:	3c37      	subs	r4, #55	; 0x37
 800fce0:	e7cc      	b.n	800fc7c <_strtoull_l.constprop.0+0x88>
 800fce2:	0022      	movs	r2, r4
 800fce4:	3a61      	subs	r2, #97	; 0x61
 800fce6:	2a19      	cmp	r2, #25
 800fce8:	d804      	bhi.n	800fcf4 <_strtoull_l.constprop.0+0x100>
 800fcea:	3c57      	subs	r4, #87	; 0x57
 800fcec:	e7c6      	b.n	800fc7c <_strtoull_l.constprop.0+0x88>
 800fcee:	2301      	movs	r3, #1
 800fcf0:	425b      	negs	r3, r3
 800fcf2:	e7e7      	b.n	800fcc4 <_strtoull_l.constprop.0+0xd0>
 800fcf4:	1c5a      	adds	r2, r3, #1
 800fcf6:	d10a      	bne.n	800fd0e <_strtoull_l.constprop.0+0x11a>
 800fcf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fcfa:	3323      	adds	r3, #35	; 0x23
 800fcfc:	6013      	str	r3, [r2, #0]
 800fcfe:	9b02      	ldr	r3, [sp, #8]
 800fd00:	2001      	movs	r0, #1
 800fd02:	4240      	negs	r0, r0
 800fd04:	17c1      	asrs	r1, r0, #31
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d10e      	bne.n	800fd28 <_strtoull_l.constprop.0+0x134>
 800fd0a:	b00b      	add	sp, #44	; 0x2c
 800fd0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd0e:	9a06      	ldr	r2, [sp, #24]
 800fd10:	2a00      	cmp	r2, #0
 800fd12:	d004      	beq.n	800fd1e <_strtoull_l.constprop.0+0x12a>
 800fd14:	0006      	movs	r6, r0
 800fd16:	000f      	movs	r7, r1
 800fd18:	2100      	movs	r1, #0
 800fd1a:	4270      	negs	r0, r6
 800fd1c:	41b9      	sbcs	r1, r7
 800fd1e:	9a02      	ldr	r2, [sp, #8]
 800fd20:	2a00      	cmp	r2, #0
 800fd22:	d0f2      	beq.n	800fd0a <_strtoull_l.constprop.0+0x116>
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d001      	beq.n	800fd2c <_strtoull_l.constprop.0+0x138>
 800fd28:	1e6b      	subs	r3, r5, #1
 800fd2a:	9301      	str	r3, [sp, #4]
 800fd2c:	9b02      	ldr	r3, [sp, #8]
 800fd2e:	9a01      	ldr	r2, [sp, #4]
 800fd30:	601a      	str	r2, [r3, #0]
 800fd32:	e7ea      	b.n	800fd0a <_strtoull_l.constprop.0+0x116>
 800fd34:	2430      	movs	r4, #48	; 0x30
 800fd36:	2e00      	cmp	r6, #0
 800fd38:	d000      	beq.n	800fd3c <_strtoull_l.constprop.0+0x148>
 800fd3a:	e785      	b.n	800fc48 <_strtoull_l.constprop.0+0x54>
 800fd3c:	3608      	adds	r6, #8
 800fd3e:	e783      	b.n	800fc48 <_strtoull_l.constprop.0+0x54>
 800fd40:	2c30      	cmp	r4, #48	; 0x30
 800fd42:	d100      	bne.n	800fd46 <_strtoull_l.constprop.0+0x152>
 800fd44:	e777      	b.n	800fc36 <_strtoull_l.constprop.0+0x42>
 800fd46:	260a      	movs	r6, #10
 800fd48:	e77e      	b.n	800fc48 <_strtoull_l.constprop.0+0x54>
 800fd4a:	46c0      	nop			; (mov r8, r8)
 800fd4c:	08012b89 	.word	0x08012b89

0800fd50 <_strtoull_r>:
 800fd50:	b510      	push	{r4, lr}
 800fd52:	f7ff ff4f 	bl	800fbf4 <_strtoull_l.constprop.0>
 800fd56:	bd10      	pop	{r4, pc}

0800fd58 <_mbrtowc_r>:
 800fd58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fd5a:	0004      	movs	r4, r0
 800fd5c:	0010      	movs	r0, r2
 800fd5e:	4a0b      	ldr	r2, [pc, #44]	; (800fd8c <_mbrtowc_r+0x34>)
 800fd60:	9d06      	ldr	r5, [sp, #24]
 800fd62:	32e4      	adds	r2, #228	; 0xe4
 800fd64:	6816      	ldr	r6, [r2, #0]
 800fd66:	2800      	cmp	r0, #0
 800fd68:	d10c      	bne.n	800fd84 <_mbrtowc_r+0x2c>
 800fd6a:	2301      	movs	r3, #1
 800fd6c:	0001      	movs	r1, r0
 800fd6e:	4a08      	ldr	r2, [pc, #32]	; (800fd90 <_mbrtowc_r+0x38>)
 800fd70:	9500      	str	r5, [sp, #0]
 800fd72:	0020      	movs	r0, r4
 800fd74:	47b0      	blx	r6
 800fd76:	1c43      	adds	r3, r0, #1
 800fd78:	d103      	bne.n	800fd82 <_mbrtowc_r+0x2a>
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	602b      	str	r3, [r5, #0]
 800fd7e:	338a      	adds	r3, #138	; 0x8a
 800fd80:	6023      	str	r3, [r4, #0]
 800fd82:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800fd84:	0002      	movs	r2, r0
 800fd86:	9500      	str	r5, [sp, #0]
 800fd88:	e7f3      	b.n	800fd72 <_mbrtowc_r+0x1a>
 800fd8a:	46c0      	nop			; (mov r8, r8)
 800fd8c:	20000454 	.word	0x20000454
 800fd90:	08012f13 	.word	0x08012f13

0800fd94 <iswspace>:
 800fd94:	b510      	push	{r4, lr}
 800fd96:	2100      	movs	r1, #0
 800fd98:	f000 f802 	bl	800fda0 <iswspace_l>
 800fd9c:	bd10      	pop	{r4, pc}
	...

0800fda0 <iswspace_l>:
 800fda0:	0003      	movs	r3, r0
 800fda2:	2000      	movs	r0, #0
 800fda4:	2bff      	cmp	r3, #255	; 0xff
 800fda6:	d803      	bhi.n	800fdb0 <iswspace_l+0x10>
 800fda8:	4a02      	ldr	r2, [pc, #8]	; (800fdb4 <iswspace_l+0x14>)
 800fdaa:	5cd0      	ldrb	r0, [r2, r3]
 800fdac:	2308      	movs	r3, #8
 800fdae:	4018      	ands	r0, r3
 800fdb0:	4770      	bx	lr
 800fdb2:	46c0      	nop			; (mov r8, r8)
 800fdb4:	08012b89 	.word	0x08012b89

0800fdb8 <fiprintf>:
 800fdb8:	b40e      	push	{r1, r2, r3}
 800fdba:	b517      	push	{r0, r1, r2, r4, lr}
 800fdbc:	4c05      	ldr	r4, [pc, #20]	; (800fdd4 <fiprintf+0x1c>)
 800fdbe:	ab05      	add	r3, sp, #20
 800fdc0:	cb04      	ldmia	r3!, {r2}
 800fdc2:	0001      	movs	r1, r0
 800fdc4:	6820      	ldr	r0, [r4, #0]
 800fdc6:	9301      	str	r3, [sp, #4]
 800fdc8:	f000 f954 	bl	8010074 <_vfiprintf_r>
 800fdcc:	bc1e      	pop	{r1, r2, r3, r4}
 800fdce:	bc08      	pop	{r3}
 800fdd0:	b003      	add	sp, #12
 800fdd2:	4718      	bx	r3
 800fdd4:	200006e0 	.word	0x200006e0

0800fdd8 <__ssprint_r>:
 800fdd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fdda:	6813      	ldr	r3, [r2, #0]
 800fddc:	b087      	sub	sp, #28
 800fdde:	0017      	movs	r7, r2
 800fde0:	9303      	str	r3, [sp, #12]
 800fde2:	6893      	ldr	r3, [r2, #8]
 800fde4:	2200      	movs	r2, #0
 800fde6:	000c      	movs	r4, r1
 800fde8:	9005      	str	r0, [sp, #20]
 800fdea:	9202      	str	r2, [sp, #8]
 800fdec:	9201      	str	r2, [sp, #4]
 800fdee:	4293      	cmp	r3, r2
 800fdf0:	d10d      	bne.n	800fe0e <__ssprint_r+0x36>
 800fdf2:	2000      	movs	r0, #0
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	607b      	str	r3, [r7, #4]
 800fdf8:	b007      	add	sp, #28
 800fdfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdfc:	9b03      	ldr	r3, [sp, #12]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	9302      	str	r3, [sp, #8]
 800fe02:	9b03      	ldr	r3, [sp, #12]
 800fe04:	685b      	ldr	r3, [r3, #4]
 800fe06:	9301      	str	r3, [sp, #4]
 800fe08:	9b03      	ldr	r3, [sp, #12]
 800fe0a:	3308      	adds	r3, #8
 800fe0c:	9303      	str	r3, [sp, #12]
 800fe0e:	9a01      	ldr	r2, [sp, #4]
 800fe10:	68a6      	ldr	r6, [r4, #8]
 800fe12:	6823      	ldr	r3, [r4, #0]
 800fe14:	2a00      	cmp	r2, #0
 800fe16:	d0f1      	beq.n	800fdfc <__ssprint_r+0x24>
 800fe18:	42b2      	cmp	r2, r6
 800fe1a:	d32e      	bcc.n	800fe7a <__ssprint_r+0xa2>
 800fe1c:	2190      	movs	r1, #144	; 0x90
 800fe1e:	89a2      	ldrh	r2, [r4, #12]
 800fe20:	00c9      	lsls	r1, r1, #3
 800fe22:	420a      	tst	r2, r1
 800fe24:	d029      	beq.n	800fe7a <__ssprint_r+0xa2>
 800fe26:	2003      	movs	r0, #3
 800fe28:	6921      	ldr	r1, [r4, #16]
 800fe2a:	1a5b      	subs	r3, r3, r1
 800fe2c:	9304      	str	r3, [sp, #16]
 800fe2e:	6963      	ldr	r3, [r4, #20]
 800fe30:	4343      	muls	r3, r0
 800fe32:	0fdd      	lsrs	r5, r3, #31
 800fe34:	18ed      	adds	r5, r5, r3
 800fe36:	9b04      	ldr	r3, [sp, #16]
 800fe38:	9801      	ldr	r0, [sp, #4]
 800fe3a:	3301      	adds	r3, #1
 800fe3c:	181b      	adds	r3, r3, r0
 800fe3e:	106d      	asrs	r5, r5, #1
 800fe40:	42ab      	cmp	r3, r5
 800fe42:	d900      	bls.n	800fe46 <__ssprint_r+0x6e>
 800fe44:	001d      	movs	r5, r3
 800fe46:	0552      	lsls	r2, r2, #21
 800fe48:	d532      	bpl.n	800feb0 <__ssprint_r+0xd8>
 800fe4a:	0029      	movs	r1, r5
 800fe4c:	9805      	ldr	r0, [sp, #20]
 800fe4e:	f7f9 fa35 	bl	80092bc <_malloc_r>
 800fe52:	1e06      	subs	r6, r0, #0
 800fe54:	d036      	beq.n	800fec4 <__ssprint_r+0xec>
 800fe56:	9a04      	ldr	r2, [sp, #16]
 800fe58:	6921      	ldr	r1, [r4, #16]
 800fe5a:	f7fa fd94 	bl	800a986 <memcpy>
 800fe5e:	89a2      	ldrh	r2, [r4, #12]
 800fe60:	4b1e      	ldr	r3, [pc, #120]	; (800fedc <__ssprint_r+0x104>)
 800fe62:	401a      	ands	r2, r3
 800fe64:	2380      	movs	r3, #128	; 0x80
 800fe66:	4313      	orrs	r3, r2
 800fe68:	81a3      	strh	r3, [r4, #12]
 800fe6a:	9b04      	ldr	r3, [sp, #16]
 800fe6c:	6126      	str	r6, [r4, #16]
 800fe6e:	18f6      	adds	r6, r6, r3
 800fe70:	6026      	str	r6, [r4, #0]
 800fe72:	6165      	str	r5, [r4, #20]
 800fe74:	9e01      	ldr	r6, [sp, #4]
 800fe76:	1aed      	subs	r5, r5, r3
 800fe78:	60a5      	str	r5, [r4, #8]
 800fe7a:	9b01      	ldr	r3, [sp, #4]
 800fe7c:	429e      	cmp	r6, r3
 800fe7e:	d900      	bls.n	800fe82 <__ssprint_r+0xaa>
 800fe80:	001e      	movs	r6, r3
 800fe82:	0032      	movs	r2, r6
 800fe84:	9902      	ldr	r1, [sp, #8]
 800fe86:	6820      	ldr	r0, [r4, #0]
 800fe88:	f001 f86d 	bl	8010f66 <memmove>
 800fe8c:	9a01      	ldr	r2, [sp, #4]
 800fe8e:	68a3      	ldr	r3, [r4, #8]
 800fe90:	4694      	mov	ip, r2
 800fe92:	1b9b      	subs	r3, r3, r6
 800fe94:	60a3      	str	r3, [r4, #8]
 800fe96:	6823      	ldr	r3, [r4, #0]
 800fe98:	199b      	adds	r3, r3, r6
 800fe9a:	6023      	str	r3, [r4, #0]
 800fe9c:	9b02      	ldr	r3, [sp, #8]
 800fe9e:	4463      	add	r3, ip
 800fea0:	9302      	str	r3, [sp, #8]
 800fea2:	68bb      	ldr	r3, [r7, #8]
 800fea4:	1a9b      	subs	r3, r3, r2
 800fea6:	60bb      	str	r3, [r7, #8]
 800fea8:	d0a3      	beq.n	800fdf2 <__ssprint_r+0x1a>
 800feaa:	2300      	movs	r3, #0
 800feac:	9301      	str	r3, [sp, #4]
 800feae:	e7ae      	b.n	800fe0e <__ssprint_r+0x36>
 800feb0:	002a      	movs	r2, r5
 800feb2:	9805      	ldr	r0, [sp, #20]
 800feb4:	f7ff fbc0 	bl	800f638 <_realloc_r>
 800feb8:	1e06      	subs	r6, r0, #0
 800feba:	d1d6      	bne.n	800fe6a <__ssprint_r+0x92>
 800febc:	6921      	ldr	r1, [r4, #16]
 800febe:	9805      	ldr	r0, [sp, #20]
 800fec0:	f7fa fddc 	bl	800aa7c <_free_r>
 800fec4:	230c      	movs	r3, #12
 800fec6:	9a05      	ldr	r2, [sp, #20]
 800fec8:	2001      	movs	r0, #1
 800feca:	6013      	str	r3, [r2, #0]
 800fecc:	89a2      	ldrh	r2, [r4, #12]
 800fece:	3334      	adds	r3, #52	; 0x34
 800fed0:	4313      	orrs	r3, r2
 800fed2:	81a3      	strh	r3, [r4, #12]
 800fed4:	2300      	movs	r3, #0
 800fed6:	4240      	negs	r0, r0
 800fed8:	60bb      	str	r3, [r7, #8]
 800feda:	e78b      	b.n	800fdf4 <__ssprint_r+0x1c>
 800fedc:	fffffb7f 	.word	0xfffffb7f

0800fee0 <_sungetc_r>:
 800fee0:	b570      	push	{r4, r5, r6, lr}
 800fee2:	0014      	movs	r4, r2
 800fee4:	1c4b      	adds	r3, r1, #1
 800fee6:	d103      	bne.n	800fef0 <_sungetc_r+0x10>
 800fee8:	2501      	movs	r5, #1
 800feea:	426d      	negs	r5, r5
 800feec:	0028      	movs	r0, r5
 800feee:	bd70      	pop	{r4, r5, r6, pc}
 800fef0:	8993      	ldrh	r3, [r2, #12]
 800fef2:	2220      	movs	r2, #32
 800fef4:	4393      	bics	r3, r2
 800fef6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fef8:	81a3      	strh	r3, [r4, #12]
 800fefa:	b2ce      	uxtb	r6, r1
 800fefc:	6863      	ldr	r3, [r4, #4]
 800fefe:	b2cd      	uxtb	r5, r1
 800ff00:	2a00      	cmp	r2, #0
 800ff02:	d010      	beq.n	800ff26 <_sungetc_r+0x46>
 800ff04:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800ff06:	429a      	cmp	r2, r3
 800ff08:	dd07      	ble.n	800ff1a <_sungetc_r+0x3a>
 800ff0a:	6823      	ldr	r3, [r4, #0]
 800ff0c:	3b01      	subs	r3, #1
 800ff0e:	6023      	str	r3, [r4, #0]
 800ff10:	701e      	strb	r6, [r3, #0]
 800ff12:	6863      	ldr	r3, [r4, #4]
 800ff14:	3301      	adds	r3, #1
 800ff16:	6063      	str	r3, [r4, #4]
 800ff18:	e7e8      	b.n	800feec <_sungetc_r+0xc>
 800ff1a:	0021      	movs	r1, r4
 800ff1c:	f000 ff1a 	bl	8010d54 <__submore>
 800ff20:	2800      	cmp	r0, #0
 800ff22:	d0f2      	beq.n	800ff0a <_sungetc_r+0x2a>
 800ff24:	e7e0      	b.n	800fee8 <_sungetc_r+0x8>
 800ff26:	6921      	ldr	r1, [r4, #16]
 800ff28:	6822      	ldr	r2, [r4, #0]
 800ff2a:	2900      	cmp	r1, #0
 800ff2c:	d007      	beq.n	800ff3e <_sungetc_r+0x5e>
 800ff2e:	4291      	cmp	r1, r2
 800ff30:	d205      	bcs.n	800ff3e <_sungetc_r+0x5e>
 800ff32:	1e51      	subs	r1, r2, #1
 800ff34:	7808      	ldrb	r0, [r1, #0]
 800ff36:	42a8      	cmp	r0, r5
 800ff38:	d101      	bne.n	800ff3e <_sungetc_r+0x5e>
 800ff3a:	6021      	str	r1, [r4, #0]
 800ff3c:	e7ea      	b.n	800ff14 <_sungetc_r+0x34>
 800ff3e:	63e3      	str	r3, [r4, #60]	; 0x3c
 800ff40:	0023      	movs	r3, r4
 800ff42:	3340      	adds	r3, #64	; 0x40
 800ff44:	6323      	str	r3, [r4, #48]	; 0x30
 800ff46:	2303      	movs	r3, #3
 800ff48:	6363      	str	r3, [r4, #52]	; 0x34
 800ff4a:	0023      	movs	r3, r4
 800ff4c:	3342      	adds	r3, #66	; 0x42
 800ff4e:	63a2      	str	r2, [r4, #56]	; 0x38
 800ff50:	701e      	strb	r6, [r3, #0]
 800ff52:	6023      	str	r3, [r4, #0]
 800ff54:	2301      	movs	r3, #1
 800ff56:	e7de      	b.n	800ff16 <_sungetc_r+0x36>

0800ff58 <__ssrefill_r>:
 800ff58:	b510      	push	{r4, lr}
 800ff5a:	000c      	movs	r4, r1
 800ff5c:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800ff5e:	2900      	cmp	r1, #0
 800ff60:	d00e      	beq.n	800ff80 <__ssrefill_r+0x28>
 800ff62:	0023      	movs	r3, r4
 800ff64:	3340      	adds	r3, #64	; 0x40
 800ff66:	4299      	cmp	r1, r3
 800ff68:	d001      	beq.n	800ff6e <__ssrefill_r+0x16>
 800ff6a:	f7fa fd87 	bl	800aa7c <_free_r>
 800ff6e:	2000      	movs	r0, #0
 800ff70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ff72:	6320      	str	r0, [r4, #48]	; 0x30
 800ff74:	6063      	str	r3, [r4, #4]
 800ff76:	4283      	cmp	r3, r0
 800ff78:	d002      	beq.n	800ff80 <__ssrefill_r+0x28>
 800ff7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ff7c:	6023      	str	r3, [r4, #0]
 800ff7e:	bd10      	pop	{r4, pc}
 800ff80:	6923      	ldr	r3, [r4, #16]
 800ff82:	2001      	movs	r0, #1
 800ff84:	6023      	str	r3, [r4, #0]
 800ff86:	2300      	movs	r3, #0
 800ff88:	89a2      	ldrh	r2, [r4, #12]
 800ff8a:	6063      	str	r3, [r4, #4]
 800ff8c:	3320      	adds	r3, #32
 800ff8e:	4313      	orrs	r3, r2
 800ff90:	81a3      	strh	r3, [r4, #12]
 800ff92:	4240      	negs	r0, r0
 800ff94:	e7f3      	b.n	800ff7e <__ssrefill_r+0x26>

0800ff96 <_sfread_r>:
 800ff96:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff98:	0014      	movs	r4, r2
 800ff9a:	435c      	muls	r4, r3
 800ff9c:	b087      	sub	sp, #28
 800ff9e:	1e26      	subs	r6, r4, #0
 800ffa0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ffa2:	9005      	str	r0, [sp, #20]
 800ffa4:	9101      	str	r1, [sp, #4]
 800ffa6:	9202      	str	r2, [sp, #8]
 800ffa8:	9303      	str	r3, [sp, #12]
 800ffaa:	d11e      	bne.n	800ffea <_sfread_r+0x54>
 800ffac:	0020      	movs	r0, r4
 800ffae:	b007      	add	sp, #28
 800ffb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffb2:	003a      	movs	r2, r7
 800ffb4:	9801      	ldr	r0, [sp, #4]
 800ffb6:	f7fa fce6 	bl	800a986 <memcpy>
 800ffba:	682b      	ldr	r3, [r5, #0]
 800ffbc:	0029      	movs	r1, r5
 800ffbe:	19db      	adds	r3, r3, r7
 800ffc0:	602b      	str	r3, [r5, #0]
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	606b      	str	r3, [r5, #4]
 800ffc6:	9b01      	ldr	r3, [sp, #4]
 800ffc8:	9805      	ldr	r0, [sp, #20]
 800ffca:	19db      	adds	r3, r3, r7
 800ffcc:	9301      	str	r3, [sp, #4]
 800ffce:	1bf3      	subs	r3, r6, r7
 800ffd0:	9304      	str	r3, [sp, #16]
 800ffd2:	f7ff ffc1 	bl	800ff58 <__ssrefill_r>
 800ffd6:	2800      	cmp	r0, #0
 800ffd8:	d006      	beq.n	800ffe8 <_sfread_r+0x52>
 800ffda:	193c      	adds	r4, r7, r4
 800ffdc:	1ba0      	subs	r0, r4, r6
 800ffde:	9902      	ldr	r1, [sp, #8]
 800ffe0:	f7f0 f8ac 	bl	800013c <__udivsi3>
 800ffe4:	0004      	movs	r4, r0
 800ffe6:	e7e1      	b.n	800ffac <_sfread_r+0x16>
 800ffe8:	9e04      	ldr	r6, [sp, #16]
 800ffea:	686f      	ldr	r7, [r5, #4]
 800ffec:	6829      	ldr	r1, [r5, #0]
 800ffee:	42b7      	cmp	r7, r6
 800fff0:	d3df      	bcc.n	800ffb2 <_sfread_r+0x1c>
 800fff2:	0032      	movs	r2, r6
 800fff4:	9801      	ldr	r0, [sp, #4]
 800fff6:	f7fa fcc6 	bl	800a986 <memcpy>
 800fffa:	686b      	ldr	r3, [r5, #4]
 800fffc:	9c03      	ldr	r4, [sp, #12]
 800fffe:	1b9b      	subs	r3, r3, r6
 8010000:	606b      	str	r3, [r5, #4]
 8010002:	682b      	ldr	r3, [r5, #0]
 8010004:	199b      	adds	r3, r3, r6
 8010006:	602b      	str	r3, [r5, #0]
 8010008:	e7d0      	b.n	800ffac <_sfread_r+0x16>

0801000a <__sprint_r>:
 801000a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801000c:	6893      	ldr	r3, [r2, #8]
 801000e:	b085      	sub	sp, #20
 8010010:	9001      	str	r0, [sp, #4]
 8010012:	000d      	movs	r5, r1
 8010014:	0014      	movs	r4, r2
 8010016:	1e18      	subs	r0, r3, #0
 8010018:	d018      	beq.n	801004c <__sprint_r+0x42>
 801001a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801001c:	049b      	lsls	r3, r3, #18
 801001e:	d524      	bpl.n	801006a <__sprint_r+0x60>
 8010020:	6817      	ldr	r7, [r2, #0]
 8010022:	2600      	movs	r6, #0
 8010024:	683b      	ldr	r3, [r7, #0]
 8010026:	9302      	str	r3, [sp, #8]
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	9300      	str	r3, [sp, #0]
 801002c:	089b      	lsrs	r3, r3, #2
 801002e:	9303      	str	r3, [sp, #12]
 8010030:	9b03      	ldr	r3, [sp, #12]
 8010032:	42b3      	cmp	r3, r6
 8010034:	dc0e      	bgt.n	8010054 <__sprint_r+0x4a>
 8010036:	2203      	movs	r2, #3
 8010038:	9b00      	ldr	r3, [sp, #0]
 801003a:	68a0      	ldr	r0, [r4, #8]
 801003c:	4393      	bics	r3, r2
 801003e:	1ac0      	subs	r0, r0, r3
 8010040:	60a0      	str	r0, [r4, #8]
 8010042:	3708      	adds	r7, #8
 8010044:	2800      	cmp	r0, #0
 8010046:	d1ec      	bne.n	8010022 <__sprint_r+0x18>
 8010048:	2300      	movs	r3, #0
 801004a:	60a3      	str	r3, [r4, #8]
 801004c:	2300      	movs	r3, #0
 801004e:	6063      	str	r3, [r4, #4]
 8010050:	b005      	add	sp, #20
 8010052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010054:	9902      	ldr	r1, [sp, #8]
 8010056:	00b3      	lsls	r3, r6, #2
 8010058:	58c9      	ldr	r1, [r1, r3]
 801005a:	002a      	movs	r2, r5
 801005c:	9801      	ldr	r0, [sp, #4]
 801005e:	f000 ff59 	bl	8010f14 <_fputwc_r>
 8010062:	1c43      	adds	r3, r0, #1
 8010064:	d0f0      	beq.n	8010048 <__sprint_r+0x3e>
 8010066:	3601      	adds	r6, #1
 8010068:	e7e2      	b.n	8010030 <__sprint_r+0x26>
 801006a:	9801      	ldr	r0, [sp, #4]
 801006c:	f000 fd14 	bl	8010a98 <__sfvwrite_r>
 8010070:	e7ea      	b.n	8010048 <__sprint_r+0x3e>
	...

08010074 <_vfiprintf_r>:
 8010074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010076:	b0c1      	sub	sp, #260	; 0x104
 8010078:	001c      	movs	r4, r3
 801007a:	001f      	movs	r7, r3
 801007c:	9006      	str	r0, [sp, #24]
 801007e:	9103      	str	r1, [sp, #12]
 8010080:	9207      	str	r2, [sp, #28]
 8010082:	2800      	cmp	r0, #0
 8010084:	d004      	beq.n	8010090 <_vfiprintf_r+0x1c>
 8010086:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010088:	2b00      	cmp	r3, #0
 801008a:	d101      	bne.n	8010090 <_vfiprintf_r+0x1c>
 801008c:	f7fa fa98 	bl	800a5c0 <__sinit>
 8010090:	9b03      	ldr	r3, [sp, #12]
 8010092:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010094:	07db      	lsls	r3, r3, #31
 8010096:	d407      	bmi.n	80100a8 <_vfiprintf_r+0x34>
 8010098:	9b03      	ldr	r3, [sp, #12]
 801009a:	899b      	ldrh	r3, [r3, #12]
 801009c:	059b      	lsls	r3, r3, #22
 801009e:	d403      	bmi.n	80100a8 <_vfiprintf_r+0x34>
 80100a0:	9b03      	ldr	r3, [sp, #12]
 80100a2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80100a4:	f7fa fc62 	bl	800a96c <__retarget_lock_acquire_recursive>
 80100a8:	9b03      	ldr	r3, [sp, #12]
 80100aa:	220c      	movs	r2, #12
 80100ac:	5e9a      	ldrsh	r2, [r3, r2]
 80100ae:	2380      	movs	r3, #128	; 0x80
 80100b0:	019b      	lsls	r3, r3, #6
 80100b2:	421a      	tst	r2, r3
 80100b4:	d107      	bne.n	80100c6 <_vfiprintf_r+0x52>
 80100b6:	4313      	orrs	r3, r2
 80100b8:	9a03      	ldr	r2, [sp, #12]
 80100ba:	8193      	strh	r3, [r2, #12]
 80100bc:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80100be:	4aa3      	ldr	r2, [pc, #652]	; (801034c <_vfiprintf_r+0x2d8>)
 80100c0:	4013      	ands	r3, r2
 80100c2:	9a03      	ldr	r2, [sp, #12]
 80100c4:	6653      	str	r3, [r2, #100]	; 0x64
 80100c6:	9b03      	ldr	r3, [sp, #12]
 80100c8:	899b      	ldrh	r3, [r3, #12]
 80100ca:	071b      	lsls	r3, r3, #28
 80100cc:	d503      	bpl.n	80100d6 <_vfiprintf_r+0x62>
 80100ce:	9b03      	ldr	r3, [sp, #12]
 80100d0:	691b      	ldr	r3, [r3, #16]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d118      	bne.n	8010108 <_vfiprintf_r+0x94>
 80100d6:	9903      	ldr	r1, [sp, #12]
 80100d8:	9806      	ldr	r0, [sp, #24]
 80100da:	f000 fe79 	bl	8010dd0 <__swsetup_r>
 80100de:	2800      	cmp	r0, #0
 80100e0:	d012      	beq.n	8010108 <_vfiprintf_r+0x94>
 80100e2:	9b03      	ldr	r3, [sp, #12]
 80100e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80100e6:	07db      	lsls	r3, r3, #31
 80100e8:	d505      	bpl.n	80100f6 <_vfiprintf_r+0x82>
 80100ea:	2301      	movs	r3, #1
 80100ec:	425b      	negs	r3, r3
 80100ee:	9308      	str	r3, [sp, #32]
 80100f0:	9808      	ldr	r0, [sp, #32]
 80100f2:	b041      	add	sp, #260	; 0x104
 80100f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100f6:	9b03      	ldr	r3, [sp, #12]
 80100f8:	899b      	ldrh	r3, [r3, #12]
 80100fa:	059b      	lsls	r3, r3, #22
 80100fc:	d4f5      	bmi.n	80100ea <_vfiprintf_r+0x76>
 80100fe:	9b03      	ldr	r3, [sp, #12]
 8010100:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8010102:	f7fa fc34 	bl	800a96e <__retarget_lock_release_recursive>
 8010106:	e7f0      	b.n	80100ea <_vfiprintf_r+0x76>
 8010108:	221a      	movs	r2, #26
 801010a:	9b03      	ldr	r3, [sp, #12]
 801010c:	899b      	ldrh	r3, [r3, #12]
 801010e:	401a      	ands	r2, r3
 8010110:	2a0a      	cmp	r2, #10
 8010112:	d116      	bne.n	8010142 <_vfiprintf_r+0xce>
 8010114:	9a03      	ldr	r2, [sp, #12]
 8010116:	210e      	movs	r1, #14
 8010118:	5e52      	ldrsh	r2, [r2, r1]
 801011a:	2a00      	cmp	r2, #0
 801011c:	db11      	blt.n	8010142 <_vfiprintf_r+0xce>
 801011e:	9a03      	ldr	r2, [sp, #12]
 8010120:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8010122:	07d2      	lsls	r2, r2, #31
 8010124:	d405      	bmi.n	8010132 <_vfiprintf_r+0xbe>
 8010126:	059b      	lsls	r3, r3, #22
 8010128:	d403      	bmi.n	8010132 <_vfiprintf_r+0xbe>
 801012a:	9b03      	ldr	r3, [sp, #12]
 801012c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 801012e:	f7fa fc1e 	bl	800a96e <__retarget_lock_release_recursive>
 8010132:	0023      	movs	r3, r4
 8010134:	9a07      	ldr	r2, [sp, #28]
 8010136:	9903      	ldr	r1, [sp, #12]
 8010138:	9806      	ldr	r0, [sp, #24]
 801013a:	f000 fc69 	bl	8010a10 <__sbprintf>
 801013e:	9008      	str	r0, [sp, #32]
 8010140:	e7d6      	b.n	80100f0 <_vfiprintf_r+0x7c>
 8010142:	2300      	movs	r3, #0
 8010144:	ad17      	add	r5, sp, #92	; 0x5c
 8010146:	9514      	str	r5, [sp, #80]	; 0x50
 8010148:	9316      	str	r3, [sp, #88]	; 0x58
 801014a:	9315      	str	r3, [sp, #84]	; 0x54
 801014c:	930c      	str	r3, [sp, #48]	; 0x30
 801014e:	930d      	str	r3, [sp, #52]	; 0x34
 8010150:	930e      	str	r3, [sp, #56]	; 0x38
 8010152:	930f      	str	r3, [sp, #60]	; 0x3c
 8010154:	9308      	str	r3, [sp, #32]
 8010156:	9c07      	ldr	r4, [sp, #28]
 8010158:	7823      	ldrb	r3, [r4, #0]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d002      	beq.n	8010164 <_vfiprintf_r+0xf0>
 801015e:	2b25      	cmp	r3, #37	; 0x25
 8010160:	d000      	beq.n	8010164 <_vfiprintf_r+0xf0>
 8010162:	e08d      	b.n	8010280 <_vfiprintf_r+0x20c>
 8010164:	9b07      	ldr	r3, [sp, #28]
 8010166:	1ae6      	subs	r6, r4, r3
 8010168:	429c      	cmp	r4, r3
 801016a:	d016      	beq.n	801019a <_vfiprintf_r+0x126>
 801016c:	602b      	str	r3, [r5, #0]
 801016e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010170:	606e      	str	r6, [r5, #4]
 8010172:	199b      	adds	r3, r3, r6
 8010174:	9316      	str	r3, [sp, #88]	; 0x58
 8010176:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010178:	3508      	adds	r5, #8
 801017a:	3301      	adds	r3, #1
 801017c:	9315      	str	r3, [sp, #84]	; 0x54
 801017e:	2b07      	cmp	r3, #7
 8010180:	dd08      	ble.n	8010194 <_vfiprintf_r+0x120>
 8010182:	9903      	ldr	r1, [sp, #12]
 8010184:	9806      	ldr	r0, [sp, #24]
 8010186:	aa14      	add	r2, sp, #80	; 0x50
 8010188:	f7ff ff3f 	bl	801000a <__sprint_r>
 801018c:	2800      	cmp	r0, #0
 801018e:	d000      	beq.n	8010192 <_vfiprintf_r+0x11e>
 8010190:	e3d9      	b.n	8010946 <_vfiprintf_r+0x8d2>
 8010192:	ad17      	add	r5, sp, #92	; 0x5c
 8010194:	9b08      	ldr	r3, [sp, #32]
 8010196:	199b      	adds	r3, r3, r6
 8010198:	9308      	str	r3, [sp, #32]
 801019a:	7823      	ldrb	r3, [r4, #0]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d101      	bne.n	80101a4 <_vfiprintf_r+0x130>
 80101a0:	f000 fbf6 	bl	8010990 <_vfiprintf_r+0x91c>
 80101a4:	2200      	movs	r2, #0
 80101a6:	a912      	add	r1, sp, #72	; 0x48
 80101a8:	70ca      	strb	r2, [r1, #3]
 80101aa:	2101      	movs	r1, #1
 80101ac:	1c63      	adds	r3, r4, #1
 80101ae:	0014      	movs	r4, r2
 80101b0:	4249      	negs	r1, r1
 80101b2:	9105      	str	r1, [sp, #20]
 80101b4:	9209      	str	r2, [sp, #36]	; 0x24
 80101b6:	1c5a      	adds	r2, r3, #1
 80101b8:	781b      	ldrb	r3, [r3, #0]
 80101ba:	9207      	str	r2, [sp, #28]
 80101bc:	0018      	movs	r0, r3
 80101be:	3820      	subs	r0, #32
 80101c0:	285a      	cmp	r0, #90	; 0x5a
 80101c2:	d900      	bls.n	80101c6 <_vfiprintf_r+0x152>
 80101c4:	e362      	b.n	801088c <_vfiprintf_r+0x818>
 80101c6:	f7ef ffaf 	bl	8000128 <__gnu_thumb1_case_uhi>
 80101ca:	0078      	.short	0x0078
 80101cc:	03610361 	.word	0x03610361
 80101d0:	03610081 	.word	0x03610081
 80101d4:	03610361 	.word	0x03610361
 80101d8:	0361005d 	.word	0x0361005d
 80101dc:	00830361 	.word	0x00830361
 80101e0:	0361008b 	.word	0x0361008b
 80101e4:	008f0089 	.word	0x008f0089
 80101e8:	00ad0361 	.word	0x00ad0361
 80101ec:	00af00af 	.word	0x00af00af
 80101f0:	00af00af 	.word	0x00af00af
 80101f4:	00af00af 	.word	0x00af00af
 80101f8:	00af00af 	.word	0x00af00af
 80101fc:	036100af 	.word	0x036100af
 8010200:	03610361 	.word	0x03610361
 8010204:	03610361 	.word	0x03610361
 8010208:	03610361 	.word	0x03610361
 801020c:	03610361 	.word	0x03610361
 8010210:	00e600da 	.word	0x00e600da
 8010214:	03610361 	.word	0x03610361
 8010218:	03610361 	.word	0x03610361
 801021c:	03610361 	.word	0x03610361
 8010220:	03610361 	.word	0x03610361
 8010224:	03610361 	.word	0x03610361
 8010228:	03610143 	.word	0x03610143
 801022c:	03610361 	.word	0x03610361
 8010230:	03610182 	.word	0x03610182
 8010234:	0361027c 	.word	0x0361027c
 8010238:	02ae0361 	.word	0x02ae0361
 801023c:	03610361 	.word	0x03610361
 8010240:	03610361 	.word	0x03610361
 8010244:	03610361 	.word	0x03610361
 8010248:	03610361 	.word	0x03610361
 801024c:	03610361 	.word	0x03610361
 8010250:	00e800da 	.word	0x00e800da
 8010254:	03610361 	.word	0x03610361
 8010258:	00c30361 	.word	0x00c30361
 801025c:	00d600e8 	.word	0x00d600e8
 8010260:	00cf0361 	.word	0x00cf0361
 8010264:	01260361 	.word	0x01260361
 8010268:	01740145 	.word	0x01740145
 801026c:	036100d6 	.word	0x036100d6
 8010270:	007f0182 	.word	0x007f0182
 8010274:	0361027e 	.word	0x0361027e
 8010278:	02cd0361 	.word	0x02cd0361
 801027c:	007f0361 	.word	0x007f0361
 8010280:	3401      	adds	r4, #1
 8010282:	e769      	b.n	8010158 <_vfiprintf_r+0xe4>
 8010284:	9806      	ldr	r0, [sp, #24]
 8010286:	f7fe fa47 	bl	800e718 <_localeconv_r>
 801028a:	6843      	ldr	r3, [r0, #4]
 801028c:	0018      	movs	r0, r3
 801028e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010290:	f7ef ff38 	bl	8000104 <strlen>
 8010294:	900e      	str	r0, [sp, #56]	; 0x38
 8010296:	9806      	ldr	r0, [sp, #24]
 8010298:	f7fe fa3e 	bl	800e718 <_localeconv_r>
 801029c:	6883      	ldr	r3, [r0, #8]
 801029e:	930d      	str	r3, [sp, #52]	; 0x34
 80102a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d010      	beq.n	80102c8 <_vfiprintf_r+0x254>
 80102a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d00d      	beq.n	80102c8 <_vfiprintf_r+0x254>
 80102ac:	781b      	ldrb	r3, [r3, #0]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d00a      	beq.n	80102c8 <_vfiprintf_r+0x254>
 80102b2:	2380      	movs	r3, #128	; 0x80
 80102b4:	00db      	lsls	r3, r3, #3
 80102b6:	431c      	orrs	r4, r3
 80102b8:	e006      	b.n	80102c8 <_vfiprintf_r+0x254>
 80102ba:	ab12      	add	r3, sp, #72	; 0x48
 80102bc:	78da      	ldrb	r2, [r3, #3]
 80102be:	3303      	adds	r3, #3
 80102c0:	2a00      	cmp	r2, #0
 80102c2:	d101      	bne.n	80102c8 <_vfiprintf_r+0x254>
 80102c4:	3220      	adds	r2, #32
 80102c6:	701a      	strb	r2, [r3, #0]
 80102c8:	9b07      	ldr	r3, [sp, #28]
 80102ca:	e774      	b.n	80101b6 <_vfiprintf_r+0x142>
 80102cc:	2301      	movs	r3, #1
 80102ce:	e7f2      	b.n	80102b6 <_vfiprintf_r+0x242>
 80102d0:	cf08      	ldmia	r7!, {r3}
 80102d2:	9309      	str	r3, [sp, #36]	; 0x24
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	daf7      	bge.n	80102c8 <_vfiprintf_r+0x254>
 80102d8:	425b      	negs	r3, r3
 80102da:	9309      	str	r3, [sp, #36]	; 0x24
 80102dc:	2304      	movs	r3, #4
 80102de:	e7ea      	b.n	80102b6 <_vfiprintf_r+0x242>
 80102e0:	222b      	movs	r2, #43	; 0x2b
 80102e2:	ab12      	add	r3, sp, #72	; 0x48
 80102e4:	70da      	strb	r2, [r3, #3]
 80102e6:	e7ef      	b.n	80102c8 <_vfiprintf_r+0x254>
 80102e8:	9b07      	ldr	r3, [sp, #28]
 80102ea:	1c5a      	adds	r2, r3, #1
 80102ec:	781b      	ldrb	r3, [r3, #0]
 80102ee:	2b2a      	cmp	r3, #42	; 0x2a
 80102f0:	d00f      	beq.n	8010312 <_vfiprintf_r+0x29e>
 80102f2:	2100      	movs	r1, #0
 80102f4:	9105      	str	r1, [sp, #20]
 80102f6:	0019      	movs	r1, r3
 80102f8:	3930      	subs	r1, #48	; 0x30
 80102fa:	9207      	str	r2, [sp, #28]
 80102fc:	2909      	cmp	r1, #9
 80102fe:	d900      	bls.n	8010302 <_vfiprintf_r+0x28e>
 8010300:	e75c      	b.n	80101bc <_vfiprintf_r+0x148>
 8010302:	200a      	movs	r0, #10
 8010304:	9b05      	ldr	r3, [sp, #20]
 8010306:	4343      	muls	r3, r0
 8010308:	185b      	adds	r3, r3, r1
 801030a:	9305      	str	r3, [sp, #20]
 801030c:	7813      	ldrb	r3, [r2, #0]
 801030e:	3201      	adds	r2, #1
 8010310:	e7f1      	b.n	80102f6 <_vfiprintf_r+0x282>
 8010312:	cf08      	ldmia	r7!, {r3}
 8010314:	9305      	str	r3, [sp, #20]
 8010316:	2b00      	cmp	r3, #0
 8010318:	da02      	bge.n	8010320 <_vfiprintf_r+0x2ac>
 801031a:	2301      	movs	r3, #1
 801031c:	425b      	negs	r3, r3
 801031e:	9305      	str	r3, [sp, #20]
 8010320:	9207      	str	r2, [sp, #28]
 8010322:	e7d1      	b.n	80102c8 <_vfiprintf_r+0x254>
 8010324:	2380      	movs	r3, #128	; 0x80
 8010326:	e7c6      	b.n	80102b6 <_vfiprintf_r+0x242>
 8010328:	2100      	movs	r1, #0
 801032a:	9a07      	ldr	r2, [sp, #28]
 801032c:	9109      	str	r1, [sp, #36]	; 0x24
 801032e:	200a      	movs	r0, #10
 8010330:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010332:	3b30      	subs	r3, #48	; 0x30
 8010334:	4341      	muls	r1, r0
 8010336:	185b      	adds	r3, r3, r1
 8010338:	9309      	str	r3, [sp, #36]	; 0x24
 801033a:	0013      	movs	r3, r2
 801033c:	781b      	ldrb	r3, [r3, #0]
 801033e:	3201      	adds	r2, #1
 8010340:	0019      	movs	r1, r3
 8010342:	3930      	subs	r1, #48	; 0x30
 8010344:	9207      	str	r2, [sp, #28]
 8010346:	2909      	cmp	r1, #9
 8010348:	d9f1      	bls.n	801032e <_vfiprintf_r+0x2ba>
 801034a:	e737      	b.n	80101bc <_vfiprintf_r+0x148>
 801034c:	ffffdfff 	.word	0xffffdfff
 8010350:	9b07      	ldr	r3, [sp, #28]
 8010352:	781b      	ldrb	r3, [r3, #0]
 8010354:	2b68      	cmp	r3, #104	; 0x68
 8010356:	d105      	bne.n	8010364 <_vfiprintf_r+0x2f0>
 8010358:	9b07      	ldr	r3, [sp, #28]
 801035a:	3301      	adds	r3, #1
 801035c:	9307      	str	r3, [sp, #28]
 801035e:	2380      	movs	r3, #128	; 0x80
 8010360:	009b      	lsls	r3, r3, #2
 8010362:	e7a8      	b.n	80102b6 <_vfiprintf_r+0x242>
 8010364:	2340      	movs	r3, #64	; 0x40
 8010366:	e7a6      	b.n	80102b6 <_vfiprintf_r+0x242>
 8010368:	9b07      	ldr	r3, [sp, #28]
 801036a:	781b      	ldrb	r3, [r3, #0]
 801036c:	2b6c      	cmp	r3, #108	; 0x6c
 801036e:	d104      	bne.n	801037a <_vfiprintf_r+0x306>
 8010370:	9b07      	ldr	r3, [sp, #28]
 8010372:	3301      	adds	r3, #1
 8010374:	9307      	str	r3, [sp, #28]
 8010376:	2320      	movs	r3, #32
 8010378:	e79d      	b.n	80102b6 <_vfiprintf_r+0x242>
 801037a:	2310      	movs	r3, #16
 801037c:	e79b      	b.n	80102b6 <_vfiprintf_r+0x242>
 801037e:	003a      	movs	r2, r7
 8010380:	ca08      	ldmia	r2!, {r3}
 8010382:	ae27      	add	r6, sp, #156	; 0x9c
 8010384:	7033      	strb	r3, [r6, #0]
 8010386:	2300      	movs	r3, #0
 8010388:	9204      	str	r2, [sp, #16]
 801038a:	aa12      	add	r2, sp, #72	; 0x48
 801038c:	70d3      	strb	r3, [r2, #3]
 801038e:	2201      	movs	r2, #1
 8010390:	930b      	str	r3, [sp, #44]	; 0x2c
 8010392:	9205      	str	r2, [sp, #20]
 8010394:	e0b0      	b.n	80104f8 <_vfiprintf_r+0x484>
 8010396:	2310      	movs	r3, #16
 8010398:	431c      	orrs	r4, r3
 801039a:	06a3      	lsls	r3, r4, #26
 801039c:	d52a      	bpl.n	80103f4 <_vfiprintf_r+0x380>
 801039e:	2307      	movs	r3, #7
 80103a0:	3707      	adds	r7, #7
 80103a2:	439f      	bics	r7, r3
 80103a4:	0039      	movs	r1, r7
 80103a6:	c90c      	ldmia	r1!, {r2, r3}
 80103a8:	9200      	str	r2, [sp, #0]
 80103aa:	9301      	str	r3, [sp, #4]
 80103ac:	9104      	str	r1, [sp, #16]
 80103ae:	9a01      	ldr	r2, [sp, #4]
 80103b0:	2301      	movs	r3, #1
 80103b2:	2a00      	cmp	r2, #0
 80103b4:	da09      	bge.n	80103ca <_vfiprintf_r+0x356>
 80103b6:	9e00      	ldr	r6, [sp, #0]
 80103b8:	9f01      	ldr	r7, [sp, #4]
 80103ba:	2200      	movs	r2, #0
 80103bc:	4271      	negs	r1, r6
 80103be:	41ba      	sbcs	r2, r7
 80103c0:	9100      	str	r1, [sp, #0]
 80103c2:	9201      	str	r2, [sp, #4]
 80103c4:	212d      	movs	r1, #45	; 0x2d
 80103c6:	aa12      	add	r2, sp, #72	; 0x48
 80103c8:	70d1      	strb	r1, [r2, #3]
 80103ca:	9901      	ldr	r1, [sp, #4]
 80103cc:	9a00      	ldr	r2, [sp, #0]
 80103ce:	430a      	orrs	r2, r1
 80103d0:	9905      	ldr	r1, [sp, #20]
 80103d2:	3101      	adds	r1, #1
 80103d4:	d100      	bne.n	80103d8 <_vfiprintf_r+0x364>
 80103d6:	e2e9      	b.n	80109ac <_vfiprintf_r+0x938>
 80103d8:	2180      	movs	r1, #128	; 0x80
 80103da:	0027      	movs	r7, r4
 80103dc:	438f      	bics	r7, r1
 80103de:	2a00      	cmp	r2, #0
 80103e0:	d000      	beq.n	80103e4 <_vfiprintf_r+0x370>
 80103e2:	e2e7      	b.n	80109b4 <_vfiprintf_r+0x940>
 80103e4:	9a05      	ldr	r2, [sp, #20]
 80103e6:	2a00      	cmp	r2, #0
 80103e8:	d100      	bne.n	80103ec <_vfiprintf_r+0x378>
 80103ea:	e243      	b.n	8010874 <_vfiprintf_r+0x800>
 80103ec:	2b01      	cmp	r3, #1
 80103ee:	d000      	beq.n	80103f2 <_vfiprintf_r+0x37e>
 80103f0:	e2e3      	b.n	80109ba <_vfiprintf_r+0x946>
 80103f2:	e1e7      	b.n	80107c4 <_vfiprintf_r+0x750>
 80103f4:	003a      	movs	r2, r7
 80103f6:	ca08      	ldmia	r2!, {r3}
 80103f8:	9204      	str	r2, [sp, #16]
 80103fa:	06e2      	lsls	r2, r4, #27
 80103fc:	d503      	bpl.n	8010406 <_vfiprintf_r+0x392>
 80103fe:	9300      	str	r3, [sp, #0]
 8010400:	17db      	asrs	r3, r3, #31
 8010402:	9301      	str	r3, [sp, #4]
 8010404:	e7d3      	b.n	80103ae <_vfiprintf_r+0x33a>
 8010406:	0662      	lsls	r2, r4, #25
 8010408:	d501      	bpl.n	801040e <_vfiprintf_r+0x39a>
 801040a:	b21b      	sxth	r3, r3
 801040c:	e7f7      	b.n	80103fe <_vfiprintf_r+0x38a>
 801040e:	05a2      	lsls	r2, r4, #22
 8010410:	d5f5      	bpl.n	80103fe <_vfiprintf_r+0x38a>
 8010412:	b25b      	sxtb	r3, r3
 8010414:	e7f3      	b.n	80103fe <_vfiprintf_r+0x38a>
 8010416:	1d3b      	adds	r3, r7, #4
 8010418:	9304      	str	r3, [sp, #16]
 801041a:	06a3      	lsls	r3, r4, #26
 801041c:	d506      	bpl.n	801042c <_vfiprintf_r+0x3b8>
 801041e:	683b      	ldr	r3, [r7, #0]
 8010420:	9a08      	ldr	r2, [sp, #32]
 8010422:	601a      	str	r2, [r3, #0]
 8010424:	17d2      	asrs	r2, r2, #31
 8010426:	605a      	str	r2, [r3, #4]
 8010428:	9f04      	ldr	r7, [sp, #16]
 801042a:	e694      	b.n	8010156 <_vfiprintf_r+0xe2>
 801042c:	06e3      	lsls	r3, r4, #27
 801042e:	d503      	bpl.n	8010438 <_vfiprintf_r+0x3c4>
 8010430:	683b      	ldr	r3, [r7, #0]
 8010432:	9a08      	ldr	r2, [sp, #32]
 8010434:	601a      	str	r2, [r3, #0]
 8010436:	e7f7      	b.n	8010428 <_vfiprintf_r+0x3b4>
 8010438:	0663      	lsls	r3, r4, #25
 801043a:	d503      	bpl.n	8010444 <_vfiprintf_r+0x3d0>
 801043c:	683b      	ldr	r3, [r7, #0]
 801043e:	9a08      	ldr	r2, [sp, #32]
 8010440:	801a      	strh	r2, [r3, #0]
 8010442:	e7f1      	b.n	8010428 <_vfiprintf_r+0x3b4>
 8010444:	05a4      	lsls	r4, r4, #22
 8010446:	d5f3      	bpl.n	8010430 <_vfiprintf_r+0x3bc>
 8010448:	683b      	ldr	r3, [r7, #0]
 801044a:	9a08      	ldr	r2, [sp, #32]
 801044c:	701a      	strb	r2, [r3, #0]
 801044e:	e7eb      	b.n	8010428 <_vfiprintf_r+0x3b4>
 8010450:	2310      	movs	r3, #16
 8010452:	431c      	orrs	r4, r3
 8010454:	2320      	movs	r3, #32
 8010456:	0020      	movs	r0, r4
 8010458:	4018      	ands	r0, r3
 801045a:	421c      	tst	r4, r3
 801045c:	d00d      	beq.n	801047a <_vfiprintf_r+0x406>
 801045e:	3b19      	subs	r3, #25
 8010460:	3707      	adds	r7, #7
 8010462:	439f      	bics	r7, r3
 8010464:	0039      	movs	r1, r7
 8010466:	c90c      	ldmia	r1!, {r2, r3}
 8010468:	9200      	str	r2, [sp, #0]
 801046a:	9301      	str	r3, [sp, #4]
 801046c:	9104      	str	r1, [sp, #16]
 801046e:	4bcc      	ldr	r3, [pc, #816]	; (80107a0 <_vfiprintf_r+0x72c>)
 8010470:	401c      	ands	r4, r3
 8010472:	2300      	movs	r3, #0
 8010474:	2100      	movs	r1, #0
 8010476:	aa12      	add	r2, sp, #72	; 0x48
 8010478:	e7a6      	b.n	80103c8 <_vfiprintf_r+0x354>
 801047a:	003a      	movs	r2, r7
 801047c:	ca08      	ldmia	r2!, {r3}
 801047e:	0021      	movs	r1, r4
 8010480:	9204      	str	r2, [sp, #16]
 8010482:	2210      	movs	r2, #16
 8010484:	4011      	ands	r1, r2
 8010486:	4214      	tst	r4, r2
 8010488:	d002      	beq.n	8010490 <_vfiprintf_r+0x41c>
 801048a:	9300      	str	r3, [sp, #0]
 801048c:	9001      	str	r0, [sp, #4]
 801048e:	e7ee      	b.n	801046e <_vfiprintf_r+0x3fa>
 8010490:	2240      	movs	r2, #64	; 0x40
 8010492:	0020      	movs	r0, r4
 8010494:	4010      	ands	r0, r2
 8010496:	4214      	tst	r4, r2
 8010498:	d003      	beq.n	80104a2 <_vfiprintf_r+0x42e>
 801049a:	b29b      	uxth	r3, r3
 801049c:	9300      	str	r3, [sp, #0]
 801049e:	9101      	str	r1, [sp, #4]
 80104a0:	e7e5      	b.n	801046e <_vfiprintf_r+0x3fa>
 80104a2:	2280      	movs	r2, #128	; 0x80
 80104a4:	0021      	movs	r1, r4
 80104a6:	0092      	lsls	r2, r2, #2
 80104a8:	4011      	ands	r1, r2
 80104aa:	4214      	tst	r4, r2
 80104ac:	d0f6      	beq.n	801049c <_vfiprintf_r+0x428>
 80104ae:	b2db      	uxtb	r3, r3
 80104b0:	e7eb      	b.n	801048a <_vfiprintf_r+0x416>
 80104b2:	003b      	movs	r3, r7
 80104b4:	cb04      	ldmia	r3!, {r2}
 80104b6:	49bb      	ldr	r1, [pc, #748]	; (80107a4 <_vfiprintf_r+0x730>)
 80104b8:	9304      	str	r3, [sp, #16]
 80104ba:	2300      	movs	r3, #0
 80104bc:	9200      	str	r2, [sp, #0]
 80104be:	aa13      	add	r2, sp, #76	; 0x4c
 80104c0:	8011      	strh	r1, [r2, #0]
 80104c2:	4ab9      	ldr	r2, [pc, #740]	; (80107a8 <_vfiprintf_r+0x734>)
 80104c4:	9301      	str	r3, [sp, #4]
 80104c6:	3302      	adds	r3, #2
 80104c8:	431c      	orrs	r4, r3
 80104ca:	920c      	str	r2, [sp, #48]	; 0x30
 80104cc:	e7d2      	b.n	8010474 <_vfiprintf_r+0x400>
 80104ce:	003b      	movs	r3, r7
 80104d0:	2700      	movs	r7, #0
 80104d2:	cb40      	ldmia	r3!, {r6}
 80104d4:	9304      	str	r3, [sp, #16]
 80104d6:	ab12      	add	r3, sp, #72	; 0x48
 80104d8:	70df      	strb	r7, [r3, #3]
 80104da:	9b05      	ldr	r3, [sp, #20]
 80104dc:	3301      	adds	r3, #1
 80104de:	d100      	bne.n	80104e2 <_vfiprintf_r+0x46e>
 80104e0:	e0ea      	b.n	80106b8 <_vfiprintf_r+0x644>
 80104e2:	0039      	movs	r1, r7
 80104e4:	0030      	movs	r0, r6
 80104e6:	9a05      	ldr	r2, [sp, #20]
 80104e8:	f7fe f92e 	bl	800e748 <memchr>
 80104ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80104ee:	42b8      	cmp	r0, r7
 80104f0:	d002      	beq.n	80104f8 <_vfiprintf_r+0x484>
 80104f2:	1b83      	subs	r3, r0, r6
 80104f4:	9305      	str	r3, [sp, #20]
 80104f6:	970b      	str	r7, [sp, #44]	; 0x2c
 80104f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80104fa:	9a05      	ldr	r2, [sp, #20]
 80104fc:	930a      	str	r3, [sp, #40]	; 0x28
 80104fe:	4293      	cmp	r3, r2
 8010500:	da00      	bge.n	8010504 <_vfiprintf_r+0x490>
 8010502:	920a      	str	r2, [sp, #40]	; 0x28
 8010504:	ab12      	add	r3, sp, #72	; 0x48
 8010506:	3303      	adds	r3, #3
 8010508:	781b      	ldrb	r3, [r3, #0]
 801050a:	1e5a      	subs	r2, r3, #1
 801050c:	4193      	sbcs	r3, r2
 801050e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010510:	18d3      	adds	r3, r2, r3
 8010512:	930a      	str	r3, [sp, #40]	; 0x28
 8010514:	0022      	movs	r2, r4
 8010516:	2302      	movs	r3, #2
 8010518:	401a      	ands	r2, r3
 801051a:	9210      	str	r2, [sp, #64]	; 0x40
 801051c:	421c      	tst	r4, r3
 801051e:	d002      	beq.n	8010526 <_vfiprintf_r+0x4b2>
 8010520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010522:	3302      	adds	r3, #2
 8010524:	930a      	str	r3, [sp, #40]	; 0x28
 8010526:	2384      	movs	r3, #132	; 0x84
 8010528:	0022      	movs	r2, r4
 801052a:	401a      	ands	r2, r3
 801052c:	9211      	str	r2, [sp, #68]	; 0x44
 801052e:	421c      	tst	r4, r3
 8010530:	d11e      	bne.n	8010570 <_vfiprintf_r+0x4fc>
 8010532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010534:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010536:	1a9f      	subs	r7, r3, r2
 8010538:	2f00      	cmp	r7, #0
 801053a:	dd19      	ble.n	8010570 <_vfiprintf_r+0x4fc>
 801053c:	0029      	movs	r1, r5
 801053e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010540:	489a      	ldr	r0, [pc, #616]	; (80107ac <_vfiprintf_r+0x738>)
 8010542:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010544:	3301      	adds	r3, #1
 8010546:	3108      	adds	r1, #8
 8010548:	6028      	str	r0, [r5, #0]
 801054a:	2f10      	cmp	r7, #16
 801054c:	dd00      	ble.n	8010550 <_vfiprintf_r+0x4dc>
 801054e:	e1a7      	b.n	80108a0 <_vfiprintf_r+0x82c>
 8010550:	606f      	str	r7, [r5, #4]
 8010552:	18bf      	adds	r7, r7, r2
 8010554:	000d      	movs	r5, r1
 8010556:	9716      	str	r7, [sp, #88]	; 0x58
 8010558:	9315      	str	r3, [sp, #84]	; 0x54
 801055a:	2b07      	cmp	r3, #7
 801055c:	dd08      	ble.n	8010570 <_vfiprintf_r+0x4fc>
 801055e:	9903      	ldr	r1, [sp, #12]
 8010560:	9806      	ldr	r0, [sp, #24]
 8010562:	aa14      	add	r2, sp, #80	; 0x50
 8010564:	f7ff fd51 	bl	801000a <__sprint_r>
 8010568:	2800      	cmp	r0, #0
 801056a:	d000      	beq.n	801056e <_vfiprintf_r+0x4fa>
 801056c:	e1eb      	b.n	8010946 <_vfiprintf_r+0x8d2>
 801056e:	ad17      	add	r5, sp, #92	; 0x5c
 8010570:	a912      	add	r1, sp, #72	; 0x48
 8010572:	78c8      	ldrb	r0, [r1, #3]
 8010574:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010576:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010578:	3103      	adds	r1, #3
 801057a:	2800      	cmp	r0, #0
 801057c:	d012      	beq.n	80105a4 <_vfiprintf_r+0x530>
 801057e:	6029      	str	r1, [r5, #0]
 8010580:	2101      	movs	r1, #1
 8010582:	3301      	adds	r3, #1
 8010584:	1852      	adds	r2, r2, r1
 8010586:	6069      	str	r1, [r5, #4]
 8010588:	9216      	str	r2, [sp, #88]	; 0x58
 801058a:	9315      	str	r3, [sp, #84]	; 0x54
 801058c:	3508      	adds	r5, #8
 801058e:	2b07      	cmp	r3, #7
 8010590:	dd08      	ble.n	80105a4 <_vfiprintf_r+0x530>
 8010592:	9903      	ldr	r1, [sp, #12]
 8010594:	9806      	ldr	r0, [sp, #24]
 8010596:	aa14      	add	r2, sp, #80	; 0x50
 8010598:	f7ff fd37 	bl	801000a <__sprint_r>
 801059c:	2800      	cmp	r0, #0
 801059e:	d000      	beq.n	80105a2 <_vfiprintf_r+0x52e>
 80105a0:	e1d1      	b.n	8010946 <_vfiprintf_r+0x8d2>
 80105a2:	ad17      	add	r5, sp, #92	; 0x5c
 80105a4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80105a6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80105a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80105aa:	2900      	cmp	r1, #0
 80105ac:	d013      	beq.n	80105d6 <_vfiprintf_r+0x562>
 80105ae:	a913      	add	r1, sp, #76	; 0x4c
 80105b0:	6029      	str	r1, [r5, #0]
 80105b2:	2102      	movs	r1, #2
 80105b4:	3301      	adds	r3, #1
 80105b6:	1852      	adds	r2, r2, r1
 80105b8:	6069      	str	r1, [r5, #4]
 80105ba:	9216      	str	r2, [sp, #88]	; 0x58
 80105bc:	9315      	str	r3, [sp, #84]	; 0x54
 80105be:	3508      	adds	r5, #8
 80105c0:	2b07      	cmp	r3, #7
 80105c2:	dd08      	ble.n	80105d6 <_vfiprintf_r+0x562>
 80105c4:	9903      	ldr	r1, [sp, #12]
 80105c6:	9806      	ldr	r0, [sp, #24]
 80105c8:	aa14      	add	r2, sp, #80	; 0x50
 80105ca:	f7ff fd1e 	bl	801000a <__sprint_r>
 80105ce:	2800      	cmp	r0, #0
 80105d0:	d000      	beq.n	80105d4 <_vfiprintf_r+0x560>
 80105d2:	e1b8      	b.n	8010946 <_vfiprintf_r+0x8d2>
 80105d4:	ad17      	add	r5, sp, #92	; 0x5c
 80105d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80105d8:	2b80      	cmp	r3, #128	; 0x80
 80105da:	d11e      	bne.n	801061a <_vfiprintf_r+0x5a6>
 80105dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80105e0:	1a9f      	subs	r7, r3, r2
 80105e2:	2f00      	cmp	r7, #0
 80105e4:	dd19      	ble.n	801061a <_vfiprintf_r+0x5a6>
 80105e6:	0029      	movs	r1, r5
 80105e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80105ea:	4871      	ldr	r0, [pc, #452]	; (80107b0 <_vfiprintf_r+0x73c>)
 80105ec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80105ee:	3301      	adds	r3, #1
 80105f0:	3108      	adds	r1, #8
 80105f2:	6028      	str	r0, [r5, #0]
 80105f4:	2f10      	cmp	r7, #16
 80105f6:	dd00      	ble.n	80105fa <_vfiprintf_r+0x586>
 80105f8:	e164      	b.n	80108c4 <_vfiprintf_r+0x850>
 80105fa:	606f      	str	r7, [r5, #4]
 80105fc:	18bf      	adds	r7, r7, r2
 80105fe:	000d      	movs	r5, r1
 8010600:	9716      	str	r7, [sp, #88]	; 0x58
 8010602:	9315      	str	r3, [sp, #84]	; 0x54
 8010604:	2b07      	cmp	r3, #7
 8010606:	dd08      	ble.n	801061a <_vfiprintf_r+0x5a6>
 8010608:	9903      	ldr	r1, [sp, #12]
 801060a:	9806      	ldr	r0, [sp, #24]
 801060c:	aa14      	add	r2, sp, #80	; 0x50
 801060e:	f7ff fcfc 	bl	801000a <__sprint_r>
 8010612:	2800      	cmp	r0, #0
 8010614:	d000      	beq.n	8010618 <_vfiprintf_r+0x5a4>
 8010616:	e196      	b.n	8010946 <_vfiprintf_r+0x8d2>
 8010618:	ad17      	add	r5, sp, #92	; 0x5c
 801061a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801061c:	9a05      	ldr	r2, [sp, #20]
 801061e:	1a9f      	subs	r7, r3, r2
 8010620:	2f00      	cmp	r7, #0
 8010622:	dd19      	ble.n	8010658 <_vfiprintf_r+0x5e4>
 8010624:	0029      	movs	r1, r5
 8010626:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010628:	4861      	ldr	r0, [pc, #388]	; (80107b0 <_vfiprintf_r+0x73c>)
 801062a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801062c:	3301      	adds	r3, #1
 801062e:	3108      	adds	r1, #8
 8010630:	6028      	str	r0, [r5, #0]
 8010632:	2f10      	cmp	r7, #16
 8010634:	dd00      	ble.n	8010638 <_vfiprintf_r+0x5c4>
 8010636:	e157      	b.n	80108e8 <_vfiprintf_r+0x874>
 8010638:	606f      	str	r7, [r5, #4]
 801063a:	18bf      	adds	r7, r7, r2
 801063c:	000d      	movs	r5, r1
 801063e:	9716      	str	r7, [sp, #88]	; 0x58
 8010640:	9315      	str	r3, [sp, #84]	; 0x54
 8010642:	2b07      	cmp	r3, #7
 8010644:	dd08      	ble.n	8010658 <_vfiprintf_r+0x5e4>
 8010646:	9903      	ldr	r1, [sp, #12]
 8010648:	9806      	ldr	r0, [sp, #24]
 801064a:	aa14      	add	r2, sp, #80	; 0x50
 801064c:	f7ff fcdd 	bl	801000a <__sprint_r>
 8010650:	2800      	cmp	r0, #0
 8010652:	d000      	beq.n	8010656 <_vfiprintf_r+0x5e2>
 8010654:	e177      	b.n	8010946 <_vfiprintf_r+0x8d2>
 8010656:	ad17      	add	r5, sp, #92	; 0x5c
 8010658:	9b05      	ldr	r3, [sp, #20]
 801065a:	9a05      	ldr	r2, [sp, #20]
 801065c:	606b      	str	r3, [r5, #4]
 801065e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010660:	602e      	str	r6, [r5, #0]
 8010662:	189b      	adds	r3, r3, r2
 8010664:	9316      	str	r3, [sp, #88]	; 0x58
 8010666:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010668:	3508      	adds	r5, #8
 801066a:	3301      	adds	r3, #1
 801066c:	9315      	str	r3, [sp, #84]	; 0x54
 801066e:	2b07      	cmp	r3, #7
 8010670:	dd08      	ble.n	8010684 <_vfiprintf_r+0x610>
 8010672:	9903      	ldr	r1, [sp, #12]
 8010674:	9806      	ldr	r0, [sp, #24]
 8010676:	aa14      	add	r2, sp, #80	; 0x50
 8010678:	f7ff fcc7 	bl	801000a <__sprint_r>
 801067c:	2800      	cmp	r0, #0
 801067e:	d000      	beq.n	8010682 <_vfiprintf_r+0x60e>
 8010680:	e161      	b.n	8010946 <_vfiprintf_r+0x8d2>
 8010682:	ad17      	add	r5, sp, #92	; 0x5c
 8010684:	0764      	lsls	r4, r4, #29
 8010686:	d500      	bpl.n	801068a <_vfiprintf_r+0x616>
 8010688:	e140      	b.n	801090c <_vfiprintf_r+0x898>
 801068a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801068c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801068e:	4293      	cmp	r3, r2
 8010690:	da00      	bge.n	8010694 <_vfiprintf_r+0x620>
 8010692:	0013      	movs	r3, r2
 8010694:	9a08      	ldr	r2, [sp, #32]
 8010696:	18d3      	adds	r3, r2, r3
 8010698:	9308      	str	r3, [sp, #32]
 801069a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801069c:	2b00      	cmp	r3, #0
 801069e:	d007      	beq.n	80106b0 <_vfiprintf_r+0x63c>
 80106a0:	9903      	ldr	r1, [sp, #12]
 80106a2:	9806      	ldr	r0, [sp, #24]
 80106a4:	aa14      	add	r2, sp, #80	; 0x50
 80106a6:	f7ff fcb0 	bl	801000a <__sprint_r>
 80106aa:	2800      	cmp	r0, #0
 80106ac:	d000      	beq.n	80106b0 <_vfiprintf_r+0x63c>
 80106ae:	e14a      	b.n	8010946 <_vfiprintf_r+0x8d2>
 80106b0:	2300      	movs	r3, #0
 80106b2:	ad17      	add	r5, sp, #92	; 0x5c
 80106b4:	9315      	str	r3, [sp, #84]	; 0x54
 80106b6:	e6b7      	b.n	8010428 <_vfiprintf_r+0x3b4>
 80106b8:	0030      	movs	r0, r6
 80106ba:	f7ef fd23 	bl	8000104 <strlen>
 80106be:	9005      	str	r0, [sp, #20]
 80106c0:	e719      	b.n	80104f6 <_vfiprintf_r+0x482>
 80106c2:	2310      	movs	r3, #16
 80106c4:	431c      	orrs	r4, r3
 80106c6:	2320      	movs	r3, #32
 80106c8:	0020      	movs	r0, r4
 80106ca:	4018      	ands	r0, r3
 80106cc:	421c      	tst	r4, r3
 80106ce:	d009      	beq.n	80106e4 <_vfiprintf_r+0x670>
 80106d0:	3b19      	subs	r3, #25
 80106d2:	3707      	adds	r7, #7
 80106d4:	439f      	bics	r7, r3
 80106d6:	0039      	movs	r1, r7
 80106d8:	c90c      	ldmia	r1!, {r2, r3}
 80106da:	9200      	str	r2, [sp, #0]
 80106dc:	9301      	str	r3, [sp, #4]
 80106de:	9104      	str	r1, [sp, #16]
 80106e0:	2301      	movs	r3, #1
 80106e2:	e6c7      	b.n	8010474 <_vfiprintf_r+0x400>
 80106e4:	003b      	movs	r3, r7
 80106e6:	cb04      	ldmia	r3!, {r2}
 80106e8:	0021      	movs	r1, r4
 80106ea:	9304      	str	r3, [sp, #16]
 80106ec:	2310      	movs	r3, #16
 80106ee:	4019      	ands	r1, r3
 80106f0:	421c      	tst	r4, r3
 80106f2:	d003      	beq.n	80106fc <_vfiprintf_r+0x688>
 80106f4:	9200      	str	r2, [sp, #0]
 80106f6:	9001      	str	r0, [sp, #4]
 80106f8:	3b0f      	subs	r3, #15
 80106fa:	e6bb      	b.n	8010474 <_vfiprintf_r+0x400>
 80106fc:	2340      	movs	r3, #64	; 0x40
 80106fe:	0020      	movs	r0, r4
 8010700:	4018      	ands	r0, r3
 8010702:	421c      	tst	r4, r3
 8010704:	d003      	beq.n	801070e <_vfiprintf_r+0x69a>
 8010706:	b293      	uxth	r3, r2
 8010708:	9300      	str	r3, [sp, #0]
 801070a:	9101      	str	r1, [sp, #4]
 801070c:	e7e8      	b.n	80106e0 <_vfiprintf_r+0x66c>
 801070e:	2380      	movs	r3, #128	; 0x80
 8010710:	0021      	movs	r1, r4
 8010712:	009b      	lsls	r3, r3, #2
 8010714:	4019      	ands	r1, r3
 8010716:	421c      	tst	r4, r3
 8010718:	d003      	beq.n	8010722 <_vfiprintf_r+0x6ae>
 801071a:	b2d3      	uxtb	r3, r2
 801071c:	9300      	str	r3, [sp, #0]
 801071e:	9001      	str	r0, [sp, #4]
 8010720:	e7de      	b.n	80106e0 <_vfiprintf_r+0x66c>
 8010722:	9200      	str	r2, [sp, #0]
 8010724:	e7f1      	b.n	801070a <_vfiprintf_r+0x696>
 8010726:	4a23      	ldr	r2, [pc, #140]	; (80107b4 <_vfiprintf_r+0x740>)
 8010728:	0020      	movs	r0, r4
 801072a:	920c      	str	r2, [sp, #48]	; 0x30
 801072c:	2220      	movs	r2, #32
 801072e:	4010      	ands	r0, r2
 8010730:	4214      	tst	r4, r2
 8010732:	d019      	beq.n	8010768 <_vfiprintf_r+0x6f4>
 8010734:	3a19      	subs	r2, #25
 8010736:	3707      	adds	r7, #7
 8010738:	4397      	bics	r7, r2
 801073a:	0038      	movs	r0, r7
 801073c:	c806      	ldmia	r0!, {r1, r2}
 801073e:	9100      	str	r1, [sp, #0]
 8010740:	9201      	str	r2, [sp, #4]
 8010742:	9004      	str	r0, [sp, #16]
 8010744:	07e2      	lsls	r2, r4, #31
 8010746:	d509      	bpl.n	801075c <_vfiprintf_r+0x6e8>
 8010748:	9a00      	ldr	r2, [sp, #0]
 801074a:	9901      	ldr	r1, [sp, #4]
 801074c:	430a      	orrs	r2, r1
 801074e:	d005      	beq.n	801075c <_vfiprintf_r+0x6e8>
 8010750:	aa13      	add	r2, sp, #76	; 0x4c
 8010752:	2130      	movs	r1, #48	; 0x30
 8010754:	7053      	strb	r3, [r2, #1]
 8010756:	2302      	movs	r3, #2
 8010758:	7011      	strb	r1, [r2, #0]
 801075a:	431c      	orrs	r4, r3
 801075c:	4b10      	ldr	r3, [pc, #64]	; (80107a0 <_vfiprintf_r+0x72c>)
 801075e:	401c      	ands	r4, r3
 8010760:	2302      	movs	r3, #2
 8010762:	e687      	b.n	8010474 <_vfiprintf_r+0x400>
 8010764:	4a10      	ldr	r2, [pc, #64]	; (80107a8 <_vfiprintf_r+0x734>)
 8010766:	e7df      	b.n	8010728 <_vfiprintf_r+0x6b4>
 8010768:	0039      	movs	r1, r7
 801076a:	c904      	ldmia	r1!, {r2}
 801076c:	0026      	movs	r6, r4
 801076e:	9104      	str	r1, [sp, #16]
 8010770:	2110      	movs	r1, #16
 8010772:	400e      	ands	r6, r1
 8010774:	420c      	tst	r4, r1
 8010776:	d002      	beq.n	801077e <_vfiprintf_r+0x70a>
 8010778:	9200      	str	r2, [sp, #0]
 801077a:	9001      	str	r0, [sp, #4]
 801077c:	e7e2      	b.n	8010744 <_vfiprintf_r+0x6d0>
 801077e:	2140      	movs	r1, #64	; 0x40
 8010780:	0020      	movs	r0, r4
 8010782:	4008      	ands	r0, r1
 8010784:	420c      	tst	r4, r1
 8010786:	d003      	beq.n	8010790 <_vfiprintf_r+0x71c>
 8010788:	b292      	uxth	r2, r2
 801078a:	9200      	str	r2, [sp, #0]
 801078c:	9601      	str	r6, [sp, #4]
 801078e:	e7d9      	b.n	8010744 <_vfiprintf_r+0x6d0>
 8010790:	2180      	movs	r1, #128	; 0x80
 8010792:	0026      	movs	r6, r4
 8010794:	0089      	lsls	r1, r1, #2
 8010796:	400e      	ands	r6, r1
 8010798:	420c      	tst	r4, r1
 801079a:	d0f6      	beq.n	801078a <_vfiprintf_r+0x716>
 801079c:	b2d2      	uxtb	r2, r2
 801079e:	e7eb      	b.n	8010778 <_vfiprintf_r+0x704>
 80107a0:	fffffbff 	.word	0xfffffbff
 80107a4:	00007830 	.word	0x00007830
 80107a8:	08012e6c 	.word	0x08012e6c
 80107ac:	08012f79 	.word	0x08012f79
 80107b0:	08012f89 	.word	0x08012f89
 80107b4:	08012e7d 	.word	0x08012e7d
 80107b8:	9b01      	ldr	r3, [sp, #4]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d109      	bne.n	80107d2 <_vfiprintf_r+0x75e>
 80107be:	9b00      	ldr	r3, [sp, #0]
 80107c0:	2b09      	cmp	r3, #9
 80107c2:	d806      	bhi.n	80107d2 <_vfiprintf_r+0x75e>
 80107c4:	26b7      	movs	r6, #183	; 0xb7
 80107c6:	ab12      	add	r3, sp, #72	; 0x48
 80107c8:	18f6      	adds	r6, r6, r3
 80107ca:	9b00      	ldr	r3, [sp, #0]
 80107cc:	3330      	adds	r3, #48	; 0x30
 80107ce:	7033      	strb	r3, [r6, #0]
 80107d0:	e115      	b.n	80109fe <_vfiprintf_r+0x98a>
 80107d2:	2380      	movs	r3, #128	; 0x80
 80107d4:	2400      	movs	r4, #0
 80107d6:	00db      	lsls	r3, r3, #3
 80107d8:	403b      	ands	r3, r7
 80107da:	ae40      	add	r6, sp, #256	; 0x100
 80107dc:	930a      	str	r3, [sp, #40]	; 0x28
 80107de:	220a      	movs	r2, #10
 80107e0:	9800      	ldr	r0, [sp, #0]
 80107e2:	9901      	ldr	r1, [sp, #4]
 80107e4:	2300      	movs	r3, #0
 80107e6:	f7ef fe5d 	bl	80004a4 <__aeabi_uldivmod>
 80107ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107ec:	3e01      	subs	r6, #1
 80107ee:	3230      	adds	r2, #48	; 0x30
 80107f0:	900b      	str	r0, [sp, #44]	; 0x2c
 80107f2:	9110      	str	r1, [sp, #64]	; 0x40
 80107f4:	7032      	strb	r2, [r6, #0]
 80107f6:	3401      	adds	r4, #1
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d01a      	beq.n	8010832 <_vfiprintf_r+0x7be>
 80107fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80107fe:	781b      	ldrb	r3, [r3, #0]
 8010800:	42a3      	cmp	r3, r4
 8010802:	d116      	bne.n	8010832 <_vfiprintf_r+0x7be>
 8010804:	2cff      	cmp	r4, #255	; 0xff
 8010806:	d014      	beq.n	8010832 <_vfiprintf_r+0x7be>
 8010808:	9b01      	ldr	r3, [sp, #4]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d102      	bne.n	8010814 <_vfiprintf_r+0x7a0>
 801080e:	9b00      	ldr	r3, [sp, #0]
 8010810:	2b09      	cmp	r3, #9
 8010812:	d90e      	bls.n	8010832 <_vfiprintf_r+0x7be>
 8010814:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010816:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010818:	1af6      	subs	r6, r6, r3
 801081a:	001a      	movs	r2, r3
 801081c:	0030      	movs	r0, r6
 801081e:	f7f9 ffe6 	bl	800a7ee <strncpy>
 8010822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010824:	2400      	movs	r4, #0
 8010826:	785b      	ldrb	r3, [r3, #1]
 8010828:	1e5a      	subs	r2, r3, #1
 801082a:	4193      	sbcs	r3, r2
 801082c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801082e:	18d3      	adds	r3, r2, r3
 8010830:	930d      	str	r3, [sp, #52]	; 0x34
 8010832:	9b01      	ldr	r3, [sp, #4]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d103      	bne.n	8010840 <_vfiprintf_r+0x7cc>
 8010838:	9b00      	ldr	r3, [sp, #0]
 801083a:	2b09      	cmp	r3, #9
 801083c:	d800      	bhi.n	8010840 <_vfiprintf_r+0x7cc>
 801083e:	e0de      	b.n	80109fe <_vfiprintf_r+0x98a>
 8010840:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010842:	9300      	str	r3, [sp, #0]
 8010844:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010846:	9301      	str	r3, [sp, #4]
 8010848:	e7c9      	b.n	80107de <_vfiprintf_r+0x76a>
 801084a:	200f      	movs	r0, #15
 801084c:	9b00      	ldr	r3, [sp, #0]
 801084e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010850:	4003      	ands	r3, r0
 8010852:	5cd3      	ldrb	r3, [r2, r3]
 8010854:	3e01      	subs	r6, #1
 8010856:	7033      	strb	r3, [r6, #0]
 8010858:	9b01      	ldr	r3, [sp, #4]
 801085a:	0719      	lsls	r1, r3, #28
 801085c:	9b00      	ldr	r3, [sp, #0]
 801085e:	091a      	lsrs	r2, r3, #4
 8010860:	9b01      	ldr	r3, [sp, #4]
 8010862:	4311      	orrs	r1, r2
 8010864:	091b      	lsrs	r3, r3, #4
 8010866:	9301      	str	r3, [sp, #4]
 8010868:	000b      	movs	r3, r1
 801086a:	9a01      	ldr	r2, [sp, #4]
 801086c:	9100      	str	r1, [sp, #0]
 801086e:	4313      	orrs	r3, r2
 8010870:	d1ec      	bne.n	801084c <_vfiprintf_r+0x7d8>
 8010872:	e0c4      	b.n	80109fe <_vfiprintf_r+0x98a>
 8010874:	ae40      	add	r6, sp, #256	; 0x100
 8010876:	2b00      	cmp	r3, #0
 8010878:	d000      	beq.n	801087c <_vfiprintf_r+0x808>
 801087a:	e0c0      	b.n	80109fe <_vfiprintf_r+0x98a>
 801087c:	07e4      	lsls	r4, r4, #31
 801087e:	d400      	bmi.n	8010882 <_vfiprintf_r+0x80e>
 8010880:	e0bd      	b.n	80109fe <_vfiprintf_r+0x98a>
 8010882:	26b7      	movs	r6, #183	; 0xb7
 8010884:	ab12      	add	r3, sp, #72	; 0x48
 8010886:	18f6      	adds	r6, r6, r3
 8010888:	2330      	movs	r3, #48	; 0x30
 801088a:	e7a0      	b.n	80107ce <_vfiprintf_r+0x75a>
 801088c:	2b00      	cmp	r3, #0
 801088e:	d100      	bne.n	8010892 <_vfiprintf_r+0x81e>
 8010890:	e07e      	b.n	8010990 <_vfiprintf_r+0x91c>
 8010892:	ae27      	add	r6, sp, #156	; 0x9c
 8010894:	7033      	strb	r3, [r6, #0]
 8010896:	2300      	movs	r3, #0
 8010898:	aa12      	add	r2, sp, #72	; 0x48
 801089a:	70d3      	strb	r3, [r2, #3]
 801089c:	9704      	str	r7, [sp, #16]
 801089e:	e576      	b.n	801038e <_vfiprintf_r+0x31a>
 80108a0:	2010      	movs	r0, #16
 80108a2:	1812      	adds	r2, r2, r0
 80108a4:	6068      	str	r0, [r5, #4]
 80108a6:	9216      	str	r2, [sp, #88]	; 0x58
 80108a8:	9315      	str	r3, [sp, #84]	; 0x54
 80108aa:	2b07      	cmp	r3, #7
 80108ac:	dd07      	ble.n	80108be <_vfiprintf_r+0x84a>
 80108ae:	9903      	ldr	r1, [sp, #12]
 80108b0:	9806      	ldr	r0, [sp, #24]
 80108b2:	aa14      	add	r2, sp, #80	; 0x50
 80108b4:	f7ff fba9 	bl	801000a <__sprint_r>
 80108b8:	2800      	cmp	r0, #0
 80108ba:	d144      	bne.n	8010946 <_vfiprintf_r+0x8d2>
 80108bc:	a917      	add	r1, sp, #92	; 0x5c
 80108be:	000d      	movs	r5, r1
 80108c0:	3f10      	subs	r7, #16
 80108c2:	e63b      	b.n	801053c <_vfiprintf_r+0x4c8>
 80108c4:	2010      	movs	r0, #16
 80108c6:	1812      	adds	r2, r2, r0
 80108c8:	6068      	str	r0, [r5, #4]
 80108ca:	9216      	str	r2, [sp, #88]	; 0x58
 80108cc:	9315      	str	r3, [sp, #84]	; 0x54
 80108ce:	2b07      	cmp	r3, #7
 80108d0:	dd07      	ble.n	80108e2 <_vfiprintf_r+0x86e>
 80108d2:	9903      	ldr	r1, [sp, #12]
 80108d4:	9806      	ldr	r0, [sp, #24]
 80108d6:	aa14      	add	r2, sp, #80	; 0x50
 80108d8:	f7ff fb97 	bl	801000a <__sprint_r>
 80108dc:	2800      	cmp	r0, #0
 80108de:	d132      	bne.n	8010946 <_vfiprintf_r+0x8d2>
 80108e0:	a917      	add	r1, sp, #92	; 0x5c
 80108e2:	000d      	movs	r5, r1
 80108e4:	3f10      	subs	r7, #16
 80108e6:	e67e      	b.n	80105e6 <_vfiprintf_r+0x572>
 80108e8:	2010      	movs	r0, #16
 80108ea:	1812      	adds	r2, r2, r0
 80108ec:	6068      	str	r0, [r5, #4]
 80108ee:	9216      	str	r2, [sp, #88]	; 0x58
 80108f0:	9315      	str	r3, [sp, #84]	; 0x54
 80108f2:	2b07      	cmp	r3, #7
 80108f4:	dd07      	ble.n	8010906 <_vfiprintf_r+0x892>
 80108f6:	9903      	ldr	r1, [sp, #12]
 80108f8:	9806      	ldr	r0, [sp, #24]
 80108fa:	aa14      	add	r2, sp, #80	; 0x50
 80108fc:	f7ff fb85 	bl	801000a <__sprint_r>
 8010900:	2800      	cmp	r0, #0
 8010902:	d120      	bne.n	8010946 <_vfiprintf_r+0x8d2>
 8010904:	a917      	add	r1, sp, #92	; 0x5c
 8010906:	000d      	movs	r5, r1
 8010908:	3f10      	subs	r7, #16
 801090a:	e68b      	b.n	8010624 <_vfiprintf_r+0x5b0>
 801090c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801090e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010910:	2610      	movs	r6, #16
 8010912:	1a9c      	subs	r4, r3, r2
 8010914:	2c00      	cmp	r4, #0
 8010916:	dc00      	bgt.n	801091a <_vfiprintf_r+0x8a6>
 8010918:	e6b7      	b.n	801068a <_vfiprintf_r+0x616>
 801091a:	9915      	ldr	r1, [sp, #84]	; 0x54
 801091c:	4a3b      	ldr	r2, [pc, #236]	; (8010a0c <_vfiprintf_r+0x998>)
 801091e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010920:	3101      	adds	r1, #1
 8010922:	602a      	str	r2, [r5, #0]
 8010924:	2c10      	cmp	r4, #16
 8010926:	dc22      	bgt.n	801096e <_vfiprintf_r+0x8fa>
 8010928:	606c      	str	r4, [r5, #4]
 801092a:	18e4      	adds	r4, r4, r3
 801092c:	9416      	str	r4, [sp, #88]	; 0x58
 801092e:	9115      	str	r1, [sp, #84]	; 0x54
 8010930:	2907      	cmp	r1, #7
 8010932:	dc00      	bgt.n	8010936 <_vfiprintf_r+0x8c2>
 8010934:	e6a9      	b.n	801068a <_vfiprintf_r+0x616>
 8010936:	9903      	ldr	r1, [sp, #12]
 8010938:	9806      	ldr	r0, [sp, #24]
 801093a:	aa14      	add	r2, sp, #80	; 0x50
 801093c:	f7ff fb65 	bl	801000a <__sprint_r>
 8010940:	2800      	cmp	r0, #0
 8010942:	d100      	bne.n	8010946 <_vfiprintf_r+0x8d2>
 8010944:	e6a1      	b.n	801068a <_vfiprintf_r+0x616>
 8010946:	9b03      	ldr	r3, [sp, #12]
 8010948:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801094a:	07db      	lsls	r3, r3, #31
 801094c:	d407      	bmi.n	801095e <_vfiprintf_r+0x8ea>
 801094e:	9b03      	ldr	r3, [sp, #12]
 8010950:	899b      	ldrh	r3, [r3, #12]
 8010952:	059b      	lsls	r3, r3, #22
 8010954:	d403      	bmi.n	801095e <_vfiprintf_r+0x8ea>
 8010956:	9b03      	ldr	r3, [sp, #12]
 8010958:	6d98      	ldr	r0, [r3, #88]	; 0x58
 801095a:	f7fa f808 	bl	800a96e <__retarget_lock_release_recursive>
 801095e:	9b03      	ldr	r3, [sp, #12]
 8010960:	899b      	ldrh	r3, [r3, #12]
 8010962:	065b      	lsls	r3, r3, #25
 8010964:	d401      	bmi.n	801096a <_vfiprintf_r+0x8f6>
 8010966:	f7ff fbc3 	bl	80100f0 <_vfiprintf_r+0x7c>
 801096a:	f7ff fbbe 	bl	80100ea <_vfiprintf_r+0x76>
 801096e:	3310      	adds	r3, #16
 8010970:	606e      	str	r6, [r5, #4]
 8010972:	9316      	str	r3, [sp, #88]	; 0x58
 8010974:	9115      	str	r1, [sp, #84]	; 0x54
 8010976:	3508      	adds	r5, #8
 8010978:	2907      	cmp	r1, #7
 801097a:	dd07      	ble.n	801098c <_vfiprintf_r+0x918>
 801097c:	9903      	ldr	r1, [sp, #12]
 801097e:	9806      	ldr	r0, [sp, #24]
 8010980:	aa14      	add	r2, sp, #80	; 0x50
 8010982:	f7ff fb42 	bl	801000a <__sprint_r>
 8010986:	2800      	cmp	r0, #0
 8010988:	d1dd      	bne.n	8010946 <_vfiprintf_r+0x8d2>
 801098a:	ad17      	add	r5, sp, #92	; 0x5c
 801098c:	3c10      	subs	r4, #16
 801098e:	e7c4      	b.n	801091a <_vfiprintf_r+0x8a6>
 8010990:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010992:	2b00      	cmp	r3, #0
 8010994:	d102      	bne.n	801099c <_vfiprintf_r+0x928>
 8010996:	2300      	movs	r3, #0
 8010998:	9315      	str	r3, [sp, #84]	; 0x54
 801099a:	e7d4      	b.n	8010946 <_vfiprintf_r+0x8d2>
 801099c:	9903      	ldr	r1, [sp, #12]
 801099e:	9806      	ldr	r0, [sp, #24]
 80109a0:	aa14      	add	r2, sp, #80	; 0x50
 80109a2:	f7ff fb32 	bl	801000a <__sprint_r>
 80109a6:	2800      	cmp	r0, #0
 80109a8:	d0f5      	beq.n	8010996 <_vfiprintf_r+0x922>
 80109aa:	e7cc      	b.n	8010946 <_vfiprintf_r+0x8d2>
 80109ac:	0027      	movs	r7, r4
 80109ae:	2a00      	cmp	r2, #0
 80109b0:	d100      	bne.n	80109b4 <_vfiprintf_r+0x940>
 80109b2:	e51b      	b.n	80103ec <_vfiprintf_r+0x378>
 80109b4:	2b01      	cmp	r3, #1
 80109b6:	d100      	bne.n	80109ba <_vfiprintf_r+0x946>
 80109b8:	e6fe      	b.n	80107b8 <_vfiprintf_r+0x744>
 80109ba:	ae40      	add	r6, sp, #256	; 0x100
 80109bc:	2b02      	cmp	r3, #2
 80109be:	d100      	bne.n	80109c2 <_vfiprintf_r+0x94e>
 80109c0:	e743      	b.n	801084a <_vfiprintf_r+0x7d6>
 80109c2:	2307      	movs	r3, #7
 80109c4:	469c      	mov	ip, r3
 80109c6:	4663      	mov	r3, ip
 80109c8:	9900      	ldr	r1, [sp, #0]
 80109ca:	0032      	movs	r2, r6
 80109cc:	400b      	ands	r3, r1
 80109ce:	9901      	ldr	r1, [sp, #4]
 80109d0:	3e01      	subs	r6, #1
 80109d2:	074c      	lsls	r4, r1, #29
 80109d4:	9900      	ldr	r1, [sp, #0]
 80109d6:	3330      	adds	r3, #48	; 0x30
 80109d8:	08c8      	lsrs	r0, r1, #3
 80109da:	9901      	ldr	r1, [sp, #4]
 80109dc:	4304      	orrs	r4, r0
 80109de:	08c9      	lsrs	r1, r1, #3
 80109e0:	9101      	str	r1, [sp, #4]
 80109e2:	0021      	movs	r1, r4
 80109e4:	9801      	ldr	r0, [sp, #4]
 80109e6:	7033      	strb	r3, [r6, #0]
 80109e8:	9400      	str	r4, [sp, #0]
 80109ea:	4301      	orrs	r1, r0
 80109ec:	d1eb      	bne.n	80109c6 <_vfiprintf_r+0x952>
 80109ee:	07f9      	lsls	r1, r7, #31
 80109f0:	d505      	bpl.n	80109fe <_vfiprintf_r+0x98a>
 80109f2:	2b30      	cmp	r3, #48	; 0x30
 80109f4:	d003      	beq.n	80109fe <_vfiprintf_r+0x98a>
 80109f6:	2330      	movs	r3, #48	; 0x30
 80109f8:	3e01      	subs	r6, #1
 80109fa:	7033      	strb	r3, [r6, #0]
 80109fc:	1e96      	subs	r6, r2, #2
 80109fe:	9b05      	ldr	r3, [sp, #20]
 8010a00:	003c      	movs	r4, r7
 8010a02:	930b      	str	r3, [sp, #44]	; 0x2c
 8010a04:	ab40      	add	r3, sp, #256	; 0x100
 8010a06:	1b9b      	subs	r3, r3, r6
 8010a08:	9305      	str	r3, [sp, #20]
 8010a0a:	e575      	b.n	80104f8 <_vfiprintf_r+0x484>
 8010a0c:	08012f79 	.word	0x08012f79

08010a10 <__sbprintf>:
 8010a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a12:	0015      	movs	r5, r2
 8010a14:	2202      	movs	r2, #2
 8010a16:	4c1e      	ldr	r4, [pc, #120]	; (8010a90 <__sbprintf+0x80>)
 8010a18:	001f      	movs	r7, r3
 8010a1a:	898b      	ldrh	r3, [r1, #12]
 8010a1c:	44a5      	add	sp, r4
 8010a1e:	4393      	bics	r3, r2
 8010a20:	466a      	mov	r2, sp
 8010a22:	8193      	strh	r3, [r2, #12]
 8010a24:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8010a26:	0006      	movs	r6, r0
 8010a28:	9319      	str	r3, [sp, #100]	; 0x64
 8010a2a:	89cb      	ldrh	r3, [r1, #14]
 8010a2c:	a816      	add	r0, sp, #88	; 0x58
 8010a2e:	81d3      	strh	r3, [r2, #14]
 8010a30:	69cb      	ldr	r3, [r1, #28]
 8010a32:	000c      	movs	r4, r1
 8010a34:	9307      	str	r3, [sp, #28]
 8010a36:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8010a38:	9309      	str	r3, [sp, #36]	; 0x24
 8010a3a:	ab1a      	add	r3, sp, #104	; 0x68
 8010a3c:	9300      	str	r3, [sp, #0]
 8010a3e:	9304      	str	r3, [sp, #16]
 8010a40:	2380      	movs	r3, #128	; 0x80
 8010a42:	00db      	lsls	r3, r3, #3
 8010a44:	9302      	str	r3, [sp, #8]
 8010a46:	9305      	str	r3, [sp, #20]
 8010a48:	2300      	movs	r3, #0
 8010a4a:	9306      	str	r3, [sp, #24]
 8010a4c:	f7f9 ff8c 	bl	800a968 <__retarget_lock_init_recursive>
 8010a50:	002a      	movs	r2, r5
 8010a52:	003b      	movs	r3, r7
 8010a54:	4669      	mov	r1, sp
 8010a56:	0030      	movs	r0, r6
 8010a58:	f7ff fb0c 	bl	8010074 <_vfiprintf_r>
 8010a5c:	1e05      	subs	r5, r0, #0
 8010a5e:	db07      	blt.n	8010a70 <__sbprintf+0x60>
 8010a60:	4669      	mov	r1, sp
 8010a62:	0030      	movs	r0, r6
 8010a64:	f7fd fdf6 	bl	800e654 <_fflush_r>
 8010a68:	2800      	cmp	r0, #0
 8010a6a:	d001      	beq.n	8010a70 <__sbprintf+0x60>
 8010a6c:	2501      	movs	r5, #1
 8010a6e:	426d      	negs	r5, r5
 8010a70:	466b      	mov	r3, sp
 8010a72:	899a      	ldrh	r2, [r3, #12]
 8010a74:	2340      	movs	r3, #64	; 0x40
 8010a76:	421a      	tst	r2, r3
 8010a78:	d002      	beq.n	8010a80 <__sbprintf+0x70>
 8010a7a:	89a2      	ldrh	r2, [r4, #12]
 8010a7c:	4313      	orrs	r3, r2
 8010a7e:	81a3      	strh	r3, [r4, #12]
 8010a80:	9816      	ldr	r0, [sp, #88]	; 0x58
 8010a82:	f7f9 ff72 	bl	800a96a <__retarget_lock_close_recursive>
 8010a86:	0028      	movs	r0, r5
 8010a88:	4b02      	ldr	r3, [pc, #8]	; (8010a94 <__sbprintf+0x84>)
 8010a8a:	449d      	add	sp, r3
 8010a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a8e:	46c0      	nop			; (mov r8, r8)
 8010a90:	fffffb94 	.word	0xfffffb94
 8010a94:	0000046c 	.word	0x0000046c

08010a98 <__sfvwrite_r>:
 8010a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a9a:	6893      	ldr	r3, [r2, #8]
 8010a9c:	b087      	sub	sp, #28
 8010a9e:	000c      	movs	r4, r1
 8010aa0:	9002      	str	r0, [sp, #8]
 8010aa2:	9204      	str	r2, [sp, #16]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d102      	bne.n	8010aae <__sfvwrite_r+0x16>
 8010aa8:	2000      	movs	r0, #0
 8010aaa:	b007      	add	sp, #28
 8010aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010aae:	898b      	ldrh	r3, [r1, #12]
 8010ab0:	071b      	lsls	r3, r3, #28
 8010ab2:	d557      	bpl.n	8010b64 <__sfvwrite_r+0xcc>
 8010ab4:	690b      	ldr	r3, [r1, #16]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d054      	beq.n	8010b64 <__sfvwrite_r+0xcc>
 8010aba:	9b04      	ldr	r3, [sp, #16]
 8010abc:	2202      	movs	r2, #2
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	9301      	str	r3, [sp, #4]
 8010ac2:	89a3      	ldrh	r3, [r4, #12]
 8010ac4:	001f      	movs	r7, r3
 8010ac6:	4017      	ands	r7, r2
 8010ac8:	4213      	tst	r3, r2
 8010aca:	d171      	bne.n	8010bb0 <__sfvwrite_r+0x118>
 8010acc:	2201      	movs	r2, #1
 8010ace:	2101      	movs	r1, #1
 8010ad0:	401a      	ands	r2, r3
 8010ad2:	420b      	tst	r3, r1
 8010ad4:	d100      	bne.n	8010ad8 <__sfvwrite_r+0x40>
 8010ad6:	e0a5      	b.n	8010c24 <__sfvwrite_r+0x18c>
 8010ad8:	0038      	movs	r0, r7
 8010ada:	003e      	movs	r6, r7
 8010adc:	9703      	str	r7, [sp, #12]
 8010ade:	9b03      	ldr	r3, [sp, #12]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d100      	bne.n	8010ae6 <__sfvwrite_r+0x4e>
 8010ae4:	e10b      	b.n	8010cfe <__sfvwrite_r+0x266>
 8010ae6:	2800      	cmp	r0, #0
 8010ae8:	d10a      	bne.n	8010b00 <__sfvwrite_r+0x68>
 8010aea:	001a      	movs	r2, r3
 8010aec:	210a      	movs	r1, #10
 8010aee:	0030      	movs	r0, r6
 8010af0:	f7fd fe2a 	bl	800e748 <memchr>
 8010af4:	9b03      	ldr	r3, [sp, #12]
 8010af6:	1c5f      	adds	r7, r3, #1
 8010af8:	2800      	cmp	r0, #0
 8010afa:	d001      	beq.n	8010b00 <__sfvwrite_r+0x68>
 8010afc:	3001      	adds	r0, #1
 8010afe:	1b87      	subs	r7, r0, r6
 8010b00:	9b03      	ldr	r3, [sp, #12]
 8010b02:	9705      	str	r7, [sp, #20]
 8010b04:	429f      	cmp	r7, r3
 8010b06:	d900      	bls.n	8010b0a <__sfvwrite_r+0x72>
 8010b08:	9305      	str	r3, [sp, #20]
 8010b0a:	6820      	ldr	r0, [r4, #0]
 8010b0c:	6922      	ldr	r2, [r4, #16]
 8010b0e:	68a5      	ldr	r5, [r4, #8]
 8010b10:	6963      	ldr	r3, [r4, #20]
 8010b12:	4290      	cmp	r0, r2
 8010b14:	d800      	bhi.n	8010b18 <__sfvwrite_r+0x80>
 8010b16:	e0fb      	b.n	8010d10 <__sfvwrite_r+0x278>
 8010b18:	9a05      	ldr	r2, [sp, #20]
 8010b1a:	18ed      	adds	r5, r5, r3
 8010b1c:	42aa      	cmp	r2, r5
 8010b1e:	dc00      	bgt.n	8010b22 <__sfvwrite_r+0x8a>
 8010b20:	e0f6      	b.n	8010d10 <__sfvwrite_r+0x278>
 8010b22:	0031      	movs	r1, r6
 8010b24:	002a      	movs	r2, r5
 8010b26:	f000 fa1e 	bl	8010f66 <memmove>
 8010b2a:	6823      	ldr	r3, [r4, #0]
 8010b2c:	0021      	movs	r1, r4
 8010b2e:	195b      	adds	r3, r3, r5
 8010b30:	9802      	ldr	r0, [sp, #8]
 8010b32:	6023      	str	r3, [r4, #0]
 8010b34:	f7fd fd8e 	bl	800e654 <_fflush_r>
 8010b38:	2800      	cmp	r0, #0
 8010b3a:	d16e      	bne.n	8010c1a <__sfvwrite_r+0x182>
 8010b3c:	2001      	movs	r0, #1
 8010b3e:	1b7f      	subs	r7, r7, r5
 8010b40:	d105      	bne.n	8010b4e <__sfvwrite_r+0xb6>
 8010b42:	0021      	movs	r1, r4
 8010b44:	9802      	ldr	r0, [sp, #8]
 8010b46:	f7fd fd85 	bl	800e654 <_fflush_r>
 8010b4a:	2800      	cmp	r0, #0
 8010b4c:	d165      	bne.n	8010c1a <__sfvwrite_r+0x182>
 8010b4e:	9b03      	ldr	r3, [sp, #12]
 8010b50:	9a04      	ldr	r2, [sp, #16]
 8010b52:	1b5b      	subs	r3, r3, r5
 8010b54:	9303      	str	r3, [sp, #12]
 8010b56:	9b04      	ldr	r3, [sp, #16]
 8010b58:	1976      	adds	r6, r6, r5
 8010b5a:	689b      	ldr	r3, [r3, #8]
 8010b5c:	1b5b      	subs	r3, r3, r5
 8010b5e:	6093      	str	r3, [r2, #8]
 8010b60:	d1bd      	bne.n	8010ade <__sfvwrite_r+0x46>
 8010b62:	e7a1      	b.n	8010aa8 <__sfvwrite_r+0x10>
 8010b64:	0021      	movs	r1, r4
 8010b66:	9802      	ldr	r0, [sp, #8]
 8010b68:	f000 f932 	bl	8010dd0 <__swsetup_r>
 8010b6c:	2800      	cmp	r0, #0
 8010b6e:	d0a4      	beq.n	8010aba <__sfvwrite_r+0x22>
 8010b70:	2001      	movs	r0, #1
 8010b72:	4240      	negs	r0, r0
 8010b74:	e799      	b.n	8010aaa <__sfvwrite_r+0x12>
 8010b76:	9b01      	ldr	r3, [sp, #4]
 8010b78:	681e      	ldr	r6, [r3, #0]
 8010b7a:	685d      	ldr	r5, [r3, #4]
 8010b7c:	3308      	adds	r3, #8
 8010b7e:	9301      	str	r3, [sp, #4]
 8010b80:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8010b82:	69e1      	ldr	r1, [r4, #28]
 8010b84:	2d00      	cmp	r5, #0
 8010b86:	d0f6      	beq.n	8010b76 <__sfvwrite_r+0xde>
 8010b88:	4a6e      	ldr	r2, [pc, #440]	; (8010d44 <__sfvwrite_r+0x2ac>)
 8010b8a:	002b      	movs	r3, r5
 8010b8c:	4295      	cmp	r5, r2
 8010b8e:	d900      	bls.n	8010b92 <__sfvwrite_r+0xfa>
 8010b90:	0013      	movs	r3, r2
 8010b92:	0032      	movs	r2, r6
 8010b94:	9802      	ldr	r0, [sp, #8]
 8010b96:	47b8      	blx	r7
 8010b98:	2800      	cmp	r0, #0
 8010b9a:	dd3e      	ble.n	8010c1a <__sfvwrite_r+0x182>
 8010b9c:	9b04      	ldr	r3, [sp, #16]
 8010b9e:	9a04      	ldr	r2, [sp, #16]
 8010ba0:	689b      	ldr	r3, [r3, #8]
 8010ba2:	1836      	adds	r6, r6, r0
 8010ba4:	1a1b      	subs	r3, r3, r0
 8010ba6:	1a2d      	subs	r5, r5, r0
 8010ba8:	6093      	str	r3, [r2, #8]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d1e8      	bne.n	8010b80 <__sfvwrite_r+0xe8>
 8010bae:	e77b      	b.n	8010aa8 <__sfvwrite_r+0x10>
 8010bb0:	2600      	movs	r6, #0
 8010bb2:	0035      	movs	r5, r6
 8010bb4:	e7e4      	b.n	8010b80 <__sfvwrite_r+0xe8>
 8010bb6:	9b01      	ldr	r3, [sp, #4]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	9303      	str	r3, [sp, #12]
 8010bbc:	9b01      	ldr	r3, [sp, #4]
 8010bbe:	685d      	ldr	r5, [r3, #4]
 8010bc0:	3308      	adds	r3, #8
 8010bc2:	9301      	str	r3, [sp, #4]
 8010bc4:	220c      	movs	r2, #12
 8010bc6:	5ea3      	ldrsh	r3, [r4, r2]
 8010bc8:	6820      	ldr	r0, [r4, #0]
 8010bca:	68a6      	ldr	r6, [r4, #8]
 8010bcc:	2d00      	cmp	r5, #0
 8010bce:	d0f2      	beq.n	8010bb6 <__sfvwrite_r+0x11e>
 8010bd0:	2180      	movs	r1, #128	; 0x80
 8010bd2:	0089      	lsls	r1, r1, #2
 8010bd4:	b29a      	uxth	r2, r3
 8010bd6:	420b      	tst	r3, r1
 8010bd8:	d062      	beq.n	8010ca0 <__sfvwrite_r+0x208>
 8010bda:	42ae      	cmp	r6, r5
 8010bdc:	d837      	bhi.n	8010c4e <__sfvwrite_r+0x1b6>
 8010bde:	2390      	movs	r3, #144	; 0x90
 8010be0:	00db      	lsls	r3, r3, #3
 8010be2:	421a      	tst	r2, r3
 8010be4:	d033      	beq.n	8010c4e <__sfvwrite_r+0x1b6>
 8010be6:	6921      	ldr	r1, [r4, #16]
 8010be8:	1a43      	subs	r3, r0, r1
 8010bea:	2003      	movs	r0, #3
 8010bec:	9305      	str	r3, [sp, #20]
 8010bee:	6963      	ldr	r3, [r4, #20]
 8010bf0:	4343      	muls	r3, r0
 8010bf2:	0fdf      	lsrs	r7, r3, #31
 8010bf4:	18ff      	adds	r7, r7, r3
 8010bf6:	9b05      	ldr	r3, [sp, #20]
 8010bf8:	107f      	asrs	r7, r7, #1
 8010bfa:	3301      	adds	r3, #1
 8010bfc:	195b      	adds	r3, r3, r5
 8010bfe:	42bb      	cmp	r3, r7
 8010c00:	d900      	bls.n	8010c04 <__sfvwrite_r+0x16c>
 8010c02:	001f      	movs	r7, r3
 8010c04:	0552      	lsls	r2, r2, #21
 8010c06:	d53c      	bpl.n	8010c82 <__sfvwrite_r+0x1ea>
 8010c08:	0039      	movs	r1, r7
 8010c0a:	9802      	ldr	r0, [sp, #8]
 8010c0c:	f7f8 fb56 	bl	80092bc <_malloc_r>
 8010c10:	1e06      	subs	r6, r0, #0
 8010c12:	d10a      	bne.n	8010c2a <__sfvwrite_r+0x192>
 8010c14:	230c      	movs	r3, #12
 8010c16:	9a02      	ldr	r2, [sp, #8]
 8010c18:	6013      	str	r3, [r2, #0]
 8010c1a:	2340      	movs	r3, #64	; 0x40
 8010c1c:	89a2      	ldrh	r2, [r4, #12]
 8010c1e:	4313      	orrs	r3, r2
 8010c20:	81a3      	strh	r3, [r4, #12]
 8010c22:	e7a5      	b.n	8010b70 <__sfvwrite_r+0xd8>
 8010c24:	0015      	movs	r5, r2
 8010c26:	9203      	str	r2, [sp, #12]
 8010c28:	e7cc      	b.n	8010bc4 <__sfvwrite_r+0x12c>
 8010c2a:	9a05      	ldr	r2, [sp, #20]
 8010c2c:	6921      	ldr	r1, [r4, #16]
 8010c2e:	f7f9 feaa 	bl	800a986 <memcpy>
 8010c32:	89a2      	ldrh	r2, [r4, #12]
 8010c34:	4b44      	ldr	r3, [pc, #272]	; (8010d48 <__sfvwrite_r+0x2b0>)
 8010c36:	401a      	ands	r2, r3
 8010c38:	2380      	movs	r3, #128	; 0x80
 8010c3a:	4313      	orrs	r3, r2
 8010c3c:	81a3      	strh	r3, [r4, #12]
 8010c3e:	9b05      	ldr	r3, [sp, #20]
 8010c40:	6126      	str	r6, [r4, #16]
 8010c42:	18f6      	adds	r6, r6, r3
 8010c44:	6026      	str	r6, [r4, #0]
 8010c46:	002e      	movs	r6, r5
 8010c48:	6167      	str	r7, [r4, #20]
 8010c4a:	1aff      	subs	r7, r7, r3
 8010c4c:	60a7      	str	r7, [r4, #8]
 8010c4e:	002f      	movs	r7, r5
 8010c50:	42ae      	cmp	r6, r5
 8010c52:	d900      	bls.n	8010c56 <__sfvwrite_r+0x1be>
 8010c54:	002e      	movs	r6, r5
 8010c56:	0032      	movs	r2, r6
 8010c58:	9903      	ldr	r1, [sp, #12]
 8010c5a:	6820      	ldr	r0, [r4, #0]
 8010c5c:	f000 f983 	bl	8010f66 <memmove>
 8010c60:	68a3      	ldr	r3, [r4, #8]
 8010c62:	1b9b      	subs	r3, r3, r6
 8010c64:	60a3      	str	r3, [r4, #8]
 8010c66:	6823      	ldr	r3, [r4, #0]
 8010c68:	199b      	adds	r3, r3, r6
 8010c6a:	6023      	str	r3, [r4, #0]
 8010c6c:	9b03      	ldr	r3, [sp, #12]
 8010c6e:	9a04      	ldr	r2, [sp, #16]
 8010c70:	19db      	adds	r3, r3, r7
 8010c72:	9303      	str	r3, [sp, #12]
 8010c74:	9b04      	ldr	r3, [sp, #16]
 8010c76:	1bed      	subs	r5, r5, r7
 8010c78:	689b      	ldr	r3, [r3, #8]
 8010c7a:	1bdb      	subs	r3, r3, r7
 8010c7c:	6093      	str	r3, [r2, #8]
 8010c7e:	d1a1      	bne.n	8010bc4 <__sfvwrite_r+0x12c>
 8010c80:	e712      	b.n	8010aa8 <__sfvwrite_r+0x10>
 8010c82:	003a      	movs	r2, r7
 8010c84:	9802      	ldr	r0, [sp, #8]
 8010c86:	f7fe fcd7 	bl	800f638 <_realloc_r>
 8010c8a:	1e06      	subs	r6, r0, #0
 8010c8c:	d1d7      	bne.n	8010c3e <__sfvwrite_r+0x1a6>
 8010c8e:	6921      	ldr	r1, [r4, #16]
 8010c90:	9802      	ldr	r0, [sp, #8]
 8010c92:	f7f9 fef3 	bl	800aa7c <_free_r>
 8010c96:	2280      	movs	r2, #128	; 0x80
 8010c98:	89a3      	ldrh	r3, [r4, #12]
 8010c9a:	4393      	bics	r3, r2
 8010c9c:	81a3      	strh	r3, [r4, #12]
 8010c9e:	e7b9      	b.n	8010c14 <__sfvwrite_r+0x17c>
 8010ca0:	6923      	ldr	r3, [r4, #16]
 8010ca2:	4283      	cmp	r3, r0
 8010ca4:	d302      	bcc.n	8010cac <__sfvwrite_r+0x214>
 8010ca6:	6967      	ldr	r7, [r4, #20]
 8010ca8:	42af      	cmp	r7, r5
 8010caa:	d916      	bls.n	8010cda <__sfvwrite_r+0x242>
 8010cac:	42ae      	cmp	r6, r5
 8010cae:	d900      	bls.n	8010cb2 <__sfvwrite_r+0x21a>
 8010cb0:	002e      	movs	r6, r5
 8010cb2:	0032      	movs	r2, r6
 8010cb4:	9903      	ldr	r1, [sp, #12]
 8010cb6:	f000 f956 	bl	8010f66 <memmove>
 8010cba:	68a3      	ldr	r3, [r4, #8]
 8010cbc:	6822      	ldr	r2, [r4, #0]
 8010cbe:	1b9b      	subs	r3, r3, r6
 8010cc0:	1992      	adds	r2, r2, r6
 8010cc2:	0037      	movs	r7, r6
 8010cc4:	60a3      	str	r3, [r4, #8]
 8010cc6:	6022      	str	r2, [r4, #0]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d1cf      	bne.n	8010c6c <__sfvwrite_r+0x1d4>
 8010ccc:	0021      	movs	r1, r4
 8010cce:	9802      	ldr	r0, [sp, #8]
 8010cd0:	f7fd fcc0 	bl	800e654 <_fflush_r>
 8010cd4:	2800      	cmp	r0, #0
 8010cd6:	d0c9      	beq.n	8010c6c <__sfvwrite_r+0x1d4>
 8010cd8:	e79f      	b.n	8010c1a <__sfvwrite_r+0x182>
 8010cda:	4b1c      	ldr	r3, [pc, #112]	; (8010d4c <__sfvwrite_r+0x2b4>)
 8010cdc:	0028      	movs	r0, r5
 8010cde:	429d      	cmp	r5, r3
 8010ce0:	d900      	bls.n	8010ce4 <__sfvwrite_r+0x24c>
 8010ce2:	481b      	ldr	r0, [pc, #108]	; (8010d50 <__sfvwrite_r+0x2b8>)
 8010ce4:	0039      	movs	r1, r7
 8010ce6:	f7ef fab3 	bl	8000250 <__divsi3>
 8010cea:	003b      	movs	r3, r7
 8010cec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010cee:	4343      	muls	r3, r0
 8010cf0:	9a03      	ldr	r2, [sp, #12]
 8010cf2:	69e1      	ldr	r1, [r4, #28]
 8010cf4:	9802      	ldr	r0, [sp, #8]
 8010cf6:	47b0      	blx	r6
 8010cf8:	1e07      	subs	r7, r0, #0
 8010cfa:	dcb7      	bgt.n	8010c6c <__sfvwrite_r+0x1d4>
 8010cfc:	e78d      	b.n	8010c1a <__sfvwrite_r+0x182>
 8010cfe:	9b01      	ldr	r3, [sp, #4]
 8010d00:	2000      	movs	r0, #0
 8010d02:	681e      	ldr	r6, [r3, #0]
 8010d04:	685b      	ldr	r3, [r3, #4]
 8010d06:	9303      	str	r3, [sp, #12]
 8010d08:	9b01      	ldr	r3, [sp, #4]
 8010d0a:	3308      	adds	r3, #8
 8010d0c:	9301      	str	r3, [sp, #4]
 8010d0e:	e6e6      	b.n	8010ade <__sfvwrite_r+0x46>
 8010d10:	9a05      	ldr	r2, [sp, #20]
 8010d12:	4293      	cmp	r3, r2
 8010d14:	dc08      	bgt.n	8010d28 <__sfvwrite_r+0x290>
 8010d16:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8010d18:	0032      	movs	r2, r6
 8010d1a:	69e1      	ldr	r1, [r4, #28]
 8010d1c:	9802      	ldr	r0, [sp, #8]
 8010d1e:	47a8      	blx	r5
 8010d20:	1e05      	subs	r5, r0, #0
 8010d22:	dd00      	ble.n	8010d26 <__sfvwrite_r+0x28e>
 8010d24:	e70a      	b.n	8010b3c <__sfvwrite_r+0xa4>
 8010d26:	e778      	b.n	8010c1a <__sfvwrite_r+0x182>
 8010d28:	9a05      	ldr	r2, [sp, #20]
 8010d2a:	0031      	movs	r1, r6
 8010d2c:	f000 f91b 	bl	8010f66 <memmove>
 8010d30:	9a05      	ldr	r2, [sp, #20]
 8010d32:	68a3      	ldr	r3, [r4, #8]
 8010d34:	0015      	movs	r5, r2
 8010d36:	1a9b      	subs	r3, r3, r2
 8010d38:	60a3      	str	r3, [r4, #8]
 8010d3a:	6823      	ldr	r3, [r4, #0]
 8010d3c:	189b      	adds	r3, r3, r2
 8010d3e:	6023      	str	r3, [r4, #0]
 8010d40:	e6fc      	b.n	8010b3c <__sfvwrite_r+0xa4>
 8010d42:	46c0      	nop			; (mov r8, r8)
 8010d44:	7ffffc00 	.word	0x7ffffc00
 8010d48:	fffffb7f 	.word	0xfffffb7f
 8010d4c:	7ffffffe 	.word	0x7ffffffe
 8010d50:	7fffffff 	.word	0x7fffffff

08010d54 <__submore>:
 8010d54:	000b      	movs	r3, r1
 8010d56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010d58:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8010d5a:	3340      	adds	r3, #64	; 0x40
 8010d5c:	000c      	movs	r4, r1
 8010d5e:	429d      	cmp	r5, r3
 8010d60:	d11c      	bne.n	8010d9c <__submore+0x48>
 8010d62:	2680      	movs	r6, #128	; 0x80
 8010d64:	00f6      	lsls	r6, r6, #3
 8010d66:	0031      	movs	r1, r6
 8010d68:	f7f8 faa8 	bl	80092bc <_malloc_r>
 8010d6c:	2800      	cmp	r0, #0
 8010d6e:	d102      	bne.n	8010d76 <__submore+0x22>
 8010d70:	2001      	movs	r0, #1
 8010d72:	4240      	negs	r0, r0
 8010d74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010d76:	0023      	movs	r3, r4
 8010d78:	6320      	str	r0, [r4, #48]	; 0x30
 8010d7a:	6366      	str	r6, [r4, #52]	; 0x34
 8010d7c:	3342      	adds	r3, #66	; 0x42
 8010d7e:	781a      	ldrb	r2, [r3, #0]
 8010d80:	4b10      	ldr	r3, [pc, #64]	; (8010dc4 <__submore+0x70>)
 8010d82:	54c2      	strb	r2, [r0, r3]
 8010d84:	0023      	movs	r3, r4
 8010d86:	3341      	adds	r3, #65	; 0x41
 8010d88:	781a      	ldrb	r2, [r3, #0]
 8010d8a:	4b0f      	ldr	r3, [pc, #60]	; (8010dc8 <__submore+0x74>)
 8010d8c:	54c2      	strb	r2, [r0, r3]
 8010d8e:	782a      	ldrb	r2, [r5, #0]
 8010d90:	4b0e      	ldr	r3, [pc, #56]	; (8010dcc <__submore+0x78>)
 8010d92:	54c2      	strb	r2, [r0, r3]
 8010d94:	18c0      	adds	r0, r0, r3
 8010d96:	6020      	str	r0, [r4, #0]
 8010d98:	2000      	movs	r0, #0
 8010d9a:	e7eb      	b.n	8010d74 <__submore+0x20>
 8010d9c:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8010d9e:	0029      	movs	r1, r5
 8010da0:	0073      	lsls	r3, r6, #1
 8010da2:	001a      	movs	r2, r3
 8010da4:	9301      	str	r3, [sp, #4]
 8010da6:	f7fe fc47 	bl	800f638 <_realloc_r>
 8010daa:	1e05      	subs	r5, r0, #0
 8010dac:	d0e0      	beq.n	8010d70 <__submore+0x1c>
 8010dae:	1987      	adds	r7, r0, r6
 8010db0:	0001      	movs	r1, r0
 8010db2:	0032      	movs	r2, r6
 8010db4:	0038      	movs	r0, r7
 8010db6:	f7f9 fde6 	bl	800a986 <memcpy>
 8010dba:	9b01      	ldr	r3, [sp, #4]
 8010dbc:	6027      	str	r7, [r4, #0]
 8010dbe:	6325      	str	r5, [r4, #48]	; 0x30
 8010dc0:	6363      	str	r3, [r4, #52]	; 0x34
 8010dc2:	e7e9      	b.n	8010d98 <__submore+0x44>
 8010dc4:	000003ff 	.word	0x000003ff
 8010dc8:	000003fe 	.word	0x000003fe
 8010dcc:	000003fd 	.word	0x000003fd

08010dd0 <__swsetup_r>:
 8010dd0:	4b30      	ldr	r3, [pc, #192]	; (8010e94 <__swsetup_r+0xc4>)
 8010dd2:	b570      	push	{r4, r5, r6, lr}
 8010dd4:	0005      	movs	r5, r0
 8010dd6:	6818      	ldr	r0, [r3, #0]
 8010dd8:	000c      	movs	r4, r1
 8010dda:	2800      	cmp	r0, #0
 8010ddc:	d004      	beq.n	8010de8 <__swsetup_r+0x18>
 8010dde:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d101      	bne.n	8010de8 <__swsetup_r+0x18>
 8010de4:	f7f9 fbec 	bl	800a5c0 <__sinit>
 8010de8:	230c      	movs	r3, #12
 8010dea:	5ee2      	ldrsh	r2, [r4, r3]
 8010dec:	b293      	uxth	r3, r2
 8010dee:	0711      	lsls	r1, r2, #28
 8010df0:	d423      	bmi.n	8010e3a <__swsetup_r+0x6a>
 8010df2:	06d9      	lsls	r1, r3, #27
 8010df4:	d407      	bmi.n	8010e06 <__swsetup_r+0x36>
 8010df6:	2309      	movs	r3, #9
 8010df8:	2001      	movs	r0, #1
 8010dfa:	602b      	str	r3, [r5, #0]
 8010dfc:	3337      	adds	r3, #55	; 0x37
 8010dfe:	4313      	orrs	r3, r2
 8010e00:	81a3      	strh	r3, [r4, #12]
 8010e02:	4240      	negs	r0, r0
 8010e04:	bd70      	pop	{r4, r5, r6, pc}
 8010e06:	075b      	lsls	r3, r3, #29
 8010e08:	d513      	bpl.n	8010e32 <__swsetup_r+0x62>
 8010e0a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010e0c:	2900      	cmp	r1, #0
 8010e0e:	d008      	beq.n	8010e22 <__swsetup_r+0x52>
 8010e10:	0023      	movs	r3, r4
 8010e12:	3340      	adds	r3, #64	; 0x40
 8010e14:	4299      	cmp	r1, r3
 8010e16:	d002      	beq.n	8010e1e <__swsetup_r+0x4e>
 8010e18:	0028      	movs	r0, r5
 8010e1a:	f7f9 fe2f 	bl	800aa7c <_free_r>
 8010e1e:	2300      	movs	r3, #0
 8010e20:	6323      	str	r3, [r4, #48]	; 0x30
 8010e22:	2224      	movs	r2, #36	; 0x24
 8010e24:	89a3      	ldrh	r3, [r4, #12]
 8010e26:	4393      	bics	r3, r2
 8010e28:	81a3      	strh	r3, [r4, #12]
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	6063      	str	r3, [r4, #4]
 8010e2e:	6923      	ldr	r3, [r4, #16]
 8010e30:	6023      	str	r3, [r4, #0]
 8010e32:	2308      	movs	r3, #8
 8010e34:	89a2      	ldrh	r2, [r4, #12]
 8010e36:	4313      	orrs	r3, r2
 8010e38:	81a3      	strh	r3, [r4, #12]
 8010e3a:	6923      	ldr	r3, [r4, #16]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d10b      	bne.n	8010e58 <__swsetup_r+0x88>
 8010e40:	21a0      	movs	r1, #160	; 0xa0
 8010e42:	2280      	movs	r2, #128	; 0x80
 8010e44:	89a3      	ldrh	r3, [r4, #12]
 8010e46:	0089      	lsls	r1, r1, #2
 8010e48:	0092      	lsls	r2, r2, #2
 8010e4a:	400b      	ands	r3, r1
 8010e4c:	4293      	cmp	r3, r2
 8010e4e:	d003      	beq.n	8010e58 <__swsetup_r+0x88>
 8010e50:	0021      	movs	r1, r4
 8010e52:	0028      	movs	r0, r5
 8010e54:	f000 f8e8 	bl	8011028 <__smakebuf_r>
 8010e58:	220c      	movs	r2, #12
 8010e5a:	5ea3      	ldrsh	r3, [r4, r2]
 8010e5c:	2001      	movs	r0, #1
 8010e5e:	001a      	movs	r2, r3
 8010e60:	b299      	uxth	r1, r3
 8010e62:	4002      	ands	r2, r0
 8010e64:	4203      	tst	r3, r0
 8010e66:	d00f      	beq.n	8010e88 <__swsetup_r+0xb8>
 8010e68:	2200      	movs	r2, #0
 8010e6a:	60a2      	str	r2, [r4, #8]
 8010e6c:	6962      	ldr	r2, [r4, #20]
 8010e6e:	4252      	negs	r2, r2
 8010e70:	61a2      	str	r2, [r4, #24]
 8010e72:	2000      	movs	r0, #0
 8010e74:	6922      	ldr	r2, [r4, #16]
 8010e76:	4282      	cmp	r2, r0
 8010e78:	d1c4      	bne.n	8010e04 <__swsetup_r+0x34>
 8010e7a:	0609      	lsls	r1, r1, #24
 8010e7c:	d5c2      	bpl.n	8010e04 <__swsetup_r+0x34>
 8010e7e:	2240      	movs	r2, #64	; 0x40
 8010e80:	4313      	orrs	r3, r2
 8010e82:	81a3      	strh	r3, [r4, #12]
 8010e84:	3801      	subs	r0, #1
 8010e86:	e7bd      	b.n	8010e04 <__swsetup_r+0x34>
 8010e88:	0788      	lsls	r0, r1, #30
 8010e8a:	d400      	bmi.n	8010e8e <__swsetup_r+0xbe>
 8010e8c:	6962      	ldr	r2, [r4, #20]
 8010e8e:	60a2      	str	r2, [r4, #8]
 8010e90:	e7ef      	b.n	8010e72 <__swsetup_r+0xa2>
 8010e92:	46c0      	nop			; (mov r8, r8)
 8010e94:	200006e0 	.word	0x200006e0

08010e98 <__fputwc>:
 8010e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e9a:	b085      	sub	sp, #20
 8010e9c:	000e      	movs	r6, r1
 8010e9e:	0015      	movs	r5, r2
 8010ea0:	9001      	str	r0, [sp, #4]
 8010ea2:	f7f9 fccf 	bl	800a844 <__locale_mb_cur_max>
 8010ea6:	0004      	movs	r4, r0
 8010ea8:	2801      	cmp	r0, #1
 8010eaa:	d119      	bne.n	8010ee0 <__fputwc+0x48>
 8010eac:	1e73      	subs	r3, r6, #1
 8010eae:	2bfe      	cmp	r3, #254	; 0xfe
 8010eb0:	d816      	bhi.n	8010ee0 <__fputwc+0x48>
 8010eb2:	ab02      	add	r3, sp, #8
 8010eb4:	711e      	strb	r6, [r3, #4]
 8010eb6:	2700      	movs	r7, #0
 8010eb8:	42a7      	cmp	r7, r4
 8010eba:	d020      	beq.n	8010efe <__fputwc+0x66>
 8010ebc:	ab03      	add	r3, sp, #12
 8010ebe:	5dd9      	ldrb	r1, [r3, r7]
 8010ec0:	68ab      	ldr	r3, [r5, #8]
 8010ec2:	3b01      	subs	r3, #1
 8010ec4:	60ab      	str	r3, [r5, #8]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	da04      	bge.n	8010ed4 <__fputwc+0x3c>
 8010eca:	69aa      	ldr	r2, [r5, #24]
 8010ecc:	4293      	cmp	r3, r2
 8010ece:	db19      	blt.n	8010f04 <__fputwc+0x6c>
 8010ed0:	290a      	cmp	r1, #10
 8010ed2:	d017      	beq.n	8010f04 <__fputwc+0x6c>
 8010ed4:	682b      	ldr	r3, [r5, #0]
 8010ed6:	1c5a      	adds	r2, r3, #1
 8010ed8:	602a      	str	r2, [r5, #0]
 8010eda:	7019      	strb	r1, [r3, #0]
 8010edc:	3701      	adds	r7, #1
 8010ede:	e7eb      	b.n	8010eb8 <__fputwc+0x20>
 8010ee0:	002b      	movs	r3, r5
 8010ee2:	0032      	movs	r2, r6
 8010ee4:	9801      	ldr	r0, [sp, #4]
 8010ee6:	335c      	adds	r3, #92	; 0x5c
 8010ee8:	a903      	add	r1, sp, #12
 8010eea:	f000 f857 	bl	8010f9c <_wcrtomb_r>
 8010eee:	0004      	movs	r4, r0
 8010ef0:	1c43      	adds	r3, r0, #1
 8010ef2:	d1e0      	bne.n	8010eb6 <__fputwc+0x1e>
 8010ef4:	2340      	movs	r3, #64	; 0x40
 8010ef6:	0006      	movs	r6, r0
 8010ef8:	89aa      	ldrh	r2, [r5, #12]
 8010efa:	4313      	orrs	r3, r2
 8010efc:	81ab      	strh	r3, [r5, #12]
 8010efe:	0030      	movs	r0, r6
 8010f00:	b005      	add	sp, #20
 8010f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f04:	002a      	movs	r2, r5
 8010f06:	9801      	ldr	r0, [sp, #4]
 8010f08:	f000 f8cc 	bl	80110a4 <__swbuf_r>
 8010f0c:	1c43      	adds	r3, r0, #1
 8010f0e:	d1e5      	bne.n	8010edc <__fputwc+0x44>
 8010f10:	0006      	movs	r6, r0
 8010f12:	e7f4      	b.n	8010efe <__fputwc+0x66>

08010f14 <_fputwc_r>:
 8010f14:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8010f16:	b570      	push	{r4, r5, r6, lr}
 8010f18:	0005      	movs	r5, r0
 8010f1a:	000e      	movs	r6, r1
 8010f1c:	0014      	movs	r4, r2
 8010f1e:	07db      	lsls	r3, r3, #31
 8010f20:	d405      	bmi.n	8010f2e <_fputwc_r+0x1a>
 8010f22:	8993      	ldrh	r3, [r2, #12]
 8010f24:	059b      	lsls	r3, r3, #22
 8010f26:	d402      	bmi.n	8010f2e <_fputwc_r+0x1a>
 8010f28:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8010f2a:	f7f9 fd1f 	bl	800a96c <__retarget_lock_acquire_recursive>
 8010f2e:	230c      	movs	r3, #12
 8010f30:	5ee2      	ldrsh	r2, [r4, r3]
 8010f32:	2380      	movs	r3, #128	; 0x80
 8010f34:	019b      	lsls	r3, r3, #6
 8010f36:	421a      	tst	r2, r3
 8010f38:	d104      	bne.n	8010f44 <_fputwc_r+0x30>
 8010f3a:	431a      	orrs	r2, r3
 8010f3c:	81a2      	strh	r2, [r4, #12]
 8010f3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010f40:	4313      	orrs	r3, r2
 8010f42:	6663      	str	r3, [r4, #100]	; 0x64
 8010f44:	0028      	movs	r0, r5
 8010f46:	0022      	movs	r2, r4
 8010f48:	0031      	movs	r1, r6
 8010f4a:	f7ff ffa5 	bl	8010e98 <__fputwc>
 8010f4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010f50:	0005      	movs	r5, r0
 8010f52:	07db      	lsls	r3, r3, #31
 8010f54:	d405      	bmi.n	8010f62 <_fputwc_r+0x4e>
 8010f56:	89a3      	ldrh	r3, [r4, #12]
 8010f58:	059b      	lsls	r3, r3, #22
 8010f5a:	d402      	bmi.n	8010f62 <_fputwc_r+0x4e>
 8010f5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010f5e:	f7f9 fd06 	bl	800a96e <__retarget_lock_release_recursive>
 8010f62:	0028      	movs	r0, r5
 8010f64:	bd70      	pop	{r4, r5, r6, pc}

08010f66 <memmove>:
 8010f66:	b510      	push	{r4, lr}
 8010f68:	4288      	cmp	r0, r1
 8010f6a:	d902      	bls.n	8010f72 <memmove+0xc>
 8010f6c:	188b      	adds	r3, r1, r2
 8010f6e:	4298      	cmp	r0, r3
 8010f70:	d303      	bcc.n	8010f7a <memmove+0x14>
 8010f72:	2300      	movs	r3, #0
 8010f74:	e007      	b.n	8010f86 <memmove+0x20>
 8010f76:	5c8b      	ldrb	r3, [r1, r2]
 8010f78:	5483      	strb	r3, [r0, r2]
 8010f7a:	3a01      	subs	r2, #1
 8010f7c:	d2fb      	bcs.n	8010f76 <memmove+0x10>
 8010f7e:	bd10      	pop	{r4, pc}
 8010f80:	5ccc      	ldrb	r4, [r1, r3]
 8010f82:	54c4      	strb	r4, [r0, r3]
 8010f84:	3301      	adds	r3, #1
 8010f86:	429a      	cmp	r2, r3
 8010f88:	d1fa      	bne.n	8010f80 <memmove+0x1a>
 8010f8a:	e7f8      	b.n	8010f7e <memmove+0x18>

08010f8c <abort>:
 8010f8c:	2006      	movs	r0, #6
 8010f8e:	b510      	push	{r4, lr}
 8010f90:	f000 f906 	bl	80111a0 <raise>
 8010f94:	2001      	movs	r0, #1
 8010f96:	f7f2 fb49 	bl	800362c <_exit>
	...

08010f9c <_wcrtomb_r>:
 8010f9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010f9e:	001d      	movs	r5, r3
 8010fa0:	4b09      	ldr	r3, [pc, #36]	; (8010fc8 <_wcrtomb_r+0x2c>)
 8010fa2:	0004      	movs	r4, r0
 8010fa4:	33e0      	adds	r3, #224	; 0xe0
 8010fa6:	681e      	ldr	r6, [r3, #0]
 8010fa8:	002b      	movs	r3, r5
 8010faa:	2900      	cmp	r1, #0
 8010fac:	d101      	bne.n	8010fb2 <_wcrtomb_r+0x16>
 8010fae:	000a      	movs	r2, r1
 8010fb0:	a901      	add	r1, sp, #4
 8010fb2:	0020      	movs	r0, r4
 8010fb4:	47b0      	blx	r6
 8010fb6:	1c43      	adds	r3, r0, #1
 8010fb8:	d103      	bne.n	8010fc2 <_wcrtomb_r+0x26>
 8010fba:	2300      	movs	r3, #0
 8010fbc:	602b      	str	r3, [r5, #0]
 8010fbe:	338a      	adds	r3, #138	; 0x8a
 8010fc0:	6023      	str	r3, [r4, #0]
 8010fc2:	b004      	add	sp, #16
 8010fc4:	bd70      	pop	{r4, r5, r6, pc}
 8010fc6:	46c0      	nop			; (mov r8, r8)
 8010fc8:	20000454 	.word	0x20000454

08010fcc <__swhatbuf_r>:
 8010fcc:	b570      	push	{r4, r5, r6, lr}
 8010fce:	000e      	movs	r6, r1
 8010fd0:	001d      	movs	r5, r3
 8010fd2:	230e      	movs	r3, #14
 8010fd4:	5ec9      	ldrsh	r1, [r1, r3]
 8010fd6:	0014      	movs	r4, r2
 8010fd8:	b096      	sub	sp, #88	; 0x58
 8010fda:	2900      	cmp	r1, #0
 8010fdc:	da09      	bge.n	8010ff2 <__swhatbuf_r+0x26>
 8010fde:	89b2      	ldrh	r2, [r6, #12]
 8010fe0:	2380      	movs	r3, #128	; 0x80
 8010fe2:	0011      	movs	r1, r2
 8010fe4:	4019      	ands	r1, r3
 8010fe6:	421a      	tst	r2, r3
 8010fe8:	d018      	beq.n	801101c <__swhatbuf_r+0x50>
 8010fea:	2100      	movs	r1, #0
 8010fec:	3b40      	subs	r3, #64	; 0x40
 8010fee:	0008      	movs	r0, r1
 8010ff0:	e010      	b.n	8011014 <__swhatbuf_r+0x48>
 8010ff2:	466a      	mov	r2, sp
 8010ff4:	f000 f8de 	bl	80111b4 <_fstat_r>
 8010ff8:	2800      	cmp	r0, #0
 8010ffa:	dbf0      	blt.n	8010fde <__swhatbuf_r+0x12>
 8010ffc:	23f0      	movs	r3, #240	; 0xf0
 8010ffe:	9901      	ldr	r1, [sp, #4]
 8011000:	021b      	lsls	r3, r3, #8
 8011002:	4019      	ands	r1, r3
 8011004:	4b07      	ldr	r3, [pc, #28]	; (8011024 <__swhatbuf_r+0x58>)
 8011006:	2080      	movs	r0, #128	; 0x80
 8011008:	18c9      	adds	r1, r1, r3
 801100a:	424b      	negs	r3, r1
 801100c:	4159      	adcs	r1, r3
 801100e:	2380      	movs	r3, #128	; 0x80
 8011010:	0100      	lsls	r0, r0, #4
 8011012:	00db      	lsls	r3, r3, #3
 8011014:	6029      	str	r1, [r5, #0]
 8011016:	6023      	str	r3, [r4, #0]
 8011018:	b016      	add	sp, #88	; 0x58
 801101a:	bd70      	pop	{r4, r5, r6, pc}
 801101c:	2380      	movs	r3, #128	; 0x80
 801101e:	00db      	lsls	r3, r3, #3
 8011020:	e7e5      	b.n	8010fee <__swhatbuf_r+0x22>
 8011022:	46c0      	nop			; (mov r8, r8)
 8011024:	ffffe000 	.word	0xffffe000

08011028 <__smakebuf_r>:
 8011028:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801102a:	2602      	movs	r6, #2
 801102c:	898b      	ldrh	r3, [r1, #12]
 801102e:	0005      	movs	r5, r0
 8011030:	000c      	movs	r4, r1
 8011032:	4233      	tst	r3, r6
 8011034:	d006      	beq.n	8011044 <__smakebuf_r+0x1c>
 8011036:	0023      	movs	r3, r4
 8011038:	3343      	adds	r3, #67	; 0x43
 801103a:	6023      	str	r3, [r4, #0]
 801103c:	6123      	str	r3, [r4, #16]
 801103e:	2301      	movs	r3, #1
 8011040:	6163      	str	r3, [r4, #20]
 8011042:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8011044:	466a      	mov	r2, sp
 8011046:	ab01      	add	r3, sp, #4
 8011048:	f7ff ffc0 	bl	8010fcc <__swhatbuf_r>
 801104c:	9900      	ldr	r1, [sp, #0]
 801104e:	0007      	movs	r7, r0
 8011050:	0028      	movs	r0, r5
 8011052:	f7f8 f933 	bl	80092bc <_malloc_r>
 8011056:	2800      	cmp	r0, #0
 8011058:	d108      	bne.n	801106c <__smakebuf_r+0x44>
 801105a:	220c      	movs	r2, #12
 801105c:	5ea3      	ldrsh	r3, [r4, r2]
 801105e:	059a      	lsls	r2, r3, #22
 8011060:	d4ef      	bmi.n	8011042 <__smakebuf_r+0x1a>
 8011062:	2203      	movs	r2, #3
 8011064:	4393      	bics	r3, r2
 8011066:	431e      	orrs	r6, r3
 8011068:	81a6      	strh	r6, [r4, #12]
 801106a:	e7e4      	b.n	8011036 <__smakebuf_r+0xe>
 801106c:	2380      	movs	r3, #128	; 0x80
 801106e:	89a2      	ldrh	r2, [r4, #12]
 8011070:	6020      	str	r0, [r4, #0]
 8011072:	4313      	orrs	r3, r2
 8011074:	81a3      	strh	r3, [r4, #12]
 8011076:	9b00      	ldr	r3, [sp, #0]
 8011078:	6120      	str	r0, [r4, #16]
 801107a:	6163      	str	r3, [r4, #20]
 801107c:	9b01      	ldr	r3, [sp, #4]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d00c      	beq.n	801109c <__smakebuf_r+0x74>
 8011082:	0028      	movs	r0, r5
 8011084:	230e      	movs	r3, #14
 8011086:	5ee1      	ldrsh	r1, [r4, r3]
 8011088:	f000 f8a6 	bl	80111d8 <_isatty_r>
 801108c:	2800      	cmp	r0, #0
 801108e:	d005      	beq.n	801109c <__smakebuf_r+0x74>
 8011090:	2303      	movs	r3, #3
 8011092:	89a2      	ldrh	r2, [r4, #12]
 8011094:	439a      	bics	r2, r3
 8011096:	3b02      	subs	r3, #2
 8011098:	4313      	orrs	r3, r2
 801109a:	81a3      	strh	r3, [r4, #12]
 801109c:	89a3      	ldrh	r3, [r4, #12]
 801109e:	433b      	orrs	r3, r7
 80110a0:	81a3      	strh	r3, [r4, #12]
 80110a2:	e7ce      	b.n	8011042 <__smakebuf_r+0x1a>

080110a4 <__swbuf_r>:
 80110a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110a6:	0006      	movs	r6, r0
 80110a8:	000d      	movs	r5, r1
 80110aa:	0014      	movs	r4, r2
 80110ac:	2800      	cmp	r0, #0
 80110ae:	d004      	beq.n	80110ba <__swbuf_r+0x16>
 80110b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d101      	bne.n	80110ba <__swbuf_r+0x16>
 80110b6:	f7f9 fa83 	bl	800a5c0 <__sinit>
 80110ba:	69a3      	ldr	r3, [r4, #24]
 80110bc:	60a3      	str	r3, [r4, #8]
 80110be:	89a3      	ldrh	r3, [r4, #12]
 80110c0:	071b      	lsls	r3, r3, #28
 80110c2:	d52e      	bpl.n	8011122 <__swbuf_r+0x7e>
 80110c4:	6923      	ldr	r3, [r4, #16]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d02b      	beq.n	8011122 <__swbuf_r+0x7e>
 80110ca:	230c      	movs	r3, #12
 80110cc:	5ee2      	ldrsh	r2, [r4, r3]
 80110ce:	2380      	movs	r3, #128	; 0x80
 80110d0:	019b      	lsls	r3, r3, #6
 80110d2:	b2ef      	uxtb	r7, r5
 80110d4:	b2ed      	uxtb	r5, r5
 80110d6:	421a      	tst	r2, r3
 80110d8:	d02c      	beq.n	8011134 <__swbuf_r+0x90>
 80110da:	6923      	ldr	r3, [r4, #16]
 80110dc:	6820      	ldr	r0, [r4, #0]
 80110de:	1ac0      	subs	r0, r0, r3
 80110e0:	6963      	ldr	r3, [r4, #20]
 80110e2:	4283      	cmp	r3, r0
 80110e4:	dc05      	bgt.n	80110f2 <__swbuf_r+0x4e>
 80110e6:	0021      	movs	r1, r4
 80110e8:	0030      	movs	r0, r6
 80110ea:	f7fd fab3 	bl	800e654 <_fflush_r>
 80110ee:	2800      	cmp	r0, #0
 80110f0:	d11d      	bne.n	801112e <__swbuf_r+0x8a>
 80110f2:	68a3      	ldr	r3, [r4, #8]
 80110f4:	3001      	adds	r0, #1
 80110f6:	3b01      	subs	r3, #1
 80110f8:	60a3      	str	r3, [r4, #8]
 80110fa:	6823      	ldr	r3, [r4, #0]
 80110fc:	1c5a      	adds	r2, r3, #1
 80110fe:	6022      	str	r2, [r4, #0]
 8011100:	701f      	strb	r7, [r3, #0]
 8011102:	6963      	ldr	r3, [r4, #20]
 8011104:	4283      	cmp	r3, r0
 8011106:	d004      	beq.n	8011112 <__swbuf_r+0x6e>
 8011108:	89a3      	ldrh	r3, [r4, #12]
 801110a:	07db      	lsls	r3, r3, #31
 801110c:	d507      	bpl.n	801111e <__swbuf_r+0x7a>
 801110e:	2d0a      	cmp	r5, #10
 8011110:	d105      	bne.n	801111e <__swbuf_r+0x7a>
 8011112:	0021      	movs	r1, r4
 8011114:	0030      	movs	r0, r6
 8011116:	f7fd fa9d 	bl	800e654 <_fflush_r>
 801111a:	2800      	cmp	r0, #0
 801111c:	d107      	bne.n	801112e <__swbuf_r+0x8a>
 801111e:	0028      	movs	r0, r5
 8011120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011122:	0021      	movs	r1, r4
 8011124:	0030      	movs	r0, r6
 8011126:	f7ff fe53 	bl	8010dd0 <__swsetup_r>
 801112a:	2800      	cmp	r0, #0
 801112c:	d0cd      	beq.n	80110ca <__swbuf_r+0x26>
 801112e:	2501      	movs	r5, #1
 8011130:	426d      	negs	r5, r5
 8011132:	e7f4      	b.n	801111e <__swbuf_r+0x7a>
 8011134:	4313      	orrs	r3, r2
 8011136:	81a3      	strh	r3, [r4, #12]
 8011138:	4a02      	ldr	r2, [pc, #8]	; (8011144 <__swbuf_r+0xa0>)
 801113a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801113c:	4013      	ands	r3, r2
 801113e:	6663      	str	r3, [r4, #100]	; 0x64
 8011140:	e7cb      	b.n	80110da <__swbuf_r+0x36>
 8011142:	46c0      	nop			; (mov r8, r8)
 8011144:	ffffdfff 	.word	0xffffdfff

08011148 <_raise_r>:
 8011148:	b570      	push	{r4, r5, r6, lr}
 801114a:	0004      	movs	r4, r0
 801114c:	000d      	movs	r5, r1
 801114e:	291f      	cmp	r1, #31
 8011150:	d904      	bls.n	801115c <_raise_r+0x14>
 8011152:	2316      	movs	r3, #22
 8011154:	6003      	str	r3, [r0, #0]
 8011156:	2001      	movs	r0, #1
 8011158:	4240      	negs	r0, r0
 801115a:	bd70      	pop	{r4, r5, r6, pc}
 801115c:	0003      	movs	r3, r0
 801115e:	33fc      	adds	r3, #252	; 0xfc
 8011160:	69db      	ldr	r3, [r3, #28]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d004      	beq.n	8011170 <_raise_r+0x28>
 8011166:	008a      	lsls	r2, r1, #2
 8011168:	189b      	adds	r3, r3, r2
 801116a:	681a      	ldr	r2, [r3, #0]
 801116c:	2a00      	cmp	r2, #0
 801116e:	d108      	bne.n	8011182 <_raise_r+0x3a>
 8011170:	0020      	movs	r0, r4
 8011172:	f000 f855 	bl	8011220 <_getpid_r>
 8011176:	002a      	movs	r2, r5
 8011178:	0001      	movs	r1, r0
 801117a:	0020      	movs	r0, r4
 801117c:	f000 f83e 	bl	80111fc <_kill_r>
 8011180:	e7eb      	b.n	801115a <_raise_r+0x12>
 8011182:	2000      	movs	r0, #0
 8011184:	2a01      	cmp	r2, #1
 8011186:	d0e8      	beq.n	801115a <_raise_r+0x12>
 8011188:	1c51      	adds	r1, r2, #1
 801118a:	d103      	bne.n	8011194 <_raise_r+0x4c>
 801118c:	2316      	movs	r3, #22
 801118e:	3001      	adds	r0, #1
 8011190:	6023      	str	r3, [r4, #0]
 8011192:	e7e2      	b.n	801115a <_raise_r+0x12>
 8011194:	2400      	movs	r4, #0
 8011196:	0028      	movs	r0, r5
 8011198:	601c      	str	r4, [r3, #0]
 801119a:	4790      	blx	r2
 801119c:	0020      	movs	r0, r4
 801119e:	e7dc      	b.n	801115a <_raise_r+0x12>

080111a0 <raise>:
 80111a0:	b510      	push	{r4, lr}
 80111a2:	4b03      	ldr	r3, [pc, #12]	; (80111b0 <raise+0x10>)
 80111a4:	0001      	movs	r1, r0
 80111a6:	6818      	ldr	r0, [r3, #0]
 80111a8:	f7ff ffce 	bl	8011148 <_raise_r>
 80111ac:	bd10      	pop	{r4, pc}
 80111ae:	46c0      	nop			; (mov r8, r8)
 80111b0:	200006e0 	.word	0x200006e0

080111b4 <_fstat_r>:
 80111b4:	2300      	movs	r3, #0
 80111b6:	b570      	push	{r4, r5, r6, lr}
 80111b8:	4d06      	ldr	r5, [pc, #24]	; (80111d4 <_fstat_r+0x20>)
 80111ba:	0004      	movs	r4, r0
 80111bc:	0008      	movs	r0, r1
 80111be:	0011      	movs	r1, r2
 80111c0:	602b      	str	r3, [r5, #0]
 80111c2:	f7f2 fa82 	bl	80036ca <_fstat>
 80111c6:	1c43      	adds	r3, r0, #1
 80111c8:	d103      	bne.n	80111d2 <_fstat_r+0x1e>
 80111ca:	682b      	ldr	r3, [r5, #0]
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d000      	beq.n	80111d2 <_fstat_r+0x1e>
 80111d0:	6023      	str	r3, [r4, #0]
 80111d2:	bd70      	pop	{r4, r5, r6, pc}
 80111d4:	20000e04 	.word	0x20000e04

080111d8 <_isatty_r>:
 80111d8:	2300      	movs	r3, #0
 80111da:	b570      	push	{r4, r5, r6, lr}
 80111dc:	4d06      	ldr	r5, [pc, #24]	; (80111f8 <_isatty_r+0x20>)
 80111de:	0004      	movs	r4, r0
 80111e0:	0008      	movs	r0, r1
 80111e2:	602b      	str	r3, [r5, #0]
 80111e4:	f7f2 fa7f 	bl	80036e6 <_isatty>
 80111e8:	1c43      	adds	r3, r0, #1
 80111ea:	d103      	bne.n	80111f4 <_isatty_r+0x1c>
 80111ec:	682b      	ldr	r3, [r5, #0]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d000      	beq.n	80111f4 <_isatty_r+0x1c>
 80111f2:	6023      	str	r3, [r4, #0]
 80111f4:	bd70      	pop	{r4, r5, r6, pc}
 80111f6:	46c0      	nop			; (mov r8, r8)
 80111f8:	20000e04 	.word	0x20000e04

080111fc <_kill_r>:
 80111fc:	2300      	movs	r3, #0
 80111fe:	b570      	push	{r4, r5, r6, lr}
 8011200:	4d06      	ldr	r5, [pc, #24]	; (801121c <_kill_r+0x20>)
 8011202:	0004      	movs	r4, r0
 8011204:	0008      	movs	r0, r1
 8011206:	0011      	movs	r1, r2
 8011208:	602b      	str	r3, [r5, #0]
 801120a:	f7f2 f9ff 	bl	800360c <_kill>
 801120e:	1c43      	adds	r3, r0, #1
 8011210:	d103      	bne.n	801121a <_kill_r+0x1e>
 8011212:	682b      	ldr	r3, [r5, #0]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d000      	beq.n	801121a <_kill_r+0x1e>
 8011218:	6023      	str	r3, [r4, #0]
 801121a:	bd70      	pop	{r4, r5, r6, pc}
 801121c:	20000e04 	.word	0x20000e04

08011220 <_getpid_r>:
 8011220:	b510      	push	{r4, lr}
 8011222:	f7f2 f9ed 	bl	8003600 <_getpid>
 8011226:	bd10      	pop	{r4, pc}

08011228 <round>:
 8011228:	b570      	push	{r4, r5, r6, lr}
 801122a:	004a      	lsls	r2, r1, #1
 801122c:	000d      	movs	r5, r1
 801122e:	4920      	ldr	r1, [pc, #128]	; (80112b0 <round+0x88>)
 8011230:	0d52      	lsrs	r2, r2, #21
 8011232:	1851      	adds	r1, r2, r1
 8011234:	0006      	movs	r6, r0
 8011236:	2913      	cmp	r1, #19
 8011238:	dc18      	bgt.n	801126c <round+0x44>
 801123a:	2900      	cmp	r1, #0
 801123c:	da09      	bge.n	8011252 <round+0x2a>
 801123e:	0feb      	lsrs	r3, r5, #31
 8011240:	2200      	movs	r2, #0
 8011242:	07db      	lsls	r3, r3, #31
 8011244:	3101      	adds	r1, #1
 8011246:	d101      	bne.n	801124c <round+0x24>
 8011248:	491a      	ldr	r1, [pc, #104]	; (80112b4 <round+0x8c>)
 801124a:	430b      	orrs	r3, r1
 801124c:	0019      	movs	r1, r3
 801124e:	0010      	movs	r0, r2
 8011250:	e017      	b.n	8011282 <round+0x5a>
 8011252:	4c19      	ldr	r4, [pc, #100]	; (80112b8 <round+0x90>)
 8011254:	410c      	asrs	r4, r1
 8011256:	0022      	movs	r2, r4
 8011258:	402a      	ands	r2, r5
 801125a:	4302      	orrs	r2, r0
 801125c:	d013      	beq.n	8011286 <round+0x5e>
 801125e:	2280      	movs	r2, #128	; 0x80
 8011260:	0312      	lsls	r2, r2, #12
 8011262:	410a      	asrs	r2, r1
 8011264:	1953      	adds	r3, r2, r5
 8011266:	43a3      	bics	r3, r4
 8011268:	2200      	movs	r2, #0
 801126a:	e7ef      	b.n	801124c <round+0x24>
 801126c:	2933      	cmp	r1, #51	; 0x33
 801126e:	dd0d      	ble.n	801128c <round+0x64>
 8011270:	2380      	movs	r3, #128	; 0x80
 8011272:	00db      	lsls	r3, r3, #3
 8011274:	4299      	cmp	r1, r3
 8011276:	d106      	bne.n	8011286 <round+0x5e>
 8011278:	0002      	movs	r2, r0
 801127a:	002b      	movs	r3, r5
 801127c:	0029      	movs	r1, r5
 801127e:	f7ef fa9b 	bl	80007b8 <__aeabi_dadd>
 8011282:	0006      	movs	r6, r0
 8011284:	000d      	movs	r5, r1
 8011286:	0030      	movs	r0, r6
 8011288:	0029      	movs	r1, r5
 801128a:	bd70      	pop	{r4, r5, r6, pc}
 801128c:	4c0b      	ldr	r4, [pc, #44]	; (80112bc <round+0x94>)
 801128e:	1912      	adds	r2, r2, r4
 8011290:	2401      	movs	r4, #1
 8011292:	4264      	negs	r4, r4
 8011294:	40d4      	lsrs	r4, r2
 8011296:	4220      	tst	r0, r4
 8011298:	d0f5      	beq.n	8011286 <round+0x5e>
 801129a:	2233      	movs	r2, #51	; 0x33
 801129c:	1a51      	subs	r1, r2, r1
 801129e:	3a32      	subs	r2, #50	; 0x32
 80112a0:	408a      	lsls	r2, r1
 80112a2:	1812      	adds	r2, r2, r0
 80112a4:	4282      	cmp	r2, r0
 80112a6:	4180      	sbcs	r0, r0
 80112a8:	4240      	negs	r0, r0
 80112aa:	182b      	adds	r3, r5, r0
 80112ac:	43a2      	bics	r2, r4
 80112ae:	e7cd      	b.n	801124c <round+0x24>
 80112b0:	fffffc01 	.word	0xfffffc01
 80112b4:	3ff00000 	.word	0x3ff00000
 80112b8:	000fffff 	.word	0x000fffff
 80112bc:	fffffbed 	.word	0xfffffbed

080112c0 <_init>:
 80112c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112c2:	46c0      	nop			; (mov r8, r8)
 80112c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112c6:	bc08      	pop	{r3}
 80112c8:	469e      	mov	lr, r3
 80112ca:	4770      	bx	lr

080112cc <_fini>:
 80112cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112ce:	46c0      	nop			; (mov r8, r8)
 80112d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112d2:	bc08      	pop	{r3}
 80112d4:	469e      	mov	lr, r3
 80112d6:	4770      	bx	lr
