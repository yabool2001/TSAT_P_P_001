
TSAT_P_P_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aacc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000056c  0800ab88  0800ab88  0001ab88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0f4  0800b0f4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b0f4  0800b0f4  0001b0f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0fc  0800b0fc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0fc  0800b0fc  0001b0fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b100  0800b100  0001b100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e4  200001e0  0800b2e4  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006c4  0800b2e4  000206c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001412d  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002add  00000000  00000000  00034378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001268  00000000  00000000  00036e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e7b  00000000  00000000  000380c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aaee  00000000  00000000  00038f3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001724a  00000000  00000000  00053a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a6974  00000000  00000000  0006ac73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000057dc  00000000  00000000  001115e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00116dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001e0 	.word	0x200001e0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800ab70 	.word	0x0800ab70

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001e4 	.word	0x200001e4
 8000100:	0800ab70 	.word	0x0800ab70

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f885 	bl	8001548 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ffd5 	bl	80013f8 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f877 	bl	8001548 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f86d 	bl	8001548 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 fffd 	bl	800147c <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 fff3 	bl	800147c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f876 	bl	80005c4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_d2uiz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	2200      	movs	r2, #0
 80004e8:	4b0c      	ldr	r3, [pc, #48]	; (800051c <__aeabi_d2uiz+0x38>)
 80004ea:	0004      	movs	r4, r0
 80004ec:	000d      	movs	r5, r1
 80004ee:	f7ff ffcf 	bl	8000490 <__aeabi_dcmpge>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	d104      	bne.n	8000500 <__aeabi_d2uiz+0x1c>
 80004f6:	0020      	movs	r0, r4
 80004f8:	0029      	movs	r1, r5
 80004fa:	f001 feeb 	bl	80022d4 <__aeabi_d2iz>
 80004fe:	bd70      	pop	{r4, r5, r6, pc}
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <__aeabi_d2uiz+0x38>)
 8000502:	2200      	movs	r2, #0
 8000504:	0020      	movs	r0, r4
 8000506:	0029      	movs	r1, r5
 8000508:	f001 fb44 	bl	8001b94 <__aeabi_dsub>
 800050c:	f001 fee2 	bl	80022d4 <__aeabi_d2iz>
 8000510:	2380      	movs	r3, #128	; 0x80
 8000512:	061b      	lsls	r3, r3, #24
 8000514:	469c      	mov	ip, r3
 8000516:	4460      	add	r0, ip
 8000518:	e7f1      	b.n	80004fe <__aeabi_d2uiz+0x1a>
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	41e00000 	.word	0x41e00000

08000520 <__aeabi_d2lz>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	0005      	movs	r5, r0
 8000524:	000c      	movs	r4, r1
 8000526:	2200      	movs	r2, #0
 8000528:	2300      	movs	r3, #0
 800052a:	0028      	movs	r0, r5
 800052c:	0021      	movs	r1, r4
 800052e:	f7ff ff91 	bl	8000454 <__aeabi_dcmplt>
 8000532:	2800      	cmp	r0, #0
 8000534:	d108      	bne.n	8000548 <__aeabi_d2lz+0x28>
 8000536:	0028      	movs	r0, r5
 8000538:	0021      	movs	r1, r4
 800053a:	f000 f80f 	bl	800055c <__aeabi_d2ulz>
 800053e:	0002      	movs	r2, r0
 8000540:	000b      	movs	r3, r1
 8000542:	0010      	movs	r0, r2
 8000544:	0019      	movs	r1, r3
 8000546:	bd70      	pop	{r4, r5, r6, pc}
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	061b      	lsls	r3, r3, #24
 800054c:	18e1      	adds	r1, r4, r3
 800054e:	0028      	movs	r0, r5
 8000550:	f000 f804 	bl	800055c <__aeabi_d2ulz>
 8000554:	2300      	movs	r3, #0
 8000556:	4242      	negs	r2, r0
 8000558:	418b      	sbcs	r3, r1
 800055a:	e7f2      	b.n	8000542 <__aeabi_d2lz+0x22>

0800055c <__aeabi_d2ulz>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	2200      	movs	r2, #0
 8000560:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <__aeabi_d2ulz+0x34>)
 8000562:	000d      	movs	r5, r1
 8000564:	0004      	movs	r4, r0
 8000566:	f001 f853 	bl	8001610 <__aeabi_dmul>
 800056a:	f7ff ffbb 	bl	80004e4 <__aeabi_d2uiz>
 800056e:	0006      	movs	r6, r0
 8000570:	f001 ff16 	bl	80023a0 <__aeabi_ui2d>
 8000574:	2200      	movs	r2, #0
 8000576:	4b07      	ldr	r3, [pc, #28]	; (8000594 <__aeabi_d2ulz+0x38>)
 8000578:	f001 f84a 	bl	8001610 <__aeabi_dmul>
 800057c:	0002      	movs	r2, r0
 800057e:	000b      	movs	r3, r1
 8000580:	0020      	movs	r0, r4
 8000582:	0029      	movs	r1, r5
 8000584:	f001 fb06 	bl	8001b94 <__aeabi_dsub>
 8000588:	f7ff ffac 	bl	80004e4 <__aeabi_d2uiz>
 800058c:	0031      	movs	r1, r6
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	3df00000 	.word	0x3df00000
 8000594:	41f00000 	.word	0x41f00000

08000598 <__aeabi_l2d>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	0006      	movs	r6, r0
 800059c:	0008      	movs	r0, r1
 800059e:	f001 fecf 	bl	8002340 <__aeabi_i2d>
 80005a2:	2200      	movs	r2, #0
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <__aeabi_l2d+0x28>)
 80005a6:	f001 f833 	bl	8001610 <__aeabi_dmul>
 80005aa:	000d      	movs	r5, r1
 80005ac:	0004      	movs	r4, r0
 80005ae:	0030      	movs	r0, r6
 80005b0:	f001 fef6 	bl	80023a0 <__aeabi_ui2d>
 80005b4:	002b      	movs	r3, r5
 80005b6:	0022      	movs	r2, r4
 80005b8:	f000 f8d0 	bl	800075c <__aeabi_dadd>
 80005bc:	bd70      	pop	{r4, r5, r6, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	41f00000 	.word	0x41f00000

080005c4 <__udivmoddi4>:
 80005c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c6:	4657      	mov	r7, sl
 80005c8:	464e      	mov	r6, r9
 80005ca:	4645      	mov	r5, r8
 80005cc:	46de      	mov	lr, fp
 80005ce:	b5e0      	push	{r5, r6, r7, lr}
 80005d0:	0004      	movs	r4, r0
 80005d2:	000d      	movs	r5, r1
 80005d4:	4692      	mov	sl, r2
 80005d6:	4699      	mov	r9, r3
 80005d8:	b083      	sub	sp, #12
 80005da:	428b      	cmp	r3, r1
 80005dc:	d830      	bhi.n	8000640 <__udivmoddi4+0x7c>
 80005de:	d02d      	beq.n	800063c <__udivmoddi4+0x78>
 80005e0:	4649      	mov	r1, r9
 80005e2:	4650      	mov	r0, sl
 80005e4:	f001 ffa6 	bl	8002534 <__clzdi2>
 80005e8:	0029      	movs	r1, r5
 80005ea:	0006      	movs	r6, r0
 80005ec:	0020      	movs	r0, r4
 80005ee:	f001 ffa1 	bl	8002534 <__clzdi2>
 80005f2:	1a33      	subs	r3, r6, r0
 80005f4:	4698      	mov	r8, r3
 80005f6:	3b20      	subs	r3, #32
 80005f8:	d434      	bmi.n	8000664 <__udivmoddi4+0xa0>
 80005fa:	469b      	mov	fp, r3
 80005fc:	4653      	mov	r3, sl
 80005fe:	465a      	mov	r2, fp
 8000600:	4093      	lsls	r3, r2
 8000602:	4642      	mov	r2, r8
 8000604:	001f      	movs	r7, r3
 8000606:	4653      	mov	r3, sl
 8000608:	4093      	lsls	r3, r2
 800060a:	001e      	movs	r6, r3
 800060c:	42af      	cmp	r7, r5
 800060e:	d83b      	bhi.n	8000688 <__udivmoddi4+0xc4>
 8000610:	42af      	cmp	r7, r5
 8000612:	d100      	bne.n	8000616 <__udivmoddi4+0x52>
 8000614:	e079      	b.n	800070a <__udivmoddi4+0x146>
 8000616:	465b      	mov	r3, fp
 8000618:	1ba4      	subs	r4, r4, r6
 800061a:	41bd      	sbcs	r5, r7
 800061c:	2b00      	cmp	r3, #0
 800061e:	da00      	bge.n	8000622 <__udivmoddi4+0x5e>
 8000620:	e076      	b.n	8000710 <__udivmoddi4+0x14c>
 8000622:	2200      	movs	r2, #0
 8000624:	2300      	movs	r3, #0
 8000626:	9200      	str	r2, [sp, #0]
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	2301      	movs	r3, #1
 800062c:	465a      	mov	r2, fp
 800062e:	4093      	lsls	r3, r2
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	2301      	movs	r3, #1
 8000634:	4642      	mov	r2, r8
 8000636:	4093      	lsls	r3, r2
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	e029      	b.n	8000690 <__udivmoddi4+0xcc>
 800063c:	4282      	cmp	r2, r0
 800063e:	d9cf      	bls.n	80005e0 <__udivmoddi4+0x1c>
 8000640:	2200      	movs	r2, #0
 8000642:	2300      	movs	r3, #0
 8000644:	9200      	str	r2, [sp, #0]
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <__udivmoddi4+0x8e>
 800064e:	601c      	str	r4, [r3, #0]
 8000650:	605d      	str	r5, [r3, #4]
 8000652:	9800      	ldr	r0, [sp, #0]
 8000654:	9901      	ldr	r1, [sp, #4]
 8000656:	b003      	add	sp, #12
 8000658:	bcf0      	pop	{r4, r5, r6, r7}
 800065a:	46bb      	mov	fp, r7
 800065c:	46b2      	mov	sl, r6
 800065e:	46a9      	mov	r9, r5
 8000660:	46a0      	mov	r8, r4
 8000662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000664:	4642      	mov	r2, r8
 8000666:	469b      	mov	fp, r3
 8000668:	2320      	movs	r3, #32
 800066a:	1a9b      	subs	r3, r3, r2
 800066c:	4652      	mov	r2, sl
 800066e:	40da      	lsrs	r2, r3
 8000670:	4641      	mov	r1, r8
 8000672:	0013      	movs	r3, r2
 8000674:	464a      	mov	r2, r9
 8000676:	408a      	lsls	r2, r1
 8000678:	0017      	movs	r7, r2
 800067a:	4642      	mov	r2, r8
 800067c:	431f      	orrs	r7, r3
 800067e:	4653      	mov	r3, sl
 8000680:	4093      	lsls	r3, r2
 8000682:	001e      	movs	r6, r3
 8000684:	42af      	cmp	r7, r5
 8000686:	d9c3      	bls.n	8000610 <__udivmoddi4+0x4c>
 8000688:	2200      	movs	r2, #0
 800068a:	2300      	movs	r3, #0
 800068c:	9200      	str	r2, [sp, #0]
 800068e:	9301      	str	r3, [sp, #4]
 8000690:	4643      	mov	r3, r8
 8000692:	2b00      	cmp	r3, #0
 8000694:	d0d8      	beq.n	8000648 <__udivmoddi4+0x84>
 8000696:	07fb      	lsls	r3, r7, #31
 8000698:	0872      	lsrs	r2, r6, #1
 800069a:	431a      	orrs	r2, r3
 800069c:	4646      	mov	r6, r8
 800069e:	087b      	lsrs	r3, r7, #1
 80006a0:	e00e      	b.n	80006c0 <__udivmoddi4+0xfc>
 80006a2:	42ab      	cmp	r3, r5
 80006a4:	d101      	bne.n	80006aa <__udivmoddi4+0xe6>
 80006a6:	42a2      	cmp	r2, r4
 80006a8:	d80c      	bhi.n	80006c4 <__udivmoddi4+0x100>
 80006aa:	1aa4      	subs	r4, r4, r2
 80006ac:	419d      	sbcs	r5, r3
 80006ae:	2001      	movs	r0, #1
 80006b0:	1924      	adds	r4, r4, r4
 80006b2:	416d      	adcs	r5, r5
 80006b4:	2100      	movs	r1, #0
 80006b6:	3e01      	subs	r6, #1
 80006b8:	1824      	adds	r4, r4, r0
 80006ba:	414d      	adcs	r5, r1
 80006bc:	2e00      	cmp	r6, #0
 80006be:	d006      	beq.n	80006ce <__udivmoddi4+0x10a>
 80006c0:	42ab      	cmp	r3, r5
 80006c2:	d9ee      	bls.n	80006a2 <__udivmoddi4+0xde>
 80006c4:	3e01      	subs	r6, #1
 80006c6:	1924      	adds	r4, r4, r4
 80006c8:	416d      	adcs	r5, r5
 80006ca:	2e00      	cmp	r6, #0
 80006cc:	d1f8      	bne.n	80006c0 <__udivmoddi4+0xfc>
 80006ce:	9800      	ldr	r0, [sp, #0]
 80006d0:	9901      	ldr	r1, [sp, #4]
 80006d2:	465b      	mov	r3, fp
 80006d4:	1900      	adds	r0, r0, r4
 80006d6:	4169      	adcs	r1, r5
 80006d8:	2b00      	cmp	r3, #0
 80006da:	db24      	blt.n	8000726 <__udivmoddi4+0x162>
 80006dc:	002b      	movs	r3, r5
 80006de:	465a      	mov	r2, fp
 80006e0:	4644      	mov	r4, r8
 80006e2:	40d3      	lsrs	r3, r2
 80006e4:	002a      	movs	r2, r5
 80006e6:	40e2      	lsrs	r2, r4
 80006e8:	001c      	movs	r4, r3
 80006ea:	465b      	mov	r3, fp
 80006ec:	0015      	movs	r5, r2
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	db2a      	blt.n	8000748 <__udivmoddi4+0x184>
 80006f2:	0026      	movs	r6, r4
 80006f4:	409e      	lsls	r6, r3
 80006f6:	0033      	movs	r3, r6
 80006f8:	0026      	movs	r6, r4
 80006fa:	4647      	mov	r7, r8
 80006fc:	40be      	lsls	r6, r7
 80006fe:	0032      	movs	r2, r6
 8000700:	1a80      	subs	r0, r0, r2
 8000702:	4199      	sbcs	r1, r3
 8000704:	9000      	str	r0, [sp, #0]
 8000706:	9101      	str	r1, [sp, #4]
 8000708:	e79e      	b.n	8000648 <__udivmoddi4+0x84>
 800070a:	42a3      	cmp	r3, r4
 800070c:	d8bc      	bhi.n	8000688 <__udivmoddi4+0xc4>
 800070e:	e782      	b.n	8000616 <__udivmoddi4+0x52>
 8000710:	4642      	mov	r2, r8
 8000712:	2320      	movs	r3, #32
 8000714:	2100      	movs	r1, #0
 8000716:	1a9b      	subs	r3, r3, r2
 8000718:	2200      	movs	r2, #0
 800071a:	9100      	str	r1, [sp, #0]
 800071c:	9201      	str	r2, [sp, #4]
 800071e:	2201      	movs	r2, #1
 8000720:	40da      	lsrs	r2, r3
 8000722:	9201      	str	r2, [sp, #4]
 8000724:	e785      	b.n	8000632 <__udivmoddi4+0x6e>
 8000726:	4642      	mov	r2, r8
 8000728:	2320      	movs	r3, #32
 800072a:	1a9b      	subs	r3, r3, r2
 800072c:	002a      	movs	r2, r5
 800072e:	4646      	mov	r6, r8
 8000730:	409a      	lsls	r2, r3
 8000732:	0023      	movs	r3, r4
 8000734:	40f3      	lsrs	r3, r6
 8000736:	4644      	mov	r4, r8
 8000738:	4313      	orrs	r3, r2
 800073a:	002a      	movs	r2, r5
 800073c:	40e2      	lsrs	r2, r4
 800073e:	001c      	movs	r4, r3
 8000740:	465b      	mov	r3, fp
 8000742:	0015      	movs	r5, r2
 8000744:	2b00      	cmp	r3, #0
 8000746:	dad4      	bge.n	80006f2 <__udivmoddi4+0x12e>
 8000748:	4642      	mov	r2, r8
 800074a:	002f      	movs	r7, r5
 800074c:	2320      	movs	r3, #32
 800074e:	0026      	movs	r6, r4
 8000750:	4097      	lsls	r7, r2
 8000752:	1a9b      	subs	r3, r3, r2
 8000754:	40de      	lsrs	r6, r3
 8000756:	003b      	movs	r3, r7
 8000758:	4333      	orrs	r3, r6
 800075a:	e7cd      	b.n	80006f8 <__udivmoddi4+0x134>

0800075c <__aeabi_dadd>:
 800075c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800075e:	464f      	mov	r7, r9
 8000760:	4646      	mov	r6, r8
 8000762:	46d6      	mov	lr, sl
 8000764:	0004      	movs	r4, r0
 8000766:	b5c0      	push	{r6, r7, lr}
 8000768:	001f      	movs	r7, r3
 800076a:	030b      	lsls	r3, r1, #12
 800076c:	0010      	movs	r0, r2
 800076e:	004e      	lsls	r6, r1, #1
 8000770:	0a5b      	lsrs	r3, r3, #9
 8000772:	0fcd      	lsrs	r5, r1, #31
 8000774:	0f61      	lsrs	r1, r4, #29
 8000776:	007a      	lsls	r2, r7, #1
 8000778:	4319      	orrs	r1, r3
 800077a:	00e3      	lsls	r3, r4, #3
 800077c:	033c      	lsls	r4, r7, #12
 800077e:	0fff      	lsrs	r7, r7, #31
 8000780:	46bc      	mov	ip, r7
 8000782:	0a64      	lsrs	r4, r4, #9
 8000784:	0f47      	lsrs	r7, r0, #29
 8000786:	4327      	orrs	r7, r4
 8000788:	0d76      	lsrs	r6, r6, #21
 800078a:	0d52      	lsrs	r2, r2, #21
 800078c:	00c0      	lsls	r0, r0, #3
 800078e:	46b9      	mov	r9, r7
 8000790:	4680      	mov	r8, r0
 8000792:	1ab7      	subs	r7, r6, r2
 8000794:	4565      	cmp	r5, ip
 8000796:	d100      	bne.n	800079a <__aeabi_dadd+0x3e>
 8000798:	e09b      	b.n	80008d2 <__aeabi_dadd+0x176>
 800079a:	2f00      	cmp	r7, #0
 800079c:	dc00      	bgt.n	80007a0 <__aeabi_dadd+0x44>
 800079e:	e084      	b.n	80008aa <__aeabi_dadd+0x14e>
 80007a0:	2a00      	cmp	r2, #0
 80007a2:	d100      	bne.n	80007a6 <__aeabi_dadd+0x4a>
 80007a4:	e0be      	b.n	8000924 <__aeabi_dadd+0x1c8>
 80007a6:	4ac8      	ldr	r2, [pc, #800]	; (8000ac8 <__aeabi_dadd+0x36c>)
 80007a8:	4296      	cmp	r6, r2
 80007aa:	d100      	bne.n	80007ae <__aeabi_dadd+0x52>
 80007ac:	e124      	b.n	80009f8 <__aeabi_dadd+0x29c>
 80007ae:	2280      	movs	r2, #128	; 0x80
 80007b0:	464c      	mov	r4, r9
 80007b2:	0412      	lsls	r2, r2, #16
 80007b4:	4314      	orrs	r4, r2
 80007b6:	46a1      	mov	r9, r4
 80007b8:	2f38      	cmp	r7, #56	; 0x38
 80007ba:	dd00      	ble.n	80007be <__aeabi_dadd+0x62>
 80007bc:	e167      	b.n	8000a8e <__aeabi_dadd+0x332>
 80007be:	2f1f      	cmp	r7, #31
 80007c0:	dd00      	ble.n	80007c4 <__aeabi_dadd+0x68>
 80007c2:	e1d6      	b.n	8000b72 <__aeabi_dadd+0x416>
 80007c4:	2220      	movs	r2, #32
 80007c6:	464c      	mov	r4, r9
 80007c8:	1bd2      	subs	r2, r2, r7
 80007ca:	4094      	lsls	r4, r2
 80007cc:	46a2      	mov	sl, r4
 80007ce:	4644      	mov	r4, r8
 80007d0:	40fc      	lsrs	r4, r7
 80007d2:	0020      	movs	r0, r4
 80007d4:	4654      	mov	r4, sl
 80007d6:	4304      	orrs	r4, r0
 80007d8:	4640      	mov	r0, r8
 80007da:	4090      	lsls	r0, r2
 80007dc:	1e42      	subs	r2, r0, #1
 80007de:	4190      	sbcs	r0, r2
 80007e0:	464a      	mov	r2, r9
 80007e2:	40fa      	lsrs	r2, r7
 80007e4:	4304      	orrs	r4, r0
 80007e6:	1a89      	subs	r1, r1, r2
 80007e8:	1b1c      	subs	r4, r3, r4
 80007ea:	42a3      	cmp	r3, r4
 80007ec:	4192      	sbcs	r2, r2
 80007ee:	4252      	negs	r2, r2
 80007f0:	1a8b      	subs	r3, r1, r2
 80007f2:	469a      	mov	sl, r3
 80007f4:	4653      	mov	r3, sl
 80007f6:	021b      	lsls	r3, r3, #8
 80007f8:	d400      	bmi.n	80007fc <__aeabi_dadd+0xa0>
 80007fa:	e0d4      	b.n	80009a6 <__aeabi_dadd+0x24a>
 80007fc:	4653      	mov	r3, sl
 80007fe:	025a      	lsls	r2, r3, #9
 8000800:	0a53      	lsrs	r3, r2, #9
 8000802:	469a      	mov	sl, r3
 8000804:	4653      	mov	r3, sl
 8000806:	2b00      	cmp	r3, #0
 8000808:	d100      	bne.n	800080c <__aeabi_dadd+0xb0>
 800080a:	e104      	b.n	8000a16 <__aeabi_dadd+0x2ba>
 800080c:	4650      	mov	r0, sl
 800080e:	f001 fe73 	bl	80024f8 <__clzsi2>
 8000812:	0003      	movs	r3, r0
 8000814:	3b08      	subs	r3, #8
 8000816:	2220      	movs	r2, #32
 8000818:	0020      	movs	r0, r4
 800081a:	1ad2      	subs	r2, r2, r3
 800081c:	4651      	mov	r1, sl
 800081e:	40d0      	lsrs	r0, r2
 8000820:	4099      	lsls	r1, r3
 8000822:	0002      	movs	r2, r0
 8000824:	409c      	lsls	r4, r3
 8000826:	430a      	orrs	r2, r1
 8000828:	42b3      	cmp	r3, r6
 800082a:	da00      	bge.n	800082e <__aeabi_dadd+0xd2>
 800082c:	e102      	b.n	8000a34 <__aeabi_dadd+0x2d8>
 800082e:	1b9b      	subs	r3, r3, r6
 8000830:	1c59      	adds	r1, r3, #1
 8000832:	291f      	cmp	r1, #31
 8000834:	dd00      	ble.n	8000838 <__aeabi_dadd+0xdc>
 8000836:	e0a7      	b.n	8000988 <__aeabi_dadd+0x22c>
 8000838:	2320      	movs	r3, #32
 800083a:	0010      	movs	r0, r2
 800083c:	0026      	movs	r6, r4
 800083e:	1a5b      	subs	r3, r3, r1
 8000840:	409c      	lsls	r4, r3
 8000842:	4098      	lsls	r0, r3
 8000844:	40ce      	lsrs	r6, r1
 8000846:	40ca      	lsrs	r2, r1
 8000848:	1e63      	subs	r3, r4, #1
 800084a:	419c      	sbcs	r4, r3
 800084c:	4330      	orrs	r0, r6
 800084e:	4692      	mov	sl, r2
 8000850:	2600      	movs	r6, #0
 8000852:	4304      	orrs	r4, r0
 8000854:	0763      	lsls	r3, r4, #29
 8000856:	d009      	beq.n	800086c <__aeabi_dadd+0x110>
 8000858:	230f      	movs	r3, #15
 800085a:	4023      	ands	r3, r4
 800085c:	2b04      	cmp	r3, #4
 800085e:	d005      	beq.n	800086c <__aeabi_dadd+0x110>
 8000860:	1d23      	adds	r3, r4, #4
 8000862:	42a3      	cmp	r3, r4
 8000864:	41a4      	sbcs	r4, r4
 8000866:	4264      	negs	r4, r4
 8000868:	44a2      	add	sl, r4
 800086a:	001c      	movs	r4, r3
 800086c:	4653      	mov	r3, sl
 800086e:	021b      	lsls	r3, r3, #8
 8000870:	d400      	bmi.n	8000874 <__aeabi_dadd+0x118>
 8000872:	e09b      	b.n	80009ac <__aeabi_dadd+0x250>
 8000874:	4b94      	ldr	r3, [pc, #592]	; (8000ac8 <__aeabi_dadd+0x36c>)
 8000876:	3601      	adds	r6, #1
 8000878:	429e      	cmp	r6, r3
 800087a:	d100      	bne.n	800087e <__aeabi_dadd+0x122>
 800087c:	e0b8      	b.n	80009f0 <__aeabi_dadd+0x294>
 800087e:	4653      	mov	r3, sl
 8000880:	4992      	ldr	r1, [pc, #584]	; (8000acc <__aeabi_dadd+0x370>)
 8000882:	08e4      	lsrs	r4, r4, #3
 8000884:	400b      	ands	r3, r1
 8000886:	0019      	movs	r1, r3
 8000888:	075b      	lsls	r3, r3, #29
 800088a:	4323      	orrs	r3, r4
 800088c:	0572      	lsls	r2, r6, #21
 800088e:	024c      	lsls	r4, r1, #9
 8000890:	0b24      	lsrs	r4, r4, #12
 8000892:	0d52      	lsrs	r2, r2, #21
 8000894:	0512      	lsls	r2, r2, #20
 8000896:	07ed      	lsls	r5, r5, #31
 8000898:	4322      	orrs	r2, r4
 800089a:	432a      	orrs	r2, r5
 800089c:	0018      	movs	r0, r3
 800089e:	0011      	movs	r1, r2
 80008a0:	bce0      	pop	{r5, r6, r7}
 80008a2:	46ba      	mov	sl, r7
 80008a4:	46b1      	mov	r9, r6
 80008a6:	46a8      	mov	r8, r5
 80008a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008aa:	2f00      	cmp	r7, #0
 80008ac:	d048      	beq.n	8000940 <__aeabi_dadd+0x1e4>
 80008ae:	1b97      	subs	r7, r2, r6
 80008b0:	2e00      	cmp	r6, #0
 80008b2:	d000      	beq.n	80008b6 <__aeabi_dadd+0x15a>
 80008b4:	e10e      	b.n	8000ad4 <__aeabi_dadd+0x378>
 80008b6:	000c      	movs	r4, r1
 80008b8:	431c      	orrs	r4, r3
 80008ba:	d100      	bne.n	80008be <__aeabi_dadd+0x162>
 80008bc:	e1b7      	b.n	8000c2e <__aeabi_dadd+0x4d2>
 80008be:	1e7c      	subs	r4, r7, #1
 80008c0:	2f01      	cmp	r7, #1
 80008c2:	d100      	bne.n	80008c6 <__aeabi_dadd+0x16a>
 80008c4:	e226      	b.n	8000d14 <__aeabi_dadd+0x5b8>
 80008c6:	4d80      	ldr	r5, [pc, #512]	; (8000ac8 <__aeabi_dadd+0x36c>)
 80008c8:	42af      	cmp	r7, r5
 80008ca:	d100      	bne.n	80008ce <__aeabi_dadd+0x172>
 80008cc:	e1d5      	b.n	8000c7a <__aeabi_dadd+0x51e>
 80008ce:	0027      	movs	r7, r4
 80008d0:	e107      	b.n	8000ae2 <__aeabi_dadd+0x386>
 80008d2:	2f00      	cmp	r7, #0
 80008d4:	dc00      	bgt.n	80008d8 <__aeabi_dadd+0x17c>
 80008d6:	e0b2      	b.n	8000a3e <__aeabi_dadd+0x2e2>
 80008d8:	2a00      	cmp	r2, #0
 80008da:	d047      	beq.n	800096c <__aeabi_dadd+0x210>
 80008dc:	4a7a      	ldr	r2, [pc, #488]	; (8000ac8 <__aeabi_dadd+0x36c>)
 80008de:	4296      	cmp	r6, r2
 80008e0:	d100      	bne.n	80008e4 <__aeabi_dadd+0x188>
 80008e2:	e089      	b.n	80009f8 <__aeabi_dadd+0x29c>
 80008e4:	2280      	movs	r2, #128	; 0x80
 80008e6:	464c      	mov	r4, r9
 80008e8:	0412      	lsls	r2, r2, #16
 80008ea:	4314      	orrs	r4, r2
 80008ec:	46a1      	mov	r9, r4
 80008ee:	2f38      	cmp	r7, #56	; 0x38
 80008f0:	dc6b      	bgt.n	80009ca <__aeabi_dadd+0x26e>
 80008f2:	2f1f      	cmp	r7, #31
 80008f4:	dc00      	bgt.n	80008f8 <__aeabi_dadd+0x19c>
 80008f6:	e16e      	b.n	8000bd6 <__aeabi_dadd+0x47a>
 80008f8:	003a      	movs	r2, r7
 80008fa:	4648      	mov	r0, r9
 80008fc:	3a20      	subs	r2, #32
 80008fe:	40d0      	lsrs	r0, r2
 8000900:	4684      	mov	ip, r0
 8000902:	2f20      	cmp	r7, #32
 8000904:	d007      	beq.n	8000916 <__aeabi_dadd+0x1ba>
 8000906:	2240      	movs	r2, #64	; 0x40
 8000908:	4648      	mov	r0, r9
 800090a:	1bd2      	subs	r2, r2, r7
 800090c:	4090      	lsls	r0, r2
 800090e:	0002      	movs	r2, r0
 8000910:	4640      	mov	r0, r8
 8000912:	4310      	orrs	r0, r2
 8000914:	4680      	mov	r8, r0
 8000916:	4640      	mov	r0, r8
 8000918:	1e42      	subs	r2, r0, #1
 800091a:	4190      	sbcs	r0, r2
 800091c:	4662      	mov	r2, ip
 800091e:	0004      	movs	r4, r0
 8000920:	4314      	orrs	r4, r2
 8000922:	e057      	b.n	80009d4 <__aeabi_dadd+0x278>
 8000924:	464a      	mov	r2, r9
 8000926:	4302      	orrs	r2, r0
 8000928:	d100      	bne.n	800092c <__aeabi_dadd+0x1d0>
 800092a:	e103      	b.n	8000b34 <__aeabi_dadd+0x3d8>
 800092c:	1e7a      	subs	r2, r7, #1
 800092e:	2f01      	cmp	r7, #1
 8000930:	d100      	bne.n	8000934 <__aeabi_dadd+0x1d8>
 8000932:	e193      	b.n	8000c5c <__aeabi_dadd+0x500>
 8000934:	4c64      	ldr	r4, [pc, #400]	; (8000ac8 <__aeabi_dadd+0x36c>)
 8000936:	42a7      	cmp	r7, r4
 8000938:	d100      	bne.n	800093c <__aeabi_dadd+0x1e0>
 800093a:	e18a      	b.n	8000c52 <__aeabi_dadd+0x4f6>
 800093c:	0017      	movs	r7, r2
 800093e:	e73b      	b.n	80007b8 <__aeabi_dadd+0x5c>
 8000940:	4c63      	ldr	r4, [pc, #396]	; (8000ad0 <__aeabi_dadd+0x374>)
 8000942:	1c72      	adds	r2, r6, #1
 8000944:	4222      	tst	r2, r4
 8000946:	d000      	beq.n	800094a <__aeabi_dadd+0x1ee>
 8000948:	e0e0      	b.n	8000b0c <__aeabi_dadd+0x3b0>
 800094a:	000a      	movs	r2, r1
 800094c:	431a      	orrs	r2, r3
 800094e:	2e00      	cmp	r6, #0
 8000950:	d000      	beq.n	8000954 <__aeabi_dadd+0x1f8>
 8000952:	e174      	b.n	8000c3e <__aeabi_dadd+0x4e2>
 8000954:	2a00      	cmp	r2, #0
 8000956:	d100      	bne.n	800095a <__aeabi_dadd+0x1fe>
 8000958:	e1d0      	b.n	8000cfc <__aeabi_dadd+0x5a0>
 800095a:	464a      	mov	r2, r9
 800095c:	4302      	orrs	r2, r0
 800095e:	d000      	beq.n	8000962 <__aeabi_dadd+0x206>
 8000960:	e1e3      	b.n	8000d2a <__aeabi_dadd+0x5ce>
 8000962:	074a      	lsls	r2, r1, #29
 8000964:	08db      	lsrs	r3, r3, #3
 8000966:	4313      	orrs	r3, r2
 8000968:	08c9      	lsrs	r1, r1, #3
 800096a:	e029      	b.n	80009c0 <__aeabi_dadd+0x264>
 800096c:	464a      	mov	r2, r9
 800096e:	4302      	orrs	r2, r0
 8000970:	d100      	bne.n	8000974 <__aeabi_dadd+0x218>
 8000972:	e17d      	b.n	8000c70 <__aeabi_dadd+0x514>
 8000974:	1e7a      	subs	r2, r7, #1
 8000976:	2f01      	cmp	r7, #1
 8000978:	d100      	bne.n	800097c <__aeabi_dadd+0x220>
 800097a:	e0e0      	b.n	8000b3e <__aeabi_dadd+0x3e2>
 800097c:	4c52      	ldr	r4, [pc, #328]	; (8000ac8 <__aeabi_dadd+0x36c>)
 800097e:	42a7      	cmp	r7, r4
 8000980:	d100      	bne.n	8000984 <__aeabi_dadd+0x228>
 8000982:	e166      	b.n	8000c52 <__aeabi_dadd+0x4f6>
 8000984:	0017      	movs	r7, r2
 8000986:	e7b2      	b.n	80008ee <__aeabi_dadd+0x192>
 8000988:	0010      	movs	r0, r2
 800098a:	3b1f      	subs	r3, #31
 800098c:	40d8      	lsrs	r0, r3
 800098e:	2920      	cmp	r1, #32
 8000990:	d003      	beq.n	800099a <__aeabi_dadd+0x23e>
 8000992:	2340      	movs	r3, #64	; 0x40
 8000994:	1a5b      	subs	r3, r3, r1
 8000996:	409a      	lsls	r2, r3
 8000998:	4314      	orrs	r4, r2
 800099a:	1e63      	subs	r3, r4, #1
 800099c:	419c      	sbcs	r4, r3
 800099e:	2300      	movs	r3, #0
 80009a0:	2600      	movs	r6, #0
 80009a2:	469a      	mov	sl, r3
 80009a4:	4304      	orrs	r4, r0
 80009a6:	0763      	lsls	r3, r4, #29
 80009a8:	d000      	beq.n	80009ac <__aeabi_dadd+0x250>
 80009aa:	e755      	b.n	8000858 <__aeabi_dadd+0xfc>
 80009ac:	4652      	mov	r2, sl
 80009ae:	08e3      	lsrs	r3, r4, #3
 80009b0:	0752      	lsls	r2, r2, #29
 80009b2:	4313      	orrs	r3, r2
 80009b4:	4652      	mov	r2, sl
 80009b6:	0037      	movs	r7, r6
 80009b8:	08d1      	lsrs	r1, r2, #3
 80009ba:	4a43      	ldr	r2, [pc, #268]	; (8000ac8 <__aeabi_dadd+0x36c>)
 80009bc:	4297      	cmp	r7, r2
 80009be:	d01f      	beq.n	8000a00 <__aeabi_dadd+0x2a4>
 80009c0:	0309      	lsls	r1, r1, #12
 80009c2:	057a      	lsls	r2, r7, #21
 80009c4:	0b0c      	lsrs	r4, r1, #12
 80009c6:	0d52      	lsrs	r2, r2, #21
 80009c8:	e764      	b.n	8000894 <__aeabi_dadd+0x138>
 80009ca:	4642      	mov	r2, r8
 80009cc:	464c      	mov	r4, r9
 80009ce:	4314      	orrs	r4, r2
 80009d0:	1e62      	subs	r2, r4, #1
 80009d2:	4194      	sbcs	r4, r2
 80009d4:	18e4      	adds	r4, r4, r3
 80009d6:	429c      	cmp	r4, r3
 80009d8:	4192      	sbcs	r2, r2
 80009da:	4252      	negs	r2, r2
 80009dc:	4692      	mov	sl, r2
 80009de:	448a      	add	sl, r1
 80009e0:	4653      	mov	r3, sl
 80009e2:	021b      	lsls	r3, r3, #8
 80009e4:	d5df      	bpl.n	80009a6 <__aeabi_dadd+0x24a>
 80009e6:	4b38      	ldr	r3, [pc, #224]	; (8000ac8 <__aeabi_dadd+0x36c>)
 80009e8:	3601      	adds	r6, #1
 80009ea:	429e      	cmp	r6, r3
 80009ec:	d000      	beq.n	80009f0 <__aeabi_dadd+0x294>
 80009ee:	e0b3      	b.n	8000b58 <__aeabi_dadd+0x3fc>
 80009f0:	0032      	movs	r2, r6
 80009f2:	2400      	movs	r4, #0
 80009f4:	2300      	movs	r3, #0
 80009f6:	e74d      	b.n	8000894 <__aeabi_dadd+0x138>
 80009f8:	074a      	lsls	r2, r1, #29
 80009fa:	08db      	lsrs	r3, r3, #3
 80009fc:	4313      	orrs	r3, r2
 80009fe:	08c9      	lsrs	r1, r1, #3
 8000a00:	001a      	movs	r2, r3
 8000a02:	430a      	orrs	r2, r1
 8000a04:	d100      	bne.n	8000a08 <__aeabi_dadd+0x2ac>
 8000a06:	e200      	b.n	8000e0a <__aeabi_dadd+0x6ae>
 8000a08:	2480      	movs	r4, #128	; 0x80
 8000a0a:	0324      	lsls	r4, r4, #12
 8000a0c:	430c      	orrs	r4, r1
 8000a0e:	0324      	lsls	r4, r4, #12
 8000a10:	4a2d      	ldr	r2, [pc, #180]	; (8000ac8 <__aeabi_dadd+0x36c>)
 8000a12:	0b24      	lsrs	r4, r4, #12
 8000a14:	e73e      	b.n	8000894 <__aeabi_dadd+0x138>
 8000a16:	0020      	movs	r0, r4
 8000a18:	f001 fd6e 	bl	80024f8 <__clzsi2>
 8000a1c:	0003      	movs	r3, r0
 8000a1e:	3318      	adds	r3, #24
 8000a20:	2b1f      	cmp	r3, #31
 8000a22:	dc00      	bgt.n	8000a26 <__aeabi_dadd+0x2ca>
 8000a24:	e6f7      	b.n	8000816 <__aeabi_dadd+0xba>
 8000a26:	0022      	movs	r2, r4
 8000a28:	3808      	subs	r0, #8
 8000a2a:	4082      	lsls	r2, r0
 8000a2c:	2400      	movs	r4, #0
 8000a2e:	42b3      	cmp	r3, r6
 8000a30:	db00      	blt.n	8000a34 <__aeabi_dadd+0x2d8>
 8000a32:	e6fc      	b.n	800082e <__aeabi_dadd+0xd2>
 8000a34:	1af6      	subs	r6, r6, r3
 8000a36:	4b25      	ldr	r3, [pc, #148]	; (8000acc <__aeabi_dadd+0x370>)
 8000a38:	401a      	ands	r2, r3
 8000a3a:	4692      	mov	sl, r2
 8000a3c:	e70a      	b.n	8000854 <__aeabi_dadd+0xf8>
 8000a3e:	2f00      	cmp	r7, #0
 8000a40:	d02b      	beq.n	8000a9a <__aeabi_dadd+0x33e>
 8000a42:	1b97      	subs	r7, r2, r6
 8000a44:	2e00      	cmp	r6, #0
 8000a46:	d100      	bne.n	8000a4a <__aeabi_dadd+0x2ee>
 8000a48:	e0b8      	b.n	8000bbc <__aeabi_dadd+0x460>
 8000a4a:	4c1f      	ldr	r4, [pc, #124]	; (8000ac8 <__aeabi_dadd+0x36c>)
 8000a4c:	42a2      	cmp	r2, r4
 8000a4e:	d100      	bne.n	8000a52 <__aeabi_dadd+0x2f6>
 8000a50:	e11c      	b.n	8000c8c <__aeabi_dadd+0x530>
 8000a52:	2480      	movs	r4, #128	; 0x80
 8000a54:	0424      	lsls	r4, r4, #16
 8000a56:	4321      	orrs	r1, r4
 8000a58:	2f38      	cmp	r7, #56	; 0x38
 8000a5a:	dd00      	ble.n	8000a5e <__aeabi_dadd+0x302>
 8000a5c:	e11e      	b.n	8000c9c <__aeabi_dadd+0x540>
 8000a5e:	2f1f      	cmp	r7, #31
 8000a60:	dd00      	ble.n	8000a64 <__aeabi_dadd+0x308>
 8000a62:	e19e      	b.n	8000da2 <__aeabi_dadd+0x646>
 8000a64:	2620      	movs	r6, #32
 8000a66:	000c      	movs	r4, r1
 8000a68:	1bf6      	subs	r6, r6, r7
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	40b3      	lsls	r3, r6
 8000a6e:	40b4      	lsls	r4, r6
 8000a70:	40f8      	lsrs	r0, r7
 8000a72:	1e5e      	subs	r6, r3, #1
 8000a74:	41b3      	sbcs	r3, r6
 8000a76:	40f9      	lsrs	r1, r7
 8000a78:	4304      	orrs	r4, r0
 8000a7a:	431c      	orrs	r4, r3
 8000a7c:	4489      	add	r9, r1
 8000a7e:	4444      	add	r4, r8
 8000a80:	4544      	cmp	r4, r8
 8000a82:	419b      	sbcs	r3, r3
 8000a84:	425b      	negs	r3, r3
 8000a86:	444b      	add	r3, r9
 8000a88:	469a      	mov	sl, r3
 8000a8a:	0016      	movs	r6, r2
 8000a8c:	e7a8      	b.n	80009e0 <__aeabi_dadd+0x284>
 8000a8e:	4642      	mov	r2, r8
 8000a90:	464c      	mov	r4, r9
 8000a92:	4314      	orrs	r4, r2
 8000a94:	1e62      	subs	r2, r4, #1
 8000a96:	4194      	sbcs	r4, r2
 8000a98:	e6a6      	b.n	80007e8 <__aeabi_dadd+0x8c>
 8000a9a:	4c0d      	ldr	r4, [pc, #52]	; (8000ad0 <__aeabi_dadd+0x374>)
 8000a9c:	1c72      	adds	r2, r6, #1
 8000a9e:	4222      	tst	r2, r4
 8000aa0:	d000      	beq.n	8000aa4 <__aeabi_dadd+0x348>
 8000aa2:	e0a8      	b.n	8000bf6 <__aeabi_dadd+0x49a>
 8000aa4:	000a      	movs	r2, r1
 8000aa6:	431a      	orrs	r2, r3
 8000aa8:	2e00      	cmp	r6, #0
 8000aaa:	d000      	beq.n	8000aae <__aeabi_dadd+0x352>
 8000aac:	e10a      	b.n	8000cc4 <__aeabi_dadd+0x568>
 8000aae:	2a00      	cmp	r2, #0
 8000ab0:	d100      	bne.n	8000ab4 <__aeabi_dadd+0x358>
 8000ab2:	e15e      	b.n	8000d72 <__aeabi_dadd+0x616>
 8000ab4:	464a      	mov	r2, r9
 8000ab6:	4302      	orrs	r2, r0
 8000ab8:	d000      	beq.n	8000abc <__aeabi_dadd+0x360>
 8000aba:	e161      	b.n	8000d80 <__aeabi_dadd+0x624>
 8000abc:	074a      	lsls	r2, r1, #29
 8000abe:	08db      	lsrs	r3, r3, #3
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	08c9      	lsrs	r1, r1, #3
 8000ac4:	e77c      	b.n	80009c0 <__aeabi_dadd+0x264>
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	000007ff 	.word	0x000007ff
 8000acc:	ff7fffff 	.word	0xff7fffff
 8000ad0:	000007fe 	.word	0x000007fe
 8000ad4:	4ccf      	ldr	r4, [pc, #828]	; (8000e14 <__aeabi_dadd+0x6b8>)
 8000ad6:	42a2      	cmp	r2, r4
 8000ad8:	d100      	bne.n	8000adc <__aeabi_dadd+0x380>
 8000ada:	e0ce      	b.n	8000c7a <__aeabi_dadd+0x51e>
 8000adc:	2480      	movs	r4, #128	; 0x80
 8000ade:	0424      	lsls	r4, r4, #16
 8000ae0:	4321      	orrs	r1, r4
 8000ae2:	2f38      	cmp	r7, #56	; 0x38
 8000ae4:	dc5b      	bgt.n	8000b9e <__aeabi_dadd+0x442>
 8000ae6:	2f1f      	cmp	r7, #31
 8000ae8:	dd00      	ble.n	8000aec <__aeabi_dadd+0x390>
 8000aea:	e0dc      	b.n	8000ca6 <__aeabi_dadd+0x54a>
 8000aec:	2520      	movs	r5, #32
 8000aee:	000c      	movs	r4, r1
 8000af0:	1bed      	subs	r5, r5, r7
 8000af2:	001e      	movs	r6, r3
 8000af4:	40ab      	lsls	r3, r5
 8000af6:	40ac      	lsls	r4, r5
 8000af8:	40fe      	lsrs	r6, r7
 8000afa:	1e5d      	subs	r5, r3, #1
 8000afc:	41ab      	sbcs	r3, r5
 8000afe:	4334      	orrs	r4, r6
 8000b00:	40f9      	lsrs	r1, r7
 8000b02:	431c      	orrs	r4, r3
 8000b04:	464b      	mov	r3, r9
 8000b06:	1a5b      	subs	r3, r3, r1
 8000b08:	4699      	mov	r9, r3
 8000b0a:	e04c      	b.n	8000ba6 <__aeabi_dadd+0x44a>
 8000b0c:	464a      	mov	r2, r9
 8000b0e:	1a1c      	subs	r4, r3, r0
 8000b10:	1a88      	subs	r0, r1, r2
 8000b12:	42a3      	cmp	r3, r4
 8000b14:	4192      	sbcs	r2, r2
 8000b16:	4252      	negs	r2, r2
 8000b18:	4692      	mov	sl, r2
 8000b1a:	0002      	movs	r2, r0
 8000b1c:	4650      	mov	r0, sl
 8000b1e:	1a12      	subs	r2, r2, r0
 8000b20:	4692      	mov	sl, r2
 8000b22:	0212      	lsls	r2, r2, #8
 8000b24:	d478      	bmi.n	8000c18 <__aeabi_dadd+0x4bc>
 8000b26:	4653      	mov	r3, sl
 8000b28:	4323      	orrs	r3, r4
 8000b2a:	d000      	beq.n	8000b2e <__aeabi_dadd+0x3d2>
 8000b2c:	e66a      	b.n	8000804 <__aeabi_dadd+0xa8>
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2500      	movs	r5, #0
 8000b32:	e745      	b.n	80009c0 <__aeabi_dadd+0x264>
 8000b34:	074a      	lsls	r2, r1, #29
 8000b36:	08db      	lsrs	r3, r3, #3
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	08c9      	lsrs	r1, r1, #3
 8000b3c:	e73d      	b.n	80009ba <__aeabi_dadd+0x25e>
 8000b3e:	181c      	adds	r4, r3, r0
 8000b40:	429c      	cmp	r4, r3
 8000b42:	419b      	sbcs	r3, r3
 8000b44:	4449      	add	r1, r9
 8000b46:	468a      	mov	sl, r1
 8000b48:	425b      	negs	r3, r3
 8000b4a:	449a      	add	sl, r3
 8000b4c:	4653      	mov	r3, sl
 8000b4e:	2601      	movs	r6, #1
 8000b50:	021b      	lsls	r3, r3, #8
 8000b52:	d400      	bmi.n	8000b56 <__aeabi_dadd+0x3fa>
 8000b54:	e727      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000b56:	2602      	movs	r6, #2
 8000b58:	4652      	mov	r2, sl
 8000b5a:	4baf      	ldr	r3, [pc, #700]	; (8000e18 <__aeabi_dadd+0x6bc>)
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	401a      	ands	r2, r3
 8000b60:	0013      	movs	r3, r2
 8000b62:	4021      	ands	r1, r4
 8000b64:	0862      	lsrs	r2, r4, #1
 8000b66:	430a      	orrs	r2, r1
 8000b68:	07dc      	lsls	r4, r3, #31
 8000b6a:	085b      	lsrs	r3, r3, #1
 8000b6c:	469a      	mov	sl, r3
 8000b6e:	4314      	orrs	r4, r2
 8000b70:	e670      	b.n	8000854 <__aeabi_dadd+0xf8>
 8000b72:	003a      	movs	r2, r7
 8000b74:	464c      	mov	r4, r9
 8000b76:	3a20      	subs	r2, #32
 8000b78:	40d4      	lsrs	r4, r2
 8000b7a:	46a4      	mov	ip, r4
 8000b7c:	2f20      	cmp	r7, #32
 8000b7e:	d007      	beq.n	8000b90 <__aeabi_dadd+0x434>
 8000b80:	2240      	movs	r2, #64	; 0x40
 8000b82:	4648      	mov	r0, r9
 8000b84:	1bd2      	subs	r2, r2, r7
 8000b86:	4090      	lsls	r0, r2
 8000b88:	0002      	movs	r2, r0
 8000b8a:	4640      	mov	r0, r8
 8000b8c:	4310      	orrs	r0, r2
 8000b8e:	4680      	mov	r8, r0
 8000b90:	4640      	mov	r0, r8
 8000b92:	1e42      	subs	r2, r0, #1
 8000b94:	4190      	sbcs	r0, r2
 8000b96:	4662      	mov	r2, ip
 8000b98:	0004      	movs	r4, r0
 8000b9a:	4314      	orrs	r4, r2
 8000b9c:	e624      	b.n	80007e8 <__aeabi_dadd+0x8c>
 8000b9e:	4319      	orrs	r1, r3
 8000ba0:	000c      	movs	r4, r1
 8000ba2:	1e63      	subs	r3, r4, #1
 8000ba4:	419c      	sbcs	r4, r3
 8000ba6:	4643      	mov	r3, r8
 8000ba8:	1b1c      	subs	r4, r3, r4
 8000baa:	45a0      	cmp	r8, r4
 8000bac:	419b      	sbcs	r3, r3
 8000bae:	4649      	mov	r1, r9
 8000bb0:	425b      	negs	r3, r3
 8000bb2:	1acb      	subs	r3, r1, r3
 8000bb4:	469a      	mov	sl, r3
 8000bb6:	4665      	mov	r5, ip
 8000bb8:	0016      	movs	r6, r2
 8000bba:	e61b      	b.n	80007f4 <__aeabi_dadd+0x98>
 8000bbc:	000c      	movs	r4, r1
 8000bbe:	431c      	orrs	r4, r3
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_dadd+0x468>
 8000bc2:	e0c7      	b.n	8000d54 <__aeabi_dadd+0x5f8>
 8000bc4:	1e7c      	subs	r4, r7, #1
 8000bc6:	2f01      	cmp	r7, #1
 8000bc8:	d100      	bne.n	8000bcc <__aeabi_dadd+0x470>
 8000bca:	e0f9      	b.n	8000dc0 <__aeabi_dadd+0x664>
 8000bcc:	4e91      	ldr	r6, [pc, #580]	; (8000e14 <__aeabi_dadd+0x6b8>)
 8000bce:	42b7      	cmp	r7, r6
 8000bd0:	d05c      	beq.n	8000c8c <__aeabi_dadd+0x530>
 8000bd2:	0027      	movs	r7, r4
 8000bd4:	e740      	b.n	8000a58 <__aeabi_dadd+0x2fc>
 8000bd6:	2220      	movs	r2, #32
 8000bd8:	464c      	mov	r4, r9
 8000bda:	4640      	mov	r0, r8
 8000bdc:	1bd2      	subs	r2, r2, r7
 8000bde:	4094      	lsls	r4, r2
 8000be0:	40f8      	lsrs	r0, r7
 8000be2:	4304      	orrs	r4, r0
 8000be4:	4640      	mov	r0, r8
 8000be6:	4090      	lsls	r0, r2
 8000be8:	1e42      	subs	r2, r0, #1
 8000bea:	4190      	sbcs	r0, r2
 8000bec:	464a      	mov	r2, r9
 8000bee:	40fa      	lsrs	r2, r7
 8000bf0:	4304      	orrs	r4, r0
 8000bf2:	1889      	adds	r1, r1, r2
 8000bf4:	e6ee      	b.n	80009d4 <__aeabi_dadd+0x278>
 8000bf6:	4c87      	ldr	r4, [pc, #540]	; (8000e14 <__aeabi_dadd+0x6b8>)
 8000bf8:	42a2      	cmp	r2, r4
 8000bfa:	d100      	bne.n	8000bfe <__aeabi_dadd+0x4a2>
 8000bfc:	e6f9      	b.n	80009f2 <__aeabi_dadd+0x296>
 8000bfe:	1818      	adds	r0, r3, r0
 8000c00:	4298      	cmp	r0, r3
 8000c02:	419b      	sbcs	r3, r3
 8000c04:	4449      	add	r1, r9
 8000c06:	425b      	negs	r3, r3
 8000c08:	18cb      	adds	r3, r1, r3
 8000c0a:	07dc      	lsls	r4, r3, #31
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	085b      	lsrs	r3, r3, #1
 8000c10:	469a      	mov	sl, r3
 8000c12:	0016      	movs	r6, r2
 8000c14:	4304      	orrs	r4, r0
 8000c16:	e6c6      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000c18:	4642      	mov	r2, r8
 8000c1a:	1ad4      	subs	r4, r2, r3
 8000c1c:	45a0      	cmp	r8, r4
 8000c1e:	4180      	sbcs	r0, r0
 8000c20:	464b      	mov	r3, r9
 8000c22:	4240      	negs	r0, r0
 8000c24:	1a59      	subs	r1, r3, r1
 8000c26:	1a0b      	subs	r3, r1, r0
 8000c28:	469a      	mov	sl, r3
 8000c2a:	4665      	mov	r5, ip
 8000c2c:	e5ea      	b.n	8000804 <__aeabi_dadd+0xa8>
 8000c2e:	464b      	mov	r3, r9
 8000c30:	464a      	mov	r2, r9
 8000c32:	08c0      	lsrs	r0, r0, #3
 8000c34:	075b      	lsls	r3, r3, #29
 8000c36:	4665      	mov	r5, ip
 8000c38:	4303      	orrs	r3, r0
 8000c3a:	08d1      	lsrs	r1, r2, #3
 8000c3c:	e6bd      	b.n	80009ba <__aeabi_dadd+0x25e>
 8000c3e:	2a00      	cmp	r2, #0
 8000c40:	d000      	beq.n	8000c44 <__aeabi_dadd+0x4e8>
 8000c42:	e08e      	b.n	8000d62 <__aeabi_dadd+0x606>
 8000c44:	464b      	mov	r3, r9
 8000c46:	4303      	orrs	r3, r0
 8000c48:	d117      	bne.n	8000c7a <__aeabi_dadd+0x51e>
 8000c4a:	2180      	movs	r1, #128	; 0x80
 8000c4c:	2500      	movs	r5, #0
 8000c4e:	0309      	lsls	r1, r1, #12
 8000c50:	e6da      	b.n	8000a08 <__aeabi_dadd+0x2ac>
 8000c52:	074a      	lsls	r2, r1, #29
 8000c54:	08db      	lsrs	r3, r3, #3
 8000c56:	4313      	orrs	r3, r2
 8000c58:	08c9      	lsrs	r1, r1, #3
 8000c5a:	e6d1      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000c5c:	1a1c      	subs	r4, r3, r0
 8000c5e:	464a      	mov	r2, r9
 8000c60:	42a3      	cmp	r3, r4
 8000c62:	419b      	sbcs	r3, r3
 8000c64:	1a89      	subs	r1, r1, r2
 8000c66:	425b      	negs	r3, r3
 8000c68:	1acb      	subs	r3, r1, r3
 8000c6a:	469a      	mov	sl, r3
 8000c6c:	2601      	movs	r6, #1
 8000c6e:	e5c1      	b.n	80007f4 <__aeabi_dadd+0x98>
 8000c70:	074a      	lsls	r2, r1, #29
 8000c72:	08db      	lsrs	r3, r3, #3
 8000c74:	4313      	orrs	r3, r2
 8000c76:	08c9      	lsrs	r1, r1, #3
 8000c78:	e69f      	b.n	80009ba <__aeabi_dadd+0x25e>
 8000c7a:	4643      	mov	r3, r8
 8000c7c:	08d8      	lsrs	r0, r3, #3
 8000c7e:	464b      	mov	r3, r9
 8000c80:	464a      	mov	r2, r9
 8000c82:	075b      	lsls	r3, r3, #29
 8000c84:	4665      	mov	r5, ip
 8000c86:	4303      	orrs	r3, r0
 8000c88:	08d1      	lsrs	r1, r2, #3
 8000c8a:	e6b9      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000c8c:	4643      	mov	r3, r8
 8000c8e:	08d8      	lsrs	r0, r3, #3
 8000c90:	464b      	mov	r3, r9
 8000c92:	464a      	mov	r2, r9
 8000c94:	075b      	lsls	r3, r3, #29
 8000c96:	4303      	orrs	r3, r0
 8000c98:	08d1      	lsrs	r1, r2, #3
 8000c9a:	e6b1      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000c9c:	4319      	orrs	r1, r3
 8000c9e:	000c      	movs	r4, r1
 8000ca0:	1e63      	subs	r3, r4, #1
 8000ca2:	419c      	sbcs	r4, r3
 8000ca4:	e6eb      	b.n	8000a7e <__aeabi_dadd+0x322>
 8000ca6:	003c      	movs	r4, r7
 8000ca8:	000d      	movs	r5, r1
 8000caa:	3c20      	subs	r4, #32
 8000cac:	40e5      	lsrs	r5, r4
 8000cae:	2f20      	cmp	r7, #32
 8000cb0:	d003      	beq.n	8000cba <__aeabi_dadd+0x55e>
 8000cb2:	2440      	movs	r4, #64	; 0x40
 8000cb4:	1be4      	subs	r4, r4, r7
 8000cb6:	40a1      	lsls	r1, r4
 8000cb8:	430b      	orrs	r3, r1
 8000cba:	001c      	movs	r4, r3
 8000cbc:	1e63      	subs	r3, r4, #1
 8000cbe:	419c      	sbcs	r4, r3
 8000cc0:	432c      	orrs	r4, r5
 8000cc2:	e770      	b.n	8000ba6 <__aeabi_dadd+0x44a>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	d0e1      	beq.n	8000c8c <__aeabi_dadd+0x530>
 8000cc8:	464a      	mov	r2, r9
 8000cca:	4302      	orrs	r2, r0
 8000ccc:	d0c1      	beq.n	8000c52 <__aeabi_dadd+0x4f6>
 8000cce:	074a      	lsls	r2, r1, #29
 8000cd0:	08db      	lsrs	r3, r3, #3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	2280      	movs	r2, #128	; 0x80
 8000cd6:	08c9      	lsrs	r1, r1, #3
 8000cd8:	0312      	lsls	r2, r2, #12
 8000cda:	4211      	tst	r1, r2
 8000cdc:	d008      	beq.n	8000cf0 <__aeabi_dadd+0x594>
 8000cde:	4648      	mov	r0, r9
 8000ce0:	08c4      	lsrs	r4, r0, #3
 8000ce2:	4214      	tst	r4, r2
 8000ce4:	d104      	bne.n	8000cf0 <__aeabi_dadd+0x594>
 8000ce6:	4643      	mov	r3, r8
 8000ce8:	0021      	movs	r1, r4
 8000cea:	08db      	lsrs	r3, r3, #3
 8000cec:	0742      	lsls	r2, r0, #29
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	0f5a      	lsrs	r2, r3, #29
 8000cf2:	00db      	lsls	r3, r3, #3
 8000cf4:	0752      	lsls	r2, r2, #29
 8000cf6:	08db      	lsrs	r3, r3, #3
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	e681      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000cfc:	464b      	mov	r3, r9
 8000cfe:	4303      	orrs	r3, r0
 8000d00:	d100      	bne.n	8000d04 <__aeabi_dadd+0x5a8>
 8000d02:	e714      	b.n	8000b2e <__aeabi_dadd+0x3d2>
 8000d04:	464b      	mov	r3, r9
 8000d06:	464a      	mov	r2, r9
 8000d08:	08c0      	lsrs	r0, r0, #3
 8000d0a:	075b      	lsls	r3, r3, #29
 8000d0c:	4665      	mov	r5, ip
 8000d0e:	4303      	orrs	r3, r0
 8000d10:	08d1      	lsrs	r1, r2, #3
 8000d12:	e655      	b.n	80009c0 <__aeabi_dadd+0x264>
 8000d14:	1ac4      	subs	r4, r0, r3
 8000d16:	45a0      	cmp	r8, r4
 8000d18:	4180      	sbcs	r0, r0
 8000d1a:	464b      	mov	r3, r9
 8000d1c:	4240      	negs	r0, r0
 8000d1e:	1a59      	subs	r1, r3, r1
 8000d20:	1a0b      	subs	r3, r1, r0
 8000d22:	469a      	mov	sl, r3
 8000d24:	4665      	mov	r5, ip
 8000d26:	2601      	movs	r6, #1
 8000d28:	e564      	b.n	80007f4 <__aeabi_dadd+0x98>
 8000d2a:	1a1c      	subs	r4, r3, r0
 8000d2c:	464a      	mov	r2, r9
 8000d2e:	42a3      	cmp	r3, r4
 8000d30:	4180      	sbcs	r0, r0
 8000d32:	1a8a      	subs	r2, r1, r2
 8000d34:	4240      	negs	r0, r0
 8000d36:	1a12      	subs	r2, r2, r0
 8000d38:	4692      	mov	sl, r2
 8000d3a:	0212      	lsls	r2, r2, #8
 8000d3c:	d549      	bpl.n	8000dd2 <__aeabi_dadd+0x676>
 8000d3e:	4642      	mov	r2, r8
 8000d40:	1ad4      	subs	r4, r2, r3
 8000d42:	45a0      	cmp	r8, r4
 8000d44:	4180      	sbcs	r0, r0
 8000d46:	464b      	mov	r3, r9
 8000d48:	4240      	negs	r0, r0
 8000d4a:	1a59      	subs	r1, r3, r1
 8000d4c:	1a0b      	subs	r3, r1, r0
 8000d4e:	469a      	mov	sl, r3
 8000d50:	4665      	mov	r5, ip
 8000d52:	e57f      	b.n	8000854 <__aeabi_dadd+0xf8>
 8000d54:	464b      	mov	r3, r9
 8000d56:	464a      	mov	r2, r9
 8000d58:	08c0      	lsrs	r0, r0, #3
 8000d5a:	075b      	lsls	r3, r3, #29
 8000d5c:	4303      	orrs	r3, r0
 8000d5e:	08d1      	lsrs	r1, r2, #3
 8000d60:	e62b      	b.n	80009ba <__aeabi_dadd+0x25e>
 8000d62:	464a      	mov	r2, r9
 8000d64:	08db      	lsrs	r3, r3, #3
 8000d66:	4302      	orrs	r2, r0
 8000d68:	d138      	bne.n	8000ddc <__aeabi_dadd+0x680>
 8000d6a:	074a      	lsls	r2, r1, #29
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	08c9      	lsrs	r1, r1, #3
 8000d70:	e646      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000d72:	464b      	mov	r3, r9
 8000d74:	464a      	mov	r2, r9
 8000d76:	08c0      	lsrs	r0, r0, #3
 8000d78:	075b      	lsls	r3, r3, #29
 8000d7a:	4303      	orrs	r3, r0
 8000d7c:	08d1      	lsrs	r1, r2, #3
 8000d7e:	e61f      	b.n	80009c0 <__aeabi_dadd+0x264>
 8000d80:	181c      	adds	r4, r3, r0
 8000d82:	429c      	cmp	r4, r3
 8000d84:	419b      	sbcs	r3, r3
 8000d86:	4449      	add	r1, r9
 8000d88:	468a      	mov	sl, r1
 8000d8a:	425b      	negs	r3, r3
 8000d8c:	449a      	add	sl, r3
 8000d8e:	4653      	mov	r3, sl
 8000d90:	021b      	lsls	r3, r3, #8
 8000d92:	d400      	bmi.n	8000d96 <__aeabi_dadd+0x63a>
 8000d94:	e607      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000d96:	4652      	mov	r2, sl
 8000d98:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <__aeabi_dadd+0x6bc>)
 8000d9a:	2601      	movs	r6, #1
 8000d9c:	401a      	ands	r2, r3
 8000d9e:	4692      	mov	sl, r2
 8000da0:	e601      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000da2:	003c      	movs	r4, r7
 8000da4:	000e      	movs	r6, r1
 8000da6:	3c20      	subs	r4, #32
 8000da8:	40e6      	lsrs	r6, r4
 8000daa:	2f20      	cmp	r7, #32
 8000dac:	d003      	beq.n	8000db6 <__aeabi_dadd+0x65a>
 8000dae:	2440      	movs	r4, #64	; 0x40
 8000db0:	1be4      	subs	r4, r4, r7
 8000db2:	40a1      	lsls	r1, r4
 8000db4:	430b      	orrs	r3, r1
 8000db6:	001c      	movs	r4, r3
 8000db8:	1e63      	subs	r3, r4, #1
 8000dba:	419c      	sbcs	r4, r3
 8000dbc:	4334      	orrs	r4, r6
 8000dbe:	e65e      	b.n	8000a7e <__aeabi_dadd+0x322>
 8000dc0:	4443      	add	r3, r8
 8000dc2:	4283      	cmp	r3, r0
 8000dc4:	4180      	sbcs	r0, r0
 8000dc6:	4449      	add	r1, r9
 8000dc8:	468a      	mov	sl, r1
 8000dca:	4240      	negs	r0, r0
 8000dcc:	001c      	movs	r4, r3
 8000dce:	4482      	add	sl, r0
 8000dd0:	e6bc      	b.n	8000b4c <__aeabi_dadd+0x3f0>
 8000dd2:	4653      	mov	r3, sl
 8000dd4:	4323      	orrs	r3, r4
 8000dd6:	d100      	bne.n	8000dda <__aeabi_dadd+0x67e>
 8000dd8:	e6a9      	b.n	8000b2e <__aeabi_dadd+0x3d2>
 8000dda:	e5e4      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000ddc:	074a      	lsls	r2, r1, #29
 8000dde:	4313      	orrs	r3, r2
 8000de0:	2280      	movs	r2, #128	; 0x80
 8000de2:	08c9      	lsrs	r1, r1, #3
 8000de4:	0312      	lsls	r2, r2, #12
 8000de6:	4211      	tst	r1, r2
 8000de8:	d009      	beq.n	8000dfe <__aeabi_dadd+0x6a2>
 8000dea:	4648      	mov	r0, r9
 8000dec:	08c4      	lsrs	r4, r0, #3
 8000dee:	4214      	tst	r4, r2
 8000df0:	d105      	bne.n	8000dfe <__aeabi_dadd+0x6a2>
 8000df2:	4643      	mov	r3, r8
 8000df4:	4665      	mov	r5, ip
 8000df6:	0021      	movs	r1, r4
 8000df8:	08db      	lsrs	r3, r3, #3
 8000dfa:	0742      	lsls	r2, r0, #29
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	0f5a      	lsrs	r2, r3, #29
 8000e00:	00db      	lsls	r3, r3, #3
 8000e02:	08db      	lsrs	r3, r3, #3
 8000e04:	0752      	lsls	r2, r2, #29
 8000e06:	4313      	orrs	r3, r2
 8000e08:	e5fa      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	4a01      	ldr	r2, [pc, #4]	; (8000e14 <__aeabi_dadd+0x6b8>)
 8000e0e:	001c      	movs	r4, r3
 8000e10:	e540      	b.n	8000894 <__aeabi_dadd+0x138>
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	000007ff 	.word	0x000007ff
 8000e18:	ff7fffff 	.word	0xff7fffff

08000e1c <__aeabi_ddiv>:
 8000e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e1e:	4657      	mov	r7, sl
 8000e20:	464e      	mov	r6, r9
 8000e22:	4645      	mov	r5, r8
 8000e24:	46de      	mov	lr, fp
 8000e26:	b5e0      	push	{r5, r6, r7, lr}
 8000e28:	030c      	lsls	r4, r1, #12
 8000e2a:	001f      	movs	r7, r3
 8000e2c:	004b      	lsls	r3, r1, #1
 8000e2e:	4681      	mov	r9, r0
 8000e30:	4692      	mov	sl, r2
 8000e32:	0005      	movs	r5, r0
 8000e34:	b085      	sub	sp, #20
 8000e36:	0b24      	lsrs	r4, r4, #12
 8000e38:	0d5b      	lsrs	r3, r3, #21
 8000e3a:	0fce      	lsrs	r6, r1, #31
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d100      	bne.n	8000e42 <__aeabi_ddiv+0x26>
 8000e40:	e152      	b.n	80010e8 <__aeabi_ddiv+0x2cc>
 8000e42:	4ad2      	ldr	r2, [pc, #840]	; (800118c <__aeabi_ddiv+0x370>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d100      	bne.n	8000e4a <__aeabi_ddiv+0x2e>
 8000e48:	e16e      	b.n	8001128 <__aeabi_ddiv+0x30c>
 8000e4a:	0f42      	lsrs	r2, r0, #29
 8000e4c:	00e4      	lsls	r4, r4, #3
 8000e4e:	4314      	orrs	r4, r2
 8000e50:	2280      	movs	r2, #128	; 0x80
 8000e52:	0412      	lsls	r2, r2, #16
 8000e54:	4322      	orrs	r2, r4
 8000e56:	4690      	mov	r8, r2
 8000e58:	4acd      	ldr	r2, [pc, #820]	; (8001190 <__aeabi_ddiv+0x374>)
 8000e5a:	00c5      	lsls	r5, r0, #3
 8000e5c:	4693      	mov	fp, r2
 8000e5e:	449b      	add	fp, r3
 8000e60:	2300      	movs	r3, #0
 8000e62:	4699      	mov	r9, r3
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	033c      	lsls	r4, r7, #12
 8000e68:	007b      	lsls	r3, r7, #1
 8000e6a:	4650      	mov	r0, sl
 8000e6c:	0b24      	lsrs	r4, r4, #12
 8000e6e:	0d5b      	lsrs	r3, r3, #21
 8000e70:	0fff      	lsrs	r7, r7, #31
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d100      	bne.n	8000e78 <__aeabi_ddiv+0x5c>
 8000e76:	e11a      	b.n	80010ae <__aeabi_ddiv+0x292>
 8000e78:	4ac4      	ldr	r2, [pc, #784]	; (800118c <__aeabi_ddiv+0x370>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d100      	bne.n	8000e80 <__aeabi_ddiv+0x64>
 8000e7e:	e15e      	b.n	800113e <__aeabi_ddiv+0x322>
 8000e80:	0f42      	lsrs	r2, r0, #29
 8000e82:	00e4      	lsls	r4, r4, #3
 8000e84:	4322      	orrs	r2, r4
 8000e86:	2480      	movs	r4, #128	; 0x80
 8000e88:	0424      	lsls	r4, r4, #16
 8000e8a:	4314      	orrs	r4, r2
 8000e8c:	4ac0      	ldr	r2, [pc, #768]	; (8001190 <__aeabi_ddiv+0x374>)
 8000e8e:	00c1      	lsls	r1, r0, #3
 8000e90:	4694      	mov	ip, r2
 8000e92:	465a      	mov	r2, fp
 8000e94:	4463      	add	r3, ip
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	469b      	mov	fp, r3
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	0033      	movs	r3, r6
 8000e9e:	407b      	eors	r3, r7
 8000ea0:	469a      	mov	sl, r3
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	2b0f      	cmp	r3, #15
 8000ea6:	d827      	bhi.n	8000ef8 <__aeabi_ddiv+0xdc>
 8000ea8:	4aba      	ldr	r2, [pc, #744]	; (8001194 <__aeabi_ddiv+0x378>)
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	58d3      	ldr	r3, [r2, r3]
 8000eae:	469f      	mov	pc, r3
 8000eb0:	46b2      	mov	sl, r6
 8000eb2:	9b00      	ldr	r3, [sp, #0]
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d016      	beq.n	8000ee6 <__aeabi_ddiv+0xca>
 8000eb8:	2b03      	cmp	r3, #3
 8000eba:	d100      	bne.n	8000ebe <__aeabi_ddiv+0xa2>
 8000ebc:	e287      	b.n	80013ce <__aeabi_ddiv+0x5b2>
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d000      	beq.n	8000ec4 <__aeabi_ddiv+0xa8>
 8000ec2:	e0d5      	b.n	8001070 <__aeabi_ddiv+0x254>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2500      	movs	r5, #0
 8000eca:	051b      	lsls	r3, r3, #20
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	4652      	mov	r2, sl
 8000ed0:	07d2      	lsls	r2, r2, #31
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	0028      	movs	r0, r5
 8000ed6:	0019      	movs	r1, r3
 8000ed8:	b005      	add	sp, #20
 8000eda:	bcf0      	pop	{r4, r5, r6, r7}
 8000edc:	46bb      	mov	fp, r7
 8000ede:	46b2      	mov	sl, r6
 8000ee0:	46a9      	mov	r9, r5
 8000ee2:	46a0      	mov	r8, r4
 8000ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2500      	movs	r5, #0
 8000eea:	4ba8      	ldr	r3, [pc, #672]	; (800118c <__aeabi_ddiv+0x370>)
 8000eec:	e7ed      	b.n	8000eca <__aeabi_ddiv+0xae>
 8000eee:	46ba      	mov	sl, r7
 8000ef0:	46a0      	mov	r8, r4
 8000ef2:	000d      	movs	r5, r1
 8000ef4:	9000      	str	r0, [sp, #0]
 8000ef6:	e7dc      	b.n	8000eb2 <__aeabi_ddiv+0x96>
 8000ef8:	4544      	cmp	r4, r8
 8000efa:	d200      	bcs.n	8000efe <__aeabi_ddiv+0xe2>
 8000efc:	e1c4      	b.n	8001288 <__aeabi_ddiv+0x46c>
 8000efe:	d100      	bne.n	8000f02 <__aeabi_ddiv+0xe6>
 8000f00:	e1bf      	b.n	8001282 <__aeabi_ddiv+0x466>
 8000f02:	2301      	movs	r3, #1
 8000f04:	425b      	negs	r3, r3
 8000f06:	469c      	mov	ip, r3
 8000f08:	002e      	movs	r6, r5
 8000f0a:	4640      	mov	r0, r8
 8000f0c:	2500      	movs	r5, #0
 8000f0e:	44e3      	add	fp, ip
 8000f10:	0223      	lsls	r3, r4, #8
 8000f12:	0e0c      	lsrs	r4, r1, #24
 8000f14:	431c      	orrs	r4, r3
 8000f16:	0c1b      	lsrs	r3, r3, #16
 8000f18:	4699      	mov	r9, r3
 8000f1a:	0423      	lsls	r3, r4, #16
 8000f1c:	020a      	lsls	r2, r1, #8
 8000f1e:	0c1f      	lsrs	r7, r3, #16
 8000f20:	4649      	mov	r1, r9
 8000f22:	9200      	str	r2, [sp, #0]
 8000f24:	9701      	str	r7, [sp, #4]
 8000f26:	f7ff f98f 	bl	8000248 <__aeabi_uidivmod>
 8000f2a:	0002      	movs	r2, r0
 8000f2c:	437a      	muls	r2, r7
 8000f2e:	040b      	lsls	r3, r1, #16
 8000f30:	0c31      	lsrs	r1, r6, #16
 8000f32:	4680      	mov	r8, r0
 8000f34:	4319      	orrs	r1, r3
 8000f36:	428a      	cmp	r2, r1
 8000f38:	d907      	bls.n	8000f4a <__aeabi_ddiv+0x12e>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	425b      	negs	r3, r3
 8000f3e:	469c      	mov	ip, r3
 8000f40:	1909      	adds	r1, r1, r4
 8000f42:	44e0      	add	r8, ip
 8000f44:	428c      	cmp	r4, r1
 8000f46:	d800      	bhi.n	8000f4a <__aeabi_ddiv+0x12e>
 8000f48:	e201      	b.n	800134e <__aeabi_ddiv+0x532>
 8000f4a:	1a88      	subs	r0, r1, r2
 8000f4c:	4649      	mov	r1, r9
 8000f4e:	f7ff f97b 	bl	8000248 <__aeabi_uidivmod>
 8000f52:	9a01      	ldr	r2, [sp, #4]
 8000f54:	0436      	lsls	r6, r6, #16
 8000f56:	4342      	muls	r2, r0
 8000f58:	0409      	lsls	r1, r1, #16
 8000f5a:	0c36      	lsrs	r6, r6, #16
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	430e      	orrs	r6, r1
 8000f60:	42b2      	cmp	r2, r6
 8000f62:	d904      	bls.n	8000f6e <__aeabi_ddiv+0x152>
 8000f64:	1936      	adds	r6, r6, r4
 8000f66:	3b01      	subs	r3, #1
 8000f68:	42b4      	cmp	r4, r6
 8000f6a:	d800      	bhi.n	8000f6e <__aeabi_ddiv+0x152>
 8000f6c:	e1e9      	b.n	8001342 <__aeabi_ddiv+0x526>
 8000f6e:	1ab0      	subs	r0, r6, r2
 8000f70:	4642      	mov	r2, r8
 8000f72:	9e00      	ldr	r6, [sp, #0]
 8000f74:	0412      	lsls	r2, r2, #16
 8000f76:	431a      	orrs	r2, r3
 8000f78:	0c33      	lsrs	r3, r6, #16
 8000f7a:	001f      	movs	r7, r3
 8000f7c:	0c11      	lsrs	r1, r2, #16
 8000f7e:	4690      	mov	r8, r2
 8000f80:	9302      	str	r3, [sp, #8]
 8000f82:	0413      	lsls	r3, r2, #16
 8000f84:	0432      	lsls	r2, r6, #16
 8000f86:	0c16      	lsrs	r6, r2, #16
 8000f88:	0032      	movs	r2, r6
 8000f8a:	0c1b      	lsrs	r3, r3, #16
 8000f8c:	435a      	muls	r2, r3
 8000f8e:	9603      	str	r6, [sp, #12]
 8000f90:	437b      	muls	r3, r7
 8000f92:	434e      	muls	r6, r1
 8000f94:	4379      	muls	r1, r7
 8000f96:	0c17      	lsrs	r7, r2, #16
 8000f98:	46bc      	mov	ip, r7
 8000f9a:	199b      	adds	r3, r3, r6
 8000f9c:	4463      	add	r3, ip
 8000f9e:	429e      	cmp	r6, r3
 8000fa0:	d903      	bls.n	8000faa <__aeabi_ddiv+0x18e>
 8000fa2:	2680      	movs	r6, #128	; 0x80
 8000fa4:	0276      	lsls	r6, r6, #9
 8000fa6:	46b4      	mov	ip, r6
 8000fa8:	4461      	add	r1, ip
 8000faa:	0c1e      	lsrs	r6, r3, #16
 8000fac:	1871      	adds	r1, r6, r1
 8000fae:	0416      	lsls	r6, r2, #16
 8000fb0:	041b      	lsls	r3, r3, #16
 8000fb2:	0c36      	lsrs	r6, r6, #16
 8000fb4:	199e      	adds	r6, r3, r6
 8000fb6:	4288      	cmp	r0, r1
 8000fb8:	d302      	bcc.n	8000fc0 <__aeabi_ddiv+0x1a4>
 8000fba:	d112      	bne.n	8000fe2 <__aeabi_ddiv+0x1c6>
 8000fbc:	42b5      	cmp	r5, r6
 8000fbe:	d210      	bcs.n	8000fe2 <__aeabi_ddiv+0x1c6>
 8000fc0:	4643      	mov	r3, r8
 8000fc2:	1e5a      	subs	r2, r3, #1
 8000fc4:	9b00      	ldr	r3, [sp, #0]
 8000fc6:	469c      	mov	ip, r3
 8000fc8:	4465      	add	r5, ip
 8000fca:	001f      	movs	r7, r3
 8000fcc:	429d      	cmp	r5, r3
 8000fce:	419b      	sbcs	r3, r3
 8000fd0:	425b      	negs	r3, r3
 8000fd2:	191b      	adds	r3, r3, r4
 8000fd4:	18c0      	adds	r0, r0, r3
 8000fd6:	4284      	cmp	r4, r0
 8000fd8:	d200      	bcs.n	8000fdc <__aeabi_ddiv+0x1c0>
 8000fda:	e19e      	b.n	800131a <__aeabi_ddiv+0x4fe>
 8000fdc:	d100      	bne.n	8000fe0 <__aeabi_ddiv+0x1c4>
 8000fde:	e199      	b.n	8001314 <__aeabi_ddiv+0x4f8>
 8000fe0:	4690      	mov	r8, r2
 8000fe2:	1bae      	subs	r6, r5, r6
 8000fe4:	42b5      	cmp	r5, r6
 8000fe6:	41ad      	sbcs	r5, r5
 8000fe8:	1a40      	subs	r0, r0, r1
 8000fea:	426d      	negs	r5, r5
 8000fec:	1b40      	subs	r0, r0, r5
 8000fee:	4284      	cmp	r4, r0
 8000ff0:	d100      	bne.n	8000ff4 <__aeabi_ddiv+0x1d8>
 8000ff2:	e1d2      	b.n	800139a <__aeabi_ddiv+0x57e>
 8000ff4:	4649      	mov	r1, r9
 8000ff6:	f7ff f927 	bl	8000248 <__aeabi_uidivmod>
 8000ffa:	9a01      	ldr	r2, [sp, #4]
 8000ffc:	040b      	lsls	r3, r1, #16
 8000ffe:	4342      	muls	r2, r0
 8001000:	0c31      	lsrs	r1, r6, #16
 8001002:	0005      	movs	r5, r0
 8001004:	4319      	orrs	r1, r3
 8001006:	428a      	cmp	r2, r1
 8001008:	d900      	bls.n	800100c <__aeabi_ddiv+0x1f0>
 800100a:	e16c      	b.n	80012e6 <__aeabi_ddiv+0x4ca>
 800100c:	1a88      	subs	r0, r1, r2
 800100e:	4649      	mov	r1, r9
 8001010:	f7ff f91a 	bl	8000248 <__aeabi_uidivmod>
 8001014:	9a01      	ldr	r2, [sp, #4]
 8001016:	0436      	lsls	r6, r6, #16
 8001018:	4342      	muls	r2, r0
 800101a:	0409      	lsls	r1, r1, #16
 800101c:	0c36      	lsrs	r6, r6, #16
 800101e:	0003      	movs	r3, r0
 8001020:	430e      	orrs	r6, r1
 8001022:	42b2      	cmp	r2, r6
 8001024:	d900      	bls.n	8001028 <__aeabi_ddiv+0x20c>
 8001026:	e153      	b.n	80012d0 <__aeabi_ddiv+0x4b4>
 8001028:	9803      	ldr	r0, [sp, #12]
 800102a:	1ab6      	subs	r6, r6, r2
 800102c:	0002      	movs	r2, r0
 800102e:	042d      	lsls	r5, r5, #16
 8001030:	431d      	orrs	r5, r3
 8001032:	9f02      	ldr	r7, [sp, #8]
 8001034:	042b      	lsls	r3, r5, #16
 8001036:	0c1b      	lsrs	r3, r3, #16
 8001038:	435a      	muls	r2, r3
 800103a:	437b      	muls	r3, r7
 800103c:	469c      	mov	ip, r3
 800103e:	0c29      	lsrs	r1, r5, #16
 8001040:	4348      	muls	r0, r1
 8001042:	0c13      	lsrs	r3, r2, #16
 8001044:	4484      	add	ip, r0
 8001046:	4463      	add	r3, ip
 8001048:	4379      	muls	r1, r7
 800104a:	4298      	cmp	r0, r3
 800104c:	d903      	bls.n	8001056 <__aeabi_ddiv+0x23a>
 800104e:	2080      	movs	r0, #128	; 0x80
 8001050:	0240      	lsls	r0, r0, #9
 8001052:	4684      	mov	ip, r0
 8001054:	4461      	add	r1, ip
 8001056:	0c18      	lsrs	r0, r3, #16
 8001058:	0412      	lsls	r2, r2, #16
 800105a:	041b      	lsls	r3, r3, #16
 800105c:	0c12      	lsrs	r2, r2, #16
 800105e:	1840      	adds	r0, r0, r1
 8001060:	189b      	adds	r3, r3, r2
 8001062:	4286      	cmp	r6, r0
 8001064:	d200      	bcs.n	8001068 <__aeabi_ddiv+0x24c>
 8001066:	e100      	b.n	800126a <__aeabi_ddiv+0x44e>
 8001068:	d100      	bne.n	800106c <__aeabi_ddiv+0x250>
 800106a:	e0fb      	b.n	8001264 <__aeabi_ddiv+0x448>
 800106c:	2301      	movs	r3, #1
 800106e:	431d      	orrs	r5, r3
 8001070:	4b49      	ldr	r3, [pc, #292]	; (8001198 <__aeabi_ddiv+0x37c>)
 8001072:	445b      	add	r3, fp
 8001074:	2b00      	cmp	r3, #0
 8001076:	dc00      	bgt.n	800107a <__aeabi_ddiv+0x25e>
 8001078:	e0aa      	b.n	80011d0 <__aeabi_ddiv+0x3b4>
 800107a:	076a      	lsls	r2, r5, #29
 800107c:	d000      	beq.n	8001080 <__aeabi_ddiv+0x264>
 800107e:	e13d      	b.n	80012fc <__aeabi_ddiv+0x4e0>
 8001080:	08e9      	lsrs	r1, r5, #3
 8001082:	4642      	mov	r2, r8
 8001084:	01d2      	lsls	r2, r2, #7
 8001086:	d506      	bpl.n	8001096 <__aeabi_ddiv+0x27a>
 8001088:	4642      	mov	r2, r8
 800108a:	4b44      	ldr	r3, [pc, #272]	; (800119c <__aeabi_ddiv+0x380>)
 800108c:	401a      	ands	r2, r3
 800108e:	2380      	movs	r3, #128	; 0x80
 8001090:	4690      	mov	r8, r2
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	445b      	add	r3, fp
 8001096:	4a42      	ldr	r2, [pc, #264]	; (80011a0 <__aeabi_ddiv+0x384>)
 8001098:	4293      	cmp	r3, r2
 800109a:	dd00      	ble.n	800109e <__aeabi_ddiv+0x282>
 800109c:	e723      	b.n	8000ee6 <__aeabi_ddiv+0xca>
 800109e:	4642      	mov	r2, r8
 80010a0:	055b      	lsls	r3, r3, #21
 80010a2:	0755      	lsls	r5, r2, #29
 80010a4:	0252      	lsls	r2, r2, #9
 80010a6:	430d      	orrs	r5, r1
 80010a8:	0b12      	lsrs	r2, r2, #12
 80010aa:	0d5b      	lsrs	r3, r3, #21
 80010ac:	e70d      	b.n	8000eca <__aeabi_ddiv+0xae>
 80010ae:	4651      	mov	r1, sl
 80010b0:	4321      	orrs	r1, r4
 80010b2:	d100      	bne.n	80010b6 <__aeabi_ddiv+0x29a>
 80010b4:	e07c      	b.n	80011b0 <__aeabi_ddiv+0x394>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d100      	bne.n	80010bc <__aeabi_ddiv+0x2a0>
 80010ba:	e0fb      	b.n	80012b4 <__aeabi_ddiv+0x498>
 80010bc:	0020      	movs	r0, r4
 80010be:	f001 fa1b 	bl	80024f8 <__clzsi2>
 80010c2:	0002      	movs	r2, r0
 80010c4:	3a0b      	subs	r2, #11
 80010c6:	231d      	movs	r3, #29
 80010c8:	1a9b      	subs	r3, r3, r2
 80010ca:	4652      	mov	r2, sl
 80010cc:	0001      	movs	r1, r0
 80010ce:	40da      	lsrs	r2, r3
 80010d0:	4653      	mov	r3, sl
 80010d2:	3908      	subs	r1, #8
 80010d4:	408b      	lsls	r3, r1
 80010d6:	408c      	lsls	r4, r1
 80010d8:	0019      	movs	r1, r3
 80010da:	4314      	orrs	r4, r2
 80010dc:	4b31      	ldr	r3, [pc, #196]	; (80011a4 <__aeabi_ddiv+0x388>)
 80010de:	4458      	add	r0, fp
 80010e0:	469b      	mov	fp, r3
 80010e2:	4483      	add	fp, r0
 80010e4:	2000      	movs	r0, #0
 80010e6:	e6d9      	b.n	8000e9c <__aeabi_ddiv+0x80>
 80010e8:	0003      	movs	r3, r0
 80010ea:	4323      	orrs	r3, r4
 80010ec:	4698      	mov	r8, r3
 80010ee:	d044      	beq.n	800117a <__aeabi_ddiv+0x35e>
 80010f0:	2c00      	cmp	r4, #0
 80010f2:	d100      	bne.n	80010f6 <__aeabi_ddiv+0x2da>
 80010f4:	e0cf      	b.n	8001296 <__aeabi_ddiv+0x47a>
 80010f6:	0020      	movs	r0, r4
 80010f8:	f001 f9fe 	bl	80024f8 <__clzsi2>
 80010fc:	0001      	movs	r1, r0
 80010fe:	0002      	movs	r2, r0
 8001100:	390b      	subs	r1, #11
 8001102:	231d      	movs	r3, #29
 8001104:	1a5b      	subs	r3, r3, r1
 8001106:	4649      	mov	r1, r9
 8001108:	0010      	movs	r0, r2
 800110a:	40d9      	lsrs	r1, r3
 800110c:	3808      	subs	r0, #8
 800110e:	4084      	lsls	r4, r0
 8001110:	000b      	movs	r3, r1
 8001112:	464d      	mov	r5, r9
 8001114:	4323      	orrs	r3, r4
 8001116:	4698      	mov	r8, r3
 8001118:	4085      	lsls	r5, r0
 800111a:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <__aeabi_ddiv+0x38c>)
 800111c:	1a9b      	subs	r3, r3, r2
 800111e:	469b      	mov	fp, r3
 8001120:	2300      	movs	r3, #0
 8001122:	4699      	mov	r9, r3
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	e69e      	b.n	8000e66 <__aeabi_ddiv+0x4a>
 8001128:	0002      	movs	r2, r0
 800112a:	4322      	orrs	r2, r4
 800112c:	4690      	mov	r8, r2
 800112e:	d11d      	bne.n	800116c <__aeabi_ddiv+0x350>
 8001130:	2208      	movs	r2, #8
 8001132:	469b      	mov	fp, r3
 8001134:	2302      	movs	r3, #2
 8001136:	2500      	movs	r5, #0
 8001138:	4691      	mov	r9, r2
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	e693      	b.n	8000e66 <__aeabi_ddiv+0x4a>
 800113e:	4651      	mov	r1, sl
 8001140:	4321      	orrs	r1, r4
 8001142:	d109      	bne.n	8001158 <__aeabi_ddiv+0x33c>
 8001144:	2302      	movs	r3, #2
 8001146:	464a      	mov	r2, r9
 8001148:	431a      	orrs	r2, r3
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <__aeabi_ddiv+0x390>)
 800114c:	4691      	mov	r9, r2
 800114e:	469c      	mov	ip, r3
 8001150:	2400      	movs	r4, #0
 8001152:	2002      	movs	r0, #2
 8001154:	44e3      	add	fp, ip
 8001156:	e6a1      	b.n	8000e9c <__aeabi_ddiv+0x80>
 8001158:	2303      	movs	r3, #3
 800115a:	464a      	mov	r2, r9
 800115c:	431a      	orrs	r2, r3
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <__aeabi_ddiv+0x390>)
 8001160:	4691      	mov	r9, r2
 8001162:	469c      	mov	ip, r3
 8001164:	4651      	mov	r1, sl
 8001166:	2003      	movs	r0, #3
 8001168:	44e3      	add	fp, ip
 800116a:	e697      	b.n	8000e9c <__aeabi_ddiv+0x80>
 800116c:	220c      	movs	r2, #12
 800116e:	469b      	mov	fp, r3
 8001170:	2303      	movs	r3, #3
 8001172:	46a0      	mov	r8, r4
 8001174:	4691      	mov	r9, r2
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	e675      	b.n	8000e66 <__aeabi_ddiv+0x4a>
 800117a:	2304      	movs	r3, #4
 800117c:	4699      	mov	r9, r3
 800117e:	2300      	movs	r3, #0
 8001180:	469b      	mov	fp, r3
 8001182:	3301      	adds	r3, #1
 8001184:	2500      	movs	r5, #0
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	e66d      	b.n	8000e66 <__aeabi_ddiv+0x4a>
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	000007ff 	.word	0x000007ff
 8001190:	fffffc01 	.word	0xfffffc01
 8001194:	0800ac04 	.word	0x0800ac04
 8001198:	000003ff 	.word	0x000003ff
 800119c:	feffffff 	.word	0xfeffffff
 80011a0:	000007fe 	.word	0x000007fe
 80011a4:	000003f3 	.word	0x000003f3
 80011a8:	fffffc0d 	.word	0xfffffc0d
 80011ac:	fffff801 	.word	0xfffff801
 80011b0:	464a      	mov	r2, r9
 80011b2:	2301      	movs	r3, #1
 80011b4:	431a      	orrs	r2, r3
 80011b6:	4691      	mov	r9, r2
 80011b8:	2400      	movs	r4, #0
 80011ba:	2001      	movs	r0, #1
 80011bc:	e66e      	b.n	8000e9c <__aeabi_ddiv+0x80>
 80011be:	2300      	movs	r3, #0
 80011c0:	2280      	movs	r2, #128	; 0x80
 80011c2:	469a      	mov	sl, r3
 80011c4:	2500      	movs	r5, #0
 80011c6:	4b88      	ldr	r3, [pc, #544]	; (80013e8 <__aeabi_ddiv+0x5cc>)
 80011c8:	0312      	lsls	r2, r2, #12
 80011ca:	e67e      	b.n	8000eca <__aeabi_ddiv+0xae>
 80011cc:	2501      	movs	r5, #1
 80011ce:	426d      	negs	r5, r5
 80011d0:	2201      	movs	r2, #1
 80011d2:	1ad2      	subs	r2, r2, r3
 80011d4:	2a38      	cmp	r2, #56	; 0x38
 80011d6:	dd00      	ble.n	80011da <__aeabi_ddiv+0x3be>
 80011d8:	e674      	b.n	8000ec4 <__aeabi_ddiv+0xa8>
 80011da:	2a1f      	cmp	r2, #31
 80011dc:	dc00      	bgt.n	80011e0 <__aeabi_ddiv+0x3c4>
 80011de:	e0bd      	b.n	800135c <__aeabi_ddiv+0x540>
 80011e0:	211f      	movs	r1, #31
 80011e2:	4249      	negs	r1, r1
 80011e4:	1acb      	subs	r3, r1, r3
 80011e6:	4641      	mov	r1, r8
 80011e8:	40d9      	lsrs	r1, r3
 80011ea:	000b      	movs	r3, r1
 80011ec:	2a20      	cmp	r2, #32
 80011ee:	d004      	beq.n	80011fa <__aeabi_ddiv+0x3de>
 80011f0:	4641      	mov	r1, r8
 80011f2:	4a7e      	ldr	r2, [pc, #504]	; (80013ec <__aeabi_ddiv+0x5d0>)
 80011f4:	445a      	add	r2, fp
 80011f6:	4091      	lsls	r1, r2
 80011f8:	430d      	orrs	r5, r1
 80011fa:	0029      	movs	r1, r5
 80011fc:	1e4a      	subs	r2, r1, #1
 80011fe:	4191      	sbcs	r1, r2
 8001200:	4319      	orrs	r1, r3
 8001202:	2307      	movs	r3, #7
 8001204:	001d      	movs	r5, r3
 8001206:	2200      	movs	r2, #0
 8001208:	400d      	ands	r5, r1
 800120a:	420b      	tst	r3, r1
 800120c:	d100      	bne.n	8001210 <__aeabi_ddiv+0x3f4>
 800120e:	e0d0      	b.n	80013b2 <__aeabi_ddiv+0x596>
 8001210:	220f      	movs	r2, #15
 8001212:	2300      	movs	r3, #0
 8001214:	400a      	ands	r2, r1
 8001216:	2a04      	cmp	r2, #4
 8001218:	d100      	bne.n	800121c <__aeabi_ddiv+0x400>
 800121a:	e0c7      	b.n	80013ac <__aeabi_ddiv+0x590>
 800121c:	1d0a      	adds	r2, r1, #4
 800121e:	428a      	cmp	r2, r1
 8001220:	4189      	sbcs	r1, r1
 8001222:	4249      	negs	r1, r1
 8001224:	185b      	adds	r3, r3, r1
 8001226:	0011      	movs	r1, r2
 8001228:	021a      	lsls	r2, r3, #8
 800122a:	d400      	bmi.n	800122e <__aeabi_ddiv+0x412>
 800122c:	e0be      	b.n	80013ac <__aeabi_ddiv+0x590>
 800122e:	2301      	movs	r3, #1
 8001230:	2200      	movs	r2, #0
 8001232:	2500      	movs	r5, #0
 8001234:	e649      	b.n	8000eca <__aeabi_ddiv+0xae>
 8001236:	2280      	movs	r2, #128	; 0x80
 8001238:	4643      	mov	r3, r8
 800123a:	0312      	lsls	r2, r2, #12
 800123c:	4213      	tst	r3, r2
 800123e:	d008      	beq.n	8001252 <__aeabi_ddiv+0x436>
 8001240:	4214      	tst	r4, r2
 8001242:	d106      	bne.n	8001252 <__aeabi_ddiv+0x436>
 8001244:	4322      	orrs	r2, r4
 8001246:	0312      	lsls	r2, r2, #12
 8001248:	46ba      	mov	sl, r7
 800124a:	000d      	movs	r5, r1
 800124c:	4b66      	ldr	r3, [pc, #408]	; (80013e8 <__aeabi_ddiv+0x5cc>)
 800124e:	0b12      	lsrs	r2, r2, #12
 8001250:	e63b      	b.n	8000eca <__aeabi_ddiv+0xae>
 8001252:	2280      	movs	r2, #128	; 0x80
 8001254:	4643      	mov	r3, r8
 8001256:	0312      	lsls	r2, r2, #12
 8001258:	431a      	orrs	r2, r3
 800125a:	0312      	lsls	r2, r2, #12
 800125c:	46b2      	mov	sl, r6
 800125e:	4b62      	ldr	r3, [pc, #392]	; (80013e8 <__aeabi_ddiv+0x5cc>)
 8001260:	0b12      	lsrs	r2, r2, #12
 8001262:	e632      	b.n	8000eca <__aeabi_ddiv+0xae>
 8001264:	2b00      	cmp	r3, #0
 8001266:	d100      	bne.n	800126a <__aeabi_ddiv+0x44e>
 8001268:	e702      	b.n	8001070 <__aeabi_ddiv+0x254>
 800126a:	19a6      	adds	r6, r4, r6
 800126c:	1e6a      	subs	r2, r5, #1
 800126e:	42a6      	cmp	r6, r4
 8001270:	d200      	bcs.n	8001274 <__aeabi_ddiv+0x458>
 8001272:	e089      	b.n	8001388 <__aeabi_ddiv+0x56c>
 8001274:	4286      	cmp	r6, r0
 8001276:	d200      	bcs.n	800127a <__aeabi_ddiv+0x45e>
 8001278:	e09f      	b.n	80013ba <__aeabi_ddiv+0x59e>
 800127a:	d100      	bne.n	800127e <__aeabi_ddiv+0x462>
 800127c:	e0af      	b.n	80013de <__aeabi_ddiv+0x5c2>
 800127e:	0015      	movs	r5, r2
 8001280:	e6f4      	b.n	800106c <__aeabi_ddiv+0x250>
 8001282:	42a9      	cmp	r1, r5
 8001284:	d900      	bls.n	8001288 <__aeabi_ddiv+0x46c>
 8001286:	e63c      	b.n	8000f02 <__aeabi_ddiv+0xe6>
 8001288:	4643      	mov	r3, r8
 800128a:	07de      	lsls	r6, r3, #31
 800128c:	0858      	lsrs	r0, r3, #1
 800128e:	086b      	lsrs	r3, r5, #1
 8001290:	431e      	orrs	r6, r3
 8001292:	07ed      	lsls	r5, r5, #31
 8001294:	e63c      	b.n	8000f10 <__aeabi_ddiv+0xf4>
 8001296:	f001 f92f 	bl	80024f8 <__clzsi2>
 800129a:	0001      	movs	r1, r0
 800129c:	0002      	movs	r2, r0
 800129e:	3115      	adds	r1, #21
 80012a0:	3220      	adds	r2, #32
 80012a2:	291c      	cmp	r1, #28
 80012a4:	dc00      	bgt.n	80012a8 <__aeabi_ddiv+0x48c>
 80012a6:	e72c      	b.n	8001102 <__aeabi_ddiv+0x2e6>
 80012a8:	464b      	mov	r3, r9
 80012aa:	3808      	subs	r0, #8
 80012ac:	4083      	lsls	r3, r0
 80012ae:	2500      	movs	r5, #0
 80012b0:	4698      	mov	r8, r3
 80012b2:	e732      	b.n	800111a <__aeabi_ddiv+0x2fe>
 80012b4:	f001 f920 	bl	80024f8 <__clzsi2>
 80012b8:	0003      	movs	r3, r0
 80012ba:	001a      	movs	r2, r3
 80012bc:	3215      	adds	r2, #21
 80012be:	3020      	adds	r0, #32
 80012c0:	2a1c      	cmp	r2, #28
 80012c2:	dc00      	bgt.n	80012c6 <__aeabi_ddiv+0x4aa>
 80012c4:	e6ff      	b.n	80010c6 <__aeabi_ddiv+0x2aa>
 80012c6:	4654      	mov	r4, sl
 80012c8:	3b08      	subs	r3, #8
 80012ca:	2100      	movs	r1, #0
 80012cc:	409c      	lsls	r4, r3
 80012ce:	e705      	b.n	80010dc <__aeabi_ddiv+0x2c0>
 80012d0:	1936      	adds	r6, r6, r4
 80012d2:	3b01      	subs	r3, #1
 80012d4:	42b4      	cmp	r4, r6
 80012d6:	d900      	bls.n	80012da <__aeabi_ddiv+0x4be>
 80012d8:	e6a6      	b.n	8001028 <__aeabi_ddiv+0x20c>
 80012da:	42b2      	cmp	r2, r6
 80012dc:	d800      	bhi.n	80012e0 <__aeabi_ddiv+0x4c4>
 80012de:	e6a3      	b.n	8001028 <__aeabi_ddiv+0x20c>
 80012e0:	1e83      	subs	r3, r0, #2
 80012e2:	1936      	adds	r6, r6, r4
 80012e4:	e6a0      	b.n	8001028 <__aeabi_ddiv+0x20c>
 80012e6:	1909      	adds	r1, r1, r4
 80012e8:	3d01      	subs	r5, #1
 80012ea:	428c      	cmp	r4, r1
 80012ec:	d900      	bls.n	80012f0 <__aeabi_ddiv+0x4d4>
 80012ee:	e68d      	b.n	800100c <__aeabi_ddiv+0x1f0>
 80012f0:	428a      	cmp	r2, r1
 80012f2:	d800      	bhi.n	80012f6 <__aeabi_ddiv+0x4da>
 80012f4:	e68a      	b.n	800100c <__aeabi_ddiv+0x1f0>
 80012f6:	1e85      	subs	r5, r0, #2
 80012f8:	1909      	adds	r1, r1, r4
 80012fa:	e687      	b.n	800100c <__aeabi_ddiv+0x1f0>
 80012fc:	220f      	movs	r2, #15
 80012fe:	402a      	ands	r2, r5
 8001300:	2a04      	cmp	r2, #4
 8001302:	d100      	bne.n	8001306 <__aeabi_ddiv+0x4ea>
 8001304:	e6bc      	b.n	8001080 <__aeabi_ddiv+0x264>
 8001306:	1d29      	adds	r1, r5, #4
 8001308:	42a9      	cmp	r1, r5
 800130a:	41ad      	sbcs	r5, r5
 800130c:	426d      	negs	r5, r5
 800130e:	08c9      	lsrs	r1, r1, #3
 8001310:	44a8      	add	r8, r5
 8001312:	e6b6      	b.n	8001082 <__aeabi_ddiv+0x266>
 8001314:	42af      	cmp	r7, r5
 8001316:	d900      	bls.n	800131a <__aeabi_ddiv+0x4fe>
 8001318:	e662      	b.n	8000fe0 <__aeabi_ddiv+0x1c4>
 800131a:	4281      	cmp	r1, r0
 800131c:	d804      	bhi.n	8001328 <__aeabi_ddiv+0x50c>
 800131e:	d000      	beq.n	8001322 <__aeabi_ddiv+0x506>
 8001320:	e65e      	b.n	8000fe0 <__aeabi_ddiv+0x1c4>
 8001322:	42ae      	cmp	r6, r5
 8001324:	d800      	bhi.n	8001328 <__aeabi_ddiv+0x50c>
 8001326:	e65b      	b.n	8000fe0 <__aeabi_ddiv+0x1c4>
 8001328:	2302      	movs	r3, #2
 800132a:	425b      	negs	r3, r3
 800132c:	469c      	mov	ip, r3
 800132e:	9b00      	ldr	r3, [sp, #0]
 8001330:	44e0      	add	r8, ip
 8001332:	469c      	mov	ip, r3
 8001334:	4465      	add	r5, ip
 8001336:	429d      	cmp	r5, r3
 8001338:	419b      	sbcs	r3, r3
 800133a:	425b      	negs	r3, r3
 800133c:	191b      	adds	r3, r3, r4
 800133e:	18c0      	adds	r0, r0, r3
 8001340:	e64f      	b.n	8000fe2 <__aeabi_ddiv+0x1c6>
 8001342:	42b2      	cmp	r2, r6
 8001344:	d800      	bhi.n	8001348 <__aeabi_ddiv+0x52c>
 8001346:	e612      	b.n	8000f6e <__aeabi_ddiv+0x152>
 8001348:	1e83      	subs	r3, r0, #2
 800134a:	1936      	adds	r6, r6, r4
 800134c:	e60f      	b.n	8000f6e <__aeabi_ddiv+0x152>
 800134e:	428a      	cmp	r2, r1
 8001350:	d800      	bhi.n	8001354 <__aeabi_ddiv+0x538>
 8001352:	e5fa      	b.n	8000f4a <__aeabi_ddiv+0x12e>
 8001354:	1e83      	subs	r3, r0, #2
 8001356:	4698      	mov	r8, r3
 8001358:	1909      	adds	r1, r1, r4
 800135a:	e5f6      	b.n	8000f4a <__aeabi_ddiv+0x12e>
 800135c:	4b24      	ldr	r3, [pc, #144]	; (80013f0 <__aeabi_ddiv+0x5d4>)
 800135e:	0028      	movs	r0, r5
 8001360:	445b      	add	r3, fp
 8001362:	4641      	mov	r1, r8
 8001364:	409d      	lsls	r5, r3
 8001366:	4099      	lsls	r1, r3
 8001368:	40d0      	lsrs	r0, r2
 800136a:	1e6b      	subs	r3, r5, #1
 800136c:	419d      	sbcs	r5, r3
 800136e:	4643      	mov	r3, r8
 8001370:	4301      	orrs	r1, r0
 8001372:	4329      	orrs	r1, r5
 8001374:	40d3      	lsrs	r3, r2
 8001376:	074a      	lsls	r2, r1, #29
 8001378:	d100      	bne.n	800137c <__aeabi_ddiv+0x560>
 800137a:	e755      	b.n	8001228 <__aeabi_ddiv+0x40c>
 800137c:	220f      	movs	r2, #15
 800137e:	400a      	ands	r2, r1
 8001380:	2a04      	cmp	r2, #4
 8001382:	d000      	beq.n	8001386 <__aeabi_ddiv+0x56a>
 8001384:	e74a      	b.n	800121c <__aeabi_ddiv+0x400>
 8001386:	e74f      	b.n	8001228 <__aeabi_ddiv+0x40c>
 8001388:	0015      	movs	r5, r2
 800138a:	4286      	cmp	r6, r0
 800138c:	d000      	beq.n	8001390 <__aeabi_ddiv+0x574>
 800138e:	e66d      	b.n	800106c <__aeabi_ddiv+0x250>
 8001390:	9a00      	ldr	r2, [sp, #0]
 8001392:	429a      	cmp	r2, r3
 8001394:	d000      	beq.n	8001398 <__aeabi_ddiv+0x57c>
 8001396:	e669      	b.n	800106c <__aeabi_ddiv+0x250>
 8001398:	e66a      	b.n	8001070 <__aeabi_ddiv+0x254>
 800139a:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <__aeabi_ddiv+0x5d8>)
 800139c:	445b      	add	r3, fp
 800139e:	2b00      	cmp	r3, #0
 80013a0:	dc00      	bgt.n	80013a4 <__aeabi_ddiv+0x588>
 80013a2:	e713      	b.n	80011cc <__aeabi_ddiv+0x3b0>
 80013a4:	2501      	movs	r5, #1
 80013a6:	2100      	movs	r1, #0
 80013a8:	44a8      	add	r8, r5
 80013aa:	e66a      	b.n	8001082 <__aeabi_ddiv+0x266>
 80013ac:	075d      	lsls	r5, r3, #29
 80013ae:	025b      	lsls	r3, r3, #9
 80013b0:	0b1a      	lsrs	r2, r3, #12
 80013b2:	08c9      	lsrs	r1, r1, #3
 80013b4:	2300      	movs	r3, #0
 80013b6:	430d      	orrs	r5, r1
 80013b8:	e587      	b.n	8000eca <__aeabi_ddiv+0xae>
 80013ba:	9900      	ldr	r1, [sp, #0]
 80013bc:	3d02      	subs	r5, #2
 80013be:	004a      	lsls	r2, r1, #1
 80013c0:	428a      	cmp	r2, r1
 80013c2:	41bf      	sbcs	r7, r7
 80013c4:	427f      	negs	r7, r7
 80013c6:	193f      	adds	r7, r7, r4
 80013c8:	19f6      	adds	r6, r6, r7
 80013ca:	9200      	str	r2, [sp, #0]
 80013cc:	e7dd      	b.n	800138a <__aeabi_ddiv+0x56e>
 80013ce:	2280      	movs	r2, #128	; 0x80
 80013d0:	4643      	mov	r3, r8
 80013d2:	0312      	lsls	r2, r2, #12
 80013d4:	431a      	orrs	r2, r3
 80013d6:	0312      	lsls	r2, r2, #12
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <__aeabi_ddiv+0x5cc>)
 80013da:	0b12      	lsrs	r2, r2, #12
 80013dc:	e575      	b.n	8000eca <__aeabi_ddiv+0xae>
 80013de:	9900      	ldr	r1, [sp, #0]
 80013e0:	4299      	cmp	r1, r3
 80013e2:	d3ea      	bcc.n	80013ba <__aeabi_ddiv+0x59e>
 80013e4:	0015      	movs	r5, r2
 80013e6:	e7d3      	b.n	8001390 <__aeabi_ddiv+0x574>
 80013e8:	000007ff 	.word	0x000007ff
 80013ec:	0000043e 	.word	0x0000043e
 80013f0:	0000041e 	.word	0x0000041e
 80013f4:	000003ff 	.word	0x000003ff

080013f8 <__eqdf2>:
 80013f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fa:	464e      	mov	r6, r9
 80013fc:	4645      	mov	r5, r8
 80013fe:	46de      	mov	lr, fp
 8001400:	4657      	mov	r7, sl
 8001402:	4690      	mov	r8, r2
 8001404:	b5e0      	push	{r5, r6, r7, lr}
 8001406:	0017      	movs	r7, r2
 8001408:	031a      	lsls	r2, r3, #12
 800140a:	0b12      	lsrs	r2, r2, #12
 800140c:	0005      	movs	r5, r0
 800140e:	4684      	mov	ip, r0
 8001410:	4819      	ldr	r0, [pc, #100]	; (8001478 <__eqdf2+0x80>)
 8001412:	030e      	lsls	r6, r1, #12
 8001414:	004c      	lsls	r4, r1, #1
 8001416:	4691      	mov	r9, r2
 8001418:	005a      	lsls	r2, r3, #1
 800141a:	0fdb      	lsrs	r3, r3, #31
 800141c:	469b      	mov	fp, r3
 800141e:	0b36      	lsrs	r6, r6, #12
 8001420:	0d64      	lsrs	r4, r4, #21
 8001422:	0fc9      	lsrs	r1, r1, #31
 8001424:	0d52      	lsrs	r2, r2, #21
 8001426:	4284      	cmp	r4, r0
 8001428:	d019      	beq.n	800145e <__eqdf2+0x66>
 800142a:	4282      	cmp	r2, r0
 800142c:	d010      	beq.n	8001450 <__eqdf2+0x58>
 800142e:	2001      	movs	r0, #1
 8001430:	4294      	cmp	r4, r2
 8001432:	d10e      	bne.n	8001452 <__eqdf2+0x5a>
 8001434:	454e      	cmp	r6, r9
 8001436:	d10c      	bne.n	8001452 <__eqdf2+0x5a>
 8001438:	2001      	movs	r0, #1
 800143a:	45c4      	cmp	ip, r8
 800143c:	d109      	bne.n	8001452 <__eqdf2+0x5a>
 800143e:	4559      	cmp	r1, fp
 8001440:	d017      	beq.n	8001472 <__eqdf2+0x7a>
 8001442:	2c00      	cmp	r4, #0
 8001444:	d105      	bne.n	8001452 <__eqdf2+0x5a>
 8001446:	0030      	movs	r0, r6
 8001448:	4328      	orrs	r0, r5
 800144a:	1e43      	subs	r3, r0, #1
 800144c:	4198      	sbcs	r0, r3
 800144e:	e000      	b.n	8001452 <__eqdf2+0x5a>
 8001450:	2001      	movs	r0, #1
 8001452:	bcf0      	pop	{r4, r5, r6, r7}
 8001454:	46bb      	mov	fp, r7
 8001456:	46b2      	mov	sl, r6
 8001458:	46a9      	mov	r9, r5
 800145a:	46a0      	mov	r8, r4
 800145c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800145e:	0033      	movs	r3, r6
 8001460:	2001      	movs	r0, #1
 8001462:	432b      	orrs	r3, r5
 8001464:	d1f5      	bne.n	8001452 <__eqdf2+0x5a>
 8001466:	42a2      	cmp	r2, r4
 8001468:	d1f3      	bne.n	8001452 <__eqdf2+0x5a>
 800146a:	464b      	mov	r3, r9
 800146c:	433b      	orrs	r3, r7
 800146e:	d1f0      	bne.n	8001452 <__eqdf2+0x5a>
 8001470:	e7e2      	b.n	8001438 <__eqdf2+0x40>
 8001472:	2000      	movs	r0, #0
 8001474:	e7ed      	b.n	8001452 <__eqdf2+0x5a>
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	000007ff 	.word	0x000007ff

0800147c <__gedf2>:
 800147c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147e:	4647      	mov	r7, r8
 8001480:	46ce      	mov	lr, r9
 8001482:	0004      	movs	r4, r0
 8001484:	0018      	movs	r0, r3
 8001486:	0016      	movs	r6, r2
 8001488:	031b      	lsls	r3, r3, #12
 800148a:	0b1b      	lsrs	r3, r3, #12
 800148c:	4d2d      	ldr	r5, [pc, #180]	; (8001544 <__gedf2+0xc8>)
 800148e:	004a      	lsls	r2, r1, #1
 8001490:	4699      	mov	r9, r3
 8001492:	b580      	push	{r7, lr}
 8001494:	0043      	lsls	r3, r0, #1
 8001496:	030f      	lsls	r7, r1, #12
 8001498:	46a4      	mov	ip, r4
 800149a:	46b0      	mov	r8, r6
 800149c:	0b3f      	lsrs	r7, r7, #12
 800149e:	0d52      	lsrs	r2, r2, #21
 80014a0:	0fc9      	lsrs	r1, r1, #31
 80014a2:	0d5b      	lsrs	r3, r3, #21
 80014a4:	0fc0      	lsrs	r0, r0, #31
 80014a6:	42aa      	cmp	r2, r5
 80014a8:	d021      	beq.n	80014ee <__gedf2+0x72>
 80014aa:	42ab      	cmp	r3, r5
 80014ac:	d013      	beq.n	80014d6 <__gedf2+0x5a>
 80014ae:	2a00      	cmp	r2, #0
 80014b0:	d122      	bne.n	80014f8 <__gedf2+0x7c>
 80014b2:	433c      	orrs	r4, r7
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d102      	bne.n	80014be <__gedf2+0x42>
 80014b8:	464d      	mov	r5, r9
 80014ba:	432e      	orrs	r6, r5
 80014bc:	d022      	beq.n	8001504 <__gedf2+0x88>
 80014be:	2c00      	cmp	r4, #0
 80014c0:	d010      	beq.n	80014e4 <__gedf2+0x68>
 80014c2:	4281      	cmp	r1, r0
 80014c4:	d022      	beq.n	800150c <__gedf2+0x90>
 80014c6:	2002      	movs	r0, #2
 80014c8:	3901      	subs	r1, #1
 80014ca:	4008      	ands	r0, r1
 80014cc:	3801      	subs	r0, #1
 80014ce:	bcc0      	pop	{r6, r7}
 80014d0:	46b9      	mov	r9, r7
 80014d2:	46b0      	mov	r8, r6
 80014d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014d6:	464d      	mov	r5, r9
 80014d8:	432e      	orrs	r6, r5
 80014da:	d129      	bne.n	8001530 <__gedf2+0xb4>
 80014dc:	2a00      	cmp	r2, #0
 80014de:	d1f0      	bne.n	80014c2 <__gedf2+0x46>
 80014e0:	433c      	orrs	r4, r7
 80014e2:	d1ee      	bne.n	80014c2 <__gedf2+0x46>
 80014e4:	2800      	cmp	r0, #0
 80014e6:	d1f2      	bne.n	80014ce <__gedf2+0x52>
 80014e8:	2001      	movs	r0, #1
 80014ea:	4240      	negs	r0, r0
 80014ec:	e7ef      	b.n	80014ce <__gedf2+0x52>
 80014ee:	003d      	movs	r5, r7
 80014f0:	4325      	orrs	r5, r4
 80014f2:	d11d      	bne.n	8001530 <__gedf2+0xb4>
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d0ee      	beq.n	80014d6 <__gedf2+0x5a>
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1e2      	bne.n	80014c2 <__gedf2+0x46>
 80014fc:	464c      	mov	r4, r9
 80014fe:	4326      	orrs	r6, r4
 8001500:	d1df      	bne.n	80014c2 <__gedf2+0x46>
 8001502:	e7e0      	b.n	80014c6 <__gedf2+0x4a>
 8001504:	2000      	movs	r0, #0
 8001506:	2c00      	cmp	r4, #0
 8001508:	d0e1      	beq.n	80014ce <__gedf2+0x52>
 800150a:	e7dc      	b.n	80014c6 <__gedf2+0x4a>
 800150c:	429a      	cmp	r2, r3
 800150e:	dc0a      	bgt.n	8001526 <__gedf2+0xaa>
 8001510:	dbe8      	blt.n	80014e4 <__gedf2+0x68>
 8001512:	454f      	cmp	r7, r9
 8001514:	d8d7      	bhi.n	80014c6 <__gedf2+0x4a>
 8001516:	d00e      	beq.n	8001536 <__gedf2+0xba>
 8001518:	2000      	movs	r0, #0
 800151a:	454f      	cmp	r7, r9
 800151c:	d2d7      	bcs.n	80014ce <__gedf2+0x52>
 800151e:	2900      	cmp	r1, #0
 8001520:	d0e2      	beq.n	80014e8 <__gedf2+0x6c>
 8001522:	0008      	movs	r0, r1
 8001524:	e7d3      	b.n	80014ce <__gedf2+0x52>
 8001526:	4243      	negs	r3, r0
 8001528:	4158      	adcs	r0, r3
 800152a:	0040      	lsls	r0, r0, #1
 800152c:	3801      	subs	r0, #1
 800152e:	e7ce      	b.n	80014ce <__gedf2+0x52>
 8001530:	2002      	movs	r0, #2
 8001532:	4240      	negs	r0, r0
 8001534:	e7cb      	b.n	80014ce <__gedf2+0x52>
 8001536:	45c4      	cmp	ip, r8
 8001538:	d8c5      	bhi.n	80014c6 <__gedf2+0x4a>
 800153a:	2000      	movs	r0, #0
 800153c:	45c4      	cmp	ip, r8
 800153e:	d2c6      	bcs.n	80014ce <__gedf2+0x52>
 8001540:	e7ed      	b.n	800151e <__gedf2+0xa2>
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	000007ff 	.word	0x000007ff

08001548 <__ledf2>:
 8001548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800154a:	4647      	mov	r7, r8
 800154c:	46ce      	mov	lr, r9
 800154e:	0004      	movs	r4, r0
 8001550:	0018      	movs	r0, r3
 8001552:	0016      	movs	r6, r2
 8001554:	031b      	lsls	r3, r3, #12
 8001556:	0b1b      	lsrs	r3, r3, #12
 8001558:	4d2c      	ldr	r5, [pc, #176]	; (800160c <__ledf2+0xc4>)
 800155a:	004a      	lsls	r2, r1, #1
 800155c:	4699      	mov	r9, r3
 800155e:	b580      	push	{r7, lr}
 8001560:	0043      	lsls	r3, r0, #1
 8001562:	030f      	lsls	r7, r1, #12
 8001564:	46a4      	mov	ip, r4
 8001566:	46b0      	mov	r8, r6
 8001568:	0b3f      	lsrs	r7, r7, #12
 800156a:	0d52      	lsrs	r2, r2, #21
 800156c:	0fc9      	lsrs	r1, r1, #31
 800156e:	0d5b      	lsrs	r3, r3, #21
 8001570:	0fc0      	lsrs	r0, r0, #31
 8001572:	42aa      	cmp	r2, r5
 8001574:	d00d      	beq.n	8001592 <__ledf2+0x4a>
 8001576:	42ab      	cmp	r3, r5
 8001578:	d010      	beq.n	800159c <__ledf2+0x54>
 800157a:	2a00      	cmp	r2, #0
 800157c:	d127      	bne.n	80015ce <__ledf2+0x86>
 800157e:	433c      	orrs	r4, r7
 8001580:	2b00      	cmp	r3, #0
 8001582:	d111      	bne.n	80015a8 <__ledf2+0x60>
 8001584:	464d      	mov	r5, r9
 8001586:	432e      	orrs	r6, r5
 8001588:	d10e      	bne.n	80015a8 <__ledf2+0x60>
 800158a:	2000      	movs	r0, #0
 800158c:	2c00      	cmp	r4, #0
 800158e:	d015      	beq.n	80015bc <__ledf2+0x74>
 8001590:	e00e      	b.n	80015b0 <__ledf2+0x68>
 8001592:	003d      	movs	r5, r7
 8001594:	4325      	orrs	r5, r4
 8001596:	d110      	bne.n	80015ba <__ledf2+0x72>
 8001598:	4293      	cmp	r3, r2
 800159a:	d118      	bne.n	80015ce <__ledf2+0x86>
 800159c:	464d      	mov	r5, r9
 800159e:	432e      	orrs	r6, r5
 80015a0:	d10b      	bne.n	80015ba <__ledf2+0x72>
 80015a2:	2a00      	cmp	r2, #0
 80015a4:	d102      	bne.n	80015ac <__ledf2+0x64>
 80015a6:	433c      	orrs	r4, r7
 80015a8:	2c00      	cmp	r4, #0
 80015aa:	d00b      	beq.n	80015c4 <__ledf2+0x7c>
 80015ac:	4281      	cmp	r1, r0
 80015ae:	d014      	beq.n	80015da <__ledf2+0x92>
 80015b0:	2002      	movs	r0, #2
 80015b2:	3901      	subs	r1, #1
 80015b4:	4008      	ands	r0, r1
 80015b6:	3801      	subs	r0, #1
 80015b8:	e000      	b.n	80015bc <__ledf2+0x74>
 80015ba:	2002      	movs	r0, #2
 80015bc:	bcc0      	pop	{r6, r7}
 80015be:	46b9      	mov	r9, r7
 80015c0:	46b0      	mov	r8, r6
 80015c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015c4:	2800      	cmp	r0, #0
 80015c6:	d1f9      	bne.n	80015bc <__ledf2+0x74>
 80015c8:	2001      	movs	r0, #1
 80015ca:	4240      	negs	r0, r0
 80015cc:	e7f6      	b.n	80015bc <__ledf2+0x74>
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1ec      	bne.n	80015ac <__ledf2+0x64>
 80015d2:	464c      	mov	r4, r9
 80015d4:	4326      	orrs	r6, r4
 80015d6:	d1e9      	bne.n	80015ac <__ledf2+0x64>
 80015d8:	e7ea      	b.n	80015b0 <__ledf2+0x68>
 80015da:	429a      	cmp	r2, r3
 80015dc:	dd04      	ble.n	80015e8 <__ledf2+0xa0>
 80015de:	4243      	negs	r3, r0
 80015e0:	4158      	adcs	r0, r3
 80015e2:	0040      	lsls	r0, r0, #1
 80015e4:	3801      	subs	r0, #1
 80015e6:	e7e9      	b.n	80015bc <__ledf2+0x74>
 80015e8:	429a      	cmp	r2, r3
 80015ea:	dbeb      	blt.n	80015c4 <__ledf2+0x7c>
 80015ec:	454f      	cmp	r7, r9
 80015ee:	d8df      	bhi.n	80015b0 <__ledf2+0x68>
 80015f0:	d006      	beq.n	8001600 <__ledf2+0xb8>
 80015f2:	2000      	movs	r0, #0
 80015f4:	454f      	cmp	r7, r9
 80015f6:	d2e1      	bcs.n	80015bc <__ledf2+0x74>
 80015f8:	2900      	cmp	r1, #0
 80015fa:	d0e5      	beq.n	80015c8 <__ledf2+0x80>
 80015fc:	0008      	movs	r0, r1
 80015fe:	e7dd      	b.n	80015bc <__ledf2+0x74>
 8001600:	45c4      	cmp	ip, r8
 8001602:	d8d5      	bhi.n	80015b0 <__ledf2+0x68>
 8001604:	2000      	movs	r0, #0
 8001606:	45c4      	cmp	ip, r8
 8001608:	d2d8      	bcs.n	80015bc <__ledf2+0x74>
 800160a:	e7f5      	b.n	80015f8 <__ledf2+0xb0>
 800160c:	000007ff 	.word	0x000007ff

08001610 <__aeabi_dmul>:
 8001610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001612:	4645      	mov	r5, r8
 8001614:	46de      	mov	lr, fp
 8001616:	4657      	mov	r7, sl
 8001618:	464e      	mov	r6, r9
 800161a:	b5e0      	push	{r5, r6, r7, lr}
 800161c:	001f      	movs	r7, r3
 800161e:	030b      	lsls	r3, r1, #12
 8001620:	0b1b      	lsrs	r3, r3, #12
 8001622:	469b      	mov	fp, r3
 8001624:	004d      	lsls	r5, r1, #1
 8001626:	0fcb      	lsrs	r3, r1, #31
 8001628:	0004      	movs	r4, r0
 800162a:	4691      	mov	r9, r2
 800162c:	4698      	mov	r8, r3
 800162e:	b087      	sub	sp, #28
 8001630:	0d6d      	lsrs	r5, r5, #21
 8001632:	d100      	bne.n	8001636 <__aeabi_dmul+0x26>
 8001634:	e1cd      	b.n	80019d2 <__aeabi_dmul+0x3c2>
 8001636:	4bce      	ldr	r3, [pc, #824]	; (8001970 <__aeabi_dmul+0x360>)
 8001638:	429d      	cmp	r5, r3
 800163a:	d100      	bne.n	800163e <__aeabi_dmul+0x2e>
 800163c:	e1e9      	b.n	8001a12 <__aeabi_dmul+0x402>
 800163e:	465a      	mov	r2, fp
 8001640:	0f43      	lsrs	r3, r0, #29
 8001642:	00d2      	lsls	r2, r2, #3
 8001644:	4313      	orrs	r3, r2
 8001646:	2280      	movs	r2, #128	; 0x80
 8001648:	0412      	lsls	r2, r2, #16
 800164a:	431a      	orrs	r2, r3
 800164c:	00c3      	lsls	r3, r0, #3
 800164e:	469a      	mov	sl, r3
 8001650:	4bc8      	ldr	r3, [pc, #800]	; (8001974 <__aeabi_dmul+0x364>)
 8001652:	4693      	mov	fp, r2
 8001654:	469c      	mov	ip, r3
 8001656:	2300      	movs	r3, #0
 8001658:	2600      	movs	r6, #0
 800165a:	4465      	add	r5, ip
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	033c      	lsls	r4, r7, #12
 8001660:	007b      	lsls	r3, r7, #1
 8001662:	4648      	mov	r0, r9
 8001664:	0b24      	lsrs	r4, r4, #12
 8001666:	0d5b      	lsrs	r3, r3, #21
 8001668:	0fff      	lsrs	r7, r7, #31
 800166a:	2b00      	cmp	r3, #0
 800166c:	d100      	bne.n	8001670 <__aeabi_dmul+0x60>
 800166e:	e189      	b.n	8001984 <__aeabi_dmul+0x374>
 8001670:	4abf      	ldr	r2, [pc, #764]	; (8001970 <__aeabi_dmul+0x360>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d019      	beq.n	80016aa <__aeabi_dmul+0x9a>
 8001676:	0f42      	lsrs	r2, r0, #29
 8001678:	00e4      	lsls	r4, r4, #3
 800167a:	4322      	orrs	r2, r4
 800167c:	2480      	movs	r4, #128	; 0x80
 800167e:	0424      	lsls	r4, r4, #16
 8001680:	4314      	orrs	r4, r2
 8001682:	4abc      	ldr	r2, [pc, #752]	; (8001974 <__aeabi_dmul+0x364>)
 8001684:	2100      	movs	r1, #0
 8001686:	4694      	mov	ip, r2
 8001688:	4642      	mov	r2, r8
 800168a:	4463      	add	r3, ip
 800168c:	195b      	adds	r3, r3, r5
 800168e:	9301      	str	r3, [sp, #4]
 8001690:	9b01      	ldr	r3, [sp, #4]
 8001692:	407a      	eors	r2, r7
 8001694:	3301      	adds	r3, #1
 8001696:	00c0      	lsls	r0, r0, #3
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	9302      	str	r3, [sp, #8]
 800169c:	2e0a      	cmp	r6, #10
 800169e:	dd1c      	ble.n	80016da <__aeabi_dmul+0xca>
 80016a0:	003a      	movs	r2, r7
 80016a2:	2e0b      	cmp	r6, #11
 80016a4:	d05e      	beq.n	8001764 <__aeabi_dmul+0x154>
 80016a6:	4647      	mov	r7, r8
 80016a8:	e056      	b.n	8001758 <__aeabi_dmul+0x148>
 80016aa:	4649      	mov	r1, r9
 80016ac:	4bb0      	ldr	r3, [pc, #704]	; (8001970 <__aeabi_dmul+0x360>)
 80016ae:	4321      	orrs	r1, r4
 80016b0:	18eb      	adds	r3, r5, r3
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	2900      	cmp	r1, #0
 80016b6:	d12a      	bne.n	800170e <__aeabi_dmul+0xfe>
 80016b8:	2080      	movs	r0, #128	; 0x80
 80016ba:	2202      	movs	r2, #2
 80016bc:	0100      	lsls	r0, r0, #4
 80016be:	002b      	movs	r3, r5
 80016c0:	4684      	mov	ip, r0
 80016c2:	4316      	orrs	r6, r2
 80016c4:	4642      	mov	r2, r8
 80016c6:	4463      	add	r3, ip
 80016c8:	407a      	eors	r2, r7
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	9302      	str	r3, [sp, #8]
 80016ce:	2e0a      	cmp	r6, #10
 80016d0:	dd00      	ble.n	80016d4 <__aeabi_dmul+0xc4>
 80016d2:	e231      	b.n	8001b38 <__aeabi_dmul+0x528>
 80016d4:	2000      	movs	r0, #0
 80016d6:	2400      	movs	r4, #0
 80016d8:	2102      	movs	r1, #2
 80016da:	2e02      	cmp	r6, #2
 80016dc:	dc26      	bgt.n	800172c <__aeabi_dmul+0x11c>
 80016de:	3e01      	subs	r6, #1
 80016e0:	2e01      	cmp	r6, #1
 80016e2:	d852      	bhi.n	800178a <__aeabi_dmul+0x17a>
 80016e4:	2902      	cmp	r1, #2
 80016e6:	d04c      	beq.n	8001782 <__aeabi_dmul+0x172>
 80016e8:	2901      	cmp	r1, #1
 80016ea:	d000      	beq.n	80016ee <__aeabi_dmul+0xde>
 80016ec:	e118      	b.n	8001920 <__aeabi_dmul+0x310>
 80016ee:	2300      	movs	r3, #0
 80016f0:	2400      	movs	r4, #0
 80016f2:	2500      	movs	r5, #0
 80016f4:	051b      	lsls	r3, r3, #20
 80016f6:	4323      	orrs	r3, r4
 80016f8:	07d2      	lsls	r2, r2, #31
 80016fa:	4313      	orrs	r3, r2
 80016fc:	0028      	movs	r0, r5
 80016fe:	0019      	movs	r1, r3
 8001700:	b007      	add	sp, #28
 8001702:	bcf0      	pop	{r4, r5, r6, r7}
 8001704:	46bb      	mov	fp, r7
 8001706:	46b2      	mov	sl, r6
 8001708:	46a9      	mov	r9, r5
 800170a:	46a0      	mov	r8, r4
 800170c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800170e:	2180      	movs	r1, #128	; 0x80
 8001710:	2203      	movs	r2, #3
 8001712:	0109      	lsls	r1, r1, #4
 8001714:	002b      	movs	r3, r5
 8001716:	468c      	mov	ip, r1
 8001718:	4316      	orrs	r6, r2
 800171a:	4642      	mov	r2, r8
 800171c:	4463      	add	r3, ip
 800171e:	407a      	eors	r2, r7
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	9302      	str	r3, [sp, #8]
 8001724:	2e0a      	cmp	r6, #10
 8001726:	dd00      	ble.n	800172a <__aeabi_dmul+0x11a>
 8001728:	e228      	b.n	8001b7c <__aeabi_dmul+0x56c>
 800172a:	2103      	movs	r1, #3
 800172c:	2501      	movs	r5, #1
 800172e:	40b5      	lsls	r5, r6
 8001730:	46ac      	mov	ip, r5
 8001732:	26a6      	movs	r6, #166	; 0xa6
 8001734:	4663      	mov	r3, ip
 8001736:	00f6      	lsls	r6, r6, #3
 8001738:	4035      	ands	r5, r6
 800173a:	4233      	tst	r3, r6
 800173c:	d10b      	bne.n	8001756 <__aeabi_dmul+0x146>
 800173e:	2690      	movs	r6, #144	; 0x90
 8001740:	00b6      	lsls	r6, r6, #2
 8001742:	4233      	tst	r3, r6
 8001744:	d118      	bne.n	8001778 <__aeabi_dmul+0x168>
 8001746:	3eb9      	subs	r6, #185	; 0xb9
 8001748:	3eff      	subs	r6, #255	; 0xff
 800174a:	421e      	tst	r6, r3
 800174c:	d01d      	beq.n	800178a <__aeabi_dmul+0x17a>
 800174e:	46a3      	mov	fp, r4
 8001750:	4682      	mov	sl, r0
 8001752:	9100      	str	r1, [sp, #0]
 8001754:	e000      	b.n	8001758 <__aeabi_dmul+0x148>
 8001756:	0017      	movs	r7, r2
 8001758:	9900      	ldr	r1, [sp, #0]
 800175a:	003a      	movs	r2, r7
 800175c:	2902      	cmp	r1, #2
 800175e:	d010      	beq.n	8001782 <__aeabi_dmul+0x172>
 8001760:	465c      	mov	r4, fp
 8001762:	4650      	mov	r0, sl
 8001764:	2903      	cmp	r1, #3
 8001766:	d1bf      	bne.n	80016e8 <__aeabi_dmul+0xd8>
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	031b      	lsls	r3, r3, #12
 800176c:	431c      	orrs	r4, r3
 800176e:	0324      	lsls	r4, r4, #12
 8001770:	0005      	movs	r5, r0
 8001772:	4b7f      	ldr	r3, [pc, #508]	; (8001970 <__aeabi_dmul+0x360>)
 8001774:	0b24      	lsrs	r4, r4, #12
 8001776:	e7bd      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001778:	2480      	movs	r4, #128	; 0x80
 800177a:	2200      	movs	r2, #0
 800177c:	4b7c      	ldr	r3, [pc, #496]	; (8001970 <__aeabi_dmul+0x360>)
 800177e:	0324      	lsls	r4, r4, #12
 8001780:	e7b8      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001782:	2400      	movs	r4, #0
 8001784:	2500      	movs	r5, #0
 8001786:	4b7a      	ldr	r3, [pc, #488]	; (8001970 <__aeabi_dmul+0x360>)
 8001788:	e7b4      	b.n	80016f4 <__aeabi_dmul+0xe4>
 800178a:	4653      	mov	r3, sl
 800178c:	041e      	lsls	r6, r3, #16
 800178e:	0c36      	lsrs	r6, r6, #16
 8001790:	0c1f      	lsrs	r7, r3, #16
 8001792:	0033      	movs	r3, r6
 8001794:	0c01      	lsrs	r1, r0, #16
 8001796:	0400      	lsls	r0, r0, #16
 8001798:	0c00      	lsrs	r0, r0, #16
 800179a:	4343      	muls	r3, r0
 800179c:	4698      	mov	r8, r3
 800179e:	0003      	movs	r3, r0
 80017a0:	437b      	muls	r3, r7
 80017a2:	4699      	mov	r9, r3
 80017a4:	0033      	movs	r3, r6
 80017a6:	434b      	muls	r3, r1
 80017a8:	469c      	mov	ip, r3
 80017aa:	4643      	mov	r3, r8
 80017ac:	000d      	movs	r5, r1
 80017ae:	0c1b      	lsrs	r3, r3, #16
 80017b0:	469a      	mov	sl, r3
 80017b2:	437d      	muls	r5, r7
 80017b4:	44cc      	add	ip, r9
 80017b6:	44d4      	add	ip, sl
 80017b8:	9500      	str	r5, [sp, #0]
 80017ba:	45e1      	cmp	r9, ip
 80017bc:	d904      	bls.n	80017c8 <__aeabi_dmul+0x1b8>
 80017be:	2380      	movs	r3, #128	; 0x80
 80017c0:	025b      	lsls	r3, r3, #9
 80017c2:	4699      	mov	r9, r3
 80017c4:	444d      	add	r5, r9
 80017c6:	9500      	str	r5, [sp, #0]
 80017c8:	4663      	mov	r3, ip
 80017ca:	0c1b      	lsrs	r3, r3, #16
 80017cc:	001d      	movs	r5, r3
 80017ce:	4663      	mov	r3, ip
 80017d0:	041b      	lsls	r3, r3, #16
 80017d2:	469c      	mov	ip, r3
 80017d4:	4643      	mov	r3, r8
 80017d6:	041b      	lsls	r3, r3, #16
 80017d8:	0c1b      	lsrs	r3, r3, #16
 80017da:	4698      	mov	r8, r3
 80017dc:	4663      	mov	r3, ip
 80017de:	4443      	add	r3, r8
 80017e0:	9303      	str	r3, [sp, #12]
 80017e2:	0c23      	lsrs	r3, r4, #16
 80017e4:	4698      	mov	r8, r3
 80017e6:	0033      	movs	r3, r6
 80017e8:	0424      	lsls	r4, r4, #16
 80017ea:	0c24      	lsrs	r4, r4, #16
 80017ec:	4363      	muls	r3, r4
 80017ee:	469c      	mov	ip, r3
 80017f0:	0023      	movs	r3, r4
 80017f2:	437b      	muls	r3, r7
 80017f4:	4699      	mov	r9, r3
 80017f6:	4643      	mov	r3, r8
 80017f8:	435e      	muls	r6, r3
 80017fa:	435f      	muls	r7, r3
 80017fc:	444e      	add	r6, r9
 80017fe:	4663      	mov	r3, ip
 8001800:	46b2      	mov	sl, r6
 8001802:	0c1e      	lsrs	r6, r3, #16
 8001804:	4456      	add	r6, sl
 8001806:	45b1      	cmp	r9, r6
 8001808:	d903      	bls.n	8001812 <__aeabi_dmul+0x202>
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	025b      	lsls	r3, r3, #9
 800180e:	4699      	mov	r9, r3
 8001810:	444f      	add	r7, r9
 8001812:	0c33      	lsrs	r3, r6, #16
 8001814:	4699      	mov	r9, r3
 8001816:	003b      	movs	r3, r7
 8001818:	444b      	add	r3, r9
 800181a:	9305      	str	r3, [sp, #20]
 800181c:	4663      	mov	r3, ip
 800181e:	46ac      	mov	ip, r5
 8001820:	041f      	lsls	r7, r3, #16
 8001822:	0c3f      	lsrs	r7, r7, #16
 8001824:	0436      	lsls	r6, r6, #16
 8001826:	19f6      	adds	r6, r6, r7
 8001828:	44b4      	add	ip, r6
 800182a:	4663      	mov	r3, ip
 800182c:	9304      	str	r3, [sp, #16]
 800182e:	465b      	mov	r3, fp
 8001830:	0c1b      	lsrs	r3, r3, #16
 8001832:	469c      	mov	ip, r3
 8001834:	465b      	mov	r3, fp
 8001836:	041f      	lsls	r7, r3, #16
 8001838:	0c3f      	lsrs	r7, r7, #16
 800183a:	003b      	movs	r3, r7
 800183c:	4343      	muls	r3, r0
 800183e:	4699      	mov	r9, r3
 8001840:	4663      	mov	r3, ip
 8001842:	4343      	muls	r3, r0
 8001844:	469a      	mov	sl, r3
 8001846:	464b      	mov	r3, r9
 8001848:	4660      	mov	r0, ip
 800184a:	0c1b      	lsrs	r3, r3, #16
 800184c:	469b      	mov	fp, r3
 800184e:	4348      	muls	r0, r1
 8001850:	4379      	muls	r1, r7
 8001852:	4451      	add	r1, sl
 8001854:	4459      	add	r1, fp
 8001856:	458a      	cmp	sl, r1
 8001858:	d903      	bls.n	8001862 <__aeabi_dmul+0x252>
 800185a:	2380      	movs	r3, #128	; 0x80
 800185c:	025b      	lsls	r3, r3, #9
 800185e:	469a      	mov	sl, r3
 8001860:	4450      	add	r0, sl
 8001862:	0c0b      	lsrs	r3, r1, #16
 8001864:	469a      	mov	sl, r3
 8001866:	464b      	mov	r3, r9
 8001868:	041b      	lsls	r3, r3, #16
 800186a:	0c1b      	lsrs	r3, r3, #16
 800186c:	4699      	mov	r9, r3
 800186e:	003b      	movs	r3, r7
 8001870:	4363      	muls	r3, r4
 8001872:	0409      	lsls	r1, r1, #16
 8001874:	4645      	mov	r5, r8
 8001876:	4449      	add	r1, r9
 8001878:	4699      	mov	r9, r3
 800187a:	4663      	mov	r3, ip
 800187c:	435c      	muls	r4, r3
 800187e:	436b      	muls	r3, r5
 8001880:	469c      	mov	ip, r3
 8001882:	464b      	mov	r3, r9
 8001884:	0c1b      	lsrs	r3, r3, #16
 8001886:	4698      	mov	r8, r3
 8001888:	436f      	muls	r7, r5
 800188a:	193f      	adds	r7, r7, r4
 800188c:	4447      	add	r7, r8
 800188e:	4450      	add	r0, sl
 8001890:	42bc      	cmp	r4, r7
 8001892:	d903      	bls.n	800189c <__aeabi_dmul+0x28c>
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	025b      	lsls	r3, r3, #9
 8001898:	4698      	mov	r8, r3
 800189a:	44c4      	add	ip, r8
 800189c:	9b04      	ldr	r3, [sp, #16]
 800189e:	9d00      	ldr	r5, [sp, #0]
 80018a0:	4698      	mov	r8, r3
 80018a2:	4445      	add	r5, r8
 80018a4:	42b5      	cmp	r5, r6
 80018a6:	41b6      	sbcs	r6, r6
 80018a8:	4273      	negs	r3, r6
 80018aa:	4698      	mov	r8, r3
 80018ac:	464b      	mov	r3, r9
 80018ae:	041e      	lsls	r6, r3, #16
 80018b0:	9b05      	ldr	r3, [sp, #20]
 80018b2:	043c      	lsls	r4, r7, #16
 80018b4:	4699      	mov	r9, r3
 80018b6:	0c36      	lsrs	r6, r6, #16
 80018b8:	19a4      	adds	r4, r4, r6
 80018ba:	444c      	add	r4, r9
 80018bc:	46a1      	mov	r9, r4
 80018be:	4683      	mov	fp, r0
 80018c0:	186e      	adds	r6, r5, r1
 80018c2:	44c1      	add	r9, r8
 80018c4:	428e      	cmp	r6, r1
 80018c6:	4189      	sbcs	r1, r1
 80018c8:	44cb      	add	fp, r9
 80018ca:	465d      	mov	r5, fp
 80018cc:	4249      	negs	r1, r1
 80018ce:	186d      	adds	r5, r5, r1
 80018d0:	429c      	cmp	r4, r3
 80018d2:	41a4      	sbcs	r4, r4
 80018d4:	45c1      	cmp	r9, r8
 80018d6:	419b      	sbcs	r3, r3
 80018d8:	4583      	cmp	fp, r0
 80018da:	4180      	sbcs	r0, r0
 80018dc:	428d      	cmp	r5, r1
 80018de:	4189      	sbcs	r1, r1
 80018e0:	425b      	negs	r3, r3
 80018e2:	4264      	negs	r4, r4
 80018e4:	431c      	orrs	r4, r3
 80018e6:	4240      	negs	r0, r0
 80018e8:	9b03      	ldr	r3, [sp, #12]
 80018ea:	4249      	negs	r1, r1
 80018ec:	4301      	orrs	r1, r0
 80018ee:	0270      	lsls	r0, r6, #9
 80018f0:	0c3f      	lsrs	r7, r7, #16
 80018f2:	4318      	orrs	r0, r3
 80018f4:	19e4      	adds	r4, r4, r7
 80018f6:	1e47      	subs	r7, r0, #1
 80018f8:	41b8      	sbcs	r0, r7
 80018fa:	1864      	adds	r4, r4, r1
 80018fc:	4464      	add	r4, ip
 80018fe:	0df6      	lsrs	r6, r6, #23
 8001900:	0261      	lsls	r1, r4, #9
 8001902:	4330      	orrs	r0, r6
 8001904:	0dec      	lsrs	r4, r5, #23
 8001906:	026e      	lsls	r6, r5, #9
 8001908:	430c      	orrs	r4, r1
 800190a:	4330      	orrs	r0, r6
 800190c:	01c9      	lsls	r1, r1, #7
 800190e:	d400      	bmi.n	8001912 <__aeabi_dmul+0x302>
 8001910:	e0f1      	b.n	8001af6 <__aeabi_dmul+0x4e6>
 8001912:	2101      	movs	r1, #1
 8001914:	0843      	lsrs	r3, r0, #1
 8001916:	4001      	ands	r1, r0
 8001918:	430b      	orrs	r3, r1
 800191a:	07e0      	lsls	r0, r4, #31
 800191c:	4318      	orrs	r0, r3
 800191e:	0864      	lsrs	r4, r4, #1
 8001920:	4915      	ldr	r1, [pc, #84]	; (8001978 <__aeabi_dmul+0x368>)
 8001922:	9b02      	ldr	r3, [sp, #8]
 8001924:	468c      	mov	ip, r1
 8001926:	4463      	add	r3, ip
 8001928:	2b00      	cmp	r3, #0
 800192a:	dc00      	bgt.n	800192e <__aeabi_dmul+0x31e>
 800192c:	e097      	b.n	8001a5e <__aeabi_dmul+0x44e>
 800192e:	0741      	lsls	r1, r0, #29
 8001930:	d009      	beq.n	8001946 <__aeabi_dmul+0x336>
 8001932:	210f      	movs	r1, #15
 8001934:	4001      	ands	r1, r0
 8001936:	2904      	cmp	r1, #4
 8001938:	d005      	beq.n	8001946 <__aeabi_dmul+0x336>
 800193a:	1d01      	adds	r1, r0, #4
 800193c:	4281      	cmp	r1, r0
 800193e:	4180      	sbcs	r0, r0
 8001940:	4240      	negs	r0, r0
 8001942:	1824      	adds	r4, r4, r0
 8001944:	0008      	movs	r0, r1
 8001946:	01e1      	lsls	r1, r4, #7
 8001948:	d506      	bpl.n	8001958 <__aeabi_dmul+0x348>
 800194a:	2180      	movs	r1, #128	; 0x80
 800194c:	00c9      	lsls	r1, r1, #3
 800194e:	468c      	mov	ip, r1
 8001950:	4b0a      	ldr	r3, [pc, #40]	; (800197c <__aeabi_dmul+0x36c>)
 8001952:	401c      	ands	r4, r3
 8001954:	9b02      	ldr	r3, [sp, #8]
 8001956:	4463      	add	r3, ip
 8001958:	4909      	ldr	r1, [pc, #36]	; (8001980 <__aeabi_dmul+0x370>)
 800195a:	428b      	cmp	r3, r1
 800195c:	dd00      	ble.n	8001960 <__aeabi_dmul+0x350>
 800195e:	e710      	b.n	8001782 <__aeabi_dmul+0x172>
 8001960:	0761      	lsls	r1, r4, #29
 8001962:	08c5      	lsrs	r5, r0, #3
 8001964:	0264      	lsls	r4, r4, #9
 8001966:	055b      	lsls	r3, r3, #21
 8001968:	430d      	orrs	r5, r1
 800196a:	0b24      	lsrs	r4, r4, #12
 800196c:	0d5b      	lsrs	r3, r3, #21
 800196e:	e6c1      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001970:	000007ff 	.word	0x000007ff
 8001974:	fffffc01 	.word	0xfffffc01
 8001978:	000003ff 	.word	0x000003ff
 800197c:	feffffff 	.word	0xfeffffff
 8001980:	000007fe 	.word	0x000007fe
 8001984:	464b      	mov	r3, r9
 8001986:	4323      	orrs	r3, r4
 8001988:	d059      	beq.n	8001a3e <__aeabi_dmul+0x42e>
 800198a:	2c00      	cmp	r4, #0
 800198c:	d100      	bne.n	8001990 <__aeabi_dmul+0x380>
 800198e:	e0a3      	b.n	8001ad8 <__aeabi_dmul+0x4c8>
 8001990:	0020      	movs	r0, r4
 8001992:	f000 fdb1 	bl	80024f8 <__clzsi2>
 8001996:	0001      	movs	r1, r0
 8001998:	0003      	movs	r3, r0
 800199a:	390b      	subs	r1, #11
 800199c:	221d      	movs	r2, #29
 800199e:	1a52      	subs	r2, r2, r1
 80019a0:	4649      	mov	r1, r9
 80019a2:	0018      	movs	r0, r3
 80019a4:	40d1      	lsrs	r1, r2
 80019a6:	464a      	mov	r2, r9
 80019a8:	3808      	subs	r0, #8
 80019aa:	4082      	lsls	r2, r0
 80019ac:	4084      	lsls	r4, r0
 80019ae:	0010      	movs	r0, r2
 80019b0:	430c      	orrs	r4, r1
 80019b2:	4a74      	ldr	r2, [pc, #464]	; (8001b84 <__aeabi_dmul+0x574>)
 80019b4:	1aeb      	subs	r3, r5, r3
 80019b6:	4694      	mov	ip, r2
 80019b8:	4642      	mov	r2, r8
 80019ba:	4463      	add	r3, ip
 80019bc:	9301      	str	r3, [sp, #4]
 80019be:	9b01      	ldr	r3, [sp, #4]
 80019c0:	407a      	eors	r2, r7
 80019c2:	3301      	adds	r3, #1
 80019c4:	2100      	movs	r1, #0
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	9302      	str	r3, [sp, #8]
 80019ca:	2e0a      	cmp	r6, #10
 80019cc:	dd00      	ble.n	80019d0 <__aeabi_dmul+0x3c0>
 80019ce:	e667      	b.n	80016a0 <__aeabi_dmul+0x90>
 80019d0:	e683      	b.n	80016da <__aeabi_dmul+0xca>
 80019d2:	465b      	mov	r3, fp
 80019d4:	4303      	orrs	r3, r0
 80019d6:	469a      	mov	sl, r3
 80019d8:	d02a      	beq.n	8001a30 <__aeabi_dmul+0x420>
 80019da:	465b      	mov	r3, fp
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d06d      	beq.n	8001abc <__aeabi_dmul+0x4ac>
 80019e0:	4658      	mov	r0, fp
 80019e2:	f000 fd89 	bl	80024f8 <__clzsi2>
 80019e6:	0001      	movs	r1, r0
 80019e8:	0003      	movs	r3, r0
 80019ea:	390b      	subs	r1, #11
 80019ec:	221d      	movs	r2, #29
 80019ee:	1a52      	subs	r2, r2, r1
 80019f0:	0021      	movs	r1, r4
 80019f2:	0018      	movs	r0, r3
 80019f4:	465d      	mov	r5, fp
 80019f6:	40d1      	lsrs	r1, r2
 80019f8:	3808      	subs	r0, #8
 80019fa:	4085      	lsls	r5, r0
 80019fc:	000a      	movs	r2, r1
 80019fe:	4084      	lsls	r4, r0
 8001a00:	432a      	orrs	r2, r5
 8001a02:	4693      	mov	fp, r2
 8001a04:	46a2      	mov	sl, r4
 8001a06:	4d5f      	ldr	r5, [pc, #380]	; (8001b84 <__aeabi_dmul+0x574>)
 8001a08:	2600      	movs	r6, #0
 8001a0a:	1aed      	subs	r5, r5, r3
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	e625      	b.n	800165e <__aeabi_dmul+0x4e>
 8001a12:	465b      	mov	r3, fp
 8001a14:	4303      	orrs	r3, r0
 8001a16:	469a      	mov	sl, r3
 8001a18:	d105      	bne.n	8001a26 <__aeabi_dmul+0x416>
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	469b      	mov	fp, r3
 8001a1e:	3302      	adds	r3, #2
 8001a20:	2608      	movs	r6, #8
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	e61b      	b.n	800165e <__aeabi_dmul+0x4e>
 8001a26:	2303      	movs	r3, #3
 8001a28:	4682      	mov	sl, r0
 8001a2a:	260c      	movs	r6, #12
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	e616      	b.n	800165e <__aeabi_dmul+0x4e>
 8001a30:	2300      	movs	r3, #0
 8001a32:	469b      	mov	fp, r3
 8001a34:	3301      	adds	r3, #1
 8001a36:	2604      	movs	r6, #4
 8001a38:	2500      	movs	r5, #0
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	e60f      	b.n	800165e <__aeabi_dmul+0x4e>
 8001a3e:	4642      	mov	r2, r8
 8001a40:	3301      	adds	r3, #1
 8001a42:	9501      	str	r5, [sp, #4]
 8001a44:	431e      	orrs	r6, r3
 8001a46:	9b01      	ldr	r3, [sp, #4]
 8001a48:	407a      	eors	r2, r7
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	2400      	movs	r4, #0
 8001a4e:	2000      	movs	r0, #0
 8001a50:	2101      	movs	r1, #1
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	9302      	str	r3, [sp, #8]
 8001a56:	2e0a      	cmp	r6, #10
 8001a58:	dd00      	ble.n	8001a5c <__aeabi_dmul+0x44c>
 8001a5a:	e621      	b.n	80016a0 <__aeabi_dmul+0x90>
 8001a5c:	e63d      	b.n	80016da <__aeabi_dmul+0xca>
 8001a5e:	2101      	movs	r1, #1
 8001a60:	1ac9      	subs	r1, r1, r3
 8001a62:	2938      	cmp	r1, #56	; 0x38
 8001a64:	dd00      	ble.n	8001a68 <__aeabi_dmul+0x458>
 8001a66:	e642      	b.n	80016ee <__aeabi_dmul+0xde>
 8001a68:	291f      	cmp	r1, #31
 8001a6a:	dd47      	ble.n	8001afc <__aeabi_dmul+0x4ec>
 8001a6c:	261f      	movs	r6, #31
 8001a6e:	0025      	movs	r5, r4
 8001a70:	4276      	negs	r6, r6
 8001a72:	1af3      	subs	r3, r6, r3
 8001a74:	40dd      	lsrs	r5, r3
 8001a76:	002b      	movs	r3, r5
 8001a78:	2920      	cmp	r1, #32
 8001a7a:	d005      	beq.n	8001a88 <__aeabi_dmul+0x478>
 8001a7c:	4942      	ldr	r1, [pc, #264]	; (8001b88 <__aeabi_dmul+0x578>)
 8001a7e:	9d02      	ldr	r5, [sp, #8]
 8001a80:	468c      	mov	ip, r1
 8001a82:	4465      	add	r5, ip
 8001a84:	40ac      	lsls	r4, r5
 8001a86:	4320      	orrs	r0, r4
 8001a88:	1e41      	subs	r1, r0, #1
 8001a8a:	4188      	sbcs	r0, r1
 8001a8c:	4318      	orrs	r0, r3
 8001a8e:	2307      	movs	r3, #7
 8001a90:	001d      	movs	r5, r3
 8001a92:	2400      	movs	r4, #0
 8001a94:	4005      	ands	r5, r0
 8001a96:	4203      	tst	r3, r0
 8001a98:	d04a      	beq.n	8001b30 <__aeabi_dmul+0x520>
 8001a9a:	230f      	movs	r3, #15
 8001a9c:	2400      	movs	r4, #0
 8001a9e:	4003      	ands	r3, r0
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d042      	beq.n	8001b2a <__aeabi_dmul+0x51a>
 8001aa4:	1d03      	adds	r3, r0, #4
 8001aa6:	4283      	cmp	r3, r0
 8001aa8:	4180      	sbcs	r0, r0
 8001aaa:	4240      	negs	r0, r0
 8001aac:	1824      	adds	r4, r4, r0
 8001aae:	0018      	movs	r0, r3
 8001ab0:	0223      	lsls	r3, r4, #8
 8001ab2:	d53a      	bpl.n	8001b2a <__aeabi_dmul+0x51a>
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	2400      	movs	r4, #0
 8001ab8:	2500      	movs	r5, #0
 8001aba:	e61b      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001abc:	f000 fd1c 	bl	80024f8 <__clzsi2>
 8001ac0:	0001      	movs	r1, r0
 8001ac2:	0003      	movs	r3, r0
 8001ac4:	3115      	adds	r1, #21
 8001ac6:	3320      	adds	r3, #32
 8001ac8:	291c      	cmp	r1, #28
 8001aca:	dd8f      	ble.n	80019ec <__aeabi_dmul+0x3dc>
 8001acc:	3808      	subs	r0, #8
 8001ace:	2200      	movs	r2, #0
 8001ad0:	4084      	lsls	r4, r0
 8001ad2:	4692      	mov	sl, r2
 8001ad4:	46a3      	mov	fp, r4
 8001ad6:	e796      	b.n	8001a06 <__aeabi_dmul+0x3f6>
 8001ad8:	f000 fd0e 	bl	80024f8 <__clzsi2>
 8001adc:	0001      	movs	r1, r0
 8001ade:	0003      	movs	r3, r0
 8001ae0:	3115      	adds	r1, #21
 8001ae2:	3320      	adds	r3, #32
 8001ae4:	291c      	cmp	r1, #28
 8001ae6:	dc00      	bgt.n	8001aea <__aeabi_dmul+0x4da>
 8001ae8:	e758      	b.n	800199c <__aeabi_dmul+0x38c>
 8001aea:	0002      	movs	r2, r0
 8001aec:	464c      	mov	r4, r9
 8001aee:	3a08      	subs	r2, #8
 8001af0:	2000      	movs	r0, #0
 8001af2:	4094      	lsls	r4, r2
 8001af4:	e75d      	b.n	80019b2 <__aeabi_dmul+0x3a2>
 8001af6:	9b01      	ldr	r3, [sp, #4]
 8001af8:	9302      	str	r3, [sp, #8]
 8001afa:	e711      	b.n	8001920 <__aeabi_dmul+0x310>
 8001afc:	4b23      	ldr	r3, [pc, #140]	; (8001b8c <__aeabi_dmul+0x57c>)
 8001afe:	0026      	movs	r6, r4
 8001b00:	469c      	mov	ip, r3
 8001b02:	0003      	movs	r3, r0
 8001b04:	9d02      	ldr	r5, [sp, #8]
 8001b06:	40cb      	lsrs	r3, r1
 8001b08:	4465      	add	r5, ip
 8001b0a:	40ae      	lsls	r6, r5
 8001b0c:	431e      	orrs	r6, r3
 8001b0e:	0003      	movs	r3, r0
 8001b10:	40ab      	lsls	r3, r5
 8001b12:	1e58      	subs	r0, r3, #1
 8001b14:	4183      	sbcs	r3, r0
 8001b16:	0030      	movs	r0, r6
 8001b18:	4318      	orrs	r0, r3
 8001b1a:	40cc      	lsrs	r4, r1
 8001b1c:	0743      	lsls	r3, r0, #29
 8001b1e:	d0c7      	beq.n	8001ab0 <__aeabi_dmul+0x4a0>
 8001b20:	230f      	movs	r3, #15
 8001b22:	4003      	ands	r3, r0
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	d1bd      	bne.n	8001aa4 <__aeabi_dmul+0x494>
 8001b28:	e7c2      	b.n	8001ab0 <__aeabi_dmul+0x4a0>
 8001b2a:	0765      	lsls	r5, r4, #29
 8001b2c:	0264      	lsls	r4, r4, #9
 8001b2e:	0b24      	lsrs	r4, r4, #12
 8001b30:	08c0      	lsrs	r0, r0, #3
 8001b32:	2300      	movs	r3, #0
 8001b34:	4305      	orrs	r5, r0
 8001b36:	e5dd      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001b38:	2500      	movs	r5, #0
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	2e0f      	cmp	r6, #15
 8001b3e:	d10c      	bne.n	8001b5a <__aeabi_dmul+0x54a>
 8001b40:	2480      	movs	r4, #128	; 0x80
 8001b42:	465b      	mov	r3, fp
 8001b44:	0324      	lsls	r4, r4, #12
 8001b46:	4223      	tst	r3, r4
 8001b48:	d00e      	beq.n	8001b68 <__aeabi_dmul+0x558>
 8001b4a:	4221      	tst	r1, r4
 8001b4c:	d10c      	bne.n	8001b68 <__aeabi_dmul+0x558>
 8001b4e:	430c      	orrs	r4, r1
 8001b50:	0324      	lsls	r4, r4, #12
 8001b52:	003a      	movs	r2, r7
 8001b54:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <__aeabi_dmul+0x580>)
 8001b56:	0b24      	lsrs	r4, r4, #12
 8001b58:	e5cc      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001b5a:	2e0b      	cmp	r6, #11
 8001b5c:	d000      	beq.n	8001b60 <__aeabi_dmul+0x550>
 8001b5e:	e5a2      	b.n	80016a6 <__aeabi_dmul+0x96>
 8001b60:	468b      	mov	fp, r1
 8001b62:	46aa      	mov	sl, r5
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	e5f7      	b.n	8001758 <__aeabi_dmul+0x148>
 8001b68:	2480      	movs	r4, #128	; 0x80
 8001b6a:	465b      	mov	r3, fp
 8001b6c:	0324      	lsls	r4, r4, #12
 8001b6e:	431c      	orrs	r4, r3
 8001b70:	0324      	lsls	r4, r4, #12
 8001b72:	4642      	mov	r2, r8
 8001b74:	4655      	mov	r5, sl
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <__aeabi_dmul+0x580>)
 8001b78:	0b24      	lsrs	r4, r4, #12
 8001b7a:	e5bb      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001b7c:	464d      	mov	r5, r9
 8001b7e:	0021      	movs	r1, r4
 8001b80:	2303      	movs	r3, #3
 8001b82:	e7db      	b.n	8001b3c <__aeabi_dmul+0x52c>
 8001b84:	fffffc0d 	.word	0xfffffc0d
 8001b88:	0000043e 	.word	0x0000043e
 8001b8c:	0000041e 	.word	0x0000041e
 8001b90:	000007ff 	.word	0x000007ff

08001b94 <__aeabi_dsub>:
 8001b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b96:	4657      	mov	r7, sl
 8001b98:	464e      	mov	r6, r9
 8001b9a:	4645      	mov	r5, r8
 8001b9c:	46de      	mov	lr, fp
 8001b9e:	b5e0      	push	{r5, r6, r7, lr}
 8001ba0:	000d      	movs	r5, r1
 8001ba2:	0004      	movs	r4, r0
 8001ba4:	0019      	movs	r1, r3
 8001ba6:	0010      	movs	r0, r2
 8001ba8:	032b      	lsls	r3, r5, #12
 8001baa:	0a5b      	lsrs	r3, r3, #9
 8001bac:	0f62      	lsrs	r2, r4, #29
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	00e3      	lsls	r3, r4, #3
 8001bb2:	030c      	lsls	r4, r1, #12
 8001bb4:	0a64      	lsrs	r4, r4, #9
 8001bb6:	0f47      	lsrs	r7, r0, #29
 8001bb8:	4327      	orrs	r7, r4
 8001bba:	4cd0      	ldr	r4, [pc, #832]	; (8001efc <__aeabi_dsub+0x368>)
 8001bbc:	006e      	lsls	r6, r5, #1
 8001bbe:	4691      	mov	r9, r2
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	004a      	lsls	r2, r1, #1
 8001bc4:	00c0      	lsls	r0, r0, #3
 8001bc6:	4698      	mov	r8, r3
 8001bc8:	46a2      	mov	sl, r4
 8001bca:	0d76      	lsrs	r6, r6, #21
 8001bcc:	0fed      	lsrs	r5, r5, #31
 8001bce:	0d52      	lsrs	r2, r2, #21
 8001bd0:	0fc9      	lsrs	r1, r1, #31
 8001bd2:	9001      	str	r0, [sp, #4]
 8001bd4:	42a2      	cmp	r2, r4
 8001bd6:	d100      	bne.n	8001bda <__aeabi_dsub+0x46>
 8001bd8:	e0b9      	b.n	8001d4e <__aeabi_dsub+0x1ba>
 8001bda:	2401      	movs	r4, #1
 8001bdc:	4061      	eors	r1, r4
 8001bde:	468b      	mov	fp, r1
 8001be0:	428d      	cmp	r5, r1
 8001be2:	d100      	bne.n	8001be6 <__aeabi_dsub+0x52>
 8001be4:	e08d      	b.n	8001d02 <__aeabi_dsub+0x16e>
 8001be6:	1ab4      	subs	r4, r6, r2
 8001be8:	46a4      	mov	ip, r4
 8001bea:	2c00      	cmp	r4, #0
 8001bec:	dc00      	bgt.n	8001bf0 <__aeabi_dsub+0x5c>
 8001bee:	e0b7      	b.n	8001d60 <__aeabi_dsub+0x1cc>
 8001bf0:	2a00      	cmp	r2, #0
 8001bf2:	d100      	bne.n	8001bf6 <__aeabi_dsub+0x62>
 8001bf4:	e0cb      	b.n	8001d8e <__aeabi_dsub+0x1fa>
 8001bf6:	4ac1      	ldr	r2, [pc, #772]	; (8001efc <__aeabi_dsub+0x368>)
 8001bf8:	4296      	cmp	r6, r2
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dsub+0x6a>
 8001bfc:	e186      	b.n	8001f0c <__aeabi_dsub+0x378>
 8001bfe:	2280      	movs	r2, #128	; 0x80
 8001c00:	0412      	lsls	r2, r2, #16
 8001c02:	4317      	orrs	r7, r2
 8001c04:	4662      	mov	r2, ip
 8001c06:	2a38      	cmp	r2, #56	; 0x38
 8001c08:	dd00      	ble.n	8001c0c <__aeabi_dsub+0x78>
 8001c0a:	e1a4      	b.n	8001f56 <__aeabi_dsub+0x3c2>
 8001c0c:	2a1f      	cmp	r2, #31
 8001c0e:	dd00      	ble.n	8001c12 <__aeabi_dsub+0x7e>
 8001c10:	e21d      	b.n	800204e <__aeabi_dsub+0x4ba>
 8001c12:	4661      	mov	r1, ip
 8001c14:	2220      	movs	r2, #32
 8001c16:	003c      	movs	r4, r7
 8001c18:	1a52      	subs	r2, r2, r1
 8001c1a:	0001      	movs	r1, r0
 8001c1c:	4090      	lsls	r0, r2
 8001c1e:	4094      	lsls	r4, r2
 8001c20:	1e42      	subs	r2, r0, #1
 8001c22:	4190      	sbcs	r0, r2
 8001c24:	4662      	mov	r2, ip
 8001c26:	46a0      	mov	r8, r4
 8001c28:	4664      	mov	r4, ip
 8001c2a:	40d7      	lsrs	r7, r2
 8001c2c:	464a      	mov	r2, r9
 8001c2e:	40e1      	lsrs	r1, r4
 8001c30:	4644      	mov	r4, r8
 8001c32:	1bd2      	subs	r2, r2, r7
 8001c34:	4691      	mov	r9, r2
 8001c36:	430c      	orrs	r4, r1
 8001c38:	4304      	orrs	r4, r0
 8001c3a:	1b1c      	subs	r4, r3, r4
 8001c3c:	42a3      	cmp	r3, r4
 8001c3e:	4192      	sbcs	r2, r2
 8001c40:	464b      	mov	r3, r9
 8001c42:	4252      	negs	r2, r2
 8001c44:	1a9b      	subs	r3, r3, r2
 8001c46:	469a      	mov	sl, r3
 8001c48:	4653      	mov	r3, sl
 8001c4a:	021b      	lsls	r3, r3, #8
 8001c4c:	d400      	bmi.n	8001c50 <__aeabi_dsub+0xbc>
 8001c4e:	e12b      	b.n	8001ea8 <__aeabi_dsub+0x314>
 8001c50:	4653      	mov	r3, sl
 8001c52:	025a      	lsls	r2, r3, #9
 8001c54:	0a53      	lsrs	r3, r2, #9
 8001c56:	469a      	mov	sl, r3
 8001c58:	4653      	mov	r3, sl
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d100      	bne.n	8001c60 <__aeabi_dsub+0xcc>
 8001c5e:	e166      	b.n	8001f2e <__aeabi_dsub+0x39a>
 8001c60:	4650      	mov	r0, sl
 8001c62:	f000 fc49 	bl	80024f8 <__clzsi2>
 8001c66:	0003      	movs	r3, r0
 8001c68:	3b08      	subs	r3, #8
 8001c6a:	2220      	movs	r2, #32
 8001c6c:	0020      	movs	r0, r4
 8001c6e:	1ad2      	subs	r2, r2, r3
 8001c70:	4651      	mov	r1, sl
 8001c72:	40d0      	lsrs	r0, r2
 8001c74:	4099      	lsls	r1, r3
 8001c76:	0002      	movs	r2, r0
 8001c78:	409c      	lsls	r4, r3
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	429e      	cmp	r6, r3
 8001c7e:	dd00      	ble.n	8001c82 <__aeabi_dsub+0xee>
 8001c80:	e164      	b.n	8001f4c <__aeabi_dsub+0x3b8>
 8001c82:	1b9b      	subs	r3, r3, r6
 8001c84:	1c59      	adds	r1, r3, #1
 8001c86:	291f      	cmp	r1, #31
 8001c88:	dd00      	ble.n	8001c8c <__aeabi_dsub+0xf8>
 8001c8a:	e0fe      	b.n	8001e8a <__aeabi_dsub+0x2f6>
 8001c8c:	2320      	movs	r3, #32
 8001c8e:	0010      	movs	r0, r2
 8001c90:	0026      	movs	r6, r4
 8001c92:	1a5b      	subs	r3, r3, r1
 8001c94:	409c      	lsls	r4, r3
 8001c96:	4098      	lsls	r0, r3
 8001c98:	40ce      	lsrs	r6, r1
 8001c9a:	40ca      	lsrs	r2, r1
 8001c9c:	1e63      	subs	r3, r4, #1
 8001c9e:	419c      	sbcs	r4, r3
 8001ca0:	4330      	orrs	r0, r6
 8001ca2:	4692      	mov	sl, r2
 8001ca4:	2600      	movs	r6, #0
 8001ca6:	4304      	orrs	r4, r0
 8001ca8:	0763      	lsls	r3, r4, #29
 8001caa:	d009      	beq.n	8001cc0 <__aeabi_dsub+0x12c>
 8001cac:	230f      	movs	r3, #15
 8001cae:	4023      	ands	r3, r4
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d005      	beq.n	8001cc0 <__aeabi_dsub+0x12c>
 8001cb4:	1d23      	adds	r3, r4, #4
 8001cb6:	42a3      	cmp	r3, r4
 8001cb8:	41a4      	sbcs	r4, r4
 8001cba:	4264      	negs	r4, r4
 8001cbc:	44a2      	add	sl, r4
 8001cbe:	001c      	movs	r4, r3
 8001cc0:	4653      	mov	r3, sl
 8001cc2:	021b      	lsls	r3, r3, #8
 8001cc4:	d400      	bmi.n	8001cc8 <__aeabi_dsub+0x134>
 8001cc6:	e0f2      	b.n	8001eae <__aeabi_dsub+0x31a>
 8001cc8:	4b8c      	ldr	r3, [pc, #560]	; (8001efc <__aeabi_dsub+0x368>)
 8001cca:	3601      	adds	r6, #1
 8001ccc:	429e      	cmp	r6, r3
 8001cce:	d100      	bne.n	8001cd2 <__aeabi_dsub+0x13e>
 8001cd0:	e10f      	b.n	8001ef2 <__aeabi_dsub+0x35e>
 8001cd2:	4653      	mov	r3, sl
 8001cd4:	498a      	ldr	r1, [pc, #552]	; (8001f00 <__aeabi_dsub+0x36c>)
 8001cd6:	08e4      	lsrs	r4, r4, #3
 8001cd8:	400b      	ands	r3, r1
 8001cda:	0019      	movs	r1, r3
 8001cdc:	075b      	lsls	r3, r3, #29
 8001cde:	4323      	orrs	r3, r4
 8001ce0:	0572      	lsls	r2, r6, #21
 8001ce2:	024c      	lsls	r4, r1, #9
 8001ce4:	0b24      	lsrs	r4, r4, #12
 8001ce6:	0d52      	lsrs	r2, r2, #21
 8001ce8:	0512      	lsls	r2, r2, #20
 8001cea:	4322      	orrs	r2, r4
 8001cec:	07ed      	lsls	r5, r5, #31
 8001cee:	432a      	orrs	r2, r5
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	0011      	movs	r1, r2
 8001cf4:	b003      	add	sp, #12
 8001cf6:	bcf0      	pop	{r4, r5, r6, r7}
 8001cf8:	46bb      	mov	fp, r7
 8001cfa:	46b2      	mov	sl, r6
 8001cfc:	46a9      	mov	r9, r5
 8001cfe:	46a0      	mov	r8, r4
 8001d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d02:	1ab4      	subs	r4, r6, r2
 8001d04:	46a4      	mov	ip, r4
 8001d06:	2c00      	cmp	r4, #0
 8001d08:	dd59      	ble.n	8001dbe <__aeabi_dsub+0x22a>
 8001d0a:	2a00      	cmp	r2, #0
 8001d0c:	d100      	bne.n	8001d10 <__aeabi_dsub+0x17c>
 8001d0e:	e0b0      	b.n	8001e72 <__aeabi_dsub+0x2de>
 8001d10:	4556      	cmp	r6, sl
 8001d12:	d100      	bne.n	8001d16 <__aeabi_dsub+0x182>
 8001d14:	e0fa      	b.n	8001f0c <__aeabi_dsub+0x378>
 8001d16:	2280      	movs	r2, #128	; 0x80
 8001d18:	0412      	lsls	r2, r2, #16
 8001d1a:	4317      	orrs	r7, r2
 8001d1c:	4662      	mov	r2, ip
 8001d1e:	2a38      	cmp	r2, #56	; 0x38
 8001d20:	dd00      	ble.n	8001d24 <__aeabi_dsub+0x190>
 8001d22:	e0d4      	b.n	8001ece <__aeabi_dsub+0x33a>
 8001d24:	2a1f      	cmp	r2, #31
 8001d26:	dc00      	bgt.n	8001d2a <__aeabi_dsub+0x196>
 8001d28:	e1c0      	b.n	80020ac <__aeabi_dsub+0x518>
 8001d2a:	0039      	movs	r1, r7
 8001d2c:	3a20      	subs	r2, #32
 8001d2e:	40d1      	lsrs	r1, r2
 8001d30:	4662      	mov	r2, ip
 8001d32:	2a20      	cmp	r2, #32
 8001d34:	d006      	beq.n	8001d44 <__aeabi_dsub+0x1b0>
 8001d36:	4664      	mov	r4, ip
 8001d38:	2240      	movs	r2, #64	; 0x40
 8001d3a:	1b12      	subs	r2, r2, r4
 8001d3c:	003c      	movs	r4, r7
 8001d3e:	4094      	lsls	r4, r2
 8001d40:	4304      	orrs	r4, r0
 8001d42:	9401      	str	r4, [sp, #4]
 8001d44:	9c01      	ldr	r4, [sp, #4]
 8001d46:	1e62      	subs	r2, r4, #1
 8001d48:	4194      	sbcs	r4, r2
 8001d4a:	430c      	orrs	r4, r1
 8001d4c:	e0c3      	b.n	8001ed6 <__aeabi_dsub+0x342>
 8001d4e:	003c      	movs	r4, r7
 8001d50:	4304      	orrs	r4, r0
 8001d52:	d02b      	beq.n	8001dac <__aeabi_dsub+0x218>
 8001d54:	468b      	mov	fp, r1
 8001d56:	428d      	cmp	r5, r1
 8001d58:	d02e      	beq.n	8001db8 <__aeabi_dsub+0x224>
 8001d5a:	4c6a      	ldr	r4, [pc, #424]	; (8001f04 <__aeabi_dsub+0x370>)
 8001d5c:	46a4      	mov	ip, r4
 8001d5e:	44b4      	add	ip, r6
 8001d60:	4664      	mov	r4, ip
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	d05f      	beq.n	8001e26 <__aeabi_dsub+0x292>
 8001d66:	1b94      	subs	r4, r2, r6
 8001d68:	46a4      	mov	ip, r4
 8001d6a:	2e00      	cmp	r6, #0
 8001d6c:	d000      	beq.n	8001d70 <__aeabi_dsub+0x1dc>
 8001d6e:	e120      	b.n	8001fb2 <__aeabi_dsub+0x41e>
 8001d70:	464c      	mov	r4, r9
 8001d72:	431c      	orrs	r4, r3
 8001d74:	d100      	bne.n	8001d78 <__aeabi_dsub+0x1e4>
 8001d76:	e1c7      	b.n	8002108 <__aeabi_dsub+0x574>
 8001d78:	4661      	mov	r1, ip
 8001d7a:	1e4c      	subs	r4, r1, #1
 8001d7c:	2901      	cmp	r1, #1
 8001d7e:	d100      	bne.n	8001d82 <__aeabi_dsub+0x1ee>
 8001d80:	e223      	b.n	80021ca <__aeabi_dsub+0x636>
 8001d82:	4d5e      	ldr	r5, [pc, #376]	; (8001efc <__aeabi_dsub+0x368>)
 8001d84:	45ac      	cmp	ip, r5
 8001d86:	d100      	bne.n	8001d8a <__aeabi_dsub+0x1f6>
 8001d88:	e1d8      	b.n	800213c <__aeabi_dsub+0x5a8>
 8001d8a:	46a4      	mov	ip, r4
 8001d8c:	e11a      	b.n	8001fc4 <__aeabi_dsub+0x430>
 8001d8e:	003a      	movs	r2, r7
 8001d90:	4302      	orrs	r2, r0
 8001d92:	d100      	bne.n	8001d96 <__aeabi_dsub+0x202>
 8001d94:	e0e4      	b.n	8001f60 <__aeabi_dsub+0x3cc>
 8001d96:	0022      	movs	r2, r4
 8001d98:	3a01      	subs	r2, #1
 8001d9a:	2c01      	cmp	r4, #1
 8001d9c:	d100      	bne.n	8001da0 <__aeabi_dsub+0x20c>
 8001d9e:	e1c3      	b.n	8002128 <__aeabi_dsub+0x594>
 8001da0:	4956      	ldr	r1, [pc, #344]	; (8001efc <__aeabi_dsub+0x368>)
 8001da2:	428c      	cmp	r4, r1
 8001da4:	d100      	bne.n	8001da8 <__aeabi_dsub+0x214>
 8001da6:	e0b1      	b.n	8001f0c <__aeabi_dsub+0x378>
 8001da8:	4694      	mov	ip, r2
 8001daa:	e72b      	b.n	8001c04 <__aeabi_dsub+0x70>
 8001dac:	2401      	movs	r4, #1
 8001dae:	4061      	eors	r1, r4
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d000      	beq.n	8001db8 <__aeabi_dsub+0x224>
 8001db6:	e716      	b.n	8001be6 <__aeabi_dsub+0x52>
 8001db8:	4952      	ldr	r1, [pc, #328]	; (8001f04 <__aeabi_dsub+0x370>)
 8001dba:	468c      	mov	ip, r1
 8001dbc:	44b4      	add	ip, r6
 8001dbe:	4664      	mov	r4, ip
 8001dc0:	2c00      	cmp	r4, #0
 8001dc2:	d100      	bne.n	8001dc6 <__aeabi_dsub+0x232>
 8001dc4:	e0d3      	b.n	8001f6e <__aeabi_dsub+0x3da>
 8001dc6:	1b91      	subs	r1, r2, r6
 8001dc8:	468c      	mov	ip, r1
 8001dca:	2e00      	cmp	r6, #0
 8001dcc:	d100      	bne.n	8001dd0 <__aeabi_dsub+0x23c>
 8001dce:	e15e      	b.n	800208e <__aeabi_dsub+0x4fa>
 8001dd0:	494a      	ldr	r1, [pc, #296]	; (8001efc <__aeabi_dsub+0x368>)
 8001dd2:	428a      	cmp	r2, r1
 8001dd4:	d100      	bne.n	8001dd8 <__aeabi_dsub+0x244>
 8001dd6:	e1be      	b.n	8002156 <__aeabi_dsub+0x5c2>
 8001dd8:	2180      	movs	r1, #128	; 0x80
 8001dda:	464c      	mov	r4, r9
 8001ddc:	0409      	lsls	r1, r1, #16
 8001dde:	430c      	orrs	r4, r1
 8001de0:	46a1      	mov	r9, r4
 8001de2:	4661      	mov	r1, ip
 8001de4:	2938      	cmp	r1, #56	; 0x38
 8001de6:	dd00      	ble.n	8001dea <__aeabi_dsub+0x256>
 8001de8:	e1ba      	b.n	8002160 <__aeabi_dsub+0x5cc>
 8001dea:	291f      	cmp	r1, #31
 8001dec:	dd00      	ble.n	8001df0 <__aeabi_dsub+0x25c>
 8001dee:	e227      	b.n	8002240 <__aeabi_dsub+0x6ac>
 8001df0:	2420      	movs	r4, #32
 8001df2:	1a64      	subs	r4, r4, r1
 8001df4:	4649      	mov	r1, r9
 8001df6:	40a1      	lsls	r1, r4
 8001df8:	001e      	movs	r6, r3
 8001dfa:	4688      	mov	r8, r1
 8001dfc:	4661      	mov	r1, ip
 8001dfe:	40a3      	lsls	r3, r4
 8001e00:	40ce      	lsrs	r6, r1
 8001e02:	4641      	mov	r1, r8
 8001e04:	1e5c      	subs	r4, r3, #1
 8001e06:	41a3      	sbcs	r3, r4
 8001e08:	4331      	orrs	r1, r6
 8001e0a:	4319      	orrs	r1, r3
 8001e0c:	000c      	movs	r4, r1
 8001e0e:	4663      	mov	r3, ip
 8001e10:	4649      	mov	r1, r9
 8001e12:	40d9      	lsrs	r1, r3
 8001e14:	187f      	adds	r7, r7, r1
 8001e16:	1824      	adds	r4, r4, r0
 8001e18:	4284      	cmp	r4, r0
 8001e1a:	419b      	sbcs	r3, r3
 8001e1c:	425b      	negs	r3, r3
 8001e1e:	469a      	mov	sl, r3
 8001e20:	0016      	movs	r6, r2
 8001e22:	44ba      	add	sl, r7
 8001e24:	e05d      	b.n	8001ee2 <__aeabi_dsub+0x34e>
 8001e26:	4c38      	ldr	r4, [pc, #224]	; (8001f08 <__aeabi_dsub+0x374>)
 8001e28:	1c72      	adds	r2, r6, #1
 8001e2a:	4222      	tst	r2, r4
 8001e2c:	d000      	beq.n	8001e30 <__aeabi_dsub+0x29c>
 8001e2e:	e0df      	b.n	8001ff0 <__aeabi_dsub+0x45c>
 8001e30:	464a      	mov	r2, r9
 8001e32:	431a      	orrs	r2, r3
 8001e34:	2e00      	cmp	r6, #0
 8001e36:	d000      	beq.n	8001e3a <__aeabi_dsub+0x2a6>
 8001e38:	e15c      	b.n	80020f4 <__aeabi_dsub+0x560>
 8001e3a:	2a00      	cmp	r2, #0
 8001e3c:	d100      	bne.n	8001e40 <__aeabi_dsub+0x2ac>
 8001e3e:	e1cf      	b.n	80021e0 <__aeabi_dsub+0x64c>
 8001e40:	003a      	movs	r2, r7
 8001e42:	4302      	orrs	r2, r0
 8001e44:	d100      	bne.n	8001e48 <__aeabi_dsub+0x2b4>
 8001e46:	e17f      	b.n	8002148 <__aeabi_dsub+0x5b4>
 8001e48:	1a1c      	subs	r4, r3, r0
 8001e4a:	464a      	mov	r2, r9
 8001e4c:	42a3      	cmp	r3, r4
 8001e4e:	4189      	sbcs	r1, r1
 8001e50:	1bd2      	subs	r2, r2, r7
 8001e52:	4249      	negs	r1, r1
 8001e54:	1a52      	subs	r2, r2, r1
 8001e56:	4692      	mov	sl, r2
 8001e58:	0212      	lsls	r2, r2, #8
 8001e5a:	d400      	bmi.n	8001e5e <__aeabi_dsub+0x2ca>
 8001e5c:	e20a      	b.n	8002274 <__aeabi_dsub+0x6e0>
 8001e5e:	1ac4      	subs	r4, r0, r3
 8001e60:	42a0      	cmp	r0, r4
 8001e62:	4180      	sbcs	r0, r0
 8001e64:	464b      	mov	r3, r9
 8001e66:	4240      	negs	r0, r0
 8001e68:	1aff      	subs	r7, r7, r3
 8001e6a:	1a3b      	subs	r3, r7, r0
 8001e6c:	469a      	mov	sl, r3
 8001e6e:	465d      	mov	r5, fp
 8001e70:	e71a      	b.n	8001ca8 <__aeabi_dsub+0x114>
 8001e72:	003a      	movs	r2, r7
 8001e74:	4302      	orrs	r2, r0
 8001e76:	d073      	beq.n	8001f60 <__aeabi_dsub+0x3cc>
 8001e78:	0022      	movs	r2, r4
 8001e7a:	3a01      	subs	r2, #1
 8001e7c:	2c01      	cmp	r4, #1
 8001e7e:	d100      	bne.n	8001e82 <__aeabi_dsub+0x2ee>
 8001e80:	e0cb      	b.n	800201a <__aeabi_dsub+0x486>
 8001e82:	4554      	cmp	r4, sl
 8001e84:	d042      	beq.n	8001f0c <__aeabi_dsub+0x378>
 8001e86:	4694      	mov	ip, r2
 8001e88:	e748      	b.n	8001d1c <__aeabi_dsub+0x188>
 8001e8a:	0010      	movs	r0, r2
 8001e8c:	3b1f      	subs	r3, #31
 8001e8e:	40d8      	lsrs	r0, r3
 8001e90:	2920      	cmp	r1, #32
 8001e92:	d003      	beq.n	8001e9c <__aeabi_dsub+0x308>
 8001e94:	2340      	movs	r3, #64	; 0x40
 8001e96:	1a5b      	subs	r3, r3, r1
 8001e98:	409a      	lsls	r2, r3
 8001e9a:	4314      	orrs	r4, r2
 8001e9c:	1e63      	subs	r3, r4, #1
 8001e9e:	419c      	sbcs	r4, r3
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	2600      	movs	r6, #0
 8001ea4:	469a      	mov	sl, r3
 8001ea6:	4304      	orrs	r4, r0
 8001ea8:	0763      	lsls	r3, r4, #29
 8001eaa:	d000      	beq.n	8001eae <__aeabi_dsub+0x31a>
 8001eac:	e6fe      	b.n	8001cac <__aeabi_dsub+0x118>
 8001eae:	4652      	mov	r2, sl
 8001eb0:	08e3      	lsrs	r3, r4, #3
 8001eb2:	0752      	lsls	r2, r2, #29
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	4652      	mov	r2, sl
 8001eb8:	46b4      	mov	ip, r6
 8001eba:	08d2      	lsrs	r2, r2, #3
 8001ebc:	490f      	ldr	r1, [pc, #60]	; (8001efc <__aeabi_dsub+0x368>)
 8001ebe:	458c      	cmp	ip, r1
 8001ec0:	d02a      	beq.n	8001f18 <__aeabi_dsub+0x384>
 8001ec2:	0312      	lsls	r2, r2, #12
 8001ec4:	0b14      	lsrs	r4, r2, #12
 8001ec6:	4662      	mov	r2, ip
 8001ec8:	0552      	lsls	r2, r2, #21
 8001eca:	0d52      	lsrs	r2, r2, #21
 8001ecc:	e70c      	b.n	8001ce8 <__aeabi_dsub+0x154>
 8001ece:	003c      	movs	r4, r7
 8001ed0:	4304      	orrs	r4, r0
 8001ed2:	1e62      	subs	r2, r4, #1
 8001ed4:	4194      	sbcs	r4, r2
 8001ed6:	18e4      	adds	r4, r4, r3
 8001ed8:	429c      	cmp	r4, r3
 8001eda:	4192      	sbcs	r2, r2
 8001edc:	4252      	negs	r2, r2
 8001ede:	444a      	add	r2, r9
 8001ee0:	4692      	mov	sl, r2
 8001ee2:	4653      	mov	r3, sl
 8001ee4:	021b      	lsls	r3, r3, #8
 8001ee6:	d5df      	bpl.n	8001ea8 <__aeabi_dsub+0x314>
 8001ee8:	4b04      	ldr	r3, [pc, #16]	; (8001efc <__aeabi_dsub+0x368>)
 8001eea:	3601      	adds	r6, #1
 8001eec:	429e      	cmp	r6, r3
 8001eee:	d000      	beq.n	8001ef2 <__aeabi_dsub+0x35e>
 8001ef0:	e0a0      	b.n	8002034 <__aeabi_dsub+0x4a0>
 8001ef2:	0032      	movs	r2, r6
 8001ef4:	2400      	movs	r4, #0
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	e6f6      	b.n	8001ce8 <__aeabi_dsub+0x154>
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	000007ff 	.word	0x000007ff
 8001f00:	ff7fffff 	.word	0xff7fffff
 8001f04:	fffff801 	.word	0xfffff801
 8001f08:	000007fe 	.word	0x000007fe
 8001f0c:	08db      	lsrs	r3, r3, #3
 8001f0e:	464a      	mov	r2, r9
 8001f10:	0752      	lsls	r2, r2, #29
 8001f12:	4313      	orrs	r3, r2
 8001f14:	464a      	mov	r2, r9
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	0019      	movs	r1, r3
 8001f1a:	4311      	orrs	r1, r2
 8001f1c:	d100      	bne.n	8001f20 <__aeabi_dsub+0x38c>
 8001f1e:	e1b5      	b.n	800228c <__aeabi_dsub+0x6f8>
 8001f20:	2480      	movs	r4, #128	; 0x80
 8001f22:	0324      	lsls	r4, r4, #12
 8001f24:	4314      	orrs	r4, r2
 8001f26:	0324      	lsls	r4, r4, #12
 8001f28:	4ad5      	ldr	r2, [pc, #852]	; (8002280 <__aeabi_dsub+0x6ec>)
 8001f2a:	0b24      	lsrs	r4, r4, #12
 8001f2c:	e6dc      	b.n	8001ce8 <__aeabi_dsub+0x154>
 8001f2e:	0020      	movs	r0, r4
 8001f30:	f000 fae2 	bl	80024f8 <__clzsi2>
 8001f34:	0003      	movs	r3, r0
 8001f36:	3318      	adds	r3, #24
 8001f38:	2b1f      	cmp	r3, #31
 8001f3a:	dc00      	bgt.n	8001f3e <__aeabi_dsub+0x3aa>
 8001f3c:	e695      	b.n	8001c6a <__aeabi_dsub+0xd6>
 8001f3e:	0022      	movs	r2, r4
 8001f40:	3808      	subs	r0, #8
 8001f42:	4082      	lsls	r2, r0
 8001f44:	2400      	movs	r4, #0
 8001f46:	429e      	cmp	r6, r3
 8001f48:	dc00      	bgt.n	8001f4c <__aeabi_dsub+0x3b8>
 8001f4a:	e69a      	b.n	8001c82 <__aeabi_dsub+0xee>
 8001f4c:	1af6      	subs	r6, r6, r3
 8001f4e:	4bcd      	ldr	r3, [pc, #820]	; (8002284 <__aeabi_dsub+0x6f0>)
 8001f50:	401a      	ands	r2, r3
 8001f52:	4692      	mov	sl, r2
 8001f54:	e6a8      	b.n	8001ca8 <__aeabi_dsub+0x114>
 8001f56:	003c      	movs	r4, r7
 8001f58:	4304      	orrs	r4, r0
 8001f5a:	1e62      	subs	r2, r4, #1
 8001f5c:	4194      	sbcs	r4, r2
 8001f5e:	e66c      	b.n	8001c3a <__aeabi_dsub+0xa6>
 8001f60:	464a      	mov	r2, r9
 8001f62:	08db      	lsrs	r3, r3, #3
 8001f64:	0752      	lsls	r2, r2, #29
 8001f66:	4313      	orrs	r3, r2
 8001f68:	464a      	mov	r2, r9
 8001f6a:	08d2      	lsrs	r2, r2, #3
 8001f6c:	e7a6      	b.n	8001ebc <__aeabi_dsub+0x328>
 8001f6e:	4cc6      	ldr	r4, [pc, #792]	; (8002288 <__aeabi_dsub+0x6f4>)
 8001f70:	1c72      	adds	r2, r6, #1
 8001f72:	4222      	tst	r2, r4
 8001f74:	d000      	beq.n	8001f78 <__aeabi_dsub+0x3e4>
 8001f76:	e0ac      	b.n	80020d2 <__aeabi_dsub+0x53e>
 8001f78:	464a      	mov	r2, r9
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	2e00      	cmp	r6, #0
 8001f7e:	d000      	beq.n	8001f82 <__aeabi_dsub+0x3ee>
 8001f80:	e105      	b.n	800218e <__aeabi_dsub+0x5fa>
 8001f82:	2a00      	cmp	r2, #0
 8001f84:	d100      	bne.n	8001f88 <__aeabi_dsub+0x3f4>
 8001f86:	e156      	b.n	8002236 <__aeabi_dsub+0x6a2>
 8001f88:	003a      	movs	r2, r7
 8001f8a:	4302      	orrs	r2, r0
 8001f8c:	d100      	bne.n	8001f90 <__aeabi_dsub+0x3fc>
 8001f8e:	e0db      	b.n	8002148 <__aeabi_dsub+0x5b4>
 8001f90:	181c      	adds	r4, r3, r0
 8001f92:	429c      	cmp	r4, r3
 8001f94:	419b      	sbcs	r3, r3
 8001f96:	444f      	add	r7, r9
 8001f98:	46ba      	mov	sl, r7
 8001f9a:	425b      	negs	r3, r3
 8001f9c:	449a      	add	sl, r3
 8001f9e:	4653      	mov	r3, sl
 8001fa0:	021b      	lsls	r3, r3, #8
 8001fa2:	d400      	bmi.n	8001fa6 <__aeabi_dsub+0x412>
 8001fa4:	e780      	b.n	8001ea8 <__aeabi_dsub+0x314>
 8001fa6:	4652      	mov	r2, sl
 8001fa8:	4bb6      	ldr	r3, [pc, #728]	; (8002284 <__aeabi_dsub+0x6f0>)
 8001faa:	2601      	movs	r6, #1
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e77a      	b.n	8001ea8 <__aeabi_dsub+0x314>
 8001fb2:	4cb3      	ldr	r4, [pc, #716]	; (8002280 <__aeabi_dsub+0x6ec>)
 8001fb4:	42a2      	cmp	r2, r4
 8001fb6:	d100      	bne.n	8001fba <__aeabi_dsub+0x426>
 8001fb8:	e0c0      	b.n	800213c <__aeabi_dsub+0x5a8>
 8001fba:	2480      	movs	r4, #128	; 0x80
 8001fbc:	464d      	mov	r5, r9
 8001fbe:	0424      	lsls	r4, r4, #16
 8001fc0:	4325      	orrs	r5, r4
 8001fc2:	46a9      	mov	r9, r5
 8001fc4:	4664      	mov	r4, ip
 8001fc6:	2c38      	cmp	r4, #56	; 0x38
 8001fc8:	dc53      	bgt.n	8002072 <__aeabi_dsub+0x4de>
 8001fca:	4661      	mov	r1, ip
 8001fcc:	2c1f      	cmp	r4, #31
 8001fce:	dd00      	ble.n	8001fd2 <__aeabi_dsub+0x43e>
 8001fd0:	e0cd      	b.n	800216e <__aeabi_dsub+0x5da>
 8001fd2:	2520      	movs	r5, #32
 8001fd4:	001e      	movs	r6, r3
 8001fd6:	1b2d      	subs	r5, r5, r4
 8001fd8:	464c      	mov	r4, r9
 8001fda:	40ab      	lsls	r3, r5
 8001fdc:	40ac      	lsls	r4, r5
 8001fde:	40ce      	lsrs	r6, r1
 8001fe0:	1e5d      	subs	r5, r3, #1
 8001fe2:	41ab      	sbcs	r3, r5
 8001fe4:	4334      	orrs	r4, r6
 8001fe6:	4323      	orrs	r3, r4
 8001fe8:	464c      	mov	r4, r9
 8001fea:	40cc      	lsrs	r4, r1
 8001fec:	1b3f      	subs	r7, r7, r4
 8001fee:	e045      	b.n	800207c <__aeabi_dsub+0x4e8>
 8001ff0:	464a      	mov	r2, r9
 8001ff2:	1a1c      	subs	r4, r3, r0
 8001ff4:	1bd1      	subs	r1, r2, r7
 8001ff6:	42a3      	cmp	r3, r4
 8001ff8:	4192      	sbcs	r2, r2
 8001ffa:	4252      	negs	r2, r2
 8001ffc:	4692      	mov	sl, r2
 8001ffe:	000a      	movs	r2, r1
 8002000:	4651      	mov	r1, sl
 8002002:	1a52      	subs	r2, r2, r1
 8002004:	4692      	mov	sl, r2
 8002006:	0212      	lsls	r2, r2, #8
 8002008:	d500      	bpl.n	800200c <__aeabi_dsub+0x478>
 800200a:	e083      	b.n	8002114 <__aeabi_dsub+0x580>
 800200c:	4653      	mov	r3, sl
 800200e:	4323      	orrs	r3, r4
 8002010:	d000      	beq.n	8002014 <__aeabi_dsub+0x480>
 8002012:	e621      	b.n	8001c58 <__aeabi_dsub+0xc4>
 8002014:	2200      	movs	r2, #0
 8002016:	2500      	movs	r5, #0
 8002018:	e753      	b.n	8001ec2 <__aeabi_dsub+0x32e>
 800201a:	181c      	adds	r4, r3, r0
 800201c:	429c      	cmp	r4, r3
 800201e:	419b      	sbcs	r3, r3
 8002020:	444f      	add	r7, r9
 8002022:	46ba      	mov	sl, r7
 8002024:	425b      	negs	r3, r3
 8002026:	449a      	add	sl, r3
 8002028:	4653      	mov	r3, sl
 800202a:	2601      	movs	r6, #1
 800202c:	021b      	lsls	r3, r3, #8
 800202e:	d400      	bmi.n	8002032 <__aeabi_dsub+0x49e>
 8002030:	e73a      	b.n	8001ea8 <__aeabi_dsub+0x314>
 8002032:	2602      	movs	r6, #2
 8002034:	4652      	mov	r2, sl
 8002036:	4b93      	ldr	r3, [pc, #588]	; (8002284 <__aeabi_dsub+0x6f0>)
 8002038:	2101      	movs	r1, #1
 800203a:	401a      	ands	r2, r3
 800203c:	0013      	movs	r3, r2
 800203e:	4021      	ands	r1, r4
 8002040:	0862      	lsrs	r2, r4, #1
 8002042:	430a      	orrs	r2, r1
 8002044:	07dc      	lsls	r4, r3, #31
 8002046:	085b      	lsrs	r3, r3, #1
 8002048:	469a      	mov	sl, r3
 800204a:	4314      	orrs	r4, r2
 800204c:	e62c      	b.n	8001ca8 <__aeabi_dsub+0x114>
 800204e:	0039      	movs	r1, r7
 8002050:	3a20      	subs	r2, #32
 8002052:	40d1      	lsrs	r1, r2
 8002054:	4662      	mov	r2, ip
 8002056:	2a20      	cmp	r2, #32
 8002058:	d006      	beq.n	8002068 <__aeabi_dsub+0x4d4>
 800205a:	4664      	mov	r4, ip
 800205c:	2240      	movs	r2, #64	; 0x40
 800205e:	1b12      	subs	r2, r2, r4
 8002060:	003c      	movs	r4, r7
 8002062:	4094      	lsls	r4, r2
 8002064:	4304      	orrs	r4, r0
 8002066:	9401      	str	r4, [sp, #4]
 8002068:	9c01      	ldr	r4, [sp, #4]
 800206a:	1e62      	subs	r2, r4, #1
 800206c:	4194      	sbcs	r4, r2
 800206e:	430c      	orrs	r4, r1
 8002070:	e5e3      	b.n	8001c3a <__aeabi_dsub+0xa6>
 8002072:	4649      	mov	r1, r9
 8002074:	4319      	orrs	r1, r3
 8002076:	000b      	movs	r3, r1
 8002078:	1e5c      	subs	r4, r3, #1
 800207a:	41a3      	sbcs	r3, r4
 800207c:	1ac4      	subs	r4, r0, r3
 800207e:	42a0      	cmp	r0, r4
 8002080:	419b      	sbcs	r3, r3
 8002082:	425b      	negs	r3, r3
 8002084:	1afb      	subs	r3, r7, r3
 8002086:	469a      	mov	sl, r3
 8002088:	465d      	mov	r5, fp
 800208a:	0016      	movs	r6, r2
 800208c:	e5dc      	b.n	8001c48 <__aeabi_dsub+0xb4>
 800208e:	4649      	mov	r1, r9
 8002090:	4319      	orrs	r1, r3
 8002092:	d100      	bne.n	8002096 <__aeabi_dsub+0x502>
 8002094:	e0ae      	b.n	80021f4 <__aeabi_dsub+0x660>
 8002096:	4661      	mov	r1, ip
 8002098:	4664      	mov	r4, ip
 800209a:	3901      	subs	r1, #1
 800209c:	2c01      	cmp	r4, #1
 800209e:	d100      	bne.n	80020a2 <__aeabi_dsub+0x50e>
 80020a0:	e0e0      	b.n	8002264 <__aeabi_dsub+0x6d0>
 80020a2:	4c77      	ldr	r4, [pc, #476]	; (8002280 <__aeabi_dsub+0x6ec>)
 80020a4:	45a4      	cmp	ip, r4
 80020a6:	d056      	beq.n	8002156 <__aeabi_dsub+0x5c2>
 80020a8:	468c      	mov	ip, r1
 80020aa:	e69a      	b.n	8001de2 <__aeabi_dsub+0x24e>
 80020ac:	4661      	mov	r1, ip
 80020ae:	2220      	movs	r2, #32
 80020b0:	003c      	movs	r4, r7
 80020b2:	1a52      	subs	r2, r2, r1
 80020b4:	4094      	lsls	r4, r2
 80020b6:	0001      	movs	r1, r0
 80020b8:	4090      	lsls	r0, r2
 80020ba:	46a0      	mov	r8, r4
 80020bc:	4664      	mov	r4, ip
 80020be:	1e42      	subs	r2, r0, #1
 80020c0:	4190      	sbcs	r0, r2
 80020c2:	4662      	mov	r2, ip
 80020c4:	40e1      	lsrs	r1, r4
 80020c6:	4644      	mov	r4, r8
 80020c8:	40d7      	lsrs	r7, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	4304      	orrs	r4, r0
 80020ce:	44b9      	add	r9, r7
 80020d0:	e701      	b.n	8001ed6 <__aeabi_dsub+0x342>
 80020d2:	496b      	ldr	r1, [pc, #428]	; (8002280 <__aeabi_dsub+0x6ec>)
 80020d4:	428a      	cmp	r2, r1
 80020d6:	d100      	bne.n	80020da <__aeabi_dsub+0x546>
 80020d8:	e70c      	b.n	8001ef4 <__aeabi_dsub+0x360>
 80020da:	1818      	adds	r0, r3, r0
 80020dc:	4298      	cmp	r0, r3
 80020de:	419b      	sbcs	r3, r3
 80020e0:	444f      	add	r7, r9
 80020e2:	425b      	negs	r3, r3
 80020e4:	18fb      	adds	r3, r7, r3
 80020e6:	07dc      	lsls	r4, r3, #31
 80020e8:	0840      	lsrs	r0, r0, #1
 80020ea:	085b      	lsrs	r3, r3, #1
 80020ec:	469a      	mov	sl, r3
 80020ee:	0016      	movs	r6, r2
 80020f0:	4304      	orrs	r4, r0
 80020f2:	e6d9      	b.n	8001ea8 <__aeabi_dsub+0x314>
 80020f4:	2a00      	cmp	r2, #0
 80020f6:	d000      	beq.n	80020fa <__aeabi_dsub+0x566>
 80020f8:	e081      	b.n	80021fe <__aeabi_dsub+0x66a>
 80020fa:	003b      	movs	r3, r7
 80020fc:	4303      	orrs	r3, r0
 80020fe:	d11d      	bne.n	800213c <__aeabi_dsub+0x5a8>
 8002100:	2280      	movs	r2, #128	; 0x80
 8002102:	2500      	movs	r5, #0
 8002104:	0312      	lsls	r2, r2, #12
 8002106:	e70b      	b.n	8001f20 <__aeabi_dsub+0x38c>
 8002108:	08c0      	lsrs	r0, r0, #3
 800210a:	077b      	lsls	r3, r7, #29
 800210c:	465d      	mov	r5, fp
 800210e:	4303      	orrs	r3, r0
 8002110:	08fa      	lsrs	r2, r7, #3
 8002112:	e6d3      	b.n	8001ebc <__aeabi_dsub+0x328>
 8002114:	1ac4      	subs	r4, r0, r3
 8002116:	42a0      	cmp	r0, r4
 8002118:	4180      	sbcs	r0, r0
 800211a:	464b      	mov	r3, r9
 800211c:	4240      	negs	r0, r0
 800211e:	1aff      	subs	r7, r7, r3
 8002120:	1a3b      	subs	r3, r7, r0
 8002122:	469a      	mov	sl, r3
 8002124:	465d      	mov	r5, fp
 8002126:	e597      	b.n	8001c58 <__aeabi_dsub+0xc4>
 8002128:	1a1c      	subs	r4, r3, r0
 800212a:	464a      	mov	r2, r9
 800212c:	42a3      	cmp	r3, r4
 800212e:	419b      	sbcs	r3, r3
 8002130:	1bd7      	subs	r7, r2, r7
 8002132:	425b      	negs	r3, r3
 8002134:	1afb      	subs	r3, r7, r3
 8002136:	469a      	mov	sl, r3
 8002138:	2601      	movs	r6, #1
 800213a:	e585      	b.n	8001c48 <__aeabi_dsub+0xb4>
 800213c:	08c0      	lsrs	r0, r0, #3
 800213e:	077b      	lsls	r3, r7, #29
 8002140:	465d      	mov	r5, fp
 8002142:	4303      	orrs	r3, r0
 8002144:	08fa      	lsrs	r2, r7, #3
 8002146:	e6e7      	b.n	8001f18 <__aeabi_dsub+0x384>
 8002148:	464a      	mov	r2, r9
 800214a:	08db      	lsrs	r3, r3, #3
 800214c:	0752      	lsls	r2, r2, #29
 800214e:	4313      	orrs	r3, r2
 8002150:	464a      	mov	r2, r9
 8002152:	08d2      	lsrs	r2, r2, #3
 8002154:	e6b5      	b.n	8001ec2 <__aeabi_dsub+0x32e>
 8002156:	08c0      	lsrs	r0, r0, #3
 8002158:	077b      	lsls	r3, r7, #29
 800215a:	4303      	orrs	r3, r0
 800215c:	08fa      	lsrs	r2, r7, #3
 800215e:	e6db      	b.n	8001f18 <__aeabi_dsub+0x384>
 8002160:	4649      	mov	r1, r9
 8002162:	4319      	orrs	r1, r3
 8002164:	000b      	movs	r3, r1
 8002166:	1e59      	subs	r1, r3, #1
 8002168:	418b      	sbcs	r3, r1
 800216a:	001c      	movs	r4, r3
 800216c:	e653      	b.n	8001e16 <__aeabi_dsub+0x282>
 800216e:	464d      	mov	r5, r9
 8002170:	3c20      	subs	r4, #32
 8002172:	40e5      	lsrs	r5, r4
 8002174:	2920      	cmp	r1, #32
 8002176:	d005      	beq.n	8002184 <__aeabi_dsub+0x5f0>
 8002178:	2440      	movs	r4, #64	; 0x40
 800217a:	1a64      	subs	r4, r4, r1
 800217c:	4649      	mov	r1, r9
 800217e:	40a1      	lsls	r1, r4
 8002180:	430b      	orrs	r3, r1
 8002182:	4698      	mov	r8, r3
 8002184:	4643      	mov	r3, r8
 8002186:	1e5c      	subs	r4, r3, #1
 8002188:	41a3      	sbcs	r3, r4
 800218a:	432b      	orrs	r3, r5
 800218c:	e776      	b.n	800207c <__aeabi_dsub+0x4e8>
 800218e:	2a00      	cmp	r2, #0
 8002190:	d0e1      	beq.n	8002156 <__aeabi_dsub+0x5c2>
 8002192:	003a      	movs	r2, r7
 8002194:	08db      	lsrs	r3, r3, #3
 8002196:	4302      	orrs	r2, r0
 8002198:	d100      	bne.n	800219c <__aeabi_dsub+0x608>
 800219a:	e6b8      	b.n	8001f0e <__aeabi_dsub+0x37a>
 800219c:	464a      	mov	r2, r9
 800219e:	0752      	lsls	r2, r2, #29
 80021a0:	2480      	movs	r4, #128	; 0x80
 80021a2:	4313      	orrs	r3, r2
 80021a4:	464a      	mov	r2, r9
 80021a6:	0324      	lsls	r4, r4, #12
 80021a8:	08d2      	lsrs	r2, r2, #3
 80021aa:	4222      	tst	r2, r4
 80021ac:	d007      	beq.n	80021be <__aeabi_dsub+0x62a>
 80021ae:	08fe      	lsrs	r6, r7, #3
 80021b0:	4226      	tst	r6, r4
 80021b2:	d104      	bne.n	80021be <__aeabi_dsub+0x62a>
 80021b4:	465d      	mov	r5, fp
 80021b6:	0032      	movs	r2, r6
 80021b8:	08c3      	lsrs	r3, r0, #3
 80021ba:	077f      	lsls	r7, r7, #29
 80021bc:	433b      	orrs	r3, r7
 80021be:	0f59      	lsrs	r1, r3, #29
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	0749      	lsls	r1, r1, #29
 80021c4:	08db      	lsrs	r3, r3, #3
 80021c6:	430b      	orrs	r3, r1
 80021c8:	e6a6      	b.n	8001f18 <__aeabi_dsub+0x384>
 80021ca:	1ac4      	subs	r4, r0, r3
 80021cc:	42a0      	cmp	r0, r4
 80021ce:	4180      	sbcs	r0, r0
 80021d0:	464b      	mov	r3, r9
 80021d2:	4240      	negs	r0, r0
 80021d4:	1aff      	subs	r7, r7, r3
 80021d6:	1a3b      	subs	r3, r7, r0
 80021d8:	469a      	mov	sl, r3
 80021da:	465d      	mov	r5, fp
 80021dc:	2601      	movs	r6, #1
 80021de:	e533      	b.n	8001c48 <__aeabi_dsub+0xb4>
 80021e0:	003b      	movs	r3, r7
 80021e2:	4303      	orrs	r3, r0
 80021e4:	d100      	bne.n	80021e8 <__aeabi_dsub+0x654>
 80021e6:	e715      	b.n	8002014 <__aeabi_dsub+0x480>
 80021e8:	08c0      	lsrs	r0, r0, #3
 80021ea:	077b      	lsls	r3, r7, #29
 80021ec:	465d      	mov	r5, fp
 80021ee:	4303      	orrs	r3, r0
 80021f0:	08fa      	lsrs	r2, r7, #3
 80021f2:	e666      	b.n	8001ec2 <__aeabi_dsub+0x32e>
 80021f4:	08c0      	lsrs	r0, r0, #3
 80021f6:	077b      	lsls	r3, r7, #29
 80021f8:	4303      	orrs	r3, r0
 80021fa:	08fa      	lsrs	r2, r7, #3
 80021fc:	e65e      	b.n	8001ebc <__aeabi_dsub+0x328>
 80021fe:	003a      	movs	r2, r7
 8002200:	08db      	lsrs	r3, r3, #3
 8002202:	4302      	orrs	r2, r0
 8002204:	d100      	bne.n	8002208 <__aeabi_dsub+0x674>
 8002206:	e682      	b.n	8001f0e <__aeabi_dsub+0x37a>
 8002208:	464a      	mov	r2, r9
 800220a:	0752      	lsls	r2, r2, #29
 800220c:	2480      	movs	r4, #128	; 0x80
 800220e:	4313      	orrs	r3, r2
 8002210:	464a      	mov	r2, r9
 8002212:	0324      	lsls	r4, r4, #12
 8002214:	08d2      	lsrs	r2, r2, #3
 8002216:	4222      	tst	r2, r4
 8002218:	d007      	beq.n	800222a <__aeabi_dsub+0x696>
 800221a:	08fe      	lsrs	r6, r7, #3
 800221c:	4226      	tst	r6, r4
 800221e:	d104      	bne.n	800222a <__aeabi_dsub+0x696>
 8002220:	465d      	mov	r5, fp
 8002222:	0032      	movs	r2, r6
 8002224:	08c3      	lsrs	r3, r0, #3
 8002226:	077f      	lsls	r7, r7, #29
 8002228:	433b      	orrs	r3, r7
 800222a:	0f59      	lsrs	r1, r3, #29
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	08db      	lsrs	r3, r3, #3
 8002230:	0749      	lsls	r1, r1, #29
 8002232:	430b      	orrs	r3, r1
 8002234:	e670      	b.n	8001f18 <__aeabi_dsub+0x384>
 8002236:	08c0      	lsrs	r0, r0, #3
 8002238:	077b      	lsls	r3, r7, #29
 800223a:	4303      	orrs	r3, r0
 800223c:	08fa      	lsrs	r2, r7, #3
 800223e:	e640      	b.n	8001ec2 <__aeabi_dsub+0x32e>
 8002240:	464c      	mov	r4, r9
 8002242:	3920      	subs	r1, #32
 8002244:	40cc      	lsrs	r4, r1
 8002246:	4661      	mov	r1, ip
 8002248:	2920      	cmp	r1, #32
 800224a:	d006      	beq.n	800225a <__aeabi_dsub+0x6c6>
 800224c:	4666      	mov	r6, ip
 800224e:	2140      	movs	r1, #64	; 0x40
 8002250:	1b89      	subs	r1, r1, r6
 8002252:	464e      	mov	r6, r9
 8002254:	408e      	lsls	r6, r1
 8002256:	4333      	orrs	r3, r6
 8002258:	4698      	mov	r8, r3
 800225a:	4643      	mov	r3, r8
 800225c:	1e59      	subs	r1, r3, #1
 800225e:	418b      	sbcs	r3, r1
 8002260:	431c      	orrs	r4, r3
 8002262:	e5d8      	b.n	8001e16 <__aeabi_dsub+0x282>
 8002264:	181c      	adds	r4, r3, r0
 8002266:	4284      	cmp	r4, r0
 8002268:	4180      	sbcs	r0, r0
 800226a:	444f      	add	r7, r9
 800226c:	46ba      	mov	sl, r7
 800226e:	4240      	negs	r0, r0
 8002270:	4482      	add	sl, r0
 8002272:	e6d9      	b.n	8002028 <__aeabi_dsub+0x494>
 8002274:	4653      	mov	r3, sl
 8002276:	4323      	orrs	r3, r4
 8002278:	d100      	bne.n	800227c <__aeabi_dsub+0x6e8>
 800227a:	e6cb      	b.n	8002014 <__aeabi_dsub+0x480>
 800227c:	e614      	b.n	8001ea8 <__aeabi_dsub+0x314>
 800227e:	46c0      	nop			; (mov r8, r8)
 8002280:	000007ff 	.word	0x000007ff
 8002284:	ff7fffff 	.word	0xff7fffff
 8002288:	000007fe 	.word	0x000007fe
 800228c:	2300      	movs	r3, #0
 800228e:	4a01      	ldr	r2, [pc, #4]	; (8002294 <__aeabi_dsub+0x700>)
 8002290:	001c      	movs	r4, r3
 8002292:	e529      	b.n	8001ce8 <__aeabi_dsub+0x154>
 8002294:	000007ff 	.word	0x000007ff

08002298 <__aeabi_dcmpun>:
 8002298:	b570      	push	{r4, r5, r6, lr}
 800229a:	0005      	movs	r5, r0
 800229c:	480c      	ldr	r0, [pc, #48]	; (80022d0 <__aeabi_dcmpun+0x38>)
 800229e:	031c      	lsls	r4, r3, #12
 80022a0:	0016      	movs	r6, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	030a      	lsls	r2, r1, #12
 80022a6:	0049      	lsls	r1, r1, #1
 80022a8:	0b12      	lsrs	r2, r2, #12
 80022aa:	0d49      	lsrs	r1, r1, #21
 80022ac:	0b24      	lsrs	r4, r4, #12
 80022ae:	0d5b      	lsrs	r3, r3, #21
 80022b0:	4281      	cmp	r1, r0
 80022b2:	d008      	beq.n	80022c6 <__aeabi_dcmpun+0x2e>
 80022b4:	4a06      	ldr	r2, [pc, #24]	; (80022d0 <__aeabi_dcmpun+0x38>)
 80022b6:	2000      	movs	r0, #0
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d103      	bne.n	80022c4 <__aeabi_dcmpun+0x2c>
 80022bc:	0020      	movs	r0, r4
 80022be:	4330      	orrs	r0, r6
 80022c0:	1e43      	subs	r3, r0, #1
 80022c2:	4198      	sbcs	r0, r3
 80022c4:	bd70      	pop	{r4, r5, r6, pc}
 80022c6:	2001      	movs	r0, #1
 80022c8:	432a      	orrs	r2, r5
 80022ca:	d1fb      	bne.n	80022c4 <__aeabi_dcmpun+0x2c>
 80022cc:	e7f2      	b.n	80022b4 <__aeabi_dcmpun+0x1c>
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	000007ff 	.word	0x000007ff

080022d4 <__aeabi_d2iz>:
 80022d4:	000a      	movs	r2, r1
 80022d6:	b530      	push	{r4, r5, lr}
 80022d8:	4c13      	ldr	r4, [pc, #76]	; (8002328 <__aeabi_d2iz+0x54>)
 80022da:	0053      	lsls	r3, r2, #1
 80022dc:	0309      	lsls	r1, r1, #12
 80022de:	0005      	movs	r5, r0
 80022e0:	0b09      	lsrs	r1, r1, #12
 80022e2:	2000      	movs	r0, #0
 80022e4:	0d5b      	lsrs	r3, r3, #21
 80022e6:	0fd2      	lsrs	r2, r2, #31
 80022e8:	42a3      	cmp	r3, r4
 80022ea:	dd04      	ble.n	80022f6 <__aeabi_d2iz+0x22>
 80022ec:	480f      	ldr	r0, [pc, #60]	; (800232c <__aeabi_d2iz+0x58>)
 80022ee:	4283      	cmp	r3, r0
 80022f0:	dd02      	ble.n	80022f8 <__aeabi_d2iz+0x24>
 80022f2:	4b0f      	ldr	r3, [pc, #60]	; (8002330 <__aeabi_d2iz+0x5c>)
 80022f4:	18d0      	adds	r0, r2, r3
 80022f6:	bd30      	pop	{r4, r5, pc}
 80022f8:	2080      	movs	r0, #128	; 0x80
 80022fa:	0340      	lsls	r0, r0, #13
 80022fc:	4301      	orrs	r1, r0
 80022fe:	480d      	ldr	r0, [pc, #52]	; (8002334 <__aeabi_d2iz+0x60>)
 8002300:	1ac0      	subs	r0, r0, r3
 8002302:	281f      	cmp	r0, #31
 8002304:	dd08      	ble.n	8002318 <__aeabi_d2iz+0x44>
 8002306:	480c      	ldr	r0, [pc, #48]	; (8002338 <__aeabi_d2iz+0x64>)
 8002308:	1ac3      	subs	r3, r0, r3
 800230a:	40d9      	lsrs	r1, r3
 800230c:	000b      	movs	r3, r1
 800230e:	4258      	negs	r0, r3
 8002310:	2a00      	cmp	r2, #0
 8002312:	d1f0      	bne.n	80022f6 <__aeabi_d2iz+0x22>
 8002314:	0018      	movs	r0, r3
 8002316:	e7ee      	b.n	80022f6 <__aeabi_d2iz+0x22>
 8002318:	4c08      	ldr	r4, [pc, #32]	; (800233c <__aeabi_d2iz+0x68>)
 800231a:	40c5      	lsrs	r5, r0
 800231c:	46a4      	mov	ip, r4
 800231e:	4463      	add	r3, ip
 8002320:	4099      	lsls	r1, r3
 8002322:	000b      	movs	r3, r1
 8002324:	432b      	orrs	r3, r5
 8002326:	e7f2      	b.n	800230e <__aeabi_d2iz+0x3a>
 8002328:	000003fe 	.word	0x000003fe
 800232c:	0000041d 	.word	0x0000041d
 8002330:	7fffffff 	.word	0x7fffffff
 8002334:	00000433 	.word	0x00000433
 8002338:	00000413 	.word	0x00000413
 800233c:	fffffbed 	.word	0xfffffbed

08002340 <__aeabi_i2d>:
 8002340:	b570      	push	{r4, r5, r6, lr}
 8002342:	2800      	cmp	r0, #0
 8002344:	d016      	beq.n	8002374 <__aeabi_i2d+0x34>
 8002346:	17c3      	asrs	r3, r0, #31
 8002348:	18c5      	adds	r5, r0, r3
 800234a:	405d      	eors	r5, r3
 800234c:	0fc4      	lsrs	r4, r0, #31
 800234e:	0028      	movs	r0, r5
 8002350:	f000 f8d2 	bl	80024f8 <__clzsi2>
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <__aeabi_i2d+0x5c>)
 8002356:	1a1b      	subs	r3, r3, r0
 8002358:	280a      	cmp	r0, #10
 800235a:	dc16      	bgt.n	800238a <__aeabi_i2d+0x4a>
 800235c:	0002      	movs	r2, r0
 800235e:	002e      	movs	r6, r5
 8002360:	3215      	adds	r2, #21
 8002362:	4096      	lsls	r6, r2
 8002364:	220b      	movs	r2, #11
 8002366:	1a12      	subs	r2, r2, r0
 8002368:	40d5      	lsrs	r5, r2
 800236a:	055b      	lsls	r3, r3, #21
 800236c:	032d      	lsls	r5, r5, #12
 800236e:	0b2d      	lsrs	r5, r5, #12
 8002370:	0d5b      	lsrs	r3, r3, #21
 8002372:	e003      	b.n	800237c <__aeabi_i2d+0x3c>
 8002374:	2400      	movs	r4, #0
 8002376:	2300      	movs	r3, #0
 8002378:	2500      	movs	r5, #0
 800237a:	2600      	movs	r6, #0
 800237c:	051b      	lsls	r3, r3, #20
 800237e:	432b      	orrs	r3, r5
 8002380:	07e4      	lsls	r4, r4, #31
 8002382:	4323      	orrs	r3, r4
 8002384:	0030      	movs	r0, r6
 8002386:	0019      	movs	r1, r3
 8002388:	bd70      	pop	{r4, r5, r6, pc}
 800238a:	380b      	subs	r0, #11
 800238c:	4085      	lsls	r5, r0
 800238e:	055b      	lsls	r3, r3, #21
 8002390:	032d      	lsls	r5, r5, #12
 8002392:	2600      	movs	r6, #0
 8002394:	0b2d      	lsrs	r5, r5, #12
 8002396:	0d5b      	lsrs	r3, r3, #21
 8002398:	e7f0      	b.n	800237c <__aeabi_i2d+0x3c>
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	0000041e 	.word	0x0000041e

080023a0 <__aeabi_ui2d>:
 80023a0:	b510      	push	{r4, lr}
 80023a2:	1e04      	subs	r4, r0, #0
 80023a4:	d010      	beq.n	80023c8 <__aeabi_ui2d+0x28>
 80023a6:	f000 f8a7 	bl	80024f8 <__clzsi2>
 80023aa:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <__aeabi_ui2d+0x48>)
 80023ac:	1a1b      	subs	r3, r3, r0
 80023ae:	280a      	cmp	r0, #10
 80023b0:	dc11      	bgt.n	80023d6 <__aeabi_ui2d+0x36>
 80023b2:	220b      	movs	r2, #11
 80023b4:	0021      	movs	r1, r4
 80023b6:	1a12      	subs	r2, r2, r0
 80023b8:	40d1      	lsrs	r1, r2
 80023ba:	3015      	adds	r0, #21
 80023bc:	030a      	lsls	r2, r1, #12
 80023be:	055b      	lsls	r3, r3, #21
 80023c0:	4084      	lsls	r4, r0
 80023c2:	0b12      	lsrs	r2, r2, #12
 80023c4:	0d5b      	lsrs	r3, r3, #21
 80023c6:	e001      	b.n	80023cc <__aeabi_ui2d+0x2c>
 80023c8:	2300      	movs	r3, #0
 80023ca:	2200      	movs	r2, #0
 80023cc:	051b      	lsls	r3, r3, #20
 80023ce:	4313      	orrs	r3, r2
 80023d0:	0020      	movs	r0, r4
 80023d2:	0019      	movs	r1, r3
 80023d4:	bd10      	pop	{r4, pc}
 80023d6:	0022      	movs	r2, r4
 80023d8:	380b      	subs	r0, #11
 80023da:	4082      	lsls	r2, r0
 80023dc:	055b      	lsls	r3, r3, #21
 80023de:	0312      	lsls	r2, r2, #12
 80023e0:	2400      	movs	r4, #0
 80023e2:	0b12      	lsrs	r2, r2, #12
 80023e4:	0d5b      	lsrs	r3, r3, #21
 80023e6:	e7f1      	b.n	80023cc <__aeabi_ui2d+0x2c>
 80023e8:	0000041e 	.word	0x0000041e

080023ec <__aeabi_d2f>:
 80023ec:	0002      	movs	r2, r0
 80023ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023f0:	004b      	lsls	r3, r1, #1
 80023f2:	030d      	lsls	r5, r1, #12
 80023f4:	0f40      	lsrs	r0, r0, #29
 80023f6:	0d5b      	lsrs	r3, r3, #21
 80023f8:	0fcc      	lsrs	r4, r1, #31
 80023fa:	0a6d      	lsrs	r5, r5, #9
 80023fc:	493a      	ldr	r1, [pc, #232]	; (80024e8 <__aeabi_d2f+0xfc>)
 80023fe:	4305      	orrs	r5, r0
 8002400:	1c58      	adds	r0, r3, #1
 8002402:	00d7      	lsls	r7, r2, #3
 8002404:	4208      	tst	r0, r1
 8002406:	d00a      	beq.n	800241e <__aeabi_d2f+0x32>
 8002408:	4938      	ldr	r1, [pc, #224]	; (80024ec <__aeabi_d2f+0x100>)
 800240a:	1859      	adds	r1, r3, r1
 800240c:	29fe      	cmp	r1, #254	; 0xfe
 800240e:	dd16      	ble.n	800243e <__aeabi_d2f+0x52>
 8002410:	20ff      	movs	r0, #255	; 0xff
 8002412:	2200      	movs	r2, #0
 8002414:	05c0      	lsls	r0, r0, #23
 8002416:	4310      	orrs	r0, r2
 8002418:	07e4      	lsls	r4, r4, #31
 800241a:	4320      	orrs	r0, r4
 800241c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800241e:	2b00      	cmp	r3, #0
 8002420:	d106      	bne.n	8002430 <__aeabi_d2f+0x44>
 8002422:	433d      	orrs	r5, r7
 8002424:	d026      	beq.n	8002474 <__aeabi_d2f+0x88>
 8002426:	2205      	movs	r2, #5
 8002428:	0192      	lsls	r2, r2, #6
 800242a:	0a52      	lsrs	r2, r2, #9
 800242c:	b2d8      	uxtb	r0, r3
 800242e:	e7f1      	b.n	8002414 <__aeabi_d2f+0x28>
 8002430:	432f      	orrs	r7, r5
 8002432:	d0ed      	beq.n	8002410 <__aeabi_d2f+0x24>
 8002434:	2280      	movs	r2, #128	; 0x80
 8002436:	03d2      	lsls	r2, r2, #15
 8002438:	20ff      	movs	r0, #255	; 0xff
 800243a:	432a      	orrs	r2, r5
 800243c:	e7ea      	b.n	8002414 <__aeabi_d2f+0x28>
 800243e:	2900      	cmp	r1, #0
 8002440:	dd1b      	ble.n	800247a <__aeabi_d2f+0x8e>
 8002442:	0192      	lsls	r2, r2, #6
 8002444:	1e50      	subs	r0, r2, #1
 8002446:	4182      	sbcs	r2, r0
 8002448:	00ed      	lsls	r5, r5, #3
 800244a:	0f7f      	lsrs	r7, r7, #29
 800244c:	432a      	orrs	r2, r5
 800244e:	433a      	orrs	r2, r7
 8002450:	0753      	lsls	r3, r2, #29
 8002452:	d047      	beq.n	80024e4 <__aeabi_d2f+0xf8>
 8002454:	230f      	movs	r3, #15
 8002456:	4013      	ands	r3, r2
 8002458:	2b04      	cmp	r3, #4
 800245a:	d000      	beq.n	800245e <__aeabi_d2f+0x72>
 800245c:	3204      	adds	r2, #4
 800245e:	2380      	movs	r3, #128	; 0x80
 8002460:	04db      	lsls	r3, r3, #19
 8002462:	4013      	ands	r3, r2
 8002464:	d03e      	beq.n	80024e4 <__aeabi_d2f+0xf8>
 8002466:	1c48      	adds	r0, r1, #1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	d0d1      	beq.n	8002410 <__aeabi_d2f+0x24>
 800246c:	0192      	lsls	r2, r2, #6
 800246e:	0a52      	lsrs	r2, r2, #9
 8002470:	b2c0      	uxtb	r0, r0
 8002472:	e7cf      	b.n	8002414 <__aeabi_d2f+0x28>
 8002474:	2000      	movs	r0, #0
 8002476:	2200      	movs	r2, #0
 8002478:	e7cc      	b.n	8002414 <__aeabi_d2f+0x28>
 800247a:	000a      	movs	r2, r1
 800247c:	3217      	adds	r2, #23
 800247e:	db2f      	blt.n	80024e0 <__aeabi_d2f+0xf4>
 8002480:	2680      	movs	r6, #128	; 0x80
 8002482:	0436      	lsls	r6, r6, #16
 8002484:	432e      	orrs	r6, r5
 8002486:	251e      	movs	r5, #30
 8002488:	1a6d      	subs	r5, r5, r1
 800248a:	2d1f      	cmp	r5, #31
 800248c:	dd11      	ble.n	80024b2 <__aeabi_d2f+0xc6>
 800248e:	2202      	movs	r2, #2
 8002490:	4252      	negs	r2, r2
 8002492:	1a52      	subs	r2, r2, r1
 8002494:	0031      	movs	r1, r6
 8002496:	40d1      	lsrs	r1, r2
 8002498:	2d20      	cmp	r5, #32
 800249a:	d004      	beq.n	80024a6 <__aeabi_d2f+0xba>
 800249c:	4a14      	ldr	r2, [pc, #80]	; (80024f0 <__aeabi_d2f+0x104>)
 800249e:	4694      	mov	ip, r2
 80024a0:	4463      	add	r3, ip
 80024a2:	409e      	lsls	r6, r3
 80024a4:	4337      	orrs	r7, r6
 80024a6:	003a      	movs	r2, r7
 80024a8:	1e53      	subs	r3, r2, #1
 80024aa:	419a      	sbcs	r2, r3
 80024ac:	430a      	orrs	r2, r1
 80024ae:	2100      	movs	r1, #0
 80024b0:	e7ce      	b.n	8002450 <__aeabi_d2f+0x64>
 80024b2:	4a10      	ldr	r2, [pc, #64]	; (80024f4 <__aeabi_d2f+0x108>)
 80024b4:	0038      	movs	r0, r7
 80024b6:	4694      	mov	ip, r2
 80024b8:	4463      	add	r3, ip
 80024ba:	4098      	lsls	r0, r3
 80024bc:	003a      	movs	r2, r7
 80024be:	1e41      	subs	r1, r0, #1
 80024c0:	4188      	sbcs	r0, r1
 80024c2:	409e      	lsls	r6, r3
 80024c4:	40ea      	lsrs	r2, r5
 80024c6:	4330      	orrs	r0, r6
 80024c8:	4302      	orrs	r2, r0
 80024ca:	2100      	movs	r1, #0
 80024cc:	0753      	lsls	r3, r2, #29
 80024ce:	d1c1      	bne.n	8002454 <__aeabi_d2f+0x68>
 80024d0:	2180      	movs	r1, #128	; 0x80
 80024d2:	0013      	movs	r3, r2
 80024d4:	04c9      	lsls	r1, r1, #19
 80024d6:	2001      	movs	r0, #1
 80024d8:	400b      	ands	r3, r1
 80024da:	420a      	tst	r2, r1
 80024dc:	d1c6      	bne.n	800246c <__aeabi_d2f+0x80>
 80024de:	e7a3      	b.n	8002428 <__aeabi_d2f+0x3c>
 80024e0:	2300      	movs	r3, #0
 80024e2:	e7a0      	b.n	8002426 <__aeabi_d2f+0x3a>
 80024e4:	000b      	movs	r3, r1
 80024e6:	e79f      	b.n	8002428 <__aeabi_d2f+0x3c>
 80024e8:	000007fe 	.word	0x000007fe
 80024ec:	fffffc80 	.word	0xfffffc80
 80024f0:	fffffca2 	.word	0xfffffca2
 80024f4:	fffffc82 	.word	0xfffffc82

080024f8 <__clzsi2>:
 80024f8:	211c      	movs	r1, #28
 80024fa:	2301      	movs	r3, #1
 80024fc:	041b      	lsls	r3, r3, #16
 80024fe:	4298      	cmp	r0, r3
 8002500:	d301      	bcc.n	8002506 <__clzsi2+0xe>
 8002502:	0c00      	lsrs	r0, r0, #16
 8002504:	3910      	subs	r1, #16
 8002506:	0a1b      	lsrs	r3, r3, #8
 8002508:	4298      	cmp	r0, r3
 800250a:	d301      	bcc.n	8002510 <__clzsi2+0x18>
 800250c:	0a00      	lsrs	r0, r0, #8
 800250e:	3908      	subs	r1, #8
 8002510:	091b      	lsrs	r3, r3, #4
 8002512:	4298      	cmp	r0, r3
 8002514:	d301      	bcc.n	800251a <__clzsi2+0x22>
 8002516:	0900      	lsrs	r0, r0, #4
 8002518:	3904      	subs	r1, #4
 800251a:	a202      	add	r2, pc, #8	; (adr r2, 8002524 <__clzsi2+0x2c>)
 800251c:	5c10      	ldrb	r0, [r2, r0]
 800251e:	1840      	adds	r0, r0, r1
 8002520:	4770      	bx	lr
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	02020304 	.word	0x02020304
 8002528:	01010101 	.word	0x01010101
	...

08002534 <__clzdi2>:
 8002534:	b510      	push	{r4, lr}
 8002536:	2900      	cmp	r1, #0
 8002538:	d103      	bne.n	8002542 <__clzdi2+0xe>
 800253a:	f7ff ffdd 	bl	80024f8 <__clzsi2>
 800253e:	3020      	adds	r0, #32
 8002540:	e002      	b.n	8002548 <__clzdi2+0x14>
 8002542:	0008      	movs	r0, r1
 8002544:	f7ff ffd8 	bl	80024f8 <__clzsi2>
 8002548:	bd10      	pop	{r4, pc}
 800254a:	46c0      	nop			; (mov r8, r8)

0800254c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800254c:	b5b0      	push	{r4, r5, r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002550:	f000 fe32 	bl	80031b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002554:	f000 f8c8 	bl	80026e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002558:	f000 fa5c 	bl	8002a14 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800255c:	f000 f9d8 	bl	8002910 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8002560:	f000 f988 	bl	8002874 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002564:	f000 fa22 	bl	80029ac <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8002568:	f000 f906 	bl	8002778 <MX_I2C1_Init>
  MX_TIM6_Init();
 800256c:	f000 f944 	bl	80027f8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit ( &huart2 , (uint8_t*) hello , strlen (hello) , UART_TIMEOUT ) ;
 8002570:	4b4f      	ldr	r3, [pc, #316]	; (80026b0 <main+0x164>)
 8002572:	681c      	ldr	r4, [r3, #0]
 8002574:	4b4e      	ldr	r3, [pc, #312]	; (80026b0 <main+0x164>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	0018      	movs	r0, r3
 800257a:	f7fd fdc3 	bl	8000104 <strlen>
 800257e:	0003      	movs	r3, r0
 8002580:	b29a      	uxth	r2, r3
 8002582:	23fa      	movs	r3, #250	; 0xfa
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	484b      	ldr	r0, [pc, #300]	; (80026b4 <main+0x168>)
 8002588:	0021      	movs	r1, r4
 800258a:	f002 fd91 	bl	80050b0 <HAL_UART_Transmit>
  __HAL_TIM_CLEAR_IT ( &htim6 , TIM_IT_UPDATE ) ;
 800258e:	4b4a      	ldr	r3, [pc, #296]	; (80026b8 <main+0x16c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2202      	movs	r2, #2
 8002594:	4252      	negs	r2, r2
 8002596:	611a      	str	r2, [r3, #16]
  my_astro_off () ;
 8002598:	f000 fad6 	bl	8002b48 <my_astro_off>
  astronode_send_mpn_rr () ;
  astronode_send_msn_rr () ;
  astronode_send_mgi_rr () ;
  my_astro_off () ;
  */
  my_lx6_on () ;
 800259c:	f000 fae6 	bl	8002b6c <my_lx6_on>
  my_ldg_on () ;
 80025a0:	f000 fac6 	bl	8002b30 <my_ldg_on>
  fix_quality = 0 ;
 80025a4:	4b45      	ldr	r3, [pc, #276]	; (80026bc <main+0x170>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	701a      	strb	r2, [r3, #0]
  can_see_nmea_rmc_flag = false ;
 80025aa:	4b45      	ldr	r3, [pc, #276]	; (80026c0 <main+0x174>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	701a      	strb	r2, [r3, #0]
  tim_seconds = 0 ;
 80025b0:	4b44      	ldr	r3, [pc, #272]	; (80026c4 <main+0x178>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT ( &htim6 ) ;
 80025b6:	4b40      	ldr	r3, [pc, #256]	; (80026b8 <main+0x16c>)
 80025b8:	0018      	movs	r0, r3
 80025ba:	f002 fa01 	bl	80049c0 <HAL_TIM_Base_Start_IT>
  while ( tim_seconds < 1200 )
 80025be:	e069      	b.n	8002694 <main+0x148>
  {
	  //HAL_UART_Receive ( HUART_Lx6 , &rxd_byte , 1 , UART_TIMEOUT ) ;
	  HAL_UART_Receive ( HUART_DBG , &rxd_byte , 1 , UART_TIMEOUT ) ; // Receive nmea from DBG "sim_nmea_uart" python script
 80025c0:	23fa      	movs	r3, #250	; 0xfa
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4940      	ldr	r1, [pc, #256]	; (80026c8 <main+0x17c>)
 80025c6:	483b      	ldr	r0, [pc, #236]	; (80026b4 <main+0x168>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	f002 fe0d 	bl	80051e8 <HAL_UART_Receive>
	  HAL_UART_Transmit ( HUART_DBG , &rxd_byte , 1 , UART_TIMEOUT ) ; // Transmit all nmea to DBG
 80025ce:	23fa      	movs	r3, #250	; 0xfa
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	493d      	ldr	r1, [pc, #244]	; (80026c8 <main+0x17c>)
 80025d4:	4837      	ldr	r0, [pc, #220]	; (80026b4 <main+0x168>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	f002 fd6a 	bl	80050b0 <HAL_UART_Transmit>
	  if ( rxd_byte )
 80025dc:	4b3a      	ldr	r3, [pc, #232]	; (80026c8 <main+0x17c>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d049      	beq.n	8002678 <main+0x12c>
	  {
		  if ( my_nmea_message ( &rxd_byte , nmea_message , &i_nmea ) == 2 )
 80025e4:	4a39      	ldr	r2, [pc, #228]	; (80026cc <main+0x180>)
 80025e6:	493a      	ldr	r1, [pc, #232]	; (80026d0 <main+0x184>)
 80025e8:	4b37      	ldr	r3, [pc, #220]	; (80026c8 <main+0x17c>)
 80025ea:	0018      	movs	r0, r3
 80025ec:	f003 fcd7 	bl	8005f9e <my_nmea_message>
 80025f0:	0003      	movs	r3, r0
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d140      	bne.n	8002678 <main+0x12c>
		  {
			  if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 80025f6:	4b36      	ldr	r3, [pc, #216]	; (80026d0 <main+0x184>)
 80025f8:	0018      	movs	r0, r3
 80025fa:	f003 fd90 	bl	800611e <is_my_nmea_checksum_ok>
 80025fe:	1e03      	subs	r3, r0, #0
 8002600:	d03a      	beq.n	8002678 <main+0x12c>
			  {
				  if ( strstr ( (char*) nmea_message , nmea_rmc_label ) )
 8002602:	4b34      	ldr	r3, [pc, #208]	; (80026d4 <main+0x188>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	4b32      	ldr	r3, [pc, #200]	; (80026d0 <main+0x184>)
 8002608:	0011      	movs	r1, r2
 800260a:	0018      	movs	r0, r3
 800260c:	f005 fd4b 	bl	80080a6 <strstr>
 8002610:	1e03      	subs	r3, r0, #0
 8002612:	d003      	beq.n	800261c <main+0xd0>
				  {
					  can_see_nmea_rmc_flag = true ;
 8002614:	4b2a      	ldr	r3, [pc, #168]	; (80026c0 <main+0x174>)
 8002616:	2201      	movs	r2, #1
 8002618:	701a      	strb	r2, [r3, #0]
					  __NOP();
 800261a:	46c0      	nop			; (mov r8, r8)
				  }
				  if ( strstr ( (char*) nmea_message , nmea_gngsa_label ) )
 800261c:	4b2e      	ldr	r3, [pc, #184]	; (80026d8 <main+0x18c>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	4b2b      	ldr	r3, [pc, #172]	; (80026d0 <main+0x184>)
 8002622:	0011      	movs	r1, r2
 8002624:	0018      	movs	r0, r3
 8002626:	f005 fd3e 	bl	80080a6 <strstr>
 800262a:	1e03      	subs	r3, r0, #0
 800262c:	d024      	beq.n	8002678 <main+0x12c>
				  {
					  nmea_fixed_mode_s = get_my_nmea_gngsa_fixed_mode_s ( (char*) nmea_message ) ;
 800262e:	4b28      	ldr	r3, [pc, #160]	; (80026d0 <main+0x184>)
 8002630:	0018      	movs	r0, r3
 8002632:	f003 fd20 	bl	8006076 <get_my_nmea_gngsa_fixed_mode_s>
 8002636:	0003      	movs	r3, r0
 8002638:	001a      	movs	r2, r3
 800263a:	4b28      	ldr	r3, [pc, #160]	; (80026dc <main+0x190>)
 800263c:	701a      	strb	r2, [r3, #0]
					  nmea_fixed_pdop_d = get_my_nmea_gngsa_pdop_d ( (char*) nmea_message ) ;
 800263e:	4b24      	ldr	r3, [pc, #144]	; (80026d0 <main+0x184>)
 8002640:	0018      	movs	r0, r3
 8002642:	f003 fd23 	bl	800608c <get_my_nmea_gngsa_pdop_d>
 8002646:	0002      	movs	r2, r0
 8002648:	000b      	movs	r3, r1
 800264a:	4925      	ldr	r1, [pc, #148]	; (80026e0 <main+0x194>)
 800264c:	600a      	str	r2, [r1, #0]
 800264e:	604b      	str	r3, [r1, #4]
					  if ( nmea_fixed_mode_s == NMEA_3D_FIX )
 8002650:	4b22      	ldr	r3, [pc, #136]	; (80026dc <main+0x190>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b33      	cmp	r3, #51	; 0x33
 8002656:	d10f      	bne.n	8002678 <main+0x12c>
					  {
						  if ( nmea_fixed_pdop_d <= NMEA_PDOP_MIN_THS_D )
 8002658:	4b21      	ldr	r3, [pc, #132]	; (80026e0 <main+0x194>)
 800265a:	6818      	ldr	r0, [r3, #0]
 800265c:	6859      	ldr	r1, [r3, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	4b20      	ldr	r3, [pc, #128]	; (80026e4 <main+0x198>)
 8002662:	f7fd ff01 	bl	8000468 <__aeabi_dcmple>
 8002666:	1e03      	subs	r3, r0, #0
 8002668:	d003      	beq.n	8002672 <main+0x126>
						  {
							  fix_quality = 2 ;
 800266a:	4b14      	ldr	r3, [pc, #80]	; (80026bc <main+0x170>)
 800266c:	2202      	movs	r2, #2
 800266e:	701a      	strb	r2, [r3, #0]
 8002670:	e002      	b.n	8002678 <main+0x12c>
						  }
						  else
						  {
							  fix_quality = 1 ;
 8002672:	4b12      	ldr	r3, [pc, #72]	; (80026bc <main+0x170>)
 8002674:	2201      	movs	r2, #1
 8002676:	701a      	strb	r2, [r3, #0]
				  }
				  */
			  }
		  }
	  }
	  rxd_byte = 0 ;
 8002678:	4b13      	ldr	r3, [pc, #76]	; (80026c8 <main+0x17c>)
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]
	  if ( tim_seconds > 10 && !can_see_nmea_rmc_flag )
 800267e:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <main+0x178>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2b0a      	cmp	r3, #10
 8002684:	d906      	bls.n	8002694 <main+0x148>
 8002686:	4b0e      	ldr	r3, [pc, #56]	; (80026c0 <main+0x174>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2201      	movs	r2, #1
 800268c:	4053      	eors	r3, r2
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b00      	cmp	r3, #0
 8002692:	d106      	bne.n	80026a2 <main+0x156>
  while ( tim_seconds < 1200 )
 8002694:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <main+0x178>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	2396      	movs	r3, #150	; 0x96
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	429a      	cmp	r2, r3
 800269e:	d38f      	bcc.n	80025c0 <main+0x74>
 80026a0:	e000      	b.n	80026a4 <main+0x158>
	  {
		  break ;
 80026a2:	46c0      	nop			; (mov r8, r8)
	  }
  }
  HAL_TIM_Base_Stop_IT ( &htim6 ) ;
 80026a4:	4b04      	ldr	r3, [pc, #16]	; (80026b8 <main+0x16c>)
 80026a6:	0018      	movs	r0, r3
 80026a8:	f002 f9e6 	bl	8004a78 <HAL_TIM_Base_Stop_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80026ac:	e7fe      	b.n	80026ac <main+0x160>
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	20000000 	.word	0x20000000
 80026b4:	20000330 	.word	0x20000330
 80026b8:	20000250 	.word	0x20000250
 80026bc:	20000557 	.word	0x20000557
 80026c0:	2000056c 	.word	0x2000056c
 80026c4:	20000568 	.word	0x20000568
 80026c8:	20000458 	.word	0x20000458
 80026cc:	20000556 	.word	0x20000556
 80026d0:	2000045c 	.word	0x2000045c
 80026d4:	20000008 	.word	0x20000008
 80026d8:	20000004 	.word	0x20000004
 80026dc:	20000558 	.word	0x20000558
 80026e0:	20000560 	.word	0x20000560
 80026e4:	40140000 	.word	0x40140000

080026e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026e8:	b590      	push	{r4, r7, lr}
 80026ea:	b093      	sub	sp, #76	; 0x4c
 80026ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026ee:	2410      	movs	r4, #16
 80026f0:	193b      	adds	r3, r7, r4
 80026f2:	0018      	movs	r0, r3
 80026f4:	2338      	movs	r3, #56	; 0x38
 80026f6:	001a      	movs	r2, r3
 80026f8:	2100      	movs	r1, #0
 80026fa:	f005 fca7 	bl	800804c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026fe:	003b      	movs	r3, r7
 8002700:	0018      	movs	r0, r3
 8002702:	2310      	movs	r3, #16
 8002704:	001a      	movs	r2, r3
 8002706:	2100      	movs	r1, #0
 8002708:	f005 fca0 	bl	800804c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800270c:	2380      	movs	r3, #128	; 0x80
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	0018      	movs	r0, r3
 8002712:	f001 fa35 	bl	8003b80 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002716:	193b      	adds	r3, r7, r4
 8002718:	2202      	movs	r2, #2
 800271a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800271c:	193b      	adds	r3, r7, r4
 800271e:	2280      	movs	r2, #128	; 0x80
 8002720:	0052      	lsls	r2, r2, #1
 8002722:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002724:	193b      	adds	r3, r7, r4
 8002726:	2200      	movs	r2, #0
 8002728:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800272a:	193b      	adds	r3, r7, r4
 800272c:	2240      	movs	r2, #64	; 0x40
 800272e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002730:	193b      	adds	r3, r7, r4
 8002732:	2200      	movs	r2, #0
 8002734:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002736:	193b      	adds	r3, r7, r4
 8002738:	0018      	movs	r0, r3
 800273a:	f001 fa6d 	bl	8003c18 <HAL_RCC_OscConfig>
 800273e:	1e03      	subs	r3, r0, #0
 8002740:	d001      	beq.n	8002746 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002742:	f000 fa41 	bl	8002bc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002746:	003b      	movs	r3, r7
 8002748:	2207      	movs	r2, #7
 800274a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800274c:	003b      	movs	r3, r7
 800274e:	2200      	movs	r2, #0
 8002750:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002752:	003b      	movs	r3, r7
 8002754:	2200      	movs	r2, #0
 8002756:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002758:	003b      	movs	r3, r7
 800275a:	2200      	movs	r2, #0
 800275c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800275e:	003b      	movs	r3, r7
 8002760:	2100      	movs	r1, #0
 8002762:	0018      	movs	r0, r3
 8002764:	f001 fd72 	bl	800424c <HAL_RCC_ClockConfig>
 8002768:	1e03      	subs	r3, r0, #0
 800276a:	d001      	beq.n	8002770 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800276c:	f000 fa2c 	bl	8002bc8 <Error_Handler>
  }
}
 8002770:	46c0      	nop			; (mov r8, r8)
 8002772:	46bd      	mov	sp, r7
 8002774:	b013      	add	sp, #76	; 0x4c
 8002776:	bd90      	pop	{r4, r7, pc}

08002778 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800277c:	4b1b      	ldr	r3, [pc, #108]	; (80027ec <MX_I2C1_Init+0x74>)
 800277e:	4a1c      	ldr	r2, [pc, #112]	; (80027f0 <MX_I2C1_Init+0x78>)
 8002780:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8002782:	4b1a      	ldr	r3, [pc, #104]	; (80027ec <MX_I2C1_Init+0x74>)
 8002784:	4a1b      	ldr	r2, [pc, #108]	; (80027f4 <MX_I2C1_Init+0x7c>)
 8002786:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002788:	4b18      	ldr	r3, [pc, #96]	; (80027ec <MX_I2C1_Init+0x74>)
 800278a:	2200      	movs	r2, #0
 800278c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800278e:	4b17      	ldr	r3, [pc, #92]	; (80027ec <MX_I2C1_Init+0x74>)
 8002790:	2201      	movs	r2, #1
 8002792:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002794:	4b15      	ldr	r3, [pc, #84]	; (80027ec <MX_I2C1_Init+0x74>)
 8002796:	2200      	movs	r2, #0
 8002798:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800279a:	4b14      	ldr	r3, [pc, #80]	; (80027ec <MX_I2C1_Init+0x74>)
 800279c:	2200      	movs	r2, #0
 800279e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80027a0:	4b12      	ldr	r3, [pc, #72]	; (80027ec <MX_I2C1_Init+0x74>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027a6:	4b11      	ldr	r3, [pc, #68]	; (80027ec <MX_I2C1_Init+0x74>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027ac:	4b0f      	ldr	r3, [pc, #60]	; (80027ec <MX_I2C1_Init+0x74>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027b2:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <MX_I2C1_Init+0x74>)
 80027b4:	0018      	movs	r0, r3
 80027b6:	f001 f8b5 	bl	8003924 <HAL_I2C_Init>
 80027ba:	1e03      	subs	r3, r0, #0
 80027bc:	d001      	beq.n	80027c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80027be:	f000 fa03 	bl	8002bc8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027c2:	4b0a      	ldr	r3, [pc, #40]	; (80027ec <MX_I2C1_Init+0x74>)
 80027c4:	2100      	movs	r1, #0
 80027c6:	0018      	movs	r0, r3
 80027c8:	f001 f942 	bl	8003a50 <HAL_I2CEx_ConfigAnalogFilter>
 80027cc:	1e03      	subs	r3, r0, #0
 80027ce:	d001      	beq.n	80027d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80027d0:	f000 f9fa 	bl	8002bc8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <MX_I2C1_Init+0x74>)
 80027d6:	2100      	movs	r1, #0
 80027d8:	0018      	movs	r0, r3
 80027da:	f001 f985 	bl	8003ae8 <HAL_I2CEx_ConfigDigitalFilter>
 80027de:	1e03      	subs	r3, r0, #0
 80027e0:	d001      	beq.n	80027e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80027e2:	f000 f9f1 	bl	8002bc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027e6:	46c0      	nop			; (mov r8, r8)
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	200001fc 	.word	0x200001fc
 80027f0:	40005400 	.word	0x40005400
 80027f4:	00303d5b 	.word	0x00303d5b

080027f8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027fe:	1d3b      	adds	r3, r7, #4
 8002800:	0018      	movs	r0, r3
 8002802:	230c      	movs	r3, #12
 8002804:	001a      	movs	r2, r3
 8002806:	2100      	movs	r1, #0
 8002808:	f005 fc20 	bl	800804c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800280c:	4b15      	ldr	r3, [pc, #84]	; (8002864 <MX_TIM6_Init+0x6c>)
 800280e:	4a16      	ldr	r2, [pc, #88]	; (8002868 <MX_TIM6_Init+0x70>)
 8002810:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8002812:	4b14      	ldr	r3, [pc, #80]	; (8002864 <MX_TIM6_Init+0x6c>)
 8002814:	4a15      	ldr	r2, [pc, #84]	; (800286c <MX_TIM6_Init+0x74>)
 8002816:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002818:	4b12      	ldr	r3, [pc, #72]	; (8002864 <MX_TIM6_Init+0x6c>)
 800281a:	2200      	movs	r2, #0
 800281c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800281e:	4b11      	ldr	r3, [pc, #68]	; (8002864 <MX_TIM6_Init+0x6c>)
 8002820:	4a13      	ldr	r2, [pc, #76]	; (8002870 <MX_TIM6_Init+0x78>)
 8002822:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002824:	4b0f      	ldr	r3, [pc, #60]	; (8002864 <MX_TIM6_Init+0x6c>)
 8002826:	2200      	movs	r2, #0
 8002828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800282a:	4b0e      	ldr	r3, [pc, #56]	; (8002864 <MX_TIM6_Init+0x6c>)
 800282c:	0018      	movs	r0, r3
 800282e:	f002 f86f 	bl	8004910 <HAL_TIM_Base_Init>
 8002832:	1e03      	subs	r3, r0, #0
 8002834:	d001      	beq.n	800283a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002836:	f000 f9c7 	bl	8002bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800283a:	1d3b      	adds	r3, r7, #4
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002840:	1d3b      	adds	r3, r7, #4
 8002842:	2200      	movs	r2, #0
 8002844:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002846:	1d3a      	adds	r2, r7, #4
 8002848:	4b06      	ldr	r3, [pc, #24]	; (8002864 <MX_TIM6_Init+0x6c>)
 800284a:	0011      	movs	r1, r2
 800284c:	0018      	movs	r0, r3
 800284e:	f002 fb13 	bl	8004e78 <HAL_TIMEx_MasterConfigSynchronization>
 8002852:	1e03      	subs	r3, r0, #0
 8002854:	d001      	beq.n	800285a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002856:	f000 f9b7 	bl	8002bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	46bd      	mov	sp, r7
 800285e:	b004      	add	sp, #16
 8002860:	bd80      	pop	{r7, pc}
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	20000250 	.word	0x20000250
 8002868:	40001000 	.word	0x40001000
 800286c:	00003e7f 	.word	0x00003e7f
 8002870:	000003e7 	.word	0x000003e7

08002874 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002878:	4b23      	ldr	r3, [pc, #140]	; (8002908 <MX_USART1_UART_Init+0x94>)
 800287a:	4a24      	ldr	r2, [pc, #144]	; (800290c <MX_USART1_UART_Init+0x98>)
 800287c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800287e:	4b22      	ldr	r3, [pc, #136]	; (8002908 <MX_USART1_UART_Init+0x94>)
 8002880:	2296      	movs	r2, #150	; 0x96
 8002882:	0192      	lsls	r2, r2, #6
 8002884:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002886:	4b20      	ldr	r3, [pc, #128]	; (8002908 <MX_USART1_UART_Init+0x94>)
 8002888:	2200      	movs	r2, #0
 800288a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800288c:	4b1e      	ldr	r3, [pc, #120]	; (8002908 <MX_USART1_UART_Init+0x94>)
 800288e:	2200      	movs	r2, #0
 8002890:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002892:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <MX_USART1_UART_Init+0x94>)
 8002894:	2200      	movs	r2, #0
 8002896:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002898:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <MX_USART1_UART_Init+0x94>)
 800289a:	220c      	movs	r2, #12
 800289c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800289e:	4b1a      	ldr	r3, [pc, #104]	; (8002908 <MX_USART1_UART_Init+0x94>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028a4:	4b18      	ldr	r3, [pc, #96]	; (8002908 <MX_USART1_UART_Init+0x94>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028aa:	4b17      	ldr	r3, [pc, #92]	; (8002908 <MX_USART1_UART_Init+0x94>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028b0:	4b15      	ldr	r3, [pc, #84]	; (8002908 <MX_USART1_UART_Init+0x94>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028b6:	4b14      	ldr	r3, [pc, #80]	; (8002908 <MX_USART1_UART_Init+0x94>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028bc:	4b12      	ldr	r3, [pc, #72]	; (8002908 <MX_USART1_UART_Init+0x94>)
 80028be:	0018      	movs	r0, r3
 80028c0:	f002 fb60 	bl	8004f84 <HAL_UART_Init>
 80028c4:	1e03      	subs	r3, r0, #0
 80028c6:	d001      	beq.n	80028cc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80028c8:	f000 f97e 	bl	8002bc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028cc:	4b0e      	ldr	r3, [pc, #56]	; (8002908 <MX_USART1_UART_Init+0x94>)
 80028ce:	2100      	movs	r1, #0
 80028d0:	0018      	movs	r0, r3
 80028d2:	f003 fa2d 	bl	8005d30 <HAL_UARTEx_SetTxFifoThreshold>
 80028d6:	1e03      	subs	r3, r0, #0
 80028d8:	d001      	beq.n	80028de <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80028da:	f000 f975 	bl	8002bc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028de:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <MX_USART1_UART_Init+0x94>)
 80028e0:	2100      	movs	r1, #0
 80028e2:	0018      	movs	r0, r3
 80028e4:	f003 fa64 	bl	8005db0 <HAL_UARTEx_SetRxFifoThreshold>
 80028e8:	1e03      	subs	r3, r0, #0
 80028ea:	d001      	beq.n	80028f0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80028ec:	f000 f96c 	bl	8002bc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80028f0:	4b05      	ldr	r3, [pc, #20]	; (8002908 <MX_USART1_UART_Init+0x94>)
 80028f2:	0018      	movs	r0, r3
 80028f4:	f003 f9e2 	bl	8005cbc <HAL_UARTEx_DisableFifoMode>
 80028f8:	1e03      	subs	r3, r0, #0
 80028fa:	d001      	beq.n	8002900 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80028fc:	f000 f964 	bl	8002bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002900:	46c0      	nop			; (mov r8, r8)
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	2000029c 	.word	0x2000029c
 800290c:	40013800 	.word	0x40013800

08002910 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002914:	4b23      	ldr	r3, [pc, #140]	; (80029a4 <MX_USART2_UART_Init+0x94>)
 8002916:	4a24      	ldr	r2, [pc, #144]	; (80029a8 <MX_USART2_UART_Init+0x98>)
 8002918:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800291a:	4b22      	ldr	r3, [pc, #136]	; (80029a4 <MX_USART2_UART_Init+0x94>)
 800291c:	22e1      	movs	r2, #225	; 0xe1
 800291e:	0252      	lsls	r2, r2, #9
 8002920:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002922:	4b20      	ldr	r3, [pc, #128]	; (80029a4 <MX_USART2_UART_Init+0x94>)
 8002924:	2200      	movs	r2, #0
 8002926:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002928:	4b1e      	ldr	r3, [pc, #120]	; (80029a4 <MX_USART2_UART_Init+0x94>)
 800292a:	2200      	movs	r2, #0
 800292c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800292e:	4b1d      	ldr	r3, [pc, #116]	; (80029a4 <MX_USART2_UART_Init+0x94>)
 8002930:	2200      	movs	r2, #0
 8002932:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002934:	4b1b      	ldr	r3, [pc, #108]	; (80029a4 <MX_USART2_UART_Init+0x94>)
 8002936:	220c      	movs	r2, #12
 8002938:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800293a:	4b1a      	ldr	r3, [pc, #104]	; (80029a4 <MX_USART2_UART_Init+0x94>)
 800293c:	2200      	movs	r2, #0
 800293e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002940:	4b18      	ldr	r3, [pc, #96]	; (80029a4 <MX_USART2_UART_Init+0x94>)
 8002942:	2200      	movs	r2, #0
 8002944:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002946:	4b17      	ldr	r3, [pc, #92]	; (80029a4 <MX_USART2_UART_Init+0x94>)
 8002948:	2200      	movs	r2, #0
 800294a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800294c:	4b15      	ldr	r3, [pc, #84]	; (80029a4 <MX_USART2_UART_Init+0x94>)
 800294e:	2200      	movs	r2, #0
 8002950:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002952:	4b14      	ldr	r3, [pc, #80]	; (80029a4 <MX_USART2_UART_Init+0x94>)
 8002954:	2200      	movs	r2, #0
 8002956:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002958:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <MX_USART2_UART_Init+0x94>)
 800295a:	0018      	movs	r0, r3
 800295c:	f002 fb12 	bl	8004f84 <HAL_UART_Init>
 8002960:	1e03      	subs	r3, r0, #0
 8002962:	d001      	beq.n	8002968 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002964:	f000 f930 	bl	8002bc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002968:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <MX_USART2_UART_Init+0x94>)
 800296a:	2100      	movs	r1, #0
 800296c:	0018      	movs	r0, r3
 800296e:	f003 f9df 	bl	8005d30 <HAL_UARTEx_SetTxFifoThreshold>
 8002972:	1e03      	subs	r3, r0, #0
 8002974:	d001      	beq.n	800297a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002976:	f000 f927 	bl	8002bc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800297a:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <MX_USART2_UART_Init+0x94>)
 800297c:	2100      	movs	r1, #0
 800297e:	0018      	movs	r0, r3
 8002980:	f003 fa16 	bl	8005db0 <HAL_UARTEx_SetRxFifoThreshold>
 8002984:	1e03      	subs	r3, r0, #0
 8002986:	d001      	beq.n	800298c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002988:	f000 f91e 	bl	8002bc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800298c:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <MX_USART2_UART_Init+0x94>)
 800298e:	0018      	movs	r0, r3
 8002990:	f003 f994 	bl	8005cbc <HAL_UARTEx_DisableFifoMode>
 8002994:	1e03      	subs	r3, r0, #0
 8002996:	d001      	beq.n	800299c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002998:	f000 f916 	bl	8002bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800299c:	46c0      	nop			; (mov r8, r8)
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	46c0      	nop			; (mov r8, r8)
 80029a4:	20000330 	.word	0x20000330
 80029a8:	40004400 	.word	0x40004400

080029ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80029b0:	4b16      	ldr	r3, [pc, #88]	; (8002a0c <MX_USART3_UART_Init+0x60>)
 80029b2:	4a17      	ldr	r2, [pc, #92]	; (8002a10 <MX_USART3_UART_Init+0x64>)
 80029b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80029b6:	4b15      	ldr	r3, [pc, #84]	; (8002a0c <MX_USART3_UART_Init+0x60>)
 80029b8:	2296      	movs	r2, #150	; 0x96
 80029ba:	0192      	lsls	r2, r2, #6
 80029bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80029be:	4b13      	ldr	r3, [pc, #76]	; (8002a0c <MX_USART3_UART_Init+0x60>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80029c4:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <MX_USART3_UART_Init+0x60>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80029ca:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <MX_USART3_UART_Init+0x60>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80029d0:	4b0e      	ldr	r3, [pc, #56]	; (8002a0c <MX_USART3_UART_Init+0x60>)
 80029d2:	220c      	movs	r2, #12
 80029d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029d6:	4b0d      	ldr	r3, [pc, #52]	; (8002a0c <MX_USART3_UART_Init+0x60>)
 80029d8:	2200      	movs	r2, #0
 80029da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80029dc:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <MX_USART3_UART_Init+0x60>)
 80029de:	2200      	movs	r2, #0
 80029e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029e2:	4b0a      	ldr	r3, [pc, #40]	; (8002a0c <MX_USART3_UART_Init+0x60>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029e8:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <MX_USART3_UART_Init+0x60>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029ee:	4b07      	ldr	r3, [pc, #28]	; (8002a0c <MX_USART3_UART_Init+0x60>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80029f4:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <MX_USART3_UART_Init+0x60>)
 80029f6:	0018      	movs	r0, r3
 80029f8:	f002 fac4 	bl	8004f84 <HAL_UART_Init>
 80029fc:	1e03      	subs	r3, r0, #0
 80029fe:	d001      	beq.n	8002a04 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002a00:	f000 f8e2 	bl	8002bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002a04:	46c0      	nop			; (mov r8, r8)
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	200003c4 	.word	0x200003c4
 8002a10:	40004800 	.word	0x40004800

08002a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a14:	b590      	push	{r4, r7, lr}
 8002a16:	b08b      	sub	sp, #44	; 0x2c
 8002a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1a:	2414      	movs	r4, #20
 8002a1c:	193b      	adds	r3, r7, r4
 8002a1e:	0018      	movs	r0, r3
 8002a20:	2314      	movs	r3, #20
 8002a22:	001a      	movs	r2, r3
 8002a24:	2100      	movs	r1, #0
 8002a26:	f005 fb11 	bl	800804c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a2a:	4b3d      	ldr	r3, [pc, #244]	; (8002b20 <MX_GPIO_Init+0x10c>)
 8002a2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a2e:	4b3c      	ldr	r3, [pc, #240]	; (8002b20 <MX_GPIO_Init+0x10c>)
 8002a30:	2104      	movs	r1, #4
 8002a32:	430a      	orrs	r2, r1
 8002a34:	635a      	str	r2, [r3, #52]	; 0x34
 8002a36:	4b3a      	ldr	r3, [pc, #232]	; (8002b20 <MX_GPIO_Init+0x10c>)
 8002a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a3a:	2204      	movs	r2, #4
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
 8002a40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a42:	4b37      	ldr	r3, [pc, #220]	; (8002b20 <MX_GPIO_Init+0x10c>)
 8002a44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a46:	4b36      	ldr	r3, [pc, #216]	; (8002b20 <MX_GPIO_Init+0x10c>)
 8002a48:	2120      	movs	r1, #32
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	635a      	str	r2, [r3, #52]	; 0x34
 8002a4e:	4b34      	ldr	r3, [pc, #208]	; (8002b20 <MX_GPIO_Init+0x10c>)
 8002a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a52:	2220      	movs	r2, #32
 8002a54:	4013      	ands	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5a:	4b31      	ldr	r3, [pc, #196]	; (8002b20 <MX_GPIO_Init+0x10c>)
 8002a5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a5e:	4b30      	ldr	r3, [pc, #192]	; (8002b20 <MX_GPIO_Init+0x10c>)
 8002a60:	2101      	movs	r1, #1
 8002a62:	430a      	orrs	r2, r1
 8002a64:	635a      	str	r2, [r3, #52]	; 0x34
 8002a66:	4b2e      	ldr	r3, [pc, #184]	; (8002b20 <MX_GPIO_Init+0x10c>)
 8002a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	60bb      	str	r3, [r7, #8]
 8002a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a72:	4b2b      	ldr	r3, [pc, #172]	; (8002b20 <MX_GPIO_Init+0x10c>)
 8002a74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a76:	4b2a      	ldr	r3, [pc, #168]	; (8002b20 <MX_GPIO_Init+0x10c>)
 8002a78:	2102      	movs	r1, #2
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	635a      	str	r2, [r3, #52]	; 0x34
 8002a7e:	4b28      	ldr	r3, [pc, #160]	; (8002b20 <MX_GPIO_Init+0x10c>)
 8002a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a82:	2202      	movs	r2, #2
 8002a84:	4013      	ands	r3, r2
 8002a86:	607b      	str	r3, [r7, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L86_RST_Pin|ASTRO_RST_Pin|L86_PWR_SW_Pin, GPIO_PIN_RESET);
 8002a8a:	238c      	movs	r3, #140	; 0x8c
 8002a8c:	015b      	lsls	r3, r3, #5
 8002a8e:	4825      	ldr	r0, [pc, #148]	; (8002b24 <MX_GPIO_Init+0x110>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	0019      	movs	r1, r3
 8002a94:	f000 ff28 	bl	80038e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RSTA11_Pin|ASTRO_EVENT_Pin
 8002a98:	4923      	ldr	r1, [pc, #140]	; (8002b28 <MX_GPIO_Init+0x114>)
 8002a9a:	23a0      	movs	r3, #160	; 0xa0
 8002a9c:	05db      	lsls	r3, r3, #23
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f000 ff21 	bl	80038e8 <HAL_GPIO_WritePin>
                          |ASTRO_WAKEUP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : L86_RST_Pin ASTRO_RST_Pin L86_PWR_SW_Pin */
  GPIO_InitStruct.Pin = L86_RST_Pin|ASTRO_RST_Pin|L86_PWR_SW_Pin;
 8002aa6:	193b      	adds	r3, r7, r4
 8002aa8:	228c      	movs	r2, #140	; 0x8c
 8002aaa:	0152      	lsls	r2, r2, #5
 8002aac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aae:	193b      	adds	r3, r7, r4
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab4:	193b      	adds	r3, r7, r4
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aba:	193b      	adds	r3, r7, r4
 8002abc:	2200      	movs	r2, #0
 8002abe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ac0:	193b      	adds	r3, r7, r4
 8002ac2:	4a18      	ldr	r2, [pc, #96]	; (8002b24 <MX_GPIO_Init+0x110>)
 8002ac4:	0019      	movs	r1, r3
 8002ac6:	0010      	movs	r0, r2
 8002ac8:	f000 fcda 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin ASTRO_PWR_SW_Pin ASTRO_RSTA11_Pin ASTRO_EVENT_Pin
                           ASTRO_WAKEUP_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RSTA11_Pin|ASTRO_EVENT_Pin
 8002acc:	193b      	adds	r3, r7, r4
 8002ace:	4a16      	ldr	r2, [pc, #88]	; (8002b28 <MX_GPIO_Init+0x114>)
 8002ad0:	601a      	str	r2, [r3, #0]
                          |ASTRO_WAKEUP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ad2:	193b      	adds	r3, r7, r4
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad8:	193b      	adds	r3, r7, r4
 8002ada:	2200      	movs	r2, #0
 8002adc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ade:	193b      	adds	r3, r7, r4
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae4:	193a      	adds	r2, r7, r4
 8002ae6:	23a0      	movs	r3, #160	; 0xa0
 8002ae8:	05db      	lsls	r3, r3, #23
 8002aea:	0011      	movs	r1, r2
 8002aec:	0018      	movs	r0, r3
 8002aee:	f000 fcc7 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIS_INT1_EXTI8_Pin LIS_INT2_EXTI9_Pin */
  GPIO_InitStruct.Pin = LIS_INT1_EXTI8_Pin|LIS_INT2_EXTI9_Pin;
 8002af2:	0021      	movs	r1, r4
 8002af4:	187b      	adds	r3, r7, r1
 8002af6:	22c0      	movs	r2, #192	; 0xc0
 8002af8:	0092      	lsls	r2, r2, #2
 8002afa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002afc:	187b      	adds	r3, r7, r1
 8002afe:	2288      	movs	r2, #136	; 0x88
 8002b00:	0352      	lsls	r2, r2, #13
 8002b02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b04:	187b      	adds	r3, r7, r1
 8002b06:	2200      	movs	r2, #0
 8002b08:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b0a:	187b      	adds	r3, r7, r1
 8002b0c:	4a07      	ldr	r2, [pc, #28]	; (8002b2c <MX_GPIO_Init+0x118>)
 8002b0e:	0019      	movs	r1, r3
 8002b10:	0010      	movs	r0, r2
 8002b12:	f000 fcb5 	bl	8003480 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	b00b      	add	sp, #44	; 0x2c
 8002b1c:	bd90      	pop	{r4, r7, pc}
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	40021000 	.word	0x40021000
 8002b24:	50000800 	.word	0x50000800
 8002b28:	00009860 	.word	0x00009860
 8002b2c:	50000400 	.word	0x50000400

08002b30 <my_ldg_on>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
    return ( get_systick () - starting_value > duration ) ? true : false ;
}
void my_ldg_on ( void )
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOA , LDG_Pin , GPIO_PIN_SET ) ;
 8002b34:	23a0      	movs	r3, #160	; 0xa0
 8002b36:	05db      	lsls	r3, r3, #23
 8002b38:	2201      	movs	r2, #1
 8002b3a:	2120      	movs	r1, #32
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	f000 fed3 	bl	80038e8 <HAL_GPIO_WritePin>
}
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <my_astro_off>:
{
	HAL_GPIO_WritePin ( GPIOA , ASTRO_PWR_SW_Pin , GPIO_PIN_SET ) ;
	MX_USART1_UART_Init () ;
}
void my_astro_off ( void )
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOA , ASTRO_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 8002b4c:	23a0      	movs	r3, #160	; 0xa0
 8002b4e:	05db      	lsls	r3, r3, #23
 8002b50:	2200      	movs	r2, #0
 8002b52:	2140      	movs	r1, #64	; 0x40
 8002b54:	0018      	movs	r0, r3
 8002b56:	f000 fec7 	bl	80038e8 <HAL_GPIO_WritePin>
	HAL_UART_DeInit ( HUART_ASTRO ) ;
 8002b5a:	4b03      	ldr	r3, [pc, #12]	; (8002b68 <my_astro_off+0x20>)
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	f002 fa67 	bl	8005030 <HAL_UART_DeInit>
}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	2000029c 	.word	0x2000029c

08002b6c <my_lx6_on>:
void my_lx6_on ( void )
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOC , L86_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8002b70:	2380      	movs	r3, #128	; 0x80
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	4808      	ldr	r0, [pc, #32]	; (8002b98 <my_lx6_on+0x2c>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	0019      	movs	r1, r3
 8002b7a:	f000 feb5 	bl	80038e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_SET ) ;
 8002b7e:	2380      	movs	r3, #128	; 0x80
 8002b80:	015b      	lsls	r3, r3, #5
 8002b82:	4805      	ldr	r0, [pc, #20]	; (8002b98 <my_lx6_on+0x2c>)
 8002b84:	2201      	movs	r2, #1
 8002b86:	0019      	movs	r1, r3
 8002b88:	f000 feae 	bl	80038e8 <HAL_GPIO_WritePin>
	MX_USART3_UART_Init () ;
 8002b8c:	f7ff ff0e 	bl	80029ac <MX_USART3_UART_Init>
}
 8002b90:	46c0      	nop			; (mov r8, r8)
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	50000800 	.word	0x50000800

08002b9c <HAL_TIM_PeriodElapsedCallback>:
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_RESET ) ;
	HAL_UART_DeInit ( HUART_Lx6 ) ;
}

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a05      	ldr	r2, [pc, #20]	; (8002bc0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d104      	bne.n	8002bb8 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		tim_seconds++ ;
 8002bae:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	1c5a      	adds	r2, r3, #1
 8002bb4:	4b03      	ldr	r3, [pc, #12]	; (8002bc4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002bb6:	601a      	str	r2, [r3, #0]
	}
}
 8002bb8:	46c0      	nop			; (mov r8, r8)
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	b002      	add	sp, #8
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40001000 	.word	0x40001000
 8002bc4:	20000568 	.word	0x20000568

08002bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bcc:	b672      	cpsid	i
}
 8002bce:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bd0:	e7fe      	b.n	8002bd0 <Error_Handler+0x8>
	...

08002bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bda:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <HAL_MspInit+0x44>)
 8002bdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bde:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <HAL_MspInit+0x44>)
 8002be0:	2101      	movs	r1, #1
 8002be2:	430a      	orrs	r2, r1
 8002be4:	641a      	str	r2, [r3, #64]	; 0x40
 8002be6:	4b0c      	ldr	r3, [pc, #48]	; (8002c18 <HAL_MspInit+0x44>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	2201      	movs	r2, #1
 8002bec:	4013      	ands	r3, r2
 8002bee:	607b      	str	r3, [r7, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bf2:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <HAL_MspInit+0x44>)
 8002bf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bf6:	4b08      	ldr	r3, [pc, #32]	; (8002c18 <HAL_MspInit+0x44>)
 8002bf8:	2180      	movs	r1, #128	; 0x80
 8002bfa:	0549      	lsls	r1, r1, #21
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <HAL_MspInit+0x44>)
 8002c02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c04:	2380      	movs	r3, #128	; 0x80
 8002c06:	055b      	lsls	r3, r3, #21
 8002c08:	4013      	ands	r3, r2
 8002c0a:	603b      	str	r3, [r7, #0]
 8002c0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	46bd      	mov	sp, r7
 8002c12:	b002      	add	sp, #8
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	40021000 	.word	0x40021000

08002c1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c1c:	b590      	push	{r4, r7, lr}
 8002c1e:	b097      	sub	sp, #92	; 0x5c
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c24:	2344      	movs	r3, #68	; 0x44
 8002c26:	18fb      	adds	r3, r7, r3
 8002c28:	0018      	movs	r0, r3
 8002c2a:	2314      	movs	r3, #20
 8002c2c:	001a      	movs	r2, r3
 8002c2e:	2100      	movs	r1, #0
 8002c30:	f005 fa0c 	bl	800804c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c34:	2410      	movs	r4, #16
 8002c36:	193b      	adds	r3, r7, r4
 8002c38:	0018      	movs	r0, r3
 8002c3a:	2334      	movs	r3, #52	; 0x34
 8002c3c:	001a      	movs	r2, r3
 8002c3e:	2100      	movs	r1, #0
 8002c40:	f005 fa04 	bl	800804c <memset>
  if(hi2c->Instance==I2C1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a22      	ldr	r2, [pc, #136]	; (8002cd4 <HAL_I2C_MspInit+0xb8>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d13d      	bne.n	8002cca <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002c4e:	193b      	adds	r3, r7, r4
 8002c50:	2220      	movs	r2, #32
 8002c52:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002c54:	193b      	adds	r3, r7, r4
 8002c56:	2200      	movs	r2, #0
 8002c58:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c5a:	193b      	adds	r3, r7, r4
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f001 fc9f 	bl	80045a0 <HAL_RCCEx_PeriphCLKConfig>
 8002c62:	1e03      	subs	r3, r0, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002c66:	f7ff ffaf 	bl	8002bc8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c6a:	4b1b      	ldr	r3, [pc, #108]	; (8002cd8 <HAL_I2C_MspInit+0xbc>)
 8002c6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c6e:	4b1a      	ldr	r3, [pc, #104]	; (8002cd8 <HAL_I2C_MspInit+0xbc>)
 8002c70:	2102      	movs	r1, #2
 8002c72:	430a      	orrs	r2, r1
 8002c74:	635a      	str	r2, [r3, #52]	; 0x34
 8002c76:	4b18      	ldr	r3, [pc, #96]	; (8002cd8 <HAL_I2C_MspInit+0xbc>)
 8002c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LIS_SCL_Pin|LIS_SDA_Pin;
 8002c82:	2144      	movs	r1, #68	; 0x44
 8002c84:	187b      	adds	r3, r7, r1
 8002c86:	22c0      	movs	r2, #192	; 0xc0
 8002c88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c8a:	187b      	adds	r3, r7, r1
 8002c8c:	2212      	movs	r2, #18
 8002c8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c90:	187b      	adds	r3, r7, r1
 8002c92:	2200      	movs	r2, #0
 8002c94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c96:	187b      	adds	r3, r7, r1
 8002c98:	2200      	movs	r2, #0
 8002c9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002c9c:	187b      	adds	r3, r7, r1
 8002c9e:	2206      	movs	r2, #6
 8002ca0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca2:	187b      	adds	r3, r7, r1
 8002ca4:	4a0d      	ldr	r2, [pc, #52]	; (8002cdc <HAL_I2C_MspInit+0xc0>)
 8002ca6:	0019      	movs	r1, r3
 8002ca8:	0010      	movs	r0, r2
 8002caa:	f000 fbe9 	bl	8003480 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cae:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <HAL_I2C_MspInit+0xbc>)
 8002cb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cb2:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <HAL_I2C_MspInit+0xbc>)
 8002cb4:	2180      	movs	r1, #128	; 0x80
 8002cb6:	0389      	lsls	r1, r1, #14
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	63da      	str	r2, [r3, #60]	; 0x3c
 8002cbc:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <HAL_I2C_MspInit+0xbc>)
 8002cbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cc0:	2380      	movs	r3, #128	; 0x80
 8002cc2:	039b      	lsls	r3, r3, #14
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	60bb      	str	r3, [r7, #8]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	b017      	add	sp, #92	; 0x5c
 8002cd0:	bd90      	pop	{r4, r7, pc}
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	40005400 	.word	0x40005400
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	50000400 	.word	0x50000400

08002ce0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a0d      	ldr	r2, [pc, #52]	; (8002d24 <HAL_TIM_Base_MspInit+0x44>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d113      	bne.n	8002d1a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002cf2:	4b0d      	ldr	r3, [pc, #52]	; (8002d28 <HAL_TIM_Base_MspInit+0x48>)
 8002cf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cf6:	4b0c      	ldr	r3, [pc, #48]	; (8002d28 <HAL_TIM_Base_MspInit+0x48>)
 8002cf8:	2110      	movs	r1, #16
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	63da      	str	r2, [r3, #60]	; 0x3c
 8002cfe:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <HAL_TIM_Base_MspInit+0x48>)
 8002d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d02:	2210      	movs	r2, #16
 8002d04:	4013      	ands	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	2011      	movs	r0, #17
 8002d10:	f000 fb84 	bl	800341c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8002d14:	2011      	movs	r0, #17
 8002d16:	f000 fb96 	bl	8003446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002d1a:	46c0      	nop			; (mov r8, r8)
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	b004      	add	sp, #16
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	46c0      	nop			; (mov r8, r8)
 8002d24:	40001000 	.word	0x40001000
 8002d28:	40021000 	.word	0x40021000

08002d2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d2c:	b590      	push	{r4, r7, lr}
 8002d2e:	b09b      	sub	sp, #108	; 0x6c
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d34:	2354      	movs	r3, #84	; 0x54
 8002d36:	18fb      	adds	r3, r7, r3
 8002d38:	0018      	movs	r0, r3
 8002d3a:	2314      	movs	r3, #20
 8002d3c:	001a      	movs	r2, r3
 8002d3e:	2100      	movs	r1, #0
 8002d40:	f005 f984 	bl	800804c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d44:	2420      	movs	r4, #32
 8002d46:	193b      	adds	r3, r7, r4
 8002d48:	0018      	movs	r0, r3
 8002d4a:	2334      	movs	r3, #52	; 0x34
 8002d4c:	001a      	movs	r2, r3
 8002d4e:	2100      	movs	r1, #0
 8002d50:	f005 f97c 	bl	800804c <memset>
  if(huart->Instance==USART1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a61      	ldr	r2, [pc, #388]	; (8002ee0 <HAL_UART_MspInit+0x1b4>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d140      	bne.n	8002de0 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d5e:	193b      	adds	r3, r7, r4
 8002d60:	2201      	movs	r2, #1
 8002d62:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002d64:	193b      	adds	r3, r7, r4
 8002d66:	2200      	movs	r2, #0
 8002d68:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d6a:	193b      	adds	r3, r7, r4
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f001 fc17 	bl	80045a0 <HAL_RCCEx_PeriphCLKConfig>
 8002d72:	1e03      	subs	r3, r0, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002d76:	f7ff ff27 	bl	8002bc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d7a:	4b5a      	ldr	r3, [pc, #360]	; (8002ee4 <HAL_UART_MspInit+0x1b8>)
 8002d7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d7e:	4b59      	ldr	r3, [pc, #356]	; (8002ee4 <HAL_UART_MspInit+0x1b8>)
 8002d80:	2180      	movs	r1, #128	; 0x80
 8002d82:	01c9      	lsls	r1, r1, #7
 8002d84:	430a      	orrs	r2, r1
 8002d86:	641a      	str	r2, [r3, #64]	; 0x40
 8002d88:	4b56      	ldr	r3, [pc, #344]	; (8002ee4 <HAL_UART_MspInit+0x1b8>)
 8002d8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d8c:	2380      	movs	r3, #128	; 0x80
 8002d8e:	01db      	lsls	r3, r3, #7
 8002d90:	4013      	ands	r3, r2
 8002d92:	61fb      	str	r3, [r7, #28]
 8002d94:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d96:	4b53      	ldr	r3, [pc, #332]	; (8002ee4 <HAL_UART_MspInit+0x1b8>)
 8002d98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d9a:	4b52      	ldr	r3, [pc, #328]	; (8002ee4 <HAL_UART_MspInit+0x1b8>)
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	635a      	str	r2, [r3, #52]	; 0x34
 8002da2:	4b50      	ldr	r3, [pc, #320]	; (8002ee4 <HAL_UART_MspInit+0x1b8>)
 8002da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da6:	2201      	movs	r2, #1
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
 8002dac:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ASTRO_TXD_Pin|ASTRO_RXD_Pin;
 8002dae:	2154      	movs	r1, #84	; 0x54
 8002db0:	187b      	adds	r3, r7, r1
 8002db2:	22c0      	movs	r2, #192	; 0xc0
 8002db4:	00d2      	lsls	r2, r2, #3
 8002db6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db8:	187b      	adds	r3, r7, r1
 8002dba:	2202      	movs	r2, #2
 8002dbc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbe:	187b      	adds	r3, r7, r1
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc4:	187b      	adds	r3, r7, r1
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002dca:	187b      	adds	r3, r7, r1
 8002dcc:	2201      	movs	r2, #1
 8002dce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd0:	187a      	adds	r2, r7, r1
 8002dd2:	23a0      	movs	r3, #160	; 0xa0
 8002dd4:	05db      	lsls	r3, r3, #23
 8002dd6:	0011      	movs	r1, r2
 8002dd8:	0018      	movs	r0, r3
 8002dda:	f000 fb51 	bl	8003480 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002dde:	e07b      	b.n	8002ed8 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART2)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a40      	ldr	r2, [pc, #256]	; (8002ee8 <HAL_UART_MspInit+0x1bc>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d140      	bne.n	8002e6c <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002dea:	2120      	movs	r1, #32
 8002dec:	187b      	adds	r3, r7, r1
 8002dee:	2202      	movs	r2, #2
 8002df0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002df2:	187b      	adds	r3, r7, r1
 8002df4:	2200      	movs	r2, #0
 8002df6:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002df8:	187b      	adds	r3, r7, r1
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f001 fbd0 	bl	80045a0 <HAL_RCCEx_PeriphCLKConfig>
 8002e00:	1e03      	subs	r3, r0, #0
 8002e02:	d001      	beq.n	8002e08 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 8002e04:	f7ff fee0 	bl	8002bc8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e08:	4b36      	ldr	r3, [pc, #216]	; (8002ee4 <HAL_UART_MspInit+0x1b8>)
 8002e0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e0c:	4b35      	ldr	r3, [pc, #212]	; (8002ee4 <HAL_UART_MspInit+0x1b8>)
 8002e0e:	2180      	movs	r1, #128	; 0x80
 8002e10:	0289      	lsls	r1, r1, #10
 8002e12:	430a      	orrs	r2, r1
 8002e14:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e16:	4b33      	ldr	r3, [pc, #204]	; (8002ee4 <HAL_UART_MspInit+0x1b8>)
 8002e18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e1a:	2380      	movs	r3, #128	; 0x80
 8002e1c:	029b      	lsls	r3, r3, #10
 8002e1e:	4013      	ands	r3, r2
 8002e20:	617b      	str	r3, [r7, #20]
 8002e22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e24:	4b2f      	ldr	r3, [pc, #188]	; (8002ee4 <HAL_UART_MspInit+0x1b8>)
 8002e26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e28:	4b2e      	ldr	r3, [pc, #184]	; (8002ee4 <HAL_UART_MspInit+0x1b8>)
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	635a      	str	r2, [r3, #52]	; 0x34
 8002e30:	4b2c      	ldr	r3, [pc, #176]	; (8002ee4 <HAL_UART_MspInit+0x1b8>)
 8002e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e34:	2201      	movs	r2, #1
 8002e36:	4013      	ands	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DBG_TXD_Pin|DBG_RXD_Pin;
 8002e3c:	2154      	movs	r1, #84	; 0x54
 8002e3e:	187b      	adds	r3, r7, r1
 8002e40:	220c      	movs	r2, #12
 8002e42:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e44:	187b      	adds	r3, r7, r1
 8002e46:	2202      	movs	r2, #2
 8002e48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e4a:	187b      	adds	r3, r7, r1
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e50:	187b      	adds	r3, r7, r1
 8002e52:	2200      	movs	r2, #0
 8002e54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002e56:	187b      	adds	r3, r7, r1
 8002e58:	2201      	movs	r2, #1
 8002e5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e5c:	187a      	adds	r2, r7, r1
 8002e5e:	23a0      	movs	r3, #160	; 0xa0
 8002e60:	05db      	lsls	r3, r3, #23
 8002e62:	0011      	movs	r1, r2
 8002e64:	0018      	movs	r0, r3
 8002e66:	f000 fb0b 	bl	8003480 <HAL_GPIO_Init>
}
 8002e6a:	e035      	b.n	8002ed8 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART3)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a1e      	ldr	r2, [pc, #120]	; (8002eec <HAL_UART_MspInit+0x1c0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d130      	bne.n	8002ed8 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e76:	4b1b      	ldr	r3, [pc, #108]	; (8002ee4 <HAL_UART_MspInit+0x1b8>)
 8002e78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ee4 <HAL_UART_MspInit+0x1b8>)
 8002e7c:	2180      	movs	r1, #128	; 0x80
 8002e7e:	02c9      	lsls	r1, r1, #11
 8002e80:	430a      	orrs	r2, r1
 8002e82:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e84:	4b17      	ldr	r3, [pc, #92]	; (8002ee4 <HAL_UART_MspInit+0x1b8>)
 8002e86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e88:	2380      	movs	r3, #128	; 0x80
 8002e8a:	02db      	lsls	r3, r3, #11
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e92:	4b14      	ldr	r3, [pc, #80]	; (8002ee4 <HAL_UART_MspInit+0x1b8>)
 8002e94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e96:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <HAL_UART_MspInit+0x1b8>)
 8002e98:	2104      	movs	r1, #4
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	635a      	str	r2, [r3, #52]	; 0x34
 8002e9e:	4b11      	ldr	r3, [pc, #68]	; (8002ee4 <HAL_UART_MspInit+0x1b8>)
 8002ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea2:	2204      	movs	r2, #4
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	60bb      	str	r3, [r7, #8]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = L86_RXD_Pin|L86_TXD_Pin;
 8002eaa:	2154      	movs	r1, #84	; 0x54
 8002eac:	187b      	adds	r3, r7, r1
 8002eae:	22c0      	movs	r2, #192	; 0xc0
 8002eb0:	0112      	lsls	r2, r2, #4
 8002eb2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb4:	187b      	adds	r3, r7, r1
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eba:	187b      	adds	r3, r7, r1
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec0:	187b      	adds	r3, r7, r1
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 8002ec6:	187b      	adds	r3, r7, r1
 8002ec8:	2200      	movs	r2, #0
 8002eca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ecc:	187b      	adds	r3, r7, r1
 8002ece:	4a08      	ldr	r2, [pc, #32]	; (8002ef0 <HAL_UART_MspInit+0x1c4>)
 8002ed0:	0019      	movs	r1, r3
 8002ed2:	0010      	movs	r0, r2
 8002ed4:	f000 fad4 	bl	8003480 <HAL_GPIO_Init>
}
 8002ed8:	46c0      	nop			; (mov r8, r8)
 8002eda:	46bd      	mov	sp, r7
 8002edc:	b01b      	add	sp, #108	; 0x6c
 8002ede:	bd90      	pop	{r4, r7, pc}
 8002ee0:	40013800 	.word	0x40013800
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	40004400 	.word	0x40004400
 8002eec:	40004800 	.word	0x40004800
 8002ef0:	50000800 	.word	0x50000800

08002ef4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a1c      	ldr	r2, [pc, #112]	; (8002f74 <HAL_UART_MspDeInit+0x80>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d10e      	bne.n	8002f24 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002f06:	4b1c      	ldr	r3, [pc, #112]	; (8002f78 <HAL_UART_MspDeInit+0x84>)
 8002f08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f0a:	4b1b      	ldr	r3, [pc, #108]	; (8002f78 <HAL_UART_MspDeInit+0x84>)
 8002f0c:	491b      	ldr	r1, [pc, #108]	; (8002f7c <HAL_UART_MspDeInit+0x88>)
 8002f0e:	400a      	ands	r2, r1
 8002f10:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, ASTRO_TXD_Pin|ASTRO_RXD_Pin);
 8002f12:	23c0      	movs	r3, #192	; 0xc0
 8002f14:	00da      	lsls	r2, r3, #3
 8002f16:	23a0      	movs	r3, #160	; 0xa0
 8002f18:	05db      	lsls	r3, r3, #23
 8002f1a:	0011      	movs	r1, r2
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	f000 fc13 	bl	8003748 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8002f22:	e023      	b.n	8002f6c <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART2)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a15      	ldr	r2, [pc, #84]	; (8002f80 <HAL_UART_MspDeInit+0x8c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d10c      	bne.n	8002f48 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002f2e:	4b12      	ldr	r3, [pc, #72]	; (8002f78 <HAL_UART_MspDeInit+0x84>)
 8002f30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f32:	4b11      	ldr	r3, [pc, #68]	; (8002f78 <HAL_UART_MspDeInit+0x84>)
 8002f34:	4913      	ldr	r1, [pc, #76]	; (8002f84 <HAL_UART_MspDeInit+0x90>)
 8002f36:	400a      	ands	r2, r1
 8002f38:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TXD_Pin|DBG_RXD_Pin);
 8002f3a:	23a0      	movs	r3, #160	; 0xa0
 8002f3c:	05db      	lsls	r3, r3, #23
 8002f3e:	210c      	movs	r1, #12
 8002f40:	0018      	movs	r0, r3
 8002f42:	f000 fc01 	bl	8003748 <HAL_GPIO_DeInit>
}
 8002f46:	e011      	b.n	8002f6c <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART3)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a0e      	ldr	r2, [pc, #56]	; (8002f88 <HAL_UART_MspDeInit+0x94>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d10c      	bne.n	8002f6c <HAL_UART_MspDeInit+0x78>
    __HAL_RCC_USART3_CLK_DISABLE();
 8002f52:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <HAL_UART_MspDeInit+0x84>)
 8002f54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f56:	4b08      	ldr	r3, [pc, #32]	; (8002f78 <HAL_UART_MspDeInit+0x84>)
 8002f58:	490c      	ldr	r1, [pc, #48]	; (8002f8c <HAL_UART_MspDeInit+0x98>)
 8002f5a:	400a      	ands	r2, r1
 8002f5c:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOC, L86_RXD_Pin|L86_TXD_Pin);
 8002f5e:	23c0      	movs	r3, #192	; 0xc0
 8002f60:	011b      	lsls	r3, r3, #4
 8002f62:	4a0b      	ldr	r2, [pc, #44]	; (8002f90 <HAL_UART_MspDeInit+0x9c>)
 8002f64:	0019      	movs	r1, r3
 8002f66:	0010      	movs	r0, r2
 8002f68:	f000 fbee 	bl	8003748 <HAL_GPIO_DeInit>
}
 8002f6c:	46c0      	nop			; (mov r8, r8)
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	b002      	add	sp, #8
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40013800 	.word	0x40013800
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	ffffbfff 	.word	0xffffbfff
 8002f80:	40004400 	.word	0x40004400
 8002f84:	fffdffff 	.word	0xfffdffff
 8002f88:	40004800 	.word	0x40004800
 8002f8c:	fffbffff 	.word	0xfffbffff
 8002f90:	50000800 	.word	0x50000800

08002f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f98:	e7fe      	b.n	8002f98 <NMI_Handler+0x4>

08002f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f9e:	e7fe      	b.n	8002f9e <HardFault_Handler+0x4>

08002fa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002fa4:	46c0      	nop			; (mov r8, r8)
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fb8:	f000 f968 	bl	800328c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fbc:	46c0      	nop			; (mov r8, r8)
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
	...

08002fc4 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002fc8:	4b03      	ldr	r3, [pc, #12]	; (8002fd8 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f001 fd82 	bl	8004ad4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8002fd0:	46c0      	nop			; (mov r8, r8)
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	20000250 	.word	0x20000250

08002fdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  return 1;
 8002fe0:	2301      	movs	r3, #1
}
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <_kill>:

int _kill(int pid, int sig)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ff2:	f005 f8d3 	bl	800819c <__errno>
 8002ff6:	0003      	movs	r3, r0
 8002ff8:	2216      	movs	r2, #22
 8002ffa:	601a      	str	r2, [r3, #0]
  return -1;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	425b      	negs	r3, r3
}
 8003000:	0018      	movs	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	b002      	add	sp, #8
 8003006:	bd80      	pop	{r7, pc}

08003008 <_exit>:

void _exit (int status)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003010:	2301      	movs	r3, #1
 8003012:	425a      	negs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	0011      	movs	r1, r2
 8003018:	0018      	movs	r0, r3
 800301a:	f7ff ffe5 	bl	8002fe8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800301e:	e7fe      	b.n	800301e <_exit+0x16>

08003020 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800302c:	2300      	movs	r3, #0
 800302e:	617b      	str	r3, [r7, #20]
 8003030:	e00a      	b.n	8003048 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003032:	e000      	b.n	8003036 <_read+0x16>
 8003034:	bf00      	nop
 8003036:	0001      	movs	r1, r0
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	1c5a      	adds	r2, r3, #1
 800303c:	60ba      	str	r2, [r7, #8]
 800303e:	b2ca      	uxtb	r2, r1
 8003040:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	3301      	adds	r3, #1
 8003046:	617b      	str	r3, [r7, #20]
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	429a      	cmp	r2, r3
 800304e:	dbf0      	blt.n	8003032 <_read+0x12>
  }

  return len;
 8003050:	687b      	ldr	r3, [r7, #4]
}
 8003052:	0018      	movs	r0, r3
 8003054:	46bd      	mov	sp, r7
 8003056:	b006      	add	sp, #24
 8003058:	bd80      	pop	{r7, pc}

0800305a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b086      	sub	sp, #24
 800305e:	af00      	add	r7, sp, #0
 8003060:	60f8      	str	r0, [r7, #12]
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003066:	2300      	movs	r3, #0
 8003068:	617b      	str	r3, [r7, #20]
 800306a:	e009      	b.n	8003080 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	1c5a      	adds	r2, r3, #1
 8003070:	60ba      	str	r2, [r7, #8]
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	0018      	movs	r0, r3
 8003076:	e000      	b.n	800307a <_write+0x20>
 8003078:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	3301      	adds	r3, #1
 800307e:	617b      	str	r3, [r7, #20]
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	429a      	cmp	r2, r3
 8003086:	dbf1      	blt.n	800306c <_write+0x12>
  }
  return len;
 8003088:	687b      	ldr	r3, [r7, #4]
}
 800308a:	0018      	movs	r0, r3
 800308c:	46bd      	mov	sp, r7
 800308e:	b006      	add	sp, #24
 8003090:	bd80      	pop	{r7, pc}

08003092 <_close>:

int _close(int file)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800309a:	2301      	movs	r3, #1
 800309c:	425b      	negs	r3, r3
}
 800309e:	0018      	movs	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	b002      	add	sp, #8
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b082      	sub	sp, #8
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
 80030ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	2280      	movs	r2, #128	; 0x80
 80030b4:	0192      	lsls	r2, r2, #6
 80030b6:	605a      	str	r2, [r3, #4]
  return 0;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	0018      	movs	r0, r3
 80030bc:	46bd      	mov	sp, r7
 80030be:	b002      	add	sp, #8
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <_isatty>:

int _isatty(int file)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b082      	sub	sp, #8
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80030ca:	2301      	movs	r3, #1
}
 80030cc:	0018      	movs	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	b002      	add	sp, #8
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	0018      	movs	r0, r3
 80030e4:	46bd      	mov	sp, r7
 80030e6:	b004      	add	sp, #16
 80030e8:	bd80      	pop	{r7, pc}
	...

080030ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030f4:	4a14      	ldr	r2, [pc, #80]	; (8003148 <_sbrk+0x5c>)
 80030f6:	4b15      	ldr	r3, [pc, #84]	; (800314c <_sbrk+0x60>)
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003100:	4b13      	ldr	r3, [pc, #76]	; (8003150 <_sbrk+0x64>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d102      	bne.n	800310e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003108:	4b11      	ldr	r3, [pc, #68]	; (8003150 <_sbrk+0x64>)
 800310a:	4a12      	ldr	r2, [pc, #72]	; (8003154 <_sbrk+0x68>)
 800310c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800310e:	4b10      	ldr	r3, [pc, #64]	; (8003150 <_sbrk+0x64>)
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	18d3      	adds	r3, r2, r3
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	429a      	cmp	r2, r3
 800311a:	d207      	bcs.n	800312c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800311c:	f005 f83e 	bl	800819c <__errno>
 8003120:	0003      	movs	r3, r0
 8003122:	220c      	movs	r2, #12
 8003124:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003126:	2301      	movs	r3, #1
 8003128:	425b      	negs	r3, r3
 800312a:	e009      	b.n	8003140 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800312c:	4b08      	ldr	r3, [pc, #32]	; (8003150 <_sbrk+0x64>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003132:	4b07      	ldr	r3, [pc, #28]	; (8003150 <_sbrk+0x64>)
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	18d2      	adds	r2, r2, r3
 800313a:	4b05      	ldr	r3, [pc, #20]	; (8003150 <_sbrk+0x64>)
 800313c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800313e:	68fb      	ldr	r3, [r7, #12]
}
 8003140:	0018      	movs	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	b006      	add	sp, #24
 8003146:	bd80      	pop	{r7, pc}
 8003148:	20009000 	.word	0x20009000
 800314c:	00000400 	.word	0x00000400
 8003150:	20000570 	.word	0x20000570
 8003154:	200006c8 	.word	0x200006c8

08003158 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800315c:	46c0      	nop			; (mov r8, r8)
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
	...

08003164 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003164:	480d      	ldr	r0, [pc, #52]	; (800319c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003166:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003168:	f7ff fff6 	bl	8003158 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800316c:	480c      	ldr	r0, [pc, #48]	; (80031a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800316e:	490d      	ldr	r1, [pc, #52]	; (80031a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003170:	4a0d      	ldr	r2, [pc, #52]	; (80031a8 <LoopForever+0xe>)
  movs r3, #0
 8003172:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003174:	e002      	b.n	800317c <LoopCopyDataInit>

08003176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800317a:	3304      	adds	r3, #4

0800317c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800317c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800317e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003180:	d3f9      	bcc.n	8003176 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003182:	4a0a      	ldr	r2, [pc, #40]	; (80031ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8003184:	4c0a      	ldr	r4, [pc, #40]	; (80031b0 <LoopForever+0x16>)
  movs r3, #0
 8003186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003188:	e001      	b.n	800318e <LoopFillZerobss>

0800318a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800318a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800318c:	3204      	adds	r2, #4

0800318e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800318e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003190:	d3fb      	bcc.n	800318a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003192:	f005 f809 	bl	80081a8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003196:	f7ff f9d9 	bl	800254c <main>

0800319a <LoopForever>:

LoopForever:
  b LoopForever
 800319a:	e7fe      	b.n	800319a <LoopForever>
  ldr   r0, =_estack
 800319c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80031a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031a4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80031a8:	0800b104 	.word	0x0800b104
  ldr r2, =_sbss
 80031ac:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80031b0:	200006c4 	.word	0x200006c4

080031b4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031b4:	e7fe      	b.n	80031b4 <ADC1_COMP_IRQHandler>
	...

080031b8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80031be:	1dfb      	adds	r3, r7, #7
 80031c0:	2200      	movs	r2, #0
 80031c2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031c4:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <HAL_Init+0x3c>)
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <HAL_Init+0x3c>)
 80031ca:	2180      	movs	r1, #128	; 0x80
 80031cc:	0049      	lsls	r1, r1, #1
 80031ce:	430a      	orrs	r2, r1
 80031d0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031d2:	2000      	movs	r0, #0
 80031d4:	f000 f810 	bl	80031f8 <HAL_InitTick>
 80031d8:	1e03      	subs	r3, r0, #0
 80031da:	d003      	beq.n	80031e4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80031dc:	1dfb      	adds	r3, r7, #7
 80031de:	2201      	movs	r2, #1
 80031e0:	701a      	strb	r2, [r3, #0]
 80031e2:	e001      	b.n	80031e8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80031e4:	f7ff fcf6 	bl	8002bd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80031e8:	1dfb      	adds	r3, r7, #7
 80031ea:	781b      	ldrb	r3, [r3, #0]
}
 80031ec:	0018      	movs	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	b002      	add	sp, #8
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40022000 	.word	0x40022000

080031f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031f8:	b590      	push	{r4, r7, lr}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003200:	230f      	movs	r3, #15
 8003202:	18fb      	adds	r3, r7, r3
 8003204:	2200      	movs	r2, #0
 8003206:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003208:	4b1d      	ldr	r3, [pc, #116]	; (8003280 <HAL_InitTick+0x88>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d02b      	beq.n	8003268 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003210:	4b1c      	ldr	r3, [pc, #112]	; (8003284 <HAL_InitTick+0x8c>)
 8003212:	681c      	ldr	r4, [r3, #0]
 8003214:	4b1a      	ldr	r3, [pc, #104]	; (8003280 <HAL_InitTick+0x88>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	0019      	movs	r1, r3
 800321a:	23fa      	movs	r3, #250	; 0xfa
 800321c:	0098      	lsls	r0, r3, #2
 800321e:	f7fc ff8d 	bl	800013c <__udivsi3>
 8003222:	0003      	movs	r3, r0
 8003224:	0019      	movs	r1, r3
 8003226:	0020      	movs	r0, r4
 8003228:	f7fc ff88 	bl	800013c <__udivsi3>
 800322c:	0003      	movs	r3, r0
 800322e:	0018      	movs	r0, r3
 8003230:	f000 f919 	bl	8003466 <HAL_SYSTICK_Config>
 8003234:	1e03      	subs	r3, r0, #0
 8003236:	d112      	bne.n	800325e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b03      	cmp	r3, #3
 800323c:	d80a      	bhi.n	8003254 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	2301      	movs	r3, #1
 8003242:	425b      	negs	r3, r3
 8003244:	2200      	movs	r2, #0
 8003246:	0018      	movs	r0, r3
 8003248:	f000 f8e8 	bl	800341c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800324c:	4b0e      	ldr	r3, [pc, #56]	; (8003288 <HAL_InitTick+0x90>)
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	e00d      	b.n	8003270 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003254:	230f      	movs	r3, #15
 8003256:	18fb      	adds	r3, r7, r3
 8003258:	2201      	movs	r2, #1
 800325a:	701a      	strb	r2, [r3, #0]
 800325c:	e008      	b.n	8003270 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800325e:	230f      	movs	r3, #15
 8003260:	18fb      	adds	r3, r7, r3
 8003262:	2201      	movs	r2, #1
 8003264:	701a      	strb	r2, [r3, #0]
 8003266:	e003      	b.n	8003270 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003268:	230f      	movs	r3, #15
 800326a:	18fb      	adds	r3, r7, r3
 800326c:	2201      	movs	r2, #1
 800326e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003270:	230f      	movs	r3, #15
 8003272:	18fb      	adds	r3, r7, r3
 8003274:	781b      	ldrb	r3, [r3, #0]
}
 8003276:	0018      	movs	r0, r3
 8003278:	46bd      	mov	sp, r7
 800327a:	b005      	add	sp, #20
 800327c:	bd90      	pop	{r4, r7, pc}
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	20000014 	.word	0x20000014
 8003284:	2000000c 	.word	0x2000000c
 8003288:	20000010 	.word	0x20000010

0800328c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003290:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <HAL_IncTick+0x1c>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	001a      	movs	r2, r3
 8003296:	4b05      	ldr	r3, [pc, #20]	; (80032ac <HAL_IncTick+0x20>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	18d2      	adds	r2, r2, r3
 800329c:	4b03      	ldr	r3, [pc, #12]	; (80032ac <HAL_IncTick+0x20>)
 800329e:	601a      	str	r2, [r3, #0]
}
 80032a0:	46c0      	nop			; (mov r8, r8)
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	46c0      	nop			; (mov r8, r8)
 80032a8:	20000014 	.word	0x20000014
 80032ac:	20000574 	.word	0x20000574

080032b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  return uwTick;
 80032b4:	4b02      	ldr	r3, [pc, #8]	; (80032c0 <HAL_GetTick+0x10>)
 80032b6:	681b      	ldr	r3, [r3, #0]
}
 80032b8:	0018      	movs	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	46c0      	nop			; (mov r8, r8)
 80032c0:	20000574 	.word	0x20000574

080032c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	0002      	movs	r2, r0
 80032cc:	1dfb      	adds	r3, r7, #7
 80032ce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80032d0:	1dfb      	adds	r3, r7, #7
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b7f      	cmp	r3, #127	; 0x7f
 80032d6:	d809      	bhi.n	80032ec <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032d8:	1dfb      	adds	r3, r7, #7
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	001a      	movs	r2, r3
 80032de:	231f      	movs	r3, #31
 80032e0:	401a      	ands	r2, r3
 80032e2:	4b04      	ldr	r3, [pc, #16]	; (80032f4 <__NVIC_EnableIRQ+0x30>)
 80032e4:	2101      	movs	r1, #1
 80032e6:	4091      	lsls	r1, r2
 80032e8:	000a      	movs	r2, r1
 80032ea:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80032ec:	46c0      	nop			; (mov r8, r8)
 80032ee:	46bd      	mov	sp, r7
 80032f0:	b002      	add	sp, #8
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	e000e100 	.word	0xe000e100

080032f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032f8:	b590      	push	{r4, r7, lr}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	0002      	movs	r2, r0
 8003300:	6039      	str	r1, [r7, #0]
 8003302:	1dfb      	adds	r3, r7, #7
 8003304:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003306:	1dfb      	adds	r3, r7, #7
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b7f      	cmp	r3, #127	; 0x7f
 800330c:	d828      	bhi.n	8003360 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800330e:	4a2f      	ldr	r2, [pc, #188]	; (80033cc <__NVIC_SetPriority+0xd4>)
 8003310:	1dfb      	adds	r3, r7, #7
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	b25b      	sxtb	r3, r3
 8003316:	089b      	lsrs	r3, r3, #2
 8003318:	33c0      	adds	r3, #192	; 0xc0
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	589b      	ldr	r3, [r3, r2]
 800331e:	1dfa      	adds	r2, r7, #7
 8003320:	7812      	ldrb	r2, [r2, #0]
 8003322:	0011      	movs	r1, r2
 8003324:	2203      	movs	r2, #3
 8003326:	400a      	ands	r2, r1
 8003328:	00d2      	lsls	r2, r2, #3
 800332a:	21ff      	movs	r1, #255	; 0xff
 800332c:	4091      	lsls	r1, r2
 800332e:	000a      	movs	r2, r1
 8003330:	43d2      	mvns	r2, r2
 8003332:	401a      	ands	r2, r3
 8003334:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	019b      	lsls	r3, r3, #6
 800333a:	22ff      	movs	r2, #255	; 0xff
 800333c:	401a      	ands	r2, r3
 800333e:	1dfb      	adds	r3, r7, #7
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	0018      	movs	r0, r3
 8003344:	2303      	movs	r3, #3
 8003346:	4003      	ands	r3, r0
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800334c:	481f      	ldr	r0, [pc, #124]	; (80033cc <__NVIC_SetPriority+0xd4>)
 800334e:	1dfb      	adds	r3, r7, #7
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	b25b      	sxtb	r3, r3
 8003354:	089b      	lsrs	r3, r3, #2
 8003356:	430a      	orrs	r2, r1
 8003358:	33c0      	adds	r3, #192	; 0xc0
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800335e:	e031      	b.n	80033c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003360:	4a1b      	ldr	r2, [pc, #108]	; (80033d0 <__NVIC_SetPriority+0xd8>)
 8003362:	1dfb      	adds	r3, r7, #7
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	0019      	movs	r1, r3
 8003368:	230f      	movs	r3, #15
 800336a:	400b      	ands	r3, r1
 800336c:	3b08      	subs	r3, #8
 800336e:	089b      	lsrs	r3, r3, #2
 8003370:	3306      	adds	r3, #6
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	18d3      	adds	r3, r2, r3
 8003376:	3304      	adds	r3, #4
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	1dfa      	adds	r2, r7, #7
 800337c:	7812      	ldrb	r2, [r2, #0]
 800337e:	0011      	movs	r1, r2
 8003380:	2203      	movs	r2, #3
 8003382:	400a      	ands	r2, r1
 8003384:	00d2      	lsls	r2, r2, #3
 8003386:	21ff      	movs	r1, #255	; 0xff
 8003388:	4091      	lsls	r1, r2
 800338a:	000a      	movs	r2, r1
 800338c:	43d2      	mvns	r2, r2
 800338e:	401a      	ands	r2, r3
 8003390:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	019b      	lsls	r3, r3, #6
 8003396:	22ff      	movs	r2, #255	; 0xff
 8003398:	401a      	ands	r2, r3
 800339a:	1dfb      	adds	r3, r7, #7
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	0018      	movs	r0, r3
 80033a0:	2303      	movs	r3, #3
 80033a2:	4003      	ands	r3, r0
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033a8:	4809      	ldr	r0, [pc, #36]	; (80033d0 <__NVIC_SetPriority+0xd8>)
 80033aa:	1dfb      	adds	r3, r7, #7
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	001c      	movs	r4, r3
 80033b0:	230f      	movs	r3, #15
 80033b2:	4023      	ands	r3, r4
 80033b4:	3b08      	subs	r3, #8
 80033b6:	089b      	lsrs	r3, r3, #2
 80033b8:	430a      	orrs	r2, r1
 80033ba:	3306      	adds	r3, #6
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	18c3      	adds	r3, r0, r3
 80033c0:	3304      	adds	r3, #4
 80033c2:	601a      	str	r2, [r3, #0]
}
 80033c4:	46c0      	nop			; (mov r8, r8)
 80033c6:	46bd      	mov	sp, r7
 80033c8:	b003      	add	sp, #12
 80033ca:	bd90      	pop	{r4, r7, pc}
 80033cc:	e000e100 	.word	0xe000e100
 80033d0:	e000ed00 	.word	0xe000ed00

080033d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	1e5a      	subs	r2, r3, #1
 80033e0:	2380      	movs	r3, #128	; 0x80
 80033e2:	045b      	lsls	r3, r3, #17
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d301      	bcc.n	80033ec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033e8:	2301      	movs	r3, #1
 80033ea:	e010      	b.n	800340e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033ec:	4b0a      	ldr	r3, [pc, #40]	; (8003418 <SysTick_Config+0x44>)
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	3a01      	subs	r2, #1
 80033f2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033f4:	2301      	movs	r3, #1
 80033f6:	425b      	negs	r3, r3
 80033f8:	2103      	movs	r1, #3
 80033fa:	0018      	movs	r0, r3
 80033fc:	f7ff ff7c 	bl	80032f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003400:	4b05      	ldr	r3, [pc, #20]	; (8003418 <SysTick_Config+0x44>)
 8003402:	2200      	movs	r2, #0
 8003404:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003406:	4b04      	ldr	r3, [pc, #16]	; (8003418 <SysTick_Config+0x44>)
 8003408:	2207      	movs	r2, #7
 800340a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800340c:	2300      	movs	r3, #0
}
 800340e:	0018      	movs	r0, r3
 8003410:	46bd      	mov	sp, r7
 8003412:	b002      	add	sp, #8
 8003414:	bd80      	pop	{r7, pc}
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	e000e010 	.word	0xe000e010

0800341c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	60b9      	str	r1, [r7, #8]
 8003424:	607a      	str	r2, [r7, #4]
 8003426:	210f      	movs	r1, #15
 8003428:	187b      	adds	r3, r7, r1
 800342a:	1c02      	adds	r2, r0, #0
 800342c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	187b      	adds	r3, r7, r1
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	b25b      	sxtb	r3, r3
 8003436:	0011      	movs	r1, r2
 8003438:	0018      	movs	r0, r3
 800343a:	f7ff ff5d 	bl	80032f8 <__NVIC_SetPriority>
}
 800343e:	46c0      	nop			; (mov r8, r8)
 8003440:	46bd      	mov	sp, r7
 8003442:	b004      	add	sp, #16
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b082      	sub	sp, #8
 800344a:	af00      	add	r7, sp, #0
 800344c:	0002      	movs	r2, r0
 800344e:	1dfb      	adds	r3, r7, #7
 8003450:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003452:	1dfb      	adds	r3, r7, #7
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	b25b      	sxtb	r3, r3
 8003458:	0018      	movs	r0, r3
 800345a:	f7ff ff33 	bl	80032c4 <__NVIC_EnableIRQ>
}
 800345e:	46c0      	nop			; (mov r8, r8)
 8003460:	46bd      	mov	sp, r7
 8003462:	b002      	add	sp, #8
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b082      	sub	sp, #8
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	0018      	movs	r0, r3
 8003472:	f7ff ffaf 	bl	80033d4 <SysTick_Config>
 8003476:	0003      	movs	r3, r0
}
 8003478:	0018      	movs	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	b002      	add	sp, #8
 800347e:	bd80      	pop	{r7, pc}

08003480 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800348a:	2300      	movs	r3, #0
 800348c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800348e:	e147      	b.n	8003720 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2101      	movs	r1, #1
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	4091      	lsls	r1, r2
 800349a:	000a      	movs	r2, r1
 800349c:	4013      	ands	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d100      	bne.n	80034a8 <HAL_GPIO_Init+0x28>
 80034a6:	e138      	b.n	800371a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2203      	movs	r2, #3
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d005      	beq.n	80034c0 <HAL_GPIO_Init+0x40>
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	2203      	movs	r2, #3
 80034ba:	4013      	ands	r3, r2
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d130      	bne.n	8003522 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	2203      	movs	r2, #3
 80034cc:	409a      	lsls	r2, r3
 80034ce:	0013      	movs	r3, r2
 80034d0:	43da      	mvns	r2, r3
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	4013      	ands	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	68da      	ldr	r2, [r3, #12]
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	409a      	lsls	r2, r3
 80034e2:	0013      	movs	r3, r2
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034f6:	2201      	movs	r2, #1
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	409a      	lsls	r2, r3
 80034fc:	0013      	movs	r3, r2
 80034fe:	43da      	mvns	r2, r3
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	4013      	ands	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	091b      	lsrs	r3, r3, #4
 800350c:	2201      	movs	r2, #1
 800350e:	401a      	ands	r2, r3
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	409a      	lsls	r2, r3
 8003514:	0013      	movs	r3, r2
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	4313      	orrs	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2203      	movs	r2, #3
 8003528:	4013      	ands	r3, r2
 800352a:	2b03      	cmp	r3, #3
 800352c:	d017      	beq.n	800355e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	2203      	movs	r2, #3
 800353a:	409a      	lsls	r2, r3
 800353c:	0013      	movs	r3, r2
 800353e:	43da      	mvns	r2, r3
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	4013      	ands	r3, r2
 8003544:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	409a      	lsls	r2, r3
 8003550:	0013      	movs	r3, r2
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	4313      	orrs	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2203      	movs	r2, #3
 8003564:	4013      	ands	r3, r2
 8003566:	2b02      	cmp	r3, #2
 8003568:	d123      	bne.n	80035b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	08da      	lsrs	r2, r3, #3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	3208      	adds	r2, #8
 8003572:	0092      	lsls	r2, r2, #2
 8003574:	58d3      	ldr	r3, [r2, r3]
 8003576:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	2207      	movs	r2, #7
 800357c:	4013      	ands	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	220f      	movs	r2, #15
 8003582:	409a      	lsls	r2, r3
 8003584:	0013      	movs	r3, r2
 8003586:	43da      	mvns	r2, r3
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	4013      	ands	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	691a      	ldr	r2, [r3, #16]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2107      	movs	r1, #7
 8003596:	400b      	ands	r3, r1
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	409a      	lsls	r2, r3
 800359c:	0013      	movs	r3, r2
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	08da      	lsrs	r2, r3, #3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	3208      	adds	r2, #8
 80035ac:	0092      	lsls	r2, r2, #2
 80035ae:	6939      	ldr	r1, [r7, #16]
 80035b0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	2203      	movs	r2, #3
 80035be:	409a      	lsls	r2, r3
 80035c0:	0013      	movs	r3, r2
 80035c2:	43da      	mvns	r2, r3
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4013      	ands	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2203      	movs	r2, #3
 80035d0:	401a      	ands	r2, r3
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	409a      	lsls	r2, r3
 80035d8:	0013      	movs	r3, r2
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	23c0      	movs	r3, #192	; 0xc0
 80035ec:	029b      	lsls	r3, r3, #10
 80035ee:	4013      	ands	r3, r2
 80035f0:	d100      	bne.n	80035f4 <HAL_GPIO_Init+0x174>
 80035f2:	e092      	b.n	800371a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80035f4:	4a50      	ldr	r2, [pc, #320]	; (8003738 <HAL_GPIO_Init+0x2b8>)
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	089b      	lsrs	r3, r3, #2
 80035fa:	3318      	adds	r3, #24
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	589b      	ldr	r3, [r3, r2]
 8003600:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2203      	movs	r2, #3
 8003606:	4013      	ands	r3, r2
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	220f      	movs	r2, #15
 800360c:	409a      	lsls	r2, r3
 800360e:	0013      	movs	r3, r2
 8003610:	43da      	mvns	r2, r3
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	4013      	ands	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	23a0      	movs	r3, #160	; 0xa0
 800361c:	05db      	lsls	r3, r3, #23
 800361e:	429a      	cmp	r2, r3
 8003620:	d013      	beq.n	800364a <HAL_GPIO_Init+0x1ca>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a45      	ldr	r2, [pc, #276]	; (800373c <HAL_GPIO_Init+0x2bc>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d00d      	beq.n	8003646 <HAL_GPIO_Init+0x1c6>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a44      	ldr	r2, [pc, #272]	; (8003740 <HAL_GPIO_Init+0x2c0>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d007      	beq.n	8003642 <HAL_GPIO_Init+0x1c2>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a43      	ldr	r2, [pc, #268]	; (8003744 <HAL_GPIO_Init+0x2c4>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d101      	bne.n	800363e <HAL_GPIO_Init+0x1be>
 800363a:	2303      	movs	r3, #3
 800363c:	e006      	b.n	800364c <HAL_GPIO_Init+0x1cc>
 800363e:	2305      	movs	r3, #5
 8003640:	e004      	b.n	800364c <HAL_GPIO_Init+0x1cc>
 8003642:	2302      	movs	r3, #2
 8003644:	e002      	b.n	800364c <HAL_GPIO_Init+0x1cc>
 8003646:	2301      	movs	r3, #1
 8003648:	e000      	b.n	800364c <HAL_GPIO_Init+0x1cc>
 800364a:	2300      	movs	r3, #0
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	2103      	movs	r1, #3
 8003650:	400a      	ands	r2, r1
 8003652:	00d2      	lsls	r2, r2, #3
 8003654:	4093      	lsls	r3, r2
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	4313      	orrs	r3, r2
 800365a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800365c:	4936      	ldr	r1, [pc, #216]	; (8003738 <HAL_GPIO_Init+0x2b8>)
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	089b      	lsrs	r3, r3, #2
 8003662:	3318      	adds	r3, #24
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800366a:	4b33      	ldr	r3, [pc, #204]	; (8003738 <HAL_GPIO_Init+0x2b8>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	43da      	mvns	r2, r3
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	4013      	ands	r3, r2
 8003678:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	2380      	movs	r3, #128	; 0x80
 8003680:	035b      	lsls	r3, r3, #13
 8003682:	4013      	ands	r3, r2
 8003684:	d003      	beq.n	800368e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4313      	orrs	r3, r2
 800368c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800368e:	4b2a      	ldr	r3, [pc, #168]	; (8003738 <HAL_GPIO_Init+0x2b8>)
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003694:	4b28      	ldr	r3, [pc, #160]	; (8003738 <HAL_GPIO_Init+0x2b8>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	43da      	mvns	r2, r3
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	4013      	ands	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	2380      	movs	r3, #128	; 0x80
 80036aa:	039b      	lsls	r3, r3, #14
 80036ac:	4013      	ands	r3, r2
 80036ae:	d003      	beq.n	80036b8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036b8:	4b1f      	ldr	r3, [pc, #124]	; (8003738 <HAL_GPIO_Init+0x2b8>)
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80036be:	4a1e      	ldr	r2, [pc, #120]	; (8003738 <HAL_GPIO_Init+0x2b8>)
 80036c0:	2384      	movs	r3, #132	; 0x84
 80036c2:	58d3      	ldr	r3, [r2, r3]
 80036c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	43da      	mvns	r2, r3
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	4013      	ands	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	2380      	movs	r3, #128	; 0x80
 80036d6:	029b      	lsls	r3, r3, #10
 80036d8:	4013      	ands	r3, r2
 80036da:	d003      	beq.n	80036e4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036e4:	4914      	ldr	r1, [pc, #80]	; (8003738 <HAL_GPIO_Init+0x2b8>)
 80036e6:	2284      	movs	r2, #132	; 0x84
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80036ec:	4a12      	ldr	r2, [pc, #72]	; (8003738 <HAL_GPIO_Init+0x2b8>)
 80036ee:	2380      	movs	r3, #128	; 0x80
 80036f0:	58d3      	ldr	r3, [r2, r3]
 80036f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	43da      	mvns	r2, r3
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	4013      	ands	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	2380      	movs	r3, #128	; 0x80
 8003704:	025b      	lsls	r3, r3, #9
 8003706:	4013      	ands	r3, r2
 8003708:	d003      	beq.n	8003712 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4313      	orrs	r3, r2
 8003710:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003712:	4909      	ldr	r1, [pc, #36]	; (8003738 <HAL_GPIO_Init+0x2b8>)
 8003714:	2280      	movs	r2, #128	; 0x80
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	3301      	adds	r3, #1
 800371e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	40da      	lsrs	r2, r3
 8003728:	1e13      	subs	r3, r2, #0
 800372a:	d000      	beq.n	800372e <HAL_GPIO_Init+0x2ae>
 800372c:	e6b0      	b.n	8003490 <HAL_GPIO_Init+0x10>
  }
}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	46c0      	nop			; (mov r8, r8)
 8003732:	46bd      	mov	sp, r7
 8003734:	b006      	add	sp, #24
 8003736:	bd80      	pop	{r7, pc}
 8003738:	40021800 	.word	0x40021800
 800373c:	50000400 	.word	0x50000400
 8003740:	50000800 	.word	0x50000800
 8003744:	50000c00 	.word	0x50000c00

08003748 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003752:	2300      	movs	r3, #0
 8003754:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003756:	e0b4      	b.n	80038c2 <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003758:	2201      	movs	r2, #1
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	409a      	lsls	r2, r3
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	4013      	ands	r3, r2
 8003762:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d100      	bne.n	800376c <HAL_GPIO_DeInit+0x24>
 800376a:	e0a7      	b.n	80038bc <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 800376c:	4a5a      	ldr	r2, [pc, #360]	; (80038d8 <HAL_GPIO_DeInit+0x190>)
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	089b      	lsrs	r3, r3, #2
 8003772:	3318      	adds	r3, #24
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	589b      	ldr	r3, [r3, r2]
 8003778:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2203      	movs	r2, #3
 800377e:	4013      	ands	r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	220f      	movs	r2, #15
 8003784:	409a      	lsls	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	4013      	ands	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	23a0      	movs	r3, #160	; 0xa0
 8003790:	05db      	lsls	r3, r3, #23
 8003792:	429a      	cmp	r2, r3
 8003794:	d013      	beq.n	80037be <HAL_GPIO_DeInit+0x76>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a50      	ldr	r2, [pc, #320]	; (80038dc <HAL_GPIO_DeInit+0x194>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d00d      	beq.n	80037ba <HAL_GPIO_DeInit+0x72>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a4f      	ldr	r2, [pc, #316]	; (80038e0 <HAL_GPIO_DeInit+0x198>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d007      	beq.n	80037b6 <HAL_GPIO_DeInit+0x6e>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a4e      	ldr	r2, [pc, #312]	; (80038e4 <HAL_GPIO_DeInit+0x19c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d101      	bne.n	80037b2 <HAL_GPIO_DeInit+0x6a>
 80037ae:	2303      	movs	r3, #3
 80037b0:	e006      	b.n	80037c0 <HAL_GPIO_DeInit+0x78>
 80037b2:	2305      	movs	r3, #5
 80037b4:	e004      	b.n	80037c0 <HAL_GPIO_DeInit+0x78>
 80037b6:	2302      	movs	r3, #2
 80037b8:	e002      	b.n	80037c0 <HAL_GPIO_DeInit+0x78>
 80037ba:	2301      	movs	r3, #1
 80037bc:	e000      	b.n	80037c0 <HAL_GPIO_DeInit+0x78>
 80037be:	2300      	movs	r3, #0
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	2103      	movs	r1, #3
 80037c4:	400a      	ands	r2, r1
 80037c6:	00d2      	lsls	r2, r2, #3
 80037c8:	4093      	lsls	r3, r2
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d136      	bne.n	800383e <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80037d0:	4a41      	ldr	r2, [pc, #260]	; (80038d8 <HAL_GPIO_DeInit+0x190>)
 80037d2:	2380      	movs	r3, #128	; 0x80
 80037d4:	58d3      	ldr	r3, [r2, r3]
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	43d2      	mvns	r2, r2
 80037da:	493f      	ldr	r1, [pc, #252]	; (80038d8 <HAL_GPIO_DeInit+0x190>)
 80037dc:	4013      	ands	r3, r2
 80037de:	2280      	movs	r2, #128	; 0x80
 80037e0:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 80037e2:	4a3d      	ldr	r2, [pc, #244]	; (80038d8 <HAL_GPIO_DeInit+0x190>)
 80037e4:	2384      	movs	r3, #132	; 0x84
 80037e6:	58d3      	ldr	r3, [r2, r3]
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	43d2      	mvns	r2, r2
 80037ec:	493a      	ldr	r1, [pc, #232]	; (80038d8 <HAL_GPIO_DeInit+0x190>)
 80037ee:	4013      	ands	r3, r2
 80037f0:	2284      	movs	r2, #132	; 0x84
 80037f2:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80037f4:	4b38      	ldr	r3, [pc, #224]	; (80038d8 <HAL_GPIO_DeInit+0x190>)
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	43d9      	mvns	r1, r3
 80037fc:	4b36      	ldr	r3, [pc, #216]	; (80038d8 <HAL_GPIO_DeInit+0x190>)
 80037fe:	400a      	ands	r2, r1
 8003800:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003802:	4b35      	ldr	r3, [pc, #212]	; (80038d8 <HAL_GPIO_DeInit+0x190>)
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	43d9      	mvns	r1, r3
 800380a:	4b33      	ldr	r3, [pc, #204]	; (80038d8 <HAL_GPIO_DeInit+0x190>)
 800380c:	400a      	ands	r2, r1
 800380e:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	2203      	movs	r2, #3
 8003814:	4013      	ands	r3, r2
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	220f      	movs	r2, #15
 800381a:	409a      	lsls	r2, r3
 800381c:	0013      	movs	r3, r2
 800381e:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8003820:	4a2d      	ldr	r2, [pc, #180]	; (80038d8 <HAL_GPIO_DeInit+0x190>)
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	089b      	lsrs	r3, r3, #2
 8003826:	3318      	adds	r3, #24
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	589a      	ldr	r2, [r3, r2]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	43d9      	mvns	r1, r3
 8003830:	4829      	ldr	r0, [pc, #164]	; (80038d8 <HAL_GPIO_DeInit+0x190>)
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	089b      	lsrs	r3, r3, #2
 8003836:	400a      	ands	r2, r1
 8003838:	3318      	adds	r3, #24
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	2103      	movs	r1, #3
 8003848:	4099      	lsls	r1, r3
 800384a:	000b      	movs	r3, r1
 800384c:	431a      	orrs	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	08da      	lsrs	r2, r3, #3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3208      	adds	r2, #8
 800385a:	0092      	lsls	r2, r2, #2
 800385c:	58d3      	ldr	r3, [r2, r3]
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	2107      	movs	r1, #7
 8003862:	400a      	ands	r2, r1
 8003864:	0092      	lsls	r2, r2, #2
 8003866:	210f      	movs	r1, #15
 8003868:	4091      	lsls	r1, r2
 800386a:	000a      	movs	r2, r1
 800386c:	43d1      	mvns	r1, r2
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	08d2      	lsrs	r2, r2, #3
 8003872:	4019      	ands	r1, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3208      	adds	r2, #8
 8003878:	0092      	lsls	r2, r2, #2
 800387a:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	0052      	lsls	r2, r2, #1
 8003884:	2103      	movs	r1, #3
 8003886:	4091      	lsls	r1, r2
 8003888:	000a      	movs	r2, r1
 800388a:	43d2      	mvns	r2, r2
 800388c:	401a      	ands	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2101      	movs	r1, #1
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	4091      	lsls	r1, r2
 800389c:	000a      	movs	r2, r1
 800389e:	43d2      	mvns	r2, r2
 80038a0:	401a      	ands	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	0052      	lsls	r2, r2, #1
 80038ae:	2103      	movs	r1, #3
 80038b0:	4091      	lsls	r1, r2
 80038b2:	000a      	movs	r2, r1
 80038b4:	43d2      	mvns	r2, r2
 80038b6:	401a      	ands	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	60da      	str	r2, [r3, #12]
    }

    position++;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	3301      	adds	r3, #1
 80038c0:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	40da      	lsrs	r2, r3
 80038c8:	1e13      	subs	r3, r2, #0
 80038ca:	d000      	beq.n	80038ce <HAL_GPIO_DeInit+0x186>
 80038cc:	e744      	b.n	8003758 <HAL_GPIO_DeInit+0x10>
  }
}
 80038ce:	46c0      	nop			; (mov r8, r8)
 80038d0:	46c0      	nop			; (mov r8, r8)
 80038d2:	46bd      	mov	sp, r7
 80038d4:	b006      	add	sp, #24
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40021800 	.word	0x40021800
 80038dc:	50000400 	.word	0x50000400
 80038e0:	50000800 	.word	0x50000800
 80038e4:	50000c00 	.word	0x50000c00

080038e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	0008      	movs	r0, r1
 80038f2:	0011      	movs	r1, r2
 80038f4:	1cbb      	adds	r3, r7, #2
 80038f6:	1c02      	adds	r2, r0, #0
 80038f8:	801a      	strh	r2, [r3, #0]
 80038fa:	1c7b      	adds	r3, r7, #1
 80038fc:	1c0a      	adds	r2, r1, #0
 80038fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003900:	1c7b      	adds	r3, r7, #1
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d004      	beq.n	8003912 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003908:	1cbb      	adds	r3, r7, #2
 800390a:	881a      	ldrh	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003910:	e003      	b.n	800391a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003912:	1cbb      	adds	r3, r7, #2
 8003914:	881a      	ldrh	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	629a      	str	r2, [r3, #40]	; 0x28
}
 800391a:	46c0      	nop			; (mov r8, r8)
 800391c:	46bd      	mov	sp, r7
 800391e:	b002      	add	sp, #8
 8003920:	bd80      	pop	{r7, pc}
	...

08003924 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e082      	b.n	8003a3c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2241      	movs	r2, #65	; 0x41
 800393a:	5c9b      	ldrb	r3, [r3, r2]
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d107      	bne.n	8003952 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2240      	movs	r2, #64	; 0x40
 8003946:	2100      	movs	r1, #0
 8003948:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	0018      	movs	r0, r3
 800394e:	f7ff f965 	bl	8002c1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2241      	movs	r2, #65	; 0x41
 8003956:	2124      	movs	r1, #36	; 0x24
 8003958:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2101      	movs	r1, #1
 8003966:	438a      	bics	r2, r1
 8003968:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4934      	ldr	r1, [pc, #208]	; (8003a44 <HAL_I2C_Init+0x120>)
 8003974:	400a      	ands	r2, r1
 8003976:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4931      	ldr	r1, [pc, #196]	; (8003a48 <HAL_I2C_Init+0x124>)
 8003984:	400a      	ands	r2, r1
 8003986:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d108      	bne.n	80039a2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2180      	movs	r1, #128	; 0x80
 800399a:	0209      	lsls	r1, r1, #8
 800399c:	430a      	orrs	r2, r1
 800399e:	609a      	str	r2, [r3, #8]
 80039a0:	e007      	b.n	80039b2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2184      	movs	r1, #132	; 0x84
 80039ac:	0209      	lsls	r1, r1, #8
 80039ae:	430a      	orrs	r2, r1
 80039b0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d104      	bne.n	80039c4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2280      	movs	r2, #128	; 0x80
 80039c0:	0112      	lsls	r2, r2, #4
 80039c2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	491f      	ldr	r1, [pc, #124]	; (8003a4c <HAL_I2C_Init+0x128>)
 80039d0:	430a      	orrs	r2, r1
 80039d2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	491a      	ldr	r1, [pc, #104]	; (8003a48 <HAL_I2C_Init+0x124>)
 80039e0:	400a      	ands	r2, r1
 80039e2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	691a      	ldr	r2, [r3, #16]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	431a      	orrs	r2, r3
 80039ee:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	69d9      	ldr	r1, [r3, #28]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1a      	ldr	r2, [r3, #32]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2101      	movs	r1, #1
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2241      	movs	r2, #65	; 0x41
 8003a28:	2120      	movs	r1, #32
 8003a2a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2242      	movs	r2, #66	; 0x42
 8003a36:	2100      	movs	r1, #0
 8003a38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	b002      	add	sp, #8
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	f0ffffff 	.word	0xf0ffffff
 8003a48:	ffff7fff 	.word	0xffff7fff
 8003a4c:	02008000 	.word	0x02008000

08003a50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2241      	movs	r2, #65	; 0x41
 8003a5e:	5c9b      	ldrb	r3, [r3, r2]
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b20      	cmp	r3, #32
 8003a64:	d138      	bne.n	8003ad8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2240      	movs	r2, #64	; 0x40
 8003a6a:	5c9b      	ldrb	r3, [r3, r2]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d101      	bne.n	8003a74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a70:	2302      	movs	r3, #2
 8003a72:	e032      	b.n	8003ada <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2240      	movs	r2, #64	; 0x40
 8003a78:	2101      	movs	r1, #1
 8003a7a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2241      	movs	r2, #65	; 0x41
 8003a80:	2124      	movs	r1, #36	; 0x24
 8003a82:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2101      	movs	r1, #1
 8003a90:	438a      	bics	r2, r1
 8003a92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4911      	ldr	r1, [pc, #68]	; (8003ae4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003aa0:	400a      	ands	r2, r1
 8003aa2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6819      	ldr	r1, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2101      	movs	r1, #1
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2241      	movs	r2, #65	; 0x41
 8003ac8:	2120      	movs	r1, #32
 8003aca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2240      	movs	r2, #64	; 0x40
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	e000      	b.n	8003ada <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ad8:	2302      	movs	r3, #2
  }
}
 8003ada:	0018      	movs	r0, r3
 8003adc:	46bd      	mov	sp, r7
 8003ade:	b002      	add	sp, #8
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	46c0      	nop			; (mov r8, r8)
 8003ae4:	ffffefff 	.word	0xffffefff

08003ae8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2241      	movs	r2, #65	; 0x41
 8003af6:	5c9b      	ldrb	r3, [r3, r2]
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b20      	cmp	r3, #32
 8003afc:	d139      	bne.n	8003b72 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2240      	movs	r2, #64	; 0x40
 8003b02:	5c9b      	ldrb	r3, [r3, r2]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d101      	bne.n	8003b0c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b08:	2302      	movs	r3, #2
 8003b0a:	e033      	b.n	8003b74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2240      	movs	r2, #64	; 0x40
 8003b10:	2101      	movs	r1, #1
 8003b12:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2241      	movs	r2, #65	; 0x41
 8003b18:	2124      	movs	r1, #36	; 0x24
 8003b1a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2101      	movs	r1, #1
 8003b28:	438a      	bics	r2, r1
 8003b2a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4a11      	ldr	r2, [pc, #68]	; (8003b7c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	021b      	lsls	r3, r3, #8
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2101      	movs	r1, #1
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2241      	movs	r2, #65	; 0x41
 8003b62:	2120      	movs	r1, #32
 8003b64:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2240      	movs	r2, #64	; 0x40
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	e000      	b.n	8003b74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b72:	2302      	movs	r3, #2
  }
}
 8003b74:	0018      	movs	r0, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	b004      	add	sp, #16
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	fffff0ff 	.word	0xfffff0ff

08003b80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003b88:	4b19      	ldr	r3, [pc, #100]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a19      	ldr	r2, [pc, #100]	; (8003bf4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003b8e:	4013      	ands	r3, r2
 8003b90:	0019      	movs	r1, r3
 8003b92:	4b17      	ldr	r3, [pc, #92]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	2380      	movs	r3, #128	; 0x80
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d11f      	bne.n	8003be4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003ba4:	4b14      	ldr	r3, [pc, #80]	; (8003bf8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	0013      	movs	r3, r2
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	189b      	adds	r3, r3, r2
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	4912      	ldr	r1, [pc, #72]	; (8003bfc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003bb2:	0018      	movs	r0, r3
 8003bb4:	f7fc fac2 	bl	800013c <__udivsi3>
 8003bb8:	0003      	movs	r3, r0
 8003bba:	3301      	adds	r3, #1
 8003bbc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bbe:	e008      	b.n	8003bd2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	e001      	b.n	8003bd2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e009      	b.n	8003be6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bd2:	4b07      	ldr	r3, [pc, #28]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003bd4:	695a      	ldr	r2, [r3, #20]
 8003bd6:	2380      	movs	r3, #128	; 0x80
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	401a      	ands	r2, r3
 8003bdc:	2380      	movs	r3, #128	; 0x80
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d0ed      	beq.n	8003bc0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	0018      	movs	r0, r3
 8003be8:	46bd      	mov	sp, r7
 8003bea:	b004      	add	sp, #16
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	46c0      	nop			; (mov r8, r8)
 8003bf0:	40007000 	.word	0x40007000
 8003bf4:	fffff9ff 	.word	0xfffff9ff
 8003bf8:	2000000c 	.word	0x2000000c
 8003bfc:	000f4240 	.word	0x000f4240

08003c00 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003c04:	4b03      	ldr	r3, [pc, #12]	; (8003c14 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	23e0      	movs	r3, #224	; 0xe0
 8003c0a:	01db      	lsls	r3, r3, #7
 8003c0c:	4013      	ands	r3, r2
}
 8003c0e:	0018      	movs	r0, r3
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40021000 	.word	0x40021000

08003c18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b088      	sub	sp, #32
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e2fe      	b.n	8004228 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	4013      	ands	r3, r2
 8003c32:	d100      	bne.n	8003c36 <HAL_RCC_OscConfig+0x1e>
 8003c34:	e07c      	b.n	8003d30 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c36:	4bc3      	ldr	r3, [pc, #780]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	2238      	movs	r2, #56	; 0x38
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c40:	4bc0      	ldr	r3, [pc, #768]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	2203      	movs	r2, #3
 8003c46:	4013      	ands	r3, r2
 8003c48:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	2b10      	cmp	r3, #16
 8003c4e:	d102      	bne.n	8003c56 <HAL_RCC_OscConfig+0x3e>
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	2b03      	cmp	r3, #3
 8003c54:	d002      	beq.n	8003c5c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d10b      	bne.n	8003c74 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c5c:	4bb9      	ldr	r3, [pc, #740]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	2380      	movs	r3, #128	; 0x80
 8003c62:	029b      	lsls	r3, r3, #10
 8003c64:	4013      	ands	r3, r2
 8003c66:	d062      	beq.n	8003d2e <HAL_RCC_OscConfig+0x116>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d15e      	bne.n	8003d2e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e2d9      	b.n	8004228 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	2380      	movs	r3, #128	; 0x80
 8003c7a:	025b      	lsls	r3, r3, #9
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d107      	bne.n	8003c90 <HAL_RCC_OscConfig+0x78>
 8003c80:	4bb0      	ldr	r3, [pc, #704]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	4baf      	ldr	r3, [pc, #700]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003c86:	2180      	movs	r1, #128	; 0x80
 8003c88:	0249      	lsls	r1, r1, #9
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	e020      	b.n	8003cd2 <HAL_RCC_OscConfig+0xba>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	23a0      	movs	r3, #160	; 0xa0
 8003c96:	02db      	lsls	r3, r3, #11
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d10e      	bne.n	8003cba <HAL_RCC_OscConfig+0xa2>
 8003c9c:	4ba9      	ldr	r3, [pc, #676]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	4ba8      	ldr	r3, [pc, #672]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003ca2:	2180      	movs	r1, #128	; 0x80
 8003ca4:	02c9      	lsls	r1, r1, #11
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	4ba6      	ldr	r3, [pc, #664]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	4ba5      	ldr	r3, [pc, #660]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003cb0:	2180      	movs	r1, #128	; 0x80
 8003cb2:	0249      	lsls	r1, r1, #9
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	e00b      	b.n	8003cd2 <HAL_RCC_OscConfig+0xba>
 8003cba:	4ba2      	ldr	r3, [pc, #648]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	4ba1      	ldr	r3, [pc, #644]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003cc0:	49a1      	ldr	r1, [pc, #644]	; (8003f48 <HAL_RCC_OscConfig+0x330>)
 8003cc2:	400a      	ands	r2, r1
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	4b9f      	ldr	r3, [pc, #636]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	4b9e      	ldr	r3, [pc, #632]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003ccc:	499f      	ldr	r1, [pc, #636]	; (8003f4c <HAL_RCC_OscConfig+0x334>)
 8003cce:	400a      	ands	r2, r1
 8003cd0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d014      	beq.n	8003d04 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cda:	f7ff fae9 	bl	80032b0 <HAL_GetTick>
 8003cde:	0003      	movs	r3, r0
 8003ce0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ce4:	f7ff fae4 	bl	80032b0 <HAL_GetTick>
 8003ce8:	0002      	movs	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b64      	cmp	r3, #100	; 0x64
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e298      	b.n	8004228 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cf6:	4b93      	ldr	r3, [pc, #588]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	2380      	movs	r3, #128	; 0x80
 8003cfc:	029b      	lsls	r3, r3, #10
 8003cfe:	4013      	ands	r3, r2
 8003d00:	d0f0      	beq.n	8003ce4 <HAL_RCC_OscConfig+0xcc>
 8003d02:	e015      	b.n	8003d30 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d04:	f7ff fad4 	bl	80032b0 <HAL_GetTick>
 8003d08:	0003      	movs	r3, r0
 8003d0a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d0e:	f7ff facf 	bl	80032b0 <HAL_GetTick>
 8003d12:	0002      	movs	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b64      	cmp	r3, #100	; 0x64
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e283      	b.n	8004228 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d20:	4b88      	ldr	r3, [pc, #544]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	2380      	movs	r3, #128	; 0x80
 8003d26:	029b      	lsls	r3, r3, #10
 8003d28:	4013      	ands	r3, r2
 8003d2a:	d1f0      	bne.n	8003d0e <HAL_RCC_OscConfig+0xf6>
 8003d2c:	e000      	b.n	8003d30 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d2e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2202      	movs	r2, #2
 8003d36:	4013      	ands	r3, r2
 8003d38:	d100      	bne.n	8003d3c <HAL_RCC_OscConfig+0x124>
 8003d3a:	e099      	b.n	8003e70 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d3c:	4b81      	ldr	r3, [pc, #516]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	2238      	movs	r2, #56	; 0x38
 8003d42:	4013      	ands	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d46:	4b7f      	ldr	r3, [pc, #508]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	2203      	movs	r2, #3
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	2b10      	cmp	r3, #16
 8003d54:	d102      	bne.n	8003d5c <HAL_RCC_OscConfig+0x144>
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d002      	beq.n	8003d62 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d135      	bne.n	8003dce <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d62:	4b78      	ldr	r3, [pc, #480]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	2380      	movs	r3, #128	; 0x80
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	d005      	beq.n	8003d7a <HAL_RCC_OscConfig+0x162>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e256      	b.n	8004228 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d7a:	4b72      	ldr	r3, [pc, #456]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	4a74      	ldr	r2, [pc, #464]	; (8003f50 <HAL_RCC_OscConfig+0x338>)
 8003d80:	4013      	ands	r3, r2
 8003d82:	0019      	movs	r1, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	021a      	lsls	r2, r3, #8
 8003d8a:	4b6e      	ldr	r3, [pc, #440]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d112      	bne.n	8003dbc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003d96:	4b6b      	ldr	r3, [pc, #428]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a6e      	ldr	r2, [pc, #440]	; (8003f54 <HAL_RCC_OscConfig+0x33c>)
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	0019      	movs	r1, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691a      	ldr	r2, [r3, #16]
 8003da4:	4b67      	ldr	r3, [pc, #412]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003da6:	430a      	orrs	r2, r1
 8003da8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003daa:	4b66      	ldr	r3, [pc, #408]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	0adb      	lsrs	r3, r3, #11
 8003db0:	2207      	movs	r2, #7
 8003db2:	4013      	ands	r3, r2
 8003db4:	4a68      	ldr	r2, [pc, #416]	; (8003f58 <HAL_RCC_OscConfig+0x340>)
 8003db6:	40da      	lsrs	r2, r3
 8003db8:	4b68      	ldr	r3, [pc, #416]	; (8003f5c <HAL_RCC_OscConfig+0x344>)
 8003dba:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003dbc:	4b68      	ldr	r3, [pc, #416]	; (8003f60 <HAL_RCC_OscConfig+0x348>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	f7ff fa19 	bl	80031f8 <HAL_InitTick>
 8003dc6:	1e03      	subs	r3, r0, #0
 8003dc8:	d051      	beq.n	8003e6e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e22c      	b.n	8004228 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d030      	beq.n	8003e38 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003dd6:	4b5b      	ldr	r3, [pc, #364]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a5e      	ldr	r2, [pc, #376]	; (8003f54 <HAL_RCC_OscConfig+0x33c>)
 8003ddc:	4013      	ands	r3, r2
 8003dde:	0019      	movs	r1, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691a      	ldr	r2, [r3, #16]
 8003de4:	4b57      	ldr	r3, [pc, #348]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003de6:	430a      	orrs	r2, r1
 8003de8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003dea:	4b56      	ldr	r3, [pc, #344]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	4b55      	ldr	r3, [pc, #340]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003df0:	2180      	movs	r1, #128	; 0x80
 8003df2:	0049      	lsls	r1, r1, #1
 8003df4:	430a      	orrs	r2, r1
 8003df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df8:	f7ff fa5a 	bl	80032b0 <HAL_GetTick>
 8003dfc:	0003      	movs	r3, r0
 8003dfe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e02:	f7ff fa55 	bl	80032b0 <HAL_GetTick>
 8003e06:	0002      	movs	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e209      	b.n	8004228 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e14:	4b4b      	ldr	r3, [pc, #300]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	2380      	movs	r3, #128	; 0x80
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	d0f0      	beq.n	8003e02 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e20:	4b48      	ldr	r3, [pc, #288]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	4a4a      	ldr	r2, [pc, #296]	; (8003f50 <HAL_RCC_OscConfig+0x338>)
 8003e26:	4013      	ands	r3, r2
 8003e28:	0019      	movs	r1, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	021a      	lsls	r2, r3, #8
 8003e30:	4b44      	ldr	r3, [pc, #272]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003e32:	430a      	orrs	r2, r1
 8003e34:	605a      	str	r2, [r3, #4]
 8003e36:	e01b      	b.n	8003e70 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003e38:	4b42      	ldr	r3, [pc, #264]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	4b41      	ldr	r3, [pc, #260]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003e3e:	4949      	ldr	r1, [pc, #292]	; (8003f64 <HAL_RCC_OscConfig+0x34c>)
 8003e40:	400a      	ands	r2, r1
 8003e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e44:	f7ff fa34 	bl	80032b0 <HAL_GetTick>
 8003e48:	0003      	movs	r3, r0
 8003e4a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e4c:	e008      	b.n	8003e60 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e4e:	f7ff fa2f 	bl	80032b0 <HAL_GetTick>
 8003e52:	0002      	movs	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e1e3      	b.n	8004228 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e60:	4b38      	ldr	r3, [pc, #224]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	2380      	movs	r3, #128	; 0x80
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d1f0      	bne.n	8003e4e <HAL_RCC_OscConfig+0x236>
 8003e6c:	e000      	b.n	8003e70 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e6e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2208      	movs	r2, #8
 8003e76:	4013      	ands	r3, r2
 8003e78:	d047      	beq.n	8003f0a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003e7a:	4b32      	ldr	r3, [pc, #200]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	2238      	movs	r2, #56	; 0x38
 8003e80:	4013      	ands	r3, r2
 8003e82:	2b18      	cmp	r3, #24
 8003e84:	d10a      	bne.n	8003e9c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003e86:	4b2f      	ldr	r3, [pc, #188]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	d03c      	beq.n	8003f0a <HAL_RCC_OscConfig+0x2f2>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d138      	bne.n	8003f0a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e1c5      	b.n	8004228 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d019      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003ea4:	4b27      	ldr	r3, [pc, #156]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003ea6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ea8:	4b26      	ldr	r3, [pc, #152]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003eaa:	2101      	movs	r1, #1
 8003eac:	430a      	orrs	r2, r1
 8003eae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb0:	f7ff f9fe 	bl	80032b0 <HAL_GetTick>
 8003eb4:	0003      	movs	r3, r0
 8003eb6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003eb8:	e008      	b.n	8003ecc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eba:	f7ff f9f9 	bl	80032b0 <HAL_GetTick>
 8003ebe:	0002      	movs	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e1ad      	b.n	8004228 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ecc:	4b1d      	ldr	r3, [pc, #116]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed0:	2202      	movs	r2, #2
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	d0f1      	beq.n	8003eba <HAL_RCC_OscConfig+0x2a2>
 8003ed6:	e018      	b.n	8003f0a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003ed8:	4b1a      	ldr	r3, [pc, #104]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003eda:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003edc:	4b19      	ldr	r3, [pc, #100]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003ede:	2101      	movs	r1, #1
 8003ee0:	438a      	bics	r2, r1
 8003ee2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee4:	f7ff f9e4 	bl	80032b0 <HAL_GetTick>
 8003ee8:	0003      	movs	r3, r0
 8003eea:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003eec:	e008      	b.n	8003f00 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eee:	f7ff f9df 	bl	80032b0 <HAL_GetTick>
 8003ef2:	0002      	movs	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e193      	b.n	8004228 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f00:	4b10      	ldr	r3, [pc, #64]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f04:	2202      	movs	r2, #2
 8003f06:	4013      	ands	r3, r2
 8003f08:	d1f1      	bne.n	8003eee <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2204      	movs	r2, #4
 8003f10:	4013      	ands	r3, r2
 8003f12:	d100      	bne.n	8003f16 <HAL_RCC_OscConfig+0x2fe>
 8003f14:	e0c6      	b.n	80040a4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f16:	231f      	movs	r3, #31
 8003f18:	18fb      	adds	r3, r7, r3
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003f1e:	4b09      	ldr	r3, [pc, #36]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	2238      	movs	r2, #56	; 0x38
 8003f24:	4013      	ands	r3, r2
 8003f26:	2b20      	cmp	r3, #32
 8003f28:	d11e      	bne.n	8003f68 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003f2a:	4b06      	ldr	r3, [pc, #24]	; (8003f44 <HAL_RCC_OscConfig+0x32c>)
 8003f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2e:	2202      	movs	r2, #2
 8003f30:	4013      	ands	r3, r2
 8003f32:	d100      	bne.n	8003f36 <HAL_RCC_OscConfig+0x31e>
 8003f34:	e0b6      	b.n	80040a4 <HAL_RCC_OscConfig+0x48c>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d000      	beq.n	8003f40 <HAL_RCC_OscConfig+0x328>
 8003f3e:	e0b1      	b.n	80040a4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e171      	b.n	8004228 <HAL_RCC_OscConfig+0x610>
 8003f44:	40021000 	.word	0x40021000
 8003f48:	fffeffff 	.word	0xfffeffff
 8003f4c:	fffbffff 	.word	0xfffbffff
 8003f50:	ffff80ff 	.word	0xffff80ff
 8003f54:	ffffc7ff 	.word	0xffffc7ff
 8003f58:	00f42400 	.word	0x00f42400
 8003f5c:	2000000c 	.word	0x2000000c
 8003f60:	20000010 	.word	0x20000010
 8003f64:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f68:	4bb1      	ldr	r3, [pc, #708]	; (8004230 <HAL_RCC_OscConfig+0x618>)
 8003f6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f6c:	2380      	movs	r3, #128	; 0x80
 8003f6e:	055b      	lsls	r3, r3, #21
 8003f70:	4013      	ands	r3, r2
 8003f72:	d101      	bne.n	8003f78 <HAL_RCC_OscConfig+0x360>
 8003f74:	2301      	movs	r3, #1
 8003f76:	e000      	b.n	8003f7a <HAL_RCC_OscConfig+0x362>
 8003f78:	2300      	movs	r3, #0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d011      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003f7e:	4bac      	ldr	r3, [pc, #688]	; (8004230 <HAL_RCC_OscConfig+0x618>)
 8003f80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f82:	4bab      	ldr	r3, [pc, #684]	; (8004230 <HAL_RCC_OscConfig+0x618>)
 8003f84:	2180      	movs	r1, #128	; 0x80
 8003f86:	0549      	lsls	r1, r1, #21
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	63da      	str	r2, [r3, #60]	; 0x3c
 8003f8c:	4ba8      	ldr	r3, [pc, #672]	; (8004230 <HAL_RCC_OscConfig+0x618>)
 8003f8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f90:	2380      	movs	r3, #128	; 0x80
 8003f92:	055b      	lsls	r3, r3, #21
 8003f94:	4013      	ands	r3, r2
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003f9a:	231f      	movs	r3, #31
 8003f9c:	18fb      	adds	r3, r7, r3
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fa2:	4ba4      	ldr	r3, [pc, #656]	; (8004234 <HAL_RCC_OscConfig+0x61c>)
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	2380      	movs	r3, #128	; 0x80
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	4013      	ands	r3, r2
 8003fac:	d11a      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fae:	4ba1      	ldr	r3, [pc, #644]	; (8004234 <HAL_RCC_OscConfig+0x61c>)
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	4ba0      	ldr	r3, [pc, #640]	; (8004234 <HAL_RCC_OscConfig+0x61c>)
 8003fb4:	2180      	movs	r1, #128	; 0x80
 8003fb6:	0049      	lsls	r1, r1, #1
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003fbc:	f7ff f978 	bl	80032b0 <HAL_GetTick>
 8003fc0:	0003      	movs	r3, r0
 8003fc2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fc4:	e008      	b.n	8003fd8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc6:	f7ff f973 	bl	80032b0 <HAL_GetTick>
 8003fca:	0002      	movs	r2, r0
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e127      	b.n	8004228 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fd8:	4b96      	ldr	r3, [pc, #600]	; (8004234 <HAL_RCC_OscConfig+0x61c>)
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	2380      	movs	r3, #128	; 0x80
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	d0f0      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d106      	bne.n	8003ffa <HAL_RCC_OscConfig+0x3e2>
 8003fec:	4b90      	ldr	r3, [pc, #576]	; (8004230 <HAL_RCC_OscConfig+0x618>)
 8003fee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ff0:	4b8f      	ldr	r3, [pc, #572]	; (8004230 <HAL_RCC_OscConfig+0x618>)
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ff8:	e01c      	b.n	8004034 <HAL_RCC_OscConfig+0x41c>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	2b05      	cmp	r3, #5
 8004000:	d10c      	bne.n	800401c <HAL_RCC_OscConfig+0x404>
 8004002:	4b8b      	ldr	r3, [pc, #556]	; (8004230 <HAL_RCC_OscConfig+0x618>)
 8004004:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004006:	4b8a      	ldr	r3, [pc, #552]	; (8004230 <HAL_RCC_OscConfig+0x618>)
 8004008:	2104      	movs	r1, #4
 800400a:	430a      	orrs	r2, r1
 800400c:	65da      	str	r2, [r3, #92]	; 0x5c
 800400e:	4b88      	ldr	r3, [pc, #544]	; (8004230 <HAL_RCC_OscConfig+0x618>)
 8004010:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004012:	4b87      	ldr	r3, [pc, #540]	; (8004230 <HAL_RCC_OscConfig+0x618>)
 8004014:	2101      	movs	r1, #1
 8004016:	430a      	orrs	r2, r1
 8004018:	65da      	str	r2, [r3, #92]	; 0x5c
 800401a:	e00b      	b.n	8004034 <HAL_RCC_OscConfig+0x41c>
 800401c:	4b84      	ldr	r3, [pc, #528]	; (8004230 <HAL_RCC_OscConfig+0x618>)
 800401e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004020:	4b83      	ldr	r3, [pc, #524]	; (8004230 <HAL_RCC_OscConfig+0x618>)
 8004022:	2101      	movs	r1, #1
 8004024:	438a      	bics	r2, r1
 8004026:	65da      	str	r2, [r3, #92]	; 0x5c
 8004028:	4b81      	ldr	r3, [pc, #516]	; (8004230 <HAL_RCC_OscConfig+0x618>)
 800402a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800402c:	4b80      	ldr	r3, [pc, #512]	; (8004230 <HAL_RCC_OscConfig+0x618>)
 800402e:	2104      	movs	r1, #4
 8004030:	438a      	bics	r2, r1
 8004032:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d014      	beq.n	8004066 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403c:	f7ff f938 	bl	80032b0 <HAL_GetTick>
 8004040:	0003      	movs	r3, r0
 8004042:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004044:	e009      	b.n	800405a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004046:	f7ff f933 	bl	80032b0 <HAL_GetTick>
 800404a:	0002      	movs	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	4a79      	ldr	r2, [pc, #484]	; (8004238 <HAL_RCC_OscConfig+0x620>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e0e6      	b.n	8004228 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800405a:	4b75      	ldr	r3, [pc, #468]	; (8004230 <HAL_RCC_OscConfig+0x618>)
 800405c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800405e:	2202      	movs	r2, #2
 8004060:	4013      	ands	r3, r2
 8004062:	d0f0      	beq.n	8004046 <HAL_RCC_OscConfig+0x42e>
 8004064:	e013      	b.n	800408e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004066:	f7ff f923 	bl	80032b0 <HAL_GetTick>
 800406a:	0003      	movs	r3, r0
 800406c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800406e:	e009      	b.n	8004084 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004070:	f7ff f91e 	bl	80032b0 <HAL_GetTick>
 8004074:	0002      	movs	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	4a6f      	ldr	r2, [pc, #444]	; (8004238 <HAL_RCC_OscConfig+0x620>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e0d1      	b.n	8004228 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004084:	4b6a      	ldr	r3, [pc, #424]	; (8004230 <HAL_RCC_OscConfig+0x618>)
 8004086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004088:	2202      	movs	r2, #2
 800408a:	4013      	ands	r3, r2
 800408c:	d1f0      	bne.n	8004070 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800408e:	231f      	movs	r3, #31
 8004090:	18fb      	adds	r3, r7, r3
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d105      	bne.n	80040a4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004098:	4b65      	ldr	r3, [pc, #404]	; (8004230 <HAL_RCC_OscConfig+0x618>)
 800409a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800409c:	4b64      	ldr	r3, [pc, #400]	; (8004230 <HAL_RCC_OscConfig+0x618>)
 800409e:	4967      	ldr	r1, [pc, #412]	; (800423c <HAL_RCC_OscConfig+0x624>)
 80040a0:	400a      	ands	r2, r1
 80040a2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	69db      	ldr	r3, [r3, #28]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d100      	bne.n	80040ae <HAL_RCC_OscConfig+0x496>
 80040ac:	e0bb      	b.n	8004226 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040ae:	4b60      	ldr	r3, [pc, #384]	; (8004230 <HAL_RCC_OscConfig+0x618>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	2238      	movs	r2, #56	; 0x38
 80040b4:	4013      	ands	r3, r2
 80040b6:	2b10      	cmp	r3, #16
 80040b8:	d100      	bne.n	80040bc <HAL_RCC_OscConfig+0x4a4>
 80040ba:	e07b      	b.n	80041b4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d156      	bne.n	8004172 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c4:	4b5a      	ldr	r3, [pc, #360]	; (8004230 <HAL_RCC_OscConfig+0x618>)
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	4b59      	ldr	r3, [pc, #356]	; (8004230 <HAL_RCC_OscConfig+0x618>)
 80040ca:	495d      	ldr	r1, [pc, #372]	; (8004240 <HAL_RCC_OscConfig+0x628>)
 80040cc:	400a      	ands	r2, r1
 80040ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d0:	f7ff f8ee 	bl	80032b0 <HAL_GetTick>
 80040d4:	0003      	movs	r3, r0
 80040d6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040d8:	e008      	b.n	80040ec <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040da:	f7ff f8e9 	bl	80032b0 <HAL_GetTick>
 80040de:	0002      	movs	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e09d      	b.n	8004228 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040ec:	4b50      	ldr	r3, [pc, #320]	; (8004230 <HAL_RCC_OscConfig+0x618>)
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	2380      	movs	r3, #128	; 0x80
 80040f2:	049b      	lsls	r3, r3, #18
 80040f4:	4013      	ands	r3, r2
 80040f6:	d1f0      	bne.n	80040da <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040f8:	4b4d      	ldr	r3, [pc, #308]	; (8004230 <HAL_RCC_OscConfig+0x618>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	4a51      	ldr	r2, [pc, #324]	; (8004244 <HAL_RCC_OscConfig+0x62c>)
 80040fe:	4013      	ands	r3, r2
 8004100:	0019      	movs	r1, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1a      	ldr	r2, [r3, #32]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004110:	021b      	lsls	r3, r3, #8
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004118:	431a      	orrs	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004124:	431a      	orrs	r2, r3
 8004126:	4b42      	ldr	r3, [pc, #264]	; (8004230 <HAL_RCC_OscConfig+0x618>)
 8004128:	430a      	orrs	r2, r1
 800412a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800412c:	4b40      	ldr	r3, [pc, #256]	; (8004230 <HAL_RCC_OscConfig+0x618>)
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	4b3f      	ldr	r3, [pc, #252]	; (8004230 <HAL_RCC_OscConfig+0x618>)
 8004132:	2180      	movs	r1, #128	; 0x80
 8004134:	0449      	lsls	r1, r1, #17
 8004136:	430a      	orrs	r2, r1
 8004138:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800413a:	4b3d      	ldr	r3, [pc, #244]	; (8004230 <HAL_RCC_OscConfig+0x618>)
 800413c:	68da      	ldr	r2, [r3, #12]
 800413e:	4b3c      	ldr	r3, [pc, #240]	; (8004230 <HAL_RCC_OscConfig+0x618>)
 8004140:	2180      	movs	r1, #128	; 0x80
 8004142:	0549      	lsls	r1, r1, #21
 8004144:	430a      	orrs	r2, r1
 8004146:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004148:	f7ff f8b2 	bl	80032b0 <HAL_GetTick>
 800414c:	0003      	movs	r3, r0
 800414e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004152:	f7ff f8ad 	bl	80032b0 <HAL_GetTick>
 8004156:	0002      	movs	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e061      	b.n	8004228 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004164:	4b32      	ldr	r3, [pc, #200]	; (8004230 <HAL_RCC_OscConfig+0x618>)
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	2380      	movs	r3, #128	; 0x80
 800416a:	049b      	lsls	r3, r3, #18
 800416c:	4013      	ands	r3, r2
 800416e:	d0f0      	beq.n	8004152 <HAL_RCC_OscConfig+0x53a>
 8004170:	e059      	b.n	8004226 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004172:	4b2f      	ldr	r3, [pc, #188]	; (8004230 <HAL_RCC_OscConfig+0x618>)
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	4b2e      	ldr	r3, [pc, #184]	; (8004230 <HAL_RCC_OscConfig+0x618>)
 8004178:	4931      	ldr	r1, [pc, #196]	; (8004240 <HAL_RCC_OscConfig+0x628>)
 800417a:	400a      	ands	r2, r1
 800417c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417e:	f7ff f897 	bl	80032b0 <HAL_GetTick>
 8004182:	0003      	movs	r3, r0
 8004184:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004188:	f7ff f892 	bl	80032b0 <HAL_GetTick>
 800418c:	0002      	movs	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e046      	b.n	8004228 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800419a:	4b25      	ldr	r3, [pc, #148]	; (8004230 <HAL_RCC_OscConfig+0x618>)
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	2380      	movs	r3, #128	; 0x80
 80041a0:	049b      	lsls	r3, r3, #18
 80041a2:	4013      	ands	r3, r2
 80041a4:	d1f0      	bne.n	8004188 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80041a6:	4b22      	ldr	r3, [pc, #136]	; (8004230 <HAL_RCC_OscConfig+0x618>)
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	4b21      	ldr	r3, [pc, #132]	; (8004230 <HAL_RCC_OscConfig+0x618>)
 80041ac:	4926      	ldr	r1, [pc, #152]	; (8004248 <HAL_RCC_OscConfig+0x630>)
 80041ae:	400a      	ands	r2, r1
 80041b0:	60da      	str	r2, [r3, #12]
 80041b2:	e038      	b.n	8004226 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d101      	bne.n	80041c0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e033      	b.n	8004228 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80041c0:	4b1b      	ldr	r3, [pc, #108]	; (8004230 <HAL_RCC_OscConfig+0x618>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	2203      	movs	r2, #3
 80041ca:	401a      	ands	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d126      	bne.n	8004222 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	2270      	movs	r2, #112	; 0x70
 80041d8:	401a      	ands	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041de:	429a      	cmp	r2, r3
 80041e0:	d11f      	bne.n	8004222 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	23fe      	movs	r3, #254	; 0xfe
 80041e6:	01db      	lsls	r3, r3, #7
 80041e8:	401a      	ands	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ee:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d116      	bne.n	8004222 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	23f8      	movs	r3, #248	; 0xf8
 80041f8:	039b      	lsls	r3, r3, #14
 80041fa:	401a      	ands	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004200:	429a      	cmp	r2, r3
 8004202:	d10e      	bne.n	8004222 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	23e0      	movs	r3, #224	; 0xe0
 8004208:	051b      	lsls	r3, r3, #20
 800420a:	401a      	ands	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004210:	429a      	cmp	r2, r3
 8004212:	d106      	bne.n	8004222 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	0f5b      	lsrs	r3, r3, #29
 8004218:	075a      	lsls	r2, r3, #29
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800421e:	429a      	cmp	r2, r3
 8004220:	d001      	beq.n	8004226 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	0018      	movs	r0, r3
 800422a:	46bd      	mov	sp, r7
 800422c:	b008      	add	sp, #32
 800422e:	bd80      	pop	{r7, pc}
 8004230:	40021000 	.word	0x40021000
 8004234:	40007000 	.word	0x40007000
 8004238:	00001388 	.word	0x00001388
 800423c:	efffffff 	.word	0xefffffff
 8004240:	feffffff 	.word	0xfeffffff
 8004244:	11c1808c 	.word	0x11c1808c
 8004248:	eefefffc 	.word	0xeefefffc

0800424c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e0e9      	b.n	8004434 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004260:	4b76      	ldr	r3, [pc, #472]	; (800443c <HAL_RCC_ClockConfig+0x1f0>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2207      	movs	r2, #7
 8004266:	4013      	ands	r3, r2
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d91e      	bls.n	80042ac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800426e:	4b73      	ldr	r3, [pc, #460]	; (800443c <HAL_RCC_ClockConfig+0x1f0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2207      	movs	r2, #7
 8004274:	4393      	bics	r3, r2
 8004276:	0019      	movs	r1, r3
 8004278:	4b70      	ldr	r3, [pc, #448]	; (800443c <HAL_RCC_ClockConfig+0x1f0>)
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004280:	f7ff f816 	bl	80032b0 <HAL_GetTick>
 8004284:	0003      	movs	r3, r0
 8004286:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004288:	e009      	b.n	800429e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800428a:	f7ff f811 	bl	80032b0 <HAL_GetTick>
 800428e:	0002      	movs	r2, r0
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	4a6a      	ldr	r2, [pc, #424]	; (8004440 <HAL_RCC_ClockConfig+0x1f4>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d901      	bls.n	800429e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e0ca      	b.n	8004434 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800429e:	4b67      	ldr	r3, [pc, #412]	; (800443c <HAL_RCC_ClockConfig+0x1f0>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2207      	movs	r2, #7
 80042a4:	4013      	ands	r3, r2
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d1ee      	bne.n	800428a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2202      	movs	r2, #2
 80042b2:	4013      	ands	r3, r2
 80042b4:	d015      	beq.n	80042e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2204      	movs	r2, #4
 80042bc:	4013      	ands	r3, r2
 80042be:	d006      	beq.n	80042ce <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80042c0:	4b60      	ldr	r3, [pc, #384]	; (8004444 <HAL_RCC_ClockConfig+0x1f8>)
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	4b5f      	ldr	r3, [pc, #380]	; (8004444 <HAL_RCC_ClockConfig+0x1f8>)
 80042c6:	21e0      	movs	r1, #224	; 0xe0
 80042c8:	01c9      	lsls	r1, r1, #7
 80042ca:	430a      	orrs	r2, r1
 80042cc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042ce:	4b5d      	ldr	r3, [pc, #372]	; (8004444 <HAL_RCC_ClockConfig+0x1f8>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	4a5d      	ldr	r2, [pc, #372]	; (8004448 <HAL_RCC_ClockConfig+0x1fc>)
 80042d4:	4013      	ands	r3, r2
 80042d6:	0019      	movs	r1, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689a      	ldr	r2, [r3, #8]
 80042dc:	4b59      	ldr	r3, [pc, #356]	; (8004444 <HAL_RCC_ClockConfig+0x1f8>)
 80042de:	430a      	orrs	r2, r1
 80042e0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2201      	movs	r2, #1
 80042e8:	4013      	ands	r3, r2
 80042ea:	d057      	beq.n	800439c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d107      	bne.n	8004304 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042f4:	4b53      	ldr	r3, [pc, #332]	; (8004444 <HAL_RCC_ClockConfig+0x1f8>)
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	2380      	movs	r3, #128	; 0x80
 80042fa:	029b      	lsls	r3, r3, #10
 80042fc:	4013      	ands	r3, r2
 80042fe:	d12b      	bne.n	8004358 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e097      	b.n	8004434 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	2b02      	cmp	r3, #2
 800430a:	d107      	bne.n	800431c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800430c:	4b4d      	ldr	r3, [pc, #308]	; (8004444 <HAL_RCC_ClockConfig+0x1f8>)
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	2380      	movs	r3, #128	; 0x80
 8004312:	049b      	lsls	r3, r3, #18
 8004314:	4013      	ands	r3, r2
 8004316:	d11f      	bne.n	8004358 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e08b      	b.n	8004434 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d107      	bne.n	8004334 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004324:	4b47      	ldr	r3, [pc, #284]	; (8004444 <HAL_RCC_ClockConfig+0x1f8>)
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	2380      	movs	r3, #128	; 0x80
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	4013      	ands	r3, r2
 800432e:	d113      	bne.n	8004358 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e07f      	b.n	8004434 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	2b03      	cmp	r3, #3
 800433a:	d106      	bne.n	800434a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800433c:	4b41      	ldr	r3, [pc, #260]	; (8004444 <HAL_RCC_ClockConfig+0x1f8>)
 800433e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004340:	2202      	movs	r2, #2
 8004342:	4013      	ands	r3, r2
 8004344:	d108      	bne.n	8004358 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e074      	b.n	8004434 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800434a:	4b3e      	ldr	r3, [pc, #248]	; (8004444 <HAL_RCC_ClockConfig+0x1f8>)
 800434c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800434e:	2202      	movs	r2, #2
 8004350:	4013      	ands	r3, r2
 8004352:	d101      	bne.n	8004358 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e06d      	b.n	8004434 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004358:	4b3a      	ldr	r3, [pc, #232]	; (8004444 <HAL_RCC_ClockConfig+0x1f8>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	2207      	movs	r2, #7
 800435e:	4393      	bics	r3, r2
 8004360:	0019      	movs	r1, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	4b37      	ldr	r3, [pc, #220]	; (8004444 <HAL_RCC_ClockConfig+0x1f8>)
 8004368:	430a      	orrs	r2, r1
 800436a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800436c:	f7fe ffa0 	bl	80032b0 <HAL_GetTick>
 8004370:	0003      	movs	r3, r0
 8004372:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004374:	e009      	b.n	800438a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004376:	f7fe ff9b 	bl	80032b0 <HAL_GetTick>
 800437a:	0002      	movs	r2, r0
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	4a2f      	ldr	r2, [pc, #188]	; (8004440 <HAL_RCC_ClockConfig+0x1f4>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d901      	bls.n	800438a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e054      	b.n	8004434 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800438a:	4b2e      	ldr	r3, [pc, #184]	; (8004444 <HAL_RCC_ClockConfig+0x1f8>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	2238      	movs	r2, #56	; 0x38
 8004390:	401a      	ands	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	429a      	cmp	r2, r3
 800439a:	d1ec      	bne.n	8004376 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800439c:	4b27      	ldr	r3, [pc, #156]	; (800443c <HAL_RCC_ClockConfig+0x1f0>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2207      	movs	r2, #7
 80043a2:	4013      	ands	r3, r2
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d21e      	bcs.n	80043e8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043aa:	4b24      	ldr	r3, [pc, #144]	; (800443c <HAL_RCC_ClockConfig+0x1f0>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2207      	movs	r2, #7
 80043b0:	4393      	bics	r3, r2
 80043b2:	0019      	movs	r1, r3
 80043b4:	4b21      	ldr	r3, [pc, #132]	; (800443c <HAL_RCC_ClockConfig+0x1f0>)
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80043bc:	f7fe ff78 	bl	80032b0 <HAL_GetTick>
 80043c0:	0003      	movs	r3, r0
 80043c2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80043c4:	e009      	b.n	80043da <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043c6:	f7fe ff73 	bl	80032b0 <HAL_GetTick>
 80043ca:	0002      	movs	r2, r0
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	4a1b      	ldr	r2, [pc, #108]	; (8004440 <HAL_RCC_ClockConfig+0x1f4>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e02c      	b.n	8004434 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80043da:	4b18      	ldr	r3, [pc, #96]	; (800443c <HAL_RCC_ClockConfig+0x1f0>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2207      	movs	r2, #7
 80043e0:	4013      	ands	r3, r2
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d1ee      	bne.n	80043c6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2204      	movs	r2, #4
 80043ee:	4013      	ands	r3, r2
 80043f0:	d009      	beq.n	8004406 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80043f2:	4b14      	ldr	r3, [pc, #80]	; (8004444 <HAL_RCC_ClockConfig+0x1f8>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	4a15      	ldr	r2, [pc, #84]	; (800444c <HAL_RCC_ClockConfig+0x200>)
 80043f8:	4013      	ands	r3, r2
 80043fa:	0019      	movs	r1, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68da      	ldr	r2, [r3, #12]
 8004400:	4b10      	ldr	r3, [pc, #64]	; (8004444 <HAL_RCC_ClockConfig+0x1f8>)
 8004402:	430a      	orrs	r2, r1
 8004404:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004406:	f000 f829 	bl	800445c <HAL_RCC_GetSysClockFreq>
 800440a:	0001      	movs	r1, r0
 800440c:	4b0d      	ldr	r3, [pc, #52]	; (8004444 <HAL_RCC_ClockConfig+0x1f8>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	0a1b      	lsrs	r3, r3, #8
 8004412:	220f      	movs	r2, #15
 8004414:	401a      	ands	r2, r3
 8004416:	4b0e      	ldr	r3, [pc, #56]	; (8004450 <HAL_RCC_ClockConfig+0x204>)
 8004418:	0092      	lsls	r2, r2, #2
 800441a:	58d3      	ldr	r3, [r2, r3]
 800441c:	221f      	movs	r2, #31
 800441e:	4013      	ands	r3, r2
 8004420:	000a      	movs	r2, r1
 8004422:	40da      	lsrs	r2, r3
 8004424:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <HAL_RCC_ClockConfig+0x208>)
 8004426:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004428:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <HAL_RCC_ClockConfig+0x20c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	0018      	movs	r0, r3
 800442e:	f7fe fee3 	bl	80031f8 <HAL_InitTick>
 8004432:	0003      	movs	r3, r0
}
 8004434:	0018      	movs	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	b004      	add	sp, #16
 800443a:	bd80      	pop	{r7, pc}
 800443c:	40022000 	.word	0x40022000
 8004440:	00001388 	.word	0x00001388
 8004444:	40021000 	.word	0x40021000
 8004448:	fffff0ff 	.word	0xfffff0ff
 800444c:	ffff8fff 	.word	0xffff8fff
 8004450:	0800ac44 	.word	0x0800ac44
 8004454:	2000000c 	.word	0x2000000c
 8004458:	20000010 	.word	0x20000010

0800445c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004462:	4b3c      	ldr	r3, [pc, #240]	; (8004554 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	2238      	movs	r2, #56	; 0x38
 8004468:	4013      	ands	r3, r2
 800446a:	d10f      	bne.n	800448c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800446c:	4b39      	ldr	r3, [pc, #228]	; (8004554 <HAL_RCC_GetSysClockFreq+0xf8>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	0adb      	lsrs	r3, r3, #11
 8004472:	2207      	movs	r2, #7
 8004474:	4013      	ands	r3, r2
 8004476:	2201      	movs	r2, #1
 8004478:	409a      	lsls	r2, r3
 800447a:	0013      	movs	r3, r2
 800447c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800447e:	6839      	ldr	r1, [r7, #0]
 8004480:	4835      	ldr	r0, [pc, #212]	; (8004558 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004482:	f7fb fe5b 	bl	800013c <__udivsi3>
 8004486:	0003      	movs	r3, r0
 8004488:	613b      	str	r3, [r7, #16]
 800448a:	e05d      	b.n	8004548 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800448c:	4b31      	ldr	r3, [pc, #196]	; (8004554 <HAL_RCC_GetSysClockFreq+0xf8>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	2238      	movs	r2, #56	; 0x38
 8004492:	4013      	ands	r3, r2
 8004494:	2b08      	cmp	r3, #8
 8004496:	d102      	bne.n	800449e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004498:	4b30      	ldr	r3, [pc, #192]	; (800455c <HAL_RCC_GetSysClockFreq+0x100>)
 800449a:	613b      	str	r3, [r7, #16]
 800449c:	e054      	b.n	8004548 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800449e:	4b2d      	ldr	r3, [pc, #180]	; (8004554 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	2238      	movs	r2, #56	; 0x38
 80044a4:	4013      	ands	r3, r2
 80044a6:	2b10      	cmp	r3, #16
 80044a8:	d138      	bne.n	800451c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80044aa:	4b2a      	ldr	r3, [pc, #168]	; (8004554 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	2203      	movs	r2, #3
 80044b0:	4013      	ands	r3, r2
 80044b2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044b4:	4b27      	ldr	r3, [pc, #156]	; (8004554 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	091b      	lsrs	r3, r3, #4
 80044ba:	2207      	movs	r2, #7
 80044bc:	4013      	ands	r3, r2
 80044be:	3301      	adds	r3, #1
 80044c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2b03      	cmp	r3, #3
 80044c6:	d10d      	bne.n	80044e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044c8:	68b9      	ldr	r1, [r7, #8]
 80044ca:	4824      	ldr	r0, [pc, #144]	; (800455c <HAL_RCC_GetSysClockFreq+0x100>)
 80044cc:	f7fb fe36 	bl	800013c <__udivsi3>
 80044d0:	0003      	movs	r3, r0
 80044d2:	0019      	movs	r1, r3
 80044d4:	4b1f      	ldr	r3, [pc, #124]	; (8004554 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	0a1b      	lsrs	r3, r3, #8
 80044da:	227f      	movs	r2, #127	; 0x7f
 80044dc:	4013      	ands	r3, r2
 80044de:	434b      	muls	r3, r1
 80044e0:	617b      	str	r3, [r7, #20]
        break;
 80044e2:	e00d      	b.n	8004500 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80044e4:	68b9      	ldr	r1, [r7, #8]
 80044e6:	481c      	ldr	r0, [pc, #112]	; (8004558 <HAL_RCC_GetSysClockFreq+0xfc>)
 80044e8:	f7fb fe28 	bl	800013c <__udivsi3>
 80044ec:	0003      	movs	r3, r0
 80044ee:	0019      	movs	r1, r3
 80044f0:	4b18      	ldr	r3, [pc, #96]	; (8004554 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	0a1b      	lsrs	r3, r3, #8
 80044f6:	227f      	movs	r2, #127	; 0x7f
 80044f8:	4013      	ands	r3, r2
 80044fa:	434b      	muls	r3, r1
 80044fc:	617b      	str	r3, [r7, #20]
        break;
 80044fe:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004500:	4b14      	ldr	r3, [pc, #80]	; (8004554 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	0f5b      	lsrs	r3, r3, #29
 8004506:	2207      	movs	r2, #7
 8004508:	4013      	ands	r3, r2
 800450a:	3301      	adds	r3, #1
 800450c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800450e:	6879      	ldr	r1, [r7, #4]
 8004510:	6978      	ldr	r0, [r7, #20]
 8004512:	f7fb fe13 	bl	800013c <__udivsi3>
 8004516:	0003      	movs	r3, r0
 8004518:	613b      	str	r3, [r7, #16]
 800451a:	e015      	b.n	8004548 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800451c:	4b0d      	ldr	r3, [pc, #52]	; (8004554 <HAL_RCC_GetSysClockFreq+0xf8>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	2238      	movs	r2, #56	; 0x38
 8004522:	4013      	ands	r3, r2
 8004524:	2b20      	cmp	r3, #32
 8004526:	d103      	bne.n	8004530 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004528:	2380      	movs	r3, #128	; 0x80
 800452a:	021b      	lsls	r3, r3, #8
 800452c:	613b      	str	r3, [r7, #16]
 800452e:	e00b      	b.n	8004548 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004530:	4b08      	ldr	r3, [pc, #32]	; (8004554 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	2238      	movs	r2, #56	; 0x38
 8004536:	4013      	ands	r3, r2
 8004538:	2b18      	cmp	r3, #24
 800453a:	d103      	bne.n	8004544 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800453c:	23fa      	movs	r3, #250	; 0xfa
 800453e:	01db      	lsls	r3, r3, #7
 8004540:	613b      	str	r3, [r7, #16]
 8004542:	e001      	b.n	8004548 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004548:	693b      	ldr	r3, [r7, #16]
}
 800454a:	0018      	movs	r0, r3
 800454c:	46bd      	mov	sp, r7
 800454e:	b006      	add	sp, #24
 8004550:	bd80      	pop	{r7, pc}
 8004552:	46c0      	nop			; (mov r8, r8)
 8004554:	40021000 	.word	0x40021000
 8004558:	00f42400 	.word	0x00f42400
 800455c:	007a1200 	.word	0x007a1200

08004560 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004564:	4b02      	ldr	r3, [pc, #8]	; (8004570 <HAL_RCC_GetHCLKFreq+0x10>)
 8004566:	681b      	ldr	r3, [r3, #0]
}
 8004568:	0018      	movs	r0, r3
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	46c0      	nop			; (mov r8, r8)
 8004570:	2000000c 	.word	0x2000000c

08004574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004574:	b5b0      	push	{r4, r5, r7, lr}
 8004576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004578:	f7ff fff2 	bl	8004560 <HAL_RCC_GetHCLKFreq>
 800457c:	0004      	movs	r4, r0
 800457e:	f7ff fb3f 	bl	8003c00 <LL_RCC_GetAPB1Prescaler>
 8004582:	0003      	movs	r3, r0
 8004584:	0b1a      	lsrs	r2, r3, #12
 8004586:	4b05      	ldr	r3, [pc, #20]	; (800459c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004588:	0092      	lsls	r2, r2, #2
 800458a:	58d3      	ldr	r3, [r2, r3]
 800458c:	221f      	movs	r2, #31
 800458e:	4013      	ands	r3, r2
 8004590:	40dc      	lsrs	r4, r3
 8004592:	0023      	movs	r3, r4
}
 8004594:	0018      	movs	r0, r3
 8004596:	46bd      	mov	sp, r7
 8004598:	bdb0      	pop	{r4, r5, r7, pc}
 800459a:	46c0      	nop			; (mov r8, r8)
 800459c:	0800ac84 	.word	0x0800ac84

080045a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80045a8:	2313      	movs	r3, #19
 80045aa:	18fb      	adds	r3, r7, r3
 80045ac:	2200      	movs	r2, #0
 80045ae:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045b0:	2312      	movs	r3, #18
 80045b2:	18fb      	adds	r3, r7, r3
 80045b4:	2200      	movs	r2, #0
 80045b6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	2380      	movs	r3, #128	; 0x80
 80045be:	029b      	lsls	r3, r3, #10
 80045c0:	4013      	ands	r3, r2
 80045c2:	d100      	bne.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80045c4:	e0a3      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045c6:	2011      	movs	r0, #17
 80045c8:	183b      	adds	r3, r7, r0
 80045ca:	2200      	movs	r2, #0
 80045cc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045ce:	4bc3      	ldr	r3, [pc, #780]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045d2:	2380      	movs	r3, #128	; 0x80
 80045d4:	055b      	lsls	r3, r3, #21
 80045d6:	4013      	ands	r3, r2
 80045d8:	d110      	bne.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045da:	4bc0      	ldr	r3, [pc, #768]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045de:	4bbf      	ldr	r3, [pc, #764]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045e0:	2180      	movs	r1, #128	; 0x80
 80045e2:	0549      	lsls	r1, r1, #21
 80045e4:	430a      	orrs	r2, r1
 80045e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80045e8:	4bbc      	ldr	r3, [pc, #752]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045ec:	2380      	movs	r3, #128	; 0x80
 80045ee:	055b      	lsls	r3, r3, #21
 80045f0:	4013      	ands	r3, r2
 80045f2:	60bb      	str	r3, [r7, #8]
 80045f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045f6:	183b      	adds	r3, r7, r0
 80045f8:	2201      	movs	r2, #1
 80045fa:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045fc:	4bb8      	ldr	r3, [pc, #736]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	4bb7      	ldr	r3, [pc, #732]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004602:	2180      	movs	r1, #128	; 0x80
 8004604:	0049      	lsls	r1, r1, #1
 8004606:	430a      	orrs	r2, r1
 8004608:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800460a:	f7fe fe51 	bl	80032b0 <HAL_GetTick>
 800460e:	0003      	movs	r3, r0
 8004610:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004612:	e00b      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004614:	f7fe fe4c 	bl	80032b0 <HAL_GetTick>
 8004618:	0002      	movs	r2, r0
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d904      	bls.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004622:	2313      	movs	r3, #19
 8004624:	18fb      	adds	r3, r7, r3
 8004626:	2203      	movs	r2, #3
 8004628:	701a      	strb	r2, [r3, #0]
        break;
 800462a:	e005      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800462c:	4bac      	ldr	r3, [pc, #688]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	2380      	movs	r3, #128	; 0x80
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	4013      	ands	r3, r2
 8004636:	d0ed      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004638:	2313      	movs	r3, #19
 800463a:	18fb      	adds	r3, r7, r3
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d154      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004642:	4ba6      	ldr	r3, [pc, #664]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004644:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004646:	23c0      	movs	r3, #192	; 0xc0
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4013      	ands	r3, r2
 800464c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d019      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	429a      	cmp	r2, r3
 800465c:	d014      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800465e:	4b9f      	ldr	r3, [pc, #636]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004662:	4aa0      	ldr	r2, [pc, #640]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004664:	4013      	ands	r3, r2
 8004666:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004668:	4b9c      	ldr	r3, [pc, #624]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800466a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800466c:	4b9b      	ldr	r3, [pc, #620]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800466e:	2180      	movs	r1, #128	; 0x80
 8004670:	0249      	lsls	r1, r1, #9
 8004672:	430a      	orrs	r2, r1
 8004674:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004676:	4b99      	ldr	r3, [pc, #612]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004678:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800467a:	4b98      	ldr	r3, [pc, #608]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800467c:	499a      	ldr	r1, [pc, #616]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800467e:	400a      	ands	r2, r1
 8004680:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004682:	4b96      	ldr	r3, [pc, #600]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	2201      	movs	r2, #1
 800468c:	4013      	ands	r3, r2
 800468e:	d016      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004690:	f7fe fe0e 	bl	80032b0 <HAL_GetTick>
 8004694:	0003      	movs	r3, r0
 8004696:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004698:	e00c      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800469a:	f7fe fe09 	bl	80032b0 <HAL_GetTick>
 800469e:	0002      	movs	r2, r0
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	4a91      	ldr	r2, [pc, #580]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d904      	bls.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80046aa:	2313      	movs	r3, #19
 80046ac:	18fb      	adds	r3, r7, r3
 80046ae:	2203      	movs	r2, #3
 80046b0:	701a      	strb	r2, [r3, #0]
            break;
 80046b2:	e004      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046b4:	4b89      	ldr	r3, [pc, #548]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b8:	2202      	movs	r2, #2
 80046ba:	4013      	ands	r3, r2
 80046bc:	d0ed      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80046be:	2313      	movs	r3, #19
 80046c0:	18fb      	adds	r3, r7, r3
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10a      	bne.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046c8:	4b84      	ldr	r3, [pc, #528]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046cc:	4a85      	ldr	r2, [pc, #532]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80046ce:	4013      	ands	r3, r2
 80046d0:	0019      	movs	r1, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046d6:	4b81      	ldr	r3, [pc, #516]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046d8:	430a      	orrs	r2, r1
 80046da:	65da      	str	r2, [r3, #92]	; 0x5c
 80046dc:	e00c      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046de:	2312      	movs	r3, #18
 80046e0:	18fb      	adds	r3, r7, r3
 80046e2:	2213      	movs	r2, #19
 80046e4:	18ba      	adds	r2, r7, r2
 80046e6:	7812      	ldrb	r2, [r2, #0]
 80046e8:	701a      	strb	r2, [r3, #0]
 80046ea:	e005      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ec:	2312      	movs	r3, #18
 80046ee:	18fb      	adds	r3, r7, r3
 80046f0:	2213      	movs	r2, #19
 80046f2:	18ba      	adds	r2, r7, r2
 80046f4:	7812      	ldrb	r2, [r2, #0]
 80046f6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046f8:	2311      	movs	r3, #17
 80046fa:	18fb      	adds	r3, r7, r3
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d105      	bne.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004702:	4b76      	ldr	r3, [pc, #472]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004704:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004706:	4b75      	ldr	r3, [pc, #468]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004708:	4979      	ldr	r1, [pc, #484]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800470a:	400a      	ands	r2, r1
 800470c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2201      	movs	r2, #1
 8004714:	4013      	ands	r3, r2
 8004716:	d009      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004718:	4b70      	ldr	r3, [pc, #448]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800471a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471c:	2203      	movs	r2, #3
 800471e:	4393      	bics	r3, r2
 8004720:	0019      	movs	r1, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	4b6d      	ldr	r3, [pc, #436]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004728:	430a      	orrs	r2, r1
 800472a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2202      	movs	r2, #2
 8004732:	4013      	ands	r3, r2
 8004734:	d009      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004736:	4b69      	ldr	r3, [pc, #420]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800473a:	220c      	movs	r2, #12
 800473c:	4393      	bics	r3, r2
 800473e:	0019      	movs	r1, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	4b65      	ldr	r3, [pc, #404]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004746:	430a      	orrs	r2, r1
 8004748:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2210      	movs	r2, #16
 8004750:	4013      	ands	r3, r2
 8004752:	d009      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004754:	4b61      	ldr	r3, [pc, #388]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004758:	4a66      	ldr	r2, [pc, #408]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800475a:	4013      	ands	r3, r2
 800475c:	0019      	movs	r1, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	4b5e      	ldr	r3, [pc, #376]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004764:	430a      	orrs	r2, r1
 8004766:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	2380      	movs	r3, #128	; 0x80
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4013      	ands	r3, r2
 8004772:	d009      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004774:	4b59      	ldr	r3, [pc, #356]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004778:	4a5f      	ldr	r2, [pc, #380]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800477a:	4013      	ands	r3, r2
 800477c:	0019      	movs	r1, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	699a      	ldr	r2, [r3, #24]
 8004782:	4b56      	ldr	r3, [pc, #344]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004784:	430a      	orrs	r2, r1
 8004786:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	2380      	movs	r3, #128	; 0x80
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	4013      	ands	r3, r2
 8004792:	d009      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004794:	4b51      	ldr	r3, [pc, #324]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004798:	4a58      	ldr	r2, [pc, #352]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800479a:	4013      	ands	r3, r2
 800479c:	0019      	movs	r1, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	69da      	ldr	r2, [r3, #28]
 80047a2:	4b4e      	ldr	r3, [pc, #312]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047a4:	430a      	orrs	r2, r1
 80047a6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2220      	movs	r2, #32
 80047ae:	4013      	ands	r3, r2
 80047b0:	d009      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047b2:	4b4a      	ldr	r3, [pc, #296]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b6:	4a52      	ldr	r2, [pc, #328]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80047b8:	4013      	ands	r3, r2
 80047ba:	0019      	movs	r1, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691a      	ldr	r2, [r3, #16]
 80047c0:	4b46      	ldr	r3, [pc, #280]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047c2:	430a      	orrs	r2, r1
 80047c4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	2380      	movs	r3, #128	; 0x80
 80047cc:	01db      	lsls	r3, r3, #7
 80047ce:	4013      	ands	r3, r2
 80047d0:	d015      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047d2:	4b42      	ldr	r3, [pc, #264]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	0899      	lsrs	r1, r3, #2
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1a      	ldr	r2, [r3, #32]
 80047de:	4b3f      	ldr	r3, [pc, #252]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047e0:	430a      	orrs	r2, r1
 80047e2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a1a      	ldr	r2, [r3, #32]
 80047e8:	2380      	movs	r3, #128	; 0x80
 80047ea:	05db      	lsls	r3, r3, #23
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d106      	bne.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80047f0:	4b3a      	ldr	r3, [pc, #232]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	4b39      	ldr	r3, [pc, #228]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047f6:	2180      	movs	r1, #128	; 0x80
 80047f8:	0249      	lsls	r1, r1, #9
 80047fa:	430a      	orrs	r2, r1
 80047fc:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	2380      	movs	r3, #128	; 0x80
 8004804:	031b      	lsls	r3, r3, #12
 8004806:	4013      	ands	r3, r2
 8004808:	d009      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800480a:	4b34      	ldr	r3, [pc, #208]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800480c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480e:	2240      	movs	r2, #64	; 0x40
 8004810:	4393      	bics	r3, r2
 8004812:	0019      	movs	r1, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004818:	4b30      	ldr	r3, [pc, #192]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800481a:	430a      	orrs	r2, r1
 800481c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	2380      	movs	r3, #128	; 0x80
 8004824:	039b      	lsls	r3, r3, #14
 8004826:	4013      	ands	r3, r2
 8004828:	d016      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800482a:	4b2c      	ldr	r3, [pc, #176]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800482c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482e:	4a35      	ldr	r2, [pc, #212]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004830:	4013      	ands	r3, r2
 8004832:	0019      	movs	r1, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004838:	4b28      	ldr	r3, [pc, #160]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800483a:	430a      	orrs	r2, r1
 800483c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004842:	2380      	movs	r3, #128	; 0x80
 8004844:	03db      	lsls	r3, r3, #15
 8004846:	429a      	cmp	r2, r3
 8004848:	d106      	bne.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800484a:	4b24      	ldr	r3, [pc, #144]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800484c:	68da      	ldr	r2, [r3, #12]
 800484e:	4b23      	ldr	r3, [pc, #140]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004850:	2180      	movs	r1, #128	; 0x80
 8004852:	0449      	lsls	r1, r1, #17
 8004854:	430a      	orrs	r2, r1
 8004856:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	2380      	movs	r3, #128	; 0x80
 800485e:	03db      	lsls	r3, r3, #15
 8004860:	4013      	ands	r3, r2
 8004862:	d016      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004864:	4b1d      	ldr	r3, [pc, #116]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004868:	4a27      	ldr	r2, [pc, #156]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800486a:	4013      	ands	r3, r2
 800486c:	0019      	movs	r1, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004872:	4b1a      	ldr	r3, [pc, #104]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004874:	430a      	orrs	r2, r1
 8004876:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800487c:	2380      	movs	r3, #128	; 0x80
 800487e:	045b      	lsls	r3, r3, #17
 8004880:	429a      	cmp	r2, r3
 8004882:	d106      	bne.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004884:	4b15      	ldr	r3, [pc, #84]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004886:	68da      	ldr	r2, [r3, #12]
 8004888:	4b14      	ldr	r3, [pc, #80]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800488a:	2180      	movs	r1, #128	; 0x80
 800488c:	0449      	lsls	r1, r1, #17
 800488e:	430a      	orrs	r2, r1
 8004890:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	2380      	movs	r3, #128	; 0x80
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	4013      	ands	r3, r2
 800489c:	d016      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800489e:	4b0f      	ldr	r3, [pc, #60]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a2:	4a1a      	ldr	r2, [pc, #104]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80048a4:	4013      	ands	r3, r2
 80048a6:	0019      	movs	r1, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	695a      	ldr	r2, [r3, #20]
 80048ac:	4b0b      	ldr	r3, [pc, #44]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048ae:	430a      	orrs	r2, r1
 80048b0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	695a      	ldr	r2, [r3, #20]
 80048b6:	2380      	movs	r3, #128	; 0x80
 80048b8:	01db      	lsls	r3, r3, #7
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d106      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80048be:	4b07      	ldr	r3, [pc, #28]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048c0:	68da      	ldr	r2, [r3, #12]
 80048c2:	4b06      	ldr	r3, [pc, #24]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048c4:	2180      	movs	r1, #128	; 0x80
 80048c6:	0249      	lsls	r1, r1, #9
 80048c8:	430a      	orrs	r2, r1
 80048ca:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80048cc:	2312      	movs	r3, #18
 80048ce:	18fb      	adds	r3, r7, r3
 80048d0:	781b      	ldrb	r3, [r3, #0]
}
 80048d2:	0018      	movs	r0, r3
 80048d4:	46bd      	mov	sp, r7
 80048d6:	b006      	add	sp, #24
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	46c0      	nop			; (mov r8, r8)
 80048dc:	40021000 	.word	0x40021000
 80048e0:	40007000 	.word	0x40007000
 80048e4:	fffffcff 	.word	0xfffffcff
 80048e8:	fffeffff 	.word	0xfffeffff
 80048ec:	00001388 	.word	0x00001388
 80048f0:	efffffff 	.word	0xefffffff
 80048f4:	fffff3ff 	.word	0xfffff3ff
 80048f8:	fff3ffff 	.word	0xfff3ffff
 80048fc:	ffcfffff 	.word	0xffcfffff
 8004900:	ffffcfff 	.word	0xffffcfff
 8004904:	ffbfffff 	.word	0xffbfffff
 8004908:	feffffff 	.word	0xfeffffff
 800490c:	ffff3fff 	.word	0xffff3fff

08004910 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e04a      	b.n	80049b8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	223d      	movs	r2, #61	; 0x3d
 8004926:	5c9b      	ldrb	r3, [r3, r2]
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d107      	bne.n	800493e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	223c      	movs	r2, #60	; 0x3c
 8004932:	2100      	movs	r1, #0
 8004934:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	0018      	movs	r0, r3
 800493a:	f7fe f9d1 	bl	8002ce0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	223d      	movs	r2, #61	; 0x3d
 8004942:	2102      	movs	r1, #2
 8004944:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	3304      	adds	r3, #4
 800494e:	0019      	movs	r1, r3
 8004950:	0010      	movs	r0, r2
 8004952:	f000 fa11 	bl	8004d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2248      	movs	r2, #72	; 0x48
 800495a:	2101      	movs	r1, #1
 800495c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	223e      	movs	r2, #62	; 0x3e
 8004962:	2101      	movs	r1, #1
 8004964:	5499      	strb	r1, [r3, r2]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	223f      	movs	r2, #63	; 0x3f
 800496a:	2101      	movs	r1, #1
 800496c:	5499      	strb	r1, [r3, r2]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2240      	movs	r2, #64	; 0x40
 8004972:	2101      	movs	r1, #1
 8004974:	5499      	strb	r1, [r3, r2]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2241      	movs	r2, #65	; 0x41
 800497a:	2101      	movs	r1, #1
 800497c:	5499      	strb	r1, [r3, r2]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2242      	movs	r2, #66	; 0x42
 8004982:	2101      	movs	r1, #1
 8004984:	5499      	strb	r1, [r3, r2]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2243      	movs	r2, #67	; 0x43
 800498a:	2101      	movs	r1, #1
 800498c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2244      	movs	r2, #68	; 0x44
 8004992:	2101      	movs	r1, #1
 8004994:	5499      	strb	r1, [r3, r2]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2245      	movs	r2, #69	; 0x45
 800499a:	2101      	movs	r1, #1
 800499c:	5499      	strb	r1, [r3, r2]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2246      	movs	r2, #70	; 0x46
 80049a2:	2101      	movs	r1, #1
 80049a4:	5499      	strb	r1, [r3, r2]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2247      	movs	r2, #71	; 0x47
 80049aa:	2101      	movs	r1, #1
 80049ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	223d      	movs	r2, #61	; 0x3d
 80049b2:	2101      	movs	r1, #1
 80049b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	0018      	movs	r0, r3
 80049ba:	46bd      	mov	sp, r7
 80049bc:	b002      	add	sp, #8
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	223d      	movs	r2, #61	; 0x3d
 80049cc:	5c9b      	ldrb	r3, [r3, r2]
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d001      	beq.n	80049d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e042      	b.n	8004a5e <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	223d      	movs	r2, #61	; 0x3d
 80049dc:	2102      	movs	r1, #2
 80049de:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68da      	ldr	r2, [r3, #12]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2101      	movs	r1, #1
 80049ec:	430a      	orrs	r2, r1
 80049ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a1c      	ldr	r2, [pc, #112]	; (8004a68 <HAL_TIM_Base_Start_IT+0xa8>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d00f      	beq.n	8004a1a <HAL_TIM_Base_Start_IT+0x5a>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	2380      	movs	r3, #128	; 0x80
 8004a00:	05db      	lsls	r3, r3, #23
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d009      	beq.n	8004a1a <HAL_TIM_Base_Start_IT+0x5a>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a18      	ldr	r2, [pc, #96]	; (8004a6c <HAL_TIM_Base_Start_IT+0xac>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d004      	beq.n	8004a1a <HAL_TIM_Base_Start_IT+0x5a>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a16      	ldr	r2, [pc, #88]	; (8004a70 <HAL_TIM_Base_Start_IT+0xb0>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d116      	bne.n	8004a48 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	4a14      	ldr	r2, [pc, #80]	; (8004a74 <HAL_TIM_Base_Start_IT+0xb4>)
 8004a22:	4013      	ands	r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2b06      	cmp	r3, #6
 8004a2a:	d016      	beq.n	8004a5a <HAL_TIM_Base_Start_IT+0x9a>
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	2380      	movs	r3, #128	; 0x80
 8004a30:	025b      	lsls	r3, r3, #9
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d011      	beq.n	8004a5a <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2101      	movs	r1, #1
 8004a42:	430a      	orrs	r2, r1
 8004a44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a46:	e008      	b.n	8004a5a <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2101      	movs	r1, #1
 8004a54:	430a      	orrs	r2, r1
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	e000      	b.n	8004a5c <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a5a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	0018      	movs	r0, r3
 8004a60:	46bd      	mov	sp, r7
 8004a62:	b004      	add	sp, #16
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	46c0      	nop			; (mov r8, r8)
 8004a68:	40012c00 	.word	0x40012c00
 8004a6c:	40000400 	.word	0x40000400
 8004a70:	40014000 	.word	0x40014000
 8004a74:	00010007 	.word	0x00010007

08004a78 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68da      	ldr	r2, [r3, #12]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	438a      	bics	r2, r1
 8004a8e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	4a0d      	ldr	r2, [pc, #52]	; (8004acc <HAL_TIM_Base_Stop_IT+0x54>)
 8004a98:	4013      	ands	r3, r2
 8004a9a:	d10d      	bne.n	8004ab8 <HAL_TIM_Base_Stop_IT+0x40>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	4a0b      	ldr	r2, [pc, #44]	; (8004ad0 <HAL_TIM_Base_Stop_IT+0x58>)
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	d107      	bne.n	8004ab8 <HAL_TIM_Base_Stop_IT+0x40>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	438a      	bics	r2, r1
 8004ab6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	223d      	movs	r2, #61	; 0x3d
 8004abc:	2101      	movs	r1, #1
 8004abe:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	b002      	add	sp, #8
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	46c0      	nop			; (mov r8, r8)
 8004acc:	00001111 	.word	0x00001111
 8004ad0:	00000444 	.word	0x00000444

08004ad4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d124      	bne.n	8004b34 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	2202      	movs	r2, #2
 8004af2:	4013      	ands	r3, r2
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d11d      	bne.n	8004b34 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2203      	movs	r2, #3
 8004afe:	4252      	negs	r2, r2
 8004b00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	2203      	movs	r2, #3
 8004b10:	4013      	ands	r3, r2
 8004b12:	d004      	beq.n	8004b1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	0018      	movs	r0, r3
 8004b18:	f000 f916 	bl	8004d48 <HAL_TIM_IC_CaptureCallback>
 8004b1c:	e007      	b.n	8004b2e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	0018      	movs	r0, r3
 8004b22:	f000 f909 	bl	8004d38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	0018      	movs	r0, r3
 8004b2a:	f000 f915 	bl	8004d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	2204      	movs	r2, #4
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d125      	bne.n	8004b8e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	2204      	movs	r2, #4
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	2b04      	cmp	r3, #4
 8004b4e:	d11e      	bne.n	8004b8e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2205      	movs	r2, #5
 8004b56:	4252      	negs	r2, r2
 8004b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2202      	movs	r2, #2
 8004b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	699a      	ldr	r2, [r3, #24]
 8004b66:	23c0      	movs	r3, #192	; 0xc0
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	d004      	beq.n	8004b78 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	0018      	movs	r0, r3
 8004b72:	f000 f8e9 	bl	8004d48 <HAL_TIM_IC_CaptureCallback>
 8004b76:	e007      	b.n	8004b88 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	0018      	movs	r0, r3
 8004b7c:	f000 f8dc 	bl	8004d38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	0018      	movs	r0, r3
 8004b84:	f000 f8e8 	bl	8004d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	2208      	movs	r2, #8
 8004b96:	4013      	ands	r3, r2
 8004b98:	2b08      	cmp	r3, #8
 8004b9a:	d124      	bne.n	8004be6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	2208      	movs	r2, #8
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	2b08      	cmp	r3, #8
 8004ba8:	d11d      	bne.n	8004be6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2209      	movs	r2, #9
 8004bb0:	4252      	negs	r2, r2
 8004bb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2204      	movs	r2, #4
 8004bb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69db      	ldr	r3, [r3, #28]
 8004bc0:	2203      	movs	r2, #3
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	d004      	beq.n	8004bd0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f000 f8bd 	bl	8004d48 <HAL_TIM_IC_CaptureCallback>
 8004bce:	e007      	b.n	8004be0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	f000 f8b0 	bl	8004d38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	0018      	movs	r0, r3
 8004bdc:	f000 f8bc 	bl	8004d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	2210      	movs	r2, #16
 8004bee:	4013      	ands	r3, r2
 8004bf0:	2b10      	cmp	r3, #16
 8004bf2:	d125      	bne.n	8004c40 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	2210      	movs	r2, #16
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	2b10      	cmp	r3, #16
 8004c00:	d11e      	bne.n	8004c40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2211      	movs	r2, #17
 8004c08:	4252      	negs	r2, r2
 8004c0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2208      	movs	r2, #8
 8004c10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	69da      	ldr	r2, [r3, #28]
 8004c18:	23c0      	movs	r3, #192	; 0xc0
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	d004      	beq.n	8004c2a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	0018      	movs	r0, r3
 8004c24:	f000 f890 	bl	8004d48 <HAL_TIM_IC_CaptureCallback>
 8004c28:	e007      	b.n	8004c3a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	f000 f883 	bl	8004d38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	0018      	movs	r0, r3
 8004c36:	f000 f88f 	bl	8004d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	2201      	movs	r2, #1
 8004c48:	4013      	ands	r3, r2
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d10f      	bne.n	8004c6e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	2201      	movs	r2, #1
 8004c56:	4013      	ands	r3, r2
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d108      	bne.n	8004c6e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2202      	movs	r2, #2
 8004c62:	4252      	negs	r2, r2
 8004c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	0018      	movs	r0, r3
 8004c6a:	f7fd ff97 	bl	8002b9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	2280      	movs	r2, #128	; 0x80
 8004c76:	4013      	ands	r3, r2
 8004c78:	2b80      	cmp	r3, #128	; 0x80
 8004c7a:	d10f      	bne.n	8004c9c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	2280      	movs	r2, #128	; 0x80
 8004c84:	4013      	ands	r3, r2
 8004c86:	2b80      	cmp	r3, #128	; 0x80
 8004c88:	d108      	bne.n	8004c9c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2281      	movs	r2, #129	; 0x81
 8004c90:	4252      	negs	r2, r2
 8004c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	0018      	movs	r0, r3
 8004c98:	f000 f964 	bl	8004f64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	691a      	ldr	r2, [r3, #16]
 8004ca2:	2380      	movs	r3, #128	; 0x80
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	401a      	ands	r2, r3
 8004ca8:	2380      	movs	r3, #128	; 0x80
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d10e      	bne.n	8004cce <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	2280      	movs	r2, #128	; 0x80
 8004cb8:	4013      	ands	r3, r2
 8004cba:	2b80      	cmp	r3, #128	; 0x80
 8004cbc:	d107      	bne.n	8004cce <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a1c      	ldr	r2, [pc, #112]	; (8004d34 <HAL_TIM_IRQHandler+0x260>)
 8004cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	0018      	movs	r0, r3
 8004cca:	f000 f953 	bl	8004f74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	2240      	movs	r2, #64	; 0x40
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	2b40      	cmp	r3, #64	; 0x40
 8004cda:	d10f      	bne.n	8004cfc <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	2240      	movs	r2, #64	; 0x40
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	2b40      	cmp	r3, #64	; 0x40
 8004ce8:	d108      	bne.n	8004cfc <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2241      	movs	r2, #65	; 0x41
 8004cf0:	4252      	negs	r2, r2
 8004cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	0018      	movs	r0, r3
 8004cf8:	f000 f836 	bl	8004d68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	2220      	movs	r2, #32
 8004d04:	4013      	ands	r3, r2
 8004d06:	2b20      	cmp	r3, #32
 8004d08:	d10f      	bne.n	8004d2a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	2220      	movs	r2, #32
 8004d12:	4013      	ands	r3, r2
 8004d14:	2b20      	cmp	r3, #32
 8004d16:	d108      	bne.n	8004d2a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2221      	movs	r2, #33	; 0x21
 8004d1e:	4252      	negs	r2, r2
 8004d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	0018      	movs	r0, r3
 8004d26:	f000 f915 	bl	8004f54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d2a:	46c0      	nop			; (mov r8, r8)
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	b002      	add	sp, #8
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	46c0      	nop			; (mov r8, r8)
 8004d34:	fffffeff 	.word	0xfffffeff

08004d38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d40:	46c0      	nop			; (mov r8, r8)
 8004d42:	46bd      	mov	sp, r7
 8004d44:	b002      	add	sp, #8
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d50:	46c0      	nop			; (mov r8, r8)
 8004d52:	46bd      	mov	sp, r7
 8004d54:	b002      	add	sp, #8
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d60:	46c0      	nop			; (mov r8, r8)
 8004d62:	46bd      	mov	sp, r7
 8004d64:	b002      	add	sp, #8
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d70:	46c0      	nop			; (mov r8, r8)
 8004d72:	46bd      	mov	sp, r7
 8004d74:	b002      	add	sp, #8
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a34      	ldr	r2, [pc, #208]	; (8004e5c <TIM_Base_SetConfig+0xe4>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d008      	beq.n	8004da2 <TIM_Base_SetConfig+0x2a>
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	2380      	movs	r3, #128	; 0x80
 8004d94:	05db      	lsls	r3, r3, #23
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d003      	beq.n	8004da2 <TIM_Base_SetConfig+0x2a>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a30      	ldr	r2, [pc, #192]	; (8004e60 <TIM_Base_SetConfig+0xe8>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d108      	bne.n	8004db4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2270      	movs	r2, #112	; 0x70
 8004da6:	4393      	bics	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a29      	ldr	r2, [pc, #164]	; (8004e5c <TIM_Base_SetConfig+0xe4>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d018      	beq.n	8004dee <TIM_Base_SetConfig+0x76>
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	2380      	movs	r3, #128	; 0x80
 8004dc0:	05db      	lsls	r3, r3, #23
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d013      	beq.n	8004dee <TIM_Base_SetConfig+0x76>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a25      	ldr	r2, [pc, #148]	; (8004e60 <TIM_Base_SetConfig+0xe8>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d00f      	beq.n	8004dee <TIM_Base_SetConfig+0x76>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a24      	ldr	r2, [pc, #144]	; (8004e64 <TIM_Base_SetConfig+0xec>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d00b      	beq.n	8004dee <TIM_Base_SetConfig+0x76>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a23      	ldr	r2, [pc, #140]	; (8004e68 <TIM_Base_SetConfig+0xf0>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d007      	beq.n	8004dee <TIM_Base_SetConfig+0x76>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a22      	ldr	r2, [pc, #136]	; (8004e6c <TIM_Base_SetConfig+0xf4>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d003      	beq.n	8004dee <TIM_Base_SetConfig+0x76>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a21      	ldr	r2, [pc, #132]	; (8004e70 <TIM_Base_SetConfig+0xf8>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d108      	bne.n	8004e00 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	4a20      	ldr	r2, [pc, #128]	; (8004e74 <TIM_Base_SetConfig+0xfc>)
 8004df2:	4013      	ands	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2280      	movs	r2, #128	; 0x80
 8004e04:	4393      	bics	r3, r2
 8004e06:	001a      	movs	r2, r3
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	689a      	ldr	r2, [r3, #8]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a0c      	ldr	r2, [pc, #48]	; (8004e5c <TIM_Base_SetConfig+0xe4>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d00b      	beq.n	8004e46 <TIM_Base_SetConfig+0xce>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a0d      	ldr	r2, [pc, #52]	; (8004e68 <TIM_Base_SetConfig+0xf0>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d007      	beq.n	8004e46 <TIM_Base_SetConfig+0xce>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a0c      	ldr	r2, [pc, #48]	; (8004e6c <TIM_Base_SetConfig+0xf4>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d003      	beq.n	8004e46 <TIM_Base_SetConfig+0xce>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a0b      	ldr	r2, [pc, #44]	; (8004e70 <TIM_Base_SetConfig+0xf8>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d103      	bne.n	8004e4e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	691a      	ldr	r2, [r3, #16]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	615a      	str	r2, [r3, #20]
}
 8004e54:	46c0      	nop			; (mov r8, r8)
 8004e56:	46bd      	mov	sp, r7
 8004e58:	b004      	add	sp, #16
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	40012c00 	.word	0x40012c00
 8004e60:	40000400 	.word	0x40000400
 8004e64:	40002000 	.word	0x40002000
 8004e68:	40014000 	.word	0x40014000
 8004e6c:	40014400 	.word	0x40014400
 8004e70:	40014800 	.word	0x40014800
 8004e74:	fffffcff 	.word	0xfffffcff

08004e78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	223c      	movs	r2, #60	; 0x3c
 8004e86:	5c9b      	ldrb	r3, [r3, r2]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d101      	bne.n	8004e90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	e055      	b.n	8004f3c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	223c      	movs	r2, #60	; 0x3c
 8004e94:	2101      	movs	r1, #1
 8004e96:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	223d      	movs	r2, #61	; 0x3d
 8004e9c:	2102      	movs	r1, #2
 8004e9e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a23      	ldr	r2, [pc, #140]	; (8004f44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d108      	bne.n	8004ecc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	4a22      	ldr	r2, [pc, #136]	; (8004f48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2270      	movs	r2, #112	; 0x70
 8004ed0:	4393      	bics	r3, r2
 8004ed2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a16      	ldr	r2, [pc, #88]	; (8004f44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d00f      	beq.n	8004f10 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	2380      	movs	r3, #128	; 0x80
 8004ef6:	05db      	lsls	r3, r3, #23
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d009      	beq.n	8004f10 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a12      	ldr	r2, [pc, #72]	; (8004f4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d004      	beq.n	8004f10 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a11      	ldr	r2, [pc, #68]	; (8004f50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d10c      	bne.n	8004f2a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	2280      	movs	r2, #128	; 0x80
 8004f14:	4393      	bics	r3, r2
 8004f16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	223d      	movs	r2, #61	; 0x3d
 8004f2e:	2101      	movs	r1, #1
 8004f30:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	223c      	movs	r2, #60	; 0x3c
 8004f36:	2100      	movs	r1, #0
 8004f38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	b004      	add	sp, #16
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	40012c00 	.word	0x40012c00
 8004f48:	ff0fffff 	.word	0xff0fffff
 8004f4c:	40000400 	.word	0x40000400
 8004f50:	40014000 	.word	0x40014000

08004f54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f5c:	46c0      	nop			; (mov r8, r8)
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	b002      	add	sp, #8
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f6c:	46c0      	nop			; (mov r8, r8)
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	b002      	add	sp, #8
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f7c:	46c0      	nop			; (mov r8, r8)
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	b002      	add	sp, #8
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e046      	b.n	8005024 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2288      	movs	r2, #136	; 0x88
 8004f9a:	589b      	ldr	r3, [r3, r2]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d107      	bne.n	8004fb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2284      	movs	r2, #132	; 0x84
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	0018      	movs	r0, r3
 8004fac:	f7fd febe 	bl	8002d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2288      	movs	r2, #136	; 0x88
 8004fb4:	2124      	movs	r1, #36	; 0x24
 8004fb6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2101      	movs	r1, #1
 8004fc4:	438a      	bics	r2, r1
 8004fc6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	0018      	movs	r0, r3
 8004fcc:	f000 f9ee 	bl	80053ac <UART_SetConfig>
 8004fd0:	0003      	movs	r3, r0
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d101      	bne.n	8004fda <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e024      	b.n	8005024 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	0018      	movs	r0, r3
 8004fe6:	f000 fc9f 	bl	8005928 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	490d      	ldr	r1, [pc, #52]	; (800502c <HAL_UART_Init+0xa8>)
 8004ff6:	400a      	ands	r2, r1
 8004ff8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	212a      	movs	r1, #42	; 0x2a
 8005006:	438a      	bics	r2, r1
 8005008:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2101      	movs	r1, #1
 8005016:	430a      	orrs	r2, r1
 8005018:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	0018      	movs	r0, r3
 800501e:	f000 fd37 	bl	8005a90 <UART_CheckIdleState>
 8005022:	0003      	movs	r3, r0
}
 8005024:	0018      	movs	r0, r3
 8005026:	46bd      	mov	sp, r7
 8005028:	b002      	add	sp, #8
 800502a:	bd80      	pop	{r7, pc}
 800502c:	ffffb7ff 	.word	0xffffb7ff

08005030 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e032      	b.n	80050a8 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2288      	movs	r2, #136	; 0x88
 8005046:	2124      	movs	r1, #36	; 0x24
 8005048:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2101      	movs	r1, #1
 8005056:	438a      	bics	r2, r1
 8005058:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2200      	movs	r2, #0
 8005060:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2200      	movs	r2, #0
 8005068:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2200      	movs	r2, #0
 8005070:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	0018      	movs	r0, r3
 8005076:	f7fd ff3d 	bl	8002ef4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2290      	movs	r2, #144	; 0x90
 800507e:	2100      	movs	r1, #0
 8005080:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2288      	movs	r2, #136	; 0x88
 8005086:	2100      	movs	r1, #0
 8005088:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	228c      	movs	r2, #140	; 0x8c
 800508e:	2100      	movs	r1, #0
 8005090:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2284      	movs	r2, #132	; 0x84
 80050a2:	2100      	movs	r1, #0
 80050a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	0018      	movs	r0, r3
 80050aa:	46bd      	mov	sp, r7
 80050ac:	b002      	add	sp, #8
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b08a      	sub	sp, #40	; 0x28
 80050b4:	af02      	add	r7, sp, #8
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	603b      	str	r3, [r7, #0]
 80050bc:	1dbb      	adds	r3, r7, #6
 80050be:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2288      	movs	r2, #136	; 0x88
 80050c4:	589b      	ldr	r3, [r3, r2]
 80050c6:	2b20      	cmp	r3, #32
 80050c8:	d000      	beq.n	80050cc <HAL_UART_Transmit+0x1c>
 80050ca:	e088      	b.n	80051de <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <HAL_UART_Transmit+0x2a>
 80050d2:	1dbb      	adds	r3, r7, #6
 80050d4:	881b      	ldrh	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e080      	b.n	80051e0 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	689a      	ldr	r2, [r3, #8]
 80050e2:	2380      	movs	r3, #128	; 0x80
 80050e4:	015b      	lsls	r3, r3, #5
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d109      	bne.n	80050fe <HAL_UART_Transmit+0x4e>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d105      	bne.n	80050fe <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	2201      	movs	r2, #1
 80050f6:	4013      	ands	r3, r2
 80050f8:	d001      	beq.n	80050fe <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e070      	b.n	80051e0 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2290      	movs	r2, #144	; 0x90
 8005102:	2100      	movs	r1, #0
 8005104:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2288      	movs	r2, #136	; 0x88
 800510a:	2121      	movs	r1, #33	; 0x21
 800510c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800510e:	f7fe f8cf 	bl	80032b0 <HAL_GetTick>
 8005112:	0003      	movs	r3, r0
 8005114:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	1dba      	adds	r2, r7, #6
 800511a:	2154      	movs	r1, #84	; 0x54
 800511c:	8812      	ldrh	r2, [r2, #0]
 800511e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	1dba      	adds	r2, r7, #6
 8005124:	2156      	movs	r1, #86	; 0x56
 8005126:	8812      	ldrh	r2, [r2, #0]
 8005128:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	689a      	ldr	r2, [r3, #8]
 800512e:	2380      	movs	r3, #128	; 0x80
 8005130:	015b      	lsls	r3, r3, #5
 8005132:	429a      	cmp	r2, r3
 8005134:	d108      	bne.n	8005148 <HAL_UART_Transmit+0x98>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d104      	bne.n	8005148 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800513e:	2300      	movs	r3, #0
 8005140:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	61bb      	str	r3, [r7, #24]
 8005146:	e003      	b.n	8005150 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800514c:	2300      	movs	r3, #0
 800514e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005150:	e02c      	b.n	80051ac <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	0013      	movs	r3, r2
 800515c:	2200      	movs	r2, #0
 800515e:	2180      	movs	r1, #128	; 0x80
 8005160:	f000 fce4 	bl	8005b2c <UART_WaitOnFlagUntilTimeout>
 8005164:	1e03      	subs	r3, r0, #0
 8005166:	d001      	beq.n	800516c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e039      	b.n	80051e0 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d10b      	bne.n	800518a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	001a      	movs	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	05d2      	lsls	r2, r2, #23
 800517e:	0dd2      	lsrs	r2, r2, #23
 8005180:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	3302      	adds	r3, #2
 8005186:	61bb      	str	r3, [r7, #24]
 8005188:	e007      	b.n	800519a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	781a      	ldrb	r2, [r3, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	3301      	adds	r3, #1
 8005198:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2256      	movs	r2, #86	; 0x56
 800519e:	5a9b      	ldrh	r3, [r3, r2]
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	3b01      	subs	r3, #1
 80051a4:	b299      	uxth	r1, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2256      	movs	r2, #86	; 0x56
 80051aa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2256      	movs	r2, #86	; 0x56
 80051b0:	5a9b      	ldrh	r3, [r3, r2]
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1cc      	bne.n	8005152 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	9300      	str	r3, [sp, #0]
 80051c0:	0013      	movs	r3, r2
 80051c2:	2200      	movs	r2, #0
 80051c4:	2140      	movs	r1, #64	; 0x40
 80051c6:	f000 fcb1 	bl	8005b2c <UART_WaitOnFlagUntilTimeout>
 80051ca:	1e03      	subs	r3, r0, #0
 80051cc:	d001      	beq.n	80051d2 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e006      	b.n	80051e0 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2288      	movs	r2, #136	; 0x88
 80051d6:	2120      	movs	r1, #32
 80051d8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80051da:	2300      	movs	r3, #0
 80051dc:	e000      	b.n	80051e0 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80051de:	2302      	movs	r3, #2
  }
}
 80051e0:	0018      	movs	r0, r3
 80051e2:	46bd      	mov	sp, r7
 80051e4:	b008      	add	sp, #32
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b08a      	sub	sp, #40	; 0x28
 80051ec:	af02      	add	r7, sp, #8
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	603b      	str	r3, [r7, #0]
 80051f4:	1dbb      	adds	r3, r7, #6
 80051f6:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	228c      	movs	r2, #140	; 0x8c
 80051fc:	589b      	ldr	r3, [r3, r2]
 80051fe:	2b20      	cmp	r3, #32
 8005200:	d000      	beq.n	8005204 <HAL_UART_Receive+0x1c>
 8005202:	e0cc      	b.n	800539e <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <HAL_UART_Receive+0x2a>
 800520a:	1dbb      	adds	r3, r7, #6
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e0c4      	b.n	80053a0 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	689a      	ldr	r2, [r3, #8]
 800521a:	2380      	movs	r3, #128	; 0x80
 800521c:	015b      	lsls	r3, r3, #5
 800521e:	429a      	cmp	r2, r3
 8005220:	d109      	bne.n	8005236 <HAL_UART_Receive+0x4e>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d105      	bne.n	8005236 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2201      	movs	r2, #1
 800522e:	4013      	ands	r3, r2
 8005230:	d001      	beq.n	8005236 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e0b4      	b.n	80053a0 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2290      	movs	r2, #144	; 0x90
 800523a:	2100      	movs	r1, #0
 800523c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	228c      	movs	r2, #140	; 0x8c
 8005242:	2122      	movs	r1, #34	; 0x22
 8005244:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800524c:	f7fe f830 	bl	80032b0 <HAL_GetTick>
 8005250:	0003      	movs	r3, r0
 8005252:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	1dba      	adds	r2, r7, #6
 8005258:	215c      	movs	r1, #92	; 0x5c
 800525a:	8812      	ldrh	r2, [r2, #0]
 800525c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	1dba      	adds	r2, r7, #6
 8005262:	215e      	movs	r1, #94	; 0x5e
 8005264:	8812      	ldrh	r2, [r2, #0]
 8005266:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	2380      	movs	r3, #128	; 0x80
 800526e:	015b      	lsls	r3, r3, #5
 8005270:	429a      	cmp	r2, r3
 8005272:	d10d      	bne.n	8005290 <HAL_UART_Receive+0xa8>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d104      	bne.n	8005286 <HAL_UART_Receive+0x9e>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2260      	movs	r2, #96	; 0x60
 8005280:	4949      	ldr	r1, [pc, #292]	; (80053a8 <HAL_UART_Receive+0x1c0>)
 8005282:	5299      	strh	r1, [r3, r2]
 8005284:	e02e      	b.n	80052e4 <HAL_UART_Receive+0xfc>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2260      	movs	r2, #96	; 0x60
 800528a:	21ff      	movs	r1, #255	; 0xff
 800528c:	5299      	strh	r1, [r3, r2]
 800528e:	e029      	b.n	80052e4 <HAL_UART_Receive+0xfc>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10d      	bne.n	80052b4 <HAL_UART_Receive+0xcc>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d104      	bne.n	80052aa <HAL_UART_Receive+0xc2>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2260      	movs	r2, #96	; 0x60
 80052a4:	21ff      	movs	r1, #255	; 0xff
 80052a6:	5299      	strh	r1, [r3, r2]
 80052a8:	e01c      	b.n	80052e4 <HAL_UART_Receive+0xfc>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2260      	movs	r2, #96	; 0x60
 80052ae:	217f      	movs	r1, #127	; 0x7f
 80052b0:	5299      	strh	r1, [r3, r2]
 80052b2:	e017      	b.n	80052e4 <HAL_UART_Receive+0xfc>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	2380      	movs	r3, #128	; 0x80
 80052ba:	055b      	lsls	r3, r3, #21
 80052bc:	429a      	cmp	r2, r3
 80052be:	d10d      	bne.n	80052dc <HAL_UART_Receive+0xf4>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d104      	bne.n	80052d2 <HAL_UART_Receive+0xea>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2260      	movs	r2, #96	; 0x60
 80052cc:	217f      	movs	r1, #127	; 0x7f
 80052ce:	5299      	strh	r1, [r3, r2]
 80052d0:	e008      	b.n	80052e4 <HAL_UART_Receive+0xfc>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2260      	movs	r2, #96	; 0x60
 80052d6:	213f      	movs	r1, #63	; 0x3f
 80052d8:	5299      	strh	r1, [r3, r2]
 80052da:	e003      	b.n	80052e4 <HAL_UART_Receive+0xfc>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2260      	movs	r2, #96	; 0x60
 80052e0:	2100      	movs	r1, #0
 80052e2:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80052e4:	2312      	movs	r3, #18
 80052e6:	18fb      	adds	r3, r7, r3
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	2160      	movs	r1, #96	; 0x60
 80052ec:	5a52      	ldrh	r2, [r2, r1]
 80052ee:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	2380      	movs	r3, #128	; 0x80
 80052f6:	015b      	lsls	r3, r3, #5
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d108      	bne.n	800530e <HAL_UART_Receive+0x126>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d104      	bne.n	800530e <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8005304:	2300      	movs	r3, #0
 8005306:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	61bb      	str	r3, [r7, #24]
 800530c:	e003      	b.n	8005316 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005312:	2300      	movs	r3, #0
 8005314:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005316:	e036      	b.n	8005386 <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	9300      	str	r3, [sp, #0]
 8005320:	0013      	movs	r3, r2
 8005322:	2200      	movs	r2, #0
 8005324:	2120      	movs	r1, #32
 8005326:	f000 fc01 	bl	8005b2c <UART_WaitOnFlagUntilTimeout>
 800532a:	1e03      	subs	r3, r0, #0
 800532c:	d001      	beq.n	8005332 <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e036      	b.n	80053a0 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10e      	bne.n	8005356 <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	b29b      	uxth	r3, r3
 8005340:	2212      	movs	r2, #18
 8005342:	18ba      	adds	r2, r7, r2
 8005344:	8812      	ldrh	r2, [r2, #0]
 8005346:	4013      	ands	r3, r2
 8005348:	b29a      	uxth	r2, r3
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	3302      	adds	r3, #2
 8005352:	61bb      	str	r3, [r7, #24]
 8005354:	e00e      	b.n	8005374 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2212      	movs	r2, #18
 8005360:	18ba      	adds	r2, r7, r2
 8005362:	8812      	ldrh	r2, [r2, #0]
 8005364:	b2d2      	uxtb	r2, r2
 8005366:	4013      	ands	r3, r2
 8005368:	b2da      	uxtb	r2, r3
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	3301      	adds	r3, #1
 8005372:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	225e      	movs	r2, #94	; 0x5e
 8005378:	5a9b      	ldrh	r3, [r3, r2]
 800537a:	b29b      	uxth	r3, r3
 800537c:	3b01      	subs	r3, #1
 800537e:	b299      	uxth	r1, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	225e      	movs	r2, #94	; 0x5e
 8005384:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	225e      	movs	r2, #94	; 0x5e
 800538a:	5a9b      	ldrh	r3, [r3, r2]
 800538c:	b29b      	uxth	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1c2      	bne.n	8005318 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	228c      	movs	r2, #140	; 0x8c
 8005396:	2120      	movs	r1, #32
 8005398:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800539a:	2300      	movs	r3, #0
 800539c:	e000      	b.n	80053a0 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 800539e:	2302      	movs	r3, #2
  }
}
 80053a0:	0018      	movs	r0, r3
 80053a2:	46bd      	mov	sp, r7
 80053a4:	b008      	add	sp, #32
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	000001ff 	.word	0x000001ff

080053ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053ac:	b5b0      	push	{r4, r5, r7, lr}
 80053ae:	b090      	sub	sp, #64	; 0x40
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053b4:	231a      	movs	r3, #26
 80053b6:	2220      	movs	r2, #32
 80053b8:	189b      	adds	r3, r3, r2
 80053ba:	19db      	adds	r3, r3, r7
 80053bc:	2200      	movs	r2, #0
 80053be:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	431a      	orrs	r2, r3
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	431a      	orrs	r2, r3
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4aaf      	ldr	r2, [pc, #700]	; (800569c <UART_SetConfig+0x2f0>)
 80053e0:	4013      	ands	r3, r2
 80053e2:	0019      	movs	r1, r3
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ea:	430b      	orrs	r3, r1
 80053ec:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	4aaa      	ldr	r2, [pc, #680]	; (80056a0 <UART_SetConfig+0x2f4>)
 80053f6:	4013      	ands	r3, r2
 80053f8:	0018      	movs	r0, r3
 80053fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fc:	68d9      	ldr	r1, [r3, #12]
 80053fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	0003      	movs	r3, r0
 8005404:	430b      	orrs	r3, r1
 8005406:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4aa4      	ldr	r2, [pc, #656]	; (80056a4 <UART_SetConfig+0x2f8>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d004      	beq.n	8005422 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800541e:	4313      	orrs	r3, r2
 8005420:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	4a9f      	ldr	r2, [pc, #636]	; (80056a8 <UART_SetConfig+0x2fc>)
 800542a:	4013      	ands	r3, r2
 800542c:	0019      	movs	r1, r3
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005434:	430b      	orrs	r3, r1
 8005436:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543e:	220f      	movs	r2, #15
 8005440:	4393      	bics	r3, r2
 8005442:	0018      	movs	r0, r3
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	0003      	movs	r3, r0
 800544e:	430b      	orrs	r3, r1
 8005450:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a95      	ldr	r2, [pc, #596]	; (80056ac <UART_SetConfig+0x300>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d131      	bne.n	80054c0 <UART_SetConfig+0x114>
 800545c:	4b94      	ldr	r3, [pc, #592]	; (80056b0 <UART_SetConfig+0x304>)
 800545e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005460:	2203      	movs	r2, #3
 8005462:	4013      	ands	r3, r2
 8005464:	2b03      	cmp	r3, #3
 8005466:	d01d      	beq.n	80054a4 <UART_SetConfig+0xf8>
 8005468:	d823      	bhi.n	80054b2 <UART_SetConfig+0x106>
 800546a:	2b02      	cmp	r3, #2
 800546c:	d00c      	beq.n	8005488 <UART_SetConfig+0xdc>
 800546e:	d820      	bhi.n	80054b2 <UART_SetConfig+0x106>
 8005470:	2b00      	cmp	r3, #0
 8005472:	d002      	beq.n	800547a <UART_SetConfig+0xce>
 8005474:	2b01      	cmp	r3, #1
 8005476:	d00e      	beq.n	8005496 <UART_SetConfig+0xea>
 8005478:	e01b      	b.n	80054b2 <UART_SetConfig+0x106>
 800547a:	231b      	movs	r3, #27
 800547c:	2220      	movs	r2, #32
 800547e:	189b      	adds	r3, r3, r2
 8005480:	19db      	adds	r3, r3, r7
 8005482:	2200      	movs	r2, #0
 8005484:	701a      	strb	r2, [r3, #0]
 8005486:	e0b4      	b.n	80055f2 <UART_SetConfig+0x246>
 8005488:	231b      	movs	r3, #27
 800548a:	2220      	movs	r2, #32
 800548c:	189b      	adds	r3, r3, r2
 800548e:	19db      	adds	r3, r3, r7
 8005490:	2202      	movs	r2, #2
 8005492:	701a      	strb	r2, [r3, #0]
 8005494:	e0ad      	b.n	80055f2 <UART_SetConfig+0x246>
 8005496:	231b      	movs	r3, #27
 8005498:	2220      	movs	r2, #32
 800549a:	189b      	adds	r3, r3, r2
 800549c:	19db      	adds	r3, r3, r7
 800549e:	2204      	movs	r2, #4
 80054a0:	701a      	strb	r2, [r3, #0]
 80054a2:	e0a6      	b.n	80055f2 <UART_SetConfig+0x246>
 80054a4:	231b      	movs	r3, #27
 80054a6:	2220      	movs	r2, #32
 80054a8:	189b      	adds	r3, r3, r2
 80054aa:	19db      	adds	r3, r3, r7
 80054ac:	2208      	movs	r2, #8
 80054ae:	701a      	strb	r2, [r3, #0]
 80054b0:	e09f      	b.n	80055f2 <UART_SetConfig+0x246>
 80054b2:	231b      	movs	r3, #27
 80054b4:	2220      	movs	r2, #32
 80054b6:	189b      	adds	r3, r3, r2
 80054b8:	19db      	adds	r3, r3, r7
 80054ba:	2210      	movs	r2, #16
 80054bc:	701a      	strb	r2, [r3, #0]
 80054be:	e098      	b.n	80055f2 <UART_SetConfig+0x246>
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a7b      	ldr	r2, [pc, #492]	; (80056b4 <UART_SetConfig+0x308>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d131      	bne.n	800552e <UART_SetConfig+0x182>
 80054ca:	4b79      	ldr	r3, [pc, #484]	; (80056b0 <UART_SetConfig+0x304>)
 80054cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ce:	220c      	movs	r2, #12
 80054d0:	4013      	ands	r3, r2
 80054d2:	2b0c      	cmp	r3, #12
 80054d4:	d01d      	beq.n	8005512 <UART_SetConfig+0x166>
 80054d6:	d823      	bhi.n	8005520 <UART_SetConfig+0x174>
 80054d8:	2b08      	cmp	r3, #8
 80054da:	d00c      	beq.n	80054f6 <UART_SetConfig+0x14a>
 80054dc:	d820      	bhi.n	8005520 <UART_SetConfig+0x174>
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d002      	beq.n	80054e8 <UART_SetConfig+0x13c>
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d00e      	beq.n	8005504 <UART_SetConfig+0x158>
 80054e6:	e01b      	b.n	8005520 <UART_SetConfig+0x174>
 80054e8:	231b      	movs	r3, #27
 80054ea:	2220      	movs	r2, #32
 80054ec:	189b      	adds	r3, r3, r2
 80054ee:	19db      	adds	r3, r3, r7
 80054f0:	2200      	movs	r2, #0
 80054f2:	701a      	strb	r2, [r3, #0]
 80054f4:	e07d      	b.n	80055f2 <UART_SetConfig+0x246>
 80054f6:	231b      	movs	r3, #27
 80054f8:	2220      	movs	r2, #32
 80054fa:	189b      	adds	r3, r3, r2
 80054fc:	19db      	adds	r3, r3, r7
 80054fe:	2202      	movs	r2, #2
 8005500:	701a      	strb	r2, [r3, #0]
 8005502:	e076      	b.n	80055f2 <UART_SetConfig+0x246>
 8005504:	231b      	movs	r3, #27
 8005506:	2220      	movs	r2, #32
 8005508:	189b      	adds	r3, r3, r2
 800550a:	19db      	adds	r3, r3, r7
 800550c:	2204      	movs	r2, #4
 800550e:	701a      	strb	r2, [r3, #0]
 8005510:	e06f      	b.n	80055f2 <UART_SetConfig+0x246>
 8005512:	231b      	movs	r3, #27
 8005514:	2220      	movs	r2, #32
 8005516:	189b      	adds	r3, r3, r2
 8005518:	19db      	adds	r3, r3, r7
 800551a:	2208      	movs	r2, #8
 800551c:	701a      	strb	r2, [r3, #0]
 800551e:	e068      	b.n	80055f2 <UART_SetConfig+0x246>
 8005520:	231b      	movs	r3, #27
 8005522:	2220      	movs	r2, #32
 8005524:	189b      	adds	r3, r3, r2
 8005526:	19db      	adds	r3, r3, r7
 8005528:	2210      	movs	r2, #16
 800552a:	701a      	strb	r2, [r3, #0]
 800552c:	e061      	b.n	80055f2 <UART_SetConfig+0x246>
 800552e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a61      	ldr	r2, [pc, #388]	; (80056b8 <UART_SetConfig+0x30c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d106      	bne.n	8005546 <UART_SetConfig+0x19a>
 8005538:	231b      	movs	r3, #27
 800553a:	2220      	movs	r2, #32
 800553c:	189b      	adds	r3, r3, r2
 800553e:	19db      	adds	r3, r3, r7
 8005540:	2200      	movs	r2, #0
 8005542:	701a      	strb	r2, [r3, #0]
 8005544:	e055      	b.n	80055f2 <UART_SetConfig+0x246>
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a5c      	ldr	r2, [pc, #368]	; (80056bc <UART_SetConfig+0x310>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d106      	bne.n	800555e <UART_SetConfig+0x1b2>
 8005550:	231b      	movs	r3, #27
 8005552:	2220      	movs	r2, #32
 8005554:	189b      	adds	r3, r3, r2
 8005556:	19db      	adds	r3, r3, r7
 8005558:	2200      	movs	r2, #0
 800555a:	701a      	strb	r2, [r3, #0]
 800555c:	e049      	b.n	80055f2 <UART_SetConfig+0x246>
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a50      	ldr	r2, [pc, #320]	; (80056a4 <UART_SetConfig+0x2f8>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d13e      	bne.n	80055e6 <UART_SetConfig+0x23a>
 8005568:	4b51      	ldr	r3, [pc, #324]	; (80056b0 <UART_SetConfig+0x304>)
 800556a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800556c:	23c0      	movs	r3, #192	; 0xc0
 800556e:	011b      	lsls	r3, r3, #4
 8005570:	4013      	ands	r3, r2
 8005572:	22c0      	movs	r2, #192	; 0xc0
 8005574:	0112      	lsls	r2, r2, #4
 8005576:	4293      	cmp	r3, r2
 8005578:	d027      	beq.n	80055ca <UART_SetConfig+0x21e>
 800557a:	22c0      	movs	r2, #192	; 0xc0
 800557c:	0112      	lsls	r2, r2, #4
 800557e:	4293      	cmp	r3, r2
 8005580:	d82a      	bhi.n	80055d8 <UART_SetConfig+0x22c>
 8005582:	2280      	movs	r2, #128	; 0x80
 8005584:	0112      	lsls	r2, r2, #4
 8005586:	4293      	cmp	r3, r2
 8005588:	d011      	beq.n	80055ae <UART_SetConfig+0x202>
 800558a:	2280      	movs	r2, #128	; 0x80
 800558c:	0112      	lsls	r2, r2, #4
 800558e:	4293      	cmp	r3, r2
 8005590:	d822      	bhi.n	80055d8 <UART_SetConfig+0x22c>
 8005592:	2b00      	cmp	r3, #0
 8005594:	d004      	beq.n	80055a0 <UART_SetConfig+0x1f4>
 8005596:	2280      	movs	r2, #128	; 0x80
 8005598:	00d2      	lsls	r2, r2, #3
 800559a:	4293      	cmp	r3, r2
 800559c:	d00e      	beq.n	80055bc <UART_SetConfig+0x210>
 800559e:	e01b      	b.n	80055d8 <UART_SetConfig+0x22c>
 80055a0:	231b      	movs	r3, #27
 80055a2:	2220      	movs	r2, #32
 80055a4:	189b      	adds	r3, r3, r2
 80055a6:	19db      	adds	r3, r3, r7
 80055a8:	2200      	movs	r2, #0
 80055aa:	701a      	strb	r2, [r3, #0]
 80055ac:	e021      	b.n	80055f2 <UART_SetConfig+0x246>
 80055ae:	231b      	movs	r3, #27
 80055b0:	2220      	movs	r2, #32
 80055b2:	189b      	adds	r3, r3, r2
 80055b4:	19db      	adds	r3, r3, r7
 80055b6:	2202      	movs	r2, #2
 80055b8:	701a      	strb	r2, [r3, #0]
 80055ba:	e01a      	b.n	80055f2 <UART_SetConfig+0x246>
 80055bc:	231b      	movs	r3, #27
 80055be:	2220      	movs	r2, #32
 80055c0:	189b      	adds	r3, r3, r2
 80055c2:	19db      	adds	r3, r3, r7
 80055c4:	2204      	movs	r2, #4
 80055c6:	701a      	strb	r2, [r3, #0]
 80055c8:	e013      	b.n	80055f2 <UART_SetConfig+0x246>
 80055ca:	231b      	movs	r3, #27
 80055cc:	2220      	movs	r2, #32
 80055ce:	189b      	adds	r3, r3, r2
 80055d0:	19db      	adds	r3, r3, r7
 80055d2:	2208      	movs	r2, #8
 80055d4:	701a      	strb	r2, [r3, #0]
 80055d6:	e00c      	b.n	80055f2 <UART_SetConfig+0x246>
 80055d8:	231b      	movs	r3, #27
 80055da:	2220      	movs	r2, #32
 80055dc:	189b      	adds	r3, r3, r2
 80055de:	19db      	adds	r3, r3, r7
 80055e0:	2210      	movs	r2, #16
 80055e2:	701a      	strb	r2, [r3, #0]
 80055e4:	e005      	b.n	80055f2 <UART_SetConfig+0x246>
 80055e6:	231b      	movs	r3, #27
 80055e8:	2220      	movs	r2, #32
 80055ea:	189b      	adds	r3, r3, r2
 80055ec:	19db      	adds	r3, r3, r7
 80055ee:	2210      	movs	r2, #16
 80055f0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a2b      	ldr	r2, [pc, #172]	; (80056a4 <UART_SetConfig+0x2f8>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d000      	beq.n	80055fe <UART_SetConfig+0x252>
 80055fc:	e0a9      	b.n	8005752 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80055fe:	231b      	movs	r3, #27
 8005600:	2220      	movs	r2, #32
 8005602:	189b      	adds	r3, r3, r2
 8005604:	19db      	adds	r3, r3, r7
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	2b08      	cmp	r3, #8
 800560a:	d015      	beq.n	8005638 <UART_SetConfig+0x28c>
 800560c:	dc18      	bgt.n	8005640 <UART_SetConfig+0x294>
 800560e:	2b04      	cmp	r3, #4
 8005610:	d00d      	beq.n	800562e <UART_SetConfig+0x282>
 8005612:	dc15      	bgt.n	8005640 <UART_SetConfig+0x294>
 8005614:	2b00      	cmp	r3, #0
 8005616:	d002      	beq.n	800561e <UART_SetConfig+0x272>
 8005618:	2b02      	cmp	r3, #2
 800561a:	d005      	beq.n	8005628 <UART_SetConfig+0x27c>
 800561c:	e010      	b.n	8005640 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800561e:	f7fe ffa9 	bl	8004574 <HAL_RCC_GetPCLK1Freq>
 8005622:	0003      	movs	r3, r0
 8005624:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005626:	e014      	b.n	8005652 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005628:	4b25      	ldr	r3, [pc, #148]	; (80056c0 <UART_SetConfig+0x314>)
 800562a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800562c:	e011      	b.n	8005652 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800562e:	f7fe ff15 	bl	800445c <HAL_RCC_GetSysClockFreq>
 8005632:	0003      	movs	r3, r0
 8005634:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005636:	e00c      	b.n	8005652 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005638:	2380      	movs	r3, #128	; 0x80
 800563a:	021b      	lsls	r3, r3, #8
 800563c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800563e:	e008      	b.n	8005652 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005644:	231a      	movs	r3, #26
 8005646:	2220      	movs	r2, #32
 8005648:	189b      	adds	r3, r3, r2
 800564a:	19db      	adds	r3, r3, r7
 800564c:	2201      	movs	r2, #1
 800564e:	701a      	strb	r2, [r3, #0]
        break;
 8005650:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005654:	2b00      	cmp	r3, #0
 8005656:	d100      	bne.n	800565a <UART_SetConfig+0x2ae>
 8005658:	e14b      	b.n	80058f2 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800565e:	4b19      	ldr	r3, [pc, #100]	; (80056c4 <UART_SetConfig+0x318>)
 8005660:	0052      	lsls	r2, r2, #1
 8005662:	5ad3      	ldrh	r3, [r2, r3]
 8005664:	0019      	movs	r1, r3
 8005666:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005668:	f7fa fd68 	bl	800013c <__udivsi3>
 800566c:	0003      	movs	r3, r0
 800566e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005672:	685a      	ldr	r2, [r3, #4]
 8005674:	0013      	movs	r3, r2
 8005676:	005b      	lsls	r3, r3, #1
 8005678:	189b      	adds	r3, r3, r2
 800567a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800567c:	429a      	cmp	r2, r3
 800567e:	d305      	bcc.n	800568c <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005688:	429a      	cmp	r2, r3
 800568a:	d91d      	bls.n	80056c8 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800568c:	231a      	movs	r3, #26
 800568e:	2220      	movs	r2, #32
 8005690:	189b      	adds	r3, r3, r2
 8005692:	19db      	adds	r3, r3, r7
 8005694:	2201      	movs	r2, #1
 8005696:	701a      	strb	r2, [r3, #0]
 8005698:	e12b      	b.n	80058f2 <UART_SetConfig+0x546>
 800569a:	46c0      	nop			; (mov r8, r8)
 800569c:	cfff69f3 	.word	0xcfff69f3
 80056a0:	ffffcfff 	.word	0xffffcfff
 80056a4:	40008000 	.word	0x40008000
 80056a8:	11fff4ff 	.word	0x11fff4ff
 80056ac:	40013800 	.word	0x40013800
 80056b0:	40021000 	.word	0x40021000
 80056b4:	40004400 	.word	0x40004400
 80056b8:	40004800 	.word	0x40004800
 80056bc:	40004c00 	.word	0x40004c00
 80056c0:	00f42400 	.word	0x00f42400
 80056c4:	0800aca4 	.word	0x0800aca4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ca:	61bb      	str	r3, [r7, #24]
 80056cc:	2300      	movs	r3, #0
 80056ce:	61fb      	str	r3, [r7, #28]
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056d4:	4b92      	ldr	r3, [pc, #584]	; (8005920 <UART_SetConfig+0x574>)
 80056d6:	0052      	lsls	r2, r2, #1
 80056d8:	5ad3      	ldrh	r3, [r2, r3]
 80056da:	613b      	str	r3, [r7, #16]
 80056dc:	2300      	movs	r3, #0
 80056de:	617b      	str	r3, [r7, #20]
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	69b8      	ldr	r0, [r7, #24]
 80056e6:	69f9      	ldr	r1, [r7, #28]
 80056e8:	f7fa fedc 	bl	80004a4 <__aeabi_uldivmod>
 80056ec:	0002      	movs	r2, r0
 80056ee:	000b      	movs	r3, r1
 80056f0:	0e11      	lsrs	r1, r2, #24
 80056f2:	021d      	lsls	r5, r3, #8
 80056f4:	430d      	orrs	r5, r1
 80056f6:	0214      	lsls	r4, r2, #8
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	085b      	lsrs	r3, r3, #1
 80056fe:	60bb      	str	r3, [r7, #8]
 8005700:	2300      	movs	r3, #0
 8005702:	60fb      	str	r3, [r7, #12]
 8005704:	68b8      	ldr	r0, [r7, #8]
 8005706:	68f9      	ldr	r1, [r7, #12]
 8005708:	1900      	adds	r0, r0, r4
 800570a:	4169      	adcs	r1, r5
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	603b      	str	r3, [r7, #0]
 8005712:	2300      	movs	r3, #0
 8005714:	607b      	str	r3, [r7, #4]
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f7fa fec3 	bl	80004a4 <__aeabi_uldivmod>
 800571e:	0002      	movs	r2, r0
 8005720:	000b      	movs	r3, r1
 8005722:	0013      	movs	r3, r2
 8005724:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005726:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005728:	23c0      	movs	r3, #192	; 0xc0
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	429a      	cmp	r2, r3
 800572e:	d309      	bcc.n	8005744 <UART_SetConfig+0x398>
 8005730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005732:	2380      	movs	r3, #128	; 0x80
 8005734:	035b      	lsls	r3, r3, #13
 8005736:	429a      	cmp	r2, r3
 8005738:	d204      	bcs.n	8005744 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005740:	60da      	str	r2, [r3, #12]
 8005742:	e0d6      	b.n	80058f2 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8005744:	231a      	movs	r3, #26
 8005746:	2220      	movs	r2, #32
 8005748:	189b      	adds	r3, r3, r2
 800574a:	19db      	adds	r3, r3, r7
 800574c:	2201      	movs	r2, #1
 800574e:	701a      	strb	r2, [r3, #0]
 8005750:	e0cf      	b.n	80058f2 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005754:	69da      	ldr	r2, [r3, #28]
 8005756:	2380      	movs	r3, #128	; 0x80
 8005758:	021b      	lsls	r3, r3, #8
 800575a:	429a      	cmp	r2, r3
 800575c:	d000      	beq.n	8005760 <UART_SetConfig+0x3b4>
 800575e:	e070      	b.n	8005842 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8005760:	231b      	movs	r3, #27
 8005762:	2220      	movs	r2, #32
 8005764:	189b      	adds	r3, r3, r2
 8005766:	19db      	adds	r3, r3, r7
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	2b08      	cmp	r3, #8
 800576c:	d015      	beq.n	800579a <UART_SetConfig+0x3ee>
 800576e:	dc18      	bgt.n	80057a2 <UART_SetConfig+0x3f6>
 8005770:	2b04      	cmp	r3, #4
 8005772:	d00d      	beq.n	8005790 <UART_SetConfig+0x3e4>
 8005774:	dc15      	bgt.n	80057a2 <UART_SetConfig+0x3f6>
 8005776:	2b00      	cmp	r3, #0
 8005778:	d002      	beq.n	8005780 <UART_SetConfig+0x3d4>
 800577a:	2b02      	cmp	r3, #2
 800577c:	d005      	beq.n	800578a <UART_SetConfig+0x3de>
 800577e:	e010      	b.n	80057a2 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005780:	f7fe fef8 	bl	8004574 <HAL_RCC_GetPCLK1Freq>
 8005784:	0003      	movs	r3, r0
 8005786:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005788:	e014      	b.n	80057b4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800578a:	4b66      	ldr	r3, [pc, #408]	; (8005924 <UART_SetConfig+0x578>)
 800578c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800578e:	e011      	b.n	80057b4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005790:	f7fe fe64 	bl	800445c <HAL_RCC_GetSysClockFreq>
 8005794:	0003      	movs	r3, r0
 8005796:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005798:	e00c      	b.n	80057b4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800579a:	2380      	movs	r3, #128	; 0x80
 800579c:	021b      	lsls	r3, r3, #8
 800579e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057a0:	e008      	b.n	80057b4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80057a2:	2300      	movs	r3, #0
 80057a4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80057a6:	231a      	movs	r3, #26
 80057a8:	2220      	movs	r2, #32
 80057aa:	189b      	adds	r3, r3, r2
 80057ac:	19db      	adds	r3, r3, r7
 80057ae:	2201      	movs	r2, #1
 80057b0:	701a      	strb	r2, [r3, #0]
        break;
 80057b2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d100      	bne.n	80057bc <UART_SetConfig+0x410>
 80057ba:	e09a      	b.n	80058f2 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057c0:	4b57      	ldr	r3, [pc, #348]	; (8005920 <UART_SetConfig+0x574>)
 80057c2:	0052      	lsls	r2, r2, #1
 80057c4:	5ad3      	ldrh	r3, [r2, r3]
 80057c6:	0019      	movs	r1, r3
 80057c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80057ca:	f7fa fcb7 	bl	800013c <__udivsi3>
 80057ce:	0003      	movs	r3, r0
 80057d0:	005a      	lsls	r2, r3, #1
 80057d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	085b      	lsrs	r3, r3, #1
 80057d8:	18d2      	adds	r2, r2, r3
 80057da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	0019      	movs	r1, r3
 80057e0:	0010      	movs	r0, r2
 80057e2:	f7fa fcab 	bl	800013c <__udivsi3>
 80057e6:	0003      	movs	r3, r0
 80057e8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ec:	2b0f      	cmp	r3, #15
 80057ee:	d921      	bls.n	8005834 <UART_SetConfig+0x488>
 80057f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057f2:	2380      	movs	r3, #128	; 0x80
 80057f4:	025b      	lsls	r3, r3, #9
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d21c      	bcs.n	8005834 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	200e      	movs	r0, #14
 8005800:	2420      	movs	r4, #32
 8005802:	1903      	adds	r3, r0, r4
 8005804:	19db      	adds	r3, r3, r7
 8005806:	210f      	movs	r1, #15
 8005808:	438a      	bics	r2, r1
 800580a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800580c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580e:	085b      	lsrs	r3, r3, #1
 8005810:	b29b      	uxth	r3, r3
 8005812:	2207      	movs	r2, #7
 8005814:	4013      	ands	r3, r2
 8005816:	b299      	uxth	r1, r3
 8005818:	1903      	adds	r3, r0, r4
 800581a:	19db      	adds	r3, r3, r7
 800581c:	1902      	adds	r2, r0, r4
 800581e:	19d2      	adds	r2, r2, r7
 8005820:	8812      	ldrh	r2, [r2, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	1902      	adds	r2, r0, r4
 800582c:	19d2      	adds	r2, r2, r7
 800582e:	8812      	ldrh	r2, [r2, #0]
 8005830:	60da      	str	r2, [r3, #12]
 8005832:	e05e      	b.n	80058f2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005834:	231a      	movs	r3, #26
 8005836:	2220      	movs	r2, #32
 8005838:	189b      	adds	r3, r3, r2
 800583a:	19db      	adds	r3, r3, r7
 800583c:	2201      	movs	r2, #1
 800583e:	701a      	strb	r2, [r3, #0]
 8005840:	e057      	b.n	80058f2 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005842:	231b      	movs	r3, #27
 8005844:	2220      	movs	r2, #32
 8005846:	189b      	adds	r3, r3, r2
 8005848:	19db      	adds	r3, r3, r7
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	2b08      	cmp	r3, #8
 800584e:	d015      	beq.n	800587c <UART_SetConfig+0x4d0>
 8005850:	dc18      	bgt.n	8005884 <UART_SetConfig+0x4d8>
 8005852:	2b04      	cmp	r3, #4
 8005854:	d00d      	beq.n	8005872 <UART_SetConfig+0x4c6>
 8005856:	dc15      	bgt.n	8005884 <UART_SetConfig+0x4d8>
 8005858:	2b00      	cmp	r3, #0
 800585a:	d002      	beq.n	8005862 <UART_SetConfig+0x4b6>
 800585c:	2b02      	cmp	r3, #2
 800585e:	d005      	beq.n	800586c <UART_SetConfig+0x4c0>
 8005860:	e010      	b.n	8005884 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005862:	f7fe fe87 	bl	8004574 <HAL_RCC_GetPCLK1Freq>
 8005866:	0003      	movs	r3, r0
 8005868:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800586a:	e014      	b.n	8005896 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800586c:	4b2d      	ldr	r3, [pc, #180]	; (8005924 <UART_SetConfig+0x578>)
 800586e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005870:	e011      	b.n	8005896 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005872:	f7fe fdf3 	bl	800445c <HAL_RCC_GetSysClockFreq>
 8005876:	0003      	movs	r3, r0
 8005878:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800587a:	e00c      	b.n	8005896 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800587c:	2380      	movs	r3, #128	; 0x80
 800587e:	021b      	lsls	r3, r3, #8
 8005880:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005882:	e008      	b.n	8005896 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8005884:	2300      	movs	r3, #0
 8005886:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005888:	231a      	movs	r3, #26
 800588a:	2220      	movs	r2, #32
 800588c:	189b      	adds	r3, r3, r2
 800588e:	19db      	adds	r3, r3, r7
 8005890:	2201      	movs	r2, #1
 8005892:	701a      	strb	r2, [r3, #0]
        break;
 8005894:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005898:	2b00      	cmp	r3, #0
 800589a:	d02a      	beq.n	80058f2 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058a0:	4b1f      	ldr	r3, [pc, #124]	; (8005920 <UART_SetConfig+0x574>)
 80058a2:	0052      	lsls	r2, r2, #1
 80058a4:	5ad3      	ldrh	r3, [r2, r3]
 80058a6:	0019      	movs	r1, r3
 80058a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80058aa:	f7fa fc47 	bl	800013c <__udivsi3>
 80058ae:	0003      	movs	r3, r0
 80058b0:	001a      	movs	r2, r3
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	085b      	lsrs	r3, r3, #1
 80058b8:	18d2      	adds	r2, r2, r3
 80058ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	0019      	movs	r1, r3
 80058c0:	0010      	movs	r0, r2
 80058c2:	f7fa fc3b 	bl	800013c <__udivsi3>
 80058c6:	0003      	movs	r3, r0
 80058c8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058cc:	2b0f      	cmp	r3, #15
 80058ce:	d90a      	bls.n	80058e6 <UART_SetConfig+0x53a>
 80058d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058d2:	2380      	movs	r3, #128	; 0x80
 80058d4:	025b      	lsls	r3, r3, #9
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d205      	bcs.n	80058e6 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058dc:	b29a      	uxth	r2, r3
 80058de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	60da      	str	r2, [r3, #12]
 80058e4:	e005      	b.n	80058f2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80058e6:	231a      	movs	r3, #26
 80058e8:	2220      	movs	r2, #32
 80058ea:	189b      	adds	r3, r3, r2
 80058ec:	19db      	adds	r3, r3, r7
 80058ee:	2201      	movs	r2, #1
 80058f0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	226a      	movs	r2, #106	; 0x6a
 80058f6:	2101      	movs	r1, #1
 80058f8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80058fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fc:	2268      	movs	r2, #104	; 0x68
 80058fe:	2101      	movs	r1, #1
 8005900:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005904:	2200      	movs	r2, #0
 8005906:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590a:	2200      	movs	r2, #0
 800590c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800590e:	231a      	movs	r3, #26
 8005910:	2220      	movs	r2, #32
 8005912:	189b      	adds	r3, r3, r2
 8005914:	19db      	adds	r3, r3, r7
 8005916:	781b      	ldrb	r3, [r3, #0]
}
 8005918:	0018      	movs	r0, r3
 800591a:	46bd      	mov	sp, r7
 800591c:	b010      	add	sp, #64	; 0x40
 800591e:	bdb0      	pop	{r4, r5, r7, pc}
 8005920:	0800aca4 	.word	0x0800aca4
 8005924:	00f42400 	.word	0x00f42400

08005928 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005934:	2201      	movs	r2, #1
 8005936:	4013      	ands	r3, r2
 8005938:	d00b      	beq.n	8005952 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	4a4a      	ldr	r2, [pc, #296]	; (8005a6c <UART_AdvFeatureConfig+0x144>)
 8005942:	4013      	ands	r3, r2
 8005944:	0019      	movs	r1, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	430a      	orrs	r2, r1
 8005950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005956:	2202      	movs	r2, #2
 8005958:	4013      	ands	r3, r2
 800595a:	d00b      	beq.n	8005974 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	4a43      	ldr	r2, [pc, #268]	; (8005a70 <UART_AdvFeatureConfig+0x148>)
 8005964:	4013      	ands	r3, r2
 8005966:	0019      	movs	r1, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	430a      	orrs	r2, r1
 8005972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005978:	2204      	movs	r2, #4
 800597a:	4013      	ands	r3, r2
 800597c:	d00b      	beq.n	8005996 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	4a3b      	ldr	r2, [pc, #236]	; (8005a74 <UART_AdvFeatureConfig+0x14c>)
 8005986:	4013      	ands	r3, r2
 8005988:	0019      	movs	r1, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	430a      	orrs	r2, r1
 8005994:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599a:	2208      	movs	r2, #8
 800599c:	4013      	ands	r3, r2
 800599e:	d00b      	beq.n	80059b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	4a34      	ldr	r2, [pc, #208]	; (8005a78 <UART_AdvFeatureConfig+0x150>)
 80059a8:	4013      	ands	r3, r2
 80059aa:	0019      	movs	r1, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	430a      	orrs	r2, r1
 80059b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059bc:	2210      	movs	r2, #16
 80059be:	4013      	ands	r3, r2
 80059c0:	d00b      	beq.n	80059da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	4a2c      	ldr	r2, [pc, #176]	; (8005a7c <UART_AdvFeatureConfig+0x154>)
 80059ca:	4013      	ands	r3, r2
 80059cc:	0019      	movs	r1, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	430a      	orrs	r2, r1
 80059d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059de:	2220      	movs	r2, #32
 80059e0:	4013      	ands	r3, r2
 80059e2:	d00b      	beq.n	80059fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	4a25      	ldr	r2, [pc, #148]	; (8005a80 <UART_AdvFeatureConfig+0x158>)
 80059ec:	4013      	ands	r3, r2
 80059ee:	0019      	movs	r1, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	430a      	orrs	r2, r1
 80059fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a00:	2240      	movs	r2, #64	; 0x40
 8005a02:	4013      	ands	r3, r2
 8005a04:	d01d      	beq.n	8005a42 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	4a1d      	ldr	r2, [pc, #116]	; (8005a84 <UART_AdvFeatureConfig+0x15c>)
 8005a0e:	4013      	ands	r3, r2
 8005a10:	0019      	movs	r1, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a22:	2380      	movs	r3, #128	; 0x80
 8005a24:	035b      	lsls	r3, r3, #13
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d10b      	bne.n	8005a42 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	4a15      	ldr	r2, [pc, #84]	; (8005a88 <UART_AdvFeatureConfig+0x160>)
 8005a32:	4013      	ands	r3, r2
 8005a34:	0019      	movs	r1, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a46:	2280      	movs	r2, #128	; 0x80
 8005a48:	4013      	ands	r3, r2
 8005a4a:	d00b      	beq.n	8005a64 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	4a0e      	ldr	r2, [pc, #56]	; (8005a8c <UART_AdvFeatureConfig+0x164>)
 8005a54:	4013      	ands	r3, r2
 8005a56:	0019      	movs	r1, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	430a      	orrs	r2, r1
 8005a62:	605a      	str	r2, [r3, #4]
  }
}
 8005a64:	46c0      	nop			; (mov r8, r8)
 8005a66:	46bd      	mov	sp, r7
 8005a68:	b002      	add	sp, #8
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	fffdffff 	.word	0xfffdffff
 8005a70:	fffeffff 	.word	0xfffeffff
 8005a74:	fffbffff 	.word	0xfffbffff
 8005a78:	ffff7fff 	.word	0xffff7fff
 8005a7c:	ffffefff 	.word	0xffffefff
 8005a80:	ffffdfff 	.word	0xffffdfff
 8005a84:	ffefffff 	.word	0xffefffff
 8005a88:	ff9fffff 	.word	0xff9fffff
 8005a8c:	fff7ffff 	.word	0xfff7ffff

08005a90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af02      	add	r7, sp, #8
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2290      	movs	r2, #144	; 0x90
 8005a9c:	2100      	movs	r1, #0
 8005a9e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005aa0:	f7fd fc06 	bl	80032b0 <HAL_GetTick>
 8005aa4:	0003      	movs	r3, r0
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2208      	movs	r2, #8
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	2b08      	cmp	r3, #8
 8005ab4:	d10c      	bne.n	8005ad0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2280      	movs	r2, #128	; 0x80
 8005aba:	0391      	lsls	r1, r2, #14
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	4a1a      	ldr	r2, [pc, #104]	; (8005b28 <UART_CheckIdleState+0x98>)
 8005ac0:	9200      	str	r2, [sp, #0]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f000 f832 	bl	8005b2c <UART_WaitOnFlagUntilTimeout>
 8005ac8:	1e03      	subs	r3, r0, #0
 8005aca:	d001      	beq.n	8005ad0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e026      	b.n	8005b1e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2204      	movs	r2, #4
 8005ad8:	4013      	ands	r3, r2
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	d10c      	bne.n	8005af8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2280      	movs	r2, #128	; 0x80
 8005ae2:	03d1      	lsls	r1, r2, #15
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	4a10      	ldr	r2, [pc, #64]	; (8005b28 <UART_CheckIdleState+0x98>)
 8005ae8:	9200      	str	r2, [sp, #0]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f000 f81e 	bl	8005b2c <UART_WaitOnFlagUntilTimeout>
 8005af0:	1e03      	subs	r3, r0, #0
 8005af2:	d001      	beq.n	8005af8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e012      	b.n	8005b1e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2288      	movs	r2, #136	; 0x88
 8005afc:	2120      	movs	r1, #32
 8005afe:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	228c      	movs	r2, #140	; 0x8c
 8005b04:	2120      	movs	r1, #32
 8005b06:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2284      	movs	r2, #132	; 0x84
 8005b18:	2100      	movs	r1, #0
 8005b1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	0018      	movs	r0, r3
 8005b20:	46bd      	mov	sp, r7
 8005b22:	b004      	add	sp, #16
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	46c0      	nop			; (mov r8, r8)
 8005b28:	01ffffff 	.word	0x01ffffff

08005b2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b094      	sub	sp, #80	; 0x50
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	603b      	str	r3, [r7, #0]
 8005b38:	1dfb      	adds	r3, r7, #7
 8005b3a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b3c:	e0a7      	b.n	8005c8e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b40:	3301      	adds	r3, #1
 8005b42:	d100      	bne.n	8005b46 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005b44:	e0a3      	b.n	8005c8e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b46:	f7fd fbb3 	bl	80032b0 <HAL_GetTick>
 8005b4a:	0002      	movs	r2, r0
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d302      	bcc.n	8005b5c <UART_WaitOnFlagUntilTimeout+0x30>
 8005b56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d13f      	bne.n	8005bdc <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b5c:	f3ef 8310 	mrs	r3, PRIMASK
 8005b60:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005b64:	647b      	str	r3, [r7, #68]	; 0x44
 8005b66:	2301      	movs	r3, #1
 8005b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6c:	f383 8810 	msr	PRIMASK, r3
}
 8005b70:	46c0      	nop			; (mov r8, r8)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	494e      	ldr	r1, [pc, #312]	; (8005cb8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005b7e:	400a      	ands	r2, r1
 8005b80:	601a      	str	r2, [r3, #0]
 8005b82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b84:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b88:	f383 8810 	msr	PRIMASK, r3
}
 8005b8c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b8e:	f3ef 8310 	mrs	r3, PRIMASK
 8005b92:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b96:	643b      	str	r3, [r7, #64]	; 0x40
 8005b98:	2301      	movs	r3, #1
 8005b9a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9e:	f383 8810 	msr	PRIMASK, r3
}
 8005ba2:	46c0      	nop			; (mov r8, r8)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	689a      	ldr	r2, [r3, #8]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2101      	movs	r1, #1
 8005bb0:	438a      	bics	r2, r1
 8005bb2:	609a      	str	r2, [r3, #8]
 8005bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bba:	f383 8810 	msr	PRIMASK, r3
}
 8005bbe:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2288      	movs	r2, #136	; 0x88
 8005bc4:	2120      	movs	r1, #32
 8005bc6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	228c      	movs	r2, #140	; 0x8c
 8005bcc:	2120      	movs	r1, #32
 8005bce:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2284      	movs	r2, #132	; 0x84
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e069      	b.n	8005cb0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2204      	movs	r2, #4
 8005be4:	4013      	ands	r3, r2
 8005be6:	d052      	beq.n	8005c8e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	69da      	ldr	r2, [r3, #28]
 8005bee:	2380      	movs	r3, #128	; 0x80
 8005bf0:	011b      	lsls	r3, r3, #4
 8005bf2:	401a      	ands	r2, r3
 8005bf4:	2380      	movs	r3, #128	; 0x80
 8005bf6:	011b      	lsls	r3, r3, #4
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d148      	bne.n	8005c8e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2280      	movs	r2, #128	; 0x80
 8005c02:	0112      	lsls	r2, r2, #4
 8005c04:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c06:	f3ef 8310 	mrs	r3, PRIMASK
 8005c0a:	613b      	str	r3, [r7, #16]
  return(result);
 8005c0c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c10:	2301      	movs	r3, #1
 8005c12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f383 8810 	msr	PRIMASK, r3
}
 8005c1a:	46c0      	nop			; (mov r8, r8)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4924      	ldr	r1, [pc, #144]	; (8005cb8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005c28:	400a      	ands	r2, r1
 8005c2a:	601a      	str	r2, [r3, #0]
 8005c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c2e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	f383 8810 	msr	PRIMASK, r3
}
 8005c36:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c38:	f3ef 8310 	mrs	r3, PRIMASK
 8005c3c:	61fb      	str	r3, [r7, #28]
  return(result);
 8005c3e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c40:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c42:	2301      	movs	r3, #1
 8005c44:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	f383 8810 	msr	PRIMASK, r3
}
 8005c4c:	46c0      	nop			; (mov r8, r8)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2101      	movs	r1, #1
 8005c5a:	438a      	bics	r2, r1
 8005c5c:	609a      	str	r2, [r3, #8]
 8005c5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c60:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c64:	f383 8810 	msr	PRIMASK, r3
}
 8005c68:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2288      	movs	r2, #136	; 0x88
 8005c6e:	2120      	movs	r1, #32
 8005c70:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	228c      	movs	r2, #140	; 0x8c
 8005c76:	2120      	movs	r1, #32
 8005c78:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2290      	movs	r2, #144	; 0x90
 8005c7e:	2120      	movs	r1, #32
 8005c80:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2284      	movs	r2, #132	; 0x84
 8005c86:	2100      	movs	r1, #0
 8005c88:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e010      	b.n	8005cb0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	69db      	ldr	r3, [r3, #28]
 8005c94:	68ba      	ldr	r2, [r7, #8]
 8005c96:	4013      	ands	r3, r2
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	425a      	negs	r2, r3
 8005c9e:	4153      	adcs	r3, r2
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	001a      	movs	r2, r3
 8005ca4:	1dfb      	adds	r3, r7, #7
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d100      	bne.n	8005cae <UART_WaitOnFlagUntilTimeout+0x182>
 8005cac:	e747      	b.n	8005b3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	0018      	movs	r0, r3
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	b014      	add	sp, #80	; 0x50
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	fffffe5f 	.word	0xfffffe5f

08005cbc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2284      	movs	r2, #132	; 0x84
 8005cc8:	5c9b      	ldrb	r3, [r3, r2]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d101      	bne.n	8005cd2 <HAL_UARTEx_DisableFifoMode+0x16>
 8005cce:	2302      	movs	r3, #2
 8005cd0:	e027      	b.n	8005d22 <HAL_UARTEx_DisableFifoMode+0x66>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2284      	movs	r2, #132	; 0x84
 8005cd6:	2101      	movs	r1, #1
 8005cd8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2288      	movs	r2, #136	; 0x88
 8005cde:	2124      	movs	r1, #36	; 0x24
 8005ce0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2101      	movs	r1, #1
 8005cf6:	438a      	bics	r2, r1
 8005cf8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	4a0b      	ldr	r2, [pc, #44]	; (8005d2c <HAL_UARTEx_DisableFifoMode+0x70>)
 8005cfe:	4013      	ands	r3, r2
 8005d00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2288      	movs	r2, #136	; 0x88
 8005d14:	2120      	movs	r1, #32
 8005d16:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2284      	movs	r2, #132	; 0x84
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	0018      	movs	r0, r3
 8005d24:	46bd      	mov	sp, r7
 8005d26:	b004      	add	sp, #16
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	46c0      	nop			; (mov r8, r8)
 8005d2c:	dfffffff 	.word	0xdfffffff

08005d30 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2284      	movs	r2, #132	; 0x84
 8005d3e:	5c9b      	ldrb	r3, [r3, r2]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d101      	bne.n	8005d48 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d44:	2302      	movs	r3, #2
 8005d46:	e02e      	b.n	8005da6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2284      	movs	r2, #132	; 0x84
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2288      	movs	r2, #136	; 0x88
 8005d54:	2124      	movs	r1, #36	; 0x24
 8005d56:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2101      	movs	r1, #1
 8005d6c:	438a      	bics	r2, r1
 8005d6e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	00db      	lsls	r3, r3, #3
 8005d78:	08d9      	lsrs	r1, r3, #3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	430a      	orrs	r2, r1
 8005d82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	0018      	movs	r0, r3
 8005d88:	f000 f854 	bl	8005e34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2288      	movs	r2, #136	; 0x88
 8005d98:	2120      	movs	r1, #32
 8005d9a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2284      	movs	r2, #132	; 0x84
 8005da0:	2100      	movs	r1, #0
 8005da2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	0018      	movs	r0, r3
 8005da8:	46bd      	mov	sp, r7
 8005daa:	b004      	add	sp, #16
 8005dac:	bd80      	pop	{r7, pc}
	...

08005db0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2284      	movs	r2, #132	; 0x84
 8005dbe:	5c9b      	ldrb	r3, [r3, r2]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d101      	bne.n	8005dc8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	e02f      	b.n	8005e28 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2284      	movs	r2, #132	; 0x84
 8005dcc:	2101      	movs	r1, #1
 8005dce:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2288      	movs	r2, #136	; 0x88
 8005dd4:	2124      	movs	r1, #36	; 0x24
 8005dd6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2101      	movs	r1, #1
 8005dec:	438a      	bics	r2, r1
 8005dee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	4a0e      	ldr	r2, [pc, #56]	; (8005e30 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005df8:	4013      	ands	r3, r2
 8005dfa:	0019      	movs	r1, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	430a      	orrs	r2, r1
 8005e04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	0018      	movs	r0, r3
 8005e0a:	f000 f813 	bl	8005e34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2288      	movs	r2, #136	; 0x88
 8005e1a:	2120      	movs	r1, #32
 8005e1c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2284      	movs	r2, #132	; 0x84
 8005e22:	2100      	movs	r1, #0
 8005e24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	0018      	movs	r0, r3
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	b004      	add	sp, #16
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	f1ffffff 	.word	0xf1ffffff

08005e34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d108      	bne.n	8005e56 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	226a      	movs	r2, #106	; 0x6a
 8005e48:	2101      	movs	r1, #1
 8005e4a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2268      	movs	r2, #104	; 0x68
 8005e50:	2101      	movs	r1, #1
 8005e52:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e54:	e043      	b.n	8005ede <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e56:	260f      	movs	r6, #15
 8005e58:	19bb      	adds	r3, r7, r6
 8005e5a:	2208      	movs	r2, #8
 8005e5c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e5e:	200e      	movs	r0, #14
 8005e60:	183b      	adds	r3, r7, r0
 8005e62:	2208      	movs	r2, #8
 8005e64:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	0e5b      	lsrs	r3, r3, #25
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	240d      	movs	r4, #13
 8005e72:	193b      	adds	r3, r7, r4
 8005e74:	2107      	movs	r1, #7
 8005e76:	400a      	ands	r2, r1
 8005e78:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	0f5b      	lsrs	r3, r3, #29
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	250c      	movs	r5, #12
 8005e86:	197b      	adds	r3, r7, r5
 8005e88:	2107      	movs	r1, #7
 8005e8a:	400a      	ands	r2, r1
 8005e8c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e8e:	183b      	adds	r3, r7, r0
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	197a      	adds	r2, r7, r5
 8005e94:	7812      	ldrb	r2, [r2, #0]
 8005e96:	4914      	ldr	r1, [pc, #80]	; (8005ee8 <UARTEx_SetNbDataToProcess+0xb4>)
 8005e98:	5c8a      	ldrb	r2, [r1, r2]
 8005e9a:	435a      	muls	r2, r3
 8005e9c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e9e:	197b      	adds	r3, r7, r5
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	4a12      	ldr	r2, [pc, #72]	; (8005eec <UARTEx_SetNbDataToProcess+0xb8>)
 8005ea4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ea6:	0019      	movs	r1, r3
 8005ea8:	f7fa f9d2 	bl	8000250 <__divsi3>
 8005eac:	0003      	movs	r3, r0
 8005eae:	b299      	uxth	r1, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	226a      	movs	r2, #106	; 0x6a
 8005eb4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005eb6:	19bb      	adds	r3, r7, r6
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	193a      	adds	r2, r7, r4
 8005ebc:	7812      	ldrb	r2, [r2, #0]
 8005ebe:	490a      	ldr	r1, [pc, #40]	; (8005ee8 <UARTEx_SetNbDataToProcess+0xb4>)
 8005ec0:	5c8a      	ldrb	r2, [r1, r2]
 8005ec2:	435a      	muls	r2, r3
 8005ec4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ec6:	193b      	adds	r3, r7, r4
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	4a08      	ldr	r2, [pc, #32]	; (8005eec <UARTEx_SetNbDataToProcess+0xb8>)
 8005ecc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ece:	0019      	movs	r1, r3
 8005ed0:	f7fa f9be 	bl	8000250 <__divsi3>
 8005ed4:	0003      	movs	r3, r0
 8005ed6:	b299      	uxth	r1, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2268      	movs	r2, #104	; 0x68
 8005edc:	5299      	strh	r1, [r3, r2]
}
 8005ede:	46c0      	nop			; (mov r8, r8)
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	b005      	add	sp, #20
 8005ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ee6:	46c0      	nop			; (mov r8, r8)
 8005ee8:	0800acbc 	.word	0x0800acbc
 8005eec:	0800acc4 	.word	0x0800acc4

08005ef0 <my_string2double_conv>:
 */

#include "my_conversions.h"

double my_string2double_conv ( const char* s )
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
    double d = strtod ( s , NULL ) ;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2100      	movs	r1, #0
 8005efc:	0018      	movs	r0, r3
 8005efe:	f001 f84b 	bl	8006f98 <strtod>
 8005f02:	0002      	movs	r2, r0
 8005f04:	000b      	movs	r3, r1
 8005f06:	60ba      	str	r2, [r7, #8]
 8005f08:	60fb      	str	r3, [r7, #12]
    return d ;
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
}
 8005f0e:	0010      	movs	r0, r2
 8005f10:	0019      	movs	r1, r3
 8005f12:	46bd      	mov	sp, r7
 8005f14:	b004      	add	sp, #16
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	0008      	movs	r0, r1
 8005f22:	0011      	movs	r1, r2
 8005f24:	1cfb      	adds	r3, r7, #3
 8005f26:	1c02      	adds	r2, r0, #0
 8005f28:	701a      	strb	r2, [r3, #0]
 8005f2a:	1cbb      	adds	r3, r7, #2
 8005f2c:	1c0a      	adds	r2, r1, #0
 8005f2e:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 8005f30:	230f      	movs	r3, #15
 8005f32:	18fb      	adds	r3, r7, r3
 8005f34:	2200      	movs	r2, #0
 8005f36:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 8005f38:	230e      	movs	r3, #14
 8005f3a:	18fb      	adds	r3, r7, r3
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 8005f40:	e01c      	b.n	8005f7c <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 8005f42:	230f      	movs	r3, #15
 8005f44:	18fb      	adds	r3, r7, r3
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	18d3      	adds	r3, r2, r3
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	1cfa      	adds	r2, r7, #3
 8005f50:	7812      	ldrb	r2, [r2, #0]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d105      	bne.n	8005f62 <my_find_char_position+0x4a>
			p++ ;
 8005f56:	210e      	movs	r1, #14
 8005f58:	187b      	adds	r3, r7, r1
 8005f5a:	781a      	ldrb	r2, [r3, #0]
 8005f5c:	187b      	adds	r3, r7, r1
 8005f5e:	3201      	adds	r2, #1
 8005f60:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 8005f62:	230e      	movs	r3, #14
 8005f64:	18fa      	adds	r2, r7, r3
 8005f66:	1cbb      	adds	r3, r7, #2
 8005f68:	7812      	ldrb	r2, [r2, #0]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d00e      	beq.n	8005f8e <my_find_char_position+0x76>
			break ;
		i++ ;
 8005f70:	210f      	movs	r1, #15
 8005f72:	187b      	adds	r3, r7, r1
 8005f74:	781a      	ldrb	r2, [r3, #0]
 8005f76:	187b      	adds	r3, r7, r1
 8005f78:	3201      	adds	r2, #1
 8005f7a:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 8005f7c:	230f      	movs	r3, #15
 8005f7e:	18fb      	adds	r3, r7, r3
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	18d3      	adds	r3, r2, r3
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1da      	bne.n	8005f42 <my_find_char_position+0x2a>
 8005f8c:	e000      	b.n	8005f90 <my_find_char_position+0x78>
			break ;
 8005f8e:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 8005f90:	230f      	movs	r3, #15
 8005f92:	18fb      	adds	r3, r7, r3
 8005f94:	781b      	ldrb	r3, [r3, #0]
}
 8005f96:	0018      	movs	r0, r3
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	b004      	add	sp, #16
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <my_nmea_message>:

#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b084      	sub	sp, #16
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	60f8      	str	r0, [r7, #12]
 8005fa6:	60b9      	str	r1, [r7, #8]
 8005fa8:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	2b24      	cmp	r3, #36	; 0x24
 8005fb0:	d117      	bne.n	8005fe2 <my_nmea_message+0x44>
    {
        *i = 0 ;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	1c5a      	adds	r2, r3, #1
 8005fbe:	b2d1      	uxtb	r1, r2
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	7011      	strb	r1, [r2, #0]
 8005fc4:	001a      	movs	r2, r3
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	189b      	adds	r3, r3, r2
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	7812      	ldrb	r2, [r2, #0]
 8005fce:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	001a      	movs	r2, r3
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	189b      	adds	r3, r3, r2
 8005fda:	2200      	movs	r2, #0
 8005fdc:	701a      	strb	r2, [r3, #0]
        return 0 ;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	e045      	b.n	800606e <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	2b1f      	cmp	r3, #31
 8005fe8:	d907      	bls.n	8005ffa <my_nmea_message+0x5c>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	2b7e      	cmp	r3, #126	; 0x7e
 8005ff0:	d803      	bhi.n	8005ffa <my_nmea_message+0x5c>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d103      	bne.n	8006002 <my_nmea_message+0x64>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	2b0d      	cmp	r3, #13
 8006000:	d114      	bne.n	800602c <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	1c5a      	adds	r2, r3, #1
 8006008:	b2d1      	uxtb	r1, r2
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	7011      	strb	r1, [r2, #0]
 800600e:	001a      	movs	r2, r3
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	189b      	adds	r3, r3, r2
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	7812      	ldrb	r2, [r2, #0]
 8006018:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	001a      	movs	r2, r3
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	189b      	adds	r3, r3, r2
 8006024:	2200      	movs	r2, #0
 8006026:	701a      	strb	r2, [r3, #0]
        return 1 ;
 8006028:	2301      	movs	r3, #1
 800602a:	e020      	b.n	800606e <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	2b0a      	cmp	r3, #10
 8006032:	d11a      	bne.n	800606a <my_nmea_message+0xcc>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d916      	bls.n	800606a <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	3b01      	subs	r3, #1
 8006042:	b2da      	uxtb	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	701a      	strb	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	001a      	movs	r2, r3
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	189b      	adds	r3, r3, r2
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	2b0d      	cmp	r3, #13
 8006056:	d108      	bne.n	800606a <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	001a      	movs	r2, r3
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	189b      	adds	r3, r3, r2
 8006062:	2200      	movs	r2, #0
 8006064:	701a      	strb	r2, [r3, #0]
            return 2 ;
 8006066:	2302      	movs	r3, #2
 8006068:	e001      	b.n	800606e <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 800606a:	2301      	movs	r3, #1
 800606c:	425b      	negs	r3, r3
}
 800606e:	0018      	movs	r0, r3
 8006070:	46bd      	mov	sp, r7
 8006072:	b004      	add	sp, #16
 8006074:	bd80      	pop	{r7, pc}

08006076 <get_my_nmea_gngsa_fixed_mode_s>:

const char get_my_nmea_gngsa_fixed_mode_s ( const char* m )
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b082      	sub	sp, #8
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
	return m[9] ;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	3309      	adds	r3, #9
 8006082:	781b      	ldrb	r3, [r3, #0]
}
 8006084:	0018      	movs	r0, r3
 8006086:	46bd      	mov	sp, r7
 8006088:	b002      	add	sp, #8
 800608a:	bd80      	pop	{r7, pc}

0800608c <get_my_nmea_gngsa_pdop_d>:

double get_my_nmea_gngsa_pdop_d ( const char* m )
{
 800608c:	b5b0      	push	{r4, r5, r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
	uint8_t pdop_position = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION ) + 1 ;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	220f      	movs	r2, #15
 8006098:	212c      	movs	r1, #44	; 0x2c
 800609a:	0018      	movs	r0, r3
 800609c:	f7ff ff3c 	bl	8005f18 <my_find_char_position>
 80060a0:	0003      	movs	r3, r0
 80060a2:	001a      	movs	r2, r3
 80060a4:	2517      	movs	r5, #23
 80060a6:	197b      	adds	r3, r7, r5
 80060a8:	3201      	adds	r2, #1
 80060aa:	701a      	strb	r2, [r3, #0]
	uint8_t pdop_length = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION + 1 ) - pdop_position ;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2210      	movs	r2, #16
 80060b0:	212c      	movs	r1, #44	; 0x2c
 80060b2:	0018      	movs	r0, r3
 80060b4:	f7ff ff30 	bl	8005f18 <my_find_char_position>
 80060b8:	0003      	movs	r3, r0
 80060ba:	0019      	movs	r1, r3
 80060bc:	2416      	movs	r4, #22
 80060be:	193b      	adds	r3, r7, r4
 80060c0:	197a      	adds	r2, r7, r5
 80060c2:	7812      	ldrb	r2, [r2, #0]
 80060c4:	1a8a      	subs	r2, r1, r2
 80060c6:	701a      	strb	r2, [r3, #0]

	char* pdop_s = (char*) malloc ( ( pdop_length +1 ) * sizeof ( char ) ) ;
 80060c8:	193b      	adds	r3, r7, r4
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	3301      	adds	r3, #1
 80060ce:	0018      	movs	r0, r3
 80060d0:	f000 f870 	bl	80061b4 <malloc>
 80060d4:	0003      	movs	r3, r0
 80060d6:	613b      	str	r3, [r7, #16]
	strncpy ( pdop_s , m + pdop_position , pdop_length ) ; // Kopiowanie fragmentu łańcucha
 80060d8:	197b      	adds	r3, r7, r5
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	18d1      	adds	r1, r2, r3
 80060e0:	193b      	adds	r3, r7, r4
 80060e2:	781a      	ldrb	r2, [r3, #0]
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	0018      	movs	r0, r3
 80060e8:	f001 ffc9 	bl	800807e <strncpy>
	pdop_s[pdop_length] = '\0';
 80060ec:	193b      	adds	r3, r7, r4
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	18d3      	adds	r3, r2, r3
 80060f4:	2200      	movs	r2, #0
 80060f6:	701a      	strb	r2, [r3, #0]
	double pdop = my_string2double_conv ( pdop_s ) ;
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	0018      	movs	r0, r3
 80060fc:	f7ff fef8 	bl	8005ef0 <my_string2double_conv>
 8006100:	0002      	movs	r2, r0
 8006102:	000b      	movs	r3, r1
 8006104:	60ba      	str	r2, [r7, #8]
 8006106:	60fb      	str	r3, [r7, #12]
	free ( pdop_s ) ;
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	0018      	movs	r0, r3
 800610c:	f000 f85c 	bl	80061c8 <free>
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	68fb      	ldr	r3, [r7, #12]
}
 8006114:	0010      	movs	r0, r2
 8006116:	0019      	movs	r1, r3
 8006118:	46bd      	mov	sp, r7
 800611a:	b006      	add	sp, #24
 800611c:	bdb0      	pop	{r4, r5, r7, pc}

0800611e <is_my_nmea_checksum_ok>:

bool is_my_nmea_checksum_ok ( const char* s )
{
 800611e:	b590      	push	{r4, r7, lr}
 8006120:	b085      	sub	sp, #20
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 8006126:	230f      	movs	r3, #15
 8006128:	18fb      	adds	r3, r7, r3
 800612a:	2200      	movs	r2, #0
 800612c:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 800612e:	230e      	movs	r3, #14
 8006130:	18fb      	adds	r3, r7, r3
 8006132:	2201      	movs	r2, #1
 8006134:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8006136:	e00f      	b.n	8006158 <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 8006138:	220e      	movs	r2, #14
 800613a:	18bb      	adds	r3, r7, r2
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	18ba      	adds	r2, r7, r2
 8006140:	1c59      	adds	r1, r3, #1
 8006142:	7011      	strb	r1, [r2, #0]
 8006144:	001a      	movs	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	189b      	adds	r3, r3, r2
 800614a:	7819      	ldrb	r1, [r3, #0]
 800614c:	220f      	movs	r2, #15
 800614e:	18bb      	adds	r3, r7, r2
 8006150:	18ba      	adds	r2, r7, r2
 8006152:	7812      	ldrb	r2, [r2, #0]
 8006154:	404a      	eors	r2, r1
 8006156:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8006158:	210e      	movs	r1, #14
 800615a:	187b      	adds	r3, r7, r1
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	18d3      	adds	r3, r2, r3
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	2b2a      	cmp	r3, #42	; 0x2a
 8006166:	d00a      	beq.n	800617e <is_my_nmea_checksum_ok+0x60>
 8006168:	187b      	adds	r3, r7, r1
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	18d3      	adds	r3, r2, r3
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d003      	beq.n	800617e <is_my_nmea_checksum_ok+0x60>
 8006176:	187b      	adds	r3, r7, r1
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1dc      	bne.n	8006138 <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 800617e:	230f      	movs	r3, #15
 8006180:	18fb      	adds	r3, r7, r3
 8006182:	781c      	ldrb	r4, [r3, #0]
 8006184:	210e      	movs	r1, #14
 8006186:	187b      	adds	r3, r7, r1
 8006188:	187a      	adds	r2, r7, r1
 800618a:	7812      	ldrb	r2, [r2, #0]
 800618c:	3201      	adds	r2, #1
 800618e:	701a      	strb	r2, [r3, #0]
 8006190:	187b      	adds	r3, r7, r1
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	18d3      	adds	r3, r2, r3
 8006198:	2210      	movs	r2, #16
 800619a:	2100      	movs	r1, #0
 800619c:	0018      	movs	r0, r3
 800619e:	f000 ff93 	bl	80070c8 <strtol>
 80061a2:	0003      	movs	r3, r0
 80061a4:	1ae3      	subs	r3, r4, r3
 80061a6:	425a      	negs	r2, r3
 80061a8:	4153      	adcs	r3, r2
 80061aa:	b2db      	uxtb	r3, r3
}
 80061ac:	0018      	movs	r0, r3
 80061ae:	46bd      	mov	sp, r7
 80061b0:	b005      	add	sp, #20
 80061b2:	bd90      	pop	{r4, r7, pc}

080061b4 <malloc>:
 80061b4:	b510      	push	{r4, lr}
 80061b6:	4b03      	ldr	r3, [pc, #12]	; (80061c4 <malloc+0x10>)
 80061b8:	0001      	movs	r1, r0
 80061ba:	6818      	ldr	r0, [r3, #0]
 80061bc:	f000 f830 	bl	8006220 <_malloc_r>
 80061c0:	bd10      	pop	{r4, pc}
 80061c2:	46c0      	nop			; (mov r8, r8)
 80061c4:	200001dc 	.word	0x200001dc

080061c8 <free>:
 80061c8:	b510      	push	{r4, lr}
 80061ca:	4b03      	ldr	r3, [pc, #12]	; (80061d8 <free+0x10>)
 80061cc:	0001      	movs	r1, r0
 80061ce:	6818      	ldr	r0, [r3, #0]
 80061d0:	f002 fece 	bl	8008f70 <_free_r>
 80061d4:	bd10      	pop	{r4, pc}
 80061d6:	46c0      	nop			; (mov r8, r8)
 80061d8:	200001dc 	.word	0x200001dc

080061dc <sbrk_aligned>:
 80061dc:	b570      	push	{r4, r5, r6, lr}
 80061de:	4e0f      	ldr	r6, [pc, #60]	; (800621c <sbrk_aligned+0x40>)
 80061e0:	000d      	movs	r5, r1
 80061e2:	6831      	ldr	r1, [r6, #0]
 80061e4:	0004      	movs	r4, r0
 80061e6:	2900      	cmp	r1, #0
 80061e8:	d102      	bne.n	80061f0 <sbrk_aligned+0x14>
 80061ea:	f001 ffb1 	bl	8008150 <_sbrk_r>
 80061ee:	6030      	str	r0, [r6, #0]
 80061f0:	0029      	movs	r1, r5
 80061f2:	0020      	movs	r0, r4
 80061f4:	f001 ffac 	bl	8008150 <_sbrk_r>
 80061f8:	1c43      	adds	r3, r0, #1
 80061fa:	d00a      	beq.n	8006212 <sbrk_aligned+0x36>
 80061fc:	2303      	movs	r3, #3
 80061fe:	1cc5      	adds	r5, r0, #3
 8006200:	439d      	bics	r5, r3
 8006202:	42a8      	cmp	r0, r5
 8006204:	d007      	beq.n	8006216 <sbrk_aligned+0x3a>
 8006206:	1a29      	subs	r1, r5, r0
 8006208:	0020      	movs	r0, r4
 800620a:	f001 ffa1 	bl	8008150 <_sbrk_r>
 800620e:	3001      	adds	r0, #1
 8006210:	d101      	bne.n	8006216 <sbrk_aligned+0x3a>
 8006212:	2501      	movs	r5, #1
 8006214:	426d      	negs	r5, r5
 8006216:	0028      	movs	r0, r5
 8006218:	bd70      	pop	{r4, r5, r6, pc}
 800621a:	46c0      	nop			; (mov r8, r8)
 800621c:	2000057c 	.word	0x2000057c

08006220 <_malloc_r>:
 8006220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006222:	2203      	movs	r2, #3
 8006224:	1ccb      	adds	r3, r1, #3
 8006226:	4393      	bics	r3, r2
 8006228:	3308      	adds	r3, #8
 800622a:	0006      	movs	r6, r0
 800622c:	001f      	movs	r7, r3
 800622e:	2b0c      	cmp	r3, #12
 8006230:	d238      	bcs.n	80062a4 <_malloc_r+0x84>
 8006232:	270c      	movs	r7, #12
 8006234:	42b9      	cmp	r1, r7
 8006236:	d837      	bhi.n	80062a8 <_malloc_r+0x88>
 8006238:	0030      	movs	r0, r6
 800623a:	f000 f873 	bl	8006324 <__malloc_lock>
 800623e:	4b38      	ldr	r3, [pc, #224]	; (8006320 <_malloc_r+0x100>)
 8006240:	9300      	str	r3, [sp, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	001c      	movs	r4, r3
 8006246:	2c00      	cmp	r4, #0
 8006248:	d133      	bne.n	80062b2 <_malloc_r+0x92>
 800624a:	0039      	movs	r1, r7
 800624c:	0030      	movs	r0, r6
 800624e:	f7ff ffc5 	bl	80061dc <sbrk_aligned>
 8006252:	0004      	movs	r4, r0
 8006254:	1c43      	adds	r3, r0, #1
 8006256:	d15e      	bne.n	8006316 <_malloc_r+0xf6>
 8006258:	9b00      	ldr	r3, [sp, #0]
 800625a:	681c      	ldr	r4, [r3, #0]
 800625c:	0025      	movs	r5, r4
 800625e:	2d00      	cmp	r5, #0
 8006260:	d14e      	bne.n	8006300 <_malloc_r+0xe0>
 8006262:	2c00      	cmp	r4, #0
 8006264:	d051      	beq.n	800630a <_malloc_r+0xea>
 8006266:	6823      	ldr	r3, [r4, #0]
 8006268:	0029      	movs	r1, r5
 800626a:	18e3      	adds	r3, r4, r3
 800626c:	0030      	movs	r0, r6
 800626e:	9301      	str	r3, [sp, #4]
 8006270:	f001 ff6e 	bl	8008150 <_sbrk_r>
 8006274:	9b01      	ldr	r3, [sp, #4]
 8006276:	4283      	cmp	r3, r0
 8006278:	d147      	bne.n	800630a <_malloc_r+0xea>
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	0030      	movs	r0, r6
 800627e:	1aff      	subs	r7, r7, r3
 8006280:	0039      	movs	r1, r7
 8006282:	f7ff ffab 	bl	80061dc <sbrk_aligned>
 8006286:	3001      	adds	r0, #1
 8006288:	d03f      	beq.n	800630a <_malloc_r+0xea>
 800628a:	6823      	ldr	r3, [r4, #0]
 800628c:	19db      	adds	r3, r3, r7
 800628e:	6023      	str	r3, [r4, #0]
 8006290:	9b00      	ldr	r3, [sp, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d040      	beq.n	800631a <_malloc_r+0xfa>
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	42a2      	cmp	r2, r4
 800629c:	d133      	bne.n	8006306 <_malloc_r+0xe6>
 800629e:	2200      	movs	r2, #0
 80062a0:	605a      	str	r2, [r3, #4]
 80062a2:	e014      	b.n	80062ce <_malloc_r+0xae>
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	dac5      	bge.n	8006234 <_malloc_r+0x14>
 80062a8:	230c      	movs	r3, #12
 80062aa:	2500      	movs	r5, #0
 80062ac:	6033      	str	r3, [r6, #0]
 80062ae:	0028      	movs	r0, r5
 80062b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80062b2:	6821      	ldr	r1, [r4, #0]
 80062b4:	1bc9      	subs	r1, r1, r7
 80062b6:	d420      	bmi.n	80062fa <_malloc_r+0xda>
 80062b8:	290b      	cmp	r1, #11
 80062ba:	d918      	bls.n	80062ee <_malloc_r+0xce>
 80062bc:	19e2      	adds	r2, r4, r7
 80062be:	6027      	str	r7, [r4, #0]
 80062c0:	42a3      	cmp	r3, r4
 80062c2:	d112      	bne.n	80062ea <_malloc_r+0xca>
 80062c4:	9b00      	ldr	r3, [sp, #0]
 80062c6:	601a      	str	r2, [r3, #0]
 80062c8:	6863      	ldr	r3, [r4, #4]
 80062ca:	6011      	str	r1, [r2, #0]
 80062cc:	6053      	str	r3, [r2, #4]
 80062ce:	0030      	movs	r0, r6
 80062d0:	0025      	movs	r5, r4
 80062d2:	f000 f82f 	bl	8006334 <__malloc_unlock>
 80062d6:	2207      	movs	r2, #7
 80062d8:	350b      	adds	r5, #11
 80062da:	1d23      	adds	r3, r4, #4
 80062dc:	4395      	bics	r5, r2
 80062de:	1aea      	subs	r2, r5, r3
 80062e0:	429d      	cmp	r5, r3
 80062e2:	d0e4      	beq.n	80062ae <_malloc_r+0x8e>
 80062e4:	1b5b      	subs	r3, r3, r5
 80062e6:	50a3      	str	r3, [r4, r2]
 80062e8:	e7e1      	b.n	80062ae <_malloc_r+0x8e>
 80062ea:	605a      	str	r2, [r3, #4]
 80062ec:	e7ec      	b.n	80062c8 <_malloc_r+0xa8>
 80062ee:	6862      	ldr	r2, [r4, #4]
 80062f0:	42a3      	cmp	r3, r4
 80062f2:	d1d5      	bne.n	80062a0 <_malloc_r+0x80>
 80062f4:	9b00      	ldr	r3, [sp, #0]
 80062f6:	601a      	str	r2, [r3, #0]
 80062f8:	e7e9      	b.n	80062ce <_malloc_r+0xae>
 80062fa:	0023      	movs	r3, r4
 80062fc:	6864      	ldr	r4, [r4, #4]
 80062fe:	e7a2      	b.n	8006246 <_malloc_r+0x26>
 8006300:	002c      	movs	r4, r5
 8006302:	686d      	ldr	r5, [r5, #4]
 8006304:	e7ab      	b.n	800625e <_malloc_r+0x3e>
 8006306:	0013      	movs	r3, r2
 8006308:	e7c4      	b.n	8006294 <_malloc_r+0x74>
 800630a:	230c      	movs	r3, #12
 800630c:	0030      	movs	r0, r6
 800630e:	6033      	str	r3, [r6, #0]
 8006310:	f000 f810 	bl	8006334 <__malloc_unlock>
 8006314:	e7cb      	b.n	80062ae <_malloc_r+0x8e>
 8006316:	6027      	str	r7, [r4, #0]
 8006318:	e7d9      	b.n	80062ce <_malloc_r+0xae>
 800631a:	605b      	str	r3, [r3, #4]
 800631c:	deff      	udf	#255	; 0xff
 800631e:	46c0      	nop			; (mov r8, r8)
 8006320:	20000578 	.word	0x20000578

08006324 <__malloc_lock>:
 8006324:	b510      	push	{r4, lr}
 8006326:	4802      	ldr	r0, [pc, #8]	; (8006330 <__malloc_lock+0xc>)
 8006328:	f001 ff63 	bl	80081f2 <__retarget_lock_acquire_recursive>
 800632c:	bd10      	pop	{r4, pc}
 800632e:	46c0      	nop			; (mov r8, r8)
 8006330:	200006c0 	.word	0x200006c0

08006334 <__malloc_unlock>:
 8006334:	b510      	push	{r4, lr}
 8006336:	4802      	ldr	r0, [pc, #8]	; (8006340 <__malloc_unlock+0xc>)
 8006338:	f001 ff5c 	bl	80081f4 <__retarget_lock_release_recursive>
 800633c:	bd10      	pop	{r4, pc}
 800633e:	46c0      	nop			; (mov r8, r8)
 8006340:	200006c0 	.word	0x200006c0

08006344 <sulp>:
 8006344:	b570      	push	{r4, r5, r6, lr}
 8006346:	0016      	movs	r6, r2
 8006348:	000d      	movs	r5, r1
 800634a:	f003 fd4f 	bl	8009dec <__ulp>
 800634e:	2e00      	cmp	r6, #0
 8006350:	d00d      	beq.n	800636e <sulp+0x2a>
 8006352:	236b      	movs	r3, #107	; 0x6b
 8006354:	006a      	lsls	r2, r5, #1
 8006356:	0d52      	lsrs	r2, r2, #21
 8006358:	1a9b      	subs	r3, r3, r2
 800635a:	2b00      	cmp	r3, #0
 800635c:	dd07      	ble.n	800636e <sulp+0x2a>
 800635e:	2400      	movs	r4, #0
 8006360:	4a03      	ldr	r2, [pc, #12]	; (8006370 <sulp+0x2c>)
 8006362:	051b      	lsls	r3, r3, #20
 8006364:	189d      	adds	r5, r3, r2
 8006366:	002b      	movs	r3, r5
 8006368:	0022      	movs	r2, r4
 800636a:	f7fb f951 	bl	8001610 <__aeabi_dmul>
 800636e:	bd70      	pop	{r4, r5, r6, pc}
 8006370:	3ff00000 	.word	0x3ff00000

08006374 <_strtod_l>:
 8006374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006376:	b0a1      	sub	sp, #132	; 0x84
 8006378:	9219      	str	r2, [sp, #100]	; 0x64
 800637a:	2200      	movs	r2, #0
 800637c:	2600      	movs	r6, #0
 800637e:	2700      	movs	r7, #0
 8006380:	9004      	str	r0, [sp, #16]
 8006382:	9107      	str	r1, [sp, #28]
 8006384:	921c      	str	r2, [sp, #112]	; 0x70
 8006386:	911b      	str	r1, [sp, #108]	; 0x6c
 8006388:	780a      	ldrb	r2, [r1, #0]
 800638a:	2a2b      	cmp	r2, #43	; 0x2b
 800638c:	d055      	beq.n	800643a <_strtod_l+0xc6>
 800638e:	d841      	bhi.n	8006414 <_strtod_l+0xa0>
 8006390:	2a0d      	cmp	r2, #13
 8006392:	d83b      	bhi.n	800640c <_strtod_l+0x98>
 8006394:	2a08      	cmp	r2, #8
 8006396:	d83b      	bhi.n	8006410 <_strtod_l+0x9c>
 8006398:	2a00      	cmp	r2, #0
 800639a:	d044      	beq.n	8006426 <_strtod_l+0xb2>
 800639c:	2200      	movs	r2, #0
 800639e:	920f      	str	r2, [sp, #60]	; 0x3c
 80063a0:	2100      	movs	r1, #0
 80063a2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80063a4:	9109      	str	r1, [sp, #36]	; 0x24
 80063a6:	782a      	ldrb	r2, [r5, #0]
 80063a8:	2a30      	cmp	r2, #48	; 0x30
 80063aa:	d000      	beq.n	80063ae <_strtod_l+0x3a>
 80063ac:	e085      	b.n	80064ba <_strtod_l+0x146>
 80063ae:	786a      	ldrb	r2, [r5, #1]
 80063b0:	3120      	adds	r1, #32
 80063b2:	438a      	bics	r2, r1
 80063b4:	2a58      	cmp	r2, #88	; 0x58
 80063b6:	d000      	beq.n	80063ba <_strtod_l+0x46>
 80063b8:	e075      	b.n	80064a6 <_strtod_l+0x132>
 80063ba:	9302      	str	r3, [sp, #8]
 80063bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063be:	4a97      	ldr	r2, [pc, #604]	; (800661c <_strtod_l+0x2a8>)
 80063c0:	9301      	str	r3, [sp, #4]
 80063c2:	ab1c      	add	r3, sp, #112	; 0x70
 80063c4:	9300      	str	r3, [sp, #0]
 80063c6:	9804      	ldr	r0, [sp, #16]
 80063c8:	ab1d      	add	r3, sp, #116	; 0x74
 80063ca:	a91b      	add	r1, sp, #108	; 0x6c
 80063cc:	f002 fe84 	bl	80090d8 <__gethex>
 80063d0:	230f      	movs	r3, #15
 80063d2:	0002      	movs	r2, r0
 80063d4:	401a      	ands	r2, r3
 80063d6:	0004      	movs	r4, r0
 80063d8:	9205      	str	r2, [sp, #20]
 80063da:	4218      	tst	r0, r3
 80063dc:	d005      	beq.n	80063ea <_strtod_l+0x76>
 80063de:	2a06      	cmp	r2, #6
 80063e0:	d12d      	bne.n	800643e <_strtod_l+0xca>
 80063e2:	1c6b      	adds	r3, r5, #1
 80063e4:	931b      	str	r3, [sp, #108]	; 0x6c
 80063e6:	2300      	movs	r3, #0
 80063e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80063ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d002      	beq.n	80063f6 <_strtod_l+0x82>
 80063f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80063f2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80063f4:	6013      	str	r3, [r2, #0]
 80063f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d01b      	beq.n	8006434 <_strtod_l+0xc0>
 80063fc:	2380      	movs	r3, #128	; 0x80
 80063fe:	0032      	movs	r2, r6
 8006400:	061b      	lsls	r3, r3, #24
 8006402:	18fb      	adds	r3, r7, r3
 8006404:	0010      	movs	r0, r2
 8006406:	0019      	movs	r1, r3
 8006408:	b021      	add	sp, #132	; 0x84
 800640a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800640c:	2a20      	cmp	r2, #32
 800640e:	d1c5      	bne.n	800639c <_strtod_l+0x28>
 8006410:	3101      	adds	r1, #1
 8006412:	e7b8      	b.n	8006386 <_strtod_l+0x12>
 8006414:	2a2d      	cmp	r2, #45	; 0x2d
 8006416:	d1c1      	bne.n	800639c <_strtod_l+0x28>
 8006418:	3a2c      	subs	r2, #44	; 0x2c
 800641a:	920f      	str	r2, [sp, #60]	; 0x3c
 800641c:	1c4a      	adds	r2, r1, #1
 800641e:	921b      	str	r2, [sp, #108]	; 0x6c
 8006420:	784a      	ldrb	r2, [r1, #1]
 8006422:	2a00      	cmp	r2, #0
 8006424:	d1bc      	bne.n	80063a0 <_strtod_l+0x2c>
 8006426:	9b07      	ldr	r3, [sp, #28]
 8006428:	931b      	str	r3, [sp, #108]	; 0x6c
 800642a:	2300      	movs	r3, #0
 800642c:	930f      	str	r3, [sp, #60]	; 0x3c
 800642e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1dd      	bne.n	80063f0 <_strtod_l+0x7c>
 8006434:	0032      	movs	r2, r6
 8006436:	003b      	movs	r3, r7
 8006438:	e7e4      	b.n	8006404 <_strtod_l+0x90>
 800643a:	2200      	movs	r2, #0
 800643c:	e7ed      	b.n	800641a <_strtod_l+0xa6>
 800643e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006440:	2a00      	cmp	r2, #0
 8006442:	d007      	beq.n	8006454 <_strtod_l+0xe0>
 8006444:	2135      	movs	r1, #53	; 0x35
 8006446:	a81e      	add	r0, sp, #120	; 0x78
 8006448:	f003 fdc1 	bl	8009fce <__copybits>
 800644c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800644e:	9804      	ldr	r0, [sp, #16]
 8006450:	f003 f98a 	bl	8009768 <_Bfree>
 8006454:	9805      	ldr	r0, [sp, #20]
 8006456:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006458:	3801      	subs	r0, #1
 800645a:	2804      	cmp	r0, #4
 800645c:	d806      	bhi.n	800646c <_strtod_l+0xf8>
 800645e:	f7f9 fe59 	bl	8000114 <__gnu_thumb1_case_uqi>
 8006462:	0312      	.short	0x0312
 8006464:	1e1c      	.short	0x1e1c
 8006466:	12          	.byte	0x12
 8006467:	00          	.byte	0x00
 8006468:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800646a:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800646c:	05e4      	lsls	r4, r4, #23
 800646e:	d502      	bpl.n	8006476 <_strtod_l+0x102>
 8006470:	2380      	movs	r3, #128	; 0x80
 8006472:	061b      	lsls	r3, r3, #24
 8006474:	431f      	orrs	r7, r3
 8006476:	4b6a      	ldr	r3, [pc, #424]	; (8006620 <_strtod_l+0x2ac>)
 8006478:	423b      	tst	r3, r7
 800647a:	d1b6      	bne.n	80063ea <_strtod_l+0x76>
 800647c:	f001 fe8e 	bl	800819c <__errno>
 8006480:	2322      	movs	r3, #34	; 0x22
 8006482:	6003      	str	r3, [r0, #0]
 8006484:	e7b1      	b.n	80063ea <_strtod_l+0x76>
 8006486:	4967      	ldr	r1, [pc, #412]	; (8006624 <_strtod_l+0x2b0>)
 8006488:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800648a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800648c:	400a      	ands	r2, r1
 800648e:	4966      	ldr	r1, [pc, #408]	; (8006628 <_strtod_l+0x2b4>)
 8006490:	185b      	adds	r3, r3, r1
 8006492:	051b      	lsls	r3, r3, #20
 8006494:	431a      	orrs	r2, r3
 8006496:	0017      	movs	r7, r2
 8006498:	e7e8      	b.n	800646c <_strtod_l+0xf8>
 800649a:	4f61      	ldr	r7, [pc, #388]	; (8006620 <_strtod_l+0x2ac>)
 800649c:	e7e6      	b.n	800646c <_strtod_l+0xf8>
 800649e:	2601      	movs	r6, #1
 80064a0:	4f62      	ldr	r7, [pc, #392]	; (800662c <_strtod_l+0x2b8>)
 80064a2:	4276      	negs	r6, r6
 80064a4:	e7e2      	b.n	800646c <_strtod_l+0xf8>
 80064a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80064a8:	1c5a      	adds	r2, r3, #1
 80064aa:	921b      	str	r2, [sp, #108]	; 0x6c
 80064ac:	785b      	ldrb	r3, [r3, #1]
 80064ae:	2b30      	cmp	r3, #48	; 0x30
 80064b0:	d0f9      	beq.n	80064a6 <_strtod_l+0x132>
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d099      	beq.n	80063ea <_strtod_l+0x76>
 80064b6:	2301      	movs	r3, #1
 80064b8:	9309      	str	r3, [sp, #36]	; 0x24
 80064ba:	2500      	movs	r5, #0
 80064bc:	220a      	movs	r2, #10
 80064be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80064c0:	950d      	str	r5, [sp, #52]	; 0x34
 80064c2:	9310      	str	r3, [sp, #64]	; 0x40
 80064c4:	9508      	str	r5, [sp, #32]
 80064c6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80064c8:	7804      	ldrb	r4, [r0, #0]
 80064ca:	0023      	movs	r3, r4
 80064cc:	3b30      	subs	r3, #48	; 0x30
 80064ce:	b2d9      	uxtb	r1, r3
 80064d0:	2909      	cmp	r1, #9
 80064d2:	d927      	bls.n	8006524 <_strtod_l+0x1b0>
 80064d4:	2201      	movs	r2, #1
 80064d6:	4956      	ldr	r1, [pc, #344]	; (8006630 <_strtod_l+0x2bc>)
 80064d8:	f001 fdc0 	bl	800805c <strncmp>
 80064dc:	2800      	cmp	r0, #0
 80064de:	d031      	beq.n	8006544 <_strtod_l+0x1d0>
 80064e0:	2000      	movs	r0, #0
 80064e2:	0023      	movs	r3, r4
 80064e4:	4684      	mov	ip, r0
 80064e6:	9a08      	ldr	r2, [sp, #32]
 80064e8:	900c      	str	r0, [sp, #48]	; 0x30
 80064ea:	9205      	str	r2, [sp, #20]
 80064ec:	2220      	movs	r2, #32
 80064ee:	0019      	movs	r1, r3
 80064f0:	4391      	bics	r1, r2
 80064f2:	000a      	movs	r2, r1
 80064f4:	2100      	movs	r1, #0
 80064f6:	9106      	str	r1, [sp, #24]
 80064f8:	2a45      	cmp	r2, #69	; 0x45
 80064fa:	d000      	beq.n	80064fe <_strtod_l+0x18a>
 80064fc:	e0c2      	b.n	8006684 <_strtod_l+0x310>
 80064fe:	9b05      	ldr	r3, [sp, #20]
 8006500:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006502:	4303      	orrs	r3, r0
 8006504:	4313      	orrs	r3, r2
 8006506:	428b      	cmp	r3, r1
 8006508:	d08d      	beq.n	8006426 <_strtod_l+0xb2>
 800650a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800650c:	9307      	str	r3, [sp, #28]
 800650e:	3301      	adds	r3, #1
 8006510:	931b      	str	r3, [sp, #108]	; 0x6c
 8006512:	9b07      	ldr	r3, [sp, #28]
 8006514:	785b      	ldrb	r3, [r3, #1]
 8006516:	2b2b      	cmp	r3, #43	; 0x2b
 8006518:	d071      	beq.n	80065fe <_strtod_l+0x28a>
 800651a:	000c      	movs	r4, r1
 800651c:	2b2d      	cmp	r3, #45	; 0x2d
 800651e:	d174      	bne.n	800660a <_strtod_l+0x296>
 8006520:	2401      	movs	r4, #1
 8006522:	e06d      	b.n	8006600 <_strtod_l+0x28c>
 8006524:	9908      	ldr	r1, [sp, #32]
 8006526:	2908      	cmp	r1, #8
 8006528:	dc09      	bgt.n	800653e <_strtod_l+0x1ca>
 800652a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800652c:	4351      	muls	r1, r2
 800652e:	185b      	adds	r3, r3, r1
 8006530:	930d      	str	r3, [sp, #52]	; 0x34
 8006532:	9b08      	ldr	r3, [sp, #32]
 8006534:	3001      	adds	r0, #1
 8006536:	3301      	adds	r3, #1
 8006538:	9308      	str	r3, [sp, #32]
 800653a:	901b      	str	r0, [sp, #108]	; 0x6c
 800653c:	e7c3      	b.n	80064c6 <_strtod_l+0x152>
 800653e:	4355      	muls	r5, r2
 8006540:	195d      	adds	r5, r3, r5
 8006542:	e7f6      	b.n	8006532 <_strtod_l+0x1be>
 8006544:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006546:	1c5a      	adds	r2, r3, #1
 8006548:	921b      	str	r2, [sp, #108]	; 0x6c
 800654a:	9a08      	ldr	r2, [sp, #32]
 800654c:	785b      	ldrb	r3, [r3, #1]
 800654e:	2a00      	cmp	r2, #0
 8006550:	d03a      	beq.n	80065c8 <_strtod_l+0x254>
 8006552:	900c      	str	r0, [sp, #48]	; 0x30
 8006554:	9205      	str	r2, [sp, #20]
 8006556:	001a      	movs	r2, r3
 8006558:	3a30      	subs	r2, #48	; 0x30
 800655a:	2a09      	cmp	r2, #9
 800655c:	d912      	bls.n	8006584 <_strtod_l+0x210>
 800655e:	2201      	movs	r2, #1
 8006560:	4694      	mov	ip, r2
 8006562:	e7c3      	b.n	80064ec <_strtod_l+0x178>
 8006564:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006566:	3001      	adds	r0, #1
 8006568:	1c5a      	adds	r2, r3, #1
 800656a:	921b      	str	r2, [sp, #108]	; 0x6c
 800656c:	785b      	ldrb	r3, [r3, #1]
 800656e:	2b30      	cmp	r3, #48	; 0x30
 8006570:	d0f8      	beq.n	8006564 <_strtod_l+0x1f0>
 8006572:	001a      	movs	r2, r3
 8006574:	3a31      	subs	r2, #49	; 0x31
 8006576:	2a08      	cmp	r2, #8
 8006578:	d83c      	bhi.n	80065f4 <_strtod_l+0x280>
 800657a:	900c      	str	r0, [sp, #48]	; 0x30
 800657c:	2000      	movs	r0, #0
 800657e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006580:	9005      	str	r0, [sp, #20]
 8006582:	9210      	str	r2, [sp, #64]	; 0x40
 8006584:	001a      	movs	r2, r3
 8006586:	1c41      	adds	r1, r0, #1
 8006588:	3a30      	subs	r2, #48	; 0x30
 800658a:	2b30      	cmp	r3, #48	; 0x30
 800658c:	d016      	beq.n	80065bc <_strtod_l+0x248>
 800658e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006590:	185b      	adds	r3, r3, r1
 8006592:	930c      	str	r3, [sp, #48]	; 0x30
 8006594:	9b05      	ldr	r3, [sp, #20]
 8006596:	210a      	movs	r1, #10
 8006598:	469c      	mov	ip, r3
 800659a:	4484      	add	ip, r0
 800659c:	4563      	cmp	r3, ip
 800659e:	d115      	bne.n	80065cc <_strtod_l+0x258>
 80065a0:	9905      	ldr	r1, [sp, #20]
 80065a2:	9b05      	ldr	r3, [sp, #20]
 80065a4:	3101      	adds	r1, #1
 80065a6:	1809      	adds	r1, r1, r0
 80065a8:	181b      	adds	r3, r3, r0
 80065aa:	9105      	str	r1, [sp, #20]
 80065ac:	2b08      	cmp	r3, #8
 80065ae:	dc19      	bgt.n	80065e4 <_strtod_l+0x270>
 80065b0:	230a      	movs	r3, #10
 80065b2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80065b4:	434b      	muls	r3, r1
 80065b6:	2100      	movs	r1, #0
 80065b8:	18d3      	adds	r3, r2, r3
 80065ba:	930d      	str	r3, [sp, #52]	; 0x34
 80065bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80065be:	0008      	movs	r0, r1
 80065c0:	1c5a      	adds	r2, r3, #1
 80065c2:	921b      	str	r2, [sp, #108]	; 0x6c
 80065c4:	785b      	ldrb	r3, [r3, #1]
 80065c6:	e7c6      	b.n	8006556 <_strtod_l+0x1e2>
 80065c8:	9808      	ldr	r0, [sp, #32]
 80065ca:	e7d0      	b.n	800656e <_strtod_l+0x1fa>
 80065cc:	1c5c      	adds	r4, r3, #1
 80065ce:	2b08      	cmp	r3, #8
 80065d0:	dc04      	bgt.n	80065dc <_strtod_l+0x268>
 80065d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065d4:	434b      	muls	r3, r1
 80065d6:	930d      	str	r3, [sp, #52]	; 0x34
 80065d8:	0023      	movs	r3, r4
 80065da:	e7df      	b.n	800659c <_strtod_l+0x228>
 80065dc:	2c10      	cmp	r4, #16
 80065de:	dcfb      	bgt.n	80065d8 <_strtod_l+0x264>
 80065e0:	434d      	muls	r5, r1
 80065e2:	e7f9      	b.n	80065d8 <_strtod_l+0x264>
 80065e4:	9b05      	ldr	r3, [sp, #20]
 80065e6:	2100      	movs	r1, #0
 80065e8:	2b10      	cmp	r3, #16
 80065ea:	dce7      	bgt.n	80065bc <_strtod_l+0x248>
 80065ec:	230a      	movs	r3, #10
 80065ee:	435d      	muls	r5, r3
 80065f0:	1955      	adds	r5, r2, r5
 80065f2:	e7e3      	b.n	80065bc <_strtod_l+0x248>
 80065f4:	2200      	movs	r2, #0
 80065f6:	920c      	str	r2, [sp, #48]	; 0x30
 80065f8:	9205      	str	r2, [sp, #20]
 80065fa:	3201      	adds	r2, #1
 80065fc:	e7b0      	b.n	8006560 <_strtod_l+0x1ec>
 80065fe:	2400      	movs	r4, #0
 8006600:	9b07      	ldr	r3, [sp, #28]
 8006602:	3302      	adds	r3, #2
 8006604:	931b      	str	r3, [sp, #108]	; 0x6c
 8006606:	9b07      	ldr	r3, [sp, #28]
 8006608:	789b      	ldrb	r3, [r3, #2]
 800660a:	001a      	movs	r2, r3
 800660c:	3a30      	subs	r2, #48	; 0x30
 800660e:	2a09      	cmp	r2, #9
 8006610:	d914      	bls.n	800663c <_strtod_l+0x2c8>
 8006612:	9a07      	ldr	r2, [sp, #28]
 8006614:	921b      	str	r2, [sp, #108]	; 0x6c
 8006616:	2200      	movs	r2, #0
 8006618:	e033      	b.n	8006682 <_strtod_l+0x30e>
 800661a:	46c0      	nop			; (mov r8, r8)
 800661c:	0800acd0 	.word	0x0800acd0
 8006620:	7ff00000 	.word	0x7ff00000
 8006624:	ffefffff 	.word	0xffefffff
 8006628:	00000433 	.word	0x00000433
 800662c:	7fffffff 	.word	0x7fffffff
 8006630:	0800accc 	.word	0x0800accc
 8006634:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006636:	1c5a      	adds	r2, r3, #1
 8006638:	921b      	str	r2, [sp, #108]	; 0x6c
 800663a:	785b      	ldrb	r3, [r3, #1]
 800663c:	2b30      	cmp	r3, #48	; 0x30
 800663e:	d0f9      	beq.n	8006634 <_strtod_l+0x2c0>
 8006640:	2200      	movs	r2, #0
 8006642:	9206      	str	r2, [sp, #24]
 8006644:	001a      	movs	r2, r3
 8006646:	3a31      	subs	r2, #49	; 0x31
 8006648:	2a08      	cmp	r2, #8
 800664a:	d81b      	bhi.n	8006684 <_strtod_l+0x310>
 800664c:	3b30      	subs	r3, #48	; 0x30
 800664e:	930e      	str	r3, [sp, #56]	; 0x38
 8006650:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006652:	9306      	str	r3, [sp, #24]
 8006654:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006656:	1c59      	adds	r1, r3, #1
 8006658:	911b      	str	r1, [sp, #108]	; 0x6c
 800665a:	785b      	ldrb	r3, [r3, #1]
 800665c:	001a      	movs	r2, r3
 800665e:	3a30      	subs	r2, #48	; 0x30
 8006660:	2a09      	cmp	r2, #9
 8006662:	d93a      	bls.n	80066da <_strtod_l+0x366>
 8006664:	9a06      	ldr	r2, [sp, #24]
 8006666:	1a8a      	subs	r2, r1, r2
 8006668:	49b2      	ldr	r1, [pc, #712]	; (8006934 <_strtod_l+0x5c0>)
 800666a:	9106      	str	r1, [sp, #24]
 800666c:	2a08      	cmp	r2, #8
 800666e:	dc04      	bgt.n	800667a <_strtod_l+0x306>
 8006670:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006672:	9206      	str	r2, [sp, #24]
 8006674:	428a      	cmp	r2, r1
 8006676:	dd00      	ble.n	800667a <_strtod_l+0x306>
 8006678:	9106      	str	r1, [sp, #24]
 800667a:	2c00      	cmp	r4, #0
 800667c:	d002      	beq.n	8006684 <_strtod_l+0x310>
 800667e:	9a06      	ldr	r2, [sp, #24]
 8006680:	4252      	negs	r2, r2
 8006682:	9206      	str	r2, [sp, #24]
 8006684:	9a05      	ldr	r2, [sp, #20]
 8006686:	2a00      	cmp	r2, #0
 8006688:	d14d      	bne.n	8006726 <_strtod_l+0x3b2>
 800668a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800668c:	4310      	orrs	r0, r2
 800668e:	d000      	beq.n	8006692 <_strtod_l+0x31e>
 8006690:	e6ab      	b.n	80063ea <_strtod_l+0x76>
 8006692:	4662      	mov	r2, ip
 8006694:	2a00      	cmp	r2, #0
 8006696:	d000      	beq.n	800669a <_strtod_l+0x326>
 8006698:	e6c5      	b.n	8006426 <_strtod_l+0xb2>
 800669a:	2b69      	cmp	r3, #105	; 0x69
 800669c:	d027      	beq.n	80066ee <_strtod_l+0x37a>
 800669e:	dc23      	bgt.n	80066e8 <_strtod_l+0x374>
 80066a0:	2b49      	cmp	r3, #73	; 0x49
 80066a2:	d024      	beq.n	80066ee <_strtod_l+0x37a>
 80066a4:	2b4e      	cmp	r3, #78	; 0x4e
 80066a6:	d000      	beq.n	80066aa <_strtod_l+0x336>
 80066a8:	e6bd      	b.n	8006426 <_strtod_l+0xb2>
 80066aa:	49a3      	ldr	r1, [pc, #652]	; (8006938 <_strtod_l+0x5c4>)
 80066ac:	a81b      	add	r0, sp, #108	; 0x6c
 80066ae:	f002 ff49 	bl	8009544 <__match>
 80066b2:	2800      	cmp	r0, #0
 80066b4:	d100      	bne.n	80066b8 <_strtod_l+0x344>
 80066b6:	e6b6      	b.n	8006426 <_strtod_l+0xb2>
 80066b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	2b28      	cmp	r3, #40	; 0x28
 80066be:	d12c      	bne.n	800671a <_strtod_l+0x3a6>
 80066c0:	499e      	ldr	r1, [pc, #632]	; (800693c <_strtod_l+0x5c8>)
 80066c2:	aa1e      	add	r2, sp, #120	; 0x78
 80066c4:	a81b      	add	r0, sp, #108	; 0x6c
 80066c6:	f002 ff51 	bl	800956c <__hexnan>
 80066ca:	2805      	cmp	r0, #5
 80066cc:	d125      	bne.n	800671a <_strtod_l+0x3a6>
 80066ce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80066d0:	4a9b      	ldr	r2, [pc, #620]	; (8006940 <_strtod_l+0x5cc>)
 80066d2:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 80066d4:	431a      	orrs	r2, r3
 80066d6:	0017      	movs	r7, r2
 80066d8:	e687      	b.n	80063ea <_strtod_l+0x76>
 80066da:	220a      	movs	r2, #10
 80066dc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80066de:	434a      	muls	r2, r1
 80066e0:	18d2      	adds	r2, r2, r3
 80066e2:	3a30      	subs	r2, #48	; 0x30
 80066e4:	920e      	str	r2, [sp, #56]	; 0x38
 80066e6:	e7b5      	b.n	8006654 <_strtod_l+0x2e0>
 80066e8:	2b6e      	cmp	r3, #110	; 0x6e
 80066ea:	d0de      	beq.n	80066aa <_strtod_l+0x336>
 80066ec:	e69b      	b.n	8006426 <_strtod_l+0xb2>
 80066ee:	4995      	ldr	r1, [pc, #596]	; (8006944 <_strtod_l+0x5d0>)
 80066f0:	a81b      	add	r0, sp, #108	; 0x6c
 80066f2:	f002 ff27 	bl	8009544 <__match>
 80066f6:	2800      	cmp	r0, #0
 80066f8:	d100      	bne.n	80066fc <_strtod_l+0x388>
 80066fa:	e694      	b.n	8006426 <_strtod_l+0xb2>
 80066fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80066fe:	4992      	ldr	r1, [pc, #584]	; (8006948 <_strtod_l+0x5d4>)
 8006700:	3b01      	subs	r3, #1
 8006702:	a81b      	add	r0, sp, #108	; 0x6c
 8006704:	931b      	str	r3, [sp, #108]	; 0x6c
 8006706:	f002 ff1d 	bl	8009544 <__match>
 800670a:	2800      	cmp	r0, #0
 800670c:	d102      	bne.n	8006714 <_strtod_l+0x3a0>
 800670e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006710:	3301      	adds	r3, #1
 8006712:	931b      	str	r3, [sp, #108]	; 0x6c
 8006714:	2600      	movs	r6, #0
 8006716:	4f8a      	ldr	r7, [pc, #552]	; (8006940 <_strtod_l+0x5cc>)
 8006718:	e667      	b.n	80063ea <_strtod_l+0x76>
 800671a:	488c      	ldr	r0, [pc, #560]	; (800694c <_strtod_l+0x5d8>)
 800671c:	f001 fd80 	bl	8008220 <nan>
 8006720:	0006      	movs	r6, r0
 8006722:	000f      	movs	r7, r1
 8006724:	e661      	b.n	80063ea <_strtod_l+0x76>
 8006726:	9b06      	ldr	r3, [sp, #24]
 8006728:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800672a:	1a9b      	subs	r3, r3, r2
 800672c:	9309      	str	r3, [sp, #36]	; 0x24
 800672e:	9b08      	ldr	r3, [sp, #32]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d101      	bne.n	8006738 <_strtod_l+0x3c4>
 8006734:	9b05      	ldr	r3, [sp, #20]
 8006736:	9308      	str	r3, [sp, #32]
 8006738:	9c05      	ldr	r4, [sp, #20]
 800673a:	2c10      	cmp	r4, #16
 800673c:	dd00      	ble.n	8006740 <_strtod_l+0x3cc>
 800673e:	2410      	movs	r4, #16
 8006740:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006742:	f7fb fe2d 	bl	80023a0 <__aeabi_ui2d>
 8006746:	9b05      	ldr	r3, [sp, #20]
 8006748:	0006      	movs	r6, r0
 800674a:	000f      	movs	r7, r1
 800674c:	2b09      	cmp	r3, #9
 800674e:	dd15      	ble.n	800677c <_strtod_l+0x408>
 8006750:	0022      	movs	r2, r4
 8006752:	4b7f      	ldr	r3, [pc, #508]	; (8006950 <_strtod_l+0x5dc>)
 8006754:	3a09      	subs	r2, #9
 8006756:	00d2      	lsls	r2, r2, #3
 8006758:	189b      	adds	r3, r3, r2
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f7fa ff57 	bl	8001610 <__aeabi_dmul>
 8006762:	0006      	movs	r6, r0
 8006764:	0028      	movs	r0, r5
 8006766:	000f      	movs	r7, r1
 8006768:	f7fb fe1a 	bl	80023a0 <__aeabi_ui2d>
 800676c:	0002      	movs	r2, r0
 800676e:	000b      	movs	r3, r1
 8006770:	0030      	movs	r0, r6
 8006772:	0039      	movs	r1, r7
 8006774:	f7f9 fff2 	bl	800075c <__aeabi_dadd>
 8006778:	0006      	movs	r6, r0
 800677a:	000f      	movs	r7, r1
 800677c:	9b05      	ldr	r3, [sp, #20]
 800677e:	2b0f      	cmp	r3, #15
 8006780:	dc39      	bgt.n	80067f6 <_strtod_l+0x482>
 8006782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006784:	2b00      	cmp	r3, #0
 8006786:	d100      	bne.n	800678a <_strtod_l+0x416>
 8006788:	e62f      	b.n	80063ea <_strtod_l+0x76>
 800678a:	dd24      	ble.n	80067d6 <_strtod_l+0x462>
 800678c:	2b16      	cmp	r3, #22
 800678e:	dc09      	bgt.n	80067a4 <_strtod_l+0x430>
 8006790:	496f      	ldr	r1, [pc, #444]	; (8006950 <_strtod_l+0x5dc>)
 8006792:	00db      	lsls	r3, r3, #3
 8006794:	18c9      	adds	r1, r1, r3
 8006796:	0032      	movs	r2, r6
 8006798:	6808      	ldr	r0, [r1, #0]
 800679a:	6849      	ldr	r1, [r1, #4]
 800679c:	003b      	movs	r3, r7
 800679e:	f7fa ff37 	bl	8001610 <__aeabi_dmul>
 80067a2:	e7bd      	b.n	8006720 <_strtod_l+0x3ac>
 80067a4:	2325      	movs	r3, #37	; 0x25
 80067a6:	9a05      	ldr	r2, [sp, #20]
 80067a8:	1a9b      	subs	r3, r3, r2
 80067aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067ac:	4293      	cmp	r3, r2
 80067ae:	db22      	blt.n	80067f6 <_strtod_l+0x482>
 80067b0:	240f      	movs	r4, #15
 80067b2:	9b05      	ldr	r3, [sp, #20]
 80067b4:	4d66      	ldr	r5, [pc, #408]	; (8006950 <_strtod_l+0x5dc>)
 80067b6:	1ae4      	subs	r4, r4, r3
 80067b8:	00e1      	lsls	r1, r4, #3
 80067ba:	1869      	adds	r1, r5, r1
 80067bc:	0032      	movs	r2, r6
 80067be:	6808      	ldr	r0, [r1, #0]
 80067c0:	6849      	ldr	r1, [r1, #4]
 80067c2:	003b      	movs	r3, r7
 80067c4:	f7fa ff24 	bl	8001610 <__aeabi_dmul>
 80067c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067ca:	1b1c      	subs	r4, r3, r4
 80067cc:	00e4      	lsls	r4, r4, #3
 80067ce:	192d      	adds	r5, r5, r4
 80067d0:	682a      	ldr	r2, [r5, #0]
 80067d2:	686b      	ldr	r3, [r5, #4]
 80067d4:	e7e3      	b.n	800679e <_strtod_l+0x42a>
 80067d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067d8:	3316      	adds	r3, #22
 80067da:	db0c      	blt.n	80067f6 <_strtod_l+0x482>
 80067dc:	9906      	ldr	r1, [sp, #24]
 80067de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067e0:	4b5b      	ldr	r3, [pc, #364]	; (8006950 <_strtod_l+0x5dc>)
 80067e2:	1a52      	subs	r2, r2, r1
 80067e4:	00d2      	lsls	r2, r2, #3
 80067e6:	189b      	adds	r3, r3, r2
 80067e8:	0030      	movs	r0, r6
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	0039      	movs	r1, r7
 80067f0:	f7fa fb14 	bl	8000e1c <__aeabi_ddiv>
 80067f4:	e794      	b.n	8006720 <_strtod_l+0x3ac>
 80067f6:	9b05      	ldr	r3, [sp, #20]
 80067f8:	1b1c      	subs	r4, r3, r4
 80067fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067fc:	18e4      	adds	r4, r4, r3
 80067fe:	2c00      	cmp	r4, #0
 8006800:	dd72      	ble.n	80068e8 <_strtod_l+0x574>
 8006802:	220f      	movs	r2, #15
 8006804:	0023      	movs	r3, r4
 8006806:	4013      	ands	r3, r2
 8006808:	4214      	tst	r4, r2
 800680a:	d00a      	beq.n	8006822 <_strtod_l+0x4ae>
 800680c:	4950      	ldr	r1, [pc, #320]	; (8006950 <_strtod_l+0x5dc>)
 800680e:	00db      	lsls	r3, r3, #3
 8006810:	18c9      	adds	r1, r1, r3
 8006812:	0032      	movs	r2, r6
 8006814:	6808      	ldr	r0, [r1, #0]
 8006816:	6849      	ldr	r1, [r1, #4]
 8006818:	003b      	movs	r3, r7
 800681a:	f7fa fef9 	bl	8001610 <__aeabi_dmul>
 800681e:	0006      	movs	r6, r0
 8006820:	000f      	movs	r7, r1
 8006822:	230f      	movs	r3, #15
 8006824:	439c      	bics	r4, r3
 8006826:	d04a      	beq.n	80068be <_strtod_l+0x54a>
 8006828:	3326      	adds	r3, #38	; 0x26
 800682a:	33ff      	adds	r3, #255	; 0xff
 800682c:	429c      	cmp	r4, r3
 800682e:	dd22      	ble.n	8006876 <_strtod_l+0x502>
 8006830:	2300      	movs	r3, #0
 8006832:	9305      	str	r3, [sp, #20]
 8006834:	9306      	str	r3, [sp, #24]
 8006836:	930d      	str	r3, [sp, #52]	; 0x34
 8006838:	9308      	str	r3, [sp, #32]
 800683a:	2322      	movs	r3, #34	; 0x22
 800683c:	2600      	movs	r6, #0
 800683e:	9a04      	ldr	r2, [sp, #16]
 8006840:	4f3f      	ldr	r7, [pc, #252]	; (8006940 <_strtod_l+0x5cc>)
 8006842:	6013      	str	r3, [r2, #0]
 8006844:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006846:	42b3      	cmp	r3, r6
 8006848:	d100      	bne.n	800684c <_strtod_l+0x4d8>
 800684a:	e5ce      	b.n	80063ea <_strtod_l+0x76>
 800684c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800684e:	9804      	ldr	r0, [sp, #16]
 8006850:	f002 ff8a 	bl	8009768 <_Bfree>
 8006854:	9908      	ldr	r1, [sp, #32]
 8006856:	9804      	ldr	r0, [sp, #16]
 8006858:	f002 ff86 	bl	8009768 <_Bfree>
 800685c:	9906      	ldr	r1, [sp, #24]
 800685e:	9804      	ldr	r0, [sp, #16]
 8006860:	f002 ff82 	bl	8009768 <_Bfree>
 8006864:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006866:	9804      	ldr	r0, [sp, #16]
 8006868:	f002 ff7e 	bl	8009768 <_Bfree>
 800686c:	9905      	ldr	r1, [sp, #20]
 800686e:	9804      	ldr	r0, [sp, #16]
 8006870:	f002 ff7a 	bl	8009768 <_Bfree>
 8006874:	e5b9      	b.n	80063ea <_strtod_l+0x76>
 8006876:	2300      	movs	r3, #0
 8006878:	0030      	movs	r0, r6
 800687a:	0039      	movs	r1, r7
 800687c:	4d35      	ldr	r5, [pc, #212]	; (8006954 <_strtod_l+0x5e0>)
 800687e:	1124      	asrs	r4, r4, #4
 8006880:	9307      	str	r3, [sp, #28]
 8006882:	2c01      	cmp	r4, #1
 8006884:	dc1e      	bgt.n	80068c4 <_strtod_l+0x550>
 8006886:	2b00      	cmp	r3, #0
 8006888:	d001      	beq.n	800688e <_strtod_l+0x51a>
 800688a:	0006      	movs	r6, r0
 800688c:	000f      	movs	r7, r1
 800688e:	4b32      	ldr	r3, [pc, #200]	; (8006958 <_strtod_l+0x5e4>)
 8006890:	9a07      	ldr	r2, [sp, #28]
 8006892:	18ff      	adds	r7, r7, r3
 8006894:	4b2f      	ldr	r3, [pc, #188]	; (8006954 <_strtod_l+0x5e0>)
 8006896:	00d2      	lsls	r2, r2, #3
 8006898:	189d      	adds	r5, r3, r2
 800689a:	6828      	ldr	r0, [r5, #0]
 800689c:	6869      	ldr	r1, [r5, #4]
 800689e:	0032      	movs	r2, r6
 80068a0:	003b      	movs	r3, r7
 80068a2:	f7fa feb5 	bl	8001610 <__aeabi_dmul>
 80068a6:	4b26      	ldr	r3, [pc, #152]	; (8006940 <_strtod_l+0x5cc>)
 80068a8:	4a2c      	ldr	r2, [pc, #176]	; (800695c <_strtod_l+0x5e8>)
 80068aa:	0006      	movs	r6, r0
 80068ac:	400b      	ands	r3, r1
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d8be      	bhi.n	8006830 <_strtod_l+0x4bc>
 80068b2:	4a2b      	ldr	r2, [pc, #172]	; (8006960 <_strtod_l+0x5ec>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d913      	bls.n	80068e0 <_strtod_l+0x56c>
 80068b8:	2601      	movs	r6, #1
 80068ba:	4f2a      	ldr	r7, [pc, #168]	; (8006964 <_strtod_l+0x5f0>)
 80068bc:	4276      	negs	r6, r6
 80068be:	2300      	movs	r3, #0
 80068c0:	9307      	str	r3, [sp, #28]
 80068c2:	e088      	b.n	80069d6 <_strtod_l+0x662>
 80068c4:	2201      	movs	r2, #1
 80068c6:	4214      	tst	r4, r2
 80068c8:	d004      	beq.n	80068d4 <_strtod_l+0x560>
 80068ca:	682a      	ldr	r2, [r5, #0]
 80068cc:	686b      	ldr	r3, [r5, #4]
 80068ce:	f7fa fe9f 	bl	8001610 <__aeabi_dmul>
 80068d2:	2301      	movs	r3, #1
 80068d4:	9a07      	ldr	r2, [sp, #28]
 80068d6:	1064      	asrs	r4, r4, #1
 80068d8:	3201      	adds	r2, #1
 80068da:	9207      	str	r2, [sp, #28]
 80068dc:	3508      	adds	r5, #8
 80068de:	e7d0      	b.n	8006882 <_strtod_l+0x50e>
 80068e0:	23d4      	movs	r3, #212	; 0xd4
 80068e2:	049b      	lsls	r3, r3, #18
 80068e4:	18cf      	adds	r7, r1, r3
 80068e6:	e7ea      	b.n	80068be <_strtod_l+0x54a>
 80068e8:	2c00      	cmp	r4, #0
 80068ea:	d0e8      	beq.n	80068be <_strtod_l+0x54a>
 80068ec:	4264      	negs	r4, r4
 80068ee:	230f      	movs	r3, #15
 80068f0:	0022      	movs	r2, r4
 80068f2:	401a      	ands	r2, r3
 80068f4:	421c      	tst	r4, r3
 80068f6:	d00a      	beq.n	800690e <_strtod_l+0x59a>
 80068f8:	4b15      	ldr	r3, [pc, #84]	; (8006950 <_strtod_l+0x5dc>)
 80068fa:	00d2      	lsls	r2, r2, #3
 80068fc:	189b      	adds	r3, r3, r2
 80068fe:	0030      	movs	r0, r6
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	0039      	movs	r1, r7
 8006906:	f7fa fa89 	bl	8000e1c <__aeabi_ddiv>
 800690a:	0006      	movs	r6, r0
 800690c:	000f      	movs	r7, r1
 800690e:	1124      	asrs	r4, r4, #4
 8006910:	d0d5      	beq.n	80068be <_strtod_l+0x54a>
 8006912:	2c1f      	cmp	r4, #31
 8006914:	dd28      	ble.n	8006968 <_strtod_l+0x5f4>
 8006916:	2300      	movs	r3, #0
 8006918:	9305      	str	r3, [sp, #20]
 800691a:	9306      	str	r3, [sp, #24]
 800691c:	930d      	str	r3, [sp, #52]	; 0x34
 800691e:	9308      	str	r3, [sp, #32]
 8006920:	2322      	movs	r3, #34	; 0x22
 8006922:	9a04      	ldr	r2, [sp, #16]
 8006924:	2600      	movs	r6, #0
 8006926:	6013      	str	r3, [r2, #0]
 8006928:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800692a:	2700      	movs	r7, #0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d18d      	bne.n	800684c <_strtod_l+0x4d8>
 8006930:	e55b      	b.n	80063ea <_strtod_l+0x76>
 8006932:	46c0      	nop			; (mov r8, r8)
 8006934:	00004e1f 	.word	0x00004e1f
 8006938:	0800ae2e 	.word	0x0800ae2e
 800693c:	0800ace4 	.word	0x0800ace4
 8006940:	7ff00000 	.word	0x7ff00000
 8006944:	0800ae26 	.word	0x0800ae26
 8006948:	0800ae65 	.word	0x0800ae65
 800694c:	0800b0f0 	.word	0x0800b0f0
 8006950:	0800afd0 	.word	0x0800afd0
 8006954:	0800afa8 	.word	0x0800afa8
 8006958:	fcb00000 	.word	0xfcb00000
 800695c:	7ca00000 	.word	0x7ca00000
 8006960:	7c900000 	.word	0x7c900000
 8006964:	7fefffff 	.word	0x7fefffff
 8006968:	2310      	movs	r3, #16
 800696a:	0022      	movs	r2, r4
 800696c:	401a      	ands	r2, r3
 800696e:	9207      	str	r2, [sp, #28]
 8006970:	421c      	tst	r4, r3
 8006972:	d001      	beq.n	8006978 <_strtod_l+0x604>
 8006974:	335a      	adds	r3, #90	; 0x5a
 8006976:	9307      	str	r3, [sp, #28]
 8006978:	0030      	movs	r0, r6
 800697a:	0039      	movs	r1, r7
 800697c:	2300      	movs	r3, #0
 800697e:	4dc4      	ldr	r5, [pc, #784]	; (8006c90 <_strtod_l+0x91c>)
 8006980:	2201      	movs	r2, #1
 8006982:	4214      	tst	r4, r2
 8006984:	d004      	beq.n	8006990 <_strtod_l+0x61c>
 8006986:	682a      	ldr	r2, [r5, #0]
 8006988:	686b      	ldr	r3, [r5, #4]
 800698a:	f7fa fe41 	bl	8001610 <__aeabi_dmul>
 800698e:	2301      	movs	r3, #1
 8006990:	1064      	asrs	r4, r4, #1
 8006992:	3508      	adds	r5, #8
 8006994:	2c00      	cmp	r4, #0
 8006996:	d1f3      	bne.n	8006980 <_strtod_l+0x60c>
 8006998:	2b00      	cmp	r3, #0
 800699a:	d001      	beq.n	80069a0 <_strtod_l+0x62c>
 800699c:	0006      	movs	r6, r0
 800699e:	000f      	movs	r7, r1
 80069a0:	9b07      	ldr	r3, [sp, #28]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00f      	beq.n	80069c6 <_strtod_l+0x652>
 80069a6:	236b      	movs	r3, #107	; 0x6b
 80069a8:	007a      	lsls	r2, r7, #1
 80069aa:	0d52      	lsrs	r2, r2, #21
 80069ac:	0039      	movs	r1, r7
 80069ae:	1a9b      	subs	r3, r3, r2
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	dd08      	ble.n	80069c6 <_strtod_l+0x652>
 80069b4:	2b1f      	cmp	r3, #31
 80069b6:	dc00      	bgt.n	80069ba <_strtod_l+0x646>
 80069b8:	e121      	b.n	8006bfe <_strtod_l+0x88a>
 80069ba:	2600      	movs	r6, #0
 80069bc:	2b34      	cmp	r3, #52	; 0x34
 80069be:	dc00      	bgt.n	80069c2 <_strtod_l+0x64e>
 80069c0:	e116      	b.n	8006bf0 <_strtod_l+0x87c>
 80069c2:	27dc      	movs	r7, #220	; 0xdc
 80069c4:	04bf      	lsls	r7, r7, #18
 80069c6:	2200      	movs	r2, #0
 80069c8:	2300      	movs	r3, #0
 80069ca:	0030      	movs	r0, r6
 80069cc:	0039      	movs	r1, r7
 80069ce:	f7f9 fd3b 	bl	8000448 <__aeabi_dcmpeq>
 80069d2:	2800      	cmp	r0, #0
 80069d4:	d19f      	bne.n	8006916 <_strtod_l+0x5a2>
 80069d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069d8:	9a08      	ldr	r2, [sp, #32]
 80069da:	9300      	str	r3, [sp, #0]
 80069dc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80069de:	9b05      	ldr	r3, [sp, #20]
 80069e0:	9804      	ldr	r0, [sp, #16]
 80069e2:	f002 ff29 	bl	8009838 <__s2b>
 80069e6:	900d      	str	r0, [sp, #52]	; 0x34
 80069e8:	2800      	cmp	r0, #0
 80069ea:	d100      	bne.n	80069ee <_strtod_l+0x67a>
 80069ec:	e720      	b.n	8006830 <_strtod_l+0x4bc>
 80069ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069f0:	9906      	ldr	r1, [sp, #24]
 80069f2:	17da      	asrs	r2, r3, #31
 80069f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069f6:	1a5b      	subs	r3, r3, r1
 80069f8:	401a      	ands	r2, r3
 80069fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069fc:	9215      	str	r2, [sp, #84]	; 0x54
 80069fe:	43db      	mvns	r3, r3
 8006a00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a02:	17db      	asrs	r3, r3, #31
 8006a04:	401a      	ands	r2, r3
 8006a06:	2300      	movs	r3, #0
 8006a08:	9218      	str	r2, [sp, #96]	; 0x60
 8006a0a:	9305      	str	r3, [sp, #20]
 8006a0c:	9306      	str	r3, [sp, #24]
 8006a0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a10:	9804      	ldr	r0, [sp, #16]
 8006a12:	6859      	ldr	r1, [r3, #4]
 8006a14:	f002 fe64 	bl	80096e0 <_Balloc>
 8006a18:	9008      	str	r0, [sp, #32]
 8006a1a:	2800      	cmp	r0, #0
 8006a1c:	d100      	bne.n	8006a20 <_strtod_l+0x6ac>
 8006a1e:	e70c      	b.n	800683a <_strtod_l+0x4c6>
 8006a20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a22:	300c      	adds	r0, #12
 8006a24:	0019      	movs	r1, r3
 8006a26:	691a      	ldr	r2, [r3, #16]
 8006a28:	310c      	adds	r1, #12
 8006a2a:	3202      	adds	r2, #2
 8006a2c:	0092      	lsls	r2, r2, #2
 8006a2e:	f001 fbed 	bl	800820c <memcpy>
 8006a32:	ab1e      	add	r3, sp, #120	; 0x78
 8006a34:	9301      	str	r3, [sp, #4]
 8006a36:	ab1d      	add	r3, sp, #116	; 0x74
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	0032      	movs	r2, r6
 8006a3c:	003b      	movs	r3, r7
 8006a3e:	9804      	ldr	r0, [sp, #16]
 8006a40:	9610      	str	r6, [sp, #64]	; 0x40
 8006a42:	9711      	str	r7, [sp, #68]	; 0x44
 8006a44:	f003 fa3a 	bl	8009ebc <__d2b>
 8006a48:	901c      	str	r0, [sp, #112]	; 0x70
 8006a4a:	2800      	cmp	r0, #0
 8006a4c:	d100      	bne.n	8006a50 <_strtod_l+0x6dc>
 8006a4e:	e6f4      	b.n	800683a <_strtod_l+0x4c6>
 8006a50:	2101      	movs	r1, #1
 8006a52:	9804      	ldr	r0, [sp, #16]
 8006a54:	f002 ff84 	bl	8009960 <__i2b>
 8006a58:	9006      	str	r0, [sp, #24]
 8006a5a:	2800      	cmp	r0, #0
 8006a5c:	d100      	bne.n	8006a60 <_strtod_l+0x6ec>
 8006a5e:	e6ec      	b.n	800683a <_strtod_l+0x4c6>
 8006a60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006a62:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006a64:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8006a66:	1ad4      	subs	r4, r2, r3
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	db01      	blt.n	8006a70 <_strtod_l+0x6fc>
 8006a6c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8006a6e:	195d      	adds	r5, r3, r5
 8006a70:	9907      	ldr	r1, [sp, #28]
 8006a72:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006a74:	1a5b      	subs	r3, r3, r1
 8006a76:	2136      	movs	r1, #54	; 0x36
 8006a78:	189b      	adds	r3, r3, r2
 8006a7a:	1a8a      	subs	r2, r1, r2
 8006a7c:	4985      	ldr	r1, [pc, #532]	; (8006c94 <_strtod_l+0x920>)
 8006a7e:	2001      	movs	r0, #1
 8006a80:	468c      	mov	ip, r1
 8006a82:	2100      	movs	r1, #0
 8006a84:	3b01      	subs	r3, #1
 8006a86:	9114      	str	r1, [sp, #80]	; 0x50
 8006a88:	9012      	str	r0, [sp, #72]	; 0x48
 8006a8a:	4563      	cmp	r3, ip
 8006a8c:	da07      	bge.n	8006a9e <_strtod_l+0x72a>
 8006a8e:	4661      	mov	r1, ip
 8006a90:	1ac9      	subs	r1, r1, r3
 8006a92:	1a52      	subs	r2, r2, r1
 8006a94:	291f      	cmp	r1, #31
 8006a96:	dd00      	ble.n	8006a9a <_strtod_l+0x726>
 8006a98:	e0b6      	b.n	8006c08 <_strtod_l+0x894>
 8006a9a:	4088      	lsls	r0, r1
 8006a9c:	9012      	str	r0, [sp, #72]	; 0x48
 8006a9e:	18ab      	adds	r3, r5, r2
 8006aa0:	930c      	str	r3, [sp, #48]	; 0x30
 8006aa2:	18a4      	adds	r4, r4, r2
 8006aa4:	9b07      	ldr	r3, [sp, #28]
 8006aa6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006aa8:	191c      	adds	r4, r3, r4
 8006aaa:	002b      	movs	r3, r5
 8006aac:	4295      	cmp	r5, r2
 8006aae:	dd00      	ble.n	8006ab2 <_strtod_l+0x73e>
 8006ab0:	0013      	movs	r3, r2
 8006ab2:	42a3      	cmp	r3, r4
 8006ab4:	dd00      	ble.n	8006ab8 <_strtod_l+0x744>
 8006ab6:	0023      	movs	r3, r4
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	dd04      	ble.n	8006ac6 <_strtod_l+0x752>
 8006abc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006abe:	1ae4      	subs	r4, r4, r3
 8006ac0:	1ad2      	subs	r2, r2, r3
 8006ac2:	920c      	str	r2, [sp, #48]	; 0x30
 8006ac4:	1aed      	subs	r5, r5, r3
 8006ac6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	dd17      	ble.n	8006afc <_strtod_l+0x788>
 8006acc:	001a      	movs	r2, r3
 8006ace:	9906      	ldr	r1, [sp, #24]
 8006ad0:	9804      	ldr	r0, [sp, #16]
 8006ad2:	f003 f80d 	bl	8009af0 <__pow5mult>
 8006ad6:	9006      	str	r0, [sp, #24]
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	d100      	bne.n	8006ade <_strtod_l+0x76a>
 8006adc:	e6ad      	b.n	800683a <_strtod_l+0x4c6>
 8006ade:	0001      	movs	r1, r0
 8006ae0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006ae2:	9804      	ldr	r0, [sp, #16]
 8006ae4:	f002 ff54 	bl	8009990 <__multiply>
 8006ae8:	900e      	str	r0, [sp, #56]	; 0x38
 8006aea:	2800      	cmp	r0, #0
 8006aec:	d100      	bne.n	8006af0 <_strtod_l+0x77c>
 8006aee:	e6a4      	b.n	800683a <_strtod_l+0x4c6>
 8006af0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006af2:	9804      	ldr	r0, [sp, #16]
 8006af4:	f002 fe38 	bl	8009768 <_Bfree>
 8006af8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006afa:	931c      	str	r3, [sp, #112]	; 0x70
 8006afc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	dd00      	ble.n	8006b04 <_strtod_l+0x790>
 8006b02:	e087      	b.n	8006c14 <_strtod_l+0x8a0>
 8006b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	dd08      	ble.n	8006b1c <_strtod_l+0x7a8>
 8006b0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006b0c:	9908      	ldr	r1, [sp, #32]
 8006b0e:	9804      	ldr	r0, [sp, #16]
 8006b10:	f002 ffee 	bl	8009af0 <__pow5mult>
 8006b14:	9008      	str	r0, [sp, #32]
 8006b16:	2800      	cmp	r0, #0
 8006b18:	d100      	bne.n	8006b1c <_strtod_l+0x7a8>
 8006b1a:	e68e      	b.n	800683a <_strtod_l+0x4c6>
 8006b1c:	2c00      	cmp	r4, #0
 8006b1e:	dd08      	ble.n	8006b32 <_strtod_l+0x7be>
 8006b20:	0022      	movs	r2, r4
 8006b22:	9908      	ldr	r1, [sp, #32]
 8006b24:	9804      	ldr	r0, [sp, #16]
 8006b26:	f003 f83f 	bl	8009ba8 <__lshift>
 8006b2a:	9008      	str	r0, [sp, #32]
 8006b2c:	2800      	cmp	r0, #0
 8006b2e:	d100      	bne.n	8006b32 <_strtod_l+0x7be>
 8006b30:	e683      	b.n	800683a <_strtod_l+0x4c6>
 8006b32:	2d00      	cmp	r5, #0
 8006b34:	dd08      	ble.n	8006b48 <_strtod_l+0x7d4>
 8006b36:	002a      	movs	r2, r5
 8006b38:	9906      	ldr	r1, [sp, #24]
 8006b3a:	9804      	ldr	r0, [sp, #16]
 8006b3c:	f003 f834 	bl	8009ba8 <__lshift>
 8006b40:	9006      	str	r0, [sp, #24]
 8006b42:	2800      	cmp	r0, #0
 8006b44:	d100      	bne.n	8006b48 <_strtod_l+0x7d4>
 8006b46:	e678      	b.n	800683a <_strtod_l+0x4c6>
 8006b48:	9a08      	ldr	r2, [sp, #32]
 8006b4a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006b4c:	9804      	ldr	r0, [sp, #16]
 8006b4e:	f003 f8b5 	bl	8009cbc <__mdiff>
 8006b52:	9005      	str	r0, [sp, #20]
 8006b54:	2800      	cmp	r0, #0
 8006b56:	d100      	bne.n	8006b5a <_strtod_l+0x7e6>
 8006b58:	e66f      	b.n	800683a <_strtod_l+0x4c6>
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	68c3      	ldr	r3, [r0, #12]
 8006b5e:	9906      	ldr	r1, [sp, #24]
 8006b60:	60c2      	str	r2, [r0, #12]
 8006b62:	930c      	str	r3, [sp, #48]	; 0x30
 8006b64:	f003 f88e 	bl	8009c84 <__mcmp>
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	da5d      	bge.n	8006c28 <_strtod_l+0x8b4>
 8006b6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b6e:	4333      	orrs	r3, r6
 8006b70:	d000      	beq.n	8006b74 <_strtod_l+0x800>
 8006b72:	e088      	b.n	8006c86 <_strtod_l+0x912>
 8006b74:	033b      	lsls	r3, r7, #12
 8006b76:	d000      	beq.n	8006b7a <_strtod_l+0x806>
 8006b78:	e085      	b.n	8006c86 <_strtod_l+0x912>
 8006b7a:	22d6      	movs	r2, #214	; 0xd6
 8006b7c:	4b46      	ldr	r3, [pc, #280]	; (8006c98 <_strtod_l+0x924>)
 8006b7e:	04d2      	lsls	r2, r2, #19
 8006b80:	403b      	ands	r3, r7
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d97f      	bls.n	8006c86 <_strtod_l+0x912>
 8006b86:	9b05      	ldr	r3, [sp, #20]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d103      	bne.n	8006b96 <_strtod_l+0x822>
 8006b8e:	9b05      	ldr	r3, [sp, #20]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	dd77      	ble.n	8006c86 <_strtod_l+0x912>
 8006b96:	9905      	ldr	r1, [sp, #20]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	9804      	ldr	r0, [sp, #16]
 8006b9c:	f003 f804 	bl	8009ba8 <__lshift>
 8006ba0:	9906      	ldr	r1, [sp, #24]
 8006ba2:	9005      	str	r0, [sp, #20]
 8006ba4:	f003 f86e 	bl	8009c84 <__mcmp>
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	dd6c      	ble.n	8006c86 <_strtod_l+0x912>
 8006bac:	9907      	ldr	r1, [sp, #28]
 8006bae:	003b      	movs	r3, r7
 8006bb0:	4a39      	ldr	r2, [pc, #228]	; (8006c98 <_strtod_l+0x924>)
 8006bb2:	2900      	cmp	r1, #0
 8006bb4:	d100      	bne.n	8006bb8 <_strtod_l+0x844>
 8006bb6:	e094      	b.n	8006ce2 <_strtod_l+0x96e>
 8006bb8:	0011      	movs	r1, r2
 8006bba:	20d6      	movs	r0, #214	; 0xd6
 8006bbc:	4039      	ands	r1, r7
 8006bbe:	04c0      	lsls	r0, r0, #19
 8006bc0:	4281      	cmp	r1, r0
 8006bc2:	dd00      	ble.n	8006bc6 <_strtod_l+0x852>
 8006bc4:	e08d      	b.n	8006ce2 <_strtod_l+0x96e>
 8006bc6:	23dc      	movs	r3, #220	; 0xdc
 8006bc8:	049b      	lsls	r3, r3, #18
 8006bca:	4299      	cmp	r1, r3
 8006bcc:	dc00      	bgt.n	8006bd0 <_strtod_l+0x85c>
 8006bce:	e6a7      	b.n	8006920 <_strtod_l+0x5ac>
 8006bd0:	0030      	movs	r0, r6
 8006bd2:	0039      	movs	r1, r7
 8006bd4:	4b31      	ldr	r3, [pc, #196]	; (8006c9c <_strtod_l+0x928>)
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f7fa fd1a 	bl	8001610 <__aeabi_dmul>
 8006bdc:	4b2e      	ldr	r3, [pc, #184]	; (8006c98 <_strtod_l+0x924>)
 8006bde:	0006      	movs	r6, r0
 8006be0:	000f      	movs	r7, r1
 8006be2:	420b      	tst	r3, r1
 8006be4:	d000      	beq.n	8006be8 <_strtod_l+0x874>
 8006be6:	e631      	b.n	800684c <_strtod_l+0x4d8>
 8006be8:	2322      	movs	r3, #34	; 0x22
 8006bea:	9a04      	ldr	r2, [sp, #16]
 8006bec:	6013      	str	r3, [r2, #0]
 8006bee:	e62d      	b.n	800684c <_strtod_l+0x4d8>
 8006bf0:	234b      	movs	r3, #75	; 0x4b
 8006bf2:	1a9a      	subs	r2, r3, r2
 8006bf4:	3b4c      	subs	r3, #76	; 0x4c
 8006bf6:	4093      	lsls	r3, r2
 8006bf8:	4019      	ands	r1, r3
 8006bfa:	000f      	movs	r7, r1
 8006bfc:	e6e3      	b.n	80069c6 <_strtod_l+0x652>
 8006bfe:	2201      	movs	r2, #1
 8006c00:	4252      	negs	r2, r2
 8006c02:	409a      	lsls	r2, r3
 8006c04:	4016      	ands	r6, r2
 8006c06:	e6de      	b.n	80069c6 <_strtod_l+0x652>
 8006c08:	4925      	ldr	r1, [pc, #148]	; (8006ca0 <_strtod_l+0x92c>)
 8006c0a:	1acb      	subs	r3, r1, r3
 8006c0c:	0001      	movs	r1, r0
 8006c0e:	4099      	lsls	r1, r3
 8006c10:	9114      	str	r1, [sp, #80]	; 0x50
 8006c12:	e743      	b.n	8006a9c <_strtod_l+0x728>
 8006c14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c16:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006c18:	9804      	ldr	r0, [sp, #16]
 8006c1a:	f002 ffc5 	bl	8009ba8 <__lshift>
 8006c1e:	901c      	str	r0, [sp, #112]	; 0x70
 8006c20:	2800      	cmp	r0, #0
 8006c22:	d000      	beq.n	8006c26 <_strtod_l+0x8b2>
 8006c24:	e76e      	b.n	8006b04 <_strtod_l+0x790>
 8006c26:	e608      	b.n	800683a <_strtod_l+0x4c6>
 8006c28:	970e      	str	r7, [sp, #56]	; 0x38
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	d177      	bne.n	8006d1e <_strtod_l+0x9aa>
 8006c2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c30:	033b      	lsls	r3, r7, #12
 8006c32:	0b1b      	lsrs	r3, r3, #12
 8006c34:	2a00      	cmp	r2, #0
 8006c36:	d039      	beq.n	8006cac <_strtod_l+0x938>
 8006c38:	4a1a      	ldr	r2, [pc, #104]	; (8006ca4 <_strtod_l+0x930>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d139      	bne.n	8006cb2 <_strtod_l+0x93e>
 8006c3e:	2101      	movs	r1, #1
 8006c40:	9b07      	ldr	r3, [sp, #28]
 8006c42:	4249      	negs	r1, r1
 8006c44:	0032      	movs	r2, r6
 8006c46:	0008      	movs	r0, r1
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00b      	beq.n	8006c64 <_strtod_l+0x8f0>
 8006c4c:	24d4      	movs	r4, #212	; 0xd4
 8006c4e:	4b12      	ldr	r3, [pc, #72]	; (8006c98 <_strtod_l+0x924>)
 8006c50:	0008      	movs	r0, r1
 8006c52:	403b      	ands	r3, r7
 8006c54:	04e4      	lsls	r4, r4, #19
 8006c56:	42a3      	cmp	r3, r4
 8006c58:	d804      	bhi.n	8006c64 <_strtod_l+0x8f0>
 8006c5a:	306c      	adds	r0, #108	; 0x6c
 8006c5c:	0d1b      	lsrs	r3, r3, #20
 8006c5e:	1ac3      	subs	r3, r0, r3
 8006c60:	4099      	lsls	r1, r3
 8006c62:	0008      	movs	r0, r1
 8006c64:	4282      	cmp	r2, r0
 8006c66:	d124      	bne.n	8006cb2 <_strtod_l+0x93e>
 8006c68:	4b0f      	ldr	r3, [pc, #60]	; (8006ca8 <_strtod_l+0x934>)
 8006c6a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006c6c:	4299      	cmp	r1, r3
 8006c6e:	d102      	bne.n	8006c76 <_strtod_l+0x902>
 8006c70:	3201      	adds	r2, #1
 8006c72:	d100      	bne.n	8006c76 <_strtod_l+0x902>
 8006c74:	e5e1      	b.n	800683a <_strtod_l+0x4c6>
 8006c76:	4b08      	ldr	r3, [pc, #32]	; (8006c98 <_strtod_l+0x924>)
 8006c78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c7a:	2600      	movs	r6, #0
 8006c7c:	401a      	ands	r2, r3
 8006c7e:	0013      	movs	r3, r2
 8006c80:	2280      	movs	r2, #128	; 0x80
 8006c82:	0352      	lsls	r2, r2, #13
 8006c84:	189f      	adds	r7, r3, r2
 8006c86:	9b07      	ldr	r3, [sp, #28]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1a1      	bne.n	8006bd0 <_strtod_l+0x85c>
 8006c8c:	e5de      	b.n	800684c <_strtod_l+0x4d8>
 8006c8e:	46c0      	nop			; (mov r8, r8)
 8006c90:	0800acf8 	.word	0x0800acf8
 8006c94:	fffffc02 	.word	0xfffffc02
 8006c98:	7ff00000 	.word	0x7ff00000
 8006c9c:	39500000 	.word	0x39500000
 8006ca0:	fffffbe2 	.word	0xfffffbe2
 8006ca4:	000fffff 	.word	0x000fffff
 8006ca8:	7fefffff 	.word	0x7fefffff
 8006cac:	4333      	orrs	r3, r6
 8006cae:	d100      	bne.n	8006cb2 <_strtod_l+0x93e>
 8006cb0:	e77c      	b.n	8006bac <_strtod_l+0x838>
 8006cb2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d01d      	beq.n	8006cf4 <_strtod_l+0x980>
 8006cb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006cbc:	4213      	tst	r3, r2
 8006cbe:	d0e2      	beq.n	8006c86 <_strtod_l+0x912>
 8006cc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cc2:	0030      	movs	r0, r6
 8006cc4:	0039      	movs	r1, r7
 8006cc6:	9a07      	ldr	r2, [sp, #28]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d017      	beq.n	8006cfc <_strtod_l+0x988>
 8006ccc:	f7ff fb3a 	bl	8006344 <sulp>
 8006cd0:	0002      	movs	r2, r0
 8006cd2:	000b      	movs	r3, r1
 8006cd4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006cd6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006cd8:	f7f9 fd40 	bl	800075c <__aeabi_dadd>
 8006cdc:	0006      	movs	r6, r0
 8006cde:	000f      	movs	r7, r1
 8006ce0:	e7d1      	b.n	8006c86 <_strtod_l+0x912>
 8006ce2:	2601      	movs	r6, #1
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	4a98      	ldr	r2, [pc, #608]	; (8006f48 <_strtod_l+0xbd4>)
 8006ce8:	4276      	negs	r6, r6
 8006cea:	189b      	adds	r3, r3, r2
 8006cec:	4a97      	ldr	r2, [pc, #604]	; (8006f4c <_strtod_l+0xbd8>)
 8006cee:	431a      	orrs	r2, r3
 8006cf0:	0017      	movs	r7, r2
 8006cf2:	e7c8      	b.n	8006c86 <_strtod_l+0x912>
 8006cf4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006cf6:	4233      	tst	r3, r6
 8006cf8:	d0c5      	beq.n	8006c86 <_strtod_l+0x912>
 8006cfa:	e7e1      	b.n	8006cc0 <_strtod_l+0x94c>
 8006cfc:	f7ff fb22 	bl	8006344 <sulp>
 8006d00:	0002      	movs	r2, r0
 8006d02:	000b      	movs	r3, r1
 8006d04:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006d06:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006d08:	f7fa ff44 	bl	8001b94 <__aeabi_dsub>
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	2300      	movs	r3, #0
 8006d10:	0006      	movs	r6, r0
 8006d12:	000f      	movs	r7, r1
 8006d14:	f7f9 fb98 	bl	8000448 <__aeabi_dcmpeq>
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	d0b4      	beq.n	8006c86 <_strtod_l+0x912>
 8006d1c:	e600      	b.n	8006920 <_strtod_l+0x5ac>
 8006d1e:	9906      	ldr	r1, [sp, #24]
 8006d20:	9805      	ldr	r0, [sp, #20]
 8006d22:	f003 f92b 	bl	8009f7c <__ratio>
 8006d26:	2380      	movs	r3, #128	; 0x80
 8006d28:	2200      	movs	r2, #0
 8006d2a:	05db      	lsls	r3, r3, #23
 8006d2c:	0004      	movs	r4, r0
 8006d2e:	000d      	movs	r5, r1
 8006d30:	f7f9 fb9a 	bl	8000468 <__aeabi_dcmple>
 8006d34:	2800      	cmp	r0, #0
 8006d36:	d06d      	beq.n	8006e14 <_strtod_l+0xaa0>
 8006d38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d000      	beq.n	8006d40 <_strtod_l+0x9cc>
 8006d3e:	e07e      	b.n	8006e3e <_strtod_l+0xaca>
 8006d40:	2e00      	cmp	r6, #0
 8006d42:	d158      	bne.n	8006df6 <_strtod_l+0xa82>
 8006d44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d46:	031b      	lsls	r3, r3, #12
 8006d48:	d000      	beq.n	8006d4c <_strtod_l+0x9d8>
 8006d4a:	e07f      	b.n	8006e4c <_strtod_l+0xad8>
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	0020      	movs	r0, r4
 8006d50:	0029      	movs	r1, r5
 8006d52:	4b7f      	ldr	r3, [pc, #508]	; (8006f50 <_strtod_l+0xbdc>)
 8006d54:	f7f9 fb7e 	bl	8000454 <__aeabi_dcmplt>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	d158      	bne.n	8006e0e <_strtod_l+0xa9a>
 8006d5c:	0020      	movs	r0, r4
 8006d5e:	0029      	movs	r1, r5
 8006d60:	2200      	movs	r2, #0
 8006d62:	4b7c      	ldr	r3, [pc, #496]	; (8006f54 <_strtod_l+0xbe0>)
 8006d64:	f7fa fc54 	bl	8001610 <__aeabi_dmul>
 8006d68:	0004      	movs	r4, r0
 8006d6a:	000d      	movs	r5, r1
 8006d6c:	2380      	movs	r3, #128	; 0x80
 8006d6e:	061b      	lsls	r3, r3, #24
 8006d70:	940a      	str	r4, [sp, #40]	; 0x28
 8006d72:	18eb      	adds	r3, r5, r3
 8006d74:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d7a:	9212      	str	r2, [sp, #72]	; 0x48
 8006d7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8006d7e:	4a76      	ldr	r2, [pc, #472]	; (8006f58 <_strtod_l+0xbe4>)
 8006d80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d82:	4013      	ands	r3, r2
 8006d84:	9314      	str	r3, [sp, #80]	; 0x50
 8006d86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006d88:	4b74      	ldr	r3, [pc, #464]	; (8006f5c <_strtod_l+0xbe8>)
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d000      	beq.n	8006d90 <_strtod_l+0xa1c>
 8006d8e:	e091      	b.n	8006eb4 <_strtod_l+0xb40>
 8006d90:	4a73      	ldr	r2, [pc, #460]	; (8006f60 <_strtod_l+0xbec>)
 8006d92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d94:	4694      	mov	ip, r2
 8006d96:	4463      	add	r3, ip
 8006d98:	001f      	movs	r7, r3
 8006d9a:	0030      	movs	r0, r6
 8006d9c:	0019      	movs	r1, r3
 8006d9e:	f003 f825 	bl	8009dec <__ulp>
 8006da2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006da4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006da6:	f7fa fc33 	bl	8001610 <__aeabi_dmul>
 8006daa:	0032      	movs	r2, r6
 8006dac:	003b      	movs	r3, r7
 8006dae:	f7f9 fcd5 	bl	800075c <__aeabi_dadd>
 8006db2:	4a69      	ldr	r2, [pc, #420]	; (8006f58 <_strtod_l+0xbe4>)
 8006db4:	4b6b      	ldr	r3, [pc, #428]	; (8006f64 <_strtod_l+0xbf0>)
 8006db6:	0006      	movs	r6, r0
 8006db8:	400a      	ands	r2, r1
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d949      	bls.n	8006e52 <_strtod_l+0xade>
 8006dbe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006dc0:	4b69      	ldr	r3, [pc, #420]	; (8006f68 <_strtod_l+0xbf4>)
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d103      	bne.n	8006dce <_strtod_l+0xa5a>
 8006dc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006dc8:	3301      	adds	r3, #1
 8006dca:	d100      	bne.n	8006dce <_strtod_l+0xa5a>
 8006dcc:	e535      	b.n	800683a <_strtod_l+0x4c6>
 8006dce:	2601      	movs	r6, #1
 8006dd0:	4f65      	ldr	r7, [pc, #404]	; (8006f68 <_strtod_l+0xbf4>)
 8006dd2:	4276      	negs	r6, r6
 8006dd4:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006dd6:	9804      	ldr	r0, [sp, #16]
 8006dd8:	f002 fcc6 	bl	8009768 <_Bfree>
 8006ddc:	9908      	ldr	r1, [sp, #32]
 8006dde:	9804      	ldr	r0, [sp, #16]
 8006de0:	f002 fcc2 	bl	8009768 <_Bfree>
 8006de4:	9906      	ldr	r1, [sp, #24]
 8006de6:	9804      	ldr	r0, [sp, #16]
 8006de8:	f002 fcbe 	bl	8009768 <_Bfree>
 8006dec:	9905      	ldr	r1, [sp, #20]
 8006dee:	9804      	ldr	r0, [sp, #16]
 8006df0:	f002 fcba 	bl	8009768 <_Bfree>
 8006df4:	e60b      	b.n	8006a0e <_strtod_l+0x69a>
 8006df6:	2e01      	cmp	r6, #1
 8006df8:	d103      	bne.n	8006e02 <_strtod_l+0xa8e>
 8006dfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d100      	bne.n	8006e02 <_strtod_l+0xa8e>
 8006e00:	e58e      	b.n	8006920 <_strtod_l+0x5ac>
 8006e02:	2300      	movs	r3, #0
 8006e04:	4c59      	ldr	r4, [pc, #356]	; (8006f6c <_strtod_l+0xbf8>)
 8006e06:	930a      	str	r3, [sp, #40]	; 0x28
 8006e08:	940b      	str	r4, [sp, #44]	; 0x2c
 8006e0a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006e0c:	e01c      	b.n	8006e48 <_strtod_l+0xad4>
 8006e0e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006e10:	4d50      	ldr	r5, [pc, #320]	; (8006f54 <_strtod_l+0xbe0>)
 8006e12:	e7ab      	b.n	8006d6c <_strtod_l+0x9f8>
 8006e14:	2200      	movs	r2, #0
 8006e16:	0020      	movs	r0, r4
 8006e18:	0029      	movs	r1, r5
 8006e1a:	4b4e      	ldr	r3, [pc, #312]	; (8006f54 <_strtod_l+0xbe0>)
 8006e1c:	f7fa fbf8 	bl	8001610 <__aeabi_dmul>
 8006e20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e22:	0004      	movs	r4, r0
 8006e24:	000b      	movs	r3, r1
 8006e26:	000d      	movs	r5, r1
 8006e28:	2a00      	cmp	r2, #0
 8006e2a:	d104      	bne.n	8006e36 <_strtod_l+0xac2>
 8006e2c:	2280      	movs	r2, #128	; 0x80
 8006e2e:	0612      	lsls	r2, r2, #24
 8006e30:	900a      	str	r0, [sp, #40]	; 0x28
 8006e32:	188b      	adds	r3, r1, r2
 8006e34:	e79e      	b.n	8006d74 <_strtod_l+0xa00>
 8006e36:	0002      	movs	r2, r0
 8006e38:	920a      	str	r2, [sp, #40]	; 0x28
 8006e3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e3c:	e79b      	b.n	8006d76 <_strtod_l+0xa02>
 8006e3e:	2300      	movs	r3, #0
 8006e40:	4c43      	ldr	r4, [pc, #268]	; (8006f50 <_strtod_l+0xbdc>)
 8006e42:	930a      	str	r3, [sp, #40]	; 0x28
 8006e44:	940b      	str	r4, [sp, #44]	; 0x2c
 8006e46:	2400      	movs	r4, #0
 8006e48:	4d41      	ldr	r5, [pc, #260]	; (8006f50 <_strtod_l+0xbdc>)
 8006e4a:	e794      	b.n	8006d76 <_strtod_l+0xa02>
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	4c47      	ldr	r4, [pc, #284]	; (8006f6c <_strtod_l+0xbf8>)
 8006e50:	e7f7      	b.n	8006e42 <_strtod_l+0xace>
 8006e52:	23d4      	movs	r3, #212	; 0xd4
 8006e54:	049b      	lsls	r3, r3, #18
 8006e56:	18cf      	adds	r7, r1, r3
 8006e58:	9b07      	ldr	r3, [sp, #28]
 8006e5a:	970e      	str	r7, [sp, #56]	; 0x38
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1b9      	bne.n	8006dd4 <_strtod_l+0xa60>
 8006e60:	4b3d      	ldr	r3, [pc, #244]	; (8006f58 <_strtod_l+0xbe4>)
 8006e62:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006e64:	403b      	ands	r3, r7
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d1b4      	bne.n	8006dd4 <_strtod_l+0xa60>
 8006e6a:	0020      	movs	r0, r4
 8006e6c:	0029      	movs	r1, r5
 8006e6e:	f7f9 fb57 	bl	8000520 <__aeabi_d2lz>
 8006e72:	f7f9 fb91 	bl	8000598 <__aeabi_l2d>
 8006e76:	0002      	movs	r2, r0
 8006e78:	000b      	movs	r3, r1
 8006e7a:	0020      	movs	r0, r4
 8006e7c:	0029      	movs	r1, r5
 8006e7e:	f7fa fe89 	bl	8001b94 <__aeabi_dsub>
 8006e82:	033b      	lsls	r3, r7, #12
 8006e84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e86:	0b1b      	lsrs	r3, r3, #12
 8006e88:	4333      	orrs	r3, r6
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	0004      	movs	r4, r0
 8006e8e:	000d      	movs	r5, r1
 8006e90:	4a37      	ldr	r2, [pc, #220]	; (8006f70 <_strtod_l+0xbfc>)
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d054      	beq.n	8006f40 <_strtod_l+0xbcc>
 8006e96:	4b37      	ldr	r3, [pc, #220]	; (8006f74 <_strtod_l+0xc00>)
 8006e98:	f7f9 fadc 	bl	8000454 <__aeabi_dcmplt>
 8006e9c:	2800      	cmp	r0, #0
 8006e9e:	d000      	beq.n	8006ea2 <_strtod_l+0xb2e>
 8006ea0:	e4d4      	b.n	800684c <_strtod_l+0x4d8>
 8006ea2:	0020      	movs	r0, r4
 8006ea4:	0029      	movs	r1, r5
 8006ea6:	4a34      	ldr	r2, [pc, #208]	; (8006f78 <_strtod_l+0xc04>)
 8006ea8:	4b2a      	ldr	r3, [pc, #168]	; (8006f54 <_strtod_l+0xbe0>)
 8006eaa:	f7f9 fae7 	bl	800047c <__aeabi_dcmpgt>
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	d090      	beq.n	8006dd4 <_strtod_l+0xa60>
 8006eb2:	e4cb      	b.n	800684c <_strtod_l+0x4d8>
 8006eb4:	9b07      	ldr	r3, [sp, #28]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d02b      	beq.n	8006f12 <_strtod_l+0xb9e>
 8006eba:	23d4      	movs	r3, #212	; 0xd4
 8006ebc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006ebe:	04db      	lsls	r3, r3, #19
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d826      	bhi.n	8006f12 <_strtod_l+0xb9e>
 8006ec4:	0020      	movs	r0, r4
 8006ec6:	0029      	movs	r1, r5
 8006ec8:	4a2c      	ldr	r2, [pc, #176]	; (8006f7c <_strtod_l+0xc08>)
 8006eca:	4b2d      	ldr	r3, [pc, #180]	; (8006f80 <_strtod_l+0xc0c>)
 8006ecc:	f7f9 facc 	bl	8000468 <__aeabi_dcmple>
 8006ed0:	2800      	cmp	r0, #0
 8006ed2:	d017      	beq.n	8006f04 <_strtod_l+0xb90>
 8006ed4:	0020      	movs	r0, r4
 8006ed6:	0029      	movs	r1, r5
 8006ed8:	f7f9 fb04 	bl	80004e4 <__aeabi_d2uiz>
 8006edc:	2800      	cmp	r0, #0
 8006ede:	d100      	bne.n	8006ee2 <_strtod_l+0xb6e>
 8006ee0:	3001      	adds	r0, #1
 8006ee2:	f7fb fa5d 	bl	80023a0 <__aeabi_ui2d>
 8006ee6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ee8:	0004      	movs	r4, r0
 8006eea:	000b      	movs	r3, r1
 8006eec:	000d      	movs	r5, r1
 8006eee:	2a00      	cmp	r2, #0
 8006ef0:	d122      	bne.n	8006f38 <_strtod_l+0xbc4>
 8006ef2:	2280      	movs	r2, #128	; 0x80
 8006ef4:	0612      	lsls	r2, r2, #24
 8006ef6:	188b      	adds	r3, r1, r2
 8006ef8:	9016      	str	r0, [sp, #88]	; 0x58
 8006efa:	9317      	str	r3, [sp, #92]	; 0x5c
 8006efc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006efe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f00:	9212      	str	r2, [sp, #72]	; 0x48
 8006f02:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f04:	22d6      	movs	r2, #214	; 0xd6
 8006f06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f08:	04d2      	lsls	r2, r2, #19
 8006f0a:	189b      	adds	r3, r3, r2
 8006f0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006f0e:	1a9b      	subs	r3, r3, r2
 8006f10:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f12:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006f14:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006f16:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8006f18:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8006f1a:	f002 ff67 	bl	8009dec <__ulp>
 8006f1e:	0002      	movs	r2, r0
 8006f20:	000b      	movs	r3, r1
 8006f22:	0030      	movs	r0, r6
 8006f24:	0039      	movs	r1, r7
 8006f26:	f7fa fb73 	bl	8001610 <__aeabi_dmul>
 8006f2a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006f2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f2e:	f7f9 fc15 	bl	800075c <__aeabi_dadd>
 8006f32:	0006      	movs	r6, r0
 8006f34:	000f      	movs	r7, r1
 8006f36:	e78f      	b.n	8006e58 <_strtod_l+0xae4>
 8006f38:	0002      	movs	r2, r0
 8006f3a:	9216      	str	r2, [sp, #88]	; 0x58
 8006f3c:	9317      	str	r3, [sp, #92]	; 0x5c
 8006f3e:	e7dd      	b.n	8006efc <_strtod_l+0xb88>
 8006f40:	4b10      	ldr	r3, [pc, #64]	; (8006f84 <_strtod_l+0xc10>)
 8006f42:	f7f9 fa87 	bl	8000454 <__aeabi_dcmplt>
 8006f46:	e7b2      	b.n	8006eae <_strtod_l+0xb3a>
 8006f48:	fff00000 	.word	0xfff00000
 8006f4c:	000fffff 	.word	0x000fffff
 8006f50:	3ff00000 	.word	0x3ff00000
 8006f54:	3fe00000 	.word	0x3fe00000
 8006f58:	7ff00000 	.word	0x7ff00000
 8006f5c:	7fe00000 	.word	0x7fe00000
 8006f60:	fcb00000 	.word	0xfcb00000
 8006f64:	7c9fffff 	.word	0x7c9fffff
 8006f68:	7fefffff 	.word	0x7fefffff
 8006f6c:	bff00000 	.word	0xbff00000
 8006f70:	94a03595 	.word	0x94a03595
 8006f74:	3fdfffff 	.word	0x3fdfffff
 8006f78:	35afe535 	.word	0x35afe535
 8006f7c:	ffc00000 	.word	0xffc00000
 8006f80:	41dfffff 	.word	0x41dfffff
 8006f84:	3fcfffff 	.word	0x3fcfffff

08006f88 <_strtod_r>:
 8006f88:	b510      	push	{r4, lr}
 8006f8a:	4b02      	ldr	r3, [pc, #8]	; (8006f94 <_strtod_r+0xc>)
 8006f8c:	f7ff f9f2 	bl	8006374 <_strtod_l>
 8006f90:	bd10      	pop	{r4, pc}
 8006f92:	46c0      	nop			; (mov r8, r8)
 8006f94:	20000024 	.word	0x20000024

08006f98 <strtod>:
 8006f98:	b510      	push	{r4, lr}
 8006f9a:	4c04      	ldr	r4, [pc, #16]	; (8006fac <strtod+0x14>)
 8006f9c:	000a      	movs	r2, r1
 8006f9e:	0001      	movs	r1, r0
 8006fa0:	4b03      	ldr	r3, [pc, #12]	; (8006fb0 <strtod+0x18>)
 8006fa2:	6820      	ldr	r0, [r4, #0]
 8006fa4:	f7ff f9e6 	bl	8006374 <_strtod_l>
 8006fa8:	bd10      	pop	{r4, pc}
 8006faa:	46c0      	nop			; (mov r8, r8)
 8006fac:	200001dc 	.word	0x200001dc
 8006fb0:	20000024 	.word	0x20000024

08006fb4 <_strtol_l.constprop.0>:
 8006fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fb6:	b087      	sub	sp, #28
 8006fb8:	001e      	movs	r6, r3
 8006fba:	9005      	str	r0, [sp, #20]
 8006fbc:	9101      	str	r1, [sp, #4]
 8006fbe:	9202      	str	r2, [sp, #8]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d048      	beq.n	8007056 <_strtol_l.constprop.0+0xa2>
 8006fc4:	000b      	movs	r3, r1
 8006fc6:	2e24      	cmp	r6, #36	; 0x24
 8006fc8:	d845      	bhi.n	8007056 <_strtol_l.constprop.0+0xa2>
 8006fca:	4a3b      	ldr	r2, [pc, #236]	; (80070b8 <_strtol_l.constprop.0+0x104>)
 8006fcc:	2108      	movs	r1, #8
 8006fce:	4694      	mov	ip, r2
 8006fd0:	001a      	movs	r2, r3
 8006fd2:	4660      	mov	r0, ip
 8006fd4:	7814      	ldrb	r4, [r2, #0]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	5d00      	ldrb	r0, [r0, r4]
 8006fda:	001d      	movs	r5, r3
 8006fdc:	0007      	movs	r7, r0
 8006fde:	400f      	ands	r7, r1
 8006fe0:	4208      	tst	r0, r1
 8006fe2:	d1f5      	bne.n	8006fd0 <_strtol_l.constprop.0+0x1c>
 8006fe4:	2c2d      	cmp	r4, #45	; 0x2d
 8006fe6:	d13d      	bne.n	8007064 <_strtol_l.constprop.0+0xb0>
 8006fe8:	2701      	movs	r7, #1
 8006fea:	781c      	ldrb	r4, [r3, #0]
 8006fec:	1c95      	adds	r5, r2, #2
 8006fee:	2e00      	cmp	r6, #0
 8006ff0:	d05e      	beq.n	80070b0 <_strtol_l.constprop.0+0xfc>
 8006ff2:	2e10      	cmp	r6, #16
 8006ff4:	d109      	bne.n	800700a <_strtol_l.constprop.0+0x56>
 8006ff6:	2c30      	cmp	r4, #48	; 0x30
 8006ff8:	d107      	bne.n	800700a <_strtol_l.constprop.0+0x56>
 8006ffa:	2220      	movs	r2, #32
 8006ffc:	782b      	ldrb	r3, [r5, #0]
 8006ffe:	4393      	bics	r3, r2
 8007000:	2b58      	cmp	r3, #88	; 0x58
 8007002:	d150      	bne.n	80070a6 <_strtol_l.constprop.0+0xf2>
 8007004:	2610      	movs	r6, #16
 8007006:	786c      	ldrb	r4, [r5, #1]
 8007008:	3502      	adds	r5, #2
 800700a:	4b2c      	ldr	r3, [pc, #176]	; (80070bc <_strtol_l.constprop.0+0x108>)
 800700c:	0031      	movs	r1, r6
 800700e:	18fb      	adds	r3, r7, r3
 8007010:	0018      	movs	r0, r3
 8007012:	9303      	str	r3, [sp, #12]
 8007014:	f7f9 f918 	bl	8000248 <__aeabi_uidivmod>
 8007018:	2200      	movs	r2, #0
 800701a:	9104      	str	r1, [sp, #16]
 800701c:	2101      	movs	r1, #1
 800701e:	4684      	mov	ip, r0
 8007020:	0010      	movs	r0, r2
 8007022:	4249      	negs	r1, r1
 8007024:	0023      	movs	r3, r4
 8007026:	3b30      	subs	r3, #48	; 0x30
 8007028:	2b09      	cmp	r3, #9
 800702a:	d903      	bls.n	8007034 <_strtol_l.constprop.0+0x80>
 800702c:	3b11      	subs	r3, #17
 800702e:	2b19      	cmp	r3, #25
 8007030:	d81d      	bhi.n	800706e <_strtol_l.constprop.0+0xba>
 8007032:	330a      	adds	r3, #10
 8007034:	429e      	cmp	r6, r3
 8007036:	dd1e      	ble.n	8007076 <_strtol_l.constprop.0+0xc2>
 8007038:	1c54      	adds	r4, r2, #1
 800703a:	d009      	beq.n	8007050 <_strtol_l.constprop.0+0x9c>
 800703c:	000a      	movs	r2, r1
 800703e:	4584      	cmp	ip, r0
 8007040:	d306      	bcc.n	8007050 <_strtol_l.constprop.0+0x9c>
 8007042:	d102      	bne.n	800704a <_strtol_l.constprop.0+0x96>
 8007044:	9c04      	ldr	r4, [sp, #16]
 8007046:	429c      	cmp	r4, r3
 8007048:	db02      	blt.n	8007050 <_strtol_l.constprop.0+0x9c>
 800704a:	2201      	movs	r2, #1
 800704c:	4370      	muls	r0, r6
 800704e:	1818      	adds	r0, r3, r0
 8007050:	782c      	ldrb	r4, [r5, #0]
 8007052:	3501      	adds	r5, #1
 8007054:	e7e6      	b.n	8007024 <_strtol_l.constprop.0+0x70>
 8007056:	f001 f8a1 	bl	800819c <__errno>
 800705a:	2316      	movs	r3, #22
 800705c:	6003      	str	r3, [r0, #0]
 800705e:	2000      	movs	r0, #0
 8007060:	b007      	add	sp, #28
 8007062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007064:	2c2b      	cmp	r4, #43	; 0x2b
 8007066:	d1c2      	bne.n	8006fee <_strtol_l.constprop.0+0x3a>
 8007068:	781c      	ldrb	r4, [r3, #0]
 800706a:	1c95      	adds	r5, r2, #2
 800706c:	e7bf      	b.n	8006fee <_strtol_l.constprop.0+0x3a>
 800706e:	0023      	movs	r3, r4
 8007070:	3b61      	subs	r3, #97	; 0x61
 8007072:	2b19      	cmp	r3, #25
 8007074:	d9dd      	bls.n	8007032 <_strtol_l.constprop.0+0x7e>
 8007076:	1c53      	adds	r3, r2, #1
 8007078:	d109      	bne.n	800708e <_strtol_l.constprop.0+0xda>
 800707a:	2322      	movs	r3, #34	; 0x22
 800707c:	9a05      	ldr	r2, [sp, #20]
 800707e:	9803      	ldr	r0, [sp, #12]
 8007080:	6013      	str	r3, [r2, #0]
 8007082:	9b02      	ldr	r3, [sp, #8]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d0eb      	beq.n	8007060 <_strtol_l.constprop.0+0xac>
 8007088:	1e6b      	subs	r3, r5, #1
 800708a:	9301      	str	r3, [sp, #4]
 800708c:	e007      	b.n	800709e <_strtol_l.constprop.0+0xea>
 800708e:	2f00      	cmp	r7, #0
 8007090:	d000      	beq.n	8007094 <_strtol_l.constprop.0+0xe0>
 8007092:	4240      	negs	r0, r0
 8007094:	9b02      	ldr	r3, [sp, #8]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d0e2      	beq.n	8007060 <_strtol_l.constprop.0+0xac>
 800709a:	2a00      	cmp	r2, #0
 800709c:	d1f4      	bne.n	8007088 <_strtol_l.constprop.0+0xd4>
 800709e:	9b02      	ldr	r3, [sp, #8]
 80070a0:	9a01      	ldr	r2, [sp, #4]
 80070a2:	601a      	str	r2, [r3, #0]
 80070a4:	e7dc      	b.n	8007060 <_strtol_l.constprop.0+0xac>
 80070a6:	2430      	movs	r4, #48	; 0x30
 80070a8:	2e00      	cmp	r6, #0
 80070aa:	d1ae      	bne.n	800700a <_strtol_l.constprop.0+0x56>
 80070ac:	3608      	adds	r6, #8
 80070ae:	e7ac      	b.n	800700a <_strtol_l.constprop.0+0x56>
 80070b0:	2c30      	cmp	r4, #48	; 0x30
 80070b2:	d0a2      	beq.n	8006ffa <_strtol_l.constprop.0+0x46>
 80070b4:	260a      	movs	r6, #10
 80070b6:	e7a8      	b.n	800700a <_strtol_l.constprop.0+0x56>
 80070b8:	0800ad21 	.word	0x0800ad21
 80070bc:	7fffffff 	.word	0x7fffffff

080070c0 <_strtol_r>:
 80070c0:	b510      	push	{r4, lr}
 80070c2:	f7ff ff77 	bl	8006fb4 <_strtol_l.constprop.0>
 80070c6:	bd10      	pop	{r4, pc}

080070c8 <strtol>:
 80070c8:	b510      	push	{r4, lr}
 80070ca:	4c04      	ldr	r4, [pc, #16]	; (80070dc <strtol+0x14>)
 80070cc:	0013      	movs	r3, r2
 80070ce:	000a      	movs	r2, r1
 80070d0:	0001      	movs	r1, r0
 80070d2:	6820      	ldr	r0, [r4, #0]
 80070d4:	f7ff ff6e 	bl	8006fb4 <_strtol_l.constprop.0>
 80070d8:	bd10      	pop	{r4, pc}
 80070da:	46c0      	nop			; (mov r8, r8)
 80070dc:	200001dc 	.word	0x200001dc

080070e0 <__cvt>:
 80070e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070e2:	001e      	movs	r6, r3
 80070e4:	2300      	movs	r3, #0
 80070e6:	0014      	movs	r4, r2
 80070e8:	b08b      	sub	sp, #44	; 0x2c
 80070ea:	429e      	cmp	r6, r3
 80070ec:	da04      	bge.n	80070f8 <__cvt+0x18>
 80070ee:	2180      	movs	r1, #128	; 0x80
 80070f0:	0609      	lsls	r1, r1, #24
 80070f2:	1873      	adds	r3, r6, r1
 80070f4:	001e      	movs	r6, r3
 80070f6:	232d      	movs	r3, #45	; 0x2d
 80070f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80070fa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80070fc:	7013      	strb	r3, [r2, #0]
 80070fe:	2320      	movs	r3, #32
 8007100:	2203      	movs	r2, #3
 8007102:	439f      	bics	r7, r3
 8007104:	2f46      	cmp	r7, #70	; 0x46
 8007106:	d007      	beq.n	8007118 <__cvt+0x38>
 8007108:	003b      	movs	r3, r7
 800710a:	3b45      	subs	r3, #69	; 0x45
 800710c:	4259      	negs	r1, r3
 800710e:	414b      	adcs	r3, r1
 8007110:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007112:	3a01      	subs	r2, #1
 8007114:	18cb      	adds	r3, r1, r3
 8007116:	9310      	str	r3, [sp, #64]	; 0x40
 8007118:	ab09      	add	r3, sp, #36	; 0x24
 800711a:	9304      	str	r3, [sp, #16]
 800711c:	ab08      	add	r3, sp, #32
 800711e:	9303      	str	r3, [sp, #12]
 8007120:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007122:	9200      	str	r2, [sp, #0]
 8007124:	9302      	str	r3, [sp, #8]
 8007126:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007128:	0022      	movs	r2, r4
 800712a:	9301      	str	r3, [sp, #4]
 800712c:	0033      	movs	r3, r6
 800712e:	f001 f911 	bl	8008354 <_dtoa_r>
 8007132:	0005      	movs	r5, r0
 8007134:	2f47      	cmp	r7, #71	; 0x47
 8007136:	d102      	bne.n	800713e <__cvt+0x5e>
 8007138:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800713a:	07db      	lsls	r3, r3, #31
 800713c:	d528      	bpl.n	8007190 <__cvt+0xb0>
 800713e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007140:	18eb      	adds	r3, r5, r3
 8007142:	9307      	str	r3, [sp, #28]
 8007144:	2f46      	cmp	r7, #70	; 0x46
 8007146:	d114      	bne.n	8007172 <__cvt+0x92>
 8007148:	782b      	ldrb	r3, [r5, #0]
 800714a:	2b30      	cmp	r3, #48	; 0x30
 800714c:	d10c      	bne.n	8007168 <__cvt+0x88>
 800714e:	2200      	movs	r2, #0
 8007150:	2300      	movs	r3, #0
 8007152:	0020      	movs	r0, r4
 8007154:	0031      	movs	r1, r6
 8007156:	f7f9 f977 	bl	8000448 <__aeabi_dcmpeq>
 800715a:	2800      	cmp	r0, #0
 800715c:	d104      	bne.n	8007168 <__cvt+0x88>
 800715e:	2301      	movs	r3, #1
 8007160:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007162:	1a9b      	subs	r3, r3, r2
 8007164:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007166:	6013      	str	r3, [r2, #0]
 8007168:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800716a:	9a07      	ldr	r2, [sp, #28]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	18d3      	adds	r3, r2, r3
 8007170:	9307      	str	r3, [sp, #28]
 8007172:	2200      	movs	r2, #0
 8007174:	2300      	movs	r3, #0
 8007176:	0020      	movs	r0, r4
 8007178:	0031      	movs	r1, r6
 800717a:	f7f9 f965 	bl	8000448 <__aeabi_dcmpeq>
 800717e:	2800      	cmp	r0, #0
 8007180:	d001      	beq.n	8007186 <__cvt+0xa6>
 8007182:	9b07      	ldr	r3, [sp, #28]
 8007184:	9309      	str	r3, [sp, #36]	; 0x24
 8007186:	2230      	movs	r2, #48	; 0x30
 8007188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800718a:	9907      	ldr	r1, [sp, #28]
 800718c:	428b      	cmp	r3, r1
 800718e:	d306      	bcc.n	800719e <__cvt+0xbe>
 8007190:	0028      	movs	r0, r5
 8007192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007194:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007196:	1b5b      	subs	r3, r3, r5
 8007198:	6013      	str	r3, [r2, #0]
 800719a:	b00b      	add	sp, #44	; 0x2c
 800719c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800719e:	1c59      	adds	r1, r3, #1
 80071a0:	9109      	str	r1, [sp, #36]	; 0x24
 80071a2:	701a      	strb	r2, [r3, #0]
 80071a4:	e7f0      	b.n	8007188 <__cvt+0xa8>

080071a6 <__exponent>:
 80071a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071a8:	1c83      	adds	r3, r0, #2
 80071aa:	b087      	sub	sp, #28
 80071ac:	9303      	str	r3, [sp, #12]
 80071ae:	0005      	movs	r5, r0
 80071b0:	000c      	movs	r4, r1
 80071b2:	232b      	movs	r3, #43	; 0x2b
 80071b4:	7002      	strb	r2, [r0, #0]
 80071b6:	2900      	cmp	r1, #0
 80071b8:	da01      	bge.n	80071be <__exponent+0x18>
 80071ba:	424c      	negs	r4, r1
 80071bc:	3302      	adds	r3, #2
 80071be:	706b      	strb	r3, [r5, #1]
 80071c0:	2c09      	cmp	r4, #9
 80071c2:	dd2f      	ble.n	8007224 <__exponent+0x7e>
 80071c4:	270a      	movs	r7, #10
 80071c6:	ab04      	add	r3, sp, #16
 80071c8:	1dde      	adds	r6, r3, #7
 80071ca:	0020      	movs	r0, r4
 80071cc:	0039      	movs	r1, r7
 80071ce:	9601      	str	r6, [sp, #4]
 80071d0:	f7f9 f924 	bl	800041c <__aeabi_idivmod>
 80071d4:	3e01      	subs	r6, #1
 80071d6:	3130      	adds	r1, #48	; 0x30
 80071d8:	0020      	movs	r0, r4
 80071da:	7031      	strb	r1, [r6, #0]
 80071dc:	0039      	movs	r1, r7
 80071de:	9402      	str	r4, [sp, #8]
 80071e0:	f7f9 f836 	bl	8000250 <__divsi3>
 80071e4:	9b02      	ldr	r3, [sp, #8]
 80071e6:	0004      	movs	r4, r0
 80071e8:	2b63      	cmp	r3, #99	; 0x63
 80071ea:	dcee      	bgt.n	80071ca <__exponent+0x24>
 80071ec:	9b01      	ldr	r3, [sp, #4]
 80071ee:	3430      	adds	r4, #48	; 0x30
 80071f0:	1e9a      	subs	r2, r3, #2
 80071f2:	0013      	movs	r3, r2
 80071f4:	9903      	ldr	r1, [sp, #12]
 80071f6:	7014      	strb	r4, [r2, #0]
 80071f8:	a804      	add	r0, sp, #16
 80071fa:	3007      	adds	r0, #7
 80071fc:	4298      	cmp	r0, r3
 80071fe:	d80c      	bhi.n	800721a <__exponent+0x74>
 8007200:	2300      	movs	r3, #0
 8007202:	4282      	cmp	r2, r0
 8007204:	d804      	bhi.n	8007210 <__exponent+0x6a>
 8007206:	aa04      	add	r2, sp, #16
 8007208:	3309      	adds	r3, #9
 800720a:	189b      	adds	r3, r3, r2
 800720c:	9a01      	ldr	r2, [sp, #4]
 800720e:	1a9b      	subs	r3, r3, r2
 8007210:	9a03      	ldr	r2, [sp, #12]
 8007212:	18d3      	adds	r3, r2, r3
 8007214:	1b58      	subs	r0, r3, r5
 8007216:	b007      	add	sp, #28
 8007218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800721a:	7818      	ldrb	r0, [r3, #0]
 800721c:	3301      	adds	r3, #1
 800721e:	7008      	strb	r0, [r1, #0]
 8007220:	3101      	adds	r1, #1
 8007222:	e7e9      	b.n	80071f8 <__exponent+0x52>
 8007224:	2330      	movs	r3, #48	; 0x30
 8007226:	3430      	adds	r4, #48	; 0x30
 8007228:	70ab      	strb	r3, [r5, #2]
 800722a:	70ec      	strb	r4, [r5, #3]
 800722c:	1d2b      	adds	r3, r5, #4
 800722e:	e7f1      	b.n	8007214 <__exponent+0x6e>

08007230 <_printf_float>:
 8007230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007232:	b095      	sub	sp, #84	; 0x54
 8007234:	000c      	movs	r4, r1
 8007236:	9208      	str	r2, [sp, #32]
 8007238:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800723a:	9309      	str	r3, [sp, #36]	; 0x24
 800723c:	0007      	movs	r7, r0
 800723e:	f000 ff49 	bl	80080d4 <_localeconv_r>
 8007242:	6803      	ldr	r3, [r0, #0]
 8007244:	0018      	movs	r0, r3
 8007246:	930c      	str	r3, [sp, #48]	; 0x30
 8007248:	f7f8 ff5c 	bl	8000104 <strlen>
 800724c:	2300      	movs	r3, #0
 800724e:	9312      	str	r3, [sp, #72]	; 0x48
 8007250:	7e23      	ldrb	r3, [r4, #24]
 8007252:	2207      	movs	r2, #7
 8007254:	930a      	str	r3, [sp, #40]	; 0x28
 8007256:	6823      	ldr	r3, [r4, #0]
 8007258:	900d      	str	r0, [sp, #52]	; 0x34
 800725a:	930b      	str	r3, [sp, #44]	; 0x2c
 800725c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800725e:	682b      	ldr	r3, [r5, #0]
 8007260:	05c9      	lsls	r1, r1, #23
 8007262:	d547      	bpl.n	80072f4 <_printf_float+0xc4>
 8007264:	189b      	adds	r3, r3, r2
 8007266:	4393      	bics	r3, r2
 8007268:	001a      	movs	r2, r3
 800726a:	3208      	adds	r2, #8
 800726c:	602a      	str	r2, [r5, #0]
 800726e:	681e      	ldr	r6, [r3, #0]
 8007270:	685d      	ldr	r5, [r3, #4]
 8007272:	0032      	movs	r2, r6
 8007274:	002b      	movs	r3, r5
 8007276:	64a2      	str	r2, [r4, #72]	; 0x48
 8007278:	64e3      	str	r3, [r4, #76]	; 0x4c
 800727a:	2201      	movs	r2, #1
 800727c:	006b      	lsls	r3, r5, #1
 800727e:	085b      	lsrs	r3, r3, #1
 8007280:	930e      	str	r3, [sp, #56]	; 0x38
 8007282:	0030      	movs	r0, r6
 8007284:	4bab      	ldr	r3, [pc, #684]	; (8007534 <_printf_float+0x304>)
 8007286:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007288:	4252      	negs	r2, r2
 800728a:	f7fb f805 	bl	8002298 <__aeabi_dcmpun>
 800728e:	2800      	cmp	r0, #0
 8007290:	d132      	bne.n	80072f8 <_printf_float+0xc8>
 8007292:	2201      	movs	r2, #1
 8007294:	0030      	movs	r0, r6
 8007296:	4ba7      	ldr	r3, [pc, #668]	; (8007534 <_printf_float+0x304>)
 8007298:	990e      	ldr	r1, [sp, #56]	; 0x38
 800729a:	4252      	negs	r2, r2
 800729c:	f7f9 f8e4 	bl	8000468 <__aeabi_dcmple>
 80072a0:	2800      	cmp	r0, #0
 80072a2:	d129      	bne.n	80072f8 <_printf_float+0xc8>
 80072a4:	2200      	movs	r2, #0
 80072a6:	2300      	movs	r3, #0
 80072a8:	0030      	movs	r0, r6
 80072aa:	0029      	movs	r1, r5
 80072ac:	f7f9 f8d2 	bl	8000454 <__aeabi_dcmplt>
 80072b0:	2800      	cmp	r0, #0
 80072b2:	d003      	beq.n	80072bc <_printf_float+0x8c>
 80072b4:	0023      	movs	r3, r4
 80072b6:	222d      	movs	r2, #45	; 0x2d
 80072b8:	3343      	adds	r3, #67	; 0x43
 80072ba:	701a      	strb	r2, [r3, #0]
 80072bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072be:	4d9e      	ldr	r5, [pc, #632]	; (8007538 <_printf_float+0x308>)
 80072c0:	2b47      	cmp	r3, #71	; 0x47
 80072c2:	d900      	bls.n	80072c6 <_printf_float+0x96>
 80072c4:	4d9d      	ldr	r5, [pc, #628]	; (800753c <_printf_float+0x30c>)
 80072c6:	2303      	movs	r3, #3
 80072c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80072ca:	6123      	str	r3, [r4, #16]
 80072cc:	3301      	adds	r3, #1
 80072ce:	439a      	bics	r2, r3
 80072d0:	2300      	movs	r3, #0
 80072d2:	6022      	str	r2, [r4, #0]
 80072d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80072d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072d8:	0021      	movs	r1, r4
 80072da:	9300      	str	r3, [sp, #0]
 80072dc:	0038      	movs	r0, r7
 80072de:	9b08      	ldr	r3, [sp, #32]
 80072e0:	aa13      	add	r2, sp, #76	; 0x4c
 80072e2:	f000 f9fb 	bl	80076dc <_printf_common>
 80072e6:	3001      	adds	r0, #1
 80072e8:	d000      	beq.n	80072ec <_printf_float+0xbc>
 80072ea:	e0a3      	b.n	8007434 <_printf_float+0x204>
 80072ec:	2001      	movs	r0, #1
 80072ee:	4240      	negs	r0, r0
 80072f0:	b015      	add	sp, #84	; 0x54
 80072f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072f4:	3307      	adds	r3, #7
 80072f6:	e7b6      	b.n	8007266 <_printf_float+0x36>
 80072f8:	0032      	movs	r2, r6
 80072fa:	002b      	movs	r3, r5
 80072fc:	0030      	movs	r0, r6
 80072fe:	0029      	movs	r1, r5
 8007300:	f7fa ffca 	bl	8002298 <__aeabi_dcmpun>
 8007304:	2800      	cmp	r0, #0
 8007306:	d00b      	beq.n	8007320 <_printf_float+0xf0>
 8007308:	2d00      	cmp	r5, #0
 800730a:	da03      	bge.n	8007314 <_printf_float+0xe4>
 800730c:	0023      	movs	r3, r4
 800730e:	222d      	movs	r2, #45	; 0x2d
 8007310:	3343      	adds	r3, #67	; 0x43
 8007312:	701a      	strb	r2, [r3, #0]
 8007314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007316:	4d8a      	ldr	r5, [pc, #552]	; (8007540 <_printf_float+0x310>)
 8007318:	2b47      	cmp	r3, #71	; 0x47
 800731a:	d9d4      	bls.n	80072c6 <_printf_float+0x96>
 800731c:	4d89      	ldr	r5, [pc, #548]	; (8007544 <_printf_float+0x314>)
 800731e:	e7d2      	b.n	80072c6 <_printf_float+0x96>
 8007320:	2220      	movs	r2, #32
 8007322:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007324:	6863      	ldr	r3, [r4, #4]
 8007326:	4391      	bics	r1, r2
 8007328:	910e      	str	r1, [sp, #56]	; 0x38
 800732a:	1c5a      	adds	r2, r3, #1
 800732c:	d14a      	bne.n	80073c4 <_printf_float+0x194>
 800732e:	3307      	adds	r3, #7
 8007330:	6063      	str	r3, [r4, #4]
 8007332:	2380      	movs	r3, #128	; 0x80
 8007334:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007336:	00db      	lsls	r3, r3, #3
 8007338:	4313      	orrs	r3, r2
 800733a:	2200      	movs	r2, #0
 800733c:	9206      	str	r2, [sp, #24]
 800733e:	aa12      	add	r2, sp, #72	; 0x48
 8007340:	9205      	str	r2, [sp, #20]
 8007342:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007344:	6023      	str	r3, [r4, #0]
 8007346:	9204      	str	r2, [sp, #16]
 8007348:	aa11      	add	r2, sp, #68	; 0x44
 800734a:	9203      	str	r2, [sp, #12]
 800734c:	2223      	movs	r2, #35	; 0x23
 800734e:	a908      	add	r1, sp, #32
 8007350:	9301      	str	r3, [sp, #4]
 8007352:	6863      	ldr	r3, [r4, #4]
 8007354:	1852      	adds	r2, r2, r1
 8007356:	9202      	str	r2, [sp, #8]
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	0032      	movs	r2, r6
 800735c:	002b      	movs	r3, r5
 800735e:	0038      	movs	r0, r7
 8007360:	f7ff febe 	bl	80070e0 <__cvt>
 8007364:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007366:	0005      	movs	r5, r0
 8007368:	2b47      	cmp	r3, #71	; 0x47
 800736a:	d109      	bne.n	8007380 <_printf_float+0x150>
 800736c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800736e:	1cda      	adds	r2, r3, #3
 8007370:	db02      	blt.n	8007378 <_printf_float+0x148>
 8007372:	6862      	ldr	r2, [r4, #4]
 8007374:	4293      	cmp	r3, r2
 8007376:	dd49      	ble.n	800740c <_printf_float+0x1dc>
 8007378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800737a:	3b02      	subs	r3, #2
 800737c:	b2db      	uxtb	r3, r3
 800737e:	930a      	str	r3, [sp, #40]	; 0x28
 8007380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007382:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007384:	2b65      	cmp	r3, #101	; 0x65
 8007386:	d824      	bhi.n	80073d2 <_printf_float+0x1a2>
 8007388:	0020      	movs	r0, r4
 800738a:	001a      	movs	r2, r3
 800738c:	3901      	subs	r1, #1
 800738e:	3050      	adds	r0, #80	; 0x50
 8007390:	9111      	str	r1, [sp, #68]	; 0x44
 8007392:	f7ff ff08 	bl	80071a6 <__exponent>
 8007396:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007398:	900b      	str	r0, [sp, #44]	; 0x2c
 800739a:	1813      	adds	r3, r2, r0
 800739c:	6123      	str	r3, [r4, #16]
 800739e:	2a01      	cmp	r2, #1
 80073a0:	dc02      	bgt.n	80073a8 <_printf_float+0x178>
 80073a2:	6822      	ldr	r2, [r4, #0]
 80073a4:	07d2      	lsls	r2, r2, #31
 80073a6:	d501      	bpl.n	80073ac <_printf_float+0x17c>
 80073a8:	3301      	adds	r3, #1
 80073aa:	6123      	str	r3, [r4, #16]
 80073ac:	2323      	movs	r3, #35	; 0x23
 80073ae:	aa08      	add	r2, sp, #32
 80073b0:	189b      	adds	r3, r3, r2
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d100      	bne.n	80073ba <_printf_float+0x18a>
 80073b8:	e78d      	b.n	80072d6 <_printf_float+0xa6>
 80073ba:	0023      	movs	r3, r4
 80073bc:	222d      	movs	r2, #45	; 0x2d
 80073be:	3343      	adds	r3, #67	; 0x43
 80073c0:	701a      	strb	r2, [r3, #0]
 80073c2:	e788      	b.n	80072d6 <_printf_float+0xa6>
 80073c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073c6:	2a47      	cmp	r2, #71	; 0x47
 80073c8:	d1b3      	bne.n	8007332 <_printf_float+0x102>
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1b1      	bne.n	8007332 <_printf_float+0x102>
 80073ce:	3301      	adds	r3, #1
 80073d0:	e7ae      	b.n	8007330 <_printf_float+0x100>
 80073d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073d4:	2b66      	cmp	r3, #102	; 0x66
 80073d6:	d11b      	bne.n	8007410 <_printf_float+0x1e0>
 80073d8:	6863      	ldr	r3, [r4, #4]
 80073da:	2900      	cmp	r1, #0
 80073dc:	dd09      	ble.n	80073f2 <_printf_float+0x1c2>
 80073de:	6121      	str	r1, [r4, #16]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d102      	bne.n	80073ea <_printf_float+0x1ba>
 80073e4:	6822      	ldr	r2, [r4, #0]
 80073e6:	07d2      	lsls	r2, r2, #31
 80073e8:	d50b      	bpl.n	8007402 <_printf_float+0x1d2>
 80073ea:	3301      	adds	r3, #1
 80073ec:	185b      	adds	r3, r3, r1
 80073ee:	6123      	str	r3, [r4, #16]
 80073f0:	e007      	b.n	8007402 <_printf_float+0x1d2>
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d103      	bne.n	80073fe <_printf_float+0x1ce>
 80073f6:	2201      	movs	r2, #1
 80073f8:	6821      	ldr	r1, [r4, #0]
 80073fa:	4211      	tst	r1, r2
 80073fc:	d000      	beq.n	8007400 <_printf_float+0x1d0>
 80073fe:	1c9a      	adds	r2, r3, #2
 8007400:	6122      	str	r2, [r4, #16]
 8007402:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007404:	65a3      	str	r3, [r4, #88]	; 0x58
 8007406:	2300      	movs	r3, #0
 8007408:	930b      	str	r3, [sp, #44]	; 0x2c
 800740a:	e7cf      	b.n	80073ac <_printf_float+0x17c>
 800740c:	2367      	movs	r3, #103	; 0x67
 800740e:	930a      	str	r3, [sp, #40]	; 0x28
 8007410:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007412:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007414:	4299      	cmp	r1, r3
 8007416:	db06      	blt.n	8007426 <_printf_float+0x1f6>
 8007418:	6823      	ldr	r3, [r4, #0]
 800741a:	6121      	str	r1, [r4, #16]
 800741c:	07db      	lsls	r3, r3, #31
 800741e:	d5f0      	bpl.n	8007402 <_printf_float+0x1d2>
 8007420:	3101      	adds	r1, #1
 8007422:	6121      	str	r1, [r4, #16]
 8007424:	e7ed      	b.n	8007402 <_printf_float+0x1d2>
 8007426:	2201      	movs	r2, #1
 8007428:	2900      	cmp	r1, #0
 800742a:	dc01      	bgt.n	8007430 <_printf_float+0x200>
 800742c:	1892      	adds	r2, r2, r2
 800742e:	1a52      	subs	r2, r2, r1
 8007430:	189b      	adds	r3, r3, r2
 8007432:	e7dc      	b.n	80073ee <_printf_float+0x1be>
 8007434:	6822      	ldr	r2, [r4, #0]
 8007436:	0553      	lsls	r3, r2, #21
 8007438:	d408      	bmi.n	800744c <_printf_float+0x21c>
 800743a:	6923      	ldr	r3, [r4, #16]
 800743c:	002a      	movs	r2, r5
 800743e:	0038      	movs	r0, r7
 8007440:	9908      	ldr	r1, [sp, #32]
 8007442:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007444:	47a8      	blx	r5
 8007446:	3001      	adds	r0, #1
 8007448:	d12a      	bne.n	80074a0 <_printf_float+0x270>
 800744a:	e74f      	b.n	80072ec <_printf_float+0xbc>
 800744c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800744e:	2b65      	cmp	r3, #101	; 0x65
 8007450:	d800      	bhi.n	8007454 <_printf_float+0x224>
 8007452:	e0ec      	b.n	800762e <_printf_float+0x3fe>
 8007454:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007456:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007458:	2200      	movs	r2, #0
 800745a:	2300      	movs	r3, #0
 800745c:	f7f8 fff4 	bl	8000448 <__aeabi_dcmpeq>
 8007460:	2800      	cmp	r0, #0
 8007462:	d034      	beq.n	80074ce <_printf_float+0x29e>
 8007464:	2301      	movs	r3, #1
 8007466:	0038      	movs	r0, r7
 8007468:	4a37      	ldr	r2, [pc, #220]	; (8007548 <_printf_float+0x318>)
 800746a:	9908      	ldr	r1, [sp, #32]
 800746c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800746e:	47a8      	blx	r5
 8007470:	3001      	adds	r0, #1
 8007472:	d100      	bne.n	8007476 <_printf_float+0x246>
 8007474:	e73a      	b.n	80072ec <_printf_float+0xbc>
 8007476:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007478:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800747a:	429a      	cmp	r2, r3
 800747c:	db02      	blt.n	8007484 <_printf_float+0x254>
 800747e:	6823      	ldr	r3, [r4, #0]
 8007480:	07db      	lsls	r3, r3, #31
 8007482:	d50d      	bpl.n	80074a0 <_printf_float+0x270>
 8007484:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007486:	0038      	movs	r0, r7
 8007488:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800748a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800748c:	9908      	ldr	r1, [sp, #32]
 800748e:	47a8      	blx	r5
 8007490:	2500      	movs	r5, #0
 8007492:	3001      	adds	r0, #1
 8007494:	d100      	bne.n	8007498 <_printf_float+0x268>
 8007496:	e729      	b.n	80072ec <_printf_float+0xbc>
 8007498:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800749a:	3b01      	subs	r3, #1
 800749c:	42ab      	cmp	r3, r5
 800749e:	dc0a      	bgt.n	80074b6 <_printf_float+0x286>
 80074a0:	6823      	ldr	r3, [r4, #0]
 80074a2:	079b      	lsls	r3, r3, #30
 80074a4:	d500      	bpl.n	80074a8 <_printf_float+0x278>
 80074a6:	e116      	b.n	80076d6 <_printf_float+0x4a6>
 80074a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80074aa:	68e0      	ldr	r0, [r4, #12]
 80074ac:	4298      	cmp	r0, r3
 80074ae:	db00      	blt.n	80074b2 <_printf_float+0x282>
 80074b0:	e71e      	b.n	80072f0 <_printf_float+0xc0>
 80074b2:	0018      	movs	r0, r3
 80074b4:	e71c      	b.n	80072f0 <_printf_float+0xc0>
 80074b6:	0022      	movs	r2, r4
 80074b8:	2301      	movs	r3, #1
 80074ba:	0038      	movs	r0, r7
 80074bc:	9908      	ldr	r1, [sp, #32]
 80074be:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80074c0:	321a      	adds	r2, #26
 80074c2:	47b0      	blx	r6
 80074c4:	3001      	adds	r0, #1
 80074c6:	d100      	bne.n	80074ca <_printf_float+0x29a>
 80074c8:	e710      	b.n	80072ec <_printf_float+0xbc>
 80074ca:	3501      	adds	r5, #1
 80074cc:	e7e4      	b.n	8007498 <_printf_float+0x268>
 80074ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	dc3b      	bgt.n	800754c <_printf_float+0x31c>
 80074d4:	2301      	movs	r3, #1
 80074d6:	0038      	movs	r0, r7
 80074d8:	4a1b      	ldr	r2, [pc, #108]	; (8007548 <_printf_float+0x318>)
 80074da:	9908      	ldr	r1, [sp, #32]
 80074dc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80074de:	47b0      	blx	r6
 80074e0:	3001      	adds	r0, #1
 80074e2:	d100      	bne.n	80074e6 <_printf_float+0x2b6>
 80074e4:	e702      	b.n	80072ec <_printf_float+0xbc>
 80074e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80074e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80074ea:	4313      	orrs	r3, r2
 80074ec:	d102      	bne.n	80074f4 <_printf_float+0x2c4>
 80074ee:	6823      	ldr	r3, [r4, #0]
 80074f0:	07db      	lsls	r3, r3, #31
 80074f2:	d5d5      	bpl.n	80074a0 <_printf_float+0x270>
 80074f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074f6:	0038      	movs	r0, r7
 80074f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074fa:	9908      	ldr	r1, [sp, #32]
 80074fc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80074fe:	47b0      	blx	r6
 8007500:	2300      	movs	r3, #0
 8007502:	3001      	adds	r0, #1
 8007504:	d100      	bne.n	8007508 <_printf_float+0x2d8>
 8007506:	e6f1      	b.n	80072ec <_printf_float+0xbc>
 8007508:	930a      	str	r3, [sp, #40]	; 0x28
 800750a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800750c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800750e:	425b      	negs	r3, r3
 8007510:	4293      	cmp	r3, r2
 8007512:	dc01      	bgt.n	8007518 <_printf_float+0x2e8>
 8007514:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007516:	e791      	b.n	800743c <_printf_float+0x20c>
 8007518:	0022      	movs	r2, r4
 800751a:	2301      	movs	r3, #1
 800751c:	0038      	movs	r0, r7
 800751e:	9908      	ldr	r1, [sp, #32]
 8007520:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007522:	321a      	adds	r2, #26
 8007524:	47b0      	blx	r6
 8007526:	3001      	adds	r0, #1
 8007528:	d100      	bne.n	800752c <_printf_float+0x2fc>
 800752a:	e6df      	b.n	80072ec <_printf_float+0xbc>
 800752c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800752e:	3301      	adds	r3, #1
 8007530:	e7ea      	b.n	8007508 <_printf_float+0x2d8>
 8007532:	46c0      	nop			; (mov r8, r8)
 8007534:	7fefffff 	.word	0x7fefffff
 8007538:	0800ae21 	.word	0x0800ae21
 800753c:	0800ae25 	.word	0x0800ae25
 8007540:	0800ae29 	.word	0x0800ae29
 8007544:	0800ae2d 	.word	0x0800ae2d
 8007548:	0800ae31 	.word	0x0800ae31
 800754c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800754e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007550:	920a      	str	r2, [sp, #40]	; 0x28
 8007552:	429a      	cmp	r2, r3
 8007554:	dd00      	ble.n	8007558 <_printf_float+0x328>
 8007556:	930a      	str	r3, [sp, #40]	; 0x28
 8007558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800755a:	2b00      	cmp	r3, #0
 800755c:	dc3d      	bgt.n	80075da <_printf_float+0x3aa>
 800755e:	2300      	movs	r3, #0
 8007560:	930e      	str	r3, [sp, #56]	; 0x38
 8007562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007564:	43db      	mvns	r3, r3
 8007566:	17db      	asrs	r3, r3, #31
 8007568:	930f      	str	r3, [sp, #60]	; 0x3c
 800756a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800756c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800756e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007570:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007572:	4013      	ands	r3, r2
 8007574:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800757a:	4293      	cmp	r3, r2
 800757c:	dc36      	bgt.n	80075ec <_printf_float+0x3bc>
 800757e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007580:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007582:	429a      	cmp	r2, r3
 8007584:	db40      	blt.n	8007608 <_printf_float+0x3d8>
 8007586:	6823      	ldr	r3, [r4, #0]
 8007588:	07db      	lsls	r3, r3, #31
 800758a:	d43d      	bmi.n	8007608 <_printf_float+0x3d8>
 800758c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800758e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007590:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007592:	1af3      	subs	r3, r6, r3
 8007594:	1ab6      	subs	r6, r6, r2
 8007596:	429e      	cmp	r6, r3
 8007598:	dd00      	ble.n	800759c <_printf_float+0x36c>
 800759a:	001e      	movs	r6, r3
 800759c:	2e00      	cmp	r6, #0
 800759e:	dc3c      	bgt.n	800761a <_printf_float+0x3ea>
 80075a0:	2300      	movs	r3, #0
 80075a2:	930a      	str	r3, [sp, #40]	; 0x28
 80075a4:	43f3      	mvns	r3, r6
 80075a6:	17db      	asrs	r3, r3, #31
 80075a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80075aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80075ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80075ae:	1a9b      	subs	r3, r3, r2
 80075b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80075b2:	4032      	ands	r2, r6
 80075b4:	1a9b      	subs	r3, r3, r2
 80075b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075b8:	4293      	cmp	r3, r2
 80075ba:	dc00      	bgt.n	80075be <_printf_float+0x38e>
 80075bc:	e770      	b.n	80074a0 <_printf_float+0x270>
 80075be:	0022      	movs	r2, r4
 80075c0:	2301      	movs	r3, #1
 80075c2:	0038      	movs	r0, r7
 80075c4:	9908      	ldr	r1, [sp, #32]
 80075c6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80075c8:	321a      	adds	r2, #26
 80075ca:	47a8      	blx	r5
 80075cc:	3001      	adds	r0, #1
 80075ce:	d100      	bne.n	80075d2 <_printf_float+0x3a2>
 80075d0:	e68c      	b.n	80072ec <_printf_float+0xbc>
 80075d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075d4:	3301      	adds	r3, #1
 80075d6:	930a      	str	r3, [sp, #40]	; 0x28
 80075d8:	e7e7      	b.n	80075aa <_printf_float+0x37a>
 80075da:	002a      	movs	r2, r5
 80075dc:	0038      	movs	r0, r7
 80075de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075e0:	9908      	ldr	r1, [sp, #32]
 80075e2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80075e4:	47b0      	blx	r6
 80075e6:	3001      	adds	r0, #1
 80075e8:	d1b9      	bne.n	800755e <_printf_float+0x32e>
 80075ea:	e67f      	b.n	80072ec <_printf_float+0xbc>
 80075ec:	0022      	movs	r2, r4
 80075ee:	2301      	movs	r3, #1
 80075f0:	0038      	movs	r0, r7
 80075f2:	9908      	ldr	r1, [sp, #32]
 80075f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80075f6:	321a      	adds	r2, #26
 80075f8:	47b0      	blx	r6
 80075fa:	3001      	adds	r0, #1
 80075fc:	d100      	bne.n	8007600 <_printf_float+0x3d0>
 80075fe:	e675      	b.n	80072ec <_printf_float+0xbc>
 8007600:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007602:	3301      	adds	r3, #1
 8007604:	930e      	str	r3, [sp, #56]	; 0x38
 8007606:	e7b0      	b.n	800756a <_printf_float+0x33a>
 8007608:	0038      	movs	r0, r7
 800760a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800760c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800760e:	9908      	ldr	r1, [sp, #32]
 8007610:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007612:	47b0      	blx	r6
 8007614:	3001      	adds	r0, #1
 8007616:	d1b9      	bne.n	800758c <_printf_float+0x35c>
 8007618:	e668      	b.n	80072ec <_printf_float+0xbc>
 800761a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800761c:	0038      	movs	r0, r7
 800761e:	18ea      	adds	r2, r5, r3
 8007620:	9908      	ldr	r1, [sp, #32]
 8007622:	0033      	movs	r3, r6
 8007624:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007626:	47a8      	blx	r5
 8007628:	3001      	adds	r0, #1
 800762a:	d1b9      	bne.n	80075a0 <_printf_float+0x370>
 800762c:	e65e      	b.n	80072ec <_printf_float+0xbc>
 800762e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007630:	2b01      	cmp	r3, #1
 8007632:	dc02      	bgt.n	800763a <_printf_float+0x40a>
 8007634:	2301      	movs	r3, #1
 8007636:	421a      	tst	r2, r3
 8007638:	d03a      	beq.n	80076b0 <_printf_float+0x480>
 800763a:	2301      	movs	r3, #1
 800763c:	002a      	movs	r2, r5
 800763e:	0038      	movs	r0, r7
 8007640:	9908      	ldr	r1, [sp, #32]
 8007642:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007644:	47b0      	blx	r6
 8007646:	3001      	adds	r0, #1
 8007648:	d100      	bne.n	800764c <_printf_float+0x41c>
 800764a:	e64f      	b.n	80072ec <_printf_float+0xbc>
 800764c:	0038      	movs	r0, r7
 800764e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007650:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007652:	9908      	ldr	r1, [sp, #32]
 8007654:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007656:	47b0      	blx	r6
 8007658:	3001      	adds	r0, #1
 800765a:	d100      	bne.n	800765e <_printf_float+0x42e>
 800765c:	e646      	b.n	80072ec <_printf_float+0xbc>
 800765e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007660:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007662:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007664:	2200      	movs	r2, #0
 8007666:	001e      	movs	r6, r3
 8007668:	2300      	movs	r3, #0
 800766a:	f7f8 feed 	bl	8000448 <__aeabi_dcmpeq>
 800766e:	2800      	cmp	r0, #0
 8007670:	d11c      	bne.n	80076ac <_printf_float+0x47c>
 8007672:	0033      	movs	r3, r6
 8007674:	1c6a      	adds	r2, r5, #1
 8007676:	3b01      	subs	r3, #1
 8007678:	0038      	movs	r0, r7
 800767a:	9908      	ldr	r1, [sp, #32]
 800767c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800767e:	47a8      	blx	r5
 8007680:	3001      	adds	r0, #1
 8007682:	d10f      	bne.n	80076a4 <_printf_float+0x474>
 8007684:	e632      	b.n	80072ec <_printf_float+0xbc>
 8007686:	0022      	movs	r2, r4
 8007688:	2301      	movs	r3, #1
 800768a:	0038      	movs	r0, r7
 800768c:	9908      	ldr	r1, [sp, #32]
 800768e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007690:	321a      	adds	r2, #26
 8007692:	47b0      	blx	r6
 8007694:	3001      	adds	r0, #1
 8007696:	d100      	bne.n	800769a <_printf_float+0x46a>
 8007698:	e628      	b.n	80072ec <_printf_float+0xbc>
 800769a:	3501      	adds	r5, #1
 800769c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800769e:	3b01      	subs	r3, #1
 80076a0:	42ab      	cmp	r3, r5
 80076a2:	dcf0      	bgt.n	8007686 <_printf_float+0x456>
 80076a4:	0022      	movs	r2, r4
 80076a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076a8:	3250      	adds	r2, #80	; 0x50
 80076aa:	e6c8      	b.n	800743e <_printf_float+0x20e>
 80076ac:	2500      	movs	r5, #0
 80076ae:	e7f5      	b.n	800769c <_printf_float+0x46c>
 80076b0:	002a      	movs	r2, r5
 80076b2:	e7e1      	b.n	8007678 <_printf_float+0x448>
 80076b4:	0022      	movs	r2, r4
 80076b6:	2301      	movs	r3, #1
 80076b8:	0038      	movs	r0, r7
 80076ba:	9908      	ldr	r1, [sp, #32]
 80076bc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80076be:	3219      	adds	r2, #25
 80076c0:	47b0      	blx	r6
 80076c2:	3001      	adds	r0, #1
 80076c4:	d100      	bne.n	80076c8 <_printf_float+0x498>
 80076c6:	e611      	b.n	80072ec <_printf_float+0xbc>
 80076c8:	3501      	adds	r5, #1
 80076ca:	68e3      	ldr	r3, [r4, #12]
 80076cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80076ce:	1a9b      	subs	r3, r3, r2
 80076d0:	42ab      	cmp	r3, r5
 80076d2:	dcef      	bgt.n	80076b4 <_printf_float+0x484>
 80076d4:	e6e8      	b.n	80074a8 <_printf_float+0x278>
 80076d6:	2500      	movs	r5, #0
 80076d8:	e7f7      	b.n	80076ca <_printf_float+0x49a>
 80076da:	46c0      	nop			; (mov r8, r8)

080076dc <_printf_common>:
 80076dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076de:	0016      	movs	r6, r2
 80076e0:	9301      	str	r3, [sp, #4]
 80076e2:	688a      	ldr	r2, [r1, #8]
 80076e4:	690b      	ldr	r3, [r1, #16]
 80076e6:	000c      	movs	r4, r1
 80076e8:	9000      	str	r0, [sp, #0]
 80076ea:	4293      	cmp	r3, r2
 80076ec:	da00      	bge.n	80076f0 <_printf_common+0x14>
 80076ee:	0013      	movs	r3, r2
 80076f0:	0022      	movs	r2, r4
 80076f2:	6033      	str	r3, [r6, #0]
 80076f4:	3243      	adds	r2, #67	; 0x43
 80076f6:	7812      	ldrb	r2, [r2, #0]
 80076f8:	2a00      	cmp	r2, #0
 80076fa:	d001      	beq.n	8007700 <_printf_common+0x24>
 80076fc:	3301      	adds	r3, #1
 80076fe:	6033      	str	r3, [r6, #0]
 8007700:	6823      	ldr	r3, [r4, #0]
 8007702:	069b      	lsls	r3, r3, #26
 8007704:	d502      	bpl.n	800770c <_printf_common+0x30>
 8007706:	6833      	ldr	r3, [r6, #0]
 8007708:	3302      	adds	r3, #2
 800770a:	6033      	str	r3, [r6, #0]
 800770c:	6822      	ldr	r2, [r4, #0]
 800770e:	2306      	movs	r3, #6
 8007710:	0015      	movs	r5, r2
 8007712:	401d      	ands	r5, r3
 8007714:	421a      	tst	r2, r3
 8007716:	d027      	beq.n	8007768 <_printf_common+0x8c>
 8007718:	0023      	movs	r3, r4
 800771a:	3343      	adds	r3, #67	; 0x43
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	1e5a      	subs	r2, r3, #1
 8007720:	4193      	sbcs	r3, r2
 8007722:	6822      	ldr	r2, [r4, #0]
 8007724:	0692      	lsls	r2, r2, #26
 8007726:	d430      	bmi.n	800778a <_printf_common+0xae>
 8007728:	0022      	movs	r2, r4
 800772a:	9901      	ldr	r1, [sp, #4]
 800772c:	9800      	ldr	r0, [sp, #0]
 800772e:	9d08      	ldr	r5, [sp, #32]
 8007730:	3243      	adds	r2, #67	; 0x43
 8007732:	47a8      	blx	r5
 8007734:	3001      	adds	r0, #1
 8007736:	d025      	beq.n	8007784 <_printf_common+0xa8>
 8007738:	2206      	movs	r2, #6
 800773a:	6823      	ldr	r3, [r4, #0]
 800773c:	2500      	movs	r5, #0
 800773e:	4013      	ands	r3, r2
 8007740:	2b04      	cmp	r3, #4
 8007742:	d105      	bne.n	8007750 <_printf_common+0x74>
 8007744:	6833      	ldr	r3, [r6, #0]
 8007746:	68e5      	ldr	r5, [r4, #12]
 8007748:	1aed      	subs	r5, r5, r3
 800774a:	43eb      	mvns	r3, r5
 800774c:	17db      	asrs	r3, r3, #31
 800774e:	401d      	ands	r5, r3
 8007750:	68a3      	ldr	r3, [r4, #8]
 8007752:	6922      	ldr	r2, [r4, #16]
 8007754:	4293      	cmp	r3, r2
 8007756:	dd01      	ble.n	800775c <_printf_common+0x80>
 8007758:	1a9b      	subs	r3, r3, r2
 800775a:	18ed      	adds	r5, r5, r3
 800775c:	2600      	movs	r6, #0
 800775e:	42b5      	cmp	r5, r6
 8007760:	d120      	bne.n	80077a4 <_printf_common+0xc8>
 8007762:	2000      	movs	r0, #0
 8007764:	e010      	b.n	8007788 <_printf_common+0xac>
 8007766:	3501      	adds	r5, #1
 8007768:	68e3      	ldr	r3, [r4, #12]
 800776a:	6832      	ldr	r2, [r6, #0]
 800776c:	1a9b      	subs	r3, r3, r2
 800776e:	42ab      	cmp	r3, r5
 8007770:	ddd2      	ble.n	8007718 <_printf_common+0x3c>
 8007772:	0022      	movs	r2, r4
 8007774:	2301      	movs	r3, #1
 8007776:	9901      	ldr	r1, [sp, #4]
 8007778:	9800      	ldr	r0, [sp, #0]
 800777a:	9f08      	ldr	r7, [sp, #32]
 800777c:	3219      	adds	r2, #25
 800777e:	47b8      	blx	r7
 8007780:	3001      	adds	r0, #1
 8007782:	d1f0      	bne.n	8007766 <_printf_common+0x8a>
 8007784:	2001      	movs	r0, #1
 8007786:	4240      	negs	r0, r0
 8007788:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800778a:	2030      	movs	r0, #48	; 0x30
 800778c:	18e1      	adds	r1, r4, r3
 800778e:	3143      	adds	r1, #67	; 0x43
 8007790:	7008      	strb	r0, [r1, #0]
 8007792:	0021      	movs	r1, r4
 8007794:	1c5a      	adds	r2, r3, #1
 8007796:	3145      	adds	r1, #69	; 0x45
 8007798:	7809      	ldrb	r1, [r1, #0]
 800779a:	18a2      	adds	r2, r4, r2
 800779c:	3243      	adds	r2, #67	; 0x43
 800779e:	3302      	adds	r3, #2
 80077a0:	7011      	strb	r1, [r2, #0]
 80077a2:	e7c1      	b.n	8007728 <_printf_common+0x4c>
 80077a4:	0022      	movs	r2, r4
 80077a6:	2301      	movs	r3, #1
 80077a8:	9901      	ldr	r1, [sp, #4]
 80077aa:	9800      	ldr	r0, [sp, #0]
 80077ac:	9f08      	ldr	r7, [sp, #32]
 80077ae:	321a      	adds	r2, #26
 80077b0:	47b8      	blx	r7
 80077b2:	3001      	adds	r0, #1
 80077b4:	d0e6      	beq.n	8007784 <_printf_common+0xa8>
 80077b6:	3601      	adds	r6, #1
 80077b8:	e7d1      	b.n	800775e <_printf_common+0x82>
	...

080077bc <_printf_i>:
 80077bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077be:	b08b      	sub	sp, #44	; 0x2c
 80077c0:	9206      	str	r2, [sp, #24]
 80077c2:	000a      	movs	r2, r1
 80077c4:	3243      	adds	r2, #67	; 0x43
 80077c6:	9307      	str	r3, [sp, #28]
 80077c8:	9005      	str	r0, [sp, #20]
 80077ca:	9204      	str	r2, [sp, #16]
 80077cc:	7e0a      	ldrb	r2, [r1, #24]
 80077ce:	000c      	movs	r4, r1
 80077d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80077d2:	2a78      	cmp	r2, #120	; 0x78
 80077d4:	d809      	bhi.n	80077ea <_printf_i+0x2e>
 80077d6:	2a62      	cmp	r2, #98	; 0x62
 80077d8:	d80b      	bhi.n	80077f2 <_printf_i+0x36>
 80077da:	2a00      	cmp	r2, #0
 80077dc:	d100      	bne.n	80077e0 <_printf_i+0x24>
 80077de:	e0be      	b.n	800795e <_printf_i+0x1a2>
 80077e0:	497c      	ldr	r1, [pc, #496]	; (80079d4 <_printf_i+0x218>)
 80077e2:	9103      	str	r1, [sp, #12]
 80077e4:	2a58      	cmp	r2, #88	; 0x58
 80077e6:	d100      	bne.n	80077ea <_printf_i+0x2e>
 80077e8:	e093      	b.n	8007912 <_printf_i+0x156>
 80077ea:	0026      	movs	r6, r4
 80077ec:	3642      	adds	r6, #66	; 0x42
 80077ee:	7032      	strb	r2, [r6, #0]
 80077f0:	e022      	b.n	8007838 <_printf_i+0x7c>
 80077f2:	0010      	movs	r0, r2
 80077f4:	3863      	subs	r0, #99	; 0x63
 80077f6:	2815      	cmp	r0, #21
 80077f8:	d8f7      	bhi.n	80077ea <_printf_i+0x2e>
 80077fa:	f7f8 fc95 	bl	8000128 <__gnu_thumb1_case_shi>
 80077fe:	0016      	.short	0x0016
 8007800:	fff6001f 	.word	0xfff6001f
 8007804:	fff6fff6 	.word	0xfff6fff6
 8007808:	001ffff6 	.word	0x001ffff6
 800780c:	fff6fff6 	.word	0xfff6fff6
 8007810:	fff6fff6 	.word	0xfff6fff6
 8007814:	003600a3 	.word	0x003600a3
 8007818:	fff60083 	.word	0xfff60083
 800781c:	00b4fff6 	.word	0x00b4fff6
 8007820:	0036fff6 	.word	0x0036fff6
 8007824:	fff6fff6 	.word	0xfff6fff6
 8007828:	0087      	.short	0x0087
 800782a:	0026      	movs	r6, r4
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	3642      	adds	r6, #66	; 0x42
 8007830:	1d11      	adds	r1, r2, #4
 8007832:	6019      	str	r1, [r3, #0]
 8007834:	6813      	ldr	r3, [r2, #0]
 8007836:	7033      	strb	r3, [r6, #0]
 8007838:	2301      	movs	r3, #1
 800783a:	e0a2      	b.n	8007982 <_printf_i+0x1c6>
 800783c:	6818      	ldr	r0, [r3, #0]
 800783e:	6809      	ldr	r1, [r1, #0]
 8007840:	1d02      	adds	r2, r0, #4
 8007842:	060d      	lsls	r5, r1, #24
 8007844:	d50b      	bpl.n	800785e <_printf_i+0xa2>
 8007846:	6805      	ldr	r5, [r0, #0]
 8007848:	601a      	str	r2, [r3, #0]
 800784a:	2d00      	cmp	r5, #0
 800784c:	da03      	bge.n	8007856 <_printf_i+0x9a>
 800784e:	232d      	movs	r3, #45	; 0x2d
 8007850:	9a04      	ldr	r2, [sp, #16]
 8007852:	426d      	negs	r5, r5
 8007854:	7013      	strb	r3, [r2, #0]
 8007856:	4b5f      	ldr	r3, [pc, #380]	; (80079d4 <_printf_i+0x218>)
 8007858:	270a      	movs	r7, #10
 800785a:	9303      	str	r3, [sp, #12]
 800785c:	e01b      	b.n	8007896 <_printf_i+0xda>
 800785e:	6805      	ldr	r5, [r0, #0]
 8007860:	601a      	str	r2, [r3, #0]
 8007862:	0649      	lsls	r1, r1, #25
 8007864:	d5f1      	bpl.n	800784a <_printf_i+0x8e>
 8007866:	b22d      	sxth	r5, r5
 8007868:	e7ef      	b.n	800784a <_printf_i+0x8e>
 800786a:	680d      	ldr	r5, [r1, #0]
 800786c:	6819      	ldr	r1, [r3, #0]
 800786e:	1d08      	adds	r0, r1, #4
 8007870:	6018      	str	r0, [r3, #0]
 8007872:	062e      	lsls	r6, r5, #24
 8007874:	d501      	bpl.n	800787a <_printf_i+0xbe>
 8007876:	680d      	ldr	r5, [r1, #0]
 8007878:	e003      	b.n	8007882 <_printf_i+0xc6>
 800787a:	066d      	lsls	r5, r5, #25
 800787c:	d5fb      	bpl.n	8007876 <_printf_i+0xba>
 800787e:	680d      	ldr	r5, [r1, #0]
 8007880:	b2ad      	uxth	r5, r5
 8007882:	4b54      	ldr	r3, [pc, #336]	; (80079d4 <_printf_i+0x218>)
 8007884:	2708      	movs	r7, #8
 8007886:	9303      	str	r3, [sp, #12]
 8007888:	2a6f      	cmp	r2, #111	; 0x6f
 800788a:	d000      	beq.n	800788e <_printf_i+0xd2>
 800788c:	3702      	adds	r7, #2
 800788e:	0023      	movs	r3, r4
 8007890:	2200      	movs	r2, #0
 8007892:	3343      	adds	r3, #67	; 0x43
 8007894:	701a      	strb	r2, [r3, #0]
 8007896:	6863      	ldr	r3, [r4, #4]
 8007898:	60a3      	str	r3, [r4, #8]
 800789a:	2b00      	cmp	r3, #0
 800789c:	db03      	blt.n	80078a6 <_printf_i+0xea>
 800789e:	2104      	movs	r1, #4
 80078a0:	6822      	ldr	r2, [r4, #0]
 80078a2:	438a      	bics	r2, r1
 80078a4:	6022      	str	r2, [r4, #0]
 80078a6:	2d00      	cmp	r5, #0
 80078a8:	d102      	bne.n	80078b0 <_printf_i+0xf4>
 80078aa:	9e04      	ldr	r6, [sp, #16]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00c      	beq.n	80078ca <_printf_i+0x10e>
 80078b0:	9e04      	ldr	r6, [sp, #16]
 80078b2:	0028      	movs	r0, r5
 80078b4:	0039      	movs	r1, r7
 80078b6:	f7f8 fcc7 	bl	8000248 <__aeabi_uidivmod>
 80078ba:	9b03      	ldr	r3, [sp, #12]
 80078bc:	3e01      	subs	r6, #1
 80078be:	5c5b      	ldrb	r3, [r3, r1]
 80078c0:	7033      	strb	r3, [r6, #0]
 80078c2:	002b      	movs	r3, r5
 80078c4:	0005      	movs	r5, r0
 80078c6:	429f      	cmp	r7, r3
 80078c8:	d9f3      	bls.n	80078b2 <_printf_i+0xf6>
 80078ca:	2f08      	cmp	r7, #8
 80078cc:	d109      	bne.n	80078e2 <_printf_i+0x126>
 80078ce:	6823      	ldr	r3, [r4, #0]
 80078d0:	07db      	lsls	r3, r3, #31
 80078d2:	d506      	bpl.n	80078e2 <_printf_i+0x126>
 80078d4:	6862      	ldr	r2, [r4, #4]
 80078d6:	6923      	ldr	r3, [r4, #16]
 80078d8:	429a      	cmp	r2, r3
 80078da:	dc02      	bgt.n	80078e2 <_printf_i+0x126>
 80078dc:	2330      	movs	r3, #48	; 0x30
 80078de:	3e01      	subs	r6, #1
 80078e0:	7033      	strb	r3, [r6, #0]
 80078e2:	9b04      	ldr	r3, [sp, #16]
 80078e4:	1b9b      	subs	r3, r3, r6
 80078e6:	6123      	str	r3, [r4, #16]
 80078e8:	9b07      	ldr	r3, [sp, #28]
 80078ea:	0021      	movs	r1, r4
 80078ec:	9300      	str	r3, [sp, #0]
 80078ee:	9805      	ldr	r0, [sp, #20]
 80078f0:	9b06      	ldr	r3, [sp, #24]
 80078f2:	aa09      	add	r2, sp, #36	; 0x24
 80078f4:	f7ff fef2 	bl	80076dc <_printf_common>
 80078f8:	3001      	adds	r0, #1
 80078fa:	d147      	bne.n	800798c <_printf_i+0x1d0>
 80078fc:	2001      	movs	r0, #1
 80078fe:	4240      	negs	r0, r0
 8007900:	b00b      	add	sp, #44	; 0x2c
 8007902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007904:	2220      	movs	r2, #32
 8007906:	6809      	ldr	r1, [r1, #0]
 8007908:	430a      	orrs	r2, r1
 800790a:	6022      	str	r2, [r4, #0]
 800790c:	2278      	movs	r2, #120	; 0x78
 800790e:	4932      	ldr	r1, [pc, #200]	; (80079d8 <_printf_i+0x21c>)
 8007910:	9103      	str	r1, [sp, #12]
 8007912:	0021      	movs	r1, r4
 8007914:	3145      	adds	r1, #69	; 0x45
 8007916:	700a      	strb	r2, [r1, #0]
 8007918:	6819      	ldr	r1, [r3, #0]
 800791a:	6822      	ldr	r2, [r4, #0]
 800791c:	c920      	ldmia	r1!, {r5}
 800791e:	0610      	lsls	r0, r2, #24
 8007920:	d402      	bmi.n	8007928 <_printf_i+0x16c>
 8007922:	0650      	lsls	r0, r2, #25
 8007924:	d500      	bpl.n	8007928 <_printf_i+0x16c>
 8007926:	b2ad      	uxth	r5, r5
 8007928:	6019      	str	r1, [r3, #0]
 800792a:	07d3      	lsls	r3, r2, #31
 800792c:	d502      	bpl.n	8007934 <_printf_i+0x178>
 800792e:	2320      	movs	r3, #32
 8007930:	4313      	orrs	r3, r2
 8007932:	6023      	str	r3, [r4, #0]
 8007934:	2710      	movs	r7, #16
 8007936:	2d00      	cmp	r5, #0
 8007938:	d1a9      	bne.n	800788e <_printf_i+0xd2>
 800793a:	2220      	movs	r2, #32
 800793c:	6823      	ldr	r3, [r4, #0]
 800793e:	4393      	bics	r3, r2
 8007940:	6023      	str	r3, [r4, #0]
 8007942:	e7a4      	b.n	800788e <_printf_i+0xd2>
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	680d      	ldr	r5, [r1, #0]
 8007948:	1d10      	adds	r0, r2, #4
 800794a:	6949      	ldr	r1, [r1, #20]
 800794c:	6018      	str	r0, [r3, #0]
 800794e:	6813      	ldr	r3, [r2, #0]
 8007950:	062e      	lsls	r6, r5, #24
 8007952:	d501      	bpl.n	8007958 <_printf_i+0x19c>
 8007954:	6019      	str	r1, [r3, #0]
 8007956:	e002      	b.n	800795e <_printf_i+0x1a2>
 8007958:	066d      	lsls	r5, r5, #25
 800795a:	d5fb      	bpl.n	8007954 <_printf_i+0x198>
 800795c:	8019      	strh	r1, [r3, #0]
 800795e:	2300      	movs	r3, #0
 8007960:	9e04      	ldr	r6, [sp, #16]
 8007962:	6123      	str	r3, [r4, #16]
 8007964:	e7c0      	b.n	80078e8 <_printf_i+0x12c>
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	1d11      	adds	r1, r2, #4
 800796a:	6019      	str	r1, [r3, #0]
 800796c:	6816      	ldr	r6, [r2, #0]
 800796e:	2100      	movs	r1, #0
 8007970:	0030      	movs	r0, r6
 8007972:	6862      	ldr	r2, [r4, #4]
 8007974:	f000 fc3f 	bl	80081f6 <memchr>
 8007978:	2800      	cmp	r0, #0
 800797a:	d001      	beq.n	8007980 <_printf_i+0x1c4>
 800797c:	1b80      	subs	r0, r0, r6
 800797e:	6060      	str	r0, [r4, #4]
 8007980:	6863      	ldr	r3, [r4, #4]
 8007982:	6123      	str	r3, [r4, #16]
 8007984:	2300      	movs	r3, #0
 8007986:	9a04      	ldr	r2, [sp, #16]
 8007988:	7013      	strb	r3, [r2, #0]
 800798a:	e7ad      	b.n	80078e8 <_printf_i+0x12c>
 800798c:	0032      	movs	r2, r6
 800798e:	6923      	ldr	r3, [r4, #16]
 8007990:	9906      	ldr	r1, [sp, #24]
 8007992:	9805      	ldr	r0, [sp, #20]
 8007994:	9d07      	ldr	r5, [sp, #28]
 8007996:	47a8      	blx	r5
 8007998:	3001      	adds	r0, #1
 800799a:	d0af      	beq.n	80078fc <_printf_i+0x140>
 800799c:	6823      	ldr	r3, [r4, #0]
 800799e:	079b      	lsls	r3, r3, #30
 80079a0:	d415      	bmi.n	80079ce <_printf_i+0x212>
 80079a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079a4:	68e0      	ldr	r0, [r4, #12]
 80079a6:	4298      	cmp	r0, r3
 80079a8:	daaa      	bge.n	8007900 <_printf_i+0x144>
 80079aa:	0018      	movs	r0, r3
 80079ac:	e7a8      	b.n	8007900 <_printf_i+0x144>
 80079ae:	0022      	movs	r2, r4
 80079b0:	2301      	movs	r3, #1
 80079b2:	9906      	ldr	r1, [sp, #24]
 80079b4:	9805      	ldr	r0, [sp, #20]
 80079b6:	9e07      	ldr	r6, [sp, #28]
 80079b8:	3219      	adds	r2, #25
 80079ba:	47b0      	blx	r6
 80079bc:	3001      	adds	r0, #1
 80079be:	d09d      	beq.n	80078fc <_printf_i+0x140>
 80079c0:	3501      	adds	r5, #1
 80079c2:	68e3      	ldr	r3, [r4, #12]
 80079c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079c6:	1a9b      	subs	r3, r3, r2
 80079c8:	42ab      	cmp	r3, r5
 80079ca:	dcf0      	bgt.n	80079ae <_printf_i+0x1f2>
 80079cc:	e7e9      	b.n	80079a2 <_printf_i+0x1e6>
 80079ce:	2500      	movs	r5, #0
 80079d0:	e7f7      	b.n	80079c2 <_printf_i+0x206>
 80079d2:	46c0      	nop			; (mov r8, r8)
 80079d4:	0800ae33 	.word	0x0800ae33
 80079d8:	0800ae44 	.word	0x0800ae44

080079dc <_scanf_float>:
 80079dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079de:	b08b      	sub	sp, #44	; 0x2c
 80079e0:	0016      	movs	r6, r2
 80079e2:	9002      	str	r0, [sp, #8]
 80079e4:	22ae      	movs	r2, #174	; 0xae
 80079e6:	2000      	movs	r0, #0
 80079e8:	9307      	str	r3, [sp, #28]
 80079ea:	688b      	ldr	r3, [r1, #8]
 80079ec:	000f      	movs	r7, r1
 80079ee:	1e59      	subs	r1, r3, #1
 80079f0:	0052      	lsls	r2, r2, #1
 80079f2:	9006      	str	r0, [sp, #24]
 80079f4:	4291      	cmp	r1, r2
 80079f6:	d905      	bls.n	8007a04 <_scanf_float+0x28>
 80079f8:	3b5e      	subs	r3, #94	; 0x5e
 80079fa:	3bff      	subs	r3, #255	; 0xff
 80079fc:	9306      	str	r3, [sp, #24]
 80079fe:	235e      	movs	r3, #94	; 0x5e
 8007a00:	33ff      	adds	r3, #255	; 0xff
 8007a02:	60bb      	str	r3, [r7, #8]
 8007a04:	23f0      	movs	r3, #240	; 0xf0
 8007a06:	683a      	ldr	r2, [r7, #0]
 8007a08:	00db      	lsls	r3, r3, #3
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	603b      	str	r3, [r7, #0]
 8007a0e:	003b      	movs	r3, r7
 8007a10:	2400      	movs	r4, #0
 8007a12:	331c      	adds	r3, #28
 8007a14:	001d      	movs	r5, r3
 8007a16:	9304      	str	r3, [sp, #16]
 8007a18:	9403      	str	r4, [sp, #12]
 8007a1a:	9409      	str	r4, [sp, #36]	; 0x24
 8007a1c:	9408      	str	r4, [sp, #32]
 8007a1e:	9401      	str	r4, [sp, #4]
 8007a20:	9405      	str	r4, [sp, #20]
 8007a22:	68ba      	ldr	r2, [r7, #8]
 8007a24:	2a00      	cmp	r2, #0
 8007a26:	d00a      	beq.n	8007a3e <_scanf_float+0x62>
 8007a28:	6833      	ldr	r3, [r6, #0]
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	2b4e      	cmp	r3, #78	; 0x4e
 8007a2e:	d844      	bhi.n	8007aba <_scanf_float+0xde>
 8007a30:	0018      	movs	r0, r3
 8007a32:	2b40      	cmp	r3, #64	; 0x40
 8007a34:	d82c      	bhi.n	8007a90 <_scanf_float+0xb4>
 8007a36:	382b      	subs	r0, #43	; 0x2b
 8007a38:	b2c1      	uxtb	r1, r0
 8007a3a:	290e      	cmp	r1, #14
 8007a3c:	d92a      	bls.n	8007a94 <_scanf_float+0xb8>
 8007a3e:	9b01      	ldr	r3, [sp, #4]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d003      	beq.n	8007a4c <_scanf_float+0x70>
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	4aa3      	ldr	r2, [pc, #652]	; (8007cd4 <_scanf_float+0x2f8>)
 8007a48:	4013      	ands	r3, r2
 8007a4a:	603b      	str	r3, [r7, #0]
 8007a4c:	9b03      	ldr	r3, [sp, #12]
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d900      	bls.n	8007a56 <_scanf_float+0x7a>
 8007a54:	e0f9      	b.n	8007c4a <_scanf_float+0x26e>
 8007a56:	24be      	movs	r4, #190	; 0xbe
 8007a58:	0064      	lsls	r4, r4, #1
 8007a5a:	9b04      	ldr	r3, [sp, #16]
 8007a5c:	429d      	cmp	r5, r3
 8007a5e:	d900      	bls.n	8007a62 <_scanf_float+0x86>
 8007a60:	e0e9      	b.n	8007c36 <_scanf_float+0x25a>
 8007a62:	2301      	movs	r3, #1
 8007a64:	9303      	str	r3, [sp, #12]
 8007a66:	e183      	b.n	8007d70 <_scanf_float+0x394>
 8007a68:	0018      	movs	r0, r3
 8007a6a:	3861      	subs	r0, #97	; 0x61
 8007a6c:	280d      	cmp	r0, #13
 8007a6e:	d8e6      	bhi.n	8007a3e <_scanf_float+0x62>
 8007a70:	f7f8 fb5a 	bl	8000128 <__gnu_thumb1_case_shi>
 8007a74:	ffe50083 	.word	0xffe50083
 8007a78:	ffe5ffe5 	.word	0xffe5ffe5
 8007a7c:	00a200b6 	.word	0x00a200b6
 8007a80:	ffe5ffe5 	.word	0xffe5ffe5
 8007a84:	ffe50089 	.word	0xffe50089
 8007a88:	ffe5ffe5 	.word	0xffe5ffe5
 8007a8c:	0065ffe5 	.word	0x0065ffe5
 8007a90:	3841      	subs	r0, #65	; 0x41
 8007a92:	e7eb      	b.n	8007a6c <_scanf_float+0x90>
 8007a94:	280e      	cmp	r0, #14
 8007a96:	d8d2      	bhi.n	8007a3e <_scanf_float+0x62>
 8007a98:	f7f8 fb46 	bl	8000128 <__gnu_thumb1_case_shi>
 8007a9c:	ffd1004b 	.word	0xffd1004b
 8007aa0:	0098004b 	.word	0x0098004b
 8007aa4:	0020ffd1 	.word	0x0020ffd1
 8007aa8:	00400040 	.word	0x00400040
 8007aac:	00400040 	.word	0x00400040
 8007ab0:	00400040 	.word	0x00400040
 8007ab4:	00400040 	.word	0x00400040
 8007ab8:	0040      	.short	0x0040
 8007aba:	2b6e      	cmp	r3, #110	; 0x6e
 8007abc:	d809      	bhi.n	8007ad2 <_scanf_float+0xf6>
 8007abe:	2b60      	cmp	r3, #96	; 0x60
 8007ac0:	d8d2      	bhi.n	8007a68 <_scanf_float+0x8c>
 8007ac2:	2b54      	cmp	r3, #84	; 0x54
 8007ac4:	d07d      	beq.n	8007bc2 <_scanf_float+0x1e6>
 8007ac6:	2b59      	cmp	r3, #89	; 0x59
 8007ac8:	d1b9      	bne.n	8007a3e <_scanf_float+0x62>
 8007aca:	2c07      	cmp	r4, #7
 8007acc:	d1b7      	bne.n	8007a3e <_scanf_float+0x62>
 8007ace:	2408      	movs	r4, #8
 8007ad0:	e02c      	b.n	8007b2c <_scanf_float+0x150>
 8007ad2:	2b74      	cmp	r3, #116	; 0x74
 8007ad4:	d075      	beq.n	8007bc2 <_scanf_float+0x1e6>
 8007ad6:	2b79      	cmp	r3, #121	; 0x79
 8007ad8:	d0f7      	beq.n	8007aca <_scanf_float+0xee>
 8007ada:	e7b0      	b.n	8007a3e <_scanf_float+0x62>
 8007adc:	6839      	ldr	r1, [r7, #0]
 8007ade:	05c8      	lsls	r0, r1, #23
 8007ae0:	d51c      	bpl.n	8007b1c <_scanf_float+0x140>
 8007ae2:	2380      	movs	r3, #128	; 0x80
 8007ae4:	4399      	bics	r1, r3
 8007ae6:	9b01      	ldr	r3, [sp, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
 8007aea:	3301      	adds	r3, #1
 8007aec:	9301      	str	r3, [sp, #4]
 8007aee:	9b06      	ldr	r3, [sp, #24]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d003      	beq.n	8007afc <_scanf_float+0x120>
 8007af4:	3b01      	subs	r3, #1
 8007af6:	3201      	adds	r2, #1
 8007af8:	9306      	str	r3, [sp, #24]
 8007afa:	60ba      	str	r2, [r7, #8]
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	3b01      	subs	r3, #1
 8007b00:	60bb      	str	r3, [r7, #8]
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	3301      	adds	r3, #1
 8007b06:	613b      	str	r3, [r7, #16]
 8007b08:	6873      	ldr	r3, [r6, #4]
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	6073      	str	r3, [r6, #4]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	dc00      	bgt.n	8007b14 <_scanf_float+0x138>
 8007b12:	e086      	b.n	8007c22 <_scanf_float+0x246>
 8007b14:	6833      	ldr	r3, [r6, #0]
 8007b16:	3301      	adds	r3, #1
 8007b18:	6033      	str	r3, [r6, #0]
 8007b1a:	e782      	b.n	8007a22 <_scanf_float+0x46>
 8007b1c:	9a03      	ldr	r2, [sp, #12]
 8007b1e:	1912      	adds	r2, r2, r4
 8007b20:	2a00      	cmp	r2, #0
 8007b22:	d18c      	bne.n	8007a3e <_scanf_float+0x62>
 8007b24:	683a      	ldr	r2, [r7, #0]
 8007b26:	496c      	ldr	r1, [pc, #432]	; (8007cd8 <_scanf_float+0x2fc>)
 8007b28:	400a      	ands	r2, r1
 8007b2a:	603a      	str	r2, [r7, #0]
 8007b2c:	702b      	strb	r3, [r5, #0]
 8007b2e:	3501      	adds	r5, #1
 8007b30:	e7e4      	b.n	8007afc <_scanf_float+0x120>
 8007b32:	2180      	movs	r1, #128	; 0x80
 8007b34:	683a      	ldr	r2, [r7, #0]
 8007b36:	420a      	tst	r2, r1
 8007b38:	d081      	beq.n	8007a3e <_scanf_float+0x62>
 8007b3a:	438a      	bics	r2, r1
 8007b3c:	e7f5      	b.n	8007b2a <_scanf_float+0x14e>
 8007b3e:	9a03      	ldr	r2, [sp, #12]
 8007b40:	2a00      	cmp	r2, #0
 8007b42:	d10f      	bne.n	8007b64 <_scanf_float+0x188>
 8007b44:	9a01      	ldr	r2, [sp, #4]
 8007b46:	2a00      	cmp	r2, #0
 8007b48:	d10f      	bne.n	8007b6a <_scanf_float+0x18e>
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	21e0      	movs	r1, #224	; 0xe0
 8007b4e:	0010      	movs	r0, r2
 8007b50:	00c9      	lsls	r1, r1, #3
 8007b52:	4008      	ands	r0, r1
 8007b54:	4288      	cmp	r0, r1
 8007b56:	d108      	bne.n	8007b6a <_scanf_float+0x18e>
 8007b58:	4960      	ldr	r1, [pc, #384]	; (8007cdc <_scanf_float+0x300>)
 8007b5a:	400a      	ands	r2, r1
 8007b5c:	603a      	str	r2, [r7, #0]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	9203      	str	r2, [sp, #12]
 8007b62:	e7e3      	b.n	8007b2c <_scanf_float+0x150>
 8007b64:	9a03      	ldr	r2, [sp, #12]
 8007b66:	2a02      	cmp	r2, #2
 8007b68:	d059      	beq.n	8007c1e <_scanf_float+0x242>
 8007b6a:	2c01      	cmp	r4, #1
 8007b6c:	d002      	beq.n	8007b74 <_scanf_float+0x198>
 8007b6e:	2c04      	cmp	r4, #4
 8007b70:	d000      	beq.n	8007b74 <_scanf_float+0x198>
 8007b72:	e764      	b.n	8007a3e <_scanf_float+0x62>
 8007b74:	3401      	adds	r4, #1
 8007b76:	b2e4      	uxtb	r4, r4
 8007b78:	e7d8      	b.n	8007b2c <_scanf_float+0x150>
 8007b7a:	9a03      	ldr	r2, [sp, #12]
 8007b7c:	2a01      	cmp	r2, #1
 8007b7e:	d000      	beq.n	8007b82 <_scanf_float+0x1a6>
 8007b80:	e75d      	b.n	8007a3e <_scanf_float+0x62>
 8007b82:	2202      	movs	r2, #2
 8007b84:	e7ec      	b.n	8007b60 <_scanf_float+0x184>
 8007b86:	2c00      	cmp	r4, #0
 8007b88:	d110      	bne.n	8007bac <_scanf_float+0x1d0>
 8007b8a:	9a01      	ldr	r2, [sp, #4]
 8007b8c:	2a00      	cmp	r2, #0
 8007b8e:	d000      	beq.n	8007b92 <_scanf_float+0x1b6>
 8007b90:	e758      	b.n	8007a44 <_scanf_float+0x68>
 8007b92:	683a      	ldr	r2, [r7, #0]
 8007b94:	21e0      	movs	r1, #224	; 0xe0
 8007b96:	0010      	movs	r0, r2
 8007b98:	00c9      	lsls	r1, r1, #3
 8007b9a:	4008      	ands	r0, r1
 8007b9c:	4288      	cmp	r0, r1
 8007b9e:	d000      	beq.n	8007ba2 <_scanf_float+0x1c6>
 8007ba0:	e754      	b.n	8007a4c <_scanf_float+0x70>
 8007ba2:	494e      	ldr	r1, [pc, #312]	; (8007cdc <_scanf_float+0x300>)
 8007ba4:	3401      	adds	r4, #1
 8007ba6:	400a      	ands	r2, r1
 8007ba8:	603a      	str	r2, [r7, #0]
 8007baa:	e7bf      	b.n	8007b2c <_scanf_float+0x150>
 8007bac:	21fd      	movs	r1, #253	; 0xfd
 8007bae:	1ee2      	subs	r2, r4, #3
 8007bb0:	420a      	tst	r2, r1
 8007bb2:	d000      	beq.n	8007bb6 <_scanf_float+0x1da>
 8007bb4:	e743      	b.n	8007a3e <_scanf_float+0x62>
 8007bb6:	e7dd      	b.n	8007b74 <_scanf_float+0x198>
 8007bb8:	2c02      	cmp	r4, #2
 8007bba:	d000      	beq.n	8007bbe <_scanf_float+0x1e2>
 8007bbc:	e73f      	b.n	8007a3e <_scanf_float+0x62>
 8007bbe:	2403      	movs	r4, #3
 8007bc0:	e7b4      	b.n	8007b2c <_scanf_float+0x150>
 8007bc2:	2c06      	cmp	r4, #6
 8007bc4:	d000      	beq.n	8007bc8 <_scanf_float+0x1ec>
 8007bc6:	e73a      	b.n	8007a3e <_scanf_float+0x62>
 8007bc8:	2407      	movs	r4, #7
 8007bca:	e7af      	b.n	8007b2c <_scanf_float+0x150>
 8007bcc:	683a      	ldr	r2, [r7, #0]
 8007bce:	0591      	lsls	r1, r2, #22
 8007bd0:	d400      	bmi.n	8007bd4 <_scanf_float+0x1f8>
 8007bd2:	e734      	b.n	8007a3e <_scanf_float+0x62>
 8007bd4:	4942      	ldr	r1, [pc, #264]	; (8007ce0 <_scanf_float+0x304>)
 8007bd6:	400a      	ands	r2, r1
 8007bd8:	603a      	str	r2, [r7, #0]
 8007bda:	9a01      	ldr	r2, [sp, #4]
 8007bdc:	9205      	str	r2, [sp, #20]
 8007bde:	e7a5      	b.n	8007b2c <_scanf_float+0x150>
 8007be0:	21a0      	movs	r1, #160	; 0xa0
 8007be2:	2080      	movs	r0, #128	; 0x80
 8007be4:	683a      	ldr	r2, [r7, #0]
 8007be6:	00c9      	lsls	r1, r1, #3
 8007be8:	4011      	ands	r1, r2
 8007bea:	00c0      	lsls	r0, r0, #3
 8007bec:	4281      	cmp	r1, r0
 8007bee:	d006      	beq.n	8007bfe <_scanf_float+0x222>
 8007bf0:	4202      	tst	r2, r0
 8007bf2:	d100      	bne.n	8007bf6 <_scanf_float+0x21a>
 8007bf4:	e723      	b.n	8007a3e <_scanf_float+0x62>
 8007bf6:	9901      	ldr	r1, [sp, #4]
 8007bf8:	2900      	cmp	r1, #0
 8007bfa:	d100      	bne.n	8007bfe <_scanf_float+0x222>
 8007bfc:	e726      	b.n	8007a4c <_scanf_float+0x70>
 8007bfe:	0591      	lsls	r1, r2, #22
 8007c00:	d404      	bmi.n	8007c0c <_scanf_float+0x230>
 8007c02:	9901      	ldr	r1, [sp, #4]
 8007c04:	9805      	ldr	r0, [sp, #20]
 8007c06:	9509      	str	r5, [sp, #36]	; 0x24
 8007c08:	1a09      	subs	r1, r1, r0
 8007c0a:	9108      	str	r1, [sp, #32]
 8007c0c:	4933      	ldr	r1, [pc, #204]	; (8007cdc <_scanf_float+0x300>)
 8007c0e:	400a      	ands	r2, r1
 8007c10:	21c0      	movs	r1, #192	; 0xc0
 8007c12:	0049      	lsls	r1, r1, #1
 8007c14:	430a      	orrs	r2, r1
 8007c16:	603a      	str	r2, [r7, #0]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	9201      	str	r2, [sp, #4]
 8007c1c:	e786      	b.n	8007b2c <_scanf_float+0x150>
 8007c1e:	2203      	movs	r2, #3
 8007c20:	e79e      	b.n	8007b60 <_scanf_float+0x184>
 8007c22:	23c0      	movs	r3, #192	; 0xc0
 8007c24:	005b      	lsls	r3, r3, #1
 8007c26:	0031      	movs	r1, r6
 8007c28:	58fb      	ldr	r3, [r7, r3]
 8007c2a:	9802      	ldr	r0, [sp, #8]
 8007c2c:	4798      	blx	r3
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	d100      	bne.n	8007c34 <_scanf_float+0x258>
 8007c32:	e6f6      	b.n	8007a22 <_scanf_float+0x46>
 8007c34:	e703      	b.n	8007a3e <_scanf_float+0x62>
 8007c36:	3d01      	subs	r5, #1
 8007c38:	593b      	ldr	r3, [r7, r4]
 8007c3a:	0032      	movs	r2, r6
 8007c3c:	7829      	ldrb	r1, [r5, #0]
 8007c3e:	9802      	ldr	r0, [sp, #8]
 8007c40:	4798      	blx	r3
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	3b01      	subs	r3, #1
 8007c46:	613b      	str	r3, [r7, #16]
 8007c48:	e707      	b.n	8007a5a <_scanf_float+0x7e>
 8007c4a:	1e63      	subs	r3, r4, #1
 8007c4c:	2b06      	cmp	r3, #6
 8007c4e:	d80e      	bhi.n	8007c6e <_scanf_float+0x292>
 8007c50:	9503      	str	r5, [sp, #12]
 8007c52:	2c02      	cmp	r4, #2
 8007c54:	d920      	bls.n	8007c98 <_scanf_float+0x2bc>
 8007c56:	1b63      	subs	r3, r4, r5
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	9306      	str	r3, [sp, #24]
 8007c5c:	9b03      	ldr	r3, [sp, #12]
 8007c5e:	9a06      	ldr	r2, [sp, #24]
 8007c60:	189b      	adds	r3, r3, r2
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	2b03      	cmp	r3, #3
 8007c66:	d827      	bhi.n	8007cb8 <_scanf_float+0x2dc>
 8007c68:	3c03      	subs	r4, #3
 8007c6a:	b2e4      	uxtb	r4, r4
 8007c6c:	1b2d      	subs	r5, r5, r4
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	05da      	lsls	r2, r3, #23
 8007c72:	d552      	bpl.n	8007d1a <_scanf_float+0x33e>
 8007c74:	055b      	lsls	r3, r3, #21
 8007c76:	d535      	bpl.n	8007ce4 <_scanf_float+0x308>
 8007c78:	24be      	movs	r4, #190	; 0xbe
 8007c7a:	0064      	lsls	r4, r4, #1
 8007c7c:	9b04      	ldr	r3, [sp, #16]
 8007c7e:	429d      	cmp	r5, r3
 8007c80:	d800      	bhi.n	8007c84 <_scanf_float+0x2a8>
 8007c82:	e6ee      	b.n	8007a62 <_scanf_float+0x86>
 8007c84:	3d01      	subs	r5, #1
 8007c86:	593b      	ldr	r3, [r7, r4]
 8007c88:	0032      	movs	r2, r6
 8007c8a:	7829      	ldrb	r1, [r5, #0]
 8007c8c:	9802      	ldr	r0, [sp, #8]
 8007c8e:	4798      	blx	r3
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	3b01      	subs	r3, #1
 8007c94:	613b      	str	r3, [r7, #16]
 8007c96:	e7f1      	b.n	8007c7c <_scanf_float+0x2a0>
 8007c98:	24be      	movs	r4, #190	; 0xbe
 8007c9a:	0064      	lsls	r4, r4, #1
 8007c9c:	9b04      	ldr	r3, [sp, #16]
 8007c9e:	429d      	cmp	r5, r3
 8007ca0:	d800      	bhi.n	8007ca4 <_scanf_float+0x2c8>
 8007ca2:	e6de      	b.n	8007a62 <_scanf_float+0x86>
 8007ca4:	3d01      	subs	r5, #1
 8007ca6:	593b      	ldr	r3, [r7, r4]
 8007ca8:	0032      	movs	r2, r6
 8007caa:	7829      	ldrb	r1, [r5, #0]
 8007cac:	9802      	ldr	r0, [sp, #8]
 8007cae:	4798      	blx	r3
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	613b      	str	r3, [r7, #16]
 8007cb6:	e7f1      	b.n	8007c9c <_scanf_float+0x2c0>
 8007cb8:	9b03      	ldr	r3, [sp, #12]
 8007cba:	0032      	movs	r2, r6
 8007cbc:	3b01      	subs	r3, #1
 8007cbe:	7819      	ldrb	r1, [r3, #0]
 8007cc0:	9303      	str	r3, [sp, #12]
 8007cc2:	23be      	movs	r3, #190	; 0xbe
 8007cc4:	005b      	lsls	r3, r3, #1
 8007cc6:	58fb      	ldr	r3, [r7, r3]
 8007cc8:	9802      	ldr	r0, [sp, #8]
 8007cca:	4798      	blx	r3
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	613b      	str	r3, [r7, #16]
 8007cd2:	e7c3      	b.n	8007c5c <_scanf_float+0x280>
 8007cd4:	fffffeff 	.word	0xfffffeff
 8007cd8:	fffffe7f 	.word	0xfffffe7f
 8007cdc:	fffff87f 	.word	0xfffff87f
 8007ce0:	fffffd7f 	.word	0xfffffd7f
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	1e6c      	subs	r4, r5, #1
 8007ce8:	7821      	ldrb	r1, [r4, #0]
 8007cea:	3b01      	subs	r3, #1
 8007cec:	613b      	str	r3, [r7, #16]
 8007cee:	2965      	cmp	r1, #101	; 0x65
 8007cf0:	d00c      	beq.n	8007d0c <_scanf_float+0x330>
 8007cf2:	2945      	cmp	r1, #69	; 0x45
 8007cf4:	d00a      	beq.n	8007d0c <_scanf_float+0x330>
 8007cf6:	23be      	movs	r3, #190	; 0xbe
 8007cf8:	005b      	lsls	r3, r3, #1
 8007cfa:	58fb      	ldr	r3, [r7, r3]
 8007cfc:	0032      	movs	r2, r6
 8007cfe:	9802      	ldr	r0, [sp, #8]
 8007d00:	4798      	blx	r3
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	1eac      	subs	r4, r5, #2
 8007d06:	3b01      	subs	r3, #1
 8007d08:	7821      	ldrb	r1, [r4, #0]
 8007d0a:	613b      	str	r3, [r7, #16]
 8007d0c:	23be      	movs	r3, #190	; 0xbe
 8007d0e:	005b      	lsls	r3, r3, #1
 8007d10:	0032      	movs	r2, r6
 8007d12:	58fb      	ldr	r3, [r7, r3]
 8007d14:	9802      	ldr	r0, [sp, #8]
 8007d16:	4798      	blx	r3
 8007d18:	0025      	movs	r5, r4
 8007d1a:	683a      	ldr	r2, [r7, #0]
 8007d1c:	2310      	movs	r3, #16
 8007d1e:	0011      	movs	r1, r2
 8007d20:	4019      	ands	r1, r3
 8007d22:	9103      	str	r1, [sp, #12]
 8007d24:	421a      	tst	r2, r3
 8007d26:	d15b      	bne.n	8007de0 <_scanf_float+0x404>
 8007d28:	22c0      	movs	r2, #192	; 0xc0
 8007d2a:	7029      	strb	r1, [r5, #0]
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	00d2      	lsls	r2, r2, #3
 8007d30:	4013      	ands	r3, r2
 8007d32:	2280      	movs	r2, #128	; 0x80
 8007d34:	00d2      	lsls	r2, r2, #3
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d11d      	bne.n	8007d76 <_scanf_float+0x39a>
 8007d3a:	9b05      	ldr	r3, [sp, #20]
 8007d3c:	9a01      	ldr	r2, [sp, #4]
 8007d3e:	9901      	ldr	r1, [sp, #4]
 8007d40:	1a9a      	subs	r2, r3, r2
 8007d42:	428b      	cmp	r3, r1
 8007d44:	d124      	bne.n	8007d90 <_scanf_float+0x3b4>
 8007d46:	2200      	movs	r2, #0
 8007d48:	9904      	ldr	r1, [sp, #16]
 8007d4a:	9802      	ldr	r0, [sp, #8]
 8007d4c:	f7ff f91c 	bl	8006f88 <_strtod_r>
 8007d50:	9b07      	ldr	r3, [sp, #28]
 8007d52:	683a      	ldr	r2, [r7, #0]
 8007d54:	0004      	movs	r4, r0
 8007d56:	000d      	movs	r5, r1
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	0791      	lsls	r1, r2, #30
 8007d5c:	d525      	bpl.n	8007daa <_scanf_float+0x3ce>
 8007d5e:	9907      	ldr	r1, [sp, #28]
 8007d60:	1d1a      	adds	r2, r3, #4
 8007d62:	600a      	str	r2, [r1, #0]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	601c      	str	r4, [r3, #0]
 8007d68:	605d      	str	r5, [r3, #4]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	60fb      	str	r3, [r7, #12]
 8007d70:	9803      	ldr	r0, [sp, #12]
 8007d72:	b00b      	add	sp, #44	; 0x2c
 8007d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d76:	9b08      	ldr	r3, [sp, #32]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d0e4      	beq.n	8007d46 <_scanf_float+0x36a>
 8007d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d7e:	9a03      	ldr	r2, [sp, #12]
 8007d80:	1c59      	adds	r1, r3, #1
 8007d82:	9802      	ldr	r0, [sp, #8]
 8007d84:	230a      	movs	r3, #10
 8007d86:	f7ff f99b 	bl	80070c0 <_strtol_r>
 8007d8a:	9b08      	ldr	r3, [sp, #32]
 8007d8c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007d8e:	1ac2      	subs	r2, r0, r3
 8007d90:	003b      	movs	r3, r7
 8007d92:	3370      	adds	r3, #112	; 0x70
 8007d94:	33ff      	adds	r3, #255	; 0xff
 8007d96:	429d      	cmp	r5, r3
 8007d98:	d302      	bcc.n	8007da0 <_scanf_float+0x3c4>
 8007d9a:	003d      	movs	r5, r7
 8007d9c:	356f      	adds	r5, #111	; 0x6f
 8007d9e:	35ff      	adds	r5, #255	; 0xff
 8007da0:	0028      	movs	r0, r5
 8007da2:	4910      	ldr	r1, [pc, #64]	; (8007de4 <_scanf_float+0x408>)
 8007da4:	f000 f8e6 	bl	8007f74 <siprintf>
 8007da8:	e7cd      	b.n	8007d46 <_scanf_float+0x36a>
 8007daa:	1d19      	adds	r1, r3, #4
 8007dac:	0752      	lsls	r2, r2, #29
 8007dae:	d502      	bpl.n	8007db6 <_scanf_float+0x3da>
 8007db0:	9a07      	ldr	r2, [sp, #28]
 8007db2:	6011      	str	r1, [r2, #0]
 8007db4:	e7d6      	b.n	8007d64 <_scanf_float+0x388>
 8007db6:	9a07      	ldr	r2, [sp, #28]
 8007db8:	0020      	movs	r0, r4
 8007dba:	6011      	str	r1, [r2, #0]
 8007dbc:	681e      	ldr	r6, [r3, #0]
 8007dbe:	0022      	movs	r2, r4
 8007dc0:	002b      	movs	r3, r5
 8007dc2:	0029      	movs	r1, r5
 8007dc4:	f7fa fa68 	bl	8002298 <__aeabi_dcmpun>
 8007dc8:	2800      	cmp	r0, #0
 8007dca:	d004      	beq.n	8007dd6 <_scanf_float+0x3fa>
 8007dcc:	4806      	ldr	r0, [pc, #24]	; (8007de8 <_scanf_float+0x40c>)
 8007dce:	f000 fa2d 	bl	800822c <nanf>
 8007dd2:	6030      	str	r0, [r6, #0]
 8007dd4:	e7c9      	b.n	8007d6a <_scanf_float+0x38e>
 8007dd6:	0020      	movs	r0, r4
 8007dd8:	0029      	movs	r1, r5
 8007dda:	f7fa fb07 	bl	80023ec <__aeabi_d2f>
 8007dde:	e7f8      	b.n	8007dd2 <_scanf_float+0x3f6>
 8007de0:	2300      	movs	r3, #0
 8007de2:	e63f      	b.n	8007a64 <_scanf_float+0x88>
 8007de4:	0800ae55 	.word	0x0800ae55
 8007de8:	0800b0f0 	.word	0x0800b0f0

08007dec <std>:
 8007dec:	2300      	movs	r3, #0
 8007dee:	b510      	push	{r4, lr}
 8007df0:	0004      	movs	r4, r0
 8007df2:	6003      	str	r3, [r0, #0]
 8007df4:	6043      	str	r3, [r0, #4]
 8007df6:	6083      	str	r3, [r0, #8]
 8007df8:	8181      	strh	r1, [r0, #12]
 8007dfa:	6643      	str	r3, [r0, #100]	; 0x64
 8007dfc:	81c2      	strh	r2, [r0, #14]
 8007dfe:	6103      	str	r3, [r0, #16]
 8007e00:	6143      	str	r3, [r0, #20]
 8007e02:	6183      	str	r3, [r0, #24]
 8007e04:	0019      	movs	r1, r3
 8007e06:	2208      	movs	r2, #8
 8007e08:	305c      	adds	r0, #92	; 0x5c
 8007e0a:	f000 f91f 	bl	800804c <memset>
 8007e0e:	4b0b      	ldr	r3, [pc, #44]	; (8007e3c <std+0x50>)
 8007e10:	6224      	str	r4, [r4, #32]
 8007e12:	6263      	str	r3, [r4, #36]	; 0x24
 8007e14:	4b0a      	ldr	r3, [pc, #40]	; (8007e40 <std+0x54>)
 8007e16:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e18:	4b0a      	ldr	r3, [pc, #40]	; (8007e44 <std+0x58>)
 8007e1a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e1c:	4b0a      	ldr	r3, [pc, #40]	; (8007e48 <std+0x5c>)
 8007e1e:	6323      	str	r3, [r4, #48]	; 0x30
 8007e20:	4b0a      	ldr	r3, [pc, #40]	; (8007e4c <std+0x60>)
 8007e22:	429c      	cmp	r4, r3
 8007e24:	d005      	beq.n	8007e32 <std+0x46>
 8007e26:	4b0a      	ldr	r3, [pc, #40]	; (8007e50 <std+0x64>)
 8007e28:	429c      	cmp	r4, r3
 8007e2a:	d002      	beq.n	8007e32 <std+0x46>
 8007e2c:	4b09      	ldr	r3, [pc, #36]	; (8007e54 <std+0x68>)
 8007e2e:	429c      	cmp	r4, r3
 8007e30:	d103      	bne.n	8007e3a <std+0x4e>
 8007e32:	0020      	movs	r0, r4
 8007e34:	3058      	adds	r0, #88	; 0x58
 8007e36:	f000 f9db 	bl	80081f0 <__retarget_lock_init_recursive>
 8007e3a:	bd10      	pop	{r4, pc}
 8007e3c:	08007fb5 	.word	0x08007fb5
 8007e40:	08007fdd 	.word	0x08007fdd
 8007e44:	08008015 	.word	0x08008015
 8007e48:	08008041 	.word	0x08008041
 8007e4c:	20000580 	.word	0x20000580
 8007e50:	200005e8 	.word	0x200005e8
 8007e54:	20000650 	.word	0x20000650

08007e58 <stdio_exit_handler>:
 8007e58:	b510      	push	{r4, lr}
 8007e5a:	4a03      	ldr	r2, [pc, #12]	; (8007e68 <stdio_exit_handler+0x10>)
 8007e5c:	4903      	ldr	r1, [pc, #12]	; (8007e6c <stdio_exit_handler+0x14>)
 8007e5e:	4804      	ldr	r0, [pc, #16]	; (8007e70 <stdio_exit_handler+0x18>)
 8007e60:	f000 f86c 	bl	8007f3c <_fwalk_sglue>
 8007e64:	bd10      	pop	{r4, pc}
 8007e66:	46c0      	nop			; (mov r8, r8)
 8007e68:	20000018 	.word	0x20000018
 8007e6c:	0800a449 	.word	0x0800a449
 8007e70:	20000190 	.word	0x20000190

08007e74 <cleanup_stdio>:
 8007e74:	6841      	ldr	r1, [r0, #4]
 8007e76:	4b0b      	ldr	r3, [pc, #44]	; (8007ea4 <cleanup_stdio+0x30>)
 8007e78:	b510      	push	{r4, lr}
 8007e7a:	0004      	movs	r4, r0
 8007e7c:	4299      	cmp	r1, r3
 8007e7e:	d001      	beq.n	8007e84 <cleanup_stdio+0x10>
 8007e80:	f002 fae2 	bl	800a448 <_fflush_r>
 8007e84:	68a1      	ldr	r1, [r4, #8]
 8007e86:	4b08      	ldr	r3, [pc, #32]	; (8007ea8 <cleanup_stdio+0x34>)
 8007e88:	4299      	cmp	r1, r3
 8007e8a:	d002      	beq.n	8007e92 <cleanup_stdio+0x1e>
 8007e8c:	0020      	movs	r0, r4
 8007e8e:	f002 fadb 	bl	800a448 <_fflush_r>
 8007e92:	68e1      	ldr	r1, [r4, #12]
 8007e94:	4b05      	ldr	r3, [pc, #20]	; (8007eac <cleanup_stdio+0x38>)
 8007e96:	4299      	cmp	r1, r3
 8007e98:	d002      	beq.n	8007ea0 <cleanup_stdio+0x2c>
 8007e9a:	0020      	movs	r0, r4
 8007e9c:	f002 fad4 	bl	800a448 <_fflush_r>
 8007ea0:	bd10      	pop	{r4, pc}
 8007ea2:	46c0      	nop			; (mov r8, r8)
 8007ea4:	20000580 	.word	0x20000580
 8007ea8:	200005e8 	.word	0x200005e8
 8007eac:	20000650 	.word	0x20000650

08007eb0 <global_stdio_init.part.0>:
 8007eb0:	b510      	push	{r4, lr}
 8007eb2:	4b09      	ldr	r3, [pc, #36]	; (8007ed8 <global_stdio_init.part.0+0x28>)
 8007eb4:	4a09      	ldr	r2, [pc, #36]	; (8007edc <global_stdio_init.part.0+0x2c>)
 8007eb6:	2104      	movs	r1, #4
 8007eb8:	601a      	str	r2, [r3, #0]
 8007eba:	4809      	ldr	r0, [pc, #36]	; (8007ee0 <global_stdio_init.part.0+0x30>)
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f7ff ff95 	bl	8007dec <std>
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	2109      	movs	r1, #9
 8007ec6:	4807      	ldr	r0, [pc, #28]	; (8007ee4 <global_stdio_init.part.0+0x34>)
 8007ec8:	f7ff ff90 	bl	8007dec <std>
 8007ecc:	2202      	movs	r2, #2
 8007ece:	2112      	movs	r1, #18
 8007ed0:	4805      	ldr	r0, [pc, #20]	; (8007ee8 <global_stdio_init.part.0+0x38>)
 8007ed2:	f7ff ff8b 	bl	8007dec <std>
 8007ed6:	bd10      	pop	{r4, pc}
 8007ed8:	200006b8 	.word	0x200006b8
 8007edc:	08007e59 	.word	0x08007e59
 8007ee0:	20000580 	.word	0x20000580
 8007ee4:	200005e8 	.word	0x200005e8
 8007ee8:	20000650 	.word	0x20000650

08007eec <__sfp_lock_acquire>:
 8007eec:	b510      	push	{r4, lr}
 8007eee:	4802      	ldr	r0, [pc, #8]	; (8007ef8 <__sfp_lock_acquire+0xc>)
 8007ef0:	f000 f97f 	bl	80081f2 <__retarget_lock_acquire_recursive>
 8007ef4:	bd10      	pop	{r4, pc}
 8007ef6:	46c0      	nop			; (mov r8, r8)
 8007ef8:	200006c1 	.word	0x200006c1

08007efc <__sfp_lock_release>:
 8007efc:	b510      	push	{r4, lr}
 8007efe:	4802      	ldr	r0, [pc, #8]	; (8007f08 <__sfp_lock_release+0xc>)
 8007f00:	f000 f978 	bl	80081f4 <__retarget_lock_release_recursive>
 8007f04:	bd10      	pop	{r4, pc}
 8007f06:	46c0      	nop			; (mov r8, r8)
 8007f08:	200006c1 	.word	0x200006c1

08007f0c <__sinit>:
 8007f0c:	b510      	push	{r4, lr}
 8007f0e:	0004      	movs	r4, r0
 8007f10:	f7ff ffec 	bl	8007eec <__sfp_lock_acquire>
 8007f14:	6a23      	ldr	r3, [r4, #32]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d002      	beq.n	8007f20 <__sinit+0x14>
 8007f1a:	f7ff ffef 	bl	8007efc <__sfp_lock_release>
 8007f1e:	bd10      	pop	{r4, pc}
 8007f20:	4b04      	ldr	r3, [pc, #16]	; (8007f34 <__sinit+0x28>)
 8007f22:	6223      	str	r3, [r4, #32]
 8007f24:	4b04      	ldr	r3, [pc, #16]	; (8007f38 <__sinit+0x2c>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1f6      	bne.n	8007f1a <__sinit+0xe>
 8007f2c:	f7ff ffc0 	bl	8007eb0 <global_stdio_init.part.0>
 8007f30:	e7f3      	b.n	8007f1a <__sinit+0xe>
 8007f32:	46c0      	nop			; (mov r8, r8)
 8007f34:	08007e75 	.word	0x08007e75
 8007f38:	200006b8 	.word	0x200006b8

08007f3c <_fwalk_sglue>:
 8007f3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f3e:	0014      	movs	r4, r2
 8007f40:	2600      	movs	r6, #0
 8007f42:	9000      	str	r0, [sp, #0]
 8007f44:	9101      	str	r1, [sp, #4]
 8007f46:	68a5      	ldr	r5, [r4, #8]
 8007f48:	6867      	ldr	r7, [r4, #4]
 8007f4a:	3f01      	subs	r7, #1
 8007f4c:	d504      	bpl.n	8007f58 <_fwalk_sglue+0x1c>
 8007f4e:	6824      	ldr	r4, [r4, #0]
 8007f50:	2c00      	cmp	r4, #0
 8007f52:	d1f8      	bne.n	8007f46 <_fwalk_sglue+0xa>
 8007f54:	0030      	movs	r0, r6
 8007f56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007f58:	89ab      	ldrh	r3, [r5, #12]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d908      	bls.n	8007f70 <_fwalk_sglue+0x34>
 8007f5e:	220e      	movs	r2, #14
 8007f60:	5eab      	ldrsh	r3, [r5, r2]
 8007f62:	3301      	adds	r3, #1
 8007f64:	d004      	beq.n	8007f70 <_fwalk_sglue+0x34>
 8007f66:	0029      	movs	r1, r5
 8007f68:	9800      	ldr	r0, [sp, #0]
 8007f6a:	9b01      	ldr	r3, [sp, #4]
 8007f6c:	4798      	blx	r3
 8007f6e:	4306      	orrs	r6, r0
 8007f70:	3568      	adds	r5, #104	; 0x68
 8007f72:	e7ea      	b.n	8007f4a <_fwalk_sglue+0xe>

08007f74 <siprintf>:
 8007f74:	b40e      	push	{r1, r2, r3}
 8007f76:	b500      	push	{lr}
 8007f78:	490b      	ldr	r1, [pc, #44]	; (8007fa8 <siprintf+0x34>)
 8007f7a:	b09c      	sub	sp, #112	; 0x70
 8007f7c:	ab1d      	add	r3, sp, #116	; 0x74
 8007f7e:	9002      	str	r0, [sp, #8]
 8007f80:	9006      	str	r0, [sp, #24]
 8007f82:	9107      	str	r1, [sp, #28]
 8007f84:	9104      	str	r1, [sp, #16]
 8007f86:	4809      	ldr	r0, [pc, #36]	; (8007fac <siprintf+0x38>)
 8007f88:	4909      	ldr	r1, [pc, #36]	; (8007fb0 <siprintf+0x3c>)
 8007f8a:	cb04      	ldmia	r3!, {r2}
 8007f8c:	9105      	str	r1, [sp, #20]
 8007f8e:	6800      	ldr	r0, [r0, #0]
 8007f90:	a902      	add	r1, sp, #8
 8007f92:	9301      	str	r3, [sp, #4]
 8007f94:	f002 f8ce 	bl	800a134 <_svfiprintf_r>
 8007f98:	2200      	movs	r2, #0
 8007f9a:	9b02      	ldr	r3, [sp, #8]
 8007f9c:	701a      	strb	r2, [r3, #0]
 8007f9e:	b01c      	add	sp, #112	; 0x70
 8007fa0:	bc08      	pop	{r3}
 8007fa2:	b003      	add	sp, #12
 8007fa4:	4718      	bx	r3
 8007fa6:	46c0      	nop			; (mov r8, r8)
 8007fa8:	7fffffff 	.word	0x7fffffff
 8007fac:	200001dc 	.word	0x200001dc
 8007fb0:	ffff0208 	.word	0xffff0208

08007fb4 <__sread>:
 8007fb4:	b570      	push	{r4, r5, r6, lr}
 8007fb6:	000c      	movs	r4, r1
 8007fb8:	250e      	movs	r5, #14
 8007fba:	5f49      	ldrsh	r1, [r1, r5]
 8007fbc:	f000 f8b4 	bl	8008128 <_read_r>
 8007fc0:	2800      	cmp	r0, #0
 8007fc2:	db03      	blt.n	8007fcc <__sread+0x18>
 8007fc4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007fc6:	181b      	adds	r3, r3, r0
 8007fc8:	6563      	str	r3, [r4, #84]	; 0x54
 8007fca:	bd70      	pop	{r4, r5, r6, pc}
 8007fcc:	89a3      	ldrh	r3, [r4, #12]
 8007fce:	4a02      	ldr	r2, [pc, #8]	; (8007fd8 <__sread+0x24>)
 8007fd0:	4013      	ands	r3, r2
 8007fd2:	81a3      	strh	r3, [r4, #12]
 8007fd4:	e7f9      	b.n	8007fca <__sread+0x16>
 8007fd6:	46c0      	nop			; (mov r8, r8)
 8007fd8:	ffffefff 	.word	0xffffefff

08007fdc <__swrite>:
 8007fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fde:	001f      	movs	r7, r3
 8007fe0:	898b      	ldrh	r3, [r1, #12]
 8007fe2:	0005      	movs	r5, r0
 8007fe4:	000c      	movs	r4, r1
 8007fe6:	0016      	movs	r6, r2
 8007fe8:	05db      	lsls	r3, r3, #23
 8007fea:	d505      	bpl.n	8007ff8 <__swrite+0x1c>
 8007fec:	230e      	movs	r3, #14
 8007fee:	5ec9      	ldrsh	r1, [r1, r3]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	2302      	movs	r3, #2
 8007ff4:	f000 f884 	bl	8008100 <_lseek_r>
 8007ff8:	89a3      	ldrh	r3, [r4, #12]
 8007ffa:	4a05      	ldr	r2, [pc, #20]	; (8008010 <__swrite+0x34>)
 8007ffc:	0028      	movs	r0, r5
 8007ffe:	4013      	ands	r3, r2
 8008000:	81a3      	strh	r3, [r4, #12]
 8008002:	0032      	movs	r2, r6
 8008004:	230e      	movs	r3, #14
 8008006:	5ee1      	ldrsh	r1, [r4, r3]
 8008008:	003b      	movs	r3, r7
 800800a:	f000 f8b3 	bl	8008174 <_write_r>
 800800e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008010:	ffffefff 	.word	0xffffefff

08008014 <__sseek>:
 8008014:	b570      	push	{r4, r5, r6, lr}
 8008016:	000c      	movs	r4, r1
 8008018:	250e      	movs	r5, #14
 800801a:	5f49      	ldrsh	r1, [r1, r5]
 800801c:	f000 f870 	bl	8008100 <_lseek_r>
 8008020:	89a3      	ldrh	r3, [r4, #12]
 8008022:	1c42      	adds	r2, r0, #1
 8008024:	d103      	bne.n	800802e <__sseek+0x1a>
 8008026:	4a05      	ldr	r2, [pc, #20]	; (800803c <__sseek+0x28>)
 8008028:	4013      	ands	r3, r2
 800802a:	81a3      	strh	r3, [r4, #12]
 800802c:	bd70      	pop	{r4, r5, r6, pc}
 800802e:	2280      	movs	r2, #128	; 0x80
 8008030:	0152      	lsls	r2, r2, #5
 8008032:	4313      	orrs	r3, r2
 8008034:	81a3      	strh	r3, [r4, #12]
 8008036:	6560      	str	r0, [r4, #84]	; 0x54
 8008038:	e7f8      	b.n	800802c <__sseek+0x18>
 800803a:	46c0      	nop			; (mov r8, r8)
 800803c:	ffffefff 	.word	0xffffefff

08008040 <__sclose>:
 8008040:	b510      	push	{r4, lr}
 8008042:	230e      	movs	r3, #14
 8008044:	5ec9      	ldrsh	r1, [r1, r3]
 8008046:	f000 f849 	bl	80080dc <_close_r>
 800804a:	bd10      	pop	{r4, pc}

0800804c <memset>:
 800804c:	0003      	movs	r3, r0
 800804e:	1882      	adds	r2, r0, r2
 8008050:	4293      	cmp	r3, r2
 8008052:	d100      	bne.n	8008056 <memset+0xa>
 8008054:	4770      	bx	lr
 8008056:	7019      	strb	r1, [r3, #0]
 8008058:	3301      	adds	r3, #1
 800805a:	e7f9      	b.n	8008050 <memset+0x4>

0800805c <strncmp>:
 800805c:	b530      	push	{r4, r5, lr}
 800805e:	0005      	movs	r5, r0
 8008060:	1e10      	subs	r0, r2, #0
 8008062:	d00b      	beq.n	800807c <strncmp+0x20>
 8008064:	2400      	movs	r4, #0
 8008066:	3a01      	subs	r2, #1
 8008068:	5d2b      	ldrb	r3, [r5, r4]
 800806a:	5d08      	ldrb	r0, [r1, r4]
 800806c:	4283      	cmp	r3, r0
 800806e:	d104      	bne.n	800807a <strncmp+0x1e>
 8008070:	42a2      	cmp	r2, r4
 8008072:	d002      	beq.n	800807a <strncmp+0x1e>
 8008074:	3401      	adds	r4, #1
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1f6      	bne.n	8008068 <strncmp+0xc>
 800807a:	1a18      	subs	r0, r3, r0
 800807c:	bd30      	pop	{r4, r5, pc}

0800807e <strncpy>:
 800807e:	0003      	movs	r3, r0
 8008080:	b530      	push	{r4, r5, lr}
 8008082:	001d      	movs	r5, r3
 8008084:	2a00      	cmp	r2, #0
 8008086:	d006      	beq.n	8008096 <strncpy+0x18>
 8008088:	780c      	ldrb	r4, [r1, #0]
 800808a:	3a01      	subs	r2, #1
 800808c:	3301      	adds	r3, #1
 800808e:	702c      	strb	r4, [r5, #0]
 8008090:	3101      	adds	r1, #1
 8008092:	2c00      	cmp	r4, #0
 8008094:	d1f5      	bne.n	8008082 <strncpy+0x4>
 8008096:	2100      	movs	r1, #0
 8008098:	189a      	adds	r2, r3, r2
 800809a:	4293      	cmp	r3, r2
 800809c:	d100      	bne.n	80080a0 <strncpy+0x22>
 800809e:	bd30      	pop	{r4, r5, pc}
 80080a0:	7019      	strb	r1, [r3, #0]
 80080a2:	3301      	adds	r3, #1
 80080a4:	e7f9      	b.n	800809a <strncpy+0x1c>

080080a6 <strstr>:
 80080a6:	780a      	ldrb	r2, [r1, #0]
 80080a8:	b530      	push	{r4, r5, lr}
 80080aa:	2a00      	cmp	r2, #0
 80080ac:	d10c      	bne.n	80080c8 <strstr+0x22>
 80080ae:	bd30      	pop	{r4, r5, pc}
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d108      	bne.n	80080c6 <strstr+0x20>
 80080b4:	2301      	movs	r3, #1
 80080b6:	5ccc      	ldrb	r4, [r1, r3]
 80080b8:	2c00      	cmp	r4, #0
 80080ba:	d0f8      	beq.n	80080ae <strstr+0x8>
 80080bc:	5cc5      	ldrb	r5, [r0, r3]
 80080be:	42a5      	cmp	r5, r4
 80080c0:	d101      	bne.n	80080c6 <strstr+0x20>
 80080c2:	3301      	adds	r3, #1
 80080c4:	e7f7      	b.n	80080b6 <strstr+0x10>
 80080c6:	3001      	adds	r0, #1
 80080c8:	7803      	ldrb	r3, [r0, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d1f0      	bne.n	80080b0 <strstr+0xa>
 80080ce:	0018      	movs	r0, r3
 80080d0:	e7ed      	b.n	80080ae <strstr+0x8>
	...

080080d4 <_localeconv_r>:
 80080d4:	4800      	ldr	r0, [pc, #0]	; (80080d8 <_localeconv_r+0x4>)
 80080d6:	4770      	bx	lr
 80080d8:	20000114 	.word	0x20000114

080080dc <_close_r>:
 80080dc:	2300      	movs	r3, #0
 80080de:	b570      	push	{r4, r5, r6, lr}
 80080e0:	4d06      	ldr	r5, [pc, #24]	; (80080fc <_close_r+0x20>)
 80080e2:	0004      	movs	r4, r0
 80080e4:	0008      	movs	r0, r1
 80080e6:	602b      	str	r3, [r5, #0]
 80080e8:	f7fa ffd3 	bl	8003092 <_close>
 80080ec:	1c43      	adds	r3, r0, #1
 80080ee:	d103      	bne.n	80080f8 <_close_r+0x1c>
 80080f0:	682b      	ldr	r3, [r5, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d000      	beq.n	80080f8 <_close_r+0x1c>
 80080f6:	6023      	str	r3, [r4, #0]
 80080f8:	bd70      	pop	{r4, r5, r6, pc}
 80080fa:	46c0      	nop			; (mov r8, r8)
 80080fc:	200006bc 	.word	0x200006bc

08008100 <_lseek_r>:
 8008100:	b570      	push	{r4, r5, r6, lr}
 8008102:	0004      	movs	r4, r0
 8008104:	0008      	movs	r0, r1
 8008106:	0011      	movs	r1, r2
 8008108:	001a      	movs	r2, r3
 800810a:	2300      	movs	r3, #0
 800810c:	4d05      	ldr	r5, [pc, #20]	; (8008124 <_lseek_r+0x24>)
 800810e:	602b      	str	r3, [r5, #0]
 8008110:	f7fa ffe0 	bl	80030d4 <_lseek>
 8008114:	1c43      	adds	r3, r0, #1
 8008116:	d103      	bne.n	8008120 <_lseek_r+0x20>
 8008118:	682b      	ldr	r3, [r5, #0]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d000      	beq.n	8008120 <_lseek_r+0x20>
 800811e:	6023      	str	r3, [r4, #0]
 8008120:	bd70      	pop	{r4, r5, r6, pc}
 8008122:	46c0      	nop			; (mov r8, r8)
 8008124:	200006bc 	.word	0x200006bc

08008128 <_read_r>:
 8008128:	b570      	push	{r4, r5, r6, lr}
 800812a:	0004      	movs	r4, r0
 800812c:	0008      	movs	r0, r1
 800812e:	0011      	movs	r1, r2
 8008130:	001a      	movs	r2, r3
 8008132:	2300      	movs	r3, #0
 8008134:	4d05      	ldr	r5, [pc, #20]	; (800814c <_read_r+0x24>)
 8008136:	602b      	str	r3, [r5, #0]
 8008138:	f7fa ff72 	bl	8003020 <_read>
 800813c:	1c43      	adds	r3, r0, #1
 800813e:	d103      	bne.n	8008148 <_read_r+0x20>
 8008140:	682b      	ldr	r3, [r5, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d000      	beq.n	8008148 <_read_r+0x20>
 8008146:	6023      	str	r3, [r4, #0]
 8008148:	bd70      	pop	{r4, r5, r6, pc}
 800814a:	46c0      	nop			; (mov r8, r8)
 800814c:	200006bc 	.word	0x200006bc

08008150 <_sbrk_r>:
 8008150:	2300      	movs	r3, #0
 8008152:	b570      	push	{r4, r5, r6, lr}
 8008154:	4d06      	ldr	r5, [pc, #24]	; (8008170 <_sbrk_r+0x20>)
 8008156:	0004      	movs	r4, r0
 8008158:	0008      	movs	r0, r1
 800815a:	602b      	str	r3, [r5, #0]
 800815c:	f7fa ffc6 	bl	80030ec <_sbrk>
 8008160:	1c43      	adds	r3, r0, #1
 8008162:	d103      	bne.n	800816c <_sbrk_r+0x1c>
 8008164:	682b      	ldr	r3, [r5, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d000      	beq.n	800816c <_sbrk_r+0x1c>
 800816a:	6023      	str	r3, [r4, #0]
 800816c:	bd70      	pop	{r4, r5, r6, pc}
 800816e:	46c0      	nop			; (mov r8, r8)
 8008170:	200006bc 	.word	0x200006bc

08008174 <_write_r>:
 8008174:	b570      	push	{r4, r5, r6, lr}
 8008176:	0004      	movs	r4, r0
 8008178:	0008      	movs	r0, r1
 800817a:	0011      	movs	r1, r2
 800817c:	001a      	movs	r2, r3
 800817e:	2300      	movs	r3, #0
 8008180:	4d05      	ldr	r5, [pc, #20]	; (8008198 <_write_r+0x24>)
 8008182:	602b      	str	r3, [r5, #0]
 8008184:	f7fa ff69 	bl	800305a <_write>
 8008188:	1c43      	adds	r3, r0, #1
 800818a:	d103      	bne.n	8008194 <_write_r+0x20>
 800818c:	682b      	ldr	r3, [r5, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d000      	beq.n	8008194 <_write_r+0x20>
 8008192:	6023      	str	r3, [r4, #0]
 8008194:	bd70      	pop	{r4, r5, r6, pc}
 8008196:	46c0      	nop			; (mov r8, r8)
 8008198:	200006bc 	.word	0x200006bc

0800819c <__errno>:
 800819c:	4b01      	ldr	r3, [pc, #4]	; (80081a4 <__errno+0x8>)
 800819e:	6818      	ldr	r0, [r3, #0]
 80081a0:	4770      	bx	lr
 80081a2:	46c0      	nop			; (mov r8, r8)
 80081a4:	200001dc 	.word	0x200001dc

080081a8 <__libc_init_array>:
 80081a8:	b570      	push	{r4, r5, r6, lr}
 80081aa:	2600      	movs	r6, #0
 80081ac:	4c0c      	ldr	r4, [pc, #48]	; (80081e0 <__libc_init_array+0x38>)
 80081ae:	4d0d      	ldr	r5, [pc, #52]	; (80081e4 <__libc_init_array+0x3c>)
 80081b0:	1b64      	subs	r4, r4, r5
 80081b2:	10a4      	asrs	r4, r4, #2
 80081b4:	42a6      	cmp	r6, r4
 80081b6:	d109      	bne.n	80081cc <__libc_init_array+0x24>
 80081b8:	2600      	movs	r6, #0
 80081ba:	f002 fcd9 	bl	800ab70 <_init>
 80081be:	4c0a      	ldr	r4, [pc, #40]	; (80081e8 <__libc_init_array+0x40>)
 80081c0:	4d0a      	ldr	r5, [pc, #40]	; (80081ec <__libc_init_array+0x44>)
 80081c2:	1b64      	subs	r4, r4, r5
 80081c4:	10a4      	asrs	r4, r4, #2
 80081c6:	42a6      	cmp	r6, r4
 80081c8:	d105      	bne.n	80081d6 <__libc_init_array+0x2e>
 80081ca:	bd70      	pop	{r4, r5, r6, pc}
 80081cc:	00b3      	lsls	r3, r6, #2
 80081ce:	58eb      	ldr	r3, [r5, r3]
 80081d0:	4798      	blx	r3
 80081d2:	3601      	adds	r6, #1
 80081d4:	e7ee      	b.n	80081b4 <__libc_init_array+0xc>
 80081d6:	00b3      	lsls	r3, r6, #2
 80081d8:	58eb      	ldr	r3, [r5, r3]
 80081da:	4798      	blx	r3
 80081dc:	3601      	adds	r6, #1
 80081de:	e7f2      	b.n	80081c6 <__libc_init_array+0x1e>
 80081e0:	0800b0fc 	.word	0x0800b0fc
 80081e4:	0800b0fc 	.word	0x0800b0fc
 80081e8:	0800b100 	.word	0x0800b100
 80081ec:	0800b0fc 	.word	0x0800b0fc

080081f0 <__retarget_lock_init_recursive>:
 80081f0:	4770      	bx	lr

080081f2 <__retarget_lock_acquire_recursive>:
 80081f2:	4770      	bx	lr

080081f4 <__retarget_lock_release_recursive>:
 80081f4:	4770      	bx	lr

080081f6 <memchr>:
 80081f6:	b2c9      	uxtb	r1, r1
 80081f8:	1882      	adds	r2, r0, r2
 80081fa:	4290      	cmp	r0, r2
 80081fc:	d101      	bne.n	8008202 <memchr+0xc>
 80081fe:	2000      	movs	r0, #0
 8008200:	4770      	bx	lr
 8008202:	7803      	ldrb	r3, [r0, #0]
 8008204:	428b      	cmp	r3, r1
 8008206:	d0fb      	beq.n	8008200 <memchr+0xa>
 8008208:	3001      	adds	r0, #1
 800820a:	e7f6      	b.n	80081fa <memchr+0x4>

0800820c <memcpy>:
 800820c:	2300      	movs	r3, #0
 800820e:	b510      	push	{r4, lr}
 8008210:	429a      	cmp	r2, r3
 8008212:	d100      	bne.n	8008216 <memcpy+0xa>
 8008214:	bd10      	pop	{r4, pc}
 8008216:	5ccc      	ldrb	r4, [r1, r3]
 8008218:	54c4      	strb	r4, [r0, r3]
 800821a:	3301      	adds	r3, #1
 800821c:	e7f8      	b.n	8008210 <memcpy+0x4>
	...

08008220 <nan>:
 8008220:	2000      	movs	r0, #0
 8008222:	4901      	ldr	r1, [pc, #4]	; (8008228 <nan+0x8>)
 8008224:	4770      	bx	lr
 8008226:	46c0      	nop			; (mov r8, r8)
 8008228:	7ff80000 	.word	0x7ff80000

0800822c <nanf>:
 800822c:	4800      	ldr	r0, [pc, #0]	; (8008230 <nanf+0x4>)
 800822e:	4770      	bx	lr
 8008230:	7fc00000 	.word	0x7fc00000

08008234 <quorem>:
 8008234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008236:	6902      	ldr	r2, [r0, #16]
 8008238:	690b      	ldr	r3, [r1, #16]
 800823a:	b089      	sub	sp, #36	; 0x24
 800823c:	0007      	movs	r7, r0
 800823e:	9104      	str	r1, [sp, #16]
 8008240:	2000      	movs	r0, #0
 8008242:	429a      	cmp	r2, r3
 8008244:	db69      	blt.n	800831a <quorem+0xe6>
 8008246:	3b01      	subs	r3, #1
 8008248:	009c      	lsls	r4, r3, #2
 800824a:	9301      	str	r3, [sp, #4]
 800824c:	000b      	movs	r3, r1
 800824e:	3314      	adds	r3, #20
 8008250:	9306      	str	r3, [sp, #24]
 8008252:	191b      	adds	r3, r3, r4
 8008254:	9305      	str	r3, [sp, #20]
 8008256:	003b      	movs	r3, r7
 8008258:	3314      	adds	r3, #20
 800825a:	9303      	str	r3, [sp, #12]
 800825c:	191c      	adds	r4, r3, r4
 800825e:	9b05      	ldr	r3, [sp, #20]
 8008260:	6826      	ldr	r6, [r4, #0]
 8008262:	681d      	ldr	r5, [r3, #0]
 8008264:	0030      	movs	r0, r6
 8008266:	3501      	adds	r5, #1
 8008268:	0029      	movs	r1, r5
 800826a:	f7f7 ff67 	bl	800013c <__udivsi3>
 800826e:	9002      	str	r0, [sp, #8]
 8008270:	42ae      	cmp	r6, r5
 8008272:	d329      	bcc.n	80082c8 <quorem+0x94>
 8008274:	9b06      	ldr	r3, [sp, #24]
 8008276:	2600      	movs	r6, #0
 8008278:	469c      	mov	ip, r3
 800827a:	9d03      	ldr	r5, [sp, #12]
 800827c:	9606      	str	r6, [sp, #24]
 800827e:	4662      	mov	r2, ip
 8008280:	ca08      	ldmia	r2!, {r3}
 8008282:	6828      	ldr	r0, [r5, #0]
 8008284:	4694      	mov	ip, r2
 8008286:	9a02      	ldr	r2, [sp, #8]
 8008288:	b299      	uxth	r1, r3
 800828a:	4351      	muls	r1, r2
 800828c:	0c1b      	lsrs	r3, r3, #16
 800828e:	4353      	muls	r3, r2
 8008290:	1989      	adds	r1, r1, r6
 8008292:	0c0a      	lsrs	r2, r1, #16
 8008294:	189b      	adds	r3, r3, r2
 8008296:	9307      	str	r3, [sp, #28]
 8008298:	0c1e      	lsrs	r6, r3, #16
 800829a:	9b06      	ldr	r3, [sp, #24]
 800829c:	b282      	uxth	r2, r0
 800829e:	18d2      	adds	r2, r2, r3
 80082a0:	466b      	mov	r3, sp
 80082a2:	b289      	uxth	r1, r1
 80082a4:	8b9b      	ldrh	r3, [r3, #28]
 80082a6:	1a52      	subs	r2, r2, r1
 80082a8:	0c01      	lsrs	r1, r0, #16
 80082aa:	1ac9      	subs	r1, r1, r3
 80082ac:	1413      	asrs	r3, r2, #16
 80082ae:	18cb      	adds	r3, r1, r3
 80082b0:	1419      	asrs	r1, r3, #16
 80082b2:	b292      	uxth	r2, r2
 80082b4:	041b      	lsls	r3, r3, #16
 80082b6:	4313      	orrs	r3, r2
 80082b8:	c508      	stmia	r5!, {r3}
 80082ba:	9b05      	ldr	r3, [sp, #20]
 80082bc:	9106      	str	r1, [sp, #24]
 80082be:	4563      	cmp	r3, ip
 80082c0:	d2dd      	bcs.n	800827e <quorem+0x4a>
 80082c2:	6823      	ldr	r3, [r4, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d030      	beq.n	800832a <quorem+0xf6>
 80082c8:	0038      	movs	r0, r7
 80082ca:	9904      	ldr	r1, [sp, #16]
 80082cc:	f001 fcda 	bl	8009c84 <__mcmp>
 80082d0:	2800      	cmp	r0, #0
 80082d2:	db21      	blt.n	8008318 <quorem+0xe4>
 80082d4:	0038      	movs	r0, r7
 80082d6:	2600      	movs	r6, #0
 80082d8:	9b02      	ldr	r3, [sp, #8]
 80082da:	9c04      	ldr	r4, [sp, #16]
 80082dc:	3301      	adds	r3, #1
 80082de:	9302      	str	r3, [sp, #8]
 80082e0:	3014      	adds	r0, #20
 80082e2:	3414      	adds	r4, #20
 80082e4:	6803      	ldr	r3, [r0, #0]
 80082e6:	cc02      	ldmia	r4!, {r1}
 80082e8:	b29d      	uxth	r5, r3
 80082ea:	19ad      	adds	r5, r5, r6
 80082ec:	b28a      	uxth	r2, r1
 80082ee:	1aaa      	subs	r2, r5, r2
 80082f0:	0c09      	lsrs	r1, r1, #16
 80082f2:	0c1b      	lsrs	r3, r3, #16
 80082f4:	1a5b      	subs	r3, r3, r1
 80082f6:	1411      	asrs	r1, r2, #16
 80082f8:	185b      	adds	r3, r3, r1
 80082fa:	141e      	asrs	r6, r3, #16
 80082fc:	b292      	uxth	r2, r2
 80082fe:	041b      	lsls	r3, r3, #16
 8008300:	4313      	orrs	r3, r2
 8008302:	c008      	stmia	r0!, {r3}
 8008304:	9b05      	ldr	r3, [sp, #20]
 8008306:	42a3      	cmp	r3, r4
 8008308:	d2ec      	bcs.n	80082e4 <quorem+0xb0>
 800830a:	9b01      	ldr	r3, [sp, #4]
 800830c:	9a03      	ldr	r2, [sp, #12]
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	18d3      	adds	r3, r2, r3
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	2a00      	cmp	r2, #0
 8008316:	d015      	beq.n	8008344 <quorem+0x110>
 8008318:	9802      	ldr	r0, [sp, #8]
 800831a:	b009      	add	sp, #36	; 0x24
 800831c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800831e:	6823      	ldr	r3, [r4, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d106      	bne.n	8008332 <quorem+0xfe>
 8008324:	9b01      	ldr	r3, [sp, #4]
 8008326:	3b01      	subs	r3, #1
 8008328:	9301      	str	r3, [sp, #4]
 800832a:	9b03      	ldr	r3, [sp, #12]
 800832c:	3c04      	subs	r4, #4
 800832e:	42a3      	cmp	r3, r4
 8008330:	d3f5      	bcc.n	800831e <quorem+0xea>
 8008332:	9b01      	ldr	r3, [sp, #4]
 8008334:	613b      	str	r3, [r7, #16]
 8008336:	e7c7      	b.n	80082c8 <quorem+0x94>
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	2a00      	cmp	r2, #0
 800833c:	d106      	bne.n	800834c <quorem+0x118>
 800833e:	9a01      	ldr	r2, [sp, #4]
 8008340:	3a01      	subs	r2, #1
 8008342:	9201      	str	r2, [sp, #4]
 8008344:	9a03      	ldr	r2, [sp, #12]
 8008346:	3b04      	subs	r3, #4
 8008348:	429a      	cmp	r2, r3
 800834a:	d3f5      	bcc.n	8008338 <quorem+0x104>
 800834c:	9b01      	ldr	r3, [sp, #4]
 800834e:	613b      	str	r3, [r7, #16]
 8008350:	e7e2      	b.n	8008318 <quorem+0xe4>
	...

08008354 <_dtoa_r>:
 8008354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008356:	0014      	movs	r4, r2
 8008358:	001d      	movs	r5, r3
 800835a:	69c6      	ldr	r6, [r0, #28]
 800835c:	b09d      	sub	sp, #116	; 0x74
 800835e:	9408      	str	r4, [sp, #32]
 8008360:	9509      	str	r5, [sp, #36]	; 0x24
 8008362:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8008364:	9004      	str	r0, [sp, #16]
 8008366:	2e00      	cmp	r6, #0
 8008368:	d10f      	bne.n	800838a <_dtoa_r+0x36>
 800836a:	2010      	movs	r0, #16
 800836c:	f7fd ff22 	bl	80061b4 <malloc>
 8008370:	9b04      	ldr	r3, [sp, #16]
 8008372:	1e02      	subs	r2, r0, #0
 8008374:	61d8      	str	r0, [r3, #28]
 8008376:	d104      	bne.n	8008382 <_dtoa_r+0x2e>
 8008378:	21ef      	movs	r1, #239	; 0xef
 800837a:	4bc6      	ldr	r3, [pc, #792]	; (8008694 <_dtoa_r+0x340>)
 800837c:	48c6      	ldr	r0, [pc, #792]	; (8008698 <_dtoa_r+0x344>)
 800837e:	f002 f8a1 	bl	800a4c4 <__assert_func>
 8008382:	6046      	str	r6, [r0, #4]
 8008384:	6086      	str	r6, [r0, #8]
 8008386:	6006      	str	r6, [r0, #0]
 8008388:	60c6      	str	r6, [r0, #12]
 800838a:	9b04      	ldr	r3, [sp, #16]
 800838c:	69db      	ldr	r3, [r3, #28]
 800838e:	6819      	ldr	r1, [r3, #0]
 8008390:	2900      	cmp	r1, #0
 8008392:	d00b      	beq.n	80083ac <_dtoa_r+0x58>
 8008394:	685a      	ldr	r2, [r3, #4]
 8008396:	2301      	movs	r3, #1
 8008398:	4093      	lsls	r3, r2
 800839a:	604a      	str	r2, [r1, #4]
 800839c:	608b      	str	r3, [r1, #8]
 800839e:	9804      	ldr	r0, [sp, #16]
 80083a0:	f001 f9e2 	bl	8009768 <_Bfree>
 80083a4:	2200      	movs	r2, #0
 80083a6:	9b04      	ldr	r3, [sp, #16]
 80083a8:	69db      	ldr	r3, [r3, #28]
 80083aa:	601a      	str	r2, [r3, #0]
 80083ac:	2d00      	cmp	r5, #0
 80083ae:	da1e      	bge.n	80083ee <_dtoa_r+0x9a>
 80083b0:	2301      	movs	r3, #1
 80083b2:	603b      	str	r3, [r7, #0]
 80083b4:	006b      	lsls	r3, r5, #1
 80083b6:	085b      	lsrs	r3, r3, #1
 80083b8:	9309      	str	r3, [sp, #36]	; 0x24
 80083ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80083bc:	4bb7      	ldr	r3, [pc, #732]	; (800869c <_dtoa_r+0x348>)
 80083be:	4ab7      	ldr	r2, [pc, #732]	; (800869c <_dtoa_r+0x348>)
 80083c0:	403b      	ands	r3, r7
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d116      	bne.n	80083f4 <_dtoa_r+0xa0>
 80083c6:	4bb6      	ldr	r3, [pc, #728]	; (80086a0 <_dtoa_r+0x34c>)
 80083c8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80083ca:	6013      	str	r3, [r2, #0]
 80083cc:	033b      	lsls	r3, r7, #12
 80083ce:	0b1b      	lsrs	r3, r3, #12
 80083d0:	4323      	orrs	r3, r4
 80083d2:	d101      	bne.n	80083d8 <_dtoa_r+0x84>
 80083d4:	f000 fdb5 	bl	8008f42 <_dtoa_r+0xbee>
 80083d8:	4bb2      	ldr	r3, [pc, #712]	; (80086a4 <_dtoa_r+0x350>)
 80083da:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80083dc:	9306      	str	r3, [sp, #24]
 80083de:	2a00      	cmp	r2, #0
 80083e0:	d002      	beq.n	80083e8 <_dtoa_r+0x94>
 80083e2:	4bb1      	ldr	r3, [pc, #708]	; (80086a8 <_dtoa_r+0x354>)
 80083e4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80083e6:	6013      	str	r3, [r2, #0]
 80083e8:	9806      	ldr	r0, [sp, #24]
 80083ea:	b01d      	add	sp, #116	; 0x74
 80083ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083ee:	2300      	movs	r3, #0
 80083f0:	603b      	str	r3, [r7, #0]
 80083f2:	e7e2      	b.n	80083ba <_dtoa_r+0x66>
 80083f4:	9a08      	ldr	r2, [sp, #32]
 80083f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083f8:	9210      	str	r2, [sp, #64]	; 0x40
 80083fa:	9311      	str	r3, [sp, #68]	; 0x44
 80083fc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80083fe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008400:	2200      	movs	r2, #0
 8008402:	2300      	movs	r3, #0
 8008404:	f7f8 f820 	bl	8000448 <__aeabi_dcmpeq>
 8008408:	1e06      	subs	r6, r0, #0
 800840a:	d009      	beq.n	8008420 <_dtoa_r+0xcc>
 800840c:	2301      	movs	r3, #1
 800840e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008410:	6013      	str	r3, [r2, #0]
 8008412:	4ba6      	ldr	r3, [pc, #664]	; (80086ac <_dtoa_r+0x358>)
 8008414:	9306      	str	r3, [sp, #24]
 8008416:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008418:	2b00      	cmp	r3, #0
 800841a:	d0e5      	beq.n	80083e8 <_dtoa_r+0x94>
 800841c:	4ba4      	ldr	r3, [pc, #656]	; (80086b0 <_dtoa_r+0x35c>)
 800841e:	e7e1      	b.n	80083e4 <_dtoa_r+0x90>
 8008420:	ab1a      	add	r3, sp, #104	; 0x68
 8008422:	9301      	str	r3, [sp, #4]
 8008424:	ab1b      	add	r3, sp, #108	; 0x6c
 8008426:	9300      	str	r3, [sp, #0]
 8008428:	9804      	ldr	r0, [sp, #16]
 800842a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800842c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800842e:	f001 fd45 	bl	8009ebc <__d2b>
 8008432:	007a      	lsls	r2, r7, #1
 8008434:	9005      	str	r0, [sp, #20]
 8008436:	0d52      	lsrs	r2, r2, #21
 8008438:	d100      	bne.n	800843c <_dtoa_r+0xe8>
 800843a:	e07b      	b.n	8008534 <_dtoa_r+0x1e0>
 800843c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800843e:	9617      	str	r6, [sp, #92]	; 0x5c
 8008440:	0319      	lsls	r1, r3, #12
 8008442:	4b9c      	ldr	r3, [pc, #624]	; (80086b4 <_dtoa_r+0x360>)
 8008444:	0b09      	lsrs	r1, r1, #12
 8008446:	430b      	orrs	r3, r1
 8008448:	499b      	ldr	r1, [pc, #620]	; (80086b8 <_dtoa_r+0x364>)
 800844a:	1857      	adds	r7, r2, r1
 800844c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800844e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008450:	0019      	movs	r1, r3
 8008452:	2200      	movs	r2, #0
 8008454:	4b99      	ldr	r3, [pc, #612]	; (80086bc <_dtoa_r+0x368>)
 8008456:	f7f9 fb9d 	bl	8001b94 <__aeabi_dsub>
 800845a:	4a99      	ldr	r2, [pc, #612]	; (80086c0 <_dtoa_r+0x36c>)
 800845c:	4b99      	ldr	r3, [pc, #612]	; (80086c4 <_dtoa_r+0x370>)
 800845e:	f7f9 f8d7 	bl	8001610 <__aeabi_dmul>
 8008462:	4a99      	ldr	r2, [pc, #612]	; (80086c8 <_dtoa_r+0x374>)
 8008464:	4b99      	ldr	r3, [pc, #612]	; (80086cc <_dtoa_r+0x378>)
 8008466:	f7f8 f979 	bl	800075c <__aeabi_dadd>
 800846a:	0004      	movs	r4, r0
 800846c:	0038      	movs	r0, r7
 800846e:	000d      	movs	r5, r1
 8008470:	f7f9 ff66 	bl	8002340 <__aeabi_i2d>
 8008474:	4a96      	ldr	r2, [pc, #600]	; (80086d0 <_dtoa_r+0x37c>)
 8008476:	4b97      	ldr	r3, [pc, #604]	; (80086d4 <_dtoa_r+0x380>)
 8008478:	f7f9 f8ca 	bl	8001610 <__aeabi_dmul>
 800847c:	0002      	movs	r2, r0
 800847e:	000b      	movs	r3, r1
 8008480:	0020      	movs	r0, r4
 8008482:	0029      	movs	r1, r5
 8008484:	f7f8 f96a 	bl	800075c <__aeabi_dadd>
 8008488:	0004      	movs	r4, r0
 800848a:	000d      	movs	r5, r1
 800848c:	f7f9 ff22 	bl	80022d4 <__aeabi_d2iz>
 8008490:	2200      	movs	r2, #0
 8008492:	9003      	str	r0, [sp, #12]
 8008494:	2300      	movs	r3, #0
 8008496:	0020      	movs	r0, r4
 8008498:	0029      	movs	r1, r5
 800849a:	f7f7 ffdb 	bl	8000454 <__aeabi_dcmplt>
 800849e:	2800      	cmp	r0, #0
 80084a0:	d00b      	beq.n	80084ba <_dtoa_r+0x166>
 80084a2:	9803      	ldr	r0, [sp, #12]
 80084a4:	f7f9 ff4c 	bl	8002340 <__aeabi_i2d>
 80084a8:	002b      	movs	r3, r5
 80084aa:	0022      	movs	r2, r4
 80084ac:	f7f7 ffcc 	bl	8000448 <__aeabi_dcmpeq>
 80084b0:	4243      	negs	r3, r0
 80084b2:	4158      	adcs	r0, r3
 80084b4:	9b03      	ldr	r3, [sp, #12]
 80084b6:	1a1b      	subs	r3, r3, r0
 80084b8:	9303      	str	r3, [sp, #12]
 80084ba:	2301      	movs	r3, #1
 80084bc:	9316      	str	r3, [sp, #88]	; 0x58
 80084be:	9b03      	ldr	r3, [sp, #12]
 80084c0:	2b16      	cmp	r3, #22
 80084c2:	d810      	bhi.n	80084e6 <_dtoa_r+0x192>
 80084c4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80084c6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80084c8:	9a03      	ldr	r2, [sp, #12]
 80084ca:	4b83      	ldr	r3, [pc, #524]	; (80086d8 <_dtoa_r+0x384>)
 80084cc:	00d2      	lsls	r2, r2, #3
 80084ce:	189b      	adds	r3, r3, r2
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	f7f7 ffbe 	bl	8000454 <__aeabi_dcmplt>
 80084d8:	2800      	cmp	r0, #0
 80084da:	d047      	beq.n	800856c <_dtoa_r+0x218>
 80084dc:	9b03      	ldr	r3, [sp, #12]
 80084de:	3b01      	subs	r3, #1
 80084e0:	9303      	str	r3, [sp, #12]
 80084e2:	2300      	movs	r3, #0
 80084e4:	9316      	str	r3, [sp, #88]	; 0x58
 80084e6:	2200      	movs	r2, #0
 80084e8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80084ea:	920a      	str	r2, [sp, #40]	; 0x28
 80084ec:	1bdb      	subs	r3, r3, r7
 80084ee:	1e5a      	subs	r2, r3, #1
 80084f0:	d53e      	bpl.n	8008570 <_dtoa_r+0x21c>
 80084f2:	2201      	movs	r2, #1
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	930a      	str	r3, [sp, #40]	; 0x28
 80084f8:	2300      	movs	r3, #0
 80084fa:	930c      	str	r3, [sp, #48]	; 0x30
 80084fc:	9b03      	ldr	r3, [sp, #12]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	db38      	blt.n	8008574 <_dtoa_r+0x220>
 8008502:	9a03      	ldr	r2, [sp, #12]
 8008504:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008506:	4694      	mov	ip, r2
 8008508:	4463      	add	r3, ip
 800850a:	930c      	str	r3, [sp, #48]	; 0x30
 800850c:	2300      	movs	r3, #0
 800850e:	9213      	str	r2, [sp, #76]	; 0x4c
 8008510:	930d      	str	r3, [sp, #52]	; 0x34
 8008512:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008514:	2401      	movs	r4, #1
 8008516:	2b09      	cmp	r3, #9
 8008518:	d867      	bhi.n	80085ea <_dtoa_r+0x296>
 800851a:	2b05      	cmp	r3, #5
 800851c:	dd02      	ble.n	8008524 <_dtoa_r+0x1d0>
 800851e:	2400      	movs	r4, #0
 8008520:	3b04      	subs	r3, #4
 8008522:	9322      	str	r3, [sp, #136]	; 0x88
 8008524:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008526:	1e98      	subs	r0, r3, #2
 8008528:	2803      	cmp	r0, #3
 800852a:	d867      	bhi.n	80085fc <_dtoa_r+0x2a8>
 800852c:	f7f7 fdf2 	bl	8000114 <__gnu_thumb1_case_uqi>
 8008530:	5b383a2b 	.word	0x5b383a2b
 8008534:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008536:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8008538:	18f6      	adds	r6, r6, r3
 800853a:	4b68      	ldr	r3, [pc, #416]	; (80086dc <_dtoa_r+0x388>)
 800853c:	18f2      	adds	r2, r6, r3
 800853e:	2a20      	cmp	r2, #32
 8008540:	dd0f      	ble.n	8008562 <_dtoa_r+0x20e>
 8008542:	2340      	movs	r3, #64	; 0x40
 8008544:	1a9b      	subs	r3, r3, r2
 8008546:	409f      	lsls	r7, r3
 8008548:	4b65      	ldr	r3, [pc, #404]	; (80086e0 <_dtoa_r+0x38c>)
 800854a:	0038      	movs	r0, r7
 800854c:	18f3      	adds	r3, r6, r3
 800854e:	40dc      	lsrs	r4, r3
 8008550:	4320      	orrs	r0, r4
 8008552:	f7f9 ff25 	bl	80023a0 <__aeabi_ui2d>
 8008556:	2201      	movs	r2, #1
 8008558:	4b62      	ldr	r3, [pc, #392]	; (80086e4 <_dtoa_r+0x390>)
 800855a:	1e77      	subs	r7, r6, #1
 800855c:	18cb      	adds	r3, r1, r3
 800855e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008560:	e776      	b.n	8008450 <_dtoa_r+0xfc>
 8008562:	2320      	movs	r3, #32
 8008564:	0020      	movs	r0, r4
 8008566:	1a9b      	subs	r3, r3, r2
 8008568:	4098      	lsls	r0, r3
 800856a:	e7f2      	b.n	8008552 <_dtoa_r+0x1fe>
 800856c:	9016      	str	r0, [sp, #88]	; 0x58
 800856e:	e7ba      	b.n	80084e6 <_dtoa_r+0x192>
 8008570:	920c      	str	r2, [sp, #48]	; 0x30
 8008572:	e7c3      	b.n	80084fc <_dtoa_r+0x1a8>
 8008574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008576:	9a03      	ldr	r2, [sp, #12]
 8008578:	1a9b      	subs	r3, r3, r2
 800857a:	930a      	str	r3, [sp, #40]	; 0x28
 800857c:	4253      	negs	r3, r2
 800857e:	930d      	str	r3, [sp, #52]	; 0x34
 8008580:	2300      	movs	r3, #0
 8008582:	9313      	str	r3, [sp, #76]	; 0x4c
 8008584:	e7c5      	b.n	8008512 <_dtoa_r+0x1be>
 8008586:	2300      	movs	r3, #0
 8008588:	930f      	str	r3, [sp, #60]	; 0x3c
 800858a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800858c:	930b      	str	r3, [sp, #44]	; 0x2c
 800858e:	9307      	str	r3, [sp, #28]
 8008590:	2b00      	cmp	r3, #0
 8008592:	dc13      	bgt.n	80085bc <_dtoa_r+0x268>
 8008594:	2301      	movs	r3, #1
 8008596:	001a      	movs	r2, r3
 8008598:	930b      	str	r3, [sp, #44]	; 0x2c
 800859a:	9307      	str	r3, [sp, #28]
 800859c:	9223      	str	r2, [sp, #140]	; 0x8c
 800859e:	e00d      	b.n	80085bc <_dtoa_r+0x268>
 80085a0:	2301      	movs	r3, #1
 80085a2:	e7f1      	b.n	8008588 <_dtoa_r+0x234>
 80085a4:	2300      	movs	r3, #0
 80085a6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80085a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80085aa:	4694      	mov	ip, r2
 80085ac:	9b03      	ldr	r3, [sp, #12]
 80085ae:	4463      	add	r3, ip
 80085b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80085b2:	3301      	adds	r3, #1
 80085b4:	9307      	str	r3, [sp, #28]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	dc00      	bgt.n	80085bc <_dtoa_r+0x268>
 80085ba:	2301      	movs	r3, #1
 80085bc:	9a04      	ldr	r2, [sp, #16]
 80085be:	2100      	movs	r1, #0
 80085c0:	69d0      	ldr	r0, [r2, #28]
 80085c2:	2204      	movs	r2, #4
 80085c4:	0015      	movs	r5, r2
 80085c6:	3514      	adds	r5, #20
 80085c8:	429d      	cmp	r5, r3
 80085ca:	d91b      	bls.n	8008604 <_dtoa_r+0x2b0>
 80085cc:	6041      	str	r1, [r0, #4]
 80085ce:	9804      	ldr	r0, [sp, #16]
 80085d0:	f001 f886 	bl	80096e0 <_Balloc>
 80085d4:	9006      	str	r0, [sp, #24]
 80085d6:	2800      	cmp	r0, #0
 80085d8:	d117      	bne.n	800860a <_dtoa_r+0x2b6>
 80085da:	21b0      	movs	r1, #176	; 0xb0
 80085dc:	4b42      	ldr	r3, [pc, #264]	; (80086e8 <_dtoa_r+0x394>)
 80085de:	482e      	ldr	r0, [pc, #184]	; (8008698 <_dtoa_r+0x344>)
 80085e0:	9a06      	ldr	r2, [sp, #24]
 80085e2:	31ff      	adds	r1, #255	; 0xff
 80085e4:	e6cb      	b.n	800837e <_dtoa_r+0x2a>
 80085e6:	2301      	movs	r3, #1
 80085e8:	e7dd      	b.n	80085a6 <_dtoa_r+0x252>
 80085ea:	2300      	movs	r3, #0
 80085ec:	940f      	str	r4, [sp, #60]	; 0x3c
 80085ee:	9322      	str	r3, [sp, #136]	; 0x88
 80085f0:	3b01      	subs	r3, #1
 80085f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80085f4:	9307      	str	r3, [sp, #28]
 80085f6:	2200      	movs	r2, #0
 80085f8:	3313      	adds	r3, #19
 80085fa:	e7cf      	b.n	800859c <_dtoa_r+0x248>
 80085fc:	2301      	movs	r3, #1
 80085fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8008600:	3b02      	subs	r3, #2
 8008602:	e7f6      	b.n	80085f2 <_dtoa_r+0x29e>
 8008604:	3101      	adds	r1, #1
 8008606:	0052      	lsls	r2, r2, #1
 8008608:	e7dc      	b.n	80085c4 <_dtoa_r+0x270>
 800860a:	9b04      	ldr	r3, [sp, #16]
 800860c:	9a06      	ldr	r2, [sp, #24]
 800860e:	69db      	ldr	r3, [r3, #28]
 8008610:	601a      	str	r2, [r3, #0]
 8008612:	9b07      	ldr	r3, [sp, #28]
 8008614:	2b0e      	cmp	r3, #14
 8008616:	d900      	bls.n	800861a <_dtoa_r+0x2c6>
 8008618:	e0e5      	b.n	80087e6 <_dtoa_r+0x492>
 800861a:	2c00      	cmp	r4, #0
 800861c:	d100      	bne.n	8008620 <_dtoa_r+0x2cc>
 800861e:	e0e2      	b.n	80087e6 <_dtoa_r+0x492>
 8008620:	9b03      	ldr	r3, [sp, #12]
 8008622:	2b00      	cmp	r3, #0
 8008624:	dd64      	ble.n	80086f0 <_dtoa_r+0x39c>
 8008626:	210f      	movs	r1, #15
 8008628:	9a03      	ldr	r2, [sp, #12]
 800862a:	4b2b      	ldr	r3, [pc, #172]	; (80086d8 <_dtoa_r+0x384>)
 800862c:	400a      	ands	r2, r1
 800862e:	00d2      	lsls	r2, r2, #3
 8008630:	189b      	adds	r3, r3, r2
 8008632:	681e      	ldr	r6, [r3, #0]
 8008634:	685f      	ldr	r7, [r3, #4]
 8008636:	9b03      	ldr	r3, [sp, #12]
 8008638:	2402      	movs	r4, #2
 800863a:	111d      	asrs	r5, r3, #4
 800863c:	05db      	lsls	r3, r3, #23
 800863e:	d50a      	bpl.n	8008656 <_dtoa_r+0x302>
 8008640:	4b2a      	ldr	r3, [pc, #168]	; (80086ec <_dtoa_r+0x398>)
 8008642:	400d      	ands	r5, r1
 8008644:	6a1a      	ldr	r2, [r3, #32]
 8008646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008648:	9810      	ldr	r0, [sp, #64]	; 0x40
 800864a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800864c:	f7f8 fbe6 	bl	8000e1c <__aeabi_ddiv>
 8008650:	9008      	str	r0, [sp, #32]
 8008652:	9109      	str	r1, [sp, #36]	; 0x24
 8008654:	3401      	adds	r4, #1
 8008656:	4b25      	ldr	r3, [pc, #148]	; (80086ec <_dtoa_r+0x398>)
 8008658:	930e      	str	r3, [sp, #56]	; 0x38
 800865a:	2d00      	cmp	r5, #0
 800865c:	d108      	bne.n	8008670 <_dtoa_r+0x31c>
 800865e:	9808      	ldr	r0, [sp, #32]
 8008660:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008662:	0032      	movs	r2, r6
 8008664:	003b      	movs	r3, r7
 8008666:	f7f8 fbd9 	bl	8000e1c <__aeabi_ddiv>
 800866a:	9008      	str	r0, [sp, #32]
 800866c:	9109      	str	r1, [sp, #36]	; 0x24
 800866e:	e05a      	b.n	8008726 <_dtoa_r+0x3d2>
 8008670:	2301      	movs	r3, #1
 8008672:	421d      	tst	r5, r3
 8008674:	d009      	beq.n	800868a <_dtoa_r+0x336>
 8008676:	18e4      	adds	r4, r4, r3
 8008678:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800867a:	0030      	movs	r0, r6
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	0039      	movs	r1, r7
 8008682:	f7f8 ffc5 	bl	8001610 <__aeabi_dmul>
 8008686:	0006      	movs	r6, r0
 8008688:	000f      	movs	r7, r1
 800868a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800868c:	106d      	asrs	r5, r5, #1
 800868e:	3308      	adds	r3, #8
 8008690:	e7e2      	b.n	8008658 <_dtoa_r+0x304>
 8008692:	46c0      	nop			; (mov r8, r8)
 8008694:	0800ae6f 	.word	0x0800ae6f
 8008698:	0800ae86 	.word	0x0800ae86
 800869c:	7ff00000 	.word	0x7ff00000
 80086a0:	0000270f 	.word	0x0000270f
 80086a4:	0800ae6b 	.word	0x0800ae6b
 80086a8:	0800ae6e 	.word	0x0800ae6e
 80086ac:	0800ae31 	.word	0x0800ae31
 80086b0:	0800ae32 	.word	0x0800ae32
 80086b4:	3ff00000 	.word	0x3ff00000
 80086b8:	fffffc01 	.word	0xfffffc01
 80086bc:	3ff80000 	.word	0x3ff80000
 80086c0:	636f4361 	.word	0x636f4361
 80086c4:	3fd287a7 	.word	0x3fd287a7
 80086c8:	8b60c8b3 	.word	0x8b60c8b3
 80086cc:	3fc68a28 	.word	0x3fc68a28
 80086d0:	509f79fb 	.word	0x509f79fb
 80086d4:	3fd34413 	.word	0x3fd34413
 80086d8:	0800afd0 	.word	0x0800afd0
 80086dc:	00000432 	.word	0x00000432
 80086e0:	00000412 	.word	0x00000412
 80086e4:	fe100000 	.word	0xfe100000
 80086e8:	0800aede 	.word	0x0800aede
 80086ec:	0800afa8 	.word	0x0800afa8
 80086f0:	9b03      	ldr	r3, [sp, #12]
 80086f2:	2402      	movs	r4, #2
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d016      	beq.n	8008726 <_dtoa_r+0x3d2>
 80086f8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80086fa:	9911      	ldr	r1, [sp, #68]	; 0x44
 80086fc:	220f      	movs	r2, #15
 80086fe:	425d      	negs	r5, r3
 8008700:	402a      	ands	r2, r5
 8008702:	4bdd      	ldr	r3, [pc, #884]	; (8008a78 <_dtoa_r+0x724>)
 8008704:	00d2      	lsls	r2, r2, #3
 8008706:	189b      	adds	r3, r3, r2
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	f7f8 ff80 	bl	8001610 <__aeabi_dmul>
 8008710:	2701      	movs	r7, #1
 8008712:	2300      	movs	r3, #0
 8008714:	9008      	str	r0, [sp, #32]
 8008716:	9109      	str	r1, [sp, #36]	; 0x24
 8008718:	4ed8      	ldr	r6, [pc, #864]	; (8008a7c <_dtoa_r+0x728>)
 800871a:	112d      	asrs	r5, r5, #4
 800871c:	2d00      	cmp	r5, #0
 800871e:	d000      	beq.n	8008722 <_dtoa_r+0x3ce>
 8008720:	e091      	b.n	8008846 <_dtoa_r+0x4f2>
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1a1      	bne.n	800866a <_dtoa_r+0x316>
 8008726:	9e08      	ldr	r6, [sp, #32]
 8008728:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800872a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800872c:	2b00      	cmp	r3, #0
 800872e:	d100      	bne.n	8008732 <_dtoa_r+0x3de>
 8008730:	e094      	b.n	800885c <_dtoa_r+0x508>
 8008732:	2200      	movs	r2, #0
 8008734:	0030      	movs	r0, r6
 8008736:	0039      	movs	r1, r7
 8008738:	4bd1      	ldr	r3, [pc, #836]	; (8008a80 <_dtoa_r+0x72c>)
 800873a:	f7f7 fe8b 	bl	8000454 <__aeabi_dcmplt>
 800873e:	2800      	cmp	r0, #0
 8008740:	d100      	bne.n	8008744 <_dtoa_r+0x3f0>
 8008742:	e08b      	b.n	800885c <_dtoa_r+0x508>
 8008744:	9b07      	ldr	r3, [sp, #28]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d100      	bne.n	800874c <_dtoa_r+0x3f8>
 800874a:	e087      	b.n	800885c <_dtoa_r+0x508>
 800874c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800874e:	2b00      	cmp	r3, #0
 8008750:	dd45      	ble.n	80087de <_dtoa_r+0x48a>
 8008752:	9b03      	ldr	r3, [sp, #12]
 8008754:	2200      	movs	r2, #0
 8008756:	3b01      	subs	r3, #1
 8008758:	930e      	str	r3, [sp, #56]	; 0x38
 800875a:	0030      	movs	r0, r6
 800875c:	4bc9      	ldr	r3, [pc, #804]	; (8008a84 <_dtoa_r+0x730>)
 800875e:	0039      	movs	r1, r7
 8008760:	f7f8 ff56 	bl	8001610 <__aeabi_dmul>
 8008764:	9008      	str	r0, [sp, #32]
 8008766:	9109      	str	r1, [sp, #36]	; 0x24
 8008768:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800876a:	3401      	adds	r4, #1
 800876c:	0020      	movs	r0, r4
 800876e:	9e08      	ldr	r6, [sp, #32]
 8008770:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008772:	9312      	str	r3, [sp, #72]	; 0x48
 8008774:	f7f9 fde4 	bl	8002340 <__aeabi_i2d>
 8008778:	0032      	movs	r2, r6
 800877a:	003b      	movs	r3, r7
 800877c:	f7f8 ff48 	bl	8001610 <__aeabi_dmul>
 8008780:	2200      	movs	r2, #0
 8008782:	4bc1      	ldr	r3, [pc, #772]	; (8008a88 <_dtoa_r+0x734>)
 8008784:	f7f7 ffea 	bl	800075c <__aeabi_dadd>
 8008788:	4ac0      	ldr	r2, [pc, #768]	; (8008a8c <_dtoa_r+0x738>)
 800878a:	9014      	str	r0, [sp, #80]	; 0x50
 800878c:	9115      	str	r1, [sp, #84]	; 0x54
 800878e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008790:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8008792:	4694      	mov	ip, r2
 8008794:	9308      	str	r3, [sp, #32]
 8008796:	9409      	str	r4, [sp, #36]	; 0x24
 8008798:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800879a:	4463      	add	r3, ip
 800879c:	9318      	str	r3, [sp, #96]	; 0x60
 800879e:	9309      	str	r3, [sp, #36]	; 0x24
 80087a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d15e      	bne.n	8008864 <_dtoa_r+0x510>
 80087a6:	2200      	movs	r2, #0
 80087a8:	4bb9      	ldr	r3, [pc, #740]	; (8008a90 <_dtoa_r+0x73c>)
 80087aa:	0030      	movs	r0, r6
 80087ac:	0039      	movs	r1, r7
 80087ae:	f7f9 f9f1 	bl	8001b94 <__aeabi_dsub>
 80087b2:	9a08      	ldr	r2, [sp, #32]
 80087b4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80087b6:	0004      	movs	r4, r0
 80087b8:	000d      	movs	r5, r1
 80087ba:	f7f7 fe5f 	bl	800047c <__aeabi_dcmpgt>
 80087be:	2800      	cmp	r0, #0
 80087c0:	d000      	beq.n	80087c4 <_dtoa_r+0x470>
 80087c2:	e2b3      	b.n	8008d2c <_dtoa_r+0x9d8>
 80087c4:	48b3      	ldr	r0, [pc, #716]	; (8008a94 <_dtoa_r+0x740>)
 80087c6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80087c8:	4684      	mov	ip, r0
 80087ca:	4461      	add	r1, ip
 80087cc:	000b      	movs	r3, r1
 80087ce:	0020      	movs	r0, r4
 80087d0:	0029      	movs	r1, r5
 80087d2:	9a08      	ldr	r2, [sp, #32]
 80087d4:	f7f7 fe3e 	bl	8000454 <__aeabi_dcmplt>
 80087d8:	2800      	cmp	r0, #0
 80087da:	d000      	beq.n	80087de <_dtoa_r+0x48a>
 80087dc:	e2a3      	b.n	8008d26 <_dtoa_r+0x9d2>
 80087de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087e0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80087e2:	9308      	str	r3, [sp, #32]
 80087e4:	9409      	str	r4, [sp, #36]	; 0x24
 80087e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	da00      	bge.n	80087ee <_dtoa_r+0x49a>
 80087ec:	e179      	b.n	8008ae2 <_dtoa_r+0x78e>
 80087ee:	9a03      	ldr	r2, [sp, #12]
 80087f0:	2a0e      	cmp	r2, #14
 80087f2:	dd00      	ble.n	80087f6 <_dtoa_r+0x4a2>
 80087f4:	e175      	b.n	8008ae2 <_dtoa_r+0x78e>
 80087f6:	4ba0      	ldr	r3, [pc, #640]	; (8008a78 <_dtoa_r+0x724>)
 80087f8:	00d2      	lsls	r2, r2, #3
 80087fa:	189b      	adds	r3, r3, r2
 80087fc:	681e      	ldr	r6, [r3, #0]
 80087fe:	685f      	ldr	r7, [r3, #4]
 8008800:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008802:	2b00      	cmp	r3, #0
 8008804:	db00      	blt.n	8008808 <_dtoa_r+0x4b4>
 8008806:	e0e5      	b.n	80089d4 <_dtoa_r+0x680>
 8008808:	9b07      	ldr	r3, [sp, #28]
 800880a:	2b00      	cmp	r3, #0
 800880c:	dd00      	ble.n	8008810 <_dtoa_r+0x4bc>
 800880e:	e0e1      	b.n	80089d4 <_dtoa_r+0x680>
 8008810:	d000      	beq.n	8008814 <_dtoa_r+0x4c0>
 8008812:	e288      	b.n	8008d26 <_dtoa_r+0x9d2>
 8008814:	2200      	movs	r2, #0
 8008816:	0030      	movs	r0, r6
 8008818:	0039      	movs	r1, r7
 800881a:	4b9d      	ldr	r3, [pc, #628]	; (8008a90 <_dtoa_r+0x73c>)
 800881c:	f7f8 fef8 	bl	8001610 <__aeabi_dmul>
 8008820:	9a08      	ldr	r2, [sp, #32]
 8008822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008824:	f7f7 fe34 	bl	8000490 <__aeabi_dcmpge>
 8008828:	9e07      	ldr	r6, [sp, #28]
 800882a:	0037      	movs	r7, r6
 800882c:	2800      	cmp	r0, #0
 800882e:	d000      	beq.n	8008832 <_dtoa_r+0x4de>
 8008830:	e25f      	b.n	8008cf2 <_dtoa_r+0x99e>
 8008832:	9b06      	ldr	r3, [sp, #24]
 8008834:	9a06      	ldr	r2, [sp, #24]
 8008836:	3301      	adds	r3, #1
 8008838:	9308      	str	r3, [sp, #32]
 800883a:	2331      	movs	r3, #49	; 0x31
 800883c:	7013      	strb	r3, [r2, #0]
 800883e:	9b03      	ldr	r3, [sp, #12]
 8008840:	3301      	adds	r3, #1
 8008842:	9303      	str	r3, [sp, #12]
 8008844:	e25a      	b.n	8008cfc <_dtoa_r+0x9a8>
 8008846:	423d      	tst	r5, r7
 8008848:	d005      	beq.n	8008856 <_dtoa_r+0x502>
 800884a:	6832      	ldr	r2, [r6, #0]
 800884c:	6873      	ldr	r3, [r6, #4]
 800884e:	f7f8 fedf 	bl	8001610 <__aeabi_dmul>
 8008852:	003b      	movs	r3, r7
 8008854:	3401      	adds	r4, #1
 8008856:	106d      	asrs	r5, r5, #1
 8008858:	3608      	adds	r6, #8
 800885a:	e75f      	b.n	800871c <_dtoa_r+0x3c8>
 800885c:	9b03      	ldr	r3, [sp, #12]
 800885e:	930e      	str	r3, [sp, #56]	; 0x38
 8008860:	9b07      	ldr	r3, [sp, #28]
 8008862:	e783      	b.n	800876c <_dtoa_r+0x418>
 8008864:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008866:	4b84      	ldr	r3, [pc, #528]	; (8008a78 <_dtoa_r+0x724>)
 8008868:	3a01      	subs	r2, #1
 800886a:	00d2      	lsls	r2, r2, #3
 800886c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800886e:	189b      	adds	r3, r3, r2
 8008870:	9c08      	ldr	r4, [sp, #32]
 8008872:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	2900      	cmp	r1, #0
 800887a:	d051      	beq.n	8008920 <_dtoa_r+0x5cc>
 800887c:	2000      	movs	r0, #0
 800887e:	4986      	ldr	r1, [pc, #536]	; (8008a98 <_dtoa_r+0x744>)
 8008880:	f7f8 facc 	bl	8000e1c <__aeabi_ddiv>
 8008884:	0022      	movs	r2, r4
 8008886:	002b      	movs	r3, r5
 8008888:	f7f9 f984 	bl	8001b94 <__aeabi_dsub>
 800888c:	9a06      	ldr	r2, [sp, #24]
 800888e:	0004      	movs	r4, r0
 8008890:	4694      	mov	ip, r2
 8008892:	000d      	movs	r5, r1
 8008894:	9b06      	ldr	r3, [sp, #24]
 8008896:	9314      	str	r3, [sp, #80]	; 0x50
 8008898:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800889a:	4463      	add	r3, ip
 800889c:	9318      	str	r3, [sp, #96]	; 0x60
 800889e:	0039      	movs	r1, r7
 80088a0:	0030      	movs	r0, r6
 80088a2:	f7f9 fd17 	bl	80022d4 <__aeabi_d2iz>
 80088a6:	9012      	str	r0, [sp, #72]	; 0x48
 80088a8:	f7f9 fd4a 	bl	8002340 <__aeabi_i2d>
 80088ac:	0002      	movs	r2, r0
 80088ae:	000b      	movs	r3, r1
 80088b0:	0030      	movs	r0, r6
 80088b2:	0039      	movs	r1, r7
 80088b4:	f7f9 f96e 	bl	8001b94 <__aeabi_dsub>
 80088b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80088ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80088bc:	3301      	adds	r3, #1
 80088be:	9308      	str	r3, [sp, #32]
 80088c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80088c2:	0006      	movs	r6, r0
 80088c4:	3330      	adds	r3, #48	; 0x30
 80088c6:	7013      	strb	r3, [r2, #0]
 80088c8:	0022      	movs	r2, r4
 80088ca:	002b      	movs	r3, r5
 80088cc:	000f      	movs	r7, r1
 80088ce:	f7f7 fdc1 	bl	8000454 <__aeabi_dcmplt>
 80088d2:	2800      	cmp	r0, #0
 80088d4:	d174      	bne.n	80089c0 <_dtoa_r+0x66c>
 80088d6:	0032      	movs	r2, r6
 80088d8:	003b      	movs	r3, r7
 80088da:	2000      	movs	r0, #0
 80088dc:	4968      	ldr	r1, [pc, #416]	; (8008a80 <_dtoa_r+0x72c>)
 80088de:	f7f9 f959 	bl	8001b94 <__aeabi_dsub>
 80088e2:	0022      	movs	r2, r4
 80088e4:	002b      	movs	r3, r5
 80088e6:	f7f7 fdb5 	bl	8000454 <__aeabi_dcmplt>
 80088ea:	2800      	cmp	r0, #0
 80088ec:	d000      	beq.n	80088f0 <_dtoa_r+0x59c>
 80088ee:	e0d7      	b.n	8008aa0 <_dtoa_r+0x74c>
 80088f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80088f2:	9a08      	ldr	r2, [sp, #32]
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d100      	bne.n	80088fa <_dtoa_r+0x5a6>
 80088f8:	e771      	b.n	80087de <_dtoa_r+0x48a>
 80088fa:	2200      	movs	r2, #0
 80088fc:	0020      	movs	r0, r4
 80088fe:	0029      	movs	r1, r5
 8008900:	4b60      	ldr	r3, [pc, #384]	; (8008a84 <_dtoa_r+0x730>)
 8008902:	f7f8 fe85 	bl	8001610 <__aeabi_dmul>
 8008906:	4b5f      	ldr	r3, [pc, #380]	; (8008a84 <_dtoa_r+0x730>)
 8008908:	0004      	movs	r4, r0
 800890a:	000d      	movs	r5, r1
 800890c:	0030      	movs	r0, r6
 800890e:	0039      	movs	r1, r7
 8008910:	2200      	movs	r2, #0
 8008912:	f7f8 fe7d 	bl	8001610 <__aeabi_dmul>
 8008916:	9b08      	ldr	r3, [sp, #32]
 8008918:	0006      	movs	r6, r0
 800891a:	000f      	movs	r7, r1
 800891c:	9314      	str	r3, [sp, #80]	; 0x50
 800891e:	e7be      	b.n	800889e <_dtoa_r+0x54a>
 8008920:	0020      	movs	r0, r4
 8008922:	0029      	movs	r1, r5
 8008924:	f7f8 fe74 	bl	8001610 <__aeabi_dmul>
 8008928:	9a06      	ldr	r2, [sp, #24]
 800892a:	9b06      	ldr	r3, [sp, #24]
 800892c:	4694      	mov	ip, r2
 800892e:	9308      	str	r3, [sp, #32]
 8008930:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008932:	9014      	str	r0, [sp, #80]	; 0x50
 8008934:	9115      	str	r1, [sp, #84]	; 0x54
 8008936:	4463      	add	r3, ip
 8008938:	9319      	str	r3, [sp, #100]	; 0x64
 800893a:	0030      	movs	r0, r6
 800893c:	0039      	movs	r1, r7
 800893e:	f7f9 fcc9 	bl	80022d4 <__aeabi_d2iz>
 8008942:	9018      	str	r0, [sp, #96]	; 0x60
 8008944:	f7f9 fcfc 	bl	8002340 <__aeabi_i2d>
 8008948:	0002      	movs	r2, r0
 800894a:	000b      	movs	r3, r1
 800894c:	0030      	movs	r0, r6
 800894e:	0039      	movs	r1, r7
 8008950:	f7f9 f920 	bl	8001b94 <__aeabi_dsub>
 8008954:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8008956:	9b08      	ldr	r3, [sp, #32]
 8008958:	3630      	adds	r6, #48	; 0x30
 800895a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800895c:	701e      	strb	r6, [r3, #0]
 800895e:	3301      	adds	r3, #1
 8008960:	0004      	movs	r4, r0
 8008962:	000d      	movs	r5, r1
 8008964:	9308      	str	r3, [sp, #32]
 8008966:	4293      	cmp	r3, r2
 8008968:	d12d      	bne.n	80089c6 <_dtoa_r+0x672>
 800896a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800896c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800896e:	9a06      	ldr	r2, [sp, #24]
 8008970:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008972:	4694      	mov	ip, r2
 8008974:	4463      	add	r3, ip
 8008976:	2200      	movs	r2, #0
 8008978:	9308      	str	r3, [sp, #32]
 800897a:	4b47      	ldr	r3, [pc, #284]	; (8008a98 <_dtoa_r+0x744>)
 800897c:	f7f7 feee 	bl	800075c <__aeabi_dadd>
 8008980:	0002      	movs	r2, r0
 8008982:	000b      	movs	r3, r1
 8008984:	0020      	movs	r0, r4
 8008986:	0029      	movs	r1, r5
 8008988:	f7f7 fd78 	bl	800047c <__aeabi_dcmpgt>
 800898c:	2800      	cmp	r0, #0
 800898e:	d000      	beq.n	8008992 <_dtoa_r+0x63e>
 8008990:	e086      	b.n	8008aa0 <_dtoa_r+0x74c>
 8008992:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008994:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008996:	2000      	movs	r0, #0
 8008998:	493f      	ldr	r1, [pc, #252]	; (8008a98 <_dtoa_r+0x744>)
 800899a:	f7f9 f8fb 	bl	8001b94 <__aeabi_dsub>
 800899e:	0002      	movs	r2, r0
 80089a0:	000b      	movs	r3, r1
 80089a2:	0020      	movs	r0, r4
 80089a4:	0029      	movs	r1, r5
 80089a6:	f7f7 fd55 	bl	8000454 <__aeabi_dcmplt>
 80089aa:	2800      	cmp	r0, #0
 80089ac:	d100      	bne.n	80089b0 <_dtoa_r+0x65c>
 80089ae:	e716      	b.n	80087de <_dtoa_r+0x48a>
 80089b0:	9b08      	ldr	r3, [sp, #32]
 80089b2:	001a      	movs	r2, r3
 80089b4:	3a01      	subs	r2, #1
 80089b6:	9208      	str	r2, [sp, #32]
 80089b8:	7812      	ldrb	r2, [r2, #0]
 80089ba:	2a30      	cmp	r2, #48	; 0x30
 80089bc:	d0f8      	beq.n	80089b0 <_dtoa_r+0x65c>
 80089be:	9308      	str	r3, [sp, #32]
 80089c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089c2:	9303      	str	r3, [sp, #12]
 80089c4:	e046      	b.n	8008a54 <_dtoa_r+0x700>
 80089c6:	2200      	movs	r2, #0
 80089c8:	4b2e      	ldr	r3, [pc, #184]	; (8008a84 <_dtoa_r+0x730>)
 80089ca:	f7f8 fe21 	bl	8001610 <__aeabi_dmul>
 80089ce:	0006      	movs	r6, r0
 80089d0:	000f      	movs	r7, r1
 80089d2:	e7b2      	b.n	800893a <_dtoa_r+0x5e6>
 80089d4:	9b06      	ldr	r3, [sp, #24]
 80089d6:	9a06      	ldr	r2, [sp, #24]
 80089d8:	930a      	str	r3, [sp, #40]	; 0x28
 80089da:	9b07      	ldr	r3, [sp, #28]
 80089dc:	9c08      	ldr	r4, [sp, #32]
 80089de:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80089e0:	3b01      	subs	r3, #1
 80089e2:	189b      	adds	r3, r3, r2
 80089e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80089e6:	0032      	movs	r2, r6
 80089e8:	003b      	movs	r3, r7
 80089ea:	0020      	movs	r0, r4
 80089ec:	0029      	movs	r1, r5
 80089ee:	f7f8 fa15 	bl	8000e1c <__aeabi_ddiv>
 80089f2:	f7f9 fc6f 	bl	80022d4 <__aeabi_d2iz>
 80089f6:	9007      	str	r0, [sp, #28]
 80089f8:	f7f9 fca2 	bl	8002340 <__aeabi_i2d>
 80089fc:	0032      	movs	r2, r6
 80089fe:	003b      	movs	r3, r7
 8008a00:	f7f8 fe06 	bl	8001610 <__aeabi_dmul>
 8008a04:	0002      	movs	r2, r0
 8008a06:	000b      	movs	r3, r1
 8008a08:	0020      	movs	r0, r4
 8008a0a:	0029      	movs	r1, r5
 8008a0c:	f7f9 f8c2 	bl	8001b94 <__aeabi_dsub>
 8008a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a12:	001a      	movs	r2, r3
 8008a14:	3201      	adds	r2, #1
 8008a16:	920a      	str	r2, [sp, #40]	; 0x28
 8008a18:	9208      	str	r2, [sp, #32]
 8008a1a:	9a07      	ldr	r2, [sp, #28]
 8008a1c:	3230      	adds	r2, #48	; 0x30
 8008a1e:	701a      	strb	r2, [r3, #0]
 8008a20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d14f      	bne.n	8008ac6 <_dtoa_r+0x772>
 8008a26:	0002      	movs	r2, r0
 8008a28:	000b      	movs	r3, r1
 8008a2a:	f7f7 fe97 	bl	800075c <__aeabi_dadd>
 8008a2e:	0032      	movs	r2, r6
 8008a30:	003b      	movs	r3, r7
 8008a32:	0004      	movs	r4, r0
 8008a34:	000d      	movs	r5, r1
 8008a36:	f7f7 fd21 	bl	800047c <__aeabi_dcmpgt>
 8008a3a:	2800      	cmp	r0, #0
 8008a3c:	d12e      	bne.n	8008a9c <_dtoa_r+0x748>
 8008a3e:	0032      	movs	r2, r6
 8008a40:	003b      	movs	r3, r7
 8008a42:	0020      	movs	r0, r4
 8008a44:	0029      	movs	r1, r5
 8008a46:	f7f7 fcff 	bl	8000448 <__aeabi_dcmpeq>
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	d002      	beq.n	8008a54 <_dtoa_r+0x700>
 8008a4e:	9b07      	ldr	r3, [sp, #28]
 8008a50:	07de      	lsls	r6, r3, #31
 8008a52:	d423      	bmi.n	8008a9c <_dtoa_r+0x748>
 8008a54:	9905      	ldr	r1, [sp, #20]
 8008a56:	9804      	ldr	r0, [sp, #16]
 8008a58:	f000 fe86 	bl	8009768 <_Bfree>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	9a08      	ldr	r2, [sp, #32]
 8008a60:	7013      	strb	r3, [r2, #0]
 8008a62:	9b03      	ldr	r3, [sp, #12]
 8008a64:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008a66:	3301      	adds	r3, #1
 8008a68:	6013      	str	r3, [r2, #0]
 8008a6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d100      	bne.n	8008a72 <_dtoa_r+0x71e>
 8008a70:	e4ba      	b.n	80083e8 <_dtoa_r+0x94>
 8008a72:	9a08      	ldr	r2, [sp, #32]
 8008a74:	601a      	str	r2, [r3, #0]
 8008a76:	e4b7      	b.n	80083e8 <_dtoa_r+0x94>
 8008a78:	0800afd0 	.word	0x0800afd0
 8008a7c:	0800afa8 	.word	0x0800afa8
 8008a80:	3ff00000 	.word	0x3ff00000
 8008a84:	40240000 	.word	0x40240000
 8008a88:	401c0000 	.word	0x401c0000
 8008a8c:	fcc00000 	.word	0xfcc00000
 8008a90:	40140000 	.word	0x40140000
 8008a94:	7cc00000 	.word	0x7cc00000
 8008a98:	3fe00000 	.word	0x3fe00000
 8008a9c:	9b03      	ldr	r3, [sp, #12]
 8008a9e:	930e      	str	r3, [sp, #56]	; 0x38
 8008aa0:	9b08      	ldr	r3, [sp, #32]
 8008aa2:	9308      	str	r3, [sp, #32]
 8008aa4:	3b01      	subs	r3, #1
 8008aa6:	781a      	ldrb	r2, [r3, #0]
 8008aa8:	2a39      	cmp	r2, #57	; 0x39
 8008aaa:	d108      	bne.n	8008abe <_dtoa_r+0x76a>
 8008aac:	9a06      	ldr	r2, [sp, #24]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d1f7      	bne.n	8008aa2 <_dtoa_r+0x74e>
 8008ab2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ab4:	9906      	ldr	r1, [sp, #24]
 8008ab6:	3201      	adds	r2, #1
 8008ab8:	920e      	str	r2, [sp, #56]	; 0x38
 8008aba:	2230      	movs	r2, #48	; 0x30
 8008abc:	700a      	strb	r2, [r1, #0]
 8008abe:	781a      	ldrb	r2, [r3, #0]
 8008ac0:	3201      	adds	r2, #1
 8008ac2:	701a      	strb	r2, [r3, #0]
 8008ac4:	e77c      	b.n	80089c0 <_dtoa_r+0x66c>
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	4ba9      	ldr	r3, [pc, #676]	; (8008d70 <_dtoa_r+0xa1c>)
 8008aca:	f7f8 fda1 	bl	8001610 <__aeabi_dmul>
 8008ace:	2200      	movs	r2, #0
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	0004      	movs	r4, r0
 8008ad4:	000d      	movs	r5, r1
 8008ad6:	f7f7 fcb7 	bl	8000448 <__aeabi_dcmpeq>
 8008ada:	2800      	cmp	r0, #0
 8008adc:	d100      	bne.n	8008ae0 <_dtoa_r+0x78c>
 8008ade:	e782      	b.n	80089e6 <_dtoa_r+0x692>
 8008ae0:	e7b8      	b.n	8008a54 <_dtoa_r+0x700>
 8008ae2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8008ae4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008ae6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008ae8:	2f00      	cmp	r7, #0
 8008aea:	d012      	beq.n	8008b12 <_dtoa_r+0x7be>
 8008aec:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008aee:	2a01      	cmp	r2, #1
 8008af0:	dc6e      	bgt.n	8008bd0 <_dtoa_r+0x87c>
 8008af2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008af4:	2a00      	cmp	r2, #0
 8008af6:	d065      	beq.n	8008bc4 <_dtoa_r+0x870>
 8008af8:	4a9e      	ldr	r2, [pc, #632]	; (8008d74 <_dtoa_r+0xa20>)
 8008afa:	189b      	adds	r3, r3, r2
 8008afc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008afe:	2101      	movs	r1, #1
 8008b00:	18d2      	adds	r2, r2, r3
 8008b02:	920a      	str	r2, [sp, #40]	; 0x28
 8008b04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b06:	9804      	ldr	r0, [sp, #16]
 8008b08:	18d3      	adds	r3, r2, r3
 8008b0a:	930c      	str	r3, [sp, #48]	; 0x30
 8008b0c:	f000 ff28 	bl	8009960 <__i2b>
 8008b10:	0007      	movs	r7, r0
 8008b12:	2c00      	cmp	r4, #0
 8008b14:	d00e      	beq.n	8008b34 <_dtoa_r+0x7e0>
 8008b16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	dd0b      	ble.n	8008b34 <_dtoa_r+0x7e0>
 8008b1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b1e:	0023      	movs	r3, r4
 8008b20:	4294      	cmp	r4, r2
 8008b22:	dd00      	ble.n	8008b26 <_dtoa_r+0x7d2>
 8008b24:	0013      	movs	r3, r2
 8008b26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b28:	1ae4      	subs	r4, r4, r3
 8008b2a:	1ad2      	subs	r2, r2, r3
 8008b2c:	920a      	str	r2, [sp, #40]	; 0x28
 8008b2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	930c      	str	r3, [sp, #48]	; 0x30
 8008b34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d01e      	beq.n	8008b78 <_dtoa_r+0x824>
 8008b3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d05c      	beq.n	8008bfa <_dtoa_r+0x8a6>
 8008b40:	2d00      	cmp	r5, #0
 8008b42:	dd10      	ble.n	8008b66 <_dtoa_r+0x812>
 8008b44:	0039      	movs	r1, r7
 8008b46:	002a      	movs	r2, r5
 8008b48:	9804      	ldr	r0, [sp, #16]
 8008b4a:	f000 ffd1 	bl	8009af0 <__pow5mult>
 8008b4e:	9a05      	ldr	r2, [sp, #20]
 8008b50:	0001      	movs	r1, r0
 8008b52:	0007      	movs	r7, r0
 8008b54:	9804      	ldr	r0, [sp, #16]
 8008b56:	f000 ff1b 	bl	8009990 <__multiply>
 8008b5a:	0006      	movs	r6, r0
 8008b5c:	9905      	ldr	r1, [sp, #20]
 8008b5e:	9804      	ldr	r0, [sp, #16]
 8008b60:	f000 fe02 	bl	8009768 <_Bfree>
 8008b64:	9605      	str	r6, [sp, #20]
 8008b66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b68:	1b5a      	subs	r2, r3, r5
 8008b6a:	42ab      	cmp	r3, r5
 8008b6c:	d004      	beq.n	8008b78 <_dtoa_r+0x824>
 8008b6e:	9905      	ldr	r1, [sp, #20]
 8008b70:	9804      	ldr	r0, [sp, #16]
 8008b72:	f000 ffbd 	bl	8009af0 <__pow5mult>
 8008b76:	9005      	str	r0, [sp, #20]
 8008b78:	2101      	movs	r1, #1
 8008b7a:	9804      	ldr	r0, [sp, #16]
 8008b7c:	f000 fef0 	bl	8009960 <__i2b>
 8008b80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b82:	0006      	movs	r6, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	dd3a      	ble.n	8008bfe <_dtoa_r+0x8aa>
 8008b88:	001a      	movs	r2, r3
 8008b8a:	0001      	movs	r1, r0
 8008b8c:	9804      	ldr	r0, [sp, #16]
 8008b8e:	f000 ffaf 	bl	8009af0 <__pow5mult>
 8008b92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b94:	0006      	movs	r6, r0
 8008b96:	2500      	movs	r5, #0
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	dc38      	bgt.n	8008c0e <_dtoa_r+0x8ba>
 8008b9c:	2500      	movs	r5, #0
 8008b9e:	9b08      	ldr	r3, [sp, #32]
 8008ba0:	42ab      	cmp	r3, r5
 8008ba2:	d130      	bne.n	8008c06 <_dtoa_r+0x8b2>
 8008ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ba6:	031b      	lsls	r3, r3, #12
 8008ba8:	42ab      	cmp	r3, r5
 8008baa:	d12c      	bne.n	8008c06 <_dtoa_r+0x8b2>
 8008bac:	4b72      	ldr	r3, [pc, #456]	; (8008d78 <_dtoa_r+0xa24>)
 8008bae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bb0:	4213      	tst	r3, r2
 8008bb2:	d028      	beq.n	8008c06 <_dtoa_r+0x8b2>
 8008bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bb6:	3501      	adds	r5, #1
 8008bb8:	3301      	adds	r3, #1
 8008bba:	930a      	str	r3, [sp, #40]	; 0x28
 8008bbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	930c      	str	r3, [sp, #48]	; 0x30
 8008bc2:	e020      	b.n	8008c06 <_dtoa_r+0x8b2>
 8008bc4:	2336      	movs	r3, #54	; 0x36
 8008bc6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008bc8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008bca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008bcc:	1a9b      	subs	r3, r3, r2
 8008bce:	e795      	b.n	8008afc <_dtoa_r+0x7a8>
 8008bd0:	9b07      	ldr	r3, [sp, #28]
 8008bd2:	1e5d      	subs	r5, r3, #1
 8008bd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bd6:	42ab      	cmp	r3, r5
 8008bd8:	db07      	blt.n	8008bea <_dtoa_r+0x896>
 8008bda:	1b5d      	subs	r5, r3, r5
 8008bdc:	9b07      	ldr	r3, [sp, #28]
 8008bde:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	da8b      	bge.n	8008afc <_dtoa_r+0x7a8>
 8008be4:	1ae4      	subs	r4, r4, r3
 8008be6:	2300      	movs	r3, #0
 8008be8:	e788      	b.n	8008afc <_dtoa_r+0x7a8>
 8008bea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008bee:	1aeb      	subs	r3, r5, r3
 8008bf0:	18d3      	adds	r3, r2, r3
 8008bf2:	950d      	str	r5, [sp, #52]	; 0x34
 8008bf4:	9313      	str	r3, [sp, #76]	; 0x4c
 8008bf6:	2500      	movs	r5, #0
 8008bf8:	e7f0      	b.n	8008bdc <_dtoa_r+0x888>
 8008bfa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008bfc:	e7b7      	b.n	8008b6e <_dtoa_r+0x81a>
 8008bfe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c00:	2500      	movs	r5, #0
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	ddca      	ble.n	8008b9c <_dtoa_r+0x848>
 8008c06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c08:	2001      	movs	r0, #1
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d008      	beq.n	8008c20 <_dtoa_r+0x8cc>
 8008c0e:	6933      	ldr	r3, [r6, #16]
 8008c10:	3303      	adds	r3, #3
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	18f3      	adds	r3, r6, r3
 8008c16:	6858      	ldr	r0, [r3, #4]
 8008c18:	f000 fe5a 	bl	80098d0 <__hi0bits>
 8008c1c:	2320      	movs	r3, #32
 8008c1e:	1a18      	subs	r0, r3, r0
 8008c20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c22:	1818      	adds	r0, r3, r0
 8008c24:	0002      	movs	r2, r0
 8008c26:	231f      	movs	r3, #31
 8008c28:	401a      	ands	r2, r3
 8008c2a:	4218      	tst	r0, r3
 8008c2c:	d047      	beq.n	8008cbe <_dtoa_r+0x96a>
 8008c2e:	3301      	adds	r3, #1
 8008c30:	1a9b      	subs	r3, r3, r2
 8008c32:	2b04      	cmp	r3, #4
 8008c34:	dd3f      	ble.n	8008cb6 <_dtoa_r+0x962>
 8008c36:	231c      	movs	r3, #28
 8008c38:	1a9b      	subs	r3, r3, r2
 8008c3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c3c:	18e4      	adds	r4, r4, r3
 8008c3e:	18d2      	adds	r2, r2, r3
 8008c40:	920a      	str	r2, [sp, #40]	; 0x28
 8008c42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c44:	18d3      	adds	r3, r2, r3
 8008c46:	930c      	str	r3, [sp, #48]	; 0x30
 8008c48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	dd05      	ble.n	8008c5a <_dtoa_r+0x906>
 8008c4e:	001a      	movs	r2, r3
 8008c50:	9905      	ldr	r1, [sp, #20]
 8008c52:	9804      	ldr	r0, [sp, #16]
 8008c54:	f000 ffa8 	bl	8009ba8 <__lshift>
 8008c58:	9005      	str	r0, [sp, #20]
 8008c5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	dd05      	ble.n	8008c6c <_dtoa_r+0x918>
 8008c60:	0031      	movs	r1, r6
 8008c62:	001a      	movs	r2, r3
 8008c64:	9804      	ldr	r0, [sp, #16]
 8008c66:	f000 ff9f 	bl	8009ba8 <__lshift>
 8008c6a:	0006      	movs	r6, r0
 8008c6c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d027      	beq.n	8008cc2 <_dtoa_r+0x96e>
 8008c72:	0031      	movs	r1, r6
 8008c74:	9805      	ldr	r0, [sp, #20]
 8008c76:	f001 f805 	bl	8009c84 <__mcmp>
 8008c7a:	2800      	cmp	r0, #0
 8008c7c:	da21      	bge.n	8008cc2 <_dtoa_r+0x96e>
 8008c7e:	9b03      	ldr	r3, [sp, #12]
 8008c80:	220a      	movs	r2, #10
 8008c82:	3b01      	subs	r3, #1
 8008c84:	9303      	str	r3, [sp, #12]
 8008c86:	9905      	ldr	r1, [sp, #20]
 8008c88:	2300      	movs	r3, #0
 8008c8a:	9804      	ldr	r0, [sp, #16]
 8008c8c:	f000 fd90 	bl	80097b0 <__multadd>
 8008c90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c92:	9005      	str	r0, [sp, #20]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d100      	bne.n	8008c9a <_dtoa_r+0x946>
 8008c98:	e15d      	b.n	8008f56 <_dtoa_r+0xc02>
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	0039      	movs	r1, r7
 8008c9e:	220a      	movs	r2, #10
 8008ca0:	9804      	ldr	r0, [sp, #16]
 8008ca2:	f000 fd85 	bl	80097b0 <__multadd>
 8008ca6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ca8:	0007      	movs	r7, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	dc49      	bgt.n	8008d42 <_dtoa_r+0x9ee>
 8008cae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008cb0:	2b02      	cmp	r3, #2
 8008cb2:	dc0e      	bgt.n	8008cd2 <_dtoa_r+0x97e>
 8008cb4:	e045      	b.n	8008d42 <_dtoa_r+0x9ee>
 8008cb6:	2b04      	cmp	r3, #4
 8008cb8:	d0c6      	beq.n	8008c48 <_dtoa_r+0x8f4>
 8008cba:	331c      	adds	r3, #28
 8008cbc:	e7bd      	b.n	8008c3a <_dtoa_r+0x8e6>
 8008cbe:	0013      	movs	r3, r2
 8008cc0:	e7fb      	b.n	8008cba <_dtoa_r+0x966>
 8008cc2:	9b07      	ldr	r3, [sp, #28]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	dc36      	bgt.n	8008d36 <_dtoa_r+0x9e2>
 8008cc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008cca:	2b02      	cmp	r3, #2
 8008ccc:	dd33      	ble.n	8008d36 <_dtoa_r+0x9e2>
 8008cce:	9b07      	ldr	r3, [sp, #28]
 8008cd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d10c      	bne.n	8008cf2 <_dtoa_r+0x99e>
 8008cd8:	0031      	movs	r1, r6
 8008cda:	2205      	movs	r2, #5
 8008cdc:	9804      	ldr	r0, [sp, #16]
 8008cde:	f000 fd67 	bl	80097b0 <__multadd>
 8008ce2:	0006      	movs	r6, r0
 8008ce4:	0001      	movs	r1, r0
 8008ce6:	9805      	ldr	r0, [sp, #20]
 8008ce8:	f000 ffcc 	bl	8009c84 <__mcmp>
 8008cec:	2800      	cmp	r0, #0
 8008cee:	dd00      	ble.n	8008cf2 <_dtoa_r+0x99e>
 8008cf0:	e59f      	b.n	8008832 <_dtoa_r+0x4de>
 8008cf2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008cf4:	43db      	mvns	r3, r3
 8008cf6:	9303      	str	r3, [sp, #12]
 8008cf8:	9b06      	ldr	r3, [sp, #24]
 8008cfa:	9308      	str	r3, [sp, #32]
 8008cfc:	2500      	movs	r5, #0
 8008cfe:	0031      	movs	r1, r6
 8008d00:	9804      	ldr	r0, [sp, #16]
 8008d02:	f000 fd31 	bl	8009768 <_Bfree>
 8008d06:	2f00      	cmp	r7, #0
 8008d08:	d100      	bne.n	8008d0c <_dtoa_r+0x9b8>
 8008d0a:	e6a3      	b.n	8008a54 <_dtoa_r+0x700>
 8008d0c:	2d00      	cmp	r5, #0
 8008d0e:	d005      	beq.n	8008d1c <_dtoa_r+0x9c8>
 8008d10:	42bd      	cmp	r5, r7
 8008d12:	d003      	beq.n	8008d1c <_dtoa_r+0x9c8>
 8008d14:	0029      	movs	r1, r5
 8008d16:	9804      	ldr	r0, [sp, #16]
 8008d18:	f000 fd26 	bl	8009768 <_Bfree>
 8008d1c:	0039      	movs	r1, r7
 8008d1e:	9804      	ldr	r0, [sp, #16]
 8008d20:	f000 fd22 	bl	8009768 <_Bfree>
 8008d24:	e696      	b.n	8008a54 <_dtoa_r+0x700>
 8008d26:	2600      	movs	r6, #0
 8008d28:	0037      	movs	r7, r6
 8008d2a:	e7e2      	b.n	8008cf2 <_dtoa_r+0x99e>
 8008d2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d2e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8008d30:	9303      	str	r3, [sp, #12]
 8008d32:	0037      	movs	r7, r6
 8008d34:	e57d      	b.n	8008832 <_dtoa_r+0x4de>
 8008d36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d100      	bne.n	8008d3e <_dtoa_r+0x9ea>
 8008d3c:	e0c3      	b.n	8008ec6 <_dtoa_r+0xb72>
 8008d3e:	9b07      	ldr	r3, [sp, #28]
 8008d40:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d42:	2c00      	cmp	r4, #0
 8008d44:	dd05      	ble.n	8008d52 <_dtoa_r+0x9fe>
 8008d46:	0039      	movs	r1, r7
 8008d48:	0022      	movs	r2, r4
 8008d4a:	9804      	ldr	r0, [sp, #16]
 8008d4c:	f000 ff2c 	bl	8009ba8 <__lshift>
 8008d50:	0007      	movs	r7, r0
 8008d52:	0038      	movs	r0, r7
 8008d54:	2d00      	cmp	r5, #0
 8008d56:	d024      	beq.n	8008da2 <_dtoa_r+0xa4e>
 8008d58:	6879      	ldr	r1, [r7, #4]
 8008d5a:	9804      	ldr	r0, [sp, #16]
 8008d5c:	f000 fcc0 	bl	80096e0 <_Balloc>
 8008d60:	1e04      	subs	r4, r0, #0
 8008d62:	d111      	bne.n	8008d88 <_dtoa_r+0xa34>
 8008d64:	0022      	movs	r2, r4
 8008d66:	4b05      	ldr	r3, [pc, #20]	; (8008d7c <_dtoa_r+0xa28>)
 8008d68:	4805      	ldr	r0, [pc, #20]	; (8008d80 <_dtoa_r+0xa2c>)
 8008d6a:	4906      	ldr	r1, [pc, #24]	; (8008d84 <_dtoa_r+0xa30>)
 8008d6c:	f7ff fb07 	bl	800837e <_dtoa_r+0x2a>
 8008d70:	40240000 	.word	0x40240000
 8008d74:	00000433 	.word	0x00000433
 8008d78:	7ff00000 	.word	0x7ff00000
 8008d7c:	0800aede 	.word	0x0800aede
 8008d80:	0800ae86 	.word	0x0800ae86
 8008d84:	000002ef 	.word	0x000002ef
 8008d88:	0039      	movs	r1, r7
 8008d8a:	693a      	ldr	r2, [r7, #16]
 8008d8c:	310c      	adds	r1, #12
 8008d8e:	3202      	adds	r2, #2
 8008d90:	0092      	lsls	r2, r2, #2
 8008d92:	300c      	adds	r0, #12
 8008d94:	f7ff fa3a 	bl	800820c <memcpy>
 8008d98:	2201      	movs	r2, #1
 8008d9a:	0021      	movs	r1, r4
 8008d9c:	9804      	ldr	r0, [sp, #16]
 8008d9e:	f000 ff03 	bl	8009ba8 <__lshift>
 8008da2:	9b06      	ldr	r3, [sp, #24]
 8008da4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008da6:	9307      	str	r3, [sp, #28]
 8008da8:	3b01      	subs	r3, #1
 8008daa:	189b      	adds	r3, r3, r2
 8008dac:	2201      	movs	r2, #1
 8008dae:	003d      	movs	r5, r7
 8008db0:	0007      	movs	r7, r0
 8008db2:	930e      	str	r3, [sp, #56]	; 0x38
 8008db4:	9b08      	ldr	r3, [sp, #32]
 8008db6:	4013      	ands	r3, r2
 8008db8:	930d      	str	r3, [sp, #52]	; 0x34
 8008dba:	0031      	movs	r1, r6
 8008dbc:	9805      	ldr	r0, [sp, #20]
 8008dbe:	f7ff fa39 	bl	8008234 <quorem>
 8008dc2:	0029      	movs	r1, r5
 8008dc4:	0004      	movs	r4, r0
 8008dc6:	900b      	str	r0, [sp, #44]	; 0x2c
 8008dc8:	9805      	ldr	r0, [sp, #20]
 8008dca:	f000 ff5b 	bl	8009c84 <__mcmp>
 8008dce:	003a      	movs	r2, r7
 8008dd0:	900c      	str	r0, [sp, #48]	; 0x30
 8008dd2:	0031      	movs	r1, r6
 8008dd4:	9804      	ldr	r0, [sp, #16]
 8008dd6:	f000 ff71 	bl	8009cbc <__mdiff>
 8008dda:	2201      	movs	r2, #1
 8008ddc:	68c3      	ldr	r3, [r0, #12]
 8008dde:	3430      	adds	r4, #48	; 0x30
 8008de0:	9008      	str	r0, [sp, #32]
 8008de2:	920a      	str	r2, [sp, #40]	; 0x28
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d104      	bne.n	8008df2 <_dtoa_r+0xa9e>
 8008de8:	0001      	movs	r1, r0
 8008dea:	9805      	ldr	r0, [sp, #20]
 8008dec:	f000 ff4a 	bl	8009c84 <__mcmp>
 8008df0:	900a      	str	r0, [sp, #40]	; 0x28
 8008df2:	9908      	ldr	r1, [sp, #32]
 8008df4:	9804      	ldr	r0, [sp, #16]
 8008df6:	f000 fcb7 	bl	8009768 <_Bfree>
 8008dfa:	9b07      	ldr	r3, [sp, #28]
 8008dfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008dfe:	3301      	adds	r3, #1
 8008e00:	9308      	str	r3, [sp, #32]
 8008e02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e04:	4313      	orrs	r3, r2
 8008e06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	d109      	bne.n	8008e20 <_dtoa_r+0xacc>
 8008e0c:	2c39      	cmp	r4, #57	; 0x39
 8008e0e:	d022      	beq.n	8008e56 <_dtoa_r+0xb02>
 8008e10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	dd01      	ble.n	8008e1a <_dtoa_r+0xac6>
 8008e16:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008e18:	3431      	adds	r4, #49	; 0x31
 8008e1a:	9b07      	ldr	r3, [sp, #28]
 8008e1c:	701c      	strb	r4, [r3, #0]
 8008e1e:	e76e      	b.n	8008cfe <_dtoa_r+0x9aa>
 8008e20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	db04      	blt.n	8008e30 <_dtoa_r+0xadc>
 8008e26:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	d11e      	bne.n	8008e6e <_dtoa_r+0xb1a>
 8008e30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	ddf1      	ble.n	8008e1a <_dtoa_r+0xac6>
 8008e36:	9905      	ldr	r1, [sp, #20]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	9804      	ldr	r0, [sp, #16]
 8008e3c:	f000 feb4 	bl	8009ba8 <__lshift>
 8008e40:	0031      	movs	r1, r6
 8008e42:	9005      	str	r0, [sp, #20]
 8008e44:	f000 ff1e 	bl	8009c84 <__mcmp>
 8008e48:	2800      	cmp	r0, #0
 8008e4a:	dc02      	bgt.n	8008e52 <_dtoa_r+0xafe>
 8008e4c:	d1e5      	bne.n	8008e1a <_dtoa_r+0xac6>
 8008e4e:	07e3      	lsls	r3, r4, #31
 8008e50:	d5e3      	bpl.n	8008e1a <_dtoa_r+0xac6>
 8008e52:	2c39      	cmp	r4, #57	; 0x39
 8008e54:	d1df      	bne.n	8008e16 <_dtoa_r+0xac2>
 8008e56:	2339      	movs	r3, #57	; 0x39
 8008e58:	9a07      	ldr	r2, [sp, #28]
 8008e5a:	7013      	strb	r3, [r2, #0]
 8008e5c:	9b08      	ldr	r3, [sp, #32]
 8008e5e:	9308      	str	r3, [sp, #32]
 8008e60:	3b01      	subs	r3, #1
 8008e62:	781a      	ldrb	r2, [r3, #0]
 8008e64:	2a39      	cmp	r2, #57	; 0x39
 8008e66:	d063      	beq.n	8008f30 <_dtoa_r+0xbdc>
 8008e68:	3201      	adds	r2, #1
 8008e6a:	701a      	strb	r2, [r3, #0]
 8008e6c:	e747      	b.n	8008cfe <_dtoa_r+0x9aa>
 8008e6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	dd03      	ble.n	8008e7c <_dtoa_r+0xb28>
 8008e74:	2c39      	cmp	r4, #57	; 0x39
 8008e76:	d0ee      	beq.n	8008e56 <_dtoa_r+0xb02>
 8008e78:	3401      	adds	r4, #1
 8008e7a:	e7ce      	b.n	8008e1a <_dtoa_r+0xac6>
 8008e7c:	9b07      	ldr	r3, [sp, #28]
 8008e7e:	9a07      	ldr	r2, [sp, #28]
 8008e80:	701c      	strb	r4, [r3, #0]
 8008e82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d03e      	beq.n	8008f06 <_dtoa_r+0xbb2>
 8008e88:	2300      	movs	r3, #0
 8008e8a:	220a      	movs	r2, #10
 8008e8c:	9905      	ldr	r1, [sp, #20]
 8008e8e:	9804      	ldr	r0, [sp, #16]
 8008e90:	f000 fc8e 	bl	80097b0 <__multadd>
 8008e94:	2300      	movs	r3, #0
 8008e96:	9005      	str	r0, [sp, #20]
 8008e98:	220a      	movs	r2, #10
 8008e9a:	0029      	movs	r1, r5
 8008e9c:	9804      	ldr	r0, [sp, #16]
 8008e9e:	42bd      	cmp	r5, r7
 8008ea0:	d106      	bne.n	8008eb0 <_dtoa_r+0xb5c>
 8008ea2:	f000 fc85 	bl	80097b0 <__multadd>
 8008ea6:	0005      	movs	r5, r0
 8008ea8:	0007      	movs	r7, r0
 8008eaa:	9b08      	ldr	r3, [sp, #32]
 8008eac:	9307      	str	r3, [sp, #28]
 8008eae:	e784      	b.n	8008dba <_dtoa_r+0xa66>
 8008eb0:	f000 fc7e 	bl	80097b0 <__multadd>
 8008eb4:	0039      	movs	r1, r7
 8008eb6:	0005      	movs	r5, r0
 8008eb8:	2300      	movs	r3, #0
 8008eba:	220a      	movs	r2, #10
 8008ebc:	9804      	ldr	r0, [sp, #16]
 8008ebe:	f000 fc77 	bl	80097b0 <__multadd>
 8008ec2:	0007      	movs	r7, r0
 8008ec4:	e7f1      	b.n	8008eaa <_dtoa_r+0xb56>
 8008ec6:	9b07      	ldr	r3, [sp, #28]
 8008ec8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008eca:	2500      	movs	r5, #0
 8008ecc:	0031      	movs	r1, r6
 8008ece:	9805      	ldr	r0, [sp, #20]
 8008ed0:	f7ff f9b0 	bl	8008234 <quorem>
 8008ed4:	9b06      	ldr	r3, [sp, #24]
 8008ed6:	3030      	adds	r0, #48	; 0x30
 8008ed8:	5558      	strb	r0, [r3, r5]
 8008eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008edc:	3501      	adds	r5, #1
 8008ede:	0004      	movs	r4, r0
 8008ee0:	42ab      	cmp	r3, r5
 8008ee2:	dd07      	ble.n	8008ef4 <_dtoa_r+0xba0>
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	220a      	movs	r2, #10
 8008ee8:	9905      	ldr	r1, [sp, #20]
 8008eea:	9804      	ldr	r0, [sp, #16]
 8008eec:	f000 fc60 	bl	80097b0 <__multadd>
 8008ef0:	9005      	str	r0, [sp, #20]
 8008ef2:	e7eb      	b.n	8008ecc <_dtoa_r+0xb78>
 8008ef4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	2a00      	cmp	r2, #0
 8008efa:	dd00      	ble.n	8008efe <_dtoa_r+0xbaa>
 8008efc:	0013      	movs	r3, r2
 8008efe:	2500      	movs	r5, #0
 8008f00:	9a06      	ldr	r2, [sp, #24]
 8008f02:	18d3      	adds	r3, r2, r3
 8008f04:	9308      	str	r3, [sp, #32]
 8008f06:	9905      	ldr	r1, [sp, #20]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	9804      	ldr	r0, [sp, #16]
 8008f0c:	f000 fe4c 	bl	8009ba8 <__lshift>
 8008f10:	0031      	movs	r1, r6
 8008f12:	9005      	str	r0, [sp, #20]
 8008f14:	f000 feb6 	bl	8009c84 <__mcmp>
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	dc9f      	bgt.n	8008e5c <_dtoa_r+0xb08>
 8008f1c:	d101      	bne.n	8008f22 <_dtoa_r+0xbce>
 8008f1e:	07e4      	lsls	r4, r4, #31
 8008f20:	d49c      	bmi.n	8008e5c <_dtoa_r+0xb08>
 8008f22:	9b08      	ldr	r3, [sp, #32]
 8008f24:	9308      	str	r3, [sp, #32]
 8008f26:	3b01      	subs	r3, #1
 8008f28:	781a      	ldrb	r2, [r3, #0]
 8008f2a:	2a30      	cmp	r2, #48	; 0x30
 8008f2c:	d0fa      	beq.n	8008f24 <_dtoa_r+0xbd0>
 8008f2e:	e6e6      	b.n	8008cfe <_dtoa_r+0x9aa>
 8008f30:	9a06      	ldr	r2, [sp, #24]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d193      	bne.n	8008e5e <_dtoa_r+0xb0a>
 8008f36:	9b03      	ldr	r3, [sp, #12]
 8008f38:	3301      	adds	r3, #1
 8008f3a:	9303      	str	r3, [sp, #12]
 8008f3c:	2331      	movs	r3, #49	; 0x31
 8008f3e:	7013      	strb	r3, [r2, #0]
 8008f40:	e6dd      	b.n	8008cfe <_dtoa_r+0x9aa>
 8008f42:	4b09      	ldr	r3, [pc, #36]	; (8008f68 <_dtoa_r+0xc14>)
 8008f44:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008f46:	9306      	str	r3, [sp, #24]
 8008f48:	4b08      	ldr	r3, [pc, #32]	; (8008f6c <_dtoa_r+0xc18>)
 8008f4a:	2a00      	cmp	r2, #0
 8008f4c:	d001      	beq.n	8008f52 <_dtoa_r+0xbfe>
 8008f4e:	f7ff fa49 	bl	80083e4 <_dtoa_r+0x90>
 8008f52:	f7ff fa49 	bl	80083e8 <_dtoa_r+0x94>
 8008f56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	dcb6      	bgt.n	8008eca <_dtoa_r+0xb76>
 8008f5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f5e:	2b02      	cmp	r3, #2
 8008f60:	dd00      	ble.n	8008f64 <_dtoa_r+0xc10>
 8008f62:	e6b6      	b.n	8008cd2 <_dtoa_r+0x97e>
 8008f64:	e7b1      	b.n	8008eca <_dtoa_r+0xb76>
 8008f66:	46c0      	nop			; (mov r8, r8)
 8008f68:	0800ae62 	.word	0x0800ae62
 8008f6c:	0800ae6a 	.word	0x0800ae6a

08008f70 <_free_r>:
 8008f70:	b570      	push	{r4, r5, r6, lr}
 8008f72:	0005      	movs	r5, r0
 8008f74:	2900      	cmp	r1, #0
 8008f76:	d010      	beq.n	8008f9a <_free_r+0x2a>
 8008f78:	1f0c      	subs	r4, r1, #4
 8008f7a:	6823      	ldr	r3, [r4, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	da00      	bge.n	8008f82 <_free_r+0x12>
 8008f80:	18e4      	adds	r4, r4, r3
 8008f82:	0028      	movs	r0, r5
 8008f84:	f7fd f9ce 	bl	8006324 <__malloc_lock>
 8008f88:	4a1d      	ldr	r2, [pc, #116]	; (8009000 <_free_r+0x90>)
 8008f8a:	6813      	ldr	r3, [r2, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d105      	bne.n	8008f9c <_free_r+0x2c>
 8008f90:	6063      	str	r3, [r4, #4]
 8008f92:	6014      	str	r4, [r2, #0]
 8008f94:	0028      	movs	r0, r5
 8008f96:	f7fd f9cd 	bl	8006334 <__malloc_unlock>
 8008f9a:	bd70      	pop	{r4, r5, r6, pc}
 8008f9c:	42a3      	cmp	r3, r4
 8008f9e:	d908      	bls.n	8008fb2 <_free_r+0x42>
 8008fa0:	6820      	ldr	r0, [r4, #0]
 8008fa2:	1821      	adds	r1, r4, r0
 8008fa4:	428b      	cmp	r3, r1
 8008fa6:	d1f3      	bne.n	8008f90 <_free_r+0x20>
 8008fa8:	6819      	ldr	r1, [r3, #0]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	1809      	adds	r1, r1, r0
 8008fae:	6021      	str	r1, [r4, #0]
 8008fb0:	e7ee      	b.n	8008f90 <_free_r+0x20>
 8008fb2:	001a      	movs	r2, r3
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d001      	beq.n	8008fbe <_free_r+0x4e>
 8008fba:	42a3      	cmp	r3, r4
 8008fbc:	d9f9      	bls.n	8008fb2 <_free_r+0x42>
 8008fbe:	6811      	ldr	r1, [r2, #0]
 8008fc0:	1850      	adds	r0, r2, r1
 8008fc2:	42a0      	cmp	r0, r4
 8008fc4:	d10b      	bne.n	8008fde <_free_r+0x6e>
 8008fc6:	6820      	ldr	r0, [r4, #0]
 8008fc8:	1809      	adds	r1, r1, r0
 8008fca:	1850      	adds	r0, r2, r1
 8008fcc:	6011      	str	r1, [r2, #0]
 8008fce:	4283      	cmp	r3, r0
 8008fd0:	d1e0      	bne.n	8008f94 <_free_r+0x24>
 8008fd2:	6818      	ldr	r0, [r3, #0]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	1841      	adds	r1, r0, r1
 8008fd8:	6011      	str	r1, [r2, #0]
 8008fda:	6053      	str	r3, [r2, #4]
 8008fdc:	e7da      	b.n	8008f94 <_free_r+0x24>
 8008fde:	42a0      	cmp	r0, r4
 8008fe0:	d902      	bls.n	8008fe8 <_free_r+0x78>
 8008fe2:	230c      	movs	r3, #12
 8008fe4:	602b      	str	r3, [r5, #0]
 8008fe6:	e7d5      	b.n	8008f94 <_free_r+0x24>
 8008fe8:	6820      	ldr	r0, [r4, #0]
 8008fea:	1821      	adds	r1, r4, r0
 8008fec:	428b      	cmp	r3, r1
 8008fee:	d103      	bne.n	8008ff8 <_free_r+0x88>
 8008ff0:	6819      	ldr	r1, [r3, #0]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	1809      	adds	r1, r1, r0
 8008ff6:	6021      	str	r1, [r4, #0]
 8008ff8:	6063      	str	r3, [r4, #4]
 8008ffa:	6054      	str	r4, [r2, #4]
 8008ffc:	e7ca      	b.n	8008f94 <_free_r+0x24>
 8008ffe:	46c0      	nop			; (mov r8, r8)
 8009000:	20000578 	.word	0x20000578

08009004 <rshift>:
 8009004:	0002      	movs	r2, r0
 8009006:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009008:	6904      	ldr	r4, [r0, #16]
 800900a:	114b      	asrs	r3, r1, #5
 800900c:	b085      	sub	sp, #20
 800900e:	3214      	adds	r2, #20
 8009010:	9302      	str	r3, [sp, #8]
 8009012:	114d      	asrs	r5, r1, #5
 8009014:	0013      	movs	r3, r2
 8009016:	42ac      	cmp	r4, r5
 8009018:	dd32      	ble.n	8009080 <rshift+0x7c>
 800901a:	261f      	movs	r6, #31
 800901c:	000f      	movs	r7, r1
 800901e:	114b      	asrs	r3, r1, #5
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	00a5      	lsls	r5, r4, #2
 8009024:	18d3      	adds	r3, r2, r3
 8009026:	4037      	ands	r7, r6
 8009028:	1955      	adds	r5, r2, r5
 800902a:	9300      	str	r3, [sp, #0]
 800902c:	9701      	str	r7, [sp, #4]
 800902e:	4231      	tst	r1, r6
 8009030:	d10d      	bne.n	800904e <rshift+0x4a>
 8009032:	0016      	movs	r6, r2
 8009034:	0019      	movs	r1, r3
 8009036:	428d      	cmp	r5, r1
 8009038:	d836      	bhi.n	80090a8 <rshift+0xa4>
 800903a:	9900      	ldr	r1, [sp, #0]
 800903c:	2300      	movs	r3, #0
 800903e:	3903      	subs	r1, #3
 8009040:	428d      	cmp	r5, r1
 8009042:	d302      	bcc.n	800904a <rshift+0x46>
 8009044:	9b02      	ldr	r3, [sp, #8]
 8009046:	1ae4      	subs	r4, r4, r3
 8009048:	00a3      	lsls	r3, r4, #2
 800904a:	18d3      	adds	r3, r2, r3
 800904c:	e018      	b.n	8009080 <rshift+0x7c>
 800904e:	2120      	movs	r1, #32
 8009050:	9e01      	ldr	r6, [sp, #4]
 8009052:	9f01      	ldr	r7, [sp, #4]
 8009054:	1b89      	subs	r1, r1, r6
 8009056:	9e00      	ldr	r6, [sp, #0]
 8009058:	9103      	str	r1, [sp, #12]
 800905a:	ce02      	ldmia	r6!, {r1}
 800905c:	4694      	mov	ip, r2
 800905e:	40f9      	lsrs	r1, r7
 8009060:	42b5      	cmp	r5, r6
 8009062:	d816      	bhi.n	8009092 <rshift+0x8e>
 8009064:	9e00      	ldr	r6, [sp, #0]
 8009066:	2300      	movs	r3, #0
 8009068:	3601      	adds	r6, #1
 800906a:	42b5      	cmp	r5, r6
 800906c:	d303      	bcc.n	8009076 <rshift+0x72>
 800906e:	9b02      	ldr	r3, [sp, #8]
 8009070:	1ae3      	subs	r3, r4, r3
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	3b04      	subs	r3, #4
 8009076:	18d3      	adds	r3, r2, r3
 8009078:	6019      	str	r1, [r3, #0]
 800907a:	2900      	cmp	r1, #0
 800907c:	d000      	beq.n	8009080 <rshift+0x7c>
 800907e:	3304      	adds	r3, #4
 8009080:	1a99      	subs	r1, r3, r2
 8009082:	1089      	asrs	r1, r1, #2
 8009084:	6101      	str	r1, [r0, #16]
 8009086:	4293      	cmp	r3, r2
 8009088:	d101      	bne.n	800908e <rshift+0x8a>
 800908a:	2300      	movs	r3, #0
 800908c:	6143      	str	r3, [r0, #20]
 800908e:	b005      	add	sp, #20
 8009090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009092:	6837      	ldr	r7, [r6, #0]
 8009094:	9b03      	ldr	r3, [sp, #12]
 8009096:	409f      	lsls	r7, r3
 8009098:	430f      	orrs	r7, r1
 800909a:	4661      	mov	r1, ip
 800909c:	c180      	stmia	r1!, {r7}
 800909e:	468c      	mov	ip, r1
 80090a0:	9b01      	ldr	r3, [sp, #4]
 80090a2:	ce02      	ldmia	r6!, {r1}
 80090a4:	40d9      	lsrs	r1, r3
 80090a6:	e7db      	b.n	8009060 <rshift+0x5c>
 80090a8:	c980      	ldmia	r1!, {r7}
 80090aa:	c680      	stmia	r6!, {r7}
 80090ac:	e7c3      	b.n	8009036 <rshift+0x32>

080090ae <__hexdig_fun>:
 80090ae:	0002      	movs	r2, r0
 80090b0:	3a30      	subs	r2, #48	; 0x30
 80090b2:	0003      	movs	r3, r0
 80090b4:	2a09      	cmp	r2, #9
 80090b6:	d802      	bhi.n	80090be <__hexdig_fun+0x10>
 80090b8:	3b20      	subs	r3, #32
 80090ba:	b2d8      	uxtb	r0, r3
 80090bc:	4770      	bx	lr
 80090be:	0002      	movs	r2, r0
 80090c0:	3a61      	subs	r2, #97	; 0x61
 80090c2:	2a05      	cmp	r2, #5
 80090c4:	d801      	bhi.n	80090ca <__hexdig_fun+0x1c>
 80090c6:	3b47      	subs	r3, #71	; 0x47
 80090c8:	e7f7      	b.n	80090ba <__hexdig_fun+0xc>
 80090ca:	001a      	movs	r2, r3
 80090cc:	3a41      	subs	r2, #65	; 0x41
 80090ce:	2000      	movs	r0, #0
 80090d0:	2a05      	cmp	r2, #5
 80090d2:	d8f3      	bhi.n	80090bc <__hexdig_fun+0xe>
 80090d4:	3b27      	subs	r3, #39	; 0x27
 80090d6:	e7f0      	b.n	80090ba <__hexdig_fun+0xc>

080090d8 <__gethex>:
 80090d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090da:	b089      	sub	sp, #36	; 0x24
 80090dc:	9307      	str	r3, [sp, #28]
 80090de:	2302      	movs	r3, #2
 80090e0:	9201      	str	r2, [sp, #4]
 80090e2:	680a      	ldr	r2, [r1, #0]
 80090e4:	425b      	negs	r3, r3
 80090e6:	9003      	str	r0, [sp, #12]
 80090e8:	9106      	str	r1, [sp, #24]
 80090ea:	1c96      	adds	r6, r2, #2
 80090ec:	1a9b      	subs	r3, r3, r2
 80090ee:	199a      	adds	r2, r3, r6
 80090f0:	9600      	str	r6, [sp, #0]
 80090f2:	9205      	str	r2, [sp, #20]
 80090f4:	9a00      	ldr	r2, [sp, #0]
 80090f6:	3601      	adds	r6, #1
 80090f8:	7810      	ldrb	r0, [r2, #0]
 80090fa:	2830      	cmp	r0, #48	; 0x30
 80090fc:	d0f7      	beq.n	80090ee <__gethex+0x16>
 80090fe:	f7ff ffd6 	bl	80090ae <__hexdig_fun>
 8009102:	2300      	movs	r3, #0
 8009104:	001d      	movs	r5, r3
 8009106:	9302      	str	r3, [sp, #8]
 8009108:	4298      	cmp	r0, r3
 800910a:	d11d      	bne.n	8009148 <__gethex+0x70>
 800910c:	2201      	movs	r2, #1
 800910e:	49a6      	ldr	r1, [pc, #664]	; (80093a8 <__gethex+0x2d0>)
 8009110:	9800      	ldr	r0, [sp, #0]
 8009112:	f7fe ffa3 	bl	800805c <strncmp>
 8009116:	0007      	movs	r7, r0
 8009118:	42a8      	cmp	r0, r5
 800911a:	d169      	bne.n	80091f0 <__gethex+0x118>
 800911c:	9b00      	ldr	r3, [sp, #0]
 800911e:	0034      	movs	r4, r6
 8009120:	7858      	ldrb	r0, [r3, #1]
 8009122:	f7ff ffc4 	bl	80090ae <__hexdig_fun>
 8009126:	2301      	movs	r3, #1
 8009128:	9302      	str	r3, [sp, #8]
 800912a:	42a8      	cmp	r0, r5
 800912c:	d02f      	beq.n	800918e <__gethex+0xb6>
 800912e:	9600      	str	r6, [sp, #0]
 8009130:	9b00      	ldr	r3, [sp, #0]
 8009132:	7818      	ldrb	r0, [r3, #0]
 8009134:	2830      	cmp	r0, #48	; 0x30
 8009136:	d009      	beq.n	800914c <__gethex+0x74>
 8009138:	f7ff ffb9 	bl	80090ae <__hexdig_fun>
 800913c:	4242      	negs	r2, r0
 800913e:	4142      	adcs	r2, r0
 8009140:	2301      	movs	r3, #1
 8009142:	0035      	movs	r5, r6
 8009144:	9202      	str	r2, [sp, #8]
 8009146:	9305      	str	r3, [sp, #20]
 8009148:	9c00      	ldr	r4, [sp, #0]
 800914a:	e004      	b.n	8009156 <__gethex+0x7e>
 800914c:	9b00      	ldr	r3, [sp, #0]
 800914e:	3301      	adds	r3, #1
 8009150:	9300      	str	r3, [sp, #0]
 8009152:	e7ed      	b.n	8009130 <__gethex+0x58>
 8009154:	3401      	adds	r4, #1
 8009156:	7820      	ldrb	r0, [r4, #0]
 8009158:	f7ff ffa9 	bl	80090ae <__hexdig_fun>
 800915c:	1e07      	subs	r7, r0, #0
 800915e:	d1f9      	bne.n	8009154 <__gethex+0x7c>
 8009160:	2201      	movs	r2, #1
 8009162:	0020      	movs	r0, r4
 8009164:	4990      	ldr	r1, [pc, #576]	; (80093a8 <__gethex+0x2d0>)
 8009166:	f7fe ff79 	bl	800805c <strncmp>
 800916a:	2800      	cmp	r0, #0
 800916c:	d10d      	bne.n	800918a <__gethex+0xb2>
 800916e:	2d00      	cmp	r5, #0
 8009170:	d106      	bne.n	8009180 <__gethex+0xa8>
 8009172:	3401      	adds	r4, #1
 8009174:	0025      	movs	r5, r4
 8009176:	7820      	ldrb	r0, [r4, #0]
 8009178:	f7ff ff99 	bl	80090ae <__hexdig_fun>
 800917c:	2800      	cmp	r0, #0
 800917e:	d102      	bne.n	8009186 <__gethex+0xae>
 8009180:	1b2d      	subs	r5, r5, r4
 8009182:	00af      	lsls	r7, r5, #2
 8009184:	e003      	b.n	800918e <__gethex+0xb6>
 8009186:	3401      	adds	r4, #1
 8009188:	e7f5      	b.n	8009176 <__gethex+0x9e>
 800918a:	2d00      	cmp	r5, #0
 800918c:	d1f8      	bne.n	8009180 <__gethex+0xa8>
 800918e:	2220      	movs	r2, #32
 8009190:	7823      	ldrb	r3, [r4, #0]
 8009192:	0026      	movs	r6, r4
 8009194:	4393      	bics	r3, r2
 8009196:	2b50      	cmp	r3, #80	; 0x50
 8009198:	d11d      	bne.n	80091d6 <__gethex+0xfe>
 800919a:	7863      	ldrb	r3, [r4, #1]
 800919c:	2b2b      	cmp	r3, #43	; 0x2b
 800919e:	d02c      	beq.n	80091fa <__gethex+0x122>
 80091a0:	2b2d      	cmp	r3, #45	; 0x2d
 80091a2:	d02e      	beq.n	8009202 <__gethex+0x12a>
 80091a4:	2300      	movs	r3, #0
 80091a6:	1c66      	adds	r6, r4, #1
 80091a8:	9304      	str	r3, [sp, #16]
 80091aa:	7830      	ldrb	r0, [r6, #0]
 80091ac:	f7ff ff7f 	bl	80090ae <__hexdig_fun>
 80091b0:	1e43      	subs	r3, r0, #1
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	2b18      	cmp	r3, #24
 80091b6:	d82b      	bhi.n	8009210 <__gethex+0x138>
 80091b8:	3810      	subs	r0, #16
 80091ba:	0005      	movs	r5, r0
 80091bc:	7870      	ldrb	r0, [r6, #1]
 80091be:	f7ff ff76 	bl	80090ae <__hexdig_fun>
 80091c2:	1e43      	subs	r3, r0, #1
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	3601      	adds	r6, #1
 80091c8:	2b18      	cmp	r3, #24
 80091ca:	d91c      	bls.n	8009206 <__gethex+0x12e>
 80091cc:	9b04      	ldr	r3, [sp, #16]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d000      	beq.n	80091d4 <__gethex+0xfc>
 80091d2:	426d      	negs	r5, r5
 80091d4:	197f      	adds	r7, r7, r5
 80091d6:	9b06      	ldr	r3, [sp, #24]
 80091d8:	601e      	str	r6, [r3, #0]
 80091da:	9b02      	ldr	r3, [sp, #8]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d019      	beq.n	8009214 <__gethex+0x13c>
 80091e0:	2600      	movs	r6, #0
 80091e2:	9b05      	ldr	r3, [sp, #20]
 80091e4:	42b3      	cmp	r3, r6
 80091e6:	d100      	bne.n	80091ea <__gethex+0x112>
 80091e8:	3606      	adds	r6, #6
 80091ea:	0030      	movs	r0, r6
 80091ec:	b009      	add	sp, #36	; 0x24
 80091ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091f0:	2301      	movs	r3, #1
 80091f2:	2700      	movs	r7, #0
 80091f4:	9c00      	ldr	r4, [sp, #0]
 80091f6:	9302      	str	r3, [sp, #8]
 80091f8:	e7c9      	b.n	800918e <__gethex+0xb6>
 80091fa:	2300      	movs	r3, #0
 80091fc:	9304      	str	r3, [sp, #16]
 80091fe:	1ca6      	adds	r6, r4, #2
 8009200:	e7d3      	b.n	80091aa <__gethex+0xd2>
 8009202:	2301      	movs	r3, #1
 8009204:	e7fa      	b.n	80091fc <__gethex+0x124>
 8009206:	230a      	movs	r3, #10
 8009208:	435d      	muls	r5, r3
 800920a:	182d      	adds	r5, r5, r0
 800920c:	3d10      	subs	r5, #16
 800920e:	e7d5      	b.n	80091bc <__gethex+0xe4>
 8009210:	0026      	movs	r6, r4
 8009212:	e7e0      	b.n	80091d6 <__gethex+0xfe>
 8009214:	9b00      	ldr	r3, [sp, #0]
 8009216:	9902      	ldr	r1, [sp, #8]
 8009218:	1ae3      	subs	r3, r4, r3
 800921a:	3b01      	subs	r3, #1
 800921c:	2b07      	cmp	r3, #7
 800921e:	dc0a      	bgt.n	8009236 <__gethex+0x15e>
 8009220:	9803      	ldr	r0, [sp, #12]
 8009222:	f000 fa5d 	bl	80096e0 <_Balloc>
 8009226:	1e05      	subs	r5, r0, #0
 8009228:	d108      	bne.n	800923c <__gethex+0x164>
 800922a:	002a      	movs	r2, r5
 800922c:	21e4      	movs	r1, #228	; 0xe4
 800922e:	4b5f      	ldr	r3, [pc, #380]	; (80093ac <__gethex+0x2d4>)
 8009230:	485f      	ldr	r0, [pc, #380]	; (80093b0 <__gethex+0x2d8>)
 8009232:	f001 f947 	bl	800a4c4 <__assert_func>
 8009236:	3101      	adds	r1, #1
 8009238:	105b      	asrs	r3, r3, #1
 800923a:	e7ef      	b.n	800921c <__gethex+0x144>
 800923c:	0003      	movs	r3, r0
 800923e:	3314      	adds	r3, #20
 8009240:	9302      	str	r3, [sp, #8]
 8009242:	9305      	str	r3, [sp, #20]
 8009244:	2300      	movs	r3, #0
 8009246:	001e      	movs	r6, r3
 8009248:	9304      	str	r3, [sp, #16]
 800924a:	9b00      	ldr	r3, [sp, #0]
 800924c:	42a3      	cmp	r3, r4
 800924e:	d33f      	bcc.n	80092d0 <__gethex+0x1f8>
 8009250:	9c05      	ldr	r4, [sp, #20]
 8009252:	9b02      	ldr	r3, [sp, #8]
 8009254:	c440      	stmia	r4!, {r6}
 8009256:	1ae4      	subs	r4, r4, r3
 8009258:	10a4      	asrs	r4, r4, #2
 800925a:	0030      	movs	r0, r6
 800925c:	612c      	str	r4, [r5, #16]
 800925e:	f000 fb37 	bl	80098d0 <__hi0bits>
 8009262:	9b01      	ldr	r3, [sp, #4]
 8009264:	0164      	lsls	r4, r4, #5
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	1a26      	subs	r6, r4, r0
 800926a:	9300      	str	r3, [sp, #0]
 800926c:	429e      	cmp	r6, r3
 800926e:	dd51      	ble.n	8009314 <__gethex+0x23c>
 8009270:	1af6      	subs	r6, r6, r3
 8009272:	0031      	movs	r1, r6
 8009274:	0028      	movs	r0, r5
 8009276:	f000 fecb 	bl	800a010 <__any_on>
 800927a:	1e04      	subs	r4, r0, #0
 800927c:	d016      	beq.n	80092ac <__gethex+0x1d4>
 800927e:	2401      	movs	r4, #1
 8009280:	231f      	movs	r3, #31
 8009282:	0020      	movs	r0, r4
 8009284:	1e72      	subs	r2, r6, #1
 8009286:	4013      	ands	r3, r2
 8009288:	4098      	lsls	r0, r3
 800928a:	0003      	movs	r3, r0
 800928c:	1151      	asrs	r1, r2, #5
 800928e:	9802      	ldr	r0, [sp, #8]
 8009290:	0089      	lsls	r1, r1, #2
 8009292:	5809      	ldr	r1, [r1, r0]
 8009294:	4219      	tst	r1, r3
 8009296:	d009      	beq.n	80092ac <__gethex+0x1d4>
 8009298:	42a2      	cmp	r2, r4
 800929a:	dd06      	ble.n	80092aa <__gethex+0x1d2>
 800929c:	0028      	movs	r0, r5
 800929e:	1eb1      	subs	r1, r6, #2
 80092a0:	f000 feb6 	bl	800a010 <__any_on>
 80092a4:	3402      	adds	r4, #2
 80092a6:	2800      	cmp	r0, #0
 80092a8:	d100      	bne.n	80092ac <__gethex+0x1d4>
 80092aa:	2402      	movs	r4, #2
 80092ac:	0031      	movs	r1, r6
 80092ae:	0028      	movs	r0, r5
 80092b0:	f7ff fea8 	bl	8009004 <rshift>
 80092b4:	19bf      	adds	r7, r7, r6
 80092b6:	9b01      	ldr	r3, [sp, #4]
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	42bb      	cmp	r3, r7
 80092bc:	da3a      	bge.n	8009334 <__gethex+0x25c>
 80092be:	0029      	movs	r1, r5
 80092c0:	9803      	ldr	r0, [sp, #12]
 80092c2:	f000 fa51 	bl	8009768 <_Bfree>
 80092c6:	2300      	movs	r3, #0
 80092c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092ca:	26a3      	movs	r6, #163	; 0xa3
 80092cc:	6013      	str	r3, [r2, #0]
 80092ce:	e78c      	b.n	80091ea <__gethex+0x112>
 80092d0:	3c01      	subs	r4, #1
 80092d2:	7823      	ldrb	r3, [r4, #0]
 80092d4:	2b2e      	cmp	r3, #46	; 0x2e
 80092d6:	d012      	beq.n	80092fe <__gethex+0x226>
 80092d8:	9b04      	ldr	r3, [sp, #16]
 80092da:	2b20      	cmp	r3, #32
 80092dc:	d104      	bne.n	80092e8 <__gethex+0x210>
 80092de:	9b05      	ldr	r3, [sp, #20]
 80092e0:	c340      	stmia	r3!, {r6}
 80092e2:	2600      	movs	r6, #0
 80092e4:	9305      	str	r3, [sp, #20]
 80092e6:	9604      	str	r6, [sp, #16]
 80092e8:	7820      	ldrb	r0, [r4, #0]
 80092ea:	f7ff fee0 	bl	80090ae <__hexdig_fun>
 80092ee:	230f      	movs	r3, #15
 80092f0:	4018      	ands	r0, r3
 80092f2:	9b04      	ldr	r3, [sp, #16]
 80092f4:	4098      	lsls	r0, r3
 80092f6:	3304      	adds	r3, #4
 80092f8:	4306      	orrs	r6, r0
 80092fa:	9304      	str	r3, [sp, #16]
 80092fc:	e7a5      	b.n	800924a <__gethex+0x172>
 80092fe:	9b00      	ldr	r3, [sp, #0]
 8009300:	42a3      	cmp	r3, r4
 8009302:	d8e9      	bhi.n	80092d8 <__gethex+0x200>
 8009304:	2201      	movs	r2, #1
 8009306:	0020      	movs	r0, r4
 8009308:	4927      	ldr	r1, [pc, #156]	; (80093a8 <__gethex+0x2d0>)
 800930a:	f7fe fea7 	bl	800805c <strncmp>
 800930e:	2800      	cmp	r0, #0
 8009310:	d1e2      	bne.n	80092d8 <__gethex+0x200>
 8009312:	e79a      	b.n	800924a <__gethex+0x172>
 8009314:	9b00      	ldr	r3, [sp, #0]
 8009316:	2400      	movs	r4, #0
 8009318:	429e      	cmp	r6, r3
 800931a:	dacc      	bge.n	80092b6 <__gethex+0x1de>
 800931c:	1b9e      	subs	r6, r3, r6
 800931e:	0029      	movs	r1, r5
 8009320:	0032      	movs	r2, r6
 8009322:	9803      	ldr	r0, [sp, #12]
 8009324:	f000 fc40 	bl	8009ba8 <__lshift>
 8009328:	0003      	movs	r3, r0
 800932a:	3314      	adds	r3, #20
 800932c:	0005      	movs	r5, r0
 800932e:	1bbf      	subs	r7, r7, r6
 8009330:	9302      	str	r3, [sp, #8]
 8009332:	e7c0      	b.n	80092b6 <__gethex+0x1de>
 8009334:	9b01      	ldr	r3, [sp, #4]
 8009336:	685e      	ldr	r6, [r3, #4]
 8009338:	42be      	cmp	r6, r7
 800933a:	dd70      	ble.n	800941e <__gethex+0x346>
 800933c:	9b00      	ldr	r3, [sp, #0]
 800933e:	1bf6      	subs	r6, r6, r7
 8009340:	42b3      	cmp	r3, r6
 8009342:	dc37      	bgt.n	80093b4 <__gethex+0x2dc>
 8009344:	9b01      	ldr	r3, [sp, #4]
 8009346:	68db      	ldr	r3, [r3, #12]
 8009348:	2b02      	cmp	r3, #2
 800934a:	d024      	beq.n	8009396 <__gethex+0x2be>
 800934c:	2b03      	cmp	r3, #3
 800934e:	d026      	beq.n	800939e <__gethex+0x2c6>
 8009350:	2b01      	cmp	r3, #1
 8009352:	d117      	bne.n	8009384 <__gethex+0x2ac>
 8009354:	9b00      	ldr	r3, [sp, #0]
 8009356:	42b3      	cmp	r3, r6
 8009358:	d114      	bne.n	8009384 <__gethex+0x2ac>
 800935a:	2b01      	cmp	r3, #1
 800935c:	d10b      	bne.n	8009376 <__gethex+0x29e>
 800935e:	9b01      	ldr	r3, [sp, #4]
 8009360:	9a07      	ldr	r2, [sp, #28]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	2662      	movs	r6, #98	; 0x62
 8009366:	6013      	str	r3, [r2, #0]
 8009368:	2301      	movs	r3, #1
 800936a:	9a02      	ldr	r2, [sp, #8]
 800936c:	612b      	str	r3, [r5, #16]
 800936e:	6013      	str	r3, [r2, #0]
 8009370:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009372:	601d      	str	r5, [r3, #0]
 8009374:	e739      	b.n	80091ea <__gethex+0x112>
 8009376:	9900      	ldr	r1, [sp, #0]
 8009378:	0028      	movs	r0, r5
 800937a:	3901      	subs	r1, #1
 800937c:	f000 fe48 	bl	800a010 <__any_on>
 8009380:	2800      	cmp	r0, #0
 8009382:	d1ec      	bne.n	800935e <__gethex+0x286>
 8009384:	0029      	movs	r1, r5
 8009386:	9803      	ldr	r0, [sp, #12]
 8009388:	f000 f9ee 	bl	8009768 <_Bfree>
 800938c:	2300      	movs	r3, #0
 800938e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009390:	2650      	movs	r6, #80	; 0x50
 8009392:	6013      	str	r3, [r2, #0]
 8009394:	e729      	b.n	80091ea <__gethex+0x112>
 8009396:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009398:	2b00      	cmp	r3, #0
 800939a:	d1f3      	bne.n	8009384 <__gethex+0x2ac>
 800939c:	e7df      	b.n	800935e <__gethex+0x286>
 800939e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d1dc      	bne.n	800935e <__gethex+0x286>
 80093a4:	e7ee      	b.n	8009384 <__gethex+0x2ac>
 80093a6:	46c0      	nop			; (mov r8, r8)
 80093a8:	0800accc 	.word	0x0800accc
 80093ac:	0800aede 	.word	0x0800aede
 80093b0:	0800aeef 	.word	0x0800aeef
 80093b4:	1e77      	subs	r7, r6, #1
 80093b6:	2c00      	cmp	r4, #0
 80093b8:	d12f      	bne.n	800941a <__gethex+0x342>
 80093ba:	2f00      	cmp	r7, #0
 80093bc:	d004      	beq.n	80093c8 <__gethex+0x2f0>
 80093be:	0039      	movs	r1, r7
 80093c0:	0028      	movs	r0, r5
 80093c2:	f000 fe25 	bl	800a010 <__any_on>
 80093c6:	0004      	movs	r4, r0
 80093c8:	231f      	movs	r3, #31
 80093ca:	117a      	asrs	r2, r7, #5
 80093cc:	401f      	ands	r7, r3
 80093ce:	3b1e      	subs	r3, #30
 80093d0:	40bb      	lsls	r3, r7
 80093d2:	9902      	ldr	r1, [sp, #8]
 80093d4:	0092      	lsls	r2, r2, #2
 80093d6:	5852      	ldr	r2, [r2, r1]
 80093d8:	421a      	tst	r2, r3
 80093da:	d001      	beq.n	80093e0 <__gethex+0x308>
 80093dc:	2302      	movs	r3, #2
 80093de:	431c      	orrs	r4, r3
 80093e0:	9b00      	ldr	r3, [sp, #0]
 80093e2:	0031      	movs	r1, r6
 80093e4:	1b9b      	subs	r3, r3, r6
 80093e6:	2602      	movs	r6, #2
 80093e8:	0028      	movs	r0, r5
 80093ea:	9300      	str	r3, [sp, #0]
 80093ec:	f7ff fe0a 	bl	8009004 <rshift>
 80093f0:	9b01      	ldr	r3, [sp, #4]
 80093f2:	685f      	ldr	r7, [r3, #4]
 80093f4:	2c00      	cmp	r4, #0
 80093f6:	d041      	beq.n	800947c <__gethex+0x3a4>
 80093f8:	9b01      	ldr	r3, [sp, #4]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	2b02      	cmp	r3, #2
 80093fe:	d010      	beq.n	8009422 <__gethex+0x34a>
 8009400:	2b03      	cmp	r3, #3
 8009402:	d012      	beq.n	800942a <__gethex+0x352>
 8009404:	2b01      	cmp	r3, #1
 8009406:	d106      	bne.n	8009416 <__gethex+0x33e>
 8009408:	07a2      	lsls	r2, r4, #30
 800940a:	d504      	bpl.n	8009416 <__gethex+0x33e>
 800940c:	9a02      	ldr	r2, [sp, #8]
 800940e:	6812      	ldr	r2, [r2, #0]
 8009410:	4314      	orrs	r4, r2
 8009412:	421c      	tst	r4, r3
 8009414:	d10c      	bne.n	8009430 <__gethex+0x358>
 8009416:	2310      	movs	r3, #16
 8009418:	e02f      	b.n	800947a <__gethex+0x3a2>
 800941a:	2401      	movs	r4, #1
 800941c:	e7d4      	b.n	80093c8 <__gethex+0x2f0>
 800941e:	2601      	movs	r6, #1
 8009420:	e7e8      	b.n	80093f4 <__gethex+0x31c>
 8009422:	2301      	movs	r3, #1
 8009424:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009426:	1a9b      	subs	r3, r3, r2
 8009428:	930f      	str	r3, [sp, #60]	; 0x3c
 800942a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800942c:	2b00      	cmp	r3, #0
 800942e:	d0f2      	beq.n	8009416 <__gethex+0x33e>
 8009430:	692b      	ldr	r3, [r5, #16]
 8009432:	2000      	movs	r0, #0
 8009434:	9302      	str	r3, [sp, #8]
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	9304      	str	r3, [sp, #16]
 800943a:	002b      	movs	r3, r5
 800943c:	9a04      	ldr	r2, [sp, #16]
 800943e:	3314      	adds	r3, #20
 8009440:	1899      	adds	r1, r3, r2
 8009442:	681a      	ldr	r2, [r3, #0]
 8009444:	1c54      	adds	r4, r2, #1
 8009446:	d01e      	beq.n	8009486 <__gethex+0x3ae>
 8009448:	3201      	adds	r2, #1
 800944a:	601a      	str	r2, [r3, #0]
 800944c:	002b      	movs	r3, r5
 800944e:	3314      	adds	r3, #20
 8009450:	2e02      	cmp	r6, #2
 8009452:	d141      	bne.n	80094d8 <__gethex+0x400>
 8009454:	9a01      	ldr	r2, [sp, #4]
 8009456:	9900      	ldr	r1, [sp, #0]
 8009458:	6812      	ldr	r2, [r2, #0]
 800945a:	3a01      	subs	r2, #1
 800945c:	428a      	cmp	r2, r1
 800945e:	d10b      	bne.n	8009478 <__gethex+0x3a0>
 8009460:	221f      	movs	r2, #31
 8009462:	9800      	ldr	r0, [sp, #0]
 8009464:	1149      	asrs	r1, r1, #5
 8009466:	4002      	ands	r2, r0
 8009468:	2001      	movs	r0, #1
 800946a:	0004      	movs	r4, r0
 800946c:	4094      	lsls	r4, r2
 800946e:	0089      	lsls	r1, r1, #2
 8009470:	58cb      	ldr	r3, [r1, r3]
 8009472:	4223      	tst	r3, r4
 8009474:	d000      	beq.n	8009478 <__gethex+0x3a0>
 8009476:	2601      	movs	r6, #1
 8009478:	2320      	movs	r3, #32
 800947a:	431e      	orrs	r6, r3
 800947c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800947e:	601d      	str	r5, [r3, #0]
 8009480:	9b07      	ldr	r3, [sp, #28]
 8009482:	601f      	str	r7, [r3, #0]
 8009484:	e6b1      	b.n	80091ea <__gethex+0x112>
 8009486:	c301      	stmia	r3!, {r0}
 8009488:	4299      	cmp	r1, r3
 800948a:	d8da      	bhi.n	8009442 <__gethex+0x36a>
 800948c:	68ab      	ldr	r3, [r5, #8]
 800948e:	9a02      	ldr	r2, [sp, #8]
 8009490:	429a      	cmp	r2, r3
 8009492:	db18      	blt.n	80094c6 <__gethex+0x3ee>
 8009494:	6869      	ldr	r1, [r5, #4]
 8009496:	9803      	ldr	r0, [sp, #12]
 8009498:	3101      	adds	r1, #1
 800949a:	f000 f921 	bl	80096e0 <_Balloc>
 800949e:	1e04      	subs	r4, r0, #0
 80094a0:	d104      	bne.n	80094ac <__gethex+0x3d4>
 80094a2:	0022      	movs	r2, r4
 80094a4:	2184      	movs	r1, #132	; 0x84
 80094a6:	4b1c      	ldr	r3, [pc, #112]	; (8009518 <__gethex+0x440>)
 80094a8:	481c      	ldr	r0, [pc, #112]	; (800951c <__gethex+0x444>)
 80094aa:	e6c2      	b.n	8009232 <__gethex+0x15a>
 80094ac:	0029      	movs	r1, r5
 80094ae:	692a      	ldr	r2, [r5, #16]
 80094b0:	310c      	adds	r1, #12
 80094b2:	3202      	adds	r2, #2
 80094b4:	0092      	lsls	r2, r2, #2
 80094b6:	300c      	adds	r0, #12
 80094b8:	f7fe fea8 	bl	800820c <memcpy>
 80094bc:	0029      	movs	r1, r5
 80094be:	9803      	ldr	r0, [sp, #12]
 80094c0:	f000 f952 	bl	8009768 <_Bfree>
 80094c4:	0025      	movs	r5, r4
 80094c6:	692b      	ldr	r3, [r5, #16]
 80094c8:	1c5a      	adds	r2, r3, #1
 80094ca:	612a      	str	r2, [r5, #16]
 80094cc:	2201      	movs	r2, #1
 80094ce:	3304      	adds	r3, #4
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	18eb      	adds	r3, r5, r3
 80094d4:	605a      	str	r2, [r3, #4]
 80094d6:	e7b9      	b.n	800944c <__gethex+0x374>
 80094d8:	692a      	ldr	r2, [r5, #16]
 80094da:	9902      	ldr	r1, [sp, #8]
 80094dc:	428a      	cmp	r2, r1
 80094de:	dd09      	ble.n	80094f4 <__gethex+0x41c>
 80094e0:	2101      	movs	r1, #1
 80094e2:	0028      	movs	r0, r5
 80094e4:	f7ff fd8e 	bl	8009004 <rshift>
 80094e8:	9b01      	ldr	r3, [sp, #4]
 80094ea:	3701      	adds	r7, #1
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	42bb      	cmp	r3, r7
 80094f0:	dac1      	bge.n	8009476 <__gethex+0x39e>
 80094f2:	e6e4      	b.n	80092be <__gethex+0x1e6>
 80094f4:	221f      	movs	r2, #31
 80094f6:	9c00      	ldr	r4, [sp, #0]
 80094f8:	9900      	ldr	r1, [sp, #0]
 80094fa:	2601      	movs	r6, #1
 80094fc:	4014      	ands	r4, r2
 80094fe:	4211      	tst	r1, r2
 8009500:	d0ba      	beq.n	8009478 <__gethex+0x3a0>
 8009502:	9a04      	ldr	r2, [sp, #16]
 8009504:	189b      	adds	r3, r3, r2
 8009506:	3b04      	subs	r3, #4
 8009508:	6818      	ldr	r0, [r3, #0]
 800950a:	f000 f9e1 	bl	80098d0 <__hi0bits>
 800950e:	2320      	movs	r3, #32
 8009510:	1b1b      	subs	r3, r3, r4
 8009512:	4298      	cmp	r0, r3
 8009514:	dbe4      	blt.n	80094e0 <__gethex+0x408>
 8009516:	e7af      	b.n	8009478 <__gethex+0x3a0>
 8009518:	0800aede 	.word	0x0800aede
 800951c:	0800aeef 	.word	0x0800aeef

08009520 <L_shift>:
 8009520:	2308      	movs	r3, #8
 8009522:	b570      	push	{r4, r5, r6, lr}
 8009524:	2520      	movs	r5, #32
 8009526:	1a9a      	subs	r2, r3, r2
 8009528:	0092      	lsls	r2, r2, #2
 800952a:	1aad      	subs	r5, r5, r2
 800952c:	6843      	ldr	r3, [r0, #4]
 800952e:	6804      	ldr	r4, [r0, #0]
 8009530:	001e      	movs	r6, r3
 8009532:	40ae      	lsls	r6, r5
 8009534:	40d3      	lsrs	r3, r2
 8009536:	4334      	orrs	r4, r6
 8009538:	6004      	str	r4, [r0, #0]
 800953a:	6043      	str	r3, [r0, #4]
 800953c:	3004      	adds	r0, #4
 800953e:	4288      	cmp	r0, r1
 8009540:	d3f4      	bcc.n	800952c <L_shift+0xc>
 8009542:	bd70      	pop	{r4, r5, r6, pc}

08009544 <__match>:
 8009544:	b530      	push	{r4, r5, lr}
 8009546:	6803      	ldr	r3, [r0, #0]
 8009548:	780c      	ldrb	r4, [r1, #0]
 800954a:	3301      	adds	r3, #1
 800954c:	2c00      	cmp	r4, #0
 800954e:	d102      	bne.n	8009556 <__match+0x12>
 8009550:	6003      	str	r3, [r0, #0]
 8009552:	2001      	movs	r0, #1
 8009554:	bd30      	pop	{r4, r5, pc}
 8009556:	781a      	ldrb	r2, [r3, #0]
 8009558:	0015      	movs	r5, r2
 800955a:	3d41      	subs	r5, #65	; 0x41
 800955c:	2d19      	cmp	r5, #25
 800955e:	d800      	bhi.n	8009562 <__match+0x1e>
 8009560:	3220      	adds	r2, #32
 8009562:	3101      	adds	r1, #1
 8009564:	42a2      	cmp	r2, r4
 8009566:	d0ef      	beq.n	8009548 <__match+0x4>
 8009568:	2000      	movs	r0, #0
 800956a:	e7f3      	b.n	8009554 <__match+0x10>

0800956c <__hexnan>:
 800956c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800956e:	680b      	ldr	r3, [r1, #0]
 8009570:	b08b      	sub	sp, #44	; 0x2c
 8009572:	9201      	str	r2, [sp, #4]
 8009574:	9901      	ldr	r1, [sp, #4]
 8009576:	115a      	asrs	r2, r3, #5
 8009578:	0092      	lsls	r2, r2, #2
 800957a:	188a      	adds	r2, r1, r2
 800957c:	9202      	str	r2, [sp, #8]
 800957e:	0019      	movs	r1, r3
 8009580:	221f      	movs	r2, #31
 8009582:	4011      	ands	r1, r2
 8009584:	9008      	str	r0, [sp, #32]
 8009586:	9106      	str	r1, [sp, #24]
 8009588:	4213      	tst	r3, r2
 800958a:	d002      	beq.n	8009592 <__hexnan+0x26>
 800958c:	9b02      	ldr	r3, [sp, #8]
 800958e:	3304      	adds	r3, #4
 8009590:	9302      	str	r3, [sp, #8]
 8009592:	9b02      	ldr	r3, [sp, #8]
 8009594:	2500      	movs	r5, #0
 8009596:	1f1f      	subs	r7, r3, #4
 8009598:	003e      	movs	r6, r7
 800959a:	003c      	movs	r4, r7
 800959c:	9b08      	ldr	r3, [sp, #32]
 800959e:	603d      	str	r5, [r7, #0]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	9507      	str	r5, [sp, #28]
 80095a4:	9305      	str	r3, [sp, #20]
 80095a6:	9503      	str	r5, [sp, #12]
 80095a8:	9b05      	ldr	r3, [sp, #20]
 80095aa:	3301      	adds	r3, #1
 80095ac:	9309      	str	r3, [sp, #36]	; 0x24
 80095ae:	9b05      	ldr	r3, [sp, #20]
 80095b0:	785b      	ldrb	r3, [r3, #1]
 80095b2:	9304      	str	r3, [sp, #16]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d028      	beq.n	800960a <__hexnan+0x9e>
 80095b8:	9804      	ldr	r0, [sp, #16]
 80095ba:	f7ff fd78 	bl	80090ae <__hexdig_fun>
 80095be:	2800      	cmp	r0, #0
 80095c0:	d154      	bne.n	800966c <__hexnan+0x100>
 80095c2:	9b04      	ldr	r3, [sp, #16]
 80095c4:	2b20      	cmp	r3, #32
 80095c6:	d819      	bhi.n	80095fc <__hexnan+0x90>
 80095c8:	9b03      	ldr	r3, [sp, #12]
 80095ca:	9a07      	ldr	r2, [sp, #28]
 80095cc:	4293      	cmp	r3, r2
 80095ce:	dd12      	ble.n	80095f6 <__hexnan+0x8a>
 80095d0:	42b4      	cmp	r4, r6
 80095d2:	d206      	bcs.n	80095e2 <__hexnan+0x76>
 80095d4:	2d07      	cmp	r5, #7
 80095d6:	dc04      	bgt.n	80095e2 <__hexnan+0x76>
 80095d8:	002a      	movs	r2, r5
 80095da:	0031      	movs	r1, r6
 80095dc:	0020      	movs	r0, r4
 80095de:	f7ff ff9f 	bl	8009520 <L_shift>
 80095e2:	9b01      	ldr	r3, [sp, #4]
 80095e4:	2508      	movs	r5, #8
 80095e6:	429c      	cmp	r4, r3
 80095e8:	d905      	bls.n	80095f6 <__hexnan+0x8a>
 80095ea:	1f26      	subs	r6, r4, #4
 80095ec:	2500      	movs	r5, #0
 80095ee:	0034      	movs	r4, r6
 80095f0:	9b03      	ldr	r3, [sp, #12]
 80095f2:	6035      	str	r5, [r6, #0]
 80095f4:	9307      	str	r3, [sp, #28]
 80095f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095f8:	9305      	str	r3, [sp, #20]
 80095fa:	e7d5      	b.n	80095a8 <__hexnan+0x3c>
 80095fc:	9b04      	ldr	r3, [sp, #16]
 80095fe:	2b29      	cmp	r3, #41	; 0x29
 8009600:	d159      	bne.n	80096b6 <__hexnan+0x14a>
 8009602:	9b05      	ldr	r3, [sp, #20]
 8009604:	9a08      	ldr	r2, [sp, #32]
 8009606:	3302      	adds	r3, #2
 8009608:	6013      	str	r3, [r2, #0]
 800960a:	9b03      	ldr	r3, [sp, #12]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d052      	beq.n	80096b6 <__hexnan+0x14a>
 8009610:	42b4      	cmp	r4, r6
 8009612:	d206      	bcs.n	8009622 <__hexnan+0xb6>
 8009614:	2d07      	cmp	r5, #7
 8009616:	dc04      	bgt.n	8009622 <__hexnan+0xb6>
 8009618:	002a      	movs	r2, r5
 800961a:	0031      	movs	r1, r6
 800961c:	0020      	movs	r0, r4
 800961e:	f7ff ff7f 	bl	8009520 <L_shift>
 8009622:	9b01      	ldr	r3, [sp, #4]
 8009624:	429c      	cmp	r4, r3
 8009626:	d935      	bls.n	8009694 <__hexnan+0x128>
 8009628:	001a      	movs	r2, r3
 800962a:	0023      	movs	r3, r4
 800962c:	cb02      	ldmia	r3!, {r1}
 800962e:	c202      	stmia	r2!, {r1}
 8009630:	429f      	cmp	r7, r3
 8009632:	d2fb      	bcs.n	800962c <__hexnan+0xc0>
 8009634:	9b02      	ldr	r3, [sp, #8]
 8009636:	1c62      	adds	r2, r4, #1
 8009638:	1ed9      	subs	r1, r3, #3
 800963a:	2304      	movs	r3, #4
 800963c:	4291      	cmp	r1, r2
 800963e:	d305      	bcc.n	800964c <__hexnan+0xe0>
 8009640:	9b02      	ldr	r3, [sp, #8]
 8009642:	3b04      	subs	r3, #4
 8009644:	1b1b      	subs	r3, r3, r4
 8009646:	089b      	lsrs	r3, r3, #2
 8009648:	3301      	adds	r3, #1
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	9a01      	ldr	r2, [sp, #4]
 800964e:	18d3      	adds	r3, r2, r3
 8009650:	2200      	movs	r2, #0
 8009652:	c304      	stmia	r3!, {r2}
 8009654:	429f      	cmp	r7, r3
 8009656:	d2fc      	bcs.n	8009652 <__hexnan+0xe6>
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d104      	bne.n	8009668 <__hexnan+0xfc>
 800965e:	9b01      	ldr	r3, [sp, #4]
 8009660:	429f      	cmp	r7, r3
 8009662:	d126      	bne.n	80096b2 <__hexnan+0x146>
 8009664:	2301      	movs	r3, #1
 8009666:	603b      	str	r3, [r7, #0]
 8009668:	2005      	movs	r0, #5
 800966a:	e025      	b.n	80096b8 <__hexnan+0x14c>
 800966c:	9b03      	ldr	r3, [sp, #12]
 800966e:	3501      	adds	r5, #1
 8009670:	3301      	adds	r3, #1
 8009672:	9303      	str	r3, [sp, #12]
 8009674:	2d08      	cmp	r5, #8
 8009676:	dd06      	ble.n	8009686 <__hexnan+0x11a>
 8009678:	9b01      	ldr	r3, [sp, #4]
 800967a:	429c      	cmp	r4, r3
 800967c:	d9bb      	bls.n	80095f6 <__hexnan+0x8a>
 800967e:	2300      	movs	r3, #0
 8009680:	2501      	movs	r5, #1
 8009682:	3c04      	subs	r4, #4
 8009684:	6023      	str	r3, [r4, #0]
 8009686:	220f      	movs	r2, #15
 8009688:	6823      	ldr	r3, [r4, #0]
 800968a:	4010      	ands	r0, r2
 800968c:	011b      	lsls	r3, r3, #4
 800968e:	4303      	orrs	r3, r0
 8009690:	6023      	str	r3, [r4, #0]
 8009692:	e7b0      	b.n	80095f6 <__hexnan+0x8a>
 8009694:	9b06      	ldr	r3, [sp, #24]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d0de      	beq.n	8009658 <__hexnan+0xec>
 800969a:	2320      	movs	r3, #32
 800969c:	9a06      	ldr	r2, [sp, #24]
 800969e:	9902      	ldr	r1, [sp, #8]
 80096a0:	1a9b      	subs	r3, r3, r2
 80096a2:	2201      	movs	r2, #1
 80096a4:	4252      	negs	r2, r2
 80096a6:	40da      	lsrs	r2, r3
 80096a8:	3904      	subs	r1, #4
 80096aa:	680b      	ldr	r3, [r1, #0]
 80096ac:	4013      	ands	r3, r2
 80096ae:	600b      	str	r3, [r1, #0]
 80096b0:	e7d2      	b.n	8009658 <__hexnan+0xec>
 80096b2:	3f04      	subs	r7, #4
 80096b4:	e7d0      	b.n	8009658 <__hexnan+0xec>
 80096b6:	2004      	movs	r0, #4
 80096b8:	b00b      	add	sp, #44	; 0x2c
 80096ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080096bc <__ascii_mbtowc>:
 80096bc:	b082      	sub	sp, #8
 80096be:	2900      	cmp	r1, #0
 80096c0:	d100      	bne.n	80096c4 <__ascii_mbtowc+0x8>
 80096c2:	a901      	add	r1, sp, #4
 80096c4:	1e10      	subs	r0, r2, #0
 80096c6:	d006      	beq.n	80096d6 <__ascii_mbtowc+0x1a>
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d006      	beq.n	80096da <__ascii_mbtowc+0x1e>
 80096cc:	7813      	ldrb	r3, [r2, #0]
 80096ce:	600b      	str	r3, [r1, #0]
 80096d0:	7810      	ldrb	r0, [r2, #0]
 80096d2:	1e43      	subs	r3, r0, #1
 80096d4:	4198      	sbcs	r0, r3
 80096d6:	b002      	add	sp, #8
 80096d8:	4770      	bx	lr
 80096da:	2002      	movs	r0, #2
 80096dc:	4240      	negs	r0, r0
 80096de:	e7fa      	b.n	80096d6 <__ascii_mbtowc+0x1a>

080096e0 <_Balloc>:
 80096e0:	b570      	push	{r4, r5, r6, lr}
 80096e2:	69c5      	ldr	r5, [r0, #28]
 80096e4:	0006      	movs	r6, r0
 80096e6:	000c      	movs	r4, r1
 80096e8:	2d00      	cmp	r5, #0
 80096ea:	d10e      	bne.n	800970a <_Balloc+0x2a>
 80096ec:	2010      	movs	r0, #16
 80096ee:	f7fc fd61 	bl	80061b4 <malloc>
 80096f2:	1e02      	subs	r2, r0, #0
 80096f4:	61f0      	str	r0, [r6, #28]
 80096f6:	d104      	bne.n	8009702 <_Balloc+0x22>
 80096f8:	216b      	movs	r1, #107	; 0x6b
 80096fa:	4b19      	ldr	r3, [pc, #100]	; (8009760 <_Balloc+0x80>)
 80096fc:	4819      	ldr	r0, [pc, #100]	; (8009764 <_Balloc+0x84>)
 80096fe:	f000 fee1 	bl	800a4c4 <__assert_func>
 8009702:	6045      	str	r5, [r0, #4]
 8009704:	6085      	str	r5, [r0, #8]
 8009706:	6005      	str	r5, [r0, #0]
 8009708:	60c5      	str	r5, [r0, #12]
 800970a:	69f5      	ldr	r5, [r6, #28]
 800970c:	68eb      	ldr	r3, [r5, #12]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d013      	beq.n	800973a <_Balloc+0x5a>
 8009712:	69f3      	ldr	r3, [r6, #28]
 8009714:	00a2      	lsls	r2, r4, #2
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	189b      	adds	r3, r3, r2
 800971a:	6818      	ldr	r0, [r3, #0]
 800971c:	2800      	cmp	r0, #0
 800971e:	d118      	bne.n	8009752 <_Balloc+0x72>
 8009720:	2101      	movs	r1, #1
 8009722:	000d      	movs	r5, r1
 8009724:	40a5      	lsls	r5, r4
 8009726:	1d6a      	adds	r2, r5, #5
 8009728:	0030      	movs	r0, r6
 800972a:	0092      	lsls	r2, r2, #2
 800972c:	f000 fee8 	bl	800a500 <_calloc_r>
 8009730:	2800      	cmp	r0, #0
 8009732:	d00c      	beq.n	800974e <_Balloc+0x6e>
 8009734:	6044      	str	r4, [r0, #4]
 8009736:	6085      	str	r5, [r0, #8]
 8009738:	e00d      	b.n	8009756 <_Balloc+0x76>
 800973a:	2221      	movs	r2, #33	; 0x21
 800973c:	2104      	movs	r1, #4
 800973e:	0030      	movs	r0, r6
 8009740:	f000 fede 	bl	800a500 <_calloc_r>
 8009744:	69f3      	ldr	r3, [r6, #28]
 8009746:	60e8      	str	r0, [r5, #12]
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d1e1      	bne.n	8009712 <_Balloc+0x32>
 800974e:	2000      	movs	r0, #0
 8009750:	bd70      	pop	{r4, r5, r6, pc}
 8009752:	6802      	ldr	r2, [r0, #0]
 8009754:	601a      	str	r2, [r3, #0]
 8009756:	2300      	movs	r3, #0
 8009758:	6103      	str	r3, [r0, #16]
 800975a:	60c3      	str	r3, [r0, #12]
 800975c:	e7f8      	b.n	8009750 <_Balloc+0x70>
 800975e:	46c0      	nop			; (mov r8, r8)
 8009760:	0800ae6f 	.word	0x0800ae6f
 8009764:	0800af4f 	.word	0x0800af4f

08009768 <_Bfree>:
 8009768:	b570      	push	{r4, r5, r6, lr}
 800976a:	69c6      	ldr	r6, [r0, #28]
 800976c:	0005      	movs	r5, r0
 800976e:	000c      	movs	r4, r1
 8009770:	2e00      	cmp	r6, #0
 8009772:	d10e      	bne.n	8009792 <_Bfree+0x2a>
 8009774:	2010      	movs	r0, #16
 8009776:	f7fc fd1d 	bl	80061b4 <malloc>
 800977a:	1e02      	subs	r2, r0, #0
 800977c:	61e8      	str	r0, [r5, #28]
 800977e:	d104      	bne.n	800978a <_Bfree+0x22>
 8009780:	218f      	movs	r1, #143	; 0x8f
 8009782:	4b09      	ldr	r3, [pc, #36]	; (80097a8 <_Bfree+0x40>)
 8009784:	4809      	ldr	r0, [pc, #36]	; (80097ac <_Bfree+0x44>)
 8009786:	f000 fe9d 	bl	800a4c4 <__assert_func>
 800978a:	6046      	str	r6, [r0, #4]
 800978c:	6086      	str	r6, [r0, #8]
 800978e:	6006      	str	r6, [r0, #0]
 8009790:	60c6      	str	r6, [r0, #12]
 8009792:	2c00      	cmp	r4, #0
 8009794:	d007      	beq.n	80097a6 <_Bfree+0x3e>
 8009796:	69eb      	ldr	r3, [r5, #28]
 8009798:	6862      	ldr	r2, [r4, #4]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	0092      	lsls	r2, r2, #2
 800979e:	189b      	adds	r3, r3, r2
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	6022      	str	r2, [r4, #0]
 80097a4:	601c      	str	r4, [r3, #0]
 80097a6:	bd70      	pop	{r4, r5, r6, pc}
 80097a8:	0800ae6f 	.word	0x0800ae6f
 80097ac:	0800af4f 	.word	0x0800af4f

080097b0 <__multadd>:
 80097b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097b2:	000e      	movs	r6, r1
 80097b4:	9001      	str	r0, [sp, #4]
 80097b6:	000c      	movs	r4, r1
 80097b8:	001d      	movs	r5, r3
 80097ba:	2000      	movs	r0, #0
 80097bc:	690f      	ldr	r7, [r1, #16]
 80097be:	3614      	adds	r6, #20
 80097c0:	6833      	ldr	r3, [r6, #0]
 80097c2:	3001      	adds	r0, #1
 80097c4:	b299      	uxth	r1, r3
 80097c6:	4351      	muls	r1, r2
 80097c8:	0c1b      	lsrs	r3, r3, #16
 80097ca:	4353      	muls	r3, r2
 80097cc:	1949      	adds	r1, r1, r5
 80097ce:	0c0d      	lsrs	r5, r1, #16
 80097d0:	195b      	adds	r3, r3, r5
 80097d2:	0c1d      	lsrs	r5, r3, #16
 80097d4:	b289      	uxth	r1, r1
 80097d6:	041b      	lsls	r3, r3, #16
 80097d8:	185b      	adds	r3, r3, r1
 80097da:	c608      	stmia	r6!, {r3}
 80097dc:	4287      	cmp	r7, r0
 80097de:	dcef      	bgt.n	80097c0 <__multadd+0x10>
 80097e0:	2d00      	cmp	r5, #0
 80097e2:	d022      	beq.n	800982a <__multadd+0x7a>
 80097e4:	68a3      	ldr	r3, [r4, #8]
 80097e6:	42bb      	cmp	r3, r7
 80097e8:	dc19      	bgt.n	800981e <__multadd+0x6e>
 80097ea:	6861      	ldr	r1, [r4, #4]
 80097ec:	9801      	ldr	r0, [sp, #4]
 80097ee:	3101      	adds	r1, #1
 80097f0:	f7ff ff76 	bl	80096e0 <_Balloc>
 80097f4:	1e06      	subs	r6, r0, #0
 80097f6:	d105      	bne.n	8009804 <__multadd+0x54>
 80097f8:	0032      	movs	r2, r6
 80097fa:	21ba      	movs	r1, #186	; 0xba
 80097fc:	4b0c      	ldr	r3, [pc, #48]	; (8009830 <__multadd+0x80>)
 80097fe:	480d      	ldr	r0, [pc, #52]	; (8009834 <__multadd+0x84>)
 8009800:	f000 fe60 	bl	800a4c4 <__assert_func>
 8009804:	0021      	movs	r1, r4
 8009806:	6922      	ldr	r2, [r4, #16]
 8009808:	310c      	adds	r1, #12
 800980a:	3202      	adds	r2, #2
 800980c:	0092      	lsls	r2, r2, #2
 800980e:	300c      	adds	r0, #12
 8009810:	f7fe fcfc 	bl	800820c <memcpy>
 8009814:	0021      	movs	r1, r4
 8009816:	9801      	ldr	r0, [sp, #4]
 8009818:	f7ff ffa6 	bl	8009768 <_Bfree>
 800981c:	0034      	movs	r4, r6
 800981e:	1d3b      	adds	r3, r7, #4
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	18e3      	adds	r3, r4, r3
 8009824:	605d      	str	r5, [r3, #4]
 8009826:	1c7b      	adds	r3, r7, #1
 8009828:	6123      	str	r3, [r4, #16]
 800982a:	0020      	movs	r0, r4
 800982c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800982e:	46c0      	nop			; (mov r8, r8)
 8009830:	0800aede 	.word	0x0800aede
 8009834:	0800af4f 	.word	0x0800af4f

08009838 <__s2b>:
 8009838:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800983a:	0006      	movs	r6, r0
 800983c:	0018      	movs	r0, r3
 800983e:	000c      	movs	r4, r1
 8009840:	3008      	adds	r0, #8
 8009842:	2109      	movs	r1, #9
 8009844:	9301      	str	r3, [sp, #4]
 8009846:	0015      	movs	r5, r2
 8009848:	f7f6 fd02 	bl	8000250 <__divsi3>
 800984c:	2301      	movs	r3, #1
 800984e:	2100      	movs	r1, #0
 8009850:	4283      	cmp	r3, r0
 8009852:	db0a      	blt.n	800986a <__s2b+0x32>
 8009854:	0030      	movs	r0, r6
 8009856:	f7ff ff43 	bl	80096e0 <_Balloc>
 800985a:	1e01      	subs	r1, r0, #0
 800985c:	d108      	bne.n	8009870 <__s2b+0x38>
 800985e:	000a      	movs	r2, r1
 8009860:	4b19      	ldr	r3, [pc, #100]	; (80098c8 <__s2b+0x90>)
 8009862:	481a      	ldr	r0, [pc, #104]	; (80098cc <__s2b+0x94>)
 8009864:	31d3      	adds	r1, #211	; 0xd3
 8009866:	f000 fe2d 	bl	800a4c4 <__assert_func>
 800986a:	005b      	lsls	r3, r3, #1
 800986c:	3101      	adds	r1, #1
 800986e:	e7ef      	b.n	8009850 <__s2b+0x18>
 8009870:	9b08      	ldr	r3, [sp, #32]
 8009872:	6143      	str	r3, [r0, #20]
 8009874:	2301      	movs	r3, #1
 8009876:	6103      	str	r3, [r0, #16]
 8009878:	2d09      	cmp	r5, #9
 800987a:	dd18      	ble.n	80098ae <__s2b+0x76>
 800987c:	0023      	movs	r3, r4
 800987e:	3309      	adds	r3, #9
 8009880:	001f      	movs	r7, r3
 8009882:	9300      	str	r3, [sp, #0]
 8009884:	1964      	adds	r4, r4, r5
 8009886:	783b      	ldrb	r3, [r7, #0]
 8009888:	220a      	movs	r2, #10
 800988a:	0030      	movs	r0, r6
 800988c:	3b30      	subs	r3, #48	; 0x30
 800988e:	f7ff ff8f 	bl	80097b0 <__multadd>
 8009892:	3701      	adds	r7, #1
 8009894:	0001      	movs	r1, r0
 8009896:	42a7      	cmp	r7, r4
 8009898:	d1f5      	bne.n	8009886 <__s2b+0x4e>
 800989a:	002c      	movs	r4, r5
 800989c:	9b00      	ldr	r3, [sp, #0]
 800989e:	3c08      	subs	r4, #8
 80098a0:	191c      	adds	r4, r3, r4
 80098a2:	002f      	movs	r7, r5
 80098a4:	9b01      	ldr	r3, [sp, #4]
 80098a6:	429f      	cmp	r7, r3
 80098a8:	db04      	blt.n	80098b4 <__s2b+0x7c>
 80098aa:	0008      	movs	r0, r1
 80098ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80098ae:	2509      	movs	r5, #9
 80098b0:	340a      	adds	r4, #10
 80098b2:	e7f6      	b.n	80098a2 <__s2b+0x6a>
 80098b4:	1b63      	subs	r3, r4, r5
 80098b6:	5ddb      	ldrb	r3, [r3, r7]
 80098b8:	220a      	movs	r2, #10
 80098ba:	0030      	movs	r0, r6
 80098bc:	3b30      	subs	r3, #48	; 0x30
 80098be:	f7ff ff77 	bl	80097b0 <__multadd>
 80098c2:	3701      	adds	r7, #1
 80098c4:	0001      	movs	r1, r0
 80098c6:	e7ed      	b.n	80098a4 <__s2b+0x6c>
 80098c8:	0800aede 	.word	0x0800aede
 80098cc:	0800af4f 	.word	0x0800af4f

080098d0 <__hi0bits>:
 80098d0:	0003      	movs	r3, r0
 80098d2:	0c02      	lsrs	r2, r0, #16
 80098d4:	2000      	movs	r0, #0
 80098d6:	4282      	cmp	r2, r0
 80098d8:	d101      	bne.n	80098de <__hi0bits+0xe>
 80098da:	041b      	lsls	r3, r3, #16
 80098dc:	3010      	adds	r0, #16
 80098de:	0e1a      	lsrs	r2, r3, #24
 80098e0:	d101      	bne.n	80098e6 <__hi0bits+0x16>
 80098e2:	3008      	adds	r0, #8
 80098e4:	021b      	lsls	r3, r3, #8
 80098e6:	0f1a      	lsrs	r2, r3, #28
 80098e8:	d101      	bne.n	80098ee <__hi0bits+0x1e>
 80098ea:	3004      	adds	r0, #4
 80098ec:	011b      	lsls	r3, r3, #4
 80098ee:	0f9a      	lsrs	r2, r3, #30
 80098f0:	d101      	bne.n	80098f6 <__hi0bits+0x26>
 80098f2:	3002      	adds	r0, #2
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	db03      	blt.n	8009902 <__hi0bits+0x32>
 80098fa:	3001      	adds	r0, #1
 80098fc:	005b      	lsls	r3, r3, #1
 80098fe:	d400      	bmi.n	8009902 <__hi0bits+0x32>
 8009900:	2020      	movs	r0, #32
 8009902:	4770      	bx	lr

08009904 <__lo0bits>:
 8009904:	6803      	ldr	r3, [r0, #0]
 8009906:	0001      	movs	r1, r0
 8009908:	2207      	movs	r2, #7
 800990a:	0018      	movs	r0, r3
 800990c:	4010      	ands	r0, r2
 800990e:	4213      	tst	r3, r2
 8009910:	d00d      	beq.n	800992e <__lo0bits+0x2a>
 8009912:	3a06      	subs	r2, #6
 8009914:	2000      	movs	r0, #0
 8009916:	4213      	tst	r3, r2
 8009918:	d105      	bne.n	8009926 <__lo0bits+0x22>
 800991a:	3002      	adds	r0, #2
 800991c:	4203      	tst	r3, r0
 800991e:	d003      	beq.n	8009928 <__lo0bits+0x24>
 8009920:	40d3      	lsrs	r3, r2
 8009922:	0010      	movs	r0, r2
 8009924:	600b      	str	r3, [r1, #0]
 8009926:	4770      	bx	lr
 8009928:	089b      	lsrs	r3, r3, #2
 800992a:	600b      	str	r3, [r1, #0]
 800992c:	e7fb      	b.n	8009926 <__lo0bits+0x22>
 800992e:	b29a      	uxth	r2, r3
 8009930:	2a00      	cmp	r2, #0
 8009932:	d101      	bne.n	8009938 <__lo0bits+0x34>
 8009934:	2010      	movs	r0, #16
 8009936:	0c1b      	lsrs	r3, r3, #16
 8009938:	b2da      	uxtb	r2, r3
 800993a:	2a00      	cmp	r2, #0
 800993c:	d101      	bne.n	8009942 <__lo0bits+0x3e>
 800993e:	3008      	adds	r0, #8
 8009940:	0a1b      	lsrs	r3, r3, #8
 8009942:	071a      	lsls	r2, r3, #28
 8009944:	d101      	bne.n	800994a <__lo0bits+0x46>
 8009946:	3004      	adds	r0, #4
 8009948:	091b      	lsrs	r3, r3, #4
 800994a:	079a      	lsls	r2, r3, #30
 800994c:	d101      	bne.n	8009952 <__lo0bits+0x4e>
 800994e:	3002      	adds	r0, #2
 8009950:	089b      	lsrs	r3, r3, #2
 8009952:	07da      	lsls	r2, r3, #31
 8009954:	d4e9      	bmi.n	800992a <__lo0bits+0x26>
 8009956:	3001      	adds	r0, #1
 8009958:	085b      	lsrs	r3, r3, #1
 800995a:	d1e6      	bne.n	800992a <__lo0bits+0x26>
 800995c:	2020      	movs	r0, #32
 800995e:	e7e2      	b.n	8009926 <__lo0bits+0x22>

08009960 <__i2b>:
 8009960:	b510      	push	{r4, lr}
 8009962:	000c      	movs	r4, r1
 8009964:	2101      	movs	r1, #1
 8009966:	f7ff febb 	bl	80096e0 <_Balloc>
 800996a:	2800      	cmp	r0, #0
 800996c:	d107      	bne.n	800997e <__i2b+0x1e>
 800996e:	2146      	movs	r1, #70	; 0x46
 8009970:	4c05      	ldr	r4, [pc, #20]	; (8009988 <__i2b+0x28>)
 8009972:	0002      	movs	r2, r0
 8009974:	4b05      	ldr	r3, [pc, #20]	; (800998c <__i2b+0x2c>)
 8009976:	0020      	movs	r0, r4
 8009978:	31ff      	adds	r1, #255	; 0xff
 800997a:	f000 fda3 	bl	800a4c4 <__assert_func>
 800997e:	2301      	movs	r3, #1
 8009980:	6144      	str	r4, [r0, #20]
 8009982:	6103      	str	r3, [r0, #16]
 8009984:	bd10      	pop	{r4, pc}
 8009986:	46c0      	nop			; (mov r8, r8)
 8009988:	0800af4f 	.word	0x0800af4f
 800998c:	0800aede 	.word	0x0800aede

08009990 <__multiply>:
 8009990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009992:	0015      	movs	r5, r2
 8009994:	690a      	ldr	r2, [r1, #16]
 8009996:	692b      	ldr	r3, [r5, #16]
 8009998:	000c      	movs	r4, r1
 800999a:	b08b      	sub	sp, #44	; 0x2c
 800999c:	429a      	cmp	r2, r3
 800999e:	da01      	bge.n	80099a4 <__multiply+0x14>
 80099a0:	002c      	movs	r4, r5
 80099a2:	000d      	movs	r5, r1
 80099a4:	6927      	ldr	r7, [r4, #16]
 80099a6:	692e      	ldr	r6, [r5, #16]
 80099a8:	6861      	ldr	r1, [r4, #4]
 80099aa:	19bb      	adds	r3, r7, r6
 80099ac:	9303      	str	r3, [sp, #12]
 80099ae:	68a3      	ldr	r3, [r4, #8]
 80099b0:	19ba      	adds	r2, r7, r6
 80099b2:	4293      	cmp	r3, r2
 80099b4:	da00      	bge.n	80099b8 <__multiply+0x28>
 80099b6:	3101      	adds	r1, #1
 80099b8:	f7ff fe92 	bl	80096e0 <_Balloc>
 80099bc:	9002      	str	r0, [sp, #8]
 80099be:	2800      	cmp	r0, #0
 80099c0:	d106      	bne.n	80099d0 <__multiply+0x40>
 80099c2:	21b1      	movs	r1, #177	; 0xb1
 80099c4:	4b48      	ldr	r3, [pc, #288]	; (8009ae8 <__multiply+0x158>)
 80099c6:	4849      	ldr	r0, [pc, #292]	; (8009aec <__multiply+0x15c>)
 80099c8:	9a02      	ldr	r2, [sp, #8]
 80099ca:	0049      	lsls	r1, r1, #1
 80099cc:	f000 fd7a 	bl	800a4c4 <__assert_func>
 80099d0:	9b02      	ldr	r3, [sp, #8]
 80099d2:	2200      	movs	r2, #0
 80099d4:	3314      	adds	r3, #20
 80099d6:	469c      	mov	ip, r3
 80099d8:	19bb      	adds	r3, r7, r6
 80099da:	009b      	lsls	r3, r3, #2
 80099dc:	4463      	add	r3, ip
 80099de:	9304      	str	r3, [sp, #16]
 80099e0:	4663      	mov	r3, ip
 80099e2:	9904      	ldr	r1, [sp, #16]
 80099e4:	428b      	cmp	r3, r1
 80099e6:	d32a      	bcc.n	8009a3e <__multiply+0xae>
 80099e8:	0023      	movs	r3, r4
 80099ea:	00bf      	lsls	r7, r7, #2
 80099ec:	3314      	adds	r3, #20
 80099ee:	3514      	adds	r5, #20
 80099f0:	9308      	str	r3, [sp, #32]
 80099f2:	00b6      	lsls	r6, r6, #2
 80099f4:	19db      	adds	r3, r3, r7
 80099f6:	9305      	str	r3, [sp, #20]
 80099f8:	19ab      	adds	r3, r5, r6
 80099fa:	9309      	str	r3, [sp, #36]	; 0x24
 80099fc:	2304      	movs	r3, #4
 80099fe:	9306      	str	r3, [sp, #24]
 8009a00:	0023      	movs	r3, r4
 8009a02:	9a05      	ldr	r2, [sp, #20]
 8009a04:	3315      	adds	r3, #21
 8009a06:	9501      	str	r5, [sp, #4]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d305      	bcc.n	8009a18 <__multiply+0x88>
 8009a0c:	1b13      	subs	r3, r2, r4
 8009a0e:	3b15      	subs	r3, #21
 8009a10:	089b      	lsrs	r3, r3, #2
 8009a12:	3301      	adds	r3, #1
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	9306      	str	r3, [sp, #24]
 8009a18:	9b01      	ldr	r3, [sp, #4]
 8009a1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d310      	bcc.n	8009a42 <__multiply+0xb2>
 8009a20:	9b03      	ldr	r3, [sp, #12]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	dd05      	ble.n	8009a32 <__multiply+0xa2>
 8009a26:	9b04      	ldr	r3, [sp, #16]
 8009a28:	3b04      	subs	r3, #4
 8009a2a:	9304      	str	r3, [sp, #16]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d056      	beq.n	8009ae0 <__multiply+0x150>
 8009a32:	9b02      	ldr	r3, [sp, #8]
 8009a34:	9a03      	ldr	r2, [sp, #12]
 8009a36:	0018      	movs	r0, r3
 8009a38:	611a      	str	r2, [r3, #16]
 8009a3a:	b00b      	add	sp, #44	; 0x2c
 8009a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a3e:	c304      	stmia	r3!, {r2}
 8009a40:	e7cf      	b.n	80099e2 <__multiply+0x52>
 8009a42:	9b01      	ldr	r3, [sp, #4]
 8009a44:	6818      	ldr	r0, [r3, #0]
 8009a46:	b280      	uxth	r0, r0
 8009a48:	2800      	cmp	r0, #0
 8009a4a:	d01e      	beq.n	8009a8a <__multiply+0xfa>
 8009a4c:	4667      	mov	r7, ip
 8009a4e:	2500      	movs	r5, #0
 8009a50:	9e08      	ldr	r6, [sp, #32]
 8009a52:	ce02      	ldmia	r6!, {r1}
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	9307      	str	r3, [sp, #28]
 8009a58:	b28b      	uxth	r3, r1
 8009a5a:	4343      	muls	r3, r0
 8009a5c:	001a      	movs	r2, r3
 8009a5e:	466b      	mov	r3, sp
 8009a60:	8b9b      	ldrh	r3, [r3, #28]
 8009a62:	18d3      	adds	r3, r2, r3
 8009a64:	195b      	adds	r3, r3, r5
 8009a66:	0c0d      	lsrs	r5, r1, #16
 8009a68:	4345      	muls	r5, r0
 8009a6a:	9a07      	ldr	r2, [sp, #28]
 8009a6c:	0c11      	lsrs	r1, r2, #16
 8009a6e:	1869      	adds	r1, r5, r1
 8009a70:	0c1a      	lsrs	r2, r3, #16
 8009a72:	188a      	adds	r2, r1, r2
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	0c15      	lsrs	r5, r2, #16
 8009a78:	0412      	lsls	r2, r2, #16
 8009a7a:	431a      	orrs	r2, r3
 8009a7c:	9b05      	ldr	r3, [sp, #20]
 8009a7e:	c704      	stmia	r7!, {r2}
 8009a80:	42b3      	cmp	r3, r6
 8009a82:	d8e6      	bhi.n	8009a52 <__multiply+0xc2>
 8009a84:	4663      	mov	r3, ip
 8009a86:	9a06      	ldr	r2, [sp, #24]
 8009a88:	509d      	str	r5, [r3, r2]
 8009a8a:	9b01      	ldr	r3, [sp, #4]
 8009a8c:	6818      	ldr	r0, [r3, #0]
 8009a8e:	0c00      	lsrs	r0, r0, #16
 8009a90:	d020      	beq.n	8009ad4 <__multiply+0x144>
 8009a92:	4663      	mov	r3, ip
 8009a94:	0025      	movs	r5, r4
 8009a96:	4661      	mov	r1, ip
 8009a98:	2700      	movs	r7, #0
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	3514      	adds	r5, #20
 8009a9e:	682a      	ldr	r2, [r5, #0]
 8009aa0:	680e      	ldr	r6, [r1, #0]
 8009aa2:	b292      	uxth	r2, r2
 8009aa4:	4342      	muls	r2, r0
 8009aa6:	0c36      	lsrs	r6, r6, #16
 8009aa8:	1992      	adds	r2, r2, r6
 8009aaa:	19d2      	adds	r2, r2, r7
 8009aac:	0416      	lsls	r6, r2, #16
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	431e      	orrs	r6, r3
 8009ab2:	600e      	str	r6, [r1, #0]
 8009ab4:	cd40      	ldmia	r5!, {r6}
 8009ab6:	684b      	ldr	r3, [r1, #4]
 8009ab8:	0c36      	lsrs	r6, r6, #16
 8009aba:	4346      	muls	r6, r0
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	0c12      	lsrs	r2, r2, #16
 8009ac0:	18f3      	adds	r3, r6, r3
 8009ac2:	189b      	adds	r3, r3, r2
 8009ac4:	9a05      	ldr	r2, [sp, #20]
 8009ac6:	0c1f      	lsrs	r7, r3, #16
 8009ac8:	3104      	adds	r1, #4
 8009aca:	42aa      	cmp	r2, r5
 8009acc:	d8e7      	bhi.n	8009a9e <__multiply+0x10e>
 8009ace:	4662      	mov	r2, ip
 8009ad0:	9906      	ldr	r1, [sp, #24]
 8009ad2:	5053      	str	r3, [r2, r1]
 8009ad4:	9b01      	ldr	r3, [sp, #4]
 8009ad6:	3304      	adds	r3, #4
 8009ad8:	9301      	str	r3, [sp, #4]
 8009ada:	2304      	movs	r3, #4
 8009adc:	449c      	add	ip, r3
 8009ade:	e79b      	b.n	8009a18 <__multiply+0x88>
 8009ae0:	9b03      	ldr	r3, [sp, #12]
 8009ae2:	3b01      	subs	r3, #1
 8009ae4:	9303      	str	r3, [sp, #12]
 8009ae6:	e79b      	b.n	8009a20 <__multiply+0x90>
 8009ae8:	0800aede 	.word	0x0800aede
 8009aec:	0800af4f 	.word	0x0800af4f

08009af0 <__pow5mult>:
 8009af0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009af2:	2303      	movs	r3, #3
 8009af4:	0015      	movs	r5, r2
 8009af6:	0007      	movs	r7, r0
 8009af8:	000e      	movs	r6, r1
 8009afa:	401a      	ands	r2, r3
 8009afc:	421d      	tst	r5, r3
 8009afe:	d008      	beq.n	8009b12 <__pow5mult+0x22>
 8009b00:	4925      	ldr	r1, [pc, #148]	; (8009b98 <__pow5mult+0xa8>)
 8009b02:	3a01      	subs	r2, #1
 8009b04:	0092      	lsls	r2, r2, #2
 8009b06:	5852      	ldr	r2, [r2, r1]
 8009b08:	2300      	movs	r3, #0
 8009b0a:	0031      	movs	r1, r6
 8009b0c:	f7ff fe50 	bl	80097b0 <__multadd>
 8009b10:	0006      	movs	r6, r0
 8009b12:	10ad      	asrs	r5, r5, #2
 8009b14:	d03d      	beq.n	8009b92 <__pow5mult+0xa2>
 8009b16:	69fc      	ldr	r4, [r7, #28]
 8009b18:	2c00      	cmp	r4, #0
 8009b1a:	d10f      	bne.n	8009b3c <__pow5mult+0x4c>
 8009b1c:	2010      	movs	r0, #16
 8009b1e:	f7fc fb49 	bl	80061b4 <malloc>
 8009b22:	1e02      	subs	r2, r0, #0
 8009b24:	61f8      	str	r0, [r7, #28]
 8009b26:	d105      	bne.n	8009b34 <__pow5mult+0x44>
 8009b28:	21b4      	movs	r1, #180	; 0xb4
 8009b2a:	4b1c      	ldr	r3, [pc, #112]	; (8009b9c <__pow5mult+0xac>)
 8009b2c:	481c      	ldr	r0, [pc, #112]	; (8009ba0 <__pow5mult+0xb0>)
 8009b2e:	31ff      	adds	r1, #255	; 0xff
 8009b30:	f000 fcc8 	bl	800a4c4 <__assert_func>
 8009b34:	6044      	str	r4, [r0, #4]
 8009b36:	6084      	str	r4, [r0, #8]
 8009b38:	6004      	str	r4, [r0, #0]
 8009b3a:	60c4      	str	r4, [r0, #12]
 8009b3c:	69fb      	ldr	r3, [r7, #28]
 8009b3e:	689c      	ldr	r4, [r3, #8]
 8009b40:	9301      	str	r3, [sp, #4]
 8009b42:	2c00      	cmp	r4, #0
 8009b44:	d108      	bne.n	8009b58 <__pow5mult+0x68>
 8009b46:	0038      	movs	r0, r7
 8009b48:	4916      	ldr	r1, [pc, #88]	; (8009ba4 <__pow5mult+0xb4>)
 8009b4a:	f7ff ff09 	bl	8009960 <__i2b>
 8009b4e:	9b01      	ldr	r3, [sp, #4]
 8009b50:	0004      	movs	r4, r0
 8009b52:	6098      	str	r0, [r3, #8]
 8009b54:	2300      	movs	r3, #0
 8009b56:	6003      	str	r3, [r0, #0]
 8009b58:	2301      	movs	r3, #1
 8009b5a:	421d      	tst	r5, r3
 8009b5c:	d00a      	beq.n	8009b74 <__pow5mult+0x84>
 8009b5e:	0031      	movs	r1, r6
 8009b60:	0022      	movs	r2, r4
 8009b62:	0038      	movs	r0, r7
 8009b64:	f7ff ff14 	bl	8009990 <__multiply>
 8009b68:	0031      	movs	r1, r6
 8009b6a:	9001      	str	r0, [sp, #4]
 8009b6c:	0038      	movs	r0, r7
 8009b6e:	f7ff fdfb 	bl	8009768 <_Bfree>
 8009b72:	9e01      	ldr	r6, [sp, #4]
 8009b74:	106d      	asrs	r5, r5, #1
 8009b76:	d00c      	beq.n	8009b92 <__pow5mult+0xa2>
 8009b78:	6820      	ldr	r0, [r4, #0]
 8009b7a:	2800      	cmp	r0, #0
 8009b7c:	d107      	bne.n	8009b8e <__pow5mult+0x9e>
 8009b7e:	0022      	movs	r2, r4
 8009b80:	0021      	movs	r1, r4
 8009b82:	0038      	movs	r0, r7
 8009b84:	f7ff ff04 	bl	8009990 <__multiply>
 8009b88:	2300      	movs	r3, #0
 8009b8a:	6020      	str	r0, [r4, #0]
 8009b8c:	6003      	str	r3, [r0, #0]
 8009b8e:	0004      	movs	r4, r0
 8009b90:	e7e2      	b.n	8009b58 <__pow5mult+0x68>
 8009b92:	0030      	movs	r0, r6
 8009b94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009b96:	46c0      	nop			; (mov r8, r8)
 8009b98:	0800b098 	.word	0x0800b098
 8009b9c:	0800ae6f 	.word	0x0800ae6f
 8009ba0:	0800af4f 	.word	0x0800af4f
 8009ba4:	00000271 	.word	0x00000271

08009ba8 <__lshift>:
 8009ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009baa:	000c      	movs	r4, r1
 8009bac:	0017      	movs	r7, r2
 8009bae:	6923      	ldr	r3, [r4, #16]
 8009bb0:	1155      	asrs	r5, r2, #5
 8009bb2:	b087      	sub	sp, #28
 8009bb4:	18eb      	adds	r3, r5, r3
 8009bb6:	9302      	str	r3, [sp, #8]
 8009bb8:	3301      	adds	r3, #1
 8009bba:	9301      	str	r3, [sp, #4]
 8009bbc:	6849      	ldr	r1, [r1, #4]
 8009bbe:	68a3      	ldr	r3, [r4, #8]
 8009bc0:	9004      	str	r0, [sp, #16]
 8009bc2:	9a01      	ldr	r2, [sp, #4]
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	db10      	blt.n	8009bea <__lshift+0x42>
 8009bc8:	9804      	ldr	r0, [sp, #16]
 8009bca:	f7ff fd89 	bl	80096e0 <_Balloc>
 8009bce:	2300      	movs	r3, #0
 8009bd0:	0002      	movs	r2, r0
 8009bd2:	0006      	movs	r6, r0
 8009bd4:	0019      	movs	r1, r3
 8009bd6:	3214      	adds	r2, #20
 8009bd8:	4298      	cmp	r0, r3
 8009bda:	d10c      	bne.n	8009bf6 <__lshift+0x4e>
 8009bdc:	31df      	adds	r1, #223	; 0xdf
 8009bde:	0032      	movs	r2, r6
 8009be0:	4b26      	ldr	r3, [pc, #152]	; (8009c7c <__lshift+0xd4>)
 8009be2:	4827      	ldr	r0, [pc, #156]	; (8009c80 <__lshift+0xd8>)
 8009be4:	31ff      	adds	r1, #255	; 0xff
 8009be6:	f000 fc6d 	bl	800a4c4 <__assert_func>
 8009bea:	3101      	adds	r1, #1
 8009bec:	005b      	lsls	r3, r3, #1
 8009bee:	e7e8      	b.n	8009bc2 <__lshift+0x1a>
 8009bf0:	0098      	lsls	r0, r3, #2
 8009bf2:	5011      	str	r1, [r2, r0]
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	42ab      	cmp	r3, r5
 8009bf8:	dbfa      	blt.n	8009bf0 <__lshift+0x48>
 8009bfa:	43eb      	mvns	r3, r5
 8009bfc:	17db      	asrs	r3, r3, #31
 8009bfe:	401d      	ands	r5, r3
 8009c00:	211f      	movs	r1, #31
 8009c02:	0023      	movs	r3, r4
 8009c04:	0038      	movs	r0, r7
 8009c06:	00ad      	lsls	r5, r5, #2
 8009c08:	1955      	adds	r5, r2, r5
 8009c0a:	6922      	ldr	r2, [r4, #16]
 8009c0c:	3314      	adds	r3, #20
 8009c0e:	0092      	lsls	r2, r2, #2
 8009c10:	4008      	ands	r0, r1
 8009c12:	4684      	mov	ip, r0
 8009c14:	189a      	adds	r2, r3, r2
 8009c16:	420f      	tst	r7, r1
 8009c18:	d02a      	beq.n	8009c70 <__lshift+0xc8>
 8009c1a:	3101      	adds	r1, #1
 8009c1c:	1a09      	subs	r1, r1, r0
 8009c1e:	9105      	str	r1, [sp, #20]
 8009c20:	2100      	movs	r1, #0
 8009c22:	9503      	str	r5, [sp, #12]
 8009c24:	4667      	mov	r7, ip
 8009c26:	6818      	ldr	r0, [r3, #0]
 8009c28:	40b8      	lsls	r0, r7
 8009c2a:	4308      	orrs	r0, r1
 8009c2c:	9903      	ldr	r1, [sp, #12]
 8009c2e:	c101      	stmia	r1!, {r0}
 8009c30:	9103      	str	r1, [sp, #12]
 8009c32:	9805      	ldr	r0, [sp, #20]
 8009c34:	cb02      	ldmia	r3!, {r1}
 8009c36:	40c1      	lsrs	r1, r0
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d8f3      	bhi.n	8009c24 <__lshift+0x7c>
 8009c3c:	0020      	movs	r0, r4
 8009c3e:	3015      	adds	r0, #21
 8009c40:	2304      	movs	r3, #4
 8009c42:	4282      	cmp	r2, r0
 8009c44:	d304      	bcc.n	8009c50 <__lshift+0xa8>
 8009c46:	1b13      	subs	r3, r2, r4
 8009c48:	3b15      	subs	r3, #21
 8009c4a:	089b      	lsrs	r3, r3, #2
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	50e9      	str	r1, [r5, r3]
 8009c52:	2900      	cmp	r1, #0
 8009c54:	d002      	beq.n	8009c5c <__lshift+0xb4>
 8009c56:	9b02      	ldr	r3, [sp, #8]
 8009c58:	3302      	adds	r3, #2
 8009c5a:	9301      	str	r3, [sp, #4]
 8009c5c:	9b01      	ldr	r3, [sp, #4]
 8009c5e:	9804      	ldr	r0, [sp, #16]
 8009c60:	3b01      	subs	r3, #1
 8009c62:	0021      	movs	r1, r4
 8009c64:	6133      	str	r3, [r6, #16]
 8009c66:	f7ff fd7f 	bl	8009768 <_Bfree>
 8009c6a:	0030      	movs	r0, r6
 8009c6c:	b007      	add	sp, #28
 8009c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c70:	cb02      	ldmia	r3!, {r1}
 8009c72:	c502      	stmia	r5!, {r1}
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d8fb      	bhi.n	8009c70 <__lshift+0xc8>
 8009c78:	e7f0      	b.n	8009c5c <__lshift+0xb4>
 8009c7a:	46c0      	nop			; (mov r8, r8)
 8009c7c:	0800aede 	.word	0x0800aede
 8009c80:	0800af4f 	.word	0x0800af4f

08009c84 <__mcmp>:
 8009c84:	b530      	push	{r4, r5, lr}
 8009c86:	690b      	ldr	r3, [r1, #16]
 8009c88:	6904      	ldr	r4, [r0, #16]
 8009c8a:	0002      	movs	r2, r0
 8009c8c:	1ae0      	subs	r0, r4, r3
 8009c8e:	429c      	cmp	r4, r3
 8009c90:	d10e      	bne.n	8009cb0 <__mcmp+0x2c>
 8009c92:	3214      	adds	r2, #20
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	3114      	adds	r1, #20
 8009c98:	0014      	movs	r4, r2
 8009c9a:	18c9      	adds	r1, r1, r3
 8009c9c:	18d2      	adds	r2, r2, r3
 8009c9e:	3a04      	subs	r2, #4
 8009ca0:	3904      	subs	r1, #4
 8009ca2:	6815      	ldr	r5, [r2, #0]
 8009ca4:	680b      	ldr	r3, [r1, #0]
 8009ca6:	429d      	cmp	r5, r3
 8009ca8:	d003      	beq.n	8009cb2 <__mcmp+0x2e>
 8009caa:	2001      	movs	r0, #1
 8009cac:	429d      	cmp	r5, r3
 8009cae:	d303      	bcc.n	8009cb8 <__mcmp+0x34>
 8009cb0:	bd30      	pop	{r4, r5, pc}
 8009cb2:	4294      	cmp	r4, r2
 8009cb4:	d3f3      	bcc.n	8009c9e <__mcmp+0x1a>
 8009cb6:	e7fb      	b.n	8009cb0 <__mcmp+0x2c>
 8009cb8:	4240      	negs	r0, r0
 8009cba:	e7f9      	b.n	8009cb0 <__mcmp+0x2c>

08009cbc <__mdiff>:
 8009cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cbe:	000e      	movs	r6, r1
 8009cc0:	0007      	movs	r7, r0
 8009cc2:	0011      	movs	r1, r2
 8009cc4:	0030      	movs	r0, r6
 8009cc6:	b087      	sub	sp, #28
 8009cc8:	0014      	movs	r4, r2
 8009cca:	f7ff ffdb 	bl	8009c84 <__mcmp>
 8009cce:	1e05      	subs	r5, r0, #0
 8009cd0:	d110      	bne.n	8009cf4 <__mdiff+0x38>
 8009cd2:	0001      	movs	r1, r0
 8009cd4:	0038      	movs	r0, r7
 8009cd6:	f7ff fd03 	bl	80096e0 <_Balloc>
 8009cda:	1e02      	subs	r2, r0, #0
 8009cdc:	d104      	bne.n	8009ce8 <__mdiff+0x2c>
 8009cde:	4b3f      	ldr	r3, [pc, #252]	; (8009ddc <__mdiff+0x120>)
 8009ce0:	483f      	ldr	r0, [pc, #252]	; (8009de0 <__mdiff+0x124>)
 8009ce2:	4940      	ldr	r1, [pc, #256]	; (8009de4 <__mdiff+0x128>)
 8009ce4:	f000 fbee 	bl	800a4c4 <__assert_func>
 8009ce8:	2301      	movs	r3, #1
 8009cea:	6145      	str	r5, [r0, #20]
 8009cec:	6103      	str	r3, [r0, #16]
 8009cee:	0010      	movs	r0, r2
 8009cf0:	b007      	add	sp, #28
 8009cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	9301      	str	r3, [sp, #4]
 8009cf8:	2800      	cmp	r0, #0
 8009cfa:	db04      	blt.n	8009d06 <__mdiff+0x4a>
 8009cfc:	0023      	movs	r3, r4
 8009cfe:	0034      	movs	r4, r6
 8009d00:	001e      	movs	r6, r3
 8009d02:	2300      	movs	r3, #0
 8009d04:	9301      	str	r3, [sp, #4]
 8009d06:	0038      	movs	r0, r7
 8009d08:	6861      	ldr	r1, [r4, #4]
 8009d0a:	f7ff fce9 	bl	80096e0 <_Balloc>
 8009d0e:	1e02      	subs	r2, r0, #0
 8009d10:	d103      	bne.n	8009d1a <__mdiff+0x5e>
 8009d12:	4b32      	ldr	r3, [pc, #200]	; (8009ddc <__mdiff+0x120>)
 8009d14:	4832      	ldr	r0, [pc, #200]	; (8009de0 <__mdiff+0x124>)
 8009d16:	4934      	ldr	r1, [pc, #208]	; (8009de8 <__mdiff+0x12c>)
 8009d18:	e7e4      	b.n	8009ce4 <__mdiff+0x28>
 8009d1a:	9b01      	ldr	r3, [sp, #4]
 8009d1c:	2700      	movs	r7, #0
 8009d1e:	60c3      	str	r3, [r0, #12]
 8009d20:	6920      	ldr	r0, [r4, #16]
 8009d22:	3414      	adds	r4, #20
 8009d24:	0083      	lsls	r3, r0, #2
 8009d26:	18e3      	adds	r3, r4, r3
 8009d28:	0021      	movs	r1, r4
 8009d2a:	9401      	str	r4, [sp, #4]
 8009d2c:	0034      	movs	r4, r6
 8009d2e:	9302      	str	r3, [sp, #8]
 8009d30:	6933      	ldr	r3, [r6, #16]
 8009d32:	3414      	adds	r4, #20
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	18e3      	adds	r3, r4, r3
 8009d38:	9303      	str	r3, [sp, #12]
 8009d3a:	0013      	movs	r3, r2
 8009d3c:	3314      	adds	r3, #20
 8009d3e:	469c      	mov	ip, r3
 8009d40:	9305      	str	r3, [sp, #20]
 8009d42:	9104      	str	r1, [sp, #16]
 8009d44:	9b04      	ldr	r3, [sp, #16]
 8009d46:	cc02      	ldmia	r4!, {r1}
 8009d48:	cb20      	ldmia	r3!, {r5}
 8009d4a:	9304      	str	r3, [sp, #16]
 8009d4c:	b2ab      	uxth	r3, r5
 8009d4e:	19df      	adds	r7, r3, r7
 8009d50:	b28b      	uxth	r3, r1
 8009d52:	1afb      	subs	r3, r7, r3
 8009d54:	0c09      	lsrs	r1, r1, #16
 8009d56:	0c2d      	lsrs	r5, r5, #16
 8009d58:	1a6d      	subs	r5, r5, r1
 8009d5a:	1419      	asrs	r1, r3, #16
 8009d5c:	1869      	adds	r1, r5, r1
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	140f      	asrs	r7, r1, #16
 8009d62:	0409      	lsls	r1, r1, #16
 8009d64:	4319      	orrs	r1, r3
 8009d66:	4663      	mov	r3, ip
 8009d68:	c302      	stmia	r3!, {r1}
 8009d6a:	469c      	mov	ip, r3
 8009d6c:	9b03      	ldr	r3, [sp, #12]
 8009d6e:	42a3      	cmp	r3, r4
 8009d70:	d8e8      	bhi.n	8009d44 <__mdiff+0x88>
 8009d72:	0031      	movs	r1, r6
 8009d74:	9c03      	ldr	r4, [sp, #12]
 8009d76:	3115      	adds	r1, #21
 8009d78:	2304      	movs	r3, #4
 8009d7a:	428c      	cmp	r4, r1
 8009d7c:	d304      	bcc.n	8009d88 <__mdiff+0xcc>
 8009d7e:	1ba3      	subs	r3, r4, r6
 8009d80:	3b15      	subs	r3, #21
 8009d82:	089b      	lsrs	r3, r3, #2
 8009d84:	3301      	adds	r3, #1
 8009d86:	009b      	lsls	r3, r3, #2
 8009d88:	9901      	ldr	r1, [sp, #4]
 8009d8a:	18cd      	adds	r5, r1, r3
 8009d8c:	9905      	ldr	r1, [sp, #20]
 8009d8e:	002e      	movs	r6, r5
 8009d90:	18cb      	adds	r3, r1, r3
 8009d92:	469c      	mov	ip, r3
 8009d94:	9902      	ldr	r1, [sp, #8]
 8009d96:	428e      	cmp	r6, r1
 8009d98:	d310      	bcc.n	8009dbc <__mdiff+0x100>
 8009d9a:	9e02      	ldr	r6, [sp, #8]
 8009d9c:	1ee9      	subs	r1, r5, #3
 8009d9e:	2400      	movs	r4, #0
 8009da0:	428e      	cmp	r6, r1
 8009da2:	d304      	bcc.n	8009dae <__mdiff+0xf2>
 8009da4:	0031      	movs	r1, r6
 8009da6:	3103      	adds	r1, #3
 8009da8:	1b49      	subs	r1, r1, r5
 8009daa:	0889      	lsrs	r1, r1, #2
 8009dac:	008c      	lsls	r4, r1, #2
 8009dae:	191b      	adds	r3, r3, r4
 8009db0:	3b04      	subs	r3, #4
 8009db2:	6819      	ldr	r1, [r3, #0]
 8009db4:	2900      	cmp	r1, #0
 8009db6:	d00f      	beq.n	8009dd8 <__mdiff+0x11c>
 8009db8:	6110      	str	r0, [r2, #16]
 8009dba:	e798      	b.n	8009cee <__mdiff+0x32>
 8009dbc:	ce02      	ldmia	r6!, {r1}
 8009dbe:	b28c      	uxth	r4, r1
 8009dc0:	19e4      	adds	r4, r4, r7
 8009dc2:	0c0f      	lsrs	r7, r1, #16
 8009dc4:	1421      	asrs	r1, r4, #16
 8009dc6:	1879      	adds	r1, r7, r1
 8009dc8:	b2a4      	uxth	r4, r4
 8009dca:	140f      	asrs	r7, r1, #16
 8009dcc:	0409      	lsls	r1, r1, #16
 8009dce:	4321      	orrs	r1, r4
 8009dd0:	4664      	mov	r4, ip
 8009dd2:	c402      	stmia	r4!, {r1}
 8009dd4:	46a4      	mov	ip, r4
 8009dd6:	e7dd      	b.n	8009d94 <__mdiff+0xd8>
 8009dd8:	3801      	subs	r0, #1
 8009dda:	e7e9      	b.n	8009db0 <__mdiff+0xf4>
 8009ddc:	0800aede 	.word	0x0800aede
 8009de0:	0800af4f 	.word	0x0800af4f
 8009de4:	00000237 	.word	0x00000237
 8009de8:	00000245 	.word	0x00000245

08009dec <__ulp>:
 8009dec:	2000      	movs	r0, #0
 8009dee:	4b0b      	ldr	r3, [pc, #44]	; (8009e1c <__ulp+0x30>)
 8009df0:	4019      	ands	r1, r3
 8009df2:	4b0b      	ldr	r3, [pc, #44]	; (8009e20 <__ulp+0x34>)
 8009df4:	18c9      	adds	r1, r1, r3
 8009df6:	4281      	cmp	r1, r0
 8009df8:	dc06      	bgt.n	8009e08 <__ulp+0x1c>
 8009dfa:	4249      	negs	r1, r1
 8009dfc:	150b      	asrs	r3, r1, #20
 8009dfe:	2b13      	cmp	r3, #19
 8009e00:	dc03      	bgt.n	8009e0a <__ulp+0x1e>
 8009e02:	2180      	movs	r1, #128	; 0x80
 8009e04:	0309      	lsls	r1, r1, #12
 8009e06:	4119      	asrs	r1, r3
 8009e08:	4770      	bx	lr
 8009e0a:	3b14      	subs	r3, #20
 8009e0c:	2001      	movs	r0, #1
 8009e0e:	2b1e      	cmp	r3, #30
 8009e10:	dc02      	bgt.n	8009e18 <__ulp+0x2c>
 8009e12:	2080      	movs	r0, #128	; 0x80
 8009e14:	0600      	lsls	r0, r0, #24
 8009e16:	40d8      	lsrs	r0, r3
 8009e18:	2100      	movs	r1, #0
 8009e1a:	e7f5      	b.n	8009e08 <__ulp+0x1c>
 8009e1c:	7ff00000 	.word	0x7ff00000
 8009e20:	fcc00000 	.word	0xfcc00000

08009e24 <__b2d>:
 8009e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e26:	0006      	movs	r6, r0
 8009e28:	6903      	ldr	r3, [r0, #16]
 8009e2a:	3614      	adds	r6, #20
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	18f3      	adds	r3, r6, r3
 8009e30:	1f1d      	subs	r5, r3, #4
 8009e32:	682c      	ldr	r4, [r5, #0]
 8009e34:	000f      	movs	r7, r1
 8009e36:	0020      	movs	r0, r4
 8009e38:	9301      	str	r3, [sp, #4]
 8009e3a:	f7ff fd49 	bl	80098d0 <__hi0bits>
 8009e3e:	2220      	movs	r2, #32
 8009e40:	1a12      	subs	r2, r2, r0
 8009e42:	603a      	str	r2, [r7, #0]
 8009e44:	0003      	movs	r3, r0
 8009e46:	4a1c      	ldr	r2, [pc, #112]	; (8009eb8 <__b2d+0x94>)
 8009e48:	280a      	cmp	r0, #10
 8009e4a:	dc15      	bgt.n	8009e78 <__b2d+0x54>
 8009e4c:	210b      	movs	r1, #11
 8009e4e:	0027      	movs	r7, r4
 8009e50:	1a09      	subs	r1, r1, r0
 8009e52:	40cf      	lsrs	r7, r1
 8009e54:	433a      	orrs	r2, r7
 8009e56:	468c      	mov	ip, r1
 8009e58:	0011      	movs	r1, r2
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	42ae      	cmp	r6, r5
 8009e5e:	d202      	bcs.n	8009e66 <__b2d+0x42>
 8009e60:	9a01      	ldr	r2, [sp, #4]
 8009e62:	3a08      	subs	r2, #8
 8009e64:	6812      	ldr	r2, [r2, #0]
 8009e66:	3315      	adds	r3, #21
 8009e68:	409c      	lsls	r4, r3
 8009e6a:	4663      	mov	r3, ip
 8009e6c:	0027      	movs	r7, r4
 8009e6e:	40da      	lsrs	r2, r3
 8009e70:	4317      	orrs	r7, r2
 8009e72:	0038      	movs	r0, r7
 8009e74:	b003      	add	sp, #12
 8009e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e78:	2700      	movs	r7, #0
 8009e7a:	42ae      	cmp	r6, r5
 8009e7c:	d202      	bcs.n	8009e84 <__b2d+0x60>
 8009e7e:	9d01      	ldr	r5, [sp, #4]
 8009e80:	3d08      	subs	r5, #8
 8009e82:	682f      	ldr	r7, [r5, #0]
 8009e84:	210b      	movs	r1, #11
 8009e86:	4249      	negs	r1, r1
 8009e88:	468c      	mov	ip, r1
 8009e8a:	449c      	add	ip, r3
 8009e8c:	2b0b      	cmp	r3, #11
 8009e8e:	d010      	beq.n	8009eb2 <__b2d+0x8e>
 8009e90:	4661      	mov	r1, ip
 8009e92:	2320      	movs	r3, #32
 8009e94:	408c      	lsls	r4, r1
 8009e96:	1a5b      	subs	r3, r3, r1
 8009e98:	0039      	movs	r1, r7
 8009e9a:	40d9      	lsrs	r1, r3
 8009e9c:	430c      	orrs	r4, r1
 8009e9e:	4322      	orrs	r2, r4
 8009ea0:	0011      	movs	r1, r2
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	42b5      	cmp	r5, r6
 8009ea6:	d901      	bls.n	8009eac <__b2d+0x88>
 8009ea8:	3d04      	subs	r5, #4
 8009eaa:	682a      	ldr	r2, [r5, #0]
 8009eac:	4664      	mov	r4, ip
 8009eae:	40a7      	lsls	r7, r4
 8009eb0:	e7dd      	b.n	8009e6e <__b2d+0x4a>
 8009eb2:	4322      	orrs	r2, r4
 8009eb4:	0011      	movs	r1, r2
 8009eb6:	e7dc      	b.n	8009e72 <__b2d+0x4e>
 8009eb8:	3ff00000 	.word	0x3ff00000

08009ebc <__d2b>:
 8009ebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ebe:	2101      	movs	r1, #1
 8009ec0:	0014      	movs	r4, r2
 8009ec2:	001d      	movs	r5, r3
 8009ec4:	9f08      	ldr	r7, [sp, #32]
 8009ec6:	f7ff fc0b 	bl	80096e0 <_Balloc>
 8009eca:	1e06      	subs	r6, r0, #0
 8009ecc:	d105      	bne.n	8009eda <__d2b+0x1e>
 8009ece:	0032      	movs	r2, r6
 8009ed0:	4b24      	ldr	r3, [pc, #144]	; (8009f64 <__d2b+0xa8>)
 8009ed2:	4825      	ldr	r0, [pc, #148]	; (8009f68 <__d2b+0xac>)
 8009ed4:	4925      	ldr	r1, [pc, #148]	; (8009f6c <__d2b+0xb0>)
 8009ed6:	f000 faf5 	bl	800a4c4 <__assert_func>
 8009eda:	032b      	lsls	r3, r5, #12
 8009edc:	006d      	lsls	r5, r5, #1
 8009ede:	0b1b      	lsrs	r3, r3, #12
 8009ee0:	0d6d      	lsrs	r5, r5, #21
 8009ee2:	d125      	bne.n	8009f30 <__d2b+0x74>
 8009ee4:	9301      	str	r3, [sp, #4]
 8009ee6:	2c00      	cmp	r4, #0
 8009ee8:	d028      	beq.n	8009f3c <__d2b+0x80>
 8009eea:	4668      	mov	r0, sp
 8009eec:	9400      	str	r4, [sp, #0]
 8009eee:	f7ff fd09 	bl	8009904 <__lo0bits>
 8009ef2:	9b01      	ldr	r3, [sp, #4]
 8009ef4:	9900      	ldr	r1, [sp, #0]
 8009ef6:	2800      	cmp	r0, #0
 8009ef8:	d01e      	beq.n	8009f38 <__d2b+0x7c>
 8009efa:	2220      	movs	r2, #32
 8009efc:	001c      	movs	r4, r3
 8009efe:	1a12      	subs	r2, r2, r0
 8009f00:	4094      	lsls	r4, r2
 8009f02:	0022      	movs	r2, r4
 8009f04:	40c3      	lsrs	r3, r0
 8009f06:	430a      	orrs	r2, r1
 8009f08:	6172      	str	r2, [r6, #20]
 8009f0a:	9301      	str	r3, [sp, #4]
 8009f0c:	9c01      	ldr	r4, [sp, #4]
 8009f0e:	61b4      	str	r4, [r6, #24]
 8009f10:	1e63      	subs	r3, r4, #1
 8009f12:	419c      	sbcs	r4, r3
 8009f14:	3401      	adds	r4, #1
 8009f16:	6134      	str	r4, [r6, #16]
 8009f18:	2d00      	cmp	r5, #0
 8009f1a:	d017      	beq.n	8009f4c <__d2b+0x90>
 8009f1c:	2435      	movs	r4, #53	; 0x35
 8009f1e:	4b14      	ldr	r3, [pc, #80]	; (8009f70 <__d2b+0xb4>)
 8009f20:	18ed      	adds	r5, r5, r3
 8009f22:	182d      	adds	r5, r5, r0
 8009f24:	603d      	str	r5, [r7, #0]
 8009f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f28:	1a24      	subs	r4, r4, r0
 8009f2a:	601c      	str	r4, [r3, #0]
 8009f2c:	0030      	movs	r0, r6
 8009f2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009f30:	2280      	movs	r2, #128	; 0x80
 8009f32:	0352      	lsls	r2, r2, #13
 8009f34:	4313      	orrs	r3, r2
 8009f36:	e7d5      	b.n	8009ee4 <__d2b+0x28>
 8009f38:	6171      	str	r1, [r6, #20]
 8009f3a:	e7e7      	b.n	8009f0c <__d2b+0x50>
 8009f3c:	a801      	add	r0, sp, #4
 8009f3e:	f7ff fce1 	bl	8009904 <__lo0bits>
 8009f42:	9b01      	ldr	r3, [sp, #4]
 8009f44:	2401      	movs	r4, #1
 8009f46:	6173      	str	r3, [r6, #20]
 8009f48:	3020      	adds	r0, #32
 8009f4a:	e7e4      	b.n	8009f16 <__d2b+0x5a>
 8009f4c:	4b09      	ldr	r3, [pc, #36]	; (8009f74 <__d2b+0xb8>)
 8009f4e:	18c0      	adds	r0, r0, r3
 8009f50:	4b09      	ldr	r3, [pc, #36]	; (8009f78 <__d2b+0xbc>)
 8009f52:	6038      	str	r0, [r7, #0]
 8009f54:	18e3      	adds	r3, r4, r3
 8009f56:	009b      	lsls	r3, r3, #2
 8009f58:	18f3      	adds	r3, r6, r3
 8009f5a:	6958      	ldr	r0, [r3, #20]
 8009f5c:	f7ff fcb8 	bl	80098d0 <__hi0bits>
 8009f60:	0164      	lsls	r4, r4, #5
 8009f62:	e7e0      	b.n	8009f26 <__d2b+0x6a>
 8009f64:	0800aede 	.word	0x0800aede
 8009f68:	0800af4f 	.word	0x0800af4f
 8009f6c:	0000030f 	.word	0x0000030f
 8009f70:	fffffbcd 	.word	0xfffffbcd
 8009f74:	fffffbce 	.word	0xfffffbce
 8009f78:	3fffffff 	.word	0x3fffffff

08009f7c <__ratio>:
 8009f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f7e:	b087      	sub	sp, #28
 8009f80:	000f      	movs	r7, r1
 8009f82:	a904      	add	r1, sp, #16
 8009f84:	0006      	movs	r6, r0
 8009f86:	f7ff ff4d 	bl	8009e24 <__b2d>
 8009f8a:	9000      	str	r0, [sp, #0]
 8009f8c:	9101      	str	r1, [sp, #4]
 8009f8e:	9c00      	ldr	r4, [sp, #0]
 8009f90:	9d01      	ldr	r5, [sp, #4]
 8009f92:	0038      	movs	r0, r7
 8009f94:	a905      	add	r1, sp, #20
 8009f96:	f7ff ff45 	bl	8009e24 <__b2d>
 8009f9a:	9002      	str	r0, [sp, #8]
 8009f9c:	9103      	str	r1, [sp, #12]
 8009f9e:	9a02      	ldr	r2, [sp, #8]
 8009fa0:	9b03      	ldr	r3, [sp, #12]
 8009fa2:	6930      	ldr	r0, [r6, #16]
 8009fa4:	6939      	ldr	r1, [r7, #16]
 8009fa6:	9e04      	ldr	r6, [sp, #16]
 8009fa8:	1a40      	subs	r0, r0, r1
 8009faa:	9905      	ldr	r1, [sp, #20]
 8009fac:	0140      	lsls	r0, r0, #5
 8009fae:	1a71      	subs	r1, r6, r1
 8009fb0:	1841      	adds	r1, r0, r1
 8009fb2:	0508      	lsls	r0, r1, #20
 8009fb4:	2900      	cmp	r1, #0
 8009fb6:	dd07      	ble.n	8009fc8 <__ratio+0x4c>
 8009fb8:	9901      	ldr	r1, [sp, #4]
 8009fba:	1845      	adds	r5, r0, r1
 8009fbc:	0020      	movs	r0, r4
 8009fbe:	0029      	movs	r1, r5
 8009fc0:	f7f6 ff2c 	bl	8000e1c <__aeabi_ddiv>
 8009fc4:	b007      	add	sp, #28
 8009fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fc8:	9903      	ldr	r1, [sp, #12]
 8009fca:	1a0b      	subs	r3, r1, r0
 8009fcc:	e7f6      	b.n	8009fbc <__ratio+0x40>

08009fce <__copybits>:
 8009fce:	b570      	push	{r4, r5, r6, lr}
 8009fd0:	0014      	movs	r4, r2
 8009fd2:	0005      	movs	r5, r0
 8009fd4:	3901      	subs	r1, #1
 8009fd6:	6913      	ldr	r3, [r2, #16]
 8009fd8:	1149      	asrs	r1, r1, #5
 8009fda:	3101      	adds	r1, #1
 8009fdc:	0089      	lsls	r1, r1, #2
 8009fde:	3414      	adds	r4, #20
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	1841      	adds	r1, r0, r1
 8009fe4:	18e3      	adds	r3, r4, r3
 8009fe6:	42a3      	cmp	r3, r4
 8009fe8:	d80d      	bhi.n	800a006 <__copybits+0x38>
 8009fea:	0014      	movs	r4, r2
 8009fec:	3411      	adds	r4, #17
 8009fee:	2500      	movs	r5, #0
 8009ff0:	429c      	cmp	r4, r3
 8009ff2:	d803      	bhi.n	8009ffc <__copybits+0x2e>
 8009ff4:	1a9b      	subs	r3, r3, r2
 8009ff6:	3b11      	subs	r3, #17
 8009ff8:	089b      	lsrs	r3, r3, #2
 8009ffa:	009d      	lsls	r5, r3, #2
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	1940      	adds	r0, r0, r5
 800a000:	4281      	cmp	r1, r0
 800a002:	d803      	bhi.n	800a00c <__copybits+0x3e>
 800a004:	bd70      	pop	{r4, r5, r6, pc}
 800a006:	cc40      	ldmia	r4!, {r6}
 800a008:	c540      	stmia	r5!, {r6}
 800a00a:	e7ec      	b.n	8009fe6 <__copybits+0x18>
 800a00c:	c008      	stmia	r0!, {r3}
 800a00e:	e7f7      	b.n	800a000 <__copybits+0x32>

0800a010 <__any_on>:
 800a010:	0002      	movs	r2, r0
 800a012:	6900      	ldr	r0, [r0, #16]
 800a014:	b510      	push	{r4, lr}
 800a016:	3214      	adds	r2, #20
 800a018:	114b      	asrs	r3, r1, #5
 800a01a:	4298      	cmp	r0, r3
 800a01c:	db13      	blt.n	800a046 <__any_on+0x36>
 800a01e:	dd0c      	ble.n	800a03a <__any_on+0x2a>
 800a020:	241f      	movs	r4, #31
 800a022:	0008      	movs	r0, r1
 800a024:	4020      	ands	r0, r4
 800a026:	4221      	tst	r1, r4
 800a028:	d007      	beq.n	800a03a <__any_on+0x2a>
 800a02a:	0099      	lsls	r1, r3, #2
 800a02c:	588c      	ldr	r4, [r1, r2]
 800a02e:	0021      	movs	r1, r4
 800a030:	40c1      	lsrs	r1, r0
 800a032:	4081      	lsls	r1, r0
 800a034:	2001      	movs	r0, #1
 800a036:	428c      	cmp	r4, r1
 800a038:	d104      	bne.n	800a044 <__any_on+0x34>
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	18d3      	adds	r3, r2, r3
 800a03e:	4293      	cmp	r3, r2
 800a040:	d803      	bhi.n	800a04a <__any_on+0x3a>
 800a042:	2000      	movs	r0, #0
 800a044:	bd10      	pop	{r4, pc}
 800a046:	0003      	movs	r3, r0
 800a048:	e7f7      	b.n	800a03a <__any_on+0x2a>
 800a04a:	3b04      	subs	r3, #4
 800a04c:	6819      	ldr	r1, [r3, #0]
 800a04e:	2900      	cmp	r1, #0
 800a050:	d0f5      	beq.n	800a03e <__any_on+0x2e>
 800a052:	2001      	movs	r0, #1
 800a054:	e7f6      	b.n	800a044 <__any_on+0x34>

0800a056 <__ascii_wctomb>:
 800a056:	0003      	movs	r3, r0
 800a058:	1e08      	subs	r0, r1, #0
 800a05a:	d005      	beq.n	800a068 <__ascii_wctomb+0x12>
 800a05c:	2aff      	cmp	r2, #255	; 0xff
 800a05e:	d904      	bls.n	800a06a <__ascii_wctomb+0x14>
 800a060:	228a      	movs	r2, #138	; 0x8a
 800a062:	2001      	movs	r0, #1
 800a064:	601a      	str	r2, [r3, #0]
 800a066:	4240      	negs	r0, r0
 800a068:	4770      	bx	lr
 800a06a:	2001      	movs	r0, #1
 800a06c:	700a      	strb	r2, [r1, #0]
 800a06e:	e7fb      	b.n	800a068 <__ascii_wctomb+0x12>

0800a070 <__ssputs_r>:
 800a070:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a072:	b085      	sub	sp, #20
 800a074:	9301      	str	r3, [sp, #4]
 800a076:	9203      	str	r2, [sp, #12]
 800a078:	688e      	ldr	r6, [r1, #8]
 800a07a:	9a01      	ldr	r2, [sp, #4]
 800a07c:	0007      	movs	r7, r0
 800a07e:	000c      	movs	r4, r1
 800a080:	680b      	ldr	r3, [r1, #0]
 800a082:	4296      	cmp	r6, r2
 800a084:	d831      	bhi.n	800a0ea <__ssputs_r+0x7a>
 800a086:	898a      	ldrh	r2, [r1, #12]
 800a088:	2190      	movs	r1, #144	; 0x90
 800a08a:	00c9      	lsls	r1, r1, #3
 800a08c:	420a      	tst	r2, r1
 800a08e:	d029      	beq.n	800a0e4 <__ssputs_r+0x74>
 800a090:	2003      	movs	r0, #3
 800a092:	6921      	ldr	r1, [r4, #16]
 800a094:	1a5b      	subs	r3, r3, r1
 800a096:	9302      	str	r3, [sp, #8]
 800a098:	6963      	ldr	r3, [r4, #20]
 800a09a:	4343      	muls	r3, r0
 800a09c:	0fdd      	lsrs	r5, r3, #31
 800a09e:	18ed      	adds	r5, r5, r3
 800a0a0:	9b01      	ldr	r3, [sp, #4]
 800a0a2:	9802      	ldr	r0, [sp, #8]
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	181b      	adds	r3, r3, r0
 800a0a8:	106d      	asrs	r5, r5, #1
 800a0aa:	42ab      	cmp	r3, r5
 800a0ac:	d900      	bls.n	800a0b0 <__ssputs_r+0x40>
 800a0ae:	001d      	movs	r5, r3
 800a0b0:	0552      	lsls	r2, r2, #21
 800a0b2:	d529      	bpl.n	800a108 <__ssputs_r+0x98>
 800a0b4:	0029      	movs	r1, r5
 800a0b6:	0038      	movs	r0, r7
 800a0b8:	f7fc f8b2 	bl	8006220 <_malloc_r>
 800a0bc:	1e06      	subs	r6, r0, #0
 800a0be:	d02d      	beq.n	800a11c <__ssputs_r+0xac>
 800a0c0:	9a02      	ldr	r2, [sp, #8]
 800a0c2:	6921      	ldr	r1, [r4, #16]
 800a0c4:	f7fe f8a2 	bl	800820c <memcpy>
 800a0c8:	89a2      	ldrh	r2, [r4, #12]
 800a0ca:	4b19      	ldr	r3, [pc, #100]	; (800a130 <__ssputs_r+0xc0>)
 800a0cc:	401a      	ands	r2, r3
 800a0ce:	2380      	movs	r3, #128	; 0x80
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	81a3      	strh	r3, [r4, #12]
 800a0d4:	9b02      	ldr	r3, [sp, #8]
 800a0d6:	6126      	str	r6, [r4, #16]
 800a0d8:	18f6      	adds	r6, r6, r3
 800a0da:	6026      	str	r6, [r4, #0]
 800a0dc:	6165      	str	r5, [r4, #20]
 800a0de:	9e01      	ldr	r6, [sp, #4]
 800a0e0:	1aed      	subs	r5, r5, r3
 800a0e2:	60a5      	str	r5, [r4, #8]
 800a0e4:	9b01      	ldr	r3, [sp, #4]
 800a0e6:	429e      	cmp	r6, r3
 800a0e8:	d900      	bls.n	800a0ec <__ssputs_r+0x7c>
 800a0ea:	9e01      	ldr	r6, [sp, #4]
 800a0ec:	0032      	movs	r2, r6
 800a0ee:	9903      	ldr	r1, [sp, #12]
 800a0f0:	6820      	ldr	r0, [r4, #0]
 800a0f2:	f000 f9d4 	bl	800a49e <memmove>
 800a0f6:	2000      	movs	r0, #0
 800a0f8:	68a3      	ldr	r3, [r4, #8]
 800a0fa:	1b9b      	subs	r3, r3, r6
 800a0fc:	60a3      	str	r3, [r4, #8]
 800a0fe:	6823      	ldr	r3, [r4, #0]
 800a100:	199b      	adds	r3, r3, r6
 800a102:	6023      	str	r3, [r4, #0]
 800a104:	b005      	add	sp, #20
 800a106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a108:	002a      	movs	r2, r5
 800a10a:	0038      	movs	r0, r7
 800a10c:	f000 fa25 	bl	800a55a <_realloc_r>
 800a110:	1e06      	subs	r6, r0, #0
 800a112:	d1df      	bne.n	800a0d4 <__ssputs_r+0x64>
 800a114:	0038      	movs	r0, r7
 800a116:	6921      	ldr	r1, [r4, #16]
 800a118:	f7fe ff2a 	bl	8008f70 <_free_r>
 800a11c:	230c      	movs	r3, #12
 800a11e:	2001      	movs	r0, #1
 800a120:	603b      	str	r3, [r7, #0]
 800a122:	89a2      	ldrh	r2, [r4, #12]
 800a124:	3334      	adds	r3, #52	; 0x34
 800a126:	4313      	orrs	r3, r2
 800a128:	81a3      	strh	r3, [r4, #12]
 800a12a:	4240      	negs	r0, r0
 800a12c:	e7ea      	b.n	800a104 <__ssputs_r+0x94>
 800a12e:	46c0      	nop			; (mov r8, r8)
 800a130:	fffffb7f 	.word	0xfffffb7f

0800a134 <_svfiprintf_r>:
 800a134:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a136:	b0a1      	sub	sp, #132	; 0x84
 800a138:	9003      	str	r0, [sp, #12]
 800a13a:	001d      	movs	r5, r3
 800a13c:	898b      	ldrh	r3, [r1, #12]
 800a13e:	000f      	movs	r7, r1
 800a140:	0016      	movs	r6, r2
 800a142:	061b      	lsls	r3, r3, #24
 800a144:	d511      	bpl.n	800a16a <_svfiprintf_r+0x36>
 800a146:	690b      	ldr	r3, [r1, #16]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d10e      	bne.n	800a16a <_svfiprintf_r+0x36>
 800a14c:	2140      	movs	r1, #64	; 0x40
 800a14e:	f7fc f867 	bl	8006220 <_malloc_r>
 800a152:	6038      	str	r0, [r7, #0]
 800a154:	6138      	str	r0, [r7, #16]
 800a156:	2800      	cmp	r0, #0
 800a158:	d105      	bne.n	800a166 <_svfiprintf_r+0x32>
 800a15a:	230c      	movs	r3, #12
 800a15c:	9a03      	ldr	r2, [sp, #12]
 800a15e:	3801      	subs	r0, #1
 800a160:	6013      	str	r3, [r2, #0]
 800a162:	b021      	add	sp, #132	; 0x84
 800a164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a166:	2340      	movs	r3, #64	; 0x40
 800a168:	617b      	str	r3, [r7, #20]
 800a16a:	2300      	movs	r3, #0
 800a16c:	ac08      	add	r4, sp, #32
 800a16e:	6163      	str	r3, [r4, #20]
 800a170:	3320      	adds	r3, #32
 800a172:	7663      	strb	r3, [r4, #25]
 800a174:	3310      	adds	r3, #16
 800a176:	76a3      	strb	r3, [r4, #26]
 800a178:	9507      	str	r5, [sp, #28]
 800a17a:	0035      	movs	r5, r6
 800a17c:	782b      	ldrb	r3, [r5, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d001      	beq.n	800a186 <_svfiprintf_r+0x52>
 800a182:	2b25      	cmp	r3, #37	; 0x25
 800a184:	d148      	bne.n	800a218 <_svfiprintf_r+0xe4>
 800a186:	1bab      	subs	r3, r5, r6
 800a188:	9305      	str	r3, [sp, #20]
 800a18a:	42b5      	cmp	r5, r6
 800a18c:	d00b      	beq.n	800a1a6 <_svfiprintf_r+0x72>
 800a18e:	0032      	movs	r2, r6
 800a190:	0039      	movs	r1, r7
 800a192:	9803      	ldr	r0, [sp, #12]
 800a194:	f7ff ff6c 	bl	800a070 <__ssputs_r>
 800a198:	3001      	adds	r0, #1
 800a19a:	d100      	bne.n	800a19e <_svfiprintf_r+0x6a>
 800a19c:	e0af      	b.n	800a2fe <_svfiprintf_r+0x1ca>
 800a19e:	6963      	ldr	r3, [r4, #20]
 800a1a0:	9a05      	ldr	r2, [sp, #20]
 800a1a2:	189b      	adds	r3, r3, r2
 800a1a4:	6163      	str	r3, [r4, #20]
 800a1a6:	782b      	ldrb	r3, [r5, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d100      	bne.n	800a1ae <_svfiprintf_r+0x7a>
 800a1ac:	e0a7      	b.n	800a2fe <_svfiprintf_r+0x1ca>
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	4252      	negs	r2, r2
 800a1b4:	6062      	str	r2, [r4, #4]
 800a1b6:	a904      	add	r1, sp, #16
 800a1b8:	3254      	adds	r2, #84	; 0x54
 800a1ba:	1852      	adds	r2, r2, r1
 800a1bc:	1c6e      	adds	r6, r5, #1
 800a1be:	6023      	str	r3, [r4, #0]
 800a1c0:	60e3      	str	r3, [r4, #12]
 800a1c2:	60a3      	str	r3, [r4, #8]
 800a1c4:	7013      	strb	r3, [r2, #0]
 800a1c6:	65a3      	str	r3, [r4, #88]	; 0x58
 800a1c8:	4b55      	ldr	r3, [pc, #340]	; (800a320 <_svfiprintf_r+0x1ec>)
 800a1ca:	2205      	movs	r2, #5
 800a1cc:	0018      	movs	r0, r3
 800a1ce:	7831      	ldrb	r1, [r6, #0]
 800a1d0:	9305      	str	r3, [sp, #20]
 800a1d2:	f7fe f810 	bl	80081f6 <memchr>
 800a1d6:	1c75      	adds	r5, r6, #1
 800a1d8:	2800      	cmp	r0, #0
 800a1da:	d11f      	bne.n	800a21c <_svfiprintf_r+0xe8>
 800a1dc:	6822      	ldr	r2, [r4, #0]
 800a1de:	06d3      	lsls	r3, r2, #27
 800a1e0:	d504      	bpl.n	800a1ec <_svfiprintf_r+0xb8>
 800a1e2:	2353      	movs	r3, #83	; 0x53
 800a1e4:	a904      	add	r1, sp, #16
 800a1e6:	185b      	adds	r3, r3, r1
 800a1e8:	2120      	movs	r1, #32
 800a1ea:	7019      	strb	r1, [r3, #0]
 800a1ec:	0713      	lsls	r3, r2, #28
 800a1ee:	d504      	bpl.n	800a1fa <_svfiprintf_r+0xc6>
 800a1f0:	2353      	movs	r3, #83	; 0x53
 800a1f2:	a904      	add	r1, sp, #16
 800a1f4:	185b      	adds	r3, r3, r1
 800a1f6:	212b      	movs	r1, #43	; 0x2b
 800a1f8:	7019      	strb	r1, [r3, #0]
 800a1fa:	7833      	ldrb	r3, [r6, #0]
 800a1fc:	2b2a      	cmp	r3, #42	; 0x2a
 800a1fe:	d016      	beq.n	800a22e <_svfiprintf_r+0xfa>
 800a200:	0035      	movs	r5, r6
 800a202:	2100      	movs	r1, #0
 800a204:	200a      	movs	r0, #10
 800a206:	68e3      	ldr	r3, [r4, #12]
 800a208:	782a      	ldrb	r2, [r5, #0]
 800a20a:	1c6e      	adds	r6, r5, #1
 800a20c:	3a30      	subs	r2, #48	; 0x30
 800a20e:	2a09      	cmp	r2, #9
 800a210:	d94e      	bls.n	800a2b0 <_svfiprintf_r+0x17c>
 800a212:	2900      	cmp	r1, #0
 800a214:	d111      	bne.n	800a23a <_svfiprintf_r+0x106>
 800a216:	e017      	b.n	800a248 <_svfiprintf_r+0x114>
 800a218:	3501      	adds	r5, #1
 800a21a:	e7af      	b.n	800a17c <_svfiprintf_r+0x48>
 800a21c:	9b05      	ldr	r3, [sp, #20]
 800a21e:	6822      	ldr	r2, [r4, #0]
 800a220:	1ac0      	subs	r0, r0, r3
 800a222:	2301      	movs	r3, #1
 800a224:	4083      	lsls	r3, r0
 800a226:	4313      	orrs	r3, r2
 800a228:	002e      	movs	r6, r5
 800a22a:	6023      	str	r3, [r4, #0]
 800a22c:	e7cc      	b.n	800a1c8 <_svfiprintf_r+0x94>
 800a22e:	9b07      	ldr	r3, [sp, #28]
 800a230:	1d19      	adds	r1, r3, #4
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	9107      	str	r1, [sp, #28]
 800a236:	2b00      	cmp	r3, #0
 800a238:	db01      	blt.n	800a23e <_svfiprintf_r+0x10a>
 800a23a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a23c:	e004      	b.n	800a248 <_svfiprintf_r+0x114>
 800a23e:	425b      	negs	r3, r3
 800a240:	60e3      	str	r3, [r4, #12]
 800a242:	2302      	movs	r3, #2
 800a244:	4313      	orrs	r3, r2
 800a246:	6023      	str	r3, [r4, #0]
 800a248:	782b      	ldrb	r3, [r5, #0]
 800a24a:	2b2e      	cmp	r3, #46	; 0x2e
 800a24c:	d10a      	bne.n	800a264 <_svfiprintf_r+0x130>
 800a24e:	786b      	ldrb	r3, [r5, #1]
 800a250:	2b2a      	cmp	r3, #42	; 0x2a
 800a252:	d135      	bne.n	800a2c0 <_svfiprintf_r+0x18c>
 800a254:	9b07      	ldr	r3, [sp, #28]
 800a256:	3502      	adds	r5, #2
 800a258:	1d1a      	adds	r2, r3, #4
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	9207      	str	r2, [sp, #28]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	db2b      	blt.n	800a2ba <_svfiprintf_r+0x186>
 800a262:	9309      	str	r3, [sp, #36]	; 0x24
 800a264:	4e2f      	ldr	r6, [pc, #188]	; (800a324 <_svfiprintf_r+0x1f0>)
 800a266:	2203      	movs	r2, #3
 800a268:	0030      	movs	r0, r6
 800a26a:	7829      	ldrb	r1, [r5, #0]
 800a26c:	f7fd ffc3 	bl	80081f6 <memchr>
 800a270:	2800      	cmp	r0, #0
 800a272:	d006      	beq.n	800a282 <_svfiprintf_r+0x14e>
 800a274:	2340      	movs	r3, #64	; 0x40
 800a276:	1b80      	subs	r0, r0, r6
 800a278:	4083      	lsls	r3, r0
 800a27a:	6822      	ldr	r2, [r4, #0]
 800a27c:	3501      	adds	r5, #1
 800a27e:	4313      	orrs	r3, r2
 800a280:	6023      	str	r3, [r4, #0]
 800a282:	7829      	ldrb	r1, [r5, #0]
 800a284:	2206      	movs	r2, #6
 800a286:	4828      	ldr	r0, [pc, #160]	; (800a328 <_svfiprintf_r+0x1f4>)
 800a288:	1c6e      	adds	r6, r5, #1
 800a28a:	7621      	strb	r1, [r4, #24]
 800a28c:	f7fd ffb3 	bl	80081f6 <memchr>
 800a290:	2800      	cmp	r0, #0
 800a292:	d03c      	beq.n	800a30e <_svfiprintf_r+0x1da>
 800a294:	4b25      	ldr	r3, [pc, #148]	; (800a32c <_svfiprintf_r+0x1f8>)
 800a296:	2b00      	cmp	r3, #0
 800a298:	d125      	bne.n	800a2e6 <_svfiprintf_r+0x1b2>
 800a29a:	2207      	movs	r2, #7
 800a29c:	9b07      	ldr	r3, [sp, #28]
 800a29e:	3307      	adds	r3, #7
 800a2a0:	4393      	bics	r3, r2
 800a2a2:	3308      	adds	r3, #8
 800a2a4:	9307      	str	r3, [sp, #28]
 800a2a6:	6963      	ldr	r3, [r4, #20]
 800a2a8:	9a04      	ldr	r2, [sp, #16]
 800a2aa:	189b      	adds	r3, r3, r2
 800a2ac:	6163      	str	r3, [r4, #20]
 800a2ae:	e764      	b.n	800a17a <_svfiprintf_r+0x46>
 800a2b0:	4343      	muls	r3, r0
 800a2b2:	0035      	movs	r5, r6
 800a2b4:	2101      	movs	r1, #1
 800a2b6:	189b      	adds	r3, r3, r2
 800a2b8:	e7a6      	b.n	800a208 <_svfiprintf_r+0xd4>
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	425b      	negs	r3, r3
 800a2be:	e7d0      	b.n	800a262 <_svfiprintf_r+0x12e>
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	200a      	movs	r0, #10
 800a2c4:	001a      	movs	r2, r3
 800a2c6:	3501      	adds	r5, #1
 800a2c8:	6063      	str	r3, [r4, #4]
 800a2ca:	7829      	ldrb	r1, [r5, #0]
 800a2cc:	1c6e      	adds	r6, r5, #1
 800a2ce:	3930      	subs	r1, #48	; 0x30
 800a2d0:	2909      	cmp	r1, #9
 800a2d2:	d903      	bls.n	800a2dc <_svfiprintf_r+0x1a8>
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d0c5      	beq.n	800a264 <_svfiprintf_r+0x130>
 800a2d8:	9209      	str	r2, [sp, #36]	; 0x24
 800a2da:	e7c3      	b.n	800a264 <_svfiprintf_r+0x130>
 800a2dc:	4342      	muls	r2, r0
 800a2de:	0035      	movs	r5, r6
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	1852      	adds	r2, r2, r1
 800a2e4:	e7f1      	b.n	800a2ca <_svfiprintf_r+0x196>
 800a2e6:	aa07      	add	r2, sp, #28
 800a2e8:	9200      	str	r2, [sp, #0]
 800a2ea:	0021      	movs	r1, r4
 800a2ec:	003a      	movs	r2, r7
 800a2ee:	4b10      	ldr	r3, [pc, #64]	; (800a330 <_svfiprintf_r+0x1fc>)
 800a2f0:	9803      	ldr	r0, [sp, #12]
 800a2f2:	f7fc ff9d 	bl	8007230 <_printf_float>
 800a2f6:	9004      	str	r0, [sp, #16]
 800a2f8:	9b04      	ldr	r3, [sp, #16]
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	d1d3      	bne.n	800a2a6 <_svfiprintf_r+0x172>
 800a2fe:	89bb      	ldrh	r3, [r7, #12]
 800a300:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a302:	065b      	lsls	r3, r3, #25
 800a304:	d400      	bmi.n	800a308 <_svfiprintf_r+0x1d4>
 800a306:	e72c      	b.n	800a162 <_svfiprintf_r+0x2e>
 800a308:	2001      	movs	r0, #1
 800a30a:	4240      	negs	r0, r0
 800a30c:	e729      	b.n	800a162 <_svfiprintf_r+0x2e>
 800a30e:	aa07      	add	r2, sp, #28
 800a310:	9200      	str	r2, [sp, #0]
 800a312:	0021      	movs	r1, r4
 800a314:	003a      	movs	r2, r7
 800a316:	4b06      	ldr	r3, [pc, #24]	; (800a330 <_svfiprintf_r+0x1fc>)
 800a318:	9803      	ldr	r0, [sp, #12]
 800a31a:	f7fd fa4f 	bl	80077bc <_printf_i>
 800a31e:	e7ea      	b.n	800a2f6 <_svfiprintf_r+0x1c2>
 800a320:	0800b0a4 	.word	0x0800b0a4
 800a324:	0800b0aa 	.word	0x0800b0aa
 800a328:	0800b0ae 	.word	0x0800b0ae
 800a32c:	08007231 	.word	0x08007231
 800a330:	0800a071 	.word	0x0800a071

0800a334 <__sflush_r>:
 800a334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a336:	898b      	ldrh	r3, [r1, #12]
 800a338:	0005      	movs	r5, r0
 800a33a:	000c      	movs	r4, r1
 800a33c:	071a      	lsls	r2, r3, #28
 800a33e:	d45c      	bmi.n	800a3fa <__sflush_r+0xc6>
 800a340:	684a      	ldr	r2, [r1, #4]
 800a342:	2a00      	cmp	r2, #0
 800a344:	dc04      	bgt.n	800a350 <__sflush_r+0x1c>
 800a346:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a348:	2a00      	cmp	r2, #0
 800a34a:	dc01      	bgt.n	800a350 <__sflush_r+0x1c>
 800a34c:	2000      	movs	r0, #0
 800a34e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a350:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a352:	2f00      	cmp	r7, #0
 800a354:	d0fa      	beq.n	800a34c <__sflush_r+0x18>
 800a356:	2200      	movs	r2, #0
 800a358:	2080      	movs	r0, #128	; 0x80
 800a35a:	682e      	ldr	r6, [r5, #0]
 800a35c:	602a      	str	r2, [r5, #0]
 800a35e:	001a      	movs	r2, r3
 800a360:	0140      	lsls	r0, r0, #5
 800a362:	6a21      	ldr	r1, [r4, #32]
 800a364:	4002      	ands	r2, r0
 800a366:	4203      	tst	r3, r0
 800a368:	d034      	beq.n	800a3d4 <__sflush_r+0xa0>
 800a36a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a36c:	89a3      	ldrh	r3, [r4, #12]
 800a36e:	075b      	lsls	r3, r3, #29
 800a370:	d506      	bpl.n	800a380 <__sflush_r+0x4c>
 800a372:	6863      	ldr	r3, [r4, #4]
 800a374:	1ac0      	subs	r0, r0, r3
 800a376:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d001      	beq.n	800a380 <__sflush_r+0x4c>
 800a37c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a37e:	1ac0      	subs	r0, r0, r3
 800a380:	0002      	movs	r2, r0
 800a382:	2300      	movs	r3, #0
 800a384:	0028      	movs	r0, r5
 800a386:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a388:	6a21      	ldr	r1, [r4, #32]
 800a38a:	47b8      	blx	r7
 800a38c:	89a2      	ldrh	r2, [r4, #12]
 800a38e:	1c43      	adds	r3, r0, #1
 800a390:	d106      	bne.n	800a3a0 <__sflush_r+0x6c>
 800a392:	6829      	ldr	r1, [r5, #0]
 800a394:	291d      	cmp	r1, #29
 800a396:	d82c      	bhi.n	800a3f2 <__sflush_r+0xbe>
 800a398:	4b2a      	ldr	r3, [pc, #168]	; (800a444 <__sflush_r+0x110>)
 800a39a:	410b      	asrs	r3, r1
 800a39c:	07db      	lsls	r3, r3, #31
 800a39e:	d428      	bmi.n	800a3f2 <__sflush_r+0xbe>
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	6063      	str	r3, [r4, #4]
 800a3a4:	6923      	ldr	r3, [r4, #16]
 800a3a6:	6023      	str	r3, [r4, #0]
 800a3a8:	04d2      	lsls	r2, r2, #19
 800a3aa:	d505      	bpl.n	800a3b8 <__sflush_r+0x84>
 800a3ac:	1c43      	adds	r3, r0, #1
 800a3ae:	d102      	bne.n	800a3b6 <__sflush_r+0x82>
 800a3b0:	682b      	ldr	r3, [r5, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d100      	bne.n	800a3b8 <__sflush_r+0x84>
 800a3b6:	6560      	str	r0, [r4, #84]	; 0x54
 800a3b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3ba:	602e      	str	r6, [r5, #0]
 800a3bc:	2900      	cmp	r1, #0
 800a3be:	d0c5      	beq.n	800a34c <__sflush_r+0x18>
 800a3c0:	0023      	movs	r3, r4
 800a3c2:	3344      	adds	r3, #68	; 0x44
 800a3c4:	4299      	cmp	r1, r3
 800a3c6:	d002      	beq.n	800a3ce <__sflush_r+0x9a>
 800a3c8:	0028      	movs	r0, r5
 800a3ca:	f7fe fdd1 	bl	8008f70 <_free_r>
 800a3ce:	2000      	movs	r0, #0
 800a3d0:	6360      	str	r0, [r4, #52]	; 0x34
 800a3d2:	e7bc      	b.n	800a34e <__sflush_r+0x1a>
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	0028      	movs	r0, r5
 800a3d8:	47b8      	blx	r7
 800a3da:	1c43      	adds	r3, r0, #1
 800a3dc:	d1c6      	bne.n	800a36c <__sflush_r+0x38>
 800a3de:	682b      	ldr	r3, [r5, #0]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d0c3      	beq.n	800a36c <__sflush_r+0x38>
 800a3e4:	2b1d      	cmp	r3, #29
 800a3e6:	d001      	beq.n	800a3ec <__sflush_r+0xb8>
 800a3e8:	2b16      	cmp	r3, #22
 800a3ea:	d101      	bne.n	800a3f0 <__sflush_r+0xbc>
 800a3ec:	602e      	str	r6, [r5, #0]
 800a3ee:	e7ad      	b.n	800a34c <__sflush_r+0x18>
 800a3f0:	89a2      	ldrh	r2, [r4, #12]
 800a3f2:	2340      	movs	r3, #64	; 0x40
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	81a3      	strh	r3, [r4, #12]
 800a3f8:	e7a9      	b.n	800a34e <__sflush_r+0x1a>
 800a3fa:	690e      	ldr	r6, [r1, #16]
 800a3fc:	2e00      	cmp	r6, #0
 800a3fe:	d0a5      	beq.n	800a34c <__sflush_r+0x18>
 800a400:	680f      	ldr	r7, [r1, #0]
 800a402:	600e      	str	r6, [r1, #0]
 800a404:	1bba      	subs	r2, r7, r6
 800a406:	9201      	str	r2, [sp, #4]
 800a408:	2200      	movs	r2, #0
 800a40a:	079b      	lsls	r3, r3, #30
 800a40c:	d100      	bne.n	800a410 <__sflush_r+0xdc>
 800a40e:	694a      	ldr	r2, [r1, #20]
 800a410:	60a2      	str	r2, [r4, #8]
 800a412:	9b01      	ldr	r3, [sp, #4]
 800a414:	2b00      	cmp	r3, #0
 800a416:	dd99      	ble.n	800a34c <__sflush_r+0x18>
 800a418:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a41a:	0032      	movs	r2, r6
 800a41c:	001f      	movs	r7, r3
 800a41e:	0028      	movs	r0, r5
 800a420:	9b01      	ldr	r3, [sp, #4]
 800a422:	6a21      	ldr	r1, [r4, #32]
 800a424:	47b8      	blx	r7
 800a426:	2800      	cmp	r0, #0
 800a428:	dc06      	bgt.n	800a438 <__sflush_r+0x104>
 800a42a:	2340      	movs	r3, #64	; 0x40
 800a42c:	2001      	movs	r0, #1
 800a42e:	89a2      	ldrh	r2, [r4, #12]
 800a430:	4240      	negs	r0, r0
 800a432:	4313      	orrs	r3, r2
 800a434:	81a3      	strh	r3, [r4, #12]
 800a436:	e78a      	b.n	800a34e <__sflush_r+0x1a>
 800a438:	9b01      	ldr	r3, [sp, #4]
 800a43a:	1836      	adds	r6, r6, r0
 800a43c:	1a1b      	subs	r3, r3, r0
 800a43e:	9301      	str	r3, [sp, #4]
 800a440:	e7e7      	b.n	800a412 <__sflush_r+0xde>
 800a442:	46c0      	nop			; (mov r8, r8)
 800a444:	dfbffffe 	.word	0xdfbffffe

0800a448 <_fflush_r>:
 800a448:	690b      	ldr	r3, [r1, #16]
 800a44a:	b570      	push	{r4, r5, r6, lr}
 800a44c:	0005      	movs	r5, r0
 800a44e:	000c      	movs	r4, r1
 800a450:	2b00      	cmp	r3, #0
 800a452:	d102      	bne.n	800a45a <_fflush_r+0x12>
 800a454:	2500      	movs	r5, #0
 800a456:	0028      	movs	r0, r5
 800a458:	bd70      	pop	{r4, r5, r6, pc}
 800a45a:	2800      	cmp	r0, #0
 800a45c:	d004      	beq.n	800a468 <_fflush_r+0x20>
 800a45e:	6a03      	ldr	r3, [r0, #32]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d101      	bne.n	800a468 <_fflush_r+0x20>
 800a464:	f7fd fd52 	bl	8007f0c <__sinit>
 800a468:	220c      	movs	r2, #12
 800a46a:	5ea3      	ldrsh	r3, [r4, r2]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d0f1      	beq.n	800a454 <_fflush_r+0xc>
 800a470:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a472:	07d2      	lsls	r2, r2, #31
 800a474:	d404      	bmi.n	800a480 <_fflush_r+0x38>
 800a476:	059b      	lsls	r3, r3, #22
 800a478:	d402      	bmi.n	800a480 <_fflush_r+0x38>
 800a47a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a47c:	f7fd feb9 	bl	80081f2 <__retarget_lock_acquire_recursive>
 800a480:	0028      	movs	r0, r5
 800a482:	0021      	movs	r1, r4
 800a484:	f7ff ff56 	bl	800a334 <__sflush_r>
 800a488:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a48a:	0005      	movs	r5, r0
 800a48c:	07db      	lsls	r3, r3, #31
 800a48e:	d4e2      	bmi.n	800a456 <_fflush_r+0xe>
 800a490:	89a3      	ldrh	r3, [r4, #12]
 800a492:	059b      	lsls	r3, r3, #22
 800a494:	d4df      	bmi.n	800a456 <_fflush_r+0xe>
 800a496:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a498:	f7fd feac 	bl	80081f4 <__retarget_lock_release_recursive>
 800a49c:	e7db      	b.n	800a456 <_fflush_r+0xe>

0800a49e <memmove>:
 800a49e:	b510      	push	{r4, lr}
 800a4a0:	4288      	cmp	r0, r1
 800a4a2:	d902      	bls.n	800a4aa <memmove+0xc>
 800a4a4:	188b      	adds	r3, r1, r2
 800a4a6:	4298      	cmp	r0, r3
 800a4a8:	d303      	bcc.n	800a4b2 <memmove+0x14>
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	e007      	b.n	800a4be <memmove+0x20>
 800a4ae:	5c8b      	ldrb	r3, [r1, r2]
 800a4b0:	5483      	strb	r3, [r0, r2]
 800a4b2:	3a01      	subs	r2, #1
 800a4b4:	d2fb      	bcs.n	800a4ae <memmove+0x10>
 800a4b6:	bd10      	pop	{r4, pc}
 800a4b8:	5ccc      	ldrb	r4, [r1, r3]
 800a4ba:	54c4      	strb	r4, [r0, r3]
 800a4bc:	3301      	adds	r3, #1
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d1fa      	bne.n	800a4b8 <memmove+0x1a>
 800a4c2:	e7f8      	b.n	800a4b6 <memmove+0x18>

0800a4c4 <__assert_func>:
 800a4c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a4c6:	0014      	movs	r4, r2
 800a4c8:	001a      	movs	r2, r3
 800a4ca:	4b09      	ldr	r3, [pc, #36]	; (800a4f0 <__assert_func+0x2c>)
 800a4cc:	0005      	movs	r5, r0
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	000e      	movs	r6, r1
 800a4d2:	68d8      	ldr	r0, [r3, #12]
 800a4d4:	4b07      	ldr	r3, [pc, #28]	; (800a4f4 <__assert_func+0x30>)
 800a4d6:	2c00      	cmp	r4, #0
 800a4d8:	d101      	bne.n	800a4de <__assert_func+0x1a>
 800a4da:	4b07      	ldr	r3, [pc, #28]	; (800a4f8 <__assert_func+0x34>)
 800a4dc:	001c      	movs	r4, r3
 800a4de:	4907      	ldr	r1, [pc, #28]	; (800a4fc <__assert_func+0x38>)
 800a4e0:	9301      	str	r3, [sp, #4]
 800a4e2:	9402      	str	r4, [sp, #8]
 800a4e4:	002b      	movs	r3, r5
 800a4e6:	9600      	str	r6, [sp, #0]
 800a4e8:	f000 f866 	bl	800a5b8 <fiprintf>
 800a4ec:	f000 f874 	bl	800a5d8 <abort>
 800a4f0:	200001dc 	.word	0x200001dc
 800a4f4:	0800b0b5 	.word	0x0800b0b5
 800a4f8:	0800b0f0 	.word	0x0800b0f0
 800a4fc:	0800b0c2 	.word	0x0800b0c2

0800a500 <_calloc_r>:
 800a500:	b570      	push	{r4, r5, r6, lr}
 800a502:	0c0b      	lsrs	r3, r1, #16
 800a504:	0c15      	lsrs	r5, r2, #16
 800a506:	2b00      	cmp	r3, #0
 800a508:	d11e      	bne.n	800a548 <_calloc_r+0x48>
 800a50a:	2d00      	cmp	r5, #0
 800a50c:	d10c      	bne.n	800a528 <_calloc_r+0x28>
 800a50e:	b289      	uxth	r1, r1
 800a510:	b294      	uxth	r4, r2
 800a512:	434c      	muls	r4, r1
 800a514:	0021      	movs	r1, r4
 800a516:	f7fb fe83 	bl	8006220 <_malloc_r>
 800a51a:	1e05      	subs	r5, r0, #0
 800a51c:	d01b      	beq.n	800a556 <_calloc_r+0x56>
 800a51e:	0022      	movs	r2, r4
 800a520:	2100      	movs	r1, #0
 800a522:	f7fd fd93 	bl	800804c <memset>
 800a526:	e016      	b.n	800a556 <_calloc_r+0x56>
 800a528:	1c2b      	adds	r3, r5, #0
 800a52a:	1c0c      	adds	r4, r1, #0
 800a52c:	b289      	uxth	r1, r1
 800a52e:	b292      	uxth	r2, r2
 800a530:	434a      	muls	r2, r1
 800a532:	b2a1      	uxth	r1, r4
 800a534:	b29c      	uxth	r4, r3
 800a536:	434c      	muls	r4, r1
 800a538:	0c13      	lsrs	r3, r2, #16
 800a53a:	18e4      	adds	r4, r4, r3
 800a53c:	0c23      	lsrs	r3, r4, #16
 800a53e:	d107      	bne.n	800a550 <_calloc_r+0x50>
 800a540:	0424      	lsls	r4, r4, #16
 800a542:	b292      	uxth	r2, r2
 800a544:	4314      	orrs	r4, r2
 800a546:	e7e5      	b.n	800a514 <_calloc_r+0x14>
 800a548:	2d00      	cmp	r5, #0
 800a54a:	d101      	bne.n	800a550 <_calloc_r+0x50>
 800a54c:	1c14      	adds	r4, r2, #0
 800a54e:	e7ed      	b.n	800a52c <_calloc_r+0x2c>
 800a550:	230c      	movs	r3, #12
 800a552:	2500      	movs	r5, #0
 800a554:	6003      	str	r3, [r0, #0]
 800a556:	0028      	movs	r0, r5
 800a558:	bd70      	pop	{r4, r5, r6, pc}

0800a55a <_realloc_r>:
 800a55a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a55c:	0007      	movs	r7, r0
 800a55e:	000e      	movs	r6, r1
 800a560:	0014      	movs	r4, r2
 800a562:	2900      	cmp	r1, #0
 800a564:	d105      	bne.n	800a572 <_realloc_r+0x18>
 800a566:	0011      	movs	r1, r2
 800a568:	f7fb fe5a 	bl	8006220 <_malloc_r>
 800a56c:	0005      	movs	r5, r0
 800a56e:	0028      	movs	r0, r5
 800a570:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a572:	2a00      	cmp	r2, #0
 800a574:	d103      	bne.n	800a57e <_realloc_r+0x24>
 800a576:	f7fe fcfb 	bl	8008f70 <_free_r>
 800a57a:	0025      	movs	r5, r4
 800a57c:	e7f7      	b.n	800a56e <_realloc_r+0x14>
 800a57e:	f000 f832 	bl	800a5e6 <_malloc_usable_size_r>
 800a582:	9001      	str	r0, [sp, #4]
 800a584:	4284      	cmp	r4, r0
 800a586:	d803      	bhi.n	800a590 <_realloc_r+0x36>
 800a588:	0035      	movs	r5, r6
 800a58a:	0843      	lsrs	r3, r0, #1
 800a58c:	42a3      	cmp	r3, r4
 800a58e:	d3ee      	bcc.n	800a56e <_realloc_r+0x14>
 800a590:	0021      	movs	r1, r4
 800a592:	0038      	movs	r0, r7
 800a594:	f7fb fe44 	bl	8006220 <_malloc_r>
 800a598:	1e05      	subs	r5, r0, #0
 800a59a:	d0e8      	beq.n	800a56e <_realloc_r+0x14>
 800a59c:	9b01      	ldr	r3, [sp, #4]
 800a59e:	0022      	movs	r2, r4
 800a5a0:	429c      	cmp	r4, r3
 800a5a2:	d900      	bls.n	800a5a6 <_realloc_r+0x4c>
 800a5a4:	001a      	movs	r2, r3
 800a5a6:	0031      	movs	r1, r6
 800a5a8:	0028      	movs	r0, r5
 800a5aa:	f7fd fe2f 	bl	800820c <memcpy>
 800a5ae:	0031      	movs	r1, r6
 800a5b0:	0038      	movs	r0, r7
 800a5b2:	f7fe fcdd 	bl	8008f70 <_free_r>
 800a5b6:	e7da      	b.n	800a56e <_realloc_r+0x14>

0800a5b8 <fiprintf>:
 800a5b8:	b40e      	push	{r1, r2, r3}
 800a5ba:	b517      	push	{r0, r1, r2, r4, lr}
 800a5bc:	4c05      	ldr	r4, [pc, #20]	; (800a5d4 <fiprintf+0x1c>)
 800a5be:	ab05      	add	r3, sp, #20
 800a5c0:	cb04      	ldmia	r3!, {r2}
 800a5c2:	0001      	movs	r1, r0
 800a5c4:	6820      	ldr	r0, [r4, #0]
 800a5c6:	9301      	str	r3, [sp, #4]
 800a5c8:	f000 f83c 	bl	800a644 <_vfiprintf_r>
 800a5cc:	bc1e      	pop	{r1, r2, r3, r4}
 800a5ce:	bc08      	pop	{r3}
 800a5d0:	b003      	add	sp, #12
 800a5d2:	4718      	bx	r3
 800a5d4:	200001dc 	.word	0x200001dc

0800a5d8 <abort>:
 800a5d8:	2006      	movs	r0, #6
 800a5da:	b510      	push	{r4, lr}
 800a5dc:	f000 fa1e 	bl	800aa1c <raise>
 800a5e0:	2001      	movs	r0, #1
 800a5e2:	f7f8 fd11 	bl	8003008 <_exit>

0800a5e6 <_malloc_usable_size_r>:
 800a5e6:	1f0b      	subs	r3, r1, #4
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	1f18      	subs	r0, r3, #4
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	da01      	bge.n	800a5f4 <_malloc_usable_size_r+0xe>
 800a5f0:	580b      	ldr	r3, [r1, r0]
 800a5f2:	18c0      	adds	r0, r0, r3
 800a5f4:	4770      	bx	lr

0800a5f6 <__sfputc_r>:
 800a5f6:	6893      	ldr	r3, [r2, #8]
 800a5f8:	b510      	push	{r4, lr}
 800a5fa:	3b01      	subs	r3, #1
 800a5fc:	6093      	str	r3, [r2, #8]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	da04      	bge.n	800a60c <__sfputc_r+0x16>
 800a602:	6994      	ldr	r4, [r2, #24]
 800a604:	42a3      	cmp	r3, r4
 800a606:	db07      	blt.n	800a618 <__sfputc_r+0x22>
 800a608:	290a      	cmp	r1, #10
 800a60a:	d005      	beq.n	800a618 <__sfputc_r+0x22>
 800a60c:	6813      	ldr	r3, [r2, #0]
 800a60e:	1c58      	adds	r0, r3, #1
 800a610:	6010      	str	r0, [r2, #0]
 800a612:	7019      	strb	r1, [r3, #0]
 800a614:	0008      	movs	r0, r1
 800a616:	bd10      	pop	{r4, pc}
 800a618:	f000 f930 	bl	800a87c <__swbuf_r>
 800a61c:	0001      	movs	r1, r0
 800a61e:	e7f9      	b.n	800a614 <__sfputc_r+0x1e>

0800a620 <__sfputs_r>:
 800a620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a622:	0006      	movs	r6, r0
 800a624:	000f      	movs	r7, r1
 800a626:	0014      	movs	r4, r2
 800a628:	18d5      	adds	r5, r2, r3
 800a62a:	42ac      	cmp	r4, r5
 800a62c:	d101      	bne.n	800a632 <__sfputs_r+0x12>
 800a62e:	2000      	movs	r0, #0
 800a630:	e007      	b.n	800a642 <__sfputs_r+0x22>
 800a632:	7821      	ldrb	r1, [r4, #0]
 800a634:	003a      	movs	r2, r7
 800a636:	0030      	movs	r0, r6
 800a638:	f7ff ffdd 	bl	800a5f6 <__sfputc_r>
 800a63c:	3401      	adds	r4, #1
 800a63e:	1c43      	adds	r3, r0, #1
 800a640:	d1f3      	bne.n	800a62a <__sfputs_r+0xa>
 800a642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a644 <_vfiprintf_r>:
 800a644:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a646:	b0a1      	sub	sp, #132	; 0x84
 800a648:	000f      	movs	r7, r1
 800a64a:	0015      	movs	r5, r2
 800a64c:	001e      	movs	r6, r3
 800a64e:	9003      	str	r0, [sp, #12]
 800a650:	2800      	cmp	r0, #0
 800a652:	d004      	beq.n	800a65e <_vfiprintf_r+0x1a>
 800a654:	6a03      	ldr	r3, [r0, #32]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d101      	bne.n	800a65e <_vfiprintf_r+0x1a>
 800a65a:	f7fd fc57 	bl	8007f0c <__sinit>
 800a65e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a660:	07db      	lsls	r3, r3, #31
 800a662:	d405      	bmi.n	800a670 <_vfiprintf_r+0x2c>
 800a664:	89bb      	ldrh	r3, [r7, #12]
 800a666:	059b      	lsls	r3, r3, #22
 800a668:	d402      	bmi.n	800a670 <_vfiprintf_r+0x2c>
 800a66a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a66c:	f7fd fdc1 	bl	80081f2 <__retarget_lock_acquire_recursive>
 800a670:	89bb      	ldrh	r3, [r7, #12]
 800a672:	071b      	lsls	r3, r3, #28
 800a674:	d502      	bpl.n	800a67c <_vfiprintf_r+0x38>
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d113      	bne.n	800a6a4 <_vfiprintf_r+0x60>
 800a67c:	0039      	movs	r1, r7
 800a67e:	9803      	ldr	r0, [sp, #12]
 800a680:	f000 f93e 	bl	800a900 <__swsetup_r>
 800a684:	2800      	cmp	r0, #0
 800a686:	d00d      	beq.n	800a6a4 <_vfiprintf_r+0x60>
 800a688:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a68a:	07db      	lsls	r3, r3, #31
 800a68c:	d503      	bpl.n	800a696 <_vfiprintf_r+0x52>
 800a68e:	2001      	movs	r0, #1
 800a690:	4240      	negs	r0, r0
 800a692:	b021      	add	sp, #132	; 0x84
 800a694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a696:	89bb      	ldrh	r3, [r7, #12]
 800a698:	059b      	lsls	r3, r3, #22
 800a69a:	d4f8      	bmi.n	800a68e <_vfiprintf_r+0x4a>
 800a69c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a69e:	f7fd fda9 	bl	80081f4 <__retarget_lock_release_recursive>
 800a6a2:	e7f4      	b.n	800a68e <_vfiprintf_r+0x4a>
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	ac08      	add	r4, sp, #32
 800a6a8:	6163      	str	r3, [r4, #20]
 800a6aa:	3320      	adds	r3, #32
 800a6ac:	7663      	strb	r3, [r4, #25]
 800a6ae:	3310      	adds	r3, #16
 800a6b0:	76a3      	strb	r3, [r4, #26]
 800a6b2:	9607      	str	r6, [sp, #28]
 800a6b4:	002e      	movs	r6, r5
 800a6b6:	7833      	ldrb	r3, [r6, #0]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d001      	beq.n	800a6c0 <_vfiprintf_r+0x7c>
 800a6bc:	2b25      	cmp	r3, #37	; 0x25
 800a6be:	d148      	bne.n	800a752 <_vfiprintf_r+0x10e>
 800a6c0:	1b73      	subs	r3, r6, r5
 800a6c2:	9305      	str	r3, [sp, #20]
 800a6c4:	42ae      	cmp	r6, r5
 800a6c6:	d00b      	beq.n	800a6e0 <_vfiprintf_r+0x9c>
 800a6c8:	002a      	movs	r2, r5
 800a6ca:	0039      	movs	r1, r7
 800a6cc:	9803      	ldr	r0, [sp, #12]
 800a6ce:	f7ff ffa7 	bl	800a620 <__sfputs_r>
 800a6d2:	3001      	adds	r0, #1
 800a6d4:	d100      	bne.n	800a6d8 <_vfiprintf_r+0x94>
 800a6d6:	e0af      	b.n	800a838 <_vfiprintf_r+0x1f4>
 800a6d8:	6963      	ldr	r3, [r4, #20]
 800a6da:	9a05      	ldr	r2, [sp, #20]
 800a6dc:	189b      	adds	r3, r3, r2
 800a6de:	6163      	str	r3, [r4, #20]
 800a6e0:	7833      	ldrb	r3, [r6, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d100      	bne.n	800a6e8 <_vfiprintf_r+0xa4>
 800a6e6:	e0a7      	b.n	800a838 <_vfiprintf_r+0x1f4>
 800a6e8:	2201      	movs	r2, #1
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	4252      	negs	r2, r2
 800a6ee:	6062      	str	r2, [r4, #4]
 800a6f0:	a904      	add	r1, sp, #16
 800a6f2:	3254      	adds	r2, #84	; 0x54
 800a6f4:	1852      	adds	r2, r2, r1
 800a6f6:	1c75      	adds	r5, r6, #1
 800a6f8:	6023      	str	r3, [r4, #0]
 800a6fa:	60e3      	str	r3, [r4, #12]
 800a6fc:	60a3      	str	r3, [r4, #8]
 800a6fe:	7013      	strb	r3, [r2, #0]
 800a700:	65a3      	str	r3, [r4, #88]	; 0x58
 800a702:	4b59      	ldr	r3, [pc, #356]	; (800a868 <_vfiprintf_r+0x224>)
 800a704:	2205      	movs	r2, #5
 800a706:	0018      	movs	r0, r3
 800a708:	7829      	ldrb	r1, [r5, #0]
 800a70a:	9305      	str	r3, [sp, #20]
 800a70c:	f7fd fd73 	bl	80081f6 <memchr>
 800a710:	1c6e      	adds	r6, r5, #1
 800a712:	2800      	cmp	r0, #0
 800a714:	d11f      	bne.n	800a756 <_vfiprintf_r+0x112>
 800a716:	6822      	ldr	r2, [r4, #0]
 800a718:	06d3      	lsls	r3, r2, #27
 800a71a:	d504      	bpl.n	800a726 <_vfiprintf_r+0xe2>
 800a71c:	2353      	movs	r3, #83	; 0x53
 800a71e:	a904      	add	r1, sp, #16
 800a720:	185b      	adds	r3, r3, r1
 800a722:	2120      	movs	r1, #32
 800a724:	7019      	strb	r1, [r3, #0]
 800a726:	0713      	lsls	r3, r2, #28
 800a728:	d504      	bpl.n	800a734 <_vfiprintf_r+0xf0>
 800a72a:	2353      	movs	r3, #83	; 0x53
 800a72c:	a904      	add	r1, sp, #16
 800a72e:	185b      	adds	r3, r3, r1
 800a730:	212b      	movs	r1, #43	; 0x2b
 800a732:	7019      	strb	r1, [r3, #0]
 800a734:	782b      	ldrb	r3, [r5, #0]
 800a736:	2b2a      	cmp	r3, #42	; 0x2a
 800a738:	d016      	beq.n	800a768 <_vfiprintf_r+0x124>
 800a73a:	002e      	movs	r6, r5
 800a73c:	2100      	movs	r1, #0
 800a73e:	200a      	movs	r0, #10
 800a740:	68e3      	ldr	r3, [r4, #12]
 800a742:	7832      	ldrb	r2, [r6, #0]
 800a744:	1c75      	adds	r5, r6, #1
 800a746:	3a30      	subs	r2, #48	; 0x30
 800a748:	2a09      	cmp	r2, #9
 800a74a:	d94e      	bls.n	800a7ea <_vfiprintf_r+0x1a6>
 800a74c:	2900      	cmp	r1, #0
 800a74e:	d111      	bne.n	800a774 <_vfiprintf_r+0x130>
 800a750:	e017      	b.n	800a782 <_vfiprintf_r+0x13e>
 800a752:	3601      	adds	r6, #1
 800a754:	e7af      	b.n	800a6b6 <_vfiprintf_r+0x72>
 800a756:	9b05      	ldr	r3, [sp, #20]
 800a758:	6822      	ldr	r2, [r4, #0]
 800a75a:	1ac0      	subs	r0, r0, r3
 800a75c:	2301      	movs	r3, #1
 800a75e:	4083      	lsls	r3, r0
 800a760:	4313      	orrs	r3, r2
 800a762:	0035      	movs	r5, r6
 800a764:	6023      	str	r3, [r4, #0]
 800a766:	e7cc      	b.n	800a702 <_vfiprintf_r+0xbe>
 800a768:	9b07      	ldr	r3, [sp, #28]
 800a76a:	1d19      	adds	r1, r3, #4
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	9107      	str	r1, [sp, #28]
 800a770:	2b00      	cmp	r3, #0
 800a772:	db01      	blt.n	800a778 <_vfiprintf_r+0x134>
 800a774:	930b      	str	r3, [sp, #44]	; 0x2c
 800a776:	e004      	b.n	800a782 <_vfiprintf_r+0x13e>
 800a778:	425b      	negs	r3, r3
 800a77a:	60e3      	str	r3, [r4, #12]
 800a77c:	2302      	movs	r3, #2
 800a77e:	4313      	orrs	r3, r2
 800a780:	6023      	str	r3, [r4, #0]
 800a782:	7833      	ldrb	r3, [r6, #0]
 800a784:	2b2e      	cmp	r3, #46	; 0x2e
 800a786:	d10a      	bne.n	800a79e <_vfiprintf_r+0x15a>
 800a788:	7873      	ldrb	r3, [r6, #1]
 800a78a:	2b2a      	cmp	r3, #42	; 0x2a
 800a78c:	d135      	bne.n	800a7fa <_vfiprintf_r+0x1b6>
 800a78e:	9b07      	ldr	r3, [sp, #28]
 800a790:	3602      	adds	r6, #2
 800a792:	1d1a      	adds	r2, r3, #4
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	9207      	str	r2, [sp, #28]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	db2b      	blt.n	800a7f4 <_vfiprintf_r+0x1b0>
 800a79c:	9309      	str	r3, [sp, #36]	; 0x24
 800a79e:	4d33      	ldr	r5, [pc, #204]	; (800a86c <_vfiprintf_r+0x228>)
 800a7a0:	2203      	movs	r2, #3
 800a7a2:	0028      	movs	r0, r5
 800a7a4:	7831      	ldrb	r1, [r6, #0]
 800a7a6:	f7fd fd26 	bl	80081f6 <memchr>
 800a7aa:	2800      	cmp	r0, #0
 800a7ac:	d006      	beq.n	800a7bc <_vfiprintf_r+0x178>
 800a7ae:	2340      	movs	r3, #64	; 0x40
 800a7b0:	1b40      	subs	r0, r0, r5
 800a7b2:	4083      	lsls	r3, r0
 800a7b4:	6822      	ldr	r2, [r4, #0]
 800a7b6:	3601      	adds	r6, #1
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	6023      	str	r3, [r4, #0]
 800a7bc:	7831      	ldrb	r1, [r6, #0]
 800a7be:	2206      	movs	r2, #6
 800a7c0:	482b      	ldr	r0, [pc, #172]	; (800a870 <_vfiprintf_r+0x22c>)
 800a7c2:	1c75      	adds	r5, r6, #1
 800a7c4:	7621      	strb	r1, [r4, #24]
 800a7c6:	f7fd fd16 	bl	80081f6 <memchr>
 800a7ca:	2800      	cmp	r0, #0
 800a7cc:	d043      	beq.n	800a856 <_vfiprintf_r+0x212>
 800a7ce:	4b29      	ldr	r3, [pc, #164]	; (800a874 <_vfiprintf_r+0x230>)
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d125      	bne.n	800a820 <_vfiprintf_r+0x1dc>
 800a7d4:	2207      	movs	r2, #7
 800a7d6:	9b07      	ldr	r3, [sp, #28]
 800a7d8:	3307      	adds	r3, #7
 800a7da:	4393      	bics	r3, r2
 800a7dc:	3308      	adds	r3, #8
 800a7de:	9307      	str	r3, [sp, #28]
 800a7e0:	6963      	ldr	r3, [r4, #20]
 800a7e2:	9a04      	ldr	r2, [sp, #16]
 800a7e4:	189b      	adds	r3, r3, r2
 800a7e6:	6163      	str	r3, [r4, #20]
 800a7e8:	e764      	b.n	800a6b4 <_vfiprintf_r+0x70>
 800a7ea:	4343      	muls	r3, r0
 800a7ec:	002e      	movs	r6, r5
 800a7ee:	2101      	movs	r1, #1
 800a7f0:	189b      	adds	r3, r3, r2
 800a7f2:	e7a6      	b.n	800a742 <_vfiprintf_r+0xfe>
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	425b      	negs	r3, r3
 800a7f8:	e7d0      	b.n	800a79c <_vfiprintf_r+0x158>
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	200a      	movs	r0, #10
 800a7fe:	001a      	movs	r2, r3
 800a800:	3601      	adds	r6, #1
 800a802:	6063      	str	r3, [r4, #4]
 800a804:	7831      	ldrb	r1, [r6, #0]
 800a806:	1c75      	adds	r5, r6, #1
 800a808:	3930      	subs	r1, #48	; 0x30
 800a80a:	2909      	cmp	r1, #9
 800a80c:	d903      	bls.n	800a816 <_vfiprintf_r+0x1d2>
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d0c5      	beq.n	800a79e <_vfiprintf_r+0x15a>
 800a812:	9209      	str	r2, [sp, #36]	; 0x24
 800a814:	e7c3      	b.n	800a79e <_vfiprintf_r+0x15a>
 800a816:	4342      	muls	r2, r0
 800a818:	002e      	movs	r6, r5
 800a81a:	2301      	movs	r3, #1
 800a81c:	1852      	adds	r2, r2, r1
 800a81e:	e7f1      	b.n	800a804 <_vfiprintf_r+0x1c0>
 800a820:	aa07      	add	r2, sp, #28
 800a822:	9200      	str	r2, [sp, #0]
 800a824:	0021      	movs	r1, r4
 800a826:	003a      	movs	r2, r7
 800a828:	4b13      	ldr	r3, [pc, #76]	; (800a878 <_vfiprintf_r+0x234>)
 800a82a:	9803      	ldr	r0, [sp, #12]
 800a82c:	f7fc fd00 	bl	8007230 <_printf_float>
 800a830:	9004      	str	r0, [sp, #16]
 800a832:	9b04      	ldr	r3, [sp, #16]
 800a834:	3301      	adds	r3, #1
 800a836:	d1d3      	bne.n	800a7e0 <_vfiprintf_r+0x19c>
 800a838:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a83a:	07db      	lsls	r3, r3, #31
 800a83c:	d405      	bmi.n	800a84a <_vfiprintf_r+0x206>
 800a83e:	89bb      	ldrh	r3, [r7, #12]
 800a840:	059b      	lsls	r3, r3, #22
 800a842:	d402      	bmi.n	800a84a <_vfiprintf_r+0x206>
 800a844:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a846:	f7fd fcd5 	bl	80081f4 <__retarget_lock_release_recursive>
 800a84a:	89bb      	ldrh	r3, [r7, #12]
 800a84c:	065b      	lsls	r3, r3, #25
 800a84e:	d500      	bpl.n	800a852 <_vfiprintf_r+0x20e>
 800a850:	e71d      	b.n	800a68e <_vfiprintf_r+0x4a>
 800a852:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a854:	e71d      	b.n	800a692 <_vfiprintf_r+0x4e>
 800a856:	aa07      	add	r2, sp, #28
 800a858:	9200      	str	r2, [sp, #0]
 800a85a:	0021      	movs	r1, r4
 800a85c:	003a      	movs	r2, r7
 800a85e:	4b06      	ldr	r3, [pc, #24]	; (800a878 <_vfiprintf_r+0x234>)
 800a860:	9803      	ldr	r0, [sp, #12]
 800a862:	f7fc ffab 	bl	80077bc <_printf_i>
 800a866:	e7e3      	b.n	800a830 <_vfiprintf_r+0x1ec>
 800a868:	0800b0a4 	.word	0x0800b0a4
 800a86c:	0800b0aa 	.word	0x0800b0aa
 800a870:	0800b0ae 	.word	0x0800b0ae
 800a874:	08007231 	.word	0x08007231
 800a878:	0800a621 	.word	0x0800a621

0800a87c <__swbuf_r>:
 800a87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a87e:	0006      	movs	r6, r0
 800a880:	000d      	movs	r5, r1
 800a882:	0014      	movs	r4, r2
 800a884:	2800      	cmp	r0, #0
 800a886:	d004      	beq.n	800a892 <__swbuf_r+0x16>
 800a888:	6a03      	ldr	r3, [r0, #32]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d101      	bne.n	800a892 <__swbuf_r+0x16>
 800a88e:	f7fd fb3d 	bl	8007f0c <__sinit>
 800a892:	69a3      	ldr	r3, [r4, #24]
 800a894:	60a3      	str	r3, [r4, #8]
 800a896:	89a3      	ldrh	r3, [r4, #12]
 800a898:	071b      	lsls	r3, r3, #28
 800a89a:	d528      	bpl.n	800a8ee <__swbuf_r+0x72>
 800a89c:	6923      	ldr	r3, [r4, #16]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d025      	beq.n	800a8ee <__swbuf_r+0x72>
 800a8a2:	6923      	ldr	r3, [r4, #16]
 800a8a4:	6820      	ldr	r0, [r4, #0]
 800a8a6:	b2ef      	uxtb	r7, r5
 800a8a8:	1ac0      	subs	r0, r0, r3
 800a8aa:	6963      	ldr	r3, [r4, #20]
 800a8ac:	b2ed      	uxtb	r5, r5
 800a8ae:	4283      	cmp	r3, r0
 800a8b0:	dc05      	bgt.n	800a8be <__swbuf_r+0x42>
 800a8b2:	0021      	movs	r1, r4
 800a8b4:	0030      	movs	r0, r6
 800a8b6:	f7ff fdc7 	bl	800a448 <_fflush_r>
 800a8ba:	2800      	cmp	r0, #0
 800a8bc:	d11d      	bne.n	800a8fa <__swbuf_r+0x7e>
 800a8be:	68a3      	ldr	r3, [r4, #8]
 800a8c0:	3001      	adds	r0, #1
 800a8c2:	3b01      	subs	r3, #1
 800a8c4:	60a3      	str	r3, [r4, #8]
 800a8c6:	6823      	ldr	r3, [r4, #0]
 800a8c8:	1c5a      	adds	r2, r3, #1
 800a8ca:	6022      	str	r2, [r4, #0]
 800a8cc:	701f      	strb	r7, [r3, #0]
 800a8ce:	6963      	ldr	r3, [r4, #20]
 800a8d0:	4283      	cmp	r3, r0
 800a8d2:	d004      	beq.n	800a8de <__swbuf_r+0x62>
 800a8d4:	89a3      	ldrh	r3, [r4, #12]
 800a8d6:	07db      	lsls	r3, r3, #31
 800a8d8:	d507      	bpl.n	800a8ea <__swbuf_r+0x6e>
 800a8da:	2d0a      	cmp	r5, #10
 800a8dc:	d105      	bne.n	800a8ea <__swbuf_r+0x6e>
 800a8de:	0021      	movs	r1, r4
 800a8e0:	0030      	movs	r0, r6
 800a8e2:	f7ff fdb1 	bl	800a448 <_fflush_r>
 800a8e6:	2800      	cmp	r0, #0
 800a8e8:	d107      	bne.n	800a8fa <__swbuf_r+0x7e>
 800a8ea:	0028      	movs	r0, r5
 800a8ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8ee:	0021      	movs	r1, r4
 800a8f0:	0030      	movs	r0, r6
 800a8f2:	f000 f805 	bl	800a900 <__swsetup_r>
 800a8f6:	2800      	cmp	r0, #0
 800a8f8:	d0d3      	beq.n	800a8a2 <__swbuf_r+0x26>
 800a8fa:	2501      	movs	r5, #1
 800a8fc:	426d      	negs	r5, r5
 800a8fe:	e7f4      	b.n	800a8ea <__swbuf_r+0x6e>

0800a900 <__swsetup_r>:
 800a900:	4b30      	ldr	r3, [pc, #192]	; (800a9c4 <__swsetup_r+0xc4>)
 800a902:	b570      	push	{r4, r5, r6, lr}
 800a904:	0005      	movs	r5, r0
 800a906:	6818      	ldr	r0, [r3, #0]
 800a908:	000c      	movs	r4, r1
 800a90a:	2800      	cmp	r0, #0
 800a90c:	d004      	beq.n	800a918 <__swsetup_r+0x18>
 800a90e:	6a03      	ldr	r3, [r0, #32]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d101      	bne.n	800a918 <__swsetup_r+0x18>
 800a914:	f7fd fafa 	bl	8007f0c <__sinit>
 800a918:	230c      	movs	r3, #12
 800a91a:	5ee2      	ldrsh	r2, [r4, r3]
 800a91c:	b293      	uxth	r3, r2
 800a91e:	0711      	lsls	r1, r2, #28
 800a920:	d423      	bmi.n	800a96a <__swsetup_r+0x6a>
 800a922:	06d9      	lsls	r1, r3, #27
 800a924:	d407      	bmi.n	800a936 <__swsetup_r+0x36>
 800a926:	2309      	movs	r3, #9
 800a928:	2001      	movs	r0, #1
 800a92a:	602b      	str	r3, [r5, #0]
 800a92c:	3337      	adds	r3, #55	; 0x37
 800a92e:	4313      	orrs	r3, r2
 800a930:	81a3      	strh	r3, [r4, #12]
 800a932:	4240      	negs	r0, r0
 800a934:	bd70      	pop	{r4, r5, r6, pc}
 800a936:	075b      	lsls	r3, r3, #29
 800a938:	d513      	bpl.n	800a962 <__swsetup_r+0x62>
 800a93a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a93c:	2900      	cmp	r1, #0
 800a93e:	d008      	beq.n	800a952 <__swsetup_r+0x52>
 800a940:	0023      	movs	r3, r4
 800a942:	3344      	adds	r3, #68	; 0x44
 800a944:	4299      	cmp	r1, r3
 800a946:	d002      	beq.n	800a94e <__swsetup_r+0x4e>
 800a948:	0028      	movs	r0, r5
 800a94a:	f7fe fb11 	bl	8008f70 <_free_r>
 800a94e:	2300      	movs	r3, #0
 800a950:	6363      	str	r3, [r4, #52]	; 0x34
 800a952:	2224      	movs	r2, #36	; 0x24
 800a954:	89a3      	ldrh	r3, [r4, #12]
 800a956:	4393      	bics	r3, r2
 800a958:	81a3      	strh	r3, [r4, #12]
 800a95a:	2300      	movs	r3, #0
 800a95c:	6063      	str	r3, [r4, #4]
 800a95e:	6923      	ldr	r3, [r4, #16]
 800a960:	6023      	str	r3, [r4, #0]
 800a962:	2308      	movs	r3, #8
 800a964:	89a2      	ldrh	r2, [r4, #12]
 800a966:	4313      	orrs	r3, r2
 800a968:	81a3      	strh	r3, [r4, #12]
 800a96a:	6923      	ldr	r3, [r4, #16]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d10b      	bne.n	800a988 <__swsetup_r+0x88>
 800a970:	21a0      	movs	r1, #160	; 0xa0
 800a972:	2280      	movs	r2, #128	; 0x80
 800a974:	89a3      	ldrh	r3, [r4, #12]
 800a976:	0089      	lsls	r1, r1, #2
 800a978:	0092      	lsls	r2, r2, #2
 800a97a:	400b      	ands	r3, r1
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d003      	beq.n	800a988 <__swsetup_r+0x88>
 800a980:	0021      	movs	r1, r4
 800a982:	0028      	movs	r0, r5
 800a984:	f000 f892 	bl	800aaac <__smakebuf_r>
 800a988:	220c      	movs	r2, #12
 800a98a:	5ea3      	ldrsh	r3, [r4, r2]
 800a98c:	2001      	movs	r0, #1
 800a98e:	001a      	movs	r2, r3
 800a990:	b299      	uxth	r1, r3
 800a992:	4002      	ands	r2, r0
 800a994:	4203      	tst	r3, r0
 800a996:	d00f      	beq.n	800a9b8 <__swsetup_r+0xb8>
 800a998:	2200      	movs	r2, #0
 800a99a:	60a2      	str	r2, [r4, #8]
 800a99c:	6962      	ldr	r2, [r4, #20]
 800a99e:	4252      	negs	r2, r2
 800a9a0:	61a2      	str	r2, [r4, #24]
 800a9a2:	2000      	movs	r0, #0
 800a9a4:	6922      	ldr	r2, [r4, #16]
 800a9a6:	4282      	cmp	r2, r0
 800a9a8:	d1c4      	bne.n	800a934 <__swsetup_r+0x34>
 800a9aa:	0609      	lsls	r1, r1, #24
 800a9ac:	d5c2      	bpl.n	800a934 <__swsetup_r+0x34>
 800a9ae:	2240      	movs	r2, #64	; 0x40
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	81a3      	strh	r3, [r4, #12]
 800a9b4:	3801      	subs	r0, #1
 800a9b6:	e7bd      	b.n	800a934 <__swsetup_r+0x34>
 800a9b8:	0788      	lsls	r0, r1, #30
 800a9ba:	d400      	bmi.n	800a9be <__swsetup_r+0xbe>
 800a9bc:	6962      	ldr	r2, [r4, #20]
 800a9be:	60a2      	str	r2, [r4, #8]
 800a9c0:	e7ef      	b.n	800a9a2 <__swsetup_r+0xa2>
 800a9c2:	46c0      	nop			; (mov r8, r8)
 800a9c4:	200001dc 	.word	0x200001dc

0800a9c8 <_raise_r>:
 800a9c8:	b570      	push	{r4, r5, r6, lr}
 800a9ca:	0004      	movs	r4, r0
 800a9cc:	000d      	movs	r5, r1
 800a9ce:	291f      	cmp	r1, #31
 800a9d0:	d904      	bls.n	800a9dc <_raise_r+0x14>
 800a9d2:	2316      	movs	r3, #22
 800a9d4:	6003      	str	r3, [r0, #0]
 800a9d6:	2001      	movs	r0, #1
 800a9d8:	4240      	negs	r0, r0
 800a9da:	bd70      	pop	{r4, r5, r6, pc}
 800a9dc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d004      	beq.n	800a9ec <_raise_r+0x24>
 800a9e2:	008a      	lsls	r2, r1, #2
 800a9e4:	189b      	adds	r3, r3, r2
 800a9e6:	681a      	ldr	r2, [r3, #0]
 800a9e8:	2a00      	cmp	r2, #0
 800a9ea:	d108      	bne.n	800a9fe <_raise_r+0x36>
 800a9ec:	0020      	movs	r0, r4
 800a9ee:	f000 f831 	bl	800aa54 <_getpid_r>
 800a9f2:	002a      	movs	r2, r5
 800a9f4:	0001      	movs	r1, r0
 800a9f6:	0020      	movs	r0, r4
 800a9f8:	f000 f81a 	bl	800aa30 <_kill_r>
 800a9fc:	e7ed      	b.n	800a9da <_raise_r+0x12>
 800a9fe:	2000      	movs	r0, #0
 800aa00:	2a01      	cmp	r2, #1
 800aa02:	d0ea      	beq.n	800a9da <_raise_r+0x12>
 800aa04:	1c51      	adds	r1, r2, #1
 800aa06:	d103      	bne.n	800aa10 <_raise_r+0x48>
 800aa08:	2316      	movs	r3, #22
 800aa0a:	3001      	adds	r0, #1
 800aa0c:	6023      	str	r3, [r4, #0]
 800aa0e:	e7e4      	b.n	800a9da <_raise_r+0x12>
 800aa10:	2400      	movs	r4, #0
 800aa12:	0028      	movs	r0, r5
 800aa14:	601c      	str	r4, [r3, #0]
 800aa16:	4790      	blx	r2
 800aa18:	0020      	movs	r0, r4
 800aa1a:	e7de      	b.n	800a9da <_raise_r+0x12>

0800aa1c <raise>:
 800aa1c:	b510      	push	{r4, lr}
 800aa1e:	4b03      	ldr	r3, [pc, #12]	; (800aa2c <raise+0x10>)
 800aa20:	0001      	movs	r1, r0
 800aa22:	6818      	ldr	r0, [r3, #0]
 800aa24:	f7ff ffd0 	bl	800a9c8 <_raise_r>
 800aa28:	bd10      	pop	{r4, pc}
 800aa2a:	46c0      	nop			; (mov r8, r8)
 800aa2c:	200001dc 	.word	0x200001dc

0800aa30 <_kill_r>:
 800aa30:	2300      	movs	r3, #0
 800aa32:	b570      	push	{r4, r5, r6, lr}
 800aa34:	4d06      	ldr	r5, [pc, #24]	; (800aa50 <_kill_r+0x20>)
 800aa36:	0004      	movs	r4, r0
 800aa38:	0008      	movs	r0, r1
 800aa3a:	0011      	movs	r1, r2
 800aa3c:	602b      	str	r3, [r5, #0]
 800aa3e:	f7f8 fad3 	bl	8002fe8 <_kill>
 800aa42:	1c43      	adds	r3, r0, #1
 800aa44:	d103      	bne.n	800aa4e <_kill_r+0x1e>
 800aa46:	682b      	ldr	r3, [r5, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d000      	beq.n	800aa4e <_kill_r+0x1e>
 800aa4c:	6023      	str	r3, [r4, #0]
 800aa4e:	bd70      	pop	{r4, r5, r6, pc}
 800aa50:	200006bc 	.word	0x200006bc

0800aa54 <_getpid_r>:
 800aa54:	b510      	push	{r4, lr}
 800aa56:	f7f8 fac1 	bl	8002fdc <_getpid>
 800aa5a:	bd10      	pop	{r4, pc}

0800aa5c <__swhatbuf_r>:
 800aa5c:	b570      	push	{r4, r5, r6, lr}
 800aa5e:	000e      	movs	r6, r1
 800aa60:	001d      	movs	r5, r3
 800aa62:	230e      	movs	r3, #14
 800aa64:	5ec9      	ldrsh	r1, [r1, r3]
 800aa66:	0014      	movs	r4, r2
 800aa68:	b096      	sub	sp, #88	; 0x58
 800aa6a:	2900      	cmp	r1, #0
 800aa6c:	da0c      	bge.n	800aa88 <__swhatbuf_r+0x2c>
 800aa6e:	89b2      	ldrh	r2, [r6, #12]
 800aa70:	2380      	movs	r3, #128	; 0x80
 800aa72:	0011      	movs	r1, r2
 800aa74:	4019      	ands	r1, r3
 800aa76:	421a      	tst	r2, r3
 800aa78:	d013      	beq.n	800aaa2 <__swhatbuf_r+0x46>
 800aa7a:	2100      	movs	r1, #0
 800aa7c:	3b40      	subs	r3, #64	; 0x40
 800aa7e:	2000      	movs	r0, #0
 800aa80:	6029      	str	r1, [r5, #0]
 800aa82:	6023      	str	r3, [r4, #0]
 800aa84:	b016      	add	sp, #88	; 0x58
 800aa86:	bd70      	pop	{r4, r5, r6, pc}
 800aa88:	466a      	mov	r2, sp
 800aa8a:	f000 f84d 	bl	800ab28 <_fstat_r>
 800aa8e:	2800      	cmp	r0, #0
 800aa90:	dbed      	blt.n	800aa6e <__swhatbuf_r+0x12>
 800aa92:	23f0      	movs	r3, #240	; 0xf0
 800aa94:	9901      	ldr	r1, [sp, #4]
 800aa96:	021b      	lsls	r3, r3, #8
 800aa98:	4019      	ands	r1, r3
 800aa9a:	4b03      	ldr	r3, [pc, #12]	; (800aaa8 <__swhatbuf_r+0x4c>)
 800aa9c:	18c9      	adds	r1, r1, r3
 800aa9e:	424b      	negs	r3, r1
 800aaa0:	4159      	adcs	r1, r3
 800aaa2:	2380      	movs	r3, #128	; 0x80
 800aaa4:	00db      	lsls	r3, r3, #3
 800aaa6:	e7ea      	b.n	800aa7e <__swhatbuf_r+0x22>
 800aaa8:	ffffe000 	.word	0xffffe000

0800aaac <__smakebuf_r>:
 800aaac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aaae:	2602      	movs	r6, #2
 800aab0:	898b      	ldrh	r3, [r1, #12]
 800aab2:	0005      	movs	r5, r0
 800aab4:	000c      	movs	r4, r1
 800aab6:	4233      	tst	r3, r6
 800aab8:	d006      	beq.n	800aac8 <__smakebuf_r+0x1c>
 800aaba:	0023      	movs	r3, r4
 800aabc:	3347      	adds	r3, #71	; 0x47
 800aabe:	6023      	str	r3, [r4, #0]
 800aac0:	6123      	str	r3, [r4, #16]
 800aac2:	2301      	movs	r3, #1
 800aac4:	6163      	str	r3, [r4, #20]
 800aac6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800aac8:	466a      	mov	r2, sp
 800aaca:	ab01      	add	r3, sp, #4
 800aacc:	f7ff ffc6 	bl	800aa5c <__swhatbuf_r>
 800aad0:	9900      	ldr	r1, [sp, #0]
 800aad2:	0007      	movs	r7, r0
 800aad4:	0028      	movs	r0, r5
 800aad6:	f7fb fba3 	bl	8006220 <_malloc_r>
 800aada:	2800      	cmp	r0, #0
 800aadc:	d108      	bne.n	800aaf0 <__smakebuf_r+0x44>
 800aade:	220c      	movs	r2, #12
 800aae0:	5ea3      	ldrsh	r3, [r4, r2]
 800aae2:	059a      	lsls	r2, r3, #22
 800aae4:	d4ef      	bmi.n	800aac6 <__smakebuf_r+0x1a>
 800aae6:	2203      	movs	r2, #3
 800aae8:	4393      	bics	r3, r2
 800aaea:	431e      	orrs	r6, r3
 800aaec:	81a6      	strh	r6, [r4, #12]
 800aaee:	e7e4      	b.n	800aaba <__smakebuf_r+0xe>
 800aaf0:	2380      	movs	r3, #128	; 0x80
 800aaf2:	89a2      	ldrh	r2, [r4, #12]
 800aaf4:	6020      	str	r0, [r4, #0]
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	81a3      	strh	r3, [r4, #12]
 800aafa:	9b00      	ldr	r3, [sp, #0]
 800aafc:	6120      	str	r0, [r4, #16]
 800aafe:	6163      	str	r3, [r4, #20]
 800ab00:	9b01      	ldr	r3, [sp, #4]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d00c      	beq.n	800ab20 <__smakebuf_r+0x74>
 800ab06:	0028      	movs	r0, r5
 800ab08:	230e      	movs	r3, #14
 800ab0a:	5ee1      	ldrsh	r1, [r4, r3]
 800ab0c:	f000 f81e 	bl	800ab4c <_isatty_r>
 800ab10:	2800      	cmp	r0, #0
 800ab12:	d005      	beq.n	800ab20 <__smakebuf_r+0x74>
 800ab14:	2303      	movs	r3, #3
 800ab16:	89a2      	ldrh	r2, [r4, #12]
 800ab18:	439a      	bics	r2, r3
 800ab1a:	3b02      	subs	r3, #2
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	81a3      	strh	r3, [r4, #12]
 800ab20:	89a3      	ldrh	r3, [r4, #12]
 800ab22:	433b      	orrs	r3, r7
 800ab24:	81a3      	strh	r3, [r4, #12]
 800ab26:	e7ce      	b.n	800aac6 <__smakebuf_r+0x1a>

0800ab28 <_fstat_r>:
 800ab28:	2300      	movs	r3, #0
 800ab2a:	b570      	push	{r4, r5, r6, lr}
 800ab2c:	4d06      	ldr	r5, [pc, #24]	; (800ab48 <_fstat_r+0x20>)
 800ab2e:	0004      	movs	r4, r0
 800ab30:	0008      	movs	r0, r1
 800ab32:	0011      	movs	r1, r2
 800ab34:	602b      	str	r3, [r5, #0]
 800ab36:	f7f8 fab6 	bl	80030a6 <_fstat>
 800ab3a:	1c43      	adds	r3, r0, #1
 800ab3c:	d103      	bne.n	800ab46 <_fstat_r+0x1e>
 800ab3e:	682b      	ldr	r3, [r5, #0]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d000      	beq.n	800ab46 <_fstat_r+0x1e>
 800ab44:	6023      	str	r3, [r4, #0]
 800ab46:	bd70      	pop	{r4, r5, r6, pc}
 800ab48:	200006bc 	.word	0x200006bc

0800ab4c <_isatty_r>:
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	b570      	push	{r4, r5, r6, lr}
 800ab50:	4d06      	ldr	r5, [pc, #24]	; (800ab6c <_isatty_r+0x20>)
 800ab52:	0004      	movs	r4, r0
 800ab54:	0008      	movs	r0, r1
 800ab56:	602b      	str	r3, [r5, #0]
 800ab58:	f7f8 fab3 	bl	80030c2 <_isatty>
 800ab5c:	1c43      	adds	r3, r0, #1
 800ab5e:	d103      	bne.n	800ab68 <_isatty_r+0x1c>
 800ab60:	682b      	ldr	r3, [r5, #0]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d000      	beq.n	800ab68 <_isatty_r+0x1c>
 800ab66:	6023      	str	r3, [r4, #0]
 800ab68:	bd70      	pop	{r4, r5, r6, pc}
 800ab6a:	46c0      	nop			; (mov r8, r8)
 800ab6c:	200006bc 	.word	0x200006bc

0800ab70 <_init>:
 800ab70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab72:	46c0      	nop			; (mov r8, r8)
 800ab74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab76:	bc08      	pop	{r3}
 800ab78:	469e      	mov	lr, r3
 800ab7a:	4770      	bx	lr

0800ab7c <_fini>:
 800ab7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab7e:	46c0      	nop			; (mov r8, r8)
 800ab80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab82:	bc08      	pop	{r3}
 800ab84:	469e      	mov	lr, r3
 800ab86:	4770      	bx	lr
