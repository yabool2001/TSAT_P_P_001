
TSAT_P_P_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000124b4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e34  08012570  08012570  00022570  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080143a4  080143a4  000306e0  2**0
                  CONTENTS
  4 .ARM          00000008  080143a4  080143a4  000243a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080143ac  080143ac  000306e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080143ac  080143ac  000243ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080143b4  080143b4  000243b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006e0  20000000  080143b8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000768  200006e0  08014a98  000306e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e48  08014a98  00030e48  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000306e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030708  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c417  00000000  00000000  0003074b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b00  00000000  00000000  0004cb62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a08  00000000  00000000  00050668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001462  00000000  00000000  00052070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d9d5  00000000  00000000  000534d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d4ff  00000000  00000000  00070ea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b1455  00000000  00000000  0008e3a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007a7c  00000000  00000000  0013f7fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00147278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006e0 	.word	0x200006e0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08012558 	.word	0x08012558

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006e4 	.word	0x200006e4
 8000100:	08012558 	.word	0x08012558

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b3 	bl	80015a4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f803 	bl	8001454 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a5 	bl	80015a4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f89b 	bl	80015a4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f82b 	bl	80014d8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f821 	bl	80014d8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f8a4 	bl	8000620 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_d2uiz>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	2200      	movs	r2, #0
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__aeabi_d2uiz+0x38>)
 8000546:	0004      	movs	r4, r0
 8000548:	000d      	movs	r5, r1
 800054a:	f7ff ffa1 	bl	8000490 <__aeabi_dcmpge>
 800054e:	2800      	cmp	r0, #0
 8000550:	d104      	bne.n	800055c <__aeabi_d2uiz+0x1c>
 8000552:	0020      	movs	r0, r4
 8000554:	0029      	movs	r1, r5
 8000556:	f001 feeb 	bl	8002330 <__aeabi_d2iz>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__aeabi_d2uiz+0x38>)
 800055e:	2200      	movs	r2, #0
 8000560:	0020      	movs	r0, r4
 8000562:	0029      	movs	r1, r5
 8000564:	f001 fb44 	bl	8001bf0 <__aeabi_dsub>
 8000568:	f001 fee2 	bl	8002330 <__aeabi_d2iz>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	061b      	lsls	r3, r3, #24
 8000570:	469c      	mov	ip, r3
 8000572:	4460      	add	r0, ip
 8000574:	e7f1      	b.n	800055a <__aeabi_d2uiz+0x1a>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	41e00000 	.word	0x41e00000

0800057c <__aeabi_d2lz>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	0005      	movs	r5, r0
 8000580:	000c      	movs	r4, r1
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0028      	movs	r0, r5
 8000588:	0021      	movs	r1, r4
 800058a:	f7ff ff63 	bl	8000454 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x28>
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e1      	adds	r1, r4, r3
 80005aa:	0028      	movs	r0, r5
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x22>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 f853 	bl	800166c <__aeabi_dmul>
 80005c6:	f7ff ffbb 	bl	8000540 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f001 ff16 	bl	80023fc <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 f84a 	bl	800166c <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dsub>
 80005e4:	f7ff ffac 	bl	8000540 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f001 fecf 	bl	800239c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 f833 	bl	800166c <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f001 fef6 	bl	80023fc <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 f8d0 	bl	80007b8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f001 ffa6 	bl	8002590 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f001 ffa1 	bl	8002590 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_dadd>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0004      	movs	r4, r0
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	001f      	movs	r7, r3
 80007c6:	030b      	lsls	r3, r1, #12
 80007c8:	0010      	movs	r0, r2
 80007ca:	004e      	lsls	r6, r1, #1
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0fcd      	lsrs	r5, r1, #31
 80007d0:	0f61      	lsrs	r1, r4, #29
 80007d2:	007a      	lsls	r2, r7, #1
 80007d4:	4319      	orrs	r1, r3
 80007d6:	00e3      	lsls	r3, r4, #3
 80007d8:	033c      	lsls	r4, r7, #12
 80007da:	0fff      	lsrs	r7, r7, #31
 80007dc:	46bc      	mov	ip, r7
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0f47      	lsrs	r7, r0, #29
 80007e2:	4327      	orrs	r7, r4
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	0d52      	lsrs	r2, r2, #21
 80007e8:	00c0      	lsls	r0, r0, #3
 80007ea:	46b9      	mov	r9, r7
 80007ec:	4680      	mov	r8, r0
 80007ee:	1ab7      	subs	r7, r6, r2
 80007f0:	4565      	cmp	r5, ip
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x3e>
 80007f4:	e09b      	b.n	800092e <__aeabi_dadd+0x176>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x44>
 80007fa:	e084      	b.n	8000906 <__aeabi_dadd+0x14e>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x4a>
 8000800:	e0be      	b.n	8000980 <__aeabi_dadd+0x1c8>
 8000802:	4ac8      	ldr	r2, [pc, #800]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000804:	4296      	cmp	r6, r2
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x52>
 8000808:	e124      	b.n	8000a54 <__aeabi_dadd+0x29c>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	464c      	mov	r4, r9
 800080e:	0412      	lsls	r2, r2, #16
 8000810:	4314      	orrs	r4, r2
 8000812:	46a1      	mov	r9, r4
 8000814:	2f38      	cmp	r7, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x62>
 8000818:	e167      	b.n	8000aea <__aeabi_dadd+0x332>
 800081a:	2f1f      	cmp	r7, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x68>
 800081e:	e1d6      	b.n	8000bce <__aeabi_dadd+0x416>
 8000820:	2220      	movs	r2, #32
 8000822:	464c      	mov	r4, r9
 8000824:	1bd2      	subs	r2, r2, r7
 8000826:	4094      	lsls	r4, r2
 8000828:	46a2      	mov	sl, r4
 800082a:	4644      	mov	r4, r8
 800082c:	40fc      	lsrs	r4, r7
 800082e:	0020      	movs	r0, r4
 8000830:	4654      	mov	r4, sl
 8000832:	4304      	orrs	r4, r0
 8000834:	4640      	mov	r0, r8
 8000836:	4090      	lsls	r0, r2
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	464a      	mov	r2, r9
 800083e:	40fa      	lsrs	r2, r7
 8000840:	4304      	orrs	r4, r0
 8000842:	1a89      	subs	r1, r1, r2
 8000844:	1b1c      	subs	r4, r3, r4
 8000846:	42a3      	cmp	r3, r4
 8000848:	4192      	sbcs	r2, r2
 800084a:	4252      	negs	r2, r2
 800084c:	1a8b      	subs	r3, r1, r2
 800084e:	469a      	mov	sl, r3
 8000850:	4653      	mov	r3, sl
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dadd+0xa0>
 8000856:	e0d4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000858:	4653      	mov	r3, sl
 800085a:	025a      	lsls	r2, r3, #9
 800085c:	0a53      	lsrs	r3, r2, #9
 800085e:	469a      	mov	sl, r3
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0xb0>
 8000866:	e104      	b.n	8000a72 <__aeabi_dadd+0x2ba>
 8000868:	4650      	mov	r0, sl
 800086a:	f001 fe73 	bl	8002554 <__clzsi2>
 800086e:	0003      	movs	r3, r0
 8000870:	3b08      	subs	r3, #8
 8000872:	2220      	movs	r2, #32
 8000874:	0020      	movs	r0, r4
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	4651      	mov	r1, sl
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4099      	lsls	r1, r3
 800087e:	0002      	movs	r2, r0
 8000880:	409c      	lsls	r4, r3
 8000882:	430a      	orrs	r2, r1
 8000884:	42b3      	cmp	r3, r6
 8000886:	da00      	bge.n	800088a <__aeabi_dadd+0xd2>
 8000888:	e102      	b.n	8000a90 <__aeabi_dadd+0x2d8>
 800088a:	1b9b      	subs	r3, r3, r6
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	291f      	cmp	r1, #31
 8000890:	dd00      	ble.n	8000894 <__aeabi_dadd+0xdc>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_dadd+0x22c>
 8000894:	2320      	movs	r3, #32
 8000896:	0010      	movs	r0, r2
 8000898:	0026      	movs	r6, r4
 800089a:	1a5b      	subs	r3, r3, r1
 800089c:	409c      	lsls	r4, r3
 800089e:	4098      	lsls	r0, r3
 80008a0:	40ce      	lsrs	r6, r1
 80008a2:	40ca      	lsrs	r2, r1
 80008a4:	1e63      	subs	r3, r4, #1
 80008a6:	419c      	sbcs	r4, r3
 80008a8:	4330      	orrs	r0, r6
 80008aa:	4692      	mov	sl, r2
 80008ac:	2600      	movs	r6, #0
 80008ae:	4304      	orrs	r4, r0
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d009      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008bc:	1d23      	adds	r3, r4, #4
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41a4      	sbcs	r4, r4
 80008c2:	4264      	negs	r4, r4
 80008c4:	44a2      	add	sl, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	4653      	mov	r3, sl
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_dadd+0x118>
 80008ce:	e09b      	b.n	8000a08 <__aeabi_dadd+0x250>
 80008d0:	4b94      	ldr	r3, [pc, #592]	; (8000b24 <__aeabi_dadd+0x36c>)
 80008d2:	3601      	adds	r6, #1
 80008d4:	429e      	cmp	r6, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x122>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x294>
 80008da:	4653      	mov	r3, sl
 80008dc:	4992      	ldr	r1, [pc, #584]	; (8000b28 <__aeabi_dadd+0x370>)
 80008de:	08e4      	lsrs	r4, r4, #3
 80008e0:	400b      	ands	r3, r1
 80008e2:	0019      	movs	r1, r3
 80008e4:	075b      	lsls	r3, r3, #29
 80008e6:	4323      	orrs	r3, r4
 80008e8:	0572      	lsls	r2, r6, #21
 80008ea:	024c      	lsls	r4, r1, #9
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	0512      	lsls	r2, r2, #20
 80008f2:	07ed      	lsls	r5, r5, #31
 80008f4:	4322      	orrs	r2, r4
 80008f6:	432a      	orrs	r2, r5
 80008f8:	0018      	movs	r0, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	bce0      	pop	{r5, r6, r7}
 80008fe:	46ba      	mov	sl, r7
 8000900:	46b1      	mov	r9, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000906:	2f00      	cmp	r7, #0
 8000908:	d048      	beq.n	800099c <__aeabi_dadd+0x1e4>
 800090a:	1b97      	subs	r7, r2, r6
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x15a>
 8000910:	e10e      	b.n	8000b30 <__aeabi_dadd+0x378>
 8000912:	000c      	movs	r4, r1
 8000914:	431c      	orrs	r4, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x162>
 8000918:	e1b7      	b.n	8000c8a <__aeabi_dadd+0x4d2>
 800091a:	1e7c      	subs	r4, r7, #1
 800091c:	2f01      	cmp	r7, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x16a>
 8000920:	e226      	b.n	8000d70 <__aeabi_dadd+0x5b8>
 8000922:	4d80      	ldr	r5, [pc, #512]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000924:	42af      	cmp	r7, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x172>
 8000928:	e1d5      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 800092a:	0027      	movs	r7, r4
 800092c:	e107      	b.n	8000b3e <__aeabi_dadd+0x386>
 800092e:	2f00      	cmp	r7, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x17c>
 8000932:	e0b2      	b.n	8000a9a <__aeabi_dadd+0x2e2>
 8000934:	2a00      	cmp	r2, #0
 8000936:	d047      	beq.n	80009c8 <__aeabi_dadd+0x210>
 8000938:	4a7a      	ldr	r2, [pc, #488]	; (8000b24 <__aeabi_dadd+0x36c>)
 800093a:	4296      	cmp	r6, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x188>
 800093e:	e089      	b.n	8000a54 <__aeabi_dadd+0x29c>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	464c      	mov	r4, r9
 8000944:	0412      	lsls	r2, r2, #16
 8000946:	4314      	orrs	r4, r2
 8000948:	46a1      	mov	r9, r4
 800094a:	2f38      	cmp	r7, #56	; 0x38
 800094c:	dc6b      	bgt.n	8000a26 <__aeabi_dadd+0x26e>
 800094e:	2f1f      	cmp	r7, #31
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x19c>
 8000952:	e16e      	b.n	8000c32 <__aeabi_dadd+0x47a>
 8000954:	003a      	movs	r2, r7
 8000956:	4648      	mov	r0, r9
 8000958:	3a20      	subs	r2, #32
 800095a:	40d0      	lsrs	r0, r2
 800095c:	4684      	mov	ip, r0
 800095e:	2f20      	cmp	r7, #32
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x1ba>
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	4648      	mov	r0, r9
 8000966:	1bd2      	subs	r2, r2, r7
 8000968:	4090      	lsls	r0, r2
 800096a:	0002      	movs	r2, r0
 800096c:	4640      	mov	r0, r8
 800096e:	4310      	orrs	r0, r2
 8000970:	4680      	mov	r8, r0
 8000972:	4640      	mov	r0, r8
 8000974:	1e42      	subs	r2, r0, #1
 8000976:	4190      	sbcs	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	0004      	movs	r4, r0
 800097c:	4314      	orrs	r4, r2
 800097e:	e057      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000980:	464a      	mov	r2, r9
 8000982:	4302      	orrs	r2, r0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x1d0>
 8000986:	e103      	b.n	8000b90 <__aeabi_dadd+0x3d8>
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	2f01      	cmp	r7, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x1d8>
 800098e:	e193      	b.n	8000cb8 <__aeabi_dadd+0x500>
 8000990:	4c64      	ldr	r4, [pc, #400]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000992:	42a7      	cmp	r7, r4
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x1e0>
 8000996:	e18a      	b.n	8000cae <__aeabi_dadd+0x4f6>
 8000998:	0017      	movs	r7, r2
 800099a:	e73b      	b.n	8000814 <__aeabi_dadd+0x5c>
 800099c:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <__aeabi_dadd+0x374>)
 800099e:	1c72      	adds	r2, r6, #1
 80009a0:	4222      	tst	r2, r4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x1ee>
 80009a4:	e0e0      	b.n	8000b68 <__aeabi_dadd+0x3b0>
 80009a6:	000a      	movs	r2, r1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x1f8>
 80009ae:	e174      	b.n	8000c9a <__aeabi_dadd+0x4e2>
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x1fe>
 80009b4:	e1d0      	b.n	8000d58 <__aeabi_dadd+0x5a0>
 80009b6:	464a      	mov	r2, r9
 80009b8:	4302      	orrs	r2, r0
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x206>
 80009bc:	e1e3      	b.n	8000d86 <__aeabi_dadd+0x5ce>
 80009be:	074a      	lsls	r2, r1, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c9      	lsrs	r1, r1, #3
 80009c6:	e029      	b.n	8000a1c <__aeabi_dadd+0x264>
 80009c8:	464a      	mov	r2, r9
 80009ca:	4302      	orrs	r2, r0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x218>
 80009ce:	e17d      	b.n	8000ccc <__aeabi_dadd+0x514>
 80009d0:	1e7a      	subs	r2, r7, #1
 80009d2:	2f01      	cmp	r7, #1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x220>
 80009d6:	e0e0      	b.n	8000b9a <__aeabi_dadd+0x3e2>
 80009d8:	4c52      	ldr	r4, [pc, #328]	; (8000b24 <__aeabi_dadd+0x36c>)
 80009da:	42a7      	cmp	r7, r4
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x228>
 80009de:	e166      	b.n	8000cae <__aeabi_dadd+0x4f6>
 80009e0:	0017      	movs	r7, r2
 80009e2:	e7b2      	b.n	800094a <__aeabi_dadd+0x192>
 80009e4:	0010      	movs	r0, r2
 80009e6:	3b1f      	subs	r3, #31
 80009e8:	40d8      	lsrs	r0, r3
 80009ea:	2920      	cmp	r1, #32
 80009ec:	d003      	beq.n	80009f6 <__aeabi_dadd+0x23e>
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	409a      	lsls	r2, r3
 80009f4:	4314      	orrs	r4, r2
 80009f6:	1e63      	subs	r3, r4, #1
 80009f8:	419c      	sbcs	r4, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	2600      	movs	r6, #0
 80009fe:	469a      	mov	sl, r3
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0763      	lsls	r3, r4, #29
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x250>
 8000a06:	e755      	b.n	80008b4 <__aeabi_dadd+0xfc>
 8000a08:	4652      	mov	r2, sl
 8000a0a:	08e3      	lsrs	r3, r4, #3
 8000a0c:	0752      	lsls	r2, r2, #29
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4652      	mov	r2, sl
 8000a12:	0037      	movs	r7, r6
 8000a14:	08d1      	lsrs	r1, r2, #3
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a18:	4297      	cmp	r7, r2
 8000a1a:	d01f      	beq.n	8000a5c <__aeabi_dadd+0x2a4>
 8000a1c:	0309      	lsls	r1, r1, #12
 8000a1e:	057a      	lsls	r2, r7, #21
 8000a20:	0b0c      	lsrs	r4, r1, #12
 8000a22:	0d52      	lsrs	r2, r2, #21
 8000a24:	e764      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a26:	4642      	mov	r2, r8
 8000a28:	464c      	mov	r4, r9
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	18e4      	adds	r4, r4, r3
 8000a32:	429c      	cmp	r4, r3
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	448a      	add	sl, r1
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	d5df      	bpl.n	8000a02 <__aeabi_dadd+0x24a>
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a44:	3601      	adds	r6, #1
 8000a46:	429e      	cmp	r6, r3
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x294>
 8000a4a:	e0b3      	b.n	8000bb4 <__aeabi_dadd+0x3fc>
 8000a4c:	0032      	movs	r2, r6
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2300      	movs	r3, #0
 8000a52:	e74d      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x2ac>
 8000a62:	e200      	b.n	8000e66 <__aeabi_dadd+0x6ae>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	430c      	orrs	r4, r1
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a6e:	0b24      	lsrs	r4, r4, #12
 8000a70:	e73e      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a72:	0020      	movs	r0, r4
 8000a74:	f001 fd6e 	bl	8002554 <__clzsi2>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	dc00      	bgt.n	8000a82 <__aeabi_dadd+0x2ca>
 8000a80:	e6f7      	b.n	8000872 <__aeabi_dadd+0xba>
 8000a82:	0022      	movs	r2, r4
 8000a84:	3808      	subs	r0, #8
 8000a86:	4082      	lsls	r2, r0
 8000a88:	2400      	movs	r4, #0
 8000a8a:	42b3      	cmp	r3, r6
 8000a8c:	db00      	blt.n	8000a90 <__aeabi_dadd+0x2d8>
 8000a8e:	e6fc      	b.n	800088a <__aeabi_dadd+0xd2>
 8000a90:	1af6      	subs	r6, r6, r3
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <__aeabi_dadd+0x370>)
 8000a94:	401a      	ands	r2, r3
 8000a96:	4692      	mov	sl, r2
 8000a98:	e70a      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d02b      	beq.n	8000af6 <__aeabi_dadd+0x33e>
 8000a9e:	1b97      	subs	r7, r2, r6
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x2ee>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_dadd+0x460>
 8000aa6:	4c1f      	ldr	r4, [pc, #124]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x2f6>
 8000aac:	e11c      	b.n	8000ce8 <__aeabi_dadd+0x530>
 8000aae:	2480      	movs	r4, #128	; 0x80
 8000ab0:	0424      	lsls	r4, r4, #16
 8000ab2:	4321      	orrs	r1, r4
 8000ab4:	2f38      	cmp	r7, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x302>
 8000ab8:	e11e      	b.n	8000cf8 <__aeabi_dadd+0x540>
 8000aba:	2f1f      	cmp	r7, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x308>
 8000abe:	e19e      	b.n	8000dfe <__aeabi_dadd+0x646>
 8000ac0:	2620      	movs	r6, #32
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	1bf6      	subs	r6, r6, r7
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	40b3      	lsls	r3, r6
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	40f8      	lsrs	r0, r7
 8000ace:	1e5e      	subs	r6, r3, #1
 8000ad0:	41b3      	sbcs	r3, r6
 8000ad2:	40f9      	lsrs	r1, r7
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	4489      	add	r9, r1
 8000ada:	4444      	add	r4, r8
 8000adc:	4544      	cmp	r4, r8
 8000ade:	419b      	sbcs	r3, r3
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	444b      	add	r3, r9
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	0016      	movs	r6, r2
 8000ae8:	e7a8      	b.n	8000a3c <__aeabi_dadd+0x284>
 8000aea:	4642      	mov	r2, r8
 8000aec:	464c      	mov	r4, r9
 8000aee:	4314      	orrs	r4, r2
 8000af0:	1e62      	subs	r2, r4, #1
 8000af2:	4194      	sbcs	r4, r2
 8000af4:	e6a6      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__aeabi_dadd+0x374>)
 8000af8:	1c72      	adds	r2, r6, #1
 8000afa:	4222      	tst	r2, r4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dadd+0x348>
 8000afe:	e0a8      	b.n	8000c52 <__aeabi_dadd+0x49a>
 8000b00:	000a      	movs	r2, r1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x352>
 8000b08:	e10a      	b.n	8000d20 <__aeabi_dadd+0x568>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x358>
 8000b0e:	e15e      	b.n	8000dce <__aeabi_dadd+0x616>
 8000b10:	464a      	mov	r2, r9
 8000b12:	4302      	orrs	r2, r0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x360>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x624>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e77c      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	4ccf      	ldr	r4, [pc, #828]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x380>
 8000b36:	e0ce      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	0424      	lsls	r4, r4, #16
 8000b3c:	4321      	orrs	r1, r4
 8000b3e:	2f38      	cmp	r7, #56	; 0x38
 8000b40:	dc5b      	bgt.n	8000bfa <__aeabi_dadd+0x442>
 8000b42:	2f1f      	cmp	r7, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x390>
 8000b46:	e0dc      	b.n	8000d02 <__aeabi_dadd+0x54a>
 8000b48:	2520      	movs	r5, #32
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	1bed      	subs	r5, r5, r7
 8000b4e:	001e      	movs	r6, r3
 8000b50:	40ab      	lsls	r3, r5
 8000b52:	40ac      	lsls	r4, r5
 8000b54:	40fe      	lsrs	r6, r7
 8000b56:	1e5d      	subs	r5, r3, #1
 8000b58:	41ab      	sbcs	r3, r5
 8000b5a:	4334      	orrs	r4, r6
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	4699      	mov	r9, r3
 8000b66:	e04c      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1a1c      	subs	r4, r3, r0
 8000b6c:	1a88      	subs	r0, r1, r2
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	4252      	negs	r2, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	0002      	movs	r2, r0
 8000b78:	4650      	mov	r0, sl
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	d478      	bmi.n	8000c74 <__aeabi_dadd+0x4bc>
 8000b82:	4653      	mov	r3, sl
 8000b84:	4323      	orrs	r3, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x3d2>
 8000b88:	e66a      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	e745      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e73d      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000b9a:	181c      	adds	r4, r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	419b      	sbcs	r3, r3
 8000ba0:	4449      	add	r1, r9
 8000ba2:	468a      	mov	sl, r1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	449a      	add	sl, r3
 8000ba8:	4653      	mov	r3, sl
 8000baa:	2601      	movs	r6, #1
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_dadd+0x3fa>
 8000bb0:	e727      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000bb2:	2602      	movs	r6, #2
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	4baf      	ldr	r3, [pc, #700]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	4021      	ands	r1, r4
 8000bc0:	0862      	lsrs	r2, r4, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	07dc      	lsls	r4, r3, #31
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	469a      	mov	sl, r3
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	e670      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	464c      	mov	r4, r9
 8000bd2:	3a20      	subs	r2, #32
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	46a4      	mov	ip, r4
 8000bd8:	2f20      	cmp	r7, #32
 8000bda:	d007      	beq.n	8000bec <__aeabi_dadd+0x434>
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	4648      	mov	r0, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4090      	lsls	r0, r2
 8000be4:	0002      	movs	r2, r0
 8000be6:	4640      	mov	r0, r8
 8000be8:	4310      	orrs	r0, r2
 8000bea:	4680      	mov	r8, r0
 8000bec:	4640      	mov	r0, r8
 8000bee:	1e42      	subs	r2, r0, #1
 8000bf0:	4190      	sbcs	r0, r2
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	0004      	movs	r4, r0
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	e624      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000bfa:	4319      	orrs	r1, r3
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	4643      	mov	r3, r8
 8000c04:	1b1c      	subs	r4, r3, r4
 8000c06:	45a0      	cmp	r8, r4
 8000c08:	419b      	sbcs	r3, r3
 8000c0a:	4649      	mov	r1, r9
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	4665      	mov	r5, ip
 8000c14:	0016      	movs	r6, r2
 8000c16:	e61b      	b.n	8000850 <__aeabi_dadd+0x98>
 8000c18:	000c      	movs	r4, r1
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x468>
 8000c1e:	e0c7      	b.n	8000db0 <__aeabi_dadd+0x5f8>
 8000c20:	1e7c      	subs	r4, r7, #1
 8000c22:	2f01      	cmp	r7, #1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x470>
 8000c26:	e0f9      	b.n	8000e1c <__aeabi_dadd+0x664>
 8000c28:	4e91      	ldr	r6, [pc, #580]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c2a:	42b7      	cmp	r7, r6
 8000c2c:	d05c      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000c2e:	0027      	movs	r7, r4
 8000c30:	e740      	b.n	8000ab4 <__aeabi_dadd+0x2fc>
 8000c32:	2220      	movs	r2, #32
 8000c34:	464c      	mov	r4, r9
 8000c36:	4640      	mov	r0, r8
 8000c38:	1bd2      	subs	r2, r2, r7
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	40f8      	lsrs	r0, r7
 8000c3e:	4304      	orrs	r4, r0
 8000c40:	4640      	mov	r0, r8
 8000c42:	4090      	lsls	r0, r2
 8000c44:	1e42      	subs	r2, r0, #1
 8000c46:	4190      	sbcs	r0, r2
 8000c48:	464a      	mov	r2, r9
 8000c4a:	40fa      	lsrs	r2, r7
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	1889      	adds	r1, r1, r2
 8000c50:	e6ee      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000c52:	4c87      	ldr	r4, [pc, #540]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x4a2>
 8000c58:	e6f9      	b.n	8000a4e <__aeabi_dadd+0x296>
 8000c5a:	1818      	adds	r0, r3, r0
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	419b      	sbcs	r3, r3
 8000c60:	4449      	add	r1, r9
 8000c62:	425b      	negs	r3, r3
 8000c64:	18cb      	adds	r3, r1, r3
 8000c66:	07dc      	lsls	r4, r3, #31
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	0016      	movs	r6, r2
 8000c70:	4304      	orrs	r4, r0
 8000c72:	e6c6      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000c74:	4642      	mov	r2, r8
 8000c76:	1ad4      	subs	r4, r2, r3
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	4180      	sbcs	r0, r0
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4240      	negs	r0, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	1a0b      	subs	r3, r1, r0
 8000c84:	469a      	mov	sl, r3
 8000c86:	4665      	mov	r5, ip
 8000c88:	e5ea      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	075b      	lsls	r3, r3, #29
 8000c92:	4665      	mov	r5, ip
 8000c94:	4303      	orrs	r3, r0
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	e6bd      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x4e8>
 8000c9e:	e08e      	b.n	8000dbe <__aeabi_dadd+0x606>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	d117      	bne.n	8000cd6 <__aeabi_dadd+0x51e>
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	2500      	movs	r5, #0
 8000caa:	0309      	lsls	r1, r1, #12
 8000cac:	e6da      	b.n	8000a64 <__aeabi_dadd+0x2ac>
 8000cae:	074a      	lsls	r2, r1, #29
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	e6d1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	464a      	mov	r2, r9
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	1a89      	subs	r1, r1, r2
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	2601      	movs	r6, #1
 8000cca:	e5c1      	b.n	8000850 <__aeabi_dadd+0x98>
 8000ccc:	074a      	lsls	r2, r1, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	e69f      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	08d8      	lsrs	r0, r3, #3
 8000cda:	464b      	mov	r3, r9
 8000cdc:	464a      	mov	r2, r9
 8000cde:	075b      	lsls	r3, r3, #29
 8000ce0:	4665      	mov	r5, ip
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	08d1      	lsrs	r1, r2, #3
 8000ce6:	e6b9      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	08d8      	lsrs	r0, r3, #3
 8000cec:	464b      	mov	r3, r9
 8000cee:	464a      	mov	r2, r9
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	08d1      	lsrs	r1, r2, #3
 8000cf6:	e6b1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cf8:	4319      	orrs	r1, r3
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	e6eb      	b.n	8000ada <__aeabi_dadd+0x322>
 8000d02:	003c      	movs	r4, r7
 8000d04:	000d      	movs	r5, r1
 8000d06:	3c20      	subs	r4, #32
 8000d08:	40e5      	lsrs	r5, r4
 8000d0a:	2f20      	cmp	r7, #32
 8000d0c:	d003      	beq.n	8000d16 <__aeabi_dadd+0x55e>
 8000d0e:	2440      	movs	r4, #64	; 0x40
 8000d10:	1be4      	subs	r4, r4, r7
 8000d12:	40a1      	lsls	r1, r4
 8000d14:	430b      	orrs	r3, r1
 8000d16:	001c      	movs	r4, r3
 8000d18:	1e63      	subs	r3, r4, #1
 8000d1a:	419c      	sbcs	r4, r3
 8000d1c:	432c      	orrs	r4, r5
 8000d1e:	e770      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d0e1      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000d24:	464a      	mov	r2, r9
 8000d26:	4302      	orrs	r2, r0
 8000d28:	d0c1      	beq.n	8000cae <__aeabi_dadd+0x4f6>
 8000d2a:	074a      	lsls	r2, r1, #29
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	08c9      	lsrs	r1, r1, #3
 8000d34:	0312      	lsls	r2, r2, #12
 8000d36:	4211      	tst	r1, r2
 8000d38:	d008      	beq.n	8000d4c <__aeabi_dadd+0x594>
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	08c4      	lsrs	r4, r0, #3
 8000d3e:	4214      	tst	r4, r2
 8000d40:	d104      	bne.n	8000d4c <__aeabi_dadd+0x594>
 8000d42:	4643      	mov	r3, r8
 8000d44:	0021      	movs	r1, r4
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	0f5a      	lsrs	r2, r3, #29
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e681      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dadd+0x5a8>
 8000d5e:	e714      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000d60:	464b      	mov	r3, r9
 8000d62:	464a      	mov	r2, r9
 8000d64:	08c0      	lsrs	r0, r0, #3
 8000d66:	075b      	lsls	r3, r3, #29
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4303      	orrs	r3, r0
 8000d6c:	08d1      	lsrs	r1, r2, #3
 8000d6e:	e655      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000d70:	1ac4      	subs	r4, r0, r3
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	464b      	mov	r3, r9
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a59      	subs	r1, r3, r1
 8000d7c:	1a0b      	subs	r3, r1, r0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4665      	mov	r5, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	e564      	b.n	8000850 <__aeabi_dadd+0x98>
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	464a      	mov	r2, r9
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	1a8a      	subs	r2, r1, r2
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a12      	subs	r2, r2, r0
 8000d94:	4692      	mov	sl, r2
 8000d96:	0212      	lsls	r2, r2, #8
 8000d98:	d549      	bpl.n	8000e2e <__aeabi_dadd+0x676>
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	1ad4      	subs	r4, r2, r3
 8000d9e:	45a0      	cmp	r8, r4
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	464b      	mov	r3, r9
 8000da4:	4240      	negs	r0, r0
 8000da6:	1a59      	subs	r1, r3, r1
 8000da8:	1a0b      	subs	r3, r1, r0
 8000daa:	469a      	mov	sl, r3
 8000dac:	4665      	mov	r5, ip
 8000dae:	e57f      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000db0:	464b      	mov	r3, r9
 8000db2:	464a      	mov	r2, r9
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	4303      	orrs	r3, r0
 8000dba:	08d1      	lsrs	r1, r2, #3
 8000dbc:	e62b      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	d138      	bne.n	8000e38 <__aeabi_dadd+0x680>
 8000dc6:	074a      	lsls	r2, r1, #29
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	e646      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	08c0      	lsrs	r0, r0, #3
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	08d1      	lsrs	r1, r2, #3
 8000dda:	e61f      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000ddc:	181c      	adds	r4, r3, r0
 8000dde:	429c      	cmp	r4, r3
 8000de0:	419b      	sbcs	r3, r3
 8000de2:	4449      	add	r1, r9
 8000de4:	468a      	mov	sl, r1
 8000de6:	425b      	negs	r3, r3
 8000de8:	449a      	add	sl, r3
 8000dea:	4653      	mov	r3, sl
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	d400      	bmi.n	8000df2 <__aeabi_dadd+0x63a>
 8000df0:	e607      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000df2:	4652      	mov	r2, sl
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000df6:	2601      	movs	r6, #1
 8000df8:	401a      	ands	r2, r3
 8000dfa:	4692      	mov	sl, r2
 8000dfc:	e601      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000dfe:	003c      	movs	r4, r7
 8000e00:	000e      	movs	r6, r1
 8000e02:	3c20      	subs	r4, #32
 8000e04:	40e6      	lsrs	r6, r4
 8000e06:	2f20      	cmp	r7, #32
 8000e08:	d003      	beq.n	8000e12 <__aeabi_dadd+0x65a>
 8000e0a:	2440      	movs	r4, #64	; 0x40
 8000e0c:	1be4      	subs	r4, r4, r7
 8000e0e:	40a1      	lsls	r1, r4
 8000e10:	430b      	orrs	r3, r1
 8000e12:	001c      	movs	r4, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4334      	orrs	r4, r6
 8000e1a:	e65e      	b.n	8000ada <__aeabi_dadd+0x322>
 8000e1c:	4443      	add	r3, r8
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	4180      	sbcs	r0, r0
 8000e22:	4449      	add	r1, r9
 8000e24:	468a      	mov	sl, r1
 8000e26:	4240      	negs	r0, r0
 8000e28:	001c      	movs	r4, r3
 8000e2a:	4482      	add	sl, r0
 8000e2c:	e6bc      	b.n	8000ba8 <__aeabi_dadd+0x3f0>
 8000e2e:	4653      	mov	r3, sl
 8000e30:	4323      	orrs	r3, r4
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x67e>
 8000e34:	e6a9      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000e36:	e5e4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000e38:	074a      	lsls	r2, r1, #29
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	4211      	tst	r1, r2
 8000e44:	d009      	beq.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e46:	4648      	mov	r0, r9
 8000e48:	08c4      	lsrs	r4, r0, #3
 8000e4a:	4214      	tst	r4, r2
 8000e4c:	d105      	bne.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	4665      	mov	r5, ip
 8000e52:	0021      	movs	r1, r4
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	0f5a      	lsrs	r2, r3, #29
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	0752      	lsls	r2, r2, #29
 8000e62:	4313      	orrs	r3, r2
 8000e64:	e5fa      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4a01      	ldr	r2, [pc, #4]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	e540      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	ff7fffff 	.word	0xff7fffff

08000e78 <__aeabi_ddiv>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	4657      	mov	r7, sl
 8000e7c:	464e      	mov	r6, r9
 8000e7e:	4645      	mov	r5, r8
 8000e80:	46de      	mov	lr, fp
 8000e82:	b5e0      	push	{r5, r6, r7, lr}
 8000e84:	030c      	lsls	r4, r1, #12
 8000e86:	001f      	movs	r7, r3
 8000e88:	004b      	lsls	r3, r1, #1
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	0005      	movs	r5, r0
 8000e90:	b085      	sub	sp, #20
 8000e92:	0b24      	lsrs	r4, r4, #12
 8000e94:	0d5b      	lsrs	r3, r3, #21
 8000e96:	0fce      	lsrs	r6, r1, #31
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x26>
 8000e9c:	e152      	b.n	8001144 <__aeabi_ddiv+0x2cc>
 8000e9e:	4ad2      	ldr	r2, [pc, #840]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x2e>
 8000ea4:	e16e      	b.n	8001184 <__aeabi_ddiv+0x30c>
 8000ea6:	0f42      	lsrs	r2, r0, #29
 8000ea8:	00e4      	lsls	r4, r4, #3
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4acd      	ldr	r2, [pc, #820]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4693      	mov	fp, r2
 8000eba:	449b      	add	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	033c      	lsls	r4, r7, #12
 8000ec4:	007b      	lsls	r3, r7, #1
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	0d5b      	lsrs	r3, r3, #21
 8000ecc:	0fff      	lsrs	r7, r7, #31
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x5c>
 8000ed2:	e11a      	b.n	800110a <__aeabi_ddiv+0x292>
 8000ed4:	4ac4      	ldr	r2, [pc, #784]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x64>
 8000eda:	e15e      	b.n	800119a <__aeabi_ddiv+0x322>
 8000edc:	0f42      	lsrs	r2, r0, #29
 8000ede:	00e4      	lsls	r4, r4, #3
 8000ee0:	4322      	orrs	r2, r4
 8000ee2:	2480      	movs	r4, #128	; 0x80
 8000ee4:	0424      	lsls	r4, r4, #16
 8000ee6:	4314      	orrs	r4, r2
 8000ee8:	4ac0      	ldr	r2, [pc, #768]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eea:	00c1      	lsls	r1, r0, #3
 8000eec:	4694      	mov	ip, r2
 8000eee:	465a      	mov	r2, fp
 8000ef0:	4463      	add	r3, ip
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	0033      	movs	r3, r6
 8000efa:	407b      	eors	r3, r7
 8000efc:	469a      	mov	sl, r3
 8000efe:	464b      	mov	r3, r9
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d827      	bhi.n	8000f54 <__aeabi_ddiv+0xdc>
 8000f04:	4aba      	ldr	r2, [pc, #744]	; (80011f0 <__aeabi_ddiv+0x378>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	58d3      	ldr	r3, [r2, r3]
 8000f0a:	469f      	mov	pc, r3
 8000f0c:	46b2      	mov	sl, r6
 8000f0e:	9b00      	ldr	r3, [sp, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d016      	beq.n	8000f42 <__aeabi_ddiv+0xca>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xa2>
 8000f18:	e287      	b.n	800142a <__aeabi_ddiv+0x5b2>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_ddiv+0xa8>
 8000f1e:	e0d5      	b.n	80010cc <__aeabi_ddiv+0x254>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	2500      	movs	r5, #0
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	07d2      	lsls	r2, r2, #31
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	0028      	movs	r0, r5
 8000f32:	0019      	movs	r1, r3
 8000f34:	b005      	add	sp, #20
 8000f36:	bcf0      	pop	{r4, r5, r6, r7}
 8000f38:	46bb      	mov	fp, r7
 8000f3a:	46b2      	mov	sl, r6
 8000f3c:	46a9      	mov	r9, r5
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000f48:	e7ed      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8000f4a:	46ba      	mov	sl, r7
 8000f4c:	46a0      	mov	r8, r4
 8000f4e:	000d      	movs	r5, r1
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	e7dc      	b.n	8000f0e <__aeabi_ddiv+0x96>
 8000f54:	4544      	cmp	r4, r8
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0xe2>
 8000f58:	e1c4      	b.n	80012e4 <__aeabi_ddiv+0x46c>
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0xe6>
 8000f5c:	e1bf      	b.n	80012de <__aeabi_ddiv+0x466>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	469c      	mov	ip, r3
 8000f64:	002e      	movs	r6, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2500      	movs	r5, #0
 8000f6a:	44e3      	add	fp, ip
 8000f6c:	0223      	lsls	r3, r4, #8
 8000f6e:	0e0c      	lsrs	r4, r1, #24
 8000f70:	431c      	orrs	r4, r3
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	4699      	mov	r9, r3
 8000f76:	0423      	lsls	r3, r4, #16
 8000f78:	020a      	lsls	r2, r1, #8
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	9701      	str	r7, [sp, #4]
 8000f82:	f7ff f961 	bl	8000248 <__aeabi_uidivmod>
 8000f86:	0002      	movs	r2, r0
 8000f88:	437a      	muls	r2, r7
 8000f8a:	040b      	lsls	r3, r1, #16
 8000f8c:	0c31      	lsrs	r1, r6, #16
 8000f8e:	4680      	mov	r8, r0
 8000f90:	4319      	orrs	r1, r3
 8000f92:	428a      	cmp	r2, r1
 8000f94:	d907      	bls.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	1909      	adds	r1, r1, r4
 8000f9e:	44e0      	add	r8, ip
 8000fa0:	428c      	cmp	r4, r1
 8000fa2:	d800      	bhi.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000fa4:	e201      	b.n	80013aa <__aeabi_ddiv+0x532>
 8000fa6:	1a88      	subs	r0, r1, r2
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f7ff f94d 	bl	8000248 <__aeabi_uidivmod>
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0436      	lsls	r6, r6, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	0c36      	lsrs	r6, r6, #16
 8000fb8:	0003      	movs	r3, r0
 8000fba:	430e      	orrs	r6, r1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	d904      	bls.n	8000fca <__aeabi_ddiv+0x152>
 8000fc0:	1936      	adds	r6, r6, r4
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	42b4      	cmp	r4, r6
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x152>
 8000fc8:	e1e9      	b.n	800139e <__aeabi_ddiv+0x526>
 8000fca:	1ab0      	subs	r0, r6, r2
 8000fcc:	4642      	mov	r2, r8
 8000fce:	9e00      	ldr	r6, [sp, #0]
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	0c33      	lsrs	r3, r6, #16
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	4690      	mov	r8, r2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	0413      	lsls	r3, r2, #16
 8000fe0:	0432      	lsls	r2, r6, #16
 8000fe2:	0c16      	lsrs	r6, r2, #16
 8000fe4:	0032      	movs	r2, r6
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	9603      	str	r6, [sp, #12]
 8000fec:	437b      	muls	r3, r7
 8000fee:	434e      	muls	r6, r1
 8000ff0:	4379      	muls	r1, r7
 8000ff2:	0c17      	lsrs	r7, r2, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	199b      	adds	r3, r3, r6
 8000ff8:	4463      	add	r3, ip
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x18e>
 8000ffe:	2680      	movs	r6, #128	; 0x80
 8001000:	0276      	lsls	r6, r6, #9
 8001002:	46b4      	mov	ip, r6
 8001004:	4461      	add	r1, ip
 8001006:	0c1e      	lsrs	r6, r3, #16
 8001008:	1871      	adds	r1, r6, r1
 800100a:	0416      	lsls	r6, r2, #16
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	199e      	adds	r6, r3, r6
 8001012:	4288      	cmp	r0, r1
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1a4>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1c6>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1c6>
 800101c:	4643      	mov	r3, r8
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c0>
 8001036:	e19e      	b.n	8001376 <__aeabi_ddiv+0x4fe>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1c4>
 800103a:	e199      	b.n	8001370 <__aeabi_ddiv+0x4f8>
 800103c:	4690      	mov	r8, r2
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a40      	subs	r0, r0, r1
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1d8>
 800104e:	e1d2      	b.n	80013f6 <__aeabi_ddiv+0x57e>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8f9 	bl	8000248 <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f0>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4ca>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x20c>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4b4>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x23a>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	4286      	cmp	r6, r0
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x24c>
 80010c2:	e100      	b.n	80012c6 <__aeabi_ddiv+0x44e>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x250>
 80010c6:	e0fb      	b.n	80012c0 <__aeabi_ddiv+0x448>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x37c>)
 80010ce:	445b      	add	r3, fp
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x25e>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3b4>
 80010d6:	076a      	lsls	r2, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x264>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e0>
 80010dc:	08e9      	lsrs	r1, r5, #3
 80010de:	4642      	mov	r2, r8
 80010e0:	01d2      	lsls	r2, r2, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x27a>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x380>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4690      	mov	r8, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	445b      	add	r3, fp
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <__aeabi_ddiv+0x384>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x282>
 80010f8:	e723      	b.n	8000f42 <__aeabi_ddiv+0xca>
 80010fa:	4642      	mov	r2, r8
 80010fc:	055b      	lsls	r3, r3, #21
 80010fe:	0755      	lsls	r5, r2, #29
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	430d      	orrs	r5, r1
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	e70d      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800110a:	4651      	mov	r1, sl
 800110c:	4321      	orrs	r1, r4
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x29a>
 8001110:	e07c      	b.n	800120c <__aeabi_ddiv+0x394>
 8001112:	2c00      	cmp	r4, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x2a0>
 8001116:	e0fb      	b.n	8001310 <__aeabi_ddiv+0x498>
 8001118:	0020      	movs	r0, r4
 800111a:	f001 fa1b 	bl	8002554 <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	3a0b      	subs	r2, #11
 8001122:	231d      	movs	r3, #29
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	4652      	mov	r2, sl
 8001128:	0001      	movs	r1, r0
 800112a:	40da      	lsrs	r2, r3
 800112c:	4653      	mov	r3, sl
 800112e:	3908      	subs	r1, #8
 8001130:	408b      	lsls	r3, r1
 8001132:	408c      	lsls	r4, r1
 8001134:	0019      	movs	r1, r3
 8001136:	4314      	orrs	r4, r2
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x388>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 8001144:	0003      	movs	r3, r0
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x35e>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2da>
 8001150:	e0cf      	b.n	80012f2 <__aeabi_ddiv+0x47a>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 f9fe 	bl	8002554 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <__aeabi_ddiv+0x38c>)
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69e      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 8001184:	0002      	movs	r2, r0
 8001186:	4322      	orrs	r2, r4
 8001188:	4690      	mov	r8, r2
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x350>
 800118c:	2208      	movs	r2, #8
 800118e:	469b      	mov	fp, r3
 8001190:	2302      	movs	r3, #2
 8001192:	2500      	movs	r5, #0
 8001194:	4691      	mov	r9, r2
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e693      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 800119a:	4651      	mov	r1, sl
 800119c:	4321      	orrs	r1, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x33c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	464a      	mov	r2, r9
 80011a4:	431a      	orrs	r2, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x390>)
 80011a8:	4691      	mov	r9, r2
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e6a1      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x390>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4651      	mov	r1, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e697      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011c8:	220c      	movs	r2, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4691      	mov	r9, r2
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e675      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e66d      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	08013e60 	.word	0x08013e60
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	464a      	mov	r2, r9
 800120e:	2301      	movs	r3, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	4691      	mov	r9, r2
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66e      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001224:	0312      	lsls	r2, r2, #12
 8001226:	e67e      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2201      	movs	r2, #1
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	2a38      	cmp	r2, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3be>
 8001234:	e674      	b.n	8000f20 <__aeabi_ddiv+0xa8>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3c4>
 800123a:	e0bd      	b.n	80013b8 <__aeabi_ddiv+0x540>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	4641      	mov	r1, r8
 8001244:	40d9      	lsrs	r1, r3
 8001246:	000b      	movs	r3, r1
 8001248:	2a20      	cmp	r2, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3de>
 800124c:	4641      	mov	r1, r8
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <__aeabi_ddiv+0x5d0>)
 8001250:	445a      	add	r2, fp
 8001252:	4091      	lsls	r1, r2
 8001254:	430d      	orrs	r5, r1
 8001256:	0029      	movs	r1, r5
 8001258:	1e4a      	subs	r2, r1, #1
 800125a:	4191      	sbcs	r1, r2
 800125c:	4319      	orrs	r1, r3
 800125e:	2307      	movs	r3, #7
 8001260:	001d      	movs	r5, r3
 8001262:	2200      	movs	r2, #0
 8001264:	400d      	ands	r5, r1
 8001266:	420b      	tst	r3, r1
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x3f4>
 800126a:	e0d0      	b.n	800140e <__aeabi_ddiv+0x596>
 800126c:	220f      	movs	r2, #15
 800126e:	2300      	movs	r3, #0
 8001270:	400a      	ands	r2, r1
 8001272:	2a04      	cmp	r2, #4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x400>
 8001276:	e0c7      	b.n	8001408 <__aeabi_ddiv+0x590>
 8001278:	1d0a      	adds	r2, r1, #4
 800127a:	428a      	cmp	r2, r1
 800127c:	4189      	sbcs	r1, r1
 800127e:	4249      	negs	r1, r1
 8001280:	185b      	adds	r3, r3, r1
 8001282:	0011      	movs	r1, r2
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	d400      	bmi.n	800128a <__aeabi_ddiv+0x412>
 8001288:	e0be      	b.n	8001408 <__aeabi_ddiv+0x590>
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2500      	movs	r5, #0
 8001290:	e649      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4643      	mov	r3, r8
 8001296:	0312      	lsls	r2, r2, #12
 8001298:	4213      	tst	r3, r2
 800129a:	d008      	beq.n	80012ae <__aeabi_ddiv+0x436>
 800129c:	4214      	tst	r4, r2
 800129e:	d106      	bne.n	80012ae <__aeabi_ddiv+0x436>
 80012a0:	4322      	orrs	r2, r4
 80012a2:	0312      	lsls	r2, r2, #12
 80012a4:	46ba      	mov	sl, r7
 80012a6:	000d      	movs	r5, r1
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012aa:	0b12      	lsrs	r2, r2, #12
 80012ac:	e63b      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4643      	mov	r3, r8
 80012b2:	0312      	lsls	r2, r2, #12
 80012b4:	431a      	orrs	r2, r3
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	46b2      	mov	sl, r6
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	e632      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x44e>
 80012c4:	e702      	b.n	80010cc <__aeabi_ddiv+0x254>
 80012c6:	19a6      	adds	r6, r4, r6
 80012c8:	1e6a      	subs	r2, r5, #1
 80012ca:	42a6      	cmp	r6, r4
 80012cc:	d200      	bcs.n	80012d0 <__aeabi_ddiv+0x458>
 80012ce:	e089      	b.n	80013e4 <__aeabi_ddiv+0x56c>
 80012d0:	4286      	cmp	r6, r0
 80012d2:	d200      	bcs.n	80012d6 <__aeabi_ddiv+0x45e>
 80012d4:	e09f      	b.n	8001416 <__aeabi_ddiv+0x59e>
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x462>
 80012d8:	e0af      	b.n	800143a <__aeabi_ddiv+0x5c2>
 80012da:	0015      	movs	r5, r2
 80012dc:	e6f4      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d900      	bls.n	80012e4 <__aeabi_ddiv+0x46c>
 80012e2:	e63c      	b.n	8000f5e <__aeabi_ddiv+0xe6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	07de      	lsls	r6, r3, #31
 80012e8:	0858      	lsrs	r0, r3, #1
 80012ea:	086b      	lsrs	r3, r5, #1
 80012ec:	431e      	orrs	r6, r3
 80012ee:	07ed      	lsls	r5, r5, #31
 80012f0:	e63c      	b.n	8000f6c <__aeabi_ddiv+0xf4>
 80012f2:	f001 f92f 	bl	8002554 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x48c>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2e6>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x2fe>
 8001310:	f001 f920 	bl	8002554 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4aa>
 8001320:	e6ff      	b.n	8001122 <__aeabi_ddiv+0x2aa>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2100      	movs	r1, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c0>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4be>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4c4>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x20c>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4d4>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4da>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001358:	220f      	movs	r2, #15
 800135a:	402a      	ands	r2, r5
 800135c:	2a04      	cmp	r2, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4ea>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x264>
 8001362:	1d29      	adds	r1, r5, #4
 8001364:	42a9      	cmp	r1, r5
 8001366:	41ad      	sbcs	r5, r5
 8001368:	426d      	negs	r5, r5
 800136a:	08c9      	lsrs	r1, r1, #3
 800136c:	44a8      	add	r8, r5
 800136e:	e6b6      	b.n	80010de <__aeabi_ddiv+0x266>
 8001370:	42af      	cmp	r7, r5
 8001372:	d900      	bls.n	8001376 <__aeabi_ddiv+0x4fe>
 8001374:	e662      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001376:	4281      	cmp	r1, r0
 8001378:	d804      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x506>
 800137c:	e65e      	b.n	800103c <__aeabi_ddiv+0x1c4>
 800137e:	42ae      	cmp	r6, r5
 8001380:	d800      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 8001382:	e65b      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001384:	2302      	movs	r3, #2
 8001386:	425b      	negs	r3, r3
 8001388:	469c      	mov	ip, r3
 800138a:	9b00      	ldr	r3, [sp, #0]
 800138c:	44e0      	add	r8, ip
 800138e:	469c      	mov	ip, r3
 8001390:	4465      	add	r5, ip
 8001392:	429d      	cmp	r5, r3
 8001394:	419b      	sbcs	r3, r3
 8001396:	425b      	negs	r3, r3
 8001398:	191b      	adds	r3, r3, r4
 800139a:	18c0      	adds	r0, r0, r3
 800139c:	e64f      	b.n	800103e <__aeabi_ddiv+0x1c6>
 800139e:	42b2      	cmp	r2, r6
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x52c>
 80013a2:	e612      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013a4:	1e83      	subs	r3, r0, #2
 80013a6:	1936      	adds	r6, r6, r4
 80013a8:	e60f      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013aa:	428a      	cmp	r2, r1
 80013ac:	d800      	bhi.n	80013b0 <__aeabi_ddiv+0x538>
 80013ae:	e5fa      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	4698      	mov	r8, r3
 80013b4:	1909      	adds	r1, r1, r4
 80013b6:	e5f6      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <__aeabi_ddiv+0x5d4>)
 80013ba:	0028      	movs	r0, r5
 80013bc:	445b      	add	r3, fp
 80013be:	4641      	mov	r1, r8
 80013c0:	409d      	lsls	r5, r3
 80013c2:	4099      	lsls	r1, r3
 80013c4:	40d0      	lsrs	r0, r2
 80013c6:	1e6b      	subs	r3, r5, #1
 80013c8:	419d      	sbcs	r5, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	4301      	orrs	r1, r0
 80013ce:	4329      	orrs	r1, r5
 80013d0:	40d3      	lsrs	r3, r2
 80013d2:	074a      	lsls	r2, r1, #29
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x560>
 80013d6:	e755      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013d8:	220f      	movs	r2, #15
 80013da:	400a      	ands	r2, r1
 80013dc:	2a04      	cmp	r2, #4
 80013de:	d000      	beq.n	80013e2 <__aeabi_ddiv+0x56a>
 80013e0:	e74a      	b.n	8001278 <__aeabi_ddiv+0x400>
 80013e2:	e74f      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013e4:	0015      	movs	r5, r2
 80013e6:	4286      	cmp	r6, r0
 80013e8:	d000      	beq.n	80013ec <__aeabi_ddiv+0x574>
 80013ea:	e66d      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013ec:	9a00      	ldr	r2, [sp, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d000      	beq.n	80013f4 <__aeabi_ddiv+0x57c>
 80013f2:	e669      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013f4:	e66a      	b.n	80010cc <__aeabi_ddiv+0x254>
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <__aeabi_ddiv+0x5d8>)
 80013f8:	445b      	add	r3, fp
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc00      	bgt.n	8001400 <__aeabi_ddiv+0x588>
 80013fe:	e713      	b.n	8001228 <__aeabi_ddiv+0x3b0>
 8001400:	2501      	movs	r5, #1
 8001402:	2100      	movs	r1, #0
 8001404:	44a8      	add	r8, r5
 8001406:	e66a      	b.n	80010de <__aeabi_ddiv+0x266>
 8001408:	075d      	lsls	r5, r3, #29
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	0b1a      	lsrs	r2, r3, #12
 800140e:	08c9      	lsrs	r1, r1, #3
 8001410:	2300      	movs	r3, #0
 8001412:	430d      	orrs	r5, r1
 8001414:	e587      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	3d02      	subs	r5, #2
 800141a:	004a      	lsls	r2, r1, #1
 800141c:	428a      	cmp	r2, r1
 800141e:	41bf      	sbcs	r7, r7
 8001420:	427f      	negs	r7, r7
 8001422:	193f      	adds	r7, r7, r4
 8001424:	19f6      	adds	r6, r6, r7
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	e7dd      	b.n	80013e6 <__aeabi_ddiv+0x56e>
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4643      	mov	r3, r8
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	431a      	orrs	r2, r3
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001436:	0b12      	lsrs	r2, r2, #12
 8001438:	e575      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	4299      	cmp	r1, r3
 800143e:	d3ea      	bcc.n	8001416 <__aeabi_ddiv+0x59e>
 8001440:	0015      	movs	r5, r2
 8001442:	e7d3      	b.n	80013ec <__aeabi_ddiv+0x574>
 8001444:	000007ff 	.word	0x000007ff
 8001448:	0000043e 	.word	0x0000043e
 800144c:	0000041e 	.word	0x0000041e
 8001450:	000003ff 	.word	0x000003ff

08001454 <__eqdf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	46de      	mov	lr, fp
 800145c:	4657      	mov	r7, sl
 800145e:	4690      	mov	r8, r2
 8001460:	b5e0      	push	{r5, r6, r7, lr}
 8001462:	0017      	movs	r7, r2
 8001464:	031a      	lsls	r2, r3, #12
 8001466:	0b12      	lsrs	r2, r2, #12
 8001468:	0005      	movs	r5, r0
 800146a:	4684      	mov	ip, r0
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <__eqdf2+0x80>)
 800146e:	030e      	lsls	r6, r1, #12
 8001470:	004c      	lsls	r4, r1, #1
 8001472:	4691      	mov	r9, r2
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	0fdb      	lsrs	r3, r3, #31
 8001478:	469b      	mov	fp, r3
 800147a:	0b36      	lsrs	r6, r6, #12
 800147c:	0d64      	lsrs	r4, r4, #21
 800147e:	0fc9      	lsrs	r1, r1, #31
 8001480:	0d52      	lsrs	r2, r2, #21
 8001482:	4284      	cmp	r4, r0
 8001484:	d019      	beq.n	80014ba <__eqdf2+0x66>
 8001486:	4282      	cmp	r2, r0
 8001488:	d010      	beq.n	80014ac <__eqdf2+0x58>
 800148a:	2001      	movs	r0, #1
 800148c:	4294      	cmp	r4, r2
 800148e:	d10e      	bne.n	80014ae <__eqdf2+0x5a>
 8001490:	454e      	cmp	r6, r9
 8001492:	d10c      	bne.n	80014ae <__eqdf2+0x5a>
 8001494:	2001      	movs	r0, #1
 8001496:	45c4      	cmp	ip, r8
 8001498:	d109      	bne.n	80014ae <__eqdf2+0x5a>
 800149a:	4559      	cmp	r1, fp
 800149c:	d017      	beq.n	80014ce <__eqdf2+0x7a>
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d105      	bne.n	80014ae <__eqdf2+0x5a>
 80014a2:	0030      	movs	r0, r6
 80014a4:	4328      	orrs	r0, r5
 80014a6:	1e43      	subs	r3, r0, #1
 80014a8:	4198      	sbcs	r0, r3
 80014aa:	e000      	b.n	80014ae <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	bcf0      	pop	{r4, r5, r6, r7}
 80014b0:	46bb      	mov	fp, r7
 80014b2:	46b2      	mov	sl, r6
 80014b4:	46a9      	mov	r9, r5
 80014b6:	46a0      	mov	r8, r4
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	0033      	movs	r3, r6
 80014bc:	2001      	movs	r0, #1
 80014be:	432b      	orrs	r3, r5
 80014c0:	d1f5      	bne.n	80014ae <__eqdf2+0x5a>
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d1f3      	bne.n	80014ae <__eqdf2+0x5a>
 80014c6:	464b      	mov	r3, r9
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d1f0      	bne.n	80014ae <__eqdf2+0x5a>
 80014cc:	e7e2      	b.n	8001494 <__eqdf2+0x40>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7ed      	b.n	80014ae <__eqdf2+0x5a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	4647      	mov	r7, r8
 80014dc:	46ce      	mov	lr, r9
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	0016      	movs	r6, r2
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	0b1b      	lsrs	r3, r3, #12
 80014e8:	4d2d      	ldr	r5, [pc, #180]	; (80015a0 <__gedf2+0xc8>)
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	b580      	push	{r7, lr}
 80014f0:	0043      	lsls	r3, r0, #1
 80014f2:	030f      	lsls	r7, r1, #12
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d021      	beq.n	800154a <__gedf2+0x72>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d013      	beq.n	8001532 <__gedf2+0x5a>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d122      	bne.n	8001554 <__gedf2+0x7c>
 800150e:	433c      	orrs	r4, r7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <__gedf2+0x42>
 8001514:	464d      	mov	r5, r9
 8001516:	432e      	orrs	r6, r5
 8001518:	d022      	beq.n	8001560 <__gedf2+0x88>
 800151a:	2c00      	cmp	r4, #0
 800151c:	d010      	beq.n	8001540 <__gedf2+0x68>
 800151e:	4281      	cmp	r1, r0
 8001520:	d022      	beq.n	8001568 <__gedf2+0x90>
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bcc0      	pop	{r6, r7}
 800152c:	46b9      	mov	r9, r7
 800152e:	46b0      	mov	r8, r6
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	464d      	mov	r5, r9
 8001534:	432e      	orrs	r6, r5
 8001536:	d129      	bne.n	800158c <__gedf2+0xb4>
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f0      	bne.n	800151e <__gedf2+0x46>
 800153c:	433c      	orrs	r4, r7
 800153e:	d1ee      	bne.n	800151e <__gedf2+0x46>
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f2      	bne.n	800152a <__gedf2+0x52>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7ef      	b.n	800152a <__gedf2+0x52>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d11d      	bne.n	800158c <__gedf2+0xb4>
 8001550:	4293      	cmp	r3, r2
 8001552:	d0ee      	beq.n	8001532 <__gedf2+0x5a>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e2      	bne.n	800151e <__gedf2+0x46>
 8001558:	464c      	mov	r4, r9
 800155a:	4326      	orrs	r6, r4
 800155c:	d1df      	bne.n	800151e <__gedf2+0x46>
 800155e:	e7e0      	b.n	8001522 <__gedf2+0x4a>
 8001560:	2000      	movs	r0, #0
 8001562:	2c00      	cmp	r4, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7dc      	b.n	8001522 <__gedf2+0x4a>
 8001568:	429a      	cmp	r2, r3
 800156a:	dc0a      	bgt.n	8001582 <__gedf2+0xaa>
 800156c:	dbe8      	blt.n	8001540 <__gedf2+0x68>
 800156e:	454f      	cmp	r7, r9
 8001570:	d8d7      	bhi.n	8001522 <__gedf2+0x4a>
 8001572:	d00e      	beq.n	8001592 <__gedf2+0xba>
 8001574:	2000      	movs	r0, #0
 8001576:	454f      	cmp	r7, r9
 8001578:	d2d7      	bcs.n	800152a <__gedf2+0x52>
 800157a:	2900      	cmp	r1, #0
 800157c:	d0e2      	beq.n	8001544 <__gedf2+0x6c>
 800157e:	0008      	movs	r0, r1
 8001580:	e7d3      	b.n	800152a <__gedf2+0x52>
 8001582:	4243      	negs	r3, r0
 8001584:	4158      	adcs	r0, r3
 8001586:	0040      	lsls	r0, r0, #1
 8001588:	3801      	subs	r0, #1
 800158a:	e7ce      	b.n	800152a <__gedf2+0x52>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7cb      	b.n	800152a <__gedf2+0x52>
 8001592:	45c4      	cmp	ip, r8
 8001594:	d8c5      	bhi.n	8001522 <__gedf2+0x4a>
 8001596:	2000      	movs	r0, #0
 8001598:	45c4      	cmp	ip, r8
 800159a:	d2c6      	bcs.n	800152a <__gedf2+0x52>
 800159c:	e7ed      	b.n	800157a <__gedf2+0xa2>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4647      	mov	r7, r8
 80015a8:	46ce      	mov	lr, r9
 80015aa:	0004      	movs	r4, r0
 80015ac:	0018      	movs	r0, r3
 80015ae:	0016      	movs	r6, r2
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	0b1b      	lsrs	r3, r3, #12
 80015b4:	4d2c      	ldr	r5, [pc, #176]	; (8001668 <__ledf2+0xc4>)
 80015b6:	004a      	lsls	r2, r1, #1
 80015b8:	4699      	mov	r9, r3
 80015ba:	b580      	push	{r7, lr}
 80015bc:	0043      	lsls	r3, r0, #1
 80015be:	030f      	lsls	r7, r1, #12
 80015c0:	46a4      	mov	ip, r4
 80015c2:	46b0      	mov	r8, r6
 80015c4:	0b3f      	lsrs	r7, r7, #12
 80015c6:	0d52      	lsrs	r2, r2, #21
 80015c8:	0fc9      	lsrs	r1, r1, #31
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fc0      	lsrs	r0, r0, #31
 80015ce:	42aa      	cmp	r2, r5
 80015d0:	d00d      	beq.n	80015ee <__ledf2+0x4a>
 80015d2:	42ab      	cmp	r3, r5
 80015d4:	d010      	beq.n	80015f8 <__ledf2+0x54>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d127      	bne.n	800162a <__ledf2+0x86>
 80015da:	433c      	orrs	r4, r7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <__ledf2+0x60>
 80015e0:	464d      	mov	r5, r9
 80015e2:	432e      	orrs	r6, r5
 80015e4:	d10e      	bne.n	8001604 <__ledf2+0x60>
 80015e6:	2000      	movs	r0, #0
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d015      	beq.n	8001618 <__ledf2+0x74>
 80015ec:	e00e      	b.n	800160c <__ledf2+0x68>
 80015ee:	003d      	movs	r5, r7
 80015f0:	4325      	orrs	r5, r4
 80015f2:	d110      	bne.n	8001616 <__ledf2+0x72>
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d118      	bne.n	800162a <__ledf2+0x86>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10b      	bne.n	8001616 <__ledf2+0x72>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d102      	bne.n	8001608 <__ledf2+0x64>
 8001602:	433c      	orrs	r4, r7
 8001604:	2c00      	cmp	r4, #0
 8001606:	d00b      	beq.n	8001620 <__ledf2+0x7c>
 8001608:	4281      	cmp	r1, r0
 800160a:	d014      	beq.n	8001636 <__ledf2+0x92>
 800160c:	2002      	movs	r0, #2
 800160e:	3901      	subs	r1, #1
 8001610:	4008      	ands	r0, r1
 8001612:	3801      	subs	r0, #1
 8001614:	e000      	b.n	8001618 <__ledf2+0x74>
 8001616:	2002      	movs	r0, #2
 8001618:	bcc0      	pop	{r6, r7}
 800161a:	46b9      	mov	r9, r7
 800161c:	46b0      	mov	r8, r6
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001620:	2800      	cmp	r0, #0
 8001622:	d1f9      	bne.n	8001618 <__ledf2+0x74>
 8001624:	2001      	movs	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7f6      	b.n	8001618 <__ledf2+0x74>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ec      	bne.n	8001608 <__ledf2+0x64>
 800162e:	464c      	mov	r4, r9
 8001630:	4326      	orrs	r6, r4
 8001632:	d1e9      	bne.n	8001608 <__ledf2+0x64>
 8001634:	e7ea      	b.n	800160c <__ledf2+0x68>
 8001636:	429a      	cmp	r2, r3
 8001638:	dd04      	ble.n	8001644 <__ledf2+0xa0>
 800163a:	4243      	negs	r3, r0
 800163c:	4158      	adcs	r0, r3
 800163e:	0040      	lsls	r0, r0, #1
 8001640:	3801      	subs	r0, #1
 8001642:	e7e9      	b.n	8001618 <__ledf2+0x74>
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <__ledf2+0x7c>
 8001648:	454f      	cmp	r7, r9
 800164a:	d8df      	bhi.n	800160c <__ledf2+0x68>
 800164c:	d006      	beq.n	800165c <__ledf2+0xb8>
 800164e:	2000      	movs	r0, #0
 8001650:	454f      	cmp	r7, r9
 8001652:	d2e1      	bcs.n	8001618 <__ledf2+0x74>
 8001654:	2900      	cmp	r1, #0
 8001656:	d0e5      	beq.n	8001624 <__ledf2+0x80>
 8001658:	0008      	movs	r0, r1
 800165a:	e7dd      	b.n	8001618 <__ledf2+0x74>
 800165c:	45c4      	cmp	ip, r8
 800165e:	d8d5      	bhi.n	800160c <__ledf2+0x68>
 8001660:	2000      	movs	r0, #0
 8001662:	45c4      	cmp	ip, r8
 8001664:	d2d8      	bcs.n	8001618 <__ledf2+0x74>
 8001666:	e7f5      	b.n	8001654 <__ledf2+0xb0>
 8001668:	000007ff 	.word	0x000007ff

0800166c <__aeabi_dmul>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	4657      	mov	r7, sl
 8001674:	464e      	mov	r6, r9
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	001f      	movs	r7, r3
 800167a:	030b      	lsls	r3, r1, #12
 800167c:	0b1b      	lsrs	r3, r3, #12
 800167e:	469b      	mov	fp, r3
 8001680:	004d      	lsls	r5, r1, #1
 8001682:	0fcb      	lsrs	r3, r1, #31
 8001684:	0004      	movs	r4, r0
 8001686:	4691      	mov	r9, r2
 8001688:	4698      	mov	r8, r3
 800168a:	b087      	sub	sp, #28
 800168c:	0d6d      	lsrs	r5, r5, #21
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x26>
 8001690:	e1cd      	b.n	8001a2e <__aeabi_dmul+0x3c2>
 8001692:	4bce      	ldr	r3, [pc, #824]	; (80019cc <__aeabi_dmul+0x360>)
 8001694:	429d      	cmp	r5, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x2e>
 8001698:	e1e9      	b.n	8001a6e <__aeabi_dmul+0x402>
 800169a:	465a      	mov	r2, fp
 800169c:	0f43      	lsrs	r3, r0, #29
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	00c3      	lsls	r3, r0, #3
 80016aa:	469a      	mov	sl, r3
 80016ac:	4bc8      	ldr	r3, [pc, #800]	; (80019d0 <__aeabi_dmul+0x364>)
 80016ae:	4693      	mov	fp, r2
 80016b0:	469c      	mov	ip, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	2600      	movs	r6, #0
 80016b6:	4465      	add	r5, ip
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	033c      	lsls	r4, r7, #12
 80016bc:	007b      	lsls	r3, r7, #1
 80016be:	4648      	mov	r0, r9
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	0fff      	lsrs	r7, r7, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x60>
 80016ca:	e189      	b.n	80019e0 <__aeabi_dmul+0x374>
 80016cc:	4abf      	ldr	r2, [pc, #764]	; (80019cc <__aeabi_dmul+0x360>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <__aeabi_dmul+0x9a>
 80016d2:	0f42      	lsrs	r2, r0, #29
 80016d4:	00e4      	lsls	r4, r4, #3
 80016d6:	4322      	orrs	r2, r4
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0424      	lsls	r4, r4, #16
 80016dc:	4314      	orrs	r4, r2
 80016de:	4abc      	ldr	r2, [pc, #752]	; (80019d0 <__aeabi_dmul+0x364>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4694      	mov	ip, r2
 80016e4:	4642      	mov	r2, r8
 80016e6:	4463      	add	r3, ip
 80016e8:	195b      	adds	r3, r3, r5
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
 80016ee:	407a      	eors	r2, r7
 80016f0:	3301      	adds	r3, #1
 80016f2:	00c0      	lsls	r0, r0, #3
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2e0a      	cmp	r6, #10
 80016fa:	dd1c      	ble.n	8001736 <__aeabi_dmul+0xca>
 80016fc:	003a      	movs	r2, r7
 80016fe:	2e0b      	cmp	r6, #11
 8001700:	d05e      	beq.n	80017c0 <__aeabi_dmul+0x154>
 8001702:	4647      	mov	r7, r8
 8001704:	e056      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001706:	4649      	mov	r1, r9
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <__aeabi_dmul+0x360>)
 800170a:	4321      	orrs	r1, r4
 800170c:	18eb      	adds	r3, r5, r3
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2900      	cmp	r1, #0
 8001712:	d12a      	bne.n	800176a <__aeabi_dmul+0xfe>
 8001714:	2080      	movs	r0, #128	; 0x80
 8001716:	2202      	movs	r2, #2
 8001718:	0100      	lsls	r0, r0, #4
 800171a:	002b      	movs	r3, r5
 800171c:	4684      	mov	ip, r0
 800171e:	4316      	orrs	r6, r2
 8001720:	4642      	mov	r2, r8
 8001722:	4463      	add	r3, ip
 8001724:	407a      	eors	r2, r7
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2e0a      	cmp	r6, #10
 800172c:	dd00      	ble.n	8001730 <__aeabi_dmul+0xc4>
 800172e:	e231      	b.n	8001b94 <__aeabi_dmul+0x528>
 8001730:	2000      	movs	r0, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2e02      	cmp	r6, #2
 8001738:	dc26      	bgt.n	8001788 <__aeabi_dmul+0x11c>
 800173a:	3e01      	subs	r6, #1
 800173c:	2e01      	cmp	r6, #1
 800173e:	d852      	bhi.n	80017e6 <__aeabi_dmul+0x17a>
 8001740:	2902      	cmp	r1, #2
 8001742:	d04c      	beq.n	80017de <__aeabi_dmul+0x172>
 8001744:	2901      	cmp	r1, #1
 8001746:	d000      	beq.n	800174a <__aeabi_dmul+0xde>
 8001748:	e118      	b.n	800197c <__aeabi_dmul+0x310>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2500      	movs	r5, #0
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	4323      	orrs	r3, r4
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	4313      	orrs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	0019      	movs	r1, r3
 800175c:	b007      	add	sp, #28
 800175e:	bcf0      	pop	{r4, r5, r6, r7}
 8001760:	46bb      	mov	fp, r7
 8001762:	46b2      	mov	sl, r6
 8001764:	46a9      	mov	r9, r5
 8001766:	46a0      	mov	r8, r4
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	2203      	movs	r2, #3
 800176e:	0109      	lsls	r1, r1, #4
 8001770:	002b      	movs	r3, r5
 8001772:	468c      	mov	ip, r1
 8001774:	4316      	orrs	r6, r2
 8001776:	4642      	mov	r2, r8
 8001778:	4463      	add	r3, ip
 800177a:	407a      	eors	r2, r7
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2e0a      	cmp	r6, #10
 8001782:	dd00      	ble.n	8001786 <__aeabi_dmul+0x11a>
 8001784:	e228      	b.n	8001bd8 <__aeabi_dmul+0x56c>
 8001786:	2103      	movs	r1, #3
 8001788:	2501      	movs	r5, #1
 800178a:	40b5      	lsls	r5, r6
 800178c:	46ac      	mov	ip, r5
 800178e:	26a6      	movs	r6, #166	; 0xa6
 8001790:	4663      	mov	r3, ip
 8001792:	00f6      	lsls	r6, r6, #3
 8001794:	4035      	ands	r5, r6
 8001796:	4233      	tst	r3, r6
 8001798:	d10b      	bne.n	80017b2 <__aeabi_dmul+0x146>
 800179a:	2690      	movs	r6, #144	; 0x90
 800179c:	00b6      	lsls	r6, r6, #2
 800179e:	4233      	tst	r3, r6
 80017a0:	d118      	bne.n	80017d4 <__aeabi_dmul+0x168>
 80017a2:	3eb9      	subs	r6, #185	; 0xb9
 80017a4:	3eff      	subs	r6, #255	; 0xff
 80017a6:	421e      	tst	r6, r3
 80017a8:	d01d      	beq.n	80017e6 <__aeabi_dmul+0x17a>
 80017aa:	46a3      	mov	fp, r4
 80017ac:	4682      	mov	sl, r0
 80017ae:	9100      	str	r1, [sp, #0]
 80017b0:	e000      	b.n	80017b4 <__aeabi_dmul+0x148>
 80017b2:	0017      	movs	r7, r2
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	003a      	movs	r2, r7
 80017b8:	2902      	cmp	r1, #2
 80017ba:	d010      	beq.n	80017de <__aeabi_dmul+0x172>
 80017bc:	465c      	mov	r4, fp
 80017be:	4650      	mov	r0, sl
 80017c0:	2903      	cmp	r1, #3
 80017c2:	d1bf      	bne.n	8001744 <__aeabi_dmul+0xd8>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	431c      	orrs	r4, r3
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <__aeabi_dmul+0x360>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	e7bd      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017d4:	2480      	movs	r4, #128	; 0x80
 80017d6:	2200      	movs	r2, #0
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <__aeabi_dmul+0x360>)
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	e7b8      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017de:	2400      	movs	r4, #0
 80017e0:	2500      	movs	r5, #0
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <__aeabi_dmul+0x360>)
 80017e4:	e7b4      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017e6:	4653      	mov	r3, sl
 80017e8:	041e      	lsls	r6, r3, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	0c1f      	lsrs	r7, r3, #16
 80017ee:	0033      	movs	r3, r6
 80017f0:	0c01      	lsrs	r1, r0, #16
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c00      	lsrs	r0, r0, #16
 80017f6:	4343      	muls	r3, r0
 80017f8:	4698      	mov	r8, r3
 80017fa:	0003      	movs	r3, r0
 80017fc:	437b      	muls	r3, r7
 80017fe:	4699      	mov	r9, r3
 8001800:	0033      	movs	r3, r6
 8001802:	434b      	muls	r3, r1
 8001804:	469c      	mov	ip, r3
 8001806:	4643      	mov	r3, r8
 8001808:	000d      	movs	r5, r1
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	469a      	mov	sl, r3
 800180e:	437d      	muls	r5, r7
 8001810:	44cc      	add	ip, r9
 8001812:	44d4      	add	ip, sl
 8001814:	9500      	str	r5, [sp, #0]
 8001816:	45e1      	cmp	r9, ip
 8001818:	d904      	bls.n	8001824 <__aeabi_dmul+0x1b8>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4699      	mov	r9, r3
 8001820:	444d      	add	r5, r9
 8001822:	9500      	str	r5, [sp, #0]
 8001824:	4663      	mov	r3, ip
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	001d      	movs	r5, r3
 800182a:	4663      	mov	r3, ip
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	469c      	mov	ip, r3
 8001830:	4643      	mov	r3, r8
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	4663      	mov	r3, ip
 800183a:	4443      	add	r3, r8
 800183c:	9303      	str	r3, [sp, #12]
 800183e:	0c23      	lsrs	r3, r4, #16
 8001840:	4698      	mov	r8, r3
 8001842:	0033      	movs	r3, r6
 8001844:	0424      	lsls	r4, r4, #16
 8001846:	0c24      	lsrs	r4, r4, #16
 8001848:	4363      	muls	r3, r4
 800184a:	469c      	mov	ip, r3
 800184c:	0023      	movs	r3, r4
 800184e:	437b      	muls	r3, r7
 8001850:	4699      	mov	r9, r3
 8001852:	4643      	mov	r3, r8
 8001854:	435e      	muls	r6, r3
 8001856:	435f      	muls	r7, r3
 8001858:	444e      	add	r6, r9
 800185a:	4663      	mov	r3, ip
 800185c:	46b2      	mov	sl, r6
 800185e:	0c1e      	lsrs	r6, r3, #16
 8001860:	4456      	add	r6, sl
 8001862:	45b1      	cmp	r9, r6
 8001864:	d903      	bls.n	800186e <__aeabi_dmul+0x202>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4699      	mov	r9, r3
 800186c:	444f      	add	r7, r9
 800186e:	0c33      	lsrs	r3, r6, #16
 8001870:	4699      	mov	r9, r3
 8001872:	003b      	movs	r3, r7
 8001874:	444b      	add	r3, r9
 8001876:	9305      	str	r3, [sp, #20]
 8001878:	4663      	mov	r3, ip
 800187a:	46ac      	mov	ip, r5
 800187c:	041f      	lsls	r7, r3, #16
 800187e:	0c3f      	lsrs	r7, r7, #16
 8001880:	0436      	lsls	r6, r6, #16
 8001882:	19f6      	adds	r6, r6, r7
 8001884:	44b4      	add	ip, r6
 8001886:	4663      	mov	r3, ip
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	465b      	mov	r3, fp
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	469c      	mov	ip, r3
 8001890:	465b      	mov	r3, fp
 8001892:	041f      	lsls	r7, r3, #16
 8001894:	0c3f      	lsrs	r7, r7, #16
 8001896:	003b      	movs	r3, r7
 8001898:	4343      	muls	r3, r0
 800189a:	4699      	mov	r9, r3
 800189c:	4663      	mov	r3, ip
 800189e:	4343      	muls	r3, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	4660      	mov	r0, ip
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	469b      	mov	fp, r3
 80018aa:	4348      	muls	r0, r1
 80018ac:	4379      	muls	r1, r7
 80018ae:	4451      	add	r1, sl
 80018b0:	4459      	add	r1, fp
 80018b2:	458a      	cmp	sl, r1
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x252>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	469a      	mov	sl, r3
 80018bc:	4450      	add	r0, sl
 80018be:	0c0b      	lsrs	r3, r1, #16
 80018c0:	469a      	mov	sl, r3
 80018c2:	464b      	mov	r3, r9
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	4699      	mov	r9, r3
 80018ca:	003b      	movs	r3, r7
 80018cc:	4363      	muls	r3, r4
 80018ce:	0409      	lsls	r1, r1, #16
 80018d0:	4645      	mov	r5, r8
 80018d2:	4449      	add	r1, r9
 80018d4:	4699      	mov	r9, r3
 80018d6:	4663      	mov	r3, ip
 80018d8:	435c      	muls	r4, r3
 80018da:	436b      	muls	r3, r5
 80018dc:	469c      	mov	ip, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	4698      	mov	r8, r3
 80018e4:	436f      	muls	r7, r5
 80018e6:	193f      	adds	r7, r7, r4
 80018e8:	4447      	add	r7, r8
 80018ea:	4450      	add	r0, sl
 80018ec:	42bc      	cmp	r4, r7
 80018ee:	d903      	bls.n	80018f8 <__aeabi_dmul+0x28c>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	4698      	mov	r8, r3
 80018f6:	44c4      	add	ip, r8
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	9d00      	ldr	r5, [sp, #0]
 80018fc:	4698      	mov	r8, r3
 80018fe:	4445      	add	r5, r8
 8001900:	42b5      	cmp	r5, r6
 8001902:	41b6      	sbcs	r6, r6
 8001904:	4273      	negs	r3, r6
 8001906:	4698      	mov	r8, r3
 8001908:	464b      	mov	r3, r9
 800190a:	041e      	lsls	r6, r3, #16
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	043c      	lsls	r4, r7, #16
 8001910:	4699      	mov	r9, r3
 8001912:	0c36      	lsrs	r6, r6, #16
 8001914:	19a4      	adds	r4, r4, r6
 8001916:	444c      	add	r4, r9
 8001918:	46a1      	mov	r9, r4
 800191a:	4683      	mov	fp, r0
 800191c:	186e      	adds	r6, r5, r1
 800191e:	44c1      	add	r9, r8
 8001920:	428e      	cmp	r6, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	44cb      	add	fp, r9
 8001926:	465d      	mov	r5, fp
 8001928:	4249      	negs	r1, r1
 800192a:	186d      	adds	r5, r5, r1
 800192c:	429c      	cmp	r4, r3
 800192e:	41a4      	sbcs	r4, r4
 8001930:	45c1      	cmp	r9, r8
 8001932:	419b      	sbcs	r3, r3
 8001934:	4583      	cmp	fp, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	428d      	cmp	r5, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	425b      	negs	r3, r3
 800193e:	4264      	negs	r4, r4
 8001940:	431c      	orrs	r4, r3
 8001942:	4240      	negs	r0, r0
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	4249      	negs	r1, r1
 8001948:	4301      	orrs	r1, r0
 800194a:	0270      	lsls	r0, r6, #9
 800194c:	0c3f      	lsrs	r7, r7, #16
 800194e:	4318      	orrs	r0, r3
 8001950:	19e4      	adds	r4, r4, r7
 8001952:	1e47      	subs	r7, r0, #1
 8001954:	41b8      	sbcs	r0, r7
 8001956:	1864      	adds	r4, r4, r1
 8001958:	4464      	add	r4, ip
 800195a:	0df6      	lsrs	r6, r6, #23
 800195c:	0261      	lsls	r1, r4, #9
 800195e:	4330      	orrs	r0, r6
 8001960:	0dec      	lsrs	r4, r5, #23
 8001962:	026e      	lsls	r6, r5, #9
 8001964:	430c      	orrs	r4, r1
 8001966:	4330      	orrs	r0, r6
 8001968:	01c9      	lsls	r1, r1, #7
 800196a:	d400      	bmi.n	800196e <__aeabi_dmul+0x302>
 800196c:	e0f1      	b.n	8001b52 <__aeabi_dmul+0x4e6>
 800196e:	2101      	movs	r1, #1
 8001970:	0843      	lsrs	r3, r0, #1
 8001972:	4001      	ands	r1, r0
 8001974:	430b      	orrs	r3, r1
 8001976:	07e0      	lsls	r0, r4, #31
 8001978:	4318      	orrs	r0, r3
 800197a:	0864      	lsrs	r4, r4, #1
 800197c:	4915      	ldr	r1, [pc, #84]	; (80019d4 <__aeabi_dmul+0x368>)
 800197e:	9b02      	ldr	r3, [sp, #8]
 8001980:	468c      	mov	ip, r1
 8001982:	4463      	add	r3, ip
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_dmul+0x31e>
 8001988:	e097      	b.n	8001aba <__aeabi_dmul+0x44e>
 800198a:	0741      	lsls	r1, r0, #29
 800198c:	d009      	beq.n	80019a2 <__aeabi_dmul+0x336>
 800198e:	210f      	movs	r1, #15
 8001990:	4001      	ands	r1, r0
 8001992:	2904      	cmp	r1, #4
 8001994:	d005      	beq.n	80019a2 <__aeabi_dmul+0x336>
 8001996:	1d01      	adds	r1, r0, #4
 8001998:	4281      	cmp	r1, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	4240      	negs	r0, r0
 800199e:	1824      	adds	r4, r4, r0
 80019a0:	0008      	movs	r0, r1
 80019a2:	01e1      	lsls	r1, r4, #7
 80019a4:	d506      	bpl.n	80019b4 <__aeabi_dmul+0x348>
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	00c9      	lsls	r1, r1, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <__aeabi_dmul+0x36c>)
 80019ae:	401c      	ands	r4, r3
 80019b0:	9b02      	ldr	r3, [sp, #8]
 80019b2:	4463      	add	r3, ip
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <__aeabi_dmul+0x370>)
 80019b6:	428b      	cmp	r3, r1
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dmul+0x350>
 80019ba:	e710      	b.n	80017de <__aeabi_dmul+0x172>
 80019bc:	0761      	lsls	r1, r4, #29
 80019be:	08c5      	lsrs	r5, r0, #3
 80019c0:	0264      	lsls	r4, r4, #9
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	430d      	orrs	r5, r1
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	e6c1      	b.n	8001750 <__aeabi_dmul+0xe4>
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	fffffc01 	.word	0xfffffc01
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	464b      	mov	r3, r9
 80019e2:	4323      	orrs	r3, r4
 80019e4:	d059      	beq.n	8001a9a <__aeabi_dmul+0x42e>
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x380>
 80019ea:	e0a3      	b.n	8001b34 <__aeabi_dmul+0x4c8>
 80019ec:	0020      	movs	r0, r4
 80019ee:	f000 fdb1 	bl	8002554 <__clzsi2>
 80019f2:	0001      	movs	r1, r0
 80019f4:	0003      	movs	r3, r0
 80019f6:	390b      	subs	r1, #11
 80019f8:	221d      	movs	r2, #29
 80019fa:	1a52      	subs	r2, r2, r1
 80019fc:	4649      	mov	r1, r9
 80019fe:	0018      	movs	r0, r3
 8001a00:	40d1      	lsrs	r1, r2
 8001a02:	464a      	mov	r2, r9
 8001a04:	3808      	subs	r0, #8
 8001a06:	4082      	lsls	r2, r0
 8001a08:	4084      	lsls	r4, r0
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	430c      	orrs	r4, r1
 8001a0e:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a10:	1aeb      	subs	r3, r5, r3
 8001a12:	4694      	mov	ip, r2
 8001a14:	4642      	mov	r2, r8
 8001a16:	4463      	add	r3, ip
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	407a      	eors	r2, r7
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2e0a      	cmp	r6, #10
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dmul+0x3c0>
 8001a2a:	e667      	b.n	80016fc <__aeabi_dmul+0x90>
 8001a2c:	e683      	b.n	8001736 <__aeabi_dmul+0xca>
 8001a2e:	465b      	mov	r3, fp
 8001a30:	4303      	orrs	r3, r0
 8001a32:	469a      	mov	sl, r3
 8001a34:	d02a      	beq.n	8001a8c <__aeabi_dmul+0x420>
 8001a36:	465b      	mov	r3, fp
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06d      	beq.n	8001b18 <__aeabi_dmul+0x4ac>
 8001a3c:	4658      	mov	r0, fp
 8001a3e:	f000 fd89 	bl	8002554 <__clzsi2>
 8001a42:	0001      	movs	r1, r0
 8001a44:	0003      	movs	r3, r0
 8001a46:	390b      	subs	r1, #11
 8001a48:	221d      	movs	r2, #29
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	465d      	mov	r5, fp
 8001a52:	40d1      	lsrs	r1, r2
 8001a54:	3808      	subs	r0, #8
 8001a56:	4085      	lsls	r5, r0
 8001a58:	000a      	movs	r2, r1
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	432a      	orrs	r2, r5
 8001a5e:	4693      	mov	fp, r2
 8001a60:	46a2      	mov	sl, r4
 8001a62:	4d5f      	ldr	r5, [pc, #380]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a64:	2600      	movs	r6, #0
 8001a66:	1aed      	subs	r5, r5, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e625      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	4303      	orrs	r3, r0
 8001a72:	469a      	mov	sl, r3
 8001a74:	d105      	bne.n	8001a82 <__aeabi_dmul+0x416>
 8001a76:	2300      	movs	r3, #0
 8001a78:	469b      	mov	fp, r3
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	2608      	movs	r6, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	e61b      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a82:	2303      	movs	r3, #3
 8001a84:	4682      	mov	sl, r0
 8001a86:	260c      	movs	r6, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	e616      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	469b      	mov	fp, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	2604      	movs	r6, #4
 8001a94:	2500      	movs	r5, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e60f      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	9501      	str	r5, [sp, #4]
 8001aa0:	431e      	orrs	r6, r3
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	407a      	eors	r2, r7
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2e0a      	cmp	r6, #10
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dmul+0x44c>
 8001ab6:	e621      	b.n	80016fc <__aeabi_dmul+0x90>
 8001ab8:	e63d      	b.n	8001736 <__aeabi_dmul+0xca>
 8001aba:	2101      	movs	r1, #1
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	2938      	cmp	r1, #56	; 0x38
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dmul+0x458>
 8001ac2:	e642      	b.n	800174a <__aeabi_dmul+0xde>
 8001ac4:	291f      	cmp	r1, #31
 8001ac6:	dd47      	ble.n	8001b58 <__aeabi_dmul+0x4ec>
 8001ac8:	261f      	movs	r6, #31
 8001aca:	0025      	movs	r5, r4
 8001acc:	4276      	negs	r6, r6
 8001ace:	1af3      	subs	r3, r6, r3
 8001ad0:	40dd      	lsrs	r5, r3
 8001ad2:	002b      	movs	r3, r5
 8001ad4:	2920      	cmp	r1, #32
 8001ad6:	d005      	beq.n	8001ae4 <__aeabi_dmul+0x478>
 8001ad8:	4942      	ldr	r1, [pc, #264]	; (8001be4 <__aeabi_dmul+0x578>)
 8001ada:	9d02      	ldr	r5, [sp, #8]
 8001adc:	468c      	mov	ip, r1
 8001ade:	4465      	add	r5, ip
 8001ae0:	40ac      	lsls	r4, r5
 8001ae2:	4320      	orrs	r0, r4
 8001ae4:	1e41      	subs	r1, r0, #1
 8001ae6:	4188      	sbcs	r0, r1
 8001ae8:	4318      	orrs	r0, r3
 8001aea:	2307      	movs	r3, #7
 8001aec:	001d      	movs	r5, r3
 8001aee:	2400      	movs	r4, #0
 8001af0:	4005      	ands	r5, r0
 8001af2:	4203      	tst	r3, r0
 8001af4:	d04a      	beq.n	8001b8c <__aeabi_dmul+0x520>
 8001af6:	230f      	movs	r3, #15
 8001af8:	2400      	movs	r4, #0
 8001afa:	4003      	ands	r3, r0
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d042      	beq.n	8001b86 <__aeabi_dmul+0x51a>
 8001b00:	1d03      	adds	r3, r0, #4
 8001b02:	4283      	cmp	r3, r0
 8001b04:	4180      	sbcs	r0, r0
 8001b06:	4240      	negs	r0, r0
 8001b08:	1824      	adds	r4, r4, r0
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	0223      	lsls	r3, r4, #8
 8001b0e:	d53a      	bpl.n	8001b86 <__aeabi_dmul+0x51a>
 8001b10:	2301      	movs	r3, #1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e61b      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b18:	f000 fd1c 	bl	8002554 <__clzsi2>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	0003      	movs	r3, r0
 8001b20:	3115      	adds	r1, #21
 8001b22:	3320      	adds	r3, #32
 8001b24:	291c      	cmp	r1, #28
 8001b26:	dd8f      	ble.n	8001a48 <__aeabi_dmul+0x3dc>
 8001b28:	3808      	subs	r0, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4692      	mov	sl, r2
 8001b30:	46a3      	mov	fp, r4
 8001b32:	e796      	b.n	8001a62 <__aeabi_dmul+0x3f6>
 8001b34:	f000 fd0e 	bl	8002554 <__clzsi2>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	3115      	adds	r1, #21
 8001b3e:	3320      	adds	r3, #32
 8001b40:	291c      	cmp	r1, #28
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dmul+0x4da>
 8001b44:	e758      	b.n	80019f8 <__aeabi_dmul+0x38c>
 8001b46:	0002      	movs	r2, r0
 8001b48:	464c      	mov	r4, r9
 8001b4a:	3a08      	subs	r2, #8
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	4094      	lsls	r4, r2
 8001b50:	e75d      	b.n	8001a0e <__aeabi_dmul+0x3a2>
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	e711      	b.n	800197c <__aeabi_dmul+0x310>
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <__aeabi_dmul+0x57c>)
 8001b5a:	0026      	movs	r6, r4
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	0003      	movs	r3, r0
 8001b60:	9d02      	ldr	r5, [sp, #8]
 8001b62:	40cb      	lsrs	r3, r1
 8001b64:	4465      	add	r5, ip
 8001b66:	40ae      	lsls	r6, r5
 8001b68:	431e      	orrs	r6, r3
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	40ab      	lsls	r3, r5
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	4183      	sbcs	r3, r0
 8001b72:	0030      	movs	r0, r6
 8001b74:	4318      	orrs	r0, r3
 8001b76:	40cc      	lsrs	r4, r1
 8001b78:	0743      	lsls	r3, r0, #29
 8001b7a:	d0c7      	beq.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	4003      	ands	r3, r0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d1bd      	bne.n	8001b00 <__aeabi_dmul+0x494>
 8001b84:	e7c2      	b.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b86:	0765      	lsls	r5, r4, #29
 8001b88:	0264      	lsls	r4, r4, #9
 8001b8a:	0b24      	lsrs	r4, r4, #12
 8001b8c:	08c0      	lsrs	r0, r0, #3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4305      	orrs	r5, r0
 8001b92:	e5dd      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b94:	2500      	movs	r5, #0
 8001b96:	2302      	movs	r3, #2
 8001b98:	2e0f      	cmp	r6, #15
 8001b9a:	d10c      	bne.n	8001bb6 <__aeabi_dmul+0x54a>
 8001b9c:	2480      	movs	r4, #128	; 0x80
 8001b9e:	465b      	mov	r3, fp
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4223      	tst	r3, r4
 8001ba4:	d00e      	beq.n	8001bc4 <__aeabi_dmul+0x558>
 8001ba6:	4221      	tst	r1, r4
 8001ba8:	d10c      	bne.n	8001bc4 <__aeabi_dmul+0x558>
 8001baa:	430c      	orrs	r4, r1
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	003a      	movs	r2, r7
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <__aeabi_dmul+0x580>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e5cc      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bb6:	2e0b      	cmp	r6, #11
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dmul+0x550>
 8001bba:	e5a2      	b.n	8001702 <__aeabi_dmul+0x96>
 8001bbc:	468b      	mov	fp, r1
 8001bbe:	46aa      	mov	sl, r5
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	e5f7      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001bc4:	2480      	movs	r4, #128	; 0x80
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4655      	mov	r5, sl
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_dmul+0x580>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e5bb      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bd8:	464d      	mov	r5, r9
 8001bda:	0021      	movs	r1, r4
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e7db      	b.n	8001b98 <__aeabi_dmul+0x52c>
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	0000043e 	.word	0x0000043e
 8001be8:	0000041e 	.word	0x0000041e
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dsub>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	0004      	movs	r4, r0
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	032b      	lsls	r3, r5, #12
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	0f62      	lsrs	r2, r4, #29
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	00e3      	lsls	r3, r4, #3
 8001c0e:	030c      	lsls	r4, r1, #12
 8001c10:	0a64      	lsrs	r4, r4, #9
 8001c12:	0f47      	lsrs	r7, r0, #29
 8001c14:	4327      	orrs	r7, r4
 8001c16:	4cd0      	ldr	r4, [pc, #832]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c18:	006e      	lsls	r6, r5, #1
 8001c1a:	4691      	mov	r9, r2
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	004a      	lsls	r2, r1, #1
 8001c20:	00c0      	lsls	r0, r0, #3
 8001c22:	4698      	mov	r8, r3
 8001c24:	46a2      	mov	sl, r4
 8001c26:	0d76      	lsrs	r6, r6, #21
 8001c28:	0fed      	lsrs	r5, r5, #31
 8001c2a:	0d52      	lsrs	r2, r2, #21
 8001c2c:	0fc9      	lsrs	r1, r1, #31
 8001c2e:	9001      	str	r0, [sp, #4]
 8001c30:	42a2      	cmp	r2, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x46>
 8001c34:	e0b9      	b.n	8001daa <__aeabi_dsub+0x1ba>
 8001c36:	2401      	movs	r4, #1
 8001c38:	4061      	eors	r1, r4
 8001c3a:	468b      	mov	fp, r1
 8001c3c:	428d      	cmp	r5, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x52>
 8001c40:	e08d      	b.n	8001d5e <__aeabi_dsub+0x16e>
 8001c42:	1ab4      	subs	r4, r6, r2
 8001c44:	46a4      	mov	ip, r4
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x5c>
 8001c4a:	e0b7      	b.n	8001dbc <__aeabi_dsub+0x1cc>
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x62>
 8001c50:	e0cb      	b.n	8001dea <__aeabi_dsub+0x1fa>
 8001c52:	4ac1      	ldr	r2, [pc, #772]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c54:	4296      	cmp	r6, r2
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x6a>
 8001c58:	e186      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0412      	lsls	r2, r2, #16
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	2a38      	cmp	r2, #56	; 0x38
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0x78>
 8001c66:	e1a4      	b.n	8001fb2 <__aeabi_dsub+0x3c2>
 8001c68:	2a1f      	cmp	r2, #31
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x7e>
 8001c6c:	e21d      	b.n	80020aa <__aeabi_dsub+0x4ba>
 8001c6e:	4661      	mov	r1, ip
 8001c70:	2220      	movs	r2, #32
 8001c72:	003c      	movs	r4, r7
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	0001      	movs	r1, r0
 8001c78:	4090      	lsls	r0, r2
 8001c7a:	4094      	lsls	r4, r2
 8001c7c:	1e42      	subs	r2, r0, #1
 8001c7e:	4190      	sbcs	r0, r2
 8001c80:	4662      	mov	r2, ip
 8001c82:	46a0      	mov	r8, r4
 8001c84:	4664      	mov	r4, ip
 8001c86:	40d7      	lsrs	r7, r2
 8001c88:	464a      	mov	r2, r9
 8001c8a:	40e1      	lsrs	r1, r4
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	1bd2      	subs	r2, r2, r7
 8001c90:	4691      	mov	r9, r2
 8001c92:	430c      	orrs	r4, r1
 8001c94:	4304      	orrs	r4, r0
 8001c96:	1b1c      	subs	r4, r3, r4
 8001c98:	42a3      	cmp	r3, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0xbc>
 8001caa:	e12b      	b.n	8001f04 <__aeabi_dsub+0x314>
 8001cac:	4653      	mov	r3, sl
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	0a53      	lsrs	r3, r2, #9
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0xcc>
 8001cba:	e166      	b.n	8001f8a <__aeabi_dsub+0x39a>
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f000 fc49 	bl	8002554 <__clzsi2>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	3b08      	subs	r3, #8
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	0020      	movs	r0, r4
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	4651      	mov	r1, sl
 8001cce:	40d0      	lsrs	r0, r2
 8001cd0:	4099      	lsls	r1, r3
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	409c      	lsls	r4, r3
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	dd00      	ble.n	8001cde <__aeabi_dsub+0xee>
 8001cdc:	e164      	b.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001cde:	1b9b      	subs	r3, r3, r6
 8001ce0:	1c59      	adds	r1, r3, #1
 8001ce2:	291f      	cmp	r1, #31
 8001ce4:	dd00      	ble.n	8001ce8 <__aeabi_dsub+0xf8>
 8001ce6:	e0fe      	b.n	8001ee6 <__aeabi_dsub+0x2f6>
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0010      	movs	r0, r2
 8001cec:	0026      	movs	r6, r4
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	409c      	lsls	r4, r3
 8001cf2:	4098      	lsls	r0, r3
 8001cf4:	40ce      	lsrs	r6, r1
 8001cf6:	40ca      	lsrs	r2, r1
 8001cf8:	1e63      	subs	r3, r4, #1
 8001cfa:	419c      	sbcs	r4, r3
 8001cfc:	4330      	orrs	r0, r6
 8001cfe:	4692      	mov	sl, r2
 8001d00:	2600      	movs	r6, #0
 8001d02:	4304      	orrs	r4, r0
 8001d04:	0763      	lsls	r3, r4, #29
 8001d06:	d009      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d08:	230f      	movs	r3, #15
 8001d0a:	4023      	ands	r3, r4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d005      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d10:	1d23      	adds	r3, r4, #4
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	41a4      	sbcs	r4, r4
 8001d16:	4264      	negs	r4, r4
 8001d18:	44a2      	add	sl, r4
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	4653      	mov	r3, sl
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	d400      	bmi.n	8001d24 <__aeabi_dsub+0x134>
 8001d22:	e0f2      	b.n	8001f0a <__aeabi_dsub+0x31a>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <__aeabi_dsub+0x368>)
 8001d26:	3601      	adds	r6, #1
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x13e>
 8001d2c:	e10f      	b.n	8001f4e <__aeabi_dsub+0x35e>
 8001d2e:	4653      	mov	r3, sl
 8001d30:	498a      	ldr	r1, [pc, #552]	; (8001f5c <__aeabi_dsub+0x36c>)
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	400b      	ands	r3, r1
 8001d36:	0019      	movs	r1, r3
 8001d38:	075b      	lsls	r3, r3, #29
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	0572      	lsls	r2, r6, #21
 8001d3e:	024c      	lsls	r4, r1, #9
 8001d40:	0b24      	lsrs	r4, r4, #12
 8001d42:	0d52      	lsrs	r2, r2, #21
 8001d44:	0512      	lsls	r2, r2, #20
 8001d46:	4322      	orrs	r2, r4
 8001d48:	07ed      	lsls	r5, r5, #31
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	b003      	add	sp, #12
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	1ab4      	subs	r4, r6, r2
 8001d60:	46a4      	mov	ip, r4
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	dd59      	ble.n	8001e1a <__aeabi_dsub+0x22a>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x17c>
 8001d6a:	e0b0      	b.n	8001ece <__aeabi_dsub+0x2de>
 8001d6c:	4556      	cmp	r6, sl
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x182>
 8001d70:	e0fa      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	4317      	orrs	r7, r2
 8001d78:	4662      	mov	r2, ip
 8001d7a:	2a38      	cmp	r2, #56	; 0x38
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x190>
 8001d7e:	e0d4      	b.n	8001f2a <__aeabi_dsub+0x33a>
 8001d80:	2a1f      	cmp	r2, #31
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x196>
 8001d84:	e1c0      	b.n	8002108 <__aeabi_dsub+0x518>
 8001d86:	0039      	movs	r1, r7
 8001d88:	3a20      	subs	r2, #32
 8001d8a:	40d1      	lsrs	r1, r2
 8001d8c:	4662      	mov	r2, ip
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d006      	beq.n	8001da0 <__aeabi_dsub+0x1b0>
 8001d92:	4664      	mov	r4, ip
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	1b12      	subs	r2, r2, r4
 8001d98:	003c      	movs	r4, r7
 8001d9a:	4094      	lsls	r4, r2
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	9401      	str	r4, [sp, #4]
 8001da0:	9c01      	ldr	r4, [sp, #4]
 8001da2:	1e62      	subs	r2, r4, #1
 8001da4:	4194      	sbcs	r4, r2
 8001da6:	430c      	orrs	r4, r1
 8001da8:	e0c3      	b.n	8001f32 <__aeabi_dsub+0x342>
 8001daa:	003c      	movs	r4, r7
 8001dac:	4304      	orrs	r4, r0
 8001dae:	d02b      	beq.n	8001e08 <__aeabi_dsub+0x218>
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d02e      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001db6:	4c6a      	ldr	r4, [pc, #424]	; (8001f60 <__aeabi_dsub+0x370>)
 8001db8:	46a4      	mov	ip, r4
 8001dba:	44b4      	add	ip, r6
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d05f      	beq.n	8001e82 <__aeabi_dsub+0x292>
 8001dc2:	1b94      	subs	r4, r2, r6
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x1dc>
 8001dca:	e120      	b.n	800200e <__aeabi_dsub+0x41e>
 8001dcc:	464c      	mov	r4, r9
 8001dce:	431c      	orrs	r4, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1e4>
 8001dd2:	e1c7      	b.n	8002164 <__aeabi_dsub+0x574>
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	1e4c      	subs	r4, r1, #1
 8001dd8:	2901      	cmp	r1, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1ee>
 8001ddc:	e223      	b.n	8002226 <__aeabi_dsub+0x636>
 8001dde:	4d5e      	ldr	r5, [pc, #376]	; (8001f58 <__aeabi_dsub+0x368>)
 8001de0:	45ac      	cmp	ip, r5
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x1f6>
 8001de4:	e1d8      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8001de6:	46a4      	mov	ip, r4
 8001de8:	e11a      	b.n	8002020 <__aeabi_dsub+0x430>
 8001dea:	003a      	movs	r2, r7
 8001dec:	4302      	orrs	r2, r0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x202>
 8001df0:	e0e4      	b.n	8001fbc <__aeabi_dsub+0x3cc>
 8001df2:	0022      	movs	r2, r4
 8001df4:	3a01      	subs	r2, #1
 8001df6:	2c01      	cmp	r4, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x20c>
 8001dfa:	e1c3      	b.n	8002184 <__aeabi_dsub+0x594>
 8001dfc:	4956      	ldr	r1, [pc, #344]	; (8001f58 <__aeabi_dsub+0x368>)
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x214>
 8001e02:	e0b1      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001e04:	4694      	mov	ip, r2
 8001e06:	e72b      	b.n	8001c60 <__aeabi_dsub+0x70>
 8001e08:	2401      	movs	r4, #1
 8001e0a:	4061      	eors	r1, r4
 8001e0c:	468b      	mov	fp, r1
 8001e0e:	428d      	cmp	r5, r1
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001e12:	e716      	b.n	8001c42 <__aeabi_dsub+0x52>
 8001e14:	4952      	ldr	r1, [pc, #328]	; (8001f60 <__aeabi_dsub+0x370>)
 8001e16:	468c      	mov	ip, r1
 8001e18:	44b4      	add	ip, r6
 8001e1a:	4664      	mov	r4, ip
 8001e1c:	2c00      	cmp	r4, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x232>
 8001e20:	e0d3      	b.n	8001fca <__aeabi_dsub+0x3da>
 8001e22:	1b91      	subs	r1, r2, r6
 8001e24:	468c      	mov	ip, r1
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x23c>
 8001e2a:	e15e      	b.n	80020ea <__aeabi_dsub+0x4fa>
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <__aeabi_dsub+0x368>)
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x244>
 8001e32:	e1be      	b.n	80021b2 <__aeabi_dsub+0x5c2>
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	464c      	mov	r4, r9
 8001e38:	0409      	lsls	r1, r1, #16
 8001e3a:	430c      	orrs	r4, r1
 8001e3c:	46a1      	mov	r9, r4
 8001e3e:	4661      	mov	r1, ip
 8001e40:	2938      	cmp	r1, #56	; 0x38
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x256>
 8001e44:	e1ba      	b.n	80021bc <__aeabi_dsub+0x5cc>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x25c>
 8001e4a:	e227      	b.n	800229c <__aeabi_dsub+0x6ac>
 8001e4c:	2420      	movs	r4, #32
 8001e4e:	1a64      	subs	r4, r4, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	40a1      	lsls	r1, r4
 8001e54:	001e      	movs	r6, r3
 8001e56:	4688      	mov	r8, r1
 8001e58:	4661      	mov	r1, ip
 8001e5a:	40a3      	lsls	r3, r4
 8001e5c:	40ce      	lsrs	r6, r1
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1e5c      	subs	r4, r3, #1
 8001e62:	41a3      	sbcs	r3, r4
 8001e64:	4331      	orrs	r1, r6
 8001e66:	4319      	orrs	r1, r3
 8001e68:	000c      	movs	r4, r1
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	40d9      	lsrs	r1, r3
 8001e70:	187f      	adds	r7, r7, r1
 8001e72:	1824      	adds	r4, r4, r0
 8001e74:	4284      	cmp	r4, r0
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	425b      	negs	r3, r3
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	0016      	movs	r6, r2
 8001e7e:	44ba      	add	sl, r7
 8001e80:	e05d      	b.n	8001f3e <__aeabi_dsub+0x34e>
 8001e82:	4c38      	ldr	r4, [pc, #224]	; (8001f64 <__aeabi_dsub+0x374>)
 8001e84:	1c72      	adds	r2, r6, #1
 8001e86:	4222      	tst	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x29c>
 8001e8a:	e0df      	b.n	800204c <__aeabi_dsub+0x45c>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	d000      	beq.n	8001e96 <__aeabi_dsub+0x2a6>
 8001e94:	e15c      	b.n	8002150 <__aeabi_dsub+0x560>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x2ac>
 8001e9a:	e1cf      	b.n	800223c <__aeabi_dsub+0x64c>
 8001e9c:	003a      	movs	r2, r7
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x2b4>
 8001ea2:	e17f      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001ea4:	1a1c      	subs	r4, r3, r0
 8001ea6:	464a      	mov	r2, r9
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	4189      	sbcs	r1, r1
 8001eac:	1bd2      	subs	r2, r2, r7
 8001eae:	4249      	negs	r1, r1
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	4692      	mov	sl, r2
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x2ca>
 8001eb8:	e20a      	b.n	80022d0 <__aeabi_dsub+0x6e0>
 8001eba:	1ac4      	subs	r4, r0, r3
 8001ebc:	42a0      	cmp	r0, r4
 8001ebe:	4180      	sbcs	r0, r0
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1aff      	subs	r7, r7, r3
 8001ec6:	1a3b      	subs	r3, r7, r0
 8001ec8:	469a      	mov	sl, r3
 8001eca:	465d      	mov	r5, fp
 8001ecc:	e71a      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	d073      	beq.n	8001fbc <__aeabi_dsub+0x3cc>
 8001ed4:	0022      	movs	r2, r4
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	2c01      	cmp	r4, #1
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x2ee>
 8001edc:	e0cb      	b.n	8002076 <__aeabi_dsub+0x486>
 8001ede:	4554      	cmp	r4, sl
 8001ee0:	d042      	beq.n	8001f68 <__aeabi_dsub+0x378>
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	e748      	b.n	8001d78 <__aeabi_dsub+0x188>
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	3b1f      	subs	r3, #31
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	2920      	cmp	r1, #32
 8001eee:	d003      	beq.n	8001ef8 <__aeabi_dsub+0x308>
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4314      	orrs	r4, r2
 8001ef8:	1e63      	subs	r3, r4, #1
 8001efa:	419c      	sbcs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	2600      	movs	r6, #0
 8001f00:	469a      	mov	sl, r3
 8001f02:	4304      	orrs	r4, r0
 8001f04:	0763      	lsls	r3, r4, #29
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x31a>
 8001f08:	e6fe      	b.n	8001d08 <__aeabi_dsub+0x118>
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	08e3      	lsrs	r3, r4, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4652      	mov	r2, sl
 8001f14:	46b4      	mov	ip, r6
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f1a:	458c      	cmp	ip, r1
 8001f1c:	d02a      	beq.n	8001f74 <__aeabi_dsub+0x384>
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	0b14      	lsrs	r4, r2, #12
 8001f22:	4662      	mov	r2, ip
 8001f24:	0552      	lsls	r2, r2, #21
 8001f26:	0d52      	lsrs	r2, r2, #21
 8001f28:	e70c      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f2a:	003c      	movs	r4, r7
 8001f2c:	4304      	orrs	r4, r0
 8001f2e:	1e62      	subs	r2, r4, #1
 8001f30:	4194      	sbcs	r4, r2
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	429c      	cmp	r4, r3
 8001f36:	4192      	sbcs	r2, r2
 8001f38:	4252      	negs	r2, r2
 8001f3a:	444a      	add	r2, r9
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	4653      	mov	r3, sl
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	d5df      	bpl.n	8001f04 <__aeabi_dsub+0x314>
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f46:	3601      	adds	r6, #1
 8001f48:	429e      	cmp	r6, r3
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dsub+0x35e>
 8001f4c:	e0a0      	b.n	8002090 <__aeabi_dsub+0x4a0>
 8001f4e:	0032      	movs	r2, r6
 8001f50:	2400      	movs	r4, #0
 8001f52:	2300      	movs	r3, #0
 8001f54:	e6f6      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000007fe 	.word	0x000007fe
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	0752      	lsls	r2, r2, #29
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	464a      	mov	r2, r9
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	0019      	movs	r1, r3
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x38c>
 8001f7a:	e1b5      	b.n	80022e8 <__aeabi_dsub+0x6f8>
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	4314      	orrs	r4, r2
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4ad5      	ldr	r2, [pc, #852]	; (80022dc <__aeabi_dsub+0x6ec>)
 8001f86:	0b24      	lsrs	r4, r4, #12
 8001f88:	e6dc      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f000 fae2 	bl	8002554 <__clzsi2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	3318      	adds	r3, #24
 8001f94:	2b1f      	cmp	r3, #31
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_dsub+0x3aa>
 8001f98:	e695      	b.n	8001cc6 <__aeabi_dsub+0xd6>
 8001f9a:	0022      	movs	r2, r4
 8001f9c:	3808      	subs	r0, #8
 8001f9e:	4082      	lsls	r2, r0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	429e      	cmp	r6, r3
 8001fa4:	dc00      	bgt.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001fa6:	e69a      	b.n	8001cde <__aeabi_dsub+0xee>
 8001fa8:	1af6      	subs	r6, r6, r3
 8001faa:	4bcd      	ldr	r3, [pc, #820]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e6a8      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001fb2:	003c      	movs	r4, r7
 8001fb4:	4304      	orrs	r4, r0
 8001fb6:	1e62      	subs	r2, r4, #1
 8001fb8:	4194      	sbcs	r4, r2
 8001fba:	e66c      	b.n	8001c96 <__aeabi_dsub+0xa6>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	0752      	lsls	r2, r2, #29
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	e7a6      	b.n	8001f18 <__aeabi_dsub+0x328>
 8001fca:	4cc6      	ldr	r4, [pc, #792]	; (80022e4 <__aeabi_dsub+0x6f4>)
 8001fcc:	1c72      	adds	r2, r6, #1
 8001fce:	4222      	tst	r2, r4
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x3e4>
 8001fd2:	e0ac      	b.n	800212e <__aeabi_dsub+0x53e>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	2e00      	cmp	r6, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x3ee>
 8001fdc:	e105      	b.n	80021ea <__aeabi_dsub+0x5fa>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x3f4>
 8001fe2:	e156      	b.n	8002292 <__aeabi_dsub+0x6a2>
 8001fe4:	003a      	movs	r2, r7
 8001fe6:	4302      	orrs	r2, r0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x3fc>
 8001fea:	e0db      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001fec:	181c      	adds	r4, r3, r0
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	444f      	add	r7, r9
 8001ff4:	46ba      	mov	sl, r7
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	449a      	add	sl, r3
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	d400      	bmi.n	8002002 <__aeabi_dsub+0x412>
 8002000:	e780      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002002:	4652      	mov	r2, sl
 8002004:	4bb6      	ldr	r3, [pc, #728]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002006:	2601      	movs	r6, #1
 8002008:	401a      	ands	r2, r3
 800200a:	4692      	mov	sl, r2
 800200c:	e77a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800200e:	4cb3      	ldr	r4, [pc, #716]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002010:	42a2      	cmp	r2, r4
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x426>
 8002014:	e0c0      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8002016:	2480      	movs	r4, #128	; 0x80
 8002018:	464d      	mov	r5, r9
 800201a:	0424      	lsls	r4, r4, #16
 800201c:	4325      	orrs	r5, r4
 800201e:	46a9      	mov	r9, r5
 8002020:	4664      	mov	r4, ip
 8002022:	2c38      	cmp	r4, #56	; 0x38
 8002024:	dc53      	bgt.n	80020ce <__aeabi_dsub+0x4de>
 8002026:	4661      	mov	r1, ip
 8002028:	2c1f      	cmp	r4, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x43e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_dsub+0x5da>
 800202e:	2520      	movs	r5, #32
 8002030:	001e      	movs	r6, r3
 8002032:	1b2d      	subs	r5, r5, r4
 8002034:	464c      	mov	r4, r9
 8002036:	40ab      	lsls	r3, r5
 8002038:	40ac      	lsls	r4, r5
 800203a:	40ce      	lsrs	r6, r1
 800203c:	1e5d      	subs	r5, r3, #1
 800203e:	41ab      	sbcs	r3, r5
 8002040:	4334      	orrs	r4, r6
 8002042:	4323      	orrs	r3, r4
 8002044:	464c      	mov	r4, r9
 8002046:	40cc      	lsrs	r4, r1
 8002048:	1b3f      	subs	r7, r7, r4
 800204a:	e045      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 800204c:	464a      	mov	r2, r9
 800204e:	1a1c      	subs	r4, r3, r0
 8002050:	1bd1      	subs	r1, r2, r7
 8002052:	42a3      	cmp	r3, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	4252      	negs	r2, r2
 8002058:	4692      	mov	sl, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4651      	mov	r1, sl
 800205e:	1a52      	subs	r2, r2, r1
 8002060:	4692      	mov	sl, r2
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	d500      	bpl.n	8002068 <__aeabi_dsub+0x478>
 8002066:	e083      	b.n	8002170 <__aeabi_dsub+0x580>
 8002068:	4653      	mov	r3, sl
 800206a:	4323      	orrs	r3, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x480>
 800206e:	e621      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	e753      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002076:	181c      	adds	r4, r3, r0
 8002078:	429c      	cmp	r4, r3
 800207a:	419b      	sbcs	r3, r3
 800207c:	444f      	add	r7, r9
 800207e:	46ba      	mov	sl, r7
 8002080:	425b      	negs	r3, r3
 8002082:	449a      	add	sl, r3
 8002084:	4653      	mov	r3, sl
 8002086:	2601      	movs	r6, #1
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x49e>
 800208c:	e73a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800208e:	2602      	movs	r6, #2
 8002090:	4652      	mov	r2, sl
 8002092:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002094:	2101      	movs	r1, #1
 8002096:	401a      	ands	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	4021      	ands	r1, r4
 800209c:	0862      	lsrs	r2, r4, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	07dc      	lsls	r4, r3, #31
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	469a      	mov	sl, r3
 80020a6:	4314      	orrs	r4, r2
 80020a8:	e62c      	b.n	8001d04 <__aeabi_dsub+0x114>
 80020aa:	0039      	movs	r1, r7
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d1      	lsrs	r1, r2
 80020b0:	4662      	mov	r2, ip
 80020b2:	2a20      	cmp	r2, #32
 80020b4:	d006      	beq.n	80020c4 <__aeabi_dsub+0x4d4>
 80020b6:	4664      	mov	r4, ip
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	1b12      	subs	r2, r2, r4
 80020bc:	003c      	movs	r4, r7
 80020be:	4094      	lsls	r4, r2
 80020c0:	4304      	orrs	r4, r0
 80020c2:	9401      	str	r4, [sp, #4]
 80020c4:	9c01      	ldr	r4, [sp, #4]
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	e5e3      	b.n	8001c96 <__aeabi_dsub+0xa6>
 80020ce:	4649      	mov	r1, r9
 80020d0:	4319      	orrs	r1, r3
 80020d2:	000b      	movs	r3, r1
 80020d4:	1e5c      	subs	r4, r3, #1
 80020d6:	41a3      	sbcs	r3, r4
 80020d8:	1ac4      	subs	r4, r0, r3
 80020da:	42a0      	cmp	r0, r4
 80020dc:	419b      	sbcs	r3, r3
 80020de:	425b      	negs	r3, r3
 80020e0:	1afb      	subs	r3, r7, r3
 80020e2:	469a      	mov	sl, r3
 80020e4:	465d      	mov	r5, fp
 80020e6:	0016      	movs	r6, r2
 80020e8:	e5dc      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 80020ea:	4649      	mov	r1, r9
 80020ec:	4319      	orrs	r1, r3
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x502>
 80020f0:	e0ae      	b.n	8002250 <__aeabi_dsub+0x660>
 80020f2:	4661      	mov	r1, ip
 80020f4:	4664      	mov	r4, ip
 80020f6:	3901      	subs	r1, #1
 80020f8:	2c01      	cmp	r4, #1
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x50e>
 80020fc:	e0e0      	b.n	80022c0 <__aeabi_dsub+0x6d0>
 80020fe:	4c77      	ldr	r4, [pc, #476]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002100:	45a4      	cmp	ip, r4
 8002102:	d056      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 8002104:	468c      	mov	ip, r1
 8002106:	e69a      	b.n	8001e3e <__aeabi_dsub+0x24e>
 8002108:	4661      	mov	r1, ip
 800210a:	2220      	movs	r2, #32
 800210c:	003c      	movs	r4, r7
 800210e:	1a52      	subs	r2, r2, r1
 8002110:	4094      	lsls	r4, r2
 8002112:	0001      	movs	r1, r0
 8002114:	4090      	lsls	r0, r2
 8002116:	46a0      	mov	r8, r4
 8002118:	4664      	mov	r4, ip
 800211a:	1e42      	subs	r2, r0, #1
 800211c:	4190      	sbcs	r0, r2
 800211e:	4662      	mov	r2, ip
 8002120:	40e1      	lsrs	r1, r4
 8002122:	4644      	mov	r4, r8
 8002124:	40d7      	lsrs	r7, r2
 8002126:	430c      	orrs	r4, r1
 8002128:	4304      	orrs	r4, r0
 800212a:	44b9      	add	r9, r7
 800212c:	e701      	b.n	8001f32 <__aeabi_dsub+0x342>
 800212e:	496b      	ldr	r1, [pc, #428]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002130:	428a      	cmp	r2, r1
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x546>
 8002134:	e70c      	b.n	8001f50 <__aeabi_dsub+0x360>
 8002136:	1818      	adds	r0, r3, r0
 8002138:	4298      	cmp	r0, r3
 800213a:	419b      	sbcs	r3, r3
 800213c:	444f      	add	r7, r9
 800213e:	425b      	negs	r3, r3
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	07dc      	lsls	r4, r3, #31
 8002144:	0840      	lsrs	r0, r0, #1
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	469a      	mov	sl, r3
 800214a:	0016      	movs	r6, r2
 800214c:	4304      	orrs	r4, r0
 800214e:	e6d9      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d000      	beq.n	8002156 <__aeabi_dsub+0x566>
 8002154:	e081      	b.n	800225a <__aeabi_dsub+0x66a>
 8002156:	003b      	movs	r3, r7
 8002158:	4303      	orrs	r3, r0
 800215a:	d11d      	bne.n	8002198 <__aeabi_dsub+0x5a8>
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2500      	movs	r5, #0
 8002160:	0312      	lsls	r2, r2, #12
 8002162:	e70b      	b.n	8001f7c <__aeabi_dsub+0x38c>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	077b      	lsls	r3, r7, #29
 8002168:	465d      	mov	r5, fp
 800216a:	4303      	orrs	r3, r0
 800216c:	08fa      	lsrs	r2, r7, #3
 800216e:	e6d3      	b.n	8001f18 <__aeabi_dsub+0x328>
 8002170:	1ac4      	subs	r4, r0, r3
 8002172:	42a0      	cmp	r0, r4
 8002174:	4180      	sbcs	r0, r0
 8002176:	464b      	mov	r3, r9
 8002178:	4240      	negs	r0, r0
 800217a:	1aff      	subs	r7, r7, r3
 800217c:	1a3b      	subs	r3, r7, r0
 800217e:	469a      	mov	sl, r3
 8002180:	465d      	mov	r5, fp
 8002182:	e597      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002184:	1a1c      	subs	r4, r3, r0
 8002186:	464a      	mov	r2, r9
 8002188:	42a3      	cmp	r3, r4
 800218a:	419b      	sbcs	r3, r3
 800218c:	1bd7      	subs	r7, r2, r7
 800218e:	425b      	negs	r3, r3
 8002190:	1afb      	subs	r3, r7, r3
 8002192:	469a      	mov	sl, r3
 8002194:	2601      	movs	r6, #1
 8002196:	e585      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e6e7      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021a4:	464a      	mov	r2, r9
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	0752      	lsls	r2, r2, #29
 80021aa:	4313      	orrs	r3, r2
 80021ac:	464a      	mov	r2, r9
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	e6b5      	b.n	8001f1e <__aeabi_dsub+0x32e>
 80021b2:	08c0      	lsrs	r0, r0, #3
 80021b4:	077b      	lsls	r3, r7, #29
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6db      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021bc:	4649      	mov	r1, r9
 80021be:	4319      	orrs	r1, r3
 80021c0:	000b      	movs	r3, r1
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	418b      	sbcs	r3, r1
 80021c6:	001c      	movs	r4, r3
 80021c8:	e653      	b.n	8001e72 <__aeabi_dsub+0x282>
 80021ca:	464d      	mov	r5, r9
 80021cc:	3c20      	subs	r4, #32
 80021ce:	40e5      	lsrs	r5, r4
 80021d0:	2920      	cmp	r1, #32
 80021d2:	d005      	beq.n	80021e0 <__aeabi_dsub+0x5f0>
 80021d4:	2440      	movs	r4, #64	; 0x40
 80021d6:	1a64      	subs	r4, r4, r1
 80021d8:	4649      	mov	r1, r9
 80021da:	40a1      	lsls	r1, r4
 80021dc:	430b      	orrs	r3, r1
 80021de:	4698      	mov	r8, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	1e5c      	subs	r4, r3, #1
 80021e4:	41a3      	sbcs	r3, r4
 80021e6:	432b      	orrs	r3, r5
 80021e8:	e776      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d0e1      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 80021ee:	003a      	movs	r2, r7
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x608>
 80021f6:	e6b8      	b.n	8001f6a <__aeabi_dsub+0x37a>
 80021f8:	464a      	mov	r2, r9
 80021fa:	0752      	lsls	r2, r2, #29
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	4313      	orrs	r3, r2
 8002200:	464a      	mov	r2, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	08d2      	lsrs	r2, r2, #3
 8002206:	4222      	tst	r2, r4
 8002208:	d007      	beq.n	800221a <__aeabi_dsub+0x62a>
 800220a:	08fe      	lsrs	r6, r7, #3
 800220c:	4226      	tst	r6, r4
 800220e:	d104      	bne.n	800221a <__aeabi_dsub+0x62a>
 8002210:	465d      	mov	r5, fp
 8002212:	0032      	movs	r2, r6
 8002214:	08c3      	lsrs	r3, r0, #3
 8002216:	077f      	lsls	r7, r7, #29
 8002218:	433b      	orrs	r3, r7
 800221a:	0f59      	lsrs	r1, r3, #29
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	0749      	lsls	r1, r1, #29
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	430b      	orrs	r3, r1
 8002224:	e6a6      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002226:	1ac4      	subs	r4, r0, r3
 8002228:	42a0      	cmp	r0, r4
 800222a:	4180      	sbcs	r0, r0
 800222c:	464b      	mov	r3, r9
 800222e:	4240      	negs	r0, r0
 8002230:	1aff      	subs	r7, r7, r3
 8002232:	1a3b      	subs	r3, r7, r0
 8002234:	469a      	mov	sl, r3
 8002236:	465d      	mov	r5, fp
 8002238:	2601      	movs	r6, #1
 800223a:	e533      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 800223c:	003b      	movs	r3, r7
 800223e:	4303      	orrs	r3, r0
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x654>
 8002242:	e715      	b.n	8002070 <__aeabi_dsub+0x480>
 8002244:	08c0      	lsrs	r0, r0, #3
 8002246:	077b      	lsls	r3, r7, #29
 8002248:	465d      	mov	r5, fp
 800224a:	4303      	orrs	r3, r0
 800224c:	08fa      	lsrs	r2, r7, #3
 800224e:	e666      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	077b      	lsls	r3, r7, #29
 8002254:	4303      	orrs	r3, r0
 8002256:	08fa      	lsrs	r2, r7, #3
 8002258:	e65e      	b.n	8001f18 <__aeabi_dsub+0x328>
 800225a:	003a      	movs	r2, r7
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4302      	orrs	r2, r0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x674>
 8002262:	e682      	b.n	8001f6a <__aeabi_dsub+0x37a>
 8002264:	464a      	mov	r2, r9
 8002266:	0752      	lsls	r2, r2, #29
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	4313      	orrs	r3, r2
 800226c:	464a      	mov	r2, r9
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	4222      	tst	r2, r4
 8002274:	d007      	beq.n	8002286 <__aeabi_dsub+0x696>
 8002276:	08fe      	lsrs	r6, r7, #3
 8002278:	4226      	tst	r6, r4
 800227a:	d104      	bne.n	8002286 <__aeabi_dsub+0x696>
 800227c:	465d      	mov	r5, fp
 800227e:	0032      	movs	r2, r6
 8002280:	08c3      	lsrs	r3, r0, #3
 8002282:	077f      	lsls	r7, r7, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	0f59      	lsrs	r1, r3, #29
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	e670      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002292:	08c0      	lsrs	r0, r0, #3
 8002294:	077b      	lsls	r3, r7, #29
 8002296:	4303      	orrs	r3, r0
 8002298:	08fa      	lsrs	r2, r7, #3
 800229a:	e640      	b.n	8001f1e <__aeabi_dsub+0x32e>
 800229c:	464c      	mov	r4, r9
 800229e:	3920      	subs	r1, #32
 80022a0:	40cc      	lsrs	r4, r1
 80022a2:	4661      	mov	r1, ip
 80022a4:	2920      	cmp	r1, #32
 80022a6:	d006      	beq.n	80022b6 <__aeabi_dsub+0x6c6>
 80022a8:	4666      	mov	r6, ip
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	1b89      	subs	r1, r1, r6
 80022ae:	464e      	mov	r6, r9
 80022b0:	408e      	lsls	r6, r1
 80022b2:	4333      	orrs	r3, r6
 80022b4:	4698      	mov	r8, r3
 80022b6:	4643      	mov	r3, r8
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	418b      	sbcs	r3, r1
 80022bc:	431c      	orrs	r4, r3
 80022be:	e5d8      	b.n	8001e72 <__aeabi_dsub+0x282>
 80022c0:	181c      	adds	r4, r3, r0
 80022c2:	4284      	cmp	r4, r0
 80022c4:	4180      	sbcs	r0, r0
 80022c6:	444f      	add	r7, r9
 80022c8:	46ba      	mov	sl, r7
 80022ca:	4240      	negs	r0, r0
 80022cc:	4482      	add	sl, r0
 80022ce:	e6d9      	b.n	8002084 <__aeabi_dsub+0x494>
 80022d0:	4653      	mov	r3, sl
 80022d2:	4323      	orrs	r3, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x6e8>
 80022d6:	e6cb      	b.n	8002070 <__aeabi_dsub+0x480>
 80022d8:	e614      	b.n	8001f04 <__aeabi_dsub+0x314>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000007ff 	.word	0x000007ff
 80022e0:	ff7fffff 	.word	0xff7fffff
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	2300      	movs	r3, #0
 80022ea:	4a01      	ldr	r2, [pc, #4]	; (80022f0 <__aeabi_dsub+0x700>)
 80022ec:	001c      	movs	r4, r3
 80022ee:	e529      	b.n	8001d44 <__aeabi_dsub+0x154>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dcmpun>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0005      	movs	r5, r0
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <__aeabi_dcmpun+0x38>)
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	0016      	movs	r6, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	0d49      	lsrs	r1, r1, #21
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d5b      	lsrs	r3, r3, #21
 800230c:	4281      	cmp	r1, r0
 800230e:	d008      	beq.n	8002322 <__aeabi_dcmpun+0x2e>
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <__aeabi_dcmpun+0x38>)
 8002312:	2000      	movs	r0, #0
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002318:	0020      	movs	r0, r4
 800231a:	4330      	orrs	r0, r6
 800231c:	1e43      	subs	r3, r0, #1
 800231e:	4198      	sbcs	r0, r3
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	2001      	movs	r0, #1
 8002324:	432a      	orrs	r2, r5
 8002326:	d1fb      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002328:	e7f2      	b.n	8002310 <__aeabi_dcmpun+0x1c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff

08002330 <__aeabi_d2iz>:
 8002330:	000a      	movs	r2, r1
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	4c13      	ldr	r4, [pc, #76]	; (8002384 <__aeabi_d2iz+0x54>)
 8002336:	0053      	lsls	r3, r2, #1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	0005      	movs	r5, r0
 800233c:	0b09      	lsrs	r1, r1, #12
 800233e:	2000      	movs	r0, #0
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	0fd2      	lsrs	r2, r2, #31
 8002344:	42a3      	cmp	r3, r4
 8002346:	dd04      	ble.n	8002352 <__aeabi_d2iz+0x22>
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <__aeabi_d2iz+0x58>)
 800234a:	4283      	cmp	r3, r0
 800234c:	dd02      	ble.n	8002354 <__aeabi_d2iz+0x24>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_d2iz+0x5c>)
 8002350:	18d0      	adds	r0, r2, r3
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	0340      	lsls	r0, r0, #13
 8002358:	4301      	orrs	r1, r0
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <__aeabi_d2iz+0x60>)
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	281f      	cmp	r0, #31
 8002360:	dd08      	ble.n	8002374 <__aeabi_d2iz+0x44>
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <__aeabi_d2iz+0x64>)
 8002364:	1ac3      	subs	r3, r0, r3
 8002366:	40d9      	lsrs	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	4258      	negs	r0, r3
 800236c:	2a00      	cmp	r2, #0
 800236e:	d1f0      	bne.n	8002352 <__aeabi_d2iz+0x22>
 8002370:	0018      	movs	r0, r3
 8002372:	e7ee      	b.n	8002352 <__aeabi_d2iz+0x22>
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <__aeabi_d2iz+0x68>)
 8002376:	40c5      	lsrs	r5, r0
 8002378:	46a4      	mov	ip, r4
 800237a:	4463      	add	r3, ip
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	432b      	orrs	r3, r5
 8002382:	e7f2      	b.n	800236a <__aeabi_d2iz+0x3a>
 8002384:	000003fe 	.word	0x000003fe
 8002388:	0000041d 	.word	0x0000041d
 800238c:	7fffffff 	.word	0x7fffffff
 8002390:	00000433 	.word	0x00000433
 8002394:	00000413 	.word	0x00000413
 8002398:	fffffbed 	.word	0xfffffbed

0800239c <__aeabi_i2d>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2800      	cmp	r0, #0
 80023a0:	d016      	beq.n	80023d0 <__aeabi_i2d+0x34>
 80023a2:	17c3      	asrs	r3, r0, #31
 80023a4:	18c5      	adds	r5, r0, r3
 80023a6:	405d      	eors	r5, r3
 80023a8:	0fc4      	lsrs	r4, r0, #31
 80023aa:	0028      	movs	r0, r5
 80023ac:	f000 f8d2 	bl	8002554 <__clzsi2>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <__aeabi_i2d+0x5c>)
 80023b2:	1a1b      	subs	r3, r3, r0
 80023b4:	280a      	cmp	r0, #10
 80023b6:	dc16      	bgt.n	80023e6 <__aeabi_i2d+0x4a>
 80023b8:	0002      	movs	r2, r0
 80023ba:	002e      	movs	r6, r5
 80023bc:	3215      	adds	r2, #21
 80023be:	4096      	lsls	r6, r2
 80023c0:	220b      	movs	r2, #11
 80023c2:	1a12      	subs	r2, r2, r0
 80023c4:	40d5      	lsrs	r5, r2
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	e003      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023d0:	2400      	movs	r4, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	2500      	movs	r5, #0
 80023d6:	2600      	movs	r6, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	432b      	orrs	r3, r5
 80023dc:	07e4      	lsls	r4, r4, #31
 80023de:	4323      	orrs	r3, r4
 80023e0:	0030      	movs	r0, r6
 80023e2:	0019      	movs	r1, r3
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	380b      	subs	r0, #11
 80023e8:	4085      	lsls	r5, r0
 80023ea:	055b      	lsls	r3, r3, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	2600      	movs	r6, #0
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	e7f0      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0000041e 	.word	0x0000041e

080023fc <__aeabi_ui2d>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e04      	subs	r4, r0, #0
 8002400:	d010      	beq.n	8002424 <__aeabi_ui2d+0x28>
 8002402:	f000 f8a7 	bl	8002554 <__clzsi2>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <__aeabi_ui2d+0x48>)
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	280a      	cmp	r0, #10
 800240c:	dc11      	bgt.n	8002432 <__aeabi_ui2d+0x36>
 800240e:	220b      	movs	r2, #11
 8002410:	0021      	movs	r1, r4
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d1      	lsrs	r1, r2
 8002416:	3015      	adds	r0, #21
 8002418:	030a      	lsls	r2, r1, #12
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4084      	lsls	r4, r0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e001      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	4313      	orrs	r3, r2
 800242c:	0020      	movs	r0, r4
 800242e:	0019      	movs	r1, r3
 8002430:	bd10      	pop	{r4, pc}
 8002432:	0022      	movs	r2, r4
 8002434:	380b      	subs	r0, #11
 8002436:	4082      	lsls	r2, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	2400      	movs	r4, #0
 800243e:	0b12      	lsrs	r2, r2, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	e7f1      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_d2f>:
 8002448:	0002      	movs	r2, r0
 800244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244c:	004b      	lsls	r3, r1, #1
 800244e:	030d      	lsls	r5, r1, #12
 8002450:	0f40      	lsrs	r0, r0, #29
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	0fcc      	lsrs	r4, r1, #31
 8002456:	0a6d      	lsrs	r5, r5, #9
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <__aeabi_d2f+0xfc>)
 800245a:	4305      	orrs	r5, r0
 800245c:	1c58      	adds	r0, r3, #1
 800245e:	00d7      	lsls	r7, r2, #3
 8002460:	4208      	tst	r0, r1
 8002462:	d00a      	beq.n	800247a <__aeabi_d2f+0x32>
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <__aeabi_d2f+0x100>)
 8002466:	1859      	adds	r1, r3, r1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	dd16      	ble.n	800249a <__aeabi_d2f+0x52>
 800246c:	20ff      	movs	r0, #255	; 0xff
 800246e:	2200      	movs	r2, #0
 8002470:	05c0      	lsls	r0, r0, #23
 8002472:	4310      	orrs	r0, r2
 8002474:	07e4      	lsls	r4, r4, #31
 8002476:	4320      	orrs	r0, r4
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <__aeabi_d2f+0x44>
 800247e:	433d      	orrs	r5, r7
 8002480:	d026      	beq.n	80024d0 <__aeabi_d2f+0x88>
 8002482:	2205      	movs	r2, #5
 8002484:	0192      	lsls	r2, r2, #6
 8002486:	0a52      	lsrs	r2, r2, #9
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	e7f1      	b.n	8002470 <__aeabi_d2f+0x28>
 800248c:	432f      	orrs	r7, r5
 800248e:	d0ed      	beq.n	800246c <__aeabi_d2f+0x24>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	03d2      	lsls	r2, r2, #15
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	432a      	orrs	r2, r5
 8002498:	e7ea      	b.n	8002470 <__aeabi_d2f+0x28>
 800249a:	2900      	cmp	r1, #0
 800249c:	dd1b      	ble.n	80024d6 <__aeabi_d2f+0x8e>
 800249e:	0192      	lsls	r2, r2, #6
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	4182      	sbcs	r2, r0
 80024a4:	00ed      	lsls	r5, r5, #3
 80024a6:	0f7f      	lsrs	r7, r7, #29
 80024a8:	432a      	orrs	r2, r5
 80024aa:	433a      	orrs	r2, r7
 80024ac:	0753      	lsls	r3, r2, #29
 80024ae:	d047      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024b0:	230f      	movs	r3, #15
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d000      	beq.n	80024ba <__aeabi_d2f+0x72>
 80024b8:	3204      	adds	r2, #4
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	04db      	lsls	r3, r3, #19
 80024be:	4013      	ands	r3, r2
 80024c0:	d03e      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024c2:	1c48      	adds	r0, r1, #1
 80024c4:	29fe      	cmp	r1, #254	; 0xfe
 80024c6:	d0d1      	beq.n	800246c <__aeabi_d2f+0x24>
 80024c8:	0192      	lsls	r2, r2, #6
 80024ca:	0a52      	lsrs	r2, r2, #9
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	e7cf      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d0:	2000      	movs	r0, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	e7cc      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d6:	000a      	movs	r2, r1
 80024d8:	3217      	adds	r2, #23
 80024da:	db2f      	blt.n	800253c <__aeabi_d2f+0xf4>
 80024dc:	2680      	movs	r6, #128	; 0x80
 80024de:	0436      	lsls	r6, r6, #16
 80024e0:	432e      	orrs	r6, r5
 80024e2:	251e      	movs	r5, #30
 80024e4:	1a6d      	subs	r5, r5, r1
 80024e6:	2d1f      	cmp	r5, #31
 80024e8:	dd11      	ble.n	800250e <__aeabi_d2f+0xc6>
 80024ea:	2202      	movs	r2, #2
 80024ec:	4252      	negs	r2, r2
 80024ee:	1a52      	subs	r2, r2, r1
 80024f0:	0031      	movs	r1, r6
 80024f2:	40d1      	lsrs	r1, r2
 80024f4:	2d20      	cmp	r5, #32
 80024f6:	d004      	beq.n	8002502 <__aeabi_d2f+0xba>
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <__aeabi_d2f+0x104>)
 80024fa:	4694      	mov	ip, r2
 80024fc:	4463      	add	r3, ip
 80024fe:	409e      	lsls	r6, r3
 8002500:	4337      	orrs	r7, r6
 8002502:	003a      	movs	r2, r7
 8002504:	1e53      	subs	r3, r2, #1
 8002506:	419a      	sbcs	r2, r3
 8002508:	430a      	orrs	r2, r1
 800250a:	2100      	movs	r1, #0
 800250c:	e7ce      	b.n	80024ac <__aeabi_d2f+0x64>
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <__aeabi_d2f+0x108>)
 8002510:	0038      	movs	r0, r7
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	4098      	lsls	r0, r3
 8002518:	003a      	movs	r2, r7
 800251a:	1e41      	subs	r1, r0, #1
 800251c:	4188      	sbcs	r0, r1
 800251e:	409e      	lsls	r6, r3
 8002520:	40ea      	lsrs	r2, r5
 8002522:	4330      	orrs	r0, r6
 8002524:	4302      	orrs	r2, r0
 8002526:	2100      	movs	r1, #0
 8002528:	0753      	lsls	r3, r2, #29
 800252a:	d1c1      	bne.n	80024b0 <__aeabi_d2f+0x68>
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0013      	movs	r3, r2
 8002530:	04c9      	lsls	r1, r1, #19
 8002532:	2001      	movs	r0, #1
 8002534:	400b      	ands	r3, r1
 8002536:	420a      	tst	r2, r1
 8002538:	d1c6      	bne.n	80024c8 <__aeabi_d2f+0x80>
 800253a:	e7a3      	b.n	8002484 <__aeabi_d2f+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	e7a0      	b.n	8002482 <__aeabi_d2f+0x3a>
 8002540:	000b      	movs	r3, r1
 8002542:	e79f      	b.n	8002484 <__aeabi_d2f+0x3c>
 8002544:	000007fe 	.word	0x000007fe
 8002548:	fffffc80 	.word	0xfffffc80
 800254c:	fffffca2 	.word	0xfffffca2
 8002550:	fffffc82 	.word	0xfffffc82

08002554 <__clzsi2>:
 8002554:	211c      	movs	r1, #28
 8002556:	2301      	movs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	4298      	cmp	r0, r3
 800255c:	d301      	bcc.n	8002562 <__clzsi2+0xe>
 800255e:	0c00      	lsrs	r0, r0, #16
 8002560:	3910      	subs	r1, #16
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	4298      	cmp	r0, r3
 8002566:	d301      	bcc.n	800256c <__clzsi2+0x18>
 8002568:	0a00      	lsrs	r0, r0, #8
 800256a:	3908      	subs	r1, #8
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	4298      	cmp	r0, r3
 8002570:	d301      	bcc.n	8002576 <__clzsi2+0x22>
 8002572:	0900      	lsrs	r0, r0, #4
 8002574:	3904      	subs	r1, #4
 8002576:	a202      	add	r2, pc, #8	; (adr r2, 8002580 <__clzsi2+0x2c>)
 8002578:	5c10      	ldrb	r0, [r2, r0]
 800257a:	1840      	adds	r0, r0, r1
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	02020304 	.word	0x02020304
 8002584:	01010101 	.word	0x01010101
	...

08002590 <__clzdi2>:
 8002590:	b510      	push	{r4, lr}
 8002592:	2900      	cmp	r1, #0
 8002594:	d103      	bne.n	800259e <__clzdi2+0xe>
 8002596:	f7ff ffdd 	bl	8002554 <__clzsi2>
 800259a:	3020      	adds	r0, #32
 800259c:	e002      	b.n	80025a4 <__clzdi2+0x14>
 800259e:	0008      	movs	r0, r1
 80025a0:	f7ff ffd8 	bl	8002554 <__clzsi2>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025ae:	f001 f8f3 	bl	8003798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b2:	f000 f8f5 	bl	80027a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025b6:	f000 fb2f 	bl	8002c18 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80025ba:	f000 faab 	bl	8002b14 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80025be:	f000 fa5b 	bl	8002a78 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80025c2:	f000 faf5 	bl	8002bb0 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80025c6:	f000 fa19 	bl	80029fc <MX_TIM6_Init>
  MX_RTC_Init();
 80025ca:	f000 f935 	bl	8002838 <MX_RTC_Init>
  MX_SPI1_Init();
 80025ce:	f000 f9d7 	bl	8002980 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit ( &huart2 , (uint8_t*) hello , strlen (hello) , UART_TIMEOUT ) ;
 80025d2:	4b59      	ldr	r3, [pc, #356]	; (8002738 <main+0x190>)
 80025d4:	681c      	ldr	r4, [r3, #0]
 80025d6:	4b58      	ldr	r3, [pc, #352]	; (8002738 <main+0x190>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	0018      	movs	r0, r3
 80025dc:	f7fd fd92 	bl	8000104 <strlen>
 80025e0:	0003      	movs	r3, r0
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	23fa      	movs	r3, #250	; 0xfa
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4854      	ldr	r0, [pc, #336]	; (800273c <main+0x194>)
 80025ea:	0021      	movs	r1, r4
 80025ec:	f004 fb82 	bl	8006cf4 <HAL_UART_Transmit>

  is_system_already_initialized = is_system_initialized () ;
 80025f0:	f000 fcfc 	bl	8002fec <is_system_initialized>
 80025f4:	0003      	movs	r3, r0
 80025f6:	001a      	movs	r2, r3
 80025f8:	4b51      	ldr	r3, [pc, #324]	; (8002740 <main+0x198>)
 80025fa:	701a      	strb	r2, [r3, #0]

  lis2dw12_ctx.write_reg = platform_write ;
 80025fc:	4b51      	ldr	r3, [pc, #324]	; (8002744 <main+0x19c>)
 80025fe:	4a52      	ldr	r2, [pc, #328]	; (8002748 <main+0x1a0>)
 8002600:	601a      	str	r2, [r3, #0]
  lis2dw12_ctx.read_reg = platform_read ;
 8002602:	4b50      	ldr	r3, [pc, #320]	; (8002744 <main+0x19c>)
 8002604:	4a51      	ldr	r2, [pc, #324]	; (800274c <main+0x1a4>)
 8002606:	605a      	str	r2, [r3, #4]
  lis2dw12_ctx.handle = LIS2DW12 ;
 8002608:	4b4e      	ldr	r3, [pc, #312]	; (8002744 <main+0x19c>)
 800260a:	4a51      	ldr	r2, [pc, #324]	; (8002750 <main+0x1a8>)
 800260c:	60da      	str	r2, [r3, #12]
  lis2dw12_device_id_get ( &lis2dw12_ctx , &lis2dw12_whoami_reg ) ;
 800260e:	4a51      	ldr	r2, [pc, #324]	; (8002754 <main+0x1ac>)
 8002610:	4b4c      	ldr	r3, [pc, #304]	; (8002744 <main+0x19c>)
 8002612:	0011      	movs	r1, r2
 8002614:	0018      	movs	r0, r3
 8002616:	f006 ff8c 	bl	8009532 <lis2dw12_device_id_get>

  if ( !my_astro_init () )
 800261a:	f006 ff9d 	bl	8009558 <my_astro_init>
 800261e:	0003      	movs	r3, r0
 8002620:	001a      	movs	r2, r3
 8002622:	2301      	movs	r3, #1
 8002624:	4053      	eors	r3, r2
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <main+0x88>
  {
	  HAL_NVIC_SystemReset () ;
 800262c:	f001 fa41 	bl	8003ab2 <HAL_NVIC_SystemReset>
  }

  astro_geo_wr_latitude = 0 ;
 8002630:	4b49      	ldr	r3, [pc, #292]	; (8002758 <main+0x1b0>)
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
  astro_geo_wr_longitude = 0 ;
 8002636:	4b49      	ldr	r3, [pc, #292]	; (800275c <main+0x1b4>)
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
  if ( my_lx6_get_coordinates ( my_lx6_gnss_max_active_time , nmea_pdop_ths , &nmea_fixed_pdop_d , &astro_geo_wr_latitude , &astro_geo_wr_longitude ) )
 800263c:	4b48      	ldr	r3, [pc, #288]	; (8002760 <main+0x1b8>)
 800263e:	8818      	ldrh	r0, [r3, #0]
 8002640:	4b48      	ldr	r3, [pc, #288]	; (8002764 <main+0x1bc>)
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	4945      	ldr	r1, [pc, #276]	; (800275c <main+0x1b4>)
 8002648:	9102      	str	r1, [sp, #8]
 800264a:	4943      	ldr	r1, [pc, #268]	; (8002758 <main+0x1b0>)
 800264c:	9101      	str	r1, [sp, #4]
 800264e:	4946      	ldr	r1, [pc, #280]	; (8002768 <main+0x1c0>)
 8002650:	9100      	str	r1, [sp, #0]
 8002652:	f007 f84f 	bl	80096f4 <my_lx6_get_coordinates>
 8002656:	1e03      	subs	r3, r0, #0
 8002658:	d023      	beq.n	80026a2 <main+0xfa>
  {
	  my_astro_write_coordinates ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 800265a:	4b3f      	ldr	r3, [pc, #252]	; (8002758 <main+0x1b0>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	4b3f      	ldr	r3, [pc, #252]	; (800275c <main+0x1b4>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	0019      	movs	r1, r3
 8002664:	0010      	movs	r0, r2
 8002666:	f007 f835 	bl	80096d4 <my_astro_write_coordinates>
	  get_my_rtc_time ( rtc_dt ) ;
 800266a:	4b40      	ldr	r3, [pc, #256]	; (800276c <main+0x1c4>)
 800266c:	0018      	movs	r0, r3
 800266e:	f007 fa7f 	bl	8009b70 <get_my_rtc_time>
	  send_debug_logs ( rtc_dt ) ;
 8002672:	4b3e      	ldr	r3, [pc, #248]	; (800276c <main+0x1c4>)
 8002674:	0018      	movs	r0, r3
 8002676:	f000 fb89 	bl	8002d8c <send_debug_logs>
	  if ( nmea_fixed_pdop_d < 100.0 )
 800267a:	4b3b      	ldr	r3, [pc, #236]	; (8002768 <main+0x1c0>)
 800267c:	6818      	ldr	r0, [r3, #0]
 800267e:	6859      	ldr	r1, [r3, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	4b3b      	ldr	r3, [pc, #236]	; (8002770 <main+0x1c8>)
 8002684:	f7fd fee6 	bl	8000454 <__aeabi_dcmplt>
 8002688:	1e03      	subs	r3, r0, #0
 800268a:	d00a      	beq.n	80026a2 <main+0xfa>
	  {
		  snprintf ( nmea_fixed_pdop_s , NMEA_FIX_PDOP_STRING_BUFF_SIZE , "%.1f", nmea_fixed_pdop_d );
 800268c:	4b36      	ldr	r3, [pc, #216]	; (8002768 <main+0x1c0>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	4938      	ldr	r1, [pc, #224]	; (8002774 <main+0x1cc>)
 8002694:	4838      	ldr	r0, [pc, #224]	; (8002778 <main+0x1d0>)
 8002696:	9200      	str	r2, [sp, #0]
 8002698:	9301      	str	r3, [sp, #4]
 800269a:	000a      	movs	r2, r1
 800269c:	2105      	movs	r1, #5
 800269e:	f009 f90f 	bl	800b8c0 <snprintf>
	  }
  }

  agg_tim_gnss_seconds = agg_tim_gnss_seconds + tim_seconds  ;
 80026a2:	4b36      	ldr	r3, [pc, #216]	; (800277c <main+0x1d4>)
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	001a      	movs	r2, r3
 80026a8:	4b35      	ldr	r3, [pc, #212]	; (8002780 <main+0x1d8>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	18d2      	adds	r2, r2, r3
 80026ae:	4b34      	ldr	r3, [pc, #208]	; (8002780 <main+0x1d8>)
 80026b0:	601a      	str	r2, [r3, #0]
  sprintf ( payload , "%s,%d,%lu" , nmea_fixed_pdop_s , tim_seconds , agg_tim_gnss_seconds ) ;
 80026b2:	4b32      	ldr	r3, [pc, #200]	; (800277c <main+0x1d4>)
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	001c      	movs	r4, r3
 80026b8:	4b31      	ldr	r3, [pc, #196]	; (8002780 <main+0x1d8>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a2e      	ldr	r2, [pc, #184]	; (8002778 <main+0x1d0>)
 80026be:	4931      	ldr	r1, [pc, #196]	; (8002784 <main+0x1dc>)
 80026c0:	4831      	ldr	r0, [pc, #196]	; (8002788 <main+0x1e0>)
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	0023      	movs	r3, r4
 80026c6:	f009 f92f 	bl	800b928 <sprintf>
  sprintf ( astro_payload_log , "Astronode payload: %s" , payload ) ;
 80026ca:	4a2f      	ldr	r2, [pc, #188]	; (8002788 <main+0x1e0>)
 80026cc:	492f      	ldr	r1, [pc, #188]	; (800278c <main+0x1e4>)
 80026ce:	4b30      	ldr	r3, [pc, #192]	; (8002790 <main+0x1e8>)
 80026d0:	0018      	movs	r0, r3
 80026d2:	f009 f929 	bl	800b928 <sprintf>
  send_debug_logs ( astro_payload_log ) ;
 80026d6:	4b2e      	ldr	r3, [pc, #184]	; (8002790 <main+0x1e8>)
 80026d8:	0018      	movs	r0, r3
 80026da:	f000 fb57 	bl	8002d8c <send_debug_logs>
  my_astro_add_payload_2_queue ( payload ) ;
 80026de:	4b2a      	ldr	r3, [pc, #168]	; (8002788 <main+0x1e0>)
 80026e0:	0018      	movs	r0, r3
 80026e2:	f006 ff8f 	bl	8009604 <my_astro_add_payload_2_queue>
  //HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  astro_log_loop_timer = get_systick () ;
 80026e6:	f000 fbe1 	bl	8002eac <get_systick>
 80026ea:	0002      	movs	r2, r0
 80026ec:	4b29      	ldr	r3, [pc, #164]	; (8002794 <main+0x1ec>)
 80026ee:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  if ( is_evt_pin_high() )
 80026f0:	f000 fbca 	bl	8002e88 <is_evt_pin_high>
 80026f4:	1e03      	subs	r3, r0, #0
 80026f6:	d001      	beq.n	80026fc <main+0x154>
	  {
		  my_astro_read_evt_reg () ;
 80026f8:	f006 ffac 	bl	8009654 <my_astro_read_evt_reg>
	  }
	  if ( get_systick () - astro_log_loop_timer >  ASTRO_LOG_TIMER )
 80026fc:	f000 fbd6 	bl	8002eac <get_systick>
 8002700:	0002      	movs	r2, r0
 8002702:	4b24      	ldr	r3, [pc, #144]	; (8002794 <main+0x1ec>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	4a23      	ldr	r2, [pc, #140]	; (8002798 <main+0x1f0>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d9f0      	bls.n	80026f0 <main+0x148>
	  {
		  my_astro_log ();
 800270e:	f006 ffd7 	bl	80096c0 <my_astro_log>
		  astro_log_loop_timer = get_systick () ;
 8002712:	f000 fbcb 	bl	8002eac <get_systick>
 8002716:	0002      	movs	r2, r0
 8002718:	4b1e      	ldr	r3, [pc, #120]	; (8002794 <main+0x1ec>)
 800271a:	601a      	str	r2, [r3, #0]
		  astronode_send_pld_er ( g_payload_id_counter , payload , strlen ( payload ) ) ;
 800271c:	4b1f      	ldr	r3, [pc, #124]	; (800279c <main+0x1f4>)
 800271e:	881c      	ldrh	r4, [r3, #0]
 8002720:	4b19      	ldr	r3, [pc, #100]	; (8002788 <main+0x1e0>)
 8002722:	0018      	movs	r0, r3
 8002724:	f7fd fcee 	bl	8000104 <strlen>
 8002728:	0003      	movs	r3, r0
 800272a:	b29a      	uxth	r2, r3
 800272c:	4b16      	ldr	r3, [pc, #88]	; (8002788 <main+0x1e0>)
 800272e:	0019      	movs	r1, r3
 8002730:	0020      	movs	r0, r4
 8002732:	f005 fdd7 	bl	80082e4 <astronode_send_pld_er>
	  if ( is_evt_pin_high() )
 8002736:	e7db      	b.n	80026f0 <main+0x148>
 8002738:	20000000 	.word	0x20000000
 800273c:	2000086c 	.word	0x2000086c
 8002740:	20000b2d 	.word	0x20000b2d
 8002744:	20000b1c 	.word	0x20000b1c
 8002748:	08003029 	.word	0x08003029
 800274c:	08003099 	.word	0x08003099
 8002750:	20000728 	.word	0x20000728
 8002754:	20000b2c 	.word	0x20000b2c
 8002758:	200009a8 	.word	0x200009a8
 800275c:	200009ac 	.word	0x200009ac
 8002760:	20000010 	.word	0x20000010
 8002764:	20000008 	.word	0x20000008
 8002768:	20000018 	.word	0x20000018
 800276c:	20000994 	.word	0x20000994
 8002770:	40590000 	.word	0x40590000
 8002774:	08012588 	.word	0x08012588
 8002778:	200009b0 	.word	0x200009b0
 800277c:	200009b6 	.word	0x200009b6
 8002780:	200009b8 	.word	0x200009b8
 8002784:	08012590 	.word	0x08012590
 8002788:	200009c4 	.word	0x200009c4
 800278c:	0801259c 	.word	0x0801259c
 8002790:	20000a64 	.word	0x20000a64
 8002794:	200009bc 	.word	0x200009bc
 8002798:	0000ea60 	.word	0x0000ea60
 800279c:	200009c0 	.word	0x200009c0

080027a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027a0:	b590      	push	{r4, r7, lr}
 80027a2:	b093      	sub	sp, #76	; 0x4c
 80027a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027a6:	2410      	movs	r4, #16
 80027a8:	193b      	adds	r3, r7, r4
 80027aa:	0018      	movs	r0, r3
 80027ac:	2338      	movs	r3, #56	; 0x38
 80027ae:	001a      	movs	r2, r3
 80027b0:	2100      	movs	r1, #0
 80027b2:	f009 f94f 	bl	800ba54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027b6:	003b      	movs	r3, r7
 80027b8:	0018      	movs	r0, r3
 80027ba:	2310      	movs	r3, #16
 80027bc:	001a      	movs	r2, r3
 80027be:	2100      	movs	r1, #0
 80027c0:	f009 f948 	bl	800ba54 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027c4:	2380      	movs	r3, #128	; 0x80
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	0018      	movs	r0, r3
 80027ca:	f001 fbf1 	bl	8003fb0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80027ce:	193b      	adds	r3, r7, r4
 80027d0:	220a      	movs	r2, #10
 80027d2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027d4:	193b      	adds	r3, r7, r4
 80027d6:	2280      	movs	r2, #128	; 0x80
 80027d8:	0052      	lsls	r2, r2, #1
 80027da:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80027dc:	0021      	movs	r1, r4
 80027de:	187b      	adds	r3, r7, r1
 80027e0:	2200      	movs	r2, #0
 80027e2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027e4:	187b      	adds	r3, r7, r1
 80027e6:	2240      	movs	r2, #64	; 0x40
 80027e8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80027ea:	187b      	adds	r3, r7, r1
 80027ec:	2201      	movs	r2, #1
 80027ee:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80027f0:	187b      	adds	r3, r7, r1
 80027f2:	2200      	movs	r2, #0
 80027f4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027f6:	187b      	adds	r3, r7, r1
 80027f8:	0018      	movs	r0, r3
 80027fa:	f001 fc25 	bl	8004048 <HAL_RCC_OscConfig>
 80027fe:	1e03      	subs	r3, r0, #0
 8002800:	d001      	beq.n	8002806 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002802:	f000 fca9 	bl	8003158 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002806:	003b      	movs	r3, r7
 8002808:	2207      	movs	r2, #7
 800280a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800280c:	003b      	movs	r3, r7
 800280e:	2200      	movs	r2, #0
 8002810:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002812:	003b      	movs	r3, r7
 8002814:	2200      	movs	r2, #0
 8002816:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002818:	003b      	movs	r3, r7
 800281a:	2200      	movs	r2, #0
 800281c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800281e:	003b      	movs	r3, r7
 8002820:	2100      	movs	r1, #0
 8002822:	0018      	movs	r0, r3
 8002824:	f001 ff2a 	bl	800467c <HAL_RCC_ClockConfig>
 8002828:	1e03      	subs	r3, r0, #0
 800282a:	d001      	beq.n	8002830 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800282c:	f000 fc94 	bl	8003158 <Error_Handler>
  }
}
 8002830:	46c0      	nop			; (mov r8, r8)
 8002832:	46bd      	mov	sp, r7
 8002834:	b013      	add	sp, #76	; 0x4c
 8002836:	bd90      	pop	{r4, r7, pc}

08002838 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b090      	sub	sp, #64	; 0x40
 800283c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800283e:	232c      	movs	r3, #44	; 0x2c
 8002840:	18fb      	adds	r3, r7, r3
 8002842:	0018      	movs	r0, r3
 8002844:	2314      	movs	r3, #20
 8002846:	001a      	movs	r2, r3
 8002848:	2100      	movs	r1, #0
 800284a:	f009 f903 	bl	800ba54 <memset>
  RTC_DateTypeDef sDate = {0};
 800284e:	2328      	movs	r3, #40	; 0x28
 8002850:	18fb      	adds	r3, r7, r3
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8002856:	003b      	movs	r3, r7
 8002858:	0018      	movs	r0, r3
 800285a:	2328      	movs	r3, #40	; 0x28
 800285c:	001a      	movs	r2, r3
 800285e:	2100      	movs	r1, #0
 8002860:	f009 f8f8 	bl	800ba54 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002864:	4b44      	ldr	r3, [pc, #272]	; (8002978 <MX_RTC_Init+0x140>)
 8002866:	4a45      	ldr	r2, [pc, #276]	; (800297c <MX_RTC_Init+0x144>)
 8002868:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800286a:	4b43      	ldr	r3, [pc, #268]	; (8002978 <MX_RTC_Init+0x140>)
 800286c:	2200      	movs	r2, #0
 800286e:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8002870:	4b41      	ldr	r3, [pc, #260]	; (8002978 <MX_RTC_Init+0x140>)
 8002872:	227f      	movs	r2, #127	; 0x7f
 8002874:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8002876:	4b40      	ldr	r3, [pc, #256]	; (8002978 <MX_RTC_Init+0x140>)
 8002878:	22ff      	movs	r2, #255	; 0xff
 800287a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800287c:	4b3e      	ldr	r3, [pc, #248]	; (8002978 <MX_RTC_Init+0x140>)
 800287e:	2200      	movs	r2, #0
 8002880:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002882:	4b3d      	ldr	r3, [pc, #244]	; (8002978 <MX_RTC_Init+0x140>)
 8002884:	2200      	movs	r2, #0
 8002886:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002888:	4b3b      	ldr	r3, [pc, #236]	; (8002978 <MX_RTC_Init+0x140>)
 800288a:	2200      	movs	r2, #0
 800288c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800288e:	4b3a      	ldr	r3, [pc, #232]	; (8002978 <MX_RTC_Init+0x140>)
 8002890:	2280      	movs	r2, #128	; 0x80
 8002892:	05d2      	lsls	r2, r2, #23
 8002894:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002896:	4b38      	ldr	r3, [pc, #224]	; (8002978 <MX_RTC_Init+0x140>)
 8002898:	2200      	movs	r2, #0
 800289a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800289c:	4b36      	ldr	r3, [pc, #216]	; (8002978 <MX_RTC_Init+0x140>)
 800289e:	0018      	movs	r0, r3
 80028a0:	f002 fa4e 	bl	8004d40 <HAL_RTC_Init>
 80028a4:	1e03      	subs	r3, r0, #0
 80028a6:	d001      	beq.n	80028ac <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80028a8:	f000 fc56 	bl	8003158 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80028ac:	212c      	movs	r1, #44	; 0x2c
 80028ae:	187b      	adds	r3, r7, r1
 80028b0:	2200      	movs	r2, #0
 80028b2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80028b4:	187b      	adds	r3, r7, r1
 80028b6:	2200      	movs	r2, #0
 80028b8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80028ba:	187b      	adds	r3, r7, r1
 80028bc:	2200      	movs	r2, #0
 80028be:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 80028c0:	187b      	adds	r3, r7, r1
 80028c2:	2200      	movs	r2, #0
 80028c4:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80028c6:	187b      	adds	r3, r7, r1
 80028c8:	2200      	movs	r2, #0
 80028ca:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80028cc:	187b      	adds	r3, r7, r1
 80028ce:	2200      	movs	r2, #0
 80028d0:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80028d2:	1879      	adds	r1, r7, r1
 80028d4:	4b28      	ldr	r3, [pc, #160]	; (8002978 <MX_RTC_Init+0x140>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	0018      	movs	r0, r3
 80028da:	f002 fad3 	bl	8004e84 <HAL_RTC_SetTime>
 80028de:	1e03      	subs	r3, r0, #0
 80028e0:	d001      	beq.n	80028e6 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 80028e2:	f000 fc39 	bl	8003158 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80028e6:	2128      	movs	r1, #40	; 0x28
 80028e8:	187b      	adds	r3, r7, r1
 80028ea:	2206      	movs	r2, #6
 80028ec:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80028ee:	187b      	adds	r3, r7, r1
 80028f0:	2201      	movs	r2, #1
 80028f2:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80028f4:	187b      	adds	r3, r7, r1
 80028f6:	2201      	movs	r2, #1
 80028f8:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80028fa:	187b      	adds	r3, r7, r1
 80028fc:	2200      	movs	r2, #0
 80028fe:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002900:	1879      	adds	r1, r7, r1
 8002902:	4b1d      	ldr	r3, [pc, #116]	; (8002978 <MX_RTC_Init+0x140>)
 8002904:	2201      	movs	r2, #1
 8002906:	0018      	movs	r0, r3
 8002908:	f002 fbc0 	bl	800508c <HAL_RTC_SetDate>
 800290c:	1e03      	subs	r3, r0, #0
 800290e:	d001      	beq.n	8002914 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8002910:	f000 fc22 	bl	8003158 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002914:	003b      	movs	r3, r7
 8002916:	2200      	movs	r2, #0
 8002918:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800291a:	003b      	movs	r3, r7
 800291c:	2200      	movs	r2, #0
 800291e:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002920:	003b      	movs	r3, r7
 8002922:	2200      	movs	r2, #0
 8002924:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002926:	003b      	movs	r3, r7
 8002928:	2200      	movs	r2, #0
 800292a:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800292c:	003b      	movs	r3, r7
 800292e:	2200      	movs	r2, #0
 8002930:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002932:	003b      	movs	r3, r7
 8002934:	2200      	movs	r2, #0
 8002936:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002938:	003b      	movs	r3, r7
 800293a:	2200      	movs	r2, #0
 800293c:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800293e:	003b      	movs	r3, r7
 8002940:	2200      	movs	r2, #0
 8002942:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002944:	003b      	movs	r3, r7
 8002946:	2200      	movs	r2, #0
 8002948:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800294a:	003b      	movs	r3, r7
 800294c:	2220      	movs	r2, #32
 800294e:	2101      	movs	r1, #1
 8002950:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002952:	003b      	movs	r3, r7
 8002954:	2280      	movs	r2, #128	; 0x80
 8002956:	0052      	lsls	r2, r2, #1
 8002958:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800295a:	0039      	movs	r1, r7
 800295c:	4b06      	ldr	r3, [pc, #24]	; (8002978 <MX_RTC_Init+0x140>)
 800295e:	2201      	movs	r2, #1
 8002960:	0018      	movs	r0, r3
 8002962:	f002 fc73 	bl	800524c <HAL_RTC_SetAlarm>
 8002966:	1e03      	subs	r3, r0, #0
 8002968:	d001      	beq.n	800296e <MX_RTC_Init+0x136>
  {
    Error_Handler();
 800296a:	f000 fbf5 	bl	8003158 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	46bd      	mov	sp, r7
 8002972:	b010      	add	sp, #64	; 0x40
 8002974:	bd80      	pop	{r7, pc}
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	200006fc 	.word	0x200006fc
 800297c:	40002800 	.word	0x40002800

08002980 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002984:	4b1b      	ldr	r3, [pc, #108]	; (80029f4 <MX_SPI1_Init+0x74>)
 8002986:	4a1c      	ldr	r2, [pc, #112]	; (80029f8 <MX_SPI1_Init+0x78>)
 8002988:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800298a:	4b1a      	ldr	r3, [pc, #104]	; (80029f4 <MX_SPI1_Init+0x74>)
 800298c:	2282      	movs	r2, #130	; 0x82
 800298e:	0052      	lsls	r2, r2, #1
 8002990:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002992:	4b18      	ldr	r3, [pc, #96]	; (80029f4 <MX_SPI1_Init+0x74>)
 8002994:	2200      	movs	r2, #0
 8002996:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002998:	4b16      	ldr	r3, [pc, #88]	; (80029f4 <MX_SPI1_Init+0x74>)
 800299a:	22c0      	movs	r2, #192	; 0xc0
 800299c:	0092      	lsls	r2, r2, #2
 800299e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029a0:	4b14      	ldr	r3, [pc, #80]	; (80029f4 <MX_SPI1_Init+0x74>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029a6:	4b13      	ldr	r3, [pc, #76]	; (80029f4 <MX_SPI1_Init+0x74>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029ac:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <MX_SPI1_Init+0x74>)
 80029ae:	2280      	movs	r2, #128	; 0x80
 80029b0:	0092      	lsls	r2, r2, #2
 80029b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029b4:	4b0f      	ldr	r3, [pc, #60]	; (80029f4 <MX_SPI1_Init+0x74>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029ba:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <MX_SPI1_Init+0x74>)
 80029bc:	2200      	movs	r2, #0
 80029be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80029c0:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <MX_SPI1_Init+0x74>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029c6:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <MX_SPI1_Init+0x74>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80029cc:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <MX_SPI1_Init+0x74>)
 80029ce:	2207      	movs	r2, #7
 80029d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80029d2:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <MX_SPI1_Init+0x74>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80029d8:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <MX_SPI1_Init+0x74>)
 80029da:	2208      	movs	r2, #8
 80029dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80029de:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <MX_SPI1_Init+0x74>)
 80029e0:	0018      	movs	r0, r3
 80029e2:	f002 feb5 	bl	8005750 <HAL_SPI_Init>
 80029e6:	1e03      	subs	r3, r0, #0
 80029e8:	d001      	beq.n	80029ee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80029ea:	f000 fbb5 	bl	8003158 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	20000728 	.word	0x20000728
 80029f8:	40013000 	.word	0x40013000

080029fc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a02:	1d3b      	adds	r3, r7, #4
 8002a04:	0018      	movs	r0, r3
 8002a06:	230c      	movs	r3, #12
 8002a08:	001a      	movs	r2, r3
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	f009 f822 	bl	800ba54 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002a10:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <MX_TIM6_Init+0x6c>)
 8002a12:	4a16      	ldr	r2, [pc, #88]	; (8002a6c <MX_TIM6_Init+0x70>)
 8002a14:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8002a16:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <MX_TIM6_Init+0x6c>)
 8002a18:	4a15      	ldr	r2, [pc, #84]	; (8002a70 <MX_TIM6_Init+0x74>)
 8002a1a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a1c:	4b12      	ldr	r3, [pc, #72]	; (8002a68 <MX_TIM6_Init+0x6c>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002a22:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <MX_TIM6_Init+0x6c>)
 8002a24:	4a13      	ldr	r2, [pc, #76]	; (8002a74 <MX_TIM6_Init+0x78>)
 8002a26:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a28:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <MX_TIM6_Init+0x6c>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002a2e:	4b0e      	ldr	r3, [pc, #56]	; (8002a68 <MX_TIM6_Init+0x6c>)
 8002a30:	0018      	movs	r0, r3
 8002a32:	f003 fd8f 	bl	8006554 <HAL_TIM_Base_Init>
 8002a36:	1e03      	subs	r3, r0, #0
 8002a38:	d001      	beq.n	8002a3e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002a3a:	f000 fb8d 	bl	8003158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a3e:	1d3b      	adds	r3, r7, #4
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a44:	1d3b      	adds	r3, r7, #4
 8002a46:	2200      	movs	r2, #0
 8002a48:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002a4a:	1d3a      	adds	r2, r7, #4
 8002a4c:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <MX_TIM6_Init+0x6c>)
 8002a4e:	0011      	movs	r1, r2
 8002a50:	0018      	movs	r0, r3
 8002a52:	f004 f833 	bl	8006abc <HAL_TIMEx_MasterConfigSynchronization>
 8002a56:	1e03      	subs	r3, r0, #0
 8002a58:	d001      	beq.n	8002a5e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002a5a:	f000 fb7d 	bl	8003158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	46bd      	mov	sp, r7
 8002a62:	b004      	add	sp, #16
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	2000078c 	.word	0x2000078c
 8002a6c:	40001000 	.word	0x40001000
 8002a70:	00003e7f 	.word	0x00003e7f
 8002a74:	000003e7 	.word	0x000003e7

08002a78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a7c:	4b23      	ldr	r3, [pc, #140]	; (8002b0c <MX_USART1_UART_Init+0x94>)
 8002a7e:	4a24      	ldr	r2, [pc, #144]	; (8002b10 <MX_USART1_UART_Init+0x98>)
 8002a80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002a82:	4b22      	ldr	r3, [pc, #136]	; (8002b0c <MX_USART1_UART_Init+0x94>)
 8002a84:	2296      	movs	r2, #150	; 0x96
 8002a86:	0192      	lsls	r2, r2, #6
 8002a88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a8a:	4b20      	ldr	r3, [pc, #128]	; (8002b0c <MX_USART1_UART_Init+0x94>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a90:	4b1e      	ldr	r3, [pc, #120]	; (8002b0c <MX_USART1_UART_Init+0x94>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a96:	4b1d      	ldr	r3, [pc, #116]	; (8002b0c <MX_USART1_UART_Init+0x94>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a9c:	4b1b      	ldr	r3, [pc, #108]	; (8002b0c <MX_USART1_UART_Init+0x94>)
 8002a9e:	220c      	movs	r2, #12
 8002aa0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aa2:	4b1a      	ldr	r3, [pc, #104]	; (8002b0c <MX_USART1_UART_Init+0x94>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002aa8:	4b18      	ldr	r3, [pc, #96]	; (8002b0c <MX_USART1_UART_Init+0x94>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002aae:	4b17      	ldr	r3, [pc, #92]	; (8002b0c <MX_USART1_UART_Init+0x94>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ab4:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <MX_USART1_UART_Init+0x94>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002aba:	4b14      	ldr	r3, [pc, #80]	; (8002b0c <MX_USART1_UART_Init+0x94>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ac0:	4b12      	ldr	r3, [pc, #72]	; (8002b0c <MX_USART1_UART_Init+0x94>)
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f004 f880 	bl	8006bc8 <HAL_UART_Init>
 8002ac8:	1e03      	subs	r3, r0, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002acc:	f000 fb44 	bl	8003158 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ad0:	4b0e      	ldr	r3, [pc, #56]	; (8002b0c <MX_USART1_UART_Init+0x94>)
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f004 ff4d 	bl	8007974 <HAL_UARTEx_SetTxFifoThreshold>
 8002ada:	1e03      	subs	r3, r0, #0
 8002adc:	d001      	beq.n	8002ae2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002ade:	f000 fb3b 	bl	8003158 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ae2:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <MX_USART1_UART_Init+0x94>)
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f004 ff84 	bl	80079f4 <HAL_UARTEx_SetRxFifoThreshold>
 8002aec:	1e03      	subs	r3, r0, #0
 8002aee:	d001      	beq.n	8002af4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002af0:	f000 fb32 	bl	8003158 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002af4:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <MX_USART1_UART_Init+0x94>)
 8002af6:	0018      	movs	r0, r3
 8002af8:	f004 ff02 	bl	8007900 <HAL_UARTEx_DisableFifoMode>
 8002afc:	1e03      	subs	r3, r0, #0
 8002afe:	d001      	beq.n	8002b04 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002b00:	f000 fb2a 	bl	8003158 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b04:	46c0      	nop			; (mov r8, r8)
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	200007d8 	.word	0x200007d8
 8002b10:	40013800 	.word	0x40013800

08002b14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b18:	4b23      	ldr	r3, [pc, #140]	; (8002ba8 <MX_USART2_UART_Init+0x94>)
 8002b1a:	4a24      	ldr	r2, [pc, #144]	; (8002bac <MX_USART2_UART_Init+0x98>)
 8002b1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b1e:	4b22      	ldr	r3, [pc, #136]	; (8002ba8 <MX_USART2_UART_Init+0x94>)
 8002b20:	22e1      	movs	r2, #225	; 0xe1
 8002b22:	0252      	lsls	r2, r2, #9
 8002b24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b26:	4b20      	ldr	r3, [pc, #128]	; (8002ba8 <MX_USART2_UART_Init+0x94>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b2c:	4b1e      	ldr	r3, [pc, #120]	; (8002ba8 <MX_USART2_UART_Init+0x94>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b32:	4b1d      	ldr	r3, [pc, #116]	; (8002ba8 <MX_USART2_UART_Init+0x94>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b38:	4b1b      	ldr	r3, [pc, #108]	; (8002ba8 <MX_USART2_UART_Init+0x94>)
 8002b3a:	220c      	movs	r2, #12
 8002b3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ba8 <MX_USART2_UART_Init+0x94>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b44:	4b18      	ldr	r3, [pc, #96]	; (8002ba8 <MX_USART2_UART_Init+0x94>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b4a:	4b17      	ldr	r3, [pc, #92]	; (8002ba8 <MX_USART2_UART_Init+0x94>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b50:	4b15      	ldr	r3, [pc, #84]	; (8002ba8 <MX_USART2_UART_Init+0x94>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b56:	4b14      	ldr	r3, [pc, #80]	; (8002ba8 <MX_USART2_UART_Init+0x94>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b5c:	4b12      	ldr	r3, [pc, #72]	; (8002ba8 <MX_USART2_UART_Init+0x94>)
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f004 f832 	bl	8006bc8 <HAL_UART_Init>
 8002b64:	1e03      	subs	r3, r0, #0
 8002b66:	d001      	beq.n	8002b6c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002b68:	f000 faf6 	bl	8003158 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <MX_USART2_UART_Init+0x94>)
 8002b6e:	2100      	movs	r1, #0
 8002b70:	0018      	movs	r0, r3
 8002b72:	f004 feff 	bl	8007974 <HAL_UARTEx_SetTxFifoThreshold>
 8002b76:	1e03      	subs	r3, r0, #0
 8002b78:	d001      	beq.n	8002b7e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002b7a:	f000 faed 	bl	8003158 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <MX_USART2_UART_Init+0x94>)
 8002b80:	2100      	movs	r1, #0
 8002b82:	0018      	movs	r0, r3
 8002b84:	f004 ff36 	bl	80079f4 <HAL_UARTEx_SetRxFifoThreshold>
 8002b88:	1e03      	subs	r3, r0, #0
 8002b8a:	d001      	beq.n	8002b90 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002b8c:	f000 fae4 	bl	8003158 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002b90:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <MX_USART2_UART_Init+0x94>)
 8002b92:	0018      	movs	r0, r3
 8002b94:	f004 feb4 	bl	8007900 <HAL_UARTEx_DisableFifoMode>
 8002b98:	1e03      	subs	r3, r0, #0
 8002b9a:	d001      	beq.n	8002ba0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002b9c:	f000 fadc 	bl	8003158 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ba0:	46c0      	nop			; (mov r8, r8)
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	46c0      	nop			; (mov r8, r8)
 8002ba8:	2000086c 	.word	0x2000086c
 8002bac:	40004400 	.word	0x40004400

08002bb0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002bb4:	4b16      	ldr	r3, [pc, #88]	; (8002c10 <MX_USART3_UART_Init+0x60>)
 8002bb6:	4a17      	ldr	r2, [pc, #92]	; (8002c14 <MX_USART3_UART_Init+0x64>)
 8002bb8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002bba:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <MX_USART3_UART_Init+0x60>)
 8002bbc:	2296      	movs	r2, #150	; 0x96
 8002bbe:	0192      	lsls	r2, r2, #6
 8002bc0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002bc2:	4b13      	ldr	r3, [pc, #76]	; (8002c10 <MX_USART3_UART_Init+0x60>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002bc8:	4b11      	ldr	r3, [pc, #68]	; (8002c10 <MX_USART3_UART_Init+0x60>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002bce:	4b10      	ldr	r3, [pc, #64]	; (8002c10 <MX_USART3_UART_Init+0x60>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002bd4:	4b0e      	ldr	r3, [pc, #56]	; (8002c10 <MX_USART3_UART_Init+0x60>)
 8002bd6:	220c      	movs	r2, #12
 8002bd8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bda:	4b0d      	ldr	r3, [pc, #52]	; (8002c10 <MX_USART3_UART_Init+0x60>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002be0:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <MX_USART3_UART_Init+0x60>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002be6:	4b0a      	ldr	r3, [pc, #40]	; (8002c10 <MX_USART3_UART_Init+0x60>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002bec:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <MX_USART3_UART_Init+0x60>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bf2:	4b07      	ldr	r3, [pc, #28]	; (8002c10 <MX_USART3_UART_Init+0x60>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002bf8:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <MX_USART3_UART_Init+0x60>)
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f003 ffe4 	bl	8006bc8 <HAL_UART_Init>
 8002c00:	1e03      	subs	r3, r0, #0
 8002c02:	d001      	beq.n	8002c08 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002c04:	f000 faa8 	bl	8003158 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c08:	46c0      	nop			; (mov r8, r8)
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	20000900 	.word	0x20000900
 8002c14:	40004800 	.word	0x40004800

08002c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c18:	b590      	push	{r4, r7, lr}
 8002c1a:	b08b      	sub	sp, #44	; 0x2c
 8002c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c1e:	2414      	movs	r4, #20
 8002c20:	193b      	adds	r3, r7, r4
 8002c22:	0018      	movs	r0, r3
 8002c24:	2314      	movs	r3, #20
 8002c26:	001a      	movs	r2, r3
 8002c28:	2100      	movs	r1, #0
 8002c2a:	f008 ff13 	bl	800ba54 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c2e:	4b53      	ldr	r3, [pc, #332]	; (8002d7c <MX_GPIO_Init+0x164>)
 8002c30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c32:	4b52      	ldr	r3, [pc, #328]	; (8002d7c <MX_GPIO_Init+0x164>)
 8002c34:	2104      	movs	r1, #4
 8002c36:	430a      	orrs	r2, r1
 8002c38:	635a      	str	r2, [r3, #52]	; 0x34
 8002c3a:	4b50      	ldr	r3, [pc, #320]	; (8002d7c <MX_GPIO_Init+0x164>)
 8002c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c3e:	2204      	movs	r2, #4
 8002c40:	4013      	ands	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c46:	4b4d      	ldr	r3, [pc, #308]	; (8002d7c <MX_GPIO_Init+0x164>)
 8002c48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c4a:	4b4c      	ldr	r3, [pc, #304]	; (8002d7c <MX_GPIO_Init+0x164>)
 8002c4c:	2120      	movs	r1, #32
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	635a      	str	r2, [r3, #52]	; 0x34
 8002c52:	4b4a      	ldr	r3, [pc, #296]	; (8002d7c <MX_GPIO_Init+0x164>)
 8002c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c56:	2220      	movs	r2, #32
 8002c58:	4013      	ands	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c5e:	4b47      	ldr	r3, [pc, #284]	; (8002d7c <MX_GPIO_Init+0x164>)
 8002c60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c62:	4b46      	ldr	r3, [pc, #280]	; (8002d7c <MX_GPIO_Init+0x164>)
 8002c64:	2101      	movs	r1, #1
 8002c66:	430a      	orrs	r2, r1
 8002c68:	635a      	str	r2, [r3, #52]	; 0x34
 8002c6a:	4b44      	ldr	r3, [pc, #272]	; (8002d7c <MX_GPIO_Init+0x164>)
 8002c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c6e:	2201      	movs	r2, #1
 8002c70:	4013      	ands	r3, r2
 8002c72:	60bb      	str	r3, [r7, #8]
 8002c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c76:	4b41      	ldr	r3, [pc, #260]	; (8002d7c <MX_GPIO_Init+0x164>)
 8002c78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c7a:	4b40      	ldr	r3, [pc, #256]	; (8002d7c <MX_GPIO_Init+0x164>)
 8002c7c:	2102      	movs	r1, #2
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	635a      	str	r2, [r3, #52]	; 0x34
 8002c82:	4b3e      	ldr	r3, [pc, #248]	; (8002d7c <MX_GPIO_Init+0x164>)
 8002c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c86:	2202      	movs	r2, #2
 8002c88:	4013      	ands	r3, r2
 8002c8a:	607b      	str	r3, [r7, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L86_RST_Pin|L86_PWR_SW_Pin, GPIO_PIN_RESET);
 8002c8e:	2388      	movs	r3, #136	; 0x88
 8002c90:	015b      	lsls	r3, r3, #5
 8002c92:	483b      	ldr	r0, [pc, #236]	; (8002d80 <MX_GPIO_Init+0x168>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	0019      	movs	r1, r3
 8002c98:	f001 f96d 	bl	8003f76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RST_Pin|ASTRO_WAKEUP_Pin, GPIO_PIN_RESET);
 8002c9c:	4939      	ldr	r1, [pc, #228]	; (8002d84 <MX_GPIO_Init+0x16c>)
 8002c9e:	23a0      	movs	r3, #160	; 0xa0
 8002ca0:	05db      	lsls	r3, r3, #23
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f001 f966 	bl	8003f76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIS_SPI1_CS_GPIO_Port, LIS_SPI1_CS_Pin, GPIO_PIN_RESET);
 8002caa:	2380      	movs	r3, #128	; 0x80
 8002cac:	01db      	lsls	r3, r3, #7
 8002cae:	4836      	ldr	r0, [pc, #216]	; (8002d88 <MX_GPIO_Init+0x170>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	0019      	movs	r1, r3
 8002cb4:	f001 f95f 	bl	8003f76 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : L86_RST_Pin L86_PWR_SW_Pin */
  GPIO_InitStruct.Pin = L86_RST_Pin|L86_PWR_SW_Pin;
 8002cb8:	193b      	adds	r3, r7, r4
 8002cba:	2288      	movs	r2, #136	; 0x88
 8002cbc:	0152      	lsls	r2, r2, #5
 8002cbe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cc0:	193b      	adds	r3, r7, r4
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc6:	193b      	adds	r3, r7, r4
 8002cc8:	2200      	movs	r2, #0
 8002cca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ccc:	193b      	adds	r3, r7, r4
 8002cce:	2200      	movs	r2, #0
 8002cd0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cd2:	193b      	adds	r3, r7, r4
 8002cd4:	4a2a      	ldr	r2, [pc, #168]	; (8002d80 <MX_GPIO_Init+0x168>)
 8002cd6:	0019      	movs	r1, r3
 8002cd8:	0010      	movs	r0, r2
 8002cda:	f000 fefb 	bl	8003ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin ASTRO_PWR_SW_Pin ASTRO_RST_Pin ASTRO_WAKEUP_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|ASTRO_PWR_SW_Pin|ASTRO_RST_Pin|ASTRO_WAKEUP_Pin;
 8002cde:	193b      	adds	r3, r7, r4
 8002ce0:	4a28      	ldr	r2, [pc, #160]	; (8002d84 <MX_GPIO_Init+0x16c>)
 8002ce2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ce4:	193b      	adds	r3, r7, r4
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cea:	193b      	adds	r3, r7, r4
 8002cec:	2200      	movs	r2, #0
 8002cee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf0:	193b      	adds	r3, r7, r4
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf6:	193a      	adds	r2, r7, r4
 8002cf8:	23a0      	movs	r3, #160	; 0xa0
 8002cfa:	05db      	lsls	r3, r3, #23
 8002cfc:	0011      	movs	r1, r2
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f000 fee8 	bl	8003ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LIS_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = LIS_SPI1_CS_Pin;
 8002d04:	0021      	movs	r1, r4
 8002d06:	187b      	adds	r3, r7, r1
 8002d08:	2280      	movs	r2, #128	; 0x80
 8002d0a:	01d2      	lsls	r2, r2, #7
 8002d0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d0e:	000c      	movs	r4, r1
 8002d10:	193b      	adds	r3, r7, r4
 8002d12:	2201      	movs	r2, #1
 8002d14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d16:	193b      	adds	r3, r7, r4
 8002d18:	2200      	movs	r2, #0
 8002d1a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1c:	193b      	adds	r3, r7, r4
 8002d1e:	2200      	movs	r2, #0
 8002d20:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LIS_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002d22:	193b      	adds	r3, r7, r4
 8002d24:	4a18      	ldr	r2, [pc, #96]	; (8002d88 <MX_GPIO_Init+0x170>)
 8002d26:	0019      	movs	r1, r3
 8002d28:	0010      	movs	r0, r2
 8002d2a:	f000 fed3 	bl	8003ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ASTRO_EVT_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin;
 8002d2e:	193b      	adds	r3, r7, r4
 8002d30:	2280      	movs	r2, #128	; 0x80
 8002d32:	0152      	lsls	r2, r2, #5
 8002d34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d36:	193b      	adds	r3, r7, r4
 8002d38:	2200      	movs	r2, #0
 8002d3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3c:	193b      	adds	r3, r7, r4
 8002d3e:	2200      	movs	r2, #0
 8002d40:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ASTRO_EVT_GPIO_Port, &GPIO_InitStruct);
 8002d42:	193a      	adds	r2, r7, r4
 8002d44:	23a0      	movs	r3, #160	; 0xa0
 8002d46:	05db      	lsls	r3, r3, #23
 8002d48:	0011      	movs	r1, r2
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	f000 fec2 	bl	8003ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIS_INT1_EXTI8_Pin LIS_INT2_EXTI9_Pin */
  GPIO_InitStruct.Pin = LIS_INT1_EXTI8_Pin|LIS_INT2_EXTI9_Pin;
 8002d50:	0021      	movs	r1, r4
 8002d52:	187b      	adds	r3, r7, r1
 8002d54:	22c0      	movs	r2, #192	; 0xc0
 8002d56:	0092      	lsls	r2, r2, #2
 8002d58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d5a:	187b      	adds	r3, r7, r1
 8002d5c:	2288      	movs	r2, #136	; 0x88
 8002d5e:	0352      	lsls	r2, r2, #13
 8002d60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d62:	187b      	adds	r3, r7, r1
 8002d64:	2200      	movs	r2, #0
 8002d66:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d68:	187b      	adds	r3, r7, r1
 8002d6a:	4a07      	ldr	r2, [pc, #28]	; (8002d88 <MX_GPIO_Init+0x170>)
 8002d6c:	0019      	movs	r1, r3
 8002d6e:	0010      	movs	r0, r2
 8002d70:	f000 feb0 	bl	8003ad4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d74:	46c0      	nop			; (mov r8, r8)
 8002d76:	46bd      	mov	sp, r7
 8002d78:	b00b      	add	sp, #44	; 0x2c
 8002d7a:	bd90      	pop	{r4, r7, pc}
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	50000800 	.word	0x50000800
 8002d84:	00008860 	.word	0x00008860
 8002d88:	50000400 	.word	0x50000400

08002d8c <send_debug_logs>:

/* USER CODE BEGIN 4 */
void send_debug_logs ( char* p_tx_buffer )
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	0018      	movs	r0, r3
 8002d98:	f7fd f9b4 	bl	8000104 <strlen>
 8002d9c:	0003      	movs	r3, r0
 8002d9e:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2bfa      	cmp	r3, #250	; 0xfa
 8002da4:	d908      	bls.n	8002db8 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 8002da6:	23fa      	movs	r3, #250	; 0xfa
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	490d      	ldr	r1, [pc, #52]	; (8002de0 <send_debug_logs+0x54>)
 8002dac:	480d      	ldr	r0, [pc, #52]	; (8002de4 <send_debug_logs+0x58>)
 8002dae:	222a      	movs	r2, #42	; 0x2a
 8002db0:	f003 ffa0 	bl	8006cf4 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 8002db4:	23fa      	movs	r3, #250	; 0xfa
 8002db6:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	23fa      	movs	r3, #250	; 0xfa
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	4808      	ldr	r0, [pc, #32]	; (8002de4 <send_debug_logs+0x58>)
 8002dc4:	f003 ff96 	bl	8006cf4 <HAL_UART_Transmit>
    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8002dc8:	23fa      	movs	r3, #250	; 0xfa
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4906      	ldr	r1, [pc, #24]	; (8002de8 <send_debug_logs+0x5c>)
 8002dce:	4805      	ldr	r0, [pc, #20]	; (8002de4 <send_debug_logs+0x58>)
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f003 ff8f 	bl	8006cf4 <HAL_UART_Transmit>
}
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	b004      	add	sp, #16
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	080125b4 	.word	0x080125b4
 8002de4:	2000086c 	.word	0x2000086c
 8002de8:	080125e0 	.word	0x080125e0

08002dec <reset_astronode>:
void reset_astronode ( void )
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 8002df0:	2380      	movs	r3, #128	; 0x80
 8002df2:	0119      	lsls	r1, r3, #4
 8002df4:	23a0      	movs	r3, #160	; 0xa0
 8002df6:	05db      	lsls	r3, r3, #23
 8002df8:	2201      	movs	r2, #1
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f001 f8bb 	bl	8003f76 <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 8002e00:	2001      	movs	r0, #1
 8002e02:	f000 fd4f 	bl	80038a4 <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 8002e06:	2380      	movs	r3, #128	; 0x80
 8002e08:	0119      	lsls	r1, r3, #4
 8002e0a:	23a0      	movs	r3, #160	; 0xa0
 8002e0c:	05db      	lsls	r3, r3, #23
 8002e0e:	2200      	movs	r2, #0
 8002e10:	0018      	movs	r0, r3
 8002e12:	f001 f8b0 	bl	8003f76 <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 8002e16:	20fa      	movs	r0, #250	; 0xfa
 8002e18:	f000 fd44 	bl	80038a4 <HAL_Delay>
}
 8002e1c:	46c0      	nop			; (mov r8, r8)
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e24 <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 8002e2e:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <send_astronode_request+0x34>)
 8002e30:	0018      	movs	r0, r3
 8002e32:	f7ff ffab 	bl	8002d8c <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	0018      	movs	r0, r3
 8002e3a:	f7ff ffa7 	bl	8002d8c <send_debug_logs>

    HAL_UART_Transmit ( HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	23fa      	movs	r3, #250	; 0xfa
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	4804      	ldr	r0, [pc, #16]	; (8002e5c <send_astronode_request+0x38>)
 8002e4a:	f003 ff53 	bl	8006cf4 <HAL_UART_Transmit>
}
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	46bd      	mov	sp, r7
 8002e52:	b002      	add	sp, #8
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	080125e4 	.word	0x080125e4
 8002e5c:	200007d8 	.word	0x200007d8

08002e60 <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	4806      	ldr	r0, [pc, #24]	; (8002e84 <is_astronode_character_received+0x24>)
 8002e6c:	2364      	movs	r3, #100	; 0x64
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f003 ffdc 	bl	8006e2c <HAL_UART_Receive>
 8002e74:	0003      	movs	r3, r0
 8002e76:	425a      	negs	r2, r3
 8002e78:	4153      	adcs	r3, r2
 8002e7a:	b2db      	uxtb	r3, r3
}
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	b002      	add	sp, #8
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	200007d8 	.word	0x200007d8

08002e88 <is_evt_pin_high>:
bool is_evt_pin_high ( void )
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
	return ( HAL_GPIO_ReadPin ( GPIOA , ASTRO_EVT_Pin ) == GPIO_PIN_SET ? true : false);
 8002e8c:	2380      	movs	r3, #128	; 0x80
 8002e8e:	015a      	lsls	r2, r3, #5
 8002e90:	23a0      	movs	r3, #160	; 0xa0
 8002e92:	05db      	lsls	r3, r3, #23
 8002e94:	0011      	movs	r1, r2
 8002e96:	0018      	movs	r0, r3
 8002e98:	f001 f850 	bl	8003f3c <HAL_GPIO_ReadPin>
 8002e9c:	0003      	movs	r3, r0
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	425a      	negs	r2, r3
 8002ea2:	4153      	adcs	r3, r2
 8002ea4:	b2db      	uxtb	r3, r3
}
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <get_systick>:
		astronode_send_cmd_rr () ;
		astronode_send_cmd_cr () ;
	}
}
uint32_t get_systick ( void )
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 8002eb0:	f000 fcee 	bl	8003890 <HAL_GetTick>
 8002eb4:	0003      	movs	r3, r0
}
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	000a      	movs	r2, r1
 8002ec6:	1cbb      	adds	r3, r7, #2
 8002ec8:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 8002eca:	f7ff ffef 	bl	8002eac <get_systick>
 8002ece:	0002      	movs	r2, r0
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	1cba      	adds	r2, r7, #2
 8002ed6:	8812      	ldrh	r2, [r2, #0]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	419b      	sbcs	r3, r3
 8002edc:	425b      	negs	r3, r3
 8002ede:	b2db      	uxtb	r3, r3
}
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b002      	add	sp, #8
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <my_astro_on>:
void my_ldg_off ( void )
{
	HAL_GPIO_WritePin ( GPIOA , LDG_Pin , GPIO_PIN_RESET ) ;
}
void my_astro_on ( void )
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
	HAL_UART_DeInit		( HUART_ASTRO ) ;
 8002eec:	4b11      	ldr	r3, [pc, #68]	; (8002f34 <my_astro_on+0x4c>)
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f003 fec0 	bl	8006c74 <HAL_UART_DeInit>
	HAL_GPIO_WritePin 	( ASTRO_WAKEUP_GPIO_Port , ASTRO_WAKEUP_Pin , GPIO_PIN_RESET ) ;
 8002ef4:	2380      	movs	r3, #128	; 0x80
 8002ef6:	0219      	lsls	r1, r3, #8
 8002ef8:	23a0      	movs	r3, #160	; 0xa0
 8002efa:	05db      	lsls	r3, r3, #23
 8002efc:	2200      	movs	r2, #0
 8002efe:	0018      	movs	r0, r3
 8002f00:	f001 f839 	bl	8003f76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin 	( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 8002f04:	2380      	movs	r3, #128	; 0x80
 8002f06:	0119      	lsls	r1, r3, #4
 8002f08:	23a0      	movs	r3, #160	; 0xa0
 8002f0a:	05db      	lsls	r3, r3, #23
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f001 f831 	bl	8003f76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin	( GPIOA , ASTRO_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8002f14:	23a0      	movs	r3, #160	; 0xa0
 8002f16:	05db      	lsls	r3, r3, #23
 8002f18:	2201      	movs	r2, #1
 8002f1a:	2140      	movs	r1, #64	; 0x40
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	f001 f82a 	bl	8003f76 <HAL_GPIO_WritePin>
	HAL_Delay 			( 1 ) ;
 8002f22:	2001      	movs	r0, #1
 8002f24:	f000 fcbe 	bl	80038a4 <HAL_Delay>
	MX_USART1_UART_Init () ;
 8002f28:	f7ff fda6 	bl	8002a78 <MX_USART1_UART_Init>
}
 8002f2c:	46c0      	nop			; (mov r8, r8)
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	200007d8 	.word	0x200007d8

08002f38 <my_astro_off>:
void my_astro_off ( void )
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
	HAL_UART_DeInit		( HUART_ASTRO ) ;
 8002f3c:	4b10      	ldr	r3, [pc, #64]	; (8002f80 <my_astro_off+0x48>)
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f003 fe98 	bl	8006c74 <HAL_UART_DeInit>
	HAL_GPIO_WritePin 	( ASTRO_WAKEUP_GPIO_Port , ASTRO_WAKEUP_Pin , GPIO_PIN_RESET ) ;
 8002f44:	2380      	movs	r3, #128	; 0x80
 8002f46:	0219      	lsls	r1, r3, #8
 8002f48:	23a0      	movs	r3, #160	; 0xa0
 8002f4a:	05db      	lsls	r3, r3, #23
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f001 f811 	bl	8003f76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin 	( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 8002f54:	2380      	movs	r3, #128	; 0x80
 8002f56:	0119      	lsls	r1, r3, #4
 8002f58:	23a0      	movs	r3, #160	; 0xa0
 8002f5a:	05db      	lsls	r3, r3, #23
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f001 f809 	bl	8003f76 <HAL_GPIO_WritePin>
	HAL_Delay 			( 1 ) ;
 8002f64:	2001      	movs	r0, #1
 8002f66:	f000 fc9d 	bl	80038a4 <HAL_Delay>
	HAL_GPIO_WritePin 	( GPIOA , ASTRO_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 8002f6a:	23a0      	movs	r3, #160	; 0xa0
 8002f6c:	05db      	lsls	r3, r3, #23
 8002f6e:	2200      	movs	r2, #0
 8002f70:	2140      	movs	r1, #64	; 0x40
 8002f72:	0018      	movs	r0, r3
 8002f74:	f000 ffff 	bl	8003f76 <HAL_GPIO_WritePin>
}
 8002f78:	46c0      	nop			; (mov r8, r8)
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	200007d8 	.word	0x200007d8

08002f84 <my_lx6_on>:
void my_lx6_on ( void )
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOC , L86_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8002f88:	2380      	movs	r3, #128	; 0x80
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	4808      	ldr	r0, [pc, #32]	; (8002fb0 <my_lx6_on+0x2c>)
 8002f8e:	2201      	movs	r2, #1
 8002f90:	0019      	movs	r1, r3
 8002f92:	f000 fff0 	bl	8003f76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_SET ) ;
 8002f96:	2380      	movs	r3, #128	; 0x80
 8002f98:	015b      	lsls	r3, r3, #5
 8002f9a:	4805      	ldr	r0, [pc, #20]	; (8002fb0 <my_lx6_on+0x2c>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	0019      	movs	r1, r3
 8002fa0:	f000 ffe9 	bl	8003f76 <HAL_GPIO_WritePin>
	MX_USART3_UART_Init () ;
 8002fa4:	f7ff fe04 	bl	8002bb0 <MX_USART3_UART_Init>
}
 8002fa8:	46c0      	nop			; (mov r8, r8)
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	50000800 	.word	0x50000800

08002fb4 <my_lx6_off>:
void my_lx6_off ( void )
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOC , L86_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 8002fb8:	2380      	movs	r3, #128	; 0x80
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	4809      	ldr	r0, [pc, #36]	; (8002fe4 <my_lx6_off+0x30>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	0019      	movs	r1, r3
 8002fc2:	f000 ffd8 	bl	8003f76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOC , L86_RST_Pin , GPIO_PIN_RESET ) ;
 8002fc6:	2380      	movs	r3, #128	; 0x80
 8002fc8:	015b      	lsls	r3, r3, #5
 8002fca:	4806      	ldr	r0, [pc, #24]	; (8002fe4 <my_lx6_off+0x30>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	0019      	movs	r1, r3
 8002fd0:	f000 ffd1 	bl	8003f76 <HAL_GPIO_WritePin>
	HAL_UART_DeInit ( HUART_Lx6 ) ;
 8002fd4:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <my_lx6_off+0x34>)
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f003 fe4c 	bl	8006c74 <HAL_UART_DeInit>
}
 8002fdc:	46c0      	nop			; (mov r8, r8)
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	50000800 	.word	0x50000800
 8002fe8:	20000900 	.word	0x20000900

08002fec <is_system_initialized>:

bool is_system_initialized ( void )
{
 8002fec:	b590      	push	{r4, r7, lr}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
	uint16_t yyyy ;

	yyyy = get_my_rtc_time ( rtc_dt ) ;
 8002ff2:	1dbc      	adds	r4, r7, #6
 8002ff4:	4b0a      	ldr	r3, [pc, #40]	; (8003020 <is_system_initialized+0x34>)
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f006 fdba 	bl	8009b70 <get_my_rtc_time>
 8002ffc:	0003      	movs	r3, r0
 8002ffe:	8023      	strh	r3, [r4, #0]
	send_debug_logs ( rtc_dt ) ;
 8003000:	4b07      	ldr	r3, [pc, #28]	; (8003020 <is_system_initialized+0x34>)
 8003002:	0018      	movs	r0, r3
 8003004:	f7ff fec2 	bl	8002d8c <send_debug_logs>
	if ( yyyy >= FIRMWARE_RELEASE_YEAR )
 8003008:	1dbb      	adds	r3, r7, #6
 800300a:	881b      	ldrh	r3, [r3, #0]
 800300c:	4a05      	ldr	r2, [pc, #20]	; (8003024 <is_system_initialized+0x38>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d901      	bls.n	8003016 <is_system_initialized+0x2a>
	{
		return true ;
 8003012:	2301      	movs	r3, #1
 8003014:	e000      	b.n	8003018 <is_system_initialized+0x2c>
	}
	return false ;
 8003016:	2300      	movs	r3, #0
}
 8003018:	0018      	movs	r0, r3
 800301a:	46bd      	mov	sp, r7
 800301c:	b003      	add	sp, #12
 800301e:	bd90      	pop	{r4, r7, pc}
 8003020:	20000994 	.word	0x20000994
 8003024:	000007e6 	.word	0x000007e6

08003028 <platform_write>:

static int32_t platform_write ( void *handle , uint8_t reg , const uint8_t *bufp , uint16_t len )
{
 8003028:	b5b0      	push	{r4, r5, r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	0008      	movs	r0, r1
 8003032:	607a      	str	r2, [r7, #4]
 8003034:	0019      	movs	r1, r3
 8003036:	240b      	movs	r4, #11
 8003038:	193b      	adds	r3, r7, r4
 800303a:	1c02      	adds	r2, r0, #0
 800303c:	701a      	strb	r2, [r3, #0]
 800303e:	2508      	movs	r5, #8
 8003040:	197b      	adds	r3, r7, r5
 8003042:	1c0a      	adds	r2, r1, #0
 8003044:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin	( LIS_SPI1_CS_GPIO_Port , LIS_SPI1_CS_Pin , GPIO_PIN_RESET ) ;
 8003046:	2380      	movs	r3, #128	; 0x80
 8003048:	01db      	lsls	r3, r3, #7
 800304a:	4812      	ldr	r0, [pc, #72]	; (8003094 <platform_write+0x6c>)
 800304c:	2200      	movs	r2, #0
 800304e:	0019      	movs	r1, r3
 8003050:	f000 ff91 	bl	8003f76 <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 8003054:	2014      	movs	r0, #20
 8003056:	f000 fc25 	bl	80038a4 <HAL_Delay>
	HAL_SPI_Transmit	( handle , &reg , 1 , 1000 ) ;
 800305a:	23fa      	movs	r3, #250	; 0xfa
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	1939      	adds	r1, r7, r4
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	2201      	movs	r2, #1
 8003064:	f002 fc2c 	bl	80058c0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit	( handle , (uint8_t*) bufp , len , 1000 ) ;
 8003068:	23fa      	movs	r3, #250	; 0xfa
 800306a:	009c      	lsls	r4, r3, #2
 800306c:	197b      	adds	r3, r7, r5
 800306e:	881a      	ldrh	r2, [r3, #0]
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	0023      	movs	r3, r4
 8003076:	f002 fc23 	bl	80058c0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin	( LIS_SPI1_CS_GPIO_Port , LIS_SPI1_CS_Pin , GPIO_PIN_SET) ;
 800307a:	2380      	movs	r3, #128	; 0x80
 800307c:	01db      	lsls	r3, r3, #7
 800307e:	4805      	ldr	r0, [pc, #20]	; (8003094 <platform_write+0x6c>)
 8003080:	2201      	movs	r2, #1
 8003082:	0019      	movs	r1, r3
 8003084:	f000 ff77 	bl	8003f76 <HAL_GPIO_WritePin>

	return 0;
 8003088:	2300      	movs	r3, #0
}
 800308a:	0018      	movs	r0, r3
 800308c:	46bd      	mov	sp, r7
 800308e:	b004      	add	sp, #16
 8003090:	bdb0      	pop	{r4, r5, r7, pc}
 8003092:	46c0      	nop			; (mov r8, r8)
 8003094:	50000400 	.word	0x50000400

08003098 <platform_read>:
static int32_t platform_read ( void *handle , uint8_t reg , uint8_t *bufp , uint16_t len )
{
 8003098:	b5b0      	push	{r4, r5, r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	0008      	movs	r0, r1
 80030a2:	607a      	str	r2, [r7, #4]
 80030a4:	0019      	movs	r1, r3
 80030a6:	240b      	movs	r4, #11
 80030a8:	193b      	adds	r3, r7, r4
 80030aa:	1c02      	adds	r2, r0, #0
 80030ac:	701a      	strb	r2, [r3, #0]
 80030ae:	2508      	movs	r5, #8
 80030b0:	197b      	adds	r3, r7, r5
 80030b2:	1c0a      	adds	r2, r1, #0
 80030b4:	801a      	strh	r2, [r3, #0]
	reg |= 0x80;
 80030b6:	193b      	adds	r3, r7, r4
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	2280      	movs	r2, #128	; 0x80
 80030bc:	4252      	negs	r2, r2
 80030be:	4313      	orrs	r3, r2
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	193b      	adds	r3, r7, r4
 80030c4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin ( LIS_SPI1_CS_GPIO_Port , LIS_SPI1_CS_Pin , GPIO_PIN_RESET) ;
 80030c6:	2380      	movs	r3, #128	; 0x80
 80030c8:	01db      	lsls	r3, r3, #7
 80030ca:	4812      	ldr	r0, [pc, #72]	; (8003114 <platform_read+0x7c>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	0019      	movs	r1, r3
 80030d0:	f000 ff51 	bl	8003f76 <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 80030d4:	2014      	movs	r0, #20
 80030d6:	f000 fbe5 	bl	80038a4 <HAL_Delay>
	HAL_SPI_Transmit ( handle , &reg , 1 , 1000 ) ;
 80030da:	23fa      	movs	r3, #250	; 0xfa
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	1939      	adds	r1, r7, r4
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f002 fbec 	bl	80058c0 <HAL_SPI_Transmit>
	HAL_SPI_Receive ( handle , bufp , len , 1000 ) ;
 80030e8:	23fa      	movs	r3, #250	; 0xfa
 80030ea:	009c      	lsls	r4, r3, #2
 80030ec:	197b      	adds	r3, r7, r5
 80030ee:	881a      	ldrh	r2, [r3, #0]
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	0023      	movs	r3, r4
 80030f6:	f002 fd3b 	bl	8005b70 <HAL_SPI_Receive>
	HAL_GPIO_WritePin ( LIS_SPI1_CS_GPIO_Port , LIS_SPI1_CS_Pin , GPIO_PIN_SET) ;
 80030fa:	2380      	movs	r3, #128	; 0x80
 80030fc:	01db      	lsls	r3, r3, #7
 80030fe:	4805      	ldr	r0, [pc, #20]	; (8003114 <platform_read+0x7c>)
 8003100:	2201      	movs	r2, #1
 8003102:	0019      	movs	r1, r3
 8003104:	f000 ff37 	bl	8003f76 <HAL_GPIO_WritePin>

	return 0;
 8003108:	2300      	movs	r3, #0
}
 800310a:	0018      	movs	r0, r3
 800310c:	46bd      	mov	sp, r7
 800310e:	b004      	add	sp, #16
 8003110:	bdb0      	pop	{r4, r5, r7, pc}
 8003112:	46c0      	nop			; (mov r8, r8)
 8003114:	50000400 	.word	0x50000400

08003118 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a0a      	ldr	r2, [pc, #40]	; (8003150 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d10d      	bne.n	8003146 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		tim_seconds++ ;
 800312a:	4b0a      	ldr	r3, [pc, #40]	; (8003154 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800312c:	881b      	ldrh	r3, [r3, #0]
 800312e:	3301      	adds	r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	4b08      	ldr	r3, [pc, #32]	; (8003154 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003134:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > TIM_SECONDS_THS_SYSTEM_RESET )
 8003136:	4b07      	ldr	r3, [pc, #28]	; (8003154 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003138:	881a      	ldrh	r2, [r3, #0]
 800313a:	23e1      	movs	r3, #225	; 0xe1
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	429a      	cmp	r2, r3
 8003140:	d901      	bls.n	8003146 <HAL_TIM_PeriodElapsedCallback+0x2e>
		  {
			  HAL_NVIC_SystemReset () ;
 8003142:	f000 fcb6 	bl	8003ab2 <HAL_NVIC_SystemReset>
		  }
	}
}
 8003146:	46c0      	nop			; (mov r8, r8)
 8003148:	46bd      	mov	sp, r7
 800314a:	b002      	add	sp, #8
 800314c:	bd80      	pop	{r7, pc}
 800314e:	46c0      	nop			; (mov r8, r8)
 8003150:	40001000 	.word	0x40001000
 8003154:	200009b6 	.word	0x200009b6

08003158 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800315c:	b672      	cpsid	i
}
 800315e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003160:	e7fe      	b.n	8003160 <Error_Handler+0x8>
	...

08003164 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800316a:	4b0f      	ldr	r3, [pc, #60]	; (80031a8 <HAL_MspInit+0x44>)
 800316c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800316e:	4b0e      	ldr	r3, [pc, #56]	; (80031a8 <HAL_MspInit+0x44>)
 8003170:	2101      	movs	r1, #1
 8003172:	430a      	orrs	r2, r1
 8003174:	641a      	str	r2, [r3, #64]	; 0x40
 8003176:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <HAL_MspInit+0x44>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	2201      	movs	r2, #1
 800317c:	4013      	ands	r3, r2
 800317e:	607b      	str	r3, [r7, #4]
 8003180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003182:	4b09      	ldr	r3, [pc, #36]	; (80031a8 <HAL_MspInit+0x44>)
 8003184:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003186:	4b08      	ldr	r3, [pc, #32]	; (80031a8 <HAL_MspInit+0x44>)
 8003188:	2180      	movs	r1, #128	; 0x80
 800318a:	0549      	lsls	r1, r1, #21
 800318c:	430a      	orrs	r2, r1
 800318e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003190:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <HAL_MspInit+0x44>)
 8003192:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003194:	2380      	movs	r3, #128	; 0x80
 8003196:	055b      	lsls	r3, r3, #21
 8003198:	4013      	ands	r3, r2
 800319a:	603b      	str	r3, [r7, #0]
 800319c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800319e:	46c0      	nop			; (mov r8, r8)
 80031a0:	46bd      	mov	sp, r7
 80031a2:	b002      	add	sp, #8
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	46c0      	nop			; (mov r8, r8)
 80031a8:	40021000 	.word	0x40021000

080031ac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80031ac:	b590      	push	{r4, r7, lr}
 80031ae:	b091      	sub	sp, #68	; 0x44
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031b4:	240c      	movs	r4, #12
 80031b6:	193b      	adds	r3, r7, r4
 80031b8:	0018      	movs	r0, r3
 80031ba:	2334      	movs	r3, #52	; 0x34
 80031bc:	001a      	movs	r2, r3
 80031be:	2100      	movs	r1, #0
 80031c0:	f008 fc48 	bl	800ba54 <memset>
  if(hrtc->Instance==RTC)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a15      	ldr	r2, [pc, #84]	; (8003220 <HAL_RTC_MspInit+0x74>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d124      	bne.n	8003218 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80031ce:	193b      	adds	r3, r7, r4
 80031d0:	2280      	movs	r2, #128	; 0x80
 80031d2:	0292      	lsls	r2, r2, #10
 80031d4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80031d6:	193b      	adds	r3, r7, r4
 80031d8:	2280      	movs	r2, #128	; 0x80
 80031da:	0092      	lsls	r2, r2, #2
 80031dc:	631a      	str	r2, [r3, #48]	; 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031de:	193b      	adds	r3, r7, r4
 80031e0:	0018      	movs	r0, r3
 80031e2:	f001 fbf5 	bl	80049d0 <HAL_RCCEx_PeriphCLKConfig>
 80031e6:	1e03      	subs	r3, r0, #0
 80031e8:	d001      	beq.n	80031ee <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80031ea:	f7ff ffb5 	bl	8003158 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80031ee:	4b0d      	ldr	r3, [pc, #52]	; (8003224 <HAL_RTC_MspInit+0x78>)
 80031f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031f2:	4b0c      	ldr	r3, [pc, #48]	; (8003224 <HAL_RTC_MspInit+0x78>)
 80031f4:	2180      	movs	r1, #128	; 0x80
 80031f6:	0209      	lsls	r1, r1, #8
 80031f8:	430a      	orrs	r2, r1
 80031fa:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80031fc:	4b09      	ldr	r3, [pc, #36]	; (8003224 <HAL_RTC_MspInit+0x78>)
 80031fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003200:	4b08      	ldr	r3, [pc, #32]	; (8003224 <HAL_RTC_MspInit+0x78>)
 8003202:	2180      	movs	r1, #128	; 0x80
 8003204:	00c9      	lsls	r1, r1, #3
 8003206:	430a      	orrs	r2, r1
 8003208:	63da      	str	r2, [r3, #60]	; 0x3c
 800320a:	4b06      	ldr	r3, [pc, #24]	; (8003224 <HAL_RTC_MspInit+0x78>)
 800320c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800320e:	2380      	movs	r3, #128	; 0x80
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4013      	ands	r3, r2
 8003214:	60bb      	str	r3, [r7, #8]
 8003216:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003218:	46c0      	nop			; (mov r8, r8)
 800321a:	46bd      	mov	sp, r7
 800321c:	b011      	add	sp, #68	; 0x44
 800321e:	bd90      	pop	{r4, r7, pc}
 8003220:	40002800 	.word	0x40002800
 8003224:	40021000 	.word	0x40021000

08003228 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003228:	b590      	push	{r4, r7, lr}
 800322a:	b08b      	sub	sp, #44	; 0x2c
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003230:	2414      	movs	r4, #20
 8003232:	193b      	adds	r3, r7, r4
 8003234:	0018      	movs	r0, r3
 8003236:	2314      	movs	r3, #20
 8003238:	001a      	movs	r2, r3
 800323a:	2100      	movs	r1, #0
 800323c:	f008 fc0a 	bl	800ba54 <memset>
  if(hspi->Instance==SPI1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a1b      	ldr	r2, [pc, #108]	; (80032b4 <HAL_SPI_MspInit+0x8c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d12f      	bne.n	80032aa <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800324a:	4b1b      	ldr	r3, [pc, #108]	; (80032b8 <HAL_SPI_MspInit+0x90>)
 800324c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800324e:	4b1a      	ldr	r3, [pc, #104]	; (80032b8 <HAL_SPI_MspInit+0x90>)
 8003250:	2180      	movs	r1, #128	; 0x80
 8003252:	0149      	lsls	r1, r1, #5
 8003254:	430a      	orrs	r2, r1
 8003256:	641a      	str	r2, [r3, #64]	; 0x40
 8003258:	4b17      	ldr	r3, [pc, #92]	; (80032b8 <HAL_SPI_MspInit+0x90>)
 800325a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800325c:	2380      	movs	r3, #128	; 0x80
 800325e:	015b      	lsls	r3, r3, #5
 8003260:	4013      	ands	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
 8003264:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003266:	4b14      	ldr	r3, [pc, #80]	; (80032b8 <HAL_SPI_MspInit+0x90>)
 8003268:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800326a:	4b13      	ldr	r3, [pc, #76]	; (80032b8 <HAL_SPI_MspInit+0x90>)
 800326c:	2102      	movs	r1, #2
 800326e:	430a      	orrs	r2, r1
 8003270:	635a      	str	r2, [r3, #52]	; 0x34
 8003272:	4b11      	ldr	r3, [pc, #68]	; (80032b8 <HAL_SPI_MspInit+0x90>)
 8003274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003276:	2202      	movs	r2, #2
 8003278:	4013      	ands	r3, r2
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LIS_SPI1_SCK_Pin|LIS_SPI1_MISO_Pin|LIS_SPI1_MOSI_Pin;
 800327e:	0021      	movs	r1, r4
 8003280:	187b      	adds	r3, r7, r1
 8003282:	2238      	movs	r2, #56	; 0x38
 8003284:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003286:	187b      	adds	r3, r7, r1
 8003288:	2202      	movs	r2, #2
 800328a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328c:	187b      	adds	r3, r7, r1
 800328e:	2200      	movs	r2, #0
 8003290:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003292:	187b      	adds	r3, r7, r1
 8003294:	2200      	movs	r2, #0
 8003296:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003298:	187b      	adds	r3, r7, r1
 800329a:	2200      	movs	r2, #0
 800329c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800329e:	187b      	adds	r3, r7, r1
 80032a0:	4a06      	ldr	r2, [pc, #24]	; (80032bc <HAL_SPI_MspInit+0x94>)
 80032a2:	0019      	movs	r1, r3
 80032a4:	0010      	movs	r0, r2
 80032a6:	f000 fc15 	bl	8003ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	46bd      	mov	sp, r7
 80032ae:	b00b      	add	sp, #44	; 0x2c
 80032b0:	bd90      	pop	{r4, r7, pc}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	40013000 	.word	0x40013000
 80032b8:	40021000 	.word	0x40021000
 80032bc:	50000400 	.word	0x50000400

080032c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a0d      	ldr	r2, [pc, #52]	; (8003304 <HAL_TIM_Base_MspInit+0x44>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d113      	bne.n	80032fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80032d2:	4b0d      	ldr	r3, [pc, #52]	; (8003308 <HAL_TIM_Base_MspInit+0x48>)
 80032d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032d6:	4b0c      	ldr	r3, [pc, #48]	; (8003308 <HAL_TIM_Base_MspInit+0x48>)
 80032d8:	2110      	movs	r1, #16
 80032da:	430a      	orrs	r2, r1
 80032dc:	63da      	str	r2, [r3, #60]	; 0x3c
 80032de:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <HAL_TIM_Base_MspInit+0x48>)
 80032e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e2:	2210      	movs	r2, #16
 80032e4:	4013      	ands	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 80032ea:	2200      	movs	r2, #0
 80032ec:	2100      	movs	r1, #0
 80032ee:	2011      	movs	r0, #17
 80032f0:	f000 fbba 	bl	8003a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 80032f4:	2011      	movs	r0, #17
 80032f6:	f000 fbcc 	bl	8003a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	46bd      	mov	sp, r7
 80032fe:	b004      	add	sp, #16
 8003300:	bd80      	pop	{r7, pc}
 8003302:	46c0      	nop			; (mov r8, r8)
 8003304:	40001000 	.word	0x40001000
 8003308:	40021000 	.word	0x40021000

0800330c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800330c:	b590      	push	{r4, r7, lr}
 800330e:	b09b      	sub	sp, #108	; 0x6c
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003314:	2354      	movs	r3, #84	; 0x54
 8003316:	18fb      	adds	r3, r7, r3
 8003318:	0018      	movs	r0, r3
 800331a:	2314      	movs	r3, #20
 800331c:	001a      	movs	r2, r3
 800331e:	2100      	movs	r1, #0
 8003320:	f008 fb98 	bl	800ba54 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003324:	2420      	movs	r4, #32
 8003326:	193b      	adds	r3, r7, r4
 8003328:	0018      	movs	r0, r3
 800332a:	2334      	movs	r3, #52	; 0x34
 800332c:	001a      	movs	r2, r3
 800332e:	2100      	movs	r1, #0
 8003330:	f008 fb90 	bl	800ba54 <memset>
  if(huart->Instance==USART1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a61      	ldr	r2, [pc, #388]	; (80034c0 <HAL_UART_MspInit+0x1b4>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d140      	bne.n	80033c0 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800333e:	193b      	adds	r3, r7, r4
 8003340:	2201      	movs	r2, #1
 8003342:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003344:	193b      	adds	r3, r7, r4
 8003346:	2200      	movs	r2, #0
 8003348:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800334a:	193b      	adds	r3, r7, r4
 800334c:	0018      	movs	r0, r3
 800334e:	f001 fb3f 	bl	80049d0 <HAL_RCCEx_PeriphCLKConfig>
 8003352:	1e03      	subs	r3, r0, #0
 8003354:	d001      	beq.n	800335a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003356:	f7ff feff 	bl	8003158 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800335a:	4b5a      	ldr	r3, [pc, #360]	; (80034c4 <HAL_UART_MspInit+0x1b8>)
 800335c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800335e:	4b59      	ldr	r3, [pc, #356]	; (80034c4 <HAL_UART_MspInit+0x1b8>)
 8003360:	2180      	movs	r1, #128	; 0x80
 8003362:	01c9      	lsls	r1, r1, #7
 8003364:	430a      	orrs	r2, r1
 8003366:	641a      	str	r2, [r3, #64]	; 0x40
 8003368:	4b56      	ldr	r3, [pc, #344]	; (80034c4 <HAL_UART_MspInit+0x1b8>)
 800336a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800336c:	2380      	movs	r3, #128	; 0x80
 800336e:	01db      	lsls	r3, r3, #7
 8003370:	4013      	ands	r3, r2
 8003372:	61fb      	str	r3, [r7, #28]
 8003374:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003376:	4b53      	ldr	r3, [pc, #332]	; (80034c4 <HAL_UART_MspInit+0x1b8>)
 8003378:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800337a:	4b52      	ldr	r3, [pc, #328]	; (80034c4 <HAL_UART_MspInit+0x1b8>)
 800337c:	2101      	movs	r1, #1
 800337e:	430a      	orrs	r2, r1
 8003380:	635a      	str	r2, [r3, #52]	; 0x34
 8003382:	4b50      	ldr	r3, [pc, #320]	; (80034c4 <HAL_UART_MspInit+0x1b8>)
 8003384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003386:	2201      	movs	r2, #1
 8003388:	4013      	ands	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
 800338c:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ASTRO_TXD_Pin|ASTRO_RXD_Pin;
 800338e:	2154      	movs	r1, #84	; 0x54
 8003390:	187b      	adds	r3, r7, r1
 8003392:	22c0      	movs	r2, #192	; 0xc0
 8003394:	00d2      	lsls	r2, r2, #3
 8003396:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003398:	187b      	adds	r3, r7, r1
 800339a:	2202      	movs	r2, #2
 800339c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339e:	187b      	adds	r3, r7, r1
 80033a0:	2200      	movs	r2, #0
 80033a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a4:	187b      	adds	r3, r7, r1
 80033a6:	2200      	movs	r2, #0
 80033a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80033aa:	187b      	adds	r3, r7, r1
 80033ac:	2201      	movs	r2, #1
 80033ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033b0:	187a      	adds	r2, r7, r1
 80033b2:	23a0      	movs	r3, #160	; 0xa0
 80033b4:	05db      	lsls	r3, r3, #23
 80033b6:	0011      	movs	r1, r2
 80033b8:	0018      	movs	r0, r3
 80033ba:	f000 fb8b 	bl	8003ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80033be:	e07b      	b.n	80034b8 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART2)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a40      	ldr	r2, [pc, #256]	; (80034c8 <HAL_UART_MspInit+0x1bc>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d140      	bne.n	800344c <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80033ca:	2120      	movs	r1, #32
 80033cc:	187b      	adds	r3, r7, r1
 80033ce:	2202      	movs	r2, #2
 80033d0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80033d2:	187b      	adds	r3, r7, r1
 80033d4:	2200      	movs	r2, #0
 80033d6:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033d8:	187b      	adds	r3, r7, r1
 80033da:	0018      	movs	r0, r3
 80033dc:	f001 faf8 	bl	80049d0 <HAL_RCCEx_PeriphCLKConfig>
 80033e0:	1e03      	subs	r3, r0, #0
 80033e2:	d001      	beq.n	80033e8 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 80033e4:	f7ff feb8 	bl	8003158 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80033e8:	4b36      	ldr	r3, [pc, #216]	; (80034c4 <HAL_UART_MspInit+0x1b8>)
 80033ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033ec:	4b35      	ldr	r3, [pc, #212]	; (80034c4 <HAL_UART_MspInit+0x1b8>)
 80033ee:	2180      	movs	r1, #128	; 0x80
 80033f0:	0289      	lsls	r1, r1, #10
 80033f2:	430a      	orrs	r2, r1
 80033f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80033f6:	4b33      	ldr	r3, [pc, #204]	; (80034c4 <HAL_UART_MspInit+0x1b8>)
 80033f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033fa:	2380      	movs	r3, #128	; 0x80
 80033fc:	029b      	lsls	r3, r3, #10
 80033fe:	4013      	ands	r3, r2
 8003400:	617b      	str	r3, [r7, #20]
 8003402:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003404:	4b2f      	ldr	r3, [pc, #188]	; (80034c4 <HAL_UART_MspInit+0x1b8>)
 8003406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003408:	4b2e      	ldr	r3, [pc, #184]	; (80034c4 <HAL_UART_MspInit+0x1b8>)
 800340a:	2101      	movs	r1, #1
 800340c:	430a      	orrs	r2, r1
 800340e:	635a      	str	r2, [r3, #52]	; 0x34
 8003410:	4b2c      	ldr	r3, [pc, #176]	; (80034c4 <HAL_UART_MspInit+0x1b8>)
 8003412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003414:	2201      	movs	r2, #1
 8003416:	4013      	ands	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
 800341a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DBG_TXD_Pin|DBG_RXD_Pin;
 800341c:	2154      	movs	r1, #84	; 0x54
 800341e:	187b      	adds	r3, r7, r1
 8003420:	220c      	movs	r2, #12
 8003422:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003424:	187b      	adds	r3, r7, r1
 8003426:	2202      	movs	r2, #2
 8003428:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800342a:	187b      	adds	r3, r7, r1
 800342c:	2201      	movs	r2, #1
 800342e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003430:	187b      	adds	r3, r7, r1
 8003432:	2200      	movs	r2, #0
 8003434:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003436:	187b      	adds	r3, r7, r1
 8003438:	2201      	movs	r2, #1
 800343a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800343c:	187a      	adds	r2, r7, r1
 800343e:	23a0      	movs	r3, #160	; 0xa0
 8003440:	05db      	lsls	r3, r3, #23
 8003442:	0011      	movs	r1, r2
 8003444:	0018      	movs	r0, r3
 8003446:	f000 fb45 	bl	8003ad4 <HAL_GPIO_Init>
}
 800344a:	e035      	b.n	80034b8 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART3)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a1e      	ldr	r2, [pc, #120]	; (80034cc <HAL_UART_MspInit+0x1c0>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d130      	bne.n	80034b8 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003456:	4b1b      	ldr	r3, [pc, #108]	; (80034c4 <HAL_UART_MspInit+0x1b8>)
 8003458:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800345a:	4b1a      	ldr	r3, [pc, #104]	; (80034c4 <HAL_UART_MspInit+0x1b8>)
 800345c:	2180      	movs	r1, #128	; 0x80
 800345e:	02c9      	lsls	r1, r1, #11
 8003460:	430a      	orrs	r2, r1
 8003462:	63da      	str	r2, [r3, #60]	; 0x3c
 8003464:	4b17      	ldr	r3, [pc, #92]	; (80034c4 <HAL_UART_MspInit+0x1b8>)
 8003466:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003468:	2380      	movs	r3, #128	; 0x80
 800346a:	02db      	lsls	r3, r3, #11
 800346c:	4013      	ands	r3, r2
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003472:	4b14      	ldr	r3, [pc, #80]	; (80034c4 <HAL_UART_MspInit+0x1b8>)
 8003474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003476:	4b13      	ldr	r3, [pc, #76]	; (80034c4 <HAL_UART_MspInit+0x1b8>)
 8003478:	2104      	movs	r1, #4
 800347a:	430a      	orrs	r2, r1
 800347c:	635a      	str	r2, [r3, #52]	; 0x34
 800347e:	4b11      	ldr	r3, [pc, #68]	; (80034c4 <HAL_UART_MspInit+0x1b8>)
 8003480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003482:	2204      	movs	r2, #4
 8003484:	4013      	ands	r3, r2
 8003486:	60bb      	str	r3, [r7, #8]
 8003488:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = L86_RXD_Pin|L86_TXD_Pin;
 800348a:	2154      	movs	r1, #84	; 0x54
 800348c:	187b      	adds	r3, r7, r1
 800348e:	22c0      	movs	r2, #192	; 0xc0
 8003490:	0112      	lsls	r2, r2, #4
 8003492:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003494:	187b      	adds	r3, r7, r1
 8003496:	2202      	movs	r2, #2
 8003498:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349a:	187b      	adds	r3, r7, r1
 800349c:	2200      	movs	r2, #0
 800349e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a0:	187b      	adds	r3, r7, r1
 80034a2:	2200      	movs	r2, #0
 80034a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 80034a6:	187b      	adds	r3, r7, r1
 80034a8:	2200      	movs	r2, #0
 80034aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034ac:	187b      	adds	r3, r7, r1
 80034ae:	4a08      	ldr	r2, [pc, #32]	; (80034d0 <HAL_UART_MspInit+0x1c4>)
 80034b0:	0019      	movs	r1, r3
 80034b2:	0010      	movs	r0, r2
 80034b4:	f000 fb0e 	bl	8003ad4 <HAL_GPIO_Init>
}
 80034b8:	46c0      	nop			; (mov r8, r8)
 80034ba:	46bd      	mov	sp, r7
 80034bc:	b01b      	add	sp, #108	; 0x6c
 80034be:	bd90      	pop	{r4, r7, pc}
 80034c0:	40013800 	.word	0x40013800
 80034c4:	40021000 	.word	0x40021000
 80034c8:	40004400 	.word	0x40004400
 80034cc:	40004800 	.word	0x40004800
 80034d0:	50000800 	.word	0x50000800

080034d4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a1c      	ldr	r2, [pc, #112]	; (8003554 <HAL_UART_MspDeInit+0x80>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d10e      	bne.n	8003504 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80034e6:	4b1c      	ldr	r3, [pc, #112]	; (8003558 <HAL_UART_MspDeInit+0x84>)
 80034e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034ea:	4b1b      	ldr	r3, [pc, #108]	; (8003558 <HAL_UART_MspDeInit+0x84>)
 80034ec:	491b      	ldr	r1, [pc, #108]	; (800355c <HAL_UART_MspDeInit+0x88>)
 80034ee:	400a      	ands	r2, r1
 80034f0:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, ASTRO_TXD_Pin|ASTRO_RXD_Pin);
 80034f2:	23c0      	movs	r3, #192	; 0xc0
 80034f4:	00da      	lsls	r2, r3, #3
 80034f6:	23a0      	movs	r3, #160	; 0xa0
 80034f8:	05db      	lsls	r3, r3, #23
 80034fa:	0011      	movs	r1, r2
 80034fc:	0018      	movs	r0, r3
 80034fe:	f000 fc4d 	bl	8003d9c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8003502:	e023      	b.n	800354c <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART2)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a15      	ldr	r2, [pc, #84]	; (8003560 <HAL_UART_MspDeInit+0x8c>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d10c      	bne.n	8003528 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 800350e:	4b12      	ldr	r3, [pc, #72]	; (8003558 <HAL_UART_MspDeInit+0x84>)
 8003510:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003512:	4b11      	ldr	r3, [pc, #68]	; (8003558 <HAL_UART_MspDeInit+0x84>)
 8003514:	4913      	ldr	r1, [pc, #76]	; (8003564 <HAL_UART_MspDeInit+0x90>)
 8003516:	400a      	ands	r2, r1
 8003518:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TXD_Pin|DBG_RXD_Pin);
 800351a:	23a0      	movs	r3, #160	; 0xa0
 800351c:	05db      	lsls	r3, r3, #23
 800351e:	210c      	movs	r1, #12
 8003520:	0018      	movs	r0, r3
 8003522:	f000 fc3b 	bl	8003d9c <HAL_GPIO_DeInit>
}
 8003526:	e011      	b.n	800354c <HAL_UART_MspDeInit+0x78>
  else if(huart->Instance==USART3)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a0e      	ldr	r2, [pc, #56]	; (8003568 <HAL_UART_MspDeInit+0x94>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d10c      	bne.n	800354c <HAL_UART_MspDeInit+0x78>
    __HAL_RCC_USART3_CLK_DISABLE();
 8003532:	4b09      	ldr	r3, [pc, #36]	; (8003558 <HAL_UART_MspDeInit+0x84>)
 8003534:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003536:	4b08      	ldr	r3, [pc, #32]	; (8003558 <HAL_UART_MspDeInit+0x84>)
 8003538:	490c      	ldr	r1, [pc, #48]	; (800356c <HAL_UART_MspDeInit+0x98>)
 800353a:	400a      	ands	r2, r1
 800353c:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOC, L86_RXD_Pin|L86_TXD_Pin);
 800353e:	23c0      	movs	r3, #192	; 0xc0
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	4a0b      	ldr	r2, [pc, #44]	; (8003570 <HAL_UART_MspDeInit+0x9c>)
 8003544:	0019      	movs	r1, r3
 8003546:	0010      	movs	r0, r2
 8003548:	f000 fc28 	bl	8003d9c <HAL_GPIO_DeInit>
}
 800354c:	46c0      	nop			; (mov r8, r8)
 800354e:	46bd      	mov	sp, r7
 8003550:	b002      	add	sp, #8
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40013800 	.word	0x40013800
 8003558:	40021000 	.word	0x40021000
 800355c:	ffffbfff 	.word	0xffffbfff
 8003560:	40004400 	.word	0x40004400
 8003564:	fffdffff 	.word	0xfffdffff
 8003568:	40004800 	.word	0x40004800
 800356c:	fffbffff 	.word	0xfffbffff
 8003570:	50000800 	.word	0x50000800

08003574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003578:	e7fe      	b.n	8003578 <NMI_Handler+0x4>

0800357a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800357e:	e7fe      	b.n	800357e <HardFault_Handler+0x4>

08003580 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003584:	46c0      	nop			; (mov r8, r8)
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800358e:	46c0      	nop			; (mov r8, r8)
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003598:	f000 f968 	bl	800386c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800359c:	46c0      	nop			; (mov r8, r8)
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80035a8:	4b03      	ldr	r3, [pc, #12]	; (80035b8 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 80035aa:	0018      	movs	r0, r3
 80035ac:	f003 f8b4 	bl	8006718 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 80035b0:	46c0      	nop			; (mov r8, r8)
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	46c0      	nop			; (mov r8, r8)
 80035b8:	2000078c 	.word	0x2000078c

080035bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  return 1;
 80035c0:	2301      	movs	r3, #1
}
 80035c2:	0018      	movs	r0, r3
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <_kill>:

int _kill(int pid, int sig)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80035d2:	f008 faeb 	bl	800bbac <__errno>
 80035d6:	0003      	movs	r3, r0
 80035d8:	2216      	movs	r2, #22
 80035da:	601a      	str	r2, [r3, #0]
  return -1;
 80035dc:	2301      	movs	r3, #1
 80035de:	425b      	negs	r3, r3
}
 80035e0:	0018      	movs	r0, r3
 80035e2:	46bd      	mov	sp, r7
 80035e4:	b002      	add	sp, #8
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <_exit>:

void _exit (int status)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80035f0:	2301      	movs	r3, #1
 80035f2:	425a      	negs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	0011      	movs	r1, r2
 80035f8:	0018      	movs	r0, r3
 80035fa:	f7ff ffe5 	bl	80035c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80035fe:	e7fe      	b.n	80035fe <_exit+0x16>

08003600 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800360c:	2300      	movs	r3, #0
 800360e:	617b      	str	r3, [r7, #20]
 8003610:	e00a      	b.n	8003628 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003612:	e000      	b.n	8003616 <_read+0x16>
 8003614:	bf00      	nop
 8003616:	0001      	movs	r1, r0
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	1c5a      	adds	r2, r3, #1
 800361c:	60ba      	str	r2, [r7, #8]
 800361e:	b2ca      	uxtb	r2, r1
 8003620:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	3301      	adds	r3, #1
 8003626:	617b      	str	r3, [r7, #20]
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	429a      	cmp	r2, r3
 800362e:	dbf0      	blt.n	8003612 <_read+0x12>
  }

  return len;
 8003630:	687b      	ldr	r3, [r7, #4]
}
 8003632:	0018      	movs	r0, r3
 8003634:	46bd      	mov	sp, r7
 8003636:	b006      	add	sp, #24
 8003638:	bd80      	pop	{r7, pc}

0800363a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b086      	sub	sp, #24
 800363e:	af00      	add	r7, sp, #0
 8003640:	60f8      	str	r0, [r7, #12]
 8003642:	60b9      	str	r1, [r7, #8]
 8003644:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]
 800364a:	e009      	b.n	8003660 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	1c5a      	adds	r2, r3, #1
 8003650:	60ba      	str	r2, [r7, #8]
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	0018      	movs	r0, r3
 8003656:	e000      	b.n	800365a <_write+0x20>
 8003658:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	3301      	adds	r3, #1
 800365e:	617b      	str	r3, [r7, #20]
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	429a      	cmp	r2, r3
 8003666:	dbf1      	blt.n	800364c <_write+0x12>
  }
  return len;
 8003668:	687b      	ldr	r3, [r7, #4]
}
 800366a:	0018      	movs	r0, r3
 800366c:	46bd      	mov	sp, r7
 800366e:	b006      	add	sp, #24
 8003670:	bd80      	pop	{r7, pc}

08003672 <_close>:

int _close(int file)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b082      	sub	sp, #8
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800367a:	2301      	movs	r3, #1
 800367c:	425b      	negs	r3, r3
}
 800367e:	0018      	movs	r0, r3
 8003680:	46bd      	mov	sp, r7
 8003682:	b002      	add	sp, #8
 8003684:	bd80      	pop	{r7, pc}

08003686 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b082      	sub	sp, #8
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	2280      	movs	r2, #128	; 0x80
 8003694:	0192      	lsls	r2, r2, #6
 8003696:	605a      	str	r2, [r3, #4]
  return 0;
 8003698:	2300      	movs	r3, #0
}
 800369a:	0018      	movs	r0, r3
 800369c:	46bd      	mov	sp, r7
 800369e:	b002      	add	sp, #8
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <_isatty>:

int _isatty(int file)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b082      	sub	sp, #8
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80036aa:	2301      	movs	r3, #1
}
 80036ac:	0018      	movs	r0, r3
 80036ae:	46bd      	mov	sp, r7
 80036b0:	b002      	add	sp, #8
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	0018      	movs	r0, r3
 80036c4:	46bd      	mov	sp, r7
 80036c6:	b004      	add	sp, #16
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036d4:	4a14      	ldr	r2, [pc, #80]	; (8003728 <_sbrk+0x5c>)
 80036d6:	4b15      	ldr	r3, [pc, #84]	; (800372c <_sbrk+0x60>)
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036e0:	4b13      	ldr	r3, [pc, #76]	; (8003730 <_sbrk+0x64>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d102      	bne.n	80036ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036e8:	4b11      	ldr	r3, [pc, #68]	; (8003730 <_sbrk+0x64>)
 80036ea:	4a12      	ldr	r2, [pc, #72]	; (8003734 <_sbrk+0x68>)
 80036ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036ee:	4b10      	ldr	r3, [pc, #64]	; (8003730 <_sbrk+0x64>)
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	18d3      	adds	r3, r2, r3
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d207      	bcs.n	800370c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036fc:	f008 fa56 	bl	800bbac <__errno>
 8003700:	0003      	movs	r3, r0
 8003702:	220c      	movs	r2, #12
 8003704:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003706:	2301      	movs	r3, #1
 8003708:	425b      	negs	r3, r3
 800370a:	e009      	b.n	8003720 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800370c:	4b08      	ldr	r3, [pc, #32]	; (8003730 <_sbrk+0x64>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003712:	4b07      	ldr	r3, [pc, #28]	; (8003730 <_sbrk+0x64>)
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	18d2      	adds	r2, r2, r3
 800371a:	4b05      	ldr	r3, [pc, #20]	; (8003730 <_sbrk+0x64>)
 800371c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800371e:	68fb      	ldr	r3, [r7, #12]
}
 8003720:	0018      	movs	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	b006      	add	sp, #24
 8003726:	bd80      	pop	{r7, pc}
 8003728:	20009000 	.word	0x20009000
 800372c:	00000400 	.word	0x00000400
 8003730:	20000b30 	.word	0x20000b30
 8003734:	20000e48 	.word	0x20000e48

08003738 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800373c:	46c0      	nop			; (mov r8, r8)
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
	...

08003744 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003744:	480d      	ldr	r0, [pc, #52]	; (800377c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003746:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003748:	f7ff fff6 	bl	8003738 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800374c:	480c      	ldr	r0, [pc, #48]	; (8003780 <LoopForever+0x6>)
  ldr r1, =_edata
 800374e:	490d      	ldr	r1, [pc, #52]	; (8003784 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003750:	4a0d      	ldr	r2, [pc, #52]	; (8003788 <LoopForever+0xe>)
  movs r3, #0
 8003752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003754:	e002      	b.n	800375c <LoopCopyDataInit>

08003756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800375a:	3304      	adds	r3, #4

0800375c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800375c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800375e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003760:	d3f9      	bcc.n	8003756 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003762:	4a0a      	ldr	r2, [pc, #40]	; (800378c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003764:	4c0a      	ldr	r4, [pc, #40]	; (8003790 <LoopForever+0x16>)
  movs r3, #0
 8003766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003768:	e001      	b.n	800376e <LoopFillZerobss>

0800376a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800376a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800376c:	3204      	adds	r2, #4

0800376e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800376e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003770:	d3fb      	bcc.n	800376a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003772:	f008 fa21 	bl	800bbb8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003776:	f7fe ff17 	bl	80025a8 <main>

0800377a <LoopForever>:

LoopForever:
  b LoopForever
 800377a:	e7fe      	b.n	800377a <LoopForever>
  ldr   r0, =_estack
 800377c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8003780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003784:	200006e0 	.word	0x200006e0
  ldr r2, =_sidata
 8003788:	080143b8 	.word	0x080143b8
  ldr r2, =_sbss
 800378c:	200006e0 	.word	0x200006e0
  ldr r4, =_ebss
 8003790:	20000e48 	.word	0x20000e48

08003794 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003794:	e7fe      	b.n	8003794 <ADC1_COMP_IRQHandler>
	...

08003798 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800379e:	1dfb      	adds	r3, r7, #7
 80037a0:	2200      	movs	r2, #0
 80037a2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037a4:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <HAL_Init+0x3c>)
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <HAL_Init+0x3c>)
 80037aa:	2180      	movs	r1, #128	; 0x80
 80037ac:	0049      	lsls	r1, r1, #1
 80037ae:	430a      	orrs	r2, r1
 80037b0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037b2:	2000      	movs	r0, #0
 80037b4:	f000 f810 	bl	80037d8 <HAL_InitTick>
 80037b8:	1e03      	subs	r3, r0, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80037bc:	1dfb      	adds	r3, r7, #7
 80037be:	2201      	movs	r2, #1
 80037c0:	701a      	strb	r2, [r3, #0]
 80037c2:	e001      	b.n	80037c8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80037c4:	f7ff fcce 	bl	8003164 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80037c8:	1dfb      	adds	r3, r7, #7
 80037ca:	781b      	ldrb	r3, [r3, #0]
}
 80037cc:	0018      	movs	r0, r3
 80037ce:	46bd      	mov	sp, r7
 80037d0:	b002      	add	sp, #8
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40022000 	.word	0x40022000

080037d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037d8:	b590      	push	{r4, r7, lr}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80037e0:	230f      	movs	r3, #15
 80037e2:	18fb      	adds	r3, r7, r3
 80037e4:	2200      	movs	r2, #0
 80037e6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80037e8:	4b1d      	ldr	r3, [pc, #116]	; (8003860 <HAL_InitTick+0x88>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d02b      	beq.n	8003848 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80037f0:	4b1c      	ldr	r3, [pc, #112]	; (8003864 <HAL_InitTick+0x8c>)
 80037f2:	681c      	ldr	r4, [r3, #0]
 80037f4:	4b1a      	ldr	r3, [pc, #104]	; (8003860 <HAL_InitTick+0x88>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	0019      	movs	r1, r3
 80037fa:	23fa      	movs	r3, #250	; 0xfa
 80037fc:	0098      	lsls	r0, r3, #2
 80037fe:	f7fc fc9d 	bl	800013c <__udivsi3>
 8003802:	0003      	movs	r3, r0
 8003804:	0019      	movs	r1, r3
 8003806:	0020      	movs	r0, r4
 8003808:	f7fc fc98 	bl	800013c <__udivsi3>
 800380c:	0003      	movs	r3, r0
 800380e:	0018      	movs	r0, r3
 8003810:	f000 f953 	bl	8003aba <HAL_SYSTICK_Config>
 8003814:	1e03      	subs	r3, r0, #0
 8003816:	d112      	bne.n	800383e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b03      	cmp	r3, #3
 800381c:	d80a      	bhi.n	8003834 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	2301      	movs	r3, #1
 8003822:	425b      	negs	r3, r3
 8003824:	2200      	movs	r2, #0
 8003826:	0018      	movs	r0, r3
 8003828:	f000 f91e 	bl	8003a68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800382c:	4b0e      	ldr	r3, [pc, #56]	; (8003868 <HAL_InitTick+0x90>)
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	e00d      	b.n	8003850 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003834:	230f      	movs	r3, #15
 8003836:	18fb      	adds	r3, r7, r3
 8003838:	2201      	movs	r2, #1
 800383a:	701a      	strb	r2, [r3, #0]
 800383c:	e008      	b.n	8003850 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800383e:	230f      	movs	r3, #15
 8003840:	18fb      	adds	r3, r7, r3
 8003842:	2201      	movs	r2, #1
 8003844:	701a      	strb	r2, [r3, #0]
 8003846:	e003      	b.n	8003850 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003848:	230f      	movs	r3, #15
 800384a:	18fb      	adds	r3, r7, r3
 800384c:	2201      	movs	r2, #1
 800384e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003850:	230f      	movs	r3, #15
 8003852:	18fb      	adds	r3, r7, r3
 8003854:	781b      	ldrb	r3, [r3, #0]
}
 8003856:	0018      	movs	r0, r3
 8003858:	46bd      	mov	sp, r7
 800385a:	b005      	add	sp, #20
 800385c:	bd90      	pop	{r4, r7, pc}
 800385e:	46c0      	nop			; (mov r8, r8)
 8003860:	20000028 	.word	0x20000028
 8003864:	20000020 	.word	0x20000020
 8003868:	20000024 	.word	0x20000024

0800386c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003870:	4b05      	ldr	r3, [pc, #20]	; (8003888 <HAL_IncTick+0x1c>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	001a      	movs	r2, r3
 8003876:	4b05      	ldr	r3, [pc, #20]	; (800388c <HAL_IncTick+0x20>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	18d2      	adds	r2, r2, r3
 800387c:	4b03      	ldr	r3, [pc, #12]	; (800388c <HAL_IncTick+0x20>)
 800387e:	601a      	str	r2, [r3, #0]
}
 8003880:	46c0      	nop			; (mov r8, r8)
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	46c0      	nop			; (mov r8, r8)
 8003888:	20000028 	.word	0x20000028
 800388c:	20000b34 	.word	0x20000b34

08003890 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  return uwTick;
 8003894:	4b02      	ldr	r3, [pc, #8]	; (80038a0 <HAL_GetTick+0x10>)
 8003896:	681b      	ldr	r3, [r3, #0]
}
 8003898:	0018      	movs	r0, r3
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	46c0      	nop			; (mov r8, r8)
 80038a0:	20000b34 	.word	0x20000b34

080038a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038ac:	f7ff fff0 	bl	8003890 <HAL_GetTick>
 80038b0:	0003      	movs	r3, r0
 80038b2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	3301      	adds	r3, #1
 80038bc:	d005      	beq.n	80038ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038be:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <HAL_Delay+0x44>)
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	001a      	movs	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	189b      	adds	r3, r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	f7ff ffe0 	bl	8003890 <HAL_GetTick>
 80038d0:	0002      	movs	r2, r0
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d8f7      	bhi.n	80038cc <HAL_Delay+0x28>
  {
  }
}
 80038dc:	46c0      	nop			; (mov r8, r8)
 80038de:	46c0      	nop			; (mov r8, r8)
 80038e0:	46bd      	mov	sp, r7
 80038e2:	b004      	add	sp, #16
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	20000028 	.word	0x20000028

080038ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	0002      	movs	r2, r0
 80038f4:	1dfb      	adds	r3, r7, #7
 80038f6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80038f8:	1dfb      	adds	r3, r7, #7
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	2b7f      	cmp	r3, #127	; 0x7f
 80038fe:	d809      	bhi.n	8003914 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003900:	1dfb      	adds	r3, r7, #7
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	001a      	movs	r2, r3
 8003906:	231f      	movs	r3, #31
 8003908:	401a      	ands	r2, r3
 800390a:	4b04      	ldr	r3, [pc, #16]	; (800391c <__NVIC_EnableIRQ+0x30>)
 800390c:	2101      	movs	r1, #1
 800390e:	4091      	lsls	r1, r2
 8003910:	000a      	movs	r2, r1
 8003912:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003914:	46c0      	nop			; (mov r8, r8)
 8003916:	46bd      	mov	sp, r7
 8003918:	b002      	add	sp, #8
 800391a:	bd80      	pop	{r7, pc}
 800391c:	e000e100 	.word	0xe000e100

08003920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003920:	b590      	push	{r4, r7, lr}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	0002      	movs	r2, r0
 8003928:	6039      	str	r1, [r7, #0]
 800392a:	1dfb      	adds	r3, r7, #7
 800392c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800392e:	1dfb      	adds	r3, r7, #7
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b7f      	cmp	r3, #127	; 0x7f
 8003934:	d828      	bhi.n	8003988 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003936:	4a2f      	ldr	r2, [pc, #188]	; (80039f4 <__NVIC_SetPriority+0xd4>)
 8003938:	1dfb      	adds	r3, r7, #7
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	b25b      	sxtb	r3, r3
 800393e:	089b      	lsrs	r3, r3, #2
 8003940:	33c0      	adds	r3, #192	; 0xc0
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	589b      	ldr	r3, [r3, r2]
 8003946:	1dfa      	adds	r2, r7, #7
 8003948:	7812      	ldrb	r2, [r2, #0]
 800394a:	0011      	movs	r1, r2
 800394c:	2203      	movs	r2, #3
 800394e:	400a      	ands	r2, r1
 8003950:	00d2      	lsls	r2, r2, #3
 8003952:	21ff      	movs	r1, #255	; 0xff
 8003954:	4091      	lsls	r1, r2
 8003956:	000a      	movs	r2, r1
 8003958:	43d2      	mvns	r2, r2
 800395a:	401a      	ands	r2, r3
 800395c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	019b      	lsls	r3, r3, #6
 8003962:	22ff      	movs	r2, #255	; 0xff
 8003964:	401a      	ands	r2, r3
 8003966:	1dfb      	adds	r3, r7, #7
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	0018      	movs	r0, r3
 800396c:	2303      	movs	r3, #3
 800396e:	4003      	ands	r3, r0
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003974:	481f      	ldr	r0, [pc, #124]	; (80039f4 <__NVIC_SetPriority+0xd4>)
 8003976:	1dfb      	adds	r3, r7, #7
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	b25b      	sxtb	r3, r3
 800397c:	089b      	lsrs	r3, r3, #2
 800397e:	430a      	orrs	r2, r1
 8003980:	33c0      	adds	r3, #192	; 0xc0
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003986:	e031      	b.n	80039ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003988:	4a1b      	ldr	r2, [pc, #108]	; (80039f8 <__NVIC_SetPriority+0xd8>)
 800398a:	1dfb      	adds	r3, r7, #7
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	0019      	movs	r1, r3
 8003990:	230f      	movs	r3, #15
 8003992:	400b      	ands	r3, r1
 8003994:	3b08      	subs	r3, #8
 8003996:	089b      	lsrs	r3, r3, #2
 8003998:	3306      	adds	r3, #6
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	18d3      	adds	r3, r2, r3
 800399e:	3304      	adds	r3, #4
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	1dfa      	adds	r2, r7, #7
 80039a4:	7812      	ldrb	r2, [r2, #0]
 80039a6:	0011      	movs	r1, r2
 80039a8:	2203      	movs	r2, #3
 80039aa:	400a      	ands	r2, r1
 80039ac:	00d2      	lsls	r2, r2, #3
 80039ae:	21ff      	movs	r1, #255	; 0xff
 80039b0:	4091      	lsls	r1, r2
 80039b2:	000a      	movs	r2, r1
 80039b4:	43d2      	mvns	r2, r2
 80039b6:	401a      	ands	r2, r3
 80039b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	019b      	lsls	r3, r3, #6
 80039be:	22ff      	movs	r2, #255	; 0xff
 80039c0:	401a      	ands	r2, r3
 80039c2:	1dfb      	adds	r3, r7, #7
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	0018      	movs	r0, r3
 80039c8:	2303      	movs	r3, #3
 80039ca:	4003      	ands	r3, r0
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039d0:	4809      	ldr	r0, [pc, #36]	; (80039f8 <__NVIC_SetPriority+0xd8>)
 80039d2:	1dfb      	adds	r3, r7, #7
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	001c      	movs	r4, r3
 80039d8:	230f      	movs	r3, #15
 80039da:	4023      	ands	r3, r4
 80039dc:	3b08      	subs	r3, #8
 80039de:	089b      	lsrs	r3, r3, #2
 80039e0:	430a      	orrs	r2, r1
 80039e2:	3306      	adds	r3, #6
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	18c3      	adds	r3, r0, r3
 80039e8:	3304      	adds	r3, #4
 80039ea:	601a      	str	r2, [r3, #0]
}
 80039ec:	46c0      	nop			; (mov r8, r8)
 80039ee:	46bd      	mov	sp, r7
 80039f0:	b003      	add	sp, #12
 80039f2:	bd90      	pop	{r4, r7, pc}
 80039f4:	e000e100 	.word	0xe000e100
 80039f8:	e000ed00 	.word	0xe000ed00

080039fc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003a00:	f3bf 8f4f 	dsb	sy
}
 8003a04:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a06:	4b04      	ldr	r3, [pc, #16]	; (8003a18 <__NVIC_SystemReset+0x1c>)
 8003a08:	4a04      	ldr	r2, [pc, #16]	; (8003a1c <__NVIC_SystemReset+0x20>)
 8003a0a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003a0c:	f3bf 8f4f 	dsb	sy
}
 8003a10:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003a12:	46c0      	nop			; (mov r8, r8)
 8003a14:	e7fd      	b.n	8003a12 <__NVIC_SystemReset+0x16>
 8003a16:	46c0      	nop			; (mov r8, r8)
 8003a18:	e000ed00 	.word	0xe000ed00
 8003a1c:	05fa0004 	.word	0x05fa0004

08003a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	1e5a      	subs	r2, r3, #1
 8003a2c:	2380      	movs	r3, #128	; 0x80
 8003a2e:	045b      	lsls	r3, r3, #17
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d301      	bcc.n	8003a38 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a34:	2301      	movs	r3, #1
 8003a36:	e010      	b.n	8003a5a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a38:	4b0a      	ldr	r3, [pc, #40]	; (8003a64 <SysTick_Config+0x44>)
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	3a01      	subs	r2, #1
 8003a3e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a40:	2301      	movs	r3, #1
 8003a42:	425b      	negs	r3, r3
 8003a44:	2103      	movs	r1, #3
 8003a46:	0018      	movs	r0, r3
 8003a48:	f7ff ff6a 	bl	8003920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a4c:	4b05      	ldr	r3, [pc, #20]	; (8003a64 <SysTick_Config+0x44>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a52:	4b04      	ldr	r3, [pc, #16]	; (8003a64 <SysTick_Config+0x44>)
 8003a54:	2207      	movs	r2, #7
 8003a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	b002      	add	sp, #8
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	46c0      	nop			; (mov r8, r8)
 8003a64:	e000e010 	.word	0xe000e010

08003a68 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60b9      	str	r1, [r7, #8]
 8003a70:	607a      	str	r2, [r7, #4]
 8003a72:	210f      	movs	r1, #15
 8003a74:	187b      	adds	r3, r7, r1
 8003a76:	1c02      	adds	r2, r0, #0
 8003a78:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	187b      	adds	r3, r7, r1
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	b25b      	sxtb	r3, r3
 8003a82:	0011      	movs	r1, r2
 8003a84:	0018      	movs	r0, r3
 8003a86:	f7ff ff4b 	bl	8003920 <__NVIC_SetPriority>
}
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	b004      	add	sp, #16
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b082      	sub	sp, #8
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	0002      	movs	r2, r0
 8003a9a:	1dfb      	adds	r3, r7, #7
 8003a9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a9e:	1dfb      	adds	r3, r7, #7
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	b25b      	sxtb	r3, r3
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	f7ff ff21 	bl	80038ec <__NVIC_EnableIRQ>
}
 8003aaa:	46c0      	nop			; (mov r8, r8)
 8003aac:	46bd      	mov	sp, r7
 8003aae:	b002      	add	sp, #8
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003ab6:	f7ff ffa1 	bl	80039fc <__NVIC_SystemReset>

08003aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b082      	sub	sp, #8
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	f7ff ffab 	bl	8003a20 <SysTick_Config>
 8003aca:	0003      	movs	r3, r0
}
 8003acc:	0018      	movs	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b002      	add	sp, #8
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ae2:	e147      	b.n	8003d74 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2101      	movs	r1, #1
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	4091      	lsls	r1, r2
 8003aee:	000a      	movs	r2, r1
 8003af0:	4013      	ands	r3, r2
 8003af2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d100      	bne.n	8003afc <HAL_GPIO_Init+0x28>
 8003afa:	e138      	b.n	8003d6e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2203      	movs	r2, #3
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d005      	beq.n	8003b14 <HAL_GPIO_Init+0x40>
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2203      	movs	r2, #3
 8003b0e:	4013      	ands	r3, r2
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d130      	bne.n	8003b76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	2203      	movs	r2, #3
 8003b20:	409a      	lsls	r2, r3
 8003b22:	0013      	movs	r3, r2
 8003b24:	43da      	mvns	r2, r3
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	68da      	ldr	r2, [r3, #12]
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	409a      	lsls	r2, r3
 8003b36:	0013      	movs	r3, r2
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	409a      	lsls	r2, r3
 8003b50:	0013      	movs	r3, r2
 8003b52:	43da      	mvns	r2, r3
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	4013      	ands	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	091b      	lsrs	r3, r3, #4
 8003b60:	2201      	movs	r2, #1
 8003b62:	401a      	ands	r2, r3
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	409a      	lsls	r2, r3
 8003b68:	0013      	movs	r3, r2
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2203      	movs	r2, #3
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	2b03      	cmp	r3, #3
 8003b80:	d017      	beq.n	8003bb2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	2203      	movs	r2, #3
 8003b8e:	409a      	lsls	r2, r3
 8003b90:	0013      	movs	r3, r2
 8003b92:	43da      	mvns	r2, r3
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	4013      	ands	r3, r2
 8003b98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	689a      	ldr	r2, [r3, #8]
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	409a      	lsls	r2, r3
 8003ba4:	0013      	movs	r3, r2
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2203      	movs	r2, #3
 8003bb8:	4013      	ands	r3, r2
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d123      	bne.n	8003c06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	08da      	lsrs	r2, r3, #3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	3208      	adds	r2, #8
 8003bc6:	0092      	lsls	r2, r2, #2
 8003bc8:	58d3      	ldr	r3, [r2, r3]
 8003bca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	2207      	movs	r2, #7
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	220f      	movs	r2, #15
 8003bd6:	409a      	lsls	r2, r3
 8003bd8:	0013      	movs	r3, r2
 8003bda:	43da      	mvns	r2, r3
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	4013      	ands	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	691a      	ldr	r2, [r3, #16]
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	2107      	movs	r1, #7
 8003bea:	400b      	ands	r3, r1
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	409a      	lsls	r2, r3
 8003bf0:	0013      	movs	r3, r2
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	08da      	lsrs	r2, r3, #3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3208      	adds	r2, #8
 8003c00:	0092      	lsls	r2, r2, #2
 8003c02:	6939      	ldr	r1, [r7, #16]
 8003c04:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	2203      	movs	r2, #3
 8003c12:	409a      	lsls	r2, r3
 8003c14:	0013      	movs	r3, r2
 8003c16:	43da      	mvns	r2, r3
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2203      	movs	r2, #3
 8003c24:	401a      	ands	r2, r3
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	409a      	lsls	r2, r3
 8003c2c:	0013      	movs	r3, r2
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	23c0      	movs	r3, #192	; 0xc0
 8003c40:	029b      	lsls	r3, r3, #10
 8003c42:	4013      	ands	r3, r2
 8003c44:	d100      	bne.n	8003c48 <HAL_GPIO_Init+0x174>
 8003c46:	e092      	b.n	8003d6e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003c48:	4a50      	ldr	r2, [pc, #320]	; (8003d8c <HAL_GPIO_Init+0x2b8>)
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	089b      	lsrs	r3, r3, #2
 8003c4e:	3318      	adds	r3, #24
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	589b      	ldr	r3, [r3, r2]
 8003c54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	2203      	movs	r2, #3
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	220f      	movs	r2, #15
 8003c60:	409a      	lsls	r2, r3
 8003c62:	0013      	movs	r3, r2
 8003c64:	43da      	mvns	r2, r3
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	23a0      	movs	r3, #160	; 0xa0
 8003c70:	05db      	lsls	r3, r3, #23
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d013      	beq.n	8003c9e <HAL_GPIO_Init+0x1ca>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a45      	ldr	r2, [pc, #276]	; (8003d90 <HAL_GPIO_Init+0x2bc>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d00d      	beq.n	8003c9a <HAL_GPIO_Init+0x1c6>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a44      	ldr	r2, [pc, #272]	; (8003d94 <HAL_GPIO_Init+0x2c0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d007      	beq.n	8003c96 <HAL_GPIO_Init+0x1c2>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a43      	ldr	r2, [pc, #268]	; (8003d98 <HAL_GPIO_Init+0x2c4>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d101      	bne.n	8003c92 <HAL_GPIO_Init+0x1be>
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e006      	b.n	8003ca0 <HAL_GPIO_Init+0x1cc>
 8003c92:	2305      	movs	r3, #5
 8003c94:	e004      	b.n	8003ca0 <HAL_GPIO_Init+0x1cc>
 8003c96:	2302      	movs	r3, #2
 8003c98:	e002      	b.n	8003ca0 <HAL_GPIO_Init+0x1cc>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <HAL_GPIO_Init+0x1cc>
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	2103      	movs	r1, #3
 8003ca4:	400a      	ands	r2, r1
 8003ca6:	00d2      	lsls	r2, r2, #3
 8003ca8:	4093      	lsls	r3, r2
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003cb0:	4936      	ldr	r1, [pc, #216]	; (8003d8c <HAL_GPIO_Init+0x2b8>)
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	089b      	lsrs	r3, r3, #2
 8003cb6:	3318      	adds	r3, #24
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cbe:	4b33      	ldr	r3, [pc, #204]	; (8003d8c <HAL_GPIO_Init+0x2b8>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	43da      	mvns	r2, r3
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	2380      	movs	r3, #128	; 0x80
 8003cd4:	035b      	lsls	r3, r3, #13
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	d003      	beq.n	8003ce2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ce2:	4b2a      	ldr	r3, [pc, #168]	; (8003d8c <HAL_GPIO_Init+0x2b8>)
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003ce8:	4b28      	ldr	r3, [pc, #160]	; (8003d8c <HAL_GPIO_Init+0x2b8>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	43da      	mvns	r2, r3
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	2380      	movs	r3, #128	; 0x80
 8003cfe:	039b      	lsls	r3, r3, #14
 8003d00:	4013      	ands	r3, r2
 8003d02:	d003      	beq.n	8003d0c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d0c:	4b1f      	ldr	r3, [pc, #124]	; (8003d8c <HAL_GPIO_Init+0x2b8>)
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003d12:	4a1e      	ldr	r2, [pc, #120]	; (8003d8c <HAL_GPIO_Init+0x2b8>)
 8003d14:	2384      	movs	r3, #132	; 0x84
 8003d16:	58d3      	ldr	r3, [r2, r3]
 8003d18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	43da      	mvns	r2, r3
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	4013      	ands	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	2380      	movs	r3, #128	; 0x80
 8003d2a:	029b      	lsls	r3, r3, #10
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	d003      	beq.n	8003d38 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d38:	4914      	ldr	r1, [pc, #80]	; (8003d8c <HAL_GPIO_Init+0x2b8>)
 8003d3a:	2284      	movs	r2, #132	; 0x84
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003d40:	4a12      	ldr	r2, [pc, #72]	; (8003d8c <HAL_GPIO_Init+0x2b8>)
 8003d42:	2380      	movs	r3, #128	; 0x80
 8003d44:	58d3      	ldr	r3, [r2, r3]
 8003d46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	43da      	mvns	r2, r3
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	2380      	movs	r3, #128	; 0x80
 8003d58:	025b      	lsls	r3, r3, #9
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	d003      	beq.n	8003d66 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d66:	4909      	ldr	r1, [pc, #36]	; (8003d8c <HAL_GPIO_Init+0x2b8>)
 8003d68:	2280      	movs	r2, #128	; 0x80
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	3301      	adds	r3, #1
 8003d72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	40da      	lsrs	r2, r3
 8003d7c:	1e13      	subs	r3, r2, #0
 8003d7e:	d000      	beq.n	8003d82 <HAL_GPIO_Init+0x2ae>
 8003d80:	e6b0      	b.n	8003ae4 <HAL_GPIO_Init+0x10>
  }
}
 8003d82:	46c0      	nop			; (mov r8, r8)
 8003d84:	46c0      	nop			; (mov r8, r8)
 8003d86:	46bd      	mov	sp, r7
 8003d88:	b006      	add	sp, #24
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40021800 	.word	0x40021800
 8003d90:	50000400 	.word	0x50000400
 8003d94:	50000800 	.word	0x50000800
 8003d98:	50000c00 	.word	0x50000c00

08003d9c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003da6:	2300      	movs	r3, #0
 8003da8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003daa:	e0b4      	b.n	8003f16 <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003dac:	2201      	movs	r2, #1
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	409a      	lsls	r2, r3
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	4013      	ands	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d100      	bne.n	8003dc0 <HAL_GPIO_DeInit+0x24>
 8003dbe:	e0a7      	b.n	8003f10 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8003dc0:	4a5a      	ldr	r2, [pc, #360]	; (8003f2c <HAL_GPIO_DeInit+0x190>)
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	089b      	lsrs	r3, r3, #2
 8003dc6:	3318      	adds	r3, #24
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	589b      	ldr	r3, [r3, r2]
 8003dcc:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	2203      	movs	r2, #3
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	220f      	movs	r2, #15
 8003dd8:	409a      	lsls	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	23a0      	movs	r3, #160	; 0xa0
 8003de4:	05db      	lsls	r3, r3, #23
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d013      	beq.n	8003e12 <HAL_GPIO_DeInit+0x76>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a50      	ldr	r2, [pc, #320]	; (8003f30 <HAL_GPIO_DeInit+0x194>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d00d      	beq.n	8003e0e <HAL_GPIO_DeInit+0x72>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a4f      	ldr	r2, [pc, #316]	; (8003f34 <HAL_GPIO_DeInit+0x198>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d007      	beq.n	8003e0a <HAL_GPIO_DeInit+0x6e>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a4e      	ldr	r2, [pc, #312]	; (8003f38 <HAL_GPIO_DeInit+0x19c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d101      	bne.n	8003e06 <HAL_GPIO_DeInit+0x6a>
 8003e02:	2303      	movs	r3, #3
 8003e04:	e006      	b.n	8003e14 <HAL_GPIO_DeInit+0x78>
 8003e06:	2305      	movs	r3, #5
 8003e08:	e004      	b.n	8003e14 <HAL_GPIO_DeInit+0x78>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	e002      	b.n	8003e14 <HAL_GPIO_DeInit+0x78>
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e000      	b.n	8003e14 <HAL_GPIO_DeInit+0x78>
 8003e12:	2300      	movs	r3, #0
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	2103      	movs	r1, #3
 8003e18:	400a      	ands	r2, r1
 8003e1a:	00d2      	lsls	r2, r2, #3
 8003e1c:	4093      	lsls	r3, r2
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d136      	bne.n	8003e92 <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003e24:	4a41      	ldr	r2, [pc, #260]	; (8003f2c <HAL_GPIO_DeInit+0x190>)
 8003e26:	2380      	movs	r3, #128	; 0x80
 8003e28:	58d3      	ldr	r3, [r2, r3]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	43d2      	mvns	r2, r2
 8003e2e:	493f      	ldr	r1, [pc, #252]	; (8003f2c <HAL_GPIO_DeInit+0x190>)
 8003e30:	4013      	ands	r3, r2
 8003e32:	2280      	movs	r2, #128	; 0x80
 8003e34:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8003e36:	4a3d      	ldr	r2, [pc, #244]	; (8003f2c <HAL_GPIO_DeInit+0x190>)
 8003e38:	2384      	movs	r3, #132	; 0x84
 8003e3a:	58d3      	ldr	r3, [r2, r3]
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	43d2      	mvns	r2, r2
 8003e40:	493a      	ldr	r1, [pc, #232]	; (8003f2c <HAL_GPIO_DeInit+0x190>)
 8003e42:	4013      	ands	r3, r2
 8003e44:	2284      	movs	r2, #132	; 0x84
 8003e46:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003e48:	4b38      	ldr	r3, [pc, #224]	; (8003f2c <HAL_GPIO_DeInit+0x190>)
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	43d9      	mvns	r1, r3
 8003e50:	4b36      	ldr	r3, [pc, #216]	; (8003f2c <HAL_GPIO_DeInit+0x190>)
 8003e52:	400a      	ands	r2, r1
 8003e54:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003e56:	4b35      	ldr	r3, [pc, #212]	; (8003f2c <HAL_GPIO_DeInit+0x190>)
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	43d9      	mvns	r1, r3
 8003e5e:	4b33      	ldr	r3, [pc, #204]	; (8003f2c <HAL_GPIO_DeInit+0x190>)
 8003e60:	400a      	ands	r2, r1
 8003e62:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	2203      	movs	r2, #3
 8003e68:	4013      	ands	r3, r2
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	220f      	movs	r2, #15
 8003e6e:	409a      	lsls	r2, r3
 8003e70:	0013      	movs	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8003e74:	4a2d      	ldr	r2, [pc, #180]	; (8003f2c <HAL_GPIO_DeInit+0x190>)
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	089b      	lsrs	r3, r3, #2
 8003e7a:	3318      	adds	r3, #24
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	589a      	ldr	r2, [r3, r2]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	43d9      	mvns	r1, r3
 8003e84:	4829      	ldr	r0, [pc, #164]	; (8003f2c <HAL_GPIO_DeInit+0x190>)
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	089b      	lsrs	r3, r3, #2
 8003e8a:	400a      	ands	r2, r1
 8003e8c:	3318      	adds	r3, #24
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	2103      	movs	r1, #3
 8003e9c:	4099      	lsls	r1, r3
 8003e9e:	000b      	movs	r3, r1
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	08da      	lsrs	r2, r3, #3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	3208      	adds	r2, #8
 8003eae:	0092      	lsls	r2, r2, #2
 8003eb0:	58d3      	ldr	r3, [r2, r3]
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	2107      	movs	r1, #7
 8003eb6:	400a      	ands	r2, r1
 8003eb8:	0092      	lsls	r2, r2, #2
 8003eba:	210f      	movs	r1, #15
 8003ebc:	4091      	lsls	r1, r2
 8003ebe:	000a      	movs	r2, r1
 8003ec0:	43d1      	mvns	r1, r2
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	08d2      	lsrs	r2, r2, #3
 8003ec6:	4019      	ands	r1, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3208      	adds	r2, #8
 8003ecc:	0092      	lsls	r2, r2, #2
 8003ece:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	0052      	lsls	r2, r2, #1
 8003ed8:	2103      	movs	r1, #3
 8003eda:	4091      	lsls	r1, r2
 8003edc:	000a      	movs	r2, r1
 8003ede:	43d2      	mvns	r2, r2
 8003ee0:	401a      	ands	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2101      	movs	r1, #1
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	4091      	lsls	r1, r2
 8003ef0:	000a      	movs	r2, r1
 8003ef2:	43d2      	mvns	r2, r2
 8003ef4:	401a      	ands	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	0052      	lsls	r2, r2, #1
 8003f02:	2103      	movs	r1, #3
 8003f04:	4091      	lsls	r1, r2
 8003f06:	000a      	movs	r2, r1
 8003f08:	43d2      	mvns	r2, r2
 8003f0a:	401a      	ands	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	3301      	adds	r3, #1
 8003f14:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	40da      	lsrs	r2, r3
 8003f1c:	1e13      	subs	r3, r2, #0
 8003f1e:	d000      	beq.n	8003f22 <HAL_GPIO_DeInit+0x186>
 8003f20:	e744      	b.n	8003dac <HAL_GPIO_DeInit+0x10>
  }
}
 8003f22:	46c0      	nop			; (mov r8, r8)
 8003f24:	46c0      	nop			; (mov r8, r8)
 8003f26:	46bd      	mov	sp, r7
 8003f28:	b006      	add	sp, #24
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40021800 	.word	0x40021800
 8003f30:	50000400 	.word	0x50000400
 8003f34:	50000800 	.word	0x50000800
 8003f38:	50000c00 	.word	0x50000c00

08003f3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	000a      	movs	r2, r1
 8003f46:	1cbb      	adds	r3, r7, #2
 8003f48:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	1cba      	adds	r2, r7, #2
 8003f50:	8812      	ldrh	r2, [r2, #0]
 8003f52:	4013      	ands	r3, r2
 8003f54:	d004      	beq.n	8003f60 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003f56:	230f      	movs	r3, #15
 8003f58:	18fb      	adds	r3, r7, r3
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	701a      	strb	r2, [r3, #0]
 8003f5e:	e003      	b.n	8003f68 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f60:	230f      	movs	r3, #15
 8003f62:	18fb      	adds	r3, r7, r3
 8003f64:	2200      	movs	r2, #0
 8003f66:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003f68:	230f      	movs	r3, #15
 8003f6a:	18fb      	adds	r3, r7, r3
 8003f6c:	781b      	ldrb	r3, [r3, #0]
}
 8003f6e:	0018      	movs	r0, r3
 8003f70:	46bd      	mov	sp, r7
 8003f72:	b004      	add	sp, #16
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b082      	sub	sp, #8
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
 8003f7e:	0008      	movs	r0, r1
 8003f80:	0011      	movs	r1, r2
 8003f82:	1cbb      	adds	r3, r7, #2
 8003f84:	1c02      	adds	r2, r0, #0
 8003f86:	801a      	strh	r2, [r3, #0]
 8003f88:	1c7b      	adds	r3, r7, #1
 8003f8a:	1c0a      	adds	r2, r1, #0
 8003f8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f8e:	1c7b      	adds	r3, r7, #1
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d004      	beq.n	8003fa0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f96:	1cbb      	adds	r3, r7, #2
 8003f98:	881a      	ldrh	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f9e:	e003      	b.n	8003fa8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fa0:	1cbb      	adds	r3, r7, #2
 8003fa2:	881a      	ldrh	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003fa8:	46c0      	nop			; (mov r8, r8)
 8003faa:	46bd      	mov	sp, r7
 8003fac:	b002      	add	sp, #8
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003fb8:	4b19      	ldr	r3, [pc, #100]	; (8004020 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a19      	ldr	r2, [pc, #100]	; (8004024 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	0019      	movs	r1, r3
 8003fc2:	4b17      	ldr	r3, [pc, #92]	; (8004020 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	2380      	movs	r3, #128	; 0x80
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d11f      	bne.n	8004014 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003fd4:	4b14      	ldr	r3, [pc, #80]	; (8004028 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	0013      	movs	r3, r2
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	189b      	adds	r3, r3, r2
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	4912      	ldr	r1, [pc, #72]	; (800402c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003fe2:	0018      	movs	r0, r3
 8003fe4:	f7fc f8aa 	bl	800013c <__udivsi3>
 8003fe8:	0003      	movs	r3, r0
 8003fea:	3301      	adds	r3, #1
 8003fec:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fee:	e008      	b.n	8004002 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	e001      	b.n	8004002 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e009      	b.n	8004016 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004002:	4b07      	ldr	r3, [pc, #28]	; (8004020 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004004:	695a      	ldr	r2, [r3, #20]
 8004006:	2380      	movs	r3, #128	; 0x80
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	401a      	ands	r2, r3
 800400c:	2380      	movs	r3, #128	; 0x80
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	429a      	cmp	r2, r3
 8004012:	d0ed      	beq.n	8003ff0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	0018      	movs	r0, r3
 8004018:	46bd      	mov	sp, r7
 800401a:	b004      	add	sp, #16
 800401c:	bd80      	pop	{r7, pc}
 800401e:	46c0      	nop			; (mov r8, r8)
 8004020:	40007000 	.word	0x40007000
 8004024:	fffff9ff 	.word	0xfffff9ff
 8004028:	20000020 	.word	0x20000020
 800402c:	000f4240 	.word	0x000f4240

08004030 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004034:	4b03      	ldr	r3, [pc, #12]	; (8004044 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	23e0      	movs	r3, #224	; 0xe0
 800403a:	01db      	lsls	r3, r3, #7
 800403c:	4013      	ands	r3, r2
}
 800403e:	0018      	movs	r0, r3
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40021000 	.word	0x40021000

08004048 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b088      	sub	sp, #32
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e2fe      	b.n	8004658 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2201      	movs	r2, #1
 8004060:	4013      	ands	r3, r2
 8004062:	d100      	bne.n	8004066 <HAL_RCC_OscConfig+0x1e>
 8004064:	e07c      	b.n	8004160 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004066:	4bc3      	ldr	r3, [pc, #780]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	2238      	movs	r2, #56	; 0x38
 800406c:	4013      	ands	r3, r2
 800406e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004070:	4bc0      	ldr	r3, [pc, #768]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	2203      	movs	r2, #3
 8004076:	4013      	ands	r3, r2
 8004078:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	2b10      	cmp	r3, #16
 800407e:	d102      	bne.n	8004086 <HAL_RCC_OscConfig+0x3e>
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	2b03      	cmp	r3, #3
 8004084:	d002      	beq.n	800408c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	2b08      	cmp	r3, #8
 800408a:	d10b      	bne.n	80040a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800408c:	4bb9      	ldr	r3, [pc, #740]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	2380      	movs	r3, #128	; 0x80
 8004092:	029b      	lsls	r3, r3, #10
 8004094:	4013      	ands	r3, r2
 8004096:	d062      	beq.n	800415e <HAL_RCC_OscConfig+0x116>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d15e      	bne.n	800415e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e2d9      	b.n	8004658 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	2380      	movs	r3, #128	; 0x80
 80040aa:	025b      	lsls	r3, r3, #9
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d107      	bne.n	80040c0 <HAL_RCC_OscConfig+0x78>
 80040b0:	4bb0      	ldr	r3, [pc, #704]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	4baf      	ldr	r3, [pc, #700]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 80040b6:	2180      	movs	r1, #128	; 0x80
 80040b8:	0249      	lsls	r1, r1, #9
 80040ba:	430a      	orrs	r2, r1
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	e020      	b.n	8004102 <HAL_RCC_OscConfig+0xba>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	23a0      	movs	r3, #160	; 0xa0
 80040c6:	02db      	lsls	r3, r3, #11
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d10e      	bne.n	80040ea <HAL_RCC_OscConfig+0xa2>
 80040cc:	4ba9      	ldr	r3, [pc, #676]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	4ba8      	ldr	r3, [pc, #672]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 80040d2:	2180      	movs	r1, #128	; 0x80
 80040d4:	02c9      	lsls	r1, r1, #11
 80040d6:	430a      	orrs	r2, r1
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	4ba6      	ldr	r3, [pc, #664]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	4ba5      	ldr	r3, [pc, #660]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 80040e0:	2180      	movs	r1, #128	; 0x80
 80040e2:	0249      	lsls	r1, r1, #9
 80040e4:	430a      	orrs	r2, r1
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	e00b      	b.n	8004102 <HAL_RCC_OscConfig+0xba>
 80040ea:	4ba2      	ldr	r3, [pc, #648]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	4ba1      	ldr	r3, [pc, #644]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 80040f0:	49a1      	ldr	r1, [pc, #644]	; (8004378 <HAL_RCC_OscConfig+0x330>)
 80040f2:	400a      	ands	r2, r1
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	4b9f      	ldr	r3, [pc, #636]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	4b9e      	ldr	r3, [pc, #632]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 80040fc:	499f      	ldr	r1, [pc, #636]	; (800437c <HAL_RCC_OscConfig+0x334>)
 80040fe:	400a      	ands	r2, r1
 8004100:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d014      	beq.n	8004134 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410a:	f7ff fbc1 	bl	8003890 <HAL_GetTick>
 800410e:	0003      	movs	r3, r0
 8004110:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004114:	f7ff fbbc 	bl	8003890 <HAL_GetTick>
 8004118:	0002      	movs	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b64      	cmp	r3, #100	; 0x64
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e298      	b.n	8004658 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004126:	4b93      	ldr	r3, [pc, #588]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	2380      	movs	r3, #128	; 0x80
 800412c:	029b      	lsls	r3, r3, #10
 800412e:	4013      	ands	r3, r2
 8004130:	d0f0      	beq.n	8004114 <HAL_RCC_OscConfig+0xcc>
 8004132:	e015      	b.n	8004160 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004134:	f7ff fbac 	bl	8003890 <HAL_GetTick>
 8004138:	0003      	movs	r3, r0
 800413a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800413c:	e008      	b.n	8004150 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800413e:	f7ff fba7 	bl	8003890 <HAL_GetTick>
 8004142:	0002      	movs	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b64      	cmp	r3, #100	; 0x64
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e283      	b.n	8004658 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004150:	4b88      	ldr	r3, [pc, #544]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	2380      	movs	r3, #128	; 0x80
 8004156:	029b      	lsls	r3, r3, #10
 8004158:	4013      	ands	r3, r2
 800415a:	d1f0      	bne.n	800413e <HAL_RCC_OscConfig+0xf6>
 800415c:	e000      	b.n	8004160 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800415e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2202      	movs	r2, #2
 8004166:	4013      	ands	r3, r2
 8004168:	d100      	bne.n	800416c <HAL_RCC_OscConfig+0x124>
 800416a:	e099      	b.n	80042a0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800416c:	4b81      	ldr	r3, [pc, #516]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	2238      	movs	r2, #56	; 0x38
 8004172:	4013      	ands	r3, r2
 8004174:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004176:	4b7f      	ldr	r3, [pc, #508]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	2203      	movs	r2, #3
 800417c:	4013      	ands	r3, r2
 800417e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	2b10      	cmp	r3, #16
 8004184:	d102      	bne.n	800418c <HAL_RCC_OscConfig+0x144>
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	2b02      	cmp	r3, #2
 800418a:	d002      	beq.n	8004192 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d135      	bne.n	80041fe <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004192:	4b78      	ldr	r3, [pc, #480]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	2380      	movs	r3, #128	; 0x80
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	4013      	ands	r3, r2
 800419c:	d005      	beq.n	80041aa <HAL_RCC_OscConfig+0x162>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e256      	b.n	8004658 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041aa:	4b72      	ldr	r3, [pc, #456]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	4a74      	ldr	r2, [pc, #464]	; (8004380 <HAL_RCC_OscConfig+0x338>)
 80041b0:	4013      	ands	r3, r2
 80041b2:	0019      	movs	r1, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	021a      	lsls	r2, r3, #8
 80041ba:	4b6e      	ldr	r3, [pc, #440]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 80041bc:	430a      	orrs	r2, r1
 80041be:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d112      	bne.n	80041ec <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80041c6:	4b6b      	ldr	r3, [pc, #428]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a6e      	ldr	r2, [pc, #440]	; (8004384 <HAL_RCC_OscConfig+0x33c>)
 80041cc:	4013      	ands	r3, r2
 80041ce:	0019      	movs	r1, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691a      	ldr	r2, [r3, #16]
 80041d4:	4b67      	ldr	r3, [pc, #412]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 80041d6:	430a      	orrs	r2, r1
 80041d8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80041da:	4b66      	ldr	r3, [pc, #408]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	0adb      	lsrs	r3, r3, #11
 80041e0:	2207      	movs	r2, #7
 80041e2:	4013      	ands	r3, r2
 80041e4:	4a68      	ldr	r2, [pc, #416]	; (8004388 <HAL_RCC_OscConfig+0x340>)
 80041e6:	40da      	lsrs	r2, r3
 80041e8:	4b68      	ldr	r3, [pc, #416]	; (800438c <HAL_RCC_OscConfig+0x344>)
 80041ea:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80041ec:	4b68      	ldr	r3, [pc, #416]	; (8004390 <HAL_RCC_OscConfig+0x348>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	0018      	movs	r0, r3
 80041f2:	f7ff faf1 	bl	80037d8 <HAL_InitTick>
 80041f6:	1e03      	subs	r3, r0, #0
 80041f8:	d051      	beq.n	800429e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e22c      	b.n	8004658 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d030      	beq.n	8004268 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004206:	4b5b      	ldr	r3, [pc, #364]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a5e      	ldr	r2, [pc, #376]	; (8004384 <HAL_RCC_OscConfig+0x33c>)
 800420c:	4013      	ands	r3, r2
 800420e:	0019      	movs	r1, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691a      	ldr	r2, [r3, #16]
 8004214:	4b57      	ldr	r3, [pc, #348]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 8004216:	430a      	orrs	r2, r1
 8004218:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800421a:	4b56      	ldr	r3, [pc, #344]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	4b55      	ldr	r3, [pc, #340]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 8004220:	2180      	movs	r1, #128	; 0x80
 8004222:	0049      	lsls	r1, r1, #1
 8004224:	430a      	orrs	r2, r1
 8004226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004228:	f7ff fb32 	bl	8003890 <HAL_GetTick>
 800422c:	0003      	movs	r3, r0
 800422e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004230:	e008      	b.n	8004244 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004232:	f7ff fb2d 	bl	8003890 <HAL_GetTick>
 8004236:	0002      	movs	r2, r0
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d901      	bls.n	8004244 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e209      	b.n	8004658 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004244:	4b4b      	ldr	r3, [pc, #300]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	2380      	movs	r3, #128	; 0x80
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	4013      	ands	r3, r2
 800424e:	d0f0      	beq.n	8004232 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004250:	4b48      	ldr	r3, [pc, #288]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	4a4a      	ldr	r2, [pc, #296]	; (8004380 <HAL_RCC_OscConfig+0x338>)
 8004256:	4013      	ands	r3, r2
 8004258:	0019      	movs	r1, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	021a      	lsls	r2, r3, #8
 8004260:	4b44      	ldr	r3, [pc, #272]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 8004262:	430a      	orrs	r2, r1
 8004264:	605a      	str	r2, [r3, #4]
 8004266:	e01b      	b.n	80042a0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004268:	4b42      	ldr	r3, [pc, #264]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	4b41      	ldr	r3, [pc, #260]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 800426e:	4949      	ldr	r1, [pc, #292]	; (8004394 <HAL_RCC_OscConfig+0x34c>)
 8004270:	400a      	ands	r2, r1
 8004272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004274:	f7ff fb0c 	bl	8003890 <HAL_GetTick>
 8004278:	0003      	movs	r3, r0
 800427a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800427c:	e008      	b.n	8004290 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800427e:	f7ff fb07 	bl	8003890 <HAL_GetTick>
 8004282:	0002      	movs	r2, r0
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e1e3      	b.n	8004658 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004290:	4b38      	ldr	r3, [pc, #224]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	2380      	movs	r3, #128	; 0x80
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	4013      	ands	r3, r2
 800429a:	d1f0      	bne.n	800427e <HAL_RCC_OscConfig+0x236>
 800429c:	e000      	b.n	80042a0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800429e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2208      	movs	r2, #8
 80042a6:	4013      	ands	r3, r2
 80042a8:	d047      	beq.n	800433a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80042aa:	4b32      	ldr	r3, [pc, #200]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	2238      	movs	r2, #56	; 0x38
 80042b0:	4013      	ands	r3, r2
 80042b2:	2b18      	cmp	r3, #24
 80042b4:	d10a      	bne.n	80042cc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80042b6:	4b2f      	ldr	r3, [pc, #188]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 80042b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ba:	2202      	movs	r2, #2
 80042bc:	4013      	ands	r3, r2
 80042be:	d03c      	beq.n	800433a <HAL_RCC_OscConfig+0x2f2>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d138      	bne.n	800433a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e1c5      	b.n	8004658 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d019      	beq.n	8004308 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80042d4:	4b27      	ldr	r3, [pc, #156]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 80042d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80042d8:	4b26      	ldr	r3, [pc, #152]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 80042da:	2101      	movs	r1, #1
 80042dc:	430a      	orrs	r2, r1
 80042de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e0:	f7ff fad6 	bl	8003890 <HAL_GetTick>
 80042e4:	0003      	movs	r3, r0
 80042e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042e8:	e008      	b.n	80042fc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042ea:	f7ff fad1 	bl	8003890 <HAL_GetTick>
 80042ee:	0002      	movs	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e1ad      	b.n	8004658 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042fc:	4b1d      	ldr	r3, [pc, #116]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 80042fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004300:	2202      	movs	r2, #2
 8004302:	4013      	ands	r3, r2
 8004304:	d0f1      	beq.n	80042ea <HAL_RCC_OscConfig+0x2a2>
 8004306:	e018      	b.n	800433a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004308:	4b1a      	ldr	r3, [pc, #104]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 800430a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800430c:	4b19      	ldr	r3, [pc, #100]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 800430e:	2101      	movs	r1, #1
 8004310:	438a      	bics	r2, r1
 8004312:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004314:	f7ff fabc 	bl	8003890 <HAL_GetTick>
 8004318:	0003      	movs	r3, r0
 800431a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800431e:	f7ff fab7 	bl	8003890 <HAL_GetTick>
 8004322:	0002      	movs	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e193      	b.n	8004658 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004330:	4b10      	ldr	r3, [pc, #64]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 8004332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004334:	2202      	movs	r2, #2
 8004336:	4013      	ands	r3, r2
 8004338:	d1f1      	bne.n	800431e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2204      	movs	r2, #4
 8004340:	4013      	ands	r3, r2
 8004342:	d100      	bne.n	8004346 <HAL_RCC_OscConfig+0x2fe>
 8004344:	e0c6      	b.n	80044d4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004346:	231f      	movs	r3, #31
 8004348:	18fb      	adds	r3, r7, r3
 800434a:	2200      	movs	r2, #0
 800434c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800434e:	4b09      	ldr	r3, [pc, #36]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	2238      	movs	r2, #56	; 0x38
 8004354:	4013      	ands	r3, r2
 8004356:	2b20      	cmp	r3, #32
 8004358:	d11e      	bne.n	8004398 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800435a:	4b06      	ldr	r3, [pc, #24]	; (8004374 <HAL_RCC_OscConfig+0x32c>)
 800435c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800435e:	2202      	movs	r2, #2
 8004360:	4013      	ands	r3, r2
 8004362:	d100      	bne.n	8004366 <HAL_RCC_OscConfig+0x31e>
 8004364:	e0b6      	b.n	80044d4 <HAL_RCC_OscConfig+0x48c>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d000      	beq.n	8004370 <HAL_RCC_OscConfig+0x328>
 800436e:	e0b1      	b.n	80044d4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e171      	b.n	8004658 <HAL_RCC_OscConfig+0x610>
 8004374:	40021000 	.word	0x40021000
 8004378:	fffeffff 	.word	0xfffeffff
 800437c:	fffbffff 	.word	0xfffbffff
 8004380:	ffff80ff 	.word	0xffff80ff
 8004384:	ffffc7ff 	.word	0xffffc7ff
 8004388:	00f42400 	.word	0x00f42400
 800438c:	20000020 	.word	0x20000020
 8004390:	20000024 	.word	0x20000024
 8004394:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004398:	4bb1      	ldr	r3, [pc, #708]	; (8004660 <HAL_RCC_OscConfig+0x618>)
 800439a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800439c:	2380      	movs	r3, #128	; 0x80
 800439e:	055b      	lsls	r3, r3, #21
 80043a0:	4013      	ands	r3, r2
 80043a2:	d101      	bne.n	80043a8 <HAL_RCC_OscConfig+0x360>
 80043a4:	2301      	movs	r3, #1
 80043a6:	e000      	b.n	80043aa <HAL_RCC_OscConfig+0x362>
 80043a8:	2300      	movs	r3, #0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d011      	beq.n	80043d2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80043ae:	4bac      	ldr	r3, [pc, #688]	; (8004660 <HAL_RCC_OscConfig+0x618>)
 80043b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043b2:	4bab      	ldr	r3, [pc, #684]	; (8004660 <HAL_RCC_OscConfig+0x618>)
 80043b4:	2180      	movs	r1, #128	; 0x80
 80043b6:	0549      	lsls	r1, r1, #21
 80043b8:	430a      	orrs	r2, r1
 80043ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80043bc:	4ba8      	ldr	r3, [pc, #672]	; (8004660 <HAL_RCC_OscConfig+0x618>)
 80043be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043c0:	2380      	movs	r3, #128	; 0x80
 80043c2:	055b      	lsls	r3, r3, #21
 80043c4:	4013      	ands	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80043ca:	231f      	movs	r3, #31
 80043cc:	18fb      	adds	r3, r7, r3
 80043ce:	2201      	movs	r2, #1
 80043d0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043d2:	4ba4      	ldr	r3, [pc, #656]	; (8004664 <HAL_RCC_OscConfig+0x61c>)
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	2380      	movs	r3, #128	; 0x80
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	4013      	ands	r3, r2
 80043dc:	d11a      	bne.n	8004414 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043de:	4ba1      	ldr	r3, [pc, #644]	; (8004664 <HAL_RCC_OscConfig+0x61c>)
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	4ba0      	ldr	r3, [pc, #640]	; (8004664 <HAL_RCC_OscConfig+0x61c>)
 80043e4:	2180      	movs	r1, #128	; 0x80
 80043e6:	0049      	lsls	r1, r1, #1
 80043e8:	430a      	orrs	r2, r1
 80043ea:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80043ec:	f7ff fa50 	bl	8003890 <HAL_GetTick>
 80043f0:	0003      	movs	r3, r0
 80043f2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043f4:	e008      	b.n	8004408 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043f6:	f7ff fa4b 	bl	8003890 <HAL_GetTick>
 80043fa:	0002      	movs	r2, r0
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d901      	bls.n	8004408 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e127      	b.n	8004658 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004408:	4b96      	ldr	r3, [pc, #600]	; (8004664 <HAL_RCC_OscConfig+0x61c>)
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	2380      	movs	r3, #128	; 0x80
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	4013      	ands	r3, r2
 8004412:	d0f0      	beq.n	80043f6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d106      	bne.n	800442a <HAL_RCC_OscConfig+0x3e2>
 800441c:	4b90      	ldr	r3, [pc, #576]	; (8004660 <HAL_RCC_OscConfig+0x618>)
 800441e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004420:	4b8f      	ldr	r3, [pc, #572]	; (8004660 <HAL_RCC_OscConfig+0x618>)
 8004422:	2101      	movs	r1, #1
 8004424:	430a      	orrs	r2, r1
 8004426:	65da      	str	r2, [r3, #92]	; 0x5c
 8004428:	e01c      	b.n	8004464 <HAL_RCC_OscConfig+0x41c>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	2b05      	cmp	r3, #5
 8004430:	d10c      	bne.n	800444c <HAL_RCC_OscConfig+0x404>
 8004432:	4b8b      	ldr	r3, [pc, #556]	; (8004660 <HAL_RCC_OscConfig+0x618>)
 8004434:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004436:	4b8a      	ldr	r3, [pc, #552]	; (8004660 <HAL_RCC_OscConfig+0x618>)
 8004438:	2104      	movs	r1, #4
 800443a:	430a      	orrs	r2, r1
 800443c:	65da      	str	r2, [r3, #92]	; 0x5c
 800443e:	4b88      	ldr	r3, [pc, #544]	; (8004660 <HAL_RCC_OscConfig+0x618>)
 8004440:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004442:	4b87      	ldr	r3, [pc, #540]	; (8004660 <HAL_RCC_OscConfig+0x618>)
 8004444:	2101      	movs	r1, #1
 8004446:	430a      	orrs	r2, r1
 8004448:	65da      	str	r2, [r3, #92]	; 0x5c
 800444a:	e00b      	b.n	8004464 <HAL_RCC_OscConfig+0x41c>
 800444c:	4b84      	ldr	r3, [pc, #528]	; (8004660 <HAL_RCC_OscConfig+0x618>)
 800444e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004450:	4b83      	ldr	r3, [pc, #524]	; (8004660 <HAL_RCC_OscConfig+0x618>)
 8004452:	2101      	movs	r1, #1
 8004454:	438a      	bics	r2, r1
 8004456:	65da      	str	r2, [r3, #92]	; 0x5c
 8004458:	4b81      	ldr	r3, [pc, #516]	; (8004660 <HAL_RCC_OscConfig+0x618>)
 800445a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800445c:	4b80      	ldr	r3, [pc, #512]	; (8004660 <HAL_RCC_OscConfig+0x618>)
 800445e:	2104      	movs	r1, #4
 8004460:	438a      	bics	r2, r1
 8004462:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d014      	beq.n	8004496 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446c:	f7ff fa10 	bl	8003890 <HAL_GetTick>
 8004470:	0003      	movs	r3, r0
 8004472:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004474:	e009      	b.n	800448a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004476:	f7ff fa0b 	bl	8003890 <HAL_GetTick>
 800447a:	0002      	movs	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	4a79      	ldr	r2, [pc, #484]	; (8004668 <HAL_RCC_OscConfig+0x620>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e0e6      	b.n	8004658 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800448a:	4b75      	ldr	r3, [pc, #468]	; (8004660 <HAL_RCC_OscConfig+0x618>)
 800448c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800448e:	2202      	movs	r2, #2
 8004490:	4013      	ands	r3, r2
 8004492:	d0f0      	beq.n	8004476 <HAL_RCC_OscConfig+0x42e>
 8004494:	e013      	b.n	80044be <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004496:	f7ff f9fb 	bl	8003890 <HAL_GetTick>
 800449a:	0003      	movs	r3, r0
 800449c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800449e:	e009      	b.n	80044b4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044a0:	f7ff f9f6 	bl	8003890 <HAL_GetTick>
 80044a4:	0002      	movs	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	4a6f      	ldr	r2, [pc, #444]	; (8004668 <HAL_RCC_OscConfig+0x620>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e0d1      	b.n	8004658 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044b4:	4b6a      	ldr	r3, [pc, #424]	; (8004660 <HAL_RCC_OscConfig+0x618>)
 80044b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b8:	2202      	movs	r2, #2
 80044ba:	4013      	ands	r3, r2
 80044bc:	d1f0      	bne.n	80044a0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80044be:	231f      	movs	r3, #31
 80044c0:	18fb      	adds	r3, r7, r3
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d105      	bne.n	80044d4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80044c8:	4b65      	ldr	r3, [pc, #404]	; (8004660 <HAL_RCC_OscConfig+0x618>)
 80044ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044cc:	4b64      	ldr	r3, [pc, #400]	; (8004660 <HAL_RCC_OscConfig+0x618>)
 80044ce:	4967      	ldr	r1, [pc, #412]	; (800466c <HAL_RCC_OscConfig+0x624>)
 80044d0:	400a      	ands	r2, r1
 80044d2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	69db      	ldr	r3, [r3, #28]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d100      	bne.n	80044de <HAL_RCC_OscConfig+0x496>
 80044dc:	e0bb      	b.n	8004656 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044de:	4b60      	ldr	r3, [pc, #384]	; (8004660 <HAL_RCC_OscConfig+0x618>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	2238      	movs	r2, #56	; 0x38
 80044e4:	4013      	ands	r3, r2
 80044e6:	2b10      	cmp	r3, #16
 80044e8:	d100      	bne.n	80044ec <HAL_RCC_OscConfig+0x4a4>
 80044ea:	e07b      	b.n	80045e4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	69db      	ldr	r3, [r3, #28]
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d156      	bne.n	80045a2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044f4:	4b5a      	ldr	r3, [pc, #360]	; (8004660 <HAL_RCC_OscConfig+0x618>)
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	4b59      	ldr	r3, [pc, #356]	; (8004660 <HAL_RCC_OscConfig+0x618>)
 80044fa:	495d      	ldr	r1, [pc, #372]	; (8004670 <HAL_RCC_OscConfig+0x628>)
 80044fc:	400a      	ands	r2, r1
 80044fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004500:	f7ff f9c6 	bl	8003890 <HAL_GetTick>
 8004504:	0003      	movs	r3, r0
 8004506:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004508:	e008      	b.n	800451c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800450a:	f7ff f9c1 	bl	8003890 <HAL_GetTick>
 800450e:	0002      	movs	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e09d      	b.n	8004658 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800451c:	4b50      	ldr	r3, [pc, #320]	; (8004660 <HAL_RCC_OscConfig+0x618>)
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	2380      	movs	r3, #128	; 0x80
 8004522:	049b      	lsls	r3, r3, #18
 8004524:	4013      	ands	r3, r2
 8004526:	d1f0      	bne.n	800450a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004528:	4b4d      	ldr	r3, [pc, #308]	; (8004660 <HAL_RCC_OscConfig+0x618>)
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	4a51      	ldr	r2, [pc, #324]	; (8004674 <HAL_RCC_OscConfig+0x62c>)
 800452e:	4013      	ands	r3, r2
 8004530:	0019      	movs	r1, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a1a      	ldr	r2, [r3, #32]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004540:	021b      	lsls	r3, r3, #8
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004548:	431a      	orrs	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454e:	431a      	orrs	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004554:	431a      	orrs	r2, r3
 8004556:	4b42      	ldr	r3, [pc, #264]	; (8004660 <HAL_RCC_OscConfig+0x618>)
 8004558:	430a      	orrs	r2, r1
 800455a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800455c:	4b40      	ldr	r3, [pc, #256]	; (8004660 <HAL_RCC_OscConfig+0x618>)
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	4b3f      	ldr	r3, [pc, #252]	; (8004660 <HAL_RCC_OscConfig+0x618>)
 8004562:	2180      	movs	r1, #128	; 0x80
 8004564:	0449      	lsls	r1, r1, #17
 8004566:	430a      	orrs	r2, r1
 8004568:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800456a:	4b3d      	ldr	r3, [pc, #244]	; (8004660 <HAL_RCC_OscConfig+0x618>)
 800456c:	68da      	ldr	r2, [r3, #12]
 800456e:	4b3c      	ldr	r3, [pc, #240]	; (8004660 <HAL_RCC_OscConfig+0x618>)
 8004570:	2180      	movs	r1, #128	; 0x80
 8004572:	0549      	lsls	r1, r1, #21
 8004574:	430a      	orrs	r2, r1
 8004576:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004578:	f7ff f98a 	bl	8003890 <HAL_GetTick>
 800457c:	0003      	movs	r3, r0
 800457e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004580:	e008      	b.n	8004594 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004582:	f7ff f985 	bl	8003890 <HAL_GetTick>
 8004586:	0002      	movs	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e061      	b.n	8004658 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004594:	4b32      	ldr	r3, [pc, #200]	; (8004660 <HAL_RCC_OscConfig+0x618>)
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	2380      	movs	r3, #128	; 0x80
 800459a:	049b      	lsls	r3, r3, #18
 800459c:	4013      	ands	r3, r2
 800459e:	d0f0      	beq.n	8004582 <HAL_RCC_OscConfig+0x53a>
 80045a0:	e059      	b.n	8004656 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045a2:	4b2f      	ldr	r3, [pc, #188]	; (8004660 <HAL_RCC_OscConfig+0x618>)
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	4b2e      	ldr	r3, [pc, #184]	; (8004660 <HAL_RCC_OscConfig+0x618>)
 80045a8:	4931      	ldr	r1, [pc, #196]	; (8004670 <HAL_RCC_OscConfig+0x628>)
 80045aa:	400a      	ands	r2, r1
 80045ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ae:	f7ff f96f 	bl	8003890 <HAL_GetTick>
 80045b2:	0003      	movs	r3, r0
 80045b4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b8:	f7ff f96a 	bl	8003890 <HAL_GetTick>
 80045bc:	0002      	movs	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e046      	b.n	8004658 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045ca:	4b25      	ldr	r3, [pc, #148]	; (8004660 <HAL_RCC_OscConfig+0x618>)
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	2380      	movs	r3, #128	; 0x80
 80045d0:	049b      	lsls	r3, r3, #18
 80045d2:	4013      	ands	r3, r2
 80045d4:	d1f0      	bne.n	80045b8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80045d6:	4b22      	ldr	r3, [pc, #136]	; (8004660 <HAL_RCC_OscConfig+0x618>)
 80045d8:	68da      	ldr	r2, [r3, #12]
 80045da:	4b21      	ldr	r3, [pc, #132]	; (8004660 <HAL_RCC_OscConfig+0x618>)
 80045dc:	4926      	ldr	r1, [pc, #152]	; (8004678 <HAL_RCC_OscConfig+0x630>)
 80045de:	400a      	ands	r2, r1
 80045e0:	60da      	str	r2, [r3, #12]
 80045e2:	e038      	b.n	8004656 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d101      	bne.n	80045f0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e033      	b.n	8004658 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80045f0:	4b1b      	ldr	r3, [pc, #108]	; (8004660 <HAL_RCC_OscConfig+0x618>)
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2203      	movs	r2, #3
 80045fa:	401a      	ands	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	429a      	cmp	r2, r3
 8004602:	d126      	bne.n	8004652 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	2270      	movs	r2, #112	; 0x70
 8004608:	401a      	ands	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800460e:	429a      	cmp	r2, r3
 8004610:	d11f      	bne.n	8004652 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	23fe      	movs	r3, #254	; 0xfe
 8004616:	01db      	lsls	r3, r3, #7
 8004618:	401a      	ands	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004620:	429a      	cmp	r2, r3
 8004622:	d116      	bne.n	8004652 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	23f8      	movs	r3, #248	; 0xf8
 8004628:	039b      	lsls	r3, r3, #14
 800462a:	401a      	ands	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004630:	429a      	cmp	r2, r3
 8004632:	d10e      	bne.n	8004652 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	23e0      	movs	r3, #224	; 0xe0
 8004638:	051b      	lsls	r3, r3, #20
 800463a:	401a      	ands	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004640:	429a      	cmp	r2, r3
 8004642:	d106      	bne.n	8004652 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	0f5b      	lsrs	r3, r3, #29
 8004648:	075a      	lsls	r2, r3, #29
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800464e:	429a      	cmp	r2, r3
 8004650:	d001      	beq.n	8004656 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e000      	b.n	8004658 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	0018      	movs	r0, r3
 800465a:	46bd      	mov	sp, r7
 800465c:	b008      	add	sp, #32
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40021000 	.word	0x40021000
 8004664:	40007000 	.word	0x40007000
 8004668:	00001388 	.word	0x00001388
 800466c:	efffffff 	.word	0xefffffff
 8004670:	feffffff 	.word	0xfeffffff
 8004674:	11c1808c 	.word	0x11c1808c
 8004678:	eefefffc 	.word	0xeefefffc

0800467c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e0e9      	b.n	8004864 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004690:	4b76      	ldr	r3, [pc, #472]	; (800486c <HAL_RCC_ClockConfig+0x1f0>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2207      	movs	r2, #7
 8004696:	4013      	ands	r3, r2
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	429a      	cmp	r2, r3
 800469c:	d91e      	bls.n	80046dc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800469e:	4b73      	ldr	r3, [pc, #460]	; (800486c <HAL_RCC_ClockConfig+0x1f0>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2207      	movs	r2, #7
 80046a4:	4393      	bics	r3, r2
 80046a6:	0019      	movs	r1, r3
 80046a8:	4b70      	ldr	r3, [pc, #448]	; (800486c <HAL_RCC_ClockConfig+0x1f0>)
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80046b0:	f7ff f8ee 	bl	8003890 <HAL_GetTick>
 80046b4:	0003      	movs	r3, r0
 80046b6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80046b8:	e009      	b.n	80046ce <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046ba:	f7ff f8e9 	bl	8003890 <HAL_GetTick>
 80046be:	0002      	movs	r2, r0
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	4a6a      	ldr	r2, [pc, #424]	; (8004870 <HAL_RCC_ClockConfig+0x1f4>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e0ca      	b.n	8004864 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80046ce:	4b67      	ldr	r3, [pc, #412]	; (800486c <HAL_RCC_ClockConfig+0x1f0>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2207      	movs	r2, #7
 80046d4:	4013      	ands	r3, r2
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d1ee      	bne.n	80046ba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2202      	movs	r2, #2
 80046e2:	4013      	ands	r3, r2
 80046e4:	d015      	beq.n	8004712 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2204      	movs	r2, #4
 80046ec:	4013      	ands	r3, r2
 80046ee:	d006      	beq.n	80046fe <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80046f0:	4b60      	ldr	r3, [pc, #384]	; (8004874 <HAL_RCC_ClockConfig+0x1f8>)
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	4b5f      	ldr	r3, [pc, #380]	; (8004874 <HAL_RCC_ClockConfig+0x1f8>)
 80046f6:	21e0      	movs	r1, #224	; 0xe0
 80046f8:	01c9      	lsls	r1, r1, #7
 80046fa:	430a      	orrs	r2, r1
 80046fc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046fe:	4b5d      	ldr	r3, [pc, #372]	; (8004874 <HAL_RCC_ClockConfig+0x1f8>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	4a5d      	ldr	r2, [pc, #372]	; (8004878 <HAL_RCC_ClockConfig+0x1fc>)
 8004704:	4013      	ands	r3, r2
 8004706:	0019      	movs	r1, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	4b59      	ldr	r3, [pc, #356]	; (8004874 <HAL_RCC_ClockConfig+0x1f8>)
 800470e:	430a      	orrs	r2, r1
 8004710:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2201      	movs	r2, #1
 8004718:	4013      	ands	r3, r2
 800471a:	d057      	beq.n	80047cc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d107      	bne.n	8004734 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004724:	4b53      	ldr	r3, [pc, #332]	; (8004874 <HAL_RCC_ClockConfig+0x1f8>)
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	2380      	movs	r3, #128	; 0x80
 800472a:	029b      	lsls	r3, r3, #10
 800472c:	4013      	ands	r3, r2
 800472e:	d12b      	bne.n	8004788 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e097      	b.n	8004864 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	2b02      	cmp	r3, #2
 800473a:	d107      	bne.n	800474c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800473c:	4b4d      	ldr	r3, [pc, #308]	; (8004874 <HAL_RCC_ClockConfig+0x1f8>)
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	2380      	movs	r3, #128	; 0x80
 8004742:	049b      	lsls	r3, r3, #18
 8004744:	4013      	ands	r3, r2
 8004746:	d11f      	bne.n	8004788 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e08b      	b.n	8004864 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d107      	bne.n	8004764 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004754:	4b47      	ldr	r3, [pc, #284]	; (8004874 <HAL_RCC_ClockConfig+0x1f8>)
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	2380      	movs	r3, #128	; 0x80
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	4013      	ands	r3, r2
 800475e:	d113      	bne.n	8004788 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e07f      	b.n	8004864 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	2b03      	cmp	r3, #3
 800476a:	d106      	bne.n	800477a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800476c:	4b41      	ldr	r3, [pc, #260]	; (8004874 <HAL_RCC_ClockConfig+0x1f8>)
 800476e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004770:	2202      	movs	r2, #2
 8004772:	4013      	ands	r3, r2
 8004774:	d108      	bne.n	8004788 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e074      	b.n	8004864 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800477a:	4b3e      	ldr	r3, [pc, #248]	; (8004874 <HAL_RCC_ClockConfig+0x1f8>)
 800477c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800477e:	2202      	movs	r2, #2
 8004780:	4013      	ands	r3, r2
 8004782:	d101      	bne.n	8004788 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e06d      	b.n	8004864 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004788:	4b3a      	ldr	r3, [pc, #232]	; (8004874 <HAL_RCC_ClockConfig+0x1f8>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	2207      	movs	r2, #7
 800478e:	4393      	bics	r3, r2
 8004790:	0019      	movs	r1, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	4b37      	ldr	r3, [pc, #220]	; (8004874 <HAL_RCC_ClockConfig+0x1f8>)
 8004798:	430a      	orrs	r2, r1
 800479a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800479c:	f7ff f878 	bl	8003890 <HAL_GetTick>
 80047a0:	0003      	movs	r3, r0
 80047a2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a4:	e009      	b.n	80047ba <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047a6:	f7ff f873 	bl	8003890 <HAL_GetTick>
 80047aa:	0002      	movs	r2, r0
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	4a2f      	ldr	r2, [pc, #188]	; (8004870 <HAL_RCC_ClockConfig+0x1f4>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e054      	b.n	8004864 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ba:	4b2e      	ldr	r3, [pc, #184]	; (8004874 <HAL_RCC_ClockConfig+0x1f8>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	2238      	movs	r2, #56	; 0x38
 80047c0:	401a      	ands	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	00db      	lsls	r3, r3, #3
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d1ec      	bne.n	80047a6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047cc:	4b27      	ldr	r3, [pc, #156]	; (800486c <HAL_RCC_ClockConfig+0x1f0>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2207      	movs	r2, #7
 80047d2:	4013      	ands	r3, r2
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d21e      	bcs.n	8004818 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047da:	4b24      	ldr	r3, [pc, #144]	; (800486c <HAL_RCC_ClockConfig+0x1f0>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2207      	movs	r2, #7
 80047e0:	4393      	bics	r3, r2
 80047e2:	0019      	movs	r1, r3
 80047e4:	4b21      	ldr	r3, [pc, #132]	; (800486c <HAL_RCC_ClockConfig+0x1f0>)
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80047ec:	f7ff f850 	bl	8003890 <HAL_GetTick>
 80047f0:	0003      	movs	r3, r0
 80047f2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80047f4:	e009      	b.n	800480a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f6:	f7ff f84b 	bl	8003890 <HAL_GetTick>
 80047fa:	0002      	movs	r2, r0
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	4a1b      	ldr	r2, [pc, #108]	; (8004870 <HAL_RCC_ClockConfig+0x1f4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d901      	bls.n	800480a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e02c      	b.n	8004864 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800480a:	4b18      	ldr	r3, [pc, #96]	; (800486c <HAL_RCC_ClockConfig+0x1f0>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2207      	movs	r2, #7
 8004810:	4013      	ands	r3, r2
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	429a      	cmp	r2, r3
 8004816:	d1ee      	bne.n	80047f6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2204      	movs	r2, #4
 800481e:	4013      	ands	r3, r2
 8004820:	d009      	beq.n	8004836 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004822:	4b14      	ldr	r3, [pc, #80]	; (8004874 <HAL_RCC_ClockConfig+0x1f8>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	4a15      	ldr	r2, [pc, #84]	; (800487c <HAL_RCC_ClockConfig+0x200>)
 8004828:	4013      	ands	r3, r2
 800482a:	0019      	movs	r1, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68da      	ldr	r2, [r3, #12]
 8004830:	4b10      	ldr	r3, [pc, #64]	; (8004874 <HAL_RCC_ClockConfig+0x1f8>)
 8004832:	430a      	orrs	r2, r1
 8004834:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004836:	f000 f829 	bl	800488c <HAL_RCC_GetSysClockFreq>
 800483a:	0001      	movs	r1, r0
 800483c:	4b0d      	ldr	r3, [pc, #52]	; (8004874 <HAL_RCC_ClockConfig+0x1f8>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	0a1b      	lsrs	r3, r3, #8
 8004842:	220f      	movs	r2, #15
 8004844:	401a      	ands	r2, r3
 8004846:	4b0e      	ldr	r3, [pc, #56]	; (8004880 <HAL_RCC_ClockConfig+0x204>)
 8004848:	0092      	lsls	r2, r2, #2
 800484a:	58d3      	ldr	r3, [r2, r3]
 800484c:	221f      	movs	r2, #31
 800484e:	4013      	ands	r3, r2
 8004850:	000a      	movs	r2, r1
 8004852:	40da      	lsrs	r2, r3
 8004854:	4b0b      	ldr	r3, [pc, #44]	; (8004884 <HAL_RCC_ClockConfig+0x208>)
 8004856:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004858:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <HAL_RCC_ClockConfig+0x20c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	0018      	movs	r0, r3
 800485e:	f7fe ffbb 	bl	80037d8 <HAL_InitTick>
 8004862:	0003      	movs	r3, r0
}
 8004864:	0018      	movs	r0, r3
 8004866:	46bd      	mov	sp, r7
 8004868:	b004      	add	sp, #16
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40022000 	.word	0x40022000
 8004870:	00001388 	.word	0x00001388
 8004874:	40021000 	.word	0x40021000
 8004878:	fffff0ff 	.word	0xfffff0ff
 800487c:	ffff8fff 	.word	0xffff8fff
 8004880:	08013ea0 	.word	0x08013ea0
 8004884:	20000020 	.word	0x20000020
 8004888:	20000024 	.word	0x20000024

0800488c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004892:	4b3c      	ldr	r3, [pc, #240]	; (8004984 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	2238      	movs	r2, #56	; 0x38
 8004898:	4013      	ands	r3, r2
 800489a:	d10f      	bne.n	80048bc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800489c:	4b39      	ldr	r3, [pc, #228]	; (8004984 <HAL_RCC_GetSysClockFreq+0xf8>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	0adb      	lsrs	r3, r3, #11
 80048a2:	2207      	movs	r2, #7
 80048a4:	4013      	ands	r3, r2
 80048a6:	2201      	movs	r2, #1
 80048a8:	409a      	lsls	r2, r3
 80048aa:	0013      	movs	r3, r2
 80048ac:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80048ae:	6839      	ldr	r1, [r7, #0]
 80048b0:	4835      	ldr	r0, [pc, #212]	; (8004988 <HAL_RCC_GetSysClockFreq+0xfc>)
 80048b2:	f7fb fc43 	bl	800013c <__udivsi3>
 80048b6:	0003      	movs	r3, r0
 80048b8:	613b      	str	r3, [r7, #16]
 80048ba:	e05d      	b.n	8004978 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048bc:	4b31      	ldr	r3, [pc, #196]	; (8004984 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	2238      	movs	r2, #56	; 0x38
 80048c2:	4013      	ands	r3, r2
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	d102      	bne.n	80048ce <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80048c8:	4b30      	ldr	r3, [pc, #192]	; (800498c <HAL_RCC_GetSysClockFreq+0x100>)
 80048ca:	613b      	str	r3, [r7, #16]
 80048cc:	e054      	b.n	8004978 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048ce:	4b2d      	ldr	r3, [pc, #180]	; (8004984 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	2238      	movs	r2, #56	; 0x38
 80048d4:	4013      	ands	r3, r2
 80048d6:	2b10      	cmp	r3, #16
 80048d8:	d138      	bne.n	800494c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80048da:	4b2a      	ldr	r3, [pc, #168]	; (8004984 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	2203      	movs	r2, #3
 80048e0:	4013      	ands	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048e4:	4b27      	ldr	r3, [pc, #156]	; (8004984 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	091b      	lsrs	r3, r3, #4
 80048ea:	2207      	movs	r2, #7
 80048ec:	4013      	ands	r3, r2
 80048ee:	3301      	adds	r3, #1
 80048f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2b03      	cmp	r3, #3
 80048f6:	d10d      	bne.n	8004914 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048f8:	68b9      	ldr	r1, [r7, #8]
 80048fa:	4824      	ldr	r0, [pc, #144]	; (800498c <HAL_RCC_GetSysClockFreq+0x100>)
 80048fc:	f7fb fc1e 	bl	800013c <__udivsi3>
 8004900:	0003      	movs	r3, r0
 8004902:	0019      	movs	r1, r3
 8004904:	4b1f      	ldr	r3, [pc, #124]	; (8004984 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	0a1b      	lsrs	r3, r3, #8
 800490a:	227f      	movs	r2, #127	; 0x7f
 800490c:	4013      	ands	r3, r2
 800490e:	434b      	muls	r3, r1
 8004910:	617b      	str	r3, [r7, #20]
        break;
 8004912:	e00d      	b.n	8004930 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004914:	68b9      	ldr	r1, [r7, #8]
 8004916:	481c      	ldr	r0, [pc, #112]	; (8004988 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004918:	f7fb fc10 	bl	800013c <__udivsi3>
 800491c:	0003      	movs	r3, r0
 800491e:	0019      	movs	r1, r3
 8004920:	4b18      	ldr	r3, [pc, #96]	; (8004984 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	0a1b      	lsrs	r3, r3, #8
 8004926:	227f      	movs	r2, #127	; 0x7f
 8004928:	4013      	ands	r3, r2
 800492a:	434b      	muls	r3, r1
 800492c:	617b      	str	r3, [r7, #20]
        break;
 800492e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004930:	4b14      	ldr	r3, [pc, #80]	; (8004984 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	0f5b      	lsrs	r3, r3, #29
 8004936:	2207      	movs	r2, #7
 8004938:	4013      	ands	r3, r2
 800493a:	3301      	adds	r3, #1
 800493c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800493e:	6879      	ldr	r1, [r7, #4]
 8004940:	6978      	ldr	r0, [r7, #20]
 8004942:	f7fb fbfb 	bl	800013c <__udivsi3>
 8004946:	0003      	movs	r3, r0
 8004948:	613b      	str	r3, [r7, #16]
 800494a:	e015      	b.n	8004978 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800494c:	4b0d      	ldr	r3, [pc, #52]	; (8004984 <HAL_RCC_GetSysClockFreq+0xf8>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	2238      	movs	r2, #56	; 0x38
 8004952:	4013      	ands	r3, r2
 8004954:	2b20      	cmp	r3, #32
 8004956:	d103      	bne.n	8004960 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004958:	2380      	movs	r3, #128	; 0x80
 800495a:	021b      	lsls	r3, r3, #8
 800495c:	613b      	str	r3, [r7, #16]
 800495e:	e00b      	b.n	8004978 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004960:	4b08      	ldr	r3, [pc, #32]	; (8004984 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	2238      	movs	r2, #56	; 0x38
 8004966:	4013      	ands	r3, r2
 8004968:	2b18      	cmp	r3, #24
 800496a:	d103      	bne.n	8004974 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800496c:	23fa      	movs	r3, #250	; 0xfa
 800496e:	01db      	lsls	r3, r3, #7
 8004970:	613b      	str	r3, [r7, #16]
 8004972:	e001      	b.n	8004978 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004974:	2300      	movs	r3, #0
 8004976:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004978:	693b      	ldr	r3, [r7, #16]
}
 800497a:	0018      	movs	r0, r3
 800497c:	46bd      	mov	sp, r7
 800497e:	b006      	add	sp, #24
 8004980:	bd80      	pop	{r7, pc}
 8004982:	46c0      	nop			; (mov r8, r8)
 8004984:	40021000 	.word	0x40021000
 8004988:	00f42400 	.word	0x00f42400
 800498c:	007a1200 	.word	0x007a1200

08004990 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004994:	4b02      	ldr	r3, [pc, #8]	; (80049a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004996:	681b      	ldr	r3, [r3, #0]
}
 8004998:	0018      	movs	r0, r3
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	46c0      	nop			; (mov r8, r8)
 80049a0:	20000020 	.word	0x20000020

080049a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049a4:	b5b0      	push	{r4, r5, r7, lr}
 80049a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80049a8:	f7ff fff2 	bl	8004990 <HAL_RCC_GetHCLKFreq>
 80049ac:	0004      	movs	r4, r0
 80049ae:	f7ff fb3f 	bl	8004030 <LL_RCC_GetAPB1Prescaler>
 80049b2:	0003      	movs	r3, r0
 80049b4:	0b1a      	lsrs	r2, r3, #12
 80049b6:	4b05      	ldr	r3, [pc, #20]	; (80049cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80049b8:	0092      	lsls	r2, r2, #2
 80049ba:	58d3      	ldr	r3, [r2, r3]
 80049bc:	221f      	movs	r2, #31
 80049be:	4013      	ands	r3, r2
 80049c0:	40dc      	lsrs	r4, r3
 80049c2:	0023      	movs	r3, r4
}
 80049c4:	0018      	movs	r0, r3
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bdb0      	pop	{r4, r5, r7, pc}
 80049ca:	46c0      	nop			; (mov r8, r8)
 80049cc:	08013ee0 	.word	0x08013ee0

080049d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80049d8:	2313      	movs	r3, #19
 80049da:	18fb      	adds	r3, r7, r3
 80049dc:	2200      	movs	r2, #0
 80049de:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049e0:	2312      	movs	r3, #18
 80049e2:	18fb      	adds	r3, r7, r3
 80049e4:	2200      	movs	r2, #0
 80049e6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	2380      	movs	r3, #128	; 0x80
 80049ee:	029b      	lsls	r3, r3, #10
 80049f0:	4013      	ands	r3, r2
 80049f2:	d100      	bne.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80049f4:	e0a3      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049f6:	2011      	movs	r0, #17
 80049f8:	183b      	adds	r3, r7, r0
 80049fa:	2200      	movs	r2, #0
 80049fc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049fe:	4bc3      	ldr	r3, [pc, #780]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a02:	2380      	movs	r3, #128	; 0x80
 8004a04:	055b      	lsls	r3, r3, #21
 8004a06:	4013      	ands	r3, r2
 8004a08:	d110      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a0a:	4bc0      	ldr	r3, [pc, #768]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a0e:	4bbf      	ldr	r3, [pc, #764]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a10:	2180      	movs	r1, #128	; 0x80
 8004a12:	0549      	lsls	r1, r1, #21
 8004a14:	430a      	orrs	r2, r1
 8004a16:	63da      	str	r2, [r3, #60]	; 0x3c
 8004a18:	4bbc      	ldr	r3, [pc, #752]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a1c:	2380      	movs	r3, #128	; 0x80
 8004a1e:	055b      	lsls	r3, r3, #21
 8004a20:	4013      	ands	r3, r2
 8004a22:	60bb      	str	r3, [r7, #8]
 8004a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a26:	183b      	adds	r3, r7, r0
 8004a28:	2201      	movs	r2, #1
 8004a2a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a2c:	4bb8      	ldr	r3, [pc, #736]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	4bb7      	ldr	r3, [pc, #732]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004a32:	2180      	movs	r1, #128	; 0x80
 8004a34:	0049      	lsls	r1, r1, #1
 8004a36:	430a      	orrs	r2, r1
 8004a38:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a3a:	f7fe ff29 	bl	8003890 <HAL_GetTick>
 8004a3e:	0003      	movs	r3, r0
 8004a40:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a42:	e00b      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a44:	f7fe ff24 	bl	8003890 <HAL_GetTick>
 8004a48:	0002      	movs	r2, r0
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d904      	bls.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004a52:	2313      	movs	r3, #19
 8004a54:	18fb      	adds	r3, r7, r3
 8004a56:	2203      	movs	r2, #3
 8004a58:	701a      	strb	r2, [r3, #0]
        break;
 8004a5a:	e005      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a5c:	4bac      	ldr	r3, [pc, #688]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	2380      	movs	r3, #128	; 0x80
 8004a62:	005b      	lsls	r3, r3, #1
 8004a64:	4013      	ands	r3, r2
 8004a66:	d0ed      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004a68:	2313      	movs	r3, #19
 8004a6a:	18fb      	adds	r3, r7, r3
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d154      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a72:	4ba6      	ldr	r3, [pc, #664]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a76:	23c0      	movs	r3, #192	; 0xc0
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d019      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d014      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a8e:	4b9f      	ldr	r3, [pc, #636]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a92:	4aa0      	ldr	r2, [pc, #640]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004a94:	4013      	ands	r3, r2
 8004a96:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a98:	4b9c      	ldr	r3, [pc, #624]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a9c:	4b9b      	ldr	r3, [pc, #620]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a9e:	2180      	movs	r1, #128	; 0x80
 8004aa0:	0249      	lsls	r1, r1, #9
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004aa6:	4b99      	ldr	r3, [pc, #612]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004aa8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004aaa:	4b98      	ldr	r3, [pc, #608]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004aac:	499a      	ldr	r1, [pc, #616]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004aae:	400a      	ands	r2, r1
 8004ab0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ab2:	4b96      	ldr	r3, [pc, #600]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	2201      	movs	r2, #1
 8004abc:	4013      	ands	r3, r2
 8004abe:	d016      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac0:	f7fe fee6 	bl	8003890 <HAL_GetTick>
 8004ac4:	0003      	movs	r3, r0
 8004ac6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ac8:	e00c      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aca:	f7fe fee1 	bl	8003890 <HAL_GetTick>
 8004ace:	0002      	movs	r2, r0
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	4a91      	ldr	r2, [pc, #580]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d904      	bls.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004ada:	2313      	movs	r3, #19
 8004adc:	18fb      	adds	r3, r7, r3
 8004ade:	2203      	movs	r2, #3
 8004ae0:	701a      	strb	r2, [r3, #0]
            break;
 8004ae2:	e004      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ae4:	4b89      	ldr	r3, [pc, #548]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae8:	2202      	movs	r2, #2
 8004aea:	4013      	ands	r3, r2
 8004aec:	d0ed      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004aee:	2313      	movs	r3, #19
 8004af0:	18fb      	adds	r3, r7, r3
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10a      	bne.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004af8:	4b84      	ldr	r3, [pc, #528]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afc:	4a85      	ldr	r2, [pc, #532]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004afe:	4013      	ands	r3, r2
 8004b00:	0019      	movs	r1, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b06:	4b81      	ldr	r3, [pc, #516]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b0c:	e00c      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b0e:	2312      	movs	r3, #18
 8004b10:	18fb      	adds	r3, r7, r3
 8004b12:	2213      	movs	r2, #19
 8004b14:	18ba      	adds	r2, r7, r2
 8004b16:	7812      	ldrb	r2, [r2, #0]
 8004b18:	701a      	strb	r2, [r3, #0]
 8004b1a:	e005      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b1c:	2312      	movs	r3, #18
 8004b1e:	18fb      	adds	r3, r7, r3
 8004b20:	2213      	movs	r2, #19
 8004b22:	18ba      	adds	r2, r7, r2
 8004b24:	7812      	ldrb	r2, [r2, #0]
 8004b26:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b28:	2311      	movs	r3, #17
 8004b2a:	18fb      	adds	r3, r7, r3
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d105      	bne.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b32:	4b76      	ldr	r3, [pc, #472]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b36:	4b75      	ldr	r3, [pc, #468]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b38:	4979      	ldr	r1, [pc, #484]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004b3a:	400a      	ands	r2, r1
 8004b3c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2201      	movs	r2, #1
 8004b44:	4013      	ands	r3, r2
 8004b46:	d009      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b48:	4b70      	ldr	r3, [pc, #448]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4c:	2203      	movs	r2, #3
 8004b4e:	4393      	bics	r3, r2
 8004b50:	0019      	movs	r1, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685a      	ldr	r2, [r3, #4]
 8004b56:	4b6d      	ldr	r3, [pc, #436]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2202      	movs	r2, #2
 8004b62:	4013      	ands	r3, r2
 8004b64:	d009      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b66:	4b69      	ldr	r3, [pc, #420]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b6a:	220c      	movs	r2, #12
 8004b6c:	4393      	bics	r3, r2
 8004b6e:	0019      	movs	r1, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	4b65      	ldr	r3, [pc, #404]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b76:	430a      	orrs	r2, r1
 8004b78:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2210      	movs	r2, #16
 8004b80:	4013      	ands	r3, r2
 8004b82:	d009      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b84:	4b61      	ldr	r3, [pc, #388]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b88:	4a66      	ldr	r2, [pc, #408]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	0019      	movs	r1, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68da      	ldr	r2, [r3, #12]
 8004b92:	4b5e      	ldr	r3, [pc, #376]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b94:	430a      	orrs	r2, r1
 8004b96:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	2380      	movs	r3, #128	; 0x80
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	d009      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ba4:	4b59      	ldr	r3, [pc, #356]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba8:	4a5f      	ldr	r2, [pc, #380]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004baa:	4013      	ands	r3, r2
 8004bac:	0019      	movs	r1, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	699a      	ldr	r2, [r3, #24]
 8004bb2:	4b56      	ldr	r3, [pc, #344]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	2380      	movs	r3, #128	; 0x80
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	d009      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004bc4:	4b51      	ldr	r3, [pc, #324]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc8:	4a58      	ldr	r2, [pc, #352]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bca:	4013      	ands	r3, r2
 8004bcc:	0019      	movs	r1, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	69da      	ldr	r2, [r3, #28]
 8004bd2:	4b4e      	ldr	r3, [pc, #312]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	4013      	ands	r3, r2
 8004be0:	d009      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004be2:	4b4a      	ldr	r3, [pc, #296]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be6:	4a52      	ldr	r2, [pc, #328]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004be8:	4013      	ands	r3, r2
 8004bea:	0019      	movs	r1, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	691a      	ldr	r2, [r3, #16]
 8004bf0:	4b46      	ldr	r3, [pc, #280]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	2380      	movs	r3, #128	; 0x80
 8004bfc:	01db      	lsls	r3, r3, #7
 8004bfe:	4013      	ands	r3, r2
 8004c00:	d015      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c02:	4b42      	ldr	r3, [pc, #264]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	0899      	lsrs	r1, r3, #2
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1a      	ldr	r2, [r3, #32]
 8004c0e:	4b3f      	ldr	r3, [pc, #252]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c10:	430a      	orrs	r2, r1
 8004c12:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a1a      	ldr	r2, [r3, #32]
 8004c18:	2380      	movs	r3, #128	; 0x80
 8004c1a:	05db      	lsls	r3, r3, #23
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d106      	bne.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004c20:	4b3a      	ldr	r3, [pc, #232]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c22:	68da      	ldr	r2, [r3, #12]
 8004c24:	4b39      	ldr	r3, [pc, #228]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c26:	2180      	movs	r1, #128	; 0x80
 8004c28:	0249      	lsls	r1, r1, #9
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	2380      	movs	r3, #128	; 0x80
 8004c34:	031b      	lsls	r3, r3, #12
 8004c36:	4013      	ands	r3, r2
 8004c38:	d009      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c3a:	4b34      	ldr	r3, [pc, #208]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c3e:	2240      	movs	r2, #64	; 0x40
 8004c40:	4393      	bics	r3, r2
 8004c42:	0019      	movs	r1, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c48:	4b30      	ldr	r3, [pc, #192]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	2380      	movs	r3, #128	; 0x80
 8004c54:	039b      	lsls	r3, r3, #14
 8004c56:	4013      	ands	r3, r2
 8004c58:	d016      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004c5a:	4b2c      	ldr	r3, [pc, #176]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5e:	4a35      	ldr	r2, [pc, #212]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004c60:	4013      	ands	r3, r2
 8004c62:	0019      	movs	r1, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c68:	4b28      	ldr	r3, [pc, #160]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c72:	2380      	movs	r3, #128	; 0x80
 8004c74:	03db      	lsls	r3, r3, #15
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d106      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004c7a:	4b24      	ldr	r3, [pc, #144]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c7c:	68da      	ldr	r2, [r3, #12]
 8004c7e:	4b23      	ldr	r3, [pc, #140]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c80:	2180      	movs	r1, #128	; 0x80
 8004c82:	0449      	lsls	r1, r1, #17
 8004c84:	430a      	orrs	r2, r1
 8004c86:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	2380      	movs	r3, #128	; 0x80
 8004c8e:	03db      	lsls	r3, r3, #15
 8004c90:	4013      	ands	r3, r2
 8004c92:	d016      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004c94:	4b1d      	ldr	r3, [pc, #116]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c98:	4a27      	ldr	r2, [pc, #156]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	0019      	movs	r1, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca2:	4b1a      	ldr	r3, [pc, #104]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cac:	2380      	movs	r3, #128	; 0x80
 8004cae:	045b      	lsls	r3, r3, #17
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d106      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004cb4:	4b15      	ldr	r3, [pc, #84]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cb6:	68da      	ldr	r2, [r3, #12]
 8004cb8:	4b14      	ldr	r3, [pc, #80]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cba:	2180      	movs	r1, #128	; 0x80
 8004cbc:	0449      	lsls	r1, r1, #17
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	2380      	movs	r3, #128	; 0x80
 8004cc8:	011b      	lsls	r3, r3, #4
 8004cca:	4013      	ands	r3, r2
 8004ccc:	d016      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004cce:	4b0f      	ldr	r3, [pc, #60]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd2:	4a1a      	ldr	r2, [pc, #104]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	0019      	movs	r1, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	695a      	ldr	r2, [r3, #20]
 8004cdc:	4b0b      	ldr	r3, [pc, #44]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	695a      	ldr	r2, [r3, #20]
 8004ce6:	2380      	movs	r3, #128	; 0x80
 8004ce8:	01db      	lsls	r3, r3, #7
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d106      	bne.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004cee:	4b07      	ldr	r3, [pc, #28]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cf0:	68da      	ldr	r2, [r3, #12]
 8004cf2:	4b06      	ldr	r3, [pc, #24]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cf4:	2180      	movs	r1, #128	; 0x80
 8004cf6:	0249      	lsls	r1, r1, #9
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004cfc:	2312      	movs	r3, #18
 8004cfe:	18fb      	adds	r3, r7, r3
 8004d00:	781b      	ldrb	r3, [r3, #0]
}
 8004d02:	0018      	movs	r0, r3
 8004d04:	46bd      	mov	sp, r7
 8004d06:	b006      	add	sp, #24
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	46c0      	nop			; (mov r8, r8)
 8004d0c:	40021000 	.word	0x40021000
 8004d10:	40007000 	.word	0x40007000
 8004d14:	fffffcff 	.word	0xfffffcff
 8004d18:	fffeffff 	.word	0xfffeffff
 8004d1c:	00001388 	.word	0x00001388
 8004d20:	efffffff 	.word	0xefffffff
 8004d24:	fffff3ff 	.word	0xfffff3ff
 8004d28:	fff3ffff 	.word	0xfff3ffff
 8004d2c:	ffcfffff 	.word	0xffcfffff
 8004d30:	ffffcfff 	.word	0xffffcfff
 8004d34:	ffbfffff 	.word	0xffbfffff
 8004d38:	feffffff 	.word	0xfeffffff
 8004d3c:	ffff3fff 	.word	0xffff3fff

08004d40 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004d40:	b5b0      	push	{r4, r5, r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004d48:	230f      	movs	r3, #15
 8004d4a:	18fb      	adds	r3, r7, r3
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d100      	bne.n	8004d58 <HAL_RTC_Init+0x18>
 8004d56:	e08c      	b.n	8004e72 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2229      	movs	r2, #41	; 0x29
 8004d5c:	5c9b      	ldrb	r3, [r3, r2]
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d10b      	bne.n	8004d7c <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2228      	movs	r2, #40	; 0x28
 8004d68:	2100      	movs	r1, #0
 8004d6a:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2288      	movs	r2, #136	; 0x88
 8004d70:	0212      	lsls	r2, r2, #8
 8004d72:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	0018      	movs	r0, r3
 8004d78:	f7fe fa18 	bl	80031ac <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2229      	movs	r2, #41	; 0x29
 8004d80:	2102      	movs	r1, #2
 8004d82:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	2210      	movs	r2, #16
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	2b10      	cmp	r3, #16
 8004d90:	d062      	beq.n	8004e58 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	22ca      	movs	r2, #202	; 0xca
 8004d98:	625a      	str	r2, [r3, #36]	; 0x24
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2253      	movs	r2, #83	; 0x53
 8004da0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004da2:	250f      	movs	r5, #15
 8004da4:	197c      	adds	r4, r7, r5
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	0018      	movs	r0, r3
 8004daa:	f000 fb9c 	bl	80054e6 <RTC_EnterInitMode>
 8004dae:	0003      	movs	r3, r0
 8004db0:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8004db2:	0028      	movs	r0, r5
 8004db4:	183b      	adds	r3, r7, r0
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d12c      	bne.n	8004e16 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699a      	ldr	r2, [r3, #24]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	492e      	ldr	r1, [pc, #184]	; (8004e80 <HAL_RTC_Init+0x140>)
 8004dc8:	400a      	ands	r2, r1
 8004dca:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6999      	ldr	r1, [r3, #24]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689a      	ldr	r2, [r3, #8]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	69db      	ldr	r3, [r3, #28]
 8004de0:	431a      	orrs	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6912      	ldr	r2, [r2, #16]
 8004df2:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6919      	ldr	r1, [r3, #16]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	041a      	lsls	r2, r3, #16
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004e08:	183c      	adds	r4, r7, r0
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	f000 fbad 	bl	800556c <RTC_ExitInitMode>
 8004e12:	0003      	movs	r3, r0
 8004e14:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8004e16:	230f      	movs	r3, #15
 8004e18:	18fb      	adds	r3, r7, r3
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d116      	bne.n	8004e4e <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	699a      	ldr	r2, [r3, #24]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	00d2      	lsls	r2, r2, #3
 8004e2c:	08d2      	lsrs	r2, r2, #3
 8004e2e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6999      	ldr	r1, [r3, #24]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	431a      	orrs	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	22ff      	movs	r2, #255	; 0xff
 8004e54:	625a      	str	r2, [r3, #36]	; 0x24
 8004e56:	e003      	b.n	8004e60 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004e58:	230f      	movs	r3, #15
 8004e5a:	18fb      	adds	r3, r7, r3
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8004e60:	230f      	movs	r3, #15
 8004e62:	18fb      	adds	r3, r7, r3
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d103      	bne.n	8004e72 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2229      	movs	r2, #41	; 0x29
 8004e6e:	2101      	movs	r1, #1
 8004e70:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8004e72:	230f      	movs	r3, #15
 8004e74:	18fb      	adds	r3, r7, r3
 8004e76:	781b      	ldrb	r3, [r3, #0]
}
 8004e78:	0018      	movs	r0, r3
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	b004      	add	sp, #16
 8004e7e:	bdb0      	pop	{r4, r5, r7, pc}
 8004e80:	fb8fffbf 	.word	0xfb8fffbf

08004e84 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004e84:	b5b0      	push	{r4, r5, r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2228      	movs	r2, #40	; 0x28
 8004e94:	5c9b      	ldrb	r3, [r3, r2]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d101      	bne.n	8004e9e <HAL_RTC_SetTime+0x1a>
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	e092      	b.n	8004fc4 <HAL_RTC_SetTime+0x140>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2228      	movs	r2, #40	; 0x28
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2229      	movs	r2, #41	; 0x29
 8004eaa:	2102      	movs	r1, #2
 8004eac:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	22ca      	movs	r2, #202	; 0xca
 8004eb4:	625a      	str	r2, [r3, #36]	; 0x24
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2253      	movs	r2, #83	; 0x53
 8004ebc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004ebe:	2513      	movs	r5, #19
 8004ec0:	197c      	adds	r4, r7, r5
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	f000 fb0e 	bl	80054e6 <RTC_EnterInitMode>
 8004eca:	0003      	movs	r3, r0
 8004ecc:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004ece:	197b      	adds	r3, r7, r5
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d162      	bne.n	8004f9c <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d125      	bne.n	8004f28 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	2240      	movs	r2, #64	; 0x40
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	d102      	bne.n	8004eee <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	2200      	movs	r2, #0
 8004eec:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	f000 fb7e 	bl	80055f4 <RTC_ByteToBcd2>
 8004ef8:	0003      	movs	r3, r0
 8004efa:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	785b      	ldrb	r3, [r3, #1]
 8004f00:	0018      	movs	r0, r3
 8004f02:	f000 fb77 	bl	80055f4 <RTC_ByteToBcd2>
 8004f06:	0003      	movs	r3, r0
 8004f08:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004f0a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	789b      	ldrb	r3, [r3, #2]
 8004f10:	0018      	movs	r0, r3
 8004f12:	f000 fb6f 	bl	80055f4 <RTC_ByteToBcd2>
 8004f16:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004f18:	0022      	movs	r2, r4
 8004f1a:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	78db      	ldrb	r3, [r3, #3]
 8004f20:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004f22:	4313      	orrs	r3, r2
 8004f24:	617b      	str	r3, [r7, #20]
 8004f26:	e017      	b.n	8004f58 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	2240      	movs	r2, #64	; 0x40
 8004f30:	4013      	ands	r3, r2
 8004f32:	d102      	bne.n	8004f3a <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	2200      	movs	r2, #0
 8004f38:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	785b      	ldrb	r3, [r3, #1]
 8004f44:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004f46:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004f4c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	78db      	ldrb	r3, [r3, #3]
 8004f52:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004f54:	4313      	orrs	r3, r2
 8004f56:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	491b      	ldr	r1, [pc, #108]	; (8004fcc <HAL_RTC_SetTime+0x148>)
 8004f60:	400a      	ands	r2, r1
 8004f62:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699a      	ldr	r2, [r3, #24]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4918      	ldr	r1, [pc, #96]	; (8004fd0 <HAL_RTC_SetTime+0x14c>)
 8004f70:	400a      	ands	r2, r1
 8004f72:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6999      	ldr	r1, [r3, #24]
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	431a      	orrs	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004f8c:	2313      	movs	r3, #19
 8004f8e:	18fc      	adds	r4, r7, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	0018      	movs	r0, r3
 8004f94:	f000 faea 	bl	800556c <RTC_ExitInitMode>
 8004f98:	0003      	movs	r3, r0
 8004f9a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	22ff      	movs	r2, #255	; 0xff
 8004fa2:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8004fa4:	2313      	movs	r3, #19
 8004fa6:	18fb      	adds	r3, r7, r3
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d103      	bne.n	8004fb6 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2229      	movs	r2, #41	; 0x29
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2228      	movs	r2, #40	; 0x28
 8004fba:	2100      	movs	r1, #0
 8004fbc:	5499      	strb	r1, [r3, r2]

  return status;
 8004fbe:	2313      	movs	r3, #19
 8004fc0:	18fb      	adds	r3, r7, r3
 8004fc2:	781b      	ldrb	r3, [r3, #0]
}
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	b006      	add	sp, #24
 8004fca:	bdb0      	pop	{r4, r5, r7, pc}
 8004fcc:	007f7f7f 	.word	0x007f7f7f
 8004fd0:	fffbffff 	.word	0xfffbffff

08004fd4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689a      	ldr	r2, [r3, #8]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	045b      	lsls	r3, r3, #17
 8004ff2:	0c5a      	lsrs	r2, r3, #17
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a22      	ldr	r2, [pc, #136]	; (8005088 <HAL_RTC_GetTime+0xb4>)
 8005000:	4013      	ands	r3, r2
 8005002:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	0c1b      	lsrs	r3, r3, #16
 8005008:	b2db      	uxtb	r3, r3
 800500a:	223f      	movs	r2, #63	; 0x3f
 800500c:	4013      	ands	r3, r2
 800500e:	b2da      	uxtb	r2, r3
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	0a1b      	lsrs	r3, r3, #8
 8005018:	b2db      	uxtb	r3, r3
 800501a:	227f      	movs	r2, #127	; 0x7f
 800501c:	4013      	ands	r3, r2
 800501e:	b2da      	uxtb	r2, r3
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	b2db      	uxtb	r3, r3
 8005028:	227f      	movs	r2, #127	; 0x7f
 800502a:	4013      	ands	r3, r2
 800502c:	b2da      	uxtb	r2, r3
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	0d9b      	lsrs	r3, r3, #22
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2201      	movs	r2, #1
 800503a:	4013      	ands	r3, r2
 800503c:	b2da      	uxtb	r2, r3
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d11a      	bne.n	800507e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	0018      	movs	r0, r3
 800504e:	f000 faf9 	bl	8005644 <RTC_Bcd2ToByte>
 8005052:	0003      	movs	r3, r0
 8005054:	001a      	movs	r2, r3
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	785b      	ldrb	r3, [r3, #1]
 800505e:	0018      	movs	r0, r3
 8005060:	f000 faf0 	bl	8005644 <RTC_Bcd2ToByte>
 8005064:	0003      	movs	r3, r0
 8005066:	001a      	movs	r2, r3
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	789b      	ldrb	r3, [r3, #2]
 8005070:	0018      	movs	r0, r3
 8005072:	f000 fae7 	bl	8005644 <RTC_Bcd2ToByte>
 8005076:	0003      	movs	r3, r0
 8005078:	001a      	movs	r2, r3
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	0018      	movs	r0, r3
 8005082:	46bd      	mov	sp, r7
 8005084:	b006      	add	sp, #24
 8005086:	bd80      	pop	{r7, pc}
 8005088:	007f7f7f 	.word	0x007f7f7f

0800508c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800508c:	b5b0      	push	{r4, r5, r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2228      	movs	r2, #40	; 0x28
 800509c:	5c9b      	ldrb	r3, [r3, r2]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d101      	bne.n	80050a6 <HAL_RTC_SetDate+0x1a>
 80050a2:	2302      	movs	r3, #2
 80050a4:	e07e      	b.n	80051a4 <HAL_RTC_SetDate+0x118>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2228      	movs	r2, #40	; 0x28
 80050aa:	2101      	movs	r1, #1
 80050ac:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2229      	movs	r2, #41	; 0x29
 80050b2:	2102      	movs	r1, #2
 80050b4:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10e      	bne.n	80050da <HAL_RTC_SetDate+0x4e>
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	785b      	ldrb	r3, [r3, #1]
 80050c0:	001a      	movs	r2, r3
 80050c2:	2310      	movs	r3, #16
 80050c4:	4013      	ands	r3, r2
 80050c6:	d008      	beq.n	80050da <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	785b      	ldrb	r3, [r3, #1]
 80050cc:	2210      	movs	r2, #16
 80050ce:	4393      	bics	r3, r2
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	330a      	adds	r3, #10
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d11c      	bne.n	800511a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	78db      	ldrb	r3, [r3, #3]
 80050e4:	0018      	movs	r0, r3
 80050e6:	f000 fa85 	bl	80055f4 <RTC_ByteToBcd2>
 80050ea:	0003      	movs	r3, r0
 80050ec:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	785b      	ldrb	r3, [r3, #1]
 80050f2:	0018      	movs	r0, r3
 80050f4:	f000 fa7e 	bl	80055f4 <RTC_ByteToBcd2>
 80050f8:	0003      	movs	r3, r0
 80050fa:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80050fc:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	789b      	ldrb	r3, [r3, #2]
 8005102:	0018      	movs	r0, r3
 8005104:	f000 fa76 	bl	80055f4 <RTC_ByteToBcd2>
 8005108:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800510a:	0022      	movs	r2, r4
 800510c:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005114:	4313      	orrs	r3, r2
 8005116:	617b      	str	r3, [r7, #20]
 8005118:	e00e      	b.n	8005138 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	78db      	ldrb	r3, [r3, #3]
 800511e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	785b      	ldrb	r3, [r3, #1]
 8005124:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005126:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800512c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005134:	4313      	orrs	r3, r2
 8005136:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	22ca      	movs	r2, #202	; 0xca
 800513e:	625a      	str	r2, [r3, #36]	; 0x24
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2253      	movs	r2, #83	; 0x53
 8005146:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005148:	2513      	movs	r5, #19
 800514a:	197c      	adds	r4, r7, r5
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	0018      	movs	r0, r3
 8005150:	f000 f9c9 	bl	80054e6 <RTC_EnterInitMode>
 8005154:	0003      	movs	r3, r0
 8005156:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005158:	0028      	movs	r0, r5
 800515a:	183b      	adds	r3, r7, r0
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10c      	bne.n	800517c <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	4910      	ldr	r1, [pc, #64]	; (80051ac <HAL_RTC_SetDate+0x120>)
 800516a:	400a      	ands	r2, r1
 800516c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800516e:	183c      	adds	r4, r7, r0
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	0018      	movs	r0, r3
 8005174:	f000 f9fa 	bl	800556c <RTC_ExitInitMode>
 8005178:	0003      	movs	r3, r0
 800517a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	22ff      	movs	r2, #255	; 0xff
 8005182:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005184:	2313      	movs	r3, #19
 8005186:	18fb      	adds	r3, r7, r3
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d103      	bne.n	8005196 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2229      	movs	r2, #41	; 0x29
 8005192:	2101      	movs	r1, #1
 8005194:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2228      	movs	r2, #40	; 0x28
 800519a:	2100      	movs	r1, #0
 800519c:	5499      	strb	r1, [r3, r2]

  return status;
 800519e:	2313      	movs	r3, #19
 80051a0:	18fb      	adds	r3, r7, r3
 80051a2:	781b      	ldrb	r3, [r3, #0]
}
 80051a4:	0018      	movs	r0, r3
 80051a6:	46bd      	mov	sp, r7
 80051a8:	b006      	add	sp, #24
 80051aa:	bdb0      	pop	{r4, r5, r7, pc}
 80051ac:	00ffff3f 	.word	0x00ffff3f

080051b0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	4a21      	ldr	r2, [pc, #132]	; (8005248 <HAL_RTC_GetDate+0x98>)
 80051c4:	4013      	ands	r3, r2
 80051c6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	0c1b      	lsrs	r3, r3, #16
 80051cc:	b2da      	uxtb	r2, r3
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	0a1b      	lsrs	r3, r3, #8
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	221f      	movs	r2, #31
 80051da:	4013      	ands	r3, r2
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	223f      	movs	r2, #63	; 0x3f
 80051e8:	4013      	ands	r3, r2
 80051ea:	b2da      	uxtb	r2, r3
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	0b5b      	lsrs	r3, r3, #13
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2207      	movs	r2, #7
 80051f8:	4013      	ands	r3, r2
 80051fa:	b2da      	uxtb	r2, r3
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d11a      	bne.n	800523c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	78db      	ldrb	r3, [r3, #3]
 800520a:	0018      	movs	r0, r3
 800520c:	f000 fa1a 	bl	8005644 <RTC_Bcd2ToByte>
 8005210:	0003      	movs	r3, r0
 8005212:	001a      	movs	r2, r3
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	785b      	ldrb	r3, [r3, #1]
 800521c:	0018      	movs	r0, r3
 800521e:	f000 fa11 	bl	8005644 <RTC_Bcd2ToByte>
 8005222:	0003      	movs	r3, r0
 8005224:	001a      	movs	r2, r3
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	789b      	ldrb	r3, [r3, #2]
 800522e:	0018      	movs	r0, r3
 8005230:	f000 fa08 	bl	8005644 <RTC_Bcd2ToByte>
 8005234:	0003      	movs	r3, r0
 8005236:	001a      	movs	r2, r3
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	0018      	movs	r0, r3
 8005240:	46bd      	mov	sp, r7
 8005242:	b006      	add	sp, #24
 8005244:	bd80      	pop	{r7, pc}
 8005246:	46c0      	nop			; (mov r8, r8)
 8005248:	00ffff3f 	.word	0x00ffff3f

0800524c <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800524c:	b590      	push	{r4, r7, lr}
 800524e:	b089      	sub	sp, #36	; 0x24
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2228      	movs	r2, #40	; 0x28
 800525c:	5c9b      	ldrb	r3, [r3, r2]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d101      	bne.n	8005266 <HAL_RTC_SetAlarm+0x1a>
 8005262:	2302      	movs	r3, #2
 8005264:	e10c      	b.n	8005480 <HAL_RTC_SetAlarm+0x234>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2228      	movs	r2, #40	; 0x28
 800526a:	2101      	movs	r1, #1
 800526c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2229      	movs	r2, #41	; 0x29
 8005272:	2102      	movs	r1, #2
 8005274:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d136      	bne.n	80052ea <HAL_RTC_SetAlarm+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	2240      	movs	r2, #64	; 0x40
 8005284:	4013      	ands	r3, r2
 8005286:	d102      	bne.n	800528e <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	2200      	movs	r2, #0
 800528c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	0018      	movs	r0, r3
 8005294:	f000 f9ae 	bl	80055f4 <RTC_ByteToBcd2>
 8005298:	0003      	movs	r3, r0
 800529a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	785b      	ldrb	r3, [r3, #1]
 80052a0:	0018      	movs	r0, r3
 80052a2:	f000 f9a7 	bl	80055f4 <RTC_ByteToBcd2>
 80052a6:	0003      	movs	r3, r0
 80052a8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80052aa:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	789b      	ldrb	r3, [r3, #2]
 80052b0:	0018      	movs	r0, r3
 80052b2:	f000 f99f 	bl	80055f4 <RTC_ByteToBcd2>
 80052b6:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80052b8:	0022      	movs	r2, r4
 80052ba:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	78db      	ldrb	r3, [r3, #3]
 80052c0:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80052c2:	431a      	orrs	r2, r3
 80052c4:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	2220      	movs	r2, #32
 80052ca:	5c9b      	ldrb	r3, [r3, r2]
 80052cc:	0018      	movs	r0, r3
 80052ce:	f000 f991 	bl	80055f4 <RTC_ByteToBcd2>
 80052d2:	0003      	movs	r3, r0
 80052d4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80052d6:	0022      	movs	r2, r4
 80052d8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80052de:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80052e4:	4313      	orrs	r3, r2
 80052e6:	61fb      	str	r3, [r7, #28]
 80052e8:	e022      	b.n	8005330 <HAL_RTC_SetAlarm+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	2240      	movs	r2, #64	; 0x40
 80052f2:	4013      	ands	r3, r2
 80052f4:	d102      	bne.n	80052fc <HAL_RTC_SetAlarm+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	2200      	movs	r2, #0
 80052fa:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	785b      	ldrb	r3, [r3, #1]
 8005306:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005308:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800530e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	78db      	ldrb	r3, [r3, #3]
 8005314:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005316:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	2120      	movs	r1, #32
 800531c:	5c5b      	ldrb	r3, [r3, r1]
 800531e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005320:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005326:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800532c:	4313      	orrs	r3, r2
 800532e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	4313      	orrs	r3, r2
 800533a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	22ca      	movs	r2, #202	; 0xca
 8005342:	625a      	str	r2, [r3, #36]	; 0x24
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2253      	movs	r2, #83	; 0x53
 800534a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005350:	2380      	movs	r3, #128	; 0x80
 8005352:	005b      	lsls	r3, r3, #1
 8005354:	429a      	cmp	r2, r3
 8005356:	d143      	bne.n	80053e0 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	699a      	ldr	r2, [r3, #24]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4949      	ldr	r1, [pc, #292]	; (8005488 <HAL_RTC_SetAlarm+0x23c>)
 8005364:	400a      	ands	r2, r1
 8005366:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699a      	ldr	r2, [r3, #24]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4946      	ldr	r1, [pc, #280]	; (800548c <HAL_RTC_SetAlarm+0x240>)
 8005374:	400a      	ands	r2, r1
 8005376:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8005378:	f7fe fa8a 	bl	8003890 <HAL_GetTick>
 800537c:	0003      	movs	r3, r0
 800537e:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005380:	e016      	b.n	80053b0 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005382:	f7fe fa85 	bl	8003890 <HAL_GetTick>
 8005386:	0002      	movs	r2, r0
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	1ad2      	subs	r2, r2, r3
 800538c:	23fa      	movs	r3, #250	; 0xfa
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	429a      	cmp	r2, r3
 8005392:	d90d      	bls.n	80053b0 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	22ff      	movs	r2, #255	; 0xff
 800539a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2229      	movs	r2, #41	; 0x29
 80053a0:	2103      	movs	r1, #3
 80053a2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2228      	movs	r2, #40	; 0x28
 80053a8:	2100      	movs	r1, #0
 80053aa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e067      	b.n	8005480 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	2201      	movs	r2, #1
 80053b8:	4013      	ands	r3, r2
 80053ba:	d0e2      	beq.n	8005382 <HAL_RTC_SetAlarm+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	69fa      	ldr	r2, [r7, #28]
 80053c2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	699a      	ldr	r2, [r3, #24]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2180      	movs	r1, #128	; 0x80
 80053d8:	0049      	lsls	r1, r1, #1
 80053da:	430a      	orrs	r2, r1
 80053dc:	619a      	str	r2, [r3, #24]
 80053de:	e042      	b.n	8005466 <HAL_RTC_SetAlarm+0x21a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	699a      	ldr	r2, [r3, #24]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4929      	ldr	r1, [pc, #164]	; (8005490 <HAL_RTC_SetAlarm+0x244>)
 80053ec:	400a      	ands	r2, r1
 80053ee:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	699a      	ldr	r2, [r3, #24]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4926      	ldr	r1, [pc, #152]	; (8005494 <HAL_RTC_SetAlarm+0x248>)
 80053fc:	400a      	ands	r2, r1
 80053fe:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8005400:	f7fe fa46 	bl	8003890 <HAL_GetTick>
 8005404:	0003      	movs	r3, r0
 8005406:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005408:	e016      	b.n	8005438 <HAL_RTC_SetAlarm+0x1ec>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800540a:	f7fe fa41 	bl	8003890 <HAL_GetTick>
 800540e:	0002      	movs	r2, r0
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	1ad2      	subs	r2, r2, r3
 8005414:	23fa      	movs	r3, #250	; 0xfa
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	429a      	cmp	r2, r3
 800541a:	d90d      	bls.n	8005438 <HAL_RTC_SetAlarm+0x1ec>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	22ff      	movs	r2, #255	; 0xff
 8005422:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2229      	movs	r2, #41	; 0x29
 8005428:	2103      	movs	r1, #3
 800542a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2228      	movs	r2, #40	; 0x28
 8005430:	2100      	movs	r1, #0
 8005432:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e023      	b.n	8005480 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	2202      	movs	r2, #2
 8005440:	4013      	ands	r3, r2
 8005442:	d0e2      	beq.n	800540a <HAL_RTC_SetAlarm+0x1be>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	69fa      	ldr	r2, [r7, #28]
 800544a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699a      	ldr	r2, [r3, #24]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2180      	movs	r1, #128	; 0x80
 8005460:	0089      	lsls	r1, r1, #2
 8005462:	430a      	orrs	r2, r1
 8005464:	619a      	str	r2, [r3, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	22ff      	movs	r2, #255	; 0xff
 800546c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2229      	movs	r2, #41	; 0x29
 8005472:	2101      	movs	r1, #1
 8005474:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2228      	movs	r2, #40	; 0x28
 800547a:	2100      	movs	r1, #0
 800547c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	0018      	movs	r0, r3
 8005482:	46bd      	mov	sp, r7
 8005484:	b009      	add	sp, #36	; 0x24
 8005486:	bd90      	pop	{r4, r7, pc}
 8005488:	fffffeff 	.word	0xfffffeff
 800548c:	ffffefff 	.word	0xffffefff
 8005490:	fffffdff 	.word	0xfffffdff
 8005494:	ffffdfff 	.word	0xffffdfff

08005498 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68da      	ldr	r2, [r3, #12]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	21a0      	movs	r1, #160	; 0xa0
 80054ac:	438a      	bics	r2, r1
 80054ae:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80054b0:	f7fe f9ee 	bl	8003890 <HAL_GetTick>
 80054b4:	0003      	movs	r3, r0
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80054b8:	e00a      	b.n	80054d0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80054ba:	f7fe f9e9 	bl	8003890 <HAL_GetTick>
 80054be:	0002      	movs	r2, r0
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	1ad2      	subs	r2, r2, r3
 80054c4:	23fa      	movs	r3, #250	; 0xfa
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d901      	bls.n	80054d0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e006      	b.n	80054de <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	2220      	movs	r2, #32
 80054d8:	4013      	ands	r3, r2
 80054da:	d0ee      	beq.n	80054ba <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	0018      	movs	r0, r3
 80054e0:	46bd      	mov	sp, r7
 80054e2:	b004      	add	sp, #16
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b084      	sub	sp, #16
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80054ee:	230f      	movs	r3, #15
 80054f0:	18fb      	adds	r3, r7, r3
 80054f2:	2200      	movs	r2, #0
 80054f4:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	2240      	movs	r2, #64	; 0x40
 80054fe:	4013      	ands	r3, r2
 8005500:	d12c      	bne.n	800555c <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68da      	ldr	r2, [r3, #12]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2180      	movs	r1, #128	; 0x80
 800550e:	430a      	orrs	r2, r1
 8005510:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005512:	f7fe f9bd 	bl	8003890 <HAL_GetTick>
 8005516:	0003      	movs	r3, r0
 8005518:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800551a:	e014      	b.n	8005546 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800551c:	f7fe f9b8 	bl	8003890 <HAL_GetTick>
 8005520:	0002      	movs	r2, r0
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	1ad2      	subs	r2, r2, r3
 8005526:	200f      	movs	r0, #15
 8005528:	183b      	adds	r3, r7, r0
 800552a:	1839      	adds	r1, r7, r0
 800552c:	7809      	ldrb	r1, [r1, #0]
 800552e:	7019      	strb	r1, [r3, #0]
 8005530:	23fa      	movs	r3, #250	; 0xfa
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	429a      	cmp	r2, r3
 8005536:	d906      	bls.n	8005546 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8005538:	183b      	adds	r3, r7, r0
 800553a:	2203      	movs	r2, #3
 800553c:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2229      	movs	r2, #41	; 0x29
 8005542:	2103      	movs	r1, #3
 8005544:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	2240      	movs	r2, #64	; 0x40
 800554e:	4013      	ands	r3, r2
 8005550:	d104      	bne.n	800555c <RTC_EnterInitMode+0x76>
 8005552:	230f      	movs	r3, #15
 8005554:	18fb      	adds	r3, r7, r3
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	2b03      	cmp	r3, #3
 800555a:	d1df      	bne.n	800551c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800555c:	230f      	movs	r3, #15
 800555e:	18fb      	adds	r3, r7, r3
 8005560:	781b      	ldrb	r3, [r3, #0]
}
 8005562:	0018      	movs	r0, r3
 8005564:	46bd      	mov	sp, r7
 8005566:	b004      	add	sp, #16
 8005568:	bd80      	pop	{r7, pc}
	...

0800556c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800556c:	b590      	push	{r4, r7, lr}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005574:	240f      	movs	r4, #15
 8005576:	193b      	adds	r3, r7, r4
 8005578:	2200      	movs	r2, #0
 800557a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800557c:	4b1c      	ldr	r3, [pc, #112]	; (80055f0 <RTC_ExitInitMode+0x84>)
 800557e:	68da      	ldr	r2, [r3, #12]
 8005580:	4b1b      	ldr	r3, [pc, #108]	; (80055f0 <RTC_ExitInitMode+0x84>)
 8005582:	2180      	movs	r1, #128	; 0x80
 8005584:	438a      	bics	r2, r1
 8005586:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005588:	4b19      	ldr	r3, [pc, #100]	; (80055f0 <RTC_ExitInitMode+0x84>)
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	2220      	movs	r2, #32
 800558e:	4013      	ands	r3, r2
 8005590:	d10d      	bne.n	80055ae <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	0018      	movs	r0, r3
 8005596:	f7ff ff7f 	bl	8005498 <HAL_RTC_WaitForSynchro>
 800559a:	1e03      	subs	r3, r0, #0
 800559c:	d021      	beq.n	80055e2 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2229      	movs	r2, #41	; 0x29
 80055a2:	2103      	movs	r1, #3
 80055a4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80055a6:	193b      	adds	r3, r7, r4
 80055a8:	2203      	movs	r2, #3
 80055aa:	701a      	strb	r2, [r3, #0]
 80055ac:	e019      	b.n	80055e2 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80055ae:	4b10      	ldr	r3, [pc, #64]	; (80055f0 <RTC_ExitInitMode+0x84>)
 80055b0:	699a      	ldr	r2, [r3, #24]
 80055b2:	4b0f      	ldr	r3, [pc, #60]	; (80055f0 <RTC_ExitInitMode+0x84>)
 80055b4:	2120      	movs	r1, #32
 80055b6:	438a      	bics	r2, r1
 80055b8:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	0018      	movs	r0, r3
 80055be:	f7ff ff6b 	bl	8005498 <HAL_RTC_WaitForSynchro>
 80055c2:	1e03      	subs	r3, r0, #0
 80055c4:	d007      	beq.n	80055d6 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2229      	movs	r2, #41	; 0x29
 80055ca:	2103      	movs	r1, #3
 80055cc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80055ce:	230f      	movs	r3, #15
 80055d0:	18fb      	adds	r3, r7, r3
 80055d2:	2203      	movs	r2, #3
 80055d4:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80055d6:	4b06      	ldr	r3, [pc, #24]	; (80055f0 <RTC_ExitInitMode+0x84>)
 80055d8:	699a      	ldr	r2, [r3, #24]
 80055da:	4b05      	ldr	r3, [pc, #20]	; (80055f0 <RTC_ExitInitMode+0x84>)
 80055dc:	2120      	movs	r1, #32
 80055de:	430a      	orrs	r2, r1
 80055e0:	619a      	str	r2, [r3, #24]
  }

  return status;
 80055e2:	230f      	movs	r3, #15
 80055e4:	18fb      	adds	r3, r7, r3
 80055e6:	781b      	ldrb	r3, [r3, #0]
}
 80055e8:	0018      	movs	r0, r3
 80055ea:	46bd      	mov	sp, r7
 80055ec:	b005      	add	sp, #20
 80055ee:	bd90      	pop	{r4, r7, pc}
 80055f0:	40002800 	.word	0x40002800

080055f4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	0002      	movs	r2, r0
 80055fc:	1dfb      	adds	r3, r7, #7
 80055fe:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005600:	2300      	movs	r3, #0
 8005602:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005604:	230b      	movs	r3, #11
 8005606:	18fb      	adds	r3, r7, r3
 8005608:	1dfa      	adds	r2, r7, #7
 800560a:	7812      	ldrb	r2, [r2, #0]
 800560c:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800560e:	e008      	b.n	8005622 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	3301      	adds	r3, #1
 8005614:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005616:	220b      	movs	r2, #11
 8005618:	18bb      	adds	r3, r7, r2
 800561a:	18ba      	adds	r2, r7, r2
 800561c:	7812      	ldrb	r2, [r2, #0]
 800561e:	3a0a      	subs	r2, #10
 8005620:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8005622:	210b      	movs	r1, #11
 8005624:	187b      	adds	r3, r7, r1
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	2b09      	cmp	r3, #9
 800562a:	d8f1      	bhi.n	8005610 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	b2db      	uxtb	r3, r3
 8005630:	011b      	lsls	r3, r3, #4
 8005632:	b2da      	uxtb	r2, r3
 8005634:	187b      	adds	r3, r7, r1
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	4313      	orrs	r3, r2
 800563a:	b2db      	uxtb	r3, r3
}
 800563c:	0018      	movs	r0, r3
 800563e:	46bd      	mov	sp, r7
 8005640:	b004      	add	sp, #16
 8005642:	bd80      	pop	{r7, pc}

08005644 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	0002      	movs	r2, r0
 800564c:	1dfb      	adds	r3, r7, #7
 800564e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005650:	1dfb      	adds	r3, r7, #7
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	091b      	lsrs	r3, r3, #4
 8005656:	b2db      	uxtb	r3, r3
 8005658:	001a      	movs	r2, r3
 800565a:	0013      	movs	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	189b      	adds	r3, r3, r2
 8005660:	005b      	lsls	r3, r3, #1
 8005662:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	b2da      	uxtb	r2, r3
 8005668:	1dfb      	adds	r3, r7, #7
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	210f      	movs	r1, #15
 800566e:	400b      	ands	r3, r1
 8005670:	b2db      	uxtb	r3, r3
 8005672:	18d3      	adds	r3, r2, r3
 8005674:	b2db      	uxtb	r3, r3
}
 8005676:	0018      	movs	r0, r3
 8005678:	46bd      	mov	sp, r7
 800567a:	b004      	add	sp, #16
 800567c:	bd80      	pop	{r7, pc}

0800567e <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b082      	sub	sp, #8
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2228      	movs	r2, #40	; 0x28
 800568a:	5c9b      	ldrb	r3, [r3, r2]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d101      	bne.n	8005694 <HAL_RTCEx_EnableBypassShadow+0x16>
 8005690:	2302      	movs	r3, #2
 8005692:	e024      	b.n	80056de <HAL_RTCEx_EnableBypassShadow+0x60>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2228      	movs	r2, #40	; 0x28
 8005698:	2101      	movs	r1, #1
 800569a:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2229      	movs	r2, #41	; 0x29
 80056a0:	2102      	movs	r1, #2
 80056a2:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	22ca      	movs	r2, #202	; 0xca
 80056aa:	625a      	str	r2, [r3, #36]	; 0x24
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2253      	movs	r2, #83	; 0x53
 80056b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	699a      	ldr	r2, [r3, #24]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2120      	movs	r1, #32
 80056c0:	430a      	orrs	r2, r1
 80056c2:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	22ff      	movs	r2, #255	; 0xff
 80056ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2229      	movs	r2, #41	; 0x29
 80056d0:	2101      	movs	r1, #1
 80056d2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2228      	movs	r2, #40	; 0x28
 80056d8:	2100      	movs	r1, #0
 80056da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	0018      	movs	r0, r3
 80056e0:	46bd      	mov	sp, r7
 80056e2:	b002      	add	sp, #8
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <HAL_RTCEx_DisableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b082      	sub	sp, #8
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2228      	movs	r2, #40	; 0x28
 80056f2:	5c9b      	ldrb	r3, [r3, r2]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d101      	bne.n	80056fc <HAL_RTCEx_DisableBypassShadow+0x16>
 80056f8:	2302      	movs	r3, #2
 80056fa:	e024      	b.n	8005746 <HAL_RTCEx_DisableBypassShadow+0x60>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2228      	movs	r2, #40	; 0x28
 8005700:	2101      	movs	r1, #1
 8005702:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2229      	movs	r2, #41	; 0x29
 8005708:	2102      	movs	r1, #2
 800570a:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	22ca      	movs	r2, #202	; 0xca
 8005712:	625a      	str	r2, [r3, #36]	; 0x24
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2253      	movs	r2, #83	; 0x53
 800571a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset the BYPSHAD bit */
  hrtc->Instance->CR &= ((uint8_t)~RTC_CR_BYPSHAD);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	699a      	ldr	r2, [r3, #24]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	21df      	movs	r1, #223	; 0xdf
 8005728:	400a      	ands	r2, r1
 800572a:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	22ff      	movs	r2, #255	; 0xff
 8005732:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2229      	movs	r2, #41	; 0x29
 8005738:	2101      	movs	r1, #1
 800573a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2228      	movs	r2, #40	; 0x28
 8005740:	2100      	movs	r1, #0
 8005742:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	0018      	movs	r0, r3
 8005748:	46bd      	mov	sp, r7
 800574a:	b002      	add	sp, #8
 800574c:	bd80      	pop	{r7, pc}
	...

08005750 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e0a8      	b.n	80058b4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005766:	2b00      	cmp	r3, #0
 8005768:	d109      	bne.n	800577e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	2382      	movs	r3, #130	; 0x82
 8005770:	005b      	lsls	r3, r3, #1
 8005772:	429a      	cmp	r2, r3
 8005774:	d009      	beq.n	800578a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	61da      	str	r2, [r3, #28]
 800577c:	e005      	b.n	800578a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	225d      	movs	r2, #93	; 0x5d
 8005794:	5c9b      	ldrb	r3, [r3, r2]
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b00      	cmp	r3, #0
 800579a:	d107      	bne.n	80057ac <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	225c      	movs	r2, #92	; 0x5c
 80057a0:	2100      	movs	r1, #0
 80057a2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	0018      	movs	r0, r3
 80057a8:	f7fd fd3e 	bl	8003228 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	225d      	movs	r2, #93	; 0x5d
 80057b0:	2102      	movs	r1, #2
 80057b2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2140      	movs	r1, #64	; 0x40
 80057c0:	438a      	bics	r2, r1
 80057c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68da      	ldr	r2, [r3, #12]
 80057c8:	23e0      	movs	r3, #224	; 0xe0
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d902      	bls.n	80057d6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80057d0:	2300      	movs	r3, #0
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	e002      	b.n	80057dc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80057d6:	2380      	movs	r3, #128	; 0x80
 80057d8:	015b      	lsls	r3, r3, #5
 80057da:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	68da      	ldr	r2, [r3, #12]
 80057e0:	23f0      	movs	r3, #240	; 0xf0
 80057e2:	011b      	lsls	r3, r3, #4
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d008      	beq.n	80057fa <HAL_SPI_Init+0xaa>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68da      	ldr	r2, [r3, #12]
 80057ec:	23e0      	movs	r3, #224	; 0xe0
 80057ee:	00db      	lsls	r3, r3, #3
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d002      	beq.n	80057fa <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	2382      	movs	r3, #130	; 0x82
 8005800:	005b      	lsls	r3, r3, #1
 8005802:	401a      	ands	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6899      	ldr	r1, [r3, #8]
 8005808:	2384      	movs	r3, #132	; 0x84
 800580a:	021b      	lsls	r3, r3, #8
 800580c:	400b      	ands	r3, r1
 800580e:	431a      	orrs	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	2102      	movs	r1, #2
 8005816:	400b      	ands	r3, r1
 8005818:	431a      	orrs	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	2101      	movs	r1, #1
 8005820:	400b      	ands	r3, r1
 8005822:	431a      	orrs	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6999      	ldr	r1, [r3, #24]
 8005828:	2380      	movs	r3, #128	; 0x80
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	400b      	ands	r3, r1
 800582e:	431a      	orrs	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	69db      	ldr	r3, [r3, #28]
 8005834:	2138      	movs	r1, #56	; 0x38
 8005836:	400b      	ands	r3, r1
 8005838:	431a      	orrs	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	2180      	movs	r1, #128	; 0x80
 8005840:	400b      	ands	r3, r1
 8005842:	431a      	orrs	r2, r3
 8005844:	0011      	movs	r1, r2
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800584a:	2380      	movs	r3, #128	; 0x80
 800584c:	019b      	lsls	r3, r3, #6
 800584e:	401a      	ands	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	430a      	orrs	r2, r1
 8005856:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	0c1b      	lsrs	r3, r3, #16
 800585e:	2204      	movs	r2, #4
 8005860:	401a      	ands	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005866:	2110      	movs	r1, #16
 8005868:	400b      	ands	r3, r1
 800586a:	431a      	orrs	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005870:	2108      	movs	r1, #8
 8005872:	400b      	ands	r3, r1
 8005874:	431a      	orrs	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68d9      	ldr	r1, [r3, #12]
 800587a:	23f0      	movs	r3, #240	; 0xf0
 800587c:	011b      	lsls	r3, r3, #4
 800587e:	400b      	ands	r3, r1
 8005880:	431a      	orrs	r2, r3
 8005882:	0011      	movs	r1, r2
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	2380      	movs	r3, #128	; 0x80
 8005888:	015b      	lsls	r3, r3, #5
 800588a:	401a      	ands	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	430a      	orrs	r2, r1
 8005892:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	69da      	ldr	r2, [r3, #28]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4907      	ldr	r1, [pc, #28]	; (80058bc <HAL_SPI_Init+0x16c>)
 80058a0:	400a      	ands	r2, r1
 80058a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	225d      	movs	r2, #93	; 0x5d
 80058ae:	2101      	movs	r1, #1
 80058b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	0018      	movs	r0, r3
 80058b6:	46bd      	mov	sp, r7
 80058b8:	b004      	add	sp, #16
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	fffff7ff 	.word	0xfffff7ff

080058c0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b088      	sub	sp, #32
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	603b      	str	r3, [r7, #0]
 80058cc:	1dbb      	adds	r3, r7, #6
 80058ce:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80058d0:	231f      	movs	r3, #31
 80058d2:	18fb      	adds	r3, r7, r3
 80058d4:	2200      	movs	r2, #0
 80058d6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	225c      	movs	r2, #92	; 0x5c
 80058dc:	5c9b      	ldrb	r3, [r3, r2]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d101      	bne.n	80058e6 <HAL_SPI_Transmit+0x26>
 80058e2:	2302      	movs	r3, #2
 80058e4:	e140      	b.n	8005b68 <HAL_SPI_Transmit+0x2a8>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	225c      	movs	r2, #92	; 0x5c
 80058ea:	2101      	movs	r1, #1
 80058ec:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058ee:	f7fd ffcf 	bl	8003890 <HAL_GetTick>
 80058f2:	0003      	movs	r3, r0
 80058f4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80058f6:	2316      	movs	r3, #22
 80058f8:	18fb      	adds	r3, r7, r3
 80058fa:	1dba      	adds	r2, r7, #6
 80058fc:	8812      	ldrh	r2, [r2, #0]
 80058fe:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	225d      	movs	r2, #93	; 0x5d
 8005904:	5c9b      	ldrb	r3, [r3, r2]
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b01      	cmp	r3, #1
 800590a:	d004      	beq.n	8005916 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800590c:	231f      	movs	r3, #31
 800590e:	18fb      	adds	r3, r7, r3
 8005910:	2202      	movs	r2, #2
 8005912:	701a      	strb	r2, [r3, #0]
    goto error;
 8005914:	e11d      	b.n	8005b52 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d003      	beq.n	8005924 <HAL_SPI_Transmit+0x64>
 800591c:	1dbb      	adds	r3, r7, #6
 800591e:	881b      	ldrh	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d104      	bne.n	800592e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005924:	231f      	movs	r3, #31
 8005926:	18fb      	adds	r3, r7, r3
 8005928:	2201      	movs	r2, #1
 800592a:	701a      	strb	r2, [r3, #0]
    goto error;
 800592c:	e111      	b.n	8005b52 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	225d      	movs	r2, #93	; 0x5d
 8005932:	2103      	movs	r1, #3
 8005934:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	1dba      	adds	r2, r7, #6
 8005946:	8812      	ldrh	r2, [r2, #0]
 8005948:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	1dba      	adds	r2, r7, #6
 800594e:	8812      	ldrh	r2, [r2, #0]
 8005950:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2244      	movs	r2, #68	; 0x44
 800595c:	2100      	movs	r1, #0
 800595e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2246      	movs	r2, #70	; 0x46
 8005964:	2100      	movs	r1, #0
 8005966:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	689a      	ldr	r2, [r3, #8]
 8005978:	2380      	movs	r3, #128	; 0x80
 800597a:	021b      	lsls	r3, r3, #8
 800597c:	429a      	cmp	r2, r3
 800597e:	d110      	bne.n	80059a2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2140      	movs	r1, #64	; 0x40
 800598c:	438a      	bics	r2, r1
 800598e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2180      	movs	r1, #128	; 0x80
 800599c:	01c9      	lsls	r1, r1, #7
 800599e:	430a      	orrs	r2, r1
 80059a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2240      	movs	r2, #64	; 0x40
 80059aa:	4013      	ands	r3, r2
 80059ac:	2b40      	cmp	r3, #64	; 0x40
 80059ae:	d007      	beq.n	80059c0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2140      	movs	r1, #64	; 0x40
 80059bc:	430a      	orrs	r2, r1
 80059be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	68da      	ldr	r2, [r3, #12]
 80059c4:	23e0      	movs	r3, #224	; 0xe0
 80059c6:	00db      	lsls	r3, r3, #3
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d94e      	bls.n	8005a6a <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d004      	beq.n	80059de <HAL_SPI_Transmit+0x11e>
 80059d4:	2316      	movs	r3, #22
 80059d6:	18fb      	adds	r3, r7, r3
 80059d8:	881b      	ldrh	r3, [r3, #0]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d13f      	bne.n	8005a5e <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e2:	881a      	ldrh	r2, [r3, #0]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ee:	1c9a      	adds	r2, r3, #2
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	3b01      	subs	r3, #1
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a02:	e02c      	b.n	8005a5e <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d112      	bne.n	8005a38 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a16:	881a      	ldrh	r2, [r3, #0]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a22:	1c9a      	adds	r2, r3, #2
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a36:	e012      	b.n	8005a5e <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a38:	f7fd ff2a 	bl	8003890 <HAL_GetTick>
 8005a3c:	0002      	movs	r2, r0
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	683a      	ldr	r2, [r7, #0]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d802      	bhi.n	8005a4e <HAL_SPI_Transmit+0x18e>
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	d102      	bne.n	8005a54 <HAL_SPI_Transmit+0x194>
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d104      	bne.n	8005a5e <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8005a54:	231f      	movs	r3, #31
 8005a56:	18fb      	adds	r3, r7, r3
 8005a58:	2203      	movs	r2, #3
 8005a5a:	701a      	strb	r2, [r3, #0]
          goto error;
 8005a5c:	e079      	b.n	8005b52 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1cd      	bne.n	8005a04 <HAL_SPI_Transmit+0x144>
 8005a68:	e04f      	b.n	8005b0a <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d004      	beq.n	8005a7c <HAL_SPI_Transmit+0x1bc>
 8005a72:	2316      	movs	r3, #22
 8005a74:	18fb      	adds	r3, r7, r3
 8005a76:	881b      	ldrh	r3, [r3, #0]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d141      	bne.n	8005b00 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	330c      	adds	r3, #12
 8005a86:	7812      	ldrb	r2, [r2, #0]
 8005a88:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8e:	1c5a      	adds	r2, r3, #1
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8005aa2:	e02d      	b.n	8005b00 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	4013      	ands	r3, r2
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d113      	bne.n	8005ada <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	330c      	adds	r3, #12
 8005abc:	7812      	ldrb	r2, [r2, #0]
 8005abe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac4:	1c5a      	adds	r2, r3, #1
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ad8:	e012      	b.n	8005b00 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ada:	f7fd fed9 	bl	8003890 <HAL_GetTick>
 8005ade:	0002      	movs	r2, r0
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	683a      	ldr	r2, [r7, #0]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d802      	bhi.n	8005af0 <HAL_SPI_Transmit+0x230>
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	3301      	adds	r3, #1
 8005aee:	d102      	bne.n	8005af6 <HAL_SPI_Transmit+0x236>
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d104      	bne.n	8005b00 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8005af6:	231f      	movs	r3, #31
 8005af8:	18fb      	adds	r3, r7, r3
 8005afa:	2203      	movs	r2, #3
 8005afc:	701a      	strb	r2, [r3, #0]
          goto error;
 8005afe:	e028      	b.n	8005b52 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1cc      	bne.n	8005aa4 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b0a:	69ba      	ldr	r2, [r7, #24]
 8005b0c:	6839      	ldr	r1, [r7, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	0018      	movs	r0, r3
 8005b12:	f000 fcd9 	bl	80064c8 <SPI_EndRxTxTransaction>
 8005b16:	1e03      	subs	r3, r0, #0
 8005b18:	d002      	beq.n	8005b20 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d10a      	bne.n	8005b3e <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b28:	2300      	movs	r3, #0
 8005b2a:	613b      	str	r3, [r7, #16]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	613b      	str	r3, [r7, #16]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	613b      	str	r3, [r7, #16]
 8005b3c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d004      	beq.n	8005b50 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8005b46:	231f      	movs	r3, #31
 8005b48:	18fb      	adds	r3, r7, r3
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	701a      	strb	r2, [r3, #0]
 8005b4e:	e000      	b.n	8005b52 <HAL_SPI_Transmit+0x292>
  }

error:
 8005b50:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	225d      	movs	r2, #93	; 0x5d
 8005b56:	2101      	movs	r1, #1
 8005b58:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	225c      	movs	r2, #92	; 0x5c
 8005b5e:	2100      	movs	r1, #0
 8005b60:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005b62:	231f      	movs	r3, #31
 8005b64:	18fb      	adds	r3, r7, r3
 8005b66:	781b      	ldrb	r3, [r3, #0]
}
 8005b68:	0018      	movs	r0, r3
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	b008      	add	sp, #32
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b70:	b590      	push	{r4, r7, lr}
 8005b72:	b089      	sub	sp, #36	; 0x24
 8005b74:	af02      	add	r7, sp, #8
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	603b      	str	r3, [r7, #0]
 8005b7c:	1dbb      	adds	r3, r7, #6
 8005b7e:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b80:	2317      	movs	r3, #23
 8005b82:	18fb      	adds	r3, r7, r3
 8005b84:	2200      	movs	r2, #0
 8005b86:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	2382      	movs	r3, #130	; 0x82
 8005b8e:	005b      	lsls	r3, r3, #1
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d113      	bne.n	8005bbc <HAL_SPI_Receive+0x4c>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10f      	bne.n	8005bbc <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	225d      	movs	r2, #93	; 0x5d
 8005ba0:	2104      	movs	r1, #4
 8005ba2:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005ba4:	1dbb      	adds	r3, r7, #6
 8005ba6:	881c      	ldrh	r4, [r3, #0]
 8005ba8:	68ba      	ldr	r2, [r7, #8]
 8005baa:	68b9      	ldr	r1, [r7, #8]
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	0023      	movs	r3, r4
 8005bb4:	f000 f928 	bl	8005e08 <HAL_SPI_TransmitReceive>
 8005bb8:	0003      	movs	r3, r0
 8005bba:	e11c      	b.n	8005df6 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	225c      	movs	r2, #92	; 0x5c
 8005bc0:	5c9b      	ldrb	r3, [r3, r2]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d101      	bne.n	8005bca <HAL_SPI_Receive+0x5a>
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	e115      	b.n	8005df6 <HAL_SPI_Receive+0x286>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	225c      	movs	r2, #92	; 0x5c
 8005bce:	2101      	movs	r1, #1
 8005bd0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bd2:	f7fd fe5d 	bl	8003890 <HAL_GetTick>
 8005bd6:	0003      	movs	r3, r0
 8005bd8:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	225d      	movs	r2, #93	; 0x5d
 8005bde:	5c9b      	ldrb	r3, [r3, r2]
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d004      	beq.n	8005bf0 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8005be6:	2317      	movs	r3, #23
 8005be8:	18fb      	adds	r3, r7, r3
 8005bea:	2202      	movs	r2, #2
 8005bec:	701a      	strb	r2, [r3, #0]
    goto error;
 8005bee:	e0f7      	b.n	8005de0 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <HAL_SPI_Receive+0x8e>
 8005bf6:	1dbb      	adds	r3, r7, #6
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d104      	bne.n	8005c08 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8005bfe:	2317      	movs	r3, #23
 8005c00:	18fb      	adds	r3, r7, r3
 8005c02:	2201      	movs	r2, #1
 8005c04:	701a      	strb	r2, [r3, #0]
    goto error;
 8005c06:	e0eb      	b.n	8005de0 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	225d      	movs	r2, #93	; 0x5d
 8005c0c:	2104      	movs	r1, #4
 8005c0e:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	1dba      	adds	r2, r7, #6
 8005c20:	2144      	movs	r1, #68	; 0x44
 8005c22:	8812      	ldrh	r2, [r2, #0]
 8005c24:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	1dba      	adds	r2, r7, #6
 8005c2a:	2146      	movs	r1, #70	; 0x46
 8005c2c:	8812      	ldrh	r2, [r2, #0]
 8005c2e:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	68da      	ldr	r2, [r3, #12]
 8005c52:	23e0      	movs	r3, #224	; 0xe0
 8005c54:	00db      	lsls	r3, r3, #3
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d908      	bls.n	8005c6c <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4966      	ldr	r1, [pc, #408]	; (8005e00 <HAL_SPI_Receive+0x290>)
 8005c66:	400a      	ands	r2, r1
 8005c68:	605a      	str	r2, [r3, #4]
 8005c6a:	e008      	b.n	8005c7e <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	685a      	ldr	r2, [r3, #4]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2180      	movs	r1, #128	; 0x80
 8005c78:	0149      	lsls	r1, r1, #5
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	689a      	ldr	r2, [r3, #8]
 8005c82:	2380      	movs	r3, #128	; 0x80
 8005c84:	021b      	lsls	r3, r3, #8
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d10f      	bne.n	8005caa <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2140      	movs	r1, #64	; 0x40
 8005c96:	438a      	bics	r2, r1
 8005c98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4957      	ldr	r1, [pc, #348]	; (8005e04 <HAL_SPI_Receive+0x294>)
 8005ca6:	400a      	ands	r2, r1
 8005ca8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2240      	movs	r2, #64	; 0x40
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	2b40      	cmp	r3, #64	; 0x40
 8005cb6:	d007      	beq.n	8005cc8 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2140      	movs	r1, #64	; 0x40
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	68da      	ldr	r2, [r3, #12]
 8005ccc:	23e0      	movs	r3, #224	; 0xe0
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d900      	bls.n	8005cd6 <HAL_SPI_Receive+0x166>
 8005cd4:	e069      	b.n	8005daa <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005cd6:	e031      	b.n	8005d3c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d117      	bne.n	8005d16 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	330c      	adds	r3, #12
 8005cec:	001a      	movs	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf2:	7812      	ldrb	r2, [r2, #0]
 8005cf4:	b2d2      	uxtb	r2, r2
 8005cf6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfc:	1c5a      	adds	r2, r3, #1
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2246      	movs	r2, #70	; 0x46
 8005d06:	5a9b      	ldrh	r3, [r3, r2]
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	b299      	uxth	r1, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2246      	movs	r2, #70	; 0x46
 8005d12:	5299      	strh	r1, [r3, r2]
 8005d14:	e012      	b.n	8005d3c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d16:	f7fd fdbb 	bl	8003890 <HAL_GetTick>
 8005d1a:	0002      	movs	r2, r0
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	683a      	ldr	r2, [r7, #0]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d802      	bhi.n	8005d2c <HAL_SPI_Receive+0x1bc>
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	d102      	bne.n	8005d32 <HAL_SPI_Receive+0x1c2>
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d104      	bne.n	8005d3c <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8005d32:	2317      	movs	r3, #23
 8005d34:	18fb      	adds	r3, r7, r3
 8005d36:	2203      	movs	r2, #3
 8005d38:	701a      	strb	r2, [r3, #0]
          goto error;
 8005d3a:	e051      	b.n	8005de0 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2246      	movs	r2, #70	; 0x46
 8005d40:	5a9b      	ldrh	r3, [r3, r2]
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1c7      	bne.n	8005cd8 <HAL_SPI_Receive+0x168>
 8005d48:	e035      	b.n	8005db6 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	2201      	movs	r2, #1
 8005d52:	4013      	ands	r3, r2
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d115      	bne.n	8005d84 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68da      	ldr	r2, [r3, #12]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d62:	b292      	uxth	r2, r2
 8005d64:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6a:	1c9a      	adds	r2, r3, #2
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2246      	movs	r2, #70	; 0x46
 8005d74:	5a9b      	ldrh	r3, [r3, r2]
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	b299      	uxth	r1, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2246      	movs	r2, #70	; 0x46
 8005d80:	5299      	strh	r1, [r3, r2]
 8005d82:	e012      	b.n	8005daa <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d84:	f7fd fd84 	bl	8003890 <HAL_GetTick>
 8005d88:	0002      	movs	r2, r0
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	683a      	ldr	r2, [r7, #0]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d802      	bhi.n	8005d9a <HAL_SPI_Receive+0x22a>
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	3301      	adds	r3, #1
 8005d98:	d102      	bne.n	8005da0 <HAL_SPI_Receive+0x230>
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d104      	bne.n	8005daa <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8005da0:	2317      	movs	r3, #23
 8005da2:	18fb      	adds	r3, r7, r3
 8005da4:	2203      	movs	r2, #3
 8005da6:	701a      	strb	r2, [r3, #0]
          goto error;
 8005da8:	e01a      	b.n	8005de0 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2246      	movs	r2, #70	; 0x46
 8005dae:	5a9b      	ldrh	r3, [r3, r2]
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1c9      	bne.n	8005d4a <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	6839      	ldr	r1, [r7, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	0018      	movs	r0, r3
 8005dbe:	f000 fb25 	bl	800640c <SPI_EndRxTransaction>
 8005dc2:	1e03      	subs	r3, r0, #0
 8005dc4:	d002      	beq.n	8005dcc <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2220      	movs	r2, #32
 8005dca:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d004      	beq.n	8005dde <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8005dd4:	2317      	movs	r3, #23
 8005dd6:	18fb      	adds	r3, r7, r3
 8005dd8:	2201      	movs	r2, #1
 8005dda:	701a      	strb	r2, [r3, #0]
 8005ddc:	e000      	b.n	8005de0 <HAL_SPI_Receive+0x270>
  }

error :
 8005dde:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	225d      	movs	r2, #93	; 0x5d
 8005de4:	2101      	movs	r1, #1
 8005de6:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	225c      	movs	r2, #92	; 0x5c
 8005dec:	2100      	movs	r1, #0
 8005dee:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005df0:	2317      	movs	r3, #23
 8005df2:	18fb      	adds	r3, r7, r3
 8005df4:	781b      	ldrb	r3, [r3, #0]
}
 8005df6:	0018      	movs	r0, r3
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	b007      	add	sp, #28
 8005dfc:	bd90      	pop	{r4, r7, pc}
 8005dfe:	46c0      	nop			; (mov r8, r8)
 8005e00:	ffffefff 	.word	0xffffefff
 8005e04:	ffffbfff 	.word	0xffffbfff

08005e08 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08a      	sub	sp, #40	; 0x28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
 8005e14:	001a      	movs	r2, r3
 8005e16:	1cbb      	adds	r3, r7, #2
 8005e18:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e1e:	2323      	movs	r3, #35	; 0x23
 8005e20:	18fb      	adds	r3, r7, r3
 8005e22:	2200      	movs	r2, #0
 8005e24:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	225c      	movs	r2, #92	; 0x5c
 8005e2a:	5c9b      	ldrb	r3, [r3, r2]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d101      	bne.n	8005e34 <HAL_SPI_TransmitReceive+0x2c>
 8005e30:	2302      	movs	r3, #2
 8005e32:	e1b5      	b.n	80061a0 <HAL_SPI_TransmitReceive+0x398>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	225c      	movs	r2, #92	; 0x5c
 8005e38:	2101      	movs	r1, #1
 8005e3a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e3c:	f7fd fd28 	bl	8003890 <HAL_GetTick>
 8005e40:	0003      	movs	r3, r0
 8005e42:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e44:	201b      	movs	r0, #27
 8005e46:	183b      	adds	r3, r7, r0
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	215d      	movs	r1, #93	; 0x5d
 8005e4c:	5c52      	ldrb	r2, [r2, r1]
 8005e4e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005e56:	2312      	movs	r3, #18
 8005e58:	18fb      	adds	r3, r7, r3
 8005e5a:	1cba      	adds	r2, r7, #2
 8005e5c:	8812      	ldrh	r2, [r2, #0]
 8005e5e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e60:	183b      	adds	r3, r7, r0
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d011      	beq.n	8005e8c <HAL_SPI_TransmitReceive+0x84>
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	2382      	movs	r3, #130	; 0x82
 8005e6c:	005b      	lsls	r3, r3, #1
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d107      	bne.n	8005e82 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d103      	bne.n	8005e82 <HAL_SPI_TransmitReceive+0x7a>
 8005e7a:	183b      	adds	r3, r7, r0
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	d004      	beq.n	8005e8c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005e82:	2323      	movs	r3, #35	; 0x23
 8005e84:	18fb      	adds	r3, r7, r3
 8005e86:	2202      	movs	r2, #2
 8005e88:	701a      	strb	r2, [r3, #0]
    goto error;
 8005e8a:	e17e      	b.n	800618a <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d006      	beq.n	8005ea0 <HAL_SPI_TransmitReceive+0x98>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d003      	beq.n	8005ea0 <HAL_SPI_TransmitReceive+0x98>
 8005e98:	1cbb      	adds	r3, r7, #2
 8005e9a:	881b      	ldrh	r3, [r3, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d104      	bne.n	8005eaa <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005ea0:	2323      	movs	r3, #35	; 0x23
 8005ea2:	18fb      	adds	r3, r7, r3
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	701a      	strb	r2, [r3, #0]
    goto error;
 8005ea8:	e16f      	b.n	800618a <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	225d      	movs	r2, #93	; 0x5d
 8005eae:	5c9b      	ldrb	r3, [r3, r2]
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b04      	cmp	r3, #4
 8005eb4:	d003      	beq.n	8005ebe <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	225d      	movs	r2, #93	; 0x5d
 8005eba:	2105      	movs	r1, #5
 8005ebc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	1cba      	adds	r2, r7, #2
 8005ece:	2146      	movs	r1, #70	; 0x46
 8005ed0:	8812      	ldrh	r2, [r2, #0]
 8005ed2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	1cba      	adds	r2, r7, #2
 8005ed8:	2144      	movs	r1, #68	; 0x44
 8005eda:	8812      	ldrh	r2, [r2, #0]
 8005edc:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	1cba      	adds	r2, r7, #2
 8005ee8:	8812      	ldrh	r2, [r2, #0]
 8005eea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	1cba      	adds	r2, r7, #2
 8005ef0:	8812      	ldrh	r2, [r2, #0]
 8005ef2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	68da      	ldr	r2, [r3, #12]
 8005f04:	23e0      	movs	r3, #224	; 0xe0
 8005f06:	00db      	lsls	r3, r3, #3
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d908      	bls.n	8005f1e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	685a      	ldr	r2, [r3, #4]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	49a4      	ldr	r1, [pc, #656]	; (80061a8 <HAL_SPI_TransmitReceive+0x3a0>)
 8005f18:	400a      	ands	r2, r1
 8005f1a:	605a      	str	r2, [r3, #4]
 8005f1c:	e008      	b.n	8005f30 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2180      	movs	r1, #128	; 0x80
 8005f2a:	0149      	lsls	r1, r1, #5
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2240      	movs	r2, #64	; 0x40
 8005f38:	4013      	ands	r3, r2
 8005f3a:	2b40      	cmp	r3, #64	; 0x40
 8005f3c:	d007      	beq.n	8005f4e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2140      	movs	r1, #64	; 0x40
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	68da      	ldr	r2, [r3, #12]
 8005f52:	23e0      	movs	r3, #224	; 0xe0
 8005f54:	00db      	lsls	r3, r3, #3
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d800      	bhi.n	8005f5c <HAL_SPI_TransmitReceive+0x154>
 8005f5a:	e07f      	b.n	800605c <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d005      	beq.n	8005f70 <HAL_SPI_TransmitReceive+0x168>
 8005f64:	2312      	movs	r3, #18
 8005f66:	18fb      	adds	r3, r7, r3
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d000      	beq.n	8005f70 <HAL_SPI_TransmitReceive+0x168>
 8005f6e:	e069      	b.n	8006044 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f74:	881a      	ldrh	r2, [r3, #0]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f80:	1c9a      	adds	r2, r3, #2
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f94:	e056      	b.n	8006044 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	2202      	movs	r2, #2
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d11b      	bne.n	8005fdc <HAL_SPI_TransmitReceive+0x1d4>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d016      	beq.n	8005fdc <HAL_SPI_TransmitReceive+0x1d4>
 8005fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d113      	bne.n	8005fdc <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb8:	881a      	ldrh	r2, [r3, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc4:	1c9a      	adds	r2, r3, #2
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d11c      	bne.n	8006024 <HAL_SPI_TransmitReceive+0x21c>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2246      	movs	r2, #70	; 0x46
 8005fee:	5a9b      	ldrh	r3, [r3, r2]
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d016      	beq.n	8006024 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68da      	ldr	r2, [r3, #12]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006000:	b292      	uxth	r2, r2
 8006002:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006008:	1c9a      	adds	r2, r3, #2
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2246      	movs	r2, #70	; 0x46
 8006012:	5a9b      	ldrh	r3, [r3, r2]
 8006014:	b29b      	uxth	r3, r3
 8006016:	3b01      	subs	r3, #1
 8006018:	b299      	uxth	r1, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2246      	movs	r2, #70	; 0x46
 800601e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006020:	2301      	movs	r3, #1
 8006022:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006024:	f7fd fc34 	bl	8003890 <HAL_GetTick>
 8006028:	0002      	movs	r2, r0
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006030:	429a      	cmp	r2, r3
 8006032:	d807      	bhi.n	8006044 <HAL_SPI_TransmitReceive+0x23c>
 8006034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006036:	3301      	adds	r3, #1
 8006038:	d004      	beq.n	8006044 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800603a:	2323      	movs	r3, #35	; 0x23
 800603c:	18fb      	adds	r3, r7, r3
 800603e:	2203      	movs	r2, #3
 8006040:	701a      	strb	r2, [r3, #0]
        goto error;
 8006042:	e0a2      	b.n	800618a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006048:	b29b      	uxth	r3, r3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1a3      	bne.n	8005f96 <HAL_SPI_TransmitReceive+0x18e>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2246      	movs	r2, #70	; 0x46
 8006052:	5a9b      	ldrh	r3, [r3, r2]
 8006054:	b29b      	uxth	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d19d      	bne.n	8005f96 <HAL_SPI_TransmitReceive+0x18e>
 800605a:	e085      	b.n	8006168 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d005      	beq.n	8006070 <HAL_SPI_TransmitReceive+0x268>
 8006064:	2312      	movs	r3, #18
 8006066:	18fb      	adds	r3, r7, r3
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d000      	beq.n	8006070 <HAL_SPI_TransmitReceive+0x268>
 800606e:	e070      	b.n	8006152 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	330c      	adds	r3, #12
 800607a:	7812      	ldrb	r2, [r2, #0]
 800607c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800608c:	b29b      	uxth	r3, r3
 800608e:	3b01      	subs	r3, #1
 8006090:	b29a      	uxth	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006096:	e05c      	b.n	8006152 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	2202      	movs	r2, #2
 80060a0:	4013      	ands	r3, r2
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d11c      	bne.n	80060e0 <HAL_SPI_TransmitReceive+0x2d8>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d017      	beq.n	80060e0 <HAL_SPI_TransmitReceive+0x2d8>
 80060b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d114      	bne.n	80060e0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	330c      	adds	r3, #12
 80060c0:	7812      	ldrb	r2, [r2, #0]
 80060c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c8:	1c5a      	adds	r2, r3, #1
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	3b01      	subs	r3, #1
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060dc:	2300      	movs	r3, #0
 80060de:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	2201      	movs	r2, #1
 80060e8:	4013      	ands	r3, r2
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d11e      	bne.n	800612c <HAL_SPI_TransmitReceive+0x324>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2246      	movs	r2, #70	; 0x46
 80060f2:	5a9b      	ldrh	r3, [r3, r2]
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d018      	beq.n	800612c <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	330c      	adds	r3, #12
 8006100:	001a      	movs	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006106:	7812      	ldrb	r2, [r2, #0]
 8006108:	b2d2      	uxtb	r2, r2
 800610a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006110:	1c5a      	adds	r2, r3, #1
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2246      	movs	r2, #70	; 0x46
 800611a:	5a9b      	ldrh	r3, [r3, r2]
 800611c:	b29b      	uxth	r3, r3
 800611e:	3b01      	subs	r3, #1
 8006120:	b299      	uxth	r1, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2246      	movs	r2, #70	; 0x46
 8006126:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006128:	2301      	movs	r3, #1
 800612a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800612c:	f7fd fbb0 	bl	8003890 <HAL_GetTick>
 8006130:	0002      	movs	r2, r0
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006138:	429a      	cmp	r2, r3
 800613a:	d802      	bhi.n	8006142 <HAL_SPI_TransmitReceive+0x33a>
 800613c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613e:	3301      	adds	r3, #1
 8006140:	d102      	bne.n	8006148 <HAL_SPI_TransmitReceive+0x340>
 8006142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006144:	2b00      	cmp	r3, #0
 8006146:	d104      	bne.n	8006152 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8006148:	2323      	movs	r3, #35	; 0x23
 800614a:	18fb      	adds	r3, r7, r3
 800614c:	2203      	movs	r2, #3
 800614e:	701a      	strb	r2, [r3, #0]
        goto error;
 8006150:	e01b      	b.n	800618a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006156:	b29b      	uxth	r3, r3
 8006158:	2b00      	cmp	r3, #0
 800615a:	d19d      	bne.n	8006098 <HAL_SPI_TransmitReceive+0x290>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2246      	movs	r2, #70	; 0x46
 8006160:	5a9b      	ldrh	r3, [r3, r2]
 8006162:	b29b      	uxth	r3, r3
 8006164:	2b00      	cmp	r3, #0
 8006166:	d197      	bne.n	8006098 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006168:	69fa      	ldr	r2, [r7, #28]
 800616a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	0018      	movs	r0, r3
 8006170:	f000 f9aa 	bl	80064c8 <SPI_EndRxTxTransaction>
 8006174:	1e03      	subs	r3, r0, #0
 8006176:	d007      	beq.n	8006188 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8006178:	2323      	movs	r3, #35	; 0x23
 800617a:	18fb      	adds	r3, r7, r3
 800617c:	2201      	movs	r2, #1
 800617e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2220      	movs	r2, #32
 8006184:	661a      	str	r2, [r3, #96]	; 0x60
 8006186:	e000      	b.n	800618a <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8006188:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	225d      	movs	r2, #93	; 0x5d
 800618e:	2101      	movs	r1, #1
 8006190:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	225c      	movs	r2, #92	; 0x5c
 8006196:	2100      	movs	r1, #0
 8006198:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800619a:	2323      	movs	r3, #35	; 0x23
 800619c:	18fb      	adds	r3, r7, r3
 800619e:	781b      	ldrb	r3, [r3, #0]
}
 80061a0:	0018      	movs	r0, r3
 80061a2:	46bd      	mov	sp, r7
 80061a4:	b00a      	add	sp, #40	; 0x28
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	ffffefff 	.word	0xffffefff

080061ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b088      	sub	sp, #32
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	603b      	str	r3, [r7, #0]
 80061b8:	1dfb      	adds	r3, r7, #7
 80061ba:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061bc:	f7fd fb68 	bl	8003890 <HAL_GetTick>
 80061c0:	0002      	movs	r2, r0
 80061c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c4:	1a9b      	subs	r3, r3, r2
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	18d3      	adds	r3, r2, r3
 80061ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061cc:	f7fd fb60 	bl	8003890 <HAL_GetTick>
 80061d0:	0003      	movs	r3, r0
 80061d2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061d4:	4b3a      	ldr	r3, [pc, #232]	; (80062c0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	015b      	lsls	r3, r3, #5
 80061da:	0d1b      	lsrs	r3, r3, #20
 80061dc:	69fa      	ldr	r2, [r7, #28]
 80061de:	4353      	muls	r3, r2
 80061e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061e2:	e058      	b.n	8006296 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	3301      	adds	r3, #1
 80061e8:	d055      	beq.n	8006296 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061ea:	f7fd fb51 	bl	8003890 <HAL_GetTick>
 80061ee:	0002      	movs	r2, r0
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	69fa      	ldr	r2, [r7, #28]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d902      	bls.n	8006200 <SPI_WaitFlagStateUntilTimeout+0x54>
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d142      	bne.n	8006286 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	685a      	ldr	r2, [r3, #4]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	21e0      	movs	r1, #224	; 0xe0
 800620c:	438a      	bics	r2, r1
 800620e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	2382      	movs	r3, #130	; 0x82
 8006216:	005b      	lsls	r3, r3, #1
 8006218:	429a      	cmp	r2, r3
 800621a:	d113      	bne.n	8006244 <SPI_WaitFlagStateUntilTimeout+0x98>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	689a      	ldr	r2, [r3, #8]
 8006220:	2380      	movs	r3, #128	; 0x80
 8006222:	021b      	lsls	r3, r3, #8
 8006224:	429a      	cmp	r2, r3
 8006226:	d005      	beq.n	8006234 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	2380      	movs	r3, #128	; 0x80
 800622e:	00db      	lsls	r3, r3, #3
 8006230:	429a      	cmp	r2, r3
 8006232:	d107      	bne.n	8006244 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2140      	movs	r1, #64	; 0x40
 8006240:	438a      	bics	r2, r1
 8006242:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006248:	2380      	movs	r3, #128	; 0x80
 800624a:	019b      	lsls	r3, r3, #6
 800624c:	429a      	cmp	r2, r3
 800624e:	d110      	bne.n	8006272 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	491a      	ldr	r1, [pc, #104]	; (80062c4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800625c:	400a      	ands	r2, r1
 800625e:	601a      	str	r2, [r3, #0]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2180      	movs	r1, #128	; 0x80
 800626c:	0189      	lsls	r1, r1, #6
 800626e:	430a      	orrs	r2, r1
 8006270:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	225d      	movs	r2, #93	; 0x5d
 8006276:	2101      	movs	r1, #1
 8006278:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	225c      	movs	r2, #92	; 0x5c
 800627e:	2100      	movs	r1, #0
 8006280:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e017      	b.n	80062b6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d101      	bne.n	8006290 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800628c:	2300      	movs	r3, #0
 800628e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	3b01      	subs	r3, #1
 8006294:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	4013      	ands	r3, r2
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	425a      	negs	r2, r3
 80062a6:	4153      	adcs	r3, r2
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	001a      	movs	r2, r3
 80062ac:	1dfb      	adds	r3, r7, #7
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d197      	bne.n	80061e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	0018      	movs	r0, r3
 80062b8:	46bd      	mov	sp, r7
 80062ba:	b008      	add	sp, #32
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	46c0      	nop			; (mov r8, r8)
 80062c0:	20000020 	.word	0x20000020
 80062c4:	ffffdfff 	.word	0xffffdfff

080062c8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b08a      	sub	sp, #40	; 0x28
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
 80062d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80062d6:	2317      	movs	r3, #23
 80062d8:	18fb      	adds	r3, r7, r3
 80062da:	2200      	movs	r2, #0
 80062dc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80062de:	f7fd fad7 	bl	8003890 <HAL_GetTick>
 80062e2:	0002      	movs	r2, r0
 80062e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e6:	1a9b      	subs	r3, r3, r2
 80062e8:	683a      	ldr	r2, [r7, #0]
 80062ea:	18d3      	adds	r3, r2, r3
 80062ec:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80062ee:	f7fd facf 	bl	8003890 <HAL_GetTick>
 80062f2:	0003      	movs	r3, r0
 80062f4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	330c      	adds	r3, #12
 80062fc:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80062fe:	4b41      	ldr	r3, [pc, #260]	; (8006404 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	0013      	movs	r3, r2
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	189b      	adds	r3, r3, r2
 8006308:	00da      	lsls	r2, r3, #3
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	0d1b      	lsrs	r3, r3, #20
 800630e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006310:	4353      	muls	r3, r2
 8006312:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006314:	e068      	b.n	80063e8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	23c0      	movs	r3, #192	; 0xc0
 800631a:	00db      	lsls	r3, r3, #3
 800631c:	429a      	cmp	r2, r3
 800631e:	d10a      	bne.n	8006336 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d107      	bne.n	8006336 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	b2da      	uxtb	r2, r3
 800632c:	2117      	movs	r1, #23
 800632e:	187b      	adds	r3, r7, r1
 8006330:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006332:	187b      	adds	r3, r7, r1
 8006334:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	3301      	adds	r3, #1
 800633a:	d055      	beq.n	80063e8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800633c:	f7fd faa8 	bl	8003890 <HAL_GetTick>
 8006340:	0002      	movs	r2, r0
 8006342:	6a3b      	ldr	r3, [r7, #32]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006348:	429a      	cmp	r2, r3
 800634a:	d902      	bls.n	8006352 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800634c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634e:	2b00      	cmp	r3, #0
 8006350:	d142      	bne.n	80063d8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	685a      	ldr	r2, [r3, #4]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	21e0      	movs	r1, #224	; 0xe0
 800635e:	438a      	bics	r2, r1
 8006360:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	685a      	ldr	r2, [r3, #4]
 8006366:	2382      	movs	r3, #130	; 0x82
 8006368:	005b      	lsls	r3, r3, #1
 800636a:	429a      	cmp	r2, r3
 800636c:	d113      	bne.n	8006396 <SPI_WaitFifoStateUntilTimeout+0xce>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	689a      	ldr	r2, [r3, #8]
 8006372:	2380      	movs	r3, #128	; 0x80
 8006374:	021b      	lsls	r3, r3, #8
 8006376:	429a      	cmp	r2, r3
 8006378:	d005      	beq.n	8006386 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	689a      	ldr	r2, [r3, #8]
 800637e:	2380      	movs	r3, #128	; 0x80
 8006380:	00db      	lsls	r3, r3, #3
 8006382:	429a      	cmp	r2, r3
 8006384:	d107      	bne.n	8006396 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2140      	movs	r1, #64	; 0x40
 8006392:	438a      	bics	r2, r1
 8006394:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800639a:	2380      	movs	r3, #128	; 0x80
 800639c:	019b      	lsls	r3, r3, #6
 800639e:	429a      	cmp	r2, r3
 80063a0:	d110      	bne.n	80063c4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4916      	ldr	r1, [pc, #88]	; (8006408 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80063ae:	400a      	ands	r2, r1
 80063b0:	601a      	str	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2180      	movs	r1, #128	; 0x80
 80063be:	0189      	lsls	r1, r1, #6
 80063c0:	430a      	orrs	r2, r1
 80063c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	225d      	movs	r2, #93	; 0x5d
 80063c8:	2101      	movs	r1, #1
 80063ca:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	225c      	movs	r2, #92	; 0x5c
 80063d0:	2100      	movs	r1, #0
 80063d2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e010      	b.n	80063fa <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80063de:	2300      	movs	r3, #0
 80063e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	3b01      	subs	r3, #1
 80063e6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	4013      	ands	r3, r2
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d18e      	bne.n	8006316 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	0018      	movs	r0, r3
 80063fc:	46bd      	mov	sp, r7
 80063fe:	b00a      	add	sp, #40	; 0x28
 8006400:	bd80      	pop	{r7, pc}
 8006402:	46c0      	nop			; (mov r8, r8)
 8006404:	20000020 	.word	0x20000020
 8006408:	ffffdfff 	.word	0xffffdfff

0800640c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af02      	add	r7, sp, #8
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	685a      	ldr	r2, [r3, #4]
 800641c:	2382      	movs	r3, #130	; 0x82
 800641e:	005b      	lsls	r3, r3, #1
 8006420:	429a      	cmp	r2, r3
 8006422:	d113      	bne.n	800644c <SPI_EndRxTransaction+0x40>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	689a      	ldr	r2, [r3, #8]
 8006428:	2380      	movs	r3, #128	; 0x80
 800642a:	021b      	lsls	r3, r3, #8
 800642c:	429a      	cmp	r2, r3
 800642e:	d005      	beq.n	800643c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	689a      	ldr	r2, [r3, #8]
 8006434:	2380      	movs	r3, #128	; 0x80
 8006436:	00db      	lsls	r3, r3, #3
 8006438:	429a      	cmp	r2, r3
 800643a:	d107      	bne.n	800644c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2140      	movs	r1, #64	; 0x40
 8006448:	438a      	bics	r2, r1
 800644a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	0013      	movs	r3, r2
 8006456:	2200      	movs	r2, #0
 8006458:	2180      	movs	r1, #128	; 0x80
 800645a:	f7ff fea7 	bl	80061ac <SPI_WaitFlagStateUntilTimeout>
 800645e:	1e03      	subs	r3, r0, #0
 8006460:	d007      	beq.n	8006472 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006466:	2220      	movs	r2, #32
 8006468:	431a      	orrs	r2, r3
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e026      	b.n	80064c0 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	685a      	ldr	r2, [r3, #4]
 8006476:	2382      	movs	r3, #130	; 0x82
 8006478:	005b      	lsls	r3, r3, #1
 800647a:	429a      	cmp	r2, r3
 800647c:	d11f      	bne.n	80064be <SPI_EndRxTransaction+0xb2>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	689a      	ldr	r2, [r3, #8]
 8006482:	2380      	movs	r3, #128	; 0x80
 8006484:	021b      	lsls	r3, r3, #8
 8006486:	429a      	cmp	r2, r3
 8006488:	d005      	beq.n	8006496 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	689a      	ldr	r2, [r3, #8]
 800648e:	2380      	movs	r3, #128	; 0x80
 8006490:	00db      	lsls	r3, r3, #3
 8006492:	429a      	cmp	r2, r3
 8006494:	d113      	bne.n	80064be <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	23c0      	movs	r3, #192	; 0xc0
 800649a:	00d9      	lsls	r1, r3, #3
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	9300      	str	r3, [sp, #0]
 80064a2:	0013      	movs	r3, r2
 80064a4:	2200      	movs	r2, #0
 80064a6:	f7ff ff0f 	bl	80062c8 <SPI_WaitFifoStateUntilTimeout>
 80064aa:	1e03      	subs	r3, r0, #0
 80064ac:	d007      	beq.n	80064be <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064b2:	2220      	movs	r2, #32
 80064b4:	431a      	orrs	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e000      	b.n	80064c0 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	0018      	movs	r0, r3
 80064c2:	46bd      	mov	sp, r7
 80064c4:	b004      	add	sp, #16
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b086      	sub	sp, #24
 80064cc:	af02      	add	r7, sp, #8
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	23c0      	movs	r3, #192	; 0xc0
 80064d8:	0159      	lsls	r1, r3, #5
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	0013      	movs	r3, r2
 80064e2:	2200      	movs	r2, #0
 80064e4:	f7ff fef0 	bl	80062c8 <SPI_WaitFifoStateUntilTimeout>
 80064e8:	1e03      	subs	r3, r0, #0
 80064ea:	d007      	beq.n	80064fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064f0:	2220      	movs	r2, #32
 80064f2:	431a      	orrs	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e027      	b.n	800654c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	9300      	str	r3, [sp, #0]
 8006504:	0013      	movs	r3, r2
 8006506:	2200      	movs	r2, #0
 8006508:	2180      	movs	r1, #128	; 0x80
 800650a:	f7ff fe4f 	bl	80061ac <SPI_WaitFlagStateUntilTimeout>
 800650e:	1e03      	subs	r3, r0, #0
 8006510:	d007      	beq.n	8006522 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006516:	2220      	movs	r2, #32
 8006518:	431a      	orrs	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e014      	b.n	800654c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	23c0      	movs	r3, #192	; 0xc0
 8006526:	00d9      	lsls	r1, r3, #3
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	0013      	movs	r3, r2
 8006530:	2200      	movs	r2, #0
 8006532:	f7ff fec9 	bl	80062c8 <SPI_WaitFifoStateUntilTimeout>
 8006536:	1e03      	subs	r3, r0, #0
 8006538:	d007      	beq.n	800654a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800653e:	2220      	movs	r2, #32
 8006540:	431a      	orrs	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e000      	b.n	800654c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	0018      	movs	r0, r3
 800654e:	46bd      	mov	sp, r7
 8006550:	b004      	add	sp, #16
 8006552:	bd80      	pop	{r7, pc}

08006554 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d101      	bne.n	8006566 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e04a      	b.n	80065fc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	223d      	movs	r2, #61	; 0x3d
 800656a:	5c9b      	ldrb	r3, [r3, r2]
 800656c:	b2db      	uxtb	r3, r3
 800656e:	2b00      	cmp	r3, #0
 8006570:	d107      	bne.n	8006582 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	223c      	movs	r2, #60	; 0x3c
 8006576:	2100      	movs	r1, #0
 8006578:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	0018      	movs	r0, r3
 800657e:	f7fc fe9f 	bl	80032c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	223d      	movs	r2, #61	; 0x3d
 8006586:	2102      	movs	r1, #2
 8006588:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	3304      	adds	r3, #4
 8006592:	0019      	movs	r1, r3
 8006594:	0010      	movs	r0, r2
 8006596:	f000 fa11 	bl	80069bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2248      	movs	r2, #72	; 0x48
 800659e:	2101      	movs	r1, #1
 80065a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	223e      	movs	r2, #62	; 0x3e
 80065a6:	2101      	movs	r1, #1
 80065a8:	5499      	strb	r1, [r3, r2]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	223f      	movs	r2, #63	; 0x3f
 80065ae:	2101      	movs	r1, #1
 80065b0:	5499      	strb	r1, [r3, r2]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2240      	movs	r2, #64	; 0x40
 80065b6:	2101      	movs	r1, #1
 80065b8:	5499      	strb	r1, [r3, r2]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2241      	movs	r2, #65	; 0x41
 80065be:	2101      	movs	r1, #1
 80065c0:	5499      	strb	r1, [r3, r2]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2242      	movs	r2, #66	; 0x42
 80065c6:	2101      	movs	r1, #1
 80065c8:	5499      	strb	r1, [r3, r2]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2243      	movs	r2, #67	; 0x43
 80065ce:	2101      	movs	r1, #1
 80065d0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2244      	movs	r2, #68	; 0x44
 80065d6:	2101      	movs	r1, #1
 80065d8:	5499      	strb	r1, [r3, r2]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2245      	movs	r2, #69	; 0x45
 80065de:	2101      	movs	r1, #1
 80065e0:	5499      	strb	r1, [r3, r2]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2246      	movs	r2, #70	; 0x46
 80065e6:	2101      	movs	r1, #1
 80065e8:	5499      	strb	r1, [r3, r2]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2247      	movs	r2, #71	; 0x47
 80065ee:	2101      	movs	r1, #1
 80065f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	223d      	movs	r2, #61	; 0x3d
 80065f6:	2101      	movs	r1, #1
 80065f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	0018      	movs	r0, r3
 80065fe:	46bd      	mov	sp, r7
 8006600:	b002      	add	sp, #8
 8006602:	bd80      	pop	{r7, pc}

08006604 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	223d      	movs	r2, #61	; 0x3d
 8006610:	5c9b      	ldrb	r3, [r3, r2]
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b01      	cmp	r3, #1
 8006616:	d001      	beq.n	800661c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e042      	b.n	80066a2 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	223d      	movs	r2, #61	; 0x3d
 8006620:	2102      	movs	r1, #2
 8006622:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68da      	ldr	r2, [r3, #12]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2101      	movs	r1, #1
 8006630:	430a      	orrs	r2, r1
 8006632:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a1c      	ldr	r2, [pc, #112]	; (80066ac <HAL_TIM_Base_Start_IT+0xa8>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d00f      	beq.n	800665e <HAL_TIM_Base_Start_IT+0x5a>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	2380      	movs	r3, #128	; 0x80
 8006644:	05db      	lsls	r3, r3, #23
 8006646:	429a      	cmp	r2, r3
 8006648:	d009      	beq.n	800665e <HAL_TIM_Base_Start_IT+0x5a>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a18      	ldr	r2, [pc, #96]	; (80066b0 <HAL_TIM_Base_Start_IT+0xac>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d004      	beq.n	800665e <HAL_TIM_Base_Start_IT+0x5a>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a16      	ldr	r2, [pc, #88]	; (80066b4 <HAL_TIM_Base_Start_IT+0xb0>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d116      	bne.n	800668c <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	4a14      	ldr	r2, [pc, #80]	; (80066b8 <HAL_TIM_Base_Start_IT+0xb4>)
 8006666:	4013      	ands	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2b06      	cmp	r3, #6
 800666e:	d016      	beq.n	800669e <HAL_TIM_Base_Start_IT+0x9a>
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	2380      	movs	r3, #128	; 0x80
 8006674:	025b      	lsls	r3, r3, #9
 8006676:	429a      	cmp	r2, r3
 8006678:	d011      	beq.n	800669e <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2101      	movs	r1, #1
 8006686:	430a      	orrs	r2, r1
 8006688:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800668a:	e008      	b.n	800669e <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2101      	movs	r1, #1
 8006698:	430a      	orrs	r2, r1
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	e000      	b.n	80066a0 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800669e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	0018      	movs	r0, r3
 80066a4:	46bd      	mov	sp, r7
 80066a6:	b004      	add	sp, #16
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	46c0      	nop			; (mov r8, r8)
 80066ac:	40012c00 	.word	0x40012c00
 80066b0:	40000400 	.word	0x40000400
 80066b4:	40014000 	.word	0x40014000
 80066b8:	00010007 	.word	0x00010007

080066bc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68da      	ldr	r2, [r3, #12]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2101      	movs	r1, #1
 80066d0:	438a      	bics	r2, r1
 80066d2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	4a0d      	ldr	r2, [pc, #52]	; (8006710 <HAL_TIM_Base_Stop_IT+0x54>)
 80066dc:	4013      	ands	r3, r2
 80066de:	d10d      	bne.n	80066fc <HAL_TIM_Base_Stop_IT+0x40>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	4a0b      	ldr	r2, [pc, #44]	; (8006714 <HAL_TIM_Base_Stop_IT+0x58>)
 80066e8:	4013      	ands	r3, r2
 80066ea:	d107      	bne.n	80066fc <HAL_TIM_Base_Stop_IT+0x40>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2101      	movs	r1, #1
 80066f8:	438a      	bics	r2, r1
 80066fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	223d      	movs	r2, #61	; 0x3d
 8006700:	2101      	movs	r1, #1
 8006702:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	0018      	movs	r0, r3
 8006708:	46bd      	mov	sp, r7
 800670a:	b002      	add	sp, #8
 800670c:	bd80      	pop	{r7, pc}
 800670e:	46c0      	nop			; (mov r8, r8)
 8006710:	00001111 	.word	0x00001111
 8006714:	00000444 	.word	0x00000444

08006718 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	2202      	movs	r2, #2
 8006728:	4013      	ands	r3, r2
 800672a:	2b02      	cmp	r3, #2
 800672c:	d124      	bne.n	8006778 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	2202      	movs	r2, #2
 8006736:	4013      	ands	r3, r2
 8006738:	2b02      	cmp	r3, #2
 800673a:	d11d      	bne.n	8006778 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2203      	movs	r2, #3
 8006742:	4252      	negs	r2, r2
 8006744:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	2203      	movs	r2, #3
 8006754:	4013      	ands	r3, r2
 8006756:	d004      	beq.n	8006762 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	0018      	movs	r0, r3
 800675c:	f000 f916 	bl	800698c <HAL_TIM_IC_CaptureCallback>
 8006760:	e007      	b.n	8006772 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	0018      	movs	r0, r3
 8006766:	f000 f909 	bl	800697c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	0018      	movs	r0, r3
 800676e:	f000 f915 	bl	800699c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	2204      	movs	r2, #4
 8006780:	4013      	ands	r3, r2
 8006782:	2b04      	cmp	r3, #4
 8006784:	d125      	bne.n	80067d2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	2204      	movs	r2, #4
 800678e:	4013      	ands	r3, r2
 8006790:	2b04      	cmp	r3, #4
 8006792:	d11e      	bne.n	80067d2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2205      	movs	r2, #5
 800679a:	4252      	negs	r2, r2
 800679c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2202      	movs	r2, #2
 80067a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	699a      	ldr	r2, [r3, #24]
 80067aa:	23c0      	movs	r3, #192	; 0xc0
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	4013      	ands	r3, r2
 80067b0:	d004      	beq.n	80067bc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	0018      	movs	r0, r3
 80067b6:	f000 f8e9 	bl	800698c <HAL_TIM_IC_CaptureCallback>
 80067ba:	e007      	b.n	80067cc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	0018      	movs	r0, r3
 80067c0:	f000 f8dc 	bl	800697c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	0018      	movs	r0, r3
 80067c8:	f000 f8e8 	bl	800699c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	2208      	movs	r2, #8
 80067da:	4013      	ands	r3, r2
 80067dc:	2b08      	cmp	r3, #8
 80067de:	d124      	bne.n	800682a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	2208      	movs	r2, #8
 80067e8:	4013      	ands	r3, r2
 80067ea:	2b08      	cmp	r3, #8
 80067ec:	d11d      	bne.n	800682a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2209      	movs	r2, #9
 80067f4:	4252      	negs	r2, r2
 80067f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2204      	movs	r2, #4
 80067fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	69db      	ldr	r3, [r3, #28]
 8006804:	2203      	movs	r2, #3
 8006806:	4013      	ands	r3, r2
 8006808:	d004      	beq.n	8006814 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	0018      	movs	r0, r3
 800680e:	f000 f8bd 	bl	800698c <HAL_TIM_IC_CaptureCallback>
 8006812:	e007      	b.n	8006824 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	0018      	movs	r0, r3
 8006818:	f000 f8b0 	bl	800697c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	0018      	movs	r0, r3
 8006820:	f000 f8bc 	bl	800699c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	2210      	movs	r2, #16
 8006832:	4013      	ands	r3, r2
 8006834:	2b10      	cmp	r3, #16
 8006836:	d125      	bne.n	8006884 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	2210      	movs	r2, #16
 8006840:	4013      	ands	r3, r2
 8006842:	2b10      	cmp	r3, #16
 8006844:	d11e      	bne.n	8006884 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2211      	movs	r2, #17
 800684c:	4252      	negs	r2, r2
 800684e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2208      	movs	r2, #8
 8006854:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	69da      	ldr	r2, [r3, #28]
 800685c:	23c0      	movs	r3, #192	; 0xc0
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	4013      	ands	r3, r2
 8006862:	d004      	beq.n	800686e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	0018      	movs	r0, r3
 8006868:	f000 f890 	bl	800698c <HAL_TIM_IC_CaptureCallback>
 800686c:	e007      	b.n	800687e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	0018      	movs	r0, r3
 8006872:	f000 f883 	bl	800697c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	0018      	movs	r0, r3
 800687a:	f000 f88f 	bl	800699c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	2201      	movs	r2, #1
 800688c:	4013      	ands	r3, r2
 800688e:	2b01      	cmp	r3, #1
 8006890:	d10f      	bne.n	80068b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	2201      	movs	r2, #1
 800689a:	4013      	ands	r3, r2
 800689c:	2b01      	cmp	r3, #1
 800689e:	d108      	bne.n	80068b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2202      	movs	r2, #2
 80068a6:	4252      	negs	r2, r2
 80068a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	0018      	movs	r0, r3
 80068ae:	f7fc fc33 	bl	8003118 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	2280      	movs	r2, #128	; 0x80
 80068ba:	4013      	ands	r3, r2
 80068bc:	2b80      	cmp	r3, #128	; 0x80
 80068be:	d10f      	bne.n	80068e0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	2280      	movs	r2, #128	; 0x80
 80068c8:	4013      	ands	r3, r2
 80068ca:	2b80      	cmp	r3, #128	; 0x80
 80068cc:	d108      	bne.n	80068e0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2281      	movs	r2, #129	; 0x81
 80068d4:	4252      	negs	r2, r2
 80068d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	0018      	movs	r0, r3
 80068dc:	f000 f964 	bl	8006ba8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	691a      	ldr	r2, [r3, #16]
 80068e6:	2380      	movs	r3, #128	; 0x80
 80068e8:	005b      	lsls	r3, r3, #1
 80068ea:	401a      	ands	r2, r3
 80068ec:	2380      	movs	r3, #128	; 0x80
 80068ee:	005b      	lsls	r3, r3, #1
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d10e      	bne.n	8006912 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	2280      	movs	r2, #128	; 0x80
 80068fc:	4013      	ands	r3, r2
 80068fe:	2b80      	cmp	r3, #128	; 0x80
 8006900:	d107      	bne.n	8006912 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a1c      	ldr	r2, [pc, #112]	; (8006978 <HAL_TIM_IRQHandler+0x260>)
 8006908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	0018      	movs	r0, r3
 800690e:	f000 f953 	bl	8006bb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	2240      	movs	r2, #64	; 0x40
 800691a:	4013      	ands	r3, r2
 800691c:	2b40      	cmp	r3, #64	; 0x40
 800691e:	d10f      	bne.n	8006940 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	2240      	movs	r2, #64	; 0x40
 8006928:	4013      	ands	r3, r2
 800692a:	2b40      	cmp	r3, #64	; 0x40
 800692c:	d108      	bne.n	8006940 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2241      	movs	r2, #65	; 0x41
 8006934:	4252      	negs	r2, r2
 8006936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	0018      	movs	r0, r3
 800693c:	f000 f836 	bl	80069ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	2220      	movs	r2, #32
 8006948:	4013      	ands	r3, r2
 800694a:	2b20      	cmp	r3, #32
 800694c:	d10f      	bne.n	800696e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	2220      	movs	r2, #32
 8006956:	4013      	ands	r3, r2
 8006958:	2b20      	cmp	r3, #32
 800695a:	d108      	bne.n	800696e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2221      	movs	r2, #33	; 0x21
 8006962:	4252      	negs	r2, r2
 8006964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	0018      	movs	r0, r3
 800696a:	f000 f915 	bl	8006b98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800696e:	46c0      	nop			; (mov r8, r8)
 8006970:	46bd      	mov	sp, r7
 8006972:	b002      	add	sp, #8
 8006974:	bd80      	pop	{r7, pc}
 8006976:	46c0      	nop			; (mov r8, r8)
 8006978:	fffffeff 	.word	0xfffffeff

0800697c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006984:	46c0      	nop			; (mov r8, r8)
 8006986:	46bd      	mov	sp, r7
 8006988:	b002      	add	sp, #8
 800698a:	bd80      	pop	{r7, pc}

0800698c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006994:	46c0      	nop			; (mov r8, r8)
 8006996:	46bd      	mov	sp, r7
 8006998:	b002      	add	sp, #8
 800699a:	bd80      	pop	{r7, pc}

0800699c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069a4:	46c0      	nop			; (mov r8, r8)
 80069a6:	46bd      	mov	sp, r7
 80069a8:	b002      	add	sp, #8
 80069aa:	bd80      	pop	{r7, pc}

080069ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069b4:	46c0      	nop			; (mov r8, r8)
 80069b6:	46bd      	mov	sp, r7
 80069b8:	b002      	add	sp, #8
 80069ba:	bd80      	pop	{r7, pc}

080069bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a34      	ldr	r2, [pc, #208]	; (8006aa0 <TIM_Base_SetConfig+0xe4>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d008      	beq.n	80069e6 <TIM_Base_SetConfig+0x2a>
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	2380      	movs	r3, #128	; 0x80
 80069d8:	05db      	lsls	r3, r3, #23
 80069da:	429a      	cmp	r2, r3
 80069dc:	d003      	beq.n	80069e6 <TIM_Base_SetConfig+0x2a>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a30      	ldr	r2, [pc, #192]	; (8006aa4 <TIM_Base_SetConfig+0xe8>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d108      	bne.n	80069f8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2270      	movs	r2, #112	; 0x70
 80069ea:	4393      	bics	r3, r2
 80069ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a29      	ldr	r2, [pc, #164]	; (8006aa0 <TIM_Base_SetConfig+0xe4>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d018      	beq.n	8006a32 <TIM_Base_SetConfig+0x76>
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	2380      	movs	r3, #128	; 0x80
 8006a04:	05db      	lsls	r3, r3, #23
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d013      	beq.n	8006a32 <TIM_Base_SetConfig+0x76>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a25      	ldr	r2, [pc, #148]	; (8006aa4 <TIM_Base_SetConfig+0xe8>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d00f      	beq.n	8006a32 <TIM_Base_SetConfig+0x76>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a24      	ldr	r2, [pc, #144]	; (8006aa8 <TIM_Base_SetConfig+0xec>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d00b      	beq.n	8006a32 <TIM_Base_SetConfig+0x76>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a23      	ldr	r2, [pc, #140]	; (8006aac <TIM_Base_SetConfig+0xf0>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d007      	beq.n	8006a32 <TIM_Base_SetConfig+0x76>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a22      	ldr	r2, [pc, #136]	; (8006ab0 <TIM_Base_SetConfig+0xf4>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d003      	beq.n	8006a32 <TIM_Base_SetConfig+0x76>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a21      	ldr	r2, [pc, #132]	; (8006ab4 <TIM_Base_SetConfig+0xf8>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d108      	bne.n	8006a44 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	4a20      	ldr	r2, [pc, #128]	; (8006ab8 <TIM_Base_SetConfig+0xfc>)
 8006a36:	4013      	ands	r3, r2
 8006a38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2280      	movs	r2, #128	; 0x80
 8006a48:	4393      	bics	r3, r2
 8006a4a:	001a      	movs	r2, r3
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	689a      	ldr	r2, [r3, #8]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a0c      	ldr	r2, [pc, #48]	; (8006aa0 <TIM_Base_SetConfig+0xe4>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d00b      	beq.n	8006a8a <TIM_Base_SetConfig+0xce>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a0d      	ldr	r2, [pc, #52]	; (8006aac <TIM_Base_SetConfig+0xf0>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d007      	beq.n	8006a8a <TIM_Base_SetConfig+0xce>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a0c      	ldr	r2, [pc, #48]	; (8006ab0 <TIM_Base_SetConfig+0xf4>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d003      	beq.n	8006a8a <TIM_Base_SetConfig+0xce>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a0b      	ldr	r2, [pc, #44]	; (8006ab4 <TIM_Base_SetConfig+0xf8>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d103      	bne.n	8006a92 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	691a      	ldr	r2, [r3, #16]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2201      	movs	r2, #1
 8006a96:	615a      	str	r2, [r3, #20]
}
 8006a98:	46c0      	nop			; (mov r8, r8)
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	b004      	add	sp, #16
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	40012c00 	.word	0x40012c00
 8006aa4:	40000400 	.word	0x40000400
 8006aa8:	40002000 	.word	0x40002000
 8006aac:	40014000 	.word	0x40014000
 8006ab0:	40014400 	.word	0x40014400
 8006ab4:	40014800 	.word	0x40014800
 8006ab8:	fffffcff 	.word	0xfffffcff

08006abc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	223c      	movs	r2, #60	; 0x3c
 8006aca:	5c9b      	ldrb	r3, [r3, r2]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d101      	bne.n	8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	e055      	b.n	8006b80 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	223c      	movs	r2, #60	; 0x3c
 8006ad8:	2101      	movs	r1, #1
 8006ada:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	223d      	movs	r2, #61	; 0x3d
 8006ae0:	2102      	movs	r1, #2
 8006ae2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a23      	ldr	r2, [pc, #140]	; (8006b88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d108      	bne.n	8006b10 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	4a22      	ldr	r2, [pc, #136]	; (8006b8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006b02:	4013      	ands	r3, r2
 8006b04:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2270      	movs	r2, #112	; 0x70
 8006b14:	4393      	bics	r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a16      	ldr	r2, [pc, #88]	; (8006b88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d00f      	beq.n	8006b54 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	2380      	movs	r3, #128	; 0x80
 8006b3a:	05db      	lsls	r3, r3, #23
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d009      	beq.n	8006b54 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a12      	ldr	r2, [pc, #72]	; (8006b90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d004      	beq.n	8006b54 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a11      	ldr	r2, [pc, #68]	; (8006b94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d10c      	bne.n	8006b6e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	2280      	movs	r2, #128	; 0x80
 8006b58:	4393      	bics	r3, r2
 8006b5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	223d      	movs	r2, #61	; 0x3d
 8006b72:	2101      	movs	r1, #1
 8006b74:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	223c      	movs	r2, #60	; 0x3c
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	0018      	movs	r0, r3
 8006b82:	46bd      	mov	sp, r7
 8006b84:	b004      	add	sp, #16
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	40012c00 	.word	0x40012c00
 8006b8c:	ff0fffff 	.word	0xff0fffff
 8006b90:	40000400 	.word	0x40000400
 8006b94:	40014000 	.word	0x40014000

08006b98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ba0:	46c0      	nop			; (mov r8, r8)
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	b002      	add	sp, #8
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bb0:	46c0      	nop			; (mov r8, r8)
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	b002      	add	sp, #8
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006bc0:	46c0      	nop			; (mov r8, r8)
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	b002      	add	sp, #8
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d101      	bne.n	8006bda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e046      	b.n	8006c68 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2288      	movs	r2, #136	; 0x88
 8006bde:	589b      	ldr	r3, [r3, r2]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d107      	bne.n	8006bf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2284      	movs	r2, #132	; 0x84
 8006be8:	2100      	movs	r1, #0
 8006bea:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	0018      	movs	r0, r3
 8006bf0:	f7fc fb8c 	bl	800330c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2288      	movs	r2, #136	; 0x88
 8006bf8:	2124      	movs	r1, #36	; 0x24
 8006bfa:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2101      	movs	r1, #1
 8006c08:	438a      	bics	r2, r1
 8006c0a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	0018      	movs	r0, r3
 8006c10:	f000 f9ee 	bl	8006ff0 <UART_SetConfig>
 8006c14:	0003      	movs	r3, r0
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d101      	bne.n	8006c1e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e024      	b.n	8006c68 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d003      	beq.n	8006c2e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	0018      	movs	r0, r3
 8006c2a:	f000 fc9f 	bl	800756c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	685a      	ldr	r2, [r3, #4]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	490d      	ldr	r1, [pc, #52]	; (8006c70 <HAL_UART_Init+0xa8>)
 8006c3a:	400a      	ands	r2, r1
 8006c3c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	689a      	ldr	r2, [r3, #8]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	212a      	movs	r1, #42	; 0x2a
 8006c4a:	438a      	bics	r2, r1
 8006c4c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2101      	movs	r1, #1
 8006c5a:	430a      	orrs	r2, r1
 8006c5c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	0018      	movs	r0, r3
 8006c62:	f000 fd37 	bl	80076d4 <UART_CheckIdleState>
 8006c66:	0003      	movs	r3, r0
}
 8006c68:	0018      	movs	r0, r3
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	b002      	add	sp, #8
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	ffffb7ff 	.word	0xffffb7ff

08006c74 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e032      	b.n	8006cec <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2288      	movs	r2, #136	; 0x88
 8006c8a:	2124      	movs	r1, #36	; 0x24
 8006c8c:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2101      	movs	r1, #1
 8006c9a:	438a      	bics	r2, r1
 8006c9c:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2200      	movs	r2, #0
 8006cac:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	0018      	movs	r0, r3
 8006cba:	f7fc fc0b 	bl	80034d4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2290      	movs	r2, #144	; 0x90
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2288      	movs	r2, #136	; 0x88
 8006cca:	2100      	movs	r1, #0
 8006ccc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	228c      	movs	r2, #140	; 0x8c
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2284      	movs	r2, #132	; 0x84
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	0018      	movs	r0, r3
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	b002      	add	sp, #8
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b08a      	sub	sp, #40	; 0x28
 8006cf8:	af02      	add	r7, sp, #8
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	603b      	str	r3, [r7, #0]
 8006d00:	1dbb      	adds	r3, r7, #6
 8006d02:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2288      	movs	r2, #136	; 0x88
 8006d08:	589b      	ldr	r3, [r3, r2]
 8006d0a:	2b20      	cmp	r3, #32
 8006d0c:	d000      	beq.n	8006d10 <HAL_UART_Transmit+0x1c>
 8006d0e:	e088      	b.n	8006e22 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d003      	beq.n	8006d1e <HAL_UART_Transmit+0x2a>
 8006d16:	1dbb      	adds	r3, r7, #6
 8006d18:	881b      	ldrh	r3, [r3, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d101      	bne.n	8006d22 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e080      	b.n	8006e24 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	689a      	ldr	r2, [r3, #8]
 8006d26:	2380      	movs	r3, #128	; 0x80
 8006d28:	015b      	lsls	r3, r3, #5
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d109      	bne.n	8006d42 <HAL_UART_Transmit+0x4e>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d105      	bne.n	8006d42 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	d001      	beq.n	8006d42 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e070      	b.n	8006e24 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2290      	movs	r2, #144	; 0x90
 8006d46:	2100      	movs	r1, #0
 8006d48:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2288      	movs	r2, #136	; 0x88
 8006d4e:	2121      	movs	r1, #33	; 0x21
 8006d50:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d52:	f7fc fd9d 	bl	8003890 <HAL_GetTick>
 8006d56:	0003      	movs	r3, r0
 8006d58:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	1dba      	adds	r2, r7, #6
 8006d5e:	2154      	movs	r1, #84	; 0x54
 8006d60:	8812      	ldrh	r2, [r2, #0]
 8006d62:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	1dba      	adds	r2, r7, #6
 8006d68:	2156      	movs	r1, #86	; 0x56
 8006d6a:	8812      	ldrh	r2, [r2, #0]
 8006d6c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	689a      	ldr	r2, [r3, #8]
 8006d72:	2380      	movs	r3, #128	; 0x80
 8006d74:	015b      	lsls	r3, r3, #5
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d108      	bne.n	8006d8c <HAL_UART_Transmit+0x98>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d104      	bne.n	8006d8c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006d82:	2300      	movs	r3, #0
 8006d84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	61bb      	str	r3, [r7, #24]
 8006d8a:	e003      	b.n	8006d94 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d90:	2300      	movs	r3, #0
 8006d92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d94:	e02c      	b.n	8006df0 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	0013      	movs	r3, r2
 8006da0:	2200      	movs	r2, #0
 8006da2:	2180      	movs	r1, #128	; 0x80
 8006da4:	f000 fce4 	bl	8007770 <UART_WaitOnFlagUntilTimeout>
 8006da8:	1e03      	subs	r3, r0, #0
 8006daa:	d001      	beq.n	8006db0 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e039      	b.n	8006e24 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d10b      	bne.n	8006dce <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	881b      	ldrh	r3, [r3, #0]
 8006dba:	001a      	movs	r2, r3
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	05d2      	lsls	r2, r2, #23
 8006dc2:	0dd2      	lsrs	r2, r2, #23
 8006dc4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	3302      	adds	r3, #2
 8006dca:	61bb      	str	r3, [r7, #24]
 8006dcc:	e007      	b.n	8006dde <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	781a      	ldrb	r2, [r3, #0]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2256      	movs	r2, #86	; 0x56
 8006de2:	5a9b      	ldrh	r3, [r3, r2]
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	3b01      	subs	r3, #1
 8006de8:	b299      	uxth	r1, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2256      	movs	r2, #86	; 0x56
 8006dee:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2256      	movs	r2, #86	; 0x56
 8006df4:	5a9b      	ldrh	r3, [r3, r2]
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1cc      	bne.n	8006d96 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006dfc:	697a      	ldr	r2, [r7, #20]
 8006dfe:	68f8      	ldr	r0, [r7, #12]
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	9300      	str	r3, [sp, #0]
 8006e04:	0013      	movs	r3, r2
 8006e06:	2200      	movs	r2, #0
 8006e08:	2140      	movs	r1, #64	; 0x40
 8006e0a:	f000 fcb1 	bl	8007770 <UART_WaitOnFlagUntilTimeout>
 8006e0e:	1e03      	subs	r3, r0, #0
 8006e10:	d001      	beq.n	8006e16 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8006e12:	2303      	movs	r3, #3
 8006e14:	e006      	b.n	8006e24 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2288      	movs	r2, #136	; 0x88
 8006e1a:	2120      	movs	r1, #32
 8006e1c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	e000      	b.n	8006e24 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8006e22:	2302      	movs	r3, #2
  }
}
 8006e24:	0018      	movs	r0, r3
 8006e26:	46bd      	mov	sp, r7
 8006e28:	b008      	add	sp, #32
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b08a      	sub	sp, #40	; 0x28
 8006e30:	af02      	add	r7, sp, #8
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	603b      	str	r3, [r7, #0]
 8006e38:	1dbb      	adds	r3, r7, #6
 8006e3a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	228c      	movs	r2, #140	; 0x8c
 8006e40:	589b      	ldr	r3, [r3, r2]
 8006e42:	2b20      	cmp	r3, #32
 8006e44:	d000      	beq.n	8006e48 <HAL_UART_Receive+0x1c>
 8006e46:	e0cc      	b.n	8006fe2 <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d003      	beq.n	8006e56 <HAL_UART_Receive+0x2a>
 8006e4e:	1dbb      	adds	r3, r7, #6
 8006e50:	881b      	ldrh	r3, [r3, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d101      	bne.n	8006e5a <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e0c4      	b.n	8006fe4 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	689a      	ldr	r2, [r3, #8]
 8006e5e:	2380      	movs	r3, #128	; 0x80
 8006e60:	015b      	lsls	r3, r3, #5
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d109      	bne.n	8006e7a <HAL_UART_Receive+0x4e>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d105      	bne.n	8006e7a <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	2201      	movs	r2, #1
 8006e72:	4013      	ands	r3, r2
 8006e74:	d001      	beq.n	8006e7a <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e0b4      	b.n	8006fe4 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2290      	movs	r2, #144	; 0x90
 8006e7e:	2100      	movs	r1, #0
 8006e80:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	228c      	movs	r2, #140	; 0x8c
 8006e86:	2122      	movs	r1, #34	; 0x22
 8006e88:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e90:	f7fc fcfe 	bl	8003890 <HAL_GetTick>
 8006e94:	0003      	movs	r3, r0
 8006e96:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	1dba      	adds	r2, r7, #6
 8006e9c:	215c      	movs	r1, #92	; 0x5c
 8006e9e:	8812      	ldrh	r2, [r2, #0]
 8006ea0:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	1dba      	adds	r2, r7, #6
 8006ea6:	215e      	movs	r1, #94	; 0x5e
 8006ea8:	8812      	ldrh	r2, [r2, #0]
 8006eaa:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	689a      	ldr	r2, [r3, #8]
 8006eb0:	2380      	movs	r3, #128	; 0x80
 8006eb2:	015b      	lsls	r3, r3, #5
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d10d      	bne.n	8006ed4 <HAL_UART_Receive+0xa8>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d104      	bne.n	8006eca <HAL_UART_Receive+0x9e>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2260      	movs	r2, #96	; 0x60
 8006ec4:	4949      	ldr	r1, [pc, #292]	; (8006fec <HAL_UART_Receive+0x1c0>)
 8006ec6:	5299      	strh	r1, [r3, r2]
 8006ec8:	e02e      	b.n	8006f28 <HAL_UART_Receive+0xfc>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2260      	movs	r2, #96	; 0x60
 8006ece:	21ff      	movs	r1, #255	; 0xff
 8006ed0:	5299      	strh	r1, [r3, r2]
 8006ed2:	e029      	b.n	8006f28 <HAL_UART_Receive+0xfc>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d10d      	bne.n	8006ef8 <HAL_UART_Receive+0xcc>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d104      	bne.n	8006eee <HAL_UART_Receive+0xc2>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2260      	movs	r2, #96	; 0x60
 8006ee8:	21ff      	movs	r1, #255	; 0xff
 8006eea:	5299      	strh	r1, [r3, r2]
 8006eec:	e01c      	b.n	8006f28 <HAL_UART_Receive+0xfc>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2260      	movs	r2, #96	; 0x60
 8006ef2:	217f      	movs	r1, #127	; 0x7f
 8006ef4:	5299      	strh	r1, [r3, r2]
 8006ef6:	e017      	b.n	8006f28 <HAL_UART_Receive+0xfc>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	689a      	ldr	r2, [r3, #8]
 8006efc:	2380      	movs	r3, #128	; 0x80
 8006efe:	055b      	lsls	r3, r3, #21
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d10d      	bne.n	8006f20 <HAL_UART_Receive+0xf4>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d104      	bne.n	8006f16 <HAL_UART_Receive+0xea>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2260      	movs	r2, #96	; 0x60
 8006f10:	217f      	movs	r1, #127	; 0x7f
 8006f12:	5299      	strh	r1, [r3, r2]
 8006f14:	e008      	b.n	8006f28 <HAL_UART_Receive+0xfc>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2260      	movs	r2, #96	; 0x60
 8006f1a:	213f      	movs	r1, #63	; 0x3f
 8006f1c:	5299      	strh	r1, [r3, r2]
 8006f1e:	e003      	b.n	8006f28 <HAL_UART_Receive+0xfc>
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2260      	movs	r2, #96	; 0x60
 8006f24:	2100      	movs	r1, #0
 8006f26:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8006f28:	2312      	movs	r3, #18
 8006f2a:	18fb      	adds	r3, r7, r3
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	2160      	movs	r1, #96	; 0x60
 8006f30:	5a52      	ldrh	r2, [r2, r1]
 8006f32:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	689a      	ldr	r2, [r3, #8]
 8006f38:	2380      	movs	r3, #128	; 0x80
 8006f3a:	015b      	lsls	r3, r3, #5
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d108      	bne.n	8006f52 <HAL_UART_Receive+0x126>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d104      	bne.n	8006f52 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	61bb      	str	r3, [r7, #24]
 8006f50:	e003      	b.n	8006f5a <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f56:	2300      	movs	r3, #0
 8006f58:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006f5a:	e036      	b.n	8006fca <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	9300      	str	r3, [sp, #0]
 8006f64:	0013      	movs	r3, r2
 8006f66:	2200      	movs	r2, #0
 8006f68:	2120      	movs	r1, #32
 8006f6a:	f000 fc01 	bl	8007770 <UART_WaitOnFlagUntilTimeout>
 8006f6e:	1e03      	subs	r3, r0, #0
 8006f70:	d001      	beq.n	8006f76 <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e036      	b.n	8006fe4 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10e      	bne.n	8006f9a <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	2212      	movs	r2, #18
 8006f86:	18ba      	adds	r2, r7, r2
 8006f88:	8812      	ldrh	r2, [r2, #0]
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	3302      	adds	r3, #2
 8006f96:	61bb      	str	r3, [r7, #24]
 8006f98:	e00e      	b.n	8006fb8 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	2212      	movs	r2, #18
 8006fa4:	18ba      	adds	r2, r7, r2
 8006fa6:	8812      	ldrh	r2, [r2, #0]
 8006fa8:	b2d2      	uxtb	r2, r2
 8006faa:	4013      	ands	r3, r2
 8006fac:	b2da      	uxtb	r2, r3
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	225e      	movs	r2, #94	; 0x5e
 8006fbc:	5a9b      	ldrh	r3, [r3, r2]
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	b299      	uxth	r1, r3
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	225e      	movs	r2, #94	; 0x5e
 8006fc8:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	225e      	movs	r2, #94	; 0x5e
 8006fce:	5a9b      	ldrh	r3, [r3, r2]
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1c2      	bne.n	8006f5c <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	228c      	movs	r2, #140	; 0x8c
 8006fda:	2120      	movs	r1, #32
 8006fdc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	e000      	b.n	8006fe4 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 8006fe2:	2302      	movs	r3, #2
  }
}
 8006fe4:	0018      	movs	r0, r3
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	b008      	add	sp, #32
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	000001ff 	.word	0x000001ff

08006ff0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ff0:	b5b0      	push	{r4, r5, r7, lr}
 8006ff2:	b090      	sub	sp, #64	; 0x40
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ff8:	231a      	movs	r3, #26
 8006ffa:	2220      	movs	r2, #32
 8006ffc:	189b      	adds	r3, r3, r2
 8006ffe:	19db      	adds	r3, r3, r7
 8007000:	2200      	movs	r2, #0
 8007002:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	689a      	ldr	r2, [r3, #8]
 8007008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	431a      	orrs	r2, r3
 800700e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	431a      	orrs	r2, r3
 8007014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007016:	69db      	ldr	r3, [r3, #28]
 8007018:	4313      	orrs	r3, r2
 800701a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800701c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4aaf      	ldr	r2, [pc, #700]	; (80072e0 <UART_SetConfig+0x2f0>)
 8007024:	4013      	ands	r3, r2
 8007026:	0019      	movs	r1, r3
 8007028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800702e:	430b      	orrs	r3, r1
 8007030:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	4aaa      	ldr	r2, [pc, #680]	; (80072e4 <UART_SetConfig+0x2f4>)
 800703a:	4013      	ands	r3, r2
 800703c:	0018      	movs	r0, r3
 800703e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007040:	68d9      	ldr	r1, [r3, #12]
 8007042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	0003      	movs	r3, r0
 8007048:	430b      	orrs	r3, r1
 800704a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800704c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4aa4      	ldr	r2, [pc, #656]	; (80072e8 <UART_SetConfig+0x2f8>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d004      	beq.n	8007066 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800705c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705e:	6a1b      	ldr	r3, [r3, #32]
 8007060:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007062:	4313      	orrs	r3, r2
 8007064:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	4a9f      	ldr	r2, [pc, #636]	; (80072ec <UART_SetConfig+0x2fc>)
 800706e:	4013      	ands	r3, r2
 8007070:	0019      	movs	r1, r3
 8007072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007078:	430b      	orrs	r3, r1
 800707a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800707c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007082:	220f      	movs	r2, #15
 8007084:	4393      	bics	r3, r2
 8007086:	0018      	movs	r0, r3
 8007088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800708c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	0003      	movs	r3, r0
 8007092:	430b      	orrs	r3, r1
 8007094:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a95      	ldr	r2, [pc, #596]	; (80072f0 <UART_SetConfig+0x300>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d131      	bne.n	8007104 <UART_SetConfig+0x114>
 80070a0:	4b94      	ldr	r3, [pc, #592]	; (80072f4 <UART_SetConfig+0x304>)
 80070a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070a4:	2203      	movs	r2, #3
 80070a6:	4013      	ands	r3, r2
 80070a8:	2b03      	cmp	r3, #3
 80070aa:	d01d      	beq.n	80070e8 <UART_SetConfig+0xf8>
 80070ac:	d823      	bhi.n	80070f6 <UART_SetConfig+0x106>
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d00c      	beq.n	80070cc <UART_SetConfig+0xdc>
 80070b2:	d820      	bhi.n	80070f6 <UART_SetConfig+0x106>
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d002      	beq.n	80070be <UART_SetConfig+0xce>
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d00e      	beq.n	80070da <UART_SetConfig+0xea>
 80070bc:	e01b      	b.n	80070f6 <UART_SetConfig+0x106>
 80070be:	231b      	movs	r3, #27
 80070c0:	2220      	movs	r2, #32
 80070c2:	189b      	adds	r3, r3, r2
 80070c4:	19db      	adds	r3, r3, r7
 80070c6:	2200      	movs	r2, #0
 80070c8:	701a      	strb	r2, [r3, #0]
 80070ca:	e0b4      	b.n	8007236 <UART_SetConfig+0x246>
 80070cc:	231b      	movs	r3, #27
 80070ce:	2220      	movs	r2, #32
 80070d0:	189b      	adds	r3, r3, r2
 80070d2:	19db      	adds	r3, r3, r7
 80070d4:	2202      	movs	r2, #2
 80070d6:	701a      	strb	r2, [r3, #0]
 80070d8:	e0ad      	b.n	8007236 <UART_SetConfig+0x246>
 80070da:	231b      	movs	r3, #27
 80070dc:	2220      	movs	r2, #32
 80070de:	189b      	adds	r3, r3, r2
 80070e0:	19db      	adds	r3, r3, r7
 80070e2:	2204      	movs	r2, #4
 80070e4:	701a      	strb	r2, [r3, #0]
 80070e6:	e0a6      	b.n	8007236 <UART_SetConfig+0x246>
 80070e8:	231b      	movs	r3, #27
 80070ea:	2220      	movs	r2, #32
 80070ec:	189b      	adds	r3, r3, r2
 80070ee:	19db      	adds	r3, r3, r7
 80070f0:	2208      	movs	r2, #8
 80070f2:	701a      	strb	r2, [r3, #0]
 80070f4:	e09f      	b.n	8007236 <UART_SetConfig+0x246>
 80070f6:	231b      	movs	r3, #27
 80070f8:	2220      	movs	r2, #32
 80070fa:	189b      	adds	r3, r3, r2
 80070fc:	19db      	adds	r3, r3, r7
 80070fe:	2210      	movs	r2, #16
 8007100:	701a      	strb	r2, [r3, #0]
 8007102:	e098      	b.n	8007236 <UART_SetConfig+0x246>
 8007104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a7b      	ldr	r2, [pc, #492]	; (80072f8 <UART_SetConfig+0x308>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d131      	bne.n	8007172 <UART_SetConfig+0x182>
 800710e:	4b79      	ldr	r3, [pc, #484]	; (80072f4 <UART_SetConfig+0x304>)
 8007110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007112:	220c      	movs	r2, #12
 8007114:	4013      	ands	r3, r2
 8007116:	2b0c      	cmp	r3, #12
 8007118:	d01d      	beq.n	8007156 <UART_SetConfig+0x166>
 800711a:	d823      	bhi.n	8007164 <UART_SetConfig+0x174>
 800711c:	2b08      	cmp	r3, #8
 800711e:	d00c      	beq.n	800713a <UART_SetConfig+0x14a>
 8007120:	d820      	bhi.n	8007164 <UART_SetConfig+0x174>
 8007122:	2b00      	cmp	r3, #0
 8007124:	d002      	beq.n	800712c <UART_SetConfig+0x13c>
 8007126:	2b04      	cmp	r3, #4
 8007128:	d00e      	beq.n	8007148 <UART_SetConfig+0x158>
 800712a:	e01b      	b.n	8007164 <UART_SetConfig+0x174>
 800712c:	231b      	movs	r3, #27
 800712e:	2220      	movs	r2, #32
 8007130:	189b      	adds	r3, r3, r2
 8007132:	19db      	adds	r3, r3, r7
 8007134:	2200      	movs	r2, #0
 8007136:	701a      	strb	r2, [r3, #0]
 8007138:	e07d      	b.n	8007236 <UART_SetConfig+0x246>
 800713a:	231b      	movs	r3, #27
 800713c:	2220      	movs	r2, #32
 800713e:	189b      	adds	r3, r3, r2
 8007140:	19db      	adds	r3, r3, r7
 8007142:	2202      	movs	r2, #2
 8007144:	701a      	strb	r2, [r3, #0]
 8007146:	e076      	b.n	8007236 <UART_SetConfig+0x246>
 8007148:	231b      	movs	r3, #27
 800714a:	2220      	movs	r2, #32
 800714c:	189b      	adds	r3, r3, r2
 800714e:	19db      	adds	r3, r3, r7
 8007150:	2204      	movs	r2, #4
 8007152:	701a      	strb	r2, [r3, #0]
 8007154:	e06f      	b.n	8007236 <UART_SetConfig+0x246>
 8007156:	231b      	movs	r3, #27
 8007158:	2220      	movs	r2, #32
 800715a:	189b      	adds	r3, r3, r2
 800715c:	19db      	adds	r3, r3, r7
 800715e:	2208      	movs	r2, #8
 8007160:	701a      	strb	r2, [r3, #0]
 8007162:	e068      	b.n	8007236 <UART_SetConfig+0x246>
 8007164:	231b      	movs	r3, #27
 8007166:	2220      	movs	r2, #32
 8007168:	189b      	adds	r3, r3, r2
 800716a:	19db      	adds	r3, r3, r7
 800716c:	2210      	movs	r2, #16
 800716e:	701a      	strb	r2, [r3, #0]
 8007170:	e061      	b.n	8007236 <UART_SetConfig+0x246>
 8007172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a61      	ldr	r2, [pc, #388]	; (80072fc <UART_SetConfig+0x30c>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d106      	bne.n	800718a <UART_SetConfig+0x19a>
 800717c:	231b      	movs	r3, #27
 800717e:	2220      	movs	r2, #32
 8007180:	189b      	adds	r3, r3, r2
 8007182:	19db      	adds	r3, r3, r7
 8007184:	2200      	movs	r2, #0
 8007186:	701a      	strb	r2, [r3, #0]
 8007188:	e055      	b.n	8007236 <UART_SetConfig+0x246>
 800718a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a5c      	ldr	r2, [pc, #368]	; (8007300 <UART_SetConfig+0x310>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d106      	bne.n	80071a2 <UART_SetConfig+0x1b2>
 8007194:	231b      	movs	r3, #27
 8007196:	2220      	movs	r2, #32
 8007198:	189b      	adds	r3, r3, r2
 800719a:	19db      	adds	r3, r3, r7
 800719c:	2200      	movs	r2, #0
 800719e:	701a      	strb	r2, [r3, #0]
 80071a0:	e049      	b.n	8007236 <UART_SetConfig+0x246>
 80071a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a50      	ldr	r2, [pc, #320]	; (80072e8 <UART_SetConfig+0x2f8>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d13e      	bne.n	800722a <UART_SetConfig+0x23a>
 80071ac:	4b51      	ldr	r3, [pc, #324]	; (80072f4 <UART_SetConfig+0x304>)
 80071ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80071b0:	23c0      	movs	r3, #192	; 0xc0
 80071b2:	011b      	lsls	r3, r3, #4
 80071b4:	4013      	ands	r3, r2
 80071b6:	22c0      	movs	r2, #192	; 0xc0
 80071b8:	0112      	lsls	r2, r2, #4
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d027      	beq.n	800720e <UART_SetConfig+0x21e>
 80071be:	22c0      	movs	r2, #192	; 0xc0
 80071c0:	0112      	lsls	r2, r2, #4
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d82a      	bhi.n	800721c <UART_SetConfig+0x22c>
 80071c6:	2280      	movs	r2, #128	; 0x80
 80071c8:	0112      	lsls	r2, r2, #4
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d011      	beq.n	80071f2 <UART_SetConfig+0x202>
 80071ce:	2280      	movs	r2, #128	; 0x80
 80071d0:	0112      	lsls	r2, r2, #4
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d822      	bhi.n	800721c <UART_SetConfig+0x22c>
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d004      	beq.n	80071e4 <UART_SetConfig+0x1f4>
 80071da:	2280      	movs	r2, #128	; 0x80
 80071dc:	00d2      	lsls	r2, r2, #3
 80071de:	4293      	cmp	r3, r2
 80071e0:	d00e      	beq.n	8007200 <UART_SetConfig+0x210>
 80071e2:	e01b      	b.n	800721c <UART_SetConfig+0x22c>
 80071e4:	231b      	movs	r3, #27
 80071e6:	2220      	movs	r2, #32
 80071e8:	189b      	adds	r3, r3, r2
 80071ea:	19db      	adds	r3, r3, r7
 80071ec:	2200      	movs	r2, #0
 80071ee:	701a      	strb	r2, [r3, #0]
 80071f0:	e021      	b.n	8007236 <UART_SetConfig+0x246>
 80071f2:	231b      	movs	r3, #27
 80071f4:	2220      	movs	r2, #32
 80071f6:	189b      	adds	r3, r3, r2
 80071f8:	19db      	adds	r3, r3, r7
 80071fa:	2202      	movs	r2, #2
 80071fc:	701a      	strb	r2, [r3, #0]
 80071fe:	e01a      	b.n	8007236 <UART_SetConfig+0x246>
 8007200:	231b      	movs	r3, #27
 8007202:	2220      	movs	r2, #32
 8007204:	189b      	adds	r3, r3, r2
 8007206:	19db      	adds	r3, r3, r7
 8007208:	2204      	movs	r2, #4
 800720a:	701a      	strb	r2, [r3, #0]
 800720c:	e013      	b.n	8007236 <UART_SetConfig+0x246>
 800720e:	231b      	movs	r3, #27
 8007210:	2220      	movs	r2, #32
 8007212:	189b      	adds	r3, r3, r2
 8007214:	19db      	adds	r3, r3, r7
 8007216:	2208      	movs	r2, #8
 8007218:	701a      	strb	r2, [r3, #0]
 800721a:	e00c      	b.n	8007236 <UART_SetConfig+0x246>
 800721c:	231b      	movs	r3, #27
 800721e:	2220      	movs	r2, #32
 8007220:	189b      	adds	r3, r3, r2
 8007222:	19db      	adds	r3, r3, r7
 8007224:	2210      	movs	r2, #16
 8007226:	701a      	strb	r2, [r3, #0]
 8007228:	e005      	b.n	8007236 <UART_SetConfig+0x246>
 800722a:	231b      	movs	r3, #27
 800722c:	2220      	movs	r2, #32
 800722e:	189b      	adds	r3, r3, r2
 8007230:	19db      	adds	r3, r3, r7
 8007232:	2210      	movs	r2, #16
 8007234:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a2b      	ldr	r2, [pc, #172]	; (80072e8 <UART_SetConfig+0x2f8>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d000      	beq.n	8007242 <UART_SetConfig+0x252>
 8007240:	e0a9      	b.n	8007396 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007242:	231b      	movs	r3, #27
 8007244:	2220      	movs	r2, #32
 8007246:	189b      	adds	r3, r3, r2
 8007248:	19db      	adds	r3, r3, r7
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	2b08      	cmp	r3, #8
 800724e:	d015      	beq.n	800727c <UART_SetConfig+0x28c>
 8007250:	dc18      	bgt.n	8007284 <UART_SetConfig+0x294>
 8007252:	2b04      	cmp	r3, #4
 8007254:	d00d      	beq.n	8007272 <UART_SetConfig+0x282>
 8007256:	dc15      	bgt.n	8007284 <UART_SetConfig+0x294>
 8007258:	2b00      	cmp	r3, #0
 800725a:	d002      	beq.n	8007262 <UART_SetConfig+0x272>
 800725c:	2b02      	cmp	r3, #2
 800725e:	d005      	beq.n	800726c <UART_SetConfig+0x27c>
 8007260:	e010      	b.n	8007284 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007262:	f7fd fb9f 	bl	80049a4 <HAL_RCC_GetPCLK1Freq>
 8007266:	0003      	movs	r3, r0
 8007268:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800726a:	e014      	b.n	8007296 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800726c:	4b25      	ldr	r3, [pc, #148]	; (8007304 <UART_SetConfig+0x314>)
 800726e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007270:	e011      	b.n	8007296 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007272:	f7fd fb0b 	bl	800488c <HAL_RCC_GetSysClockFreq>
 8007276:	0003      	movs	r3, r0
 8007278:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800727a:	e00c      	b.n	8007296 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800727c:	2380      	movs	r3, #128	; 0x80
 800727e:	021b      	lsls	r3, r3, #8
 8007280:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007282:	e008      	b.n	8007296 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8007284:	2300      	movs	r3, #0
 8007286:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007288:	231a      	movs	r3, #26
 800728a:	2220      	movs	r2, #32
 800728c:	189b      	adds	r3, r3, r2
 800728e:	19db      	adds	r3, r3, r7
 8007290:	2201      	movs	r2, #1
 8007292:	701a      	strb	r2, [r3, #0]
        break;
 8007294:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007298:	2b00      	cmp	r3, #0
 800729a:	d100      	bne.n	800729e <UART_SetConfig+0x2ae>
 800729c:	e14b      	b.n	8007536 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800729e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072a2:	4b19      	ldr	r3, [pc, #100]	; (8007308 <UART_SetConfig+0x318>)
 80072a4:	0052      	lsls	r2, r2, #1
 80072a6:	5ad3      	ldrh	r3, [r2, r3]
 80072a8:	0019      	movs	r1, r3
 80072aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80072ac:	f7f8 ff46 	bl	800013c <__udivsi3>
 80072b0:	0003      	movs	r3, r0
 80072b2:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b6:	685a      	ldr	r2, [r3, #4]
 80072b8:	0013      	movs	r3, r2
 80072ba:	005b      	lsls	r3, r3, #1
 80072bc:	189b      	adds	r3, r3, r2
 80072be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d305      	bcc.n	80072d0 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80072c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d91d      	bls.n	800730c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80072d0:	231a      	movs	r3, #26
 80072d2:	2220      	movs	r2, #32
 80072d4:	189b      	adds	r3, r3, r2
 80072d6:	19db      	adds	r3, r3, r7
 80072d8:	2201      	movs	r2, #1
 80072da:	701a      	strb	r2, [r3, #0]
 80072dc:	e12b      	b.n	8007536 <UART_SetConfig+0x546>
 80072de:	46c0      	nop			; (mov r8, r8)
 80072e0:	cfff69f3 	.word	0xcfff69f3
 80072e4:	ffffcfff 	.word	0xffffcfff
 80072e8:	40008000 	.word	0x40008000
 80072ec:	11fff4ff 	.word	0x11fff4ff
 80072f0:	40013800 	.word	0x40013800
 80072f4:	40021000 	.word	0x40021000
 80072f8:	40004400 	.word	0x40004400
 80072fc:	40004800 	.word	0x40004800
 8007300:	40004c00 	.word	0x40004c00
 8007304:	00f42400 	.word	0x00f42400
 8007308:	08013f00 	.word	0x08013f00
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800730c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800730e:	61bb      	str	r3, [r7, #24]
 8007310:	2300      	movs	r3, #0
 8007312:	61fb      	str	r3, [r7, #28]
 8007314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007316:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007318:	4b92      	ldr	r3, [pc, #584]	; (8007564 <UART_SetConfig+0x574>)
 800731a:	0052      	lsls	r2, r2, #1
 800731c:	5ad3      	ldrh	r3, [r2, r3]
 800731e:	613b      	str	r3, [r7, #16]
 8007320:	2300      	movs	r3, #0
 8007322:	617b      	str	r3, [r7, #20]
 8007324:	693a      	ldr	r2, [r7, #16]
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	69b8      	ldr	r0, [r7, #24]
 800732a:	69f9      	ldr	r1, [r7, #28]
 800732c:	f7f9 f8ba 	bl	80004a4 <__aeabi_uldivmod>
 8007330:	0002      	movs	r2, r0
 8007332:	000b      	movs	r3, r1
 8007334:	0e11      	lsrs	r1, r2, #24
 8007336:	021d      	lsls	r5, r3, #8
 8007338:	430d      	orrs	r5, r1
 800733a:	0214      	lsls	r4, r2, #8
 800733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	085b      	lsrs	r3, r3, #1
 8007342:	60bb      	str	r3, [r7, #8]
 8007344:	2300      	movs	r3, #0
 8007346:	60fb      	str	r3, [r7, #12]
 8007348:	68b8      	ldr	r0, [r7, #8]
 800734a:	68f9      	ldr	r1, [r7, #12]
 800734c:	1900      	adds	r0, r0, r4
 800734e:	4169      	adcs	r1, r5
 8007350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	603b      	str	r3, [r7, #0]
 8007356:	2300      	movs	r3, #0
 8007358:	607b      	str	r3, [r7, #4]
 800735a:	683a      	ldr	r2, [r7, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f7f9 f8a1 	bl	80004a4 <__aeabi_uldivmod>
 8007362:	0002      	movs	r2, r0
 8007364:	000b      	movs	r3, r1
 8007366:	0013      	movs	r3, r2
 8007368:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800736a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800736c:	23c0      	movs	r3, #192	; 0xc0
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	429a      	cmp	r2, r3
 8007372:	d309      	bcc.n	8007388 <UART_SetConfig+0x398>
 8007374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007376:	2380      	movs	r3, #128	; 0x80
 8007378:	035b      	lsls	r3, r3, #13
 800737a:	429a      	cmp	r2, r3
 800737c:	d204      	bcs.n	8007388 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007384:	60da      	str	r2, [r3, #12]
 8007386:	e0d6      	b.n	8007536 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8007388:	231a      	movs	r3, #26
 800738a:	2220      	movs	r2, #32
 800738c:	189b      	adds	r3, r3, r2
 800738e:	19db      	adds	r3, r3, r7
 8007390:	2201      	movs	r2, #1
 8007392:	701a      	strb	r2, [r3, #0]
 8007394:	e0cf      	b.n	8007536 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007398:	69da      	ldr	r2, [r3, #28]
 800739a:	2380      	movs	r3, #128	; 0x80
 800739c:	021b      	lsls	r3, r3, #8
 800739e:	429a      	cmp	r2, r3
 80073a0:	d000      	beq.n	80073a4 <UART_SetConfig+0x3b4>
 80073a2:	e070      	b.n	8007486 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80073a4:	231b      	movs	r3, #27
 80073a6:	2220      	movs	r2, #32
 80073a8:	189b      	adds	r3, r3, r2
 80073aa:	19db      	adds	r3, r3, r7
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	2b08      	cmp	r3, #8
 80073b0:	d015      	beq.n	80073de <UART_SetConfig+0x3ee>
 80073b2:	dc18      	bgt.n	80073e6 <UART_SetConfig+0x3f6>
 80073b4:	2b04      	cmp	r3, #4
 80073b6:	d00d      	beq.n	80073d4 <UART_SetConfig+0x3e4>
 80073b8:	dc15      	bgt.n	80073e6 <UART_SetConfig+0x3f6>
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d002      	beq.n	80073c4 <UART_SetConfig+0x3d4>
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d005      	beq.n	80073ce <UART_SetConfig+0x3de>
 80073c2:	e010      	b.n	80073e6 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073c4:	f7fd faee 	bl	80049a4 <HAL_RCC_GetPCLK1Freq>
 80073c8:	0003      	movs	r3, r0
 80073ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073cc:	e014      	b.n	80073f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073ce:	4b66      	ldr	r3, [pc, #408]	; (8007568 <UART_SetConfig+0x578>)
 80073d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073d2:	e011      	b.n	80073f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073d4:	f7fd fa5a 	bl	800488c <HAL_RCC_GetSysClockFreq>
 80073d8:	0003      	movs	r3, r0
 80073da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073dc:	e00c      	b.n	80073f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073de:	2380      	movs	r3, #128	; 0x80
 80073e0:	021b      	lsls	r3, r3, #8
 80073e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073e4:	e008      	b.n	80073f8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80073e6:	2300      	movs	r3, #0
 80073e8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80073ea:	231a      	movs	r3, #26
 80073ec:	2220      	movs	r2, #32
 80073ee:	189b      	adds	r3, r3, r2
 80073f0:	19db      	adds	r3, r3, r7
 80073f2:	2201      	movs	r2, #1
 80073f4:	701a      	strb	r2, [r3, #0]
        break;
 80073f6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d100      	bne.n	8007400 <UART_SetConfig+0x410>
 80073fe:	e09a      	b.n	8007536 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007402:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007404:	4b57      	ldr	r3, [pc, #348]	; (8007564 <UART_SetConfig+0x574>)
 8007406:	0052      	lsls	r2, r2, #1
 8007408:	5ad3      	ldrh	r3, [r2, r3]
 800740a:	0019      	movs	r1, r3
 800740c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800740e:	f7f8 fe95 	bl	800013c <__udivsi3>
 8007412:	0003      	movs	r3, r0
 8007414:	005a      	lsls	r2, r3, #1
 8007416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	085b      	lsrs	r3, r3, #1
 800741c:	18d2      	adds	r2, r2, r3
 800741e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	0019      	movs	r1, r3
 8007424:	0010      	movs	r0, r2
 8007426:	f7f8 fe89 	bl	800013c <__udivsi3>
 800742a:	0003      	movs	r3, r0
 800742c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800742e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007430:	2b0f      	cmp	r3, #15
 8007432:	d921      	bls.n	8007478 <UART_SetConfig+0x488>
 8007434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007436:	2380      	movs	r3, #128	; 0x80
 8007438:	025b      	lsls	r3, r3, #9
 800743a:	429a      	cmp	r2, r3
 800743c:	d21c      	bcs.n	8007478 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800743e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007440:	b29a      	uxth	r2, r3
 8007442:	200e      	movs	r0, #14
 8007444:	2420      	movs	r4, #32
 8007446:	1903      	adds	r3, r0, r4
 8007448:	19db      	adds	r3, r3, r7
 800744a:	210f      	movs	r1, #15
 800744c:	438a      	bics	r2, r1
 800744e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007452:	085b      	lsrs	r3, r3, #1
 8007454:	b29b      	uxth	r3, r3
 8007456:	2207      	movs	r2, #7
 8007458:	4013      	ands	r3, r2
 800745a:	b299      	uxth	r1, r3
 800745c:	1903      	adds	r3, r0, r4
 800745e:	19db      	adds	r3, r3, r7
 8007460:	1902      	adds	r2, r0, r4
 8007462:	19d2      	adds	r2, r2, r7
 8007464:	8812      	ldrh	r2, [r2, #0]
 8007466:	430a      	orrs	r2, r1
 8007468:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800746a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	1902      	adds	r2, r0, r4
 8007470:	19d2      	adds	r2, r2, r7
 8007472:	8812      	ldrh	r2, [r2, #0]
 8007474:	60da      	str	r2, [r3, #12]
 8007476:	e05e      	b.n	8007536 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8007478:	231a      	movs	r3, #26
 800747a:	2220      	movs	r2, #32
 800747c:	189b      	adds	r3, r3, r2
 800747e:	19db      	adds	r3, r3, r7
 8007480:	2201      	movs	r2, #1
 8007482:	701a      	strb	r2, [r3, #0]
 8007484:	e057      	b.n	8007536 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007486:	231b      	movs	r3, #27
 8007488:	2220      	movs	r2, #32
 800748a:	189b      	adds	r3, r3, r2
 800748c:	19db      	adds	r3, r3, r7
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	2b08      	cmp	r3, #8
 8007492:	d015      	beq.n	80074c0 <UART_SetConfig+0x4d0>
 8007494:	dc18      	bgt.n	80074c8 <UART_SetConfig+0x4d8>
 8007496:	2b04      	cmp	r3, #4
 8007498:	d00d      	beq.n	80074b6 <UART_SetConfig+0x4c6>
 800749a:	dc15      	bgt.n	80074c8 <UART_SetConfig+0x4d8>
 800749c:	2b00      	cmp	r3, #0
 800749e:	d002      	beq.n	80074a6 <UART_SetConfig+0x4b6>
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d005      	beq.n	80074b0 <UART_SetConfig+0x4c0>
 80074a4:	e010      	b.n	80074c8 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074a6:	f7fd fa7d 	bl	80049a4 <HAL_RCC_GetPCLK1Freq>
 80074aa:	0003      	movs	r3, r0
 80074ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074ae:	e014      	b.n	80074da <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074b0:	4b2d      	ldr	r3, [pc, #180]	; (8007568 <UART_SetConfig+0x578>)
 80074b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074b4:	e011      	b.n	80074da <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074b6:	f7fd f9e9 	bl	800488c <HAL_RCC_GetSysClockFreq>
 80074ba:	0003      	movs	r3, r0
 80074bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074be:	e00c      	b.n	80074da <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074c0:	2380      	movs	r3, #128	; 0x80
 80074c2:	021b      	lsls	r3, r3, #8
 80074c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074c6:	e008      	b.n	80074da <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80074c8:	2300      	movs	r3, #0
 80074ca:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80074cc:	231a      	movs	r3, #26
 80074ce:	2220      	movs	r2, #32
 80074d0:	189b      	adds	r3, r3, r2
 80074d2:	19db      	adds	r3, r3, r7
 80074d4:	2201      	movs	r2, #1
 80074d6:	701a      	strb	r2, [r3, #0]
        break;
 80074d8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80074da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d02a      	beq.n	8007536 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074e4:	4b1f      	ldr	r3, [pc, #124]	; (8007564 <UART_SetConfig+0x574>)
 80074e6:	0052      	lsls	r2, r2, #1
 80074e8:	5ad3      	ldrh	r3, [r2, r3]
 80074ea:	0019      	movs	r1, r3
 80074ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80074ee:	f7f8 fe25 	bl	800013c <__udivsi3>
 80074f2:	0003      	movs	r3, r0
 80074f4:	001a      	movs	r2, r3
 80074f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	085b      	lsrs	r3, r3, #1
 80074fc:	18d2      	adds	r2, r2, r3
 80074fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	0019      	movs	r1, r3
 8007504:	0010      	movs	r0, r2
 8007506:	f7f8 fe19 	bl	800013c <__udivsi3>
 800750a:	0003      	movs	r3, r0
 800750c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007510:	2b0f      	cmp	r3, #15
 8007512:	d90a      	bls.n	800752a <UART_SetConfig+0x53a>
 8007514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007516:	2380      	movs	r3, #128	; 0x80
 8007518:	025b      	lsls	r3, r3, #9
 800751a:	429a      	cmp	r2, r3
 800751c:	d205      	bcs.n	800752a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800751e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007520:	b29a      	uxth	r2, r3
 8007522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	60da      	str	r2, [r3, #12]
 8007528:	e005      	b.n	8007536 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800752a:	231a      	movs	r3, #26
 800752c:	2220      	movs	r2, #32
 800752e:	189b      	adds	r3, r3, r2
 8007530:	19db      	adds	r3, r3, r7
 8007532:	2201      	movs	r2, #1
 8007534:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007538:	226a      	movs	r2, #106	; 0x6a
 800753a:	2101      	movs	r1, #1
 800753c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800753e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007540:	2268      	movs	r2, #104	; 0x68
 8007542:	2101      	movs	r1, #1
 8007544:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007548:	2200      	movs	r2, #0
 800754a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800754c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754e:	2200      	movs	r2, #0
 8007550:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007552:	231a      	movs	r3, #26
 8007554:	2220      	movs	r2, #32
 8007556:	189b      	adds	r3, r3, r2
 8007558:	19db      	adds	r3, r3, r7
 800755a:	781b      	ldrb	r3, [r3, #0]
}
 800755c:	0018      	movs	r0, r3
 800755e:	46bd      	mov	sp, r7
 8007560:	b010      	add	sp, #64	; 0x40
 8007562:	bdb0      	pop	{r4, r5, r7, pc}
 8007564:	08013f00 	.word	0x08013f00
 8007568:	00f42400 	.word	0x00f42400

0800756c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007578:	2201      	movs	r2, #1
 800757a:	4013      	ands	r3, r2
 800757c:	d00b      	beq.n	8007596 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	4a4a      	ldr	r2, [pc, #296]	; (80076b0 <UART_AdvFeatureConfig+0x144>)
 8007586:	4013      	ands	r3, r2
 8007588:	0019      	movs	r1, r3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	430a      	orrs	r2, r1
 8007594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800759a:	2202      	movs	r2, #2
 800759c:	4013      	ands	r3, r2
 800759e:	d00b      	beq.n	80075b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	4a43      	ldr	r2, [pc, #268]	; (80076b4 <UART_AdvFeatureConfig+0x148>)
 80075a8:	4013      	ands	r3, r2
 80075aa:	0019      	movs	r1, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	430a      	orrs	r2, r1
 80075b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075bc:	2204      	movs	r2, #4
 80075be:	4013      	ands	r3, r2
 80075c0:	d00b      	beq.n	80075da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	4a3b      	ldr	r2, [pc, #236]	; (80076b8 <UART_AdvFeatureConfig+0x14c>)
 80075ca:	4013      	ands	r3, r2
 80075cc:	0019      	movs	r1, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	430a      	orrs	r2, r1
 80075d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075de:	2208      	movs	r2, #8
 80075e0:	4013      	ands	r3, r2
 80075e2:	d00b      	beq.n	80075fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	4a34      	ldr	r2, [pc, #208]	; (80076bc <UART_AdvFeatureConfig+0x150>)
 80075ec:	4013      	ands	r3, r2
 80075ee:	0019      	movs	r1, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	430a      	orrs	r2, r1
 80075fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007600:	2210      	movs	r2, #16
 8007602:	4013      	ands	r3, r2
 8007604:	d00b      	beq.n	800761e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	4a2c      	ldr	r2, [pc, #176]	; (80076c0 <UART_AdvFeatureConfig+0x154>)
 800760e:	4013      	ands	r3, r2
 8007610:	0019      	movs	r1, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	430a      	orrs	r2, r1
 800761c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007622:	2220      	movs	r2, #32
 8007624:	4013      	ands	r3, r2
 8007626:	d00b      	beq.n	8007640 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	4a25      	ldr	r2, [pc, #148]	; (80076c4 <UART_AdvFeatureConfig+0x158>)
 8007630:	4013      	ands	r3, r2
 8007632:	0019      	movs	r1, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	430a      	orrs	r2, r1
 800763e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007644:	2240      	movs	r2, #64	; 0x40
 8007646:	4013      	ands	r3, r2
 8007648:	d01d      	beq.n	8007686 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	4a1d      	ldr	r2, [pc, #116]	; (80076c8 <UART_AdvFeatureConfig+0x15c>)
 8007652:	4013      	ands	r3, r2
 8007654:	0019      	movs	r1, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	430a      	orrs	r2, r1
 8007660:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007666:	2380      	movs	r3, #128	; 0x80
 8007668:	035b      	lsls	r3, r3, #13
 800766a:	429a      	cmp	r2, r3
 800766c:	d10b      	bne.n	8007686 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	4a15      	ldr	r2, [pc, #84]	; (80076cc <UART_AdvFeatureConfig+0x160>)
 8007676:	4013      	ands	r3, r2
 8007678:	0019      	movs	r1, r3
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	430a      	orrs	r2, r1
 8007684:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800768a:	2280      	movs	r2, #128	; 0x80
 800768c:	4013      	ands	r3, r2
 800768e:	d00b      	beq.n	80076a8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	4a0e      	ldr	r2, [pc, #56]	; (80076d0 <UART_AdvFeatureConfig+0x164>)
 8007698:	4013      	ands	r3, r2
 800769a:	0019      	movs	r1, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	430a      	orrs	r2, r1
 80076a6:	605a      	str	r2, [r3, #4]
  }
}
 80076a8:	46c0      	nop			; (mov r8, r8)
 80076aa:	46bd      	mov	sp, r7
 80076ac:	b002      	add	sp, #8
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	fffdffff 	.word	0xfffdffff
 80076b4:	fffeffff 	.word	0xfffeffff
 80076b8:	fffbffff 	.word	0xfffbffff
 80076bc:	ffff7fff 	.word	0xffff7fff
 80076c0:	ffffefff 	.word	0xffffefff
 80076c4:	ffffdfff 	.word	0xffffdfff
 80076c8:	ffefffff 	.word	0xffefffff
 80076cc:	ff9fffff 	.word	0xff9fffff
 80076d0:	fff7ffff 	.word	0xfff7ffff

080076d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b086      	sub	sp, #24
 80076d8:	af02      	add	r7, sp, #8
 80076da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2290      	movs	r2, #144	; 0x90
 80076e0:	2100      	movs	r1, #0
 80076e2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076e4:	f7fc f8d4 	bl	8003890 <HAL_GetTick>
 80076e8:	0003      	movs	r3, r0
 80076ea:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2208      	movs	r2, #8
 80076f4:	4013      	ands	r3, r2
 80076f6:	2b08      	cmp	r3, #8
 80076f8:	d10c      	bne.n	8007714 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2280      	movs	r2, #128	; 0x80
 80076fe:	0391      	lsls	r1, r2, #14
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	4a1a      	ldr	r2, [pc, #104]	; (800776c <UART_CheckIdleState+0x98>)
 8007704:	9200      	str	r2, [sp, #0]
 8007706:	2200      	movs	r2, #0
 8007708:	f000 f832 	bl	8007770 <UART_WaitOnFlagUntilTimeout>
 800770c:	1e03      	subs	r3, r0, #0
 800770e:	d001      	beq.n	8007714 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007710:	2303      	movs	r3, #3
 8007712:	e026      	b.n	8007762 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2204      	movs	r2, #4
 800771c:	4013      	ands	r3, r2
 800771e:	2b04      	cmp	r3, #4
 8007720:	d10c      	bne.n	800773c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2280      	movs	r2, #128	; 0x80
 8007726:	03d1      	lsls	r1, r2, #15
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	4a10      	ldr	r2, [pc, #64]	; (800776c <UART_CheckIdleState+0x98>)
 800772c:	9200      	str	r2, [sp, #0]
 800772e:	2200      	movs	r2, #0
 8007730:	f000 f81e 	bl	8007770 <UART_WaitOnFlagUntilTimeout>
 8007734:	1e03      	subs	r3, r0, #0
 8007736:	d001      	beq.n	800773c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007738:	2303      	movs	r3, #3
 800773a:	e012      	b.n	8007762 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2288      	movs	r2, #136	; 0x88
 8007740:	2120      	movs	r1, #32
 8007742:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	228c      	movs	r2, #140	; 0x8c
 8007748:	2120      	movs	r1, #32
 800774a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2284      	movs	r2, #132	; 0x84
 800775c:	2100      	movs	r1, #0
 800775e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	0018      	movs	r0, r3
 8007764:	46bd      	mov	sp, r7
 8007766:	b004      	add	sp, #16
 8007768:	bd80      	pop	{r7, pc}
 800776a:	46c0      	nop			; (mov r8, r8)
 800776c:	01ffffff 	.word	0x01ffffff

08007770 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b094      	sub	sp, #80	; 0x50
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	603b      	str	r3, [r7, #0]
 800777c:	1dfb      	adds	r3, r7, #7
 800777e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007780:	e0a7      	b.n	80078d2 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007782:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007784:	3301      	adds	r3, #1
 8007786:	d100      	bne.n	800778a <UART_WaitOnFlagUntilTimeout+0x1a>
 8007788:	e0a3      	b.n	80078d2 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800778a:	f7fc f881 	bl	8003890 <HAL_GetTick>
 800778e:	0002      	movs	r2, r0
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	1ad3      	subs	r3, r2, r3
 8007794:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007796:	429a      	cmp	r2, r3
 8007798:	d302      	bcc.n	80077a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800779a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800779c:	2b00      	cmp	r3, #0
 800779e:	d13f      	bne.n	8007820 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077a0:	f3ef 8310 	mrs	r3, PRIMASK
 80077a4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80077a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80077a8:	647b      	str	r3, [r7, #68]	; 0x44
 80077aa:	2301      	movs	r3, #1
 80077ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b0:	f383 8810 	msr	PRIMASK, r3
}
 80077b4:	46c0      	nop			; (mov r8, r8)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	494e      	ldr	r1, [pc, #312]	; (80078fc <UART_WaitOnFlagUntilTimeout+0x18c>)
 80077c2:	400a      	ands	r2, r1
 80077c4:	601a      	str	r2, [r3, #0]
 80077c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077c8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077cc:	f383 8810 	msr	PRIMASK, r3
}
 80077d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077d2:	f3ef 8310 	mrs	r3, PRIMASK
 80077d6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80077d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077da:	643b      	str	r3, [r7, #64]	; 0x40
 80077dc:	2301      	movs	r3, #1
 80077de:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e2:	f383 8810 	msr	PRIMASK, r3
}
 80077e6:	46c0      	nop			; (mov r8, r8)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	689a      	ldr	r2, [r3, #8]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2101      	movs	r1, #1
 80077f4:	438a      	bics	r2, r1
 80077f6:	609a      	str	r2, [r3, #8]
 80077f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077fe:	f383 8810 	msr	PRIMASK, r3
}
 8007802:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2288      	movs	r2, #136	; 0x88
 8007808:	2120      	movs	r1, #32
 800780a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	228c      	movs	r2, #140	; 0x8c
 8007810:	2120      	movs	r1, #32
 8007812:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2284      	movs	r2, #132	; 0x84
 8007818:	2100      	movs	r1, #0
 800781a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800781c:	2303      	movs	r3, #3
 800781e:	e069      	b.n	80078f4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2204      	movs	r2, #4
 8007828:	4013      	ands	r3, r2
 800782a:	d052      	beq.n	80078d2 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	69da      	ldr	r2, [r3, #28]
 8007832:	2380      	movs	r3, #128	; 0x80
 8007834:	011b      	lsls	r3, r3, #4
 8007836:	401a      	ands	r2, r3
 8007838:	2380      	movs	r3, #128	; 0x80
 800783a:	011b      	lsls	r3, r3, #4
 800783c:	429a      	cmp	r2, r3
 800783e:	d148      	bne.n	80078d2 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2280      	movs	r2, #128	; 0x80
 8007846:	0112      	lsls	r2, r2, #4
 8007848:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800784a:	f3ef 8310 	mrs	r3, PRIMASK
 800784e:	613b      	str	r3, [r7, #16]
  return(result);
 8007850:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007852:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007854:	2301      	movs	r3, #1
 8007856:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	f383 8810 	msr	PRIMASK, r3
}
 800785e:	46c0      	nop			; (mov r8, r8)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4924      	ldr	r1, [pc, #144]	; (80078fc <UART_WaitOnFlagUntilTimeout+0x18c>)
 800786c:	400a      	ands	r2, r1
 800786e:	601a      	str	r2, [r3, #0]
 8007870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007872:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	f383 8810 	msr	PRIMASK, r3
}
 800787a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800787c:	f3ef 8310 	mrs	r3, PRIMASK
 8007880:	61fb      	str	r3, [r7, #28]
  return(result);
 8007882:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007884:	64bb      	str	r3, [r7, #72]	; 0x48
 8007886:	2301      	movs	r3, #1
 8007888:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800788a:	6a3b      	ldr	r3, [r7, #32]
 800788c:	f383 8810 	msr	PRIMASK, r3
}
 8007890:	46c0      	nop			; (mov r8, r8)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	689a      	ldr	r2, [r3, #8]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2101      	movs	r1, #1
 800789e:	438a      	bics	r2, r1
 80078a0:	609a      	str	r2, [r3, #8]
 80078a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078a4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a8:	f383 8810 	msr	PRIMASK, r3
}
 80078ac:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2288      	movs	r2, #136	; 0x88
 80078b2:	2120      	movs	r1, #32
 80078b4:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	228c      	movs	r2, #140	; 0x8c
 80078ba:	2120      	movs	r1, #32
 80078bc:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2290      	movs	r2, #144	; 0x90
 80078c2:	2120      	movs	r1, #32
 80078c4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2284      	movs	r2, #132	; 0x84
 80078ca:	2100      	movs	r1, #0
 80078cc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80078ce:	2303      	movs	r3, #3
 80078d0:	e010      	b.n	80078f4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	69db      	ldr	r3, [r3, #28]
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	4013      	ands	r3, r2
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	1ad3      	subs	r3, r2, r3
 80078e0:	425a      	negs	r2, r3
 80078e2:	4153      	adcs	r3, r2
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	001a      	movs	r2, r3
 80078e8:	1dfb      	adds	r3, r7, #7
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d100      	bne.n	80078f2 <UART_WaitOnFlagUntilTimeout+0x182>
 80078f0:	e747      	b.n	8007782 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	0018      	movs	r0, r3
 80078f6:	46bd      	mov	sp, r7
 80078f8:	b014      	add	sp, #80	; 0x50
 80078fa:	bd80      	pop	{r7, pc}
 80078fc:	fffffe5f 	.word	0xfffffe5f

08007900 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2284      	movs	r2, #132	; 0x84
 800790c:	5c9b      	ldrb	r3, [r3, r2]
 800790e:	2b01      	cmp	r3, #1
 8007910:	d101      	bne.n	8007916 <HAL_UARTEx_DisableFifoMode+0x16>
 8007912:	2302      	movs	r3, #2
 8007914:	e027      	b.n	8007966 <HAL_UARTEx_DisableFifoMode+0x66>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2284      	movs	r2, #132	; 0x84
 800791a:	2101      	movs	r1, #1
 800791c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2288      	movs	r2, #136	; 0x88
 8007922:	2124      	movs	r1, #36	; 0x24
 8007924:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2101      	movs	r1, #1
 800793a:	438a      	bics	r2, r1
 800793c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	4a0b      	ldr	r2, [pc, #44]	; (8007970 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007942:	4013      	ands	r3, r2
 8007944:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2288      	movs	r2, #136	; 0x88
 8007958:	2120      	movs	r1, #32
 800795a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2284      	movs	r2, #132	; 0x84
 8007960:	2100      	movs	r1, #0
 8007962:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	0018      	movs	r0, r3
 8007968:	46bd      	mov	sp, r7
 800796a:	b004      	add	sp, #16
 800796c:	bd80      	pop	{r7, pc}
 800796e:	46c0      	nop			; (mov r8, r8)
 8007970:	dfffffff 	.word	0xdfffffff

08007974 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2284      	movs	r2, #132	; 0x84
 8007982:	5c9b      	ldrb	r3, [r3, r2]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d101      	bne.n	800798c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007988:	2302      	movs	r3, #2
 800798a:	e02e      	b.n	80079ea <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2284      	movs	r2, #132	; 0x84
 8007990:	2101      	movs	r1, #1
 8007992:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2288      	movs	r2, #136	; 0x88
 8007998:	2124      	movs	r1, #36	; 0x24
 800799a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2101      	movs	r1, #1
 80079b0:	438a      	bics	r2, r1
 80079b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	00db      	lsls	r3, r3, #3
 80079bc:	08d9      	lsrs	r1, r3, #3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	683a      	ldr	r2, [r7, #0]
 80079c4:	430a      	orrs	r2, r1
 80079c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	0018      	movs	r0, r3
 80079cc:	f000 f854 	bl	8007a78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2288      	movs	r2, #136	; 0x88
 80079dc:	2120      	movs	r1, #32
 80079de:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2284      	movs	r2, #132	; 0x84
 80079e4:	2100      	movs	r1, #0
 80079e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	0018      	movs	r0, r3
 80079ec:	46bd      	mov	sp, r7
 80079ee:	b004      	add	sp, #16
 80079f0:	bd80      	pop	{r7, pc}
	...

080079f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2284      	movs	r2, #132	; 0x84
 8007a02:	5c9b      	ldrb	r3, [r3, r2]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d101      	bne.n	8007a0c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a08:	2302      	movs	r3, #2
 8007a0a:	e02f      	b.n	8007a6c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2284      	movs	r2, #132	; 0x84
 8007a10:	2101      	movs	r1, #1
 8007a12:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2288      	movs	r2, #136	; 0x88
 8007a18:	2124      	movs	r1, #36	; 0x24
 8007a1a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2101      	movs	r1, #1
 8007a30:	438a      	bics	r2, r1
 8007a32:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	4a0e      	ldr	r2, [pc, #56]	; (8007a74 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	0019      	movs	r1, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	683a      	ldr	r2, [r7, #0]
 8007a46:	430a      	orrs	r2, r1
 8007a48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	0018      	movs	r0, r3
 8007a4e:	f000 f813 	bl	8007a78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2288      	movs	r2, #136	; 0x88
 8007a5e:	2120      	movs	r1, #32
 8007a60:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2284      	movs	r2, #132	; 0x84
 8007a66:	2100      	movs	r1, #0
 8007a68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	0018      	movs	r0, r3
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	b004      	add	sp, #16
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	f1ffffff 	.word	0xf1ffffff

08007a78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d108      	bne.n	8007a9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	226a      	movs	r2, #106	; 0x6a
 8007a8c:	2101      	movs	r1, #1
 8007a8e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2268      	movs	r2, #104	; 0x68
 8007a94:	2101      	movs	r1, #1
 8007a96:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a98:	e043      	b.n	8007b22 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a9a:	260f      	movs	r6, #15
 8007a9c:	19bb      	adds	r3, r7, r6
 8007a9e:	2208      	movs	r2, #8
 8007aa0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007aa2:	200e      	movs	r0, #14
 8007aa4:	183b      	adds	r3, r7, r0
 8007aa6:	2208      	movs	r2, #8
 8007aa8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	0e5b      	lsrs	r3, r3, #25
 8007ab2:	b2da      	uxtb	r2, r3
 8007ab4:	240d      	movs	r4, #13
 8007ab6:	193b      	adds	r3, r7, r4
 8007ab8:	2107      	movs	r1, #7
 8007aba:	400a      	ands	r2, r1
 8007abc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	0f5b      	lsrs	r3, r3, #29
 8007ac6:	b2da      	uxtb	r2, r3
 8007ac8:	250c      	movs	r5, #12
 8007aca:	197b      	adds	r3, r7, r5
 8007acc:	2107      	movs	r1, #7
 8007ace:	400a      	ands	r2, r1
 8007ad0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ad2:	183b      	adds	r3, r7, r0
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	197a      	adds	r2, r7, r5
 8007ad8:	7812      	ldrb	r2, [r2, #0]
 8007ada:	4914      	ldr	r1, [pc, #80]	; (8007b2c <UARTEx_SetNbDataToProcess+0xb4>)
 8007adc:	5c8a      	ldrb	r2, [r1, r2]
 8007ade:	435a      	muls	r2, r3
 8007ae0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ae2:	197b      	adds	r3, r7, r5
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	4a12      	ldr	r2, [pc, #72]	; (8007b30 <UARTEx_SetNbDataToProcess+0xb8>)
 8007ae8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007aea:	0019      	movs	r1, r3
 8007aec:	f7f8 fbb0 	bl	8000250 <__divsi3>
 8007af0:	0003      	movs	r3, r0
 8007af2:	b299      	uxth	r1, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	226a      	movs	r2, #106	; 0x6a
 8007af8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007afa:	19bb      	adds	r3, r7, r6
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	193a      	adds	r2, r7, r4
 8007b00:	7812      	ldrb	r2, [r2, #0]
 8007b02:	490a      	ldr	r1, [pc, #40]	; (8007b2c <UARTEx_SetNbDataToProcess+0xb4>)
 8007b04:	5c8a      	ldrb	r2, [r1, r2]
 8007b06:	435a      	muls	r2, r3
 8007b08:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007b0a:	193b      	adds	r3, r7, r4
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	4a08      	ldr	r2, [pc, #32]	; (8007b30 <UARTEx_SetNbDataToProcess+0xb8>)
 8007b10:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b12:	0019      	movs	r1, r3
 8007b14:	f7f8 fb9c 	bl	8000250 <__divsi3>
 8007b18:	0003      	movs	r3, r0
 8007b1a:	b299      	uxth	r1, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2268      	movs	r2, #104	; 0x68
 8007b20:	5299      	strh	r1, [r3, r2]
}
 8007b22:	46c0      	nop			; (mov r8, r8)
 8007b24:	46bd      	mov	sp, r7
 8007b26:	b005      	add	sp, #20
 8007b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b2a:	46c0      	nop			; (mov r8, r8)
 8007b2c:	08013f18 	.word	0x08013f18
 8007b30:	08013f20 	.word	0x08013f20

08007b34 <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8007b34:	b5b0      	push	{r4, r5, r7, lr}
 8007b36:	b0e4      	sub	sp, #400	; 0x190
 8007b38:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007b3a:	24c8      	movs	r4, #200	; 0xc8
 8007b3c:	193b      	adds	r3, r7, r4
 8007b3e:	0018      	movs	r0, r3
 8007b40:	23c6      	movs	r3, #198	; 0xc6
 8007b42:	001a      	movs	r2, r3
 8007b44:	2100      	movs	r1, #0
 8007b46:	f003 ff85 	bl	800ba54 <memset>
    astronode_app_msg_t answer = {0};
 8007b4a:	4b13      	ldr	r3, [pc, #76]	; (8007b98 <astronode_send_cfg_sr+0x64>)
 8007b4c:	25c8      	movs	r5, #200	; 0xc8
 8007b4e:	006d      	lsls	r5, r5, #1
 8007b50:	195b      	adds	r3, r3, r5
 8007b52:	19db      	adds	r3, r3, r7
 8007b54:	0018      	movs	r0, r3
 8007b56:	23c6      	movs	r3, #198	; 0xc6
 8007b58:	001a      	movs	r2, r3
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	f003 ff7a 	bl	800ba54 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 8007b60:	193b      	adds	r3, r7, r4
 8007b62:	2210      	movs	r2, #16
 8007b64:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 8007b66:	003a      	movs	r2, r7
 8007b68:	193b      	adds	r3, r7, r4
 8007b6a:	0011      	movs	r1, r2
 8007b6c:	0018      	movs	r0, r3
 8007b6e:	f001 faa9 	bl	80090c4 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 8007b72:	4b09      	ldr	r3, [pc, #36]	; (8007b98 <astronode_send_cfg_sr+0x64>)
 8007b74:	195b      	adds	r3, r3, r5
 8007b76:	19db      	adds	r3, r3, r7
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	2b90      	cmp	r3, #144	; 0x90
 8007b7c:	d104      	bne.n	8007b88 <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 8007b7e:	4b07      	ldr	r3, [pc, #28]	; (8007b9c <astronode_send_cfg_sr+0x68>)
 8007b80:	0018      	movs	r0, r3
 8007b82:	f7fb f903 	bl	8002d8c <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8007b86:	e003      	b.n	8007b90 <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8007b88:	4b05      	ldr	r3, [pc, #20]	; (8007ba0 <astronode_send_cfg_sr+0x6c>)
 8007b8a:	0018      	movs	r0, r3
 8007b8c:	f7fb f8fe 	bl	8002d8c <send_debug_logs>
}
 8007b90:	46c0      	nop			; (mov r8, r8)
 8007b92:	46bd      	mov	sp, r7
 8007b94:	b064      	add	sp, #400	; 0x190
 8007b96:	bdb0      	pop	{r4, r5, r7, pc}
 8007b98:	fffffe70 	.word	0xfffffe70
 8007b9c:	08012a88 	.word	0x08012a88
 8007ba0:	08012abc 	.word	0x08012abc

08007ba4 <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 8007ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ba6:	b0e7      	sub	sp, #412	; 0x19c
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	0005      	movs	r5, r0
 8007bac:	000c      	movs	r4, r1
 8007bae:	0010      	movs	r0, r2
 8007bb0:	0019      	movs	r1, r3
 8007bb2:	4b4b      	ldr	r3, [pc, #300]	; (8007ce0 <astronode_send_cfg_wr+0x13c>)
 8007bb4:	26cc      	movs	r6, #204	; 0xcc
 8007bb6:	0076      	lsls	r6, r6, #1
 8007bb8:	199b      	adds	r3, r3, r6
 8007bba:	19db      	adds	r3, r3, r7
 8007bbc:	1c2a      	adds	r2, r5, #0
 8007bbe:	701a      	strb	r2, [r3, #0]
 8007bc0:	4b48      	ldr	r3, [pc, #288]	; (8007ce4 <astronode_send_cfg_wr+0x140>)
 8007bc2:	0035      	movs	r5, r6
 8007bc4:	195b      	adds	r3, r3, r5
 8007bc6:	19db      	adds	r3, r3, r7
 8007bc8:	1c22      	adds	r2, r4, #0
 8007bca:	701a      	strb	r2, [r3, #0]
 8007bcc:	4b46      	ldr	r3, [pc, #280]	; (8007ce8 <astronode_send_cfg_wr+0x144>)
 8007bce:	002c      	movs	r4, r5
 8007bd0:	191b      	adds	r3, r3, r4
 8007bd2:	19db      	adds	r3, r3, r7
 8007bd4:	1c02      	adds	r2, r0, #0
 8007bd6:	701a      	strb	r2, [r3, #0]
 8007bd8:	4b44      	ldr	r3, [pc, #272]	; (8007cec <astronode_send_cfg_wr+0x148>)
 8007bda:	191b      	adds	r3, r3, r4
 8007bdc:	19db      	adds	r3, r3, r7
 8007bde:	1c0a      	adds	r2, r1, #0
 8007be0:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8007be2:	25d0      	movs	r5, #208	; 0xd0
 8007be4:	197b      	adds	r3, r7, r5
 8007be6:	0018      	movs	r0, r3
 8007be8:	23c6      	movs	r3, #198	; 0xc6
 8007bea:	001a      	movs	r2, r3
 8007bec:	2100      	movs	r1, #0
 8007bee:	f003 ff31 	bl	800ba54 <memset>
    astronode_app_msg_t answer = {0};
 8007bf2:	4b3f      	ldr	r3, [pc, #252]	; (8007cf0 <astronode_send_cfg_wr+0x14c>)
 8007bf4:	191b      	adds	r3, r3, r4
 8007bf6:	19db      	adds	r3, r3, r7
 8007bf8:	0018      	movs	r0, r3
 8007bfa:	23c6      	movs	r3, #198	; 0xc6
 8007bfc:	001a      	movs	r2, r3
 8007bfe:	2100      	movs	r1, #0
 8007c00:	f003 ff28 	bl	800ba54 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8007c04:	0029      	movs	r1, r5
 8007c06:	187b      	adds	r3, r7, r1
 8007c08:	2205      	movs	r2, #5
 8007c0a:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8007c0c:	4b34      	ldr	r3, [pc, #208]	; (8007ce0 <astronode_send_cfg_wr+0x13c>)
 8007c0e:	191b      	adds	r3, r3, r4
 8007c10:	19db      	adds	r3, r3, r7
 8007c12:	2200      	movs	r2, #0
 8007c14:	569a      	ldrsb	r2, [r3, r2]
 8007c16:	4b33      	ldr	r3, [pc, #204]	; (8007ce4 <astronode_send_cfg_wr+0x140>)
 8007c18:	191b      	adds	r3, r3, r4
 8007c1a:	19db      	adds	r3, r3, r7
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	005b      	lsls	r3, r3, #1
 8007c20:	b25b      	sxtb	r3, r3
 8007c22:	4313      	orrs	r3, r2
 8007c24:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 8007c26:	4b30      	ldr	r3, [pc, #192]	; (8007ce8 <astronode_send_cfg_wr+0x144>)
 8007c28:	191b      	adds	r3, r3, r4
 8007c2a:	19db      	adds	r3, r3, r7
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	b25b      	sxtb	r3, r3
 8007c32:	4313      	orrs	r3, r2
 8007c34:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 8007c36:	4b2d      	ldr	r3, [pc, #180]	; (8007cec <astronode_send_cfg_wr+0x148>)
 8007c38:	191b      	adds	r3, r3, r4
 8007c3a:	19db      	adds	r3, r3, r7
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	00db      	lsls	r3, r3, #3
 8007c40:	b25b      	sxtb	r3, r3
 8007c42:	4313      	orrs	r3, r2
 8007c44:	b25b      	sxtb	r3, r3
 8007c46:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8007c48:	187b      	adds	r3, r7, r1
 8007c4a:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8007c4c:	23d4      	movs	r3, #212	; 0xd4
 8007c4e:	005b      	lsls	r3, r3, #1
 8007c50:	2508      	movs	r5, #8
 8007c52:	195b      	adds	r3, r3, r5
 8007c54:	19db      	adds	r3, r3, r7
 8007c56:	2200      	movs	r2, #0
 8007c58:	569a      	ldrsb	r2, [r3, r2]
 8007c5a:	23d6      	movs	r3, #214	; 0xd6
 8007c5c:	005b      	lsls	r3, r3, #1
 8007c5e:	195b      	adds	r3, r3, r5
 8007c60:	19db      	adds	r3, r3, r7
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	005b      	lsls	r3, r3, #1
 8007c66:	b25b      	sxtb	r3, r3
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 8007c6c:	23d8      	movs	r3, #216	; 0xd8
 8007c6e:	005b      	lsls	r3, r3, #1
 8007c70:	195b      	adds	r3, r3, r5
 8007c72:	19db      	adds	r3, r3, r7
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	b25b      	sxtb	r3, r3
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 8007c7e:	23da      	movs	r3, #218	; 0xda
 8007c80:	005b      	lsls	r3, r3, #1
 8007c82:	195b      	adds	r3, r3, r5
 8007c84:	19db      	adds	r3, r3, r7
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	00db      	lsls	r3, r3, #3
 8007c8a:	b25b      	sxtb	r3, r3
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	b25b      	sxtb	r3, r3
 8007c90:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 8007c92:	187b      	adds	r3, r7, r1
 8007c94:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 8007c96:	0008      	movs	r0, r1
 8007c98:	187b      	adds	r3, r7, r1
 8007c9a:	22c4      	movs	r2, #196	; 0xc4
 8007c9c:	2103      	movs	r1, #3
 8007c9e:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007ca0:	002b      	movs	r3, r5
 8007ca2:	18fa      	adds	r2, r7, r3
 8007ca4:	183b      	adds	r3, r7, r0
 8007ca6:	0011      	movs	r1, r2
 8007ca8:	0018      	movs	r0, r3
 8007caa:	f001 fa0b 	bl	80090c4 <astronode_transport_send_receive>
 8007cae:	0003      	movs	r3, r0
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d10f      	bne.n	8007cd4 <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 8007cb4:	4b0e      	ldr	r3, [pc, #56]	; (8007cf0 <astronode_send_cfg_wr+0x14c>)
 8007cb6:	191b      	adds	r3, r3, r4
 8007cb8:	19db      	adds	r3, r3, r7
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	2b85      	cmp	r3, #133	; 0x85
 8007cbe:	d105      	bne.n	8007ccc <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 8007cc0:	4b0c      	ldr	r3, [pc, #48]	; (8007cf4 <astronode_send_cfg_wr+0x150>)
 8007cc2:	0018      	movs	r0, r3
 8007cc4:	f7fb f862 	bl	8002d8c <send_debug_logs>
            return true ;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e004      	b.n	8007cd6 <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 8007ccc:	4b0a      	ldr	r3, [pc, #40]	; (8007cf8 <astronode_send_cfg_wr+0x154>)
 8007cce:	0018      	movs	r0, r3
 8007cd0:	f7fb f85c 	bl	8002d8c <send_debug_logs>
        }
    }
    return false ;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	0018      	movs	r0, r3
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	b067      	add	sp, #412	; 0x19c
 8007cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cde:	46c0      	nop			; (mov r8, r8)
 8007ce0:	fffffe6f 	.word	0xfffffe6f
 8007ce4:	fffffe6e 	.word	0xfffffe6e
 8007ce8:	fffffe6d 	.word	0xfffffe6d
 8007cec:	fffffe6c 	.word	0xfffffe6c
 8007cf0:	fffffe70 	.word	0xfffffe70
 8007cf4:	08012af0 	.word	0x08012af0
 8007cf8:	08012b1c 	.word	0x08012b1c

08007cfc <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 8007cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cfe:	b0ed      	sub	sp, #436	; 0x1b4
 8007d00:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007d02:	21c8      	movs	r1, #200	; 0xc8
 8007d04:	2318      	movs	r3, #24
 8007d06:	18cb      	adds	r3, r1, r3
 8007d08:	19db      	adds	r3, r3, r7
 8007d0a:	0018      	movs	r0, r3
 8007d0c:	23c6      	movs	r3, #198	; 0xc6
 8007d0e:	001a      	movs	r2, r3
 8007d10:	2100      	movs	r1, #0
 8007d12:	f003 fe9f 	bl	800ba54 <memset>
    astronode_app_msg_t answer = {0};
 8007d16:	4b4a      	ldr	r3, [pc, #296]	; (8007e40 <astronode_send_mgi_rr+0x144>)
 8007d18:	26cc      	movs	r6, #204	; 0xcc
 8007d1a:	0076      	lsls	r6, r6, #1
 8007d1c:	199b      	adds	r3, r3, r6
 8007d1e:	2218      	movs	r2, #24
 8007d20:	4694      	mov	ip, r2
 8007d22:	44bc      	add	ip, r7
 8007d24:	4463      	add	r3, ip
 8007d26:	0018      	movs	r0, r3
 8007d28:	23c6      	movs	r3, #198	; 0xc6
 8007d2a:	001a      	movs	r2, r3
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	f003 fe91 	bl	800ba54 <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 8007d32:	21c8      	movs	r1, #200	; 0xc8
 8007d34:	2318      	movs	r3, #24
 8007d36:	18cb      	adds	r3, r1, r3
 8007d38:	19db      	adds	r3, r3, r7
 8007d3a:	2219      	movs	r2, #25
 8007d3c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007d3e:	2318      	movs	r3, #24
 8007d40:	18fa      	adds	r2, r7, r3
 8007d42:	2318      	movs	r3, #24
 8007d44:	18cb      	adds	r3, r1, r3
 8007d46:	19db      	adds	r3, r3, r7
 8007d48:	0011      	movs	r1, r2
 8007d4a:	0018      	movs	r0, r3
 8007d4c:	f001 f9ba 	bl	80090c4 <astronode_transport_send_receive>
 8007d50:	0003      	movs	r3, r0
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d16f      	bne.n	8007e36 <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 8007d56:	4b3a      	ldr	r3, [pc, #232]	; (8007e40 <astronode_send_mgi_rr+0x144>)
 8007d58:	0032      	movs	r2, r6
 8007d5a:	189b      	adds	r3, r3, r2
 8007d5c:	2118      	movs	r1, #24
 8007d5e:	468c      	mov	ip, r1
 8007d60:	44bc      	add	ip, r7
 8007d62:	4463      	add	r3, ip
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	2b99      	cmp	r3, #153	; 0x99
 8007d68:	d161      	bne.n	8007e2e <astronode_send_mgi_rr+0x132>
        {
 8007d6a:	466b      	mov	r3, sp
 8007d6c:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 8007d6e:	4b34      	ldr	r3, [pc, #208]	; (8007e40 <astronode_send_mgi_rr+0x144>)
 8007d70:	189b      	adds	r3, r3, r2
 8007d72:	2218      	movs	r2, #24
 8007d74:	4694      	mov	ip, r2
 8007d76:	44bc      	add	ip, r7
 8007d78:	4463      	add	r3, ip
 8007d7a:	22c4      	movs	r2, #196	; 0xc4
 8007d7c:	5a9b      	ldrh	r3, [r3, r2]
 8007d7e:	001a      	movs	r2, r3
 8007d80:	3a01      	subs	r2, #1
 8007d82:	21ca      	movs	r1, #202	; 0xca
 8007d84:	0049      	lsls	r1, r1, #1
 8007d86:	2018      	movs	r0, #24
 8007d88:	1809      	adds	r1, r1, r0
 8007d8a:	19c9      	adds	r1, r1, r7
 8007d8c:	600a      	str	r2, [r1, #0]
 8007d8e:	001c      	movs	r4, r3
 8007d90:	2200      	movs	r2, #0
 8007d92:	0015      	movs	r5, r2
 8007d94:	0020      	movs	r0, r4
 8007d96:	0029      	movs	r1, r5
 8007d98:	0004      	movs	r4, r0
 8007d9a:	0f62      	lsrs	r2, r4, #29
 8007d9c:	000c      	movs	r4, r1
 8007d9e:	00e4      	lsls	r4, r4, #3
 8007da0:	617c      	str	r4, [r7, #20]
 8007da2:	697c      	ldr	r4, [r7, #20]
 8007da4:	4314      	orrs	r4, r2
 8007da6:	617c      	str	r4, [r7, #20]
 8007da8:	0001      	movs	r1, r0
 8007daa:	00c9      	lsls	r1, r1, #3
 8007dac:	6139      	str	r1, [r7, #16]
 8007dae:	603b      	str	r3, [r7, #0]
 8007db0:	2200      	movs	r2, #0
 8007db2:	607a      	str	r2, [r7, #4]
 8007db4:	6838      	ldr	r0, [r7, #0]
 8007db6:	6879      	ldr	r1, [r7, #4]
 8007db8:	0004      	movs	r4, r0
 8007dba:	0f62      	lsrs	r2, r4, #29
 8007dbc:	000c      	movs	r4, r1
 8007dbe:	00e4      	lsls	r4, r4, #3
 8007dc0:	60fc      	str	r4, [r7, #12]
 8007dc2:	68fc      	ldr	r4, [r7, #12]
 8007dc4:	4314      	orrs	r4, r2
 8007dc6:	60fc      	str	r4, [r7, #12]
 8007dc8:	0001      	movs	r1, r0
 8007dca:	00ca      	lsls	r2, r1, #3
 8007dcc:	60ba      	str	r2, [r7, #8]
 8007dce:	3307      	adds	r3, #7
 8007dd0:	08db      	lsrs	r3, r3, #3
 8007dd2:	00db      	lsls	r3, r3, #3
 8007dd4:	4669      	mov	r1, sp
 8007dd6:	1acb      	subs	r3, r1, r3
 8007dd8:	469d      	mov	sp, r3
 8007dda:	466b      	mov	r3, sp
 8007ddc:	3300      	adds	r3, #0
 8007dde:	24c8      	movs	r4, #200	; 0xc8
 8007de0:	0064      	lsls	r4, r4, #1
 8007de2:	2218      	movs	r2, #24
 8007de4:	18a2      	adds	r2, r4, r2
 8007de6:	19d1      	adds	r1, r2, r7
 8007de8:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 8007dea:	4b16      	ldr	r3, [pc, #88]	; (8007e44 <astronode_send_mgi_rr+0x148>)
 8007dec:	0018      	movs	r0, r3
 8007dee:	f7fa ffcd 	bl	8002d8c <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 8007df2:	4b13      	ldr	r3, [pc, #76]	; (8007e40 <astronode_send_mgi_rr+0x144>)
 8007df4:	22cc      	movs	r2, #204	; 0xcc
 8007df6:	0052      	lsls	r2, r2, #1
 8007df8:	189b      	adds	r3, r3, r2
 8007dfa:	2218      	movs	r2, #24
 8007dfc:	4694      	mov	ip, r2
 8007dfe:	44bc      	add	ip, r7
 8007e00:	4463      	add	r3, ip
 8007e02:	22c4      	movs	r2, #196	; 0xc4
 8007e04:	5a9b      	ldrh	r3, [r3, r2]
 8007e06:	0019      	movs	r1, r3
 8007e08:	2318      	movs	r3, #24
 8007e0a:	18fb      	adds	r3, r7, r3
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	4a0e      	ldr	r2, [pc, #56]	; (8007e48 <astronode_send_mgi_rr+0x14c>)
 8007e10:	2018      	movs	r0, #24
 8007e12:	1820      	adds	r0, r4, r0
 8007e14:	19c0      	adds	r0, r0, r7
 8007e16:	6800      	ldr	r0, [r0, #0]
 8007e18:	f003 fd52 	bl	800b8c0 <snprintf>
            send_debug_logs(guid);
 8007e1c:	2318      	movs	r3, #24
 8007e1e:	18e3      	adds	r3, r4, r3
 8007e20:	19db      	adds	r3, r3, r7
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	0018      	movs	r0, r3
 8007e26:	f7fa ffb1 	bl	8002d8c <send_debug_logs>
 8007e2a:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 8007e2c:	e003      	b.n	8007e36 <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 8007e2e:	4b07      	ldr	r3, [pc, #28]	; (8007e4c <astronode_send_mgi_rr+0x150>)
 8007e30:	0018      	movs	r0, r3
 8007e32:	f7fa ffab 	bl	8002d8c <send_debug_logs>
}
 8007e36:	46c0      	nop			; (mov r8, r8)
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	b06d      	add	sp, #436	; 0x1b4
 8007e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e3e:	46c0      	nop			; (mov r8, r8)
 8007e40:	fffffe68 	.word	0xfffffe68
 8007e44:	08012ba8 	.word	0x08012ba8
 8007e48:	08012bb8 	.word	0x08012bb8
 8007e4c:	08012bbc 	.word	0x08012bbc

08007e50 <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 8007e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e52:	b0ed      	sub	sp, #436	; 0x1b4
 8007e54:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007e56:	21c8      	movs	r1, #200	; 0xc8
 8007e58:	2318      	movs	r3, #24
 8007e5a:	18cb      	adds	r3, r1, r3
 8007e5c:	19db      	adds	r3, r3, r7
 8007e5e:	0018      	movs	r0, r3
 8007e60:	23c6      	movs	r3, #198	; 0xc6
 8007e62:	001a      	movs	r2, r3
 8007e64:	2100      	movs	r1, #0
 8007e66:	f003 fdf5 	bl	800ba54 <memset>
    astronode_app_msg_t answer = {0};
 8007e6a:	4b4a      	ldr	r3, [pc, #296]	; (8007f94 <astronode_send_msn_rr+0x144>)
 8007e6c:	26cc      	movs	r6, #204	; 0xcc
 8007e6e:	0076      	lsls	r6, r6, #1
 8007e70:	199b      	adds	r3, r3, r6
 8007e72:	2218      	movs	r2, #24
 8007e74:	4694      	mov	ip, r2
 8007e76:	44bc      	add	ip, r7
 8007e78:	4463      	add	r3, ip
 8007e7a:	0018      	movs	r0, r3
 8007e7c:	23c6      	movs	r3, #198	; 0xc6
 8007e7e:	001a      	movs	r2, r3
 8007e80:	2100      	movs	r1, #0
 8007e82:	f003 fde7 	bl	800ba54 <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 8007e86:	21c8      	movs	r1, #200	; 0xc8
 8007e88:	2318      	movs	r3, #24
 8007e8a:	18cb      	adds	r3, r1, r3
 8007e8c:	19db      	adds	r3, r3, r7
 8007e8e:	221a      	movs	r2, #26
 8007e90:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007e92:	2318      	movs	r3, #24
 8007e94:	18fa      	adds	r2, r7, r3
 8007e96:	2318      	movs	r3, #24
 8007e98:	18cb      	adds	r3, r1, r3
 8007e9a:	19db      	adds	r3, r3, r7
 8007e9c:	0011      	movs	r1, r2
 8007e9e:	0018      	movs	r0, r3
 8007ea0:	f001 f910 	bl	80090c4 <astronode_transport_send_receive>
 8007ea4:	0003      	movs	r3, r0
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d16f      	bne.n	8007f8a <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 8007eaa:	4b3a      	ldr	r3, [pc, #232]	; (8007f94 <astronode_send_msn_rr+0x144>)
 8007eac:	0032      	movs	r2, r6
 8007eae:	189b      	adds	r3, r3, r2
 8007eb0:	2118      	movs	r1, #24
 8007eb2:	468c      	mov	ip, r1
 8007eb4:	44bc      	add	ip, r7
 8007eb6:	4463      	add	r3, ip
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	2b9a      	cmp	r3, #154	; 0x9a
 8007ebc:	d161      	bne.n	8007f82 <astronode_send_msn_rr+0x132>
        {
 8007ebe:	466b      	mov	r3, sp
 8007ec0:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 8007ec2:	4b34      	ldr	r3, [pc, #208]	; (8007f94 <astronode_send_msn_rr+0x144>)
 8007ec4:	189b      	adds	r3, r3, r2
 8007ec6:	2218      	movs	r2, #24
 8007ec8:	4694      	mov	ip, r2
 8007eca:	44bc      	add	ip, r7
 8007ecc:	4463      	add	r3, ip
 8007ece:	22c4      	movs	r2, #196	; 0xc4
 8007ed0:	5a9b      	ldrh	r3, [r3, r2]
 8007ed2:	001a      	movs	r2, r3
 8007ed4:	3a01      	subs	r2, #1
 8007ed6:	21ca      	movs	r1, #202	; 0xca
 8007ed8:	0049      	lsls	r1, r1, #1
 8007eda:	2018      	movs	r0, #24
 8007edc:	1809      	adds	r1, r1, r0
 8007ede:	19c9      	adds	r1, r1, r7
 8007ee0:	600a      	str	r2, [r1, #0]
 8007ee2:	001c      	movs	r4, r3
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	0015      	movs	r5, r2
 8007ee8:	0020      	movs	r0, r4
 8007eea:	0029      	movs	r1, r5
 8007eec:	0004      	movs	r4, r0
 8007eee:	0f62      	lsrs	r2, r4, #29
 8007ef0:	000c      	movs	r4, r1
 8007ef2:	00e4      	lsls	r4, r4, #3
 8007ef4:	617c      	str	r4, [r7, #20]
 8007ef6:	697c      	ldr	r4, [r7, #20]
 8007ef8:	4314      	orrs	r4, r2
 8007efa:	617c      	str	r4, [r7, #20]
 8007efc:	0001      	movs	r1, r0
 8007efe:	00c9      	lsls	r1, r1, #3
 8007f00:	6139      	str	r1, [r7, #16]
 8007f02:	603b      	str	r3, [r7, #0]
 8007f04:	2200      	movs	r2, #0
 8007f06:	607a      	str	r2, [r7, #4]
 8007f08:	6838      	ldr	r0, [r7, #0]
 8007f0a:	6879      	ldr	r1, [r7, #4]
 8007f0c:	0004      	movs	r4, r0
 8007f0e:	0f62      	lsrs	r2, r4, #29
 8007f10:	000c      	movs	r4, r1
 8007f12:	00e4      	lsls	r4, r4, #3
 8007f14:	60fc      	str	r4, [r7, #12]
 8007f16:	68fc      	ldr	r4, [r7, #12]
 8007f18:	4314      	orrs	r4, r2
 8007f1a:	60fc      	str	r4, [r7, #12]
 8007f1c:	0001      	movs	r1, r0
 8007f1e:	00ca      	lsls	r2, r1, #3
 8007f20:	60ba      	str	r2, [r7, #8]
 8007f22:	3307      	adds	r3, #7
 8007f24:	08db      	lsrs	r3, r3, #3
 8007f26:	00db      	lsls	r3, r3, #3
 8007f28:	4669      	mov	r1, sp
 8007f2a:	1acb      	subs	r3, r1, r3
 8007f2c:	469d      	mov	sp, r3
 8007f2e:	466b      	mov	r3, sp
 8007f30:	3300      	adds	r3, #0
 8007f32:	24c8      	movs	r4, #200	; 0xc8
 8007f34:	0064      	lsls	r4, r4, #1
 8007f36:	2218      	movs	r2, #24
 8007f38:	18a2      	adds	r2, r4, r2
 8007f3a:	19d1      	adds	r1, r2, r7
 8007f3c:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 8007f3e:	4b16      	ldr	r3, [pc, #88]	; (8007f98 <astronode_send_msn_rr+0x148>)
 8007f40:	0018      	movs	r0, r3
 8007f42:	f7fa ff23 	bl	8002d8c <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 8007f46:	4b13      	ldr	r3, [pc, #76]	; (8007f94 <astronode_send_msn_rr+0x144>)
 8007f48:	22cc      	movs	r2, #204	; 0xcc
 8007f4a:	0052      	lsls	r2, r2, #1
 8007f4c:	189b      	adds	r3, r3, r2
 8007f4e:	2218      	movs	r2, #24
 8007f50:	4694      	mov	ip, r2
 8007f52:	44bc      	add	ip, r7
 8007f54:	4463      	add	r3, ip
 8007f56:	22c4      	movs	r2, #196	; 0xc4
 8007f58:	5a9b      	ldrh	r3, [r3, r2]
 8007f5a:	0019      	movs	r1, r3
 8007f5c:	2318      	movs	r3, #24
 8007f5e:	18fb      	adds	r3, r7, r3
 8007f60:	3301      	adds	r3, #1
 8007f62:	4a0e      	ldr	r2, [pc, #56]	; (8007f9c <astronode_send_msn_rr+0x14c>)
 8007f64:	2018      	movs	r0, #24
 8007f66:	1820      	adds	r0, r4, r0
 8007f68:	19c0      	adds	r0, r0, r7
 8007f6a:	6800      	ldr	r0, [r0, #0]
 8007f6c:	f003 fca8 	bl	800b8c0 <snprintf>
            send_debug_logs(serial_number);
 8007f70:	2318      	movs	r3, #24
 8007f72:	18e3      	adds	r3, r4, r3
 8007f74:	19db      	adds	r3, r3, r7
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	0018      	movs	r0, r3
 8007f7a:	f7fa ff07 	bl	8002d8c <send_debug_logs>
 8007f7e:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8007f80:	e003      	b.n	8007f8a <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8007f82:	4b07      	ldr	r3, [pc, #28]	; (8007fa0 <astronode_send_msn_rr+0x150>)
 8007f84:	0018      	movs	r0, r3
 8007f86:	f7fa ff01 	bl	8002d8c <send_debug_logs>
}
 8007f8a:	46c0      	nop			; (mov r8, r8)
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	b06d      	add	sp, #436	; 0x1b4
 8007f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f92:	46c0      	nop			; (mov r8, r8)
 8007f94:	fffffe68 	.word	0xfffffe68
 8007f98:	08012bd8 	.word	0x08012bd8
 8007f9c:	08012bb8 	.word	0x08012bb8
 8007fa0:	08012bf4 	.word	0x08012bf4

08007fa4 <astronode_send_nco_rr>:

void astronode_send_nco_rr(void)
{
 8007fa4:	b5b0      	push	{r4, r5, r7, lr}
 8007fa6:	b0fa      	sub	sp, #488	; 0x1e8
 8007fa8:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007faa:	258e      	movs	r5, #142	; 0x8e
 8007fac:	006d      	lsls	r5, r5, #1
 8007fae:	197b      	adds	r3, r7, r5
 8007fb0:	0018      	movs	r0, r3
 8007fb2:	23c6      	movs	r3, #198	; 0xc6
 8007fb4:	001a      	movs	r2, r3
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	f003 fd4c 	bl	800ba54 <memset>
    astronode_app_msg_t answer = {0};
 8007fbc:	4b26      	ldr	r3, [pc, #152]	; (8008058 <astronode_send_nco_rr+0xb4>)
 8007fbe:	24f4      	movs	r4, #244	; 0xf4
 8007fc0:	0064      	lsls	r4, r4, #1
 8007fc2:	191b      	adds	r3, r3, r4
 8007fc4:	19db      	adds	r3, r3, r7
 8007fc6:	0018      	movs	r0, r3
 8007fc8:	23c6      	movs	r3, #198	; 0xc6
 8007fca:	001a      	movs	r2, r3
 8007fcc:	2100      	movs	r1, #0
 8007fce:	f003 fd41 	bl	800ba54 <memset>

    request.op_code = ASTRONODE_OP_CODE_NCO_RR;
 8007fd2:	197b      	adds	r3, r7, r5
 8007fd4:	2218      	movs	r2, #24
 8007fd6:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007fd8:	2354      	movs	r3, #84	; 0x54
 8007fda:	18fa      	adds	r2, r7, r3
 8007fdc:	197b      	adds	r3, r7, r5
 8007fde:	0011      	movs	r1, r2
 8007fe0:	0018      	movs	r0, r3
 8007fe2:	f001 f86f 	bl	80090c4 <astronode_transport_send_receive>
 8007fe6:	0003      	movs	r3, r0
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d131      	bne.n	8008050 <astronode_send_nco_rr+0xac>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_NCO_RA)
 8007fec:	4b1a      	ldr	r3, [pc, #104]	; (8008058 <astronode_send_nco_rr+0xb4>)
 8007fee:	0021      	movs	r1, r4
 8007ff0:	185b      	adds	r3, r3, r1
 8007ff2:	19db      	adds	r3, r3, r7
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	2b98      	cmp	r3, #152	; 0x98
 8007ff8:	d126      	bne.n	8008048 <astronode_send_nco_rr+0xa4>
        {
            uint32_t time_to_next_pass = answer.p_payload[0]
 8007ffa:	4b17      	ldr	r3, [pc, #92]	; (8008058 <astronode_send_nco_rr+0xb4>)
 8007ffc:	185b      	adds	r3, r3, r1
 8007ffe:	19db      	adds	r3, r3, r7
 8008000:	785b      	ldrb	r3, [r3, #1]
 8008002:	001a      	movs	r2, r3
                                        + (answer.p_payload[1] << 8)
 8008004:	4b14      	ldr	r3, [pc, #80]	; (8008058 <astronode_send_nco_rr+0xb4>)
 8008006:	185b      	adds	r3, r3, r1
 8008008:	19db      	adds	r3, r3, r7
 800800a:	789b      	ldrb	r3, [r3, #2]
 800800c:	021b      	lsls	r3, r3, #8
 800800e:	18d2      	adds	r2, r2, r3
                                        + (answer.p_payload[2] << 16)
 8008010:	4b11      	ldr	r3, [pc, #68]	; (8008058 <astronode_send_nco_rr+0xb4>)
 8008012:	185b      	adds	r3, r3, r1
 8008014:	19db      	adds	r3, r3, r7
 8008016:	78db      	ldrb	r3, [r3, #3]
 8008018:	041b      	lsls	r3, r3, #16
 800801a:	18d2      	adds	r2, r2, r3
                                        + (answer.p_payload[3] << 24);
 800801c:	4b0e      	ldr	r3, [pc, #56]	; (8008058 <astronode_send_nco_rr+0xb4>)
 800801e:	185b      	adds	r3, r3, r1
 8008020:	19db      	adds	r3, r3, r7
 8008022:	791b      	ldrb	r3, [r3, #4]
 8008024:	061b      	lsls	r3, r3, #24
 8008026:	18d3      	adds	r3, r2, r3
            uint32_t time_to_next_pass = answer.p_payload[0]
 8008028:	22f2      	movs	r2, #242	; 0xf2
 800802a:	0052      	lsls	r2, r2, #1
 800802c:	18b9      	adds	r1, r7, r2
 800802e:	600b      	str	r3, [r1, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Next opportunity for communication with the Astrocast Network: %lds.", time_to_next_pass);
 8008030:	18bb      	adds	r3, r7, r2
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	4909      	ldr	r1, [pc, #36]	; (800805c <astronode_send_nco_rr+0xb8>)
 8008036:	1d3b      	adds	r3, r7, #4
 8008038:	0018      	movs	r0, r3
 800803a:	f003 fc75 	bl	800b928 <sprintf>
            send_debug_logs(str);
 800803e:	1d3b      	adds	r3, r7, #4
 8008040:	0018      	movs	r0, r3
 8008042:	f7fa fea3 	bl	8002d8c <send_debug_logs>
        else
        {
            send_debug_logs("Failed to read satellite constellation ephemeris data.");
        }
    }
}
 8008046:	e003      	b.n	8008050 <astronode_send_nco_rr+0xac>
            send_debug_logs("Failed to read satellite constellation ephemeris data.");
 8008048:	4b05      	ldr	r3, [pc, #20]	; (8008060 <astronode_send_nco_rr+0xbc>)
 800804a:	0018      	movs	r0, r3
 800804c:	f7fa fe9e 	bl	8002d8c <send_debug_logs>
}
 8008050:	46c0      	nop			; (mov r8, r8)
 8008052:	46bd      	mov	sp, r7
 8008054:	b07a      	add	sp, #488	; 0x1e8
 8008056:	bdb0      	pop	{r4, r5, r7, pc}
 8008058:	fffffe6c 	.word	0xfffffe6c
 800805c:	08012c1c 	.word	0x08012c1c
 8008060:	08012c64 	.word	0x08012c64

08008064 <astronode_send_evt_rr>:

void astronode_send_evt_rr(void)
{
 8008064:	b5b0      	push	{r4, r5, r7, lr}
 8008066:	b0e4      	sub	sp, #400	; 0x190
 8008068:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800806a:	24c8      	movs	r4, #200	; 0xc8
 800806c:	193b      	adds	r3, r7, r4
 800806e:	0018      	movs	r0, r3
 8008070:	23c6      	movs	r3, #198	; 0xc6
 8008072:	001a      	movs	r2, r3
 8008074:	2100      	movs	r1, #0
 8008076:	f003 fced 	bl	800ba54 <memset>
    astronode_app_msg_t answer = {0};
 800807a:	4b31      	ldr	r3, [pc, #196]	; (8008140 <astronode_send_evt_rr+0xdc>)
 800807c:	25c8      	movs	r5, #200	; 0xc8
 800807e:	006d      	lsls	r5, r5, #1
 8008080:	195b      	adds	r3, r3, r5
 8008082:	19db      	adds	r3, r3, r7
 8008084:	0018      	movs	r0, r3
 8008086:	23c6      	movs	r3, #198	; 0xc6
 8008088:	001a      	movs	r2, r3
 800808a:	2100      	movs	r1, #0
 800808c:	f003 fce2 	bl	800ba54 <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 8008090:	193b      	adds	r3, r7, r4
 8008092:	2265      	movs	r2, #101	; 0x65
 8008094:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008096:	003a      	movs	r2, r7
 8008098:	193b      	adds	r3, r7, r4
 800809a:	0011      	movs	r1, r2
 800809c:	0018      	movs	r0, r3
 800809e:	f001 f811 	bl	80090c4 <astronode_transport_send_receive>
 80080a2:	0003      	movs	r3, r0
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d147      	bne.n	8008138 <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 80080a8:	4b25      	ldr	r3, [pc, #148]	; (8008140 <astronode_send_evt_rr+0xdc>)
 80080aa:	195b      	adds	r3, r3, r5
 80080ac:	19db      	adds	r3, r3, r7
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	2be5      	cmp	r3, #229	; 0xe5
 80080b2:	d141      	bne.n	8008138 <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 80080b4:	4b22      	ldr	r3, [pc, #136]	; (8008140 <astronode_send_evt_rr+0xdc>)
 80080b6:	195b      	adds	r3, r3, r5
 80080b8:	19db      	adds	r3, r3, r7
 80080ba:	785b      	ldrb	r3, [r3, #1]
 80080bc:	001a      	movs	r2, r3
 80080be:	2301      	movs	r3, #1
 80080c0:	4013      	ands	r3, r2
 80080c2:	d006      	beq.n	80080d2 <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 80080c4:	4b1f      	ldr	r3, [pc, #124]	; (8008144 <astronode_send_evt_rr+0xe0>)
 80080c6:	2201      	movs	r2, #1
 80080c8:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 80080ca:	4b1f      	ldr	r3, [pc, #124]	; (8008148 <astronode_send_evt_rr+0xe4>)
 80080cc:	0018      	movs	r0, r3
 80080ce:	f7fa fe5d 	bl	8002d8c <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 80080d2:	4b1b      	ldr	r3, [pc, #108]	; (8008140 <astronode_send_evt_rr+0xdc>)
 80080d4:	22c8      	movs	r2, #200	; 0xc8
 80080d6:	0052      	lsls	r2, r2, #1
 80080d8:	189b      	adds	r3, r3, r2
 80080da:	19db      	adds	r3, r3, r7
 80080dc:	785b      	ldrb	r3, [r3, #1]
 80080de:	001a      	movs	r2, r3
 80080e0:	2302      	movs	r3, #2
 80080e2:	4013      	ands	r3, r2
 80080e4:	d006      	beq.n	80080f4 <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 80080e6:	4b19      	ldr	r3, [pc, #100]	; (800814c <astronode_send_evt_rr+0xe8>)
 80080e8:	2201      	movs	r2, #1
 80080ea:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 80080ec:	4b18      	ldr	r3, [pc, #96]	; (8008150 <astronode_send_evt_rr+0xec>)
 80080ee:	0018      	movs	r0, r3
 80080f0:	f7fa fe4c 	bl	8002d8c <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 80080f4:	4b12      	ldr	r3, [pc, #72]	; (8008140 <astronode_send_evt_rr+0xdc>)
 80080f6:	22c8      	movs	r2, #200	; 0xc8
 80080f8:	0052      	lsls	r2, r2, #1
 80080fa:	189b      	adds	r3, r3, r2
 80080fc:	19db      	adds	r3, r3, r7
 80080fe:	785b      	ldrb	r3, [r3, #1]
 8008100:	001a      	movs	r2, r3
 8008102:	2304      	movs	r3, #4
 8008104:	4013      	ands	r3, r2
 8008106:	d006      	beq.n	8008116 <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 8008108:	4b12      	ldr	r3, [pc, #72]	; (8008154 <astronode_send_evt_rr+0xf0>)
 800810a:	2201      	movs	r2, #1
 800810c:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 800810e:	4b12      	ldr	r3, [pc, #72]	; (8008158 <astronode_send_evt_rr+0xf4>)
 8008110:	0018      	movs	r0, r3
 8008112:	f7fa fe3b 	bl	8002d8c <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 8008116:	4b0a      	ldr	r3, [pc, #40]	; (8008140 <astronode_send_evt_rr+0xdc>)
 8008118:	22c8      	movs	r2, #200	; 0xc8
 800811a:	0052      	lsls	r2, r2, #1
 800811c:	189b      	adds	r3, r3, r2
 800811e:	19db      	adds	r3, r3, r7
 8008120:	785b      	ldrb	r3, [r3, #1]
 8008122:	001a      	movs	r2, r3
 8008124:	2308      	movs	r3, #8
 8008126:	4013      	ands	r3, r2
 8008128:	d006      	beq.n	8008138 <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 800812a:	4b0c      	ldr	r3, [pc, #48]	; (800815c <astronode_send_evt_rr+0xf8>)
 800812c:	2201      	movs	r2, #1
 800812e:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 8008130:	4b0b      	ldr	r3, [pc, #44]	; (8008160 <astronode_send_evt_rr+0xfc>)
 8008132:	0018      	movs	r0, r3
 8008134:	f7fa fe2a 	bl	8002d8c <send_debug_logs>
            }

        }
    }
}
 8008138:	46c0      	nop			; (mov r8, r8)
 800813a:	46bd      	mov	sp, r7
 800813c:	b064      	add	sp, #400	; 0x190
 800813e:	bdb0      	pop	{r4, r5, r7, pc}
 8008140:	fffffe70 	.word	0xfffffe70
 8008144:	20000b38 	.word	0x20000b38
 8008148:	08012c9c 	.word	0x08012c9c
 800814c:	20000b39 	.word	0x20000b39
 8008150:	08012cc0 	.word	0x08012cc0
 8008154:	20000b3a 	.word	0x20000b3a
 8008158:	08012cd8 	.word	0x08012cd8
 800815c:	20000b3b 	.word	0x20000b3b
 8008160:	08012cec 	.word	0x08012cec

08008164 <astronode_send_geo_wr>:

void astronode_send_geo_wr(int32_t latitude, int32_t longitude)
{
 8008164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008166:	b0e7      	sub	sp, #412	; 0x19c
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
    astronode_app_msg_t request = {0};
 800816e:	24d0      	movs	r4, #208	; 0xd0
 8008170:	193b      	adds	r3, r7, r4
 8008172:	0018      	movs	r0, r3
 8008174:	23c6      	movs	r3, #198	; 0xc6
 8008176:	001a      	movs	r2, r3
 8008178:	2100      	movs	r1, #0
 800817a:	f003 fc6b 	bl	800ba54 <memset>
    astronode_app_msg_t answer = {0};
 800817e:	4b56      	ldr	r3, [pc, #344]	; (80082d8 <astronode_send_geo_wr+0x174>)
 8008180:	26cc      	movs	r6, #204	; 0xcc
 8008182:	0076      	lsls	r6, r6, #1
 8008184:	199b      	adds	r3, r3, r6
 8008186:	19db      	adds	r3, r3, r7
 8008188:	0018      	movs	r0, r3
 800818a:	23c6      	movs	r3, #198	; 0xc6
 800818c:	001a      	movs	r2, r3
 800818e:	2100      	movs	r1, #0
 8008190:	f003 fc60 	bl	800ba54 <memset>

    request.op_code = ASTRONODE_OP_CODE_GEO_WR;
 8008194:	193b      	adds	r3, r7, r4
 8008196:	2235      	movs	r2, #53	; 0x35
 8008198:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) latitude;
 800819a:	193b      	adds	r3, r7, r4
 800819c:	22c4      	movs	r2, #196	; 0xc4
 800819e:	5a9b      	ldrh	r3, [r3, r2]
 80081a0:	1c5a      	adds	r2, r3, #1
 80081a2:	b290      	uxth	r0, r2
 80081a4:	193a      	adds	r2, r7, r4
 80081a6:	21c4      	movs	r1, #196	; 0xc4
 80081a8:	5250      	strh	r0, [r2, r1]
 80081aa:	0019      	movs	r1, r3
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	b2da      	uxtb	r2, r3
 80081b0:	193b      	adds	r3, r7, r4
 80081b2:	185b      	adds	r3, r3, r1
 80081b4:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 8);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	1218      	asrs	r0, r3, #8
 80081ba:	0025      	movs	r5, r4
 80081bc:	197b      	adds	r3, r7, r5
 80081be:	22c4      	movs	r2, #196	; 0xc4
 80081c0:	5a9b      	ldrh	r3, [r3, r2]
 80081c2:	1c5a      	adds	r2, r3, #1
 80081c4:	b294      	uxth	r4, r2
 80081c6:	197a      	adds	r2, r7, r5
 80081c8:	21c4      	movs	r1, #196	; 0xc4
 80081ca:	5254      	strh	r4, [r2, r1]
 80081cc:	0019      	movs	r1, r3
 80081ce:	b2c2      	uxtb	r2, r0
 80081d0:	002c      	movs	r4, r5
 80081d2:	193b      	adds	r3, r7, r4
 80081d4:	185b      	adds	r3, r3, r1
 80081d6:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 16);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	1418      	asrs	r0, r3, #16
 80081dc:	0025      	movs	r5, r4
 80081de:	197b      	adds	r3, r7, r5
 80081e0:	22c4      	movs	r2, #196	; 0xc4
 80081e2:	5a9b      	ldrh	r3, [r3, r2]
 80081e4:	1c5a      	adds	r2, r3, #1
 80081e6:	b294      	uxth	r4, r2
 80081e8:	197a      	adds	r2, r7, r5
 80081ea:	21c4      	movs	r1, #196	; 0xc4
 80081ec:	5254      	strh	r4, [r2, r1]
 80081ee:	0019      	movs	r1, r3
 80081f0:	b2c2      	uxtb	r2, r0
 80081f2:	002c      	movs	r4, r5
 80081f4:	193b      	adds	r3, r7, r4
 80081f6:	185b      	adds	r3, r3, r1
 80081f8:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 24);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	1618      	asrs	r0, r3, #24
 80081fe:	0025      	movs	r5, r4
 8008200:	197b      	adds	r3, r7, r5
 8008202:	22c4      	movs	r2, #196	; 0xc4
 8008204:	5a9b      	ldrh	r3, [r3, r2]
 8008206:	1c5a      	adds	r2, r3, #1
 8008208:	b294      	uxth	r4, r2
 800820a:	197a      	adds	r2, r7, r5
 800820c:	21c4      	movs	r1, #196	; 0xc4
 800820e:	5254      	strh	r4, [r2, r1]
 8008210:	0019      	movs	r1, r3
 8008212:	b2c2      	uxtb	r2, r0
 8008214:	002c      	movs	r4, r5
 8008216:	193b      	adds	r3, r7, r4
 8008218:	185b      	adds	r3, r3, r1
 800821a:	705a      	strb	r2, [r3, #1]

    request.p_payload[request.payload_len++] = (uint8_t) longitude;
 800821c:	193b      	adds	r3, r7, r4
 800821e:	22c4      	movs	r2, #196	; 0xc4
 8008220:	5a9b      	ldrh	r3, [r3, r2]
 8008222:	1c5a      	adds	r2, r3, #1
 8008224:	b290      	uxth	r0, r2
 8008226:	193a      	adds	r2, r7, r4
 8008228:	21c4      	movs	r1, #196	; 0xc4
 800822a:	5250      	strh	r0, [r2, r1]
 800822c:	0019      	movs	r1, r3
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	b2da      	uxtb	r2, r3
 8008232:	193b      	adds	r3, r7, r4
 8008234:	185b      	adds	r3, r3, r1
 8008236:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 8);
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	1218      	asrs	r0, r3, #8
 800823c:	0025      	movs	r5, r4
 800823e:	197b      	adds	r3, r7, r5
 8008240:	22c4      	movs	r2, #196	; 0xc4
 8008242:	5a9b      	ldrh	r3, [r3, r2]
 8008244:	1c5a      	adds	r2, r3, #1
 8008246:	b294      	uxth	r4, r2
 8008248:	197a      	adds	r2, r7, r5
 800824a:	21c4      	movs	r1, #196	; 0xc4
 800824c:	5254      	strh	r4, [r2, r1]
 800824e:	0019      	movs	r1, r3
 8008250:	b2c2      	uxtb	r2, r0
 8008252:	002c      	movs	r4, r5
 8008254:	193b      	adds	r3, r7, r4
 8008256:	185b      	adds	r3, r3, r1
 8008258:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 16);
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	1418      	asrs	r0, r3, #16
 800825e:	0025      	movs	r5, r4
 8008260:	197b      	adds	r3, r7, r5
 8008262:	22c4      	movs	r2, #196	; 0xc4
 8008264:	5a9b      	ldrh	r3, [r3, r2]
 8008266:	1c5a      	adds	r2, r3, #1
 8008268:	b294      	uxth	r4, r2
 800826a:	197a      	adds	r2, r7, r5
 800826c:	21c4      	movs	r1, #196	; 0xc4
 800826e:	5254      	strh	r4, [r2, r1]
 8008270:	0019      	movs	r1, r3
 8008272:	b2c2      	uxtb	r2, r0
 8008274:	002c      	movs	r4, r5
 8008276:	193b      	adds	r3, r7, r4
 8008278:	185b      	adds	r3, r3, r1
 800827a:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 24);
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	1618      	asrs	r0, r3, #24
 8008280:	0025      	movs	r5, r4
 8008282:	197b      	adds	r3, r7, r5
 8008284:	22c4      	movs	r2, #196	; 0xc4
 8008286:	5a9b      	ldrh	r3, [r3, r2]
 8008288:	1c5a      	adds	r2, r3, #1
 800828a:	b294      	uxth	r4, r2
 800828c:	197a      	adds	r2, r7, r5
 800828e:	21c4      	movs	r1, #196	; 0xc4
 8008290:	5254      	strh	r4, [r2, r1]
 8008292:	0019      	movs	r1, r3
 8008294:	b2c2      	uxtb	r2, r0
 8008296:	0028      	movs	r0, r5
 8008298:	183b      	adds	r3, r7, r0
 800829a:	185b      	adds	r3, r3, r1
 800829c:	705a      	strb	r2, [r3, #1]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800829e:	2308      	movs	r3, #8
 80082a0:	18fa      	adds	r2, r7, r3
 80082a2:	183b      	adds	r3, r7, r0
 80082a4:	0011      	movs	r1, r2
 80082a6:	0018      	movs	r0, r3
 80082a8:	f000 ff0c 	bl	80090c4 <astronode_transport_send_receive>
 80082ac:	0003      	movs	r3, r0
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d10e      	bne.n	80082d0 <astronode_send_geo_wr+0x16c>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_GEO_WA)
 80082b2:	4b09      	ldr	r3, [pc, #36]	; (80082d8 <astronode_send_geo_wr+0x174>)
 80082b4:	199b      	adds	r3, r3, r6
 80082b6:	19db      	adds	r3, r3, r7
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	2bb5      	cmp	r3, #181	; 0xb5
 80082bc:	d104      	bne.n	80082c8 <astronode_send_geo_wr+0x164>
        {
            send_debug_logs("Geolocation values were set successfully.");
 80082be:	4b07      	ldr	r3, [pc, #28]	; (80082dc <astronode_send_geo_wr+0x178>)
 80082c0:	0018      	movs	r0, r3
 80082c2:	f7fa fd63 	bl	8002d8c <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the geolocation information.");
        }
    }
}
 80082c6:	e003      	b.n	80082d0 <astronode_send_geo_wr+0x16c>
            send_debug_logs("Failed to set the geolocation information.");
 80082c8:	4b05      	ldr	r3, [pc, #20]	; (80082e0 <astronode_send_geo_wr+0x17c>)
 80082ca:	0018      	movs	r0, r3
 80082cc:	f7fa fd5e 	bl	8002d8c <send_debug_logs>
}
 80082d0:	46c0      	nop			; (mov r8, r8)
 80082d2:	46bd      	mov	sp, r7
 80082d4:	b067      	add	sp, #412	; 0x19c
 80082d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082d8:	fffffe70 	.word	0xfffffe70
 80082dc:	08012d00 	.word	0x08012d00
 80082e0:	08012d2c 	.word	0x08012d2c

080082e4 <astronode_send_pld_er>:
        }
    }
}

bool astronode_send_pld_er ( uint16_t payload_id , char *p_payload , uint16_t payload_length )
{
 80082e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082e6:	b0fb      	sub	sp, #492	; 0x1ec
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6039      	str	r1, [r7, #0]
 80082ec:	0011      	movs	r1, r2
 80082ee:	4b4a      	ldr	r3, [pc, #296]	; (8008418 <astronode_send_pld_er+0x134>)
 80082f0:	26f4      	movs	r6, #244	; 0xf4
 80082f2:	0076      	lsls	r6, r6, #1
 80082f4:	199b      	adds	r3, r3, r6
 80082f6:	19db      	adds	r3, r3, r7
 80082f8:	1c02      	adds	r2, r0, #0
 80082fa:	801a      	strh	r2, [r3, #0]
 80082fc:	4b47      	ldr	r3, [pc, #284]	; (800841c <astronode_send_pld_er+0x138>)
 80082fe:	199b      	adds	r3, r3, r6
 8008300:	19db      	adds	r3, r3, r7
 8008302:	1c0a      	adds	r2, r1, #0
 8008304:	801a      	strh	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8008306:	2490      	movs	r4, #144	; 0x90
 8008308:	0064      	lsls	r4, r4, #1
 800830a:	193b      	adds	r3, r7, r4
 800830c:	0018      	movs	r0, r3
 800830e:	23c6      	movs	r3, #198	; 0xc6
 8008310:	001a      	movs	r2, r3
 8008312:	2100      	movs	r1, #0
 8008314:	f003 fb9e 	bl	800ba54 <memset>
    astronode_app_msg_t answer = {0};
 8008318:	4b41      	ldr	r3, [pc, #260]	; (8008420 <astronode_send_pld_er+0x13c>)
 800831a:	199b      	adds	r3, r3, r6
 800831c:	19db      	adds	r3, r3, r7
 800831e:	0018      	movs	r0, r3
 8008320:	23c6      	movs	r3, #198	; 0xc6
 8008322:	001a      	movs	r2, r3
 8008324:	2100      	movs	r1, #0
 8008326:	f003 fb95 	bl	800ba54 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_ER;
 800832a:	193b      	adds	r3, r7, r4
 800832c:	2225      	movs	r2, #37	; 0x25
 800832e:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) payload_id;
 8008330:	193b      	adds	r3, r7, r4
 8008332:	22c4      	movs	r2, #196	; 0xc4
 8008334:	5a9b      	ldrh	r3, [r3, r2]
 8008336:	1c5a      	adds	r2, r3, #1
 8008338:	b290      	uxth	r0, r2
 800833a:	193a      	adds	r2, r7, r4
 800833c:	21c4      	movs	r1, #196	; 0xc4
 800833e:	5250      	strh	r0, [r2, r1]
 8008340:	0019      	movs	r1, r3
 8008342:	4b35      	ldr	r3, [pc, #212]	; (8008418 <astronode_send_pld_er+0x134>)
 8008344:	199b      	adds	r3, r3, r6
 8008346:	19db      	adds	r3, r3, r7
 8008348:	881b      	ldrh	r3, [r3, #0]
 800834a:	b2da      	uxtb	r2, r3
 800834c:	193b      	adds	r3, r7, r4
 800834e:	185b      	adds	r3, r3, r1
 8008350:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (payload_id >> 8);
 8008352:	4b31      	ldr	r3, [pc, #196]	; (8008418 <astronode_send_pld_er+0x134>)
 8008354:	199b      	adds	r3, r3, r6
 8008356:	19db      	adds	r3, r3, r7
 8008358:	881b      	ldrh	r3, [r3, #0]
 800835a:	0a1b      	lsrs	r3, r3, #8
 800835c:	b298      	uxth	r0, r3
 800835e:	0025      	movs	r5, r4
 8008360:	197b      	adds	r3, r7, r5
 8008362:	22c4      	movs	r2, #196	; 0xc4
 8008364:	5a9b      	ldrh	r3, [r3, r2]
 8008366:	1c5a      	adds	r2, r3, #1
 8008368:	b294      	uxth	r4, r2
 800836a:	197a      	adds	r2, r7, r5
 800836c:	21c4      	movs	r1, #196	; 0xc4
 800836e:	5254      	strh	r4, [r2, r1]
 8008370:	0019      	movs	r1, r3
 8008372:	b2c2      	uxtb	r2, r0
 8008374:	002c      	movs	r4, r5
 8008376:	193b      	adds	r3, r7, r4
 8008378:	185b      	adds	r3, r3, r1
 800837a:	705a      	strb	r2, [r3, #1]

    memcpy(&request.p_payload[request.payload_len], p_payload, payload_length);
 800837c:	193b      	adds	r3, r7, r4
 800837e:	22c4      	movs	r2, #196	; 0xc4
 8008380:	5a9b      	ldrh	r3, [r3, r2]
 8008382:	001a      	movs	r2, r3
 8008384:	193b      	adds	r3, r7, r4
 8008386:	189b      	adds	r3, r3, r2
 8008388:	1c58      	adds	r0, r3, #1
 800838a:	4b24      	ldr	r3, [pc, #144]	; (800841c <astronode_send_pld_er+0x138>)
 800838c:	199b      	adds	r3, r3, r6
 800838e:	19db      	adds	r3, r3, r7
 8008390:	881a      	ldrh	r2, [r3, #0]
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	0019      	movs	r1, r3
 8008396:	f003 fc42 	bl	800bc1e <memcpy>
    request.payload_len = 2 + payload_length;
 800839a:	4b20      	ldr	r3, [pc, #128]	; (800841c <astronode_send_pld_er+0x138>)
 800839c:	199b      	adds	r3, r3, r6
 800839e:	19db      	adds	r3, r3, r7
 80083a0:	881b      	ldrh	r3, [r3, #0]
 80083a2:	3302      	adds	r3, #2
 80083a4:	b299      	uxth	r1, r3
 80083a6:	193b      	adds	r3, r7, r4
 80083a8:	22c4      	movs	r2, #196	; 0xc4
 80083aa:	5299      	strh	r1, [r3, r2]
    char s[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 80083ac:	2358      	movs	r3, #88	; 0x58
 80083ae:	18fa      	adds	r2, r7, r3
 80083b0:	193b      	adds	r3, r7, r4
 80083b2:	0011      	movs	r1, r2
 80083b4:	0018      	movs	r0, r3
 80083b6:	f000 fe85 	bl	80090c4 <astronode_transport_send_receive>
 80083ba:	0003      	movs	r3, r0
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d125      	bne.n	800840c <astronode_send_pld_er+0x128>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_EA)
 80083c0:	4b17      	ldr	r3, [pc, #92]	; (8008420 <astronode_send_pld_er+0x13c>)
 80083c2:	199b      	adds	r3, r3, r6
 80083c4:	19db      	adds	r3, r3, r7
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	2ba5      	cmp	r3, #165	; 0xa5
 80083ca:	d10f      	bne.n	80083ec <astronode_send_pld_er+0x108>
        {
        	sprintf ( s , "astronode_application: payload %d queued." , payload_id ) ;
 80083cc:	4b12      	ldr	r3, [pc, #72]	; (8008418 <astronode_send_pld_er+0x134>)
 80083ce:	199b      	adds	r3, r3, r6
 80083d0:	19db      	adds	r3, r3, r7
 80083d2:	881a      	ldrh	r2, [r3, #0]
 80083d4:	4913      	ldr	r1, [pc, #76]	; (8008424 <astronode_send_pld_er+0x140>)
 80083d6:	2408      	movs	r4, #8
 80083d8:	193b      	adds	r3, r7, r4
 80083da:	0018      	movs	r0, r3
 80083dc:	f003 faa4 	bl	800b928 <sprintf>
            send_debug_logs ( s ) ;
 80083e0:	193b      	adds	r3, r7, r4
 80083e2:	0018      	movs	r0, r3
 80083e4:	f7fa fcd2 	bl	8002d8c <send_debug_logs>
            return true ;
 80083e8:	2301      	movs	r3, #1
 80083ea:	e010      	b.n	800840e <astronode_send_pld_er+0x12a>
        }
        else
        {
            sprintf ( s , "astronode_application: payload %d not queued." , payload_id ) ;
 80083ec:	4b0a      	ldr	r3, [pc, #40]	; (8008418 <astronode_send_pld_er+0x134>)
 80083ee:	22f4      	movs	r2, #244	; 0xf4
 80083f0:	0052      	lsls	r2, r2, #1
 80083f2:	189b      	adds	r3, r3, r2
 80083f4:	19db      	adds	r3, r3, r7
 80083f6:	881a      	ldrh	r2, [r3, #0]
 80083f8:	490b      	ldr	r1, [pc, #44]	; (8008428 <astronode_send_pld_er+0x144>)
 80083fa:	2408      	movs	r4, #8
 80083fc:	193b      	adds	r3, r7, r4
 80083fe:	0018      	movs	r0, r3
 8008400:	f003 fa92 	bl	800b928 <sprintf>
            send_debug_logs ( s ) ;
 8008404:	193b      	adds	r3, r7, r4
 8008406:	0018      	movs	r0, r3
 8008408:	f7fa fcc0 	bl	8002d8c <send_debug_logs>
        }
    }
    return false ;
 800840c:	2300      	movs	r3, #0
}
 800840e:	0018      	movs	r0, r3
 8008410:	46bd      	mov	sp, r7
 8008412:	b07b      	add	sp, #492	; 0x1ec
 8008414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008416:	46c0      	nop			; (mov r8, r8)
 8008418:	fffffe1e 	.word	0xfffffe1e
 800841c:	fffffe1c 	.word	0xfffffe1c
 8008420:	fffffe70 	.word	0xfffffe70
 8008424:	08012da4 	.word	0x08012da4
 8008428:	08012dd0 	.word	0x08012dd0

0800842c <astronode_send_pld_fr>:

void astronode_send_pld_fr(void)
{
 800842c:	b5b0      	push	{r4, r5, r7, lr}
 800842e:	b0e4      	sub	sp, #400	; 0x190
 8008430:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008432:	24c8      	movs	r4, #200	; 0xc8
 8008434:	193b      	adds	r3, r7, r4
 8008436:	0018      	movs	r0, r3
 8008438:	23c6      	movs	r3, #198	; 0xc6
 800843a:	001a      	movs	r2, r3
 800843c:	2100      	movs	r1, #0
 800843e:	f003 fb09 	bl	800ba54 <memset>
    astronode_app_msg_t answer = {0};
 8008442:	4b15      	ldr	r3, [pc, #84]	; (8008498 <astronode_send_pld_fr+0x6c>)
 8008444:	25c8      	movs	r5, #200	; 0xc8
 8008446:	006d      	lsls	r5, r5, #1
 8008448:	195b      	adds	r3, r3, r5
 800844a:	19db      	adds	r3, r3, r7
 800844c:	0018      	movs	r0, r3
 800844e:	23c6      	movs	r3, #198	; 0xc6
 8008450:	001a      	movs	r2, r3
 8008452:	2100      	movs	r1, #0
 8008454:	f003 fafe 	bl	800ba54 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_FR;
 8008458:	193b      	adds	r3, r7, r4
 800845a:	2227      	movs	r2, #39	; 0x27
 800845c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800845e:	003a      	movs	r2, r7
 8008460:	193b      	adds	r3, r7, r4
 8008462:	0011      	movs	r1, r2
 8008464:	0018      	movs	r0, r3
 8008466:	f000 fe2d 	bl	80090c4 <astronode_transport_send_receive>
 800846a:	0003      	movs	r3, r0
 800846c:	2b01      	cmp	r3, #1
 800846e:	d10e      	bne.n	800848e <astronode_send_pld_fr+0x62>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_FA)
 8008470:	4b09      	ldr	r3, [pc, #36]	; (8008498 <astronode_send_pld_fr+0x6c>)
 8008472:	195b      	adds	r3, r3, r5
 8008474:	19db      	adds	r3, r3, r7
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	2ba7      	cmp	r3, #167	; 0xa7
 800847a:	d104      	bne.n	8008486 <astronode_send_pld_fr+0x5a>
        {
            send_debug_logs("astronode_application: payload queue has been cleared.");
 800847c:	4b07      	ldr	r3, [pc, #28]	; (800849c <astronode_send_pld_fr+0x70>)
 800847e:	0018      	movs	r0, r3
 8008480:	f7fa fc84 	bl	8002d8c <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
        }
    }
}
 8008484:	e003      	b.n	800848e <astronode_send_pld_fr+0x62>
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
 8008486:	4b06      	ldr	r3, [pc, #24]	; (80084a0 <astronode_send_pld_fr+0x74>)
 8008488:	0018      	movs	r0, r3
 800848a:	f7fa fc7f 	bl	8002d8c <send_debug_logs>
}
 800848e:	46c0      	nop			; (mov r8, r8)
 8008490:	46bd      	mov	sp, r7
 8008492:	b064      	add	sp, #400	; 0x190
 8008494:	bdb0      	pop	{r4, r5, r7, pc}
 8008496:	46c0      	nop			; (mov r8, r8)
 8008498:	fffffe70 	.word	0xfffffe70
 800849c:	08012e00 	.word	0x08012e00
 80084a0:	08012e38 	.word	0x08012e38

080084a4 <astronode_send_res_cr>:

void astronode_send_res_cr(void)
{
 80084a4:	b5b0      	push	{r4, r5, r7, lr}
 80084a6:	b0e4      	sub	sp, #400	; 0x190
 80084a8:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80084aa:	24c8      	movs	r4, #200	; 0xc8
 80084ac:	193b      	adds	r3, r7, r4
 80084ae:	0018      	movs	r0, r3
 80084b0:	23c6      	movs	r3, #198	; 0xc6
 80084b2:	001a      	movs	r2, r3
 80084b4:	2100      	movs	r1, #0
 80084b6:	f003 facd 	bl	800ba54 <memset>
    astronode_app_msg_t answer = {0};
 80084ba:	4b16      	ldr	r3, [pc, #88]	; (8008514 <astronode_send_res_cr+0x70>)
 80084bc:	25c8      	movs	r5, #200	; 0xc8
 80084be:	006d      	lsls	r5, r5, #1
 80084c0:	195b      	adds	r3, r3, r5
 80084c2:	19db      	adds	r3, r3, r7
 80084c4:	0018      	movs	r0, r3
 80084c6:	23c6      	movs	r3, #198	; 0xc6
 80084c8:	001a      	movs	r2, r3
 80084ca:	2100      	movs	r1, #0
 80084cc:	f003 fac2 	bl	800ba54 <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 80084d0:	193b      	adds	r3, r7, r4
 80084d2:	2255      	movs	r2, #85	; 0x55
 80084d4:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80084d6:	003a      	movs	r2, r7
 80084d8:	193b      	adds	r3, r7, r4
 80084da:	0011      	movs	r1, r2
 80084dc:	0018      	movs	r0, r3
 80084de:	f000 fdf1 	bl	80090c4 <astronode_transport_send_receive>
 80084e2:	0003      	movs	r3, r0
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d111      	bne.n	800850c <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 80084e8:	4b0a      	ldr	r3, [pc, #40]	; (8008514 <astronode_send_res_cr+0x70>)
 80084ea:	195b      	adds	r3, r3, r5
 80084ec:	19db      	adds	r3, r3, r7
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	2bd5      	cmp	r3, #213	; 0xd5
 80084f2:	d107      	bne.n	8008504 <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 80084f4:	4b08      	ldr	r3, [pc, #32]	; (8008518 <astronode_send_res_cr+0x74>)
 80084f6:	2200      	movs	r2, #0
 80084f8:	701a      	strb	r2, [r3, #0]
            send_debug_logs("astronode_application: The reset has been cleared.");
 80084fa:	4b08      	ldr	r3, [pc, #32]	; (800851c <astronode_send_res_cr+0x78>)
 80084fc:	0018      	movs	r0, r3
 80084fe:	f7fa fc45 	bl	8002d8c <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No reset to clear.");
        }
    }
}
 8008502:	e003      	b.n	800850c <astronode_send_res_cr+0x68>
            send_debug_logs("astronode_application: No reset to clear.");
 8008504:	4b06      	ldr	r3, [pc, #24]	; (8008520 <astronode_send_res_cr+0x7c>)
 8008506:	0018      	movs	r0, r3
 8008508:	f7fa fc40 	bl	8002d8c <send_debug_logs>
}
 800850c:	46c0      	nop			; (mov r8, r8)
 800850e:	46bd      	mov	sp, r7
 8008510:	b064      	add	sp, #400	; 0x190
 8008512:	bdb0      	pop	{r4, r5, r7, pc}
 8008514:	fffffe70 	.word	0xfffffe70
 8008518:	20000b39 	.word	0x20000b39
 800851c:	08012e74 	.word	0x08012e74
 8008520:	08012ea8 	.word	0x08012ea8

08008524 <astronode_send_rtc_rr>:

void astronode_send_rtc_rr(void)
{
 8008524:	b5b0      	push	{r4, r5, r7, lr}
 8008526:	b0fa      	sub	sp, #488	; 0x1e8
 8008528:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800852a:	258e      	movs	r5, #142	; 0x8e
 800852c:	006d      	lsls	r5, r5, #1
 800852e:	197b      	adds	r3, r7, r5
 8008530:	0018      	movs	r0, r3
 8008532:	23c6      	movs	r3, #198	; 0xc6
 8008534:	001a      	movs	r2, r3
 8008536:	2100      	movs	r1, #0
 8008538:	f003 fa8c 	bl	800ba54 <memset>
    astronode_app_msg_t answer = {0};
 800853c:	4b26      	ldr	r3, [pc, #152]	; (80085d8 <astronode_send_rtc_rr+0xb4>)
 800853e:	24f4      	movs	r4, #244	; 0xf4
 8008540:	0064      	lsls	r4, r4, #1
 8008542:	191b      	adds	r3, r3, r4
 8008544:	19db      	adds	r3, r3, r7
 8008546:	0018      	movs	r0, r3
 8008548:	23c6      	movs	r3, #198	; 0xc6
 800854a:	001a      	movs	r2, r3
 800854c:	2100      	movs	r1, #0
 800854e:	f003 fa81 	bl	800ba54 <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR;
 8008552:	197b      	adds	r3, r7, r5
 8008554:	2217      	movs	r2, #23
 8008556:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008558:	2354      	movs	r3, #84	; 0x54
 800855a:	18fa      	adds	r2, r7, r3
 800855c:	197b      	adds	r3, r7, r5
 800855e:	0011      	movs	r1, r2
 8008560:	0018      	movs	r0, r3
 8008562:	f000 fdaf 	bl	80090c4 <astronode_transport_send_receive>
 8008566:	0003      	movs	r3, r0
 8008568:	2b01      	cmp	r3, #1
 800856a:	d131      	bne.n	80085d0 <astronode_send_rtc_rr+0xac>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RTC_RA)
 800856c:	4b1a      	ldr	r3, [pc, #104]	; (80085d8 <astronode_send_rtc_rr+0xb4>)
 800856e:	0021      	movs	r1, r4
 8008570:	185b      	adds	r3, r3, r1
 8008572:	19db      	adds	r3, r3, r7
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	2b97      	cmp	r3, #151	; 0x97
 8008578:	d126      	bne.n	80085c8 <astronode_send_rtc_rr+0xa4>
        {
            uint32_t rtc_time = answer.p_payload[0]
 800857a:	4b17      	ldr	r3, [pc, #92]	; (80085d8 <astronode_send_rtc_rr+0xb4>)
 800857c:	185b      	adds	r3, r3, r1
 800857e:	19db      	adds	r3, r3, r7
 8008580:	785b      	ldrb	r3, [r3, #1]
 8008582:	001a      	movs	r2, r3
                                        + (answer.p_payload[1] << 8)
 8008584:	4b14      	ldr	r3, [pc, #80]	; (80085d8 <astronode_send_rtc_rr+0xb4>)
 8008586:	185b      	adds	r3, r3, r1
 8008588:	19db      	adds	r3, r3, r7
 800858a:	789b      	ldrb	r3, [r3, #2]
 800858c:	021b      	lsls	r3, r3, #8
 800858e:	18d2      	adds	r2, r2, r3
                                        + (answer.p_payload[2] << 16)
 8008590:	4b11      	ldr	r3, [pc, #68]	; (80085d8 <astronode_send_rtc_rr+0xb4>)
 8008592:	185b      	adds	r3, r3, r1
 8008594:	19db      	adds	r3, r3, r7
 8008596:	78db      	ldrb	r3, [r3, #3]
 8008598:	041b      	lsls	r3, r3, #16
 800859a:	18d2      	adds	r2, r2, r3
                                        + (answer.p_payload[3] << 24);
 800859c:	4b0e      	ldr	r3, [pc, #56]	; (80085d8 <astronode_send_rtc_rr+0xb4>)
 800859e:	185b      	adds	r3, r3, r1
 80085a0:	19db      	adds	r3, r3, r7
 80085a2:	791b      	ldrb	r3, [r3, #4]
 80085a4:	061b      	lsls	r3, r3, #24
 80085a6:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 80085a8:	22f2      	movs	r2, #242	; 0xf2
 80085aa:	0052      	lsls	r2, r2, #1
 80085ac:	18b9      	adds	r1, r7, r2
 80085ae:	600b      	str	r3, [r1, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 80085b0:	18bb      	adds	r3, r7, r2
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	4909      	ldr	r1, [pc, #36]	; (80085dc <astronode_send_rtc_rr+0xb8>)
 80085b6:	1d3b      	adds	r3, r7, #4
 80085b8:	0018      	movs	r0, r3
 80085ba:	f003 f9b5 	bl	800b928 <sprintf>
            send_debug_logs(str);
 80085be:	1d3b      	adds	r3, r7, #4
 80085c0:	0018      	movs	r0, r3
 80085c2:	f7fa fbe3 	bl	8002d8c <send_debug_logs>
        else
        {
            send_debug_logs("Failed to read rtc time.");
        }
    }
}
 80085c6:	e003      	b.n	80085d0 <astronode_send_rtc_rr+0xac>
            send_debug_logs("Failed to read rtc time.");
 80085c8:	4b05      	ldr	r3, [pc, #20]	; (80085e0 <astronode_send_rtc_rr+0xbc>)
 80085ca:	0018      	movs	r0, r3
 80085cc:	f7fa fbde 	bl	8002d8c <send_debug_logs>
}
 80085d0:	46c0      	nop			; (mov r8, r8)
 80085d2:	46bd      	mov	sp, r7
 80085d4:	b07a      	add	sp, #488	; 0x1e8
 80085d6:	bdb0      	pop	{r4, r5, r7, pc}
 80085d8:	fffffe6c 	.word	0xfffffe6c
 80085dc:	08012ed4 	.word	0x08012ed4
 80085e0:	08012f14 	.word	0x08012f14

080085e4 <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 80085e4:	b5b0      	push	{r4, r5, r7, lr}
 80085e6:	b0f8      	sub	sp, #480	; 0x1e0
 80085e8:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80085ea:	258c      	movs	r5, #140	; 0x8c
 80085ec:	006d      	lsls	r5, r5, #1
 80085ee:	197b      	adds	r3, r7, r5
 80085f0:	0018      	movs	r0, r3
 80085f2:	23c6      	movs	r3, #198	; 0xc6
 80085f4:	001a      	movs	r2, r3
 80085f6:	2100      	movs	r1, #0
 80085f8:	f003 fa2c 	bl	800ba54 <memset>
    astronode_app_msg_t answer = {0};
 80085fc:	4b21      	ldr	r3, [pc, #132]	; (8008684 <astronode_send_sak_rr+0xa0>)
 80085fe:	24f0      	movs	r4, #240	; 0xf0
 8008600:	0064      	lsls	r4, r4, #1
 8008602:	191b      	adds	r3, r3, r4
 8008604:	19db      	adds	r3, r3, r7
 8008606:	0018      	movs	r0, r3
 8008608:	23c6      	movs	r3, #198	; 0xc6
 800860a:	001a      	movs	r2, r3
 800860c:	2100      	movs	r1, #0
 800860e:	f003 fa21 	bl	800ba54 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 8008612:	197b      	adds	r3, r7, r5
 8008614:	2245      	movs	r2, #69	; 0x45
 8008616:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008618:	2350      	movs	r3, #80	; 0x50
 800861a:	18fa      	adds	r2, r7, r3
 800861c:	197b      	adds	r3, r7, r5
 800861e:	0011      	movs	r1, r2
 8008620:	0018      	movs	r0, r3
 8008622:	f000 fd4f 	bl	80090c4 <astronode_transport_send_receive>
 8008626:	0003      	movs	r3, r0
 8008628:	2b01      	cmp	r3, #1
 800862a:	d126      	bne.n	800867a <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 800862c:	4b15      	ldr	r3, [pc, #84]	; (8008684 <astronode_send_sak_rr+0xa0>)
 800862e:	191b      	adds	r3, r3, r4
 8008630:	19db      	adds	r3, r3, r7
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	2bc5      	cmp	r3, #197	; 0xc5
 8008636:	d11c      	bne.n	8008672 <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 8008638:	4b12      	ldr	r3, [pc, #72]	; (8008684 <astronode_send_sak_rr+0xa0>)
 800863a:	191b      	adds	r3, r3, r4
 800863c:	19db      	adds	r3, r3, r7
 800863e:	785b      	ldrb	r3, [r3, #1]
 8008640:	b299      	uxth	r1, r3
 8008642:	4b10      	ldr	r3, [pc, #64]	; (8008684 <astronode_send_sak_rr+0xa0>)
 8008644:	191b      	adds	r3, r3, r4
 8008646:	19db      	adds	r3, r3, r7
 8008648:	789b      	ldrb	r3, [r3, #2]
 800864a:	b29b      	uxth	r3, r3
 800864c:	021b      	lsls	r3, r3, #8
 800864e:	b29a      	uxth	r2, r3
 8008650:	20ef      	movs	r0, #239	; 0xef
 8008652:	0040      	lsls	r0, r0, #1
 8008654:	183b      	adds	r3, r7, r0
 8008656:	188a      	adds	r2, r1, r2
 8008658:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 800865a:	183b      	adds	r3, r7, r0
 800865c:	881a      	ldrh	r2, [r3, #0]
 800865e:	490a      	ldr	r1, [pc, #40]	; (8008688 <astronode_send_sak_rr+0xa4>)
 8008660:	003b      	movs	r3, r7
 8008662:	0018      	movs	r0, r3
 8008664:	f003 f960 	bl	800b928 <sprintf>
            send_debug_logs(str);
 8008668:	003b      	movs	r3, r7
 800866a:	0018      	movs	r0, r3
 800866c:	f7fa fb8e 	bl	8002d8c <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No acknowledgment available.");
        }
    }
}
 8008670:	e003      	b.n	800867a <astronode_send_sak_rr+0x96>
            send_debug_logs("astronode_application: No acknowledgment available.");
 8008672:	4b06      	ldr	r3, [pc, #24]	; (800868c <astronode_send_sak_rr+0xa8>)
 8008674:	0018      	movs	r0, r3
 8008676:	f7fa fb89 	bl	8002d8c <send_debug_logs>
}
 800867a:	46c0      	nop			; (mov r8, r8)
 800867c:	46bd      	mov	sp, r7
 800867e:	b078      	add	sp, #480	; 0x1e0
 8008680:	bdb0      	pop	{r4, r5, r7, pc}
 8008682:	46c0      	nop			; (mov r8, r8)
 8008684:	fffffe70 	.word	0xfffffe70
 8008688:	08012f30 	.word	0x08012f30
 800868c:	08012f5c 	.word	0x08012f5c

08008690 <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 8008690:	b5b0      	push	{r4, r5, r7, lr}
 8008692:	b0e4      	sub	sp, #400	; 0x190
 8008694:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008696:	24c8      	movs	r4, #200	; 0xc8
 8008698:	193b      	adds	r3, r7, r4
 800869a:	0018      	movs	r0, r3
 800869c:	23c6      	movs	r3, #198	; 0xc6
 800869e:	001a      	movs	r2, r3
 80086a0:	2100      	movs	r1, #0
 80086a2:	f003 f9d7 	bl	800ba54 <memset>
    astronode_app_msg_t answer = {0};
 80086a6:	4b16      	ldr	r3, [pc, #88]	; (8008700 <astronode_send_sak_cr+0x70>)
 80086a8:	25c8      	movs	r5, #200	; 0xc8
 80086aa:	006d      	lsls	r5, r5, #1
 80086ac:	195b      	adds	r3, r3, r5
 80086ae:	19db      	adds	r3, r3, r7
 80086b0:	0018      	movs	r0, r3
 80086b2:	23c6      	movs	r3, #198	; 0xc6
 80086b4:	001a      	movs	r2, r3
 80086b6:	2100      	movs	r1, #0
 80086b8:	f003 f9cc 	bl	800ba54 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 80086bc:	193b      	adds	r3, r7, r4
 80086be:	2246      	movs	r2, #70	; 0x46
 80086c0:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80086c2:	003a      	movs	r2, r7
 80086c4:	193b      	adds	r3, r7, r4
 80086c6:	0011      	movs	r1, r2
 80086c8:	0018      	movs	r0, r3
 80086ca:	f000 fcfb 	bl	80090c4 <astronode_transport_send_receive>
 80086ce:	0003      	movs	r3, r0
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d111      	bne.n	80086f8 <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 80086d4:	4b0a      	ldr	r3, [pc, #40]	; (8008700 <astronode_send_sak_cr+0x70>)
 80086d6:	195b      	adds	r3, r3, r5
 80086d8:	19db      	adds	r3, r3, r7
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	2bc6      	cmp	r3, #198	; 0xc6
 80086de:	d107      	bne.n	80086f0 <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 80086e0:	4b08      	ldr	r3, [pc, #32]	; (8008704 <astronode_send_sak_cr+0x74>)
 80086e2:	2200      	movs	r2, #0
 80086e4:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 80086e6:	4b08      	ldr	r3, [pc, #32]	; (8008708 <astronode_send_sak_cr+0x78>)
 80086e8:	0018      	movs	r0, r3
 80086ea:	f7fa fb4f 	bl	8002d8c <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 80086ee:	e003      	b.n	80086f8 <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 80086f0:	4b06      	ldr	r3, [pc, #24]	; (800870c <astronode_send_sak_cr+0x7c>)
 80086f2:	0018      	movs	r0, r3
 80086f4:	f7fa fb4a 	bl	8002d8c <send_debug_logs>
}
 80086f8:	46c0      	nop			; (mov r8, r8)
 80086fa:	46bd      	mov	sp, r7
 80086fc:	b064      	add	sp, #400	; 0x190
 80086fe:	bdb0      	pop	{r4, r5, r7, pc}
 8008700:	fffffe70 	.word	0xfffffe70
 8008704:	20000b38 	.word	0x20000b38
 8008708:	08012f90 	.word	0x08012f90
 800870c:	08012fb8 	.word	0x08012fb8

08008710 <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 8008710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008712:	b0ed      	sub	sp, #436	; 0x1b4
 8008714:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008716:	21c8      	movs	r1, #200	; 0xc8
 8008718:	2318      	movs	r3, #24
 800871a:	18cb      	adds	r3, r1, r3
 800871c:	19db      	adds	r3, r3, r7
 800871e:	0018      	movs	r0, r3
 8008720:	23c6      	movs	r3, #198	; 0xc6
 8008722:	001a      	movs	r2, r3
 8008724:	2100      	movs	r1, #0
 8008726:	f003 f995 	bl	800ba54 <memset>
    astronode_app_msg_t answer = {0};
 800872a:	4b4a      	ldr	r3, [pc, #296]	; (8008854 <astronode_send_mpn_rr+0x144>)
 800872c:	26cc      	movs	r6, #204	; 0xcc
 800872e:	0076      	lsls	r6, r6, #1
 8008730:	199b      	adds	r3, r3, r6
 8008732:	2218      	movs	r2, #24
 8008734:	4694      	mov	ip, r2
 8008736:	44bc      	add	ip, r7
 8008738:	4463      	add	r3, ip
 800873a:	0018      	movs	r0, r3
 800873c:	23c6      	movs	r3, #198	; 0xc6
 800873e:	001a      	movs	r2, r3
 8008740:	2100      	movs	r1, #0
 8008742:	f003 f987 	bl	800ba54 <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 8008746:	21c8      	movs	r1, #200	; 0xc8
 8008748:	2318      	movs	r3, #24
 800874a:	18cb      	adds	r3, r1, r3
 800874c:	19db      	adds	r3, r3, r7
 800874e:	221b      	movs	r2, #27
 8008750:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008752:	2318      	movs	r3, #24
 8008754:	18fa      	adds	r2, r7, r3
 8008756:	2318      	movs	r3, #24
 8008758:	18cb      	adds	r3, r1, r3
 800875a:	19db      	adds	r3, r3, r7
 800875c:	0011      	movs	r1, r2
 800875e:	0018      	movs	r0, r3
 8008760:	f000 fcb0 	bl	80090c4 <astronode_transport_send_receive>
 8008764:	0003      	movs	r3, r0
 8008766:	2b01      	cmp	r3, #1
 8008768:	d16f      	bne.n	800884a <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 800876a:	4b3a      	ldr	r3, [pc, #232]	; (8008854 <astronode_send_mpn_rr+0x144>)
 800876c:	0032      	movs	r2, r6
 800876e:	189b      	adds	r3, r3, r2
 8008770:	2118      	movs	r1, #24
 8008772:	468c      	mov	ip, r1
 8008774:	44bc      	add	ip, r7
 8008776:	4463      	add	r3, ip
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	2b9b      	cmp	r3, #155	; 0x9b
 800877c:	d161      	bne.n	8008842 <astronode_send_mpn_rr+0x132>
        {
 800877e:	466b      	mov	r3, sp
 8008780:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 8008782:	4b34      	ldr	r3, [pc, #208]	; (8008854 <astronode_send_mpn_rr+0x144>)
 8008784:	189b      	adds	r3, r3, r2
 8008786:	2218      	movs	r2, #24
 8008788:	4694      	mov	ip, r2
 800878a:	44bc      	add	ip, r7
 800878c:	4463      	add	r3, ip
 800878e:	22c4      	movs	r2, #196	; 0xc4
 8008790:	5a9b      	ldrh	r3, [r3, r2]
 8008792:	001a      	movs	r2, r3
 8008794:	3a01      	subs	r2, #1
 8008796:	21ca      	movs	r1, #202	; 0xca
 8008798:	0049      	lsls	r1, r1, #1
 800879a:	2018      	movs	r0, #24
 800879c:	1809      	adds	r1, r1, r0
 800879e:	19c9      	adds	r1, r1, r7
 80087a0:	600a      	str	r2, [r1, #0]
 80087a2:	001c      	movs	r4, r3
 80087a4:	2200      	movs	r2, #0
 80087a6:	0015      	movs	r5, r2
 80087a8:	0020      	movs	r0, r4
 80087aa:	0029      	movs	r1, r5
 80087ac:	0004      	movs	r4, r0
 80087ae:	0f62      	lsrs	r2, r4, #29
 80087b0:	000c      	movs	r4, r1
 80087b2:	00e4      	lsls	r4, r4, #3
 80087b4:	617c      	str	r4, [r7, #20]
 80087b6:	697c      	ldr	r4, [r7, #20]
 80087b8:	4314      	orrs	r4, r2
 80087ba:	617c      	str	r4, [r7, #20]
 80087bc:	0001      	movs	r1, r0
 80087be:	00c9      	lsls	r1, r1, #3
 80087c0:	6139      	str	r1, [r7, #16]
 80087c2:	603b      	str	r3, [r7, #0]
 80087c4:	2200      	movs	r2, #0
 80087c6:	607a      	str	r2, [r7, #4]
 80087c8:	6838      	ldr	r0, [r7, #0]
 80087ca:	6879      	ldr	r1, [r7, #4]
 80087cc:	0004      	movs	r4, r0
 80087ce:	0f62      	lsrs	r2, r4, #29
 80087d0:	000c      	movs	r4, r1
 80087d2:	00e4      	lsls	r4, r4, #3
 80087d4:	60fc      	str	r4, [r7, #12]
 80087d6:	68fc      	ldr	r4, [r7, #12]
 80087d8:	4314      	orrs	r4, r2
 80087da:	60fc      	str	r4, [r7, #12]
 80087dc:	0001      	movs	r1, r0
 80087de:	00ca      	lsls	r2, r1, #3
 80087e0:	60ba      	str	r2, [r7, #8]
 80087e2:	3307      	adds	r3, #7
 80087e4:	08db      	lsrs	r3, r3, #3
 80087e6:	00db      	lsls	r3, r3, #3
 80087e8:	4669      	mov	r1, sp
 80087ea:	1acb      	subs	r3, r1, r3
 80087ec:	469d      	mov	sp, r3
 80087ee:	466b      	mov	r3, sp
 80087f0:	3300      	adds	r3, #0
 80087f2:	24c8      	movs	r4, #200	; 0xc8
 80087f4:	0064      	lsls	r4, r4, #1
 80087f6:	2218      	movs	r2, #24
 80087f8:	18a2      	adds	r2, r4, r2
 80087fa:	19d1      	adds	r1, r2, r7
 80087fc:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 80087fe:	4b16      	ldr	r3, [pc, #88]	; (8008858 <astronode_send_mpn_rr+0x148>)
 8008800:	0018      	movs	r0, r3
 8008802:	f7fa fac3 	bl	8002d8c <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 8008806:	4b13      	ldr	r3, [pc, #76]	; (8008854 <astronode_send_mpn_rr+0x144>)
 8008808:	22cc      	movs	r2, #204	; 0xcc
 800880a:	0052      	lsls	r2, r2, #1
 800880c:	189b      	adds	r3, r3, r2
 800880e:	2218      	movs	r2, #24
 8008810:	4694      	mov	ip, r2
 8008812:	44bc      	add	ip, r7
 8008814:	4463      	add	r3, ip
 8008816:	22c4      	movs	r2, #196	; 0xc4
 8008818:	5a9b      	ldrh	r3, [r3, r2]
 800881a:	0019      	movs	r1, r3
 800881c:	2318      	movs	r3, #24
 800881e:	18fb      	adds	r3, r7, r3
 8008820:	3301      	adds	r3, #1
 8008822:	4a0e      	ldr	r2, [pc, #56]	; (800885c <astronode_send_mpn_rr+0x14c>)
 8008824:	2018      	movs	r0, #24
 8008826:	1820      	adds	r0, r4, r0
 8008828:	19c0      	adds	r0, r0, r7
 800882a:	6800      	ldr	r0, [r0, #0]
 800882c:	f003 f848 	bl	800b8c0 <snprintf>
            send_debug_logs(product_number);
 8008830:	2318      	movs	r3, #24
 8008832:	18e3      	adds	r3, r4, r3
 8008834:	19db      	adds	r3, r3, r7
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	0018      	movs	r0, r3
 800883a:	f7fa faa7 	bl	8002d8c <send_debug_logs>
 800883e:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8008840:	e003      	b.n	800884a <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8008842:	4b07      	ldr	r3, [pc, #28]	; (8008860 <astronode_send_mpn_rr+0x150>)
 8008844:	0018      	movs	r0, r3
 8008846:	f7fa faa1 	bl	8002d8c <send_debug_logs>
}
 800884a:	46c0      	nop			; (mov r8, r8)
 800884c:	46bd      	mov	sp, r7
 800884e:	b06d      	add	sp, #436	; 0x1b4
 8008850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008852:	46c0      	nop			; (mov r8, r8)
 8008854:	fffffe68 	.word	0xfffffe68
 8008858:	08013080 	.word	0x08013080
 800885c:	08012bb8 	.word	0x08012bb8
 8008860:	08012bf4 	.word	0x08012bf4

08008864 <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 8008864:	b5b0      	push	{r4, r5, r7, lr}
 8008866:	b0e4      	sub	sp, #400	; 0x190
 8008868:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800886a:	24c8      	movs	r4, #200	; 0xc8
 800886c:	193b      	adds	r3, r7, r4
 800886e:	0018      	movs	r0, r3
 8008870:	23c6      	movs	r3, #198	; 0xc6
 8008872:	001a      	movs	r2, r3
 8008874:	2100      	movs	r1, #0
 8008876:	f003 f8ed 	bl	800ba54 <memset>
    astronode_app_msg_t answer = {0};
 800887a:	4b16      	ldr	r3, [pc, #88]	; (80088d4 <astronode_send_cmd_cr+0x70>)
 800887c:	25c8      	movs	r5, #200	; 0xc8
 800887e:	006d      	lsls	r5, r5, #1
 8008880:	195b      	adds	r3, r3, r5
 8008882:	19db      	adds	r3, r3, r7
 8008884:	0018      	movs	r0, r3
 8008886:	23c6      	movs	r3, #198	; 0xc6
 8008888:	001a      	movs	r2, r3
 800888a:	2100      	movs	r1, #0
 800888c:	f003 f8e2 	bl	800ba54 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 8008890:	193b      	adds	r3, r7, r4
 8008892:	2248      	movs	r2, #72	; 0x48
 8008894:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008896:	003a      	movs	r2, r7
 8008898:	193b      	adds	r3, r7, r4
 800889a:	0011      	movs	r1, r2
 800889c:	0018      	movs	r0, r3
 800889e:	f000 fc11 	bl	80090c4 <astronode_transport_send_receive>
 80088a2:	0003      	movs	r3, r0
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d111      	bne.n	80088cc <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 80088a8:	4b0a      	ldr	r3, [pc, #40]	; (80088d4 <astronode_send_cmd_cr+0x70>)
 80088aa:	195b      	adds	r3, r3, r5
 80088ac:	19db      	adds	r3, r3, r7
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	2bc8      	cmp	r3, #200	; 0xc8
 80088b2:	d107      	bne.n	80088c4 <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 80088b4:	4b08      	ldr	r3, [pc, #32]	; (80088d8 <astronode_send_cmd_cr+0x74>)
 80088b6:	2200      	movs	r2, #0
 80088b8:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 80088ba:	4b08      	ldr	r3, [pc, #32]	; (80088dc <astronode_send_cmd_cr+0x78>)
 80088bc:	0018      	movs	r0, r3
 80088be:	f7fa fa65 	bl	8002d8c <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 80088c2:	e003      	b.n	80088cc <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 80088c4:	4b06      	ldr	r3, [pc, #24]	; (80088e0 <astronode_send_cmd_cr+0x7c>)
 80088c6:	0018      	movs	r0, r3
 80088c8:	f7fa fa60 	bl	8002d8c <send_debug_logs>
}
 80088cc:	46c0      	nop			; (mov r8, r8)
 80088ce:	46bd      	mov	sp, r7
 80088d0:	b064      	add	sp, #400	; 0x190
 80088d2:	bdb0      	pop	{r4, r5, r7, pc}
 80088d4:	fffffe70 	.word	0xfffffe70
 80088d8:	20000b3a 	.word	0x20000b3a
 80088dc:	080134d0 	.word	0x080134d0
 80088e0:	080134f4 	.word	0x080134f4

080088e4 <astronode_send_cmd_rr>:

void astronode_send_cmd_rr(void)
{
 80088e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088e6:	4cac      	ldr	r4, [pc, #688]	; (8008b98 <astronode_send_cmd_rr+0x2b4>)
 80088e8:	44a5      	add	sp, r4
 80088ea:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80088ec:	218c      	movs	r1, #140	; 0x8c
 80088ee:	0049      	lsls	r1, r1, #1
 80088f0:	2318      	movs	r3, #24
 80088f2:	18cb      	adds	r3, r1, r3
 80088f4:	19db      	adds	r3, r3, r7
 80088f6:	0018      	movs	r0, r3
 80088f8:	23c6      	movs	r3, #198	; 0xc6
 80088fa:	001a      	movs	r2, r3
 80088fc:	2100      	movs	r1, #0
 80088fe:	f003 f8a9 	bl	800ba54 <memset>
    astronode_app_msg_t answer = {0};
 8008902:	4ba6      	ldr	r3, [pc, #664]	; (8008b9c <astronode_send_cmd_rr+0x2b8>)
 8008904:	26f8      	movs	r6, #248	; 0xf8
 8008906:	0076      	lsls	r6, r6, #1
 8008908:	199b      	adds	r3, r3, r6
 800890a:	2218      	movs	r2, #24
 800890c:	4694      	mov	ip, r2
 800890e:	44bc      	add	ip, r7
 8008910:	4463      	add	r3, ip
 8008912:	0018      	movs	r0, r3
 8008914:	23c6      	movs	r3, #198	; 0xc6
 8008916:	001a      	movs	r2, r3
 8008918:	2100      	movs	r1, #0
 800891a:	f003 f89b 	bl	800ba54 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 800891e:	218c      	movs	r1, #140	; 0x8c
 8008920:	0049      	lsls	r1, r1, #1
 8008922:	2318      	movs	r3, #24
 8008924:	18cb      	adds	r3, r1, r3
 8008926:	19db      	adds	r3, r3, r7
 8008928:	2247      	movs	r2, #71	; 0x47
 800892a:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800892c:	2350      	movs	r3, #80	; 0x50
 800892e:	2218      	movs	r2, #24
 8008930:	189b      	adds	r3, r3, r2
 8008932:	19da      	adds	r2, r3, r7
 8008934:	2318      	movs	r3, #24
 8008936:	18cb      	adds	r3, r1, r3
 8008938:	19db      	adds	r3, r3, r7
 800893a:	0011      	movs	r1, r2
 800893c:	0018      	movs	r0, r3
 800893e:	f000 fbc1 	bl	80090c4 <astronode_transport_send_receive>
 8008942:	0003      	movs	r3, r0
 8008944:	2b01      	cmp	r3, #1
 8008946:	d000      	beq.n	800894a <astronode_send_cmd_rr+0x66>
 8008948:	e121      	b.n	8008b8e <astronode_send_cmd_rr+0x2aa>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 800894a:	4b94      	ldr	r3, [pc, #592]	; (8008b9c <astronode_send_cmd_rr+0x2b8>)
 800894c:	199b      	adds	r3, r3, r6
 800894e:	2218      	movs	r2, #24
 8008950:	4694      	mov	ip, r2
 8008952:	44bc      	add	ip, r7
 8008954:	4463      	add	r3, ip
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	2bc7      	cmp	r3, #199	; 0xc7
 800895a:	d000      	beq.n	800895e <astronode_send_cmd_rr+0x7a>
 800895c:	e113      	b.n	8008b86 <astronode_send_cmd_rr+0x2a2>
        {
 800895e:	466b      	mov	r3, sp
 8008960:	001e      	movs	r6, r3
            send_debug_logs("Received downlink command");
 8008962:	4b8f      	ldr	r3, [pc, #572]	; (8008ba0 <astronode_send_cmd_rr+0x2bc>)
 8008964:	0018      	movs	r0, r3
 8008966:	f7fa fa11 	bl	8002d8c <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 800896a:	4b8c      	ldr	r3, [pc, #560]	; (8008b9c <astronode_send_cmd_rr+0x2b8>)
 800896c:	21f8      	movs	r1, #248	; 0xf8
 800896e:	0049      	lsls	r1, r1, #1
 8008970:	185b      	adds	r3, r3, r1
 8008972:	2218      	movs	r2, #24
 8008974:	4694      	mov	ip, r2
 8008976:	44bc      	add	ip, r7
 8008978:	4463      	add	r3, ip
 800897a:	785b      	ldrb	r3, [r3, #1]
 800897c:	001a      	movs	r2, r3
                                + (answer.p_payload[1] << 8)
 800897e:	4b87      	ldr	r3, [pc, #540]	; (8008b9c <astronode_send_cmd_rr+0x2b8>)
 8008980:	185b      	adds	r3, r3, r1
 8008982:	2018      	movs	r0, #24
 8008984:	4684      	mov	ip, r0
 8008986:	44bc      	add	ip, r7
 8008988:	4463      	add	r3, ip
 800898a:	789b      	ldrb	r3, [r3, #2]
 800898c:	021b      	lsls	r3, r3, #8
 800898e:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[2] << 16)
 8008990:	4b82      	ldr	r3, [pc, #520]	; (8008b9c <astronode_send_cmd_rr+0x2b8>)
 8008992:	185b      	adds	r3, r3, r1
 8008994:	2018      	movs	r0, #24
 8008996:	4684      	mov	ip, r0
 8008998:	44bc      	add	ip, r7
 800899a:	4463      	add	r3, ip
 800899c:	78db      	ldrb	r3, [r3, #3]
 800899e:	041b      	lsls	r3, r3, #16
 80089a0:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[3] << 24);
 80089a2:	4b7e      	ldr	r3, [pc, #504]	; (8008b9c <astronode_send_cmd_rr+0x2b8>)
 80089a4:	185b      	adds	r3, r3, r1
 80089a6:	2118      	movs	r1, #24
 80089a8:	468c      	mov	ip, r1
 80089aa:	44bc      	add	ip, r7
 80089ac:	4463      	add	r3, ip
 80089ae:	791b      	ldrb	r3, [r3, #4]
 80089b0:	061b      	lsls	r3, r3, #24
 80089b2:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 80089b4:	22f4      	movs	r2, #244	; 0xf4
 80089b6:	0052      	lsls	r2, r2, #1
 80089b8:	2118      	movs	r1, #24
 80089ba:	1851      	adds	r1, r2, r1
 80089bc:	19c8      	adds	r0, r1, r7
 80089be:	6003      	str	r3, [r0, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 80089c0:	2318      	movs	r3, #24
 80089c2:	18d3      	adds	r3, r2, r3
 80089c4:	19db      	adds	r3, r3, r7
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	4976      	ldr	r1, [pc, #472]	; (8008ba4 <astronode_send_cmd_rr+0x2c0>)
 80089ca:	2318      	movs	r3, #24
 80089cc:	18fb      	adds	r3, r7, r3
 80089ce:	0018      	movs	r0, r3
 80089d0:	f002 ffaa 	bl	800b928 <sprintf>
            send_debug_logs(str);
 80089d4:	2318      	movs	r3, #24
 80089d6:	18fb      	adds	r3, r7, r3
 80089d8:	0018      	movs	r0, r3
 80089da:	f7fa f9d7 	bl	8002d8c <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 80089de:	4b6f      	ldr	r3, [pc, #444]	; (8008b9c <astronode_send_cmd_rr+0x2b8>)
 80089e0:	21f8      	movs	r1, #248	; 0xf8
 80089e2:	0049      	lsls	r1, r1, #1
 80089e4:	185b      	adds	r3, r3, r1
 80089e6:	2218      	movs	r2, #24
 80089e8:	4694      	mov	ip, r2
 80089ea:	44bc      	add	ip, r7
 80089ec:	4463      	add	r3, ip
 80089ee:	22c4      	movs	r2, #196	; 0xc4
 80089f0:	5a9b      	ldrh	r3, [r3, r2]
 80089f2:	2b2c      	cmp	r3, #44	; 0x2c
 80089f4:	d00e      	beq.n	8008a14 <astronode_send_cmd_rr+0x130>
 80089f6:	4b69      	ldr	r3, [pc, #420]	; (8008b9c <astronode_send_cmd_rr+0x2b8>)
 80089f8:	185b      	adds	r3, r3, r1
 80089fa:	2218      	movs	r2, #24
 80089fc:	4694      	mov	ip, r2
 80089fe:	44bc      	add	ip, r7
 8008a00:	4463      	add	r3, ip
 8008a02:	22c4      	movs	r2, #196	; 0xc4
 8008a04:	5a9b      	ldrh	r3, [r3, r2]
 8008a06:	2b0c      	cmp	r3, #12
 8008a08:	d004      	beq.n	8008a14 <astronode_send_cmd_rr+0x130>
            {
                send_debug_logs("Command size error");
 8008a0a:	4b67      	ldr	r3, [pc, #412]	; (8008ba8 <astronode_send_cmd_rr+0x2c4>)
 8008a0c:	0018      	movs	r0, r3
 8008a0e:	f7fa f9bd 	bl	8002d8c <send_debug_logs>
                return;
 8008a12:	e0b6      	b.n	8008b82 <astronode_send_cmd_rr+0x29e>
            }

            char command_content[answer.payload_len];
 8008a14:	4b61      	ldr	r3, [pc, #388]	; (8008b9c <astronode_send_cmd_rr+0x2b8>)
 8008a16:	22f8      	movs	r2, #248	; 0xf8
 8008a18:	0052      	lsls	r2, r2, #1
 8008a1a:	189b      	adds	r3, r3, r2
 8008a1c:	2218      	movs	r2, #24
 8008a1e:	4694      	mov	ip, r2
 8008a20:	44bc      	add	ip, r7
 8008a22:	4463      	add	r3, ip
 8008a24:	22c4      	movs	r2, #196	; 0xc4
 8008a26:	5a9b      	ldrh	r3, [r3, r2]
 8008a28:	001a      	movs	r2, r3
 8008a2a:	3a01      	subs	r2, #1
 8008a2c:	21f2      	movs	r1, #242	; 0xf2
 8008a2e:	0049      	lsls	r1, r1, #1
 8008a30:	2018      	movs	r0, #24
 8008a32:	1809      	adds	r1, r1, r0
 8008a34:	19c9      	adds	r1, r1, r7
 8008a36:	600a      	str	r2, [r1, #0]
 8008a38:	001c      	movs	r4, r3
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	0015      	movs	r5, r2
 8008a3e:	0020      	movs	r0, r4
 8008a40:	0029      	movs	r1, r5
 8008a42:	0004      	movs	r4, r0
 8008a44:	0f62      	lsrs	r2, r4, #29
 8008a46:	000c      	movs	r4, r1
 8008a48:	00e4      	lsls	r4, r4, #3
 8008a4a:	617c      	str	r4, [r7, #20]
 8008a4c:	697c      	ldr	r4, [r7, #20]
 8008a4e:	4314      	orrs	r4, r2
 8008a50:	617c      	str	r4, [r7, #20]
 8008a52:	0001      	movs	r1, r0
 8008a54:	00c9      	lsls	r1, r1, #3
 8008a56:	6139      	str	r1, [r7, #16]
 8008a58:	603b      	str	r3, [r7, #0]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	607a      	str	r2, [r7, #4]
 8008a5e:	6838      	ldr	r0, [r7, #0]
 8008a60:	6879      	ldr	r1, [r7, #4]
 8008a62:	0004      	movs	r4, r0
 8008a64:	0f62      	lsrs	r2, r4, #29
 8008a66:	000c      	movs	r4, r1
 8008a68:	00e4      	lsls	r4, r4, #3
 8008a6a:	60fc      	str	r4, [r7, #12]
 8008a6c:	68fc      	ldr	r4, [r7, #12]
 8008a6e:	4314      	orrs	r4, r2
 8008a70:	60fc      	str	r4, [r7, #12]
 8008a72:	0001      	movs	r1, r0
 8008a74:	00ca      	lsls	r2, r1, #3
 8008a76:	60ba      	str	r2, [r7, #8]
 8008a78:	3307      	adds	r3, #7
 8008a7a:	08db      	lsrs	r3, r3, #3
 8008a7c:	00db      	lsls	r3, r3, #3
 8008a7e:	4669      	mov	r1, sp
 8008a80:	1acb      	subs	r3, r1, r3
 8008a82:	469d      	mov	sp, r3
 8008a84:	466b      	mov	r3, sp
 8008a86:	3300      	adds	r3, #0
 8008a88:	20f0      	movs	r0, #240	; 0xf0
 8008a8a:	0040      	lsls	r0, r0, #1
 8008a8c:	2218      	movs	r2, #24
 8008a8e:	1882      	adds	r2, r0, r2
 8008a90:	19d1      	adds	r1, r2, r7
 8008a92:	600b      	str	r3, [r1, #0]
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 8008a94:	4b41      	ldr	r3, [pc, #260]	; (8008b9c <astronode_send_cmd_rr+0x2b8>)
 8008a96:	22f8      	movs	r2, #248	; 0xf8
 8008a98:	0052      	lsls	r2, r2, #1
 8008a9a:	189b      	adds	r3, r3, r2
 8008a9c:	2218      	movs	r2, #24
 8008a9e:	4694      	mov	ip, r2
 8008aa0:	44bc      	add	ip, r7
 8008aa2:	4463      	add	r3, ip
 8008aa4:	22c4      	movs	r2, #196	; 0xc4
 8008aa6:	5a9b      	ldrh	r3, [r3, r2]
 8008aa8:	3b03      	subs	r3, #3
 8008aaa:	0019      	movs	r1, r3
 8008aac:	2350      	movs	r3, #80	; 0x50
 8008aae:	2218      	movs	r2, #24
 8008ab0:	189b      	adds	r3, r3, r2
 8008ab2:	19db      	adds	r3, r3, r7
 8008ab4:	3305      	adds	r3, #5
 8008ab6:	4a3d      	ldr	r2, [pc, #244]	; (8008bac <astronode_send_cmd_rr+0x2c8>)
 8008ab8:	2418      	movs	r4, #24
 8008aba:	1900      	adds	r0, r0, r4
 8008abc:	19c0      	adds	r0, r0, r7
 8008abe:	6800      	ldr	r0, [r0, #0]
 8008ac0:	f002 fefe 	bl	800b8c0 <snprintf>
 8008ac4:	0002      	movs	r2, r0
 8008ac6:	23ef      	movs	r3, #239	; 0xef
 8008ac8:	005b      	lsls	r3, r3, #1
 8008aca:	2118      	movs	r1, #24
 8008acc:	185b      	adds	r3, r3, r1
 8008ace:	19db      	adds	r3, r3, r7
 8008ad0:	801a      	strh	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8008ad2:	23f0      	movs	r3, #240	; 0xf0
 8008ad4:	33ff      	adds	r3, #255	; 0xff
 8008ad6:	2218      	movs	r2, #24
 8008ad8:	189b      	adds	r3, r3, r2
 8008ada:	19db      	adds	r3, r3, r7
 8008adc:	2200      	movs	r2, #0
 8008ade:	701a      	strb	r2, [r3, #0]
 8008ae0:	e024      	b.n	8008b2c <astronode_send_cmd_rr+0x248>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 8008ae2:	23f0      	movs	r3, #240	; 0xf0
 8008ae4:	33ff      	adds	r3, #255	; 0xff
 8008ae6:	2218      	movs	r2, #24
 8008ae8:	189b      	adds	r3, r3, r2
 8008aea:	19db      	adds	r3, r3, r7
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	22f0      	movs	r2, #240	; 0xf0
 8008af0:	0052      	lsls	r2, r2, #1
 8008af2:	2118      	movs	r1, #24
 8008af4:	1852      	adds	r2, r2, r1
 8008af6:	19d2      	adds	r2, r2, r7
 8008af8:	6812      	ldr	r2, [r2, #0]
 8008afa:	5cd3      	ldrb	r3, [r2, r3]
 8008afc:	1c5a      	adds	r2, r3, #1
 8008afe:	4b2c      	ldr	r3, [pc, #176]	; (8008bb0 <astronode_send_cmd_rr+0x2cc>)
 8008b00:	18d3      	adds	r3, r2, r3
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	001a      	movs	r2, r3
 8008b06:	2397      	movs	r3, #151	; 0x97
 8008b08:	4013      	ands	r3, r2
 8008b0a:	d104      	bne.n	8008b16 <astronode_send_cmd_rr+0x232>
                {
                    send_debug_logs("Command contains non printable characters");
 8008b0c:	4b29      	ldr	r3, [pc, #164]	; (8008bb4 <astronode_send_cmd_rr+0x2d0>)
 8008b0e:	0018      	movs	r0, r3
 8008b10:	f7fa f93c 	bl	8002d8c <send_debug_logs>
                    return;
 8008b14:	e035      	b.n	8008b82 <astronode_send_cmd_rr+0x29e>
            for (uint8_t index = 0; index < command_content_size; index++)
 8008b16:	21f0      	movs	r1, #240	; 0xf0
 8008b18:	31ff      	adds	r1, #255	; 0xff
 8008b1a:	2318      	movs	r3, #24
 8008b1c:	18cb      	adds	r3, r1, r3
 8008b1e:	19db      	adds	r3, r3, r7
 8008b20:	781a      	ldrb	r2, [r3, #0]
 8008b22:	2318      	movs	r3, #24
 8008b24:	18cb      	adds	r3, r1, r3
 8008b26:	19db      	adds	r3, r3, r7
 8008b28:	3201      	adds	r2, #1
 8008b2a:	701a      	strb	r2, [r3, #0]
 8008b2c:	23f0      	movs	r3, #240	; 0xf0
 8008b2e:	33ff      	adds	r3, #255	; 0xff
 8008b30:	2218      	movs	r2, #24
 8008b32:	189b      	adds	r3, r3, r2
 8008b34:	19db      	adds	r3, r3, r7
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	22ef      	movs	r2, #239	; 0xef
 8008b3c:	0052      	lsls	r2, r2, #1
 8008b3e:	2118      	movs	r1, #24
 8008b40:	1852      	adds	r2, r2, r1
 8008b42:	19d2      	adds	r2, r2, r7
 8008b44:	8812      	ldrh	r2, [r2, #0]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d8cb      	bhi.n	8008ae2 <astronode_send_cmd_rr+0x1fe>
                }
            }
            send_debug_logs("Command content is: ");
 8008b4a:	4b1b      	ldr	r3, [pc, #108]	; (8008bb8 <astronode_send_cmd_rr+0x2d4>)
 8008b4c:	0018      	movs	r0, r3
 8008b4e:	f7fa f91d 	bl	8002d8c <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 8008b52:	2350      	movs	r3, #80	; 0x50
 8008b54:	2218      	movs	r2, #24
 8008b56:	189b      	adds	r3, r3, r2
 8008b58:	19db      	adds	r3, r3, r7
 8008b5a:	1d5a      	adds	r2, r3, #5
 8008b5c:	4917      	ldr	r1, [pc, #92]	; (8008bbc <astronode_send_cmd_rr+0x2d8>)
 8008b5e:	24f0      	movs	r4, #240	; 0xf0
 8008b60:	0064      	lsls	r4, r4, #1
 8008b62:	2318      	movs	r3, #24
 8008b64:	18e3      	adds	r3, r4, r3
 8008b66:	19db      	adds	r3, r3, r7
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	0018      	movs	r0, r3
 8008b6c:	f002 fedc 	bl	800b928 <sprintf>
            send_debug_logs(command_content);
 8008b70:	2318      	movs	r3, #24
 8008b72:	18e3      	adds	r3, r4, r3
 8008b74:	19db      	adds	r3, r3, r7
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	0018      	movs	r0, r3
 8008b7a:	f7fa f907 	bl	8002d8c <send_debug_logs>
 8008b7e:	46b5      	mov	sp, r6
 8008b80:	e005      	b.n	8008b8e <astronode_send_cmd_rr+0x2aa>
                return;
 8008b82:	46b5      	mov	sp, r6
 8008b84:	e003      	b.n	8008b8e <astronode_send_cmd_rr+0x2aa>
        }
        else
        {
            send_debug_logs("No command available.");
 8008b86:	4b0e      	ldr	r3, [pc, #56]	; (8008bc0 <astronode_send_cmd_rr+0x2dc>)
 8008b88:	0018      	movs	r0, r3
 8008b8a:	f7fa f8ff 	bl	8002d8c <send_debug_logs>
        }
    }
}
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	2383      	movs	r3, #131	; 0x83
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	449d      	add	sp, r3
 8008b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b98:	fffffdf4 	.word	0xfffffdf4
 8008b9c:	fffffe60 	.word	0xfffffe60
 8008ba0:	0801350c 	.word	0x0801350c
 8008ba4:	08013528 	.word	0x08013528
 8008ba8:	08013578 	.word	0x08013578
 8008bac:	08012bb8 	.word	0x08012bb8
 8008bb0:	08013f90 	.word	0x08013f90
 8008bb4:	0801358c 	.word	0x0801358c
 8008bb8:	080135b8 	.word	0x080135b8
 8008bbc:	080135d0 	.word	0x080135d0
 8008bc0:	080135d4 	.word	0x080135d4

08008bc4 <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 8008bc8:	4b02      	ldr	r3, [pc, #8]	; (8008bd4 <is_sak_available+0x10>)
 8008bca:	781b      	ldrb	r3, [r3, #0]
}
 8008bcc:	0018      	movs	r0, r3
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	46c0      	nop			; (mov r8, r8)
 8008bd4:	20000b38 	.word	0x20000b38

08008bd8 <is_astronode_reset>:

bool is_astronode_reset()
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8008bdc:	4b02      	ldr	r3, [pc, #8]	; (8008be8 <is_astronode_reset+0x10>)
 8008bde:	781b      	ldrb	r3, [r3, #0]
}
 8008be0:	0018      	movs	r0, r3
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	46c0      	nop			; (mov r8, r8)
 8008be8:	20000b39 	.word	0x20000b39

08008bec <is_command_available>:

bool is_command_available()
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	af00      	add	r7, sp, #0
    return g_is_command_available;
 8008bf0:	4b02      	ldr	r3, [pc, #8]	; (8008bfc <is_command_available+0x10>)
 8008bf2:	781b      	ldrb	r3, [r3, #0]
}
 8008bf4:	0018      	movs	r0, r3
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	46c0      	nop			; (mov r8, r8)
 8008bfc:	20000b3a 	.word	0x20000b3a

08008c00 <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	0002      	movs	r2, r0
 8008c08:	6039      	str	r1, [r7, #0]
 8008c0a:	1dfb      	adds	r3, r7, #7
 8008c0c:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 8008c0e:	1dfb      	adds	r3, r7, #7
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	2b2f      	cmp	r3, #47	; 0x2f
 8008c14:	d90b      	bls.n	8008c2e <ascii_to_value+0x2e>
 8008c16:	1dfb      	adds	r3, r7, #7
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	2b39      	cmp	r3, #57	; 0x39
 8008c1c:	d807      	bhi.n	8008c2e <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 8008c1e:	1dfb      	adds	r3, r7, #7
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	3b30      	subs	r3, #48	; 0x30
 8008c24:	b2da      	uxtb	r2, r3
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	701a      	strb	r2, [r3, #0]
        return true;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e010      	b.n	8008c50 <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 8008c2e:	1dfb      	adds	r3, r7, #7
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	2b40      	cmp	r3, #64	; 0x40
 8008c34:	d90b      	bls.n	8008c4e <ascii_to_value+0x4e>
 8008c36:	1dfb      	adds	r3, r7, #7
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	2b46      	cmp	r3, #70	; 0x46
 8008c3c:	d807      	bhi.n	8008c4e <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 8008c3e:	1dfb      	adds	r3, r7, #7
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	3b37      	subs	r3, #55	; 0x37
 8008c44:	b2da      	uxtb	r2, r3
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	701a      	strb	r2, [r3, #0]
        return true;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e000      	b.n	8008c50 <ascii_to_value+0x50>
    }
    else
    {
        return false;
 8008c4e:	2300      	movs	r3, #0
    }
}
 8008c50:	0018      	movs	r0, r3
 8008c52:	46bd      	mov	sp, r7
 8008c54:	b002      	add	sp, #8
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8008c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 8008c62:	250e      	movs	r5, #14
 8008c64:	197b      	adds	r3, r7, r5
 8008c66:	2200      	movs	r2, #0
 8008c68:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 8008c6a:	197b      	adds	r3, r7, r5
 8008c6c:	881b      	ldrh	r3, [r3, #0]
 8008c6e:	197a      	adds	r2, r7, r5
 8008c70:	1c59      	adds	r1, r3, #1
 8008c72:	8011      	strh	r1, [r2, #0]
 8008c74:	001a      	movs	r2, r3
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	189b      	adds	r3, r3, r2
 8008c7a:	2202      	movs	r2, #2
 8008c7c:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	260a      	movs	r6, #10
 8008c82:	19bc      	adds	r4, r7, r6
 8008c84:	4a44      	ldr	r2, [pc, #272]	; (8008d98 <astronode_create_request_transport+0x140>)
 8008c86:	2101      	movs	r1, #1
 8008c88:	0018      	movs	r0, r3
 8008c8a:	f000 fa7d 	bl	8009188 <calculate_crc>
 8008c8e:	0003      	movs	r3, r0
 8008c90:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	1c58      	adds	r0, r3, #1
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	22c4      	movs	r2, #196	; 0xc4
 8008c9a:	5a99      	ldrh	r1, [r3, r2]
 8008c9c:	19bc      	adds	r4, r7, r6
 8008c9e:	19bb      	adds	r3, r7, r6
 8008ca0:	881b      	ldrh	r3, [r3, #0]
 8008ca2:	001a      	movs	r2, r3
 8008ca4:	f000 fa70 	bl	8009188 <calculate_crc>
 8008ca8:	0003      	movs	r3, r0
 8008caa:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8008cac:	19bb      	adds	r3, r7, r6
 8008cae:	881b      	ldrh	r3, [r3, #0]
 8008cb0:	021b      	lsls	r3, r3, #8
 8008cb2:	b21a      	sxth	r2, r3
 8008cb4:	0031      	movs	r1, r6
 8008cb6:	19bb      	adds	r3, r7, r6
 8008cb8:	881b      	ldrh	r3, [r3, #0]
 8008cba:	0a1b      	lsrs	r3, r3, #8
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	b21b      	sxth	r3, r3
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	b21a      	sxth	r2, r3
 8008cc4:	187b      	adds	r3, r7, r1
 8008cc6:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	7818      	ldrb	r0, [r3, #0]
 8008ccc:	197b      	adds	r3, r7, r5
 8008cce:	881b      	ldrh	r3, [r3, #0]
 8008cd0:	683a      	ldr	r2, [r7, #0]
 8008cd2:	18d3      	adds	r3, r2, r3
 8008cd4:	0019      	movs	r1, r3
 8008cd6:	f000 fbeb 	bl	80094b0 <uint8_to_ascii_buffer>
    index += 2;
 8008cda:	197b      	adds	r3, r7, r5
 8008cdc:	197a      	adds	r2, r7, r5
 8008cde:	8812      	ldrh	r2, [r2, #0]
 8008ce0:	3202      	adds	r2, #2
 8008ce2:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8008ce4:	230c      	movs	r3, #12
 8008ce6:	18fb      	adds	r3, r7, r3
 8008ce8:	2200      	movs	r2, #0
 8008cea:	801a      	strh	r2, [r3, #0]
 8008cec:	e017      	b.n	8008d1e <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 8008cee:	240c      	movs	r4, #12
 8008cf0:	193b      	adds	r3, r7, r4
 8008cf2:	881b      	ldrh	r3, [r3, #0]
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	18d3      	adds	r3, r2, r3
 8008cf8:	7858      	ldrb	r0, [r3, #1]
 8008cfa:	250e      	movs	r5, #14
 8008cfc:	197b      	adds	r3, r7, r5
 8008cfe:	881b      	ldrh	r3, [r3, #0]
 8008d00:	683a      	ldr	r2, [r7, #0]
 8008d02:	18d3      	adds	r3, r2, r3
 8008d04:	0019      	movs	r1, r3
 8008d06:	f000 fbd3 	bl	80094b0 <uint8_to_ascii_buffer>
        index += 2;
 8008d0a:	197b      	adds	r3, r7, r5
 8008d0c:	197a      	adds	r2, r7, r5
 8008d0e:	8812      	ldrh	r2, [r2, #0]
 8008d10:	3202      	adds	r2, #2
 8008d12:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8008d14:	193b      	adds	r3, r7, r4
 8008d16:	881a      	ldrh	r2, [r3, #0]
 8008d18:	193b      	adds	r3, r7, r4
 8008d1a:	3201      	adds	r2, #1
 8008d1c:	801a      	strh	r2, [r3, #0]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	22c4      	movs	r2, #196	; 0xc4
 8008d22:	5a9b      	ldrh	r3, [r3, r2]
 8008d24:	220c      	movs	r2, #12
 8008d26:	18ba      	adds	r2, r7, r2
 8008d28:	8812      	ldrh	r2, [r2, #0]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d3df      	bcc.n	8008cee <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 8008d2e:	250a      	movs	r5, #10
 8008d30:	197b      	adds	r3, r7, r5
 8008d32:	881b      	ldrh	r3, [r3, #0]
 8008d34:	0a1b      	lsrs	r3, r3, #8
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	b2d8      	uxtb	r0, r3
 8008d3a:	240e      	movs	r4, #14
 8008d3c:	193b      	adds	r3, r7, r4
 8008d3e:	881b      	ldrh	r3, [r3, #0]
 8008d40:	683a      	ldr	r2, [r7, #0]
 8008d42:	18d3      	adds	r3, r2, r3
 8008d44:	0019      	movs	r1, r3
 8008d46:	f000 fbb3 	bl	80094b0 <uint8_to_ascii_buffer>
    index += 2;
 8008d4a:	0021      	movs	r1, r4
 8008d4c:	187b      	adds	r3, r7, r1
 8008d4e:	187a      	adds	r2, r7, r1
 8008d50:	8812      	ldrh	r2, [r2, #0]
 8008d52:	3202      	adds	r2, #2
 8008d54:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 8008d56:	197b      	adds	r3, r7, r5
 8008d58:	881b      	ldrh	r3, [r3, #0]
 8008d5a:	b2d8      	uxtb	r0, r3
 8008d5c:	000c      	movs	r4, r1
 8008d5e:	187b      	adds	r3, r7, r1
 8008d60:	881b      	ldrh	r3, [r3, #0]
 8008d62:	683a      	ldr	r2, [r7, #0]
 8008d64:	18d3      	adds	r3, r2, r3
 8008d66:	0019      	movs	r1, r3
 8008d68:	f000 fba2 	bl	80094b0 <uint8_to_ascii_buffer>
    index += 2;
 8008d6c:	0020      	movs	r0, r4
 8008d6e:	183b      	adds	r3, r7, r0
 8008d70:	183a      	adds	r2, r7, r0
 8008d72:	8812      	ldrh	r2, [r2, #0]
 8008d74:	3202      	adds	r2, #2
 8008d76:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 8008d78:	183b      	adds	r3, r7, r0
 8008d7a:	881b      	ldrh	r3, [r3, #0]
 8008d7c:	183a      	adds	r2, r7, r0
 8008d7e:	1c59      	adds	r1, r3, #1
 8008d80:	8011      	strh	r1, [r2, #0]
 8008d82:	001a      	movs	r2, r3
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	189b      	adds	r3, r3, r2
 8008d88:	2203      	movs	r2, #3
 8008d8a:	701a      	strb	r2, [r3, #0]

    return index;
 8008d8c:	183b      	adds	r3, r7, r0
 8008d8e:	881b      	ldrh	r3, [r3, #0]
}
 8008d90:	0018      	movs	r0, r3
 8008d92:	46bd      	mov	sp, r7
 8008d94:	b005      	add	sp, #20
 8008d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d98:	0000ffff 	.word	0x0000ffff

08008d9c <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 8008d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d9e:	b089      	sub	sp, #36	; 0x24
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	607a      	str	r2, [r7, #4]
 8008da6:	230a      	movs	r3, #10
 8008da8:	18fb      	adds	r3, r7, r3
 8008daa:	1c0a      	adds	r2, r1, #0
 8008dac:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	2b02      	cmp	r3, #2
 8008db4:	d005      	beq.n	8008dc2 <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 8008db6:	4bbd      	ldr	r3, [pc, #756]	; (80090ac <astronode_decode_answer_transport+0x310>)
 8008db8:	0018      	movs	r0, r3
 8008dba:	f7f9 ffe7 	bl	8002d8c <send_debug_logs>
        return RS_FAILURE;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	e170      	b.n	80090a4 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 8008dc2:	210a      	movs	r1, #10
 8008dc4:	187b      	adds	r3, r7, r1
 8008dc6:	881b      	ldrh	r3, [r3, #0]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	4013      	ands	r3, r2
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d103      	bne.n	8008dda <astronode_decode_answer_transport+0x3e>
 8008dd2:	187b      	adds	r3, r7, r1
 8008dd4:	881b      	ldrh	r3, [r3, #0]
 8008dd6:	2b07      	cmp	r3, #7
 8008dd8:	d805      	bhi.n	8008de6 <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 8008dda:	4bb5      	ldr	r3, [pc, #724]	; (80090b0 <astronode_decode_answer_transport+0x314>)
 8008ddc:	0018      	movs	r0, r3
 8008dde:	f7f9 ffd5 	bl	8002d8c <send_debug_logs>
        return RS_FAILURE;
 8008de2:	2300      	movs	r3, #0
 8008de4:	e15e      	b.n	80090a4 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 8008de6:	230a      	movs	r3, #10
 8008de8:	18fb      	adds	r3, r7, r3
 8008dea:	881b      	ldrh	r3, [r3, #0]
 8008dec:	3b08      	subs	r3, #8
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	da00      	bge.n	8008df4 <astronode_decode_answer_transport+0x58>
 8008df2:	3301      	adds	r3, #1
 8008df4:	105b      	asrs	r3, r3, #1
 8008df6:	b299      	uxth	r1, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	22c4      	movs	r2, #196	; 0xc4
 8008dfc:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 8008dfe:	230a      	movs	r3, #10
 8008e00:	18fb      	adds	r3, r7, r3
 8008e02:	881b      	ldrh	r3, [r3, #0]
 8008e04:	3b01      	subs	r3, #1
 8008e06:	68fa      	ldr	r2, [r7, #12]
 8008e08:	18d3      	adds	r3, r2, r3
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	2b03      	cmp	r3, #3
 8008e0e:	d005      	beq.n	8008e1c <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 8008e10:	4ba8      	ldr	r3, [pc, #672]	; (80090b4 <astronode_decode_answer_transport+0x318>)
 8008e12:	0018      	movs	r0, r3
 8008e14:	f7f9 ffba 	bl	8002d8c <send_debug_logs>
        return RS_FAILURE;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	e143      	b.n	80090a4 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 8008e1c:	2117      	movs	r1, #23
 8008e1e:	187b      	adds	r3, r7, r1
 8008e20:	2200      	movs	r2, #0
 8008e22:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 8008e24:	2416      	movs	r4, #22
 8008e26:	193b      	adds	r3, r7, r4
 8008e28:	2200      	movs	r2, #0
 8008e2a:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	187a      	adds	r2, r7, r1
 8008e34:	0011      	movs	r1, r2
 8008e36:	0018      	movs	r0, r3
 8008e38:	f7ff fee2 	bl	8008c00 <ascii_to_value>
 8008e3c:	0003      	movs	r3, r0
 8008e3e:	001a      	movs	r2, r3
 8008e40:	2301      	movs	r3, #1
 8008e42:	4053      	eors	r3, r2
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d10e      	bne.n	8008e68 <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	3302      	adds	r3, #2
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	193a      	adds	r2, r7, r4
 8008e52:	0011      	movs	r1, r2
 8008e54:	0018      	movs	r0, r3
 8008e56:	f7ff fed3 	bl	8008c00 <ascii_to_value>
 8008e5a:	0003      	movs	r3, r0
 8008e5c:	001a      	movs	r2, r3
 8008e5e:	2301      	movs	r3, #1
 8008e60:	4053      	eors	r3, r2
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d005      	beq.n	8008e74 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008e68:	4b93      	ldr	r3, [pc, #588]	; (80090b8 <astronode_decode_answer_transport+0x31c>)
 8008e6a:	0018      	movs	r0, r3
 8008e6c:	f7f9 ff8e 	bl	8002d8c <send_debug_logs>
        return RS_FAILURE;
 8008e70:	2300      	movs	r3, #0
 8008e72:	e117      	b.n	80090a4 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 8008e74:	2317      	movs	r3, #23
 8008e76:	18fb      	adds	r3, r7, r3
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	011b      	lsls	r3, r3, #4
 8008e7c:	b2da      	uxtb	r2, r3
 8008e7e:	2316      	movs	r3, #22
 8008e80:	18fb      	adds	r3, r7, r3
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	18d3      	adds	r3, r2, r3
 8008e86:	b2da      	uxtb	r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8008e8c:	231e      	movs	r3, #30
 8008e8e:	18fb      	adds	r3, r7, r3
 8008e90:	2203      	movs	r2, #3
 8008e92:	801a      	strh	r2, [r3, #0]
 8008e94:	231c      	movs	r3, #28
 8008e96:	18fb      	adds	r3, r7, r3
 8008e98:	2200      	movs	r2, #0
 8008e9a:	801a      	strh	r2, [r3, #0]
 8008e9c:	e045      	b.n	8008f2a <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 8008e9e:	241e      	movs	r4, #30
 8008ea0:	193b      	adds	r3, r7, r4
 8008ea2:	881b      	ldrh	r3, [r3, #0]
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	18d3      	adds	r3, r2, r3
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	2217      	movs	r2, #23
 8008eac:	18ba      	adds	r2, r7, r2
 8008eae:	0011      	movs	r1, r2
 8008eb0:	0018      	movs	r0, r3
 8008eb2:	f7ff fea5 	bl	8008c00 <ascii_to_value>
 8008eb6:	0003      	movs	r3, r0
 8008eb8:	001a      	movs	r2, r3
 8008eba:	2301      	movs	r3, #1
 8008ebc:	4053      	eors	r3, r2
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d112      	bne.n	8008eea <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 8008ec4:	193b      	adds	r3, r7, r4
 8008ec6:	881b      	ldrh	r3, [r3, #0]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	18d3      	adds	r3, r2, r3
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	2216      	movs	r2, #22
 8008ed2:	18ba      	adds	r2, r7, r2
 8008ed4:	0011      	movs	r1, r2
 8008ed6:	0018      	movs	r0, r3
 8008ed8:	f7ff fe92 	bl	8008c00 <ascii_to_value>
 8008edc:	0003      	movs	r3, r0
 8008ede:	001a      	movs	r2, r3
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	4053      	eors	r3, r2
 8008ee4:	b2db      	uxtb	r3, r3
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d005      	beq.n	8008ef6 <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008eea:	4b73      	ldr	r3, [pc, #460]	; (80090b8 <astronode_decode_answer_transport+0x31c>)
 8008eec:	0018      	movs	r0, r3
 8008eee:	f7f9 ff4d 	bl	8002d8c <send_debug_logs>
            return RS_FAILURE;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	e0d6      	b.n	80090a4 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 8008ef6:	2317      	movs	r3, #23
 8008ef8:	18fb      	adds	r3, r7, r3
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	011b      	lsls	r3, r3, #4
 8008efe:	b2d9      	uxtb	r1, r3
 8008f00:	2316      	movs	r3, #22
 8008f02:	18fb      	adds	r3, r7, r3
 8008f04:	781a      	ldrb	r2, [r3, #0]
 8008f06:	201c      	movs	r0, #28
 8008f08:	183b      	adds	r3, r7, r0
 8008f0a:	881b      	ldrh	r3, [r3, #0]
 8008f0c:	1838      	adds	r0, r7, r0
 8008f0e:	1c5c      	adds	r4, r3, #1
 8008f10:	8004      	strh	r4, [r0, #0]
 8008f12:	0018      	movs	r0, r3
 8008f14:	188b      	adds	r3, r1, r2
 8008f16:	b2da      	uxtb	r2, r3
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	181b      	adds	r3, r3, r0
 8008f1c:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8008f1e:	221e      	movs	r2, #30
 8008f20:	18bb      	adds	r3, r7, r2
 8008f22:	18ba      	adds	r2, r7, r2
 8008f24:	8812      	ldrh	r2, [r2, #0]
 8008f26:	3202      	adds	r2, #2
 8008f28:	801a      	strh	r2, [r3, #0]
 8008f2a:	231e      	movs	r3, #30
 8008f2c:	18fb      	adds	r3, r7, r3
 8008f2e:	881a      	ldrh	r2, [r3, #0]
 8008f30:	260a      	movs	r6, #10
 8008f32:	19bb      	adds	r3, r7, r6
 8008f34:	881b      	ldrh	r3, [r3, #0]
 8008f36:	3b05      	subs	r3, #5
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	dbb0      	blt.n	8008e9e <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	251a      	movs	r5, #26
 8008f40:	197c      	adds	r4, r7, r5
 8008f42:	4a5e      	ldr	r2, [pc, #376]	; (80090bc <astronode_decode_answer_transport+0x320>)
 8008f44:	2101      	movs	r1, #1
 8008f46:	0018      	movs	r0, r3
 8008f48:	f000 f91e 	bl	8009188 <calculate_crc>
 8008f4c:	0003      	movs	r3, r0
 8008f4e:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	1c58      	adds	r0, r3, #1
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	22c4      	movs	r2, #196	; 0xc4
 8008f58:	5a99      	ldrh	r1, [r3, r2]
 8008f5a:	197c      	adds	r4, r7, r5
 8008f5c:	197b      	adds	r3, r7, r5
 8008f5e:	881b      	ldrh	r3, [r3, #0]
 8008f60:	001a      	movs	r2, r3
 8008f62:	f000 f911 	bl	8009188 <calculate_crc>
 8008f66:	0003      	movs	r3, r0
 8008f68:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 8008f6a:	197b      	adds	r3, r7, r5
 8008f6c:	881b      	ldrh	r3, [r3, #0]
 8008f6e:	021b      	lsls	r3, r3, #8
 8008f70:	b21a      	sxth	r2, r3
 8008f72:	0029      	movs	r1, r5
 8008f74:	197b      	adds	r3, r7, r5
 8008f76:	881b      	ldrh	r3, [r3, #0]
 8008f78:	0a1b      	lsrs	r3, r3, #8
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	b21b      	sxth	r3, r3
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	b21a      	sxth	r2, r3
 8008f82:	187b      	adds	r3, r7, r1
 8008f84:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 8008f86:	19bb      	adds	r3, r7, r6
 8008f88:	881b      	ldrh	r3, [r3, #0]
 8008f8a:	3b05      	subs	r3, #5
 8008f8c:	68fa      	ldr	r2, [r7, #12]
 8008f8e:	18d3      	adds	r3, r2, r3
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	2217      	movs	r2, #23
 8008f94:	18ba      	adds	r2, r7, r2
 8008f96:	0011      	movs	r1, r2
 8008f98:	0018      	movs	r0, r3
 8008f9a:	f7ff fe31 	bl	8008c00 <ascii_to_value>
 8008f9e:	0003      	movs	r3, r0
 8008fa0:	001a      	movs	r2, r3
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	4053      	eors	r3, r2
 8008fa6:	b2db      	uxtb	r3, r3
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d112      	bne.n	8008fd2 <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 8008fac:	19bb      	adds	r3, r7, r6
 8008fae:	881b      	ldrh	r3, [r3, #0]
 8008fb0:	3b04      	subs	r3, #4
 8008fb2:	68fa      	ldr	r2, [r7, #12]
 8008fb4:	18d3      	adds	r3, r2, r3
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	2216      	movs	r2, #22
 8008fba:	18ba      	adds	r2, r7, r2
 8008fbc:	0011      	movs	r1, r2
 8008fbe:	0018      	movs	r0, r3
 8008fc0:	f7ff fe1e 	bl	8008c00 <ascii_to_value>
 8008fc4:	0003      	movs	r3, r0
 8008fc6:	001a      	movs	r2, r3
 8008fc8:	2301      	movs	r3, #1
 8008fca:	4053      	eors	r3, r2
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d005      	beq.n	8008fde <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008fd2:	4b39      	ldr	r3, [pc, #228]	; (80090b8 <astronode_decode_answer_transport+0x31c>)
 8008fd4:	0018      	movs	r0, r3
 8008fd6:	f7f9 fed9 	bl	8002d8c <send_debug_logs>
        return RS_FAILURE;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	e062      	b.n	80090a4 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 8008fde:	2017      	movs	r0, #23
 8008fe0:	183b      	adds	r3, r7, r0
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	031b      	lsls	r3, r3, #12
 8008fe8:	b299      	uxth	r1, r3
 8008fea:	2416      	movs	r4, #22
 8008fec:	193b      	adds	r3, r7, r4
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	021b      	lsls	r3, r3, #8
 8008ff4:	b29a      	uxth	r2, r3
 8008ff6:	2318      	movs	r3, #24
 8008ff8:	18fb      	adds	r3, r7, r3
 8008ffa:	188a      	adds	r2, r1, r2
 8008ffc:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 8008ffe:	250a      	movs	r5, #10
 8009000:	197b      	adds	r3, r7, r5
 8009002:	881b      	ldrh	r3, [r3, #0]
 8009004:	3b03      	subs	r3, #3
 8009006:	68fa      	ldr	r2, [r7, #12]
 8009008:	18d3      	adds	r3, r2, r3
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	183a      	adds	r2, r7, r0
 800900e:	0011      	movs	r1, r2
 8009010:	0018      	movs	r0, r3
 8009012:	f7ff fdf5 	bl	8008c00 <ascii_to_value>
 8009016:	0003      	movs	r3, r0
 8009018:	001a      	movs	r2, r3
 800901a:	2301      	movs	r3, #1
 800901c:	4053      	eors	r3, r2
 800901e:	b2db      	uxtb	r3, r3
 8009020:	2b00      	cmp	r3, #0
 8009022:	d111      	bne.n	8009048 <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 8009024:	197b      	adds	r3, r7, r5
 8009026:	881b      	ldrh	r3, [r3, #0]
 8009028:	3b02      	subs	r3, #2
 800902a:	68fa      	ldr	r2, [r7, #12]
 800902c:	18d3      	adds	r3, r2, r3
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	193a      	adds	r2, r7, r4
 8009032:	0011      	movs	r1, r2
 8009034:	0018      	movs	r0, r3
 8009036:	f7ff fde3 	bl	8008c00 <ascii_to_value>
 800903a:	0003      	movs	r3, r0
 800903c:	001a      	movs	r2, r3
 800903e:	2301      	movs	r3, #1
 8009040:	4053      	eors	r3, r2
 8009042:	b2db      	uxtb	r3, r3
 8009044:	2b00      	cmp	r3, #0
 8009046:	d005      	beq.n	8009054 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8009048:	4b1b      	ldr	r3, [pc, #108]	; (80090b8 <astronode_decode_answer_transport+0x31c>)
 800904a:	0018      	movs	r0, r3
 800904c:	f7f9 fe9e 	bl	8002d8c <send_debug_logs>
        return RS_FAILURE;
 8009050:	2300      	movs	r3, #0
 8009052:	e027      	b.n	80090a4 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 8009054:	2317      	movs	r3, #23
 8009056:	18fb      	adds	r3, r7, r3
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	b29b      	uxth	r3, r3
 800905c:	011b      	lsls	r3, r3, #4
 800905e:	b29a      	uxth	r2, r3
 8009060:	2316      	movs	r3, #22
 8009062:	18fb      	adds	r3, r7, r3
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	b29b      	uxth	r3, r3
 8009068:	18d3      	adds	r3, r2, r3
 800906a:	b299      	uxth	r1, r3
 800906c:	2018      	movs	r0, #24
 800906e:	183b      	adds	r3, r7, r0
 8009070:	183a      	adds	r2, r7, r0
 8009072:	8812      	ldrh	r2, [r2, #0]
 8009074:	188a      	adds	r2, r1, r2
 8009076:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 8009078:	183a      	adds	r2, r7, r0
 800907a:	231a      	movs	r3, #26
 800907c:	18fb      	adds	r3, r7, r3
 800907e:	8812      	ldrh	r2, [r2, #0]
 8009080:	881b      	ldrh	r3, [r3, #0]
 8009082:	429a      	cmp	r2, r3
 8009084:	d005      	beq.n	8009092 <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 8009086:	4b0e      	ldr	r3, [pc, #56]	; (80090c0 <astronode_decode_answer_transport+0x324>)
 8009088:	0018      	movs	r0, r3
 800908a:	f7f9 fe7f 	bl	8002d8c <send_debug_logs>
        return RS_FAILURE;
 800908e:	2300      	movs	r3, #0
 8009090:	e008      	b.n	80090a4 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	2bff      	cmp	r3, #255	; 0xff
 8009098:	d103      	bne.n	80090a2 <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	0018      	movs	r0, r3
 800909e:	f000 f8c3 	bl	8009228 <check_for_error>
    }

    return RS_SUCCESS;
 80090a2:	2301      	movs	r3, #1
}
 80090a4:	0018      	movs	r0, r3
 80090a6:	46bd      	mov	sp, r7
 80090a8:	b009      	add	sp, #36	; 0x24
 80090aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090ac:	08013664 	.word	0x08013664
 80090b0:	080136b4 	.word	0x080136b4
 80090b4:	08013704 	.word	0x08013704
 80090b8:	08013754 	.word	0x08013754
 80090bc:	0000ffff 	.word	0x0000ffff
 80090c0:	080137a0 	.word	0x080137a0

080090c4 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 80090c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090c6:	4c2b      	ldr	r4, [pc, #172]	; (8009174 <astronode_transport_send_receive+0xb0>)
 80090c8:	44a5      	add	sp, r4
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
 80090ce:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 80090d0:	4b29      	ldr	r3, [pc, #164]	; (8009178 <astronode_transport_send_receive+0xb4>)
 80090d2:	25ca      	movs	r5, #202	; 0xca
 80090d4:	00ad      	lsls	r5, r5, #2
 80090d6:	195b      	adds	r3, r3, r5
 80090d8:	19db      	adds	r3, r3, r7
 80090da:	2200      	movs	r2, #0
 80090dc:	601a      	str	r2, [r3, #0]
 80090de:	3304      	adds	r3, #4
 80090e0:	22c4      	movs	r2, #196	; 0xc4
 80090e2:	0052      	lsls	r2, r2, #1
 80090e4:	2100      	movs	r1, #0
 80090e6:	0018      	movs	r0, r3
 80090e8:	f002 fcb4 	bl	800ba54 <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 80090ec:	4b23      	ldr	r3, [pc, #140]	; (800917c <astronode_transport_send_receive+0xb8>)
 80090ee:	195b      	adds	r3, r3, r5
 80090f0:	19db      	adds	r3, r3, r7
 80090f2:	2200      	movs	r2, #0
 80090f4:	601a      	str	r2, [r3, #0]
 80090f6:	3304      	adds	r3, #4
 80090f8:	22c4      	movs	r2, #196	; 0xc4
 80090fa:	0052      	lsls	r2, r2, #1
 80090fc:	2100      	movs	r1, #0
 80090fe:	0018      	movs	r0, r3
 8009100:	f002 fca8 	bl	800ba54 <memset>
    uint16_t answer_length =  0;
 8009104:	4b1e      	ldr	r3, [pc, #120]	; (8009180 <astronode_transport_send_receive+0xbc>)
 8009106:	195b      	adds	r3, r3, r5
 8009108:	19db      	adds	r3, r3, r7
 800910a:	2200      	movs	r2, #0
 800910c:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 800910e:	4e1d      	ldr	r6, [pc, #116]	; (8009184 <astronode_transport_send_receive+0xc0>)
 8009110:	19bc      	adds	r4, r7, r6
 8009112:	23cc      	movs	r3, #204	; 0xcc
 8009114:	005b      	lsls	r3, r3, #1
 8009116:	18fa      	adds	r2, r7, r3
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	0011      	movs	r1, r2
 800911c:	0018      	movs	r0, r3
 800911e:	f7ff fd9b 	bl	8008c58 <astronode_create_request_transport>
 8009122:	0003      	movs	r3, r0
 8009124:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 8009126:	19bb      	adds	r3, r7, r6
 8009128:	881a      	ldrh	r2, [r3, #0]
 800912a:	23cc      	movs	r3, #204	; 0xcc
 800912c:	005b      	lsls	r3, r3, #1
 800912e:	18fb      	adds	r3, r7, r3
 8009130:	0011      	movs	r1, r2
 8009132:	0018      	movs	r0, r3
 8009134:	f7f9 fe76 	bl	8002e24 <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 8009138:	230a      	movs	r3, #10
 800913a:	18fa      	adds	r2, r7, r3
 800913c:	240c      	movs	r4, #12
 800913e:	193b      	adds	r3, r7, r4
 8009140:	0011      	movs	r1, r2
 8009142:	0018      	movs	r0, r3
 8009144:	f000 f92c 	bl	80093a0 <receive_astronode_answer>
 8009148:	0003      	movs	r3, r0
 800914a:	2b01      	cmp	r3, #1
 800914c:	d10a      	bne.n	8009164 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 800914e:	4b0c      	ldr	r3, [pc, #48]	; (8009180 <astronode_transport_send_receive+0xbc>)
 8009150:	195b      	adds	r3, r3, r5
 8009152:	19db      	adds	r3, r3, r7
 8009154:	8819      	ldrh	r1, [r3, #0]
 8009156:	683a      	ldr	r2, [r7, #0]
 8009158:	193b      	adds	r3, r7, r4
 800915a:	0018      	movs	r0, r3
 800915c:	f7ff fe1e 	bl	8008d9c <astronode_decode_answer_transport>
 8009160:	0003      	movs	r3, r0
 8009162:	e000      	b.n	8009166 <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 8009164:	2300      	movs	r3, #0
    }
}
 8009166:	0018      	movs	r0, r3
 8009168:	46bd      	mov	sp, r7
 800916a:	23cb      	movs	r3, #203	; 0xcb
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	449d      	add	sp, r3
 8009170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009172:	46c0      	nop			; (mov r8, r8)
 8009174:	fffffcd4 	.word	0xfffffcd4
 8009178:	fffffe70 	.word	0xfffffe70
 800917c:	fffffce4 	.word	0xfffffce4
 8009180:	fffffce2 	.word	0xfffffce2
 8009184:	00000326 	.word	0x00000326

08009188 <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 8009188:	b590      	push	{r4, r7, lr}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	0008      	movs	r0, r1
 8009192:	0011      	movs	r1, r2
 8009194:	1cbb      	adds	r3, r7, #2
 8009196:	1c02      	adds	r2, r0, #0
 8009198:	801a      	strh	r2, [r3, #0]
 800919a:	003b      	movs	r3, r7
 800919c:	1c0a      	adds	r2, r1, #0
 800919e:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 80091a0:	230e      	movs	r3, #14
 80091a2:	18fb      	adds	r3, r7, r3
 80091a4:	003a      	movs	r2, r7
 80091a6:	8812      	ldrh	r2, [r2, #0]
 80091a8:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 80091aa:	e02e      	b.n	800920a <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 80091ac:	240e      	movs	r4, #14
 80091ae:	193b      	adds	r3, r7, r4
 80091b0:	881b      	ldrh	r3, [r3, #0]
 80091b2:	0a1b      	lsrs	r3, r3, #8
 80091b4:	b299      	uxth	r1, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	1c5a      	adds	r2, r3, #1
 80091ba:	607a      	str	r2, [r7, #4]
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	b29a      	uxth	r2, r3
 80091c0:	200c      	movs	r0, #12
 80091c2:	183b      	adds	r3, r7, r0
 80091c4:	404a      	eors	r2, r1
 80091c6:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 80091c8:	183b      	adds	r3, r7, r0
 80091ca:	881b      	ldrh	r3, [r3, #0]
 80091cc:	091b      	lsrs	r3, r3, #4
 80091ce:	b299      	uxth	r1, r3
 80091d0:	183b      	adds	r3, r7, r0
 80091d2:	183a      	adds	r2, r7, r0
 80091d4:	8812      	ldrh	r2, [r2, #0]
 80091d6:	404a      	eors	r2, r1
 80091d8:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 80091da:	0021      	movs	r1, r4
 80091dc:	187b      	adds	r3, r7, r1
 80091de:	881b      	ldrh	r3, [r3, #0]
 80091e0:	021b      	lsls	r3, r3, #8
 80091e2:	b21a      	sxth	r2, r3
 80091e4:	183b      	adds	r3, r7, r0
 80091e6:	881b      	ldrh	r3, [r3, #0]
 80091e8:	031b      	lsls	r3, r3, #12
 80091ea:	b21b      	sxth	r3, r3
 80091ec:	4053      	eors	r3, r2
 80091ee:	b21a      	sxth	r2, r3
 80091f0:	183b      	adds	r3, r7, r0
 80091f2:	881b      	ldrh	r3, [r3, #0]
 80091f4:	015b      	lsls	r3, r3, #5
 80091f6:	b21b      	sxth	r3, r3
 80091f8:	4053      	eors	r3, r2
 80091fa:	b21a      	sxth	r2, r3
 80091fc:	183b      	adds	r3, r7, r0
 80091fe:	2000      	movs	r0, #0
 8009200:	5e1b      	ldrsh	r3, [r3, r0]
 8009202:	4053      	eors	r3, r2
 8009204:	b21a      	sxth	r2, r3
 8009206:	187b      	adds	r3, r7, r1
 8009208:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 800920a:	1cbb      	adds	r3, r7, #2
 800920c:	881b      	ldrh	r3, [r3, #0]
 800920e:	1cba      	adds	r2, r7, #2
 8009210:	1e59      	subs	r1, r3, #1
 8009212:	8011      	strh	r1, [r2, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d1c9      	bne.n	80091ac <calculate_crc+0x24>
    }
    return crc;
 8009218:	230e      	movs	r3, #14
 800921a:	18fb      	adds	r3, r7, r3
 800921c:	881b      	ldrh	r3, [r3, #0]
}
 800921e:	0018      	movs	r0, r3
 8009220:	46bd      	mov	sp, r7
 8009222:	b005      	add	sp, #20
 8009224:	bd90      	pop	{r4, r7, pc}
	...

08009228 <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	785b      	ldrb	r3, [r3, #1]
 8009234:	b299      	uxth	r1, r3
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	789b      	ldrb	r3, [r3, #2]
 800923a:	b29b      	uxth	r3, r3
 800923c:	021b      	lsls	r3, r3, #8
 800923e:	b29a      	uxth	r2, r3
 8009240:	200e      	movs	r0, #14
 8009242:	183b      	adds	r3, r7, r0
 8009244:	188a      	adds	r2, r1, r2
 8009246:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 8009248:	183b      	adds	r3, r7, r0
 800924a:	881b      	ldrh	r3, [r3, #0]
 800924c:	4a40      	ldr	r2, [pc, #256]	; (8009350 <check_for_error+0x128>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d100      	bne.n	8009254 <check_for_error+0x2c>
 8009252:	e06f      	b.n	8009334 <check_for_error+0x10c>
 8009254:	4a3e      	ldr	r2, [pc, #248]	; (8009350 <check_for_error+0x128>)
 8009256:	4293      	cmp	r3, r2
 8009258:	dd00      	ble.n	800925c <check_for_error+0x34>
 800925a:	e070      	b.n	800933e <check_for_error+0x116>
 800925c:	4a3d      	ldr	r2, [pc, #244]	; (8009354 <check_for_error+0x12c>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d100      	bne.n	8009264 <check_for_error+0x3c>
 8009262:	e062      	b.n	800932a <check_for_error+0x102>
 8009264:	4a3b      	ldr	r2, [pc, #236]	; (8009354 <check_for_error+0x12c>)
 8009266:	4293      	cmp	r3, r2
 8009268:	dd00      	ble.n	800926c <check_for_error+0x44>
 800926a:	e068      	b.n	800933e <check_for_error+0x116>
 800926c:	4a3a      	ldr	r2, [pc, #232]	; (8009358 <check_for_error+0x130>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d056      	beq.n	8009320 <check_for_error+0xf8>
 8009272:	4a39      	ldr	r2, [pc, #228]	; (8009358 <check_for_error+0x130>)
 8009274:	4293      	cmp	r3, r2
 8009276:	dd00      	ble.n	800927a <check_for_error+0x52>
 8009278:	e061      	b.n	800933e <check_for_error+0x116>
 800927a:	4a38      	ldr	r2, [pc, #224]	; (800935c <check_for_error+0x134>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d04a      	beq.n	8009316 <check_for_error+0xee>
 8009280:	4a36      	ldr	r2, [pc, #216]	; (800935c <check_for_error+0x134>)
 8009282:	4293      	cmp	r3, r2
 8009284:	dc5b      	bgt.n	800933e <check_for_error+0x116>
 8009286:	4a36      	ldr	r2, [pc, #216]	; (8009360 <check_for_error+0x138>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d03f      	beq.n	800930c <check_for_error+0xe4>
 800928c:	4a34      	ldr	r2, [pc, #208]	; (8009360 <check_for_error+0x138>)
 800928e:	4293      	cmp	r3, r2
 8009290:	dc55      	bgt.n	800933e <check_for_error+0x116>
 8009292:	4a34      	ldr	r2, [pc, #208]	; (8009364 <check_for_error+0x13c>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d034      	beq.n	8009302 <check_for_error+0xda>
 8009298:	4a32      	ldr	r2, [pc, #200]	; (8009364 <check_for_error+0x13c>)
 800929a:	4293      	cmp	r3, r2
 800929c:	dc4f      	bgt.n	800933e <check_for_error+0x116>
 800929e:	4a32      	ldr	r2, [pc, #200]	; (8009368 <check_for_error+0x140>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d029      	beq.n	80092f8 <check_for_error+0xd0>
 80092a4:	4a30      	ldr	r2, [pc, #192]	; (8009368 <check_for_error+0x140>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	dc49      	bgt.n	800933e <check_for_error+0x116>
 80092aa:	4a30      	ldr	r2, [pc, #192]	; (800936c <check_for_error+0x144>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d01e      	beq.n	80092ee <check_for_error+0xc6>
 80092b0:	4a2e      	ldr	r2, [pc, #184]	; (800936c <check_for_error+0x144>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	dc43      	bgt.n	800933e <check_for_error+0x116>
 80092b6:	2222      	movs	r2, #34	; 0x22
 80092b8:	32ff      	adds	r2, #255	; 0xff
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d012      	beq.n	80092e4 <check_for_error+0xbc>
 80092be:	2291      	movs	r2, #145	; 0x91
 80092c0:	0052      	lsls	r2, r2, #1
 80092c2:	4293      	cmp	r3, r2
 80092c4:	da3b      	bge.n	800933e <check_for_error+0x116>
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d002      	beq.n	80092d0 <check_for_error+0xa8>
 80092ca:	2b11      	cmp	r3, #17
 80092cc:	d005      	beq.n	80092da <check_for_error+0xb2>
 80092ce:	e036      	b.n	800933e <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 80092d0:	4b27      	ldr	r3, [pc, #156]	; (8009370 <check_for_error+0x148>)
 80092d2:	0018      	movs	r0, r3
 80092d4:	f7f9 fd5a 	bl	8002d8c <send_debug_logs>
            break;
 80092d8:	e036      	b.n	8009348 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 80092da:	4b26      	ldr	r3, [pc, #152]	; (8009374 <check_for_error+0x14c>)
 80092dc:	0018      	movs	r0, r3
 80092de:	f7f9 fd55 	bl	8002d8c <send_debug_logs>
            break;
 80092e2:	e031      	b.n	8009348 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 80092e4:	4b24      	ldr	r3, [pc, #144]	; (8009378 <check_for_error+0x150>)
 80092e6:	0018      	movs	r0, r3
 80092e8:	f7f9 fd50 	bl	8002d8c <send_debug_logs>
            break;
 80092ec:	e02c      	b.n	8009348 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 80092ee:	4b23      	ldr	r3, [pc, #140]	; (800937c <check_for_error+0x154>)
 80092f0:	0018      	movs	r0, r3
 80092f2:	f7f9 fd4b 	bl	8002d8c <send_debug_logs>
            break;
 80092f6:	e027      	b.n	8009348 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 80092f8:	4b21      	ldr	r3, [pc, #132]	; (8009380 <check_for_error+0x158>)
 80092fa:	0018      	movs	r0, r3
 80092fc:	f7f9 fd46 	bl	8002d8c <send_debug_logs>
            break;
 8009300:	e022      	b.n	8009348 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 8009302:	4b20      	ldr	r3, [pc, #128]	; (8009384 <check_for_error+0x15c>)
 8009304:	0018      	movs	r0, r3
 8009306:	f7f9 fd41 	bl	8002d8c <send_debug_logs>
            break;
 800930a:	e01d      	b.n	8009348 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 800930c:	4b1e      	ldr	r3, [pc, #120]	; (8009388 <check_for_error+0x160>)
 800930e:	0018      	movs	r0, r3
 8009310:	f7f9 fd3c 	bl	8002d8c <send_debug_logs>
            break;
 8009314:	e018      	b.n	8009348 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 8009316:	4b1d      	ldr	r3, [pc, #116]	; (800938c <check_for_error+0x164>)
 8009318:	0018      	movs	r0, r3
 800931a:	f7f9 fd37 	bl	8002d8c <send_debug_logs>
            break;
 800931e:	e013      	b.n	8009348 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 8009320:	4b1b      	ldr	r3, [pc, #108]	; (8009390 <check_for_error+0x168>)
 8009322:	0018      	movs	r0, r3
 8009324:	f7f9 fd32 	bl	8002d8c <send_debug_logs>
            break;
 8009328:	e00e      	b.n	8009348 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 800932a:	4b1a      	ldr	r3, [pc, #104]	; (8009394 <check_for_error+0x16c>)
 800932c:	0018      	movs	r0, r3
 800932e:	f7f9 fd2d 	bl	8002d8c <send_debug_logs>
            break;
 8009332:	e009      	b.n	8009348 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 8009334:	4b18      	ldr	r3, [pc, #96]	; (8009398 <check_for_error+0x170>)
 8009336:	0018      	movs	r0, r3
 8009338:	f7f9 fd28 	bl	8002d8c <send_debug_logs>
            break;
 800933c:	e004      	b.n	8009348 <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 800933e:	4b17      	ldr	r3, [pc, #92]	; (800939c <check_for_error+0x174>)
 8009340:	0018      	movs	r0, r3
 8009342:	f7f9 fd23 	bl	8002d8c <send_debug_logs>
            break;
 8009346:	46c0      	nop			; (mov r8, r8)
    }
}
 8009348:	46c0      	nop			; (mov r8, r8)
 800934a:	46bd      	mov	sp, r7
 800934c:	b004      	add	sp, #16
 800934e:	bd80      	pop	{r7, pc}
 8009350:	00004601 	.word	0x00004601
 8009354:	00004501 	.word	0x00004501
 8009358:	00003501 	.word	0x00003501
 800935c:	00002601 	.word	0x00002601
 8009360:	00002511 	.word	0x00002511
 8009364:	00002501 	.word	0x00002501
 8009368:	00000611 	.word	0x00000611
 800936c:	00000601 	.word	0x00000601
 8009370:	080137e4 	.word	0x080137e4
 8009374:	08013830 	.word	0x08013830
 8009378:	08013894 	.word	0x08013894
 800937c:	080138cc 	.word	0x080138cc
 8009380:	08013970 	.word	0x08013970
 8009384:	080139d8 	.word	0x080139d8
 8009388:	08013a38 	.word	0x08013a38
 800938c:	08013ac4 	.word	0x08013ac4
 8009390:	08013b24 	.word	0x08013b24
 8009394:	08013bd0 	.word	0x08013bd0
 8009398:	08013c1c 	.word	0x08013c1c
 800939c:	08013c64 	.word	0x08013c64

080093a0 <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 80093a0:	b5b0      	push	{r4, r5, r7, lr}
 80093a2:	b086      	sub	sp, #24
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 80093aa:	230f      	movs	r3, #15
 80093ac:	18fb      	adds	r3, r7, r3
 80093ae:	2200      	movs	r2, #0
 80093b0:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 80093b2:	2316      	movs	r3, #22
 80093b4:	18fb      	adds	r3, r7, r3
 80093b6:	2200      	movs	r2, #0
 80093b8:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 80093ba:	f7f9 fd77 	bl	8002eac <get_systick>
 80093be:	0003      	movs	r3, r0
 80093c0:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 80093c2:	2315      	movs	r3, #21
 80093c4:	18fb      	adds	r3, r7, r3
 80093c6:	2200      	movs	r2, #0
 80093c8:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 80093ca:	e054      	b.n	8009476 <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 80093cc:	4a34      	ldr	r2, [pc, #208]	; (80094a0 <receive_astronode_answer+0x100>)
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	0011      	movs	r1, r2
 80093d2:	0018      	movs	r0, r3
 80093d4:	f7f9 fd72 	bl	8002ebc <is_systick_timeout_over>
 80093d8:	1e03      	subs	r3, r0, #0
 80093da:	d005      	beq.n	80093e8 <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 80093dc:	4b31      	ldr	r3, [pc, #196]	; (80094a4 <receive_astronode_answer+0x104>)
 80093de:	0018      	movs	r0, r3
 80093e0:	f7f9 fcd4 	bl	8002d8c <send_debug_logs>
            return RS_FAILURE;
 80093e4:	2300      	movs	r3, #0
 80093e6:	e057      	b.n	8009498 <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 80093e8:	250f      	movs	r5, #15
 80093ea:	197b      	adds	r3, r7, r5
 80093ec:	0018      	movs	r0, r3
 80093ee:	f7f9 fd37 	bl	8002e60 <is_astronode_character_received>
 80093f2:	0003      	movs	r3, r0
 80093f4:	0019      	movs	r1, r3
 80093f6:	2016      	movs	r0, #22
 80093f8:	183b      	adds	r3, r7, r0
 80093fa:	183a      	adds	r2, r7, r0
 80093fc:	8812      	ldrh	r2, [r2, #0]
 80093fe:	801a      	strh	r2, [r3, #0]
 8009400:	2415      	movs	r4, #21
 8009402:	193b      	adds	r3, r7, r4
 8009404:	193a      	adds	r2, r7, r4
 8009406:	7812      	ldrb	r2, [r2, #0]
 8009408:	701a      	strb	r2, [r3, #0]
 800940a:	2900      	cmp	r1, #0
 800940c:	d033      	beq.n	8009476 <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 800940e:	197b      	adds	r3, r7, r5
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	2b02      	cmp	r3, #2
 8009414:	d105      	bne.n	8009422 <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 8009416:	193b      	adds	r3, r7, r4
 8009418:	2200      	movs	r2, #0
 800941a:	701a      	strb	r2, [r3, #0]
                length = 0;
 800941c:	183b      	adds	r3, r7, r0
 800941e:	2200      	movs	r2, #0
 8009420:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 8009422:	2116      	movs	r1, #22
 8009424:	187b      	adds	r3, r7, r1
 8009426:	881b      	ldrh	r3, [r3, #0]
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	18d3      	adds	r3, r2, r3
 800942c:	220f      	movs	r2, #15
 800942e:	18ba      	adds	r2, r7, r2
 8009430:	7812      	ldrb	r2, [r2, #0]
 8009432:	701a      	strb	r2, [r3, #0]
            length++;
 8009434:	187b      	adds	r3, r7, r1
 8009436:	881a      	ldrh	r2, [r3, #0]
 8009438:	187b      	adds	r3, r7, r1
 800943a:	3201      	adds	r2, #1
 800943c:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 800943e:	187b      	adds	r3, r7, r1
 8009440:	881b      	ldrh	r3, [r3, #0]
 8009442:	2bb2      	cmp	r3, #178	; 0xb2
 8009444:	d905      	bls.n	8009452 <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 8009446:	4b18      	ldr	r3, [pc, #96]	; (80094a8 <receive_astronode_answer+0x108>)
 8009448:	0018      	movs	r0, r3
 800944a:	f7f9 fc9f 	bl	8002d8c <send_debug_logs>
                return RS_FAILURE;
 800944e:	2300      	movs	r3, #0
 8009450:	e022      	b.n	8009498 <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 8009452:	230f      	movs	r3, #15
 8009454:	18fb      	adds	r3, r7, r3
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	2b03      	cmp	r3, #3
 800945a:	d10c      	bne.n	8009476 <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 800945c:	2216      	movs	r2, #22
 800945e:	18bb      	adds	r3, r7, r2
 8009460:	881b      	ldrh	r3, [r3, #0]
 8009462:	2b01      	cmp	r3, #1
 8009464:	d907      	bls.n	8009476 <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	18ba      	adds	r2, r7, r2
 800946a:	8812      	ldrh	r2, [r2, #0]
 800946c:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 800946e:	2315      	movs	r3, #21
 8009470:	18fb      	adds	r3, r7, r3
 8009472:	2201      	movs	r2, #1
 8009474:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 8009476:	2315      	movs	r3, #21
 8009478:	18fb      	adds	r3, r7, r3
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	2201      	movs	r2, #1
 800947e:	4053      	eors	r3, r2
 8009480:	b2db      	uxtb	r3, r3
 8009482:	2b00      	cmp	r3, #0
 8009484:	d1a2      	bne.n	80093cc <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 8009486:	4b09      	ldr	r3, [pc, #36]	; (80094ac <receive_astronode_answer+0x10c>)
 8009488:	0018      	movs	r0, r3
 800948a:	f7f9 fc7f 	bl	8002d8c <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	0018      	movs	r0, r3
 8009492:	f7f9 fc7b 	bl	8002d8c <send_debug_logs>

    return RS_SUCCESS;
 8009496:	2301      	movs	r3, #1
}
 8009498:	0018      	movs	r0, r3
 800949a:	46bd      	mov	sp, r7
 800949c:	b006      	add	sp, #24
 800949e:	bdb0      	pop	{r4, r5, r7, pc}
 80094a0:	000005dc 	.word	0x000005dc
 80094a4:	08013c88 	.word	0x08013c88
 80094a8:	08013cac 	.word	0x08013cac
 80094ac:	08013cf8 	.word	0x08013cf8

080094b0 <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b082      	sub	sp, #8
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	0002      	movs	r2, r0
 80094b8:	6039      	str	r1, [r7, #0]
 80094ba:	1dfb      	adds	r3, r7, #7
 80094bc:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 80094be:	1dfb      	adds	r3, r7, #7
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	091b      	lsrs	r3, r3, #4
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	001a      	movs	r2, r3
 80094c8:	4b08      	ldr	r3, [pc, #32]	; (80094ec <uint8_to_ascii_buffer+0x3c>)
 80094ca:	5c9a      	ldrb	r2, [r3, r2]
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 80094d0:	1dfb      	adds	r3, r7, #7
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	220f      	movs	r2, #15
 80094d6:	401a      	ands	r2, r3
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	3301      	adds	r3, #1
 80094dc:	4903      	ldr	r1, [pc, #12]	; (80094ec <uint8_to_ascii_buffer+0x3c>)
 80094de:	5c8a      	ldrb	r2, [r1, r2]
 80094e0:	701a      	strb	r2, [r3, #0]
}
 80094e2:	46c0      	nop			; (mov r8, r8)
 80094e4:	46bd      	mov	sp, r7
 80094e6:	b002      	add	sp, #8
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	46c0      	nop			; (mov r8, r8)
 80094ec:	08013f28 	.word	0x08013f28

080094f0 <lis2dw12_read_reg>:
  *
  */
int32_t __weak lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80094f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094f2:	b087      	sub	sp, #28
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	60f8      	str	r0, [r7, #12]
 80094f8:	0008      	movs	r0, r1
 80094fa:	607a      	str	r2, [r7, #4]
 80094fc:	0019      	movs	r1, r3
 80094fe:	260b      	movs	r6, #11
 8009500:	19bb      	adds	r3, r7, r6
 8009502:	1c02      	adds	r2, r0, #0
 8009504:	701a      	strb	r2, [r3, #0]
 8009506:	2508      	movs	r5, #8
 8009508:	197b      	adds	r3, r7, r5
 800950a:	1c0a      	adds	r2, r1, #0
 800950c:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	685c      	ldr	r4, [r3, #4]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	68d8      	ldr	r0, [r3, #12]
 8009516:	197b      	adds	r3, r7, r5
 8009518:	881d      	ldrh	r5, [r3, #0]
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	19bb      	adds	r3, r7, r6
 800951e:	7819      	ldrb	r1, [r3, #0]
 8009520:	002b      	movs	r3, r5
 8009522:	47a0      	blx	r4
 8009524:	0003      	movs	r3, r0
 8009526:	617b      	str	r3, [r7, #20]

  return ret;
 8009528:	697b      	ldr	r3, [r7, #20]
}
 800952a:	0018      	movs	r0, r3
 800952c:	46bd      	mov	sp, r7
 800952e:	b007      	add	sp, #28
 8009530:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009532 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b084      	sub	sp, #16
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
 800953a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 800953c:	683a      	ldr	r2, [r7, #0]
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	2301      	movs	r3, #1
 8009542:	210f      	movs	r1, #15
 8009544:	f7ff ffd4 	bl	80094f0 <lis2dw12_read_reg>
 8009548:	0003      	movs	r3, r0
 800954a:	60fb      	str	r3, [r7, #12]

  return ret;
 800954c:	68fb      	ldr	r3, [r7, #12]
}
 800954e:	0018      	movs	r0, r3
 8009550:	46bd      	mov	sp, r7
 8009552:	b004      	add	sp, #16
 8009554:	bd80      	pop	{r7, pc}
	...

08009558 <my_astro_init>:
 *      Author: mzeml
 */
#include "my_astronode.h"

bool my_astro_init ( void )
{
 8009558:	b590      	push	{r4, r7, lr}
 800955a:	b087      	sub	sp, #28
 800955c:	af04      	add	r7, sp, #16
	bool cfg_wr = false ;
 800955e:	1dfb      	adds	r3, r7, #7
 8009560:	2200      	movs	r2, #0
 8009562:	701a      	strb	r2, [r3, #0]
	tim_seconds = 0 ;
 8009564:	4b24      	ldr	r3, [pc, #144]	; (80095f8 <my_astro_init+0xa0>)
 8009566:	2200      	movs	r2, #0
 8009568:	801a      	strh	r2, [r3, #0]

	HAL_TIM_Base_Start_IT ( MY_TIMER ) ;
 800956a:	4b24      	ldr	r3, [pc, #144]	; (80095fc <my_astro_init+0xa4>)
 800956c:	0018      	movs	r0, r3
 800956e:	f7fd f849 	bl	8006604 <HAL_TIM_Base_Start_IT>
	while ( tim_seconds < MY_ASTRO_INIT_TIME && !cfg_wr )
 8009572:	e01a      	b.n	80095aa <my_astro_init+0x52>
	{
		cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false ) ;
 8009574:	1dfc      	adds	r4, r7, #7
 8009576:	2300      	movs	r3, #0
 8009578:	9303      	str	r3, [sp, #12]
 800957a:	2301      	movs	r3, #1
 800957c:	9302      	str	r3, [sp, #8]
 800957e:	2301      	movs	r3, #1
 8009580:	9301      	str	r3, [sp, #4]
 8009582:	2301      	movs	r3, #1
 8009584:	9300      	str	r3, [sp, #0]
 8009586:	2300      	movs	r3, #0
 8009588:	2201      	movs	r2, #1
 800958a:	2101      	movs	r1, #1
 800958c:	2001      	movs	r0, #1
 800958e:	f7fe fb09 	bl	8007ba4 <astronode_send_cfg_wr>
 8009592:	0003      	movs	r3, r0
 8009594:	7023      	strb	r3, [r4, #0]
		my_astro_off () ;
 8009596:	f7f9 fccf 	bl	8002f38 <my_astro_off>
		HAL_Delay ( 3000 ) ;
 800959a:	4b19      	ldr	r3, [pc, #100]	; (8009600 <my_astro_init+0xa8>)
 800959c:	0018      	movs	r0, r3
 800959e:	f7fa f981 	bl	80038a4 <HAL_Delay>
		my_astro_on () ;
 80095a2:	f7f9 fca1 	bl	8002ee8 <my_astro_on>
		reset_astronode () ;
 80095a6:	f7f9 fc21 	bl	8002dec <reset_astronode>
	while ( tim_seconds < MY_ASTRO_INIT_TIME && !cfg_wr )
 80095aa:	4b13      	ldr	r3, [pc, #76]	; (80095f8 <my_astro_init+0xa0>)
 80095ac:	881b      	ldrh	r3, [r3, #0]
 80095ae:	2b3b      	cmp	r3, #59	; 0x3b
 80095b0:	d806      	bhi.n	80095c0 <my_astro_init+0x68>
 80095b2:	1dfb      	adds	r3, r7, #7
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	2201      	movs	r2, #1
 80095b8:	4053      	eors	r3, r2
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d1d9      	bne.n	8009574 <my_astro_init+0x1c>
	}
	tim_seconds = 0 ;
 80095c0:	4b0d      	ldr	r3, [pc, #52]	; (80095f8 <my_astro_init+0xa0>)
 80095c2:	2200      	movs	r2, #0
 80095c4:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT ( MY_TIMER ) ;
 80095c6:	4b0d      	ldr	r3, [pc, #52]	; (80095fc <my_astro_init+0xa4>)
 80095c8:	0018      	movs	r0, r3
 80095ca:	f7fd f877 	bl	80066bc <HAL_TIM_Base_Stop_IT>
	if ( cfg_wr )
 80095ce:	1dfb      	adds	r3, r7, #7
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d00b      	beq.n	80095ee <my_astro_init+0x96>
	{
		astronode_send_cfg_sr () ;
 80095d6:	f7fe faad 	bl	8007b34 <astronode_send_cfg_sr>
		astronode_send_mpn_rr () ;
 80095da:	f7ff f899 	bl	8008710 <astronode_send_mpn_rr>
		astronode_send_msn_rr () ;
 80095de:	f7fe fc37 	bl	8007e50 <astronode_send_msn_rr>
		astronode_send_mgi_rr () ;
 80095e2:	f7fe fb8b 	bl	8007cfc <astronode_send_mgi_rr>
		astronode_send_pld_fr () ;
 80095e6:	f7fe ff21 	bl	800842c <astronode_send_pld_fr>
		return true ;
 80095ea:	2301      	movs	r3, #1
 80095ec:	e000      	b.n	80095f0 <my_astro_init+0x98>
	}
	else
	{
		return false ;
 80095ee:	2300      	movs	r3, #0
	}
}
 80095f0:	0018      	movs	r0, r3
 80095f2:	46bd      	mov	sp, r7
 80095f4:	b003      	add	sp, #12
 80095f6:	bd90      	pop	{r4, r7, pc}
 80095f8:	200009b6 	.word	0x200009b6
 80095fc:	2000078c 	.word	0x2000078c
 8009600:	00000bb8 	.word	0x00000bb8

08009604 <my_astro_add_payload_2_queue>:
bool my_astro_add_payload_2_queue ( char* payload )
{
 8009604:	b590      	push	{r4, r7, lr}
 8009606:	b085      	sub	sp, #20
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
	uint16_t id = 0 ;
 800960c:	240e      	movs	r4, #14
 800960e:	193b      	adds	r3, r7, r4
 8009610:	2200      	movs	r2, #0
 8009612:	801a      	strh	r2, [r3, #0]
	size_t l = strlen ( payload ) ;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	0018      	movs	r0, r3
 8009618:	f7f6 fd74 	bl	8000104 <strlen>
 800961c:	0003      	movs	r3, r0
 800961e:	60bb      	str	r3, [r7, #8]
	if ( l <= ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES )
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	2ba0      	cmp	r3, #160	; 0xa0
 8009624:	d80b      	bhi.n	800963e <my_astro_add_payload_2_queue+0x3a>
	{
		if ( astronode_send_pld_er ( id , payload , l ) )
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	b29a      	uxth	r2, r3
 800962a:	6879      	ldr	r1, [r7, #4]
 800962c:	193b      	adds	r3, r7, r4
 800962e:	881b      	ldrh	r3, [r3, #0]
 8009630:	0018      	movs	r0, r3
 8009632:	f7fe fe57 	bl	80082e4 <astronode_send_pld_er>
 8009636:	1e03      	subs	r3, r0, #0
 8009638:	d005      	beq.n	8009646 <my_astro_add_payload_2_queue+0x42>
		{
			return true ;
 800963a:	2301      	movs	r3, #1
 800963c:	e004      	b.n	8009648 <my_astro_add_payload_2_queue+0x44>
		}
	}
	else
	{
		send_debug_logs ( "ERROR: Payload exceeded ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES value." ) ;
 800963e:	4b04      	ldr	r3, [pc, #16]	; (8009650 <my_astro_add_payload_2_queue+0x4c>)
 8009640:	0018      	movs	r0, r3
 8009642:	f7f9 fba3 	bl	8002d8c <send_debug_logs>
	}
	return false ;
 8009646:	2300      	movs	r3, #0
}
 8009648:	0018      	movs	r0, r3
 800964a:	46bd      	mov	sp, r7
 800964c:	b005      	add	sp, #20
 800964e:	bd90      	pop	{r4, r7, pc}
 8009650:	08013d24 	.word	0x08013d24

08009654 <my_astro_read_evt_reg>:
bool my_astro_read_evt_reg ( void )
{
 8009654:	b580      	push	{r7, lr}
 8009656:	af00      	add	r7, sp, #0
	send_debug_logs ( "my_astro: evt pin is high." ) ;
 8009658:	4b15      	ldr	r3, [pc, #84]	; (80096b0 <my_astro_read_evt_reg+0x5c>)
 800965a:	0018      	movs	r0, r3
 800965c:	f7f9 fb96 	bl	8002d8c <send_debug_logs>
	astronode_send_evt_rr () ;
 8009660:	f7fe fd00 	bl	8008064 <astronode_send_evt_rr>
	if (is_sak_available () )
 8009664:	f7ff faae 	bl	8008bc4 <is_sak_available>
 8009668:	1e03      	subs	r3, r0, #0
 800966a:	d007      	beq.n	800967c <my_astro_read_evt_reg+0x28>
	{
	  astronode_send_sak_rr () ;
 800966c:	f7fe ffba 	bl	80085e4 <astronode_send_sak_rr>
	  astronode_send_sak_cr () ;
 8009670:	f7ff f80e 	bl	8008690 <astronode_send_sak_cr>
	  send_debug_logs ( "my_astro: message has been acknowledged." ) ;
 8009674:	4b0f      	ldr	r3, [pc, #60]	; (80096b4 <my_astro_read_evt_reg+0x60>)
 8009676:	0018      	movs	r0, r3
 8009678:	f7f9 fb88 	bl	8002d8c <send_debug_logs>
	  //astronode_send_per_rr () ;
	}
	if ( is_astronode_reset () )
 800967c:	f7ff faac 	bl	8008bd8 <is_astronode_reset>
 8009680:	1e03      	subs	r3, r0, #0
 8009682:	d005      	beq.n	8009690 <my_astro_read_evt_reg+0x3c>
	{
	  send_debug_logs ( "my_astro: terminal has been reset." ) ;
 8009684:	4b0c      	ldr	r3, [pc, #48]	; (80096b8 <my_astro_read_evt_reg+0x64>)
 8009686:	0018      	movs	r0, r3
 8009688:	f7f9 fb80 	bl	8002d8c <send_debug_logs>
	  astronode_send_res_cr () ;
 800968c:	f7fe ff0a 	bl	80084a4 <astronode_send_res_cr>
	}
	if ( is_command_available () )
 8009690:	f7ff faac 	bl	8008bec <is_command_available>
 8009694:	1e03      	subs	r3, r0, #0
 8009696:	d007      	beq.n	80096a8 <my_astro_read_evt_reg+0x54>
	{
	  send_debug_logs ( "my_astro: unicast command is available" ) ;
 8009698:	4b08      	ldr	r3, [pc, #32]	; (80096bc <my_astro_read_evt_reg+0x68>)
 800969a:	0018      	movs	r0, r3
 800969c:	f7f9 fb76 	bl	8002d8c <send_debug_logs>
	  astronode_send_cmd_rr () ;
 80096a0:	f7ff f920 	bl	80088e4 <astronode_send_cmd_rr>
	  astronode_send_cmd_cr () ;
 80096a4:	f7ff f8de 	bl	8008864 <astronode_send_cmd_cr>
	}
	return true ;
 80096a8:	2301      	movs	r3, #1
}
 80096aa:	0018      	movs	r0, r3
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	08013d68 	.word	0x08013d68
 80096b4:	08013d84 	.word	0x08013d84
 80096b8:	08013db0 	.word	0x08013db0
 80096bc:	08013dd4 	.word	0x08013dd4

080096c0 <my_astro_log>:
bool my_astro_log ( void )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	af00      	add	r7, sp, #0
	astronode_send_rtc_rr ();
 80096c4:	f7fe ff2e 	bl	8008524 <astronode_send_rtc_rr>
	astronode_send_nco_rr () ;
 80096c8:	f7fe fc6c 	bl	8007fa4 <astronode_send_nco_rr>
	//astronode_send_lcd_rr () ;
	//astronode_send_end_rr () ;
	//astronode_send_per_rr () ;
	return true ;
 80096cc:	2301      	movs	r3, #1
}
 80096ce:	0018      	movs	r0, r3
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <my_astro_write_coordinates>:

void my_astro_write_coordinates ( int32_t astro_geo_wr_latitude , int32_t astro_geo_wr_longitude )
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]
	astronode_send_geo_wr ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 80096de:	683a      	ldr	r2, [r7, #0]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	0011      	movs	r1, r2
 80096e4:	0018      	movs	r0, r3
 80096e6:	f7fe fd3d 	bl	8008164 <astronode_send_geo_wr>
}
 80096ea:	46c0      	nop			; (mov r8, r8)
 80096ec:	46bd      	mov	sp, r7
 80096ee:	b002      	add	sp, #8
 80096f0:	bd80      	pop	{r7, pc}
	...

080096f4 <my_lx6_get_coordinates>:

#include "my_lx6_gnss.h"


bool my_lx6_get_coordinates ( uint16_t active_time_ths , double nmea_pdop_ths , double* nmea_fixed_pdop_d , int32_t* astro_geo_wr_latitude , int32_t* astro_geo_wr_longitude )
{
 80096f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096f6:	4cde      	ldr	r4, [pc, #888]	; (8009a70 <my_lx6_get_coordinates+0x37c>)
 80096f8:	44a5      	add	sp, r4
 80096fa:	af02      	add	r7, sp, #8
 80096fc:	0001      	movs	r1, r0
 80096fe:	603a      	str	r2, [r7, #0]
 8009700:	607b      	str	r3, [r7, #4]
 8009702:	4bdc      	ldr	r3, [pc, #880]	; (8009a74 <my_lx6_get_coordinates+0x380>)
 8009704:	20da      	movs	r0, #218	; 0xda
 8009706:	0080      	lsls	r0, r0, #2
 8009708:	181b      	adds	r3, r3, r0
 800970a:	19db      	adds	r3, r3, r7
 800970c:	1c0a      	adds	r2, r1, #0
 800970e:	801a      	strh	r2, [r3, #0]
	bool		r = false ;
 8009710:	4bd9      	ldr	r3, [pc, #868]	; (8009a78 <my_lx6_get_coordinates+0x384>)
 8009712:	18fb      	adds	r3, r7, r3
 8009714:	2200      	movs	r2, #0
 8009716:	701a      	strb	r2, [r3, #0]
	uint8_t		rxd_byte = 0 ;
 8009718:	4bd8      	ldr	r3, [pc, #864]	; (8009a7c <my_lx6_get_coordinates+0x388>)
 800971a:	18fb      	adds	r3, r7, r3
 800971c:	2200      	movs	r2, #0
 800971e:	701a      	strb	r2, [r3, #0]
	uint8_t		nmea_message[NMEA_MESSAGE_SIZE] = {0} ;
 8009720:	4bd7      	ldr	r3, [pc, #860]	; (8009a80 <my_lx6_get_coordinates+0x38c>)
 8009722:	0004      	movs	r4, r0
 8009724:	191b      	adds	r3, r3, r4
 8009726:	19db      	adds	r3, r3, r7
 8009728:	2200      	movs	r2, #0
 800972a:	601a      	str	r2, [r3, #0]
 800972c:	3304      	adds	r3, #4
 800972e:	22f6      	movs	r2, #246	; 0xf6
 8009730:	2100      	movs	r1, #0
 8009732:	0018      	movs	r0, r3
 8009734:	f002 f98e 	bl	800ba54 <memset>
	uint8_t		gngll_message[NMEA_MESSAGE_SIZE] = {0} ;
 8009738:	4bd2      	ldr	r3, [pc, #840]	; (8009a84 <my_lx6_get_coordinates+0x390>)
 800973a:	191b      	adds	r3, r3, r4
 800973c:	19db      	adds	r3, r3, r7
 800973e:	2200      	movs	r2, #0
 8009740:	601a      	str	r2, [r3, #0]
 8009742:	3304      	adds	r3, #4
 8009744:	22f6      	movs	r2, #246	; 0xf6
 8009746:	2100      	movs	r1, #0
 8009748:	0018      	movs	r0, r3
 800974a:	f002 f983 	bl	800ba54 <memset>
	uint8_t		rmc_message[NMEA_MESSAGE_SIZE] = {0} ;
 800974e:	4bce      	ldr	r3, [pc, #824]	; (8009a88 <my_lx6_get_coordinates+0x394>)
 8009750:	191b      	adds	r3, r3, r4
 8009752:	19db      	adds	r3, r3, r7
 8009754:	2200      	movs	r2, #0
 8009756:	601a      	str	r2, [r3, #0]
 8009758:	3304      	adds	r3, #4
 800975a:	22f6      	movs	r2, #246	; 0xf6
 800975c:	2100      	movs	r1, #0
 800975e:	0018      	movs	r0, r3
 8009760:	f002 f978 	bl	800ba54 <memset>
	uint8_t		i_nmea = 0 ;
 8009764:	4bc9      	ldr	r3, [pc, #804]	; (8009a8c <my_lx6_get_coordinates+0x398>)
 8009766:	0021      	movs	r1, r4
 8009768:	185b      	adds	r3, r3, r1
 800976a:	19db      	adds	r3, r3, r7
 800976c:	2200      	movs	r2, #0
 800976e:	701a      	strb	r2, [r3, #0]
	uint8_t		gsv_tns = 0 ;
 8009770:	4bc7      	ldr	r3, [pc, #796]	; (8009a90 <my_lx6_get_coordinates+0x39c>)
 8009772:	18fb      	adds	r3, r7, r3
 8009774:	2200      	movs	r2, #0
 8009776:	701a      	strb	r2, [r3, #0]
	char 		nmea_latitude_s[MY_GNSS_NMEA_MAX_SIZE] = {0} ; // 10 + ew. znak minus + '\0'
 8009778:	4bc6      	ldr	r3, [pc, #792]	; (8009a94 <my_lx6_get_coordinates+0x3a0>)
 800977a:	000c      	movs	r4, r1
 800977c:	185b      	adds	r3, r3, r1
 800977e:	19db      	adds	r3, r3, r7
 8009780:	2200      	movs	r2, #0
 8009782:	601a      	str	r2, [r3, #0]
 8009784:	3304      	adds	r3, #4
 8009786:	2208      	movs	r2, #8
 8009788:	2100      	movs	r1, #0
 800978a:	0018      	movs	r0, r3
 800978c:	f002 f962 	bl	800ba54 <memset>
	char 		nmea_longitude_s[MY_GNSS_NMEA_MAX_SIZE] = {0} ; // 10 + ew. znak minus + '\0'
 8009790:	4bc1      	ldr	r3, [pc, #772]	; (8009a98 <my_lx6_get_coordinates+0x3a4>)
 8009792:	191b      	adds	r3, r3, r4
 8009794:	19db      	adds	r3, r3, r7
 8009796:	2200      	movs	r2, #0
 8009798:	601a      	str	r2, [r3, #0]
 800979a:	3304      	adds	r3, #4
 800979c:	2208      	movs	r2, #8
 800979e:	2100      	movs	r1, #0
 80097a0:	0018      	movs	r0, r3
 80097a2:	f002 f957 	bl	800ba54 <memset>
	char 		nmea_coordinates_log[52] ; // Nagłowek + 12 + ew. znak minus + '\0'
	char* 		nmea_gngsa_label = "GNGSA" ;
 80097a6:	4bbd      	ldr	r3, [pc, #756]	; (8009a9c <my_lx6_get_coordinates+0x3a8>)
 80097a8:	22d8      	movs	r2, #216	; 0xd8
 80097aa:	0092      	lsls	r2, r2, #2
 80097ac:	18ba      	adds	r2, r7, r2
 80097ae:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngll_label = "GNGLL" ;
 80097b0:	4bbb      	ldr	r3, [pc, #748]	; (8009aa0 <my_lx6_get_coordinates+0x3ac>)
 80097b2:	22d7      	movs	r2, #215	; 0xd7
 80097b4:	0092      	lsls	r2, r2, #2
 80097b6:	18ba      	adds	r2, r7, r2
 80097b8:	6013      	str	r3, [r2, #0]
	char* 		nmea_rmc_label = "RMC" ;
 80097ba:	4bba      	ldr	r3, [pc, #744]	; (8009aa4 <my_lx6_get_coordinates+0x3b0>)
 80097bc:	22d6      	movs	r2, #214	; 0xd6
 80097be:	0092      	lsls	r2, r2, #2
 80097c0:	18ba      	adds	r2, r7, r2
 80097c2:	6013      	str	r3, [r2, #0]
	char* 		nmea_gsv_label = "GSV" ;
 80097c4:	4bb8      	ldr	r3, [pc, #736]	; (8009aa8 <my_lx6_get_coordinates+0x3b4>)
 80097c6:	22d5      	movs	r2, #213	; 0xd5
 80097c8:	0092      	lsls	r2, r2, #2
 80097ca:	18ba      	adds	r2, r7, r2
 80097cc:	6013      	str	r3, [r2, #0]
	char		nmea_fixed_mode_s = '\0' ;
 80097ce:	4bb7      	ldr	r3, [pc, #732]	; (8009aac <my_lx6_get_coordinates+0x3b8>)
 80097d0:	18fb      	adds	r3, r7, r3
 80097d2:	2200      	movs	r2, #0
 80097d4:	701a      	strb	r2, [r3, #0]

	tim_seconds = 0 ;
 80097d6:	4bb6      	ldr	r3, [pc, #728]	; (8009ab0 <my_lx6_get_coordinates+0x3bc>)
 80097d8:	2200      	movs	r2, #0
 80097da:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &htim6 ) ;
 80097dc:	4bb5      	ldr	r3, [pc, #724]	; (8009ab4 <my_lx6_get_coordinates+0x3c0>)
 80097de:	0018      	movs	r0, r3
 80097e0:	f7fc ff10 	bl	8006604 <HAL_TIM_Base_Start_IT>
	my_lx6_on () ;
 80097e4:	f7f9 fbce 	bl	8002f84 <my_lx6_on>
	while ( tim_seconds < active_time_ths  ) // 1200 = 10 min.
 80097e8:	e0ea      	b.n	80099c0 <my_lx6_get_coordinates+0x2cc>
	{
		HAL_UART_Receive ( HUART_Lx6 , &rxd_byte , 1 , UART_TIMEOUT ) ;
 80097ea:	23fa      	movs	r3, #250	; 0xfa
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	4ca3      	ldr	r4, [pc, #652]	; (8009a7c <my_lx6_get_coordinates+0x388>)
 80097f0:	1939      	adds	r1, r7, r4
 80097f2:	48b1      	ldr	r0, [pc, #708]	; (8009ab8 <my_lx6_get_coordinates+0x3c4>)
 80097f4:	2201      	movs	r2, #1
 80097f6:	f7fd fb19 	bl	8006e2c <HAL_UART_Receive>
		HAL_UART_Transmit ( HUART_DBG , &rxd_byte , 1 , UART_TIMEOUT ) ; // Transmit all nmea to DBG
 80097fa:	23fa      	movs	r3, #250	; 0xfa
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	1939      	adds	r1, r7, r4
 8009800:	48ae      	ldr	r0, [pc, #696]	; (8009abc <my_lx6_get_coordinates+0x3c8>)
 8009802:	2201      	movs	r2, #1
 8009804:	f7fd fa76 	bl	8006cf4 <HAL_UART_Transmit>
		if ( rxd_byte )
 8009808:	0020      	movs	r0, r4
 800980a:	193b      	adds	r3, r7, r4
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	4ca0      	ldr	r4, [pc, #640]	; (8009a90 <my_lx6_get_coordinates+0x39c>)
 8009810:	193a      	adds	r2, r7, r4
 8009812:	1939      	adds	r1, r7, r4
 8009814:	7809      	ldrb	r1, [r1, #0]
 8009816:	7011      	strb	r1, [r2, #0]
 8009818:	4da4      	ldr	r5, [pc, #656]	; (8009aac <my_lx6_get_coordinates+0x3b8>)
 800981a:	197a      	adds	r2, r7, r5
 800981c:	1979      	adds	r1, r7, r5
 800981e:	7809      	ldrb	r1, [r1, #0]
 8009820:	7011      	strb	r1, [r2, #0]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d100      	bne.n	8009828 <my_lx6_get_coordinates+0x134>
 8009826:	e0cb      	b.n	80099c0 <my_lx6_get_coordinates+0x2cc>
		{
			if ( my_nmea_message ( &rxd_byte , nmea_message , &i_nmea ) == 2 )
 8009828:	235f      	movs	r3, #95	; 0x5f
 800982a:	18fa      	adds	r2, r7, r3
 800982c:	2696      	movs	r6, #150	; 0x96
 800982e:	00b6      	lsls	r6, r6, #2
 8009830:	19b9      	adds	r1, r7, r6
 8009832:	183b      	adds	r3, r7, r0
 8009834:	0018      	movs	r0, r3
 8009836:	f000 fa34 	bl	8009ca2 <my_nmea_message>
 800983a:	0001      	movs	r1, r0
 800983c:	193b      	adds	r3, r7, r4
 800983e:	193a      	adds	r2, r7, r4
 8009840:	7812      	ldrb	r2, [r2, #0]
 8009842:	701a      	strb	r2, [r3, #0]
 8009844:	197b      	adds	r3, r7, r5
 8009846:	197a      	adds	r2, r7, r5
 8009848:	7812      	ldrb	r2, [r2, #0]
 800984a:	701a      	strb	r2, [r3, #0]
 800984c:	2902      	cmp	r1, #2
 800984e:	d000      	beq.n	8009852 <my_lx6_get_coordinates+0x15e>
 8009850:	e0b6      	b.n	80099c0 <my_lx6_get_coordinates+0x2cc>
			{
				if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 8009852:	19bb      	adds	r3, r7, r6
 8009854:	0018      	movs	r0, r3
 8009856:	f000 fae4 	bl	8009e22 <is_my_nmea_checksum_ok>
 800985a:	0003      	movs	r3, r0
 800985c:	0019      	movs	r1, r3
 800985e:	193b      	adds	r3, r7, r4
 8009860:	193a      	adds	r2, r7, r4
 8009862:	7812      	ldrb	r2, [r2, #0]
 8009864:	701a      	strb	r2, [r3, #0]
 8009866:	197b      	adds	r3, r7, r5
 8009868:	197a      	adds	r2, r7, r5
 800986a:	7812      	ldrb	r2, [r2, #0]
 800986c:	701a      	strb	r2, [r3, #0]
 800986e:	2900      	cmp	r1, #0
 8009870:	d100      	bne.n	8009874 <my_lx6_get_coordinates+0x180>
 8009872:	e0a5      	b.n	80099c0 <my_lx6_get_coordinates+0x2cc>
				{
					if ( strstr ( (char*) nmea_message , nmea_rmc_label ) )
 8009874:	23d6      	movs	r3, #214	; 0xd6
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	18fb      	adds	r3, r7, r3
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	19bb      	adds	r3, r7, r6
 800987e:	0011      	movs	r1, r2
 8009880:	0018      	movs	r0, r3
 8009882:	f002 f914 	bl	800baae <strstr>
 8009886:	1e03      	subs	r3, r0, #0
 8009888:	d00d      	beq.n	80098a6 <my_lx6_get_coordinates+0x1b2>
					{
						memcpy ( rmc_message , nmea_message , NMEA_MESSAGE_SIZE ) ; // Zapisuję, żeby skorzystać z czasu jak najdokładniejszego, bo przed fix ten czas jest fake.
 800988a:	4b7f      	ldr	r3, [pc, #508]	; (8009a88 <my_lx6_get_coordinates+0x394>)
 800988c:	21da      	movs	r1, #218	; 0xda
 800988e:	0089      	lsls	r1, r1, #2
 8009890:	185b      	adds	r3, r3, r1
 8009892:	19da      	adds	r2, r3, r7
 8009894:	4b7a      	ldr	r3, [pc, #488]	; (8009a80 <my_lx6_get_coordinates+0x38c>)
 8009896:	185b      	adds	r3, r3, r1
 8009898:	19db      	adds	r3, r3, r7
 800989a:	0010      	movs	r0, r2
 800989c:	0019      	movs	r1, r3
 800989e:	23fa      	movs	r3, #250	; 0xfa
 80098a0:	001a      	movs	r2, r3
 80098a2:	f002 f9bc 	bl	800bc1e <memcpy>
					}
					if ( strstr ( (char*) nmea_message , nmea_gsv_label ) && gsv_tns < MY_GNSS_MIN_TNS )
 80098a6:	23d5      	movs	r3, #213	; 0xd5
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	18fb      	adds	r3, r7, r3
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	2496      	movs	r4, #150	; 0x96
 80098b0:	00a4      	lsls	r4, r4, #2
 80098b2:	193b      	adds	r3, r7, r4
 80098b4:	0011      	movs	r1, r2
 80098b6:	0018      	movs	r0, r3
 80098b8:	f002 f8f9 	bl	800baae <strstr>
 80098bc:	1e03      	subs	r3, r0, #0
 80098be:	d011      	beq.n	80098e4 <my_lx6_get_coordinates+0x1f0>
 80098c0:	4d73      	ldr	r5, [pc, #460]	; (8009a90 <my_lx6_get_coordinates+0x39c>)
 80098c2:	197b      	adds	r3, r7, r5
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	2b02      	cmp	r3, #2
 80098c8:	d80c      	bhi.n	80098e4 <my_lx6_get_coordinates+0x1f0>
					{
						if ( tim_seconds > MY_GNSS_MIN_TNS_TIME_THS )
 80098ca:	4b79      	ldr	r3, [pc, #484]	; (8009ab0 <my_lx6_get_coordinates+0x3bc>)
 80098cc:	881b      	ldrh	r3, [r3, #0]
 80098ce:	2b0a      	cmp	r3, #10
 80098d0:	d900      	bls.n	80098d4 <my_lx6_get_coordinates+0x1e0>
 80098d2:	e081      	b.n	80099d8 <my_lx6_get_coordinates+0x2e4>
						{
							break ;
						}
						gsv_tns = my_nmea_get_gsv_tns ( (char*) nmea_message ) ;
 80098d4:	193b      	adds	r3, r7, r4
 80098d6:	0018      	movs	r0, r3
 80098d8:	f000 fc60 	bl	800a19c <my_nmea_get_gsv_tns>
 80098dc:	0003      	movs	r3, r0
 80098de:	001a      	movs	r2, r3
 80098e0:	197b      	adds	r3, r7, r5
 80098e2:	701a      	strb	r2, [r3, #0]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngsa_label ) )
 80098e4:	23d8      	movs	r3, #216	; 0xd8
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	18fb      	adds	r3, r7, r3
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	2596      	movs	r5, #150	; 0x96
 80098ee:	00ad      	lsls	r5, r5, #2
 80098f0:	197b      	adds	r3, r7, r5
 80098f2:	0011      	movs	r1, r2
 80098f4:	0018      	movs	r0, r3
 80098f6:	f002 f8da 	bl	800baae <strstr>
 80098fa:	1e03      	subs	r3, r0, #0
 80098fc:	d015      	beq.n	800992a <my_lx6_get_coordinates+0x236>
					{
						nmea_fixed_mode_s = get_my_nmea_gngsa_fixed_mode_s ( (char*) nmea_message ) ;
 80098fe:	4b6b      	ldr	r3, [pc, #428]	; (8009aac <my_lx6_get_coordinates+0x3b8>)
 8009900:	18fc      	adds	r4, r7, r3
 8009902:	197b      	adds	r3, r7, r5
 8009904:	0018      	movs	r0, r3
 8009906:	f000 fa38 	bl	8009d7a <get_my_nmea_gngsa_fixed_mode_s>
 800990a:	0003      	movs	r3, r0
 800990c:	7023      	strb	r3, [r4, #0]
						*nmea_fixed_pdop_d = get_my_nmea_gngsa_pdop_d ( (char*) nmea_message ) ;
 800990e:	197b      	adds	r3, r7, r5
 8009910:	0018      	movs	r0, r3
 8009912:	f000 fa3d 	bl	8009d90 <get_my_nmea_gngsa_pdop_d>
 8009916:	0002      	movs	r2, r0
 8009918:	000b      	movs	r3, r1
 800991a:	21de      	movs	r1, #222	; 0xde
 800991c:	0089      	lsls	r1, r1, #2
 800991e:	2008      	movs	r0, #8
 8009920:	1809      	adds	r1, r1, r0
 8009922:	19c9      	adds	r1, r1, r7
 8009924:	6809      	ldr	r1, [r1, #0]
 8009926:	600a      	str	r2, [r1, #0]
 8009928:	604b      	str	r3, [r1, #4]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngll_label ) /*&& nmea_fixed_pdop_d <= nmea_pdop_ths */)
 800992a:	23d7      	movs	r3, #215	; 0xd7
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	18fb      	adds	r3, r7, r3
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	2596      	movs	r5, #150	; 0x96
 8009934:	00ad      	lsls	r5, r5, #2
 8009936:	197b      	adds	r3, r7, r5
 8009938:	0011      	movs	r1, r2
 800993a:	0018      	movs	r0, r3
 800993c:	f002 f8b7 	bl	800baae <strstr>
 8009940:	1e03      	subs	r3, r0, #0
 8009942:	d03d      	beq.n	80099c0 <my_lx6_get_coordinates+0x2cc>
					{
						if ( *nmea_fixed_pdop_d <= nmea_pdop_ths && nmea_fixed_mode_s == NMEA_3D_FIX )
 8009944:	23de      	movs	r3, #222	; 0xde
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	2408      	movs	r4, #8
 800994a:	191b      	adds	r3, r3, r4
 800994c:	19db      	adds	r3, r3, r7
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	681a      	ldr	r2, [r3, #0]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	6838      	ldr	r0, [r7, #0]
 8009956:	6879      	ldr	r1, [r7, #4]
 8009958:	f7f6 fd9a 	bl	8000490 <__aeabi_dcmpge>
 800995c:	1e03      	subs	r3, r0, #0
 800995e:	d021      	beq.n	80099a4 <my_lx6_get_coordinates+0x2b0>
 8009960:	4b52      	ldr	r3, [pc, #328]	; (8009aac <my_lx6_get_coordinates+0x3b8>)
 8009962:	18fb      	adds	r3, r7, r3
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	2b33      	cmp	r3, #51	; 0x33
 8009968:	d11c      	bne.n	80099a4 <my_lx6_get_coordinates+0x2b0>
						{
							get_my_nmea_gngll_coordinates ( (char*) nmea_message , nmea_latitude_s , nmea_longitude_s , astro_geo_wr_latitude , astro_geo_wr_longitude ) ; // Nie musze nic kombinować z przenoszeniem tej operacji, bo po niej nie będzie już dalej odbierania wiadomości tylko wyjście
 800996a:	23df      	movs	r3, #223	; 0xdf
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	0026      	movs	r6, r4
 8009970:	191b      	adds	r3, r3, r4
 8009972:	19db      	adds	r3, r3, r7
 8009974:	681c      	ldr	r4, [r3, #0]
 8009976:	2344      	movs	r3, #68	; 0x44
 8009978:	18fa      	adds	r2, r7, r3
 800997a:	2350      	movs	r3, #80	; 0x50
 800997c:	18f9      	adds	r1, r7, r3
 800997e:	1978      	adds	r0, r7, r5
 8009980:	23e0      	movs	r3, #224	; 0xe0
 8009982:	009b      	lsls	r3, r3, #2
 8009984:	199b      	adds	r3, r3, r6
 8009986:	19db      	adds	r3, r3, r7
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	9300      	str	r3, [sp, #0]
 800998c:	0023      	movs	r3, r4
 800998e:	f000 fb03 	bl	8009f98 <get_my_nmea_gngll_coordinates>
							set_my_rtc_from_nmea_rmc ( (char*) nmea_message ) ; // Jeśli masz fix to na pewno czas jest dobry
 8009992:	197b      	adds	r3, r7, r5
 8009994:	0018      	movs	r0, r3
 8009996:	f000 f895 	bl	8009ac4 <set_my_rtc_from_nmea_rmc>
							r = true ;
 800999a:	4b37      	ldr	r3, [pc, #220]	; (8009a78 <my_lx6_get_coordinates+0x384>)
 800999c:	18fb      	adds	r3, r7, r3
 800999e:	2201      	movs	r2, #1
 80099a0:	701a      	strb	r2, [r3, #0]
							break ;
 80099a2:	e01a      	b.n	80099da <my_lx6_get_coordinates+0x2e6>
						}
						else
						{
							memcpy ( gngll_message , nmea_message , NMEA_MESSAGE_SIZE ) ; // Zapisuję, żeby potem, jak nie osiągnę jakości nmea_pdop_ths to wykorzystać coordinates do payload
 80099a4:	4b37      	ldr	r3, [pc, #220]	; (8009a84 <my_lx6_get_coordinates+0x390>)
 80099a6:	21da      	movs	r1, #218	; 0xda
 80099a8:	0089      	lsls	r1, r1, #2
 80099aa:	185b      	adds	r3, r3, r1
 80099ac:	19da      	adds	r2, r3, r7
 80099ae:	4b34      	ldr	r3, [pc, #208]	; (8009a80 <my_lx6_get_coordinates+0x38c>)
 80099b0:	185b      	adds	r3, r3, r1
 80099b2:	19db      	adds	r3, r3, r7
 80099b4:	0010      	movs	r0, r2
 80099b6:	0019      	movs	r1, r3
 80099b8:	23fa      	movs	r3, #250	; 0xfa
 80099ba:	001a      	movs	r2, r3
 80099bc:	f002 f92f 	bl	800bc1e <memcpy>
	while ( tim_seconds < active_time_ths  ) // 1200 = 10 min.
 80099c0:	4b3b      	ldr	r3, [pc, #236]	; (8009ab0 <my_lx6_get_coordinates+0x3bc>)
 80099c2:	881b      	ldrh	r3, [r3, #0]
 80099c4:	4a2b      	ldr	r2, [pc, #172]	; (8009a74 <my_lx6_get_coordinates+0x380>)
 80099c6:	21da      	movs	r1, #218	; 0xda
 80099c8:	0089      	lsls	r1, r1, #2
 80099ca:	1852      	adds	r2, r2, r1
 80099cc:	19d2      	adds	r2, r2, r7
 80099ce:	8812      	ldrh	r2, [r2, #0]
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d900      	bls.n	80099d6 <my_lx6_get_coordinates+0x2e2>
 80099d4:	e709      	b.n	80097ea <my_lx6_get_coordinates+0xf6>
 80099d6:	e000      	b.n	80099da <my_lx6_get_coordinates+0x2e6>
							break ;
 80099d8:	46c0      	nop			; (mov r8, r8)
					}
				}
			}
		}
	}
	HAL_TIM_Base_Stop_IT ( &htim6 ) ;
 80099da:	4b36      	ldr	r3, [pc, #216]	; (8009ab4 <my_lx6_get_coordinates+0x3c0>)
 80099dc:	0018      	movs	r0, r3
 80099de:	f7fc fe6d 	bl	80066bc <HAL_TIM_Base_Stop_IT>
	my_lx6_off () ;
 80099e2:	f7f9 fae7 	bl	8002fb4 <my_lx6_off>
	if ( nmea_latitude_s[0] == 0 && gngll_message[0] != 0 ) // Jeśli nie masz współrzędnych pdop to wykorzystaja gorsze i zrób ich backup
 80099e6:	4b2b      	ldr	r3, [pc, #172]	; (8009a94 <my_lx6_get_coordinates+0x3a0>)
 80099e8:	22da      	movs	r2, #218	; 0xda
 80099ea:	0092      	lsls	r2, r2, #2
 80099ec:	189b      	adds	r3, r3, r2
 80099ee:	19db      	adds	r3, r3, r7
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d125      	bne.n	8009a42 <my_lx6_get_coordinates+0x34e>
 80099f6:	4b23      	ldr	r3, [pc, #140]	; (8009a84 <my_lx6_get_coordinates+0x390>)
 80099f8:	189b      	adds	r3, r3, r2
 80099fa:	19db      	adds	r3, r3, r7
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d01f      	beq.n	8009a42 <my_lx6_get_coordinates+0x34e>
	{
		get_my_nmea_gngll_coordinates ( (char*) gngll_message , nmea_latitude_s , nmea_longitude_s , astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 8009a02:	23df      	movs	r3, #223	; 0xdf
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	2508      	movs	r5, #8
 8009a08:	195b      	adds	r3, r3, r5
 8009a0a:	19db      	adds	r3, r3, r7
 8009a0c:	681c      	ldr	r4, [r3, #0]
 8009a0e:	2344      	movs	r3, #68	; 0x44
 8009a10:	18fa      	adds	r2, r7, r3
 8009a12:	2350      	movs	r3, #80	; 0x50
 8009a14:	18f9      	adds	r1, r7, r3
 8009a16:	23ae      	movs	r3, #174	; 0xae
 8009a18:	005b      	lsls	r3, r3, #1
 8009a1a:	18f8      	adds	r0, r7, r3
 8009a1c:	23e0      	movs	r3, #224	; 0xe0
 8009a1e:	009b      	lsls	r3, r3, #2
 8009a20:	195b      	adds	r3, r3, r5
 8009a22:	19db      	adds	r3, r3, r7
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	9300      	str	r3, [sp, #0]
 8009a28:	0023      	movs	r3, r4
 8009a2a:	f000 fab5 	bl	8009f98 <get_my_nmea_gngll_coordinates>
		set_my_rtc_from_nmea_rmc ( (char*) nmea_message ) ; // Jeśli masz fix to na pewno czas jest dobry
 8009a2e:	2396      	movs	r3, #150	; 0x96
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	18fb      	adds	r3, r7, r3
 8009a34:	0018      	movs	r0, r3
 8009a36:	f000 f845 	bl	8009ac4 <set_my_rtc_from_nmea_rmc>
		r = true ;
 8009a3a:	4b0f      	ldr	r3, [pc, #60]	; (8009a78 <my_lx6_get_coordinates+0x384>)
 8009a3c:	18fb      	adds	r3, r7, r3
 8009a3e:	2201      	movs	r2, #1
 8009a40:	701a      	strb	r2, [r3, #0]
	}
	sprintf ( nmea_coordinates_log , "NMEA coordinates: %s,%s" , nmea_latitude_s , nmea_longitude_s ) ;
 8009a42:	2344      	movs	r3, #68	; 0x44
 8009a44:	18fb      	adds	r3, r7, r3
 8009a46:	2250      	movs	r2, #80	; 0x50
 8009a48:	18ba      	adds	r2, r7, r2
 8009a4a:	491d      	ldr	r1, [pc, #116]	; (8009ac0 <my_lx6_get_coordinates+0x3cc>)
 8009a4c:	2410      	movs	r4, #16
 8009a4e:	1938      	adds	r0, r7, r4
 8009a50:	f001 ff6a 	bl	800b928 <sprintf>
	send_debug_logs ( nmea_coordinates_log ) ;
 8009a54:	193b      	adds	r3, r7, r4
 8009a56:	0018      	movs	r0, r3
 8009a58:	f7f9 f998 	bl	8002d8c <send_debug_logs>
	return r ;
 8009a5c:	4b06      	ldr	r3, [pc, #24]	; (8009a78 <my_lx6_get_coordinates+0x384>)
 8009a5e:	18fb      	adds	r3, r7, r3
 8009a60:	781b      	ldrb	r3, [r3, #0]
}
 8009a62:	0018      	movs	r0, r3
 8009a64:	46bd      	mov	sp, r7
 8009a66:	23db      	movs	r3, #219	; 0xdb
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	449d      	add	sp, r3
 8009a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a6e:	46c0      	nop			; (mov r8, r8)
 8009a70:	fffffc8c 	.word	0xfffffc8c
 8009a74:	fffffca6 	.word	0xfffffca6
 8009a78:	00000367 	.word	0x00000367
 8009a7c:	00000353 	.word	0x00000353
 8009a80:	fffffef0 	.word	0xfffffef0
 8009a84:	fffffdf4 	.word	0xfffffdf4
 8009a88:	fffffcf8 	.word	0xfffffcf8
 8009a8c:	fffffcf7 	.word	0xfffffcf7
 8009a90:	00000366 	.word	0x00000366
 8009a94:	fffffce8 	.word	0xfffffce8
 8009a98:	fffffcdc 	.word	0xfffffcdc
 8009a9c:	08013dfc 	.word	0x08013dfc
 8009aa0:	08013e04 	.word	0x08013e04
 8009aa4:	08013e0c 	.word	0x08013e0c
 8009aa8:	08013e10 	.word	0x08013e10
 8009aac:	00000365 	.word	0x00000365
 8009ab0:	200009b6 	.word	0x200009b6
 8009ab4:	2000078c 	.word	0x2000078c
 8009ab8:	20000900 	.word	0x20000900
 8009abc:	2000086c 	.word	0x2000086c
 8009ac0:	08013e14 	.word	0x08013e14

08009ac4 <set_my_rtc_from_nmea_rmc>:
*/

extern RTC_HandleTypeDef hrtc ;

void set_my_rtc_from_nmea_rmc ( const char* m )
{
 8009ac4:	b5b0      	push	{r4, r5, r7, lr}
 8009ac6:	b088      	sub	sp, #32
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
	  RTC_TimeTypeDef sTime;
	  RTC_DateTypeDef sDate;

	  get_my_nmea_rmc_date_yy ( m , &sDate.Year ) ;
 8009acc:	2508      	movs	r5, #8
 8009ace:	197b      	adds	r3, r7, r5
 8009ad0:	1cda      	adds	r2, r3, #3
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	0011      	movs	r1, r2
 8009ad6:	0018      	movs	r0, r3
 8009ad8:	f000 fb98 	bl	800a20c <get_my_nmea_rmc_date_yy>
	  get_my_nmea_rmc_date_mm ( m , &sDate.Month ) ;
 8009adc:	197b      	adds	r3, r7, r5
 8009ade:	1c5a      	adds	r2, r3, #1
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	0011      	movs	r1, r2
 8009ae4:	0018      	movs	r0, r3
 8009ae6:	f000 fbcb 	bl	800a280 <get_my_nmea_rmc_date_mm>
	  get_my_nmea_rmc_date_dd ( m , &sDate.Date ) ;
 8009aea:	197b      	adds	r3, r7, r5
 8009aec:	1c9a      	adds	r2, r3, #2
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	0011      	movs	r1, r2
 8009af2:	0018      	movs	r0, r3
 8009af4:	f000 fbfe 	bl	800a2f4 <get_my_nmea_rmc_date_dd>
	  get_my_nmea_rmc_utc_hh ( m , &sTime.Hours ) ;
 8009af8:	240c      	movs	r4, #12
 8009afa:	193a      	adds	r2, r7, r4
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	0011      	movs	r1, r2
 8009b00:	0018      	movs	r0, r3
 8009b02:	f000 fc31 	bl	800a368 <get_my_nmea_rmc_utc_hh>
	  get_my_nmea_rmc_utc_mm ( m , &sTime.Minutes ) ;
 8009b06:	193b      	adds	r3, r7, r4
 8009b08:	1c5a      	adds	r2, r3, #1
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	0011      	movs	r1, r2
 8009b0e:	0018      	movs	r0, r3
 8009b10:	f000 fc64 	bl	800a3dc <get_my_nmea_rmc_utc_mm>
	  get_my_nmea_rmc_utc_ss ( m , &sTime.Seconds ) ;
 8009b14:	193b      	adds	r3, r7, r4
 8009b16:	1c9a      	adds	r2, r3, #2
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	0011      	movs	r1, r2
 8009b1c:	0018      	movs	r0, r3
 8009b1e:	f000 fc97 	bl	800a450 <get_my_nmea_rmc_utc_ss>
	  get_my_nmea_rmc_utc_sss ( m , &sTime.SubSeconds ) ;
 8009b22:	193b      	adds	r3, r7, r4
 8009b24:	1d1a      	adds	r2, r3, #4
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	0011      	movs	r1, r2
 8009b2a:	0018      	movs	r0, r3
 8009b2c:	f000 fcca 	bl	800a4c4 <get_my_nmea_rmc_utc_sss>
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009b30:	193b      	adds	r3, r7, r4
 8009b32:	2200      	movs	r2, #0
 8009b34:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009b36:	193b      	adds	r3, r7, r4
 8009b38:	2200      	movs	r2, #0
 8009b3a:	611a      	str	r2, [r3, #16]

	  HAL_RTCEx_EnableBypassShadow ( &hrtc ) ;
 8009b3c:	4b0b      	ldr	r3, [pc, #44]	; (8009b6c <set_my_rtc_from_nmea_rmc+0xa8>)
 8009b3e:	0018      	movs	r0, r3
 8009b40:	f7fb fd9d 	bl	800567e <HAL_RTCEx_EnableBypassShadow>
	  HAL_RTC_SetTime ( &hrtc , &sTime , RTC_FORMAT_BIN ) ;
 8009b44:	1939      	adds	r1, r7, r4
 8009b46:	4b09      	ldr	r3, [pc, #36]	; (8009b6c <set_my_rtc_from_nmea_rmc+0xa8>)
 8009b48:	2200      	movs	r2, #0
 8009b4a:	0018      	movs	r0, r3
 8009b4c:	f7fb f99a 	bl	8004e84 <HAL_RTC_SetTime>
	  HAL_RTC_SetDate ( &hrtc , &sDate , RTC_FORMAT_BIN ) ;
 8009b50:	1979      	adds	r1, r7, r5
 8009b52:	4b06      	ldr	r3, [pc, #24]	; (8009b6c <set_my_rtc_from_nmea_rmc+0xa8>)
 8009b54:	2200      	movs	r2, #0
 8009b56:	0018      	movs	r0, r3
 8009b58:	f7fb fa98 	bl	800508c <HAL_RTC_SetDate>
	  HAL_RTCEx_DisableBypassShadow ( &hrtc ) ;
 8009b5c:	4b03      	ldr	r3, [pc, #12]	; (8009b6c <set_my_rtc_from_nmea_rmc+0xa8>)
 8009b5e:	0018      	movs	r0, r3
 8009b60:	f7fb fdc1 	bl	80056e6 <HAL_RTCEx_DisableBypassShadow>
}
 8009b64:	46c0      	nop			; (mov r8, r8)
 8009b66:	46bd      	mov	sp, r7
 8009b68:	b008      	add	sp, #32
 8009b6a:	bdb0      	pop	{r4, r5, r7, pc}
 8009b6c:	200006fc 	.word	0x200006fc

08009b70 <get_my_rtc_time>:
uint16_t get_my_rtc_time ( char* dt_s )
{
 8009b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b72:	b08d      	sub	sp, #52	; 0x34
 8009b74:	af04      	add	r7, sp, #16
 8009b76:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 8009b78:	2508      	movs	r5, #8
 8009b7a:	1979      	adds	r1, r7, r5
 8009b7c:	4b1b      	ldr	r3, [pc, #108]	; (8009bec <get_my_rtc_time+0x7c>)
 8009b7e:	2200      	movs	r2, #0
 8009b80:	0018      	movs	r0, r3
 8009b82:	f7fb fa27 	bl	8004fd4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 8009b86:	241c      	movs	r4, #28
 8009b88:	1939      	adds	r1, r7, r4
 8009b8a:	4b18      	ldr	r3, [pc, #96]	; (8009bec <get_my_rtc_time+0x7c>)
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	0018      	movs	r0, r3
 8009b90:	f7fb fb0e 	bl	80051b0 <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds) ;
 8009b94:	0021      	movs	r1, r4
 8009b96:	187b      	adds	r3, r7, r1
 8009b98:	78db      	ldrb	r3, [r3, #3]
 8009b9a:	22fa      	movs	r2, #250	; 0xfa
 8009b9c:	00d2      	lsls	r2, r2, #3
 8009b9e:	189a      	adds	r2, r3, r2
 8009ba0:	187b      	adds	r3, r7, r1
 8009ba2:	785b      	ldrb	r3, [r3, #1]
 8009ba4:	469c      	mov	ip, r3
 8009ba6:	187b      	adds	r3, r7, r1
 8009ba8:	789b      	ldrb	r3, [r3, #2]
 8009baa:	001c      	movs	r4, r3
 8009bac:	0028      	movs	r0, r5
 8009bae:	183b      	adds	r3, r7, r0
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	001d      	movs	r5, r3
 8009bb4:	183b      	adds	r3, r7, r0
 8009bb6:	785b      	ldrb	r3, [r3, #1]
 8009bb8:	001e      	movs	r6, r3
 8009bba:	183b      	adds	r3, r7, r0
 8009bbc:	789b      	ldrb	r3, [r3, #2]
 8009bbe:	490c      	ldr	r1, [pc, #48]	; (8009bf0 <get_my_rtc_time+0x80>)
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	9303      	str	r3, [sp, #12]
 8009bc4:	9602      	str	r6, [sp, #8]
 8009bc6:	9501      	str	r5, [sp, #4]
 8009bc8:	9400      	str	r4, [sp, #0]
 8009bca:	4663      	mov	r3, ip
 8009bcc:	f001 feac 	bl	800b928 <sprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 8009bd0:	211c      	movs	r1, #28
 8009bd2:	187b      	adds	r3, r7, r1
 8009bd4:	78db      	ldrb	r3, [r3, #3]
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	22fa      	movs	r2, #250	; 0xfa
 8009bda:	00d2      	lsls	r2, r2, #3
 8009bdc:	4694      	mov	ip, r2
 8009bde:	4463      	add	r3, ip
 8009be0:	b29b      	uxth	r3, r3
}
 8009be2:	0018      	movs	r0, r3
 8009be4:	46bd      	mov	sp, r7
 8009be6:	b009      	add	sp, #36	; 0x24
 8009be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bea:	46c0      	nop			; (mov r8, r8)
 8009bec:	200006fc 	.word	0x200006fc
 8009bf0:	08013e2c 	.word	0x08013e2c

08009bf4 <my_string2double_conv>:
 */

#include "my_conversions.h"

double my_string2double_conv ( const char* s )
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
    double d = strtod ( s , NULL ) ;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2100      	movs	r1, #0
 8009c00:	0018      	movs	r0, r3
 8009c02:	f001 fcf5 	bl	800b5f0 <strtod>
 8009c06:	0002      	movs	r2, r0
 8009c08:	000b      	movs	r3, r1
 8009c0a:	60ba      	str	r2, [r7, #8]
 8009c0c:	60fb      	str	r3, [r7, #12]
    return d ;
 8009c0e:	68ba      	ldr	r2, [r7, #8]
 8009c10:	68fb      	ldr	r3, [r7, #12]
}
 8009c12:	0010      	movs	r0, r2
 8009c14:	0019      	movs	r1, r3
 8009c16:	46bd      	mov	sp, r7
 8009c18:	b004      	add	sp, #16
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	0008      	movs	r0, r1
 8009c26:	0011      	movs	r1, r2
 8009c28:	1cfb      	adds	r3, r7, #3
 8009c2a:	1c02      	adds	r2, r0, #0
 8009c2c:	701a      	strb	r2, [r3, #0]
 8009c2e:	1cbb      	adds	r3, r7, #2
 8009c30:	1c0a      	adds	r2, r1, #0
 8009c32:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 8009c34:	230f      	movs	r3, #15
 8009c36:	18fb      	adds	r3, r7, r3
 8009c38:	2200      	movs	r2, #0
 8009c3a:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 8009c3c:	230e      	movs	r3, #14
 8009c3e:	18fb      	adds	r3, r7, r3
 8009c40:	2200      	movs	r2, #0
 8009c42:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 8009c44:	e01c      	b.n	8009c80 <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 8009c46:	230f      	movs	r3, #15
 8009c48:	18fb      	adds	r3, r7, r3
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	18d3      	adds	r3, r2, r3
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	1cfa      	adds	r2, r7, #3
 8009c54:	7812      	ldrb	r2, [r2, #0]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d105      	bne.n	8009c66 <my_find_char_position+0x4a>
			p++ ;
 8009c5a:	210e      	movs	r1, #14
 8009c5c:	187b      	adds	r3, r7, r1
 8009c5e:	781a      	ldrb	r2, [r3, #0]
 8009c60:	187b      	adds	r3, r7, r1
 8009c62:	3201      	adds	r2, #1
 8009c64:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 8009c66:	230e      	movs	r3, #14
 8009c68:	18fa      	adds	r2, r7, r3
 8009c6a:	1cbb      	adds	r3, r7, #2
 8009c6c:	7812      	ldrb	r2, [r2, #0]
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d00e      	beq.n	8009c92 <my_find_char_position+0x76>
			break ;
		i++ ;
 8009c74:	210f      	movs	r1, #15
 8009c76:	187b      	adds	r3, r7, r1
 8009c78:	781a      	ldrb	r2, [r3, #0]
 8009c7a:	187b      	adds	r3, r7, r1
 8009c7c:	3201      	adds	r2, #1
 8009c7e:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 8009c80:	230f      	movs	r3, #15
 8009c82:	18fb      	adds	r3, r7, r3
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	18d3      	adds	r3, r2, r3
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d1da      	bne.n	8009c46 <my_find_char_position+0x2a>
 8009c90:	e000      	b.n	8009c94 <my_find_char_position+0x78>
			break ;
 8009c92:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 8009c94:	230f      	movs	r3, #15
 8009c96:	18fb      	adds	r3, r7, r3
 8009c98:	781b      	ldrb	r3, [r3, #0]
}
 8009c9a:	0018      	movs	r0, r3
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	b004      	add	sp, #16
 8009ca0:	bd80      	pop	{r7, pc}

08009ca2 <my_nmea_message>:
#include <inttypes.h>
#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 8009ca2:	b580      	push	{r7, lr}
 8009ca4:	b084      	sub	sp, #16
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	60f8      	str	r0, [r7, #12]
 8009caa:	60b9      	str	r1, [r7, #8]
 8009cac:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	2b24      	cmp	r3, #36	; 0x24
 8009cb4:	d117      	bne.n	8009ce6 <my_nmea_message+0x44>
    {
        *i = 0 ;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	1c5a      	adds	r2, r3, #1
 8009cc2:	b2d1      	uxtb	r1, r2
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	7011      	strb	r1, [r2, #0]
 8009cc8:	001a      	movs	r2, r3
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	189b      	adds	r3, r3, r2
 8009cce:	68fa      	ldr	r2, [r7, #12]
 8009cd0:	7812      	ldrb	r2, [r2, #0]
 8009cd2:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	001a      	movs	r2, r3
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	189b      	adds	r3, r3, r2
 8009cde:	2200      	movs	r2, #0
 8009ce0:	701a      	strb	r2, [r3, #0]
        return 0 ;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	e045      	b.n	8009d72 <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	2b1f      	cmp	r3, #31
 8009cec:	d907      	bls.n	8009cfe <my_nmea_message+0x5c>
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	2b7e      	cmp	r3, #126	; 0x7e
 8009cf4:	d803      	bhi.n	8009cfe <my_nmea_message+0x5c>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d103      	bne.n	8009d06 <my_nmea_message+0x64>
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	2b0d      	cmp	r3, #13
 8009d04:	d114      	bne.n	8009d30 <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	781b      	ldrb	r3, [r3, #0]
 8009d0a:	1c5a      	adds	r2, r3, #1
 8009d0c:	b2d1      	uxtb	r1, r2
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	7011      	strb	r1, [r2, #0]
 8009d12:	001a      	movs	r2, r3
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	189b      	adds	r3, r3, r2
 8009d18:	68fa      	ldr	r2, [r7, #12]
 8009d1a:	7812      	ldrb	r2, [r2, #0]
 8009d1c:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	001a      	movs	r2, r3
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	189b      	adds	r3, r3, r2
 8009d28:	2200      	movs	r2, #0
 8009d2a:	701a      	strb	r2, [r3, #0]
        return 1 ;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	e020      	b.n	8009d72 <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	2b0a      	cmp	r3, #10
 8009d36:	d11a      	bne.n	8009d6e <my_nmea_message+0xcc>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d916      	bls.n	8009d6e <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	3b01      	subs	r3, #1
 8009d46:	b2da      	uxtb	r2, r3
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	701a      	strb	r2, [r3, #0]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	001a      	movs	r2, r3
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	189b      	adds	r3, r3, r2
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	2b0d      	cmp	r3, #13
 8009d5a:	d108      	bne.n	8009d6e <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	001a      	movs	r2, r3
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	189b      	adds	r3, r3, r2
 8009d66:	2200      	movs	r2, #0
 8009d68:	701a      	strb	r2, [r3, #0]
            return 2 ;
 8009d6a:	2302      	movs	r3, #2
 8009d6c:	e001      	b.n	8009d72 <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 8009d6e:	2301      	movs	r3, #1
 8009d70:	425b      	negs	r3, r3
}
 8009d72:	0018      	movs	r0, r3
 8009d74:	46bd      	mov	sp, r7
 8009d76:	b004      	add	sp, #16
 8009d78:	bd80      	pop	{r7, pc}

08009d7a <get_my_nmea_gngsa_fixed_mode_s>:

const char get_my_nmea_gngsa_fixed_mode_s ( const char* m )
{
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b082      	sub	sp, #8
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
	return m[9] ;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	3309      	adds	r3, #9
 8009d86:	781b      	ldrb	r3, [r3, #0]
}
 8009d88:	0018      	movs	r0, r3
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	b002      	add	sp, #8
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <get_my_nmea_gngsa_pdop_d>:

double get_my_nmea_gngsa_pdop_d ( const char* m )
{
 8009d90:	b5b0      	push	{r4, r5, r7, lr}
 8009d92:	b086      	sub	sp, #24
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
	uint8_t pdop_position = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION ) + 1 ;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	220f      	movs	r2, #15
 8009d9c:	212c      	movs	r1, #44	; 0x2c
 8009d9e:	0018      	movs	r0, r3
 8009da0:	f7ff ff3c 	bl	8009c1c <my_find_char_position>
 8009da4:	0003      	movs	r3, r0
 8009da6:	001a      	movs	r2, r3
 8009da8:	2517      	movs	r5, #23
 8009daa:	197b      	adds	r3, r7, r5
 8009dac:	3201      	adds	r2, #1
 8009dae:	701a      	strb	r2, [r3, #0]
	uint8_t pdop_length = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION + 1 ) - pdop_position ;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2210      	movs	r2, #16
 8009db4:	212c      	movs	r1, #44	; 0x2c
 8009db6:	0018      	movs	r0, r3
 8009db8:	f7ff ff30 	bl	8009c1c <my_find_char_position>
 8009dbc:	0003      	movs	r3, r0
 8009dbe:	0019      	movs	r1, r3
 8009dc0:	2416      	movs	r4, #22
 8009dc2:	193b      	adds	r3, r7, r4
 8009dc4:	197a      	adds	r2, r7, r5
 8009dc6:	7812      	ldrb	r2, [r2, #0]
 8009dc8:	1a8a      	subs	r2, r1, r2
 8009dca:	701a      	strb	r2, [r3, #0]

	char* pdop_s = (char*) malloc ( ( pdop_length +1 ) * sizeof ( char ) ) ;
 8009dcc:	193b      	adds	r3, r7, r4
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	0018      	movs	r0, r3
 8009dd4:	f000 fbaa 	bl	800a52c <malloc>
 8009dd8:	0003      	movs	r3, r0
 8009dda:	613b      	str	r3, [r7, #16]
	strncpy ( pdop_s , m + pdop_position , pdop_length ) ; // Kopiowanie fragmentu łańcucha
 8009ddc:	197b      	adds	r3, r7, r5
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	18d1      	adds	r1, r2, r3
 8009de4:	193b      	adds	r3, r7, r4
 8009de6:	781a      	ldrb	r2, [r3, #0]
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	0018      	movs	r0, r3
 8009dec:	f001 fe4b 	bl	800ba86 <strncpy>
	pdop_s[pdop_length] = '\0';
 8009df0:	193b      	adds	r3, r7, r4
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	693a      	ldr	r2, [r7, #16]
 8009df6:	18d3      	adds	r3, r2, r3
 8009df8:	2200      	movs	r2, #0
 8009dfa:	701a      	strb	r2, [r3, #0]
	double pdop = my_string2double_conv ( pdop_s ) ;
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	0018      	movs	r0, r3
 8009e00:	f7ff fef8 	bl	8009bf4 <my_string2double_conv>
 8009e04:	0002      	movs	r2, r0
 8009e06:	000b      	movs	r3, r1
 8009e08:	60ba      	str	r2, [r7, #8]
 8009e0a:	60fb      	str	r3, [r7, #12]
	free ( pdop_s ) ;
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	0018      	movs	r0, r3
 8009e10:	f000 fb96 	bl	800a540 <free>
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
 8009e14:	68ba      	ldr	r2, [r7, #8]
 8009e16:	68fb      	ldr	r3, [r7, #12]
}
 8009e18:	0010      	movs	r0, r2
 8009e1a:	0019      	movs	r1, r3
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	b006      	add	sp, #24
 8009e20:	bdb0      	pop	{r4, r5, r7, pc}

08009e22 <is_my_nmea_checksum_ok>:


bool is_my_nmea_checksum_ok ( const char* s )
{
 8009e22:	b590      	push	{r4, r7, lr}
 8009e24:	b085      	sub	sp, #20
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 8009e2a:	230f      	movs	r3, #15
 8009e2c:	18fb      	adds	r3, r7, r3
 8009e2e:	2200      	movs	r2, #0
 8009e30:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 8009e32:	230e      	movs	r3, #14
 8009e34:	18fb      	adds	r3, r7, r3
 8009e36:	2201      	movs	r2, #1
 8009e38:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8009e3a:	e00f      	b.n	8009e5c <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 8009e3c:	220e      	movs	r2, #14
 8009e3e:	18bb      	adds	r3, r7, r2
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	18ba      	adds	r2, r7, r2
 8009e44:	1c59      	adds	r1, r3, #1
 8009e46:	7011      	strb	r1, [r2, #0]
 8009e48:	001a      	movs	r2, r3
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	189b      	adds	r3, r3, r2
 8009e4e:	7819      	ldrb	r1, [r3, #0]
 8009e50:	220f      	movs	r2, #15
 8009e52:	18bb      	adds	r3, r7, r2
 8009e54:	18ba      	adds	r2, r7, r2
 8009e56:	7812      	ldrb	r2, [r2, #0]
 8009e58:	404a      	eors	r2, r1
 8009e5a:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 8009e5c:	210e      	movs	r1, #14
 8009e5e:	187b      	adds	r3, r7, r1
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	18d3      	adds	r3, r2, r3
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	2b2a      	cmp	r3, #42	; 0x2a
 8009e6a:	d00a      	beq.n	8009e82 <is_my_nmea_checksum_ok+0x60>
 8009e6c:	187b      	adds	r3, r7, r1
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	18d3      	adds	r3, r2, r3
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d003      	beq.n	8009e82 <is_my_nmea_checksum_ok+0x60>
 8009e7a:	187b      	adds	r3, r7, r1
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d1dc      	bne.n	8009e3c <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 8009e82:	230f      	movs	r3, #15
 8009e84:	18fb      	adds	r3, r7, r3
 8009e86:	781c      	ldrb	r4, [r3, #0]
 8009e88:	210e      	movs	r1, #14
 8009e8a:	187b      	adds	r3, r7, r1
 8009e8c:	187a      	adds	r2, r7, r1
 8009e8e:	7812      	ldrb	r2, [r2, #0]
 8009e90:	3201      	adds	r2, #1
 8009e92:	701a      	strb	r2, [r3, #0]
 8009e94:	187b      	adds	r3, r7, r1
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	18d3      	adds	r3, r2, r3
 8009e9c:	2210      	movs	r2, #16
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	0018      	movs	r0, r3
 8009ea2:	f001 fc3d 	bl	800b720 <strtol>
 8009ea6:	0003      	movs	r3, r0
 8009ea8:	1ae3      	subs	r3, r4, r3
 8009eaa:	425a      	negs	r2, r3
 8009eac:	4153      	adcs	r3, r2
 8009eae:	b2db      	uxtb	r3, r3
}
 8009eb0:	0018      	movs	r0, r3
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	b005      	add	sp, #20
 8009eb6:	bd90      	pop	{r4, r7, pc}

08009eb8 <nmea2decimal>:
double nmea2decimal ( const char *coord , char dir )
{
 8009eb8:	b5b0      	push	{r4, r5, r7, lr}
 8009eba:	b086      	sub	sp, #24
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	000a      	movs	r2, r1
 8009ec2:	1cfb      	adds	r3, r7, #3
 8009ec4:	701a      	strb	r2, [r3, #0]
    double deg , min ;
    sscanf ( coord , "%lf" , &deg ) ;
 8009ec6:	2308      	movs	r3, #8
 8009ec8:	18fa      	adds	r2, r7, r3
 8009eca:	492f      	ldr	r1, [pc, #188]	; (8009f88 <nmea2decimal+0xd0>)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	0018      	movs	r0, r3
 8009ed0:	f001 fd4a 	bl	800b968 <sscanf>
    min = deg / 100 ;
 8009ed4:	68b8      	ldr	r0, [r7, #8]
 8009ed6:	68f9      	ldr	r1, [r7, #12]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	4b2c      	ldr	r3, [pc, #176]	; (8009f8c <nmea2decimal+0xd4>)
 8009edc:	f7f6 ffcc 	bl	8000e78 <__aeabi_ddiv>
 8009ee0:	0002      	movs	r2, r0
 8009ee2:	000b      	movs	r3, r1
 8009ee4:	613a      	str	r2, [r7, #16]
 8009ee6:	617b      	str	r3, [r7, #20]
    deg = (int) min ;
 8009ee8:	6938      	ldr	r0, [r7, #16]
 8009eea:	6979      	ldr	r1, [r7, #20]
 8009eec:	f7f8 fa20 	bl	8002330 <__aeabi_d2iz>
 8009ef0:	0003      	movs	r3, r0
 8009ef2:	0018      	movs	r0, r3
 8009ef4:	f7f8 fa52 	bl	800239c <__aeabi_i2d>
 8009ef8:	0002      	movs	r2, r0
 8009efa:	000b      	movs	r3, r1
 8009efc:	60ba      	str	r2, [r7, #8]
 8009efe:	60fb      	str	r3, [r7, #12]
    min = ( min - deg ) * 10 ;
 8009f00:	68ba      	ldr	r2, [r7, #8]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	6938      	ldr	r0, [r7, #16]
 8009f06:	6979      	ldr	r1, [r7, #20]
 8009f08:	f7f7 fe72 	bl	8001bf0 <__aeabi_dsub>
 8009f0c:	0002      	movs	r2, r0
 8009f0e:	000b      	movs	r3, r1
 8009f10:	0010      	movs	r0, r2
 8009f12:	0019      	movs	r1, r3
 8009f14:	2200      	movs	r2, #0
 8009f16:	4b1e      	ldr	r3, [pc, #120]	; (8009f90 <nmea2decimal+0xd8>)
 8009f18:	f7f7 fba8 	bl	800166c <__aeabi_dmul>
 8009f1c:	0002      	movs	r2, r0
 8009f1e:	000b      	movs	r3, r1
 8009f20:	613a      	str	r2, [r7, #16]
 8009f22:	617b      	str	r3, [r7, #20]
    min = min / 6 ;
 8009f24:	2200      	movs	r2, #0
 8009f26:	4b1b      	ldr	r3, [pc, #108]	; (8009f94 <nmea2decimal+0xdc>)
 8009f28:	6938      	ldr	r0, [r7, #16]
 8009f2a:	6979      	ldr	r1, [r7, #20]
 8009f2c:	f7f6 ffa4 	bl	8000e78 <__aeabi_ddiv>
 8009f30:	0002      	movs	r2, r0
 8009f32:	000b      	movs	r3, r1
 8009f34:	613a      	str	r2, [r7, #16]
 8009f36:	617b      	str	r3, [r7, #20]
    //double c = deg + min ;
    if ( dir == 'S' || dir == 'W' )
 8009f38:	1cfb      	adds	r3, r7, #3
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	2b53      	cmp	r3, #83	; 0x53
 8009f3e:	d003      	beq.n	8009f48 <nmea2decimal+0x90>
 8009f40:	1cfb      	adds	r3, r7, #3
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	2b57      	cmp	r3, #87	; 0x57
 8009f46:	d10e      	bne.n	8009f66 <nmea2decimal+0xae>
    	return ( deg + min ) * -1 ;
 8009f48:	68b8      	ldr	r0, [r7, #8]
 8009f4a:	68f9      	ldr	r1, [r7, #12]
 8009f4c:	693a      	ldr	r2, [r7, #16]
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	f7f6 fc32 	bl	80007b8 <__aeabi_dadd>
 8009f54:	0002      	movs	r2, r0
 8009f56:	000b      	movs	r3, r1
 8009f58:	0011      	movs	r1, r2
 8009f5a:	000c      	movs	r4, r1
 8009f5c:	2180      	movs	r1, #128	; 0x80
 8009f5e:	0609      	lsls	r1, r1, #24
 8009f60:	4059      	eors	r1, r3
 8009f62:	000d      	movs	r5, r1
 8009f64:	e009      	b.n	8009f7a <nmea2decimal+0xc2>
    else
    	return deg + min ;
 8009f66:	68b8      	ldr	r0, [r7, #8]
 8009f68:	68f9      	ldr	r1, [r7, #12]
 8009f6a:	693a      	ldr	r2, [r7, #16]
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	f7f6 fc23 	bl	80007b8 <__aeabi_dadd>
 8009f72:	0002      	movs	r2, r0
 8009f74:	000b      	movs	r3, r1
 8009f76:	0014      	movs	r4, r2
 8009f78:	001d      	movs	r5, r3
}
 8009f7a:	0022      	movs	r2, r4
 8009f7c:	002b      	movs	r3, r5
 8009f7e:	0010      	movs	r0, r2
 8009f80:	0019      	movs	r1, r3
 8009f82:	46bd      	mov	sp, r7
 8009f84:	b006      	add	sp, #24
 8009f86:	bdb0      	pop	{r4, r5, r7, pc}
 8009f88:	08013e4c 	.word	0x08013e4c
 8009f8c:	40590000 	.word	0x40590000
 8009f90:	40240000 	.word	0x40240000
 8009f94:	40180000 	.word	0x40180000

08009f98 <get_my_nmea_gngll_coordinates>:

void get_my_nmea_gngll_coordinates ( const char* m , char* latitude_s , char* longitude_s , int32_t* latitude_astro_geo_wr , int32_t* longitude_astro_geo_wr )
{
 8009f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f9a:	b091      	sub	sp, #68	; 0x44
 8009f9c:	af02      	add	r7, sp, #8
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	60b9      	str	r1, [r7, #8]
 8009fa2:	607a      	str	r2, [r7, #4]
 8009fa4:	603b      	str	r3, [r7, #0]
	char direction ;

	//Latitude part
	uint8_t coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION ) + 1 ;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2201      	movs	r2, #1
 8009faa:	212c      	movs	r1, #44	; 0x2c
 8009fac:	0018      	movs	r0, r3
 8009fae:	f7ff fe35 	bl	8009c1c <my_find_char_position>
 8009fb2:	0003      	movs	r3, r0
 8009fb4:	001a      	movs	r2, r3
 8009fb6:	2537      	movs	r5, #55	; 0x37
 8009fb8:	197b      	adds	r3, r7, r5
 8009fba:	3201      	adds	r2, #1
 8009fbc:	701a      	strb	r2, [r3, #0]
	uint8_t coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2202      	movs	r2, #2
 8009fc2:	212c      	movs	r1, #44	; 0x2c
 8009fc4:	0018      	movs	r0, r3
 8009fc6:	f7ff fe29 	bl	8009c1c <my_find_char_position>
 8009fca:	0003      	movs	r3, r0
 8009fcc:	0019      	movs	r1, r3
 8009fce:	2436      	movs	r4, #54	; 0x36
 8009fd0:	193b      	adds	r3, r7, r4
 8009fd2:	197a      	adds	r2, r7, r5
 8009fd4:	7812      	ldrb	r2, [r2, #0]
 8009fd6:	1a8a      	subs	r2, r1, r2
 8009fd8:	701a      	strb	r2, [r3, #0]

	char* latitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 8009fda:	193b      	adds	r3, r7, r4
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	3301      	adds	r3, #1
 8009fe0:	0018      	movs	r0, r3
 8009fe2:	f000 faa3 	bl	800a52c <malloc>
 8009fe6:	0003      	movs	r3, r0
 8009fe8:	633b      	str	r3, [r7, #48]	; 0x30
	strncpy ( latitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 8009fea:	197b      	adds	r3, r7, r5
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	68fa      	ldr	r2, [r7, #12]
 8009ff0:	18d1      	adds	r1, r2, r3
 8009ff2:	193b      	adds	r3, r7, r4
 8009ff4:	781a      	ldrb	r2, [r3, #0]
 8009ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff8:	0018      	movs	r0, r3
 8009ffa:	f001 fd44 	bl	800ba86 <strncpy>
	latitude_s_temp[coordinate_length] = '\0';
 8009ffe:	193b      	adds	r3, r7, r4
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a004:	18d3      	adds	r3, r2, r3
 800a006:	2200      	movs	r2, #0
 800a008:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800a00a:	197b      	adds	r3, r7, r5
 800a00c:	781a      	ldrb	r2, [r3, #0]
 800a00e:	193b      	adds	r3, r7, r4
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	18d3      	adds	r3, r2, r3
 800a014:	3301      	adds	r3, #1
 800a016:	68fa      	ldr	r2, [r7, #12]
 800a018:	18d2      	adds	r2, r2, r3
 800a01a:	262f      	movs	r6, #47	; 0x2f
 800a01c:	19bb      	adds	r3, r7, r6
 800a01e:	7812      	ldrb	r2, [r2, #0]
 800a020:	701a      	strb	r2, [r3, #0]
	double latitude_d = nmea2decimal ( latitude_s_temp , direction ) ;
 800a022:	19bb      	adds	r3, r7, r6
 800a024:	781a      	ldrb	r2, [r3, #0]
 800a026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a028:	0011      	movs	r1, r2
 800a02a:	0018      	movs	r0, r3
 800a02c:	f7ff ff44 	bl	8009eb8 <nmea2decimal>
 800a030:	0002      	movs	r2, r0
 800a032:	000b      	movs	r3, r1
 800a034:	623a      	str	r2, [r7, #32]
 800a036:	627b      	str	r3, [r7, #36]	; 0x24
	free ( latitude_s_temp ) ;
 800a038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03a:	0018      	movs	r0, r3
 800a03c:	f000 fa80 	bl	800a540 <free>
	latitude_d = round ( latitude_d * 1e6 ) / 1e6 ;
 800a040:	2200      	movs	r2, #0
 800a042:	4b53      	ldr	r3, [pc, #332]	; (800a190 <get_my_nmea_gngll_coordinates+0x1f8>)
 800a044:	6a38      	ldr	r0, [r7, #32]
 800a046:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a048:	f7f7 fb10 	bl	800166c <__aeabi_dmul>
 800a04c:	0002      	movs	r2, r0
 800a04e:	000b      	movs	r3, r1
 800a050:	0010      	movs	r0, r2
 800a052:	0019      	movs	r1, r3
 800a054:	f008 fa34 	bl	80124c0 <round>
 800a058:	2200      	movs	r2, #0
 800a05a:	4b4d      	ldr	r3, [pc, #308]	; (800a190 <get_my_nmea_gngll_coordinates+0x1f8>)
 800a05c:	f7f6 ff0c 	bl	8000e78 <__aeabi_ddiv>
 800a060:	0002      	movs	r2, r0
 800a062:	000b      	movs	r3, r1
 800a064:	623a      	str	r2, [r7, #32]
 800a066:	627b      	str	r3, [r7, #36]	; 0x24
	snprintf ( latitude_s , 12 , "%.6lf" , latitude_d ) ;
 800a068:	494a      	ldr	r1, [pc, #296]	; (800a194 <get_my_nmea_gngll_coordinates+0x1fc>)
 800a06a:	68b8      	ldr	r0, [r7, #8]
 800a06c:	6a3a      	ldr	r2, [r7, #32]
 800a06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a070:	9200      	str	r2, [sp, #0]
 800a072:	9301      	str	r3, [sp, #4]
 800a074:	000a      	movs	r2, r1
 800a076:	210c      	movs	r1, #12
 800a078:	f001 fc22 	bl	800b8c0 <snprintf>
	*latitude_astro_geo_wr = (int32_t) ( latitude_d * 10000000 ) ;
 800a07c:	2200      	movs	r2, #0
 800a07e:	4b46      	ldr	r3, [pc, #280]	; (800a198 <get_my_nmea_gngll_coordinates+0x200>)
 800a080:	6a38      	ldr	r0, [r7, #32]
 800a082:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a084:	f7f7 faf2 	bl	800166c <__aeabi_dmul>
 800a088:	0002      	movs	r2, r0
 800a08a:	000b      	movs	r3, r1
 800a08c:	0010      	movs	r0, r2
 800a08e:	0019      	movs	r1, r3
 800a090:	f7f8 f94e 	bl	8002330 <__aeabi_d2iz>
 800a094:	0002      	movs	r2, r0
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	601a      	str	r2, [r3, #0]

	//Longitude part
	coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2) + 1 ;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2203      	movs	r2, #3
 800a09e:	212c      	movs	r1, #44	; 0x2c
 800a0a0:	0018      	movs	r0, r3
 800a0a2:	f7ff fdbb 	bl	8009c1c <my_find_char_position>
 800a0a6:	0003      	movs	r3, r0
 800a0a8:	001a      	movs	r2, r3
 800a0aa:	197b      	adds	r3, r7, r5
 800a0ac:	3201      	adds	r2, #1
 800a0ae:	701a      	strb	r2, [r3, #0]
	coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2 + 1 ) - coordinate_position ;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2204      	movs	r2, #4
 800a0b4:	212c      	movs	r1, #44	; 0x2c
 800a0b6:	0018      	movs	r0, r3
 800a0b8:	f7ff fdb0 	bl	8009c1c <my_find_char_position>
 800a0bc:	0003      	movs	r3, r0
 800a0be:	0019      	movs	r1, r3
 800a0c0:	193b      	adds	r3, r7, r4
 800a0c2:	197a      	adds	r2, r7, r5
 800a0c4:	7812      	ldrb	r2, [r2, #0]
 800a0c6:	1a8a      	subs	r2, r1, r2
 800a0c8:	701a      	strb	r2, [r3, #0]

	char* longitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800a0ca:	193b      	adds	r3, r7, r4
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	0018      	movs	r0, r3
 800a0d2:	f000 fa2b 	bl	800a52c <malloc>
 800a0d6:	0003      	movs	r3, r0
 800a0d8:	61fb      	str	r3, [r7, #28]
	strncpy ( longitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800a0da:	197b      	adds	r3, r7, r5
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	68fa      	ldr	r2, [r7, #12]
 800a0e0:	18d1      	adds	r1, r2, r3
 800a0e2:	193b      	adds	r3, r7, r4
 800a0e4:	781a      	ldrb	r2, [r3, #0]
 800a0e6:	69fb      	ldr	r3, [r7, #28]
 800a0e8:	0018      	movs	r0, r3
 800a0ea:	f001 fccc 	bl	800ba86 <strncpy>
	longitude_s_temp[coordinate_length] = '\0';
 800a0ee:	193b      	adds	r3, r7, r4
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	69fa      	ldr	r2, [r7, #28]
 800a0f4:	18d3      	adds	r3, r2, r3
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800a0fa:	197b      	adds	r3, r7, r5
 800a0fc:	781a      	ldrb	r2, [r3, #0]
 800a0fe:	193b      	adds	r3, r7, r4
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	18d3      	adds	r3, r2, r3
 800a104:	3301      	adds	r3, #1
 800a106:	68fa      	ldr	r2, [r7, #12]
 800a108:	18d2      	adds	r2, r2, r3
 800a10a:	19bb      	adds	r3, r7, r6
 800a10c:	7812      	ldrb	r2, [r2, #0]
 800a10e:	701a      	strb	r2, [r3, #0]
	double longitude_d = nmea2decimal ( longitude_s_temp , direction ) ;
 800a110:	19bb      	adds	r3, r7, r6
 800a112:	781a      	ldrb	r2, [r3, #0]
 800a114:	69fb      	ldr	r3, [r7, #28]
 800a116:	0011      	movs	r1, r2
 800a118:	0018      	movs	r0, r3
 800a11a:	f7ff fecd 	bl	8009eb8 <nmea2decimal>
 800a11e:	0002      	movs	r2, r0
 800a120:	000b      	movs	r3, r1
 800a122:	613a      	str	r2, [r7, #16]
 800a124:	617b      	str	r3, [r7, #20]
	free ( longitude_s_temp ) ;
 800a126:	69fb      	ldr	r3, [r7, #28]
 800a128:	0018      	movs	r0, r3
 800a12a:	f000 fa09 	bl	800a540 <free>
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
 800a12e:	2200      	movs	r2, #0
 800a130:	4b17      	ldr	r3, [pc, #92]	; (800a190 <get_my_nmea_gngll_coordinates+0x1f8>)
 800a132:	6938      	ldr	r0, [r7, #16]
 800a134:	6979      	ldr	r1, [r7, #20]
 800a136:	f7f7 fa99 	bl	800166c <__aeabi_dmul>
 800a13a:	0002      	movs	r2, r0
 800a13c:	000b      	movs	r3, r1
 800a13e:	0010      	movs	r0, r2
 800a140:	0019      	movs	r1, r3
 800a142:	f008 f9bd 	bl	80124c0 <round>
 800a146:	2200      	movs	r2, #0
 800a148:	4b11      	ldr	r3, [pc, #68]	; (800a190 <get_my_nmea_gngll_coordinates+0x1f8>)
 800a14a:	f7f6 fe95 	bl	8000e78 <__aeabi_ddiv>
 800a14e:	0002      	movs	r2, r0
 800a150:	000b      	movs	r3, r1
 800a152:	613a      	str	r2, [r7, #16]
 800a154:	617b      	str	r3, [r7, #20]
	snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
 800a156:	490f      	ldr	r1, [pc, #60]	; (800a194 <get_my_nmea_gngll_coordinates+0x1fc>)
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	693a      	ldr	r2, [r7, #16]
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	9200      	str	r2, [sp, #0]
 800a160:	9301      	str	r3, [sp, #4]
 800a162:	000a      	movs	r2, r1
 800a164:	210c      	movs	r1, #12
 800a166:	f001 fbab 	bl	800b8c0 <snprintf>
	*longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
 800a16a:	2200      	movs	r2, #0
 800a16c:	4b0a      	ldr	r3, [pc, #40]	; (800a198 <get_my_nmea_gngll_coordinates+0x200>)
 800a16e:	6938      	ldr	r0, [r7, #16]
 800a170:	6979      	ldr	r1, [r7, #20]
 800a172:	f7f7 fa7b 	bl	800166c <__aeabi_dmul>
 800a176:	0002      	movs	r2, r0
 800a178:	000b      	movs	r3, r1
 800a17a:	0010      	movs	r0, r2
 800a17c:	0019      	movs	r1, r3
 800a17e:	f7f8 f8d7 	bl	8002330 <__aeabi_d2iz>
 800a182:	0002      	movs	r2, r0
 800a184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a186:	601a      	str	r2, [r3, #0]
}
 800a188:	46c0      	nop			; (mov r8, r8)
 800a18a:	46bd      	mov	sp, r7
 800a18c:	b00f      	add	sp, #60	; 0x3c
 800a18e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a190:	412e8480 	.word	0x412e8480
 800a194:	08013e50 	.word	0x08013e50
 800a198:	416312d0 	.word	0x416312d0

0800a19c <my_nmea_get_gsv_tns>:
uint16_t my_nmea_get_gsv_tns ( const char* m ) //tns = Total Number Satelites
{
 800a19c:	b5b0      	push	{r4, r5, r7, lr}
 800a19e:	b086      	sub	sp, #24
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
	uint16_t tns = 0 ;
 800a1a4:	240e      	movs	r4, #14
 800a1a6:	193b      	adds	r3, r7, r4
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	801a      	strh	r2, [r3, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , GSV_TNS_POSITION ) + 1 ;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2203      	movs	r2, #3
 800a1b0:	212c      	movs	r1, #44	; 0x2c
 800a1b2:	0018      	movs	r0, r3
 800a1b4:	f7ff fd32 	bl	8009c1c <my_find_char_position>
 800a1b8:	0003      	movs	r3, r0
 800a1ba:	001a      	movs	r2, r3
 800a1bc:	2517      	movs	r5, #23
 800a1be:	197b      	adds	r3, r7, r5
 800a1c0:	3201      	adds	r2, #1
 800a1c2:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( GSV_TNS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a1c4:	2003      	movs	r0, #3
 800a1c6:	f000 f9b1 	bl	800a52c <malloc>
 800a1ca:	0003      	movs	r3, r0
 800a1cc:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , GSV_TNS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a1ce:	197b      	adds	r3, r7, r5
 800a1d0:	781b      	ldrb	r3, [r3, #0]
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	18d1      	adds	r1, r2, r3
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	2202      	movs	r2, #2
 800a1da:	0018      	movs	r0, r3
 800a1dc:	f001 fc53 	bl	800ba86 <strncpy>
	s[GSV_TNS_LENGTH] = '\0';
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	3302      	adds	r3, #2
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%hu" , &tns ) ;
 800a1e8:	193a      	adds	r2, r7, r4
 800a1ea:	4907      	ldr	r1, [pc, #28]	; (800a208 <my_nmea_get_gsv_tns+0x6c>)
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	0018      	movs	r0, r3
 800a1f0:	f001 fbba 	bl	800b968 <sscanf>
	free ( s ) ;
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	0018      	movs	r0, r3
 800a1f8:	f000 f9a2 	bl	800a540 <free>
	return tns ;
 800a1fc:	193b      	adds	r3, r7, r4
 800a1fe:	881b      	ldrh	r3, [r3, #0]
}
 800a200:	0018      	movs	r0, r3
 800a202:	46bd      	mov	sp, r7
 800a204:	b006      	add	sp, #24
 800a206:	bdb0      	pop	{r4, r5, r7, pc}
 800a208:	08013e58 	.word	0x08013e58

0800a20c <get_my_nmea_rmc_date_yy>:

void get_my_nmea_rmc_date_yy ( const char* m , uint8_t* yy )
{
 800a20c:	b590      	push	{r4, r7, lr}
 800a20e:	b087      	sub	sp, #28
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_YY_OFFSET ;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2209      	movs	r2, #9
 800a21a:	212c      	movs	r1, #44	; 0x2c
 800a21c:	0018      	movs	r0, r3
 800a21e:	f7ff fcfd 	bl	8009c1c <my_find_char_position>
 800a222:	0003      	movs	r3, r0
 800a224:	001a      	movs	r2, r3
 800a226:	2417      	movs	r4, #23
 800a228:	193b      	adds	r3, r7, r4
 800a22a:	3205      	adds	r2, #5
 800a22c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a22e:	2003      	movs	r0, #3
 800a230:	f000 f97c 	bl	800a52c <malloc>
 800a234:	0003      	movs	r3, r0
 800a236:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a238:	193b      	adds	r3, r7, r4
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	18d1      	adds	r1, r2, r3
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	2202      	movs	r2, #2
 800a244:	0018      	movs	r0, r3
 800a246:	f001 fc1e 	bl	800ba86 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	3302      	adds	r3, #2
 800a24e:	2200      	movs	r2, #0
 800a250:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , yy ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a252:	240e      	movs	r4, #14
 800a254:	193a      	adds	r2, r7, r4
 800a256:	4909      	ldr	r1, [pc, #36]	; (800a27c <get_my_nmea_rmc_date_yy+0x70>)
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	0018      	movs	r0, r3
 800a25c:	f001 fb84 	bl	800b968 <sscanf>
	free ( s ) ;
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	0018      	movs	r0, r3
 800a264:	f000 f96c 	bl	800a540 <free>
	*yy = (uint8_t) temp ;
 800a268:	193b      	adds	r3, r7, r4
 800a26a:	881b      	ldrh	r3, [r3, #0]
 800a26c:	b2da      	uxtb	r2, r3
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	701a      	strb	r2, [r3, #0]

}
 800a272:	46c0      	nop			; (mov r8, r8)
 800a274:	46bd      	mov	sp, r7
 800a276:	b007      	add	sp, #28
 800a278:	bd90      	pop	{r4, r7, pc}
 800a27a:	46c0      	nop			; (mov r8, r8)
 800a27c:	08013e58 	.word	0x08013e58

0800a280 <get_my_nmea_rmc_date_mm>:
void get_my_nmea_rmc_date_mm ( const char* m , uint8_t* mm )
{
 800a280:	b590      	push	{r4, r7, lr}
 800a282:	b087      	sub	sp, #28
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_MM_OFFSET ;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2209      	movs	r2, #9
 800a28e:	212c      	movs	r1, #44	; 0x2c
 800a290:	0018      	movs	r0, r3
 800a292:	f7ff fcc3 	bl	8009c1c <my_find_char_position>
 800a296:	0003      	movs	r3, r0
 800a298:	001a      	movs	r2, r3
 800a29a:	2417      	movs	r4, #23
 800a29c:	193b      	adds	r3, r7, r4
 800a29e:	3203      	adds	r2, #3
 800a2a0:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a2a2:	2003      	movs	r0, #3
 800a2a4:	f000 f942 	bl	800a52c <malloc>
 800a2a8:	0003      	movs	r3, r0
 800a2aa:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a2ac:	193b      	adds	r3, r7, r4
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	687a      	ldr	r2, [r7, #4]
 800a2b2:	18d1      	adds	r1, r2, r3
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	2202      	movs	r2, #2
 800a2b8:	0018      	movs	r0, r3
 800a2ba:	f001 fbe4 	bl	800ba86 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	3302      	adds	r3, #2
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a2c6:	240e      	movs	r4, #14
 800a2c8:	193a      	adds	r2, r7, r4
 800a2ca:	4909      	ldr	r1, [pc, #36]	; (800a2f0 <get_my_nmea_rmc_date_mm+0x70>)
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	0018      	movs	r0, r3
 800a2d0:	f001 fb4a 	bl	800b968 <sscanf>
	free ( s ) ;
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	0018      	movs	r0, r3
 800a2d8:	f000 f932 	bl	800a540 <free>
	*mm = (uint8_t) temp ;
 800a2dc:	193b      	adds	r3, r7, r4
 800a2de:	881b      	ldrh	r3, [r3, #0]
 800a2e0:	b2da      	uxtb	r2, r3
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	701a      	strb	r2, [r3, #0]

}
 800a2e6:	46c0      	nop			; (mov r8, r8)
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	b007      	add	sp, #28
 800a2ec:	bd90      	pop	{r4, r7, pc}
 800a2ee:	46c0      	nop			; (mov r8, r8)
 800a2f0:	08013e58 	.word	0x08013e58

0800a2f4 <get_my_nmea_rmc_date_dd>:
void get_my_nmea_rmc_date_dd ( const char* m , uint8_t* dd )
{
 800a2f4:	b590      	push	{r4, r7, lr}
 800a2f6:	b087      	sub	sp, #28
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_DD_OFFSET ;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2209      	movs	r2, #9
 800a302:	212c      	movs	r1, #44	; 0x2c
 800a304:	0018      	movs	r0, r3
 800a306:	f7ff fc89 	bl	8009c1c <my_find_char_position>
 800a30a:	0003      	movs	r3, r0
 800a30c:	001a      	movs	r2, r3
 800a30e:	2417      	movs	r4, #23
 800a310:	193b      	adds	r3, r7, r4
 800a312:	3201      	adds	r2, #1
 800a314:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a316:	2003      	movs	r0, #3
 800a318:	f000 f908 	bl	800a52c <malloc>
 800a31c:	0003      	movs	r3, r0
 800a31e:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a320:	193b      	adds	r3, r7, r4
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	18d1      	adds	r1, r2, r3
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	2202      	movs	r2, #2
 800a32c:	0018      	movs	r0, r3
 800a32e:	f001 fbaa 	bl	800ba86 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	3302      	adds	r3, #2
 800a336:	2200      	movs	r2, #0
 800a338:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , dd ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a33a:	240e      	movs	r4, #14
 800a33c:	193a      	adds	r2, r7, r4
 800a33e:	4909      	ldr	r1, [pc, #36]	; (800a364 <get_my_nmea_rmc_date_dd+0x70>)
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	0018      	movs	r0, r3
 800a344:	f001 fb10 	bl	800b968 <sscanf>
	free ( s ) ;
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	0018      	movs	r0, r3
 800a34c:	f000 f8f8 	bl	800a540 <free>
	*dd = (uint8_t) temp ;
 800a350:	193b      	adds	r3, r7, r4
 800a352:	881b      	ldrh	r3, [r3, #0]
 800a354:	b2da      	uxtb	r2, r3
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	701a      	strb	r2, [r3, #0]

}
 800a35a:	46c0      	nop			; (mov r8, r8)
 800a35c:	46bd      	mov	sp, r7
 800a35e:	b007      	add	sp, #28
 800a360:	bd90      	pop	{r4, r7, pc}
 800a362:	46c0      	nop			; (mov r8, r8)
 800a364:	08013e58 	.word	0x08013e58

0800a368 <get_my_nmea_rmc_utc_hh>:
void get_my_nmea_rmc_utc_hh ( const char* m , uint8_t* hh )
{
 800a368:	b590      	push	{r4, r7, lr}
 800a36a:	b087      	sub	sp, #28
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_HH_OFFSET ;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2201      	movs	r2, #1
 800a376:	212c      	movs	r1, #44	; 0x2c
 800a378:	0018      	movs	r0, r3
 800a37a:	f7ff fc4f 	bl	8009c1c <my_find_char_position>
 800a37e:	0003      	movs	r3, r0
 800a380:	001a      	movs	r2, r3
 800a382:	2417      	movs	r4, #23
 800a384:	193b      	adds	r3, r7, r4
 800a386:	3201      	adds	r2, #1
 800a388:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a38a:	2003      	movs	r0, #3
 800a38c:	f000 f8ce 	bl	800a52c <malloc>
 800a390:	0003      	movs	r3, r0
 800a392:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a394:	193b      	adds	r3, r7, r4
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	18d1      	adds	r1, r2, r3
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	2202      	movs	r2, #2
 800a3a0:	0018      	movs	r0, r3
 800a3a2:	f001 fb70 	bl	800ba86 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	3302      	adds	r3, #2
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , hh ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a3ae:	240e      	movs	r4, #14
 800a3b0:	193a      	adds	r2, r7, r4
 800a3b2:	4909      	ldr	r1, [pc, #36]	; (800a3d8 <get_my_nmea_rmc_utc_hh+0x70>)
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	0018      	movs	r0, r3
 800a3b8:	f001 fad6 	bl	800b968 <sscanf>
	free ( s ) ;
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	0018      	movs	r0, r3
 800a3c0:	f000 f8be 	bl	800a540 <free>
	*hh = (uint8_t) temp ;
 800a3c4:	193b      	adds	r3, r7, r4
 800a3c6:	881b      	ldrh	r3, [r3, #0]
 800a3c8:	b2da      	uxtb	r2, r3
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	701a      	strb	r2, [r3, #0]

}
 800a3ce:	46c0      	nop			; (mov r8, r8)
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	b007      	add	sp, #28
 800a3d4:	bd90      	pop	{r4, r7, pc}
 800a3d6:	46c0      	nop			; (mov r8, r8)
 800a3d8:	08013e58 	.word	0x08013e58

0800a3dc <get_my_nmea_rmc_utc_mm>:
void get_my_nmea_rmc_utc_mm ( const char* m , uint8_t* mm )
{
 800a3dc:	b590      	push	{r4, r7, lr}
 800a3de:	b087      	sub	sp, #28
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_MM_OFFSET ;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	212c      	movs	r1, #44	; 0x2c
 800a3ec:	0018      	movs	r0, r3
 800a3ee:	f7ff fc15 	bl	8009c1c <my_find_char_position>
 800a3f2:	0003      	movs	r3, r0
 800a3f4:	001a      	movs	r2, r3
 800a3f6:	2417      	movs	r4, #23
 800a3f8:	193b      	adds	r3, r7, r4
 800a3fa:	3203      	adds	r2, #3
 800a3fc:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a3fe:	2003      	movs	r0, #3
 800a400:	f000 f894 	bl	800a52c <malloc>
 800a404:	0003      	movs	r3, r0
 800a406:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a408:	193b      	adds	r3, r7, r4
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	18d1      	adds	r1, r2, r3
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	2202      	movs	r2, #2
 800a414:	0018      	movs	r0, r3
 800a416:	f001 fb36 	bl	800ba86 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	3302      	adds	r3, #2
 800a41e:	2200      	movs	r2, #0
 800a420:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a422:	240e      	movs	r4, #14
 800a424:	193a      	adds	r2, r7, r4
 800a426:	4909      	ldr	r1, [pc, #36]	; (800a44c <get_my_nmea_rmc_utc_mm+0x70>)
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	0018      	movs	r0, r3
 800a42c:	f001 fa9c 	bl	800b968 <sscanf>
	free ( s ) ;
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	0018      	movs	r0, r3
 800a434:	f000 f884 	bl	800a540 <free>
	*mm = (uint8_t) temp ;
 800a438:	193b      	adds	r3, r7, r4
 800a43a:	881b      	ldrh	r3, [r3, #0]
 800a43c:	b2da      	uxtb	r2, r3
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	701a      	strb	r2, [r3, #0]

}
 800a442:	46c0      	nop			; (mov r8, r8)
 800a444:	46bd      	mov	sp, r7
 800a446:	b007      	add	sp, #28
 800a448:	bd90      	pop	{r4, r7, pc}
 800a44a:	46c0      	nop			; (mov r8, r8)
 800a44c:	08013e58 	.word	0x08013e58

0800a450 <get_my_nmea_rmc_utc_ss>:
void get_my_nmea_rmc_utc_ss ( const char* m , uint8_t* ss )
{
 800a450:	b590      	push	{r4, r7, lr}
 800a452:	b087      	sub	sp, #28
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SS_OFFSET ;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2201      	movs	r2, #1
 800a45e:	212c      	movs	r1, #44	; 0x2c
 800a460:	0018      	movs	r0, r3
 800a462:	f7ff fbdb 	bl	8009c1c <my_find_char_position>
 800a466:	0003      	movs	r3, r0
 800a468:	001a      	movs	r2, r3
 800a46a:	2417      	movs	r4, #23
 800a46c:	193b      	adds	r3, r7, r4
 800a46e:	3205      	adds	r2, #5
 800a470:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a472:	2003      	movs	r0, #3
 800a474:	f000 f85a 	bl	800a52c <malloc>
 800a478:	0003      	movs	r3, r0
 800a47a:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a47c:	193b      	adds	r3, r7, r4
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	687a      	ldr	r2, [r7, #4]
 800a482:	18d1      	adds	r1, r2, r3
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	2202      	movs	r2, #2
 800a488:	0018      	movs	r0, r3
 800a48a:	f001 fafc 	bl	800ba86 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	3302      	adds	r3, #2
 800a492:	2200      	movs	r2, #0
 800a494:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , ss ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a496:	240e      	movs	r4, #14
 800a498:	193a      	adds	r2, r7, r4
 800a49a:	4909      	ldr	r1, [pc, #36]	; (800a4c0 <get_my_nmea_rmc_utc_ss+0x70>)
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	0018      	movs	r0, r3
 800a4a0:	f001 fa62 	bl	800b968 <sscanf>
	free ( s ) ;
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	0018      	movs	r0, r3
 800a4a8:	f000 f84a 	bl	800a540 <free>
	*ss = (uint8_t) temp ;
 800a4ac:	193b      	adds	r3, r7, r4
 800a4ae:	881b      	ldrh	r3, [r3, #0]
 800a4b0:	b2da      	uxtb	r2, r3
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	701a      	strb	r2, [r3, #0]

}
 800a4b6:	46c0      	nop			; (mov r8, r8)
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	b007      	add	sp, #28
 800a4bc:	bd90      	pop	{r4, r7, pc}
 800a4be:	46c0      	nop			; (mov r8, r8)
 800a4c0:	08013e58 	.word	0x08013e58

0800a4c4 <get_my_nmea_rmc_utc_sss>:
void get_my_nmea_rmc_utc_sss ( const char* m , uint32_t* sss )
{
 800a4c4:	b590      	push	{r4, r7, lr}
 800a4c6:	b085      	sub	sp, #20
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	6039      	str	r1, [r7, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SSS_OFFSET ;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	212c      	movs	r1, #44	; 0x2c
 800a4d4:	0018      	movs	r0, r3
 800a4d6:	f7ff fba1 	bl	8009c1c <my_find_char_position>
 800a4da:	0003      	movs	r3, r0
 800a4dc:	001a      	movs	r2, r3
 800a4de:	240f      	movs	r4, #15
 800a4e0:	193b      	adds	r3, r7, r4
 800a4e2:	3208      	adds	r2, #8
 800a4e4:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_SSS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a4e6:	2004      	movs	r0, #4
 800a4e8:	f000 f820 	bl	800a52c <malloc>
 800a4ec:	0003      	movs	r3, r0
 800a4ee:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_UTC_SSS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a4f0:	193b      	adds	r3, r7, r4
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	18d1      	adds	r1, r2, r3
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	2203      	movs	r2, #3
 800a4fc:	0018      	movs	r0, r3
 800a4fe:	f001 fac2 	bl	800ba86 <strncpy>
	s[RMC_UTC_SSS_LENGTH] = '\0';
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	3303      	adds	r3, #3
 800a506:	2200      	movs	r2, #0
 800a508:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%lu" , sss ) ;
 800a50a:	683a      	ldr	r2, [r7, #0]
 800a50c:	4906      	ldr	r1, [pc, #24]	; (800a528 <get_my_nmea_rmc_utc_sss+0x64>)
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	0018      	movs	r0, r3
 800a512:	f001 fa29 	bl	800b968 <sscanf>
	free ( s ) ;
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	0018      	movs	r0, r3
 800a51a:	f000 f811 	bl	800a540 <free>
}
 800a51e:	46c0      	nop			; (mov r8, r8)
 800a520:	46bd      	mov	sp, r7
 800a522:	b005      	add	sp, #20
 800a524:	bd90      	pop	{r4, r7, pc}
 800a526:	46c0      	nop			; (mov r8, r8)
 800a528:	08013e5c 	.word	0x08013e5c

0800a52c <malloc>:
 800a52c:	b510      	push	{r4, lr}
 800a52e:	4b03      	ldr	r3, [pc, #12]	; (800a53c <malloc+0x10>)
 800a530:	0001      	movs	r1, r0
 800a532:	6818      	ldr	r0, [r3, #0]
 800a534:	f000 f80e 	bl	800a554 <_malloc_r>
 800a538:	bd10      	pop	{r4, pc}
 800a53a:	46c0      	nop			; (mov r8, r8)
 800a53c:	200006d8 	.word	0x200006d8

0800a540 <free>:
 800a540:	b510      	push	{r4, lr}
 800a542:	4b03      	ldr	r3, [pc, #12]	; (800a550 <free+0x10>)
 800a544:	0001      	movs	r1, r0
 800a546:	6818      	ldr	r0, [r3, #0]
 800a548:	f001 fbe4 	bl	800bd14 <_free_r>
 800a54c:	bd10      	pop	{r4, pc}
 800a54e:	46c0      	nop			; (mov r8, r8)
 800a550:	200006d8 	.word	0x200006d8

0800a554 <_malloc_r>:
 800a554:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a556:	000d      	movs	r5, r1
 800a558:	b087      	sub	sp, #28
 800a55a:	350b      	adds	r5, #11
 800a55c:	9001      	str	r0, [sp, #4]
 800a55e:	2d16      	cmp	r5, #22
 800a560:	d908      	bls.n	800a574 <_malloc_r+0x20>
 800a562:	2207      	movs	r2, #7
 800a564:	4395      	bics	r5, r2
 800a566:	d506      	bpl.n	800a576 <_malloc_r+0x22>
 800a568:	230c      	movs	r3, #12
 800a56a:	9a01      	ldr	r2, [sp, #4]
 800a56c:	6013      	str	r3, [r2, #0]
 800a56e:	2000      	movs	r0, #0
 800a570:	b007      	add	sp, #28
 800a572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a574:	2510      	movs	r5, #16
 800a576:	42a9      	cmp	r1, r5
 800a578:	d8f6      	bhi.n	800a568 <_malloc_r+0x14>
 800a57a:	9801      	ldr	r0, [sp, #4]
 800a57c:	f000 f9fe 	bl	800a97c <__malloc_lock>
 800a580:	23fc      	movs	r3, #252	; 0xfc
 800a582:	4ebe      	ldr	r6, [pc, #760]	; (800a87c <_malloc_r+0x328>)
 800a584:	005b      	lsls	r3, r3, #1
 800a586:	429d      	cmp	r5, r3
 800a588:	d219      	bcs.n	800a5be <_malloc_r+0x6a>
 800a58a:	002a      	movs	r2, r5
 800a58c:	3208      	adds	r2, #8
 800a58e:	18b2      	adds	r2, r6, r2
 800a590:	0011      	movs	r1, r2
 800a592:	6854      	ldr	r4, [r2, #4]
 800a594:	3908      	subs	r1, #8
 800a596:	08eb      	lsrs	r3, r5, #3
 800a598:	428c      	cmp	r4, r1
 800a59a:	d103      	bne.n	800a5a4 <_malloc_r+0x50>
 800a59c:	68d4      	ldr	r4, [r2, #12]
 800a59e:	3302      	adds	r3, #2
 800a5a0:	42a2      	cmp	r2, r4
 800a5a2:	d022      	beq.n	800a5ea <_malloc_r+0x96>
 800a5a4:	2203      	movs	r2, #3
 800a5a6:	6863      	ldr	r3, [r4, #4]
 800a5a8:	68a1      	ldr	r1, [r4, #8]
 800a5aa:	4393      	bics	r3, r2
 800a5ac:	68e2      	ldr	r2, [r4, #12]
 800a5ae:	18e3      	adds	r3, r4, r3
 800a5b0:	60ca      	str	r2, [r1, #12]
 800a5b2:	6091      	str	r1, [r2, #8]
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	6859      	ldr	r1, [r3, #4]
 800a5b8:	430a      	orrs	r2, r1
 800a5ba:	605a      	str	r2, [r3, #4]
 800a5bc:	e02a      	b.n	800a614 <_malloc_r+0xc0>
 800a5be:	233f      	movs	r3, #63	; 0x3f
 800a5c0:	0a6a      	lsrs	r2, r5, #9
 800a5c2:	d003      	beq.n	800a5cc <_malloc_r+0x78>
 800a5c4:	2a04      	cmp	r2, #4
 800a5c6:	d82b      	bhi.n	800a620 <_malloc_r+0xcc>
 800a5c8:	09ab      	lsrs	r3, r5, #6
 800a5ca:	3338      	adds	r3, #56	; 0x38
 800a5cc:	2203      	movs	r2, #3
 800a5ce:	4694      	mov	ip, r2
 800a5d0:	00d9      	lsls	r1, r3, #3
 800a5d2:	1989      	adds	r1, r1, r6
 800a5d4:	68cc      	ldr	r4, [r1, #12]
 800a5d6:	428c      	cmp	r4, r1
 800a5d8:	d006      	beq.n	800a5e8 <_malloc_r+0x94>
 800a5da:	4660      	mov	r0, ip
 800a5dc:	6862      	ldr	r2, [r4, #4]
 800a5de:	4382      	bics	r2, r0
 800a5e0:	1b57      	subs	r7, r2, r5
 800a5e2:	2f0f      	cmp	r7, #15
 800a5e4:	dd34      	ble.n	800a650 <_malloc_r+0xfc>
 800a5e6:	3b01      	subs	r3, #1
 800a5e8:	3301      	adds	r3, #1
 800a5ea:	6934      	ldr	r4, [r6, #16]
 800a5ec:	49a4      	ldr	r1, [pc, #656]	; (800a880 <_malloc_r+0x32c>)
 800a5ee:	428c      	cmp	r4, r1
 800a5f0:	d055      	beq.n	800a69e <_malloc_r+0x14a>
 800a5f2:	2003      	movs	r0, #3
 800a5f4:	6862      	ldr	r2, [r4, #4]
 800a5f6:	4382      	bics	r2, r0
 800a5f8:	1b50      	subs	r0, r2, r5
 800a5fa:	280f      	cmp	r0, #15
 800a5fc:	dd36      	ble.n	800a66c <_malloc_r+0x118>
 800a5fe:	2301      	movs	r3, #1
 800a600:	1967      	adds	r7, r4, r5
 800a602:	431d      	orrs	r5, r3
 800a604:	4303      	orrs	r3, r0
 800a606:	6065      	str	r5, [r4, #4]
 800a608:	6177      	str	r7, [r6, #20]
 800a60a:	6137      	str	r7, [r6, #16]
 800a60c:	60f9      	str	r1, [r7, #12]
 800a60e:	60b9      	str	r1, [r7, #8]
 800a610:	607b      	str	r3, [r7, #4]
 800a612:	50a0      	str	r0, [r4, r2]
 800a614:	9801      	ldr	r0, [sp, #4]
 800a616:	f000 f9b9 	bl	800a98c <__malloc_unlock>
 800a61a:	0020      	movs	r0, r4
 800a61c:	3008      	adds	r0, #8
 800a61e:	e7a7      	b.n	800a570 <_malloc_r+0x1c>
 800a620:	2a14      	cmp	r2, #20
 800a622:	d802      	bhi.n	800a62a <_malloc_r+0xd6>
 800a624:	0013      	movs	r3, r2
 800a626:	335b      	adds	r3, #91	; 0x5b
 800a628:	e7d0      	b.n	800a5cc <_malloc_r+0x78>
 800a62a:	2a54      	cmp	r2, #84	; 0x54
 800a62c:	d802      	bhi.n	800a634 <_malloc_r+0xe0>
 800a62e:	0b2b      	lsrs	r3, r5, #12
 800a630:	336e      	adds	r3, #110	; 0x6e
 800a632:	e7cb      	b.n	800a5cc <_malloc_r+0x78>
 800a634:	23aa      	movs	r3, #170	; 0xaa
 800a636:	005b      	lsls	r3, r3, #1
 800a638:	429a      	cmp	r2, r3
 800a63a:	d802      	bhi.n	800a642 <_malloc_r+0xee>
 800a63c:	0beb      	lsrs	r3, r5, #15
 800a63e:	3377      	adds	r3, #119	; 0x77
 800a640:	e7c4      	b.n	800a5cc <_malloc_r+0x78>
 800a642:	4990      	ldr	r1, [pc, #576]	; (800a884 <_malloc_r+0x330>)
 800a644:	237e      	movs	r3, #126	; 0x7e
 800a646:	428a      	cmp	r2, r1
 800a648:	d8c0      	bhi.n	800a5cc <_malloc_r+0x78>
 800a64a:	0cab      	lsrs	r3, r5, #18
 800a64c:	337c      	adds	r3, #124	; 0x7c
 800a64e:	e7bd      	b.n	800a5cc <_malloc_r+0x78>
 800a650:	68e0      	ldr	r0, [r4, #12]
 800a652:	2f00      	cmp	r7, #0
 800a654:	db08      	blt.n	800a668 <_malloc_r+0x114>
 800a656:	68a3      	ldr	r3, [r4, #8]
 800a658:	60d8      	str	r0, [r3, #12]
 800a65a:	6083      	str	r3, [r0, #8]
 800a65c:	2301      	movs	r3, #1
 800a65e:	18a2      	adds	r2, r4, r2
 800a660:	6851      	ldr	r1, [r2, #4]
 800a662:	430b      	orrs	r3, r1
 800a664:	6053      	str	r3, [r2, #4]
 800a666:	e7d5      	b.n	800a614 <_malloc_r+0xc0>
 800a668:	0004      	movs	r4, r0
 800a66a:	e7b4      	b.n	800a5d6 <_malloc_r+0x82>
 800a66c:	6171      	str	r1, [r6, #20]
 800a66e:	6131      	str	r1, [r6, #16]
 800a670:	2800      	cmp	r0, #0
 800a672:	daf3      	bge.n	800a65c <_malloc_r+0x108>
 800a674:	6871      	ldr	r1, [r6, #4]
 800a676:	468c      	mov	ip, r1
 800a678:	2180      	movs	r1, #128	; 0x80
 800a67a:	0089      	lsls	r1, r1, #2
 800a67c:	428a      	cmp	r2, r1
 800a67e:	d300      	bcc.n	800a682 <_malloc_r+0x12e>
 800a680:	e08c      	b.n	800a79c <_malloc_r+0x248>
 800a682:	08d1      	lsrs	r1, r2, #3
 800a684:	0950      	lsrs	r0, r2, #5
 800a686:	2201      	movs	r2, #1
 800a688:	4082      	lsls	r2, r0
 800a68a:	4660      	mov	r0, ip
 800a68c:	4302      	orrs	r2, r0
 800a68e:	6072      	str	r2, [r6, #4]
 800a690:	00ca      	lsls	r2, r1, #3
 800a692:	1992      	adds	r2, r2, r6
 800a694:	6891      	ldr	r1, [r2, #8]
 800a696:	60e2      	str	r2, [r4, #12]
 800a698:	60a1      	str	r1, [r4, #8]
 800a69a:	6094      	str	r4, [r2, #8]
 800a69c:	60cc      	str	r4, [r1, #12]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	4876      	ldr	r0, [pc, #472]	; (800a87c <_malloc_r+0x328>)
 800a6a2:	1099      	asrs	r1, r3, #2
 800a6a4:	408a      	lsls	r2, r1
 800a6a6:	6841      	ldr	r1, [r0, #4]
 800a6a8:	4291      	cmp	r1, r2
 800a6aa:	d328      	bcc.n	800a6fe <_malloc_r+0x1aa>
 800a6ac:	420a      	tst	r2, r1
 800a6ae:	d105      	bne.n	800a6bc <_malloc_r+0x168>
 800a6b0:	2403      	movs	r4, #3
 800a6b2:	43a3      	bics	r3, r4
 800a6b4:	0052      	lsls	r2, r2, #1
 800a6b6:	3304      	adds	r3, #4
 800a6b8:	420a      	tst	r2, r1
 800a6ba:	d0fb      	beq.n	800a6b4 <_malloc_r+0x160>
 800a6bc:	496f      	ldr	r1, [pc, #444]	; (800a87c <_malloc_r+0x328>)
 800a6be:	9104      	str	r1, [sp, #16]
 800a6c0:	00d9      	lsls	r1, r3, #3
 800a6c2:	1841      	adds	r1, r0, r1
 800a6c4:	468c      	mov	ip, r1
 800a6c6:	000f      	movs	r7, r1
 800a6c8:	9302      	str	r3, [sp, #8]
 800a6ca:	68fc      	ldr	r4, [r7, #12]
 800a6cc:	42bc      	cmp	r4, r7
 800a6ce:	d000      	beq.n	800a6d2 <_malloc_r+0x17e>
 800a6d0:	e09b      	b.n	800a80a <_malloc_r+0x2b6>
 800a6d2:	2403      	movs	r4, #3
 800a6d4:	9902      	ldr	r1, [sp, #8]
 800a6d6:	3708      	adds	r7, #8
 800a6d8:	3101      	adds	r1, #1
 800a6da:	9102      	str	r1, [sp, #8]
 800a6dc:	4221      	tst	r1, r4
 800a6de:	d1f4      	bne.n	800a6ca <_malloc_r+0x176>
 800a6e0:	2103      	movs	r1, #3
 800a6e2:	420b      	tst	r3, r1
 800a6e4:	d000      	beq.n	800a6e8 <_malloc_r+0x194>
 800a6e6:	e0b7      	b.n	800a858 <_malloc_r+0x304>
 800a6e8:	6843      	ldr	r3, [r0, #4]
 800a6ea:	4393      	bics	r3, r2
 800a6ec:	6043      	str	r3, [r0, #4]
 800a6ee:	9b04      	ldr	r3, [sp, #16]
 800a6f0:	0052      	lsls	r2, r2, #1
 800a6f2:	6859      	ldr	r1, [r3, #4]
 800a6f4:	4291      	cmp	r1, r2
 800a6f6:	d302      	bcc.n	800a6fe <_malloc_r+0x1aa>
 800a6f8:	2a00      	cmp	r2, #0
 800a6fa:	d000      	beq.n	800a6fe <_malloc_r+0x1aa>
 800a6fc:	e0bb      	b.n	800a876 <_malloc_r+0x322>
 800a6fe:	2203      	movs	r2, #3
 800a700:	6883      	ldr	r3, [r0, #8]
 800a702:	9302      	str	r3, [sp, #8]
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	4393      	bics	r3, r2
 800a708:	9303      	str	r3, [sp, #12]
 800a70a:	42ab      	cmp	r3, r5
 800a70c:	d303      	bcc.n	800a716 <_malloc_r+0x1c2>
 800a70e:	1b59      	subs	r1, r3, r5
 800a710:	290f      	cmp	r1, #15
 800a712:	dd00      	ble.n	800a716 <_malloc_r+0x1c2>
 800a714:	e123      	b.n	800a95e <_malloc_r+0x40a>
 800a716:	9b02      	ldr	r3, [sp, #8]
 800a718:	9a03      	ldr	r2, [sp, #12]
 800a71a:	2008      	movs	r0, #8
 800a71c:	189e      	adds	r6, r3, r2
 800a71e:	4b5a      	ldr	r3, [pc, #360]	; (800a888 <_malloc_r+0x334>)
 800a720:	681f      	ldr	r7, [r3, #0]
 800a722:	f001 fa71 	bl	800bc08 <sysconf>
 800a726:	4b59      	ldr	r3, [pc, #356]	; (800a88c <_malloc_r+0x338>)
 800a728:	3710      	adds	r7, #16
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	197f      	adds	r7, r7, r5
 800a72e:	9004      	str	r0, [sp, #16]
 800a730:	3301      	adds	r3, #1
 800a732:	d003      	beq.n	800a73c <_malloc_r+0x1e8>
 800a734:	1e7b      	subs	r3, r7, #1
 800a736:	181b      	adds	r3, r3, r0
 800a738:	4247      	negs	r7, r0
 800a73a:	401f      	ands	r7, r3
 800a73c:	0039      	movs	r1, r7
 800a73e:	9801      	ldr	r0, [sp, #4]
 800a740:	f001 fa0e 	bl	800bb60 <_sbrk_r>
 800a744:	0004      	movs	r4, r0
 800a746:	1c43      	adds	r3, r0, #1
 800a748:	d100      	bne.n	800a74c <_malloc_r+0x1f8>
 800a74a:	e0de      	b.n	800a90a <_malloc_r+0x3b6>
 800a74c:	4286      	cmp	r6, r0
 800a74e:	d904      	bls.n	800a75a <_malloc_r+0x206>
 800a750:	4b4a      	ldr	r3, [pc, #296]	; (800a87c <_malloc_r+0x328>)
 800a752:	9a02      	ldr	r2, [sp, #8]
 800a754:	429a      	cmp	r2, r3
 800a756:	d000      	beq.n	800a75a <_malloc_r+0x206>
 800a758:	e0d7      	b.n	800a90a <_malloc_r+0x3b6>
 800a75a:	4a4d      	ldr	r2, [pc, #308]	; (800a890 <_malloc_r+0x33c>)
 800a75c:	6813      	ldr	r3, [r2, #0]
 800a75e:	18fb      	adds	r3, r7, r3
 800a760:	6013      	str	r3, [r2, #0]
 800a762:	9a04      	ldr	r2, [sp, #16]
 800a764:	3a01      	subs	r2, #1
 800a766:	42a6      	cmp	r6, r4
 800a768:	d000      	beq.n	800a76c <_malloc_r+0x218>
 800a76a:	e097      	b.n	800a89c <_malloc_r+0x348>
 800a76c:	4216      	tst	r6, r2
 800a76e:	d000      	beq.n	800a772 <_malloc_r+0x21e>
 800a770:	e094      	b.n	800a89c <_malloc_r+0x348>
 800a772:	4b42      	ldr	r3, [pc, #264]	; (800a87c <_malloc_r+0x328>)
 800a774:	689a      	ldr	r2, [r3, #8]
 800a776:	9b03      	ldr	r3, [sp, #12]
 800a778:	19df      	adds	r7, r3, r7
 800a77a:	2301      	movs	r3, #1
 800a77c:	433b      	orrs	r3, r7
 800a77e:	6053      	str	r3, [r2, #4]
 800a780:	4b43      	ldr	r3, [pc, #268]	; (800a890 <_malloc_r+0x33c>)
 800a782:	4a44      	ldr	r2, [pc, #272]	; (800a894 <_malloc_r+0x340>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	6811      	ldr	r1, [r2, #0]
 800a788:	428b      	cmp	r3, r1
 800a78a:	d900      	bls.n	800a78e <_malloc_r+0x23a>
 800a78c:	6013      	str	r3, [r2, #0]
 800a78e:	4a42      	ldr	r2, [pc, #264]	; (800a898 <_malloc_r+0x344>)
 800a790:	6811      	ldr	r1, [r2, #0]
 800a792:	428b      	cmp	r3, r1
 800a794:	d800      	bhi.n	800a798 <_malloc_r+0x244>
 800a796:	e0b8      	b.n	800a90a <_malloc_r+0x3b6>
 800a798:	6013      	str	r3, [r2, #0]
 800a79a:	e0b6      	b.n	800a90a <_malloc_r+0x3b6>
 800a79c:	0a50      	lsrs	r0, r2, #9
 800a79e:	2804      	cmp	r0, #4
 800a7a0:	d811      	bhi.n	800a7c6 <_malloc_r+0x272>
 800a7a2:	0991      	lsrs	r1, r2, #6
 800a7a4:	3138      	adds	r1, #56	; 0x38
 800a7a6:	00cf      	lsls	r7, r1, #3
 800a7a8:	19bf      	adds	r7, r7, r6
 800a7aa:	68b8      	ldr	r0, [r7, #8]
 800a7ac:	4287      	cmp	r7, r0
 800a7ae:	d125      	bne.n	800a7fc <_malloc_r+0x2a8>
 800a7b0:	2201      	movs	r2, #1
 800a7b2:	1089      	asrs	r1, r1, #2
 800a7b4:	408a      	lsls	r2, r1
 800a7b6:	4661      	mov	r1, ip
 800a7b8:	430a      	orrs	r2, r1
 800a7ba:	6072      	str	r2, [r6, #4]
 800a7bc:	60e7      	str	r7, [r4, #12]
 800a7be:	60a0      	str	r0, [r4, #8]
 800a7c0:	60bc      	str	r4, [r7, #8]
 800a7c2:	60c4      	str	r4, [r0, #12]
 800a7c4:	e76b      	b.n	800a69e <_malloc_r+0x14a>
 800a7c6:	2814      	cmp	r0, #20
 800a7c8:	d802      	bhi.n	800a7d0 <_malloc_r+0x27c>
 800a7ca:	0001      	movs	r1, r0
 800a7cc:	315b      	adds	r1, #91	; 0x5b
 800a7ce:	e7ea      	b.n	800a7a6 <_malloc_r+0x252>
 800a7d0:	2854      	cmp	r0, #84	; 0x54
 800a7d2:	d802      	bhi.n	800a7da <_malloc_r+0x286>
 800a7d4:	0b11      	lsrs	r1, r2, #12
 800a7d6:	316e      	adds	r1, #110	; 0x6e
 800a7d8:	e7e5      	b.n	800a7a6 <_malloc_r+0x252>
 800a7da:	21aa      	movs	r1, #170	; 0xaa
 800a7dc:	0049      	lsls	r1, r1, #1
 800a7de:	4288      	cmp	r0, r1
 800a7e0:	d802      	bhi.n	800a7e8 <_malloc_r+0x294>
 800a7e2:	0bd1      	lsrs	r1, r2, #15
 800a7e4:	3177      	adds	r1, #119	; 0x77
 800a7e6:	e7de      	b.n	800a7a6 <_malloc_r+0x252>
 800a7e8:	4f26      	ldr	r7, [pc, #152]	; (800a884 <_malloc_r+0x330>)
 800a7ea:	217e      	movs	r1, #126	; 0x7e
 800a7ec:	42b8      	cmp	r0, r7
 800a7ee:	d8da      	bhi.n	800a7a6 <_malloc_r+0x252>
 800a7f0:	0c91      	lsrs	r1, r2, #18
 800a7f2:	317c      	adds	r1, #124	; 0x7c
 800a7f4:	e7d7      	b.n	800a7a6 <_malloc_r+0x252>
 800a7f6:	6880      	ldr	r0, [r0, #8]
 800a7f8:	4287      	cmp	r7, r0
 800a7fa:	d004      	beq.n	800a806 <_malloc_r+0x2b2>
 800a7fc:	2603      	movs	r6, #3
 800a7fe:	6841      	ldr	r1, [r0, #4]
 800a800:	43b1      	bics	r1, r6
 800a802:	4291      	cmp	r1, r2
 800a804:	d8f7      	bhi.n	800a7f6 <_malloc_r+0x2a2>
 800a806:	68c7      	ldr	r7, [r0, #12]
 800a808:	e7d8      	b.n	800a7bc <_malloc_r+0x268>
 800a80a:	2603      	movs	r6, #3
 800a80c:	6861      	ldr	r1, [r4, #4]
 800a80e:	43b1      	bics	r1, r6
 800a810:	9103      	str	r1, [sp, #12]
 800a812:	68e6      	ldr	r6, [r4, #12]
 800a814:	1b49      	subs	r1, r1, r5
 800a816:	290f      	cmp	r1, #15
 800a818:	dd10      	ble.n	800a83c <_malloc_r+0x2e8>
 800a81a:	2201      	movs	r2, #1
 800a81c:	1963      	adds	r3, r4, r5
 800a81e:	4315      	orrs	r5, r2
 800a820:	6065      	str	r5, [r4, #4]
 800a822:	68a5      	ldr	r5, [r4, #8]
 800a824:	430a      	orrs	r2, r1
 800a826:	60ee      	str	r6, [r5, #12]
 800a828:	60b5      	str	r5, [r6, #8]
 800a82a:	6143      	str	r3, [r0, #20]
 800a82c:	6103      	str	r3, [r0, #16]
 800a82e:	4814      	ldr	r0, [pc, #80]	; (800a880 <_malloc_r+0x32c>)
 800a830:	605a      	str	r2, [r3, #4]
 800a832:	60d8      	str	r0, [r3, #12]
 800a834:	6098      	str	r0, [r3, #8]
 800a836:	9b03      	ldr	r3, [sp, #12]
 800a838:	50e1      	str	r1, [r4, r3]
 800a83a:	e6eb      	b.n	800a614 <_malloc_r+0xc0>
 800a83c:	2900      	cmp	r1, #0
 800a83e:	db09      	blt.n	800a854 <_malloc_r+0x300>
 800a840:	9b03      	ldr	r3, [sp, #12]
 800a842:	18e1      	adds	r1, r4, r3
 800a844:	2301      	movs	r3, #1
 800a846:	684a      	ldr	r2, [r1, #4]
 800a848:	4313      	orrs	r3, r2
 800a84a:	604b      	str	r3, [r1, #4]
 800a84c:	68a3      	ldr	r3, [r4, #8]
 800a84e:	60de      	str	r6, [r3, #12]
 800a850:	60b3      	str	r3, [r6, #8]
 800a852:	e6df      	b.n	800a614 <_malloc_r+0xc0>
 800a854:	0034      	movs	r4, r6
 800a856:	e739      	b.n	800a6cc <_malloc_r+0x178>
 800a858:	2108      	movs	r1, #8
 800a85a:	4249      	negs	r1, r1
 800a85c:	448c      	add	ip, r1
 800a85e:	4661      	mov	r1, ip
 800a860:	6889      	ldr	r1, [r1, #8]
 800a862:	3b01      	subs	r3, #1
 800a864:	4561      	cmp	r1, ip
 800a866:	d100      	bne.n	800a86a <_malloc_r+0x316>
 800a868:	e73a      	b.n	800a6e0 <_malloc_r+0x18c>
 800a86a:	e740      	b.n	800a6ee <_malloc_r+0x19a>
 800a86c:	3304      	adds	r3, #4
 800a86e:	0052      	lsls	r2, r2, #1
 800a870:	420a      	tst	r2, r1
 800a872:	d0fb      	beq.n	800a86c <_malloc_r+0x318>
 800a874:	e724      	b.n	800a6c0 <_malloc_r+0x16c>
 800a876:	9b02      	ldr	r3, [sp, #8]
 800a878:	e7fa      	b.n	800a870 <_malloc_r+0x31c>
 800a87a:	46c0      	nop			; (mov r8, r8)
 800a87c:	2000002c 	.word	0x2000002c
 800a880:	20000034 	.word	0x20000034
 800a884:	00000554 	.word	0x00000554
 800a888:	20000b6c 	.word	0x20000b6c
 800a88c:	20000434 	.word	0x20000434
 800a890:	20000b3c 	.word	0x20000b3c
 800a894:	20000b64 	.word	0x20000b64
 800a898:	20000b68 	.word	0x20000b68
 800a89c:	4934      	ldr	r1, [pc, #208]	; (800a970 <_malloc_r+0x41c>)
 800a89e:	6808      	ldr	r0, [r1, #0]
 800a8a0:	3001      	adds	r0, #1
 800a8a2:	d140      	bne.n	800a926 <_malloc_r+0x3d2>
 800a8a4:	600c      	str	r4, [r1, #0]
 800a8a6:	2107      	movs	r1, #7
 800a8a8:	0026      	movs	r6, r4
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	400e      	ands	r6, r1
 800a8ae:	420c      	tst	r4, r1
 800a8b0:	d002      	beq.n	800a8b8 <_malloc_r+0x364>
 800a8b2:	3308      	adds	r3, #8
 800a8b4:	1b9b      	subs	r3, r3, r6
 800a8b6:	18e4      	adds	r4, r4, r3
 800a8b8:	19e1      	adds	r1, r4, r7
 800a8ba:	9105      	str	r1, [sp, #20]
 800a8bc:	9f05      	ldr	r7, [sp, #20]
 800a8be:	9904      	ldr	r1, [sp, #16]
 800a8c0:	4017      	ands	r7, r2
 800a8c2:	18cb      	adds	r3, r1, r3
 800a8c4:	1bdf      	subs	r7, r3, r7
 800a8c6:	4017      	ands	r7, r2
 800a8c8:	0039      	movs	r1, r7
 800a8ca:	9801      	ldr	r0, [sp, #4]
 800a8cc:	f001 f948 	bl	800bb60 <_sbrk_r>
 800a8d0:	1c43      	adds	r3, r0, #1
 800a8d2:	d107      	bne.n	800a8e4 <_malloc_r+0x390>
 800a8d4:	1e37      	subs	r7, r6, #0
 800a8d6:	9805      	ldr	r0, [sp, #20]
 800a8d8:	d004      	beq.n	800a8e4 <_malloc_r+0x390>
 800a8da:	0030      	movs	r0, r6
 800a8dc:	2700      	movs	r7, #0
 800a8de:	9b05      	ldr	r3, [sp, #20]
 800a8e0:	3808      	subs	r0, #8
 800a8e2:	1818      	adds	r0, r3, r0
 800a8e4:	4a23      	ldr	r2, [pc, #140]	; (800a974 <_malloc_r+0x420>)
 800a8e6:	1b00      	subs	r0, r0, r4
 800a8e8:	6813      	ldr	r3, [r2, #0]
 800a8ea:	19c0      	adds	r0, r0, r7
 800a8ec:	19db      	adds	r3, r3, r7
 800a8ee:	6013      	str	r3, [r2, #0]
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	4b21      	ldr	r3, [pc, #132]	; (800a978 <_malloc_r+0x424>)
 800a8f4:	9902      	ldr	r1, [sp, #8]
 800a8f6:	4310      	orrs	r0, r2
 800a8f8:	609c      	str	r4, [r3, #8]
 800a8fa:	6060      	str	r0, [r4, #4]
 800a8fc:	4299      	cmp	r1, r3
 800a8fe:	d100      	bne.n	800a902 <_malloc_r+0x3ae>
 800a900:	e73e      	b.n	800a780 <_malloc_r+0x22c>
 800a902:	9b03      	ldr	r3, [sp, #12]
 800a904:	2b0f      	cmp	r3, #15
 800a906:	d813      	bhi.n	800a930 <_malloc_r+0x3dc>
 800a908:	6062      	str	r2, [r4, #4]
 800a90a:	2203      	movs	r2, #3
 800a90c:	4b1a      	ldr	r3, [pc, #104]	; (800a978 <_malloc_r+0x424>)
 800a90e:	689b      	ldr	r3, [r3, #8]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	4393      	bics	r3, r2
 800a914:	1b59      	subs	r1, r3, r5
 800a916:	42ab      	cmp	r3, r5
 800a918:	d301      	bcc.n	800a91e <_malloc_r+0x3ca>
 800a91a:	290f      	cmp	r1, #15
 800a91c:	dc1f      	bgt.n	800a95e <_malloc_r+0x40a>
 800a91e:	9801      	ldr	r0, [sp, #4]
 800a920:	f000 f834 	bl	800a98c <__malloc_unlock>
 800a924:	e623      	b.n	800a56e <_malloc_r+0x1a>
 800a926:	4913      	ldr	r1, [pc, #76]	; (800a974 <_malloc_r+0x420>)
 800a928:	1ba6      	subs	r6, r4, r6
 800a92a:	18f6      	adds	r6, r6, r3
 800a92c:	600e      	str	r6, [r1, #0]
 800a92e:	e7ba      	b.n	800a8a6 <_malloc_r+0x352>
 800a930:	2107      	movs	r1, #7
 800a932:	9b03      	ldr	r3, [sp, #12]
 800a934:	3b0c      	subs	r3, #12
 800a936:	438b      	bics	r3, r1
 800a938:	9902      	ldr	r1, [sp, #8]
 800a93a:	6849      	ldr	r1, [r1, #4]
 800a93c:	400a      	ands	r2, r1
 800a93e:	9902      	ldr	r1, [sp, #8]
 800a940:	431a      	orrs	r2, r3
 800a942:	604a      	str	r2, [r1, #4]
 800a944:	18ca      	adds	r2, r1, r3
 800a946:	2105      	movs	r1, #5
 800a948:	6051      	str	r1, [r2, #4]
 800a94a:	6091      	str	r1, [r2, #8]
 800a94c:	2b0f      	cmp	r3, #15
 800a94e:	d800      	bhi.n	800a952 <_malloc_r+0x3fe>
 800a950:	e716      	b.n	800a780 <_malloc_r+0x22c>
 800a952:	9902      	ldr	r1, [sp, #8]
 800a954:	9801      	ldr	r0, [sp, #4]
 800a956:	3108      	adds	r1, #8
 800a958:	f001 f9dc 	bl	800bd14 <_free_r>
 800a95c:	e710      	b.n	800a780 <_malloc_r+0x22c>
 800a95e:	2201      	movs	r2, #1
 800a960:	0013      	movs	r3, r2
 800a962:	4805      	ldr	r0, [pc, #20]	; (800a978 <_malloc_r+0x424>)
 800a964:	432b      	orrs	r3, r5
 800a966:	6884      	ldr	r4, [r0, #8]
 800a968:	6063      	str	r3, [r4, #4]
 800a96a:	1963      	adds	r3, r4, r5
 800a96c:	6083      	str	r3, [r0, #8]
 800a96e:	e623      	b.n	800a5b8 <_malloc_r+0x64>
 800a970:	20000434 	.word	0x20000434
 800a974:	20000b3c 	.word	0x20000b3c
 800a978:	2000002c 	.word	0x2000002c

0800a97c <__malloc_lock>:
 800a97c:	b510      	push	{r4, lr}
 800a97e:	4802      	ldr	r0, [pc, #8]	; (800a988 <__malloc_lock+0xc>)
 800a980:	f001 f940 	bl	800bc04 <__retarget_lock_acquire_recursive>
 800a984:	bd10      	pop	{r4, pc}
 800a986:	46c0      	nop			; (mov r8, r8)
 800a988:	20000cb1 	.word	0x20000cb1

0800a98c <__malloc_unlock>:
 800a98c:	b510      	push	{r4, lr}
 800a98e:	4802      	ldr	r0, [pc, #8]	; (800a998 <__malloc_unlock+0xc>)
 800a990:	f001 f939 	bl	800bc06 <__retarget_lock_release_recursive>
 800a994:	bd10      	pop	{r4, pc}
 800a996:	46c0      	nop			; (mov r8, r8)
 800a998:	20000cb1 	.word	0x20000cb1

0800a99c <sulp>:
 800a99c:	b570      	push	{r4, r5, r6, lr}
 800a99e:	0016      	movs	r6, r2
 800a9a0:	000d      	movs	r5, r1
 800a9a2:	f002 f90d 	bl	800cbc0 <__ulp>
 800a9a6:	2e00      	cmp	r6, #0
 800a9a8:	d00d      	beq.n	800a9c6 <sulp+0x2a>
 800a9aa:	236b      	movs	r3, #107	; 0x6b
 800a9ac:	006a      	lsls	r2, r5, #1
 800a9ae:	0d52      	lsrs	r2, r2, #21
 800a9b0:	1a9b      	subs	r3, r3, r2
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	dd07      	ble.n	800a9c6 <sulp+0x2a>
 800a9b6:	2400      	movs	r4, #0
 800a9b8:	4a03      	ldr	r2, [pc, #12]	; (800a9c8 <sulp+0x2c>)
 800a9ba:	051b      	lsls	r3, r3, #20
 800a9bc:	189d      	adds	r5, r3, r2
 800a9be:	002b      	movs	r3, r5
 800a9c0:	0022      	movs	r2, r4
 800a9c2:	f7f6 fe53 	bl	800166c <__aeabi_dmul>
 800a9c6:	bd70      	pop	{r4, r5, r6, pc}
 800a9c8:	3ff00000 	.word	0x3ff00000

0800a9cc <_strtod_l>:
 800a9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9ce:	b0a1      	sub	sp, #132	; 0x84
 800a9d0:	9219      	str	r2, [sp, #100]	; 0x64
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	2600      	movs	r6, #0
 800a9d6:	2700      	movs	r7, #0
 800a9d8:	9004      	str	r0, [sp, #16]
 800a9da:	9107      	str	r1, [sp, #28]
 800a9dc:	921c      	str	r2, [sp, #112]	; 0x70
 800a9de:	911b      	str	r1, [sp, #108]	; 0x6c
 800a9e0:	780a      	ldrb	r2, [r1, #0]
 800a9e2:	2a2b      	cmp	r2, #43	; 0x2b
 800a9e4:	d055      	beq.n	800aa92 <_strtod_l+0xc6>
 800a9e6:	d841      	bhi.n	800aa6c <_strtod_l+0xa0>
 800a9e8:	2a0d      	cmp	r2, #13
 800a9ea:	d83b      	bhi.n	800aa64 <_strtod_l+0x98>
 800a9ec:	2a08      	cmp	r2, #8
 800a9ee:	d83b      	bhi.n	800aa68 <_strtod_l+0x9c>
 800a9f0:	2a00      	cmp	r2, #0
 800a9f2:	d044      	beq.n	800aa7e <_strtod_l+0xb2>
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	920f      	str	r2, [sp, #60]	; 0x3c
 800a9f8:	2100      	movs	r1, #0
 800a9fa:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a9fc:	9109      	str	r1, [sp, #36]	; 0x24
 800a9fe:	782a      	ldrb	r2, [r5, #0]
 800aa00:	2a30      	cmp	r2, #48	; 0x30
 800aa02:	d000      	beq.n	800aa06 <_strtod_l+0x3a>
 800aa04:	e085      	b.n	800ab12 <_strtod_l+0x146>
 800aa06:	786a      	ldrb	r2, [r5, #1]
 800aa08:	3120      	adds	r1, #32
 800aa0a:	438a      	bics	r2, r1
 800aa0c:	2a58      	cmp	r2, #88	; 0x58
 800aa0e:	d000      	beq.n	800aa12 <_strtod_l+0x46>
 800aa10:	e075      	b.n	800aafe <_strtod_l+0x132>
 800aa12:	9302      	str	r3, [sp, #8]
 800aa14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa16:	4a97      	ldr	r2, [pc, #604]	; (800ac74 <_strtod_l+0x2a8>)
 800aa18:	9301      	str	r3, [sp, #4]
 800aa1a:	ab1c      	add	r3, sp, #112	; 0x70
 800aa1c:	9300      	str	r3, [sp, #0]
 800aa1e:	9804      	ldr	r0, [sp, #16]
 800aa20:	ab1d      	add	r3, sp, #116	; 0x74
 800aa22:	a91b      	add	r1, sp, #108	; 0x6c
 800aa24:	f001 fa92 	bl	800bf4c <__gethex>
 800aa28:	230f      	movs	r3, #15
 800aa2a:	0002      	movs	r2, r0
 800aa2c:	401a      	ands	r2, r3
 800aa2e:	0004      	movs	r4, r0
 800aa30:	9205      	str	r2, [sp, #20]
 800aa32:	4218      	tst	r0, r3
 800aa34:	d005      	beq.n	800aa42 <_strtod_l+0x76>
 800aa36:	2a06      	cmp	r2, #6
 800aa38:	d12d      	bne.n	800aa96 <_strtod_l+0xca>
 800aa3a:	1c6b      	adds	r3, r5, #1
 800aa3c:	931b      	str	r3, [sp, #108]	; 0x6c
 800aa3e:	2300      	movs	r3, #0
 800aa40:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa42:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d002      	beq.n	800aa4e <_strtod_l+0x82>
 800aa48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aa4a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800aa4c:	6013      	str	r3, [r2, #0]
 800aa4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d01b      	beq.n	800aa8c <_strtod_l+0xc0>
 800aa54:	2380      	movs	r3, #128	; 0x80
 800aa56:	0032      	movs	r2, r6
 800aa58:	061b      	lsls	r3, r3, #24
 800aa5a:	18fb      	adds	r3, r7, r3
 800aa5c:	0010      	movs	r0, r2
 800aa5e:	0019      	movs	r1, r3
 800aa60:	b021      	add	sp, #132	; 0x84
 800aa62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa64:	2a20      	cmp	r2, #32
 800aa66:	d1c5      	bne.n	800a9f4 <_strtod_l+0x28>
 800aa68:	3101      	adds	r1, #1
 800aa6a:	e7b8      	b.n	800a9de <_strtod_l+0x12>
 800aa6c:	2a2d      	cmp	r2, #45	; 0x2d
 800aa6e:	d1c1      	bne.n	800a9f4 <_strtod_l+0x28>
 800aa70:	3a2c      	subs	r2, #44	; 0x2c
 800aa72:	920f      	str	r2, [sp, #60]	; 0x3c
 800aa74:	1c4a      	adds	r2, r1, #1
 800aa76:	921b      	str	r2, [sp, #108]	; 0x6c
 800aa78:	784a      	ldrb	r2, [r1, #1]
 800aa7a:	2a00      	cmp	r2, #0
 800aa7c:	d1bc      	bne.n	800a9f8 <_strtod_l+0x2c>
 800aa7e:	9b07      	ldr	r3, [sp, #28]
 800aa80:	931b      	str	r3, [sp, #108]	; 0x6c
 800aa82:	2300      	movs	r3, #0
 800aa84:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa86:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d1dd      	bne.n	800aa48 <_strtod_l+0x7c>
 800aa8c:	0032      	movs	r2, r6
 800aa8e:	003b      	movs	r3, r7
 800aa90:	e7e4      	b.n	800aa5c <_strtod_l+0x90>
 800aa92:	2200      	movs	r2, #0
 800aa94:	e7ed      	b.n	800aa72 <_strtod_l+0xa6>
 800aa96:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800aa98:	2a00      	cmp	r2, #0
 800aa9a:	d007      	beq.n	800aaac <_strtod_l+0xe0>
 800aa9c:	2135      	movs	r1, #53	; 0x35
 800aa9e:	a81e      	add	r0, sp, #120	; 0x78
 800aaa0:	f002 f97f 	bl	800cda2 <__copybits>
 800aaa4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aaa6:	9804      	ldr	r0, [sp, #16]
 800aaa8:	f001 fd7c 	bl	800c5a4 <_Bfree>
 800aaac:	9805      	ldr	r0, [sp, #20]
 800aaae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aab0:	3801      	subs	r0, #1
 800aab2:	2804      	cmp	r0, #4
 800aab4:	d806      	bhi.n	800aac4 <_strtod_l+0xf8>
 800aab6:	f7f5 fb2d 	bl	8000114 <__gnu_thumb1_case_uqi>
 800aaba:	0312      	.short	0x0312
 800aabc:	1e1c      	.short	0x1e1c
 800aabe:	12          	.byte	0x12
 800aabf:	00          	.byte	0x00
 800aac0:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800aac2:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800aac4:	05e4      	lsls	r4, r4, #23
 800aac6:	d502      	bpl.n	800aace <_strtod_l+0x102>
 800aac8:	2380      	movs	r3, #128	; 0x80
 800aaca:	061b      	lsls	r3, r3, #24
 800aacc:	431f      	orrs	r7, r3
 800aace:	4b6a      	ldr	r3, [pc, #424]	; (800ac78 <_strtod_l+0x2ac>)
 800aad0:	423b      	tst	r3, r7
 800aad2:	d1b6      	bne.n	800aa42 <_strtod_l+0x76>
 800aad4:	f001 f86a 	bl	800bbac <__errno>
 800aad8:	2322      	movs	r3, #34	; 0x22
 800aada:	6003      	str	r3, [r0, #0]
 800aadc:	e7b1      	b.n	800aa42 <_strtod_l+0x76>
 800aade:	4967      	ldr	r1, [pc, #412]	; (800ac7c <_strtod_l+0x2b0>)
 800aae0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800aae2:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800aae4:	400a      	ands	r2, r1
 800aae6:	4966      	ldr	r1, [pc, #408]	; (800ac80 <_strtod_l+0x2b4>)
 800aae8:	185b      	adds	r3, r3, r1
 800aaea:	051b      	lsls	r3, r3, #20
 800aaec:	431a      	orrs	r2, r3
 800aaee:	0017      	movs	r7, r2
 800aaf0:	e7e8      	b.n	800aac4 <_strtod_l+0xf8>
 800aaf2:	4f61      	ldr	r7, [pc, #388]	; (800ac78 <_strtod_l+0x2ac>)
 800aaf4:	e7e6      	b.n	800aac4 <_strtod_l+0xf8>
 800aaf6:	2601      	movs	r6, #1
 800aaf8:	4f62      	ldr	r7, [pc, #392]	; (800ac84 <_strtod_l+0x2b8>)
 800aafa:	4276      	negs	r6, r6
 800aafc:	e7e2      	b.n	800aac4 <_strtod_l+0xf8>
 800aafe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab00:	1c5a      	adds	r2, r3, #1
 800ab02:	921b      	str	r2, [sp, #108]	; 0x6c
 800ab04:	785b      	ldrb	r3, [r3, #1]
 800ab06:	2b30      	cmp	r3, #48	; 0x30
 800ab08:	d0f9      	beq.n	800aafe <_strtod_l+0x132>
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d099      	beq.n	800aa42 <_strtod_l+0x76>
 800ab0e:	2301      	movs	r3, #1
 800ab10:	9309      	str	r3, [sp, #36]	; 0x24
 800ab12:	2500      	movs	r5, #0
 800ab14:	220a      	movs	r2, #10
 800ab16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab18:	950d      	str	r5, [sp, #52]	; 0x34
 800ab1a:	9310      	str	r3, [sp, #64]	; 0x40
 800ab1c:	9508      	str	r5, [sp, #32]
 800ab1e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800ab20:	7804      	ldrb	r4, [r0, #0]
 800ab22:	0023      	movs	r3, r4
 800ab24:	3b30      	subs	r3, #48	; 0x30
 800ab26:	b2d9      	uxtb	r1, r3
 800ab28:	2909      	cmp	r1, #9
 800ab2a:	d927      	bls.n	800ab7c <_strtod_l+0x1b0>
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	4956      	ldr	r1, [pc, #344]	; (800ac88 <_strtod_l+0x2bc>)
 800ab30:	f000 ff98 	bl	800ba64 <strncmp>
 800ab34:	2800      	cmp	r0, #0
 800ab36:	d031      	beq.n	800ab9c <_strtod_l+0x1d0>
 800ab38:	2000      	movs	r0, #0
 800ab3a:	0023      	movs	r3, r4
 800ab3c:	4684      	mov	ip, r0
 800ab3e:	9a08      	ldr	r2, [sp, #32]
 800ab40:	900c      	str	r0, [sp, #48]	; 0x30
 800ab42:	9205      	str	r2, [sp, #20]
 800ab44:	2220      	movs	r2, #32
 800ab46:	0019      	movs	r1, r3
 800ab48:	4391      	bics	r1, r2
 800ab4a:	000a      	movs	r2, r1
 800ab4c:	2100      	movs	r1, #0
 800ab4e:	9106      	str	r1, [sp, #24]
 800ab50:	2a45      	cmp	r2, #69	; 0x45
 800ab52:	d000      	beq.n	800ab56 <_strtod_l+0x18a>
 800ab54:	e0c2      	b.n	800acdc <_strtod_l+0x310>
 800ab56:	9b05      	ldr	r3, [sp, #20]
 800ab58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab5a:	4303      	orrs	r3, r0
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	428b      	cmp	r3, r1
 800ab60:	d08d      	beq.n	800aa7e <_strtod_l+0xb2>
 800ab62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab64:	9307      	str	r3, [sp, #28]
 800ab66:	3301      	adds	r3, #1
 800ab68:	931b      	str	r3, [sp, #108]	; 0x6c
 800ab6a:	9b07      	ldr	r3, [sp, #28]
 800ab6c:	785b      	ldrb	r3, [r3, #1]
 800ab6e:	2b2b      	cmp	r3, #43	; 0x2b
 800ab70:	d071      	beq.n	800ac56 <_strtod_l+0x28a>
 800ab72:	000c      	movs	r4, r1
 800ab74:	2b2d      	cmp	r3, #45	; 0x2d
 800ab76:	d174      	bne.n	800ac62 <_strtod_l+0x296>
 800ab78:	2401      	movs	r4, #1
 800ab7a:	e06d      	b.n	800ac58 <_strtod_l+0x28c>
 800ab7c:	9908      	ldr	r1, [sp, #32]
 800ab7e:	2908      	cmp	r1, #8
 800ab80:	dc09      	bgt.n	800ab96 <_strtod_l+0x1ca>
 800ab82:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ab84:	4351      	muls	r1, r2
 800ab86:	185b      	adds	r3, r3, r1
 800ab88:	930d      	str	r3, [sp, #52]	; 0x34
 800ab8a:	9b08      	ldr	r3, [sp, #32]
 800ab8c:	3001      	adds	r0, #1
 800ab8e:	3301      	adds	r3, #1
 800ab90:	9308      	str	r3, [sp, #32]
 800ab92:	901b      	str	r0, [sp, #108]	; 0x6c
 800ab94:	e7c3      	b.n	800ab1e <_strtod_l+0x152>
 800ab96:	4355      	muls	r5, r2
 800ab98:	195d      	adds	r5, r3, r5
 800ab9a:	e7f6      	b.n	800ab8a <_strtod_l+0x1be>
 800ab9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab9e:	1c5a      	adds	r2, r3, #1
 800aba0:	921b      	str	r2, [sp, #108]	; 0x6c
 800aba2:	9a08      	ldr	r2, [sp, #32]
 800aba4:	785b      	ldrb	r3, [r3, #1]
 800aba6:	2a00      	cmp	r2, #0
 800aba8:	d03a      	beq.n	800ac20 <_strtod_l+0x254>
 800abaa:	900c      	str	r0, [sp, #48]	; 0x30
 800abac:	9205      	str	r2, [sp, #20]
 800abae:	001a      	movs	r2, r3
 800abb0:	3a30      	subs	r2, #48	; 0x30
 800abb2:	2a09      	cmp	r2, #9
 800abb4:	d912      	bls.n	800abdc <_strtod_l+0x210>
 800abb6:	2201      	movs	r2, #1
 800abb8:	4694      	mov	ip, r2
 800abba:	e7c3      	b.n	800ab44 <_strtod_l+0x178>
 800abbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800abbe:	3001      	adds	r0, #1
 800abc0:	1c5a      	adds	r2, r3, #1
 800abc2:	921b      	str	r2, [sp, #108]	; 0x6c
 800abc4:	785b      	ldrb	r3, [r3, #1]
 800abc6:	2b30      	cmp	r3, #48	; 0x30
 800abc8:	d0f8      	beq.n	800abbc <_strtod_l+0x1f0>
 800abca:	001a      	movs	r2, r3
 800abcc:	3a31      	subs	r2, #49	; 0x31
 800abce:	2a08      	cmp	r2, #8
 800abd0:	d83c      	bhi.n	800ac4c <_strtod_l+0x280>
 800abd2:	900c      	str	r0, [sp, #48]	; 0x30
 800abd4:	2000      	movs	r0, #0
 800abd6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800abd8:	9005      	str	r0, [sp, #20]
 800abda:	9210      	str	r2, [sp, #64]	; 0x40
 800abdc:	001a      	movs	r2, r3
 800abde:	1c41      	adds	r1, r0, #1
 800abe0:	3a30      	subs	r2, #48	; 0x30
 800abe2:	2b30      	cmp	r3, #48	; 0x30
 800abe4:	d016      	beq.n	800ac14 <_strtod_l+0x248>
 800abe6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800abe8:	185b      	adds	r3, r3, r1
 800abea:	930c      	str	r3, [sp, #48]	; 0x30
 800abec:	9b05      	ldr	r3, [sp, #20]
 800abee:	210a      	movs	r1, #10
 800abf0:	469c      	mov	ip, r3
 800abf2:	4484      	add	ip, r0
 800abf4:	4563      	cmp	r3, ip
 800abf6:	d115      	bne.n	800ac24 <_strtod_l+0x258>
 800abf8:	9905      	ldr	r1, [sp, #20]
 800abfa:	9b05      	ldr	r3, [sp, #20]
 800abfc:	3101      	adds	r1, #1
 800abfe:	1809      	adds	r1, r1, r0
 800ac00:	181b      	adds	r3, r3, r0
 800ac02:	9105      	str	r1, [sp, #20]
 800ac04:	2b08      	cmp	r3, #8
 800ac06:	dc19      	bgt.n	800ac3c <_strtod_l+0x270>
 800ac08:	230a      	movs	r3, #10
 800ac0a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ac0c:	434b      	muls	r3, r1
 800ac0e:	2100      	movs	r1, #0
 800ac10:	18d3      	adds	r3, r2, r3
 800ac12:	930d      	str	r3, [sp, #52]	; 0x34
 800ac14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac16:	0008      	movs	r0, r1
 800ac18:	1c5a      	adds	r2, r3, #1
 800ac1a:	921b      	str	r2, [sp, #108]	; 0x6c
 800ac1c:	785b      	ldrb	r3, [r3, #1]
 800ac1e:	e7c6      	b.n	800abae <_strtod_l+0x1e2>
 800ac20:	9808      	ldr	r0, [sp, #32]
 800ac22:	e7d0      	b.n	800abc6 <_strtod_l+0x1fa>
 800ac24:	1c5c      	adds	r4, r3, #1
 800ac26:	2b08      	cmp	r3, #8
 800ac28:	dc04      	bgt.n	800ac34 <_strtod_l+0x268>
 800ac2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac2c:	434b      	muls	r3, r1
 800ac2e:	930d      	str	r3, [sp, #52]	; 0x34
 800ac30:	0023      	movs	r3, r4
 800ac32:	e7df      	b.n	800abf4 <_strtod_l+0x228>
 800ac34:	2c10      	cmp	r4, #16
 800ac36:	dcfb      	bgt.n	800ac30 <_strtod_l+0x264>
 800ac38:	434d      	muls	r5, r1
 800ac3a:	e7f9      	b.n	800ac30 <_strtod_l+0x264>
 800ac3c:	9b05      	ldr	r3, [sp, #20]
 800ac3e:	2100      	movs	r1, #0
 800ac40:	2b10      	cmp	r3, #16
 800ac42:	dce7      	bgt.n	800ac14 <_strtod_l+0x248>
 800ac44:	230a      	movs	r3, #10
 800ac46:	435d      	muls	r5, r3
 800ac48:	1955      	adds	r5, r2, r5
 800ac4a:	e7e3      	b.n	800ac14 <_strtod_l+0x248>
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	920c      	str	r2, [sp, #48]	; 0x30
 800ac50:	9205      	str	r2, [sp, #20]
 800ac52:	3201      	adds	r2, #1
 800ac54:	e7b0      	b.n	800abb8 <_strtod_l+0x1ec>
 800ac56:	2400      	movs	r4, #0
 800ac58:	9b07      	ldr	r3, [sp, #28]
 800ac5a:	3302      	adds	r3, #2
 800ac5c:	931b      	str	r3, [sp, #108]	; 0x6c
 800ac5e:	9b07      	ldr	r3, [sp, #28]
 800ac60:	789b      	ldrb	r3, [r3, #2]
 800ac62:	001a      	movs	r2, r3
 800ac64:	3a30      	subs	r2, #48	; 0x30
 800ac66:	2a09      	cmp	r2, #9
 800ac68:	d914      	bls.n	800ac94 <_strtod_l+0x2c8>
 800ac6a:	9a07      	ldr	r2, [sp, #28]
 800ac6c:	921b      	str	r2, [sp, #108]	; 0x6c
 800ac6e:	2200      	movs	r2, #0
 800ac70:	e033      	b.n	800acda <_strtod_l+0x30e>
 800ac72:	46c0      	nop			; (mov r8, r8)
 800ac74:	08013f3c 	.word	0x08013f3c
 800ac78:	7ff00000 	.word	0x7ff00000
 800ac7c:	ffefffff 	.word	0xffefffff
 800ac80:	00000433 	.word	0x00000433
 800ac84:	7fffffff 	.word	0x7fffffff
 800ac88:	08013f38 	.word	0x08013f38
 800ac8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac8e:	1c5a      	adds	r2, r3, #1
 800ac90:	921b      	str	r2, [sp, #108]	; 0x6c
 800ac92:	785b      	ldrb	r3, [r3, #1]
 800ac94:	2b30      	cmp	r3, #48	; 0x30
 800ac96:	d0f9      	beq.n	800ac8c <_strtod_l+0x2c0>
 800ac98:	2200      	movs	r2, #0
 800ac9a:	9206      	str	r2, [sp, #24]
 800ac9c:	001a      	movs	r2, r3
 800ac9e:	3a31      	subs	r2, #49	; 0x31
 800aca0:	2a08      	cmp	r2, #8
 800aca2:	d81b      	bhi.n	800acdc <_strtod_l+0x310>
 800aca4:	3b30      	subs	r3, #48	; 0x30
 800aca6:	930e      	str	r3, [sp, #56]	; 0x38
 800aca8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800acaa:	9306      	str	r3, [sp, #24]
 800acac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800acae:	1c59      	adds	r1, r3, #1
 800acb0:	911b      	str	r1, [sp, #108]	; 0x6c
 800acb2:	785b      	ldrb	r3, [r3, #1]
 800acb4:	001a      	movs	r2, r3
 800acb6:	3a30      	subs	r2, #48	; 0x30
 800acb8:	2a09      	cmp	r2, #9
 800acba:	d93a      	bls.n	800ad32 <_strtod_l+0x366>
 800acbc:	9a06      	ldr	r2, [sp, #24]
 800acbe:	1a8a      	subs	r2, r1, r2
 800acc0:	49b2      	ldr	r1, [pc, #712]	; (800af8c <_strtod_l+0x5c0>)
 800acc2:	9106      	str	r1, [sp, #24]
 800acc4:	2a08      	cmp	r2, #8
 800acc6:	dc04      	bgt.n	800acd2 <_strtod_l+0x306>
 800acc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acca:	9206      	str	r2, [sp, #24]
 800accc:	428a      	cmp	r2, r1
 800acce:	dd00      	ble.n	800acd2 <_strtod_l+0x306>
 800acd0:	9106      	str	r1, [sp, #24]
 800acd2:	2c00      	cmp	r4, #0
 800acd4:	d002      	beq.n	800acdc <_strtod_l+0x310>
 800acd6:	9a06      	ldr	r2, [sp, #24]
 800acd8:	4252      	negs	r2, r2
 800acda:	9206      	str	r2, [sp, #24]
 800acdc:	9a05      	ldr	r2, [sp, #20]
 800acde:	2a00      	cmp	r2, #0
 800ace0:	d14d      	bne.n	800ad7e <_strtod_l+0x3b2>
 800ace2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ace4:	4310      	orrs	r0, r2
 800ace6:	d000      	beq.n	800acea <_strtod_l+0x31e>
 800ace8:	e6ab      	b.n	800aa42 <_strtod_l+0x76>
 800acea:	4662      	mov	r2, ip
 800acec:	2a00      	cmp	r2, #0
 800acee:	d000      	beq.n	800acf2 <_strtod_l+0x326>
 800acf0:	e6c5      	b.n	800aa7e <_strtod_l+0xb2>
 800acf2:	2b69      	cmp	r3, #105	; 0x69
 800acf4:	d027      	beq.n	800ad46 <_strtod_l+0x37a>
 800acf6:	dc23      	bgt.n	800ad40 <_strtod_l+0x374>
 800acf8:	2b49      	cmp	r3, #73	; 0x49
 800acfa:	d024      	beq.n	800ad46 <_strtod_l+0x37a>
 800acfc:	2b4e      	cmp	r3, #78	; 0x4e
 800acfe:	d000      	beq.n	800ad02 <_strtod_l+0x336>
 800ad00:	e6bd      	b.n	800aa7e <_strtod_l+0xb2>
 800ad02:	49a3      	ldr	r1, [pc, #652]	; (800af90 <_strtod_l+0x5c4>)
 800ad04:	a81b      	add	r0, sp, #108	; 0x6c
 800ad06:	f001 fb57 	bl	800c3b8 <__match>
 800ad0a:	2800      	cmp	r0, #0
 800ad0c:	d100      	bne.n	800ad10 <_strtod_l+0x344>
 800ad0e:	e6b6      	b.n	800aa7e <_strtod_l+0xb2>
 800ad10:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	2b28      	cmp	r3, #40	; 0x28
 800ad16:	d12c      	bne.n	800ad72 <_strtod_l+0x3a6>
 800ad18:	499e      	ldr	r1, [pc, #632]	; (800af94 <_strtod_l+0x5c8>)
 800ad1a:	aa1e      	add	r2, sp, #120	; 0x78
 800ad1c:	a81b      	add	r0, sp, #108	; 0x6c
 800ad1e:	f001 fb5f 	bl	800c3e0 <__hexnan>
 800ad22:	2805      	cmp	r0, #5
 800ad24:	d125      	bne.n	800ad72 <_strtod_l+0x3a6>
 800ad26:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ad28:	4a9b      	ldr	r2, [pc, #620]	; (800af98 <_strtod_l+0x5cc>)
 800ad2a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800ad2c:	431a      	orrs	r2, r3
 800ad2e:	0017      	movs	r7, r2
 800ad30:	e687      	b.n	800aa42 <_strtod_l+0x76>
 800ad32:	220a      	movs	r2, #10
 800ad34:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ad36:	434a      	muls	r2, r1
 800ad38:	18d2      	adds	r2, r2, r3
 800ad3a:	3a30      	subs	r2, #48	; 0x30
 800ad3c:	920e      	str	r2, [sp, #56]	; 0x38
 800ad3e:	e7b5      	b.n	800acac <_strtod_l+0x2e0>
 800ad40:	2b6e      	cmp	r3, #110	; 0x6e
 800ad42:	d0de      	beq.n	800ad02 <_strtod_l+0x336>
 800ad44:	e69b      	b.n	800aa7e <_strtod_l+0xb2>
 800ad46:	4995      	ldr	r1, [pc, #596]	; (800af9c <_strtod_l+0x5d0>)
 800ad48:	a81b      	add	r0, sp, #108	; 0x6c
 800ad4a:	f001 fb35 	bl	800c3b8 <__match>
 800ad4e:	2800      	cmp	r0, #0
 800ad50:	d100      	bne.n	800ad54 <_strtod_l+0x388>
 800ad52:	e694      	b.n	800aa7e <_strtod_l+0xb2>
 800ad54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ad56:	4992      	ldr	r1, [pc, #584]	; (800afa0 <_strtod_l+0x5d4>)
 800ad58:	3b01      	subs	r3, #1
 800ad5a:	a81b      	add	r0, sp, #108	; 0x6c
 800ad5c:	931b      	str	r3, [sp, #108]	; 0x6c
 800ad5e:	f001 fb2b 	bl	800c3b8 <__match>
 800ad62:	2800      	cmp	r0, #0
 800ad64:	d102      	bne.n	800ad6c <_strtod_l+0x3a0>
 800ad66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ad68:	3301      	adds	r3, #1
 800ad6a:	931b      	str	r3, [sp, #108]	; 0x6c
 800ad6c:	2600      	movs	r6, #0
 800ad6e:	4f8a      	ldr	r7, [pc, #552]	; (800af98 <_strtod_l+0x5cc>)
 800ad70:	e667      	b.n	800aa42 <_strtod_l+0x76>
 800ad72:	488c      	ldr	r0, [pc, #560]	; (800afa4 <_strtod_l+0x5d8>)
 800ad74:	f000 ff5c 	bl	800bc30 <nan>
 800ad78:	0006      	movs	r6, r0
 800ad7a:	000f      	movs	r7, r1
 800ad7c:	e661      	b.n	800aa42 <_strtod_l+0x76>
 800ad7e:	9b06      	ldr	r3, [sp, #24]
 800ad80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad82:	1a9b      	subs	r3, r3, r2
 800ad84:	9309      	str	r3, [sp, #36]	; 0x24
 800ad86:	9b08      	ldr	r3, [sp, #32]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d101      	bne.n	800ad90 <_strtod_l+0x3c4>
 800ad8c:	9b05      	ldr	r3, [sp, #20]
 800ad8e:	9308      	str	r3, [sp, #32]
 800ad90:	9c05      	ldr	r4, [sp, #20]
 800ad92:	2c10      	cmp	r4, #16
 800ad94:	dd00      	ble.n	800ad98 <_strtod_l+0x3cc>
 800ad96:	2410      	movs	r4, #16
 800ad98:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ad9a:	f7f7 fb2f 	bl	80023fc <__aeabi_ui2d>
 800ad9e:	9b05      	ldr	r3, [sp, #20]
 800ada0:	0006      	movs	r6, r0
 800ada2:	000f      	movs	r7, r1
 800ada4:	2b09      	cmp	r3, #9
 800ada6:	dd15      	ble.n	800add4 <_strtod_l+0x408>
 800ada8:	0022      	movs	r2, r4
 800adaa:	4b7f      	ldr	r3, [pc, #508]	; (800afa8 <_strtod_l+0x5dc>)
 800adac:	3a09      	subs	r2, #9
 800adae:	00d2      	lsls	r2, r2, #3
 800adb0:	189b      	adds	r3, r3, r2
 800adb2:	681a      	ldr	r2, [r3, #0]
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	f7f6 fc59 	bl	800166c <__aeabi_dmul>
 800adba:	0006      	movs	r6, r0
 800adbc:	0028      	movs	r0, r5
 800adbe:	000f      	movs	r7, r1
 800adc0:	f7f7 fb1c 	bl	80023fc <__aeabi_ui2d>
 800adc4:	0002      	movs	r2, r0
 800adc6:	000b      	movs	r3, r1
 800adc8:	0030      	movs	r0, r6
 800adca:	0039      	movs	r1, r7
 800adcc:	f7f5 fcf4 	bl	80007b8 <__aeabi_dadd>
 800add0:	0006      	movs	r6, r0
 800add2:	000f      	movs	r7, r1
 800add4:	9b05      	ldr	r3, [sp, #20]
 800add6:	2b0f      	cmp	r3, #15
 800add8:	dc39      	bgt.n	800ae4e <_strtod_l+0x482>
 800adda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800addc:	2b00      	cmp	r3, #0
 800adde:	d100      	bne.n	800ade2 <_strtod_l+0x416>
 800ade0:	e62f      	b.n	800aa42 <_strtod_l+0x76>
 800ade2:	dd24      	ble.n	800ae2e <_strtod_l+0x462>
 800ade4:	2b16      	cmp	r3, #22
 800ade6:	dc09      	bgt.n	800adfc <_strtod_l+0x430>
 800ade8:	496f      	ldr	r1, [pc, #444]	; (800afa8 <_strtod_l+0x5dc>)
 800adea:	00db      	lsls	r3, r3, #3
 800adec:	18c9      	adds	r1, r1, r3
 800adee:	0032      	movs	r2, r6
 800adf0:	6808      	ldr	r0, [r1, #0]
 800adf2:	6849      	ldr	r1, [r1, #4]
 800adf4:	003b      	movs	r3, r7
 800adf6:	f7f6 fc39 	bl	800166c <__aeabi_dmul>
 800adfa:	e7bd      	b.n	800ad78 <_strtod_l+0x3ac>
 800adfc:	2325      	movs	r3, #37	; 0x25
 800adfe:	9a05      	ldr	r2, [sp, #20]
 800ae00:	1a9b      	subs	r3, r3, r2
 800ae02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae04:	4293      	cmp	r3, r2
 800ae06:	db22      	blt.n	800ae4e <_strtod_l+0x482>
 800ae08:	240f      	movs	r4, #15
 800ae0a:	9b05      	ldr	r3, [sp, #20]
 800ae0c:	4d66      	ldr	r5, [pc, #408]	; (800afa8 <_strtod_l+0x5dc>)
 800ae0e:	1ae4      	subs	r4, r4, r3
 800ae10:	00e1      	lsls	r1, r4, #3
 800ae12:	1869      	adds	r1, r5, r1
 800ae14:	0032      	movs	r2, r6
 800ae16:	6808      	ldr	r0, [r1, #0]
 800ae18:	6849      	ldr	r1, [r1, #4]
 800ae1a:	003b      	movs	r3, r7
 800ae1c:	f7f6 fc26 	bl	800166c <__aeabi_dmul>
 800ae20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae22:	1b1c      	subs	r4, r3, r4
 800ae24:	00e4      	lsls	r4, r4, #3
 800ae26:	192d      	adds	r5, r5, r4
 800ae28:	682a      	ldr	r2, [r5, #0]
 800ae2a:	686b      	ldr	r3, [r5, #4]
 800ae2c:	e7e3      	b.n	800adf6 <_strtod_l+0x42a>
 800ae2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae30:	3316      	adds	r3, #22
 800ae32:	db0c      	blt.n	800ae4e <_strtod_l+0x482>
 800ae34:	9906      	ldr	r1, [sp, #24]
 800ae36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae38:	4b5b      	ldr	r3, [pc, #364]	; (800afa8 <_strtod_l+0x5dc>)
 800ae3a:	1a52      	subs	r2, r2, r1
 800ae3c:	00d2      	lsls	r2, r2, #3
 800ae3e:	189b      	adds	r3, r3, r2
 800ae40:	0030      	movs	r0, r6
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	0039      	movs	r1, r7
 800ae48:	f7f6 f816 	bl	8000e78 <__aeabi_ddiv>
 800ae4c:	e794      	b.n	800ad78 <_strtod_l+0x3ac>
 800ae4e:	9b05      	ldr	r3, [sp, #20]
 800ae50:	1b1c      	subs	r4, r3, r4
 800ae52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae54:	18e4      	adds	r4, r4, r3
 800ae56:	2c00      	cmp	r4, #0
 800ae58:	dd72      	ble.n	800af40 <_strtod_l+0x574>
 800ae5a:	220f      	movs	r2, #15
 800ae5c:	0023      	movs	r3, r4
 800ae5e:	4013      	ands	r3, r2
 800ae60:	4214      	tst	r4, r2
 800ae62:	d00a      	beq.n	800ae7a <_strtod_l+0x4ae>
 800ae64:	4950      	ldr	r1, [pc, #320]	; (800afa8 <_strtod_l+0x5dc>)
 800ae66:	00db      	lsls	r3, r3, #3
 800ae68:	18c9      	adds	r1, r1, r3
 800ae6a:	0032      	movs	r2, r6
 800ae6c:	6808      	ldr	r0, [r1, #0]
 800ae6e:	6849      	ldr	r1, [r1, #4]
 800ae70:	003b      	movs	r3, r7
 800ae72:	f7f6 fbfb 	bl	800166c <__aeabi_dmul>
 800ae76:	0006      	movs	r6, r0
 800ae78:	000f      	movs	r7, r1
 800ae7a:	230f      	movs	r3, #15
 800ae7c:	439c      	bics	r4, r3
 800ae7e:	d04a      	beq.n	800af16 <_strtod_l+0x54a>
 800ae80:	3326      	adds	r3, #38	; 0x26
 800ae82:	33ff      	adds	r3, #255	; 0xff
 800ae84:	429c      	cmp	r4, r3
 800ae86:	dd22      	ble.n	800aece <_strtod_l+0x502>
 800ae88:	2300      	movs	r3, #0
 800ae8a:	9305      	str	r3, [sp, #20]
 800ae8c:	9306      	str	r3, [sp, #24]
 800ae8e:	930d      	str	r3, [sp, #52]	; 0x34
 800ae90:	9308      	str	r3, [sp, #32]
 800ae92:	2322      	movs	r3, #34	; 0x22
 800ae94:	2600      	movs	r6, #0
 800ae96:	9a04      	ldr	r2, [sp, #16]
 800ae98:	4f3f      	ldr	r7, [pc, #252]	; (800af98 <_strtod_l+0x5cc>)
 800ae9a:	6013      	str	r3, [r2, #0]
 800ae9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae9e:	42b3      	cmp	r3, r6
 800aea0:	d100      	bne.n	800aea4 <_strtod_l+0x4d8>
 800aea2:	e5ce      	b.n	800aa42 <_strtod_l+0x76>
 800aea4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aea6:	9804      	ldr	r0, [sp, #16]
 800aea8:	f001 fb7c 	bl	800c5a4 <_Bfree>
 800aeac:	9908      	ldr	r1, [sp, #32]
 800aeae:	9804      	ldr	r0, [sp, #16]
 800aeb0:	f001 fb78 	bl	800c5a4 <_Bfree>
 800aeb4:	9906      	ldr	r1, [sp, #24]
 800aeb6:	9804      	ldr	r0, [sp, #16]
 800aeb8:	f001 fb74 	bl	800c5a4 <_Bfree>
 800aebc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800aebe:	9804      	ldr	r0, [sp, #16]
 800aec0:	f001 fb70 	bl	800c5a4 <_Bfree>
 800aec4:	9905      	ldr	r1, [sp, #20]
 800aec6:	9804      	ldr	r0, [sp, #16]
 800aec8:	f001 fb6c 	bl	800c5a4 <_Bfree>
 800aecc:	e5b9      	b.n	800aa42 <_strtod_l+0x76>
 800aece:	2300      	movs	r3, #0
 800aed0:	0030      	movs	r0, r6
 800aed2:	0039      	movs	r1, r7
 800aed4:	4d35      	ldr	r5, [pc, #212]	; (800afac <_strtod_l+0x5e0>)
 800aed6:	1124      	asrs	r4, r4, #4
 800aed8:	9307      	str	r3, [sp, #28]
 800aeda:	2c01      	cmp	r4, #1
 800aedc:	dc1e      	bgt.n	800af1c <_strtod_l+0x550>
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d001      	beq.n	800aee6 <_strtod_l+0x51a>
 800aee2:	0006      	movs	r6, r0
 800aee4:	000f      	movs	r7, r1
 800aee6:	4b32      	ldr	r3, [pc, #200]	; (800afb0 <_strtod_l+0x5e4>)
 800aee8:	9a07      	ldr	r2, [sp, #28]
 800aeea:	18ff      	adds	r7, r7, r3
 800aeec:	4b2f      	ldr	r3, [pc, #188]	; (800afac <_strtod_l+0x5e0>)
 800aeee:	00d2      	lsls	r2, r2, #3
 800aef0:	189d      	adds	r5, r3, r2
 800aef2:	6828      	ldr	r0, [r5, #0]
 800aef4:	6869      	ldr	r1, [r5, #4]
 800aef6:	0032      	movs	r2, r6
 800aef8:	003b      	movs	r3, r7
 800aefa:	f7f6 fbb7 	bl	800166c <__aeabi_dmul>
 800aefe:	4b26      	ldr	r3, [pc, #152]	; (800af98 <_strtod_l+0x5cc>)
 800af00:	4a2c      	ldr	r2, [pc, #176]	; (800afb4 <_strtod_l+0x5e8>)
 800af02:	0006      	movs	r6, r0
 800af04:	400b      	ands	r3, r1
 800af06:	4293      	cmp	r3, r2
 800af08:	d8be      	bhi.n	800ae88 <_strtod_l+0x4bc>
 800af0a:	4a2b      	ldr	r2, [pc, #172]	; (800afb8 <_strtod_l+0x5ec>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d913      	bls.n	800af38 <_strtod_l+0x56c>
 800af10:	2601      	movs	r6, #1
 800af12:	4f2a      	ldr	r7, [pc, #168]	; (800afbc <_strtod_l+0x5f0>)
 800af14:	4276      	negs	r6, r6
 800af16:	2300      	movs	r3, #0
 800af18:	9307      	str	r3, [sp, #28]
 800af1a:	e088      	b.n	800b02e <_strtod_l+0x662>
 800af1c:	2201      	movs	r2, #1
 800af1e:	4214      	tst	r4, r2
 800af20:	d004      	beq.n	800af2c <_strtod_l+0x560>
 800af22:	682a      	ldr	r2, [r5, #0]
 800af24:	686b      	ldr	r3, [r5, #4]
 800af26:	f7f6 fba1 	bl	800166c <__aeabi_dmul>
 800af2a:	2301      	movs	r3, #1
 800af2c:	9a07      	ldr	r2, [sp, #28]
 800af2e:	1064      	asrs	r4, r4, #1
 800af30:	3201      	adds	r2, #1
 800af32:	9207      	str	r2, [sp, #28]
 800af34:	3508      	adds	r5, #8
 800af36:	e7d0      	b.n	800aeda <_strtod_l+0x50e>
 800af38:	23d4      	movs	r3, #212	; 0xd4
 800af3a:	049b      	lsls	r3, r3, #18
 800af3c:	18cf      	adds	r7, r1, r3
 800af3e:	e7ea      	b.n	800af16 <_strtod_l+0x54a>
 800af40:	2c00      	cmp	r4, #0
 800af42:	d0e8      	beq.n	800af16 <_strtod_l+0x54a>
 800af44:	4264      	negs	r4, r4
 800af46:	230f      	movs	r3, #15
 800af48:	0022      	movs	r2, r4
 800af4a:	401a      	ands	r2, r3
 800af4c:	421c      	tst	r4, r3
 800af4e:	d00a      	beq.n	800af66 <_strtod_l+0x59a>
 800af50:	4b15      	ldr	r3, [pc, #84]	; (800afa8 <_strtod_l+0x5dc>)
 800af52:	00d2      	lsls	r2, r2, #3
 800af54:	189b      	adds	r3, r3, r2
 800af56:	0030      	movs	r0, r6
 800af58:	681a      	ldr	r2, [r3, #0]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	0039      	movs	r1, r7
 800af5e:	f7f5 ff8b 	bl	8000e78 <__aeabi_ddiv>
 800af62:	0006      	movs	r6, r0
 800af64:	000f      	movs	r7, r1
 800af66:	1124      	asrs	r4, r4, #4
 800af68:	d0d5      	beq.n	800af16 <_strtod_l+0x54a>
 800af6a:	2c1f      	cmp	r4, #31
 800af6c:	dd28      	ble.n	800afc0 <_strtod_l+0x5f4>
 800af6e:	2300      	movs	r3, #0
 800af70:	9305      	str	r3, [sp, #20]
 800af72:	9306      	str	r3, [sp, #24]
 800af74:	930d      	str	r3, [sp, #52]	; 0x34
 800af76:	9308      	str	r3, [sp, #32]
 800af78:	2322      	movs	r3, #34	; 0x22
 800af7a:	9a04      	ldr	r2, [sp, #16]
 800af7c:	2600      	movs	r6, #0
 800af7e:	6013      	str	r3, [r2, #0]
 800af80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af82:	2700      	movs	r7, #0
 800af84:	2b00      	cmp	r3, #0
 800af86:	d18d      	bne.n	800aea4 <_strtod_l+0x4d8>
 800af88:	e55b      	b.n	800aa42 <_strtod_l+0x76>
 800af8a:	46c0      	nop			; (mov r8, r8)
 800af8c:	00004e1f 	.word	0x00004e1f
 800af90:	08014271 	.word	0x08014271
 800af94:	08013f50 	.word	0x08013f50
 800af98:	7ff00000 	.word	0x7ff00000
 800af9c:	08014269 	.word	0x08014269
 800afa0:	0801431f 	.word	0x0801431f
 800afa4:	0801431b 	.word	0x0801431b
 800afa8:	08014190 	.word	0x08014190
 800afac:	08014168 	.word	0x08014168
 800afb0:	fcb00000 	.word	0xfcb00000
 800afb4:	7ca00000 	.word	0x7ca00000
 800afb8:	7c900000 	.word	0x7c900000
 800afbc:	7fefffff 	.word	0x7fefffff
 800afc0:	2310      	movs	r3, #16
 800afc2:	0022      	movs	r2, r4
 800afc4:	401a      	ands	r2, r3
 800afc6:	9207      	str	r2, [sp, #28]
 800afc8:	421c      	tst	r4, r3
 800afca:	d001      	beq.n	800afd0 <_strtod_l+0x604>
 800afcc:	335a      	adds	r3, #90	; 0x5a
 800afce:	9307      	str	r3, [sp, #28]
 800afd0:	0030      	movs	r0, r6
 800afd2:	0039      	movs	r1, r7
 800afd4:	2300      	movs	r3, #0
 800afd6:	4dc4      	ldr	r5, [pc, #784]	; (800b2e8 <_strtod_l+0x91c>)
 800afd8:	2201      	movs	r2, #1
 800afda:	4214      	tst	r4, r2
 800afdc:	d004      	beq.n	800afe8 <_strtod_l+0x61c>
 800afde:	682a      	ldr	r2, [r5, #0]
 800afe0:	686b      	ldr	r3, [r5, #4]
 800afe2:	f7f6 fb43 	bl	800166c <__aeabi_dmul>
 800afe6:	2301      	movs	r3, #1
 800afe8:	1064      	asrs	r4, r4, #1
 800afea:	3508      	adds	r5, #8
 800afec:	2c00      	cmp	r4, #0
 800afee:	d1f3      	bne.n	800afd8 <_strtod_l+0x60c>
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d001      	beq.n	800aff8 <_strtod_l+0x62c>
 800aff4:	0006      	movs	r6, r0
 800aff6:	000f      	movs	r7, r1
 800aff8:	9b07      	ldr	r3, [sp, #28]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d00f      	beq.n	800b01e <_strtod_l+0x652>
 800affe:	236b      	movs	r3, #107	; 0x6b
 800b000:	007a      	lsls	r2, r7, #1
 800b002:	0d52      	lsrs	r2, r2, #21
 800b004:	0039      	movs	r1, r7
 800b006:	1a9b      	subs	r3, r3, r2
 800b008:	2b00      	cmp	r3, #0
 800b00a:	dd08      	ble.n	800b01e <_strtod_l+0x652>
 800b00c:	2b1f      	cmp	r3, #31
 800b00e:	dc00      	bgt.n	800b012 <_strtod_l+0x646>
 800b010:	e121      	b.n	800b256 <_strtod_l+0x88a>
 800b012:	2600      	movs	r6, #0
 800b014:	2b34      	cmp	r3, #52	; 0x34
 800b016:	dc00      	bgt.n	800b01a <_strtod_l+0x64e>
 800b018:	e116      	b.n	800b248 <_strtod_l+0x87c>
 800b01a:	27dc      	movs	r7, #220	; 0xdc
 800b01c:	04bf      	lsls	r7, r7, #18
 800b01e:	2200      	movs	r2, #0
 800b020:	2300      	movs	r3, #0
 800b022:	0030      	movs	r0, r6
 800b024:	0039      	movs	r1, r7
 800b026:	f7f5 fa0f 	bl	8000448 <__aeabi_dcmpeq>
 800b02a:	2800      	cmp	r0, #0
 800b02c:	d19f      	bne.n	800af6e <_strtod_l+0x5a2>
 800b02e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b030:	9a08      	ldr	r2, [sp, #32]
 800b032:	9300      	str	r3, [sp, #0]
 800b034:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b036:	9b05      	ldr	r3, [sp, #20]
 800b038:	9804      	ldr	r0, [sp, #16]
 800b03a:	f001 fb01 	bl	800c640 <__s2b>
 800b03e:	900d      	str	r0, [sp, #52]	; 0x34
 800b040:	2800      	cmp	r0, #0
 800b042:	d100      	bne.n	800b046 <_strtod_l+0x67a>
 800b044:	e720      	b.n	800ae88 <_strtod_l+0x4bc>
 800b046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b048:	9906      	ldr	r1, [sp, #24]
 800b04a:	17da      	asrs	r2, r3, #31
 800b04c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b04e:	1a5b      	subs	r3, r3, r1
 800b050:	401a      	ands	r2, r3
 800b052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b054:	9215      	str	r2, [sp, #84]	; 0x54
 800b056:	43db      	mvns	r3, r3
 800b058:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b05a:	17db      	asrs	r3, r3, #31
 800b05c:	401a      	ands	r2, r3
 800b05e:	2300      	movs	r3, #0
 800b060:	9218      	str	r2, [sp, #96]	; 0x60
 800b062:	9305      	str	r3, [sp, #20]
 800b064:	9306      	str	r3, [sp, #24]
 800b066:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b068:	9804      	ldr	r0, [sp, #16]
 800b06a:	6859      	ldr	r1, [r3, #4]
 800b06c:	f001 fa72 	bl	800c554 <_Balloc>
 800b070:	9008      	str	r0, [sp, #32]
 800b072:	2800      	cmp	r0, #0
 800b074:	d100      	bne.n	800b078 <_strtod_l+0x6ac>
 800b076:	e70c      	b.n	800ae92 <_strtod_l+0x4c6>
 800b078:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b07a:	300c      	adds	r0, #12
 800b07c:	0019      	movs	r1, r3
 800b07e:	691a      	ldr	r2, [r3, #16]
 800b080:	310c      	adds	r1, #12
 800b082:	3202      	adds	r2, #2
 800b084:	0092      	lsls	r2, r2, #2
 800b086:	f000 fdca 	bl	800bc1e <memcpy>
 800b08a:	ab1e      	add	r3, sp, #120	; 0x78
 800b08c:	9301      	str	r3, [sp, #4]
 800b08e:	ab1d      	add	r3, sp, #116	; 0x74
 800b090:	9300      	str	r3, [sp, #0]
 800b092:	0032      	movs	r2, r6
 800b094:	003b      	movs	r3, r7
 800b096:	9804      	ldr	r0, [sp, #16]
 800b098:	9610      	str	r6, [sp, #64]	; 0x40
 800b09a:	9711      	str	r7, [sp, #68]	; 0x44
 800b09c:	f001 fdf8 	bl	800cc90 <__d2b>
 800b0a0:	901c      	str	r0, [sp, #112]	; 0x70
 800b0a2:	2800      	cmp	r0, #0
 800b0a4:	d100      	bne.n	800b0a8 <_strtod_l+0x6dc>
 800b0a6:	e6f4      	b.n	800ae92 <_strtod_l+0x4c6>
 800b0a8:	2101      	movs	r1, #1
 800b0aa:	9804      	ldr	r0, [sp, #16]
 800b0ac:	f001 fb5c 	bl	800c768 <__i2b>
 800b0b0:	9006      	str	r0, [sp, #24]
 800b0b2:	2800      	cmp	r0, #0
 800b0b4:	d100      	bne.n	800b0b8 <_strtod_l+0x6ec>
 800b0b6:	e6ec      	b.n	800ae92 <_strtod_l+0x4c6>
 800b0b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b0ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b0bc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b0be:	1ad4      	subs	r4, r2, r3
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	db01      	blt.n	800b0c8 <_strtod_l+0x6fc>
 800b0c4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b0c6:	195d      	adds	r5, r3, r5
 800b0c8:	9907      	ldr	r1, [sp, #28]
 800b0ca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b0cc:	1a5b      	subs	r3, r3, r1
 800b0ce:	2136      	movs	r1, #54	; 0x36
 800b0d0:	189b      	adds	r3, r3, r2
 800b0d2:	1a8a      	subs	r2, r1, r2
 800b0d4:	4985      	ldr	r1, [pc, #532]	; (800b2ec <_strtod_l+0x920>)
 800b0d6:	2001      	movs	r0, #1
 800b0d8:	468c      	mov	ip, r1
 800b0da:	2100      	movs	r1, #0
 800b0dc:	3b01      	subs	r3, #1
 800b0de:	9114      	str	r1, [sp, #80]	; 0x50
 800b0e0:	9012      	str	r0, [sp, #72]	; 0x48
 800b0e2:	4563      	cmp	r3, ip
 800b0e4:	da07      	bge.n	800b0f6 <_strtod_l+0x72a>
 800b0e6:	4661      	mov	r1, ip
 800b0e8:	1ac9      	subs	r1, r1, r3
 800b0ea:	1a52      	subs	r2, r2, r1
 800b0ec:	291f      	cmp	r1, #31
 800b0ee:	dd00      	ble.n	800b0f2 <_strtod_l+0x726>
 800b0f0:	e0b6      	b.n	800b260 <_strtod_l+0x894>
 800b0f2:	4088      	lsls	r0, r1
 800b0f4:	9012      	str	r0, [sp, #72]	; 0x48
 800b0f6:	18ab      	adds	r3, r5, r2
 800b0f8:	930c      	str	r3, [sp, #48]	; 0x30
 800b0fa:	18a4      	adds	r4, r4, r2
 800b0fc:	9b07      	ldr	r3, [sp, #28]
 800b0fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b100:	191c      	adds	r4, r3, r4
 800b102:	002b      	movs	r3, r5
 800b104:	4295      	cmp	r5, r2
 800b106:	dd00      	ble.n	800b10a <_strtod_l+0x73e>
 800b108:	0013      	movs	r3, r2
 800b10a:	42a3      	cmp	r3, r4
 800b10c:	dd00      	ble.n	800b110 <_strtod_l+0x744>
 800b10e:	0023      	movs	r3, r4
 800b110:	2b00      	cmp	r3, #0
 800b112:	dd04      	ble.n	800b11e <_strtod_l+0x752>
 800b114:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b116:	1ae4      	subs	r4, r4, r3
 800b118:	1ad2      	subs	r2, r2, r3
 800b11a:	920c      	str	r2, [sp, #48]	; 0x30
 800b11c:	1aed      	subs	r5, r5, r3
 800b11e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b120:	2b00      	cmp	r3, #0
 800b122:	dd17      	ble.n	800b154 <_strtod_l+0x788>
 800b124:	001a      	movs	r2, r3
 800b126:	9906      	ldr	r1, [sp, #24]
 800b128:	9804      	ldr	r0, [sp, #16]
 800b12a:	f001 fbe5 	bl	800c8f8 <__pow5mult>
 800b12e:	9006      	str	r0, [sp, #24]
 800b130:	2800      	cmp	r0, #0
 800b132:	d100      	bne.n	800b136 <_strtod_l+0x76a>
 800b134:	e6ad      	b.n	800ae92 <_strtod_l+0x4c6>
 800b136:	0001      	movs	r1, r0
 800b138:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b13a:	9804      	ldr	r0, [sp, #16]
 800b13c:	f001 fb2c 	bl	800c798 <__multiply>
 800b140:	900e      	str	r0, [sp, #56]	; 0x38
 800b142:	2800      	cmp	r0, #0
 800b144:	d100      	bne.n	800b148 <_strtod_l+0x77c>
 800b146:	e6a4      	b.n	800ae92 <_strtod_l+0x4c6>
 800b148:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b14a:	9804      	ldr	r0, [sp, #16]
 800b14c:	f001 fa2a 	bl	800c5a4 <_Bfree>
 800b150:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b152:	931c      	str	r3, [sp, #112]	; 0x70
 800b154:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b156:	2b00      	cmp	r3, #0
 800b158:	dd00      	ble.n	800b15c <_strtod_l+0x790>
 800b15a:	e087      	b.n	800b26c <_strtod_l+0x8a0>
 800b15c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b15e:	2b00      	cmp	r3, #0
 800b160:	dd08      	ble.n	800b174 <_strtod_l+0x7a8>
 800b162:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b164:	9908      	ldr	r1, [sp, #32]
 800b166:	9804      	ldr	r0, [sp, #16]
 800b168:	f001 fbc6 	bl	800c8f8 <__pow5mult>
 800b16c:	9008      	str	r0, [sp, #32]
 800b16e:	2800      	cmp	r0, #0
 800b170:	d100      	bne.n	800b174 <_strtod_l+0x7a8>
 800b172:	e68e      	b.n	800ae92 <_strtod_l+0x4c6>
 800b174:	2c00      	cmp	r4, #0
 800b176:	dd08      	ble.n	800b18a <_strtod_l+0x7be>
 800b178:	0022      	movs	r2, r4
 800b17a:	9908      	ldr	r1, [sp, #32]
 800b17c:	9804      	ldr	r0, [sp, #16]
 800b17e:	f001 fbfd 	bl	800c97c <__lshift>
 800b182:	9008      	str	r0, [sp, #32]
 800b184:	2800      	cmp	r0, #0
 800b186:	d100      	bne.n	800b18a <_strtod_l+0x7be>
 800b188:	e683      	b.n	800ae92 <_strtod_l+0x4c6>
 800b18a:	2d00      	cmp	r5, #0
 800b18c:	dd08      	ble.n	800b1a0 <_strtod_l+0x7d4>
 800b18e:	002a      	movs	r2, r5
 800b190:	9906      	ldr	r1, [sp, #24]
 800b192:	9804      	ldr	r0, [sp, #16]
 800b194:	f001 fbf2 	bl	800c97c <__lshift>
 800b198:	9006      	str	r0, [sp, #24]
 800b19a:	2800      	cmp	r0, #0
 800b19c:	d100      	bne.n	800b1a0 <_strtod_l+0x7d4>
 800b19e:	e678      	b.n	800ae92 <_strtod_l+0x4c6>
 800b1a0:	9a08      	ldr	r2, [sp, #32]
 800b1a2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b1a4:	9804      	ldr	r0, [sp, #16]
 800b1a6:	f001 fc73 	bl	800ca90 <__mdiff>
 800b1aa:	9005      	str	r0, [sp, #20]
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	d100      	bne.n	800b1b2 <_strtod_l+0x7e6>
 800b1b0:	e66f      	b.n	800ae92 <_strtod_l+0x4c6>
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	68c3      	ldr	r3, [r0, #12]
 800b1b6:	9906      	ldr	r1, [sp, #24]
 800b1b8:	60c2      	str	r2, [r0, #12]
 800b1ba:	930c      	str	r3, [sp, #48]	; 0x30
 800b1bc:	f001 fc4c 	bl	800ca58 <__mcmp>
 800b1c0:	2800      	cmp	r0, #0
 800b1c2:	da5d      	bge.n	800b280 <_strtod_l+0x8b4>
 800b1c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1c6:	4333      	orrs	r3, r6
 800b1c8:	d000      	beq.n	800b1cc <_strtod_l+0x800>
 800b1ca:	e088      	b.n	800b2de <_strtod_l+0x912>
 800b1cc:	033b      	lsls	r3, r7, #12
 800b1ce:	d000      	beq.n	800b1d2 <_strtod_l+0x806>
 800b1d0:	e085      	b.n	800b2de <_strtod_l+0x912>
 800b1d2:	22d6      	movs	r2, #214	; 0xd6
 800b1d4:	4b46      	ldr	r3, [pc, #280]	; (800b2f0 <_strtod_l+0x924>)
 800b1d6:	04d2      	lsls	r2, r2, #19
 800b1d8:	403b      	ands	r3, r7
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d97f      	bls.n	800b2de <_strtod_l+0x912>
 800b1de:	9b05      	ldr	r3, [sp, #20]
 800b1e0:	695b      	ldr	r3, [r3, #20]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d103      	bne.n	800b1ee <_strtod_l+0x822>
 800b1e6:	9b05      	ldr	r3, [sp, #20]
 800b1e8:	691b      	ldr	r3, [r3, #16]
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	dd77      	ble.n	800b2de <_strtod_l+0x912>
 800b1ee:	9905      	ldr	r1, [sp, #20]
 800b1f0:	2201      	movs	r2, #1
 800b1f2:	9804      	ldr	r0, [sp, #16]
 800b1f4:	f001 fbc2 	bl	800c97c <__lshift>
 800b1f8:	9906      	ldr	r1, [sp, #24]
 800b1fa:	9005      	str	r0, [sp, #20]
 800b1fc:	f001 fc2c 	bl	800ca58 <__mcmp>
 800b200:	2800      	cmp	r0, #0
 800b202:	dd6c      	ble.n	800b2de <_strtod_l+0x912>
 800b204:	9907      	ldr	r1, [sp, #28]
 800b206:	003b      	movs	r3, r7
 800b208:	4a39      	ldr	r2, [pc, #228]	; (800b2f0 <_strtod_l+0x924>)
 800b20a:	2900      	cmp	r1, #0
 800b20c:	d100      	bne.n	800b210 <_strtod_l+0x844>
 800b20e:	e094      	b.n	800b33a <_strtod_l+0x96e>
 800b210:	0011      	movs	r1, r2
 800b212:	20d6      	movs	r0, #214	; 0xd6
 800b214:	4039      	ands	r1, r7
 800b216:	04c0      	lsls	r0, r0, #19
 800b218:	4281      	cmp	r1, r0
 800b21a:	dd00      	ble.n	800b21e <_strtod_l+0x852>
 800b21c:	e08d      	b.n	800b33a <_strtod_l+0x96e>
 800b21e:	23dc      	movs	r3, #220	; 0xdc
 800b220:	049b      	lsls	r3, r3, #18
 800b222:	4299      	cmp	r1, r3
 800b224:	dc00      	bgt.n	800b228 <_strtod_l+0x85c>
 800b226:	e6a7      	b.n	800af78 <_strtod_l+0x5ac>
 800b228:	0030      	movs	r0, r6
 800b22a:	0039      	movs	r1, r7
 800b22c:	4b31      	ldr	r3, [pc, #196]	; (800b2f4 <_strtod_l+0x928>)
 800b22e:	2200      	movs	r2, #0
 800b230:	f7f6 fa1c 	bl	800166c <__aeabi_dmul>
 800b234:	4b2e      	ldr	r3, [pc, #184]	; (800b2f0 <_strtod_l+0x924>)
 800b236:	0006      	movs	r6, r0
 800b238:	000f      	movs	r7, r1
 800b23a:	420b      	tst	r3, r1
 800b23c:	d000      	beq.n	800b240 <_strtod_l+0x874>
 800b23e:	e631      	b.n	800aea4 <_strtod_l+0x4d8>
 800b240:	2322      	movs	r3, #34	; 0x22
 800b242:	9a04      	ldr	r2, [sp, #16]
 800b244:	6013      	str	r3, [r2, #0]
 800b246:	e62d      	b.n	800aea4 <_strtod_l+0x4d8>
 800b248:	234b      	movs	r3, #75	; 0x4b
 800b24a:	1a9a      	subs	r2, r3, r2
 800b24c:	3b4c      	subs	r3, #76	; 0x4c
 800b24e:	4093      	lsls	r3, r2
 800b250:	4019      	ands	r1, r3
 800b252:	000f      	movs	r7, r1
 800b254:	e6e3      	b.n	800b01e <_strtod_l+0x652>
 800b256:	2201      	movs	r2, #1
 800b258:	4252      	negs	r2, r2
 800b25a:	409a      	lsls	r2, r3
 800b25c:	4016      	ands	r6, r2
 800b25e:	e6de      	b.n	800b01e <_strtod_l+0x652>
 800b260:	4925      	ldr	r1, [pc, #148]	; (800b2f8 <_strtod_l+0x92c>)
 800b262:	1acb      	subs	r3, r1, r3
 800b264:	0001      	movs	r1, r0
 800b266:	4099      	lsls	r1, r3
 800b268:	9114      	str	r1, [sp, #80]	; 0x50
 800b26a:	e743      	b.n	800b0f4 <_strtod_l+0x728>
 800b26c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b26e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b270:	9804      	ldr	r0, [sp, #16]
 800b272:	f001 fb83 	bl	800c97c <__lshift>
 800b276:	901c      	str	r0, [sp, #112]	; 0x70
 800b278:	2800      	cmp	r0, #0
 800b27a:	d000      	beq.n	800b27e <_strtod_l+0x8b2>
 800b27c:	e76e      	b.n	800b15c <_strtod_l+0x790>
 800b27e:	e608      	b.n	800ae92 <_strtod_l+0x4c6>
 800b280:	970e      	str	r7, [sp, #56]	; 0x38
 800b282:	2800      	cmp	r0, #0
 800b284:	d177      	bne.n	800b376 <_strtod_l+0x9aa>
 800b286:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b288:	033b      	lsls	r3, r7, #12
 800b28a:	0b1b      	lsrs	r3, r3, #12
 800b28c:	2a00      	cmp	r2, #0
 800b28e:	d039      	beq.n	800b304 <_strtod_l+0x938>
 800b290:	4a1a      	ldr	r2, [pc, #104]	; (800b2fc <_strtod_l+0x930>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d139      	bne.n	800b30a <_strtod_l+0x93e>
 800b296:	2101      	movs	r1, #1
 800b298:	9b07      	ldr	r3, [sp, #28]
 800b29a:	4249      	negs	r1, r1
 800b29c:	0032      	movs	r2, r6
 800b29e:	0008      	movs	r0, r1
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d00b      	beq.n	800b2bc <_strtod_l+0x8f0>
 800b2a4:	24d4      	movs	r4, #212	; 0xd4
 800b2a6:	4b12      	ldr	r3, [pc, #72]	; (800b2f0 <_strtod_l+0x924>)
 800b2a8:	0008      	movs	r0, r1
 800b2aa:	403b      	ands	r3, r7
 800b2ac:	04e4      	lsls	r4, r4, #19
 800b2ae:	42a3      	cmp	r3, r4
 800b2b0:	d804      	bhi.n	800b2bc <_strtod_l+0x8f0>
 800b2b2:	306c      	adds	r0, #108	; 0x6c
 800b2b4:	0d1b      	lsrs	r3, r3, #20
 800b2b6:	1ac3      	subs	r3, r0, r3
 800b2b8:	4099      	lsls	r1, r3
 800b2ba:	0008      	movs	r0, r1
 800b2bc:	4282      	cmp	r2, r0
 800b2be:	d124      	bne.n	800b30a <_strtod_l+0x93e>
 800b2c0:	4b0f      	ldr	r3, [pc, #60]	; (800b300 <_strtod_l+0x934>)
 800b2c2:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b2c4:	4299      	cmp	r1, r3
 800b2c6:	d102      	bne.n	800b2ce <_strtod_l+0x902>
 800b2c8:	3201      	adds	r2, #1
 800b2ca:	d100      	bne.n	800b2ce <_strtod_l+0x902>
 800b2cc:	e5e1      	b.n	800ae92 <_strtod_l+0x4c6>
 800b2ce:	4b08      	ldr	r3, [pc, #32]	; (800b2f0 <_strtod_l+0x924>)
 800b2d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b2d2:	2600      	movs	r6, #0
 800b2d4:	401a      	ands	r2, r3
 800b2d6:	0013      	movs	r3, r2
 800b2d8:	2280      	movs	r2, #128	; 0x80
 800b2da:	0352      	lsls	r2, r2, #13
 800b2dc:	189f      	adds	r7, r3, r2
 800b2de:	9b07      	ldr	r3, [sp, #28]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d1a1      	bne.n	800b228 <_strtod_l+0x85c>
 800b2e4:	e5de      	b.n	800aea4 <_strtod_l+0x4d8>
 800b2e6:	46c0      	nop			; (mov r8, r8)
 800b2e8:	08013f68 	.word	0x08013f68
 800b2ec:	fffffc02 	.word	0xfffffc02
 800b2f0:	7ff00000 	.word	0x7ff00000
 800b2f4:	39500000 	.word	0x39500000
 800b2f8:	fffffbe2 	.word	0xfffffbe2
 800b2fc:	000fffff 	.word	0x000fffff
 800b300:	7fefffff 	.word	0x7fefffff
 800b304:	4333      	orrs	r3, r6
 800b306:	d100      	bne.n	800b30a <_strtod_l+0x93e>
 800b308:	e77c      	b.n	800b204 <_strtod_l+0x838>
 800b30a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d01d      	beq.n	800b34c <_strtod_l+0x980>
 800b310:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b312:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b314:	4213      	tst	r3, r2
 800b316:	d0e2      	beq.n	800b2de <_strtod_l+0x912>
 800b318:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b31a:	0030      	movs	r0, r6
 800b31c:	0039      	movs	r1, r7
 800b31e:	9a07      	ldr	r2, [sp, #28]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d017      	beq.n	800b354 <_strtod_l+0x988>
 800b324:	f7ff fb3a 	bl	800a99c <sulp>
 800b328:	0002      	movs	r2, r0
 800b32a:	000b      	movs	r3, r1
 800b32c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b32e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b330:	f7f5 fa42 	bl	80007b8 <__aeabi_dadd>
 800b334:	0006      	movs	r6, r0
 800b336:	000f      	movs	r7, r1
 800b338:	e7d1      	b.n	800b2de <_strtod_l+0x912>
 800b33a:	2601      	movs	r6, #1
 800b33c:	4013      	ands	r3, r2
 800b33e:	4a98      	ldr	r2, [pc, #608]	; (800b5a0 <_strtod_l+0xbd4>)
 800b340:	4276      	negs	r6, r6
 800b342:	189b      	adds	r3, r3, r2
 800b344:	4a97      	ldr	r2, [pc, #604]	; (800b5a4 <_strtod_l+0xbd8>)
 800b346:	431a      	orrs	r2, r3
 800b348:	0017      	movs	r7, r2
 800b34a:	e7c8      	b.n	800b2de <_strtod_l+0x912>
 800b34c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b34e:	4233      	tst	r3, r6
 800b350:	d0c5      	beq.n	800b2de <_strtod_l+0x912>
 800b352:	e7e1      	b.n	800b318 <_strtod_l+0x94c>
 800b354:	f7ff fb22 	bl	800a99c <sulp>
 800b358:	0002      	movs	r2, r0
 800b35a:	000b      	movs	r3, r1
 800b35c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b35e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b360:	f7f6 fc46 	bl	8001bf0 <__aeabi_dsub>
 800b364:	2200      	movs	r2, #0
 800b366:	2300      	movs	r3, #0
 800b368:	0006      	movs	r6, r0
 800b36a:	000f      	movs	r7, r1
 800b36c:	f7f5 f86c 	bl	8000448 <__aeabi_dcmpeq>
 800b370:	2800      	cmp	r0, #0
 800b372:	d0b4      	beq.n	800b2de <_strtod_l+0x912>
 800b374:	e600      	b.n	800af78 <_strtod_l+0x5ac>
 800b376:	9906      	ldr	r1, [sp, #24]
 800b378:	9805      	ldr	r0, [sp, #20]
 800b37a:	f001 fce9 	bl	800cd50 <__ratio>
 800b37e:	2380      	movs	r3, #128	; 0x80
 800b380:	2200      	movs	r2, #0
 800b382:	05db      	lsls	r3, r3, #23
 800b384:	0004      	movs	r4, r0
 800b386:	000d      	movs	r5, r1
 800b388:	f7f5 f86e 	bl	8000468 <__aeabi_dcmple>
 800b38c:	2800      	cmp	r0, #0
 800b38e:	d06d      	beq.n	800b46c <_strtod_l+0xaa0>
 800b390:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b392:	2b00      	cmp	r3, #0
 800b394:	d000      	beq.n	800b398 <_strtod_l+0x9cc>
 800b396:	e07e      	b.n	800b496 <_strtod_l+0xaca>
 800b398:	2e00      	cmp	r6, #0
 800b39a:	d158      	bne.n	800b44e <_strtod_l+0xa82>
 800b39c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b39e:	031b      	lsls	r3, r3, #12
 800b3a0:	d000      	beq.n	800b3a4 <_strtod_l+0x9d8>
 800b3a2:	e07f      	b.n	800b4a4 <_strtod_l+0xad8>
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	0020      	movs	r0, r4
 800b3a8:	0029      	movs	r1, r5
 800b3aa:	4b7f      	ldr	r3, [pc, #508]	; (800b5a8 <_strtod_l+0xbdc>)
 800b3ac:	f7f5 f852 	bl	8000454 <__aeabi_dcmplt>
 800b3b0:	2800      	cmp	r0, #0
 800b3b2:	d158      	bne.n	800b466 <_strtod_l+0xa9a>
 800b3b4:	0020      	movs	r0, r4
 800b3b6:	0029      	movs	r1, r5
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	4b7c      	ldr	r3, [pc, #496]	; (800b5ac <_strtod_l+0xbe0>)
 800b3bc:	f7f6 f956 	bl	800166c <__aeabi_dmul>
 800b3c0:	0004      	movs	r4, r0
 800b3c2:	000d      	movs	r5, r1
 800b3c4:	2380      	movs	r3, #128	; 0x80
 800b3c6:	061b      	lsls	r3, r3, #24
 800b3c8:	940a      	str	r4, [sp, #40]	; 0x28
 800b3ca:	18eb      	adds	r3, r5, r3
 800b3cc:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3d2:	9212      	str	r2, [sp, #72]	; 0x48
 800b3d4:	9313      	str	r3, [sp, #76]	; 0x4c
 800b3d6:	4a76      	ldr	r2, [pc, #472]	; (800b5b0 <_strtod_l+0xbe4>)
 800b3d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3da:	4013      	ands	r3, r2
 800b3dc:	9314      	str	r3, [sp, #80]	; 0x50
 800b3de:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b3e0:	4b74      	ldr	r3, [pc, #464]	; (800b5b4 <_strtod_l+0xbe8>)
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d000      	beq.n	800b3e8 <_strtod_l+0xa1c>
 800b3e6:	e091      	b.n	800b50c <_strtod_l+0xb40>
 800b3e8:	4a73      	ldr	r2, [pc, #460]	; (800b5b8 <_strtod_l+0xbec>)
 800b3ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3ec:	4694      	mov	ip, r2
 800b3ee:	4463      	add	r3, ip
 800b3f0:	001f      	movs	r7, r3
 800b3f2:	0030      	movs	r0, r6
 800b3f4:	0019      	movs	r1, r3
 800b3f6:	f001 fbe3 	bl	800cbc0 <__ulp>
 800b3fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3fe:	f7f6 f935 	bl	800166c <__aeabi_dmul>
 800b402:	0032      	movs	r2, r6
 800b404:	003b      	movs	r3, r7
 800b406:	f7f5 f9d7 	bl	80007b8 <__aeabi_dadd>
 800b40a:	4a69      	ldr	r2, [pc, #420]	; (800b5b0 <_strtod_l+0xbe4>)
 800b40c:	4b6b      	ldr	r3, [pc, #428]	; (800b5bc <_strtod_l+0xbf0>)
 800b40e:	0006      	movs	r6, r0
 800b410:	400a      	ands	r2, r1
 800b412:	429a      	cmp	r2, r3
 800b414:	d949      	bls.n	800b4aa <_strtod_l+0xade>
 800b416:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b418:	4b69      	ldr	r3, [pc, #420]	; (800b5c0 <_strtod_l+0xbf4>)
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d103      	bne.n	800b426 <_strtod_l+0xa5a>
 800b41e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b420:	3301      	adds	r3, #1
 800b422:	d100      	bne.n	800b426 <_strtod_l+0xa5a>
 800b424:	e535      	b.n	800ae92 <_strtod_l+0x4c6>
 800b426:	2601      	movs	r6, #1
 800b428:	4f65      	ldr	r7, [pc, #404]	; (800b5c0 <_strtod_l+0xbf4>)
 800b42a:	4276      	negs	r6, r6
 800b42c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b42e:	9804      	ldr	r0, [sp, #16]
 800b430:	f001 f8b8 	bl	800c5a4 <_Bfree>
 800b434:	9908      	ldr	r1, [sp, #32]
 800b436:	9804      	ldr	r0, [sp, #16]
 800b438:	f001 f8b4 	bl	800c5a4 <_Bfree>
 800b43c:	9906      	ldr	r1, [sp, #24]
 800b43e:	9804      	ldr	r0, [sp, #16]
 800b440:	f001 f8b0 	bl	800c5a4 <_Bfree>
 800b444:	9905      	ldr	r1, [sp, #20]
 800b446:	9804      	ldr	r0, [sp, #16]
 800b448:	f001 f8ac 	bl	800c5a4 <_Bfree>
 800b44c:	e60b      	b.n	800b066 <_strtod_l+0x69a>
 800b44e:	2e01      	cmp	r6, #1
 800b450:	d103      	bne.n	800b45a <_strtod_l+0xa8e>
 800b452:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b454:	2b00      	cmp	r3, #0
 800b456:	d100      	bne.n	800b45a <_strtod_l+0xa8e>
 800b458:	e58e      	b.n	800af78 <_strtod_l+0x5ac>
 800b45a:	2300      	movs	r3, #0
 800b45c:	4c59      	ldr	r4, [pc, #356]	; (800b5c4 <_strtod_l+0xbf8>)
 800b45e:	930a      	str	r3, [sp, #40]	; 0x28
 800b460:	940b      	str	r4, [sp, #44]	; 0x2c
 800b462:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b464:	e01c      	b.n	800b4a0 <_strtod_l+0xad4>
 800b466:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b468:	4d50      	ldr	r5, [pc, #320]	; (800b5ac <_strtod_l+0xbe0>)
 800b46a:	e7ab      	b.n	800b3c4 <_strtod_l+0x9f8>
 800b46c:	2200      	movs	r2, #0
 800b46e:	0020      	movs	r0, r4
 800b470:	0029      	movs	r1, r5
 800b472:	4b4e      	ldr	r3, [pc, #312]	; (800b5ac <_strtod_l+0xbe0>)
 800b474:	f7f6 f8fa 	bl	800166c <__aeabi_dmul>
 800b478:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b47a:	0004      	movs	r4, r0
 800b47c:	000b      	movs	r3, r1
 800b47e:	000d      	movs	r5, r1
 800b480:	2a00      	cmp	r2, #0
 800b482:	d104      	bne.n	800b48e <_strtod_l+0xac2>
 800b484:	2280      	movs	r2, #128	; 0x80
 800b486:	0612      	lsls	r2, r2, #24
 800b488:	900a      	str	r0, [sp, #40]	; 0x28
 800b48a:	188b      	adds	r3, r1, r2
 800b48c:	e79e      	b.n	800b3cc <_strtod_l+0xa00>
 800b48e:	0002      	movs	r2, r0
 800b490:	920a      	str	r2, [sp, #40]	; 0x28
 800b492:	930b      	str	r3, [sp, #44]	; 0x2c
 800b494:	e79b      	b.n	800b3ce <_strtod_l+0xa02>
 800b496:	2300      	movs	r3, #0
 800b498:	4c43      	ldr	r4, [pc, #268]	; (800b5a8 <_strtod_l+0xbdc>)
 800b49a:	930a      	str	r3, [sp, #40]	; 0x28
 800b49c:	940b      	str	r4, [sp, #44]	; 0x2c
 800b49e:	2400      	movs	r4, #0
 800b4a0:	4d41      	ldr	r5, [pc, #260]	; (800b5a8 <_strtod_l+0xbdc>)
 800b4a2:	e794      	b.n	800b3ce <_strtod_l+0xa02>
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	4c47      	ldr	r4, [pc, #284]	; (800b5c4 <_strtod_l+0xbf8>)
 800b4a8:	e7f7      	b.n	800b49a <_strtod_l+0xace>
 800b4aa:	23d4      	movs	r3, #212	; 0xd4
 800b4ac:	049b      	lsls	r3, r3, #18
 800b4ae:	18cf      	adds	r7, r1, r3
 800b4b0:	9b07      	ldr	r3, [sp, #28]
 800b4b2:	970e      	str	r7, [sp, #56]	; 0x38
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d1b9      	bne.n	800b42c <_strtod_l+0xa60>
 800b4b8:	4b3d      	ldr	r3, [pc, #244]	; (800b5b0 <_strtod_l+0xbe4>)
 800b4ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b4bc:	403b      	ands	r3, r7
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d1b4      	bne.n	800b42c <_strtod_l+0xa60>
 800b4c2:	0020      	movs	r0, r4
 800b4c4:	0029      	movs	r1, r5
 800b4c6:	f7f5 f859 	bl	800057c <__aeabi_d2lz>
 800b4ca:	f7f5 f893 	bl	80005f4 <__aeabi_l2d>
 800b4ce:	0002      	movs	r2, r0
 800b4d0:	000b      	movs	r3, r1
 800b4d2:	0020      	movs	r0, r4
 800b4d4:	0029      	movs	r1, r5
 800b4d6:	f7f6 fb8b 	bl	8001bf0 <__aeabi_dsub>
 800b4da:	033b      	lsls	r3, r7, #12
 800b4dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b4de:	0b1b      	lsrs	r3, r3, #12
 800b4e0:	4333      	orrs	r3, r6
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	0004      	movs	r4, r0
 800b4e6:	000d      	movs	r5, r1
 800b4e8:	4a37      	ldr	r2, [pc, #220]	; (800b5c8 <_strtod_l+0xbfc>)
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d054      	beq.n	800b598 <_strtod_l+0xbcc>
 800b4ee:	4b37      	ldr	r3, [pc, #220]	; (800b5cc <_strtod_l+0xc00>)
 800b4f0:	f7f4 ffb0 	bl	8000454 <__aeabi_dcmplt>
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	d000      	beq.n	800b4fa <_strtod_l+0xb2e>
 800b4f8:	e4d4      	b.n	800aea4 <_strtod_l+0x4d8>
 800b4fa:	0020      	movs	r0, r4
 800b4fc:	0029      	movs	r1, r5
 800b4fe:	4a34      	ldr	r2, [pc, #208]	; (800b5d0 <_strtod_l+0xc04>)
 800b500:	4b2a      	ldr	r3, [pc, #168]	; (800b5ac <_strtod_l+0xbe0>)
 800b502:	f7f4 ffbb 	bl	800047c <__aeabi_dcmpgt>
 800b506:	2800      	cmp	r0, #0
 800b508:	d090      	beq.n	800b42c <_strtod_l+0xa60>
 800b50a:	e4cb      	b.n	800aea4 <_strtod_l+0x4d8>
 800b50c:	9b07      	ldr	r3, [sp, #28]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d02b      	beq.n	800b56a <_strtod_l+0xb9e>
 800b512:	23d4      	movs	r3, #212	; 0xd4
 800b514:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b516:	04db      	lsls	r3, r3, #19
 800b518:	429a      	cmp	r2, r3
 800b51a:	d826      	bhi.n	800b56a <_strtod_l+0xb9e>
 800b51c:	0020      	movs	r0, r4
 800b51e:	0029      	movs	r1, r5
 800b520:	4a2c      	ldr	r2, [pc, #176]	; (800b5d4 <_strtod_l+0xc08>)
 800b522:	4b2d      	ldr	r3, [pc, #180]	; (800b5d8 <_strtod_l+0xc0c>)
 800b524:	f7f4 ffa0 	bl	8000468 <__aeabi_dcmple>
 800b528:	2800      	cmp	r0, #0
 800b52a:	d017      	beq.n	800b55c <_strtod_l+0xb90>
 800b52c:	0020      	movs	r0, r4
 800b52e:	0029      	movs	r1, r5
 800b530:	f7f5 f806 	bl	8000540 <__aeabi_d2uiz>
 800b534:	2800      	cmp	r0, #0
 800b536:	d100      	bne.n	800b53a <_strtod_l+0xb6e>
 800b538:	3001      	adds	r0, #1
 800b53a:	f7f6 ff5f 	bl	80023fc <__aeabi_ui2d>
 800b53e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b540:	0004      	movs	r4, r0
 800b542:	000b      	movs	r3, r1
 800b544:	000d      	movs	r5, r1
 800b546:	2a00      	cmp	r2, #0
 800b548:	d122      	bne.n	800b590 <_strtod_l+0xbc4>
 800b54a:	2280      	movs	r2, #128	; 0x80
 800b54c:	0612      	lsls	r2, r2, #24
 800b54e:	188b      	adds	r3, r1, r2
 800b550:	9016      	str	r0, [sp, #88]	; 0x58
 800b552:	9317      	str	r3, [sp, #92]	; 0x5c
 800b554:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b556:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b558:	9212      	str	r2, [sp, #72]	; 0x48
 800b55a:	9313      	str	r3, [sp, #76]	; 0x4c
 800b55c:	22d6      	movs	r2, #214	; 0xd6
 800b55e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b560:	04d2      	lsls	r2, r2, #19
 800b562:	189b      	adds	r3, r3, r2
 800b564:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b566:	1a9b      	subs	r3, r3, r2
 800b568:	9313      	str	r3, [sp, #76]	; 0x4c
 800b56a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b56c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b56e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800b570:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800b572:	f001 fb25 	bl	800cbc0 <__ulp>
 800b576:	0002      	movs	r2, r0
 800b578:	000b      	movs	r3, r1
 800b57a:	0030      	movs	r0, r6
 800b57c:	0039      	movs	r1, r7
 800b57e:	f7f6 f875 	bl	800166c <__aeabi_dmul>
 800b582:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b584:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b586:	f7f5 f917 	bl	80007b8 <__aeabi_dadd>
 800b58a:	0006      	movs	r6, r0
 800b58c:	000f      	movs	r7, r1
 800b58e:	e78f      	b.n	800b4b0 <_strtod_l+0xae4>
 800b590:	0002      	movs	r2, r0
 800b592:	9216      	str	r2, [sp, #88]	; 0x58
 800b594:	9317      	str	r3, [sp, #92]	; 0x5c
 800b596:	e7dd      	b.n	800b554 <_strtod_l+0xb88>
 800b598:	4b10      	ldr	r3, [pc, #64]	; (800b5dc <_strtod_l+0xc10>)
 800b59a:	f7f4 ff5b 	bl	8000454 <__aeabi_dcmplt>
 800b59e:	e7b2      	b.n	800b506 <_strtod_l+0xb3a>
 800b5a0:	fff00000 	.word	0xfff00000
 800b5a4:	000fffff 	.word	0x000fffff
 800b5a8:	3ff00000 	.word	0x3ff00000
 800b5ac:	3fe00000 	.word	0x3fe00000
 800b5b0:	7ff00000 	.word	0x7ff00000
 800b5b4:	7fe00000 	.word	0x7fe00000
 800b5b8:	fcb00000 	.word	0xfcb00000
 800b5bc:	7c9fffff 	.word	0x7c9fffff
 800b5c0:	7fefffff 	.word	0x7fefffff
 800b5c4:	bff00000 	.word	0xbff00000
 800b5c8:	94a03595 	.word	0x94a03595
 800b5cc:	3fdfffff 	.word	0x3fdfffff
 800b5d0:	35afe535 	.word	0x35afe535
 800b5d4:	ffc00000 	.word	0xffc00000
 800b5d8:	41dfffff 	.word	0x41dfffff
 800b5dc:	3fcfffff 	.word	0x3fcfffff

0800b5e0 <_strtod_r>:
 800b5e0:	b510      	push	{r4, lr}
 800b5e2:	4b02      	ldr	r3, [pc, #8]	; (800b5ec <_strtod_r+0xc>)
 800b5e4:	f7ff f9f2 	bl	800a9cc <_strtod_l>
 800b5e8:	bd10      	pop	{r4, pc}
 800b5ea:	46c0      	nop			; (mov r8, r8)
 800b5ec:	20000448 	.word	0x20000448

0800b5f0 <strtod>:
 800b5f0:	b510      	push	{r4, lr}
 800b5f2:	4c04      	ldr	r4, [pc, #16]	; (800b604 <strtod+0x14>)
 800b5f4:	000a      	movs	r2, r1
 800b5f6:	0001      	movs	r1, r0
 800b5f8:	4b03      	ldr	r3, [pc, #12]	; (800b608 <strtod+0x18>)
 800b5fa:	6820      	ldr	r0, [r4, #0]
 800b5fc:	f7ff f9e6 	bl	800a9cc <_strtod_l>
 800b600:	bd10      	pop	{r4, pc}
 800b602:	46c0      	nop			; (mov r8, r8)
 800b604:	200006d8 	.word	0x200006d8
 800b608:	20000448 	.word	0x20000448

0800b60c <_strtol_l.constprop.0>:
 800b60c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b60e:	b087      	sub	sp, #28
 800b610:	001e      	movs	r6, r3
 800b612:	9005      	str	r0, [sp, #20]
 800b614:	9101      	str	r1, [sp, #4]
 800b616:	9202      	str	r2, [sp, #8]
 800b618:	2b01      	cmp	r3, #1
 800b61a:	d048      	beq.n	800b6ae <_strtol_l.constprop.0+0xa2>
 800b61c:	000b      	movs	r3, r1
 800b61e:	2e24      	cmp	r6, #36	; 0x24
 800b620:	d845      	bhi.n	800b6ae <_strtol_l.constprop.0+0xa2>
 800b622:	4a3b      	ldr	r2, [pc, #236]	; (800b710 <_strtol_l.constprop.0+0x104>)
 800b624:	2108      	movs	r1, #8
 800b626:	4694      	mov	ip, r2
 800b628:	001a      	movs	r2, r3
 800b62a:	4660      	mov	r0, ip
 800b62c:	7814      	ldrb	r4, [r2, #0]
 800b62e:	3301      	adds	r3, #1
 800b630:	5d00      	ldrb	r0, [r0, r4]
 800b632:	001d      	movs	r5, r3
 800b634:	0007      	movs	r7, r0
 800b636:	400f      	ands	r7, r1
 800b638:	4208      	tst	r0, r1
 800b63a:	d1f5      	bne.n	800b628 <_strtol_l.constprop.0+0x1c>
 800b63c:	2c2d      	cmp	r4, #45	; 0x2d
 800b63e:	d13d      	bne.n	800b6bc <_strtol_l.constprop.0+0xb0>
 800b640:	2701      	movs	r7, #1
 800b642:	781c      	ldrb	r4, [r3, #0]
 800b644:	1c95      	adds	r5, r2, #2
 800b646:	2e00      	cmp	r6, #0
 800b648:	d05e      	beq.n	800b708 <_strtol_l.constprop.0+0xfc>
 800b64a:	2e10      	cmp	r6, #16
 800b64c:	d109      	bne.n	800b662 <_strtol_l.constprop.0+0x56>
 800b64e:	2c30      	cmp	r4, #48	; 0x30
 800b650:	d107      	bne.n	800b662 <_strtol_l.constprop.0+0x56>
 800b652:	2220      	movs	r2, #32
 800b654:	782b      	ldrb	r3, [r5, #0]
 800b656:	4393      	bics	r3, r2
 800b658:	2b58      	cmp	r3, #88	; 0x58
 800b65a:	d150      	bne.n	800b6fe <_strtol_l.constprop.0+0xf2>
 800b65c:	2610      	movs	r6, #16
 800b65e:	786c      	ldrb	r4, [r5, #1]
 800b660:	3502      	adds	r5, #2
 800b662:	4b2c      	ldr	r3, [pc, #176]	; (800b714 <_strtol_l.constprop.0+0x108>)
 800b664:	0031      	movs	r1, r6
 800b666:	18fb      	adds	r3, r7, r3
 800b668:	0018      	movs	r0, r3
 800b66a:	9303      	str	r3, [sp, #12]
 800b66c:	f7f4 fdec 	bl	8000248 <__aeabi_uidivmod>
 800b670:	2200      	movs	r2, #0
 800b672:	9104      	str	r1, [sp, #16]
 800b674:	2101      	movs	r1, #1
 800b676:	4684      	mov	ip, r0
 800b678:	0010      	movs	r0, r2
 800b67a:	4249      	negs	r1, r1
 800b67c:	0023      	movs	r3, r4
 800b67e:	3b30      	subs	r3, #48	; 0x30
 800b680:	2b09      	cmp	r3, #9
 800b682:	d903      	bls.n	800b68c <_strtol_l.constprop.0+0x80>
 800b684:	3b11      	subs	r3, #17
 800b686:	2b19      	cmp	r3, #25
 800b688:	d81d      	bhi.n	800b6c6 <_strtol_l.constprop.0+0xba>
 800b68a:	330a      	adds	r3, #10
 800b68c:	429e      	cmp	r6, r3
 800b68e:	dd1e      	ble.n	800b6ce <_strtol_l.constprop.0+0xc2>
 800b690:	1c54      	adds	r4, r2, #1
 800b692:	d009      	beq.n	800b6a8 <_strtol_l.constprop.0+0x9c>
 800b694:	000a      	movs	r2, r1
 800b696:	4584      	cmp	ip, r0
 800b698:	d306      	bcc.n	800b6a8 <_strtol_l.constprop.0+0x9c>
 800b69a:	d102      	bne.n	800b6a2 <_strtol_l.constprop.0+0x96>
 800b69c:	9c04      	ldr	r4, [sp, #16]
 800b69e:	429c      	cmp	r4, r3
 800b6a0:	db02      	blt.n	800b6a8 <_strtol_l.constprop.0+0x9c>
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	4370      	muls	r0, r6
 800b6a6:	1818      	adds	r0, r3, r0
 800b6a8:	782c      	ldrb	r4, [r5, #0]
 800b6aa:	3501      	adds	r5, #1
 800b6ac:	e7e6      	b.n	800b67c <_strtol_l.constprop.0+0x70>
 800b6ae:	f000 fa7d 	bl	800bbac <__errno>
 800b6b2:	2316      	movs	r3, #22
 800b6b4:	6003      	str	r3, [r0, #0]
 800b6b6:	2000      	movs	r0, #0
 800b6b8:	b007      	add	sp, #28
 800b6ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6bc:	2c2b      	cmp	r4, #43	; 0x2b
 800b6be:	d1c2      	bne.n	800b646 <_strtol_l.constprop.0+0x3a>
 800b6c0:	781c      	ldrb	r4, [r3, #0]
 800b6c2:	1c95      	adds	r5, r2, #2
 800b6c4:	e7bf      	b.n	800b646 <_strtol_l.constprop.0+0x3a>
 800b6c6:	0023      	movs	r3, r4
 800b6c8:	3b61      	subs	r3, #97	; 0x61
 800b6ca:	2b19      	cmp	r3, #25
 800b6cc:	d9dd      	bls.n	800b68a <_strtol_l.constprop.0+0x7e>
 800b6ce:	1c53      	adds	r3, r2, #1
 800b6d0:	d109      	bne.n	800b6e6 <_strtol_l.constprop.0+0xda>
 800b6d2:	2322      	movs	r3, #34	; 0x22
 800b6d4:	9a05      	ldr	r2, [sp, #20]
 800b6d6:	9803      	ldr	r0, [sp, #12]
 800b6d8:	6013      	str	r3, [r2, #0]
 800b6da:	9b02      	ldr	r3, [sp, #8]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d0eb      	beq.n	800b6b8 <_strtol_l.constprop.0+0xac>
 800b6e0:	1e6b      	subs	r3, r5, #1
 800b6e2:	9301      	str	r3, [sp, #4]
 800b6e4:	e007      	b.n	800b6f6 <_strtol_l.constprop.0+0xea>
 800b6e6:	2f00      	cmp	r7, #0
 800b6e8:	d000      	beq.n	800b6ec <_strtol_l.constprop.0+0xe0>
 800b6ea:	4240      	negs	r0, r0
 800b6ec:	9b02      	ldr	r3, [sp, #8]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d0e2      	beq.n	800b6b8 <_strtol_l.constprop.0+0xac>
 800b6f2:	2a00      	cmp	r2, #0
 800b6f4:	d1f4      	bne.n	800b6e0 <_strtol_l.constprop.0+0xd4>
 800b6f6:	9b02      	ldr	r3, [sp, #8]
 800b6f8:	9a01      	ldr	r2, [sp, #4]
 800b6fa:	601a      	str	r2, [r3, #0]
 800b6fc:	e7dc      	b.n	800b6b8 <_strtol_l.constprop.0+0xac>
 800b6fe:	2430      	movs	r4, #48	; 0x30
 800b700:	2e00      	cmp	r6, #0
 800b702:	d1ae      	bne.n	800b662 <_strtol_l.constprop.0+0x56>
 800b704:	3608      	adds	r6, #8
 800b706:	e7ac      	b.n	800b662 <_strtol_l.constprop.0+0x56>
 800b708:	2c30      	cmp	r4, #48	; 0x30
 800b70a:	d0a2      	beq.n	800b652 <_strtol_l.constprop.0+0x46>
 800b70c:	260a      	movs	r6, #10
 800b70e:	e7a8      	b.n	800b662 <_strtol_l.constprop.0+0x56>
 800b710:	08013f91 	.word	0x08013f91
 800b714:	7fffffff 	.word	0x7fffffff

0800b718 <_strtol_r>:
 800b718:	b510      	push	{r4, lr}
 800b71a:	f7ff ff77 	bl	800b60c <_strtol_l.constprop.0>
 800b71e:	bd10      	pop	{r4, pc}

0800b720 <strtol>:
 800b720:	b510      	push	{r4, lr}
 800b722:	4c04      	ldr	r4, [pc, #16]	; (800b734 <strtol+0x14>)
 800b724:	0013      	movs	r3, r2
 800b726:	000a      	movs	r2, r1
 800b728:	0001      	movs	r1, r0
 800b72a:	6820      	ldr	r0, [r4, #0]
 800b72c:	f7ff ff6e 	bl	800b60c <_strtol_l.constprop.0>
 800b730:	bd10      	pop	{r4, pc}
 800b732:	46c0      	nop			; (mov r8, r8)
 800b734:	200006d8 	.word	0x200006d8

0800b738 <std>:
 800b738:	2300      	movs	r3, #0
 800b73a:	b510      	push	{r4, lr}
 800b73c:	0004      	movs	r4, r0
 800b73e:	6003      	str	r3, [r0, #0]
 800b740:	6043      	str	r3, [r0, #4]
 800b742:	6083      	str	r3, [r0, #8]
 800b744:	8181      	strh	r1, [r0, #12]
 800b746:	6643      	str	r3, [r0, #100]	; 0x64
 800b748:	81c2      	strh	r2, [r0, #14]
 800b74a:	6103      	str	r3, [r0, #16]
 800b74c:	6143      	str	r3, [r0, #20]
 800b74e:	6183      	str	r3, [r0, #24]
 800b750:	0019      	movs	r1, r3
 800b752:	2208      	movs	r2, #8
 800b754:	305c      	adds	r0, #92	; 0x5c
 800b756:	f000 f97d 	bl	800ba54 <memset>
 800b75a:	4b0b      	ldr	r3, [pc, #44]	; (800b788 <std+0x50>)
 800b75c:	61e4      	str	r4, [r4, #28]
 800b75e:	6223      	str	r3, [r4, #32]
 800b760:	4b0a      	ldr	r3, [pc, #40]	; (800b78c <std+0x54>)
 800b762:	6263      	str	r3, [r4, #36]	; 0x24
 800b764:	4b0a      	ldr	r3, [pc, #40]	; (800b790 <std+0x58>)
 800b766:	62a3      	str	r3, [r4, #40]	; 0x28
 800b768:	4b0a      	ldr	r3, [pc, #40]	; (800b794 <std+0x5c>)
 800b76a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b76c:	4b0a      	ldr	r3, [pc, #40]	; (800b798 <std+0x60>)
 800b76e:	429c      	cmp	r4, r3
 800b770:	d005      	beq.n	800b77e <std+0x46>
 800b772:	4b0a      	ldr	r3, [pc, #40]	; (800b79c <std+0x64>)
 800b774:	429c      	cmp	r4, r3
 800b776:	d002      	beq.n	800b77e <std+0x46>
 800b778:	4b09      	ldr	r3, [pc, #36]	; (800b7a0 <std+0x68>)
 800b77a:	429c      	cmp	r4, r3
 800b77c:	d103      	bne.n	800b786 <std+0x4e>
 800b77e:	0020      	movs	r0, r4
 800b780:	3058      	adds	r0, #88	; 0x58
 800b782:	f000 fa3d 	bl	800bc00 <__retarget_lock_init_recursive>
 800b786:	bd10      	pop	{r4, pc}
 800b788:	0800b9b9 	.word	0x0800b9b9
 800b78c:	0800b9e5 	.word	0x0800b9e5
 800b790:	0800ba1d 	.word	0x0800ba1d
 800b794:	0800ba49 	.word	0x0800ba49
 800b798:	20000b70 	.word	0x20000b70
 800b79c:	20000bd8 	.word	0x20000bd8
 800b7a0:	20000c40 	.word	0x20000c40

0800b7a4 <stdio_exit_handler>:
 800b7a4:	b510      	push	{r4, lr}
 800b7a6:	4a03      	ldr	r2, [pc, #12]	; (800b7b4 <stdio_exit_handler+0x10>)
 800b7a8:	4903      	ldr	r1, [pc, #12]	; (800b7b8 <stdio_exit_handler+0x14>)
 800b7aa:	4804      	ldr	r0, [pc, #16]	; (800b7bc <stdio_exit_handler+0x18>)
 800b7ac:	f000 f86c 	bl	800b888 <_fwalk_sglue>
 800b7b0:	bd10      	pop	{r4, pc}
 800b7b2:	46c0      	nop			; (mov r8, r8)
 800b7b4:	2000043c 	.word	0x2000043c
 800b7b8:	0800f701 	.word	0x0800f701
 800b7bc:	200005b8 	.word	0x200005b8

0800b7c0 <cleanup_stdio>:
 800b7c0:	6841      	ldr	r1, [r0, #4]
 800b7c2:	4b0b      	ldr	r3, [pc, #44]	; (800b7f0 <cleanup_stdio+0x30>)
 800b7c4:	b510      	push	{r4, lr}
 800b7c6:	0004      	movs	r4, r0
 800b7c8:	4299      	cmp	r1, r3
 800b7ca:	d001      	beq.n	800b7d0 <cleanup_stdio+0x10>
 800b7cc:	f003 ff98 	bl	800f700 <_fclose_r>
 800b7d0:	68a1      	ldr	r1, [r4, #8]
 800b7d2:	4b08      	ldr	r3, [pc, #32]	; (800b7f4 <cleanup_stdio+0x34>)
 800b7d4:	4299      	cmp	r1, r3
 800b7d6:	d002      	beq.n	800b7de <cleanup_stdio+0x1e>
 800b7d8:	0020      	movs	r0, r4
 800b7da:	f003 ff91 	bl	800f700 <_fclose_r>
 800b7de:	68e1      	ldr	r1, [r4, #12]
 800b7e0:	4b05      	ldr	r3, [pc, #20]	; (800b7f8 <cleanup_stdio+0x38>)
 800b7e2:	4299      	cmp	r1, r3
 800b7e4:	d002      	beq.n	800b7ec <cleanup_stdio+0x2c>
 800b7e6:	0020      	movs	r0, r4
 800b7e8:	f003 ff8a 	bl	800f700 <_fclose_r>
 800b7ec:	bd10      	pop	{r4, pc}
 800b7ee:	46c0      	nop			; (mov r8, r8)
 800b7f0:	20000b70 	.word	0x20000b70
 800b7f4:	20000bd8 	.word	0x20000bd8
 800b7f8:	20000c40 	.word	0x20000c40

0800b7fc <global_stdio_init.part.0>:
 800b7fc:	b510      	push	{r4, lr}
 800b7fe:	4b09      	ldr	r3, [pc, #36]	; (800b824 <global_stdio_init.part.0+0x28>)
 800b800:	4a09      	ldr	r2, [pc, #36]	; (800b828 <global_stdio_init.part.0+0x2c>)
 800b802:	2104      	movs	r1, #4
 800b804:	601a      	str	r2, [r3, #0]
 800b806:	4809      	ldr	r0, [pc, #36]	; (800b82c <global_stdio_init.part.0+0x30>)
 800b808:	2200      	movs	r2, #0
 800b80a:	f7ff ff95 	bl	800b738 <std>
 800b80e:	2201      	movs	r2, #1
 800b810:	2109      	movs	r1, #9
 800b812:	4807      	ldr	r0, [pc, #28]	; (800b830 <global_stdio_init.part.0+0x34>)
 800b814:	f7ff ff90 	bl	800b738 <std>
 800b818:	2202      	movs	r2, #2
 800b81a:	2112      	movs	r1, #18
 800b81c:	4805      	ldr	r0, [pc, #20]	; (800b834 <global_stdio_init.part.0+0x38>)
 800b81e:	f7ff ff8b 	bl	800b738 <std>
 800b822:	bd10      	pop	{r4, pc}
 800b824:	20000ca8 	.word	0x20000ca8
 800b828:	0800b7a5 	.word	0x0800b7a5
 800b82c:	20000b70 	.word	0x20000b70
 800b830:	20000bd8 	.word	0x20000bd8
 800b834:	20000c40 	.word	0x20000c40

0800b838 <__sfp_lock_acquire>:
 800b838:	b510      	push	{r4, lr}
 800b83a:	4802      	ldr	r0, [pc, #8]	; (800b844 <__sfp_lock_acquire+0xc>)
 800b83c:	f000 f9e2 	bl	800bc04 <__retarget_lock_acquire_recursive>
 800b840:	bd10      	pop	{r4, pc}
 800b842:	46c0      	nop			; (mov r8, r8)
 800b844:	20000cb2 	.word	0x20000cb2

0800b848 <__sfp_lock_release>:
 800b848:	b510      	push	{r4, lr}
 800b84a:	4802      	ldr	r0, [pc, #8]	; (800b854 <__sfp_lock_release+0xc>)
 800b84c:	f000 f9db 	bl	800bc06 <__retarget_lock_release_recursive>
 800b850:	bd10      	pop	{r4, pc}
 800b852:	46c0      	nop			; (mov r8, r8)
 800b854:	20000cb2 	.word	0x20000cb2

0800b858 <__sinit>:
 800b858:	b510      	push	{r4, lr}
 800b85a:	0004      	movs	r4, r0
 800b85c:	f7ff ffec 	bl	800b838 <__sfp_lock_acquire>
 800b860:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b862:	2b00      	cmp	r3, #0
 800b864:	d002      	beq.n	800b86c <__sinit+0x14>
 800b866:	f7ff ffef 	bl	800b848 <__sfp_lock_release>
 800b86a:	bd10      	pop	{r4, pc}
 800b86c:	4b04      	ldr	r3, [pc, #16]	; (800b880 <__sinit+0x28>)
 800b86e:	6363      	str	r3, [r4, #52]	; 0x34
 800b870:	4b04      	ldr	r3, [pc, #16]	; (800b884 <__sinit+0x2c>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d1f6      	bne.n	800b866 <__sinit+0xe>
 800b878:	f7ff ffc0 	bl	800b7fc <global_stdio_init.part.0>
 800b87c:	e7f3      	b.n	800b866 <__sinit+0xe>
 800b87e:	46c0      	nop			; (mov r8, r8)
 800b880:	0800b7c1 	.word	0x0800b7c1
 800b884:	20000ca8 	.word	0x20000ca8

0800b888 <_fwalk_sglue>:
 800b888:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b88a:	0014      	movs	r4, r2
 800b88c:	2600      	movs	r6, #0
 800b88e:	9000      	str	r0, [sp, #0]
 800b890:	9101      	str	r1, [sp, #4]
 800b892:	68a5      	ldr	r5, [r4, #8]
 800b894:	6867      	ldr	r7, [r4, #4]
 800b896:	3f01      	subs	r7, #1
 800b898:	d504      	bpl.n	800b8a4 <_fwalk_sglue+0x1c>
 800b89a:	6824      	ldr	r4, [r4, #0]
 800b89c:	2c00      	cmp	r4, #0
 800b89e:	d1f8      	bne.n	800b892 <_fwalk_sglue+0xa>
 800b8a0:	0030      	movs	r0, r6
 800b8a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b8a4:	89ab      	ldrh	r3, [r5, #12]
 800b8a6:	2b01      	cmp	r3, #1
 800b8a8:	d908      	bls.n	800b8bc <_fwalk_sglue+0x34>
 800b8aa:	220e      	movs	r2, #14
 800b8ac:	5eab      	ldrsh	r3, [r5, r2]
 800b8ae:	3301      	adds	r3, #1
 800b8b0:	d004      	beq.n	800b8bc <_fwalk_sglue+0x34>
 800b8b2:	0029      	movs	r1, r5
 800b8b4:	9800      	ldr	r0, [sp, #0]
 800b8b6:	9b01      	ldr	r3, [sp, #4]
 800b8b8:	4798      	blx	r3
 800b8ba:	4306      	orrs	r6, r0
 800b8bc:	3568      	adds	r5, #104	; 0x68
 800b8be:	e7ea      	b.n	800b896 <_fwalk_sglue+0xe>

0800b8c0 <snprintf>:
 800b8c0:	b40c      	push	{r2, r3}
 800b8c2:	b530      	push	{r4, r5, lr}
 800b8c4:	4b17      	ldr	r3, [pc, #92]	; (800b924 <snprintf+0x64>)
 800b8c6:	000c      	movs	r4, r1
 800b8c8:	681d      	ldr	r5, [r3, #0]
 800b8ca:	b09d      	sub	sp, #116	; 0x74
 800b8cc:	2900      	cmp	r1, #0
 800b8ce:	da08      	bge.n	800b8e2 <snprintf+0x22>
 800b8d0:	238b      	movs	r3, #139	; 0x8b
 800b8d2:	2001      	movs	r0, #1
 800b8d4:	602b      	str	r3, [r5, #0]
 800b8d6:	4240      	negs	r0, r0
 800b8d8:	b01d      	add	sp, #116	; 0x74
 800b8da:	bc30      	pop	{r4, r5}
 800b8dc:	bc08      	pop	{r3}
 800b8de:	b002      	add	sp, #8
 800b8e0:	4718      	bx	r3
 800b8e2:	2382      	movs	r3, #130	; 0x82
 800b8e4:	466a      	mov	r2, sp
 800b8e6:	009b      	lsls	r3, r3, #2
 800b8e8:	8293      	strh	r3, [r2, #20]
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	9002      	str	r0, [sp, #8]
 800b8ee:	9006      	str	r0, [sp, #24]
 800b8f0:	4299      	cmp	r1, r3
 800b8f2:	d000      	beq.n	800b8f6 <snprintf+0x36>
 800b8f4:	1e4b      	subs	r3, r1, #1
 800b8f6:	9304      	str	r3, [sp, #16]
 800b8f8:	9307      	str	r3, [sp, #28]
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	466a      	mov	r2, sp
 800b8fe:	425b      	negs	r3, r3
 800b900:	82d3      	strh	r3, [r2, #22]
 800b902:	0028      	movs	r0, r5
 800b904:	ab21      	add	r3, sp, #132	; 0x84
 800b906:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b908:	a902      	add	r1, sp, #8
 800b90a:	9301      	str	r3, [sp, #4]
 800b90c:	f001 fa9a 	bl	800ce44 <_svfprintf_r>
 800b910:	1c43      	adds	r3, r0, #1
 800b912:	da01      	bge.n	800b918 <snprintf+0x58>
 800b914:	238b      	movs	r3, #139	; 0x8b
 800b916:	602b      	str	r3, [r5, #0]
 800b918:	2c00      	cmp	r4, #0
 800b91a:	d0dd      	beq.n	800b8d8 <snprintf+0x18>
 800b91c:	2200      	movs	r2, #0
 800b91e:	9b02      	ldr	r3, [sp, #8]
 800b920:	701a      	strb	r2, [r3, #0]
 800b922:	e7d9      	b.n	800b8d8 <snprintf+0x18>
 800b924:	200006d8 	.word	0x200006d8

0800b928 <sprintf>:
 800b928:	b40e      	push	{r1, r2, r3}
 800b92a:	b500      	push	{lr}
 800b92c:	490b      	ldr	r1, [pc, #44]	; (800b95c <sprintf+0x34>)
 800b92e:	b09c      	sub	sp, #112	; 0x70
 800b930:	ab1d      	add	r3, sp, #116	; 0x74
 800b932:	9002      	str	r0, [sp, #8]
 800b934:	9006      	str	r0, [sp, #24]
 800b936:	9107      	str	r1, [sp, #28]
 800b938:	9104      	str	r1, [sp, #16]
 800b93a:	4809      	ldr	r0, [pc, #36]	; (800b960 <sprintf+0x38>)
 800b93c:	4909      	ldr	r1, [pc, #36]	; (800b964 <sprintf+0x3c>)
 800b93e:	cb04      	ldmia	r3!, {r2}
 800b940:	9105      	str	r1, [sp, #20]
 800b942:	6800      	ldr	r0, [r0, #0]
 800b944:	a902      	add	r1, sp, #8
 800b946:	9301      	str	r3, [sp, #4]
 800b948:	f001 fa7c 	bl	800ce44 <_svfprintf_r>
 800b94c:	2200      	movs	r2, #0
 800b94e:	9b02      	ldr	r3, [sp, #8]
 800b950:	701a      	strb	r2, [r3, #0]
 800b952:	b01c      	add	sp, #112	; 0x70
 800b954:	bc08      	pop	{r3}
 800b956:	b003      	add	sp, #12
 800b958:	4718      	bx	r3
 800b95a:	46c0      	nop			; (mov r8, r8)
 800b95c:	7fffffff 	.word	0x7fffffff
 800b960:	200006d8 	.word	0x200006d8
 800b964:	ffff0208 	.word	0xffff0208

0800b968 <sscanf>:
 800b968:	b40e      	push	{r1, r2, r3}
 800b96a:	b530      	push	{r4, r5, lr}
 800b96c:	2381      	movs	r3, #129	; 0x81
 800b96e:	b09c      	sub	sp, #112	; 0x70
 800b970:	466a      	mov	r2, sp
 800b972:	ac1f      	add	r4, sp, #124	; 0x7c
 800b974:	009b      	lsls	r3, r3, #2
 800b976:	cc20      	ldmia	r4!, {r5}
 800b978:	8293      	strh	r3, [r2, #20]
 800b97a:	9002      	str	r0, [sp, #8]
 800b97c:	9006      	str	r0, [sp, #24]
 800b97e:	f7f4 fbc1 	bl	8000104 <strlen>
 800b982:	4b0b      	ldr	r3, [pc, #44]	; (800b9b0 <sscanf+0x48>)
 800b984:	466a      	mov	r2, sp
 800b986:	930a      	str	r3, [sp, #40]	; 0x28
 800b988:	2300      	movs	r3, #0
 800b98a:	9003      	str	r0, [sp, #12]
 800b98c:	9007      	str	r0, [sp, #28]
 800b98e:	4809      	ldr	r0, [pc, #36]	; (800b9b4 <sscanf+0x4c>)
 800b990:	930e      	str	r3, [sp, #56]	; 0x38
 800b992:	9313      	str	r3, [sp, #76]	; 0x4c
 800b994:	3b01      	subs	r3, #1
 800b996:	82d3      	strh	r3, [r2, #22]
 800b998:	a902      	add	r1, sp, #8
 800b99a:	0023      	movs	r3, r4
 800b99c:	002a      	movs	r2, r5
 800b99e:	6800      	ldr	r0, [r0, #0]
 800b9a0:	9401      	str	r4, [sp, #4]
 800b9a2:	f002 fc91 	bl	800e2c8 <__ssvfscanf_r>
 800b9a6:	b01c      	add	sp, #112	; 0x70
 800b9a8:	bc30      	pop	{r4, r5}
 800b9aa:	bc08      	pop	{r3}
 800b9ac:	b003      	add	sp, #12
 800b9ae:	4718      	bx	r3
 800b9b0:	0800b9e1 	.word	0x0800b9e1
 800b9b4:	200006d8 	.word	0x200006d8

0800b9b8 <__sread>:
 800b9b8:	b570      	push	{r4, r5, r6, lr}
 800b9ba:	000c      	movs	r4, r1
 800b9bc:	250e      	movs	r5, #14
 800b9be:	5f49      	ldrsh	r1, [r1, r5]
 800b9c0:	f000 f8ba 	bl	800bb38 <_read_r>
 800b9c4:	2800      	cmp	r0, #0
 800b9c6:	db03      	blt.n	800b9d0 <__sread+0x18>
 800b9c8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b9ca:	181b      	adds	r3, r3, r0
 800b9cc:	6523      	str	r3, [r4, #80]	; 0x50
 800b9ce:	bd70      	pop	{r4, r5, r6, pc}
 800b9d0:	89a3      	ldrh	r3, [r4, #12]
 800b9d2:	4a02      	ldr	r2, [pc, #8]	; (800b9dc <__sread+0x24>)
 800b9d4:	4013      	ands	r3, r2
 800b9d6:	81a3      	strh	r3, [r4, #12]
 800b9d8:	e7f9      	b.n	800b9ce <__sread+0x16>
 800b9da:	46c0      	nop			; (mov r8, r8)
 800b9dc:	ffffefff 	.word	0xffffefff

0800b9e0 <__seofread>:
 800b9e0:	2000      	movs	r0, #0
 800b9e2:	4770      	bx	lr

0800b9e4 <__swrite>:
 800b9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9e6:	001f      	movs	r7, r3
 800b9e8:	898b      	ldrh	r3, [r1, #12]
 800b9ea:	0005      	movs	r5, r0
 800b9ec:	000c      	movs	r4, r1
 800b9ee:	0016      	movs	r6, r2
 800b9f0:	05db      	lsls	r3, r3, #23
 800b9f2:	d505      	bpl.n	800ba00 <__swrite+0x1c>
 800b9f4:	230e      	movs	r3, #14
 800b9f6:	5ec9      	ldrsh	r1, [r1, r3]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	2302      	movs	r3, #2
 800b9fc:	f000 f888 	bl	800bb10 <_lseek_r>
 800ba00:	89a3      	ldrh	r3, [r4, #12]
 800ba02:	4a05      	ldr	r2, [pc, #20]	; (800ba18 <__swrite+0x34>)
 800ba04:	0028      	movs	r0, r5
 800ba06:	4013      	ands	r3, r2
 800ba08:	81a3      	strh	r3, [r4, #12]
 800ba0a:	0032      	movs	r2, r6
 800ba0c:	230e      	movs	r3, #14
 800ba0e:	5ee1      	ldrsh	r1, [r4, r3]
 800ba10:	003b      	movs	r3, r7
 800ba12:	f000 f8b7 	bl	800bb84 <_write_r>
 800ba16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba18:	ffffefff 	.word	0xffffefff

0800ba1c <__sseek>:
 800ba1c:	b570      	push	{r4, r5, r6, lr}
 800ba1e:	000c      	movs	r4, r1
 800ba20:	250e      	movs	r5, #14
 800ba22:	5f49      	ldrsh	r1, [r1, r5]
 800ba24:	f000 f874 	bl	800bb10 <_lseek_r>
 800ba28:	89a3      	ldrh	r3, [r4, #12]
 800ba2a:	1c42      	adds	r2, r0, #1
 800ba2c:	d103      	bne.n	800ba36 <__sseek+0x1a>
 800ba2e:	4a05      	ldr	r2, [pc, #20]	; (800ba44 <__sseek+0x28>)
 800ba30:	4013      	ands	r3, r2
 800ba32:	81a3      	strh	r3, [r4, #12]
 800ba34:	bd70      	pop	{r4, r5, r6, pc}
 800ba36:	2280      	movs	r2, #128	; 0x80
 800ba38:	0152      	lsls	r2, r2, #5
 800ba3a:	4313      	orrs	r3, r2
 800ba3c:	81a3      	strh	r3, [r4, #12]
 800ba3e:	6520      	str	r0, [r4, #80]	; 0x50
 800ba40:	e7f8      	b.n	800ba34 <__sseek+0x18>
 800ba42:	46c0      	nop			; (mov r8, r8)
 800ba44:	ffffefff 	.word	0xffffefff

0800ba48 <__sclose>:
 800ba48:	b510      	push	{r4, lr}
 800ba4a:	230e      	movs	r3, #14
 800ba4c:	5ec9      	ldrsh	r1, [r1, r3]
 800ba4e:	f000 f84d 	bl	800baec <_close_r>
 800ba52:	bd10      	pop	{r4, pc}

0800ba54 <memset>:
 800ba54:	0003      	movs	r3, r0
 800ba56:	1882      	adds	r2, r0, r2
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	d100      	bne.n	800ba5e <memset+0xa>
 800ba5c:	4770      	bx	lr
 800ba5e:	7019      	strb	r1, [r3, #0]
 800ba60:	3301      	adds	r3, #1
 800ba62:	e7f9      	b.n	800ba58 <memset+0x4>

0800ba64 <strncmp>:
 800ba64:	b530      	push	{r4, r5, lr}
 800ba66:	0005      	movs	r5, r0
 800ba68:	1e10      	subs	r0, r2, #0
 800ba6a:	d00b      	beq.n	800ba84 <strncmp+0x20>
 800ba6c:	2400      	movs	r4, #0
 800ba6e:	3a01      	subs	r2, #1
 800ba70:	5d2b      	ldrb	r3, [r5, r4]
 800ba72:	5d08      	ldrb	r0, [r1, r4]
 800ba74:	4283      	cmp	r3, r0
 800ba76:	d104      	bne.n	800ba82 <strncmp+0x1e>
 800ba78:	42a2      	cmp	r2, r4
 800ba7a:	d002      	beq.n	800ba82 <strncmp+0x1e>
 800ba7c:	3401      	adds	r4, #1
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d1f6      	bne.n	800ba70 <strncmp+0xc>
 800ba82:	1a18      	subs	r0, r3, r0
 800ba84:	bd30      	pop	{r4, r5, pc}

0800ba86 <strncpy>:
 800ba86:	0003      	movs	r3, r0
 800ba88:	b530      	push	{r4, r5, lr}
 800ba8a:	001d      	movs	r5, r3
 800ba8c:	2a00      	cmp	r2, #0
 800ba8e:	d006      	beq.n	800ba9e <strncpy+0x18>
 800ba90:	780c      	ldrb	r4, [r1, #0]
 800ba92:	3a01      	subs	r2, #1
 800ba94:	3301      	adds	r3, #1
 800ba96:	702c      	strb	r4, [r5, #0]
 800ba98:	3101      	adds	r1, #1
 800ba9a:	2c00      	cmp	r4, #0
 800ba9c:	d1f5      	bne.n	800ba8a <strncpy+0x4>
 800ba9e:	2100      	movs	r1, #0
 800baa0:	189a      	adds	r2, r3, r2
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d100      	bne.n	800baa8 <strncpy+0x22>
 800baa6:	bd30      	pop	{r4, r5, pc}
 800baa8:	7019      	strb	r1, [r3, #0]
 800baaa:	3301      	adds	r3, #1
 800baac:	e7f9      	b.n	800baa2 <strncpy+0x1c>

0800baae <strstr>:
 800baae:	780a      	ldrb	r2, [r1, #0]
 800bab0:	b530      	push	{r4, r5, lr}
 800bab2:	2a00      	cmp	r2, #0
 800bab4:	d10c      	bne.n	800bad0 <strstr+0x22>
 800bab6:	bd30      	pop	{r4, r5, pc}
 800bab8:	429a      	cmp	r2, r3
 800baba:	d108      	bne.n	800bace <strstr+0x20>
 800babc:	2301      	movs	r3, #1
 800babe:	5ccc      	ldrb	r4, [r1, r3]
 800bac0:	2c00      	cmp	r4, #0
 800bac2:	d0f8      	beq.n	800bab6 <strstr+0x8>
 800bac4:	5cc5      	ldrb	r5, [r0, r3]
 800bac6:	42a5      	cmp	r5, r4
 800bac8:	d101      	bne.n	800bace <strstr+0x20>
 800baca:	3301      	adds	r3, #1
 800bacc:	e7f7      	b.n	800babe <strstr+0x10>
 800bace:	3001      	adds	r0, #1
 800bad0:	7803      	ldrb	r3, [r0, #0]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d1f0      	bne.n	800bab8 <strstr+0xa>
 800bad6:	0018      	movs	r0, r3
 800bad8:	e7ed      	b.n	800bab6 <strstr+0x8>
	...

0800badc <__locale_mb_cur_max>:
 800badc:	2294      	movs	r2, #148	; 0x94
 800bade:	4b02      	ldr	r3, [pc, #8]	; (800bae8 <__locale_mb_cur_max+0xc>)
 800bae0:	0052      	lsls	r2, r2, #1
 800bae2:	5c98      	ldrb	r0, [r3, r2]
 800bae4:	4770      	bx	lr
 800bae6:	46c0      	nop			; (mov r8, r8)
 800bae8:	20000448 	.word	0x20000448

0800baec <_close_r>:
 800baec:	2300      	movs	r3, #0
 800baee:	b570      	push	{r4, r5, r6, lr}
 800baf0:	4d06      	ldr	r5, [pc, #24]	; (800bb0c <_close_r+0x20>)
 800baf2:	0004      	movs	r4, r0
 800baf4:	0008      	movs	r0, r1
 800baf6:	602b      	str	r3, [r5, #0]
 800baf8:	f7f7 fdbb 	bl	8003672 <_close>
 800bafc:	1c43      	adds	r3, r0, #1
 800bafe:	d103      	bne.n	800bb08 <_close_r+0x1c>
 800bb00:	682b      	ldr	r3, [r5, #0]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d000      	beq.n	800bb08 <_close_r+0x1c>
 800bb06:	6023      	str	r3, [r4, #0]
 800bb08:	bd70      	pop	{r4, r5, r6, pc}
 800bb0a:	46c0      	nop			; (mov r8, r8)
 800bb0c:	20000cac 	.word	0x20000cac

0800bb10 <_lseek_r>:
 800bb10:	b570      	push	{r4, r5, r6, lr}
 800bb12:	0004      	movs	r4, r0
 800bb14:	0008      	movs	r0, r1
 800bb16:	0011      	movs	r1, r2
 800bb18:	001a      	movs	r2, r3
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	4d05      	ldr	r5, [pc, #20]	; (800bb34 <_lseek_r+0x24>)
 800bb1e:	602b      	str	r3, [r5, #0]
 800bb20:	f7f7 fdc8 	bl	80036b4 <_lseek>
 800bb24:	1c43      	adds	r3, r0, #1
 800bb26:	d103      	bne.n	800bb30 <_lseek_r+0x20>
 800bb28:	682b      	ldr	r3, [r5, #0]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d000      	beq.n	800bb30 <_lseek_r+0x20>
 800bb2e:	6023      	str	r3, [r4, #0]
 800bb30:	bd70      	pop	{r4, r5, r6, pc}
 800bb32:	46c0      	nop			; (mov r8, r8)
 800bb34:	20000cac 	.word	0x20000cac

0800bb38 <_read_r>:
 800bb38:	b570      	push	{r4, r5, r6, lr}
 800bb3a:	0004      	movs	r4, r0
 800bb3c:	0008      	movs	r0, r1
 800bb3e:	0011      	movs	r1, r2
 800bb40:	001a      	movs	r2, r3
 800bb42:	2300      	movs	r3, #0
 800bb44:	4d05      	ldr	r5, [pc, #20]	; (800bb5c <_read_r+0x24>)
 800bb46:	602b      	str	r3, [r5, #0]
 800bb48:	f7f7 fd5a 	bl	8003600 <_read>
 800bb4c:	1c43      	adds	r3, r0, #1
 800bb4e:	d103      	bne.n	800bb58 <_read_r+0x20>
 800bb50:	682b      	ldr	r3, [r5, #0]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d000      	beq.n	800bb58 <_read_r+0x20>
 800bb56:	6023      	str	r3, [r4, #0]
 800bb58:	bd70      	pop	{r4, r5, r6, pc}
 800bb5a:	46c0      	nop			; (mov r8, r8)
 800bb5c:	20000cac 	.word	0x20000cac

0800bb60 <_sbrk_r>:
 800bb60:	2300      	movs	r3, #0
 800bb62:	b570      	push	{r4, r5, r6, lr}
 800bb64:	4d06      	ldr	r5, [pc, #24]	; (800bb80 <_sbrk_r+0x20>)
 800bb66:	0004      	movs	r4, r0
 800bb68:	0008      	movs	r0, r1
 800bb6a:	602b      	str	r3, [r5, #0]
 800bb6c:	f7f7 fdae 	bl	80036cc <_sbrk>
 800bb70:	1c43      	adds	r3, r0, #1
 800bb72:	d103      	bne.n	800bb7c <_sbrk_r+0x1c>
 800bb74:	682b      	ldr	r3, [r5, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d000      	beq.n	800bb7c <_sbrk_r+0x1c>
 800bb7a:	6023      	str	r3, [r4, #0]
 800bb7c:	bd70      	pop	{r4, r5, r6, pc}
 800bb7e:	46c0      	nop			; (mov r8, r8)
 800bb80:	20000cac 	.word	0x20000cac

0800bb84 <_write_r>:
 800bb84:	b570      	push	{r4, r5, r6, lr}
 800bb86:	0004      	movs	r4, r0
 800bb88:	0008      	movs	r0, r1
 800bb8a:	0011      	movs	r1, r2
 800bb8c:	001a      	movs	r2, r3
 800bb8e:	2300      	movs	r3, #0
 800bb90:	4d05      	ldr	r5, [pc, #20]	; (800bba8 <_write_r+0x24>)
 800bb92:	602b      	str	r3, [r5, #0]
 800bb94:	f7f7 fd51 	bl	800363a <_write>
 800bb98:	1c43      	adds	r3, r0, #1
 800bb9a:	d103      	bne.n	800bba4 <_write_r+0x20>
 800bb9c:	682b      	ldr	r3, [r5, #0]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d000      	beq.n	800bba4 <_write_r+0x20>
 800bba2:	6023      	str	r3, [r4, #0]
 800bba4:	bd70      	pop	{r4, r5, r6, pc}
 800bba6:	46c0      	nop			; (mov r8, r8)
 800bba8:	20000cac 	.word	0x20000cac

0800bbac <__errno>:
 800bbac:	4b01      	ldr	r3, [pc, #4]	; (800bbb4 <__errno+0x8>)
 800bbae:	6818      	ldr	r0, [r3, #0]
 800bbb0:	4770      	bx	lr
 800bbb2:	46c0      	nop			; (mov r8, r8)
 800bbb4:	200006d8 	.word	0x200006d8

0800bbb8 <__libc_init_array>:
 800bbb8:	b570      	push	{r4, r5, r6, lr}
 800bbba:	2600      	movs	r6, #0
 800bbbc:	4c0c      	ldr	r4, [pc, #48]	; (800bbf0 <__libc_init_array+0x38>)
 800bbbe:	4d0d      	ldr	r5, [pc, #52]	; (800bbf4 <__libc_init_array+0x3c>)
 800bbc0:	1b64      	subs	r4, r4, r5
 800bbc2:	10a4      	asrs	r4, r4, #2
 800bbc4:	42a6      	cmp	r6, r4
 800bbc6:	d109      	bne.n	800bbdc <__libc_init_array+0x24>
 800bbc8:	2600      	movs	r6, #0
 800bbca:	f006 fcc5 	bl	8012558 <_init>
 800bbce:	4c0a      	ldr	r4, [pc, #40]	; (800bbf8 <__libc_init_array+0x40>)
 800bbd0:	4d0a      	ldr	r5, [pc, #40]	; (800bbfc <__libc_init_array+0x44>)
 800bbd2:	1b64      	subs	r4, r4, r5
 800bbd4:	10a4      	asrs	r4, r4, #2
 800bbd6:	42a6      	cmp	r6, r4
 800bbd8:	d105      	bne.n	800bbe6 <__libc_init_array+0x2e>
 800bbda:	bd70      	pop	{r4, r5, r6, pc}
 800bbdc:	00b3      	lsls	r3, r6, #2
 800bbde:	58eb      	ldr	r3, [r5, r3]
 800bbe0:	4798      	blx	r3
 800bbe2:	3601      	adds	r6, #1
 800bbe4:	e7ee      	b.n	800bbc4 <__libc_init_array+0xc>
 800bbe6:	00b3      	lsls	r3, r6, #2
 800bbe8:	58eb      	ldr	r3, [r5, r3]
 800bbea:	4798      	blx	r3
 800bbec:	3601      	adds	r6, #1
 800bbee:	e7f2      	b.n	800bbd6 <__libc_init_array+0x1e>
 800bbf0:	080143ac 	.word	0x080143ac
 800bbf4:	080143ac 	.word	0x080143ac
 800bbf8:	080143b4 	.word	0x080143b4
 800bbfc:	080143ac 	.word	0x080143ac

0800bc00 <__retarget_lock_init_recursive>:
 800bc00:	4770      	bx	lr

0800bc02 <__retarget_lock_close_recursive>:
 800bc02:	4770      	bx	lr

0800bc04 <__retarget_lock_acquire_recursive>:
 800bc04:	4770      	bx	lr

0800bc06 <__retarget_lock_release_recursive>:
 800bc06:	4770      	bx	lr

0800bc08 <sysconf>:
 800bc08:	2380      	movs	r3, #128	; 0x80
 800bc0a:	b510      	push	{r4, lr}
 800bc0c:	2808      	cmp	r0, #8
 800bc0e:	d004      	beq.n	800bc1a <sysconf+0x12>
 800bc10:	f7ff ffcc 	bl	800bbac <__errno>
 800bc14:	2316      	movs	r3, #22
 800bc16:	6003      	str	r3, [r0, #0]
 800bc18:	3b17      	subs	r3, #23
 800bc1a:	0018      	movs	r0, r3
 800bc1c:	bd10      	pop	{r4, pc}

0800bc1e <memcpy>:
 800bc1e:	2300      	movs	r3, #0
 800bc20:	b510      	push	{r4, lr}
 800bc22:	429a      	cmp	r2, r3
 800bc24:	d100      	bne.n	800bc28 <memcpy+0xa>
 800bc26:	bd10      	pop	{r4, pc}
 800bc28:	5ccc      	ldrb	r4, [r1, r3]
 800bc2a:	54c4      	strb	r4, [r0, r3]
 800bc2c:	3301      	adds	r3, #1
 800bc2e:	e7f8      	b.n	800bc22 <memcpy+0x4>

0800bc30 <nan>:
 800bc30:	2000      	movs	r0, #0
 800bc32:	4901      	ldr	r1, [pc, #4]	; (800bc38 <nan+0x8>)
 800bc34:	4770      	bx	lr
 800bc36:	46c0      	nop			; (mov r8, r8)
 800bc38:	7ff80000 	.word	0x7ff80000

0800bc3c <nanf>:
 800bc3c:	4800      	ldr	r0, [pc, #0]	; (800bc40 <nanf+0x4>)
 800bc3e:	4770      	bx	lr
 800bc40:	7fc00000 	.word	0x7fc00000

0800bc44 <register_fini>:
 800bc44:	4b03      	ldr	r3, [pc, #12]	; (800bc54 <register_fini+0x10>)
 800bc46:	b510      	push	{r4, lr}
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d002      	beq.n	800bc52 <register_fini+0xe>
 800bc4c:	4802      	ldr	r0, [pc, #8]	; (800bc58 <register_fini+0x14>)
 800bc4e:	f000 f805 	bl	800bc5c <atexit>
 800bc52:	bd10      	pop	{r4, pc}
 800bc54:	00000000 	.word	0x00000000
 800bc58:	0800f9b9 	.word	0x0800f9b9

0800bc5c <atexit>:
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	b510      	push	{r4, lr}
 800bc60:	0001      	movs	r1, r0
 800bc62:	001a      	movs	r2, r3
 800bc64:	0018      	movs	r0, r3
 800bc66:	f003 fef9 	bl	800fa5c <__register_exitproc>
 800bc6a:	bd10      	pop	{r4, pc}

0800bc6c <_malloc_trim_r>:
 800bc6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc6e:	0004      	movs	r4, r0
 800bc70:	2008      	movs	r0, #8
 800bc72:	000d      	movs	r5, r1
 800bc74:	f7ff ffc8 	bl	800bc08 <sysconf>
 800bc78:	0006      	movs	r6, r0
 800bc7a:	0020      	movs	r0, r4
 800bc7c:	f7fe fe7e 	bl	800a97c <__malloc_lock>
 800bc80:	2203      	movs	r2, #3
 800bc82:	4f21      	ldr	r7, [pc, #132]	; (800bd08 <_malloc_trim_r+0x9c>)
 800bc84:	0031      	movs	r1, r6
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	685b      	ldr	r3, [r3, #4]
 800bc8a:	4393      	bics	r3, r2
 800bc8c:	1b58      	subs	r0, r3, r5
 800bc8e:	3811      	subs	r0, #17
 800bc90:	1980      	adds	r0, r0, r6
 800bc92:	9301      	str	r3, [sp, #4]
 800bc94:	f7f4 fa52 	bl	800013c <__udivsi3>
 800bc98:	1e45      	subs	r5, r0, #1
 800bc9a:	4375      	muls	r5, r6
 800bc9c:	42ae      	cmp	r6, r5
 800bc9e:	dd04      	ble.n	800bcaa <_malloc_trim_r+0x3e>
 800bca0:	0020      	movs	r0, r4
 800bca2:	f7fe fe73 	bl	800a98c <__malloc_unlock>
 800bca6:	2000      	movs	r0, #0
 800bca8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bcaa:	2100      	movs	r1, #0
 800bcac:	0020      	movs	r0, r4
 800bcae:	f7ff ff57 	bl	800bb60 <_sbrk_r>
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	9a01      	ldr	r2, [sp, #4]
 800bcb6:	189b      	adds	r3, r3, r2
 800bcb8:	4298      	cmp	r0, r3
 800bcba:	d1f1      	bne.n	800bca0 <_malloc_trim_r+0x34>
 800bcbc:	0020      	movs	r0, r4
 800bcbe:	4269      	negs	r1, r5
 800bcc0:	f7ff ff4e 	bl	800bb60 <_sbrk_r>
 800bcc4:	3001      	adds	r0, #1
 800bcc6:	d110      	bne.n	800bcea <_malloc_trim_r+0x7e>
 800bcc8:	2100      	movs	r1, #0
 800bcca:	0020      	movs	r0, r4
 800bccc:	f7ff ff48 	bl	800bb60 <_sbrk_r>
 800bcd0:	68ba      	ldr	r2, [r7, #8]
 800bcd2:	1a81      	subs	r1, r0, r2
 800bcd4:	290f      	cmp	r1, #15
 800bcd6:	dde3      	ble.n	800bca0 <_malloc_trim_r+0x34>
 800bcd8:	4d0c      	ldr	r5, [pc, #48]	; (800bd0c <_malloc_trim_r+0xa0>)
 800bcda:	4b0d      	ldr	r3, [pc, #52]	; (800bd10 <_malloc_trim_r+0xa4>)
 800bcdc:	682d      	ldr	r5, [r5, #0]
 800bcde:	1b40      	subs	r0, r0, r5
 800bce0:	6018      	str	r0, [r3, #0]
 800bce2:	2301      	movs	r3, #1
 800bce4:	430b      	orrs	r3, r1
 800bce6:	6053      	str	r3, [r2, #4]
 800bce8:	e7da      	b.n	800bca0 <_malloc_trim_r+0x34>
 800bcea:	2601      	movs	r6, #1
 800bcec:	9b01      	ldr	r3, [sp, #4]
 800bcee:	68ba      	ldr	r2, [r7, #8]
 800bcf0:	1b5b      	subs	r3, r3, r5
 800bcf2:	4333      	orrs	r3, r6
 800bcf4:	6053      	str	r3, [r2, #4]
 800bcf6:	4a06      	ldr	r2, [pc, #24]	; (800bd10 <_malloc_trim_r+0xa4>)
 800bcf8:	0020      	movs	r0, r4
 800bcfa:	6813      	ldr	r3, [r2, #0]
 800bcfc:	1b5b      	subs	r3, r3, r5
 800bcfe:	6013      	str	r3, [r2, #0]
 800bd00:	f7fe fe44 	bl	800a98c <__malloc_unlock>
 800bd04:	0030      	movs	r0, r6
 800bd06:	e7cf      	b.n	800bca8 <_malloc_trim_r+0x3c>
 800bd08:	2000002c 	.word	0x2000002c
 800bd0c:	20000434 	.word	0x20000434
 800bd10:	20000b3c 	.word	0x20000b3c

0800bd14 <_free_r>:
 800bd14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd16:	1e0d      	subs	r5, r1, #0
 800bd18:	9001      	str	r0, [sp, #4]
 800bd1a:	d02d      	beq.n	800bd78 <_free_r+0x64>
 800bd1c:	f7fe fe2e 	bl	800a97c <__malloc_lock>
 800bd20:	2301      	movs	r3, #1
 800bd22:	0029      	movs	r1, r5
 800bd24:	469c      	mov	ip, r3
 800bd26:	3908      	subs	r1, #8
 800bd28:	684f      	ldr	r7, [r1, #4]
 800bd2a:	4662      	mov	r2, ip
 800bd2c:	003b      	movs	r3, r7
 800bd2e:	4664      	mov	r4, ip
 800bd30:	4393      	bics	r3, r2
 800bd32:	18c8      	adds	r0, r1, r3
 800bd34:	6845      	ldr	r5, [r0, #4]
 800bd36:	3202      	adds	r2, #2
 800bd38:	4395      	bics	r5, r2
 800bd3a:	4a4a      	ldr	r2, [pc, #296]	; (800be64 <_free_r+0x150>)
 800bd3c:	4027      	ands	r7, r4
 800bd3e:	6896      	ldr	r6, [r2, #8]
 800bd40:	4286      	cmp	r6, r0
 800bd42:	d11a      	bne.n	800bd7a <_free_r+0x66>
 800bd44:	195b      	adds	r3, r3, r5
 800bd46:	2f00      	cmp	r7, #0
 800bd48:	d106      	bne.n	800bd58 <_free_r+0x44>
 800bd4a:	6808      	ldr	r0, [r1, #0]
 800bd4c:	1a09      	subs	r1, r1, r0
 800bd4e:	688d      	ldr	r5, [r1, #8]
 800bd50:	181b      	adds	r3, r3, r0
 800bd52:	68c8      	ldr	r0, [r1, #12]
 800bd54:	60e8      	str	r0, [r5, #12]
 800bd56:	6085      	str	r5, [r0, #8]
 800bd58:	2001      	movs	r0, #1
 800bd5a:	4318      	orrs	r0, r3
 800bd5c:	6048      	str	r0, [r1, #4]
 800bd5e:	6091      	str	r1, [r2, #8]
 800bd60:	4a41      	ldr	r2, [pc, #260]	; (800be68 <_free_r+0x154>)
 800bd62:	6812      	ldr	r2, [r2, #0]
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d804      	bhi.n	800bd72 <_free_r+0x5e>
 800bd68:	4b40      	ldr	r3, [pc, #256]	; (800be6c <_free_r+0x158>)
 800bd6a:	9801      	ldr	r0, [sp, #4]
 800bd6c:	6819      	ldr	r1, [r3, #0]
 800bd6e:	f7ff ff7d 	bl	800bc6c <_malloc_trim_r>
 800bd72:	9801      	ldr	r0, [sp, #4]
 800bd74:	f7fe fe0a 	bl	800a98c <__malloc_unlock>
 800bd78:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800bd7a:	2600      	movs	r6, #0
 800bd7c:	6045      	str	r5, [r0, #4]
 800bd7e:	42b7      	cmp	r7, r6
 800bd80:	d109      	bne.n	800bd96 <_free_r+0x82>
 800bd82:	680f      	ldr	r7, [r1, #0]
 800bd84:	4c3a      	ldr	r4, [pc, #232]	; (800be70 <_free_r+0x15c>)
 800bd86:	1bc9      	subs	r1, r1, r7
 800bd88:	19db      	adds	r3, r3, r7
 800bd8a:	688f      	ldr	r7, [r1, #8]
 800bd8c:	42a7      	cmp	r7, r4
 800bd8e:	d02c      	beq.n	800bdea <_free_r+0xd6>
 800bd90:	68cc      	ldr	r4, [r1, #12]
 800bd92:	60fc      	str	r4, [r7, #12]
 800bd94:	60a7      	str	r7, [r4, #8]
 800bd96:	1947      	adds	r7, r0, r5
 800bd98:	687c      	ldr	r4, [r7, #4]
 800bd9a:	2701      	movs	r7, #1
 800bd9c:	423c      	tst	r4, r7
 800bd9e:	d10b      	bne.n	800bdb8 <_free_r+0xa4>
 800bda0:	195b      	adds	r3, r3, r5
 800bda2:	6885      	ldr	r5, [r0, #8]
 800bda4:	2e00      	cmp	r6, #0
 800bda6:	d122      	bne.n	800bdee <_free_r+0xda>
 800bda8:	4c31      	ldr	r4, [pc, #196]	; (800be70 <_free_r+0x15c>)
 800bdaa:	42a5      	cmp	r5, r4
 800bdac:	d11f      	bne.n	800bdee <_free_r+0xda>
 800bdae:	003e      	movs	r6, r7
 800bdb0:	6151      	str	r1, [r2, #20]
 800bdb2:	6111      	str	r1, [r2, #16]
 800bdb4:	60cd      	str	r5, [r1, #12]
 800bdb6:	608d      	str	r5, [r1, #8]
 800bdb8:	2501      	movs	r5, #1
 800bdba:	0028      	movs	r0, r5
 800bdbc:	4318      	orrs	r0, r3
 800bdbe:	6048      	str	r0, [r1, #4]
 800bdc0:	50cb      	str	r3, [r1, r3]
 800bdc2:	2e00      	cmp	r6, #0
 800bdc4:	d1d5      	bne.n	800bd72 <_free_r+0x5e>
 800bdc6:	2080      	movs	r0, #128	; 0x80
 800bdc8:	0080      	lsls	r0, r0, #2
 800bdca:	4283      	cmp	r3, r0
 800bdcc:	d213      	bcs.n	800bdf6 <_free_r+0xe2>
 800bdce:	08d8      	lsrs	r0, r3, #3
 800bdd0:	095b      	lsrs	r3, r3, #5
 800bdd2:	409d      	lsls	r5, r3
 800bdd4:	6853      	ldr	r3, [r2, #4]
 800bdd6:	431d      	orrs	r5, r3
 800bdd8:	00c3      	lsls	r3, r0, #3
 800bdda:	189b      	adds	r3, r3, r2
 800bddc:	6055      	str	r5, [r2, #4]
 800bdde:	689a      	ldr	r2, [r3, #8]
 800bde0:	60cb      	str	r3, [r1, #12]
 800bde2:	608a      	str	r2, [r1, #8]
 800bde4:	6099      	str	r1, [r3, #8]
 800bde6:	60d1      	str	r1, [r2, #12]
 800bde8:	e7c3      	b.n	800bd72 <_free_r+0x5e>
 800bdea:	4666      	mov	r6, ip
 800bdec:	e7d3      	b.n	800bd96 <_free_r+0x82>
 800bdee:	68c0      	ldr	r0, [r0, #12]
 800bdf0:	60e8      	str	r0, [r5, #12]
 800bdf2:	6085      	str	r5, [r0, #8]
 800bdf4:	e7e0      	b.n	800bdb8 <_free_r+0xa4>
 800bdf6:	0a5d      	lsrs	r5, r3, #9
 800bdf8:	2d04      	cmp	r5, #4
 800bdfa:	d812      	bhi.n	800be22 <_free_r+0x10e>
 800bdfc:	0998      	lsrs	r0, r3, #6
 800bdfe:	3038      	adds	r0, #56	; 0x38
 800be00:	00c6      	lsls	r6, r0, #3
 800be02:	18b6      	adds	r6, r6, r2
 800be04:	68b5      	ldr	r5, [r6, #8]
 800be06:	2703      	movs	r7, #3
 800be08:	42ae      	cmp	r6, r5
 800be0a:	d125      	bne.n	800be58 <_free_r+0x144>
 800be0c:	2301      	movs	r3, #1
 800be0e:	1080      	asrs	r0, r0, #2
 800be10:	4083      	lsls	r3, r0
 800be12:	6850      	ldr	r0, [r2, #4]
 800be14:	4303      	orrs	r3, r0
 800be16:	6053      	str	r3, [r2, #4]
 800be18:	60ce      	str	r6, [r1, #12]
 800be1a:	608d      	str	r5, [r1, #8]
 800be1c:	60b1      	str	r1, [r6, #8]
 800be1e:	60e9      	str	r1, [r5, #12]
 800be20:	e7a7      	b.n	800bd72 <_free_r+0x5e>
 800be22:	2d14      	cmp	r5, #20
 800be24:	d802      	bhi.n	800be2c <_free_r+0x118>
 800be26:	0028      	movs	r0, r5
 800be28:	305b      	adds	r0, #91	; 0x5b
 800be2a:	e7e9      	b.n	800be00 <_free_r+0xec>
 800be2c:	2d54      	cmp	r5, #84	; 0x54
 800be2e:	d802      	bhi.n	800be36 <_free_r+0x122>
 800be30:	0b18      	lsrs	r0, r3, #12
 800be32:	306e      	adds	r0, #110	; 0x6e
 800be34:	e7e4      	b.n	800be00 <_free_r+0xec>
 800be36:	20aa      	movs	r0, #170	; 0xaa
 800be38:	0040      	lsls	r0, r0, #1
 800be3a:	4285      	cmp	r5, r0
 800be3c:	d802      	bhi.n	800be44 <_free_r+0x130>
 800be3e:	0bd8      	lsrs	r0, r3, #15
 800be40:	3077      	adds	r0, #119	; 0x77
 800be42:	e7dd      	b.n	800be00 <_free_r+0xec>
 800be44:	4e0b      	ldr	r6, [pc, #44]	; (800be74 <_free_r+0x160>)
 800be46:	207e      	movs	r0, #126	; 0x7e
 800be48:	42b5      	cmp	r5, r6
 800be4a:	d8d9      	bhi.n	800be00 <_free_r+0xec>
 800be4c:	0c98      	lsrs	r0, r3, #18
 800be4e:	307c      	adds	r0, #124	; 0x7c
 800be50:	e7d6      	b.n	800be00 <_free_r+0xec>
 800be52:	68ad      	ldr	r5, [r5, #8]
 800be54:	42ae      	cmp	r6, r5
 800be56:	d003      	beq.n	800be60 <_free_r+0x14c>
 800be58:	686a      	ldr	r2, [r5, #4]
 800be5a:	43ba      	bics	r2, r7
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d8f8      	bhi.n	800be52 <_free_r+0x13e>
 800be60:	68ee      	ldr	r6, [r5, #12]
 800be62:	e7d9      	b.n	800be18 <_free_r+0x104>
 800be64:	2000002c 	.word	0x2000002c
 800be68:	20000438 	.word	0x20000438
 800be6c:	20000b6c 	.word	0x20000b6c
 800be70:	20000034 	.word	0x20000034
 800be74:	00000554 	.word	0x00000554

0800be78 <rshift>:
 800be78:	0002      	movs	r2, r0
 800be7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be7c:	6904      	ldr	r4, [r0, #16]
 800be7e:	114b      	asrs	r3, r1, #5
 800be80:	b085      	sub	sp, #20
 800be82:	3214      	adds	r2, #20
 800be84:	9302      	str	r3, [sp, #8]
 800be86:	114d      	asrs	r5, r1, #5
 800be88:	0013      	movs	r3, r2
 800be8a:	42ac      	cmp	r4, r5
 800be8c:	dd32      	ble.n	800bef4 <rshift+0x7c>
 800be8e:	261f      	movs	r6, #31
 800be90:	000f      	movs	r7, r1
 800be92:	114b      	asrs	r3, r1, #5
 800be94:	009b      	lsls	r3, r3, #2
 800be96:	00a5      	lsls	r5, r4, #2
 800be98:	18d3      	adds	r3, r2, r3
 800be9a:	4037      	ands	r7, r6
 800be9c:	1955      	adds	r5, r2, r5
 800be9e:	9300      	str	r3, [sp, #0]
 800bea0:	9701      	str	r7, [sp, #4]
 800bea2:	4231      	tst	r1, r6
 800bea4:	d10d      	bne.n	800bec2 <rshift+0x4a>
 800bea6:	0016      	movs	r6, r2
 800bea8:	0019      	movs	r1, r3
 800beaa:	428d      	cmp	r5, r1
 800beac:	d836      	bhi.n	800bf1c <rshift+0xa4>
 800beae:	9900      	ldr	r1, [sp, #0]
 800beb0:	2300      	movs	r3, #0
 800beb2:	3903      	subs	r1, #3
 800beb4:	428d      	cmp	r5, r1
 800beb6:	d302      	bcc.n	800bebe <rshift+0x46>
 800beb8:	9b02      	ldr	r3, [sp, #8]
 800beba:	1ae4      	subs	r4, r4, r3
 800bebc:	00a3      	lsls	r3, r4, #2
 800bebe:	18d3      	adds	r3, r2, r3
 800bec0:	e018      	b.n	800bef4 <rshift+0x7c>
 800bec2:	2120      	movs	r1, #32
 800bec4:	9e01      	ldr	r6, [sp, #4]
 800bec6:	9f01      	ldr	r7, [sp, #4]
 800bec8:	1b89      	subs	r1, r1, r6
 800beca:	9e00      	ldr	r6, [sp, #0]
 800becc:	9103      	str	r1, [sp, #12]
 800bece:	ce02      	ldmia	r6!, {r1}
 800bed0:	4694      	mov	ip, r2
 800bed2:	40f9      	lsrs	r1, r7
 800bed4:	42b5      	cmp	r5, r6
 800bed6:	d816      	bhi.n	800bf06 <rshift+0x8e>
 800bed8:	9e00      	ldr	r6, [sp, #0]
 800beda:	2300      	movs	r3, #0
 800bedc:	3601      	adds	r6, #1
 800bede:	42b5      	cmp	r5, r6
 800bee0:	d303      	bcc.n	800beea <rshift+0x72>
 800bee2:	9b02      	ldr	r3, [sp, #8]
 800bee4:	1ae3      	subs	r3, r4, r3
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	3b04      	subs	r3, #4
 800beea:	18d3      	adds	r3, r2, r3
 800beec:	6019      	str	r1, [r3, #0]
 800beee:	2900      	cmp	r1, #0
 800bef0:	d000      	beq.n	800bef4 <rshift+0x7c>
 800bef2:	3304      	adds	r3, #4
 800bef4:	1a99      	subs	r1, r3, r2
 800bef6:	1089      	asrs	r1, r1, #2
 800bef8:	6101      	str	r1, [r0, #16]
 800befa:	4293      	cmp	r3, r2
 800befc:	d101      	bne.n	800bf02 <rshift+0x8a>
 800befe:	2300      	movs	r3, #0
 800bf00:	6143      	str	r3, [r0, #20]
 800bf02:	b005      	add	sp, #20
 800bf04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf06:	6837      	ldr	r7, [r6, #0]
 800bf08:	9b03      	ldr	r3, [sp, #12]
 800bf0a:	409f      	lsls	r7, r3
 800bf0c:	430f      	orrs	r7, r1
 800bf0e:	4661      	mov	r1, ip
 800bf10:	c180      	stmia	r1!, {r7}
 800bf12:	468c      	mov	ip, r1
 800bf14:	9b01      	ldr	r3, [sp, #4]
 800bf16:	ce02      	ldmia	r6!, {r1}
 800bf18:	40d9      	lsrs	r1, r3
 800bf1a:	e7db      	b.n	800bed4 <rshift+0x5c>
 800bf1c:	c980      	ldmia	r1!, {r7}
 800bf1e:	c680      	stmia	r6!, {r7}
 800bf20:	e7c3      	b.n	800beaa <rshift+0x32>

0800bf22 <__hexdig_fun>:
 800bf22:	0002      	movs	r2, r0
 800bf24:	3a30      	subs	r2, #48	; 0x30
 800bf26:	0003      	movs	r3, r0
 800bf28:	2a09      	cmp	r2, #9
 800bf2a:	d802      	bhi.n	800bf32 <__hexdig_fun+0x10>
 800bf2c:	3b20      	subs	r3, #32
 800bf2e:	b2d8      	uxtb	r0, r3
 800bf30:	4770      	bx	lr
 800bf32:	0002      	movs	r2, r0
 800bf34:	3a61      	subs	r2, #97	; 0x61
 800bf36:	2a05      	cmp	r2, #5
 800bf38:	d801      	bhi.n	800bf3e <__hexdig_fun+0x1c>
 800bf3a:	3b47      	subs	r3, #71	; 0x47
 800bf3c:	e7f7      	b.n	800bf2e <__hexdig_fun+0xc>
 800bf3e:	001a      	movs	r2, r3
 800bf40:	3a41      	subs	r2, #65	; 0x41
 800bf42:	2000      	movs	r0, #0
 800bf44:	2a05      	cmp	r2, #5
 800bf46:	d8f3      	bhi.n	800bf30 <__hexdig_fun+0xe>
 800bf48:	3b27      	subs	r3, #39	; 0x27
 800bf4a:	e7f0      	b.n	800bf2e <__hexdig_fun+0xc>

0800bf4c <__gethex>:
 800bf4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf4e:	b089      	sub	sp, #36	; 0x24
 800bf50:	9307      	str	r3, [sp, #28]
 800bf52:	2302      	movs	r3, #2
 800bf54:	9201      	str	r2, [sp, #4]
 800bf56:	680a      	ldr	r2, [r1, #0]
 800bf58:	425b      	negs	r3, r3
 800bf5a:	9003      	str	r0, [sp, #12]
 800bf5c:	9106      	str	r1, [sp, #24]
 800bf5e:	1c96      	adds	r6, r2, #2
 800bf60:	1a9b      	subs	r3, r3, r2
 800bf62:	199a      	adds	r2, r3, r6
 800bf64:	9600      	str	r6, [sp, #0]
 800bf66:	9205      	str	r2, [sp, #20]
 800bf68:	9a00      	ldr	r2, [sp, #0]
 800bf6a:	3601      	adds	r6, #1
 800bf6c:	7810      	ldrb	r0, [r2, #0]
 800bf6e:	2830      	cmp	r0, #48	; 0x30
 800bf70:	d0f7      	beq.n	800bf62 <__gethex+0x16>
 800bf72:	f7ff ffd6 	bl	800bf22 <__hexdig_fun>
 800bf76:	2300      	movs	r3, #0
 800bf78:	001d      	movs	r5, r3
 800bf7a:	9302      	str	r3, [sp, #8]
 800bf7c:	4298      	cmp	r0, r3
 800bf7e:	d11d      	bne.n	800bfbc <__gethex+0x70>
 800bf80:	2201      	movs	r2, #1
 800bf82:	49a6      	ldr	r1, [pc, #664]	; (800c21c <__gethex+0x2d0>)
 800bf84:	9800      	ldr	r0, [sp, #0]
 800bf86:	f7ff fd6d 	bl	800ba64 <strncmp>
 800bf8a:	0007      	movs	r7, r0
 800bf8c:	42a8      	cmp	r0, r5
 800bf8e:	d169      	bne.n	800c064 <__gethex+0x118>
 800bf90:	9b00      	ldr	r3, [sp, #0]
 800bf92:	0034      	movs	r4, r6
 800bf94:	7858      	ldrb	r0, [r3, #1]
 800bf96:	f7ff ffc4 	bl	800bf22 <__hexdig_fun>
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	9302      	str	r3, [sp, #8]
 800bf9e:	42a8      	cmp	r0, r5
 800bfa0:	d02f      	beq.n	800c002 <__gethex+0xb6>
 800bfa2:	9600      	str	r6, [sp, #0]
 800bfa4:	9b00      	ldr	r3, [sp, #0]
 800bfa6:	7818      	ldrb	r0, [r3, #0]
 800bfa8:	2830      	cmp	r0, #48	; 0x30
 800bfaa:	d009      	beq.n	800bfc0 <__gethex+0x74>
 800bfac:	f7ff ffb9 	bl	800bf22 <__hexdig_fun>
 800bfb0:	4242      	negs	r2, r0
 800bfb2:	4142      	adcs	r2, r0
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	0035      	movs	r5, r6
 800bfb8:	9202      	str	r2, [sp, #8]
 800bfba:	9305      	str	r3, [sp, #20]
 800bfbc:	9c00      	ldr	r4, [sp, #0]
 800bfbe:	e004      	b.n	800bfca <__gethex+0x7e>
 800bfc0:	9b00      	ldr	r3, [sp, #0]
 800bfc2:	3301      	adds	r3, #1
 800bfc4:	9300      	str	r3, [sp, #0]
 800bfc6:	e7ed      	b.n	800bfa4 <__gethex+0x58>
 800bfc8:	3401      	adds	r4, #1
 800bfca:	7820      	ldrb	r0, [r4, #0]
 800bfcc:	f7ff ffa9 	bl	800bf22 <__hexdig_fun>
 800bfd0:	1e07      	subs	r7, r0, #0
 800bfd2:	d1f9      	bne.n	800bfc8 <__gethex+0x7c>
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	0020      	movs	r0, r4
 800bfd8:	4990      	ldr	r1, [pc, #576]	; (800c21c <__gethex+0x2d0>)
 800bfda:	f7ff fd43 	bl	800ba64 <strncmp>
 800bfde:	2800      	cmp	r0, #0
 800bfe0:	d10d      	bne.n	800bffe <__gethex+0xb2>
 800bfe2:	2d00      	cmp	r5, #0
 800bfe4:	d106      	bne.n	800bff4 <__gethex+0xa8>
 800bfe6:	3401      	adds	r4, #1
 800bfe8:	0025      	movs	r5, r4
 800bfea:	7820      	ldrb	r0, [r4, #0]
 800bfec:	f7ff ff99 	bl	800bf22 <__hexdig_fun>
 800bff0:	2800      	cmp	r0, #0
 800bff2:	d102      	bne.n	800bffa <__gethex+0xae>
 800bff4:	1b2d      	subs	r5, r5, r4
 800bff6:	00af      	lsls	r7, r5, #2
 800bff8:	e003      	b.n	800c002 <__gethex+0xb6>
 800bffa:	3401      	adds	r4, #1
 800bffc:	e7f5      	b.n	800bfea <__gethex+0x9e>
 800bffe:	2d00      	cmp	r5, #0
 800c000:	d1f8      	bne.n	800bff4 <__gethex+0xa8>
 800c002:	2220      	movs	r2, #32
 800c004:	7823      	ldrb	r3, [r4, #0]
 800c006:	0026      	movs	r6, r4
 800c008:	4393      	bics	r3, r2
 800c00a:	2b50      	cmp	r3, #80	; 0x50
 800c00c:	d11d      	bne.n	800c04a <__gethex+0xfe>
 800c00e:	7863      	ldrb	r3, [r4, #1]
 800c010:	2b2b      	cmp	r3, #43	; 0x2b
 800c012:	d02c      	beq.n	800c06e <__gethex+0x122>
 800c014:	2b2d      	cmp	r3, #45	; 0x2d
 800c016:	d02e      	beq.n	800c076 <__gethex+0x12a>
 800c018:	2300      	movs	r3, #0
 800c01a:	1c66      	adds	r6, r4, #1
 800c01c:	9304      	str	r3, [sp, #16]
 800c01e:	7830      	ldrb	r0, [r6, #0]
 800c020:	f7ff ff7f 	bl	800bf22 <__hexdig_fun>
 800c024:	1e43      	subs	r3, r0, #1
 800c026:	b2db      	uxtb	r3, r3
 800c028:	2b18      	cmp	r3, #24
 800c02a:	d82b      	bhi.n	800c084 <__gethex+0x138>
 800c02c:	3810      	subs	r0, #16
 800c02e:	0005      	movs	r5, r0
 800c030:	7870      	ldrb	r0, [r6, #1]
 800c032:	f7ff ff76 	bl	800bf22 <__hexdig_fun>
 800c036:	1e43      	subs	r3, r0, #1
 800c038:	b2db      	uxtb	r3, r3
 800c03a:	3601      	adds	r6, #1
 800c03c:	2b18      	cmp	r3, #24
 800c03e:	d91c      	bls.n	800c07a <__gethex+0x12e>
 800c040:	9b04      	ldr	r3, [sp, #16]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d000      	beq.n	800c048 <__gethex+0xfc>
 800c046:	426d      	negs	r5, r5
 800c048:	197f      	adds	r7, r7, r5
 800c04a:	9b06      	ldr	r3, [sp, #24]
 800c04c:	601e      	str	r6, [r3, #0]
 800c04e:	9b02      	ldr	r3, [sp, #8]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d019      	beq.n	800c088 <__gethex+0x13c>
 800c054:	2600      	movs	r6, #0
 800c056:	9b05      	ldr	r3, [sp, #20]
 800c058:	42b3      	cmp	r3, r6
 800c05a:	d100      	bne.n	800c05e <__gethex+0x112>
 800c05c:	3606      	adds	r6, #6
 800c05e:	0030      	movs	r0, r6
 800c060:	b009      	add	sp, #36	; 0x24
 800c062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c064:	2301      	movs	r3, #1
 800c066:	2700      	movs	r7, #0
 800c068:	9c00      	ldr	r4, [sp, #0]
 800c06a:	9302      	str	r3, [sp, #8]
 800c06c:	e7c9      	b.n	800c002 <__gethex+0xb6>
 800c06e:	2300      	movs	r3, #0
 800c070:	9304      	str	r3, [sp, #16]
 800c072:	1ca6      	adds	r6, r4, #2
 800c074:	e7d3      	b.n	800c01e <__gethex+0xd2>
 800c076:	2301      	movs	r3, #1
 800c078:	e7fa      	b.n	800c070 <__gethex+0x124>
 800c07a:	230a      	movs	r3, #10
 800c07c:	435d      	muls	r5, r3
 800c07e:	182d      	adds	r5, r5, r0
 800c080:	3d10      	subs	r5, #16
 800c082:	e7d5      	b.n	800c030 <__gethex+0xe4>
 800c084:	0026      	movs	r6, r4
 800c086:	e7e0      	b.n	800c04a <__gethex+0xfe>
 800c088:	9b00      	ldr	r3, [sp, #0]
 800c08a:	9902      	ldr	r1, [sp, #8]
 800c08c:	1ae3      	subs	r3, r4, r3
 800c08e:	3b01      	subs	r3, #1
 800c090:	2b07      	cmp	r3, #7
 800c092:	dc0a      	bgt.n	800c0aa <__gethex+0x15e>
 800c094:	9803      	ldr	r0, [sp, #12]
 800c096:	f000 fa5d 	bl	800c554 <_Balloc>
 800c09a:	1e05      	subs	r5, r0, #0
 800c09c:	d108      	bne.n	800c0b0 <__gethex+0x164>
 800c09e:	002a      	movs	r2, r5
 800c0a0:	21e4      	movs	r1, #228	; 0xe4
 800c0a2:	4b5f      	ldr	r3, [pc, #380]	; (800c220 <__gethex+0x2d4>)
 800c0a4:	485f      	ldr	r0, [pc, #380]	; (800c224 <__gethex+0x2d8>)
 800c0a6:	f003 fd19 	bl	800fadc <__assert_func>
 800c0aa:	3101      	adds	r1, #1
 800c0ac:	105b      	asrs	r3, r3, #1
 800c0ae:	e7ef      	b.n	800c090 <__gethex+0x144>
 800c0b0:	0003      	movs	r3, r0
 800c0b2:	3314      	adds	r3, #20
 800c0b4:	9302      	str	r3, [sp, #8]
 800c0b6:	9305      	str	r3, [sp, #20]
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	001e      	movs	r6, r3
 800c0bc:	9304      	str	r3, [sp, #16]
 800c0be:	9b00      	ldr	r3, [sp, #0]
 800c0c0:	42a3      	cmp	r3, r4
 800c0c2:	d33f      	bcc.n	800c144 <__gethex+0x1f8>
 800c0c4:	9c05      	ldr	r4, [sp, #20]
 800c0c6:	9b02      	ldr	r3, [sp, #8]
 800c0c8:	c440      	stmia	r4!, {r6}
 800c0ca:	1ae4      	subs	r4, r4, r3
 800c0cc:	10a4      	asrs	r4, r4, #2
 800c0ce:	0030      	movs	r0, r6
 800c0d0:	612c      	str	r4, [r5, #16]
 800c0d2:	f000 fb01 	bl	800c6d8 <__hi0bits>
 800c0d6:	9b01      	ldr	r3, [sp, #4]
 800c0d8:	0164      	lsls	r4, r4, #5
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	1a26      	subs	r6, r4, r0
 800c0de:	9300      	str	r3, [sp, #0]
 800c0e0:	429e      	cmp	r6, r3
 800c0e2:	dd51      	ble.n	800c188 <__gethex+0x23c>
 800c0e4:	1af6      	subs	r6, r6, r3
 800c0e6:	0031      	movs	r1, r6
 800c0e8:	0028      	movs	r0, r5
 800c0ea:	f000 fe7b 	bl	800cde4 <__any_on>
 800c0ee:	1e04      	subs	r4, r0, #0
 800c0f0:	d016      	beq.n	800c120 <__gethex+0x1d4>
 800c0f2:	2401      	movs	r4, #1
 800c0f4:	231f      	movs	r3, #31
 800c0f6:	0020      	movs	r0, r4
 800c0f8:	1e72      	subs	r2, r6, #1
 800c0fa:	4013      	ands	r3, r2
 800c0fc:	4098      	lsls	r0, r3
 800c0fe:	0003      	movs	r3, r0
 800c100:	1151      	asrs	r1, r2, #5
 800c102:	9802      	ldr	r0, [sp, #8]
 800c104:	0089      	lsls	r1, r1, #2
 800c106:	5809      	ldr	r1, [r1, r0]
 800c108:	4219      	tst	r1, r3
 800c10a:	d009      	beq.n	800c120 <__gethex+0x1d4>
 800c10c:	42a2      	cmp	r2, r4
 800c10e:	dd06      	ble.n	800c11e <__gethex+0x1d2>
 800c110:	0028      	movs	r0, r5
 800c112:	1eb1      	subs	r1, r6, #2
 800c114:	f000 fe66 	bl	800cde4 <__any_on>
 800c118:	3402      	adds	r4, #2
 800c11a:	2800      	cmp	r0, #0
 800c11c:	d100      	bne.n	800c120 <__gethex+0x1d4>
 800c11e:	2402      	movs	r4, #2
 800c120:	0031      	movs	r1, r6
 800c122:	0028      	movs	r0, r5
 800c124:	f7ff fea8 	bl	800be78 <rshift>
 800c128:	19bf      	adds	r7, r7, r6
 800c12a:	9b01      	ldr	r3, [sp, #4]
 800c12c:	689b      	ldr	r3, [r3, #8]
 800c12e:	42bb      	cmp	r3, r7
 800c130:	da3a      	bge.n	800c1a8 <__gethex+0x25c>
 800c132:	0029      	movs	r1, r5
 800c134:	9803      	ldr	r0, [sp, #12]
 800c136:	f000 fa35 	bl	800c5a4 <_Bfree>
 800c13a:	2300      	movs	r3, #0
 800c13c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c13e:	26a3      	movs	r6, #163	; 0xa3
 800c140:	6013      	str	r3, [r2, #0]
 800c142:	e78c      	b.n	800c05e <__gethex+0x112>
 800c144:	3c01      	subs	r4, #1
 800c146:	7823      	ldrb	r3, [r4, #0]
 800c148:	2b2e      	cmp	r3, #46	; 0x2e
 800c14a:	d012      	beq.n	800c172 <__gethex+0x226>
 800c14c:	9b04      	ldr	r3, [sp, #16]
 800c14e:	2b20      	cmp	r3, #32
 800c150:	d104      	bne.n	800c15c <__gethex+0x210>
 800c152:	9b05      	ldr	r3, [sp, #20]
 800c154:	c340      	stmia	r3!, {r6}
 800c156:	2600      	movs	r6, #0
 800c158:	9305      	str	r3, [sp, #20]
 800c15a:	9604      	str	r6, [sp, #16]
 800c15c:	7820      	ldrb	r0, [r4, #0]
 800c15e:	f7ff fee0 	bl	800bf22 <__hexdig_fun>
 800c162:	230f      	movs	r3, #15
 800c164:	4018      	ands	r0, r3
 800c166:	9b04      	ldr	r3, [sp, #16]
 800c168:	4098      	lsls	r0, r3
 800c16a:	3304      	adds	r3, #4
 800c16c:	4306      	orrs	r6, r0
 800c16e:	9304      	str	r3, [sp, #16]
 800c170:	e7a5      	b.n	800c0be <__gethex+0x172>
 800c172:	9b00      	ldr	r3, [sp, #0]
 800c174:	42a3      	cmp	r3, r4
 800c176:	d8e9      	bhi.n	800c14c <__gethex+0x200>
 800c178:	2201      	movs	r2, #1
 800c17a:	0020      	movs	r0, r4
 800c17c:	4927      	ldr	r1, [pc, #156]	; (800c21c <__gethex+0x2d0>)
 800c17e:	f7ff fc71 	bl	800ba64 <strncmp>
 800c182:	2800      	cmp	r0, #0
 800c184:	d1e2      	bne.n	800c14c <__gethex+0x200>
 800c186:	e79a      	b.n	800c0be <__gethex+0x172>
 800c188:	9b00      	ldr	r3, [sp, #0]
 800c18a:	2400      	movs	r4, #0
 800c18c:	429e      	cmp	r6, r3
 800c18e:	dacc      	bge.n	800c12a <__gethex+0x1de>
 800c190:	1b9e      	subs	r6, r3, r6
 800c192:	0029      	movs	r1, r5
 800c194:	0032      	movs	r2, r6
 800c196:	9803      	ldr	r0, [sp, #12]
 800c198:	f000 fbf0 	bl	800c97c <__lshift>
 800c19c:	0003      	movs	r3, r0
 800c19e:	3314      	adds	r3, #20
 800c1a0:	0005      	movs	r5, r0
 800c1a2:	1bbf      	subs	r7, r7, r6
 800c1a4:	9302      	str	r3, [sp, #8]
 800c1a6:	e7c0      	b.n	800c12a <__gethex+0x1de>
 800c1a8:	9b01      	ldr	r3, [sp, #4]
 800c1aa:	685e      	ldr	r6, [r3, #4]
 800c1ac:	42be      	cmp	r6, r7
 800c1ae:	dd70      	ble.n	800c292 <__gethex+0x346>
 800c1b0:	9b00      	ldr	r3, [sp, #0]
 800c1b2:	1bf6      	subs	r6, r6, r7
 800c1b4:	42b3      	cmp	r3, r6
 800c1b6:	dc37      	bgt.n	800c228 <__gethex+0x2dc>
 800c1b8:	9b01      	ldr	r3, [sp, #4]
 800c1ba:	68db      	ldr	r3, [r3, #12]
 800c1bc:	2b02      	cmp	r3, #2
 800c1be:	d024      	beq.n	800c20a <__gethex+0x2be>
 800c1c0:	2b03      	cmp	r3, #3
 800c1c2:	d026      	beq.n	800c212 <__gethex+0x2c6>
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	d117      	bne.n	800c1f8 <__gethex+0x2ac>
 800c1c8:	9b00      	ldr	r3, [sp, #0]
 800c1ca:	42b3      	cmp	r3, r6
 800c1cc:	d114      	bne.n	800c1f8 <__gethex+0x2ac>
 800c1ce:	2b01      	cmp	r3, #1
 800c1d0:	d10b      	bne.n	800c1ea <__gethex+0x29e>
 800c1d2:	9b01      	ldr	r3, [sp, #4]
 800c1d4:	9a07      	ldr	r2, [sp, #28]
 800c1d6:	685b      	ldr	r3, [r3, #4]
 800c1d8:	2662      	movs	r6, #98	; 0x62
 800c1da:	6013      	str	r3, [r2, #0]
 800c1dc:	2301      	movs	r3, #1
 800c1de:	9a02      	ldr	r2, [sp, #8]
 800c1e0:	612b      	str	r3, [r5, #16]
 800c1e2:	6013      	str	r3, [r2, #0]
 800c1e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1e6:	601d      	str	r5, [r3, #0]
 800c1e8:	e739      	b.n	800c05e <__gethex+0x112>
 800c1ea:	9900      	ldr	r1, [sp, #0]
 800c1ec:	0028      	movs	r0, r5
 800c1ee:	3901      	subs	r1, #1
 800c1f0:	f000 fdf8 	bl	800cde4 <__any_on>
 800c1f4:	2800      	cmp	r0, #0
 800c1f6:	d1ec      	bne.n	800c1d2 <__gethex+0x286>
 800c1f8:	0029      	movs	r1, r5
 800c1fa:	9803      	ldr	r0, [sp, #12]
 800c1fc:	f000 f9d2 	bl	800c5a4 <_Bfree>
 800c200:	2300      	movs	r3, #0
 800c202:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c204:	2650      	movs	r6, #80	; 0x50
 800c206:	6013      	str	r3, [r2, #0]
 800c208:	e729      	b.n	800c05e <__gethex+0x112>
 800c20a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d1f3      	bne.n	800c1f8 <__gethex+0x2ac>
 800c210:	e7df      	b.n	800c1d2 <__gethex+0x286>
 800c212:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c214:	2b00      	cmp	r3, #0
 800c216:	d1dc      	bne.n	800c1d2 <__gethex+0x286>
 800c218:	e7ee      	b.n	800c1f8 <__gethex+0x2ac>
 800c21a:	46c0      	nop			; (mov r8, r8)
 800c21c:	08013f38 	.word	0x08013f38
 800c220:	08014099 	.word	0x08014099
 800c224:	080140aa 	.word	0x080140aa
 800c228:	1e77      	subs	r7, r6, #1
 800c22a:	2c00      	cmp	r4, #0
 800c22c:	d12f      	bne.n	800c28e <__gethex+0x342>
 800c22e:	2f00      	cmp	r7, #0
 800c230:	d004      	beq.n	800c23c <__gethex+0x2f0>
 800c232:	0039      	movs	r1, r7
 800c234:	0028      	movs	r0, r5
 800c236:	f000 fdd5 	bl	800cde4 <__any_on>
 800c23a:	0004      	movs	r4, r0
 800c23c:	231f      	movs	r3, #31
 800c23e:	117a      	asrs	r2, r7, #5
 800c240:	401f      	ands	r7, r3
 800c242:	3b1e      	subs	r3, #30
 800c244:	40bb      	lsls	r3, r7
 800c246:	9902      	ldr	r1, [sp, #8]
 800c248:	0092      	lsls	r2, r2, #2
 800c24a:	5852      	ldr	r2, [r2, r1]
 800c24c:	421a      	tst	r2, r3
 800c24e:	d001      	beq.n	800c254 <__gethex+0x308>
 800c250:	2302      	movs	r3, #2
 800c252:	431c      	orrs	r4, r3
 800c254:	9b00      	ldr	r3, [sp, #0]
 800c256:	0031      	movs	r1, r6
 800c258:	1b9b      	subs	r3, r3, r6
 800c25a:	2602      	movs	r6, #2
 800c25c:	0028      	movs	r0, r5
 800c25e:	9300      	str	r3, [sp, #0]
 800c260:	f7ff fe0a 	bl	800be78 <rshift>
 800c264:	9b01      	ldr	r3, [sp, #4]
 800c266:	685f      	ldr	r7, [r3, #4]
 800c268:	2c00      	cmp	r4, #0
 800c26a:	d041      	beq.n	800c2f0 <__gethex+0x3a4>
 800c26c:	9b01      	ldr	r3, [sp, #4]
 800c26e:	68db      	ldr	r3, [r3, #12]
 800c270:	2b02      	cmp	r3, #2
 800c272:	d010      	beq.n	800c296 <__gethex+0x34a>
 800c274:	2b03      	cmp	r3, #3
 800c276:	d012      	beq.n	800c29e <__gethex+0x352>
 800c278:	2b01      	cmp	r3, #1
 800c27a:	d106      	bne.n	800c28a <__gethex+0x33e>
 800c27c:	07a2      	lsls	r2, r4, #30
 800c27e:	d504      	bpl.n	800c28a <__gethex+0x33e>
 800c280:	9a02      	ldr	r2, [sp, #8]
 800c282:	6812      	ldr	r2, [r2, #0]
 800c284:	4314      	orrs	r4, r2
 800c286:	421c      	tst	r4, r3
 800c288:	d10c      	bne.n	800c2a4 <__gethex+0x358>
 800c28a:	2310      	movs	r3, #16
 800c28c:	e02f      	b.n	800c2ee <__gethex+0x3a2>
 800c28e:	2401      	movs	r4, #1
 800c290:	e7d4      	b.n	800c23c <__gethex+0x2f0>
 800c292:	2601      	movs	r6, #1
 800c294:	e7e8      	b.n	800c268 <__gethex+0x31c>
 800c296:	2301      	movs	r3, #1
 800c298:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c29a:	1a9b      	subs	r3, r3, r2
 800c29c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c29e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d0f2      	beq.n	800c28a <__gethex+0x33e>
 800c2a4:	692b      	ldr	r3, [r5, #16]
 800c2a6:	2000      	movs	r0, #0
 800c2a8:	9302      	str	r3, [sp, #8]
 800c2aa:	009b      	lsls	r3, r3, #2
 800c2ac:	9304      	str	r3, [sp, #16]
 800c2ae:	002b      	movs	r3, r5
 800c2b0:	9a04      	ldr	r2, [sp, #16]
 800c2b2:	3314      	adds	r3, #20
 800c2b4:	1899      	adds	r1, r3, r2
 800c2b6:	681a      	ldr	r2, [r3, #0]
 800c2b8:	1c54      	adds	r4, r2, #1
 800c2ba:	d01e      	beq.n	800c2fa <__gethex+0x3ae>
 800c2bc:	3201      	adds	r2, #1
 800c2be:	601a      	str	r2, [r3, #0]
 800c2c0:	002b      	movs	r3, r5
 800c2c2:	3314      	adds	r3, #20
 800c2c4:	2e02      	cmp	r6, #2
 800c2c6:	d141      	bne.n	800c34c <__gethex+0x400>
 800c2c8:	9a01      	ldr	r2, [sp, #4]
 800c2ca:	9900      	ldr	r1, [sp, #0]
 800c2cc:	6812      	ldr	r2, [r2, #0]
 800c2ce:	3a01      	subs	r2, #1
 800c2d0:	428a      	cmp	r2, r1
 800c2d2:	d10b      	bne.n	800c2ec <__gethex+0x3a0>
 800c2d4:	221f      	movs	r2, #31
 800c2d6:	9800      	ldr	r0, [sp, #0]
 800c2d8:	1149      	asrs	r1, r1, #5
 800c2da:	4002      	ands	r2, r0
 800c2dc:	2001      	movs	r0, #1
 800c2de:	0004      	movs	r4, r0
 800c2e0:	4094      	lsls	r4, r2
 800c2e2:	0089      	lsls	r1, r1, #2
 800c2e4:	58cb      	ldr	r3, [r1, r3]
 800c2e6:	4223      	tst	r3, r4
 800c2e8:	d000      	beq.n	800c2ec <__gethex+0x3a0>
 800c2ea:	2601      	movs	r6, #1
 800c2ec:	2320      	movs	r3, #32
 800c2ee:	431e      	orrs	r6, r3
 800c2f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c2f2:	601d      	str	r5, [r3, #0]
 800c2f4:	9b07      	ldr	r3, [sp, #28]
 800c2f6:	601f      	str	r7, [r3, #0]
 800c2f8:	e6b1      	b.n	800c05e <__gethex+0x112>
 800c2fa:	c301      	stmia	r3!, {r0}
 800c2fc:	4299      	cmp	r1, r3
 800c2fe:	d8da      	bhi.n	800c2b6 <__gethex+0x36a>
 800c300:	68ab      	ldr	r3, [r5, #8]
 800c302:	9a02      	ldr	r2, [sp, #8]
 800c304:	429a      	cmp	r2, r3
 800c306:	db18      	blt.n	800c33a <__gethex+0x3ee>
 800c308:	6869      	ldr	r1, [r5, #4]
 800c30a:	9803      	ldr	r0, [sp, #12]
 800c30c:	3101      	adds	r1, #1
 800c30e:	f000 f921 	bl	800c554 <_Balloc>
 800c312:	1e04      	subs	r4, r0, #0
 800c314:	d104      	bne.n	800c320 <__gethex+0x3d4>
 800c316:	0022      	movs	r2, r4
 800c318:	2184      	movs	r1, #132	; 0x84
 800c31a:	4b1c      	ldr	r3, [pc, #112]	; (800c38c <__gethex+0x440>)
 800c31c:	481c      	ldr	r0, [pc, #112]	; (800c390 <__gethex+0x444>)
 800c31e:	e6c2      	b.n	800c0a6 <__gethex+0x15a>
 800c320:	0029      	movs	r1, r5
 800c322:	692a      	ldr	r2, [r5, #16]
 800c324:	310c      	adds	r1, #12
 800c326:	3202      	adds	r2, #2
 800c328:	0092      	lsls	r2, r2, #2
 800c32a:	300c      	adds	r0, #12
 800c32c:	f7ff fc77 	bl	800bc1e <memcpy>
 800c330:	0029      	movs	r1, r5
 800c332:	9803      	ldr	r0, [sp, #12]
 800c334:	f000 f936 	bl	800c5a4 <_Bfree>
 800c338:	0025      	movs	r5, r4
 800c33a:	692b      	ldr	r3, [r5, #16]
 800c33c:	1c5a      	adds	r2, r3, #1
 800c33e:	612a      	str	r2, [r5, #16]
 800c340:	2201      	movs	r2, #1
 800c342:	3304      	adds	r3, #4
 800c344:	009b      	lsls	r3, r3, #2
 800c346:	18eb      	adds	r3, r5, r3
 800c348:	605a      	str	r2, [r3, #4]
 800c34a:	e7b9      	b.n	800c2c0 <__gethex+0x374>
 800c34c:	692a      	ldr	r2, [r5, #16]
 800c34e:	9902      	ldr	r1, [sp, #8]
 800c350:	428a      	cmp	r2, r1
 800c352:	dd09      	ble.n	800c368 <__gethex+0x41c>
 800c354:	2101      	movs	r1, #1
 800c356:	0028      	movs	r0, r5
 800c358:	f7ff fd8e 	bl	800be78 <rshift>
 800c35c:	9b01      	ldr	r3, [sp, #4]
 800c35e:	3701      	adds	r7, #1
 800c360:	689b      	ldr	r3, [r3, #8]
 800c362:	42bb      	cmp	r3, r7
 800c364:	dac1      	bge.n	800c2ea <__gethex+0x39e>
 800c366:	e6e4      	b.n	800c132 <__gethex+0x1e6>
 800c368:	221f      	movs	r2, #31
 800c36a:	9c00      	ldr	r4, [sp, #0]
 800c36c:	9900      	ldr	r1, [sp, #0]
 800c36e:	2601      	movs	r6, #1
 800c370:	4014      	ands	r4, r2
 800c372:	4211      	tst	r1, r2
 800c374:	d0ba      	beq.n	800c2ec <__gethex+0x3a0>
 800c376:	9a04      	ldr	r2, [sp, #16]
 800c378:	189b      	adds	r3, r3, r2
 800c37a:	3b04      	subs	r3, #4
 800c37c:	6818      	ldr	r0, [r3, #0]
 800c37e:	f000 f9ab 	bl	800c6d8 <__hi0bits>
 800c382:	2320      	movs	r3, #32
 800c384:	1b1b      	subs	r3, r3, r4
 800c386:	4298      	cmp	r0, r3
 800c388:	dbe4      	blt.n	800c354 <__gethex+0x408>
 800c38a:	e7af      	b.n	800c2ec <__gethex+0x3a0>
 800c38c:	08014099 	.word	0x08014099
 800c390:	080140aa 	.word	0x080140aa

0800c394 <L_shift>:
 800c394:	2308      	movs	r3, #8
 800c396:	b570      	push	{r4, r5, r6, lr}
 800c398:	2520      	movs	r5, #32
 800c39a:	1a9a      	subs	r2, r3, r2
 800c39c:	0092      	lsls	r2, r2, #2
 800c39e:	1aad      	subs	r5, r5, r2
 800c3a0:	6843      	ldr	r3, [r0, #4]
 800c3a2:	6804      	ldr	r4, [r0, #0]
 800c3a4:	001e      	movs	r6, r3
 800c3a6:	40ae      	lsls	r6, r5
 800c3a8:	40d3      	lsrs	r3, r2
 800c3aa:	4334      	orrs	r4, r6
 800c3ac:	6004      	str	r4, [r0, #0]
 800c3ae:	6043      	str	r3, [r0, #4]
 800c3b0:	3004      	adds	r0, #4
 800c3b2:	4288      	cmp	r0, r1
 800c3b4:	d3f4      	bcc.n	800c3a0 <L_shift+0xc>
 800c3b6:	bd70      	pop	{r4, r5, r6, pc}

0800c3b8 <__match>:
 800c3b8:	b530      	push	{r4, r5, lr}
 800c3ba:	6803      	ldr	r3, [r0, #0]
 800c3bc:	780c      	ldrb	r4, [r1, #0]
 800c3be:	3301      	adds	r3, #1
 800c3c0:	2c00      	cmp	r4, #0
 800c3c2:	d102      	bne.n	800c3ca <__match+0x12>
 800c3c4:	6003      	str	r3, [r0, #0]
 800c3c6:	2001      	movs	r0, #1
 800c3c8:	bd30      	pop	{r4, r5, pc}
 800c3ca:	781a      	ldrb	r2, [r3, #0]
 800c3cc:	0015      	movs	r5, r2
 800c3ce:	3d41      	subs	r5, #65	; 0x41
 800c3d0:	2d19      	cmp	r5, #25
 800c3d2:	d800      	bhi.n	800c3d6 <__match+0x1e>
 800c3d4:	3220      	adds	r2, #32
 800c3d6:	3101      	adds	r1, #1
 800c3d8:	42a2      	cmp	r2, r4
 800c3da:	d0ef      	beq.n	800c3bc <__match+0x4>
 800c3dc:	2000      	movs	r0, #0
 800c3de:	e7f3      	b.n	800c3c8 <__match+0x10>

0800c3e0 <__hexnan>:
 800c3e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3e2:	680b      	ldr	r3, [r1, #0]
 800c3e4:	b08b      	sub	sp, #44	; 0x2c
 800c3e6:	9201      	str	r2, [sp, #4]
 800c3e8:	9901      	ldr	r1, [sp, #4]
 800c3ea:	115a      	asrs	r2, r3, #5
 800c3ec:	0092      	lsls	r2, r2, #2
 800c3ee:	188a      	adds	r2, r1, r2
 800c3f0:	9202      	str	r2, [sp, #8]
 800c3f2:	0019      	movs	r1, r3
 800c3f4:	221f      	movs	r2, #31
 800c3f6:	4011      	ands	r1, r2
 800c3f8:	9008      	str	r0, [sp, #32]
 800c3fa:	9106      	str	r1, [sp, #24]
 800c3fc:	4213      	tst	r3, r2
 800c3fe:	d002      	beq.n	800c406 <__hexnan+0x26>
 800c400:	9b02      	ldr	r3, [sp, #8]
 800c402:	3304      	adds	r3, #4
 800c404:	9302      	str	r3, [sp, #8]
 800c406:	9b02      	ldr	r3, [sp, #8]
 800c408:	2500      	movs	r5, #0
 800c40a:	1f1f      	subs	r7, r3, #4
 800c40c:	003e      	movs	r6, r7
 800c40e:	003c      	movs	r4, r7
 800c410:	9b08      	ldr	r3, [sp, #32]
 800c412:	603d      	str	r5, [r7, #0]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	9507      	str	r5, [sp, #28]
 800c418:	9305      	str	r3, [sp, #20]
 800c41a:	9503      	str	r5, [sp, #12]
 800c41c:	9b05      	ldr	r3, [sp, #20]
 800c41e:	3301      	adds	r3, #1
 800c420:	9309      	str	r3, [sp, #36]	; 0x24
 800c422:	9b05      	ldr	r3, [sp, #20]
 800c424:	785b      	ldrb	r3, [r3, #1]
 800c426:	9304      	str	r3, [sp, #16]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d028      	beq.n	800c47e <__hexnan+0x9e>
 800c42c:	9804      	ldr	r0, [sp, #16]
 800c42e:	f7ff fd78 	bl	800bf22 <__hexdig_fun>
 800c432:	2800      	cmp	r0, #0
 800c434:	d154      	bne.n	800c4e0 <__hexnan+0x100>
 800c436:	9b04      	ldr	r3, [sp, #16]
 800c438:	2b20      	cmp	r3, #32
 800c43a:	d819      	bhi.n	800c470 <__hexnan+0x90>
 800c43c:	9b03      	ldr	r3, [sp, #12]
 800c43e:	9a07      	ldr	r2, [sp, #28]
 800c440:	4293      	cmp	r3, r2
 800c442:	dd12      	ble.n	800c46a <__hexnan+0x8a>
 800c444:	42b4      	cmp	r4, r6
 800c446:	d206      	bcs.n	800c456 <__hexnan+0x76>
 800c448:	2d07      	cmp	r5, #7
 800c44a:	dc04      	bgt.n	800c456 <__hexnan+0x76>
 800c44c:	002a      	movs	r2, r5
 800c44e:	0031      	movs	r1, r6
 800c450:	0020      	movs	r0, r4
 800c452:	f7ff ff9f 	bl	800c394 <L_shift>
 800c456:	9b01      	ldr	r3, [sp, #4]
 800c458:	2508      	movs	r5, #8
 800c45a:	429c      	cmp	r4, r3
 800c45c:	d905      	bls.n	800c46a <__hexnan+0x8a>
 800c45e:	1f26      	subs	r6, r4, #4
 800c460:	2500      	movs	r5, #0
 800c462:	0034      	movs	r4, r6
 800c464:	9b03      	ldr	r3, [sp, #12]
 800c466:	6035      	str	r5, [r6, #0]
 800c468:	9307      	str	r3, [sp, #28]
 800c46a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c46c:	9305      	str	r3, [sp, #20]
 800c46e:	e7d5      	b.n	800c41c <__hexnan+0x3c>
 800c470:	9b04      	ldr	r3, [sp, #16]
 800c472:	2b29      	cmp	r3, #41	; 0x29
 800c474:	d159      	bne.n	800c52a <__hexnan+0x14a>
 800c476:	9b05      	ldr	r3, [sp, #20]
 800c478:	9a08      	ldr	r2, [sp, #32]
 800c47a:	3302      	adds	r3, #2
 800c47c:	6013      	str	r3, [r2, #0]
 800c47e:	9b03      	ldr	r3, [sp, #12]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d052      	beq.n	800c52a <__hexnan+0x14a>
 800c484:	42b4      	cmp	r4, r6
 800c486:	d206      	bcs.n	800c496 <__hexnan+0xb6>
 800c488:	2d07      	cmp	r5, #7
 800c48a:	dc04      	bgt.n	800c496 <__hexnan+0xb6>
 800c48c:	002a      	movs	r2, r5
 800c48e:	0031      	movs	r1, r6
 800c490:	0020      	movs	r0, r4
 800c492:	f7ff ff7f 	bl	800c394 <L_shift>
 800c496:	9b01      	ldr	r3, [sp, #4]
 800c498:	429c      	cmp	r4, r3
 800c49a:	d935      	bls.n	800c508 <__hexnan+0x128>
 800c49c:	001a      	movs	r2, r3
 800c49e:	0023      	movs	r3, r4
 800c4a0:	cb02      	ldmia	r3!, {r1}
 800c4a2:	c202      	stmia	r2!, {r1}
 800c4a4:	429f      	cmp	r7, r3
 800c4a6:	d2fb      	bcs.n	800c4a0 <__hexnan+0xc0>
 800c4a8:	9b02      	ldr	r3, [sp, #8]
 800c4aa:	1c62      	adds	r2, r4, #1
 800c4ac:	1ed9      	subs	r1, r3, #3
 800c4ae:	2304      	movs	r3, #4
 800c4b0:	4291      	cmp	r1, r2
 800c4b2:	d305      	bcc.n	800c4c0 <__hexnan+0xe0>
 800c4b4:	9b02      	ldr	r3, [sp, #8]
 800c4b6:	3b04      	subs	r3, #4
 800c4b8:	1b1b      	subs	r3, r3, r4
 800c4ba:	089b      	lsrs	r3, r3, #2
 800c4bc:	3301      	adds	r3, #1
 800c4be:	009b      	lsls	r3, r3, #2
 800c4c0:	9a01      	ldr	r2, [sp, #4]
 800c4c2:	18d3      	adds	r3, r2, r3
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	c304      	stmia	r3!, {r2}
 800c4c8:	429f      	cmp	r7, r3
 800c4ca:	d2fc      	bcs.n	800c4c6 <__hexnan+0xe6>
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d104      	bne.n	800c4dc <__hexnan+0xfc>
 800c4d2:	9b01      	ldr	r3, [sp, #4]
 800c4d4:	429f      	cmp	r7, r3
 800c4d6:	d126      	bne.n	800c526 <__hexnan+0x146>
 800c4d8:	2301      	movs	r3, #1
 800c4da:	603b      	str	r3, [r7, #0]
 800c4dc:	2005      	movs	r0, #5
 800c4de:	e025      	b.n	800c52c <__hexnan+0x14c>
 800c4e0:	9b03      	ldr	r3, [sp, #12]
 800c4e2:	3501      	adds	r5, #1
 800c4e4:	3301      	adds	r3, #1
 800c4e6:	9303      	str	r3, [sp, #12]
 800c4e8:	2d08      	cmp	r5, #8
 800c4ea:	dd06      	ble.n	800c4fa <__hexnan+0x11a>
 800c4ec:	9b01      	ldr	r3, [sp, #4]
 800c4ee:	429c      	cmp	r4, r3
 800c4f0:	d9bb      	bls.n	800c46a <__hexnan+0x8a>
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	2501      	movs	r5, #1
 800c4f6:	3c04      	subs	r4, #4
 800c4f8:	6023      	str	r3, [r4, #0]
 800c4fa:	220f      	movs	r2, #15
 800c4fc:	6823      	ldr	r3, [r4, #0]
 800c4fe:	4010      	ands	r0, r2
 800c500:	011b      	lsls	r3, r3, #4
 800c502:	4303      	orrs	r3, r0
 800c504:	6023      	str	r3, [r4, #0]
 800c506:	e7b0      	b.n	800c46a <__hexnan+0x8a>
 800c508:	9b06      	ldr	r3, [sp, #24]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d0de      	beq.n	800c4cc <__hexnan+0xec>
 800c50e:	2320      	movs	r3, #32
 800c510:	9a06      	ldr	r2, [sp, #24]
 800c512:	9902      	ldr	r1, [sp, #8]
 800c514:	1a9b      	subs	r3, r3, r2
 800c516:	2201      	movs	r2, #1
 800c518:	4252      	negs	r2, r2
 800c51a:	40da      	lsrs	r2, r3
 800c51c:	3904      	subs	r1, #4
 800c51e:	680b      	ldr	r3, [r1, #0]
 800c520:	4013      	ands	r3, r2
 800c522:	600b      	str	r3, [r1, #0]
 800c524:	e7d2      	b.n	800c4cc <__hexnan+0xec>
 800c526:	3f04      	subs	r7, #4
 800c528:	e7d0      	b.n	800c4cc <__hexnan+0xec>
 800c52a:	2004      	movs	r0, #4
 800c52c:	b00b      	add	sp, #44	; 0x2c
 800c52e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c530 <__ascii_mbtowc>:
 800c530:	b082      	sub	sp, #8
 800c532:	2900      	cmp	r1, #0
 800c534:	d100      	bne.n	800c538 <__ascii_mbtowc+0x8>
 800c536:	a901      	add	r1, sp, #4
 800c538:	1e10      	subs	r0, r2, #0
 800c53a:	d006      	beq.n	800c54a <__ascii_mbtowc+0x1a>
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d006      	beq.n	800c54e <__ascii_mbtowc+0x1e>
 800c540:	7813      	ldrb	r3, [r2, #0]
 800c542:	600b      	str	r3, [r1, #0]
 800c544:	7810      	ldrb	r0, [r2, #0]
 800c546:	1e43      	subs	r3, r0, #1
 800c548:	4198      	sbcs	r0, r3
 800c54a:	b002      	add	sp, #8
 800c54c:	4770      	bx	lr
 800c54e:	2002      	movs	r0, #2
 800c550:	4240      	negs	r0, r0
 800c552:	e7fa      	b.n	800c54a <__ascii_mbtowc+0x1a>

0800c554 <_Balloc>:
 800c554:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c556:	b570      	push	{r4, r5, r6, lr}
 800c558:	0006      	movs	r6, r0
 800c55a:	000c      	movs	r4, r1
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d012      	beq.n	800c586 <_Balloc+0x32>
 800c560:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800c562:	00a2      	lsls	r2, r4, #2
 800c564:	189b      	adds	r3, r3, r2
 800c566:	6818      	ldr	r0, [r3, #0]
 800c568:	2800      	cmp	r0, #0
 800c56a:	d115      	bne.n	800c598 <_Balloc+0x44>
 800c56c:	2101      	movs	r1, #1
 800c56e:	000d      	movs	r5, r1
 800c570:	40a5      	lsls	r5, r4
 800c572:	1d6a      	adds	r2, r5, #5
 800c574:	0030      	movs	r0, r6
 800c576:	0092      	lsls	r2, r2, #2
 800c578:	f003 face 	bl	800fb18 <_calloc_r>
 800c57c:	2800      	cmp	r0, #0
 800c57e:	d009      	beq.n	800c594 <_Balloc+0x40>
 800c580:	6044      	str	r4, [r0, #4]
 800c582:	6085      	str	r5, [r0, #8]
 800c584:	e00a      	b.n	800c59c <_Balloc+0x48>
 800c586:	2221      	movs	r2, #33	; 0x21
 800c588:	2104      	movs	r1, #4
 800c58a:	f003 fac5 	bl	800fb18 <_calloc_r>
 800c58e:	6470      	str	r0, [r6, #68]	; 0x44
 800c590:	2800      	cmp	r0, #0
 800c592:	d1e5      	bne.n	800c560 <_Balloc+0xc>
 800c594:	2000      	movs	r0, #0
 800c596:	bd70      	pop	{r4, r5, r6, pc}
 800c598:	6802      	ldr	r2, [r0, #0]
 800c59a:	601a      	str	r2, [r3, #0]
 800c59c:	2300      	movs	r3, #0
 800c59e:	6103      	str	r3, [r0, #16]
 800c5a0:	60c3      	str	r3, [r0, #12]
 800c5a2:	e7f8      	b.n	800c596 <_Balloc+0x42>

0800c5a4 <_Bfree>:
 800c5a4:	2900      	cmp	r1, #0
 800c5a6:	d006      	beq.n	800c5b6 <_Bfree+0x12>
 800c5a8:	684a      	ldr	r2, [r1, #4]
 800c5aa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c5ac:	0092      	lsls	r2, r2, #2
 800c5ae:	189b      	adds	r3, r3, r2
 800c5b0:	681a      	ldr	r2, [r3, #0]
 800c5b2:	600a      	str	r2, [r1, #0]
 800c5b4:	6019      	str	r1, [r3, #0]
 800c5b6:	4770      	bx	lr

0800c5b8 <__multadd>:
 800c5b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c5ba:	000e      	movs	r6, r1
 800c5bc:	9001      	str	r0, [sp, #4]
 800c5be:	000c      	movs	r4, r1
 800c5c0:	001d      	movs	r5, r3
 800c5c2:	2000      	movs	r0, #0
 800c5c4:	690f      	ldr	r7, [r1, #16]
 800c5c6:	3614      	adds	r6, #20
 800c5c8:	6833      	ldr	r3, [r6, #0]
 800c5ca:	3001      	adds	r0, #1
 800c5cc:	b299      	uxth	r1, r3
 800c5ce:	4351      	muls	r1, r2
 800c5d0:	0c1b      	lsrs	r3, r3, #16
 800c5d2:	4353      	muls	r3, r2
 800c5d4:	1949      	adds	r1, r1, r5
 800c5d6:	0c0d      	lsrs	r5, r1, #16
 800c5d8:	195b      	adds	r3, r3, r5
 800c5da:	0c1d      	lsrs	r5, r3, #16
 800c5dc:	b289      	uxth	r1, r1
 800c5de:	041b      	lsls	r3, r3, #16
 800c5e0:	185b      	adds	r3, r3, r1
 800c5e2:	c608      	stmia	r6!, {r3}
 800c5e4:	4287      	cmp	r7, r0
 800c5e6:	dcef      	bgt.n	800c5c8 <__multadd+0x10>
 800c5e8:	2d00      	cmp	r5, #0
 800c5ea:	d022      	beq.n	800c632 <__multadd+0x7a>
 800c5ec:	68a3      	ldr	r3, [r4, #8]
 800c5ee:	42bb      	cmp	r3, r7
 800c5f0:	dc19      	bgt.n	800c626 <__multadd+0x6e>
 800c5f2:	6861      	ldr	r1, [r4, #4]
 800c5f4:	9801      	ldr	r0, [sp, #4]
 800c5f6:	3101      	adds	r1, #1
 800c5f8:	f7ff ffac 	bl	800c554 <_Balloc>
 800c5fc:	1e06      	subs	r6, r0, #0
 800c5fe:	d105      	bne.n	800c60c <__multadd+0x54>
 800c600:	0032      	movs	r2, r6
 800c602:	21ba      	movs	r1, #186	; 0xba
 800c604:	4b0c      	ldr	r3, [pc, #48]	; (800c638 <__multadd+0x80>)
 800c606:	480d      	ldr	r0, [pc, #52]	; (800c63c <__multadd+0x84>)
 800c608:	f003 fa68 	bl	800fadc <__assert_func>
 800c60c:	0021      	movs	r1, r4
 800c60e:	6922      	ldr	r2, [r4, #16]
 800c610:	310c      	adds	r1, #12
 800c612:	3202      	adds	r2, #2
 800c614:	0092      	lsls	r2, r2, #2
 800c616:	300c      	adds	r0, #12
 800c618:	f7ff fb01 	bl	800bc1e <memcpy>
 800c61c:	0021      	movs	r1, r4
 800c61e:	9801      	ldr	r0, [sp, #4]
 800c620:	f7ff ffc0 	bl	800c5a4 <_Bfree>
 800c624:	0034      	movs	r4, r6
 800c626:	1d3b      	adds	r3, r7, #4
 800c628:	009b      	lsls	r3, r3, #2
 800c62a:	18e3      	adds	r3, r4, r3
 800c62c:	605d      	str	r5, [r3, #4]
 800c62e:	1c7b      	adds	r3, r7, #1
 800c630:	6123      	str	r3, [r4, #16]
 800c632:	0020      	movs	r0, r4
 800c634:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c636:	46c0      	nop			; (mov r8, r8)
 800c638:	08014099 	.word	0x08014099
 800c63c:	0801410a 	.word	0x0801410a

0800c640 <__s2b>:
 800c640:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c642:	0006      	movs	r6, r0
 800c644:	0018      	movs	r0, r3
 800c646:	000c      	movs	r4, r1
 800c648:	3008      	adds	r0, #8
 800c64a:	2109      	movs	r1, #9
 800c64c:	9301      	str	r3, [sp, #4]
 800c64e:	0015      	movs	r5, r2
 800c650:	f7f3 fdfe 	bl	8000250 <__divsi3>
 800c654:	2301      	movs	r3, #1
 800c656:	2100      	movs	r1, #0
 800c658:	4283      	cmp	r3, r0
 800c65a:	db0a      	blt.n	800c672 <__s2b+0x32>
 800c65c:	0030      	movs	r0, r6
 800c65e:	f7ff ff79 	bl	800c554 <_Balloc>
 800c662:	1e01      	subs	r1, r0, #0
 800c664:	d108      	bne.n	800c678 <__s2b+0x38>
 800c666:	000a      	movs	r2, r1
 800c668:	4b19      	ldr	r3, [pc, #100]	; (800c6d0 <__s2b+0x90>)
 800c66a:	481a      	ldr	r0, [pc, #104]	; (800c6d4 <__s2b+0x94>)
 800c66c:	31d3      	adds	r1, #211	; 0xd3
 800c66e:	f003 fa35 	bl	800fadc <__assert_func>
 800c672:	005b      	lsls	r3, r3, #1
 800c674:	3101      	adds	r1, #1
 800c676:	e7ef      	b.n	800c658 <__s2b+0x18>
 800c678:	9b08      	ldr	r3, [sp, #32]
 800c67a:	6143      	str	r3, [r0, #20]
 800c67c:	2301      	movs	r3, #1
 800c67e:	6103      	str	r3, [r0, #16]
 800c680:	2d09      	cmp	r5, #9
 800c682:	dd18      	ble.n	800c6b6 <__s2b+0x76>
 800c684:	0023      	movs	r3, r4
 800c686:	3309      	adds	r3, #9
 800c688:	001f      	movs	r7, r3
 800c68a:	9300      	str	r3, [sp, #0]
 800c68c:	1964      	adds	r4, r4, r5
 800c68e:	783b      	ldrb	r3, [r7, #0]
 800c690:	220a      	movs	r2, #10
 800c692:	0030      	movs	r0, r6
 800c694:	3b30      	subs	r3, #48	; 0x30
 800c696:	f7ff ff8f 	bl	800c5b8 <__multadd>
 800c69a:	3701      	adds	r7, #1
 800c69c:	0001      	movs	r1, r0
 800c69e:	42a7      	cmp	r7, r4
 800c6a0:	d1f5      	bne.n	800c68e <__s2b+0x4e>
 800c6a2:	002c      	movs	r4, r5
 800c6a4:	9b00      	ldr	r3, [sp, #0]
 800c6a6:	3c08      	subs	r4, #8
 800c6a8:	191c      	adds	r4, r3, r4
 800c6aa:	002f      	movs	r7, r5
 800c6ac:	9b01      	ldr	r3, [sp, #4]
 800c6ae:	429f      	cmp	r7, r3
 800c6b0:	db04      	blt.n	800c6bc <__s2b+0x7c>
 800c6b2:	0008      	movs	r0, r1
 800c6b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c6b6:	2509      	movs	r5, #9
 800c6b8:	340a      	adds	r4, #10
 800c6ba:	e7f6      	b.n	800c6aa <__s2b+0x6a>
 800c6bc:	1b63      	subs	r3, r4, r5
 800c6be:	5ddb      	ldrb	r3, [r3, r7]
 800c6c0:	220a      	movs	r2, #10
 800c6c2:	0030      	movs	r0, r6
 800c6c4:	3b30      	subs	r3, #48	; 0x30
 800c6c6:	f7ff ff77 	bl	800c5b8 <__multadd>
 800c6ca:	3701      	adds	r7, #1
 800c6cc:	0001      	movs	r1, r0
 800c6ce:	e7ed      	b.n	800c6ac <__s2b+0x6c>
 800c6d0:	08014099 	.word	0x08014099
 800c6d4:	0801410a 	.word	0x0801410a

0800c6d8 <__hi0bits>:
 800c6d8:	0003      	movs	r3, r0
 800c6da:	0c02      	lsrs	r2, r0, #16
 800c6dc:	2000      	movs	r0, #0
 800c6de:	4282      	cmp	r2, r0
 800c6e0:	d101      	bne.n	800c6e6 <__hi0bits+0xe>
 800c6e2:	041b      	lsls	r3, r3, #16
 800c6e4:	3010      	adds	r0, #16
 800c6e6:	0e1a      	lsrs	r2, r3, #24
 800c6e8:	d101      	bne.n	800c6ee <__hi0bits+0x16>
 800c6ea:	3008      	adds	r0, #8
 800c6ec:	021b      	lsls	r3, r3, #8
 800c6ee:	0f1a      	lsrs	r2, r3, #28
 800c6f0:	d101      	bne.n	800c6f6 <__hi0bits+0x1e>
 800c6f2:	3004      	adds	r0, #4
 800c6f4:	011b      	lsls	r3, r3, #4
 800c6f6:	0f9a      	lsrs	r2, r3, #30
 800c6f8:	d101      	bne.n	800c6fe <__hi0bits+0x26>
 800c6fa:	3002      	adds	r0, #2
 800c6fc:	009b      	lsls	r3, r3, #2
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	db03      	blt.n	800c70a <__hi0bits+0x32>
 800c702:	3001      	adds	r0, #1
 800c704:	005b      	lsls	r3, r3, #1
 800c706:	d400      	bmi.n	800c70a <__hi0bits+0x32>
 800c708:	2020      	movs	r0, #32
 800c70a:	4770      	bx	lr

0800c70c <__lo0bits>:
 800c70c:	6803      	ldr	r3, [r0, #0]
 800c70e:	0001      	movs	r1, r0
 800c710:	2207      	movs	r2, #7
 800c712:	0018      	movs	r0, r3
 800c714:	4010      	ands	r0, r2
 800c716:	4213      	tst	r3, r2
 800c718:	d00d      	beq.n	800c736 <__lo0bits+0x2a>
 800c71a:	3a06      	subs	r2, #6
 800c71c:	2000      	movs	r0, #0
 800c71e:	4213      	tst	r3, r2
 800c720:	d105      	bne.n	800c72e <__lo0bits+0x22>
 800c722:	3002      	adds	r0, #2
 800c724:	4203      	tst	r3, r0
 800c726:	d003      	beq.n	800c730 <__lo0bits+0x24>
 800c728:	40d3      	lsrs	r3, r2
 800c72a:	0010      	movs	r0, r2
 800c72c:	600b      	str	r3, [r1, #0]
 800c72e:	4770      	bx	lr
 800c730:	089b      	lsrs	r3, r3, #2
 800c732:	600b      	str	r3, [r1, #0]
 800c734:	e7fb      	b.n	800c72e <__lo0bits+0x22>
 800c736:	b29a      	uxth	r2, r3
 800c738:	2a00      	cmp	r2, #0
 800c73a:	d101      	bne.n	800c740 <__lo0bits+0x34>
 800c73c:	2010      	movs	r0, #16
 800c73e:	0c1b      	lsrs	r3, r3, #16
 800c740:	b2da      	uxtb	r2, r3
 800c742:	2a00      	cmp	r2, #0
 800c744:	d101      	bne.n	800c74a <__lo0bits+0x3e>
 800c746:	3008      	adds	r0, #8
 800c748:	0a1b      	lsrs	r3, r3, #8
 800c74a:	071a      	lsls	r2, r3, #28
 800c74c:	d101      	bne.n	800c752 <__lo0bits+0x46>
 800c74e:	3004      	adds	r0, #4
 800c750:	091b      	lsrs	r3, r3, #4
 800c752:	079a      	lsls	r2, r3, #30
 800c754:	d101      	bne.n	800c75a <__lo0bits+0x4e>
 800c756:	3002      	adds	r0, #2
 800c758:	089b      	lsrs	r3, r3, #2
 800c75a:	07da      	lsls	r2, r3, #31
 800c75c:	d4e9      	bmi.n	800c732 <__lo0bits+0x26>
 800c75e:	3001      	adds	r0, #1
 800c760:	085b      	lsrs	r3, r3, #1
 800c762:	d1e6      	bne.n	800c732 <__lo0bits+0x26>
 800c764:	2020      	movs	r0, #32
 800c766:	e7e2      	b.n	800c72e <__lo0bits+0x22>

0800c768 <__i2b>:
 800c768:	b510      	push	{r4, lr}
 800c76a:	000c      	movs	r4, r1
 800c76c:	2101      	movs	r1, #1
 800c76e:	f7ff fef1 	bl	800c554 <_Balloc>
 800c772:	2800      	cmp	r0, #0
 800c774:	d107      	bne.n	800c786 <__i2b+0x1e>
 800c776:	2146      	movs	r1, #70	; 0x46
 800c778:	4c05      	ldr	r4, [pc, #20]	; (800c790 <__i2b+0x28>)
 800c77a:	0002      	movs	r2, r0
 800c77c:	4b05      	ldr	r3, [pc, #20]	; (800c794 <__i2b+0x2c>)
 800c77e:	0020      	movs	r0, r4
 800c780:	31ff      	adds	r1, #255	; 0xff
 800c782:	f003 f9ab 	bl	800fadc <__assert_func>
 800c786:	2301      	movs	r3, #1
 800c788:	6144      	str	r4, [r0, #20]
 800c78a:	6103      	str	r3, [r0, #16]
 800c78c:	bd10      	pop	{r4, pc}
 800c78e:	46c0      	nop			; (mov r8, r8)
 800c790:	0801410a 	.word	0x0801410a
 800c794:	08014099 	.word	0x08014099

0800c798 <__multiply>:
 800c798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c79a:	0015      	movs	r5, r2
 800c79c:	690a      	ldr	r2, [r1, #16]
 800c79e:	692b      	ldr	r3, [r5, #16]
 800c7a0:	000c      	movs	r4, r1
 800c7a2:	b08b      	sub	sp, #44	; 0x2c
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	da01      	bge.n	800c7ac <__multiply+0x14>
 800c7a8:	002c      	movs	r4, r5
 800c7aa:	000d      	movs	r5, r1
 800c7ac:	6927      	ldr	r7, [r4, #16]
 800c7ae:	692e      	ldr	r6, [r5, #16]
 800c7b0:	6861      	ldr	r1, [r4, #4]
 800c7b2:	19bb      	adds	r3, r7, r6
 800c7b4:	9303      	str	r3, [sp, #12]
 800c7b6:	68a3      	ldr	r3, [r4, #8]
 800c7b8:	19ba      	adds	r2, r7, r6
 800c7ba:	4293      	cmp	r3, r2
 800c7bc:	da00      	bge.n	800c7c0 <__multiply+0x28>
 800c7be:	3101      	adds	r1, #1
 800c7c0:	f7ff fec8 	bl	800c554 <_Balloc>
 800c7c4:	9002      	str	r0, [sp, #8]
 800c7c6:	2800      	cmp	r0, #0
 800c7c8:	d106      	bne.n	800c7d8 <__multiply+0x40>
 800c7ca:	21b1      	movs	r1, #177	; 0xb1
 800c7cc:	4b48      	ldr	r3, [pc, #288]	; (800c8f0 <__multiply+0x158>)
 800c7ce:	4849      	ldr	r0, [pc, #292]	; (800c8f4 <__multiply+0x15c>)
 800c7d0:	9a02      	ldr	r2, [sp, #8]
 800c7d2:	0049      	lsls	r1, r1, #1
 800c7d4:	f003 f982 	bl	800fadc <__assert_func>
 800c7d8:	9b02      	ldr	r3, [sp, #8]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	3314      	adds	r3, #20
 800c7de:	469c      	mov	ip, r3
 800c7e0:	19bb      	adds	r3, r7, r6
 800c7e2:	009b      	lsls	r3, r3, #2
 800c7e4:	4463      	add	r3, ip
 800c7e6:	9304      	str	r3, [sp, #16]
 800c7e8:	4663      	mov	r3, ip
 800c7ea:	9904      	ldr	r1, [sp, #16]
 800c7ec:	428b      	cmp	r3, r1
 800c7ee:	d32a      	bcc.n	800c846 <__multiply+0xae>
 800c7f0:	0023      	movs	r3, r4
 800c7f2:	00bf      	lsls	r7, r7, #2
 800c7f4:	3314      	adds	r3, #20
 800c7f6:	3514      	adds	r5, #20
 800c7f8:	9308      	str	r3, [sp, #32]
 800c7fa:	00b6      	lsls	r6, r6, #2
 800c7fc:	19db      	adds	r3, r3, r7
 800c7fe:	9305      	str	r3, [sp, #20]
 800c800:	19ab      	adds	r3, r5, r6
 800c802:	9309      	str	r3, [sp, #36]	; 0x24
 800c804:	2304      	movs	r3, #4
 800c806:	9306      	str	r3, [sp, #24]
 800c808:	0023      	movs	r3, r4
 800c80a:	9a05      	ldr	r2, [sp, #20]
 800c80c:	3315      	adds	r3, #21
 800c80e:	9501      	str	r5, [sp, #4]
 800c810:	429a      	cmp	r2, r3
 800c812:	d305      	bcc.n	800c820 <__multiply+0x88>
 800c814:	1b13      	subs	r3, r2, r4
 800c816:	3b15      	subs	r3, #21
 800c818:	089b      	lsrs	r3, r3, #2
 800c81a:	3301      	adds	r3, #1
 800c81c:	009b      	lsls	r3, r3, #2
 800c81e:	9306      	str	r3, [sp, #24]
 800c820:	9b01      	ldr	r3, [sp, #4]
 800c822:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c824:	4293      	cmp	r3, r2
 800c826:	d310      	bcc.n	800c84a <__multiply+0xb2>
 800c828:	9b03      	ldr	r3, [sp, #12]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	dd05      	ble.n	800c83a <__multiply+0xa2>
 800c82e:	9b04      	ldr	r3, [sp, #16]
 800c830:	3b04      	subs	r3, #4
 800c832:	9304      	str	r3, [sp, #16]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d056      	beq.n	800c8e8 <__multiply+0x150>
 800c83a:	9b02      	ldr	r3, [sp, #8]
 800c83c:	9a03      	ldr	r2, [sp, #12]
 800c83e:	0018      	movs	r0, r3
 800c840:	611a      	str	r2, [r3, #16]
 800c842:	b00b      	add	sp, #44	; 0x2c
 800c844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c846:	c304      	stmia	r3!, {r2}
 800c848:	e7cf      	b.n	800c7ea <__multiply+0x52>
 800c84a:	9b01      	ldr	r3, [sp, #4]
 800c84c:	6818      	ldr	r0, [r3, #0]
 800c84e:	b280      	uxth	r0, r0
 800c850:	2800      	cmp	r0, #0
 800c852:	d01e      	beq.n	800c892 <__multiply+0xfa>
 800c854:	4667      	mov	r7, ip
 800c856:	2500      	movs	r5, #0
 800c858:	9e08      	ldr	r6, [sp, #32]
 800c85a:	ce02      	ldmia	r6!, {r1}
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	9307      	str	r3, [sp, #28]
 800c860:	b28b      	uxth	r3, r1
 800c862:	4343      	muls	r3, r0
 800c864:	001a      	movs	r2, r3
 800c866:	466b      	mov	r3, sp
 800c868:	8b9b      	ldrh	r3, [r3, #28]
 800c86a:	18d3      	adds	r3, r2, r3
 800c86c:	195b      	adds	r3, r3, r5
 800c86e:	0c0d      	lsrs	r5, r1, #16
 800c870:	4345      	muls	r5, r0
 800c872:	9a07      	ldr	r2, [sp, #28]
 800c874:	0c11      	lsrs	r1, r2, #16
 800c876:	1869      	adds	r1, r5, r1
 800c878:	0c1a      	lsrs	r2, r3, #16
 800c87a:	188a      	adds	r2, r1, r2
 800c87c:	b29b      	uxth	r3, r3
 800c87e:	0c15      	lsrs	r5, r2, #16
 800c880:	0412      	lsls	r2, r2, #16
 800c882:	431a      	orrs	r2, r3
 800c884:	9b05      	ldr	r3, [sp, #20]
 800c886:	c704      	stmia	r7!, {r2}
 800c888:	42b3      	cmp	r3, r6
 800c88a:	d8e6      	bhi.n	800c85a <__multiply+0xc2>
 800c88c:	4663      	mov	r3, ip
 800c88e:	9a06      	ldr	r2, [sp, #24]
 800c890:	509d      	str	r5, [r3, r2]
 800c892:	9b01      	ldr	r3, [sp, #4]
 800c894:	6818      	ldr	r0, [r3, #0]
 800c896:	0c00      	lsrs	r0, r0, #16
 800c898:	d020      	beq.n	800c8dc <__multiply+0x144>
 800c89a:	4663      	mov	r3, ip
 800c89c:	0025      	movs	r5, r4
 800c89e:	4661      	mov	r1, ip
 800c8a0:	2700      	movs	r7, #0
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	3514      	adds	r5, #20
 800c8a6:	682a      	ldr	r2, [r5, #0]
 800c8a8:	680e      	ldr	r6, [r1, #0]
 800c8aa:	b292      	uxth	r2, r2
 800c8ac:	4342      	muls	r2, r0
 800c8ae:	0c36      	lsrs	r6, r6, #16
 800c8b0:	1992      	adds	r2, r2, r6
 800c8b2:	19d2      	adds	r2, r2, r7
 800c8b4:	0416      	lsls	r6, r2, #16
 800c8b6:	b29b      	uxth	r3, r3
 800c8b8:	431e      	orrs	r6, r3
 800c8ba:	600e      	str	r6, [r1, #0]
 800c8bc:	cd40      	ldmia	r5!, {r6}
 800c8be:	684b      	ldr	r3, [r1, #4]
 800c8c0:	0c36      	lsrs	r6, r6, #16
 800c8c2:	4346      	muls	r6, r0
 800c8c4:	b29b      	uxth	r3, r3
 800c8c6:	0c12      	lsrs	r2, r2, #16
 800c8c8:	18f3      	adds	r3, r6, r3
 800c8ca:	189b      	adds	r3, r3, r2
 800c8cc:	9a05      	ldr	r2, [sp, #20]
 800c8ce:	0c1f      	lsrs	r7, r3, #16
 800c8d0:	3104      	adds	r1, #4
 800c8d2:	42aa      	cmp	r2, r5
 800c8d4:	d8e7      	bhi.n	800c8a6 <__multiply+0x10e>
 800c8d6:	4662      	mov	r2, ip
 800c8d8:	9906      	ldr	r1, [sp, #24]
 800c8da:	5053      	str	r3, [r2, r1]
 800c8dc:	9b01      	ldr	r3, [sp, #4]
 800c8de:	3304      	adds	r3, #4
 800c8e0:	9301      	str	r3, [sp, #4]
 800c8e2:	2304      	movs	r3, #4
 800c8e4:	449c      	add	ip, r3
 800c8e6:	e79b      	b.n	800c820 <__multiply+0x88>
 800c8e8:	9b03      	ldr	r3, [sp, #12]
 800c8ea:	3b01      	subs	r3, #1
 800c8ec:	9303      	str	r3, [sp, #12]
 800c8ee:	e79b      	b.n	800c828 <__multiply+0x90>
 800c8f0:	08014099 	.word	0x08014099
 800c8f4:	0801410a 	.word	0x0801410a

0800c8f8 <__pow5mult>:
 800c8f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8fa:	2303      	movs	r3, #3
 800c8fc:	0015      	movs	r5, r2
 800c8fe:	0007      	movs	r7, r0
 800c900:	000e      	movs	r6, r1
 800c902:	401a      	ands	r2, r3
 800c904:	421d      	tst	r5, r3
 800c906:	d008      	beq.n	800c91a <__pow5mult+0x22>
 800c908:	491a      	ldr	r1, [pc, #104]	; (800c974 <__pow5mult+0x7c>)
 800c90a:	3a01      	subs	r2, #1
 800c90c:	0092      	lsls	r2, r2, #2
 800c90e:	5852      	ldr	r2, [r2, r1]
 800c910:	2300      	movs	r3, #0
 800c912:	0031      	movs	r1, r6
 800c914:	f7ff fe50 	bl	800c5b8 <__multadd>
 800c918:	0006      	movs	r6, r0
 800c91a:	10ad      	asrs	r5, r5, #2
 800c91c:	d027      	beq.n	800c96e <__pow5mult+0x76>
 800c91e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800c920:	2c00      	cmp	r4, #0
 800c922:	d107      	bne.n	800c934 <__pow5mult+0x3c>
 800c924:	0038      	movs	r0, r7
 800c926:	4914      	ldr	r1, [pc, #80]	; (800c978 <__pow5mult+0x80>)
 800c928:	f7ff ff1e 	bl	800c768 <__i2b>
 800c92c:	2300      	movs	r3, #0
 800c92e:	0004      	movs	r4, r0
 800c930:	6438      	str	r0, [r7, #64]	; 0x40
 800c932:	6003      	str	r3, [r0, #0]
 800c934:	2301      	movs	r3, #1
 800c936:	421d      	tst	r5, r3
 800c938:	d00a      	beq.n	800c950 <__pow5mult+0x58>
 800c93a:	0031      	movs	r1, r6
 800c93c:	0022      	movs	r2, r4
 800c93e:	0038      	movs	r0, r7
 800c940:	f7ff ff2a 	bl	800c798 <__multiply>
 800c944:	0031      	movs	r1, r6
 800c946:	9001      	str	r0, [sp, #4]
 800c948:	0038      	movs	r0, r7
 800c94a:	f7ff fe2b 	bl	800c5a4 <_Bfree>
 800c94e:	9e01      	ldr	r6, [sp, #4]
 800c950:	106d      	asrs	r5, r5, #1
 800c952:	d00c      	beq.n	800c96e <__pow5mult+0x76>
 800c954:	6820      	ldr	r0, [r4, #0]
 800c956:	2800      	cmp	r0, #0
 800c958:	d107      	bne.n	800c96a <__pow5mult+0x72>
 800c95a:	0022      	movs	r2, r4
 800c95c:	0021      	movs	r1, r4
 800c95e:	0038      	movs	r0, r7
 800c960:	f7ff ff1a 	bl	800c798 <__multiply>
 800c964:	2300      	movs	r3, #0
 800c966:	6020      	str	r0, [r4, #0]
 800c968:	6003      	str	r3, [r0, #0]
 800c96a:	0004      	movs	r4, r0
 800c96c:	e7e2      	b.n	800c934 <__pow5mult+0x3c>
 800c96e:	0030      	movs	r0, r6
 800c970:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c972:	46c0      	nop			; (mov r8, r8)
 800c974:	08014258 	.word	0x08014258
 800c978:	00000271 	.word	0x00000271

0800c97c <__lshift>:
 800c97c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c97e:	000c      	movs	r4, r1
 800c980:	0017      	movs	r7, r2
 800c982:	6923      	ldr	r3, [r4, #16]
 800c984:	1155      	asrs	r5, r2, #5
 800c986:	b087      	sub	sp, #28
 800c988:	18eb      	adds	r3, r5, r3
 800c98a:	9302      	str	r3, [sp, #8]
 800c98c:	3301      	adds	r3, #1
 800c98e:	9301      	str	r3, [sp, #4]
 800c990:	6849      	ldr	r1, [r1, #4]
 800c992:	68a3      	ldr	r3, [r4, #8]
 800c994:	9004      	str	r0, [sp, #16]
 800c996:	9a01      	ldr	r2, [sp, #4]
 800c998:	4293      	cmp	r3, r2
 800c99a:	db10      	blt.n	800c9be <__lshift+0x42>
 800c99c:	9804      	ldr	r0, [sp, #16]
 800c99e:	f7ff fdd9 	bl	800c554 <_Balloc>
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	0002      	movs	r2, r0
 800c9a6:	0006      	movs	r6, r0
 800c9a8:	0019      	movs	r1, r3
 800c9aa:	3214      	adds	r2, #20
 800c9ac:	4298      	cmp	r0, r3
 800c9ae:	d10c      	bne.n	800c9ca <__lshift+0x4e>
 800c9b0:	31df      	adds	r1, #223	; 0xdf
 800c9b2:	0032      	movs	r2, r6
 800c9b4:	4b26      	ldr	r3, [pc, #152]	; (800ca50 <__lshift+0xd4>)
 800c9b6:	4827      	ldr	r0, [pc, #156]	; (800ca54 <__lshift+0xd8>)
 800c9b8:	31ff      	adds	r1, #255	; 0xff
 800c9ba:	f003 f88f 	bl	800fadc <__assert_func>
 800c9be:	3101      	adds	r1, #1
 800c9c0:	005b      	lsls	r3, r3, #1
 800c9c2:	e7e8      	b.n	800c996 <__lshift+0x1a>
 800c9c4:	0098      	lsls	r0, r3, #2
 800c9c6:	5011      	str	r1, [r2, r0]
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	42ab      	cmp	r3, r5
 800c9cc:	dbfa      	blt.n	800c9c4 <__lshift+0x48>
 800c9ce:	43eb      	mvns	r3, r5
 800c9d0:	17db      	asrs	r3, r3, #31
 800c9d2:	401d      	ands	r5, r3
 800c9d4:	211f      	movs	r1, #31
 800c9d6:	0023      	movs	r3, r4
 800c9d8:	0038      	movs	r0, r7
 800c9da:	00ad      	lsls	r5, r5, #2
 800c9dc:	1955      	adds	r5, r2, r5
 800c9de:	6922      	ldr	r2, [r4, #16]
 800c9e0:	3314      	adds	r3, #20
 800c9e2:	0092      	lsls	r2, r2, #2
 800c9e4:	4008      	ands	r0, r1
 800c9e6:	4684      	mov	ip, r0
 800c9e8:	189a      	adds	r2, r3, r2
 800c9ea:	420f      	tst	r7, r1
 800c9ec:	d02a      	beq.n	800ca44 <__lshift+0xc8>
 800c9ee:	3101      	adds	r1, #1
 800c9f0:	1a09      	subs	r1, r1, r0
 800c9f2:	9105      	str	r1, [sp, #20]
 800c9f4:	2100      	movs	r1, #0
 800c9f6:	9503      	str	r5, [sp, #12]
 800c9f8:	4667      	mov	r7, ip
 800c9fa:	6818      	ldr	r0, [r3, #0]
 800c9fc:	40b8      	lsls	r0, r7
 800c9fe:	4308      	orrs	r0, r1
 800ca00:	9903      	ldr	r1, [sp, #12]
 800ca02:	c101      	stmia	r1!, {r0}
 800ca04:	9103      	str	r1, [sp, #12]
 800ca06:	9805      	ldr	r0, [sp, #20]
 800ca08:	cb02      	ldmia	r3!, {r1}
 800ca0a:	40c1      	lsrs	r1, r0
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	d8f3      	bhi.n	800c9f8 <__lshift+0x7c>
 800ca10:	0020      	movs	r0, r4
 800ca12:	3015      	adds	r0, #21
 800ca14:	2304      	movs	r3, #4
 800ca16:	4282      	cmp	r2, r0
 800ca18:	d304      	bcc.n	800ca24 <__lshift+0xa8>
 800ca1a:	1b13      	subs	r3, r2, r4
 800ca1c:	3b15      	subs	r3, #21
 800ca1e:	089b      	lsrs	r3, r3, #2
 800ca20:	3301      	adds	r3, #1
 800ca22:	009b      	lsls	r3, r3, #2
 800ca24:	50e9      	str	r1, [r5, r3]
 800ca26:	2900      	cmp	r1, #0
 800ca28:	d002      	beq.n	800ca30 <__lshift+0xb4>
 800ca2a:	9b02      	ldr	r3, [sp, #8]
 800ca2c:	3302      	adds	r3, #2
 800ca2e:	9301      	str	r3, [sp, #4]
 800ca30:	9b01      	ldr	r3, [sp, #4]
 800ca32:	9804      	ldr	r0, [sp, #16]
 800ca34:	3b01      	subs	r3, #1
 800ca36:	0021      	movs	r1, r4
 800ca38:	6133      	str	r3, [r6, #16]
 800ca3a:	f7ff fdb3 	bl	800c5a4 <_Bfree>
 800ca3e:	0030      	movs	r0, r6
 800ca40:	b007      	add	sp, #28
 800ca42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca44:	cb02      	ldmia	r3!, {r1}
 800ca46:	c502      	stmia	r5!, {r1}
 800ca48:	429a      	cmp	r2, r3
 800ca4a:	d8fb      	bhi.n	800ca44 <__lshift+0xc8>
 800ca4c:	e7f0      	b.n	800ca30 <__lshift+0xb4>
 800ca4e:	46c0      	nop			; (mov r8, r8)
 800ca50:	08014099 	.word	0x08014099
 800ca54:	0801410a 	.word	0x0801410a

0800ca58 <__mcmp>:
 800ca58:	b530      	push	{r4, r5, lr}
 800ca5a:	690b      	ldr	r3, [r1, #16]
 800ca5c:	6904      	ldr	r4, [r0, #16]
 800ca5e:	0002      	movs	r2, r0
 800ca60:	1ae0      	subs	r0, r4, r3
 800ca62:	429c      	cmp	r4, r3
 800ca64:	d10e      	bne.n	800ca84 <__mcmp+0x2c>
 800ca66:	3214      	adds	r2, #20
 800ca68:	009b      	lsls	r3, r3, #2
 800ca6a:	3114      	adds	r1, #20
 800ca6c:	0014      	movs	r4, r2
 800ca6e:	18c9      	adds	r1, r1, r3
 800ca70:	18d2      	adds	r2, r2, r3
 800ca72:	3a04      	subs	r2, #4
 800ca74:	3904      	subs	r1, #4
 800ca76:	6815      	ldr	r5, [r2, #0]
 800ca78:	680b      	ldr	r3, [r1, #0]
 800ca7a:	429d      	cmp	r5, r3
 800ca7c:	d003      	beq.n	800ca86 <__mcmp+0x2e>
 800ca7e:	2001      	movs	r0, #1
 800ca80:	429d      	cmp	r5, r3
 800ca82:	d303      	bcc.n	800ca8c <__mcmp+0x34>
 800ca84:	bd30      	pop	{r4, r5, pc}
 800ca86:	4294      	cmp	r4, r2
 800ca88:	d3f3      	bcc.n	800ca72 <__mcmp+0x1a>
 800ca8a:	e7fb      	b.n	800ca84 <__mcmp+0x2c>
 800ca8c:	4240      	negs	r0, r0
 800ca8e:	e7f9      	b.n	800ca84 <__mcmp+0x2c>

0800ca90 <__mdiff>:
 800ca90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca92:	000e      	movs	r6, r1
 800ca94:	0007      	movs	r7, r0
 800ca96:	0011      	movs	r1, r2
 800ca98:	0030      	movs	r0, r6
 800ca9a:	b087      	sub	sp, #28
 800ca9c:	0014      	movs	r4, r2
 800ca9e:	f7ff ffdb 	bl	800ca58 <__mcmp>
 800caa2:	1e05      	subs	r5, r0, #0
 800caa4:	d110      	bne.n	800cac8 <__mdiff+0x38>
 800caa6:	0001      	movs	r1, r0
 800caa8:	0038      	movs	r0, r7
 800caaa:	f7ff fd53 	bl	800c554 <_Balloc>
 800caae:	1e02      	subs	r2, r0, #0
 800cab0:	d104      	bne.n	800cabc <__mdiff+0x2c>
 800cab2:	4b3f      	ldr	r3, [pc, #252]	; (800cbb0 <__mdiff+0x120>)
 800cab4:	483f      	ldr	r0, [pc, #252]	; (800cbb4 <__mdiff+0x124>)
 800cab6:	4940      	ldr	r1, [pc, #256]	; (800cbb8 <__mdiff+0x128>)
 800cab8:	f003 f810 	bl	800fadc <__assert_func>
 800cabc:	2301      	movs	r3, #1
 800cabe:	6145      	str	r5, [r0, #20]
 800cac0:	6103      	str	r3, [r0, #16]
 800cac2:	0010      	movs	r0, r2
 800cac4:	b007      	add	sp, #28
 800cac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cac8:	2301      	movs	r3, #1
 800caca:	9301      	str	r3, [sp, #4]
 800cacc:	2800      	cmp	r0, #0
 800cace:	db04      	blt.n	800cada <__mdiff+0x4a>
 800cad0:	0023      	movs	r3, r4
 800cad2:	0034      	movs	r4, r6
 800cad4:	001e      	movs	r6, r3
 800cad6:	2300      	movs	r3, #0
 800cad8:	9301      	str	r3, [sp, #4]
 800cada:	0038      	movs	r0, r7
 800cadc:	6861      	ldr	r1, [r4, #4]
 800cade:	f7ff fd39 	bl	800c554 <_Balloc>
 800cae2:	1e02      	subs	r2, r0, #0
 800cae4:	d103      	bne.n	800caee <__mdiff+0x5e>
 800cae6:	4b32      	ldr	r3, [pc, #200]	; (800cbb0 <__mdiff+0x120>)
 800cae8:	4832      	ldr	r0, [pc, #200]	; (800cbb4 <__mdiff+0x124>)
 800caea:	4934      	ldr	r1, [pc, #208]	; (800cbbc <__mdiff+0x12c>)
 800caec:	e7e4      	b.n	800cab8 <__mdiff+0x28>
 800caee:	9b01      	ldr	r3, [sp, #4]
 800caf0:	2700      	movs	r7, #0
 800caf2:	60c3      	str	r3, [r0, #12]
 800caf4:	6920      	ldr	r0, [r4, #16]
 800caf6:	3414      	adds	r4, #20
 800caf8:	0083      	lsls	r3, r0, #2
 800cafa:	18e3      	adds	r3, r4, r3
 800cafc:	0021      	movs	r1, r4
 800cafe:	9401      	str	r4, [sp, #4]
 800cb00:	0034      	movs	r4, r6
 800cb02:	9302      	str	r3, [sp, #8]
 800cb04:	6933      	ldr	r3, [r6, #16]
 800cb06:	3414      	adds	r4, #20
 800cb08:	009b      	lsls	r3, r3, #2
 800cb0a:	18e3      	adds	r3, r4, r3
 800cb0c:	9303      	str	r3, [sp, #12]
 800cb0e:	0013      	movs	r3, r2
 800cb10:	3314      	adds	r3, #20
 800cb12:	469c      	mov	ip, r3
 800cb14:	9305      	str	r3, [sp, #20]
 800cb16:	9104      	str	r1, [sp, #16]
 800cb18:	9b04      	ldr	r3, [sp, #16]
 800cb1a:	cc02      	ldmia	r4!, {r1}
 800cb1c:	cb20      	ldmia	r3!, {r5}
 800cb1e:	9304      	str	r3, [sp, #16]
 800cb20:	b2ab      	uxth	r3, r5
 800cb22:	19df      	adds	r7, r3, r7
 800cb24:	b28b      	uxth	r3, r1
 800cb26:	1afb      	subs	r3, r7, r3
 800cb28:	0c09      	lsrs	r1, r1, #16
 800cb2a:	0c2d      	lsrs	r5, r5, #16
 800cb2c:	1a6d      	subs	r5, r5, r1
 800cb2e:	1419      	asrs	r1, r3, #16
 800cb30:	1869      	adds	r1, r5, r1
 800cb32:	b29b      	uxth	r3, r3
 800cb34:	140f      	asrs	r7, r1, #16
 800cb36:	0409      	lsls	r1, r1, #16
 800cb38:	4319      	orrs	r1, r3
 800cb3a:	4663      	mov	r3, ip
 800cb3c:	c302      	stmia	r3!, {r1}
 800cb3e:	469c      	mov	ip, r3
 800cb40:	9b03      	ldr	r3, [sp, #12]
 800cb42:	42a3      	cmp	r3, r4
 800cb44:	d8e8      	bhi.n	800cb18 <__mdiff+0x88>
 800cb46:	0031      	movs	r1, r6
 800cb48:	9c03      	ldr	r4, [sp, #12]
 800cb4a:	3115      	adds	r1, #21
 800cb4c:	2304      	movs	r3, #4
 800cb4e:	428c      	cmp	r4, r1
 800cb50:	d304      	bcc.n	800cb5c <__mdiff+0xcc>
 800cb52:	1ba3      	subs	r3, r4, r6
 800cb54:	3b15      	subs	r3, #21
 800cb56:	089b      	lsrs	r3, r3, #2
 800cb58:	3301      	adds	r3, #1
 800cb5a:	009b      	lsls	r3, r3, #2
 800cb5c:	9901      	ldr	r1, [sp, #4]
 800cb5e:	18cd      	adds	r5, r1, r3
 800cb60:	9905      	ldr	r1, [sp, #20]
 800cb62:	002e      	movs	r6, r5
 800cb64:	18cb      	adds	r3, r1, r3
 800cb66:	469c      	mov	ip, r3
 800cb68:	9902      	ldr	r1, [sp, #8]
 800cb6a:	428e      	cmp	r6, r1
 800cb6c:	d310      	bcc.n	800cb90 <__mdiff+0x100>
 800cb6e:	9e02      	ldr	r6, [sp, #8]
 800cb70:	1ee9      	subs	r1, r5, #3
 800cb72:	2400      	movs	r4, #0
 800cb74:	428e      	cmp	r6, r1
 800cb76:	d304      	bcc.n	800cb82 <__mdiff+0xf2>
 800cb78:	0031      	movs	r1, r6
 800cb7a:	3103      	adds	r1, #3
 800cb7c:	1b49      	subs	r1, r1, r5
 800cb7e:	0889      	lsrs	r1, r1, #2
 800cb80:	008c      	lsls	r4, r1, #2
 800cb82:	191b      	adds	r3, r3, r4
 800cb84:	3b04      	subs	r3, #4
 800cb86:	6819      	ldr	r1, [r3, #0]
 800cb88:	2900      	cmp	r1, #0
 800cb8a:	d00f      	beq.n	800cbac <__mdiff+0x11c>
 800cb8c:	6110      	str	r0, [r2, #16]
 800cb8e:	e798      	b.n	800cac2 <__mdiff+0x32>
 800cb90:	ce02      	ldmia	r6!, {r1}
 800cb92:	b28c      	uxth	r4, r1
 800cb94:	19e4      	adds	r4, r4, r7
 800cb96:	0c0f      	lsrs	r7, r1, #16
 800cb98:	1421      	asrs	r1, r4, #16
 800cb9a:	1879      	adds	r1, r7, r1
 800cb9c:	b2a4      	uxth	r4, r4
 800cb9e:	140f      	asrs	r7, r1, #16
 800cba0:	0409      	lsls	r1, r1, #16
 800cba2:	4321      	orrs	r1, r4
 800cba4:	4664      	mov	r4, ip
 800cba6:	c402      	stmia	r4!, {r1}
 800cba8:	46a4      	mov	ip, r4
 800cbaa:	e7dd      	b.n	800cb68 <__mdiff+0xd8>
 800cbac:	3801      	subs	r0, #1
 800cbae:	e7e9      	b.n	800cb84 <__mdiff+0xf4>
 800cbb0:	08014099 	.word	0x08014099
 800cbb4:	0801410a 	.word	0x0801410a
 800cbb8:	00000237 	.word	0x00000237
 800cbbc:	00000245 	.word	0x00000245

0800cbc0 <__ulp>:
 800cbc0:	2000      	movs	r0, #0
 800cbc2:	4b0b      	ldr	r3, [pc, #44]	; (800cbf0 <__ulp+0x30>)
 800cbc4:	4019      	ands	r1, r3
 800cbc6:	4b0b      	ldr	r3, [pc, #44]	; (800cbf4 <__ulp+0x34>)
 800cbc8:	18c9      	adds	r1, r1, r3
 800cbca:	4281      	cmp	r1, r0
 800cbcc:	dc06      	bgt.n	800cbdc <__ulp+0x1c>
 800cbce:	4249      	negs	r1, r1
 800cbd0:	150b      	asrs	r3, r1, #20
 800cbd2:	2b13      	cmp	r3, #19
 800cbd4:	dc03      	bgt.n	800cbde <__ulp+0x1e>
 800cbd6:	2180      	movs	r1, #128	; 0x80
 800cbd8:	0309      	lsls	r1, r1, #12
 800cbda:	4119      	asrs	r1, r3
 800cbdc:	4770      	bx	lr
 800cbde:	3b14      	subs	r3, #20
 800cbe0:	2001      	movs	r0, #1
 800cbe2:	2b1e      	cmp	r3, #30
 800cbe4:	dc02      	bgt.n	800cbec <__ulp+0x2c>
 800cbe6:	2080      	movs	r0, #128	; 0x80
 800cbe8:	0600      	lsls	r0, r0, #24
 800cbea:	40d8      	lsrs	r0, r3
 800cbec:	2100      	movs	r1, #0
 800cbee:	e7f5      	b.n	800cbdc <__ulp+0x1c>
 800cbf0:	7ff00000 	.word	0x7ff00000
 800cbf4:	fcc00000 	.word	0xfcc00000

0800cbf8 <__b2d>:
 800cbf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbfa:	0006      	movs	r6, r0
 800cbfc:	6903      	ldr	r3, [r0, #16]
 800cbfe:	3614      	adds	r6, #20
 800cc00:	009b      	lsls	r3, r3, #2
 800cc02:	18f3      	adds	r3, r6, r3
 800cc04:	1f1d      	subs	r5, r3, #4
 800cc06:	682c      	ldr	r4, [r5, #0]
 800cc08:	000f      	movs	r7, r1
 800cc0a:	0020      	movs	r0, r4
 800cc0c:	9301      	str	r3, [sp, #4]
 800cc0e:	f7ff fd63 	bl	800c6d8 <__hi0bits>
 800cc12:	2220      	movs	r2, #32
 800cc14:	1a12      	subs	r2, r2, r0
 800cc16:	603a      	str	r2, [r7, #0]
 800cc18:	0003      	movs	r3, r0
 800cc1a:	4a1c      	ldr	r2, [pc, #112]	; (800cc8c <__b2d+0x94>)
 800cc1c:	280a      	cmp	r0, #10
 800cc1e:	dc15      	bgt.n	800cc4c <__b2d+0x54>
 800cc20:	210b      	movs	r1, #11
 800cc22:	0027      	movs	r7, r4
 800cc24:	1a09      	subs	r1, r1, r0
 800cc26:	40cf      	lsrs	r7, r1
 800cc28:	433a      	orrs	r2, r7
 800cc2a:	468c      	mov	ip, r1
 800cc2c:	0011      	movs	r1, r2
 800cc2e:	2200      	movs	r2, #0
 800cc30:	42ae      	cmp	r6, r5
 800cc32:	d202      	bcs.n	800cc3a <__b2d+0x42>
 800cc34:	9a01      	ldr	r2, [sp, #4]
 800cc36:	3a08      	subs	r2, #8
 800cc38:	6812      	ldr	r2, [r2, #0]
 800cc3a:	3315      	adds	r3, #21
 800cc3c:	409c      	lsls	r4, r3
 800cc3e:	4663      	mov	r3, ip
 800cc40:	0027      	movs	r7, r4
 800cc42:	40da      	lsrs	r2, r3
 800cc44:	4317      	orrs	r7, r2
 800cc46:	0038      	movs	r0, r7
 800cc48:	b003      	add	sp, #12
 800cc4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc4c:	2700      	movs	r7, #0
 800cc4e:	42ae      	cmp	r6, r5
 800cc50:	d202      	bcs.n	800cc58 <__b2d+0x60>
 800cc52:	9d01      	ldr	r5, [sp, #4]
 800cc54:	3d08      	subs	r5, #8
 800cc56:	682f      	ldr	r7, [r5, #0]
 800cc58:	210b      	movs	r1, #11
 800cc5a:	4249      	negs	r1, r1
 800cc5c:	468c      	mov	ip, r1
 800cc5e:	449c      	add	ip, r3
 800cc60:	2b0b      	cmp	r3, #11
 800cc62:	d010      	beq.n	800cc86 <__b2d+0x8e>
 800cc64:	4661      	mov	r1, ip
 800cc66:	2320      	movs	r3, #32
 800cc68:	408c      	lsls	r4, r1
 800cc6a:	1a5b      	subs	r3, r3, r1
 800cc6c:	0039      	movs	r1, r7
 800cc6e:	40d9      	lsrs	r1, r3
 800cc70:	430c      	orrs	r4, r1
 800cc72:	4322      	orrs	r2, r4
 800cc74:	0011      	movs	r1, r2
 800cc76:	2200      	movs	r2, #0
 800cc78:	42b5      	cmp	r5, r6
 800cc7a:	d901      	bls.n	800cc80 <__b2d+0x88>
 800cc7c:	3d04      	subs	r5, #4
 800cc7e:	682a      	ldr	r2, [r5, #0]
 800cc80:	4664      	mov	r4, ip
 800cc82:	40a7      	lsls	r7, r4
 800cc84:	e7dd      	b.n	800cc42 <__b2d+0x4a>
 800cc86:	4322      	orrs	r2, r4
 800cc88:	0011      	movs	r1, r2
 800cc8a:	e7dc      	b.n	800cc46 <__b2d+0x4e>
 800cc8c:	3ff00000 	.word	0x3ff00000

0800cc90 <__d2b>:
 800cc90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc92:	2101      	movs	r1, #1
 800cc94:	0014      	movs	r4, r2
 800cc96:	001d      	movs	r5, r3
 800cc98:	9f08      	ldr	r7, [sp, #32]
 800cc9a:	f7ff fc5b 	bl	800c554 <_Balloc>
 800cc9e:	1e06      	subs	r6, r0, #0
 800cca0:	d105      	bne.n	800ccae <__d2b+0x1e>
 800cca2:	0032      	movs	r2, r6
 800cca4:	4b24      	ldr	r3, [pc, #144]	; (800cd38 <__d2b+0xa8>)
 800cca6:	4825      	ldr	r0, [pc, #148]	; (800cd3c <__d2b+0xac>)
 800cca8:	4925      	ldr	r1, [pc, #148]	; (800cd40 <__d2b+0xb0>)
 800ccaa:	f002 ff17 	bl	800fadc <__assert_func>
 800ccae:	032b      	lsls	r3, r5, #12
 800ccb0:	006d      	lsls	r5, r5, #1
 800ccb2:	0b1b      	lsrs	r3, r3, #12
 800ccb4:	0d6d      	lsrs	r5, r5, #21
 800ccb6:	d125      	bne.n	800cd04 <__d2b+0x74>
 800ccb8:	9301      	str	r3, [sp, #4]
 800ccba:	2c00      	cmp	r4, #0
 800ccbc:	d028      	beq.n	800cd10 <__d2b+0x80>
 800ccbe:	4668      	mov	r0, sp
 800ccc0:	9400      	str	r4, [sp, #0]
 800ccc2:	f7ff fd23 	bl	800c70c <__lo0bits>
 800ccc6:	9b01      	ldr	r3, [sp, #4]
 800ccc8:	9900      	ldr	r1, [sp, #0]
 800ccca:	2800      	cmp	r0, #0
 800cccc:	d01e      	beq.n	800cd0c <__d2b+0x7c>
 800ccce:	2220      	movs	r2, #32
 800ccd0:	001c      	movs	r4, r3
 800ccd2:	1a12      	subs	r2, r2, r0
 800ccd4:	4094      	lsls	r4, r2
 800ccd6:	0022      	movs	r2, r4
 800ccd8:	40c3      	lsrs	r3, r0
 800ccda:	430a      	orrs	r2, r1
 800ccdc:	6172      	str	r2, [r6, #20]
 800ccde:	9301      	str	r3, [sp, #4]
 800cce0:	9c01      	ldr	r4, [sp, #4]
 800cce2:	61b4      	str	r4, [r6, #24]
 800cce4:	1e63      	subs	r3, r4, #1
 800cce6:	419c      	sbcs	r4, r3
 800cce8:	3401      	adds	r4, #1
 800ccea:	6134      	str	r4, [r6, #16]
 800ccec:	2d00      	cmp	r5, #0
 800ccee:	d017      	beq.n	800cd20 <__d2b+0x90>
 800ccf0:	2435      	movs	r4, #53	; 0x35
 800ccf2:	4b14      	ldr	r3, [pc, #80]	; (800cd44 <__d2b+0xb4>)
 800ccf4:	18ed      	adds	r5, r5, r3
 800ccf6:	182d      	adds	r5, r5, r0
 800ccf8:	603d      	str	r5, [r7, #0]
 800ccfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccfc:	1a24      	subs	r4, r4, r0
 800ccfe:	601c      	str	r4, [r3, #0]
 800cd00:	0030      	movs	r0, r6
 800cd02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cd04:	2280      	movs	r2, #128	; 0x80
 800cd06:	0352      	lsls	r2, r2, #13
 800cd08:	4313      	orrs	r3, r2
 800cd0a:	e7d5      	b.n	800ccb8 <__d2b+0x28>
 800cd0c:	6171      	str	r1, [r6, #20]
 800cd0e:	e7e7      	b.n	800cce0 <__d2b+0x50>
 800cd10:	a801      	add	r0, sp, #4
 800cd12:	f7ff fcfb 	bl	800c70c <__lo0bits>
 800cd16:	9b01      	ldr	r3, [sp, #4]
 800cd18:	2401      	movs	r4, #1
 800cd1a:	6173      	str	r3, [r6, #20]
 800cd1c:	3020      	adds	r0, #32
 800cd1e:	e7e4      	b.n	800ccea <__d2b+0x5a>
 800cd20:	4b09      	ldr	r3, [pc, #36]	; (800cd48 <__d2b+0xb8>)
 800cd22:	18c0      	adds	r0, r0, r3
 800cd24:	4b09      	ldr	r3, [pc, #36]	; (800cd4c <__d2b+0xbc>)
 800cd26:	6038      	str	r0, [r7, #0]
 800cd28:	18e3      	adds	r3, r4, r3
 800cd2a:	009b      	lsls	r3, r3, #2
 800cd2c:	18f3      	adds	r3, r6, r3
 800cd2e:	6958      	ldr	r0, [r3, #20]
 800cd30:	f7ff fcd2 	bl	800c6d8 <__hi0bits>
 800cd34:	0164      	lsls	r4, r4, #5
 800cd36:	e7e0      	b.n	800ccfa <__d2b+0x6a>
 800cd38:	08014099 	.word	0x08014099
 800cd3c:	0801410a 	.word	0x0801410a
 800cd40:	0000030f 	.word	0x0000030f
 800cd44:	fffffbcd 	.word	0xfffffbcd
 800cd48:	fffffbce 	.word	0xfffffbce
 800cd4c:	3fffffff 	.word	0x3fffffff

0800cd50 <__ratio>:
 800cd50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd52:	b087      	sub	sp, #28
 800cd54:	000f      	movs	r7, r1
 800cd56:	a904      	add	r1, sp, #16
 800cd58:	0006      	movs	r6, r0
 800cd5a:	f7ff ff4d 	bl	800cbf8 <__b2d>
 800cd5e:	9000      	str	r0, [sp, #0]
 800cd60:	9101      	str	r1, [sp, #4]
 800cd62:	9c00      	ldr	r4, [sp, #0]
 800cd64:	9d01      	ldr	r5, [sp, #4]
 800cd66:	0038      	movs	r0, r7
 800cd68:	a905      	add	r1, sp, #20
 800cd6a:	f7ff ff45 	bl	800cbf8 <__b2d>
 800cd6e:	9002      	str	r0, [sp, #8]
 800cd70:	9103      	str	r1, [sp, #12]
 800cd72:	9a02      	ldr	r2, [sp, #8]
 800cd74:	9b03      	ldr	r3, [sp, #12]
 800cd76:	6930      	ldr	r0, [r6, #16]
 800cd78:	6939      	ldr	r1, [r7, #16]
 800cd7a:	9e04      	ldr	r6, [sp, #16]
 800cd7c:	1a40      	subs	r0, r0, r1
 800cd7e:	9905      	ldr	r1, [sp, #20]
 800cd80:	0140      	lsls	r0, r0, #5
 800cd82:	1a71      	subs	r1, r6, r1
 800cd84:	1841      	adds	r1, r0, r1
 800cd86:	0508      	lsls	r0, r1, #20
 800cd88:	2900      	cmp	r1, #0
 800cd8a:	dd07      	ble.n	800cd9c <__ratio+0x4c>
 800cd8c:	9901      	ldr	r1, [sp, #4]
 800cd8e:	1845      	adds	r5, r0, r1
 800cd90:	0020      	movs	r0, r4
 800cd92:	0029      	movs	r1, r5
 800cd94:	f7f4 f870 	bl	8000e78 <__aeabi_ddiv>
 800cd98:	b007      	add	sp, #28
 800cd9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd9c:	9903      	ldr	r1, [sp, #12]
 800cd9e:	1a0b      	subs	r3, r1, r0
 800cda0:	e7f6      	b.n	800cd90 <__ratio+0x40>

0800cda2 <__copybits>:
 800cda2:	b570      	push	{r4, r5, r6, lr}
 800cda4:	0014      	movs	r4, r2
 800cda6:	0005      	movs	r5, r0
 800cda8:	3901      	subs	r1, #1
 800cdaa:	6913      	ldr	r3, [r2, #16]
 800cdac:	1149      	asrs	r1, r1, #5
 800cdae:	3101      	adds	r1, #1
 800cdb0:	0089      	lsls	r1, r1, #2
 800cdb2:	3414      	adds	r4, #20
 800cdb4:	009b      	lsls	r3, r3, #2
 800cdb6:	1841      	adds	r1, r0, r1
 800cdb8:	18e3      	adds	r3, r4, r3
 800cdba:	42a3      	cmp	r3, r4
 800cdbc:	d80d      	bhi.n	800cdda <__copybits+0x38>
 800cdbe:	0014      	movs	r4, r2
 800cdc0:	3411      	adds	r4, #17
 800cdc2:	2500      	movs	r5, #0
 800cdc4:	429c      	cmp	r4, r3
 800cdc6:	d803      	bhi.n	800cdd0 <__copybits+0x2e>
 800cdc8:	1a9b      	subs	r3, r3, r2
 800cdca:	3b11      	subs	r3, #17
 800cdcc:	089b      	lsrs	r3, r3, #2
 800cdce:	009d      	lsls	r5, r3, #2
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	1940      	adds	r0, r0, r5
 800cdd4:	4281      	cmp	r1, r0
 800cdd6:	d803      	bhi.n	800cde0 <__copybits+0x3e>
 800cdd8:	bd70      	pop	{r4, r5, r6, pc}
 800cdda:	cc40      	ldmia	r4!, {r6}
 800cddc:	c540      	stmia	r5!, {r6}
 800cdde:	e7ec      	b.n	800cdba <__copybits+0x18>
 800cde0:	c008      	stmia	r0!, {r3}
 800cde2:	e7f7      	b.n	800cdd4 <__copybits+0x32>

0800cde4 <__any_on>:
 800cde4:	0002      	movs	r2, r0
 800cde6:	6900      	ldr	r0, [r0, #16]
 800cde8:	b510      	push	{r4, lr}
 800cdea:	3214      	adds	r2, #20
 800cdec:	114b      	asrs	r3, r1, #5
 800cdee:	4298      	cmp	r0, r3
 800cdf0:	db13      	blt.n	800ce1a <__any_on+0x36>
 800cdf2:	dd0c      	ble.n	800ce0e <__any_on+0x2a>
 800cdf4:	241f      	movs	r4, #31
 800cdf6:	0008      	movs	r0, r1
 800cdf8:	4020      	ands	r0, r4
 800cdfa:	4221      	tst	r1, r4
 800cdfc:	d007      	beq.n	800ce0e <__any_on+0x2a>
 800cdfe:	0099      	lsls	r1, r3, #2
 800ce00:	588c      	ldr	r4, [r1, r2]
 800ce02:	0021      	movs	r1, r4
 800ce04:	40c1      	lsrs	r1, r0
 800ce06:	4081      	lsls	r1, r0
 800ce08:	2001      	movs	r0, #1
 800ce0a:	428c      	cmp	r4, r1
 800ce0c:	d104      	bne.n	800ce18 <__any_on+0x34>
 800ce0e:	009b      	lsls	r3, r3, #2
 800ce10:	18d3      	adds	r3, r2, r3
 800ce12:	4293      	cmp	r3, r2
 800ce14:	d803      	bhi.n	800ce1e <__any_on+0x3a>
 800ce16:	2000      	movs	r0, #0
 800ce18:	bd10      	pop	{r4, pc}
 800ce1a:	0003      	movs	r3, r0
 800ce1c:	e7f7      	b.n	800ce0e <__any_on+0x2a>
 800ce1e:	3b04      	subs	r3, #4
 800ce20:	6819      	ldr	r1, [r3, #0]
 800ce22:	2900      	cmp	r1, #0
 800ce24:	d0f5      	beq.n	800ce12 <__any_on+0x2e>
 800ce26:	2001      	movs	r0, #1
 800ce28:	e7f6      	b.n	800ce18 <__any_on+0x34>

0800ce2a <__ascii_wctomb>:
 800ce2a:	0003      	movs	r3, r0
 800ce2c:	1e08      	subs	r0, r1, #0
 800ce2e:	d005      	beq.n	800ce3c <__ascii_wctomb+0x12>
 800ce30:	2aff      	cmp	r2, #255	; 0xff
 800ce32:	d904      	bls.n	800ce3e <__ascii_wctomb+0x14>
 800ce34:	228a      	movs	r2, #138	; 0x8a
 800ce36:	2001      	movs	r0, #1
 800ce38:	601a      	str	r2, [r3, #0]
 800ce3a:	4240      	negs	r0, r0
 800ce3c:	4770      	bx	lr
 800ce3e:	2001      	movs	r0, #1
 800ce40:	700a      	strb	r2, [r1, #0]
 800ce42:	e7fb      	b.n	800ce3c <__ascii_wctomb+0x12>

0800ce44 <_svfprintf_r>:
 800ce44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce46:	b0d9      	sub	sp, #356	; 0x164
 800ce48:	001c      	movs	r4, r3
 800ce4a:	910b      	str	r1, [sp, #44]	; 0x2c
 800ce4c:	9208      	str	r2, [sp, #32]
 800ce4e:	900a      	str	r0, [sp, #40]	; 0x28
 800ce50:	f002 fdae 	bl	800f9b0 <_localeconv_r>
 800ce54:	6803      	ldr	r3, [r0, #0]
 800ce56:	0018      	movs	r0, r3
 800ce58:	931c      	str	r3, [sp, #112]	; 0x70
 800ce5a:	f7f3 f953 	bl	8000104 <strlen>
 800ce5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce60:	9016      	str	r0, [sp, #88]	; 0x58
 800ce62:	899b      	ldrh	r3, [r3, #12]
 800ce64:	061b      	lsls	r3, r3, #24
 800ce66:	d517      	bpl.n	800ce98 <_svfprintf_r+0x54>
 800ce68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce6a:	691b      	ldr	r3, [r3, #16]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d113      	bne.n	800ce98 <_svfprintf_r+0x54>
 800ce70:	2140      	movs	r1, #64	; 0x40
 800ce72:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ce74:	f7fd fb6e 	bl	800a554 <_malloc_r>
 800ce78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce7a:	6018      	str	r0, [r3, #0]
 800ce7c:	6118      	str	r0, [r3, #16]
 800ce7e:	2800      	cmp	r0, #0
 800ce80:	d107      	bne.n	800ce92 <_svfprintf_r+0x4e>
 800ce82:	230c      	movs	r3, #12
 800ce84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce86:	6013      	str	r3, [r2, #0]
 800ce88:	3b0d      	subs	r3, #13
 800ce8a:	9317      	str	r3, [sp, #92]	; 0x5c
 800ce8c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ce8e:	b059      	add	sp, #356	; 0x164
 800ce90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce92:	2340      	movs	r3, #64	; 0x40
 800ce94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ce96:	6153      	str	r3, [r2, #20]
 800ce98:	2300      	movs	r3, #0
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	932e      	str	r3, [sp, #184]	; 0xb8
 800ce9e:	932d      	str	r3, [sp, #180]	; 0xb4
 800cea0:	930e      	str	r3, [sp, #56]	; 0x38
 800cea2:	2300      	movs	r3, #0
 800cea4:	9214      	str	r2, [sp, #80]	; 0x50
 800cea6:	9315      	str	r3, [sp, #84]	; 0x54
 800cea8:	2300      	movs	r3, #0
 800ceaa:	af2f      	add	r7, sp, #188	; 0xbc
 800ceac:	972c      	str	r7, [sp, #176]	; 0xb0
 800ceae:	931f      	str	r3, [sp, #124]	; 0x7c
 800ceb0:	931e      	str	r3, [sp, #120]	; 0x78
 800ceb2:	9312      	str	r3, [sp, #72]	; 0x48
 800ceb4:	931b      	str	r3, [sp, #108]	; 0x6c
 800ceb6:	931d      	str	r3, [sp, #116]	; 0x74
 800ceb8:	9317      	str	r3, [sp, #92]	; 0x5c
 800ceba:	9d08      	ldr	r5, [sp, #32]
 800cebc:	782b      	ldrb	r3, [r5, #0]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d002      	beq.n	800cec8 <_svfprintf_r+0x84>
 800cec2:	2b25      	cmp	r3, #37	; 0x25
 800cec4:	d000      	beq.n	800cec8 <_svfprintf_r+0x84>
 800cec6:	e091      	b.n	800cfec <_svfprintf_r+0x1a8>
 800cec8:	9b08      	ldr	r3, [sp, #32]
 800ceca:	1aee      	subs	r6, r5, r3
 800cecc:	429d      	cmp	r5, r3
 800cece:	d016      	beq.n	800cefe <_svfprintf_r+0xba>
 800ced0:	603b      	str	r3, [r7, #0]
 800ced2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ced4:	607e      	str	r6, [r7, #4]
 800ced6:	199b      	adds	r3, r3, r6
 800ced8:	932e      	str	r3, [sp, #184]	; 0xb8
 800ceda:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800cedc:	3708      	adds	r7, #8
 800cede:	3301      	adds	r3, #1
 800cee0:	932d      	str	r3, [sp, #180]	; 0xb4
 800cee2:	2b07      	cmp	r3, #7
 800cee4:	dd08      	ble.n	800cef8 <_svfprintf_r+0xb4>
 800cee6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cee8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ceea:	aa2c      	add	r2, sp, #176	; 0xb0
 800ceec:	f004 f8c0 	bl	8011070 <__ssprint_r>
 800cef0:	2800      	cmp	r0, #0
 800cef2:	d000      	beq.n	800cef6 <_svfprintf_r+0xb2>
 800cef4:	e1cf      	b.n	800d296 <_svfprintf_r+0x452>
 800cef6:	af2f      	add	r7, sp, #188	; 0xbc
 800cef8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cefa:	199b      	adds	r3, r3, r6
 800cefc:	9317      	str	r3, [sp, #92]	; 0x5c
 800cefe:	782b      	ldrb	r3, [r5, #0]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d101      	bne.n	800cf08 <_svfprintf_r+0xc4>
 800cf04:	f001 f99e 	bl	800e244 <_svfprintf_r+0x1400>
 800cf08:	221b      	movs	r2, #27
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	a91e      	add	r1, sp, #120	; 0x78
 800cf0e:	1852      	adds	r2, r2, r1
 800cf10:	7013      	strb	r3, [r2, #0]
 800cf12:	2201      	movs	r2, #1
 800cf14:	001e      	movs	r6, r3
 800cf16:	4252      	negs	r2, r2
 800cf18:	3501      	adds	r5, #1
 800cf1a:	9209      	str	r2, [sp, #36]	; 0x24
 800cf1c:	9318      	str	r3, [sp, #96]	; 0x60
 800cf1e:	1c6b      	adds	r3, r5, #1
 800cf20:	9313      	str	r3, [sp, #76]	; 0x4c
 800cf22:	782b      	ldrb	r3, [r5, #0]
 800cf24:	930f      	str	r3, [sp, #60]	; 0x3c
 800cf26:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800cf28:	3820      	subs	r0, #32
 800cf2a:	285a      	cmp	r0, #90	; 0x5a
 800cf2c:	d901      	bls.n	800cf32 <_svfprintf_r+0xee>
 800cf2e:	f000 fe20 	bl	800db72 <_svfprintf_r+0xd2e>
 800cf32:	f7f3 f8f9 	bl	8000128 <__gnu_thumb1_case_uhi>
 800cf36:	0078      	.short	0x0078
 800cf38:	061e061e 	.word	0x061e061e
 800cf3c:	061e0082 	.word	0x061e0082
 800cf40:	061e061e 	.word	0x061e061e
 800cf44:	061e005d 	.word	0x061e005d
 800cf48:	0084061e 	.word	0x0084061e
 800cf4c:	061e008c 	.word	0x061e008c
 800cf50:	0091008a 	.word	0x0091008a
 800cf54:	00b2061e 	.word	0x00b2061e
 800cf58:	00b400b4 	.word	0x00b400b4
 800cf5c:	00b400b4 	.word	0x00b400b4
 800cf60:	00b400b4 	.word	0x00b400b4
 800cf64:	00b400b4 	.word	0x00b400b4
 800cf68:	061e00b4 	.word	0x061e00b4
 800cf6c:	061e061e 	.word	0x061e061e
 800cf70:	061e061e 	.word	0x061e061e
 800cf74:	061e061e 	.word	0x061e061e
 800cf78:	061e013b 	.word	0x061e013b
 800cf7c:	00f400e0 	.word	0x00f400e0
 800cf80:	013b013b 	.word	0x013b013b
 800cf84:	061e013b 	.word	0x061e013b
 800cf88:	061e061e 	.word	0x061e061e
 800cf8c:	00c7061e 	.word	0x00c7061e
 800cf90:	061e061e 	.word	0x061e061e
 800cf94:	061e04c7 	.word	0x061e04c7
 800cf98:	061e061e 	.word	0x061e061e
 800cf9c:	061e050a 	.word	0x061e050a
 800cfa0:	061e052a 	.word	0x061e052a
 800cfa4:	055c061e 	.word	0x055c061e
 800cfa8:	061e061e 	.word	0x061e061e
 800cfac:	061e061e 	.word	0x061e061e
 800cfb0:	061e061e 	.word	0x061e061e
 800cfb4:	061e061e 	.word	0x061e061e
 800cfb8:	061e013b 	.word	0x061e013b
 800cfbc:	00f600e0 	.word	0x00f600e0
 800cfc0:	013b013b 	.word	0x013b013b
 800cfc4:	00c9013b 	.word	0x00c9013b
 800cfc8:	00dc00f6 	.word	0x00dc00f6
 800cfcc:	00d5061e 	.word	0x00d5061e
 800cfd0:	04a7061e 	.word	0x04a7061e
 800cfd4:	04fa04c9 	.word	0x04fa04c9
 800cfd8:	061e00dc 	.word	0x061e00dc
 800cfdc:	0080050a 	.word	0x0080050a
 800cfe0:	061e052c 	.word	0x061e052c
 800cfe4:	057c061e 	.word	0x057c061e
 800cfe8:	0080061e 	.word	0x0080061e
 800cfec:	3501      	adds	r5, #1
 800cfee:	e765      	b.n	800cebc <_svfprintf_r+0x78>
 800cff0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cff2:	f002 fcdd 	bl	800f9b0 <_localeconv_r>
 800cff6:	6843      	ldr	r3, [r0, #4]
 800cff8:	0018      	movs	r0, r3
 800cffa:	931d      	str	r3, [sp, #116]	; 0x74
 800cffc:	f7f3 f882 	bl	8000104 <strlen>
 800d000:	901b      	str	r0, [sp, #108]	; 0x6c
 800d002:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d004:	f002 fcd4 	bl	800f9b0 <_localeconv_r>
 800d008:	6883      	ldr	r3, [r0, #8]
 800d00a:	9312      	str	r3, [sp, #72]	; 0x48
 800d00c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d011      	beq.n	800d036 <_svfprintf_r+0x1f2>
 800d012:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d014:	2b00      	cmp	r3, #0
 800d016:	d00e      	beq.n	800d036 <_svfprintf_r+0x1f2>
 800d018:	781b      	ldrb	r3, [r3, #0]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d00b      	beq.n	800d036 <_svfprintf_r+0x1f2>
 800d01e:	2380      	movs	r3, #128	; 0x80
 800d020:	00db      	lsls	r3, r3, #3
 800d022:	431e      	orrs	r6, r3
 800d024:	e007      	b.n	800d036 <_svfprintf_r+0x1f2>
 800d026:	231b      	movs	r3, #27
 800d028:	aa1e      	add	r2, sp, #120	; 0x78
 800d02a:	189b      	adds	r3, r3, r2
 800d02c:	781a      	ldrb	r2, [r3, #0]
 800d02e:	2a00      	cmp	r2, #0
 800d030:	d101      	bne.n	800d036 <_svfprintf_r+0x1f2>
 800d032:	3220      	adds	r2, #32
 800d034:	701a      	strb	r2, [r3, #0]
 800d036:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800d038:	e771      	b.n	800cf1e <_svfprintf_r+0xda>
 800d03a:	2301      	movs	r3, #1
 800d03c:	e7f1      	b.n	800d022 <_svfprintf_r+0x1de>
 800d03e:	cc08      	ldmia	r4!, {r3}
 800d040:	9318      	str	r3, [sp, #96]	; 0x60
 800d042:	2b00      	cmp	r3, #0
 800d044:	daf7      	bge.n	800d036 <_svfprintf_r+0x1f2>
 800d046:	425b      	negs	r3, r3
 800d048:	9318      	str	r3, [sp, #96]	; 0x60
 800d04a:	2304      	movs	r3, #4
 800d04c:	e7e9      	b.n	800d022 <_svfprintf_r+0x1de>
 800d04e:	231b      	movs	r3, #27
 800d050:	aa1e      	add	r2, sp, #120	; 0x78
 800d052:	189b      	adds	r3, r3, r2
 800d054:	222b      	movs	r2, #43	; 0x2b
 800d056:	e7ed      	b.n	800d034 <_svfprintf_r+0x1f0>
 800d058:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d05a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d05c:	7812      	ldrb	r2, [r2, #0]
 800d05e:	3301      	adds	r3, #1
 800d060:	920f      	str	r2, [sp, #60]	; 0x3c
 800d062:	2a2a      	cmp	r2, #42	; 0x2a
 800d064:	d010      	beq.n	800d088 <_svfprintf_r+0x244>
 800d066:	2200      	movs	r2, #0
 800d068:	9209      	str	r2, [sp, #36]	; 0x24
 800d06a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d06c:	9313      	str	r3, [sp, #76]	; 0x4c
 800d06e:	3a30      	subs	r2, #48	; 0x30
 800d070:	2a09      	cmp	r2, #9
 800d072:	d900      	bls.n	800d076 <_svfprintf_r+0x232>
 800d074:	e757      	b.n	800cf26 <_svfprintf_r+0xe2>
 800d076:	200a      	movs	r0, #10
 800d078:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d07a:	4341      	muls	r1, r0
 800d07c:	188a      	adds	r2, r1, r2
 800d07e:	9209      	str	r2, [sp, #36]	; 0x24
 800d080:	781a      	ldrb	r2, [r3, #0]
 800d082:	3301      	adds	r3, #1
 800d084:	920f      	str	r2, [sp, #60]	; 0x3c
 800d086:	e7f0      	b.n	800d06a <_svfprintf_r+0x226>
 800d088:	cc04      	ldmia	r4!, {r2}
 800d08a:	9209      	str	r2, [sp, #36]	; 0x24
 800d08c:	2a00      	cmp	r2, #0
 800d08e:	da02      	bge.n	800d096 <_svfprintf_r+0x252>
 800d090:	2201      	movs	r2, #1
 800d092:	4252      	negs	r2, r2
 800d094:	9209      	str	r2, [sp, #36]	; 0x24
 800d096:	9313      	str	r3, [sp, #76]	; 0x4c
 800d098:	e7cd      	b.n	800d036 <_svfprintf_r+0x1f2>
 800d09a:	2380      	movs	r3, #128	; 0x80
 800d09c:	e7c1      	b.n	800d022 <_svfprintf_r+0x1de>
 800d09e:	2200      	movs	r2, #0
 800d0a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d0a2:	9218      	str	r2, [sp, #96]	; 0x60
 800d0a4:	210a      	movs	r1, #10
 800d0a6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d0a8:	434a      	muls	r2, r1
 800d0aa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d0ac:	3930      	subs	r1, #48	; 0x30
 800d0ae:	188a      	adds	r2, r1, r2
 800d0b0:	9218      	str	r2, [sp, #96]	; 0x60
 800d0b2:	001a      	movs	r2, r3
 800d0b4:	7812      	ldrb	r2, [r2, #0]
 800d0b6:	3301      	adds	r3, #1
 800d0b8:	920f      	str	r2, [sp, #60]	; 0x3c
 800d0ba:	3a30      	subs	r2, #48	; 0x30
 800d0bc:	9313      	str	r3, [sp, #76]	; 0x4c
 800d0be:	2a09      	cmp	r2, #9
 800d0c0:	d9f0      	bls.n	800d0a4 <_svfprintf_r+0x260>
 800d0c2:	e730      	b.n	800cf26 <_svfprintf_r+0xe2>
 800d0c4:	2308      	movs	r3, #8
 800d0c6:	e7ac      	b.n	800d022 <_svfprintf_r+0x1de>
 800d0c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d0ca:	781b      	ldrb	r3, [r3, #0]
 800d0cc:	2b68      	cmp	r3, #104	; 0x68
 800d0ce:	d105      	bne.n	800d0dc <_svfprintf_r+0x298>
 800d0d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	9313      	str	r3, [sp, #76]	; 0x4c
 800d0d6:	2380      	movs	r3, #128	; 0x80
 800d0d8:	009b      	lsls	r3, r3, #2
 800d0da:	e7a2      	b.n	800d022 <_svfprintf_r+0x1de>
 800d0dc:	2340      	movs	r3, #64	; 0x40
 800d0de:	e7a0      	b.n	800d022 <_svfprintf_r+0x1de>
 800d0e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d0e2:	781b      	ldrb	r3, [r3, #0]
 800d0e4:	2b6c      	cmp	r3, #108	; 0x6c
 800d0e6:	d104      	bne.n	800d0f2 <_svfprintf_r+0x2ae>
 800d0e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d0ea:	3301      	adds	r3, #1
 800d0ec:	9313      	str	r3, [sp, #76]	; 0x4c
 800d0ee:	2320      	movs	r3, #32
 800d0f0:	e797      	b.n	800d022 <_svfprintf_r+0x1de>
 800d0f2:	2310      	movs	r3, #16
 800d0f4:	e795      	b.n	800d022 <_svfprintf_r+0x1de>
 800d0f6:	0021      	movs	r1, r4
 800d0f8:	c904      	ldmia	r1!, {r2}
 800d0fa:	ab3f      	add	r3, sp, #252	; 0xfc
 800d0fc:	910d      	str	r1, [sp, #52]	; 0x34
 800d0fe:	211b      	movs	r1, #27
 800d100:	701a      	strb	r2, [r3, #0]
 800d102:	2200      	movs	r2, #0
 800d104:	a81e      	add	r0, sp, #120	; 0x78
 800d106:	1809      	adds	r1, r1, r0
 800d108:	700a      	strb	r2, [r1, #0]
 800d10a:	920c      	str	r2, [sp, #48]	; 0x30
 800d10c:	3201      	adds	r2, #1
 800d10e:	9209      	str	r2, [sp, #36]	; 0x24
 800d110:	2200      	movs	r2, #0
 800d112:	9308      	str	r3, [sp, #32]
 800d114:	0015      	movs	r5, r2
 800d116:	9219      	str	r2, [sp, #100]	; 0x64
 800d118:	9210      	str	r2, [sp, #64]	; 0x40
 800d11a:	9211      	str	r2, [sp, #68]	; 0x44
 800d11c:	e1f1      	b.n	800d502 <_svfprintf_r+0x6be>
 800d11e:	2310      	movs	r3, #16
 800d120:	431e      	orrs	r6, r3
 800d122:	06b3      	lsls	r3, r6, #26
 800d124:	d531      	bpl.n	800d18a <_svfprintf_r+0x346>
 800d126:	2307      	movs	r3, #7
 800d128:	3407      	adds	r4, #7
 800d12a:	439c      	bics	r4, r3
 800d12c:	0022      	movs	r2, r4
 800d12e:	ca18      	ldmia	r2!, {r3, r4}
 800d130:	9306      	str	r3, [sp, #24]
 800d132:	9407      	str	r4, [sp, #28]
 800d134:	920d      	str	r2, [sp, #52]	; 0x34
 800d136:	9a07      	ldr	r2, [sp, #28]
 800d138:	2301      	movs	r3, #1
 800d13a:	2a00      	cmp	r2, #0
 800d13c:	da0b      	bge.n	800d156 <_svfprintf_r+0x312>
 800d13e:	9c06      	ldr	r4, [sp, #24]
 800d140:	9d07      	ldr	r5, [sp, #28]
 800d142:	2200      	movs	r2, #0
 800d144:	4261      	negs	r1, r4
 800d146:	41aa      	sbcs	r2, r5
 800d148:	9106      	str	r1, [sp, #24]
 800d14a:	9207      	str	r2, [sp, #28]
 800d14c:	221b      	movs	r2, #27
 800d14e:	a91e      	add	r1, sp, #120	; 0x78
 800d150:	1852      	adds	r2, r2, r1
 800d152:	212d      	movs	r1, #45	; 0x2d
 800d154:	7011      	strb	r1, [r2, #0]
 800d156:	9907      	ldr	r1, [sp, #28]
 800d158:	9a06      	ldr	r2, [sp, #24]
 800d15a:	430a      	orrs	r2, r1
 800d15c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d15e:	3101      	adds	r1, #1
 800d160:	d101      	bne.n	800d166 <_svfprintf_r+0x322>
 800d162:	f001 f87b 	bl	800e25c <_svfprintf_r+0x1418>
 800d166:	2180      	movs	r1, #128	; 0x80
 800d168:	0034      	movs	r4, r6
 800d16a:	438c      	bics	r4, r1
 800d16c:	2a00      	cmp	r2, #0
 800d16e:	d001      	beq.n	800d174 <_svfprintf_r+0x330>
 800d170:	f001 f879 	bl	800e266 <_svfprintf_r+0x1422>
 800d174:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d176:	2a00      	cmp	r2, #0
 800d178:	d101      	bne.n	800d17e <_svfprintf_r+0x33a>
 800d17a:	f000 fcef 	bl	800db5c <_svfprintf_r+0xd18>
 800d17e:	2b01      	cmp	r3, #1
 800d180:	d001      	beq.n	800d186 <_svfprintf_r+0x342>
 800d182:	f001 f874 	bl	800e26e <_svfprintf_r+0x142a>
 800d186:	f000 fc79 	bl	800da7c <_svfprintf_r+0xc38>
 800d18a:	0022      	movs	r2, r4
 800d18c:	ca08      	ldmia	r2!, {r3}
 800d18e:	920d      	str	r2, [sp, #52]	; 0x34
 800d190:	06f2      	lsls	r2, r6, #27
 800d192:	d503      	bpl.n	800d19c <_svfprintf_r+0x358>
 800d194:	9306      	str	r3, [sp, #24]
 800d196:	17db      	asrs	r3, r3, #31
 800d198:	9307      	str	r3, [sp, #28]
 800d19a:	e7cc      	b.n	800d136 <_svfprintf_r+0x2f2>
 800d19c:	0672      	lsls	r2, r6, #25
 800d19e:	d501      	bpl.n	800d1a4 <_svfprintf_r+0x360>
 800d1a0:	b21b      	sxth	r3, r3
 800d1a2:	e7f7      	b.n	800d194 <_svfprintf_r+0x350>
 800d1a4:	05b2      	lsls	r2, r6, #22
 800d1a6:	d5f5      	bpl.n	800d194 <_svfprintf_r+0x350>
 800d1a8:	b25b      	sxtb	r3, r3
 800d1aa:	e7f3      	b.n	800d194 <_svfprintf_r+0x350>
 800d1ac:	2307      	movs	r3, #7
 800d1ae:	3407      	adds	r4, #7
 800d1b0:	439c      	bics	r4, r3
 800d1b2:	0022      	movs	r2, r4
 800d1b4:	ca18      	ldmia	r2!, {r3, r4}
 800d1b6:	920d      	str	r2, [sp, #52]	; 0x34
 800d1b8:	2201      	movs	r2, #1
 800d1ba:	9314      	str	r3, [sp, #80]	; 0x50
 800d1bc:	9415      	str	r4, [sp, #84]	; 0x54
 800d1be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d1c0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d1c2:	005c      	lsls	r4, r3, #1
 800d1c4:	0864      	lsrs	r4, r4, #1
 800d1c6:	0028      	movs	r0, r5
 800d1c8:	0021      	movs	r1, r4
 800d1ca:	4b3e      	ldr	r3, [pc, #248]	; (800d2c4 <_svfprintf_r+0x480>)
 800d1cc:	4252      	negs	r2, r2
 800d1ce:	f7f5 f891 	bl	80022f4 <__aeabi_dcmpun>
 800d1d2:	2800      	cmp	r0, #0
 800d1d4:	d126      	bne.n	800d224 <_svfprintf_r+0x3e0>
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	0028      	movs	r0, r5
 800d1da:	0021      	movs	r1, r4
 800d1dc:	4b39      	ldr	r3, [pc, #228]	; (800d2c4 <_svfprintf_r+0x480>)
 800d1de:	4252      	negs	r2, r2
 800d1e0:	f7f3 f942 	bl	8000468 <__aeabi_dcmple>
 800d1e4:	2800      	cmp	r0, #0
 800d1e6:	d11d      	bne.n	800d224 <_svfprintf_r+0x3e0>
 800d1e8:	9814      	ldr	r0, [sp, #80]	; 0x50
 800d1ea:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	f7f3 f930 	bl	8000454 <__aeabi_dcmplt>
 800d1f4:	2800      	cmp	r0, #0
 800d1f6:	d004      	beq.n	800d202 <_svfprintf_r+0x3be>
 800d1f8:	231b      	movs	r3, #27
 800d1fa:	aa1e      	add	r2, sp, #120	; 0x78
 800d1fc:	189b      	adds	r3, r3, r2
 800d1fe:	222d      	movs	r2, #45	; 0x2d
 800d200:	701a      	strb	r2, [r3, #0]
 800d202:	4b31      	ldr	r3, [pc, #196]	; (800d2c8 <_svfprintf_r+0x484>)
 800d204:	9308      	str	r3, [sp, #32]
 800d206:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d208:	2b47      	cmp	r3, #71	; 0x47
 800d20a:	dd01      	ble.n	800d210 <_svfprintf_r+0x3cc>
 800d20c:	4b2f      	ldr	r3, [pc, #188]	; (800d2cc <_svfprintf_r+0x488>)
 800d20e:	9308      	str	r3, [sp, #32]
 800d210:	2380      	movs	r3, #128	; 0x80
 800d212:	439e      	bics	r6, r3
 800d214:	2300      	movs	r3, #0
 800d216:	930c      	str	r3, [sp, #48]	; 0x30
 800d218:	3303      	adds	r3, #3
 800d21a:	9309      	str	r3, [sp, #36]	; 0x24
 800d21c:	2300      	movs	r3, #0
 800d21e:	9319      	str	r3, [sp, #100]	; 0x64
 800d220:	f000 fc78 	bl	800db14 <_svfprintf_r+0xcd0>
 800d224:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d226:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d228:	0010      	movs	r0, r2
 800d22a:	0019      	movs	r1, r3
 800d22c:	f7f5 f862 	bl	80022f4 <__aeabi_dcmpun>
 800d230:	2800      	cmp	r0, #0
 800d232:	d00e      	beq.n	800d252 <_svfprintf_r+0x40e>
 800d234:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d236:	2b00      	cmp	r3, #0
 800d238:	da04      	bge.n	800d244 <_svfprintf_r+0x400>
 800d23a:	231b      	movs	r3, #27
 800d23c:	aa1e      	add	r2, sp, #120	; 0x78
 800d23e:	189b      	adds	r3, r3, r2
 800d240:	222d      	movs	r2, #45	; 0x2d
 800d242:	701a      	strb	r2, [r3, #0]
 800d244:	4b22      	ldr	r3, [pc, #136]	; (800d2d0 <_svfprintf_r+0x48c>)
 800d246:	9308      	str	r3, [sp, #32]
 800d248:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d24a:	2b47      	cmp	r3, #71	; 0x47
 800d24c:	dde0      	ble.n	800d210 <_svfprintf_r+0x3cc>
 800d24e:	4b21      	ldr	r3, [pc, #132]	; (800d2d4 <_svfprintf_r+0x490>)
 800d250:	e7dd      	b.n	800d20e <_svfprintf_r+0x3ca>
 800d252:	2320      	movs	r3, #32
 800d254:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d256:	439a      	bics	r2, r3
 800d258:	9210      	str	r2, [sp, #64]	; 0x40
 800d25a:	2a41      	cmp	r2, #65	; 0x41
 800d25c:	d123      	bne.n	800d2a6 <_svfprintf_r+0x462>
 800d25e:	2230      	movs	r2, #48	; 0x30
 800d260:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d262:	ab25      	add	r3, sp, #148	; 0x94
 800d264:	701a      	strb	r2, [r3, #0]
 800d266:	3248      	adds	r2, #72	; 0x48
 800d268:	2961      	cmp	r1, #97	; 0x61
 800d26a:	d000      	beq.n	800d26e <_svfprintf_r+0x42a>
 800d26c:	3a20      	subs	r2, #32
 800d26e:	705a      	strb	r2, [r3, #1]
 800d270:	2302      	movs	r3, #2
 800d272:	431e      	orrs	r6, r3
 800d274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d276:	2b63      	cmp	r3, #99	; 0x63
 800d278:	dd2e      	ble.n	800d2d8 <_svfprintf_r+0x494>
 800d27a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d27c:	1c59      	adds	r1, r3, #1
 800d27e:	f7fd f969 	bl	800a554 <_malloc_r>
 800d282:	9008      	str	r0, [sp, #32]
 800d284:	2800      	cmp	r0, #0
 800d286:	d000      	beq.n	800d28a <_svfprintf_r+0x446>
 800d288:	e216      	b.n	800d6b8 <_svfprintf_r+0x874>
 800d28a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d28c:	899a      	ldrh	r2, [r3, #12]
 800d28e:	2340      	movs	r3, #64	; 0x40
 800d290:	4313      	orrs	r3, r2
 800d292:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d294:	8193      	strh	r3, [r2, #12]
 800d296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d298:	899b      	ldrh	r3, [r3, #12]
 800d29a:	065b      	lsls	r3, r3, #25
 800d29c:	d400      	bmi.n	800d2a0 <_svfprintf_r+0x45c>
 800d29e:	e5f5      	b.n	800ce8c <_svfprintf_r+0x48>
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	425b      	negs	r3, r3
 800d2a4:	e5f1      	b.n	800ce8a <_svfprintf_r+0x46>
 800d2a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2a8:	900c      	str	r0, [sp, #48]	; 0x30
 800d2aa:	3301      	adds	r3, #1
 800d2ac:	d100      	bne.n	800d2b0 <_svfprintf_r+0x46c>
 800d2ae:	e206      	b.n	800d6be <_svfprintf_r+0x87a>
 800d2b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d2b2:	2b47      	cmp	r3, #71	; 0x47
 800d2b4:	d114      	bne.n	800d2e0 <_svfprintf_r+0x49c>
 800d2b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d111      	bne.n	800d2e0 <_svfprintf_r+0x49c>
 800d2bc:	3301      	adds	r3, #1
 800d2be:	9309      	str	r3, [sp, #36]	; 0x24
 800d2c0:	e00e      	b.n	800d2e0 <_svfprintf_r+0x49c>
 800d2c2:	46c0      	nop			; (mov r8, r8)
 800d2c4:	7fefffff 	.word	0x7fefffff
 800d2c8:	08014264 	.word	0x08014264
 800d2cc:	08014268 	.word	0x08014268
 800d2d0:	0801426c 	.word	0x0801426c
 800d2d4:	08014270 	.word	0x08014270
 800d2d8:	2300      	movs	r3, #0
 800d2da:	930c      	str	r3, [sp, #48]	; 0x30
 800d2dc:	ab3f      	add	r3, sp, #252	; 0xfc
 800d2de:	9308      	str	r3, [sp, #32]
 800d2e0:	2380      	movs	r3, #128	; 0x80
 800d2e2:	005b      	lsls	r3, r3, #1
 800d2e4:	4333      	orrs	r3, r6
 800d2e6:	931a      	str	r3, [sp, #104]	; 0x68
 800d2e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d2ea:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	db00      	blt.n	800d2f2 <_svfprintf_r+0x4ae>
 800d2f0:	e1e7      	b.n	800d6c2 <_svfprintf_r+0x87e>
 800d2f2:	2280      	movs	r2, #128	; 0x80
 800d2f4:	0612      	lsls	r2, r2, #24
 800d2f6:	4694      	mov	ip, r2
 800d2f8:	4463      	add	r3, ip
 800d2fa:	930e      	str	r3, [sp, #56]	; 0x38
 800d2fc:	232d      	movs	r3, #45	; 0x2d
 800d2fe:	9322      	str	r3, [sp, #136]	; 0x88
 800d300:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d302:	2b41      	cmp	r3, #65	; 0x41
 800d304:	d000      	beq.n	800d308 <_svfprintf_r+0x4c4>
 800d306:	e1f5      	b.n	800d6f4 <_svfprintf_r+0x8b0>
 800d308:	0028      	movs	r0, r5
 800d30a:	aa26      	add	r2, sp, #152	; 0x98
 800d30c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d30e:	f002 fb73 	bl	800f9f8 <frexp>
 800d312:	23ff      	movs	r3, #255	; 0xff
 800d314:	2200      	movs	r2, #0
 800d316:	059b      	lsls	r3, r3, #22
 800d318:	f7f4 f9a8 	bl	800166c <__aeabi_dmul>
 800d31c:	2200      	movs	r2, #0
 800d31e:	2300      	movs	r3, #0
 800d320:	0004      	movs	r4, r0
 800d322:	000d      	movs	r5, r1
 800d324:	f7f3 f890 	bl	8000448 <__aeabi_dcmpeq>
 800d328:	2800      	cmp	r0, #0
 800d32a:	d001      	beq.n	800d330 <_svfprintf_r+0x4ec>
 800d32c:	2301      	movs	r3, #1
 800d32e:	9326      	str	r3, [sp, #152]	; 0x98
 800d330:	4bda      	ldr	r3, [pc, #872]	; (800d69c <_svfprintf_r+0x858>)
 800d332:	9319      	str	r3, [sp, #100]	; 0x64
 800d334:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d336:	2b61      	cmp	r3, #97	; 0x61
 800d338:	d001      	beq.n	800d33e <_svfprintf_r+0x4fa>
 800d33a:	4bd9      	ldr	r3, [pc, #868]	; (800d6a0 <_svfprintf_r+0x85c>)
 800d33c:	9319      	str	r3, [sp, #100]	; 0x64
 800d33e:	9b08      	ldr	r3, [sp, #32]
 800d340:	930e      	str	r3, [sp, #56]	; 0x38
 800d342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d344:	3b01      	subs	r3, #1
 800d346:	9311      	str	r3, [sp, #68]	; 0x44
 800d348:	2200      	movs	r2, #0
 800d34a:	4bd6      	ldr	r3, [pc, #856]	; (800d6a4 <_svfprintf_r+0x860>)
 800d34c:	0020      	movs	r0, r4
 800d34e:	0029      	movs	r1, r5
 800d350:	f7f4 f98c 	bl	800166c <__aeabi_dmul>
 800d354:	000d      	movs	r5, r1
 800d356:	0004      	movs	r4, r0
 800d358:	f7f4 ffea 	bl	8002330 <__aeabi_d2iz>
 800d35c:	9021      	str	r0, [sp, #132]	; 0x84
 800d35e:	f7f5 f81d 	bl	800239c <__aeabi_i2d>
 800d362:	0002      	movs	r2, r0
 800d364:	000b      	movs	r3, r1
 800d366:	0020      	movs	r0, r4
 800d368:	0029      	movs	r1, r5
 800d36a:	f7f4 fc41 	bl	8001bf0 <__aeabi_dsub>
 800d36e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d370:	000d      	movs	r5, r1
 800d372:	001a      	movs	r2, r3
 800d374:	3201      	adds	r2, #1
 800d376:	9921      	ldr	r1, [sp, #132]	; 0x84
 800d378:	920e      	str	r2, [sp, #56]	; 0x38
 800d37a:	9223      	str	r2, [sp, #140]	; 0x8c
 800d37c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d37e:	0004      	movs	r4, r0
 800d380:	5c52      	ldrb	r2, [r2, r1]
 800d382:	701a      	strb	r2, [r3, #0]
 800d384:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d386:	9320      	str	r3, [sp, #128]	; 0x80
 800d388:	3301      	adds	r3, #1
 800d38a:	d00a      	beq.n	800d3a2 <_svfprintf_r+0x55e>
 800d38c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d38e:	2200      	movs	r2, #0
 800d390:	3b01      	subs	r3, #1
 800d392:	9311      	str	r3, [sp, #68]	; 0x44
 800d394:	0020      	movs	r0, r4
 800d396:	2300      	movs	r3, #0
 800d398:	0029      	movs	r1, r5
 800d39a:	f7f3 f855 	bl	8000448 <__aeabi_dcmpeq>
 800d39e:	2800      	cmp	r0, #0
 800d3a0:	d0d2      	beq.n	800d348 <_svfprintf_r+0x504>
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	0020      	movs	r0, r4
 800d3a6:	0029      	movs	r1, r5
 800d3a8:	4bbf      	ldr	r3, [pc, #764]	; (800d6a8 <_svfprintf_r+0x864>)
 800d3aa:	f7f3 f867 	bl	800047c <__aeabi_dcmpgt>
 800d3ae:	2800      	cmp	r0, #0
 800d3b0:	d10c      	bne.n	800d3cc <_svfprintf_r+0x588>
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	0020      	movs	r0, r4
 800d3b6:	0029      	movs	r1, r5
 800d3b8:	4bbb      	ldr	r3, [pc, #748]	; (800d6a8 <_svfprintf_r+0x864>)
 800d3ba:	f7f3 f845 	bl	8000448 <__aeabi_dcmpeq>
 800d3be:	2800      	cmp	r0, #0
 800d3c0:	d100      	bne.n	800d3c4 <_svfprintf_r+0x580>
 800d3c2:	e191      	b.n	800d6e8 <_svfprintf_r+0x8a4>
 800d3c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d3c6:	07db      	lsls	r3, r3, #31
 800d3c8:	d400      	bmi.n	800d3cc <_svfprintf_r+0x588>
 800d3ca:	e18d      	b.n	800d6e8 <_svfprintf_r+0x8a4>
 800d3cc:	2030      	movs	r0, #48	; 0x30
 800d3ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d3d0:	932a      	str	r3, [sp, #168]	; 0xa8
 800d3d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d3d4:	7bdb      	ldrb	r3, [r3, #15]
 800d3d6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800d3d8:	3a01      	subs	r2, #1
 800d3da:	922a      	str	r2, [sp, #168]	; 0xa8
 800d3dc:	7811      	ldrb	r1, [r2, #0]
 800d3de:	4299      	cmp	r1, r3
 800d3e0:	d100      	bne.n	800d3e4 <_svfprintf_r+0x5a0>
 800d3e2:	e171      	b.n	800d6c8 <_svfprintf_r+0x884>
 800d3e4:	1c4b      	adds	r3, r1, #1
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	2939      	cmp	r1, #57	; 0x39
 800d3ea:	d101      	bne.n	800d3f0 <_svfprintf_r+0x5ac>
 800d3ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d3ee:	7a9b      	ldrb	r3, [r3, #10]
 800d3f0:	7013      	strb	r3, [r2, #0]
 800d3f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d3f4:	9a08      	ldr	r2, [sp, #32]
 800d3f6:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800d3f8:	1a9b      	subs	r3, r3, r2
 800d3fa:	930e      	str	r3, [sp, #56]	; 0x38
 800d3fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d3fe:	2b47      	cmp	r3, #71	; 0x47
 800d400:	d000      	beq.n	800d404 <_svfprintf_r+0x5c0>
 800d402:	e1c4      	b.n	800d78e <_svfprintf_r+0x94a>
 800d404:	1ceb      	adds	r3, r5, #3
 800d406:	db03      	blt.n	800d410 <_svfprintf_r+0x5cc>
 800d408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d40a:	42ab      	cmp	r3, r5
 800d40c:	db00      	blt.n	800d410 <_svfprintf_r+0x5cc>
 800d40e:	e1e6      	b.n	800d7de <_svfprintf_r+0x99a>
 800d410:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d412:	3b02      	subs	r3, #2
 800d414:	930f      	str	r3, [sp, #60]	; 0x3c
 800d416:	223c      	movs	r2, #60	; 0x3c
 800d418:	466b      	mov	r3, sp
 800d41a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d41c:	189b      	adds	r3, r3, r2
 800d41e:	1e6c      	subs	r4, r5, #1
 800d420:	3a1c      	subs	r2, #28
 800d422:	2000      	movs	r0, #0
 800d424:	781b      	ldrb	r3, [r3, #0]
 800d426:	9426      	str	r4, [sp, #152]	; 0x98
 800d428:	4391      	bics	r1, r2
 800d42a:	2941      	cmp	r1, #65	; 0x41
 800d42c:	d102      	bne.n	800d434 <_svfprintf_r+0x5f0>
 800d42e:	330f      	adds	r3, #15
 800d430:	b2db      	uxtb	r3, r3
 800d432:	3001      	adds	r0, #1
 800d434:	a928      	add	r1, sp, #160	; 0xa0
 800d436:	700b      	strb	r3, [r1, #0]
 800d438:	232b      	movs	r3, #43	; 0x2b
 800d43a:	2c00      	cmp	r4, #0
 800d43c:	da02      	bge.n	800d444 <_svfprintf_r+0x600>
 800d43e:	2401      	movs	r4, #1
 800d440:	3302      	adds	r3, #2
 800d442:	1b64      	subs	r4, r4, r5
 800d444:	704b      	strb	r3, [r1, #1]
 800d446:	2c09      	cmp	r4, #9
 800d448:	dc00      	bgt.n	800d44c <_svfprintf_r+0x608>
 800d44a:	e1ba      	b.n	800d7c2 <_svfprintf_r+0x97e>
 800d44c:	2337      	movs	r3, #55	; 0x37
 800d44e:	250a      	movs	r5, #10
 800d450:	aa1e      	add	r2, sp, #120	; 0x78
 800d452:	189b      	adds	r3, r3, r2
 800d454:	9310      	str	r3, [sp, #64]	; 0x40
 800d456:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d458:	0020      	movs	r0, r4
 800d45a:	9309      	str	r3, [sp, #36]	; 0x24
 800d45c:	0029      	movs	r1, r5
 800d45e:	3b01      	subs	r3, #1
 800d460:	9310      	str	r3, [sp, #64]	; 0x40
 800d462:	f7f2 ffdb 	bl	800041c <__aeabi_idivmod>
 800d466:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d468:	3130      	adds	r1, #48	; 0x30
 800d46a:	7019      	strb	r1, [r3, #0]
 800d46c:	0020      	movs	r0, r4
 800d46e:	0029      	movs	r1, r5
 800d470:	9411      	str	r4, [sp, #68]	; 0x44
 800d472:	f7f2 feed 	bl	8000250 <__divsi3>
 800d476:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d478:	0004      	movs	r4, r0
 800d47a:	2b63      	cmp	r3, #99	; 0x63
 800d47c:	dceb      	bgt.n	800d456 <_svfprintf_r+0x612>
 800d47e:	222a      	movs	r2, #42	; 0x2a
 800d480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d482:	a81e      	add	r0, sp, #120	; 0x78
 800d484:	1e99      	subs	r1, r3, #2
 800d486:	1812      	adds	r2, r2, r0
 800d488:	2037      	movs	r0, #55	; 0x37
 800d48a:	000b      	movs	r3, r1
 800d48c:	3430      	adds	r4, #48	; 0x30
 800d48e:	700c      	strb	r4, [r1, #0]
 800d490:	ac1e      	add	r4, sp, #120	; 0x78
 800d492:	1900      	adds	r0, r0, r4
 800d494:	4283      	cmp	r3, r0
 800d496:	d200      	bcs.n	800d49a <_svfprintf_r+0x656>
 800d498:	e18e      	b.n	800d7b8 <_svfprintf_r+0x974>
 800d49a:	2300      	movs	r3, #0
 800d49c:	4281      	cmp	r1, r0
 800d49e:	d804      	bhi.n	800d4aa <_svfprintf_r+0x666>
 800d4a0:	aa1e      	add	r2, sp, #120	; 0x78
 800d4a2:	3339      	adds	r3, #57	; 0x39
 800d4a4:	189b      	adds	r3, r3, r2
 800d4a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4a8:	1a9b      	subs	r3, r3, r2
 800d4aa:	222a      	movs	r2, #42	; 0x2a
 800d4ac:	a91e      	add	r1, sp, #120	; 0x78
 800d4ae:	1852      	adds	r2, r2, r1
 800d4b0:	18d3      	adds	r3, r2, r3
 800d4b2:	aa28      	add	r2, sp, #160	; 0xa0
 800d4b4:	1a9b      	subs	r3, r3, r2
 800d4b6:	931e      	str	r3, [sp, #120]	; 0x78
 800d4b8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d4ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4bc:	4694      	mov	ip, r2
 800d4be:	4463      	add	r3, ip
 800d4c0:	9309      	str	r3, [sp, #36]	; 0x24
 800d4c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4c4:	2b01      	cmp	r3, #1
 800d4c6:	dc01      	bgt.n	800d4cc <_svfprintf_r+0x688>
 800d4c8:	07f3      	lsls	r3, r6, #31
 800d4ca:	d504      	bpl.n	800d4d6 <_svfprintf_r+0x692>
 800d4cc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d4ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4d0:	4694      	mov	ip, r2
 800d4d2:	4463      	add	r3, ip
 800d4d4:	9309      	str	r3, [sp, #36]	; 0x24
 800d4d6:	2280      	movs	r2, #128	; 0x80
 800d4d8:	4b74      	ldr	r3, [pc, #464]	; (800d6ac <_svfprintf_r+0x868>)
 800d4da:	0052      	lsls	r2, r2, #1
 800d4dc:	4033      	ands	r3, r6
 800d4de:	431a      	orrs	r2, r3
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	001d      	movs	r5, r3
 800d4e4:	921a      	str	r2, [sp, #104]	; 0x68
 800d4e6:	9310      	str	r3, [sp, #64]	; 0x40
 800d4e8:	9311      	str	r3, [sp, #68]	; 0x44
 800d4ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d4ec:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800d4ee:	9319      	str	r3, [sp, #100]	; 0x64
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d006      	beq.n	800d502 <_svfprintf_r+0x6be>
 800d4f4:	231b      	movs	r3, #27
 800d4f6:	aa1e      	add	r2, sp, #120	; 0x78
 800d4f8:	189b      	adds	r3, r3, r2
 800d4fa:	222d      	movs	r2, #45	; 0x2d
 800d4fc:	701a      	strb	r2, [r3, #0]
 800d4fe:	2300      	movs	r3, #0
 800d500:	9319      	str	r3, [sp, #100]	; 0x64
 800d502:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d504:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d506:	931a      	str	r3, [sp, #104]	; 0x68
 800d508:	4293      	cmp	r3, r2
 800d50a:	da00      	bge.n	800d50e <_svfprintf_r+0x6ca>
 800d50c:	921a      	str	r2, [sp, #104]	; 0x68
 800d50e:	231b      	movs	r3, #27
 800d510:	aa1e      	add	r2, sp, #120	; 0x78
 800d512:	189b      	adds	r3, r3, r2
 800d514:	781b      	ldrb	r3, [r3, #0]
 800d516:	1e5a      	subs	r2, r3, #1
 800d518:	4193      	sbcs	r3, r2
 800d51a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d51c:	18d3      	adds	r3, r2, r3
 800d51e:	931a      	str	r3, [sp, #104]	; 0x68
 800d520:	0032      	movs	r2, r6
 800d522:	2302      	movs	r3, #2
 800d524:	401a      	ands	r2, r3
 800d526:	9220      	str	r2, [sp, #128]	; 0x80
 800d528:	421e      	tst	r6, r3
 800d52a:	d002      	beq.n	800d532 <_svfprintf_r+0x6ee>
 800d52c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d52e:	3302      	adds	r3, #2
 800d530:	931a      	str	r3, [sp, #104]	; 0x68
 800d532:	2384      	movs	r3, #132	; 0x84
 800d534:	0032      	movs	r2, r6
 800d536:	401a      	ands	r2, r3
 800d538:	9221      	str	r2, [sp, #132]	; 0x84
 800d53a:	421e      	tst	r6, r3
 800d53c:	d11f      	bne.n	800d57e <_svfprintf_r+0x73a>
 800d53e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d540:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d542:	1a9c      	subs	r4, r3, r2
 800d544:	2c00      	cmp	r4, #0
 800d546:	dd1a      	ble.n	800d57e <_svfprintf_r+0x73a>
 800d548:	0039      	movs	r1, r7
 800d54a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d54c:	4858      	ldr	r0, [pc, #352]	; (800d6b0 <_svfprintf_r+0x86c>)
 800d54e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d550:	3301      	adds	r3, #1
 800d552:	3108      	adds	r1, #8
 800d554:	6038      	str	r0, [r7, #0]
 800d556:	2c10      	cmp	r4, #16
 800d558:	dd00      	ble.n	800d55c <_svfprintf_r+0x718>
 800d55a:	e31c      	b.n	800db96 <_svfprintf_r+0xd52>
 800d55c:	607c      	str	r4, [r7, #4]
 800d55e:	18a4      	adds	r4, r4, r2
 800d560:	000f      	movs	r7, r1
 800d562:	942e      	str	r4, [sp, #184]	; 0xb8
 800d564:	932d      	str	r3, [sp, #180]	; 0xb4
 800d566:	2b07      	cmp	r3, #7
 800d568:	dd09      	ble.n	800d57e <_svfprintf_r+0x73a>
 800d56a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d56c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d56e:	aa2c      	add	r2, sp, #176	; 0xb0
 800d570:	f003 fd7e 	bl	8011070 <__ssprint_r>
 800d574:	2800      	cmp	r0, #0
 800d576:	d001      	beq.n	800d57c <_svfprintf_r+0x738>
 800d578:	f000 fe43 	bl	800e202 <_svfprintf_r+0x13be>
 800d57c:	af2f      	add	r7, sp, #188	; 0xbc
 800d57e:	221b      	movs	r2, #27
 800d580:	a91e      	add	r1, sp, #120	; 0x78
 800d582:	1852      	adds	r2, r2, r1
 800d584:	7811      	ldrb	r1, [r2, #0]
 800d586:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d588:	2900      	cmp	r1, #0
 800d58a:	d014      	beq.n	800d5b6 <_svfprintf_r+0x772>
 800d58c:	603a      	str	r2, [r7, #0]
 800d58e:	2201      	movs	r2, #1
 800d590:	189b      	adds	r3, r3, r2
 800d592:	932e      	str	r3, [sp, #184]	; 0xb8
 800d594:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d596:	607a      	str	r2, [r7, #4]
 800d598:	189b      	adds	r3, r3, r2
 800d59a:	932d      	str	r3, [sp, #180]	; 0xb4
 800d59c:	3708      	adds	r7, #8
 800d59e:	2b07      	cmp	r3, #7
 800d5a0:	dd09      	ble.n	800d5b6 <_svfprintf_r+0x772>
 800d5a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d5a4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d5a6:	aa2c      	add	r2, sp, #176	; 0xb0
 800d5a8:	f003 fd62 	bl	8011070 <__ssprint_r>
 800d5ac:	2800      	cmp	r0, #0
 800d5ae:	d001      	beq.n	800d5b4 <_svfprintf_r+0x770>
 800d5b0:	f000 fe27 	bl	800e202 <_svfprintf_r+0x13be>
 800d5b4:	af2f      	add	r7, sp, #188	; 0xbc
 800d5b6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d5b8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d5ba:	2a00      	cmp	r2, #0
 800d5bc:	d015      	beq.n	800d5ea <_svfprintf_r+0x7a6>
 800d5be:	aa25      	add	r2, sp, #148	; 0x94
 800d5c0:	603a      	str	r2, [r7, #0]
 800d5c2:	2202      	movs	r2, #2
 800d5c4:	189b      	adds	r3, r3, r2
 800d5c6:	932e      	str	r3, [sp, #184]	; 0xb8
 800d5c8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d5ca:	607a      	str	r2, [r7, #4]
 800d5cc:	3301      	adds	r3, #1
 800d5ce:	932d      	str	r3, [sp, #180]	; 0xb4
 800d5d0:	3708      	adds	r7, #8
 800d5d2:	2b07      	cmp	r3, #7
 800d5d4:	dd09      	ble.n	800d5ea <_svfprintf_r+0x7a6>
 800d5d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d5d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d5da:	aa2c      	add	r2, sp, #176	; 0xb0
 800d5dc:	f003 fd48 	bl	8011070 <__ssprint_r>
 800d5e0:	2800      	cmp	r0, #0
 800d5e2:	d001      	beq.n	800d5e8 <_svfprintf_r+0x7a4>
 800d5e4:	f000 fe0d 	bl	800e202 <_svfprintf_r+0x13be>
 800d5e8:	af2f      	add	r7, sp, #188	; 0xbc
 800d5ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d5ec:	2b80      	cmp	r3, #128	; 0x80
 800d5ee:	d11f      	bne.n	800d630 <_svfprintf_r+0x7ec>
 800d5f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d5f2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d5f4:	1a9c      	subs	r4, r3, r2
 800d5f6:	2c00      	cmp	r4, #0
 800d5f8:	dd1a      	ble.n	800d630 <_svfprintf_r+0x7ec>
 800d5fa:	0039      	movs	r1, r7
 800d5fc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d5fe:	482d      	ldr	r0, [pc, #180]	; (800d6b4 <_svfprintf_r+0x870>)
 800d600:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d602:	3301      	adds	r3, #1
 800d604:	3108      	adds	r1, #8
 800d606:	6038      	str	r0, [r7, #0]
 800d608:	2c10      	cmp	r4, #16
 800d60a:	dd00      	ble.n	800d60e <_svfprintf_r+0x7ca>
 800d60c:	e2d6      	b.n	800dbbc <_svfprintf_r+0xd78>
 800d60e:	607c      	str	r4, [r7, #4]
 800d610:	18a4      	adds	r4, r4, r2
 800d612:	000f      	movs	r7, r1
 800d614:	942e      	str	r4, [sp, #184]	; 0xb8
 800d616:	932d      	str	r3, [sp, #180]	; 0xb4
 800d618:	2b07      	cmp	r3, #7
 800d61a:	dd09      	ble.n	800d630 <_svfprintf_r+0x7ec>
 800d61c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d61e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d620:	aa2c      	add	r2, sp, #176	; 0xb0
 800d622:	f003 fd25 	bl	8011070 <__ssprint_r>
 800d626:	2800      	cmp	r0, #0
 800d628:	d001      	beq.n	800d62e <_svfprintf_r+0x7ea>
 800d62a:	f000 fdea 	bl	800e202 <_svfprintf_r+0x13be>
 800d62e:	af2f      	add	r7, sp, #188	; 0xbc
 800d630:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d632:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d634:	1a9c      	subs	r4, r3, r2
 800d636:	2c00      	cmp	r4, #0
 800d638:	dd1a      	ble.n	800d670 <_svfprintf_r+0x82c>
 800d63a:	0039      	movs	r1, r7
 800d63c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d63e:	481d      	ldr	r0, [pc, #116]	; (800d6b4 <_svfprintf_r+0x870>)
 800d640:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d642:	3301      	adds	r3, #1
 800d644:	3108      	adds	r1, #8
 800d646:	6038      	str	r0, [r7, #0]
 800d648:	2c10      	cmp	r4, #16
 800d64a:	dd00      	ble.n	800d64e <_svfprintf_r+0x80a>
 800d64c:	e2c9      	b.n	800dbe2 <_svfprintf_r+0xd9e>
 800d64e:	18a2      	adds	r2, r4, r2
 800d650:	607c      	str	r4, [r7, #4]
 800d652:	922e      	str	r2, [sp, #184]	; 0xb8
 800d654:	000f      	movs	r7, r1
 800d656:	932d      	str	r3, [sp, #180]	; 0xb4
 800d658:	2b07      	cmp	r3, #7
 800d65a:	dd09      	ble.n	800d670 <_svfprintf_r+0x82c>
 800d65c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d65e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d660:	aa2c      	add	r2, sp, #176	; 0xb0
 800d662:	f003 fd05 	bl	8011070 <__ssprint_r>
 800d666:	2800      	cmp	r0, #0
 800d668:	d001      	beq.n	800d66e <_svfprintf_r+0x82a>
 800d66a:	f000 fdca 	bl	800e202 <_svfprintf_r+0x13be>
 800d66e:	af2f      	add	r7, sp, #188	; 0xbc
 800d670:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d672:	9319      	str	r3, [sp, #100]	; 0x64
 800d674:	05f3      	lsls	r3, r6, #23
 800d676:	d500      	bpl.n	800d67a <_svfprintf_r+0x836>
 800d678:	e2ce      	b.n	800dc18 <_svfprintf_r+0xdd4>
 800d67a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d67c:	9b08      	ldr	r3, [sp, #32]
 800d67e:	4694      	mov	ip, r2
 800d680:	603b      	str	r3, [r7, #0]
 800d682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d684:	607b      	str	r3, [r7, #4]
 800d686:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d688:	4463      	add	r3, ip
 800d68a:	932e      	str	r3, [sp, #184]	; 0xb8
 800d68c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d68e:	3301      	adds	r3, #1
 800d690:	932d      	str	r3, [sp, #180]	; 0xb4
 800d692:	2b07      	cmp	r3, #7
 800d694:	dd00      	ble.n	800d698 <_svfprintf_r+0x854>
 800d696:	e3a3      	b.n	800dde0 <_svfprintf_r+0xf9c>
 800d698:	3708      	adds	r7, #8
 800d69a:	e301      	b.n	800dca0 <_svfprintf_r+0xe5c>
 800d69c:	08014274 	.word	0x08014274
 800d6a0:	08014285 	.word	0x08014285
 800d6a4:	40300000 	.word	0x40300000
 800d6a8:	3fe00000 	.word	0x3fe00000
 800d6ac:	fffffbff 	.word	0xfffffbff
 800d6b0:	08014298 	.word	0x08014298
 800d6b4:	080142a8 	.word	0x080142a8
 800d6b8:	9b08      	ldr	r3, [sp, #32]
 800d6ba:	930c      	str	r3, [sp, #48]	; 0x30
 800d6bc:	e610      	b.n	800d2e0 <_svfprintf_r+0x49c>
 800d6be:	2306      	movs	r3, #6
 800d6c0:	e5fd      	b.n	800d2be <_svfprintf_r+0x47a>
 800d6c2:	930e      	str	r3, [sp, #56]	; 0x38
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	e61a      	b.n	800d2fe <_svfprintf_r+0x4ba>
 800d6c8:	7010      	strb	r0, [r2, #0]
 800d6ca:	e684      	b.n	800d3d6 <_svfprintf_r+0x592>
 800d6cc:	7018      	strb	r0, [r3, #0]
 800d6ce:	3301      	adds	r3, #1
 800d6d0:	1aca      	subs	r2, r1, r3
 800d6d2:	d5fb      	bpl.n	800d6cc <_svfprintf_r+0x888>
 800d6d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	3201      	adds	r2, #1
 800d6da:	db01      	blt.n	800d6e0 <_svfprintf_r+0x89c>
 800d6dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d6de:	3301      	adds	r3, #1
 800d6e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d6e2:	18d3      	adds	r3, r2, r3
 800d6e4:	9323      	str	r3, [sp, #140]	; 0x8c
 800d6e6:	e684      	b.n	800d3f2 <_svfprintf_r+0x5ae>
 800d6e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d6ea:	9920      	ldr	r1, [sp, #128]	; 0x80
 800d6ec:	2030      	movs	r0, #48	; 0x30
 800d6ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d6f0:	1851      	adds	r1, r2, r1
 800d6f2:	e7ed      	b.n	800d6d0 <_svfprintf_r+0x88c>
 800d6f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d6f6:	2303      	movs	r3, #3
 800d6f8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800d6fa:	2a46      	cmp	r2, #70	; 0x46
 800d6fc:	d006      	beq.n	800d70c <_svfprintf_r+0x8c8>
 800d6fe:	0014      	movs	r4, r2
 800d700:	3c45      	subs	r4, #69	; 0x45
 800d702:	4262      	negs	r2, r4
 800d704:	4154      	adcs	r4, r2
 800d706:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d708:	3b01      	subs	r3, #1
 800d70a:	1914      	adds	r4, r2, r4
 800d70c:	aa2a      	add	r2, sp, #168	; 0xa8
 800d70e:	9204      	str	r2, [sp, #16]
 800d710:	aa27      	add	r2, sp, #156	; 0x9c
 800d712:	9203      	str	r2, [sp, #12]
 800d714:	aa26      	add	r2, sp, #152	; 0x98
 800d716:	9202      	str	r2, [sp, #8]
 800d718:	9300      	str	r3, [sp, #0]
 800d71a:	002a      	movs	r2, r5
 800d71c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d71e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d720:	9401      	str	r4, [sp, #4]
 800d722:	f002 fad7 	bl	800fcd4 <_dtoa_r>
 800d726:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d728:	9008      	str	r0, [sp, #32]
 800d72a:	2b47      	cmp	r3, #71	; 0x47
 800d72c:	d103      	bne.n	800d736 <_svfprintf_r+0x8f2>
 800d72e:	07f3      	lsls	r3, r6, #31
 800d730:	d401      	bmi.n	800d736 <_svfprintf_r+0x8f2>
 800d732:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800d734:	e65e      	b.n	800d3f4 <_svfprintf_r+0x5b0>
 800d736:	9b08      	ldr	r3, [sp, #32]
 800d738:	191b      	adds	r3, r3, r4
 800d73a:	9311      	str	r3, [sp, #68]	; 0x44
 800d73c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d73e:	2b46      	cmp	r3, #70	; 0x46
 800d740:	d112      	bne.n	800d768 <_svfprintf_r+0x924>
 800d742:	9b08      	ldr	r3, [sp, #32]
 800d744:	781b      	ldrb	r3, [r3, #0]
 800d746:	2b30      	cmp	r3, #48	; 0x30
 800d748:	d10a      	bne.n	800d760 <_svfprintf_r+0x91c>
 800d74a:	2200      	movs	r2, #0
 800d74c:	2300      	movs	r3, #0
 800d74e:	0028      	movs	r0, r5
 800d750:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d752:	f7f2 fe79 	bl	8000448 <__aeabi_dcmpeq>
 800d756:	2800      	cmp	r0, #0
 800d758:	d102      	bne.n	800d760 <_svfprintf_r+0x91c>
 800d75a:	2301      	movs	r3, #1
 800d75c:	1b1b      	subs	r3, r3, r4
 800d75e:	9326      	str	r3, [sp, #152]	; 0x98
 800d760:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d762:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d764:	18d3      	adds	r3, r2, r3
 800d766:	9311      	str	r3, [sp, #68]	; 0x44
 800d768:	2200      	movs	r2, #0
 800d76a:	2300      	movs	r3, #0
 800d76c:	0028      	movs	r0, r5
 800d76e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d770:	f7f2 fe6a 	bl	8000448 <__aeabi_dcmpeq>
 800d774:	2800      	cmp	r0, #0
 800d776:	d001      	beq.n	800d77c <_svfprintf_r+0x938>
 800d778:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d77a:	932a      	str	r3, [sp, #168]	; 0xa8
 800d77c:	2230      	movs	r2, #48	; 0x30
 800d77e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800d780:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d782:	4299      	cmp	r1, r3
 800d784:	d9d5      	bls.n	800d732 <_svfprintf_r+0x8ee>
 800d786:	1c59      	adds	r1, r3, #1
 800d788:	912a      	str	r1, [sp, #168]	; 0xa8
 800d78a:	701a      	strb	r2, [r3, #0]
 800d78c:	e7f7      	b.n	800d77e <_svfprintf_r+0x93a>
 800d78e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d790:	2b46      	cmp	r3, #70	; 0x46
 800d792:	d000      	beq.n	800d796 <_svfprintf_r+0x952>
 800d794:	e63f      	b.n	800d416 <_svfprintf_r+0x5d2>
 800d796:	2201      	movs	r2, #1
 800d798:	0033      	movs	r3, r6
 800d79a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d79c:	4013      	ands	r3, r2
 800d79e:	430b      	orrs	r3, r1
 800d7a0:	2d00      	cmp	r5, #0
 800d7a2:	dd2c      	ble.n	800d7fe <_svfprintf_r+0x9ba>
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d046      	beq.n	800d836 <_svfprintf_r+0x9f2>
 800d7a8:	000a      	movs	r2, r1
 800d7aa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d7ac:	18eb      	adds	r3, r5, r3
 800d7ae:	18d3      	adds	r3, r2, r3
 800d7b0:	9309      	str	r3, [sp, #36]	; 0x24
 800d7b2:	2366      	movs	r3, #102	; 0x66
 800d7b4:	930f      	str	r3, [sp, #60]	; 0x3c
 800d7b6:	e030      	b.n	800d81a <_svfprintf_r+0x9d6>
 800d7b8:	781c      	ldrb	r4, [r3, #0]
 800d7ba:	3301      	adds	r3, #1
 800d7bc:	7014      	strb	r4, [r2, #0]
 800d7be:	3201      	adds	r2, #1
 800d7c0:	e668      	b.n	800d494 <_svfprintf_r+0x650>
 800d7c2:	222a      	movs	r2, #42	; 0x2a
 800d7c4:	ab1e      	add	r3, sp, #120	; 0x78
 800d7c6:	18d2      	adds	r2, r2, r3
 800d7c8:	2800      	cmp	r0, #0
 800d7ca:	d104      	bne.n	800d7d6 <_svfprintf_r+0x992>
 800d7cc:	2330      	movs	r3, #48	; 0x30
 800d7ce:	222b      	movs	r2, #43	; 0x2b
 800d7d0:	708b      	strb	r3, [r1, #2]
 800d7d2:	ab1e      	add	r3, sp, #120	; 0x78
 800d7d4:	18d2      	adds	r2, r2, r3
 800d7d6:	3430      	adds	r4, #48	; 0x30
 800d7d8:	1c53      	adds	r3, r2, #1
 800d7da:	7014      	strb	r4, [r2, #0]
 800d7dc:	e669      	b.n	800d4b2 <_svfprintf_r+0x66e>
 800d7de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d7e0:	42ab      	cmp	r3, r5
 800d7e2:	dd12      	ble.n	800d80a <_svfprintf_r+0x9c6>
 800d7e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d7e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d7e8:	4694      	mov	ip, r2
 800d7ea:	4463      	add	r3, ip
 800d7ec:	9309      	str	r3, [sp, #36]	; 0x24
 800d7ee:	2367      	movs	r3, #103	; 0x67
 800d7f0:	930f      	str	r3, [sp, #60]	; 0x3c
 800d7f2:	2d00      	cmp	r5, #0
 800d7f4:	dc11      	bgt.n	800d81a <_svfprintf_r+0x9d6>
 800d7f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7f8:	1b5b      	subs	r3, r3, r5
 800d7fa:	3301      	adds	r3, #1
 800d7fc:	e00c      	b.n	800d818 <_svfprintf_r+0x9d4>
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d01b      	beq.n	800d83a <_svfprintf_r+0x9f6>
 800d802:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d804:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d806:	3301      	adds	r3, #1
 800d808:	e7d1      	b.n	800d7ae <_svfprintf_r+0x96a>
 800d80a:	2367      	movs	r3, #103	; 0x67
 800d80c:	9509      	str	r5, [sp, #36]	; 0x24
 800d80e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d810:	07f3      	lsls	r3, r6, #31
 800d812:	d502      	bpl.n	800d81a <_svfprintf_r+0x9d6>
 800d814:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d816:	18eb      	adds	r3, r5, r3
 800d818:	9309      	str	r3, [sp, #36]	; 0x24
 800d81a:	2380      	movs	r3, #128	; 0x80
 800d81c:	0032      	movs	r2, r6
 800d81e:	00db      	lsls	r3, r3, #3
 800d820:	401a      	ands	r2, r3
 800d822:	9211      	str	r2, [sp, #68]	; 0x44
 800d824:	2200      	movs	r2, #0
 800d826:	9210      	str	r2, [sp, #64]	; 0x40
 800d828:	421e      	tst	r6, r3
 800d82a:	d100      	bne.n	800d82e <_svfprintf_r+0x9ea>
 800d82c:	e65d      	b.n	800d4ea <_svfprintf_r+0x6a6>
 800d82e:	4295      	cmp	r5, r2
 800d830:	dc25      	bgt.n	800d87e <_svfprintf_r+0xa3a>
 800d832:	9211      	str	r2, [sp, #68]	; 0x44
 800d834:	e659      	b.n	800d4ea <_svfprintf_r+0x6a6>
 800d836:	9509      	str	r5, [sp, #36]	; 0x24
 800d838:	e7bb      	b.n	800d7b2 <_svfprintf_r+0x96e>
 800d83a:	2366      	movs	r3, #102	; 0x66
 800d83c:	9209      	str	r2, [sp, #36]	; 0x24
 800d83e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d840:	e7eb      	b.n	800d81a <_svfprintf_r+0x9d6>
 800d842:	42ab      	cmp	r3, r5
 800d844:	da0e      	bge.n	800d864 <_svfprintf_r+0xa20>
 800d846:	1aed      	subs	r5, r5, r3
 800d848:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d84a:	785b      	ldrb	r3, [r3, #1]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d012      	beq.n	800d876 <_svfprintf_r+0xa32>
 800d850:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d852:	3301      	adds	r3, #1
 800d854:	9311      	str	r3, [sp, #68]	; 0x44
 800d856:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d858:	3301      	adds	r3, #1
 800d85a:	9312      	str	r3, [sp, #72]	; 0x48
 800d85c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	2bff      	cmp	r3, #255	; 0xff
 800d862:	d1ee      	bne.n	800d842 <_svfprintf_r+0x9fe>
 800d864:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d866:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d868:	189b      	adds	r3, r3, r2
 800d86a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d86c:	4353      	muls	r3, r2
 800d86e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d870:	189b      	adds	r3, r3, r2
 800d872:	9309      	str	r3, [sp, #36]	; 0x24
 800d874:	e639      	b.n	800d4ea <_svfprintf_r+0x6a6>
 800d876:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d878:	3301      	adds	r3, #1
 800d87a:	9310      	str	r3, [sp, #64]	; 0x40
 800d87c:	e7ee      	b.n	800d85c <_svfprintf_r+0xa18>
 800d87e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d880:	9311      	str	r3, [sp, #68]	; 0x44
 800d882:	e7eb      	b.n	800d85c <_svfprintf_r+0xa18>
 800d884:	1d23      	adds	r3, r4, #4
 800d886:	930d      	str	r3, [sp, #52]	; 0x34
 800d888:	06b3      	lsls	r3, r6, #26
 800d88a:	d509      	bpl.n	800d8a0 <_svfprintf_r+0xa5c>
 800d88c:	6823      	ldr	r3, [r4, #0]
 800d88e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d890:	601a      	str	r2, [r3, #0]
 800d892:	17d2      	asrs	r2, r2, #31
 800d894:	605a      	str	r2, [r3, #4]
 800d896:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d898:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800d89a:	9308      	str	r3, [sp, #32]
 800d89c:	f7ff fb0d 	bl	800ceba <_svfprintf_r+0x76>
 800d8a0:	06f3      	lsls	r3, r6, #27
 800d8a2:	d503      	bpl.n	800d8ac <_svfprintf_r+0xa68>
 800d8a4:	6823      	ldr	r3, [r4, #0]
 800d8a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d8a8:	601a      	str	r2, [r3, #0]
 800d8aa:	e7f4      	b.n	800d896 <_svfprintf_r+0xa52>
 800d8ac:	0673      	lsls	r3, r6, #25
 800d8ae:	d503      	bpl.n	800d8b8 <_svfprintf_r+0xa74>
 800d8b0:	6823      	ldr	r3, [r4, #0]
 800d8b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d8b4:	801a      	strh	r2, [r3, #0]
 800d8b6:	e7ee      	b.n	800d896 <_svfprintf_r+0xa52>
 800d8b8:	05b6      	lsls	r6, r6, #22
 800d8ba:	d5f3      	bpl.n	800d8a4 <_svfprintf_r+0xa60>
 800d8bc:	6823      	ldr	r3, [r4, #0]
 800d8be:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d8c0:	701a      	strb	r2, [r3, #0]
 800d8c2:	e7e8      	b.n	800d896 <_svfprintf_r+0xa52>
 800d8c4:	2310      	movs	r3, #16
 800d8c6:	431e      	orrs	r6, r3
 800d8c8:	2320      	movs	r3, #32
 800d8ca:	0030      	movs	r0, r6
 800d8cc:	4018      	ands	r0, r3
 800d8ce:	421e      	tst	r6, r3
 800d8d0:	d00f      	beq.n	800d8f2 <_svfprintf_r+0xaae>
 800d8d2:	3b19      	subs	r3, #25
 800d8d4:	3407      	adds	r4, #7
 800d8d6:	439c      	bics	r4, r3
 800d8d8:	0022      	movs	r2, r4
 800d8da:	ca18      	ldmia	r2!, {r3, r4}
 800d8dc:	9306      	str	r3, [sp, #24]
 800d8de:	9407      	str	r4, [sp, #28]
 800d8e0:	920d      	str	r2, [sp, #52]	; 0x34
 800d8e2:	4bc9      	ldr	r3, [pc, #804]	; (800dc08 <_svfprintf_r+0xdc4>)
 800d8e4:	401e      	ands	r6, r3
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	221b      	movs	r2, #27
 800d8ea:	a91e      	add	r1, sp, #120	; 0x78
 800d8ec:	1852      	adds	r2, r2, r1
 800d8ee:	2100      	movs	r1, #0
 800d8f0:	e430      	b.n	800d154 <_svfprintf_r+0x310>
 800d8f2:	0022      	movs	r2, r4
 800d8f4:	ca08      	ldmia	r2!, {r3}
 800d8f6:	0031      	movs	r1, r6
 800d8f8:	920d      	str	r2, [sp, #52]	; 0x34
 800d8fa:	2210      	movs	r2, #16
 800d8fc:	4011      	ands	r1, r2
 800d8fe:	4216      	tst	r6, r2
 800d900:	d002      	beq.n	800d908 <_svfprintf_r+0xac4>
 800d902:	9306      	str	r3, [sp, #24]
 800d904:	9007      	str	r0, [sp, #28]
 800d906:	e7ec      	b.n	800d8e2 <_svfprintf_r+0xa9e>
 800d908:	2240      	movs	r2, #64	; 0x40
 800d90a:	0030      	movs	r0, r6
 800d90c:	4010      	ands	r0, r2
 800d90e:	4216      	tst	r6, r2
 800d910:	d003      	beq.n	800d91a <_svfprintf_r+0xad6>
 800d912:	b29b      	uxth	r3, r3
 800d914:	9306      	str	r3, [sp, #24]
 800d916:	9107      	str	r1, [sp, #28]
 800d918:	e7e3      	b.n	800d8e2 <_svfprintf_r+0xa9e>
 800d91a:	2280      	movs	r2, #128	; 0x80
 800d91c:	0031      	movs	r1, r6
 800d91e:	0092      	lsls	r2, r2, #2
 800d920:	4011      	ands	r1, r2
 800d922:	4216      	tst	r6, r2
 800d924:	d0f6      	beq.n	800d914 <_svfprintf_r+0xad0>
 800d926:	b2db      	uxtb	r3, r3
 800d928:	e7eb      	b.n	800d902 <_svfprintf_r+0xabe>
 800d92a:	0023      	movs	r3, r4
 800d92c:	cb04      	ldmia	r3!, {r2}
 800d92e:	49b7      	ldr	r1, [pc, #732]	; (800dc0c <_svfprintf_r+0xdc8>)
 800d930:	9206      	str	r2, [sp, #24]
 800d932:	aa25      	add	r2, sp, #148	; 0x94
 800d934:	8011      	strh	r1, [r2, #0]
 800d936:	4ab6      	ldr	r2, [pc, #728]	; (800dc10 <_svfprintf_r+0xdcc>)
 800d938:	930d      	str	r3, [sp, #52]	; 0x34
 800d93a:	2300      	movs	r3, #0
 800d93c:	921f      	str	r2, [sp, #124]	; 0x7c
 800d93e:	2278      	movs	r2, #120	; 0x78
 800d940:	9307      	str	r3, [sp, #28]
 800d942:	3302      	adds	r3, #2
 800d944:	431e      	orrs	r6, r3
 800d946:	920f      	str	r2, [sp, #60]	; 0x3c
 800d948:	e7ce      	b.n	800d8e8 <_svfprintf_r+0xaa4>
 800d94a:	0023      	movs	r3, r4
 800d94c:	cb04      	ldmia	r3!, {r2}
 800d94e:	2400      	movs	r4, #0
 800d950:	930d      	str	r3, [sp, #52]	; 0x34
 800d952:	231b      	movs	r3, #27
 800d954:	9208      	str	r2, [sp, #32]
 800d956:	aa1e      	add	r2, sp, #120	; 0x78
 800d958:	189b      	adds	r3, r3, r2
 800d95a:	701c      	strb	r4, [r3, #0]
 800d95c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d95e:	3301      	adds	r3, #1
 800d960:	d00e      	beq.n	800d980 <_svfprintf_r+0xb3c>
 800d962:	0021      	movs	r1, r4
 800d964:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d966:	9808      	ldr	r0, [sp, #32]
 800d968:	f002 f83a 	bl	800f9e0 <memchr>
 800d96c:	900c      	str	r0, [sp, #48]	; 0x30
 800d96e:	42a0      	cmp	r0, r4
 800d970:	d100      	bne.n	800d974 <_svfprintf_r+0xb30>
 800d972:	e10d      	b.n	800db90 <_svfprintf_r+0xd4c>
 800d974:	9a08      	ldr	r2, [sp, #32]
 800d976:	1a83      	subs	r3, r0, r2
 800d978:	9309      	str	r3, [sp, #36]	; 0x24
 800d97a:	0023      	movs	r3, r4
 800d97c:	940c      	str	r4, [sp, #48]	; 0x30
 800d97e:	e44e      	b.n	800d21e <_svfprintf_r+0x3da>
 800d980:	9808      	ldr	r0, [sp, #32]
 800d982:	f7f2 fbbf 	bl	8000104 <strlen>
 800d986:	9009      	str	r0, [sp, #36]	; 0x24
 800d988:	e7f7      	b.n	800d97a <_svfprintf_r+0xb36>
 800d98a:	2310      	movs	r3, #16
 800d98c:	431e      	orrs	r6, r3
 800d98e:	2320      	movs	r3, #32
 800d990:	0030      	movs	r0, r6
 800d992:	4018      	ands	r0, r3
 800d994:	421e      	tst	r6, r3
 800d996:	d009      	beq.n	800d9ac <_svfprintf_r+0xb68>
 800d998:	3b19      	subs	r3, #25
 800d99a:	3407      	adds	r4, #7
 800d99c:	439c      	bics	r4, r3
 800d99e:	0022      	movs	r2, r4
 800d9a0:	ca18      	ldmia	r2!, {r3, r4}
 800d9a2:	9306      	str	r3, [sp, #24]
 800d9a4:	9407      	str	r4, [sp, #28]
 800d9a6:	920d      	str	r2, [sp, #52]	; 0x34
 800d9a8:	2301      	movs	r3, #1
 800d9aa:	e79d      	b.n	800d8e8 <_svfprintf_r+0xaa4>
 800d9ac:	0023      	movs	r3, r4
 800d9ae:	cb04      	ldmia	r3!, {r2}
 800d9b0:	0031      	movs	r1, r6
 800d9b2:	930d      	str	r3, [sp, #52]	; 0x34
 800d9b4:	2310      	movs	r3, #16
 800d9b6:	4019      	ands	r1, r3
 800d9b8:	421e      	tst	r6, r3
 800d9ba:	d003      	beq.n	800d9c4 <_svfprintf_r+0xb80>
 800d9bc:	9206      	str	r2, [sp, #24]
 800d9be:	9007      	str	r0, [sp, #28]
 800d9c0:	3b0f      	subs	r3, #15
 800d9c2:	e791      	b.n	800d8e8 <_svfprintf_r+0xaa4>
 800d9c4:	2340      	movs	r3, #64	; 0x40
 800d9c6:	0030      	movs	r0, r6
 800d9c8:	4018      	ands	r0, r3
 800d9ca:	421e      	tst	r6, r3
 800d9cc:	d003      	beq.n	800d9d6 <_svfprintf_r+0xb92>
 800d9ce:	b293      	uxth	r3, r2
 800d9d0:	9306      	str	r3, [sp, #24]
 800d9d2:	9107      	str	r1, [sp, #28]
 800d9d4:	e7e8      	b.n	800d9a8 <_svfprintf_r+0xb64>
 800d9d6:	2380      	movs	r3, #128	; 0x80
 800d9d8:	0031      	movs	r1, r6
 800d9da:	009b      	lsls	r3, r3, #2
 800d9dc:	4019      	ands	r1, r3
 800d9de:	421e      	tst	r6, r3
 800d9e0:	d003      	beq.n	800d9ea <_svfprintf_r+0xba6>
 800d9e2:	b2d3      	uxtb	r3, r2
 800d9e4:	9306      	str	r3, [sp, #24]
 800d9e6:	9007      	str	r0, [sp, #28]
 800d9e8:	e7de      	b.n	800d9a8 <_svfprintf_r+0xb64>
 800d9ea:	9206      	str	r2, [sp, #24]
 800d9ec:	e7f1      	b.n	800d9d2 <_svfprintf_r+0xb8e>
 800d9ee:	4b89      	ldr	r3, [pc, #548]	; (800dc14 <_svfprintf_r+0xdd0>)
 800d9f0:	0030      	movs	r0, r6
 800d9f2:	931f      	str	r3, [sp, #124]	; 0x7c
 800d9f4:	2320      	movs	r3, #32
 800d9f6:	4018      	ands	r0, r3
 800d9f8:	421e      	tst	r6, r3
 800d9fa:	d01a      	beq.n	800da32 <_svfprintf_r+0xbee>
 800d9fc:	3b19      	subs	r3, #25
 800d9fe:	3407      	adds	r4, #7
 800da00:	439c      	bics	r4, r3
 800da02:	0022      	movs	r2, r4
 800da04:	ca18      	ldmia	r2!, {r3, r4}
 800da06:	9306      	str	r3, [sp, #24]
 800da08:	9407      	str	r4, [sp, #28]
 800da0a:	920d      	str	r2, [sp, #52]	; 0x34
 800da0c:	07f3      	lsls	r3, r6, #31
 800da0e:	d50a      	bpl.n	800da26 <_svfprintf_r+0xbe2>
 800da10:	9b06      	ldr	r3, [sp, #24]
 800da12:	9a07      	ldr	r2, [sp, #28]
 800da14:	4313      	orrs	r3, r2
 800da16:	d006      	beq.n	800da26 <_svfprintf_r+0xbe2>
 800da18:	2230      	movs	r2, #48	; 0x30
 800da1a:	ab25      	add	r3, sp, #148	; 0x94
 800da1c:	701a      	strb	r2, [r3, #0]
 800da1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800da20:	705a      	strb	r2, [r3, #1]
 800da22:	2302      	movs	r3, #2
 800da24:	431e      	orrs	r6, r3
 800da26:	4b78      	ldr	r3, [pc, #480]	; (800dc08 <_svfprintf_r+0xdc4>)
 800da28:	401e      	ands	r6, r3
 800da2a:	2302      	movs	r3, #2
 800da2c:	e75c      	b.n	800d8e8 <_svfprintf_r+0xaa4>
 800da2e:	4b78      	ldr	r3, [pc, #480]	; (800dc10 <_svfprintf_r+0xdcc>)
 800da30:	e7de      	b.n	800d9f0 <_svfprintf_r+0xbac>
 800da32:	0023      	movs	r3, r4
 800da34:	cb04      	ldmia	r3!, {r2}
 800da36:	0031      	movs	r1, r6
 800da38:	930d      	str	r3, [sp, #52]	; 0x34
 800da3a:	2310      	movs	r3, #16
 800da3c:	4019      	ands	r1, r3
 800da3e:	421e      	tst	r6, r3
 800da40:	d002      	beq.n	800da48 <_svfprintf_r+0xc04>
 800da42:	9206      	str	r2, [sp, #24]
 800da44:	9007      	str	r0, [sp, #28]
 800da46:	e7e1      	b.n	800da0c <_svfprintf_r+0xbc8>
 800da48:	2340      	movs	r3, #64	; 0x40
 800da4a:	0030      	movs	r0, r6
 800da4c:	4018      	ands	r0, r3
 800da4e:	421e      	tst	r6, r3
 800da50:	d003      	beq.n	800da5a <_svfprintf_r+0xc16>
 800da52:	b293      	uxth	r3, r2
 800da54:	9306      	str	r3, [sp, #24]
 800da56:	9107      	str	r1, [sp, #28]
 800da58:	e7d8      	b.n	800da0c <_svfprintf_r+0xbc8>
 800da5a:	2380      	movs	r3, #128	; 0x80
 800da5c:	0031      	movs	r1, r6
 800da5e:	009b      	lsls	r3, r3, #2
 800da60:	4019      	ands	r1, r3
 800da62:	421e      	tst	r6, r3
 800da64:	d002      	beq.n	800da6c <_svfprintf_r+0xc28>
 800da66:	b2d3      	uxtb	r3, r2
 800da68:	9306      	str	r3, [sp, #24]
 800da6a:	e7eb      	b.n	800da44 <_svfprintf_r+0xc00>
 800da6c:	9206      	str	r2, [sp, #24]
 800da6e:	e7f2      	b.n	800da56 <_svfprintf_r+0xc12>
 800da70:	9b07      	ldr	r3, [sp, #28]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d10a      	bne.n	800da8c <_svfprintf_r+0xc48>
 800da76:	9b06      	ldr	r3, [sp, #24]
 800da78:	2b09      	cmp	r3, #9
 800da7a:	d807      	bhi.n	800da8c <_svfprintf_r+0xc48>
 800da7c:	23e7      	movs	r3, #231	; 0xe7
 800da7e:	aa1e      	add	r2, sp, #120	; 0x78
 800da80:	189b      	adds	r3, r3, r2
 800da82:	9a06      	ldr	r2, [sp, #24]
 800da84:	3230      	adds	r2, #48	; 0x30
 800da86:	701a      	strb	r2, [r3, #0]
 800da88:	f000 fc18 	bl	800e2bc <_svfprintf_r+0x1478>
 800da8c:	2680      	movs	r6, #128	; 0x80
 800da8e:	2300      	movs	r3, #0
 800da90:	00f6      	lsls	r6, r6, #3
 800da92:	930e      	str	r3, [sp, #56]	; 0x38
 800da94:	ad58      	add	r5, sp, #352	; 0x160
 800da96:	4026      	ands	r6, r4
 800da98:	220a      	movs	r2, #10
 800da9a:	9806      	ldr	r0, [sp, #24]
 800da9c:	9907      	ldr	r1, [sp, #28]
 800da9e:	2300      	movs	r3, #0
 800daa0:	f7f2 fd00 	bl	80004a4 <__aeabi_uldivmod>
 800daa4:	1e6b      	subs	r3, r5, #1
 800daa6:	3230      	adds	r2, #48	; 0x30
 800daa8:	9308      	str	r3, [sp, #32]
 800daaa:	701a      	strb	r2, [r3, #0]
 800daac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800daae:	900c      	str	r0, [sp, #48]	; 0x30
 800dab0:	3301      	adds	r3, #1
 800dab2:	9110      	str	r1, [sp, #64]	; 0x40
 800dab4:	930e      	str	r3, [sp, #56]	; 0x38
 800dab6:	2e00      	cmp	r6, #0
 800dab8:	d01d      	beq.n	800daf6 <_svfprintf_r+0xcb2>
 800daba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dabc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dabe:	781b      	ldrb	r3, [r3, #0]
 800dac0:	429a      	cmp	r2, r3
 800dac2:	d118      	bne.n	800daf6 <_svfprintf_r+0xcb2>
 800dac4:	2aff      	cmp	r2, #255	; 0xff
 800dac6:	d016      	beq.n	800daf6 <_svfprintf_r+0xcb2>
 800dac8:	9b07      	ldr	r3, [sp, #28]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d102      	bne.n	800dad4 <_svfprintf_r+0xc90>
 800dace:	9b06      	ldr	r3, [sp, #24]
 800dad0:	2b09      	cmp	r3, #9
 800dad2:	d910      	bls.n	800daf6 <_svfprintf_r+0xcb2>
 800dad4:	9b08      	ldr	r3, [sp, #32]
 800dad6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800dad8:	991d      	ldr	r1, [sp, #116]	; 0x74
 800dada:	1a9b      	subs	r3, r3, r2
 800dadc:	0018      	movs	r0, r3
 800dade:	9308      	str	r3, [sp, #32]
 800dae0:	f7fd ffd1 	bl	800ba86 <strncpy>
 800dae4:	2200      	movs	r2, #0
 800dae6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dae8:	920e      	str	r2, [sp, #56]	; 0x38
 800daea:	785b      	ldrb	r3, [r3, #1]
 800daec:	1e5a      	subs	r2, r3, #1
 800daee:	4193      	sbcs	r3, r2
 800daf0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800daf2:	18d3      	adds	r3, r2, r3
 800daf4:	9312      	str	r3, [sp, #72]	; 0x48
 800daf6:	9b07      	ldr	r3, [sp, #28]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d10f      	bne.n	800db1c <_svfprintf_r+0xcd8>
 800dafc:	9b06      	ldr	r3, [sp, #24]
 800dafe:	2b09      	cmp	r3, #9
 800db00:	d80c      	bhi.n	800db1c <_svfprintf_r+0xcd8>
 800db02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db04:	9a08      	ldr	r2, [sp, #32]
 800db06:	9319      	str	r3, [sp, #100]	; 0x64
 800db08:	ab58      	add	r3, sp, #352	; 0x160
 800db0a:	1a9b      	subs	r3, r3, r2
 800db0c:	9309      	str	r3, [sp, #36]	; 0x24
 800db0e:	2300      	movs	r3, #0
 800db10:	0026      	movs	r6, r4
 800db12:	930c      	str	r3, [sp, #48]	; 0x30
 800db14:	001d      	movs	r5, r3
 800db16:	9310      	str	r3, [sp, #64]	; 0x40
 800db18:	9311      	str	r3, [sp, #68]	; 0x44
 800db1a:	e4f2      	b.n	800d502 <_svfprintf_r+0x6be>
 800db1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db1e:	9d08      	ldr	r5, [sp, #32]
 800db20:	9306      	str	r3, [sp, #24]
 800db22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800db24:	9307      	str	r3, [sp, #28]
 800db26:	e7b7      	b.n	800da98 <_svfprintf_r+0xc54>
 800db28:	200f      	movs	r0, #15
 800db2a:	ab58      	add	r3, sp, #352	; 0x160
 800db2c:	9308      	str	r3, [sp, #32]
 800db2e:	9b08      	ldr	r3, [sp, #32]
 800db30:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800db32:	3b01      	subs	r3, #1
 800db34:	9308      	str	r3, [sp, #32]
 800db36:	9b06      	ldr	r3, [sp, #24]
 800db38:	4003      	ands	r3, r0
 800db3a:	5cd3      	ldrb	r3, [r2, r3]
 800db3c:	9a08      	ldr	r2, [sp, #32]
 800db3e:	7013      	strb	r3, [r2, #0]
 800db40:	9b07      	ldr	r3, [sp, #28]
 800db42:	0719      	lsls	r1, r3, #28
 800db44:	9b06      	ldr	r3, [sp, #24]
 800db46:	091a      	lsrs	r2, r3, #4
 800db48:	9b07      	ldr	r3, [sp, #28]
 800db4a:	4311      	orrs	r1, r2
 800db4c:	091b      	lsrs	r3, r3, #4
 800db4e:	9307      	str	r3, [sp, #28]
 800db50:	000b      	movs	r3, r1
 800db52:	9a07      	ldr	r2, [sp, #28]
 800db54:	9106      	str	r1, [sp, #24]
 800db56:	4313      	orrs	r3, r2
 800db58:	d1e9      	bne.n	800db2e <_svfprintf_r+0xcea>
 800db5a:	e7d2      	b.n	800db02 <_svfprintf_r+0xcbe>
 800db5c:	aa58      	add	r2, sp, #352	; 0x160
 800db5e:	9208      	str	r2, [sp, #32]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d1ce      	bne.n	800db02 <_svfprintf_r+0xcbe>
 800db64:	07f6      	lsls	r6, r6, #31
 800db66:	d5cc      	bpl.n	800db02 <_svfprintf_r+0xcbe>
 800db68:	aa1e      	add	r2, sp, #120	; 0x78
 800db6a:	33e7      	adds	r3, #231	; 0xe7
 800db6c:	189b      	adds	r3, r3, r2
 800db6e:	2230      	movs	r2, #48	; 0x30
 800db70:	e789      	b.n	800da86 <_svfprintf_r+0xc42>
 800db72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db74:	2b00      	cmp	r3, #0
 800db76:	d100      	bne.n	800db7a <_svfprintf_r+0xd36>
 800db78:	e364      	b.n	800e244 <_svfprintf_r+0x1400>
 800db7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800db7c:	211b      	movs	r1, #27
 800db7e:	ab3f      	add	r3, sp, #252	; 0xfc
 800db80:	701a      	strb	r2, [r3, #0]
 800db82:	2200      	movs	r2, #0
 800db84:	a81e      	add	r0, sp, #120	; 0x78
 800db86:	1809      	adds	r1, r1, r0
 800db88:	700a      	strb	r2, [r1, #0]
 800db8a:	940d      	str	r4, [sp, #52]	; 0x34
 800db8c:	f7ff fabd 	bl	800d10a <_svfprintf_r+0x2c6>
 800db90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db92:	f7ff fb44 	bl	800d21e <_svfprintf_r+0x3da>
 800db96:	2010      	movs	r0, #16
 800db98:	1812      	adds	r2, r2, r0
 800db9a:	6078      	str	r0, [r7, #4]
 800db9c:	922e      	str	r2, [sp, #184]	; 0xb8
 800db9e:	932d      	str	r3, [sp, #180]	; 0xb4
 800dba0:	2b07      	cmp	r3, #7
 800dba2:	dd08      	ble.n	800dbb6 <_svfprintf_r+0xd72>
 800dba4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dba6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dba8:	aa2c      	add	r2, sp, #176	; 0xb0
 800dbaa:	f003 fa61 	bl	8011070 <__ssprint_r>
 800dbae:	2800      	cmp	r0, #0
 800dbb0:	d000      	beq.n	800dbb4 <_svfprintf_r+0xd70>
 800dbb2:	e326      	b.n	800e202 <_svfprintf_r+0x13be>
 800dbb4:	a92f      	add	r1, sp, #188	; 0xbc
 800dbb6:	000f      	movs	r7, r1
 800dbb8:	3c10      	subs	r4, #16
 800dbba:	e4c5      	b.n	800d548 <_svfprintf_r+0x704>
 800dbbc:	2010      	movs	r0, #16
 800dbbe:	1812      	adds	r2, r2, r0
 800dbc0:	6078      	str	r0, [r7, #4]
 800dbc2:	922e      	str	r2, [sp, #184]	; 0xb8
 800dbc4:	932d      	str	r3, [sp, #180]	; 0xb4
 800dbc6:	2b07      	cmp	r3, #7
 800dbc8:	dd08      	ble.n	800dbdc <_svfprintf_r+0xd98>
 800dbca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dbcc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dbce:	aa2c      	add	r2, sp, #176	; 0xb0
 800dbd0:	f003 fa4e 	bl	8011070 <__ssprint_r>
 800dbd4:	2800      	cmp	r0, #0
 800dbd6:	d000      	beq.n	800dbda <_svfprintf_r+0xd96>
 800dbd8:	e313      	b.n	800e202 <_svfprintf_r+0x13be>
 800dbda:	a92f      	add	r1, sp, #188	; 0xbc
 800dbdc:	000f      	movs	r7, r1
 800dbde:	3c10      	subs	r4, #16
 800dbe0:	e50b      	b.n	800d5fa <_svfprintf_r+0x7b6>
 800dbe2:	2010      	movs	r0, #16
 800dbe4:	1812      	adds	r2, r2, r0
 800dbe6:	6078      	str	r0, [r7, #4]
 800dbe8:	922e      	str	r2, [sp, #184]	; 0xb8
 800dbea:	932d      	str	r3, [sp, #180]	; 0xb4
 800dbec:	2b07      	cmp	r3, #7
 800dbee:	dd08      	ble.n	800dc02 <_svfprintf_r+0xdbe>
 800dbf0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dbf2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dbf4:	aa2c      	add	r2, sp, #176	; 0xb0
 800dbf6:	f003 fa3b 	bl	8011070 <__ssprint_r>
 800dbfa:	2800      	cmp	r0, #0
 800dbfc:	d000      	beq.n	800dc00 <_svfprintf_r+0xdbc>
 800dbfe:	e300      	b.n	800e202 <_svfprintf_r+0x13be>
 800dc00:	a92f      	add	r1, sp, #188	; 0xbc
 800dc02:	000f      	movs	r7, r1
 800dc04:	3c10      	subs	r4, #16
 800dc06:	e518      	b.n	800d63a <_svfprintf_r+0x7f6>
 800dc08:	fffffbff 	.word	0xfffffbff
 800dc0c:	00007830 	.word	0x00007830
 800dc10:	08014274 	.word	0x08014274
 800dc14:	08014285 	.word	0x08014285
 800dc18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dc1a:	2b65      	cmp	r3, #101	; 0x65
 800dc1c:	dc00      	bgt.n	800dc20 <_svfprintf_r+0xddc>
 800dc1e:	e241      	b.n	800e0a4 <_svfprintf_r+0x1260>
 800dc20:	9814      	ldr	r0, [sp, #80]	; 0x50
 800dc22:	9915      	ldr	r1, [sp, #84]	; 0x54
 800dc24:	2200      	movs	r2, #0
 800dc26:	2300      	movs	r3, #0
 800dc28:	f7f2 fc0e 	bl	8000448 <__aeabi_dcmpeq>
 800dc2c:	2800      	cmp	r0, #0
 800dc2e:	d077      	beq.n	800dd20 <_svfprintf_r+0xedc>
 800dc30:	4bca      	ldr	r3, [pc, #808]	; (800df5c <_svfprintf_r+0x1118>)
 800dc32:	603b      	str	r3, [r7, #0]
 800dc34:	2301      	movs	r3, #1
 800dc36:	607b      	str	r3, [r7, #4]
 800dc38:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dc3a:	3708      	adds	r7, #8
 800dc3c:	3301      	adds	r3, #1
 800dc3e:	932e      	str	r3, [sp, #184]	; 0xb8
 800dc40:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dc42:	3301      	adds	r3, #1
 800dc44:	932d      	str	r3, [sp, #180]	; 0xb4
 800dc46:	2b07      	cmp	r3, #7
 800dc48:	dd08      	ble.n	800dc5c <_svfprintf_r+0xe18>
 800dc4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dc4c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dc4e:	aa2c      	add	r2, sp, #176	; 0xb0
 800dc50:	f003 fa0e 	bl	8011070 <__ssprint_r>
 800dc54:	2800      	cmp	r0, #0
 800dc56:	d000      	beq.n	800dc5a <_svfprintf_r+0xe16>
 800dc58:	e2d3      	b.n	800e202 <_svfprintf_r+0x13be>
 800dc5a:	af2f      	add	r7, sp, #188	; 0xbc
 800dc5c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800dc5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dc60:	4293      	cmp	r3, r2
 800dc62:	db01      	blt.n	800dc68 <_svfprintf_r+0xe24>
 800dc64:	07f3      	lsls	r3, r6, #31
 800dc66:	d51b      	bpl.n	800dca0 <_svfprintf_r+0xe5c>
 800dc68:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800dc6a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dc6c:	603b      	str	r3, [r7, #0]
 800dc6e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dc70:	607b      	str	r3, [r7, #4]
 800dc72:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dc74:	3708      	adds	r7, #8
 800dc76:	189b      	adds	r3, r3, r2
 800dc78:	932e      	str	r3, [sp, #184]	; 0xb8
 800dc7a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dc7c:	3301      	adds	r3, #1
 800dc7e:	932d      	str	r3, [sp, #180]	; 0xb4
 800dc80:	2b07      	cmp	r3, #7
 800dc82:	dd08      	ble.n	800dc96 <_svfprintf_r+0xe52>
 800dc84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dc86:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dc88:	aa2c      	add	r2, sp, #176	; 0xb0
 800dc8a:	f003 f9f1 	bl	8011070 <__ssprint_r>
 800dc8e:	2800      	cmp	r0, #0
 800dc90:	d000      	beq.n	800dc94 <_svfprintf_r+0xe50>
 800dc92:	e2b6      	b.n	800e202 <_svfprintf_r+0x13be>
 800dc94:	af2f      	add	r7, sp, #188	; 0xbc
 800dc96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc98:	2510      	movs	r5, #16
 800dc9a:	1e5c      	subs	r4, r3, #1
 800dc9c:	2c00      	cmp	r4, #0
 800dc9e:	dc2e      	bgt.n	800dcfe <_svfprintf_r+0xeba>
 800dca0:	0776      	lsls	r6, r6, #29
 800dca2:	d500      	bpl.n	800dca6 <_svfprintf_r+0xe62>
 800dca4:	e290      	b.n	800e1c8 <_svfprintf_r+0x1384>
 800dca6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800dca8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800dcaa:	4293      	cmp	r3, r2
 800dcac:	da00      	bge.n	800dcb0 <_svfprintf_r+0xe6c>
 800dcae:	0013      	movs	r3, r2
 800dcb0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dcb2:	18d3      	adds	r3, r2, r3
 800dcb4:	9317      	str	r3, [sp, #92]	; 0x5c
 800dcb6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d007      	beq.n	800dccc <_svfprintf_r+0xe88>
 800dcbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dcbe:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dcc0:	aa2c      	add	r2, sp, #176	; 0xb0
 800dcc2:	f003 f9d5 	bl	8011070 <__ssprint_r>
 800dcc6:	2800      	cmp	r0, #0
 800dcc8:	d000      	beq.n	800dccc <_svfprintf_r+0xe88>
 800dcca:	e29a      	b.n	800e202 <_svfprintf_r+0x13be>
 800dccc:	2300      	movs	r3, #0
 800dcce:	932d      	str	r3, [sp, #180]	; 0xb4
 800dcd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d000      	beq.n	800dcd8 <_svfprintf_r+0xe94>
 800dcd6:	e2b0      	b.n	800e23a <_svfprintf_r+0x13f6>
 800dcd8:	af2f      	add	r7, sp, #188	; 0xbc
 800dcda:	e5dc      	b.n	800d896 <_svfprintf_r+0xa52>
 800dcdc:	3210      	adds	r2, #16
 800dcde:	607d      	str	r5, [r7, #4]
 800dce0:	922e      	str	r2, [sp, #184]	; 0xb8
 800dce2:	932d      	str	r3, [sp, #180]	; 0xb4
 800dce4:	2b07      	cmp	r3, #7
 800dce6:	dd08      	ble.n	800dcfa <_svfprintf_r+0xeb6>
 800dce8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dcea:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dcec:	aa2c      	add	r2, sp, #176	; 0xb0
 800dcee:	f003 f9bf 	bl	8011070 <__ssprint_r>
 800dcf2:	2800      	cmp	r0, #0
 800dcf4:	d000      	beq.n	800dcf8 <_svfprintf_r+0xeb4>
 800dcf6:	e284      	b.n	800e202 <_svfprintf_r+0x13be>
 800dcf8:	a92f      	add	r1, sp, #188	; 0xbc
 800dcfa:	000f      	movs	r7, r1
 800dcfc:	3c10      	subs	r4, #16
 800dcfe:	0039      	movs	r1, r7
 800dd00:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dd02:	4897      	ldr	r0, [pc, #604]	; (800df60 <_svfprintf_r+0x111c>)
 800dd04:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800dd06:	3301      	adds	r3, #1
 800dd08:	3108      	adds	r1, #8
 800dd0a:	6038      	str	r0, [r7, #0]
 800dd0c:	2c10      	cmp	r4, #16
 800dd0e:	dce5      	bgt.n	800dcdc <_svfprintf_r+0xe98>
 800dd10:	607c      	str	r4, [r7, #4]
 800dd12:	18a4      	adds	r4, r4, r2
 800dd14:	942e      	str	r4, [sp, #184]	; 0xb8
 800dd16:	000f      	movs	r7, r1
 800dd18:	932d      	str	r3, [sp, #180]	; 0xb4
 800dd1a:	2b07      	cmp	r3, #7
 800dd1c:	ddc0      	ble.n	800dca0 <_svfprintf_r+0xe5c>
 800dd1e:	e05f      	b.n	800dde0 <_svfprintf_r+0xf9c>
 800dd20:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	dc78      	bgt.n	800de18 <_svfprintf_r+0xfd4>
 800dd26:	4b8d      	ldr	r3, [pc, #564]	; (800df5c <_svfprintf_r+0x1118>)
 800dd28:	603b      	str	r3, [r7, #0]
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	607b      	str	r3, [r7, #4]
 800dd2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dd30:	3708      	adds	r7, #8
 800dd32:	3301      	adds	r3, #1
 800dd34:	932e      	str	r3, [sp, #184]	; 0xb8
 800dd36:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dd38:	3301      	adds	r3, #1
 800dd3a:	932d      	str	r3, [sp, #180]	; 0xb4
 800dd3c:	2b07      	cmp	r3, #7
 800dd3e:	dd08      	ble.n	800dd52 <_svfprintf_r+0xf0e>
 800dd40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dd42:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dd44:	aa2c      	add	r2, sp, #176	; 0xb0
 800dd46:	f003 f993 	bl	8011070 <__ssprint_r>
 800dd4a:	2800      	cmp	r0, #0
 800dd4c:	d000      	beq.n	800dd50 <_svfprintf_r+0xf0c>
 800dd4e:	e258      	b.n	800e202 <_svfprintf_r+0x13be>
 800dd50:	af2f      	add	r7, sp, #188	; 0xbc
 800dd52:	990e      	ldr	r1, [sp, #56]	; 0x38
 800dd54:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800dd56:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800dd58:	430b      	orrs	r3, r1
 800dd5a:	2101      	movs	r1, #1
 800dd5c:	4031      	ands	r1, r6
 800dd5e:	430b      	orrs	r3, r1
 800dd60:	d09e      	beq.n	800dca0 <_svfprintf_r+0xe5c>
 800dd62:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800dd64:	603b      	str	r3, [r7, #0]
 800dd66:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dd68:	607b      	str	r3, [r7, #4]
 800dd6a:	189a      	adds	r2, r3, r2
 800dd6c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dd6e:	922e      	str	r2, [sp, #184]	; 0xb8
 800dd70:	3301      	adds	r3, #1
 800dd72:	932d      	str	r3, [sp, #180]	; 0xb4
 800dd74:	3708      	adds	r7, #8
 800dd76:	2b07      	cmp	r3, #7
 800dd78:	dd08      	ble.n	800dd8c <_svfprintf_r+0xf48>
 800dd7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dd7c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dd7e:	aa2c      	add	r2, sp, #176	; 0xb0
 800dd80:	f003 f976 	bl	8011070 <__ssprint_r>
 800dd84:	2800      	cmp	r0, #0
 800dd86:	d000      	beq.n	800dd8a <_svfprintf_r+0xf46>
 800dd88:	e23b      	b.n	800e202 <_svfprintf_r+0x13be>
 800dd8a:	af2f      	add	r7, sp, #188	; 0xbc
 800dd8c:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800dd8e:	2c00      	cmp	r4, #0
 800dd90:	da19      	bge.n	800ddc6 <_svfprintf_r+0xf82>
 800dd92:	0038      	movs	r0, r7
 800dd94:	2510      	movs	r5, #16
 800dd96:	4264      	negs	r4, r4
 800dd98:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800dd9a:	4a71      	ldr	r2, [pc, #452]	; (800df60 <_svfprintf_r+0x111c>)
 800dd9c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dd9e:	3101      	adds	r1, #1
 800dda0:	3708      	adds	r7, #8
 800dda2:	6002      	str	r2, [r0, #0]
 800dda4:	2c10      	cmp	r4, #16
 800dda6:	dc25      	bgt.n	800ddf4 <_svfprintf_r+0xfb0>
 800dda8:	6044      	str	r4, [r0, #4]
 800ddaa:	18e4      	adds	r4, r4, r3
 800ddac:	942e      	str	r4, [sp, #184]	; 0xb8
 800ddae:	912d      	str	r1, [sp, #180]	; 0xb4
 800ddb0:	2907      	cmp	r1, #7
 800ddb2:	dd08      	ble.n	800ddc6 <_svfprintf_r+0xf82>
 800ddb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ddb6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ddb8:	aa2c      	add	r2, sp, #176	; 0xb0
 800ddba:	f003 f959 	bl	8011070 <__ssprint_r>
 800ddbe:	2800      	cmp	r0, #0
 800ddc0:	d000      	beq.n	800ddc4 <_svfprintf_r+0xf80>
 800ddc2:	e21e      	b.n	800e202 <_svfprintf_r+0x13be>
 800ddc4:	af2f      	add	r7, sp, #188	; 0xbc
 800ddc6:	9b08      	ldr	r3, [sp, #32]
 800ddc8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ddca:	603b      	str	r3, [r7, #0]
 800ddcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ddce:	18d2      	adds	r2, r2, r3
 800ddd0:	922e      	str	r2, [sp, #184]	; 0xb8
 800ddd2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800ddd4:	607b      	str	r3, [r7, #4]
 800ddd6:	3201      	adds	r2, #1
 800ddd8:	922d      	str	r2, [sp, #180]	; 0xb4
 800ddda:	2a07      	cmp	r2, #7
 800dddc:	dc00      	bgt.n	800dde0 <_svfprintf_r+0xf9c>
 800ddde:	e45b      	b.n	800d698 <_svfprintf_r+0x854>
 800dde0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dde2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dde4:	aa2c      	add	r2, sp, #176	; 0xb0
 800dde6:	f003 f943 	bl	8011070 <__ssprint_r>
 800ddea:	2800      	cmp	r0, #0
 800ddec:	d000      	beq.n	800ddf0 <_svfprintf_r+0xfac>
 800ddee:	e208      	b.n	800e202 <_svfprintf_r+0x13be>
 800ddf0:	af2f      	add	r7, sp, #188	; 0xbc
 800ddf2:	e755      	b.n	800dca0 <_svfprintf_r+0xe5c>
 800ddf4:	3310      	adds	r3, #16
 800ddf6:	6045      	str	r5, [r0, #4]
 800ddf8:	932e      	str	r3, [sp, #184]	; 0xb8
 800ddfa:	912d      	str	r1, [sp, #180]	; 0xb4
 800ddfc:	2907      	cmp	r1, #7
 800ddfe:	dd08      	ble.n	800de12 <_svfprintf_r+0xfce>
 800de00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de02:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de04:	aa2c      	add	r2, sp, #176	; 0xb0
 800de06:	f003 f933 	bl	8011070 <__ssprint_r>
 800de0a:	2800      	cmp	r0, #0
 800de0c:	d000      	beq.n	800de10 <_svfprintf_r+0xfcc>
 800de0e:	e1f8      	b.n	800e202 <_svfprintf_r+0x13be>
 800de10:	af2f      	add	r7, sp, #188	; 0xbc
 800de12:	0038      	movs	r0, r7
 800de14:	3c10      	subs	r4, #16
 800de16:	e7bf      	b.n	800dd98 <_svfprintf_r+0xf54>
 800de18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de1a:	002c      	movs	r4, r5
 800de1c:	429d      	cmp	r5, r3
 800de1e:	dd00      	ble.n	800de22 <_svfprintf_r+0xfde>
 800de20:	001c      	movs	r4, r3
 800de22:	2c00      	cmp	r4, #0
 800de24:	dd14      	ble.n	800de50 <_svfprintf_r+0x100c>
 800de26:	9b08      	ldr	r3, [sp, #32]
 800de28:	607c      	str	r4, [r7, #4]
 800de2a:	603b      	str	r3, [r7, #0]
 800de2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800de2e:	3708      	adds	r7, #8
 800de30:	18e3      	adds	r3, r4, r3
 800de32:	932e      	str	r3, [sp, #184]	; 0xb8
 800de34:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800de36:	3301      	adds	r3, #1
 800de38:	932d      	str	r3, [sp, #180]	; 0xb4
 800de3a:	2b07      	cmp	r3, #7
 800de3c:	dd08      	ble.n	800de50 <_svfprintf_r+0x100c>
 800de3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de40:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de42:	aa2c      	add	r2, sp, #176	; 0xb0
 800de44:	f003 f914 	bl	8011070 <__ssprint_r>
 800de48:	2800      	cmp	r0, #0
 800de4a:	d000      	beq.n	800de4e <_svfprintf_r+0x100a>
 800de4c:	e1d9      	b.n	800e202 <_svfprintf_r+0x13be>
 800de4e:	af2f      	add	r7, sp, #188	; 0xbc
 800de50:	43e3      	mvns	r3, r4
 800de52:	17db      	asrs	r3, r3, #31
 800de54:	401c      	ands	r4, r3
 800de56:	1b2c      	subs	r4, r5, r4
 800de58:	2c00      	cmp	r4, #0
 800de5a:	dd18      	ble.n	800de8e <_svfprintf_r+0x104a>
 800de5c:	0039      	movs	r1, r7
 800de5e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800de60:	483f      	ldr	r0, [pc, #252]	; (800df60 <_svfprintf_r+0x111c>)
 800de62:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800de64:	3301      	adds	r3, #1
 800de66:	3108      	adds	r1, #8
 800de68:	6038      	str	r0, [r7, #0]
 800de6a:	2c10      	cmp	r4, #16
 800de6c:	dc7a      	bgt.n	800df64 <_svfprintf_r+0x1120>
 800de6e:	607c      	str	r4, [r7, #4]
 800de70:	18a4      	adds	r4, r4, r2
 800de72:	000f      	movs	r7, r1
 800de74:	942e      	str	r4, [sp, #184]	; 0xb8
 800de76:	932d      	str	r3, [sp, #180]	; 0xb4
 800de78:	2b07      	cmp	r3, #7
 800de7a:	dd08      	ble.n	800de8e <_svfprintf_r+0x104a>
 800de7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de7e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de80:	aa2c      	add	r2, sp, #176	; 0xb0
 800de82:	f003 f8f5 	bl	8011070 <__ssprint_r>
 800de86:	2800      	cmp	r0, #0
 800de88:	d000      	beq.n	800de8c <_svfprintf_r+0x1048>
 800de8a:	e1ba      	b.n	800e202 <_svfprintf_r+0x13be>
 800de8c:	af2f      	add	r7, sp, #188	; 0xbc
 800de8e:	9b08      	ldr	r3, [sp, #32]
 800de90:	195d      	adds	r5, r3, r5
 800de92:	0573      	lsls	r3, r6, #21
 800de94:	d50b      	bpl.n	800deae <_svfprintf_r+0x106a>
 800de96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d176      	bne.n	800df8a <_svfprintf_r+0x1146>
 800de9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d176      	bne.n	800df90 <_svfprintf_r+0x114c>
 800dea2:	9b08      	ldr	r3, [sp, #32]
 800dea4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dea6:	189b      	adds	r3, r3, r2
 800dea8:	429d      	cmp	r5, r3
 800deaa:	d900      	bls.n	800deae <_svfprintf_r+0x106a>
 800deac:	001d      	movs	r5, r3
 800deae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800deb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800deb2:	4293      	cmp	r3, r2
 800deb4:	db01      	blt.n	800deba <_svfprintf_r+0x1076>
 800deb6:	07f3      	lsls	r3, r6, #31
 800deb8:	d516      	bpl.n	800dee8 <_svfprintf_r+0x10a4>
 800deba:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800debc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800debe:	603b      	str	r3, [r7, #0]
 800dec0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dec2:	607b      	str	r3, [r7, #4]
 800dec4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dec6:	3708      	adds	r7, #8
 800dec8:	189b      	adds	r3, r3, r2
 800deca:	932e      	str	r3, [sp, #184]	; 0xb8
 800decc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dece:	3301      	adds	r3, #1
 800ded0:	932d      	str	r3, [sp, #180]	; 0xb4
 800ded2:	2b07      	cmp	r3, #7
 800ded4:	dd08      	ble.n	800dee8 <_svfprintf_r+0x10a4>
 800ded6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ded8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800deda:	aa2c      	add	r2, sp, #176	; 0xb0
 800dedc:	f003 f8c8 	bl	8011070 <__ssprint_r>
 800dee0:	2800      	cmp	r0, #0
 800dee2:	d000      	beq.n	800dee6 <_svfprintf_r+0x10a2>
 800dee4:	e18d      	b.n	800e202 <_svfprintf_r+0x13be>
 800dee6:	af2f      	add	r7, sp, #188	; 0xbc
 800dee8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800deea:	9b08      	ldr	r3, [sp, #32]
 800deec:	4694      	mov	ip, r2
 800deee:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800def0:	4463      	add	r3, ip
 800def2:	1b5b      	subs	r3, r3, r5
 800def4:	1b14      	subs	r4, r2, r4
 800def6:	429c      	cmp	r4, r3
 800def8:	dd00      	ble.n	800defc <_svfprintf_r+0x10b8>
 800defa:	001c      	movs	r4, r3
 800defc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800defe:	2c00      	cmp	r4, #0
 800df00:	dd12      	ble.n	800df28 <_svfprintf_r+0x10e4>
 800df02:	18e3      	adds	r3, r4, r3
 800df04:	932e      	str	r3, [sp, #184]	; 0xb8
 800df06:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800df08:	603d      	str	r5, [r7, #0]
 800df0a:	3301      	adds	r3, #1
 800df0c:	607c      	str	r4, [r7, #4]
 800df0e:	932d      	str	r3, [sp, #180]	; 0xb4
 800df10:	3708      	adds	r7, #8
 800df12:	2b07      	cmp	r3, #7
 800df14:	dd08      	ble.n	800df28 <_svfprintf_r+0x10e4>
 800df16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df18:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df1a:	aa2c      	add	r2, sp, #176	; 0xb0
 800df1c:	f003 f8a8 	bl	8011070 <__ssprint_r>
 800df20:	2800      	cmp	r0, #0
 800df22:	d000      	beq.n	800df26 <_svfprintf_r+0x10e2>
 800df24:	e16d      	b.n	800e202 <_svfprintf_r+0x13be>
 800df26:	af2f      	add	r7, sp, #188	; 0xbc
 800df28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800df2c:	2510      	movs	r5, #16
 800df2e:	1ad3      	subs	r3, r2, r3
 800df30:	43e2      	mvns	r2, r4
 800df32:	17d2      	asrs	r2, r2, #31
 800df34:	4014      	ands	r4, r2
 800df36:	1b1c      	subs	r4, r3, r4
 800df38:	2c00      	cmp	r4, #0
 800df3a:	dc00      	bgt.n	800df3e <_svfprintf_r+0x10fa>
 800df3c:	e6b0      	b.n	800dca0 <_svfprintf_r+0xe5c>
 800df3e:	0039      	movs	r1, r7
 800df40:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800df42:	4807      	ldr	r0, [pc, #28]	; (800df60 <_svfprintf_r+0x111c>)
 800df44:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800df46:	3301      	adds	r3, #1
 800df48:	3108      	adds	r1, #8
 800df4a:	6038      	str	r0, [r7, #0]
 800df4c:	2c10      	cmp	r4, #16
 800df4e:	dd00      	ble.n	800df52 <_svfprintf_r+0x110e>
 800df50:	e096      	b.n	800e080 <_svfprintf_r+0x123c>
 800df52:	1912      	adds	r2, r2, r4
 800df54:	607c      	str	r4, [r7, #4]
 800df56:	922e      	str	r2, [sp, #184]	; 0xb8
 800df58:	e6dd      	b.n	800dd16 <_svfprintf_r+0xed2>
 800df5a:	46c0      	nop			; (mov r8, r8)
 800df5c:	08014296 	.word	0x08014296
 800df60:	080142a8 	.word	0x080142a8
 800df64:	2010      	movs	r0, #16
 800df66:	1812      	adds	r2, r2, r0
 800df68:	6078      	str	r0, [r7, #4]
 800df6a:	922e      	str	r2, [sp, #184]	; 0xb8
 800df6c:	932d      	str	r3, [sp, #180]	; 0xb4
 800df6e:	2b07      	cmp	r3, #7
 800df70:	dd08      	ble.n	800df84 <_svfprintf_r+0x1140>
 800df72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df74:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df76:	aa2c      	add	r2, sp, #176	; 0xb0
 800df78:	f003 f87a 	bl	8011070 <__ssprint_r>
 800df7c:	2800      	cmp	r0, #0
 800df7e:	d000      	beq.n	800df82 <_svfprintf_r+0x113e>
 800df80:	e13f      	b.n	800e202 <_svfprintf_r+0x13be>
 800df82:	a92f      	add	r1, sp, #188	; 0xbc
 800df84:	000f      	movs	r7, r1
 800df86:	3c10      	subs	r4, #16
 800df88:	e768      	b.n	800de5c <_svfprintf_r+0x1018>
 800df8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d05d      	beq.n	800e04c <_svfprintf_r+0x1208>
 800df90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df92:	3b01      	subs	r3, #1
 800df94:	9310      	str	r3, [sp, #64]	; 0x40
 800df96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800df98:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800df9a:	603b      	str	r3, [r7, #0]
 800df9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800df9e:	607b      	str	r3, [r7, #4]
 800dfa0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dfa2:	3708      	adds	r7, #8
 800dfa4:	189b      	adds	r3, r3, r2
 800dfa6:	932e      	str	r3, [sp, #184]	; 0xb8
 800dfa8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dfaa:	3301      	adds	r3, #1
 800dfac:	932d      	str	r3, [sp, #180]	; 0xb4
 800dfae:	2b07      	cmp	r3, #7
 800dfb0:	dd08      	ble.n	800dfc4 <_svfprintf_r+0x1180>
 800dfb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dfb4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dfb6:	aa2c      	add	r2, sp, #176	; 0xb0
 800dfb8:	f003 f85a 	bl	8011070 <__ssprint_r>
 800dfbc:	2800      	cmp	r0, #0
 800dfbe:	d000      	beq.n	800dfc2 <_svfprintf_r+0x117e>
 800dfc0:	e11f      	b.n	800e202 <_svfprintf_r+0x13be>
 800dfc2:	af2f      	add	r7, sp, #188	; 0xbc
 800dfc4:	9b08      	ldr	r3, [sp, #32]
 800dfc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dfc8:	189c      	adds	r4, r3, r2
 800dfca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dfcc:	1b64      	subs	r4, r4, r5
 800dfce:	781b      	ldrb	r3, [r3, #0]
 800dfd0:	429c      	cmp	r4, r3
 800dfd2:	dd00      	ble.n	800dfd6 <_svfprintf_r+0x1192>
 800dfd4:	001c      	movs	r4, r3
 800dfd6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dfd8:	2c00      	cmp	r4, #0
 800dfda:	dd12      	ble.n	800e002 <_svfprintf_r+0x11be>
 800dfdc:	18e3      	adds	r3, r4, r3
 800dfde:	932e      	str	r3, [sp, #184]	; 0xb8
 800dfe0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dfe2:	603d      	str	r5, [r7, #0]
 800dfe4:	3301      	adds	r3, #1
 800dfe6:	607c      	str	r4, [r7, #4]
 800dfe8:	932d      	str	r3, [sp, #180]	; 0xb4
 800dfea:	3708      	adds	r7, #8
 800dfec:	2b07      	cmp	r3, #7
 800dfee:	dd08      	ble.n	800e002 <_svfprintf_r+0x11be>
 800dff0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dff2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dff4:	aa2c      	add	r2, sp, #176	; 0xb0
 800dff6:	f003 f83b 	bl	8011070 <__ssprint_r>
 800dffa:	2800      	cmp	r0, #0
 800dffc:	d000      	beq.n	800e000 <_svfprintf_r+0x11bc>
 800dffe:	e100      	b.n	800e202 <_svfprintf_r+0x13be>
 800e000:	af2f      	add	r7, sp, #188	; 0xbc
 800e002:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e004:	781a      	ldrb	r2, [r3, #0]
 800e006:	43e3      	mvns	r3, r4
 800e008:	17db      	asrs	r3, r3, #31
 800e00a:	401c      	ands	r4, r3
 800e00c:	1b14      	subs	r4, r2, r4
 800e00e:	2c00      	cmp	r4, #0
 800e010:	dd18      	ble.n	800e044 <_svfprintf_r+0x1200>
 800e012:	0039      	movs	r1, r7
 800e014:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e016:	48aa      	ldr	r0, [pc, #680]	; (800e2c0 <_svfprintf_r+0x147c>)
 800e018:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e01a:	3301      	adds	r3, #1
 800e01c:	3108      	adds	r1, #8
 800e01e:	6038      	str	r0, [r7, #0]
 800e020:	2c10      	cmp	r4, #16
 800e022:	dc1a      	bgt.n	800e05a <_svfprintf_r+0x1216>
 800e024:	1912      	adds	r2, r2, r4
 800e026:	607c      	str	r4, [r7, #4]
 800e028:	922e      	str	r2, [sp, #184]	; 0xb8
 800e02a:	000f      	movs	r7, r1
 800e02c:	932d      	str	r3, [sp, #180]	; 0xb4
 800e02e:	2b07      	cmp	r3, #7
 800e030:	dd08      	ble.n	800e044 <_svfprintf_r+0x1200>
 800e032:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e034:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e036:	aa2c      	add	r2, sp, #176	; 0xb0
 800e038:	f003 f81a 	bl	8011070 <__ssprint_r>
 800e03c:	2800      	cmp	r0, #0
 800e03e:	d000      	beq.n	800e042 <_svfprintf_r+0x11fe>
 800e040:	e0df      	b.n	800e202 <_svfprintf_r+0x13be>
 800e042:	af2f      	add	r7, sp, #188	; 0xbc
 800e044:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e046:	781b      	ldrb	r3, [r3, #0]
 800e048:	18ed      	adds	r5, r5, r3
 800e04a:	e724      	b.n	800de96 <_svfprintf_r+0x1052>
 800e04c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e04e:	3b01      	subs	r3, #1
 800e050:	9312      	str	r3, [sp, #72]	; 0x48
 800e052:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e054:	3b01      	subs	r3, #1
 800e056:	9311      	str	r3, [sp, #68]	; 0x44
 800e058:	e79d      	b.n	800df96 <_svfprintf_r+0x1152>
 800e05a:	2010      	movs	r0, #16
 800e05c:	1812      	adds	r2, r2, r0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	922e      	str	r2, [sp, #184]	; 0xb8
 800e062:	932d      	str	r3, [sp, #180]	; 0xb4
 800e064:	2b07      	cmp	r3, #7
 800e066:	dd08      	ble.n	800e07a <_svfprintf_r+0x1236>
 800e068:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e06a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e06c:	aa2c      	add	r2, sp, #176	; 0xb0
 800e06e:	f002 ffff 	bl	8011070 <__ssprint_r>
 800e072:	2800      	cmp	r0, #0
 800e074:	d000      	beq.n	800e078 <_svfprintf_r+0x1234>
 800e076:	e0c4      	b.n	800e202 <_svfprintf_r+0x13be>
 800e078:	a92f      	add	r1, sp, #188	; 0xbc
 800e07a:	000f      	movs	r7, r1
 800e07c:	3c10      	subs	r4, #16
 800e07e:	e7c8      	b.n	800e012 <_svfprintf_r+0x11ce>
 800e080:	3210      	adds	r2, #16
 800e082:	607d      	str	r5, [r7, #4]
 800e084:	922e      	str	r2, [sp, #184]	; 0xb8
 800e086:	932d      	str	r3, [sp, #180]	; 0xb4
 800e088:	2b07      	cmp	r3, #7
 800e08a:	dd08      	ble.n	800e09e <_svfprintf_r+0x125a>
 800e08c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e08e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e090:	aa2c      	add	r2, sp, #176	; 0xb0
 800e092:	f002 ffed 	bl	8011070 <__ssprint_r>
 800e096:	2800      	cmp	r0, #0
 800e098:	d000      	beq.n	800e09c <_svfprintf_r+0x1258>
 800e09a:	e0b2      	b.n	800e202 <_svfprintf_r+0x13be>
 800e09c:	a92f      	add	r1, sp, #188	; 0xbc
 800e09e:	000f      	movs	r7, r1
 800e0a0:	3c10      	subs	r4, #16
 800e0a2:	e74c      	b.n	800df3e <_svfprintf_r+0x10fa>
 800e0a4:	003c      	movs	r4, r7
 800e0a6:	9919      	ldr	r1, [sp, #100]	; 0x64
 800e0a8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e0aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e0ac:	3101      	adds	r1, #1
 800e0ae:	3301      	adds	r3, #1
 800e0b0:	3408      	adds	r4, #8
 800e0b2:	2a01      	cmp	r2, #1
 800e0b4:	dc03      	bgt.n	800e0be <_svfprintf_r+0x127a>
 800e0b6:	2201      	movs	r2, #1
 800e0b8:	4216      	tst	r6, r2
 800e0ba:	d100      	bne.n	800e0be <_svfprintf_r+0x127a>
 800e0bc:	e07f      	b.n	800e1be <_svfprintf_r+0x137a>
 800e0be:	9a08      	ldr	r2, [sp, #32]
 800e0c0:	912e      	str	r1, [sp, #184]	; 0xb8
 800e0c2:	603a      	str	r2, [r7, #0]
 800e0c4:	2201      	movs	r2, #1
 800e0c6:	932d      	str	r3, [sp, #180]	; 0xb4
 800e0c8:	607a      	str	r2, [r7, #4]
 800e0ca:	2b07      	cmp	r3, #7
 800e0cc:	dd08      	ble.n	800e0e0 <_svfprintf_r+0x129c>
 800e0ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e0d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e0d2:	aa2c      	add	r2, sp, #176	; 0xb0
 800e0d4:	f002 ffcc 	bl	8011070 <__ssprint_r>
 800e0d8:	2800      	cmp	r0, #0
 800e0da:	d000      	beq.n	800e0de <_svfprintf_r+0x129a>
 800e0dc:	e091      	b.n	800e202 <_svfprintf_r+0x13be>
 800e0de:	ac2f      	add	r4, sp, #188	; 0xbc
 800e0e0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e0e2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e0e4:	6023      	str	r3, [r4, #0]
 800e0e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e0e8:	6063      	str	r3, [r4, #4]
 800e0ea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e0ec:	3408      	adds	r4, #8
 800e0ee:	189b      	adds	r3, r3, r2
 800e0f0:	932e      	str	r3, [sp, #184]	; 0xb8
 800e0f2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e0f4:	3301      	adds	r3, #1
 800e0f6:	932d      	str	r3, [sp, #180]	; 0xb4
 800e0f8:	2b07      	cmp	r3, #7
 800e0fa:	dd07      	ble.n	800e10c <_svfprintf_r+0x12c8>
 800e0fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e0fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e100:	aa2c      	add	r2, sp, #176	; 0xb0
 800e102:	f002 ffb5 	bl	8011070 <__ssprint_r>
 800e106:	2800      	cmp	r0, #0
 800e108:	d17b      	bne.n	800e202 <_svfprintf_r+0x13be>
 800e10a:	ac2f      	add	r4, sp, #188	; 0xbc
 800e10c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e10e:	2200      	movs	r2, #0
 800e110:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e112:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e114:	9309      	str	r3, [sp, #36]	; 0x24
 800e116:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e118:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800e11a:	1e5d      	subs	r5, r3, #1
 800e11c:	2300      	movs	r3, #0
 800e11e:	f7f2 f993 	bl	8000448 <__aeabi_dcmpeq>
 800e122:	2800      	cmp	r0, #0
 800e124:	d126      	bne.n	800e174 <_svfprintf_r+0x1330>
 800e126:	9b08      	ldr	r3, [sp, #32]
 800e128:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e12a:	3301      	adds	r3, #1
 800e12c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e12e:	6023      	str	r3, [r4, #0]
 800e130:	1e7b      	subs	r3, r7, #1
 800e132:	3201      	adds	r2, #1
 800e134:	185b      	adds	r3, r3, r1
 800e136:	6065      	str	r5, [r4, #4]
 800e138:	932e      	str	r3, [sp, #184]	; 0xb8
 800e13a:	922d      	str	r2, [sp, #180]	; 0xb4
 800e13c:	3408      	adds	r4, #8
 800e13e:	2a07      	cmp	r2, #7
 800e140:	dd07      	ble.n	800e152 <_svfprintf_r+0x130e>
 800e142:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e144:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e146:	aa2c      	add	r2, sp, #176	; 0xb0
 800e148:	f002 ff92 	bl	8011070 <__ssprint_r>
 800e14c:	2800      	cmp	r0, #0
 800e14e:	d158      	bne.n	800e202 <_svfprintf_r+0x13be>
 800e150:	ac2f      	add	r4, sp, #188	; 0xbc
 800e152:	ab28      	add	r3, sp, #160	; 0xa0
 800e154:	6023      	str	r3, [r4, #0]
 800e156:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e158:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e15a:	6063      	str	r3, [r4, #4]
 800e15c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e15e:	189b      	adds	r3, r3, r2
 800e160:	932e      	str	r3, [sp, #184]	; 0xb8
 800e162:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e164:	3301      	adds	r3, #1
 800e166:	932d      	str	r3, [sp, #180]	; 0xb4
 800e168:	2b07      	cmp	r3, #7
 800e16a:	dd00      	ble.n	800e16e <_svfprintf_r+0x132a>
 800e16c:	e638      	b.n	800dde0 <_svfprintf_r+0xf9c>
 800e16e:	3408      	adds	r4, #8
 800e170:	0027      	movs	r7, r4
 800e172:	e595      	b.n	800dca0 <_svfprintf_r+0xe5c>
 800e174:	2710      	movs	r7, #16
 800e176:	2d00      	cmp	r5, #0
 800e178:	ddeb      	ble.n	800e152 <_svfprintf_r+0x130e>
 800e17a:	0021      	movs	r1, r4
 800e17c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e17e:	4850      	ldr	r0, [pc, #320]	; (800e2c0 <_svfprintf_r+0x147c>)
 800e180:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e182:	3301      	adds	r3, #1
 800e184:	3108      	adds	r1, #8
 800e186:	6020      	str	r0, [r4, #0]
 800e188:	2d10      	cmp	r5, #16
 800e18a:	dc07      	bgt.n	800e19c <_svfprintf_r+0x1358>
 800e18c:	6065      	str	r5, [r4, #4]
 800e18e:	000c      	movs	r4, r1
 800e190:	18ad      	adds	r5, r5, r2
 800e192:	952e      	str	r5, [sp, #184]	; 0xb8
 800e194:	932d      	str	r3, [sp, #180]	; 0xb4
 800e196:	2b07      	cmp	r3, #7
 800e198:	dddb      	ble.n	800e152 <_svfprintf_r+0x130e>
 800e19a:	e7d2      	b.n	800e142 <_svfprintf_r+0x12fe>
 800e19c:	3210      	adds	r2, #16
 800e19e:	6067      	str	r7, [r4, #4]
 800e1a0:	922e      	str	r2, [sp, #184]	; 0xb8
 800e1a2:	932d      	str	r3, [sp, #180]	; 0xb4
 800e1a4:	2b07      	cmp	r3, #7
 800e1a6:	dd07      	ble.n	800e1b8 <_svfprintf_r+0x1374>
 800e1a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e1aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e1ac:	aa2c      	add	r2, sp, #176	; 0xb0
 800e1ae:	f002 ff5f 	bl	8011070 <__ssprint_r>
 800e1b2:	2800      	cmp	r0, #0
 800e1b4:	d125      	bne.n	800e202 <_svfprintf_r+0x13be>
 800e1b6:	a92f      	add	r1, sp, #188	; 0xbc
 800e1b8:	000c      	movs	r4, r1
 800e1ba:	3d10      	subs	r5, #16
 800e1bc:	e7dd      	b.n	800e17a <_svfprintf_r+0x1336>
 800e1be:	9808      	ldr	r0, [sp, #32]
 800e1c0:	912e      	str	r1, [sp, #184]	; 0xb8
 800e1c2:	c705      	stmia	r7!, {r0, r2}
 800e1c4:	932d      	str	r3, [sp, #180]	; 0xb4
 800e1c6:	e7e6      	b.n	800e196 <_svfprintf_r+0x1352>
 800e1c8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e1ca:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e1cc:	2510      	movs	r5, #16
 800e1ce:	1a9c      	subs	r4, r3, r2
 800e1d0:	2c00      	cmp	r4, #0
 800e1d2:	dc00      	bgt.n	800e1d6 <_svfprintf_r+0x1392>
 800e1d4:	e567      	b.n	800dca6 <_svfprintf_r+0xe62>
 800e1d6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e1d8:	493a      	ldr	r1, [pc, #232]	; (800e2c4 <_svfprintf_r+0x1480>)
 800e1da:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e1dc:	3301      	adds	r3, #1
 800e1de:	6039      	str	r1, [r7, #0]
 800e1e0:	2c10      	cmp	r4, #16
 800e1e2:	dc19      	bgt.n	800e218 <_svfprintf_r+0x13d4>
 800e1e4:	607c      	str	r4, [r7, #4]
 800e1e6:	18a4      	adds	r4, r4, r2
 800e1e8:	942e      	str	r4, [sp, #184]	; 0xb8
 800e1ea:	932d      	str	r3, [sp, #180]	; 0xb4
 800e1ec:	2b07      	cmp	r3, #7
 800e1ee:	dc00      	bgt.n	800e1f2 <_svfprintf_r+0x13ae>
 800e1f0:	e559      	b.n	800dca6 <_svfprintf_r+0xe62>
 800e1f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e1f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e1f6:	aa2c      	add	r2, sp, #176	; 0xb0
 800e1f8:	f002 ff3a 	bl	8011070 <__ssprint_r>
 800e1fc:	2800      	cmp	r0, #0
 800e1fe:	d100      	bne.n	800e202 <_svfprintf_r+0x13be>
 800e200:	e551      	b.n	800dca6 <_svfprintf_r+0xe62>
 800e202:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e204:	2b00      	cmp	r3, #0
 800e206:	d101      	bne.n	800e20c <_svfprintf_r+0x13c8>
 800e208:	f7ff f845 	bl	800d296 <_svfprintf_r+0x452>
 800e20c:	0019      	movs	r1, r3
 800e20e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e210:	f7fd fd80 	bl	800bd14 <_free_r>
 800e214:	f7ff f83f 	bl	800d296 <_svfprintf_r+0x452>
 800e218:	3210      	adds	r2, #16
 800e21a:	607d      	str	r5, [r7, #4]
 800e21c:	922e      	str	r2, [sp, #184]	; 0xb8
 800e21e:	932d      	str	r3, [sp, #180]	; 0xb4
 800e220:	3708      	adds	r7, #8
 800e222:	2b07      	cmp	r3, #7
 800e224:	dd07      	ble.n	800e236 <_svfprintf_r+0x13f2>
 800e226:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e228:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e22a:	aa2c      	add	r2, sp, #176	; 0xb0
 800e22c:	f002 ff20 	bl	8011070 <__ssprint_r>
 800e230:	2800      	cmp	r0, #0
 800e232:	d1e6      	bne.n	800e202 <_svfprintf_r+0x13be>
 800e234:	af2f      	add	r7, sp, #188	; 0xbc
 800e236:	3c10      	subs	r4, #16
 800e238:	e7cd      	b.n	800e1d6 <_svfprintf_r+0x1392>
 800e23a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e23c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e23e:	f7fd fd69 	bl	800bd14 <_free_r>
 800e242:	e549      	b.n	800dcd8 <_svfprintf_r+0xe94>
 800e244:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e246:	2b00      	cmp	r3, #0
 800e248:	d101      	bne.n	800e24e <_svfprintf_r+0x140a>
 800e24a:	f7ff f824 	bl	800d296 <_svfprintf_r+0x452>
 800e24e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e250:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e252:	aa2c      	add	r2, sp, #176	; 0xb0
 800e254:	f002 ff0c 	bl	8011070 <__ssprint_r>
 800e258:	f7ff f81d 	bl	800d296 <_svfprintf_r+0x452>
 800e25c:	0034      	movs	r4, r6
 800e25e:	2a00      	cmp	r2, #0
 800e260:	d101      	bne.n	800e266 <_svfprintf_r+0x1422>
 800e262:	f7fe ff8c 	bl	800d17e <_svfprintf_r+0x33a>
 800e266:	2b01      	cmp	r3, #1
 800e268:	d101      	bne.n	800e26e <_svfprintf_r+0x142a>
 800e26a:	f7ff fc01 	bl	800da70 <_svfprintf_r+0xc2c>
 800e26e:	2b02      	cmp	r3, #2
 800e270:	d100      	bne.n	800e274 <_svfprintf_r+0x1430>
 800e272:	e459      	b.n	800db28 <_svfprintf_r+0xce4>
 800e274:	2507      	movs	r5, #7
 800e276:	ab58      	add	r3, sp, #352	; 0x160
 800e278:	9308      	str	r3, [sp, #32]
 800e27a:	9a08      	ldr	r2, [sp, #32]
 800e27c:	0013      	movs	r3, r2
 800e27e:	3b01      	subs	r3, #1
 800e280:	9308      	str	r3, [sp, #32]
 800e282:	9b06      	ldr	r3, [sp, #24]
 800e284:	9908      	ldr	r1, [sp, #32]
 800e286:	402b      	ands	r3, r5
 800e288:	3330      	adds	r3, #48	; 0x30
 800e28a:	700b      	strb	r3, [r1, #0]
 800e28c:	9907      	ldr	r1, [sp, #28]
 800e28e:	074e      	lsls	r6, r1, #29
 800e290:	9906      	ldr	r1, [sp, #24]
 800e292:	08c8      	lsrs	r0, r1, #3
 800e294:	9907      	ldr	r1, [sp, #28]
 800e296:	4306      	orrs	r6, r0
 800e298:	08c9      	lsrs	r1, r1, #3
 800e29a:	9107      	str	r1, [sp, #28]
 800e29c:	0031      	movs	r1, r6
 800e29e:	9807      	ldr	r0, [sp, #28]
 800e2a0:	9606      	str	r6, [sp, #24]
 800e2a2:	4301      	orrs	r1, r0
 800e2a4:	d1e9      	bne.n	800e27a <_svfprintf_r+0x1436>
 800e2a6:	07e1      	lsls	r1, r4, #31
 800e2a8:	d400      	bmi.n	800e2ac <_svfprintf_r+0x1468>
 800e2aa:	e42a      	b.n	800db02 <_svfprintf_r+0xcbe>
 800e2ac:	2b30      	cmp	r3, #48	; 0x30
 800e2ae:	d100      	bne.n	800e2b2 <_svfprintf_r+0x146e>
 800e2b0:	e427      	b.n	800db02 <_svfprintf_r+0xcbe>
 800e2b2:	2130      	movs	r1, #48	; 0x30
 800e2b4:	9b08      	ldr	r3, [sp, #32]
 800e2b6:	3b01      	subs	r3, #1
 800e2b8:	7019      	strb	r1, [r3, #0]
 800e2ba:	1e93      	subs	r3, r2, #2
 800e2bc:	9308      	str	r3, [sp, #32]
 800e2be:	e420      	b.n	800db02 <_svfprintf_r+0xcbe>
 800e2c0:	080142a8 	.word	0x080142a8
 800e2c4:	08014298 	.word	0x08014298

0800e2c8 <__ssvfscanf_r>:
 800e2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2ca:	4ca7      	ldr	r4, [pc, #668]	; (800e568 <__ssvfscanf_r+0x2a0>)
 800e2cc:	44a5      	add	sp, r4
 800e2ce:	af02      	add	r7, sp, #8
 800e2d0:	633b      	str	r3, [r7, #48]	; 0x30
 800e2d2:	000b      	movs	r3, r1
 800e2d4:	6378      	str	r0, [r7, #52]	; 0x34
 800e2d6:	6479      	str	r1, [r7, #68]	; 0x44
 800e2d8:	61ba      	str	r2, [r7, #24]
 800e2da:	220c      	movs	r2, #12
 800e2dc:	5e9a      	ldrsh	r2, [r3, r2]
 800e2de:	2380      	movs	r3, #128	; 0x80
 800e2e0:	019b      	lsls	r3, r3, #6
 800e2e2:	421a      	tst	r2, r3
 800e2e4:	d105      	bne.n	800e2f2 <__ssvfscanf_r+0x2a>
 800e2e6:	4313      	orrs	r3, r2
 800e2e8:	818b      	strh	r3, [r1, #12]
 800e2ea:	4aa0      	ldr	r2, [pc, #640]	; (800e56c <__ssvfscanf_r+0x2a4>)
 800e2ec:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800e2ee:	4013      	ands	r3, r2
 800e2f0:	664b      	str	r3, [r1, #100]	; 0x64
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	617b      	str	r3, [r7, #20]
 800e2f6:	643b      	str	r3, [r7, #64]	; 0x40
 800e2f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800e2fa:	627b      	str	r3, [r7, #36]	; 0x24
 800e2fc:	63bb      	str	r3, [r7, #56]	; 0x38
 800e2fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e300:	69bb      	ldr	r3, [r7, #24]
 800e302:	69ba      	ldr	r2, [r7, #24]
 800e304:	781b      	ldrb	r3, [r3, #0]
 800e306:	3201      	adds	r2, #1
 800e308:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e30a:	61ba      	str	r2, [r7, #24]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d100      	bne.n	800e312 <__ssvfscanf_r+0x4a>
 800e310:	e0d7      	b.n	800e4c2 <__ssvfscanf_r+0x1fa>
 800e312:	2608      	movs	r6, #8
 800e314:	2108      	movs	r1, #8
 800e316:	4a96      	ldr	r2, [pc, #600]	; (800e570 <__ssvfscanf_r+0x2a8>)
 800e318:	5cd2      	ldrb	r2, [r2, r3]
 800e31a:	4016      	ands	r6, r2
 800e31c:	420a      	tst	r2, r1
 800e31e:	d01d      	beq.n	800e35c <__ssvfscanf_r+0x94>
 800e320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e322:	685b      	ldr	r3, [r3, #4]
 800e324:	2b00      	cmp	r3, #0
 800e326:	dd12      	ble.n	800e34e <__ssvfscanf_r+0x86>
 800e328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e32a:	4991      	ldr	r1, [pc, #580]	; (800e570 <__ssvfscanf_r+0x2a8>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	781a      	ldrb	r2, [r3, #0]
 800e330:	5c8a      	ldrb	r2, [r1, r2]
 800e332:	2108      	movs	r1, #8
 800e334:	420a      	tst	r2, r1
 800e336:	d0e3      	beq.n	800e300 <__ssvfscanf_r+0x38>
 800e338:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e33a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e33c:	3201      	adds	r2, #1
 800e33e:	63ba      	str	r2, [r7, #56]	; 0x38
 800e340:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e342:	3301      	adds	r3, #1
 800e344:	6852      	ldr	r2, [r2, #4]
 800e346:	600b      	str	r3, [r1, #0]
 800e348:	3a01      	subs	r2, #1
 800e34a:	604a      	str	r2, [r1, #4]
 800e34c:	e7e8      	b.n	800e320 <__ssvfscanf_r+0x58>
 800e34e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e350:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e352:	f002 ff4d 	bl	80111f0 <__ssrefill_r>
 800e356:	2800      	cmp	r0, #0
 800e358:	d0e6      	beq.n	800e328 <__ssvfscanf_r+0x60>
 800e35a:	e7d1      	b.n	800e300 <__ssvfscanf_r+0x38>
 800e35c:	2b25      	cmp	r3, #37	; 0x25
 800e35e:	d165      	bne.n	800e42c <__ssvfscanf_r+0x164>
 800e360:	250a      	movs	r5, #10
 800e362:	2480      	movs	r4, #128	; 0x80
 800e364:	69ba      	ldr	r2, [r7, #24]
 800e366:	63fe      	str	r6, [r7, #60]	; 0x3c
 800e368:	3b16      	subs	r3, #22
 800e36a:	69b9      	ldr	r1, [r7, #24]
 800e36c:	3101      	adds	r1, #1
 800e36e:	61b9      	str	r1, [r7, #24]
 800e370:	7811      	ldrb	r1, [r2, #0]
 800e372:	0008      	movs	r0, r1
 800e374:	3825      	subs	r0, #37	; 0x25
 800e376:	2855      	cmp	r0, #85	; 0x55
 800e378:	d900      	bls.n	800e37c <__ssvfscanf_r+0xb4>
 800e37a:	e170      	b.n	800e65e <__ssvfscanf_r+0x396>
 800e37c:	f7f1 fed4 	bl	8000128 <__gnu_thumb1_case_uhi>
 800e380:	016f0056 	.word	0x016f0056
 800e384:	016f016f 	.word	0x016f016f
 800e388:	0081016f 	.word	0x0081016f
 800e38c:	016f016f 	.word	0x016f016f
 800e390:	016f016f 	.word	0x016f016f
 800e394:	00b8016f 	.word	0x00b8016f
 800e398:	00b800b8 	.word	0x00b800b8
 800e39c:	00b800b8 	.word	0x00b800b8
 800e3a0:	00b800b8 	.word	0x00b800b8
 800e3a4:	00b800b8 	.word	0x00b800b8
 800e3a8:	016f00b8 	.word	0x016f00b8
 800e3ac:	016f016f 	.word	0x016f016f
 800e3b0:	016f016f 	.word	0x016f016f
 800e3b4:	016f016f 	.word	0x016f016f
 800e3b8:	016f00d8 	.word	0x016f00d8
 800e3bc:	00c1010a 	.word	0x00c1010a
 800e3c0:	00d800d8 	.word	0x00d800d8
 800e3c4:	016f00d8 	.word	0x016f00d8
 800e3c8:	016f016f 	.word	0x016f016f
 800e3cc:	009f016f 	.word	0x009f016f
 800e3d0:	016f016f 	.word	0x016f016f
 800e3d4:	016f00c9 	.word	0x016f00c9
 800e3d8:	016f016f 	.word	0x016f016f
 800e3dc:	016f00f0 	.word	0x016f00f0
 800e3e0:	016f016f 	.word	0x016f016f
 800e3e4:	00d1016f 	.word	0x00d1016f
 800e3e8:	016f016f 	.word	0x016f016f
 800e3ec:	016f00fe 	.word	0x016f00fe
 800e3f0:	016f016f 	.word	0x016f016f
 800e3f4:	016f016f 	.word	0x016f016f
 800e3f8:	016f00d8 	.word	0x016f00d8
 800e3fc:	00c3010c 	.word	0x00c3010c
 800e400:	00d800d8 	.word	0x00d800d8
 800e404:	009400d8 	.word	0x009400d8
 800e408:	009f012f 	.word	0x009f012f
 800e40c:	0088016f 	.word	0x0088016f
 800e410:	011200a9 	.word	0x011200a9
 800e414:	011000cb 	.word	0x011000cb
 800e418:	016f016f 	.word	0x016f016f
 800e41c:	00a600f2 	.word	0x00a600f2
 800e420:	016f00cf 	.word	0x016f00cf
 800e424:	00d1016f 	.word	0x00d1016f
 800e428:	00a6016f 	.word	0x00a6016f
 800e42c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e42e:	685b      	ldr	r3, [r3, #4]
 800e430:	2b00      	cmp	r3, #0
 800e432:	dd12      	ble.n	800e45a <__ssvfscanf_r+0x192>
 800e434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e436:	69ba      	ldr	r2, [r7, #24]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	3a01      	subs	r2, #1
 800e43c:	7819      	ldrb	r1, [r3, #0]
 800e43e:	7812      	ldrb	r2, [r2, #0]
 800e440:	4291      	cmp	r1, r2
 800e442:	d13e      	bne.n	800e4c2 <__ssvfscanf_r+0x1fa>
 800e444:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e446:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e448:	6852      	ldr	r2, [r2, #4]
 800e44a:	3301      	adds	r3, #1
 800e44c:	600b      	str	r3, [r1, #0]
 800e44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e450:	3a01      	subs	r2, #1
 800e452:	604a      	str	r2, [r1, #4]
 800e454:	3301      	adds	r3, #1
 800e456:	63bb      	str	r3, [r7, #56]	; 0x38
 800e458:	e752      	b.n	800e300 <__ssvfscanf_r+0x38>
 800e45a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e45c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e45e:	f002 fec7 	bl	80111f0 <__ssrefill_r>
 800e462:	2800      	cmp	r0, #0
 800e464:	d0e6      	beq.n	800e434 <__ssvfscanf_r+0x16c>
 800e466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d003      	beq.n	800e474 <__ssvfscanf_r+0x1ac>
 800e46c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e46e:	899b      	ldrh	r3, [r3, #12]
 800e470:	065b      	lsls	r3, r3, #25
 800e472:	d526      	bpl.n	800e4c2 <__ssvfscanf_r+0x1fa>
 800e474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e476:	2b00      	cmp	r3, #0
 800e478:	d000      	beq.n	800e47c <__ssvfscanf_r+0x1b4>
 800e47a:	e0f6      	b.n	800e66a <__ssvfscanf_r+0x3a2>
 800e47c:	3b01      	subs	r3, #1
 800e47e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e480:	e104      	b.n	800e68c <__ssvfscanf_r+0x3c4>
 800e482:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e484:	4332      	orrs	r2, r6
 800e486:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e488:	d11b      	bne.n	800e4c2 <__ssvfscanf_r+0x1fa>
 800e48a:	2610      	movs	r6, #16
 800e48c:	69ba      	ldr	r2, [r7, #24]
 800e48e:	e76c      	b.n	800e36a <__ssvfscanf_r+0xa2>
 800e490:	421e      	tst	r6, r3
 800e492:	d116      	bne.n	800e4c2 <__ssvfscanf_r+0x1fa>
 800e494:	7851      	ldrb	r1, [r2, #1]
 800e496:	296c      	cmp	r1, #108	; 0x6c
 800e498:	d103      	bne.n	800e4a2 <__ssvfscanf_r+0x1da>
 800e49a:	3202      	adds	r2, #2
 800e49c:	61ba      	str	r2, [r7, #24]
 800e49e:	2202      	movs	r2, #2
 800e4a0:	e000      	b.n	800e4a4 <__ssvfscanf_r+0x1dc>
 800e4a2:	2201      	movs	r2, #1
 800e4a4:	4316      	orrs	r6, r2
 800e4a6:	e7f1      	b.n	800e48c <__ssvfscanf_r+0x1c4>
 800e4a8:	421e      	tst	r6, r3
 800e4aa:	d10a      	bne.n	800e4c2 <__ssvfscanf_r+0x1fa>
 800e4ac:	7851      	ldrb	r1, [r2, #1]
 800e4ae:	2968      	cmp	r1, #104	; 0x68
 800e4b0:	d103      	bne.n	800e4ba <__ssvfscanf_r+0x1f2>
 800e4b2:	3202      	adds	r2, #2
 800e4b4:	61ba      	str	r2, [r7, #24]
 800e4b6:	2208      	movs	r2, #8
 800e4b8:	e7f4      	b.n	800e4a4 <__ssvfscanf_r+0x1dc>
 800e4ba:	2204      	movs	r2, #4
 800e4bc:	e7f2      	b.n	800e4a4 <__ssvfscanf_r+0x1dc>
 800e4be:	421e      	tst	r6, r3
 800e4c0:	d0ed      	beq.n	800e49e <__ssvfscanf_r+0x1d6>
 800e4c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d000      	beq.n	800e4ca <__ssvfscanf_r+0x202>
 800e4c8:	e0da      	b.n	800e680 <__ssvfscanf_r+0x3b8>
 800e4ca:	e0df      	b.n	800e68c <__ssvfscanf_r+0x3c4>
 800e4cc:	421e      	tst	r6, r3
 800e4ce:	d0dd      	beq.n	800e48c <__ssvfscanf_r+0x1c4>
 800e4d0:	e7f7      	b.n	800e4c2 <__ssvfscanf_r+0x1fa>
 800e4d2:	228f      	movs	r2, #143	; 0x8f
 800e4d4:	218f      	movs	r1, #143	; 0x8f
 800e4d6:	4032      	ands	r2, r6
 800e4d8:	420e      	tst	r6, r1
 800e4da:	d1f2      	bne.n	800e4c2 <__ssvfscanf_r+0x1fa>
 800e4dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e4de:	2900      	cmp	r1, #0
 800e4e0:	d104      	bne.n	800e4ec <__ssvfscanf_r+0x224>
 800e4e2:	b082      	sub	sp, #8
 800e4e4:	a902      	add	r1, sp, #8
 800e4e6:	6439      	str	r1, [r7, #64]	; 0x40
 800e4e8:	600a      	str	r2, [r1, #0]
 800e4ea:	604a      	str	r2, [r1, #4]
 800e4ec:	4326      	orrs	r6, r4
 800e4ee:	e7cd      	b.n	800e48c <__ssvfscanf_r+0x1c4>
 800e4f0:	228f      	movs	r2, #143	; 0x8f
 800e4f2:	4216      	tst	r6, r2
 800e4f4:	d1e5      	bne.n	800e4c2 <__ssvfscanf_r+0x1fa>
 800e4f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e4f8:	436a      	muls	r2, r5
 800e4fa:	3a30      	subs	r2, #48	; 0x30
 800e4fc:	188a      	adds	r2, r1, r2
 800e4fe:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e500:	e7c4      	b.n	800e48c <__ssvfscanf_r+0x1c4>
 800e502:	2301      	movs	r3, #1
 800e504:	431e      	orrs	r6, r3
 800e506:	4b1b      	ldr	r3, [pc, #108]	; (800e574 <__ssvfscanf_r+0x2ac>)
 800e508:	617b      	str	r3, [r7, #20]
 800e50a:	230a      	movs	r3, #10
 800e50c:	2403      	movs	r4, #3
 800e50e:	627b      	str	r3, [r7, #36]	; 0x24
 800e510:	e00f      	b.n	800e532 <__ssvfscanf_r+0x26a>
 800e512:	2301      	movs	r3, #1
 800e514:	431e      	orrs	r6, r3
 800e516:	4b18      	ldr	r3, [pc, #96]	; (800e578 <__ssvfscanf_r+0x2b0>)
 800e518:	617b      	str	r3, [r7, #20]
 800e51a:	2308      	movs	r3, #8
 800e51c:	e7f6      	b.n	800e50c <__ssvfscanf_r+0x244>
 800e51e:	4b16      	ldr	r3, [pc, #88]	; (800e578 <__ssvfscanf_r+0x2b0>)
 800e520:	e7f2      	b.n	800e508 <__ssvfscanf_r+0x240>
 800e522:	2380      	movs	r3, #128	; 0x80
 800e524:	009b      	lsls	r3, r3, #2
 800e526:	431e      	orrs	r6, r3
 800e528:	4b13      	ldr	r3, [pc, #76]	; (800e578 <__ssvfscanf_r+0x2b0>)
 800e52a:	617b      	str	r3, [r7, #20]
 800e52c:	2310      	movs	r3, #16
 800e52e:	e7ed      	b.n	800e50c <__ssvfscanf_r+0x244>
 800e530:	2404      	movs	r4, #4
 800e532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e534:	685b      	ldr	r3, [r3, #4]
 800e536:	2b00      	cmp	r3, #0
 800e538:	dd55      	ble.n	800e5e6 <__ssvfscanf_r+0x31e>
 800e53a:	0673      	lsls	r3, r6, #25
 800e53c:	d407      	bmi.n	800e54e <__ssvfscanf_r+0x286>
 800e53e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e540:	490b      	ldr	r1, [pc, #44]	; (800e570 <__ssvfscanf_r+0x2a8>)
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	781a      	ldrb	r2, [r3, #0]
 800e546:	5c8a      	ldrb	r2, [r1, r2]
 800e548:	2108      	movs	r1, #8
 800e54a:	420a      	tst	r2, r1
 800e54c:	d152      	bne.n	800e5f4 <__ssvfscanf_r+0x32c>
 800e54e:	1e60      	subs	r0, r4, #1
 800e550:	2803      	cmp	r0, #3
 800e552:	d863      	bhi.n	800e61c <__ssvfscanf_r+0x354>
 800e554:	f7f1 fde8 	bl	8000128 <__gnu_thumb1_case_uhi>
 800e558:	03bd01da 	.word	0x03bd01da
 800e55c:	068a0579 	.word	0x068a0579
 800e560:	2301      	movs	r3, #1
 800e562:	431e      	orrs	r6, r3
 800e564:	2402      	movs	r4, #2
 800e566:	e7e4      	b.n	800e532 <__ssvfscanf_r+0x26a>
 800e568:	fffffd34 	.word	0xfffffd34
 800e56c:	ffffdfff 	.word	0xffffdfff
 800e570:	08013f91 	.word	0x08013f91
 800e574:	0800b719 	.word	0x0800b719
 800e578:	08010d21 	.word	0x08010d21
 800e57c:	2248      	movs	r2, #72	; 0x48
 800e57e:	2318      	movs	r3, #24
 800e580:	189b      	adds	r3, r3, r2
 800e582:	19d8      	adds	r0, r3, r7
 800e584:	69b9      	ldr	r1, [r7, #24]
 800e586:	f001 f9d7 	bl	800f938 <__sccl>
 800e58a:	2340      	movs	r3, #64	; 0x40
 800e58c:	2401      	movs	r4, #1
 800e58e:	61b8      	str	r0, [r7, #24]
 800e590:	431e      	orrs	r6, r3
 800e592:	e7ce      	b.n	800e532 <__ssvfscanf_r+0x26a>
 800e594:	2301      	movs	r3, #1
 800e596:	431e      	orrs	r6, r3
 800e598:	2340      	movs	r3, #64	; 0x40
 800e59a:	2400      	movs	r4, #0
 800e59c:	431e      	orrs	r6, r3
 800e59e:	e7c8      	b.n	800e532 <__ssvfscanf_r+0x26a>
 800e5a0:	2388      	movs	r3, #136	; 0x88
 800e5a2:	e7bf      	b.n	800e524 <__ssvfscanf_r+0x25c>
 800e5a4:	06f3      	lsls	r3, r6, #27
 800e5a6:	d500      	bpl.n	800e5aa <__ssvfscanf_r+0x2e2>
 800e5a8:	e6aa      	b.n	800e300 <__ssvfscanf_r+0x38>
 800e5aa:	2108      	movs	r1, #8
 800e5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ae:	cb04      	ldmia	r3!, {r2}
 800e5b0:	420e      	tst	r6, r1
 800e5b2:	d003      	beq.n	800e5bc <__ssvfscanf_r+0x2f4>
 800e5b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e5b6:	7011      	strb	r1, [r2, #0]
 800e5b8:	633b      	str	r3, [r7, #48]	; 0x30
 800e5ba:	e6a1      	b.n	800e300 <__ssvfscanf_r+0x38>
 800e5bc:	0771      	lsls	r1, r6, #29
 800e5be:	d502      	bpl.n	800e5c6 <__ssvfscanf_r+0x2fe>
 800e5c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e5c2:	8011      	strh	r1, [r2, #0]
 800e5c4:	e7f8      	b.n	800e5b8 <__ssvfscanf_r+0x2f0>
 800e5c6:	07f1      	lsls	r1, r6, #31
 800e5c8:	d502      	bpl.n	800e5d0 <__ssvfscanf_r+0x308>
 800e5ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e5cc:	6011      	str	r1, [r2, #0]
 800e5ce:	e7f3      	b.n	800e5b8 <__ssvfscanf_r+0x2f0>
 800e5d0:	07b6      	lsls	r6, r6, #30
 800e5d2:	d5fa      	bpl.n	800e5ca <__ssvfscanf_r+0x302>
 800e5d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e5d6:	6011      	str	r1, [r2, #0]
 800e5d8:	17c9      	asrs	r1, r1, #31
 800e5da:	6051      	str	r1, [r2, #4]
 800e5dc:	e7ec      	b.n	800e5b8 <__ssvfscanf_r+0x2f0>
 800e5de:	4ba2      	ldr	r3, [pc, #648]	; (800e868 <__ssvfscanf_r+0x5a0>)
 800e5e0:	617b      	str	r3, [r7, #20]
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	e792      	b.n	800e50c <__ssvfscanf_r+0x244>
 800e5e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e5e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e5ea:	f002 fe01 	bl	80111f0 <__ssrefill_r>
 800e5ee:	2800      	cmp	r0, #0
 800e5f0:	d0a3      	beq.n	800e53a <__ssvfscanf_r+0x272>
 800e5f2:	e738      	b.n	800e466 <__ssvfscanf_r+0x19e>
 800e5f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e5f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e5f8:	3201      	adds	r2, #1
 800e5fa:	63ba      	str	r2, [r7, #56]	; 0x38
 800e5fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e5fe:	6852      	ldr	r2, [r2, #4]
 800e600:	3a01      	subs	r2, #1
 800e602:	604a      	str	r2, [r1, #4]
 800e604:	2a00      	cmp	r2, #0
 800e606:	dd02      	ble.n	800e60e <__ssvfscanf_r+0x346>
 800e608:	3301      	adds	r3, #1
 800e60a:	600b      	str	r3, [r1, #0]
 800e60c:	e797      	b.n	800e53e <__ssvfscanf_r+0x276>
 800e60e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e610:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e612:	f002 fded 	bl	80111f0 <__ssrefill_r>
 800e616:	2800      	cmp	r0, #0
 800e618:	d091      	beq.n	800e53e <__ssvfscanf_r+0x276>
 800e61a:	e724      	b.n	800e466 <__ssvfscanf_r+0x19e>
 800e61c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e61e:	2301      	movs	r3, #1
 800e620:	2a00      	cmp	r2, #0
 800e622:	d100      	bne.n	800e626 <__ssvfscanf_r+0x35e>
 800e624:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e626:	2210      	movs	r2, #16
 800e628:	0034      	movs	r4, r6
 800e62a:	4032      	ands	r2, r6
 800e62c:	623a      	str	r2, [r7, #32]
 800e62e:	401c      	ands	r4, r3
 800e630:	421e      	tst	r6, r3
 800e632:	d100      	bne.n	800e636 <__ssvfscanf_r+0x36e>
 800e634:	e0f3      	b.n	800e81e <__ssvfscanf_r+0x556>
 800e636:	2a00      	cmp	r2, #0
 800e638:	d000      	beq.n	800e63c <__ssvfscanf_r+0x374>
 800e63a:	e0b6      	b.n	800e7aa <__ssvfscanf_r+0x4e2>
 800e63c:	2080      	movs	r0, #128	; 0x80
 800e63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e640:	cb10      	ldmia	r3!, {r4}
 800e642:	613b      	str	r3, [r7, #16]
 800e644:	4206      	tst	r6, r0
 800e646:	d100      	bne.n	800e64a <__ssvfscanf_r+0x382>
 800e648:	e0b7      	b.n	800e7ba <__ssvfscanf_r+0x4f2>
 800e64a:	2c00      	cmp	r4, #0
 800e64c:	d007      	beq.n	800e65e <__ssvfscanf_r+0x396>
 800e64e:	f7fb ff6d 	bl	800a52c <malloc>
 800e652:	6338      	str	r0, [r7, #48]	; 0x30
 800e654:	2800      	cmp	r0, #0
 800e656:	d11f      	bne.n	800e698 <__ssvfscanf_r+0x3d0>
 800e658:	2301      	movs	r3, #1
 800e65a:	425b      	negs	r3, r3
 800e65c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e65e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e660:	2b00      	cmp	r3, #0
 800e662:	d013      	beq.n	800e68c <__ssvfscanf_r+0x3c4>
 800e664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e666:	3301      	adds	r3, #1
 800e668:	d10a      	bne.n	800e680 <__ssvfscanf_r+0x3b8>
 800e66a:	2400      	movs	r4, #0
 800e66c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e66e:	681d      	ldr	r5, [r3, #0]
 800e670:	88db      	ldrh	r3, [r3, #6]
 800e672:	42a3      	cmp	r3, r4
 800e674:	dd01      	ble.n	800e67a <__ssvfscanf_r+0x3b2>
 800e676:	f001 f82a 	bl	800f6ce <__ssvfscanf_r+0x1406>
 800e67a:	2301      	movs	r3, #1
 800e67c:	425b      	negs	r3, r3
 800e67e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e682:	6818      	ldr	r0, [r3, #0]
 800e684:	2800      	cmp	r0, #0
 800e686:	d001      	beq.n	800e68c <__ssvfscanf_r+0x3c4>
 800e688:	f7fb ff5a 	bl	800a540 <free>
 800e68c:	46bd      	mov	sp, r7
 800e68e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e690:	23b1      	movs	r3, #177	; 0xb1
 800e692:	009b      	lsls	r3, r3, #2
 800e694:	449d      	add	sp, r3
 800e696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e69a:	6023      	str	r3, [r4, #0]
 800e69c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e69e:	88de      	ldrh	r6, [r3, #6]
 800e6a0:	889d      	ldrh	r5, [r3, #4]
 800e6a2:	42ae      	cmp	r6, r5
 800e6a4:	d30e      	bcc.n	800e6c4 <__ssvfscanf_r+0x3fc>
 800e6a6:	4b71      	ldr	r3, [pc, #452]	; (800e86c <__ssvfscanf_r+0x5a4>)
 800e6a8:	429d      	cmp	r5, r3
 800e6aa:	d8d5      	bhi.n	800e658 <__ssvfscanf_r+0x390>
 800e6ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6ae:	3508      	adds	r5, #8
 800e6b0:	b2ad      	uxth	r5, r5
 800e6b2:	6818      	ldr	r0, [r3, #0]
 800e6b4:	00a9      	lsls	r1, r5, #2
 800e6b6:	f002 f901 	bl	80108bc <realloc>
 800e6ba:	2800      	cmp	r0, #0
 800e6bc:	d0cc      	beq.n	800e658 <__ssvfscanf_r+0x390>
 800e6be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6c0:	6018      	str	r0, [r3, #0]
 800e6c2:	809d      	strh	r5, [r3, #4]
 800e6c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6c6:	1c72      	adds	r2, r6, #1
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	00b6      	lsls	r6, r6, #2
 800e6cc:	50f4      	str	r4, [r6, r3]
 800e6ce:	2320      	movs	r3, #32
 800e6d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e6d2:	0026      	movs	r6, r4
 800e6d4:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800e6d6:	80ca      	strh	r2, [r1, #6]
 800e6d8:	61fb      	str	r3, [r7, #28]
 800e6da:	2500      	movs	r5, #0
 800e6dc:	f7fd f9fe 	bl	800badc <__locale_mb_cur_max>
 800e6e0:	42a8      	cmp	r0, r5
 800e6e2:	d100      	bne.n	800e6e6 <__ssvfscanf_r+0x41e>
 800e6e4:	e6bf      	b.n	800e466 <__ssvfscanf_r+0x19e>
 800e6e6:	1c6a      	adds	r2, r5, #1
 800e6e8:	60fa      	str	r2, [r7, #12]
 800e6ea:	228c      	movs	r2, #140	; 0x8c
 800e6ec:	2048      	movs	r0, #72	; 0x48
 800e6ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6f0:	0052      	lsls	r2, r2, #1
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	1812      	adds	r2, r2, r0
 800e6f6:	7819      	ldrb	r1, [r3, #0]
 800e6f8:	19d2      	adds	r2, r2, r7
 800e6fa:	5551      	strb	r1, [r2, r5]
 800e6fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e6fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e700:	6852      	ldr	r2, [r2, #4]
 800e702:	3301      	adds	r3, #1
 800e704:	600b      	str	r3, [r1, #0]
 800e706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e708:	3a01      	subs	r2, #1
 800e70a:	604a      	str	r2, [r1, #4]
 800e70c:	2b03      	cmp	r3, #3
 800e70e:	d102      	bne.n	800e716 <__ssvfscanf_r+0x44e>
 800e710:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e712:	2b04      	cmp	r3, #4
 800e714:	d007      	beq.n	800e726 <__ssvfscanf_r+0x45e>
 800e716:	2048      	movs	r0, #72	; 0x48
 800e718:	2310      	movs	r3, #16
 800e71a:	181b      	adds	r3, r3, r0
 800e71c:	2208      	movs	r2, #8
 800e71e:	2100      	movs	r1, #0
 800e720:	19d8      	adds	r0, r3, r7
 800e722:	f7fd f997 	bl	800ba54 <memset>
 800e726:	2148      	movs	r1, #72	; 0x48
 800e728:	2310      	movs	r3, #16
 800e72a:	228c      	movs	r2, #140	; 0x8c
 800e72c:	185b      	adds	r3, r3, r1
 800e72e:	0052      	lsls	r2, r2, #1
 800e730:	19db      	adds	r3, r3, r7
 800e732:	1852      	adds	r2, r2, r1
 800e734:	9300      	str	r3, [sp, #0]
 800e736:	0021      	movs	r1, r4
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e73c:	19d2      	adds	r2, r2, r7
 800e73e:	f002 fc57 	bl	8010ff0 <_mbrtowc_r>
 800e742:	0003      	movs	r3, r0
 800e744:	62b8      	str	r0, [r7, #40]	; 0x28
 800e746:	3301      	adds	r3, #1
 800e748:	d100      	bne.n	800e74c <__ssvfscanf_r+0x484>
 800e74a:	e68c      	b.n	800e466 <__ssvfscanf_r+0x19e>
 800e74c:	2800      	cmp	r0, #0
 800e74e:	d139      	bne.n	800e7c4 <__ssvfscanf_r+0x4fc>
 800e750:	6a3b      	ldr	r3, [r7, #32]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d100      	bne.n	800e758 <__ssvfscanf_r+0x490>
 800e756:	6023      	str	r3, [r4, #0]
 800e758:	68fa      	ldr	r2, [r7, #12]
 800e75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e75c:	4694      	mov	ip, r2
 800e75e:	4463      	add	r3, ip
 800e760:	63bb      	str	r3, [r7, #56]	; 0x38
 800e762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e764:	2b03      	cmp	r3, #3
 800e766:	d102      	bne.n	800e76e <__ssvfscanf_r+0x4a6>
 800e768:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e76a:	2b04      	cmp	r3, #4
 800e76c:	d002      	beq.n	800e774 <__ssvfscanf_r+0x4ac>
 800e76e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e770:	3b01      	subs	r3, #1
 800e772:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e774:	6a3b      	ldr	r3, [r7, #32]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d115      	bne.n	800e7a6 <__ssvfscanf_r+0x4de>
 800e77a:	2e00      	cmp	r6, #0
 800e77c:	d012      	beq.n	800e7a4 <__ssvfscanf_r+0x4dc>
 800e77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e780:	69fa      	ldr	r2, [r7, #28]
 800e782:	1ae5      	subs	r5, r4, r3
 800e784:	10ab      	asrs	r3, r5, #2
 800e786:	4293      	cmp	r3, r2
 800e788:	d30c      	bcc.n	800e7a4 <__ssvfscanf_r+0x4dc>
 800e78a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e78c:	00d1      	lsls	r1, r2, #3
 800e78e:	f002 f895 	bl	80108bc <realloc>
 800e792:	6338      	str	r0, [r7, #48]	; 0x30
 800e794:	2800      	cmp	r0, #0
 800e796:	d100      	bne.n	800e79a <__ssvfscanf_r+0x4d2>
 800e798:	e75e      	b.n	800e658 <__ssvfscanf_r+0x390>
 800e79a:	69fb      	ldr	r3, [r7, #28]
 800e79c:	1944      	adds	r4, r0, r5
 800e79e:	005b      	lsls	r3, r3, #1
 800e7a0:	6030      	str	r0, [r6, #0]
 800e7a2:	61fb      	str	r3, [r7, #28]
 800e7a4:	3404      	adds	r4, #4
 800e7a6:	2500      	movs	r5, #0
 800e7a8:	e010      	b.n	800e7cc <__ssvfscanf_r+0x504>
 800e7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ac:	613b      	str	r3, [r7, #16]
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	001e      	movs	r6, r3
 800e7b2:	001c      	movs	r4, r3
 800e7b4:	61fb      	str	r3, [r7, #28]
 800e7b6:	633b      	str	r3, [r7, #48]	; 0x30
 800e7b8:	e78f      	b.n	800e6da <__ssvfscanf_r+0x412>
 800e7ba:	6a3b      	ldr	r3, [r7, #32]
 800e7bc:	001e      	movs	r6, r3
 800e7be:	61fb      	str	r3, [r7, #28]
 800e7c0:	633b      	str	r3, [r7, #48]	; 0x30
 800e7c2:	e78a      	b.n	800e6da <__ssvfscanf_r+0x412>
 800e7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7c6:	68fd      	ldr	r5, [r7, #12]
 800e7c8:	3302      	adds	r3, #2
 800e7ca:	d1c5      	bne.n	800e758 <__ssvfscanf_r+0x490>
 800e7cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7ce:	685b      	ldr	r3, [r3, #4]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	dc12      	bgt.n	800e7fa <__ssvfscanf_r+0x532>
 800e7d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e7d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e7d8:	f002 fd0a 	bl	80111f0 <__ssrefill_r>
 800e7dc:	2800      	cmp	r0, #0
 800e7de:	d00c      	beq.n	800e7fa <__ssvfscanf_r+0x532>
 800e7e0:	2d00      	cmp	r5, #0
 800e7e2:	d000      	beq.n	800e7e6 <__ssvfscanf_r+0x51e>
 800e7e4:	e63f      	b.n	800e466 <__ssvfscanf_r+0x19e>
 800e7e6:	2e00      	cmp	r6, #0
 800e7e8:	d10c      	bne.n	800e804 <__ssvfscanf_r+0x53c>
 800e7ea:	6a3b      	ldr	r3, [r7, #32]
 800e7ec:	425a      	negs	r2, r3
 800e7ee:	4153      	adcs	r3, r2
 800e7f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7f2:	18d3      	adds	r3, r2, r3
 800e7f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e7f6:	693b      	ldr	r3, [r7, #16]
 800e7f8:	e6de      	b.n	800e5b8 <__ssvfscanf_r+0x2f0>
 800e7fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d000      	beq.n	800e802 <__ssvfscanf_r+0x53a>
 800e800:	e76c      	b.n	800e6dc <__ssvfscanf_r+0x414>
 800e802:	e7f0      	b.n	800e7e6 <__ssvfscanf_r+0x51e>
 800e804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e806:	69fa      	ldr	r2, [r7, #28]
 800e808:	1ae1      	subs	r1, r4, r3
 800e80a:	108b      	asrs	r3, r1, #2
 800e80c:	429a      	cmp	r2, r3
 800e80e:	d9ec      	bls.n	800e7ea <__ssvfscanf_r+0x522>
 800e810:	6830      	ldr	r0, [r6, #0]
 800e812:	f002 f853 	bl	80108bc <realloc>
 800e816:	2800      	cmp	r0, #0
 800e818:	d0e7      	beq.n	800e7ea <__ssvfscanf_r+0x522>
 800e81a:	6030      	str	r0, [r6, #0]
 800e81c:	e7e5      	b.n	800e7ea <__ssvfscanf_r+0x522>
 800e81e:	6a3b      	ldr	r3, [r7, #32]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d025      	beq.n	800e870 <__ssvfscanf_r+0x5a8>
 800e824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e826:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e828:	685b      	ldr	r3, [r3, #4]
 800e82a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e82c:	6812      	ldr	r2, [r2, #0]
 800e82e:	4299      	cmp	r1, r3
 800e830:	dd11      	ble.n	800e856 <__ssvfscanf_r+0x58e>
 800e832:	1ac9      	subs	r1, r1, r3
 800e834:	18d2      	adds	r2, r2, r3
 800e836:	18e4      	adds	r4, r4, r3
 800e838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e83a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800e83c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e83e:	0019      	movs	r1, r3
 800e840:	601a      	str	r2, [r3, #0]
 800e842:	f002 fcd5 	bl	80111f0 <__ssrefill_r>
 800e846:	2800      	cmp	r0, #0
 800e848:	d0ec      	beq.n	800e824 <__ssvfscanf_r+0x55c>
 800e84a:	2c00      	cmp	r4, #0
 800e84c:	d100      	bne.n	800e850 <__ssvfscanf_r+0x588>
 800e84e:	e60a      	b.n	800e466 <__ssvfscanf_r+0x19e>
 800e850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e852:	191b      	adds	r3, r3, r4
 800e854:	e5ff      	b.n	800e456 <__ssvfscanf_r+0x18e>
 800e856:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e858:	1a5b      	subs	r3, r3, r1
 800e85a:	1864      	adds	r4, r4, r1
 800e85c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e85e:	604b      	str	r3, [r1, #4]
 800e860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e862:	18d2      	adds	r2, r2, r3
 800e864:	600a      	str	r2, [r1, #0]
 800e866:	e7f3      	b.n	800e850 <__ssvfscanf_r+0x588>
 800e868:	0800b719 	.word	0x0800b719
 800e86c:	0000fff6 	.word	0x0000fff6
 800e870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e872:	0034      	movs	r4, r6
 800e874:	cb20      	ldmia	r3!, {r5}
 800e876:	633b      	str	r3, [r7, #48]	; 0x30
 800e878:	2380      	movs	r3, #128	; 0x80
 800e87a:	401c      	ands	r4, r3
 800e87c:	421e      	tst	r6, r3
 800e87e:	d028      	beq.n	800e8d2 <__ssvfscanf_r+0x60a>
 800e880:	2d00      	cmp	r5, #0
 800e882:	d100      	bne.n	800e886 <__ssvfscanf_r+0x5be>
 800e884:	e61d      	b.n	800e4c2 <__ssvfscanf_r+0x1fa>
 800e886:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e888:	f7fb fe50 	bl	800a52c <malloc>
 800e88c:	6238      	str	r0, [r7, #32]
 800e88e:	2800      	cmp	r0, #0
 800e890:	d100      	bne.n	800e894 <__ssvfscanf_r+0x5cc>
 800e892:	e5ef      	b.n	800e474 <__ssvfscanf_r+0x1ac>
 800e894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e896:	6028      	str	r0, [r5, #0]
 800e898:	88de      	ldrh	r6, [r3, #6]
 800e89a:	889c      	ldrh	r4, [r3, #4]
 800e89c:	6818      	ldr	r0, [r3, #0]
 800e89e:	42a6      	cmp	r6, r4
 800e8a0:	d30e      	bcc.n	800e8c0 <__ssvfscanf_r+0x5f8>
 800e8a2:	4bbf      	ldr	r3, [pc, #764]	; (800eba0 <__ssvfscanf_r+0x8d8>)
 800e8a4:	429c      	cmp	r4, r3
 800e8a6:	d900      	bls.n	800e8aa <__ssvfscanf_r+0x5e2>
 800e8a8:	e6df      	b.n	800e66a <__ssvfscanf_r+0x3a2>
 800e8aa:	3408      	adds	r4, #8
 800e8ac:	b2a4      	uxth	r4, r4
 800e8ae:	00a1      	lsls	r1, r4, #2
 800e8b0:	f002 f804 	bl	80108bc <realloc>
 800e8b4:	2800      	cmp	r0, #0
 800e8b6:	d100      	bne.n	800e8ba <__ssvfscanf_r+0x5f2>
 800e8b8:	e6d7      	b.n	800e66a <__ssvfscanf_r+0x3a2>
 800e8ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8bc:	6018      	str	r0, [r3, #0]
 800e8be:	809c      	strh	r4, [r3, #4]
 800e8c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8c2:	1c72      	adds	r2, r6, #1
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e8c8:	00b6      	lsls	r6, r6, #2
 800e8ca:	002c      	movs	r4, r5
 800e8cc:	50f5      	str	r5, [r6, r3]
 800e8ce:	6a3d      	ldr	r5, [r7, #32]
 800e8d0:	80ca      	strh	r2, [r1, #6]
 800e8d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8d4:	0029      	movs	r1, r5
 800e8d6:	9300      	str	r3, [sp, #0]
 800e8d8:	2201      	movs	r2, #1
 800e8da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8dc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e8de:	f002 fca6 	bl	801122e <_sfread_r>
 800e8e2:	1e05      	subs	r5, r0, #0
 800e8e4:	d100      	bne.n	800e8e8 <__ssvfscanf_r+0x620>
 800e8e6:	e5be      	b.n	800e466 <__ssvfscanf_r+0x19e>
 800e8e8:	2c00      	cmp	r4, #0
 800e8ea:	d009      	beq.n	800e900 <__ssvfscanf_r+0x638>
 800e8ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8ee:	4283      	cmp	r3, r0
 800e8f0:	d906      	bls.n	800e900 <__ssvfscanf_r+0x638>
 800e8f2:	0001      	movs	r1, r0
 800e8f4:	6820      	ldr	r0, [r4, #0]
 800e8f6:	f001 ffe1 	bl	80108bc <realloc>
 800e8fa:	2800      	cmp	r0, #0
 800e8fc:	d000      	beq.n	800e900 <__ssvfscanf_r+0x638>
 800e8fe:	6020      	str	r0, [r4, #0]
 800e900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e902:	195b      	adds	r3, r3, r5
 800e904:	63bb      	str	r3, [r7, #56]	; 0x38
 800e906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e908:	3301      	adds	r3, #1
 800e90a:	e4f8      	b.n	800e2fe <__ssvfscanf_r+0x36>
 800e90c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d101      	bne.n	800e916 <__ssvfscanf_r+0x64e>
 800e912:	3b01      	subs	r3, #1
 800e914:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e916:	2210      	movs	r2, #16
 800e918:	2301      	movs	r3, #1
 800e91a:	0034      	movs	r4, r6
 800e91c:	4032      	ands	r2, r6
 800e91e:	401c      	ands	r4, r3
 800e920:	623a      	str	r2, [r7, #32]
 800e922:	421e      	tst	r6, r3
 800e924:	d100      	bne.n	800e928 <__ssvfscanf_r+0x660>
 800e926:	e116      	b.n	800eb56 <__ssvfscanf_r+0x88e>
 800e928:	2a00      	cmp	r2, #0
 800e92a:	d000      	beq.n	800e92e <__ssvfscanf_r+0x666>
 800e92c:	e0b0      	b.n	800ea90 <__ssvfscanf_r+0x7c8>
 800e92e:	2080      	movs	r0, #128	; 0x80
 800e930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e932:	cb10      	ldmia	r3!, {r4}
 800e934:	60fb      	str	r3, [r7, #12]
 800e936:	4206      	tst	r6, r0
 800e938:	d100      	bne.n	800e93c <__ssvfscanf_r+0x674>
 800e93a:	e0b2      	b.n	800eaa2 <__ssvfscanf_r+0x7da>
 800e93c:	2c00      	cmp	r4, #0
 800e93e:	d100      	bne.n	800e942 <__ssvfscanf_r+0x67a>
 800e940:	e68d      	b.n	800e65e <__ssvfscanf_r+0x396>
 800e942:	f7fb fdf3 	bl	800a52c <malloc>
 800e946:	6338      	str	r0, [r7, #48]	; 0x30
 800e948:	2800      	cmp	r0, #0
 800e94a:	d100      	bne.n	800e94e <__ssvfscanf_r+0x686>
 800e94c:	e684      	b.n	800e658 <__ssvfscanf_r+0x390>
 800e94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e950:	6023      	str	r3, [r4, #0]
 800e952:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e954:	88de      	ldrh	r6, [r3, #6]
 800e956:	889d      	ldrh	r5, [r3, #4]
 800e958:	42ae      	cmp	r6, r5
 800e95a:	d310      	bcc.n	800e97e <__ssvfscanf_r+0x6b6>
 800e95c:	4b90      	ldr	r3, [pc, #576]	; (800eba0 <__ssvfscanf_r+0x8d8>)
 800e95e:	429d      	cmp	r5, r3
 800e960:	d900      	bls.n	800e964 <__ssvfscanf_r+0x69c>
 800e962:	e679      	b.n	800e658 <__ssvfscanf_r+0x390>
 800e964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e966:	3508      	adds	r5, #8
 800e968:	b2ad      	uxth	r5, r5
 800e96a:	6818      	ldr	r0, [r3, #0]
 800e96c:	00a9      	lsls	r1, r5, #2
 800e96e:	f001 ffa5 	bl	80108bc <realloc>
 800e972:	2800      	cmp	r0, #0
 800e974:	d100      	bne.n	800e978 <__ssvfscanf_r+0x6b0>
 800e976:	e66f      	b.n	800e658 <__ssvfscanf_r+0x390>
 800e978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e97a:	6018      	str	r0, [r3, #0]
 800e97c:	809d      	strh	r5, [r3, #4]
 800e97e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e980:	1c72      	adds	r2, r6, #1
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	00b6      	lsls	r6, r6, #2
 800e986:	50f4      	str	r4, [r6, r3]
 800e988:	2320      	movs	r3, #32
 800e98a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e98c:	0026      	movs	r6, r4
 800e98e:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800e990:	80ca      	strh	r2, [r1, #6]
 800e992:	613b      	str	r3, [r7, #16]
 800e994:	2500      	movs	r5, #0
 800e996:	f7fd f8a1 	bl	800badc <__locale_mb_cur_max>
 800e99a:	42a8      	cmp	r0, r5
 800e99c:	d100      	bne.n	800e9a0 <__ssvfscanf_r+0x6d8>
 800e99e:	e562      	b.n	800e466 <__ssvfscanf_r+0x19e>
 800e9a0:	1c6a      	adds	r2, r5, #1
 800e9a2:	61fa      	str	r2, [r7, #28]
 800e9a4:	228c      	movs	r2, #140	; 0x8c
 800e9a6:	2048      	movs	r0, #72	; 0x48
 800e9a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9aa:	0052      	lsls	r2, r2, #1
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	1812      	adds	r2, r2, r0
 800e9b0:	7819      	ldrb	r1, [r3, #0]
 800e9b2:	19d2      	adds	r2, r2, r7
 800e9b4:	5551      	strb	r1, [r2, r5]
 800e9b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e9b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e9ba:	6852      	ldr	r2, [r2, #4]
 800e9bc:	3301      	adds	r3, #1
 800e9be:	600b      	str	r3, [r1, #0]
 800e9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9c2:	3a01      	subs	r2, #1
 800e9c4:	604a      	str	r2, [r1, #4]
 800e9c6:	2b03      	cmp	r3, #3
 800e9c8:	d102      	bne.n	800e9d0 <__ssvfscanf_r+0x708>
 800e9ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9cc:	2b04      	cmp	r3, #4
 800e9ce:	d006      	beq.n	800e9de <__ssvfscanf_r+0x716>
 800e9d0:	2048      	movs	r0, #72	; 0x48
 800e9d2:	2208      	movs	r2, #8
 800e9d4:	1813      	adds	r3, r2, r0
 800e9d6:	2100      	movs	r1, #0
 800e9d8:	19d8      	adds	r0, r3, r7
 800e9da:	f7fd f83b 	bl	800ba54 <memset>
 800e9de:	2148      	movs	r1, #72	; 0x48
 800e9e0:	2308      	movs	r3, #8
 800e9e2:	228c      	movs	r2, #140	; 0x8c
 800e9e4:	185b      	adds	r3, r3, r1
 800e9e6:	0052      	lsls	r2, r2, #1
 800e9e8:	19db      	adds	r3, r3, r7
 800e9ea:	1852      	adds	r2, r2, r1
 800e9ec:	9300      	str	r3, [sp, #0]
 800e9ee:	0021      	movs	r1, r4
 800e9f0:	69fb      	ldr	r3, [r7, #28]
 800e9f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e9f4:	19d2      	adds	r2, r2, r7
 800e9f6:	f002 fafb 	bl	8010ff0 <_mbrtowc_r>
 800e9fa:	0003      	movs	r3, r0
 800e9fc:	62b8      	str	r0, [r7, #40]	; 0x28
 800e9fe:	3301      	adds	r3, #1
 800ea00:	d100      	bne.n	800ea04 <__ssvfscanf_r+0x73c>
 800ea02:	e530      	b.n	800e466 <__ssvfscanf_r+0x19e>
 800ea04:	2800      	cmp	r0, #0
 800ea06:	d151      	bne.n	800eaac <__ssvfscanf_r+0x7e4>
 800ea08:	6020      	str	r0, [r4, #0]
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	6825      	ldr	r5, [r4, #0]
 800ea0e:	425b      	negs	r3, r3
 800ea10:	1c6a      	adds	r2, r5, #1
 800ea12:	d01a      	beq.n	800ea4a <__ssvfscanf_r+0x782>
 800ea14:	2048      	movs	r0, #72	; 0x48
 800ea16:	3311      	adds	r3, #17
 800ea18:	181b      	adds	r3, r3, r0
 800ea1a:	2208      	movs	r2, #8
 800ea1c:	2100      	movs	r1, #0
 800ea1e:	19d8      	adds	r0, r3, r7
 800ea20:	f7fd f818 	bl	800ba54 <memset>
 800ea24:	4b5f      	ldr	r3, [pc, #380]	; (800eba4 <__ssvfscanf_r+0x8dc>)
 800ea26:	2148      	movs	r1, #72	; 0x48
 800ea28:	33e0      	adds	r3, #224	; 0xe0
 800ea2a:	681a      	ldr	r2, [r3, #0]
 800ea2c:	2310      	movs	r3, #16
 800ea2e:	4694      	mov	ip, r2
 800ea30:	185b      	adds	r3, r3, r1
 800ea32:	002a      	movs	r2, r5
 800ea34:	19db      	adds	r3, r3, r7
 800ea36:	4665      	mov	r5, ip
 800ea38:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ea3a:	1879      	adds	r1, r7, r1
 800ea3c:	47a8      	blx	r5
 800ea3e:	2300      	movs	r3, #0
 800ea40:	2801      	cmp	r0, #1
 800ea42:	d102      	bne.n	800ea4a <__ssvfscanf_r+0x782>
 800ea44:	3348      	adds	r3, #72	; 0x48
 800ea46:	18fb      	adds	r3, r7, r3
 800ea48:	781b      	ldrb	r3, [r3, #0]
 800ea4a:	2218      	movs	r2, #24
 800ea4c:	2148      	movs	r1, #72	; 0x48
 800ea4e:	1852      	adds	r2, r2, r1
 800ea50:	19d2      	adds	r2, r2, r7
 800ea52:	5cd3      	ldrb	r3, [r2, r3]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d149      	bne.n	800eaec <__ssvfscanf_r+0x824>
 800ea58:	69fb      	ldr	r3, [r7, #28]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d137      	bne.n	800eace <__ssvfscanf_r+0x806>
 800ea5e:	6a3b      	ldr	r3, [r7, #32]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d113      	bne.n	800ea8c <__ssvfscanf_r+0x7c4>
 800ea64:	6023      	str	r3, [r4, #0]
 800ea66:	2e00      	cmp	r6, #0
 800ea68:	d00d      	beq.n	800ea86 <__ssvfscanf_r+0x7be>
 800ea6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea6c:	693a      	ldr	r2, [r7, #16]
 800ea6e:	1ae4      	subs	r4, r4, r3
 800ea70:	10a3      	asrs	r3, r4, #2
 800ea72:	3301      	adds	r3, #1
 800ea74:	429a      	cmp	r2, r3
 800ea76:	d906      	bls.n	800ea86 <__ssvfscanf_r+0x7be>
 800ea78:	6830      	ldr	r0, [r6, #0]
 800ea7a:	1d21      	adds	r1, r4, #4
 800ea7c:	f001 ff1e 	bl	80108bc <realloc>
 800ea80:	2800      	cmp	r0, #0
 800ea82:	d000      	beq.n	800ea86 <__ssvfscanf_r+0x7be>
 800ea84:	6030      	str	r0, [r6, #0]
 800ea86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea88:	3301      	adds	r3, #1
 800ea8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	e593      	b.n	800e5b8 <__ssvfscanf_r+0x2f0>
 800ea90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea92:	60fb      	str	r3, [r7, #12]
 800ea94:	2300      	movs	r3, #0
 800ea96:	001e      	movs	r6, r3
 800ea98:	613b      	str	r3, [r7, #16]
 800ea9a:	633b      	str	r3, [r7, #48]	; 0x30
 800ea9c:	334c      	adds	r3, #76	; 0x4c
 800ea9e:	18fc      	adds	r4, r7, r3
 800eaa0:	e778      	b.n	800e994 <__ssvfscanf_r+0x6cc>
 800eaa2:	6a3b      	ldr	r3, [r7, #32]
 800eaa4:	001e      	movs	r6, r3
 800eaa6:	613b      	str	r3, [r7, #16]
 800eaa8:	633b      	str	r3, [r7, #48]	; 0x30
 800eaaa:	e773      	b.n	800e994 <__ssvfscanf_r+0x6cc>
 800eaac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaae:	69fd      	ldr	r5, [r7, #28]
 800eab0:	3302      	adds	r3, #2
 800eab2:	d1aa      	bne.n	800ea0a <__ssvfscanf_r+0x742>
 800eab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eab6:	685b      	ldr	r3, [r3, #4]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	dc47      	bgt.n	800eb4c <__ssvfscanf_r+0x884>
 800eabc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eabe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eac0:	f002 fb96 	bl	80111f0 <__ssrefill_r>
 800eac4:	2800      	cmp	r0, #0
 800eac6:	d041      	beq.n	800eb4c <__ssvfscanf_r+0x884>
 800eac8:	2d00      	cmp	r5, #0
 800eaca:	d0c8      	beq.n	800ea5e <__ssvfscanf_r+0x796>
 800eacc:	e4cb      	b.n	800e466 <__ssvfscanf_r+0x19e>
 800eace:	69fb      	ldr	r3, [r7, #28]
 800ead0:	2248      	movs	r2, #72	; 0x48
 800ead2:	3b01      	subs	r3, #1
 800ead4:	61fb      	str	r3, [r7, #28]
 800ead6:	238c      	movs	r3, #140	; 0x8c
 800ead8:	005b      	lsls	r3, r3, #1
 800eada:	189b      	adds	r3, r3, r2
 800eadc:	69fa      	ldr	r2, [r7, #28]
 800eade:	19db      	adds	r3, r3, r7
 800eae0:	5cd1      	ldrb	r1, [r2, r3]
 800eae2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eae4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eae6:	f002 fb47 	bl	8011178 <_sungetc_r>
 800eaea:	e7b5      	b.n	800ea58 <__ssvfscanf_r+0x790>
 800eaec:	69fa      	ldr	r2, [r7, #28]
 800eaee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaf0:	4694      	mov	ip, r2
 800eaf2:	4463      	add	r3, ip
 800eaf4:	63bb      	str	r3, [r7, #56]	; 0x38
 800eaf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaf8:	2b03      	cmp	r3, #3
 800eafa:	d102      	bne.n	800eb02 <__ssvfscanf_r+0x83a>
 800eafc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eafe:	2b04      	cmp	r3, #4
 800eb00:	d002      	beq.n	800eb08 <__ssvfscanf_r+0x840>
 800eb02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb04:	3b01      	subs	r3, #1
 800eb06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb08:	6a3b      	ldr	r3, [r7, #32]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d11a      	bne.n	800eb44 <__ssvfscanf_r+0x87c>
 800eb0e:	3404      	adds	r4, #4
 800eb10:	2e00      	cmp	r6, #0
 800eb12:	d019      	beq.n	800eb48 <__ssvfscanf_r+0x880>
 800eb14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb16:	693a      	ldr	r2, [r7, #16]
 800eb18:	1ae3      	subs	r3, r4, r3
 800eb1a:	61fb      	str	r3, [r7, #28]
 800eb1c:	6a3d      	ldr	r5, [r7, #32]
 800eb1e:	109b      	asrs	r3, r3, #2
 800eb20:	4293      	cmp	r3, r2
 800eb22:	d3c7      	bcc.n	800eab4 <__ssvfscanf_r+0x7ec>
 800eb24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb26:	00d1      	lsls	r1, r2, #3
 800eb28:	f001 fec8 	bl	80108bc <realloc>
 800eb2c:	6338      	str	r0, [r7, #48]	; 0x30
 800eb2e:	2800      	cmp	r0, #0
 800eb30:	d100      	bne.n	800eb34 <__ssvfscanf_r+0x86c>
 800eb32:	e591      	b.n	800e658 <__ssvfscanf_r+0x390>
 800eb34:	4684      	mov	ip, r0
 800eb36:	693b      	ldr	r3, [r7, #16]
 800eb38:	69fc      	ldr	r4, [r7, #28]
 800eb3a:	005b      	lsls	r3, r3, #1
 800eb3c:	4464      	add	r4, ip
 800eb3e:	6030      	str	r0, [r6, #0]
 800eb40:	613b      	str	r3, [r7, #16]
 800eb42:	e7b7      	b.n	800eab4 <__ssvfscanf_r+0x7ec>
 800eb44:	2500      	movs	r5, #0
 800eb46:	e7b5      	b.n	800eab4 <__ssvfscanf_r+0x7ec>
 800eb48:	0035      	movs	r5, r6
 800eb4a:	e7b3      	b.n	800eab4 <__ssvfscanf_r+0x7ec>
 800eb4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d000      	beq.n	800eb54 <__ssvfscanf_r+0x88c>
 800eb52:	e720      	b.n	800e996 <__ssvfscanf_r+0x6ce>
 800eb54:	e783      	b.n	800ea5e <__ssvfscanf_r+0x796>
 800eb56:	6a3b      	ldr	r3, [r7, #32]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d025      	beq.n	800eba8 <__ssvfscanf_r+0x8e0>
 800eb5c:	2118      	movs	r1, #24
 800eb5e:	2048      	movs	r0, #72	; 0x48
 800eb60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb62:	1809      	adds	r1, r1, r0
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	19c9      	adds	r1, r1, r7
 800eb68:	781a      	ldrb	r2, [r3, #0]
 800eb6a:	5c8a      	ldrb	r2, [r1, r2]
 800eb6c:	2a00      	cmp	r2, #0
 800eb6e:	d103      	bne.n	800eb78 <__ssvfscanf_r+0x8b0>
 800eb70:	2c00      	cmp	r4, #0
 800eb72:	d000      	beq.n	800eb76 <__ssvfscanf_r+0x8ae>
 800eb74:	e66c      	b.n	800e850 <__ssvfscanf_r+0x588>
 800eb76:	e4a4      	b.n	800e4c2 <__ssvfscanf_r+0x1fa>
 800eb78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eb7c:	6852      	ldr	r2, [r2, #4]
 800eb7e:	3301      	adds	r3, #1
 800eb80:	600b      	str	r3, [r1, #0]
 800eb82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb84:	3a01      	subs	r2, #1
 800eb86:	3401      	adds	r4, #1
 800eb88:	604a      	str	r2, [r1, #4]
 800eb8a:	429c      	cmp	r4, r3
 800eb8c:	d100      	bne.n	800eb90 <__ssvfscanf_r+0x8c8>
 800eb8e:	e65f      	b.n	800e850 <__ssvfscanf_r+0x588>
 800eb90:	2a00      	cmp	r2, #0
 800eb92:	dce3      	bgt.n	800eb5c <__ssvfscanf_r+0x894>
 800eb94:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eb96:	f002 fb2b 	bl	80111f0 <__ssrefill_r>
 800eb9a:	2800      	cmp	r0, #0
 800eb9c:	d0de      	beq.n	800eb5c <__ssvfscanf_r+0x894>
 800eb9e:	e657      	b.n	800e850 <__ssvfscanf_r+0x588>
 800eba0:	0000fff6 	.word	0x0000fff6
 800eba4:	20000448 	.word	0x20000448
 800eba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebaa:	0032      	movs	r2, r6
 800ebac:	cb20      	ldmia	r3!, {r5}
 800ebae:	61fb      	str	r3, [r7, #28]
 800ebb0:	2380      	movs	r3, #128	; 0x80
 800ebb2:	401a      	ands	r2, r3
 800ebb4:	421e      	tst	r6, r3
 800ebb6:	d100      	bne.n	800ebba <__ssvfscanf_r+0x8f2>
 800ebb8:	e086      	b.n	800ecc8 <__ssvfscanf_r+0xa00>
 800ebba:	2d00      	cmp	r5, #0
 800ebbc:	d100      	bne.n	800ebc0 <__ssvfscanf_r+0x8f8>
 800ebbe:	e480      	b.n	800e4c2 <__ssvfscanf_r+0x1fa>
 800ebc0:	2020      	movs	r0, #32
 800ebc2:	f7fb fcb3 	bl	800a52c <malloc>
 800ebc6:	6338      	str	r0, [r7, #48]	; 0x30
 800ebc8:	2800      	cmp	r0, #0
 800ebca:	d100      	bne.n	800ebce <__ssvfscanf_r+0x906>
 800ebcc:	e452      	b.n	800e474 <__ssvfscanf_r+0x1ac>
 800ebce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebd0:	6028      	str	r0, [r5, #0]
 800ebd2:	88de      	ldrh	r6, [r3, #6]
 800ebd4:	889c      	ldrh	r4, [r3, #4]
 800ebd6:	6818      	ldr	r0, [r3, #0]
 800ebd8:	42a6      	cmp	r6, r4
 800ebda:	d30e      	bcc.n	800ebfa <__ssvfscanf_r+0x932>
 800ebdc:	4bc3      	ldr	r3, [pc, #780]	; (800eeec <__ssvfscanf_r+0xc24>)
 800ebde:	429c      	cmp	r4, r3
 800ebe0:	d900      	bls.n	800ebe4 <__ssvfscanf_r+0x91c>
 800ebe2:	e542      	b.n	800e66a <__ssvfscanf_r+0x3a2>
 800ebe4:	3408      	adds	r4, #8
 800ebe6:	b2a4      	uxth	r4, r4
 800ebe8:	00a1      	lsls	r1, r4, #2
 800ebea:	f001 fe67 	bl	80108bc <realloc>
 800ebee:	2800      	cmp	r0, #0
 800ebf0:	d100      	bne.n	800ebf4 <__ssvfscanf_r+0x92c>
 800ebf2:	e53a      	b.n	800e66a <__ssvfscanf_r+0x3a2>
 800ebf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebf6:	6018      	str	r0, [r3, #0]
 800ebf8:	809c      	strh	r4, [r3, #4]
 800ebfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebfc:	1c72      	adds	r2, r6, #1
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	00b6      	lsls	r6, r6, #2
 800ec02:	50f5      	str	r5, [r6, r3]
 800ec04:	2320      	movs	r3, #32
 800ec06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ec08:	002e      	movs	r6, r5
 800ec0a:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800ec0c:	80ca      	strh	r2, [r1, #6]
 800ec0e:	623b      	str	r3, [r7, #32]
 800ec10:	002c      	movs	r4, r5
 800ec12:	2118      	movs	r1, #24
 800ec14:	2048      	movs	r0, #72	; 0x48
 800ec16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec18:	1809      	adds	r1, r1, r0
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	19c9      	adds	r1, r1, r7
 800ec1e:	781a      	ldrb	r2, [r3, #0]
 800ec20:	5c8a      	ldrb	r2, [r1, r2]
 800ec22:	2a00      	cmp	r2, #0
 800ec24:	d101      	bne.n	800ec2a <__ssvfscanf_r+0x962>
 800ec26:	633d      	str	r5, [r7, #48]	; 0x30
 800ec28:	e031      	b.n	800ec8e <__ssvfscanf_r+0x9c6>
 800ec2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec2c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec2e:	6852      	ldr	r2, [r2, #4]
 800ec30:	3a01      	subs	r2, #1
 800ec32:	604a      	str	r2, [r1, #4]
 800ec34:	1c5a      	adds	r2, r3, #1
 800ec36:	600a      	str	r2, [r1, #0]
 800ec38:	781b      	ldrb	r3, [r3, #0]
 800ec3a:	1c6a      	adds	r2, r5, #1
 800ec3c:	633a      	str	r2, [r7, #48]	; 0x30
 800ec3e:	702b      	strb	r3, [r5, #0]
 800ec40:	2e00      	cmp	r6, #0
 800ec42:	d010      	beq.n	800ec66 <__ssvfscanf_r+0x99e>
 800ec44:	6a3b      	ldr	r3, [r7, #32]
 800ec46:	1b15      	subs	r5, r2, r4
 800ec48:	429d      	cmp	r5, r3
 800ec4a:	d30c      	bcc.n	800ec66 <__ssvfscanf_r+0x99e>
 800ec4c:	005b      	lsls	r3, r3, #1
 800ec4e:	0020      	movs	r0, r4
 800ec50:	0019      	movs	r1, r3
 800ec52:	623b      	str	r3, [r7, #32]
 800ec54:	f001 fe32 	bl	80108bc <realloc>
 800ec58:	1e04      	subs	r4, r0, #0
 800ec5a:	d101      	bne.n	800ec60 <__ssvfscanf_r+0x998>
 800ec5c:	f7ff fc0a 	bl	800e474 <__ssvfscanf_r+0x1ac>
 800ec60:	1943      	adds	r3, r0, r5
 800ec62:	633b      	str	r3, [r7, #48]	; 0x30
 800ec64:	6030      	str	r0, [r6, #0]
 800ec66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec68:	3b01      	subs	r3, #1
 800ec6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d00e      	beq.n	800ec8e <__ssvfscanf_r+0x9c6>
 800ec70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec72:	685b      	ldr	r3, [r3, #4]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	dc2a      	bgt.n	800ecce <__ssvfscanf_r+0xa06>
 800ec78:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec7a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ec7c:	f002 fab8 	bl	80111f0 <__ssrefill_r>
 800ec80:	2800      	cmp	r0, #0
 800ec82:	d024      	beq.n	800ecce <__ssvfscanf_r+0xa06>
 800ec84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec86:	42a3      	cmp	r3, r4
 800ec88:	d101      	bne.n	800ec8e <__ssvfscanf_r+0x9c6>
 800ec8a:	f7ff fbec 	bl	800e466 <__ssvfscanf_r+0x19e>
 800ec8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec90:	1b1d      	subs	r5, r3, r4
 800ec92:	42a3      	cmp	r3, r4
 800ec94:	d101      	bne.n	800ec9a <__ssvfscanf_r+0x9d2>
 800ec96:	f7ff fc14 	bl	800e4c2 <__ssvfscanf_r+0x1fa>
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec9e:	7013      	strb	r3, [r2, #0]
 800eca0:	429e      	cmp	r6, r3
 800eca2:	d009      	beq.n	800ecb8 <__ssvfscanf_r+0x9f0>
 800eca4:	6a3b      	ldr	r3, [r7, #32]
 800eca6:	1c69      	adds	r1, r5, #1
 800eca8:	428b      	cmp	r3, r1
 800ecaa:	d905      	bls.n	800ecb8 <__ssvfscanf_r+0x9f0>
 800ecac:	6830      	ldr	r0, [r6, #0]
 800ecae:	f001 fe05 	bl	80108bc <realloc>
 800ecb2:	2800      	cmp	r0, #0
 800ecb4:	d000      	beq.n	800ecb8 <__ssvfscanf_r+0x9f0>
 800ecb6:	6030      	str	r0, [r6, #0]
 800ecb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecba:	3301      	adds	r3, #1
 800ecbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ecbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecc0:	195b      	adds	r3, r3, r5
 800ecc2:	63bb      	str	r3, [r7, #56]	; 0x38
 800ecc4:	69fb      	ldr	r3, [r7, #28]
 800ecc6:	e477      	b.n	800e5b8 <__ssvfscanf_r+0x2f0>
 800ecc8:	0016      	movs	r6, r2
 800ecca:	623a      	str	r2, [r7, #32]
 800eccc:	e7a0      	b.n	800ec10 <__ssvfscanf_r+0x948>
 800ecce:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800ecd0:	e79f      	b.n	800ec12 <__ssvfscanf_r+0x94a>
 800ecd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d101      	bne.n	800ecdc <__ssvfscanf_r+0xa14>
 800ecd8:	3b01      	subs	r3, #1
 800ecda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ecdc:	2210      	movs	r2, #16
 800ecde:	2301      	movs	r3, #1
 800ece0:	0034      	movs	r4, r6
 800ece2:	4032      	ands	r2, r6
 800ece4:	401c      	ands	r4, r3
 800ece6:	61fa      	str	r2, [r7, #28]
 800ece8:	421e      	tst	r6, r3
 800ecea:	d100      	bne.n	800ecee <__ssvfscanf_r+0xa26>
 800ecec:	e102      	b.n	800eef4 <__ssvfscanf_r+0xc2c>
 800ecee:	2a00      	cmp	r2, #0
 800ecf0:	d000      	beq.n	800ecf4 <__ssvfscanf_r+0xa2c>
 800ecf2:	e09f      	b.n	800ee34 <__ssvfscanf_r+0xb6c>
 800ecf4:	2080      	movs	r0, #128	; 0x80
 800ecf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecf8:	cb10      	ldmia	r3!, {r4}
 800ecfa:	60fb      	str	r3, [r7, #12]
 800ecfc:	4206      	tst	r6, r0
 800ecfe:	d100      	bne.n	800ed02 <__ssvfscanf_r+0xa3a>
 800ed00:	e0a1      	b.n	800ee46 <__ssvfscanf_r+0xb7e>
 800ed02:	2c00      	cmp	r4, #0
 800ed04:	d100      	bne.n	800ed08 <__ssvfscanf_r+0xa40>
 800ed06:	e4aa      	b.n	800e65e <__ssvfscanf_r+0x396>
 800ed08:	f7fb fc10 	bl	800a52c <malloc>
 800ed0c:	6338      	str	r0, [r7, #48]	; 0x30
 800ed0e:	2800      	cmp	r0, #0
 800ed10:	d100      	bne.n	800ed14 <__ssvfscanf_r+0xa4c>
 800ed12:	e4a1      	b.n	800e658 <__ssvfscanf_r+0x390>
 800ed14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed16:	6023      	str	r3, [r4, #0]
 800ed18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed1a:	88de      	ldrh	r6, [r3, #6]
 800ed1c:	889d      	ldrh	r5, [r3, #4]
 800ed1e:	42ae      	cmp	r6, r5
 800ed20:	d310      	bcc.n	800ed44 <__ssvfscanf_r+0xa7c>
 800ed22:	4b72      	ldr	r3, [pc, #456]	; (800eeec <__ssvfscanf_r+0xc24>)
 800ed24:	429d      	cmp	r5, r3
 800ed26:	d900      	bls.n	800ed2a <__ssvfscanf_r+0xa62>
 800ed28:	e496      	b.n	800e658 <__ssvfscanf_r+0x390>
 800ed2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed2c:	3508      	adds	r5, #8
 800ed2e:	b2ad      	uxth	r5, r5
 800ed30:	6818      	ldr	r0, [r3, #0]
 800ed32:	00a9      	lsls	r1, r5, #2
 800ed34:	f001 fdc2 	bl	80108bc <realloc>
 800ed38:	2800      	cmp	r0, #0
 800ed3a:	d100      	bne.n	800ed3e <__ssvfscanf_r+0xa76>
 800ed3c:	e48c      	b.n	800e658 <__ssvfscanf_r+0x390>
 800ed3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed40:	6018      	str	r0, [r3, #0]
 800ed42:	809d      	strh	r5, [r3, #4]
 800ed44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed46:	1c72      	adds	r2, r6, #1
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	00b6      	lsls	r6, r6, #2
 800ed4c:	50f4      	str	r4, [r6, r3]
 800ed4e:	2320      	movs	r3, #32
 800ed50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ed52:	0025      	movs	r5, r4
 800ed54:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800ed56:	80ca      	strh	r2, [r1, #6]
 800ed58:	613b      	str	r3, [r7, #16]
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	623b      	str	r3, [r7, #32]
 800ed5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed60:	4a63      	ldr	r2, [pc, #396]	; (800eef0 <__ssvfscanf_r+0xc28>)
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	781b      	ldrb	r3, [r3, #0]
 800ed66:	5cd3      	ldrb	r3, [r2, r3]
 800ed68:	2208      	movs	r2, #8
 800ed6a:	4213      	tst	r3, r2
 800ed6c:	d149      	bne.n	800ee02 <__ssvfscanf_r+0xb3a>
 800ed6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d046      	beq.n	800ee02 <__ssvfscanf_r+0xb3a>
 800ed74:	f7fc feb2 	bl	800badc <__locale_mb_cur_max>
 800ed78:	6a3b      	ldr	r3, [r7, #32]
 800ed7a:	4298      	cmp	r0, r3
 800ed7c:	d101      	bne.n	800ed82 <__ssvfscanf_r+0xaba>
 800ed7e:	f7ff fb72 	bl	800e466 <__ssvfscanf_r+0x19e>
 800ed82:	6a3a      	ldr	r2, [r7, #32]
 800ed84:	2048      	movs	r0, #72	; 0x48
 800ed86:	1c56      	adds	r6, r2, #1
 800ed88:	228c      	movs	r2, #140	; 0x8c
 800ed8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed8c:	0052      	lsls	r2, r2, #1
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	1812      	adds	r2, r2, r0
 800ed92:	7819      	ldrb	r1, [r3, #0]
 800ed94:	6a38      	ldr	r0, [r7, #32]
 800ed96:	19d2      	adds	r2, r2, r7
 800ed98:	5411      	strb	r1, [r2, r0]
 800ed9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed9c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed9e:	6852      	ldr	r2, [r2, #4]
 800eda0:	3301      	adds	r3, #1
 800eda2:	600b      	str	r3, [r1, #0]
 800eda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eda6:	3a01      	subs	r2, #1
 800eda8:	604a      	str	r2, [r1, #4]
 800edaa:	2b03      	cmp	r3, #3
 800edac:	d102      	bne.n	800edb4 <__ssvfscanf_r+0xaec>
 800edae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800edb0:	2b04      	cmp	r3, #4
 800edb2:	d007      	beq.n	800edc4 <__ssvfscanf_r+0xafc>
 800edb4:	2048      	movs	r0, #72	; 0x48
 800edb6:	2310      	movs	r3, #16
 800edb8:	181b      	adds	r3, r3, r0
 800edba:	2208      	movs	r2, #8
 800edbc:	2100      	movs	r1, #0
 800edbe:	19d8      	adds	r0, r3, r7
 800edc0:	f7fc fe48 	bl	800ba54 <memset>
 800edc4:	2148      	movs	r1, #72	; 0x48
 800edc6:	2310      	movs	r3, #16
 800edc8:	228c      	movs	r2, #140	; 0x8c
 800edca:	185b      	adds	r3, r3, r1
 800edcc:	0052      	lsls	r2, r2, #1
 800edce:	19db      	adds	r3, r3, r7
 800edd0:	1852      	adds	r2, r2, r1
 800edd2:	9300      	str	r3, [sp, #0]
 800edd4:	0021      	movs	r1, r4
 800edd6:	0033      	movs	r3, r6
 800edd8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800edda:	19d2      	adds	r2, r2, r7
 800eddc:	f002 f908 	bl	8010ff0 <_mbrtowc_r>
 800ede0:	0003      	movs	r3, r0
 800ede2:	62b8      	str	r0, [r7, #40]	; 0x28
 800ede4:	3301      	adds	r3, #1
 800ede6:	d101      	bne.n	800edec <__ssvfscanf_r+0xb24>
 800ede8:	f7ff fb3d 	bl	800e466 <__ssvfscanf_r+0x19e>
 800edec:	2800      	cmp	r0, #0
 800edee:	d12f      	bne.n	800ee50 <__ssvfscanf_r+0xb88>
 800edf0:	6020      	str	r0, [r4, #0]
 800edf2:	6820      	ldr	r0, [r4, #0]
 800edf4:	f002 f91a 	bl	801102c <iswspace>
 800edf8:	6238      	str	r0, [r7, #32]
 800edfa:	2800      	cmp	r0, #0
 800edfc:	d04a      	beq.n	800ee94 <__ssvfscanf_r+0xbcc>
 800edfe:	2e00      	cmp	r6, #0
 800ee00:	d13c      	bne.n	800ee7c <__ssvfscanf_r+0xbb4>
 800ee02:	69fb      	ldr	r3, [r7, #28]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d000      	beq.n	800ee0a <__ssvfscanf_r+0xb42>
 800ee08:	e640      	b.n	800ea8c <__ssvfscanf_r+0x7c4>
 800ee0a:	6023      	str	r3, [r4, #0]
 800ee0c:	2d00      	cmp	r5, #0
 800ee0e:	d100      	bne.n	800ee12 <__ssvfscanf_r+0xb4a>
 800ee10:	e639      	b.n	800ea86 <__ssvfscanf_r+0x7be>
 800ee12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee14:	693a      	ldr	r2, [r7, #16]
 800ee16:	1ae4      	subs	r4, r4, r3
 800ee18:	10a3      	asrs	r3, r4, #2
 800ee1a:	3301      	adds	r3, #1
 800ee1c:	429a      	cmp	r2, r3
 800ee1e:	d800      	bhi.n	800ee22 <__ssvfscanf_r+0xb5a>
 800ee20:	e631      	b.n	800ea86 <__ssvfscanf_r+0x7be>
 800ee22:	6828      	ldr	r0, [r5, #0]
 800ee24:	1d21      	adds	r1, r4, #4
 800ee26:	f001 fd49 	bl	80108bc <realloc>
 800ee2a:	2800      	cmp	r0, #0
 800ee2c:	d100      	bne.n	800ee30 <__ssvfscanf_r+0xb68>
 800ee2e:	e62a      	b.n	800ea86 <__ssvfscanf_r+0x7be>
 800ee30:	6028      	str	r0, [r5, #0]
 800ee32:	e628      	b.n	800ea86 <__ssvfscanf_r+0x7be>
 800ee34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee36:	60fb      	str	r3, [r7, #12]
 800ee38:	2300      	movs	r3, #0
 800ee3a:	001d      	movs	r5, r3
 800ee3c:	613b      	str	r3, [r7, #16]
 800ee3e:	633b      	str	r3, [r7, #48]	; 0x30
 800ee40:	334c      	adds	r3, #76	; 0x4c
 800ee42:	18fc      	adds	r4, r7, r3
 800ee44:	e789      	b.n	800ed5a <__ssvfscanf_r+0xa92>
 800ee46:	69fb      	ldr	r3, [r7, #28]
 800ee48:	001d      	movs	r5, r3
 800ee4a:	613b      	str	r3, [r7, #16]
 800ee4c:	633b      	str	r3, [r7, #48]	; 0x30
 800ee4e:	e784      	b.n	800ed5a <__ssvfscanf_r+0xa92>
 800ee50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee52:	623e      	str	r6, [r7, #32]
 800ee54:	3302      	adds	r3, #2
 800ee56:	d1cc      	bne.n	800edf2 <__ssvfscanf_r+0xb2a>
 800ee58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee5a:	685b      	ldr	r3, [r3, #4]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	dd00      	ble.n	800ee62 <__ssvfscanf_r+0xb9a>
 800ee60:	e77d      	b.n	800ed5e <__ssvfscanf_r+0xa96>
 800ee62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee64:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ee66:	f002 f9c3 	bl	80111f0 <__ssrefill_r>
 800ee6a:	2800      	cmp	r0, #0
 800ee6c:	d100      	bne.n	800ee70 <__ssvfscanf_r+0xba8>
 800ee6e:	e776      	b.n	800ed5e <__ssvfscanf_r+0xa96>
 800ee70:	6a3b      	ldr	r3, [r7, #32]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d001      	beq.n	800ee7a <__ssvfscanf_r+0xbb2>
 800ee76:	f7ff faf6 	bl	800e466 <__ssvfscanf_r+0x19e>
 800ee7a:	e7c2      	b.n	800ee02 <__ssvfscanf_r+0xb3a>
 800ee7c:	238c      	movs	r3, #140	; 0x8c
 800ee7e:	2248      	movs	r2, #72	; 0x48
 800ee80:	005b      	lsls	r3, r3, #1
 800ee82:	189b      	adds	r3, r3, r2
 800ee84:	3e01      	subs	r6, #1
 800ee86:	19db      	adds	r3, r3, r7
 800ee88:	5cf1      	ldrb	r1, [r6, r3]
 800ee8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee8c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ee8e:	f002 f973 	bl	8011178 <_sungetc_r>
 800ee92:	e7b4      	b.n	800edfe <__ssvfscanf_r+0xb36>
 800ee94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee96:	199b      	adds	r3, r3, r6
 800ee98:	63bb      	str	r3, [r7, #56]	; 0x38
 800ee9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee9c:	2b03      	cmp	r3, #3
 800ee9e:	d102      	bne.n	800eea6 <__ssvfscanf_r+0xbde>
 800eea0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eea2:	2b04      	cmp	r3, #4
 800eea4:	d002      	beq.n	800eeac <__ssvfscanf_r+0xbe4>
 800eea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eea8:	3b01      	subs	r3, #1
 800eeaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eeac:	69fb      	ldr	r3, [r7, #28]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d1d2      	bne.n	800ee58 <__ssvfscanf_r+0xb90>
 800eeb2:	3404      	adds	r4, #4
 800eeb4:	2d00      	cmp	r5, #0
 800eeb6:	d016      	beq.n	800eee6 <__ssvfscanf_r+0xc1e>
 800eeb8:	69fa      	ldr	r2, [r7, #28]
 800eeba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eebc:	623a      	str	r2, [r7, #32]
 800eebe:	693a      	ldr	r2, [r7, #16]
 800eec0:	1ae6      	subs	r6, r4, r3
 800eec2:	10b3      	asrs	r3, r6, #2
 800eec4:	4293      	cmp	r3, r2
 800eec6:	d3c7      	bcc.n	800ee58 <__ssvfscanf_r+0xb90>
 800eec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eeca:	00d1      	lsls	r1, r2, #3
 800eecc:	f001 fcf6 	bl	80108bc <realloc>
 800eed0:	6338      	str	r0, [r7, #48]	; 0x30
 800eed2:	2800      	cmp	r0, #0
 800eed4:	d101      	bne.n	800eeda <__ssvfscanf_r+0xc12>
 800eed6:	f7ff fbbf 	bl	800e658 <__ssvfscanf_r+0x390>
 800eeda:	693b      	ldr	r3, [r7, #16]
 800eedc:	1984      	adds	r4, r0, r6
 800eede:	005b      	lsls	r3, r3, #1
 800eee0:	6028      	str	r0, [r5, #0]
 800eee2:	613b      	str	r3, [r7, #16]
 800eee4:	e7b8      	b.n	800ee58 <__ssvfscanf_r+0xb90>
 800eee6:	623d      	str	r5, [r7, #32]
 800eee8:	e7b6      	b.n	800ee58 <__ssvfscanf_r+0xb90>
 800eeea:	46c0      	nop			; (mov r8, r8)
 800eeec:	0000fff6 	.word	0x0000fff6
 800eef0:	08013f91 	.word	0x08013f91
 800eef4:	69fb      	ldr	r3, [r7, #28]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d01c      	beq.n	800ef34 <__ssvfscanf_r+0xc6c>
 800eefa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eefc:	49bf      	ldr	r1, [pc, #764]	; (800f1fc <__ssvfscanf_r+0xf34>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	781a      	ldrb	r2, [r3, #0]
 800ef02:	5c8a      	ldrb	r2, [r1, r2]
 800ef04:	2108      	movs	r1, #8
 800ef06:	420a      	tst	r2, r1
 800ef08:	d000      	beq.n	800ef0c <__ssvfscanf_r+0xc44>
 800ef0a:	e4a1      	b.n	800e850 <__ssvfscanf_r+0x588>
 800ef0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ef0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef10:	6852      	ldr	r2, [r2, #4]
 800ef12:	3301      	adds	r3, #1
 800ef14:	600b      	str	r3, [r1, #0]
 800ef16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef18:	3a01      	subs	r2, #1
 800ef1a:	3401      	adds	r4, #1
 800ef1c:	604a      	str	r2, [r1, #4]
 800ef1e:	429c      	cmp	r4, r3
 800ef20:	d100      	bne.n	800ef24 <__ssvfscanf_r+0xc5c>
 800ef22:	e495      	b.n	800e850 <__ssvfscanf_r+0x588>
 800ef24:	2a00      	cmp	r2, #0
 800ef26:	dce8      	bgt.n	800eefa <__ssvfscanf_r+0xc32>
 800ef28:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ef2a:	f002 f961 	bl	80111f0 <__ssrefill_r>
 800ef2e:	2800      	cmp	r0, #0
 800ef30:	d0e3      	beq.n	800eefa <__ssvfscanf_r+0xc32>
 800ef32:	e48d      	b.n	800e850 <__ssvfscanf_r+0x588>
 800ef34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef36:	0032      	movs	r2, r6
 800ef38:	cb10      	ldmia	r3!, {r4}
 800ef3a:	61fb      	str	r3, [r7, #28]
 800ef3c:	2380      	movs	r3, #128	; 0x80
 800ef3e:	401a      	ands	r2, r3
 800ef40:	421e      	tst	r6, r3
 800ef42:	d039      	beq.n	800efb8 <__ssvfscanf_r+0xcf0>
 800ef44:	2c00      	cmp	r4, #0
 800ef46:	d101      	bne.n	800ef4c <__ssvfscanf_r+0xc84>
 800ef48:	f7ff fabb 	bl	800e4c2 <__ssvfscanf_r+0x1fa>
 800ef4c:	2020      	movs	r0, #32
 800ef4e:	f7fb faed 	bl	800a52c <malloc>
 800ef52:	6338      	str	r0, [r7, #48]	; 0x30
 800ef54:	2800      	cmp	r0, #0
 800ef56:	d101      	bne.n	800ef5c <__ssvfscanf_r+0xc94>
 800ef58:	f7ff fa8c 	bl	800e474 <__ssvfscanf_r+0x1ac>
 800ef5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef5e:	6020      	str	r0, [r4, #0]
 800ef60:	88de      	ldrh	r6, [r3, #6]
 800ef62:	889d      	ldrh	r5, [r3, #4]
 800ef64:	6818      	ldr	r0, [r3, #0]
 800ef66:	42ae      	cmp	r6, r5
 800ef68:	d310      	bcc.n	800ef8c <__ssvfscanf_r+0xcc4>
 800ef6a:	4ba5      	ldr	r3, [pc, #660]	; (800f200 <__ssvfscanf_r+0xf38>)
 800ef6c:	429d      	cmp	r5, r3
 800ef6e:	d901      	bls.n	800ef74 <__ssvfscanf_r+0xcac>
 800ef70:	f7ff fb7b 	bl	800e66a <__ssvfscanf_r+0x3a2>
 800ef74:	3508      	adds	r5, #8
 800ef76:	b2ad      	uxth	r5, r5
 800ef78:	00a9      	lsls	r1, r5, #2
 800ef7a:	f001 fc9f 	bl	80108bc <realloc>
 800ef7e:	2800      	cmp	r0, #0
 800ef80:	d101      	bne.n	800ef86 <__ssvfscanf_r+0xcbe>
 800ef82:	f7ff fb72 	bl	800e66a <__ssvfscanf_r+0x3a2>
 800ef86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef88:	6018      	str	r0, [r3, #0]
 800ef8a:	809d      	strh	r5, [r3, #4]
 800ef8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef8e:	1c72      	adds	r2, r6, #1
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	00b6      	lsls	r6, r6, #2
 800ef94:	50f4      	str	r4, [r6, r3]
 800ef96:	2320      	movs	r3, #32
 800ef98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ef9a:	0026      	movs	r6, r4
 800ef9c:	80ca      	strh	r2, [r1, #6]
 800ef9e:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800efa0:	633b      	str	r3, [r7, #48]	; 0x30
 800efa2:	0025      	movs	r5, r4
 800efa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800efa6:	4995      	ldr	r1, [pc, #596]	; (800f1fc <__ssvfscanf_r+0xf34>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	781a      	ldrb	r2, [r3, #0]
 800efac:	5c8a      	ldrb	r2, [r1, r2]
 800efae:	2108      	movs	r1, #8
 800efb0:	420a      	tst	r2, r1
 800efb2:	d004      	beq.n	800efbe <__ssvfscanf_r+0xcf6>
 800efb4:	623c      	str	r4, [r7, #32]
 800efb6:	e031      	b.n	800f01c <__ssvfscanf_r+0xd54>
 800efb8:	0016      	movs	r6, r2
 800efba:	633a      	str	r2, [r7, #48]	; 0x30
 800efbc:	e7f1      	b.n	800efa2 <__ssvfscanf_r+0xcda>
 800efbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800efc0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800efc2:	6852      	ldr	r2, [r2, #4]
 800efc4:	3a01      	subs	r2, #1
 800efc6:	604a      	str	r2, [r1, #4]
 800efc8:	1c5a      	adds	r2, r3, #1
 800efca:	600a      	str	r2, [r1, #0]
 800efcc:	781b      	ldrb	r3, [r3, #0]
 800efce:	1c62      	adds	r2, r4, #1
 800efd0:	623a      	str	r2, [r7, #32]
 800efd2:	7023      	strb	r3, [r4, #0]
 800efd4:	2e00      	cmp	r6, #0
 800efd6:	d010      	beq.n	800effa <__ssvfscanf_r+0xd32>
 800efd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efda:	1b54      	subs	r4, r2, r5
 800efdc:	429c      	cmp	r4, r3
 800efde:	d30c      	bcc.n	800effa <__ssvfscanf_r+0xd32>
 800efe0:	005b      	lsls	r3, r3, #1
 800efe2:	0028      	movs	r0, r5
 800efe4:	0019      	movs	r1, r3
 800efe6:	633b      	str	r3, [r7, #48]	; 0x30
 800efe8:	f001 fc68 	bl	80108bc <realloc>
 800efec:	1e05      	subs	r5, r0, #0
 800efee:	d101      	bne.n	800eff4 <__ssvfscanf_r+0xd2c>
 800eff0:	f7ff fa40 	bl	800e474 <__ssvfscanf_r+0x1ac>
 800eff4:	1903      	adds	r3, r0, r4
 800eff6:	623b      	str	r3, [r7, #32]
 800eff8:	6030      	str	r0, [r6, #0]
 800effa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800effc:	3b01      	subs	r3, #1
 800effe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f000:	2b00      	cmp	r3, #0
 800f002:	d00b      	beq.n	800f01c <__ssvfscanf_r+0xd54>
 800f004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f006:	685b      	ldr	r3, [r3, #4]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	dd01      	ble.n	800f010 <__ssvfscanf_r+0xd48>
 800f00c:	6a3c      	ldr	r4, [r7, #32]
 800f00e:	e7c9      	b.n	800efa4 <__ssvfscanf_r+0xcdc>
 800f010:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f012:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f014:	f002 f8ec 	bl	80111f0 <__ssrefill_r>
 800f018:	2800      	cmp	r0, #0
 800f01a:	d0f7      	beq.n	800f00c <__ssvfscanf_r+0xd44>
 800f01c:	2300      	movs	r3, #0
 800f01e:	6a3a      	ldr	r2, [r7, #32]
 800f020:	7013      	strb	r3, [r2, #0]
 800f022:	1b55      	subs	r5, r2, r5
 800f024:	2e00      	cmp	r6, #0
 800f026:	d009      	beq.n	800f03c <__ssvfscanf_r+0xd74>
 800f028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f02a:	1c69      	adds	r1, r5, #1
 800f02c:	428b      	cmp	r3, r1
 800f02e:	d905      	bls.n	800f03c <__ssvfscanf_r+0xd74>
 800f030:	6830      	ldr	r0, [r6, #0]
 800f032:	f001 fc43 	bl	80108bc <realloc>
 800f036:	2800      	cmp	r0, #0
 800f038:	d000      	beq.n	800f03c <__ssvfscanf_r+0xd74>
 800f03a:	6030      	str	r0, [r6, #0]
 800f03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f03e:	195b      	adds	r3, r3, r5
 800f040:	63bb      	str	r3, [r7, #56]	; 0x38
 800f042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f044:	3301      	adds	r3, #1
 800f046:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f048:	e63c      	b.n	800ecc4 <__ssvfscanf_r+0x9fc>
 800f04a:	22ae      	movs	r2, #174	; 0xae
 800f04c:	2100      	movs	r1, #0
 800f04e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f050:	0052      	lsls	r2, r2, #1
 800f052:	3b01      	subs	r3, #1
 800f054:	6239      	str	r1, [r7, #32]
 800f056:	4293      	cmp	r3, r2
 800f058:	d906      	bls.n	800f068 <__ssvfscanf_r+0xda0>
 800f05a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f05c:	3b5e      	subs	r3, #94	; 0x5e
 800f05e:	3bff      	subs	r3, #255	; 0xff
 800f060:	623b      	str	r3, [r7, #32]
 800f062:	235e      	movs	r3, #94	; 0x5e
 800f064:	33ff      	adds	r3, #255	; 0xff
 800f066:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f068:	24d8      	movs	r4, #216	; 0xd8
 800f06a:	2300      	movs	r3, #0
 800f06c:	2248      	movs	r2, #72	; 0x48
 800f06e:	0124      	lsls	r4, r4, #4
 800f070:	4334      	orrs	r4, r6
 800f072:	2680      	movs	r6, #128	; 0x80
 800f074:	61fb      	str	r3, [r7, #28]
 800f076:	3319      	adds	r3, #25
 800f078:	33ff      	adds	r3, #255	; 0xff
 800f07a:	189b      	adds	r3, r3, r2
 800f07c:	19dd      	adds	r5, r3, r7
 800f07e:	00b6      	lsls	r6, r6, #2
 800f080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f082:	681a      	ldr	r2, [r3, #0]
 800f084:	7813      	ldrb	r3, [r2, #0]
 800f086:	2b39      	cmp	r3, #57	; 0x39
 800f088:	d80f      	bhi.n	800f0aa <__ssvfscanf_r+0xde2>
 800f08a:	2b2a      	cmp	r3, #42	; 0x2a
 800f08c:	d91b      	bls.n	800f0c6 <__ssvfscanf_r+0xdfe>
 800f08e:	0018      	movs	r0, r3
 800f090:	382b      	subs	r0, #43	; 0x2b
 800f092:	280e      	cmp	r0, #14
 800f094:	d817      	bhi.n	800f0c6 <__ssvfscanf_r+0xdfe>
 800f096:	f7f1 f83d 	bl	8000114 <__gnu_thumb1_case_uqi>
 800f09a:	168f      	.short	0x168f
 800f09c:	5416168f 	.word	0x5416168f
 800f0a0:	80808080 	.word	0x80808080
 800f0a4:	87808080 	.word	0x87808080
 800f0a8:	87          	.byte	0x87
 800f0a9:	00          	.byte	0x00
 800f0aa:	2b66      	cmp	r3, #102	; 0x66
 800f0ac:	d83a      	bhi.n	800f124 <__ssvfscanf_r+0xe5c>
 800f0ae:	2b60      	cmp	r3, #96	; 0x60
 800f0b0:	d803      	bhi.n	800f0ba <__ssvfscanf_r+0xdf2>
 800f0b2:	2b46      	cmp	r3, #70	; 0x46
 800f0b4:	d805      	bhi.n	800f0c2 <__ssvfscanf_r+0xdfa>
 800f0b6:	2b40      	cmp	r3, #64	; 0x40
 800f0b8:	d905      	bls.n	800f0c6 <__ssvfscanf_r+0xdfe>
 800f0ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f0bc:	290a      	cmp	r1, #10
 800f0be:	dc71      	bgt.n	800f1a4 <__ssvfscanf_r+0xedc>
 800f0c0:	e001      	b.n	800f0c6 <__ssvfscanf_r+0xdfe>
 800f0c2:	2b58      	cmp	r3, #88	; 0x58
 800f0c4:	d030      	beq.n	800f128 <__ssvfscanf_r+0xe60>
 800f0c6:	05e3      	lsls	r3, r4, #23
 800f0c8:	d515      	bpl.n	800f0f6 <__ssvfscanf_r+0xe2e>
 800f0ca:	238c      	movs	r3, #140	; 0x8c
 800f0cc:	2248      	movs	r2, #72	; 0x48
 800f0ce:	005b      	lsls	r3, r3, #1
 800f0d0:	189b      	adds	r3, r3, r2
 800f0d2:	19db      	adds	r3, r3, r7
 800f0d4:	429d      	cmp	r5, r3
 800f0d6:	d905      	bls.n	800f0e4 <__ssvfscanf_r+0xe1c>
 800f0d8:	3d01      	subs	r5, #1
 800f0da:	7829      	ldrb	r1, [r5, #0]
 800f0dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f0de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f0e0:	f002 f84a 	bl	8011178 <_sungetc_r>
 800f0e4:	238c      	movs	r3, #140	; 0x8c
 800f0e6:	2248      	movs	r2, #72	; 0x48
 800f0e8:	005b      	lsls	r3, r3, #1
 800f0ea:	189b      	adds	r3, r3, r2
 800f0ec:	19db      	adds	r3, r3, r7
 800f0ee:	429d      	cmp	r5, r3
 800f0f0:	d101      	bne.n	800f0f6 <__ssvfscanf_r+0xe2e>
 800f0f2:	f7ff f9e6 	bl	800e4c2 <__ssvfscanf_r+0x1fa>
 800f0f6:	2310      	movs	r3, #16
 800f0f8:	0022      	movs	r2, r4
 800f0fa:	401a      	ands	r2, r3
 800f0fc:	421c      	tst	r4, r3
 800f0fe:	d171      	bne.n	800f1e4 <__ssvfscanf_r+0xf1c>
 800f100:	218c      	movs	r1, #140	; 0x8c
 800f102:	2048      	movs	r0, #72	; 0x48
 800f104:	0049      	lsls	r1, r1, #1
 800f106:	1809      	adds	r1, r1, r0
 800f108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f10a:	697e      	ldr	r6, [r7, #20]
 800f10c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f10e:	19c9      	adds	r1, r1, r7
 800f110:	702a      	strb	r2, [r5, #0]
 800f112:	47b0      	blx	r6
 800f114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f116:	1d1e      	adds	r6, r3, #4
 800f118:	06a3      	lsls	r3, r4, #26
 800f11a:	d559      	bpl.n	800f1d0 <__ssvfscanf_r+0xf08>
 800f11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	6018      	str	r0, [r3, #0]
 800f122:	e05b      	b.n	800f1dc <__ssvfscanf_r+0xf14>
 800f124:	2b78      	cmp	r3, #120	; 0x78
 800f126:	d1ce      	bne.n	800f0c6 <__ssvfscanf_r+0xdfe>
 800f128:	21c0      	movs	r1, #192	; 0xc0
 800f12a:	00c9      	lsls	r1, r1, #3
 800f12c:	4021      	ands	r1, r4
 800f12e:	42b1      	cmp	r1, r6
 800f130:	d1c9      	bne.n	800f0c6 <__ssvfscanf_r+0xdfe>
 800f132:	4934      	ldr	r1, [pc, #208]	; (800f204 <__ssvfscanf_r+0xf3c>)
 800f134:	4021      	ands	r1, r4
 800f136:	24a0      	movs	r4, #160	; 0xa0
 800f138:	00e4      	lsls	r4, r4, #3
 800f13a:	430c      	orrs	r4, r1
 800f13c:	2110      	movs	r1, #16
 800f13e:	6279      	str	r1, [r7, #36]	; 0x24
 800f140:	e00b      	b.n	800f15a <__ssvfscanf_r+0xe92>
 800f142:	0521      	lsls	r1, r4, #20
 800f144:	d509      	bpl.n	800f15a <__ssvfscanf_r+0xe92>
 800f146:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f148:	2900      	cmp	r1, #0
 800f14a:	d102      	bne.n	800f152 <__ssvfscanf_r+0xe8a>
 800f14c:	3108      	adds	r1, #8
 800f14e:	4334      	orrs	r4, r6
 800f150:	6279      	str	r1, [r7, #36]	; 0x24
 800f152:	0561      	lsls	r1, r4, #21
 800f154:	d504      	bpl.n	800f160 <__ssvfscanf_r+0xe98>
 800f156:	492c      	ldr	r1, [pc, #176]	; (800f208 <__ssvfscanf_r+0xf40>)
 800f158:	400c      	ands	r4, r1
 800f15a:	702b      	strb	r3, [r5, #0]
 800f15c:	3501      	adds	r5, #1
 800f15e:	e00c      	b.n	800f17a <__ssvfscanf_r+0xeb2>
 800f160:	4b2a      	ldr	r3, [pc, #168]	; (800f20c <__ssvfscanf_r+0xf44>)
 800f162:	401c      	ands	r4, r3
 800f164:	6a3b      	ldr	r3, [r7, #32]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d004      	beq.n	800f174 <__ssvfscanf_r+0xeac>
 800f16a:	3b01      	subs	r3, #1
 800f16c:	623b      	str	r3, [r7, #32]
 800f16e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f170:	3301      	adds	r3, #1
 800f172:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f174:	69fb      	ldr	r3, [r7, #28]
 800f176:	3301      	adds	r3, #1
 800f178:	61fb      	str	r3, [r7, #28]
 800f17a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f17c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f17e:	685b      	ldr	r3, [r3, #4]
 800f180:	3b01      	subs	r3, #1
 800f182:	604b      	str	r3, [r1, #4]
 800f184:	2b00      	cmp	r3, #0
 800f186:	dd1c      	ble.n	800f1c2 <__ssvfscanf_r+0xefa>
 800f188:	3201      	adds	r2, #1
 800f18a:	600a      	str	r2, [r1, #0]
 800f18c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f18e:	3b01      	subs	r3, #1
 800f190:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f192:	2b00      	cmp	r3, #0
 800f194:	d000      	beq.n	800f198 <__ssvfscanf_r+0xed0>
 800f196:	e773      	b.n	800f080 <__ssvfscanf_r+0xdb8>
 800f198:	e795      	b.n	800f0c6 <__ssvfscanf_r+0xdfe>
 800f19a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f19c:	491c      	ldr	r1, [pc, #112]	; (800f210 <__ssvfscanf_r+0xf48>)
 800f19e:	0040      	lsls	r0, r0, #1
 800f1a0:	5e41      	ldrsh	r1, [r0, r1]
 800f1a2:	6279      	str	r1, [r7, #36]	; 0x24
 800f1a4:	491b      	ldr	r1, [pc, #108]	; (800f214 <__ssvfscanf_r+0xf4c>)
 800f1a6:	e7d7      	b.n	800f158 <__ssvfscanf_r+0xe90>
 800f1a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f1aa:	4919      	ldr	r1, [pc, #100]	; (800f210 <__ssvfscanf_r+0xf48>)
 800f1ac:	0040      	lsls	r0, r0, #1
 800f1ae:	5e41      	ldrsh	r1, [r0, r1]
 800f1b0:	6279      	str	r1, [r7, #36]	; 0x24
 800f1b2:	2908      	cmp	r1, #8
 800f1b4:	dcf6      	bgt.n	800f1a4 <__ssvfscanf_r+0xedc>
 800f1b6:	e786      	b.n	800f0c6 <__ssvfscanf_r+0xdfe>
 800f1b8:	2180      	movs	r1, #128	; 0x80
 800f1ba:	420c      	tst	r4, r1
 800f1bc:	d083      	beq.n	800f0c6 <__ssvfscanf_r+0xdfe>
 800f1be:	438c      	bics	r4, r1
 800f1c0:	e7cb      	b.n	800f15a <__ssvfscanf_r+0xe92>
 800f1c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f1c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f1c6:	f002 f813 	bl	80111f0 <__ssrefill_r>
 800f1ca:	2800      	cmp	r0, #0
 800f1cc:	d0de      	beq.n	800f18c <__ssvfscanf_r+0xec4>
 800f1ce:	e77a      	b.n	800f0c6 <__ssvfscanf_r+0xdfe>
 800f1d0:	2308      	movs	r3, #8
 800f1d2:	421c      	tst	r4, r3
 800f1d4:	d020      	beq.n	800f218 <__ssvfscanf_r+0xf50>
 800f1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	7018      	strb	r0, [r3, #0]
 800f1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1de:	633e      	str	r6, [r7, #48]	; 0x30
 800f1e0:	3301      	adds	r3, #1
 800f1e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f1e4:	238c      	movs	r3, #140	; 0x8c
 800f1e6:	2248      	movs	r2, #72	; 0x48
 800f1e8:	005b      	lsls	r3, r3, #1
 800f1ea:	189b      	adds	r3, r3, r2
 800f1ec:	19db      	adds	r3, r3, r7
 800f1ee:	1aed      	subs	r5, r5, r3
 800f1f0:	69fb      	ldr	r3, [r7, #28]
 800f1f2:	18ed      	adds	r5, r5, r3
 800f1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1f6:	195b      	adds	r3, r3, r5
 800f1f8:	f7ff f92d 	bl	800e456 <__ssvfscanf_r+0x18e>
 800f1fc:	08013f91 	.word	0x08013f91
 800f200:	0000fff6 	.word	0x0000fff6
 800f204:	fffffdff 	.word	0xfffffdff
 800f208:	fffffa7f 	.word	0xfffffa7f
 800f20c:	fffffc7f 	.word	0xfffffc7f
 800f210:	080142be 	.word	0x080142be
 800f214:	fffff47f 	.word	0xfffff47f
 800f218:	0763      	lsls	r3, r4, #29
 800f21a:	d503      	bpl.n	800f224 <__ssvfscanf_r+0xf5c>
 800f21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	8018      	strh	r0, [r3, #0]
 800f222:	e7db      	b.n	800f1dc <__ssvfscanf_r+0xf14>
 800f224:	2301      	movs	r3, #1
 800f226:	0022      	movs	r2, r4
 800f228:	401a      	ands	r2, r3
 800f22a:	421c      	tst	r4, r3
 800f22c:	d000      	beq.n	800f230 <__ssvfscanf_r+0xf68>
 800f22e:	e775      	b.n	800f11c <__ssvfscanf_r+0xe54>
 800f230:	07a4      	lsls	r4, r4, #30
 800f232:	d400      	bmi.n	800f236 <__ssvfscanf_r+0xf6e>
 800f234:	e772      	b.n	800f11c <__ssvfscanf_r+0xe54>
 800f236:	4ba8      	ldr	r3, [pc, #672]	; (800f4d8 <__ssvfscanf_r+0x1210>)
 800f238:	6979      	ldr	r1, [r7, #20]
 800f23a:	4299      	cmp	r1, r3
 800f23c:	d10c      	bne.n	800f258 <__ssvfscanf_r+0xf90>
 800f23e:	218c      	movs	r1, #140	; 0x8c
 800f240:	2048      	movs	r0, #72	; 0x48
 800f242:	0049      	lsls	r1, r1, #1
 800f244:	1809      	adds	r1, r1, r0
 800f246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f248:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f24a:	19c9      	adds	r1, r1, r7
 800f24c:	f001 fecc 	bl	8010fe8 <_strtoull_r>
 800f250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	c303      	stmia	r3!, {r0, r1}
 800f256:	e7c1      	b.n	800f1dc <__ssvfscanf_r+0xf14>
 800f258:	218c      	movs	r1, #140	; 0x8c
 800f25a:	2048      	movs	r0, #72	; 0x48
 800f25c:	0049      	lsls	r1, r1, #1
 800f25e:	1809      	adds	r1, r1, r0
 800f260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f262:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f264:	19c9      	adds	r1, r1, r7
 800f266:	f001 fe0d 	bl	8010e84 <_strtoll_r>
 800f26a:	e7f1      	b.n	800f250 <__ssvfscanf_r+0xf88>
 800f26c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f26e:	f000 fb9f 	bl	800f9b0 <_localeconv_r>
 800f272:	22ae      	movs	r2, #174	; 0xae
 800f274:	2100      	movs	r1, #0
 800f276:	6803      	ldr	r3, [r0, #0]
 800f278:	0052      	lsls	r2, r2, #1
 800f27a:	603b      	str	r3, [r7, #0]
 800f27c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f27e:	60f9      	str	r1, [r7, #12]
 800f280:	3b01      	subs	r3, #1
 800f282:	4293      	cmp	r3, r2
 800f284:	d906      	bls.n	800f294 <__ssvfscanf_r+0xfcc>
 800f286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f288:	3b5e      	subs	r3, #94	; 0x5e
 800f28a:	3bff      	subs	r3, #255	; 0xff
 800f28c:	60fb      	str	r3, [r7, #12]
 800f28e:	235e      	movs	r3, #94	; 0x5e
 800f290:	33ff      	adds	r3, #255	; 0xff
 800f292:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f294:	23f0      	movs	r3, #240	; 0xf0
 800f296:	00db      	lsls	r3, r3, #3
 800f298:	431e      	orrs	r6, r3
 800f29a:	238c      	movs	r3, #140	; 0x8c
 800f29c:	2248      	movs	r2, #72	; 0x48
 800f29e:	2400      	movs	r4, #0
 800f2a0:	005b      	lsls	r3, r3, #1
 800f2a2:	189b      	adds	r3, r3, r2
 800f2a4:	623c      	str	r4, [r7, #32]
 800f2a6:	607c      	str	r4, [r7, #4]
 800f2a8:	60bc      	str	r4, [r7, #8]
 800f2aa:	61fc      	str	r4, [r7, #28]
 800f2ac:	613c      	str	r4, [r7, #16]
 800f2ae:	19dd      	adds	r5, r3, r7
 800f2b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	781a      	ldrb	r2, [r3, #0]
 800f2b6:	0010      	movs	r0, r2
 800f2b8:	382b      	subs	r0, #43	; 0x2b
 800f2ba:	284e      	cmp	r0, #78	; 0x4e
 800f2bc:	d900      	bls.n	800f2c0 <__ssvfscanf_r+0xff8>
 800f2be:	e133      	b.n	800f528 <__ssvfscanf_r+0x1260>
 800f2c0:	f7f0 ff32 	bl	8000128 <__gnu_thumb1_case_uhi>
 800f2c4:	0132009b 	.word	0x0132009b
 800f2c8:	0132009b 	.word	0x0132009b
 800f2cc:	004f0132 	.word	0x004f0132
 800f2d0:	00720072 	.word	0x00720072
 800f2d4:	00720072 	.word	0x00720072
 800f2d8:	00720072 	.word	0x00720072
 800f2dc:	00720072 	.word	0x00720072
 800f2e0:	01320072 	.word	0x01320072
 800f2e4:	01320132 	.word	0x01320132
 800f2e8:	01320132 	.word	0x01320132
 800f2ec:	01320132 	.word	0x01320132
 800f2f0:	007b00bc 	.word	0x007b00bc
 800f2f4:	007b007b 	.word	0x007b007b
 800f2f8:	00f7012f 	.word	0x00f7012f
 800f2fc:	01320132 	.word	0x01320132
 800f300:	013200e3 	.word	0x013200e3
 800f304:	01320132 	.word	0x01320132
 800f308:	00a00132 	.word	0x00a00132
 800f30c:	01120132 	.word	0x01120132
 800f310:	01320132 	.word	0x01320132
 800f314:	01010132 	.word	0x01010132
 800f318:	01320132 	.word	0x01320132
 800f31c:	00820132 	.word	0x00820132
 800f320:	01320105 	.word	0x01320105
 800f324:	01320132 	.word	0x01320132
 800f328:	01320132 	.word	0x01320132
 800f32c:	01320132 	.word	0x01320132
 800f330:	007b00bc 	.word	0x007b00bc
 800f334:	007b007b 	.word	0x007b007b
 800f338:	00f7012f 	.word	0x00f7012f
 800f33c:	01320132 	.word	0x01320132
 800f340:	013200e3 	.word	0x013200e3
 800f344:	01320132 	.word	0x01320132
 800f348:	00a00132 	.word	0x00a00132
 800f34c:	01120132 	.word	0x01120132
 800f350:	01320132 	.word	0x01320132
 800f354:	01010132 	.word	0x01010132
 800f358:	01320132 	.word	0x01320132
 800f35c:	00820132 	.word	0x00820132
 800f360:	0105      	.short	0x0105
 800f362:	05f1      	lsls	r1, r6, #23
 800f364:	d520      	bpl.n	800f3a8 <__ssvfscanf_r+0x10e0>
 800f366:	2280      	movs	r2, #128	; 0x80
 800f368:	4396      	bics	r6, r2
 800f36a:	69fa      	ldr	r2, [r7, #28]
 800f36c:	3201      	adds	r2, #1
 800f36e:	61fa      	str	r2, [r7, #28]
 800f370:	68fa      	ldr	r2, [r7, #12]
 800f372:	2a00      	cmp	r2, #0
 800f374:	d004      	beq.n	800f380 <__ssvfscanf_r+0x10b8>
 800f376:	3a01      	subs	r2, #1
 800f378:	60fa      	str	r2, [r7, #12]
 800f37a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f37c:	3201      	adds	r2, #1
 800f37e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f380:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f382:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f384:	3a01      	subs	r2, #1
 800f386:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f388:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f38a:	3201      	adds	r2, #1
 800f38c:	63ba      	str	r2, [r7, #56]	; 0x38
 800f38e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f390:	6852      	ldr	r2, [r2, #4]
 800f392:	3a01      	subs	r2, #1
 800f394:	604a      	str	r2, [r1, #4]
 800f396:	2a00      	cmp	r2, #0
 800f398:	dc00      	bgt.n	800f39c <__ssvfscanf_r+0x10d4>
 800f39a:	e0d6      	b.n	800f54a <__ssvfscanf_r+0x1282>
 800f39c:	3301      	adds	r3, #1
 800f39e:	600b      	str	r3, [r1, #0]
 800f3a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d184      	bne.n	800f2b0 <__ssvfscanf_r+0xfe8>
 800f3a6:	e057      	b.n	800f458 <__ssvfscanf_r+0x1190>
 800f3a8:	6a39      	ldr	r1, [r7, #32]
 800f3aa:	1909      	adds	r1, r1, r4
 800f3ac:	2900      	cmp	r1, #0
 800f3ae:	d153      	bne.n	800f458 <__ssvfscanf_r+0x1190>
 800f3b0:	494a      	ldr	r1, [pc, #296]	; (800f4dc <__ssvfscanf_r+0x1214>)
 800f3b2:	400e      	ands	r6, r1
 800f3b4:	702a      	strb	r2, [r5, #0]
 800f3b6:	3501      	adds	r5, #1
 800f3b8:	e7e2      	b.n	800f380 <__ssvfscanf_r+0x10b8>
 800f3ba:	0531      	lsls	r1, r6, #20
 800f3bc:	d54c      	bpl.n	800f458 <__ssvfscanf_r+0x1190>
 800f3be:	6a39      	ldr	r1, [r7, #32]
 800f3c0:	1909      	adds	r1, r1, r4
 800f3c2:	2900      	cmp	r1, #0
 800f3c4:	d040      	beq.n	800f448 <__ssvfscanf_r+0x1180>
 800f3c6:	e047      	b.n	800f458 <__ssvfscanf_r+0x1190>
 800f3c8:	2198      	movs	r1, #152	; 0x98
 800f3ca:	2080      	movs	r0, #128	; 0x80
 800f3cc:	0109      	lsls	r1, r1, #4
 800f3ce:	4031      	ands	r1, r6
 800f3d0:	0040      	lsls	r0, r0, #1
 800f3d2:	4281      	cmp	r1, r0
 800f3d4:	d140      	bne.n	800f458 <__ssvfscanf_r+0x1190>
 800f3d6:	69f9      	ldr	r1, [r7, #28]
 800f3d8:	2901      	cmp	r1, #1
 800f3da:	d13d      	bne.n	800f458 <__ssvfscanf_r+0x1190>
 800f3dc:	2080      	movs	r0, #128	; 0x80
 800f3de:	4940      	ldr	r1, [pc, #256]	; (800f4e0 <__ssvfscanf_r+0x1218>)
 800f3e0:	0100      	lsls	r0, r0, #4
 800f3e2:	400e      	ands	r6, r1
 800f3e4:	3132      	adds	r1, #50	; 0x32
 800f3e6:	31ff      	adds	r1, #255	; 0xff
 800f3e8:	7029      	strb	r1, [r5, #0]
 800f3ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f3ec:	4306      	orrs	r6, r0
 800f3ee:	3901      	subs	r1, #1
 800f3f0:	63f9      	str	r1, [r7, #60]	; 0x3c
 800f3f2:	3501      	adds	r5, #1
 800f3f4:	2100      	movs	r1, #0
 800f3f6:	61f9      	str	r1, [r7, #28]
 800f3f8:	e7dc      	b.n	800f3b4 <__ssvfscanf_r+0x10ec>
 800f3fa:	2180      	movs	r1, #128	; 0x80
 800f3fc:	420e      	tst	r6, r1
 800f3fe:	d02b      	beq.n	800f458 <__ssvfscanf_r+0x1190>
 800f400:	438e      	bics	r6, r1
 800f402:	e7d7      	b.n	800f3b4 <__ssvfscanf_r+0x10ec>
 800f404:	6a39      	ldr	r1, [r7, #32]
 800f406:	2900      	cmp	r1, #0
 800f408:	d10d      	bne.n	800f426 <__ssvfscanf_r+0x115e>
 800f40a:	69f9      	ldr	r1, [r7, #28]
 800f40c:	2900      	cmp	r1, #0
 800f40e:	d10e      	bne.n	800f42e <__ssvfscanf_r+0x1166>
 800f410:	21e0      	movs	r1, #224	; 0xe0
 800f412:	0030      	movs	r0, r6
 800f414:	00c9      	lsls	r1, r1, #3
 800f416:	4008      	ands	r0, r1
 800f418:	4288      	cmp	r0, r1
 800f41a:	d108      	bne.n	800f42e <__ssvfscanf_r+0x1166>
 800f41c:	4931      	ldr	r1, [pc, #196]	; (800f4e4 <__ssvfscanf_r+0x121c>)
 800f41e:	400e      	ands	r6, r1
 800f420:	2101      	movs	r1, #1
 800f422:	6239      	str	r1, [r7, #32]
 800f424:	e7c6      	b.n	800f3b4 <__ssvfscanf_r+0x10ec>
 800f426:	6a39      	ldr	r1, [r7, #32]
 800f428:	2902      	cmp	r1, #2
 800f42a:	d100      	bne.n	800f42e <__ssvfscanf_r+0x1166>
 800f42c:	e089      	b.n	800f542 <__ssvfscanf_r+0x127a>
 800f42e:	2c01      	cmp	r4, #1
 800f430:	d001      	beq.n	800f436 <__ssvfscanf_r+0x116e>
 800f432:	2c04      	cmp	r4, #4
 800f434:	d110      	bne.n	800f458 <__ssvfscanf_r+0x1190>
 800f436:	3401      	adds	r4, #1
 800f438:	b2e4      	uxtb	r4, r4
 800f43a:	e7bb      	b.n	800f3b4 <__ssvfscanf_r+0x10ec>
 800f43c:	0531      	lsls	r1, r6, #20
 800f43e:	d508      	bpl.n	800f452 <__ssvfscanf_r+0x118a>
 800f440:	6a39      	ldr	r1, [r7, #32]
 800f442:	1909      	adds	r1, r1, r4
 800f444:	2900      	cmp	r1, #0
 800f446:	d104      	bne.n	800f452 <__ssvfscanf_r+0x118a>
 800f448:	4824      	ldr	r0, [pc, #144]	; (800f4dc <__ssvfscanf_r+0x1214>)
 800f44a:	000c      	movs	r4, r1
 800f44c:	4006      	ands	r6, r0
 800f44e:	6239      	str	r1, [r7, #32]
 800f450:	e7b0      	b.n	800f3b4 <__ssvfscanf_r+0x10ec>
 800f452:	6a39      	ldr	r1, [r7, #32]
 800f454:	2901      	cmp	r1, #1
 800f456:	d076      	beq.n	800f546 <__ssvfscanf_r+0x127e>
 800f458:	69fb      	ldr	r3, [r7, #28]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d001      	beq.n	800f462 <__ssvfscanf_r+0x119a>
 800f45e:	4b20      	ldr	r3, [pc, #128]	; (800f4e0 <__ssvfscanf_r+0x1218>)
 800f460:	401e      	ands	r6, r3
 800f462:	6a3b      	ldr	r3, [r7, #32]
 800f464:	3b01      	subs	r3, #1
 800f466:	2b01      	cmp	r3, #1
 800f468:	d877      	bhi.n	800f55a <__ssvfscanf_r+0x1292>
 800f46a:	238c      	movs	r3, #140	; 0x8c
 800f46c:	2248      	movs	r2, #72	; 0x48
 800f46e:	005b      	lsls	r3, r3, #1
 800f470:	189b      	adds	r3, r3, r2
 800f472:	19db      	adds	r3, r3, r7
 800f474:	429d      	cmp	r5, r3
 800f476:	d801      	bhi.n	800f47c <__ssvfscanf_r+0x11b4>
 800f478:	f7ff f823 	bl	800e4c2 <__ssvfscanf_r+0x1fa>
 800f47c:	3d01      	subs	r5, #1
 800f47e:	7829      	ldrb	r1, [r5, #0]
 800f480:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f482:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f484:	f001 fe78 	bl	8011178 <_sungetc_r>
 800f488:	e7ef      	b.n	800f46a <__ssvfscanf_r+0x11a2>
 800f48a:	2c00      	cmp	r4, #0
 800f48c:	d10c      	bne.n	800f4a8 <__ssvfscanf_r+0x11e0>
 800f48e:	69f9      	ldr	r1, [r7, #28]
 800f490:	2900      	cmp	r1, #0
 800f492:	d1e4      	bne.n	800f45e <__ssvfscanf_r+0x1196>
 800f494:	21e0      	movs	r1, #224	; 0xe0
 800f496:	0030      	movs	r0, r6
 800f498:	00c9      	lsls	r1, r1, #3
 800f49a:	4008      	ands	r0, r1
 800f49c:	4288      	cmp	r0, r1
 800f49e:	d1e0      	bne.n	800f462 <__ssvfscanf_r+0x119a>
 800f4a0:	4910      	ldr	r1, [pc, #64]	; (800f4e4 <__ssvfscanf_r+0x121c>)
 800f4a2:	3401      	adds	r4, #1
 800f4a4:	400e      	ands	r6, r1
 800f4a6:	e785      	b.n	800f3b4 <__ssvfscanf_r+0x10ec>
 800f4a8:	20fd      	movs	r0, #253	; 0xfd
 800f4aa:	1ee1      	subs	r1, r4, #3
 800f4ac:	4201      	tst	r1, r0
 800f4ae:	d1d3      	bne.n	800f458 <__ssvfscanf_r+0x1190>
 800f4b0:	e7c1      	b.n	800f436 <__ssvfscanf_r+0x116e>
 800f4b2:	0531      	lsls	r1, r6, #20
 800f4b4:	d503      	bpl.n	800f4be <__ssvfscanf_r+0x11f6>
 800f4b6:	6a39      	ldr	r1, [r7, #32]
 800f4b8:	1909      	adds	r1, r1, r4
 800f4ba:	2900      	cmp	r1, #0
 800f4bc:	d0c4      	beq.n	800f448 <__ssvfscanf_r+0x1180>
 800f4be:	2c02      	cmp	r4, #2
 800f4c0:	d1ca      	bne.n	800f458 <__ssvfscanf_r+0x1190>
 800f4c2:	2403      	movs	r4, #3
 800f4c4:	e776      	b.n	800f3b4 <__ssvfscanf_r+0x10ec>
 800f4c6:	2c06      	cmp	r4, #6
 800f4c8:	d1c6      	bne.n	800f458 <__ssvfscanf_r+0x1190>
 800f4ca:	2407      	movs	r4, #7
 800f4cc:	e772      	b.n	800f3b4 <__ssvfscanf_r+0x10ec>
 800f4ce:	2c07      	cmp	r4, #7
 800f4d0:	d1c2      	bne.n	800f458 <__ssvfscanf_r+0x1190>
 800f4d2:	2408      	movs	r4, #8
 800f4d4:	e76e      	b.n	800f3b4 <__ssvfscanf_r+0x10ec>
 800f4d6:	46c0      	nop			; (mov r8, r8)
 800f4d8:	08010d21 	.word	0x08010d21
 800f4dc:	fffffe7f 	.word	0xfffffe7f
 800f4e0:	fffffeff 	.word	0xfffffeff
 800f4e4:	fffff87f 	.word	0xfffff87f
 800f4e8:	0531      	lsls	r1, r6, #20
 800f4ea:	d5b5      	bpl.n	800f458 <__ssvfscanf_r+0x1190>
 800f4ec:	21a0      	movs	r1, #160	; 0xa0
 800f4ee:	2080      	movs	r0, #128	; 0x80
 800f4f0:	00c9      	lsls	r1, r1, #3
 800f4f2:	00c0      	lsls	r0, r0, #3
 800f4f4:	4031      	ands	r1, r6
 800f4f6:	4281      	cmp	r1, r0
 800f4f8:	d004      	beq.n	800f504 <__ssvfscanf_r+0x123c>
 800f4fa:	4206      	tst	r6, r0
 800f4fc:	d0ac      	beq.n	800f458 <__ssvfscanf_r+0x1190>
 800f4fe:	69f9      	ldr	r1, [r7, #28]
 800f500:	2900      	cmp	r1, #0
 800f502:	d0ae      	beq.n	800f462 <__ssvfscanf_r+0x119a>
 800f504:	2180      	movs	r1, #128	; 0x80
 800f506:	0089      	lsls	r1, r1, #2
 800f508:	420e      	tst	r6, r1
 800f50a:	d104      	bne.n	800f516 <__ssvfscanf_r+0x124e>
 800f50c:	69f9      	ldr	r1, [r7, #28]
 800f50e:	6938      	ldr	r0, [r7, #16]
 800f510:	607d      	str	r5, [r7, #4]
 800f512:	1a09      	subs	r1, r1, r0
 800f514:	60b9      	str	r1, [r7, #8]
 800f516:	20c0      	movs	r0, #192	; 0xc0
 800f518:	4973      	ldr	r1, [pc, #460]	; (800f6e8 <__ssvfscanf_r+0x1420>)
 800f51a:	0040      	lsls	r0, r0, #1
 800f51c:	400e      	ands	r6, r1
 800f51e:	4306      	orrs	r6, r0
 800f520:	e768      	b.n	800f3f4 <__ssvfscanf_r+0x112c>
 800f522:	0531      	lsls	r1, r6, #20
 800f524:	d5e2      	bpl.n	800f4ec <__ssvfscanf_r+0x1224>
 800f526:	e74a      	b.n	800f3be <__ssvfscanf_r+0x10f6>
 800f528:	6839      	ldr	r1, [r7, #0]
 800f52a:	7809      	ldrb	r1, [r1, #0]
 800f52c:	4291      	cmp	r1, r2
 800f52e:	d193      	bne.n	800f458 <__ssvfscanf_r+0x1190>
 800f530:	2180      	movs	r1, #128	; 0x80
 800f532:	0089      	lsls	r1, r1, #2
 800f534:	420e      	tst	r6, r1
 800f536:	d08f      	beq.n	800f458 <__ssvfscanf_r+0x1190>
 800f538:	496c      	ldr	r1, [pc, #432]	; (800f6ec <__ssvfscanf_r+0x1424>)
 800f53a:	400e      	ands	r6, r1
 800f53c:	69f9      	ldr	r1, [r7, #28]
 800f53e:	6139      	str	r1, [r7, #16]
 800f540:	e738      	b.n	800f3b4 <__ssvfscanf_r+0x10ec>
 800f542:	2103      	movs	r1, #3
 800f544:	e76d      	b.n	800f422 <__ssvfscanf_r+0x115a>
 800f546:	2102      	movs	r1, #2
 800f548:	e76b      	b.n	800f422 <__ssvfscanf_r+0x115a>
 800f54a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f54c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f54e:	f001 fe4f 	bl	80111f0 <__ssrefill_r>
 800f552:	2800      	cmp	r0, #0
 800f554:	d100      	bne.n	800f558 <__ssvfscanf_r+0x1290>
 800f556:	e723      	b.n	800f3a0 <__ssvfscanf_r+0x10d8>
 800f558:	e77e      	b.n	800f458 <__ssvfscanf_r+0x1190>
 800f55a:	1e63      	subs	r3, r4, #1
 800f55c:	2b06      	cmp	r3, #6
 800f55e:	d825      	bhi.n	800f5ac <__ssvfscanf_r+0x12e4>
 800f560:	2c02      	cmp	r4, #2
 800f562:	d837      	bhi.n	800f5d4 <__ssvfscanf_r+0x130c>
 800f564:	238c      	movs	r3, #140	; 0x8c
 800f566:	2248      	movs	r2, #72	; 0x48
 800f568:	005b      	lsls	r3, r3, #1
 800f56a:	189b      	adds	r3, r3, r2
 800f56c:	19db      	adds	r3, r3, r7
 800f56e:	429d      	cmp	r5, r3
 800f570:	d801      	bhi.n	800f576 <__ssvfscanf_r+0x12ae>
 800f572:	f7fe ffa6 	bl	800e4c2 <__ssvfscanf_r+0x1fa>
 800f576:	3d01      	subs	r5, #1
 800f578:	7829      	ldrb	r1, [r5, #0]
 800f57a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f57c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f57e:	f001 fdfb 	bl	8011178 <_sungetc_r>
 800f582:	e7ef      	b.n	800f564 <__ssvfscanf_r+0x129c>
 800f584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f586:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f588:	3b01      	subs	r3, #1
 800f58a:	7819      	ldrb	r1, [r3, #0]
 800f58c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f58e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f590:	f001 fdf2 	bl	8011178 <_sungetc_r>
 800f594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f596:	6a3a      	ldr	r2, [r7, #32]
 800f598:	189b      	adds	r3, r3, r2
 800f59a:	b2db      	uxtb	r3, r3
 800f59c:	2b03      	cmp	r3, #3
 800f59e:	d8f1      	bhi.n	800f584 <__ssvfscanf_r+0x12bc>
 800f5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5a2:	3c03      	subs	r4, #3
 800f5a4:	b2e4      	uxtb	r4, r4
 800f5a6:	1b1b      	subs	r3, r3, r4
 800f5a8:	1b2d      	subs	r5, r5, r4
 800f5aa:	63bb      	str	r3, [r7, #56]	; 0x38
 800f5ac:	05f3      	lsls	r3, r6, #23
 800f5ae:	d52f      	bpl.n	800f610 <__ssvfscanf_r+0x1348>
 800f5b0:	0573      	lsls	r3, r6, #21
 800f5b2:	d514      	bpl.n	800f5de <__ssvfscanf_r+0x1316>
 800f5b4:	238c      	movs	r3, #140	; 0x8c
 800f5b6:	2248      	movs	r2, #72	; 0x48
 800f5b8:	005b      	lsls	r3, r3, #1
 800f5ba:	189b      	adds	r3, r3, r2
 800f5bc:	19db      	adds	r3, r3, r7
 800f5be:	429d      	cmp	r5, r3
 800f5c0:	d801      	bhi.n	800f5c6 <__ssvfscanf_r+0x12fe>
 800f5c2:	f7fe ff7e 	bl	800e4c2 <__ssvfscanf_r+0x1fa>
 800f5c6:	3d01      	subs	r5, #1
 800f5c8:	7829      	ldrb	r1, [r5, #0]
 800f5ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f5cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f5ce:	f001 fdd3 	bl	8011178 <_sungetc_r>
 800f5d2:	e7ef      	b.n	800f5b4 <__ssvfscanf_r+0x12ec>
 800f5d4:	1b63      	subs	r3, r4, r5
 800f5d6:	b2db      	uxtb	r3, r3
 800f5d8:	63fd      	str	r5, [r7, #60]	; 0x3c
 800f5da:	623b      	str	r3, [r7, #32]
 800f5dc:	e7da      	b.n	800f594 <__ssvfscanf_r+0x12cc>
 800f5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5e0:	1e6c      	subs	r4, r5, #1
 800f5e2:	7821      	ldrb	r1, [r4, #0]
 800f5e4:	3b01      	subs	r3, #1
 800f5e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f5e8:	2965      	cmp	r1, #101	; 0x65
 800f5ea:	d00a      	beq.n	800f602 <__ssvfscanf_r+0x133a>
 800f5ec:	2945      	cmp	r1, #69	; 0x45
 800f5ee:	d008      	beq.n	800f602 <__ssvfscanf_r+0x133a>
 800f5f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f5f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f5f4:	f001 fdc0 	bl	8011178 <_sungetc_r>
 800f5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5fa:	1eac      	subs	r4, r5, #2
 800f5fc:	3b02      	subs	r3, #2
 800f5fe:	7821      	ldrb	r1, [r4, #0]
 800f600:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f602:	0025      	movs	r5, r4
 800f604:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f606:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f608:	f001 fdb6 	bl	8011178 <_sungetc_r>
 800f60c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f60e:	63bb      	str	r3, [r7, #56]	; 0x38
 800f610:	2310      	movs	r3, #16
 800f612:	0032      	movs	r2, r6
 800f614:	401a      	ands	r2, r3
 800f616:	421e      	tst	r6, r3
 800f618:	d001      	beq.n	800f61e <__ssvfscanf_r+0x1356>
 800f61a:	f7fe fe71 	bl	800e300 <__ssvfscanf_r+0x38>
 800f61e:	23c0      	movs	r3, #192	; 0xc0
 800f620:	2180      	movs	r1, #128	; 0x80
 800f622:	00db      	lsls	r3, r3, #3
 800f624:	702a      	strb	r2, [r5, #0]
 800f626:	4033      	ands	r3, r6
 800f628:	00c9      	lsls	r1, r1, #3
 800f62a:	428b      	cmp	r3, r1
 800f62c:	d11f      	bne.n	800f66e <__ssvfscanf_r+0x13a6>
 800f62e:	693b      	ldr	r3, [r7, #16]
 800f630:	69fa      	ldr	r2, [r7, #28]
 800f632:	69f9      	ldr	r1, [r7, #28]
 800f634:	1a9a      	subs	r2, r3, r2
 800f636:	428b      	cmp	r3, r1
 800f638:	d125      	bne.n	800f686 <__ssvfscanf_r+0x13be>
 800f63a:	238c      	movs	r3, #140	; 0x8c
 800f63c:	2148      	movs	r1, #72	; 0x48
 800f63e:	005b      	lsls	r3, r3, #1
 800f640:	185b      	adds	r3, r3, r1
 800f642:	19d9      	adds	r1, r3, r7
 800f644:	2200      	movs	r2, #0
 800f646:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f648:	f7fb ffca 	bl	800b5e0 <_strtod_r>
 800f64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f64e:	0004      	movs	r4, r0
 800f650:	3304      	adds	r3, #4
 800f652:	000d      	movs	r5, r1
 800f654:	623b      	str	r3, [r7, #32]
 800f656:	07f3      	lsls	r3, r6, #31
 800f658:	d523      	bpl.n	800f6a2 <__ssvfscanf_r+0x13da>
 800f65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	601c      	str	r4, [r3, #0]
 800f660:	605d      	str	r5, [r3, #4]
 800f662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f664:	3301      	adds	r3, #1
 800f666:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f668:	6a3b      	ldr	r3, [r7, #32]
 800f66a:	f7fe ffa5 	bl	800e5b8 <__ssvfscanf_r+0x2f0>
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d0e2      	beq.n	800f63a <__ssvfscanf_r+0x1372>
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f678:	1c59      	adds	r1, r3, #1
 800f67a:	230a      	movs	r3, #10
 800f67c:	f7fc f84c 	bl	800b718 <_strtol_r>
 800f680:	68bb      	ldr	r3, [r7, #8]
 800f682:	687d      	ldr	r5, [r7, #4]
 800f684:	1ac2      	subs	r2, r0, r3
 800f686:	2148      	movs	r1, #72	; 0x48
 800f688:	4b19      	ldr	r3, [pc, #100]	; (800f6f0 <__ssvfscanf_r+0x1428>)
 800f68a:	185b      	adds	r3, r3, r1
 800f68c:	19db      	adds	r3, r3, r7
 800f68e:	429d      	cmp	r5, r3
 800f690:	d302      	bcc.n	800f698 <__ssvfscanf_r+0x13d0>
 800f692:	4b18      	ldr	r3, [pc, #96]	; (800f6f4 <__ssvfscanf_r+0x142c>)
 800f694:	185b      	adds	r3, r3, r1
 800f696:	19dd      	adds	r5, r3, r7
 800f698:	0028      	movs	r0, r5
 800f69a:	4917      	ldr	r1, [pc, #92]	; (800f6f8 <__ssvfscanf_r+0x1430>)
 800f69c:	f7fc f944 	bl	800b928 <sprintf>
 800f6a0:	e7cb      	b.n	800f63a <__ssvfscanf_r+0x1372>
 800f6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f6a8:	07b6      	lsls	r6, r6, #30
 800f6aa:	d4d8      	bmi.n	800f65e <__ssvfscanf_r+0x1396>
 800f6ac:	0002      	movs	r2, r0
 800f6ae:	000b      	movs	r3, r1
 800f6b0:	f7f2 fe20 	bl	80022f4 <__aeabi_dcmpun>
 800f6b4:	2800      	cmp	r0, #0
 800f6b6:	d005      	beq.n	800f6c4 <__ssvfscanf_r+0x13fc>
 800f6b8:	4810      	ldr	r0, [pc, #64]	; (800f6fc <__ssvfscanf_r+0x1434>)
 800f6ba:	f7fc fabf 	bl	800bc3c <nanf>
 800f6be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6c0:	6018      	str	r0, [r3, #0]
 800f6c2:	e7ce      	b.n	800f662 <__ssvfscanf_r+0x139a>
 800f6c4:	0020      	movs	r0, r4
 800f6c6:	0029      	movs	r1, r5
 800f6c8:	f7f2 febe 	bl	8002448 <__aeabi_d2f>
 800f6cc:	e7f7      	b.n	800f6be <__ssvfscanf_r+0x13f6>
 800f6ce:	00a3      	lsls	r3, r4, #2
 800f6d0:	18ed      	adds	r5, r5, r3
 800f6d2:	682b      	ldr	r3, [r5, #0]
 800f6d4:	3401      	adds	r4, #1
 800f6d6:	6818      	ldr	r0, [r3, #0]
 800f6d8:	f7fa ff32 	bl	800a540 <free>
 800f6dc:	2200      	movs	r2, #0
 800f6de:	682b      	ldr	r3, [r5, #0]
 800f6e0:	601a      	str	r2, [r3, #0]
 800f6e2:	f7fe ffc3 	bl	800e66c <__ssvfscanf_r+0x3a4>
 800f6e6:	46c0      	nop			; (mov r8, r8)
 800f6e8:	fffff07f 	.word	0xfffff07f
 800f6ec:	fffffd7f 	.word	0xfffffd7f
 800f6f0:	0000026b 	.word	0x0000026b
 800f6f4:	0000026a 	.word	0x0000026a
 800f6f8:	080142b8 	.word	0x080142b8
 800f6fc:	0801431b 	.word	0x0801431b

0800f700 <_fclose_r>:
 800f700:	b570      	push	{r4, r5, r6, lr}
 800f702:	0005      	movs	r5, r0
 800f704:	1e0c      	subs	r4, r1, #0
 800f706:	d102      	bne.n	800f70e <_fclose_r+0xe>
 800f708:	2600      	movs	r6, #0
 800f70a:	0030      	movs	r0, r6
 800f70c:	bd70      	pop	{r4, r5, r6, pc}
 800f70e:	2800      	cmp	r0, #0
 800f710:	d004      	beq.n	800f71c <_fclose_r+0x1c>
 800f712:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f714:	2b00      	cmp	r3, #0
 800f716:	d101      	bne.n	800f71c <_fclose_r+0x1c>
 800f718:	f7fc f89e 	bl	800b858 <__sinit>
 800f71c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f71e:	07db      	lsls	r3, r3, #31
 800f720:	d405      	bmi.n	800f72e <_fclose_r+0x2e>
 800f722:	89a3      	ldrh	r3, [r4, #12]
 800f724:	059b      	lsls	r3, r3, #22
 800f726:	d402      	bmi.n	800f72e <_fclose_r+0x2e>
 800f728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f72a:	f7fc fa6b 	bl	800bc04 <__retarget_lock_acquire_recursive>
 800f72e:	220c      	movs	r2, #12
 800f730:	5ea3      	ldrsh	r3, [r4, r2]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d109      	bne.n	800f74a <_fclose_r+0x4a>
 800f736:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f738:	3301      	adds	r3, #1
 800f73a:	0016      	movs	r6, r2
 800f73c:	401e      	ands	r6, r3
 800f73e:	421a      	tst	r2, r3
 800f740:	d1e2      	bne.n	800f708 <_fclose_r+0x8>
 800f742:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f744:	f7fc fa5f 	bl	800bc06 <__retarget_lock_release_recursive>
 800f748:	e7df      	b.n	800f70a <_fclose_r+0xa>
 800f74a:	0021      	movs	r1, r4
 800f74c:	0028      	movs	r0, r5
 800f74e:	f000 f837 	bl	800f7c0 <__sflush_r>
 800f752:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f754:	0006      	movs	r6, r0
 800f756:	2b00      	cmp	r3, #0
 800f758:	d006      	beq.n	800f768 <_fclose_r+0x68>
 800f75a:	0028      	movs	r0, r5
 800f75c:	69e1      	ldr	r1, [r4, #28]
 800f75e:	4798      	blx	r3
 800f760:	2800      	cmp	r0, #0
 800f762:	da01      	bge.n	800f768 <_fclose_r+0x68>
 800f764:	2601      	movs	r6, #1
 800f766:	4276      	negs	r6, r6
 800f768:	89a3      	ldrh	r3, [r4, #12]
 800f76a:	061b      	lsls	r3, r3, #24
 800f76c:	d503      	bpl.n	800f776 <_fclose_r+0x76>
 800f76e:	0028      	movs	r0, r5
 800f770:	6921      	ldr	r1, [r4, #16]
 800f772:	f7fc facf 	bl	800bd14 <_free_r>
 800f776:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f778:	2900      	cmp	r1, #0
 800f77a:	d008      	beq.n	800f78e <_fclose_r+0x8e>
 800f77c:	0023      	movs	r3, r4
 800f77e:	3340      	adds	r3, #64	; 0x40
 800f780:	4299      	cmp	r1, r3
 800f782:	d002      	beq.n	800f78a <_fclose_r+0x8a>
 800f784:	0028      	movs	r0, r5
 800f786:	f7fc fac5 	bl	800bd14 <_free_r>
 800f78a:	2300      	movs	r3, #0
 800f78c:	6323      	str	r3, [r4, #48]	; 0x30
 800f78e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f790:	2900      	cmp	r1, #0
 800f792:	d004      	beq.n	800f79e <_fclose_r+0x9e>
 800f794:	0028      	movs	r0, r5
 800f796:	f7fc fabd 	bl	800bd14 <_free_r>
 800f79a:	2300      	movs	r3, #0
 800f79c:	6463      	str	r3, [r4, #68]	; 0x44
 800f79e:	f7fc f84b 	bl	800b838 <__sfp_lock_acquire>
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	81a3      	strh	r3, [r4, #12]
 800f7a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f7a8:	07db      	lsls	r3, r3, #31
 800f7aa:	d402      	bmi.n	800f7b2 <_fclose_r+0xb2>
 800f7ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f7ae:	f7fc fa2a 	bl	800bc06 <__retarget_lock_release_recursive>
 800f7b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f7b4:	f7fc fa25 	bl	800bc02 <__retarget_lock_close_recursive>
 800f7b8:	f7fc f846 	bl	800b848 <__sfp_lock_release>
 800f7bc:	e7a5      	b.n	800f70a <_fclose_r+0xa>
	...

0800f7c0 <__sflush_r>:
 800f7c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f7c2:	230c      	movs	r3, #12
 800f7c4:	5eca      	ldrsh	r2, [r1, r3]
 800f7c6:	000c      	movs	r4, r1
 800f7c8:	0005      	movs	r5, r0
 800f7ca:	b291      	uxth	r1, r2
 800f7cc:	0713      	lsls	r3, r2, #28
 800f7ce:	d464      	bmi.n	800f89a <__sflush_r+0xda>
 800f7d0:	2380      	movs	r3, #128	; 0x80
 800f7d2:	011b      	lsls	r3, r3, #4
 800f7d4:	4313      	orrs	r3, r2
 800f7d6:	6862      	ldr	r2, [r4, #4]
 800f7d8:	81a3      	strh	r3, [r4, #12]
 800f7da:	2a00      	cmp	r2, #0
 800f7dc:	dc04      	bgt.n	800f7e8 <__sflush_r+0x28>
 800f7de:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f7e0:	2a00      	cmp	r2, #0
 800f7e2:	dc01      	bgt.n	800f7e8 <__sflush_r+0x28>
 800f7e4:	2000      	movs	r0, #0
 800f7e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f7e8:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800f7ea:	2f00      	cmp	r7, #0
 800f7ec:	d0fa      	beq.n	800f7e4 <__sflush_r+0x24>
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	2080      	movs	r0, #128	; 0x80
 800f7f2:	682e      	ldr	r6, [r5, #0]
 800f7f4:	602a      	str	r2, [r5, #0]
 800f7f6:	001a      	movs	r2, r3
 800f7f8:	0140      	lsls	r0, r0, #5
 800f7fa:	69e1      	ldr	r1, [r4, #28]
 800f7fc:	4002      	ands	r2, r0
 800f7fe:	4203      	tst	r3, r0
 800f800:	d038      	beq.n	800f874 <__sflush_r+0xb4>
 800f802:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f804:	89a3      	ldrh	r3, [r4, #12]
 800f806:	075b      	lsls	r3, r3, #29
 800f808:	d506      	bpl.n	800f818 <__sflush_r+0x58>
 800f80a:	6863      	ldr	r3, [r4, #4]
 800f80c:	1ac0      	subs	r0, r0, r3
 800f80e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f810:	2b00      	cmp	r3, #0
 800f812:	d001      	beq.n	800f818 <__sflush_r+0x58>
 800f814:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f816:	1ac0      	subs	r0, r0, r3
 800f818:	0002      	movs	r2, r0
 800f81a:	2300      	movs	r3, #0
 800f81c:	0028      	movs	r0, r5
 800f81e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800f820:	69e1      	ldr	r1, [r4, #28]
 800f822:	47b8      	blx	r7
 800f824:	89a2      	ldrh	r2, [r4, #12]
 800f826:	1c43      	adds	r3, r0, #1
 800f828:	d106      	bne.n	800f838 <__sflush_r+0x78>
 800f82a:	6829      	ldr	r1, [r5, #0]
 800f82c:	291d      	cmp	r1, #29
 800f82e:	d830      	bhi.n	800f892 <__sflush_r+0xd2>
 800f830:	4b2c      	ldr	r3, [pc, #176]	; (800f8e4 <__sflush_r+0x124>)
 800f832:	410b      	asrs	r3, r1
 800f834:	07db      	lsls	r3, r3, #31
 800f836:	d42c      	bmi.n	800f892 <__sflush_r+0xd2>
 800f838:	4b2b      	ldr	r3, [pc, #172]	; (800f8e8 <__sflush_r+0x128>)
 800f83a:	4013      	ands	r3, r2
 800f83c:	2200      	movs	r2, #0
 800f83e:	6062      	str	r2, [r4, #4]
 800f840:	6922      	ldr	r2, [r4, #16]
 800f842:	b21b      	sxth	r3, r3
 800f844:	81a3      	strh	r3, [r4, #12]
 800f846:	6022      	str	r2, [r4, #0]
 800f848:	04db      	lsls	r3, r3, #19
 800f84a:	d505      	bpl.n	800f858 <__sflush_r+0x98>
 800f84c:	1c43      	adds	r3, r0, #1
 800f84e:	d102      	bne.n	800f856 <__sflush_r+0x96>
 800f850:	682b      	ldr	r3, [r5, #0]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d100      	bne.n	800f858 <__sflush_r+0x98>
 800f856:	6520      	str	r0, [r4, #80]	; 0x50
 800f858:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f85a:	602e      	str	r6, [r5, #0]
 800f85c:	2900      	cmp	r1, #0
 800f85e:	d0c1      	beq.n	800f7e4 <__sflush_r+0x24>
 800f860:	0023      	movs	r3, r4
 800f862:	3340      	adds	r3, #64	; 0x40
 800f864:	4299      	cmp	r1, r3
 800f866:	d002      	beq.n	800f86e <__sflush_r+0xae>
 800f868:	0028      	movs	r0, r5
 800f86a:	f7fc fa53 	bl	800bd14 <_free_r>
 800f86e:	2000      	movs	r0, #0
 800f870:	6320      	str	r0, [r4, #48]	; 0x30
 800f872:	e7b8      	b.n	800f7e6 <__sflush_r+0x26>
 800f874:	2301      	movs	r3, #1
 800f876:	0028      	movs	r0, r5
 800f878:	47b8      	blx	r7
 800f87a:	1c43      	adds	r3, r0, #1
 800f87c:	d1c2      	bne.n	800f804 <__sflush_r+0x44>
 800f87e:	682b      	ldr	r3, [r5, #0]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d0bf      	beq.n	800f804 <__sflush_r+0x44>
 800f884:	2b1d      	cmp	r3, #29
 800f886:	d001      	beq.n	800f88c <__sflush_r+0xcc>
 800f888:	2b16      	cmp	r3, #22
 800f88a:	d101      	bne.n	800f890 <__sflush_r+0xd0>
 800f88c:	602e      	str	r6, [r5, #0]
 800f88e:	e7a9      	b.n	800f7e4 <__sflush_r+0x24>
 800f890:	89a2      	ldrh	r2, [r4, #12]
 800f892:	2340      	movs	r3, #64	; 0x40
 800f894:	4313      	orrs	r3, r2
 800f896:	81a3      	strh	r3, [r4, #12]
 800f898:	e7a5      	b.n	800f7e6 <__sflush_r+0x26>
 800f89a:	6926      	ldr	r6, [r4, #16]
 800f89c:	2e00      	cmp	r6, #0
 800f89e:	d0a1      	beq.n	800f7e4 <__sflush_r+0x24>
 800f8a0:	6827      	ldr	r7, [r4, #0]
 800f8a2:	6026      	str	r6, [r4, #0]
 800f8a4:	1bbb      	subs	r3, r7, r6
 800f8a6:	9301      	str	r3, [sp, #4]
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	0789      	lsls	r1, r1, #30
 800f8ac:	d100      	bne.n	800f8b0 <__sflush_r+0xf0>
 800f8ae:	6963      	ldr	r3, [r4, #20]
 800f8b0:	60a3      	str	r3, [r4, #8]
 800f8b2:	9b01      	ldr	r3, [sp, #4]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	dc00      	bgt.n	800f8ba <__sflush_r+0xfa>
 800f8b8:	e794      	b.n	800f7e4 <__sflush_r+0x24>
 800f8ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8bc:	0032      	movs	r2, r6
 800f8be:	001f      	movs	r7, r3
 800f8c0:	0028      	movs	r0, r5
 800f8c2:	9b01      	ldr	r3, [sp, #4]
 800f8c4:	69e1      	ldr	r1, [r4, #28]
 800f8c6:	47b8      	blx	r7
 800f8c8:	2800      	cmp	r0, #0
 800f8ca:	dc06      	bgt.n	800f8da <__sflush_r+0x11a>
 800f8cc:	2340      	movs	r3, #64	; 0x40
 800f8ce:	2001      	movs	r0, #1
 800f8d0:	89a2      	ldrh	r2, [r4, #12]
 800f8d2:	4240      	negs	r0, r0
 800f8d4:	4313      	orrs	r3, r2
 800f8d6:	81a3      	strh	r3, [r4, #12]
 800f8d8:	e785      	b.n	800f7e6 <__sflush_r+0x26>
 800f8da:	9b01      	ldr	r3, [sp, #4]
 800f8dc:	1836      	adds	r6, r6, r0
 800f8de:	1a1b      	subs	r3, r3, r0
 800f8e0:	9301      	str	r3, [sp, #4]
 800f8e2:	e7e6      	b.n	800f8b2 <__sflush_r+0xf2>
 800f8e4:	dfbffffe 	.word	0xdfbffffe
 800f8e8:	fffff7ff 	.word	0xfffff7ff

0800f8ec <_fflush_r>:
 800f8ec:	b570      	push	{r4, r5, r6, lr}
 800f8ee:	0005      	movs	r5, r0
 800f8f0:	000c      	movs	r4, r1
 800f8f2:	2800      	cmp	r0, #0
 800f8f4:	d004      	beq.n	800f900 <_fflush_r+0x14>
 800f8f6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d101      	bne.n	800f900 <_fflush_r+0x14>
 800f8fc:	f7fb ffac 	bl	800b858 <__sinit>
 800f900:	220c      	movs	r2, #12
 800f902:	5ea3      	ldrsh	r3, [r4, r2]
 800f904:	1e1e      	subs	r6, r3, #0
 800f906:	d015      	beq.n	800f934 <_fflush_r+0x48>
 800f908:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f90a:	07d2      	lsls	r2, r2, #31
 800f90c:	d404      	bmi.n	800f918 <_fflush_r+0x2c>
 800f90e:	059b      	lsls	r3, r3, #22
 800f910:	d402      	bmi.n	800f918 <_fflush_r+0x2c>
 800f912:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f914:	f7fc f976 	bl	800bc04 <__retarget_lock_acquire_recursive>
 800f918:	0021      	movs	r1, r4
 800f91a:	0028      	movs	r0, r5
 800f91c:	f7ff ff50 	bl	800f7c0 <__sflush_r>
 800f920:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f922:	0006      	movs	r6, r0
 800f924:	07db      	lsls	r3, r3, #31
 800f926:	d405      	bmi.n	800f934 <_fflush_r+0x48>
 800f928:	89a3      	ldrh	r3, [r4, #12]
 800f92a:	059b      	lsls	r3, r3, #22
 800f92c:	d402      	bmi.n	800f934 <_fflush_r+0x48>
 800f92e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f930:	f7fc f969 	bl	800bc06 <__retarget_lock_release_recursive>
 800f934:	0030      	movs	r0, r6
 800f936:	bd70      	pop	{r4, r5, r6, pc}

0800f938 <__sccl>:
 800f938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f93a:	780b      	ldrb	r3, [r1, #0]
 800f93c:	0004      	movs	r4, r0
 800f93e:	2b5e      	cmp	r3, #94	; 0x5e
 800f940:	d019      	beq.n	800f976 <__sccl+0x3e>
 800f942:	2200      	movs	r2, #0
 800f944:	1c4d      	adds	r5, r1, #1
 800f946:	0021      	movs	r1, r4
 800f948:	1c60      	adds	r0, r4, #1
 800f94a:	30ff      	adds	r0, #255	; 0xff
 800f94c:	700a      	strb	r2, [r1, #0]
 800f94e:	3101      	adds	r1, #1
 800f950:	4281      	cmp	r1, r0
 800f952:	d1fb      	bne.n	800f94c <__sccl+0x14>
 800f954:	1e68      	subs	r0, r5, #1
 800f956:	2b00      	cmp	r3, #0
 800f958:	d00c      	beq.n	800f974 <__sccl+0x3c>
 800f95a:	2101      	movs	r1, #1
 800f95c:	262d      	movs	r6, #45	; 0x2d
 800f95e:	404a      	eors	r2, r1
 800f960:	0028      	movs	r0, r5
 800f962:	54e2      	strb	r2, [r4, r3]
 800f964:	7801      	ldrb	r1, [r0, #0]
 800f966:	1c45      	adds	r5, r0, #1
 800f968:	292d      	cmp	r1, #45	; 0x2d
 800f96a:	d00c      	beq.n	800f986 <__sccl+0x4e>
 800f96c:	295d      	cmp	r1, #93	; 0x5d
 800f96e:	d01d      	beq.n	800f9ac <__sccl+0x74>
 800f970:	2900      	cmp	r1, #0
 800f972:	d104      	bne.n	800f97e <__sccl+0x46>
 800f974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f976:	2201      	movs	r2, #1
 800f978:	784b      	ldrb	r3, [r1, #1]
 800f97a:	1c8d      	adds	r5, r1, #2
 800f97c:	e7e3      	b.n	800f946 <__sccl+0xe>
 800f97e:	000b      	movs	r3, r1
 800f980:	e7ee      	b.n	800f960 <__sccl+0x28>
 800f982:	0033      	movs	r3, r6
 800f984:	e7ec      	b.n	800f960 <__sccl+0x28>
 800f986:	7841      	ldrb	r1, [r0, #1]
 800f988:	295d      	cmp	r1, #93	; 0x5d
 800f98a:	d0fa      	beq.n	800f982 <__sccl+0x4a>
 800f98c:	428b      	cmp	r3, r1
 800f98e:	dcf8      	bgt.n	800f982 <__sccl+0x4a>
 800f990:	001d      	movs	r5, r3
 800f992:	3002      	adds	r0, #2
 800f994:	3501      	adds	r5, #1
 800f996:	5562      	strb	r2, [r4, r5]
 800f998:	42a9      	cmp	r1, r5
 800f99a:	dcfb      	bgt.n	800f994 <__sccl+0x5c>
 800f99c:	2500      	movs	r5, #0
 800f99e:	1c5f      	adds	r7, r3, #1
 800f9a0:	428b      	cmp	r3, r1
 800f9a2:	da01      	bge.n	800f9a8 <__sccl+0x70>
 800f9a4:	1acd      	subs	r5, r1, r3
 800f9a6:	3d01      	subs	r5, #1
 800f9a8:	197b      	adds	r3, r7, r5
 800f9aa:	e7db      	b.n	800f964 <__sccl+0x2c>
 800f9ac:	0028      	movs	r0, r5
 800f9ae:	e7e1      	b.n	800f974 <__sccl+0x3c>

0800f9b0 <_localeconv_r>:
 800f9b0:	4800      	ldr	r0, [pc, #0]	; (800f9b4 <_localeconv_r+0x4>)
 800f9b2:	4770      	bx	lr
 800f9b4:	20000538 	.word	0x20000538

0800f9b8 <__libc_fini_array>:
 800f9b8:	b570      	push	{r4, r5, r6, lr}
 800f9ba:	4c07      	ldr	r4, [pc, #28]	; (800f9d8 <__libc_fini_array+0x20>)
 800f9bc:	4d07      	ldr	r5, [pc, #28]	; (800f9dc <__libc_fini_array+0x24>)
 800f9be:	1b64      	subs	r4, r4, r5
 800f9c0:	10a4      	asrs	r4, r4, #2
 800f9c2:	2c00      	cmp	r4, #0
 800f9c4:	d102      	bne.n	800f9cc <__libc_fini_array+0x14>
 800f9c6:	f002 fdcd 	bl	8012564 <_fini>
 800f9ca:	bd70      	pop	{r4, r5, r6, pc}
 800f9cc:	3c01      	subs	r4, #1
 800f9ce:	00a3      	lsls	r3, r4, #2
 800f9d0:	58eb      	ldr	r3, [r5, r3]
 800f9d2:	4798      	blx	r3
 800f9d4:	e7f5      	b.n	800f9c2 <__libc_fini_array+0xa>
 800f9d6:	46c0      	nop			; (mov r8, r8)
 800f9d8:	080143b8 	.word	0x080143b8
 800f9dc:	080143b4 	.word	0x080143b4

0800f9e0 <memchr>:
 800f9e0:	b2c9      	uxtb	r1, r1
 800f9e2:	1882      	adds	r2, r0, r2
 800f9e4:	4290      	cmp	r0, r2
 800f9e6:	d101      	bne.n	800f9ec <memchr+0xc>
 800f9e8:	2000      	movs	r0, #0
 800f9ea:	4770      	bx	lr
 800f9ec:	7803      	ldrb	r3, [r0, #0]
 800f9ee:	428b      	cmp	r3, r1
 800f9f0:	d0fb      	beq.n	800f9ea <memchr+0xa>
 800f9f2:	3001      	adds	r0, #1
 800f9f4:	e7f6      	b.n	800f9e4 <memchr+0x4>
	...

0800f9f8 <frexp>:
 800f9f8:	b570      	push	{r4, r5, r6, lr}
 800f9fa:	0014      	movs	r4, r2
 800f9fc:	2500      	movs	r5, #0
 800f9fe:	6025      	str	r5, [r4, #0]
 800fa00:	4d10      	ldr	r5, [pc, #64]	; (800fa44 <frexp+0x4c>)
 800fa02:	004b      	lsls	r3, r1, #1
 800fa04:	000a      	movs	r2, r1
 800fa06:	085b      	lsrs	r3, r3, #1
 800fa08:	42ab      	cmp	r3, r5
 800fa0a:	dc1a      	bgt.n	800fa42 <frexp+0x4a>
 800fa0c:	001d      	movs	r5, r3
 800fa0e:	4305      	orrs	r5, r0
 800fa10:	d017      	beq.n	800fa42 <frexp+0x4a>
 800fa12:	4d0d      	ldr	r5, [pc, #52]	; (800fa48 <frexp+0x50>)
 800fa14:	4229      	tst	r1, r5
 800fa16:	d109      	bne.n	800fa2c <frexp+0x34>
 800fa18:	2200      	movs	r2, #0
 800fa1a:	4b0c      	ldr	r3, [pc, #48]	; (800fa4c <frexp+0x54>)
 800fa1c:	f7f1 fe26 	bl	800166c <__aeabi_dmul>
 800fa20:	2536      	movs	r5, #54	; 0x36
 800fa22:	000a      	movs	r2, r1
 800fa24:	004b      	lsls	r3, r1, #1
 800fa26:	426d      	negs	r5, r5
 800fa28:	085b      	lsrs	r3, r3, #1
 800fa2a:	6025      	str	r5, [r4, #0]
 800fa2c:	4d08      	ldr	r5, [pc, #32]	; (800fa50 <frexp+0x58>)
 800fa2e:	151b      	asrs	r3, r3, #20
 800fa30:	195b      	adds	r3, r3, r5
 800fa32:	6825      	ldr	r5, [r4, #0]
 800fa34:	18eb      	adds	r3, r5, r3
 800fa36:	6023      	str	r3, [r4, #0]
 800fa38:	4b06      	ldr	r3, [pc, #24]	; (800fa54 <frexp+0x5c>)
 800fa3a:	401a      	ands	r2, r3
 800fa3c:	4b06      	ldr	r3, [pc, #24]	; (800fa58 <frexp+0x60>)
 800fa3e:	4313      	orrs	r3, r2
 800fa40:	0019      	movs	r1, r3
 800fa42:	bd70      	pop	{r4, r5, r6, pc}
 800fa44:	7fefffff 	.word	0x7fefffff
 800fa48:	7ff00000 	.word	0x7ff00000
 800fa4c:	43500000 	.word	0x43500000
 800fa50:	fffffc02 	.word	0xfffffc02
 800fa54:	800fffff 	.word	0x800fffff
 800fa58:	3fe00000 	.word	0x3fe00000

0800fa5c <__register_exitproc>:
 800fa5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fa5e:	4f1c      	ldr	r7, [pc, #112]	; (800fad0 <__register_exitproc+0x74>)
 800fa60:	0004      	movs	r4, r0
 800fa62:	6838      	ldr	r0, [r7, #0]
 800fa64:	0016      	movs	r6, r2
 800fa66:	9301      	str	r3, [sp, #4]
 800fa68:	9100      	str	r1, [sp, #0]
 800fa6a:	f7fc f8cb 	bl	800bc04 <__retarget_lock_acquire_recursive>
 800fa6e:	4a19      	ldr	r2, [pc, #100]	; (800fad4 <__register_exitproc+0x78>)
 800fa70:	6813      	ldr	r3, [r2, #0]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d101      	bne.n	800fa7a <__register_exitproc+0x1e>
 800fa76:	4b18      	ldr	r3, [pc, #96]	; (800fad8 <__register_exitproc+0x7c>)
 800fa78:	6013      	str	r3, [r2, #0]
 800fa7a:	685a      	ldr	r2, [r3, #4]
 800fa7c:	6838      	ldr	r0, [r7, #0]
 800fa7e:	2a1f      	cmp	r2, #31
 800fa80:	dd04      	ble.n	800fa8c <__register_exitproc+0x30>
 800fa82:	f7fc f8c0 	bl	800bc06 <__retarget_lock_release_recursive>
 800fa86:	2001      	movs	r0, #1
 800fa88:	4240      	negs	r0, r0
 800fa8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fa8c:	2c00      	cmp	r4, #0
 800fa8e:	d014      	beq.n	800faba <__register_exitproc+0x5e>
 800fa90:	0091      	lsls	r1, r2, #2
 800fa92:	1859      	adds	r1, r3, r1
 800fa94:	000f      	movs	r7, r1
 800fa96:	3788      	adds	r7, #136	; 0x88
 800fa98:	603e      	str	r6, [r7, #0]
 800fa9a:	2701      	movs	r7, #1
 800fa9c:	001e      	movs	r6, r3
 800fa9e:	4097      	lsls	r7, r2
 800faa0:	3685      	adds	r6, #133	; 0x85
 800faa2:	36ff      	adds	r6, #255	; 0xff
 800faa4:	6875      	ldr	r5, [r6, #4]
 800faa6:	31fc      	adds	r1, #252	; 0xfc
 800faa8:	433d      	orrs	r5, r7
 800faaa:	6075      	str	r5, [r6, #4]
 800faac:	9d01      	ldr	r5, [sp, #4]
 800faae:	60cd      	str	r5, [r1, #12]
 800fab0:	2c02      	cmp	r4, #2
 800fab2:	d102      	bne.n	800faba <__register_exitproc+0x5e>
 800fab4:	68b1      	ldr	r1, [r6, #8]
 800fab6:	4339      	orrs	r1, r7
 800fab8:	60b1      	str	r1, [r6, #8]
 800faba:	1c51      	adds	r1, r2, #1
 800fabc:	6059      	str	r1, [r3, #4]
 800fabe:	3202      	adds	r2, #2
 800fac0:	9900      	ldr	r1, [sp, #0]
 800fac2:	0092      	lsls	r2, r2, #2
 800fac4:	50d1      	str	r1, [r2, r3]
 800fac6:	f7fc f89e 	bl	800bc06 <__retarget_lock_release_recursive>
 800faca:	2000      	movs	r0, #0
 800facc:	e7dd      	b.n	800fa8a <__register_exitproc+0x2e>
 800face:	46c0      	nop			; (mov r8, r8)
 800fad0:	200006dc 	.word	0x200006dc
 800fad4:	20000cb4 	.word	0x20000cb4
 800fad8:	20000cb8 	.word	0x20000cb8

0800fadc <__assert_func>:
 800fadc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800fade:	0014      	movs	r4, r2
 800fae0:	001a      	movs	r2, r3
 800fae2:	4b09      	ldr	r3, [pc, #36]	; (800fb08 <__assert_func+0x2c>)
 800fae4:	0005      	movs	r5, r0
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	000e      	movs	r6, r1
 800faea:	68d8      	ldr	r0, [r3, #12]
 800faec:	4b07      	ldr	r3, [pc, #28]	; (800fb0c <__assert_func+0x30>)
 800faee:	2c00      	cmp	r4, #0
 800faf0:	d101      	bne.n	800faf6 <__assert_func+0x1a>
 800faf2:	4b07      	ldr	r3, [pc, #28]	; (800fb10 <__assert_func+0x34>)
 800faf4:	001c      	movs	r4, r3
 800faf6:	4907      	ldr	r1, [pc, #28]	; (800fb14 <__assert_func+0x38>)
 800faf8:	9301      	str	r3, [sp, #4]
 800fafa:	9402      	str	r4, [sp, #8]
 800fafc:	002b      	movs	r3, r5
 800fafe:	9600      	str	r6, [sp, #0]
 800fb00:	f001 faa6 	bl	8011050 <fiprintf>
 800fb04:	f002 fb8e 	bl	8012224 <abort>
 800fb08:	200006d8 	.word	0x200006d8
 800fb0c:	080142e0 	.word	0x080142e0
 800fb10:	0801431b 	.word	0x0801431b
 800fb14:	080142ed 	.word	0x080142ed

0800fb18 <_calloc_r>:
 800fb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb1a:	2400      	movs	r4, #0
 800fb1c:	0c0b      	lsrs	r3, r1, #16
 800fb1e:	0c16      	lsrs	r6, r2, #16
 800fb20:	42a3      	cmp	r3, r4
 800fb22:	d133      	bne.n	800fb8c <_calloc_r+0x74>
 800fb24:	42a6      	cmp	r6, r4
 800fb26:	d121      	bne.n	800fb6c <_calloc_r+0x54>
 800fb28:	b28b      	uxth	r3, r1
 800fb2a:	b291      	uxth	r1, r2
 800fb2c:	4359      	muls	r1, r3
 800fb2e:	f7fa fd11 	bl	800a554 <_malloc_r>
 800fb32:	1e05      	subs	r5, r0, #0
 800fb34:	d033      	beq.n	800fb9e <_calloc_r+0x86>
 800fb36:	0003      	movs	r3, r0
 800fb38:	3b08      	subs	r3, #8
 800fb3a:	685a      	ldr	r2, [r3, #4]
 800fb3c:	2303      	movs	r3, #3
 800fb3e:	439a      	bics	r2, r3
 800fb40:	3a04      	subs	r2, #4
 800fb42:	2a24      	cmp	r2, #36	; 0x24
 800fb44:	d832      	bhi.n	800fbac <_calloc_r+0x94>
 800fb46:	0003      	movs	r3, r0
 800fb48:	2a13      	cmp	r2, #19
 800fb4a:	d90a      	bls.n	800fb62 <_calloc_r+0x4a>
 800fb4c:	6004      	str	r4, [r0, #0]
 800fb4e:	6044      	str	r4, [r0, #4]
 800fb50:	3308      	adds	r3, #8
 800fb52:	2a1b      	cmp	r2, #27
 800fb54:	d905      	bls.n	800fb62 <_calloc_r+0x4a>
 800fb56:	6084      	str	r4, [r0, #8]
 800fb58:	60c4      	str	r4, [r0, #12]
 800fb5a:	2a24      	cmp	r2, #36	; 0x24
 800fb5c:	d021      	beq.n	800fba2 <_calloc_r+0x8a>
 800fb5e:	0003      	movs	r3, r0
 800fb60:	3310      	adds	r3, #16
 800fb62:	2200      	movs	r2, #0
 800fb64:	601a      	str	r2, [r3, #0]
 800fb66:	605a      	str	r2, [r3, #4]
 800fb68:	609a      	str	r2, [r3, #8]
 800fb6a:	e018      	b.n	800fb9e <_calloc_r+0x86>
 800fb6c:	1c33      	adds	r3, r6, #0
 800fb6e:	1c0d      	adds	r5, r1, #0
 800fb70:	b289      	uxth	r1, r1
 800fb72:	b292      	uxth	r2, r2
 800fb74:	434a      	muls	r2, r1
 800fb76:	b2ad      	uxth	r5, r5
 800fb78:	b299      	uxth	r1, r3
 800fb7a:	4369      	muls	r1, r5
 800fb7c:	0c13      	lsrs	r3, r2, #16
 800fb7e:	18c9      	adds	r1, r1, r3
 800fb80:	0c0b      	lsrs	r3, r1, #16
 800fb82:	d107      	bne.n	800fb94 <_calloc_r+0x7c>
 800fb84:	0409      	lsls	r1, r1, #16
 800fb86:	b292      	uxth	r2, r2
 800fb88:	4311      	orrs	r1, r2
 800fb8a:	e7d0      	b.n	800fb2e <_calloc_r+0x16>
 800fb8c:	2e00      	cmp	r6, #0
 800fb8e:	d101      	bne.n	800fb94 <_calloc_r+0x7c>
 800fb90:	1c15      	adds	r5, r2, #0
 800fb92:	e7ed      	b.n	800fb70 <_calloc_r+0x58>
 800fb94:	f7fc f80a 	bl	800bbac <__errno>
 800fb98:	230c      	movs	r3, #12
 800fb9a:	2500      	movs	r5, #0
 800fb9c:	6003      	str	r3, [r0, #0]
 800fb9e:	0028      	movs	r0, r5
 800fba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fba2:	0003      	movs	r3, r0
 800fba4:	6104      	str	r4, [r0, #16]
 800fba6:	3318      	adds	r3, #24
 800fba8:	6144      	str	r4, [r0, #20]
 800fbaa:	e7da      	b.n	800fb62 <_calloc_r+0x4a>
 800fbac:	2100      	movs	r1, #0
 800fbae:	f7fb ff51 	bl	800ba54 <memset>
 800fbb2:	e7f4      	b.n	800fb9e <_calloc_r+0x86>

0800fbb4 <quorem>:
 800fbb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbb6:	6902      	ldr	r2, [r0, #16]
 800fbb8:	690b      	ldr	r3, [r1, #16]
 800fbba:	b089      	sub	sp, #36	; 0x24
 800fbbc:	0007      	movs	r7, r0
 800fbbe:	9104      	str	r1, [sp, #16]
 800fbc0:	2000      	movs	r0, #0
 800fbc2:	429a      	cmp	r2, r3
 800fbc4:	db69      	blt.n	800fc9a <quorem+0xe6>
 800fbc6:	3b01      	subs	r3, #1
 800fbc8:	009c      	lsls	r4, r3, #2
 800fbca:	9301      	str	r3, [sp, #4]
 800fbcc:	000b      	movs	r3, r1
 800fbce:	3314      	adds	r3, #20
 800fbd0:	9306      	str	r3, [sp, #24]
 800fbd2:	191b      	adds	r3, r3, r4
 800fbd4:	9305      	str	r3, [sp, #20]
 800fbd6:	003b      	movs	r3, r7
 800fbd8:	3314      	adds	r3, #20
 800fbda:	9303      	str	r3, [sp, #12]
 800fbdc:	191c      	adds	r4, r3, r4
 800fbde:	9b05      	ldr	r3, [sp, #20]
 800fbe0:	6826      	ldr	r6, [r4, #0]
 800fbe2:	681d      	ldr	r5, [r3, #0]
 800fbe4:	0030      	movs	r0, r6
 800fbe6:	3501      	adds	r5, #1
 800fbe8:	0029      	movs	r1, r5
 800fbea:	f7f0 faa7 	bl	800013c <__udivsi3>
 800fbee:	9002      	str	r0, [sp, #8]
 800fbf0:	42ae      	cmp	r6, r5
 800fbf2:	d329      	bcc.n	800fc48 <quorem+0x94>
 800fbf4:	9b06      	ldr	r3, [sp, #24]
 800fbf6:	2600      	movs	r6, #0
 800fbf8:	469c      	mov	ip, r3
 800fbfa:	9d03      	ldr	r5, [sp, #12]
 800fbfc:	9606      	str	r6, [sp, #24]
 800fbfe:	4662      	mov	r2, ip
 800fc00:	ca08      	ldmia	r2!, {r3}
 800fc02:	6828      	ldr	r0, [r5, #0]
 800fc04:	4694      	mov	ip, r2
 800fc06:	9a02      	ldr	r2, [sp, #8]
 800fc08:	b299      	uxth	r1, r3
 800fc0a:	4351      	muls	r1, r2
 800fc0c:	0c1b      	lsrs	r3, r3, #16
 800fc0e:	4353      	muls	r3, r2
 800fc10:	1989      	adds	r1, r1, r6
 800fc12:	0c0a      	lsrs	r2, r1, #16
 800fc14:	189b      	adds	r3, r3, r2
 800fc16:	9307      	str	r3, [sp, #28]
 800fc18:	0c1e      	lsrs	r6, r3, #16
 800fc1a:	9b06      	ldr	r3, [sp, #24]
 800fc1c:	b282      	uxth	r2, r0
 800fc1e:	18d2      	adds	r2, r2, r3
 800fc20:	466b      	mov	r3, sp
 800fc22:	b289      	uxth	r1, r1
 800fc24:	8b9b      	ldrh	r3, [r3, #28]
 800fc26:	1a52      	subs	r2, r2, r1
 800fc28:	0c01      	lsrs	r1, r0, #16
 800fc2a:	1ac9      	subs	r1, r1, r3
 800fc2c:	1413      	asrs	r3, r2, #16
 800fc2e:	18cb      	adds	r3, r1, r3
 800fc30:	1419      	asrs	r1, r3, #16
 800fc32:	b292      	uxth	r2, r2
 800fc34:	041b      	lsls	r3, r3, #16
 800fc36:	4313      	orrs	r3, r2
 800fc38:	c508      	stmia	r5!, {r3}
 800fc3a:	9b05      	ldr	r3, [sp, #20]
 800fc3c:	9106      	str	r1, [sp, #24]
 800fc3e:	4563      	cmp	r3, ip
 800fc40:	d2dd      	bcs.n	800fbfe <quorem+0x4a>
 800fc42:	6823      	ldr	r3, [r4, #0]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d030      	beq.n	800fcaa <quorem+0xf6>
 800fc48:	0038      	movs	r0, r7
 800fc4a:	9904      	ldr	r1, [sp, #16]
 800fc4c:	f7fc ff04 	bl	800ca58 <__mcmp>
 800fc50:	2800      	cmp	r0, #0
 800fc52:	db21      	blt.n	800fc98 <quorem+0xe4>
 800fc54:	0038      	movs	r0, r7
 800fc56:	2600      	movs	r6, #0
 800fc58:	9b02      	ldr	r3, [sp, #8]
 800fc5a:	9c04      	ldr	r4, [sp, #16]
 800fc5c:	3301      	adds	r3, #1
 800fc5e:	9302      	str	r3, [sp, #8]
 800fc60:	3014      	adds	r0, #20
 800fc62:	3414      	adds	r4, #20
 800fc64:	6803      	ldr	r3, [r0, #0]
 800fc66:	cc02      	ldmia	r4!, {r1}
 800fc68:	b29d      	uxth	r5, r3
 800fc6a:	19ad      	adds	r5, r5, r6
 800fc6c:	b28a      	uxth	r2, r1
 800fc6e:	1aaa      	subs	r2, r5, r2
 800fc70:	0c09      	lsrs	r1, r1, #16
 800fc72:	0c1b      	lsrs	r3, r3, #16
 800fc74:	1a5b      	subs	r3, r3, r1
 800fc76:	1411      	asrs	r1, r2, #16
 800fc78:	185b      	adds	r3, r3, r1
 800fc7a:	141e      	asrs	r6, r3, #16
 800fc7c:	b292      	uxth	r2, r2
 800fc7e:	041b      	lsls	r3, r3, #16
 800fc80:	4313      	orrs	r3, r2
 800fc82:	c008      	stmia	r0!, {r3}
 800fc84:	9b05      	ldr	r3, [sp, #20]
 800fc86:	42a3      	cmp	r3, r4
 800fc88:	d2ec      	bcs.n	800fc64 <quorem+0xb0>
 800fc8a:	9b01      	ldr	r3, [sp, #4]
 800fc8c:	9a03      	ldr	r2, [sp, #12]
 800fc8e:	009b      	lsls	r3, r3, #2
 800fc90:	18d3      	adds	r3, r2, r3
 800fc92:	681a      	ldr	r2, [r3, #0]
 800fc94:	2a00      	cmp	r2, #0
 800fc96:	d015      	beq.n	800fcc4 <quorem+0x110>
 800fc98:	9802      	ldr	r0, [sp, #8]
 800fc9a:	b009      	add	sp, #36	; 0x24
 800fc9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc9e:	6823      	ldr	r3, [r4, #0]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d106      	bne.n	800fcb2 <quorem+0xfe>
 800fca4:	9b01      	ldr	r3, [sp, #4]
 800fca6:	3b01      	subs	r3, #1
 800fca8:	9301      	str	r3, [sp, #4]
 800fcaa:	9b03      	ldr	r3, [sp, #12]
 800fcac:	3c04      	subs	r4, #4
 800fcae:	42a3      	cmp	r3, r4
 800fcb0:	d3f5      	bcc.n	800fc9e <quorem+0xea>
 800fcb2:	9b01      	ldr	r3, [sp, #4]
 800fcb4:	613b      	str	r3, [r7, #16]
 800fcb6:	e7c7      	b.n	800fc48 <quorem+0x94>
 800fcb8:	681a      	ldr	r2, [r3, #0]
 800fcba:	2a00      	cmp	r2, #0
 800fcbc:	d106      	bne.n	800fccc <quorem+0x118>
 800fcbe:	9a01      	ldr	r2, [sp, #4]
 800fcc0:	3a01      	subs	r2, #1
 800fcc2:	9201      	str	r2, [sp, #4]
 800fcc4:	9a03      	ldr	r2, [sp, #12]
 800fcc6:	3b04      	subs	r3, #4
 800fcc8:	429a      	cmp	r2, r3
 800fcca:	d3f5      	bcc.n	800fcb8 <quorem+0x104>
 800fccc:	9b01      	ldr	r3, [sp, #4]
 800fcce:	613b      	str	r3, [r7, #16]
 800fcd0:	e7e2      	b.n	800fc98 <quorem+0xe4>
	...

0800fcd4 <_dtoa_r>:
 800fcd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcd6:	0014      	movs	r4, r2
 800fcd8:	001d      	movs	r5, r3
 800fcda:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800fcdc:	b09d      	sub	sp, #116	; 0x74
 800fcde:	9408      	str	r4, [sp, #32]
 800fce0:	9509      	str	r5, [sp, #36]	; 0x24
 800fce2:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800fce4:	9004      	str	r0, [sp, #16]
 800fce6:	2900      	cmp	r1, #0
 800fce8:	d009      	beq.n	800fcfe <_dtoa_r+0x2a>
 800fcea:	2301      	movs	r3, #1
 800fcec:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800fcee:	4093      	lsls	r3, r2
 800fcf0:	604a      	str	r2, [r1, #4]
 800fcf2:	608b      	str	r3, [r1, #8]
 800fcf4:	f7fc fc56 	bl	800c5a4 <_Bfree>
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	9a04      	ldr	r2, [sp, #16]
 800fcfc:	6393      	str	r3, [r2, #56]	; 0x38
 800fcfe:	2d00      	cmp	r5, #0
 800fd00:	da1e      	bge.n	800fd40 <_dtoa_r+0x6c>
 800fd02:	2301      	movs	r3, #1
 800fd04:	6033      	str	r3, [r6, #0]
 800fd06:	006b      	lsls	r3, r5, #1
 800fd08:	085b      	lsrs	r3, r3, #1
 800fd0a:	9309      	str	r3, [sp, #36]	; 0x24
 800fd0c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800fd0e:	4bb5      	ldr	r3, [pc, #724]	; (800ffe4 <_dtoa_r+0x310>)
 800fd10:	4ab4      	ldr	r2, [pc, #720]	; (800ffe4 <_dtoa_r+0x310>)
 800fd12:	403b      	ands	r3, r7
 800fd14:	4293      	cmp	r3, r2
 800fd16:	d116      	bne.n	800fd46 <_dtoa_r+0x72>
 800fd18:	4bb3      	ldr	r3, [pc, #716]	; (800ffe8 <_dtoa_r+0x314>)
 800fd1a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800fd1c:	6013      	str	r3, [r2, #0]
 800fd1e:	033b      	lsls	r3, r7, #12
 800fd20:	0b1b      	lsrs	r3, r3, #12
 800fd22:	4323      	orrs	r3, r4
 800fd24:	d101      	bne.n	800fd2a <_dtoa_r+0x56>
 800fd26:	f000 fdb2 	bl	801088e <_dtoa_r+0xbba>
 800fd2a:	4bb0      	ldr	r3, [pc, #704]	; (800ffec <_dtoa_r+0x318>)
 800fd2c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800fd2e:	9306      	str	r3, [sp, #24]
 800fd30:	2a00      	cmp	r2, #0
 800fd32:	d002      	beq.n	800fd3a <_dtoa_r+0x66>
 800fd34:	4bae      	ldr	r3, [pc, #696]	; (800fff0 <_dtoa_r+0x31c>)
 800fd36:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800fd38:	6013      	str	r3, [r2, #0]
 800fd3a:	9806      	ldr	r0, [sp, #24]
 800fd3c:	b01d      	add	sp, #116	; 0x74
 800fd3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd40:	2300      	movs	r3, #0
 800fd42:	6033      	str	r3, [r6, #0]
 800fd44:	e7e2      	b.n	800fd0c <_dtoa_r+0x38>
 800fd46:	9a08      	ldr	r2, [sp, #32]
 800fd48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd4a:	9210      	str	r2, [sp, #64]	; 0x40
 800fd4c:	9311      	str	r3, [sp, #68]	; 0x44
 800fd4e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800fd50:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fd52:	2200      	movs	r2, #0
 800fd54:	2300      	movs	r3, #0
 800fd56:	f7f0 fb77 	bl	8000448 <__aeabi_dcmpeq>
 800fd5a:	1e06      	subs	r6, r0, #0
 800fd5c:	d009      	beq.n	800fd72 <_dtoa_r+0x9e>
 800fd5e:	2301      	movs	r3, #1
 800fd60:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800fd62:	6013      	str	r3, [r2, #0]
 800fd64:	4ba3      	ldr	r3, [pc, #652]	; (800fff4 <_dtoa_r+0x320>)
 800fd66:	9306      	str	r3, [sp, #24]
 800fd68:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d0e5      	beq.n	800fd3a <_dtoa_r+0x66>
 800fd6e:	4ba2      	ldr	r3, [pc, #648]	; (800fff8 <_dtoa_r+0x324>)
 800fd70:	e7e1      	b.n	800fd36 <_dtoa_r+0x62>
 800fd72:	ab1a      	add	r3, sp, #104	; 0x68
 800fd74:	9301      	str	r3, [sp, #4]
 800fd76:	ab1b      	add	r3, sp, #108	; 0x6c
 800fd78:	9300      	str	r3, [sp, #0]
 800fd7a:	9804      	ldr	r0, [sp, #16]
 800fd7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fd7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fd80:	f7fc ff86 	bl	800cc90 <__d2b>
 800fd84:	007a      	lsls	r2, r7, #1
 800fd86:	9005      	str	r0, [sp, #20]
 800fd88:	0d52      	lsrs	r2, r2, #21
 800fd8a:	d100      	bne.n	800fd8e <_dtoa_r+0xba>
 800fd8c:	e07b      	b.n	800fe86 <_dtoa_r+0x1b2>
 800fd8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fd90:	9617      	str	r6, [sp, #92]	; 0x5c
 800fd92:	0319      	lsls	r1, r3, #12
 800fd94:	4b99      	ldr	r3, [pc, #612]	; (800fffc <_dtoa_r+0x328>)
 800fd96:	0b09      	lsrs	r1, r1, #12
 800fd98:	430b      	orrs	r3, r1
 800fd9a:	4999      	ldr	r1, [pc, #612]	; (8010000 <_dtoa_r+0x32c>)
 800fd9c:	1857      	adds	r7, r2, r1
 800fd9e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800fda0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fda2:	0019      	movs	r1, r3
 800fda4:	2200      	movs	r2, #0
 800fda6:	4b97      	ldr	r3, [pc, #604]	; (8010004 <_dtoa_r+0x330>)
 800fda8:	f7f1 ff22 	bl	8001bf0 <__aeabi_dsub>
 800fdac:	4a96      	ldr	r2, [pc, #600]	; (8010008 <_dtoa_r+0x334>)
 800fdae:	4b97      	ldr	r3, [pc, #604]	; (801000c <_dtoa_r+0x338>)
 800fdb0:	f7f1 fc5c 	bl	800166c <__aeabi_dmul>
 800fdb4:	4a96      	ldr	r2, [pc, #600]	; (8010010 <_dtoa_r+0x33c>)
 800fdb6:	4b97      	ldr	r3, [pc, #604]	; (8010014 <_dtoa_r+0x340>)
 800fdb8:	f7f0 fcfe 	bl	80007b8 <__aeabi_dadd>
 800fdbc:	0004      	movs	r4, r0
 800fdbe:	0038      	movs	r0, r7
 800fdc0:	000d      	movs	r5, r1
 800fdc2:	f7f2 faeb 	bl	800239c <__aeabi_i2d>
 800fdc6:	4a94      	ldr	r2, [pc, #592]	; (8010018 <_dtoa_r+0x344>)
 800fdc8:	4b94      	ldr	r3, [pc, #592]	; (801001c <_dtoa_r+0x348>)
 800fdca:	f7f1 fc4f 	bl	800166c <__aeabi_dmul>
 800fdce:	0002      	movs	r2, r0
 800fdd0:	000b      	movs	r3, r1
 800fdd2:	0020      	movs	r0, r4
 800fdd4:	0029      	movs	r1, r5
 800fdd6:	f7f0 fcef 	bl	80007b8 <__aeabi_dadd>
 800fdda:	0004      	movs	r4, r0
 800fddc:	000d      	movs	r5, r1
 800fdde:	f7f2 faa7 	bl	8002330 <__aeabi_d2iz>
 800fde2:	2200      	movs	r2, #0
 800fde4:	9003      	str	r0, [sp, #12]
 800fde6:	2300      	movs	r3, #0
 800fde8:	0020      	movs	r0, r4
 800fdea:	0029      	movs	r1, r5
 800fdec:	f7f0 fb32 	bl	8000454 <__aeabi_dcmplt>
 800fdf0:	2800      	cmp	r0, #0
 800fdf2:	d00b      	beq.n	800fe0c <_dtoa_r+0x138>
 800fdf4:	9803      	ldr	r0, [sp, #12]
 800fdf6:	f7f2 fad1 	bl	800239c <__aeabi_i2d>
 800fdfa:	002b      	movs	r3, r5
 800fdfc:	0022      	movs	r2, r4
 800fdfe:	f7f0 fb23 	bl	8000448 <__aeabi_dcmpeq>
 800fe02:	4243      	negs	r3, r0
 800fe04:	4158      	adcs	r0, r3
 800fe06:	9b03      	ldr	r3, [sp, #12]
 800fe08:	1a1b      	subs	r3, r3, r0
 800fe0a:	9303      	str	r3, [sp, #12]
 800fe0c:	2301      	movs	r3, #1
 800fe0e:	9316      	str	r3, [sp, #88]	; 0x58
 800fe10:	9b03      	ldr	r3, [sp, #12]
 800fe12:	2b16      	cmp	r3, #22
 800fe14:	d810      	bhi.n	800fe38 <_dtoa_r+0x164>
 800fe16:	9810      	ldr	r0, [sp, #64]	; 0x40
 800fe18:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fe1a:	9a03      	ldr	r2, [sp, #12]
 800fe1c:	4b80      	ldr	r3, [pc, #512]	; (8010020 <_dtoa_r+0x34c>)
 800fe1e:	00d2      	lsls	r2, r2, #3
 800fe20:	189b      	adds	r3, r3, r2
 800fe22:	681a      	ldr	r2, [r3, #0]
 800fe24:	685b      	ldr	r3, [r3, #4]
 800fe26:	f7f0 fb15 	bl	8000454 <__aeabi_dcmplt>
 800fe2a:	2800      	cmp	r0, #0
 800fe2c:	d047      	beq.n	800febe <_dtoa_r+0x1ea>
 800fe2e:	9b03      	ldr	r3, [sp, #12]
 800fe30:	3b01      	subs	r3, #1
 800fe32:	9303      	str	r3, [sp, #12]
 800fe34:	2300      	movs	r3, #0
 800fe36:	9316      	str	r3, [sp, #88]	; 0x58
 800fe38:	2200      	movs	r2, #0
 800fe3a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800fe3c:	920a      	str	r2, [sp, #40]	; 0x28
 800fe3e:	1bdb      	subs	r3, r3, r7
 800fe40:	1e5a      	subs	r2, r3, #1
 800fe42:	d53e      	bpl.n	800fec2 <_dtoa_r+0x1ee>
 800fe44:	2201      	movs	r2, #1
 800fe46:	1ad3      	subs	r3, r2, r3
 800fe48:	930a      	str	r3, [sp, #40]	; 0x28
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	930c      	str	r3, [sp, #48]	; 0x30
 800fe4e:	9b03      	ldr	r3, [sp, #12]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	db38      	blt.n	800fec6 <_dtoa_r+0x1f2>
 800fe54:	9a03      	ldr	r2, [sp, #12]
 800fe56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fe58:	4694      	mov	ip, r2
 800fe5a:	4463      	add	r3, ip
 800fe5c:	930c      	str	r3, [sp, #48]	; 0x30
 800fe5e:	2300      	movs	r3, #0
 800fe60:	9213      	str	r2, [sp, #76]	; 0x4c
 800fe62:	930d      	str	r3, [sp, #52]	; 0x34
 800fe64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fe66:	2401      	movs	r4, #1
 800fe68:	2b09      	cmp	r3, #9
 800fe6a:	d867      	bhi.n	800ff3c <_dtoa_r+0x268>
 800fe6c:	2b05      	cmp	r3, #5
 800fe6e:	dd02      	ble.n	800fe76 <_dtoa_r+0x1a2>
 800fe70:	2400      	movs	r4, #0
 800fe72:	3b04      	subs	r3, #4
 800fe74:	9322      	str	r3, [sp, #136]	; 0x88
 800fe76:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fe78:	1e98      	subs	r0, r3, #2
 800fe7a:	2803      	cmp	r0, #3
 800fe7c:	d867      	bhi.n	800ff4e <_dtoa_r+0x27a>
 800fe7e:	f7f0 f949 	bl	8000114 <__gnu_thumb1_case_uqi>
 800fe82:	3a2b      	.short	0x3a2b
 800fe84:	5b38      	.short	0x5b38
 800fe86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fe88:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800fe8a:	18f6      	adds	r6, r6, r3
 800fe8c:	4b65      	ldr	r3, [pc, #404]	; (8010024 <_dtoa_r+0x350>)
 800fe8e:	18f2      	adds	r2, r6, r3
 800fe90:	2a20      	cmp	r2, #32
 800fe92:	dd0f      	ble.n	800feb4 <_dtoa_r+0x1e0>
 800fe94:	2340      	movs	r3, #64	; 0x40
 800fe96:	1a9b      	subs	r3, r3, r2
 800fe98:	409f      	lsls	r7, r3
 800fe9a:	4b63      	ldr	r3, [pc, #396]	; (8010028 <_dtoa_r+0x354>)
 800fe9c:	0038      	movs	r0, r7
 800fe9e:	18f3      	adds	r3, r6, r3
 800fea0:	40dc      	lsrs	r4, r3
 800fea2:	4320      	orrs	r0, r4
 800fea4:	f7f2 faaa 	bl	80023fc <__aeabi_ui2d>
 800fea8:	2201      	movs	r2, #1
 800feaa:	4b60      	ldr	r3, [pc, #384]	; (801002c <_dtoa_r+0x358>)
 800feac:	1e77      	subs	r7, r6, #1
 800feae:	18cb      	adds	r3, r1, r3
 800feb0:	9217      	str	r2, [sp, #92]	; 0x5c
 800feb2:	e776      	b.n	800fda2 <_dtoa_r+0xce>
 800feb4:	2320      	movs	r3, #32
 800feb6:	0020      	movs	r0, r4
 800feb8:	1a9b      	subs	r3, r3, r2
 800feba:	4098      	lsls	r0, r3
 800febc:	e7f2      	b.n	800fea4 <_dtoa_r+0x1d0>
 800febe:	9016      	str	r0, [sp, #88]	; 0x58
 800fec0:	e7ba      	b.n	800fe38 <_dtoa_r+0x164>
 800fec2:	920c      	str	r2, [sp, #48]	; 0x30
 800fec4:	e7c3      	b.n	800fe4e <_dtoa_r+0x17a>
 800fec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fec8:	9a03      	ldr	r2, [sp, #12]
 800feca:	1a9b      	subs	r3, r3, r2
 800fecc:	930a      	str	r3, [sp, #40]	; 0x28
 800fece:	4253      	negs	r3, r2
 800fed0:	930d      	str	r3, [sp, #52]	; 0x34
 800fed2:	2300      	movs	r3, #0
 800fed4:	9313      	str	r3, [sp, #76]	; 0x4c
 800fed6:	e7c5      	b.n	800fe64 <_dtoa_r+0x190>
 800fed8:	2300      	movs	r3, #0
 800feda:	930f      	str	r3, [sp, #60]	; 0x3c
 800fedc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800fede:	930b      	str	r3, [sp, #44]	; 0x2c
 800fee0:	9307      	str	r3, [sp, #28]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	dc13      	bgt.n	800ff0e <_dtoa_r+0x23a>
 800fee6:	2301      	movs	r3, #1
 800fee8:	001a      	movs	r2, r3
 800feea:	930b      	str	r3, [sp, #44]	; 0x2c
 800feec:	9307      	str	r3, [sp, #28]
 800feee:	9223      	str	r2, [sp, #140]	; 0x8c
 800fef0:	e00d      	b.n	800ff0e <_dtoa_r+0x23a>
 800fef2:	2301      	movs	r3, #1
 800fef4:	e7f1      	b.n	800feda <_dtoa_r+0x206>
 800fef6:	2300      	movs	r3, #0
 800fef8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800fefa:	930f      	str	r3, [sp, #60]	; 0x3c
 800fefc:	4694      	mov	ip, r2
 800fefe:	9b03      	ldr	r3, [sp, #12]
 800ff00:	4463      	add	r3, ip
 800ff02:	930b      	str	r3, [sp, #44]	; 0x2c
 800ff04:	3301      	adds	r3, #1
 800ff06:	9307      	str	r3, [sp, #28]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	dc00      	bgt.n	800ff0e <_dtoa_r+0x23a>
 800ff0c:	2301      	movs	r3, #1
 800ff0e:	2100      	movs	r1, #0
 800ff10:	2204      	movs	r2, #4
 800ff12:	0010      	movs	r0, r2
 800ff14:	3014      	adds	r0, #20
 800ff16:	4298      	cmp	r0, r3
 800ff18:	d91d      	bls.n	800ff56 <_dtoa_r+0x282>
 800ff1a:	9b04      	ldr	r3, [sp, #16]
 800ff1c:	0018      	movs	r0, r3
 800ff1e:	63d9      	str	r1, [r3, #60]	; 0x3c
 800ff20:	f7fc fb18 	bl	800c554 <_Balloc>
 800ff24:	9006      	str	r0, [sp, #24]
 800ff26:	2800      	cmp	r0, #0
 800ff28:	d118      	bne.n	800ff5c <_dtoa_r+0x288>
 800ff2a:	21b0      	movs	r1, #176	; 0xb0
 800ff2c:	4b40      	ldr	r3, [pc, #256]	; (8010030 <_dtoa_r+0x35c>)
 800ff2e:	4841      	ldr	r0, [pc, #260]	; (8010034 <_dtoa_r+0x360>)
 800ff30:	9a06      	ldr	r2, [sp, #24]
 800ff32:	31ff      	adds	r1, #255	; 0xff
 800ff34:	f7ff fdd2 	bl	800fadc <__assert_func>
 800ff38:	2301      	movs	r3, #1
 800ff3a:	e7dd      	b.n	800fef8 <_dtoa_r+0x224>
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	940f      	str	r4, [sp, #60]	; 0x3c
 800ff40:	9322      	str	r3, [sp, #136]	; 0x88
 800ff42:	3b01      	subs	r3, #1
 800ff44:	930b      	str	r3, [sp, #44]	; 0x2c
 800ff46:	9307      	str	r3, [sp, #28]
 800ff48:	2200      	movs	r2, #0
 800ff4a:	3313      	adds	r3, #19
 800ff4c:	e7cf      	b.n	800feee <_dtoa_r+0x21a>
 800ff4e:	2301      	movs	r3, #1
 800ff50:	930f      	str	r3, [sp, #60]	; 0x3c
 800ff52:	3b02      	subs	r3, #2
 800ff54:	e7f6      	b.n	800ff44 <_dtoa_r+0x270>
 800ff56:	3101      	adds	r1, #1
 800ff58:	0052      	lsls	r2, r2, #1
 800ff5a:	e7da      	b.n	800ff12 <_dtoa_r+0x23e>
 800ff5c:	9b04      	ldr	r3, [sp, #16]
 800ff5e:	9a06      	ldr	r2, [sp, #24]
 800ff60:	639a      	str	r2, [r3, #56]	; 0x38
 800ff62:	9b07      	ldr	r3, [sp, #28]
 800ff64:	2b0e      	cmp	r3, #14
 800ff66:	d900      	bls.n	800ff6a <_dtoa_r+0x296>
 800ff68:	e0e3      	b.n	8010132 <_dtoa_r+0x45e>
 800ff6a:	2c00      	cmp	r4, #0
 800ff6c:	d100      	bne.n	800ff70 <_dtoa_r+0x29c>
 800ff6e:	e0e0      	b.n	8010132 <_dtoa_r+0x45e>
 800ff70:	9b03      	ldr	r3, [sp, #12]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	dd62      	ble.n	801003c <_dtoa_r+0x368>
 800ff76:	210f      	movs	r1, #15
 800ff78:	9a03      	ldr	r2, [sp, #12]
 800ff7a:	4b29      	ldr	r3, [pc, #164]	; (8010020 <_dtoa_r+0x34c>)
 800ff7c:	400a      	ands	r2, r1
 800ff7e:	00d2      	lsls	r2, r2, #3
 800ff80:	189b      	adds	r3, r3, r2
 800ff82:	681e      	ldr	r6, [r3, #0]
 800ff84:	685f      	ldr	r7, [r3, #4]
 800ff86:	9b03      	ldr	r3, [sp, #12]
 800ff88:	2402      	movs	r4, #2
 800ff8a:	111d      	asrs	r5, r3, #4
 800ff8c:	05db      	lsls	r3, r3, #23
 800ff8e:	d50a      	bpl.n	800ffa6 <_dtoa_r+0x2d2>
 800ff90:	4b29      	ldr	r3, [pc, #164]	; (8010038 <_dtoa_r+0x364>)
 800ff92:	400d      	ands	r5, r1
 800ff94:	6a1a      	ldr	r2, [r3, #32]
 800ff96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff98:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ff9a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ff9c:	f7f0 ff6c 	bl	8000e78 <__aeabi_ddiv>
 800ffa0:	9008      	str	r0, [sp, #32]
 800ffa2:	9109      	str	r1, [sp, #36]	; 0x24
 800ffa4:	3401      	adds	r4, #1
 800ffa6:	4b24      	ldr	r3, [pc, #144]	; (8010038 <_dtoa_r+0x364>)
 800ffa8:	930e      	str	r3, [sp, #56]	; 0x38
 800ffaa:	2d00      	cmp	r5, #0
 800ffac:	d108      	bne.n	800ffc0 <_dtoa_r+0x2ec>
 800ffae:	9808      	ldr	r0, [sp, #32]
 800ffb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ffb2:	0032      	movs	r2, r6
 800ffb4:	003b      	movs	r3, r7
 800ffb6:	f7f0 ff5f 	bl	8000e78 <__aeabi_ddiv>
 800ffba:	9008      	str	r0, [sp, #32]
 800ffbc:	9109      	str	r1, [sp, #36]	; 0x24
 800ffbe:	e058      	b.n	8010072 <_dtoa_r+0x39e>
 800ffc0:	2301      	movs	r3, #1
 800ffc2:	421d      	tst	r5, r3
 800ffc4:	d009      	beq.n	800ffda <_dtoa_r+0x306>
 800ffc6:	18e4      	adds	r4, r4, r3
 800ffc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ffca:	0030      	movs	r0, r6
 800ffcc:	681a      	ldr	r2, [r3, #0]
 800ffce:	685b      	ldr	r3, [r3, #4]
 800ffd0:	0039      	movs	r1, r7
 800ffd2:	f7f1 fb4b 	bl	800166c <__aeabi_dmul>
 800ffd6:	0006      	movs	r6, r0
 800ffd8:	000f      	movs	r7, r1
 800ffda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ffdc:	106d      	asrs	r5, r5, #1
 800ffde:	3308      	adds	r3, #8
 800ffe0:	e7e2      	b.n	800ffa8 <_dtoa_r+0x2d4>
 800ffe2:	46c0      	nop			; (mov r8, r8)
 800ffe4:	7ff00000 	.word	0x7ff00000
 800ffe8:	0000270f 	.word	0x0000270f
 800ffec:	08014325 	.word	0x08014325
 800fff0:	08014328 	.word	0x08014328
 800fff4:	08014296 	.word	0x08014296
 800fff8:	08014297 	.word	0x08014297
 800fffc:	3ff00000 	.word	0x3ff00000
 8010000:	fffffc01 	.word	0xfffffc01
 8010004:	3ff80000 	.word	0x3ff80000
 8010008:	636f4361 	.word	0x636f4361
 801000c:	3fd287a7 	.word	0x3fd287a7
 8010010:	8b60c8b3 	.word	0x8b60c8b3
 8010014:	3fc68a28 	.word	0x3fc68a28
 8010018:	509f79fb 	.word	0x509f79fb
 801001c:	3fd34413 	.word	0x3fd34413
 8010020:	08014190 	.word	0x08014190
 8010024:	00000432 	.word	0x00000432
 8010028:	00000412 	.word	0x00000412
 801002c:	fe100000 	.word	0xfe100000
 8010030:	08014099 	.word	0x08014099
 8010034:	08014329 	.word	0x08014329
 8010038:	08014168 	.word	0x08014168
 801003c:	9b03      	ldr	r3, [sp, #12]
 801003e:	2402      	movs	r4, #2
 8010040:	2b00      	cmp	r3, #0
 8010042:	d016      	beq.n	8010072 <_dtoa_r+0x39e>
 8010044:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010046:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010048:	220f      	movs	r2, #15
 801004a:	425d      	negs	r5, r3
 801004c:	402a      	ands	r2, r5
 801004e:	4bdd      	ldr	r3, [pc, #884]	; (80103c4 <_dtoa_r+0x6f0>)
 8010050:	00d2      	lsls	r2, r2, #3
 8010052:	189b      	adds	r3, r3, r2
 8010054:	681a      	ldr	r2, [r3, #0]
 8010056:	685b      	ldr	r3, [r3, #4]
 8010058:	f7f1 fb08 	bl	800166c <__aeabi_dmul>
 801005c:	2701      	movs	r7, #1
 801005e:	2300      	movs	r3, #0
 8010060:	9008      	str	r0, [sp, #32]
 8010062:	9109      	str	r1, [sp, #36]	; 0x24
 8010064:	4ed8      	ldr	r6, [pc, #864]	; (80103c8 <_dtoa_r+0x6f4>)
 8010066:	112d      	asrs	r5, r5, #4
 8010068:	2d00      	cmp	r5, #0
 801006a:	d000      	beq.n	801006e <_dtoa_r+0x39a>
 801006c:	e091      	b.n	8010192 <_dtoa_r+0x4be>
 801006e:	2b00      	cmp	r3, #0
 8010070:	d1a3      	bne.n	800ffba <_dtoa_r+0x2e6>
 8010072:	9e08      	ldr	r6, [sp, #32]
 8010074:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010076:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010078:	2b00      	cmp	r3, #0
 801007a:	d100      	bne.n	801007e <_dtoa_r+0x3aa>
 801007c:	e094      	b.n	80101a8 <_dtoa_r+0x4d4>
 801007e:	2200      	movs	r2, #0
 8010080:	0030      	movs	r0, r6
 8010082:	0039      	movs	r1, r7
 8010084:	4bd1      	ldr	r3, [pc, #836]	; (80103cc <_dtoa_r+0x6f8>)
 8010086:	f7f0 f9e5 	bl	8000454 <__aeabi_dcmplt>
 801008a:	2800      	cmp	r0, #0
 801008c:	d100      	bne.n	8010090 <_dtoa_r+0x3bc>
 801008e:	e08b      	b.n	80101a8 <_dtoa_r+0x4d4>
 8010090:	9b07      	ldr	r3, [sp, #28]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d100      	bne.n	8010098 <_dtoa_r+0x3c4>
 8010096:	e087      	b.n	80101a8 <_dtoa_r+0x4d4>
 8010098:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801009a:	2b00      	cmp	r3, #0
 801009c:	dd45      	ble.n	801012a <_dtoa_r+0x456>
 801009e:	9b03      	ldr	r3, [sp, #12]
 80100a0:	2200      	movs	r2, #0
 80100a2:	3b01      	subs	r3, #1
 80100a4:	930e      	str	r3, [sp, #56]	; 0x38
 80100a6:	0030      	movs	r0, r6
 80100a8:	4bc9      	ldr	r3, [pc, #804]	; (80103d0 <_dtoa_r+0x6fc>)
 80100aa:	0039      	movs	r1, r7
 80100ac:	f7f1 fade 	bl	800166c <__aeabi_dmul>
 80100b0:	9008      	str	r0, [sp, #32]
 80100b2:	9109      	str	r1, [sp, #36]	; 0x24
 80100b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80100b6:	3401      	adds	r4, #1
 80100b8:	0020      	movs	r0, r4
 80100ba:	9e08      	ldr	r6, [sp, #32]
 80100bc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80100be:	9312      	str	r3, [sp, #72]	; 0x48
 80100c0:	f7f2 f96c 	bl	800239c <__aeabi_i2d>
 80100c4:	0032      	movs	r2, r6
 80100c6:	003b      	movs	r3, r7
 80100c8:	f7f1 fad0 	bl	800166c <__aeabi_dmul>
 80100cc:	2200      	movs	r2, #0
 80100ce:	4bc1      	ldr	r3, [pc, #772]	; (80103d4 <_dtoa_r+0x700>)
 80100d0:	f7f0 fb72 	bl	80007b8 <__aeabi_dadd>
 80100d4:	4ac0      	ldr	r2, [pc, #768]	; (80103d8 <_dtoa_r+0x704>)
 80100d6:	9014      	str	r0, [sp, #80]	; 0x50
 80100d8:	9115      	str	r1, [sp, #84]	; 0x54
 80100da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80100dc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80100de:	4694      	mov	ip, r2
 80100e0:	9308      	str	r3, [sp, #32]
 80100e2:	9409      	str	r4, [sp, #36]	; 0x24
 80100e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80100e6:	4463      	add	r3, ip
 80100e8:	9318      	str	r3, [sp, #96]	; 0x60
 80100ea:	9309      	str	r3, [sp, #36]	; 0x24
 80100ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d15e      	bne.n	80101b0 <_dtoa_r+0x4dc>
 80100f2:	2200      	movs	r2, #0
 80100f4:	4bb9      	ldr	r3, [pc, #740]	; (80103dc <_dtoa_r+0x708>)
 80100f6:	0030      	movs	r0, r6
 80100f8:	0039      	movs	r1, r7
 80100fa:	f7f1 fd79 	bl	8001bf0 <__aeabi_dsub>
 80100fe:	9a08      	ldr	r2, [sp, #32]
 8010100:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010102:	0004      	movs	r4, r0
 8010104:	000d      	movs	r5, r1
 8010106:	f7f0 f9b9 	bl	800047c <__aeabi_dcmpgt>
 801010a:	2800      	cmp	r0, #0
 801010c:	d000      	beq.n	8010110 <_dtoa_r+0x43c>
 801010e:	e2b3      	b.n	8010678 <_dtoa_r+0x9a4>
 8010110:	48b3      	ldr	r0, [pc, #716]	; (80103e0 <_dtoa_r+0x70c>)
 8010112:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010114:	4684      	mov	ip, r0
 8010116:	4461      	add	r1, ip
 8010118:	000b      	movs	r3, r1
 801011a:	0020      	movs	r0, r4
 801011c:	0029      	movs	r1, r5
 801011e:	9a08      	ldr	r2, [sp, #32]
 8010120:	f7f0 f998 	bl	8000454 <__aeabi_dcmplt>
 8010124:	2800      	cmp	r0, #0
 8010126:	d000      	beq.n	801012a <_dtoa_r+0x456>
 8010128:	e2a3      	b.n	8010672 <_dtoa_r+0x99e>
 801012a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801012c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801012e:	9308      	str	r3, [sp, #32]
 8010130:	9409      	str	r4, [sp, #36]	; 0x24
 8010132:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010134:	2b00      	cmp	r3, #0
 8010136:	da00      	bge.n	801013a <_dtoa_r+0x466>
 8010138:	e179      	b.n	801042e <_dtoa_r+0x75a>
 801013a:	9a03      	ldr	r2, [sp, #12]
 801013c:	2a0e      	cmp	r2, #14
 801013e:	dd00      	ble.n	8010142 <_dtoa_r+0x46e>
 8010140:	e175      	b.n	801042e <_dtoa_r+0x75a>
 8010142:	4ba0      	ldr	r3, [pc, #640]	; (80103c4 <_dtoa_r+0x6f0>)
 8010144:	00d2      	lsls	r2, r2, #3
 8010146:	189b      	adds	r3, r3, r2
 8010148:	681e      	ldr	r6, [r3, #0]
 801014a:	685f      	ldr	r7, [r3, #4]
 801014c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801014e:	2b00      	cmp	r3, #0
 8010150:	db00      	blt.n	8010154 <_dtoa_r+0x480>
 8010152:	e0e5      	b.n	8010320 <_dtoa_r+0x64c>
 8010154:	9b07      	ldr	r3, [sp, #28]
 8010156:	2b00      	cmp	r3, #0
 8010158:	dd00      	ble.n	801015c <_dtoa_r+0x488>
 801015a:	e0e1      	b.n	8010320 <_dtoa_r+0x64c>
 801015c:	d000      	beq.n	8010160 <_dtoa_r+0x48c>
 801015e:	e288      	b.n	8010672 <_dtoa_r+0x99e>
 8010160:	2200      	movs	r2, #0
 8010162:	0030      	movs	r0, r6
 8010164:	0039      	movs	r1, r7
 8010166:	4b9d      	ldr	r3, [pc, #628]	; (80103dc <_dtoa_r+0x708>)
 8010168:	f7f1 fa80 	bl	800166c <__aeabi_dmul>
 801016c:	9a08      	ldr	r2, [sp, #32]
 801016e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010170:	f7f0 f98e 	bl	8000490 <__aeabi_dcmpge>
 8010174:	9e07      	ldr	r6, [sp, #28]
 8010176:	0037      	movs	r7, r6
 8010178:	2800      	cmp	r0, #0
 801017a:	d000      	beq.n	801017e <_dtoa_r+0x4aa>
 801017c:	e25f      	b.n	801063e <_dtoa_r+0x96a>
 801017e:	9b06      	ldr	r3, [sp, #24]
 8010180:	9a06      	ldr	r2, [sp, #24]
 8010182:	3301      	adds	r3, #1
 8010184:	9308      	str	r3, [sp, #32]
 8010186:	2331      	movs	r3, #49	; 0x31
 8010188:	7013      	strb	r3, [r2, #0]
 801018a:	9b03      	ldr	r3, [sp, #12]
 801018c:	3301      	adds	r3, #1
 801018e:	9303      	str	r3, [sp, #12]
 8010190:	e25a      	b.n	8010648 <_dtoa_r+0x974>
 8010192:	423d      	tst	r5, r7
 8010194:	d005      	beq.n	80101a2 <_dtoa_r+0x4ce>
 8010196:	6832      	ldr	r2, [r6, #0]
 8010198:	6873      	ldr	r3, [r6, #4]
 801019a:	f7f1 fa67 	bl	800166c <__aeabi_dmul>
 801019e:	003b      	movs	r3, r7
 80101a0:	3401      	adds	r4, #1
 80101a2:	106d      	asrs	r5, r5, #1
 80101a4:	3608      	adds	r6, #8
 80101a6:	e75f      	b.n	8010068 <_dtoa_r+0x394>
 80101a8:	9b03      	ldr	r3, [sp, #12]
 80101aa:	930e      	str	r3, [sp, #56]	; 0x38
 80101ac:	9b07      	ldr	r3, [sp, #28]
 80101ae:	e783      	b.n	80100b8 <_dtoa_r+0x3e4>
 80101b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80101b2:	4b84      	ldr	r3, [pc, #528]	; (80103c4 <_dtoa_r+0x6f0>)
 80101b4:	3a01      	subs	r2, #1
 80101b6:	00d2      	lsls	r2, r2, #3
 80101b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80101ba:	189b      	adds	r3, r3, r2
 80101bc:	9c08      	ldr	r4, [sp, #32]
 80101be:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80101c0:	681a      	ldr	r2, [r3, #0]
 80101c2:	685b      	ldr	r3, [r3, #4]
 80101c4:	2900      	cmp	r1, #0
 80101c6:	d051      	beq.n	801026c <_dtoa_r+0x598>
 80101c8:	2000      	movs	r0, #0
 80101ca:	4986      	ldr	r1, [pc, #536]	; (80103e4 <_dtoa_r+0x710>)
 80101cc:	f7f0 fe54 	bl	8000e78 <__aeabi_ddiv>
 80101d0:	0022      	movs	r2, r4
 80101d2:	002b      	movs	r3, r5
 80101d4:	f7f1 fd0c 	bl	8001bf0 <__aeabi_dsub>
 80101d8:	9a06      	ldr	r2, [sp, #24]
 80101da:	0004      	movs	r4, r0
 80101dc:	4694      	mov	ip, r2
 80101de:	000d      	movs	r5, r1
 80101e0:	9b06      	ldr	r3, [sp, #24]
 80101e2:	9314      	str	r3, [sp, #80]	; 0x50
 80101e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80101e6:	4463      	add	r3, ip
 80101e8:	9318      	str	r3, [sp, #96]	; 0x60
 80101ea:	0039      	movs	r1, r7
 80101ec:	0030      	movs	r0, r6
 80101ee:	f7f2 f89f 	bl	8002330 <__aeabi_d2iz>
 80101f2:	9012      	str	r0, [sp, #72]	; 0x48
 80101f4:	f7f2 f8d2 	bl	800239c <__aeabi_i2d>
 80101f8:	0002      	movs	r2, r0
 80101fa:	000b      	movs	r3, r1
 80101fc:	0030      	movs	r0, r6
 80101fe:	0039      	movs	r1, r7
 8010200:	f7f1 fcf6 	bl	8001bf0 <__aeabi_dsub>
 8010204:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010206:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010208:	3301      	adds	r3, #1
 801020a:	9308      	str	r3, [sp, #32]
 801020c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801020e:	0006      	movs	r6, r0
 8010210:	3330      	adds	r3, #48	; 0x30
 8010212:	7013      	strb	r3, [r2, #0]
 8010214:	0022      	movs	r2, r4
 8010216:	002b      	movs	r3, r5
 8010218:	000f      	movs	r7, r1
 801021a:	f7f0 f91b 	bl	8000454 <__aeabi_dcmplt>
 801021e:	2800      	cmp	r0, #0
 8010220:	d174      	bne.n	801030c <_dtoa_r+0x638>
 8010222:	0032      	movs	r2, r6
 8010224:	003b      	movs	r3, r7
 8010226:	2000      	movs	r0, #0
 8010228:	4968      	ldr	r1, [pc, #416]	; (80103cc <_dtoa_r+0x6f8>)
 801022a:	f7f1 fce1 	bl	8001bf0 <__aeabi_dsub>
 801022e:	0022      	movs	r2, r4
 8010230:	002b      	movs	r3, r5
 8010232:	f7f0 f90f 	bl	8000454 <__aeabi_dcmplt>
 8010236:	2800      	cmp	r0, #0
 8010238:	d000      	beq.n	801023c <_dtoa_r+0x568>
 801023a:	e0d7      	b.n	80103ec <_dtoa_r+0x718>
 801023c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801023e:	9a08      	ldr	r2, [sp, #32]
 8010240:	4293      	cmp	r3, r2
 8010242:	d100      	bne.n	8010246 <_dtoa_r+0x572>
 8010244:	e771      	b.n	801012a <_dtoa_r+0x456>
 8010246:	2200      	movs	r2, #0
 8010248:	0020      	movs	r0, r4
 801024a:	0029      	movs	r1, r5
 801024c:	4b60      	ldr	r3, [pc, #384]	; (80103d0 <_dtoa_r+0x6fc>)
 801024e:	f7f1 fa0d 	bl	800166c <__aeabi_dmul>
 8010252:	4b5f      	ldr	r3, [pc, #380]	; (80103d0 <_dtoa_r+0x6fc>)
 8010254:	0004      	movs	r4, r0
 8010256:	000d      	movs	r5, r1
 8010258:	0030      	movs	r0, r6
 801025a:	0039      	movs	r1, r7
 801025c:	2200      	movs	r2, #0
 801025e:	f7f1 fa05 	bl	800166c <__aeabi_dmul>
 8010262:	9b08      	ldr	r3, [sp, #32]
 8010264:	0006      	movs	r6, r0
 8010266:	000f      	movs	r7, r1
 8010268:	9314      	str	r3, [sp, #80]	; 0x50
 801026a:	e7be      	b.n	80101ea <_dtoa_r+0x516>
 801026c:	0020      	movs	r0, r4
 801026e:	0029      	movs	r1, r5
 8010270:	f7f1 f9fc 	bl	800166c <__aeabi_dmul>
 8010274:	9a06      	ldr	r2, [sp, #24]
 8010276:	9b06      	ldr	r3, [sp, #24]
 8010278:	4694      	mov	ip, r2
 801027a:	9308      	str	r3, [sp, #32]
 801027c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801027e:	9014      	str	r0, [sp, #80]	; 0x50
 8010280:	9115      	str	r1, [sp, #84]	; 0x54
 8010282:	4463      	add	r3, ip
 8010284:	9319      	str	r3, [sp, #100]	; 0x64
 8010286:	0030      	movs	r0, r6
 8010288:	0039      	movs	r1, r7
 801028a:	f7f2 f851 	bl	8002330 <__aeabi_d2iz>
 801028e:	9018      	str	r0, [sp, #96]	; 0x60
 8010290:	f7f2 f884 	bl	800239c <__aeabi_i2d>
 8010294:	0002      	movs	r2, r0
 8010296:	000b      	movs	r3, r1
 8010298:	0030      	movs	r0, r6
 801029a:	0039      	movs	r1, r7
 801029c:	f7f1 fca8 	bl	8001bf0 <__aeabi_dsub>
 80102a0:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80102a2:	9b08      	ldr	r3, [sp, #32]
 80102a4:	3630      	adds	r6, #48	; 0x30
 80102a6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80102a8:	701e      	strb	r6, [r3, #0]
 80102aa:	3301      	adds	r3, #1
 80102ac:	0004      	movs	r4, r0
 80102ae:	000d      	movs	r5, r1
 80102b0:	9308      	str	r3, [sp, #32]
 80102b2:	4293      	cmp	r3, r2
 80102b4:	d12d      	bne.n	8010312 <_dtoa_r+0x63e>
 80102b6:	9814      	ldr	r0, [sp, #80]	; 0x50
 80102b8:	9915      	ldr	r1, [sp, #84]	; 0x54
 80102ba:	9a06      	ldr	r2, [sp, #24]
 80102bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80102be:	4694      	mov	ip, r2
 80102c0:	4463      	add	r3, ip
 80102c2:	2200      	movs	r2, #0
 80102c4:	9308      	str	r3, [sp, #32]
 80102c6:	4b47      	ldr	r3, [pc, #284]	; (80103e4 <_dtoa_r+0x710>)
 80102c8:	f7f0 fa76 	bl	80007b8 <__aeabi_dadd>
 80102cc:	0002      	movs	r2, r0
 80102ce:	000b      	movs	r3, r1
 80102d0:	0020      	movs	r0, r4
 80102d2:	0029      	movs	r1, r5
 80102d4:	f7f0 f8d2 	bl	800047c <__aeabi_dcmpgt>
 80102d8:	2800      	cmp	r0, #0
 80102da:	d000      	beq.n	80102de <_dtoa_r+0x60a>
 80102dc:	e086      	b.n	80103ec <_dtoa_r+0x718>
 80102de:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80102e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80102e2:	2000      	movs	r0, #0
 80102e4:	493f      	ldr	r1, [pc, #252]	; (80103e4 <_dtoa_r+0x710>)
 80102e6:	f7f1 fc83 	bl	8001bf0 <__aeabi_dsub>
 80102ea:	0002      	movs	r2, r0
 80102ec:	000b      	movs	r3, r1
 80102ee:	0020      	movs	r0, r4
 80102f0:	0029      	movs	r1, r5
 80102f2:	f7f0 f8af 	bl	8000454 <__aeabi_dcmplt>
 80102f6:	2800      	cmp	r0, #0
 80102f8:	d100      	bne.n	80102fc <_dtoa_r+0x628>
 80102fa:	e716      	b.n	801012a <_dtoa_r+0x456>
 80102fc:	9b08      	ldr	r3, [sp, #32]
 80102fe:	001a      	movs	r2, r3
 8010300:	3a01      	subs	r2, #1
 8010302:	9208      	str	r2, [sp, #32]
 8010304:	7812      	ldrb	r2, [r2, #0]
 8010306:	2a30      	cmp	r2, #48	; 0x30
 8010308:	d0f8      	beq.n	80102fc <_dtoa_r+0x628>
 801030a:	9308      	str	r3, [sp, #32]
 801030c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801030e:	9303      	str	r3, [sp, #12]
 8010310:	e046      	b.n	80103a0 <_dtoa_r+0x6cc>
 8010312:	2200      	movs	r2, #0
 8010314:	4b2e      	ldr	r3, [pc, #184]	; (80103d0 <_dtoa_r+0x6fc>)
 8010316:	f7f1 f9a9 	bl	800166c <__aeabi_dmul>
 801031a:	0006      	movs	r6, r0
 801031c:	000f      	movs	r7, r1
 801031e:	e7b2      	b.n	8010286 <_dtoa_r+0x5b2>
 8010320:	9b06      	ldr	r3, [sp, #24]
 8010322:	9a06      	ldr	r2, [sp, #24]
 8010324:	930a      	str	r3, [sp, #40]	; 0x28
 8010326:	9b07      	ldr	r3, [sp, #28]
 8010328:	9c08      	ldr	r4, [sp, #32]
 801032a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801032c:	3b01      	subs	r3, #1
 801032e:	189b      	adds	r3, r3, r2
 8010330:	930b      	str	r3, [sp, #44]	; 0x2c
 8010332:	0032      	movs	r2, r6
 8010334:	003b      	movs	r3, r7
 8010336:	0020      	movs	r0, r4
 8010338:	0029      	movs	r1, r5
 801033a:	f7f0 fd9d 	bl	8000e78 <__aeabi_ddiv>
 801033e:	f7f1 fff7 	bl	8002330 <__aeabi_d2iz>
 8010342:	9007      	str	r0, [sp, #28]
 8010344:	f7f2 f82a 	bl	800239c <__aeabi_i2d>
 8010348:	0032      	movs	r2, r6
 801034a:	003b      	movs	r3, r7
 801034c:	f7f1 f98e 	bl	800166c <__aeabi_dmul>
 8010350:	0002      	movs	r2, r0
 8010352:	000b      	movs	r3, r1
 8010354:	0020      	movs	r0, r4
 8010356:	0029      	movs	r1, r5
 8010358:	f7f1 fc4a 	bl	8001bf0 <__aeabi_dsub>
 801035c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801035e:	001a      	movs	r2, r3
 8010360:	3201      	adds	r2, #1
 8010362:	920a      	str	r2, [sp, #40]	; 0x28
 8010364:	9208      	str	r2, [sp, #32]
 8010366:	9a07      	ldr	r2, [sp, #28]
 8010368:	3230      	adds	r2, #48	; 0x30
 801036a:	701a      	strb	r2, [r3, #0]
 801036c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801036e:	429a      	cmp	r2, r3
 8010370:	d14f      	bne.n	8010412 <_dtoa_r+0x73e>
 8010372:	0002      	movs	r2, r0
 8010374:	000b      	movs	r3, r1
 8010376:	f7f0 fa1f 	bl	80007b8 <__aeabi_dadd>
 801037a:	0032      	movs	r2, r6
 801037c:	003b      	movs	r3, r7
 801037e:	0004      	movs	r4, r0
 8010380:	000d      	movs	r5, r1
 8010382:	f7f0 f87b 	bl	800047c <__aeabi_dcmpgt>
 8010386:	2800      	cmp	r0, #0
 8010388:	d12e      	bne.n	80103e8 <_dtoa_r+0x714>
 801038a:	0032      	movs	r2, r6
 801038c:	003b      	movs	r3, r7
 801038e:	0020      	movs	r0, r4
 8010390:	0029      	movs	r1, r5
 8010392:	f7f0 f859 	bl	8000448 <__aeabi_dcmpeq>
 8010396:	2800      	cmp	r0, #0
 8010398:	d002      	beq.n	80103a0 <_dtoa_r+0x6cc>
 801039a:	9b07      	ldr	r3, [sp, #28]
 801039c:	07de      	lsls	r6, r3, #31
 801039e:	d423      	bmi.n	80103e8 <_dtoa_r+0x714>
 80103a0:	9905      	ldr	r1, [sp, #20]
 80103a2:	9804      	ldr	r0, [sp, #16]
 80103a4:	f7fc f8fe 	bl	800c5a4 <_Bfree>
 80103a8:	2300      	movs	r3, #0
 80103aa:	9a08      	ldr	r2, [sp, #32]
 80103ac:	7013      	strb	r3, [r2, #0]
 80103ae:	9b03      	ldr	r3, [sp, #12]
 80103b0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80103b2:	3301      	adds	r3, #1
 80103b4:	6013      	str	r3, [r2, #0]
 80103b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d100      	bne.n	80103be <_dtoa_r+0x6ea>
 80103bc:	e4bd      	b.n	800fd3a <_dtoa_r+0x66>
 80103be:	9a08      	ldr	r2, [sp, #32]
 80103c0:	601a      	str	r2, [r3, #0]
 80103c2:	e4ba      	b.n	800fd3a <_dtoa_r+0x66>
 80103c4:	08014190 	.word	0x08014190
 80103c8:	08014168 	.word	0x08014168
 80103cc:	3ff00000 	.word	0x3ff00000
 80103d0:	40240000 	.word	0x40240000
 80103d4:	401c0000 	.word	0x401c0000
 80103d8:	fcc00000 	.word	0xfcc00000
 80103dc:	40140000 	.word	0x40140000
 80103e0:	7cc00000 	.word	0x7cc00000
 80103e4:	3fe00000 	.word	0x3fe00000
 80103e8:	9b03      	ldr	r3, [sp, #12]
 80103ea:	930e      	str	r3, [sp, #56]	; 0x38
 80103ec:	9b08      	ldr	r3, [sp, #32]
 80103ee:	9308      	str	r3, [sp, #32]
 80103f0:	3b01      	subs	r3, #1
 80103f2:	781a      	ldrb	r2, [r3, #0]
 80103f4:	2a39      	cmp	r2, #57	; 0x39
 80103f6:	d108      	bne.n	801040a <_dtoa_r+0x736>
 80103f8:	9a06      	ldr	r2, [sp, #24]
 80103fa:	429a      	cmp	r2, r3
 80103fc:	d1f7      	bne.n	80103ee <_dtoa_r+0x71a>
 80103fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010400:	9906      	ldr	r1, [sp, #24]
 8010402:	3201      	adds	r2, #1
 8010404:	920e      	str	r2, [sp, #56]	; 0x38
 8010406:	2230      	movs	r2, #48	; 0x30
 8010408:	700a      	strb	r2, [r1, #0]
 801040a:	781a      	ldrb	r2, [r3, #0]
 801040c:	3201      	adds	r2, #1
 801040e:	701a      	strb	r2, [r3, #0]
 8010410:	e77c      	b.n	801030c <_dtoa_r+0x638>
 8010412:	2200      	movs	r2, #0
 8010414:	4ba9      	ldr	r3, [pc, #676]	; (80106bc <_dtoa_r+0x9e8>)
 8010416:	f7f1 f929 	bl	800166c <__aeabi_dmul>
 801041a:	2200      	movs	r2, #0
 801041c:	2300      	movs	r3, #0
 801041e:	0004      	movs	r4, r0
 8010420:	000d      	movs	r5, r1
 8010422:	f7f0 f811 	bl	8000448 <__aeabi_dcmpeq>
 8010426:	2800      	cmp	r0, #0
 8010428:	d100      	bne.n	801042c <_dtoa_r+0x758>
 801042a:	e782      	b.n	8010332 <_dtoa_r+0x65e>
 801042c:	e7b8      	b.n	80103a0 <_dtoa_r+0x6cc>
 801042e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8010430:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010432:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010434:	2f00      	cmp	r7, #0
 8010436:	d012      	beq.n	801045e <_dtoa_r+0x78a>
 8010438:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801043a:	2a01      	cmp	r2, #1
 801043c:	dc6e      	bgt.n	801051c <_dtoa_r+0x848>
 801043e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010440:	2a00      	cmp	r2, #0
 8010442:	d065      	beq.n	8010510 <_dtoa_r+0x83c>
 8010444:	4a9e      	ldr	r2, [pc, #632]	; (80106c0 <_dtoa_r+0x9ec>)
 8010446:	189b      	adds	r3, r3, r2
 8010448:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801044a:	2101      	movs	r1, #1
 801044c:	18d2      	adds	r2, r2, r3
 801044e:	920a      	str	r2, [sp, #40]	; 0x28
 8010450:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010452:	9804      	ldr	r0, [sp, #16]
 8010454:	18d3      	adds	r3, r2, r3
 8010456:	930c      	str	r3, [sp, #48]	; 0x30
 8010458:	f7fc f986 	bl	800c768 <__i2b>
 801045c:	0007      	movs	r7, r0
 801045e:	2c00      	cmp	r4, #0
 8010460:	d00e      	beq.n	8010480 <_dtoa_r+0x7ac>
 8010462:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010464:	2b00      	cmp	r3, #0
 8010466:	dd0b      	ble.n	8010480 <_dtoa_r+0x7ac>
 8010468:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801046a:	0023      	movs	r3, r4
 801046c:	4294      	cmp	r4, r2
 801046e:	dd00      	ble.n	8010472 <_dtoa_r+0x79e>
 8010470:	0013      	movs	r3, r2
 8010472:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010474:	1ae4      	subs	r4, r4, r3
 8010476:	1ad2      	subs	r2, r2, r3
 8010478:	920a      	str	r2, [sp, #40]	; 0x28
 801047a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801047c:	1ad3      	subs	r3, r2, r3
 801047e:	930c      	str	r3, [sp, #48]	; 0x30
 8010480:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010482:	2b00      	cmp	r3, #0
 8010484:	d01e      	beq.n	80104c4 <_dtoa_r+0x7f0>
 8010486:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010488:	2b00      	cmp	r3, #0
 801048a:	d05c      	beq.n	8010546 <_dtoa_r+0x872>
 801048c:	2d00      	cmp	r5, #0
 801048e:	dd10      	ble.n	80104b2 <_dtoa_r+0x7de>
 8010490:	0039      	movs	r1, r7
 8010492:	002a      	movs	r2, r5
 8010494:	9804      	ldr	r0, [sp, #16]
 8010496:	f7fc fa2f 	bl	800c8f8 <__pow5mult>
 801049a:	9a05      	ldr	r2, [sp, #20]
 801049c:	0001      	movs	r1, r0
 801049e:	0007      	movs	r7, r0
 80104a0:	9804      	ldr	r0, [sp, #16]
 80104a2:	f7fc f979 	bl	800c798 <__multiply>
 80104a6:	0006      	movs	r6, r0
 80104a8:	9905      	ldr	r1, [sp, #20]
 80104aa:	9804      	ldr	r0, [sp, #16]
 80104ac:	f7fc f87a 	bl	800c5a4 <_Bfree>
 80104b0:	9605      	str	r6, [sp, #20]
 80104b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80104b4:	1b5a      	subs	r2, r3, r5
 80104b6:	42ab      	cmp	r3, r5
 80104b8:	d004      	beq.n	80104c4 <_dtoa_r+0x7f0>
 80104ba:	9905      	ldr	r1, [sp, #20]
 80104bc:	9804      	ldr	r0, [sp, #16]
 80104be:	f7fc fa1b 	bl	800c8f8 <__pow5mult>
 80104c2:	9005      	str	r0, [sp, #20]
 80104c4:	2101      	movs	r1, #1
 80104c6:	9804      	ldr	r0, [sp, #16]
 80104c8:	f7fc f94e 	bl	800c768 <__i2b>
 80104cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80104ce:	0006      	movs	r6, r0
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	dd3a      	ble.n	801054a <_dtoa_r+0x876>
 80104d4:	001a      	movs	r2, r3
 80104d6:	0001      	movs	r1, r0
 80104d8:	9804      	ldr	r0, [sp, #16]
 80104da:	f7fc fa0d 	bl	800c8f8 <__pow5mult>
 80104de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80104e0:	0006      	movs	r6, r0
 80104e2:	2500      	movs	r5, #0
 80104e4:	2b01      	cmp	r3, #1
 80104e6:	dc38      	bgt.n	801055a <_dtoa_r+0x886>
 80104e8:	2500      	movs	r5, #0
 80104ea:	9b08      	ldr	r3, [sp, #32]
 80104ec:	42ab      	cmp	r3, r5
 80104ee:	d130      	bne.n	8010552 <_dtoa_r+0x87e>
 80104f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104f2:	031b      	lsls	r3, r3, #12
 80104f4:	42ab      	cmp	r3, r5
 80104f6:	d12c      	bne.n	8010552 <_dtoa_r+0x87e>
 80104f8:	4b72      	ldr	r3, [pc, #456]	; (80106c4 <_dtoa_r+0x9f0>)
 80104fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80104fc:	4213      	tst	r3, r2
 80104fe:	d028      	beq.n	8010552 <_dtoa_r+0x87e>
 8010500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010502:	3501      	adds	r5, #1
 8010504:	3301      	adds	r3, #1
 8010506:	930a      	str	r3, [sp, #40]	; 0x28
 8010508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801050a:	3301      	adds	r3, #1
 801050c:	930c      	str	r3, [sp, #48]	; 0x30
 801050e:	e020      	b.n	8010552 <_dtoa_r+0x87e>
 8010510:	2336      	movs	r3, #54	; 0x36
 8010512:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010514:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010516:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010518:	1a9b      	subs	r3, r3, r2
 801051a:	e795      	b.n	8010448 <_dtoa_r+0x774>
 801051c:	9b07      	ldr	r3, [sp, #28]
 801051e:	1e5d      	subs	r5, r3, #1
 8010520:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010522:	42ab      	cmp	r3, r5
 8010524:	db07      	blt.n	8010536 <_dtoa_r+0x862>
 8010526:	1b5d      	subs	r5, r3, r5
 8010528:	9b07      	ldr	r3, [sp, #28]
 801052a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801052c:	2b00      	cmp	r3, #0
 801052e:	da8b      	bge.n	8010448 <_dtoa_r+0x774>
 8010530:	1ae4      	subs	r4, r4, r3
 8010532:	2300      	movs	r3, #0
 8010534:	e788      	b.n	8010448 <_dtoa_r+0x774>
 8010536:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010538:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801053a:	1aeb      	subs	r3, r5, r3
 801053c:	18d3      	adds	r3, r2, r3
 801053e:	950d      	str	r5, [sp, #52]	; 0x34
 8010540:	9313      	str	r3, [sp, #76]	; 0x4c
 8010542:	2500      	movs	r5, #0
 8010544:	e7f0      	b.n	8010528 <_dtoa_r+0x854>
 8010546:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010548:	e7b7      	b.n	80104ba <_dtoa_r+0x7e6>
 801054a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801054c:	2500      	movs	r5, #0
 801054e:	2b01      	cmp	r3, #1
 8010550:	ddca      	ble.n	80104e8 <_dtoa_r+0x814>
 8010552:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010554:	2001      	movs	r0, #1
 8010556:	2b00      	cmp	r3, #0
 8010558:	d008      	beq.n	801056c <_dtoa_r+0x898>
 801055a:	6933      	ldr	r3, [r6, #16]
 801055c:	3303      	adds	r3, #3
 801055e:	009b      	lsls	r3, r3, #2
 8010560:	18f3      	adds	r3, r6, r3
 8010562:	6858      	ldr	r0, [r3, #4]
 8010564:	f7fc f8b8 	bl	800c6d8 <__hi0bits>
 8010568:	2320      	movs	r3, #32
 801056a:	1a18      	subs	r0, r3, r0
 801056c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801056e:	1818      	adds	r0, r3, r0
 8010570:	0002      	movs	r2, r0
 8010572:	231f      	movs	r3, #31
 8010574:	401a      	ands	r2, r3
 8010576:	4218      	tst	r0, r3
 8010578:	d047      	beq.n	801060a <_dtoa_r+0x936>
 801057a:	3301      	adds	r3, #1
 801057c:	1a9b      	subs	r3, r3, r2
 801057e:	2b04      	cmp	r3, #4
 8010580:	dd3f      	ble.n	8010602 <_dtoa_r+0x92e>
 8010582:	231c      	movs	r3, #28
 8010584:	1a9b      	subs	r3, r3, r2
 8010586:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010588:	18e4      	adds	r4, r4, r3
 801058a:	18d2      	adds	r2, r2, r3
 801058c:	920a      	str	r2, [sp, #40]	; 0x28
 801058e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010590:	18d3      	adds	r3, r2, r3
 8010592:	930c      	str	r3, [sp, #48]	; 0x30
 8010594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010596:	2b00      	cmp	r3, #0
 8010598:	dd05      	ble.n	80105a6 <_dtoa_r+0x8d2>
 801059a:	001a      	movs	r2, r3
 801059c:	9905      	ldr	r1, [sp, #20]
 801059e:	9804      	ldr	r0, [sp, #16]
 80105a0:	f7fc f9ec 	bl	800c97c <__lshift>
 80105a4:	9005      	str	r0, [sp, #20]
 80105a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	dd05      	ble.n	80105b8 <_dtoa_r+0x8e4>
 80105ac:	0031      	movs	r1, r6
 80105ae:	001a      	movs	r2, r3
 80105b0:	9804      	ldr	r0, [sp, #16]
 80105b2:	f7fc f9e3 	bl	800c97c <__lshift>
 80105b6:	0006      	movs	r6, r0
 80105b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d027      	beq.n	801060e <_dtoa_r+0x93a>
 80105be:	0031      	movs	r1, r6
 80105c0:	9805      	ldr	r0, [sp, #20]
 80105c2:	f7fc fa49 	bl	800ca58 <__mcmp>
 80105c6:	2800      	cmp	r0, #0
 80105c8:	da21      	bge.n	801060e <_dtoa_r+0x93a>
 80105ca:	9b03      	ldr	r3, [sp, #12]
 80105cc:	220a      	movs	r2, #10
 80105ce:	3b01      	subs	r3, #1
 80105d0:	9303      	str	r3, [sp, #12]
 80105d2:	9905      	ldr	r1, [sp, #20]
 80105d4:	2300      	movs	r3, #0
 80105d6:	9804      	ldr	r0, [sp, #16]
 80105d8:	f7fb ffee 	bl	800c5b8 <__multadd>
 80105dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80105de:	9005      	str	r0, [sp, #20]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d100      	bne.n	80105e6 <_dtoa_r+0x912>
 80105e4:	e15d      	b.n	80108a2 <_dtoa_r+0xbce>
 80105e6:	2300      	movs	r3, #0
 80105e8:	0039      	movs	r1, r7
 80105ea:	220a      	movs	r2, #10
 80105ec:	9804      	ldr	r0, [sp, #16]
 80105ee:	f7fb ffe3 	bl	800c5b8 <__multadd>
 80105f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80105f4:	0007      	movs	r7, r0
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	dc49      	bgt.n	801068e <_dtoa_r+0x9ba>
 80105fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80105fc:	2b02      	cmp	r3, #2
 80105fe:	dc0e      	bgt.n	801061e <_dtoa_r+0x94a>
 8010600:	e045      	b.n	801068e <_dtoa_r+0x9ba>
 8010602:	2b04      	cmp	r3, #4
 8010604:	d0c6      	beq.n	8010594 <_dtoa_r+0x8c0>
 8010606:	331c      	adds	r3, #28
 8010608:	e7bd      	b.n	8010586 <_dtoa_r+0x8b2>
 801060a:	0013      	movs	r3, r2
 801060c:	e7fb      	b.n	8010606 <_dtoa_r+0x932>
 801060e:	9b07      	ldr	r3, [sp, #28]
 8010610:	2b00      	cmp	r3, #0
 8010612:	dc36      	bgt.n	8010682 <_dtoa_r+0x9ae>
 8010614:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010616:	2b02      	cmp	r3, #2
 8010618:	dd33      	ble.n	8010682 <_dtoa_r+0x9ae>
 801061a:	9b07      	ldr	r3, [sp, #28]
 801061c:	930b      	str	r3, [sp, #44]	; 0x2c
 801061e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010620:	2b00      	cmp	r3, #0
 8010622:	d10c      	bne.n	801063e <_dtoa_r+0x96a>
 8010624:	0031      	movs	r1, r6
 8010626:	2205      	movs	r2, #5
 8010628:	9804      	ldr	r0, [sp, #16]
 801062a:	f7fb ffc5 	bl	800c5b8 <__multadd>
 801062e:	0006      	movs	r6, r0
 8010630:	0001      	movs	r1, r0
 8010632:	9805      	ldr	r0, [sp, #20]
 8010634:	f7fc fa10 	bl	800ca58 <__mcmp>
 8010638:	2800      	cmp	r0, #0
 801063a:	dd00      	ble.n	801063e <_dtoa_r+0x96a>
 801063c:	e59f      	b.n	801017e <_dtoa_r+0x4aa>
 801063e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010640:	43db      	mvns	r3, r3
 8010642:	9303      	str	r3, [sp, #12]
 8010644:	9b06      	ldr	r3, [sp, #24]
 8010646:	9308      	str	r3, [sp, #32]
 8010648:	2500      	movs	r5, #0
 801064a:	0031      	movs	r1, r6
 801064c:	9804      	ldr	r0, [sp, #16]
 801064e:	f7fb ffa9 	bl	800c5a4 <_Bfree>
 8010652:	2f00      	cmp	r7, #0
 8010654:	d100      	bne.n	8010658 <_dtoa_r+0x984>
 8010656:	e6a3      	b.n	80103a0 <_dtoa_r+0x6cc>
 8010658:	2d00      	cmp	r5, #0
 801065a:	d005      	beq.n	8010668 <_dtoa_r+0x994>
 801065c:	42bd      	cmp	r5, r7
 801065e:	d003      	beq.n	8010668 <_dtoa_r+0x994>
 8010660:	0029      	movs	r1, r5
 8010662:	9804      	ldr	r0, [sp, #16]
 8010664:	f7fb ff9e 	bl	800c5a4 <_Bfree>
 8010668:	0039      	movs	r1, r7
 801066a:	9804      	ldr	r0, [sp, #16]
 801066c:	f7fb ff9a 	bl	800c5a4 <_Bfree>
 8010670:	e696      	b.n	80103a0 <_dtoa_r+0x6cc>
 8010672:	2600      	movs	r6, #0
 8010674:	0037      	movs	r7, r6
 8010676:	e7e2      	b.n	801063e <_dtoa_r+0x96a>
 8010678:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801067a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801067c:	9303      	str	r3, [sp, #12]
 801067e:	0037      	movs	r7, r6
 8010680:	e57d      	b.n	801017e <_dtoa_r+0x4aa>
 8010682:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010684:	2b00      	cmp	r3, #0
 8010686:	d100      	bne.n	801068a <_dtoa_r+0x9b6>
 8010688:	e0c3      	b.n	8010812 <_dtoa_r+0xb3e>
 801068a:	9b07      	ldr	r3, [sp, #28]
 801068c:	930b      	str	r3, [sp, #44]	; 0x2c
 801068e:	2c00      	cmp	r4, #0
 8010690:	dd05      	ble.n	801069e <_dtoa_r+0x9ca>
 8010692:	0039      	movs	r1, r7
 8010694:	0022      	movs	r2, r4
 8010696:	9804      	ldr	r0, [sp, #16]
 8010698:	f7fc f970 	bl	800c97c <__lshift>
 801069c:	0007      	movs	r7, r0
 801069e:	0038      	movs	r0, r7
 80106a0:	2d00      	cmp	r5, #0
 80106a2:	d024      	beq.n	80106ee <_dtoa_r+0xa1a>
 80106a4:	6879      	ldr	r1, [r7, #4]
 80106a6:	9804      	ldr	r0, [sp, #16]
 80106a8:	f7fb ff54 	bl	800c554 <_Balloc>
 80106ac:	1e04      	subs	r4, r0, #0
 80106ae:	d111      	bne.n	80106d4 <_dtoa_r+0xa00>
 80106b0:	0022      	movs	r2, r4
 80106b2:	4b05      	ldr	r3, [pc, #20]	; (80106c8 <_dtoa_r+0x9f4>)
 80106b4:	4805      	ldr	r0, [pc, #20]	; (80106cc <_dtoa_r+0x9f8>)
 80106b6:	4906      	ldr	r1, [pc, #24]	; (80106d0 <_dtoa_r+0x9fc>)
 80106b8:	e43c      	b.n	800ff34 <_dtoa_r+0x260>
 80106ba:	46c0      	nop			; (mov r8, r8)
 80106bc:	40240000 	.word	0x40240000
 80106c0:	00000433 	.word	0x00000433
 80106c4:	7ff00000 	.word	0x7ff00000
 80106c8:	08014099 	.word	0x08014099
 80106cc:	08014329 	.word	0x08014329
 80106d0:	000002ef 	.word	0x000002ef
 80106d4:	0039      	movs	r1, r7
 80106d6:	693a      	ldr	r2, [r7, #16]
 80106d8:	310c      	adds	r1, #12
 80106da:	3202      	adds	r2, #2
 80106dc:	0092      	lsls	r2, r2, #2
 80106de:	300c      	adds	r0, #12
 80106e0:	f7fb fa9d 	bl	800bc1e <memcpy>
 80106e4:	2201      	movs	r2, #1
 80106e6:	0021      	movs	r1, r4
 80106e8:	9804      	ldr	r0, [sp, #16]
 80106ea:	f7fc f947 	bl	800c97c <__lshift>
 80106ee:	9b06      	ldr	r3, [sp, #24]
 80106f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80106f2:	9307      	str	r3, [sp, #28]
 80106f4:	3b01      	subs	r3, #1
 80106f6:	189b      	adds	r3, r3, r2
 80106f8:	2201      	movs	r2, #1
 80106fa:	003d      	movs	r5, r7
 80106fc:	0007      	movs	r7, r0
 80106fe:	930e      	str	r3, [sp, #56]	; 0x38
 8010700:	9b08      	ldr	r3, [sp, #32]
 8010702:	4013      	ands	r3, r2
 8010704:	930d      	str	r3, [sp, #52]	; 0x34
 8010706:	0031      	movs	r1, r6
 8010708:	9805      	ldr	r0, [sp, #20]
 801070a:	f7ff fa53 	bl	800fbb4 <quorem>
 801070e:	0029      	movs	r1, r5
 8010710:	0004      	movs	r4, r0
 8010712:	900b      	str	r0, [sp, #44]	; 0x2c
 8010714:	9805      	ldr	r0, [sp, #20]
 8010716:	f7fc f99f 	bl	800ca58 <__mcmp>
 801071a:	003a      	movs	r2, r7
 801071c:	900c      	str	r0, [sp, #48]	; 0x30
 801071e:	0031      	movs	r1, r6
 8010720:	9804      	ldr	r0, [sp, #16]
 8010722:	f7fc f9b5 	bl	800ca90 <__mdiff>
 8010726:	2201      	movs	r2, #1
 8010728:	68c3      	ldr	r3, [r0, #12]
 801072a:	3430      	adds	r4, #48	; 0x30
 801072c:	9008      	str	r0, [sp, #32]
 801072e:	920a      	str	r2, [sp, #40]	; 0x28
 8010730:	2b00      	cmp	r3, #0
 8010732:	d104      	bne.n	801073e <_dtoa_r+0xa6a>
 8010734:	0001      	movs	r1, r0
 8010736:	9805      	ldr	r0, [sp, #20]
 8010738:	f7fc f98e 	bl	800ca58 <__mcmp>
 801073c:	900a      	str	r0, [sp, #40]	; 0x28
 801073e:	9908      	ldr	r1, [sp, #32]
 8010740:	9804      	ldr	r0, [sp, #16]
 8010742:	f7fb ff2f 	bl	800c5a4 <_Bfree>
 8010746:	9b07      	ldr	r3, [sp, #28]
 8010748:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801074a:	3301      	adds	r3, #1
 801074c:	9308      	str	r3, [sp, #32]
 801074e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010750:	4313      	orrs	r3, r2
 8010752:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010754:	4313      	orrs	r3, r2
 8010756:	d109      	bne.n	801076c <_dtoa_r+0xa98>
 8010758:	2c39      	cmp	r4, #57	; 0x39
 801075a:	d022      	beq.n	80107a2 <_dtoa_r+0xace>
 801075c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801075e:	2b00      	cmp	r3, #0
 8010760:	dd01      	ble.n	8010766 <_dtoa_r+0xa92>
 8010762:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8010764:	3431      	adds	r4, #49	; 0x31
 8010766:	9b07      	ldr	r3, [sp, #28]
 8010768:	701c      	strb	r4, [r3, #0]
 801076a:	e76e      	b.n	801064a <_dtoa_r+0x976>
 801076c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801076e:	2b00      	cmp	r3, #0
 8010770:	db04      	blt.n	801077c <_dtoa_r+0xaa8>
 8010772:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010774:	4313      	orrs	r3, r2
 8010776:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010778:	4313      	orrs	r3, r2
 801077a:	d11e      	bne.n	80107ba <_dtoa_r+0xae6>
 801077c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801077e:	2b00      	cmp	r3, #0
 8010780:	ddf1      	ble.n	8010766 <_dtoa_r+0xa92>
 8010782:	9905      	ldr	r1, [sp, #20]
 8010784:	2201      	movs	r2, #1
 8010786:	9804      	ldr	r0, [sp, #16]
 8010788:	f7fc f8f8 	bl	800c97c <__lshift>
 801078c:	0031      	movs	r1, r6
 801078e:	9005      	str	r0, [sp, #20]
 8010790:	f7fc f962 	bl	800ca58 <__mcmp>
 8010794:	2800      	cmp	r0, #0
 8010796:	dc02      	bgt.n	801079e <_dtoa_r+0xaca>
 8010798:	d1e5      	bne.n	8010766 <_dtoa_r+0xa92>
 801079a:	07e3      	lsls	r3, r4, #31
 801079c:	d5e3      	bpl.n	8010766 <_dtoa_r+0xa92>
 801079e:	2c39      	cmp	r4, #57	; 0x39
 80107a0:	d1df      	bne.n	8010762 <_dtoa_r+0xa8e>
 80107a2:	2339      	movs	r3, #57	; 0x39
 80107a4:	9a07      	ldr	r2, [sp, #28]
 80107a6:	7013      	strb	r3, [r2, #0]
 80107a8:	9b08      	ldr	r3, [sp, #32]
 80107aa:	9308      	str	r3, [sp, #32]
 80107ac:	3b01      	subs	r3, #1
 80107ae:	781a      	ldrb	r2, [r3, #0]
 80107b0:	2a39      	cmp	r2, #57	; 0x39
 80107b2:	d063      	beq.n	801087c <_dtoa_r+0xba8>
 80107b4:	3201      	adds	r2, #1
 80107b6:	701a      	strb	r2, [r3, #0]
 80107b8:	e747      	b.n	801064a <_dtoa_r+0x976>
 80107ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107bc:	2b00      	cmp	r3, #0
 80107be:	dd03      	ble.n	80107c8 <_dtoa_r+0xaf4>
 80107c0:	2c39      	cmp	r4, #57	; 0x39
 80107c2:	d0ee      	beq.n	80107a2 <_dtoa_r+0xace>
 80107c4:	3401      	adds	r4, #1
 80107c6:	e7ce      	b.n	8010766 <_dtoa_r+0xa92>
 80107c8:	9b07      	ldr	r3, [sp, #28]
 80107ca:	9a07      	ldr	r2, [sp, #28]
 80107cc:	701c      	strb	r4, [r3, #0]
 80107ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80107d0:	4293      	cmp	r3, r2
 80107d2:	d03e      	beq.n	8010852 <_dtoa_r+0xb7e>
 80107d4:	2300      	movs	r3, #0
 80107d6:	220a      	movs	r2, #10
 80107d8:	9905      	ldr	r1, [sp, #20]
 80107da:	9804      	ldr	r0, [sp, #16]
 80107dc:	f7fb feec 	bl	800c5b8 <__multadd>
 80107e0:	2300      	movs	r3, #0
 80107e2:	9005      	str	r0, [sp, #20]
 80107e4:	220a      	movs	r2, #10
 80107e6:	0029      	movs	r1, r5
 80107e8:	9804      	ldr	r0, [sp, #16]
 80107ea:	42bd      	cmp	r5, r7
 80107ec:	d106      	bne.n	80107fc <_dtoa_r+0xb28>
 80107ee:	f7fb fee3 	bl	800c5b8 <__multadd>
 80107f2:	0005      	movs	r5, r0
 80107f4:	0007      	movs	r7, r0
 80107f6:	9b08      	ldr	r3, [sp, #32]
 80107f8:	9307      	str	r3, [sp, #28]
 80107fa:	e784      	b.n	8010706 <_dtoa_r+0xa32>
 80107fc:	f7fb fedc 	bl	800c5b8 <__multadd>
 8010800:	0039      	movs	r1, r7
 8010802:	0005      	movs	r5, r0
 8010804:	2300      	movs	r3, #0
 8010806:	220a      	movs	r2, #10
 8010808:	9804      	ldr	r0, [sp, #16]
 801080a:	f7fb fed5 	bl	800c5b8 <__multadd>
 801080e:	0007      	movs	r7, r0
 8010810:	e7f1      	b.n	80107f6 <_dtoa_r+0xb22>
 8010812:	9b07      	ldr	r3, [sp, #28]
 8010814:	930b      	str	r3, [sp, #44]	; 0x2c
 8010816:	2500      	movs	r5, #0
 8010818:	0031      	movs	r1, r6
 801081a:	9805      	ldr	r0, [sp, #20]
 801081c:	f7ff f9ca 	bl	800fbb4 <quorem>
 8010820:	9b06      	ldr	r3, [sp, #24]
 8010822:	3030      	adds	r0, #48	; 0x30
 8010824:	5558      	strb	r0, [r3, r5]
 8010826:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010828:	3501      	adds	r5, #1
 801082a:	0004      	movs	r4, r0
 801082c:	42ab      	cmp	r3, r5
 801082e:	dd07      	ble.n	8010840 <_dtoa_r+0xb6c>
 8010830:	2300      	movs	r3, #0
 8010832:	220a      	movs	r2, #10
 8010834:	9905      	ldr	r1, [sp, #20]
 8010836:	9804      	ldr	r0, [sp, #16]
 8010838:	f7fb febe 	bl	800c5b8 <__multadd>
 801083c:	9005      	str	r0, [sp, #20]
 801083e:	e7eb      	b.n	8010818 <_dtoa_r+0xb44>
 8010840:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010842:	2301      	movs	r3, #1
 8010844:	2a00      	cmp	r2, #0
 8010846:	dd00      	ble.n	801084a <_dtoa_r+0xb76>
 8010848:	0013      	movs	r3, r2
 801084a:	2500      	movs	r5, #0
 801084c:	9a06      	ldr	r2, [sp, #24]
 801084e:	18d3      	adds	r3, r2, r3
 8010850:	9308      	str	r3, [sp, #32]
 8010852:	9905      	ldr	r1, [sp, #20]
 8010854:	2201      	movs	r2, #1
 8010856:	9804      	ldr	r0, [sp, #16]
 8010858:	f7fc f890 	bl	800c97c <__lshift>
 801085c:	0031      	movs	r1, r6
 801085e:	9005      	str	r0, [sp, #20]
 8010860:	f7fc f8fa 	bl	800ca58 <__mcmp>
 8010864:	2800      	cmp	r0, #0
 8010866:	dc9f      	bgt.n	80107a8 <_dtoa_r+0xad4>
 8010868:	d101      	bne.n	801086e <_dtoa_r+0xb9a>
 801086a:	07e4      	lsls	r4, r4, #31
 801086c:	d49c      	bmi.n	80107a8 <_dtoa_r+0xad4>
 801086e:	9b08      	ldr	r3, [sp, #32]
 8010870:	9308      	str	r3, [sp, #32]
 8010872:	3b01      	subs	r3, #1
 8010874:	781a      	ldrb	r2, [r3, #0]
 8010876:	2a30      	cmp	r2, #48	; 0x30
 8010878:	d0fa      	beq.n	8010870 <_dtoa_r+0xb9c>
 801087a:	e6e6      	b.n	801064a <_dtoa_r+0x976>
 801087c:	9a06      	ldr	r2, [sp, #24]
 801087e:	429a      	cmp	r2, r3
 8010880:	d193      	bne.n	80107aa <_dtoa_r+0xad6>
 8010882:	9b03      	ldr	r3, [sp, #12]
 8010884:	3301      	adds	r3, #1
 8010886:	9303      	str	r3, [sp, #12]
 8010888:	2331      	movs	r3, #49	; 0x31
 801088a:	7013      	strb	r3, [r2, #0]
 801088c:	e6dd      	b.n	801064a <_dtoa_r+0x976>
 801088e:	4b09      	ldr	r3, [pc, #36]	; (80108b4 <_dtoa_r+0xbe0>)
 8010890:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010892:	9306      	str	r3, [sp, #24]
 8010894:	4b08      	ldr	r3, [pc, #32]	; (80108b8 <_dtoa_r+0xbe4>)
 8010896:	2a00      	cmp	r2, #0
 8010898:	d001      	beq.n	801089e <_dtoa_r+0xbca>
 801089a:	f7ff fa4c 	bl	800fd36 <_dtoa_r+0x62>
 801089e:	f7ff fa4c 	bl	800fd3a <_dtoa_r+0x66>
 80108a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	dcb6      	bgt.n	8010816 <_dtoa_r+0xb42>
 80108a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80108aa:	2b02      	cmp	r3, #2
 80108ac:	dd00      	ble.n	80108b0 <_dtoa_r+0xbdc>
 80108ae:	e6b6      	b.n	801061e <_dtoa_r+0x94a>
 80108b0:	e7b1      	b.n	8010816 <_dtoa_r+0xb42>
 80108b2:	46c0      	nop			; (mov r8, r8)
 80108b4:	0801431c 	.word	0x0801431c
 80108b8:	08014324 	.word	0x08014324

080108bc <realloc>:
 80108bc:	b510      	push	{r4, lr}
 80108be:	4b03      	ldr	r3, [pc, #12]	; (80108cc <realloc+0x10>)
 80108c0:	000a      	movs	r2, r1
 80108c2:	0001      	movs	r1, r0
 80108c4:	6818      	ldr	r0, [r3, #0]
 80108c6:	f000 f803 	bl	80108d0 <_realloc_r>
 80108ca:	bd10      	pop	{r4, pc}
 80108cc:	200006d8 	.word	0x200006d8

080108d0 <_realloc_r>:
 80108d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108d2:	b087      	sub	sp, #28
 80108d4:	1e0c      	subs	r4, r1, #0
 80108d6:	9001      	str	r0, [sp, #4]
 80108d8:	9205      	str	r2, [sp, #20]
 80108da:	d106      	bne.n	80108ea <_realloc_r+0x1a>
 80108dc:	0011      	movs	r1, r2
 80108de:	f7f9 fe39 	bl	800a554 <_malloc_r>
 80108e2:	0007      	movs	r7, r0
 80108e4:	0038      	movs	r0, r7
 80108e6:	b007      	add	sp, #28
 80108e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108ea:	9801      	ldr	r0, [sp, #4]
 80108ec:	f7fa f846 	bl	800a97c <__malloc_lock>
 80108f0:	0023      	movs	r3, r4
 80108f2:	3b08      	subs	r3, #8
 80108f4:	685f      	ldr	r7, [r3, #4]
 80108f6:	9304      	str	r3, [sp, #16]
 80108f8:	9b05      	ldr	r3, [sp, #20]
 80108fa:	330b      	adds	r3, #11
 80108fc:	2b16      	cmp	r3, #22
 80108fe:	d908      	bls.n	8010912 <_realloc_r+0x42>
 8010900:	2207      	movs	r2, #7
 8010902:	4393      	bics	r3, r2
 8010904:	9300      	str	r3, [sp, #0]
 8010906:	d506      	bpl.n	8010916 <_realloc_r+0x46>
 8010908:	230c      	movs	r3, #12
 801090a:	9a01      	ldr	r2, [sp, #4]
 801090c:	2700      	movs	r7, #0
 801090e:	6013      	str	r3, [r2, #0]
 8010910:	e7e8      	b.n	80108e4 <_realloc_r+0x14>
 8010912:	2310      	movs	r3, #16
 8010914:	9300      	str	r3, [sp, #0]
 8010916:	9b00      	ldr	r3, [sp, #0]
 8010918:	9a05      	ldr	r2, [sp, #20]
 801091a:	4293      	cmp	r3, r2
 801091c:	d3f4      	bcc.n	8010908 <_realloc_r+0x38>
 801091e:	9b04      	ldr	r3, [sp, #16]
 8010920:	003a      	movs	r2, r7
 8010922:	9302      	str	r3, [sp, #8]
 8010924:	2303      	movs	r3, #3
 8010926:	439a      	bics	r2, r3
 8010928:	9b00      	ldr	r3, [sp, #0]
 801092a:	9203      	str	r2, [sp, #12]
 801092c:	4293      	cmp	r3, r2
 801092e:	dc00      	bgt.n	8010932 <_realloc_r+0x62>
 8010930:	e169      	b.n	8010c06 <_realloc_r+0x336>
 8010932:	9b04      	ldr	r3, [sp, #16]
 8010934:	48b8      	ldr	r0, [pc, #736]	; (8010c18 <_realloc_r+0x348>)
 8010936:	189b      	adds	r3, r3, r2
 8010938:	6882      	ldr	r2, [r0, #8]
 801093a:	4694      	mov	ip, r2
 801093c:	685a      	ldr	r2, [r3, #4]
 801093e:	459c      	cmp	ip, r3
 8010940:	d006      	beq.n	8010950 <_realloc_r+0x80>
 8010942:	2501      	movs	r5, #1
 8010944:	0011      	movs	r1, r2
 8010946:	43a9      	bics	r1, r5
 8010948:	1859      	adds	r1, r3, r1
 801094a:	6849      	ldr	r1, [r1, #4]
 801094c:	4229      	tst	r1, r5
 801094e:	d144      	bne.n	80109da <_realloc_r+0x10a>
 8010950:	2103      	movs	r1, #3
 8010952:	438a      	bics	r2, r1
 8010954:	9903      	ldr	r1, [sp, #12]
 8010956:	188e      	adds	r6, r1, r2
 8010958:	9900      	ldr	r1, [sp, #0]
 801095a:	459c      	cmp	ip, r3
 801095c:	d117      	bne.n	801098e <_realloc_r+0xbe>
 801095e:	3110      	adds	r1, #16
 8010960:	42b1      	cmp	r1, r6
 8010962:	dc3c      	bgt.n	80109de <_realloc_r+0x10e>
 8010964:	9a00      	ldr	r2, [sp, #0]
 8010966:	2101      	movs	r1, #1
 8010968:	4694      	mov	ip, r2
 801096a:	1ab6      	subs	r6, r6, r2
 801096c:	0022      	movs	r2, r4
 801096e:	9b04      	ldr	r3, [sp, #16]
 8010970:	430e      	orrs	r6, r1
 8010972:	4463      	add	r3, ip
 8010974:	6083      	str	r3, [r0, #8]
 8010976:	3a08      	subs	r2, #8
 8010978:	605e      	str	r6, [r3, #4]
 801097a:	6853      	ldr	r3, [r2, #4]
 801097c:	9801      	ldr	r0, [sp, #4]
 801097e:	400b      	ands	r3, r1
 8010980:	4661      	mov	r1, ip
 8010982:	430b      	orrs	r3, r1
 8010984:	6053      	str	r3, [r2, #4]
 8010986:	f7fa f801 	bl	800a98c <__malloc_unlock>
 801098a:	0027      	movs	r7, r4
 801098c:	e7aa      	b.n	80108e4 <_realloc_r+0x14>
 801098e:	42b1      	cmp	r1, r6
 8010990:	dc25      	bgt.n	80109de <_realloc_r+0x10e>
 8010992:	68da      	ldr	r2, [r3, #12]
 8010994:	689b      	ldr	r3, [r3, #8]
 8010996:	60da      	str	r2, [r3, #12]
 8010998:	6093      	str	r3, [r2, #8]
 801099a:	9b00      	ldr	r3, [sp, #0]
 801099c:	9a02      	ldr	r2, [sp, #8]
 801099e:	1af4      	subs	r4, r6, r3
 80109a0:	9b02      	ldr	r3, [sp, #8]
 80109a2:	1992      	adds	r2, r2, r6
 80109a4:	6858      	ldr	r0, [r3, #4]
 80109a6:	2301      	movs	r3, #1
 80109a8:	4018      	ands	r0, r3
 80109aa:	2c0f      	cmp	r4, #15
 80109ac:	d800      	bhi.n	80109b0 <_realloc_r+0xe0>
 80109ae:	e12c      	b.n	8010c0a <_realloc_r+0x33a>
 80109b0:	9d00      	ldr	r5, [sp, #0]
 80109b2:	9902      	ldr	r1, [sp, #8]
 80109b4:	4328      	orrs	r0, r5
 80109b6:	1949      	adds	r1, r1, r5
 80109b8:	9d02      	ldr	r5, [sp, #8]
 80109ba:	431c      	orrs	r4, r3
 80109bc:	6068      	str	r0, [r5, #4]
 80109be:	604c      	str	r4, [r1, #4]
 80109c0:	6850      	ldr	r0, [r2, #4]
 80109c2:	3108      	adds	r1, #8
 80109c4:	4303      	orrs	r3, r0
 80109c6:	6053      	str	r3, [r2, #4]
 80109c8:	9801      	ldr	r0, [sp, #4]
 80109ca:	f7fb f9a3 	bl	800bd14 <_free_r>
 80109ce:	9801      	ldr	r0, [sp, #4]
 80109d0:	f7f9 ffdc 	bl	800a98c <__malloc_unlock>
 80109d4:	9f02      	ldr	r7, [sp, #8]
 80109d6:	3708      	adds	r7, #8
 80109d8:	e784      	b.n	80108e4 <_realloc_r+0x14>
 80109da:	2200      	movs	r2, #0
 80109dc:	0013      	movs	r3, r2
 80109de:	07ff      	lsls	r7, r7, #31
 80109e0:	d500      	bpl.n	80109e4 <_realloc_r+0x114>
 80109e2:	e0c6      	b.n	8010b72 <_realloc_r+0x2a2>
 80109e4:	0021      	movs	r1, r4
 80109e6:	2003      	movs	r0, #3
 80109e8:	3908      	subs	r1, #8
 80109ea:	680d      	ldr	r5, [r1, #0]
 80109ec:	9904      	ldr	r1, [sp, #16]
 80109ee:	1b4d      	subs	r5, r1, r5
 80109f0:	6869      	ldr	r1, [r5, #4]
 80109f2:	4381      	bics	r1, r0
 80109f4:	9803      	ldr	r0, [sp, #12]
 80109f6:	180f      	adds	r7, r1, r0
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d100      	bne.n	80109fe <_realloc_r+0x12e>
 80109fc:	e084      	b.n	8010b08 <_realloc_r+0x238>
 80109fe:	19d6      	adds	r6, r2, r7
 8010a00:	459c      	cmp	ip, r3
 8010a02:	d148      	bne.n	8010a96 <_realloc_r+0x1c6>
 8010a04:	9b00      	ldr	r3, [sp, #0]
 8010a06:	3310      	adds	r3, #16
 8010a08:	42b3      	cmp	r3, r6
 8010a0a:	dc7d      	bgt.n	8010b08 <_realloc_r+0x238>
 8010a0c:	68aa      	ldr	r2, [r5, #8]
 8010a0e:	68eb      	ldr	r3, [r5, #12]
 8010a10:	002f      	movs	r7, r5
 8010a12:	60d3      	str	r3, [r2, #12]
 8010a14:	609a      	str	r2, [r3, #8]
 8010a16:	0002      	movs	r2, r0
 8010a18:	3a04      	subs	r2, #4
 8010a1a:	3708      	adds	r7, #8
 8010a1c:	2a24      	cmp	r2, #36	; 0x24
 8010a1e:	d835      	bhi.n	8010a8c <_realloc_r+0x1bc>
 8010a20:	003b      	movs	r3, r7
 8010a22:	2a13      	cmp	r2, #19
 8010a24:	d908      	bls.n	8010a38 <_realloc_r+0x168>
 8010a26:	6823      	ldr	r3, [r4, #0]
 8010a28:	60ab      	str	r3, [r5, #8]
 8010a2a:	6863      	ldr	r3, [r4, #4]
 8010a2c:	60eb      	str	r3, [r5, #12]
 8010a2e:	2a1b      	cmp	r2, #27
 8010a30:	d81a      	bhi.n	8010a68 <_realloc_r+0x198>
 8010a32:	002b      	movs	r3, r5
 8010a34:	3408      	adds	r4, #8
 8010a36:	3310      	adds	r3, #16
 8010a38:	6822      	ldr	r2, [r4, #0]
 8010a3a:	601a      	str	r2, [r3, #0]
 8010a3c:	6862      	ldr	r2, [r4, #4]
 8010a3e:	605a      	str	r2, [r3, #4]
 8010a40:	68a2      	ldr	r2, [r4, #8]
 8010a42:	609a      	str	r2, [r3, #8]
 8010a44:	9b00      	ldr	r3, [sp, #0]
 8010a46:	4a74      	ldr	r2, [pc, #464]	; (8010c18 <_realloc_r+0x348>)
 8010a48:	18eb      	adds	r3, r5, r3
 8010a4a:	6093      	str	r3, [r2, #8]
 8010a4c:	9a00      	ldr	r2, [sp, #0]
 8010a4e:	1ab6      	subs	r6, r6, r2
 8010a50:	2201      	movs	r2, #1
 8010a52:	4316      	orrs	r6, r2
 8010a54:	605e      	str	r6, [r3, #4]
 8010a56:	686b      	ldr	r3, [r5, #4]
 8010a58:	4013      	ands	r3, r2
 8010a5a:	9a00      	ldr	r2, [sp, #0]
 8010a5c:	4313      	orrs	r3, r2
 8010a5e:	606b      	str	r3, [r5, #4]
 8010a60:	9801      	ldr	r0, [sp, #4]
 8010a62:	f7f9 ff93 	bl	800a98c <__malloc_unlock>
 8010a66:	e73d      	b.n	80108e4 <_realloc_r+0x14>
 8010a68:	68a3      	ldr	r3, [r4, #8]
 8010a6a:	612b      	str	r3, [r5, #16]
 8010a6c:	68e3      	ldr	r3, [r4, #12]
 8010a6e:	616b      	str	r3, [r5, #20]
 8010a70:	2a24      	cmp	r2, #36	; 0x24
 8010a72:	d003      	beq.n	8010a7c <_realloc_r+0x1ac>
 8010a74:	002b      	movs	r3, r5
 8010a76:	3410      	adds	r4, #16
 8010a78:	3318      	adds	r3, #24
 8010a7a:	e7dd      	b.n	8010a38 <_realloc_r+0x168>
 8010a7c:	6923      	ldr	r3, [r4, #16]
 8010a7e:	61ab      	str	r3, [r5, #24]
 8010a80:	002b      	movs	r3, r5
 8010a82:	6962      	ldr	r2, [r4, #20]
 8010a84:	3320      	adds	r3, #32
 8010a86:	61ea      	str	r2, [r5, #28]
 8010a88:	3418      	adds	r4, #24
 8010a8a:	e7d5      	b.n	8010a38 <_realloc_r+0x168>
 8010a8c:	0021      	movs	r1, r4
 8010a8e:	0038      	movs	r0, r7
 8010a90:	f001 fbb5 	bl	80121fe <memmove>
 8010a94:	e7d6      	b.n	8010a44 <_realloc_r+0x174>
 8010a96:	9a00      	ldr	r2, [sp, #0]
 8010a98:	42b2      	cmp	r2, r6
 8010a9a:	dc35      	bgt.n	8010b08 <_realloc_r+0x238>
 8010a9c:	0028      	movs	r0, r5
 8010a9e:	68da      	ldr	r2, [r3, #12]
 8010aa0:	689b      	ldr	r3, [r3, #8]
 8010aa2:	3008      	adds	r0, #8
 8010aa4:	60da      	str	r2, [r3, #12]
 8010aa6:	6093      	str	r3, [r2, #8]
 8010aa8:	68aa      	ldr	r2, [r5, #8]
 8010aaa:	68eb      	ldr	r3, [r5, #12]
 8010aac:	60d3      	str	r3, [r2, #12]
 8010aae:	609a      	str	r2, [r3, #8]
 8010ab0:	9a03      	ldr	r2, [sp, #12]
 8010ab2:	3a04      	subs	r2, #4
 8010ab4:	2a24      	cmp	r2, #36	; 0x24
 8010ab6:	d823      	bhi.n	8010b00 <_realloc_r+0x230>
 8010ab8:	2a13      	cmp	r2, #19
 8010aba:	d907      	bls.n	8010acc <_realloc_r+0x1fc>
 8010abc:	6823      	ldr	r3, [r4, #0]
 8010abe:	60ab      	str	r3, [r5, #8]
 8010ac0:	6863      	ldr	r3, [r4, #4]
 8010ac2:	60eb      	str	r3, [r5, #12]
 8010ac4:	2a1b      	cmp	r2, #27
 8010ac6:	d809      	bhi.n	8010adc <_realloc_r+0x20c>
 8010ac8:	3408      	adds	r4, #8
 8010aca:	3008      	adds	r0, #8
 8010acc:	6823      	ldr	r3, [r4, #0]
 8010ace:	6003      	str	r3, [r0, #0]
 8010ad0:	6863      	ldr	r3, [r4, #4]
 8010ad2:	6043      	str	r3, [r0, #4]
 8010ad4:	68a3      	ldr	r3, [r4, #8]
 8010ad6:	6083      	str	r3, [r0, #8]
 8010ad8:	9502      	str	r5, [sp, #8]
 8010ada:	e75e      	b.n	801099a <_realloc_r+0xca>
 8010adc:	68a3      	ldr	r3, [r4, #8]
 8010ade:	612b      	str	r3, [r5, #16]
 8010ae0:	68e3      	ldr	r3, [r4, #12]
 8010ae2:	616b      	str	r3, [r5, #20]
 8010ae4:	2a24      	cmp	r2, #36	; 0x24
 8010ae6:	d003      	beq.n	8010af0 <_realloc_r+0x220>
 8010ae8:	0028      	movs	r0, r5
 8010aea:	3410      	adds	r4, #16
 8010aec:	3018      	adds	r0, #24
 8010aee:	e7ed      	b.n	8010acc <_realloc_r+0x1fc>
 8010af0:	0028      	movs	r0, r5
 8010af2:	6923      	ldr	r3, [r4, #16]
 8010af4:	3020      	adds	r0, #32
 8010af6:	61ab      	str	r3, [r5, #24]
 8010af8:	6963      	ldr	r3, [r4, #20]
 8010afa:	3418      	adds	r4, #24
 8010afc:	61eb      	str	r3, [r5, #28]
 8010afe:	e7e5      	b.n	8010acc <_realloc_r+0x1fc>
 8010b00:	0021      	movs	r1, r4
 8010b02:	f001 fb7c 	bl	80121fe <memmove>
 8010b06:	e7e7      	b.n	8010ad8 <_realloc_r+0x208>
 8010b08:	9b00      	ldr	r3, [sp, #0]
 8010b0a:	42bb      	cmp	r3, r7
 8010b0c:	dc31      	bgt.n	8010b72 <_realloc_r+0x2a2>
 8010b0e:	0028      	movs	r0, r5
 8010b10:	68aa      	ldr	r2, [r5, #8]
 8010b12:	68eb      	ldr	r3, [r5, #12]
 8010b14:	3008      	adds	r0, #8
 8010b16:	60d3      	str	r3, [r2, #12]
 8010b18:	609a      	str	r2, [r3, #8]
 8010b1a:	9a03      	ldr	r2, [sp, #12]
 8010b1c:	3a04      	subs	r2, #4
 8010b1e:	2a24      	cmp	r2, #36	; 0x24
 8010b20:	d823      	bhi.n	8010b6a <_realloc_r+0x29a>
 8010b22:	2a13      	cmp	r2, #19
 8010b24:	d907      	bls.n	8010b36 <_realloc_r+0x266>
 8010b26:	6823      	ldr	r3, [r4, #0]
 8010b28:	60ab      	str	r3, [r5, #8]
 8010b2a:	6863      	ldr	r3, [r4, #4]
 8010b2c:	60eb      	str	r3, [r5, #12]
 8010b2e:	2a1b      	cmp	r2, #27
 8010b30:	d809      	bhi.n	8010b46 <_realloc_r+0x276>
 8010b32:	3408      	adds	r4, #8
 8010b34:	3008      	adds	r0, #8
 8010b36:	6823      	ldr	r3, [r4, #0]
 8010b38:	6003      	str	r3, [r0, #0]
 8010b3a:	6863      	ldr	r3, [r4, #4]
 8010b3c:	6043      	str	r3, [r0, #4]
 8010b3e:	68a3      	ldr	r3, [r4, #8]
 8010b40:	6083      	str	r3, [r0, #8]
 8010b42:	003e      	movs	r6, r7
 8010b44:	e7c8      	b.n	8010ad8 <_realloc_r+0x208>
 8010b46:	68a3      	ldr	r3, [r4, #8]
 8010b48:	612b      	str	r3, [r5, #16]
 8010b4a:	68e3      	ldr	r3, [r4, #12]
 8010b4c:	616b      	str	r3, [r5, #20]
 8010b4e:	2a24      	cmp	r2, #36	; 0x24
 8010b50:	d003      	beq.n	8010b5a <_realloc_r+0x28a>
 8010b52:	0028      	movs	r0, r5
 8010b54:	3410      	adds	r4, #16
 8010b56:	3018      	adds	r0, #24
 8010b58:	e7ed      	b.n	8010b36 <_realloc_r+0x266>
 8010b5a:	0028      	movs	r0, r5
 8010b5c:	6923      	ldr	r3, [r4, #16]
 8010b5e:	3020      	adds	r0, #32
 8010b60:	61ab      	str	r3, [r5, #24]
 8010b62:	6963      	ldr	r3, [r4, #20]
 8010b64:	3418      	adds	r4, #24
 8010b66:	61eb      	str	r3, [r5, #28]
 8010b68:	e7e5      	b.n	8010b36 <_realloc_r+0x266>
 8010b6a:	0021      	movs	r1, r4
 8010b6c:	f001 fb47 	bl	80121fe <memmove>
 8010b70:	e7e7      	b.n	8010b42 <_realloc_r+0x272>
 8010b72:	9905      	ldr	r1, [sp, #20]
 8010b74:	9801      	ldr	r0, [sp, #4]
 8010b76:	f7f9 fced 	bl	800a554 <_malloc_r>
 8010b7a:	1e07      	subs	r7, r0, #0
 8010b7c:	d100      	bne.n	8010b80 <_realloc_r+0x2b0>
 8010b7e:	e76f      	b.n	8010a60 <_realloc_r+0x190>
 8010b80:	0023      	movs	r3, r4
 8010b82:	2201      	movs	r2, #1
 8010b84:	3b08      	subs	r3, #8
 8010b86:	685b      	ldr	r3, [r3, #4]
 8010b88:	4393      	bics	r3, r2
 8010b8a:	9a04      	ldr	r2, [sp, #16]
 8010b8c:	18d3      	adds	r3, r2, r3
 8010b8e:	0002      	movs	r2, r0
 8010b90:	3a08      	subs	r2, #8
 8010b92:	4293      	cmp	r3, r2
 8010b94:	d105      	bne.n	8010ba2 <_realloc_r+0x2d2>
 8010b96:	685e      	ldr	r6, [r3, #4]
 8010b98:	2303      	movs	r3, #3
 8010b9a:	439e      	bics	r6, r3
 8010b9c:	9b03      	ldr	r3, [sp, #12]
 8010b9e:	18f6      	adds	r6, r6, r3
 8010ba0:	e6fb      	b.n	801099a <_realloc_r+0xca>
 8010ba2:	9a03      	ldr	r2, [sp, #12]
 8010ba4:	3a04      	subs	r2, #4
 8010ba6:	2a24      	cmp	r2, #36	; 0x24
 8010ba8:	d829      	bhi.n	8010bfe <_realloc_r+0x32e>
 8010baa:	0003      	movs	r3, r0
 8010bac:	0021      	movs	r1, r4
 8010bae:	2a13      	cmp	r2, #19
 8010bb0:	d908      	bls.n	8010bc4 <_realloc_r+0x2f4>
 8010bb2:	6823      	ldr	r3, [r4, #0]
 8010bb4:	6003      	str	r3, [r0, #0]
 8010bb6:	6863      	ldr	r3, [r4, #4]
 8010bb8:	6043      	str	r3, [r0, #4]
 8010bba:	2a1b      	cmp	r2, #27
 8010bbc:	d80d      	bhi.n	8010bda <_realloc_r+0x30a>
 8010bbe:	0003      	movs	r3, r0
 8010bc0:	3108      	adds	r1, #8
 8010bc2:	3308      	adds	r3, #8
 8010bc4:	680a      	ldr	r2, [r1, #0]
 8010bc6:	601a      	str	r2, [r3, #0]
 8010bc8:	684a      	ldr	r2, [r1, #4]
 8010bca:	605a      	str	r2, [r3, #4]
 8010bcc:	688a      	ldr	r2, [r1, #8]
 8010bce:	609a      	str	r2, [r3, #8]
 8010bd0:	0021      	movs	r1, r4
 8010bd2:	9801      	ldr	r0, [sp, #4]
 8010bd4:	f7fb f89e 	bl	800bd14 <_free_r>
 8010bd8:	e742      	b.n	8010a60 <_realloc_r+0x190>
 8010bda:	68a3      	ldr	r3, [r4, #8]
 8010bdc:	6083      	str	r3, [r0, #8]
 8010bde:	68e3      	ldr	r3, [r4, #12]
 8010be0:	60c3      	str	r3, [r0, #12]
 8010be2:	2a24      	cmp	r2, #36	; 0x24
 8010be4:	d003      	beq.n	8010bee <_realloc_r+0x31e>
 8010be6:	0003      	movs	r3, r0
 8010be8:	3110      	adds	r1, #16
 8010bea:	3310      	adds	r3, #16
 8010bec:	e7ea      	b.n	8010bc4 <_realloc_r+0x2f4>
 8010bee:	6923      	ldr	r3, [r4, #16]
 8010bf0:	3118      	adds	r1, #24
 8010bf2:	6103      	str	r3, [r0, #16]
 8010bf4:	0003      	movs	r3, r0
 8010bf6:	6962      	ldr	r2, [r4, #20]
 8010bf8:	3318      	adds	r3, #24
 8010bfa:	6142      	str	r2, [r0, #20]
 8010bfc:	e7e2      	b.n	8010bc4 <_realloc_r+0x2f4>
 8010bfe:	0021      	movs	r1, r4
 8010c00:	f001 fafd 	bl	80121fe <memmove>
 8010c04:	e7e4      	b.n	8010bd0 <_realloc_r+0x300>
 8010c06:	9e03      	ldr	r6, [sp, #12]
 8010c08:	e6c7      	b.n	801099a <_realloc_r+0xca>
 8010c0a:	9902      	ldr	r1, [sp, #8]
 8010c0c:	4306      	orrs	r6, r0
 8010c0e:	604e      	str	r6, [r1, #4]
 8010c10:	6851      	ldr	r1, [r2, #4]
 8010c12:	430b      	orrs	r3, r1
 8010c14:	6053      	str	r3, [r2, #4]
 8010c16:	e6da      	b.n	80109ce <_realloc_r+0xfe>
 8010c18:	2000002c 	.word	0x2000002c

08010c1c <_strtoul_l.constprop.0>:
 8010c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c1e:	b087      	sub	sp, #28
 8010c20:	9202      	str	r2, [sp, #8]
 8010c22:	4a3e      	ldr	r2, [pc, #248]	; (8010d1c <_strtoul_l.constprop.0+0x100>)
 8010c24:	001e      	movs	r6, r3
 8010c26:	9101      	str	r1, [sp, #4]
 8010c28:	000b      	movs	r3, r1
 8010c2a:	4694      	mov	ip, r2
 8010c2c:	2108      	movs	r1, #8
 8010c2e:	9005      	str	r0, [sp, #20]
 8010c30:	001a      	movs	r2, r3
 8010c32:	4660      	mov	r0, ip
 8010c34:	7814      	ldrb	r4, [r2, #0]
 8010c36:	3301      	adds	r3, #1
 8010c38:	5d00      	ldrb	r0, [r0, r4]
 8010c3a:	001d      	movs	r5, r3
 8010c3c:	0007      	movs	r7, r0
 8010c3e:	400f      	ands	r7, r1
 8010c40:	4208      	tst	r0, r1
 8010c42:	d1f5      	bne.n	8010c30 <_strtoul_l.constprop.0+0x14>
 8010c44:	2c2d      	cmp	r4, #45	; 0x2d
 8010c46:	d13d      	bne.n	8010cc4 <_strtoul_l.constprop.0+0xa8>
 8010c48:	2701      	movs	r7, #1
 8010c4a:	781c      	ldrb	r4, [r3, #0]
 8010c4c:	1c95      	adds	r5, r2, #2
 8010c4e:	2e00      	cmp	r6, #0
 8010c50:	d05f      	beq.n	8010d12 <_strtoul_l.constprop.0+0xf6>
 8010c52:	2e10      	cmp	r6, #16
 8010c54:	d109      	bne.n	8010c6a <_strtoul_l.constprop.0+0x4e>
 8010c56:	2c30      	cmp	r4, #48	; 0x30
 8010c58:	d107      	bne.n	8010c6a <_strtoul_l.constprop.0+0x4e>
 8010c5a:	2220      	movs	r2, #32
 8010c5c:	782b      	ldrb	r3, [r5, #0]
 8010c5e:	4393      	bics	r3, r2
 8010c60:	2b58      	cmp	r3, #88	; 0x58
 8010c62:	d151      	bne.n	8010d08 <_strtoul_l.constprop.0+0xec>
 8010c64:	2610      	movs	r6, #16
 8010c66:	786c      	ldrb	r4, [r5, #1]
 8010c68:	3502      	adds	r5, #2
 8010c6a:	2001      	movs	r0, #1
 8010c6c:	0031      	movs	r1, r6
 8010c6e:	4240      	negs	r0, r0
 8010c70:	f7ef fa64 	bl	800013c <__udivsi3>
 8010c74:	9003      	str	r0, [sp, #12]
 8010c76:	2001      	movs	r0, #1
 8010c78:	0031      	movs	r1, r6
 8010c7a:	4240      	negs	r0, r0
 8010c7c:	f7ef fae4 	bl	8000248 <__aeabi_uidivmod>
 8010c80:	2300      	movs	r3, #0
 8010c82:	2201      	movs	r2, #1
 8010c84:	9104      	str	r1, [sp, #16]
 8010c86:	2101      	movs	r1, #1
 8010c88:	0018      	movs	r0, r3
 8010c8a:	4694      	mov	ip, r2
 8010c8c:	4249      	negs	r1, r1
 8010c8e:	0022      	movs	r2, r4
 8010c90:	3a30      	subs	r2, #48	; 0x30
 8010c92:	2a09      	cmp	r2, #9
 8010c94:	d903      	bls.n	8010c9e <_strtoul_l.constprop.0+0x82>
 8010c96:	3a11      	subs	r2, #17
 8010c98:	2a19      	cmp	r2, #25
 8010c9a:	d818      	bhi.n	8010cce <_strtoul_l.constprop.0+0xb2>
 8010c9c:	320a      	adds	r2, #10
 8010c9e:	4296      	cmp	r6, r2
 8010ca0:	dd19      	ble.n	8010cd6 <_strtoul_l.constprop.0+0xba>
 8010ca2:	1c5c      	adds	r4, r3, #1
 8010ca4:	d00b      	beq.n	8010cbe <_strtoul_l.constprop.0+0xa2>
 8010ca6:	9c03      	ldr	r4, [sp, #12]
 8010ca8:	000b      	movs	r3, r1
 8010caa:	4284      	cmp	r4, r0
 8010cac:	d307      	bcc.n	8010cbe <_strtoul_l.constprop.0+0xa2>
 8010cae:	d103      	bne.n	8010cb8 <_strtoul_l.constprop.0+0x9c>
 8010cb0:	9c04      	ldr	r4, [sp, #16]
 8010cb2:	000b      	movs	r3, r1
 8010cb4:	4294      	cmp	r4, r2
 8010cb6:	db02      	blt.n	8010cbe <_strtoul_l.constprop.0+0xa2>
 8010cb8:	4663      	mov	r3, ip
 8010cba:	4370      	muls	r0, r6
 8010cbc:	1810      	adds	r0, r2, r0
 8010cbe:	782c      	ldrb	r4, [r5, #0]
 8010cc0:	3501      	adds	r5, #1
 8010cc2:	e7e4      	b.n	8010c8e <_strtoul_l.constprop.0+0x72>
 8010cc4:	2c2b      	cmp	r4, #43	; 0x2b
 8010cc6:	d1c2      	bne.n	8010c4e <_strtoul_l.constprop.0+0x32>
 8010cc8:	781c      	ldrb	r4, [r3, #0]
 8010cca:	1c95      	adds	r5, r2, #2
 8010ccc:	e7bf      	b.n	8010c4e <_strtoul_l.constprop.0+0x32>
 8010cce:	0022      	movs	r2, r4
 8010cd0:	3a61      	subs	r2, #97	; 0x61
 8010cd2:	2a19      	cmp	r2, #25
 8010cd4:	d9e2      	bls.n	8010c9c <_strtoul_l.constprop.0+0x80>
 8010cd6:	1c5a      	adds	r2, r3, #1
 8010cd8:	d108      	bne.n	8010cec <_strtoul_l.constprop.0+0xd0>
 8010cda:	2222      	movs	r2, #34	; 0x22
 8010cdc:	9905      	ldr	r1, [sp, #20]
 8010cde:	0018      	movs	r0, r3
 8010ce0:	600a      	str	r2, [r1, #0]
 8010ce2:	9a02      	ldr	r2, [sp, #8]
 8010ce4:	2a00      	cmp	r2, #0
 8010ce6:	d109      	bne.n	8010cfc <_strtoul_l.constprop.0+0xe0>
 8010ce8:	b007      	add	sp, #28
 8010cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010cec:	2f00      	cmp	r7, #0
 8010cee:	d000      	beq.n	8010cf2 <_strtoul_l.constprop.0+0xd6>
 8010cf0:	4240      	negs	r0, r0
 8010cf2:	9a02      	ldr	r2, [sp, #8]
 8010cf4:	2a00      	cmp	r2, #0
 8010cf6:	d0f7      	beq.n	8010ce8 <_strtoul_l.constprop.0+0xcc>
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d001      	beq.n	8010d00 <_strtoul_l.constprop.0+0xe4>
 8010cfc:	1e6b      	subs	r3, r5, #1
 8010cfe:	9301      	str	r3, [sp, #4]
 8010d00:	9b02      	ldr	r3, [sp, #8]
 8010d02:	9a01      	ldr	r2, [sp, #4]
 8010d04:	601a      	str	r2, [r3, #0]
 8010d06:	e7ef      	b.n	8010ce8 <_strtoul_l.constprop.0+0xcc>
 8010d08:	2430      	movs	r4, #48	; 0x30
 8010d0a:	2e00      	cmp	r6, #0
 8010d0c:	d1ad      	bne.n	8010c6a <_strtoul_l.constprop.0+0x4e>
 8010d0e:	3608      	adds	r6, #8
 8010d10:	e7ab      	b.n	8010c6a <_strtoul_l.constprop.0+0x4e>
 8010d12:	2c30      	cmp	r4, #48	; 0x30
 8010d14:	d0a1      	beq.n	8010c5a <_strtoul_l.constprop.0+0x3e>
 8010d16:	260a      	movs	r6, #10
 8010d18:	e7a7      	b.n	8010c6a <_strtoul_l.constprop.0+0x4e>
 8010d1a:	46c0      	nop			; (mov r8, r8)
 8010d1c:	08013f91 	.word	0x08013f91

08010d20 <_strtoul_r>:
 8010d20:	b510      	push	{r4, lr}
 8010d22:	f7ff ff7b 	bl	8010c1c <_strtoul_l.constprop.0>
 8010d26:	bd10      	pop	{r4, pc}

08010d28 <_strtoll_l.constprop.0>:
 8010d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d2a:	b08d      	sub	sp, #52	; 0x34
 8010d2c:	9203      	str	r2, [sp, #12]
 8010d2e:	4a53      	ldr	r2, [pc, #332]	; (8010e7c <_strtoll_l.constprop.0+0x154>)
 8010d30:	001e      	movs	r6, r3
 8010d32:	9102      	str	r1, [sp, #8]
 8010d34:	000b      	movs	r3, r1
 8010d36:	4694      	mov	ip, r2
 8010d38:	2108      	movs	r1, #8
 8010d3a:	900a      	str	r0, [sp, #40]	; 0x28
 8010d3c:	001a      	movs	r2, r3
 8010d3e:	4660      	mov	r0, ip
 8010d40:	7814      	ldrb	r4, [r2, #0]
 8010d42:	3301      	adds	r3, #1
 8010d44:	5d00      	ldrb	r0, [r0, r4]
 8010d46:	001d      	movs	r5, r3
 8010d48:	0007      	movs	r7, r0
 8010d4a:	400f      	ands	r7, r1
 8010d4c:	4208      	tst	r0, r1
 8010d4e:	d1f5      	bne.n	8010d3c <_strtoll_l.constprop.0+0x14>
 8010d50:	2c2d      	cmp	r4, #45	; 0x2d
 8010d52:	d153      	bne.n	8010dfc <_strtoll_l.constprop.0+0xd4>
 8010d54:	781c      	ldrb	r4, [r3, #0]
 8010d56:	2301      	movs	r3, #1
 8010d58:	1c95      	adds	r5, r2, #2
 8010d5a:	9301      	str	r3, [sp, #4]
 8010d5c:	2e00      	cmp	r6, #0
 8010d5e:	d100      	bne.n	8010d62 <_strtoll_l.constprop.0+0x3a>
 8010d60:	e086      	b.n	8010e70 <_strtoll_l.constprop.0+0x148>
 8010d62:	2e10      	cmp	r6, #16
 8010d64:	d10a      	bne.n	8010d7c <_strtoll_l.constprop.0+0x54>
 8010d66:	2c30      	cmp	r4, #48	; 0x30
 8010d68:	d108      	bne.n	8010d7c <_strtoll_l.constprop.0+0x54>
 8010d6a:	2220      	movs	r2, #32
 8010d6c:	782b      	ldrb	r3, [r5, #0]
 8010d6e:	4393      	bics	r3, r2
 8010d70:	2b58      	cmp	r3, #88	; 0x58
 8010d72:	d000      	beq.n	8010d76 <_strtoll_l.constprop.0+0x4e>
 8010d74:	e076      	b.n	8010e64 <_strtoll_l.constprop.0+0x13c>
 8010d76:	2610      	movs	r6, #16
 8010d78:	786c      	ldrb	r4, [r5, #1]
 8010d7a:	3502      	adds	r5, #2
 8010d7c:	2001      	movs	r0, #1
 8010d7e:	2300      	movs	r3, #0
 8010d80:	493f      	ldr	r1, [pc, #252]	; (8010e80 <_strtoll_l.constprop.0+0x158>)
 8010d82:	9a01      	ldr	r2, [sp, #4]
 8010d84:	4240      	negs	r0, r0
 8010d86:	1812      	adds	r2, r2, r0
 8010d88:	414b      	adcs	r3, r1
 8010d8a:	9204      	str	r2, [sp, #16]
 8010d8c:	9305      	str	r3, [sp, #20]
 8010d8e:	9804      	ldr	r0, [sp, #16]
 8010d90:	9905      	ldr	r1, [sp, #20]
 8010d92:	17f3      	asrs	r3, r6, #31
 8010d94:	0032      	movs	r2, r6
 8010d96:	930b      	str	r3, [sp, #44]	; 0x2c
 8010d98:	f7ef fb84 	bl	80004a4 <__aeabi_uldivmod>
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	000f      	movs	r7, r1
 8010da0:	9008      	str	r0, [sp, #32]
 8010da2:	2100      	movs	r1, #0
 8010da4:	2000      	movs	r0, #0
 8010da6:	9209      	str	r2, [sp, #36]	; 0x24
 8010da8:	0022      	movs	r2, r4
 8010daa:	3a30      	subs	r2, #48	; 0x30
 8010dac:	2a09      	cmp	r2, #9
 8010dae:	d82b      	bhi.n	8010e08 <_strtoll_l.constprop.0+0xe0>
 8010db0:	0014      	movs	r4, r2
 8010db2:	42a6      	cmp	r6, r4
 8010db4:	dd37      	ble.n	8010e26 <_strtoll_l.constprop.0+0xfe>
 8010db6:	1c5a      	adds	r2, r3, #1
 8010db8:	d01d      	beq.n	8010df6 <_strtoll_l.constprop.0+0xce>
 8010dba:	42b9      	cmp	r1, r7
 8010dbc:	d830      	bhi.n	8010e20 <_strtoll_l.constprop.0+0xf8>
 8010dbe:	d102      	bne.n	8010dc6 <_strtoll_l.constprop.0+0x9e>
 8010dc0:	9b08      	ldr	r3, [sp, #32]
 8010dc2:	4298      	cmp	r0, r3
 8010dc4:	d82c      	bhi.n	8010e20 <_strtoll_l.constprop.0+0xf8>
 8010dc6:	9b08      	ldr	r3, [sp, #32]
 8010dc8:	4283      	cmp	r3, r0
 8010dca:	d106      	bne.n	8010dda <_strtoll_l.constprop.0+0xb2>
 8010dcc:	428f      	cmp	r7, r1
 8010dce:	d104      	bne.n	8010dda <_strtoll_l.constprop.0+0xb2>
 8010dd0:	2301      	movs	r3, #1
 8010dd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010dd4:	425b      	negs	r3, r3
 8010dd6:	42a2      	cmp	r2, r4
 8010dd8:	db0d      	blt.n	8010df6 <_strtoll_l.constprop.0+0xce>
 8010dda:	000b      	movs	r3, r1
 8010ddc:	0002      	movs	r2, r0
 8010dde:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010de0:	0030      	movs	r0, r6
 8010de2:	f7ef fb7f 	bl	80004e4 <__aeabi_lmul>
 8010de6:	17e3      	asrs	r3, r4, #31
 8010de8:	9406      	str	r4, [sp, #24]
 8010dea:	9307      	str	r3, [sp, #28]
 8010dec:	9b06      	ldr	r3, [sp, #24]
 8010dee:	9c07      	ldr	r4, [sp, #28]
 8010df0:	18c0      	adds	r0, r0, r3
 8010df2:	4161      	adcs	r1, r4
 8010df4:	2301      	movs	r3, #1
 8010df6:	782c      	ldrb	r4, [r5, #0]
 8010df8:	3501      	adds	r5, #1
 8010dfa:	e7d5      	b.n	8010da8 <_strtoll_l.constprop.0+0x80>
 8010dfc:	9701      	str	r7, [sp, #4]
 8010dfe:	2c2b      	cmp	r4, #43	; 0x2b
 8010e00:	d1ac      	bne.n	8010d5c <_strtoll_l.constprop.0+0x34>
 8010e02:	781c      	ldrb	r4, [r3, #0]
 8010e04:	1c95      	adds	r5, r2, #2
 8010e06:	e7a9      	b.n	8010d5c <_strtoll_l.constprop.0+0x34>
 8010e08:	0022      	movs	r2, r4
 8010e0a:	3a41      	subs	r2, #65	; 0x41
 8010e0c:	2a19      	cmp	r2, #25
 8010e0e:	d801      	bhi.n	8010e14 <_strtoll_l.constprop.0+0xec>
 8010e10:	3c37      	subs	r4, #55	; 0x37
 8010e12:	e7ce      	b.n	8010db2 <_strtoll_l.constprop.0+0x8a>
 8010e14:	0022      	movs	r2, r4
 8010e16:	3a61      	subs	r2, #97	; 0x61
 8010e18:	2a19      	cmp	r2, #25
 8010e1a:	d804      	bhi.n	8010e26 <_strtoll_l.constprop.0+0xfe>
 8010e1c:	3c57      	subs	r4, #87	; 0x57
 8010e1e:	e7c8      	b.n	8010db2 <_strtoll_l.constprop.0+0x8a>
 8010e20:	2301      	movs	r3, #1
 8010e22:	425b      	negs	r3, r3
 8010e24:	e7e7      	b.n	8010df6 <_strtoll_l.constprop.0+0xce>
 8010e26:	1c5a      	adds	r2, r3, #1
 8010e28:	d109      	bne.n	8010e3e <_strtoll_l.constprop.0+0x116>
 8010e2a:	9804      	ldr	r0, [sp, #16]
 8010e2c:	9905      	ldr	r1, [sp, #20]
 8010e2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e30:	3323      	adds	r3, #35	; 0x23
 8010e32:	6013      	str	r3, [r2, #0]
 8010e34:	9b03      	ldr	r3, [sp, #12]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d10e      	bne.n	8010e58 <_strtoll_l.constprop.0+0x130>
 8010e3a:	b00d      	add	sp, #52	; 0x34
 8010e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e3e:	9a01      	ldr	r2, [sp, #4]
 8010e40:	2a00      	cmp	r2, #0
 8010e42:	d004      	beq.n	8010e4e <_strtoll_l.constprop.0+0x126>
 8010e44:	0006      	movs	r6, r0
 8010e46:	000f      	movs	r7, r1
 8010e48:	2100      	movs	r1, #0
 8010e4a:	4270      	negs	r0, r6
 8010e4c:	41b9      	sbcs	r1, r7
 8010e4e:	9a03      	ldr	r2, [sp, #12]
 8010e50:	2a00      	cmp	r2, #0
 8010e52:	d0f2      	beq.n	8010e3a <_strtoll_l.constprop.0+0x112>
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d001      	beq.n	8010e5c <_strtoll_l.constprop.0+0x134>
 8010e58:	1e6b      	subs	r3, r5, #1
 8010e5a:	9302      	str	r3, [sp, #8]
 8010e5c:	9b03      	ldr	r3, [sp, #12]
 8010e5e:	9a02      	ldr	r2, [sp, #8]
 8010e60:	601a      	str	r2, [r3, #0]
 8010e62:	e7ea      	b.n	8010e3a <_strtoll_l.constprop.0+0x112>
 8010e64:	2430      	movs	r4, #48	; 0x30
 8010e66:	2e00      	cmp	r6, #0
 8010e68:	d000      	beq.n	8010e6c <_strtoll_l.constprop.0+0x144>
 8010e6a:	e787      	b.n	8010d7c <_strtoll_l.constprop.0+0x54>
 8010e6c:	3608      	adds	r6, #8
 8010e6e:	e785      	b.n	8010d7c <_strtoll_l.constprop.0+0x54>
 8010e70:	2c30      	cmp	r4, #48	; 0x30
 8010e72:	d100      	bne.n	8010e76 <_strtoll_l.constprop.0+0x14e>
 8010e74:	e779      	b.n	8010d6a <_strtoll_l.constprop.0+0x42>
 8010e76:	260a      	movs	r6, #10
 8010e78:	e780      	b.n	8010d7c <_strtoll_l.constprop.0+0x54>
 8010e7a:	46c0      	nop			; (mov r8, r8)
 8010e7c:	08013f91 	.word	0x08013f91
 8010e80:	7fffffff 	.word	0x7fffffff

08010e84 <_strtoll_r>:
 8010e84:	b510      	push	{r4, lr}
 8010e86:	f7ff ff4f 	bl	8010d28 <_strtoll_l.constprop.0>
 8010e8a:	bd10      	pop	{r4, pc}

08010e8c <_strtoull_l.constprop.0>:
 8010e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e8e:	b08b      	sub	sp, #44	; 0x2c
 8010e90:	9202      	str	r2, [sp, #8]
 8010e92:	4a54      	ldr	r2, [pc, #336]	; (8010fe4 <_strtoull_l.constprop.0+0x158>)
 8010e94:	001e      	movs	r6, r3
 8010e96:	9101      	str	r1, [sp, #4]
 8010e98:	000b      	movs	r3, r1
 8010e9a:	4694      	mov	ip, r2
 8010e9c:	2108      	movs	r1, #8
 8010e9e:	9009      	str	r0, [sp, #36]	; 0x24
 8010ea0:	001a      	movs	r2, r3
 8010ea2:	4660      	mov	r0, ip
 8010ea4:	7814      	ldrb	r4, [r2, #0]
 8010ea6:	3301      	adds	r3, #1
 8010ea8:	5d00      	ldrb	r0, [r0, r4]
 8010eaa:	001d      	movs	r5, r3
 8010eac:	0007      	movs	r7, r0
 8010eae:	400f      	ands	r7, r1
 8010eb0:	4208      	tst	r0, r1
 8010eb2:	d1f5      	bne.n	8010ea0 <_strtoull_l.constprop.0+0x14>
 8010eb4:	2c2d      	cmp	r4, #45	; 0x2d
 8010eb6:	d154      	bne.n	8010f62 <_strtoull_l.constprop.0+0xd6>
 8010eb8:	781c      	ldrb	r4, [r3, #0]
 8010eba:	2301      	movs	r3, #1
 8010ebc:	1c95      	adds	r5, r2, #2
 8010ebe:	9306      	str	r3, [sp, #24]
 8010ec0:	2e00      	cmp	r6, #0
 8010ec2:	d100      	bne.n	8010ec6 <_strtoull_l.constprop.0+0x3a>
 8010ec4:	e088      	b.n	8010fd8 <_strtoull_l.constprop.0+0x14c>
 8010ec6:	2e10      	cmp	r6, #16
 8010ec8:	d10a      	bne.n	8010ee0 <_strtoull_l.constprop.0+0x54>
 8010eca:	2c30      	cmp	r4, #48	; 0x30
 8010ecc:	d108      	bne.n	8010ee0 <_strtoull_l.constprop.0+0x54>
 8010ece:	2220      	movs	r2, #32
 8010ed0:	782b      	ldrb	r3, [r5, #0]
 8010ed2:	4393      	bics	r3, r2
 8010ed4:	2b58      	cmp	r3, #88	; 0x58
 8010ed6:	d000      	beq.n	8010eda <_strtoull_l.constprop.0+0x4e>
 8010ed8:	e078      	b.n	8010fcc <_strtoull_l.constprop.0+0x140>
 8010eda:	2610      	movs	r6, #16
 8010edc:	786c      	ldrb	r4, [r5, #1]
 8010ede:	3502      	adds	r5, #2
 8010ee0:	17f7      	asrs	r7, r6, #31
 8010ee2:	0032      	movs	r2, r6
 8010ee4:	003b      	movs	r3, r7
 8010ee6:	2001      	movs	r0, #1
 8010ee8:	4240      	negs	r0, r0
 8010eea:	17c1      	asrs	r1, r0, #31
 8010eec:	f7ef fada 	bl	80004a4 <__aeabi_uldivmod>
 8010ef0:	0032      	movs	r2, r6
 8010ef2:	9007      	str	r0, [sp, #28]
 8010ef4:	9103      	str	r1, [sp, #12]
 8010ef6:	003b      	movs	r3, r7
 8010ef8:	2001      	movs	r0, #1
 8010efa:	4240      	negs	r0, r0
 8010efc:	17c1      	asrs	r1, r0, #31
 8010efe:	f7ef fad1 	bl	80004a4 <__aeabi_uldivmod>
 8010f02:	2300      	movs	r3, #0
 8010f04:	2000      	movs	r0, #0
 8010f06:	2100      	movs	r1, #0
 8010f08:	9208      	str	r2, [sp, #32]
 8010f0a:	0022      	movs	r2, r4
 8010f0c:	3a30      	subs	r2, #48	; 0x30
 8010f0e:	2a09      	cmp	r2, #9
 8010f10:	d82d      	bhi.n	8010f6e <_strtoull_l.constprop.0+0xe2>
 8010f12:	0014      	movs	r4, r2
 8010f14:	42a6      	cmp	r6, r4
 8010f16:	dd39      	ble.n	8010f8c <_strtoull_l.constprop.0+0x100>
 8010f18:	1c5a      	adds	r2, r3, #1
 8010f1a:	d01f      	beq.n	8010f5c <_strtoull_l.constprop.0+0xd0>
 8010f1c:	9b03      	ldr	r3, [sp, #12]
 8010f1e:	4299      	cmp	r1, r3
 8010f20:	d831      	bhi.n	8010f86 <_strtoull_l.constprop.0+0xfa>
 8010f22:	d102      	bne.n	8010f2a <_strtoull_l.constprop.0+0x9e>
 8010f24:	9b07      	ldr	r3, [sp, #28]
 8010f26:	4298      	cmp	r0, r3
 8010f28:	d82d      	bhi.n	8010f86 <_strtoull_l.constprop.0+0xfa>
 8010f2a:	9b07      	ldr	r3, [sp, #28]
 8010f2c:	4283      	cmp	r3, r0
 8010f2e:	d107      	bne.n	8010f40 <_strtoull_l.constprop.0+0xb4>
 8010f30:	9b03      	ldr	r3, [sp, #12]
 8010f32:	428b      	cmp	r3, r1
 8010f34:	d104      	bne.n	8010f40 <_strtoull_l.constprop.0+0xb4>
 8010f36:	2301      	movs	r3, #1
 8010f38:	9a08      	ldr	r2, [sp, #32]
 8010f3a:	425b      	negs	r3, r3
 8010f3c:	42a2      	cmp	r2, r4
 8010f3e:	db0d      	blt.n	8010f5c <_strtoull_l.constprop.0+0xd0>
 8010f40:	000b      	movs	r3, r1
 8010f42:	0002      	movs	r2, r0
 8010f44:	0039      	movs	r1, r7
 8010f46:	0030      	movs	r0, r6
 8010f48:	f7ef facc 	bl	80004e4 <__aeabi_lmul>
 8010f4c:	17e3      	asrs	r3, r4, #31
 8010f4e:	9404      	str	r4, [sp, #16]
 8010f50:	9305      	str	r3, [sp, #20]
 8010f52:	9b04      	ldr	r3, [sp, #16]
 8010f54:	9c05      	ldr	r4, [sp, #20]
 8010f56:	18c0      	adds	r0, r0, r3
 8010f58:	4161      	adcs	r1, r4
 8010f5a:	2301      	movs	r3, #1
 8010f5c:	782c      	ldrb	r4, [r5, #0]
 8010f5e:	3501      	adds	r5, #1
 8010f60:	e7d3      	b.n	8010f0a <_strtoull_l.constprop.0+0x7e>
 8010f62:	9706      	str	r7, [sp, #24]
 8010f64:	2c2b      	cmp	r4, #43	; 0x2b
 8010f66:	d1ab      	bne.n	8010ec0 <_strtoull_l.constprop.0+0x34>
 8010f68:	781c      	ldrb	r4, [r3, #0]
 8010f6a:	1c95      	adds	r5, r2, #2
 8010f6c:	e7a8      	b.n	8010ec0 <_strtoull_l.constprop.0+0x34>
 8010f6e:	0022      	movs	r2, r4
 8010f70:	3a41      	subs	r2, #65	; 0x41
 8010f72:	2a19      	cmp	r2, #25
 8010f74:	d801      	bhi.n	8010f7a <_strtoull_l.constprop.0+0xee>
 8010f76:	3c37      	subs	r4, #55	; 0x37
 8010f78:	e7cc      	b.n	8010f14 <_strtoull_l.constprop.0+0x88>
 8010f7a:	0022      	movs	r2, r4
 8010f7c:	3a61      	subs	r2, #97	; 0x61
 8010f7e:	2a19      	cmp	r2, #25
 8010f80:	d804      	bhi.n	8010f8c <_strtoull_l.constprop.0+0x100>
 8010f82:	3c57      	subs	r4, #87	; 0x57
 8010f84:	e7c6      	b.n	8010f14 <_strtoull_l.constprop.0+0x88>
 8010f86:	2301      	movs	r3, #1
 8010f88:	425b      	negs	r3, r3
 8010f8a:	e7e7      	b.n	8010f5c <_strtoull_l.constprop.0+0xd0>
 8010f8c:	1c5a      	adds	r2, r3, #1
 8010f8e:	d10a      	bne.n	8010fa6 <_strtoull_l.constprop.0+0x11a>
 8010f90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f92:	3323      	adds	r3, #35	; 0x23
 8010f94:	6013      	str	r3, [r2, #0]
 8010f96:	9b02      	ldr	r3, [sp, #8]
 8010f98:	2001      	movs	r0, #1
 8010f9a:	4240      	negs	r0, r0
 8010f9c:	17c1      	asrs	r1, r0, #31
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d10e      	bne.n	8010fc0 <_strtoull_l.constprop.0+0x134>
 8010fa2:	b00b      	add	sp, #44	; 0x2c
 8010fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fa6:	9a06      	ldr	r2, [sp, #24]
 8010fa8:	2a00      	cmp	r2, #0
 8010faa:	d004      	beq.n	8010fb6 <_strtoull_l.constprop.0+0x12a>
 8010fac:	0006      	movs	r6, r0
 8010fae:	000f      	movs	r7, r1
 8010fb0:	2100      	movs	r1, #0
 8010fb2:	4270      	negs	r0, r6
 8010fb4:	41b9      	sbcs	r1, r7
 8010fb6:	9a02      	ldr	r2, [sp, #8]
 8010fb8:	2a00      	cmp	r2, #0
 8010fba:	d0f2      	beq.n	8010fa2 <_strtoull_l.constprop.0+0x116>
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d001      	beq.n	8010fc4 <_strtoull_l.constprop.0+0x138>
 8010fc0:	1e6b      	subs	r3, r5, #1
 8010fc2:	9301      	str	r3, [sp, #4]
 8010fc4:	9b02      	ldr	r3, [sp, #8]
 8010fc6:	9a01      	ldr	r2, [sp, #4]
 8010fc8:	601a      	str	r2, [r3, #0]
 8010fca:	e7ea      	b.n	8010fa2 <_strtoull_l.constprop.0+0x116>
 8010fcc:	2430      	movs	r4, #48	; 0x30
 8010fce:	2e00      	cmp	r6, #0
 8010fd0:	d000      	beq.n	8010fd4 <_strtoull_l.constprop.0+0x148>
 8010fd2:	e785      	b.n	8010ee0 <_strtoull_l.constprop.0+0x54>
 8010fd4:	3608      	adds	r6, #8
 8010fd6:	e783      	b.n	8010ee0 <_strtoull_l.constprop.0+0x54>
 8010fd8:	2c30      	cmp	r4, #48	; 0x30
 8010fda:	d100      	bne.n	8010fde <_strtoull_l.constprop.0+0x152>
 8010fdc:	e777      	b.n	8010ece <_strtoull_l.constprop.0+0x42>
 8010fde:	260a      	movs	r6, #10
 8010fe0:	e77e      	b.n	8010ee0 <_strtoull_l.constprop.0+0x54>
 8010fe2:	46c0      	nop			; (mov r8, r8)
 8010fe4:	08013f91 	.word	0x08013f91

08010fe8 <_strtoull_r>:
 8010fe8:	b510      	push	{r4, lr}
 8010fea:	f7ff ff4f 	bl	8010e8c <_strtoull_l.constprop.0>
 8010fee:	bd10      	pop	{r4, pc}

08010ff0 <_mbrtowc_r>:
 8010ff0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010ff2:	0004      	movs	r4, r0
 8010ff4:	0010      	movs	r0, r2
 8010ff6:	4a0b      	ldr	r2, [pc, #44]	; (8011024 <_mbrtowc_r+0x34>)
 8010ff8:	9d06      	ldr	r5, [sp, #24]
 8010ffa:	32e4      	adds	r2, #228	; 0xe4
 8010ffc:	6816      	ldr	r6, [r2, #0]
 8010ffe:	2800      	cmp	r0, #0
 8011000:	d10c      	bne.n	801101c <_mbrtowc_r+0x2c>
 8011002:	2301      	movs	r3, #1
 8011004:	0001      	movs	r1, r0
 8011006:	4a08      	ldr	r2, [pc, #32]	; (8011028 <_mbrtowc_r+0x38>)
 8011008:	9500      	str	r5, [sp, #0]
 801100a:	0020      	movs	r0, r4
 801100c:	47b0      	blx	r6
 801100e:	1c43      	adds	r3, r0, #1
 8011010:	d103      	bne.n	801101a <_mbrtowc_r+0x2a>
 8011012:	2300      	movs	r3, #0
 8011014:	602b      	str	r3, [r5, #0]
 8011016:	338a      	adds	r3, #138	; 0x8a
 8011018:	6023      	str	r3, [r4, #0]
 801101a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 801101c:	0002      	movs	r2, r0
 801101e:	9500      	str	r5, [sp, #0]
 8011020:	e7f3      	b.n	801100a <_mbrtowc_r+0x1a>
 8011022:	46c0      	nop			; (mov r8, r8)
 8011024:	20000448 	.word	0x20000448
 8011028:	0801431b 	.word	0x0801431b

0801102c <iswspace>:
 801102c:	b510      	push	{r4, lr}
 801102e:	2100      	movs	r1, #0
 8011030:	f000 f802 	bl	8011038 <iswspace_l>
 8011034:	bd10      	pop	{r4, pc}
	...

08011038 <iswspace_l>:
 8011038:	0003      	movs	r3, r0
 801103a:	2000      	movs	r0, #0
 801103c:	2bff      	cmp	r3, #255	; 0xff
 801103e:	d803      	bhi.n	8011048 <iswspace_l+0x10>
 8011040:	4a02      	ldr	r2, [pc, #8]	; (801104c <iswspace_l+0x14>)
 8011042:	5cd0      	ldrb	r0, [r2, r3]
 8011044:	2308      	movs	r3, #8
 8011046:	4018      	ands	r0, r3
 8011048:	4770      	bx	lr
 801104a:	46c0      	nop			; (mov r8, r8)
 801104c:	08013f91 	.word	0x08013f91

08011050 <fiprintf>:
 8011050:	b40e      	push	{r1, r2, r3}
 8011052:	b517      	push	{r0, r1, r2, r4, lr}
 8011054:	4c05      	ldr	r4, [pc, #20]	; (801106c <fiprintf+0x1c>)
 8011056:	ab05      	add	r3, sp, #20
 8011058:	cb04      	ldmia	r3!, {r2}
 801105a:	0001      	movs	r1, r0
 801105c:	6820      	ldr	r0, [r4, #0]
 801105e:	9301      	str	r3, [sp, #4]
 8011060:	f000 f954 	bl	801130c <_vfiprintf_r>
 8011064:	bc1e      	pop	{r1, r2, r3, r4}
 8011066:	bc08      	pop	{r3}
 8011068:	b003      	add	sp, #12
 801106a:	4718      	bx	r3
 801106c:	200006d8 	.word	0x200006d8

08011070 <__ssprint_r>:
 8011070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011072:	6813      	ldr	r3, [r2, #0]
 8011074:	b087      	sub	sp, #28
 8011076:	0017      	movs	r7, r2
 8011078:	9303      	str	r3, [sp, #12]
 801107a:	6893      	ldr	r3, [r2, #8]
 801107c:	2200      	movs	r2, #0
 801107e:	000c      	movs	r4, r1
 8011080:	9005      	str	r0, [sp, #20]
 8011082:	9202      	str	r2, [sp, #8]
 8011084:	9201      	str	r2, [sp, #4]
 8011086:	4293      	cmp	r3, r2
 8011088:	d10d      	bne.n	80110a6 <__ssprint_r+0x36>
 801108a:	2000      	movs	r0, #0
 801108c:	2300      	movs	r3, #0
 801108e:	607b      	str	r3, [r7, #4]
 8011090:	b007      	add	sp, #28
 8011092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011094:	9b03      	ldr	r3, [sp, #12]
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	9302      	str	r3, [sp, #8]
 801109a:	9b03      	ldr	r3, [sp, #12]
 801109c:	685b      	ldr	r3, [r3, #4]
 801109e:	9301      	str	r3, [sp, #4]
 80110a0:	9b03      	ldr	r3, [sp, #12]
 80110a2:	3308      	adds	r3, #8
 80110a4:	9303      	str	r3, [sp, #12]
 80110a6:	9a01      	ldr	r2, [sp, #4]
 80110a8:	68a6      	ldr	r6, [r4, #8]
 80110aa:	6823      	ldr	r3, [r4, #0]
 80110ac:	2a00      	cmp	r2, #0
 80110ae:	d0f1      	beq.n	8011094 <__ssprint_r+0x24>
 80110b0:	42b2      	cmp	r2, r6
 80110b2:	d32e      	bcc.n	8011112 <__ssprint_r+0xa2>
 80110b4:	2190      	movs	r1, #144	; 0x90
 80110b6:	89a2      	ldrh	r2, [r4, #12]
 80110b8:	00c9      	lsls	r1, r1, #3
 80110ba:	420a      	tst	r2, r1
 80110bc:	d029      	beq.n	8011112 <__ssprint_r+0xa2>
 80110be:	2003      	movs	r0, #3
 80110c0:	6921      	ldr	r1, [r4, #16]
 80110c2:	1a5b      	subs	r3, r3, r1
 80110c4:	9304      	str	r3, [sp, #16]
 80110c6:	6963      	ldr	r3, [r4, #20]
 80110c8:	4343      	muls	r3, r0
 80110ca:	0fdd      	lsrs	r5, r3, #31
 80110cc:	18ed      	adds	r5, r5, r3
 80110ce:	9b04      	ldr	r3, [sp, #16]
 80110d0:	9801      	ldr	r0, [sp, #4]
 80110d2:	3301      	adds	r3, #1
 80110d4:	181b      	adds	r3, r3, r0
 80110d6:	106d      	asrs	r5, r5, #1
 80110d8:	42ab      	cmp	r3, r5
 80110da:	d900      	bls.n	80110de <__ssprint_r+0x6e>
 80110dc:	001d      	movs	r5, r3
 80110de:	0552      	lsls	r2, r2, #21
 80110e0:	d532      	bpl.n	8011148 <__ssprint_r+0xd8>
 80110e2:	0029      	movs	r1, r5
 80110e4:	9805      	ldr	r0, [sp, #20]
 80110e6:	f7f9 fa35 	bl	800a554 <_malloc_r>
 80110ea:	1e06      	subs	r6, r0, #0
 80110ec:	d036      	beq.n	801115c <__ssprint_r+0xec>
 80110ee:	9a04      	ldr	r2, [sp, #16]
 80110f0:	6921      	ldr	r1, [r4, #16]
 80110f2:	f7fa fd94 	bl	800bc1e <memcpy>
 80110f6:	89a2      	ldrh	r2, [r4, #12]
 80110f8:	4b1e      	ldr	r3, [pc, #120]	; (8011174 <__ssprint_r+0x104>)
 80110fa:	401a      	ands	r2, r3
 80110fc:	2380      	movs	r3, #128	; 0x80
 80110fe:	4313      	orrs	r3, r2
 8011100:	81a3      	strh	r3, [r4, #12]
 8011102:	9b04      	ldr	r3, [sp, #16]
 8011104:	6126      	str	r6, [r4, #16]
 8011106:	18f6      	adds	r6, r6, r3
 8011108:	6026      	str	r6, [r4, #0]
 801110a:	6165      	str	r5, [r4, #20]
 801110c:	9e01      	ldr	r6, [sp, #4]
 801110e:	1aed      	subs	r5, r5, r3
 8011110:	60a5      	str	r5, [r4, #8]
 8011112:	9b01      	ldr	r3, [sp, #4]
 8011114:	429e      	cmp	r6, r3
 8011116:	d900      	bls.n	801111a <__ssprint_r+0xaa>
 8011118:	001e      	movs	r6, r3
 801111a:	0032      	movs	r2, r6
 801111c:	9902      	ldr	r1, [sp, #8]
 801111e:	6820      	ldr	r0, [r4, #0]
 8011120:	f001 f86d 	bl	80121fe <memmove>
 8011124:	9a01      	ldr	r2, [sp, #4]
 8011126:	68a3      	ldr	r3, [r4, #8]
 8011128:	4694      	mov	ip, r2
 801112a:	1b9b      	subs	r3, r3, r6
 801112c:	60a3      	str	r3, [r4, #8]
 801112e:	6823      	ldr	r3, [r4, #0]
 8011130:	199b      	adds	r3, r3, r6
 8011132:	6023      	str	r3, [r4, #0]
 8011134:	9b02      	ldr	r3, [sp, #8]
 8011136:	4463      	add	r3, ip
 8011138:	9302      	str	r3, [sp, #8]
 801113a:	68bb      	ldr	r3, [r7, #8]
 801113c:	1a9b      	subs	r3, r3, r2
 801113e:	60bb      	str	r3, [r7, #8]
 8011140:	d0a3      	beq.n	801108a <__ssprint_r+0x1a>
 8011142:	2300      	movs	r3, #0
 8011144:	9301      	str	r3, [sp, #4]
 8011146:	e7ae      	b.n	80110a6 <__ssprint_r+0x36>
 8011148:	002a      	movs	r2, r5
 801114a:	9805      	ldr	r0, [sp, #20]
 801114c:	f7ff fbc0 	bl	80108d0 <_realloc_r>
 8011150:	1e06      	subs	r6, r0, #0
 8011152:	d1d6      	bne.n	8011102 <__ssprint_r+0x92>
 8011154:	6921      	ldr	r1, [r4, #16]
 8011156:	9805      	ldr	r0, [sp, #20]
 8011158:	f7fa fddc 	bl	800bd14 <_free_r>
 801115c:	230c      	movs	r3, #12
 801115e:	9a05      	ldr	r2, [sp, #20]
 8011160:	2001      	movs	r0, #1
 8011162:	6013      	str	r3, [r2, #0]
 8011164:	89a2      	ldrh	r2, [r4, #12]
 8011166:	3334      	adds	r3, #52	; 0x34
 8011168:	4313      	orrs	r3, r2
 801116a:	81a3      	strh	r3, [r4, #12]
 801116c:	2300      	movs	r3, #0
 801116e:	4240      	negs	r0, r0
 8011170:	60bb      	str	r3, [r7, #8]
 8011172:	e78b      	b.n	801108c <__ssprint_r+0x1c>
 8011174:	fffffb7f 	.word	0xfffffb7f

08011178 <_sungetc_r>:
 8011178:	b570      	push	{r4, r5, r6, lr}
 801117a:	0014      	movs	r4, r2
 801117c:	1c4b      	adds	r3, r1, #1
 801117e:	d103      	bne.n	8011188 <_sungetc_r+0x10>
 8011180:	2501      	movs	r5, #1
 8011182:	426d      	negs	r5, r5
 8011184:	0028      	movs	r0, r5
 8011186:	bd70      	pop	{r4, r5, r6, pc}
 8011188:	8993      	ldrh	r3, [r2, #12]
 801118a:	2220      	movs	r2, #32
 801118c:	4393      	bics	r3, r2
 801118e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011190:	81a3      	strh	r3, [r4, #12]
 8011192:	b2ce      	uxtb	r6, r1
 8011194:	6863      	ldr	r3, [r4, #4]
 8011196:	b2cd      	uxtb	r5, r1
 8011198:	2a00      	cmp	r2, #0
 801119a:	d010      	beq.n	80111be <_sungetc_r+0x46>
 801119c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801119e:	429a      	cmp	r2, r3
 80111a0:	dd07      	ble.n	80111b2 <_sungetc_r+0x3a>
 80111a2:	6823      	ldr	r3, [r4, #0]
 80111a4:	3b01      	subs	r3, #1
 80111a6:	6023      	str	r3, [r4, #0]
 80111a8:	701e      	strb	r6, [r3, #0]
 80111aa:	6863      	ldr	r3, [r4, #4]
 80111ac:	3301      	adds	r3, #1
 80111ae:	6063      	str	r3, [r4, #4]
 80111b0:	e7e8      	b.n	8011184 <_sungetc_r+0xc>
 80111b2:	0021      	movs	r1, r4
 80111b4:	f000 ff1a 	bl	8011fec <__submore>
 80111b8:	2800      	cmp	r0, #0
 80111ba:	d0f2      	beq.n	80111a2 <_sungetc_r+0x2a>
 80111bc:	e7e0      	b.n	8011180 <_sungetc_r+0x8>
 80111be:	6921      	ldr	r1, [r4, #16]
 80111c0:	6822      	ldr	r2, [r4, #0]
 80111c2:	2900      	cmp	r1, #0
 80111c4:	d007      	beq.n	80111d6 <_sungetc_r+0x5e>
 80111c6:	4291      	cmp	r1, r2
 80111c8:	d205      	bcs.n	80111d6 <_sungetc_r+0x5e>
 80111ca:	1e51      	subs	r1, r2, #1
 80111cc:	7808      	ldrb	r0, [r1, #0]
 80111ce:	42a8      	cmp	r0, r5
 80111d0:	d101      	bne.n	80111d6 <_sungetc_r+0x5e>
 80111d2:	6021      	str	r1, [r4, #0]
 80111d4:	e7ea      	b.n	80111ac <_sungetc_r+0x34>
 80111d6:	63e3      	str	r3, [r4, #60]	; 0x3c
 80111d8:	0023      	movs	r3, r4
 80111da:	3340      	adds	r3, #64	; 0x40
 80111dc:	6323      	str	r3, [r4, #48]	; 0x30
 80111de:	2303      	movs	r3, #3
 80111e0:	6363      	str	r3, [r4, #52]	; 0x34
 80111e2:	0023      	movs	r3, r4
 80111e4:	3342      	adds	r3, #66	; 0x42
 80111e6:	63a2      	str	r2, [r4, #56]	; 0x38
 80111e8:	701e      	strb	r6, [r3, #0]
 80111ea:	6023      	str	r3, [r4, #0]
 80111ec:	2301      	movs	r3, #1
 80111ee:	e7de      	b.n	80111ae <_sungetc_r+0x36>

080111f0 <__ssrefill_r>:
 80111f0:	b510      	push	{r4, lr}
 80111f2:	000c      	movs	r4, r1
 80111f4:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80111f6:	2900      	cmp	r1, #0
 80111f8:	d00e      	beq.n	8011218 <__ssrefill_r+0x28>
 80111fa:	0023      	movs	r3, r4
 80111fc:	3340      	adds	r3, #64	; 0x40
 80111fe:	4299      	cmp	r1, r3
 8011200:	d001      	beq.n	8011206 <__ssrefill_r+0x16>
 8011202:	f7fa fd87 	bl	800bd14 <_free_r>
 8011206:	2000      	movs	r0, #0
 8011208:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801120a:	6320      	str	r0, [r4, #48]	; 0x30
 801120c:	6063      	str	r3, [r4, #4]
 801120e:	4283      	cmp	r3, r0
 8011210:	d002      	beq.n	8011218 <__ssrefill_r+0x28>
 8011212:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011214:	6023      	str	r3, [r4, #0]
 8011216:	bd10      	pop	{r4, pc}
 8011218:	6923      	ldr	r3, [r4, #16]
 801121a:	2001      	movs	r0, #1
 801121c:	6023      	str	r3, [r4, #0]
 801121e:	2300      	movs	r3, #0
 8011220:	89a2      	ldrh	r2, [r4, #12]
 8011222:	6063      	str	r3, [r4, #4]
 8011224:	3320      	adds	r3, #32
 8011226:	4313      	orrs	r3, r2
 8011228:	81a3      	strh	r3, [r4, #12]
 801122a:	4240      	negs	r0, r0
 801122c:	e7f3      	b.n	8011216 <__ssrefill_r+0x26>

0801122e <_sfread_r>:
 801122e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011230:	0014      	movs	r4, r2
 8011232:	435c      	muls	r4, r3
 8011234:	b087      	sub	sp, #28
 8011236:	1e26      	subs	r6, r4, #0
 8011238:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801123a:	9005      	str	r0, [sp, #20]
 801123c:	9101      	str	r1, [sp, #4]
 801123e:	9202      	str	r2, [sp, #8]
 8011240:	9303      	str	r3, [sp, #12]
 8011242:	d11e      	bne.n	8011282 <_sfread_r+0x54>
 8011244:	0020      	movs	r0, r4
 8011246:	b007      	add	sp, #28
 8011248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801124a:	003a      	movs	r2, r7
 801124c:	9801      	ldr	r0, [sp, #4]
 801124e:	f7fa fce6 	bl	800bc1e <memcpy>
 8011252:	682b      	ldr	r3, [r5, #0]
 8011254:	0029      	movs	r1, r5
 8011256:	19db      	adds	r3, r3, r7
 8011258:	602b      	str	r3, [r5, #0]
 801125a:	2300      	movs	r3, #0
 801125c:	606b      	str	r3, [r5, #4]
 801125e:	9b01      	ldr	r3, [sp, #4]
 8011260:	9805      	ldr	r0, [sp, #20]
 8011262:	19db      	adds	r3, r3, r7
 8011264:	9301      	str	r3, [sp, #4]
 8011266:	1bf3      	subs	r3, r6, r7
 8011268:	9304      	str	r3, [sp, #16]
 801126a:	f7ff ffc1 	bl	80111f0 <__ssrefill_r>
 801126e:	2800      	cmp	r0, #0
 8011270:	d006      	beq.n	8011280 <_sfread_r+0x52>
 8011272:	193c      	adds	r4, r7, r4
 8011274:	1ba0      	subs	r0, r4, r6
 8011276:	9902      	ldr	r1, [sp, #8]
 8011278:	f7ee ff60 	bl	800013c <__udivsi3>
 801127c:	0004      	movs	r4, r0
 801127e:	e7e1      	b.n	8011244 <_sfread_r+0x16>
 8011280:	9e04      	ldr	r6, [sp, #16]
 8011282:	686f      	ldr	r7, [r5, #4]
 8011284:	6829      	ldr	r1, [r5, #0]
 8011286:	42b7      	cmp	r7, r6
 8011288:	d3df      	bcc.n	801124a <_sfread_r+0x1c>
 801128a:	0032      	movs	r2, r6
 801128c:	9801      	ldr	r0, [sp, #4]
 801128e:	f7fa fcc6 	bl	800bc1e <memcpy>
 8011292:	686b      	ldr	r3, [r5, #4]
 8011294:	9c03      	ldr	r4, [sp, #12]
 8011296:	1b9b      	subs	r3, r3, r6
 8011298:	606b      	str	r3, [r5, #4]
 801129a:	682b      	ldr	r3, [r5, #0]
 801129c:	199b      	adds	r3, r3, r6
 801129e:	602b      	str	r3, [r5, #0]
 80112a0:	e7d0      	b.n	8011244 <_sfread_r+0x16>

080112a2 <__sprint_r>:
 80112a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112a4:	6893      	ldr	r3, [r2, #8]
 80112a6:	b085      	sub	sp, #20
 80112a8:	9001      	str	r0, [sp, #4]
 80112aa:	000d      	movs	r5, r1
 80112ac:	0014      	movs	r4, r2
 80112ae:	1e18      	subs	r0, r3, #0
 80112b0:	d018      	beq.n	80112e4 <__sprint_r+0x42>
 80112b2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80112b4:	049b      	lsls	r3, r3, #18
 80112b6:	d524      	bpl.n	8011302 <__sprint_r+0x60>
 80112b8:	6817      	ldr	r7, [r2, #0]
 80112ba:	2600      	movs	r6, #0
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	9302      	str	r3, [sp, #8]
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	9300      	str	r3, [sp, #0]
 80112c4:	089b      	lsrs	r3, r3, #2
 80112c6:	9303      	str	r3, [sp, #12]
 80112c8:	9b03      	ldr	r3, [sp, #12]
 80112ca:	42b3      	cmp	r3, r6
 80112cc:	dc0e      	bgt.n	80112ec <__sprint_r+0x4a>
 80112ce:	2203      	movs	r2, #3
 80112d0:	9b00      	ldr	r3, [sp, #0]
 80112d2:	68a0      	ldr	r0, [r4, #8]
 80112d4:	4393      	bics	r3, r2
 80112d6:	1ac0      	subs	r0, r0, r3
 80112d8:	60a0      	str	r0, [r4, #8]
 80112da:	3708      	adds	r7, #8
 80112dc:	2800      	cmp	r0, #0
 80112de:	d1ec      	bne.n	80112ba <__sprint_r+0x18>
 80112e0:	2300      	movs	r3, #0
 80112e2:	60a3      	str	r3, [r4, #8]
 80112e4:	2300      	movs	r3, #0
 80112e6:	6063      	str	r3, [r4, #4]
 80112e8:	b005      	add	sp, #20
 80112ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112ec:	9902      	ldr	r1, [sp, #8]
 80112ee:	00b3      	lsls	r3, r6, #2
 80112f0:	58c9      	ldr	r1, [r1, r3]
 80112f2:	002a      	movs	r2, r5
 80112f4:	9801      	ldr	r0, [sp, #4]
 80112f6:	f000 ff59 	bl	80121ac <_fputwc_r>
 80112fa:	1c43      	adds	r3, r0, #1
 80112fc:	d0f0      	beq.n	80112e0 <__sprint_r+0x3e>
 80112fe:	3601      	adds	r6, #1
 8011300:	e7e2      	b.n	80112c8 <__sprint_r+0x26>
 8011302:	9801      	ldr	r0, [sp, #4]
 8011304:	f000 fd14 	bl	8011d30 <__sfvwrite_r>
 8011308:	e7ea      	b.n	80112e0 <__sprint_r+0x3e>
	...

0801130c <_vfiprintf_r>:
 801130c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801130e:	b0c1      	sub	sp, #260	; 0x104
 8011310:	001c      	movs	r4, r3
 8011312:	001f      	movs	r7, r3
 8011314:	9006      	str	r0, [sp, #24]
 8011316:	9103      	str	r1, [sp, #12]
 8011318:	9207      	str	r2, [sp, #28]
 801131a:	2800      	cmp	r0, #0
 801131c:	d004      	beq.n	8011328 <_vfiprintf_r+0x1c>
 801131e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011320:	2b00      	cmp	r3, #0
 8011322:	d101      	bne.n	8011328 <_vfiprintf_r+0x1c>
 8011324:	f7fa fa98 	bl	800b858 <__sinit>
 8011328:	9b03      	ldr	r3, [sp, #12]
 801132a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801132c:	07db      	lsls	r3, r3, #31
 801132e:	d407      	bmi.n	8011340 <_vfiprintf_r+0x34>
 8011330:	9b03      	ldr	r3, [sp, #12]
 8011332:	899b      	ldrh	r3, [r3, #12]
 8011334:	059b      	lsls	r3, r3, #22
 8011336:	d403      	bmi.n	8011340 <_vfiprintf_r+0x34>
 8011338:	9b03      	ldr	r3, [sp, #12]
 801133a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 801133c:	f7fa fc62 	bl	800bc04 <__retarget_lock_acquire_recursive>
 8011340:	9b03      	ldr	r3, [sp, #12]
 8011342:	220c      	movs	r2, #12
 8011344:	5e9a      	ldrsh	r2, [r3, r2]
 8011346:	2380      	movs	r3, #128	; 0x80
 8011348:	019b      	lsls	r3, r3, #6
 801134a:	421a      	tst	r2, r3
 801134c:	d107      	bne.n	801135e <_vfiprintf_r+0x52>
 801134e:	4313      	orrs	r3, r2
 8011350:	9a03      	ldr	r2, [sp, #12]
 8011352:	8193      	strh	r3, [r2, #12]
 8011354:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8011356:	4aa3      	ldr	r2, [pc, #652]	; (80115e4 <_vfiprintf_r+0x2d8>)
 8011358:	4013      	ands	r3, r2
 801135a:	9a03      	ldr	r2, [sp, #12]
 801135c:	6653      	str	r3, [r2, #100]	; 0x64
 801135e:	9b03      	ldr	r3, [sp, #12]
 8011360:	899b      	ldrh	r3, [r3, #12]
 8011362:	071b      	lsls	r3, r3, #28
 8011364:	d503      	bpl.n	801136e <_vfiprintf_r+0x62>
 8011366:	9b03      	ldr	r3, [sp, #12]
 8011368:	691b      	ldr	r3, [r3, #16]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d118      	bne.n	80113a0 <_vfiprintf_r+0x94>
 801136e:	9903      	ldr	r1, [sp, #12]
 8011370:	9806      	ldr	r0, [sp, #24]
 8011372:	f000 fe79 	bl	8012068 <__swsetup_r>
 8011376:	2800      	cmp	r0, #0
 8011378:	d012      	beq.n	80113a0 <_vfiprintf_r+0x94>
 801137a:	9b03      	ldr	r3, [sp, #12]
 801137c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801137e:	07db      	lsls	r3, r3, #31
 8011380:	d505      	bpl.n	801138e <_vfiprintf_r+0x82>
 8011382:	2301      	movs	r3, #1
 8011384:	425b      	negs	r3, r3
 8011386:	9308      	str	r3, [sp, #32]
 8011388:	9808      	ldr	r0, [sp, #32]
 801138a:	b041      	add	sp, #260	; 0x104
 801138c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801138e:	9b03      	ldr	r3, [sp, #12]
 8011390:	899b      	ldrh	r3, [r3, #12]
 8011392:	059b      	lsls	r3, r3, #22
 8011394:	d4f5      	bmi.n	8011382 <_vfiprintf_r+0x76>
 8011396:	9b03      	ldr	r3, [sp, #12]
 8011398:	6d98      	ldr	r0, [r3, #88]	; 0x58
 801139a:	f7fa fc34 	bl	800bc06 <__retarget_lock_release_recursive>
 801139e:	e7f0      	b.n	8011382 <_vfiprintf_r+0x76>
 80113a0:	221a      	movs	r2, #26
 80113a2:	9b03      	ldr	r3, [sp, #12]
 80113a4:	899b      	ldrh	r3, [r3, #12]
 80113a6:	401a      	ands	r2, r3
 80113a8:	2a0a      	cmp	r2, #10
 80113aa:	d116      	bne.n	80113da <_vfiprintf_r+0xce>
 80113ac:	9a03      	ldr	r2, [sp, #12]
 80113ae:	210e      	movs	r1, #14
 80113b0:	5e52      	ldrsh	r2, [r2, r1]
 80113b2:	2a00      	cmp	r2, #0
 80113b4:	db11      	blt.n	80113da <_vfiprintf_r+0xce>
 80113b6:	9a03      	ldr	r2, [sp, #12]
 80113b8:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80113ba:	07d2      	lsls	r2, r2, #31
 80113bc:	d405      	bmi.n	80113ca <_vfiprintf_r+0xbe>
 80113be:	059b      	lsls	r3, r3, #22
 80113c0:	d403      	bmi.n	80113ca <_vfiprintf_r+0xbe>
 80113c2:	9b03      	ldr	r3, [sp, #12]
 80113c4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80113c6:	f7fa fc1e 	bl	800bc06 <__retarget_lock_release_recursive>
 80113ca:	0023      	movs	r3, r4
 80113cc:	9a07      	ldr	r2, [sp, #28]
 80113ce:	9903      	ldr	r1, [sp, #12]
 80113d0:	9806      	ldr	r0, [sp, #24]
 80113d2:	f000 fc69 	bl	8011ca8 <__sbprintf>
 80113d6:	9008      	str	r0, [sp, #32]
 80113d8:	e7d6      	b.n	8011388 <_vfiprintf_r+0x7c>
 80113da:	2300      	movs	r3, #0
 80113dc:	ad17      	add	r5, sp, #92	; 0x5c
 80113de:	9514      	str	r5, [sp, #80]	; 0x50
 80113e0:	9316      	str	r3, [sp, #88]	; 0x58
 80113e2:	9315      	str	r3, [sp, #84]	; 0x54
 80113e4:	930c      	str	r3, [sp, #48]	; 0x30
 80113e6:	930d      	str	r3, [sp, #52]	; 0x34
 80113e8:	930e      	str	r3, [sp, #56]	; 0x38
 80113ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80113ec:	9308      	str	r3, [sp, #32]
 80113ee:	9c07      	ldr	r4, [sp, #28]
 80113f0:	7823      	ldrb	r3, [r4, #0]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d002      	beq.n	80113fc <_vfiprintf_r+0xf0>
 80113f6:	2b25      	cmp	r3, #37	; 0x25
 80113f8:	d000      	beq.n	80113fc <_vfiprintf_r+0xf0>
 80113fa:	e08d      	b.n	8011518 <_vfiprintf_r+0x20c>
 80113fc:	9b07      	ldr	r3, [sp, #28]
 80113fe:	1ae6      	subs	r6, r4, r3
 8011400:	429c      	cmp	r4, r3
 8011402:	d016      	beq.n	8011432 <_vfiprintf_r+0x126>
 8011404:	602b      	str	r3, [r5, #0]
 8011406:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011408:	606e      	str	r6, [r5, #4]
 801140a:	199b      	adds	r3, r3, r6
 801140c:	9316      	str	r3, [sp, #88]	; 0x58
 801140e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011410:	3508      	adds	r5, #8
 8011412:	3301      	adds	r3, #1
 8011414:	9315      	str	r3, [sp, #84]	; 0x54
 8011416:	2b07      	cmp	r3, #7
 8011418:	dd08      	ble.n	801142c <_vfiprintf_r+0x120>
 801141a:	9903      	ldr	r1, [sp, #12]
 801141c:	9806      	ldr	r0, [sp, #24]
 801141e:	aa14      	add	r2, sp, #80	; 0x50
 8011420:	f7ff ff3f 	bl	80112a2 <__sprint_r>
 8011424:	2800      	cmp	r0, #0
 8011426:	d000      	beq.n	801142a <_vfiprintf_r+0x11e>
 8011428:	e3d9      	b.n	8011bde <_vfiprintf_r+0x8d2>
 801142a:	ad17      	add	r5, sp, #92	; 0x5c
 801142c:	9b08      	ldr	r3, [sp, #32]
 801142e:	199b      	adds	r3, r3, r6
 8011430:	9308      	str	r3, [sp, #32]
 8011432:	7823      	ldrb	r3, [r4, #0]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d101      	bne.n	801143c <_vfiprintf_r+0x130>
 8011438:	f000 fbf6 	bl	8011c28 <_vfiprintf_r+0x91c>
 801143c:	2200      	movs	r2, #0
 801143e:	a912      	add	r1, sp, #72	; 0x48
 8011440:	70ca      	strb	r2, [r1, #3]
 8011442:	2101      	movs	r1, #1
 8011444:	1c63      	adds	r3, r4, #1
 8011446:	0014      	movs	r4, r2
 8011448:	4249      	negs	r1, r1
 801144a:	9105      	str	r1, [sp, #20]
 801144c:	9209      	str	r2, [sp, #36]	; 0x24
 801144e:	1c5a      	adds	r2, r3, #1
 8011450:	781b      	ldrb	r3, [r3, #0]
 8011452:	9207      	str	r2, [sp, #28]
 8011454:	0018      	movs	r0, r3
 8011456:	3820      	subs	r0, #32
 8011458:	285a      	cmp	r0, #90	; 0x5a
 801145a:	d900      	bls.n	801145e <_vfiprintf_r+0x152>
 801145c:	e362      	b.n	8011b24 <_vfiprintf_r+0x818>
 801145e:	f7ee fe63 	bl	8000128 <__gnu_thumb1_case_uhi>
 8011462:	0078      	.short	0x0078
 8011464:	03610361 	.word	0x03610361
 8011468:	03610081 	.word	0x03610081
 801146c:	03610361 	.word	0x03610361
 8011470:	0361005d 	.word	0x0361005d
 8011474:	00830361 	.word	0x00830361
 8011478:	0361008b 	.word	0x0361008b
 801147c:	008f0089 	.word	0x008f0089
 8011480:	00ad0361 	.word	0x00ad0361
 8011484:	00af00af 	.word	0x00af00af
 8011488:	00af00af 	.word	0x00af00af
 801148c:	00af00af 	.word	0x00af00af
 8011490:	00af00af 	.word	0x00af00af
 8011494:	036100af 	.word	0x036100af
 8011498:	03610361 	.word	0x03610361
 801149c:	03610361 	.word	0x03610361
 80114a0:	03610361 	.word	0x03610361
 80114a4:	03610361 	.word	0x03610361
 80114a8:	00e600da 	.word	0x00e600da
 80114ac:	03610361 	.word	0x03610361
 80114b0:	03610361 	.word	0x03610361
 80114b4:	03610361 	.word	0x03610361
 80114b8:	03610361 	.word	0x03610361
 80114bc:	03610361 	.word	0x03610361
 80114c0:	03610143 	.word	0x03610143
 80114c4:	03610361 	.word	0x03610361
 80114c8:	03610182 	.word	0x03610182
 80114cc:	0361027c 	.word	0x0361027c
 80114d0:	02ae0361 	.word	0x02ae0361
 80114d4:	03610361 	.word	0x03610361
 80114d8:	03610361 	.word	0x03610361
 80114dc:	03610361 	.word	0x03610361
 80114e0:	03610361 	.word	0x03610361
 80114e4:	03610361 	.word	0x03610361
 80114e8:	00e800da 	.word	0x00e800da
 80114ec:	03610361 	.word	0x03610361
 80114f0:	00c30361 	.word	0x00c30361
 80114f4:	00d600e8 	.word	0x00d600e8
 80114f8:	00cf0361 	.word	0x00cf0361
 80114fc:	01260361 	.word	0x01260361
 8011500:	01740145 	.word	0x01740145
 8011504:	036100d6 	.word	0x036100d6
 8011508:	007f0182 	.word	0x007f0182
 801150c:	0361027e 	.word	0x0361027e
 8011510:	02cd0361 	.word	0x02cd0361
 8011514:	007f0361 	.word	0x007f0361
 8011518:	3401      	adds	r4, #1
 801151a:	e769      	b.n	80113f0 <_vfiprintf_r+0xe4>
 801151c:	9806      	ldr	r0, [sp, #24]
 801151e:	f7fe fa47 	bl	800f9b0 <_localeconv_r>
 8011522:	6843      	ldr	r3, [r0, #4]
 8011524:	0018      	movs	r0, r3
 8011526:	930f      	str	r3, [sp, #60]	; 0x3c
 8011528:	f7ee fdec 	bl	8000104 <strlen>
 801152c:	900e      	str	r0, [sp, #56]	; 0x38
 801152e:	9806      	ldr	r0, [sp, #24]
 8011530:	f7fe fa3e 	bl	800f9b0 <_localeconv_r>
 8011534:	6883      	ldr	r3, [r0, #8]
 8011536:	930d      	str	r3, [sp, #52]	; 0x34
 8011538:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801153a:	2b00      	cmp	r3, #0
 801153c:	d010      	beq.n	8011560 <_vfiprintf_r+0x254>
 801153e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011540:	2b00      	cmp	r3, #0
 8011542:	d00d      	beq.n	8011560 <_vfiprintf_r+0x254>
 8011544:	781b      	ldrb	r3, [r3, #0]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d00a      	beq.n	8011560 <_vfiprintf_r+0x254>
 801154a:	2380      	movs	r3, #128	; 0x80
 801154c:	00db      	lsls	r3, r3, #3
 801154e:	431c      	orrs	r4, r3
 8011550:	e006      	b.n	8011560 <_vfiprintf_r+0x254>
 8011552:	ab12      	add	r3, sp, #72	; 0x48
 8011554:	78da      	ldrb	r2, [r3, #3]
 8011556:	3303      	adds	r3, #3
 8011558:	2a00      	cmp	r2, #0
 801155a:	d101      	bne.n	8011560 <_vfiprintf_r+0x254>
 801155c:	3220      	adds	r2, #32
 801155e:	701a      	strb	r2, [r3, #0]
 8011560:	9b07      	ldr	r3, [sp, #28]
 8011562:	e774      	b.n	801144e <_vfiprintf_r+0x142>
 8011564:	2301      	movs	r3, #1
 8011566:	e7f2      	b.n	801154e <_vfiprintf_r+0x242>
 8011568:	cf08      	ldmia	r7!, {r3}
 801156a:	9309      	str	r3, [sp, #36]	; 0x24
 801156c:	2b00      	cmp	r3, #0
 801156e:	daf7      	bge.n	8011560 <_vfiprintf_r+0x254>
 8011570:	425b      	negs	r3, r3
 8011572:	9309      	str	r3, [sp, #36]	; 0x24
 8011574:	2304      	movs	r3, #4
 8011576:	e7ea      	b.n	801154e <_vfiprintf_r+0x242>
 8011578:	222b      	movs	r2, #43	; 0x2b
 801157a:	ab12      	add	r3, sp, #72	; 0x48
 801157c:	70da      	strb	r2, [r3, #3]
 801157e:	e7ef      	b.n	8011560 <_vfiprintf_r+0x254>
 8011580:	9b07      	ldr	r3, [sp, #28]
 8011582:	1c5a      	adds	r2, r3, #1
 8011584:	781b      	ldrb	r3, [r3, #0]
 8011586:	2b2a      	cmp	r3, #42	; 0x2a
 8011588:	d00f      	beq.n	80115aa <_vfiprintf_r+0x29e>
 801158a:	2100      	movs	r1, #0
 801158c:	9105      	str	r1, [sp, #20]
 801158e:	0019      	movs	r1, r3
 8011590:	3930      	subs	r1, #48	; 0x30
 8011592:	9207      	str	r2, [sp, #28]
 8011594:	2909      	cmp	r1, #9
 8011596:	d900      	bls.n	801159a <_vfiprintf_r+0x28e>
 8011598:	e75c      	b.n	8011454 <_vfiprintf_r+0x148>
 801159a:	200a      	movs	r0, #10
 801159c:	9b05      	ldr	r3, [sp, #20]
 801159e:	4343      	muls	r3, r0
 80115a0:	185b      	adds	r3, r3, r1
 80115a2:	9305      	str	r3, [sp, #20]
 80115a4:	7813      	ldrb	r3, [r2, #0]
 80115a6:	3201      	adds	r2, #1
 80115a8:	e7f1      	b.n	801158e <_vfiprintf_r+0x282>
 80115aa:	cf08      	ldmia	r7!, {r3}
 80115ac:	9305      	str	r3, [sp, #20]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	da02      	bge.n	80115b8 <_vfiprintf_r+0x2ac>
 80115b2:	2301      	movs	r3, #1
 80115b4:	425b      	negs	r3, r3
 80115b6:	9305      	str	r3, [sp, #20]
 80115b8:	9207      	str	r2, [sp, #28]
 80115ba:	e7d1      	b.n	8011560 <_vfiprintf_r+0x254>
 80115bc:	2380      	movs	r3, #128	; 0x80
 80115be:	e7c6      	b.n	801154e <_vfiprintf_r+0x242>
 80115c0:	2100      	movs	r1, #0
 80115c2:	9a07      	ldr	r2, [sp, #28]
 80115c4:	9109      	str	r1, [sp, #36]	; 0x24
 80115c6:	200a      	movs	r0, #10
 80115c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80115ca:	3b30      	subs	r3, #48	; 0x30
 80115cc:	4341      	muls	r1, r0
 80115ce:	185b      	adds	r3, r3, r1
 80115d0:	9309      	str	r3, [sp, #36]	; 0x24
 80115d2:	0013      	movs	r3, r2
 80115d4:	781b      	ldrb	r3, [r3, #0]
 80115d6:	3201      	adds	r2, #1
 80115d8:	0019      	movs	r1, r3
 80115da:	3930      	subs	r1, #48	; 0x30
 80115dc:	9207      	str	r2, [sp, #28]
 80115de:	2909      	cmp	r1, #9
 80115e0:	d9f1      	bls.n	80115c6 <_vfiprintf_r+0x2ba>
 80115e2:	e737      	b.n	8011454 <_vfiprintf_r+0x148>
 80115e4:	ffffdfff 	.word	0xffffdfff
 80115e8:	9b07      	ldr	r3, [sp, #28]
 80115ea:	781b      	ldrb	r3, [r3, #0]
 80115ec:	2b68      	cmp	r3, #104	; 0x68
 80115ee:	d105      	bne.n	80115fc <_vfiprintf_r+0x2f0>
 80115f0:	9b07      	ldr	r3, [sp, #28]
 80115f2:	3301      	adds	r3, #1
 80115f4:	9307      	str	r3, [sp, #28]
 80115f6:	2380      	movs	r3, #128	; 0x80
 80115f8:	009b      	lsls	r3, r3, #2
 80115fa:	e7a8      	b.n	801154e <_vfiprintf_r+0x242>
 80115fc:	2340      	movs	r3, #64	; 0x40
 80115fe:	e7a6      	b.n	801154e <_vfiprintf_r+0x242>
 8011600:	9b07      	ldr	r3, [sp, #28]
 8011602:	781b      	ldrb	r3, [r3, #0]
 8011604:	2b6c      	cmp	r3, #108	; 0x6c
 8011606:	d104      	bne.n	8011612 <_vfiprintf_r+0x306>
 8011608:	9b07      	ldr	r3, [sp, #28]
 801160a:	3301      	adds	r3, #1
 801160c:	9307      	str	r3, [sp, #28]
 801160e:	2320      	movs	r3, #32
 8011610:	e79d      	b.n	801154e <_vfiprintf_r+0x242>
 8011612:	2310      	movs	r3, #16
 8011614:	e79b      	b.n	801154e <_vfiprintf_r+0x242>
 8011616:	003a      	movs	r2, r7
 8011618:	ca08      	ldmia	r2!, {r3}
 801161a:	ae27      	add	r6, sp, #156	; 0x9c
 801161c:	7033      	strb	r3, [r6, #0]
 801161e:	2300      	movs	r3, #0
 8011620:	9204      	str	r2, [sp, #16]
 8011622:	aa12      	add	r2, sp, #72	; 0x48
 8011624:	70d3      	strb	r3, [r2, #3]
 8011626:	2201      	movs	r2, #1
 8011628:	930b      	str	r3, [sp, #44]	; 0x2c
 801162a:	9205      	str	r2, [sp, #20]
 801162c:	e0b0      	b.n	8011790 <_vfiprintf_r+0x484>
 801162e:	2310      	movs	r3, #16
 8011630:	431c      	orrs	r4, r3
 8011632:	06a3      	lsls	r3, r4, #26
 8011634:	d52a      	bpl.n	801168c <_vfiprintf_r+0x380>
 8011636:	2307      	movs	r3, #7
 8011638:	3707      	adds	r7, #7
 801163a:	439f      	bics	r7, r3
 801163c:	0039      	movs	r1, r7
 801163e:	c90c      	ldmia	r1!, {r2, r3}
 8011640:	9200      	str	r2, [sp, #0]
 8011642:	9301      	str	r3, [sp, #4]
 8011644:	9104      	str	r1, [sp, #16]
 8011646:	9a01      	ldr	r2, [sp, #4]
 8011648:	2301      	movs	r3, #1
 801164a:	2a00      	cmp	r2, #0
 801164c:	da09      	bge.n	8011662 <_vfiprintf_r+0x356>
 801164e:	9e00      	ldr	r6, [sp, #0]
 8011650:	9f01      	ldr	r7, [sp, #4]
 8011652:	2200      	movs	r2, #0
 8011654:	4271      	negs	r1, r6
 8011656:	41ba      	sbcs	r2, r7
 8011658:	9100      	str	r1, [sp, #0]
 801165a:	9201      	str	r2, [sp, #4]
 801165c:	212d      	movs	r1, #45	; 0x2d
 801165e:	aa12      	add	r2, sp, #72	; 0x48
 8011660:	70d1      	strb	r1, [r2, #3]
 8011662:	9901      	ldr	r1, [sp, #4]
 8011664:	9a00      	ldr	r2, [sp, #0]
 8011666:	430a      	orrs	r2, r1
 8011668:	9905      	ldr	r1, [sp, #20]
 801166a:	3101      	adds	r1, #1
 801166c:	d100      	bne.n	8011670 <_vfiprintf_r+0x364>
 801166e:	e2e9      	b.n	8011c44 <_vfiprintf_r+0x938>
 8011670:	2180      	movs	r1, #128	; 0x80
 8011672:	0027      	movs	r7, r4
 8011674:	438f      	bics	r7, r1
 8011676:	2a00      	cmp	r2, #0
 8011678:	d000      	beq.n	801167c <_vfiprintf_r+0x370>
 801167a:	e2e7      	b.n	8011c4c <_vfiprintf_r+0x940>
 801167c:	9a05      	ldr	r2, [sp, #20]
 801167e:	2a00      	cmp	r2, #0
 8011680:	d100      	bne.n	8011684 <_vfiprintf_r+0x378>
 8011682:	e243      	b.n	8011b0c <_vfiprintf_r+0x800>
 8011684:	2b01      	cmp	r3, #1
 8011686:	d000      	beq.n	801168a <_vfiprintf_r+0x37e>
 8011688:	e2e3      	b.n	8011c52 <_vfiprintf_r+0x946>
 801168a:	e1e7      	b.n	8011a5c <_vfiprintf_r+0x750>
 801168c:	003a      	movs	r2, r7
 801168e:	ca08      	ldmia	r2!, {r3}
 8011690:	9204      	str	r2, [sp, #16]
 8011692:	06e2      	lsls	r2, r4, #27
 8011694:	d503      	bpl.n	801169e <_vfiprintf_r+0x392>
 8011696:	9300      	str	r3, [sp, #0]
 8011698:	17db      	asrs	r3, r3, #31
 801169a:	9301      	str	r3, [sp, #4]
 801169c:	e7d3      	b.n	8011646 <_vfiprintf_r+0x33a>
 801169e:	0662      	lsls	r2, r4, #25
 80116a0:	d501      	bpl.n	80116a6 <_vfiprintf_r+0x39a>
 80116a2:	b21b      	sxth	r3, r3
 80116a4:	e7f7      	b.n	8011696 <_vfiprintf_r+0x38a>
 80116a6:	05a2      	lsls	r2, r4, #22
 80116a8:	d5f5      	bpl.n	8011696 <_vfiprintf_r+0x38a>
 80116aa:	b25b      	sxtb	r3, r3
 80116ac:	e7f3      	b.n	8011696 <_vfiprintf_r+0x38a>
 80116ae:	1d3b      	adds	r3, r7, #4
 80116b0:	9304      	str	r3, [sp, #16]
 80116b2:	06a3      	lsls	r3, r4, #26
 80116b4:	d506      	bpl.n	80116c4 <_vfiprintf_r+0x3b8>
 80116b6:	683b      	ldr	r3, [r7, #0]
 80116b8:	9a08      	ldr	r2, [sp, #32]
 80116ba:	601a      	str	r2, [r3, #0]
 80116bc:	17d2      	asrs	r2, r2, #31
 80116be:	605a      	str	r2, [r3, #4]
 80116c0:	9f04      	ldr	r7, [sp, #16]
 80116c2:	e694      	b.n	80113ee <_vfiprintf_r+0xe2>
 80116c4:	06e3      	lsls	r3, r4, #27
 80116c6:	d503      	bpl.n	80116d0 <_vfiprintf_r+0x3c4>
 80116c8:	683b      	ldr	r3, [r7, #0]
 80116ca:	9a08      	ldr	r2, [sp, #32]
 80116cc:	601a      	str	r2, [r3, #0]
 80116ce:	e7f7      	b.n	80116c0 <_vfiprintf_r+0x3b4>
 80116d0:	0663      	lsls	r3, r4, #25
 80116d2:	d503      	bpl.n	80116dc <_vfiprintf_r+0x3d0>
 80116d4:	683b      	ldr	r3, [r7, #0]
 80116d6:	9a08      	ldr	r2, [sp, #32]
 80116d8:	801a      	strh	r2, [r3, #0]
 80116da:	e7f1      	b.n	80116c0 <_vfiprintf_r+0x3b4>
 80116dc:	05a4      	lsls	r4, r4, #22
 80116de:	d5f3      	bpl.n	80116c8 <_vfiprintf_r+0x3bc>
 80116e0:	683b      	ldr	r3, [r7, #0]
 80116e2:	9a08      	ldr	r2, [sp, #32]
 80116e4:	701a      	strb	r2, [r3, #0]
 80116e6:	e7eb      	b.n	80116c0 <_vfiprintf_r+0x3b4>
 80116e8:	2310      	movs	r3, #16
 80116ea:	431c      	orrs	r4, r3
 80116ec:	2320      	movs	r3, #32
 80116ee:	0020      	movs	r0, r4
 80116f0:	4018      	ands	r0, r3
 80116f2:	421c      	tst	r4, r3
 80116f4:	d00d      	beq.n	8011712 <_vfiprintf_r+0x406>
 80116f6:	3b19      	subs	r3, #25
 80116f8:	3707      	adds	r7, #7
 80116fa:	439f      	bics	r7, r3
 80116fc:	0039      	movs	r1, r7
 80116fe:	c90c      	ldmia	r1!, {r2, r3}
 8011700:	9200      	str	r2, [sp, #0]
 8011702:	9301      	str	r3, [sp, #4]
 8011704:	9104      	str	r1, [sp, #16]
 8011706:	4bcc      	ldr	r3, [pc, #816]	; (8011a38 <_vfiprintf_r+0x72c>)
 8011708:	401c      	ands	r4, r3
 801170a:	2300      	movs	r3, #0
 801170c:	2100      	movs	r1, #0
 801170e:	aa12      	add	r2, sp, #72	; 0x48
 8011710:	e7a6      	b.n	8011660 <_vfiprintf_r+0x354>
 8011712:	003a      	movs	r2, r7
 8011714:	ca08      	ldmia	r2!, {r3}
 8011716:	0021      	movs	r1, r4
 8011718:	9204      	str	r2, [sp, #16]
 801171a:	2210      	movs	r2, #16
 801171c:	4011      	ands	r1, r2
 801171e:	4214      	tst	r4, r2
 8011720:	d002      	beq.n	8011728 <_vfiprintf_r+0x41c>
 8011722:	9300      	str	r3, [sp, #0]
 8011724:	9001      	str	r0, [sp, #4]
 8011726:	e7ee      	b.n	8011706 <_vfiprintf_r+0x3fa>
 8011728:	2240      	movs	r2, #64	; 0x40
 801172a:	0020      	movs	r0, r4
 801172c:	4010      	ands	r0, r2
 801172e:	4214      	tst	r4, r2
 8011730:	d003      	beq.n	801173a <_vfiprintf_r+0x42e>
 8011732:	b29b      	uxth	r3, r3
 8011734:	9300      	str	r3, [sp, #0]
 8011736:	9101      	str	r1, [sp, #4]
 8011738:	e7e5      	b.n	8011706 <_vfiprintf_r+0x3fa>
 801173a:	2280      	movs	r2, #128	; 0x80
 801173c:	0021      	movs	r1, r4
 801173e:	0092      	lsls	r2, r2, #2
 8011740:	4011      	ands	r1, r2
 8011742:	4214      	tst	r4, r2
 8011744:	d0f6      	beq.n	8011734 <_vfiprintf_r+0x428>
 8011746:	b2db      	uxtb	r3, r3
 8011748:	e7eb      	b.n	8011722 <_vfiprintf_r+0x416>
 801174a:	003b      	movs	r3, r7
 801174c:	cb04      	ldmia	r3!, {r2}
 801174e:	49bb      	ldr	r1, [pc, #748]	; (8011a3c <_vfiprintf_r+0x730>)
 8011750:	9304      	str	r3, [sp, #16]
 8011752:	2300      	movs	r3, #0
 8011754:	9200      	str	r2, [sp, #0]
 8011756:	aa13      	add	r2, sp, #76	; 0x4c
 8011758:	8011      	strh	r1, [r2, #0]
 801175a:	4ab9      	ldr	r2, [pc, #740]	; (8011a40 <_vfiprintf_r+0x734>)
 801175c:	9301      	str	r3, [sp, #4]
 801175e:	3302      	adds	r3, #2
 8011760:	431c      	orrs	r4, r3
 8011762:	920c      	str	r2, [sp, #48]	; 0x30
 8011764:	e7d2      	b.n	801170c <_vfiprintf_r+0x400>
 8011766:	003b      	movs	r3, r7
 8011768:	2700      	movs	r7, #0
 801176a:	cb40      	ldmia	r3!, {r6}
 801176c:	9304      	str	r3, [sp, #16]
 801176e:	ab12      	add	r3, sp, #72	; 0x48
 8011770:	70df      	strb	r7, [r3, #3]
 8011772:	9b05      	ldr	r3, [sp, #20]
 8011774:	3301      	adds	r3, #1
 8011776:	d100      	bne.n	801177a <_vfiprintf_r+0x46e>
 8011778:	e0ea      	b.n	8011950 <_vfiprintf_r+0x644>
 801177a:	0039      	movs	r1, r7
 801177c:	0030      	movs	r0, r6
 801177e:	9a05      	ldr	r2, [sp, #20]
 8011780:	f7fe f92e 	bl	800f9e0 <memchr>
 8011784:	900b      	str	r0, [sp, #44]	; 0x2c
 8011786:	42b8      	cmp	r0, r7
 8011788:	d002      	beq.n	8011790 <_vfiprintf_r+0x484>
 801178a:	1b83      	subs	r3, r0, r6
 801178c:	9305      	str	r3, [sp, #20]
 801178e:	970b      	str	r7, [sp, #44]	; 0x2c
 8011790:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011792:	9a05      	ldr	r2, [sp, #20]
 8011794:	930a      	str	r3, [sp, #40]	; 0x28
 8011796:	4293      	cmp	r3, r2
 8011798:	da00      	bge.n	801179c <_vfiprintf_r+0x490>
 801179a:	920a      	str	r2, [sp, #40]	; 0x28
 801179c:	ab12      	add	r3, sp, #72	; 0x48
 801179e:	3303      	adds	r3, #3
 80117a0:	781b      	ldrb	r3, [r3, #0]
 80117a2:	1e5a      	subs	r2, r3, #1
 80117a4:	4193      	sbcs	r3, r2
 80117a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80117a8:	18d3      	adds	r3, r2, r3
 80117aa:	930a      	str	r3, [sp, #40]	; 0x28
 80117ac:	0022      	movs	r2, r4
 80117ae:	2302      	movs	r3, #2
 80117b0:	401a      	ands	r2, r3
 80117b2:	9210      	str	r2, [sp, #64]	; 0x40
 80117b4:	421c      	tst	r4, r3
 80117b6:	d002      	beq.n	80117be <_vfiprintf_r+0x4b2>
 80117b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80117ba:	3302      	adds	r3, #2
 80117bc:	930a      	str	r3, [sp, #40]	; 0x28
 80117be:	2384      	movs	r3, #132	; 0x84
 80117c0:	0022      	movs	r2, r4
 80117c2:	401a      	ands	r2, r3
 80117c4:	9211      	str	r2, [sp, #68]	; 0x44
 80117c6:	421c      	tst	r4, r3
 80117c8:	d11e      	bne.n	8011808 <_vfiprintf_r+0x4fc>
 80117ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80117ce:	1a9f      	subs	r7, r3, r2
 80117d0:	2f00      	cmp	r7, #0
 80117d2:	dd19      	ble.n	8011808 <_vfiprintf_r+0x4fc>
 80117d4:	0029      	movs	r1, r5
 80117d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80117d8:	489a      	ldr	r0, [pc, #616]	; (8011a44 <_vfiprintf_r+0x738>)
 80117da:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80117dc:	3301      	adds	r3, #1
 80117de:	3108      	adds	r1, #8
 80117e0:	6028      	str	r0, [r5, #0]
 80117e2:	2f10      	cmp	r7, #16
 80117e4:	dd00      	ble.n	80117e8 <_vfiprintf_r+0x4dc>
 80117e6:	e1a7      	b.n	8011b38 <_vfiprintf_r+0x82c>
 80117e8:	606f      	str	r7, [r5, #4]
 80117ea:	18bf      	adds	r7, r7, r2
 80117ec:	000d      	movs	r5, r1
 80117ee:	9716      	str	r7, [sp, #88]	; 0x58
 80117f0:	9315      	str	r3, [sp, #84]	; 0x54
 80117f2:	2b07      	cmp	r3, #7
 80117f4:	dd08      	ble.n	8011808 <_vfiprintf_r+0x4fc>
 80117f6:	9903      	ldr	r1, [sp, #12]
 80117f8:	9806      	ldr	r0, [sp, #24]
 80117fa:	aa14      	add	r2, sp, #80	; 0x50
 80117fc:	f7ff fd51 	bl	80112a2 <__sprint_r>
 8011800:	2800      	cmp	r0, #0
 8011802:	d000      	beq.n	8011806 <_vfiprintf_r+0x4fa>
 8011804:	e1eb      	b.n	8011bde <_vfiprintf_r+0x8d2>
 8011806:	ad17      	add	r5, sp, #92	; 0x5c
 8011808:	a912      	add	r1, sp, #72	; 0x48
 801180a:	78c8      	ldrb	r0, [r1, #3]
 801180c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801180e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011810:	3103      	adds	r1, #3
 8011812:	2800      	cmp	r0, #0
 8011814:	d012      	beq.n	801183c <_vfiprintf_r+0x530>
 8011816:	6029      	str	r1, [r5, #0]
 8011818:	2101      	movs	r1, #1
 801181a:	3301      	adds	r3, #1
 801181c:	1852      	adds	r2, r2, r1
 801181e:	6069      	str	r1, [r5, #4]
 8011820:	9216      	str	r2, [sp, #88]	; 0x58
 8011822:	9315      	str	r3, [sp, #84]	; 0x54
 8011824:	3508      	adds	r5, #8
 8011826:	2b07      	cmp	r3, #7
 8011828:	dd08      	ble.n	801183c <_vfiprintf_r+0x530>
 801182a:	9903      	ldr	r1, [sp, #12]
 801182c:	9806      	ldr	r0, [sp, #24]
 801182e:	aa14      	add	r2, sp, #80	; 0x50
 8011830:	f7ff fd37 	bl	80112a2 <__sprint_r>
 8011834:	2800      	cmp	r0, #0
 8011836:	d000      	beq.n	801183a <_vfiprintf_r+0x52e>
 8011838:	e1d1      	b.n	8011bde <_vfiprintf_r+0x8d2>
 801183a:	ad17      	add	r5, sp, #92	; 0x5c
 801183c:	9910      	ldr	r1, [sp, #64]	; 0x40
 801183e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011840:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011842:	2900      	cmp	r1, #0
 8011844:	d013      	beq.n	801186e <_vfiprintf_r+0x562>
 8011846:	a913      	add	r1, sp, #76	; 0x4c
 8011848:	6029      	str	r1, [r5, #0]
 801184a:	2102      	movs	r1, #2
 801184c:	3301      	adds	r3, #1
 801184e:	1852      	adds	r2, r2, r1
 8011850:	6069      	str	r1, [r5, #4]
 8011852:	9216      	str	r2, [sp, #88]	; 0x58
 8011854:	9315      	str	r3, [sp, #84]	; 0x54
 8011856:	3508      	adds	r5, #8
 8011858:	2b07      	cmp	r3, #7
 801185a:	dd08      	ble.n	801186e <_vfiprintf_r+0x562>
 801185c:	9903      	ldr	r1, [sp, #12]
 801185e:	9806      	ldr	r0, [sp, #24]
 8011860:	aa14      	add	r2, sp, #80	; 0x50
 8011862:	f7ff fd1e 	bl	80112a2 <__sprint_r>
 8011866:	2800      	cmp	r0, #0
 8011868:	d000      	beq.n	801186c <_vfiprintf_r+0x560>
 801186a:	e1b8      	b.n	8011bde <_vfiprintf_r+0x8d2>
 801186c:	ad17      	add	r5, sp, #92	; 0x5c
 801186e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011870:	2b80      	cmp	r3, #128	; 0x80
 8011872:	d11e      	bne.n	80118b2 <_vfiprintf_r+0x5a6>
 8011874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011876:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011878:	1a9f      	subs	r7, r3, r2
 801187a:	2f00      	cmp	r7, #0
 801187c:	dd19      	ble.n	80118b2 <_vfiprintf_r+0x5a6>
 801187e:	0029      	movs	r1, r5
 8011880:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011882:	4871      	ldr	r0, [pc, #452]	; (8011a48 <_vfiprintf_r+0x73c>)
 8011884:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011886:	3301      	adds	r3, #1
 8011888:	3108      	adds	r1, #8
 801188a:	6028      	str	r0, [r5, #0]
 801188c:	2f10      	cmp	r7, #16
 801188e:	dd00      	ble.n	8011892 <_vfiprintf_r+0x586>
 8011890:	e164      	b.n	8011b5c <_vfiprintf_r+0x850>
 8011892:	606f      	str	r7, [r5, #4]
 8011894:	18bf      	adds	r7, r7, r2
 8011896:	000d      	movs	r5, r1
 8011898:	9716      	str	r7, [sp, #88]	; 0x58
 801189a:	9315      	str	r3, [sp, #84]	; 0x54
 801189c:	2b07      	cmp	r3, #7
 801189e:	dd08      	ble.n	80118b2 <_vfiprintf_r+0x5a6>
 80118a0:	9903      	ldr	r1, [sp, #12]
 80118a2:	9806      	ldr	r0, [sp, #24]
 80118a4:	aa14      	add	r2, sp, #80	; 0x50
 80118a6:	f7ff fcfc 	bl	80112a2 <__sprint_r>
 80118aa:	2800      	cmp	r0, #0
 80118ac:	d000      	beq.n	80118b0 <_vfiprintf_r+0x5a4>
 80118ae:	e196      	b.n	8011bde <_vfiprintf_r+0x8d2>
 80118b0:	ad17      	add	r5, sp, #92	; 0x5c
 80118b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80118b4:	9a05      	ldr	r2, [sp, #20]
 80118b6:	1a9f      	subs	r7, r3, r2
 80118b8:	2f00      	cmp	r7, #0
 80118ba:	dd19      	ble.n	80118f0 <_vfiprintf_r+0x5e4>
 80118bc:	0029      	movs	r1, r5
 80118be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80118c0:	4861      	ldr	r0, [pc, #388]	; (8011a48 <_vfiprintf_r+0x73c>)
 80118c2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80118c4:	3301      	adds	r3, #1
 80118c6:	3108      	adds	r1, #8
 80118c8:	6028      	str	r0, [r5, #0]
 80118ca:	2f10      	cmp	r7, #16
 80118cc:	dd00      	ble.n	80118d0 <_vfiprintf_r+0x5c4>
 80118ce:	e157      	b.n	8011b80 <_vfiprintf_r+0x874>
 80118d0:	606f      	str	r7, [r5, #4]
 80118d2:	18bf      	adds	r7, r7, r2
 80118d4:	000d      	movs	r5, r1
 80118d6:	9716      	str	r7, [sp, #88]	; 0x58
 80118d8:	9315      	str	r3, [sp, #84]	; 0x54
 80118da:	2b07      	cmp	r3, #7
 80118dc:	dd08      	ble.n	80118f0 <_vfiprintf_r+0x5e4>
 80118de:	9903      	ldr	r1, [sp, #12]
 80118e0:	9806      	ldr	r0, [sp, #24]
 80118e2:	aa14      	add	r2, sp, #80	; 0x50
 80118e4:	f7ff fcdd 	bl	80112a2 <__sprint_r>
 80118e8:	2800      	cmp	r0, #0
 80118ea:	d000      	beq.n	80118ee <_vfiprintf_r+0x5e2>
 80118ec:	e177      	b.n	8011bde <_vfiprintf_r+0x8d2>
 80118ee:	ad17      	add	r5, sp, #92	; 0x5c
 80118f0:	9b05      	ldr	r3, [sp, #20]
 80118f2:	9a05      	ldr	r2, [sp, #20]
 80118f4:	606b      	str	r3, [r5, #4]
 80118f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80118f8:	602e      	str	r6, [r5, #0]
 80118fa:	189b      	adds	r3, r3, r2
 80118fc:	9316      	str	r3, [sp, #88]	; 0x58
 80118fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011900:	3508      	adds	r5, #8
 8011902:	3301      	adds	r3, #1
 8011904:	9315      	str	r3, [sp, #84]	; 0x54
 8011906:	2b07      	cmp	r3, #7
 8011908:	dd08      	ble.n	801191c <_vfiprintf_r+0x610>
 801190a:	9903      	ldr	r1, [sp, #12]
 801190c:	9806      	ldr	r0, [sp, #24]
 801190e:	aa14      	add	r2, sp, #80	; 0x50
 8011910:	f7ff fcc7 	bl	80112a2 <__sprint_r>
 8011914:	2800      	cmp	r0, #0
 8011916:	d000      	beq.n	801191a <_vfiprintf_r+0x60e>
 8011918:	e161      	b.n	8011bde <_vfiprintf_r+0x8d2>
 801191a:	ad17      	add	r5, sp, #92	; 0x5c
 801191c:	0764      	lsls	r4, r4, #29
 801191e:	d500      	bpl.n	8011922 <_vfiprintf_r+0x616>
 8011920:	e140      	b.n	8011ba4 <_vfiprintf_r+0x898>
 8011922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011924:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011926:	4293      	cmp	r3, r2
 8011928:	da00      	bge.n	801192c <_vfiprintf_r+0x620>
 801192a:	0013      	movs	r3, r2
 801192c:	9a08      	ldr	r2, [sp, #32]
 801192e:	18d3      	adds	r3, r2, r3
 8011930:	9308      	str	r3, [sp, #32]
 8011932:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011934:	2b00      	cmp	r3, #0
 8011936:	d007      	beq.n	8011948 <_vfiprintf_r+0x63c>
 8011938:	9903      	ldr	r1, [sp, #12]
 801193a:	9806      	ldr	r0, [sp, #24]
 801193c:	aa14      	add	r2, sp, #80	; 0x50
 801193e:	f7ff fcb0 	bl	80112a2 <__sprint_r>
 8011942:	2800      	cmp	r0, #0
 8011944:	d000      	beq.n	8011948 <_vfiprintf_r+0x63c>
 8011946:	e14a      	b.n	8011bde <_vfiprintf_r+0x8d2>
 8011948:	2300      	movs	r3, #0
 801194a:	ad17      	add	r5, sp, #92	; 0x5c
 801194c:	9315      	str	r3, [sp, #84]	; 0x54
 801194e:	e6b7      	b.n	80116c0 <_vfiprintf_r+0x3b4>
 8011950:	0030      	movs	r0, r6
 8011952:	f7ee fbd7 	bl	8000104 <strlen>
 8011956:	9005      	str	r0, [sp, #20]
 8011958:	e719      	b.n	801178e <_vfiprintf_r+0x482>
 801195a:	2310      	movs	r3, #16
 801195c:	431c      	orrs	r4, r3
 801195e:	2320      	movs	r3, #32
 8011960:	0020      	movs	r0, r4
 8011962:	4018      	ands	r0, r3
 8011964:	421c      	tst	r4, r3
 8011966:	d009      	beq.n	801197c <_vfiprintf_r+0x670>
 8011968:	3b19      	subs	r3, #25
 801196a:	3707      	adds	r7, #7
 801196c:	439f      	bics	r7, r3
 801196e:	0039      	movs	r1, r7
 8011970:	c90c      	ldmia	r1!, {r2, r3}
 8011972:	9200      	str	r2, [sp, #0]
 8011974:	9301      	str	r3, [sp, #4]
 8011976:	9104      	str	r1, [sp, #16]
 8011978:	2301      	movs	r3, #1
 801197a:	e6c7      	b.n	801170c <_vfiprintf_r+0x400>
 801197c:	003b      	movs	r3, r7
 801197e:	cb04      	ldmia	r3!, {r2}
 8011980:	0021      	movs	r1, r4
 8011982:	9304      	str	r3, [sp, #16]
 8011984:	2310      	movs	r3, #16
 8011986:	4019      	ands	r1, r3
 8011988:	421c      	tst	r4, r3
 801198a:	d003      	beq.n	8011994 <_vfiprintf_r+0x688>
 801198c:	9200      	str	r2, [sp, #0]
 801198e:	9001      	str	r0, [sp, #4]
 8011990:	3b0f      	subs	r3, #15
 8011992:	e6bb      	b.n	801170c <_vfiprintf_r+0x400>
 8011994:	2340      	movs	r3, #64	; 0x40
 8011996:	0020      	movs	r0, r4
 8011998:	4018      	ands	r0, r3
 801199a:	421c      	tst	r4, r3
 801199c:	d003      	beq.n	80119a6 <_vfiprintf_r+0x69a>
 801199e:	b293      	uxth	r3, r2
 80119a0:	9300      	str	r3, [sp, #0]
 80119a2:	9101      	str	r1, [sp, #4]
 80119a4:	e7e8      	b.n	8011978 <_vfiprintf_r+0x66c>
 80119a6:	2380      	movs	r3, #128	; 0x80
 80119a8:	0021      	movs	r1, r4
 80119aa:	009b      	lsls	r3, r3, #2
 80119ac:	4019      	ands	r1, r3
 80119ae:	421c      	tst	r4, r3
 80119b0:	d003      	beq.n	80119ba <_vfiprintf_r+0x6ae>
 80119b2:	b2d3      	uxtb	r3, r2
 80119b4:	9300      	str	r3, [sp, #0]
 80119b6:	9001      	str	r0, [sp, #4]
 80119b8:	e7de      	b.n	8011978 <_vfiprintf_r+0x66c>
 80119ba:	9200      	str	r2, [sp, #0]
 80119bc:	e7f1      	b.n	80119a2 <_vfiprintf_r+0x696>
 80119be:	4a23      	ldr	r2, [pc, #140]	; (8011a4c <_vfiprintf_r+0x740>)
 80119c0:	0020      	movs	r0, r4
 80119c2:	920c      	str	r2, [sp, #48]	; 0x30
 80119c4:	2220      	movs	r2, #32
 80119c6:	4010      	ands	r0, r2
 80119c8:	4214      	tst	r4, r2
 80119ca:	d019      	beq.n	8011a00 <_vfiprintf_r+0x6f4>
 80119cc:	3a19      	subs	r2, #25
 80119ce:	3707      	adds	r7, #7
 80119d0:	4397      	bics	r7, r2
 80119d2:	0038      	movs	r0, r7
 80119d4:	c806      	ldmia	r0!, {r1, r2}
 80119d6:	9100      	str	r1, [sp, #0]
 80119d8:	9201      	str	r2, [sp, #4]
 80119da:	9004      	str	r0, [sp, #16]
 80119dc:	07e2      	lsls	r2, r4, #31
 80119de:	d509      	bpl.n	80119f4 <_vfiprintf_r+0x6e8>
 80119e0:	9a00      	ldr	r2, [sp, #0]
 80119e2:	9901      	ldr	r1, [sp, #4]
 80119e4:	430a      	orrs	r2, r1
 80119e6:	d005      	beq.n	80119f4 <_vfiprintf_r+0x6e8>
 80119e8:	aa13      	add	r2, sp, #76	; 0x4c
 80119ea:	2130      	movs	r1, #48	; 0x30
 80119ec:	7053      	strb	r3, [r2, #1]
 80119ee:	2302      	movs	r3, #2
 80119f0:	7011      	strb	r1, [r2, #0]
 80119f2:	431c      	orrs	r4, r3
 80119f4:	4b10      	ldr	r3, [pc, #64]	; (8011a38 <_vfiprintf_r+0x72c>)
 80119f6:	401c      	ands	r4, r3
 80119f8:	2302      	movs	r3, #2
 80119fa:	e687      	b.n	801170c <_vfiprintf_r+0x400>
 80119fc:	4a10      	ldr	r2, [pc, #64]	; (8011a40 <_vfiprintf_r+0x734>)
 80119fe:	e7df      	b.n	80119c0 <_vfiprintf_r+0x6b4>
 8011a00:	0039      	movs	r1, r7
 8011a02:	c904      	ldmia	r1!, {r2}
 8011a04:	0026      	movs	r6, r4
 8011a06:	9104      	str	r1, [sp, #16]
 8011a08:	2110      	movs	r1, #16
 8011a0a:	400e      	ands	r6, r1
 8011a0c:	420c      	tst	r4, r1
 8011a0e:	d002      	beq.n	8011a16 <_vfiprintf_r+0x70a>
 8011a10:	9200      	str	r2, [sp, #0]
 8011a12:	9001      	str	r0, [sp, #4]
 8011a14:	e7e2      	b.n	80119dc <_vfiprintf_r+0x6d0>
 8011a16:	2140      	movs	r1, #64	; 0x40
 8011a18:	0020      	movs	r0, r4
 8011a1a:	4008      	ands	r0, r1
 8011a1c:	420c      	tst	r4, r1
 8011a1e:	d003      	beq.n	8011a28 <_vfiprintf_r+0x71c>
 8011a20:	b292      	uxth	r2, r2
 8011a22:	9200      	str	r2, [sp, #0]
 8011a24:	9601      	str	r6, [sp, #4]
 8011a26:	e7d9      	b.n	80119dc <_vfiprintf_r+0x6d0>
 8011a28:	2180      	movs	r1, #128	; 0x80
 8011a2a:	0026      	movs	r6, r4
 8011a2c:	0089      	lsls	r1, r1, #2
 8011a2e:	400e      	ands	r6, r1
 8011a30:	420c      	tst	r4, r1
 8011a32:	d0f6      	beq.n	8011a22 <_vfiprintf_r+0x716>
 8011a34:	b2d2      	uxtb	r2, r2
 8011a36:	e7eb      	b.n	8011a10 <_vfiprintf_r+0x704>
 8011a38:	fffffbff 	.word	0xfffffbff
 8011a3c:	00007830 	.word	0x00007830
 8011a40:	08014274 	.word	0x08014274
 8011a44:	08014381 	.word	0x08014381
 8011a48:	08014391 	.word	0x08014391
 8011a4c:	08014285 	.word	0x08014285
 8011a50:	9b01      	ldr	r3, [sp, #4]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d109      	bne.n	8011a6a <_vfiprintf_r+0x75e>
 8011a56:	9b00      	ldr	r3, [sp, #0]
 8011a58:	2b09      	cmp	r3, #9
 8011a5a:	d806      	bhi.n	8011a6a <_vfiprintf_r+0x75e>
 8011a5c:	26b7      	movs	r6, #183	; 0xb7
 8011a5e:	ab12      	add	r3, sp, #72	; 0x48
 8011a60:	18f6      	adds	r6, r6, r3
 8011a62:	9b00      	ldr	r3, [sp, #0]
 8011a64:	3330      	adds	r3, #48	; 0x30
 8011a66:	7033      	strb	r3, [r6, #0]
 8011a68:	e115      	b.n	8011c96 <_vfiprintf_r+0x98a>
 8011a6a:	2380      	movs	r3, #128	; 0x80
 8011a6c:	2400      	movs	r4, #0
 8011a6e:	00db      	lsls	r3, r3, #3
 8011a70:	403b      	ands	r3, r7
 8011a72:	ae40      	add	r6, sp, #256	; 0x100
 8011a74:	930a      	str	r3, [sp, #40]	; 0x28
 8011a76:	220a      	movs	r2, #10
 8011a78:	9800      	ldr	r0, [sp, #0]
 8011a7a:	9901      	ldr	r1, [sp, #4]
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	f7ee fd11 	bl	80004a4 <__aeabi_uldivmod>
 8011a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a84:	3e01      	subs	r6, #1
 8011a86:	3230      	adds	r2, #48	; 0x30
 8011a88:	900b      	str	r0, [sp, #44]	; 0x2c
 8011a8a:	9110      	str	r1, [sp, #64]	; 0x40
 8011a8c:	7032      	strb	r2, [r6, #0]
 8011a8e:	3401      	adds	r4, #1
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d01a      	beq.n	8011aca <_vfiprintf_r+0x7be>
 8011a94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011a96:	781b      	ldrb	r3, [r3, #0]
 8011a98:	42a3      	cmp	r3, r4
 8011a9a:	d116      	bne.n	8011aca <_vfiprintf_r+0x7be>
 8011a9c:	2cff      	cmp	r4, #255	; 0xff
 8011a9e:	d014      	beq.n	8011aca <_vfiprintf_r+0x7be>
 8011aa0:	9b01      	ldr	r3, [sp, #4]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d102      	bne.n	8011aac <_vfiprintf_r+0x7a0>
 8011aa6:	9b00      	ldr	r3, [sp, #0]
 8011aa8:	2b09      	cmp	r3, #9
 8011aaa:	d90e      	bls.n	8011aca <_vfiprintf_r+0x7be>
 8011aac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011aae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011ab0:	1af6      	subs	r6, r6, r3
 8011ab2:	001a      	movs	r2, r3
 8011ab4:	0030      	movs	r0, r6
 8011ab6:	f7f9 ffe6 	bl	800ba86 <strncpy>
 8011aba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011abc:	2400      	movs	r4, #0
 8011abe:	785b      	ldrb	r3, [r3, #1]
 8011ac0:	1e5a      	subs	r2, r3, #1
 8011ac2:	4193      	sbcs	r3, r2
 8011ac4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011ac6:	18d3      	adds	r3, r2, r3
 8011ac8:	930d      	str	r3, [sp, #52]	; 0x34
 8011aca:	9b01      	ldr	r3, [sp, #4]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d103      	bne.n	8011ad8 <_vfiprintf_r+0x7cc>
 8011ad0:	9b00      	ldr	r3, [sp, #0]
 8011ad2:	2b09      	cmp	r3, #9
 8011ad4:	d800      	bhi.n	8011ad8 <_vfiprintf_r+0x7cc>
 8011ad6:	e0de      	b.n	8011c96 <_vfiprintf_r+0x98a>
 8011ad8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ada:	9300      	str	r3, [sp, #0]
 8011adc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011ade:	9301      	str	r3, [sp, #4]
 8011ae0:	e7c9      	b.n	8011a76 <_vfiprintf_r+0x76a>
 8011ae2:	200f      	movs	r0, #15
 8011ae4:	9b00      	ldr	r3, [sp, #0]
 8011ae6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011ae8:	4003      	ands	r3, r0
 8011aea:	5cd3      	ldrb	r3, [r2, r3]
 8011aec:	3e01      	subs	r6, #1
 8011aee:	7033      	strb	r3, [r6, #0]
 8011af0:	9b01      	ldr	r3, [sp, #4]
 8011af2:	0719      	lsls	r1, r3, #28
 8011af4:	9b00      	ldr	r3, [sp, #0]
 8011af6:	091a      	lsrs	r2, r3, #4
 8011af8:	9b01      	ldr	r3, [sp, #4]
 8011afa:	4311      	orrs	r1, r2
 8011afc:	091b      	lsrs	r3, r3, #4
 8011afe:	9301      	str	r3, [sp, #4]
 8011b00:	000b      	movs	r3, r1
 8011b02:	9a01      	ldr	r2, [sp, #4]
 8011b04:	9100      	str	r1, [sp, #0]
 8011b06:	4313      	orrs	r3, r2
 8011b08:	d1ec      	bne.n	8011ae4 <_vfiprintf_r+0x7d8>
 8011b0a:	e0c4      	b.n	8011c96 <_vfiprintf_r+0x98a>
 8011b0c:	ae40      	add	r6, sp, #256	; 0x100
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d000      	beq.n	8011b14 <_vfiprintf_r+0x808>
 8011b12:	e0c0      	b.n	8011c96 <_vfiprintf_r+0x98a>
 8011b14:	07e4      	lsls	r4, r4, #31
 8011b16:	d400      	bmi.n	8011b1a <_vfiprintf_r+0x80e>
 8011b18:	e0bd      	b.n	8011c96 <_vfiprintf_r+0x98a>
 8011b1a:	26b7      	movs	r6, #183	; 0xb7
 8011b1c:	ab12      	add	r3, sp, #72	; 0x48
 8011b1e:	18f6      	adds	r6, r6, r3
 8011b20:	2330      	movs	r3, #48	; 0x30
 8011b22:	e7a0      	b.n	8011a66 <_vfiprintf_r+0x75a>
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d100      	bne.n	8011b2a <_vfiprintf_r+0x81e>
 8011b28:	e07e      	b.n	8011c28 <_vfiprintf_r+0x91c>
 8011b2a:	ae27      	add	r6, sp, #156	; 0x9c
 8011b2c:	7033      	strb	r3, [r6, #0]
 8011b2e:	2300      	movs	r3, #0
 8011b30:	aa12      	add	r2, sp, #72	; 0x48
 8011b32:	70d3      	strb	r3, [r2, #3]
 8011b34:	9704      	str	r7, [sp, #16]
 8011b36:	e576      	b.n	8011626 <_vfiprintf_r+0x31a>
 8011b38:	2010      	movs	r0, #16
 8011b3a:	1812      	adds	r2, r2, r0
 8011b3c:	6068      	str	r0, [r5, #4]
 8011b3e:	9216      	str	r2, [sp, #88]	; 0x58
 8011b40:	9315      	str	r3, [sp, #84]	; 0x54
 8011b42:	2b07      	cmp	r3, #7
 8011b44:	dd07      	ble.n	8011b56 <_vfiprintf_r+0x84a>
 8011b46:	9903      	ldr	r1, [sp, #12]
 8011b48:	9806      	ldr	r0, [sp, #24]
 8011b4a:	aa14      	add	r2, sp, #80	; 0x50
 8011b4c:	f7ff fba9 	bl	80112a2 <__sprint_r>
 8011b50:	2800      	cmp	r0, #0
 8011b52:	d144      	bne.n	8011bde <_vfiprintf_r+0x8d2>
 8011b54:	a917      	add	r1, sp, #92	; 0x5c
 8011b56:	000d      	movs	r5, r1
 8011b58:	3f10      	subs	r7, #16
 8011b5a:	e63b      	b.n	80117d4 <_vfiprintf_r+0x4c8>
 8011b5c:	2010      	movs	r0, #16
 8011b5e:	1812      	adds	r2, r2, r0
 8011b60:	6068      	str	r0, [r5, #4]
 8011b62:	9216      	str	r2, [sp, #88]	; 0x58
 8011b64:	9315      	str	r3, [sp, #84]	; 0x54
 8011b66:	2b07      	cmp	r3, #7
 8011b68:	dd07      	ble.n	8011b7a <_vfiprintf_r+0x86e>
 8011b6a:	9903      	ldr	r1, [sp, #12]
 8011b6c:	9806      	ldr	r0, [sp, #24]
 8011b6e:	aa14      	add	r2, sp, #80	; 0x50
 8011b70:	f7ff fb97 	bl	80112a2 <__sprint_r>
 8011b74:	2800      	cmp	r0, #0
 8011b76:	d132      	bne.n	8011bde <_vfiprintf_r+0x8d2>
 8011b78:	a917      	add	r1, sp, #92	; 0x5c
 8011b7a:	000d      	movs	r5, r1
 8011b7c:	3f10      	subs	r7, #16
 8011b7e:	e67e      	b.n	801187e <_vfiprintf_r+0x572>
 8011b80:	2010      	movs	r0, #16
 8011b82:	1812      	adds	r2, r2, r0
 8011b84:	6068      	str	r0, [r5, #4]
 8011b86:	9216      	str	r2, [sp, #88]	; 0x58
 8011b88:	9315      	str	r3, [sp, #84]	; 0x54
 8011b8a:	2b07      	cmp	r3, #7
 8011b8c:	dd07      	ble.n	8011b9e <_vfiprintf_r+0x892>
 8011b8e:	9903      	ldr	r1, [sp, #12]
 8011b90:	9806      	ldr	r0, [sp, #24]
 8011b92:	aa14      	add	r2, sp, #80	; 0x50
 8011b94:	f7ff fb85 	bl	80112a2 <__sprint_r>
 8011b98:	2800      	cmp	r0, #0
 8011b9a:	d120      	bne.n	8011bde <_vfiprintf_r+0x8d2>
 8011b9c:	a917      	add	r1, sp, #92	; 0x5c
 8011b9e:	000d      	movs	r5, r1
 8011ba0:	3f10      	subs	r7, #16
 8011ba2:	e68b      	b.n	80118bc <_vfiprintf_r+0x5b0>
 8011ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ba6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011ba8:	2610      	movs	r6, #16
 8011baa:	1a9c      	subs	r4, r3, r2
 8011bac:	2c00      	cmp	r4, #0
 8011bae:	dc00      	bgt.n	8011bb2 <_vfiprintf_r+0x8a6>
 8011bb0:	e6b7      	b.n	8011922 <_vfiprintf_r+0x616>
 8011bb2:	9915      	ldr	r1, [sp, #84]	; 0x54
 8011bb4:	4a3b      	ldr	r2, [pc, #236]	; (8011ca4 <_vfiprintf_r+0x998>)
 8011bb6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011bb8:	3101      	adds	r1, #1
 8011bba:	602a      	str	r2, [r5, #0]
 8011bbc:	2c10      	cmp	r4, #16
 8011bbe:	dc22      	bgt.n	8011c06 <_vfiprintf_r+0x8fa>
 8011bc0:	606c      	str	r4, [r5, #4]
 8011bc2:	18e4      	adds	r4, r4, r3
 8011bc4:	9416      	str	r4, [sp, #88]	; 0x58
 8011bc6:	9115      	str	r1, [sp, #84]	; 0x54
 8011bc8:	2907      	cmp	r1, #7
 8011bca:	dc00      	bgt.n	8011bce <_vfiprintf_r+0x8c2>
 8011bcc:	e6a9      	b.n	8011922 <_vfiprintf_r+0x616>
 8011bce:	9903      	ldr	r1, [sp, #12]
 8011bd0:	9806      	ldr	r0, [sp, #24]
 8011bd2:	aa14      	add	r2, sp, #80	; 0x50
 8011bd4:	f7ff fb65 	bl	80112a2 <__sprint_r>
 8011bd8:	2800      	cmp	r0, #0
 8011bda:	d100      	bne.n	8011bde <_vfiprintf_r+0x8d2>
 8011bdc:	e6a1      	b.n	8011922 <_vfiprintf_r+0x616>
 8011bde:	9b03      	ldr	r3, [sp, #12]
 8011be0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011be2:	07db      	lsls	r3, r3, #31
 8011be4:	d407      	bmi.n	8011bf6 <_vfiprintf_r+0x8ea>
 8011be6:	9b03      	ldr	r3, [sp, #12]
 8011be8:	899b      	ldrh	r3, [r3, #12]
 8011bea:	059b      	lsls	r3, r3, #22
 8011bec:	d403      	bmi.n	8011bf6 <_vfiprintf_r+0x8ea>
 8011bee:	9b03      	ldr	r3, [sp, #12]
 8011bf0:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011bf2:	f7fa f808 	bl	800bc06 <__retarget_lock_release_recursive>
 8011bf6:	9b03      	ldr	r3, [sp, #12]
 8011bf8:	899b      	ldrh	r3, [r3, #12]
 8011bfa:	065b      	lsls	r3, r3, #25
 8011bfc:	d401      	bmi.n	8011c02 <_vfiprintf_r+0x8f6>
 8011bfe:	f7ff fbc3 	bl	8011388 <_vfiprintf_r+0x7c>
 8011c02:	f7ff fbbe 	bl	8011382 <_vfiprintf_r+0x76>
 8011c06:	3310      	adds	r3, #16
 8011c08:	606e      	str	r6, [r5, #4]
 8011c0a:	9316      	str	r3, [sp, #88]	; 0x58
 8011c0c:	9115      	str	r1, [sp, #84]	; 0x54
 8011c0e:	3508      	adds	r5, #8
 8011c10:	2907      	cmp	r1, #7
 8011c12:	dd07      	ble.n	8011c24 <_vfiprintf_r+0x918>
 8011c14:	9903      	ldr	r1, [sp, #12]
 8011c16:	9806      	ldr	r0, [sp, #24]
 8011c18:	aa14      	add	r2, sp, #80	; 0x50
 8011c1a:	f7ff fb42 	bl	80112a2 <__sprint_r>
 8011c1e:	2800      	cmp	r0, #0
 8011c20:	d1dd      	bne.n	8011bde <_vfiprintf_r+0x8d2>
 8011c22:	ad17      	add	r5, sp, #92	; 0x5c
 8011c24:	3c10      	subs	r4, #16
 8011c26:	e7c4      	b.n	8011bb2 <_vfiprintf_r+0x8a6>
 8011c28:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d102      	bne.n	8011c34 <_vfiprintf_r+0x928>
 8011c2e:	2300      	movs	r3, #0
 8011c30:	9315      	str	r3, [sp, #84]	; 0x54
 8011c32:	e7d4      	b.n	8011bde <_vfiprintf_r+0x8d2>
 8011c34:	9903      	ldr	r1, [sp, #12]
 8011c36:	9806      	ldr	r0, [sp, #24]
 8011c38:	aa14      	add	r2, sp, #80	; 0x50
 8011c3a:	f7ff fb32 	bl	80112a2 <__sprint_r>
 8011c3e:	2800      	cmp	r0, #0
 8011c40:	d0f5      	beq.n	8011c2e <_vfiprintf_r+0x922>
 8011c42:	e7cc      	b.n	8011bde <_vfiprintf_r+0x8d2>
 8011c44:	0027      	movs	r7, r4
 8011c46:	2a00      	cmp	r2, #0
 8011c48:	d100      	bne.n	8011c4c <_vfiprintf_r+0x940>
 8011c4a:	e51b      	b.n	8011684 <_vfiprintf_r+0x378>
 8011c4c:	2b01      	cmp	r3, #1
 8011c4e:	d100      	bne.n	8011c52 <_vfiprintf_r+0x946>
 8011c50:	e6fe      	b.n	8011a50 <_vfiprintf_r+0x744>
 8011c52:	ae40      	add	r6, sp, #256	; 0x100
 8011c54:	2b02      	cmp	r3, #2
 8011c56:	d100      	bne.n	8011c5a <_vfiprintf_r+0x94e>
 8011c58:	e743      	b.n	8011ae2 <_vfiprintf_r+0x7d6>
 8011c5a:	2307      	movs	r3, #7
 8011c5c:	469c      	mov	ip, r3
 8011c5e:	4663      	mov	r3, ip
 8011c60:	9900      	ldr	r1, [sp, #0]
 8011c62:	0032      	movs	r2, r6
 8011c64:	400b      	ands	r3, r1
 8011c66:	9901      	ldr	r1, [sp, #4]
 8011c68:	3e01      	subs	r6, #1
 8011c6a:	074c      	lsls	r4, r1, #29
 8011c6c:	9900      	ldr	r1, [sp, #0]
 8011c6e:	3330      	adds	r3, #48	; 0x30
 8011c70:	08c8      	lsrs	r0, r1, #3
 8011c72:	9901      	ldr	r1, [sp, #4]
 8011c74:	4304      	orrs	r4, r0
 8011c76:	08c9      	lsrs	r1, r1, #3
 8011c78:	9101      	str	r1, [sp, #4]
 8011c7a:	0021      	movs	r1, r4
 8011c7c:	9801      	ldr	r0, [sp, #4]
 8011c7e:	7033      	strb	r3, [r6, #0]
 8011c80:	9400      	str	r4, [sp, #0]
 8011c82:	4301      	orrs	r1, r0
 8011c84:	d1eb      	bne.n	8011c5e <_vfiprintf_r+0x952>
 8011c86:	07f9      	lsls	r1, r7, #31
 8011c88:	d505      	bpl.n	8011c96 <_vfiprintf_r+0x98a>
 8011c8a:	2b30      	cmp	r3, #48	; 0x30
 8011c8c:	d003      	beq.n	8011c96 <_vfiprintf_r+0x98a>
 8011c8e:	2330      	movs	r3, #48	; 0x30
 8011c90:	3e01      	subs	r6, #1
 8011c92:	7033      	strb	r3, [r6, #0]
 8011c94:	1e96      	subs	r6, r2, #2
 8011c96:	9b05      	ldr	r3, [sp, #20]
 8011c98:	003c      	movs	r4, r7
 8011c9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8011c9c:	ab40      	add	r3, sp, #256	; 0x100
 8011c9e:	1b9b      	subs	r3, r3, r6
 8011ca0:	9305      	str	r3, [sp, #20]
 8011ca2:	e575      	b.n	8011790 <_vfiprintf_r+0x484>
 8011ca4:	08014381 	.word	0x08014381

08011ca8 <__sbprintf>:
 8011ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011caa:	0015      	movs	r5, r2
 8011cac:	2202      	movs	r2, #2
 8011cae:	4c1e      	ldr	r4, [pc, #120]	; (8011d28 <__sbprintf+0x80>)
 8011cb0:	001f      	movs	r7, r3
 8011cb2:	898b      	ldrh	r3, [r1, #12]
 8011cb4:	44a5      	add	sp, r4
 8011cb6:	4393      	bics	r3, r2
 8011cb8:	466a      	mov	r2, sp
 8011cba:	8193      	strh	r3, [r2, #12]
 8011cbc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8011cbe:	0006      	movs	r6, r0
 8011cc0:	9319      	str	r3, [sp, #100]	; 0x64
 8011cc2:	89cb      	ldrh	r3, [r1, #14]
 8011cc4:	a816      	add	r0, sp, #88	; 0x58
 8011cc6:	81d3      	strh	r3, [r2, #14]
 8011cc8:	69cb      	ldr	r3, [r1, #28]
 8011cca:	000c      	movs	r4, r1
 8011ccc:	9307      	str	r3, [sp, #28]
 8011cce:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8011cd0:	9309      	str	r3, [sp, #36]	; 0x24
 8011cd2:	ab1a      	add	r3, sp, #104	; 0x68
 8011cd4:	9300      	str	r3, [sp, #0]
 8011cd6:	9304      	str	r3, [sp, #16]
 8011cd8:	2380      	movs	r3, #128	; 0x80
 8011cda:	00db      	lsls	r3, r3, #3
 8011cdc:	9302      	str	r3, [sp, #8]
 8011cde:	9305      	str	r3, [sp, #20]
 8011ce0:	2300      	movs	r3, #0
 8011ce2:	9306      	str	r3, [sp, #24]
 8011ce4:	f7f9 ff8c 	bl	800bc00 <__retarget_lock_init_recursive>
 8011ce8:	002a      	movs	r2, r5
 8011cea:	003b      	movs	r3, r7
 8011cec:	4669      	mov	r1, sp
 8011cee:	0030      	movs	r0, r6
 8011cf0:	f7ff fb0c 	bl	801130c <_vfiprintf_r>
 8011cf4:	1e05      	subs	r5, r0, #0
 8011cf6:	db07      	blt.n	8011d08 <__sbprintf+0x60>
 8011cf8:	4669      	mov	r1, sp
 8011cfa:	0030      	movs	r0, r6
 8011cfc:	f7fd fdf6 	bl	800f8ec <_fflush_r>
 8011d00:	2800      	cmp	r0, #0
 8011d02:	d001      	beq.n	8011d08 <__sbprintf+0x60>
 8011d04:	2501      	movs	r5, #1
 8011d06:	426d      	negs	r5, r5
 8011d08:	466b      	mov	r3, sp
 8011d0a:	899a      	ldrh	r2, [r3, #12]
 8011d0c:	2340      	movs	r3, #64	; 0x40
 8011d0e:	421a      	tst	r2, r3
 8011d10:	d002      	beq.n	8011d18 <__sbprintf+0x70>
 8011d12:	89a2      	ldrh	r2, [r4, #12]
 8011d14:	4313      	orrs	r3, r2
 8011d16:	81a3      	strh	r3, [r4, #12]
 8011d18:	9816      	ldr	r0, [sp, #88]	; 0x58
 8011d1a:	f7f9 ff72 	bl	800bc02 <__retarget_lock_close_recursive>
 8011d1e:	0028      	movs	r0, r5
 8011d20:	4b02      	ldr	r3, [pc, #8]	; (8011d2c <__sbprintf+0x84>)
 8011d22:	449d      	add	sp, r3
 8011d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d26:	46c0      	nop			; (mov r8, r8)
 8011d28:	fffffb94 	.word	0xfffffb94
 8011d2c:	0000046c 	.word	0x0000046c

08011d30 <__sfvwrite_r>:
 8011d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d32:	6893      	ldr	r3, [r2, #8]
 8011d34:	b087      	sub	sp, #28
 8011d36:	000c      	movs	r4, r1
 8011d38:	9002      	str	r0, [sp, #8]
 8011d3a:	9204      	str	r2, [sp, #16]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d102      	bne.n	8011d46 <__sfvwrite_r+0x16>
 8011d40:	2000      	movs	r0, #0
 8011d42:	b007      	add	sp, #28
 8011d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d46:	898b      	ldrh	r3, [r1, #12]
 8011d48:	071b      	lsls	r3, r3, #28
 8011d4a:	d557      	bpl.n	8011dfc <__sfvwrite_r+0xcc>
 8011d4c:	690b      	ldr	r3, [r1, #16]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d054      	beq.n	8011dfc <__sfvwrite_r+0xcc>
 8011d52:	9b04      	ldr	r3, [sp, #16]
 8011d54:	2202      	movs	r2, #2
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	9301      	str	r3, [sp, #4]
 8011d5a:	89a3      	ldrh	r3, [r4, #12]
 8011d5c:	001f      	movs	r7, r3
 8011d5e:	4017      	ands	r7, r2
 8011d60:	4213      	tst	r3, r2
 8011d62:	d171      	bne.n	8011e48 <__sfvwrite_r+0x118>
 8011d64:	2201      	movs	r2, #1
 8011d66:	2101      	movs	r1, #1
 8011d68:	401a      	ands	r2, r3
 8011d6a:	420b      	tst	r3, r1
 8011d6c:	d100      	bne.n	8011d70 <__sfvwrite_r+0x40>
 8011d6e:	e0a5      	b.n	8011ebc <__sfvwrite_r+0x18c>
 8011d70:	0038      	movs	r0, r7
 8011d72:	003e      	movs	r6, r7
 8011d74:	9703      	str	r7, [sp, #12]
 8011d76:	9b03      	ldr	r3, [sp, #12]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d100      	bne.n	8011d7e <__sfvwrite_r+0x4e>
 8011d7c:	e10b      	b.n	8011f96 <__sfvwrite_r+0x266>
 8011d7e:	2800      	cmp	r0, #0
 8011d80:	d10a      	bne.n	8011d98 <__sfvwrite_r+0x68>
 8011d82:	001a      	movs	r2, r3
 8011d84:	210a      	movs	r1, #10
 8011d86:	0030      	movs	r0, r6
 8011d88:	f7fd fe2a 	bl	800f9e0 <memchr>
 8011d8c:	9b03      	ldr	r3, [sp, #12]
 8011d8e:	1c5f      	adds	r7, r3, #1
 8011d90:	2800      	cmp	r0, #0
 8011d92:	d001      	beq.n	8011d98 <__sfvwrite_r+0x68>
 8011d94:	3001      	adds	r0, #1
 8011d96:	1b87      	subs	r7, r0, r6
 8011d98:	9b03      	ldr	r3, [sp, #12]
 8011d9a:	9705      	str	r7, [sp, #20]
 8011d9c:	429f      	cmp	r7, r3
 8011d9e:	d900      	bls.n	8011da2 <__sfvwrite_r+0x72>
 8011da0:	9305      	str	r3, [sp, #20]
 8011da2:	6820      	ldr	r0, [r4, #0]
 8011da4:	6922      	ldr	r2, [r4, #16]
 8011da6:	68a5      	ldr	r5, [r4, #8]
 8011da8:	6963      	ldr	r3, [r4, #20]
 8011daa:	4290      	cmp	r0, r2
 8011dac:	d800      	bhi.n	8011db0 <__sfvwrite_r+0x80>
 8011dae:	e0fb      	b.n	8011fa8 <__sfvwrite_r+0x278>
 8011db0:	9a05      	ldr	r2, [sp, #20]
 8011db2:	18ed      	adds	r5, r5, r3
 8011db4:	42aa      	cmp	r2, r5
 8011db6:	dc00      	bgt.n	8011dba <__sfvwrite_r+0x8a>
 8011db8:	e0f6      	b.n	8011fa8 <__sfvwrite_r+0x278>
 8011dba:	0031      	movs	r1, r6
 8011dbc:	002a      	movs	r2, r5
 8011dbe:	f000 fa1e 	bl	80121fe <memmove>
 8011dc2:	6823      	ldr	r3, [r4, #0]
 8011dc4:	0021      	movs	r1, r4
 8011dc6:	195b      	adds	r3, r3, r5
 8011dc8:	9802      	ldr	r0, [sp, #8]
 8011dca:	6023      	str	r3, [r4, #0]
 8011dcc:	f7fd fd8e 	bl	800f8ec <_fflush_r>
 8011dd0:	2800      	cmp	r0, #0
 8011dd2:	d16e      	bne.n	8011eb2 <__sfvwrite_r+0x182>
 8011dd4:	2001      	movs	r0, #1
 8011dd6:	1b7f      	subs	r7, r7, r5
 8011dd8:	d105      	bne.n	8011de6 <__sfvwrite_r+0xb6>
 8011dda:	0021      	movs	r1, r4
 8011ddc:	9802      	ldr	r0, [sp, #8]
 8011dde:	f7fd fd85 	bl	800f8ec <_fflush_r>
 8011de2:	2800      	cmp	r0, #0
 8011de4:	d165      	bne.n	8011eb2 <__sfvwrite_r+0x182>
 8011de6:	9b03      	ldr	r3, [sp, #12]
 8011de8:	9a04      	ldr	r2, [sp, #16]
 8011dea:	1b5b      	subs	r3, r3, r5
 8011dec:	9303      	str	r3, [sp, #12]
 8011dee:	9b04      	ldr	r3, [sp, #16]
 8011df0:	1976      	adds	r6, r6, r5
 8011df2:	689b      	ldr	r3, [r3, #8]
 8011df4:	1b5b      	subs	r3, r3, r5
 8011df6:	6093      	str	r3, [r2, #8]
 8011df8:	d1bd      	bne.n	8011d76 <__sfvwrite_r+0x46>
 8011dfa:	e7a1      	b.n	8011d40 <__sfvwrite_r+0x10>
 8011dfc:	0021      	movs	r1, r4
 8011dfe:	9802      	ldr	r0, [sp, #8]
 8011e00:	f000 f932 	bl	8012068 <__swsetup_r>
 8011e04:	2800      	cmp	r0, #0
 8011e06:	d0a4      	beq.n	8011d52 <__sfvwrite_r+0x22>
 8011e08:	2001      	movs	r0, #1
 8011e0a:	4240      	negs	r0, r0
 8011e0c:	e799      	b.n	8011d42 <__sfvwrite_r+0x12>
 8011e0e:	9b01      	ldr	r3, [sp, #4]
 8011e10:	681e      	ldr	r6, [r3, #0]
 8011e12:	685d      	ldr	r5, [r3, #4]
 8011e14:	3308      	adds	r3, #8
 8011e16:	9301      	str	r3, [sp, #4]
 8011e18:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8011e1a:	69e1      	ldr	r1, [r4, #28]
 8011e1c:	2d00      	cmp	r5, #0
 8011e1e:	d0f6      	beq.n	8011e0e <__sfvwrite_r+0xde>
 8011e20:	4a6e      	ldr	r2, [pc, #440]	; (8011fdc <__sfvwrite_r+0x2ac>)
 8011e22:	002b      	movs	r3, r5
 8011e24:	4295      	cmp	r5, r2
 8011e26:	d900      	bls.n	8011e2a <__sfvwrite_r+0xfa>
 8011e28:	0013      	movs	r3, r2
 8011e2a:	0032      	movs	r2, r6
 8011e2c:	9802      	ldr	r0, [sp, #8]
 8011e2e:	47b8      	blx	r7
 8011e30:	2800      	cmp	r0, #0
 8011e32:	dd3e      	ble.n	8011eb2 <__sfvwrite_r+0x182>
 8011e34:	9b04      	ldr	r3, [sp, #16]
 8011e36:	9a04      	ldr	r2, [sp, #16]
 8011e38:	689b      	ldr	r3, [r3, #8]
 8011e3a:	1836      	adds	r6, r6, r0
 8011e3c:	1a1b      	subs	r3, r3, r0
 8011e3e:	1a2d      	subs	r5, r5, r0
 8011e40:	6093      	str	r3, [r2, #8]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d1e8      	bne.n	8011e18 <__sfvwrite_r+0xe8>
 8011e46:	e77b      	b.n	8011d40 <__sfvwrite_r+0x10>
 8011e48:	2600      	movs	r6, #0
 8011e4a:	0035      	movs	r5, r6
 8011e4c:	e7e4      	b.n	8011e18 <__sfvwrite_r+0xe8>
 8011e4e:	9b01      	ldr	r3, [sp, #4]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	9303      	str	r3, [sp, #12]
 8011e54:	9b01      	ldr	r3, [sp, #4]
 8011e56:	685d      	ldr	r5, [r3, #4]
 8011e58:	3308      	adds	r3, #8
 8011e5a:	9301      	str	r3, [sp, #4]
 8011e5c:	220c      	movs	r2, #12
 8011e5e:	5ea3      	ldrsh	r3, [r4, r2]
 8011e60:	6820      	ldr	r0, [r4, #0]
 8011e62:	68a6      	ldr	r6, [r4, #8]
 8011e64:	2d00      	cmp	r5, #0
 8011e66:	d0f2      	beq.n	8011e4e <__sfvwrite_r+0x11e>
 8011e68:	2180      	movs	r1, #128	; 0x80
 8011e6a:	0089      	lsls	r1, r1, #2
 8011e6c:	b29a      	uxth	r2, r3
 8011e6e:	420b      	tst	r3, r1
 8011e70:	d062      	beq.n	8011f38 <__sfvwrite_r+0x208>
 8011e72:	42ae      	cmp	r6, r5
 8011e74:	d837      	bhi.n	8011ee6 <__sfvwrite_r+0x1b6>
 8011e76:	2390      	movs	r3, #144	; 0x90
 8011e78:	00db      	lsls	r3, r3, #3
 8011e7a:	421a      	tst	r2, r3
 8011e7c:	d033      	beq.n	8011ee6 <__sfvwrite_r+0x1b6>
 8011e7e:	6921      	ldr	r1, [r4, #16]
 8011e80:	1a43      	subs	r3, r0, r1
 8011e82:	2003      	movs	r0, #3
 8011e84:	9305      	str	r3, [sp, #20]
 8011e86:	6963      	ldr	r3, [r4, #20]
 8011e88:	4343      	muls	r3, r0
 8011e8a:	0fdf      	lsrs	r7, r3, #31
 8011e8c:	18ff      	adds	r7, r7, r3
 8011e8e:	9b05      	ldr	r3, [sp, #20]
 8011e90:	107f      	asrs	r7, r7, #1
 8011e92:	3301      	adds	r3, #1
 8011e94:	195b      	adds	r3, r3, r5
 8011e96:	42bb      	cmp	r3, r7
 8011e98:	d900      	bls.n	8011e9c <__sfvwrite_r+0x16c>
 8011e9a:	001f      	movs	r7, r3
 8011e9c:	0552      	lsls	r2, r2, #21
 8011e9e:	d53c      	bpl.n	8011f1a <__sfvwrite_r+0x1ea>
 8011ea0:	0039      	movs	r1, r7
 8011ea2:	9802      	ldr	r0, [sp, #8]
 8011ea4:	f7f8 fb56 	bl	800a554 <_malloc_r>
 8011ea8:	1e06      	subs	r6, r0, #0
 8011eaa:	d10a      	bne.n	8011ec2 <__sfvwrite_r+0x192>
 8011eac:	230c      	movs	r3, #12
 8011eae:	9a02      	ldr	r2, [sp, #8]
 8011eb0:	6013      	str	r3, [r2, #0]
 8011eb2:	2340      	movs	r3, #64	; 0x40
 8011eb4:	89a2      	ldrh	r2, [r4, #12]
 8011eb6:	4313      	orrs	r3, r2
 8011eb8:	81a3      	strh	r3, [r4, #12]
 8011eba:	e7a5      	b.n	8011e08 <__sfvwrite_r+0xd8>
 8011ebc:	0015      	movs	r5, r2
 8011ebe:	9203      	str	r2, [sp, #12]
 8011ec0:	e7cc      	b.n	8011e5c <__sfvwrite_r+0x12c>
 8011ec2:	9a05      	ldr	r2, [sp, #20]
 8011ec4:	6921      	ldr	r1, [r4, #16]
 8011ec6:	f7f9 feaa 	bl	800bc1e <memcpy>
 8011eca:	89a2      	ldrh	r2, [r4, #12]
 8011ecc:	4b44      	ldr	r3, [pc, #272]	; (8011fe0 <__sfvwrite_r+0x2b0>)
 8011ece:	401a      	ands	r2, r3
 8011ed0:	2380      	movs	r3, #128	; 0x80
 8011ed2:	4313      	orrs	r3, r2
 8011ed4:	81a3      	strh	r3, [r4, #12]
 8011ed6:	9b05      	ldr	r3, [sp, #20]
 8011ed8:	6126      	str	r6, [r4, #16]
 8011eda:	18f6      	adds	r6, r6, r3
 8011edc:	6026      	str	r6, [r4, #0]
 8011ede:	002e      	movs	r6, r5
 8011ee0:	6167      	str	r7, [r4, #20]
 8011ee2:	1aff      	subs	r7, r7, r3
 8011ee4:	60a7      	str	r7, [r4, #8]
 8011ee6:	002f      	movs	r7, r5
 8011ee8:	42ae      	cmp	r6, r5
 8011eea:	d900      	bls.n	8011eee <__sfvwrite_r+0x1be>
 8011eec:	002e      	movs	r6, r5
 8011eee:	0032      	movs	r2, r6
 8011ef0:	9903      	ldr	r1, [sp, #12]
 8011ef2:	6820      	ldr	r0, [r4, #0]
 8011ef4:	f000 f983 	bl	80121fe <memmove>
 8011ef8:	68a3      	ldr	r3, [r4, #8]
 8011efa:	1b9b      	subs	r3, r3, r6
 8011efc:	60a3      	str	r3, [r4, #8]
 8011efe:	6823      	ldr	r3, [r4, #0]
 8011f00:	199b      	adds	r3, r3, r6
 8011f02:	6023      	str	r3, [r4, #0]
 8011f04:	9b03      	ldr	r3, [sp, #12]
 8011f06:	9a04      	ldr	r2, [sp, #16]
 8011f08:	19db      	adds	r3, r3, r7
 8011f0a:	9303      	str	r3, [sp, #12]
 8011f0c:	9b04      	ldr	r3, [sp, #16]
 8011f0e:	1bed      	subs	r5, r5, r7
 8011f10:	689b      	ldr	r3, [r3, #8]
 8011f12:	1bdb      	subs	r3, r3, r7
 8011f14:	6093      	str	r3, [r2, #8]
 8011f16:	d1a1      	bne.n	8011e5c <__sfvwrite_r+0x12c>
 8011f18:	e712      	b.n	8011d40 <__sfvwrite_r+0x10>
 8011f1a:	003a      	movs	r2, r7
 8011f1c:	9802      	ldr	r0, [sp, #8]
 8011f1e:	f7fe fcd7 	bl	80108d0 <_realloc_r>
 8011f22:	1e06      	subs	r6, r0, #0
 8011f24:	d1d7      	bne.n	8011ed6 <__sfvwrite_r+0x1a6>
 8011f26:	6921      	ldr	r1, [r4, #16]
 8011f28:	9802      	ldr	r0, [sp, #8]
 8011f2a:	f7f9 fef3 	bl	800bd14 <_free_r>
 8011f2e:	2280      	movs	r2, #128	; 0x80
 8011f30:	89a3      	ldrh	r3, [r4, #12]
 8011f32:	4393      	bics	r3, r2
 8011f34:	81a3      	strh	r3, [r4, #12]
 8011f36:	e7b9      	b.n	8011eac <__sfvwrite_r+0x17c>
 8011f38:	6923      	ldr	r3, [r4, #16]
 8011f3a:	4283      	cmp	r3, r0
 8011f3c:	d302      	bcc.n	8011f44 <__sfvwrite_r+0x214>
 8011f3e:	6967      	ldr	r7, [r4, #20]
 8011f40:	42af      	cmp	r7, r5
 8011f42:	d916      	bls.n	8011f72 <__sfvwrite_r+0x242>
 8011f44:	42ae      	cmp	r6, r5
 8011f46:	d900      	bls.n	8011f4a <__sfvwrite_r+0x21a>
 8011f48:	002e      	movs	r6, r5
 8011f4a:	0032      	movs	r2, r6
 8011f4c:	9903      	ldr	r1, [sp, #12]
 8011f4e:	f000 f956 	bl	80121fe <memmove>
 8011f52:	68a3      	ldr	r3, [r4, #8]
 8011f54:	6822      	ldr	r2, [r4, #0]
 8011f56:	1b9b      	subs	r3, r3, r6
 8011f58:	1992      	adds	r2, r2, r6
 8011f5a:	0037      	movs	r7, r6
 8011f5c:	60a3      	str	r3, [r4, #8]
 8011f5e:	6022      	str	r2, [r4, #0]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d1cf      	bne.n	8011f04 <__sfvwrite_r+0x1d4>
 8011f64:	0021      	movs	r1, r4
 8011f66:	9802      	ldr	r0, [sp, #8]
 8011f68:	f7fd fcc0 	bl	800f8ec <_fflush_r>
 8011f6c:	2800      	cmp	r0, #0
 8011f6e:	d0c9      	beq.n	8011f04 <__sfvwrite_r+0x1d4>
 8011f70:	e79f      	b.n	8011eb2 <__sfvwrite_r+0x182>
 8011f72:	4b1c      	ldr	r3, [pc, #112]	; (8011fe4 <__sfvwrite_r+0x2b4>)
 8011f74:	0028      	movs	r0, r5
 8011f76:	429d      	cmp	r5, r3
 8011f78:	d900      	bls.n	8011f7c <__sfvwrite_r+0x24c>
 8011f7a:	481b      	ldr	r0, [pc, #108]	; (8011fe8 <__sfvwrite_r+0x2b8>)
 8011f7c:	0039      	movs	r1, r7
 8011f7e:	f7ee f967 	bl	8000250 <__divsi3>
 8011f82:	003b      	movs	r3, r7
 8011f84:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011f86:	4343      	muls	r3, r0
 8011f88:	9a03      	ldr	r2, [sp, #12]
 8011f8a:	69e1      	ldr	r1, [r4, #28]
 8011f8c:	9802      	ldr	r0, [sp, #8]
 8011f8e:	47b0      	blx	r6
 8011f90:	1e07      	subs	r7, r0, #0
 8011f92:	dcb7      	bgt.n	8011f04 <__sfvwrite_r+0x1d4>
 8011f94:	e78d      	b.n	8011eb2 <__sfvwrite_r+0x182>
 8011f96:	9b01      	ldr	r3, [sp, #4]
 8011f98:	2000      	movs	r0, #0
 8011f9a:	681e      	ldr	r6, [r3, #0]
 8011f9c:	685b      	ldr	r3, [r3, #4]
 8011f9e:	9303      	str	r3, [sp, #12]
 8011fa0:	9b01      	ldr	r3, [sp, #4]
 8011fa2:	3308      	adds	r3, #8
 8011fa4:	9301      	str	r3, [sp, #4]
 8011fa6:	e6e6      	b.n	8011d76 <__sfvwrite_r+0x46>
 8011fa8:	9a05      	ldr	r2, [sp, #20]
 8011faa:	4293      	cmp	r3, r2
 8011fac:	dc08      	bgt.n	8011fc0 <__sfvwrite_r+0x290>
 8011fae:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8011fb0:	0032      	movs	r2, r6
 8011fb2:	69e1      	ldr	r1, [r4, #28]
 8011fb4:	9802      	ldr	r0, [sp, #8]
 8011fb6:	47a8      	blx	r5
 8011fb8:	1e05      	subs	r5, r0, #0
 8011fba:	dd00      	ble.n	8011fbe <__sfvwrite_r+0x28e>
 8011fbc:	e70a      	b.n	8011dd4 <__sfvwrite_r+0xa4>
 8011fbe:	e778      	b.n	8011eb2 <__sfvwrite_r+0x182>
 8011fc0:	9a05      	ldr	r2, [sp, #20]
 8011fc2:	0031      	movs	r1, r6
 8011fc4:	f000 f91b 	bl	80121fe <memmove>
 8011fc8:	9a05      	ldr	r2, [sp, #20]
 8011fca:	68a3      	ldr	r3, [r4, #8]
 8011fcc:	0015      	movs	r5, r2
 8011fce:	1a9b      	subs	r3, r3, r2
 8011fd0:	60a3      	str	r3, [r4, #8]
 8011fd2:	6823      	ldr	r3, [r4, #0]
 8011fd4:	189b      	adds	r3, r3, r2
 8011fd6:	6023      	str	r3, [r4, #0]
 8011fd8:	e6fc      	b.n	8011dd4 <__sfvwrite_r+0xa4>
 8011fda:	46c0      	nop			; (mov r8, r8)
 8011fdc:	7ffffc00 	.word	0x7ffffc00
 8011fe0:	fffffb7f 	.word	0xfffffb7f
 8011fe4:	7ffffffe 	.word	0x7ffffffe
 8011fe8:	7fffffff 	.word	0x7fffffff

08011fec <__submore>:
 8011fec:	000b      	movs	r3, r1
 8011fee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011ff0:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8011ff2:	3340      	adds	r3, #64	; 0x40
 8011ff4:	000c      	movs	r4, r1
 8011ff6:	429d      	cmp	r5, r3
 8011ff8:	d11c      	bne.n	8012034 <__submore+0x48>
 8011ffa:	2680      	movs	r6, #128	; 0x80
 8011ffc:	00f6      	lsls	r6, r6, #3
 8011ffe:	0031      	movs	r1, r6
 8012000:	f7f8 faa8 	bl	800a554 <_malloc_r>
 8012004:	2800      	cmp	r0, #0
 8012006:	d102      	bne.n	801200e <__submore+0x22>
 8012008:	2001      	movs	r0, #1
 801200a:	4240      	negs	r0, r0
 801200c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801200e:	0023      	movs	r3, r4
 8012010:	6320      	str	r0, [r4, #48]	; 0x30
 8012012:	6366      	str	r6, [r4, #52]	; 0x34
 8012014:	3342      	adds	r3, #66	; 0x42
 8012016:	781a      	ldrb	r2, [r3, #0]
 8012018:	4b10      	ldr	r3, [pc, #64]	; (801205c <__submore+0x70>)
 801201a:	54c2      	strb	r2, [r0, r3]
 801201c:	0023      	movs	r3, r4
 801201e:	3341      	adds	r3, #65	; 0x41
 8012020:	781a      	ldrb	r2, [r3, #0]
 8012022:	4b0f      	ldr	r3, [pc, #60]	; (8012060 <__submore+0x74>)
 8012024:	54c2      	strb	r2, [r0, r3]
 8012026:	782a      	ldrb	r2, [r5, #0]
 8012028:	4b0e      	ldr	r3, [pc, #56]	; (8012064 <__submore+0x78>)
 801202a:	54c2      	strb	r2, [r0, r3]
 801202c:	18c0      	adds	r0, r0, r3
 801202e:	6020      	str	r0, [r4, #0]
 8012030:	2000      	movs	r0, #0
 8012032:	e7eb      	b.n	801200c <__submore+0x20>
 8012034:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8012036:	0029      	movs	r1, r5
 8012038:	0073      	lsls	r3, r6, #1
 801203a:	001a      	movs	r2, r3
 801203c:	9301      	str	r3, [sp, #4]
 801203e:	f7fe fc47 	bl	80108d0 <_realloc_r>
 8012042:	1e05      	subs	r5, r0, #0
 8012044:	d0e0      	beq.n	8012008 <__submore+0x1c>
 8012046:	1987      	adds	r7, r0, r6
 8012048:	0001      	movs	r1, r0
 801204a:	0032      	movs	r2, r6
 801204c:	0038      	movs	r0, r7
 801204e:	f7f9 fde6 	bl	800bc1e <memcpy>
 8012052:	9b01      	ldr	r3, [sp, #4]
 8012054:	6027      	str	r7, [r4, #0]
 8012056:	6325      	str	r5, [r4, #48]	; 0x30
 8012058:	6363      	str	r3, [r4, #52]	; 0x34
 801205a:	e7e9      	b.n	8012030 <__submore+0x44>
 801205c:	000003ff 	.word	0x000003ff
 8012060:	000003fe 	.word	0x000003fe
 8012064:	000003fd 	.word	0x000003fd

08012068 <__swsetup_r>:
 8012068:	4b30      	ldr	r3, [pc, #192]	; (801212c <__swsetup_r+0xc4>)
 801206a:	b570      	push	{r4, r5, r6, lr}
 801206c:	0005      	movs	r5, r0
 801206e:	6818      	ldr	r0, [r3, #0]
 8012070:	000c      	movs	r4, r1
 8012072:	2800      	cmp	r0, #0
 8012074:	d004      	beq.n	8012080 <__swsetup_r+0x18>
 8012076:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012078:	2b00      	cmp	r3, #0
 801207a:	d101      	bne.n	8012080 <__swsetup_r+0x18>
 801207c:	f7f9 fbec 	bl	800b858 <__sinit>
 8012080:	230c      	movs	r3, #12
 8012082:	5ee2      	ldrsh	r2, [r4, r3]
 8012084:	b293      	uxth	r3, r2
 8012086:	0711      	lsls	r1, r2, #28
 8012088:	d423      	bmi.n	80120d2 <__swsetup_r+0x6a>
 801208a:	06d9      	lsls	r1, r3, #27
 801208c:	d407      	bmi.n	801209e <__swsetup_r+0x36>
 801208e:	2309      	movs	r3, #9
 8012090:	2001      	movs	r0, #1
 8012092:	602b      	str	r3, [r5, #0]
 8012094:	3337      	adds	r3, #55	; 0x37
 8012096:	4313      	orrs	r3, r2
 8012098:	81a3      	strh	r3, [r4, #12]
 801209a:	4240      	negs	r0, r0
 801209c:	bd70      	pop	{r4, r5, r6, pc}
 801209e:	075b      	lsls	r3, r3, #29
 80120a0:	d513      	bpl.n	80120ca <__swsetup_r+0x62>
 80120a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80120a4:	2900      	cmp	r1, #0
 80120a6:	d008      	beq.n	80120ba <__swsetup_r+0x52>
 80120a8:	0023      	movs	r3, r4
 80120aa:	3340      	adds	r3, #64	; 0x40
 80120ac:	4299      	cmp	r1, r3
 80120ae:	d002      	beq.n	80120b6 <__swsetup_r+0x4e>
 80120b0:	0028      	movs	r0, r5
 80120b2:	f7f9 fe2f 	bl	800bd14 <_free_r>
 80120b6:	2300      	movs	r3, #0
 80120b8:	6323      	str	r3, [r4, #48]	; 0x30
 80120ba:	2224      	movs	r2, #36	; 0x24
 80120bc:	89a3      	ldrh	r3, [r4, #12]
 80120be:	4393      	bics	r3, r2
 80120c0:	81a3      	strh	r3, [r4, #12]
 80120c2:	2300      	movs	r3, #0
 80120c4:	6063      	str	r3, [r4, #4]
 80120c6:	6923      	ldr	r3, [r4, #16]
 80120c8:	6023      	str	r3, [r4, #0]
 80120ca:	2308      	movs	r3, #8
 80120cc:	89a2      	ldrh	r2, [r4, #12]
 80120ce:	4313      	orrs	r3, r2
 80120d0:	81a3      	strh	r3, [r4, #12]
 80120d2:	6923      	ldr	r3, [r4, #16]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d10b      	bne.n	80120f0 <__swsetup_r+0x88>
 80120d8:	21a0      	movs	r1, #160	; 0xa0
 80120da:	2280      	movs	r2, #128	; 0x80
 80120dc:	89a3      	ldrh	r3, [r4, #12]
 80120de:	0089      	lsls	r1, r1, #2
 80120e0:	0092      	lsls	r2, r2, #2
 80120e2:	400b      	ands	r3, r1
 80120e4:	4293      	cmp	r3, r2
 80120e6:	d003      	beq.n	80120f0 <__swsetup_r+0x88>
 80120e8:	0021      	movs	r1, r4
 80120ea:	0028      	movs	r0, r5
 80120ec:	f000 f8e8 	bl	80122c0 <__smakebuf_r>
 80120f0:	220c      	movs	r2, #12
 80120f2:	5ea3      	ldrsh	r3, [r4, r2]
 80120f4:	2001      	movs	r0, #1
 80120f6:	001a      	movs	r2, r3
 80120f8:	b299      	uxth	r1, r3
 80120fa:	4002      	ands	r2, r0
 80120fc:	4203      	tst	r3, r0
 80120fe:	d00f      	beq.n	8012120 <__swsetup_r+0xb8>
 8012100:	2200      	movs	r2, #0
 8012102:	60a2      	str	r2, [r4, #8]
 8012104:	6962      	ldr	r2, [r4, #20]
 8012106:	4252      	negs	r2, r2
 8012108:	61a2      	str	r2, [r4, #24]
 801210a:	2000      	movs	r0, #0
 801210c:	6922      	ldr	r2, [r4, #16]
 801210e:	4282      	cmp	r2, r0
 8012110:	d1c4      	bne.n	801209c <__swsetup_r+0x34>
 8012112:	0609      	lsls	r1, r1, #24
 8012114:	d5c2      	bpl.n	801209c <__swsetup_r+0x34>
 8012116:	2240      	movs	r2, #64	; 0x40
 8012118:	4313      	orrs	r3, r2
 801211a:	81a3      	strh	r3, [r4, #12]
 801211c:	3801      	subs	r0, #1
 801211e:	e7bd      	b.n	801209c <__swsetup_r+0x34>
 8012120:	0788      	lsls	r0, r1, #30
 8012122:	d400      	bmi.n	8012126 <__swsetup_r+0xbe>
 8012124:	6962      	ldr	r2, [r4, #20]
 8012126:	60a2      	str	r2, [r4, #8]
 8012128:	e7ef      	b.n	801210a <__swsetup_r+0xa2>
 801212a:	46c0      	nop			; (mov r8, r8)
 801212c:	200006d8 	.word	0x200006d8

08012130 <__fputwc>:
 8012130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012132:	b085      	sub	sp, #20
 8012134:	000e      	movs	r6, r1
 8012136:	0015      	movs	r5, r2
 8012138:	9001      	str	r0, [sp, #4]
 801213a:	f7f9 fccf 	bl	800badc <__locale_mb_cur_max>
 801213e:	0004      	movs	r4, r0
 8012140:	2801      	cmp	r0, #1
 8012142:	d119      	bne.n	8012178 <__fputwc+0x48>
 8012144:	1e73      	subs	r3, r6, #1
 8012146:	2bfe      	cmp	r3, #254	; 0xfe
 8012148:	d816      	bhi.n	8012178 <__fputwc+0x48>
 801214a:	ab02      	add	r3, sp, #8
 801214c:	711e      	strb	r6, [r3, #4]
 801214e:	2700      	movs	r7, #0
 8012150:	42a7      	cmp	r7, r4
 8012152:	d020      	beq.n	8012196 <__fputwc+0x66>
 8012154:	ab03      	add	r3, sp, #12
 8012156:	5dd9      	ldrb	r1, [r3, r7]
 8012158:	68ab      	ldr	r3, [r5, #8]
 801215a:	3b01      	subs	r3, #1
 801215c:	60ab      	str	r3, [r5, #8]
 801215e:	2b00      	cmp	r3, #0
 8012160:	da04      	bge.n	801216c <__fputwc+0x3c>
 8012162:	69aa      	ldr	r2, [r5, #24]
 8012164:	4293      	cmp	r3, r2
 8012166:	db19      	blt.n	801219c <__fputwc+0x6c>
 8012168:	290a      	cmp	r1, #10
 801216a:	d017      	beq.n	801219c <__fputwc+0x6c>
 801216c:	682b      	ldr	r3, [r5, #0]
 801216e:	1c5a      	adds	r2, r3, #1
 8012170:	602a      	str	r2, [r5, #0]
 8012172:	7019      	strb	r1, [r3, #0]
 8012174:	3701      	adds	r7, #1
 8012176:	e7eb      	b.n	8012150 <__fputwc+0x20>
 8012178:	002b      	movs	r3, r5
 801217a:	0032      	movs	r2, r6
 801217c:	9801      	ldr	r0, [sp, #4]
 801217e:	335c      	adds	r3, #92	; 0x5c
 8012180:	a903      	add	r1, sp, #12
 8012182:	f000 f857 	bl	8012234 <_wcrtomb_r>
 8012186:	0004      	movs	r4, r0
 8012188:	1c43      	adds	r3, r0, #1
 801218a:	d1e0      	bne.n	801214e <__fputwc+0x1e>
 801218c:	2340      	movs	r3, #64	; 0x40
 801218e:	0006      	movs	r6, r0
 8012190:	89aa      	ldrh	r2, [r5, #12]
 8012192:	4313      	orrs	r3, r2
 8012194:	81ab      	strh	r3, [r5, #12]
 8012196:	0030      	movs	r0, r6
 8012198:	b005      	add	sp, #20
 801219a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801219c:	002a      	movs	r2, r5
 801219e:	9801      	ldr	r0, [sp, #4]
 80121a0:	f000 f8cc 	bl	801233c <__swbuf_r>
 80121a4:	1c43      	adds	r3, r0, #1
 80121a6:	d1e5      	bne.n	8012174 <__fputwc+0x44>
 80121a8:	0006      	movs	r6, r0
 80121aa:	e7f4      	b.n	8012196 <__fputwc+0x66>

080121ac <_fputwc_r>:
 80121ac:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80121ae:	b570      	push	{r4, r5, r6, lr}
 80121b0:	0005      	movs	r5, r0
 80121b2:	000e      	movs	r6, r1
 80121b4:	0014      	movs	r4, r2
 80121b6:	07db      	lsls	r3, r3, #31
 80121b8:	d405      	bmi.n	80121c6 <_fputwc_r+0x1a>
 80121ba:	8993      	ldrh	r3, [r2, #12]
 80121bc:	059b      	lsls	r3, r3, #22
 80121be:	d402      	bmi.n	80121c6 <_fputwc_r+0x1a>
 80121c0:	6d90      	ldr	r0, [r2, #88]	; 0x58
 80121c2:	f7f9 fd1f 	bl	800bc04 <__retarget_lock_acquire_recursive>
 80121c6:	230c      	movs	r3, #12
 80121c8:	5ee2      	ldrsh	r2, [r4, r3]
 80121ca:	2380      	movs	r3, #128	; 0x80
 80121cc:	019b      	lsls	r3, r3, #6
 80121ce:	421a      	tst	r2, r3
 80121d0:	d104      	bne.n	80121dc <_fputwc_r+0x30>
 80121d2:	431a      	orrs	r2, r3
 80121d4:	81a2      	strh	r2, [r4, #12]
 80121d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80121d8:	4313      	orrs	r3, r2
 80121da:	6663      	str	r3, [r4, #100]	; 0x64
 80121dc:	0028      	movs	r0, r5
 80121de:	0022      	movs	r2, r4
 80121e0:	0031      	movs	r1, r6
 80121e2:	f7ff ffa5 	bl	8012130 <__fputwc>
 80121e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80121e8:	0005      	movs	r5, r0
 80121ea:	07db      	lsls	r3, r3, #31
 80121ec:	d405      	bmi.n	80121fa <_fputwc_r+0x4e>
 80121ee:	89a3      	ldrh	r3, [r4, #12]
 80121f0:	059b      	lsls	r3, r3, #22
 80121f2:	d402      	bmi.n	80121fa <_fputwc_r+0x4e>
 80121f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80121f6:	f7f9 fd06 	bl	800bc06 <__retarget_lock_release_recursive>
 80121fa:	0028      	movs	r0, r5
 80121fc:	bd70      	pop	{r4, r5, r6, pc}

080121fe <memmove>:
 80121fe:	b510      	push	{r4, lr}
 8012200:	4288      	cmp	r0, r1
 8012202:	d902      	bls.n	801220a <memmove+0xc>
 8012204:	188b      	adds	r3, r1, r2
 8012206:	4298      	cmp	r0, r3
 8012208:	d303      	bcc.n	8012212 <memmove+0x14>
 801220a:	2300      	movs	r3, #0
 801220c:	e007      	b.n	801221e <memmove+0x20>
 801220e:	5c8b      	ldrb	r3, [r1, r2]
 8012210:	5483      	strb	r3, [r0, r2]
 8012212:	3a01      	subs	r2, #1
 8012214:	d2fb      	bcs.n	801220e <memmove+0x10>
 8012216:	bd10      	pop	{r4, pc}
 8012218:	5ccc      	ldrb	r4, [r1, r3]
 801221a:	54c4      	strb	r4, [r0, r3]
 801221c:	3301      	adds	r3, #1
 801221e:	429a      	cmp	r2, r3
 8012220:	d1fa      	bne.n	8012218 <memmove+0x1a>
 8012222:	e7f8      	b.n	8012216 <memmove+0x18>

08012224 <abort>:
 8012224:	2006      	movs	r0, #6
 8012226:	b510      	push	{r4, lr}
 8012228:	f000 f906 	bl	8012438 <raise>
 801222c:	2001      	movs	r0, #1
 801222e:	f7f1 f9db 	bl	80035e8 <_exit>
	...

08012234 <_wcrtomb_r>:
 8012234:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012236:	001d      	movs	r5, r3
 8012238:	4b09      	ldr	r3, [pc, #36]	; (8012260 <_wcrtomb_r+0x2c>)
 801223a:	0004      	movs	r4, r0
 801223c:	33e0      	adds	r3, #224	; 0xe0
 801223e:	681e      	ldr	r6, [r3, #0]
 8012240:	002b      	movs	r3, r5
 8012242:	2900      	cmp	r1, #0
 8012244:	d101      	bne.n	801224a <_wcrtomb_r+0x16>
 8012246:	000a      	movs	r2, r1
 8012248:	a901      	add	r1, sp, #4
 801224a:	0020      	movs	r0, r4
 801224c:	47b0      	blx	r6
 801224e:	1c43      	adds	r3, r0, #1
 8012250:	d103      	bne.n	801225a <_wcrtomb_r+0x26>
 8012252:	2300      	movs	r3, #0
 8012254:	602b      	str	r3, [r5, #0]
 8012256:	338a      	adds	r3, #138	; 0x8a
 8012258:	6023      	str	r3, [r4, #0]
 801225a:	b004      	add	sp, #16
 801225c:	bd70      	pop	{r4, r5, r6, pc}
 801225e:	46c0      	nop			; (mov r8, r8)
 8012260:	20000448 	.word	0x20000448

08012264 <__swhatbuf_r>:
 8012264:	b570      	push	{r4, r5, r6, lr}
 8012266:	000e      	movs	r6, r1
 8012268:	001d      	movs	r5, r3
 801226a:	230e      	movs	r3, #14
 801226c:	5ec9      	ldrsh	r1, [r1, r3]
 801226e:	0014      	movs	r4, r2
 8012270:	b096      	sub	sp, #88	; 0x58
 8012272:	2900      	cmp	r1, #0
 8012274:	da09      	bge.n	801228a <__swhatbuf_r+0x26>
 8012276:	89b2      	ldrh	r2, [r6, #12]
 8012278:	2380      	movs	r3, #128	; 0x80
 801227a:	0011      	movs	r1, r2
 801227c:	4019      	ands	r1, r3
 801227e:	421a      	tst	r2, r3
 8012280:	d018      	beq.n	80122b4 <__swhatbuf_r+0x50>
 8012282:	2100      	movs	r1, #0
 8012284:	3b40      	subs	r3, #64	; 0x40
 8012286:	0008      	movs	r0, r1
 8012288:	e010      	b.n	80122ac <__swhatbuf_r+0x48>
 801228a:	466a      	mov	r2, sp
 801228c:	f000 f8de 	bl	801244c <_fstat_r>
 8012290:	2800      	cmp	r0, #0
 8012292:	dbf0      	blt.n	8012276 <__swhatbuf_r+0x12>
 8012294:	23f0      	movs	r3, #240	; 0xf0
 8012296:	9901      	ldr	r1, [sp, #4]
 8012298:	021b      	lsls	r3, r3, #8
 801229a:	4019      	ands	r1, r3
 801229c:	4b07      	ldr	r3, [pc, #28]	; (80122bc <__swhatbuf_r+0x58>)
 801229e:	2080      	movs	r0, #128	; 0x80
 80122a0:	18c9      	adds	r1, r1, r3
 80122a2:	424b      	negs	r3, r1
 80122a4:	4159      	adcs	r1, r3
 80122a6:	2380      	movs	r3, #128	; 0x80
 80122a8:	0100      	lsls	r0, r0, #4
 80122aa:	00db      	lsls	r3, r3, #3
 80122ac:	6029      	str	r1, [r5, #0]
 80122ae:	6023      	str	r3, [r4, #0]
 80122b0:	b016      	add	sp, #88	; 0x58
 80122b2:	bd70      	pop	{r4, r5, r6, pc}
 80122b4:	2380      	movs	r3, #128	; 0x80
 80122b6:	00db      	lsls	r3, r3, #3
 80122b8:	e7e5      	b.n	8012286 <__swhatbuf_r+0x22>
 80122ba:	46c0      	nop			; (mov r8, r8)
 80122bc:	ffffe000 	.word	0xffffe000

080122c0 <__smakebuf_r>:
 80122c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80122c2:	2602      	movs	r6, #2
 80122c4:	898b      	ldrh	r3, [r1, #12]
 80122c6:	0005      	movs	r5, r0
 80122c8:	000c      	movs	r4, r1
 80122ca:	4233      	tst	r3, r6
 80122cc:	d006      	beq.n	80122dc <__smakebuf_r+0x1c>
 80122ce:	0023      	movs	r3, r4
 80122d0:	3343      	adds	r3, #67	; 0x43
 80122d2:	6023      	str	r3, [r4, #0]
 80122d4:	6123      	str	r3, [r4, #16]
 80122d6:	2301      	movs	r3, #1
 80122d8:	6163      	str	r3, [r4, #20]
 80122da:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80122dc:	466a      	mov	r2, sp
 80122de:	ab01      	add	r3, sp, #4
 80122e0:	f7ff ffc0 	bl	8012264 <__swhatbuf_r>
 80122e4:	9900      	ldr	r1, [sp, #0]
 80122e6:	0007      	movs	r7, r0
 80122e8:	0028      	movs	r0, r5
 80122ea:	f7f8 f933 	bl	800a554 <_malloc_r>
 80122ee:	2800      	cmp	r0, #0
 80122f0:	d108      	bne.n	8012304 <__smakebuf_r+0x44>
 80122f2:	220c      	movs	r2, #12
 80122f4:	5ea3      	ldrsh	r3, [r4, r2]
 80122f6:	059a      	lsls	r2, r3, #22
 80122f8:	d4ef      	bmi.n	80122da <__smakebuf_r+0x1a>
 80122fa:	2203      	movs	r2, #3
 80122fc:	4393      	bics	r3, r2
 80122fe:	431e      	orrs	r6, r3
 8012300:	81a6      	strh	r6, [r4, #12]
 8012302:	e7e4      	b.n	80122ce <__smakebuf_r+0xe>
 8012304:	2380      	movs	r3, #128	; 0x80
 8012306:	89a2      	ldrh	r2, [r4, #12]
 8012308:	6020      	str	r0, [r4, #0]
 801230a:	4313      	orrs	r3, r2
 801230c:	81a3      	strh	r3, [r4, #12]
 801230e:	9b00      	ldr	r3, [sp, #0]
 8012310:	6120      	str	r0, [r4, #16]
 8012312:	6163      	str	r3, [r4, #20]
 8012314:	9b01      	ldr	r3, [sp, #4]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d00c      	beq.n	8012334 <__smakebuf_r+0x74>
 801231a:	0028      	movs	r0, r5
 801231c:	230e      	movs	r3, #14
 801231e:	5ee1      	ldrsh	r1, [r4, r3]
 8012320:	f000 f8a6 	bl	8012470 <_isatty_r>
 8012324:	2800      	cmp	r0, #0
 8012326:	d005      	beq.n	8012334 <__smakebuf_r+0x74>
 8012328:	2303      	movs	r3, #3
 801232a:	89a2      	ldrh	r2, [r4, #12]
 801232c:	439a      	bics	r2, r3
 801232e:	3b02      	subs	r3, #2
 8012330:	4313      	orrs	r3, r2
 8012332:	81a3      	strh	r3, [r4, #12]
 8012334:	89a3      	ldrh	r3, [r4, #12]
 8012336:	433b      	orrs	r3, r7
 8012338:	81a3      	strh	r3, [r4, #12]
 801233a:	e7ce      	b.n	80122da <__smakebuf_r+0x1a>

0801233c <__swbuf_r>:
 801233c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801233e:	0006      	movs	r6, r0
 8012340:	000d      	movs	r5, r1
 8012342:	0014      	movs	r4, r2
 8012344:	2800      	cmp	r0, #0
 8012346:	d004      	beq.n	8012352 <__swbuf_r+0x16>
 8012348:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801234a:	2b00      	cmp	r3, #0
 801234c:	d101      	bne.n	8012352 <__swbuf_r+0x16>
 801234e:	f7f9 fa83 	bl	800b858 <__sinit>
 8012352:	69a3      	ldr	r3, [r4, #24]
 8012354:	60a3      	str	r3, [r4, #8]
 8012356:	89a3      	ldrh	r3, [r4, #12]
 8012358:	071b      	lsls	r3, r3, #28
 801235a:	d52e      	bpl.n	80123ba <__swbuf_r+0x7e>
 801235c:	6923      	ldr	r3, [r4, #16]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d02b      	beq.n	80123ba <__swbuf_r+0x7e>
 8012362:	230c      	movs	r3, #12
 8012364:	5ee2      	ldrsh	r2, [r4, r3]
 8012366:	2380      	movs	r3, #128	; 0x80
 8012368:	019b      	lsls	r3, r3, #6
 801236a:	b2ef      	uxtb	r7, r5
 801236c:	b2ed      	uxtb	r5, r5
 801236e:	421a      	tst	r2, r3
 8012370:	d02c      	beq.n	80123cc <__swbuf_r+0x90>
 8012372:	6923      	ldr	r3, [r4, #16]
 8012374:	6820      	ldr	r0, [r4, #0]
 8012376:	1ac0      	subs	r0, r0, r3
 8012378:	6963      	ldr	r3, [r4, #20]
 801237a:	4283      	cmp	r3, r0
 801237c:	dc05      	bgt.n	801238a <__swbuf_r+0x4e>
 801237e:	0021      	movs	r1, r4
 8012380:	0030      	movs	r0, r6
 8012382:	f7fd fab3 	bl	800f8ec <_fflush_r>
 8012386:	2800      	cmp	r0, #0
 8012388:	d11d      	bne.n	80123c6 <__swbuf_r+0x8a>
 801238a:	68a3      	ldr	r3, [r4, #8]
 801238c:	3001      	adds	r0, #1
 801238e:	3b01      	subs	r3, #1
 8012390:	60a3      	str	r3, [r4, #8]
 8012392:	6823      	ldr	r3, [r4, #0]
 8012394:	1c5a      	adds	r2, r3, #1
 8012396:	6022      	str	r2, [r4, #0]
 8012398:	701f      	strb	r7, [r3, #0]
 801239a:	6963      	ldr	r3, [r4, #20]
 801239c:	4283      	cmp	r3, r0
 801239e:	d004      	beq.n	80123aa <__swbuf_r+0x6e>
 80123a0:	89a3      	ldrh	r3, [r4, #12]
 80123a2:	07db      	lsls	r3, r3, #31
 80123a4:	d507      	bpl.n	80123b6 <__swbuf_r+0x7a>
 80123a6:	2d0a      	cmp	r5, #10
 80123a8:	d105      	bne.n	80123b6 <__swbuf_r+0x7a>
 80123aa:	0021      	movs	r1, r4
 80123ac:	0030      	movs	r0, r6
 80123ae:	f7fd fa9d 	bl	800f8ec <_fflush_r>
 80123b2:	2800      	cmp	r0, #0
 80123b4:	d107      	bne.n	80123c6 <__swbuf_r+0x8a>
 80123b6:	0028      	movs	r0, r5
 80123b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123ba:	0021      	movs	r1, r4
 80123bc:	0030      	movs	r0, r6
 80123be:	f7ff fe53 	bl	8012068 <__swsetup_r>
 80123c2:	2800      	cmp	r0, #0
 80123c4:	d0cd      	beq.n	8012362 <__swbuf_r+0x26>
 80123c6:	2501      	movs	r5, #1
 80123c8:	426d      	negs	r5, r5
 80123ca:	e7f4      	b.n	80123b6 <__swbuf_r+0x7a>
 80123cc:	4313      	orrs	r3, r2
 80123ce:	81a3      	strh	r3, [r4, #12]
 80123d0:	4a02      	ldr	r2, [pc, #8]	; (80123dc <__swbuf_r+0xa0>)
 80123d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80123d4:	4013      	ands	r3, r2
 80123d6:	6663      	str	r3, [r4, #100]	; 0x64
 80123d8:	e7cb      	b.n	8012372 <__swbuf_r+0x36>
 80123da:	46c0      	nop			; (mov r8, r8)
 80123dc:	ffffdfff 	.word	0xffffdfff

080123e0 <_raise_r>:
 80123e0:	b570      	push	{r4, r5, r6, lr}
 80123e2:	0004      	movs	r4, r0
 80123e4:	000d      	movs	r5, r1
 80123e6:	291f      	cmp	r1, #31
 80123e8:	d904      	bls.n	80123f4 <_raise_r+0x14>
 80123ea:	2316      	movs	r3, #22
 80123ec:	6003      	str	r3, [r0, #0]
 80123ee:	2001      	movs	r0, #1
 80123f0:	4240      	negs	r0, r0
 80123f2:	bd70      	pop	{r4, r5, r6, pc}
 80123f4:	0003      	movs	r3, r0
 80123f6:	33fc      	adds	r3, #252	; 0xfc
 80123f8:	69db      	ldr	r3, [r3, #28]
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d004      	beq.n	8012408 <_raise_r+0x28>
 80123fe:	008a      	lsls	r2, r1, #2
 8012400:	189b      	adds	r3, r3, r2
 8012402:	681a      	ldr	r2, [r3, #0]
 8012404:	2a00      	cmp	r2, #0
 8012406:	d108      	bne.n	801241a <_raise_r+0x3a>
 8012408:	0020      	movs	r0, r4
 801240a:	f000 f855 	bl	80124b8 <_getpid_r>
 801240e:	002a      	movs	r2, r5
 8012410:	0001      	movs	r1, r0
 8012412:	0020      	movs	r0, r4
 8012414:	f000 f83e 	bl	8012494 <_kill_r>
 8012418:	e7eb      	b.n	80123f2 <_raise_r+0x12>
 801241a:	2000      	movs	r0, #0
 801241c:	2a01      	cmp	r2, #1
 801241e:	d0e8      	beq.n	80123f2 <_raise_r+0x12>
 8012420:	1c51      	adds	r1, r2, #1
 8012422:	d103      	bne.n	801242c <_raise_r+0x4c>
 8012424:	2316      	movs	r3, #22
 8012426:	3001      	adds	r0, #1
 8012428:	6023      	str	r3, [r4, #0]
 801242a:	e7e2      	b.n	80123f2 <_raise_r+0x12>
 801242c:	2400      	movs	r4, #0
 801242e:	0028      	movs	r0, r5
 8012430:	601c      	str	r4, [r3, #0]
 8012432:	4790      	blx	r2
 8012434:	0020      	movs	r0, r4
 8012436:	e7dc      	b.n	80123f2 <_raise_r+0x12>

08012438 <raise>:
 8012438:	b510      	push	{r4, lr}
 801243a:	4b03      	ldr	r3, [pc, #12]	; (8012448 <raise+0x10>)
 801243c:	0001      	movs	r1, r0
 801243e:	6818      	ldr	r0, [r3, #0]
 8012440:	f7ff ffce 	bl	80123e0 <_raise_r>
 8012444:	bd10      	pop	{r4, pc}
 8012446:	46c0      	nop			; (mov r8, r8)
 8012448:	200006d8 	.word	0x200006d8

0801244c <_fstat_r>:
 801244c:	2300      	movs	r3, #0
 801244e:	b570      	push	{r4, r5, r6, lr}
 8012450:	4d06      	ldr	r5, [pc, #24]	; (801246c <_fstat_r+0x20>)
 8012452:	0004      	movs	r4, r0
 8012454:	0008      	movs	r0, r1
 8012456:	0011      	movs	r1, r2
 8012458:	602b      	str	r3, [r5, #0]
 801245a:	f7f1 f914 	bl	8003686 <_fstat>
 801245e:	1c43      	adds	r3, r0, #1
 8012460:	d103      	bne.n	801246a <_fstat_r+0x1e>
 8012462:	682b      	ldr	r3, [r5, #0]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d000      	beq.n	801246a <_fstat_r+0x1e>
 8012468:	6023      	str	r3, [r4, #0]
 801246a:	bd70      	pop	{r4, r5, r6, pc}
 801246c:	20000cac 	.word	0x20000cac

08012470 <_isatty_r>:
 8012470:	2300      	movs	r3, #0
 8012472:	b570      	push	{r4, r5, r6, lr}
 8012474:	4d06      	ldr	r5, [pc, #24]	; (8012490 <_isatty_r+0x20>)
 8012476:	0004      	movs	r4, r0
 8012478:	0008      	movs	r0, r1
 801247a:	602b      	str	r3, [r5, #0]
 801247c:	f7f1 f911 	bl	80036a2 <_isatty>
 8012480:	1c43      	adds	r3, r0, #1
 8012482:	d103      	bne.n	801248c <_isatty_r+0x1c>
 8012484:	682b      	ldr	r3, [r5, #0]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d000      	beq.n	801248c <_isatty_r+0x1c>
 801248a:	6023      	str	r3, [r4, #0]
 801248c:	bd70      	pop	{r4, r5, r6, pc}
 801248e:	46c0      	nop			; (mov r8, r8)
 8012490:	20000cac 	.word	0x20000cac

08012494 <_kill_r>:
 8012494:	2300      	movs	r3, #0
 8012496:	b570      	push	{r4, r5, r6, lr}
 8012498:	4d06      	ldr	r5, [pc, #24]	; (80124b4 <_kill_r+0x20>)
 801249a:	0004      	movs	r4, r0
 801249c:	0008      	movs	r0, r1
 801249e:	0011      	movs	r1, r2
 80124a0:	602b      	str	r3, [r5, #0]
 80124a2:	f7f1 f891 	bl	80035c8 <_kill>
 80124a6:	1c43      	adds	r3, r0, #1
 80124a8:	d103      	bne.n	80124b2 <_kill_r+0x1e>
 80124aa:	682b      	ldr	r3, [r5, #0]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d000      	beq.n	80124b2 <_kill_r+0x1e>
 80124b0:	6023      	str	r3, [r4, #0]
 80124b2:	bd70      	pop	{r4, r5, r6, pc}
 80124b4:	20000cac 	.word	0x20000cac

080124b8 <_getpid_r>:
 80124b8:	b510      	push	{r4, lr}
 80124ba:	f7f1 f87f 	bl	80035bc <_getpid>
 80124be:	bd10      	pop	{r4, pc}

080124c0 <round>:
 80124c0:	b570      	push	{r4, r5, r6, lr}
 80124c2:	004a      	lsls	r2, r1, #1
 80124c4:	000d      	movs	r5, r1
 80124c6:	4920      	ldr	r1, [pc, #128]	; (8012548 <round+0x88>)
 80124c8:	0d52      	lsrs	r2, r2, #21
 80124ca:	1851      	adds	r1, r2, r1
 80124cc:	0006      	movs	r6, r0
 80124ce:	2913      	cmp	r1, #19
 80124d0:	dc18      	bgt.n	8012504 <round+0x44>
 80124d2:	2900      	cmp	r1, #0
 80124d4:	da09      	bge.n	80124ea <round+0x2a>
 80124d6:	0feb      	lsrs	r3, r5, #31
 80124d8:	2200      	movs	r2, #0
 80124da:	07db      	lsls	r3, r3, #31
 80124dc:	3101      	adds	r1, #1
 80124de:	d101      	bne.n	80124e4 <round+0x24>
 80124e0:	491a      	ldr	r1, [pc, #104]	; (801254c <round+0x8c>)
 80124e2:	430b      	orrs	r3, r1
 80124e4:	0019      	movs	r1, r3
 80124e6:	0010      	movs	r0, r2
 80124e8:	e017      	b.n	801251a <round+0x5a>
 80124ea:	4c19      	ldr	r4, [pc, #100]	; (8012550 <round+0x90>)
 80124ec:	410c      	asrs	r4, r1
 80124ee:	0022      	movs	r2, r4
 80124f0:	402a      	ands	r2, r5
 80124f2:	4302      	orrs	r2, r0
 80124f4:	d013      	beq.n	801251e <round+0x5e>
 80124f6:	2280      	movs	r2, #128	; 0x80
 80124f8:	0312      	lsls	r2, r2, #12
 80124fa:	410a      	asrs	r2, r1
 80124fc:	1953      	adds	r3, r2, r5
 80124fe:	43a3      	bics	r3, r4
 8012500:	2200      	movs	r2, #0
 8012502:	e7ef      	b.n	80124e4 <round+0x24>
 8012504:	2933      	cmp	r1, #51	; 0x33
 8012506:	dd0d      	ble.n	8012524 <round+0x64>
 8012508:	2380      	movs	r3, #128	; 0x80
 801250a:	00db      	lsls	r3, r3, #3
 801250c:	4299      	cmp	r1, r3
 801250e:	d106      	bne.n	801251e <round+0x5e>
 8012510:	0002      	movs	r2, r0
 8012512:	002b      	movs	r3, r5
 8012514:	0029      	movs	r1, r5
 8012516:	f7ee f94f 	bl	80007b8 <__aeabi_dadd>
 801251a:	0006      	movs	r6, r0
 801251c:	000d      	movs	r5, r1
 801251e:	0030      	movs	r0, r6
 8012520:	0029      	movs	r1, r5
 8012522:	bd70      	pop	{r4, r5, r6, pc}
 8012524:	4c0b      	ldr	r4, [pc, #44]	; (8012554 <round+0x94>)
 8012526:	1912      	adds	r2, r2, r4
 8012528:	2401      	movs	r4, #1
 801252a:	4264      	negs	r4, r4
 801252c:	40d4      	lsrs	r4, r2
 801252e:	4220      	tst	r0, r4
 8012530:	d0f5      	beq.n	801251e <round+0x5e>
 8012532:	2233      	movs	r2, #51	; 0x33
 8012534:	1a51      	subs	r1, r2, r1
 8012536:	3a32      	subs	r2, #50	; 0x32
 8012538:	408a      	lsls	r2, r1
 801253a:	1812      	adds	r2, r2, r0
 801253c:	4282      	cmp	r2, r0
 801253e:	4180      	sbcs	r0, r0
 8012540:	4240      	negs	r0, r0
 8012542:	182b      	adds	r3, r5, r0
 8012544:	43a2      	bics	r2, r4
 8012546:	e7cd      	b.n	80124e4 <round+0x24>
 8012548:	fffffc01 	.word	0xfffffc01
 801254c:	3ff00000 	.word	0x3ff00000
 8012550:	000fffff 	.word	0x000fffff
 8012554:	fffffbed 	.word	0xfffffbed

08012558 <_init>:
 8012558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801255a:	46c0      	nop			; (mov r8, r8)
 801255c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801255e:	bc08      	pop	{r3}
 8012560:	469e      	mov	lr, r3
 8012562:	4770      	bx	lr

08012564 <_fini>:
 8012564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012566:	46c0      	nop			; (mov r8, r8)
 8012568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801256a:	bc08      	pop	{r3}
 801256c:	469e      	mov	lr, r3
 801256e:	4770      	bx	lr
